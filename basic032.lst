00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 D4 E3 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 41 83 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 40 81 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 41 81 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 82 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 80 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 40 81 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 41 83 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 4C C8 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 78 C5 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 54 B6 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 58 B8 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 B0 B3 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 BC 20 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 98 BF 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 24 52 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 D4 79 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 8C 77 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 64 89 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 80 5A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     14 F4 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     48 05 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     EC E5 05 F1 | 	add	objptr, ##41964
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     EC E5 85 F1 | 	sub	objptr, ##41964
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     40 08 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     94 0F B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     8C 09 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     50 07 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     5C D9 B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     EC E5 05 F1 | 	add	objptr, ##41964
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     EC E5 85 F1 | 	sub	objptr, ##41964
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     54 D7 B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     F4 D6 B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F4 E5 05 F1 | 	add	objptr, ##41972
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B6 E5 85 F1 | 	sub	objptr, ##41910
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B8 E5 05 F1 | 	add	objptr, ##41912
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B6 E5 85 F1 | 	sub	objptr, ##41910
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     84 D6 B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     5C EE B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F4 E5 05 F1 | 	add	objptr, ##41972
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F4 E5 85 F1 | 	sub	objptr, ##41972
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     78 F1 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     7C 04 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     D0 0B B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     CC 05 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     88 01 00 FF 
00ccc     26 49 06 F6 | 	mov	local22, ##@LR__5097
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     18 D5 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     AC 2A B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     BC 08 B2 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     C8 F5 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     F8 F7 B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     08 03 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     5C 0A B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     58 04 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     B4 D3 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     38 ED B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     2C ED B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     BC EC B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     88 EC B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     A8 EC B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     98 EC B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     58 D2 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     04 D2 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     D4 D1 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F4 E5 05 F1 | 	add	objptr, ##41972
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B6 E5 85 F1 | 	sub	objptr, ##41910
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B8 E5 05 F1 | 	add	objptr, ##41912
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B6 E5 85 F1 | 	sub	objptr, ##41910
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     6C D1 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     44 E9 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F4 E5 05 F1 | 	add	objptr, ##41972
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F4 E5 85 F1 | 	sub	objptr, ##41972
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     20 EA B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     54 D0 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     00 D0 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     D0 CF B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F4 E5 05 F1 | 	add	objptr, ##41972
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B6 E5 85 F1 | 	sub	objptr, ##41910
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B8 E5 05 F1 | 	add	objptr, ##41912
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B6 E5 85 F1 | 	sub	objptr, ##41910
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     68 CF B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     40 E7 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F4 E5 05 F1 | 	add	objptr, ##41972
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F4 E5 85 F1 | 	sub	objptr, ##41972
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     88 01 00 FF 
01328     27 49 06 F6 | 	mov	local22, ##@LR__5098
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 34 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1A 29 02 F6 | 	mov	local06, local12
01394     14 13 02 F6 | 	mov	arg01, local06
01398     68 E8 B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 32 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 34 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1A 29 02 F6 | 	mov	local06, local12
013f4     14 13 02 F6 | 	mov	arg01, local06
013f8     08 E8 B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 32 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 28 E2 FA | 	rdword	local06, objptr
0140c     02 28 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 28 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 2C 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     16 2B 02 F6 | 	mov	local07, local08
01434     15 29 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 28 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 28 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 34 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1A 29 02 F6 | 	mov	local06, local12
01470     14 13 02 F6 | 	mov	arg01, local06
01474     5C E7 B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 32 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 28 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     14 13 02 F6 | 	mov	arg01, local06
014d0     00 E7 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 32 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 28 02 FB | 	rdlong	local06, objptr
014e8     14 35 22 F6 | 	not	local12, local06
014ec     F2 34 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 34 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 28 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     4C D5 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 28 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     3C D5 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 24 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     10 03 B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     E8 02 B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     C0 02 B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 1E 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 20 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     10 13 02 F6 | 	mov	arg01, local02
01650     18 F8 B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     10 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     68 F8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 22 02 F6 | 	mov	local03, result1
0166c     10 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     58 F8 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 22 06 F1 | 	add	local03, ##49152
01680     0F 22 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     11 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     0F 23 02 F6 | 	mov	local03, local01
016a4     02 22 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 22 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     11 15 62 FC | 	wrlong	arg02, local03
016c0     0F 23 02 F6 | 	mov	local03, local01
016c4     02 22 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 22 02 F1 | 	add	local03, objptr
016d0     10 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     BC F7 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     11 FB 61 FC | 	wrlong	result1, local03
016e4     01 1E 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 20 06 F1 | 	add	local02, #1
016ec     07 20 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 1E 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     0F 23 02 F6 | 	mov	local03, local01
01704     02 22 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 22 02 F1 | 	add	local03, objptr
01714     11 01 68 FC | 	wrlong	#0, local03
01718     0F 23 02 F6 | 	mov	local03, local01
0171c     02 22 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 22 02 F1 | 	add	local03, objptr
01728     11 01 68 FC | 	wrlong	#0, local03
0172c     01 1E 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     20 23 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     58 22 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 1E 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 20 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     10 23 02 F6 | 	mov	local03, local02
017c4     02 22 66 F0 | 	shl	local03, #2
017c8     A7 22 02 F1 | 	add	local03, fp
017cc     11 01 68 FC | 	wrlong	#0, local03
017d0     01 20 06 F1 | 	add	local02, #1
017d4     7E 20 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 20 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     10 25 02 F6 | 	mov	local04, local02
017f4     03 24 66 F0 | 	shl	local04, #3
017f8     F2 24 02 F1 | 	add	local04, objptr
017fc     88 01 00 FF 
01800     28 17 06 F6 | 	mov	arg03, ##@LR__5099
01804     12 17 62 FC | 	wrlong	arg03, local04
01808     10 25 02 F6 | 	mov	local04, local02
0180c     03 24 66 F0 | 	shl	local04, #3
01810     F2 26 02 F6 | 	mov	local05, objptr
01814     F2 24 02 F1 | 	add	local04, objptr
01818     00 28 06 F6 | 	mov	local06, #0
0181c     04 24 06 F1 | 	add	local04, #4
01820     12 01 68 FC | 	wrlong	#0, local04
01824     01 20 06 F1 | 	add	local02, #1
01828     7E 20 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     48 22 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     80 21 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     88 01 00 FF 
01860     29 25 06 F6 | 	mov	local04, ##@LR__5100
01864     1A 00 00 FF 
01868     DC E5 05 F1 | 	add	objptr, ##13788
0186c     F2 24 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     DC E5 85 F1 | 	sub	objptr, ##13788
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 2B 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 2A 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 2B 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     FC E5 05 F1 | 	add	objptr, ##41980
018a4     F2 2A 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     FC E5 85 F1 | 	sub	objptr, ##41980
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 2C 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 20 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 2B 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     15 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 2A 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 2B 82 F1 | 	sub	local07, arg01
018e8     15 2F 02 F6 | 	mov	local09, local07
018ec     01 2E 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     17 21 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     00 1E B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     88 01 00 FF 
01920     2A 15 06 F6 | 	mov	arg02, ##@LR__5101
01924     84 FC B1 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 2C 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     10 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     C0 1D B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     88 01 00 FF 
01960     2C 15 06 F6 | 	mov	arg02, ##@LR__5102
01964     44 FC B1 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 2C 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     10 25 02 F6 | 	mov	local04, local02
01978     03 24 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 26 02 F6 | 	mov	local05, objptr
01988     F2 24 02 F1 | 	add	local04, objptr
0198c     04 24 06 F1 | 	add	local04, #4
01990     12 2D 62 FC | 	wrlong	local08, local04
01994     01 20 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 20 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     10 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     50 1D B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     88 01 00 FF 
019d0     2E 31 06 F6 | 	mov	local10, ##@LR__5103
019d4     18 15 02 F6 | 	mov	arg02, local10
019d8     D0 FB B1 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     10 27 02 F6 | 	mov	local05, local02
019e8     03 26 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 28 02 F6 | 	mov	local06, objptr
019f8     F2 26 02 F1 | 	add	local05, objptr
019fc     04 26 06 F1 | 	add	local05, #4
01a00     13 33 02 FB | 	rdlong	local11, local05
01a04     04 26 86 F1 | 	sub	local05, #4
01a08     19 35 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     FC E5 05 F1 | 	add	objptr, ##41980
01a20     F2 36 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     FC E5 85 F1 | 	sub	objptr, ##41980
01a2c     1B 39 02 F6 | 	mov	local14, local13
01a30     1C 21 52 F2 | 	cmps	local02, local14 wc
01a34     01 20 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     FC E5 05 F1 | 	add	objptr, ##41980
01a44     F2 24 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     FC E5 85 F1 | 	sub	objptr, ##41980
01a50     12 21 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 28 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     14 13 02 F6 | 	mov	arg01, local06
01a70     09 2B 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     15 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 2A 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 2B 82 F1 | 	sub	local07, arg01
01a88     15 27 02 F6 | 	mov	local05, local07
01a8c     13 15 02 F6 | 	mov	arg02, local05
01a90     10 15 82 F1 | 	sub	arg02, local02
01a94     14 13 02 F6 | 	mov	arg01, local06
01a98     EC 1B B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     EC 1F B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     24 1F B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     00 E4 05 F1 | 	add	objptr, ##41984
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E4 E5 85 F1 | 	sub	objptr, ##13796
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 20 86 F1 | 	sub	local02, #1
01ad0     10 15 02 F6 | 	mov	arg02, local02
01ad4     28 1B B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     B0 1F B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     E8 1E B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     88 01 00 FF 
01b04     30 25 06 F6 | 	mov	local04, ##@LR__5104
01b08     52 00 00 FF 
01b0c     00 E4 05 F1 | 	add	objptr, ##41984
01b10     F2 24 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     00 E4 85 F1 | 	sub	objptr, ##41984
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 24 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     00 E4 05 F1 | 	add	objptr, ##41984
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     00 E4 85 F1 | 	sub	objptr, ##41984
01b50     88 01 00 FF 
01b54     31 29 06 F6 | 	mov	local06, ##@LR__5105
01b58     14 15 02 F6 | 	mov	arg02, local06
01b5c     4C FA B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 24 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     00 E4 05 F1 | 	add	objptr, ##41984
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     00 E4 85 F1 | 	sub	objptr, ##41984
01bb0     88 01 00 FF 
01bb4     32 15 06 F6 | 	mov	arg02, ##@LR__5106
01bb8     F0 F9 B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 24 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 24 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     00 E4 05 F1 | 	add	objptr, ##41984
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     00 E4 85 F1 | 	sub	objptr, ##41984
01c08     88 01 00 FF 
01c0c     33 15 06 F6 | 	mov	arg02, ##@LR__5107
01c10     98 F9 B1 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 24 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 24 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     00 E4 05 F1 | 	add	objptr, ##41984
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     00 E4 85 F1 | 	sub	objptr, ##41984
01c60     88 01 00 FF 
01c64     34 15 06 F6 | 	mov	arg02, ##@LR__5108
01c68     40 F9 B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 20 06 F6 | 	mov	local02, #0
01c94     01 3A 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 20 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     10 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     5C 1A B2 FD | 	call	#__system__Mid_S
01cbc     FD 3C 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     1E 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     1D 23 02 F6 | 	mov	local03, local15
01cd4     02 22 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 22 02 F1 | 	add	local03, fp
01ce0     11 21 62 FC | 	wrlong	local02, local03
01ce4     01 3A 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     FC E5 05 F1 | 	add	objptr, ##41980
01cf4     F2 24 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     FC E5 85 F1 | 	sub	objptr, ##41980
01d00     12 21 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     1D 23 02 F6 | 	mov	local03, local15
01d0c     02 22 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 30 02 F6 | 	mov	local10, fp
01d18     A7 22 02 F1 | 	add	local03, fp
01d1c     11 21 62 FC | 	wrlong	local02, local03
01d20     00 3E 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 20 06 F6 | 	mov	local02, #0
01d28     1D 41 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     20 21 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     10 23 02 F6 | 	mov	local03, local02
01d3c     02 22 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 22 02 F1 | 	add	local03, fp
01d48     11 27 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     08 E4 05 F1 | 	add	objptr, ##41992
01d54     F2 26 62 FC | 	wrlong	local05, objptr
01d58     10 23 02 F6 | 	mov	local03, local02
01d5c     01 22 06 F1 | 	add	local03, #1
01d60     02 22 66 F0 | 	shl	local03, #2
01d64     A7 30 02 F6 | 	mov	local10, fp
01d68     A7 22 02 F1 | 	add	local03, fp
01d6c     11 27 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 26 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 24 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     08 E4 85 F1 | 	sub	objptr, ##41992
01d88     01 24 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     EC E5 05 F1 | 	add	objptr, ##13804
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     08 E4 85 F1 | 	sub	objptr, ##41992
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     5C 19 B2 FD | 	call	#__system__Mid_S
01dbc     FD 42 02 F6 | 	mov	local19, result1
01dc0     88 01 00 FF 
01dc4     35 15 06 F6 | 	mov	arg02, ##@LR__5109
01dc8     21 13 02 F6 | 	mov	arg01, local19
01dcc     DC F7 B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     1F 31 02 F6 | 	mov	local10, local17
01ddc     03 30 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 30 02 F1 | 	add	local10, objptr
01dec     18 43 62 FC | 	wrlong	local19, local10
01df0     01 3E 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     EC E5 05 F1 | 	add	objptr, ##13804
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 32 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     08 E4 85 F1 | 	sub	objptr, ##41992
01e30     19 35 02 F6 | 	mov	local12, local11
01e34     1A 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     D8 18 B2 FD | 	call	#__system__Mid_S
01e40     FD 42 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     88 01 00 FF 
01e48     36 15 06 F6 | 	mov	arg02, ##@LR__5110
01e4c     21 13 02 F6 | 	mov	arg01, local19
01e50     58 F7 B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     1F 31 02 F6 | 	mov	local10, local17
01e60     03 30 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 30 02 F1 | 	add	local10, objptr
01e70     18 43 62 FC | 	wrlong	local19, local10
01e74     01 3E 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 20 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 24 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 32 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     19 13 02 F6 | 	mov	arg01, local11
01ed0     24 4A B0 FD | 	call	#_isdec
01ed4     FD 34 02 F6 | 	mov	local12, result1
01ed8     1A 29 22 F6 | 	not	local06, local12
01edc     00 28 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     1F 21 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     10 27 02 F6 | 	mov	local05, local02
01ef8     01 26 86 F1 | 	sub	local05, #1
01efc     03 26 66 F0 | 	shl	local05, #3
01f00     F2 26 02 F1 | 	add	local05, objptr
01f04     13 25 02 FB | 	rdlong	local04, local05
01f08     10 29 02 F6 | 	mov	local06, local02
01f0c     01 28 86 F1 | 	sub	local06, #1
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     04 28 06 F1 | 	add	local06, #4
01f1c     14 23 02 FB | 	rdlong	local03, local06
01f20     10 29 02 F6 | 	mov	local06, local02
01f24     03 28 66 F0 | 	shl	local06, #3
01f28     F2 34 02 F6 | 	mov	local12, objptr
01f2c     F2 28 02 F1 | 	add	local06, objptr
01f30     14 25 62 FC | 	wrlong	local04, local06
01f34     10 33 02 F6 | 	mov	local11, local02
01f38     19 37 02 F6 | 	mov	local13, local11
01f3c     03 36 66 F0 | 	shl	local13, #3
01f40     F2 36 02 F1 | 	add	local13, objptr
01f44     04 36 06 F1 | 	add	local13, #4
01f48     1B 23 62 FC | 	wrlong	local03, local13
01f4c     01 20 86 F1 | 	sub	local02, #1
01f50     01 20 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     88 01 00 FF 
01f5c     37 25 06 F6 | 	mov	local04, ##@LR__5111
01f60     F2 24 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 3E 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 20 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     10 27 02 F6 | 	mov	local05, local02
01f78     03 26 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 26 02 F1 | 	add	local05, objptr
01f88     13 13 02 FB | 	rdlong	arg01, local05
01f8c     88 01 00 FF 
01f90     39 15 06 F6 | 	mov	arg02, ##@LR__5112
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     0C F6 B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 20 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     10 45 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     10 31 02 F6 | 	mov	local10, local02
01fb4     01 30 06 F1 | 	add	local10, #1
01fb8     03 30 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 30 02 F1 | 	add	local10, objptr
01fc8     18 43 02 FB | 	rdlong	local19, local10
01fcc     22 31 02 F6 | 	mov	local10, local20
01fd0     03 30 66 F0 | 	shl	local10, #3
01fd4     F2 30 02 F1 | 	add	local10, objptr
01fd8     22 33 02 F6 | 	mov	local11, local20
01fdc     19 39 02 F6 | 	mov	local14, local11
01fe0     03 38 66 F0 | 	shl	local14, #3
01fe4     F2 38 02 F1 | 	add	local14, objptr
01fe8     1C 13 02 FB | 	rdlong	arg01, local14
01fec     21 35 02 F6 | 	mov	local12, local19
01ff0     1A 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     E0 F5 B1 FD | 	call	#__system___string_concat
02000     18 FB 61 FC | 	wrlong	result1, local10
02004     10 3B 02 F6 | 	mov	local15, local02
02008     01 3A 06 F1 | 	add	local15, #1
0200c     1F 47 02 F6 | 	mov	local21, local17
02010     01 46 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     23 3B 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     1D 27 02 F6 | 	mov	local05, local15
02024     01 26 06 F1 | 	add	local05, #1
02028     03 26 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 26 02 F1 | 	add	local05, objptr
02038     13 25 02 FB | 	rdlong	local04, local05
0203c     1D 29 02 F6 | 	mov	local06, local15
02040     01 28 06 F1 | 	add	local06, #1
02044     03 28 66 F0 | 	shl	local06, #3
02048     F2 28 02 F1 | 	add	local06, objptr
0204c     04 28 06 F1 | 	add	local06, #4
02050     14 23 02 FB | 	rdlong	local03, local06
02054     1D 29 02 F6 | 	mov	local06, local15
02058     03 28 66 F0 | 	shl	local06, #3
0205c     F2 34 02 F6 | 	mov	local12, objptr
02060     F2 28 02 F1 | 	add	local06, objptr
02064     14 25 62 FC | 	wrlong	local04, local06
02068     1D 33 02 F6 | 	mov	local11, local15
0206c     19 37 02 F6 | 	mov	local13, local11
02070     03 36 66 F0 | 	shl	local13, #3
02074     F2 36 02 F1 | 	add	local13, objptr
02078     04 36 06 F1 | 	add	local13, #4
0207c     1B 23 62 FC | 	wrlong	local03, local13
02080     01 3A 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 3E 86 F1 | 	sub	local17, #1
02094     88 01 00 FF 
02098     3B 15 06 F6 | 	mov	arg02, ##@LR__5113
0209c     21 13 02 F6 | 	mov	arg01, local19
020a0     08 F5 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     88 01 00 FF 
020b4     3D 15 06 F6 | 	mov	arg02, ##@LR__5114
020b8     21 13 02 F6 | 	mov	arg01, local19
020bc     EC F4 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 3E 06 51 |  if_ne	add	local17, #1
020c8     01 20 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     1F 21 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 20 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     10 27 02 F6 | 	mov	local05, local02
020dc     03 26 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 28 02 F6 | 	mov	local06, objptr
020ec     F2 26 02 F1 | 	add	local05, objptr
020f0     13 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     84 15 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     88 01 00 FF 
0210c     3F 15 06 F6 | 	mov	arg02, ##@LR__5115
02110     98 F4 B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     10 29 02 F6 | 	mov	local06, local02
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 34 02 F6 | 	mov	local12, objptr
02134     F2 28 02 F1 | 	add	local06, objptr
02138     14 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     B4 14 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     88 01 00 FF 
02154     41 15 06 F6 | 	mov	arg02, ##@LR__5116
02158     50 F4 B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     10 31 02 F6 | 	mov	local10, local02
02168     03 30 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 30 02 F1 | 	add	local10, objptr
02178     10 39 02 F6 | 	mov	local14, local02
0217c     03 38 66 F0 | 	shl	local14, #3
02180     F2 38 02 F1 | 	add	local14, objptr
02184     1C 29 02 FB | 	rdlong	local06, local14
02188     10 37 02 F6 | 	mov	local13, local02
0218c     01 36 06 F1 | 	add	local13, #1
02190     03 36 66 F0 | 	shl	local13, #3
02194     F2 36 02 F1 | 	add	local13, objptr
02198     1B 35 02 FB | 	rdlong	local12, local13
0219c     10 49 02 F6 | 	mov	local22, local02
021a0     01 48 06 F1 | 	add	local22, #1
021a4     24 4B 02 F6 | 	mov	local23, local22
021a8     03 4A 66 F0 | 	shl	local23, #3
021ac     F2 4C 02 F6 | 	mov	local24, objptr
021b0     F2 4A 02 F1 | 	add	local23, objptr
021b4     25 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 2B 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 2A 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 2B 82 F1 | 	sub	local07, arg01
021d8     15 33 02 F6 | 	mov	local11, local07
021dc     01 32 86 F1 | 	sub	local11, #1
021e0     1A 13 02 F6 | 	mov	arg01, local12
021e4     19 15 02 F6 | 	mov	arg02, local11
021e8     9C 14 B2 FD | 	call	#__system__Right_S
021ec     FD 34 02 F6 | 	mov	local12, result1
021f0     14 13 02 F6 | 	mov	arg01, local06
021f4     1A 15 02 F6 | 	mov	arg02, local12
021f8     E4 F3 B1 FD | 	call	#__system___string_concat
021fc     FD 28 02 F6 | 	mov	local06, result1
02200     18 29 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     10 3B 02 F6 | 	mov	local15, local02
02208     01 3A 06 F1 | 	add	local15, #1
0220c     1F 4F 02 F6 | 	mov	local25, local17
02210     01 4E 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     27 3B 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     1D 27 02 F6 | 	mov	local05, local15
02224     01 26 06 F1 | 	add	local05, #1
02228     03 26 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 26 02 F1 | 	add	local05, objptr
02238     13 25 02 FB | 	rdlong	local04, local05
0223c     1D 29 02 F6 | 	mov	local06, local15
02240     01 28 06 F1 | 	add	local06, #1
02244     03 28 66 F0 | 	shl	local06, #3
02248     F2 28 02 F1 | 	add	local06, objptr
0224c     04 28 06 F1 | 	add	local06, #4
02250     14 23 02 FB | 	rdlong	local03, local06
02254     1D 29 02 F6 | 	mov	local06, local15
02258     03 28 66 F0 | 	shl	local06, #3
0225c     F2 34 02 F6 | 	mov	local12, objptr
02260     F2 28 02 F1 | 	add	local06, objptr
02264     14 25 62 FC | 	wrlong	local04, local06
02268     1D 33 02 F6 | 	mov	local11, local15
0226c     19 37 02 F6 | 	mov	local13, local11
02270     03 36 66 F0 | 	shl	local13, #3
02274     F2 36 02 F1 | 	add	local13, objptr
02278     04 36 06 F1 | 	add	local13, #4
0227c     1B 23 62 FC | 	wrlong	local03, local13
02280     01 3A 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 20 86 F1 | 	sub	local02, #1
02294     01 3E 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 20 06 F1 | 	add	local02, #1
0229c     1F 21 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 20 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     10 31 02 F6 | 	mov	local10, local02
022ac     03 30 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 30 02 F1 | 	add	local10, objptr
022bc     18 51 02 FB | 	rdlong	local26, local10
022c0     10 31 02 F6 | 	mov	local10, local02
022c4     01 30 06 F1 | 	add	local10, #1
022c8     03 30 66 F0 | 	shl	local10, #3
022cc     F2 30 02 F1 | 	add	local10, objptr
022d0     18 53 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     88 01 00 FF 
022d8     43 15 06 F6 | 	mov	arg02, ##@LR__5117
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     C0 F2 B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     88 01 00 FF 
022f8     45 15 06 F6 | 	mov	arg02, ##@LR__5118
022fc     28 13 02 F6 | 	mov	arg01, local26
02300     A8 F2 B1 FD | 	call	#__system___string_cmp
02304     FD 22 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     88 01 00 FF 
02310     47 29 06 F6 | 	mov	local06, ##@LR__5119
02314     28 13 02 F6 | 	mov	arg01, local26
02318     14 15 02 F6 | 	mov	arg02, local06
0231c     8C F2 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     88 01 00 FF 
0232c     49 35 06 F6 | 	mov	local12, ##@LR__5120
02330     28 13 02 F6 | 	mov	arg01, local26
02334     1A 15 02 F6 | 	mov	arg02, local12
02338     70 F2 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     88 01 00 FF 
02348     4B 33 06 F6 | 	mov	local11, ##@LR__5121
0234c     19 35 02 F6 | 	mov	local12, local11
02350     28 13 02 F6 | 	mov	arg01, local26
02354     1A 15 02 F6 | 	mov	arg02, local12
02358     50 F2 B1 FD | 	call	#__system___string_cmp
0235c     FD 28 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     88 01 00 FF 
02368     4D 33 06 F6 | 	mov	local11, ##@LR__5122
0236c     28 13 02 F6 | 	mov	arg01, local26
02370     19 15 02 F6 | 	mov	arg02, local11
02374     34 F2 B1 FD | 	call	#__system___string_cmp
02378     FD 34 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     88 01 00 FF 
02384     4F 39 06 F6 | 	mov	local14, ##@LR__5123
02388     28 13 02 F6 | 	mov	arg01, local26
0238c     1C 15 02 F6 | 	mov	arg02, local14
02390     18 F2 B1 FD | 	call	#__system___string_cmp
02394     FD 32 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     88 01 00 FF 
023a0     51 55 06 F6 | 	mov	local28, ##@LR__5124
023a4     2A 37 02 F6 | 	mov	local13, local28
023a8     29 13 02 F6 | 	mov	arg01, local27
023ac     1B 15 02 F6 | 	mov	arg02, local13
023b0     F8 F1 B1 FD | 	call	#__system___string_cmp
023b4     FD 38 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     88 01 00 FF 
023c0     53 55 06 F6 | 	mov	local28, ##@LR__5125
023c4     28 13 02 F6 | 	mov	arg01, local26
023c8     2A 15 02 F6 | 	mov	arg02, local28
023cc     DC F1 B1 FD | 	call	#__system___string_cmp
023d0     FD 36 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     88 01 00 FF 
023dc     55 4B 06 F6 | 	mov	local23, ##@LR__5126
023e0     25 49 02 F6 | 	mov	local22, local23
023e4     29 13 02 F6 | 	mov	arg01, local27
023e8     24 15 02 F6 | 	mov	arg02, local22
023ec     BC F1 B1 FD | 	call	#__system___string_cmp
023f0     FD 54 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     88 01 00 FF 
023fc     57 4B 06 F6 | 	mov	local23, ##@LR__5127
02400     28 13 02 F6 | 	mov	arg01, local26
02404     25 15 02 F6 | 	mov	arg02, local23
02408     A0 F1 B1 FD | 	call	#__system___string_cmp
0240c     FD 48 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     88 01 00 FF 
02418     59 57 06 F6 | 	mov	local29, ##@LR__5128
0241c     2B 4D 02 F6 | 	mov	local24, local29
02420     29 13 02 F6 | 	mov	arg01, local27
02424     26 15 02 F6 | 	mov	arg02, local24
02428     80 F1 B1 FD | 	call	#__system___string_cmp
0242c     FD 4A 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     88 01 00 FF 
02438     5B 59 06 F6 | 	mov	local30, ##@LR__5129
0243c     2C 57 02 F6 | 	mov	local29, local30
02440     28 13 02 F6 | 	mov	arg01, local26
02444     2B 15 02 F6 | 	mov	arg02, local29
02448     60 F1 B1 FD | 	call	#__system___string_cmp
0244c     FD 4C 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     88 01 00 FF 
02458     5D 5B 06 F6 | 	mov	local31, ##@LR__5130
0245c     2D 59 02 F6 | 	mov	local30, local31
02460     29 13 02 F6 | 	mov	arg01, local27
02464     2C 15 02 F6 | 	mov	arg02, local30
02468     40 F1 B1 FD | 	call	#__system___string_cmp
0246c     FD 56 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     10 31 02 F6 | 	mov	local10, local02
02478     03 30 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 30 02 F1 | 	add	local10, objptr
02488     29 35 02 F6 | 	mov	local12, local27
0248c     28 13 02 F6 | 	mov	arg01, local26
02490     1A 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     40 F1 B1 FD | 	call	#__system___string_concat
024a0     18 FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     10 3B 02 F6 | 	mov	local15, local02
024a8     01 3A 06 F1 | 	add	local15, #1
024ac     1F 5D 02 F6 | 	mov	local32, local17
024b0     01 5C 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     2E 3B 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     1D 27 02 F6 | 	mov	local05, local15
024c4     01 26 06 F1 | 	add	local05, #1
024c8     03 26 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 26 02 F1 | 	add	local05, objptr
024d8     13 25 02 FB | 	rdlong	local04, local05
024dc     1D 29 02 F6 | 	mov	local06, local15
024e0     01 28 06 F1 | 	add	local06, #1
024e4     03 28 66 F0 | 	shl	local06, #3
024e8     F2 28 02 F1 | 	add	local06, objptr
024ec     04 28 06 F1 | 	add	local06, #4
024f0     14 23 02 FB | 	rdlong	local03, local06
024f4     1D 29 02 F6 | 	mov	local06, local15
024f8     03 28 66 F0 | 	shl	local06, #3
024fc     F2 34 02 F6 | 	mov	local12, objptr
02500     F2 28 02 F1 | 	add	local06, objptr
02504     14 25 62 FC | 	wrlong	local04, local06
02508     1D 33 02 F6 | 	mov	local11, local15
0250c     19 39 02 F6 | 	mov	local14, local11
02510     1C 37 02 F6 | 	mov	local13, local14
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 54 02 F6 | 	mov	local28, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     04 36 06 F1 | 	add	local13, #4
02524     1B 23 62 FC | 	wrlong	local03, local13
02528     04 36 86 F1 | 	sub	local13, #4
0252c     01 3A 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 20 86 F1 | 	sub	local02, #1
02540     01 3E 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 20 06 F1 | 	add	local02, #1
02548     1F 21 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 20 06 F6 | 	mov	local02, #0
02554     1F 5F 02 F6 | 	mov	local33, local17
02558     01 5E 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     2F 21 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     10 31 02 F6 | 	mov	local10, local02
02568     03 30 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 30 02 F1 | 	add	local10, objptr
02578     10 35 02 F6 | 	mov	local12, local02
0257c     1A 33 02 F6 | 	mov	local11, local12
02580     19 39 02 F6 | 	mov	local14, local11
02584     03 38 66 F0 | 	shl	local14, #3
02588     F2 36 02 F6 | 	mov	local13, objptr
0258c     F2 38 02 F1 | 	add	local14, objptr
02590     1C 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     F0 14 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     28 14 B2 FD | 	call	#__system__LTrim_S
025a8     18 FB 61 FC | 	wrlong	result1, local10
025ac     01 20 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 20 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     10 27 02 F6 | 	mov	local05, local02
025c0     03 26 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 26 02 F1 | 	add	local05, objptr
025d0     13 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 2B 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 2A 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 2B 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     1F 25 02 F6 | 	mov	local04, local17
025f8     01 24 86 F1 | 	sub	local04, #1
025fc     12 21 0A F2 | 	cmp	local02, local04 wz
02600     01 3E 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     1F 25 02 F6 | 	mov	local04, local17
0260c     01 24 86 F1 | 	sub	local04, #1
02610     12 21 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     10 3B 02 F6 | 	mov	local15, local02
0261c     1F 61 02 F6 | 	mov	local34, local17
02620     01 60 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     30 3B 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     1D 27 02 F6 | 	mov	local05, local15
02630     01 26 06 F1 | 	add	local05, #1
02634     03 26 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 26 02 F1 | 	add	local05, objptr
02644     13 25 02 FB | 	rdlong	local04, local05
02648     1D 29 02 F6 | 	mov	local06, local15
0264c     01 28 06 F1 | 	add	local06, #1
02650     03 28 66 F0 | 	shl	local06, #3
02654     F2 28 02 F1 | 	add	local06, objptr
02658     04 28 06 F1 | 	add	local06, #4
0265c     14 23 02 FB | 	rdlong	local03, local06
02660     1D 31 02 F6 | 	mov	local10, local15
02664     18 29 02 F6 | 	mov	local06, local10
02668     03 28 66 F0 | 	shl	local06, #3
0266c     F2 34 02 F6 | 	mov	local12, objptr
02670     F2 28 02 F1 | 	add	local06, objptr
02674     14 25 62 FC | 	wrlong	local04, local06
02678     1D 33 02 F6 | 	mov	local11, local15
0267c     19 39 02 F6 | 	mov	local14, local11
02680     1C 37 02 F6 | 	mov	local13, local14
02684     03 36 66 F0 | 	shl	local13, #3
02688     F2 54 02 F6 | 	mov	local28, objptr
0268c     F2 36 02 F1 | 	add	local13, objptr
02690     04 36 06 F1 | 	add	local13, #4
02694     1B 23 62 FC | 	wrlong	local03, local13
02698     04 36 86 F1 | 	sub	local13, #4
0269c     01 3A 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 3E 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 20 56 F2 | 	cmps	local02, #1 wc
026b4     01 20 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 20 06 F1 | 	add	local02, #1
026bc     1F 25 02 F6 | 	mov	local04, local17
026c0     01 24 86 F1 | 	sub	local04, #1
026c4     12 21 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 3A 06 F6 | 	mov	local15, #0
026d0     1F 63 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     31 3B 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     1D 27 02 F6 | 	mov	local05, local15
026e0     03 26 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 26 02 F1 | 	add	local05, objptr
026f0     13 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     FC 0E B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     88 01 00 FF 
0270c     5F 15 06 F6 | 	mov	arg02, ##@LR__5131
02710     98 EE B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     1D 29 02 F6 | 	mov	local06, local15
02720     03 28 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 34 02 F6 | 	mov	local12, objptr
02730     F2 28 02 F1 | 	add	local06, objptr
02734     14 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     40 0F B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     88 01 00 FF 
02750     61 15 06 F6 | 	mov	arg02, ##@LR__5132
02754     54 EE B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     1D 31 02 F6 | 	mov	local10, local15
02764     03 30 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 30 02 F1 | 	add	local10, objptr
02774     1D 33 02 F6 | 	mov	local11, local15
02778     19 39 02 F6 | 	mov	local14, local11
0277c     03 38 66 F0 | 	shl	local14, #3
02780     F2 36 02 F6 | 	mov	local13, objptr
02784     F2 38 02 F1 | 	add	local14, objptr
02788     1C 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     78 11 B2 FD | 	call	#__system__LCase_S
02798     18 FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 3A 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 20 06 F6 | 	mov	local02, #0
027a8     1F 65 02 F6 | 	mov	local36, local17
027ac     01 64 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     32 21 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     10 31 02 F6 | 	mov	local10, local02
027c0     03 30 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 30 02 F1 | 	add	local10, objptr
027d0     04 30 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     18 FF 6B FC | 	wrlong	##-1, local10
027dc     01 20 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     F4 40 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 66 06 56 |  if_ne	mov	local37, #1
0280c     00 66 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     88 01 00 FF 
02828     63 15 06 F6 | 	mov	arg02, ##@LR__5133
0282c     7C ED B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 66 06 A6 |  if_e	mov	local37, #1
02838     00 20 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     88 01 00 FF 
02858     68 15 06 F6 | 	mov	arg02, ##@LR__5134
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     44 ED B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 20 06 F1 | 	add	local02, #1
02874     1F 21 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     1F 21 52 F2 | 	cmps	local02, local17 wc
02880     10 67 02 C6 |  if_b	mov	local37, local02
02884     01 66 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     33 29 02 F6 | 	mov	local06, local37
02894     03 28 66 F0 | 	shl	local06, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 28 02 F1 | 	add	local06, objptr
028a0     14 15 02 FB | 	rdlong	arg02, local06
028a4     88 01 00 FF 
028a8     6D 17 06 F6 | 	mov	arg03, ##@LR__5135
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     8C 12 B2 FD | 	call	#__system__Instr
028bc     FD 68 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 68 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     33 27 02 F6 | 	mov	local05, local37
028cc     03 26 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 26 02 F1 | 	add	local05, objptr
028dc     13 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 2B 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 2A 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 2B 82 F1 | 	sub	local07, arg01
02900     15 69 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 3E 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     1F 21 02 F6 | 	mov	local02, local17
02910     33 6B 02 F6 | 	mov	local39, local37
02914     01 6A 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     10 27 02 F6 | 	mov	local05, local02
02928     01 26 86 F1 | 	sub	local05, #1
0292c     03 26 66 F0 | 	shl	local05, #3
02930     F2 26 02 F1 | 	add	local05, objptr
02934     13 25 02 FB | 	rdlong	local04, local05
02938     10 29 02 F6 | 	mov	local06, local02
0293c     01 28 86 F1 | 	sub	local06, #1
02940     03 28 66 F0 | 	shl	local06, #3
02944     F2 28 02 F1 | 	add	local06, objptr
02948     04 28 06 F1 | 	add	local06, #4
0294c     14 23 02 FB | 	rdlong	local03, local06
02950     10 29 02 F6 | 	mov	local06, local02
02954     03 28 66 F0 | 	shl	local06, #3
02958     F2 28 02 F1 | 	add	local06, objptr
0295c     14 25 62 FC | 	wrlong	local04, local06
02960     10 37 02 F6 | 	mov	local13, local02
02964     03 36 66 F0 | 	shl	local13, #3
02968     F2 36 02 F1 | 	add	local13, objptr
0296c     04 36 06 F1 | 	add	local13, #4
02970     1B 23 62 FC | 	wrlong	local03, local13
02974     01 20 86 F1 | 	sub	local02, #1
02978     35 21 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     33 31 02 F6 | 	mov	local10, local37
02984     01 30 06 F1 | 	add	local10, #1
02988     03 30 66 F0 | 	shl	local10, #3
0298c     F2 30 02 F1 | 	add	local10, objptr
02990     33 39 02 F6 | 	mov	local14, local37
02994     03 38 66 F0 | 	shl	local14, #3
02998     F2 38 02 F1 | 	add	local14, objptr
0299c     1C 29 02 FB | 	rdlong	local06, local14
029a0     33 55 02 F6 | 	mov	local28, local37
029a4     2A 49 02 F6 | 	mov	local22, local28
029a8     03 48 66 F0 | 	shl	local22, #3
029ac     F2 4A 02 F6 | 	mov	local23, objptr
029b0     F2 48 02 F1 | 	add	local22, objptr
029b4     24 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 2B 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 2A 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 2B 82 F1 | 	sub	local07, arg01
029d8     15 15 02 F6 | 	mov	arg02, local07
029dc     34 15 82 F1 | 	sub	arg02, local38
029e0     14 13 02 F6 | 	mov	arg01, local06
029e4     A0 0C B2 FD | 	call	#__system__Right_S
029e8     18 FB 61 FC | 	wrlong	result1, local10
029ec     33 31 02 F6 | 	mov	local10, local37
029f0     03 30 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 30 02 F1 | 	add	local10, objptr
02a00     33 33 02 F6 | 	mov	local11, local37
02a04     19 39 02 F6 | 	mov	local14, local11
02a08     03 38 66 F0 | 	shl	local14, #3
02a0c     F2 36 02 F6 | 	mov	local13, objptr
02a10     F2 38 02 F1 | 	add	local14, objptr
02a14     1C 13 02 FB | 	rdlong	arg01, local14
02a18     34 35 02 F6 | 	mov	local12, local38
02a1c     1A 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     D4 0B B2 FD | 	call	#__system__Left_S
02a2c     18 FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     33 27 02 F6 | 	mov	local05, local37
02a34     03 26 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 26 02 F1 | 	add	local05, objptr
02a44     13 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     A8 0B B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     88 01 00 FF 
02a60     6F 15 06 F6 | 	mov	arg02, ##@LR__5136
02a64     44 EB B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     33 29 02 F6 | 	mov	local06, local37
02a74     03 28 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 34 02 F6 | 	mov	local12, objptr
02a84     F2 28 02 F1 | 	add	local06, objptr
02a88     14 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 2B 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 2A 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 2B 82 F1 | 	sub	local07, arg01
02aac     02 2A 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 3E 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     1F 21 02 F6 | 	mov	local02, local17
02abc     33 6D 02 F6 | 	mov	local40, local37
02ac0     01 6C 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     10 27 02 F6 | 	mov	local05, local02
02ad4     01 26 86 F1 | 	sub	local05, #1
02ad8     03 26 66 F0 | 	shl	local05, #3
02adc     F2 26 02 F1 | 	add	local05, objptr
02ae0     13 25 02 FB | 	rdlong	local04, local05
02ae4     10 29 02 F6 | 	mov	local06, local02
02ae8     01 28 86 F1 | 	sub	local06, #1
02aec     03 28 66 F0 | 	shl	local06, #3
02af0     F2 28 02 F1 | 	add	local06, objptr
02af4     04 28 06 F1 | 	add	local06, #4
02af8     14 23 02 FB | 	rdlong	local03, local06
02afc     10 29 02 F6 | 	mov	local06, local02
02b00     03 28 66 F0 | 	shl	local06, #3
02b04     F2 28 02 F1 | 	add	local06, objptr
02b08     14 25 62 FC | 	wrlong	local04, local06
02b0c     10 37 02 F6 | 	mov	local13, local02
02b10     03 36 66 F0 | 	shl	local13, #3
02b14     F2 36 02 F1 | 	add	local13, objptr
02b18     04 36 06 F1 | 	add	local13, #4
02b1c     1B 23 62 FC | 	wrlong	local03, local13
02b20     01 20 86 F1 | 	sub	local02, #1
02b24     36 21 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     33 31 02 F6 | 	mov	local10, local37
02b30     01 30 06 F1 | 	add	local10, #1
02b34     03 30 66 F0 | 	shl	local10, #3
02b38     F2 30 02 F1 | 	add	local10, objptr
02b3c     33 39 02 F6 | 	mov	local14, local37
02b40     03 38 66 F0 | 	shl	local14, #3
02b44     F2 38 02 F1 | 	add	local14, objptr
02b48     1C 29 02 FB | 	rdlong	local06, local14
02b4c     33 37 02 F6 | 	mov	local13, local37
02b50     1B 55 02 F6 | 	mov	local28, local13
02b54     2A 49 02 F6 | 	mov	local22, local28
02b58     03 48 66 F0 | 	shl	local22, #3
02b5c     F2 4A 02 F6 | 	mov	local23, objptr
02b60     F2 48 02 F1 | 	add	local22, objptr
02b64     24 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 2B 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 2A 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 2B 82 F1 | 	sub	local07, arg01
02b88     15 39 02 F6 | 	mov	local14, local07
02b8c     1C 33 02 F6 | 	mov	local11, local14
02b90     01 32 86 F1 | 	sub	local11, #1
02b94     19 35 02 F6 | 	mov	local12, local11
02b98     14 13 02 F6 | 	mov	arg01, local06
02b9c     1A 15 02 F6 | 	mov	arg02, local12
02ba0     E4 0A B2 FD | 	call	#__system__Right_S
02ba4     18 FB 61 FC | 	wrlong	result1, local10
02ba8     33 31 02 F6 | 	mov	local10, local37
02bac     03 30 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 30 02 F1 | 	add	local10, objptr
02bbc     88 01 00 FF 
02bc0     71 29 06 F6 | 	mov	local06, ##@LR__5137
02bc4     18 29 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     33 31 02 F6 | 	mov	local10, local37
02bd4     03 30 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 30 02 F1 | 	add	local10, objptr
02be4     18 6F 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     88 01 00 FF 
02bec     73 15 06 F6 | 	mov	arg02, ##@LR__5138
02bf0     37 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     AC E9 B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     88 01 00 FF 
02c0c     79 15 06 F6 | 	mov	arg02, ##@LR__5139
02c10     37 13 02 F6 | 	mov	arg01, local41
02c14     94 E9 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     88 01 00 FF 
02c24     80 15 06 F6 | 	mov	arg02, ##@LR__5140
02c28     37 13 02 F6 | 	mov	arg01, local41
02c2c     7C E9 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     33 27 02 F6 | 	mov	local05, local37
02c3c     01 26 06 F1 | 	add	local05, #1
02c40     03 26 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     13 13 02 FB | 	rdlong	arg01, local05
02c54     88 01 00 FF 
02c58     86 15 06 F6 | 	mov	arg02, ##@LR__5141
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     44 E9 B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     33 31 02 F6 | 	mov	local10, local37
02c74     01 30 06 F1 | 	add	local10, #1
02c78     03 30 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 30 02 F1 | 	add	local10, objptr
02c88     88 01 00 FF 
02c8c     89 29 06 F6 | 	mov	local06, ##@LR__5142
02c90     18 29 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     33 27 02 F6 | 	mov	local05, local37
02cac     01 26 06 F1 | 	add	local05, #1
02cb0     03 26 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 26 02 F1 | 	add	local05, objptr
02cc0     13 13 02 FB | 	rdlong	arg01, local05
02cc4     88 01 00 FF 
02cc8     8B 15 06 F6 | 	mov	arg02, ##@LR__5143
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     D4 E8 B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     33 31 02 F6 | 	mov	local10, local37
02ce4     01 30 06 F1 | 	add	local10, #1
02ce8     03 30 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 30 02 F1 | 	add	local10, objptr
02cf8     88 01 00 FF 
02cfc     8F 29 06 F6 | 	mov	local06, ##@LR__5144
02d00     18 29 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     88 01 00 FF 
02d1c     91 15 06 F6 | 	mov	arg02, ##@LR__5145
02d20     37 13 02 F6 | 	mov	arg01, local41
02d24     84 E8 B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     88 01 00 FF 
02d34     96 15 06 F6 | 	mov	arg02, ##@LR__5146
02d38     37 13 02 F6 | 	mov	arg01, local41
02d3c     6C E8 B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     33 27 02 F6 | 	mov	local05, local37
02d4c     01 26 06 F1 | 	add	local05, #1
02d50     03 26 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 26 02 F1 | 	add	local05, objptr
02d60     13 13 02 FB | 	rdlong	arg01, local05
02d64     88 01 00 FF 
02d68     99 15 06 F6 | 	mov	arg02, ##@LR__5147
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     34 E8 B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     33 31 02 F6 | 	mov	local10, local37
02d84     01 30 06 F1 | 	add	local10, #1
02d88     03 30 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 30 02 F1 | 	add	local10, objptr
02d98     88 01 00 FF 
02d9c     9F 29 06 F6 | 	mov	local06, ##@LR__5148
02da0     18 29 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     33 27 02 F6 | 	mov	local05, local37
02db0     01 26 06 F1 | 	add	local05, #1
02db4     03 26 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 26 02 F1 | 	add	local05, objptr
02dc4     13 13 02 FB | 	rdlong	arg01, local05
02dc8     88 01 00 FF 
02dcc     A1 15 06 F6 | 	mov	arg02, ##@LR__5149
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     D0 E7 B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     33 31 02 F6 | 	mov	local10, local37
02de8     01 30 06 F1 | 	add	local10, #1
02dec     03 30 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 30 02 F1 | 	add	local10, objptr
02dfc     88 01 00 FF 
02e00     AA 29 06 F6 | 	mov	local06, ##@LR__5150
02e04     18 29 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     33 27 02 F6 | 	mov	local05, local37
02e14     01 26 06 F1 | 	add	local05, #1
02e18     03 26 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 26 02 F1 | 	add	local05, objptr
02e28     13 13 02 FB | 	rdlong	arg01, local05
02e2c     88 01 00 FF 
02e30     AC 15 06 F6 | 	mov	arg02, ##@LR__5151
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     6C E7 B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     33 31 02 F6 | 	mov	local10, local37
02e4c     01 30 06 F1 | 	add	local10, #1
02e50     03 30 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 30 02 F1 | 	add	local10, objptr
02e60     88 01 00 FF 
02e64     B5 29 06 F6 | 	mov	local06, ##@LR__5152
02e68     18 29 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     33 27 02 F6 | 	mov	local05, local37
02e78     01 26 06 F1 | 	add	local05, #1
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 26 02 F1 | 	add	local05, objptr
02e8c     13 13 02 FB | 	rdlong	arg01, local05
02e90     88 01 00 FF 
02e94     B7 15 06 F6 | 	mov	arg02, ##@LR__5153
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     08 E7 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     33 31 02 F6 | 	mov	local10, local37
02eb0     01 30 06 F1 | 	add	local10, #1
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     88 01 00 FF 
02ec8     C0 29 06 F6 | 	mov	local06, ##@LR__5154
02ecc     18 29 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     33 27 02 F6 | 	mov	local05, local37
02edc     01 26 06 F1 | 	add	local05, #1
02ee0     03 26 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 26 02 F1 | 	add	local05, objptr
02ef0     13 13 02 FB | 	rdlong	arg01, local05
02ef4     88 01 00 FF 
02ef8     C2 15 06 F6 | 	mov	arg02, ##@LR__5155
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     A4 E6 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     33 31 02 F6 | 	mov	local10, local37
02f14     01 30 06 F1 | 	add	local10, #1
02f18     03 30 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 30 02 F1 | 	add	local10, objptr
02f28     88 01 00 FF 
02f2c     C5 29 06 F6 | 	mov	local06, ##@LR__5156
02f30     18 29 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 20 06 F6 | 	mov	local02, #0
02f40     1F 71 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     38 21 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     10 31 02 F6 | 	mov	local10, local02
02f50     03 30 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 30 02 F1 | 	add	local10, objptr
02f60     10 33 02 F6 | 	mov	local11, local02
02f64     19 39 02 F6 | 	mov	local14, local11
02f68     1C 37 02 F6 | 	mov	local13, local14
02f6c     03 36 66 F0 | 	shl	local13, #3
02f70     F2 36 02 F1 | 	add	local13, objptr
02f74     1B 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 30 06 F1 | 	add	local10, #4
02f8c     18 FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     10 31 02 F6 | 	mov	local10, local02
02f94     03 30 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 30 02 F1 | 	add	local10, objptr
02fa4     04 30 06 F1 | 	add	local10, #4
02fa8     18 35 02 FB | 	rdlong	local12, local10
02fac     01 34 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     10 31 02 F6 | 	mov	local10, local02
02fc0     03 30 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 30 02 F1 | 	add	local10, objptr
02fd0     10 33 02 F6 | 	mov	local11, local02
02fd4     19 39 02 F6 | 	mov	local14, local11
02fd8     1C 37 02 F6 | 	mov	local13, local14
02fdc     03 36 66 F0 | 	shl	local13, #3
02fe0     F2 36 02 F1 | 	add	local13, objptr
02fe4     1B 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 30 06 F1 | 	add	local10, #4
02ffc     18 FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     10 31 02 F6 | 	mov	local10, local02
03004     03 30 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 30 02 F1 | 	add	local10, objptr
03014     04 30 06 F1 | 	add	local10, #4
03018     18 35 02 FB | 	rdlong	local12, local10
0301c     01 34 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     10 31 02 F6 | 	mov	local10, local02
03030     03 30 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 30 02 F1 | 	add	local10, objptr
03040     10 33 02 F6 | 	mov	local11, local02
03044     19 39 02 F6 | 	mov	local14, local11
03048     1C 37 02 F6 | 	mov	local13, local14
0304c     03 36 66 F0 | 	shl	local13, #3
03050     F2 36 02 F1 | 	add	local13, objptr
03054     1B 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     89 01 00 FF 
03064     B8 14 06 F6 | 	mov	arg02, ##@LR__5241
03068     40 E5 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 30 06 F1 | 	add	local10, #4
03080     18 FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     10 31 02 F6 | 	mov	local10, local02
03088     03 30 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 30 02 F1 | 	add	local10, objptr
03098     04 30 06 F1 | 	add	local10, #4
0309c     18 35 02 FB | 	rdlong	local12, local10
030a0     01 34 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     10 31 02 F6 | 	mov	local10, local02
030b4     03 30 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 30 02 F1 | 	add	local10, objptr
030c4     10 33 02 F6 | 	mov	local11, local02
030c8     19 39 02 F6 | 	mov	local14, local11
030cc     1C 37 02 F6 | 	mov	local13, local14
030d0     03 36 66 F0 | 	shl	local13, #3
030d4     F2 36 02 F1 | 	add	local13, objptr
030d8     1B 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 30 06 F1 | 	add	local10, #4
030f0     18 FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     10 31 02 F6 | 	mov	local10, local02
030f8     03 30 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 30 02 F1 | 	add	local10, objptr
03108     04 30 06 F1 | 	add	local10, #4
0310c     18 35 02 FB | 	rdlong	local12, local10
03110     01 34 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     10 31 02 F6 | 	mov	local10, local02
03124     03 30 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 30 02 F1 | 	add	local10, objptr
03134     10 33 02 F6 | 	mov	local11, local02
03138     19 39 02 F6 | 	mov	local14, local11
0313c     1C 37 02 F6 | 	mov	local13, local14
03140     03 36 66 F0 | 	shl	local13, #3
03144     F2 54 02 F6 | 	mov	local28, objptr
03148     F2 36 02 F1 | 	add	local13, objptr
0314c     1B 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     F8 28 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 30 06 F1 | 	add	local10, #4
03164     18 FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     10 31 02 F6 | 	mov	local10, local02
0316c     03 30 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 30 02 F1 | 	add	local10, objptr
0317c     04 30 06 F1 | 	add	local10, #4
03180     18 35 02 FB | 	rdlong	local12, local10
03184     01 34 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     10 31 02 F6 | 	mov	local10, local02
03198     03 30 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 30 02 F1 | 	add	local10, objptr
031a8     10 33 02 F6 | 	mov	local11, local02
031ac     19 39 02 F6 | 	mov	local14, local11
031b0     03 38 66 F0 | 	shl	local14, #3
031b4     F2 36 02 F6 | 	mov	local13, objptr
031b8     F2 38 02 F1 | 	add	local14, objptr
031bc     1C 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     10 31 02 F6 | 	mov	local10, local02
031d8     03 30 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 30 02 F1 | 	add	local10, objptr
031e8     04 30 06 F1 | 	add	local10, #4
031ec     18 29 02 FB | 	rdlong	local06, local10
031f0     01 28 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     10 27 02 F6 | 	mov	local05, local02
03204     03 26 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 26 02 F1 | 	add	local05, objptr
03214     04 26 06 F1 | 	add	local05, #4
03218     13 35 02 FB | 	rdlong	local12, local05
0321c     1A 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     F0 37 B0 FD | 	call	#_getnoteval
0322c     FD 72 02 F6 | 	mov	local43, result1
03230     10 31 02 F6 | 	mov	local10, local02
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     39 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     A4 05 B2 FD | 	call	#__system__str_S
03254     18 FB 61 FC | 	wrlong	result1, local10
03258     10 25 02 F6 | 	mov	local04, local02
0325c     12 23 02 F6 | 	mov	local03, local04
03260     11 31 02 F6 | 	mov	local10, local03
03264     03 30 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 30 02 F1 | 	add	local10, objptr
03274     04 30 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     18 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     10 31 02 F6 | 	mov	local10, local02
03290     03 30 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 30 02 F1 | 	add	local10, objptr
032a0     10 39 02 F6 | 	mov	local14, local02
032a4     03 38 66 F0 | 	shl	local14, #3
032a8     F2 38 02 F1 | 	add	local14, objptr
032ac     1C 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 30 06 F1 | 	add	local10, #4
032c0     18 FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     04 30 06 F1 | 	add	local10, #4
032dc     18 29 02 FB | 	rdlong	local06, local10
032e0     01 28 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     10 31 02 F6 | 	mov	local10, local02
032f4     03 30 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 30 02 F1 | 	add	local10, objptr
03304     10 33 02 F6 | 	mov	local11, local02
03308     19 39 02 F6 | 	mov	local14, local11
0330c     03 38 66 F0 | 	shl	local14, #3
03310     F2 36 02 F6 | 	mov	local13, objptr
03314     F2 38 02 F1 | 	add	local14, objptr
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     01 34 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     58 03 B2 FD | 	call	#__system__Right_S
03330     18 FB 61 FC | 	wrlong	result1, local10
03334     10 25 02 F6 | 	mov	local04, local02
03338     12 23 02 F6 | 	mov	local03, local04
0333c     11 31 02 F6 | 	mov	local10, local03
03340     03 30 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 30 02 F1 | 	add	local10, objptr
03350     04 30 06 F1 | 	add	local10, #4
03354     18 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     10 31 02 F6 | 	mov	local10, local02
03368     03 30 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 30 02 F1 | 	add	local10, objptr
03378     10 33 02 F6 | 	mov	local11, local02
0337c     19 39 02 F6 | 	mov	local14, local11
03380     03 38 66 F0 | 	shl	local14, #3
03384     F2 36 02 F6 | 	mov	local13, objptr
03388     F2 38 02 F1 | 	add	local14, objptr
0338c     1C 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 30 06 F1 | 	add	local10, #4
033a0     18 FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     10 31 02 F6 | 	mov	local10, local02
033a8     03 30 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 30 02 F1 | 	add	local10, objptr
033b8     04 30 06 F1 | 	add	local10, #4
033bc     18 35 02 FB | 	rdlong	local12, local10
033c0     01 34 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     10 31 02 F6 | 	mov	local10, local02
033d4     03 30 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 30 02 F1 | 	add	local10, objptr
033e4     10 35 02 F6 | 	mov	local12, local02
033e8     1A 33 02 F6 | 	mov	local11, local12
033ec     19 39 02 F6 | 	mov	local14, local11
033f0     03 38 66 F0 | 	shl	local14, #3
033f4     F2 36 02 F6 | 	mov	local13, objptr
033f8     F2 38 02 F1 | 	add	local14, objptr
033fc     04 38 06 F1 | 	add	local14, #4
03400     1C 13 02 FB | 	rdlong	arg01, local14
03404     04 38 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 74 C6 C9 |  if_b	decod	local44, #31
03418     00 74 06 36 |  if_ae	mov	local44, #0
0341c     1C 0B B2 FD | 	call	#__system___float_fromuns
03420     3A FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     CC 03 B2 FD | 	call	#__system__str_S
0342c     18 FB 61 FC | 	wrlong	result1, local10
03430     10 25 02 F6 | 	mov	local04, local02
03434     12 23 02 F6 | 	mov	local03, local04
03438     11 31 02 F6 | 	mov	local10, local03
0343c     03 30 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 30 02 F1 | 	add	local10, objptr
0344c     04 30 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     18 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     10 27 02 F6 | 	mov	local05, local02
03468     03 26 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 26 02 F1 | 	add	local05, objptr
03478     13 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     E0 2D B0 FD | 	call	#_isnum
03488     FD 76 02 F6 | 	mov	local45, result1
0348c     10 27 02 F6 | 	mov	local05, local02
03490     03 26 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 26 02 F1 | 	add	local05, objptr
034a0     13 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     A4 31 B0 FD | 	call	#_isint
034b0     FD 78 02 F6 | 	mov	local46, result1
034b4     10 27 02 F6 | 	mov	local05, local02
034b8     03 26 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 26 02 F1 | 	add	local05, objptr
034c8     13 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     20 34 B0 FD | 	call	#_isdec
034d8     FD 7A 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 76 0E F2 | 	cmp	local45, #0 wz
034e0     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     10 25 02 F6 | 	mov	local04, local02
034f0     12 23 02 F6 | 	mov	local03, local04
034f4     11 31 02 F6 | 	mov	local10, local03
034f8     03 30 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 30 02 F1 | 	add	local10, objptr
03508     04 30 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     18 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 76 0E F2 | 	cmp	local45, #0 wz
03524     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03528     3D 25 22 56 |  if_ne	not	local04, local47
0352c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     10 25 02 F6 | 	mov	local04, local02
03538     12 23 02 F6 | 	mov	local03, local04
0353c     11 31 02 F6 | 	mov	local10, local03
03540     03 30 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 30 02 F1 | 	add	local10, objptr
03550     04 30 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     18 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 76 0E F2 | 	cmp	local45, #0 wz
0356c     3C 25 22 56 |  if_ne	not	local04, local46
03570     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03574     3D 23 22 56 |  if_ne	not	local03, local47
03578     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     10 25 02 F6 | 	mov	local04, local02
03584     12 23 02 F6 | 	mov	local03, local04
03588     11 31 02 F6 | 	mov	local10, local03
0358c     03 30 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 30 02 F1 | 	add	local10, objptr
0359c     04 30 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     18 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     10 27 02 F6 | 	mov	local05, local02
035b8     03 26 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 26 02 F1 | 	add	local05, objptr
035c8     13 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     E0 33 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     10 31 02 F6 | 	mov	local10, local02
035e4     03 30 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 30 02 F1 | 	add	local10, objptr
035f4     04 30 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     18 07 68 FC | 	wrlong	##515, local10
03600     10 25 02 F6 | 	mov	local04, local02
03604     12 23 02 F6 | 	mov	local03, local04
03608     11 31 02 F6 | 	mov	local10, local03
0360c     03 30 66 F0 | 	shl	local10, #3
03610     F2 30 02 F1 | 	add	local10, objptr
03614     10 39 02 F6 | 	mov	local14, local02
03618     03 38 66 F0 | 	shl	local14, #3
0361c     F2 38 02 F1 | 	add	local14, objptr
03620     1C 29 02 FB | 	rdlong	local06, local14
03624     02 34 06 F6 | 	mov	local12, #2
03628     10 49 02 F6 | 	mov	local22, local02
0362c     24 4B 02 F6 | 	mov	local23, local22
03630     03 4A 66 F0 | 	shl	local23, #3
03634     F2 4C 02 F6 | 	mov	local24, objptr
03638     F2 4A 02 F1 | 	add	local23, objptr
0363c     25 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 2B 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     15 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 2A 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 2B 82 F1 | 	sub	local07, arg01
03660     15 37 02 F6 | 	mov	local13, local07
03664     1B 39 02 F6 | 	mov	local14, local13
03668     02 38 86 F1 | 	sub	local14, #2
0366c     1C 33 02 F6 | 	mov	local11, local14
03670     14 13 02 F6 | 	mov	arg01, local06
03674     1A 15 02 F6 | 	mov	arg02, local12
03678     19 17 02 F6 | 	mov	arg03, local11
0367c     98 00 B2 FD | 	call	#__system__Mid_S
03680     18 FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     10 23 02 F6 | 	mov	local03, local02
0368c     11 27 02 F6 | 	mov	local05, local03
03690     03 26 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 26 02 F1 | 	add	local05, objptr
036a0     13 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     44 29 B0 FD | 	call	#_isname
036b0     FD 24 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     10 25 02 F6 | 	mov	local04, local02
036bc     12 23 02 F6 | 	mov	local03, local04
036c0     11 31 02 F6 | 	mov	local10, local03
036c4     03 30 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 30 02 F1 | 	add	local10, objptr
036d4     04 30 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     18 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 20 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     1F 31 02 F6 | 	mov	local10, local17
036f4     03 30 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 30 02 F1 | 	add	local10, objptr
03704     04 30 06 F1 | 	add	local10, #4
03708     18 FD 6B FC | 	wrlong	#510, local10
0370c     1F 31 02 F6 | 	mov	local10, local17
03710     03 30 66 F0 | 	shl	local10, #3
03714     F2 30 02 F1 | 	add	local10, objptr
03718     88 01 00 FF 
0371c     C7 29 06 F6 | 	mov	local06, ##@LR__5157
03720     18 29 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 3E 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     88 01 00 FF 
0373c     C8 15 06 F6 | 	mov	arg02, ##@LR__5158
03740     37 13 02 F6 | 	mov	arg01, local41
03744     64 DE B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     88 01 00 FF 
03754     CD 15 06 F6 | 	mov	arg02, ##@LR__5159
03758     37 13 02 F6 | 	mov	arg01, local41
0375c     4C DE B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     88 01 00 FF 
0376c     D2 29 06 F6 | 	mov	local06, ##@LR__5160
03770     37 13 02 F6 | 	mov	arg01, local41
03774     14 15 02 F6 | 	mov	arg02, local06
03778     30 DE B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     88 01 00 FF 
03788     D7 35 06 F6 | 	mov	local12, ##@LR__5161
0378c     1A 29 02 F6 | 	mov	local06, local12
03790     37 13 02 F6 | 	mov	arg01, local41
03794     14 15 02 F6 | 	mov	arg02, local06
03798     10 DE B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     88 01 00 FF 
037a8     DB 33 06 F6 | 	mov	local11, ##@LR__5162
037ac     19 35 02 F6 | 	mov	local12, local11
037b0     37 13 02 F6 | 	mov	arg01, local41
037b4     1A 15 02 F6 | 	mov	arg02, local12
037b8     F0 DD B1 FD | 	call	#__system___string_cmp
037bc     FD 28 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     88 01 00 FF 
037c8     DF 39 06 F6 | 	mov	local14, ##@LR__5163
037cc     1C 33 02 F6 | 	mov	local11, local14
037d0     37 13 02 F6 | 	mov	arg01, local41
037d4     19 15 02 F6 | 	mov	arg02, local11
037d8     D0 DD B1 FD | 	call	#__system___string_cmp
037dc     FD 34 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     88 01 00 FF 
037e8     E2 37 06 F6 | 	mov	local13, ##@LR__5164
037ec     1B 39 02 F6 | 	mov	local14, local13
037f0     37 13 02 F6 | 	mov	arg01, local41
037f4     1C 15 02 F6 | 	mov	arg02, local14
037f8     B0 DD B1 FD | 	call	#__system___string_cmp
037fc     FD 32 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     88 01 00 FF 
03808     E6 37 06 F6 | 	mov	local13, ##@LR__5165
0380c     37 13 02 F6 | 	mov	arg01, local41
03810     1B 15 02 F6 | 	mov	arg02, local13
03814     94 DD B1 FD | 	call	#__system___string_cmp
03818     FD 38 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     88 01 00 FF 
03824     EC 49 06 F6 | 	mov	local22, ##@LR__5166
03828     24 55 02 F6 | 	mov	local28, local22
0382c     37 13 02 F6 | 	mov	arg01, local41
03830     2A 15 02 F6 | 	mov	arg02, local28
03834     74 DD B1 FD | 	call	#__system___string_cmp
03838     FD 36 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     33 55 02 F6 | 	mov	local28, local37
03844     01 54 06 F1 | 	add	local28, #1
03848     2A 49 02 F6 | 	mov	local22, local28
0384c     24 4B 02 F6 | 	mov	local23, local22
03850     03 4A 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 4C 02 F6 | 	mov	local24, objptr
03860     F2 4A 02 F1 | 	add	local23, objptr
03864     04 4A 06 F1 | 	add	local23, #4
03868     25 59 02 FB | 	rdlong	local30, local23
0386c     04 4A 86 F1 | 	sub	local23, #4
03870     2C 57 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 56 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     33 31 02 F6 | 	mov	local10, local37
0388c     01 30 06 F1 | 	add	local10, #1
03890     03 30 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 30 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 28 06 F6 | 	mov	local06, ##515
038a8     04 30 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     18 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     88 01 00 FF 
038c0     EF 15 06 F6 | 	mov	arg02, ##@LR__5167
038c4     37 13 02 F6 | 	mov	arg01, local41
038c8     E0 DC B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     88 01 00 FF 
038d8     F6 27 06 F6 | 	mov	local05, ##@LR__5168
038dc     37 13 02 F6 | 	mov	arg01, local41
038e0     13 15 02 F6 | 	mov	arg02, local05
038e4     C4 DC B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     33 27 02 F6 | 	mov	local05, local37
038f4     01 26 06 F1 | 	add	local05, #1
038f8     13 29 02 F6 | 	mov	local06, local05
038fc     03 28 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 34 02 F6 | 	mov	local12, objptr
0390c     F2 28 02 F1 | 	add	local06, objptr
03910     04 28 06 F1 | 	add	local06, #4
03914     14 39 02 FB | 	rdlong	local14, local06
03918     04 28 86 F1 | 	sub	local06, #4
0391c     1C 33 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 32 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     33 31 02 F6 | 	mov	local10, local37
03938     01 30 06 F1 | 	add	local10, #1
0393c     03 30 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 26 02 F6 | 	mov	local05, objptr
0394c     F2 30 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 28 06 F6 | 	mov	local06, ##515
03958     04 30 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     18 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     88 01 00 FF 
03970     FC 15 06 F6 | 	mov	arg02, ##@LR__5169
03974     37 13 02 F6 | 	mov	arg01, local41
03978     30 DC B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     33 31 02 F6 | 	mov	local10, local37
03988     01 30 06 F1 | 	add	local10, #1
0398c     03 30 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 26 02 F6 | 	mov	local05, objptr
0399c     F2 30 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 28 06 F6 | 	mov	local06, ##515
039a8     04 30 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     18 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     88 01 00 FF 
039c0     FF 15 06 F6 | 	mov	arg02, ##@LR__5170
039c4     37 13 02 F6 | 	mov	arg01, local41
039c8     E0 DB B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     33 29 02 F6 | 	mov	local06, local37
039d8     01 28 06 F1 | 	add	local06, #1
039dc     03 28 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 34 02 F6 | 	mov	local12, objptr
039ec     F2 28 02 F1 | 	add	local06, objptr
039f0     14 13 02 FB | 	rdlong	arg01, local06
039f4     89 01 00 FF 
039f8     03 26 06 F6 | 	mov	local05, ##@LR__5171
039fc     13 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     A0 DB B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     33 31 02 F6 | 	mov	local10, local37
03a18     01 30 06 F1 | 	add	local10, #1
03a1c     03 30 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 30 02 F1 | 	add	local10, objptr
03a2c     04 30 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     18 07 68 FC | 	wrlong	##515, local10
03a38     33 31 02 F6 | 	mov	local10, local37
03a3c     01 30 06 F1 | 	add	local10, #1
03a40     03 30 66 F0 | 	shl	local10, #3
03a44     F2 30 02 F1 | 	add	local10, objptr
03a48     89 01 00 FF 
03a4c     05 28 06 F6 | 	mov	local06, ##@LR__5172
03a50     18 29 62 FC | 	wrlong	local06, local10
03a54     33 31 02 F6 | 	mov	local10, local37
03a58     03 30 66 F0 | 	shl	local10, #3
03a5c     F2 26 02 F6 | 	mov	local05, objptr
03a60     F2 30 02 F1 | 	add	local10, objptr
03a64     C3 28 06 F6 | 	mov	local06, #195
03a68     04 30 06 F1 | 	add	local10, #4
03a6c     18 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     89 01 00 FF 
03a7c     08 30 06 F6 | 	mov	local10, ##@LR__5173
03a80     37 13 02 F6 | 	mov	arg01, local41
03a84     18 15 02 F6 | 	mov	arg02, local10
03a88     20 DB B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     33 29 02 F6 | 	mov	local06, local37
03a98     01 28 06 F1 | 	add	local06, #1
03a9c     03 28 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 34 02 F6 | 	mov	local12, objptr
03aac     F2 28 02 F1 | 	add	local06, objptr
03ab0     14 13 02 FB | 	rdlong	arg01, local06
03ab4     89 01 00 FF 
03ab8     0B 26 06 F6 | 	mov	local05, ##@LR__5174
03abc     13 31 02 F6 | 	mov	local10, local05
03ac0     18 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     DC DA B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     33 31 02 F6 | 	mov	local10, local37
03adc     01 30 06 F1 | 	add	local10, #1
03ae0     03 30 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 26 02 F6 | 	mov	local05, objptr
03af0     F2 30 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 28 06 F6 | 	mov	local06, ##515
03afc     04 30 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     18 07 68 FC | 	wrlong	##515, local10
03b08     04 30 86 F1 | 	sub	local10, #4
03b0c     33 21 02 F6 | 	mov	local02, local37
03b10     02 20 06 F1 | 	add	local02, #2
03b14     1F 7D 02 F6 | 	mov	local48, local17
03b18     01 7C 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     3E 21 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     10 31 02 F6 | 	mov	local10, local02
03b30     03 30 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 30 02 F1 | 	add	local10, objptr
03b40     18 7F 02 FB | 	rdlong	local49, local10
03b44     33 31 02 F6 | 	mov	local10, local37
03b48     01 30 06 F1 | 	add	local10, #1
03b4c     03 30 66 F0 | 	shl	local10, #3
03b50     F2 26 02 F6 | 	mov	local05, objptr
03b54     F2 30 02 F1 | 	add	local10, objptr
03b58     33 33 02 F6 | 	mov	local11, local37
03b5c     01 32 06 F1 | 	add	local11, #1
03b60     19 39 02 F6 | 	mov	local14, local11
03b64     03 38 66 F0 | 	shl	local14, #3
03b68     F2 36 02 F6 | 	mov	local13, objptr
03b6c     F2 38 02 F1 | 	add	local14, objptr
03b70     1C 13 02 FB | 	rdlong	arg01, local14
03b74     3F 35 02 F6 | 	mov	local12, local49
03b78     1A 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     58 DA B1 FD | 	call	#__system___string_concat
03b88     FD 28 02 F6 | 	mov	local06, result1
03b8c     18 29 62 FC | 	wrlong	local06, local10
03b90     01 20 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     48 2D B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     E4 0D B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 24 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 24 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 3E 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 26 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     13 31 02 A6 |  if_e	mov	local10, local05
03c20     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     64 2E B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 24 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 26 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     13 31 02 F6 | 	mov	local10, local05
03c74     03 30 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 34 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 34 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     CC 41 B0 FD | 	call	#_compile
03cc0     FD 1E 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     0F 13 02 F6 | 	mov	arg01, local01
03ce0     E0 A2 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     00 E4 05 F1 | 	add	objptr, ##41984
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     00 E4 85 F1 | 	sub	objptr, ##41984
03cfc     89 01 00 FF 
03d00     0D 14 06 F6 | 	mov	arg02, ##@LR__5175
03d04     A4 D8 B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     00 E4 05 F1 | 	add	objptr, ##41984
03d18     F2 24 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E4 E5 85 F1 | 	sub	objptr, ##13796
03d24     F2 24 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 24 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 24 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 34 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 34 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     D8 40 B0 FD | 	call	#_compile
03db4     FD 1E 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     0F 13 02 F6 | 	mov	arg01, local01
03dd4     EC A1 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     00 E4 05 F1 | 	add	objptr, ##41984
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     00 E4 85 F1 | 	sub	objptr, ##41984
03df0     89 01 00 FF 
03df4     0E 14 06 F6 | 	mov	arg02, ##@LR__5176
03df8     B0 D7 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     00 E4 05 F1 | 	add	objptr, ##41984
03e0c     F2 24 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E4 E5 85 F1 | 	sub	objptr, ##13796
03e18     F2 24 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 24 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 34 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     B4 40 B0 FD | 	call	#_compile_assign
03ea0     FD 1E 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     00 A1 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     00 E4 05 F1 | 	add	objptr, ##41984
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     00 E4 85 F1 | 	sub	objptr, ##41984
03edc     89 01 00 FF 
03ee0     0F 14 06 F6 | 	mov	arg02, ##@LR__5177
03ee4     C4 D6 B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     00 E4 05 F1 | 	add	objptr, ##41984
03ef8     F2 24 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E4 E5 85 F1 | 	sub	objptr, ##13796
03f04     F2 24 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 24 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 24 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 34 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     C4 3F B0 FD | 	call	#_compile_assign
03f90     FD 1E 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     10 A0 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     00 E4 05 F1 | 	add	objptr, ##41984
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     00 E4 85 F1 | 	sub	objptr, ##41984
03fcc     89 01 00 FF 
03fd0     10 14 06 F6 | 	mov	arg02, ##@LR__5178
03fd4     D4 D5 B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     00 E4 05 F1 | 	add	objptr, ##41984
03fe8     F2 24 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E4 E5 85 F1 | 	sub	objptr, ##13796
03ff4     F2 24 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 24 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     A8 76 B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 24 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     89 01 00 FF 
04048     11 12 06 F6 | 	mov	arg01, ##@LR__5179
0404c                 | ' 
0404c                 | ' write(text)
0404c     18 C0 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     14 C5 B1 FD | 	call	#_hg010b_spin2_crlf
04054     89 01 00 FF 
04058     12 12 06 F6 | 	mov	arg01, ##@LR__5180
0405c                 | ' 
0405c                 | ' write(text)
0405c     08 C0 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     04 C5 B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 24 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 24 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 1E 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     20 32 B2 FD | 	call	#__system___getiolock_0568
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     EC D4 B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     C0 E1 B1 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     58 E1 B1 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     E0 31 B2 FD | 	call	#__system___getiolock_0568
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 1F 02 F6 | 	mov	local01, arg01
040ec     89 01 00 FF 
040f0     18 14 06 F6 | 	mov	arg02, ##@LR__5181
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     B0 D4 B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     89 01 00 FF 
04108     1A 14 06 F6 | 	mov	arg02, ##@LR__5182
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     98 D4 B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     89 01 00 FF 
04120     1C 14 06 F6 | 	mov	arg02, ##@LR__5183
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     80 D4 B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     89 01 00 FF 
04138     1F 14 06 F6 | 	mov	arg02, ##@LR__5184
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     68 D4 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     89 01 00 FF 
04150     23 14 06 F6 | 	mov	arg02, ##@LR__5185
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     50 D4 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     89 01 00 FF 
04168     25 14 06 F6 | 	mov	arg02, ##@LR__5186
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     38 D4 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     89 01 00 FF 
04180     27 14 06 F6 | 	mov	arg02, ##@LR__5187
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     20 D4 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     89 01 00 FF 
04198     2B 14 06 F6 | 	mov	arg02, ##@LR__5188
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     08 D4 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     89 01 00 FF 
041b0     2F 14 06 F6 | 	mov	arg02, ##@LR__5189
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     F0 D3 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     89 01 00 FF 
041c8     33 14 06 F6 | 	mov	arg02, ##@LR__5190
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     D8 D3 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     89 01 00 FF 
041e0     37 14 06 F6 | 	mov	arg02, ##@LR__5191
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     C0 D3 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     89 01 00 FF 
041f8     3B 14 06 F6 | 	mov	arg02, ##@LR__5192
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     A8 D3 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     89 01 00 FF 
04210     3D 14 06 F6 | 	mov	arg02, ##@LR__5193
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     90 D3 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     89 01 00 FF 
04228     41 14 06 F6 | 	mov	arg02, ##@LR__5194
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     78 D3 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     89 01 00 FF 
04240     43 14 06 F6 | 	mov	arg02, ##@LR__5195
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     60 D3 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     89 01 00 FF 
04258     45 14 06 F6 | 	mov	arg02, ##@LR__5196
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     48 D3 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     89 01 00 FF 
04270     48 14 06 F6 | 	mov	arg02, ##@LR__5197
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     30 D3 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     89 01 00 FF 
04288     4B 14 06 F6 | 	mov	arg02, ##@LR__5198
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     18 D3 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     89 01 00 FF 
042a0     4D 14 06 F6 | 	mov	arg02, ##@LR__5199
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     00 D3 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     89 01 00 FF 
042b8     4F 14 06 F6 | 	mov	arg02, ##@LR__5200
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     E8 D2 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     89 01 00 FF 
042d0     52 14 06 F6 | 	mov	arg02, ##@LR__5201
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     D0 D2 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     89 01 00 FF 
042e8     55 14 06 F6 | 	mov	arg02, ##@LR__5202
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     B8 D2 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 1F 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     2C F2 B1 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     89 01 00 FF 
043dc     58 14 06 F6 | 	mov	arg02, ##@LR__5203
043e0     C8 D1 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     0F 13 02 F6 | 	mov	arg01, local01
043f4     09 21 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     10 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 20 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 21 82 F1 | 	sub	local02, arg01
0440c     10 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     0F 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     60 F2 B1 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     89 01 00 FF 
04430     5A 14 06 F6 | 	mov	arg02, ##@LR__5204
04434     74 D1 B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     3C F2 B1 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     89 01 00 FF 
04454     5C 14 06 F6 | 	mov	arg02, ##@LR__5205
04458     50 D1 B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     10 F2 B1 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     CC 06 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     E0 FA B1 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     6C 03 B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 1F 02 F6 | 	mov	local01, arg01
044b4     89 01 00 FF 
044b8     5E 14 06 F6 | 	mov	arg02, ##@LR__5206
044bc     0F 13 02 F6 | 	mov	arg01, local01
044c0     E8 D0 B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     89 01 00 FF 
044d0     64 14 06 F6 | 	mov	arg02, ##@LR__5207
044d4     0F 13 02 F6 | 	mov	arg01, local01
044d8     D0 D0 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     89 01 00 FF 
044e8     6B 14 06 F6 | 	mov	arg02, ##@LR__5208
044ec     0F 13 02 F6 | 	mov	arg01, local01
044f0     B8 D0 B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 1F 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     C4 F0 B1 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     89 01 00 FF 
04544     73 14 06 F6 | 	mov	arg02, ##@LR__5209
04548     60 D0 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     0F 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     B0 F1 B1 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     89 01 00 FF 
04570     75 14 06 F6 | 	mov	arg02, ##@LR__5210
04574     34 D0 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     0F 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     88 F1 B1 FD | 	call	#__system__Mid_S
04590     FD 20 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     70 F1 B1 FD | 	call	#__system__Mid_S
045a8     FD 20 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     0F 13 02 F6 | 	mov	arg01, local01
045b0     09 23 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     11 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 22 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 23 82 F1 | 	sub	local03, arg01
045c8     11 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     0F 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     3C F1 B1 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     89 01 00 FF 
045e4     77 14 06 F6 | 	mov	arg02, ##@LR__5211
045e8     C0 CF B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     0F 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     88 F0 B1 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     44 05 B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     F4 01 B2 FD | 	call	#__system___float_tointeger
04614     FD 24 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     0F 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     60 F0 B1 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     1C 05 B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     00 FD B1 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     BC 01 B2 FD | 	call	#__system___float_tointeger
0464c     FD 24 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 24 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     24 F0 B1 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     89 01 00 FF 
0466c     79 14 06 F6 | 	mov	arg02, ##@LR__5212
04670     38 CF B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 24 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     10 27 02 F6 | 	mov	local05, local02
04680     89 01 00 FF 
04684     7B 14 06 F6 | 	mov	arg02, ##@LR__5213
04688     13 13 02 F6 | 	mov	arg01, local05
0468c     1C CF B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     89 01 00 FF 
0469c     7D 14 06 F6 | 	mov	arg02, ##@LR__5214
046a0     13 13 02 F6 | 	mov	arg01, local05
046a4     04 CF B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     89 01 00 FF 
046b4     80 14 06 F6 | 	mov	arg02, ##@LR__5215
046b8     13 13 02 F6 | 	mov	arg01, local05
046bc     EC CE B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     89 01 00 FF 
046cc     82 14 06 F6 | 	mov	arg02, ##@LR__5216
046d0     13 13 02 F6 | 	mov	arg01, local05
046d4     D4 CE B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     89 01 00 FF 
046e4     85 14 06 F6 | 	mov	arg02, ##@LR__5217
046e8     13 13 02 F6 | 	mov	arg01, local05
046ec     BC CE B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     89 01 00 FF 
046fc     87 14 06 F6 | 	mov	arg02, ##@LR__5218
04700     13 13 02 F6 | 	mov	arg01, local05
04704     A4 CE B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     89 01 00 FF 
04714     89 14 06 F6 | 	mov	arg02, ##@LR__5219
04718     13 13 02 F6 | 	mov	arg01, local05
0471c     8C CE B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     89 01 00 FF 
0472c     8C 14 06 F6 | 	mov	arg02, ##@LR__5220
04730     13 13 02 F6 | 	mov	arg01, local05
04734     74 CE B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     89 01 00 FF 
04744     8E 14 06 F6 | 	mov	arg02, ##@LR__5221
04748     13 13 02 F6 | 	mov	arg01, local05
0474c     5C CE B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     89 01 00 FF 
0475c     91 14 06 F6 | 	mov	arg02, ##@LR__5222
04760     13 13 02 F6 | 	mov	arg01, local05
04764     44 CE B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     89 01 00 FF 
04774     93 14 06 F6 | 	mov	arg02, ##@LR__5223
04778     13 13 02 F6 | 	mov	arg01, local05
0477c     2C CE B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     89 01 00 FF 
0478c     96 14 06 F6 | 	mov	arg02, ##@LR__5224
04790     13 13 02 F6 | 	mov	arg01, local05
04794     14 CE B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     89 01 00 FF 
047a4     98 14 06 F6 | 	mov	arg02, ##@LR__5225
047a8     13 13 02 F6 | 	mov	arg01, local05
047ac     FC CD B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 29 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 29 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 29 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 29 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 29 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 29 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 29 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 29 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 29 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 29 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 29 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 29 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 29 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 25 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 24 56 F2 | 	cmps	local04, #10 wc
04870     12 2B 02 C6 |  if_b	mov	local07, local04
04874     01 2A 66 C0 |  if_b	shl	local07, #1
04878     12 2B 02 C1 |  if_b	add	local07, local04
0487c     02 2A 66 C0 |  if_b	shl	local07, #2
04880     15 29 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     14 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 1F 02 F6 | 	mov	local01, arg01
048a0     89 01 00 FF 
048a4     9A 14 06 F6 | 	mov	arg02, ##@LR__5226
048a8     0F 13 02 F6 | 	mov	arg01, local01
048ac     FC CC B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     89 01 00 FF 
048bc     9C 14 06 F6 | 	mov	arg02, ##@LR__5227
048c0     0F 13 02 F6 | 	mov	arg01, local01
048c4     E4 CC B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     89 01 00 FF 
048d4     9E 14 06 F6 | 	mov	arg02, ##@LR__5228
048d8     0F 13 02 F6 | 	mov	arg01, local01
048dc     CC CC B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     89 01 00 FF 
048ec     A0 14 06 F6 | 	mov	arg02, ##@LR__5229
048f0     0F 13 02 F6 | 	mov	arg01, local01
048f4     B4 CC B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     89 01 00 FF 
04904     A2 14 06 F6 | 	mov	arg02, ##@LR__5230
04908     0F 13 02 F6 | 	mov	arg01, local01
0490c     9C CC B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     89 01 00 FF 
0491c     A4 14 06 F6 | 	mov	arg02, ##@LR__5231
04920     0F 13 02 F6 | 	mov	arg01, local01
04924     84 CC B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     89 01 00 FF 
04934     A6 14 06 F6 | 	mov	arg02, ##@LR__5232
04938     0F 13 02 F6 | 	mov	arg01, local01
0493c     6C CC B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     89 01 00 FF 
0494c     A8 14 06 F6 | 	mov	arg02, ##@LR__5233
04950     0F 13 02 F6 | 	mov	arg01, local01
04954     54 CC B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     89 01 00 FF 
04964     AA 14 06 F6 | 	mov	arg02, ##@LR__5234
04968     0F 13 02 F6 | 	mov	arg01, local01
0496c     3C CC B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     89 01 00 FF 
0497c     AC 14 06 F6 | 	mov	arg02, ##@LR__5235
04980     0F 13 02 F6 | 	mov	arg01, local01
04984     24 CC B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     89 01 00 FF 
04994     AE 14 06 F6 | 	mov	arg02, ##@LR__5236
04998     0F 13 02 F6 | 	mov	arg01, local01
0499c     0C CC B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     89 01 00 FF 
049ac     B0 14 06 F6 | 	mov	arg02, ##@LR__5237
049b0     0F 13 02 F6 | 	mov	arg01, local01
049b4     F4 CB B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     89 01 00 FF 
049c4     B2 14 06 F6 | 	mov	arg02, ##@LR__5238
049c8     0F 13 02 F6 | 	mov	arg01, local01
049cc     DC CB B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     89 01 00 FF 
049dc     B4 14 06 F6 | 	mov	arg02, ##@LR__5239
049e0     0F 13 02 F6 | 	mov	arg01, local01
049e4     C4 CB B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     89 01 00 FF 
049f4     B6 14 06 F6 | 	mov	arg02, ##@LR__5240
049f8     0F 13 02 F6 | 	mov	arg01, local01
049fc     AC CB B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 1F 02 F6 | 	mov	local01, arg01
04aa0     89 01 00 FF 
04aa4     BA 14 06 F6 | 	mov	arg02, ##@LR__5242
04aa8     0F 13 02 F6 | 	mov	arg01, local01
04aac     FC CA B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     A4 0B 90 AD |  if_e	jmp	#LR__0310
04ab8     89 01 00 FF 
04abc     BF 14 06 F6 | 	mov	arg02, ##@LR__5243
04ac0     0F 13 02 F6 | 	mov	arg01, local01
04ac4     E4 CA B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     94 0B 90 AD |  if_e	jmp	#LR__0311
04ad0     89 01 00 FF 
04ad4     C2 14 06 F6 | 	mov	arg02, ##@LR__5244
04ad8     0F 13 02 F6 | 	mov	arg01, local01
04adc     CC CA B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     84 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     89 01 00 FF 
04aec     C6 14 06 F6 | 	mov	arg02, ##@LR__5245
04af0     0F 13 02 F6 | 	mov	arg01, local01
04af4     B4 CA B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     74 0B 90 AD |  if_e	jmp	#LR__0313
04b00     89 01 00 FF 
04b04     CB 14 06 F6 | 	mov	arg02, ##@LR__5246
04b08     0F 13 02 F6 | 	mov	arg01, local01
04b0c     9C CA B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     64 0B 90 AD |  if_e	jmp	#LR__0314
04b18     89 01 00 FF 
04b1c     CF 14 06 F6 | 	mov	arg02, ##@LR__5247
04b20     0F 13 02 F6 | 	mov	arg01, local01
04b24     84 CA B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     54 0B 90 AD |  if_e	jmp	#LR__0315
04b30     89 01 00 FF 
04b34     D2 14 06 F6 | 	mov	arg02, ##@LR__5248
04b38     0F 13 02 F6 | 	mov	arg01, local01
04b3c     6C CA B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     44 0B 90 AD |  if_e	jmp	#LR__0316
04b48     89 01 00 FF 
04b4c     DD 14 06 F6 | 	mov	arg02, ##@LR__5249
04b50     0F 13 02 F6 | 	mov	arg01, local01
04b54     54 CA B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     34 0B 90 AD |  if_e	jmp	#LR__0317
04b60     89 01 00 FF 
04b64     E1 14 06 F6 | 	mov	arg02, ##@LR__5250
04b68     0F 13 02 F6 | 	mov	arg01, local01
04b6c     3C CA B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     24 0B 90 AD |  if_e	jmp	#LR__0318
04b78     89 01 00 FF 
04b7c     EB 14 06 F6 | 	mov	arg02, ##@LR__5251
04b80     0F 13 02 F6 | 	mov	arg01, local01
04b84     24 CA B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     14 0B 90 AD |  if_e	jmp	#LR__0319
04b90     89 01 00 FF 
04b94     EF 14 06 F6 | 	mov	arg02, ##@LR__5252
04b98     0F 13 02 F6 | 	mov	arg01, local01
04b9c     0C CA B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     04 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     89 01 00 FF 
04bac     F9 14 06 F6 | 	mov	arg02, ##@LR__5253
04bb0     0F 13 02 F6 | 	mov	arg01, local01
04bb4     F4 C9 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     F4 0A 90 AD |  if_e	jmp	#LR__0321
04bc0     89 01 00 FF 
04bc4     FD 14 06 F6 | 	mov	arg02, ##@LR__5254
04bc8     0F 13 02 F6 | 	mov	arg01, local01
04bcc     DC C9 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     E4 0A 90 AD |  if_e	jmp	#LR__0322
04bd8     89 01 00 FF 
04bdc     08 15 06 F6 | 	mov	arg02, ##@LR__5255
04be0     0F 13 02 F6 | 	mov	arg01, local01
04be4     C4 C9 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     D4 0A 90 AD |  if_e	jmp	#LR__0323
04bf0     89 01 00 FF 
04bf4     0C 15 06 F6 | 	mov	arg02, ##@LR__5256
04bf8     0F 13 02 F6 | 	mov	arg01, local01
04bfc     AC C9 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     C4 0A 90 AD |  if_e	jmp	#LR__0324
04c08     89 01 00 FF 
04c0c     13 15 06 F6 | 	mov	arg02, ##@LR__5257
04c10     0F 13 02 F6 | 	mov	arg01, local01
04c14     94 C9 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     B4 0A 90 AD |  if_e	jmp	#LR__0325
04c20     89 01 00 FF 
04c24     17 15 06 F6 | 	mov	arg02, ##@LR__5258
04c28     0F 13 02 F6 | 	mov	arg01, local01
04c2c     7C C9 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     A4 0A 90 AD |  if_e	jmp	#LR__0326
04c38     89 01 00 FF 
04c3c     1D 15 06 F6 | 	mov	arg02, ##@LR__5259
04c40     0F 13 02 F6 | 	mov	arg01, local01
04c44     64 C9 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     94 0A 90 AD |  if_e	jmp	#LR__0327
04c50     89 01 00 FF 
04c54     23 15 06 F6 | 	mov	arg02, ##@LR__5260
04c58     0F 13 02 F6 | 	mov	arg01, local01
04c5c     4C C9 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     84 0A 90 AD |  if_e	jmp	#LR__0328
04c68     89 01 00 FF 
04c6c     27 15 06 F6 | 	mov	arg02, ##@LR__5261
04c70     0F 13 02 F6 | 	mov	arg01, local01
04c74     34 C9 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     74 0A 90 AD |  if_e	jmp	#LR__0329
04c80     89 01 00 FF 
04c84     2D 15 06 F6 | 	mov	arg02, ##@LR__5262
04c88     0F 13 02 F6 | 	mov	arg01, local01
04c8c     1C C9 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     64 0A 90 AD |  if_e	jmp	#LR__0330
04c98     89 01 00 FF 
04c9c     30 15 06 F6 | 	mov	arg02, ##@LR__5263
04ca0     0F 13 02 F6 | 	mov	arg01, local01
04ca4     04 C9 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     54 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     89 01 00 FF 
04cb4     36 15 06 F6 | 	mov	arg02, ##@LR__5264
04cb8     0F 13 02 F6 | 	mov	arg01, local01
04cbc     EC C8 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     44 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     89 01 00 FF 
04ccc     3A 15 06 F6 | 	mov	arg02, ##@LR__5265
04cd0     0F 13 02 F6 | 	mov	arg01, local01
04cd4     D4 C8 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     34 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     89 01 00 FF 
04ce4     41 15 06 F6 | 	mov	arg02, ##@LR__5266
04ce8     0F 13 02 F6 | 	mov	arg01, local01
04cec     BC C8 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     24 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     89 01 00 FF 
04cfc     48 15 06 F6 | 	mov	arg02, ##@LR__5267
04d00     0F 13 02 F6 | 	mov	arg01, local01
04d04     A4 C8 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     14 0A 90 AD |  if_e	jmp	#LR__0335
04d10     89 01 00 FF 
04d14     4F 15 06 F6 | 	mov	arg02, ##@LR__5268
04d18     0F 13 02 F6 | 	mov	arg01, local01
04d1c     8C C8 B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     04 0A 90 AD |  if_e	jmp	#LR__0336
04d28     89 01 00 FF 
04d2c     59 15 06 F6 | 	mov	arg02, ##@LR__5269
04d30     0F 13 02 F6 | 	mov	arg01, local01
04d34     74 C8 B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     F4 09 90 AD |  if_e	jmp	#LR__0337
04d40     89 01 00 FF 
04d44     5D 15 06 F6 | 	mov	arg02, ##@LR__5270
04d48     0F 13 02 F6 | 	mov	arg01, local01
04d4c     5C C8 B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     E4 09 90 AD |  if_e	jmp	#LR__0338
04d58     89 01 00 FF 
04d5c     61 15 06 F6 | 	mov	arg02, ##@LR__5271
04d60     0F 13 02 F6 | 	mov	arg01, local01
04d64     44 C8 B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     D4 09 90 AD |  if_e	jmp	#LR__0339
04d70     89 01 00 FF 
04d74     68 15 06 F6 | 	mov	arg02, ##@LR__5272
04d78     0F 13 02 F6 | 	mov	arg01, local01
04d7c     2C C8 B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     C4 09 90 AD |  if_e	jmp	#LR__0340
04d88     89 01 00 FF 
04d8c     6C 15 06 F6 | 	mov	arg02, ##@LR__5273
04d90     0F 13 02 F6 | 	mov	arg01, local01
04d94     14 C8 B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     B4 09 90 AD |  if_e	jmp	#LR__0341
04da0     89 01 00 FF 
04da4     70 15 06 F6 | 	mov	arg02, ##@LR__5274
04da8     0F 13 02 F6 | 	mov	arg01, local01
04dac     FC C7 B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     A4 09 90 AD |  if_e	jmp	#LR__0342
04db8     89 01 00 FF 
04dbc     76 15 06 F6 | 	mov	arg02, ##@LR__5275
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     E4 C7 B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     94 09 90 AD |  if_e	jmp	#LR__0343
04dd0     89 01 00 FF 
04dd4     7B 15 06 F6 | 	mov	arg02, ##@LR__5276
04dd8     0F 13 02 F6 | 	mov	arg01, local01
04ddc     CC C7 B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     84 09 90 AD |  if_e	jmp	#LR__0344
04de8     89 01 00 FF 
04dec     7F 15 06 F6 | 	mov	arg02, ##@LR__5277
04df0     0F 13 02 F6 | 	mov	arg01, local01
04df4     B4 C7 B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     74 09 90 AD |  if_e	jmp	#LR__0345
04e00     89 01 00 FF 
04e04     84 15 06 F6 | 	mov	arg02, ##@LR__5278
04e08     0F 13 02 F6 | 	mov	arg01, local01
04e0c     9C C7 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     64 09 90 AD |  if_e	jmp	#LR__0346
04e18     89 01 00 FF 
04e1c     88 15 06 F6 | 	mov	arg02, ##@LR__5279
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     84 C7 B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     54 09 90 AD |  if_e	jmp	#LR__0347
04e30     89 01 00 FF 
04e34     8E 15 06 F6 | 	mov	arg02, ##@LR__5280
04e38     0F 13 02 F6 | 	mov	arg01, local01
04e3c     6C C7 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     44 09 90 AD |  if_e	jmp	#LR__0348
04e48     89 01 00 FF 
04e4c     91 15 06 F6 | 	mov	arg02, ##@LR__5281
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     54 C7 B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     34 09 90 AD |  if_e	jmp	#LR__0349
04e60     89 01 00 FF 
04e64     99 15 06 F6 | 	mov	arg02, ##@LR__5282
04e68     0F 13 02 F6 | 	mov	arg01, local01
04e6c     3C C7 B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     24 09 90 AD |  if_e	jmp	#LR__0350
04e78     89 01 00 FF 
04e7c     9D 15 06 F6 | 	mov	arg02, ##@LR__5283
04e80     0F 13 02 F6 | 	mov	arg01, local01
04e84     24 C7 B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     14 09 90 AD |  if_e	jmp	#LR__0351
04e90     89 01 00 FF 
04e94     A2 15 06 F6 | 	mov	arg02, ##@LR__5284
04e98     0F 13 02 F6 | 	mov	arg01, local01
04e9c     0C C7 B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     04 09 90 AD |  if_e	jmp	#LR__0352
04ea8     89 01 00 FF 
04eac     A6 15 06 F6 | 	mov	arg02, ##@LR__5285
04eb0     0F 13 02 F6 | 	mov	arg01, local01
04eb4     F4 C6 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     F4 08 90 AD |  if_e	jmp	#LR__0353
04ec0     89 01 00 FF 
04ec4     AB 15 06 F6 | 	mov	arg02, ##@LR__5286
04ec8     0F 13 02 F6 | 	mov	arg01, local01
04ecc     DC C6 B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     E4 08 90 AD |  if_e	jmp	#LR__0354
04ed8     89 01 00 FF 
04edc     AF 15 06 F6 | 	mov	arg02, ##@LR__5287
04ee0     0F 13 02 F6 | 	mov	arg01, local01
04ee4     C4 C6 B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     D4 08 90 AD |  if_e	jmp	#LR__0355
04ef0     89 01 00 FF 
04ef4     B2 15 06 F6 | 	mov	arg02, ##@LR__5288
04ef8     0F 13 02 F6 | 	mov	arg01, local01
04efc     AC C6 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     C4 08 90 AD |  if_e	jmp	#LR__0356
04f08     89 01 00 FF 
04f0c     B8 15 06 F6 | 	mov	arg02, ##@LR__5289
04f10     0F 13 02 F6 | 	mov	arg01, local01
04f14     94 C6 B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     B4 08 90 AD |  if_e	jmp	#LR__0357
04f20     89 01 00 FF 
04f24     BC 15 06 F6 | 	mov	arg02, ##@LR__5290
04f28     0F 13 02 F6 | 	mov	arg01, local01
04f2c     7C C6 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     A4 08 90 AD |  if_e	jmp	#LR__0358
04f38     89 01 00 FF 
04f3c     C0 15 06 F6 | 	mov	arg02, ##@LR__5291
04f40     0F 13 02 F6 | 	mov	arg01, local01
04f44     64 C6 B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     94 08 90 AD |  if_e	jmp	#LR__0359
04f50     89 01 00 FF 
04f54     C6 15 06 F6 | 	mov	arg02, ##@LR__5292
04f58     0F 13 02 F6 | 	mov	arg01, local01
04f5c     4C C6 B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     84 08 90 AD |  if_e	jmp	#LR__0360
04f68     89 01 00 FF 
04f6c     CB 15 06 F6 | 	mov	arg02, ##@LR__5293
04f70     0F 13 02 F6 | 	mov	arg01, local01
04f74     34 C6 B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     74 08 90 AD |  if_e	jmp	#LR__0361
04f80     89 01 00 FF 
04f84     CE 15 06 F6 | 	mov	arg02, ##@LR__5294
04f88     0F 13 02 F6 | 	mov	arg01, local01
04f8c     1C C6 B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     64 08 90 AD |  if_e	jmp	#LR__0362
04f98     89 01 00 FF 
04f9c     D1 15 06 F6 | 	mov	arg02, ##@LR__5295
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     04 C6 B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     54 08 90 AD |  if_e	jmp	#LR__0363
04fb0     89 01 00 FF 
04fb4     D5 15 06 F6 | 	mov	arg02, ##@LR__5296
04fb8     0F 13 02 F6 | 	mov	arg01, local01
04fbc     EC C5 B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     44 08 90 AD |  if_e	jmp	#LR__0364
04fc8     89 01 00 FF 
04fcc     D8 15 06 F6 | 	mov	arg02, ##@LR__5297
04fd0     0F 13 02 F6 | 	mov	arg01, local01
04fd4     D4 C5 B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     34 08 90 AD |  if_e	jmp	#LR__0365
04fe0     89 01 00 FF 
04fe4     DD 15 06 F6 | 	mov	arg02, ##@LR__5298
04fe8     0F 13 02 F6 | 	mov	arg01, local01
04fec     BC C5 B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     24 08 90 AD |  if_e	jmp	#LR__0366
04ff8     89 01 00 FF 
04ffc     E0 15 06 F6 | 	mov	arg02, ##@LR__5299
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     A4 C5 B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     14 08 90 AD |  if_e	jmp	#LR__0367
05010     89 01 00 FF 
05014     E5 15 06 F6 | 	mov	arg02, ##@LR__5300
05018     0F 13 02 F6 | 	mov	arg01, local01
0501c     8C C5 B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     04 08 90 AD |  if_e	jmp	#LR__0368
05028     89 01 00 FF 
0502c     E9 15 06 F6 | 	mov	arg02, ##@LR__5301
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     74 C5 B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     F4 07 90 AD |  if_e	jmp	#LR__0369
05040     89 01 00 FF 
05044     EF 15 06 F6 | 	mov	arg02, ##@LR__5302
05048     0F 13 02 F6 | 	mov	arg01, local01
0504c     5C C5 B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     E4 07 90 AD |  if_e	jmp	#LR__0370
05058     89 01 00 FF 
0505c     F5 15 06 F6 | 	mov	arg02, ##@LR__5303
05060     0F 13 02 F6 | 	mov	arg01, local01
05064     44 C5 B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     D4 07 90 AD |  if_e	jmp	#LR__0371
05070     89 01 00 FF 
05074     FA 15 06 F6 | 	mov	arg02, ##@LR__5304
05078     0F 13 02 F6 | 	mov	arg01, local01
0507c     2C C5 B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     C4 07 90 AD |  if_e	jmp	#LR__0372
05088     89 01 00 FF 
0508c     FD 15 06 F6 | 	mov	arg02, ##@LR__5305
05090     0F 13 02 F6 | 	mov	arg01, local01
05094     14 C5 B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     B4 07 90 AD |  if_e	jmp	#LR__0373
050a0     8A 01 00 FF 
050a4     03 14 06 F6 | 	mov	arg02, ##@LR__5306
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     FC C4 B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     A4 07 90 AD |  if_e	jmp	#LR__0374
050b8     8A 01 00 FF 
050bc     07 14 06 F6 | 	mov	arg02, ##@LR__5307
050c0     0F 13 02 F6 | 	mov	arg01, local01
050c4     E4 C4 B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     94 07 90 AD |  if_e	jmp	#LR__0375
050d0     8A 01 00 FF 
050d4     0C 14 06 F6 | 	mov	arg02, ##@LR__5308
050d8     0F 13 02 F6 | 	mov	arg01, local01
050dc     CC C4 B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     84 07 90 AD |  if_e	jmp	#LR__0376
050e8     8A 01 00 FF 
050ec     0F 14 06 F6 | 	mov	arg02, ##@LR__5309
050f0     0F 13 02 F6 | 	mov	arg01, local01
050f4     B4 C4 B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     74 07 90 AD |  if_e	jmp	#LR__0377
05100     8A 01 00 FF 
05104     14 14 06 F6 | 	mov	arg02, ##@LR__5310
05108     0F 13 02 F6 | 	mov	arg01, local01
0510c     9C C4 B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     64 07 90 AD |  if_e	jmp	#LR__0378
05118     8A 01 00 FF 
0511c     1A 14 06 F6 | 	mov	arg02, ##@LR__5311
05120     0F 13 02 F6 | 	mov	arg01, local01
05124     84 C4 B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     54 07 90 AD |  if_e	jmp	#LR__0379
05130     8A 01 00 FF 
05134     1E 14 06 F6 | 	mov	arg02, ##@LR__5312
05138     0F 13 02 F6 | 	mov	arg01, local01
0513c     6C C4 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     44 07 90 AD |  if_e	jmp	#LR__0380
05148     8A 01 00 FF 
0514c     27 14 06 F6 | 	mov	arg02, ##@LR__5313
05150     0F 13 02 F6 | 	mov	arg01, local01
05154     54 C4 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     34 07 90 AD |  if_e	jmp	#LR__0381
05160     8A 01 00 FF 
05164     2D 14 06 F6 | 	mov	arg02, ##@LR__5314
05168     0F 13 02 F6 | 	mov	arg01, local01
0516c     3C C4 B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     24 07 90 AD |  if_e	jmp	#LR__0382
05178     8A 01 00 FF 
0517c     33 14 06 F6 | 	mov	arg02, ##@LR__5315
05180     0F 13 02 F6 | 	mov	arg01, local01
05184     24 C4 B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     14 07 90 AD |  if_e	jmp	#LR__0383
05190     8A 01 00 FF 
05194     3C 14 06 F6 | 	mov	arg02, ##@LR__5316
05198     0F 13 02 F6 | 	mov	arg01, local01
0519c     0C C4 B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     04 07 90 AD |  if_e	jmp	#LR__0384
051a8     8A 01 00 FF 
051ac     46 14 06 F6 | 	mov	arg02, ##@LR__5317
051b0     0F 13 02 F6 | 	mov	arg01, local01
051b4     F4 C3 B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     F4 06 90 AD |  if_e	jmp	#LR__0385
051c0     8A 01 00 FF 
051c4     4F 14 06 F6 | 	mov	arg02, ##@LR__5318
051c8     0F 13 02 F6 | 	mov	arg01, local01
051cc     DC C3 B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     E4 06 90 AD |  if_e	jmp	#LR__0386
051d8     8A 01 00 FF 
051dc     54 14 06 F6 | 	mov	arg02, ##@LR__5319
051e0     0F 13 02 F6 | 	mov	arg01, local01
051e4     C4 C3 B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     D4 06 90 AD |  if_e	jmp	#LR__0387
051f0     8A 01 00 FF 
051f4     57 14 06 F6 | 	mov	arg02, ##@LR__5320
051f8     0F 13 02 F6 | 	mov	arg01, local01
051fc     AC C3 B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     C4 06 90 AD |  if_e	jmp	#LR__0388
05208     8A 01 00 FF 
0520c     5C 14 06 F6 | 	mov	arg02, ##@LR__5321
05210     0F 13 02 F6 | 	mov	arg01, local01
05214     94 C3 B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     B4 06 90 AD |  if_e	jmp	#LR__0389
05220     8A 01 00 FF 
05224     60 14 06 F6 | 	mov	arg02, ##@LR__5322
05228     0F 13 02 F6 | 	mov	arg01, local01
0522c     7C C3 B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     A4 06 90 AD |  if_e	jmp	#LR__0390
05238     8A 01 00 FF 
0523c     65 14 06 F6 | 	mov	arg02, ##@LR__5323
05240     0F 13 02 F6 | 	mov	arg01, local01
05244     64 C3 B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     94 06 90 AD |  if_e	jmp	#LR__0391
05250     8A 01 00 FF 
05254     69 14 06 F6 | 	mov	arg02, ##@LR__5324
05258     0F 13 02 F6 | 	mov	arg01, local01
0525c     4C C3 B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     84 06 90 AD |  if_e	jmp	#LR__0392
05268     8A 01 00 FF 
0526c     72 14 06 F6 | 	mov	arg02, ##@LR__5325
05270     0F 13 02 F6 | 	mov	arg01, local01
05274     34 C3 B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     74 06 90 AD |  if_e	jmp	#LR__0393
05280     8A 01 00 FF 
05284     77 14 06 F6 | 	mov	arg02, ##@LR__5326
05288     0F 13 02 F6 | 	mov	arg01, local01
0528c     1C C3 B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     64 06 90 AD |  if_e	jmp	#LR__0394
05298     8A 01 00 FF 
0529c     7D 14 06 F6 | 	mov	arg02, ##@LR__5327
052a0     0F 13 02 F6 | 	mov	arg01, local01
052a4     04 C3 B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     54 06 90 AD |  if_e	jmp	#LR__0395
052b0     8A 01 00 FF 
052b4     7F 14 06 F6 | 	mov	arg02, ##@LR__5328
052b8     0F 13 02 F6 | 	mov	arg01, local01
052bc     EC C2 B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     44 06 90 AD |  if_e	jmp	#LR__0396
052c8     8A 01 00 FF 
052cc     83 14 06 F6 | 	mov	arg02, ##@LR__5329
052d0     0F 13 02 F6 | 	mov	arg01, local01
052d4     D4 C2 B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     34 06 90 AD |  if_e	jmp	#LR__0397
052e0     8A 01 00 FF 
052e4     87 14 06 F6 | 	mov	arg02, ##@LR__5330
052e8     0F 13 02 F6 | 	mov	arg01, local01
052ec     BC C2 B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     24 06 90 AD |  if_e	jmp	#LR__0398
052f8     8A 01 00 FF 
052fc     8F 14 06 F6 | 	mov	arg02, ##@LR__5331
05300     0F 13 02 F6 | 	mov	arg01, local01
05304     A4 C2 B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     14 06 90 AD |  if_e	jmp	#LR__0399
05310     8A 01 00 FF 
05314     93 14 06 F6 | 	mov	arg02, ##@LR__5332
05318     0F 13 02 F6 | 	mov	arg01, local01
0531c     8C C2 B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     04 06 90 AD |  if_e	jmp	#LR__0400
05328     8A 01 00 FF 
0532c     95 14 06 F6 | 	mov	arg02, ##@LR__5333
05330     0F 13 02 F6 | 	mov	arg01, local01
05334     74 C2 B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     F4 05 90 AD |  if_e	jmp	#LR__0401
05340     8A 01 00 FF 
05344     9C 14 06 F6 | 	mov	arg02, ##@LR__5334
05348     0F 13 02 F6 | 	mov	arg01, local01
0534c     5C C2 B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     E4 05 90 AD |  if_e	jmp	#LR__0402
05358     8A 01 00 FF 
0535c     A0 14 06 F6 | 	mov	arg02, ##@LR__5335
05360     0F 13 02 F6 | 	mov	arg01, local01
05364     44 C2 B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     D4 05 90 AD |  if_e	jmp	#LR__0403
05370     8A 01 00 FF 
05374     A5 14 06 F6 | 	mov	arg02, ##@LR__5336
05378     0F 13 02 F6 | 	mov	arg01, local01
0537c     2C C2 B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     C4 05 90 AD |  if_e	jmp	#LR__0404
05388     8A 01 00 FF 
0538c     A8 14 06 F6 | 	mov	arg02, ##@LR__5337
05390     0F 13 02 F6 | 	mov	arg01, local01
05394     14 C2 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     B4 05 90 AD |  if_e	jmp	#LR__0405
053a0     8A 01 00 FF 
053a4     B1 14 06 F6 | 	mov	arg02, ##@LR__5338
053a8     0F 13 02 F6 | 	mov	arg01, local01
053ac     FC C1 B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     A4 05 90 AD |  if_e	jmp	#LR__0406
053b8     8A 01 00 FF 
053bc     B5 14 06 F6 | 	mov	arg02, ##@LR__5339
053c0     0F 13 02 F6 | 	mov	arg01, local01
053c4     E4 C1 B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     94 05 90 AD |  if_e	jmp	#LR__0407
053d0     8A 01 00 FF 
053d4     BC 14 06 F6 | 	mov	arg02, ##@LR__5340
053d8     0F 13 02 F6 | 	mov	arg01, local01
053dc     CC C1 B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     84 05 90 AD |  if_e	jmp	#LR__0408
053e8     8A 01 00 FF 
053ec     C0 14 06 F6 | 	mov	arg02, ##@LR__5341
053f0     0F 13 02 F6 | 	mov	arg01, local01
053f4     B4 C1 B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     74 05 90 AD |  if_e	jmp	#LR__0409
05400     8A 01 00 FF 
05404     C7 14 06 F6 | 	mov	arg02, ##@LR__5342
05408     0F 13 02 F6 | 	mov	arg01, local01
0540c     9C C1 B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     64 05 90 AD |  if_e	jmp	#LR__0410
05418     8A 01 00 FF 
0541c     CB 14 06 F6 | 	mov	arg02, ##@LR__5343
05420     0F 13 02 F6 | 	mov	arg01, local01
05424     84 C1 B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     54 05 90 AD |  if_e	jmp	#LR__0411
05430     8A 01 00 FF 
05434     D2 14 06 F6 | 	mov	arg02, ##@LR__5344
05438     0F 13 02 F6 | 	mov	arg01, local01
0543c     6C C1 B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     44 05 90 AD |  if_e	jmp	#LR__0412
05448     8A 01 00 FF 
0544c     D5 14 06 F6 | 	mov	arg02, ##@LR__5345
05450     0F 13 02 F6 | 	mov	arg01, local01
05454     54 C1 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     34 05 90 AD |  if_e	jmp	#LR__0413
05460     8A 01 00 FF 
05464     E0 14 06 F6 | 	mov	arg02, ##@LR__5346
05468     0F 13 02 F6 | 	mov	arg01, local01
0546c     3C C1 B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     24 05 90 AD |  if_e	jmp	#LR__0414
05478     8A 01 00 FF 
0547c     E4 14 06 F6 | 	mov	arg02, ##@LR__5347
05480     0F 13 02 F6 | 	mov	arg01, local01
05484     24 C1 B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     14 05 90 AD |  if_e	jmp	#LR__0415
05490     8A 01 00 FF 
05494     EB 14 06 F6 | 	mov	arg02, ##@LR__5348
05498     0F 13 02 F6 | 	mov	arg01, local01
0549c     0C C1 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     04 05 90 AD |  if_e	jmp	#LR__0416
054a8     8A 01 00 FF 
054ac     EF 14 06 F6 | 	mov	arg02, ##@LR__5349
054b0     0F 13 02 F6 | 	mov	arg01, local01
054b4     F4 C0 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     F4 04 90 AD |  if_e	jmp	#LR__0417
054c0     8A 01 00 FF 
054c4     F7 14 06 F6 | 	mov	arg02, ##@LR__5350
054c8     0F 13 02 F6 | 	mov	arg01, local01
054cc     DC C0 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     E4 04 90 AD |  if_e	jmp	#LR__0418
054d8     8A 01 00 FF 
054dc     FB 14 06 F6 | 	mov	arg02, ##@LR__5351
054e0     0F 13 02 F6 | 	mov	arg01, local01
054e4     C4 C0 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     D4 04 90 AD |  if_e	jmp	#LR__0419
054f0     8A 01 00 FF 
054f4     02 15 06 F6 | 	mov	arg02, ##@LR__5352
054f8     0F 13 02 F6 | 	mov	arg01, local01
054fc     AC C0 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     C4 04 90 AD |  if_e	jmp	#LR__0420
05508     8A 01 00 FF 
0550c     09 15 06 F6 | 	mov	arg02, ##@LR__5353
05510     0F 13 02 F6 | 	mov	arg01, local01
05514     94 C0 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     B4 04 90 AD |  if_e	jmp	#LR__0421
05520     8A 01 00 FF 
05524     0D 15 06 F6 | 	mov	arg02, ##@LR__5354
05528     0F 13 02 F6 | 	mov	arg01, local01
0552c     7C C0 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     A4 04 90 AD |  if_e	jmp	#LR__0422
05538     8A 01 00 FF 
0553c     13 15 06 F6 | 	mov	arg02, ##@LR__5355
05540     0F 13 02 F6 | 	mov	arg01, local01
05544     64 C0 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     94 04 90 AD |  if_e	jmp	#LR__0423
05550     8A 01 00 FF 
05554     17 15 06 F6 | 	mov	arg02, ##@LR__5356
05558     0F 13 02 F6 | 	mov	arg01, local01
0555c     4C C0 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     84 04 90 AD |  if_e	jmp	#LR__0424
05568     8A 01 00 FF 
0556c     1E 15 06 F6 | 	mov	arg02, ##@LR__5357
05570     0F 13 02 F6 | 	mov	arg01, local01
05574     34 C0 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     74 04 90 AD |  if_e	jmp	#LR__0425
05580     8A 01 00 FF 
05584     23 15 06 F6 | 	mov	arg02, ##@LR__5358
05588     0F 13 02 F6 | 	mov	arg01, local01
0558c     1C C0 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     64 04 90 AD |  if_e	jmp	#LR__0426
05598     8A 01 00 FF 
0559c     28 15 06 F6 | 	mov	arg02, ##@LR__5359
055a0     0F 13 02 F6 | 	mov	arg01, local01
055a4     04 C0 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     54 04 90 AD |  if_e	jmp	#LR__0427
055b0     8A 01 00 FF 
055b4     2F 15 06 F6 | 	mov	arg02, ##@LR__5360
055b8     0F 13 02 F6 | 	mov	arg01, local01
055bc     EC BF B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     44 04 90 AD |  if_e	jmp	#LR__0428
055c8     8A 01 00 FF 
055cc     32 15 06 F6 | 	mov	arg02, ##@LR__5361
055d0     0F 13 02 F6 | 	mov	arg01, local01
055d4     D4 BF B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     34 04 90 AD |  if_e	jmp	#LR__0429
055e0     8A 01 00 FF 
055e4     3C 15 06 F6 | 	mov	arg02, ##@LR__5362
055e8     0F 13 02 F6 | 	mov	arg01, local01
055ec     BC BF B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     24 04 90 AD |  if_e	jmp	#LR__0430
055f8     8A 01 00 FF 
055fc     40 15 06 F6 | 	mov	arg02, ##@LR__5363
05600     0F 13 02 F6 | 	mov	arg01, local01
05604     A4 BF B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     14 04 90 AD |  if_e	jmp	#LR__0431
05610     8A 01 00 FF 
05614     48 15 06 F6 | 	mov	arg02, ##@LR__5364
05618     0F 13 02 F6 | 	mov	arg01, local01
0561c     8C BF B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     04 04 90 AD |  if_e	jmp	#LR__0432
05628     8A 01 00 FF 
0562c     4C 15 06 F6 | 	mov	arg02, ##@LR__5365
05630     0F 13 02 F6 | 	mov	arg01, local01
05634     74 BF B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     F4 03 90 AD |  if_e	jmp	#LR__0433
05640     8A 01 00 FF 
05644     52 15 06 F6 | 	mov	arg02, ##@LR__5366
05648     0F 13 02 F6 | 	mov	arg01, local01
0564c     5C BF B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     E4 03 90 AD |  if_e	jmp	#LR__0434
05658     E8 03 90 FD | 	jmp	#LR__0435
0565c                 | LR__0310
0565c     5C FA 05 F6 | 	mov	result1, #92
05660     E4 03 90 FD | 	jmp	#LR__0436
05664                 | LR__0311
05664     5C FA 05 F6 | 	mov	result1, #92
05668     DC 03 90 FD | 	jmp	#LR__0436
0566c                 | LR__0312
0566c     47 FA 05 F6 | 	mov	result1, #71
05670     D4 03 90 FD | 	jmp	#LR__0436
05674                 | LR__0313
05674     59 FA 05 F6 | 	mov	result1, #89
05678     CC 03 90 FD | 	jmp	#LR__0436
0567c                 | LR__0314
0567c     59 FA 05 F6 | 	mov	result1, #89
05680     C4 03 90 FD | 	jmp	#LR__0436
05684                 | LR__0315
05684     C3 FA 05 F6 | 	mov	result1, #195
05688     BC 03 90 FD | 	jmp	#LR__0436
0568c                 | LR__0316
0568c     AE FA 05 F6 | 	mov	result1, #174
05690     B4 03 90 FD | 	jmp	#LR__0436
05694                 | LR__0317
05694     AE FA 05 F6 | 	mov	result1, #174
05698     AC 03 90 FD | 	jmp	#LR__0436
0569c                 | LR__0318
0569c     B1 FA 05 F6 | 	mov	result1, #177
056a0     A4 03 90 FD | 	jmp	#LR__0436
056a4                 | LR__0319
056a4     B1 FA 05 F6 | 	mov	result1, #177
056a8     9C 03 90 FD | 	jmp	#LR__0436
056ac                 | LR__0320
056ac     AF FA 05 F6 | 	mov	result1, #175
056b0     94 03 90 FD | 	jmp	#LR__0436
056b4                 | LR__0321
056b4     AF FA 05 F6 | 	mov	result1, #175
056b8     8C 03 90 FD | 	jmp	#LR__0436
056bc                 | LR__0322
056bc     B0 FA 05 F6 | 	mov	result1, #176
056c0     84 03 90 FD | 	jmp	#LR__0436
056c4                 | LR__0323
056c4     B0 FA 05 F6 | 	mov	result1, #176
056c8     7C 03 90 FD | 	jmp	#LR__0436
056cc                 | LR__0324
056cc     45 FA 05 F6 | 	mov	result1, #69
056d0     74 03 90 FD | 	jmp	#LR__0436
056d4                 | LR__0325
056d4     45 FA 05 F6 | 	mov	result1, #69
056d8     6C 03 90 FD | 	jmp	#LR__0436
056dc                 | LR__0326
056dc     69 FA 05 F6 | 	mov	result1, #105
056e0     64 03 90 FD | 	jmp	#LR__0436
056e4                 | LR__0327
056e4     B4 FA 05 F6 | 	mov	result1, #180
056e8     5C 03 90 FD | 	jmp	#LR__0436
056ec                 | LR__0328
056ec     40 FA 05 F6 | 	mov	result1, #64
056f0     54 03 90 FD | 	jmp	#LR__0436
056f4                 | LR__0329
056f4     49 FA 05 F6 | 	mov	result1, #73
056f8     4C 03 90 FD | 	jmp	#LR__0436
056fc                 | LR__0330
056fc     49 FA 05 F6 | 	mov	result1, #73
05700     44 03 90 FD | 	jmp	#LR__0436
05704                 | LR__0331
05704     50 FA 05 F6 | 	mov	result1, #80
05708     3C 03 90 FD | 	jmp	#LR__0436
0570c                 | LR__0332
0570c     50 FA 05 F6 | 	mov	result1, #80
05710     34 03 90 FD | 	jmp	#LR__0436
05714                 | LR__0333
05714     68 FA 05 F6 | 	mov	result1, #104
05718     2C 03 90 FD | 	jmp	#LR__0436
0571c                 | LR__0334
0571c     73 FA 05 F6 | 	mov	result1, #115
05720     24 03 90 FD | 	jmp	#LR__0436
05724                 | LR__0335
05724     74 FA 05 F6 | 	mov	result1, #116
05728     1C 03 90 FD | 	jmp	#LR__0436
0572c                 | LR__0336
0572c     6C FA 05 F6 | 	mov	result1, #108
05730     14 03 90 FD | 	jmp	#LR__0436
05734                 | LR__0337
05734     6C FA 05 F6 | 	mov	result1, #108
05738     0C 03 90 FD | 	jmp	#LR__0436
0573c                 | LR__0338
0573c     89 FA 05 F6 | 	mov	result1, #137
05740     04 03 90 FD | 	jmp	#LR__0436
05744                 | LR__0339
05744     C2 FA 05 F6 | 	mov	result1, #194
05748     FC 02 90 FD | 	jmp	#LR__0436
0574c                 | LR__0340
0574c     72 FA 05 F6 | 	mov	result1, #114
05750     F4 02 90 FD | 	jmp	#LR__0436
05754                 | LR__0341
05754     5D FA 05 F6 | 	mov	result1, #93
05758     EC 02 90 FD | 	jmp	#LR__0436
0575c                 | LR__0342
0575c     96 FA 05 F6 | 	mov	result1, #150
05760     E4 02 90 FD | 	jmp	#LR__0436
05764                 | LR__0343
05764     43 FA 05 F6 | 	mov	result1, #67
05768     DC 02 90 FD | 	jmp	#LR__0436
0576c                 | LR__0344
0576c     43 FA 05 F6 | 	mov	result1, #67
05770     D4 02 90 FD | 	jmp	#LR__0436
05774                 | LR__0345
05774     5A FA 05 F6 | 	mov	result1, #90
05778     CC 02 90 FD | 	jmp	#LR__0436
0577c                 | LR__0346
0577c     AB FA 05 F6 | 	mov	result1, #171
05780     C4 02 90 FD | 	jmp	#LR__0436
05784                 | LR__0347
05784     BD FA 05 F6 | 	mov	result1, #189
05788     BC 02 90 FD | 	jmp	#LR__0436
0578c                 | LR__0348
0578c     BD FA 05 F6 | 	mov	result1, #189
05790     B4 02 90 FD | 	jmp	#LR__0436
05794                 | LR__0349
05794     46 FA 05 F6 | 	mov	result1, #70
05798     AC 02 90 FD | 	jmp	#LR__0436
0579c                 | LR__0350
0579c     46 FA 05 F6 | 	mov	result1, #70
057a0     A4 02 90 FD | 	jmp	#LR__0436
057a4                 | LR__0351
057a4     71 FA 05 F6 | 	mov	result1, #113
057a8     9C 02 90 FD | 	jmp	#LR__0436
057ac                 | LR__0352
057ac     71 FA 05 F6 | 	mov	result1, #113
057b0     94 02 90 FD | 	jmp	#LR__0436
057b4                 | LR__0353
057b4     60 FA 05 F6 | 	mov	result1, #96
057b8     8C 02 90 FD | 	jmp	#LR__0436
057bc                 | LR__0354
057bc     4A FA 05 F6 | 	mov	result1, #74
057c0     84 02 90 FD | 	jmp	#LR__0436
057c4                 | LR__0355
057c4     4A FA 05 F6 | 	mov	result1, #74
057c8     7C 02 90 FD | 	jmp	#LR__0436
057cc                 | LR__0356
057cc     48 FA 05 F6 | 	mov	result1, #72
057d0     74 02 90 FD | 	jmp	#LR__0436
057d4                 | LR__0357
057d4     48 FA 05 F6 | 	mov	result1, #72
057d8     6C 02 90 FD | 	jmp	#LR__0436
057dc                 | LR__0358
057dc     BB FA 05 F6 | 	mov	result1, #187
057e0     64 02 90 FD | 	jmp	#LR__0436
057e4                 | LR__0359
057e4     A9 FA 05 F6 | 	mov	result1, #169
057e8     5C 02 90 FD | 	jmp	#LR__0436
057ec                 | LR__0360
057ec     4E FA 05 F6 | 	mov	result1, #78
057f0     54 02 90 FD | 	jmp	#LR__0436
057f4                 | LR__0361
057f4     4E FA 05 F6 | 	mov	result1, #78
057f8     4C 02 90 FD | 	jmp	#LR__0436
057fc                 | LR__0362
057fc     58 FA 05 F6 | 	mov	result1, #88
05800     44 02 90 FD | 	jmp	#LR__0436
05804                 | LR__0363
05804     5F FA 05 F6 | 	mov	result1, #95
05808     3C 02 90 FD | 	jmp	#LR__0436
0580c                 | LR__0364
0580c     5F FA 05 F6 | 	mov	result1, #95
05810     34 02 90 FD | 	jmp	#LR__0436
05814                 | LR__0365
05814     4C FA 05 F6 | 	mov	result1, #76
05818     2C 02 90 FD | 	jmp	#LR__0436
0581c                 | LR__0366
0581c     4C FA 05 F6 | 	mov	result1, #76
05820     24 02 90 FD | 	jmp	#LR__0436
05824                 | LR__0367
05824     52 FA 05 F6 | 	mov	result1, #82
05828     1C 02 90 FD | 	jmp	#LR__0436
0582c                 | LR__0368
0582c     52 FA 05 F6 | 	mov	result1, #82
05830     14 02 90 FD | 	jmp	#LR__0436
05834                 | LR__0369
05834     97 FA 05 F6 | 	mov	result1, #151
05838     0C 02 90 FD | 	jmp	#LR__0436
0583c                 | LR__0370
0583c     C6 FA 05 F6 | 	mov	result1, #198
05840     04 02 90 FD | 	jmp	#LR__0436
05844                 | LR__0371
05844     61 FA 05 F6 | 	mov	result1, #97
05848     FC 01 90 FD | 	jmp	#LR__0436
0584c                 | LR__0372
0584c     61 FA 05 F6 | 	mov	result1, #97
05850     F4 01 90 FD | 	jmp	#LR__0436
05854                 | LR__0373
05854     63 FA 05 F6 | 	mov	result1, #99
05858     EC 01 90 FD | 	jmp	#LR__0436
0585c                 | LR__0374
0585c     41 FA 05 F6 | 	mov	result1, #65
05860     E4 01 90 FD | 	jmp	#LR__0436
05864                 | LR__0375
05864     4B FA 05 F6 | 	mov	result1, #75
05868     DC 01 90 FD | 	jmp	#LR__0436
0586c                 | LR__0376
0586c     4B FA 05 F6 | 	mov	result1, #75
05870     D4 01 90 FD | 	jmp	#LR__0436
05874                 | LR__0377
05874     B3 FA 05 F6 | 	mov	result1, #179
05878     CC 01 90 FD | 	jmp	#LR__0436
0587c                 | LR__0378
0587c     5E FA 05 F6 | 	mov	result1, #94
05880     C4 01 90 FD | 	jmp	#LR__0436
05884                 | LR__0379
05884     5E FA 05 F6 | 	mov	result1, #94
05888     BC 01 90 FD | 	jmp	#LR__0436
0588c                 | LR__0380
0588c     7C FA 05 F6 | 	mov	result1, #124
05890     B4 01 90 FD | 	jmp	#LR__0436
05894                 | LR__0381
05894     7E FA 05 F6 | 	mov	result1, #126
05898     AC 01 90 FD | 	jmp	#LR__0436
0589c                 | LR__0382
0589c     7D FA 05 F6 | 	mov	result1, #125
058a0     A4 01 90 FD | 	jmp	#LR__0436
058a4                 | LR__0383
058a4     7F FA 05 F6 | 	mov	result1, #127
058a8     9C 01 90 FD | 	jmp	#LR__0436
058ac                 | LR__0384
058ac     80 FA 05 F6 | 	mov	result1, #128
058b0     94 01 90 FD | 	jmp	#LR__0436
058b4                 | LR__0385
058b4     55 FA 05 F6 | 	mov	result1, #85
058b8     8C 01 90 FD | 	jmp	#LR__0436
058bc                 | LR__0386
058bc     75 FA 05 F6 | 	mov	result1, #117
058c0     84 01 90 FD | 	jmp	#LR__0436
058c4                 | LR__0387
058c4     75 FA 05 F6 | 	mov	result1, #117
058c8     7C 01 90 FD | 	jmp	#LR__0436
058cc                 | LR__0388
058cc     42 FA 05 F6 | 	mov	result1, #66
058d0     74 01 90 FD | 	jmp	#LR__0436
058d4                 | LR__0389
058d4     42 FA 05 F6 | 	mov	result1, #66
058d8     6C 01 90 FD | 	jmp	#LR__0436
058dc                 | LR__0390
058dc     95 FA 05 F6 | 	mov	result1, #149
058e0     64 01 90 FD | 	jmp	#LR__0436
058e4                 | LR__0391
058e4     AC FA 05 F6 | 	mov	result1, #172
058e8     5C 01 90 FD | 	jmp	#LR__0436
058ec                 | LR__0392
058ec     81 FA 05 F6 | 	mov	result1, #129
058f0     54 01 90 FD | 	jmp	#LR__0436
058f4                 | LR__0393
058f4     81 FA 05 F6 | 	mov	result1, #129
058f8     4C 01 90 FD | 	jmp	#LR__0436
058fc                 | LR__0394
058fc     44 FA 05 F6 | 	mov	result1, #68
05900     44 01 90 FD | 	jmp	#LR__0436
05904                 | LR__0395
05904     44 FA 05 F6 | 	mov	result1, #68
05908     3C 01 90 FD | 	jmp	#LR__0436
0590c                 | LR__0396
0590c     BC FA 05 F6 | 	mov	result1, #188
05910     34 01 90 FD | 	jmp	#LR__0436
05914                 | LR__0397
05914     88 FA 05 F6 | 	mov	result1, #136
05918     2C 01 90 FD | 	jmp	#LR__0436
0591c                 | LR__0398
0591c     92 FA 05 F6 | 	mov	result1, #146
05920     24 01 90 FD | 	jmp	#LR__0436
05924                 | LR__0399
05924     BE FA 05 F6 | 	mov	result1, #190
05928     1C 01 90 FD | 	jmp	#LR__0436
0592c                 | LR__0400
0592c     BE FA 05 F6 | 	mov	result1, #190
05930     14 01 90 FD | 	jmp	#LR__0436
05934                 | LR__0401
05934     AA FA 05 F6 | 	mov	result1, #170
05938     0C 01 90 FD | 	jmp	#LR__0436
0593c                 | LR__0402
0593c     4D FA 05 F6 | 	mov	result1, #77
05940     04 01 90 FD | 	jmp	#LR__0436
05944                 | LR__0403
05944     51 FA 05 F6 | 	mov	result1, #81
05948     FC 00 90 FD | 	jmp	#LR__0436
0594c                 | LR__0404
0594c     51 FA 05 F6 | 	mov	result1, #81
05950     F4 00 90 FD | 	jmp	#LR__0436
05954                 | LR__0405
05954     8E FA 05 F6 | 	mov	result1, #142
05958     EC 00 90 FD | 	jmp	#LR__0436
0595c                 | LR__0406
0595c     8E FA 05 F6 | 	mov	result1, #142
05960     E4 00 90 FD | 	jmp	#LR__0436
05964                 | LR__0407
05964     90 FA 05 F6 | 	mov	result1, #144
05968     DC 00 90 FD | 	jmp	#LR__0436
0596c                 | LR__0408
0596c     90 FA 05 F6 | 	mov	result1, #144
05970     D4 00 90 FD | 	jmp	#LR__0436
05974                 | LR__0409
05974     8D FA 05 F6 | 	mov	result1, #141
05978     CC 00 90 FD | 	jmp	#LR__0436
0597c                 | LR__0410
0597c     8D FA 05 F6 | 	mov	result1, #141
05980     C4 00 90 FD | 	jmp	#LR__0436
05984                 | LR__0411
05984     8C FA 05 F6 | 	mov	result1, #140
05988     BC 00 90 FD | 	jmp	#LR__0436
0598c                 | LR__0412
0598c     8C FA 05 F6 | 	mov	result1, #140
05990     B4 00 90 FD | 	jmp	#LR__0436
05994                 | LR__0413
05994     91 FA 05 F6 | 	mov	result1, #145
05998     AC 00 90 FD | 	jmp	#LR__0436
0599c                 | LR__0414
0599c     91 FA 05 F6 | 	mov	result1, #145
059a0     A4 00 90 FD | 	jmp	#LR__0436
059a4                 | LR__0415
059a4     8B FA 05 F6 | 	mov	result1, #139
059a8     9C 00 90 FD | 	jmp	#LR__0436
059ac                 | LR__0416
059ac     8B FA 05 F6 | 	mov	result1, #139
059b0     94 00 90 FD | 	jmp	#LR__0436
059b4                 | LR__0417
059b4     8F FA 05 F6 | 	mov	result1, #143
059b8     8C 00 90 FD | 	jmp	#LR__0436
059bc                 | LR__0418
059bc     8F FA 05 F6 | 	mov	result1, #143
059c0     84 00 90 FD | 	jmp	#LR__0436
059c4                 | LR__0419
059c4     8F FA 05 F6 | 	mov	result1, #143
059c8     7C 00 90 FD | 	jmp	#LR__0436
059cc                 | LR__0420
059cc     B2 FA 05 F6 | 	mov	result1, #178
059d0     74 00 90 FD | 	jmp	#LR__0436
059d4                 | LR__0421
059d4     B2 FA 05 F6 | 	mov	result1, #178
059d8     6C 00 90 FD | 	jmp	#LR__0436
059dc                 | LR__0422
059dc     75 FA 05 F6 | 	mov	result1, #117
059e0     64 00 90 FD | 	jmp	#LR__0436
059e4                 | LR__0423
059e4     75 FA 05 F6 | 	mov	result1, #117
059e8     5C 00 90 FD | 	jmp	#LR__0436
059ec                 | LR__0424
059ec     6D FA 05 F6 | 	mov	result1, #109
059f0     54 00 90 FD | 	jmp	#LR__0436
059f4                 | LR__0425
059f4     6D FA 05 F6 | 	mov	result1, #109
059f8     4C 00 90 FD | 	jmp	#LR__0436
059fc                 | LR__0426
059fc     5B FA 05 F6 | 	mov	result1, #91
05a00     44 00 90 FD | 	jmp	#LR__0436
05a04                 | LR__0427
05a04     56 FA 05 F6 | 	mov	result1, #86
05a08     3C 00 90 FD | 	jmp	#LR__0436
05a0c                 | LR__0428
05a0c     56 FA 05 F6 | 	mov	result1, #86
05a10     34 00 90 FD | 	jmp	#LR__0436
05a14                 | LR__0429
05a14     70 FA 05 F6 | 	mov	result1, #112
05a18     2C 00 90 FD | 	jmp	#LR__0436
05a1c                 | LR__0430
05a1c     70 FA 05 F6 | 	mov	result1, #112
05a20     24 00 90 FD | 	jmp	#LR__0436
05a24                 | LR__0431
05a24     57 FA 05 F6 | 	mov	result1, #87
05a28     1C 00 90 FD | 	jmp	#LR__0436
05a2c                 | LR__0432
05a2c     57 FA 05 F6 | 	mov	result1, #87
05a30     14 00 90 FD | 	jmp	#LR__0436
05a34                 | LR__0433
05a34     77 FA 05 F6 | 	mov	result1, #119
05a38     0C 00 90 FD | 	jmp	#LR__0436
05a3c                 | LR__0434
05a3c     78 FA 05 F6 | 	mov	result1, #120
05a40     04 00 90 FD | 	jmp	#LR__0436
05a44                 | LR__0435
05a44     00 FA 05 F6 | 	mov	result1, #0
05a48                 | LR__0436
05a48     A7 F0 03 F6 | 	mov	ptra, fp
05a4c     B2 00 A0 FD | 	call	#popregs_
05a50                 | _iscommand_ret
05a50     2D 00 64 FD | 	ret
05a54                 | 
05a54                 | ' 
05a54                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05a54                 | ' 
05a54                 | ' function isfunction(s as string) as ubyte
05a54                 | _isfunction
05a54     01 4A 05 F6 | 	mov	COUNT_, #1
05a58     A8 00 A0 FD | 	call	#pushregs_
05a5c                 | ' 
05a5c                 | ' select case s
05a5c     09 1F 02 F6 | 	mov	local01, arg01
05a60     8A 01 00 FF 
05a64     58 15 06 F6 | 	mov	arg02, ##@LR__5367
05a68     0F 13 02 F6 | 	mov	arg01, local01
05a6c     3C BB B1 FD | 	call	#__system___string_cmp
05a70     00 FA 0D F2 | 	cmp	result1, #0 wz
05a74     0C 04 90 AD |  if_e	jmp	#LR__0440
05a78     8A 01 00 FF 
05a7c     5C 15 06 F6 | 	mov	arg02, ##@LR__5368
05a80     0F 13 02 F6 | 	mov	arg01, local01
05a84     24 BB B1 FD | 	call	#__system___string_cmp
05a88     00 FA 0D F2 | 	cmp	result1, #0 wz
05a8c     FC 03 90 AD |  if_e	jmp	#LR__0441
05a90     8A 01 00 FF 
05a94     61 15 06 F6 | 	mov	arg02, ##@LR__5369
05a98     0F 13 02 F6 | 	mov	arg01, local01
05a9c     0C BB B1 FD | 	call	#__system___string_cmp
05aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa4     EC 03 90 AD |  if_e	jmp	#LR__0442
05aa8     8A 01 00 FF 
05aac     65 15 06 F6 | 	mov	arg02, ##@LR__5370
05ab0     0F 13 02 F6 | 	mov	arg01, local01
05ab4     F4 BA B1 FD | 	call	#__system___string_cmp
05ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
05abc     DC 03 90 AD |  if_e	jmp	#LR__0443
05ac0     8A 01 00 FF 
05ac4     6A 15 06 F6 | 	mov	arg02, ##@LR__5371
05ac8     0F 13 02 F6 | 	mov	arg01, local01
05acc     DC BA B1 FD | 	call	#__system___string_cmp
05ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad4     CC 03 90 AD |  if_e	jmp	#LR__0444
05ad8     8A 01 00 FF 
05adc     6E 15 06 F6 | 	mov	arg02, ##@LR__5372
05ae0     0F 13 02 F6 | 	mov	arg01, local01
05ae4     C4 BA B1 FD | 	call	#__system___string_cmp
05ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
05aec     BC 03 90 AD |  if_e	jmp	#LR__0445
05af0     8A 01 00 FF 
05af4     73 15 06 F6 | 	mov	arg02, ##@LR__5373
05af8     0F 13 02 F6 | 	mov	arg01, local01
05afc     AC BA B1 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     AC 03 90 AD |  if_e	jmp	#LR__0446
05b08     8A 01 00 FF 
05b0c     77 15 06 F6 | 	mov	arg02, ##@LR__5374
05b10     0F 13 02 F6 | 	mov	arg01, local01
05b14     94 BA B1 FD | 	call	#__system___string_cmp
05b18     00 FA 0D F2 | 	cmp	result1, #0 wz
05b1c     9C 03 90 AD |  if_e	jmp	#LR__0447
05b20     8A 01 00 FF 
05b24     7C 15 06 F6 | 	mov	arg02, ##@LR__5375
05b28     0F 13 02 F6 | 	mov	arg01, local01
05b2c     7C BA B1 FD | 	call	#__system___string_cmp
05b30     00 FA 0D F2 | 	cmp	result1, #0 wz
05b34     8C 03 90 AD |  if_e	jmp	#LR__0448
05b38     8A 01 00 FF 
05b3c     81 15 06 F6 | 	mov	arg02, ##@LR__5376
05b40     0F 13 02 F6 | 	mov	arg01, local01
05b44     64 BA B1 FD | 	call	#__system___string_cmp
05b48     00 FA 0D F2 | 	cmp	result1, #0 wz
05b4c     7C 03 90 AD |  if_e	jmp	#LR__0449
05b50     8A 01 00 FF 
05b54     85 15 06 F6 | 	mov	arg02, ##@LR__5377
05b58     0F 13 02 F6 | 	mov	arg01, local01
05b5c     4C BA B1 FD | 	call	#__system___string_cmp
05b60     00 FA 0D F2 | 	cmp	result1, #0 wz
05b64     6C 03 90 AD |  if_e	jmp	#LR__0450
05b68     8A 01 00 FF 
05b6c     8B 15 06 F6 | 	mov	arg02, ##@LR__5378
05b70     0F 13 02 F6 | 	mov	arg01, local01
05b74     34 BA B1 FD | 	call	#__system___string_cmp
05b78     00 FA 0D F2 | 	cmp	result1, #0 wz
05b7c     5C 03 90 AD |  if_e	jmp	#LR__0451
05b80     8A 01 00 FF 
05b84     8F 15 06 F6 | 	mov	arg02, ##@LR__5379
05b88     0F 13 02 F6 | 	mov	arg01, local01
05b8c     1C BA B1 FD | 	call	#__system___string_cmp
05b90     00 FA 0D F2 | 	cmp	result1, #0 wz
05b94     4C 03 90 AD |  if_e	jmp	#LR__0452
05b98     8A 01 00 FF 
05b9c     98 15 06 F6 | 	mov	arg02, ##@LR__5380
05ba0     0F 13 02 F6 | 	mov	arg01, local01
05ba4     04 BA B1 FD | 	call	#__system___string_cmp
05ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bac     3C 03 90 AD |  if_e	jmp	#LR__0453
05bb0     8A 01 00 FF 
05bb4     9C 15 06 F6 | 	mov	arg02, ##@LR__5381
05bb8     0F 13 02 F6 | 	mov	arg01, local01
05bbc     EC B9 B1 FD | 	call	#__system___string_cmp
05bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bc4     2C 03 90 AD |  if_e	jmp	#LR__0454
05bc8     8A 01 00 FF 
05bcc     AA 15 06 F6 | 	mov	arg02, ##@LR__5382
05bd0     0F 13 02 F6 | 	mov	arg01, local01
05bd4     D4 B9 B1 FD | 	call	#__system___string_cmp
05bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bdc     1C 03 90 AD |  if_e	jmp	#LR__0455
05be0     8A 01 00 FF 
05be4     B7 15 06 F6 | 	mov	arg02, ##@LR__5383
05be8     0F 13 02 F6 | 	mov	arg01, local01
05bec     BC B9 B1 FD | 	call	#__system___string_cmp
05bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bf4     0C 03 90 AD |  if_e	jmp	#LR__0456
05bf8     8A 01 00 FF 
05bfc     BF 15 06 F6 | 	mov	arg02, ##@LR__5384
05c00     0F 13 02 F6 | 	mov	arg01, local01
05c04     A4 B9 B1 FD | 	call	#__system___string_cmp
05c08     00 FA 0D F2 | 	cmp	result1, #0 wz
05c0c     FC 02 90 AD |  if_e	jmp	#LR__0457
05c10     8A 01 00 FF 
05c14     C4 15 06 F6 | 	mov	arg02, ##@LR__5385
05c18     0F 13 02 F6 | 	mov	arg01, local01
05c1c     8C B9 B1 FD | 	call	#__system___string_cmp
05c20     00 FA 0D F2 | 	cmp	result1, #0 wz
05c24     EC 02 90 AD |  if_e	jmp	#LR__0458
05c28     8A 01 00 FF 
05c2c     CB 15 06 F6 | 	mov	arg02, ##@LR__5386
05c30     0F 13 02 F6 | 	mov	arg01, local01
05c34     74 B9 B1 FD | 	call	#__system___string_cmp
05c38     00 FA 0D F2 | 	cmp	result1, #0 wz
05c3c     DC 02 90 AD |  if_e	jmp	#LR__0459
05c40     8A 01 00 FF 
05c44     CF 15 06 F6 | 	mov	arg02, ##@LR__5387
05c48     0F 13 02 F6 | 	mov	arg01, local01
05c4c     5C B9 B1 FD | 	call	#__system___string_cmp
05c50     00 FA 0D F2 | 	cmp	result1, #0 wz
05c54     CC 02 90 AD |  if_e	jmp	#LR__0460
05c58     8A 01 00 FF 
05c5c     D5 15 06 F6 | 	mov	arg02, ##@LR__5388
05c60     0F 13 02 F6 | 	mov	arg01, local01
05c64     44 B9 B1 FD | 	call	#__system___string_cmp
05c68     00 FA 0D F2 | 	cmp	result1, #0 wz
05c6c     BC 02 90 AD |  if_e	jmp	#LR__0461
05c70     8A 01 00 FF 
05c74     D9 15 06 F6 | 	mov	arg02, ##@LR__5389
05c78     0F 13 02 F6 | 	mov	arg01, local01
05c7c     2C B9 B1 FD | 	call	#__system___string_cmp
05c80     00 FA 0D F2 | 	cmp	result1, #0 wz
05c84     AC 02 90 AD |  if_e	jmp	#LR__0462
05c88     8A 01 00 FF 
05c8c     DD 15 06 F6 | 	mov	arg02, ##@LR__5390
05c90     0F 13 02 F6 | 	mov	arg01, local01
05c94     14 B9 B1 FD | 	call	#__system___string_cmp
05c98     00 FA 0D F2 | 	cmp	result1, #0 wz
05c9c     9C 02 90 AD |  if_e	jmp	#LR__0463
05ca0     8A 01 00 FF 
05ca4     E3 15 06 F6 | 	mov	arg02, ##@LR__5391
05ca8     0F 13 02 F6 | 	mov	arg01, local01
05cac     FC B8 B1 FD | 	call	#__system___string_cmp
05cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cb4     8C 02 90 AD |  if_e	jmp	#LR__0464
05cb8     8A 01 00 FF 
05cbc     E8 15 06 F6 | 	mov	arg02, ##@LR__5392
05cc0     0F 13 02 F6 | 	mov	arg01, local01
05cc4     E4 B8 B1 FD | 	call	#__system___string_cmp
05cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ccc     7C 02 90 AD |  if_e	jmp	#LR__0465
05cd0     8A 01 00 FF 
05cd4     EF 15 06 F6 | 	mov	arg02, ##@LR__5393
05cd8     0F 13 02 F6 | 	mov	arg01, local01
05cdc     CC B8 B1 FD | 	call	#__system___string_cmp
05ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ce4     6C 02 90 AD |  if_e	jmp	#LR__0466
05ce8     8A 01 00 FF 
05cec     F6 15 06 F6 | 	mov	arg02, ##@LR__5394
05cf0     0F 13 02 F6 | 	mov	arg01, local01
05cf4     B4 B8 B1 FD | 	call	#__system___string_cmp
05cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cfc     5C 02 90 AD |  if_e	jmp	#LR__0467
05d00     8A 01 00 FF 
05d04     FD 15 06 F6 | 	mov	arg02, ##@LR__5395
05d08     0F 13 02 F6 | 	mov	arg01, local01
05d0c     9C B8 B1 FD | 	call	#__system___string_cmp
05d10     00 FA 0D F2 | 	cmp	result1, #0 wz
05d14     4C 02 90 AD |  if_e	jmp	#LR__0468
05d18     8B 01 00 FF 
05d1c     04 14 06 F6 | 	mov	arg02, ##@LR__5396
05d20     0F 13 02 F6 | 	mov	arg01, local01
05d24     84 B8 B1 FD | 	call	#__system___string_cmp
05d28     00 FA 0D F2 | 	cmp	result1, #0 wz
05d2c     3C 02 90 AD |  if_e	jmp	#LR__0469
05d30     8B 01 00 FF 
05d34     09 14 06 F6 | 	mov	arg02, ##@LR__5397
05d38     0F 13 02 F6 | 	mov	arg01, local01
05d3c     6C B8 B1 FD | 	call	#__system___string_cmp
05d40     00 FA 0D F2 | 	cmp	result1, #0 wz
05d44     2C 02 90 AD |  if_e	jmp	#LR__0470
05d48     8B 01 00 FF 
05d4c     11 14 06 F6 | 	mov	arg02, ##@LR__5398
05d50     0F 13 02 F6 | 	mov	arg01, local01
05d54     54 B8 B1 FD | 	call	#__system___string_cmp
05d58     00 FA 0D F2 | 	cmp	result1, #0 wz
05d5c     1C 02 90 AD |  if_e	jmp	#LR__0471
05d60     8B 01 00 FF 
05d64     17 14 06 F6 | 	mov	arg02, ##@LR__5399
05d68     0F 13 02 F6 | 	mov	arg01, local01
05d6c     3C B8 B1 FD | 	call	#__system___string_cmp
05d70     00 FA 0D F2 | 	cmp	result1, #0 wz
05d74     0C 02 90 AD |  if_e	jmp	#LR__0472
05d78     8B 01 00 FF 
05d7c     1E 14 06 F6 | 	mov	arg02, ##@LR__5400
05d80     0F 13 02 F6 | 	mov	arg01, local01
05d84     24 B8 B1 FD | 	call	#__system___string_cmp
05d88     00 FA 0D F2 | 	cmp	result1, #0 wz
05d8c     FC 01 90 AD |  if_e	jmp	#LR__0473
05d90     8B 01 00 FF 
05d94     24 14 06 F6 | 	mov	arg02, ##@LR__5401
05d98     0F 13 02 F6 | 	mov	arg01, local01
05d9c     0C B8 B1 FD | 	call	#__system___string_cmp
05da0     00 FA 0D F2 | 	cmp	result1, #0 wz
05da4     EC 01 90 AD |  if_e	jmp	#LR__0474
05da8     8B 01 00 FF 
05dac     2A 14 06 F6 | 	mov	arg02, ##@LR__5402
05db0     0F 13 02 F6 | 	mov	arg01, local01
05db4     F4 B7 B1 FD | 	call	#__system___string_cmp
05db8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dbc     DC 01 90 AD |  if_e	jmp	#LR__0475
05dc0     8B 01 00 FF 
05dc4     2E 14 06 F6 | 	mov	arg02, ##@LR__5403
05dc8     0F 13 02 F6 | 	mov	arg01, local01
05dcc     DC B7 B1 FD | 	call	#__system___string_cmp
05dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05dd4     CC 01 90 AD |  if_e	jmp	#LR__0476
05dd8     8B 01 00 FF 
05ddc     32 14 06 F6 | 	mov	arg02, ##@LR__5404
05de0     0F 13 02 F6 | 	mov	arg01, local01
05de4     C4 B7 B1 FD | 	call	#__system___string_cmp
05de8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dec     BC 01 90 AD |  if_e	jmp	#LR__0477
05df0     8B 01 00 FF 
05df4     36 14 06 F6 | 	mov	arg02, ##@LR__5405
05df8     0F 13 02 F6 | 	mov	arg01, local01
05dfc     AC B7 B1 FD | 	call	#__system___string_cmp
05e00     00 FA 0D F2 | 	cmp	result1, #0 wz
05e04     AC 01 90 AD |  if_e	jmp	#LR__0478
05e08     8B 01 00 FF 
05e0c     3C 14 06 F6 | 	mov	arg02, ##@LR__5406
05e10     0F 13 02 F6 | 	mov	arg01, local01
05e14     94 B7 B1 FD | 	call	#__system___string_cmp
05e18     00 FA 0D F2 | 	cmp	result1, #0 wz
05e1c     9C 01 90 AD |  if_e	jmp	#LR__0479
05e20     8B 01 00 FF 
05e24     42 14 06 F6 | 	mov	arg02, ##@LR__5407
05e28     0F 13 02 F6 | 	mov	arg01, local01
05e2c     7C B7 B1 FD | 	call	#__system___string_cmp
05e30     00 FA 0D F2 | 	cmp	result1, #0 wz
05e34     8C 01 90 AD |  if_e	jmp	#LR__0480
05e38     8B 01 00 FF 
05e3c     47 14 06 F6 | 	mov	arg02, ##@LR__5408
05e40     0F 13 02 F6 | 	mov	arg01, local01
05e44     64 B7 B1 FD | 	call	#__system___string_cmp
05e48     00 FA 0D F2 | 	cmp	result1, #0 wz
05e4c     7C 01 90 AD |  if_e	jmp	#LR__0481
05e50     8B 01 00 FF 
05e54     4B 14 06 F6 | 	mov	arg02, ##@LR__5409
05e58     0F 13 02 F6 | 	mov	arg01, local01
05e5c     4C B7 B1 FD | 	call	#__system___string_cmp
05e60     00 FA 0D F2 | 	cmp	result1, #0 wz
05e64     6C 01 90 AD |  if_e	jmp	#LR__0482
05e68     8B 01 00 FF 
05e6c     4F 14 06 F6 | 	mov	arg02, ##@LR__5410
05e70     0F 13 02 F6 | 	mov	arg01, local01
05e74     34 B7 B1 FD | 	call	#__system___string_cmp
05e78     00 FA 0D F2 | 	cmp	result1, #0 wz
05e7c     5C 01 90 AD |  if_e	jmp	#LR__0483
05e80     60 01 90 FD | 	jmp	#LR__0484
05e84                 | LR__0440
05e84     9E FA 05 F6 | 	mov	result1, #158
05e88     5C 01 90 FD | 	jmp	#LR__0485
05e8c                 | LR__0441
05e8c     85 FA 05 F6 | 	mov	result1, #133
05e90     54 01 90 FD | 	jmp	#LR__0485
05e94                 | LR__0442
05e94     9B FA 05 F6 | 	mov	result1, #155
05e98     4C 01 90 FD | 	jmp	#LR__0485
05e9c                 | LR__0443
05e9c     9B FA 05 F6 | 	mov	result1, #155
05ea0     44 01 90 FD | 	jmp	#LR__0485
05ea4                 | LR__0444
05ea4     A7 FA 05 F6 | 	mov	result1, #167
05ea8     3C 01 90 FD | 	jmp	#LR__0485
05eac                 | LR__0445
05eac     84 FA 05 F6 | 	mov	result1, #132
05eb0     34 01 90 FD | 	jmp	#LR__0485
05eb4                 | LR__0446
05eb4     86 FA 05 F6 | 	mov	result1, #134
05eb8     2C 01 90 FD | 	jmp	#LR__0485
05ebc                 | LR__0447
05ebc     A2 FA 05 F6 | 	mov	result1, #162
05ec0     24 01 90 FD | 	jmp	#LR__0485
05ec4                 | LR__0448
05ec4     9F FA 05 F6 | 	mov	result1, #159
05ec8     1C 01 90 FD | 	jmp	#LR__0485
05ecc                 | LR__0449
05ecc     82 FA 05 F6 | 	mov	result1, #130
05ed0     14 01 90 FD | 	jmp	#LR__0485
05ed4                 | LR__0450
05ed4     99 FA 05 F6 | 	mov	result1, #153
05ed8     0C 01 90 FD | 	jmp	#LR__0485
05edc                 | LR__0451
05edc     9C FA 05 F6 | 	mov	result1, #156
05ee0     04 01 90 FD | 	jmp	#LR__0485
05ee4                 | LR__0452
05ee4     6F FA 05 F6 | 	mov	result1, #111
05ee8     FC 00 90 FD | 	jmp	#LR__0485
05eec                 | LR__0453
05eec     6F FA 05 F6 | 	mov	result1, #111
05ef0     F4 00 90 FD | 	jmp	#LR__0485
05ef4                 | LR__0454
05ef4     93 FA 05 F6 | 	mov	result1, #147
05ef8     EC 00 90 FD | 	jmp	#LR__0485
05efc                 | LR__0455
05efc     94 FA 05 F6 | 	mov	result1, #148
05f00     E4 00 90 FD | 	jmp	#LR__0485
05f04                 | LR__0456
05f04     62 FA 05 F6 | 	mov	result1, #98
05f08     DC 00 90 FD | 	jmp	#LR__0485
05f0c                 | LR__0457
05f0c     A3 FA 05 F6 | 	mov	result1, #163
05f10     D4 00 90 FD | 	jmp	#LR__0485
05f14                 | LR__0458
05f14     9D FA 05 F6 | 	mov	result1, #157
05f18     CC 00 90 FD | 	jmp	#LR__0485
05f1c                 | LR__0459
05f1c     8A FA 05 F6 | 	mov	result1, #138
05f20     C4 00 90 FD | 	jmp	#LR__0485
05f24                 | LR__0460
05f24     A4 FA 05 F6 | 	mov	result1, #164
05f28     BC 00 90 FD | 	jmp	#LR__0485
05f2c                 | LR__0461
05f2c     A8 FA 05 F6 | 	mov	result1, #168
05f30     B4 00 90 FD | 	jmp	#LR__0485
05f34                 | LR__0462
05f34     AD FA 05 F6 | 	mov	result1, #173
05f38     AC 00 90 FD | 	jmp	#LR__0485
05f3c                 | LR__0463
05f3c     9A FA 05 F6 | 	mov	result1, #154
05f40     A4 00 90 FD | 	jmp	#LR__0485
05f44                 | LR__0464
05f44     A6 FA 05 F6 | 	mov	result1, #166
05f48     9C 00 90 FD | 	jmp	#LR__0485
05f4c                 | LR__0465
05f4c     66 FA 05 F6 | 	mov	result1, #102
05f50     94 00 90 FD | 	jmp	#LR__0485
05f54                 | LR__0466
05f54     67 FA 05 F6 | 	mov	result1, #103
05f58     8C 00 90 FD | 	jmp	#LR__0485
05f5c                 | LR__0467
05f5c     64 FA 05 F6 | 	mov	result1, #100
05f60     84 00 90 FD | 	jmp	#LR__0485
05f64                 | LR__0468
05f64     65 FA 05 F6 | 	mov	result1, #101
05f68     7C 00 90 FD | 	jmp	#LR__0485
05f6c                 | LR__0469
05f6c     98 FA 05 F6 | 	mov	result1, #152
05f70     74 00 90 FD | 	jmp	#LR__0485
05f74                 | LR__0470
05f74     7B FA 05 F6 | 	mov	result1, #123
05f78     6C 00 90 FD | 	jmp	#LR__0485
05f7c                 | LR__0471
05f7c     76 FA 05 F6 | 	mov	result1, #118
05f80     64 00 90 FD | 	jmp	#LR__0485
05f84                 | LR__0472
05f84     A5 FA 05 F6 | 	mov	result1, #165
05f88     5C 00 90 FD | 	jmp	#LR__0485
05f8c                 | LR__0473
05f8c     7A FA 05 F6 | 	mov	result1, #122
05f90     54 00 90 FD | 	jmp	#LR__0485
05f94                 | LR__0474
05f94     BF FA 05 F6 | 	mov	result1, #191
05f98     4C 00 90 FD | 	jmp	#LR__0485
05f9c                 | LR__0475
05f9c     54 FA 05 F6 | 	mov	result1, #84
05fa0     44 00 90 FD | 	jmp	#LR__0485
05fa4                 | LR__0476
05fa4     6B FA 05 F6 | 	mov	result1, #107
05fa8     3C 00 90 FD | 	jmp	#LR__0485
05fac                 | LR__0477
05fac     87 FA 05 F6 | 	mov	result1, #135
05fb0     34 00 90 FD | 	jmp	#LR__0485
05fb4                 | LR__0478
05fb4     6A FA 05 F6 | 	mov	result1, #106
05fb8     2C 00 90 FD | 	jmp	#LR__0485
05fbc                 | LR__0479
05fbc     6E FA 05 F6 | 	mov	result1, #110
05fc0     24 00 90 FD | 	jmp	#LR__0485
05fc4                 | LR__0480
05fc4     A1 FA 05 F6 | 	mov	result1, #161
05fc8     1C 00 90 FD | 	jmp	#LR__0485
05fcc                 | LR__0481
05fcc     83 FA 05 F6 | 	mov	result1, #131
05fd0     14 00 90 FD | 	jmp	#LR__0485
05fd4                 | LR__0482
05fd4     A0 FA 05 F6 | 	mov	result1, #160
05fd8     0C 00 90 FD | 	jmp	#LR__0485
05fdc                 | LR__0483
05fdc     9B FA 05 F6 | 	mov	result1, #155
05fe0     04 00 90 FD | 	jmp	#LR__0485
05fe4                 | LR__0484
05fe4     00 FA 05 F6 | 	mov	result1, #0
05fe8                 | LR__0485
05fe8     A7 F0 03 F6 | 	mov	ptra, fp
05fec     B2 00 A0 FD | 	call	#popregs_
05ff0                 | _isfunction_ret
05ff0     2D 00 64 FD | 	ret
05ff4                 | 
05ff4                 | ' 
05ff4                 | ' ' Check if the part is a name
05ff4                 | ' 
05ff4                 | ' function isname(s as string) as boolean
05ff4                 | _isname
05ff4     0D 4A 05 F6 | 	mov	COUNT_, #13
05ff8     A8 00 A0 FD | 	call	#pushregs_
05ffc     09 1F 02 F6 | 	mov	local01, arg01
06000     09 21 02 F6 | 	mov	local02, arg01
06004     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
06008                 | LR__0490
06008     10 FB C9 FA | 	rdbyte	result1, local02 wz
0600c     01 20 06 51 |  if_ne	add	local02, #1
06010     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
06014                 | LR__0491
06014     09 21 82 F1 | 	sub	local02, arg01
06018     10 FB 01 F6 | 	mov	result1, local02
0601c     FD 22 0A F6 | 	mov	local03, result1 wz
06020     00 FA 05 A6 |  if_e	mov	result1, #0
06024     34 02 90 AD |  if_e	jmp	#LR__0503
06028     0F 13 02 F6 | 	mov	arg01, local01
0602c     01 14 06 F6 | 	mov	arg02, #1
06030     01 16 06 F6 | 	mov	arg03, #1
06034     E0 D6 B1 FD | 	call	#__system__Mid_S
06038     FD 24 02 F6 | 	mov	local04, result1
0603c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0603c     8B 01 00 FF 
06040     56 14 06 F6 | 	mov	arg02, ##@LR__5411
06044     12 13 02 F6 | 	mov	arg01, local04
06048     60 B5 B1 FD | 	call	#__system___string_cmp
0604c     00 FA 55 F2 | 	cmps	result1, #0 wc
06050     18 00 90 CD |  if_b	jmp	#LR__0492
06054     8B 01 00 FF 
06058     58 14 06 F6 | 	mov	arg02, ##@LR__5412
0605c     12 13 02 F6 | 	mov	arg01, local04
06060     48 B5 B1 FD | 	call	#__system___string_cmp
06064     01 FA 55 F2 | 	cmps	result1, #1 wc
06068     1C 00 90 CD |  if_b	jmp	#LR__0493
0606c                 | LR__0492
0606c     8B 01 00 FF 
06070     5A 14 06 F6 | 	mov	arg02, ##@LR__5413
06074     12 13 02 F6 | 	mov	arg01, local04
06078     30 B5 B1 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     00 FA 05 56 |  if_ne	mov	result1, #0
06084     D4 01 90 5D |  if_ne	jmp	#LR__0503
06088                 | LR__0493
06088                 | ' if l>2 then 
06088     03 22 56 F2 | 	cmps	local03, #3 wc
0608c     C8 01 90 CD |  if_b	jmp	#LR__0502
06090                 | '   for i=2 to l
06090     02 26 06 F6 | 	mov	local05, #2
06094     11 29 02 F6 | 	mov	local06, local03
06098     01 28 06 F1 | 	add	local06, #1
0609c                 | LR__0494
0609c     14 27 52 F2 | 	cmps	local05, local06 wc
060a0     B4 01 90 3D |  if_ae	jmp	#LR__0501
060a4     0F 13 02 F6 | 	mov	arg01, local01
060a8     13 15 02 F6 | 	mov	arg02, local05
060ac     01 16 06 F6 | 	mov	arg03, #1
060b0     64 D6 B1 FD | 	call	#__system__Mid_S
060b4     FD 24 02 F6 | 	mov	local04, result1
060b8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
060b8     11 27 52 F2 | 	cmps	local05, local03 wc
060bc     9C 00 90 3D |  if_ae	jmp	#LR__0497
060c0     8B 01 00 FF 
060c4     5C 14 06 F6 | 	mov	arg02, ##@LR__5414
060c8     12 13 02 F6 | 	mov	arg01, local04
060cc     DC B4 B1 FD | 	call	#__system___string_cmp
060d0     00 FA 55 F2 | 	cmps	result1, #0 wc
060d4     18 00 90 CD |  if_b	jmp	#LR__0495
060d8     8B 01 00 FF 
060dc     5E 14 06 F6 | 	mov	arg02, ##@LR__5415
060e0     12 13 02 F6 | 	mov	arg01, local04
060e4     C4 B4 B1 FD | 	call	#__system___string_cmp
060e8     01 FA 55 F2 | 	cmps	result1, #1 wc
060ec     6C 00 90 CD |  if_b	jmp	#LR__0497
060f0                 | LR__0495
060f0     8B 01 00 FF 
060f4     60 14 06 F6 | 	mov	arg02, ##@LR__5416
060f8     12 13 02 F6 | 	mov	arg01, local04
060fc     AC B4 B1 FD | 	call	#__system___string_cmp
06100     00 FA 55 F2 | 	cmps	result1, #0 wc
06104     18 00 90 CD |  if_b	jmp	#LR__0496
06108     8B 01 00 FF 
0610c     62 14 06 F6 | 	mov	arg02, ##@LR__5417
06110     12 13 02 F6 | 	mov	arg01, local04
06114     94 B4 B1 FD | 	call	#__system___string_cmp
06118     01 FA 55 F2 | 	cmps	result1, #1 wc
0611c     3C 00 90 CD |  if_b	jmp	#LR__0497
06120                 | LR__0496
06120     8B 01 00 FF 
06124     64 2A 06 F6 | 	mov	local07, ##@LR__5418
06128     12 13 02 F6 | 	mov	arg01, local04
0612c     15 15 02 F6 | 	mov	arg02, local07
06130     78 B4 B1 FD | 	call	#__system___string_cmp
06134     00 FA 0D F2 | 	cmp	result1, #0 wz
06138     20 00 90 AD |  if_e	jmp	#LR__0497
0613c     8B 01 00 FF 
06140     66 2C 06 F6 | 	mov	local08, ##@LR__5419
06144     12 13 02 F6 | 	mov	arg01, local04
06148     16 15 02 F6 | 	mov	arg02, local08
0614c     5C B4 B1 FD | 	call	#__system___string_cmp
06150     FD 2E 0A F6 | 	mov	local09, result1 wz
06154     00 FA 05 56 |  if_ne	mov	result1, #0
06158     00 01 90 5D |  if_ne	jmp	#LR__0503
0615c                 | LR__0497
0615c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0615c     11 27 0A F2 | 	cmp	local05, local03 wz
06160     EC 00 90 5D |  if_ne	jmp	#LR__0500
06164     8B 01 00 FF 
06168     68 30 06 F6 | 	mov	local10, ##@LR__5420
0616c     12 13 02 F6 | 	mov	arg01, local04
06170     18 15 02 F6 | 	mov	arg02, local10
06174     34 B4 B1 FD | 	call	#__system___string_cmp
06178     FD 32 02 F6 | 	mov	local11, result1
0617c     00 32 56 F2 | 	cmps	local11, #0 wc
06180     1C 00 90 CD |  if_b	jmp	#LR__0498
06184     8B 01 00 FF 
06188     6A 14 06 F6 | 	mov	arg02, ##@LR__5421
0618c     12 13 02 F6 | 	mov	arg01, local04
06190     18 B4 B1 FD | 	call	#__system___string_cmp
06194     FD 30 02 F6 | 	mov	local10, result1
06198     01 30 56 F2 | 	cmps	local10, #1 wc
0619c     B0 00 90 CD |  if_b	jmp	#LR__0500
061a0                 | LR__0498
061a0     8B 01 00 FF 
061a4     6C 14 06 F6 | 	mov	arg02, ##@LR__5422
061a8     12 13 02 F6 | 	mov	arg01, local04
061ac     FC B3 B1 FD | 	call	#__system___string_cmp
061b0     00 FA 55 F2 | 	cmps	result1, #0 wc
061b4     1C 00 90 CD |  if_b	jmp	#LR__0499
061b8     8B 01 00 FF 
061bc     6E 2E 06 F6 | 	mov	local09, ##@LR__5423
061c0     12 13 02 F6 | 	mov	arg01, local04
061c4     17 15 02 F6 | 	mov	arg02, local09
061c8     E0 B3 B1 FD | 	call	#__system___string_cmp
061cc     01 FA 55 F2 | 	cmps	result1, #1 wc
061d0     7C 00 90 CD |  if_b	jmp	#LR__0500
061d4                 | LR__0499
061d4     8B 01 00 FF 
061d8     70 2E 06 F6 | 	mov	local09, ##@LR__5424
061dc     12 13 02 F6 | 	mov	arg01, local04
061e0     17 15 02 F6 | 	mov	arg02, local09
061e4     C4 B3 B1 FD | 	call	#__system___string_cmp
061e8     00 FA 4D F2 | 	cmps	result1, #0 wz
061ec     60 00 90 AD |  if_e	jmp	#LR__0500
061f0     8B 01 00 FF 
061f4     72 2C 06 F6 | 	mov	local08, ##@LR__5425
061f8     12 13 02 F6 | 	mov	arg01, local04
061fc     16 15 02 F6 | 	mov	arg02, local08
06200     A8 B3 B1 FD | 	call	#__system___string_cmp
06204     FD 2E 0A F6 | 	mov	local09, result1 wz
06208     44 00 90 AD |  if_e	jmp	#LR__0500
0620c     8B 01 00 FF 
06210     74 34 06 F6 | 	mov	local12, ##@LR__5426
06214     1A 2D 02 F6 | 	mov	local08, local12
06218     12 13 02 F6 | 	mov	arg01, local04
0621c     16 15 02 F6 | 	mov	arg02, local08
06220     88 B3 B1 FD | 	call	#__system___string_cmp
06224     FD 2A 0A F6 | 	mov	local07, result1 wz
06228     24 00 90 AD |  if_e	jmp	#LR__0500
0622c     8B 01 00 FF 
06230     76 36 06 F6 | 	mov	local13, ##@LR__5427
06234     1B 35 02 F6 | 	mov	local12, local13
06238     12 13 02 F6 | 	mov	arg01, local04
0623c     1A 15 02 F6 | 	mov	arg02, local12
06240     68 B3 B1 FD | 	call	#__system___string_cmp
06244     FD 2C 0A F6 | 	mov	local08, result1 wz
06248     00 FA 05 56 |  if_ne	mov	result1, #0
0624c     0C 00 90 5D |  if_ne	jmp	#LR__0503
06250                 | LR__0500
06250     01 26 06 F1 | 	add	local05, #1
06254     44 FE 9F FD | 	jmp	#LR__0494
06258                 | LR__0501
06258                 | LR__0502
06258                 | ' return true
06258     01 FA 65 F6 | 	neg	result1, #1
0625c                 | LR__0503
0625c     A7 F0 03 F6 | 	mov	ptra, fp
06260     B2 00 A0 FD | 	call	#popregs_
06264                 | _isname_ret
06264     2D 00 64 FD | 	ret
06268                 | 
06268                 | ' 
06268                 | ' ' Check if the part is a number.  
06268                 | ' 
06268                 | ' function isnum(s as string) as boolean 
06268                 | _isnum
06268     13 4A 05 F6 | 	mov	COUNT_, #19
0626c     A8 00 A0 FD | 	call	#pushregs_
06270     09 1F 02 F6 | 	mov	local01, arg01
06274     00 20 06 F6 | 	mov	local02, #0
06278     00 22 06 F6 | 	mov	local03, #0
0627c     0F 13 02 F6 | 	mov	arg01, local01
06280     09 25 02 F6 | 	mov	local04, arg01
06284     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
06288                 | LR__0510
06288     12 FB C9 FA | 	rdbyte	result1, local04 wz
0628c     01 24 06 51 |  if_ne	add	local04, #1
06290     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
06294                 | LR__0511
06294     09 25 82 F1 | 	sub	local04, arg01
06298     12 FB 01 F6 | 	mov	result1, local04
0629c     FD 26 0A F6 | 	mov	local05, result1 wz
062a0     00 FA 05 A6 |  if_e	mov	result1, #0
062a4     A0 03 90 AD |  if_e	jmp	#LR__0526
062a8     0F 13 02 F6 | 	mov	arg01, local01
062ac     01 14 06 F6 | 	mov	arg02, #1
062b0     01 16 06 F6 | 	mov	arg03, #1
062b4     60 D4 B1 FD | 	call	#__system__Mid_S
062b8     FD 28 02 F6 | 	mov	local06, result1
062bc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
062bc     8B 01 00 FF 
062c0     78 14 06 F6 | 	mov	arg02, ##@LR__5428
062c4     14 13 02 F6 | 	mov	arg01, local06
062c8     E0 B2 B1 FD | 	call	#__system___string_cmp
062cc     00 FA 55 F2 | 	cmps	result1, #0 wc
062d0     1C 00 90 CD |  if_b	jmp	#LR__0512
062d4     8B 01 00 FF 
062d8     7A 2A 06 F6 | 	mov	local07, ##@LR__5429
062dc     14 13 02 F6 | 	mov	arg01, local06
062e0     15 15 02 F6 | 	mov	arg02, local07
062e4     C4 B2 B1 FD | 	call	#__system___string_cmp
062e8     01 FA 55 F2 | 	cmps	result1, #1 wc
062ec     84 00 90 CD |  if_b	jmp	#LR__0513
062f0                 | LR__0512
062f0     8B 01 00 FF 
062f4     7C 2C 06 F6 | 	mov	local08, ##@LR__5430
062f8     16 2B 02 F6 | 	mov	local07, local08
062fc     14 13 02 F6 | 	mov	arg01, local06
06300     15 15 02 F6 | 	mov	arg02, local07
06304     A4 B2 B1 FD | 	call	#__system___string_cmp
06308     00 FA 0D F2 | 	cmp	result1, #0 wz
0630c     64 00 90 AD |  if_e	jmp	#LR__0513
06310     8B 01 00 FF 
06314     7E 2E 06 F6 | 	mov	local09, ##@LR__5431
06318     17 2D 02 F6 | 	mov	local08, local09
0631c     14 13 02 F6 | 	mov	arg01, local06
06320     16 15 02 F6 | 	mov	arg02, local08
06324     84 B2 B1 FD | 	call	#__system___string_cmp
06328     FD 2A 0A F6 | 	mov	local07, result1 wz
0632c     44 00 90 AD |  if_e	jmp	#LR__0513
06330     8B 01 00 FF 
06334     80 30 06 F6 | 	mov	local10, ##@LR__5432
06338     18 2F 02 F6 | 	mov	local09, local10
0633c     14 13 02 F6 | 	mov	arg01, local06
06340     17 15 02 F6 | 	mov	arg02, local09
06344     64 B2 B1 FD | 	call	#__system___string_cmp
06348     FD 2C 0A F6 | 	mov	local08, result1 wz
0634c     24 00 90 AD |  if_e	jmp	#LR__0513
06350     8B 01 00 FF 
06354     82 32 06 F6 | 	mov	local11, ##@LR__5433
06358     19 31 02 F6 | 	mov	local10, local11
0635c     14 13 02 F6 | 	mov	arg01, local06
06360     18 15 02 F6 | 	mov	arg02, local10
06364     44 B2 B1 FD | 	call	#__system___string_cmp
06368     FD 2E 0A F6 | 	mov	local09, result1 wz
0636c     00 FA 05 56 |  if_ne	mov	result1, #0
06370     D4 02 90 5D |  if_ne	jmp	#LR__0526
06374                 | LR__0513
06374                 | ' if m$="." then ds=1
06374     8B 01 00 FF 
06378     84 14 06 F6 | 	mov	arg02, ##@LR__5434
0637c     14 13 02 F6 | 	mov	arg01, local06
06380     28 B2 B1 FD | 	call	#__system___string_cmp
06384     00 FA 0D F2 | 	cmp	result1, #0 wz
06388     01 20 06 A6 |  if_e	mov	local02, #1
0638c                 | ' if m$="$" then hex=1 else hex=0
0638c     8B 01 00 FF 
06390     86 14 06 F6 | 	mov	arg02, ##@LR__5435
06394     14 13 02 F6 | 	mov	arg01, local06
06398     10 B2 B1 FD | 	call	#__system___string_cmp
0639c     00 FA 0D F2 | 	cmp	result1, #0 wz
063a0     01 34 06 A6 |  if_e	mov	local12, #1
063a4     00 34 06 56 |  if_ne	mov	local12, #0
063a8                 | ' if m$="%" then bin=1 else bin=0
063a8     8B 01 00 FF 
063ac     88 14 06 F6 | 	mov	arg02, ##@LR__5436
063b0     14 13 02 F6 | 	mov	arg01, local06
063b4     F4 B1 B1 FD | 	call	#__system___string_cmp
063b8     00 FA 0D F2 | 	cmp	result1, #0 wz
063bc     01 36 06 A6 |  if_e	mov	local13, #1
063c0     00 36 06 56 |  if_ne	mov	local13, #0
063c4                 | ' if l>1 then 
063c4     02 26 56 F2 | 	cmps	local05, #2 wc
063c8     78 02 90 CD |  if_b	jmp	#LR__0525
063cc                 | '   for i=2 to l
063cc     02 38 06 F6 | 	mov	local14, #2
063d0     13 3B 02 F6 | 	mov	local15, local05
063d4     01 3A 06 F1 | 	add	local15, #1
063d8                 | LR__0514
063d8     1D 39 52 F2 | 	cmps	local14, local15 wc
063dc     64 02 90 3D |  if_ae	jmp	#LR__0524
063e0     0F 13 02 F6 | 	mov	arg01, local01
063e4     1C 15 02 F6 | 	mov	arg02, local14
063e8     01 16 06 F6 | 	mov	arg03, #1
063ec     28 D3 B1 FD | 	call	#__system__Mid_S
063f0     FD 28 02 F6 | 	mov	local06, result1
063f4     00 3C 06 F6 | 	mov	local16, #0
063f8                 | '     m$=mid$(s,i,1) : b=false
063f8                 | '     if m$>="0" andalso m$<="9" then b=true  
063f8     8B 01 00 FF 
063fc     8A 14 06 F6 | 	mov	arg02, ##@LR__5437
06400     14 13 02 F6 | 	mov	arg01, local06
06404     A4 B1 B1 FD | 	call	#__system___string_cmp
06408     00 FA 55 F2 | 	cmps	result1, #0 wc
0640c     1C 00 90 CD |  if_b	jmp	#LR__0515
06410     8B 01 00 FF 
06414     8C 2A 06 F6 | 	mov	local07, ##@LR__5438
06418     14 13 02 F6 | 	mov	arg01, local06
0641c     15 15 02 F6 | 	mov	arg02, local07
06420     88 B1 B1 FD | 	call	#__system___string_cmp
06424     01 FA 55 F2 | 	cmps	result1, #1 wc
06428     01 3C 66 C6 |  if_b	neg	local16, #1
0642c                 | LR__0515
0642c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0642c     8B 01 00 FF 
06430     8E 14 06 F6 | 	mov	arg02, ##@LR__5439
06434     14 13 02 F6 | 	mov	arg01, local06
06438     70 B1 B1 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     7C 00 90 AD |  if_e	jmp	#LR__0516
06444     8B 01 00 FF 
06448     90 2A 06 F6 | 	mov	local07, ##@LR__5440
0644c     14 13 02 F6 | 	mov	arg01, local06
06450     15 15 02 F6 | 	mov	arg02, local07
06454     54 B1 B1 FD | 	call	#__system___string_cmp
06458     00 FA 0D F2 | 	cmp	result1, #0 wz
0645c     60 00 90 AD |  if_e	jmp	#LR__0516
06460     8B 01 00 FF 
06464     92 2C 06 F6 | 	mov	local08, ##@LR__5441
06468     16 2B 02 F6 | 	mov	local07, local08
0646c     14 13 02 F6 | 	mov	arg01, local06
06470     15 15 02 F6 | 	mov	arg02, local07
06474     34 B1 B1 FD | 	call	#__system___string_cmp
06478     00 FA 0D F2 | 	cmp	result1, #0 wz
0647c     40 00 90 AD |  if_e	jmp	#LR__0516
06480     8B 01 00 FF 
06484     94 2E 06 F6 | 	mov	local09, ##@LR__5442
06488     17 2D 02 F6 | 	mov	local08, local09
0648c     14 13 02 F6 | 	mov	arg01, local06
06490     16 15 02 F6 | 	mov	arg02, local08
06494     14 B1 B1 FD | 	call	#__system___string_cmp
06498     FD 2A 0A F6 | 	mov	local07, result1 wz
0649c     20 00 90 AD |  if_e	jmp	#LR__0516
064a0     8B 01 00 FF 
064a4     96 30 06 F6 | 	mov	local10, ##@LR__5443
064a8     18 2F 02 F6 | 	mov	local09, local10
064ac     14 13 02 F6 | 	mov	arg01, local06
064b0     17 15 02 F6 | 	mov	arg02, local09
064b4     F4 B0 B1 FD | 	call	#__system___string_cmp
064b8     FD 2C 0A F6 | 	mov	local08, result1 wz
064bc     04 00 90 5D |  if_ne	jmp	#LR__0517
064c0                 | LR__0516
064c0     01 3C 66 F6 | 	neg	local16, #1
064c4                 | LR__0517
064c4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
064c4     01 34 0E F2 | 	cmp	local12, #1 wz
064c8     34 00 90 5D |  if_ne	jmp	#LR__0518
064cc     8B 01 00 FF 
064d0     98 14 06 F6 | 	mov	arg02, ##@LR__5444
064d4     14 13 02 F6 | 	mov	arg01, local06
064d8     D0 B0 B1 FD | 	call	#__system___string_cmp
064dc     00 FA 55 F2 | 	cmps	result1, #0 wc
064e0     1C 00 90 CD |  if_b	jmp	#LR__0518
064e4     8B 01 00 FF 
064e8     9A 2A 06 F6 | 	mov	local07, ##@LR__5445
064ec     14 13 02 F6 | 	mov	arg01, local06
064f0     15 15 02 F6 | 	mov	arg02, local07
064f4     B4 B0 B1 FD | 	call	#__system___string_cmp
064f8     01 FA 55 F2 | 	cmps	result1, #1 wc
064fc     01 3C 66 C6 |  if_b	neg	local16, #1
06500                 | LR__0518
06500                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06500     01 36 0E F2 | 	cmp	local13, #1 wz
06504     58 00 90 5D |  if_ne	jmp	#LR__0520
06508     8B 01 00 FF 
0650c     9C 14 06 F6 | 	mov	arg02, ##@LR__5446
06510     14 13 02 F6 | 	mov	arg01, local06
06514     94 B0 B1 FD | 	call	#__system___string_cmp
06518     00 FA 55 F2 | 	cmps	result1, #0 wc
0651c     1C 00 90 CD |  if_b	jmp	#LR__0519
06520     8B 01 00 FF 
06524     9E 2A 06 F6 | 	mov	local07, ##@LR__5447
06528     14 13 02 F6 | 	mov	arg01, local06
0652c     15 15 02 F6 | 	mov	arg02, local07
06530     78 B0 B1 FD | 	call	#__system___string_cmp
06534     01 FA 55 F2 | 	cmps	result1, #1 wc
06538     24 00 90 CD |  if_b	jmp	#LR__0520
0653c                 | LR__0519
0653c     8B 01 00 FF 
06540     A0 2C 06 F6 | 	mov	local08, ##@LR__5448
06544     16 2B 02 F6 | 	mov	local07, local08
06548     14 13 02 F6 | 	mov	arg01, local06
0654c     15 15 02 F6 | 	mov	arg02, local07
06550     58 B0 B1 FD | 	call	#__system___string_cmp
06554     00 FA 0D F2 | 	cmp	result1, #0 wz
06558     00 FA 05 56 |  if_ne	mov	result1, #0
0655c     E8 00 90 5D |  if_ne	jmp	#LR__0526
06560                 | LR__0520
06560                 | '     if not b then return false
06560     1E 3D 22 F6 | 	not	local16, local16
06564     00 3C 0E F2 | 	cmp	local16, #0 wz
06568     00 FA 05 56 |  if_ne	mov	result1, #0
0656c     D8 00 90 5D |  if_ne	jmp	#LR__0526
06570                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06570     8B 01 00 FF 
06574     A2 14 06 F6 | 	mov	arg02, ##@LR__5449
06578     14 13 02 F6 | 	mov	arg01, local06
0657c     2C B0 B1 FD | 	call	#__system___string_cmp
06580     00 FA 0D F2 | 	cmp	result1, #0 wz
06584     3C 00 90 5D |  if_ne	jmp	#LR__0521
06588     1C 15 02 F6 | 	mov	arg02, local14
0658c     01 14 86 F1 | 	sub	arg02, #1
06590     0F 13 02 F6 | 	mov	arg01, local01
06594     01 16 06 F6 | 	mov	arg03, #1
06598     7C D1 B1 FD | 	call	#__system__Mid_S
0659c     FD 12 02 F6 | 	mov	arg01, result1
065a0     6C D3 B1 FD | 	call	#__system__LCase_S
065a4     FD 12 02 F6 | 	mov	arg01, result1
065a8     8B 01 00 FF 
065ac     A4 2A 06 F6 | 	mov	local07, ##@LR__5450
065b0     15 15 02 F6 | 	mov	arg02, local07
065b4     F4 AF B1 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     00 FA 05 56 |  if_ne	mov	result1, #0
065c0     84 00 90 5D |  if_ne	jmp	#LR__0526
065c4                 | LR__0521
065c4                 | '     if m$="." then ds+=1: if ds>1 then return false
065c4     8B 01 00 FF 
065c8     A6 14 06 F6 | 	mov	arg02, ##@LR__5451
065cc     14 13 02 F6 | 	mov	arg01, local06
065d0     D8 AF B1 FD | 	call	#__system___string_cmp
065d4     00 FA 0D F2 | 	cmp	result1, #0 wz
065d8     01 20 06 A1 |  if_e	add	local02, #1
065dc     02 20 56 A2 |  if_e	cmps	local02, #2 wc
065e0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
065e4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0526
065e8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
065e8     8B 01 00 FF 
065ec     A8 3E 06 F6 | 	mov	local17, ##@LR__5452
065f0     1F 41 02 F6 | 	mov	local18, local17
065f4     14 13 02 F6 | 	mov	arg01, local06
065f8     20 15 02 F6 | 	mov	arg02, local18
065fc     AC AF B1 FD | 	call	#__system___string_cmp
06600     FD 42 0A F6 | 	mov	local19, result1 wz
06604     20 00 90 AD |  if_e	jmp	#LR__0522
06608     8B 01 00 FF 
0660c     AA 2A 06 F6 | 	mov	local07, ##@LR__5453
06610     15 3F 02 F6 | 	mov	local17, local07
06614     14 13 02 F6 | 	mov	arg01, local06
06618     1F 15 02 F6 | 	mov	arg02, local17
0661c     8C AF B1 FD | 	call	#__system___string_cmp
06620     FD 40 0A F6 | 	mov	local18, result1 wz
06624     14 00 90 5D |  if_ne	jmp	#LR__0523
06628                 | LR__0522
06628     01 22 06 F1 | 	add	local03, #1
0662c     00 34 0E F2 | 	cmp	local12, #0 wz
06630     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06634     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06638     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0526
0663c                 | LR__0523
0663c     01 38 06 F1 | 	add	local14, #1
06640     94 FD 9F FD | 	jmp	#LR__0514
06644                 | LR__0524
06644                 | LR__0525
06644                 | ' return true
06644     01 FA 65 F6 | 	neg	result1, #1
06648                 | LR__0526
06648     A7 F0 03 F6 | 	mov	ptra, fp
0664c     B2 00 A0 FD | 	call	#popregs_
06650                 | _isnum_ret
06650     2D 00 64 FD | 	ret
06654                 | 
06654                 | '   
06654                 | ' ' Check if the part is an integer number.    
06654                 | '   
06654                 | ' function isint(s as string) as boolean
06654                 | _isint
06654     0E 4A 05 F6 | 	mov	COUNT_, #14
06658     A8 00 A0 FD | 	call	#pushregs_
0665c     09 1F 02 F6 | 	mov	local01, arg01
06660     09 21 02 F6 | 	mov	local02, arg01
06664     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06668                 | LR__0530
06668     10 FB C9 FA | 	rdbyte	result1, local02 wz
0666c     01 20 06 51 |  if_ne	add	local02, #1
06670     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06674                 | LR__0531
06674     09 21 82 F1 | 	sub	local02, arg01
06678     10 FB 01 F6 | 	mov	result1, local02
0667c     FD 22 0A F6 | 	mov	local03, result1 wz
06680     00 FA 05 A6 |  if_e	mov	result1, #0
06684     64 02 90 AD |  if_e	jmp	#LR__0544
06688     0F 13 02 F6 | 	mov	arg01, local01
0668c     01 14 06 F6 | 	mov	arg02, #1
06690     01 16 06 F6 | 	mov	arg03, #1
06694     80 D0 B1 FD | 	call	#__system__Mid_S
06698     FD 24 02 F6 | 	mov	local04, result1
0669c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0669c     8B 01 00 FF 
066a0     AC 14 06 F6 | 	mov	arg02, ##@LR__5454
066a4     12 13 02 F6 | 	mov	arg01, local04
066a8     00 AF B1 FD | 	call	#__system___string_cmp
066ac     00 FA 55 F2 | 	cmps	result1, #0 wc
066b0     1C 00 90 CD |  if_b	jmp	#LR__0532
066b4     8B 01 00 FF 
066b8     AE 26 06 F6 | 	mov	local05, ##@LR__5455
066bc     12 13 02 F6 | 	mov	arg01, local04
066c0     13 15 02 F6 | 	mov	arg02, local05
066c4     E4 AE B1 FD | 	call	#__system___string_cmp
066c8     01 FA 55 F2 | 	cmps	result1, #1 wc
066cc     64 00 90 CD |  if_b	jmp	#LR__0533
066d0                 | LR__0532
066d0     8B 01 00 FF 
066d4     B0 28 06 F6 | 	mov	local06, ##@LR__5456
066d8     14 27 02 F6 | 	mov	local05, local06
066dc     12 13 02 F6 | 	mov	arg01, local04
066e0     13 15 02 F6 | 	mov	arg02, local05
066e4     C4 AE B1 FD | 	call	#__system___string_cmp
066e8     00 FA 0D F2 | 	cmp	result1, #0 wz
066ec     44 00 90 AD |  if_e	jmp	#LR__0533
066f0     8B 01 00 FF 
066f4     B2 2A 06 F6 | 	mov	local07, ##@LR__5457
066f8     15 29 02 F6 | 	mov	local06, local07
066fc     12 13 02 F6 | 	mov	arg01, local04
06700     14 15 02 F6 | 	mov	arg02, local06
06704     A4 AE B1 FD | 	call	#__system___string_cmp
06708     FD 26 0A F6 | 	mov	local05, result1 wz
0670c     24 00 90 AD |  if_e	jmp	#LR__0533
06710     8B 01 00 FF 
06714     B4 2C 06 F6 | 	mov	local08, ##@LR__5458
06718     16 2B 02 F6 | 	mov	local07, local08
0671c     12 13 02 F6 | 	mov	arg01, local04
06720     15 15 02 F6 | 	mov	arg02, local07
06724     84 AE B1 FD | 	call	#__system___string_cmp
06728     FD 28 0A F6 | 	mov	local06, result1 wz
0672c     00 FA 05 56 |  if_ne	mov	result1, #0
06730     B8 01 90 5D |  if_ne	jmp	#LR__0544
06734                 | LR__0533
06734                 | ' if m$="$" then hex=1 else hex=0
06734     8B 01 00 FF 
06738     B6 14 06 F6 | 	mov	arg02, ##@LR__5459
0673c     12 13 02 F6 | 	mov	arg01, local04
06740     68 AE B1 FD | 	call	#__system___string_cmp
06744     00 FA 0D F2 | 	cmp	result1, #0 wz
06748     01 2E 06 A6 |  if_e	mov	local09, #1
0674c     00 2E 06 56 |  if_ne	mov	local09, #0
06750                 | ' if m$="%" then bin=1 else bin=0
06750     8B 01 00 FF 
06754     B8 14 06 F6 | 	mov	arg02, ##@LR__5460
06758     12 13 02 F6 | 	mov	arg01, local04
0675c     4C AE B1 FD | 	call	#__system___string_cmp
06760     00 FA 0D F2 | 	cmp	result1, #0 wz
06764     01 30 06 A6 |  if_e	mov	local10, #1
06768     00 30 06 56 |  if_ne	mov	local10, #0
0676c                 | ' if l>1 then 
0676c     02 22 56 F2 | 	cmps	local03, #2 wc
06770     74 01 90 CD |  if_b	jmp	#LR__0543
06774                 | '   for i=2 to l
06774     02 32 06 F6 | 	mov	local11, #2
06778     11 35 02 F6 | 	mov	local12, local03
0677c     01 34 06 F1 | 	add	local12, #1
06780                 | LR__0534
06780     1A 33 52 F2 | 	cmps	local11, local12 wc
06784     60 01 90 3D |  if_ae	jmp	#LR__0542
06788     0F 13 02 F6 | 	mov	arg01, local01
0678c     19 15 02 F6 | 	mov	arg02, local11
06790     01 16 06 F6 | 	mov	arg03, #1
06794     80 CF B1 FD | 	call	#__system__Mid_S
06798     FD 24 02 F6 | 	mov	local04, result1
0679c                 | '     m$=mid$(s,i,1) 
0679c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0679c     00 2E 0E F2 | 	cmp	local09, #0 wz
067a0     50 00 90 5D |  if_ne	jmp	#LR__0536
067a4     8B 01 00 FF 
067a8     BA 14 06 F6 | 	mov	arg02, ##@LR__5461
067ac     12 13 02 F6 | 	mov	arg01, local04
067b0     F8 AD B1 FD | 	call	#__system___string_cmp
067b4     00 FA 55 F2 | 	cmps	result1, #0 wc
067b8     18 00 90 CD |  if_b	jmp	#LR__0535
067bc     8B 01 00 FF 
067c0     BC 14 06 F6 | 	mov	arg02, ##@LR__5462
067c4     12 13 02 F6 | 	mov	arg01, local04
067c8     E0 AD B1 FD | 	call	#__system___string_cmp
067cc     01 FA 55 F2 | 	cmps	result1, #1 wc
067d0     20 00 90 CD |  if_b	jmp	#LR__0536
067d4                 | LR__0535
067d4     8B 01 00 FF 
067d8     BE 28 06 F6 | 	mov	local06, ##@LR__5463
067dc     12 13 02 F6 | 	mov	arg01, local04
067e0     14 15 02 F6 | 	mov	arg02, local06
067e4     C4 AD B1 FD | 	call	#__system___string_cmp
067e8     00 FA 0D F2 | 	cmp	result1, #0 wz
067ec     00 FA 05 56 |  if_ne	mov	result1, #0
067f0     F8 00 90 5D |  if_ne	jmp	#LR__0544
067f4                 | LR__0536
067f4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
067f4     01 2E 0E F2 | 	cmp	local09, #1 wz
067f8     90 00 90 5D |  if_ne	jmp	#LR__0539
067fc     8B 01 00 FF 
06800     C0 14 06 F6 | 	mov	arg02, ##@LR__5464
06804     12 13 02 F6 | 	mov	arg01, local04
06808     A0 AD B1 FD | 	call	#__system___string_cmp
0680c     00 FA 55 F2 | 	cmps	result1, #0 wc
06810     1C 00 90 CD |  if_b	jmp	#LR__0537
06814     8B 01 00 FF 
06818     C2 14 06 F6 | 	mov	arg02, ##@LR__5465
0681c     12 13 02 F6 | 	mov	arg01, local04
06820     88 AD B1 FD | 	call	#__system___string_cmp
06824     FD 36 02 F6 | 	mov	local13, result1
06828     01 36 56 F2 | 	cmps	local13, #1 wc
0682c     5C 00 90 CD |  if_b	jmp	#LR__0539
06830                 | LR__0537
06830     8B 01 00 FF 
06834     C4 26 06 F6 | 	mov	local05, ##@LR__5466
06838     12 13 02 F6 | 	mov	arg01, local04
0683c     13 15 02 F6 | 	mov	arg02, local05
06840     68 AD B1 FD | 	call	#__system___string_cmp
06844     FD 38 02 F6 | 	mov	local14, result1
06848     00 38 56 F2 | 	cmps	local14, #0 wc
0684c     1C 00 90 CD |  if_b	jmp	#LR__0538
06850     8B 01 00 FF 
06854     C6 2A 06 F6 | 	mov	local07, ##@LR__5467
06858     12 13 02 F6 | 	mov	arg01, local04
0685c     15 15 02 F6 | 	mov	arg02, local07
06860     48 AD B1 FD | 	call	#__system___string_cmp
06864     01 FA 55 F2 | 	cmps	result1, #1 wc
06868     20 00 90 CD |  if_b	jmp	#LR__0539
0686c                 | LR__0538
0686c     8B 01 00 FF 
06870     C8 2C 06 F6 | 	mov	local08, ##@LR__5468
06874     12 13 02 F6 | 	mov	arg01, local04
06878     16 15 02 F6 | 	mov	arg02, local08
0687c     2C AD B1 FD | 	call	#__system___string_cmp
06880     00 FA 0D F2 | 	cmp	result1, #0 wz
06884     00 FA 05 56 |  if_ne	mov	result1, #0
06888     60 00 90 5D |  if_ne	jmp	#LR__0544
0688c                 | LR__0539
0688c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0688c     01 30 0E F2 | 	cmp	local10, #1 wz
06890     4C 00 90 5D |  if_ne	jmp	#LR__0541
06894     8B 01 00 FF 
06898     CA 14 06 F6 | 	mov	arg02, ##@LR__5469
0689c     12 13 02 F6 | 	mov	arg01, local04
068a0     08 AD B1 FD | 	call	#__system___string_cmp
068a4     00 FA 55 F2 | 	cmps	result1, #0 wc
068a8     18 00 90 CD |  if_b	jmp	#LR__0540
068ac     8B 01 00 FF 
068b0     CC 14 06 F6 | 	mov	arg02, ##@LR__5470
068b4     12 13 02 F6 | 	mov	arg01, local04
068b8     F0 AC B1 FD | 	call	#__system___string_cmp
068bc     01 FA 55 F2 | 	cmps	result1, #1 wc
068c0     1C 00 90 CD |  if_b	jmp	#LR__0541
068c4                 | LR__0540
068c4     8B 01 00 FF 
068c8     CE 14 06 F6 | 	mov	arg02, ##@LR__5471
068cc     12 13 02 F6 | 	mov	arg01, local04
068d0     D8 AC B1 FD | 	call	#__system___string_cmp
068d4     00 FA 0D F2 | 	cmp	result1, #0 wz
068d8     00 FA 05 56 |  if_ne	mov	result1, #0
068dc     0C 00 90 5D |  if_ne	jmp	#LR__0544
068e0                 | LR__0541
068e0     01 32 06 F1 | 	add	local11, #1
068e4     98 FE 9F FD | 	jmp	#LR__0534
068e8                 | LR__0542
068e8                 | LR__0543
068e8                 | ' return true
068e8     01 FA 65 F6 | 	neg	result1, #1
068ec                 | LR__0544
068ec     A7 F0 03 F6 | 	mov	ptra, fp
068f0     B2 00 A0 FD | 	call	#popregs_
068f4                 | _isint_ret
068f4     2D 00 64 FD | 	ret
068f8                 | 
068f8                 | ' 
068f8                 | ' ' Check if the part is a positive decimal number.  
068f8                 | ' 
068f8                 | ' function isdec(s as string) as boolean
068f8                 | _isdec
068f8     05 4A 05 F6 | 	mov	COUNT_, #5
068fc     A8 00 A0 FD | 	call	#pushregs_
06900     09 1F 02 F6 | 	mov	local01, arg01
06904     09 21 02 F6 | 	mov	local02, arg01
06908     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
0690c                 | LR__0550
0690c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06910     01 20 06 51 |  if_ne	add	local02, #1
06914     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06918                 | LR__0551
06918     09 21 82 F1 | 	sub	local02, arg01
0691c     10 FB 01 F6 | 	mov	result1, local02
06920     FD 20 0A F6 | 	mov	local02, result1 wz
06924     00 FA 05 A6 |  if_e	mov	result1, #0
06928     80 00 90 AD |  if_e	jmp	#LR__0556
0692c                 | ' for i=1 to l
0692c     01 22 06 F6 | 	mov	local03, #1
06930     10 25 02 F6 | 	mov	local04, local02
06934     01 24 06 F1 | 	add	local04, #1
06938                 | LR__0552
06938     12 23 52 F2 | 	cmps	local03, local04 wc
0693c     68 00 90 3D |  if_ae	jmp	#LR__0555
06940     0F 13 02 F6 | 	mov	arg01, local01
06944     11 15 02 F6 | 	mov	arg02, local03
06948     01 16 06 F6 | 	mov	arg03, #1
0694c     C8 CD B1 FD | 	call	#__system__Mid_S
06950     FD 26 02 F6 | 	mov	local05, result1
06954                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06954     8B 01 00 FF 
06958     D0 14 06 F6 | 	mov	arg02, ##@LR__5472
0695c     13 13 02 F6 | 	mov	arg01, local05
06960     48 AC B1 FD | 	call	#__system___string_cmp
06964     00 FA 55 F2 | 	cmps	result1, #0 wc
06968     18 00 90 CD |  if_b	jmp	#LR__0553
0696c     8B 01 00 FF 
06970     D2 14 06 F6 | 	mov	arg02, ##@LR__5473
06974     13 13 02 F6 | 	mov	arg01, local05
06978     30 AC B1 FD | 	call	#__system___string_cmp
0697c     01 FA 55 F2 | 	cmps	result1, #1 wc
06980     1C 00 90 CD |  if_b	jmp	#LR__0554
06984                 | LR__0553
06984     8B 01 00 FF 
06988     D4 14 06 F6 | 	mov	arg02, ##@LR__5474
0698c     13 13 02 F6 | 	mov	arg01, local05
06990     18 AC B1 FD | 	call	#__system___string_cmp
06994     00 FA 0D F2 | 	cmp	result1, #0 wz
06998     00 FA 05 56 |  if_ne	mov	result1, #0
0699c     0C 00 90 5D |  if_ne	jmp	#LR__0556
069a0                 | LR__0554
069a0     01 22 06 F1 | 	add	local03, #1
069a4     90 FF 9F FD | 	jmp	#LR__0552
069a8                 | LR__0555
069a8                 | ' return true
069a8     01 FA 65 F6 | 	neg	result1, #1
069ac                 | LR__0556
069ac     A7 F0 03 F6 | 	mov	ptra, fp
069b0     B2 00 A0 FD | 	call	#popregs_
069b4                 | _isdec_ret
069b4     2D 00 64 FD | 	ret
069b8                 | 
069b8                 | ' 
069b8                 | ' ' Check if the part is a string.  
069b8                 | ' 
069b8                 | ' function isstring(s as string) as boolean
069b8                 | _isstring
069b8     01 4A 05 F6 | 	mov	COUNT_, #1
069bc     A8 00 A0 FD | 	call	#pushregs_
069c0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
069c0     09 1F 02 F6 | 	mov	local01, arg01
069c4     01 14 06 F6 | 	mov	arg02, #1
069c8     34 CC B1 FD | 	call	#__system__Left_S
069cc     FD 12 02 F6 | 	mov	arg01, result1
069d0     8B 01 00 FF 
069d4     D6 14 06 F6 | 	mov	arg02, ##@LR__5475
069d8     D0 AB B1 FD | 	call	#__system___string_cmp
069dc     00 FA 4D F2 | 	cmps	result1, #0 wz
069e0     28 00 90 5D |  if_ne	jmp	#LR__0560
069e4     0F 13 02 F6 | 	mov	arg01, local01
069e8     01 14 06 F6 | 	mov	arg02, #1
069ec     98 CC B1 FD | 	call	#__system__Right_S
069f0     FD 12 02 F6 | 	mov	arg01, result1
069f4     8B 01 00 FF 
069f8     D8 14 06 F6 | 	mov	arg02, ##@LR__5476
069fc     AC AB B1 FD | 	call	#__system___string_cmp
06a00     00 FA 4D F2 | 	cmps	result1, #0 wz
06a04     01 FA 65 A6 |  if_e	neg	result1, #1
06a08     04 00 90 AD |  if_e	jmp	#LR__0561
06a0c                 | LR__0560
06a0c     00 FA 05 F6 | 	mov	result1, #0
06a10                 | LR__0561
06a10     A7 F0 03 F6 | 	mov	ptra, fp
06a14     B2 00 A0 FD | 	call	#popregs_
06a18                 | _isstring_ret
06a18     2D 00 64 FD | 	ret
06a1c                 | 
06a1c                 | ' 
06a1c                 | ' ' getnoteval. Returns the frequency of note token
06a1c                 | ' 
06a1c                 | ' function getnoteval(token) as single
06a1c                 | _getnoteval
06a1c     02 4A 05 F6 | 	mov	COUNT_, #2
06a20     A8 00 A0 FD | 	call	#pushregs_
06a24     01 00 00 FF 
06a28     00 13 86 F1 | 	sub	arg01, ##768
06a2c     09 15 52 F6 | 	abs	arg02, arg01 wc
06a30     0C 14 16 FD | 	qdiv	arg02, #12
06a34     14 00 00 FF 
06a38     D8 E4 05 F1 | 	add	objptr, ##10456
06a3c     19 14 62 FD | 	getqy	arg02
06a40     0A 15 82 F6 | 	negc	arg02, arg02
06a44     02 14 66 F0 | 	shl	arg02, #2
06a48     F2 14 02 F1 | 	add	arg02, objptr
06a4c     0A 1F 02 FB | 	rdlong	local01, arg02
06a50     09 15 52 F6 | 	abs	arg02, arg01 wc
06a54     0C 14 16 FD | 	qdiv	arg02, #12
06a58     14 00 00 FF 
06a5c     D8 E4 85 F1 | 	sub	objptr, ##10456
06a60     01 12 06 F6 | 	mov	arg01, #1
06a64                 | ' noteexp=1+(note/12) 
06a64                 | ' return (2.0^noteexp)*notebase
06a64     18 14 62 FD | 	getqx	arg02
06a68     0A 13 82 F3 | 	sumc	arg01, arg02
06a6c     09 13 52 F6 | 	abs	arg01, arg01 wc
06a70     1F 20 C6 C9 |  if_b	decod	local02, #31
06a74     00 20 06 36 |  if_ae	mov	local02, #0
06a78     C0 D4 B1 FD | 	call	#__system___float_fromuns
06a7c     10 FB 61 F5 | 	xor	result1, local02
06a80     FD 14 02 F6 | 	mov	arg02, result1
06a84     1E 12 C6 F9 | 	decod	arg01, #30
06a88     BC E7 B1 FD | 	call	#__system____builtin_powf
06a8c     FD 12 02 F6 | 	mov	arg01, result1
06a90     0F 15 02 F6 | 	mov	arg02, local01
06a94     A8 D8 B1 FD | 	call	#__system___float_mul
06a98     A7 F0 03 F6 | 	mov	ptra, fp
06a9c     B2 00 A0 FD | 	call	#popregs_
06aa0                 | _getnoteval_ret
06aa0     2D 00 64 FD | 	ret
06aa4                 | 
06aa4                 | ' 
06aa4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06aa4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06aa4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06aa4                 | ' 
06aa4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06aa4                 | ' '
06aa4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06aa4                 | ' '
06aa4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06aa4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06aa4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06aa4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06aa4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06aa4                 | ' ' 
06aa4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06aa4                 | ' 
06aa4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06aa4                 | ' ' Helper functions to manage program lines
06aa4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06aa4                 | ' 
06aa4                 | ' '----- delete a line from a program
06aa4                 | ' 
06aa4                 | ' function deleteline(aline as ulong) as integer
06aa4                 | _deleteline
06aa4     02 4A 05 F6 | 	mov	COUNT_, #2
06aa8     A8 00 A0 FD | 	call	#pushregs_
06aac     2C F0 07 F1 | 	add	ptra, #44
06ab0     04 4E 05 F1 | 	add	fp, #4
06ab4     A7 12 62 FC | 	wrlong	arg01, fp
06ab8     4A 00 00 FF 
06abc     88 E4 05 F1 | 	add	objptr, ##38024
06ac0     F2 1E 02 FB | 	rdlong	local01, objptr
06ac4     0C 4E 05 F1 | 	add	fp, #12
06ac8     A7 1E 62 FC | 	wrlong	local01, fp
06acc     10 4E 85 F1 | 	sub	fp, #16
06ad0                 | ' 
06ad0                 | ' searchptr=programstart
06ad0                 | ' do
06ad0     3E 00 00 FF 
06ad4     BC E5 85 F1 | 	sub	objptr, ##32188
06ad8                 | LR__0570
06ad8     14 4E 05 F1 | 	add	fp, #20
06adc     A7 12 02 F6 | 	mov	arg01, fp
06ae0     04 4E 85 F1 | 	sub	fp, #4
06ae4     A7 14 02 FB | 	rdlong	arg02, fp
06ae8     10 4E 85 F1 | 	sub	fp, #16
06aec     18 16 06 F6 | 	mov	arg03, #24
06af0     50 9E B1 FD | 	call	#_psram_spin2_read1
06af4     10 4E 05 F1 | 	add	fp, #16
06af8     A7 1E 02 FB | 	rdlong	local01, fp
06afc     08 4E 85 F1 | 	sub	fp, #8
06b00     A7 1E 62 FC | 	wrlong	local01, fp
06b04     20 4E 05 F1 | 	add	fp, #32
06b08     A7 1E 02 FB | 	rdlong	local01, fp
06b0c     18 4E 85 F1 | 	sub	fp, #24
06b10     A7 1E 62 FC | 	wrlong	local01, fp
06b14     04 4E 05 F1 | 	add	fp, #4
06b18     A7 1E 02 FB | 	rdlong	local01, fp
06b1c     10 4E 85 F1 | 	sub	fp, #16
06b20     A7 16 02 FB | 	rdlong	arg03, fp
06b24     04 4E 85 F1 | 	sub	fp, #4
06b28     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b2c     28 4E 05 C1 |  if_b	add	fp, #40
06b30     A7 20 02 CB |  if_b	rdlong	local02, fp
06b34     28 4E 85 C1 |  if_b	sub	fp, #40
06b38     FF FF 3F CF 
06b3c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06b40     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0570
06b44     0B 00 00 FF 
06b48     CC E4 85 F1 | 	sub	objptr, ##5836
06b4c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06b4c     14 4E 05 F1 | 	add	fp, #20
06b50     A7 1E 02 FB | 	rdlong	local01, fp
06b54     10 4E 85 F1 | 	sub	fp, #16
06b58     A7 20 02 FB | 	rdlong	local02, fp
06b5c     04 4E 85 F1 | 	sub	fp, #4
06b60     10 1F 0A F2 | 	cmp	local01, local02 wz
06b64     01 FA 65 56 |  if_ne	neg	result1, #1
06b68     34 02 90 5D |  if_ne	jmp	#LR__0575
06b6c     08 4E 05 F1 | 	add	fp, #8
06b70     A7 12 02 FB | 	rdlong	arg01, fp
06b74     08 4E 85 F1 | 	sub	fp, #8
06b78     01 14 66 F6 | 	neg	arg02, #1
06b7c     D0 75 B1 FD | 	call	#_pslpoke
06b80                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06b80                 | ' 
06b80                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06b80     28 4E 05 F1 | 	add	fp, #40
06b84     A7 1E 02 FB | 	rdlong	local01, fp
06b88     28 4E 85 F1 | 	sub	fp, #40
06b8c     FF FF 3F FF 
06b90     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06b94     24 4E 05 A1 |  if_e	add	fp, #36
06b98     A7 20 02 AB |  if_e	rdlong	local02, fp
06b9c     24 4E 85 A1 |  if_e	sub	fp, #36
06ba0     FF FF 7F AF 
06ba4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06ba8     88 00 90 5D |  if_ne	jmp	#LR__0571
06bac     4A 00 00 FF 
06bb0     88 E4 05 F1 | 	add	objptr, ##38024
06bb4     00 04 80 FF 
06bb8     F2 00 68 FC | 	wrlong	##524288, objptr
06bbc     07 00 00 FF 
06bc0     2C E4 85 F1 | 	sub	objptr, ##3628
06bc4     00 04 80 FF 
06bc8     F2 00 68 FC | 	wrlong	##524288, objptr
06bcc     07 00 00 FF 
06bd0     30 E4 05 F1 | 	add	objptr, ##3632
06bd4     F2 00 68 FC | 	wrlong	#0, objptr
06bd8     04 E4 05 F1 | 	add	objptr, #4
06bdc     FF FF FF FF 
06be0     F2 FE 6B FC | 	wrlong	##-1, objptr
06be4     4A 00 00 FF 
06be8     90 E4 85 F1 | 	sub	objptr, ##38032
06bec     00 12 06 F6 | 	mov	arg01, #0
06bf0     01 14 66 F6 | 	neg	arg02, #1
06bf4     58 75 B1 FD | 	call	#_pslpoke
06bf8     10 12 06 F6 | 	mov	arg01, #16
06bfc     01 14 66 F6 | 	neg	arg02, #1
06c00     4C 75 B1 FD | 	call	#_pslpoke
06c04     14 12 06 F6 | 	mov	arg01, #20
06c08     1E 14 CE F9 | 	bmask	arg02, #30
06c0c     40 75 B1 FD | 	call	#_pslpoke
06c10     50 00 00 FF 
06c14     B8 E4 05 F1 | 	add	objptr, ##41144
06c18     00 04 80 FF 
06c1c     F2 00 68 FC | 	wrlong	##524288, objptr
06c20     04 E4 05 F1 | 	add	objptr, #4
06c24     00 04 80 FF 
06c28     F2 00 68 FC | 	wrlong	##524288, objptr
06c2c     50 00 00 FF 
06c30     BC E4 85 F1 | 	sub	objptr, ##41148
06c34                 | LR__0571
06c34                 | ' 
06c34                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06c34     28 4E 05 F1 | 	add	fp, #40
06c38     A7 1E 02 FB | 	rdlong	local01, fp
06c3c     28 4E 85 F1 | 	sub	fp, #40
06c40     FF FF 3F FF 
06c44     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06c48     74 00 90 5D |  if_ne	jmp	#LR__0572
06c4c     24 4E 05 F1 | 	add	fp, #36
06c50     A7 20 02 FB | 	rdlong	local02, fp
06c54     24 4E 85 F1 | 	sub	fp, #36
06c58     FF FF 7F FF 
06c5c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06c60     5C 00 90 AD |  if_e	jmp	#LR__0572
06c64     24 4E 05 F1 | 	add	fp, #36
06c68     A7 12 02 FB | 	rdlong	arg01, fp
06c6c     24 4E 85 F1 | 	sub	fp, #36
06c70     14 12 06 F1 | 	add	arg01, #20
06c74     1E 14 CE F9 | 	bmask	arg02, #30
06c78     D4 74 B1 FD | 	call	#_pslpoke
06c7c     24 4E 05 F1 | 	add	fp, #36
06c80     A7 1E 02 FB | 	rdlong	local01, fp
06c84     4A 00 00 FF 
06c88     90 E4 05 F1 | 	add	objptr, ##38032
06c8c     F2 1E 62 FC | 	wrlong	local01, objptr
06c90     4A 00 00 FF 
06c94     90 E4 85 F1 | 	sub	objptr, ##38032
06c98     A7 12 02 FB | 	rdlong	arg01, fp
06c9c     24 4E 85 F1 | 	sub	fp, #36
06ca0     DC 75 B1 FD | 	call	#_pslpeek
06ca4     4A 00 00 FF 
06ca8     8C E4 05 F1 | 	add	objptr, ##38028
06cac     F2 FA 61 FC | 	wrlong	result1, objptr
06cb0     4A 00 00 FF 
06cb4     8C E4 85 F1 | 	sub	objptr, ##38028
06cb8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06cb8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06cb8                 | '   lastline=pslpeek(header(4))
06cb8                 | '   return 0
06cb8     00 FA 05 F6 | 	mov	result1, #0
06cbc     E0 00 90 FD | 	jmp	#LR__0575
06cc0                 | LR__0572
06cc0                 | ' 
06cc0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06cc0     28 4E 05 F1 | 	add	fp, #40
06cc4     A7 1E 02 FB | 	rdlong	local01, fp
06cc8     28 4E 85 F1 | 	sub	fp, #40
06ccc     FF FF 3F FF 
06cd0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06cd4     58 00 90 AD |  if_e	jmp	#LR__0573
06cd8     24 4E 05 F1 | 	add	fp, #36
06cdc     A7 20 02 FB | 	rdlong	local02, fp
06ce0     24 4E 85 F1 | 	sub	fp, #36
06ce4     FF FF 7F FF 
06ce8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06cec     40 00 90 5D |  if_ne	jmp	#LR__0573
06cf0     28 4E 05 F1 | 	add	fp, #40
06cf4     A7 12 02 FB | 	rdlong	arg01, fp
06cf8     28 4E 85 F1 | 	sub	fp, #40
06cfc     10 12 06 F1 | 	add	arg01, #16
06d00     01 14 66 F6 | 	neg	arg02, #1
06d04     48 74 B1 FD | 	call	#_pslpoke
06d08     28 4E 05 F1 | 	add	fp, #40
06d0c     A7 1E 02 FB | 	rdlong	local01, fp
06d10     28 4E 85 F1 | 	sub	fp, #40
06d14     4A 00 00 FF 
06d18     88 E4 05 F1 | 	add	objptr, ##38024
06d1c     F2 1E 62 FC | 	wrlong	local01, objptr
06d20     4A 00 00 FF 
06d24     88 E4 85 F1 | 	sub	objptr, ##38024
06d28                 | ' '   print "deleted first line"
06d28                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06d28                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06d28                 | '   return 0
06d28     00 FA 05 F6 | 	mov	result1, #0
06d2c     70 00 90 FD | 	jmp	#LR__0575
06d30                 | LR__0573
06d30                 | ' 
06d30                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06d30     28 4E 05 F1 | 	add	fp, #40
06d34     A7 1E 02 FB | 	rdlong	local01, fp
06d38     28 4E 85 F1 | 	sub	fp, #40
06d3c     FF FF 3F FF 
06d40     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06d44     24 4E 05 51 |  if_ne	add	fp, #36
06d48     A7 20 02 5B |  if_ne	rdlong	local02, fp
06d4c     24 4E 85 51 |  if_ne	sub	fp, #36
06d50     FF FF 7F 5F 
06d54     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06d58     40 00 90 AD |  if_e	jmp	#LR__0574
06d5c     28 4E 05 F1 | 	add	fp, #40
06d60     A7 12 02 FB | 	rdlong	arg01, fp
06d64     10 12 06 F1 | 	add	arg01, #16
06d68     04 4E 85 F1 | 	sub	fp, #4
06d6c     A7 14 02 FB | 	rdlong	arg02, fp
06d70     24 4E 85 F1 | 	sub	fp, #36
06d74     D8 73 B1 FD | 	call	#_pslpoke
06d78     24 4E 05 F1 | 	add	fp, #36
06d7c     A7 12 02 FB | 	rdlong	arg01, fp
06d80     14 12 06 F1 | 	add	arg01, #20
06d84     04 4E 05 F1 | 	add	fp, #4
06d88     A7 14 02 FB | 	rdlong	arg02, fp
06d8c     28 4E 85 F1 | 	sub	fp, #40
06d90     BC 73 B1 FD | 	call	#_pslpoke
06d94                 | '    pslpoke(header(5)+16,header(4))  
06d94                 | '    pslpoke(header(4)+20, header(5))
06d94                 | '    return 0
06d94     00 FA 05 F6 | 	mov	result1, #0
06d98     04 00 90 FD | 	jmp	#LR__0575
06d9c                 | LR__0574
06d9c     00 FA 05 F6 | 	mov	result1, #0
06da0                 | LR__0575
06da0     A7 F0 03 F6 | 	mov	ptra, fp
06da4     B2 00 A0 FD | 	call	#popregs_
06da8                 | _deleteline_ret
06da8     2D 00 64 FD | 	ret
06dac                 | 
06dac                 | ' 
06dac                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06dac                 | ' 
06dac                 | ' sub save_line
06dac                 | _save_line
06dac     03 4A 05 F6 | 	mov	COUNT_, #3
06db0     A8 00 A0 FD | 	call	#pushregs_
06db4     4A 00 00 FF 
06db8     7C E4 05 F1 | 	add	objptr, ##38012
06dbc     F2 16 02 FB | 	rdlong	arg03, objptr
06dc0     01 16 06 F1 | 	add	arg03, #1
06dc4     05 00 00 FF 
06dc8     18 E4 85 F1 | 	sub	objptr, ##2584
06dcc     F2 14 02 FB | 	rdlong	arg02, objptr
06dd0     0B 15 02 FD | 	qmul	arg02, arg03
06dd4     0E 00 00 FF 
06dd8     44 E4 85 F1 | 	sub	objptr, ##7236
06ddc     F2 12 02 FB | 	rdlong	arg01, objptr
06de0     37 00 00 FF 
06de4     20 E4 85 F1 | 	sub	objptr, ##28192
06de8     09 1F 02 F6 | 	mov	local01, arg01
06dec     18 20 62 FD | 	getqx	local02
06df0     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06df4                 | LR__0580
06df4     0F FB C9 FA | 	rdbyte	result1, local01 wz
06df8     01 1E 06 51 |  if_ne	add	local01, #1
06dfc     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06e00                 | LR__0581
06e00     09 1F 82 F1 | 	sub	local01, arg01
06e04     03 1E CE F7 | 	test	local01, #3 wz
06e08     02 1E 46 50 |  if_ne	shr	local01, #2
06e0c     01 1E 06 51 |  if_ne	add	local01, #1
06e10     02 1E 66 50 |  if_ne	shl	local01, #2
06e14     10 23 02 F6 | 	mov	local03, local02
06e18     0F 23 02 F1 | 	add	local03, local01
06e1c     43 00 00 FF 
06e20     5C E4 05 F1 | 	add	objptr, ##34396
06e24     F2 16 02 FB | 	rdlong	arg03, objptr
06e28     10 17 02 F1 | 	add	arg03, local02
06e2c     04 00 00 FF 
06e30     28 E4 05 F1 | 	add	objptr, ##2088
06e34     F2 16 62 FC | 	wrlong	arg03, objptr
06e38     04 E4 05 F1 | 	add	objptr, #4
06e3c     F2 1E 62 FC | 	wrlong	local01, objptr
06e40     0C E4 85 F1 | 	sub	objptr, #12
06e44     F2 12 02 F6 | 	mov	arg01, objptr
06e48     04 00 00 FF 
06e4c     20 E4 85 F1 | 	sub	objptr, ##2080
06e50     F2 14 02 FB | 	rdlong	arg02, objptr
06e54     10 17 02 F6 | 	mov	arg03, local02
06e58     37 00 00 FF 
06e5c     90 E5 85 F1 | 	sub	objptr, ##28560
06e60     7C 9B B1 FD | 	call	#_psram_spin2_write
06e64     2B 00 00 FF 
06e68     54 E5 05 F1 | 	add	objptr, ##22356
06e6c     F2 12 02 FB | 	rdlong	arg01, objptr
06e70     0C 00 00 FF 
06e74     3C E4 05 F1 | 	add	objptr, ##6204
06e78     F2 14 02 FB | 	rdlong	arg02, objptr
06e7c     10 15 02 F1 | 	add	arg02, local02
06e80     0F 17 02 F6 | 	mov	arg03, local01
06e84     37 00 00 FF 
06e88     90 E5 85 F1 | 	sub	objptr, ##28560
06e8c     50 9B B1 FD | 	call	#_psram_spin2_write
06e90     37 00 00 FF 
06e94     90 E5 05 F1 | 	add	objptr, ##28560
06e98     F2 1E 02 FB | 	rdlong	local01, objptr
06e9c     11 1F 02 F1 | 	add	local01, local03
06ea0     F2 1E 62 FC | 	wrlong	local01, objptr
06ea4     43 00 00 FF 
06ea8     5C E4 85 F1 | 	sub	objptr, ##34396
06eac     A7 F0 03 F6 | 	mov	ptra, fp
06eb0     B2 00 A0 FD | 	call	#popregs_
06eb4                 | _save_line_ret
06eb4     2D 00 64 FD | 	ret
06eb8                 | 
06eb8                 | ' 
06eb8                 | ' '----- Insert a new line into the middle of the program
06eb8                 | ' 
06eb8                 | ' function insertline(aline as ulong) as integer
06eb8                 | _insertline
06eb8     02 4A 05 F6 | 	mov	COUNT_, #2
06ebc     A8 00 A0 FD | 	call	#pushregs_
06ec0     28 F0 07 F1 | 	add	ptra, #40
06ec4     04 4E 05 F1 | 	add	fp, #4
06ec8     A7 12 62 FC | 	wrlong	arg01, fp
06ecc     4A 00 00 FF 
06ed0     88 E4 05 F1 | 	add	objptr, ##38024
06ed4     F2 1E 02 FB | 	rdlong	local01, objptr
06ed8     04 4E 05 F1 | 	add	fp, #4
06edc     A7 1E 62 FC | 	wrlong	local01, fp
06ee0     08 4E 85 F1 | 	sub	fp, #8
06ee4                 | ' 
06ee4                 | ' do
06ee4     3E 00 00 FF 
06ee8     BC E5 85 F1 | 	sub	objptr, ##32188
06eec                 | LR__0590
06eec     10 4E 05 F1 | 	add	fp, #16
06ef0     A7 12 02 F6 | 	mov	arg01, fp
06ef4     08 4E 85 F1 | 	sub	fp, #8
06ef8     A7 14 02 FB | 	rdlong	arg02, fp
06efc     08 4E 85 F1 | 	sub	fp, #8
06f00     18 16 06 F6 | 	mov	arg03, #24
06f04     3C 9A B1 FD | 	call	#_psram_spin2_read1
06f08     08 4E 05 F1 | 	add	fp, #8
06f0c     A7 1E 02 FB | 	rdlong	local01, fp
06f10     04 4E 05 F1 | 	add	fp, #4
06f14     A7 1E 62 FC | 	wrlong	local01, fp
06f18     18 4E 05 F1 | 	add	fp, #24
06f1c     A7 1E 02 FB | 	rdlong	local01, fp
06f20     1C 4E 85 F1 | 	sub	fp, #28
06f24     A7 1E 62 FC | 	wrlong	local01, fp
06f28     08 4E 05 F1 | 	add	fp, #8
06f2c     A7 1E 02 FB | 	rdlong	local01, fp
06f30     0C 4E 85 F1 | 	sub	fp, #12
06f34     A7 16 02 FB | 	rdlong	arg03, fp
06f38     04 4E 85 F1 | 	sub	fp, #4
06f3c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06f40     24 4E 05 C1 |  if_b	add	fp, #36
06f44     A7 20 02 CB |  if_b	rdlong	local02, fp
06f48     24 4E 85 C1 |  if_b	sub	fp, #36
06f4c     FF FF 3F CF 
06f50     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06f54     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06f58     0B 00 00 FF 
06f5c     CC E4 85 F1 | 	sub	objptr, ##5836
06f60                 | ' 
06f60                 | ' if header(0)=aline then return -1 				' delete it first
06f60     10 4E 05 F1 | 	add	fp, #16
06f64     A7 1E 02 FB | 	rdlong	local01, fp
06f68     0C 4E 85 F1 | 	sub	fp, #12
06f6c     A7 20 02 FB | 	rdlong	local02, fp
06f70     04 4E 85 F1 | 	sub	fp, #4
06f74     10 1F 0A F2 | 	cmp	local01, local02 wz
06f78     01 FA 65 A6 |  if_e	neg	result1, #1
06f7c     48 01 90 AD |  if_e	jmp	#LR__0593
06f80                 | ' if header(0)<aline then return -2 				' end of program reached
06f80     10 4E 05 F1 | 	add	fp, #16
06f84     A7 1E 02 FB | 	rdlong	local01, fp
06f88     0C 4E 85 F1 | 	sub	fp, #12
06f8c     A7 16 02 FB | 	rdlong	arg03, fp
06f90     04 4E 85 F1 | 	sub	fp, #4
06f94     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06f98     02 FA 65 C6 |  if_b	neg	result1, #2
06f9c     28 01 90 CD |  if_b	jmp	#LR__0593
06fa0                 | ' 
06fa0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06fa0     20 4E 05 F1 | 	add	fp, #32
06fa4     A7 1E 02 FB | 	rdlong	local01, fp
06fa8     20 4E 85 F1 | 	sub	fp, #32
06fac     FF FF 7F FF 
06fb0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06fb4     78 00 90 5D |  if_ne	jmp	#LR__0591
06fb8     43 00 00 FF 
06fbc     5C E4 05 F1 | 	add	objptr, ##34396
06fc0     F2 1E 02 FB | 	rdlong	local01, objptr
06fc4     07 00 00 FF 
06fc8     2C E4 05 F1 | 	add	objptr, ##3628
06fcc     F2 1E 62 FC | 	wrlong	local01, objptr
06fd0     0C 4E 05 F1 | 	add	fp, #12
06fd4     A7 12 02 FB | 	rdlong	arg01, fp
06fd8     0C 4E 85 F1 | 	sub	fp, #12
06fdc     10 12 06 F1 | 	add	arg01, #16
06fe0     07 00 00 FF 
06fe4     2C E4 85 F1 | 	sub	objptr, ##3628
06fe8     F2 14 02 FB | 	rdlong	arg02, objptr
06fec     43 00 00 FF 
06ff0     5C E4 85 F1 | 	sub	objptr, ##34396
06ff4     58 71 B1 FD | 	call	#_pslpoke
06ff8     47 00 00 FF 
06ffc     8C E4 05 F1 | 	add	objptr, ##36492
07000     FF FF FF FF 
07004     F2 FE 6B FC | 	wrlong	##-1, objptr
07008     0C 4E 05 F1 | 	add	fp, #12
0700c     A7 1E 02 FB | 	rdlong	local01, fp
07010     0C 4E 85 F1 | 	sub	fp, #12
07014     04 E4 05 F1 | 	add	objptr, #4
07018     F2 1E 62 FC | 	wrlong	local01, objptr
0701c     47 00 00 FF 
07020     90 E4 85 F1 | 	sub	objptr, ##36496
07024     84 FD BF FD | 	call	#_save_line
07028                 | '   programstart=programptr
07028                 | '   pslpoke(lineptr2+16,programptr)
07028                 | '   ucompiledline(4)=$FFFF_FFFF
07028                 | '   ucompiledline(5)=lineptr2
07028                 | '   save_line
07028                 | '   return 0
07028     00 FA 05 F6 | 	mov	result1, #0
0702c     98 00 90 FD | 	jmp	#LR__0593
07030                 | LR__0591
07030                 | ' 
07030                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07030     20 4E 05 F1 | 	add	fp, #32
07034     A7 1E 02 FB | 	rdlong	local01, fp
07038     20 4E 85 F1 | 	sub	fp, #32
0703c     FF FF 7F FF 
07040     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
07044     7C 00 90 AD |  if_e	jmp	#LR__0592
07048     20 4E 05 F1 | 	add	fp, #32
0704c     A7 1E 02 FB | 	rdlong	local01, fp
07050     47 00 00 FF 
07054     8C E4 05 F1 | 	add	objptr, ##36492
07058     F2 1E 62 FC | 	wrlong	local01, objptr
0705c     14 4E 85 F1 | 	sub	fp, #20
07060     A7 1E 02 FB | 	rdlong	local01, fp
07064     04 E4 05 F1 | 	add	objptr, #4
07068     F2 1E 62 FC | 	wrlong	local01, objptr
0706c     A7 12 02 FB | 	rdlong	arg01, fp
07070     0C 4E 85 F1 | 	sub	fp, #12
07074     10 12 06 F1 | 	add	arg01, #16
07078     04 00 00 FF 
0707c     34 E4 85 F1 | 	sub	objptr, ##2100
07080     F2 14 02 FB | 	rdlong	arg02, objptr
07084     43 00 00 FF 
07088     5C E4 85 F1 | 	sub	objptr, ##34396
0708c     C0 70 B1 FD | 	call	#_pslpoke
07090     20 4E 05 F1 | 	add	fp, #32
07094     A7 12 02 FB | 	rdlong	arg01, fp
07098     20 4E 85 F1 | 	sub	fp, #32
0709c     14 12 06 F1 | 	add	arg01, #20
070a0     43 00 00 FF 
070a4     5C E4 05 F1 | 	add	objptr, ##34396
070a8     F2 14 02 FB | 	rdlong	arg02, objptr
070ac     43 00 00 FF 
070b0     5C E4 85 F1 | 	sub	objptr, ##34396
070b4     98 70 B1 FD | 	call	#_pslpoke
070b8     F0 FC BF FD | 	call	#_save_line
070bc                 | '   ucompiledline(4)=header(4)
070bc                 | '   ucompiledline(5)=lineptr2
070bc                 | '   pslpoke(lineptr2+16,programptr)
070bc                 | '   pslpoke(header(4)+20,programptr)
070bc                 | '   save_line
070bc                 | '   return 0
070bc     00 FA 05 F6 | 	mov	result1, #0
070c0     04 00 90 FD | 	jmp	#LR__0593
070c4                 | LR__0592
070c4     00 FA 05 F6 | 	mov	result1, #0
070c8                 | LR__0593
070c8     A7 F0 03 F6 | 	mov	ptra, fp
070cc     B2 00 A0 FD | 	call	#popregs_
070d0                 | _insertline_ret
070d0     2D 00 64 FD | 	ret
070d4                 | 
070d4                 | ' 
070d4                 | ' '----- Adds a new line at the end of the program
070d4                 | ' 
070d4                 | ' sub add_line_at_end(aline) 
070d4                 | _add_line_at_end
070d4     4A 00 00 FF 
070d8     8C E4 05 F1 | 	add	objptr, ##38028
070dc     F2 12 62 FC | 	wrlong	arg01, objptr
070e0     04 E4 05 F1 | 	add	objptr, #4
070e4     F2 14 02 FB | 	rdlong	arg02, objptr
070e8     03 00 00 FF 
070ec     04 E4 85 F1 | 	sub	objptr, ##1540
070f0     F2 14 62 FC | 	wrlong	arg02, objptr
070f4     03 00 00 FF 
070f8     04 E4 05 F1 | 	add	objptr, ##1540
070fc     F2 12 02 FB | 	rdlong	arg01, objptr
07100     14 12 06 F1 | 	add	arg01, #20
07104     07 00 00 FF 
07108     34 E4 85 F1 | 	sub	objptr, ##3636
0710c     F2 14 02 FB | 	rdlong	arg02, objptr
07110     43 00 00 FF 
07114     5C E4 85 F1 | 	sub	objptr, ##34396
07118     34 70 B1 FD | 	call	#_pslpoke
0711c     43 00 00 FF 
07120     5C E4 05 F1 | 	add	objptr, ##34396
07124     F2 14 02 FB | 	rdlong	arg02, objptr
07128     07 00 00 FF 
0712c     34 E4 05 F1 | 	add	objptr, ##3636
07130     F2 14 62 FC | 	wrlong	arg02, objptr
07134     03 00 00 FF 
07138     00 E4 85 F1 | 	sub	objptr, ##1536
0713c     FF FF BF FF 
07140     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07144                 | ' 
07144                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07144                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07144     04 00 00 FF 
07148     34 E4 85 F1 | 	sub	objptr, ##2100
0714c     F2 14 02 FB | 	rdlong	arg02, objptr
07150     43 00 00 FF 
07154     5C E4 85 F1 | 	sub	objptr, ##34396
07158     00 04 00 FF 
0715c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07160     47 00 00 AF 
07164     8C E4 05 A1 |  if_e	add	objptr, ##36492
07168     FF FF FF AF 
0716c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07170     47 00 00 AF 
07174     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07178     30 FC BF FD | 	call	#_save_line
0717c     43 00 00 FF 
07180     5C E4 05 F1 | 	add	objptr, ##34396
07184     F2 12 02 FB | 	rdlong	arg01, objptr
07188     43 00 00 FF 
0718c     5C E4 85 F1 | 	sub	objptr, ##34396
07190     01 14 66 F6 | 	neg	arg02, #1
07194     B8 6F B1 FD | 	call	#_pslpoke
07198                 | _add_line_at_end_ret
07198     2D 00 64 FD | 	ret
0719c                 | 
0719c                 | ' 
0719c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0719c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
0719c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0719c                 | ' 
0719c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0719c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
0719c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0719c                 | ' 
0719c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
0719c                 | ' 
0719c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
0719c                 | _compile_immediate
0719c     0A 4A 05 F6 | 	mov	COUNT_, #10
071a0     A8 00 A0 FD | 	call	#pushregs_
071a4                 | _compile_immediate_enter
071a4     09 25 02 F6 | 	mov	local04, arg01
071a8     0A 27 02 F6 | 	mov	local05, arg02
071ac     00 28 06 F6 | 	mov	local06, #0
071b0     00 2A 06 F6 | 	mov	local07, #0
071b4     00 2C 06 F6 | 	mov	local08, #0
071b8                 | ' 
071b8                 | ' ' linetype=cont+1
071b8                 | ' ' 1 : this is the first part of the line that will continue
071b8                 | ' ' 2 - this is the continuation of the line
071b8                 | ' ' 3 - this is the last continued line
071b8                 | ' ' 4 - this is the one and only part
071b8                 | ' ' 5 - continued after if/else
071b8                 | ' 
071b8                 | ' err=0
071b8                 | ' cmd=0
071b8                 | ' vars=0
071b8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
071b8     02 24 0E F2 | 	cmp	local04, #2 wz
071bc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
071c0     24 00 90 5D |  if_ne	jmp	#LR__0600
071c4     35 00 00 FF 
071c8     10 E4 05 F1 | 	add	objptr, ##27152
071cc     F2 2A 02 FB | 	rdlong	local07, objptr
071d0     01 2E 06 F6 | 	mov	local09, #1
071d4     02 00 00 FF 
071d8     34 E4 05 F1 | 	add	objptr, ##1076
071dc     F2 02 68 FC | 	wrlong	#1, objptr
071e0     37 00 00 FF 
071e4     44 E4 85 F1 | 	sub	objptr, ##28228
071e8                 | LR__0600
071e8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
071e8     04 24 0E F2 | 	cmp	local04, #4 wz
071ec     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
071f0     30 00 90 5D |  if_ne	jmp	#LR__0601
071f4     35 00 00 FF 
071f8     18 E4 05 F1 | 	add	objptr, ##27160
071fc     F2 2A 02 FB | 	rdlong	local07, objptr
07200     02 2E 06 F6 | 	mov	local09, #2
07204     02 00 00 FF 
07208     2C E4 05 F1 | 	add	objptr, ##1068
0720c     F2 04 68 FC | 	wrlong	#2, objptr
07210     13 00 00 FF 
07214     38 E4 05 F1 | 	add	objptr, ##9784
07218     F2 04 68 FC | 	wrlong	#2, objptr
0721c     4A 00 00 FF 
07220     7C E4 85 F1 | 	sub	objptr, ##38012
07224                 | LR__0601
07224                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07224     05 24 0E F2 | 	cmp	local04, #5 wz
07228     40 00 90 5D |  if_ne	jmp	#LR__0602
0722c     37 00 00 FF 
07230     44 E4 05 F1 | 	add	objptr, ##28228
07234     F2 FC 01 FB | 	rdlong	result2, objptr
07238     FE 2E 02 F6 | 	mov	local09, result2
0723c     03 2E 66 F0 | 	shl	local09, #3
07240     02 00 00 FF 
07244     38 E4 85 F1 | 	sub	objptr, ##1080
07248     F2 2E 02 F1 | 	add	local09, objptr
0724c     04 2E 06 F1 | 	add	local09, #4
07250     17 2B 02 FB | 	rdlong	local07, local09
07254     01 FC 05 F1 | 	add	result2, #1
07258     02 00 00 FF 
0725c     38 E4 05 F1 | 	add	objptr, ##1080
07260     F2 FC 61 FC | 	wrlong	result2, objptr
07264     37 00 00 FF 
07268     44 E4 85 F1 | 	sub	objptr, ##28228
0726c                 | LR__0602
0726c                 | ' 
0726c                 | ' 'print  "In compile_immediate cmd=:", cmd
0726c                 | ' 451 select case cmd
0726c     5C 2A 0E F2 | 	cmp	local07, #92 wz
07270     98 02 90 AD |  if_e	jmp	#LR__0603
07274     47 2A 0E F2 | 	cmp	local07, #71 wz
07278     9C 02 90 AD |  if_e	jmp	#LR__0604
0727c     59 2A 0E F2 | 	cmp	local07, #89 wz
07280     A4 02 90 AD |  if_e	jmp	#LR__0605
07284     C3 2A 0E F2 | 	cmp	local07, #195 wz
07288     AC 02 90 AD |  if_e	jmp	#LR__0606
0728c     45 2A 0E F2 | 	cmp	local07, #69 wz
07290     B0 02 90 AD |  if_e	jmp	#LR__0607
07294     69 2A 0E F2 | 	cmp	local07, #105 wz
07298     B8 02 90 AD |  if_e	jmp	#LR__0608
0729c     40 2A 0E F2 | 	cmp	local07, #64 wz
072a0     64 06 90 AD |  if_e	jmp	#LR__0678
072a4     B4 2A 0E F2 | 	cmp	local07, #180 wz
072a8     B4 02 90 AD |  if_e	jmp	#LR__0609
072ac     49 2A 0E F2 | 	cmp	local07, #73 wz
072b0     B8 02 90 AD |  if_e	jmp	#LR__0610
072b4     50 2A 0E F2 | 	cmp	local07, #80 wz
072b8     BC 02 90 AD |  if_e	jmp	#LR__0611
072bc     AE 2A 0E F2 | 	cmp	local07, #174 wz
072c0     C4 02 90 AD |  if_e	jmp	#LR__0612
072c4     B0 2A 0E F2 | 	cmp	local07, #176 wz
072c8     C8 02 90 AD |  if_e	jmp	#LR__0613
072cc     AF 2A 0E F2 | 	cmp	local07, #175 wz
072d0     CC 02 90 AD |  if_e	jmp	#LR__0614
072d4     B1 2A 0E F2 | 	cmp	local07, #177 wz
072d8     D0 02 90 AD |  if_e	jmp	#LR__0615
072dc     68 2A 0E F2 | 	cmp	local07, #104 wz
072e0     D4 02 90 AD |  if_e	jmp	#LR__0616
072e4     74 2A 0E F2 | 	cmp	local07, #116 wz
072e8     D8 02 90 AD |  if_e	jmp	#LR__0617
072ec     73 2A 0E F2 | 	cmp	local07, #115 wz
072f0     E0 02 90 AD |  if_e	jmp	#LR__0618
072f4     6C 2A 0E F2 | 	cmp	local07, #108 wz
072f8     E8 02 90 AD |  if_e	jmp	#LR__0619
072fc     89 2A 0E F2 | 	cmp	local07, #137 wz
07300     04 06 90 AD |  if_e	jmp	#LR__0678
07304     C2 2A 0E F2 | 	cmp	local07, #194 wz
07308     E8 02 90 AD |  if_e	jmp	#LR__0620
0730c     72 2A 0E F2 | 	cmp	local07, #114 wz
07310     EC 02 90 AD |  if_e	jmp	#LR__0621
07314     5D 2A 0E F2 | 	cmp	local07, #93 wz
07318     F0 02 90 AD |  if_e	jmp	#LR__0622
0731c     96 2A 0E F2 | 	cmp	local07, #150 wz
07320     F8 02 90 AD |  if_e	jmp	#LR__0623
07324     43 2A 0E F2 | 	cmp	local07, #67 wz
07328     FC 02 90 AD |  if_e	jmp	#LR__0624
0732c     5A 2A 0E F2 | 	cmp	local07, #90 wz
07330     04 03 90 AD |  if_e	jmp	#LR__0625
07334     AB 2A 0E F2 | 	cmp	local07, #171 wz
07338     CC 05 90 AD |  if_e	jmp	#LR__0678
0733c     BD 2A 0E F2 | 	cmp	local07, #189 wz
07340     04 03 90 AD |  if_e	jmp	#LR__0626
07344     BB 2A 0E F2 | 	cmp	local07, #187 wz
07348     0C 03 90 AD |  if_e	jmp	#LR__0627
0734c     4E 2A 0E F2 | 	cmp	local07, #78 wz
07350     14 03 90 AD |  if_e	jmp	#LR__0628
07354     A9 2A 0E F2 | 	cmp	local07, #169 wz
07358     2C 03 90 AD |  if_e	jmp	#LR__0630
0735c     46 2A 0E F2 | 	cmp	local07, #70 wz
07360     44 03 90 AD |  if_e	jmp	#LR__0632
07364     71 2A 0E F2 | 	cmp	local07, #113 wz
07368     4C 03 90 AD |  if_e	jmp	#LR__0633
0736c     60 2A 0E F2 | 	cmp	local07, #96 wz
07370     50 03 90 AD |  if_e	jmp	#LR__0634
07374     4A 2A 0E F2 | 	cmp	local07, #74 wz
07378     54 03 90 AD |  if_e	jmp	#LR__0635
0737c     48 2A 0E F2 | 	cmp	local07, #72 wz
07380     58 03 90 AD |  if_e	jmp	#LR__0636
07384     58 2A 0E F2 | 	cmp	local07, #88 wz
07388     60 03 90 AD |  if_e	jmp	#LR__0637
0738c     5F 2A 0E F2 | 	cmp	local07, #95 wz
07390     68 03 90 AD |  if_e	jmp	#LR__0638
07394     8A 2A 0E F2 | 	cmp	local07, #138 wz
07398     6C 03 90 AD |  if_e	jmp	#LR__0639
0739c     4C 2A 0E F2 | 	cmp	local07, #76 wz
073a0     70 03 90 AD |  if_e	jmp	#LR__0640
073a4     52 2A 0E F2 | 	cmp	local07, #82 wz
073a8     78 03 90 AD |  if_e	jmp	#LR__0641
073ac     97 2A 0E F2 | 	cmp	local07, #151 wz
073b0     80 03 90 AD |  if_e	jmp	#LR__0642
073b4     C6 2A 0E F2 | 	cmp	local07, #198 wz
073b8     84 03 90 AD |  if_e	jmp	#LR__0643
073bc     61 2A 0E F2 | 	cmp	local07, #97 wz
073c0     88 03 90 AD |  if_e	jmp	#LR__0644
073c4     63 2A 0E F2 | 	cmp	local07, #99 wz
073c8     8C 03 90 AD |  if_e	jmp	#LR__0645
073cc     41 2A 0E F2 | 	cmp	local07, #65 wz
073d0     34 05 90 AD |  if_e	jmp	#LR__0678
073d4     4B 2A 0E F2 | 	cmp	local07, #75 wz
073d8     88 03 90 AD |  if_e	jmp	#LR__0646
073dc     B3 2A 0E F2 | 	cmp	local07, #179 wz
073e0     8C 03 90 AD |  if_e	jmp	#LR__0647
073e4     5E 2A 0E F2 | 	cmp	local07, #94 wz
073e8     90 03 90 AD |  if_e	jmp	#LR__0648
073ec     7C 2A 0E F2 | 	cmp	local07, #124 wz
073f0     94 03 90 AD |  if_e	jmp	#LR__0649
073f4     7D 2A 0E F2 | 	cmp	local07, #125 wz
073f8     98 03 90 AD |  if_e	jmp	#LR__0650
073fc     7E 2A 0E F2 | 	cmp	local07, #126 wz
07400     9C 03 90 AD |  if_e	jmp	#LR__0651
07404     7F 2A 0E F2 | 	cmp	local07, #127 wz
07408     A0 03 90 AD |  if_e	jmp	#LR__0652
0740c     80 2A 0E F2 | 	cmp	local07, #128 wz
07410     A4 03 90 AD |  if_e	jmp	#LR__0653
07414     55 2A 0E F2 | 	cmp	local07, #85 wz
07418     A8 03 90 AD |  if_e	jmp	#LR__0654
0741c     75 2A 0E F2 | 	cmp	local07, #117 wz
07420     AC 03 90 AD |  if_e	jmp	#LR__0655
07424     42 2A 0E F2 | 	cmp	local07, #66 wz
07428     B4 03 90 AD |  if_e	jmp	#LR__0656
0742c     95 2A 0E F2 | 	cmp	local07, #149 wz
07430     BC 03 90 AD |  if_e	jmp	#LR__0657
07434     AC 2A 0E F2 | 	cmp	local07, #172 wz
07438     CC 04 90 AD |  if_e	jmp	#LR__0678
0743c     81 2A 0E F2 | 	cmp	local07, #129 wz
07440     B8 03 90 AD |  if_e	jmp	#LR__0658
07444     44 2A 0E F2 | 	cmp	local07, #68 wz
07448     BC 03 90 AD |  if_e	jmp	#LR__0659
0744c     BC 2A 0E F2 | 	cmp	local07, #188 wz
07450     C0 03 90 AD |  if_e	jmp	#LR__0660
07454     88 2A 0E F2 | 	cmp	local07, #136 wz
07458     AC 04 90 AD |  if_e	jmp	#LR__0678
0745c     92 2A 0E F2 | 	cmp	local07, #146 wz
07460     C0 03 90 AD |  if_e	jmp	#LR__0661
07464     BE 2A 0E F2 | 	cmp	local07, #190 wz
07468     58 05 90 AD |  if_e	jmp	#LR__0679
0746c     AA 2A 0E F2 | 	cmp	local07, #170 wz
07470     94 04 90 AD |  if_e	jmp	#LR__0678
07474     4D 2A 0E F2 | 	cmp	local07, #77 wz
07478     B4 03 90 AD |  if_e	jmp	#LR__0662
0747c     51 2A 0E F2 | 	cmp	local07, #81 wz
07480     BC 03 90 AD |  if_e	jmp	#LR__0663
07484     8E 2A 0E F2 | 	cmp	local07, #142 wz
07488     C4 03 90 AD |  if_e	jmp	#LR__0664
0748c     90 2A 0E F2 | 	cmp	local07, #144 wz
07490     C8 03 90 AD |  if_e	jmp	#LR__0665
07494     8D 2A 0E F2 | 	cmp	local07, #141 wz
07498     CC 03 90 AD |  if_e	jmp	#LR__0666
0749c     8C 2A 0E F2 | 	cmp	local07, #140 wz
074a0     D0 03 90 AD |  if_e	jmp	#LR__0667
074a4     91 2A 0E F2 | 	cmp	local07, #145 wz
074a8     D4 03 90 AD |  if_e	jmp	#LR__0668
074ac     8B 2A 0E F2 | 	cmp	local07, #139 wz
074b0     D8 03 90 AD |  if_e	jmp	#LR__0669
074b4     8F 2A 0E F2 | 	cmp	local07, #143 wz
074b8     DC 03 90 AD |  if_e	jmp	#LR__0670
074bc     B2 2A 0E F2 | 	cmp	local07, #178 wz
074c0     E0 03 90 AD |  if_e	jmp	#LR__0671
074c4     6D 2A 0E F2 | 	cmp	local07, #109 wz
074c8     E8 03 90 AD |  if_e	jmp	#LR__0672
074cc     70 2A 0E F2 | 	cmp	local07, #112 wz
074d0     34 04 90 AD |  if_e	jmp	#LR__0678
074d4     56 2A 0E F2 | 	cmp	local07, #86 wz
074d8     E4 03 90 AD |  if_e	jmp	#LR__0673
074dc     57 2A 0E F2 | 	cmp	local07, #87 wz
074e0     24 04 90 AD |  if_e	jmp	#LR__0678
074e4     79 2A 0E F2 | 	cmp	local07, #121 wz
074e8     E0 03 90 AD |  if_e	jmp	#LR__0674
074ec     77 2A 0E F2 | 	cmp	local07, #119 wz
074f0     E4 03 90 AD |  if_e	jmp	#LR__0675
074f4     78 2A 0E F2 | 	cmp	local07, #120 wz
074f8     E8 03 90 AD |  if_e	jmp	#LR__0676
074fc     01 00 00 FF 
07500     04 2A 0E F2 | 	cmp	local07, ##516 wz
07504     E8 03 90 AD |  if_e	jmp	#LR__0677
07508     B8 04 90 FD | 	jmp	#LR__0679
0750c                 | LR__0603
0750c     04 0B B0 FD | 	call	#_compile_fun_2p
07510     FD 28 02 F6 | 	mov	local06, result1
07514     F0 03 90 FD | 	jmp	#LR__0678
07518                 | LR__0604
07518     C8 0D B0 FD | 	call	#_compile_fun_varp
0751c     FD 2C 02 F6 | 	mov	local08, result1
07520     FE 28 02 F6 | 	mov	local06, result2
07524     E0 03 90 FD | 	jmp	#LR__0678
07528                 | LR__0605
07528     B8 0D B0 FD | 	call	#_compile_fun_varp
0752c     FD 2C 02 F6 | 	mov	local08, result1
07530     FE 28 02 F6 | 	mov	local06, result2
07534     D0 03 90 FD | 	jmp	#LR__0678
07538                 | LR__0606
07538                 | ' return expr()
07538     80 2A B0 FD | 	call	#_expr
0753c     FD 28 02 F6 | 	mov	local06, result1
07540     C4 03 90 FD | 	jmp	#LR__0678
07544                 | LR__0607
07544     9C 0D B0 FD | 	call	#_compile_fun_varp
07548     FD 2C 02 F6 | 	mov	local08, result1
0754c     FE 28 02 F6 | 	mov	local06, result2
07550     B4 03 90 FD | 	jmp	#LR__0678
07554                 | LR__0608
07554                 | ' return expr()
07554     64 2A B0 FD | 	call	#_expr
07558     FD 28 02 F6 | 	mov	local06, result1
0755c     A8 03 90 FD | 	jmp	#LR__0678
07560                 | LR__0609
07560                 | ' return expr()
07560     58 2A B0 FD | 	call	#_expr
07564     FD 28 02 F6 | 	mov	local06, result1
07568     9C 03 90 FD | 	jmp	#LR__0678
0756c                 | LR__0610
0756c                 | ' return expr()
0756c     4C 2A B0 FD | 	call	#_expr
07570     FD 28 02 F6 | 	mov	local06, result1
07574     90 03 90 FD | 	jmp	#LR__0678
07578                 | LR__0611
07578     68 0D B0 FD | 	call	#_compile_fun_varp
0757c     FD 2C 02 F6 | 	mov	local08, result1
07580     FE 28 02 F6 | 	mov	local06, result2
07584     80 03 90 FD | 	jmp	#LR__0678
07588                 | LR__0612
07588     88 0A B0 FD | 	call	#_compile_fun_2p
0758c     FD 28 02 F6 | 	mov	local06, result1
07590     74 03 90 FD | 	jmp	#LR__0678
07594                 | LR__0613
07594     7C 0A B0 FD | 	call	#_compile_fun_2p
07598     FD 28 02 F6 | 	mov	local06, result1
0759c     68 03 90 FD | 	jmp	#LR__0678
075a0                 | LR__0614
075a0     70 0A B0 FD | 	call	#_compile_fun_2p
075a4     FD 28 02 F6 | 	mov	local06, result1
075a8     5C 03 90 FD | 	jmp	#LR__0678
075ac                 | LR__0615
075ac     64 0A B0 FD | 	call	#_compile_fun_2p
075b0     FD 28 02 F6 | 	mov	local06, result1
075b4     50 03 90 FD | 	jmp	#LR__0678
075b8                 | LR__0616
075b8                 | ' return expr()
075b8     00 2A B0 FD | 	call	#_expr
075bc     FD 28 02 F6 | 	mov	local06, result1
075c0     44 03 90 FD | 	jmp	#LR__0678
075c4                 | LR__0617
075c4     1C 0D B0 FD | 	call	#_compile_fun_varp
075c8     FD 2C 02 F6 | 	mov	local08, result1
075cc     FE 28 02 F6 | 	mov	local06, result2
075d0     34 03 90 FD | 	jmp	#LR__0678
075d4                 | LR__0618
075d4     0C 0D B0 FD | 	call	#_compile_fun_varp
075d8     FD 2C 02 F6 | 	mov	local08, result1
075dc     FE 28 02 F6 | 	mov	local06, result2
075e0     24 03 90 FD | 	jmp	#LR__0678
075e4                 | LR__0619
075e4     FC 0C B0 FD | 	call	#_compile_fun_varp
075e8     FD 2C 02 F6 | 	mov	local08, result1
075ec     FE 28 02 F6 | 	mov	local06, result2
075f0     14 03 90 FD | 	jmp	#LR__0678
075f4                 | LR__0620
075f4                 | ' return expr()
075f4     C4 29 B0 FD | 	call	#_expr
075f8     FD 28 02 F6 | 	mov	local06, result1
075fc     08 03 90 FD | 	jmp	#LR__0678
07600                 | LR__0621
07600     B4 19 B0 FD | 	call	#_compile_dim
07604     FD 28 02 F6 | 	mov	local06, result1
07608     B8 03 90 FD | 	jmp	#LR__0679
0760c                 | LR__0622
0760c     D4 0C B0 FD | 	call	#_compile_fun_varp
07610     FD 2C 02 F6 | 	mov	local08, result1
07614     FE 28 02 F6 | 	mov	local06, result2
07618     EC 02 90 FD | 	jmp	#LR__0678
0761c                 | LR__0623
0761c     F4 09 B0 FD | 	call	#_compile_fun_2p
07620     FD 28 02 F6 | 	mov	local06, result1
07624     E0 02 90 FD | 	jmp	#LR__0678
07628                 | LR__0624
07628     B8 0C B0 FD | 	call	#_compile_fun_varp
0762c     FD 2C 02 F6 | 	mov	local08, result1
07630     FE 28 02 F6 | 	mov	local06, result2
07634     D0 02 90 FD | 	jmp	#LR__0678
07638                 | LR__0625
07638     13 13 02 F6 | 	mov	arg01, local05
0763c     40 18 B0 FD | 	call	#_compile_else
07640     FD 28 02 F6 | 	mov	local06, result1
07644     7C 03 90 FD | 	jmp	#LR__0679
07648                 | LR__0626
07648     98 0C B0 FD | 	call	#_compile_fun_varp
0764c     FD 2C 02 F6 | 	mov	local08, result1
07650     FE 28 02 F6 | 	mov	local06, result2
07654     B0 02 90 FD | 	jmp	#LR__0678
07658                 | LR__0627
07658     88 0C B0 FD | 	call	#_compile_fun_varp
0765c     FD 2C 02 F6 | 	mov	local08, result1
07660     FE 28 02 F6 | 	mov	local06, result2
07664     A0 02 90 FD | 	jmp	#LR__0678
07668                 | LR__0628
07668     01 26 16 F2 | 	cmp	local05, #1 wc
0766c     08 00 90 CD |  if_b	jmp	#LR__0629
07670     58 25 B0 FD | 	call	#_compile_goto
07674     4C 03 90 FD | 	jmp	#LR__0679
07678                 | LR__0629
07678     19 12 06 F6 | 	mov	arg01, #25
0767c     00 14 06 F6 | 	mov	arg02, #0
07680     40 69 B1 FD | 	call	#_printerror
07684     3C 03 90 FD | 	jmp	#LR__0679
07688                 | LR__0630
07688     01 26 16 F2 | 	cmp	local05, #1 wc
0768c     08 00 90 CD |  if_b	jmp	#LR__0631
07690     D4 24 B0 FD | 	call	#_compile_gosub
07694     2C 03 90 FD | 	jmp	#LR__0679
07698                 | LR__0631
07698     19 12 06 F6 | 	mov	arg01, #25
0769c     00 14 06 F6 | 	mov	arg02, #0
076a0     20 69 B1 FD | 	call	#_printerror
076a4     1C 03 90 FD | 	jmp	#LR__0679
076a8                 | LR__0632
076a8     38 0C B0 FD | 	call	#_compile_fun_varp
076ac     FD 2C 02 F6 | 	mov	local08, result1
076b0     FE 28 02 F6 | 	mov	local06, result2
076b4     50 02 90 FD | 	jmp	#LR__0678
076b8                 | LR__0633
076b8     D0 0A B0 FD | 	call	#_compile_fun_4p
076bc     FD 28 02 F6 | 	mov	local06, result1
076c0     44 02 90 FD | 	jmp	#LR__0678
076c4                 | LR__0634
076c4                 | ' return expr()
076c4     F4 28 B0 FD | 	call	#_expr
076c8     FD 28 02 F6 | 	mov	local06, result1
076cc     38 02 90 FD | 	jmp	#LR__0678
076d0                 | LR__0635
076d0     B8 1F B0 FD | 	call	#_compile_for
076d4     FD 28 02 F6 | 	mov	local06, result1
076d8     E8 02 90 FD | 	jmp	#LR__0679
076dc                 | LR__0636
076dc     04 0C B0 FD | 	call	#_compile_fun_varp
076e0     FD 2C 02 F6 | 	mov	local08, result1
076e4     FE 28 02 F6 | 	mov	local06, result2
076e8     1C 02 90 FD | 	jmp	#LR__0678
076ec                 | LR__0637
076ec     13 13 02 F6 | 	mov	arg01, local05
076f0     04 16 B0 FD | 	call	#_compile_if
076f4     FD 28 02 F6 | 	mov	local06, result1
076f8     C8 02 90 FD | 	jmp	#LR__0679
076fc                 | LR__0638
076fc                 | ' return expr()
076fc     BC 28 B0 FD | 	call	#_expr
07700     FD 28 02 F6 | 	mov	local06, result1
07704     00 02 90 FD | 	jmp	#LR__0678
07708                 | LR__0639
07708                 | ' return expr()
07708     B0 28 B0 FD | 	call	#_expr
0770c     FD 28 02 F6 | 	mov	local06, result1
07710     F4 01 90 FD | 	jmp	#LR__0678
07714                 | LR__0640
07714     CC 0B B0 FD | 	call	#_compile_fun_varp
07718     FD 2C 02 F6 | 	mov	local08, result1
0771c     FE 28 02 F6 | 	mov	local06, result2
07720     E4 01 90 FD | 	jmp	#LR__0678
07724                 | LR__0641
07724     BC 0B B0 FD | 	call	#_compile_fun_varp
07728     FD 2C 02 F6 | 	mov	local08, result1
0772c     FE 28 02 F6 | 	mov	local06, result2
07730     D4 01 90 FD | 	jmp	#LR__0678
07734                 | LR__0642
07734     DC 08 B0 FD | 	call	#_compile_fun_2p
07738     FD 28 02 F6 | 	mov	local06, result1
0773c     C8 01 90 FD | 	jmp	#LR__0678
07740                 | LR__0643
07740                 | ' return expr()
07740     78 28 B0 FD | 	call	#_expr
07744     FD 28 02 F6 | 	mov	local06, result1
07748     BC 01 90 FD | 	jmp	#LR__0678
0774c                 | LR__0644
0774c                 | ' return expr()
0774c     6C 28 B0 FD | 	call	#_expr
07750     FD 28 02 F6 | 	mov	local06, result1
07754     B0 01 90 FD | 	jmp	#LR__0678
07758                 | LR__0645
07758                 | ' return expr()
07758     60 28 B0 FD | 	call	#_expr
0775c     FD 28 02 F6 | 	mov	local06, result1
07760     A4 01 90 FD | 	jmp	#LR__0678
07764                 | LR__0646
07764     68 22 B0 FD | 	call	#_compile_next
07768     FD 28 02 F6 | 	mov	local06, result1
0776c     54 02 90 FD | 	jmp	#LR__0679
07770                 | LR__0647
07770     28 09 B0 FD | 	call	#_compile_fun_3p
07774     FD 28 02 F6 | 	mov	local06, result1
07778     8C 01 90 FD | 	jmp	#LR__0678
0777c                 | LR__0648
0777c                 | ' return expr()
0777c     3C 28 B0 FD | 	call	#_expr
07780     FD 28 02 F6 | 	mov	local06, result1
07784     80 01 90 FD | 	jmp	#LR__0678
07788                 | LR__0649
07788                 | ' return expr()
07788     30 28 B0 FD | 	call	#_expr
0778c     FD 28 02 F6 | 	mov	local06, result1
07790     74 01 90 FD | 	jmp	#LR__0678
07794                 | LR__0650
07794                 | ' return expr()
07794     24 28 B0 FD | 	call	#_expr
07798     FD 28 02 F6 | 	mov	local06, result1
0779c     68 01 90 FD | 	jmp	#LR__0678
077a0                 | LR__0651
077a0                 | ' return expr()
077a0     18 28 B0 FD | 	call	#_expr
077a4     FD 28 02 F6 | 	mov	local06, result1
077a8     5C 01 90 FD | 	jmp	#LR__0678
077ac                 | LR__0652
077ac     DC 09 B0 FD | 	call	#_compile_fun_4p
077b0     FD 28 02 F6 | 	mov	local06, result1
077b4     50 01 90 FD | 	jmp	#LR__0678
077b8                 | LR__0653
077b8                 | ' return expr()
077b8     00 28 B0 FD | 	call	#_expr
077bc     FD 28 02 F6 | 	mov	local06, result1
077c0     44 01 90 FD | 	jmp	#LR__0678
077c4                 | LR__0654
077c4     4C 08 B0 FD | 	call	#_compile_fun_2p
077c8     FD 28 02 F6 | 	mov	local06, result1
077cc     38 01 90 FD | 	jmp	#LR__0678
077d0                 | LR__0655
077d0     10 0B B0 FD | 	call	#_compile_fun_varp
077d4     FD 2C 02 F6 | 	mov	local08, result1
077d8     FE 28 02 F6 | 	mov	local06, result2
077dc     28 01 90 FD | 	jmp	#LR__0678
077e0                 | LR__0656
077e0     00 0B B0 FD | 	call	#_compile_fun_varp
077e4     FD 2C 02 F6 | 	mov	local08, result1
077e8     FE 28 02 F6 | 	mov	local06, result2
077ec     18 01 90 FD | 	jmp	#LR__0678
077f0                 | LR__0657
077f0     20 08 B0 FD | 	call	#_compile_fun_2p
077f4     FD 28 02 F6 | 	mov	local06, result1
077f8     0C 01 90 FD | 	jmp	#LR__0678
077fc                 | LR__0658
077fc     14 08 B0 FD | 	call	#_compile_fun_2p
07800     FD 28 02 F6 | 	mov	local06, result1
07804     00 01 90 FD | 	jmp	#LR__0678
07808                 | LR__0659
07808     14 0E B0 FD | 	call	#_compile_print
0780c     FD 28 02 F6 | 	mov	local06, result1
07810     B0 01 90 FD | 	jmp	#LR__0679
07814                 | LR__0660
07814     CC 0A B0 FD | 	call	#_compile_fun_varp
07818     FD 2C 02 F6 | 	mov	local08, result1
0781c     FE 28 02 F6 | 	mov	local06, result2
07820     E4 00 90 FD | 	jmp	#LR__0678
07824                 | LR__0661
07824                 | ' return expr()
07824     94 27 B0 FD | 	call	#_expr
07828     FD 28 02 F6 | 	mov	local06, result1
0782c     D8 00 90 FD | 	jmp	#LR__0678
07830                 | LR__0662
07830     B0 0A B0 FD | 	call	#_compile_fun_varp
07834     FD 2C 02 F6 | 	mov	local08, result1
07838     FE 28 02 F6 | 	mov	local06, result2
0783c     C8 00 90 FD | 	jmp	#LR__0678
07840                 | LR__0663
07840     A0 0A B0 FD | 	call	#_compile_fun_varp
07844     FD 2C 02 F6 | 	mov	local08, result1
07848     FE 28 02 F6 | 	mov	local06, result2
0784c     B8 00 90 FD | 	jmp	#LR__0678
07850                 | LR__0664
07850     C0 07 B0 FD | 	call	#_compile_fun_2p
07854     FD 28 02 F6 | 	mov	local06, result1
07858     AC 00 90 FD | 	jmp	#LR__0678
0785c                 | LR__0665
0785c     B4 07 B0 FD | 	call	#_compile_fun_2p
07860     FD 28 02 F6 | 	mov	local06, result1
07864     A0 00 90 FD | 	jmp	#LR__0678
07868                 | LR__0666
07868     A8 07 B0 FD | 	call	#_compile_fun_2p
0786c     FD 28 02 F6 | 	mov	local06, result1
07870     94 00 90 FD | 	jmp	#LR__0678
07874                 | LR__0667
07874     9C 07 B0 FD | 	call	#_compile_fun_2p
07878     FD 28 02 F6 | 	mov	local06, result1
0787c     88 00 90 FD | 	jmp	#LR__0678
07880                 | LR__0668
07880     90 07 B0 FD | 	call	#_compile_fun_2p
07884     FD 28 02 F6 | 	mov	local06, result1
07888     7C 00 90 FD | 	jmp	#LR__0678
0788c                 | LR__0669
0788c     84 07 B0 FD | 	call	#_compile_fun_2p
07890     FD 28 02 F6 | 	mov	local06, result1
07894     70 00 90 FD | 	jmp	#LR__0678
07898                 | LR__0670
07898     78 07 B0 FD | 	call	#_compile_fun_2p
0789c     FD 28 02 F6 | 	mov	local06, result1
078a0     64 00 90 FD | 	jmp	#LR__0678
078a4                 | LR__0671
078a4     3C 0A B0 FD | 	call	#_compile_fun_varp
078a8     FD 2C 02 F6 | 	mov	local08, result1
078ac     FE 28 02 F6 | 	mov	local06, result2
078b0     54 00 90 FD | 	jmp	#LR__0678
078b4                 | LR__0672
078b4     E4 07 B0 FD | 	call	#_compile_fun_3p
078b8     FD 28 02 F6 | 	mov	local06, result1
078bc     48 00 90 FD | 	jmp	#LR__0678
078c0                 | LR__0673
078c0                 | ' return expr()
078c0     F8 26 B0 FD | 	call	#_expr
078c4     FD 28 02 F6 | 	mov	local06, result1
078c8     3C 00 90 FD | 	jmp	#LR__0678
078cc                 | LR__0674
078cc     44 07 B0 FD | 	call	#_compile_fun_2p
078d0     FD 28 02 F6 | 	mov	local06, result1
078d4     30 00 90 FD | 	jmp	#LR__0678
078d8                 | LR__0675
078d8     38 07 B0 FD | 	call	#_compile_fun_2p
078dc     FD 28 02 F6 | 	mov	local06, result1
078e0     24 00 90 FD | 	jmp	#LR__0678
078e4                 | LR__0676
078e4     2C 07 B0 FD | 	call	#_compile_fun_2p
078e8     FD 28 02 F6 | 	mov	local06, result1
078ec     18 00 90 FD | 	jmp	#LR__0678
078f0                 | LR__0677
078f0     CC 0A B0 FD | 	call	#_compile_array_assign
078f4     FD 28 02 F6 | 	mov	local06, result1
078f8     0E 28 0E F2 | 	cmp	local06, #14 wz
078fc     C4 00 90 5D |  if_ne	jmp	#LR__0679
07900                 | ' return 23
07900     17 28 06 F6 | 	mov	local06, #23
07904     BC 00 90 FD | 	jmp	#LR__0679
07908                 | ' return 23
07908                 | LR__0678
07908     15 23 02 F6 | 	mov	local03, local07
0790c     16 1F 02 F6 | 	mov	local01, local08
07910     0F 2F 02 F6 | 	mov	local09, local01
07914     10 31 02 F6 | 	mov	local10, local02
07918     11 2B 02 F6 | 	mov	local07, local03
0791c     4A 00 00 FF 
07920     7C E4 05 F1 | 	add	objptr, ##38012
07924     F2 1E 02 FB | 	rdlong	local01, objptr
07928     0F 2D 02 F6 | 	mov	local08, local01
0792c     01 2C 66 F0 | 	shl	local08, #1
07930     0F 2D 02 F1 | 	add	local08, local01
07934     02 2C 66 F0 | 	shl	local08, #2
07938     03 00 00 FF 
0793c     00 E4 85 F1 | 	sub	objptr, ##1536
07940     F2 2C 02 F1 | 	add	local08, objptr
07944     16 2F 62 FC | 	wrlong	local09, local08
07948     03 00 00 FF 
0794c     00 E4 05 F1 | 	add	objptr, ##1536
07950     F2 1E 02 FB | 	rdlong	local01, objptr
07954     0F 2F 02 F6 | 	mov	local09, local01
07958     01 2E 66 F0 | 	shl	local09, #1
0795c     0F 2F 02 F1 | 	add	local09, local01
07960     02 2E 66 F0 | 	shl	local09, #2
07964     03 00 00 FF 
07968     00 E4 85 F1 | 	sub	objptr, ##1536
0796c     F2 2E 02 F1 | 	add	local09, objptr
07970     04 2E 06 F1 | 	add	local09, #4
07974     17 31 62 FC | 	wrlong	local10, local09
07978     03 00 00 FF 
0797c     00 E4 05 F1 | 	add	objptr, ##1536
07980     F2 1E 02 FB | 	rdlong	local01, objptr
07984     0F 31 02 F6 | 	mov	local10, local01
07988     01 30 66 F0 | 	shl	local10, #1
0798c     0F 31 02 F1 | 	add	local10, local01
07990     02 30 66 F0 | 	shl	local10, #2
07994     03 00 00 FF 
07998     00 E4 85 F1 | 	sub	objptr, ##1536
0799c     F2 30 02 F1 | 	add	local10, objptr
079a0     08 30 06 F1 | 	add	local10, #8
079a4     18 2B 62 FC | 	wrlong	local07, local10
079a8     03 00 00 FF 
079ac     00 E4 05 F1 | 	add	objptr, ##1536
079b0     F2 2E 02 FB | 	rdlong	local09, objptr
079b4     01 2E 06 F1 | 	add	local09, #1
079b8     F2 2E 62 FC | 	wrlong	local09, objptr
079bc     4A 00 00 FF 
079c0     7C E4 85 F1 | 	sub	objptr, ##38012
079c4                 | LR__0679
079c4                 | ' 
079c4                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
079c4                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
079c4     03 24 0E F2 | 	cmp	local04, #3 wz
079c8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
079cc     38 00 90 5D |  if_ne	jmp	#LR__0680
079d0     4A 00 00 FF 
079d4     7C E4 05 F1 | 	add	objptr, ##38012
079d8     F2 30 02 FB | 	rdlong	local10, objptr
079dc     18 1F 02 F6 | 	mov	local01, local10
079e0     01 1E 66 F0 | 	shl	local01, #1
079e4     18 1F 02 F1 | 	add	local01, local10
079e8     02 1E 66 F0 | 	shl	local01, #2
079ec     03 00 00 FF 
079f0     00 E4 85 F1 | 	sub	objptr, ##1536
079f4     F2 1E 02 F1 | 	add	local01, objptr
079f8     08 1E 06 F1 | 	add	local01, #8
079fc     0F FD 6B FC | 	wrlong	#510, local01
07a00     47 00 00 FF 
07a04     7C E4 85 F1 | 	sub	objptr, ##36476
07a08                 | LR__0680
07a08                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07a08                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07a08     4A 00 00 FF 
07a0c     7C E4 05 F1 | 	add	objptr, ##38012
07a10     F2 1E 02 FB | 	rdlong	local01, objptr
07a14     4A 00 00 FF 
07a18     7C E4 85 F1 | 	sub	objptr, ##38012
07a1c     97 58 48 FB | 	callpa	#(@LR__0683-@LR__0681)>>2,fcache_load_ptr_
07a20                 | LR__0681
07a20     0F 31 02 F6 | 	mov	local10, local01
07a24     01 30 66 F0 | 	shl	local10, #1
07a28     0F 31 02 F1 | 	add	local10, local01
07a2c     02 30 66 F0 | 	shl	local10, #2
07a30     47 00 00 FF 
07a34     7C E4 05 F1 | 	add	objptr, ##36476
07a38     F2 30 02 F1 | 	add	local10, objptr
07a3c     08 30 06 F1 | 	add	local10, #8
07a40     18 31 02 FB | 	rdlong	local10, local10
07a44     9B 30 0E F2 | 	cmp	local10, #155 wz
07a48     47 00 00 FF 
07a4c     7C E4 85 F1 | 	sub	objptr, ##36476
07a50     70 00 90 5D |  if_ne	jmp	#LR__0682
07a54     0F 2F 02 F6 | 	mov	local09, local01
07a58     01 2E 86 F1 | 	sub	local09, #1
07a5c     17 31 02 F6 | 	mov	local10, local09
07a60     01 30 66 F0 | 	shl	local10, #1
07a64     17 31 02 F1 | 	add	local10, local09
07a68     02 30 66 F0 | 	shl	local10, #2
07a6c     47 00 00 FF 
07a70     7C E4 05 F1 | 	add	objptr, ##36476
07a74     F2 30 02 F1 | 	add	local10, objptr
07a78     08 30 06 F1 | 	add	local10, #8
07a7c     18 31 02 FB | 	rdlong	local10, local10
07a80     11 30 0E F2 | 	cmp	local10, #17 wz
07a84     47 00 00 FF 
07a88     7C E4 85 F1 | 	sub	objptr, ##36476
07a8c     34 00 90 5D |  if_ne	jmp	#LR__0682
07a90     0F 2F 02 F6 | 	mov	local09, local01
07a94     01 2E 86 F1 | 	sub	local09, #1
07a98     17 31 02 F6 | 	mov	local10, local09
07a9c     01 30 66 F0 | 	shl	local10, #1
07aa0     17 31 02 F1 | 	add	local10, local09
07aa4     02 30 66 F0 | 	shl	local10, #2
07aa8     47 00 00 FF 
07aac     7C E4 05 F1 | 	add	objptr, ##36476
07ab0     F2 30 02 F1 | 	add	local10, objptr
07ab4     08 30 06 F1 | 	add	local10, #8
07ab8     18 25 68 FC | 	wrlong	#18, local10
07abc     47 00 00 FF 
07ac0     7C E4 85 F1 | 	sub	objptr, ##36476
07ac4                 | LR__0682
07ac4     01 1E 86 F1 | 	sub	local01, #1
07ac8     01 1E 56 F2 | 	cmps	local01, #1 wc
07acc     50 FF 9F 3D |  if_ae	jmp	#LR__0681
07ad0                 | LR__0683
07ad0                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07ad0                 | ' return err
07ad0     14 FB 01 F6 | 	mov	result1, local06
07ad4     A7 F0 03 F6 | 	mov	ptra, fp
07ad8     B2 00 A0 FD | 	call	#popregs_
07adc                 | _compile_immediate_ret
07adc     2D 00 64 FD | 	ret
07ae0                 | 
07ae0                 | ' 
07ae0                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07ae0                 | ' 
07ae0                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07ae0                 | _compile_immediate_assign
07ae0     0C 4A 05 F6 | 	mov	COUNT_, #12
07ae4     A8 00 A0 FD | 	call	#pushregs_
07ae8     09 25 02 F6 | 	mov	local04, arg01
07aec     FF 22 06 F6 | 	mov	local03, #255
07af0     01 26 66 F6 | 	neg	local05, #1
07af4     00 28 06 F6 | 	mov	local06, #0
07af8                 | ' 
07af8                 | ' t1.result_type=result_error : t1.result.uresult=0
07af8                 | ' i=-1: j=-1 : err=0
07af8                 | ' 
07af8                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07af8     02 24 0E F2 | 	cmp	local04, #2 wz
07afc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07b00     35 00 00 AF 
07b04     0C E4 05 A1 |  if_e	add	objptr, ##27148
07b08     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07b0c     02 00 00 AF 
07b10     38 E4 05 A1 |  if_e	add	objptr, ##1080
07b14     F2 04 68 AC |  if_e	wrlong	#2, objptr
07b18     37 00 00 AF 
07b1c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07b20                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07b20     04 24 0E F2 | 	cmp	local04, #4 wz
07b24     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07b28     2C 00 90 5D |  if_ne	jmp	#LR__0690
07b2c     35 00 00 FF 
07b30     14 E4 05 F1 | 	add	objptr, ##27156
07b34     F2 2A 02 FB | 	rdlong	local07, objptr
07b38     02 00 00 FF 
07b3c     30 E4 05 F1 | 	add	objptr, ##1072
07b40     F2 06 68 FC | 	wrlong	#3, objptr
07b44     13 00 00 FF 
07b48     38 E4 05 F1 | 	add	objptr, ##9784
07b4c     F2 04 68 FC | 	wrlong	#2, objptr
07b50     4A 00 00 FF 
07b54     7C E4 85 F1 | 	sub	objptr, ##38012
07b58                 | LR__0690
07b58                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07b58     05 24 0E F2 | 	cmp	local04, #5 wz
07b5c     3C 00 90 5D |  if_ne	jmp	#LR__0691
07b60     37 00 00 FF 
07b64     44 E4 05 F1 | 	add	objptr, ##28228
07b68     F2 FA 01 FB | 	rdlong	result1, objptr
07b6c     FD 2A 02 F6 | 	mov	local07, result1
07b70     03 2A 66 F0 | 	shl	local07, #3
07b74     02 00 00 FF 
07b78     38 E4 85 F1 | 	sub	objptr, ##1080
07b7c     F2 2A 02 F1 | 	add	local07, objptr
07b80     15 2B 02 FB | 	rdlong	local07, local07
07b84     02 FA 05 F1 | 	add	result1, #2
07b88     02 00 00 FF 
07b8c     38 E4 05 F1 | 	add	objptr, ##1080
07b90     F2 FA 61 FC | 	wrlong	result1, objptr
07b94     37 00 00 FF 
07b98     44 E4 85 F1 | 	sub	objptr, ##28228
07b9c                 | LR__0691
07b9c     15 13 02 F6 | 	mov	arg01, local07
07ba0     01 14 06 F6 | 	mov	arg02, #1
07ba4     E0 BA B1 FD | 	call	#__system__Right_S
07ba8     FD 2C 02 F6 | 	mov	local08, result1
07bac     0C 24 B0 FD | 	call	#_expr
07bb0                 | ' 
07bb0                 | ' suffix2$=right$(varname2$,1)
07bb0                 | ' expr()
07bb0                 | ' if varnum>0 then					' try to find a variable
07bb0     35 00 00 FF 
07bb4     08 E4 05 F1 | 	add	objptr, ##27144
07bb8     F2 2E 02 FB | 	rdlong	local09, objptr
07bbc     35 00 00 FF 
07bc0     08 E4 85 F1 | 	sub	objptr, ##27144
07bc4     01 2E 56 F2 | 	cmps	local09, #1 wc
07bc8     58 00 90 CD |  if_b	jmp	#LR__0694
07bcc                 | '   for i=0 to varnum-1
07bcc     00 30 06 F6 | 	mov	local10, #0
07bd0     35 00 00 FF 
07bd4     08 E4 05 F1 | 	add	objptr, ##27144
07bd8     F2 32 02 FB | 	rdlong	local11, objptr
07bdc     35 00 00 FF 
07be0     08 E4 85 F1 | 	sub	objptr, ##27144
07be4                 | LR__0692
07be4     19 31 52 F2 | 	cmps	local10, local11 wc
07be8     38 00 90 3D |  if_ae	jmp	#LR__0693
07bec                 | '     if variables(i).name=varname2$ then j=i : exit
07bec     18 2F 02 F6 | 	mov	local09, local10
07bf0     04 2E 66 F0 | 	shl	local09, #4
07bf4     14 00 00 FF 
07bf8     F8 E5 05 F1 | 	add	objptr, ##10744
07bfc     F2 2E 02 F1 | 	add	local09, objptr
07c00     17 13 02 FB | 	rdlong	arg01, local09
07c04     15 15 02 F6 | 	mov	arg02, local07
07c08     14 00 00 FF 
07c0c     F8 E5 85 F1 | 	sub	objptr, ##10744
07c10     98 99 B1 FD | 	call	#__system___string_cmp
07c14     00 FA 0D F2 | 	cmp	result1, #0 wz
07c18     18 27 02 A6 |  if_e	mov	local05, local10
07c1c     01 30 06 51 |  if_ne	add	local10, #1
07c20     C0 FF 9F 5D |  if_ne	jmp	#LR__0692
07c24                 | LR__0693
07c24                 | LR__0694
07c24                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07c24     FF FF 7F FF 
07c28     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07c2c     60 00 90 5D |  if_ne	jmp	#LR__0695
07c30     35 00 00 FF 
07c34     08 E4 05 F1 | 	add	objptr, ##27144
07c38     F2 2E 02 FB | 	rdlong	local09, objptr
07c3c     35 00 00 FF 
07c40     08 E4 85 F1 | 	sub	objptr, ##27144
07c44     02 00 00 FF 
07c48     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07c4c     40 00 90 3D |  if_ae	jmp	#LR__0695
07c50     35 00 00 FF 
07c54     08 E4 05 F1 | 	add	objptr, ##27144
07c58     F2 32 02 FB | 	rdlong	local11, objptr
07c5c     04 32 66 F0 | 	shl	local11, #4
07c60     20 00 00 FF 
07c64     10 E4 85 F1 | 	sub	objptr, ##16400
07c68     F2 32 02 F1 | 	add	local11, objptr
07c6c     19 2B 62 FC | 	wrlong	local07, local11
07c70     20 00 00 FF 
07c74     10 E4 05 F1 | 	add	objptr, ##16400
07c78     F2 2E 02 FB | 	rdlong	local09, objptr
07c7c     17 27 02 F6 | 	mov	local05, local09
07c80     01 2E 06 F1 | 	add	local09, #1
07c84     F2 2E 62 FC | 	wrlong	local09, objptr
07c88     35 00 00 FF 
07c8c     08 E4 85 F1 | 	sub	objptr, ##27144
07c90                 | LR__0695
07c90                 | ' if varnum>=maxvars then
07c90     35 00 00 FF 
07c94     08 E4 05 F1 | 	add	objptr, ##27144
07c98     F2 2E 02 FB | 	rdlong	local09, objptr
07c9c     35 00 00 FF 
07ca0     08 E4 85 F1 | 	sub	objptr, ##27144
07ca4     02 00 00 FF 
07ca8     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07cac     2D 28 06 36 |  if_ae	mov	local06, #45
07cb0     C8 01 90 3D |  if_ae	jmp	#LR__0700
07cb4     13 1F 02 F6 | 	mov	local01, local05
07cb8     17 22 06 F6 | 	mov	local03, #23
07cbc     0F 2F 02 F6 | 	mov	local09, local01
07cc0     10 35 02 F6 | 	mov	local12, local02
07cc4     11 1F 02 F6 | 	mov	local01, local03
07cc8     4A 00 00 FF 
07ccc     7C E4 05 F1 | 	add	objptr, ##38012
07cd0     F2 32 02 FB | 	rdlong	local11, objptr
07cd4     19 31 02 F6 | 	mov	local10, local11
07cd8     01 30 66 F0 | 	shl	local10, #1
07cdc     19 31 02 F1 | 	add	local10, local11
07ce0     02 30 66 F0 | 	shl	local10, #2
07ce4     03 00 00 FF 
07ce8     00 E4 85 F1 | 	sub	objptr, ##1536
07cec     F2 30 02 F1 | 	add	local10, objptr
07cf0     18 2F 62 FC | 	wrlong	local09, local10
07cf4     03 00 00 FF 
07cf8     00 E4 05 F1 | 	add	objptr, ##1536
07cfc     F2 2E 02 FB | 	rdlong	local09, objptr
07d00     17 33 02 F6 | 	mov	local11, local09
07d04     01 32 66 F0 | 	shl	local11, #1
07d08     17 33 02 F1 | 	add	local11, local09
07d0c     02 32 66 F0 | 	shl	local11, #2
07d10     03 00 00 FF 
07d14     00 E4 85 F1 | 	sub	objptr, ##1536
07d18     F2 32 02 F1 | 	add	local11, objptr
07d1c     04 32 06 F1 | 	add	local11, #4
07d20     19 35 62 FC | 	wrlong	local12, local11
07d24     03 00 00 FF 
07d28     00 E4 05 F1 | 	add	objptr, ##1536
07d2c     F2 2E 02 FB | 	rdlong	local09, objptr
07d30     17 35 02 F6 | 	mov	local12, local09
07d34     01 34 66 F0 | 	shl	local12, #1
07d38     17 35 02 F1 | 	add	local12, local09
07d3c     02 34 66 F0 | 	shl	local12, #2
07d40     03 00 00 FF 
07d44     00 E4 85 F1 | 	sub	objptr, ##1536
07d48     F2 34 02 F1 | 	add	local12, objptr
07d4c     08 34 06 F1 | 	add	local12, #8
07d50     1A 1F 62 FC | 	wrlong	local01, local12
07d54     03 00 00 FF 
07d58     00 E4 05 F1 | 	add	objptr, ##1536
07d5c     F2 2E 02 FB | 	rdlong	local09, objptr
07d60     01 2E 06 F1 | 	add	local09, #1
07d64     F2 2E 62 FC | 	wrlong	local09, objptr
07d68     4A 00 00 FF 
07d6c     7C E4 85 F1 | 	sub	objptr, ##38012
07d70                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07d70                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07d70                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07d70     03 24 0E F2 | 	cmp	local04, #3 wz
07d74     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07d78     38 00 90 5D |  if_ne	jmp	#LR__0696
07d7c     4A 00 00 FF 
07d80     7C E4 05 F1 | 	add	objptr, ##38012
07d84     F2 34 02 FB | 	rdlong	local12, objptr
07d88     1A 1F 02 F6 | 	mov	local01, local12
07d8c     01 1E 66 F0 | 	shl	local01, #1
07d90     1A 1F 02 F1 | 	add	local01, local12
07d94     02 1E 66 F0 | 	shl	local01, #2
07d98     03 00 00 FF 
07d9c     00 E4 85 F1 | 	sub	objptr, ##1536
07da0     F2 1E 02 F1 | 	add	local01, objptr
07da4     08 1E 06 F1 | 	add	local01, #8
07da8     0F FD 6B FC | 	wrlong	#510, local01
07dac     47 00 00 FF 
07db0     7C E4 85 F1 | 	sub	objptr, ##36476
07db4                 | LR__0696
07db4                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07db4     4A 00 00 FF 
07db8     7C E4 05 F1 | 	add	objptr, ##38012
07dbc     F2 30 02 FB | 	rdlong	local10, objptr
07dc0     4A 00 00 FF 
07dc4     7C E4 85 F1 | 	sub	objptr, ##38012
07dc8     97 58 48 FB | 	callpa	#(@LR__0699-@LR__0697)>>2,fcache_load_ptr_
07dcc                 | LR__0697
07dcc     18 35 02 F6 | 	mov	local12, local10
07dd0     01 34 66 F0 | 	shl	local12, #1
07dd4     18 35 02 F1 | 	add	local12, local10
07dd8     02 34 66 F0 | 	shl	local12, #2
07ddc     47 00 00 FF 
07de0     7C E4 05 F1 | 	add	objptr, ##36476
07de4     F2 34 02 F1 | 	add	local12, objptr
07de8     08 34 06 F1 | 	add	local12, #8
07dec     1A 35 02 FB | 	rdlong	local12, local12
07df0     9B 34 0E F2 | 	cmp	local12, #155 wz
07df4     47 00 00 FF 
07df8     7C E4 85 F1 | 	sub	objptr, ##36476
07dfc     70 00 90 5D |  if_ne	jmp	#LR__0698
07e00     18 35 02 F6 | 	mov	local12, local10
07e04     01 34 86 F1 | 	sub	local12, #1
07e08     1A 1F 02 F6 | 	mov	local01, local12
07e0c     01 1E 66 F0 | 	shl	local01, #1
07e10     1A 1F 02 F1 | 	add	local01, local12
07e14     02 1E 66 F0 | 	shl	local01, #2
07e18     47 00 00 FF 
07e1c     7C E4 05 F1 | 	add	objptr, ##36476
07e20     F2 1E 02 F1 | 	add	local01, objptr
07e24     08 1E 06 F1 | 	add	local01, #8
07e28     0F 1F 02 FB | 	rdlong	local01, local01
07e2c     11 1E 0E F2 | 	cmp	local01, #17 wz
07e30     47 00 00 FF 
07e34     7C E4 85 F1 | 	sub	objptr, ##36476
07e38     34 00 90 5D |  if_ne	jmp	#LR__0698
07e3c     18 35 02 F6 | 	mov	local12, local10
07e40     01 34 86 F1 | 	sub	local12, #1
07e44     1A 1F 02 F6 | 	mov	local01, local12
07e48     01 1E 66 F0 | 	shl	local01, #1
07e4c     1A 1F 02 F1 | 	add	local01, local12
07e50     02 1E 66 F0 | 	shl	local01, #2
07e54     47 00 00 FF 
07e58     7C E4 05 F1 | 	add	objptr, ##36476
07e5c     F2 1E 02 F1 | 	add	local01, objptr
07e60     08 1E 06 F1 | 	add	local01, #8
07e64     0F 25 68 FC | 	wrlong	#18, local01
07e68     47 00 00 FF 
07e6c     7C E4 85 F1 | 	sub	objptr, ##36476
07e70                 | LR__0698
07e70     01 30 86 F1 | 	sub	local10, #1
07e74     01 30 56 F2 | 	cmps	local10, #1 wc
07e78     50 FF 9F 3D |  if_ae	jmp	#LR__0697
07e7c                 | LR__0699
07e7c                 | LR__0700
07e7c                 | ' return err
07e7c     14 FB 01 F6 | 	mov	result1, local06
07e80     A7 F0 03 F6 | 	mov	ptra, fp
07e84     B2 00 A0 FD | 	call	#popregs_
07e88                 | _compile_immediate_assign_ret
07e88     2D 00 64 FD | 	ret
07e8c                 | 
07e8c                 | ' 
07e8c                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07e8c                 | ' 
07e8c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07e8c                 | _compile
07e8c     03 4A 05 F6 | 	mov	COUNT_, #3
07e90     A8 00 A0 FD | 	call	#pushregs_
07e94     09 1F 02 F6 | 	mov	local01, arg01
07e98     0B 21 02 F6 | 	mov	local02, arg03
07e9c     47 00 00 FF 
07ea0     7C E4 05 F1 | 	add	objptr, ##36476
07ea4     F2 1E 62 FC | 	wrlong	local01, objptr
07ea8     04 E4 05 F1 | 	add	objptr, #4
07eac     F2 14 62 FC | 	wrlong	arg02, objptr
07eb0     47 00 00 FF 
07eb4     80 E4 85 F1 | 	sub	objptr, ##36480
07eb8     10 13 02 F6 | 	mov	arg01, local02
07ebc     01 12 06 F1 | 	add	arg01, #1
07ec0     0F 15 02 F6 | 	mov	arg02, local01
07ec4     D4 F2 BF FD | 	call	#_compile_immediate
07ec8     FD 22 0A F6 | 	mov	local03, result1 wz
07ecc                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07ecc                 | ' ucompiledline(0)=alinemajor
07ecc                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07ecc                 | ' 
07ecc                 | ' ' cont: 
07ecc                 | ' ' 0 - this is the first part of the line that will continue
07ecc                 | ' ' 1 - this is the continuation of the line
07ecc                 | ' ' 2 - this is the last continued line
07ecc                 | ' ' 3 - this is the one and only part
07ecc                 | ' 
07ecc                 | ' err=compile_immediate(cont+1,alinemajor) 
07ecc                 | ' if err=0 andalso alinemajor>0 then
07ecc     74 00 90 5D |  if_ne	jmp	#LR__0715
07ed0     01 1E 16 F2 | 	cmp	local01, #1 wc
07ed4     6C 00 90 CD |  if_b	jmp	#LR__0715
07ed8                 | '   if cont=3 orelse cont=2 then 
07ed8     03 20 0E F2 | 	cmp	local02, #3 wz
07edc     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07ee0     60 00 90 5D |  if_ne	jmp	#LR__0714
07ee4                 | '     if alinemajor >lastline then 
07ee4     4A 00 00 FF 
07ee8     8C E4 05 F1 | 	add	objptr, ##38028
07eec     F2 14 02 FB | 	rdlong	arg02, objptr
07ef0     4A 00 00 FF 
07ef4     8C E4 85 F1 | 	sub	objptr, ##38028
07ef8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07efc     0C 00 90 ED |  if_be	jmp	#LR__0710
07f00     0F 13 02 F6 | 	mov	arg01, local01
07f04     CC F1 BF FD | 	call	#_add_line_at_end
07f08     38 00 90 FD | 	jmp	#LR__0713
07f0c                 | LR__0710
07f0c     0F 13 02 F6 | 	mov	arg01, local01
07f10     90 EB BF FD | 	call	#_deleteline
07f14                 | '       deleteline(alinemajor)  
07f14                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07f14     4A 00 00 FF 
07f18     8C E4 05 F1 | 	add	objptr, ##38028
07f1c     F2 14 02 FB | 	rdlong	arg02, objptr
07f20     4A 00 00 FF 
07f24     8C E4 85 F1 | 	sub	objptr, ##38028
07f28     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07f2c     0C 00 90 ED |  if_be	jmp	#LR__0711
07f30     0F 13 02 F6 | 	mov	arg01, local01
07f34     9C F1 BF FD | 	call	#_add_line_at_end
07f38     08 00 90 FD | 	jmp	#LR__0712
07f3c                 | LR__0711
07f3c     0F 13 02 F6 | 	mov	arg01, local01
07f40     74 EF BF FD | 	call	#_insertline
07f44                 | LR__0712
07f44                 | LR__0713
07f44                 | LR__0714
07f44                 | LR__0715
07f44                 | ' return err
07f44     11 FB 01 F6 | 	mov	result1, local03
07f48     A7 F0 03 F6 | 	mov	ptra, fp
07f4c     B2 00 A0 FD | 	call	#popregs_
07f50                 | _compile_ret
07f50     2D 00 64 FD | 	ret
07f54                 | 
07f54                 | ' 
07f54                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07f54                 | ' 
07f54                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07f54                 | _compile_assign
07f54     03 4A 05 F6 | 	mov	COUNT_, #3
07f58     A8 00 A0 FD | 	call	#pushregs_
07f5c     09 1F 02 F6 | 	mov	local01, arg01
07f60     0B 21 02 F6 | 	mov	local02, arg03
07f64     47 00 00 FF 
07f68     7C E4 05 F1 | 	add	objptr, ##36476
07f6c     F2 1E 62 FC | 	wrlong	local01, objptr
07f70     04 E4 05 F1 | 	add	objptr, #4
07f74     F2 14 62 FC | 	wrlong	arg02, objptr
07f78     47 00 00 FF 
07f7c     80 E4 85 F1 | 	sub	objptr, ##36480
07f80     10 13 02 F6 | 	mov	arg01, local02
07f84     01 12 06 F1 | 	add	arg01, #1
07f88     54 FB BF FD | 	call	#_compile_immediate_assign
07f8c     FD 22 02 F6 | 	mov	local03, result1
07f90                 | ' 
07f90                 | ' ucompiledline(0)=alinemajor
07f90                 | ' ucompiledline(1)=alineminor
07f90                 | ' 
07f90                 | ' err=compile_immediate_assign(cont+1) 
07f90                 | ' if alinemajor>0 then
07f90     01 1E 16 F2 | 	cmp	local01, #1 wc
07f94     6C 00 90 CD |  if_b	jmp	#LR__0725
07f98                 | '   if cont=3 orelse cont=2 then 
07f98     03 20 0E F2 | 	cmp	local02, #3 wz
07f9c     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07fa0     60 00 90 5D |  if_ne	jmp	#LR__0724
07fa4                 | '     if alinemajor >lastline then 
07fa4     4A 00 00 FF 
07fa8     8C E4 05 F1 | 	add	objptr, ##38028
07fac     F2 14 02 FB | 	rdlong	arg02, objptr
07fb0     4A 00 00 FF 
07fb4     8C E4 85 F1 | 	sub	objptr, ##38028
07fb8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07fbc     0C 00 90 ED |  if_be	jmp	#LR__0720
07fc0     0F 13 02 F6 | 	mov	arg01, local01
07fc4     0C F1 BF FD | 	call	#_add_line_at_end
07fc8     38 00 90 FD | 	jmp	#LR__0723
07fcc                 | LR__0720
07fcc     0F 13 02 F6 | 	mov	arg01, local01
07fd0     D0 EA BF FD | 	call	#_deleteline
07fd4                 | '       deleteline(alinemajor)  
07fd4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07fd4     4A 00 00 FF 
07fd8     8C E4 05 F1 | 	add	objptr, ##38028
07fdc     F2 14 02 FB | 	rdlong	arg02, objptr
07fe0     4A 00 00 FF 
07fe4     8C E4 85 F1 | 	sub	objptr, ##38028
07fe8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07fec     0C 00 90 ED |  if_be	jmp	#LR__0721
07ff0     0F 13 02 F6 | 	mov	arg01, local01
07ff4     DC F0 BF FD | 	call	#_add_line_at_end
07ff8     08 00 90 FD | 	jmp	#LR__0722
07ffc                 | LR__0721
07ffc     0F 13 02 F6 | 	mov	arg01, local01
08000     B4 EE BF FD | 	call	#_insertline
08004                 | LR__0722
08004                 | LR__0723
08004                 | LR__0724
08004                 | LR__0725
08004                 | ' return err
08004     11 FB 01 F6 | 	mov	result1, local03
08008     A7 F0 03 F6 | 	mov	ptra, fp
0800c     B2 00 A0 FD | 	call	#popregs_
08010                 | _compile_assign_ret
08010     2D 00 64 FD | 	ret
08014                 | 
08014                 | ' 
08014                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08014                 | ' 
08014                 | ' function compile_fun_2p() as ulong
08014                 | _compile_fun_2p
08014     01 4A 05 F6 | 	mov	COUNT_, #1
08018     A8 00 A0 FD | 	call	#pushregs_
0801c     9C 1F B0 FD | 	call	#_expr
08020     FD 1E 02 F6 | 	mov	local01, result1
08024                 | ' err=expr() : if err>0 then return err
08024     01 1E 16 F2 | 	cmp	local01, #1 wc
08028     0F FB 01 36 |  if_ae	mov	result1, local01
0802c     60 00 90 3D |  if_ae	jmp	#LR__0730
08030                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08030     37 00 00 FF 
08034     44 E4 05 F1 | 	add	objptr, ##28228
08038     F2 1E 02 FB | 	rdlong	local01, objptr
0803c     03 1E 66 F0 | 	shl	local01, #3
08040     02 00 00 FF 
08044     38 E4 85 F1 | 	sub	objptr, ##1080
08048     F2 1E 02 F1 | 	add	local01, objptr
0804c     04 1E 06 F1 | 	add	local01, #4
08050     0F 1F 02 FB | 	rdlong	local01, local01
08054     11 1E 0E F2 | 	cmp	local01, #17 wz
08058     35 00 00 FF 
0805c     0C E4 85 F1 | 	sub	objptr, ##27148
08060     15 FA 05 56 |  if_ne	mov	result1, #21
08064     28 00 90 5D |  if_ne	jmp	#LR__0730
08068     37 00 00 FF 
0806c     44 E4 05 F1 | 	add	objptr, ##28228
08070     F2 1E 02 FB | 	rdlong	local01, objptr
08074     01 1E 06 F1 | 	add	local01, #1
08078     F2 1E 62 FC | 	wrlong	local01, objptr
0807c     37 00 00 FF 
08080     44 E4 85 F1 | 	sub	objptr, ##28228
08084     34 1F B0 FD | 	call	#_expr
08088                 | ' err=expr() : if err>0 then return err
08088     01 FA 15 F2 | 	cmp	result1, #1 wc
0808c                 | ' return 0
0808c     00 FA 05 C6 |  if_b	mov	result1, #0
08090                 | LR__0730
08090     A7 F0 03 F6 | 	mov	ptra, fp
08094     B2 00 A0 FD | 	call	#popregs_
08098                 | _compile_fun_2p_ret
08098     2D 00 64 FD | 	ret
0809c                 | 
0809c                 | ' 
0809c                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
0809c                 | ' 
0809c                 | ' function compile_fun_3p() as ulong
0809c                 | _compile_fun_3p
0809c     01 4A 05 F6 | 	mov	COUNT_, #1
080a0     A8 00 A0 FD | 	call	#pushregs_
080a4     14 1F B0 FD | 	call	#_expr
080a8     FD 1E 02 F6 | 	mov	local01, result1
080ac                 | ' err=expr() : if err>0 then return err
080ac     01 1E 16 F2 | 	cmp	local01, #1 wc
080b0     0F FB 01 36 |  if_ae	mov	result1, local01
080b4     C8 00 90 3D |  if_ae	jmp	#LR__0740
080b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
080b8     37 00 00 FF 
080bc     44 E4 05 F1 | 	add	objptr, ##28228
080c0     F2 1E 02 FB | 	rdlong	local01, objptr
080c4     03 1E 66 F0 | 	shl	local01, #3
080c8     02 00 00 FF 
080cc     38 E4 85 F1 | 	sub	objptr, ##1080
080d0     F2 1E 02 F1 | 	add	local01, objptr
080d4     04 1E 06 F1 | 	add	local01, #4
080d8     0F 1F 02 FB | 	rdlong	local01, local01
080dc     11 1E 0E F2 | 	cmp	local01, #17 wz
080e0     35 00 00 FF 
080e4     0C E4 85 F1 | 	sub	objptr, ##27148
080e8     15 FA 05 56 |  if_ne	mov	result1, #21
080ec     90 00 90 5D |  if_ne	jmp	#LR__0740
080f0     37 00 00 FF 
080f4     44 E4 05 F1 | 	add	objptr, ##28228
080f8     F2 1E 02 FB | 	rdlong	local01, objptr
080fc     01 1E 06 F1 | 	add	local01, #1
08100     F2 1E 62 FC | 	wrlong	local01, objptr
08104     37 00 00 FF 
08108     44 E4 85 F1 | 	sub	objptr, ##28228
0810c     AC 1E B0 FD | 	call	#_expr
08110     FD 1E 02 F6 | 	mov	local01, result1
08114                 | ' err=expr() : if err>0 then return err
08114     01 1E 16 F2 | 	cmp	local01, #1 wc
08118     0F FB 01 36 |  if_ae	mov	result1, local01
0811c     60 00 90 3D |  if_ae	jmp	#LR__0740
08120                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08120     37 00 00 FF 
08124     44 E4 05 F1 | 	add	objptr, ##28228
08128     F2 1E 02 FB | 	rdlong	local01, objptr
0812c     03 1E 66 F0 | 	shl	local01, #3
08130     02 00 00 FF 
08134     38 E4 85 F1 | 	sub	objptr, ##1080
08138     F2 1E 02 F1 | 	add	local01, objptr
0813c     04 1E 06 F1 | 	add	local01, #4
08140     0F 1F 02 FB | 	rdlong	local01, local01
08144     11 1E 0E F2 | 	cmp	local01, #17 wz
08148     35 00 00 FF 
0814c     0C E4 85 F1 | 	sub	objptr, ##27148
08150     15 FA 05 56 |  if_ne	mov	result1, #21
08154     28 00 90 5D |  if_ne	jmp	#LR__0740
08158     37 00 00 FF 
0815c     44 E4 05 F1 | 	add	objptr, ##28228
08160     F2 1E 02 FB | 	rdlong	local01, objptr
08164     01 1E 06 F1 | 	add	local01, #1
08168     F2 1E 62 FC | 	wrlong	local01, objptr
0816c     37 00 00 FF 
08170     44 E4 85 F1 | 	sub	objptr, ##28228
08174     44 1E B0 FD | 	call	#_expr
08178                 | ' err=expr() : if err>0 then return err
08178     01 FA 15 F2 | 	cmp	result1, #1 wc
0817c                 | ' return 0
0817c     00 FA 05 C6 |  if_b	mov	result1, #0
08180                 | LR__0740
08180     A7 F0 03 F6 | 	mov	ptra, fp
08184     B2 00 A0 FD | 	call	#popregs_
08188                 | _compile_fun_3p_ret
08188     2D 00 64 FD | 	ret
0818c                 | 
0818c                 | ' 
0818c                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
0818c                 | ' 
0818c                 | ' function compile_fun_4p() as ulong
0818c                 | _compile_fun_4p
0818c     01 4A 05 F6 | 	mov	COUNT_, #1
08190     A8 00 A0 FD | 	call	#pushregs_
08194     24 1E B0 FD | 	call	#_expr
08198     FD 1E 02 F6 | 	mov	local01, result1
0819c                 | ' err=expr() : if err>0 then return err
0819c     01 1E 16 F2 | 	cmp	local01, #1 wc
081a0     0F FB 01 36 |  if_ae	mov	result1, local01
081a4     30 01 90 3D |  if_ae	jmp	#LR__0750
081a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
081a8     37 00 00 FF 
081ac     44 E4 05 F1 | 	add	objptr, ##28228
081b0     F2 1E 02 FB | 	rdlong	local01, objptr
081b4     03 1E 66 F0 | 	shl	local01, #3
081b8     02 00 00 FF 
081bc     38 E4 85 F1 | 	sub	objptr, ##1080
081c0     F2 1E 02 F1 | 	add	local01, objptr
081c4     04 1E 06 F1 | 	add	local01, #4
081c8     0F 1F 02 FB | 	rdlong	local01, local01
081cc     11 1E 0E F2 | 	cmp	local01, #17 wz
081d0     35 00 00 FF 
081d4     0C E4 85 F1 | 	sub	objptr, ##27148
081d8     15 FA 05 56 |  if_ne	mov	result1, #21
081dc     F8 00 90 5D |  if_ne	jmp	#LR__0750
081e0     37 00 00 FF 
081e4     44 E4 05 F1 | 	add	objptr, ##28228
081e8     F2 1E 02 FB | 	rdlong	local01, objptr
081ec     01 1E 06 F1 | 	add	local01, #1
081f0     F2 1E 62 FC | 	wrlong	local01, objptr
081f4     37 00 00 FF 
081f8     44 E4 85 F1 | 	sub	objptr, ##28228
081fc     BC 1D B0 FD | 	call	#_expr
08200     FD 1E 02 F6 | 	mov	local01, result1
08204                 | ' err=expr() : if err>0 then return err
08204     01 1E 16 F2 | 	cmp	local01, #1 wc
08208     0F FB 01 36 |  if_ae	mov	result1, local01
0820c     C8 00 90 3D |  if_ae	jmp	#LR__0750
08210                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08210     37 00 00 FF 
08214     44 E4 05 F1 | 	add	objptr, ##28228
08218     F2 1E 02 FB | 	rdlong	local01, objptr
0821c     03 1E 66 F0 | 	shl	local01, #3
08220     02 00 00 FF 
08224     38 E4 85 F1 | 	sub	objptr, ##1080
08228     F2 1E 02 F1 | 	add	local01, objptr
0822c     04 1E 06 F1 | 	add	local01, #4
08230     0F 1F 02 FB | 	rdlong	local01, local01
08234     11 1E 0E F2 | 	cmp	local01, #17 wz
08238     35 00 00 FF 
0823c     0C E4 85 F1 | 	sub	objptr, ##27148
08240     15 FA 05 56 |  if_ne	mov	result1, #21
08244     90 00 90 5D |  if_ne	jmp	#LR__0750
08248     37 00 00 FF 
0824c     44 E4 05 F1 | 	add	objptr, ##28228
08250     F2 1E 02 FB | 	rdlong	local01, objptr
08254     01 1E 06 F1 | 	add	local01, #1
08258     F2 1E 62 FC | 	wrlong	local01, objptr
0825c     37 00 00 FF 
08260     44 E4 85 F1 | 	sub	objptr, ##28228
08264     54 1D B0 FD | 	call	#_expr
08268     FD 1E 02 F6 | 	mov	local01, result1
0826c                 | ' err=expr() : if err>0 then return err
0826c     01 1E 16 F2 | 	cmp	local01, #1 wc
08270     0F FB 01 36 |  if_ae	mov	result1, local01
08274     60 00 90 3D |  if_ae	jmp	#LR__0750
08278                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08278     37 00 00 FF 
0827c     44 E4 05 F1 | 	add	objptr, ##28228
08280     F2 1E 02 FB | 	rdlong	local01, objptr
08284     03 1E 66 F0 | 	shl	local01, #3
08288     02 00 00 FF 
0828c     38 E4 85 F1 | 	sub	objptr, ##1080
08290     F2 1E 02 F1 | 	add	local01, objptr
08294     04 1E 06 F1 | 	add	local01, #4
08298     0F 1F 02 FB | 	rdlong	local01, local01
0829c     11 1E 0E F2 | 	cmp	local01, #17 wz
082a0     35 00 00 FF 
082a4     0C E4 85 F1 | 	sub	objptr, ##27148
082a8     15 FA 05 56 |  if_ne	mov	result1, #21
082ac     28 00 90 5D |  if_ne	jmp	#LR__0750
082b0     37 00 00 FF 
082b4     44 E4 05 F1 | 	add	objptr, ##28228
082b8     F2 1E 02 FB | 	rdlong	local01, objptr
082bc     01 1E 06 F1 | 	add	local01, #1
082c0     F2 1E 62 FC | 	wrlong	local01, objptr
082c4     37 00 00 FF 
082c8     44 E4 85 F1 | 	sub	objptr, ##28228
082cc     EC 1C B0 FD | 	call	#_expr
082d0                 | ' err=expr() : if err>0 then return err
082d0     01 FA 15 F2 | 	cmp	result1, #1 wc
082d4                 | ' return 0
082d4     00 FA 05 C6 |  if_b	mov	result1, #0
082d8                 | LR__0750
082d8     A7 F0 03 F6 | 	mov	ptra, fp
082dc     B2 00 A0 FD | 	call	#popregs_
082e0                 | _compile_fun_4p_ret
082e0     2D 00 64 FD | 	ret
082e4                 | 
082e4                 | ' 
082e4                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
082e4                 | ' 
082e4                 | ' function compile_fun_varp() as ulong,ulong 
082e4                 | _compile_fun_varp
082e4     03 4A 05 F6 | 	mov	COUNT_, #3
082e8     A8 00 A0 FD | 	call	#pushregs_
082ec     00 1E 06 F6 | 	mov	local01, #0
082f0                 | ' 
082f0                 | ' i=0 : err=0
082f0                 | ' if lparts(ct).token<>token_end then
082f0     37 00 00 FF 
082f4     44 E4 05 F1 | 	add	objptr, ##28228
082f8     F2 20 02 FB | 	rdlong	local02, objptr
082fc     03 20 66 F0 | 	shl	local02, #3
08300     02 00 00 FF 
08304     38 E4 85 F1 | 	sub	objptr, ##1080
08308     F2 20 02 F1 | 	add	local02, objptr
0830c     04 20 06 F1 | 	add	local02, #4
08310     10 21 02 FB | 	rdlong	local02, local02
08314     FE 21 0E F2 | 	cmp	local02, #510 wz
08318     35 00 00 FF 
0831c     0C E4 85 F1 | 	sub	objptr, ##27148
08320     88 00 90 AD |  if_e	jmp	#LR__0761
08324                 | '   do
08324                 | LR__0760
08324     94 1C B0 FD | 	call	#_expr
08328     01 1E 06 F1 | 	add	local01, #1
0832c                 | '     expr()
0832c                 | '     i+=1
0832c                 | '     if lparts(ct).token=token_comma then ct+=1
0832c     37 00 00 FF 
08330     44 E4 05 F1 | 	add	objptr, ##28228
08334     F2 20 02 FB | 	rdlong	local02, objptr
08338     03 20 66 F0 | 	shl	local02, #3
0833c     02 00 00 FF 
08340     38 E4 85 F1 | 	sub	objptr, ##1080
08344     F2 20 02 F1 | 	add	local02, objptr
08348     04 20 06 F1 | 	add	local02, #4
0834c     10 21 02 FB | 	rdlong	local02, local02
08350     11 20 0E F2 | 	cmp	local02, #17 wz
08354     35 00 00 FF 
08358     0C E4 85 F1 | 	sub	objptr, ##27148
0835c     37 00 00 AF 
08360     44 E4 05 A1 |  if_e	add	objptr, ##28228
08364     F2 22 02 AB |  if_e	rdlong	local03, objptr
08368     01 22 06 A1 |  if_e	add	local03, #1
0836c     F2 22 62 AC |  if_e	wrlong	local03, objptr
08370     37 00 00 AF 
08374     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08378                 | '     if lparts(ct).token=token_end then exit loop
08378     37 00 00 FF 
0837c     44 E4 05 F1 | 	add	objptr, ##28228
08380     F2 20 02 FB | 	rdlong	local02, objptr
08384     03 20 66 F0 | 	shl	local02, #3
08388     02 00 00 FF 
0838c     38 E4 85 F1 | 	sub	objptr, ##1080
08390     F2 20 02 F1 | 	add	local02, objptr
08394     04 20 06 F1 | 	add	local02, #4
08398     10 21 02 FB | 	rdlong	local02, local02
0839c     FE 21 0E F2 | 	cmp	local02, #510 wz
083a0     35 00 00 FF 
083a4     0C E4 85 F1 | 	sub	objptr, ##27148
083a8     78 FF 9F 5D |  if_ne	jmp	#LR__0760
083ac                 | LR__0761
083ac                 | ' return i,err
083ac     0F FB 01 F6 | 	mov	result1, local01
083b0     00 FC 05 F6 | 	mov	result2, #0
083b4     A7 F0 03 F6 | 	mov	ptra, fp
083b8     B2 00 A0 FD | 	call	#popregs_
083bc                 | _compile_fun_varp_ret
083bc     2D 00 64 FD | 	ret
083c0                 | 
083c0                 | ' 
083c0                 | ' '----- compile assign to an array element
083c0                 | ' 
083c0                 | ' function compile_array_assign() as ulong 
083c0                 | _compile_array_assign
083c0     0B 4A 05 F6 | 	mov	COUNT_, #11
083c4     A8 00 A0 FD | 	call	#pushregs_
083c8     00 24 06 F6 | 	mov	local04, #0
083cc     00 26 06 F6 | 	mov	local05, #0
083d0     37 00 00 FF 
083d4     44 E4 05 F1 | 	add	objptr, ##28228
083d8     F2 28 02 FB | 	rdlong	local06, objptr
083dc     14 FB 01 F6 | 	mov	result1, local06
083e0     01 FA 85 F1 | 	sub	result1, #1
083e4     03 FA 65 F0 | 	shl	result1, #3
083e8     02 00 00 FF 
083ec     38 E4 85 F1 | 	sub	objptr, ##1080
083f0     F2 FA 01 F1 | 	add	result1, objptr
083f4     FD 2A 02 FB | 	rdlong	local07, result1
083f8                 | ' numpar=0 : err=0
083f8                 | ' varname$=lparts(ct-1).part$
083f8                 | ' if lparts(ct).token=token_lpar then
083f8     03 28 66 F0 | 	shl	local06, #3
083fc     F2 28 02 F1 | 	add	local06, objptr
08400     04 28 06 F1 | 	add	local06, #4
08404     14 29 02 FB | 	rdlong	local06, local06
08408     15 28 0E F2 | 	cmp	local06, #21 wz
0840c     35 00 00 FF 
08410     0C E4 85 F1 | 	sub	objptr, ##27148
08414     F4 01 90 5D |  if_ne	jmp	#LR__0774
08418     37 00 00 FF 
0841c     44 E4 05 F1 | 	add	objptr, ##28228
08420     F2 2C 02 FB | 	rdlong	local08, objptr
08424     01 2C 06 F1 | 	add	local08, #1
08428     F2 2C 62 FC | 	wrlong	local08, objptr
0842c     37 00 00 FF 
08430     44 E4 85 F1 | 	sub	objptr, ##28228
08434                 | '   ct+=1 											' omit this lpar, this is for expr list
08434                 | '   do
08434                 | LR__0770
08434     84 1B B0 FD | 	call	#_expr
08438     37 00 00 FF 
0843c     44 E4 05 F1 | 	add	objptr, ##28228
08440     F2 28 02 FB | 	rdlong	local06, objptr
08444     01 28 06 F1 | 	add	local06, #1
08448     F2 28 62 FC | 	wrlong	local06, objptr
0844c     01 24 06 F1 | 	add	local04, #1
08450     01 28 86 F1 | 	sub	local06, #1
08454     03 28 66 F0 | 	shl	local06, #3
08458     02 00 00 FF 
0845c     38 E4 85 F1 | 	sub	objptr, ##1080
08460     F2 28 02 F1 | 	add	local06, objptr
08464     04 28 06 F1 | 	add	local06, #4
08468     14 2D 02 FB | 	rdlong	local08, local06
0846c     14 2C 0E F2 | 	cmp	local08, #20 wz
08470     35 00 00 FF 
08474     0C E4 85 F1 | 	sub	objptr, ##27148
08478     34 00 90 AD |  if_e	jmp	#LR__0771
0847c     37 00 00 FF 
08480     44 E4 05 F1 | 	add	objptr, ##28228
08484     F2 2C 02 FB | 	rdlong	local08, objptr
08488     03 2C 66 F0 | 	shl	local08, #3
0848c     02 00 00 FF 
08490     38 E4 85 F1 | 	sub	objptr, ##1080
08494     F2 2C 02 F1 | 	add	local08, objptr
08498     04 2C 06 F1 | 	add	local08, #4
0849c     16 2D 02 FB | 	rdlong	local08, local08
084a0     FE 2D 0E F2 | 	cmp	local08, #510 wz
084a4     35 00 00 FF 
084a8     0C E4 85 F1 | 	sub	objptr, ##27148
084ac     84 FF 9F 5D |  if_ne	jmp	#LR__0770
084b0                 | LR__0771
084b0     37 00 00 FF 
084b4     44 E4 05 F1 | 	add	objptr, ##28228
084b8     F2 2C 02 FB | 	rdlong	local08, objptr
084bc     01 2C 06 F1 | 	add	local08, #1
084c0     F2 2C 62 FC | 	wrlong	local08, objptr
084c4     37 00 00 FF 
084c8     44 E4 85 F1 | 	sub	objptr, ##28228
084cc     EC 1A B0 FD | 	call	#_expr
084d0     01 2E 66 F6 | 	neg	local09, #1
084d4     00 30 06 F6 | 	mov	local10, #0
084d8                 | '   ct+=1 : expr()
084d8                 | '   j=-1 : i=0 
084d8                 | '   do 
084d8                 | LR__0772
084d8                 | '     if variables(i).name=varname$ then j=i: exit loop
084d8     18 29 02 F6 | 	mov	local06, local10
084dc     04 28 66 F0 | 	shl	local06, #4
084e0     14 00 00 FF 
084e4     F8 E5 05 F1 | 	add	objptr, ##10744
084e8     F2 28 02 F1 | 	add	local06, objptr
084ec     14 13 02 FB | 	rdlong	arg01, local06
084f0     15 15 02 F6 | 	mov	arg02, local07
084f4     14 00 00 FF 
084f8     F8 E5 85 F1 | 	sub	objptr, ##10744
084fc     AC 90 B1 FD | 	call	#__system___string_cmp
08500     00 FA 0D F2 | 	cmp	result1, #0 wz
08504     18 2F 02 A6 |  if_e	mov	local09, local10
08508     20 00 90 AD |  if_e	jmp	#LR__0773
0850c     01 30 06 F1 | 	add	local10, #1
08510     35 00 00 FF 
08514     08 E4 05 F1 | 	add	objptr, ##27144
08518     F2 2C 02 FB | 	rdlong	local08, objptr
0851c     35 00 00 FF 
08520     08 E4 85 F1 | 	sub	objptr, ##27144
08524     16 31 5A F2 | 	cmps	local10, local08 wcz
08528     AC FF 9F ED |  if_be	jmp	#LR__0772
0852c                 | LR__0773
0852c     17 1F 02 F6 | 	mov	local01, local09
08530     12 21 02 F6 | 	mov	local02, local04
08534     17 22 06 F6 | 	mov	local03, #23
08538     0F 2D 02 F6 | 	mov	local08, local01
0853c     10 33 02 F6 | 	mov	local11, local02
08540     11 2B 02 F6 | 	mov	local07, local03
08544     4A 00 00 FF 
08548     7C E4 05 F1 | 	add	objptr, ##38012
0854c     F2 1E 02 FB | 	rdlong	local01, objptr
08550     0F 2F 02 F6 | 	mov	local09, local01
08554     01 2E 66 F0 | 	shl	local09, #1
08558     0F 2F 02 F1 | 	add	local09, local01
0855c     02 2E 66 F0 | 	shl	local09, #2
08560     03 00 00 FF 
08564     00 E4 85 F1 | 	sub	objptr, ##1536
08568     F2 2E 02 F1 | 	add	local09, objptr
0856c     17 2D 62 FC | 	wrlong	local08, local09
08570     03 00 00 FF 
08574     00 E4 05 F1 | 	add	objptr, ##1536
08578     F2 1E 02 FB | 	rdlong	local01, objptr
0857c     0F 2F 02 F6 | 	mov	local09, local01
08580     01 2E 66 F0 | 	shl	local09, #1
08584     0F 2F 02 F1 | 	add	local09, local01
08588     02 2E 66 F0 | 	shl	local09, #2
0858c     03 00 00 FF 
08590     00 E4 85 F1 | 	sub	objptr, ##1536
08594     F2 2E 02 F1 | 	add	local09, objptr
08598     04 2E 06 F1 | 	add	local09, #4
0859c     17 33 62 FC | 	wrlong	local11, local09
085a0     03 00 00 FF 
085a4     00 E4 05 F1 | 	add	objptr, ##1536
085a8     F2 32 02 FB | 	rdlong	local11, objptr
085ac     19 1F 02 F6 | 	mov	local01, local11
085b0     01 1E 66 F0 | 	shl	local01, #1
085b4     19 1F 02 F1 | 	add	local01, local11
085b8     02 1E 66 F0 | 	shl	local01, #2
085bc     03 00 00 FF 
085c0     00 E4 85 F1 | 	sub	objptr, ##1536
085c4     F2 1E 02 F1 | 	add	local01, objptr
085c8     08 1E 06 F1 | 	add	local01, #8
085cc     0F 2B 62 FC | 	wrlong	local07, local01
085d0     03 00 00 FF 
085d4     00 E4 05 F1 | 	add	objptr, ##1536
085d8     F2 2C 02 FB | 	rdlong	local08, objptr
085dc     01 2C 06 F1 | 	add	local08, #1
085e0     F2 2C 62 FC | 	wrlong	local08, objptr
085e4                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
085e4                 | '   if numpar>3 then err=45
085e4     04 24 16 F2 | 	cmp	local04, #4 wc
085e8     2D 26 06 36 |  if_ae	mov	local05, #45
085ec                 | '   if i>varnum then err=20
085ec     15 00 00 FF 
085f0     74 E4 85 F1 | 	sub	objptr, ##10868
085f4     F2 2C 02 FB | 	rdlong	local08, objptr
085f8     35 00 00 FF 
085fc     08 E4 85 F1 | 	sub	objptr, ##27144
08600     16 31 5A F2 | 	cmps	local10, local08 wcz
08604     14 26 06 16 |  if_a	mov	local05, #20
08608     04 00 90 FD | 	jmp	#LR__0775
0860c                 | LR__0774
0860c     0E 26 06 F6 | 	mov	local05, #14
08610                 | LR__0775
08610                 | ' return err
08610     13 FB 01 F6 | 	mov	result1, local05
08614     A7 F0 03 F6 | 	mov	ptra, fp
08618     B2 00 A0 FD | 	call	#popregs_
0861c                 | _compile_array_assign_ret
0861c     2D 00 64 FD | 	ret
08620                 | 
08620                 | ' 
08620                 | ' '----- compile print command with its ";" and "," modifiers
08620                 | ' 
08620                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08620                 | _compile_print
08620     0B 4A 05 F6 | 	mov	COUNT_, #11
08624     A8 00 A0 FD | 	call	#pushregs_
08628     00 1E 06 F6 | 	mov	local01, #0
0862c     1D 22 06 F6 | 	mov	local03, #29
08630                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08630                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08630     37 00 00 FF 
08634     44 E4 05 F1 | 	add	objptr, ##28228
08638     F2 24 02 FB | 	rdlong	local04, objptr
0863c     03 24 66 F0 | 	shl	local04, #3
08640     02 00 00 FF 
08644     38 E4 85 F1 | 	sub	objptr, ##1080
08648     F2 24 02 F1 | 	add	local04, objptr
0864c     04 24 06 F1 | 	add	local04, #4
08650     12 25 02 FB | 	rdlong	local04, local04
08654     FE 25 0E F2 | 	cmp	local04, #510 wz
08658     35 00 00 FF 
0865c     0C E4 85 F1 | 	sub	objptr, ##27148
08660     68 01 90 5D |  if_ne	jmp	#LR__0780
08664     20 22 06 F6 | 	mov	local03, #32
08668     0F 27 02 F6 | 	mov	local05, local01
0866c     10 29 02 F6 | 	mov	local06, local02
08670     11 2B 02 F6 | 	mov	local07, local03
08674     4A 00 00 FF 
08678     7C E4 05 F1 | 	add	objptr, ##38012
0867c     F2 2C 02 FB | 	rdlong	local08, objptr
08680     16 2F 02 F6 | 	mov	local09, local08
08684     01 2E 66 F0 | 	shl	local09, #1
08688     16 2F 02 F1 | 	add	local09, local08
0868c     02 2E 66 F0 | 	shl	local09, #2
08690     03 00 00 FF 
08694     00 E4 85 F1 | 	sub	objptr, ##1536
08698     F2 2E 02 F1 | 	add	local09, objptr
0869c     17 27 62 FC | 	wrlong	local05, local09
086a0     03 00 00 FF 
086a4     00 E4 05 F1 | 	add	objptr, ##1536
086a8     F2 26 02 FB | 	rdlong	local05, objptr
086ac     13 31 02 F6 | 	mov	local10, local05
086b0     01 30 66 F0 | 	shl	local10, #1
086b4     13 31 02 F1 | 	add	local10, local05
086b8     02 30 66 F0 | 	shl	local10, #2
086bc     03 00 00 FF 
086c0     00 E4 85 F1 | 	sub	objptr, ##1536
086c4     F2 30 02 F1 | 	add	local10, objptr
086c8     04 30 06 F1 | 	add	local10, #4
086cc     18 29 62 FC | 	wrlong	local06, local10
086d0     03 00 00 FF 
086d4     00 E4 05 F1 | 	add	objptr, ##1536
086d8     F2 26 02 FB | 	rdlong	local05, objptr
086dc     13 33 02 F6 | 	mov	local11, local05
086e0     01 32 66 F0 | 	shl	local11, #1
086e4     13 33 02 F1 | 	add	local11, local05
086e8     02 32 66 F0 | 	shl	local11, #2
086ec     03 00 00 FF 
086f0     00 E4 85 F1 | 	sub	objptr, ##1536
086f4     F2 32 02 F1 | 	add	local11, objptr
086f8     08 32 06 F1 | 	add	local11, #8
086fc     19 2B 62 FC | 	wrlong	local07, local11
08700     03 00 00 FF 
08704     00 E4 05 F1 | 	add	objptr, ##1536
08708     F2 26 02 FB | 	rdlong	local05, objptr
0870c     01 26 06 F1 | 	add	local05, #1
08710     F2 26 62 FC | 	wrlong	local05, objptr
08714     44 22 06 F6 | 	mov	local03, #68
08718     0F 27 02 F6 | 	mov	local05, local01
0871c     10 29 02 F6 | 	mov	local06, local02
08720     11 2B 02 F6 | 	mov	local07, local03
08724     F2 2C 02 FB | 	rdlong	local08, objptr
08728     16 2F 02 F6 | 	mov	local09, local08
0872c     01 2E 66 F0 | 	shl	local09, #1
08730     16 2F 02 F1 | 	add	local09, local08
08734     02 2E 66 F0 | 	shl	local09, #2
08738     03 00 00 FF 
0873c     00 E4 85 F1 | 	sub	objptr, ##1536
08740     F2 2E 02 F1 | 	add	local09, objptr
08744     17 27 62 FC | 	wrlong	local05, local09
08748     03 00 00 FF 
0874c     00 E4 05 F1 | 	add	objptr, ##1536
08750     F2 32 02 FB | 	rdlong	local11, objptr
08754     19 31 02 F6 | 	mov	local10, local11
08758     01 30 66 F0 | 	shl	local10, #1
0875c     19 31 02 F1 | 	add	local10, local11
08760     02 30 66 F0 | 	shl	local10, #2
08764     03 00 00 FF 
08768     00 E4 85 F1 | 	sub	objptr, ##1536
0876c     F2 30 02 F1 | 	add	local10, objptr
08770     04 30 06 F1 | 	add	local10, #4
08774     18 29 62 FC | 	wrlong	local06, local10
08778     03 00 00 FF 
0877c     00 E4 05 F1 | 	add	objptr, ##1536
08780     F2 30 02 FB | 	rdlong	local10, objptr
08784     18 33 02 F6 | 	mov	local11, local10
08788     01 32 66 F0 | 	shl	local11, #1
0878c     18 33 02 F1 | 	add	local11, local10
08790     02 32 66 F0 | 	shl	local11, #2
08794     03 00 00 FF 
08798     00 E4 85 F1 | 	sub	objptr, ##1536
0879c     F2 32 02 F1 | 	add	local11, objptr
087a0     08 32 06 F1 | 	add	local11, #8
087a4     19 2B 62 FC | 	wrlong	local07, local11
087a8     03 00 00 FF 
087ac     00 E4 05 F1 | 	add	objptr, ##1536
087b0     F2 26 02 FB | 	rdlong	local05, objptr
087b4     01 26 06 F1 | 	add	local05, #1
087b8     F2 26 62 FC | 	wrlong	local05, objptr
087bc     4A 00 00 FF 
087c0     7C E4 85 F1 | 	sub	objptr, ##38012
087c4     00 FA 05 F6 | 	mov	result1, #0
087c8     20 05 90 FD | 	jmp	#LR__0787
087cc                 | LR__0780
087cc                 | ' do
087cc                 | LR__0781
087cc     EC 17 B0 FD | 	call	#_expr
087d0                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
087d0                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
087d0     37 00 00 FF 
087d4     44 E4 05 F1 | 	add	objptr, ##28228
087d8     F2 24 02 FB | 	rdlong	local04, objptr
087dc     03 24 66 F0 | 	shl	local04, #3
087e0     02 00 00 FF 
087e4     38 E4 85 F1 | 	sub	objptr, ##1080
087e8     F2 24 02 F1 | 	add	local04, objptr
087ec     04 24 06 F1 | 	add	local04, #4
087f0     12 2D 02 FB | 	rdlong	local08, local04
087f4     11 2C 0E F2 | 	cmp	local08, #17 wz
087f8     35 00 00 FF 
087fc     0C E4 85 F1 | 	sub	objptr, ##27148
08800     60 01 90 5D |  if_ne	jmp	#LR__0782
08804     21 22 06 F6 | 	mov	local03, #33
08808     0F 27 02 F6 | 	mov	local05, local01
0880c     10 29 02 F6 | 	mov	local06, local02
08810     11 2B 02 F6 | 	mov	local07, local03
08814     4A 00 00 FF 
08818     7C E4 05 F1 | 	add	objptr, ##38012
0881c     F2 2C 02 FB | 	rdlong	local08, objptr
08820     16 2F 02 F6 | 	mov	local09, local08
08824     01 2E 66 F0 | 	shl	local09, #1
08828     16 2F 02 F1 | 	add	local09, local08
0882c     02 2E 66 F0 | 	shl	local09, #2
08830     03 00 00 FF 
08834     00 E4 85 F1 | 	sub	objptr, ##1536
08838     F2 2E 02 F1 | 	add	local09, objptr
0883c     17 27 62 FC | 	wrlong	local05, local09
08840     03 00 00 FF 
08844     00 E4 05 F1 | 	add	objptr, ##1536
08848     F2 32 02 FB | 	rdlong	local11, objptr
0884c     19 31 02 F6 | 	mov	local10, local11
08850     01 30 66 F0 | 	shl	local10, #1
08854     19 31 02 F1 | 	add	local10, local11
08858     02 30 66 F0 | 	shl	local10, #2
0885c     03 00 00 FF 
08860     00 E4 85 F1 | 	sub	objptr, ##1536
08864     F2 30 02 F1 | 	add	local10, objptr
08868     04 30 06 F1 | 	add	local10, #4
0886c     18 29 62 FC | 	wrlong	local06, local10
08870     03 00 00 FF 
08874     00 E4 05 F1 | 	add	objptr, ##1536
08878     F2 26 02 FB | 	rdlong	local05, objptr
0887c     13 33 02 F6 | 	mov	local11, local05
08880     01 32 66 F0 | 	shl	local11, #1
08884     13 33 02 F1 | 	add	local11, local05
08888     02 32 66 F0 | 	shl	local11, #2
0888c     03 00 00 FF 
08890     00 E4 85 F1 | 	sub	objptr, ##1536
08894     F2 32 02 F1 | 	add	local11, objptr
08898     08 32 06 F1 | 	add	local11, #8
0889c     19 2B 62 FC | 	wrlong	local07, local11
088a0     03 00 00 FF 
088a4     00 E4 05 F1 | 	add	objptr, ##1536
088a8     F2 26 02 FB | 	rdlong	local05, objptr
088ac     01 26 06 F1 | 	add	local05, #1
088b0     F2 26 62 FC | 	wrlong	local05, objptr
088b4     44 22 06 F6 | 	mov	local03, #68
088b8     0F 27 02 F6 | 	mov	local05, local01
088bc     10 29 02 F6 | 	mov	local06, local02
088c0     11 2B 02 F6 | 	mov	local07, local03
088c4     F2 2C 02 FB | 	rdlong	local08, objptr
088c8     16 2F 02 F6 | 	mov	local09, local08
088cc     01 2E 66 F0 | 	shl	local09, #1
088d0     16 2F 02 F1 | 	add	local09, local08
088d4     02 2E 66 F0 | 	shl	local09, #2
088d8     03 00 00 FF 
088dc     00 E4 85 F1 | 	sub	objptr, ##1536
088e0     F2 2E 02 F1 | 	add	local09, objptr
088e4     17 27 62 FC | 	wrlong	local05, local09
088e8     03 00 00 FF 
088ec     00 E4 05 F1 | 	add	objptr, ##1536
088f0     F2 32 02 FB | 	rdlong	local11, objptr
088f4     19 31 02 F6 | 	mov	local10, local11
088f8     01 30 66 F0 | 	shl	local10, #1
088fc     19 31 02 F1 | 	add	local10, local11
08900     02 30 66 F0 | 	shl	local10, #2
08904     03 00 00 FF 
08908     00 E4 85 F1 | 	sub	objptr, ##1536
0890c     F2 30 02 F1 | 	add	local10, objptr
08910     04 30 06 F1 | 	add	local10, #4
08914     18 29 62 FC | 	wrlong	local06, local10
08918     03 00 00 FF 
0891c     00 E4 05 F1 | 	add	objptr, ##1536
08920     F2 30 02 FB | 	rdlong	local10, objptr
08924     18 33 02 F6 | 	mov	local11, local10
08928     01 32 66 F0 | 	shl	local11, #1
0892c     18 33 02 F1 | 	add	local11, local10
08930     02 32 66 F0 | 	shl	local11, #2
08934     03 00 00 FF 
08938     00 E4 85 F1 | 	sub	objptr, ##1536
0893c     F2 32 02 F1 | 	add	local11, objptr
08940     08 32 06 F1 | 	add	local11, #8
08944     19 2B 62 FC | 	wrlong	local07, local11
08948     03 00 00 FF 
0894c     00 E4 05 F1 | 	add	objptr, ##1536
08950     F2 26 02 FB | 	rdlong	local05, objptr
08954     01 26 06 F1 | 	add	local05, #1
08958     F2 26 62 FC | 	wrlong	local05, objptr
0895c     4A 00 00 FF 
08960     7C E4 85 F1 | 	sub	objptr, ##38012
08964                 | LR__0782
08964                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08964     37 00 00 FF 
08968     44 E4 05 F1 | 	add	objptr, ##28228
0896c     F2 24 02 FB | 	rdlong	local04, objptr
08970     03 24 66 F0 | 	shl	local04, #3
08974     02 00 00 FF 
08978     38 E4 85 F1 | 	sub	objptr, ##1080
0897c     F2 24 02 F1 | 	add	local04, objptr
08980     04 24 06 F1 | 	add	local04, #4
08984     12 2D 02 FB | 	rdlong	local08, local04
08988     12 2C 0E F2 | 	cmp	local08, #18 wz
0898c     35 00 00 FF 
08990     0C E4 85 F1 | 	sub	objptr, ##27148
08994     60 01 90 5D |  if_ne	jmp	#LR__0783
08998     22 22 06 F6 | 	mov	local03, #34
0899c     0F 27 02 F6 | 	mov	local05, local01
089a0     10 29 02 F6 | 	mov	local06, local02
089a4     11 2B 02 F6 | 	mov	local07, local03
089a8     4A 00 00 FF 
089ac     7C E4 05 F1 | 	add	objptr, ##38012
089b0     F2 2C 02 FB | 	rdlong	local08, objptr
089b4     16 2F 02 F6 | 	mov	local09, local08
089b8     01 2E 66 F0 | 	shl	local09, #1
089bc     16 2F 02 F1 | 	add	local09, local08
089c0     02 2E 66 F0 | 	shl	local09, #2
089c4     03 00 00 FF 
089c8     00 E4 85 F1 | 	sub	objptr, ##1536
089cc     F2 2E 02 F1 | 	add	local09, objptr
089d0     17 27 62 FC | 	wrlong	local05, local09
089d4     03 00 00 FF 
089d8     00 E4 05 F1 | 	add	objptr, ##1536
089dc     F2 32 02 FB | 	rdlong	local11, objptr
089e0     19 31 02 F6 | 	mov	local10, local11
089e4     01 30 66 F0 | 	shl	local10, #1
089e8     19 31 02 F1 | 	add	local10, local11
089ec     02 30 66 F0 | 	shl	local10, #2
089f0     03 00 00 FF 
089f4     00 E4 85 F1 | 	sub	objptr, ##1536
089f8     F2 30 02 F1 | 	add	local10, objptr
089fc     04 30 06 F1 | 	add	local10, #4
08a00     18 29 62 FC | 	wrlong	local06, local10
08a04     03 00 00 FF 
08a08     00 E4 05 F1 | 	add	objptr, ##1536
08a0c     F2 26 02 FB | 	rdlong	local05, objptr
08a10     13 33 02 F6 | 	mov	local11, local05
08a14     01 32 66 F0 | 	shl	local11, #1
08a18     13 33 02 F1 | 	add	local11, local05
08a1c     02 32 66 F0 | 	shl	local11, #2
08a20     03 00 00 FF 
08a24     00 E4 85 F1 | 	sub	objptr, ##1536
08a28     F2 32 02 F1 | 	add	local11, objptr
08a2c     08 32 06 F1 | 	add	local11, #8
08a30     19 2B 62 FC | 	wrlong	local07, local11
08a34     03 00 00 FF 
08a38     00 E4 05 F1 | 	add	objptr, ##1536
08a3c     F2 26 02 FB | 	rdlong	local05, objptr
08a40     01 26 06 F1 | 	add	local05, #1
08a44     F2 26 62 FC | 	wrlong	local05, objptr
08a48     44 22 06 F6 | 	mov	local03, #68
08a4c     0F 27 02 F6 | 	mov	local05, local01
08a50     10 29 02 F6 | 	mov	local06, local02
08a54     11 2B 02 F6 | 	mov	local07, local03
08a58     F2 2C 02 FB | 	rdlong	local08, objptr
08a5c     16 2F 02 F6 | 	mov	local09, local08
08a60     01 2E 66 F0 | 	shl	local09, #1
08a64     16 2F 02 F1 | 	add	local09, local08
08a68     02 2E 66 F0 | 	shl	local09, #2
08a6c     03 00 00 FF 
08a70     00 E4 85 F1 | 	sub	objptr, ##1536
08a74     F2 2E 02 F1 | 	add	local09, objptr
08a78     17 27 62 FC | 	wrlong	local05, local09
08a7c     03 00 00 FF 
08a80     00 E4 05 F1 | 	add	objptr, ##1536
08a84     F2 32 02 FB | 	rdlong	local11, objptr
08a88     19 31 02 F6 | 	mov	local10, local11
08a8c     01 30 66 F0 | 	shl	local10, #1
08a90     19 31 02 F1 | 	add	local10, local11
08a94     02 30 66 F0 | 	shl	local10, #2
08a98     03 00 00 FF 
08a9c     00 E4 85 F1 | 	sub	objptr, ##1536
08aa0     F2 30 02 F1 | 	add	local10, objptr
08aa4     04 30 06 F1 | 	add	local10, #4
08aa8     18 29 62 FC | 	wrlong	local06, local10
08aac     03 00 00 FF 
08ab0     00 E4 05 F1 | 	add	objptr, ##1536
08ab4     F2 30 02 FB | 	rdlong	local10, objptr
08ab8     18 33 02 F6 | 	mov	local11, local10
08abc     01 32 66 F0 | 	shl	local11, #1
08ac0     18 33 02 F1 | 	add	local11, local10
08ac4     02 32 66 F0 | 	shl	local11, #2
08ac8     03 00 00 FF 
08acc     00 E4 85 F1 | 	sub	objptr, ##1536
08ad0     F2 32 02 F1 | 	add	local11, objptr
08ad4     08 32 06 F1 | 	add	local11, #8
08ad8     19 2B 62 FC | 	wrlong	local07, local11
08adc     03 00 00 FF 
08ae0     00 E4 05 F1 | 	add	objptr, ##1536
08ae4     F2 26 02 FB | 	rdlong	local05, objptr
08ae8     01 26 06 F1 | 	add	local05, #1
08aec     F2 26 62 FC | 	wrlong	local05, objptr
08af0     4A 00 00 FF 
08af4     7C E4 85 F1 | 	sub	objptr, ##38012
08af8                 | LR__0783
08af8                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08af8     37 00 00 FF 
08afc     44 E4 05 F1 | 	add	objptr, ##28228
08b00     F2 24 02 FB | 	rdlong	local04, objptr
08b04     03 24 66 F0 | 	shl	local04, #3
08b08     02 00 00 FF 
08b0c     38 E4 85 F1 | 	sub	objptr, ##1080
08b10     F2 24 02 F1 | 	add	local04, objptr
08b14     04 24 06 F1 | 	add	local04, #4
08b18     12 2D 02 FB | 	rdlong	local08, local04
08b1c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08b20     35 00 00 FF 
08b24     0C E4 85 F1 | 	sub	objptr, ##27148
08b28     B8 00 90 5D |  if_ne	jmp	#LR__0784
08b2c     44 22 06 F6 | 	mov	local03, #68
08b30     0F 27 02 F6 | 	mov	local05, local01
08b34     10 29 02 F6 | 	mov	local06, local02
08b38     11 2B 02 F6 | 	mov	local07, local03
08b3c     4A 00 00 FF 
08b40     7C E4 05 F1 | 	add	objptr, ##38012
08b44     F2 2C 02 FB | 	rdlong	local08, objptr
08b48     16 2F 02 F6 | 	mov	local09, local08
08b4c     01 2E 66 F0 | 	shl	local09, #1
08b50     16 2F 02 F1 | 	add	local09, local08
08b54     02 2E 66 F0 | 	shl	local09, #2
08b58     03 00 00 FF 
08b5c     00 E4 85 F1 | 	sub	objptr, ##1536
08b60     F2 2E 02 F1 | 	add	local09, objptr
08b64     17 27 62 FC | 	wrlong	local05, local09
08b68     03 00 00 FF 
08b6c     00 E4 05 F1 | 	add	objptr, ##1536
08b70     F2 32 02 FB | 	rdlong	local11, objptr
08b74     19 31 02 F6 | 	mov	local10, local11
08b78     01 30 66 F0 | 	shl	local10, #1
08b7c     19 31 02 F1 | 	add	local10, local11
08b80     02 30 66 F0 | 	shl	local10, #2
08b84     03 00 00 FF 
08b88     00 E4 85 F1 | 	sub	objptr, ##1536
08b8c     F2 30 02 F1 | 	add	local10, objptr
08b90     04 30 06 F1 | 	add	local10, #4
08b94     18 29 62 FC | 	wrlong	local06, local10
08b98     03 00 00 FF 
08b9c     00 E4 05 F1 | 	add	objptr, ##1536
08ba0     F2 30 02 FB | 	rdlong	local10, objptr
08ba4     18 33 02 F6 | 	mov	local11, local10
08ba8     01 32 66 F0 | 	shl	local11, #1
08bac     18 33 02 F1 | 	add	local11, local10
08bb0     02 32 66 F0 | 	shl	local11, #2
08bb4     03 00 00 FF 
08bb8     00 E4 85 F1 | 	sub	objptr, ##1536
08bbc     F2 32 02 F1 | 	add	local11, objptr
08bc0     08 32 06 F1 | 	add	local11, #8
08bc4     19 2B 62 FC | 	wrlong	local07, local11
08bc8     03 00 00 FF 
08bcc     00 E4 05 F1 | 	add	objptr, ##1536
08bd0     F2 26 02 FB | 	rdlong	local05, objptr
08bd4     01 26 06 F1 | 	add	local05, #1
08bd8     F2 26 62 FC | 	wrlong	local05, objptr
08bdc     4A 00 00 FF 
08be0     7C E4 85 F1 | 	sub	objptr, ##38012
08be4                 | LR__0784
08be4                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08be4     37 00 00 FF 
08be8     44 E4 05 F1 | 	add	objptr, ##28228
08bec     F2 24 02 FB | 	rdlong	local04, objptr
08bf0     03 24 66 F0 | 	shl	local04, #3
08bf4     02 00 00 FF 
08bf8     38 E4 85 F1 | 	sub	objptr, ##1080
08bfc     F2 24 02 F1 | 	add	local04, objptr
08c00     04 24 06 F1 | 	add	local04, #4
08c04     12 2D 02 FB | 	rdlong	local08, local04
08c08     11 2C 0E F2 | 	cmp	local08, #17 wz
08c0c     35 00 00 FF 
08c10     0C E4 85 F1 | 	sub	objptr, ##27148
08c14     6C 00 90 AD |  if_e	jmp	#LR__0785
08c18     37 00 00 FF 
08c1c     44 E4 05 F1 | 	add	objptr, ##28228
08c20     F2 2C 02 FB | 	rdlong	local08, objptr
08c24     03 2C 66 F0 | 	shl	local08, #3
08c28     02 00 00 FF 
08c2c     38 E4 85 F1 | 	sub	objptr, ##1080
08c30     F2 2C 02 F1 | 	add	local08, objptr
08c34     04 2C 06 F1 | 	add	local08, #4
08c38     16 2D 02 FB | 	rdlong	local08, local08
08c3c     12 2C 0E F2 | 	cmp	local08, #18 wz
08c40     35 00 00 FF 
08c44     0C E4 85 F1 | 	sub	objptr, ##27148
08c48     38 00 90 AD |  if_e	jmp	#LR__0785
08c4c     37 00 00 FF 
08c50     44 E4 05 F1 | 	add	objptr, ##28228
08c54     F2 32 02 FB | 	rdlong	local11, objptr
08c58     03 32 66 F0 | 	shl	local11, #3
08c5c     02 00 00 FF 
08c60     38 E4 85 F1 | 	sub	objptr, ##1080
08c64     F2 32 02 F1 | 	add	local11, objptr
08c68     04 32 06 F1 | 	add	local11, #4
08c6c     19 33 02 FB | 	rdlong	local11, local11
08c70     FE 33 0E F2 | 	cmp	local11, #510 wz
08c74     35 00 00 FF 
08c78     0C E4 85 F1 | 	sub	objptr, ##27148
08c7c     16 FA 05 56 |  if_ne	mov	result1, #22
08c80     68 00 90 5D |  if_ne	jmp	#LR__0787
08c84                 | LR__0785
08c84     37 00 00 FF 
08c88     44 E4 05 F1 | 	add	objptr, ##28228
08c8c     F2 24 02 FB | 	rdlong	local04, objptr
08c90     01 24 06 F1 | 	add	local04, #1
08c94     F2 24 62 FC | 	wrlong	local04, objptr
08c98     03 24 66 F0 | 	shl	local04, #3
08c9c     02 00 00 FF 
08ca0     38 E4 85 F1 | 	sub	objptr, ##1080
08ca4     F2 24 02 F1 | 	add	local04, objptr
08ca8     04 24 06 F1 | 	add	local04, #4
08cac     12 2D 02 FB | 	rdlong	local08, local04
08cb0     FE 2D 0E F2 | 	cmp	local08, #510 wz
08cb4     35 00 00 FF 
08cb8     0C E4 85 F1 | 	sub	objptr, ##27148
08cbc     28 00 90 AD |  if_e	jmp	#LR__0786
08cc0     37 00 00 FF 
08cc4     44 E4 05 F1 | 	add	objptr, ##28228
08cc8     F2 32 02 FB | 	rdlong	local11, objptr
08ccc     0E 00 00 FF 
08cd0     1C E4 05 F1 | 	add	objptr, ##7196
08cd4     F2 30 02 FB | 	rdlong	local10, objptr
08cd8     45 00 00 FF 
08cdc     60 E4 85 F1 | 	sub	objptr, ##35424
08ce0     18 33 52 F2 | 	cmps	local11, local10 wc
08ce4     E4 FA 9F CD |  if_b	jmp	#LR__0781
08ce8                 | LR__0786
08ce8                 | ' return 0
08ce8     00 FA 05 F6 | 	mov	result1, #0
08cec                 | LR__0787
08cec     A7 F0 03 F6 | 	mov	ptra, fp
08cf0     B2 00 A0 FD | 	call	#popregs_
08cf4                 | _compile_print_ret
08cf4     2D 00 64 FD | 	ret
08cf8                 | 
08cf8                 | ' 
08cf8                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08cf8                 | ' 
08cf8                 | ' function compile_if(aline as ulong) as ulong  
08cf8                 | _compile_if
08cf8     09 4A 05 F6 | 	mov	COUNT_, #9
08cfc     A8 00 A0 FD | 	call	#pushregs_
08d00                 | _compile_if_enter
08d00     09 25 02 F6 | 	mov	local04, arg01
08d04                 | ' return expr()
08d04     B4 12 B0 FD | 	call	#_expr
08d08     37 00 00 FF 
08d0c     44 E4 05 F1 | 	add	objptr, ##28228
08d10     F2 14 02 FB | 	rdlong	arg02, objptr
08d14     0A 27 02 F6 | 	mov	local05, arg02
08d18     03 26 66 F0 | 	shl	local05, #3
08d1c     02 00 00 FF 
08d20     38 E4 85 F1 | 	sub	objptr, ##1080
08d24     F2 26 02 F1 | 	add	local05, objptr
08d28     04 26 06 F1 | 	add	local05, #4
08d2c     13 27 02 FB | 	rdlong	local05, local05
08d30     01 14 06 F1 | 	add	arg02, #1
08d34     02 00 00 FF 
08d38     38 E4 05 F1 | 	add	objptr, ##1080
08d3c     F2 14 62 FC | 	wrlong	arg02, objptr
08d40     37 00 00 FF 
08d44     44 E4 85 F1 | 	sub	objptr, ##28228
08d48                 | ' 
08d48                 | ' err=compile_fun_1p()
08d48                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08d48     5B 26 0E F2 | 	cmp	local05, #91 wz
08d4c     34 FA 05 56 |  if_ne	mov	result1, #52
08d50     20 01 90 5D |  if_ne	jmp	#LR__0792
08d54     58 22 06 F6 | 	mov	local03, #88
08d58     0F 29 02 F6 | 	mov	local06, local01
08d5c     10 2B 02 F6 | 	mov	local07, local02
08d60     11 15 02 F6 | 	mov	arg02, local03
08d64     4A 00 00 FF 
08d68     7C E4 05 F1 | 	add	objptr, ##38012
08d6c     F2 12 02 FB | 	rdlong	arg01, objptr
08d70     09 2D 02 F6 | 	mov	local08, arg01
08d74     01 2C 66 F0 | 	shl	local08, #1
08d78     09 2D 02 F1 | 	add	local08, arg01
08d7c     02 2C 66 F0 | 	shl	local08, #2
08d80     03 00 00 FF 
08d84     00 E4 85 F1 | 	sub	objptr, ##1536
08d88     F2 2C 02 F1 | 	add	local08, objptr
08d8c     16 29 62 FC | 	wrlong	local06, local08
08d90     03 00 00 FF 
08d94     00 E4 05 F1 | 	add	objptr, ##1536
08d98     F2 28 02 FB | 	rdlong	local06, objptr
08d9c     14 13 02 F6 | 	mov	arg01, local06
08da0     01 12 66 F0 | 	shl	arg01, #1
08da4     14 13 02 F1 | 	add	arg01, local06
08da8     02 12 66 F0 | 	shl	arg01, #2
08dac     03 00 00 FF 
08db0     00 E4 85 F1 | 	sub	objptr, ##1536
08db4     F2 12 02 F1 | 	add	arg01, objptr
08db8     04 12 06 F1 | 	add	arg01, #4
08dbc     09 2B 62 FC | 	wrlong	local07, arg01
08dc0     03 00 00 FF 
08dc4     00 E4 05 F1 | 	add	objptr, ##1536
08dc8     F2 28 02 FB | 	rdlong	local06, objptr
08dcc     14 13 02 F6 | 	mov	arg01, local06
08dd0     01 12 66 F0 | 	shl	arg01, #1
08dd4     14 13 02 F1 | 	add	arg01, local06
08dd8     02 12 66 F0 | 	shl	arg01, #2
08ddc     03 00 00 FF 
08de0     00 E4 85 F1 | 	sub	objptr, ##1536
08de4     F2 12 02 F1 | 	add	arg01, objptr
08de8     08 12 06 F1 | 	add	arg01, #8
08dec     09 15 62 FC | 	wrlong	arg02, arg01
08df0     03 00 00 FF 
08df4     00 E4 05 F1 | 	add	objptr, ##1536
08df8     F2 28 02 FB | 	rdlong	local06, objptr
08dfc     01 28 06 F1 | 	add	local06, #1
08e00     F2 28 62 FC | 	wrlong	local06, objptr
08e04                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08e04                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08e04     13 00 00 FF 
08e08     38 E4 85 F1 | 	sub	objptr, ##9784
08e0c     F2 14 02 FB | 	rdlong	arg02, objptr
08e10     01 14 06 F1 | 	add	arg02, #1
08e14     03 14 66 F0 | 	shl	arg02, #3
08e18     02 00 00 FF 
08e1c     38 E4 85 F1 | 	sub	objptr, ##1080
08e20     F2 14 02 F1 | 	add	arg02, objptr
08e24     0A 13 02 FB | 	rdlong	arg01, arg02
08e28     35 00 00 FF 
08e2c     0C E4 85 F1 | 	sub	objptr, ##27148
08e30                 | ' 
08e30                 | ' select case s
08e30     89 01 00 FF 
08e34     B8 14 06 F6 | 	mov	arg02, ##@LR__5241
08e38     70 87 B1 FD | 	call	#__system___string_cmp
08e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e40     1B FA 05 A6 |  if_e	mov	result1, #27
08e44     00 FA 05 56 |  if_ne	mov	result1, #0
08e48     00 FA 0D F2 | 	cmp	result1, #0 wz
08e4c     10 00 90 AD |  if_e	jmp	#LR__0790
08e50     05 12 06 F6 | 	mov	arg01, #5
08e54     88 EC BF FD | 	call	#_compile_immediate_assign
08e58     FD 2E 02 F6 | 	mov	local09, result1
08e5c     10 00 90 FD | 	jmp	#LR__0791
08e60                 | LR__0790
08e60     05 12 06 F6 | 	mov	arg01, #5
08e64     12 15 02 F6 | 	mov	arg02, local04
08e68     30 E3 BF FD | 	call	#_compile_immediate
08e6c     FD 2E 02 F6 | 	mov	local09, result1
08e70                 | LR__0791
08e70                 | ' return err
08e70     17 FB 01 F6 | 	mov	result1, local09
08e74                 | LR__0792
08e74     A7 F0 03 F6 | 	mov	ptra, fp
08e78     B2 00 A0 FD | 	call	#popregs_
08e7c                 | _compile_if_ret
08e7c     2D 00 64 FD | 	ret
08e80                 | 
08e80                 | ' 
08e80                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08e80                 | ' 
08e80                 | ' function compile_else(aline as ulong) as ulong  
08e80                 | _compile_else
08e80     07 4A 05 F6 | 	mov	COUNT_, #7
08e84     A8 00 A0 FD | 	call	#pushregs_
08e88                 | _compile_else_enter
08e88     09 25 02 F6 | 	mov	local04, arg01
08e8c     5A 22 06 F6 | 	mov	local03, #90
08e90     0F 27 02 F6 | 	mov	local05, local01
08e94     10 29 02 F6 | 	mov	local06, local02
08e98     11 1F 02 F6 | 	mov	local01, local03
08e9c     4A 00 00 FF 
08ea0     7C E4 05 F1 | 	add	objptr, ##38012
08ea4     F2 14 02 FB | 	rdlong	arg02, objptr
08ea8     0A 13 02 F6 | 	mov	arg01, arg02
08eac     01 12 66 F0 | 	shl	arg01, #1
08eb0     0A 13 02 F1 | 	add	arg01, arg02
08eb4     02 12 66 F0 | 	shl	arg01, #2
08eb8     03 00 00 FF 
08ebc     00 E4 85 F1 | 	sub	objptr, ##1536
08ec0     F2 12 02 F1 | 	add	arg01, objptr
08ec4     09 27 62 FC | 	wrlong	local05, arg01
08ec8     03 00 00 FF 
08ecc     00 E4 05 F1 | 	add	objptr, ##1536
08ed0     F2 26 02 FB | 	rdlong	local05, objptr
08ed4     13 15 02 F6 | 	mov	arg02, local05
08ed8     01 14 66 F0 | 	shl	arg02, #1
08edc     13 15 02 F1 | 	add	arg02, local05
08ee0     02 14 66 F0 | 	shl	arg02, #2
08ee4     03 00 00 FF 
08ee8     00 E4 85 F1 | 	sub	objptr, ##1536
08eec     F2 14 02 F1 | 	add	arg02, objptr
08ef0     04 14 06 F1 | 	add	arg02, #4
08ef4     0A 29 62 FC | 	wrlong	local06, arg02
08ef8     03 00 00 FF 
08efc     00 E4 05 F1 | 	add	objptr, ##1536
08f00     F2 28 02 FB | 	rdlong	local06, objptr
08f04     14 27 02 F6 | 	mov	local05, local06
08f08     01 26 66 F0 | 	shl	local05, #1
08f0c     14 27 02 F1 | 	add	local05, local06
08f10     02 26 66 F0 | 	shl	local05, #2
08f14     03 00 00 FF 
08f18     00 E4 85 F1 | 	sub	objptr, ##1536
08f1c     F2 26 02 F1 | 	add	local05, objptr
08f20     08 26 06 F1 | 	add	local05, #8
08f24     13 1F 62 FC | 	wrlong	local01, local05
08f28     03 00 00 FF 
08f2c     00 E4 05 F1 | 	add	objptr, ##1536
08f30     F2 26 02 FB | 	rdlong	local05, objptr
08f34     01 26 06 F1 | 	add	local05, #1
08f38     F2 26 62 FC | 	wrlong	local05, objptr
08f3c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08f3c                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08f3c     13 00 00 FF 
08f40     38 E4 85 F1 | 	sub	objptr, ##9784
08f44     F2 28 02 FB | 	rdlong	local06, objptr
08f48     01 28 06 F1 | 	add	local06, #1
08f4c     03 28 66 F0 | 	shl	local06, #3
08f50     02 00 00 FF 
08f54     38 E4 85 F1 | 	sub	objptr, ##1080
08f58     F2 28 02 F1 | 	add	local06, objptr
08f5c     14 13 02 FB | 	rdlong	arg01, local06
08f60     35 00 00 FF 
08f64     0C E4 85 F1 | 	sub	objptr, ##27148
08f68                 | ' 
08f68                 | ' select case s
08f68     89 01 00 FF 
08f6c     B8 14 06 F6 | 	mov	arg02, ##@LR__5241
08f70     38 86 B1 FD | 	call	#__system___string_cmp
08f74     00 FA 0D F2 | 	cmp	result1, #0 wz
08f78     1B FA 05 A6 |  if_e	mov	result1, #27
08f7c     00 FA 05 56 |  if_ne	mov	result1, #0
08f80     00 FA 0D F2 | 	cmp	result1, #0 wz
08f84     10 00 90 AD |  if_e	jmp	#LR__0800
08f88     05 12 06 F6 | 	mov	arg01, #5
08f8c     50 EB BF FD | 	call	#_compile_immediate_assign
08f90     FD 2A 02 F6 | 	mov	local07, result1
08f94     10 00 90 FD | 	jmp	#LR__0801
08f98                 | LR__0800
08f98     05 12 06 F6 | 	mov	arg01, #5
08f9c     12 15 02 F6 | 	mov	arg02, local04
08fa0     F8 E1 BF FD | 	call	#_compile_immediate
08fa4     FD 2A 02 F6 | 	mov	local07, result1
08fa8                 | LR__0801
08fa8                 | ' return err
08fa8     15 FB 01 F6 | 	mov	result1, local07
08fac     A7 F0 03 F6 | 	mov	ptra, fp
08fb0     B2 00 A0 FD | 	call	#popregs_
08fb4                 | _compile_else_ret
08fb4     2D 00 64 FD | 	ret
08fb8                 | 
08fb8                 | ' 
08fb8                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08fb8                 | ' 
08fb8                 | ' function compile_dim() as ulong  
08fb8                 | _compile_dim
08fb8     11 4A 05 F6 | 	mov	COUNT_, #17
08fbc     A8 00 A0 FD | 	call	#pushregs_
08fc0     01 1E 06 F6 | 	mov	local01, #1
08fc4     01 20 06 F6 | 	mov	local02, #1
08fc8     01 22 06 F6 | 	mov	local03, #1
08fcc                 | ' 
08fcc                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08fcc                 | ' if isname(lparts(ct).part$) then 
08fcc     37 00 00 FF 
08fd0     44 E4 05 F1 | 	add	objptr, ##28228
08fd4     F2 18 02 FB | 	rdlong	arg04, objptr
08fd8     03 18 66 F0 | 	shl	arg04, #3
08fdc     02 00 00 FF 
08fe0     38 E4 85 F1 | 	sub	objptr, ##1080
08fe4     F2 18 02 F1 | 	add	arg04, objptr
08fe8     0C 13 02 FB | 	rdlong	arg01, arg04
08fec     35 00 00 FF 
08ff0     0C E4 85 F1 | 	sub	objptr, ##27148
08ff4     FC CF BF FD | 	call	#_isname
08ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ffc     78 05 90 AD |  if_e	jmp	#LR__0833
09000     37 00 00 FF 
09004     44 E4 05 F1 | 	add	objptr, ##28228
09008     F2 24 02 FB | 	rdlong	local04, objptr
0900c     03 24 66 F0 | 	shl	local04, #3
09010     02 00 00 FF 
09014     38 E4 85 F1 | 	sub	objptr, ##1080
09018     F2 24 02 F1 | 	add	local04, objptr
0901c     12 27 02 FB | 	rdlong	local05, local04
09020     01 28 66 F6 | 	neg	local06, #1
09024                 | '   varname2$=lparts(ct).part$ 
09024                 | '   j=-1
09024                 | '   if varnum>0 then
09024     04 E4 85 F1 | 	sub	objptr, #4
09028     F2 2A 02 FB | 	rdlong	local07, objptr
0902c     35 00 00 FF 
09030     08 E4 85 F1 | 	sub	objptr, ##27144
09034     01 2A 56 F2 | 	cmps	local07, #1 wc
09038     58 00 90 CD |  if_b	jmp	#LR__0812
0903c                 | '     for i=0 to varnum-1
0903c     00 2C 06 F6 | 	mov	local08, #0
09040     35 00 00 FF 
09044     08 E4 05 F1 | 	add	objptr, ##27144
09048     F2 2E 02 FB | 	rdlong	local09, objptr
0904c     35 00 00 FF 
09050     08 E4 85 F1 | 	sub	objptr, ##27144
09054                 | LR__0810
09054     17 2D 52 F2 | 	cmps	local08, local09 wc
09058     38 00 90 3D |  if_ae	jmp	#LR__0811
0905c                 | '       if variables(i).name=varname2$ then j=i : exit
0905c     16 25 02 F6 | 	mov	local04, local08
09060     04 24 66 F0 | 	shl	local04, #4
09064     14 00 00 FF 
09068     F8 E5 05 F1 | 	add	objptr, ##10744
0906c     F2 24 02 F1 | 	add	local04, objptr
09070     12 13 02 FB | 	rdlong	arg01, local04
09074     13 15 02 F6 | 	mov	arg02, local05
09078     14 00 00 FF 
0907c     F8 E5 85 F1 | 	sub	objptr, ##10744
09080     28 85 B1 FD | 	call	#__system___string_cmp
09084     00 FA 0D F2 | 	cmp	result1, #0 wz
09088     16 29 02 A6 |  if_e	mov	local06, local08
0908c     01 2C 06 51 |  if_ne	add	local08, #1
09090     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09094                 | LR__0811
09094                 | LR__0812
09094                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09094     FF FF 7F FF 
09098     FF 29 0E F2 | 	cmp	local06, ##-1 wz
0909c     35 00 00 AF 
090a0     08 E4 05 A1 |  if_e	add	objptr, ##27144
090a4     F2 28 02 AB |  if_e	rdlong	local06, objptr
090a8     35 00 00 AF 
090ac     08 E4 85 A1 |  if_e	sub	objptr, ##27144
090b0     78 00 90 AD |  if_e	jmp	#LR__0813
090b4     00 12 06 F6 | 	mov	arg01, #0
090b8     F4 E1 B1 FD | 	call	#__system___getiolock_0568
090bc     FD 12 02 F6 | 	mov	arg01, result1
090c0     C0 84 B1 FD | 	call	#__system___lockmem
090c4     8B 01 00 FF 
090c8     DA 14 06 F6 | 	mov	arg02, ##@LR__5477
090cc     00 12 06 F6 | 	mov	arg01, #0
090d0     00 16 06 F6 | 	mov	arg03, #0
090d4     A0 91 B1 FD | 	call	#__system___basic_print_string
090d8     51 00 00 FF 
090dc     C4 E5 05 F1 | 	add	objptr, ##41924
090e0     F2 14 02 FB | 	rdlong	arg02, objptr
090e4     51 00 00 FF 
090e8     C4 E5 85 F1 | 	sub	objptr, ##41924
090ec     00 12 06 F6 | 	mov	arg01, #0
090f0     00 16 06 F6 | 	mov	arg03, #0
090f4     0A 18 06 F6 | 	mov	arg04, #10
090f8     00 92 B1 FD | 	call	#__system___basic_print_unsigned
090fc     8B 01 00 FF 
09100     E8 14 06 F6 | 	mov	arg02, ##@LR__5478
09104     00 12 06 F6 | 	mov	arg01, #0
09108     00 16 06 F6 | 	mov	arg03, #0
0910c     68 91 B1 FD | 	call	#__system___basic_print_string
09110     00 12 06 F6 | 	mov	arg01, #0
09114     0A 14 06 F6 | 	mov	arg02, #10
09118     00 16 06 F6 | 	mov	arg03, #0
0911c     00 91 B1 FD | 	call	#__system___basic_print_char
09120     00 12 06 F6 | 	mov	arg01, #0
09124     88 E1 B1 FD | 	call	#__system___getiolock_0568
09128     FD 00 68 FC | 	wrlong	#0, result1
0912c                 | LR__0813
0912c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0912c     37 00 00 FF 
09130     44 E4 05 F1 | 	add	objptr, ##28228
09134     F2 14 02 FB | 	rdlong	arg02, objptr
09138     01 14 06 F1 | 	add	arg02, #1
0913c     03 14 66 F0 | 	shl	arg02, #3
09140     02 00 00 FF 
09144     38 E4 85 F1 | 	sub	objptr, ##1080
09148     F2 14 02 F1 | 	add	arg02, objptr
0914c     0A 13 02 FB | 	rdlong	arg01, arg02
09150     8B 01 00 FF 
09154     09 15 06 F6 | 	mov	arg02, ##@LR__5479
09158     35 00 00 FF 
0915c     0C E4 85 F1 | 	sub	objptr, ##27148
09160     48 84 B1 FD | 	call	#__system___string_cmp
09164     00 FA 0D F2 | 	cmp	result1, #0 wz
09168     44 00 90 AD |  if_e	jmp	#LR__0814
0916c     37 00 00 FF 
09170     44 E4 05 F1 | 	add	objptr, ##28228
09174     F2 2E 02 FB | 	rdlong	local09, objptr
09178     01 2E 06 F1 | 	add	local09, #1
0917c     03 2E 66 F0 | 	shl	local09, #3
09180     02 00 00 FF 
09184     38 E4 85 F1 | 	sub	objptr, ##1080
09188     F2 2E 02 F1 | 	add	local09, objptr
0918c     17 13 02 FB | 	rdlong	arg01, local09
09190     8B 01 00 FF 
09194     0B 15 06 F6 | 	mov	arg02, ##@LR__5480
09198     35 00 00 FF 
0919c     0C E4 85 F1 | 	sub	objptr, ##27148
091a0     08 84 B1 FD | 	call	#__system___string_cmp
091a4     00 FA 0D F2 | 	cmp	result1, #0 wz
091a8     2B FA 05 56 |  if_ne	mov	result1, #43
091ac     D0 04 90 5D |  if_ne	jmp	#LR__0835
091b0                 | LR__0814
091b0                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
091b0     37 00 00 FF 
091b4     44 E4 05 F1 | 	add	objptr, ##28228
091b8     F2 14 02 FB | 	rdlong	arg02, objptr
091bc     01 14 06 F1 | 	add	arg02, #1
091c0     03 14 66 F0 | 	shl	arg02, #3
091c4     02 00 00 FF 
091c8     38 E4 85 F1 | 	sub	objptr, ##1080
091cc     F2 14 02 F1 | 	add	arg02, objptr
091d0     0A 13 02 FB | 	rdlong	arg01, arg02
091d4     8B 01 00 FF 
091d8     0E 15 06 F6 | 	mov	arg02, ##@LR__5481
091dc     35 00 00 FF 
091e0     0C E4 85 F1 | 	sub	objptr, ##27148
091e4     C4 83 B1 FD | 	call	#__system___string_cmp
091e8     00 FA 0D F2 | 	cmp	result1, #0 wz
091ec     37 00 00 AF 
091f0     44 E4 05 A1 |  if_e	add	objptr, ##28228
091f4     F2 30 02 AB |  if_e	rdlong	local10, objptr
091f8     37 00 00 AF 
091fc     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09200     01 30 06 A1 |  if_e	add	local10, #1
09204     5C 01 90 AD |  if_e	jmp	#LR__0819
09208     37 00 00 FF 
0920c     44 E4 05 F1 | 	add	objptr, ##28228
09210     F2 30 02 FB | 	rdlong	local10, objptr
09214     37 00 00 FF 
09218     44 E4 85 F1 | 	sub	objptr, ##28228
0921c     02 30 06 F1 | 	add	local10, #2
09220     00 32 06 F6 | 	mov	local11, #0
09224                 | '   l=ct+2 : m=0 : do
09224                 | LR__0815
09224                 | '   if isdec(lparts(l).part$) then 
09224     18 25 02 F6 | 	mov	local04, local10
09228     03 24 66 F0 | 	shl	local04, #3
0922c     35 00 00 FF 
09230     0C E4 05 F1 | 	add	objptr, ##27148
09234     F2 24 02 F1 | 	add	local04, objptr
09238     12 13 02 FB | 	rdlong	arg01, local04
0923c     35 00 00 FF 
09240     0C E4 85 F1 | 	sub	objptr, ##27148
09244     B0 D6 BF FD | 	call	#_isdec
09248     00 FA 0D F2 | 	cmp	result1, #0 wz
0924c     44 00 90 AD |  if_e	jmp	#LR__0816
09250     19 35 02 F6 | 	mov	local12, local11
09254     0F 35 06 F1 | 	add	local12, #local01
09258     18 2F 02 F6 | 	mov	local09, local10
0925c     03 2E 66 F0 | 	shl	local09, #3
09260     35 00 00 FF 
09264     0C E4 05 F1 | 	add	objptr, ##27148
09268     F2 2E 02 F1 | 	add	local09, objptr
0926c     17 13 02 FB | 	rdlong	arg01, local09
09270     00 14 06 F6 | 	mov	arg02, #0
09274     35 00 00 FF 
09278     0C E4 85 F1 | 	sub	objptr, ##27148
0927c     38 B7 B1 FD | 	call	#__system____builtin_atoi
09280     FD 36 02 F6 | 	mov	local13, result1
09284                 | 	'.live	local13
09284                 | 	'.live	local12
09284     00 34 8E F9 | 	altd	local12, #0
09288     1B 35 02 F6 | 	mov	local12, local13
0928c     01 32 06 F1 | 	add	local11, #1
09290     08 00 90 FD | 	jmp	#LR__0817
09294                 | LR__0816
09294                 | '     return(17)
09294     11 FA 05 F6 | 	mov	result1, #17
09298     E4 03 90 FD | 	jmp	#LR__0835
0929c                 | LR__0817
0929c                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0929c     18 25 02 F6 | 	mov	local04, local10
092a0     01 24 06 F1 | 	add	local04, #1
092a4     03 24 66 F0 | 	shl	local04, #3
092a8     35 00 00 FF 
092ac     0C E4 05 F1 | 	add	objptr, ##27148
092b0     F2 24 02 F1 | 	add	local04, objptr
092b4     12 13 02 FB | 	rdlong	arg01, local04
092b8     8B 01 00 FF 
092bc     11 15 06 F6 | 	mov	arg02, ##@LR__5482
092c0     35 00 00 FF 
092c4     0C E4 85 F1 | 	sub	objptr, ##27148
092c8     E0 82 B1 FD | 	call	#__system___string_cmp
092cc     00 FA 0D F2 | 	cmp	result1, #0 wz
092d0     3C 00 90 AD |  if_e	jmp	#LR__0818
092d4     18 37 02 F6 | 	mov	local13, local10
092d8     01 36 06 F1 | 	add	local13, #1
092dc     03 36 66 F0 | 	shl	local13, #3
092e0     35 00 00 FF 
092e4     0C E4 05 F1 | 	add	objptr, ##27148
092e8     F2 36 02 F1 | 	add	local13, objptr
092ec     1B 13 02 FB | 	rdlong	arg01, local13
092f0     8B 01 00 FF 
092f4     13 15 06 F6 | 	mov	arg02, ##@LR__5483
092f8     35 00 00 FF 
092fc     0C E4 85 F1 | 	sub	objptr, ##27148
09300     A8 82 B1 FD | 	call	#__system___string_cmp
09304     00 FA 0D F2 | 	cmp	result1, #0 wz
09308     2C FA 05 56 |  if_ne	mov	result1, #44
0930c     70 03 90 5D |  if_ne	jmp	#LR__0835
09310                 | LR__0818
09310     02 30 06 F1 | 	add	local10, #2
09314     18 25 02 F6 | 	mov	local04, local10
09318     01 24 86 F1 | 	sub	local04, #1
0931c     03 24 66 F0 | 	shl	local04, #3
09320     35 00 00 FF 
09324     0C E4 05 F1 | 	add	objptr, ##27148
09328     F2 24 02 F1 | 	add	local04, objptr
0932c     12 13 02 FB | 	rdlong	arg01, local04
09330     8B 01 00 FF 
09334     15 15 06 F6 | 	mov	arg02, ##@LR__5484
09338     35 00 00 FF 
0933c     0C E4 85 F1 | 	sub	objptr, ##27148
09340     68 82 B1 FD | 	call	#__system___string_cmp
09344     00 FA 0D F2 | 	cmp	result1, #0 wz
09348     03 32 56 52 |  if_ne	cmps	local11, #3 wc
0934c     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0815
09350                 | '   if m>3 then return 45
09350     04 32 56 F2 | 	cmps	local11, #4 wc
09354     2D FA 05 36 |  if_ae	mov	result1, #45
09358     24 03 90 3D |  if_ae	jmp	#LR__0835
0935c     00 39 06 F6 | 	mov	local14, #256
09360     0C 3A 06 F6 | 	mov	local15, #12
09364                 | LR__0819
09364                 | '   arraytype=array_no_type : esize=12
09364                 | ' 1350 
09364                 | '   if lparts(l).part$="as" then
09364     18 25 02 F6 | 	mov	local04, local10
09368     03 24 66 F0 | 	shl	local04, #3
0936c     35 00 00 FF 
09370     0C E4 05 F1 | 	add	objptr, ##27148
09374     F2 24 02 F1 | 	add	local04, objptr
09378     12 13 02 FB | 	rdlong	arg01, local04
0937c     8B 01 00 FF 
09380     17 15 06 F6 | 	mov	arg02, ##@LR__5485
09384     35 00 00 FF 
09388     0C E4 85 F1 | 	sub	objptr, ##27148
0938c     1C 82 B1 FD | 	call	#__system___string_cmp
09390     00 FA 0D F2 | 	cmp	result1, #0 wz
09394     E8 01 90 5D |  if_ne	jmp	#LR__0834
09398                 | '     select case lparts(l+1).part$
09398     18 35 02 F6 | 	mov	local12, local10
0939c     01 34 06 F1 | 	add	local12, #1
093a0     03 34 66 F0 | 	shl	local12, #3
093a4     35 00 00 FF 
093a8     0C E4 05 F1 | 	add	objptr, ##27148
093ac     F2 34 02 F1 | 	add	local12, objptr
093b0     1A 3D 02 FB | 	rdlong	local16, local12
093b4     8B 01 00 FF 
093b8     1A 15 06 F6 | 	mov	arg02, ##@LR__5486
093bc     1E 13 02 F6 | 	mov	arg01, local16
093c0     35 00 00 FF 
093c4     0C E4 85 F1 | 	sub	objptr, ##27148
093c8     E0 81 B1 FD | 	call	#__system___string_cmp
093cc     00 FA 0D F2 | 	cmp	result1, #0 wz
093d0     0C 01 90 AD |  if_e	jmp	#LR__0820
093d4     8B 01 00 FF 
093d8     1F 15 06 F6 | 	mov	arg02, ##@LR__5487
093dc     1E 13 02 F6 | 	mov	arg01, local16
093e0     C8 81 B1 FD | 	call	#__system___string_cmp
093e4     00 FA 0D F2 | 	cmp	result1, #0 wz
093e8     00 01 90 AD |  if_e	jmp	#LR__0821
093ec     8B 01 00 FF 
093f0     25 15 06 F6 | 	mov	arg02, ##@LR__5488
093f4     1E 13 02 F6 | 	mov	arg01, local16
093f8     B0 81 B1 FD | 	call	#__system___string_cmp
093fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09400     F4 00 90 AD |  if_e	jmp	#LR__0822
09404     8B 01 00 FF 
09408     2B 15 06 F6 | 	mov	arg02, ##@LR__5489
0940c     1E 13 02 F6 | 	mov	arg01, local16
09410     98 81 B1 FD | 	call	#__system___string_cmp
09414     00 FA 0D F2 | 	cmp	result1, #0 wz
09418     E8 00 90 AD |  if_e	jmp	#LR__0823
0941c     8B 01 00 FF 
09420     32 15 06 F6 | 	mov	arg02, ##@LR__5490
09424     1E 13 02 F6 | 	mov	arg01, local16
09428     80 81 B1 FD | 	call	#__system___string_cmp
0942c     00 FA 0D F2 | 	cmp	result1, #0 wz
09430     DC 00 90 AD |  if_e	jmp	#LR__0824
09434     8B 01 00 FF 
09438     37 15 06 F6 | 	mov	arg02, ##@LR__5491
0943c     1E 13 02 F6 | 	mov	arg01, local16
09440     68 81 B1 FD | 	call	#__system___string_cmp
09444     00 FA 0D F2 | 	cmp	result1, #0 wz
09448     D0 00 90 AD |  if_e	jmp	#LR__0825
0944c     8B 01 00 FF 
09450     3F 15 06 F6 | 	mov	arg02, ##@LR__5492
09454     1E 13 02 F6 | 	mov	arg01, local16
09458     50 81 B1 FD | 	call	#__system___string_cmp
0945c     00 FA 0D F2 | 	cmp	result1, #0 wz
09460     C4 00 90 AD |  if_e	jmp	#LR__0826
09464     8B 01 00 FF 
09468     45 15 06 F6 | 	mov	arg02, ##@LR__5493
0946c     1E 13 02 F6 | 	mov	arg01, local16
09470     38 81 B1 FD | 	call	#__system___string_cmp
09474     00 FA 0D F2 | 	cmp	result1, #0 wz
09478     B8 00 90 AD |  if_e	jmp	#LR__0827
0947c     8B 01 00 FF 
09480     4B 15 06 F6 | 	mov	arg02, ##@LR__5494
09484     1E 13 02 F6 | 	mov	arg01, local16
09488     20 81 B1 FD | 	call	#__system___string_cmp
0948c     00 FA 0D F2 | 	cmp	result1, #0 wz
09490     AC 00 90 AD |  if_e	jmp	#LR__0828
09494     8B 01 00 FF 
09498     52 15 06 F6 | 	mov	arg02, ##@LR__5495
0949c     1E 13 02 F6 | 	mov	arg01, local16
094a0     08 81 B1 FD | 	call	#__system___string_cmp
094a4     00 FA 0D F2 | 	cmp	result1, #0 wz
094a8     A0 00 90 AD |  if_e	jmp	#LR__0829
094ac     8B 01 00 FF 
094b0     59 15 06 F6 | 	mov	arg02, ##@LR__5496
094b4     1E 13 02 F6 | 	mov	arg01, local16
094b8     F0 80 B1 FD | 	call	#__system___string_cmp
094bc     00 FA 0D F2 | 	cmp	result1, #0 wz
094c0     94 00 90 AD |  if_e	jmp	#LR__0830
094c4     8B 01 00 FF 
094c8     60 15 06 F6 | 	mov	arg02, ##@LR__5497
094cc     1E 13 02 F6 | 	mov	arg01, local16
094d0     D8 80 B1 FD | 	call	#__system___string_cmp
094d4     00 FA 0D F2 | 	cmp	result1, #0 wz
094d8     88 00 90 AD |  if_e	jmp	#LR__0831
094dc     90 00 90 FD | 	jmp	#LR__0832
094e0                 | LR__0820
094e0     01 39 06 F6 | 	mov	local14, #257
094e4     01 3A 06 F6 | 	mov	local15, #1
094e8     94 00 90 FD | 	jmp	#LR__0834
094ec                 | LR__0821
094ec     02 39 06 F6 | 	mov	local14, #258
094f0     01 3A 06 F6 | 	mov	local15, #1
094f4     88 00 90 FD | 	jmp	#LR__0834
094f8                 | LR__0822
094f8     03 39 06 F6 | 	mov	local14, #259
094fc     02 3A 06 F6 | 	mov	local15, #2
09500     7C 00 90 FD | 	jmp	#LR__0834
09504                 | LR__0823
09504     04 39 06 F6 | 	mov	local14, #260
09508     02 3A 06 F6 | 	mov	local15, #2
0950c     70 00 90 FD | 	jmp	#LR__0834
09510                 | LR__0824
09510     05 39 06 F6 | 	mov	local14, #261
09514     04 3A 06 F6 | 	mov	local15, #4
09518     64 00 90 FD | 	jmp	#LR__0834
0951c                 | LR__0825
0951c     05 39 06 F6 | 	mov	local14, #261
09520     04 3A 06 F6 | 	mov	local15, #4
09524     58 00 90 FD | 	jmp	#LR__0834
09528                 | LR__0826
09528     06 39 06 F6 | 	mov	local14, #262
0952c     04 3A 06 F6 | 	mov	local15, #4
09530     4C 00 90 FD | 	jmp	#LR__0834
09534                 | LR__0827
09534     07 39 06 F6 | 	mov	local14, #263
09538     08 3A 06 F6 | 	mov	local15, #8
0953c     40 00 90 FD | 	jmp	#LR__0834
09540                 | LR__0828
09540     08 39 06 F6 | 	mov	local14, #264
09544     08 3A 06 F6 | 	mov	local15, #8
09548     34 00 90 FD | 	jmp	#LR__0834
0954c                 | LR__0829
0954c     09 39 06 F6 | 	mov	local14, #265
09550     04 3A 06 F6 | 	mov	local15, #4
09554     28 00 90 FD | 	jmp	#LR__0834
09558                 | LR__0830
09558     0A 39 06 F6 | 	mov	local14, #266
0955c     08 3A 06 F6 | 	mov	local15, #8
09560     1C 00 90 FD | 	jmp	#LR__0834
09564                 | LR__0831
09564     0B 39 06 F6 | 	mov	local14, #267
09568     04 3A 06 F6 | 	mov	local15, #4
0956c     10 00 90 FD | 	jmp	#LR__0834
09570                 | LR__0832
09570     2F FA 05 F6 | 	mov	result1, #47
09574     08 01 90 FD | 	jmp	#LR__0835
09578                 | LR__0833
09578                 | '   return 46
09578     2E FA 05 F6 | 	mov	result1, #46
0957c     00 01 90 FD | 	jmp	#LR__0835
09580                 | LR__0834
09580     0F 3B 02 FD | 	qmul	local15, local01
09584     18 2A 62 FD | 	getqx	local07
09588     10 2B 02 FD | 	qmul	local07, local02
0958c     18 3C 62 FD | 	getqx	local16
09590     11 3D 02 FD | 	qmul	local16, local03
09594     51 00 00 FF 
09598     AC E5 05 F1 | 	add	objptr, ##41900
0959c     F2 3E 02 FB | 	rdlong	local17, objptr
095a0     1C 15 02 F6 | 	mov	arg02, local14
095a4     18 3C 62 FD | 	getqx	local16
095a8     1E 3F 82 F1 | 	sub	local17, local16
095ac     10 3E 86 F1 | 	sub	local17, #16
095b0     0F 3E 26 F5 | 	andn	local17, #15
095b4     F2 3E 62 FC | 	wrlong	local17, objptr
095b8     51 00 00 FF 
095bc     AC E5 85 F1 | 	sub	objptr, ##41900
095c0     1F 13 02 F6 | 	mov	arg01, local17
095c4     D0 4B B1 FD | 	call	#_psdpoke
095c8     1F 13 02 F6 | 	mov	arg01, local17
095cc     02 12 06 F1 | 	add	arg01, #2
095d0     1D 15 02 F6 | 	mov	arg02, local15
095d4     C0 4B B1 FD | 	call	#_psdpoke
095d8     1F 13 02 F6 | 	mov	arg01, local17
095dc     04 12 06 F1 | 	add	arg01, #4
095e0     0F 15 02 F6 | 	mov	arg02, local01
095e4     68 4B B1 FD | 	call	#_pslpoke
095e8     1F 13 02 F6 | 	mov	arg01, local17
095ec     08 12 06 F1 | 	add	arg01, #8
095f0     10 15 02 F6 | 	mov	arg02, local02
095f4     58 4B B1 FD | 	call	#_pslpoke
095f8     1F 13 02 F6 | 	mov	arg01, local17
095fc     0C 12 06 F1 | 	add	arg01, #12
09600     11 15 02 F6 | 	mov	arg02, local03
09604     48 4B B1 FD | 	call	#_pslpoke
09608     14 35 02 F6 | 	mov	local12, local06
0960c     04 34 66 F0 | 	shl	local12, #4
09610     14 00 00 FF 
09614     F8 E5 05 F1 | 	add	objptr, ##10744
09618     F2 34 02 F1 | 	add	local12, objptr
0961c     1A 27 62 FC | 	wrlong	local05, local12
09620     14 35 02 F6 | 	mov	local12, local06
09624     04 34 66 F0 | 	shl	local12, #4
09628     F2 34 02 F1 | 	add	local12, objptr
0962c     04 34 06 F1 | 	add	local12, #4
09630     1A 3F 62 FC | 	wrlong	local17, local12
09634     14 35 02 F6 | 	mov	local12, local06
09638     04 34 66 F0 | 	shl	local12, #4
0963c     F2 34 02 F1 | 	add	local12, objptr
09640     0C 34 06 F1 | 	add	local12, #12
09644     1A 39 62 FC | 	wrlong	local14, local12
09648                 | ' memtop=arrayptr
09648                 | ' psdpoke arrayptr,arraytype 
09648                 | ' psdpoke arrayptr+2,esize 
09648                 | ' pslpoke arrayptr+4,dims(0)
09648                 | ' pslpoke arrayptr+8,dims(1)
09648                 | ' pslpoke arrayptr+12,dims(2)
09648                 | ' variables(j).name=varname2$
09648                 | ' variables(j).value.uresult=arrayptr
09648                 | ' variables(j).vartype=arraytype
09648                 | ' if j=varnum then varnum+=1
09648     20 00 00 FF 
0964c     10 E4 05 F1 | 	add	objptr, ##16400
09650     F2 2A 02 FB | 	rdlong	local07, objptr
09654     35 00 00 FF 
09658     08 E4 85 F1 | 	sub	objptr, ##27144
0965c     15 29 0A F2 | 	cmp	local06, local07 wz
09660     35 00 00 AF 
09664     08 E4 05 A1 |  if_e	add	objptr, ##27144
09668     F2 2A 02 AB |  if_e	rdlong	local07, objptr
0966c     01 2A 06 A1 |  if_e	add	local07, #1
09670     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09674     35 00 00 AF 
09678     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0967c                 | ' return 0
0967c     00 FA 05 F6 | 	mov	result1, #0
09680                 | LR__0835
09680     A7 F0 03 F6 | 	mov	ptra, fp
09684     B2 00 A0 FD | 	call	#popregs_
09688                 | _compile_dim_ret
09688     2D 00 64 FD | 	ret
0968c                 | 
0968c                 | ' 
0968c                 | ' '----- compile 'for' command. 
0968c                 | ' 
0968c                 | ' function compile_for() as ulong  
0968c                 | _compile_for
0968c     05 4A 05 F6 | 	mov	COUNT_, #5
09690     A8 00 A0 FD | 	call	#pushregs_
09694                 | ' 
09694                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09694     37 00 00 FF 
09698     44 E4 05 F1 | 	add	objptr, ##28228
0969c     F2 14 02 FB | 	rdlong	arg02, objptr
096a0     01 14 06 F1 | 	add	arg02, #1
096a4     03 14 66 F0 | 	shl	arg02, #3
096a8     02 00 00 FF 
096ac     38 E4 85 F1 | 	sub	objptr, ##1080
096b0     F2 14 02 F1 | 	add	arg02, objptr
096b4     0A 13 02 FB | 	rdlong	arg01, arg02
096b8     35 00 00 FF 
096bc     0C E4 85 F1 | 	sub	objptr, ##27148
096c0                 | ' 
096c0                 | ' select case s
096c0     89 01 00 FF 
096c4     B8 14 06 F6 | 	mov	arg02, ##@LR__5241
096c8     E0 7E B1 FD | 	call	#__system___string_cmp
096cc     00 FA 0D F2 | 	cmp	result1, #0 wz
096d0     1B FA 05 A6 |  if_e	mov	result1, #27
096d4     00 FA 05 56 |  if_ne	mov	result1, #0
096d8     00 FA 0D F2 | 	cmp	result1, #0 wz
096dc     0C 00 90 AD |  if_e	jmp	#LR__0840
096e0     05 12 06 F6 | 	mov	arg01, #5
096e4     F8 E3 BF FD | 	call	#_compile_immediate_assign
096e8     08 00 90 FD | 	jmp	#LR__0841
096ec                 | LR__0840
096ec     20 FA 05 F6 | 	mov	result1, #32
096f0     D0 02 90 FD | 	jmp	#LR__0845
096f4                 | LR__0841
096f4     4A 00 00 FF 
096f8     7C E4 05 F1 | 	add	objptr, ##38012
096fc     F2 14 02 FB | 	rdlong	arg02, objptr
09700     0A 13 02 F6 | 	mov	arg01, arg02
09704     01 12 86 F1 | 	sub	arg01, #1
09708     09 25 02 F6 | 	mov	local04, arg01
0970c     01 24 66 F0 | 	shl	local04, #1
09710     09 25 02 F1 | 	add	local04, arg01
09714     02 24 66 F0 | 	shl	local04, #2
09718     03 00 00 FF 
0971c     00 E4 85 F1 | 	sub	objptr, ##1536
09720     F2 24 02 F1 | 	add	local04, objptr
09724     12 1F 02 FB | 	rdlong	local01, local04
09728     04 24 06 F1 | 	add	local04, #4
0972c     12 25 02 FB | 	rdlong	local04, local04
09730     01 14 86 F1 | 	sub	arg02, #1
09734     0A 13 02 F6 | 	mov	arg01, arg02
09738     01 12 66 F0 | 	shl	arg01, #1
0973c     0A 13 02 F1 | 	add	arg01, arg02
09740     02 12 66 F0 | 	shl	arg01, #2
09744     F2 12 02 F1 | 	add	arg01, objptr
09748     08 12 06 F1 | 	add	arg01, #8
0974c     09 15 02 FB | 	rdlong	arg02, arg01
09750     12 21 02 F6 | 	mov	local02, local04
09754     0A 23 02 F6 | 	mov	local03, arg02
09758                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09758     17 22 0E F2 | 	cmp	local03, #23 wz
0975c     47 00 00 FF 
09760     7C E4 85 F1 | 	sub	objptr, ##36476
09764     22 FA 05 56 |  if_ne	mov	result1, #34
09768     58 02 90 5D |  if_ne	jmp	#LR__0845
0976c     0F 27 02 F6 | 	mov	local05, local01
09770                 | ' varnum=t1.result.uresult
09770                 | ' if lparts(ct).part$<>"to" then return 33
09770     37 00 00 FF 
09774     44 E4 05 F1 | 	add	objptr, ##28228
09778     F2 1E 02 FB | 	rdlong	local01, objptr
0977c     03 1E 66 F0 | 	shl	local01, #3
09780     02 00 00 FF 
09784     38 E4 85 F1 | 	sub	objptr, ##1080
09788     F2 1E 02 F1 | 	add	local01, objptr
0978c     0F 13 02 FB | 	rdlong	arg01, local01
09790     8B 01 00 FF 
09794     67 15 06 F6 | 	mov	arg02, ##@LR__5498
09798     35 00 00 FF 
0979c     0C E4 85 F1 | 	sub	objptr, ##27148
097a0     08 7E B1 FD | 	call	#__system___string_cmp
097a4     00 FA 0D F2 | 	cmp	result1, #0 wz
097a8     21 FA 05 56 |  if_ne	mov	result1, #33
097ac     14 02 90 5D |  if_ne	jmp	#LR__0845
097b0     37 00 00 FF 
097b4     44 E4 05 F1 | 	add	objptr, ##28228
097b8     F2 24 02 FB | 	rdlong	local04, objptr
097bc     01 24 06 F1 | 	add	local04, #1
097c0     F2 24 62 FC | 	wrlong	local04, objptr
097c4     37 00 00 FF 
097c8     44 E4 85 F1 | 	sub	objptr, ##28228
097cc     EC 07 B0 FD | 	call	#_expr
097d0                 | ' ct+=1
097d0                 | ' expr()  										' there is "to" value pushed on the stack
097d0                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
097d0     37 00 00 FF 
097d4     44 E4 05 F1 | 	add	objptr, ##28228
097d8     F2 24 02 FB | 	rdlong	local04, objptr
097dc     03 24 66 F0 | 	shl	local04, #3
097e0     02 00 00 FF 
097e4     38 E4 85 F1 | 	sub	objptr, ##1080
097e8     F2 24 02 F1 | 	add	local04, objptr
097ec     12 13 02 FB | 	rdlong	arg01, local04
097f0     8B 01 00 FF 
097f4     6A 15 06 F6 | 	mov	arg02, ##@LR__5499
097f8     35 00 00 FF 
097fc     0C E4 85 F1 | 	sub	objptr, ##27148
09800     A8 7D B1 FD | 	call	#__system___string_cmp
09804     00 FA 0D F2 | 	cmp	result1, #0 wz
09808     3C 00 90 AD |  if_e	jmp	#LR__0842
0980c     37 00 00 FF 
09810     44 E4 05 F1 | 	add	objptr, ##28228
09814     F2 24 02 FB | 	rdlong	local04, objptr
09818     03 24 66 F0 | 	shl	local04, #3
0981c     02 00 00 FF 
09820     38 E4 85 F1 | 	sub	objptr, ##1080
09824     F2 24 02 F1 | 	add	local04, objptr
09828     12 13 02 FB | 	rdlong	arg01, local04
0982c     8B 01 00 FF 
09830     6F 15 06 F6 | 	mov	arg02, ##@LR__5500
09834     35 00 00 FF 
09838     0C E4 85 F1 | 	sub	objptr, ##27148
0983c     6C 7D B1 FD | 	call	#__system___string_cmp
09840     00 FA 0D F2 | 	cmp	result1, #0 wz
09844     24 00 90 5D |  if_ne	jmp	#LR__0843
09848                 | LR__0842
09848     37 00 00 FF 
0984c     44 E4 05 F1 | 	add	objptr, ##28228
09850     F2 1E 02 FB | 	rdlong	local01, objptr
09854     01 1E 06 F1 | 	add	local01, #1
09858     F2 1E 62 FC | 	wrlong	local01, objptr
0985c     37 00 00 FF 
09860     44 E4 85 F1 | 	sub	objptr, ##28228
09864     54 07 B0 FD | 	call	#_expr
09868     78 00 90 FD | 	jmp	#LR__0844
0986c                 | LR__0843
0986c     4A 00 00 FF 
09870     7C E4 05 F1 | 	add	objptr, ##38012
09874     F2 1E 02 FB | 	rdlong	local01, objptr
09878     0F 25 02 F6 | 	mov	local04, local01
0987c     01 24 66 F0 | 	shl	local04, #1
09880     0F 25 02 F1 | 	add	local04, local01
09884     02 24 66 F0 | 	shl	local04, #2
09888     03 00 00 FF 
0988c     00 E4 85 F1 | 	sub	objptr, ##1536
09890     F2 24 02 F1 | 	add	local04, objptr
09894     08 24 06 F1 | 	add	local04, #8
09898     12 39 68 FC | 	wrlong	#28, local04
0989c     03 00 00 FF 
098a0     00 E4 05 F1 | 	add	objptr, ##1536
098a4     F2 1E 02 FB | 	rdlong	local01, objptr
098a8     0F 25 02 F6 | 	mov	local04, local01
098ac     01 24 66 F0 | 	shl	local04, #1
098b0     0F 25 02 F1 | 	add	local04, local01
098b4     02 24 66 F0 | 	shl	local04, #2
098b8     03 00 00 FF 
098bc     00 E4 85 F1 | 	sub	objptr, ##1536
098c0     F2 24 02 F1 | 	add	local04, objptr
098c4     12 03 68 FC | 	wrlong	#1, local04
098c8     03 00 00 FF 
098cc     00 E4 05 F1 | 	add	objptr, ##1536
098d0     F2 1E 02 FB | 	rdlong	local01, objptr
098d4     01 1E 06 F1 | 	add	local01, #1
098d8     F2 1E 62 FC | 	wrlong	local01, objptr
098dc     4A 00 00 FF 
098e0     7C E4 85 F1 | 	sub	objptr, ##38012
098e4                 | LR__0844
098e4     4A 00 00 FF 
098e8     7C E4 05 F1 | 	add	objptr, ##38012
098ec     F2 1E 02 FB | 	rdlong	local01, objptr
098f0     0F 25 02 F6 | 	mov	local04, local01
098f4     01 24 66 F0 | 	shl	local04, #1
098f8     0F 25 02 F1 | 	add	local04, local01
098fc     02 24 66 F0 | 	shl	local04, #2
09900     03 00 00 FF 
09904     00 E4 85 F1 | 	sub	objptr, ##1536
09908     F2 24 02 F1 | 	add	local04, objptr
0990c     08 24 06 F1 | 	add	local04, #8
09910     12 39 68 FC | 	wrlong	#28, local04
09914     03 00 00 FF 
09918     00 E4 05 F1 | 	add	objptr, ##1536
0991c     F2 1E 02 FB | 	rdlong	local01, objptr
09920     0F 25 02 F6 | 	mov	local04, local01
09924     01 24 66 F0 | 	shl	local04, #1
09928     0F 25 02 F1 | 	add	local04, local01
0992c     02 24 66 F0 | 	shl	local04, #2
09930     03 00 00 FF 
09934     00 E4 85 F1 | 	sub	objptr, ##1536
09938     F2 24 02 F1 | 	add	local04, objptr
0993c     12 27 62 FC | 	wrlong	local05, local04
09940     03 00 00 FF 
09944     00 E4 05 F1 | 	add	objptr, ##1536
09948     F2 26 02 FB | 	rdlong	local05, objptr
0994c     01 26 06 F1 | 	add	local05, #1
09950     F2 26 62 FC | 	wrlong	local05, objptr
09954     13 1F 02 F6 | 	mov	local01, local05
09958     01 1E 66 F0 | 	shl	local01, #1
0995c     13 1F 02 F1 | 	add	local01, local05
09960     02 1E 66 F0 | 	shl	local01, #2
09964     03 00 00 FF 
09968     00 E4 85 F1 | 	sub	objptr, ##1536
0996c     F2 1E 02 F1 | 	add	local01, objptr
09970     08 1E 06 F1 | 	add	local01, #8
09974     0F 95 68 FC | 	wrlong	#74, local01
09978     03 00 00 FF 
0997c     00 E4 05 F1 | 	add	objptr, ##1536
09980     F2 26 02 FB | 	rdlong	local05, objptr
09984     13 1F 02 F6 | 	mov	local01, local05
09988     01 1E 66 F0 | 	shl	local01, #1
0998c     13 1F 02 F1 | 	add	local01, local05
09990     02 1E 66 F0 | 	shl	local01, #2
09994     03 00 00 FF 
09998     00 E4 85 F1 | 	sub	objptr, ##1536
0999c     F2 1E 02 F1 | 	add	local01, objptr
099a0     0F 01 68 FC | 	wrlong	#0, local01
099a4     03 00 00 FF 
099a8     00 E4 05 F1 | 	add	objptr, ##1536
099ac     F2 26 02 FB | 	rdlong	local05, objptr
099b0     01 26 06 F1 | 	add	local05, #1
099b4     F2 26 62 FC | 	wrlong	local05, objptr
099b8     4A 00 00 FF 
099bc     7C E4 85 F1 | 	sub	objptr, ##38012
099c0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
099c0                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
099c0                 | ' return 0
099c0     00 FA 05 F6 | 	mov	result1, #0
099c4                 | LR__0845
099c4     A7 F0 03 F6 | 	mov	ptra, fp
099c8     B2 00 A0 FD | 	call	#popregs_
099cc                 | _compile_for_ret
099cc     2D 00 64 FD | 	ret
099d0                 | 
099d0                 | ' 
099d0                 | ' '----- compile 'next' command. 
099d0                 | ' 
099d0                 | ' function compile_next() as ulong
099d0                 | _compile_next
099d0     04 4A 05 F6 | 	mov	COUNT_, #4
099d4     A8 00 A0 FD | 	call	#pushregs_
099d8     37 00 00 FF 
099dc     44 E4 05 F1 | 	add	objptr, ##28228
099e0     F2 14 02 FB | 	rdlong	arg02, objptr
099e4     03 14 66 F0 | 	shl	arg02, #3
099e8     02 00 00 FF 
099ec     38 E4 85 F1 | 	sub	objptr, ##1080
099f0     F2 14 02 F1 | 	add	arg02, objptr
099f4     0A 1F 02 FB | 	rdlong	local01, arg02
099f8                 | ' 
099f8                 | ' varname$=lparts(ct).part$ 
099f8                 | ' if varnum=0 then return 35
099f8     04 E4 85 F1 | 	sub	objptr, #4
099fc     F2 14 0A FB | 	rdlong	arg02, objptr wz
09a00     35 00 00 FF 
09a04     08 E4 85 F1 | 	sub	objptr, ##27144
09a08     23 FA 05 A6 |  if_e	mov	result1, #35
09a0c     4C 01 90 AD |  if_e	jmp	#LR__0852
09a10     01 20 66 F6 | 	neg	local02, #1
09a14                 | ' j=-1
09a14                 | ' for i=0 to varnum-1
09a14     00 22 06 F6 | 	mov	local03, #0
09a18     35 00 00 FF 
09a1c     08 E4 05 F1 | 	add	objptr, ##27144
09a20     F2 24 02 FB | 	rdlong	local04, objptr
09a24     35 00 00 FF 
09a28     08 E4 85 F1 | 	sub	objptr, ##27144
09a2c                 | LR__0850
09a2c     12 23 12 F2 | 	cmp	local03, local04 wc
09a30     38 00 90 3D |  if_ae	jmp	#LR__0851
09a34                 | '   if variables(i).name=varname$ then j=i : exit
09a34     11 15 02 F6 | 	mov	arg02, local03
09a38     04 14 66 F0 | 	shl	arg02, #4
09a3c     14 00 00 FF 
09a40     F8 E5 05 F1 | 	add	objptr, ##10744
09a44     F2 14 02 F1 | 	add	arg02, objptr
09a48     0A 13 02 FB | 	rdlong	arg01, arg02
09a4c     0F 15 02 F6 | 	mov	arg02, local01
09a50     14 00 00 FF 
09a54     F8 E5 85 F1 | 	sub	objptr, ##10744
09a58     50 7B B1 FD | 	call	#__system___string_cmp
09a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a60     11 21 02 A6 |  if_e	mov	local02, local03
09a64     01 22 06 51 |  if_ne	add	local03, #1
09a68     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09a6c                 | LR__0851
09a6c                 | ' if j=-1 then return 35
09a6c     FF FF 7F FF 
09a70     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09a74     23 FA 05 A6 |  if_e	mov	result1, #35
09a78     E0 00 90 AD |  if_e	jmp	#LR__0852
09a7c     4A 00 00 FF 
09a80     7C E4 05 F1 | 	add	objptr, ##38012
09a84     F2 24 02 FB | 	rdlong	local04, objptr
09a88     12 23 02 F6 | 	mov	local03, local04
09a8c     01 22 66 F0 | 	shl	local03, #1
09a90     12 23 02 F1 | 	add	local03, local04
09a94     02 22 66 F0 | 	shl	local03, #2
09a98     03 00 00 FF 
09a9c     00 E4 85 F1 | 	sub	objptr, ##1536
09aa0     F2 22 02 F1 | 	add	local03, objptr
09aa4     08 22 06 F1 | 	add	local03, #8
09aa8     11 39 68 FC | 	wrlong	#28, local03
09aac     03 00 00 FF 
09ab0     00 E4 05 F1 | 	add	objptr, ##1536
09ab4     F2 24 02 FB | 	rdlong	local04, objptr
09ab8     12 23 02 F6 | 	mov	local03, local04
09abc     01 22 66 F0 | 	shl	local03, #1
09ac0     12 23 02 F1 | 	add	local03, local04
09ac4     02 22 66 F0 | 	shl	local03, #2
09ac8     03 00 00 FF 
09acc     00 E4 85 F1 | 	sub	objptr, ##1536
09ad0     F2 22 02 F1 | 	add	local03, objptr
09ad4     11 21 62 FC | 	wrlong	local02, local03
09ad8     03 00 00 FF 
09adc     00 E4 05 F1 | 	add	objptr, ##1536
09ae0     F2 24 02 FB | 	rdlong	local04, objptr
09ae4     01 24 06 F1 | 	add	local04, #1
09ae8     F2 24 62 FC | 	wrlong	local04, objptr
09aec     12 23 02 F6 | 	mov	local03, local04
09af0     01 22 66 F0 | 	shl	local03, #1
09af4     12 23 02 F1 | 	add	local03, local04
09af8     02 22 66 F0 | 	shl	local03, #2
09afc     03 00 00 FF 
09b00     00 E4 85 F1 | 	sub	objptr, ##1536
09b04     F2 22 02 F1 | 	add	local03, objptr
09b08     08 22 06 F1 | 	add	local03, #8
09b0c     11 97 68 FC | 	wrlong	#75, local03
09b10     03 00 00 FF 
09b14     00 E4 05 F1 | 	add	objptr, ##1536
09b18     F2 24 02 FB | 	rdlong	local04, objptr
09b1c     12 23 02 F6 | 	mov	local03, local04
09b20     01 22 66 F0 | 	shl	local03, #1
09b24     12 23 02 F1 | 	add	local03, local04
09b28     02 22 66 F0 | 	shl	local03, #2
09b2c     03 00 00 FF 
09b30     00 E4 85 F1 | 	sub	objptr, ##1536
09b34     F2 22 02 F1 | 	add	local03, objptr
09b38     11 01 68 FC | 	wrlong	#0, local03
09b3c     03 00 00 FF 
09b40     00 E4 05 F1 | 	add	objptr, ##1536
09b44     F2 24 02 FB | 	rdlong	local04, objptr
09b48     01 24 06 F1 | 	add	local04, #1
09b4c     F2 24 62 FC | 	wrlong	local04, objptr
09b50     4A 00 00 FF 
09b54     7C E4 85 F1 | 	sub	objptr, ##38012
09b58                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09b58                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09b58                 | ' return 0
09b58     00 FA 05 F6 | 	mov	result1, #0
09b5c                 | LR__0852
09b5c     A7 F0 03 F6 | 	mov	ptra, fp
09b60     B2 00 A0 FD | 	call	#popregs_
09b64                 | _compile_next_ret
09b64     2D 00 64 FD | 	ret
09b68                 | 
09b68                 | ' 
09b68                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
09b68                 | ' 
09b68                 | ' function compile_gosub() as ulong
09b68                 | _compile_gosub
09b68     02 4A 05 F6 | 	mov	COUNT_, #2
09b6c     A8 00 A0 FD | 	call	#pushregs_
09b70     4A 00 00 FF 
09b74     7C E4 05 F1 | 	add	objptr, ##38012
09b78     F2 1E 02 FB | 	rdlong	local01, objptr
09b7c     0F 21 02 F6 | 	mov	local02, local01
09b80     01 20 66 F0 | 	shl	local02, #1
09b84     0F 21 02 F1 | 	add	local02, local01
09b88     02 20 66 F0 | 	shl	local02, #2
09b8c     03 00 00 FF 
09b90     00 E4 85 F1 | 	sub	objptr, ##1536
09b94     F2 20 02 F1 | 	add	local02, objptr
09b98     08 20 06 F1 | 	add	local02, #8
09b9c     10 53 69 FC | 	wrlong	#169, local02
09ba0     03 00 00 FF 
09ba4     00 E4 05 F1 | 	add	objptr, ##1536
09ba8     F2 20 02 FB | 	rdlong	local02, objptr
09bac     01 20 06 F1 | 	add	local02, #1
09bb0     F2 20 62 FC | 	wrlong	local02, objptr
09bb4     4A 00 00 FF 
09bb8     7C E4 85 F1 | 	sub	objptr, ##38012
09bbc     0C 00 B0 FD | 	call	#_compile_goto
09bc0                 | ' compiledline(lineptr).result_type=token_gosub
09bc0                 | ' lineptr+=1
09bc0                 | ' err=compile_goto()
09bc0                 | ' return err
09bc0     A7 F0 03 F6 | 	mov	ptra, fp
09bc4     B2 00 A0 FD | 	call	#popregs_
09bc8                 | _compile_gosub_ret
09bc8     2D 00 64 FD | 	ret
09bcc                 | 
09bcc                 | ' 
09bcc                 | ' '----- compile 'goto' 
09bcc                 | ' 
09bcc                 | ' function compile_goto( ) as ulong
09bcc                 | _compile_goto
09bcc     03 4A 05 F6 | 	mov	COUNT_, #3
09bd0     A8 00 A0 FD | 	call	#pushregs_
09bd4     34 F0 07 F1 | 	add	ptra, #52
09bd8                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09bd8     37 00 00 FF 
09bdc     44 E4 05 F1 | 	add	objptr, ##28228
09be0     F2 16 02 FB | 	rdlong	arg03, objptr
09be4     03 16 66 F0 | 	shl	arg03, #3
09be8     02 00 00 FF 
09bec     38 E4 85 F1 | 	sub	objptr, ##1080
09bf0     F2 16 02 F1 | 	add	arg03, objptr
09bf4     04 16 06 F1 | 	add	arg03, #4
09bf8     0B 17 02 FB | 	rdlong	arg03, arg03
09bfc     01 00 00 FF 
09c00     00 16 0E F2 | 	cmp	arg03, ##512 wz
09c04     35 00 00 FF 
09c08     0C E4 85 F1 | 	sub	objptr, ##27148
09c0c     CC 02 90 5D |  if_ne	jmp	#LR__0865
09c10     37 00 00 FF 
09c14     44 E4 05 F1 | 	add	objptr, ##28228
09c18     F2 16 02 FB | 	rdlong	arg03, objptr
09c1c     01 16 06 F1 | 	add	arg03, #1
09c20     03 16 66 F0 | 	shl	arg03, #3
09c24     02 00 00 FF 
09c28     38 E4 85 F1 | 	sub	objptr, ##1080
09c2c     F2 16 02 F1 | 	add	arg03, objptr
09c30     04 16 06 F1 | 	add	arg03, #4
09c34     0B 17 02 FB | 	rdlong	arg03, arg03
09c38     FE 17 0E F2 | 	cmp	arg03, #510 wz
09c3c     35 00 00 FF 
09c40     0C E4 85 F1 | 	sub	objptr, ##27148
09c44     94 02 90 5D |  if_ne	jmp	#LR__0865
09c48     37 00 00 FF 
09c4c     44 E4 05 F1 | 	add	objptr, ##28228
09c50     F2 16 02 FB | 	rdlong	arg03, objptr
09c54     03 16 66 F0 | 	shl	arg03, #3
09c58     02 00 00 FF 
09c5c     38 E4 85 F1 | 	sub	objptr, ##1080
09c60     F2 16 02 F1 | 	add	arg03, objptr
09c64     0B 13 02 FB | 	rdlong	arg01, arg03
09c68     00 14 06 F6 | 	mov	arg02, #0
09c6c     35 00 00 FF 
09c70     0C E4 85 F1 | 	sub	objptr, ##27148
09c74     40 AD B1 FD | 	call	#__system____builtin_atoi
09c78     04 4E 05 F1 | 	add	fp, #4
09c7c     A7 FA 61 FC | 	wrlong	result1, fp
09c80     4A 00 00 FF 
09c84     7C E4 05 F1 | 	add	objptr, ##38012
09c88     F2 1E 02 FB | 	rdlong	local01, objptr
09c8c     0F 21 02 F6 | 	mov	local02, local01
09c90     01 20 66 F0 | 	shl	local02, #1
09c94     0F 21 02 F1 | 	add	local02, local01
09c98     02 20 66 F0 | 	shl	local02, #2
09c9c     03 00 00 FF 
09ca0     00 E4 85 F1 | 	sub	objptr, ##1536
09ca4     F2 20 02 F1 | 	add	local02, objptr
09ca8     08 20 06 F1 | 	add	local02, #8
09cac     10 9D 68 FC | 	wrlong	#78, local02
09cb0     03 00 00 FF 
09cb4     0C E4 05 F1 | 	add	objptr, ##1548
09cb8     F2 22 02 FB | 	rdlong	local03, objptr
09cbc     4A 00 00 FF 
09cc0     88 E4 85 F1 | 	sub	objptr, ##38024
09cc4     04 4E 05 F1 | 	add	fp, #4
09cc8     A7 22 62 FC | 	wrlong	local03, fp
09ccc     08 4E 85 F1 | 	sub	fp, #8
09cd0                 | '   gotoline=val%(lparts(ct).part$) 
09cd0                 | '   compiledline(lineptr).result_type=token_fast_goto
09cd0                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09cd0                 | '   do
09cd0                 | LR__0860
09cd0     10 4E 05 F1 | 	add	fp, #16
09cd4     A7 12 02 F6 | 	mov	arg01, fp
09cd8     08 4E 85 F1 | 	sub	fp, #8
09cdc     A7 14 02 FB | 	rdlong	arg02, fp
09ce0     08 4E 85 F1 | 	sub	fp, #8
09ce4     18 16 06 F6 | 	mov	arg03, #24
09ce8     0B 00 00 FF 
09cec     CC E4 05 F1 | 	add	objptr, ##5836
09cf0     50 6C B1 FD | 	call	#_psram_spin2_read1
09cf4     0B 00 00 FF 
09cf8     CC E4 85 F1 | 	sub	objptr, ##5836
09cfc                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09cfc                 | '     if gotoheader(0)<>$FFFFFFFF then
09cfc     10 4E 05 F1 | 	add	fp, #16
09d00     A7 22 02 FB | 	rdlong	local03, fp
09d04     10 4E 85 F1 | 	sub	fp, #16
09d08     FF FF 7F FF 
09d0c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
09d10     24 00 90 AD |  if_e	jmp	#LR__0861
09d14     08 4E 05 F1 | 	add	fp, #8
09d18     A7 22 02 FB | 	rdlong	local03, fp
09d1c     04 4E 05 F1 | 	add	fp, #4
09d20     A7 22 62 FC | 	wrlong	local03, fp
09d24     18 4E 05 F1 | 	add	fp, #24
09d28     A7 22 02 FB | 	rdlong	local03, fp
09d2c     1C 4E 85 F1 | 	sub	fp, #28
09d30     A7 22 62 FC | 	wrlong	local03, fp
09d34     08 4E 85 F1 | 	sub	fp, #8
09d38                 | LR__0861
09d38     24 4E 05 F1 | 	add	fp, #36
09d3c     A7 22 02 FB | 	rdlong	local03, fp
09d40     24 4E 85 F1 | 	sub	fp, #36
09d44     FF FF 3F FF 
09d48     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09d4c     10 4E 05 51 |  if_ne	add	fp, #16
09d50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09d54     10 4E 85 51 |  if_ne	sub	fp, #16
09d58     FF FF 7F 5F 
09d5c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09d60     1C 00 90 AD |  if_e	jmp	#LR__0862
09d64     10 4E 05 F1 | 	add	fp, #16
09d68     A7 22 02 FB | 	rdlong	local03, fp
09d6c     0C 4E 85 F1 | 	sub	fp, #12
09d70     A7 20 02 FB | 	rdlong	local02, fp
09d74     04 4E 85 F1 | 	sub	fp, #4
09d78     10 23 0A F2 | 	cmp	local03, local02 wz
09d7c     50 FF 9F 5D |  if_ne	jmp	#LR__0860
09d80                 | LR__0862
09d80                 | '   if gotoheader(0)=gotoline then
09d80     10 4E 05 F1 | 	add	fp, #16
09d84     A7 22 02 FB | 	rdlong	local03, fp
09d88     0C 4E 85 F1 | 	sub	fp, #12
09d8c     A7 1E 02 FB | 	rdlong	local01, fp
09d90     04 4E 85 F1 | 	sub	fp, #4
09d94     0F 23 0A F2 | 	cmp	local03, local01 wz
09d98     7C 00 90 5D |  if_ne	jmp	#LR__0863
09d9c     4A 00 00 FF 
09da0     7C E4 05 F1 | 	add	objptr, ##38012
09da4     F2 1E 02 FB | 	rdlong	local01, objptr
09da8     0F 21 02 F6 | 	mov	local02, local01
09dac     01 20 66 F0 | 	shl	local02, #1
09db0     0F 21 02 F1 | 	add	local02, local01
09db4     02 20 66 F0 | 	shl	local02, #2
09db8     03 00 00 FF 
09dbc     00 E4 85 F1 | 	sub	objptr, ##1536
09dc0     F2 20 02 F1 | 	add	local02, objptr
09dc4     0C 4E 05 F1 | 	add	fp, #12
09dc8     A7 22 02 FB | 	rdlong	local03, fp
09dcc     10 23 62 FC | 	wrlong	local03, local02
09dd0     03 00 00 FF 
09dd4     00 E4 05 F1 | 	add	objptr, ##1536
09dd8     F2 1E 02 FB | 	rdlong	local01, objptr
09ddc     0F 21 02 F6 | 	mov	local02, local01
09de0     01 20 66 F0 | 	shl	local02, #1
09de4     0F 21 02 F1 | 	add	local02, local01
09de8     02 20 66 F0 | 	shl	local02, #2
09dec     03 00 00 FF 
09df0     00 E4 85 F1 | 	sub	objptr, ##1536
09df4     F2 20 02 F1 | 	add	local02, objptr
09df8     08 4E 85 F1 | 	sub	fp, #8
09dfc     A7 22 02 FB | 	rdlong	local03, fp
09e00     04 4E 85 F1 | 	sub	fp, #4
09e04     04 20 06 F1 | 	add	local02, #4
09e08     10 23 62 FC | 	wrlong	local03, local02
09e0c     47 00 00 FF 
09e10     7C E4 85 F1 | 	sub	objptr, ##36476
09e14     A4 00 90 FD | 	jmp	#LR__0864
09e18                 | LR__0863
09e18     4A 00 00 FF 
09e1c     7C E4 05 F1 | 	add	objptr, ##38012
09e20     F2 1E 02 FB | 	rdlong	local01, objptr
09e24     0F 21 02 F6 | 	mov	local02, local01
09e28     01 20 66 F0 | 	shl	local02, #1
09e2c     0F 21 02 F1 | 	add	local02, local01
09e30     02 20 66 F0 | 	shl	local02, #2
09e34     03 00 00 FF 
09e38     00 E4 85 F1 | 	sub	objptr, ##1536
09e3c     F2 20 02 F1 | 	add	local02, objptr
09e40     00 00 C0 FF 
09e44     10 01 68 FC | 	wrlong	##-2147483648, local02
09e48     03 00 00 FF 
09e4c     00 E4 05 F1 | 	add	objptr, ##1536
09e50     F2 1E 02 FB | 	rdlong	local01, objptr
09e54     0F 21 02 F6 | 	mov	local02, local01
09e58     01 20 66 F0 | 	shl	local02, #1
09e5c     0F 21 02 F1 | 	add	local02, local01
09e60     02 20 66 F0 | 	shl	local02, #2
09e64     03 00 00 FF 
09e68     00 E4 85 F1 | 	sub	objptr, ##1536
09e6c     F2 20 02 F1 | 	add	local02, objptr
09e70     04 4E 05 F1 | 	add	fp, #4
09e74     A7 22 02 FB | 	rdlong	local03, fp
09e78     04 4E 85 F1 | 	sub	fp, #4
09e7c     04 20 06 F1 | 	add	local02, #4
09e80     10 23 62 FC | 	wrlong	local03, local02
09e84     03 00 00 FF 
09e88     00 E4 05 F1 | 	add	objptr, ##1536
09e8c     F2 1E 02 FB | 	rdlong	local01, objptr
09e90     0F 21 02 F6 | 	mov	local02, local01
09e94     01 20 66 F0 | 	shl	local02, #1
09e98     0F 21 02 F1 | 	add	local02, local01
09e9c     02 20 66 F0 | 	shl	local02, #2
09ea0     03 00 00 FF 
09ea4     00 E4 85 F1 | 	sub	objptr, ##1536
09ea8     F2 20 02 F1 | 	add	local02, objptr
09eac     08 20 06 F1 | 	add	local02, #8
09eb0     10 A7 68 FC | 	wrlong	#83, local02
09eb4     47 00 00 FF 
09eb8     7C E4 85 F1 | 	sub	objptr, ##36476
09ebc                 | LR__0864
09ebc     4A 00 00 FF 
09ec0     7C E4 05 F1 | 	add	objptr, ##38012
09ec4     F2 22 02 FB | 	rdlong	local03, objptr
09ec8     01 22 06 F1 | 	add	local03, #1
09ecc     F2 22 62 FC | 	wrlong	local03, objptr
09ed0     4A 00 00 FF 
09ed4     7C E4 85 F1 | 	sub	objptr, ##38012
09ed8     D0 00 90 FD | 	jmp	#LR__0866
09edc                 | LR__0865
09edc     DC 00 B0 FD | 	call	#_expr
09ee0     30 4E 05 F1 | 	add	fp, #48
09ee4     A7 9E 68 FC | 	wrlong	#79, fp
09ee8     08 4E 85 F1 | 	sub	fp, #8
09eec     A7 00 68 FC | 	wrlong	#0, fp
09ef0     04 4E 05 F1 | 	add	fp, #4
09ef4     A7 22 02 FB | 	rdlong	local03, fp
09ef8     04 4E 05 F1 | 	add	fp, #4
09efc     A7 1E 02 FB | 	rdlong	local01, fp
09f00     30 4E 85 F1 | 	sub	fp, #48
09f04     4A 00 00 FF 
09f08     7C E4 05 F1 | 	add	objptr, ##38012
09f0c     F2 20 02 FB | 	rdlong	local02, objptr
09f10     10 17 02 F6 | 	mov	arg03, local02
09f14     01 16 66 F0 | 	shl	arg03, #1
09f18     10 17 02 F1 | 	add	arg03, local02
09f1c     02 16 66 F0 | 	shl	arg03, #2
09f20     03 00 00 FF 
09f24     00 E4 85 F1 | 	sub	objptr, ##1536
09f28     F2 16 02 F1 | 	add	arg03, objptr
09f2c     0B 01 68 FC | 	wrlong	#0, arg03
09f30     03 00 00 FF 
09f34     00 E4 05 F1 | 	add	objptr, ##1536
09f38     F2 20 02 FB | 	rdlong	local02, objptr
09f3c     10 17 02 F6 | 	mov	arg03, local02
09f40     01 16 66 F0 | 	shl	arg03, #1
09f44     10 17 02 F1 | 	add	arg03, local02
09f48     02 16 66 F0 | 	shl	arg03, #2
09f4c     03 00 00 FF 
09f50     00 E4 85 F1 | 	sub	objptr, ##1536
09f54     F2 16 02 F1 | 	add	arg03, objptr
09f58     04 16 06 F1 | 	add	arg03, #4
09f5c     0B 23 62 FC | 	wrlong	local03, arg03
09f60     03 00 00 FF 
09f64     00 E4 05 F1 | 	add	objptr, ##1536
09f68     F2 22 02 FB | 	rdlong	local03, objptr
09f6c     11 21 02 F6 | 	mov	local02, local03
09f70     01 20 66 F0 | 	shl	local02, #1
09f74     11 21 02 F1 | 	add	local02, local03
09f78     02 20 66 F0 | 	shl	local02, #2
09f7c     03 00 00 FF 
09f80     00 E4 85 F1 | 	sub	objptr, ##1536
09f84     F2 20 02 F1 | 	add	local02, objptr
09f88     08 20 06 F1 | 	add	local02, #8
09f8c     10 1F 62 FC | 	wrlong	local01, local02
09f90     03 00 00 FF 
09f94     00 E4 05 F1 | 	add	objptr, ##1536
09f98     F2 22 02 FB | 	rdlong	local03, objptr
09f9c     01 22 06 F1 | 	add	local03, #1
09fa0     F2 22 62 FC | 	wrlong	local03, objptr
09fa4     4A 00 00 FF 
09fa8     7C E4 85 F1 | 	sub	objptr, ##38012
09fac                 | LR__0866
09fac                 | ' return 0
09fac     00 FA 05 F6 | 	mov	result1, #0
09fb0     A7 F0 03 F6 | 	mov	ptra, fp
09fb4     B2 00 A0 FD | 	call	#popregs_
09fb8                 | _compile_goto_ret
09fb8     2D 00 64 FD | 	ret
09fbc                 | 
09fbc                 | ' 
09fbc                 | ' 
09fbc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09fbc                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09fbc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09fbc                 | ' 
09fbc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09fbc                 | ' '
09fbc                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09fbc                 | ' '
09fbc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09fbc                 | ' 
09fbc                 | ' function expr() as ulong 
09fbc                 | _expr
09fbc     07 4A 05 F6 | 	mov	COUNT_, #7
09fc0     A8 00 A0 FD | 	call	#pushregs_
09fc4                 | _expr_enter
09fc4     37 00 00 FF 
09fc8     44 E4 05 F1 | 	add	objptr, ##28228
09fcc     F2 24 02 FB | 	rdlong	local04, objptr
09fd0     03 24 66 F0 | 	shl	local04, #3
09fd4     02 00 00 FF 
09fd8     38 E4 85 F1 | 	sub	objptr, ##1080
09fdc     F2 24 02 F1 | 	add	local04, objptr
09fe0     04 24 06 F1 | 	add	local04, #4
09fe4     12 27 02 FB | 	rdlong	local05, local04
09fe8                 | ' 
09fe8                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09fe8     FE 27 0E F2 | 	cmp	local05, #510 wz
09fec     35 00 00 FF 
09ff0     0C E4 85 F1 | 	sub	objptr, ##27148
09ff4     C4 00 90 5D |  if_ne	jmp	#LR__0870
09ff8     1D 1E 06 F6 | 	mov	local01, #29
09ffc     FF 22 06 F6 | 	mov	local03, #255
0a000     0F 29 02 F6 | 	mov	local06, local01
0a004     10 2B 02 F6 | 	mov	local07, local02
0a008     11 1F 02 F6 | 	mov	local01, local03
0a00c     4A 00 00 FF 
0a010     7C E4 05 F1 | 	add	objptr, ##38012
0a014     F2 26 02 FB | 	rdlong	local05, objptr
0a018     13 25 02 F6 | 	mov	local04, local05
0a01c     01 24 66 F0 | 	shl	local04, #1
0a020     13 25 02 F1 | 	add	local04, local05
0a024     02 24 66 F0 | 	shl	local04, #2
0a028     03 00 00 FF 
0a02c     00 E4 85 F1 | 	sub	objptr, ##1536
0a030     F2 24 02 F1 | 	add	local04, objptr
0a034     12 29 62 FC | 	wrlong	local06, local04
0a038     03 00 00 FF 
0a03c     00 E4 05 F1 | 	add	objptr, ##1536
0a040     F2 28 02 FB | 	rdlong	local06, objptr
0a044     14 27 02 F6 | 	mov	local05, local06
0a048     01 26 66 F0 | 	shl	local05, #1
0a04c     14 27 02 F1 | 	add	local05, local06
0a050     02 26 66 F0 | 	shl	local05, #2
0a054     03 00 00 FF 
0a058     00 E4 85 F1 | 	sub	objptr, ##1536
0a05c     F2 26 02 F1 | 	add	local05, objptr
0a060     04 26 06 F1 | 	add	local05, #4
0a064     13 2B 62 FC | 	wrlong	local07, local05
0a068     03 00 00 FF 
0a06c     00 E4 05 F1 | 	add	objptr, ##1536
0a070     F2 2A 02 FB | 	rdlong	local07, objptr
0a074     15 29 02 F6 | 	mov	local06, local07
0a078     01 28 66 F0 | 	shl	local06, #1
0a07c     15 29 02 F1 | 	add	local06, local07
0a080     02 28 66 F0 | 	shl	local06, #2
0a084     03 00 00 FF 
0a088     00 E4 85 F1 | 	sub	objptr, ##1536
0a08c     F2 28 02 F1 | 	add	local06, objptr
0a090     08 28 06 F1 | 	add	local06, #8
0a094     14 1F 62 FC | 	wrlong	local01, local06
0a098     03 00 00 FF 
0a09c     00 E4 05 F1 | 	add	objptr, ##1536
0a0a0     F2 28 02 FB | 	rdlong	local06, objptr
0a0a4     01 28 06 F1 | 	add	local06, #1
0a0a8     F2 28 62 FC | 	wrlong	local06, objptr
0a0ac     4A 00 00 FF 
0a0b0     7C E4 85 F1 | 	sub	objptr, ##38012
0a0b4     1D FA 05 F6 | 	mov	result1, #29
0a0b8     64 01 90 FD | 	jmp	#LR__0873
0a0bc                 | LR__0870
0a0bc     00 1E 06 F6 | 	mov	local01, #0
0a0c0     68 01 B0 FD | 	call	#_addsub
0a0c4                 | ' t3.result.uresult=0
0a0c4                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0a0c4                 | ' if err>0 then return err
0a0c4     01 FA 15 F2 | 	cmp	result1, #1 wc
0a0c8     54 01 90 3D |  if_ae	jmp	#LR__0873
0a0cc     37 00 00 FF 
0a0d0     44 E4 05 F1 | 	add	objptr, ##28228
0a0d4     F2 24 02 FB | 	rdlong	local04, objptr
0a0d8     03 24 66 F0 | 	shl	local04, #3
0a0dc     02 00 00 FF 
0a0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0a0e4     F2 24 02 F1 | 	add	local04, objptr
0a0e8     04 24 06 F1 | 	add	local04, #4
0a0ec     12 27 02 FB | 	rdlong	local05, local04
0a0f0                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0a0f0                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a0f0     35 00 00 FF 
0a0f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0f8                 | LR__0871
0a0f8     1B 26 0E F2 | 	cmp	local05, #27 wz
0a0fc     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a100     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a104     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a108     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a10c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a110     08 01 90 5D |  if_ne	jmp	#LR__0872
0a114     37 00 00 FF 
0a118     44 E4 05 F1 | 	add	objptr, ##28228
0a11c     F2 28 02 FB | 	rdlong	local06, objptr
0a120     01 28 06 F1 | 	add	local06, #1
0a124     F2 28 62 FC | 	wrlong	local06, objptr
0a128     37 00 00 FF 
0a12c     44 E4 85 F1 | 	sub	objptr, ##28228
0a130     F8 00 B0 FD | 	call	#_addsub
0a134                 | '   ct+=1
0a134                 | '   err=addsub() : if err>0 then return err
0a134     01 FA 15 F2 | 	cmp	result1, #1 wc
0a138     E4 00 90 3D |  if_ae	jmp	#LR__0873
0a13c     13 23 02 F6 | 	mov	local03, local05
0a140     0F 29 02 F6 | 	mov	local06, local01
0a144     10 2B 02 F6 | 	mov	local07, local02
0a148     11 27 02 F6 | 	mov	local05, local03
0a14c     4A 00 00 FF 
0a150     7C E4 05 F1 | 	add	objptr, ##38012
0a154     F2 24 02 FB | 	rdlong	local04, objptr
0a158     12 FB 01 F6 | 	mov	result1, local04
0a15c     01 FA 65 F0 | 	shl	result1, #1
0a160     12 FB 01 F1 | 	add	result1, local04
0a164     02 FA 65 F0 | 	shl	result1, #2
0a168     03 00 00 FF 
0a16c     00 E4 85 F1 | 	sub	objptr, ##1536
0a170     F2 FA 01 F1 | 	add	result1, objptr
0a174     FD 28 62 FC | 	wrlong	local06, result1
0a178     03 00 00 FF 
0a17c     00 E4 05 F1 | 	add	objptr, ##1536
0a180     F2 28 02 FB | 	rdlong	local06, objptr
0a184     14 25 02 F6 | 	mov	local04, local06
0a188     01 24 66 F0 | 	shl	local04, #1
0a18c     14 25 02 F1 | 	add	local04, local06
0a190     02 24 66 F0 | 	shl	local04, #2
0a194     03 00 00 FF 
0a198     00 E4 85 F1 | 	sub	objptr, ##1536
0a19c     F2 24 02 F1 | 	add	local04, objptr
0a1a0     04 24 06 F1 | 	add	local04, #4
0a1a4     12 2B 62 FC | 	wrlong	local07, local04
0a1a8     03 00 00 FF 
0a1ac     00 E4 05 F1 | 	add	objptr, ##1536
0a1b0     F2 2A 02 FB | 	rdlong	local07, objptr
0a1b4     15 29 02 F6 | 	mov	local06, local07
0a1b8     01 28 66 F0 | 	shl	local06, #1
0a1bc     15 29 02 F1 | 	add	local06, local07
0a1c0     02 28 66 F0 | 	shl	local06, #2
0a1c4     03 00 00 FF 
0a1c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a1cc     F2 28 02 F1 | 	add	local06, objptr
0a1d0     08 28 06 F1 | 	add	local06, #8
0a1d4     14 27 62 FC | 	wrlong	local05, local06
0a1d8     03 00 00 FF 
0a1dc     00 E4 05 F1 | 	add	objptr, ##1536
0a1e0     F2 28 02 FB | 	rdlong	local06, objptr
0a1e4     01 28 06 F1 | 	add	local06, #1
0a1e8     F2 28 62 FC | 	wrlong	local06, objptr
0a1ec     13 00 00 FF 
0a1f0     38 E4 85 F1 | 	sub	objptr, ##9784
0a1f4     F2 24 02 FB | 	rdlong	local04, objptr
0a1f8     03 24 66 F0 | 	shl	local04, #3
0a1fc     02 00 00 FF 
0a200     38 E4 85 F1 | 	sub	objptr, ##1080
0a204     F2 24 02 F1 | 	add	local04, objptr
0a208     04 24 06 F1 | 	add	local04, #4
0a20c     12 27 02 FB | 	rdlong	local05, local04
0a210     35 00 00 FF 
0a214     0C E4 85 F1 | 	sub	objptr, ##27148
0a218     DC FE 9F FD | 	jmp	#LR__0871
0a21c                 | LR__0872
0a21c                 | ' return 0  
0a21c     00 FA 05 F6 | 	mov	result1, #0
0a220                 | LR__0873
0a220     A7 F0 03 F6 | 	mov	ptra, fp
0a224     B2 00 A0 FD | 	call	#popregs_
0a228                 | _expr_ret
0a228     2D 00 64 FD | 	ret
0a22c                 | 
0a22c                 | ' 
0a22c                 | ' ' Second level operators : add, sub, logic
0a22c                 | ' 
0a22c                 | ' function addsub() as ulong
0a22c                 | _addsub
0a22c     07 4A 05 F6 | 	mov	COUNT_, #7
0a230     A8 00 A0 FD | 	call	#pushregs_
0a234                 | _addsub_enter
0a234     00 1E 06 F6 | 	mov	local01, #0
0a238     60 01 B0 FD | 	call	#_muldiv
0a23c                 | ' 
0a23c                 | ' t3.result.uresult=0
0a23c                 | ' err=muldiv() : if err>0 then return err           			 
0a23c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a240     4C 01 90 3D |  if_ae	jmp	#LR__0882
0a244     37 00 00 FF 
0a248     44 E4 05 F1 | 	add	objptr, ##28228
0a24c     F2 24 02 FB | 	rdlong	local04, objptr
0a250     03 24 66 F0 | 	shl	local04, #3
0a254     02 00 00 FF 
0a258     38 E4 85 F1 | 	sub	objptr, ##1080
0a25c     F2 24 02 F1 | 	add	local04, objptr
0a260     04 24 06 F1 | 	add	local04, #4
0a264     12 27 02 FB | 	rdlong	local05, local04
0a268                 | ' op = lparts(ct).token				 
0a268                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a268     35 00 00 FF 
0a26c     0C E4 85 F1 | 	sub	objptr, ##27148
0a270                 | LR__0880
0a270     01 26 0E F2 | 	cmp	local05, #1 wz
0a274     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a278     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a27c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a280     08 01 90 5D |  if_ne	jmp	#LR__0881
0a284     37 00 00 FF 
0a288     44 E4 05 F1 | 	add	objptr, ##28228
0a28c     F2 24 02 FB | 	rdlong	local04, objptr
0a290     01 24 06 F1 | 	add	local04, #1
0a294     F2 24 62 FC | 	wrlong	local04, objptr
0a298     37 00 00 FF 
0a29c     44 E4 85 F1 | 	sub	objptr, ##28228
0a2a0     F8 00 B0 FD | 	call	#_muldiv
0a2a4                 | '   ct+=1
0a2a4                 | '   err=muldiv() : if err>0 then return err   
0a2a4     01 FA 15 F2 | 	cmp	result1, #1 wc
0a2a8     E4 00 90 3D |  if_ae	jmp	#LR__0882
0a2ac     13 23 02 F6 | 	mov	local03, local05
0a2b0     0F 29 02 F6 | 	mov	local06, local01
0a2b4     10 2B 02 F6 | 	mov	local07, local02
0a2b8     11 27 02 F6 | 	mov	local05, local03
0a2bc     4A 00 00 FF 
0a2c0     7C E4 05 F1 | 	add	objptr, ##38012
0a2c4     F2 24 02 FB | 	rdlong	local04, objptr
0a2c8     12 FB 01 F6 | 	mov	result1, local04
0a2cc     01 FA 65 F0 | 	shl	result1, #1
0a2d0     12 FB 01 F1 | 	add	result1, local04
0a2d4     02 FA 65 F0 | 	shl	result1, #2
0a2d8     03 00 00 FF 
0a2dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a2e0     F2 FA 01 F1 | 	add	result1, objptr
0a2e4     FD 28 62 FC | 	wrlong	local06, result1
0a2e8     03 00 00 FF 
0a2ec     00 E4 05 F1 | 	add	objptr, ##1536
0a2f0     F2 28 02 FB | 	rdlong	local06, objptr
0a2f4     14 25 02 F6 | 	mov	local04, local06
0a2f8     01 24 66 F0 | 	shl	local04, #1
0a2fc     14 25 02 F1 | 	add	local04, local06
0a300     02 24 66 F0 | 	shl	local04, #2
0a304     03 00 00 FF 
0a308     00 E4 85 F1 | 	sub	objptr, ##1536
0a30c     F2 24 02 F1 | 	add	local04, objptr
0a310     04 24 06 F1 | 	add	local04, #4
0a314     12 2B 62 FC | 	wrlong	local07, local04
0a318     03 00 00 FF 
0a31c     00 E4 05 F1 | 	add	objptr, ##1536
0a320     F2 2A 02 FB | 	rdlong	local07, objptr
0a324     15 29 02 F6 | 	mov	local06, local07
0a328     01 28 66 F0 | 	shl	local06, #1
0a32c     15 29 02 F1 | 	add	local06, local07
0a330     02 28 66 F0 | 	shl	local06, #2
0a334     03 00 00 FF 
0a338     00 E4 85 F1 | 	sub	objptr, ##1536
0a33c     F2 28 02 F1 | 	add	local06, objptr
0a340     08 28 06 F1 | 	add	local06, #8
0a344     14 27 62 FC | 	wrlong	local05, local06
0a348     03 00 00 FF 
0a34c     00 E4 05 F1 | 	add	objptr, ##1536
0a350     F2 28 02 FB | 	rdlong	local06, objptr
0a354     01 28 06 F1 | 	add	local06, #1
0a358     F2 28 62 FC | 	wrlong	local06, objptr
0a35c     13 00 00 FF 
0a360     38 E4 85 F1 | 	sub	objptr, ##9784
0a364     F2 24 02 FB | 	rdlong	local04, objptr
0a368     03 24 66 F0 | 	shl	local04, #3
0a36c     02 00 00 FF 
0a370     38 E4 85 F1 | 	sub	objptr, ##1080
0a374     F2 24 02 F1 | 	add	local04, objptr
0a378     04 24 06 F1 | 	add	local04, #4
0a37c     12 27 02 FB | 	rdlong	local05, local04
0a380     35 00 00 FF 
0a384     0C E4 85 F1 | 	sub	objptr, ##27148
0a388     E4 FE 9F FD | 	jmp	#LR__0880
0a38c                 | LR__0881
0a38c                 | ' return 0
0a38c     00 FA 05 F6 | 	mov	result1, #0
0a390                 | LR__0882
0a390     A7 F0 03 F6 | 	mov	ptra, fp
0a394     B2 00 A0 FD | 	call	#popregs_
0a398                 | _addsub_ret
0a398     2D 00 64 FD | 	ret
0a39c                 | 
0a39c                 | ' 
0a39c                 | ' ' Third level operators : mul,div,shift,power
0a39c                 | ' 
0a39c                 | ' function muldiv() as ulong
0a39c                 | _muldiv
0a39c     07 4A 05 F6 | 	mov	COUNT_, #7
0a3a0     A8 00 A0 FD | 	call	#pushregs_
0a3a4                 | _muldiv_enter
0a3a4     00 1E 06 F6 | 	mov	local01, #0
0a3a8     6C 01 B0 FD | 	call	#_getvalue
0a3ac                 | ' 
0a3ac                 | ' t3.result.uresult=0
0a3ac                 | ' err=getvalue() : if err>0 then return err     
0a3ac     01 FA 15 F2 | 	cmp	result1, #1 wc
0a3b0     58 01 90 3D |  if_ae	jmp	#LR__0892
0a3b4     37 00 00 FF 
0a3b8     44 E4 05 F1 | 	add	objptr, ##28228
0a3bc     F2 24 02 FB | 	rdlong	local04, objptr
0a3c0     03 24 66 F0 | 	shl	local04, #3
0a3c4     02 00 00 FF 
0a3c8     38 E4 85 F1 | 	sub	objptr, ##1080
0a3cc     F2 24 02 F1 | 	add	local04, objptr
0a3d0     04 24 06 F1 | 	add	local04, #4
0a3d4     12 27 02 FB | 	rdlong	local05, local04
0a3d8                 | ' op = lparts(ct).token
0a3d8                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a3d8     35 00 00 FF 
0a3dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a3e0                 | LR__0890
0a3e0     05 26 0E F2 | 	cmp	local05, #5 wz
0a3e4     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a3e8     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a3ec     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a3f0     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a3f4     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a3f8     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a3fc     08 01 90 5D |  if_ne	jmp	#LR__0891
0a400     37 00 00 FF 
0a404     44 E4 05 F1 | 	add	objptr, ##28228
0a408     F2 24 02 FB | 	rdlong	local04, objptr
0a40c     01 24 06 F1 | 	add	local04, #1
0a410     F2 24 62 FC | 	wrlong	local04, objptr
0a414     37 00 00 FF 
0a418     44 E4 85 F1 | 	sub	objptr, ##28228
0a41c     F8 00 B0 FD | 	call	#_getvalue
0a420                 | '   ct+=1
0a420                 | '   err=getvalue() :if err>0 then return err   
0a420     01 FA 15 F2 | 	cmp	result1, #1 wc
0a424     E4 00 90 3D |  if_ae	jmp	#LR__0892
0a428     13 23 02 F6 | 	mov	local03, local05
0a42c     0F 29 02 F6 | 	mov	local06, local01
0a430     10 2B 02 F6 | 	mov	local07, local02
0a434     11 27 02 F6 | 	mov	local05, local03
0a438     4A 00 00 FF 
0a43c     7C E4 05 F1 | 	add	objptr, ##38012
0a440     F2 24 02 FB | 	rdlong	local04, objptr
0a444     12 FB 01 F6 | 	mov	result1, local04
0a448     01 FA 65 F0 | 	shl	result1, #1
0a44c     12 FB 01 F1 | 	add	result1, local04
0a450     02 FA 65 F0 | 	shl	result1, #2
0a454     03 00 00 FF 
0a458     00 E4 85 F1 | 	sub	objptr, ##1536
0a45c     F2 FA 01 F1 | 	add	result1, objptr
0a460     FD 28 62 FC | 	wrlong	local06, result1
0a464     03 00 00 FF 
0a468     00 E4 05 F1 | 	add	objptr, ##1536
0a46c     F2 28 02 FB | 	rdlong	local06, objptr
0a470     14 25 02 F6 | 	mov	local04, local06
0a474     01 24 66 F0 | 	shl	local04, #1
0a478     14 25 02 F1 | 	add	local04, local06
0a47c     02 24 66 F0 | 	shl	local04, #2
0a480     03 00 00 FF 
0a484     00 E4 85 F1 | 	sub	objptr, ##1536
0a488     F2 24 02 F1 | 	add	local04, objptr
0a48c     04 24 06 F1 | 	add	local04, #4
0a490     12 2B 62 FC | 	wrlong	local07, local04
0a494     03 00 00 FF 
0a498     00 E4 05 F1 | 	add	objptr, ##1536
0a49c     F2 2A 02 FB | 	rdlong	local07, objptr
0a4a0     15 29 02 F6 | 	mov	local06, local07
0a4a4     01 28 66 F0 | 	shl	local06, #1
0a4a8     15 29 02 F1 | 	add	local06, local07
0a4ac     02 28 66 F0 | 	shl	local06, #2
0a4b0     03 00 00 FF 
0a4b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4b8     F2 28 02 F1 | 	add	local06, objptr
0a4bc     08 28 06 F1 | 	add	local06, #8
0a4c0     14 27 62 FC | 	wrlong	local05, local06
0a4c4     03 00 00 FF 
0a4c8     00 E4 05 F1 | 	add	objptr, ##1536
0a4cc     F2 28 02 FB | 	rdlong	local06, objptr
0a4d0     01 28 06 F1 | 	add	local06, #1
0a4d4     F2 28 62 FC | 	wrlong	local06, objptr
0a4d8     13 00 00 FF 
0a4dc     38 E4 85 F1 | 	sub	objptr, ##9784
0a4e0     F2 24 02 FB | 	rdlong	local04, objptr
0a4e4     03 24 66 F0 | 	shl	local04, #3
0a4e8     02 00 00 FF 
0a4ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a4f0     F2 24 02 F1 | 	add	local04, objptr
0a4f4     04 24 06 F1 | 	add	local04, #4
0a4f8     12 27 02 FB | 	rdlong	local05, local04
0a4fc     35 00 00 FF 
0a500     0C E4 85 F1 | 	sub	objptr, ##27148
0a504     D8 FE 9F FD | 	jmp	#LR__0890
0a508                 | LR__0891
0a508                 | ' return 0
0a508     00 FA 05 F6 | 	mov	result1, #0
0a50c                 | LR__0892
0a50c     A7 F0 03 F6 | 	mov	ptra, fp
0a510     B2 00 A0 FD | 	call	#popregs_
0a514                 | _muldiv_ret
0a514     2D 00 64 FD | 	ret
0a518                 | 
0a518                 | ' 
0a518                 | ' ' Get a value for operations
0a518                 | ' 
0a518                 | ' function getvalue()  as ulong
0a518                 | _getvalue
0a518     0B 4A 05 F6 | 	mov	COUNT_, #11
0a51c     A8 00 A0 FD | 	call	#pushregs_
0a520                 | _getvalue_enter
0a520     01 24 06 F6 | 	mov	local04, #1
0a524     00 1E 06 F6 | 	mov	local01, #0
0a528     1D 22 06 F6 | 	mov	local03, #29
0a52c     37 00 00 FF 
0a530     44 E4 05 F1 | 	add	objptr, ##28228
0a534     F2 16 02 FB | 	rdlong	arg03, objptr
0a538     03 16 66 F0 | 	shl	arg03, #3
0a53c     02 00 00 FF 
0a540     38 E4 85 F1 | 	sub	objptr, ##1080
0a544     F2 16 02 F1 | 	add	arg03, objptr
0a548     04 16 06 F1 | 	add	arg03, #4
0a54c     0B 27 02 FB | 	rdlong	local05, arg03
0a550                 | ' 
0a550                 | ' m=1											' for negative numbers
0a550                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a550                 | ' op=lparts(ct).token
0a550                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a550     02 26 0E F2 | 	cmp	local05, #2 wz
0a554     35 00 00 FF 
0a558     0C E4 85 F1 | 	sub	objptr, ##27148
0a55c     38 00 90 5D |  if_ne	jmp	#LR__0900
0a560     01 24 66 F6 | 	neg	local04, #1
0a564     37 00 00 FF 
0a568     44 E4 05 F1 | 	add	objptr, ##28228
0a56c     F2 26 02 FB | 	rdlong	local05, objptr
0a570     01 26 06 F1 | 	add	local05, #1
0a574     F2 26 62 FC | 	wrlong	local05, objptr
0a578     03 26 66 F0 | 	shl	local05, #3
0a57c     02 00 00 FF 
0a580     38 E4 85 F1 | 	sub	objptr, ##1080
0a584     F2 26 02 F1 | 	add	local05, objptr
0a588     04 26 06 F1 | 	add	local05, #4
0a58c     13 27 02 FB | 	rdlong	local05, local05
0a590     35 00 00 FF 
0a594     0C E4 85 F1 | 	sub	objptr, ##27148
0a598                 | LR__0900
0a598                 | ' select case op
0a598     01 00 00 FF 
0a59c     00 26 0E F2 | 	cmp	local05, ##512 wz
0a5a0     44 00 90 AD |  if_e	jmp	#LR__0901
0a5a4     01 00 00 FF 
0a5a8     01 26 0E F2 | 	cmp	local05, ##513 wz
0a5ac     90 01 90 AD |  if_e	jmp	#LR__0904
0a5b0     01 00 00 FF 
0a5b4     02 26 0E F2 | 	cmp	local05, ##514 wz
0a5b8     44 04 90 AD |  if_e	jmp	#LR__0911
0a5bc     01 00 00 FF 
0a5c0     03 26 0E F2 | 	cmp	local05, ##515 wz
0a5c4     A8 05 90 AD |  if_e	jmp	#LR__0914
0a5c8     2C 26 0E F2 | 	cmp	local05, #44 wz
0a5cc     78 07 90 AD |  if_e	jmp	#LR__0919
0a5d0     01 00 00 FF 
0a5d4     04 26 0E F2 | 	cmp	local05, ##516 wz
0a5d8     70 08 90 AD |  if_e	jmp	#LR__0920
0a5dc     15 26 0E F2 | 	cmp	local05, #21 wz
0a5e0     98 08 90 AD |  if_e	jmp	#LR__0921
0a5e4     10 09 90 FD | 	jmp	#LR__0922
0a5e8                 | LR__0901
0a5e8                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a5e8     01 24 0E F2 | 	cmp	local04, #1 wz
0a5ec     3C 00 90 5D |  if_ne	jmp	#LR__0902
0a5f0     37 00 00 FF 
0a5f4     44 E4 05 F1 | 	add	objptr, ##28228
0a5f8     F2 26 02 FB | 	rdlong	local05, objptr
0a5fc     03 26 66 F0 | 	shl	local05, #3
0a600     02 00 00 FF 
0a604     38 E4 85 F1 | 	sub	objptr, ##1080
0a608     F2 26 02 F1 | 	add	local05, objptr
0a60c     13 13 02 FB | 	rdlong	arg01, local05
0a610     00 14 06 F6 | 	mov	arg02, #0
0a614     35 00 00 FF 
0a618     0C E4 85 F1 | 	sub	objptr, ##27148
0a61c     98 A3 B1 FD | 	call	#__system____builtin_atoi
0a620     FD 24 02 FD | 	qmul	local04, result1
0a624     18 1E 62 FD | 	getqx	local01
0a628     1C 22 06 F6 | 	mov	local03, #28
0a62c                 | LR__0902
0a62c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a62c     FF FF 7F FF 
0a630     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a634     3C 00 90 5D |  if_ne	jmp	#LR__0903
0a638     37 00 00 FF 
0a63c     44 E4 05 F1 | 	add	objptr, ##28228
0a640     F2 26 02 FB | 	rdlong	local05, objptr
0a644     03 26 66 F0 | 	shl	local05, #3
0a648     02 00 00 FF 
0a64c     38 E4 85 F1 | 	sub	objptr, ##1080
0a650     F2 26 02 F1 | 	add	local05, objptr
0a654     13 13 02 FB | 	rdlong	arg01, local05
0a658     00 14 06 F6 | 	mov	arg02, #0
0a65c     35 00 00 FF 
0a660     0C E4 85 F1 | 	sub	objptr, ##27148
0a664     50 A3 B1 FD | 	call	#__system____builtin_atoi
0a668     FD 24 02 FD | 	qmul	local04, result1
0a66c     18 1E 62 FD | 	getqx	local01
0a670     1C 22 06 F6 | 	mov	local03, #28
0a674                 | LR__0903
0a674     0F 29 02 F6 | 	mov	local06, local01
0a678     10 2B 02 F6 | 	mov	local07, local02
0a67c     11 27 02 F6 | 	mov	local05, local03
0a680     4A 00 00 FF 
0a684     7C E4 05 F1 | 	add	objptr, ##38012
0a688     F2 1E 02 FB | 	rdlong	local01, objptr
0a68c     0F 25 02 F6 | 	mov	local04, local01
0a690     01 24 66 F0 | 	shl	local04, #1
0a694     0F 25 02 F1 | 	add	local04, local01
0a698     02 24 66 F0 | 	shl	local04, #2
0a69c     03 00 00 FF 
0a6a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6a4     F2 24 02 F1 | 	add	local04, objptr
0a6a8     12 29 62 FC | 	wrlong	local06, local04
0a6ac     03 00 00 FF 
0a6b0     00 E4 05 F1 | 	add	objptr, ##1536
0a6b4     F2 28 02 FB | 	rdlong	local06, objptr
0a6b8     14 1F 02 F6 | 	mov	local01, local06
0a6bc     01 1E 66 F0 | 	shl	local01, #1
0a6c0     14 1F 02 F1 | 	add	local01, local06
0a6c4     02 1E 66 F0 | 	shl	local01, #2
0a6c8     03 00 00 FF 
0a6cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a6d0     F2 1E 02 F1 | 	add	local01, objptr
0a6d4     04 1E 06 F1 | 	add	local01, #4
0a6d8     0F 2B 62 FC | 	wrlong	local07, local01
0a6dc     03 00 00 FF 
0a6e0     00 E4 05 F1 | 	add	objptr, ##1536
0a6e4     F2 2A 02 FB | 	rdlong	local07, objptr
0a6e8     15 29 02 F6 | 	mov	local06, local07
0a6ec     01 28 66 F0 | 	shl	local06, #1
0a6f0     15 29 02 F1 | 	add	local06, local07
0a6f4     02 28 66 F0 | 	shl	local06, #2
0a6f8     03 00 00 FF 
0a6fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a700     F2 28 02 F1 | 	add	local06, objptr
0a704     08 28 06 F1 | 	add	local06, #8
0a708     14 27 62 FC | 	wrlong	local05, local06
0a70c     03 00 00 FF 
0a710     00 E4 05 F1 | 	add	objptr, ##1536
0a714     F2 28 02 FB | 	rdlong	local06, objptr
0a718     01 28 06 F1 | 	add	local06, #1
0a71c     F2 28 62 FC | 	wrlong	local06, objptr
0a720     13 00 00 FF 
0a724     38 E4 85 F1 | 	sub	objptr, ##9784
0a728     F2 28 02 FB | 	rdlong	local06, objptr
0a72c     01 28 06 F1 | 	add	local06, #1
0a730     F2 28 62 FC | 	wrlong	local06, objptr
0a734     37 00 00 FF 
0a738     44 E4 85 F1 | 	sub	objptr, ##28228
0a73c     E4 07 90 FD | 	jmp	#LR__0923
0a740                 | LR__0904
0a740                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a740     37 00 00 FF 
0a744     44 E4 05 F1 | 	add	objptr, ##28228
0a748     F2 16 02 FB | 	rdlong	arg03, objptr
0a74c     03 16 66 F0 | 	shl	arg03, #3
0a750     02 00 00 FF 
0a754     38 E4 85 F1 | 	sub	objptr, ##1080
0a758     F2 16 02 F1 | 	add	arg03, objptr
0a75c     0B 13 02 FB | 	rdlong	arg01, arg03
0a760     01 14 06 F6 | 	mov	arg02, #1
0a764     35 00 00 FF 
0a768     0C E4 85 F1 | 	sub	objptr, ##27148
0a76c     90 8E B1 FD | 	call	#__system__Left_S
0a770     FD 12 02 F6 | 	mov	arg01, result1
0a774     8B 01 00 FF 
0a778     72 15 06 F6 | 	mov	arg02, ##@LR__5501
0a77c     2C 6E B1 FD | 	call	#__system___string_cmp
0a780     00 FA 0D F2 | 	cmp	result1, #0 wz
0a784     94 00 90 5D |  if_ne	jmp	#LR__0907
0a788     37 00 00 FF 
0a78c     44 E4 05 F1 | 	add	objptr, ##28228
0a790     F2 2A 02 FB | 	rdlong	local07, objptr
0a794     15 29 02 F6 | 	mov	local06, local07
0a798     03 28 66 F0 | 	shl	local06, #3
0a79c     02 00 00 FF 
0a7a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7a4     F2 28 02 F1 | 	add	local06, objptr
0a7a8     8B 01 00 FF 
0a7ac     74 27 06 F6 | 	mov	local05, ##@LR__5502
0a7b0     03 2A 66 F0 | 	shl	local07, #3
0a7b4     F2 2A 02 F1 | 	add	local07, objptr
0a7b8     15 2B 02 FB | 	rdlong	local07, local07
0a7bc     02 00 00 FF 
0a7c0     38 E4 05 F1 | 	add	objptr, ##1080
0a7c4     F2 1E 02 FB | 	rdlong	local01, objptr
0a7c8     03 1E 66 F0 | 	shl	local01, #3
0a7cc     02 00 00 FF 
0a7d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7d4     F2 1E 02 F1 | 	add	local01, objptr
0a7d8     0F 13 02 FB | 	rdlong	arg01, local01
0a7dc     35 00 00 FF 
0a7e0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7e4     09 2D 02 F6 | 	mov	local08, arg01
0a7e8     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a7ec                 | LR__0905
0a7ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a7f0     01 2C 06 51 |  if_ne	add	local08, #1
0a7f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a7f8                 | LR__0906
0a7f8     09 2D 82 F1 | 	sub	local08, arg01
0a7fc     16 15 02 F6 | 	mov	arg02, local08
0a800     01 14 86 F1 | 	sub	arg02, #1
0a804     15 13 02 F6 | 	mov	arg01, local07
0a808     7C 8E B1 FD | 	call	#__system__Right_S
0a80c     FD 14 02 F6 | 	mov	arg02, result1
0a810     13 13 02 F6 | 	mov	arg01, local05
0a814     C8 6D B1 FD | 	call	#__system___string_concat
0a818     14 FB 61 FC | 	wrlong	result1, local06
0a81c                 | LR__0907
0a81c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a81c     37 00 00 FF 
0a820     44 E4 05 F1 | 	add	objptr, ##28228
0a824     F2 16 02 FB | 	rdlong	arg03, objptr
0a828     03 16 66 F0 | 	shl	arg03, #3
0a82c     02 00 00 FF 
0a830     38 E4 85 F1 | 	sub	objptr, ##1080
0a834     F2 16 02 F1 | 	add	arg03, objptr
0a838     0B 13 02 FB | 	rdlong	arg01, arg03
0a83c     01 14 06 F6 | 	mov	arg02, #1
0a840     35 00 00 FF 
0a844     0C E4 85 F1 | 	sub	objptr, ##27148
0a848     B4 8D B1 FD | 	call	#__system__Left_S
0a84c     FD 12 02 F6 | 	mov	arg01, result1
0a850     8B 01 00 FF 
0a854     77 15 06 F6 | 	mov	arg02, ##@LR__5503
0a858     50 6D B1 FD | 	call	#__system___string_cmp
0a85c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a860     94 00 90 5D |  if_ne	jmp	#LR__0910
0a864     37 00 00 FF 
0a868     44 E4 05 F1 | 	add	objptr, ##28228
0a86c     F2 2A 02 FB | 	rdlong	local07, objptr
0a870     15 29 02 F6 | 	mov	local06, local07
0a874     03 28 66 F0 | 	shl	local06, #3
0a878     02 00 00 FF 
0a87c     38 E4 85 F1 | 	sub	objptr, ##1080
0a880     F2 28 02 F1 | 	add	local06, objptr
0a884     8B 01 00 FF 
0a888     79 27 06 F6 | 	mov	local05, ##@LR__5504
0a88c     03 2A 66 F0 | 	shl	local07, #3
0a890     F2 2A 02 F1 | 	add	local07, objptr
0a894     15 2B 02 FB | 	rdlong	local07, local07
0a898     02 00 00 FF 
0a89c     38 E4 05 F1 | 	add	objptr, ##1080
0a8a0     F2 1E 02 FB | 	rdlong	local01, objptr
0a8a4     03 1E 66 F0 | 	shl	local01, #3
0a8a8     02 00 00 FF 
0a8ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a8b0     F2 1E 02 F1 | 	add	local01, objptr
0a8b4     0F 13 02 FB | 	rdlong	arg01, local01
0a8b8     35 00 00 FF 
0a8bc     0C E4 85 F1 | 	sub	objptr, ##27148
0a8c0     09 2D 02 F6 | 	mov	local08, arg01
0a8c4     97 06 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0a8c8                 | LR__0908
0a8c8     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a8cc     01 2C 06 51 |  if_ne	add	local08, #1
0a8d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0908
0a8d4                 | LR__0909
0a8d4     09 2D 82 F1 | 	sub	local08, arg01
0a8d8     16 15 02 F6 | 	mov	arg02, local08
0a8dc     01 14 86 F1 | 	sub	arg02, #1
0a8e0     15 13 02 F6 | 	mov	arg01, local07
0a8e4     A0 8D B1 FD | 	call	#__system__Right_S
0a8e8     FD 14 02 F6 | 	mov	arg02, result1
0a8ec     13 13 02 F6 | 	mov	arg01, local05
0a8f0     EC 6C B1 FD | 	call	#__system___string_concat
0a8f4     14 FB 61 FC | 	wrlong	result1, local06
0a8f8                 | LR__0910
0a8f8     37 00 00 FF 
0a8fc     44 E4 05 F1 | 	add	objptr, ##28228
0a900     F2 28 02 FB | 	rdlong	local06, objptr
0a904     03 28 66 F0 | 	shl	local06, #3
0a908     02 00 00 FF 
0a90c     38 E4 85 F1 | 	sub	objptr, ##1080
0a910     F2 28 02 F1 | 	add	local06, objptr
0a914     14 13 02 FB | 	rdlong	arg01, local06
0a918     00 14 06 F6 | 	mov	arg02, #0
0a91c     35 00 00 FF 
0a920     0C E4 85 F1 | 	sub	objptr, ##27148
0a924     90 A0 B1 FD | 	call	#__system____builtin_atoi
0a928     FD 24 02 FD | 	qmul	local04, result1
0a92c     4A 00 00 FF 
0a930     7C E4 05 F1 | 	add	objptr, ##38012
0a934     F2 28 02 FB | 	rdlong	local06, objptr
0a938     14 2F 02 F6 | 	mov	local09, local06
0a93c     01 2E 66 F0 | 	shl	local09, #1
0a940     14 2F 02 F1 | 	add	local09, local06
0a944     02 2E 66 F0 | 	shl	local09, #2
0a948     03 00 00 FF 
0a94c     00 E4 85 F1 | 	sub	objptr, ##1536
0a950     F2 2E 02 F1 | 	add	local09, objptr
0a954     03 00 00 FF 
0a958     00 E4 05 F1 | 	add	objptr, ##1536
0a95c     18 1E 62 FD | 	getqx	local01
0a960     1C 22 06 F6 | 	mov	local03, #28
0a964     0F 29 02 F6 | 	mov	local06, local01
0a968     10 2B 02 F6 | 	mov	local07, local02
0a96c     17 29 62 FC | 	wrlong	local06, local09
0a970     11 2F 02 F6 | 	mov	local09, local03
0a974     F2 28 02 FB | 	rdlong	local06, objptr
0a978     14 27 02 F6 | 	mov	local05, local06
0a97c     01 26 66 F0 | 	shl	local05, #1
0a980     14 27 02 F1 | 	add	local05, local06
0a984     02 26 66 F0 | 	shl	local05, #2
0a988     03 00 00 FF 
0a98c     00 E4 85 F1 | 	sub	objptr, ##1536
0a990     F2 26 02 F1 | 	add	local05, objptr
0a994     04 26 06 F1 | 	add	local05, #4
0a998     13 2B 62 FC | 	wrlong	local07, local05
0a99c     03 00 00 FF 
0a9a0     00 E4 05 F1 | 	add	objptr, ##1536
0a9a4     F2 2A 02 FB | 	rdlong	local07, objptr
0a9a8     15 29 02 F6 | 	mov	local06, local07
0a9ac     01 28 66 F0 | 	shl	local06, #1
0a9b0     15 29 02 F1 | 	add	local06, local07
0a9b4     02 28 66 F0 | 	shl	local06, #2
0a9b8     03 00 00 FF 
0a9bc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9c0     F2 28 02 F1 | 	add	local06, objptr
0a9c4     08 28 06 F1 | 	add	local06, #8
0a9c8     14 2F 62 FC | 	wrlong	local09, local06
0a9cc     03 00 00 FF 
0a9d0     00 E4 05 F1 | 	add	objptr, ##1536
0a9d4     F2 28 02 FB | 	rdlong	local06, objptr
0a9d8     01 28 06 F1 | 	add	local06, #1
0a9dc     F2 28 62 FC | 	wrlong	local06, objptr
0a9e0     13 00 00 FF 
0a9e4     38 E4 85 F1 | 	sub	objptr, ##9784
0a9e8     F2 28 02 FB | 	rdlong	local06, objptr
0a9ec     01 28 06 F1 | 	add	local06, #1
0a9f0     F2 28 62 FC | 	wrlong	local06, objptr
0a9f4     37 00 00 FF 
0a9f8     44 E4 85 F1 | 	sub	objptr, ##28228
0a9fc     24 05 90 FD | 	jmp	#LR__0923
0aa00                 | LR__0911
0aa00                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0aa00     01 24 0E F2 | 	cmp	local04, #1 wz
0aa04     48 00 90 5D |  if_ne	jmp	#LR__0912
0aa08     00 C0 1F FF 
0aa0c     00 28 06 F6 | 	mov	local06, ##1065353216
0aa10     37 00 00 FF 
0aa14     44 E4 05 F1 | 	add	objptr, ##28228
0aa18     F2 2E 02 FB | 	rdlong	local09, objptr
0aa1c     03 2E 66 F0 | 	shl	local09, #3
0aa20     02 00 00 FF 
0aa24     38 E4 85 F1 | 	sub	objptr, ##1080
0aa28     F2 2E 02 F1 | 	add	local09, objptr
0aa2c     17 13 02 FB | 	rdlong	arg01, local09
0aa30     35 00 00 FF 
0aa34     0C E4 85 F1 | 	sub	objptr, ##27148
0aa38     10 A1 B1 FD | 	call	#__system____builtin_atof
0aa3c     FD 14 02 F6 | 	mov	arg02, result1
0aa40     14 13 02 F6 | 	mov	arg01, local06
0aa44     F8 98 B1 FD | 	call	#__system___float_mul
0aa48     FD 1E 02 F6 | 	mov	local01, result1
0aa4c     1E 22 06 F6 | 	mov	local03, #30
0aa50                 | LR__0912
0aa50                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0aa50     FF FF 7F FF 
0aa54     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0aa58     48 00 90 5D |  if_ne	jmp	#LR__0913
0aa5c     00 C0 5F FF 
0aa60     00 28 06 F6 | 	mov	local06, ##-1082130432
0aa64     37 00 00 FF 
0aa68     44 E4 05 F1 | 	add	objptr, ##28228
0aa6c     F2 2E 02 FB | 	rdlong	local09, objptr
0aa70     03 2E 66 F0 | 	shl	local09, #3
0aa74     02 00 00 FF 
0aa78     38 E4 85 F1 | 	sub	objptr, ##1080
0aa7c     F2 2E 02 F1 | 	add	local09, objptr
0aa80     17 13 02 FB | 	rdlong	arg01, local09
0aa84     35 00 00 FF 
0aa88     0C E4 85 F1 | 	sub	objptr, ##27148
0aa8c     BC A0 B1 FD | 	call	#__system____builtin_atof
0aa90     FD 14 02 F6 | 	mov	arg02, result1
0aa94     14 13 02 F6 | 	mov	arg01, local06
0aa98     A4 98 B1 FD | 	call	#__system___float_mul
0aa9c     FD 1E 02 F6 | 	mov	local01, result1
0aaa0     1E 22 06 F6 | 	mov	local03, #30
0aaa4                 | LR__0913
0aaa4     0F 29 02 F6 | 	mov	local06, local01
0aaa8     10 2B 02 F6 | 	mov	local07, local02
0aaac     11 27 02 F6 | 	mov	local05, local03
0aab0     4A 00 00 FF 
0aab4     7C E4 05 F1 | 	add	objptr, ##38012
0aab8     F2 1E 02 FB | 	rdlong	local01, objptr
0aabc     0F 2F 02 F6 | 	mov	local09, local01
0aac0     01 2E 66 F0 | 	shl	local09, #1
0aac4     0F 2F 02 F1 | 	add	local09, local01
0aac8     02 2E 66 F0 | 	shl	local09, #2
0aacc     03 00 00 FF 
0aad0     00 E4 85 F1 | 	sub	objptr, ##1536
0aad4     F2 2E 02 F1 | 	add	local09, objptr
0aad8     17 29 62 FC | 	wrlong	local06, local09
0aadc     03 00 00 FF 
0aae0     00 E4 05 F1 | 	add	objptr, ##1536
0aae4     F2 2E 02 FB | 	rdlong	local09, objptr
0aae8     17 29 02 F6 | 	mov	local06, local09
0aaec     01 28 66 F0 | 	shl	local06, #1
0aaf0     17 29 02 F1 | 	add	local06, local09
0aaf4     02 28 66 F0 | 	shl	local06, #2
0aaf8     03 00 00 FF 
0aafc     00 E4 85 F1 | 	sub	objptr, ##1536
0ab00     F2 28 02 F1 | 	add	local06, objptr
0ab04     04 28 06 F1 | 	add	local06, #4
0ab08     14 2B 62 FC | 	wrlong	local07, local06
0ab0c     03 00 00 FF 
0ab10     00 E4 05 F1 | 	add	objptr, ##1536
0ab14     F2 2E 02 FB | 	rdlong	local09, objptr
0ab18     17 2B 02 F6 | 	mov	local07, local09
0ab1c     01 2A 66 F0 | 	shl	local07, #1
0ab20     17 2B 02 F1 | 	add	local07, local09
0ab24     02 2A 66 F0 | 	shl	local07, #2
0ab28     03 00 00 FF 
0ab2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ab30     F2 2A 02 F1 | 	add	local07, objptr
0ab34     08 2A 06 F1 | 	add	local07, #8
0ab38     15 27 62 FC | 	wrlong	local05, local07
0ab3c     03 00 00 FF 
0ab40     00 E4 05 F1 | 	add	objptr, ##1536
0ab44     F2 28 02 FB | 	rdlong	local06, objptr
0ab48     01 28 06 F1 | 	add	local06, #1
0ab4c     F2 28 62 FC | 	wrlong	local06, objptr
0ab50     13 00 00 FF 
0ab54     38 E4 85 F1 | 	sub	objptr, ##9784
0ab58     F2 28 02 FB | 	rdlong	local06, objptr
0ab5c     01 28 06 F1 | 	add	local06, #1
0ab60     F2 28 62 FC | 	wrlong	local06, objptr
0ab64     37 00 00 FF 
0ab68     44 E4 85 F1 | 	sub	objptr, ##28228
0ab6c     B4 03 90 FD | 	jmp	#LR__0923
0ab70                 | LR__0914
0ab70     37 00 00 FF 
0ab74     44 E4 05 F1 | 	add	objptr, ##28228
0ab78     F2 16 02 FB | 	rdlong	arg03, objptr
0ab7c     03 16 66 F0 | 	shl	arg03, #3
0ab80     02 00 00 FF 
0ab84     38 E4 85 F1 | 	sub	objptr, ##1080
0ab88     F2 16 02 F1 | 	add	arg03, objptr
0ab8c     0B 13 02 FB | 	rdlong	arg01, arg03
0ab90     35 00 00 FF 
0ab94     0C E4 85 F1 | 	sub	objptr, ##27148
0ab98     09 2D 02 F6 | 	mov	local08, arg01
0ab9c     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0aba0                 | LR__0915
0aba0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0aba4     01 2C 06 51 |  if_ne	add	local08, #1
0aba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0abac                 | LR__0916
0abac     09 2D 82 F1 | 	sub	local08, arg01
0abb0     16 FB 01 F6 | 	mov	result1, local08
0abb4     51 00 00 FF 
0abb8     FC E5 05 F1 | 	add	objptr, ##41980
0abbc     F2 FA 61 FC | 	wrlong	result1, objptr
0abc0     50 E4 85 F1 | 	sub	objptr, #80
0abc4     F2 12 02 FB | 	rdlong	arg01, objptr
0abc8     FD 12 82 F1 | 	sub	arg01, result1
0abcc     04 12 86 F1 | 	sub	arg01, #4
0abd0     03 12 26 F5 | 	andn	arg01, #3
0abd4     F2 12 62 FC | 	wrlong	arg01, objptr
0abd8     50 E4 05 F1 | 	add	objptr, #80
0abdc     F2 14 02 FB | 	rdlong	arg02, objptr
0abe0     51 00 00 FF 
0abe4     FC E5 85 F1 | 	sub	objptr, ##41980
0abe8     64 35 B1 FD | 	call	#_pslpoke
0abec                 | '     pslpoke memtop,l
0abec                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0abec     01 30 06 F6 | 	mov	local10, #1
0abf0     51 00 00 FF 
0abf4     FC E5 05 F1 | 	add	objptr, ##41980
0abf8     F2 32 02 FB | 	rdlong	local11, objptr
0abfc     51 00 00 FF 
0ac00     FC E5 85 F1 | 	sub	objptr, ##41980
0ac04     01 32 06 F1 | 	add	local11, #1
0ac08                 | LR__0917
0ac08     19 31 52 F2 | 	cmps	local10, local11 wc
0ac0c     5C 00 90 3D |  if_ae	jmp	#LR__0918
0ac10     51 00 00 FF 
0ac14     AC E5 05 F1 | 	add	objptr, ##41900
0ac18     F2 2A 02 FB | 	rdlong	local07, objptr
0ac1c     03 2A 06 F1 | 	add	local07, #3
0ac20     18 2B 02 F1 | 	add	local07, local10
0ac24     1A 00 00 FF 
0ac28     68 E5 85 F1 | 	sub	objptr, ##13672
0ac2c     F2 2E 02 FB | 	rdlong	local09, objptr
0ac30     03 2E 66 F0 | 	shl	local09, #3
0ac34     02 00 00 FF 
0ac38     38 E4 85 F1 | 	sub	objptr, ##1080
0ac3c     F2 2E 02 F1 | 	add	local09, objptr
0ac40     17 13 02 FB | 	rdlong	arg01, local09
0ac44     18 15 02 F6 | 	mov	arg02, local10
0ac48     01 16 06 F6 | 	mov	arg03, #1
0ac4c     35 00 00 FF 
0ac50     0C E4 85 F1 | 	sub	objptr, ##27148
0ac54     C0 8A B1 FD | 	call	#__system__Mid_S
0ac58     FD 14 C2 FA | 	rdbyte	arg02, result1
0ac5c     15 13 02 F6 | 	mov	arg01, local07
0ac60     7C 35 B1 FD | 	call	#_pspoke
0ac64     01 30 06 F1 | 	add	local10, #1
0ac68     9C FF 9F FD | 	jmp	#LR__0917
0ac6c                 | LR__0918
0ac6c     51 00 00 FF 
0ac70     AC E5 05 F1 | 	add	objptr, ##41900
0ac74     F2 1E 02 FB | 	rdlong	local01, objptr
0ac78     2B 22 06 F6 | 	mov	local03, #43
0ac7c     0F 29 02 F6 | 	mov	local06, local01
0ac80     10 2B 02 F6 | 	mov	local07, local02
0ac84     11 33 02 F6 | 	mov	local11, local03
0ac88     07 00 00 FF 
0ac8c     30 E5 85 F1 | 	sub	objptr, ##3888
0ac90     F2 30 02 FB | 	rdlong	local10, objptr
0ac94     18 2F 02 F6 | 	mov	local09, local10
0ac98     01 2E 66 F0 | 	shl	local09, #1
0ac9c     18 2F 02 F1 | 	add	local09, local10
0aca0     02 2E 66 F0 | 	shl	local09, #2
0aca4     03 00 00 FF 
0aca8     00 E4 85 F1 | 	sub	objptr, ##1536
0acac     F2 2E 02 F1 | 	add	local09, objptr
0acb0     17 29 62 FC | 	wrlong	local06, local09
0acb4     03 00 00 FF 
0acb8     00 E4 05 F1 | 	add	objptr, ##1536
0acbc     F2 30 02 FB | 	rdlong	local10, objptr
0acc0     18 2F 02 F6 | 	mov	local09, local10
0acc4     01 2E 66 F0 | 	shl	local09, #1
0acc8     18 2F 02 F1 | 	add	local09, local10
0accc     02 2E 66 F0 | 	shl	local09, #2
0acd0     03 00 00 FF 
0acd4     00 E4 85 F1 | 	sub	objptr, ##1536
0acd8     F2 2E 02 F1 | 	add	local09, objptr
0acdc     04 2E 06 F1 | 	add	local09, #4
0ace0     17 2B 62 FC | 	wrlong	local07, local09
0ace4     03 00 00 FF 
0ace8     00 E4 05 F1 | 	add	objptr, ##1536
0acec     F2 30 02 FB | 	rdlong	local10, objptr
0acf0     18 2F 02 F6 | 	mov	local09, local10
0acf4     01 2E 66 F0 | 	shl	local09, #1
0acf8     18 2F 02 F1 | 	add	local09, local10
0acfc     02 2E 66 F0 | 	shl	local09, #2
0ad00     03 00 00 FF 
0ad04     00 E4 85 F1 | 	sub	objptr, ##1536
0ad08     F2 2E 02 F1 | 	add	local09, objptr
0ad0c     08 2E 06 F1 | 	add	local09, #8
0ad10     17 33 62 FC | 	wrlong	local11, local09
0ad14     03 00 00 FF 
0ad18     00 E4 05 F1 | 	add	objptr, ##1536
0ad1c     F2 28 02 FB | 	rdlong	local06, objptr
0ad20     01 28 06 F1 | 	add	local06, #1
0ad24     F2 28 62 FC | 	wrlong	local06, objptr
0ad28     13 00 00 FF 
0ad2c     38 E4 85 F1 | 	sub	objptr, ##9784
0ad30     F2 28 02 FB | 	rdlong	local06, objptr
0ad34     01 28 06 F1 | 	add	local06, #1
0ad38     F2 28 62 FC | 	wrlong	local06, objptr
0ad3c     37 00 00 FF 
0ad40     44 E4 85 F1 | 	sub	objptr, ##28228
0ad44     DC 01 90 FD | 	jmp	#LR__0923
0ad48                 | LR__0919
0ad48     2C 22 06 F6 | 	mov	local03, #44
0ad4c     37 00 00 FF 
0ad50     44 E4 05 F1 | 	add	objptr, ##28228
0ad54     F2 28 02 FB | 	rdlong	local06, objptr
0ad58     03 28 66 F0 | 	shl	local06, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 28 02 F1 | 	add	local06, objptr
0ad68     14 13 02 FB | 	rdlong	arg01, local06
0ad6c     00 14 06 F6 | 	mov	arg02, #0
0ad70     35 00 00 FF 
0ad74     0C E4 85 F1 | 	sub	objptr, ##27148
0ad78     3C 9C B1 FD | 	call	#__system____builtin_atoi
0ad7c     FD 1E 02 F6 | 	mov	local01, result1
0ad80     0F 29 02 F6 | 	mov	local06, local01
0ad84     10 2B 02 F6 | 	mov	local07, local02
0ad88     11 33 02 F6 | 	mov	local11, local03
0ad8c     4A 00 00 FF 
0ad90     7C E4 05 F1 | 	add	objptr, ##38012
0ad94     F2 30 02 FB | 	rdlong	local10, objptr
0ad98     18 2F 02 F6 | 	mov	local09, local10
0ad9c     01 2E 66 F0 | 	shl	local09, #1
0ada0     18 2F 02 F1 | 	add	local09, local10
0ada4     02 2E 66 F0 | 	shl	local09, #2
0ada8     03 00 00 FF 
0adac     00 E4 85 F1 | 	sub	objptr, ##1536
0adb0     F2 2E 02 F1 | 	add	local09, objptr
0adb4     17 29 62 FC | 	wrlong	local06, local09
0adb8     03 00 00 FF 
0adbc     00 E4 05 F1 | 	add	objptr, ##1536
0adc0     F2 30 02 FB | 	rdlong	local10, objptr
0adc4     18 2F 02 F6 | 	mov	local09, local10
0adc8     01 2E 66 F0 | 	shl	local09, #1
0adcc     18 2F 02 F1 | 	add	local09, local10
0add0     02 2E 66 F0 | 	shl	local09, #2
0add4     03 00 00 FF 
0add8     00 E4 85 F1 | 	sub	objptr, ##1536
0addc     F2 2E 02 F1 | 	add	local09, objptr
0ade0     04 2E 06 F1 | 	add	local09, #4
0ade4     17 2B 62 FC | 	wrlong	local07, local09
0ade8     03 00 00 FF 
0adec     00 E4 05 F1 | 	add	objptr, ##1536
0adf0     F2 30 02 FB | 	rdlong	local10, objptr
0adf4     18 2F 02 F6 | 	mov	local09, local10
0adf8     01 2E 66 F0 | 	shl	local09, #1
0adfc     18 2F 02 F1 | 	add	local09, local10
0ae00     02 2E 66 F0 | 	shl	local09, #2
0ae04     03 00 00 FF 
0ae08     00 E4 85 F1 | 	sub	objptr, ##1536
0ae0c     F2 2E 02 F1 | 	add	local09, objptr
0ae10     08 2E 06 F1 | 	add	local09, #8
0ae14     17 33 62 FC | 	wrlong	local11, local09
0ae18     03 00 00 FF 
0ae1c     00 E4 05 F1 | 	add	objptr, ##1536
0ae20     F2 28 02 FB | 	rdlong	local06, objptr
0ae24     01 28 06 F1 | 	add	local06, #1
0ae28     F2 28 62 FC | 	wrlong	local06, objptr
0ae2c     13 00 00 FF 
0ae30     38 E4 85 F1 | 	sub	objptr, ##9784
0ae34     F2 28 02 FB | 	rdlong	local06, objptr
0ae38     01 28 06 F1 | 	add	local06, #1
0ae3c     F2 28 62 FC | 	wrlong	local06, objptr
0ae40     37 00 00 FF 
0ae44     44 E4 85 F1 | 	sub	objptr, ##28228
0ae48     D8 00 90 FD | 	jmp	#LR__0923
0ae4c                 | LR__0920
0ae4c     12 13 02 F6 | 	mov	arg01, local04
0ae50     24 04 B0 FD | 	call	#_getvar
0ae54     37 00 00 FF 
0ae58     44 E4 05 F1 | 	add	objptr, ##28228
0ae5c     F2 28 02 FB | 	rdlong	local06, objptr
0ae60     01 28 06 F1 | 	add	local06, #1
0ae64     F2 28 62 FC | 	wrlong	local06, objptr
0ae68     37 00 00 FF 
0ae6c     44 E4 85 F1 | 	sub	objptr, ##28228
0ae70                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ae70     01 FA 55 F2 | 	cmps	result1, #1 wc
0ae74     B0 00 90 3D |  if_ae	jmp	#LR__0924
0ae78     A8 00 90 FD | 	jmp	#LR__0923
0ae7c                 | LR__0921
0ae7c     37 00 00 FF 
0ae80     44 E4 05 F1 | 	add	objptr, ##28228
0ae84     F2 28 02 FB | 	rdlong	local06, objptr
0ae88     01 28 06 F1 | 	add	local06, #1
0ae8c     F2 28 62 FC | 	wrlong	local06, objptr
0ae90     37 00 00 FF 
0ae94     44 E4 85 F1 | 	sub	objptr, ##28228
0ae98     20 F1 BF FD | 	call	#_expr
0ae9c                 | '     ct+=1
0ae9c                 | '     err=expr() : if err>0 then return err 
0ae9c     01 FA 55 F2 | 	cmps	result1, #1 wc
0aea0     84 00 90 3D |  if_ae	jmp	#LR__0924
0aea4                 | '     if lparts(ct).token=token_rpar then ct+=1
0aea4     37 00 00 FF 
0aea8     44 E4 05 F1 | 	add	objptr, ##28228
0aeac     F2 32 02 FB | 	rdlong	local11, objptr
0aeb0     03 32 66 F0 | 	shl	local11, #3
0aeb4     02 00 00 FF 
0aeb8     38 E4 85 F1 | 	sub	objptr, ##1080
0aebc     F2 32 02 F1 | 	add	local11, objptr
0aec0     04 32 06 F1 | 	add	local11, #4
0aec4     19 33 02 FB | 	rdlong	local11, local11
0aec8     14 32 0E F2 | 	cmp	local11, #20 wz
0aecc     35 00 00 FF 
0aed0     0C E4 85 F1 | 	sub	objptr, ##27148
0aed4     4C 00 90 5D |  if_ne	jmp	#LR__0923
0aed8     37 00 00 FF 
0aedc     44 E4 05 F1 | 	add	objptr, ##28228
0aee0     F2 28 02 FB | 	rdlong	local06, objptr
0aee4     01 28 06 F1 | 	add	local06, #1
0aee8     F2 28 62 FC | 	wrlong	local06, objptr
0aeec     37 00 00 FF 
0aef0     44 E4 85 F1 | 	sub	objptr, ##28228
0aef4     2C 00 90 FD | 	jmp	#LR__0923
0aef8                 | LR__0922
0aef8     12 13 02 F6 | 	mov	arg01, local04
0aefc     34 00 B0 FD | 	call	#_getfun
0af00     37 00 00 FF 
0af04     44 E4 05 F1 | 	add	objptr, ##28228
0af08     F2 28 02 FB | 	rdlong	local06, objptr
0af0c     01 28 06 F1 | 	add	local06, #1
0af10     F2 28 62 FC | 	wrlong	local06, objptr
0af14     37 00 00 FF 
0af18     44 E4 85 F1 | 	sub	objptr, ##28228
0af1c                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0af1c     01 FA 55 F2 | 	cmps	result1, #1 wc
0af20     04 00 90 3D |  if_ae	jmp	#LR__0924
0af24                 | LR__0923
0af24                 | ' return 0  
0af24     00 FA 05 F6 | 	mov	result1, #0
0af28                 | LR__0924
0af28     A7 F0 03 F6 | 	mov	ptra, fp
0af2c     B2 00 A0 FD | 	call	#popregs_
0af30                 | _getvalue_ret
0af30     2D 00 64 FD | 	ret
0af34                 | 
0af34                 | ' 
0af34                 | ' ' Get a function result 
0af34                 | ' 
0af34                 | ' function getfun(m as integer) as ulong
0af34                 | _getfun
0af34     0F 4A 05 F6 | 	mov	COUNT_, #15
0af38     A8 00 A0 FD | 	call	#pushregs_
0af3c                 | _getfun_enter
0af3c     09 25 02 F6 | 	mov	local04, arg01
0af40     37 00 00 FF 
0af44     44 E4 05 F1 | 	add	objptr, ##28228
0af48     F2 26 02 FB | 	rdlong	local05, objptr
0af4c     13 29 02 F6 | 	mov	local06, local05
0af50     00 2A 06 F6 | 	mov	local07, #0
0af54                 | ' oldct=ct
0af54                 | ' numpar=0
0af54                 | ' if lparts(ct+1).token=token_lpar then
0af54     01 26 06 F1 | 	add	local05, #1
0af58     03 26 66 F0 | 	shl	local05, #3
0af5c     02 00 00 FF 
0af60     38 E4 85 F1 | 	sub	objptr, ##1080
0af64     F2 26 02 F1 | 	add	local05, objptr
0af68     04 26 06 F1 | 	add	local05, #4
0af6c     13 27 02 FB | 	rdlong	local05, local05
0af70     15 26 0E F2 | 	cmp	local05, #21 wz
0af74     35 00 00 FF 
0af78     0C E4 85 F1 | 	sub	objptr, ##27148
0af7c     54 01 90 5D |  if_ne	jmp	#LR__0934
0af80     37 00 00 FF 
0af84     44 E4 05 F1 | 	add	objptr, ##28228
0af88     F2 2C 02 FB | 	rdlong	local08, objptr
0af8c     01 2C 06 F1 | 	add	local08, #1
0af90     F2 2C 62 FC | 	wrlong	local08, objptr
0af94     37 00 00 FF 
0af98     44 E4 85 F1 | 	sub	objptr, ##28228
0af9c                 | '   ct+=1 											' omit this lpar, this is for expr list
0af9c                 | '   do
0af9c                 | LR__0930
0af9c     37 00 00 FF 
0afa0     44 E4 05 F1 | 	add	objptr, ##28228
0afa4     F2 26 02 FB | 	rdlong	local05, objptr
0afa8     01 26 06 F1 | 	add	local05, #1
0afac     F2 26 62 FC | 	wrlong	local05, objptr
0afb0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0afb0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0afb0     03 26 66 F0 | 	shl	local05, #3
0afb4     02 00 00 FF 
0afb8     38 E4 85 F1 | 	sub	objptr, ##1080
0afbc     F2 26 02 F1 | 	add	local05, objptr
0afc0     04 26 06 F1 | 	add	local05, #4
0afc4     13 2D 02 FB | 	rdlong	local08, local05
0afc8     15 2C 0E F2 | 	cmp	local08, #21 wz
0afcc     35 00 00 FF 
0afd0     0C E4 85 F1 | 	sub	objptr, ##27148
0afd4     44 00 90 5D |  if_ne	jmp	#LR__0931
0afd8     37 00 00 FF 
0afdc     44 E4 05 F1 | 	add	objptr, ##28228
0afe0     F2 2C 02 FB | 	rdlong	local08, objptr
0afe4     01 2C 06 F1 | 	add	local08, #1
0afe8     F2 2C 62 FC | 	wrlong	local08, objptr
0afec     37 00 00 FF 
0aff0     44 E4 85 F1 | 	sub	objptr, ##28228
0aff4     C4 EF BF FD | 	call	#_expr
0aff8     FD 2E 02 F6 | 	mov	local09, result1
0affc     37 00 00 FF 
0b000     44 E4 05 F1 | 	add	objptr, ##28228
0b004     F2 2C 02 FB | 	rdlong	local08, objptr
0b008     01 2C 06 F1 | 	add	local08, #1
0b00c     F2 2C 62 FC | 	wrlong	local08, objptr
0b010     37 00 00 FF 
0b014     44 E4 85 F1 | 	sub	objptr, ##28228
0b018     08 00 90 FD | 	jmp	#LR__0932
0b01c                 | LR__0931
0b01c     9C EF BF FD | 	call	#_expr
0b020     FD 2E 02 F6 | 	mov	local09, result1
0b024                 | LR__0932
0b024                 | '     if err>0 then return err
0b024     01 2E 16 F2 | 	cmp	local09, #1 wc
0b028     17 FB 01 36 |  if_ae	mov	result1, local09
0b02c     3C 02 90 3D |  if_ae	jmp	#LR__0936
0b030     01 2A 06 F1 | 	add	local07, #1
0b034     37 00 00 FF 
0b038     44 E4 05 F1 | 	add	objptr, ##28228
0b03c     F2 26 02 FB | 	rdlong	local05, objptr
0b040     03 26 66 F0 | 	shl	local05, #3
0b044     02 00 00 FF 
0b048     38 E4 85 F1 | 	sub	objptr, ##1080
0b04c     F2 26 02 F1 | 	add	local05, objptr
0b050     04 26 06 F1 | 	add	local05, #4
0b054     13 2F 02 FB | 	rdlong	local09, local05
0b058     14 2E 0E F2 | 	cmp	local09, #20 wz
0b05c     35 00 00 FF 
0b060     0C E4 85 F1 | 	sub	objptr, ##27148
0b064     34 00 90 AD |  if_e	jmp	#LR__0933
0b068     37 00 00 FF 
0b06c     44 E4 05 F1 | 	add	objptr, ##28228
0b070     F2 2E 02 FB | 	rdlong	local09, objptr
0b074     03 2E 66 F0 | 	shl	local09, #3
0b078     02 00 00 FF 
0b07c     38 E4 85 F1 | 	sub	objptr, ##1080
0b080     F2 2E 02 F1 | 	add	local09, objptr
0b084     04 2E 06 F1 | 	add	local09, #4
0b088     17 2F 02 FB | 	rdlong	local09, local09
0b08c     FE 2F 0E F2 | 	cmp	local09, #510 wz
0b090     35 00 00 FF 
0b094     0C E4 85 F1 | 	sub	objptr, ##27148
0b098     00 FF 9F 5D |  if_ne	jmp	#LR__0930
0b09c                 | LR__0933
0b09c                 | '   if lparts(ct).token=token_end then return 14
0b09c     37 00 00 FF 
0b0a0     44 E4 05 F1 | 	add	objptr, ##28228
0b0a4     F2 26 02 FB | 	rdlong	local05, objptr
0b0a8     03 26 66 F0 | 	shl	local05, #3
0b0ac     02 00 00 FF 
0b0b0     38 E4 85 F1 | 	sub	objptr, ##1080
0b0b4     F2 26 02 F1 | 	add	local05, objptr
0b0b8     04 26 06 F1 | 	add	local05, #4
0b0bc     13 2F 02 FB | 	rdlong	local09, local05
0b0c0     FE 2F 0E F2 | 	cmp	local09, #510 wz
0b0c4     35 00 00 FF 
0b0c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b0cc     0E FA 05 A6 |  if_e	mov	result1, #14
0b0d0     98 01 90 AD |  if_e	jmp	#LR__0936
0b0d4                 | LR__0934
0b0d4     15 1F 02 F6 | 	mov	local01, local07
0b0d8     03 28 66 F0 | 	shl	local06, #3
0b0dc     35 00 00 FF 
0b0e0     0C E4 05 F1 | 	add	objptr, ##27148
0b0e4     F2 28 02 F1 | 	add	local06, objptr
0b0e8     04 28 06 F1 | 	add	local06, #4
0b0ec     14 23 02 FB | 	rdlong	local03, local06
0b0f0     0F 2D 02 F6 | 	mov	local08, local01
0b0f4     10 31 02 F6 | 	mov	local10, local02
0b0f8     11 33 02 F6 | 	mov	local11, local03
0b0fc     15 00 00 FF 
0b100     70 E4 05 F1 | 	add	objptr, ##10864
0b104     F2 34 02 FB | 	rdlong	local12, objptr
0b108     1A 37 02 F6 | 	mov	local13, local12
0b10c     01 36 66 F0 | 	shl	local13, #1
0b110     1A 37 02 F1 | 	add	local13, local12
0b114     02 36 66 F0 | 	shl	local13, #2
0b118     03 00 00 FF 
0b11c     00 E4 85 F1 | 	sub	objptr, ##1536
0b120     F2 36 02 F1 | 	add	local13, objptr
0b124     1B 2D 62 FC | 	wrlong	local08, local13
0b128     03 00 00 FF 
0b12c     00 E4 05 F1 | 	add	objptr, ##1536
0b130     F2 2C 02 FB | 	rdlong	local08, objptr
0b134     16 39 02 F6 | 	mov	local14, local08
0b138     01 38 66 F0 | 	shl	local14, #1
0b13c     16 39 02 F1 | 	add	local14, local08
0b140     02 38 66 F0 | 	shl	local14, #2
0b144     03 00 00 FF 
0b148     00 E4 85 F1 | 	sub	objptr, ##1536
0b14c     F2 38 02 F1 | 	add	local14, objptr
0b150     04 38 06 F1 | 	add	local14, #4
0b154     1C 31 62 FC | 	wrlong	local10, local14
0b158     03 00 00 FF 
0b15c     00 E4 05 F1 | 	add	objptr, ##1536
0b160     F2 2C 02 FB | 	rdlong	local08, objptr
0b164     16 3B 02 F6 | 	mov	local15, local08
0b168     01 3A 66 F0 | 	shl	local15, #1
0b16c     16 3B 02 F1 | 	add	local15, local08
0b170     02 3A 66 F0 | 	shl	local15, #2
0b174     03 00 00 FF 
0b178     00 E4 85 F1 | 	sub	objptr, ##1536
0b17c     F2 3A 02 F1 | 	add	local15, objptr
0b180     08 3A 06 F1 | 	add	local15, #8
0b184     1D 33 62 FC | 	wrlong	local11, local15
0b188     03 00 00 FF 
0b18c     00 E4 05 F1 | 	add	objptr, ##1536
0b190     F2 2C 02 FB | 	rdlong	local08, objptr
0b194     01 2C 06 F1 | 	add	local08, #1
0b198     F2 2C 62 FC | 	wrlong	local08, objptr
0b19c     4A 00 00 FF 
0b1a0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1a4                 | ' t2.result.uresult=numpar
0b1a4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b1a4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b1a4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b1a4     FF FF 7F FF 
0b1a8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b1ac     B8 00 90 5D |  if_ne	jmp	#LR__0935
0b1b0     15 22 06 F6 | 	mov	local03, #21
0b1b4     0F 2D 02 F6 | 	mov	local08, local01
0b1b8     10 31 02 F6 | 	mov	local10, local02
0b1bc     11 33 02 F6 | 	mov	local11, local03
0b1c0     4A 00 00 FF 
0b1c4     7C E4 05 F1 | 	add	objptr, ##38012
0b1c8     F2 34 02 FB | 	rdlong	local12, objptr
0b1cc     1A 37 02 F6 | 	mov	local13, local12
0b1d0     01 36 66 F0 | 	shl	local13, #1
0b1d4     1A 37 02 F1 | 	add	local13, local12
0b1d8     02 36 66 F0 | 	shl	local13, #2
0b1dc     03 00 00 FF 
0b1e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b1e4     F2 36 02 F1 | 	add	local13, objptr
0b1e8     1B 2D 62 FC | 	wrlong	local08, local13
0b1ec     03 00 00 FF 
0b1f0     00 E4 05 F1 | 	add	objptr, ##1536
0b1f4     F2 3A 02 FB | 	rdlong	local15, objptr
0b1f8     1D 39 02 F6 | 	mov	local14, local15
0b1fc     01 38 66 F0 | 	shl	local14, #1
0b200     1D 39 02 F1 | 	add	local14, local15
0b204     02 38 66 F0 | 	shl	local14, #2
0b208     03 00 00 FF 
0b20c     00 E4 85 F1 | 	sub	objptr, ##1536
0b210     F2 38 02 F1 | 	add	local14, objptr
0b214     04 38 06 F1 | 	add	local14, #4
0b218     1C 31 62 FC | 	wrlong	local10, local14
0b21c     03 00 00 FF 
0b220     00 E4 05 F1 | 	add	objptr, ##1536
0b224     F2 38 02 FB | 	rdlong	local14, objptr
0b228     1C 3B 02 F6 | 	mov	local15, local14
0b22c     01 3A 66 F0 | 	shl	local15, #1
0b230     1C 3B 02 F1 | 	add	local15, local14
0b234     02 3A 66 F0 | 	shl	local15, #2
0b238     03 00 00 FF 
0b23c     00 E4 85 F1 | 	sub	objptr, ##1536
0b240     F2 3A 02 F1 | 	add	local15, objptr
0b244     08 3A 06 F1 | 	add	local15, #8
0b248     1D 33 62 FC | 	wrlong	local11, local15
0b24c     03 00 00 FF 
0b250     00 E4 05 F1 | 	add	objptr, ##1536
0b254     F2 2C 02 FB | 	rdlong	local08, objptr
0b258     01 2C 06 F1 | 	add	local08, #1
0b25c     F2 2C 62 FC | 	wrlong	local08, objptr
0b260     4A 00 00 FF 
0b264     7C E4 85 F1 | 	sub	objptr, ##38012
0b268                 | LR__0935
0b268                 | ' return 0
0b268     00 FA 05 F6 | 	mov	result1, #0
0b26c                 | LR__0936
0b26c     A7 F0 03 F6 | 	mov	ptra, fp
0b270     B2 00 A0 FD | 	call	#popregs_
0b274                 | _getfun_ret
0b274     2D 00 64 FD | 	ret
0b278                 | 
0b278                 | '   
0b278                 | '   
0b278                 | ' function getvar(m as integer) as ulong
0b278                 | _getvar
0b278     11 4A 05 F6 | 	mov	COUNT_, #17
0b27c     A8 00 A0 FD | 	call	#pushregs_
0b280                 | _getvar_enter
0b280     09 25 02 F6 | 	mov	local04, arg01
0b284     37 00 00 FF 
0b288     44 E4 05 F1 | 	add	objptr, ##28228
0b28c     F2 26 02 FB | 	rdlong	local05, objptr
0b290     03 26 66 F0 | 	shl	local05, #3
0b294     02 00 00 FF 
0b298     38 E4 85 F1 | 	sub	objptr, ##1080
0b29c     F2 26 02 F1 | 	add	local05, objptr
0b2a0     13 29 02 FB | 	rdlong	local06, local05
0b2a4     01 2A 66 F6 | 	neg	local07, #1
0b2a8                 | ' 
0b2a8                 | ' varname$=lparts(ct).part$
0b2a8                 | ' j=-1
0b2a8                 | ' 
0b2a8                 | ' for i=0 to varnum-1
0b2a8     00 2C 06 F6 | 	mov	local08, #0
0b2ac     04 E4 85 F1 | 	sub	objptr, #4
0b2b0     F2 2E 02 FB | 	rdlong	local09, objptr
0b2b4     35 00 00 FF 
0b2b8     08 E4 85 F1 | 	sub	objptr, ##27144
0b2bc                 | LR__0940
0b2bc     17 2D 52 F2 | 	cmps	local08, local09 wc
0b2c0     38 00 90 3D |  if_ae	jmp	#LR__0941
0b2c4                 | '   if variables(i).name=varname$ then j=i : exit
0b2c4     16 27 02 F6 | 	mov	local05, local08
0b2c8     04 26 66 F0 | 	shl	local05, #4
0b2cc     14 00 00 FF 
0b2d0     F8 E5 05 F1 | 	add	objptr, ##10744
0b2d4     F2 26 02 F1 | 	add	local05, objptr
0b2d8     13 13 02 FB | 	rdlong	arg01, local05
0b2dc     14 15 02 F6 | 	mov	arg02, local06
0b2e0     14 00 00 FF 
0b2e4     F8 E5 85 F1 | 	sub	objptr, ##10744
0b2e8     C0 62 B1 FD | 	call	#__system___string_cmp
0b2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0b2f0     16 2B 02 A6 |  if_e	mov	local07, local08
0b2f4     01 2C 06 51 |  if_ne	add	local08, #1
0b2f8     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b2fc                 | LR__0941
0b2fc                 | ' if  j=-1 andalso varnum<maxvars then   
0b2fc     FF FF 7F FF 
0b300     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b304     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b308     35 00 00 FF 
0b30c     08 E4 05 F1 | 	add	objptr, ##27144
0b310     F2 2E 02 FB | 	rdlong	local09, objptr
0b314     35 00 00 FF 
0b318     08 E4 85 F1 | 	sub	objptr, ##27144
0b31c     02 00 00 FF 
0b320     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b324     88 00 90 3D |  if_ae	jmp	#LR__0942
0b328     35 00 00 FF 
0b32c     08 E4 05 F1 | 	add	objptr, ##27144
0b330     F2 26 02 FB | 	rdlong	local05, objptr
0b334     04 26 66 F0 | 	shl	local05, #4
0b338     20 00 00 FF 
0b33c     10 E4 85 F1 | 	sub	objptr, ##16400
0b340     F2 26 02 F1 | 	add	local05, objptr
0b344     13 29 62 FC | 	wrlong	local06, local05
0b348     20 00 00 FF 
0b34c     10 E4 05 F1 | 	add	objptr, ##16400
0b350     F2 26 02 FB | 	rdlong	local05, objptr
0b354     04 26 66 F0 | 	shl	local05, #4
0b358     20 00 00 FF 
0b35c     10 E4 85 F1 | 	sub	objptr, ##16400
0b360     F2 26 02 F1 | 	add	local05, objptr
0b364     04 26 06 F1 | 	add	local05, #4
0b368     13 01 68 FC | 	wrlong	#0, local05
0b36c     20 00 00 FF 
0b370     10 E4 05 F1 | 	add	objptr, ##16400
0b374     F2 26 02 FB | 	rdlong	local05, objptr
0b378     04 26 66 F0 | 	shl	local05, #4
0b37c     20 00 00 FF 
0b380     10 E4 85 F1 | 	sub	objptr, ##16400
0b384     F2 26 02 F1 | 	add	local05, objptr
0b388     0C 26 06 F1 | 	add	local05, #12
0b38c     13 39 68 FC | 	wrlong	#28, local05
0b390     20 00 00 FF 
0b394     10 E4 05 F1 | 	add	objptr, ##16400
0b398     F2 2E 02 FB | 	rdlong	local09, objptr
0b39c     17 2B 02 F6 | 	mov	local07, local09
0b3a0     01 2E 06 F1 | 	add	local09, #1
0b3a4     F2 2E 62 FC | 	wrlong	local09, objptr
0b3a8     35 00 00 FF 
0b3ac     08 E4 85 F1 | 	sub	objptr, ##27144
0b3b0                 | LR__0942
0b3b0     00 2E 06 F6 | 	mov	local09, #0
0b3b4                 | ' numpar=0
0b3b4                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b3b4     37 00 00 FF 
0b3b8     44 E4 05 F1 | 	add	objptr, ##28228
0b3bc     F2 26 02 FB | 	rdlong	local05, objptr
0b3c0     01 26 06 F1 | 	add	local05, #1
0b3c4     03 26 66 F0 | 	shl	local05, #3
0b3c8     02 00 00 FF 
0b3cc     38 E4 85 F1 | 	sub	objptr, ##1080
0b3d0     F2 26 02 F1 | 	add	local05, objptr
0b3d4     04 26 06 F1 | 	add	local05, #4
0b3d8     13 2D 02 FB | 	rdlong	local08, local05
0b3dc     15 2C 0E F2 | 	cmp	local08, #21 wz
0b3e0     35 00 00 FF 
0b3e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b3e8     54 01 90 5D |  if_ne	jmp	#LR__0947
0b3ec     37 00 00 FF 
0b3f0     44 E4 05 F1 | 	add	objptr, ##28228
0b3f4     F2 30 02 FB | 	rdlong	local10, objptr
0b3f8     01 30 06 F1 | 	add	local10, #1
0b3fc     F2 30 62 FC | 	wrlong	local10, objptr
0b400     37 00 00 FF 
0b404     44 E4 85 F1 | 	sub	objptr, ##28228
0b408                 | '   ct+=1 											' omit this lpar, this is for expr list
0b408                 | '   do
0b408                 | LR__0943
0b408     37 00 00 FF 
0b40c     44 E4 05 F1 | 	add	objptr, ##28228
0b410     F2 26 02 FB | 	rdlong	local05, objptr
0b414     01 26 06 F1 | 	add	local05, #1
0b418     F2 26 62 FC | 	wrlong	local05, objptr
0b41c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b41c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b41c     03 26 66 F0 | 	shl	local05, #3
0b420     02 00 00 FF 
0b424     38 E4 85 F1 | 	sub	objptr, ##1080
0b428     F2 26 02 F1 | 	add	local05, objptr
0b42c     04 26 06 F1 | 	add	local05, #4
0b430     13 31 02 FB | 	rdlong	local10, local05
0b434     15 30 0E F2 | 	cmp	local10, #21 wz
0b438     35 00 00 FF 
0b43c     0C E4 85 F1 | 	sub	objptr, ##27148
0b440     44 00 90 5D |  if_ne	jmp	#LR__0944
0b444     37 00 00 FF 
0b448     44 E4 05 F1 | 	add	objptr, ##28228
0b44c     F2 30 02 FB | 	rdlong	local10, objptr
0b450     01 30 06 F1 | 	add	local10, #1
0b454     F2 30 62 FC | 	wrlong	local10, objptr
0b458     37 00 00 FF 
0b45c     44 E4 85 F1 | 	sub	objptr, ##28228
0b460     58 EB BF FD | 	call	#_expr
0b464     FD 32 02 F6 | 	mov	local11, result1
0b468     37 00 00 FF 
0b46c     44 E4 05 F1 | 	add	objptr, ##28228
0b470     F2 30 02 FB | 	rdlong	local10, objptr
0b474     01 30 06 F1 | 	add	local10, #1
0b478     F2 30 62 FC | 	wrlong	local10, objptr
0b47c     37 00 00 FF 
0b480     44 E4 85 F1 | 	sub	objptr, ##28228
0b484     08 00 90 FD | 	jmp	#LR__0945
0b488                 | LR__0944
0b488     30 EB BF FD | 	call	#_expr
0b48c     FD 32 02 F6 | 	mov	local11, result1
0b490                 | LR__0945
0b490                 | '     if err>0 then return err
0b490     01 32 56 F2 | 	cmps	local11, #1 wc
0b494     19 FB 01 36 |  if_ae	mov	result1, local11
0b498     2C 02 90 3D |  if_ae	jmp	#LR__0949
0b49c     01 2E 06 F1 | 	add	local09, #1
0b4a0     37 00 00 FF 
0b4a4     44 E4 05 F1 | 	add	objptr, ##28228
0b4a8     F2 26 02 FB | 	rdlong	local05, objptr
0b4ac     03 26 66 F0 | 	shl	local05, #3
0b4b0     02 00 00 FF 
0b4b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b4b8     F2 26 02 F1 | 	add	local05, objptr
0b4bc     04 26 06 F1 | 	add	local05, #4
0b4c0     13 33 02 FB | 	rdlong	local11, local05
0b4c4     14 32 0E F2 | 	cmp	local11, #20 wz
0b4c8     35 00 00 FF 
0b4cc     0C E4 85 F1 | 	sub	objptr, ##27148
0b4d0     34 00 90 AD |  if_e	jmp	#LR__0946
0b4d4     37 00 00 FF 
0b4d8     44 E4 05 F1 | 	add	objptr, ##28228
0b4dc     F2 32 02 FB | 	rdlong	local11, objptr
0b4e0     03 32 66 F0 | 	shl	local11, #3
0b4e4     02 00 00 FF 
0b4e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b4ec     F2 32 02 F1 | 	add	local11, objptr
0b4f0     04 32 06 F1 | 	add	local11, #4
0b4f4     19 33 02 FB | 	rdlong	local11, local11
0b4f8     FE 33 0E F2 | 	cmp	local11, #510 wz
0b4fc     35 00 00 FF 
0b500     0C E4 85 F1 | 	sub	objptr, ##27148
0b504     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b508                 | LR__0946
0b508                 | '     if lparts(ct).token=token_end then return 14
0b508     37 00 00 FF 
0b50c     44 E4 05 F1 | 	add	objptr, ##28228
0b510     F2 26 02 FB | 	rdlong	local05, objptr
0b514     03 26 66 F0 | 	shl	local05, #3
0b518     02 00 00 FF 
0b51c     38 E4 85 F1 | 	sub	objptr, ##1080
0b520     F2 26 02 F1 | 	add	local05, objptr
0b524     04 26 06 F1 | 	add	local05, #4
0b528     13 33 02 FB | 	rdlong	local11, local05
0b52c     FE 33 0E F2 | 	cmp	local11, #510 wz
0b530     35 00 00 FF 
0b534     0C E4 85 F1 | 	sub	objptr, ##27148
0b538     0E FA 05 A6 |  if_e	mov	result1, #14
0b53c     88 01 90 AD |  if_e	jmp	#LR__0949
0b540                 | LR__0947
0b540     17 21 02 F6 | 	mov	local02, local09
0b544     11 22 06 F6 | 	mov	local03, #17
0b548     15 1F 02 F6 | 	mov	local01, local07
0b54c     0F 31 02 F6 | 	mov	local10, local01
0b550     10 35 02 F6 | 	mov	local12, local02
0b554     11 37 02 F6 | 	mov	local13, local03
0b558     4A 00 00 FF 
0b55c     7C E4 05 F1 | 	add	objptr, ##38012
0b560     F2 38 02 FB | 	rdlong	local14, objptr
0b564     1C 3B 02 F6 | 	mov	local15, local14
0b568     01 3A 66 F0 | 	shl	local15, #1
0b56c     1C 3B 02 F1 | 	add	local15, local14
0b570     02 3A 66 F0 | 	shl	local15, #2
0b574     03 00 00 FF 
0b578     00 E4 85 F1 | 	sub	objptr, ##1536
0b57c     F2 3A 02 F1 | 	add	local15, objptr
0b580     1D 31 62 FC | 	wrlong	local10, local15
0b584     03 00 00 FF 
0b588     00 E4 05 F1 | 	add	objptr, ##1536
0b58c     F2 30 02 FB | 	rdlong	local10, objptr
0b590     18 3D 02 F6 | 	mov	local16, local10
0b594     01 3C 66 F0 | 	shl	local16, #1
0b598     18 3D 02 F1 | 	add	local16, local10
0b59c     02 3C 66 F0 | 	shl	local16, #2
0b5a0     03 00 00 FF 
0b5a4     00 E4 85 F1 | 	sub	objptr, ##1536
0b5a8     F2 3C 02 F1 | 	add	local16, objptr
0b5ac     04 3C 06 F1 | 	add	local16, #4
0b5b0     1E 35 62 FC | 	wrlong	local12, local16
0b5b4     03 00 00 FF 
0b5b8     00 E4 05 F1 | 	add	objptr, ##1536
0b5bc     F2 30 02 FB | 	rdlong	local10, objptr
0b5c0     18 3F 02 F6 | 	mov	local17, local10
0b5c4     01 3E 66 F0 | 	shl	local17, #1
0b5c8     18 3F 02 F1 | 	add	local17, local10
0b5cc     02 3E 66 F0 | 	shl	local17, #2
0b5d0     03 00 00 FF 
0b5d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b5d8     F2 3E 02 F1 | 	add	local17, objptr
0b5dc     08 3E 06 F1 | 	add	local17, #8
0b5e0     1F 37 62 FC | 	wrlong	local13, local17
0b5e4     03 00 00 FF 
0b5e8     00 E4 05 F1 | 	add	objptr, ##1536
0b5ec     F2 30 02 FB | 	rdlong	local10, objptr
0b5f0     01 30 06 F1 | 	add	local10, #1
0b5f4     F2 30 62 FC | 	wrlong	local10, objptr
0b5f8     4A 00 00 FF 
0b5fc     7C E4 85 F1 | 	sub	objptr, ##38012
0b600                 | ' t2.result.twowords(1)=numpar
0b600                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b600                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b600                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b600     FF FF 7F FF 
0b604     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b608     B8 00 90 5D |  if_ne	jmp	#LR__0948
0b60c     15 22 06 F6 | 	mov	local03, #21
0b610     0F 31 02 F6 | 	mov	local10, local01
0b614     10 35 02 F6 | 	mov	local12, local02
0b618     11 37 02 F6 | 	mov	local13, local03
0b61c     4A 00 00 FF 
0b620     7C E4 05 F1 | 	add	objptr, ##38012
0b624     F2 38 02 FB | 	rdlong	local14, objptr
0b628     1C 3B 02 F6 | 	mov	local15, local14
0b62c     01 3A 66 F0 | 	shl	local15, #1
0b630     1C 3B 02 F1 | 	add	local15, local14
0b634     02 3A 66 F0 | 	shl	local15, #2
0b638     03 00 00 FF 
0b63c     00 E4 85 F1 | 	sub	objptr, ##1536
0b640     F2 3A 02 F1 | 	add	local15, objptr
0b644     1D 31 62 FC | 	wrlong	local10, local15
0b648     03 00 00 FF 
0b64c     00 E4 05 F1 | 	add	objptr, ##1536
0b650     F2 3E 02 FB | 	rdlong	local17, objptr
0b654     1F 3D 02 F6 | 	mov	local16, local17
0b658     01 3C 66 F0 | 	shl	local16, #1
0b65c     1F 3D 02 F1 | 	add	local16, local17
0b660     02 3C 66 F0 | 	shl	local16, #2
0b664     03 00 00 FF 
0b668     00 E4 85 F1 | 	sub	objptr, ##1536
0b66c     F2 3C 02 F1 | 	add	local16, objptr
0b670     04 3C 06 F1 | 	add	local16, #4
0b674     1E 35 62 FC | 	wrlong	local12, local16
0b678     03 00 00 FF 
0b67c     00 E4 05 F1 | 	add	objptr, ##1536
0b680     F2 3C 02 FB | 	rdlong	local16, objptr
0b684     1E 3F 02 F6 | 	mov	local17, local16
0b688     01 3E 66 F0 | 	shl	local17, #1
0b68c     1E 3F 02 F1 | 	add	local17, local16
0b690     02 3E 66 F0 | 	shl	local17, #2
0b694     03 00 00 FF 
0b698     00 E4 85 F1 | 	sub	objptr, ##1536
0b69c     F2 3E 02 F1 | 	add	local17, objptr
0b6a0     08 3E 06 F1 | 	add	local17, #8
0b6a4     1F 37 62 FC | 	wrlong	local13, local17
0b6a8     03 00 00 FF 
0b6ac     00 E4 05 F1 | 	add	objptr, ##1536
0b6b0     F2 30 02 FB | 	rdlong	local10, objptr
0b6b4     01 30 06 F1 | 	add	local10, #1
0b6b8     F2 30 62 FC | 	wrlong	local10, objptr
0b6bc     4A 00 00 FF 
0b6c0     7C E4 85 F1 | 	sub	objptr, ##38012
0b6c4                 | LR__0948
0b6c4                 | ' return 0
0b6c4     00 FA 05 F6 | 	mov	result1, #0
0b6c8                 | LR__0949
0b6c8     A7 F0 03 F6 | 	mov	ptra, fp
0b6cc     B2 00 A0 FD | 	call	#popregs_
0b6d0                 | _getvar_ret
0b6d0     2D 00 64 FD | 	ret
0b6d4                 | 
0b6d4                 | ' 
0b6d4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6d4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b6d4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6d4                 | ' 
0b6d4                 | ' 
0b6d4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6d4                 | ' '                                                                                                                                       -
0b6d4                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b6d4                 | ' '                                                                                                                                       -
0b6d4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6d4                 | ' 
0b6d4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b6d4                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b6d4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b6d4                 | ' 
0b6d4                 | ' function execute_line (astart=0 as integer) as integer
0b6d4                 | _execute_line
0b6d4     04 4A 05 F6 | 	mov	COUNT_, #4
0b6d8     A8 00 A0 FD | 	call	#pushregs_
0b6dc     50 00 00 FF 
0b6e0     BC E4 05 F1 | 	add	objptr, ##41148
0b6e4     F2 00 68 FC | 	wrlong	#0, objptr
0b6e8                 | ' 
0b6e8                 | ' runptr2=0
0b6e8                 | ' for lineptr_e=astart to lineptr-1
0b6e8     06 00 00 FF 
0b6ec     3C E4 85 F1 | 	sub	objptr, ##3132
0b6f0     F2 12 62 FC | 	wrlong	arg01, objptr
0b6f4     04 E4 85 F1 | 	sub	objptr, #4
0b6f8     F2 1E 02 FB | 	rdlong	local01, objptr
0b6fc     4A 00 00 FF 
0b700     7C E4 85 F1 | 	sub	objptr, ##38012
0b704                 | LR__0950
0b704     4A 00 00 FF 
0b708     80 E4 05 F1 | 	add	objptr, ##38016
0b70c     F2 FA 01 FB | 	rdlong	result1, objptr
0b710     4A 00 00 FF 
0b714     80 E4 85 F1 | 	sub	objptr, ##38016
0b718     0F FB 51 F2 | 	cmps	result1, local01 wc
0b71c     98 00 90 3D |  if_ae	jmp	#LR__0951
0b720     4A 00 00 FF 
0b724     80 E4 05 F1 | 	add	objptr, ##38016
0b728     F2 FA 01 FB | 	rdlong	result1, objptr
0b72c     FD 20 02 F6 | 	mov	local02, result1
0b730     01 20 66 F0 | 	shl	local02, #1
0b734     FD 20 02 F1 | 	add	local02, result1
0b738     02 20 66 F0 | 	shl	local02, #2
0b73c     03 00 00 FF 
0b740     04 E4 85 F1 | 	sub	objptr, ##1540
0b744     F2 20 02 F1 | 	add	local02, objptr
0b748     08 20 06 F1 | 	add	local02, #8
0b74c     10 21 02 FB | 	rdlong	local02, local02
0b750     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b754     02 20 66 F0 | 	shl	local02, #2
0b758     04 00 00 FF 
0b75c     1C E4 85 F1 | 	sub	objptr, ##2076
0b760     F2 20 02 F1 | 	add	local02, objptr
0b764     10 21 02 FB | 	rdlong	local02, local02
0b768     10 23 02 F6 | 	mov	local03, local02
0b76c     13 20 46 F7 | 	zerox	local02, #19
0b770     14 22 46 F0 | 	shr	local03, #20
0b774     02 22 66 F0 | 	shl	local03, #2
0b778     ED 22 02 F1 | 	add	local03, __methods__
0b77c     11 23 02 FB | 	rdlong	local03, local03
0b780     43 00 00 FF 
0b784     60 E4 85 F1 | 	sub	objptr, ##34400
0b788     F2 24 02 F6 | 	mov	local04, objptr
0b78c     10 E5 01 F6 | 	mov	objptr, local02
0b790     2D 22 62 FD | 	call	local03
0b794     12 E5 01 F6 | 	mov	objptr, local04
0b798     4A 00 00 FF 
0b79c     80 E4 05 F1 | 	add	objptr, ##38016
0b7a0     F2 24 02 FB | 	rdlong	local04, objptr
0b7a4     01 24 06 F1 | 	add	local04, #1
0b7a8     F2 24 62 FC | 	wrlong	local04, objptr
0b7ac     4A 00 00 FF 
0b7b0     80 E4 85 F1 | 	sub	objptr, ##38016
0b7b4     4C FF 9F FD | 	jmp	#LR__0950
0b7b8                 | LR__0951
0b7b8                 | ' return runptr2
0b7b8     50 00 00 FF 
0b7bc     BC E4 05 F1 | 	add	objptr, ##41148
0b7c0     F2 FA 01 FB | 	rdlong	result1, objptr
0b7c4     50 00 00 FF 
0b7c8     BC E4 85 F1 | 	sub	objptr, ##41148
0b7cc     A7 F0 03 F6 | 	mov	ptra, fp
0b7d0     B2 00 A0 FD | 	call	#popregs_
0b7d4                 | _execute_line_ret
0b7d4     2D 00 64 FD | 	ret
0b7d8                 | 
0b7d8                 | ' 
0b7d8                 | ' 
0b7d8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b7d8                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b7d8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b7d8                 | ' 
0b7d8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b7d8                 | ' 
0b7d8                 | ' function pop() as expr_result
0b7d8                 | _pop
0b7d8                 | ' if stackpointer=0 then
0b7d8     43 00 00 FF 
0b7dc     58 E4 05 F1 | 	add	objptr, ##34392
0b7e0     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b7e4     43 00 00 FF 
0b7e8     58 E4 85 F1 | 	sub	objptr, ##34392
0b7ec     FF 04 06 A6 |  if_e	mov	_var03, #255
0b7f0     18 00 06 A6 |  if_e	mov	_var01, #24
0b7f4     68 00 90 AD |  if_e	jmp	#LR__0960
0b7f8     43 00 00 FF 
0b7fc     58 E4 05 F1 | 	add	objptr, ##34392
0b800     F2 FA 01 FB | 	rdlong	result1, objptr
0b804     01 FA 85 F1 | 	sub	result1, #1
0b808     F2 FA 61 FC | 	wrlong	result1, objptr
0b80c     FD FE 01 F6 | 	mov	result3, result1
0b810     01 FE 65 F0 | 	shl	result3, #1
0b814     FD FE 01 F1 | 	add	result3, result1
0b818     02 FE 65 F0 | 	shl	result3, #2
0b81c     0C 00 00 FF 
0b820     0C E4 85 F1 | 	sub	objptr, ##6156
0b824     F2 FE 01 F1 | 	add	result3, objptr
0b828     FF 00 02 FB | 	rdlong	_var01, result3
0b82c     04 FE 05 F1 | 	add	result3, #4
0b830     FF FE 01 FB | 	rdlong	result3, result3
0b834     FD FC 01 F6 | 	mov	result2, result1
0b838     01 FC 65 F0 | 	shl	result2, #1
0b83c     FD FC 01 F1 | 	add	result2, result1
0b840     02 FC 65 F0 | 	shl	result2, #2
0b844     F2 FC 01 F1 | 	add	result2, objptr
0b848     08 FC 05 F1 | 	add	result2, #8
0b84c     FE FA 01 FB | 	rdlong	result1, result2
0b850     FF 02 02 F6 | 	mov	_var02, result3
0b854     FD 04 02 F6 | 	mov	_var03, result1
0b858     37 00 00 FF 
0b85c     4C E4 85 F1 | 	sub	objptr, ##28236
0b860                 | LR__0960
0b860                 | ' return t1
0b860     01 FD 01 F6 | 	mov	result2, _var02
0b864     02 FF 01 F6 | 	mov	result3, _var03
0b868     00 FB 01 F6 | 	mov	result1, _var01
0b86c                 | _pop_ret
0b86c     2D 00 64 FD | 	ret
0b870                 | 
0b870                 | ' 
0b870                 | ' sub push(t1 as expr_result )
0b870                 | _push
0b870                 | ' if stackpointer<maxstack then 
0b870     43 00 00 FF 
0b874     58 E4 05 F1 | 	add	objptr, ##34392
0b878     F2 00 02 FB | 	rdlong	_var01, objptr
0b87c     43 00 00 FF 
0b880     58 E4 85 F1 | 	sub	objptr, ##34392
0b884     01 00 00 FF 
0b888     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b88c     BC 00 90 3D |  if_ae	jmp	#LR__0970
0b890     09 01 02 FB | 	rdlong	_var01, arg01
0b894     04 12 06 F1 | 	add	arg01, #4
0b898     09 03 02 FB | 	rdlong	_var02, arg01
0b89c     04 12 06 F1 | 	add	arg01, #4
0b8a0     09 13 02 FB | 	rdlong	arg01, arg01
0b8a4     43 00 00 FF 
0b8a8     58 E4 05 F1 | 	add	objptr, ##34392
0b8ac     F2 04 02 FB | 	rdlong	_var03, objptr
0b8b0     02 07 02 F6 | 	mov	_var04, _var03
0b8b4     01 06 66 F0 | 	shl	_var04, #1
0b8b8     02 07 02 F1 | 	add	_var04, _var03
0b8bc     02 06 66 F0 | 	shl	_var04, #2
0b8c0     0C 00 00 FF 
0b8c4     0C E4 85 F1 | 	sub	objptr, ##6156
0b8c8     F2 06 02 F1 | 	add	_var04, objptr
0b8cc     03 01 62 FC | 	wrlong	_var01, _var04
0b8d0     0C 00 00 FF 
0b8d4     0C E4 05 F1 | 	add	objptr, ##6156
0b8d8     F2 06 02 FB | 	rdlong	_var04, objptr
0b8dc     03 05 02 F6 | 	mov	_var03, _var04
0b8e0     01 04 66 F0 | 	shl	_var03, #1
0b8e4     03 05 02 F1 | 	add	_var03, _var04
0b8e8     02 04 66 F0 | 	shl	_var03, #2
0b8ec     0C 00 00 FF 
0b8f0     0C E4 85 F1 | 	sub	objptr, ##6156
0b8f4     F2 04 02 F1 | 	add	_var03, objptr
0b8f8     04 04 06 F1 | 	add	_var03, #4
0b8fc     02 03 62 FC | 	wrlong	_var02, _var03
0b900     0C 00 00 FF 
0b904     0C E4 05 F1 | 	add	objptr, ##6156
0b908     F2 06 02 FB | 	rdlong	_var04, objptr
0b90c     03 05 02 F6 | 	mov	_var03, _var04
0b910     01 04 66 F0 | 	shl	_var03, #1
0b914     03 05 02 F1 | 	add	_var03, _var04
0b918     02 04 66 F0 | 	shl	_var03, #2
0b91c     0C 00 00 FF 
0b920     0C E4 85 F1 | 	sub	objptr, ##6156
0b924     F2 04 02 F1 | 	add	_var03, objptr
0b928     08 04 06 F1 | 	add	_var03, #8
0b92c     02 13 62 FC | 	wrlong	arg01, _var03
0b930     0C 00 00 FF 
0b934     0C E4 05 F1 | 	add	objptr, ##6156
0b938     F2 00 02 FB | 	rdlong	_var01, objptr
0b93c     01 00 06 F1 | 	add	_var01, #1
0b940     F2 00 62 FC | 	wrlong	_var01, objptr
0b944     43 00 00 FF 
0b948     58 E4 85 F1 | 	sub	objptr, ##34392
0b94c                 | LR__0970
0b94c                 | _push_ret
0b94c     2D 00 64 FD | 	ret
0b950                 | 
0b950                 | ' 
0b950                 | ' ' -------------------------------- Runtime converting functions
0b950                 | ' 
0b950                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b950                 | ' 
0b950                 | ' function  convertstring(psaddr as ulong) as string
0b950                 | _convertstring
0b950     04 4A 05 F6 | 	mov	COUNT_, #4
0b954     A8 00 A0 FD | 	call	#pushregs_
0b958     09 1F 02 F6 | 	mov	local01, arg01
0b95c     20 29 B1 FD | 	call	#_pslpeek
0b960     FD 20 02 F6 | 	mov	local02, result1
0b964     8B 01 00 FF 
0b968     7C 23 06 F6 | 	mov	local03, ##@LR__5505
0b96c                 | ' l=pslpeek(psaddr)
0b96c                 | ' s="" 
0b96c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b96c     01 24 06 F6 | 	mov	local04, #1
0b970     01 20 06 F1 | 	add	local02, #1
0b974                 | LR__0980
0b974     10 25 52 F2 | 	cmps	local04, local02 wc
0b978     30 00 90 3D |  if_ae	jmp	#LR__0981
0b97c     0F 13 02 F6 | 	mov	arg01, local01
0b980     03 12 06 F1 | 	add	arg01, #3
0b984     12 13 02 F1 | 	add	arg01, local04
0b988     9C 28 B1 FD | 	call	#_pspeek
0b98c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b990     30 7E B1 FD | 	call	#__system__Chr_S
0b994     FD 14 02 F6 | 	mov	arg02, result1
0b998     11 13 02 F6 | 	mov	arg01, local03
0b99c     40 5C B1 FD | 	call	#__system___string_concat
0b9a0     FD 22 02 F6 | 	mov	local03, result1
0b9a4     01 24 06 F1 | 	add	local04, #1
0b9a8     C8 FF 9F FD | 	jmp	#LR__0980
0b9ac                 | LR__0981
0b9ac                 | ' return s
0b9ac     11 FB 01 F6 | 	mov	result1, local03
0b9b0     A7 F0 03 F6 | 	mov	ptra, fp
0b9b4     B2 00 A0 FD | 	call	#popregs_
0b9b8                 | _convertstring_ret
0b9b8     2D 00 64 FD | 	ret
0b9bc                 | 
0b9bc                 | ' 
0b9bc                 | ' ' converts a variable to an integer
0b9bc                 | ' 
0b9bc                 | ' function converttoint (t1 as expr_result) as integer 
0b9bc                 | _converttoint
0b9bc     02 4A 05 F6 | 	mov	COUNT_, #2
0b9c0     A8 00 A0 FD | 	call	#pushregs_
0b9c4     09 1F 02 F6 | 	mov	local01, arg01
0b9c8                 | ' 
0b9c8                 | ' select case t1.result_type
0b9c8     08 1E 06 F1 | 	add	local01, #8
0b9cc     0F 21 02 FB | 	rdlong	local02, local01
0b9d0     08 1E 86 F1 | 	sub	local01, #8
0b9d4     1C 20 0E F2 | 	cmp	local02, #28 wz
0b9d8     2C 00 90 AD |  if_e	jmp	#LR__0990
0b9dc     1D 20 0E F2 | 	cmp	local02, #29 wz
0b9e0     2C 00 90 AD |  if_e	jmp	#LR__0991
0b9e4     1E 20 0E F2 | 	cmp	local02, #30 wz
0b9e8     2C 00 90 AD |  if_e	jmp	#LR__0992
0b9ec     1F 20 0E F2 | 	cmp	local02, #31 wz
0b9f0     34 00 90 AD |  if_e	jmp	#LR__0993
0b9f4     2B 20 0E F2 | 	cmp	local02, #43 wz
0b9f8     44 00 90 AD |  if_e	jmp	#LR__0994
0b9fc     2C 20 0E F2 | 	cmp	local02, #44 wz
0ba00     5C 00 90 AD |  if_e	jmp	#LR__0995
0ba04     60 00 90 FD | 	jmp	#LR__0996
0ba08                 | LR__0990
0ba08     0F FB 01 FB | 	rdlong	result1, local01
0ba0c     5C 00 90 FD | 	jmp	#LR__0997
0ba10                 | LR__0991
0ba10     0F FB 01 FB | 	rdlong	result1, local01
0ba14     54 00 90 FD | 	jmp	#LR__0997
0ba18                 | LR__0992
0ba18     0F 13 02 FB | 	rdlong	arg01, local01
0ba1c     01 14 06 F6 | 	mov	arg02, #1
0ba20     E4 8D B1 FD | 	call	#__system___float_tointeger
0ba24     44 00 90 FD | 	jmp	#LR__0997
0ba28                 | LR__0993
0ba28     0F 13 02 FB | 	rdlong	arg01, local01
0ba2c     1C 91 B1 FD | 	call	#__system____builtin_atof
0ba30     FD 12 02 F6 | 	mov	arg01, result1
0ba34     01 14 06 F6 | 	mov	arg02, #1
0ba38     CC 8D B1 FD | 	call	#__system___float_tointeger
0ba3c     2C 00 90 FD | 	jmp	#LR__0997
0ba40                 | LR__0994
0ba40     0F 13 02 FB | 	rdlong	arg01, local01
0ba44     08 FF BF FD | 	call	#_convertstring
0ba48     FD 12 02 F6 | 	mov	arg01, result1
0ba4c     FC 90 B1 FD | 	call	#__system____builtin_atof
0ba50     FD 12 02 F6 | 	mov	arg01, result1
0ba54     01 14 06 F6 | 	mov	arg02, #1
0ba58     AC 8D B1 FD | 	call	#__system___float_tointeger
0ba5c     0C 00 90 FD | 	jmp	#LR__0997
0ba60                 | LR__0995
0ba60     0F FB 01 FB | 	rdlong	result1, local01
0ba64     04 00 90 FD | 	jmp	#LR__0997
0ba68                 | LR__0996
0ba68     00 FA 05 F6 | 	mov	result1, #0
0ba6c                 | LR__0997
0ba6c     A7 F0 03 F6 | 	mov	ptra, fp
0ba70     B2 00 A0 FD | 	call	#popregs_
0ba74                 | _converttoint_ret
0ba74     2D 00 64 FD | 	ret
0ba78                 | 
0ba78                 | ' 
0ba78                 | ' ' converts a variable to float
0ba78                 | ' 
0ba78                 | ' function converttofloat (t1 as expr_result) as single
0ba78                 | _converttofloat
0ba78     03 4A 05 F6 | 	mov	COUNT_, #3
0ba7c     A8 00 A0 FD | 	call	#pushregs_
0ba80     09 1F 02 F6 | 	mov	local01, arg01
0ba84                 | ' 
0ba84                 | ' select case t1.result_type
0ba84     08 1E 06 F1 | 	add	local01, #8
0ba88     0F 21 02 FB | 	rdlong	local02, local01
0ba8c     08 1E 86 F1 | 	sub	local01, #8
0ba90     1C 20 0E F2 | 	cmp	local02, #28 wz
0ba94     24 00 90 AD |  if_e	jmp	#LR__1000
0ba98     1D 20 0E F2 | 	cmp	local02, #29 wz
0ba9c     38 00 90 AD |  if_e	jmp	#LR__1001
0baa0     1E 20 0E F2 | 	cmp	local02, #30 wz
0baa4     3C 00 90 AD |  if_e	jmp	#LR__1002
0baa8     1F 20 0E F2 | 	cmp	local02, #31 wz
0baac     3C 00 90 AD |  if_e	jmp	#LR__1003
0bab0     2B 20 0E F2 | 	cmp	local02, #43 wz
0bab4     40 00 90 AD |  if_e	jmp	#LR__1004
0bab8     50 00 90 FD | 	jmp	#LR__1005
0babc                 | LR__1000
0babc     0F 13 02 FB | 	rdlong	arg01, local01
0bac0     09 13 52 F6 | 	abs	arg01, arg01 wc
0bac4     1F 22 C6 C9 |  if_b	decod	local03, #31
0bac8     00 22 06 36 |  if_ae	mov	local03, #0
0bacc     6C 84 B1 FD | 	call	#__system___float_fromuns
0bad0     11 FB 61 F5 | 	xor	result1, local03
0bad4     38 00 90 FD | 	jmp	#LR__1006
0bad8                 | LR__1001
0bad8     0F 13 02 FB | 	rdlong	arg01, local01
0badc     5C 84 B1 FD | 	call	#__system___float_fromuns
0bae0     2C 00 90 FD | 	jmp	#LR__1006
0bae4                 | LR__1002
0bae4     0F FB 01 FB | 	rdlong	result1, local01
0bae8     24 00 90 FD | 	jmp	#LR__1006
0baec                 | LR__1003
0baec     0F 13 02 FB | 	rdlong	arg01, local01
0baf0     58 90 B1 FD | 	call	#__system____builtin_atof
0baf4     18 00 90 FD | 	jmp	#LR__1006
0baf8                 | LR__1004
0baf8     0F 13 02 FB | 	rdlong	arg01, local01
0bafc     50 FE BF FD | 	call	#_convertstring
0bb00     FD 12 02 F6 | 	mov	arg01, result1
0bb04     44 90 B1 FD | 	call	#__system____builtin_atof
0bb08     04 00 90 FD | 	jmp	#LR__1006
0bb0c                 | LR__1005
0bb0c     00 FA 05 F6 | 	mov	result1, #0
0bb10                 | LR__1006
0bb10     A7 F0 03 F6 | 	mov	ptra, fp
0bb14     B2 00 A0 FD | 	call	#popregs_
0bb18                 | _converttofloat_ret
0bb18     2D 00 64 FD | 	ret
0bb1c                 | 
0bb1c                 | ' 
0bb1c                 | ' '----------------- End of converting 
0bb1c                 | ' 
0bb1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bb1c                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0bb1c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bb1c                 | ' 
0bb1c                 | ' sub csave_block(address as ulong)
0bb1c                 | _csave_block
0bb1c     09 01 02 F6 | 	mov	_var01, arg01
0bb20                 | ' 
0bb20                 | ' for i=0 to 63 step 2
0bb20     00 02 06 F6 | 	mov	_var02, #0
0bb24                 | LR__1010
0bb24                 | '   do: loop until lpeek(base+64*7)>32768
0bb24     37 00 00 FF 
0bb28     10 E4 05 F1 | 	add	objptr, ##28176
0bb2c     97 0C 48 FB | 	callpa	#(@LR__1012-@LR__1011)>>2,fcache_load_ptr_
0bb30                 | LR__1011
0bb30     F2 12 02 FB | 	rdlong	arg01, objptr
0bb34     C0 13 06 F1 | 	add	arg01, #448
0bb38     09 FB 01 FB | 	rdlong	result1, arg01
0bb3c     40 00 00 FF 
0bb40     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bb44     E8 FF 9F CD |  if_b	jmp	#LR__1011
0bb48                 | LR__1012
0bb48     00 13 02 F6 | 	mov	arg01, _var01
0bb4c     01 05 02 F6 | 	mov	_var03, _var02
0bb50     02 04 66 F0 | 	shl	_var03, #2
0bb54     02 13 02 F1 | 	add	arg01, _var03
0bb58     09 07 02 FB | 	rdlong	_var04, arg01
0bb5c     1B 00 00 FF 
0bb60     04 E4 05 F1 | 	add	objptr, ##13828
0bb64     F2 06 62 FC | 	wrlong	_var04, objptr
0bb68     52 00 00 FF 
0bb6c     14 E4 85 F1 | 	sub	objptr, ##42004
0bb70                 | '   q=lpeek(address+4*i)
0bb70                 | '      for bit=0 to 31
0bb70     00 08 06 F6 | 	mov	_var05, #0
0bb74     97 84 48 FB | 	callpa	#(@LR__1017-@LR__1013)>>2,fcache_load_ptr_
0bb78                 | LR__1013
0bb78                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bb78     52 00 00 FF 
0bb7c     14 E4 05 F1 | 	add	objptr, ##42004
0bb80     F2 06 02 FB | 	rdlong	_var04, objptr
0bb84     52 00 00 FF 
0bb88     14 E4 85 F1 | 	sub	objptr, ##42004
0bb8c     04 05 C2 F9 | 	decod	_var03, _var05
0bb90     02 07 CA F7 | 	test	_var04, _var03 wz
0bb94     60 00 90 AD |  if_e	jmp	#LR__1014
0bb98     04 05 02 F6 | 	mov	_var03, _var05
0bb9c     02 04 66 F0 | 	shl	_var03, #2
0bba0     4D 00 00 FF 
0bba4     B4 E5 05 F1 | 	add	objptr, ##39860
0bba8     F2 04 02 F1 | 	add	_var03, objptr
0bbac     02 FF 48 FC | 	wrbyte	#127, _var03
0bbb0     04 05 02 F6 | 	mov	_var03, _var05
0bbb4     02 04 66 F0 | 	shl	_var03, #2
0bbb8     01 04 06 F1 | 	add	_var03, #1
0bbbc     F2 04 02 F1 | 	add	_var03, objptr
0bbc0     02 01 49 FC | 	wrbyte	#128, _var03
0bbc4     04 05 02 F6 | 	mov	_var03, _var05
0bbc8     02 04 66 F0 | 	shl	_var03, #2
0bbcc     02 04 06 F1 | 	add	_var03, #2
0bbd0     F2 04 02 F1 | 	add	_var03, objptr
0bbd4     02 FF 48 FC | 	wrbyte	#127, _var03
0bbd8     04 05 02 F6 | 	mov	_var03, _var05
0bbdc     02 04 66 F0 | 	shl	_var03, #2
0bbe0     03 04 06 F1 | 	add	_var03, #3
0bbe4     F2 04 02 F1 | 	add	_var03, objptr
0bbe8     02 01 49 FC | 	wrbyte	#128, _var03
0bbec     4D 00 00 FF 
0bbf0     B4 E5 85 F1 | 	sub	objptr, ##39860
0bbf4     5C 00 90 FD | 	jmp	#LR__1015
0bbf8                 | LR__1014
0bbf8     04 05 02 F6 | 	mov	_var03, _var05
0bbfc     02 04 66 F0 | 	shl	_var03, #2
0bc00     4D 00 00 FF 
0bc04     B4 E5 05 F1 | 	add	objptr, ##39860
0bc08     F2 04 02 F1 | 	add	_var03, objptr
0bc0c     02 01 49 FC | 	wrbyte	#128, _var03
0bc10     04 05 02 F6 | 	mov	_var03, _var05
0bc14     02 04 66 F0 | 	shl	_var03, #2
0bc18     01 04 06 F1 | 	add	_var03, #1
0bc1c     F2 04 02 F1 | 	add	_var03, objptr
0bc20     02 01 49 FC | 	wrbyte	#128, _var03
0bc24     04 05 02 F6 | 	mov	_var03, _var05
0bc28     02 04 66 F0 | 	shl	_var03, #2
0bc2c     02 04 06 F1 | 	add	_var03, #2
0bc30     F2 04 02 F1 | 	add	_var03, objptr
0bc34     02 FF 48 FC | 	wrbyte	#127, _var03
0bc38     04 05 02 F6 | 	mov	_var03, _var05
0bc3c     02 04 66 F0 | 	shl	_var03, #2
0bc40     03 04 06 F1 | 	add	_var03, #3
0bc44     F2 04 02 F1 | 	add	_var03, objptr
0bc48     02 FF 48 FC | 	wrbyte	#127, _var03
0bc4c     4D 00 00 FF 
0bc50     B4 E5 85 F1 | 	sub	objptr, ##39860
0bc54                 | LR__1015
0bc54     01 08 06 F1 | 	add	_var05, #1
0bc58     20 08 56 F2 | 	cmps	_var05, #32 wc
0bc5c     18 FF 9F CD |  if_b	jmp	#LR__1013
0bc60                 | '   do: loop until lpeek(base+64*7)<32768
0bc60     37 00 00 FF 
0bc64     10 E4 05 F1 | 	add	objptr, ##28176
0bc68                 | LR__1016
0bc68     F2 12 02 FB | 	rdlong	arg01, objptr
0bc6c     C0 13 06 F1 | 	add	arg01, #448
0bc70     09 FB 01 FB | 	rdlong	result1, arg01
0bc74     40 00 00 FF 
0bc78     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bc7c     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0bc80                 | LR__1017
0bc80     00 13 02 F6 | 	mov	arg01, _var01
0bc84     04 12 06 F1 | 	add	arg01, #4
0bc88     01 05 02 F6 | 	mov	_var03, _var02
0bc8c     02 04 66 F0 | 	shl	_var03, #2
0bc90     02 13 02 F1 | 	add	arg01, _var03
0bc94     09 07 02 FB | 	rdlong	_var04, arg01
0bc98     1B 00 00 FF 
0bc9c     04 E4 05 F1 | 	add	objptr, ##13828
0bca0     F2 06 62 FC | 	wrlong	_var04, objptr
0bca4     52 00 00 FF 
0bca8     14 E4 85 F1 | 	sub	objptr, ##42004
0bcac                 | '   q=lpeek(address+4+4*i)
0bcac                 | '      for bit=0 to 31
0bcac     00 08 06 F6 | 	mov	_var05, #0
0bcb0     97 94 48 FB | 	callpa	#(@LR__1021-@LR__1018)>>2,fcache_load_ptr_
0bcb4                 | LR__1018
0bcb4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bcb4     52 00 00 FF 
0bcb8     14 E4 05 F1 | 	add	objptr, ##42004
0bcbc     F2 06 02 FB | 	rdlong	_var04, objptr
0bcc0     52 00 00 FF 
0bcc4     14 E4 85 F1 | 	sub	objptr, ##42004
0bcc8     04 05 C2 F9 | 	decod	_var03, _var05
0bccc     02 07 CA F7 | 	test	_var04, _var03 wz
0bcd0     80 00 90 AD |  if_e	jmp	#LR__1019
0bcd4     04 0B 02 F6 | 	mov	_var06, _var05
0bcd8     02 0A 66 F0 | 	shl	_var06, #2
0bcdc     80 04 06 F6 | 	mov	_var03, #128
0bce0     05 05 02 F1 | 	add	_var03, _var06
0bce4     4D 00 00 FF 
0bce8     B4 E5 05 F1 | 	add	objptr, ##39860
0bcec     F2 04 02 F1 | 	add	_var03, objptr
0bcf0     02 FF 48 FC | 	wrbyte	#127, _var03
0bcf4     04 0B 02 F6 | 	mov	_var06, _var05
0bcf8     02 0A 66 F0 | 	shl	_var06, #2
0bcfc     80 04 06 F6 | 	mov	_var03, #128
0bd00     05 05 02 F1 | 	add	_var03, _var06
0bd04     01 04 06 F1 | 	add	_var03, #1
0bd08     F2 04 02 F1 | 	add	_var03, objptr
0bd0c     02 01 49 FC | 	wrbyte	#128, _var03
0bd10     04 0B 02 F6 | 	mov	_var06, _var05
0bd14     02 0A 66 F0 | 	shl	_var06, #2
0bd18     80 04 06 F6 | 	mov	_var03, #128
0bd1c     05 05 02 F1 | 	add	_var03, _var06
0bd20     02 04 06 F1 | 	add	_var03, #2
0bd24     F2 04 02 F1 | 	add	_var03, objptr
0bd28     02 FF 48 FC | 	wrbyte	#127, _var03
0bd2c     04 0B 02 F6 | 	mov	_var06, _var05
0bd30     02 0A 66 F0 | 	shl	_var06, #2
0bd34     80 04 06 F6 | 	mov	_var03, #128
0bd38     05 05 02 F1 | 	add	_var03, _var06
0bd3c     03 04 06 F1 | 	add	_var03, #3
0bd40     F2 04 02 F1 | 	add	_var03, objptr
0bd44     02 01 49 FC | 	wrbyte	#128, _var03
0bd48     4D 00 00 FF 
0bd4c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd50     7C 00 90 FD | 	jmp	#LR__1020
0bd54                 | LR__1019
0bd54     04 0B 02 F6 | 	mov	_var06, _var05
0bd58     02 0A 66 F0 | 	shl	_var06, #2
0bd5c     80 04 06 F6 | 	mov	_var03, #128
0bd60     05 05 02 F1 | 	add	_var03, _var06
0bd64     4D 00 00 FF 
0bd68     B4 E5 05 F1 | 	add	objptr, ##39860
0bd6c     F2 04 02 F1 | 	add	_var03, objptr
0bd70     02 01 49 FC | 	wrbyte	#128, _var03
0bd74     04 0B 02 F6 | 	mov	_var06, _var05
0bd78     02 0A 66 F0 | 	shl	_var06, #2
0bd7c     80 04 06 F6 | 	mov	_var03, #128
0bd80     05 05 02 F1 | 	add	_var03, _var06
0bd84     01 04 06 F1 | 	add	_var03, #1
0bd88     F2 04 02 F1 | 	add	_var03, objptr
0bd8c     02 01 49 FC | 	wrbyte	#128, _var03
0bd90     04 0B 02 F6 | 	mov	_var06, _var05
0bd94     02 0A 66 F0 | 	shl	_var06, #2
0bd98     80 04 06 F6 | 	mov	_var03, #128
0bd9c     05 05 02 F1 | 	add	_var03, _var06
0bda0     02 04 06 F1 | 	add	_var03, #2
0bda4     F2 04 02 F1 | 	add	_var03, objptr
0bda8     02 FF 48 FC | 	wrbyte	#127, _var03
0bdac     04 0B 02 F6 | 	mov	_var06, _var05
0bdb0     02 0A 66 F0 | 	shl	_var06, #2
0bdb4     80 04 06 F6 | 	mov	_var03, #128
0bdb8     05 05 02 F1 | 	add	_var03, _var06
0bdbc     03 04 06 F1 | 	add	_var03, #3
0bdc0     F2 04 02 F1 | 	add	_var03, objptr
0bdc4     02 FF 48 FC | 	wrbyte	#127, _var03
0bdc8     4D 00 00 FF 
0bdcc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bdd0                 | LR__1020
0bdd0     01 08 06 F1 | 	add	_var05, #1
0bdd4     20 08 56 F2 | 	cmps	_var05, #32 wc
0bdd8     D8 FE 9F CD |  if_b	jmp	#LR__1018
0bddc                 | LR__1021
0bddc     02 02 06 F1 | 	add	_var02, #2
0bde0     40 02 56 F2 | 	cmps	_var02, #64 wc
0bde4     3C FD 9F CD |  if_b	jmp	#LR__1010
0bde8                 | ' do: loop until lpeek(base+64*7)>32768
0bde8     37 00 00 FF 
0bdec     10 E4 05 F1 | 	add	objptr, ##28176
0bdf0     97 84 48 FB | 	callpa	#(@LR__1030-@LR__1022)>>2,fcache_load_ptr_
0bdf4                 | LR__1022
0bdf4     F2 12 02 FB | 	rdlong	arg01, objptr
0bdf8     C0 13 06 F1 | 	add	arg01, #448
0bdfc     09 FB 01 FB | 	rdlong	result1, arg01
0be00     40 00 00 FF 
0be04     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0be08     E8 FF 9F CD |  if_b	jmp	#LR__1022
0be0c     37 00 00 FF 
0be10     10 E4 85 F1 | 	sub	objptr, ##28176
0be14                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0be14     00 02 06 F6 | 	mov	_var02, #0
0be18                 | LR__1023
0be18     01 07 52 F6 | 	abs	_var04, _var02 wc
0be1c     07 06 06 F5 | 	and	_var04, #7
0be20     03 07 82 F6 | 	negc	_var04, _var04
0be24     04 06 56 F2 | 	cmps	_var04, #4 wc
0be28     20 00 90 3D |  if_ae	jmp	#LR__1024
0be2c     01 0B 02 F6 | 	mov	_var06, _var02
0be30     4D 00 00 FF 
0be34     B4 E5 05 F1 | 	add	objptr, ##39860
0be38     F2 0A 02 F1 | 	add	_var06, objptr
0be3c     05 FF 48 FC | 	wrbyte	#127, _var06
0be40     4D 00 00 FF 
0be44     B4 E5 85 F1 | 	sub	objptr, ##39860
0be48     1C 00 90 FD | 	jmp	#LR__1025
0be4c                 | LR__1024
0be4c     01 0B 02 F6 | 	mov	_var06, _var02
0be50     4D 00 00 FF 
0be54     B4 E5 05 F1 | 	add	objptr, ##39860
0be58     F2 0A 02 F1 | 	add	_var06, objptr
0be5c     05 01 49 FC | 	wrbyte	#128, _var06
0be60     4D 00 00 FF 
0be64     B4 E5 85 F1 | 	sub	objptr, ##39860
0be68                 | LR__1025
0be68     01 02 06 F1 | 	add	_var02, #1
0be6c     80 02 56 F2 | 	cmps	_var02, #128 wc
0be70     A4 FF 9F CD |  if_b	jmp	#LR__1023
0be74                 | ' 
0be74                 | ' do: loop until lpeek(base+64*7)<32768
0be74     37 00 00 FF 
0be78     10 E4 05 F1 | 	add	objptr, ##28176
0be7c                 | LR__1026
0be7c     F2 12 02 FB | 	rdlong	arg01, objptr
0be80     C0 13 06 F1 | 	add	arg01, #448
0be84     09 FB 01 FB | 	rdlong	result1, arg01
0be88     40 00 00 FF 
0be8c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0be90     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0be94     37 00 00 FF 
0be98     10 E4 85 F1 | 	sub	objptr, ##28176
0be9c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0be9c     80 02 06 F6 | 	mov	_var02, #128
0bea0                 | LR__1027
0bea0     01 07 52 F6 | 	abs	_var04, _var02 wc
0bea4     07 06 06 F5 | 	and	_var04, #7
0bea8     03 07 82 F6 | 	negc	_var04, _var04
0beac     04 06 56 F2 | 	cmps	_var04, #4 wc
0beb0     20 00 90 3D |  if_ae	jmp	#LR__1028
0beb4     01 0B 02 F6 | 	mov	_var06, _var02
0beb8     4D 00 00 FF 
0bebc     B4 E5 05 F1 | 	add	objptr, ##39860
0bec0     F2 0A 02 F1 | 	add	_var06, objptr
0bec4     05 FF 48 FC | 	wrbyte	#127, _var06
0bec8     4D 00 00 FF 
0becc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bed0     1C 00 90 FD | 	jmp	#LR__1029
0bed4                 | LR__1028
0bed4     01 0B 02 F6 | 	mov	_var06, _var02
0bed8     4D 00 00 FF 
0bedc     B4 E5 05 F1 | 	add	objptr, ##39860
0bee0     F2 0A 02 F1 | 	add	_var06, objptr
0bee4     05 01 49 FC | 	wrbyte	#128, _var06
0bee8     4D 00 00 FF 
0beec     B4 E5 85 F1 | 	sub	objptr, ##39860
0bef0                 | LR__1029
0bef0     01 02 06 F1 | 	add	_var02, #1
0bef4     00 03 16 F2 | 	cmp	_var02, #256 wc
0bef8     A4 FF 9F CD |  if_b	jmp	#LR__1027
0befc                 | LR__1030
0befc                 | _csave_block_ret
0befc     2D 00 64 FD | 	ret
0bf00                 | 
0bf00                 | ' 
0bf00                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bf00                 | _csave_addtoblock
0bf00     04 4A 05 F6 | 	mov	COUNT_, #4
0bf04     A8 00 A0 FD | 	call	#pushregs_
0bf08     09 1F 02 F6 | 	mov	local01, arg01
0bf0c                 | ' 
0bf0c                 | ' if force=0 then
0bf0c     07 14 4E F7 | 	zerox	arg02, #7 wz
0bf10     78 00 90 5D |  if_ne	jmp	#LR__1040
0bf14     50 00 00 FF 
0bf18     B4 E4 05 F1 | 	add	objptr, ##41140
0bf1c     F2 14 02 FB | 	rdlong	arg02, objptr
0bf20     02 00 00 FF 
0bf24     00 E4 85 F1 | 	sub	objptr, ##1024
0bf28     F2 14 02 F1 | 	add	arg02, objptr
0bf2c     0A 1F 42 FC | 	wrbyte	local01, arg02
0bf30     02 00 00 FF 
0bf34     00 E4 05 F1 | 	add	objptr, ##1024
0bf38     F2 1E 02 FB | 	rdlong	local01, objptr
0bf3c     01 1E 06 F1 | 	add	local01, #1
0bf40     F2 1E 62 FC | 	wrlong	local01, objptr
0bf44                 | '   block(blockptr)=d
0bf44                 | '   blockptr+=1
0bf44                 | '   if blockptr>=255 then
0bf44     50 00 00 FF 
0bf48     B4 E4 85 F1 | 	sub	objptr, ##41140
0bf4c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0bf50     E4 00 90 CD |  if_b	jmp	#LR__1044
0bf54     4E 00 00 FF 
0bf58     B4 E4 05 F1 | 	add	objptr, ##40116
0bf5c     F2 12 02 F6 | 	mov	arg01, objptr
0bf60     4E 00 00 FF 
0bf64     B4 E4 85 F1 | 	sub	objptr, ##40116
0bf68     B0 FB BF FD | 	call	#_csave_block
0bf6c     50 00 00 FF 
0bf70     B4 E4 05 F1 | 	add	objptr, ##41140
0bf74     F2 00 68 FC | 	wrlong	#0, objptr
0bf78     50 00 00 FF 
0bf7c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bf80     2C 13 06 F6 | 	mov	arg01, #300
0bf84     F0 58 B1 FD | 	call	#__system___waitms
0bf88     AC 00 90 FD | 	jmp	#LR__1044
0bf8c                 | LR__1040
0bf8c     50 00 00 FF 
0bf90     B4 E4 05 F1 | 	add	objptr, ##41140
0bf94     F2 20 02 FB | 	rdlong	local02, objptr
0bf98     02 00 00 FF 
0bf9c     00 E4 85 F1 | 	sub	objptr, ##1024
0bfa0     F2 20 02 F1 | 	add	local02, objptr
0bfa4     10 1F 42 FC | 	wrbyte	local01, local02
0bfa8                 | '   block(blockptr)=d
0bfa8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0bfa8     02 00 00 FF 
0bfac     00 E4 05 F1 | 	add	objptr, ##1024
0bfb0     F2 22 02 FB | 	rdlong	local03, objptr
0bfb4     50 00 00 FF 
0bfb8     B4 E4 85 F1 | 	sub	objptr, ##41140
0bfbc     FF 22 16 F2 | 	cmp	local03, #255 wc
0bfc0     40 00 90 3D |  if_ae	jmp	#LR__1043
0bfc4     50 00 00 FF 
0bfc8     B4 E4 05 F1 | 	add	objptr, ##41140
0bfcc     F2 24 02 FB | 	rdlong	local04, objptr
0bfd0     50 00 00 FF 
0bfd4     B4 E4 85 F1 | 	sub	objptr, ##41140
0bfd8                 | LR__1041
0bfd8     00 25 56 F2 | 	cmps	local04, #256 wc
0bfdc     24 00 90 3D |  if_ae	jmp	#LR__1042
0bfe0     12 21 02 F6 | 	mov	local02, local04
0bfe4     4E 00 00 FF 
0bfe8     B4 E4 05 F1 | 	add	objptr, ##40116
0bfec     F2 20 02 F1 | 	add	local02, objptr
0bff0     10 01 48 FC | 	wrbyte	#0, local02
0bff4     01 24 06 F1 | 	add	local04, #1
0bff8     4E 00 00 FF 
0bffc     B4 E4 85 F1 | 	sub	objptr, ##40116
0c000     D4 FF 9F FD | 	jmp	#LR__1041
0c004                 | LR__1042
0c004                 | LR__1043
0c004     4E 00 00 FF 
0c008     B4 E4 05 F1 | 	add	objptr, ##40116
0c00c     F2 12 02 F6 | 	mov	arg01, objptr
0c010     4E 00 00 FF 
0c014     B4 E4 85 F1 | 	sub	objptr, ##40116
0c018     00 FB BF FD | 	call	#_csave_block
0c01c     50 00 00 FF 
0c020     B4 E4 05 F1 | 	add	objptr, ##41140
0c024     F2 00 68 FC | 	wrlong	#0, objptr
0c028     50 00 00 FF 
0c02c     B4 E4 85 F1 | 	sub	objptr, ##41140
0c030     2C 13 06 F6 | 	mov	arg01, #300
0c034     40 58 B1 FD | 	call	#__system___waitms
0c038                 | LR__1044
0c038     A7 F0 03 F6 | 	mov	ptra, fp
0c03c     B2 00 A0 FD | 	call	#popregs_
0c040                 | _csave_addtoblock_ret
0c040     2D 00 64 FD | 	ret
0c044                 | 
0c044                 | ' 
0c044                 | ' '----------------------- csave
0c044                 | ' 
0c044                 | ' sub test_csave
0c044                 | _test_csave
0c044     04 4A 05 F6 | 	mov	COUNT_, #4
0c048     A8 00 A0 FD | 	call	#pushregs_
0c04c     C0 F0 07 F1 | 	add	ptra, #192
0c050                 | ' 'dim fileheader,savestart, saveptr as ulong
0c050                 | ' 
0c050                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c050     4A 00 00 FF 
0c054     88 E4 05 F1 | 	add	objptr, ##38024
0c058     F2 12 02 FB | 	rdlong	arg01, objptr
0c05c     4A 00 00 FF 
0c060     88 E4 85 F1 | 	sub	objptr, ##38024
0c064     18 22 B1 FD | 	call	#_pslpeek
0c068     FF FF 7F FF 
0c06c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c070     10 00 90 5D |  if_ne	jmp	#LR__1050
0c074     1B 12 06 F6 | 	mov	arg01, #27
0c078     00 14 06 F6 | 	mov	arg02, #0
0c07c     44 1F B1 FD | 	call	#_printerror
0c080     1C 03 90 FD | 	jmp	#LR__1064
0c084                 | LR__1050
0c084     50 F7 BF FD | 	call	#_pop
0c088     90 4E 05 F1 | 	add	fp, #144
0c08c     A7 FA 61 FC | 	wrlong	result1, fp
0c090     04 4E 05 F1 | 	add	fp, #4
0c094     A7 FC 61 FC | 	wrlong	result2, fp
0c098     04 4E 05 F1 | 	add	fp, #4
0c09c     A7 FE 61 FC | 	wrlong	result3, fp
0c0a0                 | ' t1=pop()
0c0a0                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c0a0     98 4E 85 F1 | 	sub	fp, #152
0c0a4     1F FE 0D F2 | 	cmp	result3, #31 wz
0c0a8     24 00 90 AD |  if_e	jmp	#LR__1051
0c0ac     51 00 00 FF 
0c0b0     D8 E5 05 F1 | 	add	objptr, ##41944
0c0b4     F2 1C 02 FB | 	rdlong	arg06, objptr
0c0b8     51 00 00 FF 
0c0bc     D8 E5 85 F1 | 	sub	objptr, ##41944
0c0c0     8C 4E 05 F1 | 	add	fp, #140
0c0c4     A7 1C 62 FC | 	wrlong	arg06, fp
0c0c8     8C 4E 85 F1 | 	sub	fp, #140
0c0cc     14 00 90 FD | 	jmp	#LR__1052
0c0d0                 | LR__1051
0c0d0     90 4E 05 F1 | 	add	fp, #144
0c0d4     A7 1C 02 FB | 	rdlong	arg06, fp
0c0d8     04 4E 85 F1 | 	sub	fp, #4
0c0dc     A7 1C 62 FC | 	wrlong	arg06, fp
0c0e0     8C 4E 85 F1 | 	sub	fp, #140
0c0e4                 | LR__1052
0c0e4                 | ' 
0c0e4                 | ' ' prepare 1 kHz header wave
0c0e4                 | ' 
0c0e4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c0e4     A7 00 68 FC | 	wrlong	#0, fp
0c0e8     97 34 48 FB | 	callpa	#(@LR__1056-@LR__1053)>>2,fcache_load_ptr_
0c0ec                 | LR__1053
0c0ec     A7 1C 02 FB | 	rdlong	arg06, fp
0c0f0     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c0f4     07 1A 06 F5 | 	and	arg05, #7
0c0f8     0D 1B 82 F6 | 	negc	arg05, arg05
0c0fc     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c100     20 00 90 3D |  if_ae	jmp	#LR__1054
0c104     A7 1A 02 FB | 	rdlong	arg05, fp
0c108     4D 00 00 FF 
0c10c     B4 E5 05 F1 | 	add	objptr, ##39860
0c110     F2 1A 02 F1 | 	add	arg05, objptr
0c114     0D FF 48 FC | 	wrbyte	#127, arg05
0c118     4D 00 00 FF 
0c11c     B4 E5 85 F1 | 	sub	objptr, ##39860
0c120     1C 00 90 FD | 	jmp	#LR__1055
0c124                 | LR__1054
0c124     A7 1A 02 FB | 	rdlong	arg05, fp
0c128     4D 00 00 FF 
0c12c     B4 E5 05 F1 | 	add	objptr, ##39860
0c130     F2 1A 02 F1 | 	add	arg05, objptr
0c134     0D 01 49 FC | 	wrbyte	#128, arg05
0c138     4D 00 00 FF 
0c13c     B4 E5 85 F1 | 	sub	objptr, ##39860
0c140                 | LR__1055
0c140     A7 1A 02 FB | 	rdlong	arg05, fp
0c144     01 1A 06 F1 | 	add	arg05, #1
0c148     A7 1A 62 FC | 	wrlong	arg05, fp
0c14c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c150     98 FF 9F CD |  if_b	jmp	#LR__1053
0c154                 | LR__1056
0c154     4D 00 00 FF 
0c158     B4 E5 05 F1 | 	add	objptr, ##39860
0c15c     F2 14 02 F6 | 	mov	arg02, objptr
0c160     07 12 06 F6 | 	mov	arg01, #7
0c164     0F 00 00 FF 
0c168     40 17 06 F6 | 	mov	arg03, ##8000
0c16c     0E 18 C6 F9 | 	decod	arg04, #14
0c170     00 1B 06 F6 | 	mov	arg05, #256
0c174     00 1C 06 F6 | 	mov	arg06, #0
0c178     42 00 00 FF 
0c17c     E8 E4 85 F1 | 	sub	objptr, ##34024
0c180     5C 50 B1 FD | 	call	#_audio096_spin2_play8
0c184     0B 00 00 FF 
0c188     CC E4 85 F1 | 	sub	objptr, ##5836
0c18c     05 00 00 FF 
0c190     B8 13 06 F6 | 	mov	arg01, ##3000
0c194     E0 56 B1 FD | 	call	#__system___waitms
0c198     50 00 00 FF 
0c19c     B4 E4 05 F1 | 	add	objptr, ##41140
0c1a0     F2 00 68 FC | 	wrlong	#0, objptr
0c1a4     50 00 00 FF 
0c1a8     B4 E4 85 F1 | 	sub	objptr, ##41140
0c1ac     72 12 06 F6 | 	mov	arg01, #114
0c1b0     00 14 06 F6 | 	mov	arg02, #0
0c1b4     48 FD BF FD | 	call	#_csave_addtoblock
0c1b8     62 12 06 F6 | 	mov	arg01, #98
0c1bc     00 14 06 F6 | 	mov	arg02, #0
0c1c0     3C FD BF FD | 	call	#_csave_addtoblock
0c1c4     61 12 06 F6 | 	mov	arg01, #97
0c1c8     00 14 06 F6 | 	mov	arg02, #0
0c1cc     30 FD BF FD | 	call	#_csave_addtoblock
0c1d0     0D 12 06 F6 | 	mov	arg01, #13
0c1d4     00 14 06 F6 | 	mov	arg02, #0
0c1d8     24 FD BF FD | 	call	#_csave_addtoblock
0c1dc                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c1dc                 | ' waitms 3000 
0c1dc                 | ' 
0c1dc                 | ' blockptr=0
0c1dc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c1dc                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c1dc     A7 02 68 FC | 	wrlong	#1, fp
0c1e0     8C 4E 05 F1 | 	add	fp, #140
0c1e4     A7 12 02 FB | 	rdlong	arg01, fp
0c1e8     8C 4E 85 F1 | 	sub	fp, #140
0c1ec     09 1F 02 F6 | 	mov	local01, arg01
0c1f0     97 06 48 FB | 	callpa	#(@LR__1058-@LR__1057)>>2,fcache_load_ptr_
0c1f4                 | LR__1057
0c1f4     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c1f8     01 1E 06 51 |  if_ne	add	local01, #1
0c1fc     F4 FF 9F 5D |  if_ne	jmp	#LR__1057
0c200                 | LR__1058
0c200     09 1F 82 F1 | 	sub	local01, arg01
0c204     0F 21 02 F6 | 	mov	local02, local01
0c208     01 20 06 F1 | 	add	local02, #1
0c20c                 | LR__1059
0c20c     A7 1A 02 FB | 	rdlong	arg05, fp
0c210     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c214     34 00 90 3D |  if_ae	jmp	#LR__1060
0c218     8C 4E 05 F1 | 	add	fp, #140
0c21c     A7 12 02 FB | 	rdlong	arg01, fp
0c220     8C 4E 85 F1 | 	sub	fp, #140
0c224     A7 14 02 FB | 	rdlong	arg02, fp
0c228     01 16 06 F6 | 	mov	arg03, #1
0c22c     E8 74 B1 FD | 	call	#__system__Mid_S
0c230     FD 12 C2 FA | 	rdbyte	arg01, result1
0c234     00 14 06 F6 | 	mov	arg02, #0
0c238     C4 FC BF FD | 	call	#_csave_addtoblock
0c23c     A7 1A 02 FB | 	rdlong	arg05, fp
0c240     01 1A 06 F1 | 	add	arg05, #1
0c244     A7 1A 62 FC | 	wrlong	arg05, fp
0c248     C0 FF 9F FD | 	jmp	#LR__1059
0c24c                 | LR__1060
0c24c     00 12 06 F6 | 	mov	arg01, #0
0c250     00 14 06 F6 | 	mov	arg02, #0
0c254     A8 FC BF FD | 	call	#_csave_addtoblock
0c258     72 12 06 F6 | 	mov	arg01, #114
0c25c     00 14 06 F6 | 	mov	arg02, #0
0c260     9C FC BF FD | 	call	#_csave_addtoblock
0c264     62 12 06 F6 | 	mov	arg01, #98
0c268     00 14 06 F6 | 	mov	arg02, #0
0c26c     90 FC BF FD | 	call	#_csave_addtoblock
0c270     73 12 06 F6 | 	mov	arg01, #115
0c274     00 14 06 F6 | 	mov	arg02, #0
0c278     84 FC BF FD | 	call	#_csave_addtoblock
0c27c     0D 12 06 F6 | 	mov	arg01, #13
0c280     00 14 06 F6 | 	mov	arg02, #0
0c284     78 FC BF FD | 	call	#_csave_addtoblock
0c288     4A 00 00 FF 
0c28c     88 E4 05 F1 | 	add	objptr, ##38024
0c290     F2 22 02 FB | 	rdlong	local03, objptr
0c294     4A 00 00 FF 
0c298     88 E4 85 F1 | 	sub	objptr, ##38024
0c29c     9C 4E 05 F1 | 	add	fp, #156
0c2a0     A7 22 62 FC | 	wrlong	local03, fp
0c2a4     9C 4E 85 F1 | 	sub	fp, #156
0c2a8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c2a8                 | ' 
0c2a8                 | ' saveptr=programstart
0c2a8                 | ' do
0c2a8                 | LR__1061
0c2a8     A0 4E 05 F1 | 	add	fp, #160
0c2ac     A7 12 02 F6 | 	mov	arg01, fp
0c2b0     04 4E 85 F1 | 	sub	fp, #4
0c2b4     A7 14 02 FB | 	rdlong	arg02, fp
0c2b8     9C 4E 85 F1 | 	sub	fp, #156
0c2bc     18 16 06 F6 | 	mov	arg03, #24
0c2c0     0B 00 00 FF 
0c2c4     CC E4 05 F1 | 	add	objptr, ##5836
0c2c8     78 46 B1 FD | 	call	#_psram_spin2_read1
0c2cc     0C 4E 05 F1 | 	add	fp, #12
0c2d0     A7 12 02 F6 | 	mov	arg01, fp
0c2d4     9C 4E 05 F1 | 	add	fp, #156
0c2d8     A7 14 02 FB | 	rdlong	arg02, fp
0c2dc     04 4E 05 F1 | 	add	fp, #4
0c2e0     A7 16 02 FB | 	rdlong	arg03, fp
0c2e4     AC 4E 85 F1 | 	sub	fp, #172
0c2e8     58 46 B1 FD | 	call	#_psram_spin2_read1
0c2ec     0B 00 00 FF 
0c2f0     CC E4 85 F1 | 	sub	objptr, ##5836
0c2f4     AC 4E 05 F1 | 	add	fp, #172
0c2f8     A7 12 02 FB | 	rdlong	arg01, fp
0c2fc     AC 4E 85 F1 | 	sub	fp, #172
0c300     00 14 06 F6 | 	mov	arg02, #0
0c304     F8 FB BF FD | 	call	#_csave_addtoblock
0c308                 | ' 
0c308                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c308                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c308                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c308                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c308     A7 00 68 FC | 	wrlong	#0, fp
0c30c     AC 4E 05 F1 | 	add	fp, #172
0c310     A7 24 02 FB | 	rdlong	local04, fp
0c314     AC 4E 85 F1 | 	sub	fp, #172
0c318                 | LR__1062
0c318     A7 22 02 FB | 	rdlong	local03, fp
0c31c     12 23 52 F2 | 	cmps	local03, local04 wc
0c320     2C 00 90 3D |  if_ae	jmp	#LR__1063
0c324     A7 22 02 FB | 	rdlong	local03, fp
0c328     0C 4E 05 F1 | 	add	fp, #12
0c32c     A7 22 02 F1 | 	add	local03, fp
0c330     11 13 C2 FA | 	rdbyte	arg01, local03
0c334     00 14 06 F6 | 	mov	arg02, #0
0c338     0C 4E 85 F1 | 	sub	fp, #12
0c33c     C0 FB BF FD | 	call	#_csave_addtoblock
0c340     A7 22 02 FB | 	rdlong	local03, fp
0c344     01 22 06 F1 | 	add	local03, #1
0c348     A7 22 62 FC | 	wrlong	local03, fp
0c34c     C8 FF 9F FD | 	jmp	#LR__1062
0c350                 | LR__1063
0c350     B4 4E 05 F1 | 	add	fp, #180
0c354     A7 22 02 FB | 	rdlong	local03, fp
0c358     18 4E 85 F1 | 	sub	fp, #24
0c35c     A7 22 62 FC | 	wrlong	local03, fp
0c360     18 4E 05 F1 | 	add	fp, #24
0c364     A7 22 02 FB | 	rdlong	local03, fp
0c368     B4 4E 85 F1 | 	sub	fp, #180
0c36c     FF FF 3F FF 
0c370     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c374     30 FF 9F 5D |  if_ne	jmp	#LR__1061
0c378     00 12 06 F6 | 	mov	arg01, #0
0c37c     01 14 06 F6 | 	mov	arg02, #1
0c380     7C FB BF FD | 	call	#_csave_addtoblock
0c384     37 00 00 FF 
0c388     10 E4 05 F1 | 	add	objptr, ##28176
0c38c     F2 12 02 FB | 	rdlong	arg01, objptr
0c390     37 00 00 FF 
0c394     10 E4 85 F1 | 	sub	objptr, ##28176
0c398     D4 13 06 F1 | 	add	arg01, #468
0c39c     09 01 58 FC | 	wrword	#0, arg01
0c3a0                 | LR__1064
0c3a0     A7 F0 03 F6 | 	mov	ptra, fp
0c3a4     B2 00 A0 FD | 	call	#popregs_
0c3a8                 | _test_csave_ret
0c3a8     2D 00 64 FD | 	ret
0c3ac                 | 
0c3ac                 | ' 
0c3ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ac                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0c3ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ac                 | ' 
0c3ac                 | ' 
0c3ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ac                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0c3ac                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c3ac                 | ' 
0c3ac                 | ' '-------------------- abs
0c3ac                 | ' 
0c3ac                 | ' sub do_abs
0c3ac                 | _do_abs
0c3ac     01 4A 05 F6 | 	mov	COUNT_, #1
0c3b0     A8 00 A0 FD | 	call	#pushregs_
0c3b4     0C F0 07 F1 | 	add	ptra, #12
0c3b8     1C F4 BF FD | 	call	#_pop
0c3bc     FF 1E 02 F6 | 	mov	local01, result3
0c3c0     A7 FA 61 FC | 	wrlong	result1, fp
0c3c4     04 4E 05 F1 | 	add	fp, #4
0c3c8     A7 FC 61 FC | 	wrlong	result2, fp
0c3cc     04 4E 05 F1 | 	add	fp, #4
0c3d0     A7 1E 62 FC | 	wrlong	local01, fp
0c3d4                 | ' 
0c3d4                 | ' t1=pop()
0c3d4                 | ' if t1.result_type=result_int then 
0c3d4     08 4E 85 F1 | 	sub	fp, #8
0c3d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c3dc     A7 12 02 AB |  if_e	rdlong	arg01, fp
0c3e0     09 1F 42 A6 |  if_e	abs	local01, arg01
0c3e4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c3e8     2C 00 90 AD |  if_e	jmp	#LR__1070
0c3ec     08 4E 05 F1 | 	add	fp, #8
0c3f0     A7 1E 02 FB | 	rdlong	local01, fp
0c3f4     08 4E 85 F1 | 	sub	fp, #8
0c3f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c3fc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0c400     1F FA 05 A4 |  if_e	bitl	result1, #31
0c404     A7 FA 61 AC |  if_e	wrlong	result1, fp
0c408     08 4E 05 51 |  if_ne	add	fp, #8
0c40c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c410     08 4E 85 51 |  if_ne	sub	fp, #8
0c414     A7 50 68 5C |  if_ne	wrlong	#40, fp
0c418                 | LR__1070
0c418     A7 12 02 F6 | 	mov	arg01, fp
0c41c     50 F4 BF FD | 	call	#_push
0c420     A7 F0 03 F6 | 	mov	ptra, fp
0c424     B2 00 A0 FD | 	call	#popregs_
0c428                 | _do_abs_ret
0c428     2D 00 64 FD | 	ret
0c42c                 | 
0c42c                 | ' 
0c42c                 | ' '-------------------- acos
0c42c                 | ' 
0c42c                 | ' sub do_acos
0c42c                 | _do_acos
0c42c     01 4A 05 F6 | 	mov	COUNT_, #1
0c430     A8 00 A0 FD | 	call	#pushregs_
0c434     10 F0 07 F1 | 	add	ptra, #16
0c438     4A 00 00 FF 
0c43c     80 E4 05 F1 | 	add	objptr, ##38016
0c440     F2 1E 02 FB | 	rdlong	local01, objptr
0c444     0F 17 02 F6 | 	mov	arg03, local01
0c448     01 16 66 F0 | 	shl	arg03, #1
0c44c     0F 17 02 F1 | 	add	arg03, local01
0c450     02 16 66 F0 | 	shl	arg03, #2
0c454     03 00 00 FF 
0c458     04 E4 85 F1 | 	sub	objptr, ##1540
0c45c     F2 16 02 F1 | 	add	arg03, objptr
0c460     0B 17 02 FB | 	rdlong	arg03, arg03
0c464     0C 4E 05 F1 | 	add	fp, #12
0c468     A7 16 62 FC | 	wrlong	arg03, fp
0c46c                 | ' 
0c46c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c46c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c46c     0C 4E 85 F1 | 	sub	fp, #12
0c470     02 16 16 F2 | 	cmp	arg03, #2 wc
0c474     47 00 00 FF 
0c478     7C E4 85 F1 | 	sub	objptr, ##36476
0c47c     0C 4E 05 C1 |  if_b	add	fp, #12
0c480     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c484     0C 4E 85 C1 |  if_b	sub	fp, #12
0c488     40 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c48c     00 12 06 F6 | 	mov	arg01, #0
0c490     1C AE B1 FD | 	call	#__system___getiolock_0568
0c494     FD 12 02 F6 | 	mov	arg01, result1
0c498     E8 50 B1 FD | 	call	#__system___lockmem
0c49c     8B 01 00 FF 
0c4a0     7D 15 06 F6 | 	mov	arg02, ##@LR__5506
0c4a4     00 12 06 F6 | 	mov	arg01, #0
0c4a8     00 16 06 F6 | 	mov	arg03, #0
0c4ac     C8 5D B1 FD | 	call	#__system___basic_print_string
0c4b0     00 12 06 F6 | 	mov	arg01, #0
0c4b4     F8 AD B1 FD | 	call	#__system___getiolock_0568
0c4b8     FD 00 68 FC | 	wrlong	#0, result1
0c4bc     27 12 06 F6 | 	mov	arg01, #39
0c4c0     00 14 06 F6 | 	mov	arg02, #0
0c4c4     FC 1A B1 FD | 	call	#_printerror
0c4c8     64 00 90 FD | 	jmp	#LR__1081
0c4cc                 | LR__1080
0c4cc     08 F3 BF FD | 	call	#_pop
0c4d0     FF 1E 02 F6 | 	mov	local01, result3
0c4d4     A7 FA 61 FC | 	wrlong	result1, fp
0c4d8     04 4E 05 F1 | 	add	fp, #4
0c4dc     A7 FC 61 FC | 	wrlong	result2, fp
0c4e0     04 4E 05 F1 | 	add	fp, #4
0c4e4     A7 1E 62 FC | 	wrlong	local01, fp
0c4e8     08 4E 85 F1 | 	sub	fp, #8
0c4ec     A7 12 02 F6 | 	mov	arg01, fp
0c4f0     84 F5 BF FD | 	call	#_converttofloat
0c4f4     FD 12 02 F6 | 	mov	arg01, result1
0c4f8     84 89 B1 FD | 	call	#__system____builtin_acosf
0c4fc     FD 12 02 F6 | 	mov	arg01, result1
0c500     51 00 00 FF 
0c504     C0 E5 05 F1 | 	add	objptr, ##41920
0c508     F2 14 02 FB | 	rdlong	arg02, objptr
0c50c     51 00 00 FF 
0c510     C0 E5 85 F1 | 	sub	objptr, ##41920
0c514     28 7E B1 FD | 	call	#__system___float_mul
0c518     A7 FA 61 FC | 	wrlong	result1, fp
0c51c     08 4E 05 F1 | 	add	fp, #8
0c520     A7 3C 68 FC | 	wrlong	#30, fp
0c524     08 4E 85 F1 | 	sub	fp, #8
0c528     A7 12 02 F6 | 	mov	arg01, fp
0c52c     40 F3 BF FD | 	call	#_push
0c530                 | LR__1081
0c530     A7 F0 03 F6 | 	mov	ptra, fp
0c534     B2 00 A0 FD | 	call	#popregs_
0c538                 | _do_acos_ret
0c538     2D 00 64 FD | 	ret
0c53c                 | 
0c53c                 | ' 
0c53c                 | ' '-------------------- asc
0c53c                 | ' 
0c53c                 | ' sub do_asc
0c53c                 | _do_asc
0c53c     01 4A 05 F6 | 	mov	COUNT_, #1
0c540     A8 00 A0 FD | 	call	#pushregs_
0c544     14 F0 07 F1 | 	add	ptra, #20
0c548     4A 00 00 FF 
0c54c     80 E4 05 F1 | 	add	objptr, ##38016
0c550     F2 1E 02 FB | 	rdlong	local01, objptr
0c554     0F 17 02 F6 | 	mov	arg03, local01
0c558     01 16 66 F0 | 	shl	arg03, #1
0c55c     0F 17 02 F1 | 	add	arg03, local01
0c560     02 16 66 F0 | 	shl	arg03, #2
0c564     03 00 00 FF 
0c568     04 E4 85 F1 | 	sub	objptr, ##1540
0c56c     F2 16 02 F1 | 	add	arg03, objptr
0c570     0B 17 02 FB | 	rdlong	arg03, arg03
0c574     0C 4E 05 F1 | 	add	fp, #12
0c578     A7 16 62 FC | 	wrlong	arg03, fp
0c57c                 | ' 
0c57c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c57c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c57c     0C 4E 85 F1 | 	sub	fp, #12
0c580     02 16 16 F2 | 	cmp	arg03, #2 wc
0c584     47 00 00 FF 
0c588     7C E4 85 F1 | 	sub	objptr, ##36476
0c58c     0C 4E 05 C1 |  if_b	add	fp, #12
0c590     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c594     0C 4E 85 C1 |  if_b	sub	fp, #12
0c598     40 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c59c     00 12 06 F6 | 	mov	arg01, #0
0c5a0     0C AD B1 FD | 	call	#__system___getiolock_0568
0c5a4     FD 12 02 F6 | 	mov	arg01, result1
0c5a8     D8 4F B1 FD | 	call	#__system___lockmem
0c5ac     8B 01 00 FF 
0c5b0     84 15 06 F6 | 	mov	arg02, ##@LR__5507
0c5b4     00 12 06 F6 | 	mov	arg01, #0
0c5b8     00 16 06 F6 | 	mov	arg03, #0
0c5bc     B8 5C B1 FD | 	call	#__system___basic_print_string
0c5c0     00 12 06 F6 | 	mov	arg01, #0
0c5c4     E8 AC B1 FD | 	call	#__system___getiolock_0568
0c5c8     FD 00 68 FC | 	wrlong	#0, result1
0c5cc     27 12 06 F6 | 	mov	arg01, #39
0c5d0     00 14 06 F6 | 	mov	arg02, #0
0c5d4     EC 19 B1 FD | 	call	#_printerror
0c5d8     B4 00 90 FD | 	jmp	#LR__1093
0c5dc                 | LR__1090
0c5dc     F8 F1 BF FD | 	call	#_pop
0c5e0     FF 16 02 F6 | 	mov	arg03, result3
0c5e4     A7 FA 61 FC | 	wrlong	result1, fp
0c5e8     04 4E 05 F1 | 	add	fp, #4
0c5ec     A7 FC 61 FC | 	wrlong	result2, fp
0c5f0     04 4E 05 F1 | 	add	fp, #4
0c5f4     A7 16 62 FC | 	wrlong	arg03, fp
0c5f8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c5f8     08 4E 85 F1 | 	sub	fp, #8
0c5fc     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c600     18 00 90 5D |  if_ne	jmp	#LR__1091
0c604     A7 12 02 FB | 	rdlong	arg01, fp
0c608     44 F3 BF FD | 	call	#_convertstring
0c60c     A7 FA 61 FC | 	wrlong	result1, fp
0c610     08 4E 05 F1 | 	add	fp, #8
0c614     A7 3E 68 FC | 	wrlong	#31, fp
0c618     08 4E 85 F1 | 	sub	fp, #8
0c61c                 | LR__1091
0c61c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c61c     08 4E 05 F1 | 	add	fp, #8
0c620     A7 16 02 FB | 	rdlong	arg03, fp
0c624     08 4E 85 F1 | 	sub	fp, #8
0c628     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c62c     40 00 90 AD |  if_e	jmp	#LR__1092
0c630     00 12 06 F6 | 	mov	arg01, #0
0c634     78 AC B1 FD | 	call	#__system___getiolock_0568
0c638     FD 12 02 F6 | 	mov	arg01, result1
0c63c     44 4F B1 FD | 	call	#__system___lockmem
0c640     8B 01 00 FF 
0c644     8A 15 06 F6 | 	mov	arg02, ##@LR__5508
0c648     00 12 06 F6 | 	mov	arg01, #0
0c64c     00 16 06 F6 | 	mov	arg03, #0
0c650     24 5C B1 FD | 	call	#__system___basic_print_string
0c654     00 12 06 F6 | 	mov	arg01, #0
0c658     54 AC B1 FD | 	call	#__system___getiolock_0568
0c65c     FD 00 68 FC | 	wrlong	#0, result1
0c660     0F 12 06 F6 | 	mov	arg01, #15
0c664     00 14 06 F6 | 	mov	arg02, #0
0c668     58 19 B1 FD | 	call	#_printerror
0c66c     20 00 90 FD | 	jmp	#LR__1093
0c670                 | LR__1092
0c670     A7 1E 02 FB | 	rdlong	local01, fp
0c674     0F 1F C2 FA | 	rdbyte	local01, local01
0c678     A7 1E 62 FC | 	wrlong	local01, fp
0c67c     08 4E 05 F1 | 	add	fp, #8
0c680     A7 38 68 FC | 	wrlong	#28, fp
0c684     08 4E 85 F1 | 	sub	fp, #8
0c688     A7 12 02 F6 | 	mov	arg01, fp
0c68c     E0 F1 BF FD | 	call	#_push
0c690                 | LR__1093
0c690     A7 F0 03 F6 | 	mov	ptra, fp
0c694     B2 00 A0 FD | 	call	#popregs_
0c698                 | _do_asc_ret
0c698     2D 00 64 FD | 	ret
0c69c                 | 
0c69c                 | ' 
0c69c                 | ' '-------------------- asin
0c69c                 | ' 
0c69c                 | ' sub do_asin
0c69c                 | _do_asin
0c69c     01 4A 05 F6 | 	mov	COUNT_, #1
0c6a0     A8 00 A0 FD | 	call	#pushregs_
0c6a4     10 F0 07 F1 | 	add	ptra, #16
0c6a8     4A 00 00 FF 
0c6ac     80 E4 05 F1 | 	add	objptr, ##38016
0c6b0     F2 1E 02 FB | 	rdlong	local01, objptr
0c6b4     0F 17 02 F6 | 	mov	arg03, local01
0c6b8     01 16 66 F0 | 	shl	arg03, #1
0c6bc     0F 17 02 F1 | 	add	arg03, local01
0c6c0     02 16 66 F0 | 	shl	arg03, #2
0c6c4     03 00 00 FF 
0c6c8     04 E4 85 F1 | 	sub	objptr, ##1540
0c6cc     F2 16 02 F1 | 	add	arg03, objptr
0c6d0     0B 17 02 FB | 	rdlong	arg03, arg03
0c6d4     0C 4E 05 F1 | 	add	fp, #12
0c6d8     A7 16 62 FC | 	wrlong	arg03, fp
0c6dc                 | ' 
0c6dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0c6dc                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c6dc     0C 4E 85 F1 | 	sub	fp, #12
0c6e0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c6e4     47 00 00 FF 
0c6e8     7C E4 85 F1 | 	sub	objptr, ##36476
0c6ec     0C 4E 05 C1 |  if_b	add	fp, #12
0c6f0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c6f4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c6f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c6fc     00 12 06 F6 | 	mov	arg01, #0
0c700     AC AB B1 FD | 	call	#__system___getiolock_0568
0c704     FD 12 02 F6 | 	mov	arg01, result1
0c708     78 4E B1 FD | 	call	#__system___lockmem
0c70c     8B 01 00 FF 
0c710     90 15 06 F6 | 	mov	arg02, ##@LR__5509
0c714     00 12 06 F6 | 	mov	arg01, #0
0c718     00 16 06 F6 | 	mov	arg03, #0
0c71c     58 5B B1 FD | 	call	#__system___basic_print_string
0c720     00 12 06 F6 | 	mov	arg01, #0
0c724     88 AB B1 FD | 	call	#__system___getiolock_0568
0c728     FD 00 68 FC | 	wrlong	#0, result1
0c72c     27 12 06 F6 | 	mov	arg01, #39
0c730     00 14 06 F6 | 	mov	arg02, #0
0c734     8C 18 B1 FD | 	call	#_printerror
0c738     64 00 90 FD | 	jmp	#LR__1101
0c73c                 | LR__1100
0c73c     98 F0 BF FD | 	call	#_pop
0c740     FF 1E 02 F6 | 	mov	local01, result3
0c744     A7 FA 61 FC | 	wrlong	result1, fp
0c748     04 4E 05 F1 | 	add	fp, #4
0c74c     A7 FC 61 FC | 	wrlong	result2, fp
0c750     04 4E 05 F1 | 	add	fp, #4
0c754     A7 1E 62 FC | 	wrlong	local01, fp
0c758     08 4E 85 F1 | 	sub	fp, #8
0c75c     A7 12 02 F6 | 	mov	arg01, fp
0c760     14 F3 BF FD | 	call	#_converttofloat
0c764     FD 12 02 F6 | 	mov	arg01, result1
0c768     C8 86 B1 FD | 	call	#__system____builtin_asinf
0c76c     FD 12 02 F6 | 	mov	arg01, result1
0c770     51 00 00 FF 
0c774     C0 E5 05 F1 | 	add	objptr, ##41920
0c778     F2 14 02 FB | 	rdlong	arg02, objptr
0c77c     51 00 00 FF 
0c780     C0 E5 85 F1 | 	sub	objptr, ##41920
0c784     B8 7B B1 FD | 	call	#__system___float_mul
0c788     A7 FA 61 FC | 	wrlong	result1, fp
0c78c     08 4E 05 F1 | 	add	fp, #8
0c790     A7 3C 68 FC | 	wrlong	#30, fp
0c794     08 4E 85 F1 | 	sub	fp, #8
0c798     A7 12 02 F6 | 	mov	arg01, fp
0c79c     D0 F0 BF FD | 	call	#_push
0c7a0                 | LR__1101
0c7a0     A7 F0 03 F6 | 	mov	ptra, fp
0c7a4     B2 00 A0 FD | 	call	#popregs_
0c7a8                 | _do_asin_ret
0c7a8     2D 00 64 FD | 	ret
0c7ac                 | 
0c7ac                 | ' 
0c7ac                 | ' '-------------------- atn
0c7ac                 | ' 
0c7ac                 | ' sub do_atn
0c7ac                 | _do_atn
0c7ac     01 4A 05 F6 | 	mov	COUNT_, #1
0c7b0     A8 00 A0 FD | 	call	#pushregs_
0c7b4     10 F0 07 F1 | 	add	ptra, #16
0c7b8     4A 00 00 FF 
0c7bc     80 E4 05 F1 | 	add	objptr, ##38016
0c7c0     F2 1E 02 FB | 	rdlong	local01, objptr
0c7c4     0F 17 02 F6 | 	mov	arg03, local01
0c7c8     01 16 66 F0 | 	shl	arg03, #1
0c7cc     0F 17 02 F1 | 	add	arg03, local01
0c7d0     02 16 66 F0 | 	shl	arg03, #2
0c7d4     03 00 00 FF 
0c7d8     04 E4 85 F1 | 	sub	objptr, ##1540
0c7dc     F2 16 02 F1 | 	add	arg03, objptr
0c7e0     0B 17 02 FB | 	rdlong	arg03, arg03
0c7e4     0C 4E 05 F1 | 	add	fp, #12
0c7e8     A7 16 62 FC | 	wrlong	arg03, fp
0c7ec                 | ' 
0c7ec                 | ' numpar=compiledline(lineptr_e).result.uresult
0c7ec                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c7ec     0C 4E 85 F1 | 	sub	fp, #12
0c7f0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c7f4     47 00 00 FF 
0c7f8     7C E4 85 F1 | 	sub	objptr, ##36476
0c7fc     0C 4E 05 C1 |  if_b	add	fp, #12
0c800     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c804     0C 4E 85 C1 |  if_b	sub	fp, #12
0c808     40 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0c80c     00 12 06 F6 | 	mov	arg01, #0
0c810     9C AA B1 FD | 	call	#__system___getiolock_0568
0c814     FD 12 02 F6 | 	mov	arg01, result1
0c818     68 4D B1 FD | 	call	#__system___lockmem
0c81c     8B 01 00 FF 
0c820     97 15 06 F6 | 	mov	arg02, ##@LR__5510
0c824     00 12 06 F6 | 	mov	arg01, #0
0c828     00 16 06 F6 | 	mov	arg03, #0
0c82c     48 5A B1 FD | 	call	#__system___basic_print_string
0c830     00 12 06 F6 | 	mov	arg01, #0
0c834     78 AA B1 FD | 	call	#__system___getiolock_0568
0c838     FD 00 68 FC | 	wrlong	#0, result1
0c83c     27 12 06 F6 | 	mov	arg01, #39
0c840     00 14 06 F6 | 	mov	arg02, #0
0c844     7C 17 B1 FD | 	call	#_printerror
0c848     6C 00 90 FD | 	jmp	#LR__1111
0c84c                 | LR__1110
0c84c     88 EF BF FD | 	call	#_pop
0c850     FF 1E 02 F6 | 	mov	local01, result3
0c854     A7 FA 61 FC | 	wrlong	result1, fp
0c858     04 4E 05 F1 | 	add	fp, #4
0c85c     A7 FC 61 FC | 	wrlong	result2, fp
0c860     04 4E 05 F1 | 	add	fp, #4
0c864     A7 1E 62 FC | 	wrlong	local01, fp
0c868     08 4E 85 F1 | 	sub	fp, #8
0c86c     A7 12 02 F6 | 	mov	arg01, fp
0c870     04 F2 BF FD | 	call	#_converttofloat
0c874     FD 12 02 F6 | 	mov	arg01, result1
0c878     00 C0 1F FF 
0c87c     00 14 06 F6 | 	mov	arg02, ##1065353216
0c880     48 86 B1 FD | 	call	#__system____builtin_atan2f
0c884     FD 12 02 F6 | 	mov	arg01, result1
0c888     51 00 00 FF 
0c88c     C0 E5 05 F1 | 	add	objptr, ##41920
0c890     F2 14 02 FB | 	rdlong	arg02, objptr
0c894     51 00 00 FF 
0c898     C0 E5 85 F1 | 	sub	objptr, ##41920
0c89c     A0 7A B1 FD | 	call	#__system___float_mul
0c8a0     A7 FA 61 FC | 	wrlong	result1, fp
0c8a4     08 4E 05 F1 | 	add	fp, #8
0c8a8     A7 3C 68 FC | 	wrlong	#30, fp
0c8ac     08 4E 85 F1 | 	sub	fp, #8
0c8b0     A7 12 02 F6 | 	mov	arg01, fp
0c8b4     B8 EF BF FD | 	call	#_push
0c8b8                 | LR__1111
0c8b8     A7 F0 03 F6 | 	mov	ptra, fp
0c8bc     B2 00 A0 FD | 	call	#popregs_
0c8c0                 | _do_atn_ret
0c8c0     2D 00 64 FD | 	ret
0c8c4                 | 
0c8c4                 | ' 
0c8c4                 | ' '-------------------- beep
0c8c4                 | ' 
0c8c4                 | ' sub do_beep
0c8c4                 | _do_beep
0c8c4     02 4A 05 F6 | 	mov	COUNT_, #2
0c8c8     A8 00 A0 FD | 	call	#pushregs_
0c8cc     20 F0 07 F1 | 	add	ptra, #32
0c8d0     04 EF BF FD | 	call	#_pop
0c8d4     FD 1E 02 F6 | 	mov	local01, result1
0c8d8     FE 1C 02 F6 | 	mov	arg06, result2
0c8dc     FF 20 02 F6 | 	mov	local02, result3
0c8e0     0C 4E 05 F1 | 	add	fp, #12
0c8e4     A7 1E 62 FC | 	wrlong	local01, fp
0c8e8     04 4E 05 F1 | 	add	fp, #4
0c8ec     A7 1C 62 FC | 	wrlong	arg06, fp
0c8f0     04 4E 05 F1 | 	add	fp, #4
0c8f4     A7 20 62 FC | 	wrlong	local02, fp
0c8f8     14 4E 85 F1 | 	sub	fp, #20
0c8fc     D8 EE BF FD | 	call	#_pop
0c900     A7 FA 61 FC | 	wrlong	result1, fp
0c904     04 4E 05 F1 | 	add	fp, #4
0c908     A7 FC 61 FC | 	wrlong	result2, fp
0c90c     04 4E 05 F1 | 	add	fp, #4
0c910     A7 FE 61 FC | 	wrlong	result3, fp
0c914                 | ' 
0c914                 | ' t2=pop()
0c914                 | ' t1=pop()
0c914                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c914     08 4E 85 F1 | 	sub	fp, #8
0c918     1C FE 0D F2 | 	cmp	result3, #28 wz
0c91c     08 4E 05 51 |  if_ne	add	fp, #8
0c920     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c924     08 4E 85 51 |  if_ne	sub	fp, #8
0c928     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c92c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c930     18 4E 05 A1 |  if_e	add	fp, #24
0c934     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c938     18 4E 85 A1 |  if_e	sub	fp, #24
0c93c     14 00 90 AD |  if_e	jmp	#LR__1120
0c940     A7 12 02 F6 | 	mov	arg01, fp
0c944     74 F0 BF FD | 	call	#_converttoint
0c948     18 4E 05 F1 | 	add	fp, #24
0c94c     A7 FA 61 FC | 	wrlong	result1, fp
0c950     18 4E 85 F1 | 	sub	fp, #24
0c954                 | LR__1120
0c954     1C 4E 05 F1 | 	add	fp, #28
0c958     A7 FE 48 FC | 	wrbyte	#127, fp
0c95c     01 4E 05 F1 | 	add	fp, #1
0c960     A7 00 49 FC | 	wrbyte	#128, fp
0c964     01 4E 85 F1 | 	sub	fp, #1
0c968     A7 14 02 F6 | 	mov	arg02, fp
0c96c     04 4E 85 F1 | 	sub	fp, #4
0c970     A7 16 02 FB | 	rdlong	arg03, fp
0c974     18 4E 85 F1 | 	sub	fp, #24
0c978     01 16 66 F0 | 	shl	arg03, #1
0c97c     07 12 06 F6 | 	mov	arg01, #7
0c980     0E 18 C6 F9 | 	decod	arg04, #14
0c984     02 1A 06 F6 | 	mov	arg05, #2
0c988     00 1C 06 F6 | 	mov	arg06, #0
0c98c     0B 00 00 FF 
0c990     CC E4 05 F1 | 	add	objptr, ##5836
0c994     48 48 B1 FD | 	call	#_audio096_spin2_play8
0c998     0B 00 00 FF 
0c99c     CC E4 85 F1 | 	sub	objptr, ##5836
0c9a0     0C 4E 05 F1 | 	add	fp, #12
0c9a4     A7 12 02 F6 | 	mov	arg01, fp
0c9a8     0C 4E 85 F1 | 	sub	fp, #12
0c9ac     C0 EE BF FD | 	call	#_push
0c9b0     B0 AE B0 FD | 	call	#_do_waitms
0c9b4     07 12 06 F6 | 	mov	arg01, #7
0c9b8     0B 00 00 FF 
0c9bc     CC E4 05 F1 | 	add	objptr, ##5836
0c9c0     C0 48 B1 FD | 	call	#_audio096_spin2_stop
0c9c4     0B 00 00 FF 
0c9c8     CC E4 85 F1 | 	sub	objptr, ##5836
0c9cc     A7 F0 03 F6 | 	mov	ptra, fp
0c9d0     B2 00 A0 FD | 	call	#popregs_
0c9d4                 | _do_beep_ret
0c9d4     2D 00 64 FD | 	ret
0c9d8                 | 
0c9d8                 | ' 
0c9d8                 | ' '-------------------- bin$
0c9d8                 | ' 
0c9d8                 | ' sub do_bin
0c9d8                 | _do_bin
0c9d8     01 4A 05 F6 | 	mov	COUNT_, #1
0c9dc     A8 00 A0 FD | 	call	#pushregs_
0c9e0     18 F0 07 F1 | 	add	ptra, #24
0c9e4     4A 00 00 FF 
0c9e8     80 E4 05 F1 | 	add	objptr, ##38016
0c9ec     F2 1E 02 FB | 	rdlong	local01, objptr
0c9f0     0F 17 02 F6 | 	mov	arg03, local01
0c9f4     01 16 66 F0 | 	shl	arg03, #1
0c9f8     0F 17 02 F1 | 	add	arg03, local01
0c9fc     02 16 66 F0 | 	shl	arg03, #2
0ca00     03 00 00 FF 
0ca04     04 E4 85 F1 | 	sub	objptr, ##1540
0ca08     F2 16 02 F1 | 	add	arg03, objptr
0ca0c     0B 17 02 FB | 	rdlong	arg03, arg03
0ca10     0C 4E 05 F1 | 	add	fp, #12
0ca14     A7 16 62 FC | 	wrlong	arg03, fp
0ca18                 | ' 
0ca18                 | ' numpar=compiledline(lineptr_e).result.uresult
0ca18                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0ca18     0C 4E 85 F1 | 	sub	fp, #12
0ca1c     03 16 16 F2 | 	cmp	arg03, #3 wc
0ca20     47 00 00 FF 
0ca24     7C E4 85 F1 | 	sub	objptr, ##36476
0ca28     0C 4E 05 C1 |  if_b	add	fp, #12
0ca2c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0ca30     0C 4E 85 C1 |  if_b	sub	fp, #12
0ca34     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0ca38     00 12 06 F6 | 	mov	arg01, #0
0ca3c     70 A8 B1 FD | 	call	#__system___getiolock_0568
0ca40     FD 12 02 F6 | 	mov	arg01, result1
0ca44     3C 4B B1 FD | 	call	#__system___lockmem
0ca48     8B 01 00 FF 
0ca4c     9D 15 06 F6 | 	mov	arg02, ##@LR__5511
0ca50     00 12 06 F6 | 	mov	arg01, #0
0ca54     00 16 06 F6 | 	mov	arg03, #0
0ca58     1C 58 B1 FD | 	call	#__system___basic_print_string
0ca5c     00 12 06 F6 | 	mov	arg01, #0
0ca60     4C A8 B1 FD | 	call	#__system___getiolock_0568
0ca64     FD 00 68 FC | 	wrlong	#0, result1
0ca68     27 12 06 F6 | 	mov	arg01, #39
0ca6c     00 14 06 F6 | 	mov	arg02, #0
0ca70     50 15 B1 FD | 	call	#_printerror
0ca74     B8 00 90 FD | 	jmp	#LR__1133
0ca78                 | LR__1130
0ca78                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0ca78     0C 4E 05 F1 | 	add	fp, #12
0ca7c     A7 1E 02 FB | 	rdlong	local01, fp
0ca80     0C 4E 85 F1 | 	sub	fp, #12
0ca84     02 1E 0E F2 | 	cmp	local01, #2 wz
0ca88     38 00 90 5D |  if_ne	jmp	#LR__1131
0ca8c     48 ED BF FD | 	call	#_pop
0ca90     FF 1E 02 F6 | 	mov	local01, result3
0ca94     A7 FA 61 FC | 	wrlong	result1, fp
0ca98     04 4E 05 F1 | 	add	fp, #4
0ca9c     A7 FC 61 FC | 	wrlong	result2, fp
0caa0     04 4E 05 F1 | 	add	fp, #4
0caa4     A7 1E 62 FC | 	wrlong	local01, fp
0caa8     08 4E 85 F1 | 	sub	fp, #8
0caac     A7 12 02 F6 | 	mov	arg01, fp
0cab0     08 EF BF FD | 	call	#_converttoint
0cab4     14 4E 05 F1 | 	add	fp, #20
0cab8     A7 FA 61 FC | 	wrlong	result1, fp
0cabc     14 4E 85 F1 | 	sub	fp, #20
0cac0     0C 00 90 FD | 	jmp	#LR__1132
0cac4                 | LR__1131
0cac4     14 4E 05 F1 | 	add	fp, #20
0cac8     A7 00 68 FC | 	wrlong	#0, fp
0cacc     14 4E 85 F1 | 	sub	fp, #20
0cad0                 | LR__1132
0cad0     04 ED BF FD | 	call	#_pop
0cad4     FF 1E 02 F6 | 	mov	local01, result3
0cad8     A7 FA 61 FC | 	wrlong	result1, fp
0cadc     04 4E 05 F1 | 	add	fp, #4
0cae0     A7 FC 61 FC | 	wrlong	result2, fp
0cae4     04 4E 05 F1 | 	add	fp, #4
0cae8     A7 1E 62 FC | 	wrlong	local01, fp
0caec     08 4E 85 F1 | 	sub	fp, #8
0caf0     A7 12 02 F6 | 	mov	arg01, fp
0caf4     C4 EE BF FD | 	call	#_converttoint
0caf8     10 4E 05 F1 | 	add	fp, #16
0cafc     A7 FA 61 FC | 	wrlong	result1, fp
0cb00     FD 12 02 F6 | 	mov	arg01, result1
0cb04     04 4E 05 F1 | 	add	fp, #4
0cb08     A7 14 02 FB | 	rdlong	arg02, fp
0cb0c     14 4E 85 F1 | 	sub	fp, #20
0cb10     02 16 06 F6 | 	mov	arg03, #2
0cb14     3C 6D B1 FD | 	call	#__system__Number_S
0cb18     A7 FA 61 FC | 	wrlong	result1, fp
0cb1c     08 4E 05 F1 | 	add	fp, #8
0cb20     A7 3E 68 FC | 	wrlong	#31, fp
0cb24     08 4E 85 F1 | 	sub	fp, #8
0cb28     A7 12 02 F6 | 	mov	arg01, fp
0cb2c     40 ED BF FD | 	call	#_push
0cb30                 | LR__1133
0cb30     A7 F0 03 F6 | 	mov	ptra, fp
0cb34     B2 00 A0 FD | 	call	#popregs_
0cb38                 | _do_bin_ret
0cb38     2D 00 64 FD | 	ret
0cb3c                 | 
0cb3c                 | ' 
0cb3c                 | ' '-------------------- box
0cb3c                 | ' 
0cb3c                 | ' sub do_box
0cb3c                 | _do_box
0cb3c     03 4A 05 F6 | 	mov	COUNT_, #3
0cb40     A8 00 A0 FD | 	call	#pushregs_
0cb44     30 F0 07 F1 | 	add	ptra, #48
0cb48     8C EC BF FD | 	call	#_pop
0cb4c     FD 1A 02 F6 | 	mov	arg05, result1
0cb50     FE 18 02 F6 | 	mov	arg04, result2
0cb54     FF 16 02 F6 | 	mov	arg03, result3
0cb58     24 4E 05 F1 | 	add	fp, #36
0cb5c     A7 1A 62 FC | 	wrlong	arg05, fp
0cb60     04 4E 05 F1 | 	add	fp, #4
0cb64     A7 18 62 FC | 	wrlong	arg04, fp
0cb68     04 4E 05 F1 | 	add	fp, #4
0cb6c     A7 16 62 FC | 	wrlong	arg03, fp
0cb70     2C 4E 85 F1 | 	sub	fp, #44
0cb74     60 EC BF FD | 	call	#_pop
0cb78     FD 1A 02 F6 | 	mov	arg05, result1
0cb7c     FE 18 02 F6 | 	mov	arg04, result2
0cb80     FF 16 02 F6 | 	mov	arg03, result3
0cb84     18 4E 05 F1 | 	add	fp, #24
0cb88     A7 1A 62 FC | 	wrlong	arg05, fp
0cb8c     04 4E 05 F1 | 	add	fp, #4
0cb90     A7 18 62 FC | 	wrlong	arg04, fp
0cb94     04 4E 05 F1 | 	add	fp, #4
0cb98     A7 16 62 FC | 	wrlong	arg03, fp
0cb9c     20 4E 85 F1 | 	sub	fp, #32
0cba0     34 EC BF FD | 	call	#_pop
0cba4     FD 1A 02 F6 | 	mov	arg05, result1
0cba8     FE 18 02 F6 | 	mov	arg04, result2
0cbac     FF 1E 02 F6 | 	mov	local01, result3
0cbb0     0C 4E 05 F1 | 	add	fp, #12
0cbb4     A7 1A 62 FC | 	wrlong	arg05, fp
0cbb8     04 4E 05 F1 | 	add	fp, #4
0cbbc     A7 18 62 FC | 	wrlong	arg04, fp
0cbc0     04 4E 05 F1 | 	add	fp, #4
0cbc4     A7 1E 62 FC | 	wrlong	local01, fp
0cbc8     14 4E 85 F1 | 	sub	fp, #20
0cbcc     08 EC BF FD | 	call	#_pop
0cbd0     A7 FA 61 FC | 	wrlong	result1, fp
0cbd4     04 4E 05 F1 | 	add	fp, #4
0cbd8     A7 FC 61 FC | 	wrlong	result2, fp
0cbdc     04 4E 05 F1 | 	add	fp, #4
0cbe0     A7 FE 61 FC | 	wrlong	result3, fp
0cbe4                 | ' 
0cbe4                 | ' t4=pop()
0cbe4                 | ' t3=pop()
0cbe4                 | ' t2=pop()
0cbe4                 | ' t1=pop()
0cbe4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0cbe4     FF 1A 02 F6 | 	mov	arg05, result3
0cbe8     08 4E 85 F1 | 	sub	fp, #8
0cbec     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0cbf0     08 4E 05 51 |  if_ne	add	fp, #8
0cbf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cbf8     08 4E 85 51 |  if_ne	sub	fp, #8
0cbfc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cc00     A8 00 90 5D |  if_ne	jmp	#LR__1140
0cc04     14 4E 05 F1 | 	add	fp, #20
0cc08     A7 1E 02 FB | 	rdlong	local01, fp
0cc0c     14 4E 85 F1 | 	sub	fp, #20
0cc10     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc14     14 4E 05 51 |  if_ne	add	fp, #20
0cc18     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cc1c     14 4E 85 51 |  if_ne	sub	fp, #20
0cc20     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cc24     84 00 90 5D |  if_ne	jmp	#LR__1140
0cc28     20 4E 05 F1 | 	add	fp, #32
0cc2c     A7 1E 02 FB | 	rdlong	local01, fp
0cc30     20 4E 85 F1 | 	sub	fp, #32
0cc34     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc38     20 4E 05 51 |  if_ne	add	fp, #32
0cc3c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cc40     20 4E 85 51 |  if_ne	sub	fp, #32
0cc44     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cc48     60 00 90 5D |  if_ne	jmp	#LR__1140
0cc4c     2C 4E 05 F1 | 	add	fp, #44
0cc50     A7 1E 02 FB | 	rdlong	local01, fp
0cc54     2C 4E 85 F1 | 	sub	fp, #44
0cc58     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc5c     2C 4E 05 51 |  if_ne	add	fp, #44
0cc60     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cc64     2C 4E 85 51 |  if_ne	sub	fp, #44
0cc68     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cc6c     3C 00 90 5D |  if_ne	jmp	#LR__1140
0cc70     A7 12 02 FB | 	rdlong	arg01, fp
0cc74     0C 4E 05 F1 | 	add	fp, #12
0cc78     A7 14 02 FB | 	rdlong	arg02, fp
0cc7c     0C 4E 05 F1 | 	add	fp, #12
0cc80     A7 16 02 FB | 	rdlong	arg03, fp
0cc84     0C 4E 05 F1 | 	add	fp, #12
0cc88     A7 18 02 FB | 	rdlong	arg04, fp
0cc8c     24 4E 85 F1 | 	sub	fp, #36
0cc90     37 00 00 FF 
0cc94     28 E4 05 F1 | 	add	objptr, ##28200
0cc98     F2 1A 02 FB | 	rdlong	arg05, objptr
0cc9c     37 00 00 FF 
0cca0     28 E4 85 F1 | 	sub	objptr, ##28200
0cca4     38 2D B1 FD | 	call	#_hg010b_spin2_box
0cca8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0cca8     6C 00 90 FD | 	jmp	#LR__1141
0ccac                 | LR__1140
0ccac     A7 12 02 F6 | 	mov	arg01, fp
0ccb0     08 ED BF FD | 	call	#_converttoint
0ccb4     FD 20 02 F6 | 	mov	local02, result1
0ccb8     0C 4E 05 F1 | 	add	fp, #12
0ccbc     A7 12 02 F6 | 	mov	arg01, fp
0ccc0     0C 4E 85 F1 | 	sub	fp, #12
0ccc4     F4 EC BF FD | 	call	#_converttoint
0ccc8     FD 22 02 F6 | 	mov	local03, result1
0cccc     18 4E 05 F1 | 	add	fp, #24
0ccd0     A7 12 02 F6 | 	mov	arg01, fp
0ccd4     18 4E 85 F1 | 	sub	fp, #24
0ccd8     E0 EC BF FD | 	call	#_converttoint
0ccdc     FD 1E 02 F6 | 	mov	local01, result1
0cce0     24 4E 05 F1 | 	add	fp, #36
0cce4     A7 12 02 F6 | 	mov	arg01, fp
0cce8     24 4E 85 F1 | 	sub	fp, #36
0ccec     CC EC BF FD | 	call	#_converttoint
0ccf0     FD 18 02 F6 | 	mov	arg04, result1
0ccf4     37 00 00 FF 
0ccf8     28 E4 05 F1 | 	add	objptr, ##28200
0ccfc     F2 1A 02 FB | 	rdlong	arg05, objptr
0cd00     37 00 00 FF 
0cd04     28 E4 85 F1 | 	sub	objptr, ##28200
0cd08     10 13 02 F6 | 	mov	arg01, local02
0cd0c     11 15 02 F6 | 	mov	arg02, local03
0cd10     0F 17 02 F6 | 	mov	arg03, local01
0cd14     C8 2C B1 FD | 	call	#_hg010b_spin2_box
0cd18                 | LR__1141
0cd18     A7 F0 03 F6 | 	mov	ptra, fp
0cd1c     B2 00 A0 FD | 	call	#popregs_
0cd20                 | _do_box_ret
0cd20     2D 00 64 FD | 	ret
0cd24                 | 
0cd24                 | ' 
0cd24                 | ' '-------------------- brun
0cd24                 | ' 
0cd24                 | ' sub do_brun
0cd24                 | _do_brun
0cd24     08 4A 05 F6 | 	mov	COUNT_, #8
0cd28     A8 00 A0 FD | 	call	#pushregs_
0cd2c     A8 EA BF FD | 	call	#_pop
0cd30     FE 1A 02 F6 | 	mov	arg05, result2
0cd34     FF 18 02 F6 | 	mov	arg04, result3
0cd38     FD 1E 02 F6 | 	mov	local01, result1
0cd3c     0D 21 02 F6 | 	mov	local02, arg05
0cd40     0C 23 02 F6 | 	mov	local03, arg04
0cd44                 | ' 
0cd44                 | ' t1=pop() 
0cd44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0cd44     2B 22 0E F2 | 	cmp	local03, #43 wz
0cd48     10 00 90 5D |  if_ne	jmp	#LR__1150
0cd4c     0F 13 02 F6 | 	mov	arg01, local01
0cd50     FC EB BF FD | 	call	#_convertstring
0cd54     FD 1E 02 F6 | 	mov	local01, result1
0cd58     1F 22 06 F6 | 	mov	local03, #31
0cd5c                 | LR__1150
0cd5c                 | ' if t1.result_type=result_string then
0cd5c     1F 22 0E F2 | 	cmp	local03, #31 wz
0cd60     EC 01 90 5D |  if_ne	jmp	#LR__1154
0cd64     0F 25 02 F6 | 	mov	local04, local01
0cd68                 | '   filename=t1.result.sresult
0cd68                 | '   if left$(filename,1)="/" then 
0cd68     12 13 02 F6 | 	mov	arg01, local04
0cd6c     01 14 06 F6 | 	mov	arg02, #1
0cd70     8C 68 B1 FD | 	call	#__system__Left_S
0cd74     FD 12 02 F6 | 	mov	arg01, result1
0cd78     8B 01 00 FF 
0cd7c     A4 15 06 F6 | 	mov	arg02, ##@LR__5512
0cd80     28 48 B1 FD | 	call	#__system___string_cmp
0cd84     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd88     12 27 02 A6 |  if_e	mov	local05, local04
0cd8c     14 00 90 AD |  if_e	jmp	#LR__1151
0cd90     8B 01 00 FF 
0cd94     A6 13 06 F6 | 	mov	arg01, ##@LR__5513
0cd98     12 15 02 F6 | 	mov	arg02, local04
0cd9c     40 48 B1 FD | 	call	#__system___string_concat
0cda0     FD 26 02 F6 | 	mov	local05, result1
0cda4                 | LR__1151
0cda4                 | '   open fullfilename for input as #9
0cda4     09 12 06 F6 | 	mov	arg01, #9
0cda8     13 15 02 F6 | 	mov	arg02, local05
0cdac     00 16 06 F6 | 	mov	arg03, #0
0cdb0     D4 53 B1 FD | 	call	#__system___basic_open_string
0cdb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cdb8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0cdbc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cdc0     FD 28 0A F6 | 	mov	local06, result1 wz
0cdc4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0cdc4     8C 00 90 AD |  if_e	jmp	#LR__1152
0cdc8     00 12 06 F6 | 	mov	arg01, #0
0cdcc     E0 A4 B1 FD | 	call	#__system___getiolock_0568
0cdd0     FD 12 02 F6 | 	mov	arg01, result1
0cdd4     AC 47 B1 FD | 	call	#__system___lockmem
0cdd8     8B 01 00 FF 
0cddc     AF 15 06 F6 | 	mov	arg02, ##@LR__5514
0cde0     00 12 06 F6 | 	mov	arg01, #0
0cde4     00 16 06 F6 | 	mov	arg03, #0
0cde8     8C 54 B1 FD | 	call	#__system___basic_print_string
0cdec     00 12 06 F6 | 	mov	arg01, #0
0cdf0     14 15 02 F6 | 	mov	arg02, local06
0cdf4     00 16 06 F6 | 	mov	arg03, #0
0cdf8     0A 18 06 F6 | 	mov	arg04, #10
0cdfc     BC 54 B1 FD | 	call	#__system___basic_print_integer
0ce00     8B 01 00 FF 
0ce04     BD 15 06 F6 | 	mov	arg02, ##@LR__5515
0ce08     00 12 06 F6 | 	mov	arg01, #0
0ce0c     00 16 06 F6 | 	mov	arg03, #0
0ce10     64 54 B1 FD | 	call	#__system___basic_print_string
0ce14     14 13 02 F6 | 	mov	arg01, local06
0ce18     38 70 B1 FD | 	call	#__system___strerror
0ce1c     FD 14 02 F6 | 	mov	arg02, result1
0ce20     00 12 06 F6 | 	mov	arg01, #0
0ce24     00 16 06 F6 | 	mov	arg03, #0
0ce28     4C 54 B1 FD | 	call	#__system___basic_print_string
0ce2c     00 12 06 F6 | 	mov	arg01, #0
0ce30     0A 14 06 F6 | 	mov	arg02, #10
0ce34     00 16 06 F6 | 	mov	arg03, #0
0ce38     E4 53 B1 FD | 	call	#__system___basic_print_char
0ce3c     00 12 06 F6 | 	mov	arg01, #0
0ce40     6C A4 B1 FD | 	call	#__system___getiolock_0568
0ce44     FD 00 68 FC | 	wrlong	#0, result1
0ce48     09 12 06 F6 | 	mov	arg01, #9
0ce4c     D0 99 B1 FD | 	call	#__system__close
0ce50     FC 00 90 FD | 	jmp	#LR__1155
0ce54                 | LR__1152
0ce54     01 2A 06 F6 | 	mov	local07, #1
0ce58     00 2C 06 F6 | 	mov	local08, #0
0ce5c                 | '   do
0ce5c                 | LR__1153
0ce5c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0ce5c     4E 00 00 FF 
0ce60     B4 E4 05 F1 | 	add	objptr, ##40116
0ce64     F2 16 02 F6 | 	mov	arg03, objptr
0ce68     4E 00 00 FF 
0ce6c     B4 E4 85 F1 | 	sub	objptr, ##40116
0ce70     09 12 06 F6 | 	mov	arg01, #9
0ce74     15 15 02 F6 | 	mov	arg02, local07
0ce78     0A 18 C6 F9 | 	decod	arg04, #10
0ce7c     01 1A 06 F6 | 	mov	arg05, #1
0ce80     70 55 B1 FD | 	call	#__system___basic_get
0ce84     FD 28 02 F6 | 	mov	local06, result1
0ce88     FD 2A 02 F1 | 	add	local07, result1
0ce8c     4E 00 00 FF 
0ce90     B4 E4 05 F1 | 	add	objptr, ##40116
0ce94     F2 12 02 F6 | 	mov	arg01, objptr
0ce98     16 15 02 F6 | 	mov	arg02, local08
0ce9c     0A 16 C6 F9 | 	decod	arg03, #10
0cea0     42 00 00 FF 
0cea4     E8 E5 85 F1 | 	sub	objptr, ##34280
0cea8     34 3B B1 FD | 	call	#_psram_spin2_write
0ceac     0B 00 00 FF 
0ceb0     CC E4 85 F1 | 	sub	objptr, ##5836
0ceb4     14 2D 02 F1 | 	add	local08, local06
0ceb8     02 00 00 FF 
0cebc     00 28 0E F2 | 	cmp	local06, ##1024 wz
0cec0     E0 03 00 AF 
0cec4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0cec8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1153
0cecc     36 00 00 FF 
0ced0     FC E5 05 F1 | 	add	objptr, ##28156
0ced4     F2 12 02 FB | 	rdlong	arg01, objptr
0ced8     03 12 62 FD | 	cogstop	arg01
0cedc     04 E4 05 F1 | 	add	objptr, #4
0cee0     F2 12 02 FB | 	rdlong	arg01, objptr
0cee4     03 12 62 FD | 	cogstop	arg01
0cee8     04 E4 05 F1 | 	add	objptr, #4
0ceec     F2 12 02 FB | 	rdlong	arg01, objptr
0cef0     03 12 62 FD | 	cogstop	arg01
0cef4     19 00 00 FF 
0cef8     14 E5 05 F1 | 	add	objptr, ##13076
0cefc     F2 12 02 FB | 	rdlong	arg01, objptr
0cf00     03 12 62 FD | 	cogstop	arg01
0cf04     18 00 00 FF 
0cf08     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0cf0c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0cf10     18 00 00 FF 
0cf14     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0cf18     19 00 00 FF 
0cf1c     0C E5 85 F1 | 	sub	objptr, ##13068
0cf20     1E 2C 06 F6 | 	mov	local08, #30
0cf24     28 E4 61 FD | 	setq	objptr
0cf28     0A 2D F2 FC | 	coginit	local08, arg02 wc
0cf2c     01 2C 66 C6 |  if_b	neg	local08, #1
0cf30     1B 00 00 FF 
0cf34     18 E4 05 F1 | 	add	objptr, ##13848
0cf38     F2 2C 62 FC | 	wrlong	local08, objptr
0cf3c     52 00 00 FF 
0cf40     24 E4 85 F1 | 	sub	objptr, ##42020
0cf44     00 12 06 F6 | 	mov	arg01, #0
0cf48     01 12 62 FD | 	cogid	arg01
0cf4c     03 12 62 FD | 	cogstop	arg01
0cf50                 | LR__1154
0cf50                 | LR__1155
0cf50     A7 F0 03 F6 | 	mov	ptra, fp
0cf54     B2 00 A0 FD | 	call	#popregs_
0cf58                 | _do_brun_ret
0cf58     2D 00 64 FD | 	ret
0cf5c                 | 
0cf5c                 | ' 
0cf5c                 | ' '-------------------- cd
0cf5c                 | ' 
0cf5c                 | ' sub do_cd
0cf5c                 | _do_cd
0cf5c     06 4A 05 F6 | 	mov	COUNT_, #6
0cf60     A8 00 A0 FD | 	call	#pushregs_
0cf64     8B 01 00 FF 
0cf68     C0 13 06 F6 | 	mov	arg01, ##@LR__5516
0cf6c     31 14 06 F6 | 	mov	arg02, #49
0cf70     74 A4 B1 FD | 	call	#__system___basic_dir
0cf74     60 E8 BF FD | 	call	#_pop
0cf78     FE 18 02 F6 | 	mov	arg04, result2
0cf7c     FF 16 02 F6 | 	mov	arg03, result3
0cf80     FD 1E 02 F6 | 	mov	local01, result1
0cf84     0C 21 02 F6 | 	mov	local02, arg04
0cf88     0B 23 02 F6 | 	mov	local03, arg03
0cf8c                 | ' t1=pop()
0cf8c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0cf8c     2B 22 0E F2 | 	cmp	local03, #43 wz
0cf90     10 00 90 5D |  if_ne	jmp	#LR__1160
0cf94     0F 13 02 F6 | 	mov	arg01, local01
0cf98     B4 E9 BF FD | 	call	#_convertstring
0cf9c     FD 1E 02 F6 | 	mov	local01, result1
0cfa0     1F 22 06 F6 | 	mov	local03, #31
0cfa4                 | LR__1160
0cfa4                 | ' if t1.result_type<>result_string then printerror(15): return
0cfa4     1F 22 0E F2 | 	cmp	local03, #31 wz
0cfa8     10 00 90 AD |  if_e	jmp	#LR__1161
0cfac     0F 12 06 F6 | 	mov	arg01, #15
0cfb0     00 14 06 F6 | 	mov	arg02, #0
0cfb4     0C 10 B1 FD | 	call	#_printerror
0cfb8     48 05 90 FD | 	jmp	#LR__1179
0cfbc                 | LR__1161
0cfbc     0F 25 02 F6 | 	mov	local04, local01
0cfc0                 | ' newdir$=t1.result.sresult
0cfc0                 | ' if newdir$=".." then 
0cfc0     8B 01 00 FF 
0cfc4     C2 15 06 F6 | 	mov	arg02, ##@LR__5517
0cfc8     12 13 02 F6 | 	mov	arg01, local04
0cfcc     DC 45 B1 FD | 	call	#__system___string_cmp
0cfd0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cfd4     C4 01 90 5D |  if_ne	jmp	#LR__1168
0cfd8     4A 00 00 FF 
0cfdc     94 E4 05 F1 | 	add	objptr, ##38036
0cfe0     F2 12 02 FB | 	rdlong	arg01, objptr
0cfe4     4A 00 00 FF 
0cfe8     94 E4 85 F1 | 	sub	objptr, ##38036
0cfec     09 27 02 F6 | 	mov	local05, arg01
0cff0     97 06 48 FB | 	callpa	#(@LR__1163-@LR__1162)>>2,fcache_load_ptr_
0cff4                 | LR__1162
0cff4     13 FB C9 FA | 	rdbyte	result1, local05 wz
0cff8     01 26 06 51 |  if_ne	add	local05, #1
0cffc     F4 FF 9F 5D |  if_ne	jmp	#LR__1162
0d000                 | LR__1163
0d000     13 13 C2 F2 | 	subr	arg01, local05
0d004     4A 00 00 FF 
0d008     94 E4 05 F1 | 	add	objptr, ##38036
0d00c     F2 14 02 FB | 	rdlong	arg02, objptr
0d010     4A 00 00 FF 
0d014     94 E4 85 F1 | 	sub	objptr, ##38036
0d018     8B 01 00 FF 
0d01c     C5 17 06 F6 | 	mov	arg03, ##@LR__5518
0d020     28 6C B1 FD | 	call	#__system__InstrRev
0d024     FD 24 02 F6 | 	mov	local04, result1
0d028                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0d028     02 24 56 F2 | 	cmps	local04, #2 wc
0d02c     28 00 90 CD |  if_b	jmp	#LR__1164
0d030     4A 00 00 FF 
0d034     94 E4 05 F1 | 	add	objptr, ##38036
0d038     F2 12 02 FB | 	rdlong	arg01, objptr
0d03c     4A 00 00 FF 
0d040     94 E4 85 F1 | 	sub	objptr, ##38036
0d044     01 24 86 F1 | 	sub	local04, #1
0d048     12 15 02 F6 | 	mov	arg02, local04
0d04c     B0 65 B1 FD | 	call	#__system__Left_S
0d050     FD 24 02 F6 | 	mov	local04, result1
0d054     08 00 90 FD | 	jmp	#LR__1165
0d058                 | LR__1164
0d058     8B 01 00 FF 
0d05c     C7 25 06 F6 | 	mov	local04, ##@LR__5519
0d060                 | LR__1165
0d060     12 13 02 F6 | 	mov	arg01, local04
0d064     A8 4B B1 FD | 	call	#__system___chdir
0d068     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d06c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d070     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d074     FD 28 0A F6 | 	mov	local06, result1 wz
0d078                 | '   chdir newdir$
0d078                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d078     05 28 0E 52 |  if_ne	cmp	local06, #5 wz
0d07c     A4 00 90 AD |  if_e	jmp	#LR__1166
0d080     00 12 06 F6 | 	mov	arg01, #0
0d084     28 A2 B1 FD | 	call	#__system___getiolock_0568
0d088     FD 12 02 F6 | 	mov	arg01, result1
0d08c     F4 44 B1 FD | 	call	#__system___lockmem
0d090     8B 01 00 FF 
0d094     C9 15 06 F6 | 	mov	arg02, ##@LR__5520
0d098     00 12 06 F6 | 	mov	arg01, #0
0d09c     00 16 06 F6 | 	mov	arg03, #0
0d0a0     D4 51 B1 FD | 	call	#__system___basic_print_string
0d0a4     00 12 06 F6 | 	mov	arg01, #0
0d0a8     14 15 02 F6 | 	mov	arg02, local06
0d0ac     00 16 06 F6 | 	mov	arg03, #0
0d0b0     0A 18 06 F6 | 	mov	arg04, #10
0d0b4     04 52 B1 FD | 	call	#__system___basic_print_integer
0d0b8     8B 01 00 FF 
0d0bc     D7 15 06 F6 | 	mov	arg02, ##@LR__5521
0d0c0     00 12 06 F6 | 	mov	arg01, #0
0d0c4     00 16 06 F6 | 	mov	arg03, #0
0d0c8     AC 51 B1 FD | 	call	#__system___basic_print_string
0d0cc     45 00 00 FF 
0d0d0     50 E5 05 F1 | 	add	objptr, ##35664
0d0d4     F2 14 02 FB | 	rdlong	arg02, objptr
0d0d8     45 00 00 FF 
0d0dc     50 E5 85 F1 | 	sub	objptr, ##35664
0d0e0     00 12 06 F6 | 	mov	arg01, #0
0d0e4     00 16 06 F6 | 	mov	arg03, #0
0d0e8     8C 51 B1 FD | 	call	#__system___basic_print_string
0d0ec     00 12 06 F6 | 	mov	arg01, #0
0d0f0     0A 14 06 F6 | 	mov	arg02, #10
0d0f4     00 16 06 F6 | 	mov	arg03, #0
0d0f8     24 51 B1 FD | 	call	#__system___basic_print_char
0d0fc     00 12 06 F6 | 	mov	arg01, #0
0d100     AC A1 B1 FD | 	call	#__system___getiolock_0568
0d104     FD 00 68 FC | 	wrlong	#0, result1
0d108     4A 00 00 FF 
0d10c     94 E4 05 F1 | 	add	objptr, ##38036
0d110     F2 12 02 FB | 	rdlong	arg01, objptr
0d114     4A 00 00 FF 
0d118     94 E4 85 F1 | 	sub	objptr, ##38036
0d11c     F0 4A B1 FD | 	call	#__system___chdir
0d120     14 00 90 FD | 	jmp	#LR__1167
0d124                 | LR__1166
0d124     4A 00 00 FF 
0d128     94 E4 05 F1 | 	add	objptr, ##38036
0d12c     F2 24 62 FC | 	wrlong	local04, objptr
0d130     4A 00 00 FF 
0d134     94 E4 85 F1 | 	sub	objptr, ##38036
0d138                 | LR__1167
0d138                 | '   print "Current directory: ";currentdir$
0d138     00 12 06 F6 | 	mov	arg01, #0
0d13c     70 A1 B1 FD | 	call	#__system___getiolock_0568
0d140     FD 12 02 F6 | 	mov	arg01, result1
0d144     3C 44 B1 FD | 	call	#__system___lockmem
0d148     8B 01 00 FF 
0d14c     DA 15 06 F6 | 	mov	arg02, ##@LR__5522
0d150     00 12 06 F6 | 	mov	arg01, #0
0d154     00 16 06 F6 | 	mov	arg03, #0
0d158     1C 51 B1 FD | 	call	#__system___basic_print_string
0d15c     4A 00 00 FF 
0d160     94 E4 05 F1 | 	add	objptr, ##38036
0d164     F2 14 02 FB | 	rdlong	arg02, objptr
0d168     4A 00 00 FF 
0d16c     94 E4 85 F1 | 	sub	objptr, ##38036
0d170     00 12 06 F6 | 	mov	arg01, #0
0d174     00 16 06 F6 | 	mov	arg03, #0
0d178     FC 50 B1 FD | 	call	#__system___basic_print_string
0d17c     00 12 06 F6 | 	mov	arg01, #0
0d180     0A 14 06 F6 | 	mov	arg02, #10
0d184     00 16 06 F6 | 	mov	arg03, #0
0d188     94 50 B1 FD | 	call	#__system___basic_print_char
0d18c     00 12 06 F6 | 	mov	arg01, #0
0d190     1C A1 B1 FD | 	call	#__system___getiolock_0568
0d194     FD 00 68 FC | 	wrlong	#0, result1
0d198                 | '   return
0d198     68 03 90 FD | 	jmp	#LR__1179
0d19c                 | LR__1168
0d19c                 | ' if left$(newdir$,1)="/" then 
0d19c     12 13 02 F6 | 	mov	arg01, local04
0d1a0     01 14 06 F6 | 	mov	arg02, #1
0d1a4     58 64 B1 FD | 	call	#__system__Left_S
0d1a8     FD 12 02 F6 | 	mov	arg01, result1
0d1ac     8B 01 00 FF 
0d1b0     EE 15 06 F6 | 	mov	arg02, ##@LR__5523
0d1b4     F4 43 B1 FD | 	call	#__system___string_cmp
0d1b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1bc     3C 01 90 5D |  if_ne	jmp	#LR__1171
0d1c0     12 13 02 F6 | 	mov	arg01, local04
0d1c4     48 4A B1 FD | 	call	#__system___chdir
0d1c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d1cc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d1d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d1d4     FD 28 0A F6 | 	mov	local06, result1 wz
0d1d8                 | '   chdir(newdir$)
0d1d8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d1d8     05 28 0E 52 |  if_ne	cmp	local06, #5 wz
0d1dc     A4 00 90 AD |  if_e	jmp	#LR__1169
0d1e0     00 12 06 F6 | 	mov	arg01, #0
0d1e4     C8 A0 B1 FD | 	call	#__system___getiolock_0568
0d1e8     FD 12 02 F6 | 	mov	arg01, result1
0d1ec     94 43 B1 FD | 	call	#__system___lockmem
0d1f0     8B 01 00 FF 
0d1f4     F0 15 06 F6 | 	mov	arg02, ##@LR__5524
0d1f8     00 12 06 F6 | 	mov	arg01, #0
0d1fc     00 16 06 F6 | 	mov	arg03, #0
0d200     74 50 B1 FD | 	call	#__system___basic_print_string
0d204     00 12 06 F6 | 	mov	arg01, #0
0d208     14 15 02 F6 | 	mov	arg02, local06
0d20c     00 16 06 F6 | 	mov	arg03, #0
0d210     0A 18 06 F6 | 	mov	arg04, #10
0d214     A4 50 B1 FD | 	call	#__system___basic_print_integer
0d218     8B 01 00 FF 
0d21c     FE 15 06 F6 | 	mov	arg02, ##@LR__5525
0d220     00 12 06 F6 | 	mov	arg01, #0
0d224     00 16 06 F6 | 	mov	arg03, #0
0d228     4C 50 B1 FD | 	call	#__system___basic_print_string
0d22c     45 00 00 FF 
0d230     50 E5 05 F1 | 	add	objptr, ##35664
0d234     F2 14 02 FB | 	rdlong	arg02, objptr
0d238     45 00 00 FF 
0d23c     50 E5 85 F1 | 	sub	objptr, ##35664
0d240     00 12 06 F6 | 	mov	arg01, #0
0d244     00 16 06 F6 | 	mov	arg03, #0
0d248     2C 50 B1 FD | 	call	#__system___basic_print_string
0d24c     00 12 06 F6 | 	mov	arg01, #0
0d250     0A 14 06 F6 | 	mov	arg02, #10
0d254     00 16 06 F6 | 	mov	arg03, #0
0d258     C4 4F B1 FD | 	call	#__system___basic_print_char
0d25c     00 12 06 F6 | 	mov	arg01, #0
0d260     4C A0 B1 FD | 	call	#__system___getiolock_0568
0d264     FD 00 68 FC | 	wrlong	#0, result1
0d268     4A 00 00 FF 
0d26c     94 E4 05 F1 | 	add	objptr, ##38036
0d270     F2 12 02 FB | 	rdlong	arg01, objptr
0d274     4A 00 00 FF 
0d278     94 E4 85 F1 | 	sub	objptr, ##38036
0d27c     90 49 B1 FD | 	call	#__system___chdir
0d280     14 00 90 FD | 	jmp	#LR__1170
0d284                 | LR__1169
0d284     4A 00 00 FF 
0d288     94 E4 05 F1 | 	add	objptr, ##38036
0d28c     F2 24 62 FC | 	wrlong	local04, objptr
0d290     4A 00 00 FF 
0d294     94 E4 85 F1 | 	sub	objptr, ##38036
0d298                 | LR__1170
0d298                 | '   print "Current directory: ";currentdir$
0d298     00 12 06 F6 | 	mov	arg01, #0
0d29c     10 A0 B1 FD | 	call	#__system___getiolock_0568
0d2a0     FD 12 02 F6 | 	mov	arg01, result1
0d2a4     DC 42 B1 FD | 	call	#__system___lockmem
0d2a8     8C 01 00 FF 
0d2ac     01 14 06 F6 | 	mov	arg02, ##@LR__5526
0d2b0     00 12 06 F6 | 	mov	arg01, #0
0d2b4     00 16 06 F6 | 	mov	arg03, #0
0d2b8     BC 4F B1 FD | 	call	#__system___basic_print_string
0d2bc     4A 00 00 FF 
0d2c0     94 E4 05 F1 | 	add	objptr, ##38036
0d2c4     F2 14 02 FB | 	rdlong	arg02, objptr
0d2c8     4A 00 00 FF 
0d2cc     94 E4 85 F1 | 	sub	objptr, ##38036
0d2d0     00 12 06 F6 | 	mov	arg01, #0
0d2d4     00 16 06 F6 | 	mov	arg03, #0
0d2d8     9C 4F B1 FD | 	call	#__system___basic_print_string
0d2dc     00 12 06 F6 | 	mov	arg01, #0
0d2e0     0A 14 06 F6 | 	mov	arg02, #10
0d2e4     00 16 06 F6 | 	mov	arg03, #0
0d2e8     34 4F B1 FD | 	call	#__system___basic_print_char
0d2ec     00 12 06 F6 | 	mov	arg01, #0
0d2f0     BC 9F B1 FD | 	call	#__system___getiolock_0568
0d2f4     FD 00 68 FC | 	wrlong	#0, result1
0d2f8                 | '   return
0d2f8     08 02 90 FD | 	jmp	#LR__1179
0d2fc                 | LR__1171
0d2fc                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0d2fc     4A 00 00 FF 
0d300     94 E4 05 F1 | 	add	objptr, ##38036
0d304     F2 12 02 FB | 	rdlong	arg01, objptr
0d308     4A 00 00 FF 
0d30c     94 E4 85 F1 | 	sub	objptr, ##38036
0d310     8C 01 00 FF 
0d314     15 14 06 F6 | 	mov	arg02, ##@LR__5527
0d318     90 42 B1 FD | 	call	#__system___string_cmp
0d31c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d320     34 00 90 AD |  if_e	jmp	#LR__1172
0d324     4A 00 00 FF 
0d328     94 E4 05 F1 | 	add	objptr, ##38036
0d32c     F2 12 02 FB | 	rdlong	arg01, objptr
0d330     4A 00 00 FF 
0d334     94 E4 85 F1 | 	sub	objptr, ##38036
0d338     8C 01 00 FF 
0d33c     17 14 06 F6 | 	mov	arg02, ##@LR__5528
0d340     9C 42 B1 FD | 	call	#__system___string_concat
0d344     FD 12 02 F6 | 	mov	arg01, result1
0d348     12 15 02 F6 | 	mov	arg02, local04
0d34c     90 42 B1 FD | 	call	#__system___string_concat
0d350     FD 24 02 F6 | 	mov	local04, result1
0d354     20 00 90 FD | 	jmp	#LR__1173
0d358                 | LR__1172
0d358     4A 00 00 FF 
0d35c     94 E4 05 F1 | 	add	objptr, ##38036
0d360     F2 12 02 FB | 	rdlong	arg01, objptr
0d364     4A 00 00 FF 
0d368     94 E4 85 F1 | 	sub	objptr, ##38036
0d36c     12 15 02 F6 | 	mov	arg02, local04
0d370     6C 42 B1 FD | 	call	#__system___string_concat
0d374     FD 24 02 F6 | 	mov	local04, result1
0d378                 | LR__1173
0d378                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0d378     12 13 02 F6 | 	mov	arg01, local04
0d37c     01 14 06 F6 | 	mov	arg02, #1
0d380     04 63 B1 FD | 	call	#__system__Right_S
0d384     FD 12 02 F6 | 	mov	arg01, result1
0d388     8C 01 00 FF 
0d38c     19 14 06 F6 | 	mov	arg02, ##@LR__5529
0d390     18 42 B1 FD | 	call	#__system___string_cmp
0d394     00 FA 0D F2 | 	cmp	result1, #0 wz
0d398     30 00 90 5D |  if_ne	jmp	#LR__1176
0d39c     12 13 02 F6 | 	mov	arg01, local04
0d3a0     09 27 02 F6 | 	mov	local05, arg01
0d3a4     97 06 48 FB | 	callpa	#(@LR__1175-@LR__1174)>>2,fcache_load_ptr_
0d3a8                 | LR__1174
0d3a8     13 FB C9 FA | 	rdbyte	result1, local05 wz
0d3ac     01 26 06 51 |  if_ne	add	local05, #1
0d3b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1174
0d3b4                 | LR__1175
0d3b4     09 27 82 F1 | 	sub	local05, arg01
0d3b8     13 15 02 F6 | 	mov	arg02, local05
0d3bc     01 14 86 F1 | 	sub	arg02, #1
0d3c0     12 13 02 F6 | 	mov	arg01, local04
0d3c4     38 62 B1 FD | 	call	#__system__Left_S
0d3c8     FD 24 02 F6 | 	mov	local04, result1
0d3cc                 | LR__1176
0d3cc     12 13 02 F6 | 	mov	arg01, local04
0d3d0     3C 48 B1 FD | 	call	#__system___chdir
0d3d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d3d8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d3dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d3e0     FD 28 0A F6 | 	mov	local06, result1 wz
0d3e4                 | '   chdir(newdir$)
0d3e4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d3e4     05 28 0E 52 |  if_ne	cmp	local06, #5 wz
0d3e8     A4 00 90 AD |  if_e	jmp	#LR__1177
0d3ec     00 12 06 F6 | 	mov	arg01, #0
0d3f0     BC 9E B1 FD | 	call	#__system___getiolock_0568
0d3f4     FD 12 02 F6 | 	mov	arg01, result1
0d3f8     88 41 B1 FD | 	call	#__system___lockmem
0d3fc     8C 01 00 FF 
0d400     1B 14 06 F6 | 	mov	arg02, ##@LR__5530
0d404     00 12 06 F6 | 	mov	arg01, #0
0d408     00 16 06 F6 | 	mov	arg03, #0
0d40c     68 4E B1 FD | 	call	#__system___basic_print_string
0d410     00 12 06 F6 | 	mov	arg01, #0
0d414     14 15 02 F6 | 	mov	arg02, local06
0d418     00 16 06 F6 | 	mov	arg03, #0
0d41c     0A 18 06 F6 | 	mov	arg04, #10
0d420     98 4E B1 FD | 	call	#__system___basic_print_integer
0d424     8C 01 00 FF 
0d428     29 14 06 F6 | 	mov	arg02, ##@LR__5531
0d42c     00 12 06 F6 | 	mov	arg01, #0
0d430     00 16 06 F6 | 	mov	arg03, #0
0d434     40 4E B1 FD | 	call	#__system___basic_print_string
0d438     45 00 00 FF 
0d43c     50 E5 05 F1 | 	add	objptr, ##35664
0d440     F2 14 02 FB | 	rdlong	arg02, objptr
0d444     45 00 00 FF 
0d448     50 E5 85 F1 | 	sub	objptr, ##35664
0d44c     00 12 06 F6 | 	mov	arg01, #0
0d450     00 16 06 F6 | 	mov	arg03, #0
0d454     20 4E B1 FD | 	call	#__system___basic_print_string
0d458     00 12 06 F6 | 	mov	arg01, #0
0d45c     0A 14 06 F6 | 	mov	arg02, #10
0d460     00 16 06 F6 | 	mov	arg03, #0
0d464     B8 4D B1 FD | 	call	#__system___basic_print_char
0d468     00 12 06 F6 | 	mov	arg01, #0
0d46c     40 9E B1 FD | 	call	#__system___getiolock_0568
0d470     FD 00 68 FC | 	wrlong	#0, result1
0d474     4A 00 00 FF 
0d478     94 E4 05 F1 | 	add	objptr, ##38036
0d47c     F2 12 02 FB | 	rdlong	arg01, objptr
0d480     4A 00 00 FF 
0d484     94 E4 85 F1 | 	sub	objptr, ##38036
0d488     84 47 B1 FD | 	call	#__system___chdir
0d48c     14 00 90 FD | 	jmp	#LR__1178
0d490                 | LR__1177
0d490     4A 00 00 FF 
0d494     94 E4 05 F1 | 	add	objptr, ##38036
0d498     F2 24 62 FC | 	wrlong	local04, objptr
0d49c     4A 00 00 FF 
0d4a0     94 E4 85 F1 | 	sub	objptr, ##38036
0d4a4                 | LR__1178
0d4a4                 | '   print "Current directory: ";currentdir$
0d4a4     00 12 06 F6 | 	mov	arg01, #0
0d4a8     04 9E B1 FD | 	call	#__system___getiolock_0568
0d4ac     FD 12 02 F6 | 	mov	arg01, result1
0d4b0     D0 40 B1 FD | 	call	#__system___lockmem
0d4b4     8C 01 00 FF 
0d4b8     2C 14 06 F6 | 	mov	arg02, ##@LR__5532
0d4bc     00 12 06 F6 | 	mov	arg01, #0
0d4c0     00 16 06 F6 | 	mov	arg03, #0
0d4c4     B0 4D B1 FD | 	call	#__system___basic_print_string
0d4c8     4A 00 00 FF 
0d4cc     94 E4 05 F1 | 	add	objptr, ##38036
0d4d0     F2 14 02 FB | 	rdlong	arg02, objptr
0d4d4     4A 00 00 FF 
0d4d8     94 E4 85 F1 | 	sub	objptr, ##38036
0d4dc     00 12 06 F6 | 	mov	arg01, #0
0d4e0     00 16 06 F6 | 	mov	arg03, #0
0d4e4     90 4D B1 FD | 	call	#__system___basic_print_string
0d4e8     00 12 06 F6 | 	mov	arg01, #0
0d4ec     0A 14 06 F6 | 	mov	arg02, #10
0d4f0     00 16 06 F6 | 	mov	arg03, #0
0d4f4     28 4D B1 FD | 	call	#__system___basic_print_char
0d4f8     00 12 06 F6 | 	mov	arg01, #0
0d4fc     B0 9D B1 FD | 	call	#__system___getiolock_0568
0d500     FD 00 68 FC | 	wrlong	#0, result1
0d504                 | LR__1179
0d504     A7 F0 03 F6 | 	mov	ptra, fp
0d508     B2 00 A0 FD | 	call	#popregs_
0d50c                 | _do_cd_ret
0d50c     2D 00 64 FD | 	ret
0d510                 | 
0d510                 | ' 
0d510                 | ' '-------------------- changefreq
0d510                 | ' 
0d510                 | ' sub do_changefreq
0d510                 | _do_changefreq
0d510     04 4A 05 F6 | 	mov	COUNT_, #4
0d514     A8 00 A0 FD | 	call	#pushregs_
0d518     28 F0 07 F1 | 	add	ptra, #40
0d51c     B8 E2 BF FD | 	call	#_pop
0d520     FF 14 02 F6 | 	mov	arg02, result3
0d524     A7 FA 61 FC | 	wrlong	result1, fp
0d528     04 4E 05 F1 | 	add	fp, #4
0d52c     A7 FC 61 FC | 	wrlong	result2, fp
0d530     04 4E 05 F1 | 	add	fp, #4
0d534     A7 14 62 FC | 	wrlong	arg02, fp
0d538     08 4E 85 F1 | 	sub	fp, #8
0d53c     A7 12 02 F6 | 	mov	arg01, fp
0d540     34 E5 BF FD | 	call	#_converttofloat
0d544     24 4E 05 F1 | 	add	fp, #36
0d548     A7 FA 61 FC | 	wrlong	result1, fp
0d54c     24 4E 85 F1 | 	sub	fp, #36
0d550     FD 14 02 F6 | 	mov	arg02, result1
0d554     FC 16 20 FF 
0d558     54 12 06 F6 | 	mov	arg01, ##1076754516
0d55c     B0 7D B1 FD | 	call	#__system____builtin_logbase
0d560     FD 1E 02 F6 | 	mov	local01, result1
0d564     1E 14 C6 F9 | 	decod	arg02, #30
0d568     FC 16 20 FF 
0d56c     54 12 06 F6 | 	mov	arg01, ##1076754516
0d570     9C 7D B1 FD | 	call	#__system____builtin_logbase
0d574     FD 14 02 F6 | 	mov	arg02, result1
0d578     0F 13 02 F6 | 	mov	arg01, local01
0d57c     C4 6F B1 FD | 	call	#__system___float_div
0d580     FD 12 02 F6 | 	mov	arg01, result1
0d584     00 14 06 F6 | 	mov	arg02, #0
0d588     7C 72 B1 FD | 	call	#__system___float_tointeger
0d58c     10 4E 05 F1 | 	add	fp, #16
0d590     A7 FA 61 FC | 	wrlong	result1, fp
0d594     1E 1E C6 F9 | 	decod	local01, #30
0d598     FD 12 02 F6 | 	mov	arg01, result1
0d59c     10 4E 85 F1 | 	sub	fp, #16
0d5a0     05 12 06 F1 | 	add	arg01, #5
0d5a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5a8     1F 20 C6 C9 |  if_b	decod	local02, #31
0d5ac     00 20 06 36 |  if_ae	mov	local02, #0
0d5b0     88 69 B1 FD | 	call	#__system___float_fromuns
0d5b4     10 FB 61 F5 | 	xor	result1, local02
0d5b8     FD 14 02 F6 | 	mov	arg02, result1
0d5bc     0F 13 02 F6 | 	mov	arg01, local01
0d5c0     84 7C B1 FD | 	call	#__system____builtin_powf
0d5c4     FD 12 02 F6 | 	mov	arg01, result1
0d5c8     01 14 06 F6 | 	mov	arg02, #1
0d5cc     38 72 B1 FD | 	call	#__system___float_tointeger
0d5d0     14 4E 05 F1 | 	add	fp, #20
0d5d4     A7 FA 61 FC | 	wrlong	result1, fp
0d5d8                 | ' skip=round(2^(lfreq+5))
0d5d8                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d5d8     14 4E 85 F1 | 	sub	fp, #20
0d5dc     40 00 00 FF 
0d5e0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d5e4     30 00 90 CD |  if_b	jmp	#LR__1180
0d5e8     14 4E 05 F1 | 	add	fp, #20
0d5ec     A7 1E 02 FB | 	rdlong	local01, fp
0d5f0     0F 1F 52 F6 | 	abs	local01, local01 wc
0d5f4     0F 1E 46 F0 | 	shr	local01, #15
0d5f8     0F 1F 82 F6 | 	negc	local01, local01
0d5fc     04 4E 05 F1 | 	add	fp, #4
0d600     A7 1E 62 FC | 	wrlong	local01, fp
0d604     04 4E 85 F1 | 	sub	fp, #4
0d608     40 00 80 FF 
0d60c     A7 00 68 FC | 	wrlong	##32768, fp
0d610     14 4E 85 F1 | 	sub	fp, #20
0d614     0C 00 90 FD | 	jmp	#LR__1181
0d618                 | LR__1180
0d618     18 4E 05 F1 | 	add	fp, #24
0d61c     A7 02 68 FC | 	wrlong	#1, fp
0d620     18 4E 85 F1 | 	sub	fp, #24
0d624                 | LR__1181
0d624     24 4E 05 F1 | 	add	fp, #36
0d628     A7 14 02 FB | 	rdlong	arg02, fp
0d62c     24 4E 85 F1 | 	sub	fp, #36
0d630     3E 2C 25 FF 
0d634     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d638     08 6F B1 FD | 	call	#__system___float_div
0d63c     FD 1E 02 F6 | 	mov	local01, result1
0d640     18 4E 05 F1 | 	add	fp, #24
0d644     A7 12 02 FB | 	rdlong	arg01, fp
0d648     18 4E 85 F1 | 	sub	fp, #24
0d64c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d650     1F 20 C6 C9 |  if_b	decod	local02, #31
0d654     00 20 06 36 |  if_ae	mov	local02, #0
0d658     E0 68 B1 FD | 	call	#__system___float_fromuns
0d65c     10 FB 61 F5 | 	xor	result1, local02
0d660     FD 22 02 F6 | 	mov	local03, result1
0d664     1E 24 C6 F9 | 	decod	local04, #30
0d668     0D 12 06 F6 | 	mov	arg01, #13
0d66c     10 4E 05 F1 | 	add	fp, #16
0d670     A7 14 02 FB | 	rdlong	arg02, fp
0d674     10 4E 85 F1 | 	sub	fp, #16
0d678     0A 13 82 F1 | 	sub	arg01, arg02
0d67c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d680     1F 20 C6 C9 |  if_b	decod	local02, #31
0d684     00 20 06 36 |  if_ae	mov	local02, #0
0d688     B0 68 B1 FD | 	call	#__system___float_fromuns
0d68c     10 FB 61 F5 | 	xor	result1, local02
0d690     FD 14 02 F6 | 	mov	arg02, result1
0d694     12 13 02 F6 | 	mov	arg01, local04
0d698     AC 7B B1 FD | 	call	#__system____builtin_powf
0d69c     FD 14 02 F6 | 	mov	arg02, result1
0d6a0     11 13 02 F6 | 	mov	arg01, local03
0d6a4     98 6C B1 FD | 	call	#__system___float_mul
0d6a8     FD 14 02 F6 | 	mov	arg02, result1
0d6ac     0F 13 02 F6 | 	mov	arg01, local01
0d6b0     90 6E B1 FD | 	call	#__system___float_div
0d6b4     FD 12 02 F6 | 	mov	arg01, result1
0d6b8     01 14 06 F6 | 	mov	arg02, #1
0d6bc     48 71 B1 FD | 	call	#__system___float_tointeger
0d6c0     FD 1E 02 F6 | 	mov	local01, result1
0d6c4     1C 4E 05 F1 | 	add	fp, #28
0d6c8     A7 1E 62 FC | 	wrlong	local01, fp
0d6cc     1C 4E 85 F1 | 	sub	fp, #28
0d6d0     04 E1 BF FD | 	call	#_pop
0d6d4     FF 24 02 F6 | 	mov	local04, result3
0d6d8     A7 FA 61 FC | 	wrlong	result1, fp
0d6dc     04 4E 05 F1 | 	add	fp, #4
0d6e0     A7 FC 61 FC | 	wrlong	result2, fp
0d6e4     04 4E 05 F1 | 	add	fp, #4
0d6e8     A7 24 62 FC | 	wrlong	local04, fp
0d6ec     08 4E 85 F1 | 	sub	fp, #8
0d6f0     A7 12 02 F6 | 	mov	arg01, fp
0d6f4     C4 E2 BF FD | 	call	#_converttoint
0d6f8     FD 22 52 F6 | 	abs	local03, result1 wc
0d6fc     07 22 06 F5 | 	and	local03, #7
0d700     11 23 82 F6 | 	negc	local03, local03
0d704     0C 4E 05 F1 | 	add	fp, #12
0d708     A7 22 62 FC | 	wrlong	local03, fp
0d70c     08 4E 05 F1 | 	add	fp, #8
0d710     A7 1E 02 FB | 	rdlong	local01, fp
0d714     10 1E 66 F0 | 	shl	local01, #16
0d718     08 4E 05 F1 | 	add	fp, #8
0d71c     A7 24 02 FB | 	rdlong	local04, fp
0d720     12 1F 02 F1 | 	add	local01, local04
0d724     04 4E 05 F1 | 	add	fp, #4
0d728     A7 1E 62 FC | 	wrlong	local01, fp
0d72c                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0d72c     37 00 00 FF 
0d730     10 E4 05 F1 | 	add	objptr, ##28176
0d734     F2 12 02 FB | 	rdlong	arg01, objptr
0d738     37 00 00 FF 
0d73c     10 E4 85 F1 | 	sub	objptr, ##28176
0d740     14 4E 85 F1 | 	sub	fp, #20
0d744     A7 24 02 FB | 	rdlong	local04, fp
0d748     0C 4E 85 F1 | 	sub	fp, #12
0d74c     06 24 66 F0 | 	shl	local04, #6
0d750     12 13 02 F1 | 	add	arg01, local04
0d754     08 12 06 F1 | 	add	arg01, #8
0d758     09 FB 01 FB | 	rdlong	result1, arg01
0d75c     1B FA 2D F4 | 	testbn	result1, #27 wz
0d760     3C 00 90 5D |  if_ne	jmp	#LR__1182
0d764     37 00 00 FF 
0d768     10 E4 05 F1 | 	add	objptr, ##28176
0d76c     F2 12 02 FB | 	rdlong	arg01, objptr
0d770     37 00 00 FF 
0d774     10 E4 85 F1 | 	sub	objptr, ##28176
0d778     0C 4E 05 F1 | 	add	fp, #12
0d77c     A7 24 02 FB | 	rdlong	local04, fp
0d780     06 24 66 F0 | 	shl	local04, #6
0d784     12 13 02 F1 | 	add	arg01, local04
0d788     18 12 06 F1 | 	add	arg01, #24
0d78c     14 4E 05 F1 | 	add	fp, #20
0d790     A7 14 02 FB | 	rdlong	arg02, fp
0d794     20 4E 85 F1 | 	sub	fp, #32
0d798     09 15 62 FC | 	wrlong	arg02, arg01
0d79c     80 00 90 FD | 	jmp	#LR__1183
0d7a0                 | LR__1182
0d7a0     37 00 00 FF 
0d7a4     10 E4 05 F1 | 	add	objptr, ##28176
0d7a8     F2 1E 02 FB | 	rdlong	local01, objptr
0d7ac     37 00 00 FF 
0d7b0     10 E4 85 F1 | 	sub	objptr, ##28176
0d7b4     0C 4E 05 F1 | 	add	fp, #12
0d7b8     A7 24 02 FB | 	rdlong	local04, fp
0d7bc     06 24 66 F0 | 	shl	local04, #6
0d7c0     12 1F 02 F1 | 	add	local01, local04
0d7c4     18 1E 06 F1 | 	add	local01, #24
0d7c8     18 4E 05 F1 | 	add	fp, #24
0d7cc     A7 14 02 FB | 	rdlong	arg02, fp
0d7d0     24 4E 85 F1 | 	sub	fp, #36
0d7d4     3E 2C 25 FF 
0d7d8     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d7dc     64 6D B1 FD | 	call	#__system___float_div
0d7e0     FD 12 02 F6 | 	mov	arg01, result1
0d7e4     01 14 06 F6 | 	mov	arg02, #1
0d7e8     1C 70 B1 FD | 	call	#__system___float_tointeger
0d7ec     0F FB 51 FC | 	wrword	result1, local01
0d7f0     37 00 00 FF 
0d7f4     10 E4 05 F1 | 	add	objptr, ##28176
0d7f8     F2 12 02 FB | 	rdlong	arg01, objptr
0d7fc     37 00 00 FF 
0d800     10 E4 85 F1 | 	sub	objptr, ##28176
0d804     0C 4E 05 F1 | 	add	fp, #12
0d808     A7 24 02 FB | 	rdlong	local04, fp
0d80c     0C 4E 85 F1 | 	sub	fp, #12
0d810     06 24 66 F0 | 	shl	local04, #6
0d814     12 13 02 F1 | 	add	arg01, local04
0d818     1A 12 06 F1 | 	add	arg01, #26
0d81c     09 01 5A FC | 	wrword	#256, arg01
0d820                 | LR__1183
0d820     A7 F0 03 F6 | 	mov	ptra, fp
0d824     B2 00 A0 FD | 	call	#popregs_
0d828                 | _do_changefreq_ret
0d828     2D 00 64 FD | 	ret
0d82c                 | 
0d82c                 | ' 
0d82c                 | ' '-------------------- changepan
0d82c                 | ' 
0d82c                 | ' sub do_changepan
0d82c                 | _do_changepan
0d82c     01 4A 05 F6 | 	mov	COUNT_, #1
0d830     A8 00 A0 FD | 	call	#pushregs_
0d834     14 F0 07 F1 | 	add	ptra, #20
0d838     9C DF BF FD | 	call	#_pop
0d83c     A7 FA 61 FC | 	wrlong	result1, fp
0d840     04 4E 05 F1 | 	add	fp, #4
0d844     A7 FC 61 FC | 	wrlong	result2, fp
0d848     04 4E 05 F1 | 	add	fp, #4
0d84c     A7 FE 61 FC | 	wrlong	result3, fp
0d850     08 4E 85 F1 | 	sub	fp, #8
0d854     00 00 23 FF 
0d858     00 1E 06 F6 | 	mov	local01, ##1174405120
0d85c     A7 12 02 F6 | 	mov	arg01, fp
0d860     14 E2 BF FD | 	call	#_converttofloat
0d864     FD 14 02 F6 | 	mov	arg02, result1
0d868     0F 13 02 F6 | 	mov	arg01, local01
0d86c     D0 6A B1 FD | 	call	#__system___float_mul
0d870     FD 12 02 F6 | 	mov	arg01, result1
0d874     01 14 06 F6 | 	mov	arg02, #1
0d878     8C 6F B1 FD | 	call	#__system___float_tointeger
0d87c     0D 1E C6 F9 | 	decod	local01, #13
0d880     FD 1E 02 F1 | 	add	local01, result1
0d884     10 4E 05 F1 | 	add	fp, #16
0d888     A7 1E 62 FC | 	wrlong	local01, fp
0d88c                 | ' 
0d88c                 | ' t1=pop()
0d88c                 | ' pan=8192+round(8192*converttofloat(t1)) 
0d88c                 | ' if pan<0 then pan=0
0d88c     10 4E 85 F1 | 	sub	fp, #16
0d890     00 1E 56 F2 | 	cmps	local01, #0 wc
0d894     10 4E 05 C1 |  if_b	add	fp, #16
0d898     A7 00 68 CC |  if_b	wrlong	#0, fp
0d89c     10 4E 85 C1 |  if_b	sub	fp, #16
0d8a0                 | ' if pan>16384 then pan=16384
0d8a0     10 4E 05 F1 | 	add	fp, #16
0d8a4     A7 1E 02 FB | 	rdlong	local01, fp
0d8a8     10 4E 85 F1 | 	sub	fp, #16
0d8ac     20 00 00 FF 
0d8b0     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0d8b4     10 4E 05 31 |  if_ae	add	fp, #16
0d8b8     20 00 80 3F 
0d8bc     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0d8c0     10 4E 85 31 |  if_ae	sub	fp, #16
0d8c4     10 DF BF FD | 	call	#_pop
0d8c8     FF 1E 02 F6 | 	mov	local01, result3
0d8cc     A7 FA 61 FC | 	wrlong	result1, fp
0d8d0     04 4E 05 F1 | 	add	fp, #4
0d8d4     A7 FC 61 FC | 	wrlong	result2, fp
0d8d8     04 4E 05 F1 | 	add	fp, #4
0d8dc     A7 1E 62 FC | 	wrlong	local01, fp
0d8e0     08 4E 85 F1 | 	sub	fp, #8
0d8e4     A7 12 02 F6 | 	mov	arg01, fp
0d8e8     D0 E0 BF FD | 	call	#_converttoint
0d8ec     FD 1E 52 F6 | 	abs	local01, result1 wc
0d8f0     07 1E 06 F5 | 	and	local01, #7
0d8f4     0F 1F 82 F6 | 	negc	local01, local01
0d8f8     0C 4E 05 F1 | 	add	fp, #12
0d8fc     A7 1E 62 FC | 	wrlong	local01, fp
0d900     37 00 00 FF 
0d904     10 E4 05 F1 | 	add	objptr, ##28176
0d908     F2 12 02 FB | 	rdlong	arg01, objptr
0d90c     37 00 00 FF 
0d910     10 E4 85 F1 | 	sub	objptr, ##28176
0d914     06 1E 66 F0 | 	shl	local01, #6
0d918     0F 13 02 F1 | 	add	arg01, local01
0d91c     16 12 06 F1 | 	add	arg01, #22
0d920     04 4E 05 F1 | 	add	fp, #4
0d924     A7 14 02 FB | 	rdlong	arg02, fp
0d928     10 4E 85 F1 | 	sub	fp, #16
0d92c     09 15 52 FC | 	wrword	arg02, arg01
0d930     A7 F0 03 F6 | 	mov	ptra, fp
0d934     B2 00 A0 FD | 	call	#popregs_
0d938                 | _do_changepan_ret
0d938     2D 00 64 FD | 	ret
0d93c                 | 
0d93c                 | ' 
0d93c                 | ' '-------------------- changevol
0d93c                 | ' 
0d93c                 | ' sub do_changevol
0d93c                 | _do_changevol
0d93c     00 4A 05 F6 | 	mov	COUNT_, #0
0d940     A8 00 A0 FD | 	call	#pushregs_
0d944     14 F0 07 F1 | 	add	ptra, #20
0d948     8C DE BF FD | 	call	#_pop
0d94c     FF 14 02 F6 | 	mov	arg02, result3
0d950     A7 FA 61 FC | 	wrlong	result1, fp
0d954     04 4E 05 F1 | 	add	fp, #4
0d958     A7 FC 61 FC | 	wrlong	result2, fp
0d95c     04 4E 05 F1 | 	add	fp, #4
0d960     A7 14 62 FC | 	wrlong	arg02, fp
0d964     08 4E 85 F1 | 	sub	fp, #8
0d968     A7 12 02 F6 | 	mov	arg01, fp
0d96c     08 E1 BF FD | 	call	#_converttofloat
0d970     FD 12 02 F6 | 	mov	arg01, result1
0d974     00 3D 22 FF 
0d978     00 14 06 F6 | 	mov	arg02, ##1148846080
0d97c     C0 69 B1 FD | 	call	#__system___float_mul
0d980     FD 12 02 F6 | 	mov	arg01, result1
0d984     01 14 06 F6 | 	mov	arg02, #1
0d988     7C 6E B1 FD | 	call	#__system___float_tointeger
0d98c     FD 14 52 F6 | 	abs	arg02, result1 wc
0d990     0D 14 46 F7 | 	zerox	arg02, #13
0d994     0A 15 82 F6 | 	negc	arg02, arg02
0d998     10 4E 05 F1 | 	add	fp, #16
0d99c     A7 14 62 FC | 	wrlong	arg02, fp
0d9a0     10 4E 85 F1 | 	sub	fp, #16
0d9a4     30 DE BF FD | 	call	#_pop
0d9a8     FF 14 02 F6 | 	mov	arg02, result3
0d9ac     A7 FA 61 FC | 	wrlong	result1, fp
0d9b0     04 4E 05 F1 | 	add	fp, #4
0d9b4     A7 FC 61 FC | 	wrlong	result2, fp
0d9b8     04 4E 05 F1 | 	add	fp, #4
0d9bc     A7 14 62 FC | 	wrlong	arg02, fp
0d9c0     08 4E 85 F1 | 	sub	fp, #8
0d9c4     A7 12 02 F6 | 	mov	arg01, fp
0d9c8     F0 DF BF FD | 	call	#_converttoint
0d9cc     FD 14 52 F6 | 	abs	arg02, result1 wc
0d9d0     07 14 06 F5 | 	and	arg02, #7
0d9d4     0A 15 82 F6 | 	negc	arg02, arg02
0d9d8     0C 4E 05 F1 | 	add	fp, #12
0d9dc     A7 14 62 FC | 	wrlong	arg02, fp
0d9e0     37 00 00 FF 
0d9e4     10 E4 05 F1 | 	add	objptr, ##28176
0d9e8     F2 12 02 FB | 	rdlong	arg01, objptr
0d9ec     37 00 00 FF 
0d9f0     10 E4 85 F1 | 	sub	objptr, ##28176
0d9f4     06 14 66 F0 | 	shl	arg02, #6
0d9f8     0A 13 02 F1 | 	add	arg01, arg02
0d9fc     14 12 06 F1 | 	add	arg01, #20
0da00     04 4E 05 F1 | 	add	fp, #4
0da04     A7 14 02 FB | 	rdlong	arg02, fp
0da08     10 4E 85 F1 | 	sub	fp, #16
0da0c     09 15 52 FC | 	wrword	arg02, arg01
0da10     A7 F0 03 F6 | 	mov	ptra, fp
0da14     B2 00 A0 FD | 	call	#popregs_
0da18                 | _do_changevol_ret
0da18     2D 00 64 FD | 	ret
0da1c                 | 
0da1c                 | ' 
0da1c                 | ' '-------------------- changewav
0da1c                 | ' 
0da1c                 | ' sub do_changewav
0da1c                 | _do_changewav
0da1c     00 4A 05 F6 | 	mov	COUNT_, #0
0da20     A8 00 A0 FD | 	call	#pushregs_
0da24     14 F0 07 F1 | 	add	ptra, #20
0da28     AC DD BF FD | 	call	#_pop
0da2c     FF 14 02 F6 | 	mov	arg02, result3
0da30     A7 FA 61 FC | 	wrlong	result1, fp
0da34     04 4E 05 F1 | 	add	fp, #4
0da38     A7 FC 61 FC | 	wrlong	result2, fp
0da3c     04 4E 05 F1 | 	add	fp, #4
0da40     A7 14 62 FC | 	wrlong	arg02, fp
0da44     08 4E 85 F1 | 	sub	fp, #8
0da48     A7 12 02 F6 | 	mov	arg01, fp
0da4c     6C DF BF FD | 	call	#_converttoint
0da50     10 4E 05 F1 | 	add	fp, #16
0da54     A7 FA 61 FC | 	wrlong	result1, fp
0da58                 | ' 
0da58                 | ' t1=pop()
0da58                 | ' wave=converttoint(t1)
0da58                 | ' if wave<0 then wave=0
0da58     FD 14 02 F6 | 	mov	arg02, result1
0da5c     10 4E 85 F1 | 	sub	fp, #16
0da60     00 14 56 F2 | 	cmps	arg02, #0 wc
0da64     10 4E 05 C1 |  if_b	add	fp, #16
0da68     A7 00 68 CC |  if_b	wrlong	#0, fp
0da6c     10 4E 85 C1 |  if_b	sub	fp, #16
0da70     64 DD BF FD | 	call	#_pop
0da74     FF 14 02 F6 | 	mov	arg02, result3
0da78     A7 FA 61 FC | 	wrlong	result1, fp
0da7c     04 4E 05 F1 | 	add	fp, #4
0da80     A7 FC 61 FC | 	wrlong	result2, fp
0da84     04 4E 05 F1 | 	add	fp, #4
0da88     A7 14 62 FC | 	wrlong	arg02, fp
0da8c     08 4E 85 F1 | 	sub	fp, #8
0da90     A7 12 02 F6 | 	mov	arg01, fp
0da94     24 DF BF FD | 	call	#_converttoint
0da98     FD 14 52 F6 | 	abs	arg02, result1 wc
0da9c     07 14 06 F5 | 	and	arg02, #7
0daa0     0A 15 82 F6 | 	negc	arg02, arg02
0daa4     0C 4E 05 F1 | 	add	fp, #12
0daa8     A7 14 62 FC | 	wrlong	arg02, fp
0daac                 | ' if wave <32 then 
0daac     04 4E 05 F1 | 	add	fp, #4
0dab0     A7 14 02 FB | 	rdlong	arg02, fp
0dab4     10 4E 85 F1 | 	sub	fp, #16
0dab8     20 14 56 F2 | 	cmps	arg02, #32 wc
0dabc     48 00 90 3D |  if_ae	jmp	#LR__1190
0dac0     37 00 00 FF 
0dac4     10 E4 05 F1 | 	add	objptr, ##28176
0dac8     F2 12 02 FB | 	rdlong	arg01, objptr
0dacc     37 00 00 FF 
0dad0     10 E4 85 F1 | 	sub	objptr, ##28176
0dad4     0C 4E 05 F1 | 	add	fp, #12
0dad8     A7 14 02 FB | 	rdlong	arg02, fp
0dadc     06 14 66 F0 | 	shl	arg02, #6
0dae0     0A 13 02 F1 | 	add	arg01, arg02
0dae4     08 12 06 F1 | 	add	arg01, #8
0dae8     04 4E 05 F1 | 	add	fp, #4
0daec     A7 14 02 FB | 	rdlong	arg02, fp
0daf0     10 4E 85 F1 | 	sub	fp, #16
0daf4     0B 14 66 F0 | 	shl	arg02, #11
0daf8     00 00 40 FF 
0dafc     00 14 06 F1 | 	add	arg02, ##-2147483648
0db00     09 15 62 FC | 	wrlong	arg02, arg01
0db04     34 00 90 FD | 	jmp	#LR__1191
0db08                 | LR__1190
0db08     37 00 00 FF 
0db0c     10 E4 05 F1 | 	add	objptr, ##28176
0db10     F2 12 02 FB | 	rdlong	arg01, objptr
0db14     37 00 00 FF 
0db18     10 E4 85 F1 | 	sub	objptr, ##28176
0db1c     0C 4E 05 F1 | 	add	fp, #12
0db20     A7 14 02 FB | 	rdlong	arg02, fp
0db24     0C 4E 85 F1 | 	sub	fp, #12
0db28     06 14 66 F0 | 	shl	arg02, #6
0db2c     0A 13 02 F1 | 	add	arg01, arg02
0db30     08 12 06 F1 | 	add	arg01, #8
0db34     00 00 C4 FF 
0db38     09 01 68 FC | 	wrlong	##-2013265920, arg01
0db3c                 | LR__1191
0db3c     A7 F0 03 F6 | 	mov	ptra, fp
0db40     B2 00 A0 FD | 	call	#popregs_
0db44                 | _do_changewav_ret
0db44     2D 00 64 FD | 	ret
0db48                 | 
0db48                 | ' 
0db48                 | ' '-------------------- chr$
0db48                 | ' 
0db48                 | ' sub do_chr
0db48                 | _do_chr
0db48     01 4A 05 F6 | 	mov	COUNT_, #1
0db4c     A8 00 A0 FD | 	call	#pushregs_
0db50     14 F0 07 F1 | 	add	ptra, #20
0db54     4A 00 00 FF 
0db58     80 E4 05 F1 | 	add	objptr, ##38016
0db5c     F2 1E 02 FB | 	rdlong	local01, objptr
0db60     0F 17 02 F6 | 	mov	arg03, local01
0db64     01 16 66 F0 | 	shl	arg03, #1
0db68     0F 17 02 F1 | 	add	arg03, local01
0db6c     02 16 66 F0 | 	shl	arg03, #2
0db70     03 00 00 FF 
0db74     04 E4 85 F1 | 	sub	objptr, ##1540
0db78     F2 16 02 F1 | 	add	arg03, objptr
0db7c     0B 17 02 FB | 	rdlong	arg03, arg03
0db80     0C 4E 05 F1 | 	add	fp, #12
0db84     A7 16 62 FC | 	wrlong	arg03, fp
0db88                 | ' 
0db88                 | ' numpar=compiledline(lineptr_e).result.uresult
0db88                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0db88     0C 4E 85 F1 | 	sub	fp, #12
0db8c     02 16 16 F2 | 	cmp	arg03, #2 wc
0db90     47 00 00 FF 
0db94     7C E4 85 F1 | 	sub	objptr, ##36476
0db98     0C 4E 05 C1 |  if_b	add	fp, #12
0db9c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0dba0     0C 4E 85 C1 |  if_b	sub	fp, #12
0dba4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0dba8     00 12 06 F6 | 	mov	arg01, #0
0dbac     00 97 B1 FD | 	call	#__system___getiolock_0568
0dbb0     FD 12 02 F6 | 	mov	arg01, result1
0dbb4     CC 39 B1 FD | 	call	#__system___lockmem
0dbb8     8C 01 00 FF 
0dbbc     40 14 06 F6 | 	mov	arg02, ##@LR__5533
0dbc0     00 12 06 F6 | 	mov	arg01, #0
0dbc4     00 16 06 F6 | 	mov	arg03, #0
0dbc8     AC 46 B1 FD | 	call	#__system___basic_print_string
0dbcc     00 12 06 F6 | 	mov	arg01, #0
0dbd0     DC 96 B1 FD | 	call	#__system___getiolock_0568
0dbd4     FD 00 68 FC | 	wrlong	#0, result1
0dbd8     27 12 06 F6 | 	mov	arg01, #39
0dbdc     00 14 06 F6 | 	mov	arg02, #0
0dbe0     E0 03 B1 FD | 	call	#_printerror
0dbe4     54 00 90 FD | 	jmp	#LR__1201
0dbe8                 | LR__1200
0dbe8     EC DB BF FD | 	call	#_pop
0dbec     FF 1E 02 F6 | 	mov	local01, result3
0dbf0     A7 FA 61 FC | 	wrlong	result1, fp
0dbf4     04 4E 05 F1 | 	add	fp, #4
0dbf8     A7 FC 61 FC | 	wrlong	result2, fp
0dbfc     04 4E 05 F1 | 	add	fp, #4
0dc00     A7 1E 62 FC | 	wrlong	local01, fp
0dc04     08 4E 85 F1 | 	sub	fp, #8
0dc08     A7 12 02 F6 | 	mov	arg01, fp
0dc0c     AC DD BF FD | 	call	#_converttoint
0dc10     10 4E 05 F1 | 	add	fp, #16
0dc14     A7 FA 61 FC | 	wrlong	result1, fp
0dc18     FD 12 02 F6 | 	mov	arg01, result1
0dc1c     10 4E 85 F1 | 	sub	fp, #16
0dc20     A0 5B B1 FD | 	call	#__system__Chr_S
0dc24     A7 FA 61 FC | 	wrlong	result1, fp
0dc28     08 4E 05 F1 | 	add	fp, #8
0dc2c     A7 3E 68 FC | 	wrlong	#31, fp
0dc30     08 4E 85 F1 | 	sub	fp, #8
0dc34     A7 12 02 F6 | 	mov	arg01, fp
0dc38     34 DC BF FD | 	call	#_push
0dc3c                 | LR__1201
0dc3c     A7 F0 03 F6 | 	mov	ptra, fp
0dc40     B2 00 A0 FD | 	call	#popregs_
0dc44                 | _do_chr_ret
0dc44     2D 00 64 FD | 	ret
0dc48                 | 
0dc48                 | ' 
0dc48                 | ' '-------------------- circle
0dc48                 | ' 
0dc48                 | ' sub do_circle
0dc48                 | _do_circle
0dc48     02 4A 05 F6 | 	mov	COUNT_, #2
0dc4c     A8 00 A0 FD | 	call	#pushregs_
0dc50     24 F0 07 F1 | 	add	ptra, #36
0dc54     80 DB BF FD | 	call	#_pop
0dc58     FD 18 02 F6 | 	mov	arg04, result1
0dc5c     FE 16 02 F6 | 	mov	arg03, result2
0dc60     FF 14 02 F6 | 	mov	arg02, result3
0dc64     18 4E 05 F1 | 	add	fp, #24
0dc68     A7 18 62 FC | 	wrlong	arg04, fp
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 16 62 FC | 	wrlong	arg03, fp
0dc74     04 4E 05 F1 | 	add	fp, #4
0dc78     A7 14 62 FC | 	wrlong	arg02, fp
0dc7c     20 4E 85 F1 | 	sub	fp, #32
0dc80     54 DB BF FD | 	call	#_pop
0dc84     FD 18 02 F6 | 	mov	arg04, result1
0dc88     FE 16 02 F6 | 	mov	arg03, result2
0dc8c     FF 1E 02 F6 | 	mov	local01, result3
0dc90     0C 4E 05 F1 | 	add	fp, #12
0dc94     A7 18 62 FC | 	wrlong	arg04, fp
0dc98     04 4E 05 F1 | 	add	fp, #4
0dc9c     A7 16 62 FC | 	wrlong	arg03, fp
0dca0     04 4E 05 F1 | 	add	fp, #4
0dca4     A7 1E 62 FC | 	wrlong	local01, fp
0dca8     14 4E 85 F1 | 	sub	fp, #20
0dcac     28 DB BF FD | 	call	#_pop
0dcb0     A7 FA 61 FC | 	wrlong	result1, fp
0dcb4     04 4E 05 F1 | 	add	fp, #4
0dcb8     A7 FC 61 FC | 	wrlong	result2, fp
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 FE 61 FC | 	wrlong	result3, fp
0dcc4                 | ' 
0dcc4                 | ' t3=pop()
0dcc4                 | ' t2=pop()
0dcc4                 | ' t1=pop()
0dcc4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0dcc4     FF 18 02 F6 | 	mov	arg04, result3
0dcc8     08 4E 85 F1 | 	sub	fp, #8
0dccc     1C 18 0E F2 | 	cmp	arg04, #28 wz
0dcd0     08 4E 05 51 |  if_ne	add	fp, #8
0dcd4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dcd8     08 4E 85 51 |  if_ne	sub	fp, #8
0dcdc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0dce0     7C 00 90 5D |  if_ne	jmp	#LR__1210
0dce4     14 4E 05 F1 | 	add	fp, #20
0dce8     A7 1E 02 FB | 	rdlong	local01, fp
0dcec     14 4E 85 F1 | 	sub	fp, #20
0dcf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dcf4     14 4E 05 51 |  if_ne	add	fp, #20
0dcf8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dcfc     14 4E 85 51 |  if_ne	sub	fp, #20
0dd00     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dd04     58 00 90 5D |  if_ne	jmp	#LR__1210
0dd08     20 4E 05 F1 | 	add	fp, #32
0dd0c     A7 1E 02 FB | 	rdlong	local01, fp
0dd10     20 4E 85 F1 | 	sub	fp, #32
0dd14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd18     20 4E 05 51 |  if_ne	add	fp, #32
0dd1c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dd20     20 4E 85 51 |  if_ne	sub	fp, #32
0dd24     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dd28     34 00 90 5D |  if_ne	jmp	#LR__1210
0dd2c     A7 12 02 FB | 	rdlong	arg01, fp
0dd30     0C 4E 05 F1 | 	add	fp, #12
0dd34     A7 14 02 FB | 	rdlong	arg02, fp
0dd38     0C 4E 05 F1 | 	add	fp, #12
0dd3c     A7 16 02 FB | 	rdlong	arg03, fp
0dd40     18 4E 85 F1 | 	sub	fp, #24
0dd44     37 00 00 FF 
0dd48     28 E4 05 F1 | 	add	objptr, ##28200
0dd4c     F2 18 02 FB | 	rdlong	arg04, objptr
0dd50     37 00 00 FF 
0dd54     28 E4 85 F1 | 	sub	objptr, ##28200
0dd58     B8 1A B1 FD | 	call	#_hg010b_spin2_circle
0dd5c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0dd5c     54 00 90 FD | 	jmp	#LR__1211
0dd60                 | LR__1210
0dd60     A7 12 02 F6 | 	mov	arg01, fp
0dd64     54 DC BF FD | 	call	#_converttoint
0dd68     FD 1E 02 F6 | 	mov	local01, result1
0dd6c     0C 4E 05 F1 | 	add	fp, #12
0dd70     A7 12 02 F6 | 	mov	arg01, fp
0dd74     0C 4E 85 F1 | 	sub	fp, #12
0dd78     40 DC BF FD | 	call	#_converttoint
0dd7c     FD 20 02 F6 | 	mov	local02, result1
0dd80     18 4E 05 F1 | 	add	fp, #24
0dd84     A7 12 02 F6 | 	mov	arg01, fp
0dd88     18 4E 85 F1 | 	sub	fp, #24
0dd8c     2C DC BF FD | 	call	#_converttoint
0dd90     FD 16 02 F6 | 	mov	arg03, result1
0dd94     37 00 00 FF 
0dd98     28 E4 05 F1 | 	add	objptr, ##28200
0dd9c     F2 18 02 FB | 	rdlong	arg04, objptr
0dda0     37 00 00 FF 
0dda4     28 E4 85 F1 | 	sub	objptr, ##28200
0dda8     0F 13 02 F6 | 	mov	arg01, local01
0ddac     10 15 02 F6 | 	mov	arg02, local02
0ddb0     60 1A B1 FD | 	call	#_hg010b_spin2_circle
0ddb4                 | LR__1211
0ddb4     A7 F0 03 F6 | 	mov	ptra, fp
0ddb8     B2 00 A0 FD | 	call	#popregs_
0ddbc                 | _do_circle_ret
0ddbc     2D 00 64 FD | 	ret
0ddc0                 | 
0ddc0                 | ' 
0ddc0                 | ' '-------------------- click
0ddc0                 | ' 
0ddc0                 | ' sub do_click
0ddc0                 | _do_click
0ddc0     14 DA BF FD | 	call	#_pop
0ddc4     00 FA 4D F2 | 	cmps	result1, #0 wz
0ddc8                 | ' 
0ddc8                 | ' t1=pop()
0ddc8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0ddc8     50 00 00 AF 
0ddcc     14 E5 05 A1 |  if_e	add	objptr, ##41236
0ddd0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ddd4     50 00 00 FF 
0ddd8     14 E5 C5 F3 | 	sumz	objptr, ##41236
0dddc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0dde0     50 00 00 5F 
0dde4     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0dde8                 | _do_click_ret
0dde8     2D 00 64 FD | 	ret
0ddec                 | 
0ddec                 | ' 
0ddec                 | ' '-------------------- close
0ddec                 | ' 
0ddec                 | ' sub do_close
0ddec                 | _do_close
0ddec     03 4A 05 F6 | 	mov	COUNT_, #3
0ddf0     A8 00 A0 FD | 	call	#pushregs_
0ddf4     E0 D9 BF FD | 	call	#_pop
0ddf8     FD 1E 02 F6 | 	mov	local01, result1
0ddfc     FF 16 02 F6 | 	mov	arg03, result3
0de00     FE 20 02 F6 | 	mov	local02, result2
0de04     0B 23 02 F6 | 	mov	local03, arg03
0de08                 | ' 
0de08                 | ' numpar=compiledline(lineptr_e).result.uresult
0de08                 | ' t1=pop()
0de08                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0de08     2C 22 0E F2 | 	cmp	local03, #44 wz
0de0c     44 00 90 AD |  if_e	jmp	#LR__1220
0de10     00 12 06 F6 | 	mov	arg01, #0
0de14     98 94 B1 FD | 	call	#__system___getiolock_0568
0de18     FD 12 02 F6 | 	mov	arg01, result1
0de1c     64 37 B1 FD | 	call	#__system___lockmem
0de20     8C 01 00 FF 
0de24     47 14 06 F6 | 	mov	arg02, ##@LR__5534
0de28     00 12 06 F6 | 	mov	arg01, #0
0de2c     00 16 06 F6 | 	mov	arg03, #0
0de30     44 44 B1 FD | 	call	#__system___basic_print_string
0de34     00 12 06 F6 | 	mov	arg01, #0
0de38     0A 14 06 F6 | 	mov	arg02, #10
0de3c     00 16 06 F6 | 	mov	arg03, #0
0de40     DC 43 B1 FD | 	call	#__system___basic_print_char
0de44     00 12 06 F6 | 	mov	arg01, #0
0de48     64 94 B1 FD | 	call	#__system___getiolock_0568
0de4c     FD 00 68 FC | 	wrlong	#0, result1
0de50     08 00 90 FD | 	jmp	#LR__1221
0de54                 | LR__1220
0de54                 | ' channel  = t1.result.iresult
0de54                 | ' close #channel
0de54     0F 13 02 F6 | 	mov	arg01, local01
0de58     C4 89 B1 FD | 	call	#__system__close
0de5c                 | LR__1221
0de5c     A7 F0 03 F6 | 	mov	ptra, fp
0de60     B2 00 A0 FD | 	call	#popregs_
0de64                 | _do_close_ret
0de64     2D 00 64 FD | 	ret
0de68                 | 
0de68                 | ' 
0de68                 | ' '-------------------- cls
0de68                 | ' 
0de68                 | ' sub do_cls
0de68                 | _do_cls
0de68     37 00 00 FF 
0de6c     3C E4 05 F1 | 	add	objptr, ##28220
0de70     F2 12 02 FB | 	rdlong	arg01, objptr
0de74     04 E4 85 F1 | 	sub	objptr, #4
0de78     F2 14 02 FB | 	rdlong	arg02, objptr
0de7c     37 00 00 FF 
0de80     38 E4 85 F1 | 	sub	objptr, ##28216
0de84     20 1E B1 FD | 	call	#_hg010b_spin2_cls
0de88     37 00 00 FF 
0de8c     3C E4 05 F1 | 	add	objptr, ##28220
0de90     F2 14 02 FB | 	rdlong	arg02, objptr
0de94     14 E4 85 F1 | 	sub	objptr, #20
0de98     F2 14 62 FC | 	wrlong	arg02, objptr
0de9c     37 00 00 FF 
0dea0     28 E4 85 F1 | 	sub	objptr, ##28200
0dea4                 | _do_cls_ret
0dea4     2D 00 64 FD | 	ret
0dea8                 | 
0dea8                 | ' 
0dea8                 | ' '-------------------- color
0dea8                 | ' 
0dea8                 | ' sub do_color
0dea8                 | _do_color
0dea8     03 4A 05 F6 | 	mov	COUNT_, #3
0deac     A8 00 A0 FD | 	call	#pushregs_
0deb0     24 D9 BF FD | 	call	#_pop
0deb4     FD 1E 02 F6 | 	mov	local01, result1
0deb8     FE 20 02 F6 | 	mov	local02, result2
0debc     FF 22 02 F6 | 	mov	local03, result3
0dec0     37 00 00 FF 
0dec4     28 E4 05 F1 | 	add	objptr, ##28200
0dec8     F2 1E 62 FC | 	wrlong	local01, objptr
0decc     37 00 00 FF 
0ded0     28 E4 85 F1 | 	sub	objptr, ##28200
0ded4     A7 F0 03 F6 | 	mov	ptra, fp
0ded8     B2 00 A0 FD | 	call	#popregs_
0dedc                 | _do_color_ret
0dedc     2D 00 64 FD | 	ret
0dee0                 | 
0dee0                 | ' 
0dee0                 | ' '-------------------- cos
0dee0                 | ' 
0dee0                 | ' sub do_cos
0dee0                 | _do_cos
0dee0     01 4A 05 F6 | 	mov	COUNT_, #1
0dee4     A8 00 A0 FD | 	call	#pushregs_
0dee8     10 F0 07 F1 | 	add	ptra, #16
0deec     4A 00 00 FF 
0def0     80 E4 05 F1 | 	add	objptr, ##38016
0def4     F2 1E 02 FB | 	rdlong	local01, objptr
0def8     0F 17 02 F6 | 	mov	arg03, local01
0defc     01 16 66 F0 | 	shl	arg03, #1
0df00     0F 17 02 F1 | 	add	arg03, local01
0df04     02 16 66 F0 | 	shl	arg03, #2
0df08     03 00 00 FF 
0df0c     04 E4 85 F1 | 	sub	objptr, ##1540
0df10     F2 16 02 F1 | 	add	arg03, objptr
0df14     0B 17 02 FB | 	rdlong	arg03, arg03
0df18     0C 4E 05 F1 | 	add	fp, #12
0df1c     A7 16 62 FC | 	wrlong	arg03, fp
0df20                 | ' 
0df20                 | ' numpar=compiledline(lineptr_e).result.uresult
0df20                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0df20     0C 4E 85 F1 | 	sub	fp, #12
0df24     02 16 16 F2 | 	cmp	arg03, #2 wc
0df28     47 00 00 FF 
0df2c     7C E4 85 F1 | 	sub	objptr, ##36476
0df30     0C 4E 05 C1 |  if_b	add	fp, #12
0df34     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0df38     0C 4E 85 C1 |  if_b	sub	fp, #12
0df3c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1230
0df40     00 12 06 F6 | 	mov	arg01, #0
0df44     68 93 B1 FD | 	call	#__system___getiolock_0568
0df48     FD 12 02 F6 | 	mov	arg01, result1
0df4c     34 36 B1 FD | 	call	#__system___lockmem
0df50     8C 01 00 FF 
0df54     59 14 06 F6 | 	mov	arg02, ##@LR__5535
0df58     00 12 06 F6 | 	mov	arg01, #0
0df5c     00 16 06 F6 | 	mov	arg03, #0
0df60     14 43 B1 FD | 	call	#__system___basic_print_string
0df64     00 12 06 F6 | 	mov	arg01, #0
0df68     44 93 B1 FD | 	call	#__system___getiolock_0568
0df6c     FD 00 68 FC | 	wrlong	#0, result1
0df70     27 12 06 F6 | 	mov	arg01, #39
0df74     00 14 06 F6 | 	mov	arg02, #0
0df78     48 00 B1 FD | 	call	#_printerror
0df7c     78 00 90 FD | 	jmp	#LR__1231
0df80                 | LR__1230
0df80     54 D8 BF FD | 	call	#_pop
0df84     A7 FA 61 FC | 	wrlong	result1, fp
0df88     04 4E 05 F1 | 	add	fp, #4
0df8c     A7 FC 61 FC | 	wrlong	result2, fp
0df90     04 4E 05 F1 | 	add	fp, #4
0df94     A7 FE 61 FC | 	wrlong	result3, fp
0df98     08 4E 85 F1 | 	sub	fp, #8
0df9c     51 00 00 FF 
0dfa0     BC E5 05 F1 | 	add	objptr, ##41916
0dfa4     F2 1E 02 FB | 	rdlong	local01, objptr
0dfa8     51 00 00 FF 
0dfac     BC E5 85 F1 | 	sub	objptr, ##41916
0dfb0     A7 12 02 F6 | 	mov	arg01, fp
0dfb4     C0 DA BF FD | 	call	#_converttofloat
0dfb8     FD 14 02 F6 | 	mov	arg02, result1
0dfbc     0F 13 02 F6 | 	mov	arg01, local01
0dfc0     7C 63 B1 FD | 	call	#__system___float_mul
0dfc4     FD 14 02 F6 | 	mov	arg02, result1
0dfc8     87 E4 1F FF 
0dfcc     DB 13 06 F6 | 	mov	arg01, ##1070141403
0dfd0     1F 14 E6 F4 | 	bitnot	arg02, #31
0dfd4     98 5F B1 FD | 	call	#__system___float_add
0dfd8     FD 12 02 F6 | 	mov	arg01, result1
0dfdc     C0 6C B1 FD | 	call	#__system____builtin_sinf
0dfe0     A7 FA 61 FC | 	wrlong	result1, fp
0dfe4     08 4E 05 F1 | 	add	fp, #8
0dfe8     A7 3C 68 FC | 	wrlong	#30, fp
0dfec     08 4E 85 F1 | 	sub	fp, #8
0dff0     A7 12 02 F6 | 	mov	arg01, fp
0dff4     78 D8 BF FD | 	call	#_push
0dff8                 | LR__1231
0dff8     A7 F0 03 F6 | 	mov	ptra, fp
0dffc     B2 00 A0 FD | 	call	#popregs_
0e000                 | _do_cos_ret
0e000     2D 00 64 FD | 	ret
0e004                 | 
0e004                 | ' 
0e004                 | ' '-------------------- cursor
0e004                 | ' 
0e004                 | ' sub do_cursor
0e004                 | _do_cursor
0e004     D0 D7 BF FD | 	call	#_pop
0e008     00 FA 4D F2 | 	cmps	result1, #0 wz
0e00c                 | ' t1=pop()
0e00c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0e00c     14 00 90 5D |  if_ne	jmp	#LR__1240
0e010     11 12 06 F6 | 	mov	arg01, #17
0e014     00 14 06 F6 | 	mov	arg02, #0
0e018     00 16 06 F6 | 	mov	arg03, #0
0e01c     68 0F B1 FD | 	call	#_hg010b_spin2_setspritesize
0e020     10 00 90 FD | 	jmp	#LR__1241
0e024                 | LR__1240
0e024     11 12 06 F6 | 	mov	arg01, #17
0e028     08 14 06 F6 | 	mov	arg02, #8
0e02c     10 16 06 F6 | 	mov	arg03, #16
0e030     54 0F B1 FD | 	call	#_hg010b_spin2_setspritesize
0e034                 | LR__1241
0e034                 | _do_cursor_ret
0e034     2D 00 64 FD | 	ret
0e038                 | 
0e038                 | ' 
0e038                 | ' '-------------------- defenv
0e038                 | ' 
0e038                 | ' sub do_defenv
0e038                 | _do_defenv
0e038     08 4A 05 F6 | 	mov	COUNT_, #8
0e03c     A8 00 A0 FD | 	call	#pushregs_
0e040     58 F0 07 F1 | 	add	ptra, #88
0e044     4A 00 00 FF 
0e048     80 E4 05 F1 | 	add	objptr, ##38016
0e04c     F2 1E 02 FB | 	rdlong	local01, objptr
0e050     0F 1B 02 F6 | 	mov	arg05, local01
0e054     01 1A 66 F0 | 	shl	arg05, #1
0e058     0F 1B 02 F1 | 	add	arg05, local01
0e05c     02 1A 66 F0 | 	shl	arg05, #2
0e060     03 00 00 FF 
0e064     04 E4 85 F1 | 	sub	objptr, ##1540
0e068     F2 1A 02 F1 | 	add	arg05, objptr
0e06c     0D 1B 02 FB | 	rdlong	arg05, arg05
0e070     10 4E 05 F1 | 	add	fp, #16
0e074     A7 1A 62 FC | 	wrlong	arg05, fp
0e078                 | ' 
0e078                 | ' numpar=compiledline(lineptr_e).result.uresult
0e078                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0e078     10 4E 85 F1 | 	sub	fp, #16
0e07c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e080     47 00 00 FF 
0e084     7C E4 85 F1 | 	sub	objptr, ##36476
0e088     10 4E 05 51 |  if_ne	add	fp, #16
0e08c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e090     10 4E 85 51 |  if_ne	sub	fp, #16
0e094     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0e098     8C 0A 90 5D |  if_ne	jmp	#LR__1271
0e09c                 | ' 
0e09c                 | ' if numpar=2 then						' env from .h2 or from a pointer
0e09c     10 4E 05 F1 | 	add	fp, #16
0e0a0     A7 1E 02 FB | 	rdlong	local01, fp
0e0a4     10 4E 85 F1 | 	sub	fp, #16
0e0a8     02 1E 0E F2 | 	cmp	local01, #2 wz
0e0ac     24 04 90 5D |  if_ne	jmp	#LR__1263
0e0b0     24 D7 BF FD | 	call	#_pop
0e0b4     FF 1A 02 F6 | 	mov	arg05, result3
0e0b8     40 4E 05 F1 | 	add	fp, #64
0e0bc     A7 FA 61 FC | 	wrlong	result1, fp
0e0c0     04 4E 05 F1 | 	add	fp, #4
0e0c4     A7 FC 61 FC | 	wrlong	result2, fp
0e0c8     04 4E 05 F1 | 	add	fp, #4
0e0cc     A7 1A 62 FC | 	wrlong	arg05, fp
0e0d0                 | '   t1=pop()
0e0d0                 | '   if t1.result_type=result_string2 then 
0e0d0     48 4E 85 F1 | 	sub	fp, #72
0e0d4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e0d8     20 00 90 5D |  if_ne	jmp	#LR__1250
0e0dc     40 4E 05 F1 | 	add	fp, #64
0e0e0     A7 12 02 FB | 	rdlong	arg01, fp
0e0e4     40 4E 85 F1 | 	sub	fp, #64
0e0e8     64 D8 BF FD | 	call	#_convertstring
0e0ec     4C 4E 05 F1 | 	add	fp, #76
0e0f0     A7 FA 61 FC | 	wrlong	result1, fp
0e0f4     4C 4E 85 F1 | 	sub	fp, #76
0e0f8     58 00 90 FD | 	jmp	#LR__1253
0e0fc                 | LR__1250
0e0fc     48 4E 05 F1 | 	add	fp, #72
0e100     A7 1E 02 FB | 	rdlong	local01, fp
0e104     48 4E 85 F1 | 	sub	fp, #72
0e108     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e10c     18 00 90 5D |  if_ne	jmp	#LR__1251
0e110     40 4E 05 F1 | 	add	fp, #64
0e114     A7 1E 02 FB | 	rdlong	local01, fp
0e118     0C 4E 05 F1 | 	add	fp, #12
0e11c     A7 1E 62 FC | 	wrlong	local01, fp
0e120     4C 4E 85 F1 | 	sub	fp, #76
0e124     2C 00 90 FD | 	jmp	#LR__1252
0e128                 | LR__1251
0e128     8C 01 00 FF 
0e12c     5F 1E 06 F6 | 	mov	local01, ##@LR__5536
0e130     4C 4E 05 F1 | 	add	fp, #76
0e134     A7 1E 62 FC | 	wrlong	local01, fp
0e138     0C 4E 85 F1 | 	sub	fp, #12
0e13c     A7 12 02 F6 | 	mov	arg01, fp
0e140     40 4E 85 F1 | 	sub	fp, #64
0e144     74 D8 BF FD | 	call	#_converttoint
0e148     1C 4E 05 F1 | 	add	fp, #28
0e14c     A7 FA 61 FC | 	wrlong	result1, fp
0e150     1C 4E 85 F1 | 	sub	fp, #28
0e154                 | LR__1252
0e154                 | LR__1253
0e154                 | '   if s1<>"" then 
0e154     4C 4E 05 F1 | 	add	fp, #76
0e158     A7 12 02 FB | 	rdlong	arg01, fp
0e15c     4C 4E 85 F1 | 	sub	fp, #76
0e160     8C 01 00 FF 
0e164     60 14 06 F6 | 	mov	arg02, ##@LR__5537
0e168     40 34 B1 FD | 	call	#__system___string_cmp
0e16c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e170     24 02 90 AD |  if_e	jmp	#LR__1257
0e174     60 D6 BF FD | 	call	#_pop
0e178     FF 1E 02 F6 | 	mov	local01, result3
0e17c     40 4E 05 F1 | 	add	fp, #64
0e180     A7 FA 61 FC | 	wrlong	result1, fp
0e184     04 4E 05 F1 | 	add	fp, #4
0e188     A7 FC 61 FC | 	wrlong	result2, fp
0e18c     04 4E 05 F1 | 	add	fp, #4
0e190     A7 1E 62 FC | 	wrlong	local01, fp
0e194     08 4E 85 F1 | 	sub	fp, #8
0e198     A7 12 02 F6 | 	mov	arg01, fp
0e19c     40 4E 85 F1 | 	sub	fp, #64
0e1a0     18 D8 BF FD | 	call	#_converttoint
0e1a4     18 4E 05 F1 | 	add	fp, #24
0e1a8     A7 FA 61 FC | 	wrlong	result1, fp
0e1ac     18 4E 85 F1 | 	sub	fp, #24
0e1b0                 | '     t1=pop()
0e1b0                 | '     channel=converttoint(t1) 
0e1b0                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0e1b0     09 12 06 F6 | 	mov	arg01, #9
0e1b4     68 86 B1 FD | 	call	#__system__close
0e1b8     09 1E 06 F6 | 	mov	local01, #9
0e1bc     8C 01 00 FF 
0e1c0     61 12 06 F6 | 	mov	arg01, ##@LR__5538
0e1c4     4C 4E 05 F1 | 	add	fp, #76
0e1c8     A7 14 02 FB | 	rdlong	arg02, fp
0e1cc     4C 4E 85 F1 | 	sub	fp, #76
0e1d0     0C 34 B1 FD | 	call	#__system___string_concat
0e1d4     FD 14 02 F6 | 	mov	arg02, result1
0e1d8     0F 13 02 F6 | 	mov	arg01, local01
0e1dc     00 16 06 F6 | 	mov	arg03, #0
0e1e0     A4 3F B1 FD | 	call	#__system___basic_open_string
0e1e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e1e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e1ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e1f0     0C 4E 05 F1 | 	add	fp, #12
0e1f4     A7 FA 61 FC | 	wrlong	result1, fp
0e1f8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e1f8     0C 4E 85 F1 | 	sub	fp, #12
0e1fc     A0 00 90 AD |  if_e	jmp	#LR__1254
0e200     00 12 06 F6 | 	mov	arg01, #0
0e204     A8 90 B1 FD | 	call	#__system___getiolock_0568
0e208     FD 12 02 F6 | 	mov	arg01, result1
0e20c     74 33 B1 FD | 	call	#__system___lockmem
0e210     8C 01 00 FF 
0e214     6E 14 06 F6 | 	mov	arg02, ##@LR__5539
0e218     00 12 06 F6 | 	mov	arg01, #0
0e21c     00 16 06 F6 | 	mov	arg03, #0
0e220     54 40 B1 FD | 	call	#__system___basic_print_string
0e224     0C 4E 05 F1 | 	add	fp, #12
0e228     A7 14 02 FB | 	rdlong	arg02, fp
0e22c     0C 4E 85 F1 | 	sub	fp, #12
0e230     00 12 06 F6 | 	mov	arg01, #0
0e234     00 16 06 F6 | 	mov	arg03, #0
0e238     0A 18 06 F6 | 	mov	arg04, #10
0e23c     7C 40 B1 FD | 	call	#__system___basic_print_integer
0e240     8C 01 00 FF 
0e244     7C 14 06 F6 | 	mov	arg02, ##@LR__5540
0e248     00 12 06 F6 | 	mov	arg01, #0
0e24c     00 16 06 F6 | 	mov	arg03, #0
0e250     24 40 B1 FD | 	call	#__system___basic_print_string
0e254     00 1E 06 F6 | 	mov	local01, #0
0e258     0C 4E 05 F1 | 	add	fp, #12
0e25c     A7 12 02 FB | 	rdlong	arg01, fp
0e260     0C 4E 85 F1 | 	sub	fp, #12
0e264     EC 5B B1 FD | 	call	#__system___strerror
0e268     FD 14 02 F6 | 	mov	arg02, result1
0e26c     0F 13 02 F6 | 	mov	arg01, local01
0e270     00 16 06 F6 | 	mov	arg03, #0
0e274     00 40 B1 FD | 	call	#__system___basic_print_string
0e278     00 12 06 F6 | 	mov	arg01, #0
0e27c     0A 14 06 F6 | 	mov	arg02, #10
0e280     00 16 06 F6 | 	mov	arg03, #0
0e284     98 3F B1 FD | 	call	#__system___basic_print_char
0e288     00 12 06 F6 | 	mov	arg01, #0
0e28c     20 90 B1 FD | 	call	#__system___getiolock_0568
0e290     FD 00 68 FC | 	wrlong	#0, result1
0e294     09 12 06 F6 | 	mov	arg01, #9
0e298     84 85 B1 FD | 	call	#__system__close
0e29c     88 08 90 FD | 	jmp	#LR__1271
0e2a0                 | LR__1254
0e2a0                 | '     get #9,17,envbuf8(channel,0),256
0e2a0     18 4E 05 F1 | 	add	fp, #24
0e2a4     A7 1A 02 FB | 	rdlong	arg05, fp
0e2a8     18 4E 85 F1 | 	sub	fp, #24
0e2ac     0D 17 02 F6 | 	mov	arg03, arg05
0e2b0     09 16 66 F0 | 	shl	arg03, #9
0e2b4     0D 17 02 F1 | 	add	arg03, arg05
0e2b8     0C 00 00 FF 
0e2bc     D8 E4 05 F1 | 	add	objptr, ##6360
0e2c0     F2 16 02 F1 | 	add	arg03, objptr
0e2c4     09 12 06 F6 | 	mov	arg01, #9
0e2c8     11 14 06 F6 | 	mov	arg02, #17
0e2cc     00 19 06 F6 | 	mov	arg04, #256
0e2d0     01 1A 06 F6 | 	mov	arg05, #1
0e2d4     0C 00 00 FF 
0e2d8     D8 E4 85 F1 | 	sub	objptr, ##6360
0e2dc     14 41 B1 FD | 	call	#__system___basic_get
0e2e0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0e2e0     14 4E 05 F1 | 	add	fp, #20
0e2e4     A7 FE 69 FC | 	wrlong	#255, fp
0e2e8     14 4E 85 F1 | 	sub	fp, #20
0e2ec     0C 00 00 FF 
0e2f0     D8 E4 05 F1 | 	add	objptr, ##6360
0e2f4     97 30 48 FB | 	callpa	#(@LR__1256-@LR__1255)>>2,fcache_load_ptr_
0e2f8                 | LR__1255
0e2f8     18 4E 05 F1 | 	add	fp, #24
0e2fc     A7 16 02 FB | 	rdlong	arg03, fp
0e300     0B 1F 02 F6 | 	mov	local01, arg03
0e304     09 1E 66 F0 | 	shl	local01, #9
0e308     F2 1E 02 F1 | 	add	local01, objptr
0e30c     04 4E 85 F1 | 	sub	fp, #4
0e310     A7 1A 02 FB | 	rdlong	arg05, fp
0e314     0D 19 02 F6 | 	mov	arg04, arg05
0e318     01 18 66 F0 | 	shl	arg04, #1
0e31c     0F 19 02 F1 | 	add	arg04, local01
0e320     0B 1F 02 F6 | 	mov	local01, arg03
0e324     09 1E 66 F0 | 	shl	local01, #9
0e328     0B 1F 02 F1 | 	add	local01, arg03
0e32c     F2 1E 02 F1 | 	add	local01, objptr
0e330     0F 1B 02 F1 | 	add	arg05, local01
0e334     0D 1F C2 FA | 	rdbyte	local01, arg05
0e338     00 1F 06 FA | 	mul	local01, #256
0e33c     0C 1F 52 FC | 	wrword	local01, arg04
0e340     A7 1E 02 FB | 	rdlong	local01, fp
0e344     01 1E 86 F1 | 	sub	local01, #1
0e348     A7 1E 62 FC | 	wrlong	local01, fp
0e34c     14 4E 85 F1 | 	sub	fp, #20
0e350     00 1E 56 F2 | 	cmps	local01, #0 wc
0e354     A0 FF 9F 3D |  if_ae	jmp	#LR__1255
0e358                 | LR__1256
0e358     0C 00 00 FF 
0e35c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e360                 | '     close #9
0e360     09 12 06 F6 | 	mov	arg01, #9
0e364     B8 84 B1 FD | 	call	#__system__close
0e368     18 4E 05 F1 | 	add	fp, #24
0e36c     A7 1E 02 FB | 	rdlong	local01, fp
0e370     18 4E 85 F1 | 	sub	fp, #24
0e374     09 1E 66 F0 | 	shl	local01, #9
0e378     0C 00 00 FF 
0e37c     D8 E4 05 F1 | 	add	objptr, ##6360
0e380     F2 1E 02 F1 | 	add	local01, objptr
0e384     FE 1F 06 F1 | 	add	local01, #510
0e388     0F 01 58 FC | 	wrword	#0, local01
0e38c                 | '     envbuf(channel,255)=0                                                              
0e38c                 | '     return
0e38c     0C 00 00 FF 
0e390     D8 E4 85 F1 | 	sub	objptr, ##6360
0e394     90 07 90 FD | 	jmp	#LR__1271
0e398                 | LR__1257
0e398                 | '     if wptr < $80000 then 
0e398     1C 4E 05 F1 | 	add	fp, #28
0e39c     A7 20 02 FB | 	rdlong	local02, fp
0e3a0     1C 4E 85 F1 | 	sub	fp, #28
0e3a4     00 04 00 FF 
0e3a8     00 20 56 F2 | 	cmps	local02, ##524288 wc
0e3ac     7C 00 90 3D |  if_ae	jmp	#LR__1260
0e3b0                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0e3b0     14 4E 05 F1 | 	add	fp, #20
0e3b4     A7 00 68 FC | 	wrlong	#0, fp
0e3b8     14 4E 85 F1 | 	sub	fp, #20
0e3bc     0C 00 00 FF 
0e3c0     D8 E4 05 F1 | 	add	objptr, ##6360
0e3c4     97 2C 48 FB | 	callpa	#(@LR__1259-@LR__1258)>>2,fcache_load_ptr_
0e3c8                 | LR__1258
0e3c8     18 4E 05 F1 | 	add	fp, #24
0e3cc     A7 20 02 FB | 	rdlong	local02, fp
0e3d0     09 20 66 F0 | 	shl	local02, #9
0e3d4     F2 20 02 F1 | 	add	local02, objptr
0e3d8     04 4E 85 F1 | 	sub	fp, #4
0e3dc     A7 1E 02 FB | 	rdlong	local01, fp
0e3e0     0F 1B 02 F6 | 	mov	arg05, local01
0e3e4     01 1A 66 F0 | 	shl	arg05, #1
0e3e8     10 1B 02 F1 | 	add	arg05, local02
0e3ec     08 4E 05 F1 | 	add	fp, #8
0e3f0     A7 12 02 FB | 	rdlong	arg01, fp
0e3f4     01 1E 66 F0 | 	shl	local01, #1
0e3f8     0F 13 02 F1 | 	add	arg01, local01
0e3fc     09 FB E1 FA | 	rdword	result1, arg01
0e400     0D FB 51 FC | 	wrword	result1, arg05
0e404     08 4E 85 F1 | 	sub	fp, #8
0e408     A7 20 02 FB | 	rdlong	local02, fp
0e40c     01 20 06 F1 | 	add	local02, #1
0e410     A7 20 62 FC | 	wrlong	local02, fp
0e414     14 4E 85 F1 | 	sub	fp, #20
0e418     00 21 56 F2 | 	cmps	local02, #256 wc
0e41c     A8 FF 9F CD |  if_b	jmp	#LR__1258
0e420                 | LR__1259
0e420     0C 00 00 FF 
0e424     D8 E4 85 F1 | 	sub	objptr, ##6360
0e428     78 00 90 FD | 	jmp	#LR__1262
0e42c                 | LR__1260
0e42c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0e42c     14 4E 05 F1 | 	add	fp, #20
0e430     A7 00 68 FC | 	wrlong	#0, fp
0e434     14 4E 85 F1 | 	sub	fp, #20
0e438                 | LR__1261
0e438     18 4E 05 F1 | 	add	fp, #24
0e43c     A7 20 02 FB | 	rdlong	local02, fp
0e440     09 20 66 F0 | 	shl	local02, #9
0e444     0C 00 00 FF 
0e448     D8 E4 05 F1 | 	add	objptr, ##6360
0e44c     F2 20 02 F1 | 	add	local02, objptr
0e450     04 4E 85 F1 | 	sub	fp, #4
0e454     A7 1E 02 FB | 	rdlong	local01, fp
0e458     0F 23 02 F6 | 	mov	local03, local01
0e45c     01 22 66 F0 | 	shl	local03, #1
0e460     10 23 02 F1 | 	add	local03, local02
0e464     08 4E 05 F1 | 	add	fp, #8
0e468     A7 12 02 FB | 	rdlong	arg01, fp
0e46c     1C 4E 85 F1 | 	sub	fp, #28
0e470     01 1E 66 F0 | 	shl	local01, #1
0e474     0F 13 02 F1 | 	add	arg01, local01
0e478     0C 00 00 FF 
0e47c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e480     54 FE B0 FD | 	call	#_psdpeek
0e484     11 FB 51 FC | 	wrword	result1, local03
0e488     14 4E 05 F1 | 	add	fp, #20
0e48c     A7 22 02 FB | 	rdlong	local03, fp
0e490     01 22 06 F1 | 	add	local03, #1
0e494     A7 22 62 FC | 	wrlong	local03, fp
0e498     14 4E 85 F1 | 	sub	fp, #20
0e49c     00 23 56 F2 | 	cmps	local03, #256 wc
0e4a0     94 FF 9F CD |  if_b	jmp	#LR__1261
0e4a4                 | LR__1262
0e4a4     18 4E 05 F1 | 	add	fp, #24
0e4a8     A7 22 02 FB | 	rdlong	local03, fp
0e4ac     18 4E 85 F1 | 	sub	fp, #24
0e4b0     09 22 66 F0 | 	shl	local03, #9
0e4b4     0C 00 00 FF 
0e4b8     D8 E4 05 F1 | 	add	objptr, ##6360
0e4bc     F2 22 02 F1 | 	add	local03, objptr
0e4c0     FE 23 06 F1 | 	add	local03, #510
0e4c4     11 01 58 FC | 	wrword	#0, local03
0e4c8                 | '     envbuf(channel,255)=0
0e4c8                 | '     return   
0e4c8     0C 00 00 FF 
0e4cc     D8 E4 85 F1 | 	sub	objptr, ##6360
0e4d0     54 06 90 FD | 	jmp	#LR__1271
0e4d4                 | LR__1263
0e4d4                 | ' 
0e4d4                 | ' if numpar=5 then   						 'simple adsr
0e4d4     10 4E 05 F1 | 	add	fp, #16
0e4d8     A7 20 02 FB | 	rdlong	local02, fp
0e4dc     10 4E 85 F1 | 	sub	fp, #16
0e4e0     05 20 0E F2 | 	cmp	local02, #5 wz
0e4e4     14 06 90 5D |  if_ne	jmp	#LR__1270
0e4e8     EC D2 BF FD | 	call	#_pop
0e4ec     FF 1E 02 F6 | 	mov	local01, result3
0e4f0     40 4E 05 F1 | 	add	fp, #64
0e4f4     A7 FA 61 FC | 	wrlong	result1, fp
0e4f8     04 4E 05 F1 | 	add	fp, #4
0e4fc     A7 FC 61 FC | 	wrlong	result2, fp
0e500     04 4E 05 F1 | 	add	fp, #4
0e504     A7 1E 62 FC | 	wrlong	local01, fp
0e508     08 4E 85 F1 | 	sub	fp, #8
0e50c     A7 12 02 F6 | 	mov	arg01, fp
0e510     40 4E 85 F1 | 	sub	fp, #64
0e514     60 D5 BF FD | 	call	#_converttofloat
0e518     FD 20 02 F6 | 	mov	local02, result1
0e51c     2C 4E 05 F1 | 	add	fp, #44
0e520     A7 20 62 FC | 	wrlong	local02, fp
0e524     2C 4E 85 F1 | 	sub	fp, #44
0e528     AC D2 BF FD | 	call	#_pop
0e52c     FF 1E 02 F6 | 	mov	local01, result3
0e530     40 4E 05 F1 | 	add	fp, #64
0e534     A7 FA 61 FC | 	wrlong	result1, fp
0e538     04 4E 05 F1 | 	add	fp, #4
0e53c     A7 FC 61 FC | 	wrlong	result2, fp
0e540     04 4E 05 F1 | 	add	fp, #4
0e544     A7 1E 62 FC | 	wrlong	local01, fp
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     A7 12 02 F6 | 	mov	arg01, fp
0e550     40 4E 85 F1 | 	sub	fp, #64
0e554     20 D5 BF FD | 	call	#_converttofloat
0e558     FD 20 02 F6 | 	mov	local02, result1
0e55c     28 4E 05 F1 | 	add	fp, #40
0e560     A7 20 62 FC | 	wrlong	local02, fp
0e564     28 4E 85 F1 | 	sub	fp, #40
0e568     6C D2 BF FD | 	call	#_pop
0e56c     FF 1E 02 F6 | 	mov	local01, result3
0e570     40 4E 05 F1 | 	add	fp, #64
0e574     A7 FA 61 FC | 	wrlong	result1, fp
0e578     04 4E 05 F1 | 	add	fp, #4
0e57c     A7 FC 61 FC | 	wrlong	result2, fp
0e580     04 4E 05 F1 | 	add	fp, #4
0e584     A7 1E 62 FC | 	wrlong	local01, fp
0e588     08 4E 85 F1 | 	sub	fp, #8
0e58c     A7 12 02 F6 | 	mov	arg01, fp
0e590     40 4E 85 F1 | 	sub	fp, #64
0e594     E0 D4 BF FD | 	call	#_converttofloat
0e598     FD 20 02 F6 | 	mov	local02, result1
0e59c     24 4E 05 F1 | 	add	fp, #36
0e5a0     A7 20 62 FC | 	wrlong	local02, fp
0e5a4     24 4E 85 F1 | 	sub	fp, #36
0e5a8     2C D2 BF FD | 	call	#_pop
0e5ac     FF 1E 02 F6 | 	mov	local01, result3
0e5b0     40 4E 05 F1 | 	add	fp, #64
0e5b4     A7 FA 61 FC | 	wrlong	result1, fp
0e5b8     04 4E 05 F1 | 	add	fp, #4
0e5bc     A7 FC 61 FC | 	wrlong	result2, fp
0e5c0     04 4E 05 F1 | 	add	fp, #4
0e5c4     A7 1E 62 FC | 	wrlong	local01, fp
0e5c8     08 4E 85 F1 | 	sub	fp, #8
0e5cc     A7 12 02 F6 | 	mov	arg01, fp
0e5d0     40 4E 85 F1 | 	sub	fp, #64
0e5d4     A0 D4 BF FD | 	call	#_converttofloat
0e5d8     FD 20 02 F6 | 	mov	local02, result1
0e5dc     20 4E 05 F1 | 	add	fp, #32
0e5e0     A7 20 62 FC | 	wrlong	local02, fp
0e5e4     20 4E 85 F1 | 	sub	fp, #32
0e5e8     EC D1 BF FD | 	call	#_pop
0e5ec     FF 1E 02 F6 | 	mov	local01, result3
0e5f0     40 4E 05 F1 | 	add	fp, #64
0e5f4     A7 FA 61 FC | 	wrlong	result1, fp
0e5f8     04 4E 05 F1 | 	add	fp, #4
0e5fc     A7 FC 61 FC | 	wrlong	result2, fp
0e600     04 4E 05 F1 | 	add	fp, #4
0e604     A7 1E 62 FC | 	wrlong	local01, fp
0e608     08 4E 85 F1 | 	sub	fp, #8
0e60c     A7 12 02 F6 | 	mov	arg01, fp
0e610     40 4E 85 F1 | 	sub	fp, #64
0e614     A4 D3 BF FD | 	call	#_converttoint
0e618     18 4E 05 F1 | 	add	fp, #24
0e61c     A7 FA 61 FC | 	wrlong	result1, fp
0e620                 | '   t1=pop() : rr=converttofloat(t1)
0e620                 | '   t1=pop() : ss=converttofloat(t1) 
0e620                 | '   t1=pop() : dd=converttofloat(t1)
0e620                 | '   t1=pop() : aa=converttofloat(t1)
0e620                 | '   t1=pop() : channel=converttoint(t1)
0e620                 | '   if ss<0.0 then ss=0.0 
0e620     10 4E 05 F1 | 	add	fp, #16
0e624     A7 12 02 FB | 	rdlong	arg01, fp
0e628     28 4E 85 F1 | 	sub	fp, #40
0e62c     00 14 06 F6 | 	mov	arg02, #0
0e630     01 16 06 F6 | 	mov	arg03, #1
0e634     3C 61 B1 FD | 	call	#__system___float_cmp
0e638     00 FA 55 F2 | 	cmps	result1, #0 wc
0e63c     28 4E 05 C1 |  if_b	add	fp, #40
0e640     A7 00 68 CC |  if_b	wrlong	#0, fp
0e644     28 4E 85 C1 |  if_b	sub	fp, #40
0e648                 | '   if ss>1.0 then ss=1.0
0e648     28 4E 05 F1 | 	add	fp, #40
0e64c     A7 12 02 FB | 	rdlong	arg01, fp
0e650     28 4E 85 F1 | 	sub	fp, #40
0e654     00 C0 1F FF 
0e658     00 14 06 F6 | 	mov	arg02, ##1065353216
0e65c     01 16 66 F6 | 	neg	arg03, #1
0e660     10 61 B1 FD | 	call	#__system___float_cmp
0e664     01 FA 55 F2 | 	cmps	result1, #1 wc
0e668     28 4E 05 31 |  if_ae	add	fp, #40
0e66c     00 C0 9F 3F 
0e670     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0e674     28 4E 85 31 |  if_ae	sub	fp, #40
0e678     20 4E 05 F1 | 	add	fp, #32
0e67c     A7 12 02 FB | 	rdlong	arg01, fp
0e680     04 4E 05 F1 | 	add	fp, #4
0e684     A7 14 02 FB | 	rdlong	arg02, fp
0e688     24 4E 85 F1 | 	sub	fp, #36
0e68c     E0 58 B1 FD | 	call	#__system___float_add
0e690     FD 12 02 F6 | 	mov	arg01, result1
0e694     2C 4E 05 F1 | 	add	fp, #44
0e698     A7 14 02 FB | 	rdlong	arg02, fp
0e69c     2C 4E 85 F1 | 	sub	fp, #44
0e6a0     CC 58 B1 FD | 	call	#__system___float_add
0e6a4     30 4E 05 F1 | 	add	fp, #48
0e6a8     A7 FA 61 FC | 	wrlong	result1, fp
0e6ac     FD 14 02 F6 | 	mov	arg02, result1
0e6b0     30 4E 85 F1 | 	sub	fp, #48
0e6b4     00 C0 21 FF 
0e6b8     00 12 06 F6 | 	mov	arg01, ##1132462080
0e6bc     84 5E B1 FD | 	call	#__system___float_div
0e6c0     34 4E 05 F1 | 	add	fp, #52
0e6c4     A7 FA 61 FC | 	wrlong	result1, fp
0e6c8     14 4E 85 F1 | 	sub	fp, #20
0e6cc     A7 12 02 FB | 	rdlong	arg01, fp
0e6d0     FD 14 02 F6 | 	mov	arg02, result1
0e6d4     20 4E 85 F1 | 	sub	fp, #32
0e6d8     64 5C B1 FD | 	call	#__system___float_mul
0e6dc     FD 12 02 F6 | 	mov	arg01, result1
0e6e0     01 14 06 F6 | 	mov	arg02, #1
0e6e4     20 61 B1 FD | 	call	#__system___float_tointeger
0e6e8     A7 FA 61 FC | 	wrlong	result1, fp
0e6ec     24 4E 05 F1 | 	add	fp, #36
0e6f0     A7 12 02 FB | 	rdlong	arg01, fp
0e6f4     10 4E 05 F1 | 	add	fp, #16
0e6f8     A7 14 02 FB | 	rdlong	arg02, fp
0e6fc     34 4E 85 F1 | 	sub	fp, #52
0e700     3C 5C B1 FD | 	call	#__system___float_mul
0e704     FD 12 02 F6 | 	mov	arg01, result1
0e708     01 14 06 F6 | 	mov	arg02, #1
0e70c     F8 60 B1 FD | 	call	#__system___float_tointeger
0e710     04 4E 05 F1 | 	add	fp, #4
0e714     A7 FA 61 FC | 	wrlong	result1, fp
0e718     28 4E 05 F1 | 	add	fp, #40
0e71c     A7 12 02 FB | 	rdlong	arg01, fp
0e720     08 4E 05 F1 | 	add	fp, #8
0e724     A7 14 02 FB | 	rdlong	arg02, fp
0e728     34 4E 85 F1 | 	sub	fp, #52
0e72c     10 5C B1 FD | 	call	#__system___float_mul
0e730     FD 12 02 F6 | 	mov	arg01, result1
0e734     01 14 06 F6 | 	mov	arg02, #1
0e738     CC 60 B1 FD | 	call	#__system___float_tointeger
0e73c     0C 4E 05 F1 | 	add	fp, #12
0e740     A7 FA 61 FC | 	wrlong	result1, fp
0e744     0C 4E 85 F1 | 	sub	fp, #12
0e748     F8 BF 23 FF 
0e74c     00 20 06 F6 | 	mov	local02, ##1199566848
0e750     A7 12 02 FB | 	rdlong	arg01, fp
0e754     09 13 52 F6 | 	abs	arg01, arg01 wc
0e758     1F 24 C6 C9 |  if_b	decod	local04, #31
0e75c     00 24 06 36 |  if_ae	mov	local04, #0
0e760     D8 57 B1 FD | 	call	#__system___float_fromuns
0e764     12 FB 61 F5 | 	xor	result1, local04
0e768     FD 14 02 F6 | 	mov	arg02, result1
0e76c     10 13 02 F6 | 	mov	arg01, local02
0e770     D0 5D B1 FD | 	call	#__system___float_div
0e774     38 4E 05 F1 | 	add	fp, #56
0e778     A7 FA 61 FC | 	wrlong	result1, fp
0e77c     F8 BF 23 FF 
0e780     00 20 06 F6 | 	mov	local02, ##1199566848
0e784     10 4E 85 F1 | 	sub	fp, #16
0e788     A7 14 02 FB | 	rdlong	arg02, fp
0e78c     28 4E 85 F1 | 	sub	fp, #40
0e790     F8 BF 23 FF 
0e794     00 12 06 F6 | 	mov	arg01, ##1199566848
0e798     A4 5B B1 FD | 	call	#__system___float_mul
0e79c     FD 14 02 F6 | 	mov	arg02, result1
0e7a0     10 13 02 F6 | 	mov	arg01, local02
0e7a4     1F 14 E6 F4 | 	bitnot	arg02, #31
0e7a8     C4 57 B1 FD | 	call	#__system___float_add
0e7ac     FD 20 02 F6 | 	mov	local02, result1
0e7b0     04 4E 05 F1 | 	add	fp, #4
0e7b4     A7 12 02 FB | 	rdlong	arg01, fp
0e7b8     04 4E 85 F1 | 	sub	fp, #4
0e7bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7c0     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7c4     00 24 06 36 |  if_ae	mov	local04, #0
0e7c8     70 57 B1 FD | 	call	#__system___float_fromuns
0e7cc     12 FB 61 F5 | 	xor	result1, local04
0e7d0     FD 14 02 F6 | 	mov	arg02, result1
0e7d4     10 13 02 F6 | 	mov	arg01, local02
0e7d8     68 5D B1 FD | 	call	#__system___float_div
0e7dc     24 4E 05 F1 | 	add	fp, #36
0e7e0     A7 FA 61 FC | 	wrlong	result1, fp
0e7e4     04 4E 05 F1 | 	add	fp, #4
0e7e8     A7 14 02 FB | 	rdlong	arg02, fp
0e7ec     28 4E 85 F1 | 	sub	fp, #40
0e7f0     F8 BF 23 FF 
0e7f4     00 12 06 F6 | 	mov	arg01, ##1199566848
0e7f8     44 5B B1 FD | 	call	#__system___float_mul
0e7fc     FD 20 02 F6 | 	mov	local02, result1
0e800     0C 4E 05 F1 | 	add	fp, #12
0e804     A7 12 02 FB | 	rdlong	arg01, fp
0e808     0C 4E 85 F1 | 	sub	fp, #12
0e80c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e810     1F 24 C6 C9 |  if_b	decod	local04, #31
0e814     00 24 06 36 |  if_ae	mov	local04, #0
0e818     20 57 B1 FD | 	call	#__system___float_fromuns
0e81c     12 FB 61 F5 | 	xor	result1, local04
0e820     FD 14 02 F6 | 	mov	arg02, result1
0e824     10 13 02 F6 | 	mov	arg01, local02
0e828     18 5D B1 FD | 	call	#__system___float_div
0e82c     3C 4E 05 F1 | 	add	fp, #60
0e830     A7 FA 61 FC | 	wrlong	result1, fp
0e834     24 4E 85 F1 | 	sub	fp, #36
0e838     A7 26 02 FB | 	rdlong	local05, fp
0e83c     18 4E 85 F1 | 	sub	fp, #24
0e840     01 26 66 F0 | 	shl	local05, #1
0e844     51 00 00 FF 
0e848     C8 E5 05 F1 | 	add	objptr, ##41928
0e84c     F2 26 02 F1 | 	add	local05, objptr
0e850     A7 28 02 FB | 	rdlong	local06, fp
0e854     04 4E 05 F1 | 	add	fp, #4
0e858     A7 22 02 FB | 	rdlong	local03, fp
0e85c     11 29 02 F1 | 	add	local06, local03
0e860     13 29 52 FC | 	wrword	local06, local05
0e864     1C 4E 05 F1 | 	add	fp, #28
0e868     A7 00 68 FC | 	wrlong	#0, fp
0e86c                 | '   fulltime=aa+dd+rr
0e86c                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0e86c                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0e86c                 | '   suspoints(channel)=a+d
0e86c                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0e86c     0C 4E 85 F1 | 	sub	fp, #12
0e870     A7 00 68 FC | 	wrlong	#0, fp
0e874     14 4E 85 F1 | 	sub	fp, #20
0e878     A7 2A 02 FB | 	rdlong	local07, fp
0e87c     51 00 00 FF 
0e880     C8 E5 85 F1 | 	sub	objptr, ##41928
0e884                 | LR__1264
0e884     14 4E 05 F1 | 	add	fp, #20
0e888     A7 20 02 FB | 	rdlong	local02, fp
0e88c     14 4E 85 F1 | 	sub	fp, #20
0e890     15 21 52 F2 | 	cmps	local02, local07 wc
0e894     80 00 90 3D |  if_ae	jmp	#LR__1265
0e898     18 4E 05 F1 | 	add	fp, #24
0e89c     A7 28 02 FB | 	rdlong	local06, fp
0e8a0     09 28 66 F0 | 	shl	local06, #9
0e8a4     0C 00 00 FF 
0e8a8     D8 E4 05 F1 | 	add	objptr, ##6360
0e8ac     F2 28 02 F1 | 	add	local06, objptr
0e8b0     04 4E 85 F1 | 	sub	fp, #4
0e8b4     A7 26 02 FB | 	rdlong	local05, fp
0e8b8     01 26 66 F0 | 	shl	local05, #1
0e8bc     14 27 02 F1 | 	add	local05, local06
0e8c0     0C 4E 05 F1 | 	add	fp, #12
0e8c4     A7 12 02 FB | 	rdlong	arg01, fp
0e8c8     20 4E 85 F1 | 	sub	fp, #32
0e8cc     0C 00 00 FF 
0e8d0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e8d4     01 14 06 F6 | 	mov	arg02, #1
0e8d8     2C 5F B1 FD | 	call	#__system___float_tointeger
0e8dc     13 FB 51 FC | 	wrword	result1, local05
0e8e0     20 4E 05 F1 | 	add	fp, #32
0e8e4     A7 12 02 FB | 	rdlong	arg01, fp
0e8e8     18 4E 05 F1 | 	add	fp, #24
0e8ec     A7 14 02 FB | 	rdlong	arg02, fp
0e8f0     38 4E 85 F1 | 	sub	fp, #56
0e8f4     78 56 B1 FD | 	call	#__system___float_add
0e8f8     20 4E 05 F1 | 	add	fp, #32
0e8fc     A7 FA 61 FC | 	wrlong	result1, fp
0e900     0C 4E 85 F1 | 	sub	fp, #12
0e904     A7 28 02 FB | 	rdlong	local06, fp
0e908     01 28 06 F1 | 	add	local06, #1
0e90c     A7 28 62 FC | 	wrlong	local06, fp
0e910     14 4E 85 F1 | 	sub	fp, #20
0e914     6C FF 9F FD | 	jmp	#LR__1264
0e918                 | LR__1265
0e918                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0e918     A7 20 02 FB | 	rdlong	local02, fp
0e91c     14 4E 05 F1 | 	add	fp, #20
0e920     A7 20 62 FC | 	wrlong	local02, fp
0e924     14 4E 85 F1 | 	sub	fp, #20
0e928     A7 2C 02 FB | 	rdlong	local08, fp
0e92c     04 4E 05 F1 | 	add	fp, #4
0e930     A7 20 02 FB | 	rdlong	local02, fp
0e934     04 4E 85 F1 | 	sub	fp, #4
0e938     10 2D 02 F1 | 	add	local08, local02
0e93c                 | LR__1266
0e93c     14 4E 05 F1 | 	add	fp, #20
0e940     A7 20 02 FB | 	rdlong	local02, fp
0e944     14 4E 85 F1 | 	sub	fp, #20
0e948     16 21 52 F2 | 	cmps	local02, local08 wc
0e94c     A8 00 90 3D |  if_ae	jmp	#LR__1267
0e950     18 4E 05 F1 | 	add	fp, #24
0e954     A7 2A 02 FB | 	rdlong	local07, fp
0e958     09 2A 66 F0 | 	shl	local07, #9
0e95c     0C 00 00 FF 
0e960     D8 E4 05 F1 | 	add	objptr, ##6360
0e964     F2 2A 02 F1 | 	add	local07, objptr
0e968     04 4E 85 F1 | 	sub	fp, #4
0e96c     A7 28 02 FB | 	rdlong	local06, fp
0e970     01 28 66 F0 | 	shl	local06, #1
0e974     15 29 02 F1 | 	add	local06, local07
0e978     0C 4E 05 F1 | 	add	fp, #12
0e97c     A7 12 02 FB | 	rdlong	arg01, fp
0e980     20 4E 85 F1 | 	sub	fp, #32
0e984     0C 00 00 FF 
0e988     D8 E4 85 F1 | 	sub	objptr, ##6360
0e98c     01 14 06 F6 | 	mov	arg02, #1
0e990     74 5E B1 FD | 	call	#__system___float_tointeger
0e994     14 FB 51 FC | 	wrword	result1, local06
0e998     20 4E 05 F1 | 	add	fp, #32
0e99c     A7 12 02 FB | 	rdlong	arg01, fp
0e9a0     04 4E 05 F1 | 	add	fp, #4
0e9a4     A7 14 02 FB | 	rdlong	arg02, fp
0e9a8     24 4E 85 F1 | 	sub	fp, #36
0e9ac     1F 14 E6 F4 | 	bitnot	arg02, #31
0e9b0     BC 55 B1 FD | 	call	#__system___float_add
0e9b4     20 4E 05 F1 | 	add	fp, #32
0e9b8     A7 FA 61 FC | 	wrlong	result1, fp
0e9bc     20 4E 85 F1 | 	sub	fp, #32
0e9c0     FD 12 02 F6 | 	mov	arg01, result1
0e9c4     00 14 06 F6 | 	mov	arg02, #0
0e9c8     01 16 06 F6 | 	mov	arg03, #1
0e9cc     A4 5D B1 FD | 	call	#__system___float_cmp
0e9d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e9d4     20 4E 05 C1 |  if_b	add	fp, #32
0e9d8     A7 00 68 CC |  if_b	wrlong	#0, fp
0e9dc     20 4E 85 C1 |  if_b	sub	fp, #32
0e9e0     14 4E 05 F1 | 	add	fp, #20
0e9e4     A7 2A 02 FB | 	rdlong	local07, fp
0e9e8     01 2A 06 F1 | 	add	local07, #1
0e9ec     A7 2A 62 FC | 	wrlong	local07, fp
0e9f0     14 4E 85 F1 | 	sub	fp, #20
0e9f4     44 FF 9F FD | 	jmp	#LR__1266
0e9f8                 | LR__1267
0e9f8                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0e9f8     A7 20 02 FB | 	rdlong	local02, fp
0e9fc     04 4E 05 F1 | 	add	fp, #4
0ea00     A7 2C 02 FB | 	rdlong	local08, fp
0ea04     16 21 02 F1 | 	add	local02, local08
0ea08     10 4E 05 F1 | 	add	fp, #16
0ea0c     A7 20 62 FC | 	wrlong	local02, fp
0ea10     14 4E 85 F1 | 	sub	fp, #20
0ea14                 | LR__1268
0ea14     14 4E 05 F1 | 	add	fp, #20
0ea18     A7 26 02 FB | 	rdlong	local05, fp
0ea1c     14 4E 85 F1 | 	sub	fp, #20
0ea20     00 27 56 F2 | 	cmps	local05, #256 wc
0ea24     A8 00 90 3D |  if_ae	jmp	#LR__1269
0ea28     18 4E 05 F1 | 	add	fp, #24
0ea2c     A7 2C 02 FB | 	rdlong	local08, fp
0ea30     09 2C 66 F0 | 	shl	local08, #9
0ea34     0C 00 00 FF 
0ea38     D8 E4 05 F1 | 	add	objptr, ##6360
0ea3c     F2 2C 02 F1 | 	add	local08, objptr
0ea40     04 4E 85 F1 | 	sub	fp, #4
0ea44     A7 2A 02 FB | 	rdlong	local07, fp
0ea48     01 2A 66 F0 | 	shl	local07, #1
0ea4c     16 2B 02 F1 | 	add	local07, local08
0ea50     0C 4E 05 F1 | 	add	fp, #12
0ea54     A7 12 02 FB | 	rdlong	arg01, fp
0ea58     20 4E 85 F1 | 	sub	fp, #32
0ea5c     0C 00 00 FF 
0ea60     D8 E4 85 F1 | 	sub	objptr, ##6360
0ea64     01 14 06 F6 | 	mov	arg02, #1
0ea68     9C 5D B1 FD | 	call	#__system___float_tointeger
0ea6c     15 FB 51 FC | 	wrword	result1, local07
0ea70     20 4E 05 F1 | 	add	fp, #32
0ea74     A7 12 02 FB | 	rdlong	arg01, fp
0ea78     1C 4E 05 F1 | 	add	fp, #28
0ea7c     A7 14 02 FB | 	rdlong	arg02, fp
0ea80     3C 4E 85 F1 | 	sub	fp, #60
0ea84     1F 14 E6 F4 | 	bitnot	arg02, #31
0ea88     E4 54 B1 FD | 	call	#__system___float_add
0ea8c     20 4E 05 F1 | 	add	fp, #32
0ea90     A7 FA 61 FC | 	wrlong	result1, fp
0ea94     20 4E 85 F1 | 	sub	fp, #32
0ea98     FD 12 02 F6 | 	mov	arg01, result1
0ea9c     00 14 06 F6 | 	mov	arg02, #0
0eaa0     01 16 06 F6 | 	mov	arg03, #1
0eaa4     CC 5C B1 FD | 	call	#__system___float_cmp
0eaa8     00 FA 55 F2 | 	cmps	result1, #0 wc
0eaac     20 4E 05 C1 |  if_b	add	fp, #32
0eab0     A7 00 68 CC |  if_b	wrlong	#0, fp
0eab4     20 4E 85 C1 |  if_b	sub	fp, #32
0eab8     14 4E 05 F1 | 	add	fp, #20
0eabc     A7 2C 02 FB | 	rdlong	local08, fp
0eac0     01 2C 06 F1 | 	add	local08, #1
0eac4     A7 2C 62 FC | 	wrlong	local08, fp
0eac8     14 4E 85 F1 | 	sub	fp, #20
0eacc     44 FF 9F FD | 	jmp	#LR__1268
0ead0                 | LR__1269
0ead0     18 4E 05 F1 | 	add	fp, #24
0ead4     A7 26 02 FB | 	rdlong	local05, fp
0ead8     18 4E 85 F1 | 	sub	fp, #24
0eadc     09 26 66 F0 | 	shl	local05, #9
0eae0     0C 00 00 FF 
0eae4     D8 E4 05 F1 | 	add	objptr, ##6360
0eae8     F2 26 02 F1 | 	add	local05, objptr
0eaec     FE 27 06 F1 | 	add	local05, #510
0eaf0     13 01 58 FC | 	wrword	#0, local05
0eaf4     0C 00 00 FF 
0eaf8     D8 E4 85 F1 | 	sub	objptr, ##6360
0eafc                 | LR__1270
0eafc     18 4E 05 F1 | 	add	fp, #24
0eb00     A7 26 02 FB | 	rdlong	local05, fp
0eb04     18 4E 85 F1 | 	sub	fp, #24
0eb08     09 26 66 F0 | 	shl	local05, #9
0eb0c     0C 00 00 FF 
0eb10     D8 E4 05 F1 | 	add	objptr, ##6360
0eb14     F2 26 02 F1 | 	add	local05, objptr
0eb18     FE 27 06 F1 | 	add	local05, #510
0eb1c     13 01 58 FC | 	wrword	#0, local05
0eb20     0C 00 00 FF 
0eb24     D8 E4 85 F1 | 	sub	objptr, ##6360
0eb28                 | LR__1271
0eb28     A7 F0 03 F6 | 	mov	ptra, fp
0eb2c     B2 00 A0 FD | 	call	#popregs_
0eb30                 | _do_defenv_ret
0eb30     2D 00 64 FD | 	ret
0eb34                 | 
0eb34                 | ' 
0eb34                 | ' '-------------------- defsnd
0eb34                 | ' 
0eb34                 | ' sub do_defsnd
0eb34                 | _do_defsnd
0eb34     04 4A 05 F6 | 	mov	COUNT_, #4
0eb38     A8 00 A0 FD | 	call	#pushregs_
0eb3c     88 F0 07 F1 | 	add	ptra, #136
0eb40     4A 00 00 FF 
0eb44     80 E4 05 F1 | 	add	objptr, ##38016
0eb48     F2 1A 02 FB | 	rdlong	arg05, objptr
0eb4c     0D 19 02 F6 | 	mov	arg04, arg05
0eb50     01 18 66 F0 | 	shl	arg04, #1
0eb54     0D 19 02 F1 | 	add	arg04, arg05
0eb58     02 18 66 F0 | 	shl	arg04, #2
0eb5c     03 00 00 FF 
0eb60     04 E4 85 F1 | 	sub	objptr, ##1540
0eb64     F2 18 02 F1 | 	add	arg04, objptr
0eb68     0C 1B 02 FB | 	rdlong	arg05, arg04
0eb6c     A7 1A 62 FC | 	wrlong	arg05, fp
0eb70                 | ' 
0eb70                 | ' numpar=compiledline(lineptr_e).result.uresult
0eb70                 | ' 
0eb70                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0eb70                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0eb70                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0eb70                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0eb70                 | ' 
0eb70                 | ' if numpar<2 then return
0eb70     02 1A 56 F2 | 	cmps	arg05, #2 wc
0eb74     47 00 00 FF 
0eb78     7C E4 85 F1 | 	sub	objptr, ##36476
0eb7c     94 08 90 CD |  if_b	jmp	#LR__1303
0eb80                 | '  
0eb80                 | ' if numpar=2 then
0eb80     A7 1A 02 FB | 	rdlong	arg05, fp
0eb84     02 1A 0E F2 | 	cmp	arg05, #2 wz
0eb88     A0 03 90 5D |  if_ne	jmp	#LR__1290
0eb8c     48 CC BF FD | 	call	#_pop
0eb90     FF 1A 02 F6 | 	mov	arg05, result3
0eb94     2C 4E 05 F1 | 	add	fp, #44
0eb98     A7 FA 61 FC | 	wrlong	result1, fp
0eb9c     04 4E 05 F1 | 	add	fp, #4
0eba0     A7 FC 61 FC | 	wrlong	result2, fp
0eba4     04 4E 05 F1 | 	add	fp, #4
0eba8     A7 1A 62 FC | 	wrlong	arg05, fp
0ebac                 | '   t1=pop()
0ebac                 | '   if t1.result_type=result_string2 then 
0ebac     34 4E 85 F1 | 	sub	fp, #52
0ebb0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ebb4     20 00 90 5D |  if_ne	jmp	#LR__1280
0ebb8     2C 4E 05 F1 | 	add	fp, #44
0ebbc     A7 12 02 FB | 	rdlong	arg01, fp
0ebc0     2C 4E 85 F1 | 	sub	fp, #44
0ebc4     88 CD BF FD | 	call	#_convertstring
0ebc8     38 4E 05 F1 | 	add	fp, #56
0ebcc     A7 FA 61 FC | 	wrlong	result1, fp
0ebd0     38 4E 85 F1 | 	sub	fp, #56
0ebd4     58 00 90 FD | 	jmp	#LR__1283
0ebd8                 | LR__1280
0ebd8     34 4E 05 F1 | 	add	fp, #52
0ebdc     A7 1A 02 FB | 	rdlong	arg05, fp
0ebe0     34 4E 85 F1 | 	sub	fp, #52
0ebe4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ebe8     18 00 90 5D |  if_ne	jmp	#LR__1281
0ebec     2C 4E 05 F1 | 	add	fp, #44
0ebf0     A7 1A 02 FB | 	rdlong	arg05, fp
0ebf4     0C 4E 05 F1 | 	add	fp, #12
0ebf8     A7 1A 62 FC | 	wrlong	arg05, fp
0ebfc     38 4E 85 F1 | 	sub	fp, #56
0ec00     2C 00 90 FD | 	jmp	#LR__1282
0ec04                 | LR__1281
0ec04     8C 01 00 FF 
0ec08     7F 1A 06 F6 | 	mov	arg05, ##@LR__5541
0ec0c     38 4E 05 F1 | 	add	fp, #56
0ec10     A7 1A 62 FC | 	wrlong	arg05, fp
0ec14     0C 4E 85 F1 | 	sub	fp, #12
0ec18     A7 12 02 F6 | 	mov	arg01, fp
0ec1c     2C 4E 85 F1 | 	sub	fp, #44
0ec20     98 CD BF FD | 	call	#_converttoint
0ec24     14 4E 05 F1 | 	add	fp, #20
0ec28     A7 FA 61 FC | 	wrlong	result1, fp
0ec2c     14 4E 85 F1 | 	sub	fp, #20
0ec30                 | LR__1282
0ec30                 | LR__1283
0ec30                 | '   if s<>"" then 
0ec30     38 4E 05 F1 | 	add	fp, #56
0ec34     A7 12 02 FB | 	rdlong	arg01, fp
0ec38     38 4E 85 F1 | 	sub	fp, #56
0ec3c     8C 01 00 FF 
0ec40     80 14 06 F6 | 	mov	arg02, ##@LR__5542
0ec44     64 29 B1 FD | 	call	#__system___string_cmp
0ec48     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec4c     E0 01 90 AD |  if_e	jmp	#LR__1286
0ec50     84 CB BF FD | 	call	#_pop
0ec54     FF 1A 02 F6 | 	mov	arg05, result3
0ec58     2C 4E 05 F1 | 	add	fp, #44
0ec5c     A7 FA 61 FC | 	wrlong	result1, fp
0ec60     04 4E 05 F1 | 	add	fp, #4
0ec64     A7 FC 61 FC | 	wrlong	result2, fp
0ec68     04 4E 05 F1 | 	add	fp, #4
0ec6c     A7 1A 62 FC | 	wrlong	arg05, fp
0ec70     08 4E 85 F1 | 	sub	fp, #8
0ec74     A7 12 02 F6 | 	mov	arg01, fp
0ec78     2C 4E 85 F1 | 	sub	fp, #44
0ec7c     3C CD BF FD | 	call	#_converttoint
0ec80     10 4E 05 F1 | 	add	fp, #16
0ec84     A7 FA 61 FC | 	wrlong	result1, fp
0ec88                 | '     t1=pop()
0ec88                 | '     channel=converttoint(t1) : if channel>31 then return
0ec88     FD 1A 02 F6 | 	mov	arg05, result1
0ec8c     10 4E 85 F1 | 	sub	fp, #16
0ec90     20 1A 56 F2 | 	cmps	arg05, #32 wc
0ec94     7C 07 90 3D |  if_ae	jmp	#LR__1303
0ec98                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ec98     09 12 06 F6 | 	mov	arg01, #9
0ec9c     80 7B B1 FD | 	call	#__system__close
0eca0     09 1E 06 F6 | 	mov	local01, #9
0eca4     8C 01 00 FF 
0eca8     81 12 06 F6 | 	mov	arg01, ##@LR__5543
0ecac     38 4E 05 F1 | 	add	fp, #56
0ecb0     A7 14 02 FB | 	rdlong	arg02, fp
0ecb4     38 4E 85 F1 | 	sub	fp, #56
0ecb8     24 29 B1 FD | 	call	#__system___string_concat
0ecbc     FD 14 02 F6 | 	mov	arg02, result1
0ecc0     0F 13 02 F6 | 	mov	arg01, local01
0ecc4     00 16 06 F6 | 	mov	arg03, #0
0ecc8     BC 34 B1 FD | 	call	#__system___basic_open_string
0eccc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ecd0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ecd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ecd8     52 00 00 FF 
0ecdc     1C E4 05 F1 | 	add	objptr, ##42012
0ece0     F2 FA 61 FC | 	wrlong	result1, objptr
0ece4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ece4     52 00 00 FF 
0ece8     1C E4 85 F1 | 	sub	objptr, ##42012
0ecec     B0 00 90 AD |  if_e	jmp	#LR__1284
0ecf0     00 12 06 F6 | 	mov	arg01, #0
0ecf4     B8 85 B1 FD | 	call	#__system___getiolock_0568
0ecf8     FD 12 02 F6 | 	mov	arg01, result1
0ecfc     84 28 B1 FD | 	call	#__system___lockmem
0ed00     8C 01 00 FF 
0ed04     8E 14 06 F6 | 	mov	arg02, ##@LR__5544
0ed08     00 12 06 F6 | 	mov	arg01, #0
0ed0c     00 16 06 F6 | 	mov	arg03, #0
0ed10     64 35 B1 FD | 	call	#__system___basic_print_string
0ed14     52 00 00 FF 
0ed18     1C E4 05 F1 | 	add	objptr, ##42012
0ed1c     F2 14 02 FB | 	rdlong	arg02, objptr
0ed20     52 00 00 FF 
0ed24     1C E4 85 F1 | 	sub	objptr, ##42012
0ed28     00 12 06 F6 | 	mov	arg01, #0
0ed2c     00 16 06 F6 | 	mov	arg03, #0
0ed30     0A 18 06 F6 | 	mov	arg04, #10
0ed34     84 35 B1 FD | 	call	#__system___basic_print_integer
0ed38     8C 01 00 FF 
0ed3c     9C 14 06 F6 | 	mov	arg02, ##@LR__5545
0ed40     00 12 06 F6 | 	mov	arg01, #0
0ed44     00 16 06 F6 | 	mov	arg03, #0
0ed48     2C 35 B1 FD | 	call	#__system___basic_print_string
0ed4c     00 1E 06 F6 | 	mov	local01, #0
0ed50     52 00 00 FF 
0ed54     1C E4 05 F1 | 	add	objptr, ##42012
0ed58     F2 12 02 FB | 	rdlong	arg01, objptr
0ed5c     52 00 00 FF 
0ed60     1C E4 85 F1 | 	sub	objptr, ##42012
0ed64     EC 50 B1 FD | 	call	#__system___strerror
0ed68     FD 14 02 F6 | 	mov	arg02, result1
0ed6c     0F 13 02 F6 | 	mov	arg01, local01
0ed70     00 16 06 F6 | 	mov	arg03, #0
0ed74     00 35 B1 FD | 	call	#__system___basic_print_string
0ed78     00 12 06 F6 | 	mov	arg01, #0
0ed7c     0A 14 06 F6 | 	mov	arg02, #10
0ed80     00 16 06 F6 | 	mov	arg03, #0
0ed84     98 34 B1 FD | 	call	#__system___basic_print_char
0ed88     00 12 06 F6 | 	mov	arg01, #0
0ed8c     20 85 B1 FD | 	call	#__system___getiolock_0568
0ed90     FD 00 68 FC | 	wrlong	#0, result1
0ed94     09 12 06 F6 | 	mov	arg01, #9
0ed98     84 7A B1 FD | 	call	#__system__close
0ed9c     74 06 90 FD | 	jmp	#LR__1303
0eda0                 | LR__1284
0eda0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0eda0     04 4E 05 F1 | 	add	fp, #4
0eda4     A7 00 68 FC | 	wrlong	#0, fp
0eda8                 | LR__1285
0eda8     A7 1E 02 FB | 	rdlong	local01, fp
0edac     01 1E 66 F0 | 	shl	local01, #1
0edb0     11 14 06 F6 | 	mov	arg02, #17
0edb4     0F 15 02 F1 | 	add	arg02, local01
0edb8     78 4E 05 F1 | 	add	fp, #120
0edbc     A7 16 02 F6 | 	mov	arg03, fp
0edc0     7C 4E 85 F1 | 	sub	fp, #124
0edc4     09 12 06 F6 | 	mov	arg01, #9
0edc8     01 18 06 F6 | 	mov	arg04, #1
0edcc     02 1A 06 F6 | 	mov	arg05, #2
0edd0     20 36 B1 FD | 	call	#__system___basic_get
0edd4     10 4E 05 F1 | 	add	fp, #16
0edd8     A7 12 02 FB | 	rdlong	arg01, fp
0eddc     0B 12 66 F0 | 	shl	arg01, #11
0ede0     0C 4E 85 F1 | 	sub	fp, #12
0ede4     A7 1E 02 FB | 	rdlong	local01, fp
0ede8     01 1E 66 F0 | 	shl	local01, #1
0edec     0F 13 02 F1 | 	add	arg01, local01
0edf0     78 4E 05 F1 | 	add	fp, #120
0edf4     A7 14 E2 FA | 	rdword	arg02, fp
0edf8     7C 4E 85 F1 | 	sub	fp, #124
0edfc     0F 14 66 F7 | 	signx	arg02, #15
0ee00     94 F3 B0 FD | 	call	#_psdpoke
0ee04     04 4E 05 F1 | 	add	fp, #4
0ee08     A7 1E 02 FB | 	rdlong	local01, fp
0ee0c     01 1E 06 F1 | 	add	local01, #1
0ee10     A7 1E 62 FC | 	wrlong	local01, fp
0ee14     02 00 00 FF 
0ee18     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0ee1c     88 FF 9F CD |  if_b	jmp	#LR__1285
0ee20     04 4E 85 F1 | 	sub	fp, #4
0ee24                 | '     close #9
0ee24     09 12 06 F6 | 	mov	arg01, #9
0ee28     F4 79 B1 FD | 	call	#__system__close
0ee2c                 | '     return
0ee2c     E4 05 90 FD | 	jmp	#LR__1303
0ee30                 | LR__1286
0ee30                 | '     if wptr < ($80000 - 2048) then 
0ee30     14 4E 05 F1 | 	add	fp, #20
0ee34     A7 1E 02 FB | 	rdlong	local01, fp
0ee38     14 4E 85 F1 | 	sub	fp, #20
0ee3c     FC 03 00 FF 
0ee40     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0ee44     70 00 90 3D |  if_ae	jmp	#LR__1288
0ee48                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0ee48     04 4E 05 F1 | 	add	fp, #4
0ee4c     A7 00 68 FC | 	wrlong	#0, fp
0ee50     04 4E 85 F1 | 	sub	fp, #4
0ee54                 | LR__1287
0ee54     10 4E 05 F1 | 	add	fp, #16
0ee58     A7 1E 02 FB | 	rdlong	local01, fp
0ee5c     0B 1E 66 F0 | 	shl	local01, #11
0ee60     0C 4E 85 F1 | 	sub	fp, #12
0ee64     A7 1A 02 FB | 	rdlong	arg05, fp
0ee68     0D 19 02 F6 | 	mov	arg04, arg05
0ee6c     01 18 66 F0 | 	shl	arg04, #1
0ee70     0C 1F 02 F1 | 	add	local01, arg04
0ee74     10 4E 05 F1 | 	add	fp, #16
0ee78     A7 12 02 FB | 	rdlong	arg01, fp
0ee7c     14 4E 85 F1 | 	sub	fp, #20
0ee80     01 1A 66 F0 | 	shl	arg05, #1
0ee84     0D 13 02 F1 | 	add	arg01, arg05
0ee88     09 15 E2 FA | 	rdword	arg02, arg01
0ee8c     0F 13 02 F6 | 	mov	arg01, local01
0ee90     04 F3 B0 FD | 	call	#_psdpoke
0ee94     04 4E 05 F1 | 	add	fp, #4
0ee98     A7 1E 02 FB | 	rdlong	local01, fp
0ee9c     01 1E 06 F1 | 	add	local01, #1
0eea0     A7 1E 62 FC | 	wrlong	local01, fp
0eea4     04 4E 85 F1 | 	sub	fp, #4
0eea8     02 00 00 FF 
0eeac     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0eeb0     A0 FF 9F CD |  if_b	jmp	#LR__1287
0eeb4     5C 05 90 FD | 	jmp	#LR__1303
0eeb8                 | LR__1288
0eeb8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0eeb8     04 4E 05 F1 | 	add	fp, #4
0eebc     A7 00 68 FC | 	wrlong	#0, fp
0eec0     04 4E 85 F1 | 	sub	fp, #4
0eec4                 | LR__1289
0eec4     10 4E 05 F1 | 	add	fp, #16
0eec8     A7 1E 02 FB | 	rdlong	local01, fp
0eecc     0B 1E 66 F0 | 	shl	local01, #11
0eed0     0C 4E 85 F1 | 	sub	fp, #12
0eed4     A7 1A 02 FB | 	rdlong	arg05, fp
0eed8     0D 19 02 F6 | 	mov	arg04, arg05
0eedc     01 18 66 F0 | 	shl	arg04, #1
0eee0     0C 1F 02 F1 | 	add	local01, arg04
0eee4     10 4E 05 F1 | 	add	fp, #16
0eee8     A7 12 02 FB | 	rdlong	arg01, fp
0eeec     14 4E 85 F1 | 	sub	fp, #20
0eef0     01 1A 66 F0 | 	shl	arg05, #1
0eef4     0D 13 02 F1 | 	add	arg01, arg05
0eef8     DC F3 B0 FD | 	call	#_psdpeek
0eefc     FD 14 02 F6 | 	mov	arg02, result1
0ef00     0F 13 02 F6 | 	mov	arg01, local01
0ef04     90 F2 B0 FD | 	call	#_psdpoke
0ef08     04 4E 05 F1 | 	add	fp, #4
0ef0c     A7 1E 02 FB | 	rdlong	local01, fp
0ef10     01 1E 06 F1 | 	add	local01, #1
0ef14     A7 1E 62 FC | 	wrlong	local01, fp
0ef18     04 4E 85 F1 | 	sub	fp, #4
0ef1c     02 00 00 FF 
0ef20     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0ef24     9C FF 9F CD |  if_b	jmp	#LR__1289
0ef28                 | '     return 
0ef28     E8 04 90 FD | 	jmp	#LR__1303
0ef2c                 | '   return
0ef2c                 | LR__1290
0ef2c                 | ' for i=0 to 15 : harm(i)=0: next i  
0ef2c     04 4E 05 F1 | 	add	fp, #4
0ef30     A7 00 68 FC | 	wrlong	#0, fp
0ef34     97 16 48 FB | 	callpa	#(@LR__1292-@LR__1291)>>2,fcache_load_ptr_
0ef38                 | LR__1291
0ef38     A7 1E 02 FB | 	rdlong	local01, fp
0ef3c     02 1E 66 F0 | 	shl	local01, #2
0ef40     38 4E 05 F1 | 	add	fp, #56
0ef44     A7 1E 02 F1 | 	add	local01, fp
0ef48     0F 01 68 FC | 	wrlong	#0, local01
0ef4c     38 4E 85 F1 | 	sub	fp, #56
0ef50     A7 1E 02 FB | 	rdlong	local01, fp
0ef54     01 1E 06 F1 | 	add	local01, #1
0ef58     A7 1E 62 FC | 	wrlong	local01, fp
0ef5c     10 1E 56 F2 | 	cmps	local01, #16 wc
0ef60     D4 FF 9F CD |  if_b	jmp	#LR__1291
0ef64                 | LR__1292
0ef64     04 4E 85 F1 | 	sub	fp, #4
0ef68                 | ' for i=numpar to 2 step -1 
0ef68     A7 1E 02 FB | 	rdlong	local01, fp
0ef6c     04 4E 05 F1 | 	add	fp, #4
0ef70     A7 1E 62 FC | 	wrlong	local01, fp
0ef74     04 4E 85 F1 | 	sub	fp, #4
0ef78                 | LR__1293
0ef78     5C C8 BF FD | 	call	#_pop
0ef7c     2C 4E 05 F1 | 	add	fp, #44
0ef80     A7 FA 61 FC | 	wrlong	result1, fp
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 FC 61 FC | 	wrlong	result2, fp
0ef8c     04 4E 05 F1 | 	add	fp, #4
0ef90     A7 FE 61 FC | 	wrlong	result3, fp
0ef94     30 4E 85 F1 | 	sub	fp, #48
0ef98     A7 1E 02 FB | 	rdlong	local01, fp
0ef9c     02 1E 86 F1 | 	sub	local01, #2
0efa0     02 1E 66 F0 | 	shl	local01, #2
0efa4     38 4E 05 F1 | 	add	fp, #56
0efa8     A7 1E 02 F1 | 	add	local01, fp
0efac     10 4E 85 F1 | 	sub	fp, #16
0efb0     A7 12 02 F6 | 	mov	arg01, fp
0efb4     2C 4E 85 F1 | 	sub	fp, #44
0efb8     BC CA BF FD | 	call	#_converttofloat
0efbc     0F FB 61 FC | 	wrlong	result1, local01
0efc0     04 4E 05 F1 | 	add	fp, #4
0efc4     A7 1E 02 FB | 	rdlong	local01, fp
0efc8     01 1E 86 F1 | 	sub	local01, #1
0efcc     A7 1E 62 FC | 	wrlong	local01, fp
0efd0     04 4E 85 F1 | 	sub	fp, #4
0efd4     02 1E 56 F2 | 	cmps	local01, #2 wc
0efd8     9C FF 9F 3D |  if_ae	jmp	#LR__1293
0efdc     F8 C7 BF FD | 	call	#_pop
0efe0     FF 1E 02 F6 | 	mov	local01, result3
0efe4     2C 4E 05 F1 | 	add	fp, #44
0efe8     A7 FA 61 FC | 	wrlong	result1, fp
0efec     04 4E 05 F1 | 	add	fp, #4
0eff0     A7 FC 61 FC | 	wrlong	result2, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 1E 62 FC | 	wrlong	local01, fp
0effc     08 4E 85 F1 | 	sub	fp, #8
0f000     A7 12 02 F6 | 	mov	arg01, fp
0f004     2C 4E 85 F1 | 	sub	fp, #44
0f008     B0 C9 BF FD | 	call	#_converttoint
0f00c     10 4E 05 F1 | 	add	fp, #16
0f010     A7 FA 61 FC | 	wrlong	result1, fp
0f014                 | ' t1=pop()
0f014                 | ' channel=converttoint(t1) : : if channel>31 then return
0f014     FD 1E 02 F6 | 	mov	local01, result1
0f018     10 4E 85 F1 | 	sub	fp, #16
0f01c     20 1E 56 F2 | 	cmps	local01, #32 wc
0f020     F0 03 90 3D |  if_ae	jmp	#LR__1303
0f024     20 4E 05 F1 | 	add	fp, #32
0f028     A7 00 68 FC | 	wrlong	#0, fp
0f02c                 | ' max=0
0f02c                 | ' if harm(0)<0 then
0f02c     1C 4E 05 F1 | 	add	fp, #28
0f030     A7 12 02 FB | 	rdlong	arg01, fp
0f034     3C 4E 85 F1 | 	sub	fp, #60
0f038     00 14 06 F6 | 	mov	arg02, #0
0f03c     01 16 06 F6 | 	mov	arg03, #1
0f040     30 57 B1 FD | 	call	#__system___float_cmp
0f044     00 FA 55 F2 | 	cmps	result1, #0 wc
0f048     04 01 90 3D |  if_ae	jmp	#LR__1296
0f04c     3C 4E 05 F1 | 	add	fp, #60
0f050     A7 FA 01 FB | 	rdlong	result1, fp
0f054     1F FA 05 F4 | 	bitl	result1, #31
0f058     24 4E 85 F1 | 	sub	fp, #36
0f05c     A7 FA 61 FC | 	wrlong	result1, fp
0f060     28 4E 05 F1 | 	add	fp, #40
0f064     A7 FA 01 FB | 	rdlong	result1, fp
0f068     1F FA 05 F4 | 	bitl	result1, #31
0f06c     24 4E 85 F1 | 	sub	fp, #36
0f070     A7 FA 61 FC | 	wrlong	result1, fp
0f074     20 4E 05 F1 | 	add	fp, #32
0f078     00 C0 9F FF 
0f07c     A7 00 68 FC | 	wrlong	##1065353216, fp
0f080     24 4E 85 F1 | 	sub	fp, #36
0f084     A7 1E 02 FB | 	rdlong	local01, fp
0f088     28 4E 05 F1 | 	add	fp, #40
0f08c     A7 1E 62 FC | 	wrlong	local01, fp
0f090     24 4E 85 F1 | 	sub	fp, #36
0f094     A7 1E 02 FB | 	rdlong	local01, fp
0f098     28 4E 05 F1 | 	add	fp, #40
0f09c     A7 1E 62 FC | 	wrlong	local01, fp
0f0a0                 | '   harm(0)=1
0f0a0                 | '   harm(1)=even
0f0a0                 | '   harm(2)=odd
0f0a0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f0a0     40 4E 85 F1 | 	sub	fp, #64
0f0a4     A7 06 68 FC | 	wrlong	#3, fp
0f0a8                 | LR__1294
0f0a8     A7 1A 02 FB | 	rdlong	arg05, fp
0f0ac     0D 21 02 F6 | 	mov	local02, arg05
0f0b0     02 20 66 F0 | 	shl	local02, #2
0f0b4     38 4E 05 F1 | 	add	fp, #56
0f0b8     A7 20 02 F1 | 	add	local02, fp
0f0bc     02 1A 86 F1 | 	sub	arg05, #2
0f0c0     02 1A 66 F0 | 	shl	arg05, #2
0f0c4     A7 1A 02 F1 | 	add	arg05, fp
0f0c8     0D 13 02 FB | 	rdlong	arg01, arg05
0f0cc     24 4E 85 F1 | 	sub	fp, #36
0f0d0     A7 14 02 FB | 	rdlong	arg02, fp
0f0d4     18 4E 85 F1 | 	sub	fp, #24
0f0d8     64 52 B1 FD | 	call	#__system___float_mul
0f0dc     10 FB 61 FC | 	wrlong	result1, local02
0f0e0     04 4E 05 F1 | 	add	fp, #4
0f0e4     A7 22 02 FB | 	rdlong	local03, fp
0f0e8     02 22 06 F1 | 	add	local03, #2
0f0ec     A7 22 62 FC | 	wrlong	local03, fp
0f0f0     10 22 56 F2 | 	cmps	local03, #16 wc
0f0f4     B0 FF 9F CD |  if_b	jmp	#LR__1294
0f0f8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f0f8     A7 08 68 FC | 	wrlong	#4, fp
0f0fc                 | LR__1295
0f0fc     A7 22 02 FB | 	rdlong	local03, fp
0f100     11 21 02 F6 | 	mov	local02, local03
0f104     02 20 66 F0 | 	shl	local02, #2
0f108     38 4E 05 F1 | 	add	fp, #56
0f10c     A7 20 02 F1 | 	add	local02, fp
0f110     02 22 86 F1 | 	sub	local03, #2
0f114     02 22 66 F0 | 	shl	local03, #2
0f118     A7 22 02 F1 | 	add	local03, fp
0f11c     11 13 02 FB | 	rdlong	arg01, local03
0f120     20 4E 85 F1 | 	sub	fp, #32
0f124     A7 14 02 FB | 	rdlong	arg02, fp
0f128     1C 4E 85 F1 | 	sub	fp, #28
0f12c     10 52 B1 FD | 	call	#__system___float_mul
0f130     10 FB 61 FC | 	wrlong	result1, local02
0f134     04 4E 05 F1 | 	add	fp, #4
0f138     A7 22 02 FB | 	rdlong	local03, fp
0f13c     02 22 06 F1 | 	add	local03, #2
0f140     A7 22 62 FC | 	wrlong	local03, fp
0f144     0F 22 56 F2 | 	cmps	local03, #15 wc
0f148     B0 FF 9F CD |  if_b	jmp	#LR__1295
0f14c     04 4E 85 F1 | 	sub	fp, #4
0f150                 | LR__1296
0f150                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f150     3C 4E 05 F1 | 	add	fp, #60
0f154     A7 12 02 FB | 	rdlong	arg01, fp
0f158     3C 4E 85 F1 | 	sub	fp, #60
0f15c     00 14 06 F6 | 	mov	arg02, #0
0f160     01 16 66 F6 | 	neg	arg03, #1
0f164     0C 56 B1 FD | 	call	#__system___float_cmp
0f168     00 FA 55 F2 | 	cmps	result1, #0 wc
0f16c     A4 02 90 CD |  if_b	jmp	#LR__1302
0f170                 | '   for i=0 to 1023
0f170     04 4E 05 F1 | 	add	fp, #4
0f174     A7 00 68 FC | 	wrlong	#0, fp
0f178     04 4E 85 F1 | 	sub	fp, #4
0f17c                 | LR__1297
0f17c     24 4E 05 F1 | 	add	fp, #36
0f180     A7 00 68 FC | 	wrlong	#0, fp
0f184                 | '     spl=0
0f184                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f184     1C 4E 85 F1 | 	sub	fp, #28
0f188     A7 00 68 FC | 	wrlong	#0, fp
0f18c                 | LR__1298
0f18c     A7 20 02 FB | 	rdlong	local02, fp
0f190     02 20 66 F0 | 	shl	local02, #2
0f194     34 4E 05 F1 | 	add	fp, #52
0f198     A7 20 02 F1 | 	add	local02, fp
0f19c     10 23 02 FB | 	rdlong	local03, local02
0f1a0     87 E4 1D FF 
0f1a4     DB 21 06 F6 | 	mov	local02, ##1003032539
0f1a8     38 4E 85 F1 | 	sub	fp, #56
0f1ac     A7 12 02 FB | 	rdlong	arg01, fp
0f1b0     04 4E 85 F1 | 	sub	fp, #4
0f1b4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1b8     1F 24 C6 C9 |  if_b	decod	local04, #31
0f1bc     00 24 06 36 |  if_ae	mov	local04, #0
0f1c0     78 4D B1 FD | 	call	#__system___float_fromuns
0f1c4     12 FB 61 F5 | 	xor	result1, local04
0f1c8     FD 14 02 F6 | 	mov	arg02, result1
0f1cc     10 13 02 F6 | 	mov	arg01, local02
0f1d0     6C 51 B1 FD | 	call	#__system___float_mul
0f1d4     FD 20 02 F6 | 	mov	local02, result1
0f1d8     08 4E 05 F1 | 	add	fp, #8
0f1dc     A7 12 02 FB | 	rdlong	arg01, fp
0f1e0     08 4E 85 F1 | 	sub	fp, #8
0f1e4     01 12 06 F1 | 	add	arg01, #1
0f1e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f1ec     1F 24 C6 C9 |  if_b	decod	local04, #31
0f1f0     00 24 06 36 |  if_ae	mov	local04, #0
0f1f4     44 4D B1 FD | 	call	#__system___float_fromuns
0f1f8     12 FB 61 F5 | 	xor	result1, local04
0f1fc     FD 14 02 F6 | 	mov	arg02, result1
0f200     10 13 02 F6 | 	mov	arg01, local02
0f204     38 51 B1 FD | 	call	#__system___float_mul
0f208     FD 12 02 F6 | 	mov	arg01, result1
0f20c     90 5A B1 FD | 	call	#__system____builtin_sinf
0f210     FD 14 02 F6 | 	mov	arg02, result1
0f214     11 13 02 F6 | 	mov	arg01, local03
0f218     24 51 B1 FD | 	call	#__system___float_mul
0f21c     FD 14 02 F6 | 	mov	arg02, result1
0f220     24 4E 05 F1 | 	add	fp, #36
0f224     A7 12 02 FB | 	rdlong	arg01, fp
0f228     24 4E 85 F1 | 	sub	fp, #36
0f22c     40 4D B1 FD | 	call	#__system___float_add
0f230     24 4E 05 F1 | 	add	fp, #36
0f234     A7 FA 61 FC | 	wrlong	result1, fp
0f238     1C 4E 85 F1 | 	sub	fp, #28
0f23c     A7 16 02 FB | 	rdlong	arg03, fp
0f240     01 16 06 F1 | 	add	arg03, #1
0f244     A7 16 62 FC | 	wrlong	arg03, fp
0f248     10 16 56 F2 | 	cmps	arg03, #16 wc
0f24c     3C FF 9F CD |  if_b	jmp	#LR__1298
0f250                 | '     if abs(spl)>max then max=abs(spl)  
0f250     1C 4E 05 F1 | 	add	fp, #28
0f254     A7 12 02 FB | 	rdlong	arg01, fp
0f258     1F 12 06 F4 | 	bitl	arg01, #31
0f25c     04 4E 85 F1 | 	sub	fp, #4
0f260     A7 14 02 FB | 	rdlong	arg02, fp
0f264     20 4E 85 F1 | 	sub	fp, #32
0f268     01 16 66 F6 | 	neg	arg03, #1
0f26c     04 55 B1 FD | 	call	#__system___float_cmp
0f270     01 FA 55 F2 | 	cmps	result1, #1 wc
0f274     18 00 90 CD |  if_b	jmp	#LR__1299
0f278     24 4E 05 F1 | 	add	fp, #36
0f27c     A7 FA 01 FB | 	rdlong	result1, fp
0f280     1F FA 05 F4 | 	bitl	result1, #31
0f284     04 4E 85 F1 | 	sub	fp, #4
0f288     A7 FA 61 FC | 	wrlong	result1, fp
0f28c     20 4E 85 F1 | 	sub	fp, #32
0f290                 | LR__1299
0f290     04 4E 05 F1 | 	add	fp, #4
0f294     A7 22 02 FB | 	rdlong	local03, fp
0f298     01 22 06 F1 | 	add	local03, #1
0f29c     A7 22 62 FC | 	wrlong	local03, fp
0f2a0     04 4E 85 F1 | 	sub	fp, #4
0f2a4     02 00 00 FF 
0f2a8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f2ac     CC FE 9F CD |  if_b	jmp	#LR__1297
0f2b0                 | '   for i=0 to 1023
0f2b0     04 4E 05 F1 | 	add	fp, #4
0f2b4     A7 00 68 FC | 	wrlong	#0, fp
0f2b8     04 4E 85 F1 | 	sub	fp, #4
0f2bc                 | LR__1300
0f2bc     24 4E 05 F1 | 	add	fp, #36
0f2c0     A7 00 68 FC | 	wrlong	#0, fp
0f2c4                 | '     spl=0
0f2c4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0f2c4     1C 4E 85 F1 | 	sub	fp, #28
0f2c8     A7 00 68 FC | 	wrlong	#0, fp
0f2cc                 | LR__1301
0f2cc     A7 22 02 FB | 	rdlong	local03, fp
0f2d0     02 22 66 F0 | 	shl	local03, #2
0f2d4     34 4E 05 F1 | 	add	fp, #52
0f2d8     A7 22 02 F1 | 	add	local03, fp
0f2dc     11 23 02 FB | 	rdlong	local03, local03
0f2e0     1C 4E 85 F1 | 	sub	fp, #28
0f2e4     A7 14 02 FB | 	rdlong	arg02, fp
0f2e8     20 4E 85 F1 | 	sub	fp, #32
0f2ec     58 7F 23 FF 
0f2f0     00 12 06 F6 | 	mov	arg01, ##1191096320
0f2f4     4C 52 B1 FD | 	call	#__system___float_div
0f2f8     FD 14 02 F6 | 	mov	arg02, result1
0f2fc     11 13 02 F6 | 	mov	arg01, local03
0f300     3C 50 B1 FD | 	call	#__system___float_mul
0f304     FD 22 02 F6 | 	mov	local03, result1
0f308     87 E4 1D FF 
0f30c     DB 21 06 F6 | 	mov	local02, ##1003032539
0f310     04 4E 05 F1 | 	add	fp, #4
0f314     A7 12 02 FB | 	rdlong	arg01, fp
0f318     04 4E 85 F1 | 	sub	fp, #4
0f31c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f320     1F 24 C6 C9 |  if_b	decod	local04, #31
0f324     00 24 06 36 |  if_ae	mov	local04, #0
0f328     10 4C B1 FD | 	call	#__system___float_fromuns
0f32c     12 FB 61 F5 | 	xor	result1, local04
0f330     FD 14 02 F6 | 	mov	arg02, result1
0f334     10 13 02 F6 | 	mov	arg01, local02
0f338     04 50 B1 FD | 	call	#__system___float_mul
0f33c     FD 20 02 F6 | 	mov	local02, result1
0f340     08 4E 05 F1 | 	add	fp, #8
0f344     A7 12 02 FB | 	rdlong	arg01, fp
0f348     08 4E 85 F1 | 	sub	fp, #8
0f34c     01 12 06 F1 | 	add	arg01, #1
0f350     09 13 52 F6 | 	abs	arg01, arg01 wc
0f354     1F 24 C6 C9 |  if_b	decod	local04, #31
0f358     00 24 06 36 |  if_ae	mov	local04, #0
0f35c     DC 4B B1 FD | 	call	#__system___float_fromuns
0f360     12 FB 61 F5 | 	xor	result1, local04
0f364     FD 14 02 F6 | 	mov	arg02, result1
0f368     10 13 02 F6 | 	mov	arg01, local02
0f36c     D0 4F B1 FD | 	call	#__system___float_mul
0f370     FD 12 02 F6 | 	mov	arg01, result1
0f374     28 59 B1 FD | 	call	#__system____builtin_sinf
0f378     FD 14 02 F6 | 	mov	arg02, result1
0f37c     11 13 02 F6 | 	mov	arg01, local03
0f380     BC 4F B1 FD | 	call	#__system___float_mul
0f384     FD 14 02 F6 | 	mov	arg02, result1
0f388     24 4E 05 F1 | 	add	fp, #36
0f38c     A7 12 02 FB | 	rdlong	arg01, fp
0f390     24 4E 85 F1 | 	sub	fp, #36
0f394     D8 4B B1 FD | 	call	#__system___float_add
0f398     24 4E 05 F1 | 	add	fp, #36
0f39c     A7 FA 61 FC | 	wrlong	result1, fp
0f3a0     1C 4E 85 F1 | 	sub	fp, #28
0f3a4     A7 22 02 FB | 	rdlong	local03, fp
0f3a8     01 22 06 F1 | 	add	local03, #1
0f3ac     A7 22 62 FC | 	wrlong	local03, fp
0f3b0     10 22 56 F2 | 	cmps	local03, #16 wc
0f3b4     14 FF 9F CD |  if_b	jmp	#LR__1301
0f3b8     08 4E 05 F1 | 	add	fp, #8
0f3bc     A7 22 02 FB | 	rdlong	local03, fp
0f3c0     0B 22 66 F0 | 	shl	local03, #11
0f3c4     0C 4E 85 F1 | 	sub	fp, #12
0f3c8     A7 20 02 FB | 	rdlong	local02, fp
0f3cc     01 20 66 F0 | 	shl	local02, #1
0f3d0     10 23 02 F1 | 	add	local03, local02
0f3d4     20 4E 05 F1 | 	add	fp, #32
0f3d8     A7 12 02 FB | 	rdlong	arg01, fp
0f3dc     24 4E 85 F1 | 	sub	fp, #36
0f3e0     01 14 06 F6 | 	mov	arg02, #1
0f3e4     20 54 B1 FD | 	call	#__system___float_tointeger
0f3e8     FD 14 02 F6 | 	mov	arg02, result1
0f3ec     11 13 02 F6 | 	mov	arg01, local03
0f3f0     A4 ED B0 FD | 	call	#_psdpoke
0f3f4     04 4E 05 F1 | 	add	fp, #4
0f3f8     A7 22 02 FB | 	rdlong	local03, fp
0f3fc     01 22 06 F1 | 	add	local03, #1
0f400     A7 22 62 FC | 	wrlong	local03, fp
0f404     04 4E 85 F1 | 	sub	fp, #4
0f408     02 00 00 FF 
0f40c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f410     A8 FE 9F CD |  if_b	jmp	#LR__1300
0f414                 | LR__1302
0f414                 | LR__1303
0f414     A7 F0 03 F6 | 	mov	ptra, fp
0f418     B2 00 A0 FD | 	call	#popregs_
0f41c                 | _do_defsnd_ret
0f41c     2D 00 64 FD | 	ret
0f420                 | 
0f420                 | ' 
0f420                 | ' '-------------------- defsprite
0f420                 | ' 
0f420                 | ' sub do_defsprite
0f420                 | _do_defsprite
0f420     07 4A 05 F6 | 	mov	COUNT_, #7
0f424     A8 00 A0 FD | 	call	#pushregs_
0f428     60 F0 07 F1 | 	add	ptra, #96
0f42c     A8 C3 BF FD | 	call	#_pop
0f430     FD 16 02 F6 | 	mov	arg03, result1
0f434     FE 14 02 F6 | 	mov	arg02, result2
0f438     FF 12 02 F6 | 	mov	arg01, result3
0f43c     30 4E 05 F1 | 	add	fp, #48
0f440     A7 16 62 FC | 	wrlong	arg03, fp
0f444     04 4E 05 F1 | 	add	fp, #4
0f448     A7 14 62 FC | 	wrlong	arg02, fp
0f44c     04 4E 05 F1 | 	add	fp, #4
0f450     A7 12 62 FC | 	wrlong	arg01, fp
0f454     38 4E 85 F1 | 	sub	fp, #56
0f458     7C C3 BF FD | 	call	#_pop
0f45c     FD 16 02 F6 | 	mov	arg03, result1
0f460     FE 14 02 F6 | 	mov	arg02, result2
0f464     FF 12 02 F6 | 	mov	arg01, result3
0f468     24 4E 05 F1 | 	add	fp, #36
0f46c     A7 16 62 FC | 	wrlong	arg03, fp
0f470     04 4E 05 F1 | 	add	fp, #4
0f474     A7 14 62 FC | 	wrlong	arg02, fp
0f478     04 4E 05 F1 | 	add	fp, #4
0f47c     A7 12 62 FC | 	wrlong	arg01, fp
0f480     2C 4E 85 F1 | 	sub	fp, #44
0f484     50 C3 BF FD | 	call	#_pop
0f488     FD 16 02 F6 | 	mov	arg03, result1
0f48c     FE 14 02 F6 | 	mov	arg02, result2
0f490     FF 12 02 F6 | 	mov	arg01, result3
0f494     18 4E 05 F1 | 	add	fp, #24
0f498     A7 16 62 FC | 	wrlong	arg03, fp
0f49c     04 4E 05 F1 | 	add	fp, #4
0f4a0     A7 14 62 FC | 	wrlong	arg02, fp
0f4a4     04 4E 05 F1 | 	add	fp, #4
0f4a8     A7 12 62 FC | 	wrlong	arg01, fp
0f4ac     20 4E 85 F1 | 	sub	fp, #32
0f4b0     24 C3 BF FD | 	call	#_pop
0f4b4     FD 16 02 F6 | 	mov	arg03, result1
0f4b8     FE 14 02 F6 | 	mov	arg02, result2
0f4bc     FF 12 02 F6 | 	mov	arg01, result3
0f4c0     0C 4E 05 F1 | 	add	fp, #12
0f4c4     A7 16 62 FC | 	wrlong	arg03, fp
0f4c8     04 4E 05 F1 | 	add	fp, #4
0f4cc     A7 14 62 FC | 	wrlong	arg02, fp
0f4d0     04 4E 05 F1 | 	add	fp, #4
0f4d4     A7 12 62 FC | 	wrlong	arg01, fp
0f4d8     14 4E 85 F1 | 	sub	fp, #20
0f4dc     F8 C2 BF FD | 	call	#_pop
0f4e0     FF 16 02 F6 | 	mov	arg03, result3
0f4e4     A7 FA 61 FC | 	wrlong	result1, fp
0f4e8     04 4E 05 F1 | 	add	fp, #4
0f4ec     A7 FC 61 FC | 	wrlong	result2, fp
0f4f0     04 4E 05 F1 | 	add	fp, #4
0f4f4     A7 16 62 FC | 	wrlong	arg03, fp
0f4f8     08 4E 85 F1 | 	sub	fp, #8
0f4fc     A7 12 02 F6 | 	mov	arg01, fp
0f500     B8 C4 BF FD | 	call	#_converttoint
0f504     3C 4E 05 F1 | 	add	fp, #60
0f508     A7 FA 61 FC | 	wrlong	result1, fp
0f50c     30 4E 85 F1 | 	sub	fp, #48
0f510     A7 12 02 F6 | 	mov	arg01, fp
0f514     0C 4E 85 F1 | 	sub	fp, #12
0f518     A0 C4 BF FD | 	call	#_converttoint
0f51c     40 4E 05 F1 | 	add	fp, #64
0f520     A7 FA 61 FC | 	wrlong	result1, fp
0f524     28 4E 85 F1 | 	sub	fp, #40
0f528     A7 12 02 F6 | 	mov	arg01, fp
0f52c     18 4E 85 F1 | 	sub	fp, #24
0f530     88 C4 BF FD | 	call	#_converttoint
0f534     44 4E 05 F1 | 	add	fp, #68
0f538     A7 FA 61 FC | 	wrlong	result1, fp
0f53c     20 4E 85 F1 | 	sub	fp, #32
0f540     A7 12 02 F6 | 	mov	arg01, fp
0f544     24 4E 85 F1 | 	sub	fp, #36
0f548     70 C4 BF FD | 	call	#_converttoint
0f54c     48 4E 05 F1 | 	add	fp, #72
0f550     A7 FA 61 FC | 	wrlong	result1, fp
0f554     18 4E 85 F1 | 	sub	fp, #24
0f558     A7 12 02 F6 | 	mov	arg01, fp
0f55c     30 4E 85 F1 | 	sub	fp, #48
0f560     58 C4 BF FD | 	call	#_converttoint
0f564     4C 4E 05 F1 | 	add	fp, #76
0f568     A7 FA 61 FC | 	wrlong	result1, fp
0f56c                 | ' 
0f56c                 | ' t5=pop()
0f56c                 | ' t4=pop()
0f56c                 | ' t3=pop()
0f56c                 | ' t2=pop()
0f56c                 | ' t1=pop()
0f56c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0f56c                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0f56c     10 4E 85 F1 | 	sub	fp, #16
0f570     A7 16 02 FB | 	rdlong	arg03, fp
0f574     3C 4E 85 F1 | 	sub	fp, #60
0f578     02 16 66 F0 | 	shl	arg03, #2
0f57c     51 00 00 FF 
0f580     68 E5 05 F1 | 	add	objptr, ##41832
0f584     F2 16 02 F1 | 	add	arg03, objptr
0f588     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f58c     51 00 00 FF 
0f590     68 E5 85 F1 | 	sub	objptr, ##41832
0f594     2C 00 90 AD |  if_e	jmp	#LR__1310
0f598     3C 4E 05 F1 | 	add	fp, #60
0f59c     A7 16 02 FB | 	rdlong	arg03, fp
0f5a0     3C 4E 85 F1 | 	sub	fp, #60
0f5a4     02 16 66 F0 | 	shl	arg03, #2
0f5a8     51 00 00 FF 
0f5ac     68 E5 05 F1 | 	add	objptr, ##41832
0f5b0     F2 16 02 F1 | 	add	arg03, objptr
0f5b4     0B 13 02 FB | 	rdlong	arg01, arg03
0f5b8     51 00 00 FF 
0f5bc     68 E5 85 F1 | 	sub	objptr, ##41832
0f5c0     E0 61 B1 FD | 	call	#__system___gc_free
0f5c4                 | LR__1310
0f5c4     3C 4E 05 F1 | 	add	fp, #60
0f5c8     A7 1E 02 FB | 	rdlong	local01, fp
0f5cc     0C 4E 05 F1 | 	add	fp, #12
0f5d0     A7 16 02 FB | 	rdlong	arg03, fp
0f5d4     04 4E 05 F1 | 	add	fp, #4
0f5d8     A7 14 02 FB | 	rdlong	arg02, fp
0f5dc     0A 17 02 FD | 	qmul	arg03, arg02
0f5e0     02 1E 66 F0 | 	shl	local01, #2
0f5e4     51 00 00 FF 
0f5e8     68 E5 05 F1 | 	add	objptr, ##41832
0f5ec     F2 1E 02 F1 | 	add	local01, objptr
0f5f0     4C 4E 85 F1 | 	sub	fp, #76
0f5f4     51 00 00 FF 
0f5f8     68 E5 85 F1 | 	sub	objptr, ##41832
0f5fc     18 12 62 FD | 	getqx	arg01
0f600     64 60 B1 FD | 	call	#__system___gc_alloc_managed
0f604     0F FB 61 FC | 	wrlong	result1, local01
0f608                 | ' for y=a3 to a3+a5-1
0f608     44 4E 05 F1 | 	add	fp, #68
0f60c     A7 20 02 FB | 	rdlong	local02, fp
0f610     0C 4E 05 F1 | 	add	fp, #12
0f614     A7 20 62 FC | 	wrlong	local02, fp
0f618     0C 4E 85 F1 | 	sub	fp, #12
0f61c     A7 22 02 FB | 	rdlong	local03, fp
0f620     08 4E 05 F1 | 	add	fp, #8
0f624     A7 24 02 FB | 	rdlong	local04, fp
0f628     4C 4E 85 F1 | 	sub	fp, #76
0f62c     12 23 02 F1 | 	add	local03, local04
0f630                 | LR__1311
0f630     50 4E 05 F1 | 	add	fp, #80
0f634     A7 20 02 FB | 	rdlong	local02, fp
0f638     50 4E 85 F1 | 	sub	fp, #80
0f63c     11 21 52 F2 | 	cmps	local02, local03 wc
0f640     F4 00 90 3D |  if_ae	jmp	#LR__1314
0f644                 | '   for x=a2 to a4+a2-1
0f644     40 4E 05 F1 | 	add	fp, #64
0f648     A7 1E 02 FB | 	rdlong	local01, fp
0f64c     14 4E 05 F1 | 	add	fp, #20
0f650     A7 1E 62 FC | 	wrlong	local01, fp
0f654     0C 4E 85 F1 | 	sub	fp, #12
0f658     A7 26 02 FB | 	rdlong	local05, fp
0f65c     08 4E 85 F1 | 	sub	fp, #8
0f660     A7 28 02 FB | 	rdlong	local06, fp
0f664     40 4E 85 F1 | 	sub	fp, #64
0f668     14 27 02 F1 | 	add	local05, local06
0f66c                 | LR__1312
0f66c     54 4E 05 F1 | 	add	fp, #84
0f670     A7 1E 02 FB | 	rdlong	local01, fp
0f674     54 4E 85 F1 | 	sub	fp, #84
0f678     13 1F 52 F2 | 	cmps	local01, local05 wc
0f67c     A0 00 90 3D |  if_ae	jmp	#LR__1313
0f680     3C 4E 05 F1 | 	add	fp, #60
0f684     A7 28 02 FB | 	rdlong	local06, fp
0f688     18 4E 05 F1 | 	add	fp, #24
0f68c     A7 24 02 FB | 	rdlong	local04, fp
0f690     14 4E 85 F1 | 	sub	fp, #20
0f694     A7 20 02 FB | 	rdlong	local02, fp
0f698     10 4E 05 F1 | 	add	fp, #16
0f69c     A7 1E 02 FB | 	rdlong	local01, fp
0f6a0     0F 17 02 F6 | 	mov	arg03, local01
0f6a4     0C 4E 85 F1 | 	sub	fp, #12
0f6a8     A7 14 02 FB | 	rdlong	arg02, fp
0f6ac     0A 17 82 F1 | 	sub	arg03, arg02
0f6b0     04 4E 05 F1 | 	add	fp, #4
0f6b4     A7 14 02 FB | 	rdlong	arg02, fp
0f6b8     0A 17 02 FD | 	qmul	arg03, arg02
0f6bc     02 28 66 F0 | 	shl	local06, #2
0f6c0     51 00 00 FF 
0f6c4     68 E5 05 F1 | 	add	objptr, ##41832
0f6c8     F2 28 02 F1 | 	add	local06, objptr
0f6cc     14 29 02 FB | 	rdlong	local06, local06
0f6d0     12 2B 02 F6 | 	mov	local07, local04
0f6d4     10 2B 82 F1 | 	sub	local07, local02
0f6d8     51 00 00 FF 
0f6dc     68 E5 85 F1 | 	sub	objptr, ##41832
0f6e0     F2 12 02 FB | 	rdlong	arg01, objptr
0f6e4     12 13 02 F1 | 	add	arg01, local04
0f6e8     48 4E 85 F1 | 	sub	fp, #72
0f6ec     0A 1E 66 F0 | 	shl	local01, #10
0f6f0     0F 13 02 F1 | 	add	arg01, local01
0f6f4     18 24 62 FD | 	getqx	local04
0f6f8     12 2B 02 F1 | 	add	local07, local04
0f6fc     14 2B 02 F1 | 	add	local07, local06
0f700     24 EB B0 FD | 	call	#_pspeek
0f704     15 FB 41 FC | 	wrbyte	result1, local07
0f708     54 4E 05 F1 | 	add	fp, #84
0f70c     A7 2A 02 FB | 	rdlong	local07, fp
0f710     01 2A 06 F1 | 	add	local07, #1
0f714     A7 2A 62 FC | 	wrlong	local07, fp
0f718     54 4E 85 F1 | 	sub	fp, #84
0f71c     4C FF 9F FD | 	jmp	#LR__1312
0f720                 | LR__1313
0f720     50 4E 05 F1 | 	add	fp, #80
0f724     A7 2A 02 FB | 	rdlong	local07, fp
0f728     01 2A 06 F1 | 	add	local07, #1
0f72c     A7 2A 62 FC | 	wrlong	local07, fp
0f730     50 4E 85 F1 | 	sub	fp, #80
0f734     F8 FE 9F FD | 	jmp	#LR__1311
0f738                 | LR__1314
0f738     3C 4E 05 F1 | 	add	fp, #60
0f73c     A7 2A 02 FB | 	rdlong	local07, fp
0f740     15 13 02 F6 | 	mov	arg01, local07
0f744     3C 4E 85 F1 | 	sub	fp, #60
0f748     02 2A 66 F0 | 	shl	local07, #2
0f74c     51 00 00 FF 
0f750     68 E5 05 F1 | 	add	objptr, ##41832
0f754     F2 2A 02 F1 | 	add	local07, objptr
0f758     15 15 02 FB | 	rdlong	arg02, local07
0f75c     51 00 00 FF 
0f760     68 E5 85 F1 | 	sub	objptr, ##41832
0f764     90 F7 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0f768     3C 4E 05 F1 | 	add	fp, #60
0f76c     A7 12 02 FB | 	rdlong	arg01, fp
0f770     0C 4E 05 F1 | 	add	fp, #12
0f774     A7 14 02 FB | 	rdlong	arg02, fp
0f778     04 4E 05 F1 | 	add	fp, #4
0f77c     A7 16 02 FB | 	rdlong	arg03, fp
0f780     4C 4E 85 F1 | 	sub	fp, #76
0f784     00 F8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f788     A7 F0 03 F6 | 	mov	ptra, fp
0f78c     B2 00 A0 FD | 	call	#popregs_
0f790                 | _do_defsprite_ret
0f790     2D 00 64 FD | 	ret
0f794                 | 
0f794                 | ' 
0f794                 | ' '-------------------- deg
0f794                 | ' 
0f794                 | ' sub do_deg
0f794                 | _do_deg
0f794     51 00 00 FF 
0f798     BC E5 05 F1 | 	add	objptr, ##41916
0f79c     7D 47 9E FF 
0f7a0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0f7a4     04 E4 05 F1 | 	add	objptr, #4
0f7a8     97 32 A1 FF 
0f7ac     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0f7b0     51 00 00 FF 
0f7b4     C0 E5 85 F1 | 	sub	objptr, ##41920
0f7b8                 | _do_deg_ret
0f7b8     2D 00 64 FD | 	ret
0f7bc                 | 
0f7bc                 | ' 
0f7bc                 | ' '-------------------- delete
0f7bc                 | ' 
0f7bc                 | ' sub do_delete
0f7bc                 | _do_delete
0f7bc     05 4A 05 F6 | 	mov	COUNT_, #5
0f7c0     A8 00 A0 FD | 	call	#pushregs_
0f7c4     10 C0 BF FD | 	call	#_pop
0f7c8     FE 18 02 F6 | 	mov	arg04, result2
0f7cc     FF 16 02 F6 | 	mov	arg03, result3
0f7d0     FD 1E 02 F6 | 	mov	local01, result1
0f7d4     0C 21 02 F6 | 	mov	local02, arg04
0f7d8     0B 23 02 F6 | 	mov	local03, arg03
0f7dc                 | ' 
0f7dc                 | ' t1=pop()
0f7dc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0f7dc     2B 22 0E F2 | 	cmp	local03, #43 wz
0f7e0     10 00 90 5D |  if_ne	jmp	#LR__1320
0f7e4     0F 13 02 F6 | 	mov	arg01, local01
0f7e8     64 C1 BF FD | 	call	#_convertstring
0f7ec     FD 1E 02 F6 | 	mov	local01, result1
0f7f0     1F 22 06 F6 | 	mov	local03, #31
0f7f4                 | LR__1320
0f7f4                 | ' if t1.result_type<>result_string then printerror(15): return
0f7f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0f7f8     10 00 90 AD |  if_e	jmp	#LR__1321
0f7fc     0F 12 06 F6 | 	mov	arg01, #15
0f800     00 14 06 F6 | 	mov	arg02, #0
0f804     BC E7 B0 FD | 	call	#_printerror
0f808     E0 00 90 FD | 	jmp	#LR__1325
0f80c                 | LR__1321
0f80c                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
0f80c     4A 00 00 FF 
0f810     94 E4 05 F1 | 	add	objptr, ##38036
0f814     F2 12 02 FB | 	rdlong	arg01, objptr
0f818     4A 00 00 FF 
0f81c     94 E4 85 F1 | 	sub	objptr, ##38036
0f820     8C 01 00 FF 
0f824     9F 14 06 F6 | 	mov	arg02, ##@LR__5546
0f828     80 1D B1 FD | 	call	#__system___string_cmp
0f82c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f830     34 00 90 AD |  if_e	jmp	#LR__1322
0f834     4A 00 00 FF 
0f838     94 E4 05 F1 | 	add	objptr, ##38036
0f83c     F2 12 02 FB | 	rdlong	arg01, objptr
0f840     4A 00 00 FF 
0f844     94 E4 85 F1 | 	sub	objptr, ##38036
0f848     8C 01 00 FF 
0f84c     A1 14 06 F6 | 	mov	arg02, ##@LR__5547
0f850     8C 1D B1 FD | 	call	#__system___string_concat
0f854     FD 12 02 F6 | 	mov	arg01, result1
0f858     0F 15 02 F6 | 	mov	arg02, local01
0f85c     80 1D B1 FD | 	call	#__system___string_concat
0f860     FD 24 02 F6 | 	mov	local04, result1
0f864     14 00 90 FD | 	jmp	#LR__1323
0f868                 | LR__1322
0f868     8C 01 00 FF 
0f86c     A3 12 06 F6 | 	mov	arg01, ##@LR__5548
0f870     0F 15 02 F6 | 	mov	arg02, local01
0f874     68 1D B1 FD | 	call	#__system___string_concat
0f878     FD 24 02 F6 | 	mov	local04, result1
0f87c                 | LR__1323
0f87c     12 13 02 F6 | 	mov	arg01, local04
0f880     CC 44 B1 FD | 	call	#__system___remove
0f884     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f888     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0f88c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f890     FD 26 0A F6 | 	mov	local05, result1 wz
0f894                 | ' kill filename$
0f894                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
0f894     54 00 90 AD |  if_e	jmp	#LR__1324
0f898     00 12 06 F6 | 	mov	arg01, #0
0f89c     10 7A B1 FD | 	call	#__system___getiolock_0568
0f8a0     FD 12 02 F6 | 	mov	arg01, result1
0f8a4     DC 1C B1 FD | 	call	#__system___lockmem
0f8a8     8C 01 00 FF 
0f8ac     A5 14 06 F6 | 	mov	arg02, ##@LR__5549
0f8b0     00 12 06 F6 | 	mov	arg01, #0
0f8b4     00 16 06 F6 | 	mov	arg03, #0
0f8b8     BC 29 B1 FD | 	call	#__system___basic_print_string
0f8bc     00 12 06 F6 | 	mov	arg01, #0
0f8c0     13 15 02 F6 | 	mov	arg02, local05
0f8c4     00 16 06 F6 | 	mov	arg03, #0
0f8c8     0A 18 06 F6 | 	mov	arg04, #10
0f8cc     EC 29 B1 FD | 	call	#__system___basic_print_integer
0f8d0     00 12 06 F6 | 	mov	arg01, #0
0f8d4     0A 14 06 F6 | 	mov	arg02, #10
0f8d8     00 16 06 F6 | 	mov	arg03, #0
0f8dc     40 29 B1 FD | 	call	#__system___basic_print_char
0f8e0     00 12 06 F6 | 	mov	arg01, #0
0f8e4     C8 79 B1 FD | 	call	#__system___getiolock_0568
0f8e8     FD 00 68 FC | 	wrlong	#0, result1
0f8ec                 | LR__1324
0f8ec                 | LR__1325
0f8ec     A7 F0 03 F6 | 	mov	ptra, fp
0f8f0     B2 00 A0 FD | 	call	#popregs_
0f8f4                 | _do_delete_ret
0f8f4     2D 00 64 FD | 	ret
0f8f8                 | 
0f8f8                 | ' 
0f8f8                 | ' '-------------------- dir
0f8f8                 | ' 
0f8f8                 | ' sub do_dir
0f8f8                 | _do_dir
0f8f8     13 4A 05 F6 | 	mov	COUNT_, #19
0f8fc     A8 00 A0 FD | 	call	#pushregs_
0f900     01 00 00 FF 
0f904     38 F0 07 F1 | 	add	ptra, ##568
0f908                 | ' 
0f908                 | ' print "Current directory: "; currentdir$ 
0f908     00 12 06 F6 | 	mov	arg01, #0
0f90c     A0 79 B1 FD | 	call	#__system___getiolock_0568
0f910     FD 12 02 F6 | 	mov	arg01, result1
0f914     6C 1C B1 FD | 	call	#__system___lockmem
0f918     8C 01 00 FF 
0f91c     DD 14 06 F6 | 	mov	arg02, ##@LR__5550
0f920     00 12 06 F6 | 	mov	arg01, #0
0f924     00 16 06 F6 | 	mov	arg03, #0
0f928     4C 29 B1 FD | 	call	#__system___basic_print_string
0f92c     4A 00 00 FF 
0f930     94 E4 05 F1 | 	add	objptr, ##38036
0f934     F2 14 02 FB | 	rdlong	arg02, objptr
0f938     4A 00 00 FF 
0f93c     94 E4 85 F1 | 	sub	objptr, ##38036
0f940     00 12 06 F6 | 	mov	arg01, #0
0f944     00 16 06 F6 | 	mov	arg03, #0
0f948     2C 29 B1 FD | 	call	#__system___basic_print_string
0f94c     00 12 06 F6 | 	mov	arg01, #0
0f950     0A 14 06 F6 | 	mov	arg02, #10
0f954     00 16 06 F6 | 	mov	arg03, #0
0f958     C4 28 B1 FD | 	call	#__system___basic_print_char
0f95c     01 1E 06 F6 | 	mov	local01, #1
0f960     00 12 06 F6 | 	mov	arg01, #0
0f964     48 79 B1 FD | 	call	#__system___getiolock_0568
0f968     FD 00 68 FC | 	wrlong	#0, result1
0f96c     00 20 06 F6 | 	mov	local02, #0
0f970     00 22 06 F6 | 	mov	local03, #0
0f974                 | ' px=0
0f974                 | ' for i=0 to 127: filelist(i)="" : next i
0f974     00 24 06 F6 | 	mov	local04, #0
0f978     1C 4E 05 F1 | 	add	fp, #28
0f97c     97 12 48 FB | 	callpa	#(@LR__1331-@LR__1330)>>2,fcache_load_ptr_
0f980                 | LR__1330
0f980     12 27 02 F6 | 	mov	local05, local04
0f984     02 26 66 F0 | 	shl	local05, #2
0f988     A7 26 02 F1 | 	add	local05, fp
0f98c     8C 01 00 FF 
0f990     F1 28 06 F6 | 	mov	local06, ##@LR__5551
0f994     13 29 62 FC | 	wrlong	local06, local05
0f998     01 24 06 F1 | 	add	local04, #1
0f99c     80 24 56 F2 | 	cmps	local04, #128 wc
0f9a0     DC FF 9F CD |  if_b	jmp	#LR__1330
0f9a4                 | LR__1331
0f9a4     1C 4E 85 F1 | 	sub	fp, #28
0f9a8     8C 01 00 FF 
0f9ac     F2 12 06 F6 | 	mov	arg01, ##@LR__5552
0f9b0     10 14 06 F6 | 	mov	arg02, #16
0f9b4     30 7A B1 FD | 	call	#__system___basic_dir
0f9b8     FD 2A 02 F6 | 	mov	local07, result1
0f9bc     00 2C 06 F6 | 	mov	local08, #0
0f9c0                 | ' filename=dir$("*", fbDirectory)
0f9c0                 | ' n=0
0f9c0                 | ' while filename <> "" andalso filename <> nil andalso n<128
0f9c0                 | LR__1332
0f9c0     8C 01 00 FF 
0f9c4     F4 2E 06 F6 | 	mov	local09, ##@LR__5553
0f9c8     15 13 02 F6 | 	mov	arg01, local07
0f9cc     17 15 02 F6 | 	mov	arg02, local09
0f9d0     D8 1B B1 FD | 	call	#__system___string_cmp
0f9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f9d8     68 00 90 AD |  if_e	jmp	#LR__1333
0f9dc     00 2E 06 F6 | 	mov	local09, #0
0f9e0     15 13 02 F6 | 	mov	arg01, local07
0f9e4     00 14 06 F6 | 	mov	arg02, #0
0f9e8     C0 1B B1 FD | 	call	#__system___string_cmp
0f9ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0f9f0     50 00 90 AD |  if_e	jmp	#LR__1333
0f9f4     80 2C 56 F2 | 	cmps	local08, #128 wc
0f9f8     48 00 90 3D |  if_ae	jmp	#LR__1333
0f9fc     8C 01 00 FF 
0fa00     F5 12 06 F6 | 	mov	arg01, ##@LR__5554
0fa04     15 15 02 F6 | 	mov	arg02, local07
0fa08     D4 1B B1 FD | 	call	#__system___string_concat
0fa0c     FD 2A 02 F6 | 	mov	local07, result1
0fa10     16 27 02 F6 | 	mov	local05, local08
0fa14     02 26 66 F0 | 	shl	local05, #2
0fa18     1C 4E 05 F1 | 	add	fp, #28
0fa1c     A7 26 02 F1 | 	add	local05, fp
0fa20     13 2B 62 FC | 	wrlong	local07, local05
0fa24     01 2C 06 F1 | 	add	local08, #1
0fa28     00 26 06 F6 | 	mov	local05, #0
0fa2c     00 12 06 F6 | 	mov	arg01, #0
0fa30     00 14 06 F6 | 	mov	arg02, #0
0fa34     1C 4E 85 F1 | 	sub	fp, #28
0fa38     AC 79 B1 FD | 	call	#__system___basic_dir
0fa3c     FD 2A 02 F6 | 	mov	local07, result1
0fa40     7C FF 9F FD | 	jmp	#LR__1332
0fa44                 | LR__1333
0fa44                 | ' for i=0 to n-1			' now sort this
0fa44     00 24 06 F6 | 	mov	local04, #0
0fa48     16 31 02 F6 | 	mov	local10, local08
0fa4c                 | LR__1334
0fa4c     18 25 52 F2 | 	cmps	local04, local10 wc
0fa50     DC 00 90 3D |  if_ae	jmp	#LR__1338
0fa54     00 32 06 F6 | 	mov	local11, #0
0fa58                 | '   swapped=false
0fa58                 | '   for j=0 to n-i-2
0fa58     00 34 06 F6 | 	mov	local12, #0
0fa5c     16 37 02 F6 | 	mov	local13, local08
0fa60     12 37 82 F1 | 	sub	local13, local04
0fa64     01 36 86 F1 | 	sub	local13, #1
0fa68                 | LR__1335
0fa68     1B 35 52 F2 | 	cmps	local12, local13 wc
0fa6c     B0 00 90 3D |  if_ae	jmp	#LR__1337
0fa70                 | '     if filelist(j) > filelist(j+1) then
0fa70     1A 2F 02 F6 | 	mov	local09, local12
0fa74     02 2E 66 F0 | 	shl	local09, #2
0fa78     1C 4E 05 F1 | 	add	fp, #28
0fa7c     A7 2E 02 F1 | 	add	local09, fp
0fa80     17 13 02 FB | 	rdlong	arg01, local09
0fa84     1A 2F 02 F6 | 	mov	local09, local12
0fa88     01 2E 06 F1 | 	add	local09, #1
0fa8c     17 29 02 F6 | 	mov	local06, local09
0fa90     02 28 66 F0 | 	shl	local06, #2
0fa94     A7 1E 02 F6 | 	mov	local01, fp
0fa98     A7 28 02 F1 | 	add	local06, fp
0fa9c     14 27 02 FB | 	rdlong	local05, local06
0faa0     13 15 02 F6 | 	mov	arg02, local05
0faa4     1C 4E 85 F1 | 	sub	fp, #28
0faa8     00 1B B1 FD | 	call	#__system___string_cmp
0faac     01 FA 55 F2 | 	cmps	result1, #1 wc
0fab0     64 00 90 CD |  if_b	jmp	#LR__1336
0fab4     1A 2F 02 F6 | 	mov	local09, local12
0fab8     01 2E 06 F1 | 	add	local09, #1
0fabc     02 2E 66 F0 | 	shl	local09, #2
0fac0     1C 4E 05 F1 | 	add	fp, #28
0fac4     A7 2E 02 F1 | 	add	local09, fp
0fac8     17 33 02 FB | 	rdlong	local11, local09
0facc     1A 29 02 F6 | 	mov	local06, local12
0fad0     02 28 66 F0 | 	shl	local06, #2
0fad4     A7 28 02 F1 | 	add	local06, fp
0fad8     14 27 02 FB | 	rdlong	local05, local06
0fadc     1A 2F 02 F6 | 	mov	local09, local12
0fae0     17 29 02 F6 | 	mov	local06, local09
0fae4     02 28 66 F0 | 	shl	local06, #2
0fae8     A7 1E 02 F6 | 	mov	local01, fp
0faec     A7 28 02 F1 | 	add	local06, fp
0faf0     14 33 62 FC | 	wrlong	local11, local06
0faf4     1A 21 02 F6 | 	mov	local02, local12
0faf8     01 20 06 F1 | 	add	local02, #1
0fafc     10 39 02 F6 | 	mov	local14, local02
0fb00     02 38 66 F0 | 	shl	local14, #2
0fb04     A7 3A 02 F6 | 	mov	local15, fp
0fb08     A7 38 02 F1 | 	add	local14, fp
0fb0c     1C 27 62 FC | 	wrlong	local05, local14
0fb10     01 32 66 F6 | 	neg	local11, #1
0fb14     1C 4E 85 F1 | 	sub	fp, #28
0fb18                 | LR__1336
0fb18     01 34 06 F1 | 	add	local12, #1
0fb1c     48 FF 9F FD | 	jmp	#LR__1335
0fb20                 | LR__1337
0fb20                 | ' if not swapped then exit for
0fb20     19 3D 22 F6 | 	not	local16, local11
0fb24     00 3C 0E F2 | 	cmp	local16, #0 wz
0fb28     01 24 06 A1 |  if_e	add	local04, #1
0fb2c     1C FF 9F AD |  if_e	jmp	#LR__1334
0fb30                 | LR__1338
0fb30                 | ' for i=0 to n-1
0fb30     00 24 06 F6 | 	mov	local04, #0
0fb34     16 3F 02 F6 | 	mov	local17, local08
0fb38                 | LR__1339
0fb38     1F 25 52 F2 | 	cmps	local04, local17 wc
0fb3c     94 00 90 3D |  if_ae	jmp	#LR__1341
0fb40                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fb40     00 12 06 F6 | 	mov	arg01, #0
0fb44     68 77 B1 FD | 	call	#__system___getiolock_0568
0fb48     FD 12 02 F6 | 	mov	arg01, result1
0fb4c     34 1A B1 FD | 	call	#__system___lockmem
0fb50     12 21 02 F6 | 	mov	local02, local04
0fb54     02 20 66 F0 | 	shl	local02, #2
0fb58     1C 4E 05 F1 | 	add	fp, #28
0fb5c     A7 38 02 F6 | 	mov	local14, fp
0fb60     A7 20 02 F1 | 	add	local02, fp
0fb64     10 15 02 FB | 	rdlong	arg02, local02
0fb68     00 1E 06 F6 | 	mov	local01, #0
0fb6c     00 12 06 F6 | 	mov	arg01, #0
0fb70     00 16 06 F6 | 	mov	arg03, #0
0fb74     1C 4E 85 F1 | 	sub	fp, #28
0fb78     FC 26 B1 FD | 	call	#__system___basic_print_string
0fb7c     00 12 06 F6 | 	mov	arg01, #0
0fb80     2C 77 B1 FD | 	call	#__system___getiolock_0568
0fb84     FD 00 68 FC | 	wrlong	#0, result1
0fb88     40 22 06 F1 | 	add	local03, #64
0fb8c     11 13 02 F6 | 	mov	arg01, local03
0fb90     40 00 B1 FD | 	call	#_hg010b_spin2_setcursorx
0fb94     00 23 56 F2 | 	cmps	local03, #256 wc
0fb98     30 00 90 CD |  if_b	jmp	#LR__1340
0fb9c     00 22 06 F6 | 	mov	local03, #0
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     08 77 B1 FD | 	call	#__system___getiolock_0568
0fba8     FD 12 02 F6 | 	mov	arg01, result1
0fbac     D4 19 B1 FD | 	call	#__system___lockmem
0fbb0     00 12 06 F6 | 	mov	arg01, #0
0fbb4     0A 14 06 F6 | 	mov	arg02, #10
0fbb8     00 16 06 F6 | 	mov	arg03, #0
0fbbc     60 26 B1 FD | 	call	#__system___basic_print_char
0fbc0     00 12 06 F6 | 	mov	arg01, #0
0fbc4     E8 76 B1 FD | 	call	#__system___getiolock_0568
0fbc8     FD 00 68 FC | 	wrlong	#0, result1
0fbcc                 | LR__1340
0fbcc     01 24 06 F1 | 	add	local04, #1
0fbd0     64 FF 9F FD | 	jmp	#LR__1339
0fbd4                 | LR__1341
0fbd4                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fbd4     80 2C 56 F2 | 	cmps	local08, #128 wc
0fbd8     44 00 90 CD |  if_b	jmp	#LR__1342
0fbdc     00 12 06 F6 | 	mov	arg01, #0
0fbe0     CC 76 B1 FD | 	call	#__system___getiolock_0568
0fbe4     FD 12 02 F6 | 	mov	arg01, result1
0fbe8     98 19 B1 FD | 	call	#__system___lockmem
0fbec     8C 01 00 FF 
0fbf0     FC 14 06 F6 | 	mov	arg02, ##@LR__5555
0fbf4     00 12 06 F6 | 	mov	arg01, #0
0fbf8     00 16 06 F6 | 	mov	arg03, #0
0fbfc     78 26 B1 FD | 	call	#__system___basic_print_string
0fc00     00 12 06 F6 | 	mov	arg01, #0
0fc04     0A 14 06 F6 | 	mov	arg02, #10
0fc08     00 16 06 F6 | 	mov	arg03, #0
0fc0c     10 26 B1 FD | 	call	#__system___basic_print_char
0fc10     00 12 06 F6 | 	mov	arg01, #0
0fc14     98 76 B1 FD | 	call	#__system___getiolock_0568
0fc18     FD 00 68 FC | 	wrlong	#0, result1
0fc1c     00 1E 06 F6 | 	mov	local01, #0
0fc20                 | LR__1342
0fc20                 | ' print
0fc20     00 12 06 F6 | 	mov	arg01, #0
0fc24     88 76 B1 FD | 	call	#__system___getiolock_0568
0fc28     FD 12 02 F6 | 	mov	arg01, result1
0fc2c     54 19 B1 FD | 	call	#__system___lockmem
0fc30     00 12 06 F6 | 	mov	arg01, #0
0fc34     0A 14 06 F6 | 	mov	arg02, #10
0fc38     00 16 06 F6 | 	mov	arg03, #0
0fc3c     E0 25 B1 FD | 	call	#__system___basic_print_char
0fc40     00 12 06 F6 | 	mov	arg01, #0
0fc44     68 76 B1 FD | 	call	#__system___getiolock_0568
0fc48     FD 00 68 FC | 	wrlong	#0, result1
0fc4c     00 28 06 F6 | 	mov	local06, #0
0fc50     00 2C 06 F6 | 	mov	local08, #0
0fc54     00 22 06 F6 | 	mov	local03, #0
0fc58                 | ' return cursor_y
0fc58     3E E4 05 F1 | 	add	objptr, #62
0fc5c     F2 40 C2 FA | 	rdbyte	local18, objptr
0fc60     3E E4 85 F1 | 	sub	objptr, #62
0fc64     8C 01 00 FF 
0fc68     2E 13 06 F6 | 	mov	arg01, ##@LR__5556
0fc6c     21 14 06 F6 | 	mov	arg02, #33
0fc70     74 77 B1 FD | 	call	#__system___basic_dir
0fc74     FD 2A 02 F6 | 	mov	local07, result1
0fc78                 | ' n=0
0fc78                 | ' px=0: py=v.getcursory()
0fc78                 | ' filename = dir$("*", fbNormal )   
0fc78                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0fc78                 | LR__1343
0fc78     8C 01 00 FF 
0fc7c     30 2F 06 F6 | 	mov	local09, ##@LR__5557
0fc80     15 13 02 F6 | 	mov	arg01, local07
0fc84     17 15 02 F6 | 	mov	arg02, local09
0fc88     20 19 B1 FD | 	call	#__system___string_cmp
0fc8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0fc90     54 00 90 AD |  if_e	jmp	#LR__1344
0fc94     00 2E 06 F6 | 	mov	local09, #0
0fc98     15 13 02 F6 | 	mov	arg01, local07
0fc9c     00 14 06 F6 | 	mov	arg02, #0
0fca0     08 19 B1 FD | 	call	#__system___string_cmp
0fca4     00 FA 0D F2 | 	cmp	result1, #0 wz
0fca8     3C 00 90 AD |  if_e	jmp	#LR__1344
0fcac     80 2C 56 F2 | 	cmps	local08, #128 wc
0fcb0     34 00 90 3D |  if_ae	jmp	#LR__1344
0fcb4     16 27 02 F6 | 	mov	local05, local08
0fcb8     02 26 66 F0 | 	shl	local05, #2
0fcbc     1C 4E 05 F1 | 	add	fp, #28
0fcc0     A7 26 02 F1 | 	add	local05, fp
0fcc4     13 2B 62 FC | 	wrlong	local07, local05
0fcc8     01 2C 06 F1 | 	add	local08, #1
0fccc     00 26 06 F6 | 	mov	local05, #0
0fcd0     00 12 06 F6 | 	mov	arg01, #0
0fcd4     00 14 06 F6 | 	mov	arg02, #0
0fcd8     1C 4E 85 F1 | 	sub	fp, #28
0fcdc     08 77 B1 FD | 	call	#__system___basic_dir
0fce0     FD 2A 02 F6 | 	mov	local07, result1
0fce4     90 FF 9F FD | 	jmp	#LR__1343
0fce8                 | LR__1344
0fce8                 | ' for i =0 to n-1
0fce8     00 24 06 F6 | 	mov	local04, #0
0fcec                 | LR__1345
0fcec     16 25 52 F2 | 	cmps	local04, local08 wc
0fcf0     D8 00 90 3D |  if_ae	jmp	#LR__1349
0fcf4     00 32 06 F6 | 	mov	local11, #0
0fcf8                 | '   swapped=false
0fcf8                 | '   for j=0 to n-i-2
0fcf8     00 34 06 F6 | 	mov	local12, #0
0fcfc     16 43 02 F6 | 	mov	local19, local08
0fd00     12 43 82 F1 | 	sub	local19, local04
0fd04     01 42 86 F1 | 	sub	local19, #1
0fd08                 | LR__1346
0fd08     21 35 52 F2 | 	cmps	local12, local19 wc
0fd0c     AC 00 90 3D |  if_ae	jmp	#LR__1348
0fd10                 | '     if filelist(j) > filelist(j+1) then
0fd10     1A 2F 02 F6 | 	mov	local09, local12
0fd14     02 2E 66 F0 | 	shl	local09, #2
0fd18     1C 4E 05 F1 | 	add	fp, #28
0fd1c     A7 2E 02 F1 | 	add	local09, fp
0fd20     17 13 02 FB | 	rdlong	arg01, local09
0fd24     1A 2F 02 F6 | 	mov	local09, local12
0fd28     01 2E 06 F1 | 	add	local09, #1
0fd2c     17 29 02 F6 | 	mov	local06, local09
0fd30     02 28 66 F0 | 	shl	local06, #2
0fd34     A7 1E 02 F6 | 	mov	local01, fp
0fd38     A7 28 02 F1 | 	add	local06, fp
0fd3c     14 27 02 FB | 	rdlong	local05, local06
0fd40     13 15 02 F6 | 	mov	arg02, local05
0fd44     1C 4E 85 F1 | 	sub	fp, #28
0fd48     60 18 B1 FD | 	call	#__system___string_cmp
0fd4c     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd50     60 00 90 CD |  if_b	jmp	#LR__1347
0fd54     1A 2F 02 F6 | 	mov	local09, local12
0fd58     01 2E 06 F1 | 	add	local09, #1
0fd5c     02 2E 66 F0 | 	shl	local09, #2
0fd60     1C 4E 05 F1 | 	add	fp, #28
0fd64     A7 2E 02 F1 | 	add	local09, fp
0fd68     17 3D 02 FB | 	rdlong	local16, local09
0fd6c     1A 29 02 F6 | 	mov	local06, local12
0fd70     02 28 66 F0 | 	shl	local06, #2
0fd74     A7 28 02 F1 | 	add	local06, fp
0fd78     14 27 02 FB | 	rdlong	local05, local06
0fd7c     1A 2F 02 F6 | 	mov	local09, local12
0fd80     17 29 02 F6 | 	mov	local06, local09
0fd84     02 28 66 F0 | 	shl	local06, #2
0fd88     A7 1E 02 F6 | 	mov	local01, fp
0fd8c     A7 28 02 F1 | 	add	local06, fp
0fd90     14 3D 62 FC | 	wrlong	local16, local06
0fd94     1A 39 02 F6 | 	mov	local14, local12
0fd98     01 38 06 F1 | 	add	local14, #1
0fd9c     02 38 66 F0 | 	shl	local14, #2
0fda0     A7 3A 02 F6 | 	mov	local15, fp
0fda4     A7 38 02 F1 | 	add	local14, fp
0fda8     1C 27 62 FC | 	wrlong	local05, local14
0fdac     01 32 66 F6 | 	neg	local11, #1
0fdb0     1C 4E 85 F1 | 	sub	fp, #28
0fdb4                 | LR__1347
0fdb4     01 34 06 F1 | 	add	local12, #1
0fdb8     4C FF 9F FD | 	jmp	#LR__1346
0fdbc                 | LR__1348
0fdbc                 | ' if not swapped then exit for
0fdbc     19 3D 22 F6 | 	not	local16, local11
0fdc0     00 3C 0E F2 | 	cmp	local16, #0 wz
0fdc4     01 24 06 A1 |  if_e	add	local04, #1
0fdc8     20 FF 9F AD |  if_e	jmp	#LR__1345
0fdcc                 | LR__1349
0fdcc                 | ' for i=0 to n-1
0fdcc     00 24 06 F6 | 	mov	local04, #0
0fdd0                 | LR__1350
0fdd0     16 25 52 F2 | 	cmps	local04, local08 wc
0fdd4     8C 00 90 3D |  if_ae	jmp	#LR__1352
0fdd8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fdd8     00 12 06 F6 | 	mov	arg01, #0
0fddc     D0 74 B1 FD | 	call	#__system___getiolock_0568
0fde0     FD 12 02 F6 | 	mov	arg01, result1
0fde4     9C 17 B1 FD | 	call	#__system___lockmem
0fde8     12 21 02 F6 | 	mov	local02, local04
0fdec     02 20 66 F0 | 	shl	local02, #2
0fdf0     1C 4E 05 F1 | 	add	fp, #28
0fdf4     A7 20 02 F1 | 	add	local02, fp
0fdf8     10 15 02 FB | 	rdlong	arg02, local02
0fdfc     00 12 06 F6 | 	mov	arg01, #0
0fe00     00 16 06 F6 | 	mov	arg03, #0
0fe04     1C 4E 85 F1 | 	sub	fp, #28
0fe08     6C 24 B1 FD | 	call	#__system___basic_print_string
0fe0c     00 12 06 F6 | 	mov	arg01, #0
0fe10     9C 74 B1 FD | 	call	#__system___getiolock_0568
0fe14     FD 00 68 FC | 	wrlong	#0, result1
0fe18     40 22 06 F1 | 	add	local03, #64
0fe1c     11 13 02 F6 | 	mov	arg01, local03
0fe20     B0 FD B0 FD | 	call	#_hg010b_spin2_setcursorx
0fe24     00 23 56 F2 | 	cmps	local03, #256 wc
0fe28     30 00 90 CD |  if_b	jmp	#LR__1351
0fe2c     00 22 06 F6 | 	mov	local03, #0
0fe30     00 12 06 F6 | 	mov	arg01, #0
0fe34     78 74 B1 FD | 	call	#__system___getiolock_0568
0fe38     FD 12 02 F6 | 	mov	arg01, result1
0fe3c     44 17 B1 FD | 	call	#__system___lockmem
0fe40     00 12 06 F6 | 	mov	arg01, #0
0fe44     0A 14 06 F6 | 	mov	arg02, #10
0fe48     00 16 06 F6 | 	mov	arg03, #0
0fe4c     D0 23 B1 FD | 	call	#__system___basic_print_char
0fe50     00 12 06 F6 | 	mov	arg01, #0
0fe54     58 74 B1 FD | 	call	#__system___getiolock_0568
0fe58     FD 00 68 FC | 	wrlong	#0, result1
0fe5c                 | LR__1351
0fe5c     01 24 06 F1 | 	add	local04, #1
0fe60     6C FF 9F FD | 	jmp	#LR__1350
0fe64                 | LR__1352
0fe64                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fe64     80 2C 56 F2 | 	cmps	local08, #128 wc
0fe68     40 00 90 CD |  if_b	jmp	#LR__1353
0fe6c     00 12 06 F6 | 	mov	arg01, #0
0fe70     3C 74 B1 FD | 	call	#__system___getiolock_0568
0fe74     FD 12 02 F6 | 	mov	arg01, result1
0fe78     08 17 B1 FD | 	call	#__system___lockmem
0fe7c     8C 01 00 FF 
0fe80     31 15 06 F6 | 	mov	arg02, ##@LR__5558
0fe84     00 12 06 F6 | 	mov	arg01, #0
0fe88     00 16 06 F6 | 	mov	arg03, #0
0fe8c     E8 23 B1 FD | 	call	#__system___basic_print_string
0fe90     00 12 06 F6 | 	mov	arg01, #0
0fe94     0A 14 06 F6 | 	mov	arg02, #10
0fe98     00 16 06 F6 | 	mov	arg03, #0
0fe9c     80 23 B1 FD | 	call	#__system___basic_print_char
0fea0     00 12 06 F6 | 	mov	arg01, #0
0fea4     08 74 B1 FD | 	call	#__system___getiolock_0568
0fea8     FD 00 68 FC | 	wrlong	#0, result1
0feac                 | LR__1353
0feac                 | ' print
0feac     00 12 06 F6 | 	mov	arg01, #0
0feb0     FC 73 B1 FD | 	call	#__system___getiolock_0568
0feb4     FD 12 02 F6 | 	mov	arg01, result1
0feb8     C8 16 B1 FD | 	call	#__system___lockmem
0febc     00 12 06 F6 | 	mov	arg01, #0
0fec0     0A 14 06 F6 | 	mov	arg02, #10
0fec4     00 16 06 F6 | 	mov	arg03, #0
0fec8     54 23 B1 FD | 	call	#__system___basic_print_char
0fecc     00 12 06 F6 | 	mov	arg01, #0
0fed0     DC 73 B1 FD | 	call	#__system___getiolock_0568
0fed4     FD 00 68 FC | 	wrlong	#0, result1
0fed8     A7 F0 03 F6 | 	mov	ptra, fp
0fedc     B2 00 A0 FD | 	call	#popregs_
0fee0                 | _do_dir_ret
0fee0     2D 00 64 FD | 	ret
0fee4                 | 
0fee4                 | ' 
0fee4                 | ' '-------------------- dpeek
0fee4                 | ' 
0fee4                 | ' sub do_dpeek
0fee4                 | _do_dpeek
0fee4     00 4A 05 F6 | 	mov	COUNT_, #0
0fee8     A8 00 A0 FD | 	call	#pushregs_
0feec     14 F0 07 F1 | 	add	ptra, #20
0fef0     E4 B8 BF FD | 	call	#_pop
0fef4     A7 FA 61 FC | 	wrlong	result1, fp
0fef8     04 4E 05 F1 | 	add	fp, #4
0fefc     A7 FC 61 FC | 	wrlong	result2, fp
0ff00     04 4E 05 F1 | 	add	fp, #4
0ff04     A7 FE 61 FC | 	wrlong	result3, fp
0ff08     08 4E 85 F1 | 	sub	fp, #8
0ff0c     A7 12 02 F6 | 	mov	arg01, fp
0ff10     A8 BA BF FD | 	call	#_converttoint
0ff14     0C 4E 05 F1 | 	add	fp, #12
0ff18     A7 FA 61 FC | 	wrlong	result1, fp
0ff1c                 | ' 
0ff1c                 | ' t1=pop()
0ff1c                 | ' a=converttoint(t1)
0ff1c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
0ff1c     0C 4E 85 F1 | 	sub	fp, #12
0ff20     00 04 00 FF 
0ff24     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0ff28     1C 00 90 3D |  if_ae	jmp	#LR__1360
0ff2c     0C 4E 05 F1 | 	add	fp, #12
0ff30     A7 12 02 FB | 	rdlong	arg01, fp
0ff34     09 FB E1 FA | 	rdword	result1, arg01
0ff38     04 4E 05 F1 | 	add	fp, #4
0ff3c     A7 FA 61 FC | 	wrlong	result1, fp
0ff40     10 4E 85 F1 | 	sub	fp, #16
0ff44     1C 00 90 FD | 	jmp	#LR__1361
0ff48                 | LR__1360
0ff48     0C 4E 05 F1 | 	add	fp, #12
0ff4c     A7 12 02 FB | 	rdlong	arg01, fp
0ff50     0C 4E 85 F1 | 	sub	fp, #12
0ff54     80 E3 B0 FD | 	call	#_psdpeek
0ff58     10 4E 05 F1 | 	add	fp, #16
0ff5c     A7 FA 61 FC | 	wrlong	result1, fp
0ff60     10 4E 85 F1 | 	sub	fp, #16
0ff64                 | LR__1361
0ff64     08 4E 05 F1 | 	add	fp, #8
0ff68     A7 3A 68 FC | 	wrlong	#29, fp
0ff6c     08 4E 05 F1 | 	add	fp, #8
0ff70     A7 12 02 FB | 	rdlong	arg01, fp
0ff74     10 4E 85 F1 | 	sub	fp, #16
0ff78     A7 12 62 FC | 	wrlong	arg01, fp
0ff7c     A7 12 02 F6 | 	mov	arg01, fp
0ff80     EC B8 BF FD | 	call	#_push
0ff84     A7 F0 03 F6 | 	mov	ptra, fp
0ff88     B2 00 A0 FD | 	call	#popregs_
0ff8c                 | _do_dpeek_ret
0ff8c     2D 00 64 FD | 	ret
0ff90                 | 
0ff90                 | ' 
0ff90                 | ' '-------------------- dpoke
0ff90                 | ' 
0ff90                 | ' sub do_dpoke
0ff90                 | _do_dpoke
0ff90     01 4A 05 F6 | 	mov	COUNT_, #1
0ff94     A8 00 A0 FD | 	call	#pushregs_
0ff98     20 F0 07 F1 | 	add	ptra, #32
0ff9c     38 B8 BF FD | 	call	#_pop
0ffa0     FD 14 02 F6 | 	mov	arg02, result1
0ffa4     FE 12 02 F6 | 	mov	arg01, result2
0ffa8     FF 1E 02 F6 | 	mov	local01, result3
0ffac     A7 14 62 FC | 	wrlong	arg02, fp
0ffb0     04 4E 05 F1 | 	add	fp, #4
0ffb4     A7 12 62 FC | 	wrlong	arg01, fp
0ffb8     04 4E 05 F1 | 	add	fp, #4
0ffbc     A7 1E 62 FC | 	wrlong	local01, fp
0ffc0     08 4E 85 F1 | 	sub	fp, #8
0ffc4     10 B8 BF FD | 	call	#_pop
0ffc8     FF 1E 02 F6 | 	mov	local01, result3
0ffcc     0C 4E 05 F1 | 	add	fp, #12
0ffd0     A7 FA 61 FC | 	wrlong	result1, fp
0ffd4     04 4E 05 F1 | 	add	fp, #4
0ffd8     A7 FC 61 FC | 	wrlong	result2, fp
0ffdc     04 4E 05 F1 | 	add	fp, #4
0ffe0     A7 1E 62 FC | 	wrlong	local01, fp
0ffe4     08 4E 85 F1 | 	sub	fp, #8
0ffe8     A7 12 02 F6 | 	mov	arg01, fp
0ffec     0C 4E 85 F1 | 	sub	fp, #12
0fff0     C8 B9 BF FD | 	call	#_converttoint
0fff4     18 4E 05 F1 | 	add	fp, #24
0fff8     A7 FA 61 FC | 	wrlong	result1, fp
0fffc     18 4E 85 F1 | 	sub	fp, #24
10000     A7 12 02 F6 | 	mov	arg01, fp
10004     B4 B9 BF FD | 	call	#_converttoint
10008     1C 4E 05 F1 | 	add	fp, #28
1000c     A7 FA 61 FC | 	wrlong	result1, fp
10010                 | ' 
10010                 | ' t1=pop() 'value
10010                 | ' t2=pop() 
10010                 | ' a=converttoint(t2) : v=converttoint(t1)
10010                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
10010     04 4E 85 F1 | 	sub	fp, #4
10014     A7 1E 02 FB | 	rdlong	local01, fp
10018     18 4E 85 F1 | 	sub	fp, #24
1001c     00 04 00 FF 
10020     00 1E 16 F2 | 	cmp	local01, ##524288 wc
10024     1C 00 90 3D |  if_ae	jmp	#LR__1370
10028     18 4E 05 F1 | 	add	fp, #24
1002c     A7 12 02 FB | 	rdlong	arg01, fp
10030     04 4E 05 F1 | 	add	fp, #4
10034     A7 14 02 FB | 	rdlong	arg02, fp
10038     1C 4E 85 F1 | 	sub	fp, #28
1003c     09 15 52 FC | 	wrword	arg02, arg01
10040     18 00 90 FD | 	jmp	#LR__1371
10044                 | LR__1370
10044     18 4E 05 F1 | 	add	fp, #24
10048     A7 12 02 FB | 	rdlong	arg01, fp
1004c     04 4E 05 F1 | 	add	fp, #4
10050     A7 14 02 FB | 	rdlong	arg02, fp
10054     1C 4E 85 F1 | 	sub	fp, #28
10058     3C E1 B0 FD | 	call	#_psdpoke
1005c                 | LR__1371
1005c     A7 F0 03 F6 | 	mov	ptra, fp
10060     B2 00 A0 FD | 	call	#popregs_
10064                 | _do_dpoke_ret
10064     2D 00 64 FD | 	ret
10068                 | 
10068                 | ' '-------------------- draw
10068                 | ' 
10068                 | ' sub do_draw
10068                 | _do_draw
10068     00 4A 05 F6 | 	mov	COUNT_, #0
1006c     A8 00 A0 FD | 	call	#pushregs_
10070     20 F0 07 F1 | 	add	ptra, #32
10074     60 B7 BF FD | 	call	#_pop
10078     FD 1A 02 F6 | 	mov	arg05, result1
1007c     FE 18 02 F6 | 	mov	arg04, result2
10080     FF 16 02 F6 | 	mov	arg03, result3
10084     0C 4E 05 F1 | 	add	fp, #12
10088     A7 1A 62 FC | 	wrlong	arg05, fp
1008c     04 4E 05 F1 | 	add	fp, #4
10090     A7 18 62 FC | 	wrlong	arg04, fp
10094     04 4E 05 F1 | 	add	fp, #4
10098     A7 16 62 FC | 	wrlong	arg03, fp
1009c     14 4E 85 F1 | 	sub	fp, #20
100a0     34 B7 BF FD | 	call	#_pop
100a4     FF 1A 02 F6 | 	mov	arg05, result3
100a8     A7 FA 61 FC | 	wrlong	result1, fp
100ac     04 4E 05 F1 | 	add	fp, #4
100b0     A7 FC 61 FC | 	wrlong	result2, fp
100b4     04 4E 05 F1 | 	add	fp, #4
100b8     A7 1A 62 FC | 	wrlong	arg05, fp
100bc     08 4E 85 F1 | 	sub	fp, #8
100c0     A7 12 02 F6 | 	mov	arg01, fp
100c4     F4 B8 BF FD | 	call	#_converttoint
100c8     18 4E 05 F1 | 	add	fp, #24
100cc     A7 FA 61 FC | 	wrlong	result1, fp
100d0     0C 4E 85 F1 | 	sub	fp, #12
100d4     A7 12 02 F6 | 	mov	arg01, fp
100d8     0C 4E 85 F1 | 	sub	fp, #12
100dc     DC B8 BF FD | 	call	#_converttoint
100e0     1C 4E 05 F1 | 	add	fp, #28
100e4     A7 FA 61 FC | 	wrlong	result1, fp
100e8     37 00 00 FF 
100ec     2C E4 05 F1 | 	add	objptr, ##28204
100f0     F2 12 02 FB | 	rdlong	arg01, objptr
100f4     04 E4 05 F1 | 	add	objptr, #4
100f8     F2 14 02 FB | 	rdlong	arg02, objptr
100fc     04 4E 85 F1 | 	sub	fp, #4
10100     A7 16 02 FB | 	rdlong	arg03, fp
10104     FD 18 02 F6 | 	mov	arg04, result1
10108     18 4E 85 F1 | 	sub	fp, #24
1010c     08 E4 85 F1 | 	sub	objptr, #8
10110     F2 1A 02 FB | 	rdlong	arg05, objptr
10114     37 00 00 FF 
10118     28 E4 85 F1 | 	sub	objptr, ##28200
1011c     64 F1 B0 FD | 	call	#_hg010b_spin2_draw
10120     18 4E 05 F1 | 	add	fp, #24
10124     A7 1A 02 FB | 	rdlong	arg05, fp
10128     37 00 00 FF 
1012c     2C E4 05 F1 | 	add	objptr, ##28204
10130     F2 1A 62 FC | 	wrlong	arg05, objptr
10134     04 4E 05 F1 | 	add	fp, #4
10138     A7 1A 02 FB | 	rdlong	arg05, fp
1013c     1C 4E 85 F1 | 	sub	fp, #28
10140     04 E4 05 F1 | 	add	objptr, #4
10144     F2 1A 62 FC | 	wrlong	arg05, objptr
10148     37 00 00 FF 
1014c     30 E4 85 F1 | 	sub	objptr, ##28208
10150     A7 F0 03 F6 | 	mov	ptra, fp
10154     B2 00 A0 FD | 	call	#popregs_
10158                 | _do_draw_ret
10158     2D 00 64 FD | 	ret
1015c                 | 
1015c                 | ' 
1015c                 | ' '-------------------- else
1015c                 | ' 
1015c                 | ' sub do_else
1015c                 | _do_else
1015c     4A 00 00 FF 
10160     7C E4 05 F1 | 	add	objptr, ##38012
10164     F2 00 02 FB | 	rdlong	_var01, objptr
10168     01 00 86 F1 | 	sub	_var01, #1
1016c     04 E4 05 F1 | 	add	objptr, #4
10170     F2 00 62 FC | 	wrlong	_var01, objptr
10174     4A 00 00 FF 
10178     80 E4 85 F1 | 	sub	objptr, ##38016
1017c                 | _do_else_ret
1017c     2D 00 64 FD | 	ret
10180                 | 
10180                 | ' 
10180                 | ' '-------------------- end
10180                 | ' 
10180                 | ' sub do_end
10180                 | _do_end
10180     4A 00 00 FF 
10184     7C E4 05 F1 | 	add	objptr, ##38012
10188     F2 00 02 FB | 	rdlong	_var01, objptr
1018c     01 00 86 F1 | 	sub	_var01, #1
10190     04 E4 05 F1 | 	add	objptr, #4
10194     F2 00 62 FC | 	wrlong	_var01, objptr
10198     06 00 00 FF 
1019c     38 E4 05 F1 | 	add	objptr, ##3128
101a0     FF FF BF FF 
101a4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
101a8     50 00 00 FF 
101ac     B8 E4 85 F1 | 	sub	objptr, ##41144
101b0                 | _do_end_ret
101b0     2D 00 64 FD | 	ret
101b4                 | 
101b4                 | ' 
101b4                 | ' '-------------------- enter
101b4                 | ' 
101b4                 | ' sub do_enter
101b4                 | _do_enter
101b4     02 00 00 FF 
101b8     D2 12 06 F6 | 	mov	arg01, ##1234
101bc     64 22 B0 FD | 	call	#_do_load
101c0                 | _do_enter_ret
101c0     2D 00 64 FD | 	ret
101c4                 | 
101c4                 | ' 
101c4                 | ' '------------------- error processing
101c4                 | ' 
101c4                 | ' sub do_error
101c4                 | _do_error
101c4     01 4A 05 F6 | 	mov	COUNT_, #1
101c8     A8 00 A0 FD | 	call	#pushregs_
101cc     4A 00 00 FF 
101d0     80 E4 05 F1 | 	add	objptr, ##38016
101d4     F2 18 02 FB | 	rdlong	arg04, objptr
101d8     0C 17 02 F6 | 	mov	arg03, arg04
101dc     01 16 66 F0 | 	shl	arg03, #1
101e0     0C 17 02 F1 | 	add	arg03, arg04
101e4     02 16 66 F0 | 	shl	arg03, #2
101e8     03 00 00 FF 
101ec     04 E4 85 F1 | 	sub	objptr, ##1540
101f0     F2 16 02 F1 | 	add	arg03, objptr
101f4     0B 1F 02 FB | 	rdlong	local01, arg03
101f8                 | ' r=compiledline(lineptr_e).result.uresult
101f8                 | ' print "Error ";r;": ";errors$(r)
101f8     00 12 06 F6 | 	mov	arg01, #0
101fc     47 00 00 FF 
10200     7C E4 85 F1 | 	sub	objptr, ##36476
10204     A8 70 B1 FD | 	call	#__system___getiolock_0568
10208     FD 12 02 F6 | 	mov	arg01, result1
1020c     74 13 B1 FD | 	call	#__system___lockmem
10210     8C 01 00 FF 
10214     63 15 06 F6 | 	mov	arg02, ##@LR__5559
10218     00 12 06 F6 | 	mov	arg01, #0
1021c     00 16 06 F6 | 	mov	arg03, #0
10220     54 20 B1 FD | 	call	#__system___basic_print_string
10224     00 12 06 F6 | 	mov	arg01, #0
10228     0F 15 02 F6 | 	mov	arg02, local01
1022c     00 16 06 F6 | 	mov	arg03, #0
10230     0A 18 06 F6 | 	mov	arg04, #10
10234     C4 20 B1 FD | 	call	#__system___basic_print_unsigned
10238     8C 01 00 FF 
1023c     6A 15 06 F6 | 	mov	arg02, ##@LR__5560
10240     00 12 06 F6 | 	mov	arg01, #0
10244     00 16 06 F6 | 	mov	arg03, #0
10248     2C 20 B1 FD | 	call	#__system___basic_print_string
1024c     02 1E 66 F0 | 	shl	local01, #2
10250     45 00 00 FF 
10254     7C E4 05 F1 | 	add	objptr, ##35452
10258     F2 1E 02 F1 | 	add	local01, objptr
1025c     0F 15 02 FB | 	rdlong	arg02, local01
10260     00 12 06 F6 | 	mov	arg01, #0
10264     00 16 06 F6 | 	mov	arg03, #0
10268     45 00 00 FF 
1026c     7C E4 85 F1 | 	sub	objptr, ##35452
10270     04 20 B1 FD | 	call	#__system___basic_print_string
10274     00 12 06 F6 | 	mov	arg01, #0
10278     0A 14 06 F6 | 	mov	arg02, #10
1027c     00 16 06 F6 | 	mov	arg03, #0
10280     9C 1F B1 FD | 	call	#__system___basic_print_char
10284     00 12 06 F6 | 	mov	arg01, #0
10288     24 70 B1 FD | 	call	#__system___getiolock_0568
1028c     FD 00 68 FC | 	wrlong	#0, result1
10290     A7 F0 03 F6 | 	mov	ptra, fp
10294     B2 00 A0 FD | 	call	#popregs_
10298                 | _do_error_ret
10298     2D 00 64 FD | 	ret
1029c                 | 
1029c                 | ' 
1029c                 | ' '-------------------- fcircle
1029c                 | ' 
1029c                 | ' sub do_fcircle
1029c                 | _do_fcircle
1029c     02 4A 05 F6 | 	mov	COUNT_, #2
102a0     A8 00 A0 FD | 	call	#pushregs_
102a4     24 F0 07 F1 | 	add	ptra, #36
102a8     2C B5 BF FD | 	call	#_pop
102ac     FD 14 02 F6 | 	mov	arg02, result1
102b0     FE 18 02 F6 | 	mov	arg04, result2
102b4     FF 16 02 F6 | 	mov	arg03, result3
102b8     18 4E 05 F1 | 	add	fp, #24
102bc     A7 14 62 FC | 	wrlong	arg02, fp
102c0     04 4E 05 F1 | 	add	fp, #4
102c4     A7 18 62 FC | 	wrlong	arg04, fp
102c8     04 4E 05 F1 | 	add	fp, #4
102cc     A7 16 62 FC | 	wrlong	arg03, fp
102d0     20 4E 85 F1 | 	sub	fp, #32
102d4     00 B5 BF FD | 	call	#_pop
102d8     FD 14 02 F6 | 	mov	arg02, result1
102dc     FE 18 02 F6 | 	mov	arg04, result2
102e0     FF 16 02 F6 | 	mov	arg03, result3
102e4     0C 4E 05 F1 | 	add	fp, #12
102e8     A7 14 62 FC | 	wrlong	arg02, fp
102ec     04 4E 05 F1 | 	add	fp, #4
102f0     A7 18 62 FC | 	wrlong	arg04, fp
102f4     04 4E 05 F1 | 	add	fp, #4
102f8     A7 16 62 FC | 	wrlong	arg03, fp
102fc     14 4E 85 F1 | 	sub	fp, #20
10300     D4 B4 BF FD | 	call	#_pop
10304     FF 14 02 F6 | 	mov	arg02, result3
10308     A7 FA 61 FC | 	wrlong	result1, fp
1030c     04 4E 05 F1 | 	add	fp, #4
10310     A7 FC 61 FC | 	wrlong	result2, fp
10314     04 4E 05 F1 | 	add	fp, #4
10318     A7 14 62 FC | 	wrlong	arg02, fp
1031c     08 4E 85 F1 | 	sub	fp, #8
10320     A7 12 02 F6 | 	mov	arg01, fp
10324     94 B6 BF FD | 	call	#_converttoint
10328     FD 1E 02 F6 | 	mov	local01, result1
1032c     0C 4E 05 F1 | 	add	fp, #12
10330     A7 12 02 F6 | 	mov	arg01, fp
10334     0C 4E 85 F1 | 	sub	fp, #12
10338     80 B6 BF FD | 	call	#_converttoint
1033c     FD 20 02 F6 | 	mov	local02, result1
10340     18 4E 05 F1 | 	add	fp, #24
10344     A7 12 02 F6 | 	mov	arg01, fp
10348     18 4E 85 F1 | 	sub	fp, #24
1034c     6C B6 BF FD | 	call	#_converttoint
10350     FD 16 02 F6 | 	mov	arg03, result1
10354     37 00 00 FF 
10358     28 E4 05 F1 | 	add	objptr, ##28200
1035c     F2 18 02 FB | 	rdlong	arg04, objptr
10360     37 00 00 FF 
10364     28 E4 85 F1 | 	sub	objptr, ##28200
10368     0F 13 02 F6 | 	mov	arg01, local01
1036c     10 15 02 F6 | 	mov	arg02, local02
10370     94 F3 B0 FD | 	call	#_hg010b_spin2_fcircle
10374     A7 F0 03 F6 | 	mov	ptra, fp
10378     B2 00 A0 FD | 	call	#popregs_
1037c                 | _do_fcircle_ret
1037c     2D 00 64 FD | 	ret
10380                 | 
10380                 | ' 
10380                 | ' '-------------------- fill
10380                 | ' 
10380                 | ' sub do_fill
10380                 | _do_fill
10380     03 4A 05 F6 | 	mov	COUNT_, #3
10384     A8 00 A0 FD | 	call	#pushregs_
10388     30 F0 07 F1 | 	add	ptra, #48
1038c     48 B4 BF FD | 	call	#_pop
10390     FD 16 02 F6 | 	mov	arg03, result1
10394     FE 14 02 F6 | 	mov	arg02, result2
10398     FF 18 02 F6 | 	mov	arg04, result3
1039c     24 4E 05 F1 | 	add	fp, #36
103a0     A7 16 62 FC | 	wrlong	arg03, fp
103a4     04 4E 05 F1 | 	add	fp, #4
103a8     A7 14 62 FC | 	wrlong	arg02, fp
103ac     04 4E 05 F1 | 	add	fp, #4
103b0     A7 18 62 FC | 	wrlong	arg04, fp
103b4     2C 4E 85 F1 | 	sub	fp, #44
103b8     1C B4 BF FD | 	call	#_pop
103bc     FD 16 02 F6 | 	mov	arg03, result1
103c0     FE 14 02 F6 | 	mov	arg02, result2
103c4     FF 18 02 F6 | 	mov	arg04, result3
103c8     18 4E 05 F1 | 	add	fp, #24
103cc     A7 16 62 FC | 	wrlong	arg03, fp
103d0     04 4E 05 F1 | 	add	fp, #4
103d4     A7 14 62 FC | 	wrlong	arg02, fp
103d8     04 4E 05 F1 | 	add	fp, #4
103dc     A7 18 62 FC | 	wrlong	arg04, fp
103e0     20 4E 85 F1 | 	sub	fp, #32
103e4     F0 B3 BF FD | 	call	#_pop
103e8     FD 16 02 F6 | 	mov	arg03, result1
103ec     FE 14 02 F6 | 	mov	arg02, result2
103f0     FF 18 02 F6 | 	mov	arg04, result3
103f4     0C 4E 05 F1 | 	add	fp, #12
103f8     A7 16 62 FC | 	wrlong	arg03, fp
103fc     04 4E 05 F1 | 	add	fp, #4
10400     A7 14 62 FC | 	wrlong	arg02, fp
10404     04 4E 05 F1 | 	add	fp, #4
10408     A7 18 62 FC | 	wrlong	arg04, fp
1040c     14 4E 85 F1 | 	sub	fp, #20
10410     C4 B3 BF FD | 	call	#_pop
10414     FF 16 02 F6 | 	mov	arg03, result3
10418     A7 FA 61 FC | 	wrlong	result1, fp
1041c     04 4E 05 F1 | 	add	fp, #4
10420     A7 FC 61 FC | 	wrlong	result2, fp
10424     04 4E 05 F1 | 	add	fp, #4
10428     A7 16 62 FC | 	wrlong	arg03, fp
1042c     08 4E 85 F1 | 	sub	fp, #8
10430     A7 12 02 F6 | 	mov	arg01, fp
10434     84 B5 BF FD | 	call	#_converttoint
10438     FD 1E 02 F6 | 	mov	local01, result1
1043c     0C 4E 05 F1 | 	add	fp, #12
10440     A7 12 02 F6 | 	mov	arg01, fp
10444     0C 4E 85 F1 | 	sub	fp, #12
10448     70 B5 BF FD | 	call	#_converttoint
1044c     FD 20 02 F6 | 	mov	local02, result1
10450     18 4E 05 F1 | 	add	fp, #24
10454     A7 12 02 F6 | 	mov	arg01, fp
10458     18 4E 85 F1 | 	sub	fp, #24
1045c     5C B5 BF FD | 	call	#_converttoint
10460     FD 22 02 F6 | 	mov	local03, result1
10464     24 4E 05 F1 | 	add	fp, #36
10468     A7 12 02 F6 | 	mov	arg01, fp
1046c     24 4E 85 F1 | 	sub	fp, #36
10470     48 B5 BF FD | 	call	#_converttoint
10474     FD 18 02 F6 | 	mov	arg04, result1
10478     0F 13 02 F6 | 	mov	arg01, local01
1047c     10 15 02 F6 | 	mov	arg02, local02
10480     11 17 02 F6 | 	mov	arg03, local03
10484     EC EF B0 FD | 	call	#_hg010b_spin2_fill
10488     A7 F0 03 F6 | 	mov	ptra, fp
1048c     B2 00 A0 FD | 	call	#popregs_
10490                 | _do_fill_ret
10490     2D 00 64 FD | 	ret
10494                 | 
10494                 | ' 
10494                 | ' '-------------------- font
10494                 | ' 
10494                 | ' sub do_font
10494                 | _do_font
10494     03 4A 05 F6 | 	mov	COUNT_, #3
10498     A8 00 A0 FD | 	call	#pushregs_
1049c     38 B3 BF FD | 	call	#_pop
104a0     FD 1E 02 F6 | 	mov	local01, result1
104a4     FE 20 02 F6 | 	mov	local02, result2
104a8     FF 22 02 F6 | 	mov	local03, result3
104ac                 | ' 
104ac                 | ' t1=pop() 
104ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
104ac     1E 22 0E F2 | 	cmp	local03, #30 wz
104b0     10 00 90 5D |  if_ne	jmp	#LR__1380
104b4     0F 13 02 F6 | 	mov	arg01, local01
104b8     00 14 06 F6 | 	mov	arg02, #0
104bc     48 43 B1 FD | 	call	#__system___float_tointeger
104c0     FD 1E 02 F6 | 	mov	local01, result1
104c4                 | LR__1380
104c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
104c4     1F 22 0E F2 | 	cmp	local03, #31 wz
104c8     18 00 90 5D |  if_ne	jmp	#LR__1381
104cc     0F 13 02 F6 | 	mov	arg01, local01
104d0     78 46 B1 FD | 	call	#__system____builtin_atof
104d4     FD 12 02 F6 | 	mov	arg01, result1
104d8     00 14 06 F6 | 	mov	arg02, #0
104dc     28 43 B1 FD | 	call	#__system___float_tointeger
104e0     FD 1E 02 F6 | 	mov	local01, result1
104e4                 | LR__1381
104e4     37 00 00 FF 
104e8     40 E4 05 F1 | 	add	objptr, ##28224
104ec     F2 1E 62 FC | 	wrlong	local01, objptr
104f0     37 00 00 FF 
104f4     40 E4 85 F1 | 	sub	objptr, ##28224
104f8     02 1E 66 F0 | 	shl	local01, #2
104fc     0F 13 02 F6 | 	mov	arg01, local01
10500     54 F6 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10504     A7 F0 03 F6 | 	mov	ptra, fp
10508     B2 00 A0 FD | 	call	#popregs_
1050c                 | _do_font_ret
1050c     2D 00 64 FD | 	ret
10510                 | 
10510                 | ' 
10510                 | ' '-------------------- for
10510                 | ' 
10510                 | ' sub do_for()
10510                 | _do_for
10510     01 4A 05 F6 | 	mov	COUNT_, #1
10514     A8 00 A0 FD | 	call	#pushregs_
10518     10 F0 07 F1 | 	add	ptra, #16
1051c     50 00 00 FF 
10520     08 E5 05 F1 | 	add	objptr, ##41224
10524     F2 12 02 FB | 	rdlong	arg01, objptr
10528     01 12 06 F1 | 	add	arg01, #1
1052c     F2 12 62 FC | 	wrlong	arg01, objptr
10530     50 00 00 FF 
10534     08 E5 85 F1 | 	sub	objptr, ##41224
10538     9C B2 BF FD | 	call	#_pop
1053c     A7 FA 61 FC | 	wrlong	result1, fp
10540     04 4E 05 F1 | 	add	fp, #4
10544     A7 FC 61 FC | 	wrlong	result2, fp
10548     04 4E 05 F1 | 	add	fp, #4
1054c     A7 FE 61 FC | 	wrlong	result3, fp
10550     08 4E 85 F1 | 	sub	fp, #8
10554     50 00 00 FF 
10558     08 E5 05 F1 | 	add	objptr, ##41224
1055c     F2 12 02 FB | 	rdlong	arg01, objptr
10560     09 1F 02 F6 | 	mov	local01, arg01
10564     02 1E 66 F0 | 	shl	local01, #2
10568     09 1F 02 F1 | 	add	local01, arg01
1056c     02 1E 66 F0 | 	shl	local01, #2
10570     06 00 00 FF 
10574     70 E4 85 F1 | 	sub	objptr, ##3184
10578     F2 1E 02 F1 | 	add	local01, objptr
1057c     A7 12 02 FB | 	rdlong	arg01, fp
10580     08 1E 06 F1 | 	add	local01, #8
10584     0F 13 62 FC | 	wrlong	arg01, local01
10588     4A 00 00 FF 
1058c     98 E4 85 F1 | 	sub	objptr, ##38040
10590     44 B2 BF FD | 	call	#_pop
10594     A7 FA 61 FC | 	wrlong	result1, fp
10598     04 4E 05 F1 | 	add	fp, #4
1059c     A7 FC 61 FC | 	wrlong	result2, fp
105a0     04 4E 05 F1 | 	add	fp, #4
105a4     A7 FE 61 FC | 	wrlong	result3, fp
105a8     08 4E 85 F1 | 	sub	fp, #8
105ac     50 00 00 FF 
105b0     08 E5 05 F1 | 	add	objptr, ##41224
105b4     F2 12 02 FB | 	rdlong	arg01, objptr
105b8     09 1F 02 F6 | 	mov	local01, arg01
105bc     02 1E 66 F0 | 	shl	local01, #2
105c0     09 1F 02 F1 | 	add	local01, arg01
105c4     02 1E 66 F0 | 	shl	local01, #2
105c8     06 00 00 FF 
105cc     70 E4 85 F1 | 	sub	objptr, ##3184
105d0     F2 1E 02 F1 | 	add	local01, objptr
105d4     A7 12 02 F6 | 	mov	arg01, fp
105d8     4A 00 00 FF 
105dc     98 E4 85 F1 | 	sub	objptr, ##38040
105e0     D8 B3 BF FD | 	call	#_converttoint
105e4     FD 12 02 F6 | 	mov	arg01, result1
105e8     0C 1E 06 F1 | 	add	local01, #12
105ec     0F 13 62 FC | 	wrlong	arg01, local01
105f0     E4 B1 BF FD | 	call	#_pop
105f4     A7 FA 61 FC | 	wrlong	result1, fp
105f8     04 4E 05 F1 | 	add	fp, #4
105fc     A7 FC 61 FC | 	wrlong	result2, fp
10600     04 4E 05 F1 | 	add	fp, #4
10604     A7 FE 61 FC | 	wrlong	result3, fp
10608     08 4E 85 F1 | 	sub	fp, #8
1060c     50 00 00 FF 
10610     08 E5 05 F1 | 	add	objptr, ##41224
10614     F2 12 02 FB | 	rdlong	arg01, objptr
10618     09 1F 02 F6 | 	mov	local01, arg01
1061c     02 1E 66 F0 | 	shl	local01, #2
10620     09 1F 02 F1 | 	add	local01, arg01
10624     02 1E 66 F0 | 	shl	local01, #2
10628     06 00 00 FF 
1062c     70 E4 85 F1 | 	sub	objptr, ##3184
10630     F2 1E 02 F1 | 	add	local01, objptr
10634     A7 12 02 F6 | 	mov	arg01, fp
10638     4A 00 00 FF 
1063c     98 E4 85 F1 | 	sub	objptr, ##38040
10640     78 B3 BF FD | 	call	#_converttoint
10644     10 1E 06 F1 | 	add	local01, #16
10648     0F FB 61 FC | 	wrlong	result1, local01
1064c                 | ' fortop+=1
1064c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
1064c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
1064c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
1064c                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
1064c     4A 00 00 FF 
10650     80 E4 05 F1 | 	add	objptr, ##38016
10654     F2 12 02 FB | 	rdlong	arg01, objptr
10658     09 1F 02 F6 | 	mov	local01, arg01
1065c     01 1E 66 F0 | 	shl	local01, #1
10660     09 1F 02 F1 | 	add	local01, arg01
10664     02 1E 66 F0 | 	shl	local01, #2
10668     03 00 00 FF 
1066c     04 E4 85 F1 | 	sub	objptr, ##1540
10670     F2 1E 02 F1 | 	add	local01, objptr
10674     08 1E 06 F1 | 	add	local01, #8
10678     0F 1F 02 FB | 	rdlong	local01, local01
1067c     FE 1F 0E F2 | 	cmp	local01, #510 wz
10680     47 00 00 FF 
10684     7C E4 85 F1 | 	sub	objptr, ##36476
10688     70 00 90 5D |  if_ne	jmp	#LR__1390
1068c     50 00 00 FF 
10690     08 E5 05 F1 | 	add	objptr, ##41224
10694     F2 12 02 FB | 	rdlong	arg01, objptr
10698     09 1F 02 F6 | 	mov	local01, arg01
1069c     02 1E 66 F0 | 	shl	local01, #2
106a0     09 1F 02 F1 | 	add	local01, arg01
106a4     02 1E 66 F0 | 	shl	local01, #2
106a8     06 00 00 FF 
106ac     70 E4 85 F1 | 	sub	objptr, ##3184
106b0     F2 1E 02 F1 | 	add	local01, objptr
106b4     06 00 00 FF 
106b8     20 E4 05 F1 | 	add	objptr, ##3104
106bc     F2 12 02 FB | 	rdlong	arg01, objptr
106c0     0F 13 62 FC | 	wrlong	arg01, local01
106c4     50 E4 05 F1 | 	add	objptr, #80
106c8     F2 12 02 FB | 	rdlong	arg01, objptr
106cc     09 1F 02 F6 | 	mov	local01, arg01
106d0     02 1E 66 F0 | 	shl	local01, #2
106d4     09 1F 02 F1 | 	add	local01, arg01
106d8     02 1E 66 F0 | 	shl	local01, #2
106dc     06 00 00 FF 
106e0     70 E4 85 F1 | 	sub	objptr, ##3184
106e4     F2 1E 02 F1 | 	add	local01, objptr
106e8     04 1E 06 F1 | 	add	local01, #4
106ec     0F 01 68 FC | 	wrlong	#0, local01
106f0     4A 00 00 FF 
106f4     98 E4 85 F1 | 	sub	objptr, ##38040
106f8     78 00 90 FD | 	jmp	#LR__1391
106fc                 | LR__1390
106fc     50 00 00 FF 
10700     08 E5 05 F1 | 	add	objptr, ##41224
10704     F2 12 02 FB | 	rdlong	arg01, objptr
10708     09 1F 02 F6 | 	mov	local01, arg01
1070c     02 1E 66 F0 | 	shl	local01, #2
10710     09 1F 02 F1 | 	add	local01, arg01
10714     02 1E 66 F0 | 	shl	local01, #2
10718     06 00 00 FF 
1071c     70 E4 85 F1 | 	sub	objptr, ##3184
10720     F2 1E 02 F1 | 	add	local01, objptr
10724     06 00 00 FF 
10728     28 E4 05 F1 | 	add	objptr, ##3112
1072c     F2 12 02 FB | 	rdlong	arg01, objptr
10730     0F 13 62 FC | 	wrlong	arg01, local01
10734     48 E4 05 F1 | 	add	objptr, #72
10738     F2 12 02 FB | 	rdlong	arg01, objptr
1073c     09 1F 02 F6 | 	mov	local01, arg01
10740     02 1E 66 F0 | 	shl	local01, #2
10744     09 1F 02 F1 | 	add	local01, arg01
10748     02 1E 66 F0 | 	shl	local01, #2
1074c     06 00 00 FF 
10750     70 E4 85 F1 | 	sub	objptr, ##3184
10754     F2 1E 02 F1 | 	add	local01, objptr
10758     18 E4 85 F1 | 	sub	objptr, #24
1075c     F2 12 02 FB | 	rdlong	arg01, objptr
10760     4A 00 00 FF 
10764     80 E4 85 F1 | 	sub	objptr, ##38016
10768     01 12 06 F1 | 	add	arg01, #1
1076c     04 1E 06 F1 | 	add	local01, #4
10770     0F 13 62 FC | 	wrlong	arg01, local01
10774                 | LR__1391
10774     A7 F0 03 F6 | 	mov	ptra, fp
10778     B2 00 A0 FD | 	call	#popregs_
1077c                 | _do_for_ret
1077c     2D 00 64 FD | 	ret
10780                 | 
10780                 | ' 
10780                 | ' '-------------------- frame
10780                 | ' 
10780                 | ' sub do_frame
10780                 | _do_frame
10780     03 4A 05 F6 | 	mov	COUNT_, #3
10784     A8 00 A0 FD | 	call	#pushregs_
10788     30 F0 07 F1 | 	add	ptra, #48
1078c     48 B0 BF FD | 	call	#_pop
10790     FD 16 02 F6 | 	mov	arg03, result1
10794     FE 14 02 F6 | 	mov	arg02, result2
10798     FF 1A 02 F6 | 	mov	arg05, result3
1079c     24 4E 05 F1 | 	add	fp, #36
107a0     A7 16 62 FC | 	wrlong	arg03, fp
107a4     04 4E 05 F1 | 	add	fp, #4
107a8     A7 14 62 FC | 	wrlong	arg02, fp
107ac     04 4E 05 F1 | 	add	fp, #4
107b0     A7 1A 62 FC | 	wrlong	arg05, fp
107b4     2C 4E 85 F1 | 	sub	fp, #44
107b8     1C B0 BF FD | 	call	#_pop
107bc     FD 16 02 F6 | 	mov	arg03, result1
107c0     FE 14 02 F6 | 	mov	arg02, result2
107c4     FF 1A 02 F6 | 	mov	arg05, result3
107c8     18 4E 05 F1 | 	add	fp, #24
107cc     A7 16 62 FC | 	wrlong	arg03, fp
107d0     04 4E 05 F1 | 	add	fp, #4
107d4     A7 14 62 FC | 	wrlong	arg02, fp
107d8     04 4E 05 F1 | 	add	fp, #4
107dc     A7 1A 62 FC | 	wrlong	arg05, fp
107e0     20 4E 85 F1 | 	sub	fp, #32
107e4     F0 AF BF FD | 	call	#_pop
107e8     FD 16 02 F6 | 	mov	arg03, result1
107ec     FE 14 02 F6 | 	mov	arg02, result2
107f0     FF 1A 02 F6 | 	mov	arg05, result3
107f4     0C 4E 05 F1 | 	add	fp, #12
107f8     A7 16 62 FC | 	wrlong	arg03, fp
107fc     04 4E 05 F1 | 	add	fp, #4
10800     A7 14 62 FC | 	wrlong	arg02, fp
10804     04 4E 05 F1 | 	add	fp, #4
10808     A7 1A 62 FC | 	wrlong	arg05, fp
1080c     14 4E 85 F1 | 	sub	fp, #20
10810     C4 AF BF FD | 	call	#_pop
10814     FF 16 02 F6 | 	mov	arg03, result3
10818     A7 FA 61 FC | 	wrlong	result1, fp
1081c     04 4E 05 F1 | 	add	fp, #4
10820     A7 FC 61 FC | 	wrlong	result2, fp
10824     04 4E 05 F1 | 	add	fp, #4
10828     A7 16 62 FC | 	wrlong	arg03, fp
1082c     08 4E 85 F1 | 	sub	fp, #8
10830     A7 12 02 F6 | 	mov	arg01, fp
10834     84 B1 BF FD | 	call	#_converttoint
10838     FD 1E 02 F6 | 	mov	local01, result1
1083c     0C 4E 05 F1 | 	add	fp, #12
10840     A7 12 02 F6 | 	mov	arg01, fp
10844     0C 4E 85 F1 | 	sub	fp, #12
10848     70 B1 BF FD | 	call	#_converttoint
1084c     FD 20 02 F6 | 	mov	local02, result1
10850     18 4E 05 F1 | 	add	fp, #24
10854     A7 12 02 F6 | 	mov	arg01, fp
10858     18 4E 85 F1 | 	sub	fp, #24
1085c     5C B1 BF FD | 	call	#_converttoint
10860     FD 22 02 F6 | 	mov	local03, result1
10864     24 4E 05 F1 | 	add	fp, #36
10868     A7 12 02 F6 | 	mov	arg01, fp
1086c     24 4E 85 F1 | 	sub	fp, #36
10870     48 B1 BF FD | 	call	#_converttoint
10874     FD 18 02 F6 | 	mov	arg04, result1
10878     37 00 00 FF 
1087c     28 E4 05 F1 | 	add	objptr, ##28200
10880     F2 1A 02 FB | 	rdlong	arg05, objptr
10884     37 00 00 FF 
10888     28 E4 85 F1 | 	sub	objptr, ##28200
1088c     0F 13 02 F6 | 	mov	arg01, local01
10890     10 15 02 F6 | 	mov	arg02, local02
10894     11 17 02 F6 | 	mov	arg03, local03
10898     C4 F0 B0 FD | 	call	#_hg010b_spin2_frame
1089c     A7 F0 03 F6 | 	mov	ptra, fp
108a0     B2 00 A0 FD | 	call	#popregs_
108a4                 | _do_frame_ret
108a4     2D 00 64 FD | 	ret
108a8                 | 
108a8                 | ' 
108a8                 | ' '-------------------- fre
108a8                 | ' 
108a8                 | ' sub do_fre
108a8                 | _do_fre
108a8     01 4A 05 F6 | 	mov	COUNT_, #1
108ac     A8 00 A0 FD | 	call	#pushregs_
108b0     0C F0 07 F1 | 	add	ptra, #12
108b4     51 00 00 FF 
108b8     AC E5 05 F1 | 	add	objptr, ##41900
108bc     F2 12 02 FB | 	rdlong	arg01, objptr
108c0     0E 00 00 FF 
108c4     50 E5 85 F1 | 	sub	objptr, ##7504
108c8     F2 1E 02 FB | 	rdlong	local01, objptr
108cc     0F 13 82 F1 | 	sub	arg01, local01
108d0     0E 00 00 FF 
108d4     C0 E5 05 F1 | 	add	objptr, ##7616
108d8     F2 12 62 FC | 	wrlong	arg01, objptr
108dc     08 4E 05 F1 | 	add	fp, #8
108e0     A7 3A 68 FC | 	wrlong	#29, fp
108e4     08 4E 85 F1 | 	sub	fp, #8
108e8     F2 1E 02 FB | 	rdlong	local01, objptr
108ec     52 00 00 FF 
108f0     1C E4 85 F1 | 	sub	objptr, ##42012
108f4     A7 1E 62 FC | 	wrlong	local01, fp
108f8     A7 12 02 F6 | 	mov	arg01, fp
108fc     70 AF BF FD | 	call	#_push
10900     A7 F0 03 F6 | 	mov	ptra, fp
10904     B2 00 A0 FD | 	call	#popregs_
10908                 | _do_fre_ret
10908     2D 00 64 FD | 	ret
1090c                 | 
1090c                 | ' 
1090c                 | ' '-------------------- get
1090c                 | ' 
1090c                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
1090c                 | _do_get
1090c     09 4A 05 F6 | 	mov	COUNT_, #9
10910     A8 00 A0 FD | 	call	#pushregs_
10914     40 F0 07 F1 | 	add	ptra, #64
10918     4A 00 00 FF 
1091c     80 E4 05 F1 | 	add	objptr, ##38016
10920     F2 1A 02 FB | 	rdlong	arg05, objptr
10924     0D 19 02 F6 | 	mov	arg04, arg05
10928     01 18 66 F0 | 	shl	arg04, #1
1092c     0D 19 02 F1 | 	add	arg04, arg05
10930     02 18 66 F0 | 	shl	arg04, #2
10934     03 00 00 FF 
10938     04 E4 85 F1 | 	sub	objptr, ##1540
1093c     F2 18 02 F1 | 	add	arg04, objptr
10940     0C 1B 02 FB | 	rdlong	arg05, arg04
10944     A7 1A 62 FC | 	wrlong	arg05, fp
10948                 | ' 
10948                 | ' numpar=compiledline(lineptr_e).result.uresult
10948                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10948     04 1A 0E F2 | 	cmp	arg05, #4 wz
1094c     47 00 00 FF 
10950     7C E4 85 F1 | 	sub	objptr, ##36476
10954     48 00 90 5D |  if_ne	jmp	#LR__1400
10958     7C AE BF FD | 	call	#_pop
1095c     FF 1A 02 F6 | 	mov	arg05, result3
10960     1C 4E 05 F1 | 	add	fp, #28
10964     A7 FA 61 FC | 	wrlong	result1, fp
10968     04 4E 05 F1 | 	add	fp, #4
1096c     A7 FC 61 FC | 	wrlong	result2, fp
10970     04 4E 05 F1 | 	add	fp, #4
10974     A7 1A 62 FC | 	wrlong	arg05, fp
10978     08 4E 85 F1 | 	sub	fp, #8
1097c     A7 12 02 F6 | 	mov	arg01, fp
10980     1C 4E 85 F1 | 	sub	fp, #28
10984     34 B0 BF FD | 	call	#_converttoint
10988     52 00 00 FF 
1098c     18 E4 05 F1 | 	add	objptr, ##42008
10990     F2 FA 61 FC | 	wrlong	result1, objptr
10994     52 00 00 FF 
10998     18 E4 85 F1 | 	sub	objptr, ##42008
1099c     18 00 90 FD | 	jmp	#LR__1401
109a0                 | LR__1400
109a0     52 00 00 FF 
109a4     18 E4 05 F1 | 	add	objptr, ##42008
109a8     FF FF FF FF 
109ac     F2 FE 6B FC | 	wrlong	##-1, objptr
109b0     52 00 00 FF 
109b4     18 E4 85 F1 | 	sub	objptr, ##42008
109b8                 | LR__1401
109b8                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
109b8     A7 16 02 FB | 	rdlong	arg03, fp
109bc     03 16 56 F2 | 	cmps	arg03, #3 wc
109c0     40 00 90 CD |  if_b	jmp	#LR__1402
109c4     10 AE BF FD | 	call	#_pop
109c8     FF 16 02 F6 | 	mov	arg03, result3
109cc     1C 4E 05 F1 | 	add	fp, #28
109d0     A7 FA 61 FC | 	wrlong	result1, fp
109d4     04 4E 05 F1 | 	add	fp, #4
109d8     A7 FC 61 FC | 	wrlong	result2, fp
109dc     04 4E 05 F1 | 	add	fp, #4
109e0     A7 16 62 FC | 	wrlong	arg03, fp
109e4     08 4E 85 F1 | 	sub	fp, #8
109e8     A7 12 02 F6 | 	mov	arg01, fp
109ec     1C 4E 85 F1 | 	sub	fp, #28
109f0     C8 AF BF FD | 	call	#_converttoint
109f4     08 4E 05 F1 | 	add	fp, #8
109f8     A7 FA 61 FC | 	wrlong	result1, fp
109fc     08 4E 85 F1 | 	sub	fp, #8
10a00     0C 00 90 FD | 	jmp	#LR__1403
10a04                 | LR__1402
10a04     08 4E 05 F1 | 	add	fp, #8
10a08     A7 02 68 FC | 	wrlong	#1, fp
10a0c     08 4E 85 F1 | 	sub	fp, #8
10a10                 | LR__1403
10a10                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
10a10     A7 16 02 FB | 	rdlong	arg03, fp
10a14     02 16 56 F2 | 	cmps	arg03, #2 wc
10a18     3C 00 90 CD |  if_b	jmp	#LR__1404
10a1c     B8 AD BF FD | 	call	#_pop
10a20     FF 16 02 F6 | 	mov	arg03, result3
10a24     1C 4E 05 F1 | 	add	fp, #28
10a28     A7 FA 61 FC | 	wrlong	result1, fp
10a2c     04 4E 05 F1 | 	add	fp, #4
10a30     A7 FC 61 FC | 	wrlong	result2, fp
10a34     04 4E 05 F1 | 	add	fp, #4
10a38     A7 16 62 FC | 	wrlong	arg03, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     A7 12 02 F6 | 	mov	arg01, fp
10a44     1C 4E 85 F1 | 	sub	fp, #28
10a48     70 AF BF FD | 	call	#_converttoint
10a4c     0C 4E 05 F1 | 	add	fp, #12
10a50     A7 FA 61 FC | 	wrlong	result1, fp
10a54     0C 4E 85 F1 | 	sub	fp, #12
10a58                 | LR__1404
10a58     7C AD BF FD | 	call	#_pop
10a5c     FF 16 02 F6 | 	mov	arg03, result3
10a60     1C 4E 05 F1 | 	add	fp, #28
10a64     A7 FA 61 FC | 	wrlong	result1, fp
10a68     04 4E 05 F1 | 	add	fp, #4
10a6c     A7 FC 61 FC | 	wrlong	result2, fp
10a70     04 4E 05 F1 | 	add	fp, #4
10a74     A7 16 62 FC | 	wrlong	arg03, fp
10a78     08 4E 85 F1 | 	sub	fp, #8
10a7c     A7 12 02 F6 | 	mov	arg01, fp
10a80     1C 4E 85 F1 | 	sub	fp, #28
10a84     34 AF BF FD | 	call	#_converttoint
10a88     04 4E 05 F1 | 	add	fp, #4
10a8c     A7 FA 61 FC | 	wrlong	result1, fp
10a90     10 4E 05 F1 | 	add	fp, #16
10a94     A7 16 02 FB | 	rdlong	arg03, fp
10a98     14 4E 85 F1 | 	sub	fp, #20
10a9c     02 16 66 F0 | 	shl	arg03, #2
10aa0     50 00 00 FF 
10aa4     C4 E4 05 F1 | 	add	objptr, ##41156
10aa8     F2 1E 02 F6 | 	mov	local01, objptr
10aac     F2 16 02 F1 | 	add	arg03, objptr
10ab0     0B 01 68 FC | 	wrlong	#0, arg03
10ab4                 | ' t1=pop() : channel=converttoint(t1)
10ab4                 | ' getres(j)=0
10ab4                 | ' if pos>=0 then
10ab4     01 00 00 FF 
10ab8     54 E5 05 F1 | 	add	objptr, ##852
10abc     F2 20 02 FB | 	rdlong	local02, objptr
10ac0     52 00 00 FF 
10ac4     18 E4 85 F1 | 	sub	objptr, ##42008
10ac8     00 20 56 F2 | 	cmps	local02, #0 wc
10acc     F0 01 90 CD |  if_b	jmp	#LR__1411
10ad0                 | '   for i=0 to  amount/1024
10ad0     10 4E 05 F1 | 	add	fp, #16
10ad4     A7 00 68 FC | 	wrlong	#0, fp
10ad8     08 4E 85 F1 | 	sub	fp, #8
10adc     A7 22 02 FB | 	rdlong	local03, fp
10ae0     08 4E 85 F1 | 	sub	fp, #8
10ae4     11 25 52 F6 | 	abs	local04, local03 wc
10ae8     0A 24 46 F0 | 	shr	local04, #10
10aec     12 25 82 F6 | 	negc	local04, local04
10af0     01 24 06 F1 | 	add	local04, #1
10af4                 | LR__1405
10af4     10 4E 05 F1 | 	add	fp, #16
10af8     A7 22 02 FB | 	rdlong	local03, fp
10afc     10 4E 85 F1 | 	sub	fp, #16
10b00     12 23 52 F2 | 	cmps	local03, local04 wc
10b04     9C 03 90 3D |  if_ae	jmp	#LR__1419
10b08                 | '     get #channel,pos+1,block(0),amount,r
10b08     04 4E 05 F1 | 	add	fp, #4
10b0c     A7 12 02 FB | 	rdlong	arg01, fp
10b10     52 00 00 FF 
10b14     18 E4 05 F1 | 	add	objptr, ##42008
10b18     F2 14 02 FB | 	rdlong	arg02, objptr
10b1c     01 14 06 F1 | 	add	arg02, #1
10b20     03 00 00 FF 
10b24     64 E5 85 F1 | 	sub	objptr, ##1892
10b28     F2 16 02 F6 | 	mov	arg03, objptr
10b2c     4E 00 00 FF 
10b30     B4 E4 85 F1 | 	sub	objptr, ##40116
10b34     04 4E 05 F1 | 	add	fp, #4
10b38     A7 18 02 FB | 	rdlong	arg04, fp
10b3c     08 4E 85 F1 | 	sub	fp, #8
10b40     01 1A 06 F6 | 	mov	arg05, #1
10b44     AC 18 B1 FD | 	call	#__system___basic_get
10b48     18 4E 05 F1 | 	add	fp, #24
10b4c     A7 FA 61 FC | 	wrlong	result1, fp
10b50                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10b50     0C 4E 85 F1 | 	sub	fp, #12
10b54     A7 20 02 FB | 	rdlong	local02, fp
10b58     0C 4E 85 F1 | 	sub	fp, #12
10b5c     00 04 00 FF 
10b60     00 20 56 F2 | 	cmps	local02, ##524288 wc
10b64     7C 00 90 3D |  if_ae	jmp	#LR__1407
10b68     14 4E 05 F1 | 	add	fp, #20
10b6c     A7 00 68 FC | 	wrlong	#0, fp
10b70     04 4E 05 F1 | 	add	fp, #4
10b74     A7 26 02 FB | 	rdlong	local05, fp
10b78     18 4E 85 F1 | 	sub	fp, #24
10b7c                 | LR__1406
10b7c     14 4E 05 F1 | 	add	fp, #20
10b80     A7 20 02 FB | 	rdlong	local02, fp
10b84     14 4E 85 F1 | 	sub	fp, #20
10b88     13 21 52 F2 | 	cmps	local02, local05 wc
10b8c     D8 00 90 3D |  if_ae	jmp	#LR__1410
10b90     0C 4E 05 F1 | 	add	fp, #12
10b94     A7 12 02 FB | 	rdlong	arg01, fp
10b98     04 4E 05 F1 | 	add	fp, #4
10b9c     A7 22 02 FB | 	rdlong	local03, fp
10ba0     0A 22 66 F0 | 	shl	local03, #10
10ba4     11 13 02 F1 | 	add	arg01, local03
10ba8     04 4E 05 F1 | 	add	fp, #4
10bac     A7 22 02 FB | 	rdlong	local03, fp
10bb0     11 13 02 F1 | 	add	arg01, local03
10bb4     4E 00 00 FF 
10bb8     B4 E4 05 F1 | 	add	objptr, ##40116
10bbc     F2 22 02 F1 | 	add	local03, objptr
10bc0     11 15 C2 FA | 	rdbyte	arg02, local03
10bc4     09 15 42 FC | 	wrbyte	arg02, arg01
10bc8     4E 00 00 FF 
10bcc     B4 E4 85 F1 | 	sub	objptr, ##40116
10bd0     A7 22 02 FB | 	rdlong	local03, fp
10bd4     01 22 06 F1 | 	add	local03, #1
10bd8     A7 22 62 FC | 	wrlong	local03, fp
10bdc     14 4E 85 F1 | 	sub	fp, #20
10be0     98 FF 9F FD | 	jmp	#LR__1406
10be4                 | LR__1407
10be4     14 4E 05 F1 | 	add	fp, #20
10be8     A7 00 68 FC | 	wrlong	#0, fp
10bec     04 4E 05 F1 | 	add	fp, #4
10bf0     A7 28 02 FB | 	rdlong	local06, fp
10bf4     18 4E 85 F1 | 	sub	fp, #24
10bf8                 | LR__1408
10bf8     14 4E 05 F1 | 	add	fp, #20
10bfc     A7 20 02 FB | 	rdlong	local02, fp
10c00     14 4E 85 F1 | 	sub	fp, #20
10c04     14 21 52 F2 | 	cmps	local02, local06 wc
10c08     5C 00 90 3D |  if_ae	jmp	#LR__1409
10c0c     0C 4E 05 F1 | 	add	fp, #12
10c10     A7 12 02 FB | 	rdlong	arg01, fp
10c14     04 4E 05 F1 | 	add	fp, #4
10c18     A7 26 02 FB | 	rdlong	local05, fp
10c1c     0A 26 66 F0 | 	shl	local05, #10
10c20     13 13 02 F1 | 	add	arg01, local05
10c24     04 4E 05 F1 | 	add	fp, #4
10c28     A7 26 02 FB | 	rdlong	local05, fp
10c2c     13 13 02 F1 | 	add	arg01, local05
10c30     14 4E 85 F1 | 	sub	fp, #20
10c34     4E 00 00 FF 
10c38     B4 E4 05 F1 | 	add	objptr, ##40116
10c3c     F2 26 02 F1 | 	add	local05, objptr
10c40     13 15 C2 FA | 	rdbyte	arg02, local05
10c44     4E 00 00 FF 
10c48     B4 E4 85 F1 | 	sub	objptr, ##40116
10c4c     90 D5 B0 FD | 	call	#_pspoke
10c50     14 4E 05 F1 | 	add	fp, #20
10c54     A7 26 02 FB | 	rdlong	local05, fp
10c58     01 26 06 F1 | 	add	local05, #1
10c5c     A7 26 62 FC | 	wrlong	local05, fp
10c60     14 4E 85 F1 | 	sub	fp, #20
10c64     90 FF 9F FD | 	jmp	#LR__1408
10c68                 | LR__1409
10c68                 | LR__1410
10c68     14 4E 05 F1 | 	add	fp, #20
10c6c     A7 28 02 FB | 	rdlong	local06, fp
10c70     14 23 02 F6 | 	mov	local03, local06
10c74     02 22 66 F0 | 	shl	local03, #2
10c78     50 00 00 FF 
10c7c     C4 E4 05 F1 | 	add	objptr, ##41156
10c80     F2 22 02 F1 | 	add	local03, objptr
10c84     02 28 66 F0 | 	shl	local06, #2
10c88     F2 28 02 F1 | 	add	local06, objptr
10c8c     14 29 02 FB | 	rdlong	local06, local06
10c90     04 4E 05 F1 | 	add	fp, #4
10c94     A7 26 02 FB | 	rdlong	local05, fp
10c98     13 29 02 F1 | 	add	local06, local05
10c9c     11 29 62 FC | 	wrlong	local06, local03
10ca0     08 4E 85 F1 | 	sub	fp, #8
10ca4     A7 28 02 FB | 	rdlong	local06, fp
10ca8     01 28 06 F1 | 	add	local06, #1
10cac     A7 28 62 FC | 	wrlong	local06, fp
10cb0     10 4E 85 F1 | 	sub	fp, #16
10cb4     50 00 00 FF 
10cb8     C4 E4 85 F1 | 	sub	objptr, ##41156
10cbc     34 FE 9F FD | 	jmp	#LR__1405
10cc0                 | LR__1411
10cc0                 | '   for i=0 to  amount/1024
10cc0     10 4E 05 F1 | 	add	fp, #16
10cc4     A7 00 68 FC | 	wrlong	#0, fp
10cc8     08 4E 85 F1 | 	sub	fp, #8
10ccc     A7 22 02 FB | 	rdlong	local03, fp
10cd0     08 4E 85 F1 | 	sub	fp, #8
10cd4     11 2B 52 F6 | 	abs	local07, local03 wc
10cd8     0A 2A 46 F0 | 	shr	local07, #10
10cdc     15 2B 82 F6 | 	negc	local07, local07
10ce0     01 2A 06 F1 | 	add	local07, #1
10ce4                 | LR__1412
10ce4     10 4E 05 F1 | 	add	fp, #16
10ce8     A7 22 02 FB | 	rdlong	local03, fp
10cec     10 4E 85 F1 | 	sub	fp, #16
10cf0     15 23 52 F2 | 	cmps	local03, local07 wc
10cf4     AC 01 90 3D |  if_ae	jmp	#LR__1418
10cf8                 | '     get #channel,,block(0),amount,r
10cf8     04 4E 05 F1 | 	add	fp, #4
10cfc     A7 12 02 FB | 	rdlong	arg01, fp
10d00     4E 00 00 FF 
10d04     B4 E4 05 F1 | 	add	objptr, ##40116
10d08     F2 16 02 F6 | 	mov	arg03, objptr
10d0c     4E 00 00 FF 
10d10     B4 E4 85 F1 | 	sub	objptr, ##40116
10d14     04 4E 05 F1 | 	add	fp, #4
10d18     A7 18 02 FB | 	rdlong	arg04, fp
10d1c     08 4E 85 F1 | 	sub	fp, #8
10d20     00 14 06 F6 | 	mov	arg02, #0
10d24     01 1A 06 F6 | 	mov	arg05, #1
10d28     C8 16 B1 FD | 	call	#__system___basic_get
10d2c     18 4E 05 F1 | 	add	fp, #24
10d30     A7 FA 61 FC | 	wrlong	result1, fp
10d34                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10d34     0C 4E 85 F1 | 	sub	fp, #12
10d38     A7 20 02 FB | 	rdlong	local02, fp
10d3c     0C 4E 85 F1 | 	sub	fp, #12
10d40     00 04 00 FF 
10d44     00 20 56 F2 | 	cmps	local02, ##524288 wc
10d48     7C 00 90 3D |  if_ae	jmp	#LR__1414
10d4c     14 4E 05 F1 | 	add	fp, #20
10d50     A7 00 68 FC | 	wrlong	#0, fp
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 2C 02 FB | 	rdlong	local08, fp
10d5c     18 4E 85 F1 | 	sub	fp, #24
10d60                 | LR__1413
10d60     14 4E 05 F1 | 	add	fp, #20
10d64     A7 20 02 FB | 	rdlong	local02, fp
10d68     14 4E 85 F1 | 	sub	fp, #20
10d6c     16 21 52 F2 | 	cmps	local02, local08 wc
10d70     D8 00 90 3D |  if_ae	jmp	#LR__1417
10d74     0C 4E 05 F1 | 	add	fp, #12
10d78     A7 12 02 FB | 	rdlong	arg01, fp
10d7c     04 4E 05 F1 | 	add	fp, #4
10d80     A7 28 02 FB | 	rdlong	local06, fp
10d84     0A 28 66 F0 | 	shl	local06, #10
10d88     14 13 02 F1 | 	add	arg01, local06
10d8c     04 4E 05 F1 | 	add	fp, #4
10d90     A7 28 02 FB | 	rdlong	local06, fp
10d94     14 13 02 F1 | 	add	arg01, local06
10d98     4E 00 00 FF 
10d9c     B4 E4 05 F1 | 	add	objptr, ##40116
10da0     F2 28 02 F1 | 	add	local06, objptr
10da4     14 15 C2 FA | 	rdbyte	arg02, local06
10da8     09 15 42 FC | 	wrbyte	arg02, arg01
10dac     4E 00 00 FF 
10db0     B4 E4 85 F1 | 	sub	objptr, ##40116
10db4     A7 28 02 FB | 	rdlong	local06, fp
10db8     01 28 06 F1 | 	add	local06, #1
10dbc     A7 28 62 FC | 	wrlong	local06, fp
10dc0     14 4E 85 F1 | 	sub	fp, #20
10dc4     98 FF 9F FD | 	jmp	#LR__1413
10dc8                 | LR__1414
10dc8     14 4E 05 F1 | 	add	fp, #20
10dcc     A7 00 68 FC | 	wrlong	#0, fp
10dd0     04 4E 05 F1 | 	add	fp, #4
10dd4     A7 2E 02 FB | 	rdlong	local09, fp
10dd8     18 4E 85 F1 | 	sub	fp, #24
10ddc                 | LR__1415
10ddc     14 4E 05 F1 | 	add	fp, #20
10de0     A7 20 02 FB | 	rdlong	local02, fp
10de4     14 4E 85 F1 | 	sub	fp, #20
10de8     17 21 52 F2 | 	cmps	local02, local09 wc
10dec     5C 00 90 3D |  if_ae	jmp	#LR__1416
10df0     0C 4E 05 F1 | 	add	fp, #12
10df4     A7 12 02 FB | 	rdlong	arg01, fp
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 2C 02 FB | 	rdlong	local08, fp
10e00     0A 2C 66 F0 | 	shl	local08, #10
10e04     16 13 02 F1 | 	add	arg01, local08
10e08     04 4E 05 F1 | 	add	fp, #4
10e0c     A7 2C 02 FB | 	rdlong	local08, fp
10e10     16 13 02 F1 | 	add	arg01, local08
10e14     14 4E 85 F1 | 	sub	fp, #20
10e18     4E 00 00 FF 
10e1c     B4 E4 05 F1 | 	add	objptr, ##40116
10e20     F2 2C 02 F1 | 	add	local08, objptr
10e24     16 15 C2 FA | 	rdbyte	arg02, local08
10e28     4E 00 00 FF 
10e2c     B4 E4 85 F1 | 	sub	objptr, ##40116
10e30     AC D3 B0 FD | 	call	#_pspoke
10e34     14 4E 05 F1 | 	add	fp, #20
10e38     A7 2C 02 FB | 	rdlong	local08, fp
10e3c     01 2C 06 F1 | 	add	local08, #1
10e40     A7 2C 62 FC | 	wrlong	local08, fp
10e44     14 4E 85 F1 | 	sub	fp, #20
10e48     90 FF 9F FD | 	jmp	#LR__1415
10e4c                 | LR__1416
10e4c                 | LR__1417
10e4c     14 4E 05 F1 | 	add	fp, #20
10e50     A7 2E 02 FB | 	rdlong	local09, fp
10e54     17 29 02 F6 | 	mov	local06, local09
10e58     02 28 66 F0 | 	shl	local06, #2
10e5c     50 00 00 FF 
10e60     C4 E4 05 F1 | 	add	objptr, ##41156
10e64     F2 28 02 F1 | 	add	local06, objptr
10e68     02 2E 66 F0 | 	shl	local09, #2
10e6c     F2 2E 02 F1 | 	add	local09, objptr
10e70     17 2F 02 FB | 	rdlong	local09, local09
10e74     04 4E 05 F1 | 	add	fp, #4
10e78     A7 2C 02 FB | 	rdlong	local08, fp
10e7c     16 2F 02 F1 | 	add	local09, local08
10e80     14 2F 62 FC | 	wrlong	local09, local06
10e84     08 4E 85 F1 | 	sub	fp, #8
10e88     A7 2E 02 FB | 	rdlong	local09, fp
10e8c     01 2E 06 F1 | 	add	local09, #1
10e90     A7 2E 62 FC | 	wrlong	local09, fp
10e94     10 4E 85 F1 | 	sub	fp, #16
10e98     50 00 00 FF 
10e9c     C4 E4 85 F1 | 	sub	objptr, ##41156
10ea0     40 FE 9F FD | 	jmp	#LR__1412
10ea4                 | LR__1418
10ea4                 | LR__1419
10ea4     A7 F0 03 F6 | 	mov	ptra, fp
10ea8     B2 00 A0 FD | 	call	#popregs_
10eac                 | _do_get_ret
10eac     2D 00 64 FD | 	ret
10eb0                 | 
10eb0                 | ' 
10eb0                 | ' '-------------------- getenvsustain
10eb0                 | ' 
10eb0                 | ' sub do_getenvsustain
10eb0                 | _do_getenvsustain
10eb0     01 4A 05 F6 | 	mov	COUNT_, #1
10eb4     A8 00 A0 FD | 	call	#pushregs_
10eb8     10 F0 07 F1 | 	add	ptra, #16
10ebc     4A 00 00 FF 
10ec0     80 E4 05 F1 | 	add	objptr, ##38016
10ec4     F2 1E 02 FB | 	rdlong	local01, objptr
10ec8     0F 17 02 F6 | 	mov	arg03, local01
10ecc     01 16 66 F0 | 	shl	arg03, #1
10ed0     0F 17 02 F1 | 	add	arg03, local01
10ed4     02 16 66 F0 | 	shl	arg03, #2
10ed8     03 00 00 FF 
10edc     04 E4 85 F1 | 	sub	objptr, ##1540
10ee0     F2 16 02 F1 | 	add	arg03, objptr
10ee4     0B 17 02 FB | 	rdlong	arg03, arg03
10ee8     0C 4E 05 F1 | 	add	fp, #12
10eec     A7 16 62 FC | 	wrlong	arg03, fp
10ef0                 | ' 
10ef0                 | ' numpar=compiledline(lineptr_e).result.uresult
10ef0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
10ef0     0C 4E 85 F1 | 	sub	fp, #12
10ef4     02 16 16 F2 | 	cmp	arg03, #2 wc
10ef8     47 00 00 FF 
10efc     7C E4 85 F1 | 	sub	objptr, ##36476
10f00     0C 4E 05 C1 |  if_b	add	fp, #12
10f04     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10f08     0C 4E 85 C1 |  if_b	sub	fp, #12
10f0c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1420
10f10     00 12 06 F6 | 	mov	arg01, #0
10f14     98 63 B1 FD | 	call	#__system___getiolock_0568
10f18     FD 12 02 F6 | 	mov	arg01, result1
10f1c     64 06 B1 FD | 	call	#__system___lockmem
10f20     8C 01 00 FF 
10f24     6D 15 06 F6 | 	mov	arg02, ##@LR__5561
10f28     00 12 06 F6 | 	mov	arg01, #0
10f2c     00 16 06 F6 | 	mov	arg03, #0
10f30     44 13 B1 FD | 	call	#__system___basic_print_string
10f34     00 12 06 F6 | 	mov	arg01, #0
10f38     74 63 B1 FD | 	call	#__system___getiolock_0568
10f3c     FD 00 68 FC | 	wrlong	#0, result1
10f40     27 12 06 F6 | 	mov	arg01, #39
10f44     00 14 06 F6 | 	mov	arg02, #0
10f48     78 D0 B0 FD | 	call	#_printerror
10f4c     64 00 90 FD | 	jmp	#LR__1421
10f50                 | LR__1420
10f50     84 A8 BF FD | 	call	#_pop
10f54     FD 1E 02 F6 | 	mov	local01, result1
10f58     FE 16 02 F6 | 	mov	arg03, result2
10f5c     A7 1E 62 FC | 	wrlong	local01, fp
10f60     04 4E 05 F1 | 	add	fp, #4
10f64     A7 16 62 FC | 	wrlong	arg03, fp
10f68     04 4E 05 F1 | 	add	fp, #4
10f6c     A7 FE 61 FC | 	wrlong	result3, fp
10f70     08 4E 85 F1 | 	sub	fp, #8
10f74     A7 12 02 F6 | 	mov	arg01, fp
10f78     40 AA BF FD | 	call	#_converttoint
10f7c     FD 1E 02 F6 | 	mov	local01, result1
10f80     01 1E 66 F0 | 	shl	local01, #1
10f84     51 00 00 FF 
10f88     C8 E5 05 F1 | 	add	objptr, ##41928
10f8c     F2 1E 02 F1 | 	add	local01, objptr
10f90     0F 1F E2 FA | 	rdword	local01, local01
10f94     A7 1E 62 FC | 	wrlong	local01, fp
10f98     08 4E 05 F1 | 	add	fp, #8
10f9c     A7 38 68 FC | 	wrlong	#28, fp
10fa0     08 4E 85 F1 | 	sub	fp, #8
10fa4     A7 12 02 F6 | 	mov	arg01, fp
10fa8     51 00 00 FF 
10fac     C8 E5 85 F1 | 	sub	objptr, ##41928
10fb0     BC A8 BF FD | 	call	#_push
10fb4                 | LR__1421
10fb4     A7 F0 03 F6 | 	mov	ptra, fp
10fb8     B2 00 A0 FD | 	call	#popregs_
10fbc                 | _do_getenvsustain_ret
10fbc     2D 00 64 FD | 	ret
10fc0                 | 
10fc0                 | ' 
10fc0                 | ' '-------------------- getnotevalue
10fc0                 | ' 
10fc0                 | ' sub do_getnotevalue
10fc0                 | _do_getnotevalue
10fc0     01 4A 05 F6 | 	mov	COUNT_, #1
10fc4     A8 00 A0 FD | 	call	#pushregs_
10fc8     1C F0 07 F1 | 	add	ptra, #28
10fcc     08 A8 BF FD | 	call	#_pop
10fd0     FF 14 02 F6 | 	mov	arg02, result3
10fd4     10 4E 05 F1 | 	add	fp, #16
10fd8     A7 FA 61 FC | 	wrlong	result1, fp
10fdc     04 4E 05 F1 | 	add	fp, #4
10fe0     A7 FC 61 FC | 	wrlong	result2, fp
10fe4     04 4E 05 F1 | 	add	fp, #4
10fe8     A7 14 62 FC | 	wrlong	arg02, fp
10fec     08 4E 85 F1 | 	sub	fp, #8
10ff0     A7 12 02 F6 | 	mov	arg01, fp
10ff4     10 4E 85 F1 | 	sub	fp, #16
10ff8     C0 A9 BF FD | 	call	#_converttoint
10ffc     FD 14 52 F6 | 	abs	arg02, result1 wc
11000     0C 14 16 FD | 	qdiv	arg02, #12
11004     0C 4E 05 F1 | 	add	fp, #12
11008     A7 FA 61 FC | 	wrlong	result1, fp
1100c     14 00 00 FF 
11010     D8 E4 05 F1 | 	add	objptr, ##10456
11014     08 4E 85 F1 | 	sub	fp, #8
11018     19 14 62 FD | 	getqy	arg02
1101c     0A 15 82 F6 | 	negc	arg02, arg02
11020     02 14 66 F0 | 	shl	arg02, #2
11024     F2 14 02 F1 | 	add	arg02, objptr
11028     0A 15 02 FB | 	rdlong	arg02, arg02
1102c     A7 14 62 FC | 	wrlong	arg02, fp
11030     08 4E 05 F1 | 	add	fp, #8
11034     A7 14 02 FB | 	rdlong	arg02, fp
11038     0A 15 52 F6 | 	abs	arg02, arg02 wc
1103c     0C 14 16 FD | 	qdiv	arg02, #12
11040     0C 4E 85 F1 | 	sub	fp, #12
11044     14 00 00 FF 
11048     D8 E4 85 F1 | 	sub	objptr, ##10456
1104c     18 14 62 FD | 	getqx	arg02
11050     0A 13 82 F6 | 	negc	arg01, arg02
11054     09 13 52 F6 | 	abs	arg01, arg01 wc
11058     1F 1E C6 C9 |  if_b	decod	local01, #31
1105c     00 1E 06 36 |  if_ae	mov	local01, #0
11060     D8 2E B1 FD | 	call	#__system___float_fromuns
11064     0F FB 61 F5 | 	xor	result1, local01
11068     08 4E 05 F1 | 	add	fp, #8
1106c     A7 FA 61 FC | 	wrlong	result1, fp
11070     FD 14 02 F6 | 	mov	arg02, result1
11074     08 4E 85 F1 | 	sub	fp, #8
11078     1E 12 C6 F9 | 	decod	arg01, #30
1107c     C8 41 B1 FD | 	call	#__system____builtin_powf
11080     FD 12 02 F6 | 	mov	arg01, result1
11084     04 4E 05 F1 | 	add	fp, #4
11088     A7 14 02 FB | 	rdlong	arg02, fp
1108c     04 4E 85 F1 | 	sub	fp, #4
11090     AC 32 B1 FD | 	call	#__system___float_mul
11094     A7 FA 61 FC | 	wrlong	result1, fp
11098     10 4E 05 F1 | 	add	fp, #16
1109c     A7 FA 61 FC | 	wrlong	result1, fp
110a0     08 4E 05 F1 | 	add	fp, #8
110a4     A7 3C 68 FC | 	wrlong	#30, fp
110a8     08 4E 85 F1 | 	sub	fp, #8
110ac     A7 12 02 F6 | 	mov	arg01, fp
110b0     10 4E 85 F1 | 	sub	fp, #16
110b4     B8 A7 BF FD | 	call	#_push
110b8     A7 F0 03 F6 | 	mov	ptra, fp
110bc     B2 00 A0 FD | 	call	#popregs_
110c0                 | _do_getnotevalue_ret
110c0     2D 00 64 FD | 	ret
110c4                 | 
110c4                 | ' 
110c4                 | ' '-------------------- getpixel
110c4                 | ' 
110c4                 | ' sub do_getpixel
110c4                 | _do_getpixel
110c4     00 4A 05 F6 | 	mov	COUNT_, #0
110c8     A8 00 A0 FD | 	call	#pushregs_
110cc     24 F0 07 F1 | 	add	ptra, #36
110d0     4A 00 00 FF 
110d4     80 E4 05 F1 | 	add	objptr, ##38016
110d8     F2 16 02 FB | 	rdlong	arg03, objptr
110dc     0B 15 02 F6 | 	mov	arg02, arg03
110e0     01 14 66 F0 | 	shl	arg02, #1
110e4     0B 15 02 F1 | 	add	arg02, arg03
110e8     02 14 66 F0 | 	shl	arg02, #2
110ec     03 00 00 FF 
110f0     04 E4 85 F1 | 	sub	objptr, ##1540
110f4     F2 14 02 F1 | 	add	arg02, objptr
110f8     0A 17 02 FB | 	rdlong	arg03, arg02
110fc     18 4E 05 F1 | 	add	fp, #24
11100     A7 16 62 FC | 	wrlong	arg03, fp
11104                 | ' 
11104                 | ' numpar=compiledline(lineptr_e).result.uresult
11104                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11104     18 4E 85 F1 | 	sub	fp, #24
11108     02 16 0E F2 | 	cmp	arg03, #2 wz
1110c     47 00 00 FF 
11110     7C E4 85 F1 | 	sub	objptr, ##36476
11114     40 00 90 AD |  if_e	jmp	#LR__1430
11118     00 12 06 F6 | 	mov	arg01, #0
1111c     90 61 B1 FD | 	call	#__system___getiolock_0568
11120     FD 12 02 F6 | 	mov	arg01, result1
11124     5C 04 B1 FD | 	call	#__system___lockmem
11128     8C 01 00 FF 
1112c     7D 15 06 F6 | 	mov	arg02, ##@LR__5562
11130     00 12 06 F6 | 	mov	arg01, #0
11134     00 16 06 F6 | 	mov	arg03, #0
11138     3C 11 B1 FD | 	call	#__system___basic_print_string
1113c     00 12 06 F6 | 	mov	arg01, #0
11140     6C 61 B1 FD | 	call	#__system___getiolock_0568
11144     FD 00 68 FC | 	wrlong	#0, result1
11148     27 12 06 F6 | 	mov	arg01, #39
1114c     00 14 06 F6 | 	mov	arg02, #0
11150     70 CE B0 FD | 	call	#_printerror
11154     B4 00 90 FD | 	jmp	#LR__1431
11158                 | LR__1430
11158     7C A6 BF FD | 	call	#_pop
1115c     FD 16 02 F6 | 	mov	arg03, result1
11160     FE 14 02 F6 | 	mov	arg02, result2
11164     FF 12 02 F6 | 	mov	arg01, result3
11168     0C 4E 05 F1 | 	add	fp, #12
1116c     A7 16 62 FC | 	wrlong	arg03, fp
11170     04 4E 05 F1 | 	add	fp, #4
11174     A7 14 62 FC | 	wrlong	arg02, fp
11178     04 4E 05 F1 | 	add	fp, #4
1117c     A7 12 62 FC | 	wrlong	arg01, fp
11180     14 4E 85 F1 | 	sub	fp, #20
11184     50 A6 BF FD | 	call	#_pop
11188     FF 16 02 F6 | 	mov	arg03, result3
1118c     A7 FA 61 FC | 	wrlong	result1, fp
11190     04 4E 05 F1 | 	add	fp, #4
11194     A7 FC 61 FC | 	wrlong	result2, fp
11198     04 4E 05 F1 | 	add	fp, #4
1119c     A7 16 62 FC | 	wrlong	arg03, fp
111a0     08 4E 85 F1 | 	sub	fp, #8
111a4     A7 12 02 F6 | 	mov	arg01, fp
111a8     10 A8 BF FD | 	call	#_converttoint
111ac     1C 4E 05 F1 | 	add	fp, #28
111b0     A7 FA 61 FC | 	wrlong	result1, fp
111b4     10 4E 85 F1 | 	sub	fp, #16
111b8     A7 12 02 F6 | 	mov	arg01, fp
111bc     0C 4E 85 F1 | 	sub	fp, #12
111c0     F8 A7 BF FD | 	call	#_converttoint
111c4     FD 16 02 F6 | 	mov	arg03, result1
111c8     20 4E 05 F1 | 	add	fp, #32
111cc     A7 16 62 FC | 	wrlong	arg03, fp
111d0     F2 12 02 FB | 	rdlong	arg01, objptr
111d4     04 4E 85 F1 | 	sub	fp, #4
111d8     A7 FE 01 FB | 	rdlong	result3, fp
111dc     FF 12 02 F1 | 	add	arg01, result3
111e0     1C 4E 85 F1 | 	sub	fp, #28
111e4     0A 16 66 F0 | 	shl	arg03, #10
111e8     0B 13 02 F1 | 	add	arg01, arg03
111ec     38 D0 B0 FD | 	call	#_pspeek
111f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
111f4     A7 FA 61 FC | 	wrlong	result1, fp
111f8     08 4E 05 F1 | 	add	fp, #8
111fc     A7 3A 68 FC | 	wrlong	#29, fp
11200     08 4E 85 F1 | 	sub	fp, #8
11204     A7 12 02 F6 | 	mov	arg01, fp
11208     64 A6 BF FD | 	call	#_push
1120c                 | LR__1431
1120c     A7 F0 03 F6 | 	mov	ptra, fp
11210     B2 00 A0 FD | 	call	#popregs_
11214                 | _do_getpixel_ret
11214     2D 00 64 FD | 	ret
11218                 | 
11218                 | ' 
11218                 | ' '-------------------- gettime
11218                 | ' 
11218                 | ' sub do_gettime
11218                 | _do_gettime
11218     02 4A 05 F6 | 	mov	COUNT_, #2
1121c     A8 00 A0 FD | 	call	#pushregs_
11220     14 F0 07 F1 | 	add	ptra, #20
11224                 | ' 
11224                 | ' const asm 
11224     1A 1E 72 FD | 	getct	local01 wc
11228     1A 20 62 FD | 	getct	local02
1122c                 | ' return hi1, lo1
1122c     10 FD 01 F6 | 	mov	result2, local02
11230     A7 1E 62 FC | 	wrlong	local01, fp
11234     04 4E 05 F1 | 	add	fp, #4
11238     A7 FC 61 FC | 	wrlong	result2, fp
1123c     0C 4E 05 F1 | 	add	fp, #12
11240     A7 3A 68 FC | 	wrlong	#29, fp
11244     0C 4E 85 F1 | 	sub	fp, #12
11248     A7 12 02 FB | 	rdlong	arg01, fp
1124c     04 4E 05 F1 | 	add	fp, #4
11250     A7 12 62 FC | 	wrlong	arg01, fp
11254     08 4E 85 F1 | 	sub	fp, #8
11258     A7 12 02 FB | 	rdlong	arg01, fp
1125c     0C 4E 05 F1 | 	add	fp, #12
11260     A7 12 62 FC | 	wrlong	arg01, fp
11264     04 4E 85 F1 | 	sub	fp, #4
11268     A7 12 02 F6 | 	mov	arg01, fp
1126c     08 4E 85 F1 | 	sub	fp, #8
11270     FC A5 BF FD | 	call	#_push
11274     A7 F0 03 F6 | 	mov	ptra, fp
11278     B2 00 A0 FD | 	call	#popregs_
1127c                 | _do_gettime_ret
1127c     2D 00 64 FD | 	ret
11280                 | 
11280                 | ' 
11280                 | ' '-------------------- gosub
11280                 | ' 
11280                 | ' sub do_gosub()
11280                 | _do_gosub
11280     50 00 00 FF 
11284     0C E5 05 F1 | 	add	objptr, ##41228
11288     F2 00 02 FB | 	rdlong	_var01, objptr
1128c     01 00 06 F1 | 	add	_var01, #1
11290     F2 00 62 FC | 	wrlong	_var01, objptr
11294                 | ' gosubtop+=1
11294                 | ' if compiledline(lineptr_e+1).result_type=token_end then
11294     06 00 00 FF 
11298     8C E4 85 F1 | 	sub	objptr, ##3212
1129c     F2 00 02 FB | 	rdlong	_var01, objptr
112a0     01 00 06 F1 | 	add	_var01, #1
112a4     00 03 02 F6 | 	mov	_var02, _var01
112a8     01 02 66 F0 | 	shl	_var02, #1
112ac     00 03 02 F1 | 	add	_var02, _var01
112b0     02 02 66 F0 | 	shl	_var02, #2
112b4     03 00 00 FF 
112b8     04 E4 85 F1 | 	sub	objptr, ##1540
112bc     F2 02 02 F1 | 	add	_var02, objptr
112c0     08 02 06 F1 | 	add	_var02, #8
112c4     01 03 02 FB | 	rdlong	_var02, _var02
112c8     FE 03 0E F2 | 	cmp	_var02, #510 wz
112cc     47 00 00 FF 
112d0     7C E4 85 F1 | 	sub	objptr, ##36476
112d4     58 00 90 5D |  if_ne	jmp	#LR__1440
112d8     50 00 00 FF 
112dc     0C E5 05 F1 | 	add	objptr, ##41228
112e0     F2 02 02 FB | 	rdlong	_var02, objptr
112e4     03 02 66 F0 | 	shl	_var02, #3
112e8     03 00 00 FF 
112ec     60 E5 85 F1 | 	sub	objptr, ##1888
112f0     F2 02 02 F1 | 	add	_var02, objptr
112f4     03 00 00 FF 
112f8     0C E5 05 F1 | 	add	objptr, ##1804
112fc     F2 00 02 FB | 	rdlong	_var01, objptr
11300     01 01 62 FC | 	wrlong	_var01, _var02
11304     54 E4 05 F1 | 	add	objptr, #84
11308     F2 02 02 FB | 	rdlong	_var02, objptr
1130c     03 02 66 F0 | 	shl	_var02, #3
11310     03 00 00 FF 
11314     60 E5 85 F1 | 	sub	objptr, ##1888
11318     F2 02 02 F1 | 	add	_var02, objptr
1131c     04 02 06 F1 | 	add	_var02, #4
11320     01 01 68 FC | 	wrlong	#0, _var02
11324     4C 00 00 FF 
11328     AC E5 85 F1 | 	sub	objptr, ##39340
1132c     64 00 90 FD | 	jmp	#LR__1441
11330                 | LR__1440
11330     50 00 00 FF 
11334     0C E5 05 F1 | 	add	objptr, ##41228
11338     F2 02 02 FB | 	rdlong	_var02, objptr
1133c     03 02 66 F0 | 	shl	_var02, #3
11340     03 00 00 FF 
11344     60 E5 85 F1 | 	sub	objptr, ##1888
11348     F2 02 02 F1 | 	add	_var02, objptr
1134c     03 00 00 FF 
11350     14 E5 05 F1 | 	add	objptr, ##1812
11354     F2 00 02 FB | 	rdlong	_var01, objptr
11358     01 01 62 FC | 	wrlong	_var01, _var02
1135c     4C E4 05 F1 | 	add	objptr, #76
11360     F2 02 02 FB | 	rdlong	_var02, objptr
11364     03 02 66 F0 | 	shl	_var02, #3
11368     03 00 00 FF 
1136c     60 E5 85 F1 | 	sub	objptr, ##1888
11370     F2 02 02 F1 | 	add	_var02, objptr
11374     02 00 00 FF 
11378     2C E5 85 F1 | 	sub	objptr, ##1324
1137c     F2 00 02 FB | 	rdlong	_var01, objptr
11380     4A 00 00 FF 
11384     80 E4 85 F1 | 	sub	objptr, ##38016
11388     02 00 06 F1 | 	add	_var01, #2
1138c     04 02 06 F1 | 	add	_var02, #4
11390     01 01 62 FC | 	wrlong	_var01, _var02
11394                 | LR__1441
11394                 | _do_gosub_ret
11394     2D 00 64 FD | 	ret
11398                 | 
11398                 | ' 
11398                 | ' '--------------------- goto
11398                 | ' 
11398                 | ' '------- fast goto
11398                 | ' 
11398                 | ' sub do_fast_goto
11398                 | _do_fast_goto
11398     02 4A 05 F6 | 	mov	COUNT_, #2
1139c     A8 00 A0 FD | 	call	#pushregs_
113a0                 | _do_fast_goto_enter
113a0     4A 00 00 FF 
113a4     80 E4 05 F1 | 	add	objptr, ##38016
113a8     F2 12 02 FB | 	rdlong	arg01, objptr
113ac     09 1F 02 F6 | 	mov	local01, arg01
113b0     01 1E 66 F0 | 	shl	local01, #1
113b4     09 1F 02 F1 | 	add	local01, arg01
113b8     02 1E 66 F0 | 	shl	local01, #2
113bc     03 00 00 FF 
113c0     04 E4 85 F1 | 	sub	objptr, ##1540
113c4     F2 1E 02 F1 | 	add	local01, objptr
113c8     0F 21 02 FB | 	rdlong	local02, local01
113cc     10 13 02 F6 | 	mov	arg01, local02
113d0     47 00 00 FF 
113d4     7C E4 85 F1 | 	sub	objptr, ##36476
113d8     A4 CE B0 FD | 	call	#_pslpeek
113dc     FD 12 02 F6 | 	mov	arg01, result1
113e0                 | ' 
113e0                 | ' testptr=compiledline(lineptr_e).result.uresult
113e0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
113e0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
113e0     4A 00 00 FF 
113e4     80 E4 05 F1 | 	add	objptr, ##38016
113e8     F2 FA 01 FB | 	rdlong	result1, objptr
113ec     FD 1E 02 F6 | 	mov	local01, result1
113f0     01 1E 66 F0 | 	shl	local01, #1
113f4     FD 1E 02 F1 | 	add	local01, result1
113f8     02 1E 66 F0 | 	shl	local01, #2
113fc     03 00 00 FF 
11400     04 E4 85 F1 | 	sub	objptr, ##1540
11404     F2 1E 02 F1 | 	add	local01, objptr
11408     04 1E 06 F1 | 	add	local01, #4
1140c     0F 1F 02 FB | 	rdlong	local01, local01
11410     0F 13 0A F2 | 	cmp	arg01, local01 wz
11414     47 00 00 FF 
11418     7C E4 85 F1 | 	sub	objptr, ##36476
1141c     58 00 90 5D |  if_ne	jmp	#LR__1450
11420     50 00 00 FF 
11424     B8 E4 05 F1 | 	add	objptr, ##41144
11428     F2 20 62 FC | 	wrlong	local02, objptr
1142c     06 00 00 FF 
11430     3C E4 85 F1 | 	sub	objptr, ##3132
11434     F2 20 02 FB | 	rdlong	local02, objptr
11438     01 20 86 F1 | 	sub	local02, #1
1143c     04 E4 05 F1 | 	add	objptr, #4
11440     F2 20 62 FC | 	wrlong	local02, objptr
11444                 | '   runptr=testptr
11444                 | '   lineptr_e=lineptr-1
11444                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
11444     06 00 00 FF 
11448     84 E4 05 F1 | 	add	objptr, ##3204
1144c     F2 20 02 FB | 	rdlong	local02, objptr
11450     50 00 00 FF 
11454     04 E5 85 F1 | 	sub	objptr, ##41220
11458     FF FF 3F FF 
1145c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11460     50 00 00 AF 
11464     04 E5 05 A1 |  if_e	add	objptr, ##41220
11468     F2 00 68 AC |  if_e	wrlong	#0, objptr
1146c     50 00 00 AF 
11470     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11474     04 00 90 FD | 	jmp	#LR__1451
11478                 | LR__1450
11478     0C 00 B0 FD | 	call	#_do_find_goto
1147c                 | LR__1451
1147c     A7 F0 03 F6 | 	mov	ptra, fp
11480     B2 00 A0 FD | 	call	#popregs_
11484                 | _do_fast_goto_ret
11484     2D 00 64 FD | 	ret
11488                 | 
11488                 | ' 
11488                 | ' '------- find goto  
11488                 | ' 
11488                 | ' sub do_find_goto
11488                 | _do_find_goto
11488     03 4A 05 F6 | 	mov	COUNT_, #3
1148c     A8 00 A0 FD | 	call	#pushregs_
11490     24 F0 07 F1 | 	add	ptra, #36
11494                 | _do_find_goto_enter
11494     4A 00 00 FF 
11498     80 E4 05 F1 | 	add	objptr, ##38016
1149c     F2 1E 02 FB | 	rdlong	local01, objptr
114a0     0F 21 02 F6 | 	mov	local02, local01
114a4     01 20 66 F0 | 	shl	local02, #1
114a8     0F 21 02 F1 | 	add	local02, local01
114ac     02 20 66 F0 | 	shl	local02, #2
114b0     03 00 00 FF 
114b4     04 E4 85 F1 | 	sub	objptr, ##1540
114b8     F2 20 02 F1 | 	add	local02, objptr
114bc     04 20 06 F1 | 	add	local02, #4
114c0     10 21 02 FB | 	rdlong	local02, local02
114c4     A7 20 62 FC | 	wrlong	local02, fp
114c8     03 00 00 FF 
114cc     0C E4 05 F1 | 	add	objptr, ##1548
114d0     F2 22 02 FB | 	rdlong	local03, objptr
114d4     4A 00 00 FF 
114d8     88 E4 85 F1 | 	sub	objptr, ##38024
114dc     04 4E 05 F1 | 	add	fp, #4
114e0     A7 22 62 FC | 	wrlong	local03, fp
114e4     04 4E 85 F1 | 	sub	fp, #4
114e8                 | ' 
114e8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
114e8                 | ' gotoptr=programstart
114e8                 | ' do
114e8                 | LR__1460
114e8     0C 4E 05 F1 | 	add	fp, #12
114ec     A7 12 02 F6 | 	mov	arg01, fp
114f0     08 4E 85 F1 | 	sub	fp, #8
114f4     A7 14 02 FB | 	rdlong	arg02, fp
114f8     04 4E 85 F1 | 	sub	fp, #4
114fc     18 16 06 F6 | 	mov	arg03, #24
11500     0B 00 00 FF 
11504     CC E4 05 F1 | 	add	objptr, ##5836
11508     38 F4 B0 FD | 	call	#_psram_spin2_read1
1150c     0B 00 00 FF 
11510     CC E4 85 F1 | 	sub	objptr, ##5836
11514                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11514                 | '   if gotoheader(0)<>$FFFFFFFF then
11514     0C 4E 05 F1 | 	add	fp, #12
11518     A7 22 02 FB | 	rdlong	local03, fp
1151c     0C 4E 85 F1 | 	sub	fp, #12
11520     FF FF 7F FF 
11524     FF 23 0E F2 | 	cmp	local03, ##-1 wz
11528     24 00 90 AD |  if_e	jmp	#LR__1461
1152c     04 4E 05 F1 | 	add	fp, #4
11530     A7 22 02 FB | 	rdlong	local03, fp
11534     04 4E 05 F1 | 	add	fp, #4
11538     A7 22 62 FC | 	wrlong	local03, fp
1153c     18 4E 05 F1 | 	add	fp, #24
11540     A7 22 02 FB | 	rdlong	local03, fp
11544     1C 4E 85 F1 | 	sub	fp, #28
11548     A7 22 62 FC | 	wrlong	local03, fp
1154c     04 4E 85 F1 | 	sub	fp, #4
11550                 | LR__1461
11550     20 4E 05 F1 | 	add	fp, #32
11554     A7 22 02 FB | 	rdlong	local03, fp
11558     20 4E 85 F1 | 	sub	fp, #32
1155c     FF FF 3F FF 
11560     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
11564     0C 4E 05 51 |  if_ne	add	fp, #12
11568     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1156c     0C 4E 85 51 |  if_ne	sub	fp, #12
11570     FF FF 7F 5F 
11574     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11578     18 00 90 AD |  if_e	jmp	#LR__1462
1157c     0C 4E 05 F1 | 	add	fp, #12
11580     A7 22 02 FB | 	rdlong	local03, fp
11584     0C 4E 85 F1 | 	sub	fp, #12
11588     A7 20 02 FB | 	rdlong	local02, fp
1158c     10 23 0A F2 | 	cmp	local03, local02 wz
11590     54 FF 9F 5D |  if_ne	jmp	#LR__1460
11594                 | LR__1462
11594                 | ' 
11594                 | ' if gotoheader(0)=gotoline then
11594     0C 4E 05 F1 | 	add	fp, #12
11598     A7 22 02 FB | 	rdlong	local03, fp
1159c     0C 4E 85 F1 | 	sub	fp, #12
115a0     A7 1E 02 FB | 	rdlong	local01, fp
115a4     0F 23 0A F2 | 	cmp	local03, local01 wz
115a8     D8 00 90 5D |  if_ne	jmp	#LR__1463
115ac     4A 00 00 FF 
115b0     80 E4 05 F1 | 	add	objptr, ##38016
115b4     F2 1E 02 FB | 	rdlong	local01, objptr
115b8     0F 21 02 F6 | 	mov	local02, local01
115bc     01 20 66 F0 | 	shl	local02, #1
115c0     0F 21 02 F1 | 	add	local02, local01
115c4     02 20 66 F0 | 	shl	local02, #2
115c8     03 00 00 FF 
115cc     04 E4 85 F1 | 	sub	objptr, ##1540
115d0     F2 20 02 F1 | 	add	local02, objptr
115d4     08 4E 05 F1 | 	add	fp, #8
115d8     A7 22 02 FB | 	rdlong	local03, fp
115dc     10 23 62 FC | 	wrlong	local03, local02
115e0     03 00 00 FF 
115e4     04 E4 05 F1 | 	add	objptr, ##1540
115e8     F2 1E 02 FB | 	rdlong	local01, objptr
115ec     0F 21 02 F6 | 	mov	local02, local01
115f0     01 20 66 F0 | 	shl	local02, #1
115f4     0F 21 02 F1 | 	add	local02, local01
115f8     02 20 66 F0 | 	shl	local02, #2
115fc     03 00 00 FF 
11600     04 E4 85 F1 | 	sub	objptr, ##1540
11604     F2 20 02 F1 | 	add	local02, objptr
11608     08 20 06 F1 | 	add	local02, #8
1160c     10 9D 68 FC | 	wrlong	#78, local02
11610     03 00 00 FF 
11614     04 E4 05 F1 | 	add	objptr, ##1540
11618     F2 20 02 FB | 	rdlong	local02, objptr
1161c     10 13 02 F6 | 	mov	arg01, local02
11620     01 12 66 F0 | 	shl	arg01, #1
11624     10 13 02 F1 | 	add	arg01, local02
11628     02 12 66 F0 | 	shl	arg01, #2
1162c     03 00 00 FF 
11630     04 E4 85 F1 | 	sub	objptr, ##1540
11634     F2 12 02 F1 | 	add	arg01, objptr
11638     09 00 00 FF 
1163c     44 E4 05 F1 | 	add	objptr, ##4676
11640     F2 14 02 FB | 	rdlong	arg02, objptr
11644     02 22 06 F6 | 	mov	local03, #2
11648     10 23 02 F1 | 	add	local03, local02
1164c     0B 00 00 FF 
11650     5C E4 85 F1 | 	sub	objptr, ##5724
11654     F2 16 02 FB | 	rdlong	arg03, objptr
11658     0B 23 02 FD | 	qmul	local03, arg03
1165c     08 4E 85 F1 | 	sub	fp, #8
11660     39 00 00 FF 
11664     98 E5 85 F1 | 	sub	objptr, ##29592
11668     18 22 62 FD | 	getqx	local03
1166c     11 15 02 F1 | 	add	arg02, local03
11670     6C F3 B0 FD | 	call	#_psram_spin2_write
11674     0B 00 00 FF 
11678     CC E4 85 F1 | 	sub	objptr, ##5836
1167c     18 FD BF FD | 	call	#_do_fast_goto
11680     0C 00 90 FD | 	jmp	#LR__1464
11684                 | LR__1463
11684     26 12 06 F6 | 	mov	arg01, #38
11688     00 14 06 F6 | 	mov	arg02, #0
1168c     34 C9 B0 FD | 	call	#_printerror
11690                 | LR__1464
11690     A7 F0 03 F6 | 	mov	ptra, fp
11694     B2 00 A0 FD | 	call	#popregs_
11698                 | _do_find_goto_ret
11698     2D 00 64 FD | 	ret
1169c                 | 
1169c                 | ' 
1169c                 | ' '------- slow goto  
1169c                 | ' 
1169c                 | ' sub do_slow_goto
1169c                 | _do_slow_goto
1169c     02 4A 05 F6 | 	mov	COUNT_, #2
116a0     A8 00 A0 FD | 	call	#pushregs_
116a4     30 F0 07 F1 | 	add	ptra, #48
116a8     2C A1 BF FD | 	call	#_pop
116ac     FF 1E 02 F6 | 	mov	local01, result3
116b0     24 4E 05 F1 | 	add	fp, #36
116b4     A7 FA 61 FC | 	wrlong	result1, fp
116b8     04 4E 05 F1 | 	add	fp, #4
116bc     A7 FC 61 FC | 	wrlong	result2, fp
116c0     04 4E 05 F1 | 	add	fp, #4
116c4     A7 1E 62 FC | 	wrlong	local01, fp
116c8     08 4E 85 F1 | 	sub	fp, #8
116cc     A7 12 02 F6 | 	mov	arg01, fp
116d0     24 4E 85 F1 | 	sub	fp, #36
116d4     E4 A2 BF FD | 	call	#_converttoint
116d8     A7 FA 61 FC | 	wrlong	result1, fp
116dc     4A 00 00 FF 
116e0     88 E4 05 F1 | 	add	objptr, ##38024
116e4     F2 20 02 FB | 	rdlong	local02, objptr
116e8     4A 00 00 FF 
116ec     88 E4 85 F1 | 	sub	objptr, ##38024
116f0     04 4E 05 F1 | 	add	fp, #4
116f4     A7 20 62 FC | 	wrlong	local02, fp
116f8     04 4E 85 F1 | 	sub	fp, #4
116fc                 | ' 
116fc                 | ' t1=pop() : gotoline=converttoint(t1)
116fc                 | ' gotoptr=programstart
116fc                 | ' do
116fc                 | LR__1470
116fc     0C 4E 05 F1 | 	add	fp, #12
11700     A7 12 02 F6 | 	mov	arg01, fp
11704     08 4E 85 F1 | 	sub	fp, #8
11708     A7 14 02 FB | 	rdlong	arg02, fp
1170c     04 4E 85 F1 | 	sub	fp, #4
11710     18 16 06 F6 | 	mov	arg03, #24
11714     0B 00 00 FF 
11718     CC E4 05 F1 | 	add	objptr, ##5836
1171c     24 F2 B0 FD | 	call	#_psram_spin2_read1
11720     0B 00 00 FF 
11724     CC E4 85 F1 | 	sub	objptr, ##5836
11728                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11728                 | '   if gotoheader(0)<>$FFFFFFFF then
11728     0C 4E 05 F1 | 	add	fp, #12
1172c     A7 20 02 FB | 	rdlong	local02, fp
11730     0C 4E 85 F1 | 	sub	fp, #12
11734     FF FF 7F FF 
11738     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1173c     24 00 90 AD |  if_e	jmp	#LR__1471
11740     04 4E 05 F1 | 	add	fp, #4
11744     A7 20 02 FB | 	rdlong	local02, fp
11748     04 4E 05 F1 | 	add	fp, #4
1174c     A7 20 62 FC | 	wrlong	local02, fp
11750     18 4E 05 F1 | 	add	fp, #24
11754     A7 20 02 FB | 	rdlong	local02, fp
11758     1C 4E 85 F1 | 	sub	fp, #28
1175c     A7 20 62 FC | 	wrlong	local02, fp
11760     04 4E 85 F1 | 	sub	fp, #4
11764                 | LR__1471
11764     20 4E 05 F1 | 	add	fp, #32
11768     A7 20 02 FB | 	rdlong	local02, fp
1176c     20 4E 85 F1 | 	sub	fp, #32
11770     FF FF 3F FF 
11774     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11778     0C 4E 05 51 |  if_ne	add	fp, #12
1177c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11780     0C 4E 85 51 |  if_ne	sub	fp, #12
11784     FF FF 7F 5F 
11788     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1178c     18 00 90 AD |  if_e	jmp	#LR__1472
11790     0C 4E 05 F1 | 	add	fp, #12
11794     A7 20 02 FB | 	rdlong	local02, fp
11798     0C 4E 85 F1 | 	sub	fp, #12
1179c     A7 16 02 FB | 	rdlong	arg03, fp
117a0     0B 21 0A F2 | 	cmp	local02, arg03 wz
117a4     54 FF 9F 5D |  if_ne	jmp	#LR__1470
117a8                 | LR__1472
117a8                 | ' if gotoheader(0)=gotoline then  
117a8     0C 4E 05 F1 | 	add	fp, #12
117ac     A7 20 02 FB | 	rdlong	local02, fp
117b0     0C 4E 85 F1 | 	sub	fp, #12
117b4     A7 1E 02 FB | 	rdlong	local01, fp
117b8     0F 21 0A F2 | 	cmp	local02, local01 wz
117bc     60 00 90 5D |  if_ne	jmp	#LR__1473
117c0     08 4E 05 F1 | 	add	fp, #8
117c4     A7 20 02 FB | 	rdlong	local02, fp
117c8     08 4E 85 F1 | 	sub	fp, #8
117cc     50 00 00 FF 
117d0     B8 E4 05 F1 | 	add	objptr, ##41144
117d4     F2 20 62 FC | 	wrlong	local02, objptr
117d8     06 00 00 FF 
117dc     3C E4 85 F1 | 	sub	objptr, ##3132
117e0     F2 20 02 FB | 	rdlong	local02, objptr
117e4     01 20 86 F1 | 	sub	local02, #1
117e8     04 E4 05 F1 | 	add	objptr, #4
117ec     F2 20 62 FC | 	wrlong	local02, objptr
117f0                 | '    runptr=oldgotoptr
117f0                 | '    lineptr_e=lineptr-1
117f0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
117f0     06 00 00 FF 
117f4     84 E4 05 F1 | 	add	objptr, ##3204
117f8     F2 20 02 FB | 	rdlong	local02, objptr
117fc     50 00 00 FF 
11800     04 E5 85 F1 | 	sub	objptr, ##41220
11804     FF FF 3F FF 
11808     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1180c     50 00 00 AF 
11810     04 E5 05 A1 |  if_e	add	objptr, ##41220
11814     F2 00 68 AC |  if_e	wrlong	#0, objptr
11818     50 00 00 AF 
1181c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11820                 | LR__1473
11820     A7 F0 03 F6 | 	mov	ptra, fp
11824     B2 00 A0 FD | 	call	#popregs_
11828                 | _do_slow_goto_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' ' ----------------  hex$
1182c                 | ' 
1182c                 | ' sub do_hex
1182c                 | _do_hex
1182c     01 4A 05 F6 | 	mov	COUNT_, #1
11830     A8 00 A0 FD | 	call	#pushregs_
11834     18 F0 07 F1 | 	add	ptra, #24
11838     4A 00 00 FF 
1183c     80 E4 05 F1 | 	add	objptr, ##38016
11840     F2 1E 02 FB | 	rdlong	local01, objptr
11844     0F 17 02 F6 | 	mov	arg03, local01
11848     01 16 66 F0 | 	shl	arg03, #1
1184c     0F 17 02 F1 | 	add	arg03, local01
11850     02 16 66 F0 | 	shl	arg03, #2
11854     03 00 00 FF 
11858     04 E4 85 F1 | 	sub	objptr, ##1540
1185c     F2 16 02 F1 | 	add	arg03, objptr
11860     0B 17 02 FB | 	rdlong	arg03, arg03
11864     0C 4E 05 F1 | 	add	fp, #12
11868     A7 16 62 FC | 	wrlong	arg03, fp
1186c                 | ' 
1186c                 | ' numpar=compiledline(lineptr_e).result.uresult
1186c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
1186c     0C 4E 85 F1 | 	sub	fp, #12
11870     03 16 16 F2 | 	cmp	arg03, #3 wc
11874     47 00 00 FF 
11878     7C E4 85 F1 | 	sub	objptr, ##36476
1187c     0C 4E 05 C1 |  if_b	add	fp, #12
11880     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11884     0C 4E 85 C1 |  if_b	sub	fp, #12
11888     40 00 90 4D |  if_c_and_nz	jmp	#LR__1480
1188c     00 12 06 F6 | 	mov	arg01, #0
11890     1C 5A B1 FD | 	call	#__system___getiolock_0568
11894     FD 12 02 F6 | 	mov	arg01, result1
11898     E8 FC B0 FD | 	call	#__system___lockmem
1189c     8C 01 00 FF 
118a0     88 15 06 F6 | 	mov	arg02, ##@LR__5563
118a4     00 12 06 F6 | 	mov	arg01, #0
118a8     00 16 06 F6 | 	mov	arg03, #0
118ac     C8 09 B1 FD | 	call	#__system___basic_print_string
118b0     00 12 06 F6 | 	mov	arg01, #0
118b4     F8 59 B1 FD | 	call	#__system___getiolock_0568
118b8     FD 00 68 FC | 	wrlong	#0, result1
118bc     27 12 06 F6 | 	mov	arg01, #39
118c0     00 14 06 F6 | 	mov	arg02, #0
118c4     FC C6 B0 FD | 	call	#_printerror
118c8     B8 00 90 FD | 	jmp	#LR__1483
118cc                 | LR__1480
118cc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
118cc     0C 4E 05 F1 | 	add	fp, #12
118d0     A7 1E 02 FB | 	rdlong	local01, fp
118d4     0C 4E 85 F1 | 	sub	fp, #12
118d8     02 1E 0E F2 | 	cmp	local01, #2 wz
118dc     38 00 90 5D |  if_ne	jmp	#LR__1481
118e0     F4 9E BF FD | 	call	#_pop
118e4     FF 1E 02 F6 | 	mov	local01, result3
118e8     A7 FA 61 FC | 	wrlong	result1, fp
118ec     04 4E 05 F1 | 	add	fp, #4
118f0     A7 FC 61 FC | 	wrlong	result2, fp
118f4     04 4E 05 F1 | 	add	fp, #4
118f8     A7 1E 62 FC | 	wrlong	local01, fp
118fc     08 4E 85 F1 | 	sub	fp, #8
11900     A7 12 02 F6 | 	mov	arg01, fp
11904     B4 A0 BF FD | 	call	#_converttoint
11908     14 4E 05 F1 | 	add	fp, #20
1190c     A7 FA 61 FC | 	wrlong	result1, fp
11910     14 4E 85 F1 | 	sub	fp, #20
11914     0C 00 90 FD | 	jmp	#LR__1482
11918                 | LR__1481
11918     14 4E 05 F1 | 	add	fp, #20
1191c     A7 10 68 FC | 	wrlong	#8, fp
11920     14 4E 85 F1 | 	sub	fp, #20
11924                 | LR__1482
11924     B0 9E BF FD | 	call	#_pop
11928     FF 1E 02 F6 | 	mov	local01, result3
1192c     A7 FA 61 FC | 	wrlong	result1, fp
11930     04 4E 05 F1 | 	add	fp, #4
11934     A7 FC 61 FC | 	wrlong	result2, fp
11938     04 4E 05 F1 | 	add	fp, #4
1193c     A7 1E 62 FC | 	wrlong	local01, fp
11940     08 4E 85 F1 | 	sub	fp, #8
11944     A7 12 02 F6 | 	mov	arg01, fp
11948     70 A0 BF FD | 	call	#_converttoint
1194c     10 4E 05 F1 | 	add	fp, #16
11950     A7 FA 61 FC | 	wrlong	result1, fp
11954     FD 12 02 F6 | 	mov	arg01, result1
11958     04 4E 05 F1 | 	add	fp, #4
1195c     A7 14 02 FB | 	rdlong	arg02, fp
11960     14 4E 85 F1 | 	sub	fp, #20
11964     10 16 06 F6 | 	mov	arg03, #16
11968     E8 1E B1 FD | 	call	#__system__Number_S
1196c     A7 FA 61 FC | 	wrlong	result1, fp
11970     08 4E 05 F1 | 	add	fp, #8
11974     A7 3E 68 FC | 	wrlong	#31, fp
11978     08 4E 85 F1 | 	sub	fp, #8
1197c     A7 12 02 F6 | 	mov	arg01, fp
11980     EC 9E BF FD | 	call	#_push
11984                 | LR__1483
11984     A7 F0 03 F6 | 	mov	ptra, fp
11988     B2 00 A0 FD | 	call	#popregs_
1198c                 | _do_hex_ret
1198c     2D 00 64 FD | 	ret
11990                 | 
11990                 | ' 
11990                 | ' ' ----------------  if
11990                 | ' 
11990                 | ' sub do_if
11990                 | _do_if
11990     05 4A 05 F6 | 	mov	COUNT_, #5
11994     A8 00 A0 FD | 	call	#pushregs_
11998     3C 9E BF FD | 	call	#_pop
1199c     FD 1E 0A F6 | 	mov	local01, result1 wz
119a0     FE 20 02 F6 | 	mov	local02, result2
119a4     FF 22 02 F6 | 	mov	local03, result3
119a8                 | ' t1=pop()
119a8                 | ' ' if uresult=0, jump over else
119a8                 | ' if t1.result.uresult = 0 then 
119a8     BC 00 90 5D |  if_ne	jmp	#LR__1492
119ac                 | '   for i=lineptr_e to lineptr-1
119ac     4A 00 00 FF 
119b0     80 E4 05 F1 | 	add	objptr, ##38016
119b4     F2 24 02 FB | 	rdlong	local04, objptr
119b8     04 E4 85 F1 | 	sub	objptr, #4
119bc     F2 26 02 FB | 	rdlong	local05, objptr
119c0     4A 00 00 FF 
119c4     7C E4 85 F1 | 	sub	objptr, ##38012
119c8                 | LR__1490
119c8     13 25 52 F2 | 	cmps	local04, local05 wc
119cc     78 00 90 3D |  if_ae	jmp	#LR__1491
119d0     12 FF 01 F6 | 	mov	result3, local04
119d4     01 FE 65 F0 | 	shl	result3, #1
119d8     12 FF 01 F1 | 	add	result3, local04
119dc     02 FE 65 F0 | 	shl	result3, #2
119e0     47 00 00 FF 
119e4     7C E4 05 F1 | 	add	objptr, ##36476
119e8     F2 FE 01 F1 | 	add	result3, objptr
119ec     FF 1E 02 FB | 	rdlong	local01, result3
119f0     04 FE 05 F1 | 	add	result3, #4
119f4     FF FC 01 FB | 	rdlong	result2, result3
119f8     12 FF 01 F6 | 	mov	result3, local04
119fc     01 FE 65 F0 | 	shl	result3, #1
11a00     12 FF 01 F1 | 	add	result3, local04
11a04     02 FE 65 F0 | 	shl	result3, #2
11a08     F2 FE 01 F1 | 	add	result3, objptr
11a0c     08 FE 05 F1 | 	add	result3, #8
11a10     FF FE 01 FB | 	rdlong	result3, result3
11a14     FE 20 02 F6 | 	mov	local02, result2
11a18     FF 22 02 F6 | 	mov	local03, result3
11a1c                 | '     t1=compiledline(i)
11a1c                 | '     if t1.result_type=token_else then lineptr_e=i : return
11a1c     5A 22 0E F2 | 	cmp	local03, #90 wz
11a20     47 00 00 FF 
11a24     7C E4 85 F1 | 	sub	objptr, ##36476
11a28     4A 00 00 AF 
11a2c     80 E4 05 A1 |  if_e	add	objptr, ##38016
11a30     F2 24 62 AC |  if_e	wrlong	local04, objptr
11a34     4A 00 00 AF 
11a38     80 E4 85 A1 |  if_e	sub	objptr, ##38016
11a3c     28 00 90 AD |  if_e	jmp	#LR__1493
11a40     01 24 06 F1 | 	add	local04, #1
11a44     80 FF 9F FD | 	jmp	#LR__1490
11a48                 | LR__1491
11a48     4A 00 00 FF 
11a4c     7C E4 05 F1 | 	add	objptr, ##38012
11a50     F2 26 02 FB | 	rdlong	local05, objptr
11a54     01 26 86 F1 | 	sub	local05, #1
11a58     04 E4 05 F1 | 	add	objptr, #4
11a5c     F2 26 62 FC | 	wrlong	local05, objptr
11a60     4A 00 00 FF 
11a64     80 E4 85 F1 | 	sub	objptr, ##38016
11a68                 | LR__1492
11a68                 | LR__1493
11a68     A7 F0 03 F6 | 	mov	ptra, fp
11a6c     B2 00 A0 FD | 	call	#popregs_
11a70                 | _do_if_ret
11a70     2D 00 64 FD | 	ret
11a74                 | 
11a74                 | ' 
11a74                 | ' ' ----------------  inkey$
11a74                 | ' 
11a74                 | ' sub do_inkey
11a74                 | _do_inkey
11a74     02 4A 05 F6 | 	mov	COUNT_, #2
11a78     A8 00 A0 FD | 	call	#pushregs_
11a7c     0C F0 07 F1 | 	add	ptra, #12
11a80     EC F2 B0 FD | 	call	#_usbnew_spin2_get_key
11a84     45 00 00 FF 
11a88     74 E4 05 F1 | 	add	objptr, ##35444
11a8c     F2 FA 61 FC | 	wrlong	result1, objptr
11a90                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
11a90     45 00 00 FF 
11a94     74 E4 85 F1 | 	sub	objptr, ##35444
11a98     00 FA 0D F2 | 	cmp	result1, #0 wz
11a9c     94 00 90 AD |  if_e	jmp	#LR__1501
11aa0     45 00 00 FF 
11aa4     74 E4 05 F1 | 	add	objptr, ##35444
11aa8     F2 1C 02 FB | 	rdlong	arg06, objptr
11aac     45 00 00 FF 
11ab0     74 E4 85 F1 | 	sub	objptr, ##35444
11ab4     00 00 40 FF 
11ab8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11abc     45 00 00 CF 
11ac0     74 E4 05 C1 |  if_b	add	objptr, ##35444
11ac4     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11ac8     45 00 00 CF 
11acc     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11ad0     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11ad4     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11ad8     58 00 90 3D |  if_ae	jmp	#LR__1501
11adc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
11adc     50 00 00 FF 
11ae0     14 E5 05 F1 | 	add	objptr, ##41236
11ae4     F2 1C 02 FB | 	rdlong	arg06, objptr
11ae8     50 00 00 FF 
11aec     14 E5 85 F1 | 	sub	objptr, ##41236
11af0     01 1C 0E F2 | 	cmp	arg06, #1 wz
11af4     3C 00 90 5D |  if_ne	jmp	#LR__1500
11af8     51 00 00 FF 
11afc     B8 E5 05 F1 | 	add	objptr, ##41912
11b00     F2 14 02 FB | 	rdlong	arg02, objptr
11b04     04 E4 85 F1 | 	sub	objptr, #4
11b08     F2 1A 02 FB | 	rdlong	arg05, objptr
11b0c     07 12 06 F6 | 	mov	arg01, #7
11b10     56 00 00 FF 
11b14     44 16 06 F6 | 	mov	arg03, ##44100
11b18     0C 18 C6 F9 | 	decod	arg04, #12
11b1c     01 1C 66 F6 | 	neg	arg06, #1
11b20     46 00 00 FF 
11b24     E8 E4 85 F1 | 	sub	objptr, ##36072
11b28     E8 F5 B0 FD | 	call	#_audio096_spin2_play
11b2c     0B 00 00 FF 
11b30     CC E4 85 F1 | 	sub	objptr, ##5836
11b34                 | LR__1500
11b34                 | LR__1501
11b34                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
11b34     45 00 00 FF 
11b38     74 E4 05 F1 | 	add	objptr, ##35444
11b3c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
11b40     45 00 00 FF 
11b44     74 E4 85 F1 | 	sub	objptr, ##35444
11b48     D4 01 90 AD |  if_e	jmp	#LR__1510
11b4c     45 00 00 FF 
11b50     74 E4 05 F1 | 	add	objptr, ##35444
11b54     F2 1C 02 FB | 	rdlong	arg06, objptr
11b58     45 00 00 FF 
11b5c     74 E4 85 F1 | 	sub	objptr, ##35444
11b60     00 00 40 FF 
11b64     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11b68     45 00 00 CF 
11b6c     74 E4 05 C1 |  if_b	add	objptr, ##35444
11b70     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11b74     45 00 00 CF 
11b78     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11b7c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11b80     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11b84     98 01 90 3D |  if_ae	jmp	#LR__1510
11b88                 | '   if leds and 2 = 2 then 
11b88     51 00 00 FF 
11b8c     EC E5 05 F1 | 	add	objptr, ##41964
11b90     F2 1E 0A FB | 	rdlong	local01, objptr wz
11b94     51 00 00 FF 
11b98     EC E5 85 F1 | 	sub	objptr, ##41964
11b9c     58 01 90 AD |  if_e	jmp	#LR__1509
11ba0                 | '     if key>96 andalso key<123 then
11ba0     45 00 00 FF 
11ba4     74 E4 05 F1 | 	add	objptr, ##35444
11ba8     F2 1E 02 FB | 	rdlong	local01, objptr
11bac     45 00 00 FF 
11bb0     74 E4 85 F1 | 	sub	objptr, ##35444
11bb4     61 1E 16 F2 | 	cmp	local01, #97 wc
11bb8     3C 00 90 CD |  if_b	jmp	#LR__1502
11bbc     45 00 00 FF 
11bc0     74 E4 05 F1 | 	add	objptr, ##35444
11bc4     F2 1E 02 FB | 	rdlong	local01, objptr
11bc8     45 00 00 FF 
11bcc     74 E4 85 F1 | 	sub	objptr, ##35444
11bd0     7B 1E 16 F2 | 	cmp	local01, #123 wc
11bd4     20 00 90 3D |  if_ae	jmp	#LR__1502
11bd8     45 00 00 FF 
11bdc     74 E4 05 F1 | 	add	objptr, ##35444
11be0     F2 1E 02 FB | 	rdlong	local01, objptr
11be4     20 1E 86 F1 | 	sub	local01, #32
11be8     F2 1E 62 FC | 	wrlong	local01, objptr
11bec     45 00 00 FF 
11bf0     74 E4 85 F1 | 	sub	objptr, ##35444
11bf4     00 01 90 FD | 	jmp	#LR__1508
11bf8                 | LR__1502
11bf8     45 00 00 FF 
11bfc     74 E4 05 F1 | 	add	objptr, ##35444
11c00     F2 1E 02 FB | 	rdlong	local01, objptr
11c04     45 00 00 FF 
11c08     74 E4 85 F1 | 	sub	objptr, ##35444
11c0c     41 1E 16 F2 | 	cmp	local01, #65 wc
11c10     3C 00 90 CD |  if_b	jmp	#LR__1503
11c14     45 00 00 FF 
11c18     74 E4 05 F1 | 	add	objptr, ##35444
11c1c     F2 1E 02 FB | 	rdlong	local01, objptr
11c20     45 00 00 FF 
11c24     74 E4 85 F1 | 	sub	objptr, ##35444
11c28     5B 1E 16 F2 | 	cmp	local01, #91 wc
11c2c     20 00 90 3D |  if_ae	jmp	#LR__1503
11c30     45 00 00 FF 
11c34     74 E4 05 F1 | 	add	objptr, ##35444
11c38     F2 1E 02 FB | 	rdlong	local01, objptr
11c3c     20 1E 06 F1 | 	add	local01, #32
11c40     F2 1E 62 FC | 	wrlong	local01, objptr
11c44     45 00 00 FF 
11c48     74 E4 85 F1 | 	sub	objptr, ##35444
11c4c     A8 00 90 FD | 	jmp	#LR__1507
11c50                 | LR__1503
11c50     45 00 00 FF 
11c54     74 E4 05 F1 | 	add	objptr, ##35444
11c58     F2 1E 02 FB | 	rdlong	local01, objptr
11c5c     45 00 00 FF 
11c60     74 E4 85 F1 | 	sub	objptr, ##35444
11c64     17 1E 16 F2 | 	cmp	local01, #23 wc
11c68     3C 00 90 CD |  if_b	jmp	#LR__1504
11c6c     45 00 00 FF 
11c70     74 E4 05 F1 | 	add	objptr, ##35444
11c74     F2 1E 02 FB | 	rdlong	local01, objptr
11c78     45 00 00 FF 
11c7c     74 E4 85 F1 | 	sub	objptr, ##35444
11c80     20 1E 16 F2 | 	cmp	local01, #32 wc
11c84     20 00 90 3D |  if_ae	jmp	#LR__1504
11c88     45 00 00 FF 
11c8c     74 E4 05 F1 | 	add	objptr, ##35444
11c90     F2 1E 02 FB | 	rdlong	local01, objptr
11c94     09 1E 86 F1 | 	sub	local01, #9
11c98     F2 1E 62 FC | 	wrlong	local01, objptr
11c9c     45 00 00 FF 
11ca0     74 E4 85 F1 | 	sub	objptr, ##35444
11ca4     50 00 90 FD | 	jmp	#LR__1506
11ca8                 | LR__1504
11ca8     45 00 00 FF 
11cac     74 E4 05 F1 | 	add	objptr, ##35444
11cb0     F2 20 02 FB | 	rdlong	local02, objptr
11cb4     45 00 00 FF 
11cb8     74 E4 85 F1 | 	sub	objptr, ##35444
11cbc     0E 20 16 F2 | 	cmp	local02, #14 wc
11cc0     34 00 90 CD |  if_b	jmp	#LR__1505
11cc4     45 00 00 FF 
11cc8     74 E4 05 F1 | 	add	objptr, ##35444
11ccc     F2 1E 02 FB | 	rdlong	local01, objptr
11cd0     45 00 00 FF 
11cd4     74 E4 85 F1 | 	sub	objptr, ##35444
11cd8     17 1E 16 F2 | 	cmp	local01, #23 wc
11cdc     51 00 00 CF 
11ce0     F0 E5 05 C1 |  if_b	add	objptr, ##41968
11ce4     F2 20 02 CB |  if_b	rdlong	local02, objptr
11ce8     27 20 06 C1 |  if_b	add	local02, #39
11cec     F2 20 62 CC |  if_b	wrlong	local02, objptr
11cf0     51 00 00 CF 
11cf4     F0 E5 85 C1 |  if_b	sub	objptr, ##41968
11cf8                 | LR__1505
11cf8                 | LR__1506
11cf8                 | LR__1507
11cf8                 | LR__1508
11cf8                 | LR__1509
11cf8     45 00 00 FF 
11cfc     74 E4 05 F1 | 	add	objptr, ##35444
11d00     F2 12 02 FB | 	rdlong	arg01, objptr
11d04     45 00 00 FF 
11d08     74 E4 85 F1 | 	sub	objptr, ##35444
11d0c     20 C6 B0 FD | 	call	#_scantochar
11d10     FD 12 02 F6 | 	mov	arg01, result1
11d14     AC 1A B1 FD | 	call	#__system__Chr_S
11d18     A7 FA 61 FC | 	wrlong	result1, fp
11d1c     0C 00 90 FD | 	jmp	#LR__1511
11d20                 | LR__1510
11d20     8C 01 00 FF 
11d24     8F 21 06 F6 | 	mov	local02, ##@LR__5564
11d28     A7 20 62 FC | 	wrlong	local02, fp
11d2c                 | LR__1511
11d2c     08 4E 05 F1 | 	add	fp, #8
11d30     A7 3E 68 FC | 	wrlong	#31, fp
11d34     08 4E 85 F1 | 	sub	fp, #8
11d38     A7 12 02 F6 | 	mov	arg01, fp
11d3c     30 9B BF FD | 	call	#_push
11d40     A7 F0 03 F6 | 	mov	ptra, fp
11d44     B2 00 A0 FD | 	call	#popregs_
11d48                 | _do_inkey_ret
11d48     2D 00 64 FD | 	ret
11d4c                 | 
11d4c                 | ' 
11d4c                 | ' ' ----------------  ink
11d4c                 | ' 
11d4c                 | ' sub do_ink
11d4c                 | _do_ink
11d4c     00 4A 05 F6 | 	mov	COUNT_, #0
11d50     A8 00 A0 FD | 	call	#pushregs_
11d54     0C F0 07 F1 | 	add	ptra, #12
11d58     7C 9A BF FD | 	call	#_pop
11d5c     FF 14 02 F6 | 	mov	arg02, result3
11d60     A7 FA 61 FC | 	wrlong	result1, fp
11d64     04 4E 05 F1 | 	add	fp, #4
11d68     A7 FC 61 FC | 	wrlong	result2, fp
11d6c     04 4E 05 F1 | 	add	fp, #4
11d70     A7 14 62 FC | 	wrlong	arg02, fp
11d74     08 4E 85 F1 | 	sub	fp, #8
11d78     A7 12 02 F6 | 	mov	arg01, fp
11d7c     3C 9C BF FD | 	call	#_converttoint
11d80     37 00 00 FF 
11d84     3C E4 05 F1 | 	add	objptr, ##28220
11d88     F2 FA 61 FC | 	wrlong	result1, objptr
11d8c     04 E4 85 F1 | 	sub	objptr, #4
11d90     F2 14 02 FB | 	rdlong	arg02, objptr
11d94                 | ' 
11d94                 | ' write_color:=ff
11d94     36 00 00 FF 
11d98     F7 E5 85 F1 | 	sub	objptr, ##28151
11d9c     F2 FA 61 FC | 	wrlong	result1, objptr
11da0                 | ' write_background:=bb
11da0     04 E4 05 F1 | 	add	objptr, #4
11da4     F2 14 62 FC | 	wrlong	arg02, objptr
11da8     36 00 00 FF 
11dac     F7 E5 05 F1 | 	add	objptr, ##28151
11db0     F2 12 02 FB | 	rdlong	arg01, objptr
11db4     37 00 00 FF 
11db8     3C E4 85 F1 | 	sub	objptr, ##28220
11dbc     54 CD B0 FD | 	call	#_hg010b_spin2_setcursorcolor
11dc0     A7 F0 03 F6 | 	mov	ptra, fp
11dc4     B2 00 A0 FD | 	call	#popregs_
11dc8                 | _do_ink_ret
11dc8     2D 00 64 FD | 	ret
11dcc                 | 
11dcc                 | ' 
11dcc                 | ' ' ----------------  int
11dcc                 | ' 
11dcc                 | ' sub do_int
11dcc                 | _do_int
11dcc     02 4A 05 F6 | 	mov	COUNT_, #2
11dd0     A8 00 A0 FD | 	call	#pushregs_
11dd4     10 F0 07 F1 | 	add	ptra, #16
11dd8     FC 99 BF FD | 	call	#_pop
11ddc     FE 1E 02 F6 | 	mov	local01, result2
11de0     FF 20 02 F6 | 	mov	local02, result3
11de4     A7 FA 61 FC | 	wrlong	result1, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 1E 62 FC | 	wrlong	local01, fp
11df0     04 4E 05 F1 | 	add	fp, #4
11df4     A7 20 62 FC | 	wrlong	local02, fp
11df8                 | ' 
11df8                 | ' t1=pop()
11df8                 | ' select case t1.result_type
11df8     08 4E 85 F1 | 	sub	fp, #8
11dfc     1E 20 0E F2 | 	cmp	local02, #30 wz
11e00     14 00 90 AD |  if_e	jmp	#LR__1520
11e04     1F 20 0E F2 | 	cmp	local02, #31 wz
11e08     20 00 90 AD |  if_e	jmp	#LR__1521
11e0c     2B 20 0E F2 | 	cmp	local02, #43 wz
11e10     34 00 90 AD |  if_e	jmp	#LR__1522
11e14     50 00 90 FD | 	jmp	#LR__1523
11e18                 | LR__1520
11e18     A7 12 02 FB | 	rdlong	arg01, fp
11e1c     00 14 06 F6 | 	mov	arg02, #0
11e20     E4 29 B1 FD | 	call	#__system___float_tointeger
11e24     A7 FA 61 FC | 	wrlong	result1, fp
11e28     3C 00 90 FD | 	jmp	#LR__1523
11e2c                 | LR__1521
11e2c     A7 12 02 FB | 	rdlong	arg01, fp
11e30     18 2D B1 FD | 	call	#__system____builtin_atof
11e34     FD 12 02 F6 | 	mov	arg01, result1
11e38     00 14 06 F6 | 	mov	arg02, #0
11e3c     C8 29 B1 FD | 	call	#__system___float_tointeger
11e40     A7 FA 61 FC | 	wrlong	result1, fp
11e44     20 00 90 FD | 	jmp	#LR__1523
11e48                 | LR__1522
11e48     A7 12 02 FB | 	rdlong	arg01, fp
11e4c     00 9B BF FD | 	call	#_convertstring
11e50     FD 12 02 F6 | 	mov	arg01, result1
11e54     F4 2C B1 FD | 	call	#__system____builtin_atof
11e58     FD 12 02 F6 | 	mov	arg01, result1
11e5c     00 14 06 F6 | 	mov	arg02, #0
11e60     A4 29 B1 FD | 	call	#__system___float_tointeger
11e64     A7 FA 61 FC | 	wrlong	result1, fp
11e68                 | LR__1523
11e68     08 4E 05 F1 | 	add	fp, #8
11e6c     A7 38 68 FC | 	wrlong	#28, fp
11e70     08 4E 85 F1 | 	sub	fp, #8
11e74     A7 12 02 F6 | 	mov	arg01, fp
11e78     F4 99 BF FD | 	call	#_push
11e7c     A7 F0 03 F6 | 	mov	ptra, fp
11e80     B2 00 A0 FD | 	call	#popregs_
11e84                 | _do_int_ret
11e84     2D 00 64 FD | 	ret
11e88                 | 
11e88                 | ' 
11e88                 | ' ' ----------------  left$
11e88                 | ' 
11e88                 | ' sub do_left
11e88                 | _do_left
11e88     00 4A 05 F6 | 	mov	COUNT_, #0
11e8c     A8 00 A0 FD | 	call	#pushregs_
11e90     14 F0 07 F1 | 	add	ptra, #20
11e94     4A 00 00 FF 
11e98     80 E4 05 F1 | 	add	objptr, ##38016
11e9c     F2 16 02 FB | 	rdlong	arg03, objptr
11ea0     0B 15 02 F6 | 	mov	arg02, arg03
11ea4     01 14 66 F0 | 	shl	arg02, #1
11ea8     0B 15 02 F1 | 	add	arg02, arg03
11eac     02 14 66 F0 | 	shl	arg02, #2
11eb0     03 00 00 FF 
11eb4     04 E4 85 F1 | 	sub	objptr, ##1540
11eb8     F2 14 02 F1 | 	add	arg02, objptr
11ebc     0A 17 02 FB | 	rdlong	arg03, arg02
11ec0     0C 4E 05 F1 | 	add	fp, #12
11ec4     A7 16 62 FC | 	wrlong	arg03, fp
11ec8                 | ' 
11ec8                 | ' numpar=compiledline(lineptr_e).result.uresult
11ec8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
11ec8     0C 4E 85 F1 | 	sub	fp, #12
11ecc     02 16 0E F2 | 	cmp	arg03, #2 wz
11ed0     47 00 00 FF 
11ed4     7C E4 85 F1 | 	sub	objptr, ##36476
11ed8     40 00 90 AD |  if_e	jmp	#LR__1530
11edc     00 12 06 F6 | 	mov	arg01, #0
11ee0     CC 53 B1 FD | 	call	#__system___getiolock_0568
11ee4     FD 12 02 F6 | 	mov	arg01, result1
11ee8     98 F6 B0 FD | 	call	#__system___lockmem
11eec     8C 01 00 FF 
11ef0     90 15 06 F6 | 	mov	arg02, ##@LR__5565
11ef4     00 12 06 F6 | 	mov	arg01, #0
11ef8     00 16 06 F6 | 	mov	arg03, #0
11efc     78 03 B1 FD | 	call	#__system___basic_print_string
11f00     00 12 06 F6 | 	mov	arg01, #0
11f04     A8 53 B1 FD | 	call	#__system___getiolock_0568
11f08     FD 00 68 FC | 	wrlong	#0, result1
11f0c     27 12 06 F6 | 	mov	arg01, #39
11f10     00 14 06 F6 | 	mov	arg02, #0
11f14     AC C0 B0 FD | 	call	#_printerror
11f18     EC 00 90 FD | 	jmp	#LR__1533
11f1c                 | LR__1530
11f1c     B8 98 BF FD | 	call	#_pop
11f20     FF 16 02 F6 | 	mov	arg03, result3
11f24     A7 FA 61 FC | 	wrlong	result1, fp
11f28     04 4E 05 F1 | 	add	fp, #4
11f2c     A7 FC 61 FC | 	wrlong	result2, fp
11f30     04 4E 05 F1 | 	add	fp, #4
11f34     A7 16 62 FC | 	wrlong	arg03, fp
11f38     08 4E 85 F1 | 	sub	fp, #8
11f3c     A7 12 02 F6 | 	mov	arg01, fp
11f40     78 9A BF FD | 	call	#_converttoint
11f44     FD 16 02 F6 | 	mov	arg03, result1
11f48     10 4E 05 F1 | 	add	fp, #16
11f4c     A7 16 62 FC | 	wrlong	arg03, fp
11f50     10 4E 85 F1 | 	sub	fp, #16
11f54     80 98 BF FD | 	call	#_pop
11f58     FF 16 02 F6 | 	mov	arg03, result3
11f5c     A7 FA 61 FC | 	wrlong	result1, fp
11f60     04 4E 05 F1 | 	add	fp, #4
11f64     A7 FC 61 FC | 	wrlong	result2, fp
11f68     04 4E 05 F1 | 	add	fp, #4
11f6c     A7 16 62 FC | 	wrlong	arg03, fp
11f70                 | ' t1=pop() : arg=converttoint(t1)
11f70                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11f70     08 4E 85 F1 | 	sub	fp, #8
11f74     2B 16 0E F2 | 	cmp	arg03, #43 wz
11f78     18 00 90 5D |  if_ne	jmp	#LR__1531
11f7c     A7 12 02 FB | 	rdlong	arg01, fp
11f80     CC 99 BF FD | 	call	#_convertstring
11f84     A7 FA 61 FC | 	wrlong	result1, fp
11f88     08 4E 05 F1 | 	add	fp, #8
11f8c     A7 3E 68 FC | 	wrlong	#31, fp
11f90     08 4E 85 F1 | 	sub	fp, #8
11f94                 | LR__1531
11f94                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
11f94     08 4E 05 F1 | 	add	fp, #8
11f98     A7 16 02 FB | 	rdlong	arg03, fp
11f9c     08 4E 85 F1 | 	sub	fp, #8
11fa0     1F 16 0E F2 | 	cmp	arg03, #31 wz
11fa4     40 00 90 AD |  if_e	jmp	#LR__1532
11fa8     00 12 06 F6 | 	mov	arg01, #0
11fac     00 53 B1 FD | 	call	#__system___getiolock_0568
11fb0     FD 12 02 F6 | 	mov	arg01, result1
11fb4     CC F5 B0 FD | 	call	#__system___lockmem
11fb8     8C 01 00 FF 
11fbc     98 15 06 F6 | 	mov	arg02, ##@LR__5566
11fc0     00 12 06 F6 | 	mov	arg01, #0
11fc4     00 16 06 F6 | 	mov	arg03, #0
11fc8     AC 02 B1 FD | 	call	#__system___basic_print_string
11fcc     00 12 06 F6 | 	mov	arg01, #0
11fd0     DC 52 B1 FD | 	call	#__system___getiolock_0568
11fd4     FD 00 68 FC | 	wrlong	#0, result1
11fd8     0F 12 06 F6 | 	mov	arg01, #15
11fdc     00 14 06 F6 | 	mov	arg02, #0
11fe0     E0 BF B0 FD | 	call	#_printerror
11fe4     20 00 90 FD | 	jmp	#LR__1533
11fe8                 | LR__1532
11fe8     A7 12 02 FB | 	rdlong	arg01, fp
11fec     10 4E 05 F1 | 	add	fp, #16
11ff0     A7 14 02 FB | 	rdlong	arg02, fp
11ff4     10 4E 85 F1 | 	sub	fp, #16
11ff8     04 16 B1 FD | 	call	#__system__Left_S
11ffc     A7 FA 61 FC | 	wrlong	result1, fp
12000     A7 12 02 F6 | 	mov	arg01, fp
12004     68 98 BF FD | 	call	#_push
12008                 | LR__1533
12008     A7 F0 03 F6 | 	mov	ptra, fp
1200c     B2 00 A0 FD | 	call	#popregs_
12010                 | _do_left_ret
12010     2D 00 64 FD | 	ret
12014                 | 
12014                 | ' 
12014                 | ' ' ----------------  len
12014                 | ' 
12014                 | ' sub do_len
12014                 | _do_len
12014     02 4A 05 F6 | 	mov	COUNT_, #2
12018     A8 00 A0 FD | 	call	#pushregs_
1201c     14 F0 07 F1 | 	add	ptra, #20
12020     4A 00 00 FF 
12024     80 E4 05 F1 | 	add	objptr, ##38016
12028     F2 1E 02 FB | 	rdlong	local01, objptr
1202c     0F 17 02 F6 | 	mov	arg03, local01
12030     01 16 66 F0 | 	shl	arg03, #1
12034     0F 17 02 F1 | 	add	arg03, local01
12038     02 16 66 F0 | 	shl	arg03, #2
1203c     03 00 00 FF 
12040     04 E4 85 F1 | 	sub	objptr, ##1540
12044     F2 16 02 F1 | 	add	arg03, objptr
12048     0B 17 02 FB | 	rdlong	arg03, arg03
1204c     0C 4E 05 F1 | 	add	fp, #12
12050     A7 16 62 FC | 	wrlong	arg03, fp
12054                 | ' 
12054                 | ' numpar=compiledline(lineptr_e).result.uresult
12054                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
12054     0C 4E 85 F1 | 	sub	fp, #12
12058     02 16 16 F2 | 	cmp	arg03, #2 wc
1205c     47 00 00 FF 
12060     7C E4 85 F1 | 	sub	objptr, ##36476
12064     0C 4E 05 C1 |  if_b	add	fp, #12
12068     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1206c     0C 4E 85 C1 |  if_b	sub	fp, #12
12070     40 00 90 4D |  if_c_and_nz	jmp	#LR__1540
12074     00 12 06 F6 | 	mov	arg01, #0
12078     34 52 B1 FD | 	call	#__system___getiolock_0568
1207c     FD 12 02 F6 | 	mov	arg01, result1
12080     00 F5 B0 FD | 	call	#__system___lockmem
12084     8C 01 00 FF 
12088     A0 15 06 F6 | 	mov	arg02, ##@LR__5567
1208c     00 12 06 F6 | 	mov	arg01, #0
12090     00 16 06 F6 | 	mov	arg03, #0
12094     E0 01 B1 FD | 	call	#__system___basic_print_string
12098     00 12 06 F6 | 	mov	arg01, #0
1209c     10 52 B1 FD | 	call	#__system___getiolock_0568
120a0     FD 00 68 FC | 	wrlong	#0, result1
120a4     27 12 06 F6 | 	mov	arg01, #39
120a8     00 14 06 F6 | 	mov	arg02, #0
120ac     14 BF B0 FD | 	call	#_printerror
120b0     C8 00 90 FD | 	jmp	#LR__1545
120b4                 | LR__1540
120b4     20 97 BF FD | 	call	#_pop
120b8     FF 16 02 F6 | 	mov	arg03, result3
120bc     A7 FA 61 FC | 	wrlong	result1, fp
120c0     04 4E 05 F1 | 	add	fp, #4
120c4     A7 FC 61 FC | 	wrlong	result2, fp
120c8     04 4E 05 F1 | 	add	fp, #4
120cc     A7 16 62 FC | 	wrlong	arg03, fp
120d0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
120d0     08 4E 85 F1 | 	sub	fp, #8
120d4     2B 16 0E F2 | 	cmp	arg03, #43 wz
120d8     18 00 90 5D |  if_ne	jmp	#LR__1541
120dc     A7 12 02 FB | 	rdlong	arg01, fp
120e0     6C 98 BF FD | 	call	#_convertstring
120e4     A7 FA 61 FC | 	wrlong	result1, fp
120e8     08 4E 05 F1 | 	add	fp, #8
120ec     A7 3E 68 FC | 	wrlong	#31, fp
120f0     08 4E 85 F1 | 	sub	fp, #8
120f4                 | LR__1541
120f4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
120f4     08 4E 05 F1 | 	add	fp, #8
120f8     A7 16 02 FB | 	rdlong	arg03, fp
120fc     08 4E 85 F1 | 	sub	fp, #8
12100     1F 16 0E F2 | 	cmp	arg03, #31 wz
12104     40 00 90 AD |  if_e	jmp	#LR__1542
12108     00 12 06 F6 | 	mov	arg01, #0
1210c     A0 51 B1 FD | 	call	#__system___getiolock_0568
12110     FD 12 02 F6 | 	mov	arg01, result1
12114     6C F4 B0 FD | 	call	#__system___lockmem
12118     8C 01 00 FF 
1211c     A6 15 06 F6 | 	mov	arg02, ##@LR__5568
12120     00 12 06 F6 | 	mov	arg01, #0
12124     00 16 06 F6 | 	mov	arg03, #0
12128     4C 01 B1 FD | 	call	#__system___basic_print_string
1212c     00 12 06 F6 | 	mov	arg01, #0
12130     7C 51 B1 FD | 	call	#__system___getiolock_0568
12134     FD 00 68 FC | 	wrlong	#0, result1
12138     0F 12 06 F6 | 	mov	arg01, #15
1213c     00 14 06 F6 | 	mov	arg02, #0
12140     80 BE B0 FD | 	call	#_printerror
12144     34 00 90 FD | 	jmp	#LR__1545
12148                 | LR__1542
12148     A7 12 02 FB | 	rdlong	arg01, fp
1214c     09 21 02 F6 | 	mov	local02, arg01
12150     97 06 48 FB | 	callpa	#(@LR__1544-@LR__1543)>>2,fcache_load_ptr_
12154                 | LR__1543
12154     10 FB C9 FA | 	rdbyte	result1, local02 wz
12158     01 20 06 51 |  if_ne	add	local02, #1
1215c     F4 FF 9F 5D |  if_ne	jmp	#LR__1543
12160                 | LR__1544
12160     09 21 82 F1 | 	sub	local02, arg01
12164     A7 20 62 FC | 	wrlong	local02, fp
12168     08 4E 05 F1 | 	add	fp, #8
1216c     A7 38 68 FC | 	wrlong	#28, fp
12170     08 4E 85 F1 | 	sub	fp, #8
12174     A7 12 02 F6 | 	mov	arg01, fp
12178     F4 96 BF FD | 	call	#_push
1217c                 | LR__1545
1217c     A7 F0 03 F6 | 	mov	ptra, fp
12180     B2 00 A0 FD | 	call	#popregs_
12184                 | _do_len_ret
12184     2D 00 64 FD | 	ret
12188                 | 
12188                 | ' 
12188                 | ' ' ----------------  list
12188                 | ' 
12188                 | ' sub do_list
12188                 | _do_list
12188     02 4A 05 F6 | 	mov	COUNT_, #2
1218c     A8 00 A0 FD | 	call	#pushregs_
12190     B8 F0 07 F1 | 	add	ptra, #184
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 00 68 FC | 	wrlong	#0, fp
1219c     04 4E 05 F1 | 	add	fp, #4
121a0     FF FF BF FF 
121a4     A7 FE 6B FC | 	wrlong	##2147483647, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     4A 00 00 FF 
121b0     80 E4 05 F1 | 	add	objptr, ##38016
121b4     F2 1E 02 FB | 	rdlong	local01, objptr
121b8     0F 17 02 F6 | 	mov	arg03, local01
121bc     01 16 66 F0 | 	shl	arg03, #1
121c0     0F 17 02 F1 | 	add	arg03, local01
121c4     02 16 66 F0 | 	shl	arg03, #2
121c8     03 00 00 FF 
121cc     04 E4 85 F1 | 	sub	objptr, ##1540
121d0     F2 16 02 F1 | 	add	arg03, objptr
121d4     0B 17 02 FB | 	rdlong	arg03, arg03
121d8     A7 16 62 FC | 	wrlong	arg03, fp
121dc                 | ' 
121dc                 | ' startline=0 : endline=$7FFFFFFF
121dc                 | ' numpar=compiledline(lineptr_e).result.uresult
121dc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
121dc     01 16 0E F2 | 	cmp	arg03, #1 wz
121e0     47 00 00 FF 
121e4     7C E4 85 F1 | 	sub	objptr, ##36476
121e8     3C 00 90 5D |  if_ne	jmp	#LR__1550
121ec     E8 95 BF FD | 	call	#_pop
121f0     FF 1E 02 F6 | 	mov	local01, result3
121f4     0C 4E 05 F1 | 	add	fp, #12
121f8     A7 FA 61 FC | 	wrlong	result1, fp
121fc     04 4E 05 F1 | 	add	fp, #4
12200     A7 FC 61 FC | 	wrlong	result2, fp
12204     04 4E 05 F1 | 	add	fp, #4
12208     A7 1E 62 FC | 	wrlong	local01, fp
1220c     08 4E 85 F1 | 	sub	fp, #8
12210     A7 12 02 F6 | 	mov	arg01, fp
12214     0C 4E 85 F1 | 	sub	fp, #12
12218     A0 97 BF FD | 	call	#_converttoint
1221c     04 4E 05 F1 | 	add	fp, #4
12220     A7 FA 61 FC | 	wrlong	result1, fp
12224     04 4E 85 F1 | 	sub	fp, #4
12228                 | LR__1550
12228                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
12228     A7 16 02 FB | 	rdlong	arg03, fp
1222c     02 16 0E F2 | 	cmp	arg03, #2 wz
12230     7C 00 90 5D |  if_ne	jmp	#LR__1551
12234     A0 95 BF FD | 	call	#_pop
12238     FF 1E 02 F6 | 	mov	local01, result3
1223c     0C 4E 05 F1 | 	add	fp, #12
12240     A7 FA 61 FC | 	wrlong	result1, fp
12244     04 4E 05 F1 | 	add	fp, #4
12248     A7 FC 61 FC | 	wrlong	result2, fp
1224c     04 4E 05 F1 | 	add	fp, #4
12250     A7 1E 62 FC | 	wrlong	local01, fp
12254     08 4E 85 F1 | 	sub	fp, #8
12258     A7 12 02 F6 | 	mov	arg01, fp
1225c     0C 4E 85 F1 | 	sub	fp, #12
12260     58 97 BF FD | 	call	#_converttoint
12264     FD 1E 02 F6 | 	mov	local01, result1
12268     08 4E 05 F1 | 	add	fp, #8
1226c     A7 1E 62 FC | 	wrlong	local01, fp
12270     08 4E 85 F1 | 	sub	fp, #8
12274     60 95 BF FD | 	call	#_pop
12278     FF 1E 02 F6 | 	mov	local01, result3
1227c     0C 4E 05 F1 | 	add	fp, #12
12280     A7 FA 61 FC | 	wrlong	result1, fp
12284     04 4E 05 F1 | 	add	fp, #4
12288     A7 FC 61 FC | 	wrlong	result2, fp
1228c     04 4E 05 F1 | 	add	fp, #4
12290     A7 1E 62 FC | 	wrlong	local01, fp
12294     08 4E 85 F1 | 	sub	fp, #8
12298     A7 12 02 F6 | 	mov	arg01, fp
1229c     0C 4E 85 F1 | 	sub	fp, #12
122a0     18 97 BF FD | 	call	#_converttoint
122a4     04 4E 05 F1 | 	add	fp, #4
122a8     A7 FA 61 FC | 	wrlong	result1, fp
122ac     04 4E 85 F1 | 	sub	fp, #4
122b0                 | LR__1551
122b0                 | ' 
122b0                 | ' 
122b0                 | ' print
122b0     00 12 06 F6 | 	mov	arg01, #0
122b4     F8 4F B1 FD | 	call	#__system___getiolock_0568
122b8     FD 12 02 F6 | 	mov	arg01, result1
122bc     C4 F2 B0 FD | 	call	#__system___lockmem
122c0     00 12 06 F6 | 	mov	arg01, #0
122c4     0A 14 06 F6 | 	mov	arg02, #10
122c8     00 16 06 F6 | 	mov	arg03, #0
122cc     50 FF B0 FD | 	call	#__system___basic_print_char
122d0     00 12 06 F6 | 	mov	arg01, #0
122d4     D8 4F B1 FD | 	call	#__system___getiolock_0568
122d8     FD 00 68 FC | 	wrlong	#0, result1
122dc     4A 00 00 FF 
122e0     88 E4 05 F1 | 	add	objptr, ##38024
122e4     F2 20 02 FB | 	rdlong	local02, objptr
122e8     07 00 00 FF 
122ec     A0 E5 05 F1 | 	add	objptr, ##4000
122f0     F2 20 62 FC | 	wrlong	local02, objptr
122f4     52 00 00 FF 
122f8     28 E4 85 F1 | 	sub	objptr, ##42024
122fc                 | ' do 
122fc                 | LR__1552
122fc     20 4E 05 F1 | 	add	fp, #32
12300     A7 12 02 F6 | 	mov	arg01, fp
12304     20 4E 85 F1 | 	sub	fp, #32
12308     52 00 00 FF 
1230c     28 E4 05 F1 | 	add	objptr, ##42024
12310     F2 14 02 FB | 	rdlong	arg02, objptr
12314     18 16 06 F6 | 	mov	arg03, #24
12318     46 00 00 FF 
1231c     5C E5 85 F1 | 	sub	objptr, ##36188
12320     20 E6 B0 FD | 	call	#_psram_spin2_read1
12324     0B 00 00 FF 
12328     CC E4 85 F1 | 	sub	objptr, ##5836
1232c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
1232c                 | '   
1232c                 | '   if header(0)<> $FFFFFFFF then
1232c     20 4E 05 F1 | 	add	fp, #32
12330     A7 20 02 FB | 	rdlong	local02, fp
12334     20 4E 85 F1 | 	sub	fp, #32
12338     FF FF 7F FF 
1233c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
12340     A8 00 90 AD |  if_e	jmp	#LR__1554
12344     38 4E 05 F1 | 	add	fp, #56
12348     3F 16 06 F6 | 	mov	arg03, #63
1234c     28 16 62 FD | 	setq	arg03
12350     A7 00 68 FC | 	wrlong	#0, fp
12354     A7 12 02 F6 | 	mov	arg01, fp
12358     10 4E 85 F1 | 	sub	fp, #16
1235c     A7 14 02 FB | 	rdlong	arg02, fp
12360     04 4E 05 F1 | 	add	fp, #4
12364     A7 16 02 FB | 	rdlong	arg03, fp
12368     2C 4E 85 F1 | 	sub	fp, #44
1236c     0B 00 00 FF 
12370     CC E4 05 F1 | 	add	objptr, ##5836
12374     CC E5 B0 FD | 	call	#_psram_spin2_read1
12378     0B 00 00 FF 
1237c     CC E4 85 F1 | 	sub	objptr, ##5836
12380                 | '     longfill(linebuf,0,64)
12380                 | '     psram.read1(varptr(linebuf),header(2),header(3))
12380                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
12380     20 4E 05 F1 | 	add	fp, #32
12384     A7 20 02 FB | 	rdlong	local02, fp
12388     1C 4E 85 F1 | 	sub	fp, #28
1238c     A7 1E 02 FB | 	rdlong	local01, fp
12390     04 4E 85 F1 | 	sub	fp, #4
12394     0F 21 52 F2 | 	cmps	local02, local01 wc
12398     30 00 90 CD |  if_b	jmp	#LR__1553
1239c     20 4E 05 F1 | 	add	fp, #32
123a0     A7 20 02 FB | 	rdlong	local02, fp
123a4     18 4E 85 F1 | 	sub	fp, #24
123a8     A7 16 02 FB | 	rdlong	arg03, fp
123ac     08 4E 85 F1 | 	sub	fp, #8
123b0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
123b4     14 00 90 1D |  if_a	jmp	#LR__1553
123b8     38 4E 05 F1 | 	add	fp, #56
123bc     A7 12 02 F6 | 	mov	arg01, fp
123c0     38 4E 85 F1 | 	sub	fp, #56
123c4                 | ' 
123c4                 | ' write(text)
123c4     A0 DC B0 FD | 	call	#_hg010b_spin2_write
123c8                 | ' crlf
123c8     9C E1 B0 FD | 	call	#_hg010b_spin2_crlf
123cc                 | LR__1553
123cc     34 4E 05 F1 | 	add	fp, #52
123d0     A7 20 02 FB | 	rdlong	local02, fp
123d4     34 4E 85 F1 | 	sub	fp, #52
123d8     52 00 00 FF 
123dc     28 E4 05 F1 | 	add	objptr, ##42024
123e0     F2 20 62 FC | 	wrlong	local02, objptr
123e4     52 00 00 FF 
123e8     28 E4 85 F1 | 	sub	objptr, ##42024
123ec                 | LR__1554
123ec     34 4E 05 F1 | 	add	fp, #52
123f0     A7 20 02 FB | 	rdlong	local02, fp
123f4     34 4E 85 F1 | 	sub	fp, #52
123f8     FF FF 3F FF 
123fc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
12400     20 4E 05 51 |  if_ne	add	fp, #32
12404     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12408     20 4E 85 51 |  if_ne	sub	fp, #32
1240c     FF FF 7F 5F 
12410     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
12414     E4 FE 9F 5D |  if_ne	jmp	#LR__1552
12418     A7 F0 03 F6 | 	mov	ptra, fp
1241c     B2 00 A0 FD | 	call	#popregs_
12420                 | _do_list_ret
12420     2D 00 64 FD | 	ret
12424                 | 
12424                 | ' 
12424                 | ' '-------------------- load
12424                 | ' 
12424                 | ' sub do_load(amode=0 as integer)  
12424                 | _do_load
12424     01 4A 05 F6 | 	mov	COUNT_, #1
12428     A8 00 A0 FD | 	call	#pushregs_
1242c     AC F0 07 F1 | 	add	ptra, #172
12430     A7 12 62 FC | 	wrlong	arg01, fp
12434     51 00 00 FF 
12438     E8 E5 05 F1 | 	add	objptr, ##41960
1243c     F2 02 68 FC | 	wrlong	#1, objptr
12440     07 00 00 FF 
12444     68 E5 85 F1 | 	sub	objptr, ##3944
12448     F2 14 02 FB | 	rdlong	arg02, objptr
1244c     0A 13 02 F6 | 	mov	arg01, arg02
12450     01 12 66 F0 | 	shl	arg01, #1
12454     0A 13 02 F1 | 	add	arg01, arg02
12458     02 12 66 F0 | 	shl	arg01, #2
1245c     03 00 00 FF 
12460     04 E4 85 F1 | 	sub	objptr, ##1540
12464     F2 12 02 F1 | 	add	arg01, objptr
12468     09 15 02 FB | 	rdlong	arg02, arg01
1246c     1C 4E 05 F1 | 	add	fp, #28
12470     A7 14 62 FC | 	wrlong	arg02, fp
12474     8C 4E 05 F1 | 	add	fp, #140
12478     A7 12 02 F6 | 	mov	arg01, fp
1247c     47 00 00 FF 
12480     7C E4 85 F1 | 	sub	objptr, ##36476
12484     80 4E 85 F1 | 	sub	fp, #128
12488     09 4F 61 FC | 	wrlong	fp, arg01
1248c                 | ' 
1248c                 | ' inload=1
1248c                 | ' numpar=compiledline(lineptr_e).result.uresult
1248c                 | ' lpoke varptr(line2$),varptr(line2)
1248c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1248c     0C 4E 85 F1 | 	sub	fp, #12
12490     A7 1E 02 FB | 	rdlong	local01, fp
12494     1C 4E 85 F1 | 	sub	fp, #28
12498     01 1E 56 F2 | 	cmps	local01, #1 wc
1249c     24 00 90 CD |  if_b	jmp	#LR__1560
124a0     34 93 BF FD | 	call	#_pop
124a4     04 4E 05 F1 | 	add	fp, #4
124a8     A7 FA 61 FC | 	wrlong	result1, fp
124ac     04 4E 05 F1 | 	add	fp, #4
124b0     A7 FC 61 FC | 	wrlong	result2, fp
124b4     04 4E 05 F1 | 	add	fp, #4
124b8     A7 FE 61 FC | 	wrlong	result3, fp
124bc     0C 4E 85 F1 | 	sub	fp, #12
124c0     28 00 90 FD | 	jmp	#LR__1561
124c4                 | LR__1560
124c4     51 00 00 FF 
124c8     D8 E5 05 F1 | 	add	objptr, ##41944
124cc     F2 1E 02 FB | 	rdlong	local01, objptr
124d0     51 00 00 FF 
124d4     D8 E5 85 F1 | 	sub	objptr, ##41944
124d8     04 4E 05 F1 | 	add	fp, #4
124dc     A7 1E 62 FC | 	wrlong	local01, fp
124e0     08 4E 05 F1 | 	add	fp, #8
124e4     A7 3E 68 FC | 	wrlong	#31, fp
124e8     0C 4E 85 F1 | 	sub	fp, #12
124ec                 | LR__1561
124ec                 | ' 'print "popped "; t1.result.uresult, t1.result_type
124ec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
124ec     0C 4E 05 F1 | 	add	fp, #12
124f0     A7 1E 02 FB | 	rdlong	local01, fp
124f4     0C 4E 85 F1 | 	sub	fp, #12
124f8     2B 1E 0E F2 | 	cmp	local01, #43 wz
124fc     24 00 90 5D |  if_ne	jmp	#LR__1562
12500     04 4E 05 F1 | 	add	fp, #4
12504     A7 12 02 FB | 	rdlong	arg01, fp
12508     04 4E 85 F1 | 	sub	fp, #4
1250c     40 94 BF FD | 	call	#_convertstring
12510     04 4E 05 F1 | 	add	fp, #4
12514     A7 FA 61 FC | 	wrlong	result1, fp
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 3E 68 FC | 	wrlong	#31, fp
12520     0C 4E 85 F1 | 	sub	fp, #12
12524                 | LR__1562
12524                 | ' if t1.result_type=result_string then
12524     0C 4E 05 F1 | 	add	fp, #12
12528     A7 1E 02 FB | 	rdlong	local01, fp
1252c     0C 4E 85 F1 | 	sub	fp, #12
12530     1F 1E 0E F2 | 	cmp	local01, #31 wz
12534     E0 02 90 5D |  if_ne	jmp	#LR__1568
12538                 | '   if amode<>1234 then do_new
12538     A7 1E 02 FB | 	rdlong	local01, fp
1253c     02 00 00 FF 
12540     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
12544     14 0E B0 5D |  if_ne	call	#_do_new
12548                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
12548     04 4E 05 F1 | 	add	fp, #4
1254c     A7 12 02 FB | 	rdlong	arg01, fp
12550     04 4E 85 F1 | 	sub	fp, #4
12554     8C 01 00 FF 
12558     AC 15 06 F6 | 	mov	arg02, ##@LR__5569
1255c     4C F0 B0 FD | 	call	#__system___string_cmp
12560     00 FA 0D F2 | 	cmp	result1, #0 wz
12564     24 00 90 5D |  if_ne	jmp	#LR__1563
12568     51 00 00 FF 
1256c     D8 E5 05 F1 | 	add	objptr, ##41944
12570     F2 1E 02 FB | 	rdlong	local01, objptr
12574     51 00 00 FF 
12578     D8 E5 85 F1 | 	sub	objptr, ##41944
1257c     04 4E 05 F1 | 	add	fp, #4
12580     A7 1E 62 FC | 	wrlong	local01, fp
12584     04 4E 85 F1 | 	sub	fp, #4
12588     20 00 90 FD | 	jmp	#LR__1564
1258c                 | LR__1563
1258c     04 4E 05 F1 | 	add	fp, #4
12590     A7 1E 02 FB | 	rdlong	local01, fp
12594     04 4E 85 F1 | 	sub	fp, #4
12598     51 00 00 FF 
1259c     D8 E5 05 F1 | 	add	objptr, ##41944
125a0     F2 1E 62 FC | 	wrlong	local01, objptr
125a4     51 00 00 FF 
125a8     D8 E5 85 F1 | 	sub	objptr, ##41944
125ac                 | LR__1564
125ac                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
125ac     09 12 06 F6 | 	mov	arg01, #9
125b0     6C 42 B1 FD | 	call	#__system__close
125b4     09 1E 06 F6 | 	mov	local01, #9
125b8     4A 00 00 FF 
125bc     94 E4 05 F1 | 	add	objptr, ##38036
125c0     F2 12 02 FB | 	rdlong	arg01, objptr
125c4     4A 00 00 FF 
125c8     94 E4 85 F1 | 	sub	objptr, ##38036
125cc     8C 01 00 FF 
125d0     AD 15 06 F6 | 	mov	arg02, ##@LR__5570
125d4     08 F0 B0 FD | 	call	#__system___string_concat
125d8     FD 12 02 F6 | 	mov	arg01, result1
125dc     04 4E 05 F1 | 	add	fp, #4
125e0     A7 14 02 FB | 	rdlong	arg02, fp
125e4     04 4E 85 F1 | 	sub	fp, #4
125e8     F4 EF B0 FD | 	call	#__system___string_concat
125ec     FD 14 02 F6 | 	mov	arg02, result1
125f0     0F 13 02 F6 | 	mov	arg01, local01
125f4     00 16 06 F6 | 	mov	arg03, #0
125f8     8C FB B0 FD | 	call	#__system___basic_open_string
125fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12600     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12604     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12608     14 4E 05 F1 | 	add	fp, #20
1260c     A7 FA 61 FC | 	wrlong	result1, fp
12610                 | '   r=geterr() 
12610                 | '   if r then 
12610     14 4E 85 F1 | 	sub	fp, #20
12614     50 01 90 AD |  if_e	jmp	#LR__1566
12618                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
12618     09 12 06 F6 | 	mov	arg01, #9
1261c     00 42 B1 FD | 	call	#__system__close
12620     09 1E 06 F6 | 	mov	local01, #9
12624     4A 00 00 FF 
12628     94 E4 05 F1 | 	add	objptr, ##38036
1262c     F2 12 02 FB | 	rdlong	arg01, objptr
12630     4A 00 00 FF 
12634     94 E4 85 F1 | 	sub	objptr, ##38036
12638     8C 01 00 FF 
1263c     AF 15 06 F6 | 	mov	arg02, ##@LR__5571
12640     9C EF B0 FD | 	call	#__system___string_concat
12644     FD 12 02 F6 | 	mov	arg01, result1
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 14 02 FB | 	rdlong	arg02, fp
12650     04 4E 85 F1 | 	sub	fp, #4
12654     88 EF B0 FD | 	call	#__system___string_concat
12658     FD 12 02 F6 | 	mov	arg01, result1
1265c     8C 01 00 FF 
12660     B1 15 06 F6 | 	mov	arg02, ##@LR__5572
12664     78 EF B0 FD | 	call	#__system___string_concat
12668     FD 14 02 F6 | 	mov	arg02, result1
1266c     0F 13 02 F6 | 	mov	arg01, local01
12670     00 16 06 F6 | 	mov	arg03, #0
12674     10 FB B0 FD | 	call	#__system___basic_open_string
12678     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1267c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12680     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12684     14 4E 05 F1 | 	add	fp, #20
12688     A7 FA 61 FC | 	wrlong	result1, fp
1268c                 | '     r=geterr() 
1268c                 | '     if r then 
1268c     14 4E 85 F1 | 	sub	fp, #20
12690     A0 00 90 AD |  if_e	jmp	#LR__1565
12694                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
12694     00 12 06 F6 | 	mov	arg01, #0
12698     14 4C B1 FD | 	call	#__system___getiolock_0568
1269c     FD 12 02 F6 | 	mov	arg01, result1
126a0     E0 EE B0 FD | 	call	#__system___lockmem
126a4     8C 01 00 FF 
126a8     B6 15 06 F6 | 	mov	arg02, ##@LR__5573
126ac     00 12 06 F6 | 	mov	arg01, #0
126b0     00 16 06 F6 | 	mov	arg03, #0
126b4     C0 FB B0 FD | 	call	#__system___basic_print_string
126b8     14 4E 05 F1 | 	add	fp, #20
126bc     A7 14 02 FB | 	rdlong	arg02, fp
126c0     14 4E 85 F1 | 	sub	fp, #20
126c4     00 12 06 F6 | 	mov	arg01, #0
126c8     00 16 06 F6 | 	mov	arg03, #0
126cc     0A 18 06 F6 | 	mov	arg04, #10
126d0     E8 FB B0 FD | 	call	#__system___basic_print_integer
126d4     8C 01 00 FF 
126d8     C4 15 06 F6 | 	mov	arg02, ##@LR__5574
126dc     00 12 06 F6 | 	mov	arg01, #0
126e0     00 16 06 F6 | 	mov	arg03, #0
126e4     90 FB B0 FD | 	call	#__system___basic_print_string
126e8     00 1E 06 F6 | 	mov	local01, #0
126ec     14 4E 05 F1 | 	add	fp, #20
126f0     A7 12 02 FB | 	rdlong	arg01, fp
126f4     14 4E 85 F1 | 	sub	fp, #20
126f8     58 17 B1 FD | 	call	#__system___strerror
126fc     FD 14 02 F6 | 	mov	arg02, result1
12700     0F 13 02 F6 | 	mov	arg01, local01
12704     00 16 06 F6 | 	mov	arg03, #0
12708     6C FB B0 FD | 	call	#__system___basic_print_string
1270c     00 12 06 F6 | 	mov	arg01, #0
12710     0A 14 06 F6 | 	mov	arg02, #10
12714     00 16 06 F6 | 	mov	arg03, #0
12718     04 FB B0 FD | 	call	#__system___basic_print_char
1271c     00 12 06 F6 | 	mov	arg01, #0
12720     8C 4B B1 FD | 	call	#__system___getiolock_0568
12724     FD 00 68 FC | 	wrlong	#0, result1
12728     09 12 06 F6 | 	mov	arg01, #9
1272c     F0 40 B1 FD | 	call	#__system__close
12730     94 01 90 FD | 	jmp	#LR__1570
12734                 | LR__1565
12734     51 00 00 FF 
12738     D8 E5 05 F1 | 	add	objptr, ##41944
1273c     F2 12 02 FB | 	rdlong	arg01, objptr
12740     51 00 00 FF 
12744     D8 E5 85 F1 | 	sub	objptr, ##41944
12748     8C 01 00 FF 
1274c     C7 15 06 F6 | 	mov	arg02, ##@LR__5575
12750     8C EE B0 FD | 	call	#__system___string_concat
12754     51 00 00 FF 
12758     D8 E5 05 F1 | 	add	objptr, ##41944
1275c     F2 FA 61 FC | 	wrlong	result1, objptr
12760     51 00 00 FF 
12764     D8 E5 85 F1 | 	sub	objptr, ##41944
12768                 | LR__1566
12768                 | '   close #9: open currentdir$+"/"+loadname for input as #9
12768     09 12 06 F6 | 	mov	arg01, #9
1276c     B0 40 B1 FD | 	call	#__system__close
12770     09 1E 06 F6 | 	mov	local01, #9
12774     4A 00 00 FF 
12778     94 E4 05 F1 | 	add	objptr, ##38036
1277c     F2 12 02 FB | 	rdlong	arg01, objptr
12780     4A 00 00 FF 
12784     94 E4 85 F1 | 	sub	objptr, ##38036
12788     8C 01 00 FF 
1278c     CC 15 06 F6 | 	mov	arg02, ##@LR__5576
12790     4C EE B0 FD | 	call	#__system___string_concat
12794     FD 12 02 F6 | 	mov	arg01, result1
12798     51 00 00 FF 
1279c     D8 E5 05 F1 | 	add	objptr, ##41944
127a0     F2 14 02 FB | 	rdlong	arg02, objptr
127a4     51 00 00 FF 
127a8     D8 E5 85 F1 | 	sub	objptr, ##41944
127ac     30 EE B0 FD | 	call	#__system___string_concat
127b0     FD 14 02 F6 | 	mov	arg02, result1
127b4     0F 13 02 F6 | 	mov	arg01, local01
127b8     00 16 06 F6 | 	mov	arg03, #0
127bc     C8 F9 B0 FD | 	call	#__system___basic_open_string
127c0                 | '   do
127c0                 | LR__1567
127c0     09 12 06 F6 | 	mov	arg01, #9
127c4     C8 EF B0 FD | 	call	#__system___basic_read_line
127c8     FD 1E 02 F6 | 	mov	local01, result1
127cc     37 00 00 FF 
127d0     1C E4 05 F1 | 	add	objptr, ##28188
127d4     F2 1E 62 FC | 	wrlong	local01, objptr
127d8     37 00 00 FF 
127dc     1C E4 85 F1 | 	sub	objptr, ##28188
127e0     64 EF BE FD | 	call	#_interpret
127e4     37 00 00 FF 
127e8     1C E4 05 F1 | 	add	objptr, ##28188
127ec     F2 12 02 FB | 	rdlong	arg01, objptr
127f0     37 00 00 FF 
127f4     1C E4 85 F1 | 	sub	objptr, ##28188
127f8     8C 01 00 FF 
127fc     CE 15 06 F6 | 	mov	arg02, ##@LR__5577
12800     A8 ED B0 FD | 	call	#__system___string_cmp
12804     00 FA 0D F2 | 	cmp	result1, #0 wz
12808     B4 FF 9F 5D |  if_ne	jmp	#LR__1567
1280c                 | '   close #9   
1280c     09 12 06 F6 | 	mov	arg01, #9
12810     0C 40 B1 FD | 	call	#__system__close
12814     0C 00 90 FD | 	jmp	#LR__1569
12818                 | LR__1568
12818     1E 12 06 F6 | 	mov	arg01, #30
1281c     00 14 06 F6 | 	mov	arg02, #0
12820     A0 B7 B0 FD | 	call	#_printerror
12824                 | LR__1569
12824                 | ' print "Loaded ";currentdir$+"/"+loadname
12824     00 12 06 F6 | 	mov	arg01, #0
12828     84 4A B1 FD | 	call	#__system___getiolock_0568
1282c     FD 12 02 F6 | 	mov	arg01, result1
12830     50 ED B0 FD | 	call	#__system___lockmem
12834     8C 01 00 FF 
12838     CF 15 06 F6 | 	mov	arg02, ##@LR__5578
1283c     00 12 06 F6 | 	mov	arg01, #0
12840     00 16 06 F6 | 	mov	arg03, #0
12844     30 FA B0 FD | 	call	#__system___basic_print_string
12848     00 1E 06 F6 | 	mov	local01, #0
1284c     4A 00 00 FF 
12850     94 E4 05 F1 | 	add	objptr, ##38036
12854     F2 12 02 FB | 	rdlong	arg01, objptr
12858     4A 00 00 FF 
1285c     94 E4 85 F1 | 	sub	objptr, ##38036
12860     8C 01 00 FF 
12864     D7 15 06 F6 | 	mov	arg02, ##@LR__5579
12868     74 ED B0 FD | 	call	#__system___string_concat
1286c     FD 12 02 F6 | 	mov	arg01, result1
12870     51 00 00 FF 
12874     D8 E5 05 F1 | 	add	objptr, ##41944
12878     F2 14 02 FB | 	rdlong	arg02, objptr
1287c     51 00 00 FF 
12880     D8 E5 85 F1 | 	sub	objptr, ##41944
12884     58 ED B0 FD | 	call	#__system___string_concat
12888     FD 14 02 F6 | 	mov	arg02, result1
1288c     0F 13 02 F6 | 	mov	arg01, local01
12890     00 16 06 F6 | 	mov	arg03, #0
12894     E0 F9 B0 FD | 	call	#__system___basic_print_string
12898     00 12 06 F6 | 	mov	arg01, #0
1289c     0A 14 06 F6 | 	mov	arg02, #10
128a0     00 16 06 F6 | 	mov	arg03, #0
128a4     78 F9 B0 FD | 	call	#__system___basic_print_char
128a8     00 12 06 F6 | 	mov	arg01, #0
128ac     00 4A B1 FD | 	call	#__system___getiolock_0568
128b0     FD 00 68 FC | 	wrlong	#0, result1
128b4     51 00 00 FF 
128b8     E8 E5 05 F1 | 	add	objptr, ##41960
128bc     F2 00 68 FC | 	wrlong	#0, objptr
128c0     51 00 00 FF 
128c4     E8 E5 85 F1 | 	sub	objptr, ##41960
128c8                 | LR__1570
128c8     A7 F0 03 F6 | 	mov	ptra, fp
128cc     B2 00 A0 FD | 	call	#popregs_
128d0                 | _do_load_ret
128d0     2D 00 64 FD | 	ret
128d4                 | 
128d4                 | ' 
128d4                 | ' '-------------------- log
128d4                 | ' 
128d4                 | ' sub do_log
128d4                 | _do_log
128d4     01 4A 05 F6 | 	mov	COUNT_, #1
128d8     A8 00 A0 FD | 	call	#pushregs_
128dc     14 F0 07 F1 | 	add	ptra, #20
128e0     4A 00 00 FF 
128e4     80 E4 05 F1 | 	add	objptr, ##38016
128e8     F2 1E 02 FB | 	rdlong	local01, objptr
128ec     0F 17 02 F6 | 	mov	arg03, local01
128f0     01 16 66 F0 | 	shl	arg03, #1
128f4     0F 17 02 F1 | 	add	arg03, local01
128f8     02 16 66 F0 | 	shl	arg03, #2
128fc     03 00 00 FF 
12900     04 E4 85 F1 | 	sub	objptr, ##1540
12904     F2 16 02 F1 | 	add	arg03, objptr
12908     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1290c     0C 4E 05 F1 | 	add	fp, #12
12910     A7 16 62 FC | 	wrlong	arg03, fp
12914                 | ' 
12914                 | ' numpar=compiledline(lineptr_e).result.uresult
12914                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
12914     0C 4E 85 F1 | 	sub	fp, #12
12918     47 00 00 FF 
1291c     7C E4 85 F1 | 	sub	objptr, ##36476
12920     0C 4E 05 51 |  if_ne	add	fp, #12
12924     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12928     0C 4E 85 51 |  if_ne	sub	fp, #12
1292c     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
12930     40 00 90 4D |  if_c_and_nz	jmp	#LR__1580
12934     00 12 06 F6 | 	mov	arg01, #0
12938     74 49 B1 FD | 	call	#__system___getiolock_0568
1293c     FD 12 02 F6 | 	mov	arg01, result1
12940     40 EC B0 FD | 	call	#__system___lockmem
12944     8C 01 00 FF 
12948     D9 15 06 F6 | 	mov	arg02, ##@LR__5580
1294c     00 12 06 F6 | 	mov	arg01, #0
12950     00 16 06 F6 | 	mov	arg03, #0
12954     20 F9 B0 FD | 	call	#__system___basic_print_string
12958     00 12 06 F6 | 	mov	arg01, #0
1295c     50 49 B1 FD | 	call	#__system___getiolock_0568
12960     FD 00 68 FC | 	wrlong	#0, result1
12964     27 12 06 F6 | 	mov	arg01, #39
12968     00 14 06 F6 | 	mov	arg02, #0
1296c     54 B6 B0 FD | 	call	#_printerror
12970     D0 00 90 FD | 	jmp	#LR__1583
12974                 | LR__1580
12974                 | ' if numpar=2 then 
12974     0C 4E 05 F1 | 	add	fp, #12
12978     A7 1E 02 FB | 	rdlong	local01, fp
1297c     0C 4E 85 F1 | 	sub	fp, #12
12980     02 1E 0E F2 | 	cmp	local01, #2 wz
12984     48 00 90 5D |  if_ne	jmp	#LR__1581
12988     4C 8E BF FD | 	call	#_pop
1298c     FF 1E 02 F6 | 	mov	local01, result3
12990     A7 FA 61 FC | 	wrlong	result1, fp
12994     04 4E 05 F1 | 	add	fp, #4
12998     A7 FC 61 FC | 	wrlong	result2, fp
1299c     04 4E 05 F1 | 	add	fp, #4
129a0     A7 1E 62 FC | 	wrlong	local01, fp
129a4     08 4E 85 F1 | 	sub	fp, #8
129a8     A7 12 02 F6 | 	mov	arg01, fp
129ac     C8 90 BF FD | 	call	#_converttofloat
129b0     FD 14 02 F6 | 	mov	arg02, result1
129b4     FC 16 20 FF 
129b8     54 12 06 F6 | 	mov	arg01, ##1076754516
129bc     50 29 B1 FD | 	call	#__system____builtin_logbase
129c0     10 4E 05 F1 | 	add	fp, #16
129c4     A7 FA 61 FC | 	wrlong	result1, fp
129c8     10 4E 85 F1 | 	sub	fp, #16
129cc     10 00 90 FD | 	jmp	#LR__1582
129d0                 | LR__1581
129d0     10 4E 05 F1 | 	add	fp, #16
129d4     00 C0 9F FF 
129d8     A7 00 68 FC | 	wrlong	##1065353216, fp
129dc     10 4E 85 F1 | 	sub	fp, #16
129e0                 | LR__1582
129e0     F4 8D BF FD | 	call	#_pop
129e4     FF 1E 02 F6 | 	mov	local01, result3
129e8     A7 FA 61 FC | 	wrlong	result1, fp
129ec     04 4E 05 F1 | 	add	fp, #4
129f0     A7 FC 61 FC | 	wrlong	result2, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 1E 62 FC | 	wrlong	local01, fp
129fc     08 4E 85 F1 | 	sub	fp, #8
12a00     A7 12 02 F6 | 	mov	arg01, fp
12a04     70 90 BF FD | 	call	#_converttofloat
12a08     FD 14 02 F6 | 	mov	arg02, result1
12a0c     FC 16 20 FF 
12a10     54 12 06 F6 | 	mov	arg01, ##1076754516
12a14     F8 28 B1 FD | 	call	#__system____builtin_logbase
12a18     FD 12 02 F6 | 	mov	arg01, result1
12a1c     10 4E 05 F1 | 	add	fp, #16
12a20     A7 14 02 FB | 	rdlong	arg02, fp
12a24     10 4E 85 F1 | 	sub	fp, #16
12a28     18 1B B1 FD | 	call	#__system___float_div
12a2c     A7 FA 61 FC | 	wrlong	result1, fp
12a30     08 4E 05 F1 | 	add	fp, #8
12a34     A7 3C 68 FC | 	wrlong	#30, fp
12a38     08 4E 85 F1 | 	sub	fp, #8
12a3c     A7 12 02 F6 | 	mov	arg01, fp
12a40     2C 8E BF FD | 	call	#_push
12a44                 | LR__1583
12a44     A7 F0 03 F6 | 	mov	ptra, fp
12a48     B2 00 A0 FD | 	call	#popregs_
12a4c                 | _do_log_ret
12a4c     2D 00 64 FD | 	ret
12a50                 | 
12a50                 | ' 
12a50                 | ' '-------------------- lpeek
12a50                 | ' 
12a50                 | ' sub do_lpeek
12a50                 | _do_lpeek
12a50     00 4A 05 F6 | 	mov	COUNT_, #0
12a54     A8 00 A0 FD | 	call	#pushregs_
12a58     14 F0 07 F1 | 	add	ptra, #20
12a5c     78 8D BF FD | 	call	#_pop
12a60     A7 FA 61 FC | 	wrlong	result1, fp
12a64     04 4E 05 F1 | 	add	fp, #4
12a68     A7 FC 61 FC | 	wrlong	result2, fp
12a6c     04 4E 05 F1 | 	add	fp, #4
12a70     A7 FE 61 FC | 	wrlong	result3, fp
12a74     08 4E 85 F1 | 	sub	fp, #8
12a78     A7 12 02 F6 | 	mov	arg01, fp
12a7c     3C 8F BF FD | 	call	#_converttoint
12a80     0C 4E 05 F1 | 	add	fp, #12
12a84     A7 FA 61 FC | 	wrlong	result1, fp
12a88                 | ' 
12a88                 | ' t1=pop()
12a88                 | ' a=converttoint(t1)
12a88                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
12a88     0C 4E 85 F1 | 	sub	fp, #12
12a8c     00 04 00 FF 
12a90     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12a94     1C 00 90 3D |  if_ae	jmp	#LR__1590
12a98     0C 4E 05 F1 | 	add	fp, #12
12a9c     A7 12 02 FB | 	rdlong	arg01, fp
12aa0     09 FB 01 FB | 	rdlong	result1, arg01
12aa4     04 4E 05 F1 | 	add	fp, #4
12aa8     A7 FA 61 FC | 	wrlong	result1, fp
12aac     10 4E 85 F1 | 	sub	fp, #16
12ab0     1C 00 90 FD | 	jmp	#LR__1591
12ab4                 | LR__1590
12ab4     0C 4E 05 F1 | 	add	fp, #12
12ab8     A7 12 02 FB | 	rdlong	arg01, fp
12abc     0C 4E 85 F1 | 	sub	fp, #12
12ac0     BC B7 B0 FD | 	call	#_pslpeek
12ac4     10 4E 05 F1 | 	add	fp, #16
12ac8     A7 FA 61 FC | 	wrlong	result1, fp
12acc     10 4E 85 F1 | 	sub	fp, #16
12ad0                 | LR__1591
12ad0     08 4E 05 F1 | 	add	fp, #8
12ad4     A7 3A 68 FC | 	wrlong	#29, fp
12ad8     08 4E 05 F1 | 	add	fp, #8
12adc     A7 12 02 FB | 	rdlong	arg01, fp
12ae0     10 4E 85 F1 | 	sub	fp, #16
12ae4     A7 12 62 FC | 	wrlong	arg01, fp
12ae8     A7 12 02 F6 | 	mov	arg01, fp
12aec     80 8D BF FD | 	call	#_push
12af0     A7 F0 03 F6 | 	mov	ptra, fp
12af4     B2 00 A0 FD | 	call	#popregs_
12af8                 | _do_lpeek_ret
12af8     2D 00 64 FD | 	ret
12afc                 | 
12afc                 | ' 
12afc                 | ' '-------------------- lpoke
12afc                 | ' 
12afc                 | ' sub do_lpoke
12afc                 | _do_lpoke
12afc     01 4A 05 F6 | 	mov	COUNT_, #1
12b00     A8 00 A0 FD | 	call	#pushregs_
12b04     20 F0 07 F1 | 	add	ptra, #32
12b08     CC 8C BF FD | 	call	#_pop
12b0c     FD 14 02 F6 | 	mov	arg02, result1
12b10     FE 12 02 F6 | 	mov	arg01, result2
12b14     FF 1E 02 F6 | 	mov	local01, result3
12b18     A7 14 62 FC | 	wrlong	arg02, fp
12b1c     04 4E 05 F1 | 	add	fp, #4
12b20     A7 12 62 FC | 	wrlong	arg01, fp
12b24     04 4E 05 F1 | 	add	fp, #4
12b28     A7 1E 62 FC | 	wrlong	local01, fp
12b2c     08 4E 85 F1 | 	sub	fp, #8
12b30     A4 8C BF FD | 	call	#_pop
12b34     FF 1E 02 F6 | 	mov	local01, result3
12b38     0C 4E 05 F1 | 	add	fp, #12
12b3c     A7 FA 61 FC | 	wrlong	result1, fp
12b40     04 4E 05 F1 | 	add	fp, #4
12b44     A7 FC 61 FC | 	wrlong	result2, fp
12b48     04 4E 05 F1 | 	add	fp, #4
12b4c     A7 1E 62 FC | 	wrlong	local01, fp
12b50     08 4E 85 F1 | 	sub	fp, #8
12b54     A7 12 02 F6 | 	mov	arg01, fp
12b58     0C 4E 85 F1 | 	sub	fp, #12
12b5c     5C 8E BF FD | 	call	#_converttoint
12b60     18 4E 05 F1 | 	add	fp, #24
12b64     A7 FA 61 FC | 	wrlong	result1, fp
12b68     18 4E 85 F1 | 	sub	fp, #24
12b6c     A7 12 02 F6 | 	mov	arg01, fp
12b70     48 8E BF FD | 	call	#_converttoint
12b74     1C 4E 05 F1 | 	add	fp, #28
12b78     A7 FA 61 FC | 	wrlong	result1, fp
12b7c                 | ' 
12b7c                 | ' t1=pop() 'value
12b7c                 | ' t2=pop() 
12b7c                 | ' a=converttoint(t2) : v=converttoint(t1)
12b7c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
12b7c     04 4E 85 F1 | 	sub	fp, #4
12b80     A7 1E 02 FB | 	rdlong	local01, fp
12b84     18 4E 85 F1 | 	sub	fp, #24
12b88     00 04 00 FF 
12b8c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
12b90     1C 00 90 3D |  if_ae	jmp	#LR__1600
12b94     18 4E 05 F1 | 	add	fp, #24
12b98     A7 12 02 FB | 	rdlong	arg01, fp
12b9c     04 4E 05 F1 | 	add	fp, #4
12ba0     A7 14 02 FB | 	rdlong	arg02, fp
12ba4     1C 4E 85 F1 | 	sub	fp, #28
12ba8     09 15 62 FC | 	wrlong	arg02, arg01
12bac     18 00 90 FD | 	jmp	#LR__1601
12bb0                 | LR__1600
12bb0     18 4E 05 F1 | 	add	fp, #24
12bb4     A7 12 02 FB | 	rdlong	arg01, fp
12bb8     04 4E 05 F1 | 	add	fp, #4
12bbc     A7 14 02 FB | 	rdlong	arg02, fp
12bc0     1C 4E 85 F1 | 	sub	fp, #28
12bc4     88 B5 B0 FD | 	call	#_pslpoke
12bc8                 | LR__1601
12bc8     A7 F0 03 F6 | 	mov	ptra, fp
12bcc     B2 00 A0 FD | 	call	#popregs_
12bd0                 | _do_lpoke_ret
12bd0     2D 00 64 FD | 	ret
12bd4                 | 
12bd4                 | ' 
12bd4                 | ' '-------------------- mid$
12bd4                 | ' 
12bd4                 | ' sub do_mid
12bd4                 | _do_mid
12bd4     00 4A 05 F6 | 	mov	COUNT_, #0
12bd8     A8 00 A0 FD | 	call	#pushregs_
12bdc     18 F0 07 F1 | 	add	ptra, #24
12be0     4A 00 00 FF 
12be4     80 E4 05 F1 | 	add	objptr, ##38016
12be8     F2 16 02 FB | 	rdlong	arg03, objptr
12bec     0B 15 02 F6 | 	mov	arg02, arg03
12bf0     01 14 66 F0 | 	shl	arg02, #1
12bf4     0B 15 02 F1 | 	add	arg02, arg03
12bf8     02 14 66 F0 | 	shl	arg02, #2
12bfc     03 00 00 FF 
12c00     04 E4 85 F1 | 	sub	objptr, ##1540
12c04     F2 14 02 F1 | 	add	arg02, objptr
12c08     0A 17 02 FB | 	rdlong	arg03, arg02
12c0c     0C 4E 05 F1 | 	add	fp, #12
12c10     A7 16 62 FC | 	wrlong	arg03, fp
12c14                 | ' 
12c14                 | ' numpar=compiledline(lineptr_e).result.uresult
12c14                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
12c14     0C 4E 85 F1 | 	sub	fp, #12
12c18     03 16 0E F2 | 	cmp	arg03, #3 wz
12c1c     47 00 00 FF 
12c20     7C E4 85 F1 | 	sub	objptr, ##36476
12c24     40 00 90 AD |  if_e	jmp	#LR__1610
12c28     00 12 06 F6 | 	mov	arg01, #0
12c2c     80 46 B1 FD | 	call	#__system___getiolock_0568
12c30     FD 12 02 F6 | 	mov	arg01, result1
12c34     4C E9 B0 FD | 	call	#__system___lockmem
12c38     8C 01 00 FF 
12c3c     DF 15 06 F6 | 	mov	arg02, ##@LR__5581
12c40     00 12 06 F6 | 	mov	arg01, #0
12c44     00 16 06 F6 | 	mov	arg03, #0
12c48     2C F6 B0 FD | 	call	#__system___basic_print_string
12c4c     00 12 06 F6 | 	mov	arg01, #0
12c50     5C 46 B1 FD | 	call	#__system___getiolock_0568
12c54     FD 00 68 FC | 	wrlong	#0, result1
12c58     27 12 06 F6 | 	mov	arg01, #39
12c5c     00 14 06 F6 | 	mov	arg02, #0
12c60     60 B3 B0 FD | 	call	#_printerror
12c64     2C 01 90 FD | 	jmp	#LR__1613
12c68                 | LR__1610
12c68     6C 8B BF FD | 	call	#_pop
12c6c     FF 16 02 F6 | 	mov	arg03, result3
12c70     A7 FA 61 FC | 	wrlong	result1, fp
12c74     04 4E 05 F1 | 	add	fp, #4
12c78     A7 FC 61 FC | 	wrlong	result2, fp
12c7c     04 4E 05 F1 | 	add	fp, #4
12c80     A7 16 62 FC | 	wrlong	arg03, fp
12c84     08 4E 85 F1 | 	sub	fp, #8
12c88     A7 12 02 F6 | 	mov	arg01, fp
12c8c     2C 8D BF FD | 	call	#_converttoint
12c90     FD 16 02 F6 | 	mov	arg03, result1
12c94     14 4E 05 F1 | 	add	fp, #20
12c98     A7 16 62 FC | 	wrlong	arg03, fp
12c9c     14 4E 85 F1 | 	sub	fp, #20
12ca0     34 8B BF FD | 	call	#_pop
12ca4     FF 16 02 F6 | 	mov	arg03, result3
12ca8     A7 FA 61 FC | 	wrlong	result1, fp
12cac     04 4E 05 F1 | 	add	fp, #4
12cb0     A7 FC 61 FC | 	wrlong	result2, fp
12cb4     04 4E 05 F1 | 	add	fp, #4
12cb8     A7 16 62 FC | 	wrlong	arg03, fp
12cbc     08 4E 85 F1 | 	sub	fp, #8
12cc0     A7 12 02 F6 | 	mov	arg01, fp
12cc4     F4 8C BF FD | 	call	#_converttoint
12cc8     FD 16 02 F6 | 	mov	arg03, result1
12ccc     10 4E 05 F1 | 	add	fp, #16
12cd0     A7 16 62 FC | 	wrlong	arg03, fp
12cd4     10 4E 85 F1 | 	sub	fp, #16
12cd8     FC 8A BF FD | 	call	#_pop
12cdc     FF 16 02 F6 | 	mov	arg03, result3
12ce0     A7 FA 61 FC | 	wrlong	result1, fp
12ce4     04 4E 05 F1 | 	add	fp, #4
12ce8     A7 FC 61 FC | 	wrlong	result2, fp
12cec     04 4E 05 F1 | 	add	fp, #4
12cf0     A7 16 62 FC | 	wrlong	arg03, fp
12cf4                 | ' t1=pop() : arg2=converttoint(t1)
12cf4                 | ' t1=pop() : arg1=converttoint(t1)
12cf4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12cf4     08 4E 85 F1 | 	sub	fp, #8
12cf8     2B 16 0E F2 | 	cmp	arg03, #43 wz
12cfc     18 00 90 5D |  if_ne	jmp	#LR__1611
12d00     A7 12 02 FB | 	rdlong	arg01, fp
12d04     48 8C BF FD | 	call	#_convertstring
12d08     A7 FA 61 FC | 	wrlong	result1, fp
12d0c     08 4E 05 F1 | 	add	fp, #8
12d10     A7 3E 68 FC | 	wrlong	#31, fp
12d14     08 4E 85 F1 | 	sub	fp, #8
12d18                 | LR__1611
12d18                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
12d18     08 4E 05 F1 | 	add	fp, #8
12d1c     A7 16 02 FB | 	rdlong	arg03, fp
12d20     08 4E 85 F1 | 	sub	fp, #8
12d24     1F 16 0E F2 | 	cmp	arg03, #31 wz
12d28     40 00 90 AD |  if_e	jmp	#LR__1612
12d2c     00 12 06 F6 | 	mov	arg01, #0
12d30     7C 45 B1 FD | 	call	#__system___getiolock_0568
12d34     FD 12 02 F6 | 	mov	arg01, result1
12d38     48 E8 B0 FD | 	call	#__system___lockmem
12d3c     8C 01 00 FF 
12d40     E6 15 06 F6 | 	mov	arg02, ##@LR__5582
12d44     00 12 06 F6 | 	mov	arg01, #0
12d48     00 16 06 F6 | 	mov	arg03, #0
12d4c     28 F5 B0 FD | 	call	#__system___basic_print_string
12d50     00 12 06 F6 | 	mov	arg01, #0
12d54     58 45 B1 FD | 	call	#__system___getiolock_0568
12d58     FD 00 68 FC | 	wrlong	#0, result1
12d5c     0F 12 06 F6 | 	mov	arg01, #15
12d60     00 14 06 F6 | 	mov	arg02, #0
12d64     5C B2 B0 FD | 	call	#_printerror
12d68     28 00 90 FD | 	jmp	#LR__1613
12d6c                 | LR__1612
12d6c     A7 12 02 FB | 	rdlong	arg01, fp
12d70     10 4E 05 F1 | 	add	fp, #16
12d74     A7 14 02 FB | 	rdlong	arg02, fp
12d78     04 4E 05 F1 | 	add	fp, #4
12d7c     A7 16 02 FB | 	rdlong	arg03, fp
12d80     14 4E 85 F1 | 	sub	fp, #20
12d84     90 09 B1 FD | 	call	#__system__Mid_S
12d88     A7 FA 61 FC | 	wrlong	result1, fp
12d8c     A7 12 02 F6 | 	mov	arg01, fp
12d90     DC 8A BF FD | 	call	#_push
12d94                 | LR__1613
12d94     A7 F0 03 F6 | 	mov	ptra, fp
12d98     B2 00 A0 FD | 	call	#popregs_
12d9c                 | _do_mid_ret
12d9c     2D 00 64 FD | 	ret
12da0                 | 
12da0                 | ' 
12da0                 | ' '-------------------- mkdir
12da0                 | ' 
12da0                 | ' sub do_mkdir
12da0                 | _do_mkdir
12da0     04 4A 05 F6 | 	mov	COUNT_, #4
12da4     A8 00 A0 FD | 	call	#pushregs_
12da8     2C 8A BF FD | 	call	#_pop
12dac     FE 18 02 F6 | 	mov	arg04, result2
12db0     FF 16 02 F6 | 	mov	arg03, result3
12db4     FD 1E 02 F6 | 	mov	local01, result1
12db8     0C 21 02 F6 | 	mov	local02, arg04
12dbc     0B 23 02 F6 | 	mov	local03, arg03
12dc0                 | ' 
12dc0                 | ' t1=pop()
12dc0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12dc0     2B 22 0E F2 | 	cmp	local03, #43 wz
12dc4     10 00 90 5D |  if_ne	jmp	#LR__1620
12dc8     0F 13 02 F6 | 	mov	arg01, local01
12dcc     80 8B BF FD | 	call	#_convertstring
12dd0     FD 1E 02 F6 | 	mov	local01, result1
12dd4     1F 22 06 F6 | 	mov	local03, #31
12dd8                 | LR__1620
12dd8                 | ' if t1.result_type<>result_string then printerror(15): return
12dd8     1F 22 0E F2 | 	cmp	local03, #31 wz
12ddc     10 00 90 AD |  if_e	jmp	#LR__1621
12de0     0F 12 06 F6 | 	mov	arg01, #15
12de4     00 14 06 F6 | 	mov	arg02, #0
12de8     D8 B1 B0 FD | 	call	#_printerror
12dec     70 00 90 FD | 	jmp	#LR__1623
12df0                 | LR__1621
12df0     0F 13 02 F6 | 	mov	arg01, local01
12df4     1C 3C B1 FD | 	call	#__system__mkdir
12df8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12dfc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
12e00     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12e04     FD 24 0A F6 | 	mov	local04, result1 wz
12e08                 | ' filename$=t1.result.sresult
12e08                 | ' mkdir(filename$)
12e08                 | ' err=geterr() : if err<>0 then print "Cannot create a directory: system error "; err
12e08     54 00 90 AD |  if_e	jmp	#LR__1622
12e0c     00 12 06 F6 | 	mov	arg01, #0
12e10     9C 44 B1 FD | 	call	#__system___getiolock_0568
12e14     FD 12 02 F6 | 	mov	arg01, result1
12e18     68 E7 B0 FD | 	call	#__system___lockmem
12e1c     8C 01 00 FF 
12e20     ED 15 06 F6 | 	mov	arg02, ##@LR__5583
12e24     00 12 06 F6 | 	mov	arg01, #0
12e28     00 16 06 F6 | 	mov	arg03, #0
12e2c     48 F4 B0 FD | 	call	#__system___basic_print_string
12e30     00 12 06 F6 | 	mov	arg01, #0
12e34     12 15 02 F6 | 	mov	arg02, local04
12e38     00 16 06 F6 | 	mov	arg03, #0
12e3c     0A 18 06 F6 | 	mov	arg04, #10
12e40     78 F4 B0 FD | 	call	#__system___basic_print_integer
12e44     00 12 06 F6 | 	mov	arg01, #0
12e48     0A 14 06 F6 | 	mov	arg02, #10
12e4c     00 16 06 F6 | 	mov	arg03, #0
12e50     CC F3 B0 FD | 	call	#__system___basic_print_char
12e54     00 12 06 F6 | 	mov	arg01, #0
12e58     54 44 B1 FD | 	call	#__system___getiolock_0568
12e5c     FD 00 68 FC | 	wrlong	#0, result1
12e60                 | LR__1622
12e60                 | LR__1623
12e60     A7 F0 03 F6 | 	mov	ptra, fp
12e64     B2 00 A0 FD | 	call	#popregs_
12e68                 | _do_mkdir_ret
12e68     2D 00 64 FD | 	ret
12e6c                 | 
12e6c                 | ' 
12e6c                 | ' '-------------------- mode
12e6c                 | ' 
12e6c                 | ' sub do_mode
12e6c                 | _do_mode
12e6c     05 4A 05 F6 | 	mov	COUNT_, #5
12e70     A8 00 A0 FD | 	call	#pushregs_
12e74     60 89 BF FD | 	call	#_pop
12e78     FD 1E 02 F6 | 	mov	local01, result1
12e7c     FE 20 02 F6 | 	mov	local02, result2
12e80     FF 22 02 F6 | 	mov	local03, result3
12e84                 | ' t1=pop() 
12e84                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12e84     1E 22 0E F2 | 	cmp	local03, #30 wz
12e88     10 00 90 5D |  if_ne	jmp	#LR__1630
12e8c     0F 13 02 F6 | 	mov	arg01, local01
12e90     00 14 06 F6 | 	mov	arg02, #0
12e94     70 19 B1 FD | 	call	#__system___float_tointeger
12e98     FD 1E 02 F6 | 	mov	local01, result1
12e9c                 | LR__1630
12e9c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12e9c     1F 22 0E F2 | 	cmp	local03, #31 wz
12ea0     18 00 90 5D |  if_ne	jmp	#LR__1631
12ea4     0F 13 02 F6 | 	mov	arg01, local01
12ea8     A0 1C B1 FD | 	call	#__system____builtin_atof
12eac     FD 12 02 F6 | 	mov	arg01, result1
12eb0     00 14 06 F6 | 	mov	arg02, #0
12eb4     50 19 B1 FD | 	call	#__system___float_tointeger
12eb8     FD 1E 02 F6 | 	mov	local01, result1
12ebc                 | LR__1631
12ebc                 | ' select case t1.result.iresult
12ebc     0F 25 02 F6 | 	mov	local04, local01
12ec0     05 24 26 F3 | 	fle	local04, #5
12ec4     30 24 62 FD | 	jmprel	local04
12ec8                 | LR__1632
12ec8     14 00 90 FD | 	jmp	#LR__1633
12ecc     A8 00 90 FD | 	jmp	#LR__1634
12ed0     10 01 90 FD | 	jmp	#LR__1635
12ed4     78 01 90 FD | 	jmp	#LR__1636
12ed8     E0 01 90 FD | 	jmp	#LR__1637
12edc     70 02 90 FD | 	jmp	#LR__1638
12ee0                 | LR__1633
12ee0     37 00 00 FF 
12ee4     40 E4 05 F1 | 	add	objptr, ##28224
12ee8     F2 02 68 FC | 	wrlong	#1, objptr
12eec     04 E4 85 F1 | 	sub	objptr, #4
12ef0     F2 34 69 FC | 	wrlong	#154, objptr
12ef4     19 00 00 FF 
12ef8     D8 E4 05 F1 | 	add	objptr, ##13016
12efc     F2 02 68 FC | 	wrlong	#1, objptr
12f00     19 00 00 FF 
12f04     DC E4 85 F1 | 	sub	objptr, ##13020
12f08     F2 26 69 FC | 	wrlong	#147, objptr
12f0c     37 00 00 FF 
12f10     38 E4 85 F1 | 	sub	objptr, ##28216
12f14     04 12 06 F6 | 	mov	arg01, #4
12f18     3C CC B0 FD | 	call	#_hg010b_spin2_setfontfamily
12f1c     37 00 00 FF 
12f20     3C E4 05 F1 | 	add	objptr, ##28220
12f24     F2 12 02 FB | 	rdlong	arg01, objptr
12f28     04 E4 85 F1 | 	sub	objptr, #4
12f2c     F2 14 02 FB | 	rdlong	arg02, objptr
12f30                 | ' 
12f30                 | ' write_color:=ff
12f30     36 00 00 FF 
12f34     F7 E5 85 F1 | 	sub	objptr, ##28151
12f38     F2 12 62 FC | 	wrlong	arg01, objptr
12f3c                 | ' write_background:=bb
12f3c     04 E4 05 F1 | 	add	objptr, #4
12f40     F2 14 62 FC | 	wrlong	arg02, objptr
12f44     01 00 00 FF 
12f48     00 EA 05 F1 | 	add	ptr__dat__, ##512
12f4c     51 00 00 FF 
12f50     73 E5 05 F1 | 	add	objptr, ##41843
12f54     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12f58     04 E4 85 F1 | 	sub	objptr, #4
12f5c     03 00 80 FF 
12f60     F2 30 69 FC | 	wrlong	##1688, objptr
12f64     51 00 00 FF 
12f68     B4 E5 85 F1 | 	sub	objptr, ##41908
12f6c     01 00 00 FF 
12f70     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12f74     D8 01 90 FD | 	jmp	#LR__1638
12f78                 | LR__1634
12f78     37 00 00 FF 
12f7c     40 E4 05 F1 | 	add	objptr, ##28224
12f80     F2 00 68 FC | 	wrlong	#0, objptr
12f84     04 E4 85 F1 | 	sub	objptr, #4
12f88     F2 2E 68 FC | 	wrlong	#23, objptr
12f8c     19 00 00 FF 
12f90     D8 E4 05 F1 | 	add	objptr, ##13016
12f94     F2 00 68 FC | 	wrlong	#0, objptr
12f98     19 00 00 FF 
12f9c     DC E4 85 F1 | 	sub	objptr, ##13020
12fa0     F2 00 68 FC | 	wrlong	#0, objptr
12fa4     37 00 00 FF 
12fa8     38 E4 85 F1 | 	sub	objptr, ##28216
12fac     00 12 06 F6 | 	mov	arg01, #0
12fb0     A4 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
12fb4     37 00 00 FF 
12fb8     3C E4 05 F1 | 	add	objptr, ##28220
12fbc     F2 12 02 FB | 	rdlong	arg01, objptr
12fc0     04 E4 85 F1 | 	sub	objptr, #4
12fc4     F2 14 02 FB | 	rdlong	arg02, objptr
12fc8                 | ' 
12fc8                 | ' write_color:=ff
12fc8     36 00 00 FF 
12fcc     F7 E5 85 F1 | 	sub	objptr, ##28151
12fd0     F2 12 62 FC | 	wrlong	arg01, objptr
12fd4                 | ' write_background:=bb
12fd4     04 E4 05 F1 | 	add	objptr, #4
12fd8     F2 14 62 FC | 	wrlong	arg02, objptr
12fdc     45 E4 85 F1 | 	sub	objptr, #69
12fe0     6C 01 90 FD | 	jmp	#LR__1638
12fe4                 | LR__1635
12fe4     37 00 00 FF 
12fe8     40 E4 05 F1 | 	add	objptr, ##28224
12fec     F2 00 68 FC | 	wrlong	#0, objptr
12ff0     04 E4 85 F1 | 	sub	objptr, #4
12ff4     F2 6A 69 FC | 	wrlong	#181, objptr
12ff8     19 00 00 FF 
12ffc     D8 E4 05 F1 | 	add	objptr, ##13016
13000     F2 00 68 FC | 	wrlong	#0, objptr
13004     19 00 00 FF 
13008     DC E4 85 F1 | 	sub	objptr, ##13020
1300c     F2 00 68 FC | 	wrlong	#0, objptr
13010     37 00 00 FF 
13014     38 E4 85 F1 | 	sub	objptr, ##28216
13018     00 12 06 F6 | 	mov	arg01, #0
1301c     38 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
13020     37 00 00 FF 
13024     3C E4 05 F1 | 	add	objptr, ##28220
13028     F2 12 02 FB | 	rdlong	arg01, objptr
1302c     04 E4 85 F1 | 	sub	objptr, #4
13030     F2 14 02 FB | 	rdlong	arg02, objptr
13034                 | ' 
13034                 | ' write_color:=ff
13034     36 00 00 FF 
13038     F7 E5 85 F1 | 	sub	objptr, ##28151
1303c     F2 12 62 FC | 	wrlong	arg01, objptr
13040                 | ' write_background:=bb
13040     04 E4 05 F1 | 	add	objptr, #4
13044     F2 14 62 FC | 	wrlong	arg02, objptr
13048     45 E4 85 F1 | 	sub	objptr, #69
1304c     00 01 90 FD | 	jmp	#LR__1638
13050                 | LR__1636
13050     37 00 00 FF 
13054     40 E4 05 F1 | 	add	objptr, ##28224
13058     F2 00 68 FC | 	wrlong	#0, objptr
1305c     04 E4 85 F1 | 	sub	objptr, #4
13060     F2 1E 68 FC | 	wrlong	#15, objptr
13064     19 00 00 FF 
13068     D8 E4 05 F1 | 	add	objptr, ##13016
1306c     F2 00 68 FC | 	wrlong	#0, objptr
13070     19 00 00 FF 
13074     DC E4 85 F1 | 	sub	objptr, ##13020
13078     F2 00 68 FC | 	wrlong	#0, objptr
1307c     37 00 00 FF 
13080     38 E4 85 F1 | 	sub	objptr, ##28216
13084     00 12 06 F6 | 	mov	arg01, #0
13088     CC CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
1308c     37 00 00 FF 
13090     3C E4 05 F1 | 	add	objptr, ##28220
13094     F2 12 02 FB | 	rdlong	arg01, objptr
13098     04 E4 85 F1 | 	sub	objptr, #4
1309c     F2 14 02 FB | 	rdlong	arg02, objptr
130a0                 | ' 
130a0                 | ' write_color:=ff
130a0     36 00 00 FF 
130a4     F7 E5 85 F1 | 	sub	objptr, ##28151
130a8     F2 12 62 FC | 	wrlong	arg01, objptr
130ac                 | ' write_background:=bb
130ac     04 E4 05 F1 | 	add	objptr, #4
130b0     F2 14 62 FC | 	wrlong	arg02, objptr
130b4     45 E4 85 F1 | 	sub	objptr, #69
130b8     94 00 90 FD | 	jmp	#LR__1638
130bc                 | LR__1637
130bc     37 00 00 FF 
130c0     40 E4 05 F1 | 	add	objptr, ##28224
130c4     F2 02 68 FC | 	wrlong	#1, objptr
130c8     04 E4 85 F1 | 	sub	objptr, #4
130cc     F2 02 68 FC | 	wrlong	#1, objptr
130d0     19 00 00 FF 
130d4     D8 E4 05 F1 | 	add	objptr, ##13016
130d8     F2 02 68 FC | 	wrlong	#1, objptr
130dc     19 00 00 FF 
130e0     DC E4 85 F1 | 	sub	objptr, ##13020
130e4     F2 1C 68 FC | 	wrlong	#14, objptr
130e8     37 00 00 FF 
130ec     38 E4 85 F1 | 	sub	objptr, ##28216
130f0     04 12 06 F6 | 	mov	arg01, #4
130f4     60 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
130f8     37 00 00 FF 
130fc     3C E4 05 F1 | 	add	objptr, ##28220
13100     F2 12 02 FB | 	rdlong	arg01, objptr
13104     04 E4 85 F1 | 	sub	objptr, #4
13108     F2 14 02 FB | 	rdlong	arg02, objptr
1310c                 | ' 
1310c                 | ' write_color:=ff
1310c     36 00 00 FF 
13110     F7 E5 85 F1 | 	sub	objptr, ##28151
13114     F2 12 62 FC | 	wrlong	arg01, objptr
13118                 | ' write_background:=bb
13118     04 E4 05 F1 | 	add	objptr, #4
1311c     F2 14 62 FC | 	wrlong	arg02, objptr
13120     07 00 00 FF 
13124     82 EB 05 F1 | 	add	ptr__dat__, ##3970
13128     51 00 00 FF 
1312c     73 E5 05 F1 | 	add	objptr, ##41843
13130     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13134     04 E4 85 F1 | 	sub	objptr, #4
13138     03 00 80 FF 
1313c     F2 30 69 FC | 	wrlong	##1688, objptr
13140     51 00 00 FF 
13144     B4 E5 85 F1 | 	sub	objptr, ##41908
13148     07 00 00 FF 
1314c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
13150                 | LR__1638
13150     51 00 00 FF 
13154     B0 E5 05 F1 | 	add	objptr, ##41904
13158     F2 1E 62 FC | 	wrlong	local01, objptr
1315c     04 E4 85 F1 | 	sub	objptr, #4
13160     F2 12 02 FB | 	rdlong	arg01, objptr
13164     0E 00 00 FF 
13168     50 E5 85 F1 | 	sub	objptr, ##7504
1316c     F2 26 02 FB | 	rdlong	local05, objptr
13170     43 00 00 FF 
13174     5C E4 85 F1 | 	sub	objptr, ##34396
13178     13 13 82 F1 | 	sub	arg01, local05
1317c     00 14 06 F6 | 	mov	arg02, #0
13180     0A 16 06 F6 | 	mov	arg03, #10
13184     CC 06 B1 FD | 	call	#__system__Number_S
13188     FD 12 02 F6 | 	mov	arg01, result1
1318c     8D 01 00 FF 
13190     16 14 06 F6 | 	mov	arg02, ##@LR__5584
13194     48 E4 B0 FD | 	call	#__system___string_concat
13198     50 00 00 FF 
1319c     10 E5 05 F1 | 	add	objptr, ##41232
131a0     F2 FA 61 FC | 	wrlong	result1, objptr
131a4     19 00 00 FF 
131a8     D4 E4 85 F1 | 	sub	objptr, ##13012
131ac     F2 12 02 FB | 	rdlong	arg01, objptr
131b0     04 E4 85 F1 | 	sub	objptr, #4
131b4     F2 14 02 FB | 	rdlong	arg02, objptr
131b8     37 00 00 FF 
131bc     38 E4 85 F1 | 	sub	objptr, ##28216
131c0     E4 CA B0 FD | 	call	#_hg010b_spin2_cls
131c4     8D 01 00 FF 
131c8     28 12 06 F6 | 	mov	arg01, ##@LR__5585
131cc                 | ' 
131cc                 | ' write(text)
131cc     98 CE B0 FD | 	call	#_hg010b_spin2_write
131d0                 | ' crlf
131d0     94 D3 B0 FD | 	call	#_hg010b_spin2_crlf
131d4     18 00 00 FF 
131d8     40 EB 05 F1 | 	add	ptr__dat__, ##12608
131dc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
131e0     18 00 00 FF 
131e4     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
131e8                 | ' 
131e8                 | ' write(text)
131e8     7C CE B0 FD | 	call	#_hg010b_spin2_write
131ec                 | ' crlf
131ec     78 D3 B0 FD | 	call	#_hg010b_spin2_crlf
131f0     50 00 00 FF 
131f4     10 E5 05 F1 | 	add	objptr, ##41232
131f8     F2 12 02 FB | 	rdlong	arg01, objptr
131fc     50 00 00 FF 
13200     10 E5 85 F1 | 	sub	objptr, ##41232
13204                 | ' 
13204                 | ' write(text)
13204     60 CE B0 FD | 	call	#_hg010b_spin2_write
13208                 | ' crlf
13208     5C D3 B0 FD | 	call	#_hg010b_spin2_crlf
1320c     A7 F0 03 F6 | 	mov	ptra, fp
13210     B2 00 A0 FD | 	call	#popregs_
13214                 | _do_mode_ret
13214     2D 00 64 FD | 	ret
13218                 | 
13218                 | ' 
13218                 | ' '-------------------- mouse
13218                 | ' 
13218                 | ' sub do_mouse
13218                 | _do_mouse
13218     BC 85 BF FD | 	call	#_pop
1321c     00 FA 4D F2 | 	cmps	result1, #0 wz
13220                 | ' 
13220                 | ' t1=pop()
13220                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
13220     14 00 90 5D |  if_ne	jmp	#LR__1640
13224     10 12 06 F6 | 	mov	arg01, #16
13228     00 14 06 F6 | 	mov	arg02, #0
1322c     00 16 06 F6 | 	mov	arg03, #0
13230     54 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13234     10 00 90 FD | 	jmp	#LR__1641
13238                 | LR__1640
13238     10 12 06 F6 | 	mov	arg01, #16
1323c     20 14 06 F6 | 	mov	arg02, #32
13240     20 16 06 F6 | 	mov	arg03, #32
13244     40 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13248                 | LR__1641
13248                 | _do_mouse_ret
13248     2D 00 64 FD | 	ret
1324c                 | 
1324c                 | ' 
1324c                 | ' '-------------------- mousek
1324c                 | ' 
1324c                 | ' sub do_mousek
1324c                 | _do_mousek
1324c     00 4A 05 F6 | 	mov	COUNT_, #0
13250     A8 00 A0 FD | 	call	#pushregs_
13254     0C F0 07 F1 | 	add	ptra, #12
13258     08 4E 05 F1 | 	add	fp, #8
1325c     A7 3A 68 FC | 	wrlong	#29, fp
13260     08 4E 85 F1 | 	sub	fp, #8
13264     51 00 00 FF 
13268     28 E5 05 F1 | 	add	objptr, ##41768
1326c     F2 12 02 FB | 	rdlong	arg01, objptr
13270     51 00 00 FF 
13274     28 E5 85 F1 | 	sub	objptr, ##41768
13278     A7 12 62 FC | 	wrlong	arg01, fp
1327c     A7 12 02 F6 | 	mov	arg01, fp
13280     EC 85 BF FD | 	call	#_push
13284     A7 F0 03 F6 | 	mov	ptra, fp
13288     B2 00 A0 FD | 	call	#popregs_
1328c                 | _do_mousek_ret
1328c     2D 00 64 FD | 	ret
13290                 | 
13290                 | ' 
13290                 | ' '-------------------- mousew
13290                 | ' 
13290                 | ' sub do_mousew
13290                 | _do_mousew
13290     00 4A 05 F6 | 	mov	COUNT_, #0
13294     A8 00 A0 FD | 	call	#pushregs_
13298     0C F0 07 F1 | 	add	ptra, #12
1329c     08 4E 05 F1 | 	add	fp, #8
132a0     A7 38 68 FC | 	wrlong	#28, fp
132a4     08 4E 85 F1 | 	sub	fp, #8
132a8     51 00 00 FF 
132ac     2C E5 05 F1 | 	add	objptr, ##41772
132b0     F2 12 02 FB | 	rdlong	arg01, objptr
132b4     51 00 00 FF 
132b8     2C E5 85 F1 | 	sub	objptr, ##41772
132bc     A7 12 62 FC | 	wrlong	arg01, fp
132c0     A7 12 02 F6 | 	mov	arg01, fp
132c4     A8 85 BF FD | 	call	#_push
132c8     A7 F0 03 F6 | 	mov	ptra, fp
132cc     B2 00 A0 FD | 	call	#popregs_
132d0                 | _do_mousew_ret
132d0     2D 00 64 FD | 	ret
132d4                 | 
132d4                 | ' 
132d4                 | ' '-------------------- mousex
132d4                 | ' 
132d4                 | ' sub do_mousex
132d4                 | _do_mousex
132d4     00 4A 05 F6 | 	mov	COUNT_, #0
132d8     A8 00 A0 FD | 	call	#pushregs_
132dc     0C F0 07 F1 | 	add	ptra, #12
132e0     08 4E 05 F1 | 	add	fp, #8
132e4     A7 3A 68 FC | 	wrlong	#29, fp
132e8     08 4E 85 F1 | 	sub	fp, #8
132ec     51 00 00 FF 
132f0     20 E5 05 F1 | 	add	objptr, ##41760
132f4     F2 12 02 FB | 	rdlong	arg01, objptr
132f8     51 00 00 FF 
132fc     20 E5 85 F1 | 	sub	objptr, ##41760
13300     A7 12 62 FC | 	wrlong	arg01, fp
13304     A7 12 02 F6 | 	mov	arg01, fp
13308     64 85 BF FD | 	call	#_push
1330c     A7 F0 03 F6 | 	mov	ptra, fp
13310     B2 00 A0 FD | 	call	#popregs_
13314                 | _do_mousex_ret
13314     2D 00 64 FD | 	ret
13318                 | 
13318                 | ' 
13318                 | ' '-------------------- mousey
13318                 | ' 
13318                 | ' sub do_mousey
13318                 | _do_mousey
13318     00 4A 05 F6 | 	mov	COUNT_, #0
1331c     A8 00 A0 FD | 	call	#pushregs_
13320     0C F0 07 F1 | 	add	ptra, #12
13324     08 4E 05 F1 | 	add	fp, #8
13328     A7 3A 68 FC | 	wrlong	#29, fp
1332c     08 4E 85 F1 | 	sub	fp, #8
13330     51 00 00 FF 
13334     24 E5 05 F1 | 	add	objptr, ##41764
13338     F2 12 02 FB | 	rdlong	arg01, objptr
1333c     51 00 00 FF 
13340     24 E5 85 F1 | 	sub	objptr, ##41764
13344     A7 12 62 FC | 	wrlong	arg01, fp
13348     A7 12 02 F6 | 	mov	arg01, fp
1334c     20 85 BF FD | 	call	#_push
13350     A7 F0 03 F6 | 	mov	ptra, fp
13354     B2 00 A0 FD | 	call	#popregs_
13358                 | _do_mousey_ret
13358     2D 00 64 FD | 	ret
1335c                 | 
1335c                 | ' 
1335c                 | ' '------------------ new
1335c                 | ' 
1335c                 | ' sub do_new
1335c                 | _do_new
1335c     03 4A 05 F6 | 	mov	COUNT_, #3
13360     A8 00 A0 FD | 	call	#pushregs_
13364     13 12 C6 F9 | 	decod	arg01, #19
13368     01 14 66 F6 | 	neg	arg02, #1
1336c     E0 AD B0 FD | 	call	#_pslpoke
13370     35 00 00 FF 
13374     08 E4 05 F1 | 	add	objptr, ##27144
13378     F2 00 68 FC | 	wrlong	#0, objptr
1337c                 | ' 
1337c                 | ' pslpoke(memlo,$FFFFFFFF)
1337c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
1337c     00 1E 06 F6 | 	mov	local01, #0
13380     20 00 00 FF 
13384     10 E4 85 F1 | 	sub	objptr, ##16400
13388     97 1E 48 FB | 	callpa	#(@LR__1651-@LR__1650)>>2,fcache_load_ptr_
1338c                 | LR__1650
1338c     0F 17 02 F6 | 	mov	arg03, local01
13390     04 16 66 F0 | 	shl	arg03, #4
13394     F2 16 02 F1 | 	add	arg03, objptr
13398     8D 01 00 FF 
1339c     29 14 06 F6 | 	mov	arg02, ##@LR__5586
133a0     0B 15 62 FC | 	wrlong	arg02, arg03
133a4     0F 21 02 F6 | 	mov	local02, local01
133a8     04 20 66 F0 | 	shl	local02, #4
133ac     F2 20 02 F1 | 	add	local02, objptr
133b0     0C 20 06 F1 | 	add	local02, #12
133b4     10 01 68 FC | 	wrlong	#0, local02
133b8     01 1E 06 F1 | 	add	local01, #1
133bc     02 00 00 FF 
133c0     01 1E 56 F2 | 	cmps	local01, ##1025 wc
133c4     C4 FF 9F CD |  if_b	jmp	#LR__1650
133c8                 | LR__1651
133c8     35 00 00 FF 
133cc     90 E4 05 F1 | 	add	objptr, ##27280
133d0     00 04 80 FF 
133d4     F2 00 68 FC | 	wrlong	##524288, objptr
133d8     06 00 00 FF 
133dc     30 E4 05 F1 | 	add	objptr, ##3120
133e0     00 04 80 FF 
133e4     F2 00 68 FC | 	wrlong	##524288, objptr
133e8     04 E4 05 F1 | 	add	objptr, #4
133ec     00 04 80 FF 
133f0     F2 00 68 FC | 	wrlong	##524288, objptr
133f4     0D 00 00 FF 
133f8     64 E4 85 F1 | 	sub	objptr, ##6756
133fc     F2 00 68 FC | 	wrlong	#0, objptr
13400     07 00 00 FF 
13404     24 E4 05 F1 | 	add	objptr, ##3620
13408     F2 00 68 FC | 	wrlong	#0, objptr
1340c     07 00 00 FF 
13410     20 E4 85 F1 | 	sub	objptr, ##3616
13414     00 04 80 FF 
13418     F2 00 68 FC | 	wrlong	##524288, objptr
1341c     07 00 00 FF 
13420     30 E4 05 F1 | 	add	objptr, ##3632
13424     F2 00 68 FC | 	wrlong	#0, objptr
13428     04 E4 05 F1 | 	add	objptr, #4
1342c     FF FF FF FF 
13430     F2 FE 6B FC | 	wrlong	##-1, objptr
13434     06 00 00 FF 
13438     78 E4 05 F1 | 	add	objptr, ##3192
1343c     F2 00 68 FC | 	wrlong	#0, objptr
13440     04 E4 05 F1 | 	add	objptr, #4
13444     F2 00 68 FC | 	wrlong	#0, objptr
13448                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
13448                 | ' stackpointer=0
13448                 | ' lineptr=0 
13448                 | ' programptr=memlo ': stringptr=0
13448                 | ' 
13448                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
13448                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
13448     00 1E 06 F6 | 	mov	local01, #0
1344c     06 00 00 FF 
13450     74 E4 85 F1 | 	sub	objptr, ##3188
13454     97 16 48 FB | 	callpa	#(@LR__1653-@LR__1652)>>2,fcache_load_ptr_
13458                 | LR__1652
13458     0F 21 02 F6 | 	mov	local02, local01
1345c     02 20 66 F0 | 	shl	local02, #2
13460     0F 21 02 F1 | 	add	local02, local01
13464     02 20 66 F0 | 	shl	local02, #2
13468     F2 20 02 F1 | 	add	local02, objptr
1346c     08 20 06 F1 | 	add	local02, #8
13470     FF FF FF FF 
13474     10 FF 6B FC | 	wrlong	##-1, local02
13478     01 1E 06 F1 | 	add	local01, #1
1347c     41 1E 56 F2 | 	cmps	local01, #65 wc
13480     D4 FF 9F CD |  if_b	jmp	#LR__1652
13484                 | LR__1653
13484     4A 00 00 FF 
13488     98 E4 85 F1 | 	sub	objptr, ##38040
1348c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
1348c     00 1E 06 F6 | 	mov	local01, #0
13490                 | LR__1654
13490     0F 21 02 F6 | 	mov	local02, local01
13494     02 20 66 F0 | 	shl	local02, #2
13498     51 00 00 FF 
1349c     68 E5 05 F1 | 	add	objptr, ##41832
134a0     F2 20 02 F1 | 	add	local02, objptr
134a4     10 23 0A FB | 	rdlong	local03, local02 wz
134a8     51 00 00 FF 
134ac     68 E5 85 F1 | 	sub	objptr, ##41832
134b0     34 00 90 AD |  if_e	jmp	#LR__1655
134b4     0F 13 02 F6 | 	mov	arg01, local01
134b8     00 14 06 F6 | 	mov	arg02, #0
134bc     00 16 06 F6 | 	mov	arg03, #0
134c0     C4 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
134c4     0F 21 02 F6 | 	mov	local02, local01
134c8     02 20 66 F0 | 	shl	local02, #2
134cc     51 00 00 FF 
134d0     68 E5 05 F1 | 	add	objptr, ##41832
134d4     F2 20 02 F1 | 	add	local02, objptr
134d8     10 13 02 FB | 	rdlong	arg01, local02
134dc     51 00 00 FF 
134e0     68 E5 85 F1 | 	sub	objptr, ##41832
134e4     BC 22 B1 FD | 	call	#__system___gc_free
134e8                 | LR__1655
134e8     01 1E 06 F1 | 	add	local01, #1
134ec     10 1E 56 F2 | 	cmps	local01, #16 wc
134f0     9C FF 9F CD |  if_b	jmp	#LR__1654
134f4     51 00 00 FF 
134f8     BC E5 05 F1 | 	add	objptr, ##41916
134fc     00 C0 9F FF 
13500     F2 00 68 FC | 	wrlong	##1065353216, objptr
13504     04 E4 05 F1 | 	add	objptr, #4
13508     00 C0 9F FF 
1350c     F2 00 68 FC | 	wrlong	##1065353216, objptr
13510     51 00 00 FF 
13514     BC E5 85 F1 | 	sub	objptr, ##41916
13518     F2 22 02 FB | 	rdlong	local03, objptr
1351c     51 00 00 FF 
13520     A8 E5 05 F1 | 	add	objptr, ##41896
13524     F2 22 62 FC | 	wrlong	local03, objptr
13528     51 00 00 FF 
1352c     AC E5 85 F1 | 	sub	objptr, ##41900
13530     11 12 06 F6 | 	mov	arg01, #17
13534     08 14 06 F6 | 	mov	arg02, #8
13538     10 16 06 F6 | 	mov	arg03, #16
1353c     48 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13540     10 12 06 F6 | 	mov	arg01, #16
13544     20 14 06 F6 | 	mov	arg02, #32
13548     20 16 06 F6 | 	mov	arg03, #32
1354c     38 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13550     8D 01 00 FF 
13554     2A 22 06 F6 | 	mov	local03, ##@LR__5587
13558     51 00 00 FF 
1355c     D8 E5 05 F1 | 	add	objptr, ##41944
13560     F2 22 62 FC | 	wrlong	local03, objptr
13564     51 00 00 FF 
13568     D8 E5 85 F1 | 	sub	objptr, ##41944
1356c     6C 9E B0 FD | 	call	#_init_audio
13570     A7 F0 03 F6 | 	mov	ptra, fp
13574     B2 00 A0 FD | 	call	#popregs_
13578                 | _do_new_ret
13578     2D 00 64 FD | 	ret
1357c                 | 
1357c                 | ' 
1357c                 | ' '-------------------- next
1357c                 | ' 
1357c                 | ' sub do_next()
1357c                 | _do_next
1357c     04 4A 05 F6 | 	mov	COUNT_, #4
13580     A8 00 A0 FD | 	call	#pushregs_
13584     50 82 BF FD | 	call	#_pop
13588     FD 1E 02 F6 | 	mov	local01, result1
1358c     FE 20 02 F6 | 	mov	local02, result2
13590     FF 22 02 F6 | 	mov	local03, result3
13594                 | ' t1=pop() :varnum=t1.result.uresult
13594                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
13594     50 00 00 FF 
13598     08 E5 05 F1 | 	add	objptr, ##41224
1359c     F2 14 02 FB | 	rdlong	arg02, objptr
135a0     0A 13 02 F6 | 	mov	arg01, arg02
135a4     02 12 66 F0 | 	shl	arg01, #2
135a8     0A 13 02 F1 | 	add	arg01, arg02
135ac     02 12 66 F0 | 	shl	arg01, #2
135b0     06 00 00 FF 
135b4     70 E4 85 F1 | 	sub	objptr, ##3184
135b8     F2 12 02 F1 | 	add	arg01, objptr
135bc     08 12 06 F1 | 	add	arg01, #8
135c0     09 15 02 FB | 	rdlong	arg02, arg01
135c4     0F 15 0A F2 | 	cmp	arg02, local01 wz
135c8     4A 00 00 FF 
135cc     98 E4 85 F1 | 	sub	objptr, ##38040
135d0     10 00 90 AD |  if_e	jmp	#LR__1660
135d4     25 12 06 F6 | 	mov	arg01, #37
135d8     00 14 06 F6 | 	mov	arg02, #0
135dc     E4 A9 B0 FD | 	call	#_printerror
135e0     54 03 90 FD | 	jmp	#LR__1667
135e4                 | LR__1660
135e4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
135e4     0F 15 02 F6 | 	mov	arg02, local01
135e8     04 14 66 F0 | 	shl	arg02, #4
135ec     14 00 00 FF 
135f0     F8 E5 05 F1 | 	add	objptr, ##10744
135f4     F2 14 02 F1 | 	add	arg02, objptr
135f8     0C 14 06 F1 | 	add	arg02, #12
135fc     0A 15 02 FB | 	rdlong	arg02, arg02
13600     1E 14 0E F2 | 	cmp	arg02, #30 wz
13604     14 00 00 FF 
13608     F8 E5 85 F1 | 	sub	objptr, ##10744
1360c     54 00 90 5D |  if_ne	jmp	#LR__1661
13610     0F 15 02 F6 | 	mov	arg02, local01
13614     04 14 66 F0 | 	shl	arg02, #4
13618     14 00 00 FF 
1361c     F8 E5 05 F1 | 	add	objptr, ##10744
13620     F2 14 02 F1 | 	add	arg02, objptr
13624     0C 14 06 F1 | 	add	arg02, #12
13628     0A 39 68 FC | 	wrlong	#28, arg02
1362c     0F 25 02 F6 | 	mov	local04, local01
13630     04 24 66 F0 | 	shl	local04, #4
13634     F2 24 02 F1 | 	add	local04, objptr
13638     0F 15 02 F6 | 	mov	arg02, local01
1363c     04 14 66 F0 | 	shl	arg02, #4
13640     F2 14 02 F1 | 	add	arg02, objptr
13644     04 14 06 F1 | 	add	arg02, #4
13648     0A 13 02 FB | 	rdlong	arg01, arg02
1364c     14 00 00 FF 
13650     F8 E5 85 F1 | 	sub	objptr, ##10744
13654     01 14 06 F6 | 	mov	arg02, #1
13658     AC 11 B1 FD | 	call	#__system___float_tointeger
1365c     04 24 06 F1 | 	add	local04, #4
13660     12 FB 61 FC | 	wrlong	result1, local04
13664                 | LR__1661
13664     50 00 00 FF 
13668     08 E5 05 F1 | 	add	objptr, ##41224
1366c     F2 24 02 FB | 	rdlong	local04, objptr
13670     12 15 02 F6 | 	mov	arg02, local04
13674     02 14 66 F0 | 	shl	arg02, #2
13678     12 15 02 F1 | 	add	arg02, local04
1367c     02 14 66 F0 | 	shl	arg02, #2
13680     06 00 00 FF 
13684     70 E4 85 F1 | 	sub	objptr, ##3184
13688     F2 14 02 F1 | 	add	arg02, objptr
1368c     0C 14 06 F1 | 	add	arg02, #12
13690     0A FF 01 FB | 	rdlong	result3, arg02
13694     0F 25 02 F6 | 	mov	local04, local01
13698     04 24 66 F0 | 	shl	local04, #4
1369c     35 00 00 FF 
136a0     A0 E4 85 F1 | 	sub	objptr, ##27296
136a4     F2 24 02 F1 | 	add	local04, objptr
136a8     0F 15 02 F6 | 	mov	arg02, local01
136ac     04 14 66 F0 | 	shl	arg02, #4
136b0     F2 14 02 F1 | 	add	arg02, objptr
136b4     04 14 06 F1 | 	add	arg02, #4
136b8     0A 13 02 FB | 	rdlong	arg01, arg02
136bc     FF 12 02 F1 | 	add	arg01, result3
136c0     04 24 06 F1 | 	add	local04, #4
136c4     12 13 62 FC | 	wrlong	arg01, local04
136c8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
136c8                 | ' if fortable(fortop).stepval>=0 then
136c8     3B 00 00 FF 
136cc     10 E5 05 F1 | 	add	objptr, ##30480
136d0     F2 24 02 FB | 	rdlong	local04, objptr
136d4     12 13 02 F6 | 	mov	arg01, local04
136d8     02 12 66 F0 | 	shl	arg01, #2
136dc     12 13 02 F1 | 	add	arg01, local04
136e0     02 12 66 F0 | 	shl	arg01, #2
136e4     06 00 00 FF 
136e8     70 E4 85 F1 | 	sub	objptr, ##3184
136ec     F2 12 02 F1 | 	add	arg01, objptr
136f0     0C 12 06 F1 | 	add	arg01, #12
136f4     09 13 02 FB | 	rdlong	arg01, arg01
136f8     00 12 56 F2 | 	cmps	arg01, #0 wc
136fc     4A 00 00 FF 
13700     98 E4 85 F1 | 	sub	objptr, ##38040
13704     78 00 90 CD |  if_b	jmp	#LR__1662
13708                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
13708     04 1E 66 F0 | 	shl	local01, #4
1370c     14 00 00 FF 
13710     F8 E5 05 F1 | 	add	objptr, ##10744
13714     F2 1E 02 F1 | 	add	local01, objptr
13718     3B 00 00 FF 
1371c     10 E5 05 F1 | 	add	objptr, ##30480
13720     F2 12 02 FB | 	rdlong	arg01, objptr
13724     09 25 02 F6 | 	mov	local04, arg01
13728     02 24 66 F0 | 	shl	local04, #2
1372c     09 25 02 F1 | 	add	local04, arg01
13730     02 24 66 F0 | 	shl	local04, #2
13734     06 00 00 FF 
13738     70 E4 85 F1 | 	sub	objptr, ##3184
1373c     F2 24 02 F1 | 	add	local04, objptr
13740     04 1E 06 F1 | 	add	local01, #4
13744     0F 1F 02 FB | 	rdlong	local01, local01
13748     10 24 06 F1 | 	add	local04, #16
1374c     12 25 02 FB | 	rdlong	local04, local04
13750     12 1F 5A F2 | 	cmps	local01, local04 wcz
13754     4A 00 00 FF 
13758     98 E4 85 F1 | 	sub	objptr, ##38040
1375c     9C 00 90 ED |  if_be	jmp	#LR__1664
13760     50 00 00 FF 
13764     08 E5 05 F1 | 	add	objptr, ##41224
13768     F2 24 02 FB | 	rdlong	local04, objptr
1376c     01 24 86 F1 | 	sub	local04, #1
13770     F2 24 62 FC | 	wrlong	local04, objptr
13774     50 00 00 FF 
13778     08 E5 85 F1 | 	sub	objptr, ##41224
1377c     B8 01 90 FD | 	jmp	#LR__1667
13780                 | LR__1662
13780                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
13780     0F 25 02 F6 | 	mov	local04, local01
13784     04 24 66 F0 | 	shl	local04, #4
13788     14 00 00 FF 
1378c     F8 E5 05 F1 | 	add	objptr, ##10744
13790     F2 24 02 F1 | 	add	local04, objptr
13794     3B 00 00 FF 
13798     10 E5 05 F1 | 	add	objptr, ##30480
1379c     F2 1E 02 FB | 	rdlong	local01, objptr
137a0     0F 13 02 F6 | 	mov	arg01, local01
137a4     02 12 66 F0 | 	shl	arg01, #2
137a8     0F 13 02 F1 | 	add	arg01, local01
137ac     02 12 66 F0 | 	shl	arg01, #2
137b0     06 00 00 FF 
137b4     70 E4 85 F1 | 	sub	objptr, ##3184
137b8     F2 12 02 F1 | 	add	arg01, objptr
137bc     04 24 06 F1 | 	add	local04, #4
137c0     12 25 02 FB | 	rdlong	local04, local04
137c4     10 12 06 F1 | 	add	arg01, #16
137c8     09 13 02 FB | 	rdlong	arg01, arg01
137cc     09 25 52 F2 | 	cmps	local04, arg01 wc
137d0     4A 00 00 FF 
137d4     98 E4 85 F1 | 	sub	objptr, ##38040
137d8     20 00 90 3D |  if_ae	jmp	#LR__1663
137dc     50 00 00 FF 
137e0     08 E5 05 F1 | 	add	objptr, ##41224
137e4     F2 24 02 FB | 	rdlong	local04, objptr
137e8     01 24 86 F1 | 	sub	local04, #1
137ec     F2 24 62 FC | 	wrlong	local04, objptr
137f0     50 00 00 FF 
137f4     08 E5 85 F1 | 	sub	objptr, ##41224
137f8     3C 01 90 FD | 	jmp	#LR__1667
137fc                 | LR__1663
137fc                 | LR__1664
137fc                 | ' ' if not returned, goto pointer 
137fc                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
137fc     50 00 00 FF 
13800     EC E4 05 F1 | 	add	objptr, ##41196
13804     F2 24 02 FB | 	rdlong	local04, objptr
13808     50 00 00 FF 
1380c     EC E4 85 F1 | 	sub	objptr, ##41196
13810     01 24 16 F2 | 	cmp	local04, #1 wc
13814     DC 00 90 CD |  if_b	jmp	#LR__1665
13818     50 00 00 FF 
1381c     08 E5 05 F1 | 	add	objptr, ##41224
13820     F2 24 02 FB | 	rdlong	local04, objptr
13824     12 1F 02 F6 | 	mov	local01, local04
13828     02 1E 66 F0 | 	shl	local01, #2
1382c     12 1F 02 F1 | 	add	local01, local04
13830     02 1E 66 F0 | 	shl	local01, #2
13834     06 00 00 FF 
13838     70 E4 85 F1 | 	sub	objptr, ##3184
1383c     F2 1E 02 F1 | 	add	local01, objptr
13840     06 00 00 FF 
13844     20 E4 05 F1 | 	add	objptr, ##3104
13848     F2 24 02 FB | 	rdlong	local04, objptr
1384c     50 00 00 FF 
13850     B8 E4 85 F1 | 	sub	objptr, ##41144
13854     0F 1F 02 FB | 	rdlong	local01, local01
13858     0F 25 0A F2 | 	cmp	local04, local01 wz
1385c     94 00 90 AD |  if_e	jmp	#LR__1665
13860     50 00 00 FF 
13864     08 E5 05 F1 | 	add	objptr, ##41224
13868     F2 24 02 FB | 	rdlong	local04, objptr
1386c     12 1F 02 F6 | 	mov	local01, local04
13870     02 1E 66 F0 | 	shl	local01, #2
13874     12 1F 02 F1 | 	add	local01, local04
13878     02 1E 66 F0 | 	shl	local01, #2
1387c     06 00 00 FF 
13880     70 E4 85 F1 | 	sub	objptr, ##3184
13884     F2 1E 02 F1 | 	add	local01, objptr
13888     0F 1F 02 FB | 	rdlong	local01, local01
1388c     06 00 00 FF 
13890     20 E4 05 F1 | 	add	objptr, ##3104
13894     F2 1E 62 FC | 	wrlong	local01, objptr
13898     50 E4 05 F1 | 	add	objptr, #80
1389c     F2 24 02 FB | 	rdlong	local04, objptr
138a0     12 1F 02 F6 | 	mov	local01, local04
138a4     02 1E 66 F0 | 	shl	local01, #2
138a8     12 1F 02 F1 | 	add	local01, local04
138ac     02 1E 66 F0 | 	shl	local01, #2
138b0     06 00 00 FF 
138b4     70 E4 85 F1 | 	sub	objptr, ##3184
138b8     F2 1E 02 F1 | 	add	local01, objptr
138bc     04 1E 06 F1 | 	add	local01, #4
138c0     0F 1F 02 FB | 	rdlong	local01, local01
138c4     06 00 00 FF 
138c8     24 E4 05 F1 | 	add	objptr, ##3108
138cc     F2 1E 62 FC | 	wrlong	local01, objptr
138d0     06 00 00 FF 
138d4     40 E4 85 F1 | 	sub	objptr, ##3136
138d8     F2 24 02 FB | 	rdlong	local04, objptr
138dc     01 24 86 F1 | 	sub	local04, #1
138e0     04 E4 05 F1 | 	add	objptr, #4
138e4     F2 24 62 FC | 	wrlong	local04, objptr
138e8     4A 00 00 FF 
138ec     80 E4 85 F1 | 	sub	objptr, ##38016
138f0     44 00 90 FD | 	jmp	#LR__1666
138f4                 | LR__1665
138f4     50 00 00 FF 
138f8     08 E5 05 F1 | 	add	objptr, ##41224
138fc     F2 24 02 FB | 	rdlong	local04, objptr
13900     12 1F 02 F6 | 	mov	local01, local04
13904     02 1E 66 F0 | 	shl	local01, #2
13908     12 1F 02 F1 | 	add	local01, local04
1390c     02 1E 66 F0 | 	shl	local01, #2
13910     06 00 00 FF 
13914     70 E4 85 F1 | 	sub	objptr, ##3184
13918     F2 1E 02 F1 | 	add	local01, objptr
1391c     04 1E 06 F1 | 	add	local01, #4
13920     0F 1F 02 FB | 	rdlong	local01, local01
13924     01 1E 86 F1 | 	sub	local01, #1
13928     18 E4 85 F1 | 	sub	objptr, #24
1392c     F2 1E 62 FC | 	wrlong	local01, objptr
13930     4A 00 00 FF 
13934     80 E4 85 F1 | 	sub	objptr, ##38016
13938                 | LR__1666
13938                 | LR__1667
13938     A7 F0 03 F6 | 	mov	ptra, fp
1393c     B2 00 A0 FD | 	call	#popregs_
13940                 | _do_next_ret
13940     2D 00 64 FD | 	ret
13944                 | 
13944                 | ' 
13944                 | ' '-------------------- no command (print "Unknown command")
13944                 | ' 
13944                 | ' sub do_no_command
13944                 | _do_no_command
13944     17 12 06 F6 | 	mov	arg01, #23
13948     00 14 06 F6 | 	mov	arg02, #0
1394c     74 A6 B0 FD | 	call	#_printerror
13950                 | _do_no_command_ret
13950     2D 00 64 FD | 	ret
13954                 | 
13954                 | ' 
13954                 | ' '-------------------- nothing
13954                 | ' 
13954                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
13954                 | _do_nothing
13954                 | _do_nothing_ret
13954     2D 00 64 FD | 	ret
13958                 | 
13958                 | ' 
13958                 | ' '-------------------- open
13958                 | ' 
13958                 | ' sub do_open
13958                 | _do_open
13958     02 4A 05 F6 | 	mov	COUNT_, #2
1395c     A8 00 A0 FD | 	call	#pushregs_
13960     20 F0 07 F1 | 	add	ptra, #32
13964     4A 00 00 FF 
13968     80 E4 05 F1 | 	add	objptr, ##38016
1396c     F2 16 02 FB | 	rdlong	arg03, objptr
13970     0B 15 02 F6 | 	mov	arg02, arg03
13974     01 14 66 F0 | 	shl	arg02, #1
13978     0B 15 02 F1 | 	add	arg02, arg03
1397c     02 14 66 F0 | 	shl	arg02, #2
13980     03 00 00 FF 
13984     04 E4 85 F1 | 	sub	objptr, ##1540
13988     F2 14 02 F1 | 	add	arg02, objptr
1398c     0A 17 02 FB | 	rdlong	arg03, arg02
13990     10 4E 05 F1 | 	add	fp, #16
13994     A7 16 62 FC | 	wrlong	arg03, fp
13998     10 4E 85 F1 | 	sub	fp, #16
1399c     47 00 00 FF 
139a0     7C E4 85 F1 | 	sub	objptr, ##36476
139a4     30 7E BF FD | 	call	#_pop
139a8     FF 16 02 F6 | 	mov	arg03, result3
139ac     A7 FA 61 FC | 	wrlong	result1, fp
139b0     04 4E 05 F1 | 	add	fp, #4
139b4     A7 FC 61 FC | 	wrlong	result2, fp
139b8     04 4E 05 F1 | 	add	fp, #4
139bc     A7 16 62 FC | 	wrlong	arg03, fp
139c0                 | ' 
139c0                 | ' numpar=compiledline(lineptr_e).result.uresult
139c0                 | ' 
139c0                 | ' t1=pop()
139c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
139c0     08 4E 85 F1 | 	sub	fp, #8
139c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
139c8     18 00 90 5D |  if_ne	jmp	#LR__1670
139cc     A7 12 02 FB | 	rdlong	arg01, fp
139d0     7C 7F BF FD | 	call	#_convertstring
139d4     A7 FA 61 FC | 	wrlong	result1, fp
139d8     08 4E 05 F1 | 	add	fp, #8
139dc     A7 3E 68 FC | 	wrlong	#31, fp
139e0     08 4E 85 F1 | 	sub	fp, #8
139e4                 | LR__1670
139e4                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
139e4     08 4E 05 F1 | 	add	fp, #8
139e8     A7 16 02 FB | 	rdlong	arg03, fp
139ec     08 4E 85 F1 | 	sub	fp, #8
139f0     1F 16 0E F2 | 	cmp	arg03, #31 wz
139f4     44 00 90 AD |  if_e	jmp	#LR__1671
139f8     00 12 06 F6 | 	mov	arg01, #0
139fc     B0 38 B1 FD | 	call	#__system___getiolock_0568
13a00     FD 12 02 F6 | 	mov	arg01, result1
13a04     7C DB B0 FD | 	call	#__system___lockmem
13a08     8D 01 00 FF 
13a0c     35 14 06 F6 | 	mov	arg02, ##@LR__5588
13a10     00 12 06 F6 | 	mov	arg01, #0
13a14     00 16 06 F6 | 	mov	arg03, #0
13a18     5C E8 B0 FD | 	call	#__system___basic_print_string
13a1c     00 12 06 F6 | 	mov	arg01, #0
13a20     0A 14 06 F6 | 	mov	arg02, #10
13a24     00 16 06 F6 | 	mov	arg03, #0
13a28     F4 E7 B0 FD | 	call	#__system___basic_print_char
13a2c     00 12 06 F6 | 	mov	arg01, #0
13a30     7C 38 B1 FD | 	call	#__system___getiolock_0568
13a34     FD 00 68 FC | 	wrlong	#0, result1
13a38     28 02 90 FD | 	jmp	#LR__1682
13a3c                 | LR__1671
13a3c     A7 16 02 FB | 	rdlong	arg03, fp
13a40     0C 4E 05 F1 | 	add	fp, #12
13a44     A7 16 62 FC | 	wrlong	arg03, fp
13a48     0C 4E 85 F1 | 	sub	fp, #12
13a4c     88 7D BF FD | 	call	#_pop
13a50     FF 16 02 F6 | 	mov	arg03, result3
13a54     A7 FA 61 FC | 	wrlong	result1, fp
13a58     04 4E 05 F1 | 	add	fp, #4
13a5c     A7 FC 61 FC | 	wrlong	result2, fp
13a60     04 4E 05 F1 | 	add	fp, #4
13a64     A7 16 62 FC | 	wrlong	arg03, fp
13a68                 | ' filename=t1.result.sresult
13a68                 | ' t1=pop()
13a68                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13a68     08 4E 85 F1 | 	sub	fp, #8
13a6c     2B 16 0E F2 | 	cmp	arg03, #43 wz
13a70     18 00 90 5D |  if_ne	jmp	#LR__1672
13a74     A7 12 02 FB | 	rdlong	arg01, fp
13a78     D4 7E BF FD | 	call	#_convertstring
13a7c     A7 FA 61 FC | 	wrlong	result1, fp
13a80     08 4E 05 F1 | 	add	fp, #8
13a84     A7 3E 68 FC | 	wrlong	#31, fp
13a88     08 4E 85 F1 | 	sub	fp, #8
13a8c                 | LR__1672
13a8c     14 4E 05 F1 | 	add	fp, #20
13a90     A7 00 68 FC | 	wrlong	#0, fp
13a94                 | ' mode=0
13a94                 | ' if t1.result_type=result_string then
13a94     0C 4E 85 F1 | 	sub	fp, #12
13a98     A7 14 02 FB | 	rdlong	arg02, fp
13a9c     08 4E 85 F1 | 	sub	fp, #8
13aa0     1F 14 0E F2 | 	cmp	arg02, #31 wz
13aa4     64 00 90 5D |  if_ne	jmp	#LR__1673
13aa8                 | '   if t1.result.sresult="read" then mode=1
13aa8     A7 12 02 FB | 	rdlong	arg01, fp
13aac     8D 01 00 FF 
13ab0     47 14 06 F6 | 	mov	arg02, ##@LR__5589
13ab4     F4 DA B0 FD | 	call	#__system___string_cmp
13ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
13abc     14 4E 05 A1 |  if_e	add	fp, #20
13ac0     A7 02 68 AC |  if_e	wrlong	#1, fp
13ac4     14 4E 85 A1 |  if_e	sub	fp, #20
13ac8                 | '   if t1.result.sresult="write" then mode=2
13ac8     A7 12 02 FB | 	rdlong	arg01, fp
13acc     8D 01 00 FF 
13ad0     4C 14 06 F6 | 	mov	arg02, ##@LR__5590
13ad4     D4 DA B0 FD | 	call	#__system___string_cmp
13ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
13adc     14 4E 05 A1 |  if_e	add	fp, #20
13ae0     A7 04 68 AC |  if_e	wrlong	#2, fp
13ae4     14 4E 85 A1 |  if_e	sub	fp, #20
13ae8                 | '   if t1.result.sresult="append" then mode=4
13ae8     A7 12 02 FB | 	rdlong	arg01, fp
13aec     8D 01 00 FF 
13af0     52 14 06 F6 | 	mov	arg02, ##@LR__5591
13af4     B4 DA B0 FD | 	call	#__system___string_cmp
13af8     00 FA 0D F2 | 	cmp	result1, #0 wz
13afc     14 4E 05 A1 |  if_e	add	fp, #20
13b00     A7 08 68 AC |  if_e	wrlong	#4, fp
13b04     14 4E 85 A1 |  if_e	sub	fp, #20
13b08     14 00 90 FD | 	jmp	#LR__1674
13b0c                 | LR__1673
13b0c     A7 12 02 F6 | 	mov	arg01, fp
13b10     A8 7E BF FD | 	call	#_converttoint
13b14     14 4E 05 F1 | 	add	fp, #20
13b18     A7 FA 61 FC | 	wrlong	result1, fp
13b1c     14 4E 85 F1 | 	sub	fp, #20
13b20                 | LR__1674
13b20     B4 7C BF FD | 	call	#_pop
13b24     FF 16 02 F6 | 	mov	arg03, result3
13b28     A7 FA 61 FC | 	wrlong	result1, fp
13b2c     04 4E 05 F1 | 	add	fp, #4
13b30     A7 FC 61 FC | 	wrlong	result2, fp
13b34     04 4E 05 F1 | 	add	fp, #4
13b38     A7 16 62 FC | 	wrlong	arg03, fp
13b3c                 | ' t1=pop()
13b3c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
13b3c     08 4E 85 F1 | 	sub	fp, #8
13b40     2C 16 0E F2 | 	cmp	arg03, #44 wz
13b44     44 00 90 AD |  if_e	jmp	#LR__1675
13b48     00 12 06 F6 | 	mov	arg01, #0
13b4c     60 37 B1 FD | 	call	#__system___getiolock_0568
13b50     FD 12 02 F6 | 	mov	arg01, result1
13b54     2C DA B0 FD | 	call	#__system___lockmem
13b58     8D 01 00 FF 
13b5c     59 14 06 F6 | 	mov	arg02, ##@LR__5592
13b60     00 12 06 F6 | 	mov	arg01, #0
13b64     00 16 06 F6 | 	mov	arg03, #0
13b68     0C E7 B0 FD | 	call	#__system___basic_print_string
13b6c     00 12 06 F6 | 	mov	arg01, #0
13b70     0A 14 06 F6 | 	mov	arg02, #10
13b74     00 16 06 F6 | 	mov	arg03, #0
13b78     A4 E6 B0 FD | 	call	#__system___basic_print_char
13b7c     00 12 06 F6 | 	mov	arg01, #0
13b80     2C 37 B1 FD | 	call	#__system___getiolock_0568
13b84     FD 00 68 FC | 	wrlong	#0, result1
13b88     D8 00 90 FD | 	jmp	#LR__1682
13b8c                 | LR__1675
13b8c     A7 1E 02 FB | 	rdlong	local01, fp
13b90     18 4E 05 F1 | 	add	fp, #24
13b94     A7 1E 62 FC | 	wrlong	local01, fp
13b98                 | ' channel  = t1.result.iresult
13b98                 | ' select case  mode
13b98     04 4E 85 F1 | 	sub	fp, #4
13b9c     A7 20 02 FB | 	rdlong	local02, fp
13ba0     14 4E 85 F1 | 	sub	fp, #20
13ba4     01 20 86 F1 | 	sub	local02, #1
13ba8     04 20 26 F3 | 	fle	local02, #4
13bac     30 20 62 FD | 	jmprel	local02
13bb0                 | LR__1676
13bb0     10 00 90 FD | 	jmp	#LR__1677
13bb4     2C 00 90 FD | 	jmp	#LR__1678
13bb8     68 00 90 FD | 	jmp	#LR__1680
13bbc     44 00 90 FD | 	jmp	#LR__1679
13bc0     60 00 90 FD | 	jmp	#LR__1680
13bc4                 | LR__1677
13bc4     18 4E 05 F1 | 	add	fp, #24
13bc8     A7 12 02 FB | 	rdlong	arg01, fp
13bcc     0C 4E 85 F1 | 	sub	fp, #12
13bd0     A7 14 02 FB | 	rdlong	arg02, fp
13bd4     0C 4E 85 F1 | 	sub	fp, #12
13bd8     00 16 06 F6 | 	mov	arg03, #0
13bdc     A8 E5 B0 FD | 	call	#__system___basic_open_string
13be0     80 00 90 FD | 	jmp	#LR__1681
13be4                 | LR__1678
13be4     18 4E 05 F1 | 	add	fp, #24
13be8     A7 12 02 FB | 	rdlong	arg01, fp
13bec     0C 4E 85 F1 | 	sub	fp, #12
13bf0     A7 14 02 FB | 	rdlong	arg02, fp
13bf4     0C 4E 85 F1 | 	sub	fp, #12
13bf8     0D 16 06 F6 | 	mov	arg03, #13
13bfc     88 E5 B0 FD | 	call	#__system___basic_open_string
13c00     60 00 90 FD | 	jmp	#LR__1681
13c04                 | LR__1679
13c04     18 4E 05 F1 | 	add	fp, #24
13c08     A7 12 02 FB | 	rdlong	arg01, fp
13c0c     0C 4E 85 F1 | 	sub	fp, #12
13c10     A7 14 02 FB | 	rdlong	arg02, fp
13c14     0C 4E 85 F1 | 	sub	fp, #12
13c18     25 16 06 F6 | 	mov	arg03, #37
13c1c     68 E5 B0 FD | 	call	#__system___basic_open_string
13c20     40 00 90 FD | 	jmp	#LR__1681
13c24                 | LR__1680
13c24     00 12 06 F6 | 	mov	arg01, #0
13c28     84 36 B1 FD | 	call	#__system___getiolock_0568
13c2c     FD 12 02 F6 | 	mov	arg01, result1
13c30     50 D9 B0 FD | 	call	#__system___lockmem
13c34     8D 01 00 FF 
13c38     6B 14 06 F6 | 	mov	arg02, ##@LR__5593
13c3c     00 12 06 F6 | 	mov	arg01, #0
13c40     00 16 06 F6 | 	mov	arg03, #0
13c44     30 E6 B0 FD | 	call	#__system___basic_print_string
13c48     00 12 06 F6 | 	mov	arg01, #0
13c4c     0A 14 06 F6 | 	mov	arg02, #10
13c50     00 16 06 F6 | 	mov	arg03, #0
13c54     C8 E5 B0 FD | 	call	#__system___basic_print_char
13c58     00 12 06 F6 | 	mov	arg01, #0
13c5c     50 36 B1 FD | 	call	#__system___getiolock_0568
13c60     FD 00 68 FC | 	wrlong	#0, result1
13c64                 | LR__1681
13c64                 | LR__1682
13c64     A7 F0 03 F6 | 	mov	ptra, fp
13c68     B2 00 A0 FD | 	call	#popregs_
13c6c                 | _do_open_ret
13c6c     2D 00 64 FD | 	ret
13c70                 | 
13c70                 | ' 
13c70                 | ' '-------------------- paper
13c70                 | ' 
13c70                 | ' sub do_paper
13c70                 | _do_paper
13c70     03 4A 05 F6 | 	mov	COUNT_, #3
13c74     A8 00 A0 FD | 	call	#pushregs_
13c78     5C 7B BF FD | 	call	#_pop
13c7c     FD 1E 02 F6 | 	mov	local01, result1
13c80     FE 20 02 F6 | 	mov	local02, result2
13c84     FF 22 02 F6 | 	mov	local03, result3
13c88                 | ' t1=pop() 
13c88                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13c88     1E 22 0E F2 | 	cmp	local03, #30 wz
13c8c     10 00 90 5D |  if_ne	jmp	#LR__1690
13c90     0F 13 02 F6 | 	mov	arg01, local01
13c94     00 14 06 F6 | 	mov	arg02, #0
13c98     6C 0B B1 FD | 	call	#__system___float_tointeger
13c9c     FD 1E 02 F6 | 	mov	local01, result1
13ca0                 | LR__1690
13ca0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13ca0     1F 22 0E F2 | 	cmp	local03, #31 wz
13ca4     18 00 90 5D |  if_ne	jmp	#LR__1691
13ca8     0F 13 02 F6 | 	mov	arg01, local01
13cac     9C 0E B1 FD | 	call	#__system____builtin_atof
13cb0     FD 12 02 F6 | 	mov	arg01, result1
13cb4     00 14 06 F6 | 	mov	arg02, #0
13cb8     4C 0B B1 FD | 	call	#__system___float_tointeger
13cbc     FD 1E 02 F6 | 	mov	local01, result1
13cc0                 | LR__1691
13cc0     37 00 00 FF 
13cc4     38 E4 05 F1 | 	add	objptr, ##28216
13cc8     F2 1E 62 FC | 	wrlong	local01, objptr
13ccc     04 E4 05 F1 | 	add	objptr, #4
13cd0     F2 12 02 FB | 	rdlong	arg01, objptr
13cd4                 | ' 
13cd4                 | ' write_color:=ff
13cd4     36 00 00 FF 
13cd8     FB E5 85 F1 | 	sub	objptr, ##28155
13cdc     F2 12 62 FC | 	wrlong	arg01, objptr
13ce0                 | ' write_background:=bb
13ce0     04 E4 05 F1 | 	add	objptr, #4
13ce4     F2 1E 62 FC | 	wrlong	local01, objptr
13ce8     45 E4 85 F1 | 	sub	objptr, #69
13cec     A7 F0 03 F6 | 	mov	ptra, fp
13cf0     B2 00 A0 FD | 	call	#popregs_
13cf4                 | _do_paper_ret
13cf4     2D 00 64 FD | 	ret
13cf8                 | 
13cf8                 | ' 
13cf8                 | ' '-------------------- peek
13cf8                 | ' 
13cf8                 | ' sub do_peek
13cf8                 | _do_peek
13cf8     00 4A 05 F6 | 	mov	COUNT_, #0
13cfc     A8 00 A0 FD | 	call	#pushregs_
13d00     14 F0 07 F1 | 	add	ptra, #20
13d04     D0 7A BF FD | 	call	#_pop
13d08     A7 FA 61 FC | 	wrlong	result1, fp
13d0c     04 4E 05 F1 | 	add	fp, #4
13d10     A7 FC 61 FC | 	wrlong	result2, fp
13d14     04 4E 05 F1 | 	add	fp, #4
13d18     A7 FE 61 FC | 	wrlong	result3, fp
13d1c     08 4E 85 F1 | 	sub	fp, #8
13d20     A7 12 02 F6 | 	mov	arg01, fp
13d24     94 7C BF FD | 	call	#_converttoint
13d28     0C 4E 05 F1 | 	add	fp, #12
13d2c     A7 FA 61 FC | 	wrlong	result1, fp
13d30                 | ' 
13d30                 | ' t1=pop()
13d30                 | ' a=converttoint(t1)
13d30                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
13d30     0C 4E 85 F1 | 	sub	fp, #12
13d34     00 04 00 FF 
13d38     00 FA 15 F2 | 	cmp	result1, ##524288 wc
13d3c     1C 00 90 3D |  if_ae	jmp	#LR__1700
13d40     0C 4E 05 F1 | 	add	fp, #12
13d44     A7 12 02 FB | 	rdlong	arg01, fp
13d48     09 FB C1 FA | 	rdbyte	result1, arg01
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 FA 61 FC | 	wrlong	result1, fp
13d54     10 4E 85 F1 | 	sub	fp, #16
13d58     20 00 90 FD | 	jmp	#LR__1701
13d5c                 | LR__1700
13d5c     0C 4E 05 F1 | 	add	fp, #12
13d60     A7 12 02 FB | 	rdlong	arg01, fp
13d64     0C 4E 85 F1 | 	sub	fp, #12
13d68     BC A4 B0 FD | 	call	#_pspeek
13d6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
13d70     10 4E 05 F1 | 	add	fp, #16
13d74     A7 FA 61 FC | 	wrlong	result1, fp
13d78     10 4E 85 F1 | 	sub	fp, #16
13d7c                 | LR__1701
13d7c     08 4E 05 F1 | 	add	fp, #8
13d80     A7 3A 68 FC | 	wrlong	#29, fp
13d84     08 4E 05 F1 | 	add	fp, #8
13d88     A7 12 02 FB | 	rdlong	arg01, fp
13d8c     10 4E 85 F1 | 	sub	fp, #16
13d90     A7 12 62 FC | 	wrlong	arg01, fp
13d94     A7 12 02 F6 | 	mov	arg01, fp
13d98     D4 7A BF FD | 	call	#_push
13d9c     A7 F0 03 F6 | 	mov	ptra, fp
13da0     B2 00 A0 FD | 	call	#popregs_
13da4                 | _do_peek_ret
13da4     2D 00 64 FD | 	ret
13da8                 | 
13da8                 | ' 
13da8                 | ' '-------------------- pinfloat
13da8                 | ' 
13da8                 | ' sub do_pinfloat
13da8                 | _do_pinfloat
13da8     00 4A 05 F6 | 	mov	COUNT_, #0
13dac     A8 00 A0 FD | 	call	#pushregs_
13db0     0C F0 07 F1 | 	add	ptra, #12
13db4     20 7A BF FD | 	call	#_pop
13db8     A7 FA 61 FC | 	wrlong	result1, fp
13dbc     04 4E 05 F1 | 	add	fp, #4
13dc0     A7 FC 61 FC | 	wrlong	result2, fp
13dc4     04 4E 05 F1 | 	add	fp, #4
13dc8     A7 FE 61 FC | 	wrlong	result3, fp
13dcc     08 4E 85 F1 | 	sub	fp, #8
13dd0     A7 12 02 F6 | 	mov	arg01, fp
13dd4     E4 7B BF FD | 	call	#_converttoint
13dd8     50 FA 61 FD | 	fltl	result1
13ddc     A7 F0 03 F6 | 	mov	ptra, fp
13de0     B2 00 A0 FD | 	call	#popregs_
13de4                 | _do_pinfloat_ret
13de4     2D 00 64 FD | 	ret
13de8                 | 
13de8                 | ' 
13de8                 | ' '-------------------- pinhi
13de8                 | ' 
13de8                 | ' sub do_pinhi
13de8                 | _do_pinhi
13de8     00 4A 05 F6 | 	mov	COUNT_, #0
13dec     A8 00 A0 FD | 	call	#pushregs_
13df0     0C F0 07 F1 | 	add	ptra, #12
13df4     E0 79 BF FD | 	call	#_pop
13df8     A7 FA 61 FC | 	wrlong	result1, fp
13dfc     04 4E 05 F1 | 	add	fp, #4
13e00     A7 FC 61 FC | 	wrlong	result2, fp
13e04     04 4E 05 F1 | 	add	fp, #4
13e08     A7 FE 61 FC | 	wrlong	result3, fp
13e0c     08 4E 85 F1 | 	sub	fp, #8
13e10     A7 12 02 F6 | 	mov	arg01, fp
13e14     A4 7B BF FD | 	call	#_converttoint
13e18     59 FA 61 FD | 	drvh	result1
13e1c     A7 F0 03 F6 | 	mov	ptra, fp
13e20     B2 00 A0 FD | 	call	#popregs_
13e24                 | _do_pinhi_ret
13e24     2D 00 64 FD | 	ret
13e28                 | 
13e28                 | ' 
13e28                 | ' '-------------------- pinlo
13e28                 | ' 
13e28                 | ' sub do_pinlo
13e28                 | _do_pinlo
13e28     00 4A 05 F6 | 	mov	COUNT_, #0
13e2c     A8 00 A0 FD | 	call	#pushregs_
13e30     0C F0 07 F1 | 	add	ptra, #12
13e34     A0 79 BF FD | 	call	#_pop
13e38     A7 FA 61 FC | 	wrlong	result1, fp
13e3c     04 4E 05 F1 | 	add	fp, #4
13e40     A7 FC 61 FC | 	wrlong	result2, fp
13e44     04 4E 05 F1 | 	add	fp, #4
13e48     A7 FE 61 FC | 	wrlong	result3, fp
13e4c     08 4E 85 F1 | 	sub	fp, #8
13e50     A7 12 02 F6 | 	mov	arg01, fp
13e54     64 7B BF FD | 	call	#_converttoint
13e58     58 FA 61 FD | 	drvl	result1
13e5c     A7 F0 03 F6 | 	mov	ptra, fp
13e60     B2 00 A0 FD | 	call	#popregs_
13e64                 | _do_pinlo_ret
13e64     2D 00 64 FD | 	ret
13e68                 | 
13e68                 | ' 
13e68                 | ' '-------------------- pinread
13e68                 | ' 
13e68                 | ' sub do_pinread
13e68                 | _do_pinread
13e68     00 4A 05 F6 | 	mov	COUNT_, #0
13e6c     A8 00 A0 FD | 	call	#pushregs_
13e70     0C F0 07 F1 | 	add	ptra, #12
13e74     60 79 BF FD | 	call	#_pop
13e78     A7 FA 61 FC | 	wrlong	result1, fp
13e7c     04 4E 05 F1 | 	add	fp, #4
13e80     A7 FC 61 FC | 	wrlong	result2, fp
13e84     04 4E 05 F1 | 	add	fp, #4
13e88     A7 FE 61 FC | 	wrlong	result3, fp
13e8c     08 4E 85 F1 | 	sub	fp, #8
13e90     A7 12 02 F6 | 	mov	arg01, fp
13e94     24 7B BF FD | 	call	#_converttoint
13e98     FD 12 02 F6 | 	mov	arg01, result1
13e9c     20 12 CE F7 | 	test	arg01, #32 wz
13ea0     FF FB 01 56 |  if_ne	mov	result1, inb
13ea4     FE FB 01 A6 |  if_e	mov	result1, ina
13ea8     09 FB 41 F0 | 	shr	result1, arg01
13eac     06 12 46 F0 | 	shr	arg01, #6
13eb0     09 FB 41 F7 | 	zerox	result1, arg01
13eb4     52 00 00 FF 
13eb8     1C E4 05 F1 | 	add	objptr, ##42012
13ebc     F2 FA 61 FC | 	wrlong	result1, objptr
13ec0     52 00 00 FF 
13ec4     1C E4 85 F1 | 	sub	objptr, ##42012
13ec8     08 4E 05 F1 | 	add	fp, #8
13ecc     A7 3A 68 FC | 	wrlong	#29, fp
13ed0     08 4E 85 F1 | 	sub	fp, #8
13ed4     A7 08 68 FC | 	wrlong	#4, fp
13ed8     A7 12 02 F6 | 	mov	arg01, fp
13edc     90 79 BF FD | 	call	#_push
13ee0     A7 F0 03 F6 | 	mov	ptra, fp
13ee4     B2 00 A0 FD | 	call	#popregs_
13ee8                 | _do_pinread_ret
13ee8     2D 00 64 FD | 	ret
13eec                 | 
13eec                 | ' 
13eec                 | ' '-------------------- pinstart
13eec                 | ' 
13eec                 | ' sub do_pinstart
13eec                 | _do_pinstart
13eec     03 4A 05 F6 | 	mov	COUNT_, #3
13ef0     A8 00 A0 FD | 	call	#pushregs_
13ef4     30 F0 07 F1 | 	add	ptra, #48
13ef8     DC 78 BF FD | 	call	#_pop
13efc     FD 16 02 F6 | 	mov	arg03, result1
13f00     FE 14 02 F6 | 	mov	arg02, result2
13f04     FF 18 02 F6 | 	mov	arg04, result3
13f08     A7 16 62 FC | 	wrlong	arg03, fp
13f0c     04 4E 05 F1 | 	add	fp, #4
13f10     A7 14 62 FC | 	wrlong	arg02, fp
13f14     04 4E 05 F1 | 	add	fp, #4
13f18     A7 18 62 FC | 	wrlong	arg04, fp
13f1c     08 4E 85 F1 | 	sub	fp, #8
13f20     B4 78 BF FD | 	call	#_pop
13f24     FD 16 02 F6 | 	mov	arg03, result1
13f28     FE 14 02 F6 | 	mov	arg02, result2
13f2c     FF 18 02 F6 | 	mov	arg04, result3
13f30     0C 4E 05 F1 | 	add	fp, #12
13f34     A7 16 62 FC | 	wrlong	arg03, fp
13f38     04 4E 05 F1 | 	add	fp, #4
13f3c     A7 14 62 FC | 	wrlong	arg02, fp
13f40     04 4E 05 F1 | 	add	fp, #4
13f44     A7 18 62 FC | 	wrlong	arg04, fp
13f48     14 4E 85 F1 | 	sub	fp, #20
13f4c     88 78 BF FD | 	call	#_pop
13f50     FD 16 02 F6 | 	mov	arg03, result1
13f54     FE 14 02 F6 | 	mov	arg02, result2
13f58     FF 18 02 F6 | 	mov	arg04, result3
13f5c     18 4E 05 F1 | 	add	fp, #24
13f60     A7 16 62 FC | 	wrlong	arg03, fp
13f64     04 4E 05 F1 | 	add	fp, #4
13f68     A7 14 62 FC | 	wrlong	arg02, fp
13f6c     04 4E 05 F1 | 	add	fp, #4
13f70     A7 18 62 FC | 	wrlong	arg04, fp
13f74     20 4E 85 F1 | 	sub	fp, #32
13f78     5C 78 BF FD | 	call	#_pop
13f7c     FF 16 02 F6 | 	mov	arg03, result3
13f80     24 4E 05 F1 | 	add	fp, #36
13f84     A7 FA 61 FC | 	wrlong	result1, fp
13f88     04 4E 05 F1 | 	add	fp, #4
13f8c     A7 FC 61 FC | 	wrlong	result2, fp
13f90     04 4E 05 F1 | 	add	fp, #4
13f94     A7 16 62 FC | 	wrlong	arg03, fp
13f98     08 4E 85 F1 | 	sub	fp, #8
13f9c     A7 12 02 F6 | 	mov	arg01, fp
13fa0     24 4E 85 F1 | 	sub	fp, #36
13fa4     14 7A BF FD | 	call	#_converttoint
13fa8     FD 1E 02 F6 | 	mov	local01, result1
13fac     18 4E 05 F1 | 	add	fp, #24
13fb0     A7 12 02 F6 | 	mov	arg01, fp
13fb4     18 4E 85 F1 | 	sub	fp, #24
13fb8     00 7A BF FD | 	call	#_converttoint
13fbc     FD 20 02 F6 | 	mov	local02, result1
13fc0     0C 4E 05 F1 | 	add	fp, #12
13fc4     A7 12 02 F6 | 	mov	arg01, fp
13fc8     0C 4E 85 F1 | 	sub	fp, #12
13fcc     EC 79 BF FD | 	call	#_converttoint
13fd0     FD 22 02 F6 | 	mov	local03, result1
13fd4     A7 12 02 F6 | 	mov	arg01, fp
13fd8     E0 79 BF FD | 	call	#_converttoint
13fdc     40 1E 62 FD | 	dirl	local01
13fe0     0F 21 02 FC | 	wrpin	local02, local01
13fe4     0F 23 12 FC | 	wxpin	local03, local01
13fe8     0F FB 21 FC | 	wypin	result1, local01
13fec     41 1E 62 FD | 	dirh	local01
13ff0     A7 F0 03 F6 | 	mov	ptra, fp
13ff4     B2 00 A0 FD | 	call	#popregs_
13ff8                 | _do_pinstart_ret
13ff8     2D 00 64 FD | 	ret
13ffc                 | 
13ffc                 | ' 
13ffc                 | ' '-------------------- pintoggle
13ffc                 | ' 
13ffc                 | ' sub do_pintoggle
13ffc                 | _do_pintoggle
13ffc     00 4A 05 F6 | 	mov	COUNT_, #0
14000     A8 00 A0 FD | 	call	#pushregs_
14004     0C F0 07 F1 | 	add	ptra, #12
14008     CC 77 BF FD | 	call	#_pop
1400c     A7 FA 61 FC | 	wrlong	result1, fp
14010     04 4E 05 F1 | 	add	fp, #4
14014     A7 FC 61 FC | 	wrlong	result2, fp
14018     04 4E 05 F1 | 	add	fp, #4
1401c     A7 FE 61 FC | 	wrlong	result3, fp
14020     08 4E 85 F1 | 	sub	fp, #8
14024     A7 12 02 F6 | 	mov	arg01, fp
14028     90 79 BF FD | 	call	#_converttoint
1402c     5F FA 61 FD | 	drvnot	result1
14030     A7 F0 03 F6 | 	mov	ptra, fp
14034     B2 00 A0 FD | 	call	#popregs_
14038                 | _do_pintoggle_ret
14038     2D 00 64 FD | 	ret
1403c                 | 
1403c                 | ' 
1403c                 | ' '-------------------- pinwrite
1403c                 | ' 
1403c                 | ' sub do_pinwrite
1403c                 | _do_pinwrite
1403c     01 4A 05 F6 | 	mov	COUNT_, #1
14040     A8 00 A0 FD | 	call	#pushregs_
14044     18 F0 07 F1 | 	add	ptra, #24
14048     8C 77 BF FD | 	call	#_pop
1404c     FD 14 02 F6 | 	mov	arg02, result1
14050     FE 12 02 F6 | 	mov	arg01, result2
14054     FF 1E 02 F6 | 	mov	local01, result3
14058     A7 14 62 FC | 	wrlong	arg02, fp
1405c     04 4E 05 F1 | 	add	fp, #4
14060     A7 12 62 FC | 	wrlong	arg01, fp
14064     04 4E 05 F1 | 	add	fp, #4
14068     A7 1E 62 FC | 	wrlong	local01, fp
1406c     08 4E 85 F1 | 	sub	fp, #8
14070     64 77 BF FD | 	call	#_pop
14074     FF 1E 02 F6 | 	mov	local01, result3
14078     0C 4E 05 F1 | 	add	fp, #12
1407c     A7 FA 61 FC | 	wrlong	result1, fp
14080     04 4E 05 F1 | 	add	fp, #4
14084     A7 FC 61 FC | 	wrlong	result2, fp
14088     04 4E 05 F1 | 	add	fp, #4
1408c     A7 1E 62 FC | 	wrlong	local01, fp
14090     08 4E 85 F1 | 	sub	fp, #8
14094     A7 12 02 F6 | 	mov	arg01, fp
14098     0C 4E 85 F1 | 	sub	fp, #12
1409c     1C 79 BF FD | 	call	#_converttoint
140a0     FD 1E 02 F6 | 	mov	local01, result1
140a4     A7 12 02 F6 | 	mov	arg01, fp
140a8     10 79 BF FD | 	call	#_converttoint
140ac     FD 14 02 F6 | 	mov	arg02, result1
140b0     0F 13 02 F6 | 	mov	arg01, local01
140b4     80 D6 B0 FD | 	call	#__system___pinwrite
140b8     A7 F0 03 F6 | 	mov	ptra, fp
140bc     B2 00 A0 FD | 	call	#popregs_
140c0                 | _do_pinwrite_ret
140c0     2D 00 64 FD | 	ret
140c4                 | 
140c4                 | ' 
140c4                 | ' '-------------------- play
140c4                 | ' 
140c4                 | ' sub do_play
140c4                 | _do_play
140c4     08 4A 05 F6 | 	mov	COUNT_, #8
140c8     A8 00 A0 FD | 	call	#pushregs_
140cc     7C F0 07 F1 | 	add	ptra, #124
140d0     68 4E 05 F1 | 	add	fp, #104
140d4     77 CC A1 FF 
140d8     A7 7C 6B FC | 	wrlong	##1134096318, fp
140dc                 | ' speed_coeff=305.873
140dc                 | ' 
140dc                 | ' for i=0 to 8 : params(i)=-2.0 : next i
140dc     64 4E 85 F1 | 	sub	fp, #100
140e0     A7 00 68 FC | 	wrlong	#0, fp
140e4     97 18 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
140e8                 | LR__1710
140e8     A7 16 02 FB | 	rdlong	arg03, fp
140ec     02 16 66 F0 | 	shl	arg03, #2
140f0     34 4E 05 F1 | 	add	fp, #52
140f4     A7 16 02 F1 | 	add	arg03, fp
140f8     00 00 E0 FF 
140fc     0B 01 68 FC | 	wrlong	##-1073741824, arg03
14100     34 4E 85 F1 | 	sub	fp, #52
14104     A7 1E 02 FB | 	rdlong	local01, fp
14108     01 1E 06 F1 | 	add	local01, #1
1410c     A7 1E 62 FC | 	wrlong	local01, fp
14110     09 1E 56 F2 | 	cmps	local01, #9 wc
14114     D0 FF 9F CD |  if_b	jmp	#LR__1710
14118                 | LR__1711
14118     04 4E 85 F1 | 	sub	fp, #4
1411c     4A 00 00 FF 
14120     80 E4 05 F1 | 	add	objptr, ##38016
14124     F2 20 02 FB | 	rdlong	local02, objptr
14128     10 23 02 F6 | 	mov	local03, local02
1412c     01 22 66 F0 | 	shl	local03, #1
14130     10 23 02 F1 | 	add	local03, local02
14134     02 22 66 F0 | 	shl	local03, #2
14138     03 00 00 FF 
1413c     04 E4 85 F1 | 	sub	objptr, ##1540
14140     F2 22 02 F1 | 	add	local03, objptr
14144     11 25 02 FB | 	rdlong	local04, local03
14148     A7 24 62 FC | 	wrlong	local04, fp
1414c                 | ' numpar=compiledline(lineptr_e).result.uresult
1414c                 | ' for i=numpar to 1 step -1 
1414c     04 4E 05 F1 | 	add	fp, #4
14150     A7 24 62 FC | 	wrlong	local04, fp
14154     04 4E 85 F1 | 	sub	fp, #4
14158     47 00 00 FF 
1415c     7C E4 85 F1 | 	sub	objptr, ##36476
14160                 | LR__1712
14160     74 76 BF FD | 	call	#_pop
14164     5C 4E 05 F1 | 	add	fp, #92
14168     A7 FA 61 FC | 	wrlong	result1, fp
1416c     04 4E 05 F1 | 	add	fp, #4
14170     A7 FC 61 FC | 	wrlong	result2, fp
14174     04 4E 05 F1 | 	add	fp, #4
14178     A7 FE 61 FC | 	wrlong	result3, fp
1417c     60 4E 85 F1 | 	sub	fp, #96
14180     A7 22 02 FB | 	rdlong	local03, fp
14184     01 22 86 F1 | 	sub	local03, #1
14188     02 22 66 F0 | 	shl	local03, #2
1418c     34 4E 05 F1 | 	add	fp, #52
14190     A7 22 02 F1 | 	add	local03, fp
14194     24 4E 05 F1 | 	add	fp, #36
14198     A7 26 02 F6 | 	mov	local05, fp
1419c     13 13 02 F6 | 	mov	arg01, local05
141a0     5C 4E 85 F1 | 	sub	fp, #92
141a4     D0 78 BF FD | 	call	#_converttofloat
141a8     11 FB 61 FC | 	wrlong	result1, local03
141ac     04 4E 05 F1 | 	add	fp, #4
141b0     A7 1E 02 FB | 	rdlong	local01, fp
141b4     01 1E 86 F1 | 	sub	local01, #1
141b8     A7 1E 62 FC | 	wrlong	local01, fp
141bc     04 4E 85 F1 | 	sub	fp, #4
141c0     01 1E 56 F2 | 	cmps	local01, #1 wc
141c4     98 FF 9F 3D |  if_ae	jmp	#LR__1712
141c8                 | ' 
141c8                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
141c8     38 4E 05 F1 | 	add	fp, #56
141cc     A7 12 02 FB | 	rdlong	arg01, fp
141d0     38 4E 85 F1 | 	sub	fp, #56
141d4     00 14 06 F6 | 	mov	arg02, #0
141d8     01 16 06 F6 | 	mov	arg03, #1
141dc     94 05 B1 FD | 	call	#__system___float_cmp
141e0     00 FA 55 F2 | 	cmps	result1, #0 wc
141e4     0C 4E 05 C1 |  if_b	add	fp, #12
141e8     A7 00 68 CC |  if_b	wrlong	#0, fp
141ec     0C 4E 85 C1 |  if_b	sub	fp, #12
141f0     2C 00 90 CD |  if_b	jmp	#LR__1713
141f4     38 4E 05 F1 | 	add	fp, #56
141f8     A7 12 02 FB | 	rdlong	arg01, fp
141fc     38 4E 85 F1 | 	sub	fp, #56
14200     01 14 06 F6 | 	mov	arg02, #1
14204     00 06 B1 FD | 	call	#__system___float_tointeger
14208     FD 1E 52 F6 | 	abs	local01, result1 wc
1420c     07 1E 06 F5 | 	and	local01, #7
14210     0F 1F 82 F6 | 	negc	local01, local01
14214     0C 4E 05 F1 | 	add	fp, #12
14218     A7 1E 62 FC | 	wrlong	local01, fp
1421c     0C 4E 85 F1 | 	sub	fp, #12
14220                 | LR__1713
14220                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
14220     3C 4E 05 F1 | 	add	fp, #60
14224     A7 12 02 FB | 	rdlong	arg01, fp
14228     3C 4E 85 F1 | 	sub	fp, #60
1422c     00 14 06 F6 | 	mov	arg02, #0
14230     01 16 06 F6 | 	mov	arg03, #1
14234     3C 05 B1 FD | 	call	#__system___float_cmp
14238     00 FA 55 F2 | 	cmps	result1, #0 wc
1423c     40 00 90 3D |  if_ae	jmp	#LR__1714
14240     0C 4E 05 F1 | 	add	fp, #12
14244     A7 20 02 FB | 	rdlong	local02, fp
14248     10 23 02 F6 | 	mov	local03, local02
1424c     01 22 66 F0 | 	shl	local03, #1
14250     10 23 02 F1 | 	add	local03, local02
14254     03 22 66 F0 | 	shl	local03, #3
14258     14 00 00 FF 
1425c     38 E5 05 F1 | 	add	objptr, ##10552
14260     F2 22 02 F1 | 	add	local03, objptr
14264     11 29 02 FB | 	rdlong	local06, local03
14268     60 4E 05 F1 | 	add	fp, #96
1426c     A7 28 62 FC | 	wrlong	local06, fp
14270     6C 4E 85 F1 | 	sub	fp, #108
14274     14 00 00 FF 
14278     38 E5 85 F1 | 	sub	objptr, ##10552
1427c     44 00 90 FD | 	jmp	#LR__1715
14280                 | LR__1714
14280     3C 4E 05 F1 | 	add	fp, #60
14284     A7 24 02 FB | 	rdlong	local04, fp
14288     30 4E 05 F1 | 	add	fp, #48
1428c     A7 24 62 FC | 	wrlong	local04, fp
14290     60 4E 85 F1 | 	sub	fp, #96
14294     A7 20 02 FB | 	rdlong	local02, fp
14298     10 23 02 F6 | 	mov	local03, local02
1429c     01 22 66 F0 | 	shl	local03, #1
142a0     10 23 02 F1 | 	add	local03, local02
142a4     03 22 66 F0 | 	shl	local03, #3
142a8     14 00 00 FF 
142ac     38 E5 05 F1 | 	add	objptr, ##10552
142b0     F2 22 02 F1 | 	add	local03, objptr
142b4     0C 4E 85 F1 | 	sub	fp, #12
142b8     11 25 62 FC | 	wrlong	local04, local03
142bc     14 00 00 FF 
142c0     38 E5 85 F1 | 	sub	objptr, ##10552
142c4                 | LR__1715
142c4                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
142c4     40 4E 05 F1 | 	add	fp, #64
142c8     A7 12 02 FB | 	rdlong	arg01, fp
142cc     40 4E 85 F1 | 	sub	fp, #64
142d0     00 14 06 F6 | 	mov	arg02, #0
142d4     01 16 06 F6 | 	mov	arg03, #1
142d8     98 04 B1 FD | 	call	#__system___float_cmp
142dc     00 FA 55 F2 | 	cmps	result1, #0 wc
142e0     24 00 90 CD |  if_b	jmp	#LR__1716
142e4     40 4E 05 F1 | 	add	fp, #64
142e8     A7 12 02 FB | 	rdlong	arg01, fp
142ec     40 4E 85 F1 | 	sub	fp, #64
142f0     20 0E 23 FF 
142f4     00 14 06 F6 | 	mov	arg02, ##1176256512
142f8     01 16 66 F6 | 	neg	arg03, #1
142fc     74 04 B1 FD | 	call	#__system___float_cmp
14300     01 FA 55 F2 | 	cmps	result1, #1 wc
14304     48 00 90 CD |  if_b	jmp	#LR__1717
14308                 | LR__1716
14308     0C 4E 05 F1 | 	add	fp, #12
1430c     A7 22 02 FB | 	rdlong	local03, fp
14310     11 2B 02 F6 | 	mov	local07, local03
14314     01 2A 66 F0 | 	shl	local07, #1
14318     11 2B 02 F1 | 	add	local07, local03
1431c     03 2A 66 F0 | 	shl	local07, #3
14320     14 00 00 FF 
14324     38 E5 05 F1 | 	add	objptr, ##10552
14328     F2 2A 02 F1 | 	add	local07, objptr
1432c     06 2A 06 F1 | 	add	local07, #6
14330     15 27 E2 FA | 	rdword	local05, local07
14334     13 25 32 F9 | 	getword	local04, local05, #0
14338     1C 4E 05 F1 | 	add	fp, #28
1433c     A7 24 62 FC | 	wrlong	local04, fp
14340     28 4E 85 F1 | 	sub	fp, #40
14344     14 00 00 FF 
14348     38 E5 85 F1 | 	sub	objptr, ##10552
1434c     54 00 90 FD | 	jmp	#LR__1718
14350                 | LR__1717
14350     40 4E 05 F1 | 	add	fp, #64
14354     A7 12 02 FB | 	rdlong	arg01, fp
14358     40 4E 85 F1 | 	sub	fp, #64
1435c     01 14 06 F6 | 	mov	arg02, #1
14360     A4 04 B1 FD | 	call	#__system___float_tointeger
14364     28 4E 05 F1 | 	add	fp, #40
14368     A7 FA 61 FC | 	wrlong	result1, fp
1436c     1C 4E 85 F1 | 	sub	fp, #28
14370     A7 20 02 FB | 	rdlong	local02, fp
14374     10 23 02 F6 | 	mov	local03, local02
14378     01 22 66 F0 | 	shl	local03, #1
1437c     10 23 02 F1 | 	add	local03, local02
14380     03 22 66 F0 | 	shl	local03, #3
14384     14 00 00 FF 
14388     38 E5 05 F1 | 	add	objptr, ##10552
1438c     F2 22 02 F1 | 	add	local03, objptr
14390     0C 4E 85 F1 | 	sub	fp, #12
14394     06 22 06 F1 | 	add	local03, #6
14398     11 FB 51 FC | 	wrword	result1, local03
1439c     14 00 00 FF 
143a0     38 E5 85 F1 | 	sub	objptr, ##10552
143a4                 | LR__1718
143a4                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
143a4     44 4E 05 F1 | 	add	fp, #68
143a8     A7 12 02 FB | 	rdlong	arg01, fp
143ac     44 4E 85 F1 | 	sub	fp, #68
143b0     00 14 06 F6 | 	mov	arg02, #0
143b4     01 16 06 F6 | 	mov	arg03, #1
143b8     B8 03 B1 FD | 	call	#__system___float_cmp
143bc     00 FA 55 F2 | 	cmps	result1, #0 wc
143c0     24 00 90 CD |  if_b	jmp	#LR__1719
143c4     44 4E 05 F1 | 	add	fp, #68
143c8     A7 12 02 FB | 	rdlong	arg01, fp
143cc     44 4E 85 F1 | 	sub	fp, #68
143d0     89 C1 20 FF 
143d4     6F 14 06 F6 | 	mov	arg02, ##1099108975
143d8     01 16 66 F6 | 	neg	arg03, #1
143dc     94 03 B1 FD | 	call	#__system___float_cmp
143e0     01 FA 55 F2 | 	cmps	result1, #1 wc
143e4     44 00 90 CD |  if_b	jmp	#LR__1720
143e8                 | LR__1719
143e8     0C 4E 05 F1 | 	add	fp, #12
143ec     A7 20 02 FB | 	rdlong	local02, fp
143f0     10 23 02 F6 | 	mov	local03, local02
143f4     01 22 66 F0 | 	shl	local03, #1
143f8     10 23 02 F1 | 	add	local03, local02
143fc     03 22 66 F0 | 	shl	local03, #3
14400     14 00 00 FF 
14404     38 E5 05 F1 | 	add	objptr, ##10552
14408     F2 22 02 F1 | 	add	local03, objptr
1440c     0C 22 06 F1 | 	add	local03, #12
14410     11 29 02 FB | 	rdlong	local06, local03
14414     68 4E 05 F1 | 	add	fp, #104
14418     A7 28 62 FC | 	wrlong	local06, fp
1441c     74 4E 85 F1 | 	sub	fp, #116
14420     14 00 00 FF 
14424     38 E5 85 F1 | 	sub	objptr, ##10552
14428     48 00 90 FD | 	jmp	#LR__1721
1442c                 | LR__1720
1442c     44 4E 05 F1 | 	add	fp, #68
14430     A7 24 02 FB | 	rdlong	local04, fp
14434     30 4E 05 F1 | 	add	fp, #48
14438     A7 24 62 FC | 	wrlong	local04, fp
1443c     68 4E 85 F1 | 	sub	fp, #104
14440     A7 20 02 FB | 	rdlong	local02, fp
14444     10 23 02 F6 | 	mov	local03, local02
14448     01 22 66 F0 | 	shl	local03, #1
1444c     10 23 02 F1 | 	add	local03, local02
14450     03 22 66 F0 | 	shl	local03, #3
14454     14 00 00 FF 
14458     38 E5 05 F1 | 	add	objptr, ##10552
1445c     F2 22 02 F1 | 	add	local03, objptr
14460     0C 4E 85 F1 | 	sub	fp, #12
14464     0C 22 06 F1 | 	add	local03, #12
14468     11 25 62 FC | 	wrlong	local04, local03
1446c     14 00 00 FF 
14470     38 E5 85 F1 | 	sub	objptr, ##10552
14474                 | LR__1721
14474                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
14474     48 4E 05 F1 | 	add	fp, #72
14478     A7 12 02 FB | 	rdlong	arg01, fp
1447c     48 4E 85 F1 | 	sub	fp, #72
14480     00 14 06 F6 | 	mov	arg02, #0
14484     01 16 06 F6 | 	mov	arg03, #1
14488     E8 02 B1 FD | 	call	#__system___float_cmp
1448c     00 FA 55 F2 | 	cmps	result1, #0 wc
14490     24 00 90 CD |  if_b	jmp	#LR__1722
14494     48 4E 05 F1 | 	add	fp, #72
14498     A7 12 02 FB | 	rdlong	arg01, fp
1449c     48 4E 85 F1 | 	sub	fp, #72
144a0     00 00 21 FF 
144a4     00 14 06 F6 | 	mov	arg02, ##1107296256
144a8     01 16 66 F6 | 	neg	arg03, #1
144ac     C4 02 B1 FD | 	call	#__system___float_cmp
144b0     01 FA 55 F2 | 	cmps	result1, #1 wc
144b4     48 00 90 CD |  if_b	jmp	#LR__1723
144b8                 | LR__1722
144b8     0C 4E 05 F1 | 	add	fp, #12
144bc     A7 22 02 FB | 	rdlong	local03, fp
144c0     11 2B 02 F6 | 	mov	local07, local03
144c4     01 2A 66 F0 | 	shl	local07, #1
144c8     11 2B 02 F1 | 	add	local07, local03
144cc     03 2A 66 F0 | 	shl	local07, #3
144d0     14 00 00 FF 
144d4     38 E5 05 F1 | 	add	objptr, ##10552
144d8     F2 2A 02 F1 | 	add	local07, objptr
144dc     04 2A 06 F1 | 	add	local07, #4
144e0     15 27 C2 FA | 	rdbyte	local05, local07
144e4     13 25 E2 F8 | 	getbyte	local04, local05, #0
144e8     14 4E 05 F1 | 	add	fp, #20
144ec     A7 24 62 FC | 	wrlong	local04, fp
144f0     20 4E 85 F1 | 	sub	fp, #32
144f4     14 00 00 FF 
144f8     38 E5 85 F1 | 	sub	objptr, ##10552
144fc     54 00 90 FD | 	jmp	#LR__1724
14500                 | LR__1723
14500     48 4E 05 F1 | 	add	fp, #72
14504     A7 12 02 FB | 	rdlong	arg01, fp
14508     48 4E 85 F1 | 	sub	fp, #72
1450c     01 14 06 F6 | 	mov	arg02, #1
14510     F4 02 B1 FD | 	call	#__system___float_tointeger
14514     20 4E 05 F1 | 	add	fp, #32
14518     A7 FA 61 FC | 	wrlong	result1, fp
1451c     14 4E 85 F1 | 	sub	fp, #20
14520     A7 20 02 FB | 	rdlong	local02, fp
14524     10 23 02 F6 | 	mov	local03, local02
14528     01 22 66 F0 | 	shl	local03, #1
1452c     10 23 02 F1 | 	add	local03, local02
14530     03 22 66 F0 | 	shl	local03, #3
14534     14 00 00 FF 
14538     38 E5 05 F1 | 	add	objptr, ##10552
1453c     F2 22 02 F1 | 	add	local03, objptr
14540     0C 4E 85 F1 | 	sub	fp, #12
14544     04 22 06 F1 | 	add	local03, #4
14548     11 FB 41 FC | 	wrbyte	result1, local03
1454c     14 00 00 FF 
14550     38 E5 85 F1 | 	sub	objptr, ##10552
14554                 | LR__1724
14554                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
14554     4C 4E 05 F1 | 	add	fp, #76
14558     A7 12 02 FB | 	rdlong	arg01, fp
1455c     4C 4E 85 F1 | 	sub	fp, #76
14560     00 14 06 F6 | 	mov	arg02, #0
14564     01 16 06 F6 | 	mov	arg03, #1
14568     08 02 B1 FD | 	call	#__system___float_cmp
1456c     00 FA 55 F2 | 	cmps	result1, #0 wc
14570     24 00 90 CD |  if_b	jmp	#LR__1725
14574     4C 4E 05 F1 | 	add	fp, #76
14578     A7 12 02 FB | 	rdlong	arg01, fp
1457c     4C 4E 85 F1 | 	sub	fp, #76
14580     00 80 20 FF 
14584     00 14 06 F6 | 	mov	arg02, ##1090519040
14588     01 16 66 F6 | 	neg	arg03, #1
1458c     E4 01 B1 FD | 	call	#__system___float_cmp
14590     01 FA 55 F2 | 	cmps	result1, #1 wc
14594     48 00 90 CD |  if_b	jmp	#LR__1726
14598                 | LR__1725
14598     0C 4E 05 F1 | 	add	fp, #12
1459c     A7 22 02 FB | 	rdlong	local03, fp
145a0     11 2B 02 F6 | 	mov	local07, local03
145a4     01 2A 66 F0 | 	shl	local07, #1
145a8     11 2B 02 F1 | 	add	local07, local03
145ac     03 2A 66 F0 | 	shl	local07, #3
145b0     14 00 00 FF 
145b4     38 E5 05 F1 | 	add	objptr, ##10552
145b8     F2 2A 02 F1 | 	add	local07, objptr
145bc     05 2A 06 F1 | 	add	local07, #5
145c0     15 27 C2 FA | 	rdbyte	local05, local07
145c4     13 25 E2 F8 | 	getbyte	local04, local05, #0
145c8     18 4E 05 F1 | 	add	fp, #24
145cc     A7 24 62 FC | 	wrlong	local04, fp
145d0     24 4E 85 F1 | 	sub	fp, #36
145d4     14 00 00 FF 
145d8     38 E5 85 F1 | 	sub	objptr, ##10552
145dc     54 00 90 FD | 	jmp	#LR__1727
145e0                 | LR__1726
145e0     4C 4E 05 F1 | 	add	fp, #76
145e4     A7 12 02 FB | 	rdlong	arg01, fp
145e8     4C 4E 85 F1 | 	sub	fp, #76
145ec     01 14 06 F6 | 	mov	arg02, #1
145f0     14 02 B1 FD | 	call	#__system___float_tointeger
145f4     24 4E 05 F1 | 	add	fp, #36
145f8     A7 FA 61 FC | 	wrlong	result1, fp
145fc     18 4E 85 F1 | 	sub	fp, #24
14600     A7 20 02 FB | 	rdlong	local02, fp
14604     10 23 02 F6 | 	mov	local03, local02
14608     01 22 66 F0 | 	shl	local03, #1
1460c     10 23 02 F1 | 	add	local03, local02
14610     03 22 66 F0 | 	shl	local03, #3
14614     14 00 00 FF 
14618     38 E5 05 F1 | 	add	objptr, ##10552
1461c     F2 22 02 F1 | 	add	local03, objptr
14620     0C 4E 85 F1 | 	sub	fp, #12
14624     05 22 06 F1 | 	add	local03, #5
14628     11 FB 41 FC | 	wrbyte	result1, local03
1462c     14 00 00 FF 
14630     38 E5 85 F1 | 	sub	objptr, ##10552
14634                 | LR__1727
14634                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
14634     50 4E 05 F1 | 	add	fp, #80
14638     A7 12 02 FB | 	rdlong	arg01, fp
1463c     50 4E 85 F1 | 	sub	fp, #80
14640     00 14 06 F6 | 	mov	arg02, #0
14644     01 16 06 F6 | 	mov	arg03, #1
14648     28 01 B1 FD | 	call	#__system___float_cmp
1464c     00 FA 55 F2 | 	cmps	result1, #0 wc
14650     24 00 90 CD |  if_b	jmp	#LR__1728
14654     50 4E 05 F1 | 	add	fp, #80
14658     A7 12 02 FB | 	rdlong	arg01, fp
1465c     50 4E 85 F1 | 	sub	fp, #80
14660     00 3D 22 FF 
14664     00 14 06 F6 | 	mov	arg02, ##1148846080
14668     01 16 66 F6 | 	neg	arg03, #1
1466c     04 01 B1 FD | 	call	#__system___float_cmp
14670     01 FA 55 F2 | 	cmps	result1, #1 wc
14674     44 00 90 CD |  if_b	jmp	#LR__1729
14678                 | LR__1728
14678     0C 4E 05 F1 | 	add	fp, #12
1467c     A7 20 02 FB | 	rdlong	local02, fp
14680     10 23 02 F6 | 	mov	local03, local02
14684     01 22 66 F0 | 	shl	local03, #1
14688     10 23 02 F1 | 	add	local03, local02
1468c     03 22 66 F0 | 	shl	local03, #3
14690     14 00 00 FF 
14694     38 E5 05 F1 | 	add	objptr, ##10552
14698     F2 22 02 F1 | 	add	local03, objptr
1469c     08 22 06 F1 | 	add	local03, #8
146a0     11 29 02 FB | 	rdlong	local06, local03
146a4     6C 4E 05 F1 | 	add	fp, #108
146a8     A7 28 62 FC | 	wrlong	local06, fp
146ac     78 4E 85 F1 | 	sub	fp, #120
146b0     14 00 00 FF 
146b4     38 E5 85 F1 | 	sub	objptr, ##10552
146b8     48 00 90 FD | 	jmp	#LR__1730
146bc                 | LR__1729
146bc     50 4E 05 F1 | 	add	fp, #80
146c0     A7 28 02 FB | 	rdlong	local06, fp
146c4     28 4E 05 F1 | 	add	fp, #40
146c8     A7 28 62 FC | 	wrlong	local06, fp
146cc     6C 4E 85 F1 | 	sub	fp, #108
146d0     A7 20 02 FB | 	rdlong	local02, fp
146d4     10 23 02 F6 | 	mov	local03, local02
146d8     01 22 66 F0 | 	shl	local03, #1
146dc     10 23 02 F1 | 	add	local03, local02
146e0     03 22 66 F0 | 	shl	local03, #3
146e4     14 00 00 FF 
146e8     38 E5 05 F1 | 	add	objptr, ##10552
146ec     F2 22 02 F1 | 	add	local03, objptr
146f0     0C 4E 85 F1 | 	sub	fp, #12
146f4     08 22 06 F1 | 	add	local03, #8
146f8     11 29 62 FC | 	wrlong	local06, local03
146fc     14 00 00 FF 
14700     38 E5 85 F1 | 	sub	objptr, ##10552
14704                 | LR__1730
14704                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
14704     54 4E 05 F1 | 	add	fp, #84
14708     A7 12 02 FB | 	rdlong	arg01, fp
1470c     54 4E 85 F1 | 	sub	fp, #84
14710     00 C0 5F FF 
14714     00 14 06 F6 | 	mov	arg02, ##-1082130432
14718     01 16 06 F6 | 	mov	arg03, #1
1471c     54 00 B1 FD | 	call	#__system___float_cmp
14720     00 FA 55 F2 | 	cmps	result1, #0 wc
14724     24 00 90 CD |  if_b	jmp	#LR__1731
14728     54 4E 05 F1 | 	add	fp, #84
1472c     A7 12 02 FB | 	rdlong	arg01, fp
14730     54 4E 85 F1 | 	sub	fp, #84
14734     00 C0 1F FF 
14738     00 14 06 F6 | 	mov	arg02, ##1065353216
1473c     01 16 66 F6 | 	neg	arg03, #1
14740     30 00 B1 FD | 	call	#__system___float_cmp
14744     01 FA 55 F2 | 	cmps	result1, #1 wc
14748     44 00 90 CD |  if_b	jmp	#LR__1732
1474c                 | LR__1731
1474c     0C 4E 05 F1 | 	add	fp, #12
14750     A7 20 02 FB | 	rdlong	local02, fp
14754     10 23 02 F6 | 	mov	local03, local02
14758     01 22 66 F0 | 	shl	local03, #1
1475c     10 23 02 F1 | 	add	local03, local02
14760     03 22 66 F0 | 	shl	local03, #3
14764     14 00 00 FF 
14768     38 E5 05 F1 | 	add	objptr, ##10552
1476c     F2 22 02 F1 | 	add	local03, objptr
14770     10 22 06 F1 | 	add	local03, #16
14774     11 29 02 FB | 	rdlong	local06, local03
14778     64 4E 05 F1 | 	add	fp, #100
1477c     A7 28 62 FC | 	wrlong	local06, fp
14780     70 4E 85 F1 | 	sub	fp, #112
14784     14 00 00 FF 
14788     38 E5 85 F1 | 	sub	objptr, ##10552
1478c     48 00 90 FD | 	jmp	#LR__1733
14790                 | LR__1732
14790     54 4E 05 F1 | 	add	fp, #84
14794     A7 28 02 FB | 	rdlong	local06, fp
14798     1C 4E 05 F1 | 	add	fp, #28
1479c     A7 28 62 FC | 	wrlong	local06, fp
147a0     64 4E 85 F1 | 	sub	fp, #100
147a4     A7 20 02 FB | 	rdlong	local02, fp
147a8     10 23 02 F6 | 	mov	local03, local02
147ac     01 22 66 F0 | 	shl	local03, #1
147b0     10 23 02 F1 | 	add	local03, local02
147b4     03 22 66 F0 | 	shl	local03, #3
147b8     14 00 00 FF 
147bc     38 E5 05 F1 | 	add	objptr, ##10552
147c0     F2 22 02 F1 | 	add	local03, objptr
147c4     0C 4E 85 F1 | 	sub	fp, #12
147c8     10 22 06 F1 | 	add	local03, #16
147cc     11 29 62 FC | 	wrlong	local06, local03
147d0     14 00 00 FF 
147d4     38 E5 85 F1 | 	sub	objptr, ##10552
147d8                 | LR__1733
147d8                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
147d8     58 4E 05 F1 | 	add	fp, #88
147dc     A7 12 02 FB | 	rdlong	arg01, fp
147e0     58 4E 85 F1 | 	sub	fp, #88
147e4     00 14 06 F6 | 	mov	arg02, #0
147e8     01 16 06 F6 | 	mov	arg03, #1
147ec     84 FF B0 FD | 	call	#__system___float_cmp
147f0     00 FA 55 F2 | 	cmps	result1, #0 wc
147f4     24 00 90 CD |  if_b	jmp	#LR__1734
147f8     58 4E 05 F1 | 	add	fp, #88
147fc     A7 12 02 FB | 	rdlong	arg01, fp
14800     58 4E 85 F1 | 	sub	fp, #88
14804     80 BF 21 FF 
14808     00 14 06 F6 | 	mov	arg02, ##1132396544
1480c     01 16 66 F6 | 	neg	arg03, #1
14810     60 FF B0 FD | 	call	#__system___float_cmp
14814     01 FA 55 F2 | 	cmps	result1, #1 wc
14818     44 00 90 CD |  if_b	jmp	#LR__1735
1481c                 | LR__1734
1481c     0C 4E 05 F1 | 	add	fp, #12
14820     A7 22 02 FB | 	rdlong	local03, fp
14824     11 2B 02 F6 | 	mov	local07, local03
14828     01 2A 66 F0 | 	shl	local07, #1
1482c     11 2B 02 F1 | 	add	local07, local03
14830     03 2A 66 F0 | 	shl	local07, #3
14834     14 00 00 FF 
14838     38 E5 05 F1 | 	add	objptr, ##10552
1483c     F2 2A 02 F1 | 	add	local07, objptr
14840     14 2A 06 F1 | 	add	local07, #20
14844     15 25 E2 FA | 	rdword	local04, local07
14848     20 4E 05 F1 | 	add	fp, #32
1484c     A7 24 62 FC | 	wrlong	local04, fp
14850     2C 4E 85 F1 | 	sub	fp, #44
14854     14 00 00 FF 
14858     38 E5 85 F1 | 	sub	objptr, ##10552
1485c     54 00 90 FD | 	jmp	#LR__1736
14860                 | LR__1735
14860     58 4E 05 F1 | 	add	fp, #88
14864     A7 12 02 FB | 	rdlong	arg01, fp
14868     58 4E 85 F1 | 	sub	fp, #88
1486c     01 14 06 F6 | 	mov	arg02, #1
14870     94 FF B0 FD | 	call	#__system___float_tointeger
14874     2C 4E 05 F1 | 	add	fp, #44
14878     A7 FA 61 FC | 	wrlong	result1, fp
1487c     20 4E 85 F1 | 	sub	fp, #32
14880     A7 20 02 FB | 	rdlong	local02, fp
14884     10 23 02 F6 | 	mov	local03, local02
14888     01 22 66 F0 | 	shl	local03, #1
1488c     10 23 02 F1 | 	add	local03, local02
14890     03 22 66 F0 | 	shl	local03, #3
14894     14 00 00 FF 
14898     38 E5 05 F1 | 	add	objptr, ##10552
1489c     F2 22 02 F1 | 	add	local03, objptr
148a0     0C 4E 85 F1 | 	sub	fp, #12
148a4     14 22 06 F1 | 	add	local03, #20
148a8     11 FB 51 FC | 	wrword	result1, local03
148ac     14 00 00 FF 
148b0     38 E5 85 F1 | 	sub	objptr, ##10552
148b4                 | LR__1736
148b4     6C 4E 05 F1 | 	add	fp, #108
148b8     A7 14 02 FB | 	rdlong	arg02, fp
148bc     6C 4E 85 F1 | 	sub	fp, #108
148c0     FC 16 20 FF 
148c4     54 12 06 F6 | 	mov	arg01, ##1076754516
148c8     44 0A B1 FD | 	call	#__system____builtin_logbase
148cc     FD 24 02 F6 | 	mov	local04, result1
148d0     1E 14 C6 F9 | 	decod	arg02, #30
148d4     FC 16 20 FF 
148d8     54 12 06 F6 | 	mov	arg01, ##1076754516
148dc     30 0A B1 FD | 	call	#__system____builtin_logbase
148e0     FD 14 02 F6 | 	mov	arg02, result1
148e4     12 13 02 F6 | 	mov	arg01, local04
148e8     58 FC B0 FD | 	call	#__system___float_div
148ec     FD 12 02 F6 | 	mov	arg01, result1
148f0     00 14 06 F6 | 	mov	arg02, #0
148f4     10 FF B0 FD | 	call	#__system___float_tointeger
148f8     30 4E 05 F1 | 	add	fp, #48
148fc     A7 FA 61 FC | 	wrlong	result1, fp
14900     1E 24 C6 F9 | 	decod	local04, #30
14904     FD 12 02 F6 | 	mov	arg01, result1
14908     30 4E 85 F1 | 	sub	fp, #48
1490c     05 12 06 F1 | 	add	arg01, #5
14910     09 13 52 F6 | 	abs	arg01, arg01 wc
14914     1F 2C C6 C9 |  if_b	decod	local08, #31
14918     00 2C 06 36 |  if_ae	mov	local08, #0
1491c     1C F6 B0 FD | 	call	#__system___float_fromuns
14920     16 FB 61 F5 | 	xor	result1, local08
14924     FD 14 02 F6 | 	mov	arg02, result1
14928     12 13 02 F6 | 	mov	arg01, local04
1492c     18 09 B1 FD | 	call	#__system____builtin_powf
14930     FD 12 02 F6 | 	mov	arg01, result1
14934     01 14 06 F6 | 	mov	arg02, #1
14938     CC FE B0 FD | 	call	#__system___float_tointeger
1493c     10 4E 05 F1 | 	add	fp, #16
14940     A7 FA 61 FC | 	wrlong	result1, fp
14944                 | ' skip=round(2^(lfreq+5))
14944                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
14944     10 4E 85 F1 | 	sub	fp, #16
14948     40 00 00 FF 
1494c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
14950     30 00 90 CD |  if_b	jmp	#LR__1737
14954     10 4E 05 F1 | 	add	fp, #16
14958     A7 1E 02 FB | 	rdlong	local01, fp
1495c     0F 25 52 F6 | 	abs	local04, local01 wc
14960     0F 24 46 F0 | 	shr	local04, #15
14964     12 25 82 F6 | 	negc	local04, local04
14968     0C 4E 85 F1 | 	sub	fp, #12
1496c     A7 24 62 FC | 	wrlong	local04, fp
14970     0C 4E 05 F1 | 	add	fp, #12
14974     40 00 80 FF 
14978     A7 00 68 FC | 	wrlong	##32768, fp
1497c     10 4E 85 F1 | 	sub	fp, #16
14980     0C 00 90 FD | 	jmp	#LR__1738
14984                 | LR__1737
14984     04 4E 05 F1 | 	add	fp, #4
14988     A7 02 68 FC | 	wrlong	#1, fp
1498c     04 4E 85 F1 | 	sub	fp, #4
14990                 | LR__1738
14990     6C 4E 05 F1 | 	add	fp, #108
14994     A7 14 02 FB | 	rdlong	arg02, fp
14998     6C 4E 85 F1 | 	sub	fp, #108
1499c     3E 2C 25 FF 
149a0     3C 12 06 F6 | 	mov	arg01, ##1247312956
149a4     9C FB B0 FD | 	call	#__system___float_div
149a8     FD 24 02 F6 | 	mov	local04, result1
149ac     04 4E 05 F1 | 	add	fp, #4
149b0     A7 12 02 FB | 	rdlong	arg01, fp
149b4     04 4E 85 F1 | 	sub	fp, #4
149b8     09 13 52 F6 | 	abs	arg01, arg01 wc
149bc     1F 2C C6 C9 |  if_b	decod	local08, #31
149c0     00 2C 06 36 |  if_ae	mov	local08, #0
149c4     74 F5 B0 FD | 	call	#__system___float_fromuns
149c8     16 FB 61 F5 | 	xor	result1, local08
149cc     FD 1E 02 F6 | 	mov	local01, result1
149d0     1E 20 C6 F9 | 	decod	local02, #30
149d4     0D 12 06 F6 | 	mov	arg01, #13
149d8     30 4E 05 F1 | 	add	fp, #48
149dc     A7 28 02 FB | 	rdlong	local06, fp
149e0     30 4E 85 F1 | 	sub	fp, #48
149e4     14 13 82 F1 | 	sub	arg01, local06
149e8     09 13 52 F6 | 	abs	arg01, arg01 wc
149ec     1F 2C C6 C9 |  if_b	decod	local08, #31
149f0     00 2C 06 36 |  if_ae	mov	local08, #0
149f4     44 F5 B0 FD | 	call	#__system___float_fromuns
149f8     16 FB 61 F5 | 	xor	result1, local08
149fc     FD 14 02 F6 | 	mov	arg02, result1
14a00     10 13 02 F6 | 	mov	arg01, local02
14a04     40 08 B1 FD | 	call	#__system____builtin_powf
14a08     FD 14 02 F6 | 	mov	arg02, result1
14a0c     0F 13 02 F6 | 	mov	arg01, local01
14a10     2C F9 B0 FD | 	call	#__system___float_mul
14a14     FD 14 02 F6 | 	mov	arg02, result1
14a18     12 13 02 F6 | 	mov	arg01, local04
14a1c     24 FB B0 FD | 	call	#__system___float_div
14a20     FD 12 02 F6 | 	mov	arg01, result1
14a24     01 14 06 F6 | 	mov	arg02, #1
14a28     DC FD B0 FD | 	call	#__system___float_tointeger
14a2c     34 4E 05 F1 | 	add	fp, #52
14a30     A7 FA 61 FC | 	wrlong	result1, fp
14a34     34 4E 05 F1 | 	add	fp, #52
14a38     A7 12 02 FB | 	rdlong	arg01, fp
14a3c     10 4E 05 F1 | 	add	fp, #16
14a40     A7 14 02 FB | 	rdlong	arg02, fp
14a44     78 4E 85 F1 | 	sub	fp, #120
14a48     F8 FA B0 FD | 	call	#__system___float_div
14a4c     FD 12 02 F6 | 	mov	arg01, result1
14a50     01 14 06 F6 | 	mov	arg02, #1
14a54     B0 FD B0 FD | 	call	#__system___float_tointeger
14a58     FD 24 02 F6 | 	mov	local04, result1
14a5c     14 4E 05 F1 | 	add	fp, #20
14a60     A7 24 62 FC | 	wrlong	local04, fp
14a64     5C 4E 05 F1 | 	add	fp, #92
14a68     A7 14 02 FB | 	rdlong	arg02, fp
14a6c     70 4E 85 F1 | 	sub	fp, #112
14a70     00 00 23 FF 
14a74     00 12 06 F6 | 	mov	arg01, ##1174405120
14a78     C4 F8 B0 FD | 	call	#__system___float_mul
14a7c     FD 12 02 F6 | 	mov	arg01, result1
14a80     01 14 06 F6 | 	mov	arg02, #1
14a84     80 FD B0 FD | 	call	#__system___float_tointeger
14a88     0D 24 C6 F9 | 	decod	local04, #13
14a8c     FD 24 02 F1 | 	add	local04, result1
14a90     18 4E 05 F1 | 	add	fp, #24
14a94     A7 24 62 FC | 	wrlong	local04, fp
14a98     5C 4E 05 F1 | 	add	fp, #92
14a9c     A7 14 02 FB | 	rdlong	arg02, fp
14aa0     74 4E 85 F1 | 	sub	fp, #116
14aa4     00 3D 22 FF 
14aa8     00 12 06 F6 | 	mov	arg01, ##1148846080
14aac     90 F8 B0 FD | 	call	#__system___float_mul
14ab0     FD 12 02 F6 | 	mov	arg01, result1
14ab4     01 14 06 F6 | 	mov	arg02, #1
14ab8     4C FD B0 FD | 	call	#__system___float_tointeger
14abc     1C 4E 05 F1 | 	add	fp, #28
14ac0     A7 FA 61 FC | 	wrlong	result1, fp
14ac4     37 00 00 FF 
14ac8     10 E4 05 F1 | 	add	objptr, ##28176
14acc     F2 24 02 FB | 	rdlong	local04, objptr
14ad0     37 00 00 FF 
14ad4     10 E4 85 F1 | 	sub	objptr, ##28176
14ad8     10 4E 85 F1 | 	sub	fp, #16
14adc     A7 20 02 FB | 	rdlong	local02, fp
14ae0     06 20 66 F0 | 	shl	local02, #6
14ae4     10 25 02 F1 | 	add	local04, local02
14ae8     04 4E 85 F1 | 	sub	fp, #4
14aec     A7 24 62 FC | 	wrlong	local04, fp
14af0                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
14af0                 | ' speed=round(speed_coeff/slen)
14af0                 | ' ipan=8192+round(8192*pan)
14af0                 | ' ivol=round(1000.0*vol)
14af0                 | ' base2=base+64*channel
14af0                 | ' if wave <32 then 
14af0     18 4E 05 F1 | 	add	fp, #24
14af4     A7 24 02 FB | 	rdlong	local04, fp
14af8     20 4E 85 F1 | 	sub	fp, #32
14afc     20 24 56 F2 | 	cmps	local04, #32 wc
14b00     2C 00 90 3D |  if_ae	jmp	#LR__1739
14b04     08 4E 05 F1 | 	add	fp, #8
14b08     A7 12 02 FB | 	rdlong	arg01, fp
14b0c     08 12 06 F1 | 	add	arg01, #8
14b10     18 4E 05 F1 | 	add	fp, #24
14b14     A7 14 02 FB | 	rdlong	arg02, fp
14b18     20 4E 85 F1 | 	sub	fp, #32
14b1c     0B 14 66 F0 | 	shl	arg02, #11
14b20     00 00 60 FF 
14b24     00 14 06 F1 | 	add	arg02, ##-1073741824
14b28     09 15 62 FC | 	wrlong	arg02, arg01
14b2c     18 00 90 FD | 	jmp	#LR__1740
14b30                 | LR__1739
14b30     08 4E 05 F1 | 	add	fp, #8
14b34     A7 12 02 FB | 	rdlong	arg01, fp
14b38     08 4E 85 F1 | 	sub	fp, #8
14b3c     08 12 06 F1 | 	add	arg01, #8
14b40     00 00 E4 FF 
14b44     09 01 68 FC | 	wrlong	##-939524096, arg01
14b48                 | LR__1740
14b48     08 4E 05 F1 | 	add	fp, #8
14b4c     A7 12 02 FB | 	rdlong	arg01, fp
14b50     10 12 06 F1 | 	add	arg01, #16
14b54     04 00 80 FF 
14b58     09 01 68 FC | 	wrlong	##2048, arg01
14b5c     A7 12 02 FB | 	rdlong	arg01, fp
14b60     0C 12 06 F1 | 	add	arg01, #12
14b64     09 01 68 FC | 	wrlong	#0, arg01
14b68     A7 12 02 FB | 	rdlong	arg01, fp
14b6c     14 12 06 F1 | 	add	arg01, #20
14b70     14 4E 05 F1 | 	add	fp, #20
14b74     A7 14 02 FB | 	rdlong	arg02, fp
14b78     09 15 52 FC | 	wrword	arg02, arg01
14b7c     14 4E 85 F1 | 	sub	fp, #20
14b80     A7 12 02 FB | 	rdlong	arg01, fp
14b84     16 12 06 F1 | 	add	arg01, #22
14b88     10 4E 05 F1 | 	add	fp, #16
14b8c     A7 14 02 FB | 	rdlong	arg02, fp
14b90     09 15 52 FC | 	wrword	arg02, arg01
14b94                 | ' lpoke base2+16,2048
14b94                 | ' lpoke base2+12,0
14b94                 | ' dpoke base2+20,ivol 
14b94                 | ' dpoke base2+22,ipan 
14b94                 | ' if wave<32 then
14b94     08 4E 05 F1 | 	add	fp, #8
14b98     A7 24 02 FB | 	rdlong	local04, fp
14b9c     20 4E 85 F1 | 	sub	fp, #32
14ba0     20 24 56 F2 | 	cmps	local04, #32 wc
14ba4     38 00 90 3D |  if_ae	jmp	#LR__1741
14ba8     08 4E 05 F1 | 	add	fp, #8
14bac     A7 12 02 FB | 	rdlong	arg01, fp
14bb0     18 12 06 F1 | 	add	arg01, #24
14bb4     2C 4E 05 F1 | 	add	fp, #44
14bb8     A7 14 02 FB | 	rdlong	arg02, fp
14bbc     09 15 52 FC | 	wrword	arg02, arg01
14bc0     2C 4E 85 F1 | 	sub	fp, #44
14bc4     A7 12 02 FB | 	rdlong	arg01, fp
14bc8     1A 12 06 F1 | 	add	arg01, #26
14bcc     08 4E 05 F1 | 	add	fp, #8
14bd0     A7 14 02 FB | 	rdlong	arg02, fp
14bd4     10 4E 85 F1 | 	sub	fp, #16
14bd8     09 15 52 FC | 	wrword	arg02, arg01
14bdc     48 00 90 FD | 	jmp	#LR__1742
14be0                 | LR__1741
14be0     08 4E 05 F1 | 	add	fp, #8
14be4     A7 24 02 FB | 	rdlong	local04, fp
14be8     18 24 06 F1 | 	add	local04, #24
14bec     64 4E 05 F1 | 	add	fp, #100
14bf0     A7 14 02 FB | 	rdlong	arg02, fp
14bf4     6C 4E 85 F1 | 	sub	fp, #108
14bf8     3E 2C 25 FF 
14bfc     3C 12 06 F6 | 	mov	arg01, ##1247312956
14c00     40 F9 B0 FD | 	call	#__system___float_div
14c04     FD 12 02 F6 | 	mov	arg01, result1
14c08     01 14 06 F6 | 	mov	arg02, #1
14c0c     F8 FB B0 FD | 	call	#__system___float_tointeger
14c10     12 FB 51 FC | 	wrword	result1, local04
14c14     08 4E 05 F1 | 	add	fp, #8
14c18     A7 12 02 FB | 	rdlong	arg01, fp
14c1c     08 4E 85 F1 | 	sub	fp, #8
14c20     1A 12 06 F1 | 	add	arg01, #26
14c24     09 01 5A FC | 	wrword	#256, arg01
14c28                 | LR__1742
14c28     08 4E 05 F1 | 	add	fp, #8
14c2c     A7 12 02 FB | 	rdlong	arg01, fp
14c30     1C 12 06 F1 | 	add	arg01, #28
14c34     09 01 68 FC | 	wrlong	#0, arg01
14c38     A7 12 02 FB | 	rdlong	arg01, fp
14c3c     20 12 06 F1 | 	add	arg01, #32
14c40     09 01 68 FC | 	wrlong	#0, arg01
14c44                 | ' lpoke base2+28,$0000_0000
14c44                 | ' lpoke base2+32,0 
14c44                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
14c44     1C 4E 05 F1 | 	add	fp, #28
14c48     A7 24 02 FB | 	rdlong	local04, fp
14c4c     24 4E 85 F1 | 	sub	fp, #36
14c50     08 24 0E F2 | 	cmp	local04, #8 wz
14c54     18 00 90 5D |  if_ne	jmp	#LR__1743
14c58     08 4E 05 F1 | 	add	fp, #8
14c5c     A7 12 02 FB | 	rdlong	arg01, fp
14c60     08 4E 85 F1 | 	sub	fp, #8
14c64     24 12 06 F1 | 	add	arg01, #36
14c68     09 01 68 FC | 	wrlong	#0, arg01
14c6c     34 00 90 FD | 	jmp	#LR__1744
14c70                 | LR__1743
14c70     08 4E 05 F1 | 	add	fp, #8
14c74     A7 12 02 FB | 	rdlong	arg01, fp
14c78     24 12 06 F1 | 	add	arg01, #36
14c7c     1C 4E 05 F1 | 	add	fp, #28
14c80     A7 14 02 FB | 	rdlong	arg02, fp
14c84     24 4E 85 F1 | 	sub	fp, #36
14c88     09 14 66 F0 | 	shl	arg02, #9
14c8c     0C 00 00 FF 
14c90     D8 E4 05 F1 | 	add	objptr, ##6360
14c94     F2 14 02 F1 | 	add	arg02, objptr
14c98     0C 00 00 FF 
14c9c     D8 E4 85 F1 | 	sub	objptr, ##6360
14ca0     09 15 62 FC | 	wrlong	arg02, arg01
14ca4                 | LR__1744
14ca4     08 4E 05 F1 | 	add	fp, #8
14ca8     A7 12 02 FB | 	rdlong	arg01, fp
14cac     28 12 06 F1 | 	add	arg01, #40
14cb0     0C 4E 05 F1 | 	add	fp, #12
14cb4     A7 14 02 FB | 	rdlong	arg02, fp
14cb8     09 15 62 FC | 	wrlong	arg02, arg01
14cbc     0C 4E 85 F1 | 	sub	fp, #12
14cc0     A7 12 02 FB | 	rdlong	arg01, fp
14cc4     2C 12 06 F1 | 	add	arg01, #44
14cc8     24 4E 05 F1 | 	add	fp, #36
14ccc     A7 14 02 FB | 	rdlong	arg02, fp
14cd0     09 15 62 FC | 	wrlong	arg02, arg01
14cd4                 | ' lpoke base2+40,speed 
14cd4                 | ' lpoke base2+44,sus 
14cd4                 | ' if delay>0 then waitms(delay) 
14cd4     04 4E 85 F1 | 	sub	fp, #4
14cd8     A7 24 02 FB | 	rdlong	local04, fp
14cdc     28 4E 85 F1 | 	sub	fp, #40
14ce0     01 24 56 F2 | 	cmps	local04, #1 wc
14ce4     28 4E 05 31 |  if_ae	add	fp, #40
14ce8     A7 12 02 3B |  if_ae	rdlong	arg01, fp
14cec     28 4E 85 31 |  if_ae	sub	fp, #40
14cf0     84 CB B0 3D |  if_ae	call	#__system___waitms
14cf4     A7 F0 03 F6 | 	mov	ptra, fp
14cf8     B2 00 A0 FD | 	call	#popregs_
14cfc                 | _do_play_ret
14cfc     2D 00 64 FD | 	ret
14d00                 | 
14d00                 | ' 
14d00                 | ' '-------------------- plot
14d00                 | ' 
14d00                 | ' sub do_plot
14d00                 | _do_plot
14d00     00 4A 05 F6 | 	mov	COUNT_, #0
14d04     A8 00 A0 FD | 	call	#pushregs_
14d08     20 F0 07 F1 | 	add	ptra, #32
14d0c     C8 6A BF FD | 	call	#_pop
14d10     FD 16 02 F6 | 	mov	arg03, result1
14d14     FE 14 02 F6 | 	mov	arg02, result2
14d18     FF 12 02 F6 | 	mov	arg01, result3
14d1c     0C 4E 05 F1 | 	add	fp, #12
14d20     A7 16 62 FC | 	wrlong	arg03, fp
14d24     04 4E 05 F1 | 	add	fp, #4
14d28     A7 14 62 FC | 	wrlong	arg02, fp
14d2c     04 4E 05 F1 | 	add	fp, #4
14d30     A7 12 62 FC | 	wrlong	arg01, fp
14d34     14 4E 85 F1 | 	sub	fp, #20
14d38     9C 6A BF FD | 	call	#_pop
14d3c     FF 16 02 F6 | 	mov	arg03, result3
14d40     A7 FA 61 FC | 	wrlong	result1, fp
14d44     04 4E 05 F1 | 	add	fp, #4
14d48     A7 FC 61 FC | 	wrlong	result2, fp
14d4c     04 4E 05 F1 | 	add	fp, #4
14d50     A7 16 62 FC | 	wrlong	arg03, fp
14d54     08 4E 85 F1 | 	sub	fp, #8
14d58     A7 12 02 F6 | 	mov	arg01, fp
14d5c     5C 6C BF FD | 	call	#_converttoint
14d60     18 4E 05 F1 | 	add	fp, #24
14d64     A7 FA 61 FC | 	wrlong	result1, fp
14d68     0C 4E 85 F1 | 	sub	fp, #12
14d6c     A7 12 02 F6 | 	mov	arg01, fp
14d70     0C 4E 85 F1 | 	sub	fp, #12
14d74     44 6C BF FD | 	call	#_converttoint
14d78     1C 4E 05 F1 | 	add	fp, #28
14d7c     A7 FA 61 FC | 	wrlong	result1, fp
14d80     04 4E 85 F1 | 	sub	fp, #4
14d84     A7 16 02 FB | 	rdlong	arg03, fp
14d88     37 00 00 FF 
14d8c     2C E4 05 F1 | 	add	objptr, ##28204
14d90     F2 16 62 FC | 	wrlong	arg03, objptr
14d94     04 4E 05 F1 | 	add	fp, #4
14d98     A7 14 02 FB | 	rdlong	arg02, fp
14d9c     1C 4E 85 F1 | 	sub	fp, #28
14da0     04 E4 05 F1 | 	add	objptr, #4
14da4     F2 14 62 FC | 	wrlong	arg02, objptr
14da8     04 E4 85 F1 | 	sub	objptr, #4
14dac     F2 12 02 FB | 	rdlong	arg01, objptr
14db0     04 E4 85 F1 | 	sub	objptr, #4
14db4     F2 16 02 FB | 	rdlong	arg03, objptr
14db8     37 00 00 FF 
14dbc     28 E4 85 F1 | 	sub	objptr, ##28200
14dc0     10 A2 B0 FD | 	call	#_hg010b_spin2_putpixel
14dc4     A7 F0 03 F6 | 	mov	ptra, fp
14dc8     B2 00 A0 FD | 	call	#popregs_
14dcc                 | _do_plot_ret
14dcc     2D 00 64 FD | 	ret
14dd0                 | 
14dd0                 | ' 
14dd0                 | ' '-------------------- poke
14dd0                 | ' 
14dd0                 | ' sub do_poke
14dd0                 | _do_poke
14dd0     01 4A 05 F6 | 	mov	COUNT_, #1
14dd4     A8 00 A0 FD | 	call	#pushregs_
14dd8     20 F0 07 F1 | 	add	ptra, #32
14ddc     F8 69 BF FD | 	call	#_pop
14de0     FD 14 02 F6 | 	mov	arg02, result1
14de4     FE 12 02 F6 | 	mov	arg01, result2
14de8     FF 1E 02 F6 | 	mov	local01, result3
14dec     A7 14 62 FC | 	wrlong	arg02, fp
14df0     04 4E 05 F1 | 	add	fp, #4
14df4     A7 12 62 FC | 	wrlong	arg01, fp
14df8     04 4E 05 F1 | 	add	fp, #4
14dfc     A7 1E 62 FC | 	wrlong	local01, fp
14e00     08 4E 85 F1 | 	sub	fp, #8
14e04     D0 69 BF FD | 	call	#_pop
14e08     FF 1E 02 F6 | 	mov	local01, result3
14e0c     0C 4E 05 F1 | 	add	fp, #12
14e10     A7 FA 61 FC | 	wrlong	result1, fp
14e14     04 4E 05 F1 | 	add	fp, #4
14e18     A7 FC 61 FC | 	wrlong	result2, fp
14e1c     04 4E 05 F1 | 	add	fp, #4
14e20     A7 1E 62 FC | 	wrlong	local01, fp
14e24     08 4E 85 F1 | 	sub	fp, #8
14e28     A7 12 02 F6 | 	mov	arg01, fp
14e2c     0C 4E 85 F1 | 	sub	fp, #12
14e30     88 6B BF FD | 	call	#_converttoint
14e34     18 4E 05 F1 | 	add	fp, #24
14e38     A7 FA 61 FC | 	wrlong	result1, fp
14e3c     18 4E 85 F1 | 	sub	fp, #24
14e40     A7 12 02 F6 | 	mov	arg01, fp
14e44     74 6B BF FD | 	call	#_converttoint
14e48     1C 4E 05 F1 | 	add	fp, #28
14e4c     A7 FA 61 FC | 	wrlong	result1, fp
14e50                 | ' t1=pop() 'value
14e50                 | ' t2=pop() 
14e50                 | ' a=converttoint(t2) : v=converttoint(t1)
14e50                 | ' if a<$80000 then poke a,v else pspoke a,v
14e50     04 4E 85 F1 | 	sub	fp, #4
14e54     A7 1E 02 FB | 	rdlong	local01, fp
14e58     18 4E 85 F1 | 	sub	fp, #24
14e5c     00 04 00 FF 
14e60     00 1E 16 F2 | 	cmp	local01, ##524288 wc
14e64     1C 00 90 3D |  if_ae	jmp	#LR__1750
14e68     18 4E 05 F1 | 	add	fp, #24
14e6c     A7 12 02 FB | 	rdlong	arg01, fp
14e70     04 4E 05 F1 | 	add	fp, #4
14e74     A7 14 02 FB | 	rdlong	arg02, fp
14e78     1C 4E 85 F1 | 	sub	fp, #28
14e7c     09 15 42 FC | 	wrbyte	arg02, arg01
14e80     18 00 90 FD | 	jmp	#LR__1751
14e84                 | LR__1750
14e84     18 4E 05 F1 | 	add	fp, #24
14e88     A7 12 02 FB | 	rdlong	arg01, fp
14e8c     04 4E 05 F1 | 	add	fp, #4
14e90     A7 14 02 FB | 	rdlong	arg02, fp
14e94     1C 4E 85 F1 | 	sub	fp, #28
14e98     44 93 B0 FD | 	call	#_pspoke
14e9c                 | LR__1751
14e9c     A7 F0 03 F6 | 	mov	ptra, fp
14ea0     B2 00 A0 FD | 	call	#popregs_
14ea4                 | _do_poke_ret
14ea4     2D 00 64 FD | 	ret
14ea8                 | 
14ea8                 | ' 
14ea8                 | ' '-------------------- pop
14ea8                 | ' 
14ea8                 | ' sub do_pop()
14ea8                 | _do_pop
14ea8                 | ' if gosubtop>0 then  gosubtop -=1 
14ea8     50 00 00 FF 
14eac     0C E5 05 F1 | 	add	objptr, ##41228
14eb0     F2 00 02 FB | 	rdlong	_var01, objptr
14eb4     50 00 00 FF 
14eb8     0C E5 85 F1 | 	sub	objptr, ##41228
14ebc     01 00 56 F2 | 	cmps	_var01, #1 wc
14ec0     50 00 00 3F 
14ec4     0C E5 05 31 |  if_ae	add	objptr, ##41228
14ec8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
14ecc     01 00 86 31 |  if_ae	sub	_var01, #1
14ed0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
14ed4     50 00 00 3F 
14ed8     0C E5 85 31 |  if_ae	sub	objptr, ##41228
14edc                 | _do_pop_ret
14edc     2D 00 64 FD | 	ret
14ee0                 | 
14ee0                 | ' 
14ee0                 | ' '-------------------- position
14ee0                 | ' 
14ee0                 | ' sub do_position
14ee0                 | _do_position
14ee0     01 4A 05 F6 | 	mov	COUNT_, #1
14ee4     A8 00 A0 FD | 	call	#pushregs_
14ee8     18 F0 07 F1 | 	add	ptra, #24
14eec     E8 68 BF FD | 	call	#_pop
14ef0     FD 14 02 F6 | 	mov	arg02, result1
14ef4     FE 12 02 F6 | 	mov	arg01, result2
14ef8     FF 1E 02 F6 | 	mov	local01, result3
14efc     A7 14 62 FC | 	wrlong	arg02, fp
14f00     04 4E 05 F1 | 	add	fp, #4
14f04     A7 12 62 FC | 	wrlong	arg01, fp
14f08     04 4E 05 F1 | 	add	fp, #4
14f0c     A7 1E 62 FC | 	wrlong	local01, fp
14f10     08 4E 85 F1 | 	sub	fp, #8
14f14     C0 68 BF FD | 	call	#_pop
14f18     FF 1E 02 F6 | 	mov	local01, result3
14f1c     0C 4E 05 F1 | 	add	fp, #12
14f20     A7 FA 61 FC | 	wrlong	result1, fp
14f24     04 4E 05 F1 | 	add	fp, #4
14f28     A7 FC 61 FC | 	wrlong	result2, fp
14f2c     04 4E 05 F1 | 	add	fp, #4
14f30     A7 1E 62 FC | 	wrlong	local01, fp
14f34     08 4E 85 F1 | 	sub	fp, #8
14f38     A7 12 02 F6 | 	mov	arg01, fp
14f3c     0C 4E 85 F1 | 	sub	fp, #12
14f40     78 6A BF FD | 	call	#_converttoint
14f44     FD 1E 02 F6 | 	mov	local01, result1
14f48     A7 12 02 F6 | 	mov	arg01, fp
14f4c     6C 6A BF FD | 	call	#_converttoint
14f50     FD 14 02 F6 | 	mov	arg02, result1
14f54     0F 13 02 F6 | 	mov	arg01, local01
14f58     3C AC B0 FD | 	call	#_hg010b_spin2_setcursorpos
14f5c     A7 F0 03 F6 | 	mov	ptra, fp
14f60     B2 00 A0 FD | 	call	#popregs_
14f64                 | _do_position_ret
14f64     2D 00 64 FD | 	ret
14f68                 | 
14f68                 | ' 
14f68                 | ' '-------------------- print
14f68                 | ' 
14f68                 | ' sub do_print  
14f68                 | _do_print
14f68     0B 4A 05 F6 | 	mov	COUNT_, #11
14f6c     A8 00 A0 FD | 	call	#pushregs_
14f70     00 24 06 F6 | 	mov	local04, #0
14f74     60 68 BF FD | 	call	#_pop
14f78     FD 26 02 F6 | 	mov	local05, result1
14f7c     FE 28 02 F6 | 	mov	local06, result2
14f80     FF 2A 02 F6 | 	mov	local07, result3
14f84     13 1F 02 F6 | 	mov	local01, local05
14f88     14 21 02 F6 | 	mov	local02, local06
14f8c     15 23 02 F6 | 	mov	local03, local07
14f90                 | '  
14f90                 | ' r=0
14f90                 | ' t1=pop() 
14f90                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14f90     21 22 0E F2 | 	cmp	local03, #33 wz
14f94     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14f98     20 00 90 5D |  if_ne	jmp	#LR__1760
14f9c     11 25 02 F6 | 	mov	local04, local03
14fa0     34 68 BF FD | 	call	#_pop
14fa4     FD 26 02 F6 | 	mov	local05, result1
14fa8     FE 28 02 F6 | 	mov	local06, result2
14fac     FF 2A 02 F6 | 	mov	local07, result3
14fb0     13 1F 02 F6 | 	mov	local01, local05
14fb4     14 21 02 F6 | 	mov	local02, local06
14fb8     15 23 02 F6 | 	mov	local03, local07
14fbc                 | LR__1760
14fbc                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14fbc     20 22 0E F2 | 	cmp	local03, #32 wz
14fc0     11 25 02 A6 |  if_e	mov	local04, local03
14fc4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14fc4     FF 22 0E F2 | 	cmp	local03, #255 wz
14fc8     10 00 90 5D |  if_ne	jmp	#LR__1761
14fcc     0F 13 02 F6 | 	mov	arg01, local01
14fd0     00 14 06 F6 | 	mov	arg02, #0
14fd4     EC 8F B0 FD | 	call	#_printerror
14fd8     D4 04 90 FD | 	jmp	#LR__1780
14fdc                 | LR__1761
14fdc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14fdc     2B 22 0E F2 | 	cmp	local03, #43 wz
14fe0     14 00 90 5D |  if_ne	jmp	#LR__1762
14fe4     0F 13 02 F6 | 	mov	arg01, local01
14fe8     64 69 BF FD | 	call	#_convertstring
14fec     FD 26 02 F6 | 	mov	local05, result1
14ff0     13 1F 02 F6 | 	mov	local01, local05
14ff4     1F 22 06 F6 | 	mov	local03, #31
14ff8                 | LR__1762
14ff8                 | ' 
14ff8                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
14ff8     2C 22 0E F2 | 	cmp	local03, #44 wz
14ffc     80 00 90 5D |  if_ne	jmp	#LR__1763
15000     00 12 06 F6 | 	mov	arg01, #0
15004     A8 22 B1 FD | 	call	#__system___getiolock_0568
15008     FD 12 02 F6 | 	mov	arg01, result1
1500c     74 C5 B0 FD | 	call	#__system___lockmem
15010     8D 01 00 FF 
15014     7E 14 06 F6 | 	mov	arg02, ##@LR__5594
15018     00 12 06 F6 | 	mov	arg01, #0
1501c     00 16 06 F6 | 	mov	arg03, #0
15020     54 D2 B0 FD | 	call	#__system___basic_print_string
15024     0A 2C 06 F6 | 	mov	local08, #10
15028     00 12 06 F6 | 	mov	arg01, #0
1502c     0F 15 02 F6 | 	mov	arg02, local01
15030     00 16 06 F6 | 	mov	arg03, #0
15034     0A 18 06 F6 | 	mov	arg04, #10
15038     80 D2 B0 FD | 	call	#__system___basic_print_integer
1503c     FD 2E 02 F6 | 	mov	local09, result1
15040     00 12 06 F6 | 	mov	arg01, #0
15044     0A 14 06 F6 | 	mov	arg02, #10
15048     00 16 06 F6 | 	mov	arg03, #0
1504c     D0 D1 B0 FD | 	call	#__system___basic_print_char
15050     01 30 06 F6 | 	mov	local10, #1
15054     00 12 06 F6 | 	mov	arg01, #0
15058     54 22 B1 FD | 	call	#__system___getiolock_0568
1505c     FD 00 68 FC | 	wrlong	#0, result1
15060     00 32 06 F6 | 	mov	local11, #0
15064     70 67 BF FD | 	call	#_pop
15068     FD 26 02 F6 | 	mov	local05, result1
1506c     FE 28 02 F6 | 	mov	local06, result2
15070     FF 2A 02 F6 | 	mov	local07, result3
15074     13 1F 02 F6 | 	mov	local01, local05
15078     14 21 02 F6 | 	mov	local02, local06
1507c     15 23 02 F6 | 	mov	local03, local07
15080                 | LR__1763
15080                 | ' 
15080                 | ' if r=print_mod_comma  then
15080     21 24 0E F2 | 	cmp	local04, #33 wz
15084     AC 01 90 5D |  if_ne	jmp	#LR__1768
15088                 | '   if t1.result_type=result_int then print t1.result.iresult,
15088     1C 22 0E F2 | 	cmp	local03, #28 wz
1508c     64 00 90 5D |  if_ne	jmp	#LR__1764
15090     00 12 06 F6 | 	mov	arg01, #0
15094     18 22 B1 FD | 	call	#__system___getiolock_0568
15098     FD 12 02 F6 | 	mov	arg01, result1
1509c     E4 C4 B0 FD | 	call	#__system___lockmem
150a0     00 28 06 F6 | 	mov	local06, #0
150a4     00 12 06 F6 | 	mov	arg01, #0
150a8     0F 15 02 F6 | 	mov	arg02, local01
150ac     00 16 06 F6 | 	mov	arg03, #0
150b0     0A 18 06 F6 | 	mov	arg04, #10
150b4     04 D2 B0 FD | 	call	#__system___basic_print_integer
150b8     FD 2A 02 F6 | 	mov	local07, result1
150bc     14 27 02 F6 | 	mov	local05, local06
150c0     15 27 02 F1 | 	add	local05, local07
150c4     00 32 06 F6 | 	mov	local11, #0
150c8     00 12 06 F6 | 	mov	arg01, #0
150cc     09 14 06 F6 | 	mov	arg02, #9
150d0     00 16 06 F6 | 	mov	arg03, #0
150d4     48 D1 B0 FD | 	call	#__system___basic_print_char
150d8     FD 2E 02 F6 | 	mov	local09, result1
150dc     FD 26 02 F1 | 	add	local05, result1
150e0     00 12 06 F6 | 	mov	arg01, #0
150e4     C8 21 B1 FD | 	call	#__system___getiolock_0568
150e8     FD 00 68 FC | 	wrlong	#0, result1
150ec     00 FA 05 F6 | 	mov	result1, #0
150f0     00 30 06 F6 | 	mov	local10, #0
150f4                 | LR__1764
150f4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
150f4     1D 22 0E F2 | 	cmp	local03, #29 wz
150f8     64 00 90 5D |  if_ne	jmp	#LR__1765
150fc     00 12 06 F6 | 	mov	arg01, #0
15100     AC 21 B1 FD | 	call	#__system___getiolock_0568
15104     FD 12 02 F6 | 	mov	arg01, result1
15108     78 C4 B0 FD | 	call	#__system___lockmem
1510c     00 28 06 F6 | 	mov	local06, #0
15110     00 12 06 F6 | 	mov	arg01, #0
15114     0F 15 02 F6 | 	mov	arg02, local01
15118     00 16 06 F6 | 	mov	arg03, #0
1511c     0A 18 06 F6 | 	mov	arg04, #10
15120     D8 D1 B0 FD | 	call	#__system___basic_print_unsigned
15124     FD 2A 02 F6 | 	mov	local07, result1
15128     14 27 02 F6 | 	mov	local05, local06
1512c     15 27 02 F1 | 	add	local05, local07
15130     00 32 06 F6 | 	mov	local11, #0
15134     00 12 06 F6 | 	mov	arg01, #0
15138     09 14 06 F6 | 	mov	arg02, #9
1513c     00 16 06 F6 | 	mov	arg03, #0
15140     DC D0 B0 FD | 	call	#__system___basic_print_char
15144     FD 2E 02 F6 | 	mov	local09, result1
15148     FD 26 02 F1 | 	add	local05, result1
1514c     00 12 06 F6 | 	mov	arg01, #0
15150     5C 21 B1 FD | 	call	#__system___getiolock_0568
15154     FD 00 68 FC | 	wrlong	#0, result1
15158     00 FA 05 F6 | 	mov	result1, #0
1515c     00 30 06 F6 | 	mov	local10, #0
15160                 | LR__1765
15160                 | '   if t1.result_type=result_float then print t1.result.fresult,
15160     1E 22 0E F2 | 	cmp	local03, #30 wz
15164     64 00 90 5D |  if_ne	jmp	#LR__1766
15168     00 12 06 F6 | 	mov	arg01, #0
1516c     40 21 B1 FD | 	call	#__system___getiolock_0568
15170     FD 12 02 F6 | 	mov	arg01, result1
15174     0C C4 B0 FD | 	call	#__system___lockmem
15178     00 28 06 F6 | 	mov	local06, #0
1517c     00 12 06 F6 | 	mov	arg01, #0
15180     0F 15 02 F6 | 	mov	arg02, local01
15184     00 16 06 F6 | 	mov	arg03, #0
15188     23 18 06 F6 | 	mov	arg04, #35
1518c     C8 F7 B0 FD | 	call	#__system___basic_print_float
15190     FD 2A 02 F6 | 	mov	local07, result1
15194     14 27 02 F6 | 	mov	local05, local06
15198     15 27 02 F1 | 	add	local05, local07
1519c     00 32 06 F6 | 	mov	local11, #0
151a0     00 12 06 F6 | 	mov	arg01, #0
151a4     09 14 06 F6 | 	mov	arg02, #9
151a8     00 16 06 F6 | 	mov	arg03, #0
151ac     70 D0 B0 FD | 	call	#__system___basic_print_char
151b0     FD 2E 02 F6 | 	mov	local09, result1
151b4     FD 26 02 F1 | 	add	local05, result1
151b8     00 12 06 F6 | 	mov	arg01, #0
151bc     F0 20 B1 FD | 	call	#__system___getiolock_0568
151c0     FD 00 68 FC | 	wrlong	#0, result1
151c4     00 FA 05 F6 | 	mov	result1, #0
151c8     00 30 06 F6 | 	mov	local10, #0
151cc                 | LR__1766
151cc                 | '   if t1.result_type=result_string then print t1.result.sresult,
151cc     1F 22 0E F2 | 	cmp	local03, #31 wz
151d0     60 00 90 5D |  if_ne	jmp	#LR__1767
151d4     00 12 06 F6 | 	mov	arg01, #0
151d8     D4 20 B1 FD | 	call	#__system___getiolock_0568
151dc     FD 12 02 F6 | 	mov	arg01, result1
151e0     A0 C3 B0 FD | 	call	#__system___lockmem
151e4     00 28 06 F6 | 	mov	local06, #0
151e8     00 12 06 F6 | 	mov	arg01, #0
151ec     0F 15 02 F6 | 	mov	arg02, local01
151f0     00 16 06 F6 | 	mov	arg03, #0
151f4     80 D0 B0 FD | 	call	#__system___basic_print_string
151f8     FD 2A 02 F6 | 	mov	local07, result1
151fc     14 27 02 F6 | 	mov	local05, local06
15200     15 27 02 F1 | 	add	local05, local07
15204     00 32 06 F6 | 	mov	local11, #0
15208     00 12 06 F6 | 	mov	arg01, #0
1520c     09 14 06 F6 | 	mov	arg02, #9
15210     00 16 06 F6 | 	mov	arg03, #0
15214     08 D0 B0 FD | 	call	#__system___basic_print_char
15218     FD 2E 02 F6 | 	mov	local09, result1
1521c     FD 26 02 F1 | 	add	local05, result1
15220     00 12 06 F6 | 	mov	arg01, #0
15224     88 20 B1 FD | 	call	#__system___getiolock_0568
15228     FD 00 68 FC | 	wrlong	#0, result1
1522c     00 FA 05 F6 | 	mov	result1, #0
15230     00 30 06 F6 | 	mov	local10, #0
15234                 | LR__1767
15234                 | LR__1768
15234                 | ' if r=print_mod_semicolon then 
15234     22 24 0E F2 | 	cmp	local04, #34 wz
15238     1C 01 90 5D |  if_ne	jmp	#LR__1773
1523c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1523c     1C 22 0E F2 | 	cmp	local03, #28 wz
15240     50 00 90 5D |  if_ne	jmp	#LR__1769
15244     00 12 06 F6 | 	mov	arg01, #0
15248     64 20 B1 FD | 	call	#__system___getiolock_0568
1524c     FD 12 02 F6 | 	mov	arg01, result1
15250     30 C3 B0 FD | 	call	#__system___lockmem
15254     00 28 06 F6 | 	mov	local06, #0
15258     00 30 06 F6 | 	mov	local10, #0
1525c     0A 32 06 F6 | 	mov	local11, #10
15260     00 12 06 F6 | 	mov	arg01, #0
15264     0F 15 02 F6 | 	mov	arg02, local01
15268     00 16 06 F6 | 	mov	arg03, #0
1526c     0A 18 06 F6 | 	mov	arg04, #10
15270     48 D0 B0 FD | 	call	#__system___basic_print_integer
15274     FD 2A 02 F6 | 	mov	local07, result1
15278     14 27 02 F6 | 	mov	local05, local06
1527c     15 27 02 F1 | 	add	local05, local07
15280     00 12 06 F6 | 	mov	arg01, #0
15284     28 20 B1 FD | 	call	#__system___getiolock_0568
15288     FD 00 68 FC | 	wrlong	#0, result1
1528c     00 FA 05 F6 | 	mov	result1, #0
15290     00 2E 06 F6 | 	mov	local09, #0
15294                 | LR__1769
15294                 | '   if t1.result_type=result_uint then print t1.result.uresult;
15294     1D 22 0E F2 | 	cmp	local03, #29 wz
15298     50 00 90 5D |  if_ne	jmp	#LR__1770
1529c     00 12 06 F6 | 	mov	arg01, #0
152a0     0C 20 B1 FD | 	call	#__system___getiolock_0568
152a4     FD 12 02 F6 | 	mov	arg01, result1
152a8     D8 C2 B0 FD | 	call	#__system___lockmem
152ac     00 28 06 F6 | 	mov	local06, #0
152b0     00 30 06 F6 | 	mov	local10, #0
152b4     0A 32 06 F6 | 	mov	local11, #10
152b8     00 12 06 F6 | 	mov	arg01, #0
152bc     0F 15 02 F6 | 	mov	arg02, local01
152c0     00 16 06 F6 | 	mov	arg03, #0
152c4     0A 18 06 F6 | 	mov	arg04, #10
152c8     30 D0 B0 FD | 	call	#__system___basic_print_unsigned
152cc     FD 2A 02 F6 | 	mov	local07, result1
152d0     14 27 02 F6 | 	mov	local05, local06
152d4     15 27 02 F1 | 	add	local05, local07
152d8     00 12 06 F6 | 	mov	arg01, #0
152dc     D0 1F B1 FD | 	call	#__system___getiolock_0568
152e0     FD 00 68 FC | 	wrlong	#0, result1
152e4     00 FA 05 F6 | 	mov	result1, #0
152e8     00 2E 06 F6 | 	mov	local09, #0
152ec                 | LR__1770
152ec                 | '   if t1.result_type=result_float then print t1.result.fresult;
152ec     1E 22 0E F2 | 	cmp	local03, #30 wz
152f0     30 00 90 5D |  if_ne	jmp	#LR__1771
152f4     00 12 06 F6 | 	mov	arg01, #0
152f8     B4 1F B1 FD | 	call	#__system___getiolock_0568
152fc     FD 12 02 F6 | 	mov	arg01, result1
15300     80 C2 B0 FD | 	call	#__system___lockmem
15304     00 12 06 F6 | 	mov	arg01, #0
15308     0F 15 02 F6 | 	mov	arg02, local01
1530c     00 16 06 F6 | 	mov	arg03, #0
15310     23 18 06 F6 | 	mov	arg04, #35
15314     40 F6 B0 FD | 	call	#__system___basic_print_float
15318     00 12 06 F6 | 	mov	arg01, #0
1531c     90 1F B1 FD | 	call	#__system___getiolock_0568
15320     FD 00 68 FC | 	wrlong	#0, result1
15324                 | LR__1771
15324                 | '   if t1.result_type=result_string then print t1.result.sresult;
15324     1F 22 0E F2 | 	cmp	local03, #31 wz
15328     2C 00 90 5D |  if_ne	jmp	#LR__1772
1532c     00 12 06 F6 | 	mov	arg01, #0
15330     7C 1F B1 FD | 	call	#__system___getiolock_0568
15334     FD 12 02 F6 | 	mov	arg01, result1
15338     48 C2 B0 FD | 	call	#__system___lockmem
1533c     00 12 06 F6 | 	mov	arg01, #0
15340     0F 15 02 F6 | 	mov	arg02, local01
15344     00 16 06 F6 | 	mov	arg03, #0
15348     2C CF B0 FD | 	call	#__system___basic_print_string
1534c     00 12 06 F6 | 	mov	arg01, #0
15350     5C 1F B1 FD | 	call	#__system___getiolock_0568
15354     FD 00 68 FC | 	wrlong	#0, result1
15358                 | LR__1772
15358                 | LR__1773
15358                 | ' if r=0 then 
15358     00 24 0E F2 | 	cmp	local04, #0 wz
1535c     1C 01 90 5D |  if_ne	jmp	#LR__1778
15360                 | '   if t1.result_type=result_int then print t1.result.iresult
15360     1C 22 0E F2 | 	cmp	local03, #28 wz
15364     40 00 90 5D |  if_ne	jmp	#LR__1774
15368     00 12 06 F6 | 	mov	arg01, #0
1536c     40 1F B1 FD | 	call	#__system___getiolock_0568
15370     FD 12 02 F6 | 	mov	arg01, result1
15374     0C C2 B0 FD | 	call	#__system___lockmem
15378     00 12 06 F6 | 	mov	arg01, #0
1537c     0F 15 02 F6 | 	mov	arg02, local01
15380     00 16 06 F6 | 	mov	arg03, #0
15384     0A 18 06 F6 | 	mov	arg04, #10
15388     30 CF B0 FD | 	call	#__system___basic_print_integer
1538c     00 12 06 F6 | 	mov	arg01, #0
15390     0A 14 06 F6 | 	mov	arg02, #10
15394     00 16 06 F6 | 	mov	arg03, #0
15398     84 CE B0 FD | 	call	#__system___basic_print_char
1539c     00 12 06 F6 | 	mov	arg01, #0
153a0     0C 1F B1 FD | 	call	#__system___getiolock_0568
153a4     FD 00 68 FC | 	wrlong	#0, result1
153a8                 | LR__1774
153a8                 | '   if t1.result_type=result_uint then print t1.result.uresult
153a8     1D 22 0E F2 | 	cmp	local03, #29 wz
153ac     40 00 90 5D |  if_ne	jmp	#LR__1775
153b0     00 12 06 F6 | 	mov	arg01, #0
153b4     F8 1E B1 FD | 	call	#__system___getiolock_0568
153b8     FD 12 02 F6 | 	mov	arg01, result1
153bc     C4 C1 B0 FD | 	call	#__system___lockmem
153c0     00 12 06 F6 | 	mov	arg01, #0
153c4     0F 15 02 F6 | 	mov	arg02, local01
153c8     00 16 06 F6 | 	mov	arg03, #0
153cc     0A 18 06 F6 | 	mov	arg04, #10
153d0     28 CF B0 FD | 	call	#__system___basic_print_unsigned
153d4     00 12 06 F6 | 	mov	arg01, #0
153d8     0A 14 06 F6 | 	mov	arg02, #10
153dc     00 16 06 F6 | 	mov	arg03, #0
153e0     3C CE B0 FD | 	call	#__system___basic_print_char
153e4     00 12 06 F6 | 	mov	arg01, #0
153e8     C4 1E B1 FD | 	call	#__system___getiolock_0568
153ec     FD 00 68 FC | 	wrlong	#0, result1
153f0                 | LR__1775
153f0                 | '   if t1.result_type=result_float then print t1.result.fresult
153f0     1E 22 0E F2 | 	cmp	local03, #30 wz
153f4     40 00 90 5D |  if_ne	jmp	#LR__1776
153f8     00 12 06 F6 | 	mov	arg01, #0
153fc     B0 1E B1 FD | 	call	#__system___getiolock_0568
15400     FD 12 02 F6 | 	mov	arg01, result1
15404     7C C1 B0 FD | 	call	#__system___lockmem
15408     00 12 06 F6 | 	mov	arg01, #0
1540c     0F 15 02 F6 | 	mov	arg02, local01
15410     00 16 06 F6 | 	mov	arg03, #0
15414     23 18 06 F6 | 	mov	arg04, #35
15418     3C F5 B0 FD | 	call	#__system___basic_print_float
1541c     00 12 06 F6 | 	mov	arg01, #0
15420     0A 14 06 F6 | 	mov	arg02, #10
15424     00 16 06 F6 | 	mov	arg03, #0
15428     F4 CD B0 FD | 	call	#__system___basic_print_char
1542c     00 12 06 F6 | 	mov	arg01, #0
15430     7C 1E B1 FD | 	call	#__system___getiolock_0568
15434     FD 00 68 FC | 	wrlong	#0, result1
15438                 | LR__1776
15438                 | '   if t1.result_type=result_string then print t1.result.sresult
15438     1F 22 0E F2 | 	cmp	local03, #31 wz
1543c     3C 00 90 5D |  if_ne	jmp	#LR__1777
15440     00 12 06 F6 | 	mov	arg01, #0
15444     68 1E B1 FD | 	call	#__system___getiolock_0568
15448     FD 12 02 F6 | 	mov	arg01, result1
1544c     34 C1 B0 FD | 	call	#__system___lockmem
15450     00 12 06 F6 | 	mov	arg01, #0
15454     0F 15 02 F6 | 	mov	arg02, local01
15458     00 16 06 F6 | 	mov	arg03, #0
1545c     18 CE B0 FD | 	call	#__system___basic_print_string
15460     00 12 06 F6 | 	mov	arg01, #0
15464     0A 14 06 F6 | 	mov	arg02, #10
15468     00 16 06 F6 | 	mov	arg03, #0
1546c     B0 CD B0 FD | 	call	#__system___basic_print_char
15470     00 12 06 F6 | 	mov	arg01, #0
15474     38 1E B1 FD | 	call	#__system___getiolock_0568
15478     FD 00 68 FC | 	wrlong	#0, result1
1547c                 | LR__1777
1547c                 | LR__1778
1547c                 | ' if r=print_mod_empty then print
1547c     20 24 0E F2 | 	cmp	local04, #32 wz
15480     2C 00 90 5D |  if_ne	jmp	#LR__1779
15484     00 12 06 F6 | 	mov	arg01, #0
15488     24 1E B1 FD | 	call	#__system___getiolock_0568
1548c     FD 12 02 F6 | 	mov	arg01, result1
15490     F0 C0 B0 FD | 	call	#__system___lockmem
15494     00 12 06 F6 | 	mov	arg01, #0
15498     0A 14 06 F6 | 	mov	arg02, #10
1549c     00 16 06 F6 | 	mov	arg03, #0
154a0     7C CD B0 FD | 	call	#__system___basic_print_char
154a4     00 12 06 F6 | 	mov	arg01, #0
154a8     04 1E B1 FD | 	call	#__system___getiolock_0568
154ac     FD 00 68 FC | 	wrlong	#0, result1
154b0                 | LR__1779
154b0                 | LR__1780
154b0     A7 F0 03 F6 | 	mov	ptra, fp
154b4     B2 00 A0 FD | 	call	#popregs_
154b8                 | _do_print_ret
154b8     2D 00 64 FD | 	ret
154bc                 | 
154bc                 | ' 
154bc                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
154bc                 | ' 
154bc                 | ' sub do_push
154bc                 | _do_push
154bc                 | ' if stackpointer<maxstack then 
154bc     43 00 00 FF 
154c0     58 E4 05 F1 | 	add	objptr, ##34392
154c4     F2 00 02 FB | 	rdlong	_var01, objptr
154c8     43 00 00 FF 
154cc     58 E4 85 F1 | 	sub	objptr, ##34392
154d0     01 00 00 FF 
154d4     00 00 56 F2 | 	cmps	_var01, ##512 wc
154d8     F8 00 90 3D |  if_ae	jmp	#LR__1790
154dc     4A 00 00 FF 
154e0     80 E4 05 F1 | 	add	objptr, ##38016
154e4     F2 02 02 FB | 	rdlong	_var02, objptr
154e8     01 05 02 F6 | 	mov	_var03, _var02
154ec     01 04 66 F0 | 	shl	_var03, #1
154f0     01 05 02 F1 | 	add	_var03, _var02
154f4     02 04 66 F0 | 	shl	_var03, #2
154f8     03 00 00 FF 
154fc     04 E4 85 F1 | 	sub	objptr, ##1540
15500     F2 04 02 F1 | 	add	_var03, objptr
15504     02 01 02 FB | 	rdlong	_var01, _var03
15508     04 04 06 F1 | 	add	_var03, #4
1550c     02 07 02 FB | 	rdlong	_var04, _var03
15510     01 05 02 F6 | 	mov	_var03, _var02
15514     01 04 66 F0 | 	shl	_var03, #1
15518     01 05 02 F1 | 	add	_var03, _var02
1551c     02 04 66 F0 | 	shl	_var03, #2
15520     F2 04 02 F1 | 	add	_var03, objptr
15524     08 04 06 F1 | 	add	_var03, #8
15528     02 03 02 FB | 	rdlong	_var02, _var03
1552c     04 00 00 FF 
15530     24 E4 85 F1 | 	sub	objptr, ##2084
15534     F2 04 02 FB | 	rdlong	_var03, objptr
15538     02 09 02 F6 | 	mov	_var05, _var03
1553c     01 08 66 F0 | 	shl	_var05, #1
15540     02 09 02 F1 | 	add	_var05, _var03
15544     02 08 66 F0 | 	shl	_var05, #2
15548     0C 00 00 FF 
1554c     0C E4 85 F1 | 	sub	objptr, ##6156
15550     F2 08 02 F1 | 	add	_var05, objptr
15554     04 01 62 FC | 	wrlong	_var01, _var05
15558     0C 00 00 FF 
1555c     0C E4 05 F1 | 	add	objptr, ##6156
15560     F2 08 02 FB | 	rdlong	_var05, objptr
15564     04 05 02 F6 | 	mov	_var03, _var05
15568     01 04 66 F0 | 	shl	_var03, #1
1556c     04 05 02 F1 | 	add	_var03, _var05
15570     02 04 66 F0 | 	shl	_var03, #2
15574     0C 00 00 FF 
15578     0C E4 85 F1 | 	sub	objptr, ##6156
1557c     F2 04 02 F1 | 	add	_var03, objptr
15580     04 04 06 F1 | 	add	_var03, #4
15584     02 07 62 FC | 	wrlong	_var04, _var03
15588     0C 00 00 FF 
1558c     0C E4 05 F1 | 	add	objptr, ##6156
15590     F2 08 02 FB | 	rdlong	_var05, objptr
15594     04 07 02 F6 | 	mov	_var04, _var05
15598     01 06 66 F0 | 	shl	_var04, #1
1559c     04 07 02 F1 | 	add	_var04, _var05
155a0     02 06 66 F0 | 	shl	_var04, #2
155a4     0C 00 00 FF 
155a8     0C E4 85 F1 | 	sub	objptr, ##6156
155ac     F2 06 02 F1 | 	add	_var04, objptr
155b0     08 06 06 F1 | 	add	_var04, #8
155b4     03 03 62 FC | 	wrlong	_var02, _var04
155b8     0C 00 00 FF 
155bc     0C E4 05 F1 | 	add	objptr, ##6156
155c0     F2 00 02 FB | 	rdlong	_var01, objptr
155c4     01 00 06 F1 | 	add	_var01, #1
155c8     F2 00 62 FC | 	wrlong	_var01, objptr
155cc     43 00 00 FF 
155d0     58 E4 85 F1 | 	sub	objptr, ##34392
155d4                 | LR__1790
155d4                 | _do_push_ret
155d4     2D 00 64 FD | 	ret
155d8                 | 
155d8                 | ' 
155d8                 | ' '-------------------- put
155d8                 | ' 
155d8                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
155d8                 | _do_put
155d8     03 4A 05 F6 | 	mov	COUNT_, #3
155dc     A8 00 A0 FD | 	call	#pushregs_
155e0     28 F0 07 F1 | 	add	ptra, #40
155e4     4A 00 00 FF 
155e8     80 E4 05 F1 | 	add	objptr, ##38016
155ec     F2 1A 02 FB | 	rdlong	arg05, objptr
155f0     0D 19 02 F6 | 	mov	arg04, arg05
155f4     01 18 66 F0 | 	shl	arg04, #1
155f8     0D 19 02 F1 | 	add	arg04, arg05
155fc     02 18 66 F0 | 	shl	arg04, #2
15600     03 00 00 FF 
15604     04 E4 85 F1 | 	sub	objptr, ##1540
15608     F2 18 02 F1 | 	add	arg04, objptr
1560c     0C 1B 02 FB | 	rdlong	arg05, arg04
15610     A7 1A 62 FC | 	wrlong	arg05, fp
15614                 | ' 
15614                 | ' numpar=compiledline(lineptr_e).result.uresult
15614                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
15614     04 1A 0E F2 | 	cmp	arg05, #4 wz
15618     47 00 00 FF 
1561c     7C E4 85 F1 | 	sub	objptr, ##36476
15620     48 00 90 5D |  if_ne	jmp	#LR__1800
15624     B0 61 BF FD | 	call	#_pop
15628     FF 1A 02 F6 | 	mov	arg05, result3
1562c     1C 4E 05 F1 | 	add	fp, #28
15630     A7 FA 61 FC | 	wrlong	result1, fp
15634     04 4E 05 F1 | 	add	fp, #4
15638     A7 FC 61 FC | 	wrlong	result2, fp
1563c     04 4E 05 F1 | 	add	fp, #4
15640     A7 1A 62 FC | 	wrlong	arg05, fp
15644     08 4E 85 F1 | 	sub	fp, #8
15648     A7 12 02 F6 | 	mov	arg01, fp
1564c     1C 4E 85 F1 | 	sub	fp, #28
15650     68 63 BF FD | 	call	#_converttoint
15654     52 00 00 FF 
15658     18 E4 05 F1 | 	add	objptr, ##42008
1565c     F2 FA 61 FC | 	wrlong	result1, objptr
15660     52 00 00 FF 
15664     18 E4 85 F1 | 	sub	objptr, ##42008
15668     18 00 90 FD | 	jmp	#LR__1801
1566c                 | LR__1800
1566c     52 00 00 FF 
15670     18 E4 05 F1 | 	add	objptr, ##42008
15674     FF FF FF FF 
15678     F2 FE 6B FC | 	wrlong	##-1, objptr
1567c     52 00 00 FF 
15680     18 E4 85 F1 | 	sub	objptr, ##42008
15684                 | LR__1801
15684                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
15684     A7 1A 02 FB | 	rdlong	arg05, fp
15688     03 1A 56 F2 | 	cmps	arg05, #3 wc
1568c     40 00 90 CD |  if_b	jmp	#LR__1802
15690     44 61 BF FD | 	call	#_pop
15694     FF 1A 02 F6 | 	mov	arg05, result3
15698     1C 4E 05 F1 | 	add	fp, #28
1569c     A7 FA 61 FC | 	wrlong	result1, fp
156a0     04 4E 05 F1 | 	add	fp, #4
156a4     A7 FC 61 FC | 	wrlong	result2, fp
156a8     04 4E 05 F1 | 	add	fp, #4
156ac     A7 1A 62 FC | 	wrlong	arg05, fp
156b0     08 4E 85 F1 | 	sub	fp, #8
156b4     A7 12 02 F6 | 	mov	arg01, fp
156b8     1C 4E 85 F1 | 	sub	fp, #28
156bc     FC 62 BF FD | 	call	#_converttoint
156c0     08 4E 05 F1 | 	add	fp, #8
156c4     A7 FA 61 FC | 	wrlong	result1, fp
156c8     08 4E 85 F1 | 	sub	fp, #8
156cc     0C 00 90 FD | 	jmp	#LR__1803
156d0                 | LR__1802
156d0     08 4E 05 F1 | 	add	fp, #8
156d4     A7 02 68 FC | 	wrlong	#1, fp
156d8     08 4E 85 F1 | 	sub	fp, #8
156dc                 | LR__1803
156dc                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
156dc     A7 18 02 FB | 	rdlong	arg04, fp
156e0     02 18 56 F2 | 	cmps	arg04, #2 wc
156e4     3C 00 90 CD |  if_b	jmp	#LR__1804
156e8     EC 60 BF FD | 	call	#_pop
156ec     FF 18 02 F6 | 	mov	arg04, result3
156f0     1C 4E 05 F1 | 	add	fp, #28
156f4     A7 FA 61 FC | 	wrlong	result1, fp
156f8     04 4E 05 F1 | 	add	fp, #4
156fc     A7 FC 61 FC | 	wrlong	result2, fp
15700     04 4E 05 F1 | 	add	fp, #4
15704     A7 18 62 FC | 	wrlong	arg04, fp
15708     08 4E 85 F1 | 	sub	fp, #8
1570c     A7 12 02 F6 | 	mov	arg01, fp
15710     1C 4E 85 F1 | 	sub	fp, #28
15714     A4 62 BF FD | 	call	#_converttoint
15718     0C 4E 05 F1 | 	add	fp, #12
1571c     A7 FA 61 FC | 	wrlong	result1, fp
15720     0C 4E 85 F1 | 	sub	fp, #12
15724                 | LR__1804
15724     B0 60 BF FD | 	call	#_pop
15728     FF 18 02 F6 | 	mov	arg04, result3
1572c     1C 4E 05 F1 | 	add	fp, #28
15730     A7 FA 61 FC | 	wrlong	result1, fp
15734     04 4E 05 F1 | 	add	fp, #4
15738     A7 FC 61 FC | 	wrlong	result2, fp
1573c     04 4E 05 F1 | 	add	fp, #4
15740     A7 18 62 FC | 	wrlong	arg04, fp
15744     08 4E 85 F1 | 	sub	fp, #8
15748     A7 12 02 F6 | 	mov	arg01, fp
1574c     1C 4E 85 F1 | 	sub	fp, #28
15750     68 62 BF FD | 	call	#_converttoint
15754     04 4E 05 F1 | 	add	fp, #4
15758     A7 FA 61 FC | 	wrlong	result1, fp
1575c     10 4E 05 F1 | 	add	fp, #16
15760     A7 1E 02 FB | 	rdlong	local01, fp
15764     14 4E 85 F1 | 	sub	fp, #20
15768     02 1E 66 F0 | 	shl	local01, #2
1576c     50 00 00 FF 
15770     C4 E4 05 F1 | 	add	objptr, ##41156
15774     F2 1E 02 F1 | 	add	local01, objptr
15778     0F 01 68 FC | 	wrlong	#0, local01
1577c                 | ' t1=pop() : channel=converttoint(t1)
1577c                 | ' getres(j)=0
1577c                 | ' if pos>=0 then
1577c     01 00 00 FF 
15780     54 E5 05 F1 | 	add	objptr, ##852
15784     F2 20 02 FB | 	rdlong	local02, objptr
15788     52 00 00 FF 
1578c     18 E4 85 F1 | 	sub	objptr, ##42008
15790     00 20 56 F2 | 	cmps	local02, #0 wc
15794     C0 01 90 CD |  if_b	jmp	#LR__1810
15798     10 4E 05 F1 | 	add	fp, #16
1579c     A7 00 68 FC | 	wrlong	#0, fp
157a0     10 4E 85 F1 | 	sub	fp, #16
157a4                 | '    i=0: do
157a4                 | LR__1805
157a4     14 4E 05 F1 | 	add	fp, #20
157a8     A7 00 68 FC | 	wrlong	#0, fp
157ac     14 4E 85 F1 | 	sub	fp, #20
157b0                 | '    j=0: do    
157b0                 | LR__1806
157b0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
157b0     0C 4E 05 F1 | 	add	fp, #12
157b4     A7 20 02 FB | 	rdlong	local02, fp
157b8     0C 4E 85 F1 | 	sub	fp, #12
157bc     00 04 00 FF 
157c0     00 20 56 F2 | 	cmps	local02, ##524288 wc
157c4     4C 00 90 3D |  if_ae	jmp	#LR__1807
157c8     14 4E 05 F1 | 	add	fp, #20
157cc     A7 20 02 FB | 	rdlong	local02, fp
157d0     10 1F 02 F6 | 	mov	local01, local02
157d4     4E 00 00 FF 
157d8     B4 E4 05 F1 | 	add	objptr, ##40116
157dc     F2 1E 02 F1 | 	add	local01, objptr
157e0     08 4E 85 F1 | 	sub	fp, #8
157e4     A7 12 02 FB | 	rdlong	arg01, fp
157e8     04 4E 05 F1 | 	add	fp, #4
157ec     A7 18 02 FB | 	rdlong	arg04, fp
157f0     0A 18 66 F0 | 	shl	arg04, #10
157f4     0C 13 02 F1 | 	add	arg01, arg04
157f8     10 4E 85 F1 | 	sub	fp, #16
157fc     10 13 02 F1 | 	add	arg01, local02
15800     09 FB C1 FA | 	rdbyte	result1, arg01
15804     4E 00 00 FF 
15808     B4 E4 85 F1 | 	sub	objptr, ##40116
1580c     0F FB 41 FC | 	wrbyte	result1, local01
15810     48 00 90 FD | 	jmp	#LR__1808
15814                 | LR__1807
15814     14 4E 05 F1 | 	add	fp, #20
15818     A7 20 02 FB | 	rdlong	local02, fp
1581c     10 1F 02 F6 | 	mov	local01, local02
15820     4E 00 00 FF 
15824     B4 E4 05 F1 | 	add	objptr, ##40116
15828     F2 1E 02 F1 | 	add	local01, objptr
1582c     08 4E 85 F1 | 	sub	fp, #8
15830     A7 12 02 FB | 	rdlong	arg01, fp
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 18 02 FB | 	rdlong	arg04, fp
1583c     0A 18 66 F0 | 	shl	arg04, #10
15840     0C 13 02 F1 | 	add	arg01, arg04
15844     10 4E 85 F1 | 	sub	fp, #16
15848     10 13 02 F1 | 	add	arg01, local02
1584c     4E 00 00 FF 
15850     B4 E4 85 F1 | 	sub	objptr, ##40116
15854     D0 89 B0 FD | 	call	#_pspeek
15858     0F FB 41 FC | 	wrbyte	result1, local01
1585c                 | LR__1808
1585c     14 4E 05 F1 | 	add	fp, #20
15860     A7 20 02 FB | 	rdlong	local02, fp
15864     01 20 06 F1 | 	add	local02, #1
15868     A7 20 62 FC | 	wrlong	local02, fp
1586c     14 4E 85 F1 | 	sub	fp, #20
15870     02 00 00 FF 
15874     00 20 56 F2 | 	cmps	local02, ##1024 wc
15878     2C 00 90 3D |  if_ae	jmp	#LR__1809
1587c     10 4E 05 F1 | 	add	fp, #16
15880     A7 1E 02 FB | 	rdlong	local01, fp
15884     0A 1E 66 F0 | 	shl	local01, #10
15888     04 4E 05 F1 | 	add	fp, #4
1588c     A7 20 02 FB | 	rdlong	local02, fp
15890     10 1F 02 F1 | 	add	local01, local02
15894     0C 4E 85 F1 | 	sub	fp, #12
15898     A7 20 02 FB | 	rdlong	local02, fp
1589c     08 4E 85 F1 | 	sub	fp, #8
158a0     10 1F 5A F2 | 	cmps	local01, local02 wcz
158a4     08 FF 9F ED |  if_be	jmp	#LR__1806
158a8                 | LR__1809
158a8                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
158a8     04 4E 05 F1 | 	add	fp, #4
158ac     A7 12 02 FB | 	rdlong	arg01, fp
158b0     52 00 00 FF 
158b4     18 E4 05 F1 | 	add	objptr, ##42008
158b8     F2 14 02 FB | 	rdlong	arg02, objptr
158bc     01 14 06 F1 | 	add	arg02, #1
158c0     03 00 00 FF 
158c4     64 E5 85 F1 | 	sub	objptr, ##1892
158c8     F2 16 02 F6 | 	mov	arg03, objptr
158cc     4E 00 00 FF 
158d0     B4 E4 85 F1 | 	sub	objptr, ##40116
158d4     04 4E 05 F1 | 	add	fp, #4
158d8     A7 18 02 FB | 	rdlong	arg04, fp
158dc     08 4E 85 F1 | 	sub	fp, #8
158e0     01 1A 06 F6 | 	mov	arg05, #1
158e4     A0 CA B0 FD | 	call	#__system___basic_put
158e8     18 4E 05 F1 | 	add	fp, #24
158ec     A7 FA 61 FC | 	wrlong	result1, fp
158f0     14 4E 85 F1 | 	sub	fp, #20
158f4     A7 1E 02 FB | 	rdlong	local01, fp
158f8     02 1E 66 F0 | 	shl	local01, #2
158fc     50 00 00 FF 
15900     C4 E4 05 F1 | 	add	objptr, ##41156
15904     F2 1E 02 F1 | 	add	local01, objptr
15908     0F FB 61 FC | 	wrlong	result1, local01
1590c                 | '    if 1024*i+j>amount then exit loop
1590c     0C 4E 05 F1 | 	add	fp, #12
15910     A7 20 02 FB | 	rdlong	local02, fp
15914     0A 20 66 F0 | 	shl	local02, #10
15918     04 4E 05 F1 | 	add	fp, #4
1591c     A7 1E 02 FB | 	rdlong	local01, fp
15920     0F 21 02 F1 | 	add	local02, local01
15924     0C 4E 85 F1 | 	sub	fp, #12
15928     A7 1E 02 FB | 	rdlong	local01, fp
1592c     08 4E 85 F1 | 	sub	fp, #8
15930     0F 21 5A F2 | 	cmps	local02, local01 wcz
15934     50 00 00 FF 
15938     C4 E4 85 F1 | 	sub	objptr, ##41156
1593c     CC 01 90 1D |  if_a	jmp	#LR__1817
15940     10 4E 05 F1 | 	add	fp, #16
15944     A7 20 02 FB | 	rdlong	local02, fp
15948     01 20 06 F1 | 	add	local02, #1
1594c     A7 20 62 FC | 	wrlong	local02, fp
15950     10 4E 85 F1 | 	sub	fp, #16
15954     4C FE 9F FD | 	jmp	#LR__1805
15958                 | LR__1810
15958     10 4E 05 F1 | 	add	fp, #16
1595c     A7 00 68 FC | 	wrlong	#0, fp
15960     10 4E 85 F1 | 	sub	fp, #16
15964                 | '    i=0: do
15964                 | LR__1811
15964     14 4E 05 F1 | 	add	fp, #20
15968     A7 00 68 FC | 	wrlong	#0, fp
1596c     14 4E 85 F1 | 	sub	fp, #20
15970                 | '    j=0: do  
15970                 | LR__1812
15970                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
15970     0C 4E 05 F1 | 	add	fp, #12
15974     A7 20 02 FB | 	rdlong	local02, fp
15978     0C 4E 85 F1 | 	sub	fp, #12
1597c     00 04 00 FF 
15980     00 20 56 F2 | 	cmps	local02, ##524288 wc
15984     4C 00 90 3D |  if_ae	jmp	#LR__1813
15988     14 4E 05 F1 | 	add	fp, #20
1598c     A7 20 02 FB | 	rdlong	local02, fp
15990     10 1F 02 F6 | 	mov	local01, local02
15994     4E 00 00 FF 
15998     B4 E4 05 F1 | 	add	objptr, ##40116
1599c     F2 1E 02 F1 | 	add	local01, objptr
159a0     08 4E 85 F1 | 	sub	fp, #8
159a4     A7 12 02 FB | 	rdlong	arg01, fp
159a8     04 4E 05 F1 | 	add	fp, #4
159ac     A7 18 02 FB | 	rdlong	arg04, fp
159b0     0A 18 66 F0 | 	shl	arg04, #10
159b4     0C 13 02 F1 | 	add	arg01, arg04
159b8     10 4E 85 F1 | 	sub	fp, #16
159bc     10 13 02 F1 | 	add	arg01, local02
159c0     09 FB C1 FA | 	rdbyte	result1, arg01
159c4     4E 00 00 FF 
159c8     B4 E4 85 F1 | 	sub	objptr, ##40116
159cc     0F FB 41 FC | 	wrbyte	result1, local01
159d0     48 00 90 FD | 	jmp	#LR__1814
159d4                 | LR__1813
159d4     14 4E 05 F1 | 	add	fp, #20
159d8     A7 20 02 FB | 	rdlong	local02, fp
159dc     10 1F 02 F6 | 	mov	local01, local02
159e0     4E 00 00 FF 
159e4     B4 E4 05 F1 | 	add	objptr, ##40116
159e8     F2 1E 02 F1 | 	add	local01, objptr
159ec     08 4E 85 F1 | 	sub	fp, #8
159f0     A7 12 02 FB | 	rdlong	arg01, fp
159f4     04 4E 05 F1 | 	add	fp, #4
159f8     A7 18 02 FB | 	rdlong	arg04, fp
159fc     0A 18 66 F0 | 	shl	arg04, #10
15a00     0C 13 02 F1 | 	add	arg01, arg04
15a04     10 4E 85 F1 | 	sub	fp, #16
15a08     10 13 02 F1 | 	add	arg01, local02
15a0c     4E 00 00 FF 
15a10     B4 E4 85 F1 | 	sub	objptr, ##40116
15a14     10 88 B0 FD | 	call	#_pspeek
15a18     0F FB 41 FC | 	wrbyte	result1, local01
15a1c                 | LR__1814
15a1c     14 4E 05 F1 | 	add	fp, #20
15a20     A7 20 02 FB | 	rdlong	local02, fp
15a24     01 20 06 F1 | 	add	local02, #1
15a28     A7 20 62 FC | 	wrlong	local02, fp
15a2c     14 4E 85 F1 | 	sub	fp, #20
15a30     02 00 00 FF 
15a34     00 20 56 F2 | 	cmps	local02, ##1024 wc
15a38     2C 00 90 3D |  if_ae	jmp	#LR__1815
15a3c     10 4E 05 F1 | 	add	fp, #16
15a40     A7 1E 02 FB | 	rdlong	local01, fp
15a44     0A 1E 66 F0 | 	shl	local01, #10
15a48     04 4E 05 F1 | 	add	fp, #4
15a4c     A7 20 02 FB | 	rdlong	local02, fp
15a50     10 1F 02 F1 | 	add	local01, local02
15a54     0C 4E 85 F1 | 	sub	fp, #12
15a58     A7 20 02 FB | 	rdlong	local02, fp
15a5c     08 4E 85 F1 | 	sub	fp, #8
15a60     10 1F 5A F2 | 	cmps	local01, local02 wcz
15a64     08 FF 9F ED |  if_be	jmp	#LR__1812
15a68                 | LR__1815
15a68                 | '    put #channel,,block(0),amount, r : getres(channel)=r
15a68     04 4E 05 F1 | 	add	fp, #4
15a6c     A7 12 02 FB | 	rdlong	arg01, fp
15a70     4E 00 00 FF 
15a74     B4 E4 05 F1 | 	add	objptr, ##40116
15a78     F2 16 02 F6 | 	mov	arg03, objptr
15a7c     4E 00 00 FF 
15a80     B4 E4 85 F1 | 	sub	objptr, ##40116
15a84     04 4E 05 F1 | 	add	fp, #4
15a88     A7 18 02 FB | 	rdlong	arg04, fp
15a8c     08 4E 85 F1 | 	sub	fp, #8
15a90     00 14 06 F6 | 	mov	arg02, #0
15a94     01 1A 06 F6 | 	mov	arg05, #1
15a98     EC C8 B0 FD | 	call	#__system___basic_put
15a9c     18 4E 05 F1 | 	add	fp, #24
15aa0     A7 FA 61 FC | 	wrlong	result1, fp
15aa4     14 4E 85 F1 | 	sub	fp, #20
15aa8     A7 1E 02 FB | 	rdlong	local01, fp
15aac     02 1E 66 F0 | 	shl	local01, #2
15ab0     50 00 00 FF 
15ab4     C4 E4 05 F1 | 	add	objptr, ##41156
15ab8     F2 1E 02 F1 | 	add	local01, objptr
15abc     0F FB 61 FC | 	wrlong	result1, local01
15ac0                 | '    if 1024*i+j>amount then exit loop
15ac0     0C 4E 05 F1 | 	add	fp, #12
15ac4     A7 20 02 FB | 	rdlong	local02, fp
15ac8     0A 20 66 F0 | 	shl	local02, #10
15acc     04 4E 05 F1 | 	add	fp, #4
15ad0     A7 1E 02 FB | 	rdlong	local01, fp
15ad4     0F 21 02 F1 | 	add	local02, local01
15ad8     0C 4E 85 F1 | 	sub	fp, #12
15adc     A7 22 02 FB | 	rdlong	local03, fp
15ae0     08 4E 85 F1 | 	sub	fp, #8
15ae4     11 21 5A F2 | 	cmps	local02, local03 wcz
15ae8     50 00 00 FF 
15aec     C4 E4 85 F1 | 	sub	objptr, ##41156
15af0     18 00 90 1D |  if_a	jmp	#LR__1816
15af4     10 4E 05 F1 | 	add	fp, #16
15af8     A7 20 02 FB | 	rdlong	local02, fp
15afc     01 20 06 F1 | 	add	local02, #1
15b00     A7 20 62 FC | 	wrlong	local02, fp
15b04     10 4E 85 F1 | 	sub	fp, #16
15b08     58 FE 9F FD | 	jmp	#LR__1811
15b0c                 | LR__1816
15b0c                 | LR__1817
15b0c     A7 F0 03 F6 | 	mov	ptra, fp
15b10     B2 00 A0 FD | 	call	#popregs_
15b14                 | _do_put_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | ' 
15b18                 | ' '-------------------- rad
15b18                 | ' 
15b18                 | ' sub do_rad
15b18                 | _do_rad
15b18     51 00 00 FF 
15b1c     BC E5 05 F1 | 	add	objptr, ##41916
15b20     00 C0 9F FF 
15b24     F2 00 68 FC | 	wrlong	##1065353216, objptr
15b28     04 E4 05 F1 | 	add	objptr, #4
15b2c     00 C0 9F FF 
15b30     F2 00 68 FC | 	wrlong	##1065353216, objptr
15b34     51 00 00 FF 
15b38     C0 E5 85 F1 | 	sub	objptr, ##41920
15b3c                 | _do_rad_ret
15b3c     2D 00 64 FD | 	ret
15b40                 | 
15b40                 | ' 
15b40                 | ' '-------------------- rdpin
15b40                 | ' 
15b40                 | ' sub do_rdpin
15b40                 | _do_rdpin
15b40     00 4A 05 F6 | 	mov	COUNT_, #0
15b44     A8 00 A0 FD | 	call	#pushregs_
15b48     0C F0 07 F1 | 	add	ptra, #12
15b4c     88 5C BF FD | 	call	#_pop
15b50     A7 FA 61 FC | 	wrlong	result1, fp
15b54     04 4E 05 F1 | 	add	fp, #4
15b58     A7 FC 61 FC | 	wrlong	result2, fp
15b5c     04 4E 05 F1 | 	add	fp, #4
15b60     A7 FE 61 FC | 	wrlong	result3, fp
15b64     08 4E 85 F1 | 	sub	fp, #8
15b68     A7 12 02 F6 | 	mov	arg01, fp
15b6c     4C 5E BF FD | 	call	#_converttoint
15b70     FD FA 89 FA | 	rdpin	result1, result1
15b74     52 00 00 FF 
15b78     1C E4 05 F1 | 	add	objptr, ##42012
15b7c     F2 FA 61 FC | 	wrlong	result1, objptr
15b80     52 00 00 FF 
15b84     1C E4 85 F1 | 	sub	objptr, ##42012
15b88     08 4E 05 F1 | 	add	fp, #8
15b8c     A7 3A 68 FC | 	wrlong	#29, fp
15b90     08 4E 85 F1 | 	sub	fp, #8
15b94     A7 08 68 FC | 	wrlong	#4, fp
15b98     A7 12 02 F6 | 	mov	arg01, fp
15b9c     D0 5C BF FD | 	call	#_push
15ba0     A7 F0 03 F6 | 	mov	ptra, fp
15ba4     B2 00 A0 FD | 	call	#popregs_
15ba8                 | _do_rdpin_ret
15ba8     2D 00 64 FD | 	ret
15bac                 | 
15bac                 | ' 
15bac                 | ' '------------------- release
15bac                 | ' 
15bac                 | ' sub do_release
15bac                 | _do_release
15bac     00 4A 05 F6 | 	mov	COUNT_, #0
15bb0     A8 00 A0 FD | 	call	#pushregs_
15bb4     10 F0 07 F1 | 	add	ptra, #16
15bb8     1C 5C BF FD | 	call	#_pop
15bbc     FF 14 02 F6 | 	mov	arg02, result3
15bc0     A7 FA 61 FC | 	wrlong	result1, fp
15bc4     04 4E 05 F1 | 	add	fp, #4
15bc8     A7 FC 61 FC | 	wrlong	result2, fp
15bcc     04 4E 05 F1 | 	add	fp, #4
15bd0     A7 14 62 FC | 	wrlong	arg02, fp
15bd4     08 4E 85 F1 | 	sub	fp, #8
15bd8     A7 12 02 F6 | 	mov	arg01, fp
15bdc     DC 5D BF FD | 	call	#_converttoint
15be0     0C 4E 05 F1 | 	add	fp, #12
15be4     A7 FA 61 FC | 	wrlong	result1, fp
15be8                 | ' 
15be8                 | ' t1=pop()
15be8                 | ' channel=converttoint(t1)
15be8                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
15be8     0C 4E 85 F1 | 	sub	fp, #12
15bec     00 FA 55 F2 | 	cmps	result1, #0 wc
15bf0     44 00 90 CD |  if_b	jmp	#LR__1820
15bf4     0C 4E 05 F1 | 	add	fp, #12
15bf8     A7 14 02 FB | 	rdlong	arg02, fp
15bfc     0C 4E 85 F1 | 	sub	fp, #12
15c00     08 14 56 F2 | 	cmps	arg02, #8 wc
15c04     30 00 90 3D |  if_ae	jmp	#LR__1820
15c08     37 00 00 FF 
15c0c     10 E4 05 F1 | 	add	objptr, ##28176
15c10     F2 12 02 FB | 	rdlong	arg01, objptr
15c14     37 00 00 FF 
15c18     10 E4 85 F1 | 	sub	objptr, ##28176
15c1c     0C 4E 05 F1 | 	add	fp, #12
15c20     A7 14 02 FB | 	rdlong	arg02, fp
15c24     0C 4E 85 F1 | 	sub	fp, #12
15c28     06 14 66 F0 | 	shl	arg02, #6
15c2c     0A 13 02 F1 | 	add	arg01, arg02
15c30     2C 12 06 F1 | 	add	arg01, #44
15c34     09 FF 69 FC | 	wrlong	#255, arg01
15c38                 | LR__1820
15c38     A7 F0 03 F6 | 	mov	ptra, fp
15c3c     B2 00 A0 FD | 	call	#popregs_
15c40                 | _do_release_ret
15c40     2D 00 64 FD | 	ret
15c44                 | 
15c44                 | ' 
15c44                 | ' '------------------- return
15c44                 | ' 
15c44                 | ' sub do_return()
15c44                 | _do_return
15c44                 | ' if gosubtop>0 then
15c44     50 00 00 FF 
15c48     0C E5 05 F1 | 	add	objptr, ##41228
15c4c     F2 00 02 FB | 	rdlong	_var01, objptr
15c50     50 00 00 FF 
15c54     0C E5 85 F1 | 	sub	objptr, ##41228
15c58     01 00 56 F2 | 	cmps	_var01, #1 wc
15c5c     8C 00 90 CD |  if_b	jmp	#LR__1830
15c60     50 00 00 FF 
15c64     0C E5 05 F1 | 	add	objptr, ##41228
15c68     F2 00 02 FB | 	rdlong	_var01, objptr
15c6c     03 00 66 F0 | 	shl	_var01, #3
15c70     03 00 00 FF 
15c74     60 E5 85 F1 | 	sub	objptr, ##1888
15c78     F2 00 02 F1 | 	add	_var01, objptr
15c7c     00 01 02 FB | 	rdlong	_var01, _var01
15c80     03 00 00 FF 
15c84     0C E5 05 F1 | 	add	objptr, ##1804
15c88     F2 00 62 FC | 	wrlong	_var01, objptr
15c8c     54 E4 05 F1 | 	add	objptr, #84
15c90     F2 00 02 FB | 	rdlong	_var01, objptr
15c94     03 00 66 F0 | 	shl	_var01, #3
15c98     03 00 00 FF 
15c9c     60 E5 85 F1 | 	sub	objptr, ##1888
15ca0     F2 00 02 F1 | 	add	_var01, objptr
15ca4     04 00 06 F1 | 	add	_var01, #4
15ca8     00 01 02 FB | 	rdlong	_var01, _var01
15cac     03 00 00 FF 
15cb0     10 E5 05 F1 | 	add	objptr, ##1808
15cb4     F2 00 62 FC | 	wrlong	_var01, objptr
15cb8     06 00 00 FF 
15cbc     40 E4 85 F1 | 	sub	objptr, ##3136
15cc0     F2 00 02 FB | 	rdlong	_var01, objptr
15cc4     01 00 86 F1 | 	sub	_var01, #1
15cc8     04 E4 05 F1 | 	add	objptr, #4
15ccc     F2 00 62 FC | 	wrlong	_var01, objptr
15cd0     06 00 00 FF 
15cd4     8C E4 05 F1 | 	add	objptr, ##3212
15cd8     F2 00 02 FB | 	rdlong	_var01, objptr
15cdc     01 00 86 F1 | 	sub	_var01, #1
15ce0     F2 00 62 FC | 	wrlong	_var01, objptr
15ce4     50 00 00 FF 
15ce8     0C E5 85 F1 | 	sub	objptr, ##41228
15cec                 | LR__1830
15cec                 | _do_return_ret
15cec     2D 00 64 FD | 	ret
15cf0                 | 
15cf0                 | ' 
15cf0                 | ' '------------------- right$
15cf0                 | ' 
15cf0                 | ' sub do_right
15cf0                 | _do_right
15cf0     00 4A 05 F6 | 	mov	COUNT_, #0
15cf4     A8 00 A0 FD | 	call	#pushregs_
15cf8     14 F0 07 F1 | 	add	ptra, #20
15cfc     4A 00 00 FF 
15d00     80 E4 05 F1 | 	add	objptr, ##38016
15d04     F2 16 02 FB | 	rdlong	arg03, objptr
15d08     0B 15 02 F6 | 	mov	arg02, arg03
15d0c     01 14 66 F0 | 	shl	arg02, #1
15d10     0B 15 02 F1 | 	add	arg02, arg03
15d14     02 14 66 F0 | 	shl	arg02, #2
15d18     03 00 00 FF 
15d1c     04 E4 85 F1 | 	sub	objptr, ##1540
15d20     F2 14 02 F1 | 	add	arg02, objptr
15d24     0A 17 02 FB | 	rdlong	arg03, arg02
15d28     0C 4E 05 F1 | 	add	fp, #12
15d2c     A7 16 62 FC | 	wrlong	arg03, fp
15d30                 | ' 
15d30                 | ' numpar=compiledline(lineptr_e).result.uresult
15d30                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
15d30     0C 4E 85 F1 | 	sub	fp, #12
15d34     02 16 0E F2 | 	cmp	arg03, #2 wz
15d38     47 00 00 FF 
15d3c     7C E4 85 F1 | 	sub	objptr, ##36476
15d40     40 00 90 AD |  if_e	jmp	#LR__1840
15d44     00 12 06 F6 | 	mov	arg01, #0
15d48     64 15 B1 FD | 	call	#__system___getiolock_0568
15d4c     FD 12 02 F6 | 	mov	arg01, result1
15d50     30 B8 B0 FD | 	call	#__system___lockmem
15d54     8D 01 00 FF 
15d58     A5 14 06 F6 | 	mov	arg02, ##@LR__5595
15d5c     00 12 06 F6 | 	mov	arg01, #0
15d60     00 16 06 F6 | 	mov	arg03, #0
15d64     10 C5 B0 FD | 	call	#__system___basic_print_string
15d68     00 12 06 F6 | 	mov	arg01, #0
15d6c     40 15 B1 FD | 	call	#__system___getiolock_0568
15d70     FD 00 68 FC | 	wrlong	#0, result1
15d74     27 12 06 F6 | 	mov	arg01, #39
15d78     00 14 06 F6 | 	mov	arg02, #0
15d7c     44 82 B0 FD | 	call	#_printerror
15d80     EC 00 90 FD | 	jmp	#LR__1843
15d84                 | LR__1840
15d84     50 5A BF FD | 	call	#_pop
15d88     FF 16 02 F6 | 	mov	arg03, result3
15d8c     A7 FA 61 FC | 	wrlong	result1, fp
15d90     04 4E 05 F1 | 	add	fp, #4
15d94     A7 FC 61 FC | 	wrlong	result2, fp
15d98     04 4E 05 F1 | 	add	fp, #4
15d9c     A7 16 62 FC | 	wrlong	arg03, fp
15da0     08 4E 85 F1 | 	sub	fp, #8
15da4     A7 12 02 F6 | 	mov	arg01, fp
15da8     10 5C BF FD | 	call	#_converttoint
15dac     FD 16 02 F6 | 	mov	arg03, result1
15db0     10 4E 05 F1 | 	add	fp, #16
15db4     A7 16 62 FC | 	wrlong	arg03, fp
15db8     10 4E 85 F1 | 	sub	fp, #16
15dbc     18 5A BF FD | 	call	#_pop
15dc0     FF 16 02 F6 | 	mov	arg03, result3
15dc4     A7 FA 61 FC | 	wrlong	result1, fp
15dc8     04 4E 05 F1 | 	add	fp, #4
15dcc     A7 FC 61 FC | 	wrlong	result2, fp
15dd0     04 4E 05 F1 | 	add	fp, #4
15dd4     A7 16 62 FC | 	wrlong	arg03, fp
15dd8                 | ' t1=pop() : arg=converttoint(t1)
15dd8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15dd8     08 4E 85 F1 | 	sub	fp, #8
15ddc     2B 16 0E F2 | 	cmp	arg03, #43 wz
15de0     18 00 90 5D |  if_ne	jmp	#LR__1841
15de4     A7 12 02 FB | 	rdlong	arg01, fp
15de8     64 5B BF FD | 	call	#_convertstring
15dec     A7 FA 61 FC | 	wrlong	result1, fp
15df0     08 4E 05 F1 | 	add	fp, #8
15df4     A7 3E 68 FC | 	wrlong	#31, fp
15df8     08 4E 85 F1 | 	sub	fp, #8
15dfc                 | LR__1841
15dfc                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
15dfc     08 4E 05 F1 | 	add	fp, #8
15e00     A7 16 02 FB | 	rdlong	arg03, fp
15e04     08 4E 85 F1 | 	sub	fp, #8
15e08     1F 16 0E F2 | 	cmp	arg03, #31 wz
15e0c     40 00 90 AD |  if_e	jmp	#LR__1842
15e10     00 12 06 F6 | 	mov	arg01, #0
15e14     98 14 B1 FD | 	call	#__system___getiolock_0568
15e18     FD 12 02 F6 | 	mov	arg01, result1
15e1c     64 B7 B0 FD | 	call	#__system___lockmem
15e20     8D 01 00 FF 
15e24     AE 14 06 F6 | 	mov	arg02, ##@LR__5596
15e28     00 12 06 F6 | 	mov	arg01, #0
15e2c     00 16 06 F6 | 	mov	arg03, #0
15e30     44 C4 B0 FD | 	call	#__system___basic_print_string
15e34     00 12 06 F6 | 	mov	arg01, #0
15e38     74 14 B1 FD | 	call	#__system___getiolock_0568
15e3c     FD 00 68 FC | 	wrlong	#0, result1
15e40     0F 12 06 F6 | 	mov	arg01, #15
15e44     00 14 06 F6 | 	mov	arg02, #0
15e48     78 81 B0 FD | 	call	#_printerror
15e4c     20 00 90 FD | 	jmp	#LR__1843
15e50                 | LR__1842
15e50     A7 12 02 FB | 	rdlong	arg01, fp
15e54     10 4E 05 F1 | 	add	fp, #16
15e58     A7 14 02 FB | 	rdlong	arg02, fp
15e5c     10 4E 85 F1 | 	sub	fp, #16
15e60     24 D8 B0 FD | 	call	#__system__Right_S
15e64     A7 FA 61 FC | 	wrlong	result1, fp
15e68     A7 12 02 F6 | 	mov	arg01, fp
15e6c     00 5A BF FD | 	call	#_push
15e70                 | LR__1843
15e70     A7 F0 03 F6 | 	mov	ptra, fp
15e74     B2 00 A0 FD | 	call	#popregs_
15e78                 | _do_right_ret
15e78     2D 00 64 FD | 	ret
15e7c                 | 
15e7c                 | ' 
15e7c                 | ' '------------------- rnd
15e7c                 | ' 
15e7c                 | ' sub do_rnd
15e7c                 | _do_rnd
15e7c     01 4A 05 F6 | 	mov	COUNT_, #1
15e80     A8 00 A0 FD | 	call	#pushregs_
15e84     10 F0 07 F1 | 	add	ptra, #16
15e88     4A 00 00 FF 
15e8c     80 E4 05 F1 | 	add	objptr, ##38016
15e90     F2 1E 02 FB | 	rdlong	local01, objptr
15e94     0F 17 02 F6 | 	mov	arg03, local01
15e98     01 16 66 F0 | 	shl	arg03, #1
15e9c     0F 17 02 F1 | 	add	arg03, local01
15ea0     02 16 66 F0 | 	shl	arg03, #2
15ea4     03 00 00 FF 
15ea8     04 E4 85 F1 | 	sub	objptr, ##1540
15eac     F2 16 02 F1 | 	add	arg03, objptr
15eb0     0B 17 02 FB | 	rdlong	arg03, arg03
15eb4     0C 4E 05 F1 | 	add	fp, #12
15eb8     A7 16 62 FC | 	wrlong	arg03, fp
15ebc                 | ' 
15ebc                 | ' numpar=compiledline(lineptr_e).result.uresult
15ebc                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15ebc     0C 4E 85 F1 | 	sub	fp, #12
15ec0     02 16 16 F2 | 	cmp	arg03, #2 wc
15ec4     47 00 00 FF 
15ec8     7C E4 85 F1 | 	sub	objptr, ##36476
15ecc     40 00 90 CD |  if_b	jmp	#LR__1850
15ed0     00 12 06 F6 | 	mov	arg01, #0
15ed4     D8 13 B1 FD | 	call	#__system___getiolock_0568
15ed8     FD 12 02 F6 | 	mov	arg01, result1
15edc     A4 B6 B0 FD | 	call	#__system___lockmem
15ee0     8D 01 00 FF 
15ee4     B7 14 06 F6 | 	mov	arg02, ##@LR__5597
15ee8     00 12 06 F6 | 	mov	arg01, #0
15eec     00 16 06 F6 | 	mov	arg03, #0
15ef0     84 C3 B0 FD | 	call	#__system___basic_print_string
15ef4     00 12 06 F6 | 	mov	arg01, #0
15ef8     B4 13 B1 FD | 	call	#__system___getiolock_0568
15efc     FD 00 68 FC | 	wrlong	#0, result1
15f00     27 12 06 F6 | 	mov	arg01, #39
15f04     00 14 06 F6 | 	mov	arg02, #0
15f08     B8 80 B0 FD | 	call	#_printerror
15f0c     30 01 90 FD | 	jmp	#LR__1857
15f10                 | LR__1850
15f10                 | ' if numpar=0 then
15f10     0C 4E 05 F1 | 	add	fp, #12
15f14     A7 FE 09 FB | 	rdlong	result3, fp wz
15f18     0C 4E 85 F1 | 	sub	fp, #12
15f1c     20 00 90 5D |  if_ne	jmp	#LR__1851
15f20     08 4E 05 F1 | 	add	fp, #8
15f24     A7 3A 68 FC | 	wrlong	#29, fp
15f28     08 4E 85 F1 | 	sub	fp, #8
15f2c     1B FA 61 FD | 	getrnd	result1
15f30     A7 FA 61 FC | 	wrlong	result1, fp
15f34     A7 12 02 F6 | 	mov	arg01, fp
15f38     34 59 BF FD | 	call	#_push
15f3c     00 01 90 FD | 	jmp	#LR__1856
15f40                 | LR__1851
15f40     94 58 BF FD | 	call	#_pop
15f44     A7 FA 61 FC | 	wrlong	result1, fp
15f48     04 4E 05 F1 | 	add	fp, #4
15f4c     A7 FC 61 FC | 	wrlong	result2, fp
15f50     04 4E 05 F1 | 	add	fp, #4
15f54     A7 FE 61 FC | 	wrlong	result3, fp
15f58                 | '   t1=pop()
15f58                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15f58     08 4E 85 F1 | 	sub	fp, #8
15f5c     1C FE 0D F2 | 	cmp	result3, #28 wz
15f60     08 4E 05 51 |  if_ne	add	fp, #8
15f64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15f68     08 4E 85 51 |  if_ne	sub	fp, #8
15f6c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15f70     2C 00 90 5D |  if_ne	jmp	#LR__1852
15f74     1B FA 61 FD | 	getrnd	result1
15f78     A7 1E 02 FB | 	rdlong	local01, fp
15f7c     0F FB 11 FD | 	qdiv	result1, local01
15f80     A7 12 02 F6 | 	mov	arg01, fp
15f84     19 1E 62 FD | 	getqy	local01
15f88     A7 1E 62 FC | 	wrlong	local01, fp
15f8c     08 4E 05 F1 | 	add	fp, #8
15f90     A7 3A 68 FC | 	wrlong	#29, fp
15f94     08 4E 85 F1 | 	sub	fp, #8
15f98     D4 58 BF FD | 	call	#_push
15f9c     A0 00 90 FD | 	jmp	#LR__1855
15fa0                 | LR__1852
15fa0     08 4E 05 F1 | 	add	fp, #8
15fa4     A7 1E 02 FB | 	rdlong	local01, fp
15fa8     08 4E 85 F1 | 	sub	fp, #8
15fac     1E 1E 0E F2 | 	cmp	local01, #30 wz
15fb0     48 00 90 5D |  if_ne	jmp	#LR__1853
15fb4     A7 12 02 FB | 	rdlong	arg01, fp
15fb8     00 C0 24 FF 
15fbc     00 14 06 F6 | 	mov	arg02, ##1233125376
15fc0     80 E5 B0 FD | 	call	#__system___float_div
15fc4     FD 1E 02 F6 | 	mov	local01, result1
15fc8     1B 12 62 FD | 	getrnd	arg01
15fcc     74 13 06 F4 | 	bitl	arg01, #372
15fd0     68 DF B0 FD | 	call	#__system___float_fromuns
15fd4     FD 14 02 F6 | 	mov	arg02, result1
15fd8     0F 13 02 F6 | 	mov	arg01, local01
15fdc     60 E3 B0 FD | 	call	#__system___float_mul
15fe0     A7 FA 61 FC | 	wrlong	result1, fp
15fe4     08 4E 05 F1 | 	add	fp, #8
15fe8     A7 3C 68 FC | 	wrlong	#30, fp
15fec     08 4E 85 F1 | 	sub	fp, #8
15ff0     A7 12 02 F6 | 	mov	arg01, fp
15ff4     78 58 BF FD | 	call	#_push
15ff8     44 00 90 FD | 	jmp	#LR__1854
15ffc                 | LR__1853
15ffc                 | '     print "rnd: "; : printerror(40) 
15ffc     00 12 06 F6 | 	mov	arg01, #0
16000     AC 12 B1 FD | 	call	#__system___getiolock_0568
16004     FD 12 02 F6 | 	mov	arg01, result1
16008     78 B5 B0 FD | 	call	#__system___lockmem
1600c     8D 01 00 FF 
16010     BD 14 06 F6 | 	mov	arg02, ##@LR__5598
16014     00 12 06 F6 | 	mov	arg01, #0
16018     00 16 06 F6 | 	mov	arg03, #0
1601c     58 C2 B0 FD | 	call	#__system___basic_print_string
16020     00 12 06 F6 | 	mov	arg01, #0
16024     88 12 B1 FD | 	call	#__system___getiolock_0568
16028     FD 00 68 FC | 	wrlong	#0, result1
1602c     28 12 06 F6 | 	mov	arg01, #40
16030     00 14 06 F6 | 	mov	arg02, #0
16034     8C 7F B0 FD | 	call	#_printerror
16038     A7 12 02 F6 | 	mov	arg01, fp
1603c     30 58 BF FD | 	call	#_push
16040                 | LR__1854
16040                 | LR__1855
16040                 | LR__1856
16040                 | LR__1857
16040     A7 F0 03 F6 | 	mov	ptra, fp
16044     B2 00 A0 FD | 	call	#popregs_
16048                 | _do_rnd_ret
16048     2D 00 64 FD | 	ret
1604c                 | 
1604c                 | ' 
1604c                 | ' '-------------------- round
1604c                 | ' 
1604c                 | ' sub do_round
1604c                 | _do_round
1604c     00 4A 05 F6 | 	mov	COUNT_, #0
16050     A8 00 A0 FD | 	call	#pushregs_
16054     0C F0 07 F1 | 	add	ptra, #12
16058     7C 57 BF FD | 	call	#_pop
1605c     A7 FA 61 FC | 	wrlong	result1, fp
16060     04 4E 05 F1 | 	add	fp, #4
16064     A7 FC 61 FC | 	wrlong	result2, fp
16068     04 4E 05 F1 | 	add	fp, #4
1606c     A7 FE 61 FC | 	wrlong	result3, fp
16070     08 4E 85 F1 | 	sub	fp, #8
16074     A7 12 02 F6 | 	mov	arg01, fp
16078     40 59 BF FD | 	call	#_converttoint
1607c     A7 FA 61 FC | 	wrlong	result1, fp
16080     08 4E 05 F1 | 	add	fp, #8
16084     A7 38 68 FC | 	wrlong	#28, fp
16088     08 4E 85 F1 | 	sub	fp, #8
1608c     A7 12 02 F6 | 	mov	arg01, fp
16090     DC 57 BF FD | 	call	#_push
16094     A7 F0 03 F6 | 	mov	ptra, fp
16098     B2 00 A0 FD | 	call	#popregs_
1609c                 | _do_round_ret
1609c     2D 00 64 FD | 	ret
160a0                 | 
160a0                 | ' 
160a0                 | ' '-------------------- rqpin
160a0                 | ' 
160a0                 | ' sub do_rqpin
160a0                 | _do_rqpin
160a0     00 4A 05 F6 | 	mov	COUNT_, #0
160a4     A8 00 A0 FD | 	call	#pushregs_
160a8     0C F0 07 F1 | 	add	ptra, #12
160ac     28 57 BF FD | 	call	#_pop
160b0     A7 FA 61 FC | 	wrlong	result1, fp
160b4     04 4E 05 F1 | 	add	fp, #4
160b8     A7 FC 61 FC | 	wrlong	result2, fp
160bc     04 4E 05 F1 | 	add	fp, #4
160c0     A7 FE 61 FC | 	wrlong	result3, fp
160c4     08 4E 85 F1 | 	sub	fp, #8
160c8     A7 12 02 F6 | 	mov	arg01, fp
160cc     EC 58 BF FD | 	call	#_converttoint
160d0     FD 12 02 F6 | 	mov	arg01, result1
160d4     00 FA 05 F6 | 	mov	result1, #0
160d8     09 FB 81 FA | 	rqpin	result1, arg01
160dc     52 00 00 FF 
160e0     1C E4 05 F1 | 	add	objptr, ##42012
160e4     F2 FA 61 FC | 	wrlong	result1, objptr
160e8     52 00 00 FF 
160ec     1C E4 85 F1 | 	sub	objptr, ##42012
160f0     08 4E 05 F1 | 	add	fp, #8
160f4     A7 3A 68 FC | 	wrlong	#29, fp
160f8     08 4E 85 F1 | 	sub	fp, #8
160fc     A7 08 68 FC | 	wrlong	#4, fp
16100     A7 12 02 F6 | 	mov	arg01, fp
16104     68 57 BF FD | 	call	#_push
16108     A7 F0 03 F6 | 	mov	ptra, fp
1610c     B2 00 A0 FD | 	call	#popregs_
16110                 | _do_rqpin_ret
16110     2D 00 64 FD | 	ret
16114                 | 
16114                 | ' 
16114                 | ' ' ------------------ run
16114                 | ' 
16114                 | ' sub do_run
16114                 | _do_run
16114     04 4A 05 F6 | 	mov	COUNT_, #4
16118     A8 00 A0 FD | 	call	#pushregs_
1611c     4A 00 00 FF 
16120     80 E4 05 F1 | 	add	objptr, ##38016
16124     F2 1E 02 FB | 	rdlong	local01, objptr
16128     06 00 00 FF 
1612c     38 E4 05 F1 | 	add	objptr, ##3128
16130     F2 20 02 FB | 	rdlong	local02, objptr
16134     04 E4 05 F1 | 	add	objptr, #4
16138     F2 22 02 FB | 	rdlong	local03, objptr
1613c     0F 19 02 F6 | 	mov	arg04, local01
16140     0C 17 02 F6 | 	mov	arg03, arg04
16144     01 16 66 F0 | 	shl	arg03, #1
16148     0C 17 02 F1 | 	add	arg03, arg04
1614c     02 16 66 F0 | 	shl	arg03, #2
16150     09 00 00 FF 
16154     40 E4 85 F1 | 	sub	objptr, ##4672
16158     F2 16 02 F1 | 	add	arg03, objptr
1615c     0B 15 02 FB | 	rdlong	arg02, arg03
16160                 | ' 
16160                 | ' r_lineptr_e=lineptr_e
16160                 | ' r_runptr=runptr
16160                 | ' r_runptr2=runptr2
16160                 | ' 
16160                 | ' numpar=compiledline(lineptr_e).result.uresult
16160                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
16160     01 14 0E F2 | 	cmp	arg02, #1 wz
16164     47 00 00 FF 
16168     7C E4 85 F1 | 	sub	objptr, ##36476
1616c     00 12 06 A6 |  if_e	mov	arg01, #0
16170     B0 C2 BF AD |  if_e	call	#_do_load
16174     4A 00 00 FF 
16178     88 E4 05 F1 | 	add	objptr, ##38024
1617c     F2 18 02 FB | 	rdlong	arg04, objptr
16180     06 00 00 FF 
16184     30 E4 05 F1 | 	add	objptr, ##3120
16188     F2 18 62 FC | 	wrlong	arg04, objptr
1618c     04 E4 05 F1 | 	add	objptr, #4
16190     F2 00 68 FC | 	wrlong	#0, objptr
16194     04 E4 05 F1 | 	add	objptr, #4
16198     FF FF FF FF 
1619c     F2 FE 6B FC | 	wrlong	##-1, objptr
161a0                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
161a0                 | ' if inrun>0 then 
161a0     2C E4 05 F1 | 	add	objptr, #44
161a4     F2 18 02 FB | 	rdlong	arg04, objptr
161a8     50 00 00 FF 
161ac     EC E4 85 F1 | 	sub	objptr, ##41196
161b0     01 18 16 F2 | 	cmp	arg04, #1 wc
161b4     30 00 90 CD |  if_b	jmp	#LR__1860
161b8     50 00 00 FF 
161bc     F0 E4 05 F1 | 	add	objptr, ##41200
161c0     F2 12 02 F6 | 	mov	arg01, objptr
161c4     38 E4 85 F1 | 	sub	objptr, #56
161c8     F2 14 02 FB | 	rdlong	arg02, objptr
161cc     18 16 06 F6 | 	mov	arg03, #24
161d0     44 00 00 FF 
161d4     EC E5 85 F1 | 	sub	objptr, ##35308
161d8     68 A7 B0 FD | 	call	#_psram_spin2_read1
161dc     0B 00 00 FF 
161e0     CC E4 85 F1 | 	sub	objptr, ##5836
161e4                 | '   psram.read1(varptr(runheader),runptr,24)  
161e4                 | '   return
161e4     D4 02 90 FD | 	jmp	#LR__1866
161e8                 | LR__1860
161e8     50 00 00 FF 
161ec     EC E4 05 F1 | 	add	objptr, ##41196
161f0     F2 02 68 FC | 	wrlong	#1, objptr
161f4     04 E4 05 F1 | 	add	objptr, #4
161f8     F2 12 02 F6 | 	mov	arg01, objptr
161fc     38 E4 85 F1 | 	sub	objptr, #56
16200     F2 14 02 FB | 	rdlong	arg02, objptr
16204     18 16 06 F6 | 	mov	arg03, #24
16208     44 00 00 FF 
1620c     EC E5 85 F1 | 	sub	objptr, ##35308
16210     30 A7 B0 FD | 	call	#_psram_spin2_read1
16214                 | ' inrun=1
16214                 | ' psram.read1(varptr(runheader),runptr,24) 
16214                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
16214     45 00 00 FF 
16218     24 E4 05 F1 | 	add	objptr, ##35364
1621c     F2 24 02 FB | 	rdlong	local04, objptr
16220     50 00 00 FF 
16224     F0 E4 85 F1 | 	sub	objptr, ##41200
16228     FF FF 7F FF 
1622c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
16230     50 00 00 AF 
16234     EC E4 05 A1 |  if_e	add	objptr, ##41196
16238     F2 00 68 AC |  if_e	wrlong	#0, objptr
1623c     50 00 00 AF 
16240     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16244     74 02 90 AD |  if_e	jmp	#LR__1866
16248                 | ' do 
16248                 | LR__1861
16248                 | '   if runptr<>oldrunptr then
16248     50 00 00 FF 
1624c     B8 E4 05 F1 | 	add	objptr, ##41144
16250     F2 24 02 FB | 	rdlong	local04, objptr
16254     08 E4 05 F1 | 	add	objptr, #8
16258     F2 18 02 FB | 	rdlong	arg04, objptr
1625c     50 00 00 FF 
16260     C0 E4 85 F1 | 	sub	objptr, ##41152
16264     0C 25 0A F2 | 	cmp	local04, arg04 wz
16268     CC 00 90 AD |  if_e	jmp	#LR__1862
1626c     50 00 00 FF 
16270     F0 E4 05 F1 | 	add	objptr, ##41200
16274     F2 12 02 F6 | 	mov	arg01, objptr
16278     38 E4 85 F1 | 	sub	objptr, #56
1627c     F2 14 02 FB | 	rdlong	arg02, objptr
16280     18 16 06 F6 | 	mov	arg03, #24
16284     44 00 00 FF 
16288     EC E5 85 F1 | 	sub	objptr, ##35308
1628c     B4 A6 B0 FD | 	call	#_psram_spin2_read1
16290     3B 00 00 FF 
16294     B0 E5 05 F1 | 	add	objptr, ##30640
16298     F2 12 02 F6 | 	mov	arg01, objptr
1629c     09 00 00 FF 
162a0     3C E4 05 F1 | 	add	objptr, ##4668
162a4     F2 14 02 FB | 	rdlong	arg02, objptr
162a8     0B 00 00 FF 
162ac     54 E4 85 F1 | 	sub	objptr, ##5716
162b0     F2 24 02 FB | 	rdlong	local04, objptr
162b4     01 24 66 F0 | 	shl	local04, #1
162b8     12 15 02 F1 | 	add	arg02, local04
162bc     0B 00 00 FF 
162c0     94 E4 05 F1 | 	add	objptr, ##5780
162c4     F2 16 02 FB | 	rdlong	arg03, objptr
162c8     40 E4 85 F1 | 	sub	objptr, #64
162cc     F2 24 02 FB | 	rdlong	local04, objptr
162d0     12 17 82 F1 | 	sub	arg03, local04
162d4     44 00 00 FF 
162d8     EC E5 85 F1 | 	sub	objptr, ##35308
162dc     64 A6 B0 FD | 	call	#_psram_spin2_read1
162e0     45 00 00 FF 
162e4     2C E4 05 F1 | 	add	objptr, ##35372
162e8     F2 24 02 FB | 	rdlong	local04, objptr
162ec     40 E4 85 F1 | 	sub	objptr, #64
162f0     F2 14 02 FB | 	rdlong	arg02, objptr
162f4     0A 25 82 F1 | 	sub	local04, arg02
162f8     0B 00 00 FF 
162fc     54 E4 85 F1 | 	sub	objptr, ##5716
16300     F2 14 02 FB | 	rdlong	arg02, objptr
16304     0A 25 12 FD | 	qdiv	local04, arg02
16308     05 00 00 FF 
1630c     18 E4 05 F1 | 	add	objptr, ##2584
16310     18 24 62 FD | 	getqx	local04
16314     03 24 86 F1 | 	sub	local04, #3
16318     F2 24 62 FC | 	wrlong	local04, objptr
1631c     06 00 00 FF 
16320     3C E4 05 F1 | 	add	objptr, ##3132
16324     F2 24 02 FB | 	rdlong	local04, objptr
16328     08 E4 05 F1 | 	add	objptr, #8
1632c     F2 24 62 FC | 	wrlong	local04, objptr
16330     50 00 00 FF 
16334     C0 E4 85 F1 | 	sub	objptr, ##41152
16338                 | LR__1862
16338     50 00 00 FF 
1633c     04 E5 05 F1 | 	add	objptr, ##41220
16340     F2 24 02 FB | 	rdlong	local04, objptr
16344     4C E4 85 F1 | 	sub	objptr, #76
16348     F2 24 62 FC | 	wrlong	local04, objptr
1634c     04 E4 05 F1 | 	add	objptr, #4
16350     F2 12 02 FB | 	rdlong	arg01, objptr
16354     50 00 00 FF 
16358     BC E4 85 F1 | 	sub	objptr, ##41148
1635c     74 53 BF FD | 	call	#_execute_line
16360     50 00 00 FF 
16364     BC E4 05 F1 | 	add	objptr, ##41148
16368     F2 FA 61 FC | 	wrlong	result1, objptr
1636c     04 E4 85 F1 | 	sub	objptr, #4
16370     F2 24 02 FB | 	rdlong	local04, objptr
16374     50 00 00 FF 
16378     B8 E4 85 F1 | 	sub	objptr, ##41144
1637c     FF FF 3F FF 
16380     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
16384     30 00 90 AD |  if_e	jmp	#LR__1864
16388     E0 12 06 F6 | 	mov	arg01, #224
1638c     44 A9 B0 FD | 	call	#_usbnew_spin2_keystate
16390     00 FA 0D F2 | 	cmp	result1, #0 wz
16394     10 00 90 5D |  if_ne	jmp	#LR__1863
16398     E4 12 06 F6 | 	mov	arg01, #228
1639c     34 A9 B0 FD | 	call	#_usbnew_spin2_keystate
163a0     00 FA 0D F2 | 	cmp	result1, #0 wz
163a4     A0 FE 9F AD |  if_e	jmp	#LR__1861
163a8                 | LR__1863
163a8     06 12 06 F6 | 	mov	arg01, #6
163ac     24 A9 B0 FD | 	call	#_usbnew_spin2_keystate
163b0     00 FA 0D F2 | 	cmp	result1, #0 wz
163b4     90 FE 9F AD |  if_e	jmp	#LR__1861
163b8                 | LR__1864
163b8                 | '   ''do whatever kbm.peek_latest_key()=$106 
163b8                 | ' if runptr<>$7FFF_FFFF then 
163b8     50 00 00 FF 
163bc     B8 E4 05 F1 | 	add	objptr, ##41144
163c0     F2 24 02 FB | 	rdlong	local04, objptr
163c4     50 00 00 FF 
163c8     B8 E4 85 F1 | 	sub	objptr, ##41144
163cc     FF FF 3F FF 
163d0     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
163d4     90 00 90 AD |  if_e	jmp	#LR__1865
163d8                 | '   print: print "Stopped at line ";runheader(0) 
163d8     00 12 06 F6 | 	mov	arg01, #0
163dc     D0 0E B1 FD | 	call	#__system___getiolock_0568
163e0     FD 12 02 F6 | 	mov	arg01, result1
163e4     9C B1 B0 FD | 	call	#__system___lockmem
163e8     00 12 06 F6 | 	mov	arg01, #0
163ec     0A 14 06 F6 | 	mov	arg02, #10
163f0     00 16 06 F6 | 	mov	arg03, #0
163f4     28 BE B0 FD | 	call	#__system___basic_print_char
163f8     00 12 06 F6 | 	mov	arg01, #0
163fc     B0 0E B1 FD | 	call	#__system___getiolock_0568
16400     FD 00 68 FC | 	wrlong	#0, result1
16404     00 12 06 F6 | 	mov	arg01, #0
16408     A4 0E B1 FD | 	call	#__system___getiolock_0568
1640c     FD 12 02 F6 | 	mov	arg01, result1
16410     70 B1 B0 FD | 	call	#__system___lockmem
16414     8D 01 00 FF 
16418     C3 14 06 F6 | 	mov	arg02, ##@LR__5599
1641c     00 12 06 F6 | 	mov	arg01, #0
16420     00 16 06 F6 | 	mov	arg03, #0
16424     50 BE B0 FD | 	call	#__system___basic_print_string
16428     50 00 00 FF 
1642c     F0 E4 05 F1 | 	add	objptr, ##41200
16430     F2 14 02 FB | 	rdlong	arg02, objptr
16434     50 00 00 FF 
16438     F0 E4 85 F1 | 	sub	objptr, ##41200
1643c     00 12 06 F6 | 	mov	arg01, #0
16440     00 16 06 F6 | 	mov	arg03, #0
16444     0A 18 06 F6 | 	mov	arg04, #10
16448     B0 BE B0 FD | 	call	#__system___basic_print_unsigned
1644c     00 12 06 F6 | 	mov	arg01, #0
16450     0A 14 06 F6 | 	mov	arg02, #10
16454     00 16 06 F6 | 	mov	arg03, #0
16458     C4 BD B0 FD | 	call	#__system___basic_print_char
1645c     00 12 06 F6 | 	mov	arg01, #0
16460     4C 0E B1 FD | 	call	#__system___getiolock_0568
16464     FD 00 68 FC | 	wrlong	#0, result1
16468                 | LR__1865
16468     50 00 00 FF 
1646c     EC E4 05 F1 | 	add	objptr, ##41196
16470     F2 00 68 FC | 	wrlong	#0, objptr
16474     06 00 00 FF 
16478     6C E4 85 F1 | 	sub	objptr, ##3180
1647c     F2 1E 62 FC | 	wrlong	local01, objptr
16480     06 00 00 FF 
16484     38 E4 05 F1 | 	add	objptr, ##3128
16488     F2 20 62 FC | 	wrlong	local02, objptr
1648c     04 E4 05 F1 | 	add	objptr, #4
16490     F2 22 62 FC | 	wrlong	local03, objptr
16494     50 00 00 FF 
16498     BC E4 85 F1 | 	sub	objptr, ##41148
1649c     11 12 06 F6 | 	mov	arg01, #17
164a0     08 14 06 F6 | 	mov	arg02, #8
164a4     10 16 06 F6 | 	mov	arg03, #16
164a8     DC 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
164ac     10 12 06 F6 | 	mov	arg01, #16
164b0     20 14 06 F6 | 	mov	arg02, #32
164b4     20 16 06 F6 | 	mov	arg03, #32
164b8     CC 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
164bc                 | LR__1866
164bc     A7 F0 03 F6 | 	mov	ptra, fp
164c0     B2 00 A0 FD | 	call	#popregs_
164c4                 | _do_run_ret
164c4     2D 00 64 FD | 	ret
164c8                 | 
164c8                 | ' 
164c8                 | ' ' ------------------ save
164c8                 | ' 
164c8                 | ' sub do_save                        
164c8                 | _do_save
164c8     04 4A 05 F6 | 	mov	COUNT_, #4
164cc     A8 00 A0 FD | 	call	#pushregs_
164d0     B8 F0 07 F1 | 	add	ptra, #184
164d4     4A 00 00 FF 
164d8     80 E4 05 F1 | 	add	objptr, ##38016
164dc     F2 1E 02 FB | 	rdlong	local01, objptr
164e0     0F 21 02 F6 | 	mov	local02, local01
164e4     01 20 66 F0 | 	shl	local02, #1
164e8     0F 21 02 F1 | 	add	local02, local01
164ec     02 20 66 F0 | 	shl	local02, #2
164f0     03 00 00 FF 
164f4     04 E4 85 F1 | 	sub	objptr, ##1540
164f8     F2 20 02 F1 | 	add	local02, objptr
164fc     10 23 02 FB | 	rdlong	local03, local02
16500     10 4E 05 F1 | 	add	fp, #16
16504     A7 22 62 FC | 	wrlong	local03, fp
16508                 | ' 
16508                 | ' numpar=compiledline(lineptr_e).result.uresult
16508                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
16508     10 4E 85 F1 | 	sub	fp, #16
1650c     01 22 56 F2 | 	cmps	local03, #1 wc
16510     47 00 00 FF 
16514     7C E4 85 F1 | 	sub	objptr, ##36476
16518     20 00 90 CD |  if_b	jmp	#LR__1870
1651c     B8 52 BF FD | 	call	#_pop
16520     A7 FA 61 FC | 	wrlong	result1, fp
16524     04 4E 05 F1 | 	add	fp, #4
16528     A7 FC 61 FC | 	wrlong	result2, fp
1652c     04 4E 05 F1 | 	add	fp, #4
16530     A7 FE 61 FC | 	wrlong	result3, fp
16534     08 4E 85 F1 | 	sub	fp, #8
16538     24 00 90 FD | 	jmp	#LR__1871
1653c                 | LR__1870
1653c     51 00 00 FF 
16540     D8 E5 05 F1 | 	add	objptr, ##41944
16544     F2 22 02 FB | 	rdlong	local03, objptr
16548     51 00 00 FF 
1654c     D8 E5 85 F1 | 	sub	objptr, ##41944
16550     A7 22 62 FC | 	wrlong	local03, fp
16554     08 4E 05 F1 | 	add	fp, #8
16558     A7 3E 68 FC | 	wrlong	#31, fp
1655c     08 4E 85 F1 | 	sub	fp, #8
16560                 | LR__1871
16560                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
16560     4A 00 00 FF 
16564     88 E4 05 F1 | 	add	objptr, ##38024
16568     F2 12 02 FB | 	rdlong	arg01, objptr
1656c     4A 00 00 FF 
16570     88 E4 85 F1 | 	sub	objptr, ##38024
16574     08 7D B0 FD | 	call	#_pslpeek
16578     FF FF 7F FF 
1657c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
16580     10 00 90 5D |  if_ne	jmp	#LR__1872
16584     1B 12 06 F6 | 	mov	arg01, #27
16588     00 14 06 F6 | 	mov	arg02, #0
1658c     34 7A B0 FD | 	call	#_printerror
16590     CC 02 90 FD | 	jmp	#LR__1878
16594                 | LR__1872
16594                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16594     08 4E 05 F1 | 	add	fp, #8
16598     A7 22 02 FB | 	rdlong	local03, fp
1659c     08 4E 85 F1 | 	sub	fp, #8
165a0     2B 22 0E F2 | 	cmp	local03, #43 wz
165a4     18 00 90 5D |  if_ne	jmp	#LR__1873
165a8     A7 12 02 FB | 	rdlong	arg01, fp
165ac     A0 53 BF FD | 	call	#_convertstring
165b0     A7 FA 61 FC | 	wrlong	result1, fp
165b4     08 4E 05 F1 | 	add	fp, #8
165b8     A7 3E 68 FC | 	wrlong	#31, fp
165bc     08 4E 85 F1 | 	sub	fp, #8
165c0                 | LR__1873
165c0                 | ' if t1.result_type=result_string then
165c0     08 4E 05 F1 | 	add	fp, #8
165c4     A7 22 02 FB | 	rdlong	local03, fp
165c8     08 4E 85 F1 | 	sub	fp, #8
165cc     1F 22 0E F2 | 	cmp	local03, #31 wz
165d0     8C 02 90 5D |  if_ne	jmp	#LR__1877
165d4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
165d4     A7 12 02 FB | 	rdlong	arg01, fp
165d8     8D 01 00 FF 
165dc     D4 14 06 F6 | 	mov	arg02, ##@LR__5600
165e0     C8 AF B0 FD | 	call	#__system___string_cmp
165e4     00 FA 0D F2 | 	cmp	result1, #0 wz
165e8     51 00 00 AF 
165ec     D8 E5 05 A1 |  if_e	add	objptr, ##41944
165f0     F2 22 02 AB |  if_e	rdlong	local03, objptr
165f4     A7 22 62 AC |  if_e	wrlong	local03, fp
165f8     51 00 00 AF 
165fc     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
16600     A7 22 02 5B |  if_ne	rdlong	local03, fp
16604     51 00 00 5F 
16608     D8 E5 05 51 |  if_ne	add	objptr, ##41944
1660c     F2 22 62 5C |  if_ne	wrlong	local03, objptr
16610     51 00 00 5F 
16614     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
16618                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
16618     09 12 06 F6 | 	mov	arg01, #9
1661c     00 02 B1 FD | 	call	#__system__close
16620     09 22 06 F6 | 	mov	local03, #9
16624     4A 00 00 FF 
16628     94 E4 05 F1 | 	add	objptr, ##38036
1662c     F2 12 02 FB | 	rdlong	arg01, objptr
16630     4A 00 00 FF 
16634     94 E4 85 F1 | 	sub	objptr, ##38036
16638     8D 01 00 FF 
1663c     D5 14 06 F6 | 	mov	arg02, ##@LR__5601
16640     9C AF B0 FD | 	call	#__system___string_concat
16644     FD 12 02 F6 | 	mov	arg01, result1
16648     A7 14 02 FB | 	rdlong	arg02, fp
1664c     90 AF B0 FD | 	call	#__system___string_concat
16650     FD 14 02 F6 | 	mov	arg02, result1
16654     11 13 02 F6 | 	mov	arg01, local03
16658     0D 16 06 F6 | 	mov	arg03, #13
1665c     28 BB B0 FD | 	call	#__system___basic_open_string
16660     4A 00 00 FF 
16664     88 E4 05 F1 | 	add	objptr, ##38024
16668     F2 22 02 FB | 	rdlong	local03, objptr
1666c     4A 00 00 FF 
16670     88 E4 85 F1 | 	sub	objptr, ##38024
16674     B0 4E 05 F1 | 	add	fp, #176
16678     A7 22 62 FC | 	wrlong	local03, fp
1667c     B0 4E 85 F1 | 	sub	fp, #176
16680                 | '   saveptr=programstart
16680                 | '   do
16680                 | LR__1874
16680     14 4E 05 F1 | 	add	fp, #20
16684     A7 12 02 F6 | 	mov	arg01, fp
16688     9C 4E 05 F1 | 	add	fp, #156
1668c     A7 14 02 FB | 	rdlong	arg02, fp
16690     B0 4E 85 F1 | 	sub	fp, #176
16694     18 16 06 F6 | 	mov	arg03, #24
16698     0B 00 00 FF 
1669c     CC E4 05 F1 | 	add	objptr, ##5836
166a0     A0 A2 B0 FD | 	call	#_psram_spin2_read1
166a4     2C 4E 05 F1 | 	add	fp, #44
166a8     A7 12 02 F6 | 	mov	arg01, fp
166ac     10 4E 85 F1 | 	sub	fp, #16
166b0     A7 14 02 FB | 	rdlong	arg02, fp
166b4     04 4E 05 F1 | 	add	fp, #4
166b8     A7 16 02 FB | 	rdlong	arg03, fp
166bc     20 4E 85 F1 | 	sub	fp, #32
166c0     80 A2 B0 FD | 	call	#_psram_spin2_read1
166c4     0B 00 00 FF 
166c8     CC E4 85 F1 | 	sub	objptr, ##5836
166cc     8D 01 00 FF 
166d0     D7 22 06 F6 | 	mov	local03, ##@LR__5602
166d4     AC 4E 05 F1 | 	add	fp, #172
166d8     A7 22 62 FC | 	wrlong	local03, fp
166dc                 | '     psram.read1(varptr(header(0)),saveptr,24)
166dc                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
166dc                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
166dc     A0 4E 85 F1 | 	sub	fp, #160
166e0     A7 02 68 FC | 	wrlong	#1, fp
166e4     14 4E 05 F1 | 	add	fp, #20
166e8     A7 24 02 FB | 	rdlong	local04, fp
166ec     20 4E 85 F1 | 	sub	fp, #32
166f0     01 24 06 F1 | 	add	local04, #1
166f4                 | LR__1875
166f4     0C 4E 05 F1 | 	add	fp, #12
166f8     A7 22 02 FB | 	rdlong	local03, fp
166fc     0C 4E 85 F1 | 	sub	fp, #12
16700     12 23 52 F2 | 	cmps	local03, local04 wc
16704     54 00 90 3D |  if_ae	jmp	#LR__1876
16708     AC 4E 05 F1 | 	add	fp, #172
1670c     A7 1E 02 FB | 	rdlong	local01, fp
16710     A0 4E 85 F1 | 	sub	fp, #160
16714     A7 22 02 FB | 	rdlong	local03, fp
16718     01 22 86 F1 | 	sub	local03, #1
1671c     20 4E 05 F1 | 	add	fp, #32
16720     A7 22 02 F1 | 	add	local03, fp
16724     11 13 C2 FA | 	rdbyte	arg01, local03
16728     2C 4E 85 F1 | 	sub	fp, #44
1672c     94 D0 B0 FD | 	call	#__system__Chr_S
16730     FD 14 02 F6 | 	mov	arg02, result1
16734     0F 13 02 F6 | 	mov	arg01, local01
16738     A4 AE B0 FD | 	call	#__system___string_concat
1673c     AC 4E 05 F1 | 	add	fp, #172
16740     A7 FA 61 FC | 	wrlong	result1, fp
16744     A0 4E 85 F1 | 	sub	fp, #160
16748     A7 22 02 FB | 	rdlong	local03, fp
1674c     01 22 06 F1 | 	add	local03, #1
16750     A7 22 62 FC | 	wrlong	local03, fp
16754     0C 4E 85 F1 | 	sub	fp, #12
16758     98 FF 9F FD | 	jmp	#LR__1875
1675c                 | LR__1876
1675c                 | '     print #9, saveline$
1675c     09 12 06 F6 | 	mov	arg01, #9
16760     4C 0B B1 FD | 	call	#__system___getiolock_0568
16764     FD 12 02 F6 | 	mov	arg01, result1
16768     18 AE B0 FD | 	call	#__system___lockmem
1676c     AC 4E 05 F1 | 	add	fp, #172
16770     A7 14 02 FB | 	rdlong	arg02, fp
16774     AC 4E 85 F1 | 	sub	fp, #172
16778     09 12 06 F6 | 	mov	arg01, #9
1677c     00 16 06 F6 | 	mov	arg03, #0
16780     F4 BA B0 FD | 	call	#__system___basic_print_string
16784     09 12 06 F6 | 	mov	arg01, #9
16788     0A 14 06 F6 | 	mov	arg02, #10
1678c     00 16 06 F6 | 	mov	arg03, #0
16790     8C BA B0 FD | 	call	#__system___basic_print_char
16794     09 12 06 F6 | 	mov	arg01, #9
16798     14 0B B1 FD | 	call	#__system___getiolock_0568
1679c     FD 00 68 FC | 	wrlong	#0, result1
167a0     28 4E 05 F1 | 	add	fp, #40
167a4     A7 22 02 FB | 	rdlong	local03, fp
167a8     88 4E 05 F1 | 	add	fp, #136
167ac     A7 22 62 FC | 	wrlong	local03, fp
167b0     88 4E 85 F1 | 	sub	fp, #136
167b4     A7 22 02 FB | 	rdlong	local03, fp
167b8     28 4E 85 F1 | 	sub	fp, #40
167bc     FF FF 3F FF 
167c0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
167c4     B8 FE 9F 5D |  if_ne	jmp	#LR__1874
167c8                 | '   close #9  
167c8     09 12 06 F6 | 	mov	arg01, #9
167cc     50 00 B1 FD | 	call	#__system__close
167d0                 | '   print "Saved as ";currentdir$+"/"+loadname
167d0     00 12 06 F6 | 	mov	arg01, #0
167d4     D8 0A B1 FD | 	call	#__system___getiolock_0568
167d8     FD 12 02 F6 | 	mov	arg01, result1
167dc     A4 AD B0 FD | 	call	#__system___lockmem
167e0     8D 01 00 FF 
167e4     D8 14 06 F6 | 	mov	arg02, ##@LR__5603
167e8     00 12 06 F6 | 	mov	arg01, #0
167ec     00 16 06 F6 | 	mov	arg03, #0
167f0     84 BA B0 FD | 	call	#__system___basic_print_string
167f4     00 20 06 F6 | 	mov	local02, #0
167f8     4A 00 00 FF 
167fc     94 E4 05 F1 | 	add	objptr, ##38036
16800     F2 12 02 FB | 	rdlong	arg01, objptr
16804     4A 00 00 FF 
16808     94 E4 85 F1 | 	sub	objptr, ##38036
1680c     8D 01 00 FF 
16810     E2 14 06 F6 | 	mov	arg02, ##@LR__5604
16814     C8 AD B0 FD | 	call	#__system___string_concat
16818     FD 12 02 F6 | 	mov	arg01, result1
1681c     51 00 00 FF 
16820     D8 E5 05 F1 | 	add	objptr, ##41944
16824     F2 14 02 FB | 	rdlong	arg02, objptr
16828     51 00 00 FF 
1682c     D8 E5 85 F1 | 	sub	objptr, ##41944
16830     AC AD B0 FD | 	call	#__system___string_concat
16834     FD 14 02 F6 | 	mov	arg02, result1
16838     10 13 02 F6 | 	mov	arg01, local02
1683c     00 16 06 F6 | 	mov	arg03, #0
16840     34 BA B0 FD | 	call	#__system___basic_print_string
16844     00 12 06 F6 | 	mov	arg01, #0
16848     0A 14 06 F6 | 	mov	arg02, #10
1684c     00 16 06 F6 | 	mov	arg03, #0
16850     CC B9 B0 FD | 	call	#__system___basic_print_char
16854     00 12 06 F6 | 	mov	arg01, #0
16858     54 0A B1 FD | 	call	#__system___getiolock_0568
1685c     FD 00 68 FC | 	wrlong	#0, result1
16860                 | LR__1877
16860                 | LR__1878
16860     A7 F0 03 F6 | 	mov	ptra, fp
16864     B2 00 A0 FD | 	call	#popregs_
16868                 | _do_save_ret
16868     2D 00 64 FD | 	ret
1686c                 | 
1686c                 | ' 
1686c                 | ' ' ------------------ setdelay
1686c                 | ' 
1686c                 | ' sub do_setdelay
1686c                 | _do_setdelay
1686c     02 4A 05 F6 | 	mov	COUNT_, #2
16870     A8 00 A0 FD | 	call	#pushregs_
16874     18 F0 07 F1 | 	add	ptra, #24
16878     5C 4F BF FD | 	call	#_pop
1687c     FD 12 02 F6 | 	mov	arg01, result1
16880     FE 1E 02 F6 | 	mov	local01, result2
16884     FF 20 02 F6 | 	mov	local02, result3
16888     A7 12 62 FC | 	wrlong	arg01, fp
1688c     04 4E 05 F1 | 	add	fp, #4
16890     A7 1E 62 FC | 	wrlong	local01, fp
16894     04 4E 05 F1 | 	add	fp, #4
16898     A7 20 62 FC | 	wrlong	local02, fp
1689c     08 4E 85 F1 | 	sub	fp, #8
168a0     34 4F BF FD | 	call	#_pop
168a4     FD 20 02 F6 | 	mov	local02, result1
168a8     0C 4E 05 F1 | 	add	fp, #12
168ac     A7 20 62 FC | 	wrlong	local02, fp
168b0     04 4E 05 F1 | 	add	fp, #4
168b4     A7 FC 61 FC | 	wrlong	result2, fp
168b8     04 4E 05 F1 | 	add	fp, #4
168bc     A7 FE 61 FC | 	wrlong	result3, fp
168c0     08 4E 85 F1 | 	sub	fp, #8
168c4     A7 12 02 F6 | 	mov	arg01, fp
168c8     0C 4E 85 F1 | 	sub	fp, #12
168cc     EC 50 BF FD | 	call	#_converttoint
168d0     FD 20 02 F6 | 	mov	local02, result1
168d4     10 1F 02 F6 | 	mov	local01, local02
168d8     01 1E 66 F0 | 	shl	local01, #1
168dc     10 1F 02 F1 | 	add	local01, local02
168e0     03 1E 66 F0 | 	shl	local01, #3
168e4     14 00 00 FF 
168e8     38 E5 05 F1 | 	add	objptr, ##10552
168ec     F2 1E 02 F1 | 	add	local01, objptr
168f0     A7 12 02 F6 | 	mov	arg01, fp
168f4     14 00 00 FF 
168f8     38 E5 85 F1 | 	sub	objptr, ##10552
168fc     BC 50 BF FD | 	call	#_converttoint
16900     06 1E 06 F1 | 	add	local01, #6
16904     0F FB 51 FC | 	wrword	result1, local01
16908     A7 F0 03 F6 | 	mov	ptra, fp
1690c     B2 00 A0 FD | 	call	#popregs_
16910                 | _do_setdelay_ret
16910     2D 00 64 FD | 	ret
16914                 | 
16914                 | ' 
16914                 | ' ' ------------------ setenv
16914                 | ' 
16914                 | ' sub do_setenv
16914                 | _do_setenv
16914     02 4A 05 F6 | 	mov	COUNT_, #2
16918     A8 00 A0 FD | 	call	#pushregs_
1691c     18 F0 07 F1 | 	add	ptra, #24
16920     B4 4E BF FD | 	call	#_pop
16924     FD 12 02 F6 | 	mov	arg01, result1
16928     FE 1E 02 F6 | 	mov	local01, result2
1692c     FF 20 02 F6 | 	mov	local02, result3
16930     A7 12 62 FC | 	wrlong	arg01, fp
16934     04 4E 05 F1 | 	add	fp, #4
16938     A7 1E 62 FC | 	wrlong	local01, fp
1693c     04 4E 05 F1 | 	add	fp, #4
16940     A7 20 62 FC | 	wrlong	local02, fp
16944     08 4E 85 F1 | 	sub	fp, #8
16948     8C 4E BF FD | 	call	#_pop
1694c     FD 20 02 F6 | 	mov	local02, result1
16950     0C 4E 05 F1 | 	add	fp, #12
16954     A7 20 62 FC | 	wrlong	local02, fp
16958     04 4E 05 F1 | 	add	fp, #4
1695c     A7 FC 61 FC | 	wrlong	result2, fp
16960     04 4E 05 F1 | 	add	fp, #4
16964     A7 FE 61 FC | 	wrlong	result3, fp
16968     08 4E 85 F1 | 	sub	fp, #8
1696c     A7 12 02 F6 | 	mov	arg01, fp
16970     0C 4E 85 F1 | 	sub	fp, #12
16974     44 50 BF FD | 	call	#_converttoint
16978     FD 20 02 F6 | 	mov	local02, result1
1697c     10 1F 02 F6 | 	mov	local01, local02
16980     01 1E 66 F0 | 	shl	local01, #1
16984     10 1F 02 F1 | 	add	local01, local02
16988     03 1E 66 F0 | 	shl	local01, #3
1698c     14 00 00 FF 
16990     38 E5 05 F1 | 	add	objptr, ##10552
16994     F2 1E 02 F1 | 	add	local01, objptr
16998     A7 12 02 F6 | 	mov	arg01, fp
1699c     14 00 00 FF 
169a0     38 E5 85 F1 | 	sub	objptr, ##10552
169a4     14 50 BF FD | 	call	#_converttoint
169a8     05 1E 06 F1 | 	add	local01, #5
169ac     0F FB 41 FC | 	wrbyte	result1, local01
169b0     A7 F0 03 F6 | 	mov	ptra, fp
169b4     B2 00 A0 FD | 	call	#popregs_
169b8                 | _do_setenv_ret
169b8     2D 00 64 FD | 	ret
169bc                 | 
169bc                 | ' 
169bc                 | ' ' ------------------ setlen
169bc                 | ' 
169bc                 | ' sub do_setlen
169bc                 | _do_setlen
169bc     02 4A 05 F6 | 	mov	COUNT_, #2
169c0     A8 00 A0 FD | 	call	#pushregs_
169c4     18 F0 07 F1 | 	add	ptra, #24
169c8     0C 4E BF FD | 	call	#_pop
169cc     FD 12 02 F6 | 	mov	arg01, result1
169d0     FE 1E 02 F6 | 	mov	local01, result2
169d4     FF 20 02 F6 | 	mov	local02, result3
169d8     A7 12 62 FC | 	wrlong	arg01, fp
169dc     04 4E 05 F1 | 	add	fp, #4
169e0     A7 1E 62 FC | 	wrlong	local01, fp
169e4     04 4E 05 F1 | 	add	fp, #4
169e8     A7 20 62 FC | 	wrlong	local02, fp
169ec     08 4E 85 F1 | 	sub	fp, #8
169f0     E4 4D BF FD | 	call	#_pop
169f4     FD 20 02 F6 | 	mov	local02, result1
169f8     0C 4E 05 F1 | 	add	fp, #12
169fc     A7 20 62 FC | 	wrlong	local02, fp
16a00     04 4E 05 F1 | 	add	fp, #4
16a04     A7 FC 61 FC | 	wrlong	result2, fp
16a08     04 4E 05 F1 | 	add	fp, #4
16a0c     A7 FE 61 FC | 	wrlong	result3, fp
16a10     08 4E 85 F1 | 	sub	fp, #8
16a14     A7 12 02 F6 | 	mov	arg01, fp
16a18     0C 4E 85 F1 | 	sub	fp, #12
16a1c     9C 4F BF FD | 	call	#_converttoint
16a20     FD 20 02 F6 | 	mov	local02, result1
16a24     10 1F 02 F6 | 	mov	local01, local02
16a28     01 1E 66 F0 | 	shl	local01, #1
16a2c     10 1F 02 F1 | 	add	local01, local02
16a30     03 1E 66 F0 | 	shl	local01, #3
16a34     14 00 00 FF 
16a38     38 E5 05 F1 | 	add	objptr, ##10552
16a3c     F2 1E 02 F1 | 	add	local01, objptr
16a40     A7 12 02 F6 | 	mov	arg01, fp
16a44     14 00 00 FF 
16a48     38 E5 85 F1 | 	sub	objptr, ##10552
16a4c     28 50 BF FD | 	call	#_converttofloat
16a50     08 1E 06 F1 | 	add	local01, #8
16a54     0F FB 61 FC | 	wrlong	result1, local01
16a58     A7 F0 03 F6 | 	mov	ptra, fp
16a5c     B2 00 A0 FD | 	call	#popregs_
16a60                 | _do_setlen_ret
16a60     2D 00 64 FD | 	ret
16a64                 | 
16a64                 | ' 
16a64                 | ' ' ------------------ setpan
16a64                 | ' 
16a64                 | ' sub do_setpan
16a64                 | _do_setpan
16a64     02 4A 05 F6 | 	mov	COUNT_, #2
16a68     A8 00 A0 FD | 	call	#pushregs_
16a6c     18 F0 07 F1 | 	add	ptra, #24
16a70     64 4D BF FD | 	call	#_pop
16a74     FD 12 02 F6 | 	mov	arg01, result1
16a78     FE 1E 02 F6 | 	mov	local01, result2
16a7c     FF 20 02 F6 | 	mov	local02, result3
16a80     A7 12 62 FC | 	wrlong	arg01, fp
16a84     04 4E 05 F1 | 	add	fp, #4
16a88     A7 1E 62 FC | 	wrlong	local01, fp
16a8c     04 4E 05 F1 | 	add	fp, #4
16a90     A7 20 62 FC | 	wrlong	local02, fp
16a94     08 4E 85 F1 | 	sub	fp, #8
16a98     3C 4D BF FD | 	call	#_pop
16a9c     FD 20 02 F6 | 	mov	local02, result1
16aa0     0C 4E 05 F1 | 	add	fp, #12
16aa4     A7 20 62 FC | 	wrlong	local02, fp
16aa8     04 4E 05 F1 | 	add	fp, #4
16aac     A7 FC 61 FC | 	wrlong	result2, fp
16ab0     04 4E 05 F1 | 	add	fp, #4
16ab4     A7 FE 61 FC | 	wrlong	result3, fp
16ab8     08 4E 85 F1 | 	sub	fp, #8
16abc     A7 12 02 F6 | 	mov	arg01, fp
16ac0     0C 4E 85 F1 | 	sub	fp, #12
16ac4     F4 4E BF FD | 	call	#_converttoint
16ac8     FD 20 02 F6 | 	mov	local02, result1
16acc     10 1F 02 F6 | 	mov	local01, local02
16ad0     01 1E 66 F0 | 	shl	local01, #1
16ad4     10 1F 02 F1 | 	add	local01, local02
16ad8     03 1E 66 F0 | 	shl	local01, #3
16adc     14 00 00 FF 
16ae0     38 E5 05 F1 | 	add	objptr, ##10552
16ae4     F2 1E 02 F1 | 	add	local01, objptr
16ae8     A7 12 02 F6 | 	mov	arg01, fp
16aec     14 00 00 FF 
16af0     38 E5 85 F1 | 	sub	objptr, ##10552
16af4     80 4F BF FD | 	call	#_converttofloat
16af8     10 1E 06 F1 | 	add	local01, #16
16afc     0F FB 61 FC | 	wrlong	result1, local01
16b00     A7 F0 03 F6 | 	mov	ptra, fp
16b04     B2 00 A0 FD | 	call	#popregs_
16b08                 | _do_setpan_ret
16b08     2D 00 64 FD | 	ret
16b0c                 | 
16b0c                 | ' 
16b0c                 | ' ' ------------------ setsustain
16b0c                 | ' 
16b0c                 | ' sub do_setsustain
16b0c                 | _do_setsustain
16b0c     02 4A 05 F6 | 	mov	COUNT_, #2
16b10     A8 00 A0 FD | 	call	#pushregs_
16b14     18 F0 07 F1 | 	add	ptra, #24
16b18     BC 4C BF FD | 	call	#_pop
16b1c     FD 12 02 F6 | 	mov	arg01, result1
16b20     FE 1E 02 F6 | 	mov	local01, result2
16b24     FF 20 02 F6 | 	mov	local02, result3
16b28     A7 12 62 FC | 	wrlong	arg01, fp
16b2c     04 4E 05 F1 | 	add	fp, #4
16b30     A7 1E 62 FC | 	wrlong	local01, fp
16b34     04 4E 05 F1 | 	add	fp, #4
16b38     A7 20 62 FC | 	wrlong	local02, fp
16b3c     08 4E 85 F1 | 	sub	fp, #8
16b40     94 4C BF FD | 	call	#_pop
16b44     FD 20 02 F6 | 	mov	local02, result1
16b48     0C 4E 05 F1 | 	add	fp, #12
16b4c     A7 20 62 FC | 	wrlong	local02, fp
16b50     04 4E 05 F1 | 	add	fp, #4
16b54     A7 FC 61 FC | 	wrlong	result2, fp
16b58     04 4E 05 F1 | 	add	fp, #4
16b5c     A7 FE 61 FC | 	wrlong	result3, fp
16b60     08 4E 85 F1 | 	sub	fp, #8
16b64     A7 12 02 F6 | 	mov	arg01, fp
16b68     0C 4E 85 F1 | 	sub	fp, #12
16b6c     4C 4E BF FD | 	call	#_converttoint
16b70     FD 20 02 F6 | 	mov	local02, result1
16b74     10 1F 02 F6 | 	mov	local01, local02
16b78     01 1E 66 F0 | 	shl	local01, #1
16b7c     10 1F 02 F1 | 	add	local01, local02
16b80     03 1E 66 F0 | 	shl	local01, #3
16b84     14 00 00 FF 
16b88     38 E5 05 F1 | 	add	objptr, ##10552
16b8c     F2 1E 02 F1 | 	add	local01, objptr
16b90     A7 12 02 F6 | 	mov	arg01, fp
16b94     14 00 00 FF 
16b98     38 E5 85 F1 | 	sub	objptr, ##10552
16b9c     1C 4E BF FD | 	call	#_converttoint
16ba0     14 1E 06 F1 | 	add	local01, #20
16ba4     0F FB 51 FC | 	wrword	result1, local01
16ba8     A7 F0 03 F6 | 	mov	ptra, fp
16bac     B2 00 A0 FD | 	call	#popregs_
16bb0                 | _do_setsustain_ret
16bb0     2D 00 64 FD | 	ret
16bb4                 | 
16bb4                 | ' 
16bb4                 | ' ' ------------------ setvol
16bb4                 | ' 
16bb4                 | ' sub do_setvol
16bb4                 | _do_setvol
16bb4     02 4A 05 F6 | 	mov	COUNT_, #2
16bb8     A8 00 A0 FD | 	call	#pushregs_
16bbc     18 F0 07 F1 | 	add	ptra, #24
16bc0     14 4C BF FD | 	call	#_pop
16bc4     FD 12 02 F6 | 	mov	arg01, result1
16bc8     FE 1E 02 F6 | 	mov	local01, result2
16bcc     FF 20 02 F6 | 	mov	local02, result3
16bd0     A7 12 62 FC | 	wrlong	arg01, fp
16bd4     04 4E 05 F1 | 	add	fp, #4
16bd8     A7 1E 62 FC | 	wrlong	local01, fp
16bdc     04 4E 05 F1 | 	add	fp, #4
16be0     A7 20 62 FC | 	wrlong	local02, fp
16be4     08 4E 85 F1 | 	sub	fp, #8
16be8     EC 4B BF FD | 	call	#_pop
16bec     FD 20 02 F6 | 	mov	local02, result1
16bf0     0C 4E 05 F1 | 	add	fp, #12
16bf4     A7 20 62 FC | 	wrlong	local02, fp
16bf8     04 4E 05 F1 | 	add	fp, #4
16bfc     A7 FC 61 FC | 	wrlong	result2, fp
16c00     04 4E 05 F1 | 	add	fp, #4
16c04     A7 FE 61 FC | 	wrlong	result3, fp
16c08     08 4E 85 F1 | 	sub	fp, #8
16c0c     A7 12 02 F6 | 	mov	arg01, fp
16c10     0C 4E 85 F1 | 	sub	fp, #12
16c14     A4 4D BF FD | 	call	#_converttoint
16c18     FD 20 02 F6 | 	mov	local02, result1
16c1c     10 1F 02 F6 | 	mov	local01, local02
16c20     01 1E 66 F0 | 	shl	local01, #1
16c24     10 1F 02 F1 | 	add	local01, local02
16c28     03 1E 66 F0 | 	shl	local01, #3
16c2c     14 00 00 FF 
16c30     38 E5 05 F1 | 	add	objptr, ##10552
16c34     F2 1E 02 F1 | 	add	local01, objptr
16c38     A7 12 02 F6 | 	mov	arg01, fp
16c3c     14 00 00 FF 
16c40     38 E5 85 F1 | 	sub	objptr, ##10552
16c44     30 4E BF FD | 	call	#_converttofloat
16c48     0C 1E 06 F1 | 	add	local01, #12
16c4c     0F FB 61 FC | 	wrlong	result1, local01
16c50     A7 F0 03 F6 | 	mov	ptra, fp
16c54     B2 00 A0 FD | 	call	#popregs_
16c58                 | _do_setvol_ret
16c58     2D 00 64 FD | 	ret
16c5c                 | 
16c5c                 | ' 
16c5c                 | ' ' ------------------ setwave
16c5c                 | ' 
16c5c                 | ' sub do_setwave
16c5c                 | _do_setwave
16c5c     02 4A 05 F6 | 	mov	COUNT_, #2
16c60     A8 00 A0 FD | 	call	#pushregs_
16c64     18 F0 07 F1 | 	add	ptra, #24
16c68     6C 4B BF FD | 	call	#_pop
16c6c     FD 12 02 F6 | 	mov	arg01, result1
16c70     FE 1E 02 F6 | 	mov	local01, result2
16c74     FF 20 02 F6 | 	mov	local02, result3
16c78     A7 12 62 FC | 	wrlong	arg01, fp
16c7c     04 4E 05 F1 | 	add	fp, #4
16c80     A7 1E 62 FC | 	wrlong	local01, fp
16c84     04 4E 05 F1 | 	add	fp, #4
16c88     A7 20 62 FC | 	wrlong	local02, fp
16c8c     08 4E 85 F1 | 	sub	fp, #8
16c90     44 4B BF FD | 	call	#_pop
16c94     FD 20 02 F6 | 	mov	local02, result1
16c98     0C 4E 05 F1 | 	add	fp, #12
16c9c     A7 20 62 FC | 	wrlong	local02, fp
16ca0     04 4E 05 F1 | 	add	fp, #4
16ca4     A7 FC 61 FC | 	wrlong	result2, fp
16ca8     04 4E 05 F1 | 	add	fp, #4
16cac     A7 FE 61 FC | 	wrlong	result3, fp
16cb0     08 4E 85 F1 | 	sub	fp, #8
16cb4     A7 12 02 F6 | 	mov	arg01, fp
16cb8     0C 4E 85 F1 | 	sub	fp, #12
16cbc     FC 4C BF FD | 	call	#_converttoint
16cc0     FD 20 02 F6 | 	mov	local02, result1
16cc4     10 1F 02 F6 | 	mov	local01, local02
16cc8     01 1E 66 F0 | 	shl	local01, #1
16ccc     10 1F 02 F1 | 	add	local01, local02
16cd0     03 1E 66 F0 | 	shl	local01, #3
16cd4     14 00 00 FF 
16cd8     38 E5 05 F1 | 	add	objptr, ##10552
16cdc     F2 1E 02 F1 | 	add	local01, objptr
16ce0     A7 12 02 F6 | 	mov	arg01, fp
16ce4     14 00 00 FF 
16ce8     38 E5 85 F1 | 	sub	objptr, ##10552
16cec     CC 4C BF FD | 	call	#_converttoint
16cf0     04 1E 06 F1 | 	add	local01, #4
16cf4     0F FB 41 FC | 	wrbyte	result1, local01
16cf8     A7 F0 03 F6 | 	mov	ptra, fp
16cfc     B2 00 A0 FD | 	call	#popregs_
16d00                 | _do_setwave_ret
16d00     2D 00 64 FD | 	ret
16d04                 | 
16d04                 | ' 
16d04                 | ' ' ------------------ shutup
16d04                 | ' 
16d04                 | ' sub do_shutup
16d04                 | _do_shutup
16d04     03 4A 05 F6 | 	mov	COUNT_, #3
16d08     A8 00 A0 FD | 	call	#pushregs_
16d0c     18 F0 07 F1 | 	add	ptra, #24
16d10     4A 00 00 FF 
16d14     80 E4 05 F1 | 	add	objptr, ##38016
16d18     F2 1E 02 FB | 	rdlong	local01, objptr
16d1c     0F 21 02 F6 | 	mov	local02, local01
16d20     01 20 66 F0 | 	shl	local02, #1
16d24     0F 21 02 F1 | 	add	local02, local01
16d28     02 20 66 F0 | 	shl	local02, #2
16d2c     03 00 00 FF 
16d30     04 E4 85 F1 | 	sub	objptr, ##1540
16d34     F2 20 02 F1 | 	add	local02, objptr
16d38     10 23 0A FB | 	rdlong	local03, local02 wz
16d3c     14 4E 05 F1 | 	add	fp, #20
16d40     A7 22 62 FC | 	wrlong	local03, fp
16d44                 | ' 
16d44                 | ' numpar=compiledline(lineptr_e).result.uresult
16d44                 | ' if numpar=0 then
16d44     14 4E 85 F1 | 	sub	fp, #20
16d48     47 00 00 FF 
16d4c     7C E4 85 F1 | 	sub	objptr, ##36476
16d50     50 00 90 5D |  if_ne	jmp	#LR__1882
16d54                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
16d54     10 4E 05 F1 | 	add	fp, #16
16d58     A7 00 68 FC | 	wrlong	#0, fp
16d5c     37 00 00 FF 
16d60     10 E4 05 F1 | 	add	objptr, ##28176
16d64     97 16 48 FB | 	callpa	#(@LR__1881-@LR__1880)>>2,fcache_load_ptr_
16d68                 | LR__1880
16d68     F2 12 02 FB | 	rdlong	arg01, objptr
16d6c     A7 22 02 FB | 	rdlong	local03, fp
16d70     06 22 66 F0 | 	shl	local03, #6
16d74     11 13 02 F1 | 	add	arg01, local03
16d78     14 12 06 F1 | 	add	arg01, #20
16d7c     09 01 58 FC | 	wrword	#0, arg01
16d80     A7 22 02 FB | 	rdlong	local03, fp
16d84     01 22 06 F1 | 	add	local03, #1
16d88     A7 22 62 FC | 	wrlong	local03, fp
16d8c     08 22 56 F2 | 	cmps	local03, #8 wc
16d90     D4 FF 9F CD |  if_b	jmp	#LR__1880
16d94                 | LR__1881
16d94     37 00 00 FF 
16d98     10 E4 85 F1 | 	sub	objptr, ##28176
16d9c     10 4E 85 F1 | 	sub	fp, #16
16da0     64 00 90 FD | 	jmp	#LR__1883
16da4                 | LR__1882
16da4     30 4A BF FD | 	call	#_pop
16da8     FF 1E 02 F6 | 	mov	local01, result3
16dac     A7 FA 61 FC | 	wrlong	result1, fp
16db0     04 4E 05 F1 | 	add	fp, #4
16db4     A7 FC 61 FC | 	wrlong	result2, fp
16db8     04 4E 05 F1 | 	add	fp, #4
16dbc     A7 1E 62 FC | 	wrlong	local01, fp
16dc0     08 4E 85 F1 | 	sub	fp, #8
16dc4     A7 12 02 F6 | 	mov	arg01, fp
16dc8     F0 4B BF FD | 	call	#_converttoint
16dcc     FD 22 52 F6 | 	abs	local03, result1 wc
16dd0     07 22 06 F5 | 	and	local03, #7
16dd4     11 21 82 F6 | 	negc	local02, local03
16dd8     0C 4E 05 F1 | 	add	fp, #12
16ddc     A7 20 62 FC | 	wrlong	local02, fp
16de0     37 00 00 FF 
16de4     10 E4 05 F1 | 	add	objptr, ##28176
16de8     F2 12 02 FB | 	rdlong	arg01, objptr
16dec     37 00 00 FF 
16df0     10 E4 85 F1 | 	sub	objptr, ##28176
16df4     0C 4E 85 F1 | 	sub	fp, #12
16df8     06 20 66 F0 | 	shl	local02, #6
16dfc     10 13 02 F1 | 	add	arg01, local02
16e00     14 12 06 F1 | 	add	arg01, #20
16e04     09 01 58 FC | 	wrword	#0, arg01
16e08                 | LR__1883
16e08     A7 F0 03 F6 | 	mov	ptra, fp
16e0c     B2 00 A0 FD | 	call	#popregs_
16e10                 | _do_shutup_ret
16e10     2D 00 64 FD | 	ret
16e14                 | 
16e14                 | ' 
16e14                 | ' ' ------------------ sin
16e14                 | ' 
16e14                 | ' sub do_sin
16e14                 | _do_sin
16e14     01 4A 05 F6 | 	mov	COUNT_, #1
16e18     A8 00 A0 FD | 	call	#pushregs_
16e1c     10 F0 07 F1 | 	add	ptra, #16
16e20     4A 00 00 FF 
16e24     80 E4 05 F1 | 	add	objptr, ##38016
16e28     F2 1E 02 FB | 	rdlong	local01, objptr
16e2c     0F 17 02 F6 | 	mov	arg03, local01
16e30     01 16 66 F0 | 	shl	arg03, #1
16e34     0F 17 02 F1 | 	add	arg03, local01
16e38     02 16 66 F0 | 	shl	arg03, #2
16e3c     03 00 00 FF 
16e40     04 E4 85 F1 | 	sub	objptr, ##1540
16e44     F2 16 02 F1 | 	add	arg03, objptr
16e48     0B 17 02 FB | 	rdlong	arg03, arg03
16e4c     0C 4E 05 F1 | 	add	fp, #12
16e50     A7 16 62 FC | 	wrlong	arg03, fp
16e54                 | ' 
16e54                 | ' numpar=compiledline(lineptr_e).result.uresult
16e54                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
16e54     0C 4E 85 F1 | 	sub	fp, #12
16e58     02 16 16 F2 | 	cmp	arg03, #2 wc
16e5c     47 00 00 FF 
16e60     7C E4 85 F1 | 	sub	objptr, ##36476
16e64     0C 4E 05 C1 |  if_b	add	fp, #12
16e68     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16e6c     0C 4E 85 C1 |  if_b	sub	fp, #12
16e70     40 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16e74     00 12 06 F6 | 	mov	arg01, #0
16e78     34 04 B1 FD | 	call	#__system___getiolock_0568
16e7c     FD 12 02 F6 | 	mov	arg01, result1
16e80     00 A7 B0 FD | 	call	#__system___lockmem
16e84     8D 01 00 FF 
16e88     E4 14 06 F6 | 	mov	arg02, ##@LR__5605
16e8c     00 12 06 F6 | 	mov	arg01, #0
16e90     00 16 06 F6 | 	mov	arg03, #0
16e94     E0 B3 B0 FD | 	call	#__system___basic_print_string
16e98     00 12 06 F6 | 	mov	arg01, #0
16e9c     10 04 B1 FD | 	call	#__system___getiolock_0568
16ea0     FD 00 68 FC | 	wrlong	#0, result1
16ea4     27 12 06 F6 | 	mov	arg01, #39
16ea8     00 14 06 F6 | 	mov	arg02, #0
16eac     14 71 B0 FD | 	call	#_printerror
16eb0     64 00 90 FD | 	jmp	#LR__1891
16eb4                 | LR__1890
16eb4     20 49 BF FD | 	call	#_pop
16eb8     A7 FA 61 FC | 	wrlong	result1, fp
16ebc     04 4E 05 F1 | 	add	fp, #4
16ec0     A7 FC 61 FC | 	wrlong	result2, fp
16ec4     04 4E 05 F1 | 	add	fp, #4
16ec8     A7 FE 61 FC | 	wrlong	result3, fp
16ecc     08 4E 85 F1 | 	sub	fp, #8
16ed0     51 00 00 FF 
16ed4     BC E5 05 F1 | 	add	objptr, ##41916
16ed8     F2 1E 02 FB | 	rdlong	local01, objptr
16edc     51 00 00 FF 
16ee0     BC E5 85 F1 | 	sub	objptr, ##41916
16ee4     A7 12 02 F6 | 	mov	arg01, fp
16ee8     8C 4B BF FD | 	call	#_converttofloat
16eec     FD 14 02 F6 | 	mov	arg02, result1
16ef0     0F 13 02 F6 | 	mov	arg01, local01
16ef4     48 D4 B0 FD | 	call	#__system___float_mul
16ef8     FD 12 02 F6 | 	mov	arg01, result1
16efc     A0 DD B0 FD | 	call	#__system____builtin_sinf
16f00     A7 FA 61 FC | 	wrlong	result1, fp
16f04     08 4E 05 F1 | 	add	fp, #8
16f08     A7 3C 68 FC | 	wrlong	#30, fp
16f0c     08 4E 85 F1 | 	sub	fp, #8
16f10     A7 12 02 F6 | 	mov	arg01, fp
16f14     58 49 BF FD | 	call	#_push
16f18                 | LR__1891
16f18     A7 F0 03 F6 | 	mov	ptra, fp
16f1c     B2 00 A0 FD | 	call	#popregs_
16f20                 | _do_sin_ret
16f20     2D 00 64 FD | 	ret
16f24                 | 
16f24                 | ' 
16f24                 | ' ' ------------------ sprite
16f24                 | ' 
16f24                 | ' sub do_sprite
16f24                 | _do_sprite
16f24     00 4A 05 F6 | 	mov	COUNT_, #0
16f28     A8 00 A0 FD | 	call	#pushregs_
16f2c     30 F0 07 F1 | 	add	ptra, #48
16f30     A4 48 BF FD | 	call	#_pop
16f34     FD 16 02 F6 | 	mov	arg03, result1
16f38     FE 14 02 F6 | 	mov	arg02, result2
16f3c     FF 12 02 F6 | 	mov	arg01, result3
16f40     18 4E 05 F1 | 	add	fp, #24
16f44     A7 16 62 FC | 	wrlong	arg03, fp
16f48     04 4E 05 F1 | 	add	fp, #4
16f4c     A7 14 62 FC | 	wrlong	arg02, fp
16f50     04 4E 05 F1 | 	add	fp, #4
16f54     A7 12 62 FC | 	wrlong	arg01, fp
16f58     20 4E 85 F1 | 	sub	fp, #32
16f5c     78 48 BF FD | 	call	#_pop
16f60     FD 16 02 F6 | 	mov	arg03, result1
16f64     FE 14 02 F6 | 	mov	arg02, result2
16f68     FF 12 02 F6 | 	mov	arg01, result3
16f6c     0C 4E 05 F1 | 	add	fp, #12
16f70     A7 16 62 FC | 	wrlong	arg03, fp
16f74     04 4E 05 F1 | 	add	fp, #4
16f78     A7 14 62 FC | 	wrlong	arg02, fp
16f7c     04 4E 05 F1 | 	add	fp, #4
16f80     A7 12 62 FC | 	wrlong	arg01, fp
16f84     14 4E 85 F1 | 	sub	fp, #20
16f88     4C 48 BF FD | 	call	#_pop
16f8c     FF 16 02 F6 | 	mov	arg03, result3
16f90     A7 FA 61 FC | 	wrlong	result1, fp
16f94     04 4E 05 F1 | 	add	fp, #4
16f98     A7 FC 61 FC | 	wrlong	result2, fp
16f9c     04 4E 05 F1 | 	add	fp, #4
16fa0     A7 16 62 FC | 	wrlong	arg03, fp
16fa4     08 4E 85 F1 | 	sub	fp, #8
16fa8     A7 12 02 F6 | 	mov	arg01, fp
16fac     0C 4A BF FD | 	call	#_converttoint
16fb0     24 4E 05 F1 | 	add	fp, #36
16fb4     A7 FA 61 FC | 	wrlong	result1, fp
16fb8     18 4E 85 F1 | 	sub	fp, #24
16fbc     A7 12 02 F6 | 	mov	arg01, fp
16fc0     0C 4E 85 F1 | 	sub	fp, #12
16fc4     F4 49 BF FD | 	call	#_converttoint
16fc8     28 4E 05 F1 | 	add	fp, #40
16fcc     A7 FA 61 FC | 	wrlong	result1, fp
16fd0     10 4E 85 F1 | 	sub	fp, #16
16fd4     A7 12 02 F6 | 	mov	arg01, fp
16fd8     18 4E 85 F1 | 	sub	fp, #24
16fdc     DC 49 BF FD | 	call	#_converttoint
16fe0     2C 4E 05 F1 | 	add	fp, #44
16fe4     A7 FA 61 FC | 	wrlong	result1, fp
16fe8     08 4E 85 F1 | 	sub	fp, #8
16fec     A7 12 02 FB | 	rdlong	arg01, fp
16ff0     04 4E 05 F1 | 	add	fp, #4
16ff4     A7 14 02 FB | 	rdlong	arg02, fp
16ff8     FD 16 02 F6 | 	mov	arg03, result1
16ffc     28 4E 85 F1 | 	sub	fp, #40
17000     1C 7F B0 FD | 	call	#_hg010b_spin2_setspritepos
17004     A7 F0 03 F6 | 	mov	ptra, fp
17008     B2 00 A0 FD | 	call	#popregs_
1700c                 | _do_sprite_ret
1700c     2D 00 64 FD | 	ret
17010                 | 
17010                 | ' 
17010                 | ' ' ------------------ sqr
17010                 | ' 
17010                 | ' sub do_sqr
17010                 | _do_sqr
17010     01 4A 05 F6 | 	mov	COUNT_, #1
17014     A8 00 A0 FD | 	call	#pushregs_
17018     10 F0 07 F1 | 	add	ptra, #16
1701c     4A 00 00 FF 
17020     80 E4 05 F1 | 	add	objptr, ##38016
17024     F2 1E 02 FB | 	rdlong	local01, objptr
17028     0F 17 02 F6 | 	mov	arg03, local01
1702c     01 16 66 F0 | 	shl	arg03, #1
17030     0F 17 02 F1 | 	add	arg03, local01
17034     02 16 66 F0 | 	shl	arg03, #2
17038     03 00 00 FF 
1703c     04 E4 85 F1 | 	sub	objptr, ##1540
17040     F2 16 02 F1 | 	add	arg03, objptr
17044     0B 17 02 FB | 	rdlong	arg03, arg03
17048     0C 4E 05 F1 | 	add	fp, #12
1704c     A7 16 62 FC | 	wrlong	arg03, fp
17050                 | ' 
17050                 | ' numpar=compiledline(lineptr_e).result.uresult
17050                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17050     0C 4E 85 F1 | 	sub	fp, #12
17054     02 16 16 F2 | 	cmp	arg03, #2 wc
17058     47 00 00 FF 
1705c     7C E4 85 F1 | 	sub	objptr, ##36476
17060     0C 4E 05 C1 |  if_b	add	fp, #12
17064     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17068     0C 4E 85 C1 |  if_b	sub	fp, #12
1706c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1900
17070     00 12 06 F6 | 	mov	arg01, #0
17074     38 02 B1 FD | 	call	#__system___getiolock_0568
17078     FD 12 02 F6 | 	mov	arg01, result1
1707c     04 A5 B0 FD | 	call	#__system___lockmem
17080     8D 01 00 FF 
17084     EA 14 06 F6 | 	mov	arg02, ##@LR__5606
17088     00 12 06 F6 | 	mov	arg01, #0
1708c     00 16 06 F6 | 	mov	arg03, #0
17090     E4 B1 B0 FD | 	call	#__system___basic_print_string
17094     00 12 06 F6 | 	mov	arg01, #0
17098     14 02 B1 FD | 	call	#__system___getiolock_0568
1709c     FD 00 68 FC | 	wrlong	#0, result1
170a0     27 12 06 F6 | 	mov	arg01, #39
170a4     00 14 06 F6 | 	mov	arg02, #0
170a8     18 6F B0 FD | 	call	#_printerror
170ac     48 00 90 FD | 	jmp	#LR__1901
170b0                 | LR__1900
170b0     24 47 BF FD | 	call	#_pop
170b4     FF 1E 02 F6 | 	mov	local01, result3
170b8     A7 FA 61 FC | 	wrlong	result1, fp
170bc     04 4E 05 F1 | 	add	fp, #4
170c0     A7 FC 61 FC | 	wrlong	result2, fp
170c4     04 4E 05 F1 | 	add	fp, #4
170c8     A7 1E 62 FC | 	wrlong	local01, fp
170cc     08 4E 85 F1 | 	sub	fp, #8
170d0     A7 12 02 F6 | 	mov	arg01, fp
170d4     A0 49 BF FD | 	call	#_converttofloat
170d8     FD 12 02 F6 | 	mov	arg01, result1
170dc     88 D1 B0 FD | 	call	#__system___float_sqrt
170e0     A7 FA 61 FC | 	wrlong	result1, fp
170e4     08 4E 05 F1 | 	add	fp, #8
170e8     A7 3C 68 FC | 	wrlong	#30, fp
170ec     08 4E 85 F1 | 	sub	fp, #8
170f0     A7 12 02 F6 | 	mov	arg01, fp
170f4     78 47 BF FD | 	call	#_push
170f8                 | LR__1901
170f8     A7 F0 03 F6 | 	mov	ptra, fp
170fc     B2 00 A0 FD | 	call	#popregs_
17100                 | _do_sqr_ret
17100     2D 00 64 FD | 	ret
17104                 | 
17104                 | ' 
17104                 | ' ' ------------------ stick
17104                 | ' 
17104                 | ' sub do_stick
17104                 | _do_stick
17104     01 4A 05 F6 | 	mov	COUNT_, #1
17108     A8 00 A0 FD | 	call	#pushregs_
1710c     10 F0 07 F1 | 	add	ptra, #16
17110     4A 00 00 FF 
17114     80 E4 05 F1 | 	add	objptr, ##38016
17118     F2 1E 02 FB | 	rdlong	local01, objptr
1711c     0F 17 02 F6 | 	mov	arg03, local01
17120     01 16 66 F0 | 	shl	arg03, #1
17124     0F 17 02 F1 | 	add	arg03, local01
17128     02 16 66 F0 | 	shl	arg03, #2
1712c     03 00 00 FF 
17130     04 E4 85 F1 | 	sub	objptr, ##1540
17134     F2 16 02 F1 | 	add	arg03, objptr
17138     0B 17 02 FB | 	rdlong	arg03, arg03
1713c     0C 4E 05 F1 | 	add	fp, #12
17140     A7 16 62 FC | 	wrlong	arg03, fp
17144                 | ' 
17144                 | ' numpar=compiledline(lineptr_e).result.uresult
17144                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17144     0C 4E 85 F1 | 	sub	fp, #12
17148     02 16 16 F2 | 	cmp	arg03, #2 wc
1714c     47 00 00 FF 
17150     7C E4 85 F1 | 	sub	objptr, ##36476
17154     40 00 90 CD |  if_b	jmp	#LR__1910
17158     00 12 06 F6 | 	mov	arg01, #0
1715c     50 01 B1 FD | 	call	#__system___getiolock_0568
17160     FD 12 02 F6 | 	mov	arg01, result1
17164     1C A4 B0 FD | 	call	#__system___lockmem
17168     8D 01 00 FF 
1716c     F0 14 06 F6 | 	mov	arg02, ##@LR__5607
17170     00 12 06 F6 | 	mov	arg01, #0
17174     00 16 06 F6 | 	mov	arg03, #0
17178     FC B0 B0 FD | 	call	#__system___basic_print_string
1717c     00 12 06 F6 | 	mov	arg01, #0
17180     2C 01 B1 FD | 	call	#__system___getiolock_0568
17184     FD 00 68 FC | 	wrlong	#0, result1
17188     27 12 06 F6 | 	mov	arg01, #39
1718c     00 14 06 F6 | 	mov	arg02, #0
17190     30 6E B0 FD | 	call	#_printerror
17194     F0 00 90 FD | 	jmp	#LR__1914
17198                 | LR__1910
17198                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17198     0C 4E 05 F1 | 	add	fp, #12
1719c     A7 FE 09 FB | 	rdlong	result3, fp wz
171a0     0C 4E 85 F1 | 	sub	fp, #12
171a4     30 00 90 5D |  if_ne	jmp	#LR__1911
171a8     51 00 00 FF 
171ac     30 E5 05 F1 | 	add	objptr, ##41776
171b0     F2 1E 02 FB | 	rdlong	local01, objptr
171b4     51 00 00 FF 
171b8     30 E5 85 F1 | 	sub	objptr, ##41776
171bc     A7 1E 62 FC | 	wrlong	local01, fp
171c0     08 4E 05 F1 | 	add	fp, #8
171c4     A7 3A 68 FC | 	wrlong	#29, fp
171c8     08 4E 85 F1 | 	sub	fp, #8
171cc     A7 12 02 F6 | 	mov	arg01, fp
171d0     9C 46 BF FD | 	call	#_push
171d4     B0 00 90 FD | 	jmp	#LR__1914
171d8                 | LR__1911
171d8     FC 45 BF FD | 	call	#_pop
171dc     A7 FA 61 FC | 	wrlong	result1, fp
171e0     04 4E 05 F1 | 	add	fp, #4
171e4     A7 FC 61 FC | 	wrlong	result2, fp
171e8     04 4E 05 F1 | 	add	fp, #4
171ec     A7 FE 61 FC | 	wrlong	result3, fp
171f0                 | ' t1=pop()
171f0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
171f0     08 4E 85 F1 | 	sub	fp, #8
171f4     1C FE 0D F2 | 	cmp	result3, #28 wz
171f8     08 4E 05 51 |  if_ne	add	fp, #8
171fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17200     08 4E 85 51 |  if_ne	sub	fp, #8
17204     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17208     70 00 90 5D |  if_ne	jmp	#LR__1913
1720c     A7 1E 02 FB | 	rdlong	local01, fp
17210     52 00 00 FF 
17214     14 E4 05 F1 | 	add	objptr, ##42004
17218     F2 1E 62 FC | 	wrlong	local01, objptr
1721c                 | '   q=t1.result.uresult
1721c                 | '   if q<7 then 
1721c     52 00 00 FF 
17220     14 E4 85 F1 | 	sub	objptr, ##42004
17224     07 1E 56 F2 | 	cmps	local01, #7 wc
17228     40 00 90 3D |  if_ae	jmp	#LR__1912
1722c     52 00 00 FF 
17230     14 E4 05 F1 | 	add	objptr, ##42004
17234     F2 1E 02 FB | 	rdlong	local01, objptr
17238     02 1E 66 F0 | 	shl	local01, #2
1723c     E4 E4 85 F1 | 	sub	objptr, #228
17240     F2 1E 02 F1 | 	add	local01, objptr
17244     0F 1F 02 FB | 	rdlong	local01, local01
17248     A7 1E 62 FC | 	wrlong	local01, fp
1724c     08 4E 05 F1 | 	add	fp, #8
17250     A7 3A 68 FC | 	wrlong	#29, fp
17254     08 4E 85 F1 | 	sub	fp, #8
17258     A7 12 02 F6 | 	mov	arg01, fp
1725c     51 00 00 FF 
17260     30 E5 85 F1 | 	sub	objptr, ##41776
17264     08 46 BF FD | 	call	#_push
17268                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
17268     1C 00 90 FD | 	jmp	#LR__1914
1726c                 | LR__1912
1726c     29 12 06 F6 | 	mov	arg01, #41
17270     00 14 06 F6 | 	mov	arg02, #0
17274     4C 6D B0 FD | 	call	#_printerror
17278                 | '      printerror(41) : return
17278     0C 00 90 FD | 	jmp	#LR__1914
1727c                 | LR__1913
1727c     29 12 06 F6 | 	mov	arg01, #41
17280     00 14 06 F6 | 	mov	arg02, #0
17284     3C 6D B0 FD | 	call	#_printerror
17288                 | LR__1914
17288     A7 F0 03 F6 | 	mov	ptra, fp
1728c     B2 00 A0 FD | 	call	#popregs_
17290                 | _do_stick_ret
17290     2D 00 64 FD | 	ret
17294                 | 
17294                 | ' 
17294                 | ' ' ------------------ strig
17294                 | ' 
17294                 | ' sub do_strig
17294                 | _do_strig
17294     01 4A 05 F6 | 	mov	COUNT_, #1
17298     A8 00 A0 FD | 	call	#pushregs_
1729c     10 F0 07 F1 | 	add	ptra, #16
172a0     4A 00 00 FF 
172a4     80 E4 05 F1 | 	add	objptr, ##38016
172a8     F2 1E 02 FB | 	rdlong	local01, objptr
172ac     0F 17 02 F6 | 	mov	arg03, local01
172b0     01 16 66 F0 | 	shl	arg03, #1
172b4     0F 17 02 F1 | 	add	arg03, local01
172b8     02 16 66 F0 | 	shl	arg03, #2
172bc     03 00 00 FF 
172c0     04 E4 85 F1 | 	sub	objptr, ##1540
172c4     F2 16 02 F1 | 	add	arg03, objptr
172c8     0B 17 02 FB | 	rdlong	arg03, arg03
172cc     0C 4E 05 F1 | 	add	fp, #12
172d0     A7 16 62 FC | 	wrlong	arg03, fp
172d4                 | ' 
172d4                 | ' numpar=compiledline(lineptr_e).result.uresult
172d4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
172d4     0C 4E 85 F1 | 	sub	fp, #12
172d8     02 16 16 F2 | 	cmp	arg03, #2 wc
172dc     47 00 00 FF 
172e0     7C E4 85 F1 | 	sub	objptr, ##36476
172e4     40 00 90 CD |  if_b	jmp	#LR__1920
172e8     00 12 06 F6 | 	mov	arg01, #0
172ec     C0 FF B0 FD | 	call	#__system___getiolock_0568
172f0     FD 12 02 F6 | 	mov	arg01, result1
172f4     8C A2 B0 FD | 	call	#__system___lockmem
172f8     8D 01 00 FF 
172fc     F8 14 06 F6 | 	mov	arg02, ##@LR__5608
17300     00 12 06 F6 | 	mov	arg01, #0
17304     00 16 06 F6 | 	mov	arg03, #0
17308     6C AF B0 FD | 	call	#__system___basic_print_string
1730c     00 12 06 F6 | 	mov	arg01, #0
17310     9C FF B0 FD | 	call	#__system___getiolock_0568
17314     FD 00 68 FC | 	wrlong	#0, result1
17318     27 12 06 F6 | 	mov	arg01, #39
1731c     00 14 06 F6 | 	mov	arg02, #0
17320     A0 6C B0 FD | 	call	#_printerror
17324     F0 00 90 FD | 	jmp	#LR__1924
17328                 | LR__1920
17328                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17328     0C 4E 05 F1 | 	add	fp, #12
1732c     A7 FE 09 FB | 	rdlong	result3, fp wz
17330     0C 4E 85 F1 | 	sub	fp, #12
17334     30 00 90 5D |  if_ne	jmp	#LR__1921
17338     51 00 00 FF 
1733c     4C E5 05 F1 | 	add	objptr, ##41804
17340     F2 1E 02 FB | 	rdlong	local01, objptr
17344     51 00 00 FF 
17348     4C E5 85 F1 | 	sub	objptr, ##41804
1734c     A7 1E 62 FC | 	wrlong	local01, fp
17350     08 4E 05 F1 | 	add	fp, #8
17354     A7 3A 68 FC | 	wrlong	#29, fp
17358     08 4E 85 F1 | 	sub	fp, #8
1735c     A7 12 02 F6 | 	mov	arg01, fp
17360     0C 45 BF FD | 	call	#_push
17364     B0 00 90 FD | 	jmp	#LR__1924
17368                 | LR__1921
17368     6C 44 BF FD | 	call	#_pop
1736c     A7 FA 61 FC | 	wrlong	result1, fp
17370     04 4E 05 F1 | 	add	fp, #4
17374     A7 FC 61 FC | 	wrlong	result2, fp
17378     04 4E 05 F1 | 	add	fp, #4
1737c     A7 FE 61 FC | 	wrlong	result3, fp
17380                 | ' t1=pop()
17380                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17380     08 4E 85 F1 | 	sub	fp, #8
17384     1C FE 0D F2 | 	cmp	result3, #28 wz
17388     08 4E 05 51 |  if_ne	add	fp, #8
1738c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17390     08 4E 85 51 |  if_ne	sub	fp, #8
17394     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17398     70 00 90 5D |  if_ne	jmp	#LR__1923
1739c     A7 1E 02 FB | 	rdlong	local01, fp
173a0     52 00 00 FF 
173a4     14 E4 05 F1 | 	add	objptr, ##42004
173a8     F2 1E 62 FC | 	wrlong	local01, objptr
173ac                 | '   q=t1.result.uresult
173ac                 | '   if q<7 then 
173ac     52 00 00 FF 
173b0     14 E4 85 F1 | 	sub	objptr, ##42004
173b4     07 1E 56 F2 | 	cmps	local01, #7 wc
173b8     40 00 90 3D |  if_ae	jmp	#LR__1922
173bc     52 00 00 FF 
173c0     14 E4 05 F1 | 	add	objptr, ##42004
173c4     F2 1E 02 FB | 	rdlong	local01, objptr
173c8     02 1E 66 F0 | 	shl	local01, #2
173cc     C8 E4 85 F1 | 	sub	objptr, #200
173d0     F2 1E 02 F1 | 	add	local01, objptr
173d4     0F 1F 02 FB | 	rdlong	local01, local01
173d8     A7 1E 62 FC | 	wrlong	local01, fp
173dc     08 4E 05 F1 | 	add	fp, #8
173e0     A7 3A 68 FC | 	wrlong	#29, fp
173e4     08 4E 85 F1 | 	sub	fp, #8
173e8     A7 12 02 F6 | 	mov	arg01, fp
173ec     51 00 00 FF 
173f0     4C E5 85 F1 | 	sub	objptr, ##41804
173f4     78 44 BF FD | 	call	#_push
173f8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
173f8     1C 00 90 FD | 	jmp	#LR__1924
173fc                 | LR__1922
173fc     29 12 06 F6 | 	mov	arg01, #41
17400     00 14 06 F6 | 	mov	arg02, #0
17404     BC 6B B0 FD | 	call	#_printerror
17408                 | '      printerror(41) : return
17408     0C 00 90 FD | 	jmp	#LR__1924
1740c                 | LR__1923
1740c     29 12 06 F6 | 	mov	arg01, #41
17410     00 14 06 F6 | 	mov	arg02, #0
17414     AC 6B B0 FD | 	call	#_printerror
17418                 | LR__1924
17418     A7 F0 03 F6 | 	mov	ptra, fp
1741c     B2 00 A0 FD | 	call	#popregs_
17420                 | _do_strig_ret
17420     2D 00 64 FD | 	ret
17424                 | 
17424                 | ' 
17424                 | ' ' ------------------ tan
17424                 | ' 
17424                 | ' sub do_tan
17424                 | _do_tan
17424     01 4A 05 F6 | 	mov	COUNT_, #1
17428     A8 00 A0 FD | 	call	#pushregs_
1742c     10 F0 07 F1 | 	add	ptra, #16
17430     4A 00 00 FF 
17434     80 E4 05 F1 | 	add	objptr, ##38016
17438     F2 1E 02 FB | 	rdlong	local01, objptr
1743c     0F 17 02 F6 | 	mov	arg03, local01
17440     01 16 66 F0 | 	shl	arg03, #1
17444     0F 17 02 F1 | 	add	arg03, local01
17448     02 16 66 F0 | 	shl	arg03, #2
1744c     03 00 00 FF 
17450     04 E4 85 F1 | 	sub	objptr, ##1540
17454     F2 16 02 F1 | 	add	arg03, objptr
17458     0B 17 02 FB | 	rdlong	arg03, arg03
1745c     0C 4E 05 F1 | 	add	fp, #12
17460     A7 16 62 FC | 	wrlong	arg03, fp
17464                 | ' 
17464                 | ' numpar=compiledline(lineptr_e).result.uresult
17464                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17464     0C 4E 85 F1 | 	sub	fp, #12
17468     02 16 16 F2 | 	cmp	arg03, #2 wc
1746c     47 00 00 FF 
17470     7C E4 85 F1 | 	sub	objptr, ##36476
17474     0C 4E 05 C1 |  if_b	add	fp, #12
17478     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1747c     0C 4E 85 C1 |  if_b	sub	fp, #12
17480     40 00 90 4D |  if_c_and_nz	jmp	#LR__1930
17484     00 12 06 F6 | 	mov	arg01, #0
17488     24 FE B0 FD | 	call	#__system___getiolock_0568
1748c     FD 12 02 F6 | 	mov	arg01, result1
17490     F0 A0 B0 FD | 	call	#__system___lockmem
17494     8D 01 00 FF 
17498     00 15 06 F6 | 	mov	arg02, ##@LR__5609
1749c     00 12 06 F6 | 	mov	arg01, #0
174a0     00 16 06 F6 | 	mov	arg03, #0
174a4     D0 AD B0 FD | 	call	#__system___basic_print_string
174a8     00 12 06 F6 | 	mov	arg01, #0
174ac     00 FE B0 FD | 	call	#__system___getiolock_0568
174b0     FD 00 68 FC | 	wrlong	#0, result1
174b4     27 12 06 F6 | 	mov	arg01, #39
174b8     00 14 06 F6 | 	mov	arg02, #0
174bc     04 6B B0 FD | 	call	#_printerror
174c0     64 00 90 FD | 	jmp	#LR__1931
174c4                 | LR__1930
174c4     10 43 BF FD | 	call	#_pop
174c8     A7 FA 61 FC | 	wrlong	result1, fp
174cc     04 4E 05 F1 | 	add	fp, #4
174d0     A7 FC 61 FC | 	wrlong	result2, fp
174d4     04 4E 05 F1 | 	add	fp, #4
174d8     A7 FE 61 FC | 	wrlong	result3, fp
174dc     08 4E 85 F1 | 	sub	fp, #8
174e0     51 00 00 FF 
174e4     BC E5 05 F1 | 	add	objptr, ##41916
174e8     F2 1E 02 FB | 	rdlong	local01, objptr
174ec     51 00 00 FF 
174f0     BC E5 85 F1 | 	sub	objptr, ##41916
174f4     A7 12 02 F6 | 	mov	arg01, fp
174f8     7C 45 BF FD | 	call	#_converttofloat
174fc     FD 14 02 F6 | 	mov	arg02, result1
17500     0F 13 02 F6 | 	mov	arg01, local01
17504     38 CE B0 FD | 	call	#__system___float_mul
17508     FD 12 02 F6 | 	mov	arg01, result1
1750c     DC D8 B0 FD | 	call	#__system____builtin_tanf
17510     A7 FA 61 FC | 	wrlong	result1, fp
17514     08 4E 05 F1 | 	add	fp, #8
17518     A7 3C 68 FC | 	wrlong	#30, fp
1751c     08 4E 85 F1 | 	sub	fp, #8
17520     A7 12 02 F6 | 	mov	arg01, fp
17524     48 43 BF FD | 	call	#_push
17528                 | LR__1931
17528     A7 F0 03 F6 | 	mov	ptra, fp
1752c     B2 00 A0 FD | 	call	#popregs_
17530                 | _do_tan_ret
17530     2D 00 64 FD | 	ret
17534                 | 
17534                 | ' 
17534                 | ' ' ------------------ val
17534                 | ' 
17534                 | ' sub do_val
17534                 | _do_val
17534     03 4A 05 F6 | 	mov	COUNT_, #3
17538     A8 00 A0 FD | 	call	#pushregs_
1753c     20 F0 07 F1 | 	add	ptra, #32
17540     4A 00 00 FF 
17544     80 E4 05 F1 | 	add	objptr, ##38016
17548     F2 16 02 FB | 	rdlong	arg03, objptr
1754c     0B 1F 02 F6 | 	mov	local01, arg03
17550     01 1E 66 F0 | 	shl	local01, #1
17554     0B 1F 02 F1 | 	add	local01, arg03
17558     02 1E 66 F0 | 	shl	local01, #2
1755c     03 00 00 FF 
17560     04 E4 85 F1 | 	sub	objptr, ##1540
17564     F2 1E 02 F1 | 	add	local01, objptr
17568     0F 17 02 FB | 	rdlong	arg03, local01
1756c     0C 4E 05 F1 | 	add	fp, #12
17570     A7 16 62 FC | 	wrlong	arg03, fp
17574                 | ' 
17574                 | ' numpar=compiledline(lineptr_e).result.uresult
17574                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
17574     0C 4E 85 F1 | 	sub	fp, #12
17578     02 16 16 F2 | 	cmp	arg03, #2 wc
1757c     47 00 00 FF 
17580     7C E4 85 F1 | 	sub	objptr, ##36476
17584     0C 4E 05 C1 |  if_b	add	fp, #12
17588     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1758c     0C 4E 85 C1 |  if_b	sub	fp, #12
17590     40 00 90 4D |  if_c_and_nz	jmp	#LR__1940
17594     00 12 06 F6 | 	mov	arg01, #0
17598     14 FD B0 FD | 	call	#__system___getiolock_0568
1759c     FD 12 02 F6 | 	mov	arg01, result1
175a0     E0 9F B0 FD | 	call	#__system___lockmem
175a4     8D 01 00 FF 
175a8     06 15 06 F6 | 	mov	arg02, ##@LR__5610
175ac     00 12 06 F6 | 	mov	arg01, #0
175b0     00 16 06 F6 | 	mov	arg03, #0
175b4     C0 AC B0 FD | 	call	#__system___basic_print_string
175b8     00 12 06 F6 | 	mov	arg01, #0
175bc     F0 FC B0 FD | 	call	#__system___getiolock_0568
175c0     FD 00 68 FC | 	wrlong	#0, result1
175c4     27 12 06 F6 | 	mov	arg01, #39
175c8     00 14 06 F6 | 	mov	arg02, #0
175cc     F4 69 B0 FD | 	call	#_printerror
175d0     60 02 90 FD | 	jmp	#LR__1953
175d4                 | LR__1940
175d4     00 42 BF FD | 	call	#_pop
175d8     FF 16 02 F6 | 	mov	arg03, result3
175dc     A7 FA 61 FC | 	wrlong	result1, fp
175e0     04 4E 05 F1 | 	add	fp, #4
175e4     A7 FC 61 FC | 	wrlong	result2, fp
175e8     04 4E 05 F1 | 	add	fp, #4
175ec     A7 16 62 FC | 	wrlong	arg03, fp
175f0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
175f0     08 4E 85 F1 | 	sub	fp, #8
175f4     2B 16 0E F2 | 	cmp	arg03, #43 wz
175f8     18 00 90 5D |  if_ne	jmp	#LR__1941
175fc     A7 12 02 FB | 	rdlong	arg01, fp
17600     4C 43 BF FD | 	call	#_convertstring
17604     A7 FA 61 FC | 	wrlong	result1, fp
17608     08 4E 05 F1 | 	add	fp, #8
1760c     A7 3E 68 FC | 	wrlong	#31, fp
17610     08 4E 85 F1 | 	sub	fp, #8
17614                 | LR__1941
17614                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
17614     08 4E 05 F1 | 	add	fp, #8
17618     A7 16 02 FB | 	rdlong	arg03, fp
1761c     08 4E 85 F1 | 	sub	fp, #8
17620     1F 16 0E F2 | 	cmp	arg03, #31 wz
17624     40 00 90 AD |  if_e	jmp	#LR__1942
17628     00 12 06 F6 | 	mov	arg01, #0
1762c     80 FC B0 FD | 	call	#__system___getiolock_0568
17630     FD 12 02 F6 | 	mov	arg01, result1
17634     4C 9F B0 FD | 	call	#__system___lockmem
17638     8D 01 00 FF 
1763c     0C 15 06 F6 | 	mov	arg02, ##@LR__5611
17640     00 12 06 F6 | 	mov	arg01, #0
17644     00 16 06 F6 | 	mov	arg03, #0
17648     2C AC B0 FD | 	call	#__system___basic_print_string
1764c     00 12 06 F6 | 	mov	arg01, #0
17650     5C FC B0 FD | 	call	#__system___getiolock_0568
17654     FD 00 68 FC | 	wrlong	#0, result1
17658     0F 12 06 F6 | 	mov	arg01, #15
1765c     00 14 06 F6 | 	mov	arg02, #0
17660     60 69 B0 FD | 	call	#_printerror
17664     CC 01 90 FD | 	jmp	#LR__1953
17668                 | LR__1942
17668                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
17668     A7 12 02 FB | 	rdlong	arg01, fp
1766c     01 14 06 F6 | 	mov	arg02, #1
17670     8C BF B0 FD | 	call	#__system__Left_S
17674     FD 12 02 F6 | 	mov	arg01, result1
17678     8D 01 00 FF 
1767c     12 15 06 F6 | 	mov	arg02, ##@LR__5612
17680     28 9F B0 FD | 	call	#__system___string_cmp
17684     00 FA 0D F2 | 	cmp	result1, #0 wz
17688     48 00 90 5D |  if_ne	jmp	#LR__1945
1768c     8D 01 00 FF 
17690     14 1F 06 F6 | 	mov	local01, ##@LR__5613
17694     A7 16 02 FB | 	rdlong	arg03, fp
17698     0B 13 02 F6 | 	mov	arg01, arg03
1769c     09 21 02 F6 | 	mov	local02, arg01
176a0     97 06 48 FB | 	callpa	#(@LR__1944-@LR__1943)>>2,fcache_load_ptr_
176a4                 | LR__1943
176a4     10 FB C9 FA | 	rdbyte	result1, local02 wz
176a8     01 20 06 51 |  if_ne	add	local02, #1
176ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1943
176b0                 | LR__1944
176b0     09 21 82 F1 | 	sub	local02, arg01
176b4     10 15 02 F6 | 	mov	arg02, local02
176b8     01 14 86 F1 | 	sub	arg02, #1
176bc     0B 13 02 F6 | 	mov	arg01, arg03
176c0     C4 BF B0 FD | 	call	#__system__Right_S
176c4     FD 14 02 F6 | 	mov	arg02, result1
176c8     0F 13 02 F6 | 	mov	arg01, local01
176cc     10 9F B0 FD | 	call	#__system___string_concat
176d0     A7 FA 61 FC | 	wrlong	result1, fp
176d4                 | LR__1945
176d4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
176d4     A7 12 02 FB | 	rdlong	arg01, fp
176d8     01 14 06 F6 | 	mov	arg02, #1
176dc     20 BF B0 FD | 	call	#__system__Left_S
176e0     FD 12 02 F6 | 	mov	arg01, result1
176e4     8D 01 00 FF 
176e8     17 15 06 F6 | 	mov	arg02, ##@LR__5614
176ec     BC 9E B0 FD | 	call	#__system___string_cmp
176f0     00 FA 0D F2 | 	cmp	result1, #0 wz
176f4     48 00 90 5D |  if_ne	jmp	#LR__1948
176f8     8D 01 00 FF 
176fc     19 1F 06 F6 | 	mov	local01, ##@LR__5615
17700     A7 16 02 FB | 	rdlong	arg03, fp
17704     0B 13 02 F6 | 	mov	arg01, arg03
17708     09 21 02 F6 | 	mov	local02, arg01
1770c     97 06 48 FB | 	callpa	#(@LR__1947-@LR__1946)>>2,fcache_load_ptr_
17710                 | LR__1946
17710     10 FB C9 FA | 	rdbyte	result1, local02 wz
17714     01 20 06 51 |  if_ne	add	local02, #1
17718     F4 FF 9F 5D |  if_ne	jmp	#LR__1946
1771c                 | LR__1947
1771c     09 21 82 F1 | 	sub	local02, arg01
17720     10 15 02 F6 | 	mov	arg02, local02
17724     01 14 86 F1 | 	sub	arg02, #1
17728     0B 13 02 F6 | 	mov	arg01, arg03
1772c     58 BF B0 FD | 	call	#__system__Right_S
17730     FD 14 02 F6 | 	mov	arg02, result1
17734     0F 13 02 F6 | 	mov	arg01, local01
17738     A4 9E B0 FD | 	call	#__system___string_concat
1773c     A7 FA 61 FC | 	wrlong	result1, fp
17740                 | LR__1948
17740     A7 12 02 FB | 	rdlong	arg01, fp
17744     04 D4 B0 FD | 	call	#__system____builtin_atof
17748     1C 4E 05 F1 | 	add	fp, #28
1774c     A7 FA 61 FC | 	wrlong	result1, fp
17750     1C 4E 85 F1 | 	sub	fp, #28
17754     A7 12 02 FB | 	rdlong	arg01, fp
17758     00 14 06 F6 | 	mov	arg02, #0
1775c     58 D2 B0 FD | 	call	#__system____builtin_atoi
17760     18 4E 05 F1 | 	add	fp, #24
17764     A7 FA 61 FC | 	wrlong	result1, fp
17768                 | ' fval=val(t1.result.sresult)
17768                 | ' ival=val%(t1.result.sresult)
17768                 | ' if fval=ival then
17768     04 4E 05 F1 | 	add	fp, #4
1776c     A7 1E 02 FB | 	rdlong	local01, fp
17770     1C 4E 85 F1 | 	sub	fp, #28
17774     FD 12 52 F6 | 	abs	arg01, result1 wc
17778     1F 22 C6 C9 |  if_b	decod	local03, #31
1777c     00 22 06 36 |  if_ae	mov	local03, #0
17780     B8 C7 B0 FD | 	call	#__system___float_fromuns
17784     11 FB 61 F5 | 	xor	result1, local03
17788     FD 14 02 F6 | 	mov	arg02, result1
1778c     0F 13 02 F6 | 	mov	arg01, local01
17790     01 16 06 F6 | 	mov	arg03, #1
17794     DC CF B0 FD | 	call	#__system___float_cmp
17798     00 FA 0D F2 | 	cmp	result1, #0 wz
1779c     20 00 90 5D |  if_ne	jmp	#LR__1949
177a0     18 4E 05 F1 | 	add	fp, #24
177a4     A7 1E 02 FB | 	rdlong	local01, fp
177a8     18 4E 85 F1 | 	sub	fp, #24
177ac     A7 1E 62 FC | 	wrlong	local01, fp
177b0     08 4E 05 F1 | 	add	fp, #8
177b4     A7 38 68 FC | 	wrlong	#28, fp
177b8     08 4E 85 F1 | 	sub	fp, #8
177bc     6C 00 90 FD | 	jmp	#LR__1952
177c0                 | LR__1949
177c0                 | '   if fval=0 andalso ival<>0 then
177c0     1C 4E 05 F1 | 	add	fp, #28
177c4     A7 12 02 FB | 	rdlong	arg01, fp
177c8     1C 4E 85 F1 | 	sub	fp, #28
177cc     00 14 06 F6 | 	mov	arg02, #0
177d0     01 16 06 F6 | 	mov	arg03, #1
177d4     9C CF B0 FD | 	call	#__system___float_cmp
177d8     00 FA 0D F2 | 	cmp	result1, #0 wz
177dc     30 00 90 5D |  if_ne	jmp	#LR__1950
177e0     18 4E 05 F1 | 	add	fp, #24
177e4     A7 1E 0A FB | 	rdlong	local01, fp wz
177e8     18 4E 85 F1 | 	sub	fp, #24
177ec     20 00 90 AD |  if_e	jmp	#LR__1950
177f0     18 4E 05 F1 | 	add	fp, #24
177f4     A7 1E 02 FB | 	rdlong	local01, fp
177f8     18 4E 85 F1 | 	sub	fp, #24
177fc     A7 1E 62 FC | 	wrlong	local01, fp
17800     08 4E 05 F1 | 	add	fp, #8
17804     A7 38 68 FC | 	wrlong	#28, fp
17808     08 4E 85 F1 | 	sub	fp, #8
1780c     1C 00 90 FD | 	jmp	#LR__1951
17810                 | LR__1950
17810     1C 4E 05 F1 | 	add	fp, #28
17814     A7 1E 02 FB | 	rdlong	local01, fp
17818     1C 4E 85 F1 | 	sub	fp, #28
1781c     A7 1E 62 FC | 	wrlong	local01, fp
17820     08 4E 05 F1 | 	add	fp, #8
17824     A7 3C 68 FC | 	wrlong	#30, fp
17828     08 4E 85 F1 | 	sub	fp, #8
1782c                 | LR__1951
1782c                 | LR__1952
1782c     A7 12 02 F6 | 	mov	arg01, fp
17830     3C 40 BF FD | 	call	#_push
17834                 | LR__1953
17834     A7 F0 03 F6 | 	mov	ptra, fp
17838     B2 00 A0 FD | 	call	#popregs_
1783c                 | _do_val_ret
1783c     2D 00 64 FD | 	ret
17840                 | 
17840                 | ' 
17840                 | ' ' ------------------ waitclock
17840                 | ' 
17840                 | ' sub do_waitclock
17840                 | _do_waitclock
17840     51 00 00 FF 
17844     A8 E5 05 F1 | 	add	objptr, ##41896
17848     F2 00 02 FB | 	rdlong	_var01, objptr
1784c                 | ' c=hkcnt
1784c                 | ' do: loop until hkcnt<>c
1784c                 | LR__1960
1784c     F2 02 02 FB | 	rdlong	_var02, objptr
17850     00 03 0A F2 | 	cmp	_var02, _var01 wz
17854     F4 FF 9F AD |  if_e	jmp	#LR__1960
17858     51 00 00 FF 
1785c     A8 E5 85 F1 | 	sub	objptr, ##41896
17860                 | _do_waitclock_ret
17860     2D 00 64 FD | 	ret
17864                 | 
17864                 | ' 
17864                 | ' ' ------------------ waitms
17864                 | ' 
17864                 | ' sub do_waitms
17864                 | _do_waitms
17864     01 4A 05 F6 | 	mov	COUNT_, #1
17868     A8 00 A0 FD | 	call	#pushregs_
1786c     18 F0 07 F1 | 	add	ptra, #24
17870     64 3F BF FD | 	call	#_pop
17874     A7 FA 61 FC | 	wrlong	result1, fp
17878     04 4E 05 F1 | 	add	fp, #4
1787c     A7 FC 61 FC | 	wrlong	result2, fp
17880     04 4E 05 F1 | 	add	fp, #4
17884     A7 FE 61 FC | 	wrlong	result3, fp
17888     08 4E 85 F1 | 	sub	fp, #8
1788c     A7 12 02 F6 | 	mov	arg01, fp
17890     28 41 BF FD | 	call	#_converttoint
17894     0C 4E 05 F1 | 	add	fp, #12
17898     A7 FA 61 FC | 	wrlong	result1, fp
1789c                 | ' 
1789c                 | ' t1=pop()  
1789c                 | ' t=converttoint(t1)
1789c                 | ' if t<0 then return
1789c     0C 4E 85 F1 | 	sub	fp, #12
178a0     00 FA 55 F2 | 	cmps	result1, #0 wc
178a4     E4 00 90 CD |  if_b	jmp	#LR__1976
178a8                 | ' if t < 1000 then 
178a8     0C 4E 05 F1 | 	add	fp, #12
178ac     A7 12 02 FB | 	rdlong	arg01, fp
178b0     0C 4E 85 F1 | 	sub	fp, #12
178b4     01 00 00 FF 
178b8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
178bc     14 00 90 3D |  if_ae	jmp	#LR__1970
178c0     0C 4E 05 F1 | 	add	fp, #12
178c4     A7 12 02 FB | 	rdlong	arg01, fp
178c8     0C 4E 85 F1 | 	sub	fp, #12
178cc     A8 9F B0 FD | 	call	#__system___waitms
178d0     B8 00 90 FD | 	jmp	#LR__1975
178d4                 | LR__1970
178d4     10 4E 05 F1 | 	add	fp, #16
178d8     A7 02 68 FC | 	wrlong	#1, fp
178dc     04 4E 85 F1 | 	sub	fp, #4
178e0     A7 12 02 FB | 	rdlong	arg01, fp
178e4     09 13 52 F6 | 	abs	arg01, arg01 wc
178e8     01 00 00 FF 
178ec     E8 13 16 FD | 	qdiv	arg01, ##1000
178f0                 | '   for i=1 to t/1000
178f0     0C 4E 85 F1 | 	sub	fp, #12
178f4     18 1E 62 FD | 	getqx	local01
178f8     0F 1F 82 F6 | 	negc	local01, local01
178fc     01 1E 06 F1 | 	add	local01, #1
17900                 | LR__1971
17900     10 4E 05 F1 | 	add	fp, #16
17904     A7 12 02 FB | 	rdlong	arg01, fp
17908     10 4E 85 F1 | 	sub	fp, #16
1790c     0F 13 52 F2 | 	cmps	arg01, local01 wc
17910     54 00 90 3D |  if_ae	jmp	#LR__1974
17914     01 00 00 FF 
17918     E8 13 06 F6 | 	mov	arg01, ##1000
1791c     58 9F B0 FD | 	call	#__system___waitms
17920                 | '     waitms(1000)
17920                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
17920     E0 12 06 F6 | 	mov	arg01, #224
17924     AC 93 B0 FD | 	call	#_usbnew_spin2_keystate
17928     00 FA 0D F2 | 	cmp	result1, #0 wz
1792c     10 00 90 5D |  if_ne	jmp	#LR__1972
17930     E4 12 06 F6 | 	mov	arg01, #228
17934     9C 93 B0 FD | 	call	#_usbnew_spin2_keystate
17938     00 FA 0D F2 | 	cmp	result1, #0 wz
1793c     10 00 90 AD |  if_e	jmp	#LR__1973
17940                 | LR__1972
17940     06 12 06 F6 | 	mov	arg01, #6
17944     8C 93 B0 FD | 	call	#_usbnew_spin2_keystate
17948     00 FA 0D F2 | 	cmp	result1, #0 wz
1794c     3C 00 90 5D |  if_ne	jmp	#LR__1976
17950                 | LR__1973
17950     10 4E 05 F1 | 	add	fp, #16
17954     A7 12 02 FB | 	rdlong	arg01, fp
17958     01 12 06 F1 | 	add	arg01, #1
1795c     A7 12 62 FC | 	wrlong	arg01, fp
17960     10 4E 85 F1 | 	sub	fp, #16
17964     98 FF 9F FD | 	jmp	#LR__1971
17968                 | LR__1974
17968     0C 4E 05 F1 | 	add	fp, #12
1796c     A7 1E 02 FB | 	rdlong	local01, fp
17970     0F 1F 52 F6 | 	abs	local01, local01 wc
17974     01 00 00 FF 
17978     E8 1F 16 FD | 	qdiv	local01, ##1000
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     19 1E 62 FD | 	getqy	local01
17984     0F 13 82 F6 | 	negc	arg01, local01
17988     EC 9E B0 FD | 	call	#__system___waitms
1798c                 | LR__1975
1798c                 | LR__1976
1798c     A7 F0 03 F6 | 	mov	ptra, fp
17990     B2 00 A0 FD | 	call	#popregs_
17994                 | _do_waitms_ret
17994     2D 00 64 FD | 	ret
17998                 | 
17998                 | ' 
17998                 | ' ' ------------------ waitvbl
17998                 | ' 
17998                 | ' sub do_waitvbl
17998                 | _do_waitvbl
17998     01 12 06 F6 | 	mov	arg01, #1
1799c     98 82 B0 FD | 	call	#_hg010b_spin2_waitvbl
179a0                 | _do_waitvbl_ret
179a0     2D 00 64 FD | 	ret
179a4                 | 
179a4                 | ' 
179a4                 | ' ' ------------------ wrpin
179a4                 | ' 
179a4                 | ' sub do_wrpin
179a4                 | _do_wrpin
179a4     01 4A 05 F6 | 	mov	COUNT_, #1
179a8     A8 00 A0 FD | 	call	#pushregs_
179ac     18 F0 07 F1 | 	add	ptra, #24
179b0     24 3E BF FD | 	call	#_pop
179b4     FD 14 02 F6 | 	mov	arg02, result1
179b8     FE 12 02 F6 | 	mov	arg01, result2
179bc     FF 1E 02 F6 | 	mov	local01, result3
179c0     A7 14 62 FC | 	wrlong	arg02, fp
179c4     04 4E 05 F1 | 	add	fp, #4
179c8     A7 12 62 FC | 	wrlong	arg01, fp
179cc     04 4E 05 F1 | 	add	fp, #4
179d0     A7 1E 62 FC | 	wrlong	local01, fp
179d4     08 4E 85 F1 | 	sub	fp, #8
179d8     FC 3D BF FD | 	call	#_pop
179dc     FF 1E 02 F6 | 	mov	local01, result3
179e0     0C 4E 05 F1 | 	add	fp, #12
179e4     A7 FA 61 FC | 	wrlong	result1, fp
179e8     04 4E 05 F1 | 	add	fp, #4
179ec     A7 FC 61 FC | 	wrlong	result2, fp
179f0     04 4E 05 F1 | 	add	fp, #4
179f4     A7 1E 62 FC | 	wrlong	local01, fp
179f8     08 4E 85 F1 | 	sub	fp, #8
179fc     A7 12 02 F6 | 	mov	arg01, fp
17a00     0C 4E 85 F1 | 	sub	fp, #12
17a04     B4 3F BF FD | 	call	#_converttoint
17a08     FD 1E 02 F6 | 	mov	local01, result1
17a0c     A7 12 02 F6 | 	mov	arg01, fp
17a10     A8 3F BF FD | 	call	#_converttoint
17a14     0F FB 01 FC | 	wrpin	result1, local01
17a18     A7 F0 03 F6 | 	mov	ptra, fp
17a1c     B2 00 A0 FD | 	call	#popregs_
17a20                 | _do_wrpin_ret
17a20     2D 00 64 FD | 	ret
17a24                 | 
17a24                 | ' 
17a24                 | ' ' ------------------ wxpin
17a24                 | ' 
17a24                 | ' sub do_wxpin
17a24                 | _do_wxpin
17a24     01 4A 05 F6 | 	mov	COUNT_, #1
17a28     A8 00 A0 FD | 	call	#pushregs_
17a2c     18 F0 07 F1 | 	add	ptra, #24
17a30     A4 3D BF FD | 	call	#_pop
17a34     FD 14 02 F6 | 	mov	arg02, result1
17a38     FE 12 02 F6 | 	mov	arg01, result2
17a3c     FF 1E 02 F6 | 	mov	local01, result3
17a40     A7 14 62 FC | 	wrlong	arg02, fp
17a44     04 4E 05 F1 | 	add	fp, #4
17a48     A7 12 62 FC | 	wrlong	arg01, fp
17a4c     04 4E 05 F1 | 	add	fp, #4
17a50     A7 1E 62 FC | 	wrlong	local01, fp
17a54     08 4E 85 F1 | 	sub	fp, #8
17a58     7C 3D BF FD | 	call	#_pop
17a5c     FF 1E 02 F6 | 	mov	local01, result3
17a60     0C 4E 05 F1 | 	add	fp, #12
17a64     A7 FA 61 FC | 	wrlong	result1, fp
17a68     04 4E 05 F1 | 	add	fp, #4
17a6c     A7 FC 61 FC | 	wrlong	result2, fp
17a70     04 4E 05 F1 | 	add	fp, #4
17a74     A7 1E 62 FC | 	wrlong	local01, fp
17a78     08 4E 85 F1 | 	sub	fp, #8
17a7c     A7 12 02 F6 | 	mov	arg01, fp
17a80     0C 4E 85 F1 | 	sub	fp, #12
17a84     34 3F BF FD | 	call	#_converttoint
17a88     FD 1E 02 F6 | 	mov	local01, result1
17a8c     A7 12 02 F6 | 	mov	arg01, fp
17a90     28 3F BF FD | 	call	#_converttoint
17a94     0F FB 11 FC | 	wxpin	result1, local01
17a98     A7 F0 03 F6 | 	mov	ptra, fp
17a9c     B2 00 A0 FD | 	call	#popregs_
17aa0                 | _do_wxpin_ret
17aa0     2D 00 64 FD | 	ret
17aa4                 | 
17aa4                 | ' 
17aa4                 | ' ' ------------------ wypin
17aa4                 | ' 
17aa4                 | ' sub do_wypin
17aa4                 | _do_wypin
17aa4     01 4A 05 F6 | 	mov	COUNT_, #1
17aa8     A8 00 A0 FD | 	call	#pushregs_
17aac     18 F0 07 F1 | 	add	ptra, #24
17ab0     24 3D BF FD | 	call	#_pop
17ab4     FD 14 02 F6 | 	mov	arg02, result1
17ab8     FE 12 02 F6 | 	mov	arg01, result2
17abc     FF 1E 02 F6 | 	mov	local01, result3
17ac0     A7 14 62 FC | 	wrlong	arg02, fp
17ac4     04 4E 05 F1 | 	add	fp, #4
17ac8     A7 12 62 FC | 	wrlong	arg01, fp
17acc     04 4E 05 F1 | 	add	fp, #4
17ad0     A7 1E 62 FC | 	wrlong	local01, fp
17ad4     08 4E 85 F1 | 	sub	fp, #8
17ad8     FC 3C BF FD | 	call	#_pop
17adc     FF 1E 02 F6 | 	mov	local01, result3
17ae0     0C 4E 05 F1 | 	add	fp, #12
17ae4     A7 FA 61 FC | 	wrlong	result1, fp
17ae8     04 4E 05 F1 | 	add	fp, #4
17aec     A7 FC 61 FC | 	wrlong	result2, fp
17af0     04 4E 05 F1 | 	add	fp, #4
17af4     A7 1E 62 FC | 	wrlong	local01, fp
17af8     08 4E 85 F1 | 	sub	fp, #8
17afc     A7 12 02 F6 | 	mov	arg01, fp
17b00     0C 4E 85 F1 | 	sub	fp, #12
17b04     B4 3E BF FD | 	call	#_converttoint
17b08     FD 1E 02 F6 | 	mov	local01, result1
17b0c     A7 12 02 F6 | 	mov	arg01, fp
17b10     A8 3E BF FD | 	call	#_converttoint
17b14     0F FB 21 FC | 	wypin	result1, local01
17b18     A7 F0 03 F6 | 	mov	ptra, fp
17b1c     B2 00 A0 FD | 	call	#popregs_
17b20                 | _do_wypin_ret
17b20     2D 00 64 FD | 	ret
17b24                 | 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' 
17b24                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17b24                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
17b24                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17b24                 | ' 
17b24                 | ' 
17b24                 | ' '------------------ Assign
17b24                 | ' 
17b24                 | ' sub do_assign
17b24                 | _do_assign
17b24     05 4A 05 F6 | 	mov	COUNT_, #5
17b28     A8 00 A0 FD | 	call	#pushregs_
17b2c     44 F0 07 F1 | 	add	ptra, #68
17b30     4A 00 00 FF 
17b34     80 E4 05 F1 | 	add	objptr, ##38016
17b38     F2 16 02 FB | 	rdlong	arg03, objptr
17b3c     0B 15 02 F6 | 	mov	arg02, arg03
17b40     01 14 66 F0 | 	shl	arg02, #1
17b44     0B 15 02 F1 | 	add	arg02, arg03
17b48     02 14 66 F0 | 	shl	arg02, #2
17b4c     03 00 00 FF 
17b50     04 E4 85 F1 | 	sub	objptr, ##1540
17b54     F2 14 02 F1 | 	add	arg02, objptr
17b58     0A 15 02 FB | 	rdlong	arg02, arg02
17b5c     18 4E 05 F1 | 	add	fp, #24
17b60     A7 14 62 FC | 	wrlong	arg02, fp
17b64                 | ' 
17b64                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
17b64                 | ' if variables(varnum).vartype<array_no_type then 
17b64     18 4E 85 F1 | 	sub	fp, #24
17b68     04 14 66 F0 | 	shl	arg02, #4
17b6c     32 00 00 FF 
17b70     84 E4 85 F1 | 	sub	objptr, ##25732
17b74     F2 14 02 F1 | 	add	arg02, objptr
17b78     0C 14 06 F1 | 	add	arg02, #12
17b7c     0A 17 02 FB | 	rdlong	arg03, arg02
17b80     00 17 16 F2 | 	cmp	arg03, #256 wc
17b84     14 00 00 FF 
17b88     F8 E5 85 F1 | 	sub	objptr, ##10744
17b8c     18 01 90 3D |  if_ae	jmp	#LR__1980
17b90     44 3C BF FD | 	call	#_pop
17b94     A7 FA 61 FC | 	wrlong	result1, fp
17b98     04 4E 05 F1 | 	add	fp, #4
17b9c     A7 FC 61 FC | 	wrlong	result2, fp
17ba0     04 4E 05 F1 | 	add	fp, #4
17ba4     A7 FE 61 FC | 	wrlong	result3, fp
17ba8     08 4E 85 F1 | 	sub	fp, #8
17bac     A7 16 02 FB | 	rdlong	arg03, fp
17bb0     04 4E 05 F1 | 	add	fp, #4
17bb4     A7 14 02 FB | 	rdlong	arg02, fp
17bb8     14 4E 05 F1 | 	add	fp, #20
17bbc     A7 12 02 FB | 	rdlong	arg01, fp
17bc0     04 12 66 F0 | 	shl	arg01, #4
17bc4     14 00 00 FF 
17bc8     F8 E5 05 F1 | 	add	objptr, ##10744
17bcc     F2 12 02 F1 | 	add	arg01, objptr
17bd0     04 12 06 F1 | 	add	arg01, #4
17bd4     09 17 62 FC | 	wrlong	arg03, arg01
17bd8     A7 16 02 FB | 	rdlong	arg03, fp
17bdc     04 16 66 F0 | 	shl	arg03, #4
17be0     F2 16 02 F1 | 	add	arg03, objptr
17be4     08 16 06 F1 | 	add	arg03, #8
17be8     0B 15 62 FC | 	wrlong	arg02, arg03
17bec     A7 16 02 FB | 	rdlong	arg03, fp
17bf0     04 16 66 F0 | 	shl	arg03, #4
17bf4     F2 16 02 F1 | 	add	arg03, objptr
17bf8     10 4E 85 F1 | 	sub	fp, #16
17bfc     A7 14 02 FB | 	rdlong	arg02, fp
17c00     0C 16 06 F1 | 	add	arg03, #12
17c04     0B 15 62 FC | 	wrlong	arg02, arg03
17c08                 | '   t1=pop() 
17c08                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
17c08                 | '   if variables(varnum).vartype<>result_string2 then return
17c08     10 4E 05 F1 | 	add	fp, #16
17c0c     A7 16 02 FB | 	rdlong	arg03, fp
17c10     18 4E 85 F1 | 	sub	fp, #24
17c14     04 16 66 F0 | 	shl	arg03, #4
17c18     F2 16 02 F1 | 	add	arg03, objptr
17c1c     0C 16 06 F1 | 	add	arg03, #12
17c20     0B 17 02 FB | 	rdlong	arg03, arg03
17c24     2B 16 0E F2 | 	cmp	arg03, #43 wz
17c28     14 00 00 FF 
17c2c     F8 E5 85 F1 | 	sub	objptr, ##10744
17c30     EC 04 90 5D |  if_ne	jmp	#LR__2003
17c34     18 4E 05 F1 | 	add	fp, #24
17c38     A7 16 02 FB | 	rdlong	arg03, fp
17c3c     0B 1F 02 F6 | 	mov	local01, arg03
17c40     04 1E 66 F0 | 	shl	local01, #4
17c44     14 00 00 FF 
17c48     F8 E5 05 F1 | 	add	objptr, ##10744
17c4c     F2 1E 02 F1 | 	add	local01, objptr
17c50     18 4E 85 F1 | 	sub	fp, #24
17c54     04 16 66 F0 | 	shl	arg03, #4
17c58     F2 16 02 F1 | 	add	arg03, objptr
17c5c     04 16 06 F1 | 	add	arg03, #4
17c60     0B 13 02 FB | 	rdlong	arg01, arg03
17c64     14 00 00 FF 
17c68     F8 E5 85 F1 | 	sub	objptr, ##10744
17c6c     E0 3C BF FD | 	call	#_convertstring
17c70     04 1E 06 F1 | 	add	local01, #4
17c74     0F FB 61 FC | 	wrlong	result1, local01
17c78     18 4E 05 F1 | 	add	fp, #24
17c7c     A7 1E 02 FB | 	rdlong	local01, fp
17c80     18 4E 85 F1 | 	sub	fp, #24
17c84     04 1E 66 F0 | 	shl	local01, #4
17c88     14 00 00 FF 
17c8c     F8 E5 05 F1 | 	add	objptr, ##10744
17c90     F2 1E 02 F1 | 	add	local01, objptr
17c94     0C 1E 06 F1 | 	add	local01, #12
17c98     0F 3F 68 FC | 	wrlong	#31, local01
17c9c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
17c9c                 | '   variables(varnum).vartype=result_string
17c9c                 | '   return
17c9c     14 00 00 FF 
17ca0     F8 E5 85 F1 | 	sub	objptr, ##10744
17ca4     78 04 90 FD | 	jmp	#LR__2003
17ca8                 | LR__1980
17ca8                 | ' for i=0 to 2 : arrid(i)=0 : next i
17ca8     1C 4E 05 F1 | 	add	fp, #28
17cac     A7 00 68 FC | 	wrlong	#0, fp
17cb0     97 16 48 FB | 	callpa	#(@LR__1982-@LR__1981)>>2,fcache_load_ptr_
17cb4                 | LR__1981
17cb4     A7 1E 02 FB | 	rdlong	local01, fp
17cb8     02 1E 66 F0 | 	shl	local01, #2
17cbc     18 4E 05 F1 | 	add	fp, #24
17cc0     A7 1E 02 F1 | 	add	local01, fp
17cc4     0F 01 68 FC | 	wrlong	#0, local01
17cc8     18 4E 85 F1 | 	sub	fp, #24
17ccc     A7 1E 02 FB | 	rdlong	local01, fp
17cd0     01 1E 06 F1 | 	add	local01, #1
17cd4     A7 1E 62 FC | 	wrlong	local01, fp
17cd8     03 1E 16 F2 | 	cmp	local01, #3 wc
17cdc     D4 FF 9F CD |  if_b	jmp	#LR__1981
17ce0                 | LR__1982
17ce0     4A 00 00 FF 
17ce4     80 E4 05 F1 | 	add	objptr, ##38016
17ce8     F2 16 02 FB | 	rdlong	arg03, objptr
17cec     0B 1F 02 F6 | 	mov	local01, arg03
17cf0     01 1E 66 F0 | 	shl	local01, #1
17cf4     0B 1F 02 F1 | 	add	local01, arg03
17cf8     02 1E 66 F0 | 	shl	local01, #2
17cfc     03 00 00 FF 
17d00     04 E4 85 F1 | 	sub	objptr, ##1540
17d04     F2 1E 02 F1 | 	add	local01, objptr
17d08     04 1E 06 F1 | 	add	local01, #4
17d0c     0F 21 02 FB | 	rdlong	local02, local01
17d10     04 4E 05 F1 | 	add	fp, #4
17d14     A7 20 62 FC | 	wrlong	local02, fp
17d18     20 4E 85 F1 | 	sub	fp, #32
17d1c     47 00 00 FF 
17d20     7C E4 85 F1 | 	sub	objptr, ##36476
17d24     B0 3A BF FD | 	call	#_pop
17d28     A7 FA 61 FC | 	wrlong	result1, fp
17d2c     04 4E 05 F1 | 	add	fp, #4
17d30     A7 FC 61 FC | 	wrlong	result2, fp
17d34     04 4E 05 F1 | 	add	fp, #4
17d38     A7 FE 61 FC | 	wrlong	result3, fp
17d3c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
17d3c                 | ' t1=pop() ' var value
17d3c                 | ' if numpar>0 then
17d3c     18 4E 05 F1 | 	add	fp, #24
17d40     A7 22 02 FB | 	rdlong	local03, fp
17d44     20 4E 85 F1 | 	sub	fp, #32
17d48     01 22 16 F2 | 	cmp	local03, #1 wc
17d4c     78 00 90 CD |  if_b	jmp	#LR__1985
17d50                 | '   for i=numpar to 1 step -1
17d50     20 4E 05 F1 | 	add	fp, #32
17d54     A7 24 0A FB | 	rdlong	local04, fp wz
17d58     04 4E 85 F1 | 	sub	fp, #4
17d5c     A7 24 62 FC | 	wrlong	local04, fp
17d60     1C 4E 85 F1 | 	sub	fp, #28
17d64     60 00 90 AD |  if_e	jmp	#LR__1984
17d68                 | LR__1983
17d68     6C 3A BF FD | 	call	#_pop
17d6c     0C 4E 05 F1 | 	add	fp, #12
17d70     A7 FA 61 FC | 	wrlong	result1, fp
17d74     04 4E 05 F1 | 	add	fp, #4
17d78     A7 FC 61 FC | 	wrlong	result2, fp
17d7c     04 4E 05 F1 | 	add	fp, #4
17d80     A7 FE 61 FC | 	wrlong	result3, fp
17d84     08 4E 05 F1 | 	add	fp, #8
17d88     A7 22 02 FB | 	rdlong	local03, fp
17d8c     01 22 86 F1 | 	sub	local03, #1
17d90     02 22 66 F0 | 	shl	local03, #2
17d94     18 4E 05 F1 | 	add	fp, #24
17d98     A7 22 02 F1 | 	add	local03, fp
17d9c     28 4E 85 F1 | 	sub	fp, #40
17da0     A7 12 02 F6 | 	mov	arg01, fp
17da4     0C 4E 85 F1 | 	sub	fp, #12
17da8     10 3C BF FD | 	call	#_converttoint
17dac     11 FB 61 FC | 	wrlong	result1, local03
17db0     1C 4E 05 F1 | 	add	fp, #28
17db4     A7 24 02 FB | 	rdlong	local04, fp
17db8     01 24 8E F1 | 	sub	local04, #1 wz
17dbc     A7 24 62 FC | 	wrlong	local04, fp
17dc0     1C 4E 85 F1 | 	sub	fp, #28
17dc4     A0 FF 9F 5D |  if_ne	jmp	#LR__1983
17dc8                 | LR__1984
17dc8                 | LR__1985
17dc8     18 4E 05 F1 | 	add	fp, #24
17dcc     A7 1E 02 FB | 	rdlong	local01, fp
17dd0     04 1E 66 F0 | 	shl	local01, #4
17dd4     14 00 00 FF 
17dd8     F8 E5 05 F1 | 	add	objptr, ##10744
17ddc     F2 1E 02 F1 | 	add	local01, objptr
17de0     04 1E 06 F1 | 	add	local01, #4
17de4     0F 13 02 FB | 	rdlong	arg01, local01
17de8     0C 4E 05 F1 | 	add	fp, #12
17dec     A7 12 62 FC | 	wrlong	arg01, fp
17df0     24 4E 85 F1 | 	sub	fp, #36
17df4     14 00 00 FF 
17df8     F8 E5 85 F1 | 	sub	objptr, ##10744
17dfc     80 64 B0 FD | 	call	#_pslpeek
17e00     FD 24 32 F9 | 	getword	local04, result1, #0
17e04     28 4E 05 F1 | 	add	fp, #40
17e08     A7 24 62 FC | 	wrlong	local04, fp
17e0c     04 4E 85 F1 | 	sub	fp, #4
17e10     A7 12 02 FB | 	rdlong	arg01, fp
17e14     24 4E 85 F1 | 	sub	fp, #36
17e18     02 12 06 F1 | 	add	arg01, #2
17e1c     08 64 B0 FD | 	call	#_pspeek
17e20     FD FA E1 F8 | 	getbyte	result1, result1, #0
17e24     2C 4E 05 F1 | 	add	fp, #44
17e28     A7 FA 61 FC | 	wrlong	result1, fp
17e2c                 | ' esize=pspeek(arrptr+2)
17e2c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
17e2c     08 4E 85 F1 | 	sub	fp, #8
17e30     A7 12 02 FB | 	rdlong	arg01, fp
17e34     24 4E 85 F1 | 	sub	fp, #36
17e38     04 12 06 F1 | 	add	arg01, #4
17e3c     40 64 B0 FD | 	call	#_pslpeek
17e40     FD 24 02 F6 | 	mov	local04, result1
17e44     34 4E 05 F1 | 	add	fp, #52
17e48     A7 1E 02 FB | 	rdlong	local01, fp
17e4c     34 4E 85 F1 | 	sub	fp, #52
17e50     12 1F 12 F2 | 	cmp	local01, local04 wc
17e54     54 00 90 3D |  if_ae	jmp	#LR__1986
17e58     24 4E 05 F1 | 	add	fp, #36
17e5c     A7 12 02 FB | 	rdlong	arg01, fp
17e60     24 4E 85 F1 | 	sub	fp, #36
17e64     08 12 06 F1 | 	add	arg01, #8
17e68     14 64 B0 FD | 	call	#_pslpeek
17e6c     FD 1E 02 F6 | 	mov	local01, result1
17e70     38 4E 05 F1 | 	add	fp, #56
17e74     A7 24 02 FB | 	rdlong	local04, fp
17e78     38 4E 85 F1 | 	sub	fp, #56
17e7c     0F 25 12 F2 | 	cmp	local04, local01 wc
17e80     28 00 90 3D |  if_ae	jmp	#LR__1986
17e84     24 4E 05 F1 | 	add	fp, #36
17e88     A7 12 02 FB | 	rdlong	arg01, fp
17e8c     24 4E 85 F1 | 	sub	fp, #36
17e90     0C 12 06 F1 | 	add	arg01, #12
17e94     E8 63 B0 FD | 	call	#_pslpeek
17e98     3C 4E 05 F1 | 	add	fp, #60
17e9c     A7 24 02 FB | 	rdlong	local04, fp
17ea0     3C 4E 85 F1 | 	sub	fp, #60
17ea4     FD 24 12 F2 | 	cmp	local04, result1 wc
17ea8     10 00 90 CD |  if_b	jmp	#LR__1987
17eac                 | LR__1986
17eac     31 12 06 F6 | 	mov	arg01, #49
17eb0     00 14 06 F6 | 	mov	arg02, #0
17eb4     0C 61 B0 FD | 	call	#_printerror
17eb8     64 02 90 FD | 	jmp	#LR__2003
17ebc                 | LR__1987
17ebc     24 4E 05 F1 | 	add	fp, #36
17ec0     A7 12 02 FB | 	rdlong	arg01, fp
17ec4     09 25 02 F6 | 	mov	local04, arg01
17ec8     10 24 06 F1 | 	add	local04, #16
17ecc     24 4E 85 F1 | 	sub	fp, #36
17ed0     04 12 06 F1 | 	add	arg01, #4
17ed4     A8 63 B0 FD | 	call	#_pslpeek
17ed8     FD 1E 02 F6 | 	mov	local01, result1
17edc     38 4E 05 F1 | 	add	fp, #56
17ee0     A7 20 02 FB | 	rdlong	local02, fp
17ee4     10 1F 02 FD | 	qmul	local01, local02
17ee8     04 4E 85 F1 | 	sub	fp, #4
17eec     A7 22 02 FB | 	rdlong	local03, fp
17ef0     10 4E 85 F1 | 	sub	fp, #16
17ef4     A7 12 02 FB | 	rdlong	arg01, fp
17ef8     24 4E 85 F1 | 	sub	fp, #36
17efc     08 12 06 F1 | 	add	arg01, #8
17f00     18 20 62 FD | 	getqx	local02
17f04     10 23 02 F1 | 	add	local03, local02
17f08     74 63 B0 FD | 	call	#_pslpeek
17f0c     FD 20 02 F6 | 	mov	local02, result1
17f10     24 4E 05 F1 | 	add	fp, #36
17f14     A7 12 02 FB | 	rdlong	arg01, fp
17f18     24 4E 85 F1 | 	sub	fp, #36
17f1c     04 12 06 F1 | 	add	arg01, #4
17f20     5C 63 B0 FD | 	call	#_pslpeek
17f24     FD 20 02 FD | 	qmul	local02, result1
17f28     3C 4E 05 F1 | 	add	fp, #60
17f2c     A7 20 02 FB | 	rdlong	local02, fp
17f30     18 1E 62 FD | 	getqx	local01
17f34     10 1F 02 FD | 	qmul	local01, local02
17f38     10 4E 85 F1 | 	sub	fp, #16
17f3c     A7 20 02 FB | 	rdlong	local02, fp
17f40     18 1E 62 FD | 	getqx	local01
17f44     0F 23 02 F1 | 	add	local03, local01
17f48     11 21 02 FD | 	qmul	local02, local03
17f4c     04 4E 05 F1 | 	add	fp, #4
17f50                 | ' 
17f50                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
17f50                 | ' select case arrtype
17f50     18 22 62 FD | 	getqx	local03
17f54     11 25 02 F1 | 	add	local04, local03
17f58     A7 24 62 FC | 	wrlong	local04, fp
17f5c     08 4E 85 F1 | 	sub	fp, #8
17f60     A7 26 02 FB | 	rdlong	local05, fp
17f64     28 4E 85 F1 | 	sub	fp, #40
17f68     00 27 86 F1 | 	sub	local05, #256
17f6c     0C 26 26 F3 | 	fle	local05, #12
17f70     30 26 62 FD | 	jmprel	local05
17f74                 | LR__1988
17f74     30 00 90 FD | 	jmp	#LR__1989
17f78     58 00 90 FD | 	jmp	#LR__1990
17f7c     6C 00 90 FD | 	jmp	#LR__1991
17f80     80 00 90 FD | 	jmp	#LR__1992
17f84     B0 00 90 FD | 	jmp	#LR__1993
17f88     E0 00 90 FD | 	jmp	#LR__1994
17f8c     F4 00 90 FD | 	jmp	#LR__1995
17f90     08 01 90 FD | 	jmp	#LR__1996
17f94     1C 01 90 FD | 	jmp	#LR__1997
17f98     30 01 90 FD | 	jmp	#LR__1998
17f9c     44 01 90 FD | 	jmp	#LR__1999
17fa0     58 01 90 FD | 	jmp	#LR__2000
17fa4     6C 01 90 FD | 	jmp	#LR__2001
17fa8                 | LR__1989
17fa8     A7 12 02 F6 | 	mov	arg01, fp
17fac     30 4E 05 F1 | 	add	fp, #48
17fb0     A7 14 02 FB | 	rdlong	arg02, fp
17fb4     30 4E 85 F1 | 	sub	fp, #48
17fb8     0C 16 06 F6 | 	mov	arg03, #12
17fbc     0B 00 00 FF 
17fc0     CC E4 05 F1 | 	add	objptr, ##5836
17fc4     18 8A B0 FD | 	call	#_psram_spin2_write
17fc8     0B 00 00 FF 
17fcc     CC E4 85 F1 | 	sub	objptr, ##5836
17fd0     4C 01 90 FD | 	jmp	#LR__2002
17fd4                 | LR__1990
17fd4     30 4E 05 F1 | 	add	fp, #48
17fd8     A7 12 02 FB | 	rdlong	arg01, fp
17fdc     30 4E 85 F1 | 	sub	fp, #48
17fe0     A7 14 02 FB | 	rdlong	arg02, fp
17fe4     F8 61 B0 FD | 	call	#_pspoke
17fe8     34 01 90 FD | 	jmp	#LR__2002
17fec                 | LR__1991
17fec     30 4E 05 F1 | 	add	fp, #48
17ff0     A7 12 02 FB | 	rdlong	arg01, fp
17ff4     30 4E 85 F1 | 	sub	fp, #48
17ff8     A7 14 02 FB | 	rdlong	arg02, fp
17ffc     E0 61 B0 FD | 	call	#_pspoke
18000     1C 01 90 FD | 	jmp	#LR__2002
18004                 | LR__1992
18004     30 4E 05 F1 | 	add	fp, #48
18008     A7 12 02 FB | 	rdlong	arg01, fp
1800c     30 4E 85 F1 | 	sub	fp, #48
18010     A7 14 02 FB | 	rdlong	arg02, fp
18014     C8 61 B0 FD | 	call	#_pspoke
18018     30 4E 05 F1 | 	add	fp, #48
1801c     A7 12 02 FB | 	rdlong	arg01, fp
18020     30 4E 85 F1 | 	sub	fp, #48
18024     01 12 06 F1 | 	add	arg01, #1
18028     A7 14 02 FB | 	rdlong	arg02, fp
1802c     08 14 46 F0 | 	shr	arg02, #8
18030     AC 61 B0 FD | 	call	#_pspoke
18034     E8 00 90 FD | 	jmp	#LR__2002
18038                 | LR__1993
18038     30 4E 05 F1 | 	add	fp, #48
1803c     A7 12 02 FB | 	rdlong	arg01, fp
18040     30 4E 85 F1 | 	sub	fp, #48
18044     A7 14 02 FB | 	rdlong	arg02, fp
18048     94 61 B0 FD | 	call	#_pspoke
1804c     30 4E 05 F1 | 	add	fp, #48
18050     A7 12 02 FB | 	rdlong	arg01, fp
18054     30 4E 85 F1 | 	sub	fp, #48
18058     01 12 06 F1 | 	add	arg01, #1
1805c     A7 14 02 FB | 	rdlong	arg02, fp
18060     08 14 46 F0 | 	shr	arg02, #8
18064     78 61 B0 FD | 	call	#_pspoke
18068     B4 00 90 FD | 	jmp	#LR__2002
1806c                 | LR__1994
1806c     30 4E 05 F1 | 	add	fp, #48
18070     A7 12 02 FB | 	rdlong	arg01, fp
18074     30 4E 85 F1 | 	sub	fp, #48
18078     A7 14 02 FB | 	rdlong	arg02, fp
1807c     D0 60 B0 FD | 	call	#_pslpoke
18080     9C 00 90 FD | 	jmp	#LR__2002
18084                 | LR__1995
18084     30 4E 05 F1 | 	add	fp, #48
18088     A7 12 02 FB | 	rdlong	arg01, fp
1808c     30 4E 85 F1 | 	sub	fp, #48
18090     A7 14 02 FB | 	rdlong	arg02, fp
18094     B8 60 B0 FD | 	call	#_pslpoke
18098     84 00 90 FD | 	jmp	#LR__2002
1809c                 | LR__1996
1809c     30 4E 05 F1 | 	add	fp, #48
180a0     A7 12 02 FB | 	rdlong	arg01, fp
180a4     30 4E 85 F1 | 	sub	fp, #48
180a8     A7 14 02 FB | 	rdlong	arg02, fp
180ac     A0 60 B0 FD | 	call	#_pslpoke
180b0     6C 00 90 FD | 	jmp	#LR__2002
180b4                 | LR__1997
180b4     30 4E 05 F1 | 	add	fp, #48
180b8     A7 12 02 FB | 	rdlong	arg01, fp
180bc     30 4E 85 F1 | 	sub	fp, #48
180c0     A7 14 02 FB | 	rdlong	arg02, fp
180c4     88 60 B0 FD | 	call	#_pslpoke
180c8     54 00 90 FD | 	jmp	#LR__2002
180cc                 | LR__1998
180cc     30 4E 05 F1 | 	add	fp, #48
180d0     A7 12 02 FB | 	rdlong	arg01, fp
180d4     30 4E 85 F1 | 	sub	fp, #48
180d8     A7 14 02 FB | 	rdlong	arg02, fp
180dc     70 60 B0 FD | 	call	#_pslpoke
180e0     3C 00 90 FD | 	jmp	#LR__2002
180e4                 | LR__1999
180e4     30 4E 05 F1 | 	add	fp, #48
180e8     A7 12 02 FB | 	rdlong	arg01, fp
180ec     30 4E 85 F1 | 	sub	fp, #48
180f0     A7 14 02 FB | 	rdlong	arg02, fp
180f4     58 60 B0 FD | 	call	#_pslpoke
180f8     24 00 90 FD | 	jmp	#LR__2002
180fc                 | LR__2000
180fc     30 4E 05 F1 | 	add	fp, #48
18100     A7 12 02 FB | 	rdlong	arg01, fp
18104     30 4E 85 F1 | 	sub	fp, #48
18108     A7 14 02 FB | 	rdlong	arg02, fp
1810c     40 60 B0 FD | 	call	#_pslpoke
18110     0C 00 90 FD | 	jmp	#LR__2002
18114                 | LR__2001
18114     32 12 06 F6 | 	mov	arg01, #50
18118     00 14 06 F6 | 	mov	arg02, #0
1811c     A4 5E B0 FD | 	call	#_printerror
18120                 | LR__2002
18120                 | LR__2003
18120     A7 F0 03 F6 | 	mov	ptra, fp
18124     B2 00 A0 FD | 	call	#popregs_
18128                 | _do_assign_ret
18128     2D 00 64 FD | 	ret
1812c                 | 
1812c                 | ' 
1812c                 | ' 
1812c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1812c                 | ' 
1812c                 | ' sub do_getvar
1812c                 | _do_getvar
1812c     04 4A 05 F6 | 	mov	COUNT_, #4
18130     A8 00 A0 FD | 	call	#pushregs_
18134     3C F0 07 F1 | 	add	ptra, #60
18138                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18138     4A 00 00 FF 
1813c     80 E4 05 F1 | 	add	objptr, ##38016
18140     F2 1E 02 FB | 	rdlong	local01, objptr
18144     0F 17 02 F6 | 	mov	arg03, local01
18148     01 16 66 F0 | 	shl	arg03, #1
1814c     0F 17 02 F1 | 	add	arg03, local01
18150     02 16 66 F0 | 	shl	arg03, #2
18154     03 00 00 FF 
18158     04 E4 85 F1 | 	sub	objptr, ##1540
1815c     F2 16 02 F1 | 	add	arg03, objptr
18160     04 16 06 F1 | 	add	arg03, #4
18164     0B 17 0A FB | 	rdlong	arg03, arg03 wz
18168     47 00 00 FF 
1816c     7C E4 85 F1 | 	sub	objptr, ##36476
18170     C4 00 90 5D |  if_ne	jmp	#LR__2011
18174     4A 00 00 FF 
18178     80 E4 05 F1 | 	add	objptr, ##38016
1817c     F2 1E 02 FB | 	rdlong	local01, objptr
18180     0F 13 02 F6 | 	mov	arg01, local01
18184     01 12 66 F0 | 	shl	arg01, #1
18188     0F 13 02 F1 | 	add	arg01, local01
1818c     02 12 66 F0 | 	shl	arg01, #2
18190     03 00 00 FF 
18194     04 E4 85 F1 | 	sub	objptr, ##1540
18198     F2 12 02 F1 | 	add	arg01, objptr
1819c     09 1F 02 FB | 	rdlong	local01, arg01
181a0     04 1E 66 F0 | 	shl	local01, #4
181a4     32 00 00 FF 
181a8     84 E4 85 F1 | 	sub	objptr, ##25732
181ac     F2 1E 02 F1 | 	add	local01, objptr
181b0     04 1E 06 F1 | 	add	local01, #4
181b4     0F 13 02 FB | 	rdlong	arg01, local01
181b8     04 1E 06 F1 | 	add	local01, #4
181bc     0F 1F 02 FB | 	rdlong	local01, local01
181c0     A7 12 62 FC | 	wrlong	arg01, fp
181c4     04 4E 05 F1 | 	add	fp, #4
181c8     A7 1E 62 FC | 	wrlong	local01, fp
181cc     35 00 00 FF 
181d0     88 E4 05 F1 | 	add	objptr, ##27272
181d4     F2 1E 02 FB | 	rdlong	local01, objptr
181d8     0F 13 02 F6 | 	mov	arg01, local01
181dc     01 12 66 F0 | 	shl	arg01, #1
181e0     0F 13 02 F1 | 	add	arg01, local01
181e4     02 12 66 F0 | 	shl	arg01, #2
181e8     03 00 00 FF 
181ec     04 E4 85 F1 | 	sub	objptr, ##1540
181f0     F2 12 02 F1 | 	add	arg01, objptr
181f4     09 1F 02 FB | 	rdlong	local01, arg01
181f8     04 1E 66 F0 | 	shl	local01, #4
181fc     32 00 00 FF 
18200     84 E4 85 F1 | 	sub	objptr, ##25732
18204     F2 1E 02 F1 | 	add	local01, objptr
18208     0C 1E 06 F1 | 	add	local01, #12
1820c     0F 1F 02 FB | 	rdlong	local01, local01
18210     04 4E 05 F1 | 	add	fp, #4
18214     A7 1E 62 FC | 	wrlong	local01, fp
18218                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
18218                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18218                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
18218     08 4E 85 F1 | 	sub	fp, #8
1821c     00 1F 16 F2 | 	cmp	local01, #256 wc
18220     14 00 00 FF 
18224     F8 E5 85 F1 | 	sub	objptr, ##10744
18228     0C 00 90 3D |  if_ae	jmp	#LR__2010
1822c     A7 12 02 F6 | 	mov	arg01, fp
18230     3C 36 BF FD | 	call	#_push
18234     A0 04 90 FD | 	jmp	#LR__2032
18238                 | LR__2010
18238                 | LR__2011
18238     4A 00 00 FF 
1823c     80 E4 05 F1 | 	add	objptr, ##38016
18240     F2 16 02 FB | 	rdlong	arg03, objptr
18244     0B 15 02 F6 | 	mov	arg02, arg03
18248     01 14 66 F0 | 	shl	arg02, #1
1824c     0B 15 02 F1 | 	add	arg02, arg03
18250     02 14 66 F0 | 	shl	arg02, #2
18254     03 00 00 FF 
18258     04 E4 85 F1 | 	sub	objptr, ##1540
1825c     F2 14 02 F1 | 	add	arg02, objptr
18260     0A 17 02 FB | 	rdlong	arg03, arg02
18264     04 16 66 F0 | 	shl	arg03, #4
18268     32 00 00 FF 
1826c     84 E4 85 F1 | 	sub	objptr, ##25732
18270     F2 16 02 F1 | 	add	arg03, objptr
18274     04 16 06 F1 | 	add	arg03, #4
18278     0B 13 02 FB | 	rdlong	arg01, arg03
1827c     0C 4E 05 F1 | 	add	fp, #12
18280     A7 12 62 FC | 	wrlong	arg01, fp
18284     0C 4E 85 F1 | 	sub	fp, #12
18288     14 00 00 FF 
1828c     F8 E5 85 F1 | 	sub	objptr, ##10744
18290     EC 5F B0 FD | 	call	#_pslpeek
18294     FD FA 31 F9 | 	getword	result1, result1, #0
18298     10 4E 05 F1 | 	add	fp, #16
1829c     A7 FA 61 FC | 	wrlong	result1, fp
182a0     4A 00 00 FF 
182a4     80 E4 05 F1 | 	add	objptr, ##38016
182a8     F2 16 02 FB | 	rdlong	arg03, objptr
182ac     0B 15 02 F6 | 	mov	arg02, arg03
182b0     01 14 66 F0 | 	shl	arg02, #1
182b4     0B 15 02 F1 | 	add	arg02, arg03
182b8     02 14 66 F0 | 	shl	arg02, #2
182bc     03 00 00 FF 
182c0     04 E4 85 F1 | 	sub	objptr, ##1540
182c4     F2 14 02 F1 | 	add	arg02, objptr
182c8     04 14 06 F1 | 	add	arg02, #4
182cc     0A 17 02 FB | 	rdlong	arg03, arg02
182d0     04 4E 05 F1 | 	add	fp, #4
182d4     A7 16 62 FC | 	wrlong	arg03, fp
182d8     08 4E 85 F1 | 	sub	fp, #8
182dc     A7 12 02 FB | 	rdlong	arg01, fp
182e0     0C 4E 85 F1 | 	sub	fp, #12
182e4     02 12 06 F1 | 	add	arg01, #2
182e8     47 00 00 FF 
182ec     7C E4 85 F1 | 	sub	objptr, ##36476
182f0     34 5F B0 FD | 	call	#_pspeek
182f4     FD FA E1 F8 | 	getbyte	result1, result1, #0
182f8     18 4E 05 F1 | 	add	fp, #24
182fc     A7 FA 61 FC | 	wrlong	result1, fp
18300     0C 4E 85 F1 | 	sub	fp, #12
18304     A7 12 02 FB | 	rdlong	arg01, fp
18308     0C 4E 85 F1 | 	sub	fp, #12
1830c     04 12 06 F1 | 	add	arg01, #4
18310     6C 5F B0 FD | 	call	#_pslpeek
18314     1C 4E 05 F1 | 	add	fp, #28
18318     A7 FA 61 FC | 	wrlong	result1, fp
1831c     10 4E 85 F1 | 	sub	fp, #16
18320     A7 12 02 FB | 	rdlong	arg01, fp
18324     0C 4E 85 F1 | 	sub	fp, #12
18328     08 12 06 F1 | 	add	arg01, #8
1832c     50 5F B0 FD | 	call	#_pslpeek
18330     20 4E 05 F1 | 	add	fp, #32
18334     A7 FA 61 FC | 	wrlong	result1, fp
18338     14 4E 85 F1 | 	sub	fp, #20
1833c     A7 12 02 FB | 	rdlong	arg01, fp
18340     0C 4E 85 F1 | 	sub	fp, #12
18344     0C 12 06 F1 | 	add	arg01, #12
18348     34 5F B0 FD | 	call	#_pslpeek
1834c     24 4E 05 F1 | 	add	fp, #36
18350     A7 FA 61 FC | 	wrlong	result1, fp
18354                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18354                 | ' esize=pspeek(arrptr+2)
18354                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18354                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18354                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18354                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18354     10 4E 85 F1 | 	sub	fp, #16
18358     A7 16 02 FB | 	rdlong	arg03, fp
1835c     14 4E 85 F1 | 	sub	fp, #20
18360     03 16 16 F2 | 	cmp	arg03, #3 wc
18364     38 00 90 CD |  if_b	jmp	#LR__2012
18368     6C 34 BF FD | 	call	#_pop
1836c     FF 16 02 F6 | 	mov	arg03, result3
18370     A7 FA 61 FC | 	wrlong	result1, fp
18374     04 4E 05 F1 | 	add	fp, #4
18378     A7 FC 61 FC | 	wrlong	result2, fp
1837c     04 4E 05 F1 | 	add	fp, #4
18380     A7 16 62 FC | 	wrlong	arg03, fp
18384     08 4E 85 F1 | 	sub	fp, #8
18388     A7 12 02 F6 | 	mov	arg01, fp
1838c     2C 36 BF FD | 	call	#_converttoint
18390     30 4E 05 F1 | 	add	fp, #48
18394     A7 FA 61 FC | 	wrlong	result1, fp
18398     30 4E 85 F1 | 	sub	fp, #48
1839c     0C 00 90 FD | 	jmp	#LR__2013
183a0                 | LR__2012
183a0     30 4E 05 F1 | 	add	fp, #48
183a4     A7 00 68 FC | 	wrlong	#0, fp
183a8     30 4E 85 F1 | 	sub	fp, #48
183ac                 | LR__2013
183ac                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
183ac     14 4E 05 F1 | 	add	fp, #20
183b0     A7 16 02 FB | 	rdlong	arg03, fp
183b4     14 4E 85 F1 | 	sub	fp, #20
183b8     02 16 16 F2 | 	cmp	arg03, #2 wc
183bc     38 00 90 CD |  if_b	jmp	#LR__2014
183c0     14 34 BF FD | 	call	#_pop
183c4     FF 16 02 F6 | 	mov	arg03, result3
183c8     A7 FA 61 FC | 	wrlong	result1, fp
183cc     04 4E 05 F1 | 	add	fp, #4
183d0     A7 FC 61 FC | 	wrlong	result2, fp
183d4     04 4E 05 F1 | 	add	fp, #4
183d8     A7 16 62 FC | 	wrlong	arg03, fp
183dc     08 4E 85 F1 | 	sub	fp, #8
183e0     A7 12 02 F6 | 	mov	arg01, fp
183e4     D4 35 BF FD | 	call	#_converttoint
183e8     2C 4E 05 F1 | 	add	fp, #44
183ec     A7 FA 61 FC | 	wrlong	result1, fp
183f0     2C 4E 85 F1 | 	sub	fp, #44
183f4     0C 00 90 FD | 	jmp	#LR__2015
183f8                 | LR__2014
183f8     2C 4E 05 F1 | 	add	fp, #44
183fc     A7 00 68 FC | 	wrlong	#0, fp
18400     2C 4E 85 F1 | 	sub	fp, #44
18404                 | LR__2015
18404                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18404     14 4E 05 F1 | 	add	fp, #20
18408     A7 16 02 FB | 	rdlong	arg03, fp
1840c     14 4E 85 F1 | 	sub	fp, #20
18410     01 16 16 F2 | 	cmp	arg03, #1 wc
18414     38 00 90 CD |  if_b	jmp	#LR__2016
18418     BC 33 BF FD | 	call	#_pop
1841c     FF 16 02 F6 | 	mov	arg03, result3
18420     A7 FA 61 FC | 	wrlong	result1, fp
18424     04 4E 05 F1 | 	add	fp, #4
18428     A7 FC 61 FC | 	wrlong	result2, fp
1842c     04 4E 05 F1 | 	add	fp, #4
18430     A7 16 62 FC | 	wrlong	arg03, fp
18434     08 4E 85 F1 | 	sub	fp, #8
18438     A7 12 02 F6 | 	mov	arg01, fp
1843c     7C 35 BF FD | 	call	#_converttoint
18440     28 4E 05 F1 | 	add	fp, #40
18444     A7 FA 61 FC | 	wrlong	result1, fp
18448     28 4E 85 F1 | 	sub	fp, #40
1844c     0C 00 90 FD | 	jmp	#LR__2017
18450                 | LR__2016
18450     28 4E 05 F1 | 	add	fp, #40
18454     A7 00 68 FC | 	wrlong	#0, fp
18458     28 4E 85 F1 | 	sub	fp, #40
1845c                 | LR__2017
1845c     0C 4E 05 F1 | 	add	fp, #12
18460     A7 20 02 FB | 	rdlong	local02, fp
18464     1C 4E 05 F1 | 	add	fp, #28
18468     A7 22 02 FB | 	rdlong	local03, fp
1846c     04 4E 05 F1 | 	add	fp, #4
18470     A7 FC 01 FB | 	rdlong	result2, fp
18474     10 4E 85 F1 | 	sub	fp, #16
18478     A7 FE 01 FB | 	rdlong	result3, fp
1847c     FF FC 01 FD | 	qmul	result2, result3
18480     10 20 06 F1 | 	add	local02, #16
18484     14 4E 05 F1 | 	add	fp, #20
18488     A7 FC 01 FB | 	rdlong	result2, fp
1848c     18 FA 61 FD | 	getqx	result1
18490     FF FC 01 FD | 	qmul	result2, result3
18494     FD 22 02 F1 | 	add	local03, result1
18498     10 4E 85 F1 | 	sub	fp, #16
1849c     A7 FE 01 FB | 	rdlong	result3, fp
184a0     18 FC 61 FD | 	getqx	result2
184a4     FF FC 01 FD | 	qmul	result2, result3
184a8     08 4E 85 F1 | 	sub	fp, #8
184ac     A7 FE 01 FB | 	rdlong	result3, fp
184b0     18 FC 61 FD | 	getqx	result2
184b4     FE 22 02 F1 | 	add	local03, result2
184b8     FF 22 02 FD | 	qmul	local03, result3
184bc     1C 4E 05 F1 | 	add	fp, #28
184c0                 | ' 
184c0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
184c0                 | ' 
184c0                 | ' select case vartype
184c0     18 FC 61 FD | 	getqx	result2
184c4     FE 20 02 F1 | 	add	local02, result2
184c8     A7 20 62 FC | 	wrlong	local02, fp
184cc     24 4E 85 F1 | 	sub	fp, #36
184d0     A7 24 02 FB | 	rdlong	local04, fp
184d4     10 4E 85 F1 | 	sub	fp, #16
184d8     00 25 86 F1 | 	sub	local04, #256
184dc     0C 24 26 F3 | 	fle	local04, #12
184e0     30 24 62 FD | 	jmprel	local04
184e4                 | LR__2018
184e4     30 00 90 FD | 	jmp	#LR__2019
184e8     58 00 90 FD | 	jmp	#LR__2020
184ec     8C 00 90 FD | 	jmp	#LR__2021
184f0     AC 00 90 FD | 	jmp	#LR__2022
184f4     E8 00 90 FD | 	jmp	#LR__2023
184f8     08 01 90 FD | 	jmp	#LR__2024
184fc     24 01 90 FD | 	jmp	#LR__2025
18500     40 01 90 FD | 	jmp	#LR__2026
18504     50 01 90 FD | 	jmp	#LR__2027
18508     60 01 90 FD | 	jmp	#LR__2028
1850c     7C 01 90 FD | 	jmp	#LR__2029
18510     8C 01 90 FD | 	jmp	#LR__2030
18514     B8 01 90 FD | 	jmp	#LR__2031
18518                 | LR__2019
18518     A7 12 02 F6 | 	mov	arg01, fp
1851c     34 4E 05 F1 | 	add	fp, #52
18520     A7 14 02 FB | 	rdlong	arg02, fp
18524     34 4E 85 F1 | 	sub	fp, #52
18528     0C 16 06 F6 | 	mov	arg03, #12
1852c     0B 00 00 FF 
18530     CC E4 05 F1 | 	add	objptr, ##5836
18534     0C 84 B0 FD | 	call	#_psram_spin2_read1
18538     0B 00 00 FF 
1853c     CC E4 85 F1 | 	sub	objptr, ##5836
18540     8C 01 90 FD | 	jmp	#LR__2031
18544                 | LR__2020
18544     08 4E 05 F1 | 	add	fp, #8
18548     A7 38 68 FC | 	wrlong	#28, fp
1854c     2C 4E 05 F1 | 	add	fp, #44
18550     A7 12 02 FB | 	rdlong	arg01, fp
18554     34 4E 85 F1 | 	sub	fp, #52
18558     CC 5C B0 FD | 	call	#_pspeek
1855c     FD FA E1 F8 | 	getbyte	result1, result1, #0
18560     A7 FA 61 FC | 	wrlong	result1, fp
18564     80 FA 15 F2 | 	cmp	result1, #128 wc
18568     00 1F 66 36 |  if_ae	neg	local01, #256
1856c     A7 22 02 3B |  if_ae	rdlong	local03, fp
18570     11 1F 42 35 |  if_ae	or	local01, local03
18574     A7 1E 62 3C |  if_ae	wrlong	local01, fp
18578     54 01 90 FD | 	jmp	#LR__2031
1857c                 | LR__2021
1857c     08 4E 05 F1 | 	add	fp, #8
18580     A7 3A 68 FC | 	wrlong	#29, fp
18584     2C 4E 05 F1 | 	add	fp, #44
18588     A7 12 02 FB | 	rdlong	arg01, fp
1858c     34 4E 85 F1 | 	sub	fp, #52
18590     94 5C B0 FD | 	call	#_pspeek
18594     FD FA E1 F8 | 	getbyte	result1, result1, #0
18598     A7 FA 61 FC | 	wrlong	result1, fp
1859c     30 01 90 FD | 	jmp	#LR__2031
185a0                 | LR__2022
185a0     08 4E 05 F1 | 	add	fp, #8
185a4     A7 38 68 FC | 	wrlong	#28, fp
185a8     2C 4E 05 F1 | 	add	fp, #44
185ac     A7 12 02 FB | 	rdlong	arg01, fp
185b0     34 4E 85 F1 | 	sub	fp, #52
185b4     C8 5C B0 FD | 	call	#_pslpeek
185b8     FD FA 31 F9 | 	getword	result1, result1, #0
185bc     A7 FA 61 FC | 	wrlong	result1, fp
185c0     40 00 00 FF 
185c4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
185c8     FF 7F 00 3F 
185cc     00 1F 06 36 |  if_ae	mov	local01, ##16776960
185d0     A7 22 02 3B |  if_ae	rdlong	local03, fp
185d4     11 1F 42 35 |  if_ae	or	local01, local03
185d8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
185dc     F0 00 90 FD | 	jmp	#LR__2031
185e0                 | LR__2023
185e0     08 4E 05 F1 | 	add	fp, #8
185e4     A7 3A 68 FC | 	wrlong	#29, fp
185e8     2C 4E 05 F1 | 	add	fp, #44
185ec     A7 12 02 FB | 	rdlong	arg01, fp
185f0     34 4E 85 F1 | 	sub	fp, #52
185f4     88 5C B0 FD | 	call	#_pslpeek
185f8     FD FA 31 F9 | 	getword	result1, result1, #0
185fc     A7 FA 61 FC | 	wrlong	result1, fp
18600     CC 00 90 FD | 	jmp	#LR__2031
18604                 | LR__2024
18604     08 4E 05 F1 | 	add	fp, #8
18608     A7 38 68 FC | 	wrlong	#28, fp
1860c     2C 4E 05 F1 | 	add	fp, #44
18610     A7 12 02 FB | 	rdlong	arg01, fp
18614     34 4E 85 F1 | 	sub	fp, #52
18618     64 5C B0 FD | 	call	#_pslpeek
1861c     A7 FA 61 FC | 	wrlong	result1, fp
18620     AC 00 90 FD | 	jmp	#LR__2031
18624                 | LR__2025
18624     08 4E 05 F1 | 	add	fp, #8
18628     A7 3A 68 FC | 	wrlong	#29, fp
1862c     2C 4E 05 F1 | 	add	fp, #44
18630     A7 12 02 FB | 	rdlong	arg01, fp
18634     34 4E 85 F1 | 	sub	fp, #52
18638     44 5C B0 FD | 	call	#_pslpeek
1863c     A7 FA 61 FC | 	wrlong	result1, fp
18640     8C 00 90 FD | 	jmp	#LR__2031
18644                 | LR__2026
18644     08 4E 05 F1 | 	add	fp, #8
18648     A7 FE 69 FC | 	wrlong	#255, fp
1864c     08 4E 85 F1 | 	sub	fp, #8
18650     A7 60 68 FC | 	wrlong	#48, fp
18654     78 00 90 FD | 	jmp	#LR__2031
18658                 | LR__2027
18658     08 4E 05 F1 | 	add	fp, #8
1865c     A7 FE 69 FC | 	wrlong	#255, fp
18660     08 4E 85 F1 | 	sub	fp, #8
18664     A7 60 68 FC | 	wrlong	#48, fp
18668     64 00 90 FD | 	jmp	#LR__2031
1866c                 | LR__2028
1866c     08 4E 05 F1 | 	add	fp, #8
18670     A7 3C 68 FC | 	wrlong	#30, fp
18674     2C 4E 05 F1 | 	add	fp, #44
18678     A7 12 02 FB | 	rdlong	arg01, fp
1867c     34 4E 85 F1 | 	sub	fp, #52
18680     FC 5B B0 FD | 	call	#_pslpeek
18684     A7 FA 61 FC | 	wrlong	result1, fp
18688     44 00 90 FD | 	jmp	#LR__2031
1868c                 | LR__2029
1868c     08 4E 05 F1 | 	add	fp, #8
18690     A7 FE 69 FC | 	wrlong	#255, fp
18694     08 4E 85 F1 | 	sub	fp, #8
18698     A7 60 68 FC | 	wrlong	#48, fp
1869c     30 00 90 FD | 	jmp	#LR__2031
186a0                 | LR__2030
186a0     08 4E 05 F1 | 	add	fp, #8
186a4     A7 3E 68 FC | 	wrlong	#31, fp
186a8     2C 4E 05 F1 | 	add	fp, #44
186ac     A7 12 02 FB | 	rdlong	arg01, fp
186b0     34 4E 85 F1 | 	sub	fp, #52
186b4     C8 5B B0 FD | 	call	#_pslpeek
186b8     A7 FA 61 FC | 	wrlong	result1, fp
186bc     00 04 00 FF 
186c0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
186c4     08 4E 05 31 |  if_ae	add	fp, #8
186c8     A7 56 68 3C |  if_ae	wrlong	#43, fp
186cc     08 4E 85 31 |  if_ae	sub	fp, #8
186d0                 | LR__2031
186d0     A7 12 02 F6 | 	mov	arg01, fp
186d4     98 31 BF FD | 	call	#_push
186d8                 | LR__2032
186d8     A7 F0 03 F6 | 	mov	ptra, fp
186dc     B2 00 A0 FD | 	call	#popregs_
186e0                 | _do_getvar_ret
186e0     2D 00 64 FD | 	ret
186e4                 | 
186e4                 | ' 
186e4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
186e4                 | ' 
186e4                 | ' sub do_getaddr
186e4                 | _do_getaddr
186e4     01 4A 05 F6 | 	mov	COUNT_, #1
186e8     A8 00 A0 FD | 	call	#pushregs_
186ec     38 F0 07 F1 | 	add	ptra, #56
186f0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
186f0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
186f0     4A 00 00 FF 
186f4     80 E4 05 F1 | 	add	objptr, ##38016
186f8     F2 12 02 FB | 	rdlong	arg01, objptr
186fc     09 FD 01 F6 | 	mov	result2, arg01
18700     01 FC 65 F0 | 	shl	result2, #1
18704     09 FD 01 F1 | 	add	result2, arg01
18708     02 FC 65 F0 | 	shl	result2, #2
1870c     03 00 00 FF 
18710     04 E4 85 F1 | 	sub	objptr, ##1540
18714     F2 FC 01 F1 | 	add	result2, objptr
18718     04 FC 05 F1 | 	add	result2, #4
1871c     FE FC 09 FB | 	rdlong	result2, result2 wz
18720     47 00 00 FF 
18724     7C E4 85 F1 | 	sub	objptr, ##36476
18728     C4 00 90 5D |  if_ne	jmp	#LR__2040
1872c     4A 00 00 FF 
18730     80 E4 05 F1 | 	add	objptr, ##38016
18734     F2 12 02 FB | 	rdlong	arg01, objptr
18738     09 FD 01 F6 | 	mov	result2, arg01
1873c     01 FC 65 F0 | 	shl	result2, #1
18740     09 FD 01 F1 | 	add	result2, arg01
18744     02 FC 65 F0 | 	shl	result2, #2
18748     03 00 00 FF 
1874c     04 E4 85 F1 | 	sub	objptr, ##1540
18750     F2 FC 01 F1 | 	add	result2, objptr
18754     FE 12 02 FB | 	rdlong	arg01, result2
18758     04 12 66 F0 | 	shl	arg01, #4
1875c     32 00 00 FF 
18760     84 E4 85 F1 | 	sub	objptr, ##25732
18764     F2 12 02 F1 | 	add	arg01, objptr
18768     0C 12 06 F1 | 	add	arg01, #12
1876c     09 13 02 FB | 	rdlong	arg01, arg01
18770     08 4E 05 F1 | 	add	fp, #8
18774     A7 12 62 FC | 	wrlong	arg01, fp
18778                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18778                 | '    if t1.result_type>=array_no_type then goto 2200
18778     08 4E 85 F1 | 	sub	fp, #8
1877c     00 13 16 F2 | 	cmp	arg01, #256 wc
18780     14 00 00 FF 
18784     F8 E5 85 F1 | 	sub	objptr, ##10744
18788     64 00 90 3D |  if_ae	jmp	#LR__2041
1878c     4A 00 00 FF 
18790     80 E4 05 F1 | 	add	objptr, ##38016
18794     F2 12 02 FB | 	rdlong	arg01, objptr
18798     09 FB 01 F6 | 	mov	result1, arg01
1879c     01 FA 65 F0 | 	shl	result1, #1
187a0     09 FB 01 F1 | 	add	result1, arg01
187a4     02 FA 65 F0 | 	shl	result1, #2
187a8     03 00 00 FF 
187ac     04 E4 85 F1 | 	sub	objptr, ##1540
187b0     F2 FA 01 F1 | 	add	result1, objptr
187b4     FD FA 01 FB | 	rdlong	result1, result1
187b8     04 FA 65 F0 | 	shl	result1, #4
187bc     32 00 00 FF 
187c0     84 E4 85 F1 | 	sub	objptr, ##25732
187c4     F2 FA 01 F1 | 	add	result1, objptr
187c8     04 FA 05 F1 | 	add	result1, #4
187cc     14 00 00 FF 
187d0     F8 E5 85 F1 | 	sub	objptr, ##10744
187d4     A7 FA 61 FC | 	wrlong	result1, fp
187d8     08 4E 05 F1 | 	add	fp, #8
187dc     A7 3A 68 FC | 	wrlong	#29, fp
187e0     08 4E 85 F1 | 	sub	fp, #8
187e4     A7 12 02 F6 | 	mov	arg01, fp
187e8     84 30 BF FD | 	call	#_push
187ec                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
187ec                 | '   t1.result_type=result_uint
187ec                 | '   push t1 : return
187ec     D8 02 90 FD | 	jmp	#LR__2050
187f0                 | LR__2040
187f0                 | LR__2041
187f0     4A 00 00 FF 
187f4     80 E4 05 F1 | 	add	objptr, ##38016
187f8     F2 FE 01 FB | 	rdlong	result3, objptr
187fc     FF 12 02 F6 | 	mov	arg01, result3
18800     01 12 66 F0 | 	shl	arg01, #1
18804     FF 12 02 F1 | 	add	arg01, result3
18808     02 12 66 F0 | 	shl	arg01, #2
1880c     03 00 00 FF 
18810     04 E4 85 F1 | 	sub	objptr, ##1540
18814     F2 12 02 F1 | 	add	arg01, objptr
18818     09 13 02 FB | 	rdlong	arg01, arg01
1881c     04 12 66 F0 | 	shl	arg01, #4
18820     32 00 00 FF 
18824     84 E4 85 F1 | 	sub	objptr, ##25732
18828     F2 12 02 F1 | 	add	arg01, objptr
1882c     04 12 06 F1 | 	add	arg01, #4
18830     09 13 02 FB | 	rdlong	arg01, arg01
18834     0C 4E 05 F1 | 	add	fp, #12
18838     A7 12 62 FC | 	wrlong	arg01, fp
1883c     0C 4E 85 F1 | 	sub	fp, #12
18840     14 00 00 FF 
18844     F8 E5 85 F1 | 	sub	objptr, ##10744
18848     34 5A B0 FD | 	call	#_pslpeek
1884c     FD FA 31 F9 | 	getword	result1, result1, #0
18850     10 4E 05 F1 | 	add	fp, #16
18854     A7 FA 61 FC | 	wrlong	result1, fp
18858     4A 00 00 FF 
1885c     80 E4 05 F1 | 	add	objptr, ##38016
18860     F2 FE 01 FB | 	rdlong	result3, objptr
18864     FF 12 02 F6 | 	mov	arg01, result3
18868     01 12 66 F0 | 	shl	arg01, #1
1886c     FF 12 02 F1 | 	add	arg01, result3
18870     02 12 66 F0 | 	shl	arg01, #2
18874     03 00 00 FF 
18878     04 E4 85 F1 | 	sub	objptr, ##1540
1887c     F2 12 02 F1 | 	add	arg01, objptr
18880     04 12 06 F1 | 	add	arg01, #4
18884     09 13 02 FB | 	rdlong	arg01, arg01
18888     04 4E 05 F1 | 	add	fp, #4
1888c     A7 12 62 FC | 	wrlong	arg01, fp
18890     08 4E 85 F1 | 	sub	fp, #8
18894     A7 12 02 FB | 	rdlong	arg01, fp
18898     0C 4E 85 F1 | 	sub	fp, #12
1889c     02 12 06 F1 | 	add	arg01, #2
188a0     47 00 00 FF 
188a4     7C E4 85 F1 | 	sub	objptr, ##36476
188a8     7C 59 B0 FD | 	call	#_pspeek
188ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
188b0     18 4E 05 F1 | 	add	fp, #24
188b4     A7 FA 61 FC | 	wrlong	result1, fp
188b8     0C 4E 85 F1 | 	sub	fp, #12
188bc     A7 12 02 FB | 	rdlong	arg01, fp
188c0     0C 4E 85 F1 | 	sub	fp, #12
188c4     04 12 06 F1 | 	add	arg01, #4
188c8     B4 59 B0 FD | 	call	#_pslpeek
188cc     1C 4E 05 F1 | 	add	fp, #28
188d0     A7 FA 61 FC | 	wrlong	result1, fp
188d4     10 4E 85 F1 | 	sub	fp, #16
188d8     A7 12 02 FB | 	rdlong	arg01, fp
188dc     0C 4E 85 F1 | 	sub	fp, #12
188e0     08 12 06 F1 | 	add	arg01, #8
188e4     98 59 B0 FD | 	call	#_pslpeek
188e8     20 4E 05 F1 | 	add	fp, #32
188ec     A7 FA 61 FC | 	wrlong	result1, fp
188f0     14 4E 85 F1 | 	sub	fp, #20
188f4     A7 12 02 FB | 	rdlong	arg01, fp
188f8     0C 4E 85 F1 | 	sub	fp, #12
188fc     0C 12 06 F1 | 	add	arg01, #12
18900     7C 59 B0 FD | 	call	#_pslpeek
18904     24 4E 05 F1 | 	add	fp, #36
18908     A7 FA 61 FC | 	wrlong	result1, fp
1890c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1890c                 | ' esize=pspeek(arrptr+2)
1890c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1890c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1890c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1890c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1890c     10 4E 85 F1 | 	sub	fp, #16
18910     A7 12 02 FB | 	rdlong	arg01, fp
18914     14 4E 85 F1 | 	sub	fp, #20
18918     03 12 16 F2 | 	cmp	arg01, #3 wc
1891c     34 00 90 CD |  if_b	jmp	#LR__2042
18920     B4 2E BF FD | 	call	#_pop
18924     A7 FA 61 FC | 	wrlong	result1, fp
18928     04 4E 05 F1 | 	add	fp, #4
1892c     A7 FC 61 FC | 	wrlong	result2, fp
18930     04 4E 05 F1 | 	add	fp, #4
18934     A7 FE 61 FC | 	wrlong	result3, fp
18938     08 4E 85 F1 | 	sub	fp, #8
1893c     A7 12 02 F6 | 	mov	arg01, fp
18940     78 30 BF FD | 	call	#_converttoint
18944     30 4E 05 F1 | 	add	fp, #48
18948     A7 FA 61 FC | 	wrlong	result1, fp
1894c     30 4E 85 F1 | 	sub	fp, #48
18950     0C 00 90 FD | 	jmp	#LR__2043
18954                 | LR__2042
18954     30 4E 05 F1 | 	add	fp, #48
18958     A7 00 68 FC | 	wrlong	#0, fp
1895c     30 4E 85 F1 | 	sub	fp, #48
18960                 | LR__2043
18960                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
18960     14 4E 05 F1 | 	add	fp, #20
18964     A7 12 02 FB | 	rdlong	arg01, fp
18968     14 4E 85 F1 | 	sub	fp, #20
1896c     02 12 16 F2 | 	cmp	arg01, #2 wc
18970     34 00 90 CD |  if_b	jmp	#LR__2044
18974     60 2E BF FD | 	call	#_pop
18978     A7 FA 61 FC | 	wrlong	result1, fp
1897c     04 4E 05 F1 | 	add	fp, #4
18980     A7 FC 61 FC | 	wrlong	result2, fp
18984     04 4E 05 F1 | 	add	fp, #4
18988     A7 FE 61 FC | 	wrlong	result3, fp
1898c     08 4E 85 F1 | 	sub	fp, #8
18990     A7 12 02 F6 | 	mov	arg01, fp
18994     24 30 BF FD | 	call	#_converttoint
18998     2C 4E 05 F1 | 	add	fp, #44
1899c     A7 FA 61 FC | 	wrlong	result1, fp
189a0     2C 4E 85 F1 | 	sub	fp, #44
189a4     0C 00 90 FD | 	jmp	#LR__2045
189a8                 | LR__2044
189a8     2C 4E 05 F1 | 	add	fp, #44
189ac     A7 00 68 FC | 	wrlong	#0, fp
189b0     2C 4E 85 F1 | 	sub	fp, #44
189b4                 | LR__2045
189b4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
189b4     14 4E 05 F1 | 	add	fp, #20
189b8     A7 12 02 FB | 	rdlong	arg01, fp
189bc     14 4E 85 F1 | 	sub	fp, #20
189c0     01 12 16 F2 | 	cmp	arg01, #1 wc
189c4     34 00 90 CD |  if_b	jmp	#LR__2046
189c8     0C 2E BF FD | 	call	#_pop
189cc     A7 FA 61 FC | 	wrlong	result1, fp
189d0     04 4E 05 F1 | 	add	fp, #4
189d4     A7 FC 61 FC | 	wrlong	result2, fp
189d8     04 4E 05 F1 | 	add	fp, #4
189dc     A7 FE 61 FC | 	wrlong	result3, fp
189e0     08 4E 85 F1 | 	sub	fp, #8
189e4     A7 12 02 F6 | 	mov	arg01, fp
189e8     D0 2F BF FD | 	call	#_converttoint
189ec     28 4E 05 F1 | 	add	fp, #40
189f0     A7 FA 61 FC | 	wrlong	result1, fp
189f4     28 4E 85 F1 | 	sub	fp, #40
189f8     0C 00 90 FD | 	jmp	#LR__2047
189fc                 | LR__2046
189fc     28 4E 05 F1 | 	add	fp, #40
18a00     A7 00 68 FC | 	wrlong	#0, fp
18a04     28 4E 85 F1 | 	sub	fp, #40
18a08                 | LR__2047
18a08                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
18a08                 | ' if numpar>0 then
18a08     14 4E 05 F1 | 	add	fp, #20
18a0c     A7 FE 01 FB | 	rdlong	result3, fp
18a10     14 4E 85 F1 | 	sub	fp, #20
18a14     01 FE 15 F2 | 	cmp	result3, #1 wc
18a18     8C 00 90 CD |  if_b	jmp	#LR__2048
18a1c     0C 4E 05 F1 | 	add	fp, #12
18a20     A7 FC 01 FB | 	rdlong	result2, fp
18a24     1C 4E 05 F1 | 	add	fp, #28
18a28     A7 FE 01 FB | 	rdlong	result3, fp
18a2c     04 4E 05 F1 | 	add	fp, #4
18a30     A7 12 02 FB | 	rdlong	arg01, fp
18a34     10 4E 85 F1 | 	sub	fp, #16
18a38     A7 FA 01 FB | 	rdlong	result1, fp
18a3c     FD 12 02 FD | 	qmul	arg01, result1
18a40     10 FC 05 F1 | 	add	result2, #16
18a44     14 4E 05 F1 | 	add	fp, #20
18a48     A7 1E 02 FB | 	rdlong	local01, fp
18a4c     18 12 62 FD | 	getqx	arg01
18a50     FD 1E 02 FD | 	qmul	local01, result1
18a54     09 FF 01 F1 | 	add	result3, arg01
18a58     10 4E 85 F1 | 	sub	fp, #16
18a5c     A7 1E 02 FB | 	rdlong	local01, fp
18a60     18 FA 61 FD | 	getqx	result1
18a64     0F FB 01 FD | 	qmul	result1, local01
18a68     08 4E 85 F1 | 	sub	fp, #8
18a6c     A7 1E 02 FB | 	rdlong	local01, fp
18a70     18 FA 61 FD | 	getqx	result1
18a74     FD FE 01 F1 | 	add	result3, result1
18a78     0F FF 01 FD | 	qmul	result3, local01
18a7c     1C 4E 05 F1 | 	add	fp, #28
18a80     18 1E 62 FD | 	getqx	local01
18a84     0F FD 01 F1 | 	add	result2, local01
18a88     A7 FC 61 FC | 	wrlong	result2, fp
18a8c     2C 4E 85 F1 | 	sub	fp, #44
18a90     A7 3A 68 FC | 	wrlong	#29, fp
18a94     2C 4E 05 F1 | 	add	fp, #44
18a98     A7 1E 02 FB | 	rdlong	local01, fp
18a9c     34 4E 85 F1 | 	sub	fp, #52
18aa0     A7 1E 62 FC | 	wrlong	local01, fp
18aa4     18 00 90 FD | 	jmp	#LR__2049
18aa8                 | LR__2048
18aa8     08 4E 05 F1 | 	add	fp, #8
18aac     A7 3A 68 FC | 	wrlong	#29, fp
18ab0     04 4E 05 F1 | 	add	fp, #4
18ab4     A7 1E 02 FB | 	rdlong	local01, fp
18ab8     0C 4E 85 F1 | 	sub	fp, #12
18abc     A7 1E 62 FC | 	wrlong	local01, fp
18ac0                 | LR__2049
18ac0     A7 12 02 F6 | 	mov	arg01, fp
18ac4     A8 2D BF FD | 	call	#_push
18ac8                 | LR__2050
18ac8     A7 F0 03 F6 | 	mov	ptra, fp
18acc     B2 00 A0 FD | 	call	#popregs_
18ad0                 | _do_getaddr_ret
18ad0     2D 00 64 FD | 	ret
18ad4                 | 
18ad4                 | ' 
18ad4                 | ' 
18ad4                 | ' 
18ad4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18ad4                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
18ad4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18ad4                 | ' 
18ad4                 | ' '--------------------------------- AND 
18ad4                 | ' 
18ad4                 | ' sub do_and 
18ad4                 | _do_and
18ad4     03 4A 05 F6 | 	mov	COUNT_, #3
18ad8     A8 00 A0 FD | 	call	#pushregs_
18adc     18 F0 07 F1 | 	add	ptra, #24
18ae0     F4 2C BF FD | 	call	#_pop
18ae4     FD 12 02 F6 | 	mov	arg01, result1
18ae8     FE 1E 02 F6 | 	mov	local01, result2
18aec     FF 20 02 F6 | 	mov	local02, result3
18af0     0C 4E 05 F1 | 	add	fp, #12
18af4     A7 12 62 FC | 	wrlong	arg01, fp
18af8     04 4E 05 F1 | 	add	fp, #4
18afc     A7 1E 62 FC | 	wrlong	local01, fp
18b00     04 4E 05 F1 | 	add	fp, #4
18b04     A7 20 62 FC | 	wrlong	local02, fp
18b08     14 4E 85 F1 | 	sub	fp, #20
18b0c     C8 2C BF FD | 	call	#_pop
18b10     FF 22 02 F6 | 	mov	local03, result3
18b14     A7 FA 61 FC | 	wrlong	result1, fp
18b18     04 4E 05 F1 | 	add	fp, #4
18b1c     A7 FC 61 FC | 	wrlong	result2, fp
18b20     04 4E 05 F1 | 	add	fp, #4
18b24     A7 22 62 FC | 	wrlong	local03, fp
18b28                 | ' 
18b28                 | ' t2=pop()
18b28                 | ' t1=pop()
18b28                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18b28     08 4E 85 F1 | 	sub	fp, #8
18b2c     1C 22 0E F2 | 	cmp	local03, #28 wz
18b30     A7 22 02 AB |  if_e	rdlong	local03, fp
18b34     A7 22 62 AC |  if_e	wrlong	local03, fp
18b38     08 4E 05 A1 |  if_e	add	fp, #8
18b3c     A7 3A 68 AC |  if_e	wrlong	#29, fp
18b40     08 4E 85 A1 |  if_e	sub	fp, #8
18b44                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18b44     14 4E 05 F1 | 	add	fp, #20
18b48     A7 22 02 FB | 	rdlong	local03, fp
18b4c     14 4E 85 F1 | 	sub	fp, #20
18b50     1C 22 0E F2 | 	cmp	local03, #28 wz
18b54     18 00 90 5D |  if_ne	jmp	#LR__2060
18b58     0C 4E 05 F1 | 	add	fp, #12
18b5c     A7 22 02 FB | 	rdlong	local03, fp
18b60     A7 22 62 FC | 	wrlong	local03, fp
18b64     08 4E 05 F1 | 	add	fp, #8
18b68     A7 3A 68 FC | 	wrlong	#29, fp
18b6c     14 4E 85 F1 | 	sub	fp, #20
18b70                 | LR__2060
18b70                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
18b70     08 4E 05 F1 | 	add	fp, #8
18b74     A7 22 02 FB | 	rdlong	local03, fp
18b78     08 4E 85 F1 | 	sub	fp, #8
18b7c     1F 22 0E F2 | 	cmp	local03, #31 wz
18b80     14 4E 05 51 |  if_ne	add	fp, #20
18b84     A7 20 02 5B |  if_ne	rdlong	local02, fp
18b88     14 4E 85 51 |  if_ne	sub	fp, #20
18b8c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
18b90     08 4E 05 51 |  if_ne	add	fp, #8
18b94     A7 22 02 5B |  if_ne	rdlong	local03, fp
18b98     08 4E 85 51 |  if_ne	sub	fp, #8
18b9c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
18ba0     14 4E 05 51 |  if_ne	add	fp, #20
18ba4     14 4E 85 51 |  if_ne	sub	fp, #20
18ba8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
18bac     A7 0C 68 AC |  if_e	wrlong	#6, fp
18bb0     08 4E 05 A1 |  if_e	add	fp, #8
18bb4     A7 FE 69 AC |  if_e	wrlong	#255, fp
18bb8     08 4E 85 A1 |  if_e	sub	fp, #8
18bbc     18 00 90 AD |  if_e	jmp	#LR__2061
18bc0     A7 22 02 FB | 	rdlong	local03, fp
18bc4     0C 4E 05 F1 | 	add	fp, #12
18bc8     A7 1E 02 FB | 	rdlong	local01, fp
18bcc     0C 4E 85 F1 | 	sub	fp, #12
18bd0     0F 23 02 F5 | 	and	local03, local01
18bd4     A7 22 62 FC | 	wrlong	local03, fp
18bd8                 | LR__2061
18bd8     A7 12 02 F6 | 	mov	arg01, fp
18bdc     90 2C BF FD | 	call	#_push
18be0     A7 F0 03 F6 | 	mov	ptra, fp
18be4     B2 00 A0 FD | 	call	#popregs_
18be8                 | _do_and_ret
18be8     2D 00 64 FD | 	ret
18bec                 | 
18bec                 | ' 
18bec                 | ' '--------------------------------- DIV (integer divide)
18bec                 | ' 
18bec                 | ' sub do_div 
18bec                 | _do_div
18bec     01 4A 05 F6 | 	mov	COUNT_, #1
18bf0     A8 00 A0 FD | 	call	#pushregs_
18bf4     18 F0 07 F1 | 	add	ptra, #24
18bf8     DC 2B BF FD | 	call	#_pop
18bfc     FD 82 02 F6 | 	mov	muldivb_, result1
18c00     FE 80 02 F6 | 	mov	muldiva_, result2
18c04     FF 1E 02 F6 | 	mov	local01, result3
18c08     0C 4E 05 F1 | 	add	fp, #12
18c0c     A7 82 62 FC | 	wrlong	muldivb_, fp
18c10     04 4E 05 F1 | 	add	fp, #4
18c14     A7 80 62 FC | 	wrlong	muldiva_, fp
18c18     04 4E 05 F1 | 	add	fp, #4
18c1c     A7 1E 62 FC | 	wrlong	local01, fp
18c20     14 4E 85 F1 | 	sub	fp, #20
18c24     B0 2B BF FD | 	call	#_pop
18c28     A7 FA 61 FC | 	wrlong	result1, fp
18c2c     04 4E 05 F1 | 	add	fp, #4
18c30     A7 FC 61 FC | 	wrlong	result2, fp
18c34     04 4E 05 F1 | 	add	fp, #4
18c38     A7 FE 61 FC | 	wrlong	result3, fp
18c3c                 | ' 
18c3c                 | ' t2=pop()
18c3c                 | ' t1=pop()
18c3c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
18c3c     08 4E 85 F1 | 	sub	fp, #8
18c40     1F FE 0D F2 | 	cmp	result3, #31 wz
18c44     14 4E 05 51 |  if_ne	add	fp, #20
18c48     A7 12 02 5B |  if_ne	rdlong	arg01, fp
18c4c     14 4E 85 51 |  if_ne	sub	fp, #20
18c50     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
18c54     A7 14 68 AC |  if_e	wrlong	#10, fp
18c58     08 4E 05 A1 |  if_e	add	fp, #8
18c5c     A7 FE 69 AC |  if_e	wrlong	#255, fp
18c60     08 4E 85 A1 |  if_e	sub	fp, #8
18c64     90 01 90 AD |  if_e	jmp	#LR__2076
18c68                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
18c68     08 4E 05 F1 | 	add	fp, #8
18c6c     A7 82 02 FB | 	rdlong	muldivb_, fp
18c70     08 4E 85 F1 | 	sub	fp, #8
18c74     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
18c78     1C 00 90 5D |  if_ne	jmp	#LR__2070
18c7c     08 4E 05 F1 | 	add	fp, #8
18c80     A7 38 68 FC | 	wrlong	#28, fp
18c84     08 4E 85 F1 | 	sub	fp, #8
18c88     A7 12 02 FB | 	rdlong	arg01, fp
18c8c     00 14 06 F6 | 	mov	arg02, #0
18c90     74 BB B0 FD | 	call	#__system___float_tointeger
18c94     A7 FA 61 FC | 	wrlong	result1, fp
18c98                 | LR__2070
18c98                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
18c98     14 4E 05 F1 | 	add	fp, #20
18c9c     A7 82 02 FB | 	rdlong	muldivb_, fp
18ca0     14 4E 85 F1 | 	sub	fp, #20
18ca4     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
18ca8     28 00 90 5D |  if_ne	jmp	#LR__2071
18cac     14 4E 05 F1 | 	add	fp, #20
18cb0     A7 38 68 FC | 	wrlong	#28, fp
18cb4     08 4E 85 F1 | 	sub	fp, #8
18cb8     A7 12 02 FB | 	rdlong	arg01, fp
18cbc     0C 4E 85 F1 | 	sub	fp, #12
18cc0     00 14 06 F6 | 	mov	arg02, #0
18cc4     40 BB B0 FD | 	call	#__system___float_tointeger
18cc8     0C 4E 05 F1 | 	add	fp, #12
18ccc     A7 FA 61 FC | 	wrlong	result1, fp
18cd0     0C 4E 85 F1 | 	sub	fp, #12
18cd4                 | LR__2071
18cd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
18cd4     08 4E 05 F1 | 	add	fp, #8
18cd8     A7 82 02 FB | 	rdlong	muldivb_, fp
18cdc     08 4E 85 F1 | 	sub	fp, #8
18ce0     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
18ce4     14 4E 05 A1 |  if_e	add	fp, #20
18ce8     A7 1E 02 AB |  if_e	rdlong	local01, fp
18cec     14 4E 85 A1 |  if_e	sub	fp, #20
18cf0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18cf4     20 00 90 5D |  if_ne	jmp	#LR__2072
18cf8     0C 4E 05 F1 | 	add	fp, #12
18cfc     A7 1E 02 FB | 	rdlong	local01, fp
18d00     0C 4E 85 F1 | 	sub	fp, #12
18d04     A7 82 02 FB | 	rdlong	muldivb_, fp
18d08     0F 83 12 FD | 	qdiv	muldivb_, local01
18d0c     18 1E 62 FD | 	getqx	local01
18d10     A7 1E 62 FC | 	wrlong	local01, fp
18d14     E0 00 90 FD | 	jmp	#LR__2076
18d18                 | LR__2072
18d18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
18d18     08 4E 05 F1 | 	add	fp, #8
18d1c     A7 82 02 FB | 	rdlong	muldivb_, fp
18d20     08 4E 85 F1 | 	sub	fp, #8
18d24     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
18d28     14 4E 05 A1 |  if_e	add	fp, #20
18d2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18d30     14 4E 85 A1 |  if_e	sub	fp, #20
18d34     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18d38     2C 00 90 5D |  if_ne	jmp	#LR__2073
18d3c     0C 4E 05 F1 | 	add	fp, #12
18d40     A7 1E 02 FB | 	rdlong	local01, fp
18d44     0C 4E 85 F1 | 	sub	fp, #12
18d48     A7 82 02 FB | 	rdlong	muldivb_, fp
18d4c     0F 83 12 FD | 	qdiv	muldivb_, local01
18d50     18 1E 62 FD | 	getqx	local01
18d54     A7 1E 62 FC | 	wrlong	local01, fp
18d58     08 4E 05 F1 | 	add	fp, #8
18d5c     A7 38 68 FC | 	wrlong	#28, fp
18d60     08 4E 85 F1 | 	sub	fp, #8
18d64     90 00 90 FD | 	jmp	#LR__2076
18d68                 | LR__2073
18d68                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
18d68     08 4E 05 F1 | 	add	fp, #8
18d6c     A7 82 02 FB | 	rdlong	muldivb_, fp
18d70     08 4E 85 F1 | 	sub	fp, #8
18d74     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
18d78     14 4E 05 A1 |  if_e	add	fp, #20
18d7c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18d80     14 4E 85 A1 |  if_e	sub	fp, #20
18d84     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18d88     1C 00 90 5D |  if_ne	jmp	#LR__2074
18d8c     A7 80 02 FB | 	rdlong	muldiva_, fp
18d90     0C 4E 05 F1 | 	add	fp, #12
18d94     A7 82 02 FB | 	rdlong	muldivb_, fp
18d98     0C 4E 85 F1 | 	sub	fp, #12
18d9c     BA 00 A0 FD | 	call	#divide_
18da0     A7 82 62 FC | 	wrlong	muldivb_, fp
18da4     50 00 90 FD | 	jmp	#LR__2076
18da8                 | LR__2074
18da8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
18da8     08 4E 05 F1 | 	add	fp, #8
18dac     A7 82 02 FB | 	rdlong	muldivb_, fp
18db0     08 4E 85 F1 | 	sub	fp, #8
18db4     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
18db8     14 4E 05 A1 |  if_e	add	fp, #20
18dbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
18dc0     14 4E 85 A1 |  if_e	sub	fp, #20
18dc4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18dc8     1C 00 90 5D |  if_ne	jmp	#LR__2075
18dcc     A7 80 02 FB | 	rdlong	muldiva_, fp
18dd0     0C 4E 05 F1 | 	add	fp, #12
18dd4     A7 82 02 FB | 	rdlong	muldivb_, fp
18dd8     0C 4E 85 F1 | 	sub	fp, #12
18ddc     BA 00 A0 FD | 	call	#divide_
18de0     A7 82 62 FC | 	wrlong	muldivb_, fp
18de4     10 00 90 FD | 	jmp	#LR__2076
18de8                 | LR__2075
18de8     A7 16 68 FC | 	wrlong	#11, fp
18dec     08 4E 05 F1 | 	add	fp, #8
18df0     A7 FE 69 FC | 	wrlong	#255, fp
18df4     08 4E 85 F1 | 	sub	fp, #8
18df8                 | LR__2076
18df8     A7 12 02 F6 | 	mov	arg01, fp
18dfc     70 2A BF FD | 	call	#_push
18e00     A7 F0 03 F6 | 	mov	ptra, fp
18e04     B2 00 A0 FD | 	call	#popregs_
18e08                 | _do_div_ret
18e08     2D 00 64 FD | 	ret
18e0c                 | 
18e0c                 | ' 
18e0c                 | ' '--------------------------------- equal (=)
18e0c                 | ' 
18e0c                 | ' sub do_eq
18e0c                 | _do_eq
18e0c     05 4A 05 F6 | 	mov	COUNT_, #5
18e10     A8 00 A0 FD | 	call	#pushregs_
18e14     18 F0 07 F1 | 	add	ptra, #24
18e18     BC 29 BF FD | 	call	#_pop
18e1c     FD 1E 02 F6 | 	mov	local01, result1
18e20     FE 20 02 F6 | 	mov	local02, result2
18e24     FF 22 02 F6 | 	mov	local03, result3
18e28     0C 4E 05 F1 | 	add	fp, #12
18e2c     A7 1E 62 FC | 	wrlong	local01, fp
18e30     04 4E 05 F1 | 	add	fp, #4
18e34     A7 20 62 FC | 	wrlong	local02, fp
18e38     04 4E 05 F1 | 	add	fp, #4
18e3c     A7 22 62 FC | 	wrlong	local03, fp
18e40     14 4E 85 F1 | 	sub	fp, #20
18e44     90 29 BF FD | 	call	#_pop
18e48     FF 22 02 F6 | 	mov	local03, result3
18e4c     A7 FA 61 FC | 	wrlong	result1, fp
18e50     04 4E 05 F1 | 	add	fp, #4
18e54     A7 FC 61 FC | 	wrlong	result2, fp
18e58     04 4E 05 F1 | 	add	fp, #4
18e5c     A7 22 62 FC | 	wrlong	local03, fp
18e60                 | ' 
18e60                 | ' t2=pop()
18e60                 | ' t1=pop()
18e60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
18e60     08 4E 85 F1 | 	sub	fp, #8
18e64     1F 22 0E F2 | 	cmp	local03, #31 wz
18e68     14 4E 05 A1 |  if_e	add	fp, #20
18e6c     A7 24 02 AB |  if_e	rdlong	local04, fp
18e70     14 4E 85 A1 |  if_e	sub	fp, #20
18e74     12 23 02 A6 |  if_e	mov	local03, local04
18e78     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18e7c     28 00 90 5D |  if_ne	jmp	#LR__2080
18e80     00 1E 06 F6 | 	mov	local01, #0
18e84     A7 12 02 FB | 	rdlong	arg01, fp
18e88     0C 4E 05 F1 | 	add	fp, #12
18e8c     A7 14 02 FB | 	rdlong	arg02, fp
18e90     0C 4E 85 F1 | 	sub	fp, #12
18e94     14 87 B0 FD | 	call	#__system___string_cmp
18e98     00 FA 0D F2 | 	cmp	result1, #0 wz
18e9c     00 1E 26 A6 |  if_e	not	local01, #0
18ea0     A7 1E 62 FC | 	wrlong	local01, fp
18ea4     1C 04 90 FD | 	jmp	#LR__2093
18ea8                 | LR__2080
18ea8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
18ea8     08 4E 05 F1 | 	add	fp, #8
18eac     A7 1E 02 FB | 	rdlong	local01, fp
18eb0     08 4E 85 F1 | 	sub	fp, #8
18eb4     1E 1E 0E F2 | 	cmp	local01, #30 wz
18eb8     14 4E 05 A1 |  if_e	add	fp, #20
18ebc     A7 24 02 AB |  if_e	rdlong	local04, fp
18ec0     14 4E 85 A1 |  if_e	sub	fp, #20
18ec4     12 23 02 A6 |  if_e	mov	local03, local04
18ec8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18ecc     2C 00 90 5D |  if_ne	jmp	#LR__2081
18ed0     00 1E 06 F6 | 	mov	local01, #0
18ed4     A7 12 02 FB | 	rdlong	arg01, fp
18ed8     0C 4E 05 F1 | 	add	fp, #12
18edc     A7 14 02 FB | 	rdlong	arg02, fp
18ee0     0C 4E 85 F1 | 	sub	fp, #12
18ee4     01 16 06 F6 | 	mov	arg03, #1
18ee8     88 B8 B0 FD | 	call	#__system___float_cmp
18eec     00 FA 0D F2 | 	cmp	result1, #0 wz
18ef0     00 1E 26 A6 |  if_e	not	local01, #0
18ef4     A7 1E 62 FC | 	wrlong	local01, fp
18ef8     C8 03 90 FD | 	jmp	#LR__2093
18efc                 | LR__2081
18efc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
18efc     08 4E 05 F1 | 	add	fp, #8
18f00     A7 1E 02 FB | 	rdlong	local01, fp
18f04     08 4E 85 F1 | 	sub	fp, #8
18f08     1E 1E 0E F2 | 	cmp	local01, #30 wz
18f0c     14 4E 05 A1 |  if_e	add	fp, #20
18f10     A7 24 02 AB |  if_e	rdlong	local04, fp
18f14     14 4E 85 A1 |  if_e	sub	fp, #20
18f18     12 23 02 A6 |  if_e	mov	local03, local04
18f1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18f20     48 00 90 5D |  if_ne	jmp	#LR__2082
18f24     00 1E 06 F6 | 	mov	local01, #0
18f28     A7 20 02 FB | 	rdlong	local02, fp
18f2c     0C 4E 05 F1 | 	add	fp, #12
18f30     A7 12 02 FB | 	rdlong	arg01, fp
18f34     0C 4E 85 F1 | 	sub	fp, #12
18f38     09 13 52 F6 | 	abs	arg01, arg01 wc
18f3c     1F 26 C6 C9 |  if_b	decod	local05, #31
18f40     00 26 06 36 |  if_ae	mov	local05, #0
18f44     F4 AF B0 FD | 	call	#__system___float_fromuns
18f48     13 FB 61 F5 | 	xor	result1, local05
18f4c     FD 14 02 F6 | 	mov	arg02, result1
18f50     10 13 02 F6 | 	mov	arg01, local02
18f54     01 16 06 F6 | 	mov	arg03, #1
18f58     18 B8 B0 FD | 	call	#__system___float_cmp
18f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
18f60     00 1E 26 A6 |  if_e	not	local01, #0
18f64     A7 1E 62 FC | 	wrlong	local01, fp
18f68     58 03 90 FD | 	jmp	#LR__2093
18f6c                 | LR__2082
18f6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
18f6c     08 4E 05 F1 | 	add	fp, #8
18f70     A7 1E 02 FB | 	rdlong	local01, fp
18f74     08 4E 85 F1 | 	sub	fp, #8
18f78     1E 1E 0E F2 | 	cmp	local01, #30 wz
18f7c     14 4E 05 A1 |  if_e	add	fp, #20
18f80     A7 24 02 AB |  if_e	rdlong	local04, fp
18f84     14 4E 85 A1 |  if_e	sub	fp, #20
18f88     12 23 02 A6 |  if_e	mov	local03, local04
18f8c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18f90     38 00 90 5D |  if_ne	jmp	#LR__2083
18f94     00 1E 06 F6 | 	mov	local01, #0
18f98     A7 20 02 FB | 	rdlong	local02, fp
18f9c     0C 4E 05 F1 | 	add	fp, #12
18fa0     A7 12 02 FB | 	rdlong	arg01, fp
18fa4     0C 4E 85 F1 | 	sub	fp, #12
18fa8     90 AF B0 FD | 	call	#__system___float_fromuns
18fac     FD 14 02 F6 | 	mov	arg02, result1
18fb0     10 13 02 F6 | 	mov	arg01, local02
18fb4     01 16 06 F6 | 	mov	arg03, #1
18fb8     B8 B7 B0 FD | 	call	#__system___float_cmp
18fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
18fc0     00 1E 26 A6 |  if_e	not	local01, #0
18fc4     A7 1E 62 FC | 	wrlong	local01, fp
18fc8     F8 02 90 FD | 	jmp	#LR__2093
18fcc                 | LR__2083
18fcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
18fcc     08 4E 05 F1 | 	add	fp, #8
18fd0     A7 1E 02 FB | 	rdlong	local01, fp
18fd4     08 4E 85 F1 | 	sub	fp, #8
18fd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
18fdc     14 4E 05 A1 |  if_e	add	fp, #20
18fe0     A7 24 02 AB |  if_e	rdlong	local04, fp
18fe4     14 4E 85 A1 |  if_e	sub	fp, #20
18fe8     12 23 02 A6 |  if_e	mov	local03, local04
18fec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18ff0     44 00 90 5D |  if_ne	jmp	#LR__2084
18ff4     00 1E 06 F6 | 	mov	local01, #0
18ff8     A7 12 02 FB | 	rdlong	arg01, fp
18ffc     09 13 52 F6 | 	abs	arg01, arg01 wc
19000     1F 26 C6 C9 |  if_b	decod	local05, #31
19004     00 26 06 36 |  if_ae	mov	local05, #0
19008     30 AF B0 FD | 	call	#__system___float_fromuns
1900c     13 FB 61 F5 | 	xor	result1, local05
19010     FD 12 02 F6 | 	mov	arg01, result1
19014     0C 4E 05 F1 | 	add	fp, #12
19018     A7 14 02 FB | 	rdlong	arg02, fp
1901c     0C 4E 85 F1 | 	sub	fp, #12
19020     01 16 06 F6 | 	mov	arg03, #1
19024     4C B7 B0 FD | 	call	#__system___float_cmp
19028     00 FA 0D F2 | 	cmp	result1, #0 wz
1902c     00 1E 26 A6 |  if_e	not	local01, #0
19030     A7 1E 62 FC | 	wrlong	local01, fp
19034     8C 02 90 FD | 	jmp	#LR__2093
19038                 | LR__2084
19038                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
19038     08 4E 05 F1 | 	add	fp, #8
1903c     A7 1E 02 FB | 	rdlong	local01, fp
19040     08 4E 85 F1 | 	sub	fp, #8
19044     1C 1E 0E F2 | 	cmp	local01, #28 wz
19048     14 4E 05 A1 |  if_e	add	fp, #20
1904c     A7 24 02 AB |  if_e	rdlong	local04, fp
19050     14 4E 85 A1 |  if_e	sub	fp, #20
19054     12 23 02 A6 |  if_e	mov	local03, local04
19058     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1905c     24 00 90 5D |  if_ne	jmp	#LR__2085
19060     00 1E 06 F6 | 	mov	local01, #0
19064     A7 20 02 FB | 	rdlong	local02, fp
19068     0C 4E 05 F1 | 	add	fp, #12
1906c     A7 22 02 FB | 	rdlong	local03, fp
19070     0C 4E 85 F1 | 	sub	fp, #12
19074     11 21 0A F2 | 	cmp	local02, local03 wz
19078     01 1E 66 A6 |  if_e	neg	local01, #1
1907c     A7 1E 62 FC | 	wrlong	local01, fp
19080     40 02 90 FD | 	jmp	#LR__2093
19084                 | LR__2085
19084                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
19084     08 4E 05 F1 | 	add	fp, #8
19088     A7 1E 02 FB | 	rdlong	local01, fp
1908c     08 4E 85 F1 | 	sub	fp, #8
19090     1C 1E 0E F2 | 	cmp	local01, #28 wz
19094     14 4E 05 A1 |  if_e	add	fp, #20
19098     A7 24 02 AB |  if_e	rdlong	local04, fp
1909c     14 4E 85 A1 |  if_e	sub	fp, #20
190a0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
190a4     24 00 90 5D |  if_ne	jmp	#LR__2086
190a8     00 1E 06 F6 | 	mov	local01, #0
190ac     A7 20 02 FB | 	rdlong	local02, fp
190b0     0C 4E 05 F1 | 	add	fp, #12
190b4     A7 22 02 FB | 	rdlong	local03, fp
190b8     0C 4E 85 F1 | 	sub	fp, #12
190bc     11 21 0A F2 | 	cmp	local02, local03 wz
190c0     01 1E 66 A6 |  if_e	neg	local01, #1
190c4     A7 1E 62 FC | 	wrlong	local01, fp
190c8     F8 01 90 FD | 	jmp	#LR__2093
190cc                 | LR__2086
190cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
190cc     08 4E 05 F1 | 	add	fp, #8
190d0     A7 1E 02 FB | 	rdlong	local01, fp
190d4     08 4E 85 F1 | 	sub	fp, #8
190d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
190dc     14 4E 05 A1 |  if_e	add	fp, #20
190e0     A7 22 02 AB |  if_e	rdlong	local03, fp
190e4     14 4E 85 A1 |  if_e	sub	fp, #20
190e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
190ec     34 00 90 5D |  if_ne	jmp	#LR__2087
190f0     00 1E 06 F6 | 	mov	local01, #0
190f4     A7 12 02 FB | 	rdlong	arg01, fp
190f8     40 AE B0 FD | 	call	#__system___float_fromuns
190fc     FD 12 02 F6 | 	mov	arg01, result1
19100     0C 4E 05 F1 | 	add	fp, #12
19104     A7 14 02 FB | 	rdlong	arg02, fp
19108     0C 4E 85 F1 | 	sub	fp, #12
1910c     01 16 06 F6 | 	mov	arg03, #1
19110     60 B6 B0 FD | 	call	#__system___float_cmp
19114     00 FA 0D F2 | 	cmp	result1, #0 wz
19118     00 1E 26 A6 |  if_e	not	local01, #0
1911c     A7 1E 62 FC | 	wrlong	local01, fp
19120     A0 01 90 FD | 	jmp	#LR__2093
19124                 | LR__2087
19124                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
19124     08 4E 05 F1 | 	add	fp, #8
19128     A7 1E 02 FB | 	rdlong	local01, fp
1912c     08 4E 85 F1 | 	sub	fp, #8
19130     1D 1E 0E F2 | 	cmp	local01, #29 wz
19134     14 4E 05 A1 |  if_e	add	fp, #20
19138     A7 22 02 AB |  if_e	rdlong	local03, fp
1913c     14 4E 85 A1 |  if_e	sub	fp, #20
19140     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19144     24 00 90 5D |  if_ne	jmp	#LR__2088
19148     00 1E 06 F6 | 	mov	local01, #0
1914c     A7 20 02 FB | 	rdlong	local02, fp
19150     0C 4E 05 F1 | 	add	fp, #12
19154     A7 22 02 FB | 	rdlong	local03, fp
19158     0C 4E 85 F1 | 	sub	fp, #12
1915c     11 21 0A F2 | 	cmp	local02, local03 wz
19160     01 1E 66 A6 |  if_e	neg	local01, #1
19164     A7 1E 62 FC | 	wrlong	local01, fp
19168     58 01 90 FD | 	jmp	#LR__2093
1916c                 | LR__2088
1916c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1916c     08 4E 05 F1 | 	add	fp, #8
19170     A7 1E 02 FB | 	rdlong	local01, fp
19174     08 4E 85 F1 | 	sub	fp, #8
19178     1D 1E 0E F2 | 	cmp	local01, #29 wz
1917c     14 4E 05 A1 |  if_e	add	fp, #20
19180     A7 22 02 AB |  if_e	rdlong	local03, fp
19184     14 4E 85 A1 |  if_e	sub	fp, #20
19188     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1918c     24 00 90 5D |  if_ne	jmp	#LR__2089
19190     00 1E 06 F6 | 	mov	local01, #0
19194     A7 20 02 FB | 	rdlong	local02, fp
19198     0C 4E 05 F1 | 	add	fp, #12
1919c     A7 22 02 FB | 	rdlong	local03, fp
191a0     0C 4E 85 F1 | 	sub	fp, #12
191a4     11 21 0A F2 | 	cmp	local02, local03 wz
191a8     01 1E 66 A6 |  if_e	neg	local01, #1
191ac     A7 1E 62 FC | 	wrlong	local01, fp
191b0     10 01 90 FD | 	jmp	#LR__2093
191b4                 | LR__2089
191b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
191b4     08 4E 05 F1 | 	add	fp, #8
191b8     A7 1E 02 FB | 	rdlong	local01, fp
191bc     08 4E 85 F1 | 	sub	fp, #8
191c0     2B 1E 0E F2 | 	cmp	local01, #43 wz
191c4     14 4E 05 A1 |  if_e	add	fp, #20
191c8     A7 22 02 AB |  if_e	rdlong	local03, fp
191cc     14 4E 85 A1 |  if_e	sub	fp, #20
191d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
191d4     30 00 90 5D |  if_ne	jmp	#LR__2090
191d8     00 1E 06 F6 | 	mov	local01, #0
191dc     A7 12 02 FB | 	rdlong	arg01, fp
191e0     6C 27 BF FD | 	call	#_convertstring
191e4     FD 12 02 F6 | 	mov	arg01, result1
191e8     0C 4E 05 F1 | 	add	fp, #12
191ec     A7 14 02 FB | 	rdlong	arg02, fp
191f0     0C 4E 85 F1 | 	sub	fp, #12
191f4     B4 83 B0 FD | 	call	#__system___string_cmp
191f8     00 FA 0D F2 | 	cmp	result1, #0 wz
191fc     00 1E 26 A6 |  if_e	not	local01, #0
19200     A7 1E 62 FC | 	wrlong	local01, fp
19204     BC 00 90 FD | 	jmp	#LR__2093
19208                 | LR__2090
19208                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
19208     08 4E 05 F1 | 	add	fp, #8
1920c     A7 1E 02 FB | 	rdlong	local01, fp
19210     08 4E 85 F1 | 	sub	fp, #8
19214     1F 1E 0E F2 | 	cmp	local01, #31 wz
19218     14 4E 05 A1 |  if_e	add	fp, #20
1921c     A7 22 02 AB |  if_e	rdlong	local03, fp
19220     14 4E 85 A1 |  if_e	sub	fp, #20
19224     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19228     34 00 90 5D |  if_ne	jmp	#LR__2091
1922c     00 1E 06 F6 | 	mov	local01, #0
19230     A7 20 02 FB | 	rdlong	local02, fp
19234     0C 4E 05 F1 | 	add	fp, #12
19238     A7 12 02 FB | 	rdlong	arg01, fp
1923c     0C 4E 85 F1 | 	sub	fp, #12
19240     0C 27 BF FD | 	call	#_convertstring
19244     FD 14 02 F6 | 	mov	arg02, result1
19248     10 13 02 F6 | 	mov	arg01, local02
1924c     5C 83 B0 FD | 	call	#__system___string_cmp
19250     00 FA 0D F2 | 	cmp	result1, #0 wz
19254     00 1E 26 A6 |  if_e	not	local01, #0
19258     A7 1E 62 FC | 	wrlong	local01, fp
1925c     64 00 90 FD | 	jmp	#LR__2093
19260                 | LR__2091
19260                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
19260     08 4E 05 F1 | 	add	fp, #8
19264     A7 1E 02 FB | 	rdlong	local01, fp
19268     08 4E 85 F1 | 	sub	fp, #8
1926c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19270     14 4E 05 A1 |  if_e	add	fp, #20
19274     A7 22 02 AB |  if_e	rdlong	local03, fp
19278     14 4E 85 A1 |  if_e	sub	fp, #20
1927c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19280     3C 00 90 5D |  if_ne	jmp	#LR__2092
19284     00 1E 06 F6 | 	mov	local01, #0
19288     A7 12 02 FB | 	rdlong	arg01, fp
1928c     C0 26 BF FD | 	call	#_convertstring
19290     FD 20 02 F6 | 	mov	local02, result1
19294     0C 4E 05 F1 | 	add	fp, #12
19298     A7 12 02 FB | 	rdlong	arg01, fp
1929c     0C 4E 85 F1 | 	sub	fp, #12
192a0     AC 26 BF FD | 	call	#_convertstring
192a4     FD 14 02 F6 | 	mov	arg02, result1
192a8     10 13 02 F6 | 	mov	arg01, local02
192ac     FC 82 B0 FD | 	call	#__system___string_cmp
192b0     00 FA 0D F2 | 	cmp	result1, #0 wz
192b4     00 1E 26 A6 |  if_e	not	local01, #0
192b8     A7 1E 62 FC | 	wrlong	local01, fp
192bc     04 00 90 FD | 	jmp	#LR__2093
192c0                 | LR__2092
192c0     A7 00 68 FC | 	wrlong	#0, fp
192c4                 | LR__2093
192c4     08 4E 05 F1 | 	add	fp, #8
192c8     A7 38 68 FC | 	wrlong	#28, fp
192cc     08 4E 85 F1 | 	sub	fp, #8
192d0     A7 12 02 F6 | 	mov	arg01, fp
192d4     98 25 BF FD | 	call	#_push
192d8     A7 F0 03 F6 | 	mov	ptra, fp
192dc     B2 00 A0 FD | 	call	#popregs_
192e0                 | _do_eq_ret
192e0     2D 00 64 FD | 	ret
192e4                 | 
192e4                 | ' 
192e4                 | ' '--------------------------------- fdiv (/) - float divide
192e4                 | ' 
192e4                 | ' sub do_fdiv 
192e4                 | _do_fdiv
192e4     02 4A 05 F6 | 	mov	COUNT_, #2
192e8     A8 00 A0 FD | 	call	#pushregs_
192ec     18 F0 07 F1 | 	add	ptra, #24
192f0     E4 24 BF FD | 	call	#_pop
192f4     FD 14 02 F6 | 	mov	arg02, result1
192f8     FE 12 02 F6 | 	mov	arg01, result2
192fc     FF 1E 02 F6 | 	mov	local01, result3
19300     0C 4E 05 F1 | 	add	fp, #12
19304     A7 14 62 FC | 	wrlong	arg02, fp
19308     04 4E 05 F1 | 	add	fp, #4
1930c     A7 12 62 FC | 	wrlong	arg01, fp
19310     04 4E 05 F1 | 	add	fp, #4
19314     A7 1E 62 FC | 	wrlong	local01, fp
19318     14 4E 85 F1 | 	sub	fp, #20
1931c     B8 24 BF FD | 	call	#_pop
19320     A7 FA 61 FC | 	wrlong	result1, fp
19324     04 4E 05 F1 | 	add	fp, #4
19328     A7 FC 61 FC | 	wrlong	result2, fp
1932c     04 4E 05 F1 | 	add	fp, #4
19330     A7 FE 61 FC | 	wrlong	result3, fp
19334                 | ' 
19334                 | ' t2=pop()
19334                 | ' t1=pop()
19334                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
19334     08 4E 85 F1 | 	sub	fp, #8
19338     1F FE 0D F2 | 	cmp	result3, #31 wz
1933c     14 4E 05 51 |  if_ne	add	fp, #20
19340     A7 1E 02 5B |  if_ne	rdlong	local01, fp
19344     14 4E 85 51 |  if_ne	sub	fp, #20
19348     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1934c     A7 14 68 AC |  if_e	wrlong	#10, fp
19350     08 4E 05 A1 |  if_e	add	fp, #8
19354     A7 FE 69 AC |  if_e	wrlong	#255, fp
19358     08 4E 85 A1 |  if_e	sub	fp, #8
1935c     38 01 90 AD |  if_e	jmp	#LR__2105
19360                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
19360     08 4E 05 F1 | 	add	fp, #8
19364     A7 14 02 FB | 	rdlong	arg02, fp
19368     08 4E 85 F1 | 	sub	fp, #8
1936c     1C 14 0E F2 | 	cmp	arg02, #28 wz
19370     28 00 90 5D |  if_ne	jmp	#LR__2100
19374     08 4E 05 F1 | 	add	fp, #8
19378     A7 3C 68 FC | 	wrlong	#30, fp
1937c     08 4E 85 F1 | 	sub	fp, #8
19380     A7 12 02 FB | 	rdlong	arg01, fp
19384     09 13 52 F6 | 	abs	arg01, arg01 wc
19388     1F 20 C6 C9 |  if_b	decod	local02, #31
1938c     00 20 06 36 |  if_ae	mov	local02, #0
19390     A8 AB B0 FD | 	call	#__system___float_fromuns
19394     10 FB 61 F5 | 	xor	result1, local02
19398     A7 FA 61 FC | 	wrlong	result1, fp
1939c                 | LR__2100
1939c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1939c     08 4E 05 F1 | 	add	fp, #8
193a0     A7 14 02 FB | 	rdlong	arg02, fp
193a4     08 4E 85 F1 | 	sub	fp, #8
193a8     1D 14 0E F2 | 	cmp	arg02, #29 wz
193ac     18 00 90 5D |  if_ne	jmp	#LR__2101
193b0     08 4E 05 F1 | 	add	fp, #8
193b4     A7 3C 68 FC | 	wrlong	#30, fp
193b8     08 4E 85 F1 | 	sub	fp, #8
193bc     A7 12 02 FB | 	rdlong	arg01, fp
193c0     78 AB B0 FD | 	call	#__system___float_fromuns
193c4     A7 FA 61 FC | 	wrlong	result1, fp
193c8                 | LR__2101
193c8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
193c8     14 4E 05 F1 | 	add	fp, #20
193cc     A7 14 02 FB | 	rdlong	arg02, fp
193d0     14 4E 85 F1 | 	sub	fp, #20
193d4     1C 14 0E F2 | 	cmp	arg02, #28 wz
193d8     34 00 90 5D |  if_ne	jmp	#LR__2102
193dc     14 4E 05 F1 | 	add	fp, #20
193e0     A7 3C 68 FC | 	wrlong	#30, fp
193e4     08 4E 85 F1 | 	sub	fp, #8
193e8     A7 12 02 FB | 	rdlong	arg01, fp
193ec     0C 4E 85 F1 | 	sub	fp, #12
193f0     09 13 52 F6 | 	abs	arg01, arg01 wc
193f4     1F 20 C6 C9 |  if_b	decod	local02, #31
193f8     00 20 06 36 |  if_ae	mov	local02, #0
193fc     3C AB B0 FD | 	call	#__system___float_fromuns
19400     10 FB 61 F5 | 	xor	result1, local02
19404     0C 4E 05 F1 | 	add	fp, #12
19408     A7 FA 61 FC | 	wrlong	result1, fp
1940c     0C 4E 85 F1 | 	sub	fp, #12
19410                 | LR__2102
19410                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19410     14 4E 05 F1 | 	add	fp, #20
19414     A7 14 02 FB | 	rdlong	arg02, fp
19418     14 4E 85 F1 | 	sub	fp, #20
1941c     1D 14 0E F2 | 	cmp	arg02, #29 wz
19420     24 00 90 5D |  if_ne	jmp	#LR__2103
19424     14 4E 05 F1 | 	add	fp, #20
19428     A7 3C 68 FC | 	wrlong	#30, fp
1942c     08 4E 85 F1 | 	sub	fp, #8
19430     A7 12 02 FB | 	rdlong	arg01, fp
19434     0C 4E 85 F1 | 	sub	fp, #12
19438     00 AB B0 FD | 	call	#__system___float_fromuns
1943c     0C 4E 05 F1 | 	add	fp, #12
19440     A7 FA 61 FC | 	wrlong	result1, fp
19444     0C 4E 85 F1 | 	sub	fp, #12
19448                 | LR__2103
19448                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
19448     08 4E 05 F1 | 	add	fp, #8
1944c     A7 14 02 FB | 	rdlong	arg02, fp
19450     08 4E 85 F1 | 	sub	fp, #8
19454     1E 14 0E F2 | 	cmp	arg02, #30 wz
19458     14 4E 05 A1 |  if_e	add	fp, #20
1945c     A7 1E 02 AB |  if_e	rdlong	local01, fp
19460     14 4E 85 A1 |  if_e	sub	fp, #20
19464     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
19468     1C 00 90 5D |  if_ne	jmp	#LR__2104
1946c     A7 12 02 FB | 	rdlong	arg01, fp
19470     0C 4E 05 F1 | 	add	fp, #12
19474     A7 14 02 FB | 	rdlong	arg02, fp
19478     0C 4E 85 F1 | 	sub	fp, #12
1947c     C4 B0 B0 FD | 	call	#__system___float_div
19480     A7 FA 61 FC | 	wrlong	result1, fp
19484     10 00 90 FD | 	jmp	#LR__2105
19488                 | LR__2104
19488     A7 16 68 FC | 	wrlong	#11, fp
1948c     08 4E 05 F1 | 	add	fp, #8
19490     A7 FE 69 FC | 	wrlong	#255, fp
19494     08 4E 85 F1 | 	sub	fp, #8
19498                 | LR__2105
19498     A7 12 02 F6 | 	mov	arg01, fp
1949c     D0 23 BF FD | 	call	#_push
194a0     A7 F0 03 F6 | 	mov	ptra, fp
194a4     B2 00 A0 FD | 	call	#popregs_
194a8                 | _do_fdiv_ret
194a8     2D 00 64 FD | 	ret
194ac                 | 
194ac                 | ' 
194ac                 | ' '--------------------------------- greater or equal (>=)
194ac                 | ' 
194ac                 | ' sub do_ge
194ac                 | _do_ge
194ac     05 4A 05 F6 | 	mov	COUNT_, #5
194b0     A8 00 A0 FD | 	call	#pushregs_
194b4     18 F0 07 F1 | 	add	ptra, #24
194b8     1C 23 BF FD | 	call	#_pop
194bc     FD 1E 02 F6 | 	mov	local01, result1
194c0     FE 20 02 F6 | 	mov	local02, result2
194c4     FF 22 02 F6 | 	mov	local03, result3
194c8     0C 4E 05 F1 | 	add	fp, #12
194cc     A7 1E 62 FC | 	wrlong	local01, fp
194d0     04 4E 05 F1 | 	add	fp, #4
194d4     A7 20 62 FC | 	wrlong	local02, fp
194d8     04 4E 05 F1 | 	add	fp, #4
194dc     A7 22 62 FC | 	wrlong	local03, fp
194e0     14 4E 85 F1 | 	sub	fp, #20
194e4     F0 22 BF FD | 	call	#_pop
194e8     FF 22 02 F6 | 	mov	local03, result3
194ec     A7 FA 61 FC | 	wrlong	result1, fp
194f0     04 4E 05 F1 | 	add	fp, #4
194f4     A7 FC 61 FC | 	wrlong	result2, fp
194f8     04 4E 05 F1 | 	add	fp, #4
194fc     A7 22 62 FC | 	wrlong	local03, fp
19500                 | ' 
19500                 | ' t2=pop()
19500                 | ' t1=pop()
19500                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
19500     08 4E 85 F1 | 	sub	fp, #8
19504     1F 22 0E F2 | 	cmp	local03, #31 wz
19508     14 4E 05 A1 |  if_e	add	fp, #20
1950c     A7 24 02 AB |  if_e	rdlong	local04, fp
19510     14 4E 85 A1 |  if_e	sub	fp, #20
19514     12 23 02 A6 |  if_e	mov	local03, local04
19518     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1951c     28 00 90 5D |  if_ne	jmp	#LR__2110
19520     00 1E 06 F6 | 	mov	local01, #0
19524     A7 12 02 FB | 	rdlong	arg01, fp
19528     0C 4E 05 F1 | 	add	fp, #12
1952c     A7 14 02 FB | 	rdlong	arg02, fp
19530     0C 4E 85 F1 | 	sub	fp, #12
19534     74 80 B0 FD | 	call	#__system___string_cmp
19538     00 FA 55 F2 | 	cmps	result1, #0 wc
1953c     00 1E 26 36 |  if_ae	not	local01, #0
19540     A7 1E 62 FC | 	wrlong	local01, fp
19544     1C 04 90 FD | 	jmp	#LR__2123
19548                 | LR__2110
19548                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
19548     08 4E 05 F1 | 	add	fp, #8
1954c     A7 1E 02 FB | 	rdlong	local01, fp
19550     08 4E 85 F1 | 	sub	fp, #8
19554     1E 1E 0E F2 | 	cmp	local01, #30 wz
19558     14 4E 05 A1 |  if_e	add	fp, #20
1955c     A7 24 02 AB |  if_e	rdlong	local04, fp
19560     14 4E 85 A1 |  if_e	sub	fp, #20
19564     12 23 02 A6 |  if_e	mov	local03, local04
19568     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1956c     2C 00 90 5D |  if_ne	jmp	#LR__2111
19570     00 1E 06 F6 | 	mov	local01, #0
19574     A7 12 02 FB | 	rdlong	arg01, fp
19578     0C 4E 05 F1 | 	add	fp, #12
1957c     A7 14 02 FB | 	rdlong	arg02, fp
19580     0C 4E 85 F1 | 	sub	fp, #12
19584     01 16 66 F6 | 	neg	arg03, #1
19588     E8 B1 B0 FD | 	call	#__system___float_cmp
1958c     00 FA 55 F2 | 	cmps	result1, #0 wc
19590     00 1E 26 36 |  if_ae	not	local01, #0
19594     A7 1E 62 FC | 	wrlong	local01, fp
19598     C8 03 90 FD | 	jmp	#LR__2123
1959c                 | LR__2111
1959c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1959c     08 4E 05 F1 | 	add	fp, #8
195a0     A7 1E 02 FB | 	rdlong	local01, fp
195a4     08 4E 85 F1 | 	sub	fp, #8
195a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
195ac     14 4E 05 A1 |  if_e	add	fp, #20
195b0     A7 24 02 AB |  if_e	rdlong	local04, fp
195b4     14 4E 85 A1 |  if_e	sub	fp, #20
195b8     12 23 02 A6 |  if_e	mov	local03, local04
195bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
195c0     48 00 90 5D |  if_ne	jmp	#LR__2112
195c4     00 1E 06 F6 | 	mov	local01, #0
195c8     A7 20 02 FB | 	rdlong	local02, fp
195cc     0C 4E 05 F1 | 	add	fp, #12
195d0     A7 12 02 FB | 	rdlong	arg01, fp
195d4     0C 4E 85 F1 | 	sub	fp, #12
195d8     09 13 52 F6 | 	abs	arg01, arg01 wc
195dc     1F 26 C6 C9 |  if_b	decod	local05, #31
195e0     00 26 06 36 |  if_ae	mov	local05, #0
195e4     54 A9 B0 FD | 	call	#__system___float_fromuns
195e8     13 FB 61 F5 | 	xor	result1, local05
195ec     FD 14 02 F6 | 	mov	arg02, result1
195f0     10 13 02 F6 | 	mov	arg01, local02
195f4     01 16 66 F6 | 	neg	arg03, #1
195f8     78 B1 B0 FD | 	call	#__system___float_cmp
195fc     00 FA 55 F2 | 	cmps	result1, #0 wc
19600     00 1E 26 36 |  if_ae	not	local01, #0
19604     A7 1E 62 FC | 	wrlong	local01, fp
19608     58 03 90 FD | 	jmp	#LR__2123
1960c                 | LR__2112
1960c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1960c     08 4E 05 F1 | 	add	fp, #8
19610     A7 1E 02 FB | 	rdlong	local01, fp
19614     08 4E 85 F1 | 	sub	fp, #8
19618     1E 1E 0E F2 | 	cmp	local01, #30 wz
1961c     14 4E 05 A1 |  if_e	add	fp, #20
19620     A7 24 02 AB |  if_e	rdlong	local04, fp
19624     14 4E 85 A1 |  if_e	sub	fp, #20
19628     12 23 02 A6 |  if_e	mov	local03, local04
1962c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19630     38 00 90 5D |  if_ne	jmp	#LR__2113
19634     00 1E 06 F6 | 	mov	local01, #0
19638     A7 20 02 FB | 	rdlong	local02, fp
1963c     0C 4E 05 F1 | 	add	fp, #12
19640     A7 12 02 FB | 	rdlong	arg01, fp
19644     0C 4E 85 F1 | 	sub	fp, #12
19648     F0 A8 B0 FD | 	call	#__system___float_fromuns
1964c     FD 14 02 F6 | 	mov	arg02, result1
19650     10 13 02 F6 | 	mov	arg01, local02
19654     01 16 66 F6 | 	neg	arg03, #1
19658     18 B1 B0 FD | 	call	#__system___float_cmp
1965c     00 FA 55 F2 | 	cmps	result1, #0 wc
19660     00 1E 26 36 |  if_ae	not	local01, #0
19664     A7 1E 62 FC | 	wrlong	local01, fp
19668     F8 02 90 FD | 	jmp	#LR__2123
1966c                 | LR__2113
1966c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1966c     08 4E 05 F1 | 	add	fp, #8
19670     A7 1E 02 FB | 	rdlong	local01, fp
19674     08 4E 85 F1 | 	sub	fp, #8
19678     1C 1E 0E F2 | 	cmp	local01, #28 wz
1967c     14 4E 05 A1 |  if_e	add	fp, #20
19680     A7 24 02 AB |  if_e	rdlong	local04, fp
19684     14 4E 85 A1 |  if_e	sub	fp, #20
19688     12 23 02 A6 |  if_e	mov	local03, local04
1968c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19690     44 00 90 5D |  if_ne	jmp	#LR__2114
19694     00 1E 06 F6 | 	mov	local01, #0
19698     A7 12 02 FB | 	rdlong	arg01, fp
1969c     09 13 52 F6 | 	abs	arg01, arg01 wc
196a0     1F 26 C6 C9 |  if_b	decod	local05, #31
196a4     00 26 06 36 |  if_ae	mov	local05, #0
196a8     90 A8 B0 FD | 	call	#__system___float_fromuns
196ac     13 FB 61 F5 | 	xor	result1, local05
196b0     FD 12 02 F6 | 	mov	arg01, result1
196b4     0C 4E 05 F1 | 	add	fp, #12
196b8     A7 14 02 FB | 	rdlong	arg02, fp
196bc     0C 4E 85 F1 | 	sub	fp, #12
196c0     01 16 66 F6 | 	neg	arg03, #1
196c4     AC B0 B0 FD | 	call	#__system___float_cmp
196c8     00 FA 55 F2 | 	cmps	result1, #0 wc
196cc     00 1E 26 36 |  if_ae	not	local01, #0
196d0     A7 1E 62 FC | 	wrlong	local01, fp
196d4     8C 02 90 FD | 	jmp	#LR__2123
196d8                 | LR__2114
196d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
196d8     08 4E 05 F1 | 	add	fp, #8
196dc     A7 1E 02 FB | 	rdlong	local01, fp
196e0     08 4E 85 F1 | 	sub	fp, #8
196e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
196e8     14 4E 05 A1 |  if_e	add	fp, #20
196ec     A7 24 02 AB |  if_e	rdlong	local04, fp
196f0     14 4E 85 A1 |  if_e	sub	fp, #20
196f4     12 23 02 A6 |  if_e	mov	local03, local04
196f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
196fc     24 00 90 5D |  if_ne	jmp	#LR__2115
19700     00 1E 06 F6 | 	mov	local01, #0
19704     A7 20 02 FB | 	rdlong	local02, fp
19708     0C 4E 05 F1 | 	add	fp, #12
1970c     A7 22 02 FB | 	rdlong	local03, fp
19710     0C 4E 85 F1 | 	sub	fp, #12
19714     11 21 52 F2 | 	cmps	local02, local03 wc
19718     01 1E 66 36 |  if_ae	neg	local01, #1
1971c     A7 1E 62 FC | 	wrlong	local01, fp
19720     40 02 90 FD | 	jmp	#LR__2123
19724                 | LR__2115
19724                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
19724     08 4E 05 F1 | 	add	fp, #8
19728     A7 1E 02 FB | 	rdlong	local01, fp
1972c     08 4E 85 F1 | 	sub	fp, #8
19730     1C 1E 0E F2 | 	cmp	local01, #28 wz
19734     14 4E 05 A1 |  if_e	add	fp, #20
19738     A7 24 02 AB |  if_e	rdlong	local04, fp
1973c     14 4E 85 A1 |  if_e	sub	fp, #20
19740     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19744     24 00 90 5D |  if_ne	jmp	#LR__2116
19748     00 1E 06 F6 | 	mov	local01, #0
1974c     A7 20 02 FB | 	rdlong	local02, fp
19750     0C 4E 05 F1 | 	add	fp, #12
19754     A7 22 02 FB | 	rdlong	local03, fp
19758     0C 4E 85 F1 | 	sub	fp, #12
1975c     11 21 52 F2 | 	cmps	local02, local03 wc
19760     01 1E 66 36 |  if_ae	neg	local01, #1
19764     A7 1E 62 FC | 	wrlong	local01, fp
19768     F8 01 90 FD | 	jmp	#LR__2123
1976c                 | LR__2116
1976c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1976c     08 4E 05 F1 | 	add	fp, #8
19770     A7 1E 02 FB | 	rdlong	local01, fp
19774     08 4E 85 F1 | 	sub	fp, #8
19778     1D 1E 0E F2 | 	cmp	local01, #29 wz
1977c     14 4E 05 A1 |  if_e	add	fp, #20
19780     A7 22 02 AB |  if_e	rdlong	local03, fp
19784     14 4E 85 A1 |  if_e	sub	fp, #20
19788     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1978c     34 00 90 5D |  if_ne	jmp	#LR__2117
19790     00 1E 06 F6 | 	mov	local01, #0
19794     A7 12 02 FB | 	rdlong	arg01, fp
19798     A0 A7 B0 FD | 	call	#__system___float_fromuns
1979c     FD 12 02 F6 | 	mov	arg01, result1
197a0     0C 4E 05 F1 | 	add	fp, #12
197a4     A7 14 02 FB | 	rdlong	arg02, fp
197a8     0C 4E 85 F1 | 	sub	fp, #12
197ac     01 16 66 F6 | 	neg	arg03, #1
197b0     C0 AF B0 FD | 	call	#__system___float_cmp
197b4     00 FA 55 F2 | 	cmps	result1, #0 wc
197b8     00 1E 26 36 |  if_ae	not	local01, #0
197bc     A7 1E 62 FC | 	wrlong	local01, fp
197c0     A0 01 90 FD | 	jmp	#LR__2123
197c4                 | LR__2117
197c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
197c4     08 4E 05 F1 | 	add	fp, #8
197c8     A7 1E 02 FB | 	rdlong	local01, fp
197cc     08 4E 85 F1 | 	sub	fp, #8
197d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
197d4     14 4E 05 A1 |  if_e	add	fp, #20
197d8     A7 22 02 AB |  if_e	rdlong	local03, fp
197dc     14 4E 85 A1 |  if_e	sub	fp, #20
197e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
197e4     24 00 90 5D |  if_ne	jmp	#LR__2118
197e8     00 1E 06 F6 | 	mov	local01, #0
197ec     A7 20 02 FB | 	rdlong	local02, fp
197f0     0C 4E 05 F1 | 	add	fp, #12
197f4     A7 22 02 FB | 	rdlong	local03, fp
197f8     0C 4E 85 F1 | 	sub	fp, #12
197fc     11 21 52 F2 | 	cmps	local02, local03 wc
19800     01 1E 66 36 |  if_ae	neg	local01, #1
19804     A7 1E 62 FC | 	wrlong	local01, fp
19808     58 01 90 FD | 	jmp	#LR__2123
1980c                 | LR__2118
1980c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1980c     08 4E 05 F1 | 	add	fp, #8
19810     A7 1E 02 FB | 	rdlong	local01, fp
19814     08 4E 85 F1 | 	sub	fp, #8
19818     1D 1E 0E F2 | 	cmp	local01, #29 wz
1981c     14 4E 05 A1 |  if_e	add	fp, #20
19820     A7 22 02 AB |  if_e	rdlong	local03, fp
19824     14 4E 85 A1 |  if_e	sub	fp, #20
19828     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1982c     24 00 90 5D |  if_ne	jmp	#LR__2119
19830     00 1E 06 F6 | 	mov	local01, #0
19834     A7 20 02 FB | 	rdlong	local02, fp
19838     0C 4E 05 F1 | 	add	fp, #12
1983c     A7 22 02 FB | 	rdlong	local03, fp
19840     0C 4E 85 F1 | 	sub	fp, #12
19844     11 21 12 F2 | 	cmp	local02, local03 wc
19848     01 1E 66 36 |  if_ae	neg	local01, #1
1984c     A7 1E 62 FC | 	wrlong	local01, fp
19850     10 01 90 FD | 	jmp	#LR__2123
19854                 | LR__2119
19854                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
19854     08 4E 05 F1 | 	add	fp, #8
19858     A7 1E 02 FB | 	rdlong	local01, fp
1985c     08 4E 85 F1 | 	sub	fp, #8
19860     2B 1E 0E F2 | 	cmp	local01, #43 wz
19864     14 4E 05 A1 |  if_e	add	fp, #20
19868     A7 22 02 AB |  if_e	rdlong	local03, fp
1986c     14 4E 85 A1 |  if_e	sub	fp, #20
19870     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19874     30 00 90 5D |  if_ne	jmp	#LR__2120
19878     00 1E 06 F6 | 	mov	local01, #0
1987c     A7 12 02 FB | 	rdlong	arg01, fp
19880     CC 20 BF FD | 	call	#_convertstring
19884     FD 12 02 F6 | 	mov	arg01, result1
19888     0C 4E 05 F1 | 	add	fp, #12
1988c     A7 14 02 FB | 	rdlong	arg02, fp
19890     0C 4E 85 F1 | 	sub	fp, #12
19894     14 7D B0 FD | 	call	#__system___string_cmp
19898     00 FA 55 F2 | 	cmps	result1, #0 wc
1989c     00 1E 26 36 |  if_ae	not	local01, #0
198a0     A7 1E 62 FC | 	wrlong	local01, fp
198a4     BC 00 90 FD | 	jmp	#LR__2123
198a8                 | LR__2120
198a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
198a8     08 4E 05 F1 | 	add	fp, #8
198ac     A7 1E 02 FB | 	rdlong	local01, fp
198b0     08 4E 85 F1 | 	sub	fp, #8
198b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
198b8     14 4E 05 A1 |  if_e	add	fp, #20
198bc     A7 22 02 AB |  if_e	rdlong	local03, fp
198c0     14 4E 85 A1 |  if_e	sub	fp, #20
198c4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
198c8     34 00 90 5D |  if_ne	jmp	#LR__2121
198cc     00 1E 06 F6 | 	mov	local01, #0
198d0     A7 20 02 FB | 	rdlong	local02, fp
198d4     0C 4E 05 F1 | 	add	fp, #12
198d8     A7 12 02 FB | 	rdlong	arg01, fp
198dc     0C 4E 85 F1 | 	sub	fp, #12
198e0     6C 20 BF FD | 	call	#_convertstring
198e4     FD 14 02 F6 | 	mov	arg02, result1
198e8     10 13 02 F6 | 	mov	arg01, local02
198ec     BC 7C B0 FD | 	call	#__system___string_cmp
198f0     00 FA 55 F2 | 	cmps	result1, #0 wc
198f4     00 1E 26 36 |  if_ae	not	local01, #0
198f8     A7 1E 62 FC | 	wrlong	local01, fp
198fc     64 00 90 FD | 	jmp	#LR__2123
19900                 | LR__2121
19900                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
19900     08 4E 05 F1 | 	add	fp, #8
19904     A7 1E 02 FB | 	rdlong	local01, fp
19908     08 4E 85 F1 | 	sub	fp, #8
1990c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19910     14 4E 05 A1 |  if_e	add	fp, #20
19914     A7 22 02 AB |  if_e	rdlong	local03, fp
19918     14 4E 85 A1 |  if_e	sub	fp, #20
1991c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19920     3C 00 90 5D |  if_ne	jmp	#LR__2122
19924     00 1E 06 F6 | 	mov	local01, #0
19928     A7 12 02 FB | 	rdlong	arg01, fp
1992c     20 20 BF FD | 	call	#_convertstring
19930     FD 20 02 F6 | 	mov	local02, result1
19934     0C 4E 05 F1 | 	add	fp, #12
19938     A7 12 02 FB | 	rdlong	arg01, fp
1993c     0C 4E 85 F1 | 	sub	fp, #12
19940     0C 20 BF FD | 	call	#_convertstring
19944     FD 14 02 F6 | 	mov	arg02, result1
19948     10 13 02 F6 | 	mov	arg01, local02
1994c     5C 7C B0 FD | 	call	#__system___string_cmp
19950     00 FA 55 F2 | 	cmps	result1, #0 wc
19954     00 1E 26 36 |  if_ae	not	local01, #0
19958     A7 1E 62 FC | 	wrlong	local01, fp
1995c     04 00 90 FD | 	jmp	#LR__2123
19960                 | LR__2122
19960     A7 00 68 FC | 	wrlong	#0, fp
19964                 | LR__2123
19964     08 4E 05 F1 | 	add	fp, #8
19968     A7 38 68 FC | 	wrlong	#28, fp
1996c     08 4E 85 F1 | 	sub	fp, #8
19970     A7 12 02 F6 | 	mov	arg01, fp
19974     F8 1E BF FD | 	call	#_push
19978     A7 F0 03 F6 | 	mov	ptra, fp
1997c     B2 00 A0 FD | 	call	#popregs_
19980                 | _do_ge_ret
19980     2D 00 64 FD | 	ret
19984                 | 
19984                 | ' 
19984                 | ' '--------------------------------- greater than (>)
19984                 | ' 
19984                 | ' sub do_gt
19984                 | _do_gt
19984     05 4A 05 F6 | 	mov	COUNT_, #5
19988     A8 00 A0 FD | 	call	#pushregs_
1998c     18 F0 07 F1 | 	add	ptra, #24
19990     44 1E BF FD | 	call	#_pop
19994     FD 1E 02 F6 | 	mov	local01, result1
19998     FE 20 02 F6 | 	mov	local02, result2
1999c     FF 22 02 F6 | 	mov	local03, result3
199a0     0C 4E 05 F1 | 	add	fp, #12
199a4     A7 1E 62 FC | 	wrlong	local01, fp
199a8     04 4E 05 F1 | 	add	fp, #4
199ac     A7 20 62 FC | 	wrlong	local02, fp
199b0     04 4E 05 F1 | 	add	fp, #4
199b4     A7 22 62 FC | 	wrlong	local03, fp
199b8     14 4E 85 F1 | 	sub	fp, #20
199bc     18 1E BF FD | 	call	#_pop
199c0     FF 22 02 F6 | 	mov	local03, result3
199c4     A7 FA 61 FC | 	wrlong	result1, fp
199c8     04 4E 05 F1 | 	add	fp, #4
199cc     A7 FC 61 FC | 	wrlong	result2, fp
199d0     04 4E 05 F1 | 	add	fp, #4
199d4     A7 22 62 FC | 	wrlong	local03, fp
199d8                 | ' 
199d8                 | ' t2=pop()
199d8                 | ' t1=pop()
199d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
199d8     08 4E 85 F1 | 	sub	fp, #8
199dc     1F 22 0E F2 | 	cmp	local03, #31 wz
199e0     14 4E 05 A1 |  if_e	add	fp, #20
199e4     A7 24 02 AB |  if_e	rdlong	local04, fp
199e8     14 4E 85 A1 |  if_e	sub	fp, #20
199ec     12 23 02 A6 |  if_e	mov	local03, local04
199f0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
199f4     28 00 90 5D |  if_ne	jmp	#LR__2130
199f8     00 1E 06 F6 | 	mov	local01, #0
199fc     A7 12 02 FB | 	rdlong	arg01, fp
19a00     0C 4E 05 F1 | 	add	fp, #12
19a04     A7 14 02 FB | 	rdlong	arg02, fp
19a08     0C 4E 85 F1 | 	sub	fp, #12
19a0c     9C 7B B0 FD | 	call	#__system___string_cmp
19a10     01 FA 55 F2 | 	cmps	result1, #1 wc
19a14     00 1E 26 36 |  if_ae	not	local01, #0
19a18     A7 1E 62 FC | 	wrlong	local01, fp
19a1c     1C 04 90 FD | 	jmp	#LR__2143
19a20                 | LR__2130
19a20                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
19a20     08 4E 05 F1 | 	add	fp, #8
19a24     A7 1E 02 FB | 	rdlong	local01, fp
19a28     08 4E 85 F1 | 	sub	fp, #8
19a2c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19a30     14 4E 05 A1 |  if_e	add	fp, #20
19a34     A7 24 02 AB |  if_e	rdlong	local04, fp
19a38     14 4E 85 A1 |  if_e	sub	fp, #20
19a3c     12 23 02 A6 |  if_e	mov	local03, local04
19a40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19a44     2C 00 90 5D |  if_ne	jmp	#LR__2131
19a48     00 1E 06 F6 | 	mov	local01, #0
19a4c     A7 12 02 FB | 	rdlong	arg01, fp
19a50     0C 4E 05 F1 | 	add	fp, #12
19a54     A7 14 02 FB | 	rdlong	arg02, fp
19a58     0C 4E 85 F1 | 	sub	fp, #12
19a5c     01 16 66 F6 | 	neg	arg03, #1
19a60     10 AD B0 FD | 	call	#__system___float_cmp
19a64     01 FA 55 F2 | 	cmps	result1, #1 wc
19a68     00 1E 26 36 |  if_ae	not	local01, #0
19a6c     A7 1E 62 FC | 	wrlong	local01, fp
19a70     C8 03 90 FD | 	jmp	#LR__2143
19a74                 | LR__2131
19a74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
19a74     08 4E 05 F1 | 	add	fp, #8
19a78     A7 1E 02 FB | 	rdlong	local01, fp
19a7c     08 4E 85 F1 | 	sub	fp, #8
19a80     1E 1E 0E F2 | 	cmp	local01, #30 wz
19a84     14 4E 05 A1 |  if_e	add	fp, #20
19a88     A7 24 02 AB |  if_e	rdlong	local04, fp
19a8c     14 4E 85 A1 |  if_e	sub	fp, #20
19a90     12 23 02 A6 |  if_e	mov	local03, local04
19a94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19a98     48 00 90 5D |  if_ne	jmp	#LR__2132
19a9c     00 1E 06 F6 | 	mov	local01, #0
19aa0     A7 20 02 FB | 	rdlong	local02, fp
19aa4     0C 4E 05 F1 | 	add	fp, #12
19aa8     A7 12 02 FB | 	rdlong	arg01, fp
19aac     0C 4E 85 F1 | 	sub	fp, #12
19ab0     09 13 52 F6 | 	abs	arg01, arg01 wc
19ab4     1F 26 C6 C9 |  if_b	decod	local05, #31
19ab8     00 26 06 36 |  if_ae	mov	local05, #0
19abc     7C A4 B0 FD | 	call	#__system___float_fromuns
19ac0     13 FB 61 F5 | 	xor	result1, local05
19ac4     FD 14 02 F6 | 	mov	arg02, result1
19ac8     10 13 02 F6 | 	mov	arg01, local02
19acc     01 16 66 F6 | 	neg	arg03, #1
19ad0     A0 AC B0 FD | 	call	#__system___float_cmp
19ad4     01 FA 55 F2 | 	cmps	result1, #1 wc
19ad8     00 1E 26 36 |  if_ae	not	local01, #0
19adc     A7 1E 62 FC | 	wrlong	local01, fp
19ae0     58 03 90 FD | 	jmp	#LR__2143
19ae4                 | LR__2132
19ae4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
19ae4     08 4E 05 F1 | 	add	fp, #8
19ae8     A7 1E 02 FB | 	rdlong	local01, fp
19aec     08 4E 85 F1 | 	sub	fp, #8
19af0     1E 1E 0E F2 | 	cmp	local01, #30 wz
19af4     14 4E 05 A1 |  if_e	add	fp, #20
19af8     A7 24 02 AB |  if_e	rdlong	local04, fp
19afc     14 4E 85 A1 |  if_e	sub	fp, #20
19b00     12 23 02 A6 |  if_e	mov	local03, local04
19b04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19b08     38 00 90 5D |  if_ne	jmp	#LR__2133
19b0c     00 1E 06 F6 | 	mov	local01, #0
19b10     A7 20 02 FB | 	rdlong	local02, fp
19b14     0C 4E 05 F1 | 	add	fp, #12
19b18     A7 12 02 FB | 	rdlong	arg01, fp
19b1c     0C 4E 85 F1 | 	sub	fp, #12
19b20     18 A4 B0 FD | 	call	#__system___float_fromuns
19b24     FD 14 02 F6 | 	mov	arg02, result1
19b28     10 13 02 F6 | 	mov	arg01, local02
19b2c     01 16 66 F6 | 	neg	arg03, #1
19b30     40 AC B0 FD | 	call	#__system___float_cmp
19b34     01 FA 55 F2 | 	cmps	result1, #1 wc
19b38     00 1E 26 36 |  if_ae	not	local01, #0
19b3c     A7 1E 62 FC | 	wrlong	local01, fp
19b40     F8 02 90 FD | 	jmp	#LR__2143
19b44                 | LR__2133
19b44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
19b44     08 4E 05 F1 | 	add	fp, #8
19b48     A7 1E 02 FB | 	rdlong	local01, fp
19b4c     08 4E 85 F1 | 	sub	fp, #8
19b50     1C 1E 0E F2 | 	cmp	local01, #28 wz
19b54     14 4E 05 A1 |  if_e	add	fp, #20
19b58     A7 24 02 AB |  if_e	rdlong	local04, fp
19b5c     14 4E 85 A1 |  if_e	sub	fp, #20
19b60     12 23 02 A6 |  if_e	mov	local03, local04
19b64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19b68     44 00 90 5D |  if_ne	jmp	#LR__2134
19b6c     00 1E 06 F6 | 	mov	local01, #0
19b70     A7 12 02 FB | 	rdlong	arg01, fp
19b74     09 13 52 F6 | 	abs	arg01, arg01 wc
19b78     1F 26 C6 C9 |  if_b	decod	local05, #31
19b7c     00 26 06 36 |  if_ae	mov	local05, #0
19b80     B8 A3 B0 FD | 	call	#__system___float_fromuns
19b84     13 FB 61 F5 | 	xor	result1, local05
19b88     FD 12 02 F6 | 	mov	arg01, result1
19b8c     0C 4E 05 F1 | 	add	fp, #12
19b90     A7 14 02 FB | 	rdlong	arg02, fp
19b94     0C 4E 85 F1 | 	sub	fp, #12
19b98     01 16 66 F6 | 	neg	arg03, #1
19b9c     D4 AB B0 FD | 	call	#__system___float_cmp
19ba0     01 FA 55 F2 | 	cmps	result1, #1 wc
19ba4     00 1E 26 36 |  if_ae	not	local01, #0
19ba8     A7 1E 62 FC | 	wrlong	local01, fp
19bac     8C 02 90 FD | 	jmp	#LR__2143
19bb0                 | LR__2134
19bb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
19bb0     08 4E 05 F1 | 	add	fp, #8
19bb4     A7 1E 02 FB | 	rdlong	local01, fp
19bb8     08 4E 85 F1 | 	sub	fp, #8
19bbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
19bc0     14 4E 05 A1 |  if_e	add	fp, #20
19bc4     A7 24 02 AB |  if_e	rdlong	local04, fp
19bc8     14 4E 85 A1 |  if_e	sub	fp, #20
19bcc     12 23 02 A6 |  if_e	mov	local03, local04
19bd0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19bd4     24 00 90 5D |  if_ne	jmp	#LR__2135
19bd8     00 1E 06 F6 | 	mov	local01, #0
19bdc     A7 20 02 FB | 	rdlong	local02, fp
19be0     0C 4E 05 F1 | 	add	fp, #12
19be4     A7 22 02 FB | 	rdlong	local03, fp
19be8     0C 4E 85 F1 | 	sub	fp, #12
19bec     11 21 5A F2 | 	cmps	local02, local03 wcz
19bf0     01 1E 66 16 |  if_a	neg	local01, #1
19bf4     A7 1E 62 FC | 	wrlong	local01, fp
19bf8     40 02 90 FD | 	jmp	#LR__2143
19bfc                 | LR__2135
19bfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
19bfc     08 4E 05 F1 | 	add	fp, #8
19c00     A7 1E 02 FB | 	rdlong	local01, fp
19c04     08 4E 85 F1 | 	sub	fp, #8
19c08     1C 1E 0E F2 | 	cmp	local01, #28 wz
19c0c     14 4E 05 A1 |  if_e	add	fp, #20
19c10     A7 24 02 AB |  if_e	rdlong	local04, fp
19c14     14 4E 85 A1 |  if_e	sub	fp, #20
19c18     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19c1c     24 00 90 5D |  if_ne	jmp	#LR__2136
19c20     00 1E 06 F6 | 	mov	local01, #0
19c24     A7 20 02 FB | 	rdlong	local02, fp
19c28     0C 4E 05 F1 | 	add	fp, #12
19c2c     A7 22 02 FB | 	rdlong	local03, fp
19c30     0C 4E 85 F1 | 	sub	fp, #12
19c34     11 21 5A F2 | 	cmps	local02, local03 wcz
19c38     01 1E 66 16 |  if_a	neg	local01, #1
19c3c     A7 1E 62 FC | 	wrlong	local01, fp
19c40     F8 01 90 FD | 	jmp	#LR__2143
19c44                 | LR__2136
19c44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
19c44     08 4E 05 F1 | 	add	fp, #8
19c48     A7 1E 02 FB | 	rdlong	local01, fp
19c4c     08 4E 85 F1 | 	sub	fp, #8
19c50     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c54     14 4E 05 A1 |  if_e	add	fp, #20
19c58     A7 22 02 AB |  if_e	rdlong	local03, fp
19c5c     14 4E 85 A1 |  if_e	sub	fp, #20
19c60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19c64     34 00 90 5D |  if_ne	jmp	#LR__2137
19c68     00 1E 06 F6 | 	mov	local01, #0
19c6c     A7 12 02 FB | 	rdlong	arg01, fp
19c70     C8 A2 B0 FD | 	call	#__system___float_fromuns
19c74     FD 12 02 F6 | 	mov	arg01, result1
19c78     0C 4E 05 F1 | 	add	fp, #12
19c7c     A7 14 02 FB | 	rdlong	arg02, fp
19c80     0C 4E 85 F1 | 	sub	fp, #12
19c84     01 16 66 F6 | 	neg	arg03, #1
19c88     E8 AA B0 FD | 	call	#__system___float_cmp
19c8c     01 FA 55 F2 | 	cmps	result1, #1 wc
19c90     00 1E 26 36 |  if_ae	not	local01, #0
19c94     A7 1E 62 FC | 	wrlong	local01, fp
19c98     A0 01 90 FD | 	jmp	#LR__2143
19c9c                 | LR__2137
19c9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
19c9c     08 4E 05 F1 | 	add	fp, #8
19ca0     A7 1E 02 FB | 	rdlong	local01, fp
19ca4     08 4E 85 F1 | 	sub	fp, #8
19ca8     1D 1E 0E F2 | 	cmp	local01, #29 wz
19cac     14 4E 05 A1 |  if_e	add	fp, #20
19cb0     A7 22 02 AB |  if_e	rdlong	local03, fp
19cb4     14 4E 85 A1 |  if_e	sub	fp, #20
19cb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19cbc     24 00 90 5D |  if_ne	jmp	#LR__2138
19cc0     00 1E 06 F6 | 	mov	local01, #0
19cc4     A7 20 02 FB | 	rdlong	local02, fp
19cc8     0C 4E 05 F1 | 	add	fp, #12
19ccc     A7 22 02 FB | 	rdlong	local03, fp
19cd0     0C 4E 85 F1 | 	sub	fp, #12
19cd4     11 21 5A F2 | 	cmps	local02, local03 wcz
19cd8     01 1E 66 16 |  if_a	neg	local01, #1
19cdc     A7 1E 62 FC | 	wrlong	local01, fp
19ce0     58 01 90 FD | 	jmp	#LR__2143
19ce4                 | LR__2138
19ce4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
19ce4     08 4E 05 F1 | 	add	fp, #8
19ce8     A7 1E 02 FB | 	rdlong	local01, fp
19cec     08 4E 85 F1 | 	sub	fp, #8
19cf0     1D 1E 0E F2 | 	cmp	local01, #29 wz
19cf4     14 4E 05 A1 |  if_e	add	fp, #20
19cf8     A7 22 02 AB |  if_e	rdlong	local03, fp
19cfc     14 4E 85 A1 |  if_e	sub	fp, #20
19d00     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19d04     24 00 90 5D |  if_ne	jmp	#LR__2139
19d08     00 1E 06 F6 | 	mov	local01, #0
19d0c     A7 20 02 FB | 	rdlong	local02, fp
19d10     0C 4E 05 F1 | 	add	fp, #12
19d14     A7 22 02 FB | 	rdlong	local03, fp
19d18     0C 4E 85 F1 | 	sub	fp, #12
19d1c     11 21 1A F2 | 	cmp	local02, local03 wcz
19d20     01 1E 66 16 |  if_a	neg	local01, #1
19d24     A7 1E 62 FC | 	wrlong	local01, fp
19d28     10 01 90 FD | 	jmp	#LR__2143
19d2c                 | LR__2139
19d2c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
19d2c     08 4E 05 F1 | 	add	fp, #8
19d30     A7 1E 02 FB | 	rdlong	local01, fp
19d34     08 4E 85 F1 | 	sub	fp, #8
19d38     2B 1E 0E F2 | 	cmp	local01, #43 wz
19d3c     14 4E 05 A1 |  if_e	add	fp, #20
19d40     A7 22 02 AB |  if_e	rdlong	local03, fp
19d44     14 4E 85 A1 |  if_e	sub	fp, #20
19d48     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19d4c     30 00 90 5D |  if_ne	jmp	#LR__2140
19d50     00 1E 06 F6 | 	mov	local01, #0
19d54     A7 12 02 FB | 	rdlong	arg01, fp
19d58     F4 1B BF FD | 	call	#_convertstring
19d5c     FD 12 02 F6 | 	mov	arg01, result1
19d60     0C 4E 05 F1 | 	add	fp, #12
19d64     A7 14 02 FB | 	rdlong	arg02, fp
19d68     0C 4E 85 F1 | 	sub	fp, #12
19d6c     3C 78 B0 FD | 	call	#__system___string_cmp
19d70     01 FA 55 F2 | 	cmps	result1, #1 wc
19d74     00 1E 26 36 |  if_ae	not	local01, #0
19d78     A7 1E 62 FC | 	wrlong	local01, fp
19d7c     BC 00 90 FD | 	jmp	#LR__2143
19d80                 | LR__2140
19d80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
19d80     08 4E 05 F1 | 	add	fp, #8
19d84     A7 1E 02 FB | 	rdlong	local01, fp
19d88     08 4E 85 F1 | 	sub	fp, #8
19d8c     1F 1E 0E F2 | 	cmp	local01, #31 wz
19d90     14 4E 05 A1 |  if_e	add	fp, #20
19d94     A7 22 02 AB |  if_e	rdlong	local03, fp
19d98     14 4E 85 A1 |  if_e	sub	fp, #20
19d9c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19da0     34 00 90 5D |  if_ne	jmp	#LR__2141
19da4     00 1E 06 F6 | 	mov	local01, #0
19da8     A7 20 02 FB | 	rdlong	local02, fp
19dac     0C 4E 05 F1 | 	add	fp, #12
19db0     A7 12 02 FB | 	rdlong	arg01, fp
19db4     0C 4E 85 F1 | 	sub	fp, #12
19db8     94 1B BF FD | 	call	#_convertstring
19dbc     FD 14 02 F6 | 	mov	arg02, result1
19dc0     10 13 02 F6 | 	mov	arg01, local02
19dc4     E4 77 B0 FD | 	call	#__system___string_cmp
19dc8     01 FA 55 F2 | 	cmps	result1, #1 wc
19dcc     00 1E 26 36 |  if_ae	not	local01, #0
19dd0     A7 1E 62 FC | 	wrlong	local01, fp
19dd4     64 00 90 FD | 	jmp	#LR__2143
19dd8                 | LR__2141
19dd8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
19dd8     08 4E 05 F1 | 	add	fp, #8
19ddc     A7 1E 02 FB | 	rdlong	local01, fp
19de0     08 4E 85 F1 | 	sub	fp, #8
19de4     2B 1E 0E F2 | 	cmp	local01, #43 wz
19de8     14 4E 05 A1 |  if_e	add	fp, #20
19dec     A7 22 02 AB |  if_e	rdlong	local03, fp
19df0     14 4E 85 A1 |  if_e	sub	fp, #20
19df4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19df8     3C 00 90 5D |  if_ne	jmp	#LR__2142
19dfc     00 1E 06 F6 | 	mov	local01, #0
19e00     A7 12 02 FB | 	rdlong	arg01, fp
19e04     48 1B BF FD | 	call	#_convertstring
19e08     FD 20 02 F6 | 	mov	local02, result1
19e0c     0C 4E 05 F1 | 	add	fp, #12
19e10     A7 12 02 FB | 	rdlong	arg01, fp
19e14     0C 4E 85 F1 | 	sub	fp, #12
19e18     34 1B BF FD | 	call	#_convertstring
19e1c     FD 14 02 F6 | 	mov	arg02, result1
19e20     10 13 02 F6 | 	mov	arg01, local02
19e24     84 77 B0 FD | 	call	#__system___string_cmp
19e28     01 FA 55 F2 | 	cmps	result1, #1 wc
19e2c     00 1E 26 36 |  if_ae	not	local01, #0
19e30     A7 1E 62 FC | 	wrlong	local01, fp
19e34     04 00 90 FD | 	jmp	#LR__2143
19e38                 | LR__2142
19e38     A7 00 68 FC | 	wrlong	#0, fp
19e3c                 | LR__2143
19e3c     08 4E 05 F1 | 	add	fp, #8
19e40     A7 38 68 FC | 	wrlong	#28, fp
19e44     08 4E 85 F1 | 	sub	fp, #8
19e48     A7 12 02 F6 | 	mov	arg01, fp
19e4c     20 1A BF FD | 	call	#_push
19e50     A7 F0 03 F6 | 	mov	ptra, fp
19e54     B2 00 A0 FD | 	call	#popregs_
19e58                 | _do_gt_ret
19e58     2D 00 64 FD | 	ret
19e5c                 | 
19e5c                 | ' 
19e5c                 | ' '--------------------------------- less or equal (<=)
19e5c                 | ' 
19e5c                 | ' sub do_le
19e5c                 | _do_le
19e5c     05 4A 05 F6 | 	mov	COUNT_, #5
19e60     A8 00 A0 FD | 	call	#pushregs_
19e64     18 F0 07 F1 | 	add	ptra, #24
19e68     6C 19 BF FD | 	call	#_pop
19e6c     FD 1E 02 F6 | 	mov	local01, result1
19e70     FE 20 02 F6 | 	mov	local02, result2
19e74     FF 22 02 F6 | 	mov	local03, result3
19e78     0C 4E 05 F1 | 	add	fp, #12
19e7c     A7 1E 62 FC | 	wrlong	local01, fp
19e80     04 4E 05 F1 | 	add	fp, #4
19e84     A7 20 62 FC | 	wrlong	local02, fp
19e88     04 4E 05 F1 | 	add	fp, #4
19e8c     A7 22 62 FC | 	wrlong	local03, fp
19e90     14 4E 85 F1 | 	sub	fp, #20
19e94     40 19 BF FD | 	call	#_pop
19e98     FF 22 02 F6 | 	mov	local03, result3
19e9c     A7 FA 61 FC | 	wrlong	result1, fp
19ea0     04 4E 05 F1 | 	add	fp, #4
19ea4     A7 FC 61 FC | 	wrlong	result2, fp
19ea8     04 4E 05 F1 | 	add	fp, #4
19eac     A7 22 62 FC | 	wrlong	local03, fp
19eb0                 | ' 
19eb0                 | ' t2=pop()
19eb0                 | ' t1=pop()
19eb0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
19eb0     08 4E 85 F1 | 	sub	fp, #8
19eb4     1F 22 0E F2 | 	cmp	local03, #31 wz
19eb8     14 4E 05 A1 |  if_e	add	fp, #20
19ebc     A7 24 02 AB |  if_e	rdlong	local04, fp
19ec0     14 4E 85 A1 |  if_e	sub	fp, #20
19ec4     12 23 02 A6 |  if_e	mov	local03, local04
19ec8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19ecc     28 00 90 5D |  if_ne	jmp	#LR__2150
19ed0     00 1E 06 F6 | 	mov	local01, #0
19ed4     A7 12 02 FB | 	rdlong	arg01, fp
19ed8     0C 4E 05 F1 | 	add	fp, #12
19edc     A7 14 02 FB | 	rdlong	arg02, fp
19ee0     0C 4E 85 F1 | 	sub	fp, #12
19ee4     C4 76 B0 FD | 	call	#__system___string_cmp
19ee8     01 FA 55 F2 | 	cmps	result1, #1 wc
19eec     00 1E 26 C6 |  if_b	not	local01, #0
19ef0     A7 1E 62 FC | 	wrlong	local01, fp
19ef4     1C 04 90 FD | 	jmp	#LR__2163
19ef8                 | LR__2150
19ef8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
19ef8     08 4E 05 F1 | 	add	fp, #8
19efc     A7 1E 02 FB | 	rdlong	local01, fp
19f00     08 4E 85 F1 | 	sub	fp, #8
19f04     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f08     14 4E 05 A1 |  if_e	add	fp, #20
19f0c     A7 24 02 AB |  if_e	rdlong	local04, fp
19f10     14 4E 85 A1 |  if_e	sub	fp, #20
19f14     12 23 02 A6 |  if_e	mov	local03, local04
19f18     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19f1c     2C 00 90 5D |  if_ne	jmp	#LR__2151
19f20     00 1E 06 F6 | 	mov	local01, #0
19f24     A7 12 02 FB | 	rdlong	arg01, fp
19f28     0C 4E 05 F1 | 	add	fp, #12
19f2c     A7 14 02 FB | 	rdlong	arg02, fp
19f30     0C 4E 85 F1 | 	sub	fp, #12
19f34     01 16 06 F6 | 	mov	arg03, #1
19f38     38 A8 B0 FD | 	call	#__system___float_cmp
19f3c     01 FA 55 F2 | 	cmps	result1, #1 wc
19f40     00 1E 26 C6 |  if_b	not	local01, #0
19f44     A7 1E 62 FC | 	wrlong	local01, fp
19f48     C8 03 90 FD | 	jmp	#LR__2163
19f4c                 | LR__2151
19f4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
19f4c     08 4E 05 F1 | 	add	fp, #8
19f50     A7 1E 02 FB | 	rdlong	local01, fp
19f54     08 4E 85 F1 | 	sub	fp, #8
19f58     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f5c     14 4E 05 A1 |  if_e	add	fp, #20
19f60     A7 24 02 AB |  if_e	rdlong	local04, fp
19f64     14 4E 85 A1 |  if_e	sub	fp, #20
19f68     12 23 02 A6 |  if_e	mov	local03, local04
19f6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19f70     48 00 90 5D |  if_ne	jmp	#LR__2152
19f74     00 1E 06 F6 | 	mov	local01, #0
19f78     A7 20 02 FB | 	rdlong	local02, fp
19f7c     0C 4E 05 F1 | 	add	fp, #12
19f80     A7 12 02 FB | 	rdlong	arg01, fp
19f84     0C 4E 85 F1 | 	sub	fp, #12
19f88     09 13 52 F6 | 	abs	arg01, arg01 wc
19f8c     1F 26 C6 C9 |  if_b	decod	local05, #31
19f90     00 26 06 36 |  if_ae	mov	local05, #0
19f94     A4 9F B0 FD | 	call	#__system___float_fromuns
19f98     13 FB 61 F5 | 	xor	result1, local05
19f9c     FD 14 02 F6 | 	mov	arg02, result1
19fa0     10 13 02 F6 | 	mov	arg01, local02
19fa4     01 16 06 F6 | 	mov	arg03, #1
19fa8     C8 A7 B0 FD | 	call	#__system___float_cmp
19fac     01 FA 55 F2 | 	cmps	result1, #1 wc
19fb0     00 1E 26 C6 |  if_b	not	local01, #0
19fb4     A7 1E 62 FC | 	wrlong	local01, fp
19fb8     58 03 90 FD | 	jmp	#LR__2163
19fbc                 | LR__2152
19fbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
19fbc     08 4E 05 F1 | 	add	fp, #8
19fc0     A7 1E 02 FB | 	rdlong	local01, fp
19fc4     08 4E 85 F1 | 	sub	fp, #8
19fc8     1E 1E 0E F2 | 	cmp	local01, #30 wz
19fcc     14 4E 05 A1 |  if_e	add	fp, #20
19fd0     A7 24 02 AB |  if_e	rdlong	local04, fp
19fd4     14 4E 85 A1 |  if_e	sub	fp, #20
19fd8     12 23 02 A6 |  if_e	mov	local03, local04
19fdc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19fe0     38 00 90 5D |  if_ne	jmp	#LR__2153
19fe4     00 1E 06 F6 | 	mov	local01, #0
19fe8     A7 20 02 FB | 	rdlong	local02, fp
19fec     0C 4E 05 F1 | 	add	fp, #12
19ff0     A7 12 02 FB | 	rdlong	arg01, fp
19ff4     0C 4E 85 F1 | 	sub	fp, #12
19ff8     40 9F B0 FD | 	call	#__system___float_fromuns
19ffc     FD 14 02 F6 | 	mov	arg02, result1
1a000     10 13 02 F6 | 	mov	arg01, local02
1a004     01 16 06 F6 | 	mov	arg03, #1
1a008     68 A7 B0 FD | 	call	#__system___float_cmp
1a00c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a010     00 1E 26 C6 |  if_b	not	local01, #0
1a014     A7 1E 62 FC | 	wrlong	local01, fp
1a018     F8 02 90 FD | 	jmp	#LR__2163
1a01c                 | LR__2153
1a01c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1a01c     08 4E 05 F1 | 	add	fp, #8
1a020     A7 1E 02 FB | 	rdlong	local01, fp
1a024     08 4E 85 F1 | 	sub	fp, #8
1a028     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a02c     14 4E 05 A1 |  if_e	add	fp, #20
1a030     A7 24 02 AB |  if_e	rdlong	local04, fp
1a034     14 4E 85 A1 |  if_e	sub	fp, #20
1a038     12 23 02 A6 |  if_e	mov	local03, local04
1a03c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a040     44 00 90 5D |  if_ne	jmp	#LR__2154
1a044     00 1E 06 F6 | 	mov	local01, #0
1a048     A7 12 02 FB | 	rdlong	arg01, fp
1a04c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a050     1F 26 C6 C9 |  if_b	decod	local05, #31
1a054     00 26 06 36 |  if_ae	mov	local05, #0
1a058     E0 9E B0 FD | 	call	#__system___float_fromuns
1a05c     13 FB 61 F5 | 	xor	result1, local05
1a060     FD 12 02 F6 | 	mov	arg01, result1
1a064     0C 4E 05 F1 | 	add	fp, #12
1a068     A7 14 02 FB | 	rdlong	arg02, fp
1a06c     0C 4E 85 F1 | 	sub	fp, #12
1a070     01 16 06 F6 | 	mov	arg03, #1
1a074     FC A6 B0 FD | 	call	#__system___float_cmp
1a078     01 FA 55 F2 | 	cmps	result1, #1 wc
1a07c     00 1E 26 C6 |  if_b	not	local01, #0
1a080     A7 1E 62 FC | 	wrlong	local01, fp
1a084     8C 02 90 FD | 	jmp	#LR__2163
1a088                 | LR__2154
1a088                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1a088     08 4E 05 F1 | 	add	fp, #8
1a08c     A7 1E 02 FB | 	rdlong	local01, fp
1a090     08 4E 85 F1 | 	sub	fp, #8
1a094     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a098     14 4E 05 A1 |  if_e	add	fp, #20
1a09c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a0a0     14 4E 85 A1 |  if_e	sub	fp, #20
1a0a4     12 23 02 A6 |  if_e	mov	local03, local04
1a0a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a0ac     24 00 90 5D |  if_ne	jmp	#LR__2155
1a0b0     00 1E 06 F6 | 	mov	local01, #0
1a0b4     A7 20 02 FB | 	rdlong	local02, fp
1a0b8     0C 4E 05 F1 | 	add	fp, #12
1a0bc     A7 22 02 FB | 	rdlong	local03, fp
1a0c0     0C 4E 85 F1 | 	sub	fp, #12
1a0c4     11 21 5A F2 | 	cmps	local02, local03 wcz
1a0c8     01 1E 66 E6 |  if_be	neg	local01, #1
1a0cc     A7 1E 62 FC | 	wrlong	local01, fp
1a0d0     40 02 90 FD | 	jmp	#LR__2163
1a0d4                 | LR__2155
1a0d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1a0d4     08 4E 05 F1 | 	add	fp, #8
1a0d8     A7 1E 02 FB | 	rdlong	local01, fp
1a0dc     08 4E 85 F1 | 	sub	fp, #8
1a0e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a0e4     14 4E 05 A1 |  if_e	add	fp, #20
1a0e8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a0ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a0f0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a0f4     24 00 90 5D |  if_ne	jmp	#LR__2156
1a0f8     00 1E 06 F6 | 	mov	local01, #0
1a0fc     A7 20 02 FB | 	rdlong	local02, fp
1a100     0C 4E 05 F1 | 	add	fp, #12
1a104     A7 22 02 FB | 	rdlong	local03, fp
1a108     0C 4E 85 F1 | 	sub	fp, #12
1a10c     11 21 5A F2 | 	cmps	local02, local03 wcz
1a110     01 1E 66 E6 |  if_be	neg	local01, #1
1a114     A7 1E 62 FC | 	wrlong	local01, fp
1a118     F8 01 90 FD | 	jmp	#LR__2163
1a11c                 | LR__2156
1a11c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1a11c     08 4E 05 F1 | 	add	fp, #8
1a120     A7 1E 02 FB | 	rdlong	local01, fp
1a124     08 4E 85 F1 | 	sub	fp, #8
1a128     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a12c     14 4E 05 A1 |  if_e	add	fp, #20
1a130     A7 22 02 AB |  if_e	rdlong	local03, fp
1a134     14 4E 85 A1 |  if_e	sub	fp, #20
1a138     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a13c     34 00 90 5D |  if_ne	jmp	#LR__2157
1a140     00 1E 06 F6 | 	mov	local01, #0
1a144     A7 12 02 FB | 	rdlong	arg01, fp
1a148     F0 9D B0 FD | 	call	#__system___float_fromuns
1a14c     FD 12 02 F6 | 	mov	arg01, result1
1a150     0C 4E 05 F1 | 	add	fp, #12
1a154     A7 14 02 FB | 	rdlong	arg02, fp
1a158     0C 4E 85 F1 | 	sub	fp, #12
1a15c     01 16 06 F6 | 	mov	arg03, #1
1a160     10 A6 B0 FD | 	call	#__system___float_cmp
1a164     01 FA 55 F2 | 	cmps	result1, #1 wc
1a168     00 1E 26 C6 |  if_b	not	local01, #0
1a16c     A7 1E 62 FC | 	wrlong	local01, fp
1a170     A0 01 90 FD | 	jmp	#LR__2163
1a174                 | LR__2157
1a174                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1a174     08 4E 05 F1 | 	add	fp, #8
1a178     A7 1E 02 FB | 	rdlong	local01, fp
1a17c     08 4E 85 F1 | 	sub	fp, #8
1a180     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a184     14 4E 05 A1 |  if_e	add	fp, #20
1a188     A7 22 02 AB |  if_e	rdlong	local03, fp
1a18c     14 4E 85 A1 |  if_e	sub	fp, #20
1a190     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a194     24 00 90 5D |  if_ne	jmp	#LR__2158
1a198     00 1E 06 F6 | 	mov	local01, #0
1a19c     A7 20 02 FB | 	rdlong	local02, fp
1a1a0     0C 4E 05 F1 | 	add	fp, #12
1a1a4     A7 22 02 FB | 	rdlong	local03, fp
1a1a8     0C 4E 85 F1 | 	sub	fp, #12
1a1ac     11 21 5A F2 | 	cmps	local02, local03 wcz
1a1b0     01 1E 66 E6 |  if_be	neg	local01, #1
1a1b4     A7 1E 62 FC | 	wrlong	local01, fp
1a1b8     58 01 90 FD | 	jmp	#LR__2163
1a1bc                 | LR__2158
1a1bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1a1bc     08 4E 05 F1 | 	add	fp, #8
1a1c0     A7 1E 02 FB | 	rdlong	local01, fp
1a1c4     08 4E 85 F1 | 	sub	fp, #8
1a1c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a1cc     14 4E 05 A1 |  if_e	add	fp, #20
1a1d0     A7 22 02 AB |  if_e	rdlong	local03, fp
1a1d4     14 4E 85 A1 |  if_e	sub	fp, #20
1a1d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a1dc     24 00 90 5D |  if_ne	jmp	#LR__2159
1a1e0     00 1E 06 F6 | 	mov	local01, #0
1a1e4     A7 20 02 FB | 	rdlong	local02, fp
1a1e8     0C 4E 05 F1 | 	add	fp, #12
1a1ec     A7 22 02 FB | 	rdlong	local03, fp
1a1f0     0C 4E 85 F1 | 	sub	fp, #12
1a1f4     11 21 1A F2 | 	cmp	local02, local03 wcz
1a1f8     01 1E 66 E6 |  if_be	neg	local01, #1
1a1fc     A7 1E 62 FC | 	wrlong	local01, fp
1a200     10 01 90 FD | 	jmp	#LR__2163
1a204                 | LR__2159
1a204                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1a204     08 4E 05 F1 | 	add	fp, #8
1a208     A7 1E 02 FB | 	rdlong	local01, fp
1a20c     08 4E 85 F1 | 	sub	fp, #8
1a210     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a214     14 4E 05 A1 |  if_e	add	fp, #20
1a218     A7 22 02 AB |  if_e	rdlong	local03, fp
1a21c     14 4E 85 A1 |  if_e	sub	fp, #20
1a220     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a224     30 00 90 5D |  if_ne	jmp	#LR__2160
1a228     00 1E 06 F6 | 	mov	local01, #0
1a22c     A7 12 02 FB | 	rdlong	arg01, fp
1a230     1C 17 BF FD | 	call	#_convertstring
1a234     FD 12 02 F6 | 	mov	arg01, result1
1a238     0C 4E 05 F1 | 	add	fp, #12
1a23c     A7 14 02 FB | 	rdlong	arg02, fp
1a240     0C 4E 85 F1 | 	sub	fp, #12
1a244     64 73 B0 FD | 	call	#__system___string_cmp
1a248     01 FA 55 F2 | 	cmps	result1, #1 wc
1a24c     00 1E 26 C6 |  if_b	not	local01, #0
1a250     A7 1E 62 FC | 	wrlong	local01, fp
1a254     BC 00 90 FD | 	jmp	#LR__2163
1a258                 | LR__2160
1a258                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1a258     08 4E 05 F1 | 	add	fp, #8
1a25c     A7 1E 02 FB | 	rdlong	local01, fp
1a260     08 4E 85 F1 | 	sub	fp, #8
1a264     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a268     14 4E 05 A1 |  if_e	add	fp, #20
1a26c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a270     14 4E 85 A1 |  if_e	sub	fp, #20
1a274     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a278     34 00 90 5D |  if_ne	jmp	#LR__2161
1a27c     00 1E 06 F6 | 	mov	local01, #0
1a280     A7 20 02 FB | 	rdlong	local02, fp
1a284     0C 4E 05 F1 | 	add	fp, #12
1a288     A7 12 02 FB | 	rdlong	arg01, fp
1a28c     0C 4E 85 F1 | 	sub	fp, #12
1a290     BC 16 BF FD | 	call	#_convertstring
1a294     FD 14 02 F6 | 	mov	arg02, result1
1a298     10 13 02 F6 | 	mov	arg01, local02
1a29c     0C 73 B0 FD | 	call	#__system___string_cmp
1a2a0     01 FA 55 F2 | 	cmps	result1, #1 wc
1a2a4     00 1E 26 C6 |  if_b	not	local01, #0
1a2a8     A7 1E 62 FC | 	wrlong	local01, fp
1a2ac     64 00 90 FD | 	jmp	#LR__2163
1a2b0                 | LR__2161
1a2b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1a2b0     08 4E 05 F1 | 	add	fp, #8
1a2b4     A7 1E 02 FB | 	rdlong	local01, fp
1a2b8     08 4E 85 F1 | 	sub	fp, #8
1a2bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a2c0     14 4E 05 A1 |  if_e	add	fp, #20
1a2c4     A7 22 02 AB |  if_e	rdlong	local03, fp
1a2c8     14 4E 85 A1 |  if_e	sub	fp, #20
1a2cc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a2d0     3C 00 90 5D |  if_ne	jmp	#LR__2162
1a2d4     00 1E 06 F6 | 	mov	local01, #0
1a2d8     A7 12 02 FB | 	rdlong	arg01, fp
1a2dc     70 16 BF FD | 	call	#_convertstring
1a2e0     FD 20 02 F6 | 	mov	local02, result1
1a2e4     0C 4E 05 F1 | 	add	fp, #12
1a2e8     A7 12 02 FB | 	rdlong	arg01, fp
1a2ec     0C 4E 85 F1 | 	sub	fp, #12
1a2f0     5C 16 BF FD | 	call	#_convertstring
1a2f4     FD 14 02 F6 | 	mov	arg02, result1
1a2f8     10 13 02 F6 | 	mov	arg01, local02
1a2fc     AC 72 B0 FD | 	call	#__system___string_cmp
1a300     01 FA 55 F2 | 	cmps	result1, #1 wc
1a304     00 1E 26 C6 |  if_b	not	local01, #0
1a308     A7 1E 62 FC | 	wrlong	local01, fp
1a30c     04 00 90 FD | 	jmp	#LR__2163
1a310                 | LR__2162
1a310     A7 00 68 FC | 	wrlong	#0, fp
1a314                 | LR__2163
1a314     08 4E 05 F1 | 	add	fp, #8
1a318     A7 38 68 FC | 	wrlong	#28, fp
1a31c     08 4E 85 F1 | 	sub	fp, #8
1a320     A7 12 02 F6 | 	mov	arg01, fp
1a324     48 15 BF FD | 	call	#_push
1a328     A7 F0 03 F6 | 	mov	ptra, fp
1a32c     B2 00 A0 FD | 	call	#popregs_
1a330                 | _do_le_ret
1a330     2D 00 64 FD | 	ret
1a334                 | 
1a334                 | ' 
1a334                 | ' '--------------------------------- less than (<)
1a334                 | ' 
1a334                 | ' sub do_lt
1a334                 | _do_lt
1a334     05 4A 05 F6 | 	mov	COUNT_, #5
1a338     A8 00 A0 FD | 	call	#pushregs_
1a33c     18 F0 07 F1 | 	add	ptra, #24
1a340     94 14 BF FD | 	call	#_pop
1a344     FD 1E 02 F6 | 	mov	local01, result1
1a348     FE 20 02 F6 | 	mov	local02, result2
1a34c     FF 22 02 F6 | 	mov	local03, result3
1a350     0C 4E 05 F1 | 	add	fp, #12
1a354     A7 1E 62 FC | 	wrlong	local01, fp
1a358     04 4E 05 F1 | 	add	fp, #4
1a35c     A7 20 62 FC | 	wrlong	local02, fp
1a360     04 4E 05 F1 | 	add	fp, #4
1a364     A7 22 62 FC | 	wrlong	local03, fp
1a368     14 4E 85 F1 | 	sub	fp, #20
1a36c     68 14 BF FD | 	call	#_pop
1a370     FF 22 02 F6 | 	mov	local03, result3
1a374     A7 FA 61 FC | 	wrlong	result1, fp
1a378     04 4E 05 F1 | 	add	fp, #4
1a37c     A7 FC 61 FC | 	wrlong	result2, fp
1a380     04 4E 05 F1 | 	add	fp, #4
1a384     A7 22 62 FC | 	wrlong	local03, fp
1a388                 | ' 
1a388                 | ' t2=pop()
1a388                 | ' t1=pop()
1a388                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1a388     08 4E 85 F1 | 	sub	fp, #8
1a38c     1F 22 0E F2 | 	cmp	local03, #31 wz
1a390     14 4E 05 A1 |  if_e	add	fp, #20
1a394     A7 24 02 AB |  if_e	rdlong	local04, fp
1a398     14 4E 85 A1 |  if_e	sub	fp, #20
1a39c     12 23 02 A6 |  if_e	mov	local03, local04
1a3a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a3a4     28 00 90 5D |  if_ne	jmp	#LR__2170
1a3a8     00 1E 06 F6 | 	mov	local01, #0
1a3ac     A7 12 02 FB | 	rdlong	arg01, fp
1a3b0     0C 4E 05 F1 | 	add	fp, #12
1a3b4     A7 14 02 FB | 	rdlong	arg02, fp
1a3b8     0C 4E 85 F1 | 	sub	fp, #12
1a3bc     EC 71 B0 FD | 	call	#__system___string_cmp
1a3c0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a3c4     00 1E 26 C6 |  if_b	not	local01, #0
1a3c8     A7 1E 62 FC | 	wrlong	local01, fp
1a3cc     0C 04 90 FD | 	jmp	#LR__2183
1a3d0                 | LR__2170
1a3d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1a3d0     08 4E 05 F1 | 	add	fp, #8
1a3d4     A7 1E 02 FB | 	rdlong	local01, fp
1a3d8     08 4E 85 F1 | 	sub	fp, #8
1a3dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a3e0     14 4E 05 A1 |  if_e	add	fp, #20
1a3e4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a3e8     14 4E 85 A1 |  if_e	sub	fp, #20
1a3ec     12 23 02 A6 |  if_e	mov	local03, local04
1a3f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a3f4     2C 00 90 5D |  if_ne	jmp	#LR__2171
1a3f8     00 1E 06 F6 | 	mov	local01, #0
1a3fc     A7 12 02 FB | 	rdlong	arg01, fp
1a400     0C 4E 05 F1 | 	add	fp, #12
1a404     A7 14 02 FB | 	rdlong	arg02, fp
1a408     0C 4E 85 F1 | 	sub	fp, #12
1a40c     01 16 06 F6 | 	mov	arg03, #1
1a410     60 A3 B0 FD | 	call	#__system___float_cmp
1a414     00 FA 55 F2 | 	cmps	result1, #0 wc
1a418     00 1E 26 C6 |  if_b	not	local01, #0
1a41c     A7 1E 62 FC | 	wrlong	local01, fp
1a420     B8 03 90 FD | 	jmp	#LR__2183
1a424                 | LR__2171
1a424                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1a424     08 4E 05 F1 | 	add	fp, #8
1a428     A7 1E 02 FB | 	rdlong	local01, fp
1a42c     08 4E 85 F1 | 	sub	fp, #8
1a430     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a434     14 4E 05 A1 |  if_e	add	fp, #20
1a438     A7 24 02 AB |  if_e	rdlong	local04, fp
1a43c     14 4E 85 A1 |  if_e	sub	fp, #20
1a440     12 23 02 A6 |  if_e	mov	local03, local04
1a444     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a448     48 00 90 5D |  if_ne	jmp	#LR__2172
1a44c     00 1E 06 F6 | 	mov	local01, #0
1a450     A7 20 02 FB | 	rdlong	local02, fp
1a454     0C 4E 05 F1 | 	add	fp, #12
1a458     A7 12 02 FB | 	rdlong	arg01, fp
1a45c     0C 4E 85 F1 | 	sub	fp, #12
1a460     09 13 52 F6 | 	abs	arg01, arg01 wc
1a464     1F 26 C6 C9 |  if_b	decod	local05, #31
1a468     00 26 06 36 |  if_ae	mov	local05, #0
1a46c     CC 9A B0 FD | 	call	#__system___float_fromuns
1a470     13 FB 61 F5 | 	xor	result1, local05
1a474     FD 14 02 F6 | 	mov	arg02, result1
1a478     10 13 02 F6 | 	mov	arg01, local02
1a47c     01 16 06 F6 | 	mov	arg03, #1
1a480     F0 A2 B0 FD | 	call	#__system___float_cmp
1a484     00 FA 55 F2 | 	cmps	result1, #0 wc
1a488     00 1E 26 C6 |  if_b	not	local01, #0
1a48c     A7 1E 62 FC | 	wrlong	local01, fp
1a490     48 03 90 FD | 	jmp	#LR__2183
1a494                 | LR__2172
1a494                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1a494     08 4E 05 F1 | 	add	fp, #8
1a498     A7 1E 02 FB | 	rdlong	local01, fp
1a49c     08 4E 85 F1 | 	sub	fp, #8
1a4a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a4a4     14 4E 05 A1 |  if_e	add	fp, #20
1a4a8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a4ac     14 4E 85 A1 |  if_e	sub	fp, #20
1a4b0     12 23 02 A6 |  if_e	mov	local03, local04
1a4b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a4b8     38 00 90 5D |  if_ne	jmp	#LR__2173
1a4bc     00 1E 06 F6 | 	mov	local01, #0
1a4c0     A7 20 02 FB | 	rdlong	local02, fp
1a4c4     0C 4E 05 F1 | 	add	fp, #12
1a4c8     A7 12 02 FB | 	rdlong	arg01, fp
1a4cc     0C 4E 85 F1 | 	sub	fp, #12
1a4d0     68 9A B0 FD | 	call	#__system___float_fromuns
1a4d4     FD 14 02 F6 | 	mov	arg02, result1
1a4d8     10 13 02 F6 | 	mov	arg01, local02
1a4dc     01 16 06 F6 | 	mov	arg03, #1
1a4e0     90 A2 B0 FD | 	call	#__system___float_cmp
1a4e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a4e8     00 1E 26 C6 |  if_b	not	local01, #0
1a4ec     A7 1E 62 FC | 	wrlong	local01, fp
1a4f0     E8 02 90 FD | 	jmp	#LR__2183
1a4f4                 | LR__2173
1a4f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1a4f4     08 4E 05 F1 | 	add	fp, #8
1a4f8     A7 1E 02 FB | 	rdlong	local01, fp
1a4fc     08 4E 85 F1 | 	sub	fp, #8
1a500     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a504     14 4E 05 A1 |  if_e	add	fp, #20
1a508     A7 24 02 AB |  if_e	rdlong	local04, fp
1a50c     14 4E 85 A1 |  if_e	sub	fp, #20
1a510     12 23 02 A6 |  if_e	mov	local03, local04
1a514     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a518     44 00 90 5D |  if_ne	jmp	#LR__2174
1a51c     00 1E 06 F6 | 	mov	local01, #0
1a520     A7 12 02 FB | 	rdlong	arg01, fp
1a524     09 13 52 F6 | 	abs	arg01, arg01 wc
1a528     1F 26 C6 C9 |  if_b	decod	local05, #31
1a52c     00 26 06 36 |  if_ae	mov	local05, #0
1a530     08 9A B0 FD | 	call	#__system___float_fromuns
1a534     13 FB 61 F5 | 	xor	result1, local05
1a538     FD 12 02 F6 | 	mov	arg01, result1
1a53c     0C 4E 05 F1 | 	add	fp, #12
1a540     A7 14 02 FB | 	rdlong	arg02, fp
1a544     0C 4E 85 F1 | 	sub	fp, #12
1a548     01 16 06 F6 | 	mov	arg03, #1
1a54c     24 A2 B0 FD | 	call	#__system___float_cmp
1a550     00 FA 55 F2 | 	cmps	result1, #0 wc
1a554     00 1E 26 C6 |  if_b	not	local01, #0
1a558     A7 1E 62 FC | 	wrlong	local01, fp
1a55c     7C 02 90 FD | 	jmp	#LR__2183
1a560                 | LR__2174
1a560                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1a560     08 4E 05 F1 | 	add	fp, #8
1a564     A7 1E 02 FB | 	rdlong	local01, fp
1a568     08 4E 85 F1 | 	sub	fp, #8
1a56c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a570     14 4E 05 A1 |  if_e	add	fp, #20
1a574     A7 24 02 AB |  if_e	rdlong	local04, fp
1a578     14 4E 85 A1 |  if_e	sub	fp, #20
1a57c     12 23 02 A6 |  if_e	mov	local03, local04
1a580     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a584     20 00 90 5D |  if_ne	jmp	#LR__2175
1a588     A7 20 02 FB | 	rdlong	local02, fp
1a58c     0C 4E 05 F1 | 	add	fp, #12
1a590     A7 22 02 FB | 	rdlong	local03, fp
1a594     0C 4E 85 F1 | 	sub	fp, #12
1a598     11 21 52 F2 | 	cmps	local02, local03 wc
1a59c     0F 1F A2 F1 | 	subx	local01, local01
1a5a0     A7 1E 62 FC | 	wrlong	local01, fp
1a5a4     34 02 90 FD | 	jmp	#LR__2183
1a5a8                 | LR__2175
1a5a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1a5a8     08 4E 05 F1 | 	add	fp, #8
1a5ac     A7 1E 02 FB | 	rdlong	local01, fp
1a5b0     08 4E 85 F1 | 	sub	fp, #8
1a5b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a5b8     14 4E 05 A1 |  if_e	add	fp, #20
1a5bc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a5c0     14 4E 85 A1 |  if_e	sub	fp, #20
1a5c4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a5c8     20 00 90 5D |  if_ne	jmp	#LR__2176
1a5cc     A7 20 02 FB | 	rdlong	local02, fp
1a5d0     0C 4E 05 F1 | 	add	fp, #12
1a5d4     A7 22 02 FB | 	rdlong	local03, fp
1a5d8     0C 4E 85 F1 | 	sub	fp, #12
1a5dc     11 21 52 F2 | 	cmps	local02, local03 wc
1a5e0     0F 1F A2 F1 | 	subx	local01, local01
1a5e4     A7 1E 62 FC | 	wrlong	local01, fp
1a5e8     F0 01 90 FD | 	jmp	#LR__2183
1a5ec                 | LR__2176
1a5ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1a5ec     08 4E 05 F1 | 	add	fp, #8
1a5f0     A7 1E 02 FB | 	rdlong	local01, fp
1a5f4     08 4E 85 F1 | 	sub	fp, #8
1a5f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a5fc     14 4E 05 A1 |  if_e	add	fp, #20
1a600     A7 22 02 AB |  if_e	rdlong	local03, fp
1a604     14 4E 85 A1 |  if_e	sub	fp, #20
1a608     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a60c     34 00 90 5D |  if_ne	jmp	#LR__2177
1a610     00 1E 06 F6 | 	mov	local01, #0
1a614     A7 12 02 FB | 	rdlong	arg01, fp
1a618     20 99 B0 FD | 	call	#__system___float_fromuns
1a61c     FD 12 02 F6 | 	mov	arg01, result1
1a620     0C 4E 05 F1 | 	add	fp, #12
1a624     A7 14 02 FB | 	rdlong	arg02, fp
1a628     0C 4E 85 F1 | 	sub	fp, #12
1a62c     01 16 06 F6 | 	mov	arg03, #1
1a630     40 A1 B0 FD | 	call	#__system___float_cmp
1a634     00 FA 55 F2 | 	cmps	result1, #0 wc
1a638     00 1E 26 C6 |  if_b	not	local01, #0
1a63c     A7 1E 62 FC | 	wrlong	local01, fp
1a640     98 01 90 FD | 	jmp	#LR__2183
1a644                 | LR__2177
1a644                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1a644     08 4E 05 F1 | 	add	fp, #8
1a648     A7 1E 02 FB | 	rdlong	local01, fp
1a64c     08 4E 85 F1 | 	sub	fp, #8
1a650     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a654     14 4E 05 A1 |  if_e	add	fp, #20
1a658     A7 22 02 AB |  if_e	rdlong	local03, fp
1a65c     14 4E 85 A1 |  if_e	sub	fp, #20
1a660     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a664     20 00 90 5D |  if_ne	jmp	#LR__2178
1a668     A7 20 02 FB | 	rdlong	local02, fp
1a66c     0C 4E 05 F1 | 	add	fp, #12
1a670     A7 22 02 FB | 	rdlong	local03, fp
1a674     0C 4E 85 F1 | 	sub	fp, #12
1a678     11 21 52 F2 | 	cmps	local02, local03 wc
1a67c     0F 1F A2 F1 | 	subx	local01, local01
1a680     A7 1E 62 FC | 	wrlong	local01, fp
1a684     54 01 90 FD | 	jmp	#LR__2183
1a688                 | LR__2178
1a688                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1a688     08 4E 05 F1 | 	add	fp, #8
1a68c     A7 1E 02 FB | 	rdlong	local01, fp
1a690     08 4E 85 F1 | 	sub	fp, #8
1a694     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a698     14 4E 05 A1 |  if_e	add	fp, #20
1a69c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a6a0     14 4E 85 A1 |  if_e	sub	fp, #20
1a6a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a6a8     20 00 90 5D |  if_ne	jmp	#LR__2179
1a6ac     A7 20 02 FB | 	rdlong	local02, fp
1a6b0     0C 4E 05 F1 | 	add	fp, #12
1a6b4     A7 22 02 FB | 	rdlong	local03, fp
1a6b8     0C 4E 85 F1 | 	sub	fp, #12
1a6bc     11 21 12 F2 | 	cmp	local02, local03 wc
1a6c0     0F 1F A2 F1 | 	subx	local01, local01
1a6c4     A7 1E 62 FC | 	wrlong	local01, fp
1a6c8     10 01 90 FD | 	jmp	#LR__2183
1a6cc                 | LR__2179
1a6cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1a6cc     08 4E 05 F1 | 	add	fp, #8
1a6d0     A7 1E 02 FB | 	rdlong	local01, fp
1a6d4     08 4E 85 F1 | 	sub	fp, #8
1a6d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a6dc     14 4E 05 A1 |  if_e	add	fp, #20
1a6e0     A7 22 02 AB |  if_e	rdlong	local03, fp
1a6e4     14 4E 85 A1 |  if_e	sub	fp, #20
1a6e8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a6ec     30 00 90 5D |  if_ne	jmp	#LR__2180
1a6f0     00 1E 06 F6 | 	mov	local01, #0
1a6f4     A7 12 02 FB | 	rdlong	arg01, fp
1a6f8     54 12 BF FD | 	call	#_convertstring
1a6fc     FD 12 02 F6 | 	mov	arg01, result1
1a700     0C 4E 05 F1 | 	add	fp, #12
1a704     A7 14 02 FB | 	rdlong	arg02, fp
1a708     0C 4E 85 F1 | 	sub	fp, #12
1a70c     9C 6E B0 FD | 	call	#__system___string_cmp
1a710     00 FA 55 F2 | 	cmps	result1, #0 wc
1a714     00 1E 26 C6 |  if_b	not	local01, #0
1a718     A7 1E 62 FC | 	wrlong	local01, fp
1a71c     BC 00 90 FD | 	jmp	#LR__2183
1a720                 | LR__2180
1a720                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1a720     08 4E 05 F1 | 	add	fp, #8
1a724     A7 1E 02 FB | 	rdlong	local01, fp
1a728     08 4E 85 F1 | 	sub	fp, #8
1a72c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a730     14 4E 05 A1 |  if_e	add	fp, #20
1a734     A7 22 02 AB |  if_e	rdlong	local03, fp
1a738     14 4E 85 A1 |  if_e	sub	fp, #20
1a73c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a740     34 00 90 5D |  if_ne	jmp	#LR__2181
1a744     00 1E 06 F6 | 	mov	local01, #0
1a748     A7 20 02 FB | 	rdlong	local02, fp
1a74c     0C 4E 05 F1 | 	add	fp, #12
1a750     A7 12 02 FB | 	rdlong	arg01, fp
1a754     0C 4E 85 F1 | 	sub	fp, #12
1a758     F4 11 BF FD | 	call	#_convertstring
1a75c     FD 14 02 F6 | 	mov	arg02, result1
1a760     10 13 02 F6 | 	mov	arg01, local02
1a764     44 6E B0 FD | 	call	#__system___string_cmp
1a768     00 FA 55 F2 | 	cmps	result1, #0 wc
1a76c     00 1E 26 C6 |  if_b	not	local01, #0
1a770     A7 1E 62 FC | 	wrlong	local01, fp
1a774     64 00 90 FD | 	jmp	#LR__2183
1a778                 | LR__2181
1a778                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1a778     08 4E 05 F1 | 	add	fp, #8
1a77c     A7 1E 02 FB | 	rdlong	local01, fp
1a780     08 4E 85 F1 | 	sub	fp, #8
1a784     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a788     14 4E 05 A1 |  if_e	add	fp, #20
1a78c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a790     14 4E 85 A1 |  if_e	sub	fp, #20
1a794     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a798     3C 00 90 5D |  if_ne	jmp	#LR__2182
1a79c     00 1E 06 F6 | 	mov	local01, #0
1a7a0     A7 12 02 FB | 	rdlong	arg01, fp
1a7a4     A8 11 BF FD | 	call	#_convertstring
1a7a8     FD 20 02 F6 | 	mov	local02, result1
1a7ac     0C 4E 05 F1 | 	add	fp, #12
1a7b0     A7 12 02 FB | 	rdlong	arg01, fp
1a7b4     0C 4E 85 F1 | 	sub	fp, #12
1a7b8     94 11 BF FD | 	call	#_convertstring
1a7bc     FD 14 02 F6 | 	mov	arg02, result1
1a7c0     10 13 02 F6 | 	mov	arg01, local02
1a7c4     E4 6D B0 FD | 	call	#__system___string_cmp
1a7c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1a7cc     00 1E 26 C6 |  if_b	not	local01, #0
1a7d0     A7 1E 62 FC | 	wrlong	local01, fp
1a7d4     04 00 90 FD | 	jmp	#LR__2183
1a7d8                 | LR__2182
1a7d8     A7 00 68 FC | 	wrlong	#0, fp
1a7dc                 | LR__2183
1a7dc     08 4E 05 F1 | 	add	fp, #8
1a7e0     A7 38 68 FC | 	wrlong	#28, fp
1a7e4     08 4E 85 F1 | 	sub	fp, #8
1a7e8     A7 12 02 F6 | 	mov	arg01, fp
1a7ec     80 10 BF FD | 	call	#_push
1a7f0     A7 F0 03 F6 | 	mov	ptra, fp
1a7f4     B2 00 A0 FD | 	call	#popregs_
1a7f8                 | _do_lt_ret
1a7f8     2D 00 64 FD | 	ret
1a7fc                 | 
1a7fc                 | ' 
1a7fc                 | ' '--------------------------------- minus (-)
1a7fc                 | ' 
1a7fc                 | ' sub do_minus
1a7fc                 | _do_minus
1a7fc     05 4A 05 F6 | 	mov	COUNT_, #5
1a800     A8 00 A0 FD | 	call	#pushregs_
1a804     18 F0 07 F1 | 	add	ptra, #24
1a808     CC 0F BF FD | 	call	#_pop
1a80c     FD 1E 02 F6 | 	mov	local01, result1
1a810     FE 20 02 F6 | 	mov	local02, result2
1a814     FF 22 02 F6 | 	mov	local03, result3
1a818     0C 4E 05 F1 | 	add	fp, #12
1a81c     A7 1E 62 FC | 	wrlong	local01, fp
1a820     04 4E 05 F1 | 	add	fp, #4
1a824     A7 20 62 FC | 	wrlong	local02, fp
1a828     04 4E 05 F1 | 	add	fp, #4
1a82c     A7 22 62 FC | 	wrlong	local03, fp
1a830     14 4E 85 F1 | 	sub	fp, #20
1a834     A0 0F BF FD | 	call	#_pop
1a838     FF 22 02 F6 | 	mov	local03, result3
1a83c     A7 FA 61 FC | 	wrlong	result1, fp
1a840     04 4E 05 F1 | 	add	fp, #4
1a844     A7 FC 61 FC | 	wrlong	result2, fp
1a848     04 4E 05 F1 | 	add	fp, #4
1a84c     A7 22 62 FC | 	wrlong	local03, fp
1a850                 | ' 
1a850                 | ' t2=pop()
1a850                 | ' t1=pop()
1a850                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1a850     08 4E 85 F1 | 	sub	fp, #8
1a854     1D 22 0E F2 | 	cmp	local03, #29 wz
1a858     14 4E 05 A1 |  if_e	add	fp, #20
1a85c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a860     14 4E 85 A1 |  if_e	sub	fp, #20
1a864     12 23 02 A6 |  if_e	mov	local03, local04
1a868     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a86c     5C 00 90 5D |  if_ne	jmp	#LR__2191
1a870                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1a870     0C 4E 05 F1 | 	add	fp, #12
1a874     A7 1E 02 FB | 	rdlong	local01, fp
1a878     0C 4E 85 F1 | 	sub	fp, #12
1a87c     A7 22 02 FB | 	rdlong	local03, fp
1a880     11 1F 12 F2 | 	cmp	local01, local03 wc
1a884     1C 00 90 3D |  if_ae	jmp	#LR__2190
1a888     A7 1E 02 FB | 	rdlong	local01, fp
1a88c     0C 4E 05 F1 | 	add	fp, #12
1a890     A7 20 02 FB | 	rdlong	local02, fp
1a894     0C 4E 85 F1 | 	sub	fp, #12
1a898     10 1F 82 F1 | 	sub	local01, local02
1a89c     A7 1E 62 FC | 	wrlong	local01, fp
1a8a0     F4 02 90 FD | 	jmp	#LR__2200
1a8a4                 | LR__2190
1a8a4     A7 1E 02 FB | 	rdlong	local01, fp
1a8a8     0C 4E 05 F1 | 	add	fp, #12
1a8ac     A7 20 02 FB | 	rdlong	local02, fp
1a8b0     0C 4E 85 F1 | 	sub	fp, #12
1a8b4     10 1F 82 F1 | 	sub	local01, local02
1a8b8     A7 1E 62 FC | 	wrlong	local01, fp
1a8bc     08 4E 05 F1 | 	add	fp, #8
1a8c0     A7 38 68 FC | 	wrlong	#28, fp
1a8c4     08 4E 85 F1 | 	sub	fp, #8
1a8c8     CC 02 90 FD | 	jmp	#LR__2200
1a8cc                 | LR__2191
1a8cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1a8cc     08 4E 05 F1 | 	add	fp, #8
1a8d0     A7 1E 02 FB | 	rdlong	local01, fp
1a8d4     08 4E 85 F1 | 	sub	fp, #8
1a8d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a8dc     14 4E 05 A1 |  if_e	add	fp, #20
1a8e0     A7 24 02 AB |  if_e	rdlong	local04, fp
1a8e4     14 4E 85 A1 |  if_e	sub	fp, #20
1a8e8     12 23 02 A6 |  if_e	mov	local03, local04
1a8ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a8f0     28 00 90 5D |  if_ne	jmp	#LR__2192
1a8f4     A7 1E 02 FB | 	rdlong	local01, fp
1a8f8     0C 4E 05 F1 | 	add	fp, #12
1a8fc     A7 20 02 FB | 	rdlong	local02, fp
1a900     0C 4E 85 F1 | 	sub	fp, #12
1a904     10 1F 82 F1 | 	sub	local01, local02
1a908     A7 1E 62 FC | 	wrlong	local01, fp
1a90c     08 4E 05 F1 | 	add	fp, #8
1a910     A7 38 68 FC | 	wrlong	#28, fp
1a914     08 4E 85 F1 | 	sub	fp, #8
1a918     7C 02 90 FD | 	jmp	#LR__2200
1a91c                 | LR__2192
1a91c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1a91c     08 4E 05 F1 | 	add	fp, #8
1a920     A7 1E 02 FB | 	rdlong	local01, fp
1a924     08 4E 85 F1 | 	sub	fp, #8
1a928     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a92c     14 4E 05 A1 |  if_e	add	fp, #20
1a930     A7 24 02 AB |  if_e	rdlong	local04, fp
1a934     14 4E 85 A1 |  if_e	sub	fp, #20
1a938     12 23 02 A6 |  if_e	mov	local03, local04
1a93c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a940     34 00 90 5D |  if_ne	jmp	#LR__2193
1a944     A7 12 02 FB | 	rdlong	arg01, fp
1a948     F0 95 B0 FD | 	call	#__system___float_fromuns
1a94c     FD 12 02 F6 | 	mov	arg01, result1
1a950     0C 4E 05 F1 | 	add	fp, #12
1a954     A7 14 02 FB | 	rdlong	arg02, fp
1a958     0C 4E 85 F1 | 	sub	fp, #12
1a95c     1F 14 E6 F4 | 	bitnot	arg02, #31
1a960     0C 96 B0 FD | 	call	#__system___float_add
1a964     A7 FA 61 FC | 	wrlong	result1, fp
1a968     08 4E 05 F1 | 	add	fp, #8
1a96c     A7 3C 68 FC | 	wrlong	#30, fp
1a970     08 4E 85 F1 | 	sub	fp, #8
1a974     20 02 90 FD | 	jmp	#LR__2200
1a978                 | LR__2193
1a978                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1a978     08 4E 05 F1 | 	add	fp, #8
1a97c     A7 1E 02 FB | 	rdlong	local01, fp
1a980     08 4E 85 F1 | 	sub	fp, #8
1a984     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a988     14 4E 05 A1 |  if_e	add	fp, #20
1a98c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a990     14 4E 85 A1 |  if_e	sub	fp, #20
1a994     12 23 02 A6 |  if_e	mov	local03, local04
1a998     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a99c     1C 00 90 5D |  if_ne	jmp	#LR__2194
1a9a0     A7 1E 02 FB | 	rdlong	local01, fp
1a9a4     0C 4E 05 F1 | 	add	fp, #12
1a9a8     A7 20 02 FB | 	rdlong	local02, fp
1a9ac     0C 4E 85 F1 | 	sub	fp, #12
1a9b0     10 1F 82 F1 | 	sub	local01, local02
1a9b4     A7 1E 62 FC | 	wrlong	local01, fp
1a9b8     DC 01 90 FD | 	jmp	#LR__2200
1a9bc                 | LR__2194
1a9bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1a9bc     08 4E 05 F1 | 	add	fp, #8
1a9c0     A7 1E 02 FB | 	rdlong	local01, fp
1a9c4     08 4E 85 F1 | 	sub	fp, #8
1a9c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a9cc     14 4E 05 A1 |  if_e	add	fp, #20
1a9d0     A7 24 02 AB |  if_e	rdlong	local04, fp
1a9d4     14 4E 85 A1 |  if_e	sub	fp, #20
1a9d8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1a9dc     1C 00 90 5D |  if_ne	jmp	#LR__2195
1a9e0     A7 1E 02 FB | 	rdlong	local01, fp
1a9e4     0C 4E 05 F1 | 	add	fp, #12
1a9e8     A7 20 02 FB | 	rdlong	local02, fp
1a9ec     0C 4E 85 F1 | 	sub	fp, #12
1a9f0     10 1F 82 F1 | 	sub	local01, local02
1a9f4     A7 1E 62 FC | 	wrlong	local01, fp
1a9f8     9C 01 90 FD | 	jmp	#LR__2200
1a9fc                 | LR__2195
1a9fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1a9fc     08 4E 05 F1 | 	add	fp, #8
1aa00     A7 1E 02 FB | 	rdlong	local01, fp
1aa04     08 4E 85 F1 | 	sub	fp, #8
1aa08     1C 1E 0E F2 | 	cmp	local01, #28 wz
1aa0c     14 4E 05 A1 |  if_e	add	fp, #20
1aa10     A7 22 02 AB |  if_e	rdlong	local03, fp
1aa14     14 4E 85 A1 |  if_e	sub	fp, #20
1aa18     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1aa1c     44 00 90 5D |  if_ne	jmp	#LR__2196
1aa20     A7 12 02 FB | 	rdlong	arg01, fp
1aa24     09 13 52 F6 | 	abs	arg01, arg01 wc
1aa28     1F 26 C6 C9 |  if_b	decod	local05, #31
1aa2c     00 26 06 36 |  if_ae	mov	local05, #0
1aa30     08 95 B0 FD | 	call	#__system___float_fromuns
1aa34     13 FB 61 F5 | 	xor	result1, local05
1aa38     FD 12 02 F6 | 	mov	arg01, result1
1aa3c     0C 4E 05 F1 | 	add	fp, #12
1aa40     A7 14 02 FB | 	rdlong	arg02, fp
1aa44     0C 4E 85 F1 | 	sub	fp, #12
1aa48     1F 14 E6 F4 | 	bitnot	arg02, #31
1aa4c     20 95 B0 FD | 	call	#__system___float_add
1aa50     A7 FA 61 FC | 	wrlong	result1, fp
1aa54     08 4E 05 F1 | 	add	fp, #8
1aa58     A7 3C 68 FC | 	wrlong	#30, fp
1aa5c     08 4E 85 F1 | 	sub	fp, #8
1aa60     34 01 90 FD | 	jmp	#LR__2200
1aa64                 | LR__2196
1aa64                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1aa64     08 4E 05 F1 | 	add	fp, #8
1aa68     A7 1E 02 FB | 	rdlong	local01, fp
1aa6c     08 4E 85 F1 | 	sub	fp, #8
1aa70     1E 1E 0E F2 | 	cmp	local01, #30 wz
1aa74     14 4E 05 A1 |  if_e	add	fp, #20
1aa78     A7 22 02 AB |  if_e	rdlong	local03, fp
1aa7c     14 4E 85 A1 |  if_e	sub	fp, #20
1aa80     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1aa84     2C 00 90 5D |  if_ne	jmp	#LR__2197
1aa88     A7 1E 02 FB | 	rdlong	local01, fp
1aa8c     0C 4E 05 F1 | 	add	fp, #12
1aa90     A7 12 02 FB | 	rdlong	arg01, fp
1aa94     0C 4E 85 F1 | 	sub	fp, #12
1aa98     A0 94 B0 FD | 	call	#__system___float_fromuns
1aa9c     FD 14 02 F6 | 	mov	arg02, result1
1aaa0     0F 13 02 F6 | 	mov	arg01, local01
1aaa4     1F 14 E6 F4 | 	bitnot	arg02, #31
1aaa8     C4 94 B0 FD | 	call	#__system___float_add
1aaac     A7 FA 61 FC | 	wrlong	result1, fp
1aab0     E4 00 90 FD | 	jmp	#LR__2200
1aab4                 | LR__2197
1aab4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1aab4     08 4E 05 F1 | 	add	fp, #8
1aab8     A7 1E 02 FB | 	rdlong	local01, fp
1aabc     08 4E 85 F1 | 	sub	fp, #8
1aac0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1aac4     14 4E 05 A1 |  if_e	add	fp, #20
1aac8     A7 22 02 AB |  if_e	rdlong	local03, fp
1aacc     14 4E 85 A1 |  if_e	sub	fp, #20
1aad0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1aad4     3C 00 90 5D |  if_ne	jmp	#LR__2198
1aad8     A7 1E 02 FB | 	rdlong	local01, fp
1aadc     0C 4E 05 F1 | 	add	fp, #12
1aae0     A7 12 02 FB | 	rdlong	arg01, fp
1aae4     0C 4E 85 F1 | 	sub	fp, #12
1aae8     09 13 52 F6 | 	abs	arg01, arg01 wc
1aaec     1F 26 C6 C9 |  if_b	decod	local05, #31
1aaf0     00 26 06 36 |  if_ae	mov	local05, #0
1aaf4     44 94 B0 FD | 	call	#__system___float_fromuns
1aaf8     13 FB 61 F5 | 	xor	result1, local05
1aafc     FD 14 02 F6 | 	mov	arg02, result1
1ab00     0F 13 02 F6 | 	mov	arg01, local01
1ab04     1F 14 E6 F4 | 	bitnot	arg02, #31
1ab08     64 94 B0 FD | 	call	#__system___float_add
1ab0c     A7 FA 61 FC | 	wrlong	result1, fp
1ab10     84 00 90 FD | 	jmp	#LR__2200
1ab14                 | LR__2198
1ab14                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ab14     08 4E 05 F1 | 	add	fp, #8
1ab18     A7 1E 02 FB | 	rdlong	local01, fp
1ab1c     08 4E 85 F1 | 	sub	fp, #8
1ab20     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ab24     14 4E 05 A1 |  if_e	add	fp, #20
1ab28     A7 22 02 AB |  if_e	rdlong	local03, fp
1ab2c     14 4E 85 A1 |  if_e	sub	fp, #20
1ab30     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ab34     20 00 90 5D |  if_ne	jmp	#LR__2199
1ab38     A7 12 02 FB | 	rdlong	arg01, fp
1ab3c     0C 4E 05 F1 | 	add	fp, #12
1ab40     A7 14 02 FB | 	rdlong	arg02, fp
1ab44     0C 4E 85 F1 | 	sub	fp, #12
1ab48     1F 14 E6 F4 | 	bitnot	arg02, #31
1ab4c     20 94 B0 FD | 	call	#__system___float_add
1ab50     A7 FA 61 FC | 	wrlong	result1, fp
1ab54     40 00 90 FD | 	jmp	#LR__2200
1ab58                 | LR__2199
1ab58                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1ab58     08 4E 05 F1 | 	add	fp, #8
1ab5c     A7 1E 02 FB | 	rdlong	local01, fp
1ab60     08 4E 85 F1 | 	sub	fp, #8
1ab64     1F 1E 0E F2 | 	cmp	local01, #31 wz
1ab68     14 4E 05 51 |  if_ne	add	fp, #20
1ab6c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1ab70     14 4E 85 51 |  if_ne	sub	fp, #20
1ab74     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1ab78     A7 06 68 AC |  if_e	wrlong	#3, fp
1ab7c     08 4E 05 A1 |  if_e	add	fp, #8
1ab80     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ab84     08 4E 85 A1 |  if_e	sub	fp, #8
1ab88     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1ab8c     08 4E 05 51 |  if_ne	add	fp, #8
1ab90     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ab94     08 4E 85 51 |  if_ne	sub	fp, #8
1ab98                 | LR__2200
1ab98     A7 12 02 F6 | 	mov	arg01, fp
1ab9c     D0 0C BF FD | 	call	#_push
1aba0     A7 F0 03 F6 | 	mov	ptra, fp
1aba4     B2 00 A0 FD | 	call	#popregs_
1aba8                 | _do_minus_ret
1aba8     2D 00 64 FD | 	ret
1abac                 | 
1abac                 | ' 
1abac                 | ' '--------------------------------- negative (-), one argument negative
1abac                 | ' 
1abac                 | ' sub do_negative
1abac                 | _do_negative
1abac     02 4A 05 F6 | 	mov	COUNT_, #2
1abb0     A8 00 A0 FD | 	call	#pushregs_
1abb4     0C F0 07 F1 | 	add	ptra, #12
1abb8     1C 0C BF FD | 	call	#_pop
1abbc     FF 1E 02 F6 | 	mov	local01, result3
1abc0     A7 FA 61 FC | 	wrlong	result1, fp
1abc4     04 4E 05 F1 | 	add	fp, #4
1abc8     A7 FC 61 FC | 	wrlong	result2, fp
1abcc     04 4E 05 F1 | 	add	fp, #4
1abd0     A7 1E 62 FC | 	wrlong	local01, fp
1abd4                 | ' 
1abd4                 | ' t1=pop()
1abd4                 | ' if t1.result_type=result_int then 
1abd4     08 4E 85 F1 | 	sub	fp, #8
1abd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1abdc     A7 20 02 AB |  if_e	rdlong	local02, fp
1abe0     10 1F 62 A6 |  if_e	neg	local01, local02
1abe4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1abe8     5C 00 90 AD |  if_e	jmp	#LR__2212
1abec     08 4E 05 F1 | 	add	fp, #8
1abf0     A7 1E 02 FB | 	rdlong	local01, fp
1abf4     08 4E 85 F1 | 	sub	fp, #8
1abf8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1abfc     1C 00 90 5D |  if_ne	jmp	#LR__2210
1ac00     A7 20 02 FB | 	rdlong	local02, fp
1ac04     10 1F 62 F6 | 	neg	local01, local02
1ac08     A7 1E 62 FC | 	wrlong	local01, fp
1ac0c     08 4E 05 F1 | 	add	fp, #8
1ac10     A7 38 68 FC | 	wrlong	#28, fp
1ac14     08 4E 85 F1 | 	sub	fp, #8
1ac18     2C 00 90 FD | 	jmp	#LR__2211
1ac1c                 | LR__2210
1ac1c     08 4E 05 F1 | 	add	fp, #8
1ac20     A7 1E 02 FB | 	rdlong	local01, fp
1ac24     08 4E 85 F1 | 	sub	fp, #8
1ac28     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ac2c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1ac30     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ac34     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ac38     08 4E 05 51 |  if_ne	add	fp, #8
1ac3c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ac40     08 4E 85 51 |  if_ne	sub	fp, #8
1ac44     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ac48                 | LR__2211
1ac48                 | LR__2212
1ac48     A7 12 02 F6 | 	mov	arg01, fp
1ac4c     20 0C BF FD | 	call	#_push
1ac50     A7 F0 03 F6 | 	mov	ptra, fp
1ac54     B2 00 A0 FD | 	call	#popregs_
1ac58                 | _do_negative_ret
1ac58     2D 00 64 FD | 	ret
1ac5c                 | 
1ac5c                 | ' 
1ac5c                 | ' '--------------------------------- MOD (modulo)
1ac5c                 | ' 
1ac5c                 | ' sub do_mod 
1ac5c                 | _do_mod
1ac5c     01 4A 05 F6 | 	mov	COUNT_, #1
1ac60     A8 00 A0 FD | 	call	#pushregs_
1ac64     18 F0 07 F1 | 	add	ptra, #24
1ac68     6C 0B BF FD | 	call	#_pop
1ac6c     FD 82 02 F6 | 	mov	muldivb_, result1
1ac70     FE 80 02 F6 | 	mov	muldiva_, result2
1ac74     FF 1E 02 F6 | 	mov	local01, result3
1ac78     0C 4E 05 F1 | 	add	fp, #12
1ac7c     A7 82 62 FC | 	wrlong	muldivb_, fp
1ac80     04 4E 05 F1 | 	add	fp, #4
1ac84     A7 80 62 FC | 	wrlong	muldiva_, fp
1ac88     04 4E 05 F1 | 	add	fp, #4
1ac8c     A7 1E 62 FC | 	wrlong	local01, fp
1ac90     14 4E 85 F1 | 	sub	fp, #20
1ac94     40 0B BF FD | 	call	#_pop
1ac98     A7 FA 61 FC | 	wrlong	result1, fp
1ac9c     04 4E 05 F1 | 	add	fp, #4
1aca0     A7 FC 61 FC | 	wrlong	result2, fp
1aca4     04 4E 05 F1 | 	add	fp, #4
1aca8     A7 FE 61 FC | 	wrlong	result3, fp
1acac                 | ' 
1acac                 | ' t2=pop()
1acac                 | ' t1=pop()
1acac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1acac     08 4E 85 F1 | 	sub	fp, #8
1acb0     1F FE 0D F2 | 	cmp	result3, #31 wz
1acb4     14 4E 05 51 |  if_ne	add	fp, #20
1acb8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1acbc     14 4E 85 51 |  if_ne	sub	fp, #20
1acc0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1acc4     A7 14 68 AC |  if_e	wrlong	#10, fp
1acc8     08 4E 05 A1 |  if_e	add	fp, #8
1accc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1acd0     08 4E 85 A1 |  if_e	sub	fp, #8
1acd4     90 01 90 AD |  if_e	jmp	#LR__2226
1acd8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1acd8     08 4E 05 F1 | 	add	fp, #8
1acdc     A7 82 02 FB | 	rdlong	muldivb_, fp
1ace0     08 4E 85 F1 | 	sub	fp, #8
1ace4     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
1ace8     1C 00 90 5D |  if_ne	jmp	#LR__2220
1acec     08 4E 05 F1 | 	add	fp, #8
1acf0     A7 38 68 FC | 	wrlong	#28, fp
1acf4     08 4E 85 F1 | 	sub	fp, #8
1acf8     A7 12 02 FB | 	rdlong	arg01, fp
1acfc     00 14 06 F6 | 	mov	arg02, #0
1ad00     04 9B B0 FD | 	call	#__system___float_tointeger
1ad04     A7 FA 61 FC | 	wrlong	result1, fp
1ad08                 | LR__2220
1ad08                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1ad08     14 4E 05 F1 | 	add	fp, #20
1ad0c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad10     14 4E 85 F1 | 	sub	fp, #20
1ad14     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
1ad18     28 00 90 5D |  if_ne	jmp	#LR__2221
1ad1c     14 4E 05 F1 | 	add	fp, #20
1ad20     A7 38 68 FC | 	wrlong	#28, fp
1ad24     08 4E 85 F1 | 	sub	fp, #8
1ad28     A7 12 02 FB | 	rdlong	arg01, fp
1ad2c     0C 4E 85 F1 | 	sub	fp, #12
1ad30     00 14 06 F6 | 	mov	arg02, #0
1ad34     D0 9A B0 FD | 	call	#__system___float_tointeger
1ad38     0C 4E 05 F1 | 	add	fp, #12
1ad3c     A7 FA 61 FC | 	wrlong	result1, fp
1ad40     0C 4E 85 F1 | 	sub	fp, #12
1ad44                 | LR__2221
1ad44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1ad44     08 4E 05 F1 | 	add	fp, #8
1ad48     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad4c     08 4E 85 F1 | 	sub	fp, #8
1ad50     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
1ad54     14 4E 05 A1 |  if_e	add	fp, #20
1ad58     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ad5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ad60     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1ad64     20 00 90 5D |  if_ne	jmp	#LR__2222
1ad68     0C 4E 05 F1 | 	add	fp, #12
1ad6c     A7 1E 02 FB | 	rdlong	local01, fp
1ad70     0C 4E 85 F1 | 	sub	fp, #12
1ad74     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad78     0F 83 12 FD | 	qdiv	muldivb_, local01
1ad7c     19 1E 62 FD | 	getqy	local01
1ad80     A7 1E 62 FC | 	wrlong	local01, fp
1ad84     E0 00 90 FD | 	jmp	#LR__2226
1ad88                 | LR__2222
1ad88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1ad88     08 4E 05 F1 | 	add	fp, #8
1ad8c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ad90     08 4E 85 F1 | 	sub	fp, #8
1ad94     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
1ad98     14 4E 05 A1 |  if_e	add	fp, #20
1ad9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ada0     14 4E 85 A1 |  if_e	sub	fp, #20
1ada4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1ada8     2C 00 90 5D |  if_ne	jmp	#LR__2223
1adac     0C 4E 05 F1 | 	add	fp, #12
1adb0     A7 1E 02 FB | 	rdlong	local01, fp
1adb4     0C 4E 85 F1 | 	sub	fp, #12
1adb8     A7 82 02 FB | 	rdlong	muldivb_, fp
1adbc     0F 83 12 FD | 	qdiv	muldivb_, local01
1adc0     19 1E 62 FD | 	getqy	local01
1adc4     A7 1E 62 FC | 	wrlong	local01, fp
1adc8     08 4E 05 F1 | 	add	fp, #8
1adcc     A7 38 68 FC | 	wrlong	#28, fp
1add0     08 4E 85 F1 | 	sub	fp, #8
1add4     90 00 90 FD | 	jmp	#LR__2226
1add8                 | LR__2223
1add8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1add8     08 4E 05 F1 | 	add	fp, #8
1addc     A7 82 02 FB | 	rdlong	muldivb_, fp
1ade0     08 4E 85 F1 | 	sub	fp, #8
1ade4     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
1ade8     14 4E 05 A1 |  if_e	add	fp, #20
1adec     A7 1E 02 AB |  if_e	rdlong	local01, fp
1adf0     14 4E 85 A1 |  if_e	sub	fp, #20
1adf4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1adf8     1C 00 90 5D |  if_ne	jmp	#LR__2224
1adfc     A7 80 02 FB | 	rdlong	muldiva_, fp
1ae00     0C 4E 05 F1 | 	add	fp, #12
1ae04     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae08     0C 4E 85 F1 | 	sub	fp, #12
1ae0c     BA 00 A0 FD | 	call	#divide_
1ae10     A7 80 62 FC | 	wrlong	muldiva_, fp
1ae14     50 00 90 FD | 	jmp	#LR__2226
1ae18                 | LR__2224
1ae18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1ae18     08 4E 05 F1 | 	add	fp, #8
1ae1c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae20     08 4E 85 F1 | 	sub	fp, #8
1ae24     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
1ae28     14 4E 05 A1 |  if_e	add	fp, #20
1ae2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ae30     14 4E 85 A1 |  if_e	sub	fp, #20
1ae34     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1ae38     1C 00 90 5D |  if_ne	jmp	#LR__2225
1ae3c     A7 80 02 FB | 	rdlong	muldiva_, fp
1ae40     0C 4E 05 F1 | 	add	fp, #12
1ae44     A7 82 02 FB | 	rdlong	muldivb_, fp
1ae48     0C 4E 85 F1 | 	sub	fp, #12
1ae4c     BA 00 A0 FD | 	call	#divide_
1ae50     A7 80 62 FC | 	wrlong	muldiva_, fp
1ae54     10 00 90 FD | 	jmp	#LR__2226
1ae58                 | LR__2225
1ae58     A7 16 68 FC | 	wrlong	#11, fp
1ae5c     08 4E 05 F1 | 	add	fp, #8
1ae60     A7 FE 69 FC | 	wrlong	#255, fp
1ae64     08 4E 85 F1 | 	sub	fp, #8
1ae68                 | LR__2226
1ae68     A7 12 02 F6 | 	mov	arg01, fp
1ae6c     00 0A BF FD | 	call	#_push
1ae70     A7 F0 03 F6 | 	mov	ptra, fp
1ae74     B2 00 A0 FD | 	call	#popregs_
1ae78                 | _do_mod_ret
1ae78     2D 00 64 FD | 	ret
1ae7c                 | 
1ae7c                 | ' 
1ae7c                 | ' '--------------------------------- mul (*)
1ae7c                 | ' 
1ae7c                 | ' sub do_mul
1ae7c                 | _do_mul
1ae7c     05 4A 05 F6 | 	mov	COUNT_, #5
1ae80     A8 00 A0 FD | 	call	#pushregs_
1ae84     18 F0 07 F1 | 	add	ptra, #24
1ae88     4C 09 BF FD | 	call	#_pop
1ae8c     FD 1E 02 F6 | 	mov	local01, result1
1ae90     FE 20 02 F6 | 	mov	local02, result2
1ae94     FF 22 02 F6 | 	mov	local03, result3
1ae98     0C 4E 05 F1 | 	add	fp, #12
1ae9c     A7 1E 62 FC | 	wrlong	local01, fp
1aea0     04 4E 05 F1 | 	add	fp, #4
1aea4     A7 20 62 FC | 	wrlong	local02, fp
1aea8     04 4E 05 F1 | 	add	fp, #4
1aeac     A7 22 62 FC | 	wrlong	local03, fp
1aeb0     14 4E 85 F1 | 	sub	fp, #20
1aeb4     20 09 BF FD | 	call	#_pop
1aeb8     FF 22 02 F6 | 	mov	local03, result3
1aebc     A7 FA 61 FC | 	wrlong	result1, fp
1aec0     04 4E 05 F1 | 	add	fp, #4
1aec4     A7 FC 61 FC | 	wrlong	result2, fp
1aec8     04 4E 05 F1 | 	add	fp, #4
1aecc     A7 22 62 FC | 	wrlong	local03, fp
1aed0                 | ' 
1aed0                 | ' t2=pop()
1aed0                 | ' t1=pop()
1aed0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1aed0     08 4E 85 F1 | 	sub	fp, #8
1aed4     1D 22 0E F2 | 	cmp	local03, #29 wz
1aed8     14 4E 05 A1 |  if_e	add	fp, #20
1aedc     A7 24 02 AB |  if_e	rdlong	local04, fp
1aee0     14 4E 85 A1 |  if_e	sub	fp, #20
1aee4     12 23 02 A6 |  if_e	mov	local03, local04
1aee8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1aeec     20 00 90 5D |  if_ne	jmp	#LR__2230
1aef0     A7 20 02 FB | 	rdlong	local02, fp
1aef4     0C 4E 05 F1 | 	add	fp, #12
1aef8     A7 22 02 FB | 	rdlong	local03, fp
1aefc     11 21 02 FD | 	qmul	local02, local03
1af00     0C 4E 85 F1 | 	sub	fp, #12
1af04     18 1E 62 FD | 	getqx	local01
1af08     A7 1E 62 FC | 	wrlong	local01, fp
1af0c     C4 02 90 FD | 	jmp	#LR__2239
1af10                 | LR__2230
1af10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1af10     08 4E 05 F1 | 	add	fp, #8
1af14     A7 1E 02 FB | 	rdlong	local01, fp
1af18     08 4E 85 F1 | 	sub	fp, #8
1af1c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1af20     14 4E 05 A1 |  if_e	add	fp, #20
1af24     A7 24 02 AB |  if_e	rdlong	local04, fp
1af28     14 4E 85 A1 |  if_e	sub	fp, #20
1af2c     12 23 02 A6 |  if_e	mov	local03, local04
1af30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1af34     2C 00 90 5D |  if_ne	jmp	#LR__2231
1af38     A7 20 02 FB | 	rdlong	local02, fp
1af3c     0C 4E 05 F1 | 	add	fp, #12
1af40     A7 22 02 FB | 	rdlong	local03, fp
1af44     11 21 02 FD | 	qmul	local02, local03
1af48     0C 4E 85 F1 | 	sub	fp, #12
1af4c     18 1E 62 FD | 	getqx	local01
1af50     A7 1E 62 FC | 	wrlong	local01, fp
1af54     08 4E 05 F1 | 	add	fp, #8
1af58     A7 38 68 FC | 	wrlong	#28, fp
1af5c     08 4E 85 F1 | 	sub	fp, #8
1af60     70 02 90 FD | 	jmp	#LR__2239
1af64                 | LR__2231
1af64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1af64     08 4E 05 F1 | 	add	fp, #8
1af68     A7 1E 02 FB | 	rdlong	local01, fp
1af6c     08 4E 85 F1 | 	sub	fp, #8
1af70     1D 1E 0E F2 | 	cmp	local01, #29 wz
1af74     14 4E 05 A1 |  if_e	add	fp, #20
1af78     A7 24 02 AB |  if_e	rdlong	local04, fp
1af7c     14 4E 85 A1 |  if_e	sub	fp, #20
1af80     12 23 02 A6 |  if_e	mov	local03, local04
1af84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1af88     30 00 90 5D |  if_ne	jmp	#LR__2232
1af8c     A7 12 02 FB | 	rdlong	arg01, fp
1af90     A8 8F B0 FD | 	call	#__system___float_fromuns
1af94     FD 12 02 F6 | 	mov	arg01, result1
1af98     0C 4E 05 F1 | 	add	fp, #12
1af9c     A7 14 02 FB | 	rdlong	arg02, fp
1afa0     0C 4E 85 F1 | 	sub	fp, #12
1afa4     98 93 B0 FD | 	call	#__system___float_mul
1afa8     A7 FA 61 FC | 	wrlong	result1, fp
1afac     08 4E 05 F1 | 	add	fp, #8
1afb0     A7 3C 68 FC | 	wrlong	#30, fp
1afb4     08 4E 85 F1 | 	sub	fp, #8
1afb8     18 02 90 FD | 	jmp	#LR__2239
1afbc                 | LR__2232
1afbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1afbc     08 4E 05 F1 | 	add	fp, #8
1afc0     A7 1E 02 FB | 	rdlong	local01, fp
1afc4     08 4E 85 F1 | 	sub	fp, #8
1afc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1afcc     14 4E 05 A1 |  if_e	add	fp, #20
1afd0     A7 24 02 AB |  if_e	rdlong	local04, fp
1afd4     14 4E 85 A1 |  if_e	sub	fp, #20
1afd8     12 23 02 A6 |  if_e	mov	local03, local04
1afdc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1afe0     20 00 90 5D |  if_ne	jmp	#LR__2233
1afe4     A7 20 02 FB | 	rdlong	local02, fp
1afe8     0C 4E 05 F1 | 	add	fp, #12
1afec     A7 22 02 FB | 	rdlong	local03, fp
1aff0     11 21 02 FD | 	qmul	local02, local03
1aff4     0C 4E 85 F1 | 	sub	fp, #12
1aff8     18 1E 62 FD | 	getqx	local01
1affc     A7 1E 62 FC | 	wrlong	local01, fp
1b000     D0 01 90 FD | 	jmp	#LR__2239
1b004                 | LR__2233
1b004                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1b004     08 4E 05 F1 | 	add	fp, #8
1b008     A7 1E 02 FB | 	rdlong	local01, fp
1b00c     08 4E 85 F1 | 	sub	fp, #8
1b010     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b014     14 4E 05 A1 |  if_e	add	fp, #20
1b018     A7 24 02 AB |  if_e	rdlong	local04, fp
1b01c     14 4E 85 A1 |  if_e	sub	fp, #20
1b020     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1b024     20 00 90 5D |  if_ne	jmp	#LR__2234
1b028     A7 20 02 FB | 	rdlong	local02, fp
1b02c     0C 4E 05 F1 | 	add	fp, #12
1b030     A7 22 02 FB | 	rdlong	local03, fp
1b034     11 21 02 FD | 	qmul	local02, local03
1b038     0C 4E 85 F1 | 	sub	fp, #12
1b03c     18 1E 62 FD | 	getqx	local01
1b040     A7 1E 62 FC | 	wrlong	local01, fp
1b044     8C 01 90 FD | 	jmp	#LR__2239
1b048                 | LR__2234
1b048                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1b048     08 4E 05 F1 | 	add	fp, #8
1b04c     A7 1E 02 FB | 	rdlong	local01, fp
1b050     08 4E 85 F1 | 	sub	fp, #8
1b054     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b058     14 4E 05 A1 |  if_e	add	fp, #20
1b05c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b060     14 4E 85 A1 |  if_e	sub	fp, #20
1b064     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b068     40 00 90 5D |  if_ne	jmp	#LR__2235
1b06c     A7 12 02 FB | 	rdlong	arg01, fp
1b070     09 13 52 F6 | 	abs	arg01, arg01 wc
1b074     1F 26 C6 C9 |  if_b	decod	local05, #31
1b078     00 26 06 36 |  if_ae	mov	local05, #0
1b07c     BC 8E B0 FD | 	call	#__system___float_fromuns
1b080     13 FB 61 F5 | 	xor	result1, local05
1b084     FD 12 02 F6 | 	mov	arg01, result1
1b088     0C 4E 05 F1 | 	add	fp, #12
1b08c     A7 14 02 FB | 	rdlong	arg02, fp
1b090     0C 4E 85 F1 | 	sub	fp, #12
1b094     A8 92 B0 FD | 	call	#__system___float_mul
1b098     A7 FA 61 FC | 	wrlong	result1, fp
1b09c     08 4E 05 F1 | 	add	fp, #8
1b0a0     A7 3C 68 FC | 	wrlong	#30, fp
1b0a4     08 4E 85 F1 | 	sub	fp, #8
1b0a8     28 01 90 FD | 	jmp	#LR__2239
1b0ac                 | LR__2235
1b0ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1b0ac     08 4E 05 F1 | 	add	fp, #8
1b0b0     A7 1E 02 FB | 	rdlong	local01, fp
1b0b4     08 4E 85 F1 | 	sub	fp, #8
1b0b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b0bc     14 4E 05 A1 |  if_e	add	fp, #20
1b0c0     A7 22 02 AB |  if_e	rdlong	local03, fp
1b0c4     14 4E 85 A1 |  if_e	sub	fp, #20
1b0c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b0cc     28 00 90 5D |  if_ne	jmp	#LR__2236
1b0d0     A7 1E 02 FB | 	rdlong	local01, fp
1b0d4     0C 4E 05 F1 | 	add	fp, #12
1b0d8     A7 12 02 FB | 	rdlong	arg01, fp
1b0dc     0C 4E 85 F1 | 	sub	fp, #12
1b0e0     58 8E B0 FD | 	call	#__system___float_fromuns
1b0e4     FD 14 02 F6 | 	mov	arg02, result1
1b0e8     0F 13 02 F6 | 	mov	arg01, local01
1b0ec     50 92 B0 FD | 	call	#__system___float_mul
1b0f0     A7 FA 61 FC | 	wrlong	result1, fp
1b0f4     DC 00 90 FD | 	jmp	#LR__2239
1b0f8                 | LR__2236
1b0f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1b0f8     08 4E 05 F1 | 	add	fp, #8
1b0fc     A7 1E 02 FB | 	rdlong	local01, fp
1b100     08 4E 85 F1 | 	sub	fp, #8
1b104     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b108     14 4E 05 A1 |  if_e	add	fp, #20
1b10c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b110     14 4E 85 A1 |  if_e	sub	fp, #20
1b114     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b118     38 00 90 5D |  if_ne	jmp	#LR__2237
1b11c     A7 1E 02 FB | 	rdlong	local01, fp
1b120     0C 4E 05 F1 | 	add	fp, #12
1b124     A7 12 02 FB | 	rdlong	arg01, fp
1b128     0C 4E 85 F1 | 	sub	fp, #12
1b12c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b130     1F 26 C6 C9 |  if_b	decod	local05, #31
1b134     00 26 06 36 |  if_ae	mov	local05, #0
1b138     00 8E B0 FD | 	call	#__system___float_fromuns
1b13c     13 FB 61 F5 | 	xor	result1, local05
1b140     FD 14 02 F6 | 	mov	arg02, result1
1b144     0F 13 02 F6 | 	mov	arg01, local01
1b148     F4 91 B0 FD | 	call	#__system___float_mul
1b14c     A7 FA 61 FC | 	wrlong	result1, fp
1b150     80 00 90 FD | 	jmp	#LR__2239
1b154                 | LR__2237
1b154                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1b154     08 4E 05 F1 | 	add	fp, #8
1b158     A7 1E 02 FB | 	rdlong	local01, fp
1b15c     08 4E 85 F1 | 	sub	fp, #8
1b160     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b164     14 4E 05 A1 |  if_e	add	fp, #20
1b168     A7 22 02 AB |  if_e	rdlong	local03, fp
1b16c     14 4E 85 A1 |  if_e	sub	fp, #20
1b170     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b174     1C 00 90 5D |  if_ne	jmp	#LR__2238
1b178     A7 12 02 FB | 	rdlong	arg01, fp
1b17c     0C 4E 05 F1 | 	add	fp, #12
1b180     A7 14 02 FB | 	rdlong	arg02, fp
1b184     0C 4E 85 F1 | 	sub	fp, #12
1b188     B4 91 B0 FD | 	call	#__system___float_mul
1b18c     A7 FA 61 FC | 	wrlong	result1, fp
1b190     40 00 90 FD | 	jmp	#LR__2239
1b194                 | LR__2238
1b194                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1b194     08 4E 05 F1 | 	add	fp, #8
1b198     A7 1E 02 FB | 	rdlong	local01, fp
1b19c     08 4E 85 F1 | 	sub	fp, #8
1b1a0     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b1a4     14 4E 05 51 |  if_ne	add	fp, #20
1b1a8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b1ac     14 4E 85 51 |  if_ne	sub	fp, #20
1b1b0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1b1b4     A7 10 68 AC |  if_e	wrlong	#8, fp
1b1b8     08 4E 05 A1 |  if_e	add	fp, #8
1b1bc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b1c0     08 4E 85 A1 |  if_e	sub	fp, #8
1b1c4     A7 12 68 5C |  if_ne	wrlong	#9, fp
1b1c8     08 4E 05 51 |  if_ne	add	fp, #8
1b1cc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b1d0     08 4E 85 51 |  if_ne	sub	fp, #8
1b1d4                 | LR__2239
1b1d4     A7 12 02 F6 | 	mov	arg01, fp
1b1d8     94 06 BF FD | 	call	#_push
1b1dc     A7 F0 03 F6 | 	mov	ptra, fp
1b1e0     B2 00 A0 FD | 	call	#popregs_
1b1e4                 | _do_mul_ret
1b1e4     2D 00 64 FD | 	ret
1b1e8                 | 
1b1e8                 | ' 
1b1e8                 | ' '--------------------------------- not equal (<>)
1b1e8                 | ' 
1b1e8                 | ' sub do_ne
1b1e8                 | _do_ne
1b1e8     05 4A 05 F6 | 	mov	COUNT_, #5
1b1ec     A8 00 A0 FD | 	call	#pushregs_
1b1f0     18 F0 07 F1 | 	add	ptra, #24
1b1f4     E0 05 BF FD | 	call	#_pop
1b1f8     FD 1E 02 F6 | 	mov	local01, result1
1b1fc     FE 20 02 F6 | 	mov	local02, result2
1b200     FF 22 02 F6 | 	mov	local03, result3
1b204     0C 4E 05 F1 | 	add	fp, #12
1b208     A7 1E 62 FC | 	wrlong	local01, fp
1b20c     04 4E 05 F1 | 	add	fp, #4
1b210     A7 20 62 FC | 	wrlong	local02, fp
1b214     04 4E 05 F1 | 	add	fp, #4
1b218     A7 22 62 FC | 	wrlong	local03, fp
1b21c     14 4E 85 F1 | 	sub	fp, #20
1b220     B4 05 BF FD | 	call	#_pop
1b224     FF 22 02 F6 | 	mov	local03, result3
1b228     A7 FA 61 FC | 	wrlong	result1, fp
1b22c     04 4E 05 F1 | 	add	fp, #4
1b230     A7 FC 61 FC | 	wrlong	result2, fp
1b234     04 4E 05 F1 | 	add	fp, #4
1b238     A7 22 62 FC | 	wrlong	local03, fp
1b23c                 | ' 
1b23c                 | ' t2=pop()
1b23c                 | ' t1=pop()
1b23c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1b23c     08 4E 85 F1 | 	sub	fp, #8
1b240     1F 22 0E F2 | 	cmp	local03, #31 wz
1b244     14 4E 05 A1 |  if_e	add	fp, #20
1b248     A7 24 02 AB |  if_e	rdlong	local04, fp
1b24c     14 4E 85 A1 |  if_e	sub	fp, #20
1b250     12 23 02 A6 |  if_e	mov	local03, local04
1b254     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b258     28 00 90 5D |  if_ne	jmp	#LR__2240
1b25c     00 1E 06 F6 | 	mov	local01, #0
1b260     A7 12 02 FB | 	rdlong	arg01, fp
1b264     0C 4E 05 F1 | 	add	fp, #12
1b268     A7 14 02 FB | 	rdlong	arg02, fp
1b26c     0C 4E 85 F1 | 	sub	fp, #12
1b270     38 63 B0 FD | 	call	#__system___string_cmp
1b274     00 FA 0D F2 | 	cmp	result1, #0 wz
1b278     00 1E 26 56 |  if_ne	not	local01, #0
1b27c     A7 1E 62 FC | 	wrlong	local01, fp
1b280     1C 04 90 FD | 	jmp	#LR__2253
1b284                 | LR__2240
1b284                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1b284     08 4E 05 F1 | 	add	fp, #8
1b288     A7 1E 02 FB | 	rdlong	local01, fp
1b28c     08 4E 85 F1 | 	sub	fp, #8
1b290     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b294     14 4E 05 A1 |  if_e	add	fp, #20
1b298     A7 24 02 AB |  if_e	rdlong	local04, fp
1b29c     14 4E 85 A1 |  if_e	sub	fp, #20
1b2a0     12 23 02 A6 |  if_e	mov	local03, local04
1b2a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b2a8     2C 00 90 5D |  if_ne	jmp	#LR__2241
1b2ac     00 1E 06 F6 | 	mov	local01, #0
1b2b0     A7 12 02 FB | 	rdlong	arg01, fp
1b2b4     0C 4E 05 F1 | 	add	fp, #12
1b2b8     A7 14 02 FB | 	rdlong	arg02, fp
1b2bc     0C 4E 85 F1 | 	sub	fp, #12
1b2c0     01 16 06 F6 | 	mov	arg03, #1
1b2c4     AC 94 B0 FD | 	call	#__system___float_cmp
1b2c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2cc     00 1E 26 56 |  if_ne	not	local01, #0
1b2d0     A7 1E 62 FC | 	wrlong	local01, fp
1b2d4     C8 03 90 FD | 	jmp	#LR__2253
1b2d8                 | LR__2241
1b2d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1b2d8     08 4E 05 F1 | 	add	fp, #8
1b2dc     A7 1E 02 FB | 	rdlong	local01, fp
1b2e0     08 4E 85 F1 | 	sub	fp, #8
1b2e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b2e8     14 4E 05 A1 |  if_e	add	fp, #20
1b2ec     A7 24 02 AB |  if_e	rdlong	local04, fp
1b2f0     14 4E 85 A1 |  if_e	sub	fp, #20
1b2f4     12 23 02 A6 |  if_e	mov	local03, local04
1b2f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b2fc     48 00 90 5D |  if_ne	jmp	#LR__2242
1b300     00 1E 06 F6 | 	mov	local01, #0
1b304     A7 20 02 FB | 	rdlong	local02, fp
1b308     0C 4E 05 F1 | 	add	fp, #12
1b30c     A7 12 02 FB | 	rdlong	arg01, fp
1b310     0C 4E 85 F1 | 	sub	fp, #12
1b314     09 13 52 F6 | 	abs	arg01, arg01 wc
1b318     1F 26 C6 C9 |  if_b	decod	local05, #31
1b31c     00 26 06 36 |  if_ae	mov	local05, #0
1b320     18 8C B0 FD | 	call	#__system___float_fromuns
1b324     13 FB 61 F5 | 	xor	result1, local05
1b328     FD 14 02 F6 | 	mov	arg02, result1
1b32c     10 13 02 F6 | 	mov	arg01, local02
1b330     01 16 06 F6 | 	mov	arg03, #1
1b334     3C 94 B0 FD | 	call	#__system___float_cmp
1b338     00 FA 0D F2 | 	cmp	result1, #0 wz
1b33c     00 1E 26 56 |  if_ne	not	local01, #0
1b340     A7 1E 62 FC | 	wrlong	local01, fp
1b344     58 03 90 FD | 	jmp	#LR__2253
1b348                 | LR__2242
1b348                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1b348     08 4E 05 F1 | 	add	fp, #8
1b34c     A7 1E 02 FB | 	rdlong	local01, fp
1b350     08 4E 85 F1 | 	sub	fp, #8
1b354     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b358     14 4E 05 A1 |  if_e	add	fp, #20
1b35c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b360     14 4E 85 A1 |  if_e	sub	fp, #20
1b364     12 23 02 A6 |  if_e	mov	local03, local04
1b368     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b36c     38 00 90 5D |  if_ne	jmp	#LR__2243
1b370     00 1E 06 F6 | 	mov	local01, #0
1b374     A7 20 02 FB | 	rdlong	local02, fp
1b378     0C 4E 05 F1 | 	add	fp, #12
1b37c     A7 12 02 FB | 	rdlong	arg01, fp
1b380     0C 4E 85 F1 | 	sub	fp, #12
1b384     B4 8B B0 FD | 	call	#__system___float_fromuns
1b388     FD 14 02 F6 | 	mov	arg02, result1
1b38c     10 13 02 F6 | 	mov	arg01, local02
1b390     01 16 06 F6 | 	mov	arg03, #1
1b394     DC 93 B0 FD | 	call	#__system___float_cmp
1b398     00 FA 0D F2 | 	cmp	result1, #0 wz
1b39c     00 1E 26 56 |  if_ne	not	local01, #0
1b3a0     A7 1E 62 FC | 	wrlong	local01, fp
1b3a4     F8 02 90 FD | 	jmp	#LR__2253
1b3a8                 | LR__2243
1b3a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1b3a8     08 4E 05 F1 | 	add	fp, #8
1b3ac     A7 1E 02 FB | 	rdlong	local01, fp
1b3b0     08 4E 85 F1 | 	sub	fp, #8
1b3b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b3b8     14 4E 05 A1 |  if_e	add	fp, #20
1b3bc     A7 24 02 AB |  if_e	rdlong	local04, fp
1b3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1b3c4     12 23 02 A6 |  if_e	mov	local03, local04
1b3c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b3cc     44 00 90 5D |  if_ne	jmp	#LR__2244
1b3d0     00 1E 06 F6 | 	mov	local01, #0
1b3d4     A7 12 02 FB | 	rdlong	arg01, fp
1b3d8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b3dc     1F 26 C6 C9 |  if_b	decod	local05, #31
1b3e0     00 26 06 36 |  if_ae	mov	local05, #0
1b3e4     54 8B B0 FD | 	call	#__system___float_fromuns
1b3e8     13 FB 61 F5 | 	xor	result1, local05
1b3ec     FD 12 02 F6 | 	mov	arg01, result1
1b3f0     0C 4E 05 F1 | 	add	fp, #12
1b3f4     A7 14 02 FB | 	rdlong	arg02, fp
1b3f8     0C 4E 85 F1 | 	sub	fp, #12
1b3fc     01 16 06 F6 | 	mov	arg03, #1
1b400     70 93 B0 FD | 	call	#__system___float_cmp
1b404     00 FA 0D F2 | 	cmp	result1, #0 wz
1b408     00 1E 26 56 |  if_ne	not	local01, #0
1b40c     A7 1E 62 FC | 	wrlong	local01, fp
1b410     8C 02 90 FD | 	jmp	#LR__2253
1b414                 | LR__2244
1b414                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1b414     08 4E 05 F1 | 	add	fp, #8
1b418     A7 1E 02 FB | 	rdlong	local01, fp
1b41c     08 4E 85 F1 | 	sub	fp, #8
1b420     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b424     14 4E 05 A1 |  if_e	add	fp, #20
1b428     A7 24 02 AB |  if_e	rdlong	local04, fp
1b42c     14 4E 85 A1 |  if_e	sub	fp, #20
1b430     12 23 02 A6 |  if_e	mov	local03, local04
1b434     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b438     24 00 90 5D |  if_ne	jmp	#LR__2245
1b43c     00 1E 06 F6 | 	mov	local01, #0
1b440     A7 20 02 FB | 	rdlong	local02, fp
1b444     0C 4E 05 F1 | 	add	fp, #12
1b448     A7 22 02 FB | 	rdlong	local03, fp
1b44c     0C 4E 85 F1 | 	sub	fp, #12
1b450     11 21 0A F2 | 	cmp	local02, local03 wz
1b454     01 1E 66 56 |  if_ne	neg	local01, #1
1b458     A7 1E 62 FC | 	wrlong	local01, fp
1b45c     40 02 90 FD | 	jmp	#LR__2253
1b460                 | LR__2245
1b460                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1b460     08 4E 05 F1 | 	add	fp, #8
1b464     A7 1E 02 FB | 	rdlong	local01, fp
1b468     08 4E 85 F1 | 	sub	fp, #8
1b46c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b470     14 4E 05 A1 |  if_e	add	fp, #20
1b474     A7 24 02 AB |  if_e	rdlong	local04, fp
1b478     14 4E 85 A1 |  if_e	sub	fp, #20
1b47c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1b480     24 00 90 5D |  if_ne	jmp	#LR__2246
1b484     00 1E 06 F6 | 	mov	local01, #0
1b488     A7 20 02 FB | 	rdlong	local02, fp
1b48c     0C 4E 05 F1 | 	add	fp, #12
1b490     A7 22 02 FB | 	rdlong	local03, fp
1b494     0C 4E 85 F1 | 	sub	fp, #12
1b498     11 21 0A F2 | 	cmp	local02, local03 wz
1b49c     01 1E 66 56 |  if_ne	neg	local01, #1
1b4a0     A7 1E 62 FC | 	wrlong	local01, fp
1b4a4     F8 01 90 FD | 	jmp	#LR__2253
1b4a8                 | LR__2246
1b4a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1b4a8     08 4E 05 F1 | 	add	fp, #8
1b4ac     A7 1E 02 FB | 	rdlong	local01, fp
1b4b0     08 4E 85 F1 | 	sub	fp, #8
1b4b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b4b8     14 4E 05 A1 |  if_e	add	fp, #20
1b4bc     A7 22 02 AB |  if_e	rdlong	local03, fp
1b4c0     14 4E 85 A1 |  if_e	sub	fp, #20
1b4c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b4c8     34 00 90 5D |  if_ne	jmp	#LR__2247
1b4cc     00 1E 06 F6 | 	mov	local01, #0
1b4d0     A7 12 02 FB | 	rdlong	arg01, fp
1b4d4     64 8A B0 FD | 	call	#__system___float_fromuns
1b4d8     FD 12 02 F6 | 	mov	arg01, result1
1b4dc     0C 4E 05 F1 | 	add	fp, #12
1b4e0     A7 14 02 FB | 	rdlong	arg02, fp
1b4e4     0C 4E 85 F1 | 	sub	fp, #12
1b4e8     01 16 06 F6 | 	mov	arg03, #1
1b4ec     84 92 B0 FD | 	call	#__system___float_cmp
1b4f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b4f4     00 1E 26 56 |  if_ne	not	local01, #0
1b4f8     A7 1E 62 FC | 	wrlong	local01, fp
1b4fc     A0 01 90 FD | 	jmp	#LR__2253
1b500                 | LR__2247
1b500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1b500     08 4E 05 F1 | 	add	fp, #8
1b504     A7 1E 02 FB | 	rdlong	local01, fp
1b508     08 4E 85 F1 | 	sub	fp, #8
1b50c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b510     14 4E 05 A1 |  if_e	add	fp, #20
1b514     A7 22 02 AB |  if_e	rdlong	local03, fp
1b518     14 4E 85 A1 |  if_e	sub	fp, #20
1b51c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b520     24 00 90 5D |  if_ne	jmp	#LR__2248
1b524     00 1E 06 F6 | 	mov	local01, #0
1b528     A7 20 02 FB | 	rdlong	local02, fp
1b52c     0C 4E 05 F1 | 	add	fp, #12
1b530     A7 22 02 FB | 	rdlong	local03, fp
1b534     0C 4E 85 F1 | 	sub	fp, #12
1b538     11 21 0A F2 | 	cmp	local02, local03 wz
1b53c     01 1E 66 56 |  if_ne	neg	local01, #1
1b540     A7 1E 62 FC | 	wrlong	local01, fp
1b544     58 01 90 FD | 	jmp	#LR__2253
1b548                 | LR__2248
1b548                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1b548     08 4E 05 F1 | 	add	fp, #8
1b54c     A7 1E 02 FB | 	rdlong	local01, fp
1b550     08 4E 85 F1 | 	sub	fp, #8
1b554     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b558     14 4E 05 A1 |  if_e	add	fp, #20
1b55c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b560     14 4E 85 A1 |  if_e	sub	fp, #20
1b564     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b568     24 00 90 5D |  if_ne	jmp	#LR__2249
1b56c     00 1E 06 F6 | 	mov	local01, #0
1b570     A7 20 02 FB | 	rdlong	local02, fp
1b574     0C 4E 05 F1 | 	add	fp, #12
1b578     A7 22 02 FB | 	rdlong	local03, fp
1b57c     0C 4E 85 F1 | 	sub	fp, #12
1b580     11 21 0A F2 | 	cmp	local02, local03 wz
1b584     01 1E 66 56 |  if_ne	neg	local01, #1
1b588     A7 1E 62 FC | 	wrlong	local01, fp
1b58c     10 01 90 FD | 	jmp	#LR__2253
1b590                 | LR__2249
1b590                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1b590     08 4E 05 F1 | 	add	fp, #8
1b594     A7 1E 02 FB | 	rdlong	local01, fp
1b598     08 4E 85 F1 | 	sub	fp, #8
1b59c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b5a0     14 4E 05 A1 |  if_e	add	fp, #20
1b5a4     A7 22 02 AB |  if_e	rdlong	local03, fp
1b5a8     14 4E 85 A1 |  if_e	sub	fp, #20
1b5ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b5b0     30 00 90 5D |  if_ne	jmp	#LR__2250
1b5b4     00 1E 06 F6 | 	mov	local01, #0
1b5b8     A7 12 02 FB | 	rdlong	arg01, fp
1b5bc     90 03 BF FD | 	call	#_convertstring
1b5c0     FD 12 02 F6 | 	mov	arg01, result1
1b5c4     0C 4E 05 F1 | 	add	fp, #12
1b5c8     A7 14 02 FB | 	rdlong	arg02, fp
1b5cc     0C 4E 85 F1 | 	sub	fp, #12
1b5d0     D8 5F B0 FD | 	call	#__system___string_cmp
1b5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b5d8     00 1E 26 56 |  if_ne	not	local01, #0
1b5dc     A7 1E 62 FC | 	wrlong	local01, fp
1b5e0     BC 00 90 FD | 	jmp	#LR__2253
1b5e4                 | LR__2250
1b5e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1b5e4     08 4E 05 F1 | 	add	fp, #8
1b5e8     A7 1E 02 FB | 	rdlong	local01, fp
1b5ec     08 4E 85 F1 | 	sub	fp, #8
1b5f0     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b5f4     14 4E 05 A1 |  if_e	add	fp, #20
1b5f8     A7 22 02 AB |  if_e	rdlong	local03, fp
1b5fc     14 4E 85 A1 |  if_e	sub	fp, #20
1b600     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b604     34 00 90 5D |  if_ne	jmp	#LR__2251
1b608     00 1E 06 F6 | 	mov	local01, #0
1b60c     A7 20 02 FB | 	rdlong	local02, fp
1b610     0C 4E 05 F1 | 	add	fp, #12
1b614     A7 12 02 FB | 	rdlong	arg01, fp
1b618     0C 4E 85 F1 | 	sub	fp, #12
1b61c     30 03 BF FD | 	call	#_convertstring
1b620     FD 14 02 F6 | 	mov	arg02, result1
1b624     10 13 02 F6 | 	mov	arg01, local02
1b628     80 5F B0 FD | 	call	#__system___string_cmp
1b62c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b630     00 1E 26 56 |  if_ne	not	local01, #0
1b634     A7 1E 62 FC | 	wrlong	local01, fp
1b638     64 00 90 FD | 	jmp	#LR__2253
1b63c                 | LR__2251
1b63c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1b63c     08 4E 05 F1 | 	add	fp, #8
1b640     A7 1E 02 FB | 	rdlong	local01, fp
1b644     08 4E 85 F1 | 	sub	fp, #8
1b648     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b64c     14 4E 05 A1 |  if_e	add	fp, #20
1b650     A7 22 02 AB |  if_e	rdlong	local03, fp
1b654     14 4E 85 A1 |  if_e	sub	fp, #20
1b658     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b65c     3C 00 90 5D |  if_ne	jmp	#LR__2252
1b660     00 1E 06 F6 | 	mov	local01, #0
1b664     A7 12 02 FB | 	rdlong	arg01, fp
1b668     E4 02 BF FD | 	call	#_convertstring
1b66c     FD 20 02 F6 | 	mov	local02, result1
1b670     0C 4E 05 F1 | 	add	fp, #12
1b674     A7 12 02 FB | 	rdlong	arg01, fp
1b678     0C 4E 85 F1 | 	sub	fp, #12
1b67c     D0 02 BF FD | 	call	#_convertstring
1b680     FD 14 02 F6 | 	mov	arg02, result1
1b684     10 13 02 F6 | 	mov	arg01, local02
1b688     20 5F B0 FD | 	call	#__system___string_cmp
1b68c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b690     00 1E 26 56 |  if_ne	not	local01, #0
1b694     A7 1E 62 FC | 	wrlong	local01, fp
1b698     04 00 90 FD | 	jmp	#LR__2253
1b69c                 | LR__2252
1b69c     A7 00 68 FC | 	wrlong	#0, fp
1b6a0                 | LR__2253
1b6a0     08 4E 05 F1 | 	add	fp, #8
1b6a4     A7 38 68 FC | 	wrlong	#28, fp
1b6a8     08 4E 85 F1 | 	sub	fp, #8
1b6ac     A7 12 02 F6 | 	mov	arg01, fp
1b6b0     BC 01 BF FD | 	call	#_push
1b6b4     A7 F0 03 F6 | 	mov	ptra, fp
1b6b8     B2 00 A0 FD | 	call	#popregs_
1b6bc                 | _do_ne_ret
1b6bc     2D 00 64 FD | 	ret
1b6c0                 | 
1b6c0                 | ' 
1b6c0                 | ' '--------------------------------- OR
1b6c0                 | ' 
1b6c0                 | ' sub do_or 
1b6c0                 | _do_or
1b6c0     03 4A 05 F6 | 	mov	COUNT_, #3
1b6c4     A8 00 A0 FD | 	call	#pushregs_
1b6c8     18 F0 07 F1 | 	add	ptra, #24
1b6cc     08 01 BF FD | 	call	#_pop
1b6d0     FD 12 02 F6 | 	mov	arg01, result1
1b6d4     FE 1E 02 F6 | 	mov	local01, result2
1b6d8     FF 20 02 F6 | 	mov	local02, result3
1b6dc     0C 4E 05 F1 | 	add	fp, #12
1b6e0     A7 12 62 FC | 	wrlong	arg01, fp
1b6e4     04 4E 05 F1 | 	add	fp, #4
1b6e8     A7 1E 62 FC | 	wrlong	local01, fp
1b6ec     04 4E 05 F1 | 	add	fp, #4
1b6f0     A7 20 62 FC | 	wrlong	local02, fp
1b6f4     14 4E 85 F1 | 	sub	fp, #20
1b6f8     DC 00 BF FD | 	call	#_pop
1b6fc     FF 22 02 F6 | 	mov	local03, result3
1b700     A7 FA 61 FC | 	wrlong	result1, fp
1b704     04 4E 05 F1 | 	add	fp, #4
1b708     A7 FC 61 FC | 	wrlong	result2, fp
1b70c     04 4E 05 F1 | 	add	fp, #4
1b710     A7 22 62 FC | 	wrlong	local03, fp
1b714                 | ' 
1b714                 | ' t2=pop()
1b714                 | ' t1=pop()
1b714                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b714     08 4E 85 F1 | 	sub	fp, #8
1b718     1C 22 0E F2 | 	cmp	local03, #28 wz
1b71c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b720     A7 22 62 AC |  if_e	wrlong	local03, fp
1b724     08 4E 05 A1 |  if_e	add	fp, #8
1b728     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b72c     08 4E 85 A1 |  if_e	sub	fp, #8
1b730                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b730     14 4E 05 F1 | 	add	fp, #20
1b734     A7 22 02 FB | 	rdlong	local03, fp
1b738     14 4E 85 F1 | 	sub	fp, #20
1b73c     1C 22 0E F2 | 	cmp	local03, #28 wz
1b740     18 00 90 5D |  if_ne	jmp	#LR__2260
1b744     0C 4E 05 F1 | 	add	fp, #12
1b748     A7 22 02 FB | 	rdlong	local03, fp
1b74c     A7 22 62 FC | 	wrlong	local03, fp
1b750     08 4E 05 F1 | 	add	fp, #8
1b754     A7 3A 68 FC | 	wrlong	#29, fp
1b758     14 4E 85 F1 | 	sub	fp, #20
1b75c                 | LR__2260
1b75c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1b75c     08 4E 05 F1 | 	add	fp, #8
1b760     A7 22 02 FB | 	rdlong	local03, fp
1b764     08 4E 85 F1 | 	sub	fp, #8
1b768     1F 22 0E F2 | 	cmp	local03, #31 wz
1b76c     14 4E 05 51 |  if_ne	add	fp, #20
1b770     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b774     14 4E 85 51 |  if_ne	sub	fp, #20
1b778     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b77c     08 4E 05 51 |  if_ne	add	fp, #8
1b780     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b784     08 4E 85 51 |  if_ne	sub	fp, #8
1b788     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b78c     14 4E 05 51 |  if_ne	add	fp, #20
1b790     14 4E 85 51 |  if_ne	sub	fp, #20
1b794     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b798     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b79c     08 4E 05 A1 |  if_e	add	fp, #8
1b7a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b7a4     08 4E 85 A1 |  if_e	sub	fp, #8
1b7a8     18 00 90 AD |  if_e	jmp	#LR__2261
1b7ac     A7 22 02 FB | 	rdlong	local03, fp
1b7b0     0C 4E 05 F1 | 	add	fp, #12
1b7b4     A7 1E 02 FB | 	rdlong	local01, fp
1b7b8     0C 4E 85 F1 | 	sub	fp, #12
1b7bc     0F 23 42 F5 | 	or	local03, local01
1b7c0     A7 22 62 FC | 	wrlong	local03, fp
1b7c4                 | LR__2261
1b7c4     A7 12 02 F6 | 	mov	arg01, fp
1b7c8     A4 00 BF FD | 	call	#_push
1b7cc     A7 F0 03 F6 | 	mov	ptra, fp
1b7d0     B2 00 A0 FD | 	call	#popregs_
1b7d4                 | _do_or_ret
1b7d4     2D 00 64 FD | 	ret
1b7d8                 | 
1b7d8                 | ' 
1b7d8                 | ' '--------------------------------- plus (+)
1b7d8                 | ' 
1b7d8                 | ' sub do_plus 
1b7d8                 | _do_plus
1b7d8     05 4A 05 F6 | 	mov	COUNT_, #5
1b7dc     A8 00 A0 FD | 	call	#pushregs_
1b7e0     18 F0 07 F1 | 	add	ptra, #24
1b7e4     F0 FF BE FD | 	call	#_pop
1b7e8     FD 1E 02 F6 | 	mov	local01, result1
1b7ec     FE 20 02 F6 | 	mov	local02, result2
1b7f0     FF 22 02 F6 | 	mov	local03, result3
1b7f4     0C 4E 05 F1 | 	add	fp, #12
1b7f8     A7 1E 62 FC | 	wrlong	local01, fp
1b7fc     04 4E 05 F1 | 	add	fp, #4
1b800     A7 20 62 FC | 	wrlong	local02, fp
1b804     04 4E 05 F1 | 	add	fp, #4
1b808     A7 22 62 FC | 	wrlong	local03, fp
1b80c     14 4E 85 F1 | 	sub	fp, #20
1b810     C4 FF BE FD | 	call	#_pop
1b814     FF 22 02 F6 | 	mov	local03, result3
1b818     A7 FA 61 FC | 	wrlong	result1, fp
1b81c     04 4E 05 F1 | 	add	fp, #4
1b820     A7 FC 61 FC | 	wrlong	result2, fp
1b824     04 4E 05 F1 | 	add	fp, #4
1b828     A7 22 62 FC | 	wrlong	local03, fp
1b82c                 | ' 
1b82c                 | ' t2=pop()
1b82c                 | ' t1=pop()
1b82c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1b82c     08 4E 85 F1 | 	sub	fp, #8
1b830     1D 22 0E F2 | 	cmp	local03, #29 wz
1b834     14 4E 05 A1 |  if_e	add	fp, #20
1b838     A7 24 02 AB |  if_e	rdlong	local04, fp
1b83c     14 4E 85 A1 |  if_e	sub	fp, #20
1b840     12 23 02 A6 |  if_e	mov	local03, local04
1b844     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b848     1C 00 90 5D |  if_ne	jmp	#LR__2270
1b84c     A7 1E 02 FB | 	rdlong	local01, fp
1b850     0C 4E 05 F1 | 	add	fp, #12
1b854     A7 20 02 FB | 	rdlong	local02, fp
1b858     0C 4E 85 F1 | 	sub	fp, #12
1b85c     10 1F 02 F1 | 	add	local01, local02
1b860     A7 1E 62 FC | 	wrlong	local01, fp
1b864     48 04 90 FD | 	jmp	#LR__2285
1b868                 | LR__2270
1b868                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1b868     08 4E 05 F1 | 	add	fp, #8
1b86c     A7 1E 02 FB | 	rdlong	local01, fp
1b870     08 4E 85 F1 | 	sub	fp, #8
1b874     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b878     14 4E 05 A1 |  if_e	add	fp, #20
1b87c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b880     14 4E 85 A1 |  if_e	sub	fp, #20
1b884     12 23 02 A6 |  if_e	mov	local03, local04
1b888     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b88c     28 00 90 5D |  if_ne	jmp	#LR__2271
1b890     A7 1E 02 FB | 	rdlong	local01, fp
1b894     0C 4E 05 F1 | 	add	fp, #12
1b898     A7 20 02 FB | 	rdlong	local02, fp
1b89c     0C 4E 85 F1 | 	sub	fp, #12
1b8a0     10 1F 02 F1 | 	add	local01, local02
1b8a4     A7 1E 62 FC | 	wrlong	local01, fp
1b8a8     08 4E 05 F1 | 	add	fp, #8
1b8ac     A7 38 68 FC | 	wrlong	#28, fp
1b8b0     08 4E 85 F1 | 	sub	fp, #8
1b8b4     F8 03 90 FD | 	jmp	#LR__2285
1b8b8                 | LR__2271
1b8b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1b8b8     08 4E 05 F1 | 	add	fp, #8
1b8bc     A7 1E 02 FB | 	rdlong	local01, fp
1b8c0     08 4E 85 F1 | 	sub	fp, #8
1b8c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b8c8     14 4E 05 A1 |  if_e	add	fp, #20
1b8cc     A7 24 02 AB |  if_e	rdlong	local04, fp
1b8d0     14 4E 85 A1 |  if_e	sub	fp, #20
1b8d4     12 23 02 A6 |  if_e	mov	local03, local04
1b8d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b8dc     30 00 90 5D |  if_ne	jmp	#LR__2272
1b8e0     A7 12 02 FB | 	rdlong	arg01, fp
1b8e4     54 86 B0 FD | 	call	#__system___float_fromuns
1b8e8     FD 12 02 F6 | 	mov	arg01, result1
1b8ec     0C 4E 05 F1 | 	add	fp, #12
1b8f0     A7 14 02 FB | 	rdlong	arg02, fp
1b8f4     0C 4E 85 F1 | 	sub	fp, #12
1b8f8     74 86 B0 FD | 	call	#__system___float_add
1b8fc     A7 FA 61 FC | 	wrlong	result1, fp
1b900     08 4E 05 F1 | 	add	fp, #8
1b904     A7 3C 68 FC | 	wrlong	#30, fp
1b908     08 4E 85 F1 | 	sub	fp, #8
1b90c     A0 03 90 FD | 	jmp	#LR__2285
1b910                 | LR__2272
1b910                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1b910     08 4E 05 F1 | 	add	fp, #8
1b914     A7 1E 02 FB | 	rdlong	local01, fp
1b918     08 4E 85 F1 | 	sub	fp, #8
1b91c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b920     14 4E 05 A1 |  if_e	add	fp, #20
1b924     A7 24 02 AB |  if_e	rdlong	local04, fp
1b928     14 4E 85 A1 |  if_e	sub	fp, #20
1b92c     12 23 02 A6 |  if_e	mov	local03, local04
1b930     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b934     1C 00 90 5D |  if_ne	jmp	#LR__2273
1b938     A7 1E 02 FB | 	rdlong	local01, fp
1b93c     0C 4E 05 F1 | 	add	fp, #12
1b940     A7 20 02 FB | 	rdlong	local02, fp
1b944     0C 4E 85 F1 | 	sub	fp, #12
1b948     10 1F 02 F1 | 	add	local01, local02
1b94c     A7 1E 62 FC | 	wrlong	local01, fp
1b950     5C 03 90 FD | 	jmp	#LR__2285
1b954                 | LR__2273
1b954                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1b954     08 4E 05 F1 | 	add	fp, #8
1b958     A7 1E 02 FB | 	rdlong	local01, fp
1b95c     08 4E 85 F1 | 	sub	fp, #8
1b960     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b964     14 4E 05 A1 |  if_e	add	fp, #20
1b968     A7 24 02 AB |  if_e	rdlong	local04, fp
1b96c     14 4E 85 A1 |  if_e	sub	fp, #20
1b970     12 23 02 A6 |  if_e	mov	local03, local04
1b974     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b978     1C 00 90 5D |  if_ne	jmp	#LR__2274
1b97c     A7 1E 02 FB | 	rdlong	local01, fp
1b980     0C 4E 05 F1 | 	add	fp, #12
1b984     A7 20 02 FB | 	rdlong	local02, fp
1b988     0C 4E 85 F1 | 	sub	fp, #12
1b98c     10 1F 02 F1 | 	add	local01, local02
1b990     A7 1E 62 FC | 	wrlong	local01, fp
1b994     18 03 90 FD | 	jmp	#LR__2285
1b998                 | LR__2274
1b998                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1b998     08 4E 05 F1 | 	add	fp, #8
1b99c     A7 1E 02 FB | 	rdlong	local01, fp
1b9a0     08 4E 85 F1 | 	sub	fp, #8
1b9a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b9a8     14 4E 05 A1 |  if_e	add	fp, #20
1b9ac     A7 24 02 AB |  if_e	rdlong	local04, fp
1b9b0     14 4E 85 A1 |  if_e	sub	fp, #20
1b9b4     12 23 02 A6 |  if_e	mov	local03, local04
1b9b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b9bc     40 00 90 5D |  if_ne	jmp	#LR__2275
1b9c0     A7 12 02 FB | 	rdlong	arg01, fp
1b9c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1b9c8     1F 26 C6 C9 |  if_b	decod	local05, #31
1b9cc     00 26 06 36 |  if_ae	mov	local05, #0
1b9d0     68 85 B0 FD | 	call	#__system___float_fromuns
1b9d4     13 FB 61 F5 | 	xor	result1, local05
1b9d8     FD 12 02 F6 | 	mov	arg01, result1
1b9dc     0C 4E 05 F1 | 	add	fp, #12
1b9e0     A7 14 02 FB | 	rdlong	arg02, fp
1b9e4     0C 4E 85 F1 | 	sub	fp, #12
1b9e8     84 85 B0 FD | 	call	#__system___float_add
1b9ec     A7 FA 61 FC | 	wrlong	result1, fp
1b9f0     08 4E 05 F1 | 	add	fp, #8
1b9f4     A7 3C 68 FC | 	wrlong	#30, fp
1b9f8     08 4E 85 F1 | 	sub	fp, #8
1b9fc     B0 02 90 FD | 	jmp	#LR__2285
1ba00                 | LR__2275
1ba00                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1ba00     08 4E 05 F1 | 	add	fp, #8
1ba04     A7 1E 02 FB | 	rdlong	local01, fp
1ba08     08 4E 85 F1 | 	sub	fp, #8
1ba0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ba10     14 4E 05 A1 |  if_e	add	fp, #20
1ba14     A7 24 02 AB |  if_e	rdlong	local04, fp
1ba18     14 4E 85 A1 |  if_e	sub	fp, #20
1ba1c     12 23 02 A6 |  if_e	mov	local03, local04
1ba20     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ba24     28 00 90 5D |  if_ne	jmp	#LR__2276
1ba28     A7 1E 02 FB | 	rdlong	local01, fp
1ba2c     0C 4E 05 F1 | 	add	fp, #12
1ba30     A7 12 02 FB | 	rdlong	arg01, fp
1ba34     0C 4E 85 F1 | 	sub	fp, #12
1ba38     00 85 B0 FD | 	call	#__system___float_fromuns
1ba3c     FD 14 02 F6 | 	mov	arg02, result1
1ba40     0F 13 02 F6 | 	mov	arg01, local01
1ba44     28 85 B0 FD | 	call	#__system___float_add
1ba48     A7 FA 61 FC | 	wrlong	result1, fp
1ba4c     60 02 90 FD | 	jmp	#LR__2285
1ba50                 | LR__2276
1ba50                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1ba50     08 4E 05 F1 | 	add	fp, #8
1ba54     A7 1E 02 FB | 	rdlong	local01, fp
1ba58     08 4E 85 F1 | 	sub	fp, #8
1ba5c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ba60     14 4E 05 A1 |  if_e	add	fp, #20
1ba64     A7 24 02 AB |  if_e	rdlong	local04, fp
1ba68     14 4E 85 A1 |  if_e	sub	fp, #20
1ba6c     12 23 02 A6 |  if_e	mov	local03, local04
1ba70     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1ba74     38 00 90 5D |  if_ne	jmp	#LR__2277
1ba78     A7 1E 02 FB | 	rdlong	local01, fp
1ba7c     0C 4E 05 F1 | 	add	fp, #12
1ba80     A7 12 02 FB | 	rdlong	arg01, fp
1ba84     0C 4E 85 F1 | 	sub	fp, #12
1ba88     09 13 52 F6 | 	abs	arg01, arg01 wc
1ba8c     1F 26 C6 C9 |  if_b	decod	local05, #31
1ba90     00 26 06 36 |  if_ae	mov	local05, #0
1ba94     A4 84 B0 FD | 	call	#__system___float_fromuns
1ba98     13 FB 61 F5 | 	xor	result1, local05
1ba9c     FD 14 02 F6 | 	mov	arg02, result1
1baa0     0F 13 02 F6 | 	mov	arg01, local01
1baa4     C8 84 B0 FD | 	call	#__system___float_add
1baa8     A7 FA 61 FC | 	wrlong	result1, fp
1baac     00 02 90 FD | 	jmp	#LR__2285
1bab0                 | LR__2277
1bab0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1bab0     08 4E 05 F1 | 	add	fp, #8
1bab4     A7 1E 02 FB | 	rdlong	local01, fp
1bab8     08 4E 85 F1 | 	sub	fp, #8
1babc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1bac0     14 4E 05 A1 |  if_e	add	fp, #20
1bac4     A7 24 02 AB |  if_e	rdlong	local04, fp
1bac8     14 4E 85 A1 |  if_e	sub	fp, #20
1bacc     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
1bad0     1C 00 90 5D |  if_ne	jmp	#LR__2278
1bad4     A7 12 02 FB | 	rdlong	arg01, fp
1bad8     0C 4E 05 F1 | 	add	fp, #12
1badc     A7 14 02 FB | 	rdlong	arg02, fp
1bae0     0C 4E 85 F1 | 	sub	fp, #12
1bae4     88 84 B0 FD | 	call	#__system___float_add
1bae8     A7 FA 61 FC | 	wrlong	result1, fp
1baec     C0 01 90 FD | 	jmp	#LR__2285
1baf0                 | LR__2278
1baf0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1baf0     08 4E 05 F1 | 	add	fp, #8
1baf4     A7 1E 02 FB | 	rdlong	local01, fp
1baf8     08 4E 85 F1 | 	sub	fp, #8
1bafc     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bb00     24 00 90 5D |  if_ne	jmp	#LR__2279
1bb04     14 4E 05 F1 | 	add	fp, #20
1bb08     A7 22 02 FB | 	rdlong	local03, fp
1bb0c     14 4E 85 F1 | 	sub	fp, #20
1bb10     1F 22 0E F2 | 	cmp	local03, #31 wz
1bb14     A7 04 68 5C |  if_ne	wrlong	#2, fp
1bb18     08 4E 05 51 |  if_ne	add	fp, #8
1bb1c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1bb20     08 4E 85 51 |  if_ne	sub	fp, #8
1bb24     88 01 90 5D |  if_ne	jmp	#LR__2285
1bb28                 | LR__2279
1bb28                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1bb28     14 4E 05 F1 | 	add	fp, #20
1bb2c     A7 1E 02 FB | 	rdlong	local01, fp
1bb30     14 4E 85 F1 | 	sub	fp, #20
1bb34     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bb38     24 00 90 5D |  if_ne	jmp	#LR__2280
1bb3c     08 4E 05 F1 | 	add	fp, #8
1bb40     A7 22 02 FB | 	rdlong	local03, fp
1bb44     08 4E 85 F1 | 	sub	fp, #8
1bb48     1F 22 0E F2 | 	cmp	local03, #31 wz
1bb4c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1bb50     08 4E 05 51 |  if_ne	add	fp, #8
1bb54     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1bb58     08 4E 85 51 |  if_ne	sub	fp, #8
1bb5c     50 01 90 5D |  if_ne	jmp	#LR__2285
1bb60                 | LR__2280
1bb60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1bb60     08 4E 05 F1 | 	add	fp, #8
1bb64     A7 1E 02 FB | 	rdlong	local01, fp
1bb68     08 4E 85 F1 | 	sub	fp, #8
1bb6c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bb70     14 4E 05 A1 |  if_e	add	fp, #20
1bb74     A7 22 02 AB |  if_e	rdlong	local03, fp
1bb78     14 4E 85 A1 |  if_e	sub	fp, #20
1bb7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1bb80     1C 00 90 5D |  if_ne	jmp	#LR__2281
1bb84     A7 12 02 FB | 	rdlong	arg01, fp
1bb88     0C 4E 05 F1 | 	add	fp, #12
1bb8c     A7 14 02 FB | 	rdlong	arg02, fp
1bb90     0C 4E 85 F1 | 	sub	fp, #12
1bb94     48 5A B0 FD | 	call	#__system___string_concat
1bb98     A7 FA 61 FC | 	wrlong	result1, fp
1bb9c     10 01 90 FD | 	jmp	#LR__2285
1bba0                 | LR__2281
1bba0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1bba0     08 4E 05 F1 | 	add	fp, #8
1bba4     A7 1E 02 FB | 	rdlong	local01, fp
1bba8     08 4E 85 F1 | 	sub	fp, #8
1bbac     2B 1E 0E F2 | 	cmp	local01, #43 wz
1bbb0     14 4E 05 A1 |  if_e	add	fp, #20
1bbb4     A7 22 02 AB |  if_e	rdlong	local03, fp
1bbb8     14 4E 85 A1 |  if_e	sub	fp, #20
1bbbc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1bbc0     30 00 90 5D |  if_ne	jmp	#LR__2282
1bbc4     A7 12 02 FB | 	rdlong	arg01, fp
1bbc8     84 FD BE FD | 	call	#_convertstring
1bbcc     FD 12 02 F6 | 	mov	arg01, result1
1bbd0     0C 4E 05 F1 | 	add	fp, #12
1bbd4     A7 14 02 FB | 	rdlong	arg02, fp
1bbd8     0C 4E 85 F1 | 	sub	fp, #12
1bbdc     00 5A B0 FD | 	call	#__system___string_concat
1bbe0     A7 FA 61 FC | 	wrlong	result1, fp
1bbe4     08 4E 05 F1 | 	add	fp, #8
1bbe8     A7 3E 68 FC | 	wrlong	#31, fp
1bbec     08 4E 85 F1 | 	sub	fp, #8
1bbf0     BC 00 90 FD | 	jmp	#LR__2285
1bbf4                 | LR__2282
1bbf4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1bbf4     08 4E 05 F1 | 	add	fp, #8
1bbf8     A7 1E 02 FB | 	rdlong	local01, fp
1bbfc     08 4E 85 F1 | 	sub	fp, #8
1bc00     1F 1E 0E F2 | 	cmp	local01, #31 wz
1bc04     14 4E 05 A1 |  if_e	add	fp, #20
1bc08     A7 22 02 AB |  if_e	rdlong	local03, fp
1bc0c     14 4E 85 A1 |  if_e	sub	fp, #20
1bc10     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1bc14     28 00 90 5D |  if_ne	jmp	#LR__2283
1bc18     A7 1E 02 FB | 	rdlong	local01, fp
1bc1c     0C 4E 05 F1 | 	add	fp, #12
1bc20     A7 12 02 FB | 	rdlong	arg01, fp
1bc24     0C 4E 85 F1 | 	sub	fp, #12
1bc28     24 FD BE FD | 	call	#_convertstring
1bc2c     FD 14 02 F6 | 	mov	arg02, result1
1bc30     0F 13 02 F6 | 	mov	arg01, local01
1bc34     A8 59 B0 FD | 	call	#__system___string_concat
1bc38     A7 FA 61 FC | 	wrlong	result1, fp
1bc3c     70 00 90 FD | 	jmp	#LR__2285
1bc40                 | LR__2283
1bc40                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1bc40     08 4E 05 F1 | 	add	fp, #8
1bc44     A7 1E 02 FB | 	rdlong	local01, fp
1bc48     08 4E 85 F1 | 	sub	fp, #8
1bc4c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1bc50     14 4E 05 A1 |  if_e	add	fp, #20
1bc54     A7 22 02 AB |  if_e	rdlong	local03, fp
1bc58     14 4E 85 A1 |  if_e	sub	fp, #20
1bc5c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1bc60     3C 00 90 5D |  if_ne	jmp	#LR__2284
1bc64     A7 12 02 FB | 	rdlong	arg01, fp
1bc68     E4 FC BE FD | 	call	#_convertstring
1bc6c     FD 1E 02 F6 | 	mov	local01, result1
1bc70     0C 4E 05 F1 | 	add	fp, #12
1bc74     A7 12 02 FB | 	rdlong	arg01, fp
1bc78     0C 4E 85 F1 | 	sub	fp, #12
1bc7c     D0 FC BE FD | 	call	#_convertstring
1bc80     FD 14 02 F6 | 	mov	arg02, result1
1bc84     0F 13 02 F6 | 	mov	arg01, local01
1bc88     54 59 B0 FD | 	call	#__system___string_concat
1bc8c     A7 FA 61 FC | 	wrlong	result1, fp
1bc90     08 4E 05 F1 | 	add	fp, #8
1bc94     A7 3E 68 FC | 	wrlong	#31, fp
1bc98     08 4E 85 F1 | 	sub	fp, #8
1bc9c     10 00 90 FD | 	jmp	#LR__2285
1bca0                 | LR__2284
1bca0     A7 08 68 FC | 	wrlong	#4, fp
1bca4     08 4E 05 F1 | 	add	fp, #8
1bca8     A7 FE 69 FC | 	wrlong	#255, fp
1bcac     08 4E 85 F1 | 	sub	fp, #8
1bcb0                 | LR__2285
1bcb0     A7 12 02 F6 | 	mov	arg01, fp
1bcb4     B8 FB BE FD | 	call	#_push
1bcb8     A7 F0 03 F6 | 	mov	ptra, fp
1bcbc     B2 00 A0 FD | 	call	#popregs_
1bcc0                 | _do_plus_ret
1bcc0     2D 00 64 FD | 	ret
1bcc4                 | 
1bcc4                 | ' 
1bcc4                 | ' '--------------------------------- power (^)
1bcc4                 | ' 
1bcc4                 | ' sub do_power 
1bcc4                 | _do_power
1bcc4     02 4A 05 F6 | 	mov	COUNT_, #2
1bcc8     A8 00 A0 FD | 	call	#pushregs_
1bccc     18 F0 07 F1 | 	add	ptra, #24
1bcd0     04 FB BE FD | 	call	#_pop
1bcd4     FD 14 02 F6 | 	mov	arg02, result1
1bcd8     FE 12 02 F6 | 	mov	arg01, result2
1bcdc     FF 1E 02 F6 | 	mov	local01, result3
1bce0     0C 4E 05 F1 | 	add	fp, #12
1bce4     A7 14 62 FC | 	wrlong	arg02, fp
1bce8     04 4E 05 F1 | 	add	fp, #4
1bcec     A7 12 62 FC | 	wrlong	arg01, fp
1bcf0     04 4E 05 F1 | 	add	fp, #4
1bcf4     A7 1E 62 FC | 	wrlong	local01, fp
1bcf8     14 4E 85 F1 | 	sub	fp, #20
1bcfc     D8 FA BE FD | 	call	#_pop
1bd00     A7 FA 61 FC | 	wrlong	result1, fp
1bd04     04 4E 05 F1 | 	add	fp, #4
1bd08     A7 FC 61 FC | 	wrlong	result2, fp
1bd0c     04 4E 05 F1 | 	add	fp, #4
1bd10     A7 FE 61 FC | 	wrlong	result3, fp
1bd14                 | ' 
1bd14                 | ' t2=pop()
1bd14                 | ' t1=pop()
1bd14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1bd14     08 4E 85 F1 | 	sub	fp, #8
1bd18     1F FE 0D F2 | 	cmp	result3, #31 wz
1bd1c     14 4E 05 51 |  if_ne	add	fp, #20
1bd20     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1bd24     14 4E 85 51 |  if_ne	sub	fp, #20
1bd28     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1bd2c     A7 18 68 AC |  if_e	wrlong	#12, fp
1bd30     08 4E 05 A1 |  if_e	add	fp, #8
1bd34     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bd38     08 4E 85 A1 |  if_e	sub	fp, #8
1bd3c     38 01 90 AD |  if_e	jmp	#LR__2295
1bd40                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1bd40     08 4E 05 F1 | 	add	fp, #8
1bd44     A7 14 02 FB | 	rdlong	arg02, fp
1bd48     08 4E 85 F1 | 	sub	fp, #8
1bd4c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1bd50     28 00 90 5D |  if_ne	jmp	#LR__2290
1bd54     08 4E 05 F1 | 	add	fp, #8
1bd58     A7 3C 68 FC | 	wrlong	#30, fp
1bd5c     08 4E 85 F1 | 	sub	fp, #8
1bd60     A7 12 02 FB | 	rdlong	arg01, fp
1bd64     09 13 52 F6 | 	abs	arg01, arg01 wc
1bd68     1F 20 C6 C9 |  if_b	decod	local02, #31
1bd6c     00 20 06 36 |  if_ae	mov	local02, #0
1bd70     C8 81 B0 FD | 	call	#__system___float_fromuns
1bd74     10 FB 61 F5 | 	xor	result1, local02
1bd78     A7 FA 61 FC | 	wrlong	result1, fp
1bd7c                 | LR__2290
1bd7c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1bd7c     08 4E 05 F1 | 	add	fp, #8
1bd80     A7 14 02 FB | 	rdlong	arg02, fp
1bd84     08 4E 85 F1 | 	sub	fp, #8
1bd88     1D 14 0E F2 | 	cmp	arg02, #29 wz
1bd8c     18 00 90 5D |  if_ne	jmp	#LR__2291
1bd90     08 4E 05 F1 | 	add	fp, #8
1bd94     A7 3C 68 FC | 	wrlong	#30, fp
1bd98     08 4E 85 F1 | 	sub	fp, #8
1bd9c     A7 12 02 FB | 	rdlong	arg01, fp
1bda0     98 81 B0 FD | 	call	#__system___float_fromuns
1bda4     A7 FA 61 FC | 	wrlong	result1, fp
1bda8                 | LR__2291
1bda8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1bda8     14 4E 05 F1 | 	add	fp, #20
1bdac     A7 14 02 FB | 	rdlong	arg02, fp
1bdb0     14 4E 85 F1 | 	sub	fp, #20
1bdb4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1bdb8     34 00 90 5D |  if_ne	jmp	#LR__2292
1bdbc     14 4E 05 F1 | 	add	fp, #20
1bdc0     A7 3C 68 FC | 	wrlong	#30, fp
1bdc4     08 4E 85 F1 | 	sub	fp, #8
1bdc8     A7 12 02 FB | 	rdlong	arg01, fp
1bdcc     0C 4E 85 F1 | 	sub	fp, #12
1bdd0     09 13 52 F6 | 	abs	arg01, arg01 wc
1bdd4     1F 20 C6 C9 |  if_b	decod	local02, #31
1bdd8     00 20 06 36 |  if_ae	mov	local02, #0
1bddc     5C 81 B0 FD | 	call	#__system___float_fromuns
1bde0     10 FB 61 F5 | 	xor	result1, local02
1bde4     0C 4E 05 F1 | 	add	fp, #12
1bde8     A7 FA 61 FC | 	wrlong	result1, fp
1bdec     0C 4E 85 F1 | 	sub	fp, #12
1bdf0                 | LR__2292
1bdf0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1bdf0     14 4E 05 F1 | 	add	fp, #20
1bdf4     A7 14 02 FB | 	rdlong	arg02, fp
1bdf8     14 4E 85 F1 | 	sub	fp, #20
1bdfc     1D 14 0E F2 | 	cmp	arg02, #29 wz
1be00     24 00 90 5D |  if_ne	jmp	#LR__2293
1be04     14 4E 05 F1 | 	add	fp, #20
1be08     A7 3C 68 FC | 	wrlong	#30, fp
1be0c     08 4E 85 F1 | 	sub	fp, #8
1be10     A7 12 02 FB | 	rdlong	arg01, fp
1be14     0C 4E 85 F1 | 	sub	fp, #12
1be18     20 81 B0 FD | 	call	#__system___float_fromuns
1be1c     0C 4E 05 F1 | 	add	fp, #12
1be20     A7 FA 61 FC | 	wrlong	result1, fp
1be24     0C 4E 85 F1 | 	sub	fp, #12
1be28                 | LR__2293
1be28                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1be28     08 4E 05 F1 | 	add	fp, #8
1be2c     A7 14 02 FB | 	rdlong	arg02, fp
1be30     08 4E 85 F1 | 	sub	fp, #8
1be34     1E 14 0E F2 | 	cmp	arg02, #30 wz
1be38     14 4E 05 A1 |  if_e	add	fp, #20
1be3c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1be40     14 4E 85 A1 |  if_e	sub	fp, #20
1be44     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1be48     1C 00 90 5D |  if_ne	jmp	#LR__2294
1be4c     A7 12 02 FB | 	rdlong	arg01, fp
1be50     0C 4E 05 F1 | 	add	fp, #12
1be54     A7 14 02 FB | 	rdlong	arg02, fp
1be58     0C 4E 85 F1 | 	sub	fp, #12
1be5c     E8 93 B0 FD | 	call	#__system____builtin_powf
1be60     A7 FA 61 FC | 	wrlong	result1, fp
1be64     10 00 90 FD | 	jmp	#LR__2295
1be68                 | LR__2294
1be68     A7 1A 68 FC | 	wrlong	#13, fp
1be6c     08 4E 05 F1 | 	add	fp, #8
1be70     A7 FE 69 FC | 	wrlong	#255, fp
1be74     08 4E 85 F1 | 	sub	fp, #8
1be78                 | LR__2295
1be78     A7 12 02 F6 | 	mov	arg01, fp
1be7c     F0 F9 BE FD | 	call	#_push
1be80     A7 F0 03 F6 | 	mov	ptra, fp
1be84     B2 00 A0 FD | 	call	#popregs_
1be88                 | _do_power_ret
1be88     2D 00 64 FD | 	ret
1be8c                 | 
1be8c                 | ' 
1be8c                 | ' '--------------------------------- SHL
1be8c                 | ' 
1be8c                 | ' sub do_shl 
1be8c                 | _do_shl
1be8c     03 4A 05 F6 | 	mov	COUNT_, #3
1be90     A8 00 A0 FD | 	call	#pushregs_
1be94     18 F0 07 F1 | 	add	ptra, #24
1be98     3C F9 BE FD | 	call	#_pop
1be9c     FD 12 02 F6 | 	mov	arg01, result1
1bea0     FE 1E 02 F6 | 	mov	local01, result2
1bea4     FF 20 02 F6 | 	mov	local02, result3
1bea8     0C 4E 05 F1 | 	add	fp, #12
1beac     A7 12 62 FC | 	wrlong	arg01, fp
1beb0     04 4E 05 F1 | 	add	fp, #4
1beb4     A7 1E 62 FC | 	wrlong	local01, fp
1beb8     04 4E 05 F1 | 	add	fp, #4
1bebc     A7 20 62 FC | 	wrlong	local02, fp
1bec0     14 4E 85 F1 | 	sub	fp, #20
1bec4     10 F9 BE FD | 	call	#_pop
1bec8     FF 22 02 F6 | 	mov	local03, result3
1becc     A7 FA 61 FC | 	wrlong	result1, fp
1bed0     04 4E 05 F1 | 	add	fp, #4
1bed4     A7 FC 61 FC | 	wrlong	result2, fp
1bed8     04 4E 05 F1 | 	add	fp, #4
1bedc     A7 22 62 FC | 	wrlong	local03, fp
1bee0                 | ' 
1bee0                 | ' t2=pop()
1bee0                 | ' t1=pop()
1bee0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bee0     08 4E 85 F1 | 	sub	fp, #8
1bee4     1C 22 0E F2 | 	cmp	local03, #28 wz
1bee8     A7 22 02 AB |  if_e	rdlong	local03, fp
1beec     A7 22 62 AC |  if_e	wrlong	local03, fp
1bef0     08 4E 05 A1 |  if_e	add	fp, #8
1bef4     A7 3A 68 AC |  if_e	wrlong	#29, fp
1bef8     08 4E 85 A1 |  if_e	sub	fp, #8
1befc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1befc     14 4E 05 F1 | 	add	fp, #20
1bf00     A7 22 02 FB | 	rdlong	local03, fp
1bf04     14 4E 85 F1 | 	sub	fp, #20
1bf08     1C 22 0E F2 | 	cmp	local03, #28 wz
1bf0c     18 00 90 5D |  if_ne	jmp	#LR__2300
1bf10     0C 4E 05 F1 | 	add	fp, #12
1bf14     A7 22 02 FB | 	rdlong	local03, fp
1bf18     A7 22 62 FC | 	wrlong	local03, fp
1bf1c     08 4E 05 F1 | 	add	fp, #8
1bf20     A7 3A 68 FC | 	wrlong	#29, fp
1bf24     14 4E 85 F1 | 	sub	fp, #20
1bf28                 | LR__2300
1bf28                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1bf28     08 4E 05 F1 | 	add	fp, #8
1bf2c     A7 22 02 FB | 	rdlong	local03, fp
1bf30     08 4E 85 F1 | 	sub	fp, #8
1bf34     1F 22 0E F2 | 	cmp	local03, #31 wz
1bf38     14 4E 05 51 |  if_ne	add	fp, #20
1bf3c     A7 20 02 5B |  if_ne	rdlong	local02, fp
1bf40     14 4E 85 51 |  if_ne	sub	fp, #20
1bf44     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1bf48     08 4E 05 51 |  if_ne	add	fp, #8
1bf4c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1bf50     08 4E 85 51 |  if_ne	sub	fp, #8
1bf54     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1bf58     14 4E 05 51 |  if_ne	add	fp, #20
1bf5c     14 4E 85 51 |  if_ne	sub	fp, #20
1bf60     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1bf64     A7 0C 68 AC |  if_e	wrlong	#6, fp
1bf68     08 4E 05 A1 |  if_e	add	fp, #8
1bf6c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bf70     08 4E 85 A1 |  if_e	sub	fp, #8
1bf74     18 00 90 AD |  if_e	jmp	#LR__2301
1bf78     A7 22 02 FB | 	rdlong	local03, fp
1bf7c     0C 4E 05 F1 | 	add	fp, #12
1bf80     A7 1E 02 FB | 	rdlong	local01, fp
1bf84     0C 4E 85 F1 | 	sub	fp, #12
1bf88     0F 23 62 F0 | 	shl	local03, local01
1bf8c     A7 22 62 FC | 	wrlong	local03, fp
1bf90                 | LR__2301
1bf90     A7 12 02 F6 | 	mov	arg01, fp
1bf94     D8 F8 BE FD | 	call	#_push
1bf98     A7 F0 03 F6 | 	mov	ptra, fp
1bf9c     B2 00 A0 FD | 	call	#popregs_
1bfa0                 | _do_shl_ret
1bfa0     2D 00 64 FD | 	ret
1bfa4                 | 
1bfa4                 | ' 
1bfa4                 | ' '--------------------------------- SHR
1bfa4                 | ' 
1bfa4                 | ' sub do_shr 
1bfa4                 | _do_shr
1bfa4     03 4A 05 F6 | 	mov	COUNT_, #3
1bfa8     A8 00 A0 FD | 	call	#pushregs_
1bfac     18 F0 07 F1 | 	add	ptra, #24
1bfb0     24 F8 BE FD | 	call	#_pop
1bfb4     FD 12 02 F6 | 	mov	arg01, result1
1bfb8     FE 1E 02 F6 | 	mov	local01, result2
1bfbc     FF 20 02 F6 | 	mov	local02, result3
1bfc0     0C 4E 05 F1 | 	add	fp, #12
1bfc4     A7 12 62 FC | 	wrlong	arg01, fp
1bfc8     04 4E 05 F1 | 	add	fp, #4
1bfcc     A7 1E 62 FC | 	wrlong	local01, fp
1bfd0     04 4E 05 F1 | 	add	fp, #4
1bfd4     A7 20 62 FC | 	wrlong	local02, fp
1bfd8     14 4E 85 F1 | 	sub	fp, #20
1bfdc     F8 F7 BE FD | 	call	#_pop
1bfe0     FF 22 02 F6 | 	mov	local03, result3
1bfe4     A7 FA 61 FC | 	wrlong	result1, fp
1bfe8     04 4E 05 F1 | 	add	fp, #4
1bfec     A7 FC 61 FC | 	wrlong	result2, fp
1bff0     04 4E 05 F1 | 	add	fp, #4
1bff4     A7 22 62 FC | 	wrlong	local03, fp
1bff8                 | ' 
1bff8                 | ' t2=pop()
1bff8                 | ' t1=pop()
1bff8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bff8     08 4E 85 F1 | 	sub	fp, #8
1bffc     1C 22 0E F2 | 	cmp	local03, #28 wz
1c000     A7 22 02 AB |  if_e	rdlong	local03, fp
1c004     A7 22 62 AC |  if_e	wrlong	local03, fp
1c008     08 4E 05 A1 |  if_e	add	fp, #8
1c00c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c010     08 4E 85 A1 |  if_e	sub	fp, #8
1c014                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c014     14 4E 05 F1 | 	add	fp, #20
1c018     A7 22 02 FB | 	rdlong	local03, fp
1c01c     14 4E 85 F1 | 	sub	fp, #20
1c020     1C 22 0E F2 | 	cmp	local03, #28 wz
1c024     18 00 90 5D |  if_ne	jmp	#LR__2310
1c028     0C 4E 05 F1 | 	add	fp, #12
1c02c     A7 22 02 FB | 	rdlong	local03, fp
1c030     A7 22 62 FC | 	wrlong	local03, fp
1c034     08 4E 05 F1 | 	add	fp, #8
1c038     A7 3A 68 FC | 	wrlong	#29, fp
1c03c     14 4E 85 F1 | 	sub	fp, #20
1c040                 | LR__2310
1c040                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1c040     08 4E 05 F1 | 	add	fp, #8
1c044     A7 22 02 FB | 	rdlong	local03, fp
1c048     08 4E 85 F1 | 	sub	fp, #8
1c04c     1F 22 0E F2 | 	cmp	local03, #31 wz
1c050     14 4E 05 51 |  if_ne	add	fp, #20
1c054     A7 20 02 5B |  if_ne	rdlong	local02, fp
1c058     14 4E 85 51 |  if_ne	sub	fp, #20
1c05c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1c060     08 4E 05 51 |  if_ne	add	fp, #8
1c064     A7 22 02 5B |  if_ne	rdlong	local03, fp
1c068     08 4E 85 51 |  if_ne	sub	fp, #8
1c06c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1c070     14 4E 05 51 |  if_ne	add	fp, #20
1c074     14 4E 85 51 |  if_ne	sub	fp, #20
1c078     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1c07c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c080     08 4E 05 A1 |  if_e	add	fp, #8
1c084     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c088     08 4E 85 A1 |  if_e	sub	fp, #8
1c08c     18 00 90 AD |  if_e	jmp	#LR__2311
1c090     A7 22 02 FB | 	rdlong	local03, fp
1c094     0C 4E 05 F1 | 	add	fp, #12
1c098     A7 1E 02 FB | 	rdlong	local01, fp
1c09c     0C 4E 85 F1 | 	sub	fp, #12
1c0a0     0F 23 42 F0 | 	shr	local03, local01
1c0a4     A7 22 62 FC | 	wrlong	local03, fp
1c0a8                 | LR__2311
1c0a8     A7 12 02 F6 | 	mov	arg01, fp
1c0ac     C0 F7 BE FD | 	call	#_push
1c0b0     A7 F0 03 F6 | 	mov	ptra, fp
1c0b4     B2 00 A0 FD | 	call	#popregs_
1c0b8                 | _do_shr_ret
1c0b8     2D 00 64 FD | 	ret
1c0bc                 | 
1c0bc                 | ' 
1c0bc                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1c0bc                 | ' 
1c0bc                 | ' ''----------------------------------------------------------------------------------------------------
1c0bc                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1c0bc                 | ' ''----------------------------------------------------------------------------------------------------
1c0bc                 | ' 
1c0bc                 | ' ''--------------------------- Command function pointers
1c0bc                 | ' 
1c0bc                 | ' sub init_commands
1c0bc                 | _init_commands
1c0bc                 | ' 
1c0bc                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1c0bc     00 00 06 F6 | 	mov	_var01, #0
1c0c0     97 16 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1c0c4                 | LR__2320
1c0c4     00 FB 01 F6 | 	mov	result1, _var01
1c0c8     02 FA 65 F0 | 	shl	result1, #2
1c0cc     43 00 00 FF 
1c0d0     60 E4 05 F1 | 	add	objptr, ##34400
1c0d4     F2 FA 01 F1 | 	add	result1, objptr
1c0d8     43 00 00 FF 
1c0dc     60 E4 85 F1 | 	sub	objptr, ##34400
1c0e0     FD E4 61 FC | 	wrlong	objptr, result1
1c0e4     01 00 06 F1 | 	add	_var01, #1
1c0e8     00 01 56 F2 | 	cmps	_var01, #256 wc
1c0ec     D4 FF 9F CD |  if_b	jmp	#LR__2320
1c0f0                 | LR__2321
1c0f0     F2 FA 01 F6 | 	mov	result1, objptr
1c0f4     14 FA 25 F4 | 	bith	result1, #20
1c0f8     43 00 00 FF 
1c0fc     64 E4 05 F1 | 	add	objptr, ##34404
1c100     F2 FA 61 FC | 	wrlong	result1, objptr
1c104     43 00 00 FF 
1c108     64 E4 85 F1 | 	sub	objptr, ##34404
1c10c     F2 FA 01 F6 | 	mov	result1, objptr
1c110     15 FA 25 F4 | 	bith	result1, #21
1c114     43 00 00 FF 
1c118     68 E4 05 F1 | 	add	objptr, ##34408
1c11c     F2 FA 61 FC | 	wrlong	result1, objptr
1c120     43 00 00 FF 
1c124     68 E4 85 F1 | 	sub	objptr, ##34408
1c128     F2 FA 01 F6 | 	mov	result1, objptr
1c12c     34 FA 25 F4 | 	bith	result1, #52
1c130     43 00 00 FF 
1c134     6C E4 05 F1 | 	add	objptr, ##34412
1c138     F2 FA 61 FC | 	wrlong	result1, objptr
1c13c     43 00 00 FF 
1c140     6C E4 85 F1 | 	sub	objptr, ##34412
1c144     F2 FA 01 F6 | 	mov	result1, objptr
1c148     16 FA 25 F4 | 	bith	result1, #22
1c14c     43 00 00 FF 
1c150     74 E4 05 F1 | 	add	objptr, ##34420
1c154     F2 FA 61 FC | 	wrlong	result1, objptr
1c158     43 00 00 FF 
1c15c     74 E4 85 F1 | 	sub	objptr, ##34420
1c160     F2 FA 01 F6 | 	mov	result1, objptr
1c164     00 28 00 FF 
1c168     00 FA 45 F5 | 	or	result1, ##5242880
1c16c     43 00 00 FF 
1c170     78 E4 05 F1 | 	add	objptr, ##34424
1c174     F2 FA 61 FC | 	wrlong	result1, objptr
1c178     43 00 00 FF 
1c17c     78 E4 85 F1 | 	sub	objptr, ##34424
1c180     F2 FA 01 F6 | 	mov	result1, objptr
1c184     35 FA 25 F4 | 	bith	result1, #53
1c188     43 00 00 FF 
1c18c     7C E4 05 F1 | 	add	objptr, ##34428
1c190     F2 FA 61 FC | 	wrlong	result1, objptr
1c194     43 00 00 FF 
1c198     7C E4 85 F1 | 	sub	objptr, ##34428
1c19c     F2 FA 01 F6 | 	mov	result1, objptr
1c1a0     54 FA 25 F4 | 	bith	result1, #84
1c1a4     43 00 00 FF 
1c1a8     80 E4 05 F1 | 	add	objptr, ##34432
1c1ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b0     43 00 00 FF 
1c1b4     80 E4 85 F1 | 	sub	objptr, ##34432
1c1b8     F2 FA 01 F6 | 	mov	result1, objptr
1c1bc     17 FA 25 F4 | 	bith	result1, #23
1c1c0     43 00 00 FF 
1c1c4     84 E4 05 F1 | 	add	objptr, ##34436
1c1c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1cc     43 00 00 FF 
1c1d0     84 E4 85 F1 | 	sub	objptr, ##34436
1c1d4     F2 FA 01 F6 | 	mov	result1, objptr
1c1d8     00 48 00 FF 
1c1dc     00 FA 45 F5 | 	or	result1, ##9437184
1c1e0     43 00 00 FF 
1c1e4     88 E4 05 F1 | 	add	objptr, ##34440
1c1e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1ec     43 00 00 FF 
1c1f0     88 E4 85 F1 | 	sub	objptr, ##34440
1c1f4     F2 FA 01 F6 | 	mov	result1, objptr
1c1f8     00 50 00 FF 
1c1fc     00 FA 45 F5 | 	or	result1, ##10485760
1c200     43 00 00 FF 
1c204     8C E4 05 F1 | 	add	objptr, ##34444
1c208     F2 FA 61 FC | 	wrlong	result1, objptr
1c20c     43 00 00 FF 
1c210     8C E4 85 F1 | 	sub	objptr, ##34444
1c214     F2 FA 01 F6 | 	mov	result1, objptr
1c218     00 58 00 FF 
1c21c     00 FA 45 F5 | 	or	result1, ##11534336
1c220     43 00 00 FF 
1c224     90 E4 05 F1 | 	add	objptr, ##34448
1c228     F2 FA 61 FC | 	wrlong	result1, objptr
1c22c     43 00 00 FF 
1c230     90 E4 85 F1 | 	sub	objptr, ##34448
1c234     F2 FA 01 F6 | 	mov	result1, objptr
1c238     36 FA 25 F4 | 	bith	result1, #54
1c23c     43 00 00 FF 
1c240     A4 E4 05 F1 | 	add	objptr, ##34468
1c244     F2 FA 61 FC | 	wrlong	result1, objptr
1c248     43 00 00 FF 
1c24c     A4 E4 85 F1 | 	sub	objptr, ##34468
1c250     F2 FA 01 F6 | 	mov	result1, objptr
1c254     00 68 00 FF 
1c258     00 FA 45 F5 | 	or	result1, ##13631488
1c25c     43 00 00 FF 
1c260     D4 E4 05 F1 | 	add	objptr, ##34516
1c264     F2 FA 61 FC | 	wrlong	result1, objptr
1c268     43 00 00 FF 
1c26c     D4 E4 85 F1 | 	sub	objptr, ##34516
1c270     F2 FA 01 F6 | 	mov	result1, objptr
1c274     00 68 00 FF 
1c278     00 FA 45 F5 | 	or	result1, ##13631488
1c27c     43 00 00 FF 
1c280     D0 E4 05 F1 | 	add	objptr, ##34512
1c284     F2 FA 61 FC | 	wrlong	result1, objptr
1c288     43 00 00 FF 
1c28c     D0 E4 85 F1 | 	sub	objptr, ##34512
1c290     F2 FA 01 F6 | 	mov	result1, objptr
1c294     00 68 00 FF 
1c298     00 FA 45 F5 | 	or	result1, ##13631488
1c29c     43 00 00 FF 
1c2a0     D8 E4 05 F1 | 	add	objptr, ##34520
1c2a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2a8     43 00 00 FF 
1c2ac     D8 E4 85 F1 | 	sub	objptr, ##34520
1c2b0     F2 FA 01 F6 | 	mov	result1, objptr
1c2b4     00 68 00 FF 
1c2b8     00 FA 45 F5 | 	or	result1, ##13631488
1c2bc     43 00 00 FF 
1c2c0     DC E4 05 F1 | 	add	objptr, ##34524
1c2c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2c8     43 00 00 FF 
1c2cc     DC E4 85 F1 | 	sub	objptr, ##34524
1c2d0     F2 FA 01 F6 | 	mov	result1, objptr
1c2d4     00 68 00 FF 
1c2d8     00 FA 45 F5 | 	or	result1, ##13631488
1c2dc     43 00 00 FF 
1c2e0     0C E5 05 F1 | 	add	objptr, ##34572
1c2e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2e8     43 00 00 FF 
1c2ec     0C E5 85 F1 | 	sub	objptr, ##34572
1c2f0     F2 FA 01 F6 | 	mov	result1, objptr
1c2f4     55 FA 25 F4 | 	bith	result1, #85
1c2f8     43 00 00 FF 
1c2fc     BC E4 05 F1 | 	add	objptr, ##34492
1c300     F2 FA 61 FC | 	wrlong	result1, objptr
1c304     43 00 00 FF 
1c308     BC E4 85 F1 | 	sub	objptr, ##34492
1c30c     F2 FA 01 F6 | 	mov	result1, objptr
1c310     00 68 00 FF 
1c314     00 FA 45 F5 | 	or	result1, ##13631488
1c318     43 00 00 FF 
1c31c     10 E5 05 F1 | 	add	objptr, ##34576
1c320     F2 FA 61 FC | 	wrlong	result1, objptr
1c324     43 00 00 FF 
1c328     10 E5 85 F1 | 	sub	objptr, ##34576
1c32c     F2 FA 01 F6 | 	mov	result1, objptr
1c330     00 68 00 FF 
1c334     00 FA 45 F5 | 	or	result1, ##13631488
1c338     43 00 00 FF 
1c33c     E0 E4 05 F1 | 	add	objptr, ##34528
1c340     F2 FA 61 FC | 	wrlong	result1, objptr
1c344     43 00 00 FF 
1c348     E0 E4 85 F1 | 	sub	objptr, ##34528
1c34c     F2 FA 01 F6 | 	mov	result1, objptr
1c350     00 68 00 FF 
1c354     00 FA 45 F5 | 	or	result1, ##13631488
1c358     43 00 00 FF 
1c35c     E4 E4 05 F1 | 	add	objptr, ##34532
1c360     F2 FA 61 FC | 	wrlong	result1, objptr
1c364     43 00 00 FF 
1c368     E4 E4 85 F1 | 	sub	objptr, ##34532
1c36c     F2 FA 01 F6 | 	mov	result1, objptr
1c370     00 68 00 FF 
1c374     00 FA 45 F5 | 	or	result1, ##13631488
1c378     43 00 00 FF 
1c37c     E8 E4 05 F1 | 	add	objptr, ##34536
1c380     F2 FA 61 FC | 	wrlong	result1, objptr
1c384     43 00 00 FF 
1c388     E8 E4 85 F1 | 	sub	objptr, ##34536
1c38c     F2 FA 01 F6 | 	mov	result1, objptr
1c390     74 FA 25 F4 | 	bith	result1, #116
1c394     43 00 00 FF 
1c398     60 E5 05 F1 | 	add	objptr, ##34656
1c39c     F2 FA 61 FC | 	wrlong	result1, objptr
1c3a0     43 00 00 FF 
1c3a4     60 E5 85 F1 | 	sub	objptr, ##34656
1c3a8     F2 FA 01 F6 | 	mov	result1, objptr
1c3ac     18 FA 25 F4 | 	bith	result1, #24
1c3b0     43 00 00 FF 
1c3b4     64 E5 05 F1 | 	add	objptr, ##34660
1c3b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3bc     43 00 00 FF 
1c3c0     64 E5 85 F1 | 	sub	objptr, ##34660
1c3c4     F2 FA 01 F6 | 	mov	result1, objptr
1c3c8     00 88 00 FF 
1c3cc     00 FA 45 F5 | 	or	result1, ##17825792
1c3d0     43 00 00 FF 
1c3d4     68 E5 05 F1 | 	add	objptr, ##34664
1c3d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3dc     43 00 00 FF 
1c3e0     68 E5 85 F1 | 	sub	objptr, ##34664
1c3e4     F2 FA 01 F6 | 	mov	result1, objptr
1c3e8     00 90 00 FF 
1c3ec     00 FA 45 F5 | 	or	result1, ##18874368
1c3f0     43 00 00 FF 
1c3f4     6C E5 05 F1 | 	add	objptr, ##34668
1c3f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3fc     43 00 00 FF 
1c400     6C E5 85 F1 | 	sub	objptr, ##34668
1c404     F2 FA 01 F6 | 	mov	result1, objptr
1c408     00 98 00 FF 
1c40c     00 FA 45 F5 | 	or	result1, ##19922944
1c410     43 00 00 FF 
1c414     70 E5 05 F1 | 	add	objptr, ##34672
1c418     F2 FA 61 FC | 	wrlong	result1, objptr
1c41c     43 00 00 FF 
1c420     70 E5 85 F1 | 	sub	objptr, ##34672
1c424     F2 FA 01 F6 | 	mov	result1, objptr
1c428     00 A0 00 FF 
1c42c     00 FA 45 F5 | 	or	result1, ##20971520
1c430     43 00 00 FF 
1c434     74 E5 05 F1 | 	add	objptr, ##34676
1c438     F2 FA 61 FC | 	wrlong	result1, objptr
1c43c     43 00 00 FF 
1c440     74 E5 85 F1 | 	sub	objptr, ##34676
1c444     F2 FA 01 F6 | 	mov	result1, objptr
1c448     00 A8 00 FF 
1c44c     00 FA 45 F5 | 	or	result1, ##22020096
1c450     43 00 00 FF 
1c454     78 E5 05 F1 | 	add	objptr, ##34680
1c458     F2 FA 61 FC | 	wrlong	result1, objptr
1c45c     43 00 00 FF 
1c460     78 E5 85 F1 | 	sub	objptr, ##34680
1c464     F2 FA 01 F6 | 	mov	result1, objptr
1c468     00 B0 00 FF 
1c46c     00 FA 45 F5 | 	or	result1, ##23068672
1c470     43 00 00 FF 
1c474     7C E5 05 F1 | 	add	objptr, ##34684
1c478     F2 FA 61 FC | 	wrlong	result1, objptr
1c47c     43 00 00 FF 
1c480     7C E5 85 F1 | 	sub	objptr, ##34684
1c484     F2 FA 01 F6 | 	mov	result1, objptr
1c488     00 B8 00 FF 
1c48c     00 FA 45 F5 | 	or	result1, ##24117248
1c490     43 00 00 FF 
1c494     80 E5 05 F1 | 	add	objptr, ##34688
1c498     F2 FA 61 FC | 	wrlong	result1, objptr
1c49c     43 00 00 FF 
1c4a0     80 E5 85 F1 | 	sub	objptr, ##34688
1c4a4     F2 FA 01 F6 | 	mov	result1, objptr
1c4a8     37 FA 25 F4 | 	bith	result1, #55
1c4ac     43 00 00 FF 
1c4b0     84 E5 05 F1 | 	add	objptr, ##34692
1c4b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4b8     43 00 00 FF 
1c4bc     84 E5 85 F1 | 	sub	objptr, ##34692
1c4c0     F2 FA 01 F6 | 	mov	result1, objptr
1c4c4     00 C8 00 FF 
1c4c8     00 FA 45 F5 | 	or	result1, ##26214400
1c4cc     43 00 00 FF 
1c4d0     88 E5 05 F1 | 	add	objptr, ##34696
1c4d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4d8     43 00 00 FF 
1c4dc     88 E5 85 F1 | 	sub	objptr, ##34696
1c4e0     F2 FA 01 F6 | 	mov	result1, objptr
1c4e4     00 D0 00 FF 
1c4e8     00 FA 45 F5 | 	or	result1, ##27262976
1c4ec     43 00 00 FF 
1c4f0     8C E5 05 F1 | 	add	objptr, ##34700
1c4f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f8     43 00 00 FF 
1c4fc     8C E5 85 F1 | 	sub	objptr, ##34700
1c500     F2 FA 01 F6 | 	mov	result1, objptr
1c504     00 D8 00 FF 
1c508     00 FA 45 F5 | 	or	result1, ##28311552
1c50c     43 00 00 FF 
1c510     90 E5 05 F1 | 	add	objptr, ##34704
1c514     F2 FA 61 FC | 	wrlong	result1, objptr
1c518     43 00 00 FF 
1c51c     90 E5 85 F1 | 	sub	objptr, ##34704
1c520     F2 FA 01 F6 | 	mov	result1, objptr
1c524     56 FA 25 F4 | 	bith	result1, #86
1c528     43 00 00 FF 
1c52c     94 E5 05 F1 | 	add	objptr, ##34708
1c530     F2 FA 61 FC | 	wrlong	result1, objptr
1c534     43 00 00 FF 
1c538     94 E5 85 F1 | 	sub	objptr, ##34708
1c53c     F2 FA 01 F6 | 	mov	result1, objptr
1c540     00 E8 00 FF 
1c544     00 FA 45 F5 | 	or	result1, ##30408704
1c548     45 00 00 FF 
1c54c     5C E4 05 F1 | 	add	objptr, ##35420
1c550     F2 FA 61 FC | 	wrlong	result1, objptr
1c554     45 00 00 FF 
1c558     5C E4 85 F1 | 	sub	objptr, ##35420
1c55c     F2 FA 01 F6 | 	mov	result1, objptr
1c560     75 FA 25 F4 | 	bith	result1, #117
1c564     43 00 00 FF 
1c568     98 E5 05 F1 | 	add	objptr, ##34712
1c56c     F2 FA 61 FC | 	wrlong	result1, objptr
1c570     43 00 00 FF 
1c574     98 E5 85 F1 | 	sub	objptr, ##34712
1c578     F2 FA 01 F6 | 	mov	result1, objptr
1c57c     94 FA 25 F4 | 	bith	result1, #148
1c580     43 00 00 FF 
1c584     AC E5 05 F1 | 	add	objptr, ##34732
1c588     F2 FA 61 FC | 	wrlong	result1, objptr
1c58c     43 00 00 FF 
1c590     AC E5 85 F1 | 	sub	objptr, ##34732
1c594     F2 FA 01 F6 | 	mov	result1, objptr
1c598     19 FA 25 F4 | 	bith	result1, #25
1c59c     43 00 00 FF 
1c5a0     9C E5 05 F1 | 	add	objptr, ##34716
1c5a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5a8     43 00 00 FF 
1c5ac     9C E5 85 F1 | 	sub	objptr, ##34716
1c5b0     F2 FA 01 F6 | 	mov	result1, objptr
1c5b4     00 08 01 FF 
1c5b8     00 FA 45 F5 | 	or	result1, ##34603008
1c5bc     43 00 00 FF 
1c5c0     B8 E4 05 F1 | 	add	objptr, ##34488
1c5c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5c8     43 00 00 FF 
1c5cc     B8 E4 85 F1 | 	sub	objptr, ##34488
1c5d0     F2 FA 01 F6 | 	mov	result1, objptr
1c5d4     00 10 01 FF 
1c5d8     00 FA 45 F5 | 	or	result1, ##35651584
1c5dc     43 00 00 FF 
1c5e0     A0 E5 05 F1 | 	add	objptr, ##34720
1c5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5e8     43 00 00 FF 
1c5ec     A0 E5 85 F1 | 	sub	objptr, ##34720
1c5f0     F2 FA 01 F6 | 	mov	result1, objptr
1c5f4     00 18 01 FF 
1c5f8     00 FA 45 F5 | 	or	result1, ##36700160
1c5fc     43 00 00 FF 
1c600     A4 E5 05 F1 | 	add	objptr, ##34724
1c604     F2 FA 61 FC | 	wrlong	result1, objptr
1c608     43 00 00 FF 
1c60c     A4 E5 85 F1 | 	sub	objptr, ##34724
1c610     F2 FA 01 F6 | 	mov	result1, objptr
1c614     00 20 01 FF 
1c618     00 FA 45 F5 | 	or	result1, ##37748736
1c61c     43 00 00 FF 
1c620     A8 E5 05 F1 | 	add	objptr, ##34728
1c624     F2 FA 61 FC | 	wrlong	result1, objptr
1c628     43 00 00 FF 
1c62c     A8 E5 85 F1 | 	sub	objptr, ##34728
1c630     F2 FA 01 F6 | 	mov	result1, objptr
1c634     00 28 01 FF 
1c638     00 FA 45 F5 | 	or	result1, ##38797312
1c63c     43 00 00 FF 
1c640     B4 E5 05 F1 | 	add	objptr, ##34740
1c644     F2 FA 61 FC | 	wrlong	result1, objptr
1c648     43 00 00 FF 
1c64c     B4 E5 85 F1 | 	sub	objptr, ##34740
1c650     F2 FA 01 F6 | 	mov	result1, objptr
1c654     00 30 01 FF 
1c658     00 FA 45 F5 | 	or	result1, ##39845888
1c65c     43 00 00 FF 
1c660     B8 E5 05 F1 | 	add	objptr, ##34744
1c664     F2 FA 61 FC | 	wrlong	result1, objptr
1c668     43 00 00 FF 
1c66c     B8 E5 85 F1 | 	sub	objptr, ##34744
1c670     F2 FA 01 F6 | 	mov	result1, objptr
1c674     00 38 01 FF 
1c678     00 FA 45 F5 | 	or	result1, ##40894464
1c67c     43 00 00 FF 
1c680     BC E5 05 F1 | 	add	objptr, ##34748
1c684     F2 FA 61 FC | 	wrlong	result1, objptr
1c688     43 00 00 FF 
1c68c     BC E5 85 F1 | 	sub	objptr, ##34748
1c690     F2 FA 01 F6 | 	mov	result1, objptr
1c694     00 40 01 FF 
1c698     00 FA 45 F5 | 	or	result1, ##41943040
1c69c     43 00 00 FF 
1c6a0     C0 E5 05 F1 | 	add	objptr, ##34752
1c6a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6a8     43 00 00 FF 
1c6ac     C0 E5 85 F1 | 	sub	objptr, ##34752
1c6b0     F2 FA 01 F6 | 	mov	result1, objptr
1c6b4     00 48 01 FF 
1c6b8     00 FA 45 F5 | 	or	result1, ##42991616
1c6bc     43 00 00 FF 
1c6c0     C8 E5 05 F1 | 	add	objptr, ##34760
1c6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6c8     43 00 00 FF 
1c6cc     C8 E5 85 F1 | 	sub	objptr, ##34760
1c6d0     F2 FA 01 F6 | 	mov	result1, objptr
1c6d4     00 08 01 FF 
1c6d8     00 FA 45 F5 | 	or	result1, ##34603008
1c6dc     43 00 00 FF 
1c6e0     CC E5 05 F1 | 	add	objptr, ##34764
1c6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6e8     43 00 00 FF 
1c6ec     CC E5 85 F1 | 	sub	objptr, ##34764
1c6f0     F2 FA 01 F6 | 	mov	result1, objptr
1c6f4     00 50 01 FF 
1c6f8     00 FA 45 F5 | 	or	result1, ##44040192
1c6fc     43 00 00 FF 
1c700     CC E4 05 F1 | 	add	objptr, ##34508
1c704     F2 FA 61 FC | 	wrlong	result1, objptr
1c708     43 00 00 FF 
1c70c     CC E4 85 F1 | 	sub	objptr, ##34508
1c710     F2 FA 01 F6 | 	mov	result1, objptr
1c714     00 58 01 FF 
1c718     00 FA 45 F5 | 	or	result1, ##45088768
1c71c     43 00 00 FF 
1c720     FC E4 05 F1 | 	add	objptr, ##34556
1c724     F2 FA 61 FC | 	wrlong	result1, objptr
1c728     43 00 00 FF 
1c72c     FC E4 85 F1 | 	sub	objptr, ##34556
1c730     F2 FA 01 F6 | 	mov	result1, objptr
1c734     00 60 01 FF 
1c738     00 FA 45 F5 | 	or	result1, ##46137344
1c73c     43 00 00 FF 
1c740     F8 E4 05 F1 | 	add	objptr, ##34552
1c744     F2 FA 61 FC | 	wrlong	result1, objptr
1c748     43 00 00 FF 
1c74c     F8 E4 85 F1 | 	sub	objptr, ##34552
1c750     F2 FA 01 F6 | 	mov	result1, objptr
1c754     00 68 01 FF 
1c758     00 FA 45 F5 | 	or	result1, ##47185920
1c75c     43 00 00 FF 
1c760     9C E4 05 F1 | 	add	objptr, ##34460
1c764     F2 FA 61 FC | 	wrlong	result1, objptr
1c768     43 00 00 FF 
1c76c     9C E4 85 F1 | 	sub	objptr, ##34460
1c770     F2 FA 01 F6 | 	mov	result1, objptr
1c774     00 70 01 FF 
1c778     00 FA 45 F5 | 	or	result1, ##48234496
1c77c     43 00 00 FF 
1c780     A0 E4 05 F1 | 	add	objptr, ##34464
1c784     F2 FA 61 FC | 	wrlong	result1, objptr
1c788     43 00 00 FF 
1c78c     A0 E4 85 F1 | 	sub	objptr, ##34464
1c790     F2 FA 01 F6 | 	mov	result1, objptr
1c794     00 78 01 FF 
1c798     00 FA 45 F5 | 	or	result1, ##49283072
1c79c     43 00 00 FF 
1c7a0     08 E5 05 F1 | 	add	objptr, ##34568
1c7a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7a8     43 00 00 FF 
1c7ac     08 E5 85 F1 | 	sub	objptr, ##34568
1c7b0     F2 FA 01 F6 | 	mov	result1, objptr
1c7b4     38 FA 25 F4 | 	bith	result1, #56
1c7b8     43 00 00 FF 
1c7bc     B0 E5 05 F1 | 	add	objptr, ##34736
1c7c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c7c4     43 00 00 FF 
1c7c8     B0 E5 85 F1 | 	sub	objptr, ##34736
1c7cc     F2 FA 01 F6 | 	mov	result1, objptr
1c7d0     00 88 01 FF 
1c7d4     00 FA 45 F5 | 	or	result1, ##51380224
1c7d8     43 00 00 FF 
1c7dc     C4 E5 05 F1 | 	add	objptr, ##34756
1c7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c7e4     43 00 00 FF 
1c7e8     C4 E5 85 F1 | 	sub	objptr, ##34756
1c7ec     F2 FA 01 F6 | 	mov	result1, objptr
1c7f0     00 90 01 FF 
1c7f4     00 FA 45 F5 | 	or	result1, ##52428800
1c7f8     43 00 00 FF 
1c7fc     D0 E5 05 F1 | 	add	objptr, ##34768
1c800     F2 FA 61 FC | 	wrlong	result1, objptr
1c804     43 00 00 FF 
1c808     D0 E5 85 F1 | 	sub	objptr, ##34768
1c80c     F2 FA 01 F6 | 	mov	result1, objptr
1c810     00 98 01 FF 
1c814     00 FA 45 F5 | 	or	result1, ##53477376
1c818     43 00 00 FF 
1c81c     D4 E5 05 F1 | 	add	objptr, ##34772
1c820     F2 FA 61 FC | 	wrlong	result1, objptr
1c824     43 00 00 FF 
1c828     D4 E5 85 F1 | 	sub	objptr, ##34772
1c82c     F2 FA 01 F6 | 	mov	result1, objptr
1c830     00 A0 01 FF 
1c834     00 FA 45 F5 | 	or	result1, ##54525952
1c838     43 00 00 FF 
1c83c     D8 E5 05 F1 | 	add	objptr, ##34776
1c840     F2 FA 61 FC | 	wrlong	result1, objptr
1c844     43 00 00 FF 
1c848     D8 E5 85 F1 | 	sub	objptr, ##34776
1c84c     F2 FA 01 F6 | 	mov	result1, objptr
1c850     00 A8 01 FF 
1c854     00 FA 45 F5 | 	or	result1, ##55574528
1c858     43 00 00 FF 
1c85c     DC E5 05 F1 | 	add	objptr, ##34780
1c860     F2 FA 61 FC | 	wrlong	result1, objptr
1c864     43 00 00 FF 
1c868     DC E5 85 F1 | 	sub	objptr, ##34780
1c86c     F2 FA 01 F6 | 	mov	result1, objptr
1c870     00 B0 01 FF 
1c874     00 FA 45 F5 | 	or	result1, ##56623104
1c878     43 00 00 FF 
1c87c     E0 E5 05 F1 | 	add	objptr, ##34784
1c880     F2 FA 61 FC | 	wrlong	result1, objptr
1c884     43 00 00 FF 
1c888     E0 E5 85 F1 | 	sub	objptr, ##34784
1c88c     F2 FA 01 F6 | 	mov	result1, objptr
1c890     00 B8 01 FF 
1c894     00 FA 45 F5 | 	or	result1, ##57671680
1c898     43 00 00 FF 
1c89c     E4 E5 05 F1 | 	add	objptr, ##34788
1c8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8a4     43 00 00 FF 
1c8a8     E4 E5 85 F1 | 	sub	objptr, ##34788
1c8ac     F2 FA 01 F6 | 	mov	result1, objptr
1c8b0     94 FA 25 F4 | 	bith	result1, #148
1c8b4     43 00 00 FF 
1c8b8     AC E5 05 F1 | 	add	objptr, ##34732
1c8bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c8c0     43 00 00 FF 
1c8c4     AC E5 85 F1 | 	sub	objptr, ##34732
1c8c8     F2 FA 01 F6 | 	mov	result1, objptr
1c8cc     57 FA 25 F4 | 	bith	result1, #87
1c8d0     43 00 00 FF 
1c8d4     EC E5 05 F1 | 	add	objptr, ##34796
1c8d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c8dc     43 00 00 FF 
1c8e0     EC E5 85 F1 | 	sub	objptr, ##34796
1c8e4     F2 FA 01 F6 | 	mov	result1, objptr
1c8e8     00 C8 01 FF 
1c8ec     00 FA 45 F5 | 	or	result1, ##59768832
1c8f0     43 00 00 FF 
1c8f4     E8 E5 05 F1 | 	add	objptr, ##34792
1c8f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c8fc     43 00 00 FF 
1c900     E8 E5 85 F1 | 	sub	objptr, ##34792
1c904     F2 FA 01 F6 | 	mov	result1, objptr
1c908     00 D0 01 FF 
1c90c     00 FA 45 F5 | 	or	result1, ##60817408
1c910     44 00 00 FF 
1c914     00 E4 05 F1 | 	add	objptr, ##34816
1c918     F2 FA 61 FC | 	wrlong	result1, objptr
1c91c     44 00 00 FF 
1c920     00 E4 85 F1 | 	sub	objptr, ##34816
1c924     F2 FA 01 F6 | 	mov	result1, objptr
1c928     00 D8 01 FF 
1c92c     00 FA 45 F5 | 	or	result1, ##61865984
1c930     44 00 00 FF 
1c934     04 E4 05 F1 | 	add	objptr, ##34820
1c938     F2 FA 61 FC | 	wrlong	result1, objptr
1c93c     44 00 00 FF 
1c940     04 E4 85 F1 | 	sub	objptr, ##34820
1c944     F2 FA 01 F6 | 	mov	result1, objptr
1c948     76 FA 25 F4 | 	bith	result1, #118
1c94c     43 00 00 FF 
1c950     F0 E5 05 F1 | 	add	objptr, ##34800
1c954     F2 FA 61 FC | 	wrlong	result1, objptr
1c958     43 00 00 FF 
1c95c     F0 E5 85 F1 | 	sub	objptr, ##34800
1c960     F2 FA 01 F6 | 	mov	result1, objptr
1c964     00 E8 01 FF 
1c968     00 FA 45 F5 | 	or	result1, ##63963136
1c96c     43 00 00 FF 
1c970     F4 E5 05 F1 | 	add	objptr, ##34804
1c974     F2 FA 61 FC | 	wrlong	result1, objptr
1c978     43 00 00 FF 
1c97c     F4 E5 85 F1 | 	sub	objptr, ##34804
1c980     F2 FA 01 F6 | 	mov	result1, objptr
1c984     95 FA 25 F4 | 	bith	result1, #149
1c988     43 00 00 FF 
1c98c     F8 E5 05 F1 | 	add	objptr, ##34808
1c990     F2 FA 61 FC | 	wrlong	result1, objptr
1c994     43 00 00 FF 
1c998     F8 E5 85 F1 | 	sub	objptr, ##34808
1c99c     F2 FA 01 F6 | 	mov	result1, objptr
1c9a0     B4 FA 25 F4 | 	bith	result1, #180
1c9a4     43 00 00 FF 
1c9a8     FC E5 05 F1 | 	add	objptr, ##34812
1c9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c9b0     43 00 00 FF 
1c9b4     FC E5 85 F1 | 	sub	objptr, ##34812
1c9b8     F2 FA 01 F6 | 	mov	result1, objptr
1c9bc     1A FA 25 F4 | 	bith	result1, #26
1c9c0     44 00 00 FF 
1c9c4     0C E4 05 F1 | 	add	objptr, ##34828
1c9c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9cc     44 00 00 FF 
1c9d0     0C E4 85 F1 | 	sub	objptr, ##34828
1c9d4     F2 FA 01 F6 | 	mov	result1, objptr
1c9d8     00 08 02 FF 
1c9dc     00 FA 45 F5 | 	or	result1, ##68157440
1c9e0     44 00 00 FF 
1c9e4     08 E4 05 F1 | 	add	objptr, ##34824
1c9e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9ec     44 00 00 FF 
1c9f0     08 E4 85 F1 | 	sub	objptr, ##34824
1c9f4     F2 FA 01 F6 | 	mov	result1, objptr
1c9f8     00 10 02 FF 
1c9fc     00 FA 45 F5 | 	or	result1, ##69206016
1ca00     44 00 00 FF 
1ca04     18 E4 05 F1 | 	add	objptr, ##34840
1ca08     F2 FA 61 FC | 	wrlong	result1, objptr
1ca0c     44 00 00 FF 
1ca10     18 E4 85 F1 | 	sub	objptr, ##34840
1ca14     F2 FA 01 F6 | 	mov	result1, objptr
1ca18     00 18 02 FF 
1ca1c     00 FA 45 F5 | 	or	result1, ##70254592
1ca20     44 00 00 FF 
1ca24     14 E4 05 F1 | 	add	objptr, ##34836
1ca28     F2 FA 61 FC | 	wrlong	result1, objptr
1ca2c     44 00 00 FF 
1ca30     14 E4 85 F1 | 	sub	objptr, ##34836
1ca34     F2 FA 01 F6 | 	mov	result1, objptr
1ca38     00 20 02 FF 
1ca3c     00 FA 45 F5 | 	or	result1, ##71303168
1ca40     44 00 00 FF 
1ca44     10 E4 05 F1 | 	add	objptr, ##34832
1ca48     F2 FA 61 FC | 	wrlong	result1, objptr
1ca4c     44 00 00 FF 
1ca50     10 E4 85 F1 | 	sub	objptr, ##34832
1ca54     F2 FA 01 F6 | 	mov	result1, objptr
1ca58     00 28 02 FF 
1ca5c     00 FA 45 F5 | 	or	result1, ##72351744
1ca60     44 00 00 FF 
1ca64     1C E4 05 F1 | 	add	objptr, ##34844
1ca68     F2 FA 61 FC | 	wrlong	result1, objptr
1ca6c     44 00 00 FF 
1ca70     1C E4 85 F1 | 	sub	objptr, ##34844
1ca74     F2 FA 01 F6 | 	mov	result1, objptr
1ca78     00 30 02 FF 
1ca7c     00 FA 45 F5 | 	or	result1, ##73400320
1ca80     44 00 00 FF 
1ca84     20 E4 05 F1 | 	add	objptr, ##34848
1ca88     F2 FA 61 FC | 	wrlong	result1, objptr
1ca8c     44 00 00 FF 
1ca90     20 E4 85 F1 | 	sub	objptr, ##34848
1ca94     F2 FA 01 F6 | 	mov	result1, objptr
1ca98     00 38 02 FF 
1ca9c     00 FA 45 F5 | 	or	result1, ##74448896
1caa0     43 00 00 FF 
1caa4     B4 E4 05 F1 | 	add	objptr, ##34484
1caa8     F2 FA 61 FC | 	wrlong	result1, objptr
1caac     43 00 00 FF 
1cab0     B4 E4 85 F1 | 	sub	objptr, ##34484
1cab4     F2 FA 01 F6 | 	mov	result1, objptr
1cab8     00 40 02 FF 
1cabc     00 FA 45 F5 | 	or	result1, ##75497472
1cac0     44 00 00 FF 
1cac4     38 E4 05 F1 | 	add	objptr, ##34872
1cac8     F2 FA 61 FC | 	wrlong	result1, objptr
1cacc     44 00 00 FF 
1cad0     38 E4 85 F1 | 	sub	objptr, ##34872
1cad4     F2 FA 01 F6 | 	mov	result1, objptr
1cad8     00 48 02 FF 
1cadc     00 FA 45 F5 | 	or	result1, ##76546048
1cae0     44 00 00 FF 
1cae4     48 E4 05 F1 | 	add	objptr, ##34888
1cae8     F2 FA 61 FC | 	wrlong	result1, objptr
1caec     44 00 00 FF 
1caf0     48 E4 85 F1 | 	sub	objptr, ##34888
1caf4     F2 FA 01 F6 | 	mov	result1, objptr
1caf8     00 50 02 FF 
1cafc     00 FA 45 F5 | 	or	result1, ##77594624
1cb00     44 00 00 FF 
1cb04     4C E4 05 F1 | 	add	objptr, ##34892
1cb08     F2 FA 61 FC | 	wrlong	result1, objptr
1cb0c     44 00 00 FF 
1cb10     4C E4 85 F1 | 	sub	objptr, ##34892
1cb14     F2 FA 01 F6 | 	mov	result1, objptr
1cb18     00 58 02 FF 
1cb1c     00 FA 45 F5 | 	or	result1, ##78643200
1cb20     44 00 00 FF 
1cb24     44 E4 05 F1 | 	add	objptr, ##34884
1cb28     F2 FA 61 FC | 	wrlong	result1, objptr
1cb2c     44 00 00 FF 
1cb30     44 E4 85 F1 | 	sub	objptr, ##34884
1cb34     F2 FA 01 F6 | 	mov	result1, objptr
1cb38     00 60 02 FF 
1cb3c     00 FA 45 F5 | 	or	result1, ##79691776
1cb40     44 00 00 FF 
1cb44     3C E4 05 F1 | 	add	objptr, ##34876
1cb48     F2 FA 61 FC | 	wrlong	result1, objptr
1cb4c     44 00 00 FF 
1cb50     3C E4 85 F1 | 	sub	objptr, ##34876
1cb54     F2 FA 01 F6 | 	mov	result1, objptr
1cb58     00 68 02 FF 
1cb5c     00 FA 45 F5 | 	or	result1, ##80740352
1cb60     44 00 00 FF 
1cb64     40 E4 05 F1 | 	add	objptr, ##34880
1cb68     F2 FA 61 FC | 	wrlong	result1, objptr
1cb6c     44 00 00 FF 
1cb70     40 E4 85 F1 | 	sub	objptr, ##34880
1cb74     F2 FA 01 F6 | 	mov	result1, objptr
1cb78     00 70 02 FF 
1cb7c     00 FA 45 F5 | 	or	result1, ##81788928
1cb80     44 00 00 FF 
1cb84     50 E4 05 F1 | 	add	objptr, ##34896
1cb88     F2 FA 61 FC | 	wrlong	result1, objptr
1cb8c     44 00 00 FF 
1cb90     50 E4 85 F1 | 	sub	objptr, ##34896
1cb94     F2 FA 01 F6 | 	mov	result1, objptr
1cb98     00 78 02 FF 
1cb9c     00 FA 45 F5 | 	or	result1, ##82837504
1cba0     44 00 00 FF 
1cba4     54 E4 05 F1 | 	add	objptr, ##34900
1cba8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbac     44 00 00 FF 
1cbb0     54 E4 85 F1 | 	sub	objptr, ##34900
1cbb4     F2 FA 01 F6 | 	mov	result1, objptr
1cbb8     00 80 02 FF 
1cbbc     00 FA 45 F5 | 	or	result1, ##83886080
1cbc0     44 00 00 FF 
1cbc4     58 E4 05 F1 | 	add	objptr, ##34904
1cbc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbcc     44 00 00 FF 
1cbd0     58 E4 85 F1 | 	sub	objptr, ##34904
1cbd4     F2 FA 01 F6 | 	mov	result1, objptr
1cbd8     00 88 02 FF 
1cbdc     00 FA 45 F5 | 	or	result1, ##84934656
1cbe0     44 00 00 FF 
1cbe4     5C E4 05 F1 | 	add	objptr, ##34908
1cbe8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbec     44 00 00 FF 
1cbf0     5C E4 85 F1 | 	sub	objptr, ##34908
1cbf4     F2 FA 01 F6 | 	mov	result1, objptr
1cbf8     00 90 02 FF 
1cbfc     00 FA 45 F5 | 	or	result1, ##85983232
1cc00     44 00 00 FF 
1cc04     60 E4 05 F1 | 	add	objptr, ##34912
1cc08     F2 FA 61 FC | 	wrlong	result1, objptr
1cc0c     44 00 00 FF 
1cc10     60 E4 85 F1 | 	sub	objptr, ##34912
1cc14     F2 FA 01 F6 | 	mov	result1, objptr
1cc18     00 98 02 FF 
1cc1c     00 FA 45 F5 | 	or	result1, ##87031808
1cc20     44 00 00 FF 
1cc24     64 E4 05 F1 | 	add	objptr, ##34916
1cc28     F2 FA 61 FC | 	wrlong	result1, objptr
1cc2c     44 00 00 FF 
1cc30     64 E4 85 F1 | 	sub	objptr, ##34916
1cc34     F2 FA 01 F6 | 	mov	result1, objptr
1cc38     00 A0 02 FF 
1cc3c     00 FA 45 F5 | 	or	result1, ##88080384
1cc40     44 00 00 FF 
1cc44     68 E4 05 F1 | 	add	objptr, ##34920
1cc48     F2 FA 61 FC | 	wrlong	result1, objptr
1cc4c     44 00 00 FF 
1cc50     68 E4 85 F1 | 	sub	objptr, ##34920
1cc54     F2 FA 01 F6 | 	mov	result1, objptr
1cc58     00 A8 02 FF 
1cc5c     00 FA 45 F5 | 	or	result1, ##89128960
1cc60     44 00 00 FF 
1cc64     6C E4 05 F1 | 	add	objptr, ##34924
1cc68     F2 FA 61 FC | 	wrlong	result1, objptr
1cc6c     44 00 00 FF 
1cc70     6C E4 85 F1 | 	sub	objptr, ##34924
1cc74     F2 FA 01 F6 | 	mov	result1, objptr
1cc78     00 B0 02 FF 
1cc7c     00 FA 45 F5 | 	or	result1, ##90177536
1cc80     44 00 00 FF 
1cc84     78 E4 05 F1 | 	add	objptr, ##34936
1cc88     F2 FA 61 FC | 	wrlong	result1, objptr
1cc8c     44 00 00 FF 
1cc90     78 E4 85 F1 | 	sub	objptr, ##34936
1cc94     F2 FA 01 F6 | 	mov	result1, objptr
1cc98     00 B8 02 FF 
1cc9c     00 FA 45 F5 | 	or	result1, ##91226112
1cca0     44 00 00 FF 
1cca4     70 E4 05 F1 | 	add	objptr, ##34928
1cca8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccac     44 00 00 FF 
1ccb0     70 E4 85 F1 | 	sub	objptr, ##34928
1ccb4     F2 FA 01 F6 | 	mov	result1, objptr
1ccb8     00 C0 02 FF 
1ccbc     00 FA 45 F5 | 	or	result1, ##92274688
1ccc0     44 00 00 FF 
1ccc4     74 E4 05 F1 | 	add	objptr, ##34932
1ccc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cccc     44 00 00 FF 
1ccd0     74 E4 85 F1 | 	sub	objptr, ##34932
1ccd4     F2 FA 01 F6 | 	mov	result1, objptr
1ccd8     00 C8 02 FF 
1ccdc     00 FA 45 F5 | 	or	result1, ##93323264
1cce0     44 00 00 FF 
1cce4     7C E4 05 F1 | 	add	objptr, ##34940
1cce8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccec     44 00 00 FF 
1ccf0     7C E4 85 F1 | 	sub	objptr, ##34940
1ccf4     F2 FA 01 F6 | 	mov	result1, objptr
1ccf8     00 D0 02 FF 
1ccfc     00 FA 45 F5 | 	or	result1, ##94371840
1cd00     44 00 00 FF 
1cd04     24 E4 05 F1 | 	add	objptr, ##34852
1cd08     F2 FA 61 FC | 	wrlong	result1, objptr
1cd0c     44 00 00 FF 
1cd10     24 E4 85 F1 | 	sub	objptr, ##34852
1cd14     F2 FA 01 F6 | 	mov	result1, objptr
1cd18     00 D8 02 FF 
1cd1c     00 FA 45 F5 | 	or	result1, ##95420416
1cd20     44 00 00 FF 
1cd24     2C E4 05 F1 | 	add	objptr, ##34860
1cd28     F2 FA 61 FC | 	wrlong	result1, objptr
1cd2c     44 00 00 FF 
1cd30     2C E4 85 F1 | 	sub	objptr, ##34860
1cd34     F2 FA 01 F6 | 	mov	result1, objptr
1cd38     00 E0 02 FF 
1cd3c     00 FA 45 F5 | 	or	result1, ##96468992
1cd40     44 00 00 FF 
1cd44     30 E4 05 F1 | 	add	objptr, ##34864
1cd48     F2 FA 61 FC | 	wrlong	result1, objptr
1cd4c     44 00 00 FF 
1cd50     30 E4 85 F1 | 	sub	objptr, ##34864
1cd54     F2 FA 01 F6 | 	mov	result1, objptr
1cd58     00 E8 02 FF 
1cd5c     00 FA 45 F5 | 	or	result1, ##97517568
1cd60     44 00 00 FF 
1cd64     80 E4 05 F1 | 	add	objptr, ##34944
1cd68     F2 FA 61 FC | 	wrlong	result1, objptr
1cd6c     44 00 00 FF 
1cd70     80 E4 85 F1 | 	sub	objptr, ##34944
1cd74     F2 FA 01 F6 | 	mov	result1, objptr
1cd78     00 F0 02 FF 
1cd7c     00 FA 45 F5 | 	or	result1, ##98566144
1cd80     44 00 00 FF 
1cd84     84 E4 05 F1 | 	add	objptr, ##34948
1cd88     F2 FA 61 FC | 	wrlong	result1, objptr
1cd8c     44 00 00 FF 
1cd90     84 E4 85 F1 | 	sub	objptr, ##34948
1cd94     F2 FA 01 F6 | 	mov	result1, objptr
1cd98     00 F8 02 FF 
1cd9c     00 FA 45 F5 | 	or	result1, ##99614720
1cda0     44 00 00 FF 
1cda4     88 E4 05 F1 | 	add	objptr, ##34952
1cda8     F2 FA 61 FC | 	wrlong	result1, objptr
1cdac     44 00 00 FF 
1cdb0     88 E4 85 F1 | 	sub	objptr, ##34952
1cdb4     F2 FA 01 F6 | 	mov	result1, objptr
1cdb8     39 FA 25 F4 | 	bith	result1, #57
1cdbc     44 00 00 FF 
1cdc0     34 E4 05 F1 | 	add	objptr, ##34868
1cdc4     F2 FA 61 FC | 	wrlong	result1, objptr
1cdc8     44 00 00 FF 
1cdcc     34 E4 85 F1 | 	sub	objptr, ##34868
1cdd0     F2 FA 01 F6 | 	mov	result1, objptr
1cdd4     00 08 03 FF 
1cdd8     00 FA 45 F5 | 	or	result1, ##101711872
1cddc     44 00 00 FF 
1cde0     98 E4 05 F1 | 	add	objptr, ##34968
1cde4     F2 FA 61 FC | 	wrlong	result1, objptr
1cde8     44 00 00 FF 
1cdec     98 E4 85 F1 | 	sub	objptr, ##34968
1cdf0     F2 FA 01 F6 | 	mov	result1, objptr
1cdf4     00 10 03 FF 
1cdf8     00 FA 45 F5 | 	or	result1, ##102760448
1cdfc     44 00 00 FF 
1ce00     A0 E4 05 F1 | 	add	objptr, ##34976
1ce04     F2 FA 61 FC | 	wrlong	result1, objptr
1ce08     44 00 00 FF 
1ce0c     A0 E4 85 F1 | 	sub	objptr, ##34976
1ce10     F2 FA 01 F6 | 	mov	result1, objptr
1ce14     00 18 03 FF 
1ce18     00 FA 45 F5 | 	or	result1, ##103809024
1ce1c     44 00 00 FF 
1ce20     94 E4 05 F1 | 	add	objptr, ##34964
1ce24     F2 FA 61 FC | 	wrlong	result1, objptr
1ce28     44 00 00 FF 
1ce2c     94 E4 85 F1 | 	sub	objptr, ##34964
1ce30     F2 FA 01 F6 | 	mov	result1, objptr
1ce34     00 20 03 FF 
1ce38     00 FA 45 F5 | 	or	result1, ##104857600
1ce3c     44 00 00 FF 
1ce40     90 E4 05 F1 | 	add	objptr, ##34960
1ce44     F2 FA 61 FC | 	wrlong	result1, objptr
1ce48     44 00 00 FF 
1ce4c     90 E4 85 F1 | 	sub	objptr, ##34960
1ce50     F2 FA 01 F6 | 	mov	result1, objptr
1ce54     00 28 03 FF 
1ce58     00 FA 45 F5 | 	or	result1, ##105906176
1ce5c     44 00 00 FF 
1ce60     8C E4 05 F1 | 	add	objptr, ##34956
1ce64     F2 FA 61 FC | 	wrlong	result1, objptr
1ce68     44 00 00 FF 
1ce6c     8C E4 85 F1 | 	sub	objptr, ##34956
1ce70     F2 FA 01 F6 | 	mov	result1, objptr
1ce74     00 30 03 FF 
1ce78     00 FA 45 F5 | 	or	result1, ##106954752
1ce7c     44 00 00 FF 
1ce80     9C E4 05 F1 | 	add	objptr, ##34972
1ce84     F2 FA 61 FC | 	wrlong	result1, objptr
1ce88     44 00 00 FF 
1ce8c     9C E4 85 F1 | 	sub	objptr, ##34972
1ce90     F2 FA 01 F6 | 	mov	result1, objptr
1ce94     00 38 03 FF 
1ce98     00 FA 45 F5 | 	or	result1, ##108003328
1ce9c     44 00 00 FF 
1cea0     A4 E4 05 F1 | 	add	objptr, ##34980
1cea4     F2 FA 61 FC | 	wrlong	result1, objptr
1cea8     44 00 00 FF 
1ceac     A4 E4 85 F1 | 	sub	objptr, ##34980
1ceb0     F2 FA 01 F6 | 	mov	result1, objptr
1ceb4     00 40 03 FF 
1ceb8     00 FA 45 F5 | 	or	result1, ##109051904
1cebc     44 00 00 FF 
1cec0     A8 E4 05 F1 | 	add	objptr, ##34984
1cec4     F2 FA 61 FC | 	wrlong	result1, objptr
1cec8     44 00 00 FF 
1cecc     A8 E4 85 F1 | 	sub	objptr, ##34984
1ced0     F2 FA 01 F6 | 	mov	result1, objptr
1ced4     00 48 03 FF 
1ced8     00 FA 45 F5 | 	or	result1, ##110100480
1cedc     44 00 00 FF 
1cee0     AC E4 05 F1 | 	add	objptr, ##34988
1cee4     F2 FA 61 FC | 	wrlong	result1, objptr
1cee8     44 00 00 FF 
1ceec     AC E4 85 F1 | 	sub	objptr, ##34988
1cef0     F2 FA 01 F6 | 	mov	result1, objptr
1cef4     00 50 03 FF 
1cef8     00 FA 45 F5 | 	or	result1, ##111149056
1cefc     44 00 00 FF 
1cf00     B4 E4 05 F1 | 	add	objptr, ##34996
1cf04     F2 FA 61 FC | 	wrlong	result1, objptr
1cf08     44 00 00 FF 
1cf0c     B4 E4 85 F1 | 	sub	objptr, ##34996
1cf10     F2 FA 01 F6 | 	mov	result1, objptr
1cf14     00 58 03 FF 
1cf18     00 FA 45 F5 | 	or	result1, ##112197632
1cf1c     44 00 00 FF 
1cf20     B8 E4 05 F1 | 	add	objptr, ##35000
1cf24     F2 FA 61 FC | 	wrlong	result1, objptr
1cf28     44 00 00 FF 
1cf2c     B8 E4 85 F1 | 	sub	objptr, ##35000
1cf30     F2 FA 01 F6 | 	mov	result1, objptr
1cf34     00 60 03 FF 
1cf38     00 FA 45 F5 | 	or	result1, ##113246208
1cf3c     44 00 00 FF 
1cf40     BC E4 05 F1 | 	add	objptr, ##35004
1cf44     F2 FA 61 FC | 	wrlong	result1, objptr
1cf48     44 00 00 FF 
1cf4c     BC E4 85 F1 | 	sub	objptr, ##35004
1cf50     F2 FA 01 F6 | 	mov	result1, objptr
1cf54     00 68 03 FF 
1cf58     00 FA 45 F5 | 	or	result1, ##114294784
1cf5c     44 00 00 FF 
1cf60     C0 E4 05 F1 | 	add	objptr, ##35008
1cf64     F2 FA 61 FC | 	wrlong	result1, objptr
1cf68     44 00 00 FF 
1cf6c     C0 E4 85 F1 | 	sub	objptr, ##35008
1cf70     F2 FA 01 F6 | 	mov	result1, objptr
1cf74     00 70 03 FF 
1cf78     00 FA 45 F5 | 	or	result1, ##115343360
1cf7c     44 00 00 FF 
1cf80     C4 E4 05 F1 | 	add	objptr, ##35012
1cf84     F2 FA 61 FC | 	wrlong	result1, objptr
1cf88     44 00 00 FF 
1cf8c     C4 E4 85 F1 | 	sub	objptr, ##35012
1cf90     F2 FA 01 F6 | 	mov	result1, objptr
1cf94     00 78 03 FF 
1cf98     00 FA 45 F5 | 	or	result1, ##116391936
1cf9c     44 00 00 FF 
1cfa0     C8 E4 05 F1 | 	add	objptr, ##35016
1cfa4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfa8     44 00 00 FF 
1cfac     C8 E4 85 F1 | 	sub	objptr, ##35016
1cfb0     F2 FA 01 F6 | 	mov	result1, objptr
1cfb4     00 08 01 FF 
1cfb8     00 FA 45 F5 | 	or	result1, ##34603008
1cfbc     44 00 00 FF 
1cfc0     CC E4 05 F1 | 	add	objptr, ##35020
1cfc4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfc8     44 00 00 FF 
1cfcc     CC E4 85 F1 | 	sub	objptr, ##35020
1cfd0     F2 FA 01 F6 | 	mov	result1, objptr
1cfd4     58 FA 25 F4 | 	bith	result1, #88
1cfd8     44 00 00 FF 
1cfdc     D0 E4 05 F1 | 	add	objptr, ##35024
1cfe0     F2 FA 61 FC | 	wrlong	result1, objptr
1cfe4     44 00 00 FF 
1cfe8     D0 E4 85 F1 | 	sub	objptr, ##35024
1cfec     F2 FA 01 F6 | 	mov	result1, objptr
1cff0     00 88 03 FF 
1cff4     00 FA 45 F5 | 	or	result1, ##118489088
1cff8     44 00 00 FF 
1cffc     B0 E4 05 F1 | 	add	objptr, ##34992
1d000     F2 FA 61 FC | 	wrlong	result1, objptr
1d004     44 00 00 FF 
1d008     B0 E4 85 F1 | 	sub	objptr, ##34992
1d00c     F2 FA 01 F6 | 	mov	result1, objptr
1d010     00 90 03 FF 
1d014     00 FA 45 F5 | 	or	result1, ##119537664
1d018     43 00 00 FF 
1d01c     A8 E4 05 F1 | 	add	objptr, ##34472
1d020     F2 FA 61 FC | 	wrlong	result1, objptr
1d024     43 00 00 FF 
1d028     A8 E4 85 F1 | 	sub	objptr, ##34472
1d02c     F2 FA 01 F6 | 	mov	result1, objptr
1d030     00 98 03 FF 
1d034     00 FA 45 F5 | 	or	result1, ##120586240
1d038     44 00 00 FF 
1d03c     D4 E4 05 F1 | 	add	objptr, ##35028
1d040     F2 FA 61 FC | 	wrlong	result1, objptr
1d044     44 00 00 FF 
1d048     D4 E4 85 F1 | 	sub	objptr, ##35028
1d04c     F2 FA 01 F6 | 	mov	result1, objptr
1d050     00 A0 03 FF 
1d054     00 FA 45 F5 | 	or	result1, ##121634816
1d058     44 00 00 FF 
1d05c     D8 E4 05 F1 | 	add	objptr, ##35032
1d060     F2 FA 61 FC | 	wrlong	result1, objptr
1d064     44 00 00 FF 
1d068     D8 E4 85 F1 | 	sub	objptr, ##35032
1d06c     F2 FA 01 F6 | 	mov	result1, objptr
1d070     00 A8 03 FF 
1d074     00 FA 45 F5 | 	or	result1, ##122683392
1d078     44 00 00 FF 
1d07c     EC E4 05 F1 | 	add	objptr, ##35052
1d080     F2 FA 61 FC | 	wrlong	result1, objptr
1d084     44 00 00 FF 
1d088     EC E4 85 F1 | 	sub	objptr, ##35052
1d08c     F2 FA 01 F6 | 	mov	result1, objptr
1d090     00 B0 03 FF 
1d094     00 FA 45 F5 | 	or	result1, ##123731968
1d098     44 00 00 FF 
1d09c     E8 E4 05 F1 | 	add	objptr, ##35048
1d0a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d0a4     44 00 00 FF 
1d0a8     E8 E4 85 F1 | 	sub	objptr, ##35048
1d0ac     F2 FA 01 F6 | 	mov	result1, objptr
1d0b0     00 B8 03 FF 
1d0b4     00 FA 45 F5 | 	or	result1, ##124780544
1d0b8     44 00 00 FF 
1d0bc     E0 E4 05 F1 | 	add	objptr, ##35040
1d0c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d0c4     44 00 00 FF 
1d0c8     E0 E4 85 F1 | 	sub	objptr, ##35040
1d0cc     F2 FA 01 F6 | 	mov	result1, objptr
1d0d0     77 FA 25 F4 | 	bith	result1, #119
1d0d4     44 00 00 FF 
1d0d8     DC E4 05 F1 | 	add	objptr, ##35036
1d0dc     F2 FA 61 FC | 	wrlong	result1, objptr
1d0e0     44 00 00 FF 
1d0e4     DC E4 85 F1 | 	sub	objptr, ##35036
1d0e8     F2 FA 01 F6 | 	mov	result1, objptr
1d0ec     00 C8 03 FF 
1d0f0     00 FA 45 F5 | 	or	result1, ##126877696
1d0f4     44 00 00 FF 
1d0f8     FC E4 05 F1 | 	add	objptr, ##35068
1d0fc     F2 FA 61 FC | 	wrlong	result1, objptr
1d100     44 00 00 FF 
1d104     FC E4 85 F1 | 	sub	objptr, ##35068
1d108     F2 FA 01 F6 | 	mov	result1, objptr
1d10c     00 D0 03 FF 
1d110     00 FA 45 F5 | 	or	result1, ##127926272
1d114     44 00 00 FF 
1d118     F0 E4 05 F1 | 	add	objptr, ##35056
1d11c     F2 FA 61 FC | 	wrlong	result1, objptr
1d120     44 00 00 FF 
1d124     F0 E4 85 F1 | 	sub	objptr, ##35056
1d128     F2 FA 01 F6 | 	mov	result1, objptr
1d12c     00 D8 03 FF 
1d130     00 FA 45 F5 | 	or	result1, ##128974848
1d134     44 00 00 FF 
1d138     F4 E4 05 F1 | 	add	objptr, ##35060
1d13c     F2 FA 61 FC | 	wrlong	result1, objptr
1d140     44 00 00 FF 
1d144     F4 E4 85 F1 | 	sub	objptr, ##35060
1d148     F2 FA 01 F6 | 	mov	result1, objptr
1d14c     96 FA 25 F4 | 	bith	result1, #150
1d150     44 00 00 FF 
1d154     F8 E4 05 F1 | 	add	objptr, ##35064
1d158     F2 FA 61 FC | 	wrlong	result1, objptr
1d15c     44 00 00 FF 
1d160     F8 E4 85 F1 | 	sub	objptr, ##35064
1d164     F2 FA 01 F6 | 	mov	result1, objptr
1d168     00 E8 03 FF 
1d16c     00 FA 45 F5 | 	or	result1, ##131072000
1d170     44 00 00 FF 
1d174     00 E5 05 F1 | 	add	objptr, ##35072
1d178     F2 FA 61 FC | 	wrlong	result1, objptr
1d17c     44 00 00 FF 
1d180     00 E5 85 F1 | 	sub	objptr, ##35072
1d184     F2 FA 01 F6 | 	mov	result1, objptr
1d188     B5 FA 25 F4 | 	bith	result1, #181
1d18c     44 00 00 FF 
1d190     04 E5 05 F1 | 	add	objptr, ##35076
1d194     F2 FA 61 FC | 	wrlong	result1, objptr
1d198     44 00 00 FF 
1d19c     04 E5 85 F1 | 	sub	objptr, ##35076
1d1a0     F2 FA 01 F6 | 	mov	result1, objptr
1d1a4     D4 FA 25 F4 | 	bith	result1, #212
1d1a8     44 00 00 FF 
1d1ac     08 E5 05 F1 | 	add	objptr, ##35080
1d1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1d1b4     44 00 00 FF 
1d1b8     08 E5 85 F1 | 	sub	objptr, ##35080
1d1bc     F2 FA 01 F6 | 	mov	result1, objptr
1d1c0     1B FA 25 F4 | 	bith	result1, #27
1d1c4     44 00 00 FF 
1d1c8     0C E5 05 F1 | 	add	objptr, ##35084
1d1cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d1d0     44 00 00 FF 
1d1d4     0C E5 85 F1 | 	sub	objptr, ##35084
1d1d8     F2 FA 01 F6 | 	mov	result1, objptr
1d1dc     00 08 04 FF 
1d1e0     00 FA 45 F5 | 	or	result1, ##135266304
1d1e4     44 00 00 FF 
1d1e8     10 E5 05 F1 | 	add	objptr, ##35088
1d1ec     F2 FA 61 FC | 	wrlong	result1, objptr
1d1f0     44 00 00 FF 
1d1f4     10 E5 85 F1 | 	sub	objptr, ##35088
1d1f8     F2 FA 01 F6 | 	mov	result1, objptr
1d1fc     00 10 04 FF 
1d200     00 FA 45 F5 | 	or	result1, ##136314880
1d204     44 00 00 FF 
1d208     14 E5 05 F1 | 	add	objptr, ##35092
1d20c     F2 FA 61 FC | 	wrlong	result1, objptr
1d210     44 00 00 FF 
1d214     14 E5 85 F1 | 	sub	objptr, ##35092
1d218     F2 FA 01 F6 | 	mov	result1, objptr
1d21c     00 18 04 FF 
1d220     00 FA 45 F5 | 	or	result1, ##137363456
1d224     44 00 00 FF 
1d228     1C E5 05 F1 | 	add	objptr, ##35100
1d22c     F2 FA 61 FC | 	wrlong	result1, objptr
1d230     44 00 00 FF 
1d234     1C E5 85 F1 | 	sub	objptr, ##35100
1d238     F2 FA 01 F6 | 	mov	result1, objptr
1d23c     00 20 04 FF 
1d240     00 FA 45 F5 | 	or	result1, ##138412032
1d244     44 00 00 FF 
1d248     20 E5 05 F1 | 	add	objptr, ##35104
1d24c     F2 FA 61 FC | 	wrlong	result1, objptr
1d250     44 00 00 FF 
1d254     20 E5 85 F1 | 	sub	objptr, ##35104
1d258     F2 FA 01 F6 | 	mov	result1, objptr
1d25c     00 28 04 FF 
1d260     00 FA 45 F5 | 	or	result1, ##139460608
1d264     44 00 00 FF 
1d268     24 E5 05 F1 | 	add	objptr, ##35108
1d26c     F2 FA 61 FC | 	wrlong	result1, objptr
1d270     44 00 00 FF 
1d274     24 E5 85 F1 | 	sub	objptr, ##35108
1d278     F2 FA 01 F6 | 	mov	result1, objptr
1d27c     00 30 04 FF 
1d280     00 FA 45 F5 | 	or	result1, ##140509184
1d284     44 00 00 FF 
1d288     18 E5 05 F1 | 	add	objptr, ##35096
1d28c     F2 FA 61 FC | 	wrlong	result1, objptr
1d290     44 00 00 FF 
1d294     18 E5 85 F1 | 	sub	objptr, ##35096
1d298     F2 FA 01 F6 | 	mov	result1, objptr
1d29c     00 38 04 FF 
1d2a0     00 FA 45 F5 | 	or	result1, ##141557760
1d2a4     44 00 00 FF 
1d2a8     28 E5 05 F1 | 	add	objptr, ##35112
1d2ac     F2 FA 61 FC | 	wrlong	result1, objptr
1d2b0     44 00 00 FF 
1d2b4     28 E5 85 F1 | 	sub	objptr, ##35112
1d2b8     F2 FA 01 F6 | 	mov	result1, objptr
1d2bc     00 40 04 FF 
1d2c0     00 FA 45 F5 | 	or	result1, ##142606336
1d2c4     44 00 00 FF 
1d2c8     5C E5 05 F1 | 	add	objptr, ##35164
1d2cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d2d0     44 00 00 FF 
1d2d4     5C E5 85 F1 | 	sub	objptr, ##35164
1d2d8     F2 FA 01 F6 | 	mov	result1, objptr
1d2dc     00 48 04 FF 
1d2e0     00 FA 45 F5 | 	or	result1, ##143654912
1d2e4     44 00 00 FF 
1d2e8     54 E5 05 F1 | 	add	objptr, ##35156
1d2ec     F2 FA 61 FC | 	wrlong	result1, objptr
1d2f0     44 00 00 FF 
1d2f4     54 E5 85 F1 | 	sub	objptr, ##35156
1d2f8     F2 FA 01 F6 | 	mov	result1, objptr
1d2fc     00 50 04 FF 
1d300     00 FA 45 F5 | 	or	result1, ##144703488
1d304     44 00 00 FF 
1d308     2C E5 05 F1 | 	add	objptr, ##35116
1d30c     F2 FA 61 FC | 	wrlong	result1, objptr
1d310     44 00 00 FF 
1d314     2C E5 85 F1 | 	sub	objptr, ##35116
1d318     F2 FA 01 F6 | 	mov	result1, objptr
1d31c     00 58 04 FF 
1d320     00 FA 45 F5 | 	or	result1, ##145752064
1d324     44 00 00 FF 
1d328     30 E5 05 F1 | 	add	objptr, ##35120
1d32c     F2 FA 61 FC | 	wrlong	result1, objptr
1d330     44 00 00 FF 
1d334     30 E5 85 F1 | 	sub	objptr, ##35120
1d338     F2 FA 01 F6 | 	mov	result1, objptr
1d33c     00 60 04 FF 
1d340     00 FA 45 F5 | 	or	result1, ##146800640
1d344     44 00 00 FF 
1d348     4C E5 05 F1 | 	add	objptr, ##35148
1d34c     F2 FA 61 FC | 	wrlong	result1, objptr
1d350     44 00 00 FF 
1d354     4C E5 85 F1 | 	sub	objptr, ##35148
1d358     F2 FA 01 F6 | 	mov	result1, objptr
1d35c     00 68 04 FF 
1d360     00 FA 45 F5 | 	or	result1, ##147849216
1d364     44 00 00 FF 
1d368     50 E5 05 F1 | 	add	objptr, ##35152
1d36c     F2 FA 61 FC | 	wrlong	result1, objptr
1d370     44 00 00 FF 
1d374     50 E5 85 F1 | 	sub	objptr, ##35152
1d378     F2 FA 01 F6 | 	mov	result1, objptr
1d37c     00 70 04 FF 
1d380     00 FA 45 F5 | 	or	result1, ##148897792
1d384     44 00 00 FF 
1d388     6C E5 05 F1 | 	add	objptr, ##35180
1d38c     F2 FA 61 FC | 	wrlong	result1, objptr
1d390     44 00 00 FF 
1d394     6C E5 85 F1 | 	sub	objptr, ##35180
1d398     F2 FA 01 F6 | 	mov	result1, objptr
1d39c     00 78 04 FF 
1d3a0     00 FA 45 F5 | 	or	result1, ##149946368
1d3a4     44 00 00 FF 
1d3a8     68 E5 05 F1 | 	add	objptr, ##35176
1d3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1d3b0     44 00 00 FF 
1d3b4     68 E5 85 F1 | 	sub	objptr, ##35176
1d3b8     F2 FA 01 F6 | 	mov	result1, objptr
1d3bc     00 80 04 FF 
1d3c0     00 FA 45 F5 | 	or	result1, ##150994944
1d3c4     44 00 00 FF 
1d3c8     78 E5 05 F1 | 	add	objptr, ##35192
1d3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d3d0     44 00 00 FF 
1d3d4     78 E5 85 F1 | 	sub	objptr, ##35192
1d3d8                 | _init_commands_ret
1d3d8     2D 00 64 FD | 	ret
1d3dc                 | 
1d3dc                 | ' 
1d3dc                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1d3dc                 | ' 
1d3dc                 | ' sub init_audio
1d3dc                 | _init_audio
1d3dc     06 4A 05 F6 | 	mov	COUNT_, #6
1d3e0     A8 00 A0 FD | 	call	#pushregs_
1d3e4     00 C0 1F FF 
1d3e8     00 1E 06 F6 | 	mov	local01, ##1065353216
1d3ec                 | ' 
1d3ec                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1d3ec     00 20 06 F6 | 	mov	local02, #0
1d3f0                 | LR__2330
1d3f0     10 23 02 F6 | 	mov	local03, local02
1d3f4     01 22 66 F0 | 	shl	local03, #1
1d3f8     58 7F 23 FF 
1d3fc     00 24 06 F6 | 	mov	local04, ##1191096320
1d400     10 13 52 F6 | 	abs	arg01, local02 wc
1d404     1F 26 C6 C9 |  if_b	decod	local05, #31
1d408     00 26 06 36 |  if_ae	mov	local05, #0
1d40c     2C 6B B0 FD | 	call	#__system___float_fromuns
1d410     13 FB 61 F5 | 	xor	result1, local05
1d414     FD 12 02 F6 | 	mov	arg01, result1
1d418     87 24 20 FF 
1d41c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1d420     1C 6F B0 FD | 	call	#__system___float_mul
1d424     FD 12 02 F6 | 	mov	arg01, result1
1d428     00 00 22 FF 
1d42c     00 14 06 F6 | 	mov	arg02, ##1140850688
1d430     10 71 B0 FD | 	call	#__system___float_div
1d434     FD 12 02 F6 | 	mov	arg01, result1
1d438     64 78 B0 FD | 	call	#__system____builtin_sinf
1d43c     FD 14 02 F6 | 	mov	arg02, result1
1d440     12 13 02 F6 | 	mov	arg01, local04
1d444     F8 6E B0 FD | 	call	#__system___float_mul
1d448     FD 12 02 F6 | 	mov	arg01, result1
1d44c     01 14 06 F6 | 	mov	arg02, #1
1d450     B4 73 B0 FD | 	call	#__system___float_tointeger
1d454     FD 14 02 F6 | 	mov	arg02, result1
1d458     11 13 02 F6 | 	mov	arg01, local03
1d45c     38 0D B0 FD | 	call	#_psdpoke
1d460     01 20 06 F1 | 	add	local02, #1
1d464     02 00 00 FF 
1d468     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d46c     80 FF 9F CD |  if_b	jmp	#LR__2330
1d470                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1d470     00 20 06 F6 | 	mov	local02, #0
1d474                 | LR__2331
1d474     10 15 02 F6 | 	mov	arg02, local02
1d478     01 14 66 F0 | 	shl	arg02, #1
1d47c     0B 12 C6 F9 | 	decod	arg01, #11
1d480     0A 13 02 F1 | 	add	arg01, arg02
1d484     10 25 02 F6 | 	mov	local04, local02
1d488     07 24 66 F0 | 	shl	local04, #7
1d48c     10 25 82 F1 | 	sub	local04, local02
1d490     C0 FF 7F FF 
1d494     00 15 06 F6 | 	mov	arg02, ##-32512
1d498     12 15 02 F1 | 	add	arg02, local04
1d49c     F8 0C B0 FD | 	call	#_psdpoke
1d4a0     09 24 C6 F9 | 	decod	local04, #9
1d4a4     10 25 02 F1 | 	add	local04, local02
1d4a8     01 24 66 F0 | 	shl	local04, #1
1d4ac     0B 12 C6 F9 | 	decod	arg01, #11
1d4b0     12 13 02 F1 | 	add	arg01, local04
1d4b4     10 27 02 F6 | 	mov	local05, local02
1d4b8     07 26 66 F0 | 	shl	local05, #7
1d4bc     10 27 82 F1 | 	sub	local05, local02
1d4c0     3F 00 00 FF 
1d4c4     00 15 06 F6 | 	mov	arg02, ##32512
1d4c8     13 15 82 F1 | 	sub	arg02, local05
1d4cc     C8 0C B0 FD | 	call	#_psdpoke
1d4d0     01 20 06 F1 | 	add	local02, #1
1d4d4     01 00 00 FF 
1d4d8     00 20 56 F2 | 	cmps	local02, ##512 wc
1d4dc     94 FF 9F CD |  if_b	jmp	#LR__2331
1d4e0                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1d4e0     00 20 06 F6 | 	mov	local02, #0
1d4e4                 | LR__2332
1d4e4     10 27 02 F6 | 	mov	local05, local02
1d4e8     01 26 66 F0 | 	shl	local05, #1
1d4ec     0C 12 C6 F9 | 	decod	arg01, #12
1d4f0     13 13 02 F1 | 	add	arg01, local05
1d4f4     10 27 02 F6 | 	mov	local05, local02
1d4f8     06 26 66 F0 | 	shl	local05, #6
1d4fc     10 27 82 F1 | 	sub	local05, local02
1d500     C1 FF 7F FF 
1d504     00 14 06 F6 | 	mov	arg02, ##-32256
1d508     13 15 02 F1 | 	add	arg02, local05
1d50c     88 0C B0 FD | 	call	#_psdpoke
1d510     01 20 06 F1 | 	add	local02, #1
1d514     02 00 00 FF 
1d518     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d51c     C4 FF 9F CD |  if_b	jmp	#LR__2332
1d520                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1d520     00 20 06 F6 | 	mov	local02, #0
1d524                 | LR__2333
1d524     10 27 02 F6 | 	mov	local05, local02
1d528     01 26 66 F0 | 	shl	local05, #1
1d52c     0C 00 00 FF 
1d530     00 12 06 F6 | 	mov	arg01, ##6144
1d534     13 13 02 F1 | 	add	arg01, local05
1d538     C0 FF 7F FF 
1d53c     A8 14 06 F6 | 	mov	arg02, ##-32600
1d540     54 0C B0 FD | 	call	#_psdpoke
1d544     01 20 06 F1 | 	add	local02, #1
1d548     80 20 56 F2 | 	cmps	local02, #128 wc
1d54c     D4 FF 9F CD |  if_b	jmp	#LR__2333
1d550     80 20 06 F6 | 	mov	local02, #128
1d554                 | LR__2334
1d554     10 27 02 F6 | 	mov	local05, local02
1d558     01 26 66 F0 | 	shl	local05, #1
1d55c     0C 00 00 FF 
1d560     00 12 06 F6 | 	mov	arg01, ##6144
1d564     13 13 02 F1 | 	add	arg01, local05
1d568     3F 00 00 FF 
1d56c     58 15 06 F6 | 	mov	arg02, ##32600
1d570     24 0C B0 FD | 	call	#_psdpoke
1d574     01 20 06 F1 | 	add	local02, #1
1d578     02 00 00 FF 
1d57c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d580     D0 FF 9F CD |  if_b	jmp	#LR__2334
1d584                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1d584     00 20 06 F6 | 	mov	local02, #0
1d588                 | LR__2335
1d588     10 27 02 F6 | 	mov	local05, local02
1d58c     01 26 66 F0 | 	shl	local05, #1
1d590     0D 12 C6 F9 | 	decod	arg01, #13
1d594     13 13 02 F1 | 	add	arg01, local05
1d598     C0 FF 7F FF 
1d59c     A8 14 06 F6 | 	mov	arg02, ##-32600
1d5a0     F4 0B B0 FD | 	call	#_psdpoke
1d5a4     01 20 06 F1 | 	add	local02, #1
1d5a8     01 00 00 FF 
1d5ac     00 20 56 F2 | 	cmps	local02, ##512 wc
1d5b0     D4 FF 9F CD |  if_b	jmp	#LR__2335
1d5b4     09 20 C6 F9 | 	decod	local02, #9
1d5b8                 | LR__2336
1d5b8     10 27 02 F6 | 	mov	local05, local02
1d5bc     01 26 66 F0 | 	shl	local05, #1
1d5c0     0D 12 C6 F9 | 	decod	arg01, #13
1d5c4     13 13 02 F1 | 	add	arg01, local05
1d5c8     3F 00 00 FF 
1d5cc     58 15 06 F6 | 	mov	arg02, ##32600
1d5d0     C4 0B B0 FD | 	call	#_psdpoke
1d5d4     01 20 06 F1 | 	add	local02, #1
1d5d8     02 00 00 FF 
1d5dc     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d5e0     D4 FF 9F CD |  if_b	jmp	#LR__2336
1d5e4                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1d5e4     00 20 06 F6 | 	mov	local02, #0
1d5e8                 | LR__2337
1d5e8     10 27 02 F6 | 	mov	local05, local02
1d5ec     01 26 66 F0 | 	shl	local05, #1
1d5f0     14 00 00 FF 
1d5f4     00 12 06 F6 | 	mov	arg01, ##10240
1d5f8     13 13 02 F1 | 	add	arg01, local05
1d5fc     C0 FF 7F FF 
1d600     A8 14 06 F6 | 	mov	arg02, ##-32600
1d604     90 0B B0 FD | 	call	#_psdpoke
1d608     01 20 06 F1 | 	add	local02, #1
1d60c     00 21 56 F2 | 	cmps	local02, #256 wc
1d610     D4 FF 9F CD |  if_b	jmp	#LR__2337
1d614     00 21 06 F6 | 	mov	local02, #256
1d618                 | LR__2338
1d618     10 27 02 F6 | 	mov	local05, local02
1d61c     01 26 66 F0 | 	shl	local05, #1
1d620     14 00 00 FF 
1d624     00 12 06 F6 | 	mov	arg01, ##10240
1d628     13 13 02 F1 | 	add	arg01, local05
1d62c     3F 00 00 FF 
1d630     58 15 06 F6 | 	mov	arg02, ##32600
1d634     60 0B B0 FD | 	call	#_psdpoke
1d638     01 20 06 F1 | 	add	local02, #1
1d63c     02 00 00 FF 
1d640     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d644     D0 FF 9F CD |  if_b	jmp	#LR__2338
1d648                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1d648     18 00 00 FF 
1d64c     00 20 06 F6 | 	mov	local02, ##12288
1d650                 | LR__2339
1d650     10 13 02 F6 | 	mov	arg01, local02
1d654     00 14 06 F6 | 	mov	arg02, #0
1d658     F4 0A B0 FD | 	call	#_pslpoke
1d65c     04 20 06 F1 | 	add	local02, #4
1d660     77 00 00 FF 
1d664     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1d668     E4 FF 9F CD |  if_b	jmp	#LR__2339
1d66c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1d66c     00 20 06 F6 | 	mov	local02, #0
1d670                 | LR__2340
1d670     10 27 02 F6 | 	mov	local05, local02
1d674     01 26 66 F0 | 	shl	local05, #1
1d678     78 00 00 FF 
1d67c     00 22 06 F6 | 	mov	local03, ##61440
1d680     13 23 02 F1 | 	add	local03, local05
1d684     12 00 00 FF 
1d688     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1d68c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d690     12 00 00 FF 
1d694     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1d698     10 12 06 F1 | 	add	arg01, #16
1d69c     10 15 02 F6 | 	mov	arg02, local02
1d6a0     01 14 66 F0 | 	shl	arg02, #1
1d6a4     0A 13 02 F1 | 	add	arg01, arg02
1d6a8     09 15 E2 FA | 	rdword	arg02, arg01
1d6ac     11 13 02 F6 | 	mov	arg01, local03
1d6b0     E4 0A B0 FD | 	call	#_psdpoke
1d6b4     01 20 06 F1 | 	add	local02, #1
1d6b8     02 00 00 FF 
1d6bc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d6c0     AC FF 9F CD |  if_b	jmp	#LR__2340
1d6c4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1d6c4     00 20 06 F6 | 	mov	local02, #0
1d6c8                 | LR__2341
1d6c8     10 27 02 F6 | 	mov	local05, local02
1d6cc     01 26 66 F0 | 	shl	local05, #1
1d6d0     7C 00 00 FF 
1d6d4     00 22 06 F6 | 	mov	local03, ##63488
1d6d8     13 23 02 F1 | 	add	local03, local05
1d6dc     0E 00 00 FF 
1d6e0     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1d6e4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d6e8     0E 00 00 FF 
1d6ec     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1d6f0     10 12 06 F1 | 	add	arg01, #16
1d6f4     10 15 02 F6 | 	mov	arg02, local02
1d6f8     01 14 66 F0 | 	shl	arg02, #1
1d6fc     0A 13 02 F1 | 	add	arg01, arg02
1d700     09 15 E2 FA | 	rdword	arg02, arg01
1d704     11 13 02 F6 | 	mov	arg01, local03
1d708     8C 0A B0 FD | 	call	#_psdpoke
1d70c     01 20 06 F1 | 	add	local02, #1
1d710     02 00 00 FF 
1d714     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d718     AC FF 9F CD |  if_b	jmp	#LR__2341
1d71c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1d71c     00 20 06 F6 | 	mov	local02, #0
1d720     0C 00 00 FF 
1d724     D8 E4 05 F1 | 	add	objptr, ##6360
1d728     97 18 48 FB | 	callpa	#(@LR__2343-@LR__2342)>>2,fcache_load_ptr_
1d72c                 | LR__2342
1d72c     10 27 02 F6 | 	mov	local05, local02
1d730     01 26 66 F0 | 	shl	local05, #1
1d734     F2 26 02 F1 | 	add	local05, objptr
1d738     10 23 02 F6 | 	mov	local03, local02
1d73c     08 22 66 F0 | 	shl	local03, #8
1d740     7F 00 00 FF 
1d744     00 29 06 F6 | 	mov	local06, ##65280
1d748     11 29 82 F1 | 	sub	local06, local03
1d74c     13 29 52 FC | 	wrword	local06, local05
1d750     01 20 06 F1 | 	add	local02, #1
1d754     00 21 56 F2 | 	cmps	local02, #256 wc
1d758     D0 FF 9F CD |  if_b	jmp	#LR__2342
1d75c                 | LR__2343
1d75c     0C 00 00 FF 
1d760     D8 E4 85 F1 | 	sub	objptr, ##6360
1d764                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1d764     00 20 06 F6 | 	mov	local02, #0
1d768                 | LR__2344
1d768     10 27 02 F6 | 	mov	local05, local02
1d76c     01 26 66 F0 | 	shl	local05, #1
1d770     0D 00 00 FF 
1d774     D8 E4 05 F1 | 	add	objptr, ##6872
1d778     F2 26 02 F1 | 	add	local05, objptr
1d77c     80 BF 23 FF 
1d780     00 12 06 F6 | 	mov	arg01, ##1199505408
1d784     0F 15 02 F6 | 	mov	arg02, local01
1d788     0D 00 00 FF 
1d78c     D8 E4 85 F1 | 	sub	objptr, ##6872
1d790     AC 6B B0 FD | 	call	#__system___float_mul
1d794     FD 12 02 F6 | 	mov	arg01, result1
1d798     01 14 06 F6 | 	mov	arg02, #1
1d79c     68 70 B0 FD | 	call	#__system___float_tointeger
1d7a0     13 FB 51 FC | 	wrword	result1, local05
1d7a4     0F 13 02 F6 | 	mov	arg01, local01
1d7a8     CC BC 1F FF 
1d7ac     9A 15 06 F6 | 	mov	arg02, ##1064933786
1d7b0     8C 6B B0 FD | 	call	#__system___float_mul
1d7b4     FD 1E 02 F6 | 	mov	local01, result1
1d7b8     01 20 06 F1 | 	add	local02, #1
1d7bc     00 21 56 F2 | 	cmps	local02, #256 wc
1d7c0     A4 FF 9F CD |  if_b	jmp	#LR__2344
1d7c4     0E 00 00 FF 
1d7c8     D6 E4 05 F1 | 	add	objptr, ##7382
1d7cc     F2 00 58 FC | 	wrword	#0, objptr
1d7d0                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1d7d0     00 20 06 F6 | 	mov	local02, #0
1d7d4     02 E4 05 F1 | 	add	objptr, #2
1d7d8     97 10 48 FB | 	callpa	#(@LR__2346-@LR__2345)>>2,fcache_load_ptr_
1d7dc                 | LR__2345
1d7dc     10 27 02 F6 | 	mov	local05, local02
1d7e0     01 26 66 F0 | 	shl	local05, #1
1d7e4     F2 26 02 F1 | 	add	local05, objptr
1d7e8     7F 00 80 FF 
1d7ec     13 01 5A FC | 	wrword	##65280, local05
1d7f0     01 20 06 F1 | 	add	local02, #1
1d7f4     FF 20 56 F2 | 	cmps	local02, #255 wc
1d7f8     E0 FF 9F CD |  if_b	jmp	#LR__2345
1d7fc                 | LR__2346
1d7fc     FE E5 05 F1 | 	add	objptr, #510
1d800     F2 00 58 FC | 	wrword	#0, objptr
1d804                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1d804     00 20 06 F6 | 	mov	local02, #0
1d808     02 E4 05 F1 | 	add	objptr, #2
1d80c     97 52 48 FB | 	callpa	#(@LR__2351-@LR__2347)>>2,fcache_load_ptr_
1d810                 | LR__2347
1d810     10 27 02 F6 | 	mov	local05, local02
1d814     01 26 66 F0 | 	shl	local05, #1
1d818     F2 26 02 F1 | 	add	local05, objptr
1d81c     10 29 02 F6 | 	mov	local06, local02
1d820     0C 28 66 F0 | 	shl	local06, #12
1d824     13 29 52 FC | 	wrword	local06, local05
1d828     01 20 06 F1 | 	add	local02, #1
1d82c     10 20 56 F2 | 	cmps	local02, #16 wc
1d830     DC FF 9F CD |  if_b	jmp	#LR__2347
1d834                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1d834     10 20 06 F6 | 	mov	local02, #16
1d838                 | LR__2348
1d838     10 27 02 F6 | 	mov	local05, local02
1d83c     01 26 66 F0 | 	shl	local05, #1
1d840     F2 26 02 F1 | 	add	local05, objptr
1d844     7F 00 80 FF 
1d848     13 01 5A FC | 	wrword	##65280, local05
1d84c     01 20 06 F1 | 	add	local02, #1
1d850     F0 20 16 F2 | 	cmp	local02, #240 wc
1d854     E0 FF 9F CD |  if_b	jmp	#LR__2348
1d858                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1d858     F0 20 06 F6 | 	mov	local02, #240
1d85c                 | LR__2349
1d85c     10 27 02 F6 | 	mov	local05, local02
1d860     01 26 66 F0 | 	shl	local05, #1
1d864     F2 26 02 F1 | 	add	local05, objptr
1d868     FF 22 06 F6 | 	mov	local03, #255
1d86c     10 23 82 F1 | 	sub	local03, local02
1d870     0C 22 66 F0 | 	shl	local03, #12
1d874     13 23 52 FC | 	wrword	local03, local05
1d878     01 20 06 F1 | 	add	local02, #1
1d87c     00 21 16 F2 | 	cmp	local02, #256 wc
1d880     D8 FF 9F CD |  if_b	jmp	#LR__2349
1d884                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1d884     00 20 06 F6 | 	mov	local02, #0
1d888     01 00 00 FF 
1d88c     00 E4 05 F1 | 	add	objptr, ##512
1d890                 | LR__2350
1d890     10 27 02 F6 | 	mov	local05, local02
1d894     01 26 66 F0 | 	shl	local05, #1
1d898     F2 26 02 F1 | 	add	local05, objptr
1d89c     10 29 02 F6 | 	mov	local06, local02
1d8a0     08 28 66 F0 | 	shl	local06, #8
1d8a4     13 29 52 FC | 	wrword	local06, local05
1d8a8     01 20 06 F1 | 	add	local02, #1
1d8ac     00 21 56 F2 | 	cmps	local02, #256 wc
1d8b0     DC FF 9F CD |  if_b	jmp	#LR__2350
1d8b4                 | LR__2351
1d8b4     FE E5 05 F1 | 	add	objptr, #510
1d8b8     F2 00 58 FC | 	wrword	#0, objptr
1d8bc                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1d8bc     00 20 06 F6 | 	mov	local02, #0
1d8c0     02 E4 05 F1 | 	add	objptr, #2
1d8c4     97 6A 48 FB | 	callpa	#(@LR__2356-@LR__2352)>>2,fcache_load_ptr_
1d8c8                 | LR__2352
1d8c8     10 27 02 F6 | 	mov	local05, local02
1d8cc     01 26 66 F0 | 	shl	local05, #1
1d8d0     F2 26 02 F1 | 	add	local05, objptr
1d8d4     10 29 02 F6 | 	mov	local06, local02
1d8d8     04 28 66 F0 | 	shl	local06, #4
1d8dc     10 29 02 F1 | 	add	local06, local02
1d8e0     04 28 66 F0 | 	shl	local06, #4
1d8e4     13 29 52 FC | 	wrword	local06, local05
1d8e8     01 20 06 F1 | 	add	local02, #1
1d8ec     F0 20 56 F2 | 	cmps	local02, #240 wc
1d8f0     D4 FF 9F CD |  if_b	jmp	#LR__2352
1d8f4     F0 20 06 F6 | 	mov	local02, #240
1d8f8                 | LR__2353
1d8f8     10 27 02 F6 | 	mov	local05, local02
1d8fc     01 26 66 F0 | 	shl	local05, #1
1d900     F2 26 02 F1 | 	add	local05, objptr
1d904     FF 22 06 F6 | 	mov	local03, #255
1d908     10 23 82 F1 | 	sub	local03, local02
1d90c     0C 22 66 F0 | 	shl	local03, #12
1d910     13 23 52 FC | 	wrword	local03, local05
1d914     01 20 06 F1 | 	add	local02, #1
1d918     00 21 16 F2 | 	cmp	local02, #256 wc
1d91c     D8 FF 9F CD |  if_b	jmp	#LR__2353
1d920                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1d920     00 20 06 F6 | 	mov	local02, #0
1d924     01 00 00 FF 
1d928     00 E4 05 F1 | 	add	objptr, ##512
1d92c                 | LR__2354
1d92c     10 27 02 F6 | 	mov	local05, local02
1d930     01 26 66 F0 | 	shl	local05, #1
1d934     F2 26 02 F1 | 	add	local05, objptr
1d938     10 29 02 F6 | 	mov	local06, local02
1d93c     09 28 66 F0 | 	shl	local06, #9
1d940     13 29 52 FC | 	wrword	local06, local05
1d944     FF 26 06 F6 | 	mov	local05, #255
1d948     10 27 82 F1 | 	sub	local05, local02
1d94c     01 26 66 F0 | 	shl	local05, #1
1d950     F2 26 02 F1 | 	add	local05, objptr
1d954     10 29 02 F6 | 	mov	local06, local02
1d958     09 28 66 F0 | 	shl	local06, #9
1d95c     13 29 52 FC | 	wrword	local06, local05
1d960     01 20 06 F1 | 	add	local02, #1
1d964     80 20 56 F2 | 	cmps	local02, #128 wc
1d968     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d96c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1d96c     00 20 06 F6 | 	mov	local02, #0
1d970     01 00 00 FF 
1d974     00 E4 05 F1 | 	add	objptr, ##512
1d978                 | LR__2355
1d978     10 27 02 F6 | 	mov	local05, local02
1d97c     01 26 66 F0 | 	shl	local05, #1
1d980     F2 26 02 F1 | 	add	local05, objptr
1d984     10 29 02 F6 | 	mov	local06, local02
1d988     0D 28 66 F0 | 	shl	local06, #13
1d98c     13 29 52 FC | 	wrword	local06, local05
1d990     01 20 06 F1 | 	add	local02, #1
1d994     08 20 56 F2 | 	cmps	local02, #8 wc
1d998     DC FF 9F CD |  if_b	jmp	#LR__2355
1d99c                 | LR__2356
1d99c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1d99c     08 20 06 F6 | 	mov	local02, #8
1d9a0     97 42 48 FB | 	callpa	#(@LR__2360-@LR__2357)>>2,fcache_load_ptr_
1d9a4                 | LR__2357
1d9a4     10 27 02 F6 | 	mov	local05, local02
1d9a8     01 26 66 F0 | 	shl	local05, #1
1d9ac     F2 26 02 F1 | 	add	local05, objptr
1d9b0     10 1F 02 F6 | 	mov	local01, local02
1d9b4     08 1E 86 F1 | 	sub	local01, #8
1d9b8     0B 1E 66 F0 | 	shl	local01, #11
1d9bc     7F 00 00 FF 
1d9c0     00 29 06 F6 | 	mov	local06, ##65280
1d9c4     0F 29 82 F1 | 	sub	local06, local01
1d9c8     13 29 52 FC | 	wrword	local06, local05
1d9cc     01 20 06 F1 | 	add	local02, #1
1d9d0     18 20 16 F2 | 	cmp	local02, #24 wc
1d9d4     CC FF 9F CD |  if_b	jmp	#LR__2357
1d9d8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1d9d8     18 20 06 F6 | 	mov	local02, #24
1d9dc                 | LR__2358
1d9dc     10 27 02 F6 | 	mov	local05, local02
1d9e0     01 26 66 F0 | 	shl	local05, #1
1d9e4     F2 26 02 F1 | 	add	local05, objptr
1d9e8     40 00 80 FF 
1d9ec     13 01 58 FC | 	wrword	##32768, local05
1d9f0     01 20 06 F1 | 	add	local02, #1
1d9f4     81 20 16 F2 | 	cmp	local02, #129 wc
1d9f8     E0 FF 9F CD |  if_b	jmp	#LR__2358
1d9fc                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1d9fc     81 20 06 F6 | 	mov	local02, #129
1da00                 | LR__2359
1da00     10 27 02 F6 | 	mov	local05, local02
1da04     01 26 66 F0 | 	shl	local05, #1
1da08     F2 26 02 F1 | 	add	local05, objptr
1da0c     FF 22 06 F6 | 	mov	local03, #255
1da10     10 23 82 F1 | 	sub	local03, local02
1da14     08 22 66 F0 | 	shl	local03, #8
1da18     13 23 52 FC | 	wrword	local03, local05
1da1c     01 20 06 F1 | 	add	local02, #1
1da20     00 21 16 F2 | 	cmp	local02, #256 wc
1da24     D8 FF 9F CD |  if_b	jmp	#LR__2359
1da28                 | LR__2360
1da28     3E 00 00 FF 
1da2c     FE E4 05 F1 | 	add	objptr, ##31998
1da30     F2 00 59 FC | 	wrword	#128, objptr
1da34     51 00 00 FF 
1da38     D6 E5 85 F1 | 	sub	objptr, ##41942
1da3c                 | ' for i=0 to 7
1da3c     00 20 06 F6 | 	mov	local02, #0
1da40     97 8E 48 FB | 	callpa	#(@LR__2362-@LR__2361)>>2,fcache_load_ptr_
1da44                 | LR__2361
1da44     10 27 02 F6 | 	mov	local05, local02
1da48     01 26 66 F0 | 	shl	local05, #1
1da4c     10 27 02 F1 | 	add	local05, local02
1da50     03 26 66 F0 | 	shl	local05, #3
1da54     14 00 00 FF 
1da58     38 E5 05 F1 | 	add	objptr, ##10552
1da5c     F2 26 02 F1 | 	add	local05, objptr
1da60     00 EE A1 FF 
1da64     13 01 68 FC | 	wrlong	##1138491392, local05
1da68     10 27 02 F6 | 	mov	local05, local02
1da6c     01 26 66 F0 | 	shl	local05, #1
1da70     10 27 02 F1 | 	add	local05, local02
1da74     03 26 66 F0 | 	shl	local05, #3
1da78     F2 26 02 F1 | 	add	local05, objptr
1da7c     04 26 06 F1 | 	add	local05, #4
1da80     13 21 42 FC | 	wrbyte	local02, local05
1da84     10 27 02 F6 | 	mov	local05, local02
1da88     01 26 66 F0 | 	shl	local05, #1
1da8c     10 27 02 F1 | 	add	local05, local02
1da90     03 26 66 F0 | 	shl	local05, #3
1da94     F2 26 02 F1 | 	add	local05, objptr
1da98     05 26 06 F1 | 	add	local05, #5
1da9c     13 21 42 FC | 	wrbyte	local02, local05
1daa0     10 27 02 F6 | 	mov	local05, local02
1daa4     01 26 66 F0 | 	shl	local05, #1
1daa8     10 27 02 F1 | 	add	local05, local02
1daac     03 26 66 F0 | 	shl	local05, #3
1dab0     F2 26 02 F1 | 	add	local05, objptr
1dab4     06 26 06 F1 | 	add	local05, #6
1dab8     13 01 58 FC | 	wrword	#0, local05
1dabc     10 27 02 F6 | 	mov	local05, local02
1dac0     01 26 66 F0 | 	shl	local05, #1
1dac4     10 27 02 F1 | 	add	local05, local02
1dac8     03 26 66 F0 | 	shl	local05, #3
1dacc     F2 26 02 F1 | 	add	local05, objptr
1dad0     08 26 06 F1 | 	add	local05, #8
1dad4     00 C0 9F FF 
1dad8     13 01 68 FC | 	wrlong	##1065353216, local05
1dadc     10 27 02 F6 | 	mov	local05, local02
1dae0     01 26 66 F0 | 	shl	local05, #1
1dae4     10 27 02 F1 | 	add	local05, local02
1dae8     03 26 66 F0 | 	shl	local05, #3
1daec     F2 26 02 F1 | 	add	local05, objptr
1daf0     0C 26 06 F1 | 	add	local05, #12
1daf4     00 40 A0 FF 
1daf8     13 01 68 FC | 	wrlong	##1082130432, local05
1dafc     10 27 02 F6 | 	mov	local05, local02
1db00     01 26 66 F0 | 	shl	local05, #1
1db04     10 27 02 F1 | 	add	local05, local02
1db08     03 26 66 F0 | 	shl	local05, #3
1db0c     F2 26 02 F1 | 	add	local05, objptr
1db10     10 26 06 F1 | 	add	local05, #16
1db14     13 01 68 FC | 	wrlong	#0, local05
1db18     10 27 02 F6 | 	mov	local05, local02
1db1c     01 26 66 F0 | 	shl	local05, #1
1db20     10 27 02 F1 | 	add	local05, local02
1db24     03 26 66 F0 | 	shl	local05, #3
1db28     F2 26 02 F1 | 	add	local05, objptr
1db2c     14 26 06 F1 | 	add	local05, #20
1db30     13 FF 59 FC | 	wrword	#255, local05
1db34     10 27 02 F6 | 	mov	local05, local02
1db38     01 26 66 F0 | 	shl	local05, #1
1db3c     3D 00 00 FF 
1db40     90 E4 05 F1 | 	add	objptr, ##31376
1db44     F2 26 02 F1 | 	add	local05, objptr
1db48     13 FF 59 FC | 	wrword	#255, local05
1db4c     01 20 06 F1 | 	add	local02, #1
1db50     08 20 56 F2 | 	cmps	local02, #8 wc
1db54     51 00 00 FF 
1db58     C8 E5 85 F1 | 	sub	objptr, ##41928
1db5c     E4 FE 9F CD |  if_b	jmp	#LR__2361
1db60                 | LR__2362
1db60     00 6E 20 FF 
1db64     00 28 06 F6 | 	mov	local06, ##1088159744
1db68                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1db68     03 26 06 F6 | 	mov	local05, #3
1db6c                 | LR__2363
1db6c     14 13 02 F6 | 	mov	arg01, local06
1db70     CE C3 1F FF 
1db74     7D 14 06 F6 | 	mov	arg02, ##1065852029
1db78     C4 67 B0 FD | 	call	#__system___float_mul
1db7c     FD 28 02 F6 | 	mov	local06, result1
1db80     FA 27 6E FB | 	djnz	local05, #LR__2363
1db84     00 20 06 F6 | 	mov	local02, #0
1db88                 | LR__2364
1db88     10 25 02 F6 | 	mov	local04, local02
1db8c     02 24 66 F0 | 	shl	local04, #2
1db90     14 00 00 FF 
1db94     D8 E4 05 F1 | 	add	objptr, ##10456
1db98     F2 24 02 F1 | 	add	local04, objptr
1db9c     12 29 62 FC | 	wrlong	local06, local04
1dba0     14 13 02 F6 | 	mov	arg01, local06
1dba4     CE C3 1F FF 
1dba8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1dbac     14 00 00 FF 
1dbb0     D8 E4 85 F1 | 	sub	objptr, ##10456
1dbb4     88 67 B0 FD | 	call	#__system___float_mul
1dbb8     FD 28 02 F6 | 	mov	local06, result1
1dbbc     01 20 06 F1 | 	add	local02, #1
1dbc0     0C 20 56 F2 | 	cmps	local02, #12 wc
1dbc4     C0 FF 9F CD |  if_b	jmp	#LR__2364
1dbc8     14 00 00 FF 
1dbcc     08 E5 05 F1 | 	add	objptr, ##10504
1dbd0     F2 50 6B FC | 	wrlong	#424, objptr
1dbd4     04 E4 05 F1 | 	add	objptr, #4
1dbd8     F2 20 6B FC | 	wrlong	#400, objptr
1dbdc     04 E4 05 F1 | 	add	objptr, #4
1dbe0     F2 F2 6A FC | 	wrlong	#377, objptr
1dbe4     04 E4 05 F1 | 	add	objptr, #4
1dbe8     F2 C8 6A FC | 	wrlong	#356, objptr
1dbec     04 E4 05 F1 | 	add	objptr, #4
1dbf0     F2 A0 6A FC | 	wrlong	#336, objptr
1dbf4     04 E4 05 F1 | 	add	objptr, #4
1dbf8     F2 7A 6A FC | 	wrlong	#317, objptr
1dbfc     04 E4 05 F1 | 	add	objptr, #4
1dc00     F2 58 6A FC | 	wrlong	#300, objptr
1dc04     04 E4 05 F1 | 	add	objptr, #4
1dc08     F2 36 6A FC | 	wrlong	#283, objptr
1dc0c     04 E4 05 F1 | 	add	objptr, #4
1dc10     F2 16 6A FC | 	wrlong	#267, objptr
1dc14     04 E4 05 F1 | 	add	objptr, #4
1dc18     F2 F8 69 FC | 	wrlong	#252, objptr
1dc1c     04 E4 05 F1 | 	add	objptr, #4
1dc20     F2 DC 69 FC | 	wrlong	#238, objptr
1dc24     04 E4 05 F1 | 	add	objptr, #4
1dc28     F2 C0 69 FC | 	wrlong	#224, objptr
1dc2c     3D 00 00 FF 
1dc30     A2 E4 05 F1 | 	add	objptr, ##31394
1dc34     F2 00 59 FC | 	wrword	#128, objptr
1dc38     02 E4 85 F1 | 	sub	objptr, #2
1dc3c     F2 00 59 FC | 	wrword	#128, objptr
1dc40     51 00 00 FF 
1dc44     D4 E5 85 F1 | 	sub	objptr, ##41940
1dc48     A7 F0 03 F6 | 	mov	ptra, fp
1dc4c     B2 00 A0 FD | 	call	#popregs_
1dc50                 | _init_audio_ret
1dc50     2D 00 64 FD | 	ret
1dc54                 | 
1dc54                 | ' 
1dc54                 | ' '------------------- Error messages
1dc54                 | ' 
1dc54                 | ' sub init_error_strings
1dc54                 | _init_error_strings
1dc54     8D 01 00 FF 
1dc58     1C 01 06 F6 | 	mov	_var01, ##@LR__5616
1dc5c     45 00 00 FF 
1dc60     7C E4 05 F1 | 	add	objptr, ##35452
1dc64     F2 00 62 FC | 	wrlong	_var01, objptr
1dc68     8D 01 00 FF 
1dc6c     1D 01 06 F6 | 	mov	_var01, ##@LR__5617
1dc70     04 E4 05 F1 | 	add	objptr, #4
1dc74     F2 00 62 FC | 	wrlong	_var01, objptr
1dc78     8D 01 00 FF 
1dc7c     41 01 06 F6 | 	mov	_var01, ##@LR__5618
1dc80     04 E4 05 F1 | 	add	objptr, #4
1dc84     F2 00 62 FC | 	wrlong	_var01, objptr
1dc88     8D 01 00 FF 
1dc8c     61 01 06 F6 | 	mov	_var01, ##@LR__5619
1dc90     04 E4 05 F1 | 	add	objptr, #4
1dc94     F2 00 62 FC | 	wrlong	_var01, objptr
1dc98     8D 01 00 FF 
1dc9c     7A 01 06 F6 | 	mov	_var01, ##@LR__5620
1dca0     04 E4 05 F1 | 	add	objptr, #4
1dca4     F2 00 62 FC | 	wrlong	_var01, objptr
1dca8     8D 01 00 FF 
1dcac     95 01 06 F6 | 	mov	_var01, ##@LR__5621
1dcb0     04 E4 05 F1 | 	add	objptr, #4
1dcb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcb8     8D 01 00 FF 
1dcbc     B6 01 06 F6 | 	mov	_var01, ##@LR__5622
1dcc0     04 E4 05 F1 | 	add	objptr, #4
1dcc4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcc8     8D 01 00 FF 
1dccc     E3 01 06 F6 | 	mov	_var01, ##@LR__5623
1dcd0     04 E4 05 F1 | 	add	objptr, #4
1dcd4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcd8     8E 01 00 FF 
1dcdc     0D 00 06 F6 | 	mov	_var01, ##@LR__5624
1dce0     04 E4 05 F1 | 	add	objptr, #4
1dce4     F2 00 62 FC | 	wrlong	_var01, objptr
1dce8     8E 01 00 FF 
1dcec     25 00 06 F6 | 	mov	_var01, ##@LR__5625
1dcf0     04 E4 05 F1 | 	add	objptr, #4
1dcf4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcf8     8E 01 00 FF 
1dcfc     45 00 06 F6 | 	mov	_var01, ##@LR__5626
1dd00     04 E4 05 F1 | 	add	objptr, #4
1dd04     F2 00 62 FC | 	wrlong	_var01, objptr
1dd08     8E 01 00 FF 
1dd0c     5B 00 06 F6 | 	mov	_var01, ##@LR__5627
1dd10     04 E4 05 F1 | 	add	objptr, #4
1dd14     F2 00 62 FC | 	wrlong	_var01, objptr
1dd18     8E 01 00 FF 
1dd1c     78 00 06 F6 | 	mov	_var01, ##@LR__5628
1dd20     04 E4 05 F1 | 	add	objptr, #4
1dd24     F2 00 62 FC | 	wrlong	_var01, objptr
1dd28     8E 01 00 FF 
1dd2c     9B 00 06 F6 | 	mov	_var01, ##@LR__5629
1dd30     04 E4 05 F1 | 	add	objptr, #4
1dd34     F2 00 62 FC | 	wrlong	_var01, objptr
1dd38     8E 01 00 FF 
1dd3c     C1 00 06 F6 | 	mov	_var01, ##@LR__5630
1dd40     04 E4 05 F1 | 	add	objptr, #4
1dd44     F2 00 62 FC | 	wrlong	_var01, objptr
1dd48     8E 01 00 FF 
1dd4c     DC 00 06 F6 | 	mov	_var01, ##@LR__5631
1dd50     04 E4 05 F1 | 	add	objptr, #4
1dd54     F2 00 62 FC | 	wrlong	_var01, objptr
1dd58     8E 01 00 FF 
1dd5c     EC 00 06 F6 | 	mov	_var01, ##@LR__5632
1dd60     04 E4 05 F1 | 	add	objptr, #4
1dd64     F2 00 62 FC | 	wrlong	_var01, objptr
1dd68     8E 01 00 FF 
1dd6c     FB 00 06 F6 | 	mov	_var01, ##@LR__5633
1dd70     04 E4 05 F1 | 	add	objptr, #4
1dd74     F2 00 62 FC | 	wrlong	_var01, objptr
1dd78     8E 01 00 FF 
1dd7c     15 01 06 F6 | 	mov	_var01, ##@LR__5634
1dd80     04 E4 05 F1 | 	add	objptr, #4
1dd84     F2 00 62 FC | 	wrlong	_var01, objptr
1dd88     8E 01 00 FF 
1dd8c     26 01 06 F6 | 	mov	_var01, ##@LR__5635
1dd90     04 E4 05 F1 | 	add	objptr, #4
1dd94     F2 00 62 FC | 	wrlong	_var01, objptr
1dd98     8E 01 00 FF 
1dd9c     3D 01 06 F6 | 	mov	_var01, ##@LR__5636
1dda0     04 E4 05 F1 | 	add	objptr, #4
1dda4     F2 00 62 FC | 	wrlong	_var01, objptr
1dda8     8E 01 00 FF 
1ddac     50 01 06 F6 | 	mov	_var01, ##@LR__5637
1ddb0     04 E4 05 F1 | 	add	objptr, #4
1ddb4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddb8     8E 01 00 FF 
1ddbc     5F 01 06 F6 | 	mov	_var01, ##@LR__5638
1ddc0     04 E4 05 F1 | 	add	objptr, #4
1ddc4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddc8     8E 01 00 FF 
1ddcc     7B 01 06 F6 | 	mov	_var01, ##@LR__5639
1ddd0     04 E4 05 F1 | 	add	objptr, #4
1ddd4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddd8     8E 01 00 FF 
1dddc     8B 01 06 F6 | 	mov	_var01, ##@LR__5640
1dde0     04 E4 05 F1 | 	add	objptr, #4
1dde4     F2 00 62 FC | 	wrlong	_var01, objptr
1dde8     8E 01 00 FF 
1ddec     9B 01 06 F6 | 	mov	_var01, ##@LR__5641
1ddf0     04 E4 05 F1 | 	add	objptr, #4
1ddf4     F2 00 62 FC | 	wrlong	_var01, objptr
1ddf8     8E 01 00 FF 
1ddfc     CE 01 06 F6 | 	mov	_var01, ##@LR__5642
1de00     04 E4 05 F1 | 	add	objptr, #4
1de04     F2 00 62 FC | 	wrlong	_var01, objptr
1de08     8E 01 00 FF 
1de0c     E9 01 06 F6 | 	mov	_var01, ##@LR__5643
1de10     04 E4 05 F1 | 	add	objptr, #4
1de14     F2 00 62 FC | 	wrlong	_var01, objptr
1de18     8E 01 00 FF 
1de1c     FE 01 06 F6 | 	mov	_var01, ##@LR__5644
1de20     04 E4 05 F1 | 	add	objptr, #4
1de24     F2 00 62 FC | 	wrlong	_var01, objptr
1de28     8F 01 00 FF 
1de2c     0A 00 06 F6 | 	mov	_var01, ##@LR__5645
1de30     04 E4 05 F1 | 	add	objptr, #4
1de34     F2 00 62 FC | 	wrlong	_var01, objptr
1de38     8F 01 00 FF 
1de3c     1B 00 06 F6 | 	mov	_var01, ##@LR__5646
1de40     04 E4 05 F1 | 	add	objptr, #4
1de44     F2 00 62 FC | 	wrlong	_var01, objptr
1de48     8F 01 00 FF 
1de4c     2B 00 06 F6 | 	mov	_var01, ##@LR__5647
1de50     04 E4 05 F1 | 	add	objptr, #4
1de54     F2 00 62 FC | 	wrlong	_var01, objptr
1de58     8F 01 00 FF 
1de5c     46 00 06 F6 | 	mov	_var01, ##@LR__5648
1de60     04 E4 05 F1 | 	add	objptr, #4
1de64     F2 00 62 FC | 	wrlong	_var01, objptr
1de68     8F 01 00 FF 
1de6c     56 00 06 F6 | 	mov	_var01, ##@LR__5649
1de70     04 E4 05 F1 | 	add	objptr, #4
1de74     F2 00 62 FC | 	wrlong	_var01, objptr
1de78     8F 01 00 FF 
1de7c     64 00 06 F6 | 	mov	_var01, ##@LR__5650
1de80     04 E4 05 F1 | 	add	objptr, #4
1de84     F2 00 62 FC | 	wrlong	_var01, objptr
1de88     8F 01 00 FF 
1de8c     7E 00 06 F6 | 	mov	_var01, ##@LR__5651
1de90     04 E4 05 F1 | 	add	objptr, #4
1de94     F2 00 62 FC | 	wrlong	_var01, objptr
1de98     8F 01 00 FF 
1de9c     B1 00 06 F6 | 	mov	_var01, ##@LR__5652
1dea0     04 E4 05 F1 | 	add	objptr, #4
1dea4     F2 00 62 FC | 	wrlong	_var01, objptr
1dea8     8F 01 00 FF 
1deac     C9 00 06 F6 | 	mov	_var01, ##@LR__5653
1deb0     04 E4 05 F1 | 	add	objptr, #4
1deb4     F2 00 62 FC | 	wrlong	_var01, objptr
1deb8     8F 01 00 FF 
1debc     E4 00 06 F6 | 	mov	_var01, ##@LR__5654
1dec0     04 E4 05 F1 | 	add	objptr, #4
1dec4     F2 00 62 FC | 	wrlong	_var01, objptr
1dec8     8F 01 00 FF 
1decc     01 01 06 F6 | 	mov	_var01, ##@LR__5655
1ded0     04 E4 05 F1 | 	add	objptr, #4
1ded4     F2 00 62 FC | 	wrlong	_var01, objptr
1ded8     8F 01 00 FF 
1dedc     1A 01 06 F6 | 	mov	_var01, ##@LR__5656
1dee0     04 E4 05 F1 | 	add	objptr, #4
1dee4     F2 00 62 FC | 	wrlong	_var01, objptr
1dee8     8F 01 00 FF 
1deec     39 01 06 F6 | 	mov	_var01, ##@LR__5657
1def0     04 E4 05 F1 | 	add	objptr, #4
1def4     F2 00 62 FC | 	wrlong	_var01, objptr
1def8     8F 01 00 FF 
1defc     47 01 06 F6 | 	mov	_var01, ##@LR__5658
1df00     04 E4 05 F1 | 	add	objptr, #4
1df04     F2 00 62 FC | 	wrlong	_var01, objptr
1df08     8F 01 00 FF 
1df0c     74 01 06 F6 | 	mov	_var01, ##@LR__5659
1df10     04 E4 05 F1 | 	add	objptr, #4
1df14     F2 00 62 FC | 	wrlong	_var01, objptr
1df18     8F 01 00 FF 
1df1c     81 01 06 F6 | 	mov	_var01, ##@LR__5660
1df20     04 E4 05 F1 | 	add	objptr, #4
1df24     F2 00 62 FC | 	wrlong	_var01, objptr
1df28     8F 01 00 FF 
1df2c     95 01 06 F6 | 	mov	_var01, ##@LR__5661
1df30     04 E4 05 F1 | 	add	objptr, #4
1df34     F2 00 62 FC | 	wrlong	_var01, objptr
1df38     8F 01 00 FF 
1df3c     B9 01 06 F6 | 	mov	_var01, ##@LR__5662
1df40     04 E4 05 F1 | 	add	objptr, #4
1df44     F2 00 62 FC | 	wrlong	_var01, objptr
1df48     8F 01 00 FF 
1df4c     D0 01 06 F6 | 	mov	_var01, ##@LR__5663
1df50     04 E4 05 F1 | 	add	objptr, #4
1df54     F2 00 62 FC | 	wrlong	_var01, objptr
1df58     8F 01 00 FF 
1df5c     E3 01 06 F6 | 	mov	_var01, ##@LR__5664
1df60     04 E4 05 F1 | 	add	objptr, #4
1df64     F2 00 62 FC | 	wrlong	_var01, objptr
1df68     8F 01 00 FF 
1df6c     FA 01 06 F6 | 	mov	_var01, ##@LR__5665
1df70     04 E4 05 F1 | 	add	objptr, #4
1df74     F2 00 62 FC | 	wrlong	_var01, objptr
1df78     90 01 00 FF 
1df7c     13 00 06 F6 | 	mov	_var01, ##@LR__5666
1df80     04 E4 05 F1 | 	add	objptr, #4
1df84     F2 00 62 FC | 	wrlong	_var01, objptr
1df88     90 01 00 FF 
1df8c     35 00 06 F6 | 	mov	_var01, ##@LR__5667
1df90     04 E4 05 F1 | 	add	objptr, #4
1df94     F2 00 62 FC | 	wrlong	_var01, objptr
1df98     90 01 00 FF 
1df9c     48 00 06 F6 | 	mov	_var01, ##@LR__5668
1dfa0     04 E4 05 F1 | 	add	objptr, #4
1dfa4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfa8     90 01 00 FF 
1dfac     58 00 06 F6 | 	mov	_var01, ##@LR__5669
1dfb0     04 E4 05 F1 | 	add	objptr, #4
1dfb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfb8     45 00 00 FF 
1dfbc     50 E5 85 F1 | 	sub	objptr, ##35664
1dfc0                 | _init_error_strings_ret
1dfc0     2D 00 64 FD | 	ret
1dfc4                 | 
1dfc4                 | '         
1dfc4                 | ' sub printerror(err as integer, linenum=0 as integer)
1dfc4                 | _printerror
1dfc4     02 4A 05 F6 | 	mov	COUNT_, #2
1dfc8     A8 00 A0 FD | 	call	#pushregs_
1dfcc     09 1F 02 F6 | 	mov	local01, arg01
1dfd0     0A 21 02 F6 | 	mov	local02, arg02
1dfd4     90 01 00 FF 
1dfd8     70 12 06 F6 | 	mov	arg01, ##@LR__5670
1dfdc     88 20 B0 FD | 	call	#_hg010b_spin2_write
1dfe0     0F 13 02 F6 | 	mov	arg01, local01
1dfe4     24 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1dfe8     FD 12 02 F6 | 	mov	arg01, result1
1dfec     78 20 B0 FD | 	call	#_hg010b_spin2_write
1dff0     90 01 00 FF 
1dff4     77 12 06 F6 | 	mov	arg01, ##@LR__5671
1dff8     6C 20 B0 FD | 	call	#_hg010b_spin2_write
1dffc     02 1E 66 F0 | 	shl	local01, #2
1e000     45 00 00 FF 
1e004     7C E4 05 F1 | 	add	objptr, ##35452
1e008     F2 1E 02 F1 | 	add	local01, objptr
1e00c     0F 13 02 FB | 	rdlong	arg01, local01
1e010     45 00 00 FF 
1e014     7C E4 85 F1 | 	sub	objptr, ##35452
1e018     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1e01c                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(": ")  : v.write(errors$(err))
1e01c                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
1e01c     01 20 56 F2 | 	cmps	local02, #1 wc
1e020     20 00 90 CD |  if_b	jmp	#LR__2370
1e024     90 01 00 FF 
1e028     7A 12 06 F6 | 	mov	arg01, ##@LR__5672
1e02c     38 20 B0 FD | 	call	#_hg010b_spin2_write
1e030     10 13 02 F6 | 	mov	arg01, local02
1e034     D4 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1e038     FD 12 02 F6 | 	mov	arg01, result1
1e03c                 | ' 
1e03c                 | ' write(text)
1e03c     28 20 B0 FD | 	call	#_hg010b_spin2_write
1e040                 | ' crlf
1e040     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1e044                 | LR__2370
1e044     A7 F0 03 F6 | 	mov	ptra, fp
1e048     B2 00 A0 FD | 	call	#popregs_
1e04c                 | _printerror_ret
1e04c     2D 00 64 FD | 	ret
1e050                 | 
1e050                 | ' 
1e050                 | ' '' ------------------------------- Hardware start/stop/initialization 
1e050                 | ' 
1e050                 | ' sub startpsram
1e050                 | _startpsram
1e050     00 12 06 F6 | 	mov	arg01, #0
1e054     0A 14 C6 F9 | 	decod	arg02, #10
1e058     0B 16 06 F6 | 	mov	arg03, #11
1e05c     07 18 06 F6 | 	mov	arg04, #7
1e060     0B 00 00 FF 
1e064     CC E4 05 F1 | 	add	objptr, ##5836
1e068     AC 26 B0 FD | 	call	#_psram_spin2_startx
1e06c     2B 00 00 FF 
1e070     3C E5 05 F1 | 	add	objptr, ##22332
1e074     F2 FA 61 FC | 	wrlong	result1, objptr
1e078                 | '     return $7FF00 + cog*12
1e078     0C E4 05 F1 | 	add	objptr, #12
1e07c     FF 03 80 FF 
1e080     F2 00 6A FC | 	wrlong	##524032, objptr
1e084     37 00 00 FF 
1e088     14 E4 85 F1 | 	sub	objptr, ##28180
1e08c                 | _startpsram_ret
1e08c     2D 00 64 FD | 	ret
1e090                 | 
1e090                 | ' 
1e090                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1e090                 | _startvideo
1e090     01 4A 05 F6 | 	mov	COUNT_, #1
1e094     A8 00 A0 FD | 	call	#pushregs_
1e098     37 00 00 FF 
1e09c     14 E4 05 F1 | 	add	objptr, ##28180
1e0a0     F2 18 02 FB | 	rdlong	arg04, objptr
1e0a4     37 00 00 FF 
1e0a8     14 E4 85 F1 | 	sub	objptr, ##28180
1e0ac     0A 13 02 F6 | 	mov	arg01, arg02
1e0b0     0C 15 02 F6 | 	mov	arg02, arg04
1e0b4     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1e0b8     37 00 00 FF 
1e0bc     00 E4 05 F1 | 	add	objptr, ##28160
1e0c0     F2 FA 61 FC | 	wrlong	result1, objptr
1e0c4                 | ' 
1e0c4                 | ' videocog=v.start(pin,mbox)
1e0c4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1e0c4     00 1E 06 F6 | 	mov	local01, #0
1e0c8     2B 00 00 FF 
1e0cc     34 E5 85 F1 | 	sub	objptr, ##22324
1e0d0                 | LR__2380
1e0d0     0F 13 02 F6 | 	mov	arg01, local01
1e0d4     00 28 00 FF 
1e0d8     00 14 06 F6 | 	mov	arg02, ##5242880
1e0dc     90 2A B0 FD | 	call	#_psram_spin2_setQos
1e0e0     01 1E 06 F1 | 	add	local01, #1
1e0e4     08 1E 56 F2 | 	cmps	local01, #8 wc
1e0e8     E4 FF 9F CD |  if_b	jmp	#LR__2380
1e0ec     2B 00 00 FF 
1e0f0     34 E5 05 F1 | 	add	objptr, ##22324
1e0f4     F2 12 02 FB | 	rdlong	arg01, objptr
1e0f8     7A 00 02 FF 
1e0fc     00 14 06 F6 | 	mov	arg02, ##67171328
1e100     2B 00 00 FF 
1e104     34 E5 85 F1 | 	sub	objptr, ##22324
1e108     64 2A B0 FD | 	call	#_psram_spin2_setQos
1e10c     0B 00 00 FF 
1e110     CC E4 85 F1 | 	sub	objptr, ##5836
1e114                 | ' psram.setQoS(videocog, $0400f400) 
1e114                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1e114     F2 14 02 F6 | 	mov	arg02, objptr
1e118     00 88 04 FF 
1e11c     00 14 46 F5 | 	or	arg02, ##152043520
1e120     00 16 06 F6 | 	mov	arg03, #0
1e124     00 18 06 F6 | 	mov	arg04, #0
1e128     00 12 06 F6 | 	mov	arg01, #0
1e12c     FC 3E B0 FD | 	call	#__system___basic_open
1e130                 | ' return videocog
1e130     37 00 00 FF 
1e134     00 E4 05 F1 | 	add	objptr, ##28160
1e138     F2 FA 01 FB | 	rdlong	result1, objptr
1e13c     37 00 00 FF 
1e140     00 E4 85 F1 | 	sub	objptr, ##28160
1e144     A7 F0 03 F6 | 	mov	ptra, fp
1e148     B2 00 A0 FD | 	call	#popregs_
1e14c                 | _startvideo_ret
1e14c     2D 00 64 FD | 	ret
1e150                 | 
1e150                 | ' 
1e150                 | ' 
1e150                 | ' 
1e150                 | ' '' ------------------------------- Convenient psram peek/poke
1e150                 | ' 
1e150                 | ' sub pslpoke(addr as ulong,value as ulong)
1e150                 | _pslpoke
1e150     00 4A 05 F6 | 	mov	COUNT_, #0
1e154     A8 00 A0 FD | 	call	#pushregs_
1e158     08 F0 07 F1 | 	add	ptra, #8
1e15c     A7 12 62 FC | 	wrlong	arg01, fp
1e160     04 4E 05 F1 | 	add	fp, #4
1e164     A7 14 62 FC | 	wrlong	arg02, fp
1e168     A7 12 02 F6 | 	mov	arg01, fp
1e16c     04 4E 85 F1 | 	sub	fp, #4
1e170     A7 14 02 FB | 	rdlong	arg02, fp
1e174     04 16 06 F6 | 	mov	arg03, #4
1e178     0B 00 00 FF 
1e17c     CC E4 05 F1 | 	add	objptr, ##5836
1e180     5C 28 B0 FD | 	call	#_psram_spin2_write
1e184     0B 00 00 FF 
1e188     CC E4 85 F1 | 	sub	objptr, ##5836
1e18c     A7 F0 03 F6 | 	mov	ptra, fp
1e190     B2 00 A0 FD | 	call	#popregs_
1e194                 | _pslpoke_ret
1e194     2D 00 64 FD | 	ret
1e198                 | 
1e198                 | ' 
1e198                 | ' sub psdpoke(addr as ulong,value as ulong)
1e198                 | _psdpoke
1e198     00 4A 05 F6 | 	mov	COUNT_, #0
1e19c     A8 00 A0 FD | 	call	#pushregs_
1e1a0     08 F0 07 F1 | 	add	ptra, #8
1e1a4     A7 12 62 FC | 	wrlong	arg01, fp
1e1a8     04 4E 05 F1 | 	add	fp, #4
1e1ac     A7 14 62 FC | 	wrlong	arg02, fp
1e1b0     A7 12 02 F6 | 	mov	arg01, fp
1e1b4     04 4E 85 F1 | 	sub	fp, #4
1e1b8     A7 14 02 FB | 	rdlong	arg02, fp
1e1bc     02 16 06 F6 | 	mov	arg03, #2
1e1c0     0B 00 00 FF 
1e1c4     CC E4 05 F1 | 	add	objptr, ##5836
1e1c8     14 28 B0 FD | 	call	#_psram_spin2_write
1e1cc     0B 00 00 FF 
1e1d0     CC E4 85 F1 | 	sub	objptr, ##5836
1e1d4     A7 F0 03 F6 | 	mov	ptra, fp
1e1d8     B2 00 A0 FD | 	call	#popregs_
1e1dc                 | _psdpoke_ret
1e1dc     2D 00 64 FD | 	ret
1e1e0                 | 
1e1e0                 | ' 
1e1e0                 | ' sub pspoke(addr as ulong,value as ulong)
1e1e0                 | _pspoke
1e1e0     00 4A 05 F6 | 	mov	COUNT_, #0
1e1e4     A8 00 A0 FD | 	call	#pushregs_
1e1e8     08 F0 07 F1 | 	add	ptra, #8
1e1ec     A7 12 62 FC | 	wrlong	arg01, fp
1e1f0     04 4E 05 F1 | 	add	fp, #4
1e1f4     A7 14 62 FC | 	wrlong	arg02, fp
1e1f8     A7 12 02 F6 | 	mov	arg01, fp
1e1fc     04 4E 85 F1 | 	sub	fp, #4
1e200     A7 14 02 FB | 	rdlong	arg02, fp
1e204     01 16 06 F6 | 	mov	arg03, #1
1e208     0B 00 00 FF 
1e20c     CC E4 05 F1 | 	add	objptr, ##5836
1e210     CC 27 B0 FD | 	call	#_psram_spin2_write
1e214     0B 00 00 FF 
1e218     CC E4 85 F1 | 	sub	objptr, ##5836
1e21c     A7 F0 03 F6 | 	mov	ptra, fp
1e220     B2 00 A0 FD | 	call	#popregs_
1e224                 | _pspoke_ret
1e224     2D 00 64 FD | 	ret
1e228                 | 
1e228                 | ' 
1e228                 | ' function pspeek(adr as ulong) as ubyte
1e228                 | _pspeek
1e228     00 4A 05 F6 | 	mov	COUNT_, #0
1e22c     A8 00 A0 FD | 	call	#pushregs_
1e230     0C F0 07 F1 | 	add	ptra, #12
1e234     04 4E 05 F1 | 	add	fp, #4
1e238     A7 12 62 FC | 	wrlong	arg01, fp
1e23c     04 4E 05 F1 | 	add	fp, #4
1e240     A7 12 02 F6 | 	mov	arg01, fp
1e244     04 4E 85 F1 | 	sub	fp, #4
1e248     A7 14 02 FB | 	rdlong	arg02, fp
1e24c     04 4E 85 F1 | 	sub	fp, #4
1e250     01 16 06 F6 | 	mov	arg03, #1
1e254     0B 00 00 FF 
1e258     CC E4 05 F1 | 	add	objptr, ##5836
1e25c     E4 26 B0 FD | 	call	#_psram_spin2_read1
1e260     0B 00 00 FF 
1e264     CC E4 85 F1 | 	sub	objptr, ##5836
1e268                 | ' psram.read1(varptr(res),adr,1)
1e268                 | ' return res
1e268     08 4E 05 F1 | 	add	fp, #8
1e26c     A7 FA C1 FA | 	rdbyte	result1, fp
1e270     08 4E 85 F1 | 	sub	fp, #8
1e274     A7 F0 03 F6 | 	mov	ptra, fp
1e278     B2 00 A0 FD | 	call	#popregs_
1e27c                 | _pspeek_ret
1e27c     2D 00 64 FD | 	ret
1e280                 | 
1e280                 | ' 
1e280                 | ' function pslpeek(adr as ulong) as ulong
1e280                 | _pslpeek
1e280     00 4A 05 F6 | 	mov	COUNT_, #0
1e284     A8 00 A0 FD | 	call	#pushregs_
1e288     0C F0 07 F1 | 	add	ptra, #12
1e28c     04 4E 05 F1 | 	add	fp, #4
1e290     A7 12 62 FC | 	wrlong	arg01, fp
1e294     04 4E 05 F1 | 	add	fp, #4
1e298     A7 12 02 F6 | 	mov	arg01, fp
1e29c     04 4E 85 F1 | 	sub	fp, #4
1e2a0     A7 14 02 FB | 	rdlong	arg02, fp
1e2a4     04 4E 85 F1 | 	sub	fp, #4
1e2a8     04 16 06 F6 | 	mov	arg03, #4
1e2ac     0B 00 00 FF 
1e2b0     CC E4 05 F1 | 	add	objptr, ##5836
1e2b4     8C 26 B0 FD | 	call	#_psram_spin2_read1
1e2b8     0B 00 00 FF 
1e2bc     CC E4 85 F1 | 	sub	objptr, ##5836
1e2c0                 | ' psram.read1(varptr(res),adr,4)
1e2c0                 | ' return res
1e2c0     08 4E 05 F1 | 	add	fp, #8
1e2c4     A7 FA 01 FB | 	rdlong	result1, fp
1e2c8     08 4E 85 F1 | 	sub	fp, #8
1e2cc     A7 F0 03 F6 | 	mov	ptra, fp
1e2d0     B2 00 A0 FD | 	call	#popregs_
1e2d4                 | _pslpeek_ret
1e2d4     2D 00 64 FD | 	ret
1e2d8                 | 
1e2d8                 | ' 
1e2d8                 | ' function psdpeek(adr as ulong) as ulong
1e2d8                 | _psdpeek
1e2d8     00 4A 05 F6 | 	mov	COUNT_, #0
1e2dc     A8 00 A0 FD | 	call	#pushregs_
1e2e0     0C F0 07 F1 | 	add	ptra, #12
1e2e4     04 4E 05 F1 | 	add	fp, #4
1e2e8     A7 12 62 FC | 	wrlong	arg01, fp
1e2ec     04 4E 05 F1 | 	add	fp, #4
1e2f0     A7 12 02 F6 | 	mov	arg01, fp
1e2f4     04 4E 85 F1 | 	sub	fp, #4
1e2f8     A7 14 02 FB | 	rdlong	arg02, fp
1e2fc     04 4E 85 F1 | 	sub	fp, #4
1e300     02 16 06 F6 | 	mov	arg03, #2
1e304     0B 00 00 FF 
1e308     CC E4 05 F1 | 	add	objptr, ##5836
1e30c     34 26 B0 FD | 	call	#_psram_spin2_read1
1e310     0B 00 00 FF 
1e314     CC E4 85 F1 | 	sub	objptr, ##5836
1e318                 | ' psram.read1(varptr(res),adr,2)
1e318                 | ' return res
1e318     08 4E 05 F1 | 	add	fp, #8
1e31c     A7 FA E1 FA | 	rdword	result1, fp
1e320     08 4E 85 F1 | 	sub	fp, #8
1e324     A7 F0 03 F6 | 	mov	ptra, fp
1e328     B2 00 A0 FD | 	call	#popregs_
1e32c                 | _psdpeek_ret
1e32c     2D 00 64 FD | 	ret
1e330                 | 
1e330                 | ' 
1e330                 | ' '' ------------------------------- USB keyboard scan to char translator
1e330                 | ' 
1e330                 | ' function scantochar(key)
1e330                 | _scantochar
1e330                 | ' 
1e330                 | ' select case (key shr 8) and 255
1e330     09 01 02 F6 | 	mov	_var01, arg01
1e334     08 00 C6 F0 | 	sar	_var01, #8
1e338     FF 00 0E F5 | 	and	_var01, #255 wz
1e33c     24 00 90 AD |  if_e	jmp	#LR__2390
1e340     02 00 0E F2 | 	cmp	_var01, #2 wz
1e344     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1e348     30 00 90 AD |  if_e	jmp	#LR__2391
1e34c     40 00 0E F2 | 	cmp	_var01, #64 wz
1e350     44 00 90 AD |  if_e	jmp	#LR__2392
1e354     42 00 0E F2 | 	cmp	_var01, #66 wz
1e358     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1e35c     70 00 90 5D |  if_ne	jmp	#LR__2394
1e360     50 00 90 FD | 	jmp	#LR__2393
1e364                 | LR__2390
1e364     09 FB 01 F6 | 	mov	result1, arg01
1e368     7F FA 05 F5 | 	and	result1, #127
1e36c     02 FA 65 F0 | 	shl	result1, #2
1e370     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e374     FD FA C1 FA | 	rdbyte	result1, result1
1e378     54 00 90 FD | 	jmp	#_scantochar_ret
1e37c                 | LR__2391
1e37c     09 FB 01 F6 | 	mov	result1, arg01
1e380     7F FA 05 F5 | 	and	result1, #127
1e384     02 FA 65 F0 | 	shl	result1, #2
1e388     01 FA 05 F1 | 	add	result1, #1
1e38c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e390     FD FA C1 FA | 	rdbyte	result1, result1
1e394     38 00 90 FD | 	jmp	#_scantochar_ret
1e398                 | LR__2392
1e398     09 FB 01 F6 | 	mov	result1, arg01
1e39c     7F FA 05 F5 | 	and	result1, #127
1e3a0     02 FA 65 F0 | 	shl	result1, #2
1e3a4     02 FA 05 F1 | 	add	result1, #2
1e3a8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e3ac     FD FA C1 FA | 	rdbyte	result1, result1
1e3b0     1C 00 90 FD | 	jmp	#_scantochar_ret
1e3b4                 | LR__2393
1e3b4     09 FB 01 F6 | 	mov	result1, arg01
1e3b8     7F FA 05 F5 | 	and	result1, #127
1e3bc     02 FA 65 F0 | 	shl	result1, #2
1e3c0     03 FA 05 F1 | 	add	result1, #3
1e3c4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e3c8     FD FA C1 FA | 	rdbyte	result1, result1
1e3cc     00 00 90 FD | 	jmp	#_scantochar_ret
1e3d0                 | LR__2394
1e3d0                 | _scantochar_ret
1e3d0     2D 00 64 FD | 	ret
1e3d4                 | 
1e3d4                 | _program
1e3d4     01 4A 05 F6 | 	mov	COUNT_, #1
1e3d8     A8 00 A0 FD | 	call	#pushregs_
1e3dc     70 FC BF FD | 	call	#_startpsram
1e3e0     40 12 06 F6 | 	mov	arg01, #64
1e3e4     00 14 06 F6 | 	mov	arg02, #0
1e3e8     00 16 06 F6 | 	mov	arg03, #0
1e3ec     A0 FC BF FD | 	call	#_startvideo
1e3f0     37 00 00 FF 
1e3f4     14 E4 05 F1 | 	add	objptr, ##28180
1e3f8     F2 12 02 FB | 	rdlong	arg01, objptr
1e3fc     00 14 06 F6 | 	mov	arg02, #0
1e400     FB 03 00 FF 
1e404     00 17 06 F6 | 	mov	arg03, ##521984
1e408     2B 00 00 FF 
1e40c     48 E5 85 F1 | 	sub	objptr, ##22344
1e410     0C 2B B0 FD | 	call	#_audio096_spin2_start
1e414     FE 16 02 F6 | 	mov	arg03, result2
1e418     2B 00 00 FF 
1e41c     30 E5 05 F1 | 	add	objptr, ##22320
1e420     F2 FA 61 FC | 	wrlong	result1, objptr
1e424     14 E4 05 F1 | 	add	objptr, #20
1e428     F2 16 62 FC | 	wrlong	arg03, objptr
1e42c     37 00 00 FF 
1e430     10 E4 85 F1 | 	sub	objptr, ##28176
1e434     32 12 06 F6 | 	mov	arg01, #50
1e438     3C 34 B0 FD | 	call	#__system___waitms
1e43c     37 00 00 FF 
1e440     10 E4 05 F1 | 	add	objptr, ##28176
1e444     F2 12 02 FB | 	rdlong	arg01, objptr
1e448     37 00 00 FF 
1e44c     10 E4 85 F1 | 	sub	objptr, ##28176
1e450     14 12 06 F1 | 	add	arg01, #20
1e454     20 00 80 FF 
1e458     09 01 58 FC | 	wrword	##16384, arg01
1e45c     18 28 B0 FD | 	call	#_usbnew_spin2_start
1e460     37 00 00 FF 
1e464     04 E4 05 F1 | 	add	objptr, ##28164
1e468     F2 FA 61 FC | 	wrlong	result1, objptr
1e46c                 | '   mouse_limits[0] := xlim
1e46c     0F 00 00 FF 
1e470     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1e474     01 00 80 FF 
1e478     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1e47c                 | '   mouse_limits[1] := ylim
1e47c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e480     01 00 80 FF 
1e484     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1e488     36 00 00 FF 
1e48c     F3 E4 85 F1 | 	sub	objptr, ##27891
1e490     F2 12 02 F6 | 	mov	arg01, objptr
1e494     11 E5 85 F1 | 	sub	objptr, #273
1e498     C4 12 06 F1 | 	add	arg01, #196
1e49c                 | '   mouse_outptr := ptr
1e49c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e4a0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1e4a4     0F 00 00 FF 
1e4a8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e4ac     16 00 00 FF 
1e4b0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1e4b4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1e4b8     16 00 00 FF 
1e4bc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1e4c0     10 12 06 F6 | 	mov	arg01, #16
1e4c4     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e4c8     10 12 06 F6 | 	mov	arg01, #16
1e4cc     20 14 06 F6 | 	mov	arg02, #32
1e4d0     20 16 06 F6 | 	mov	arg03, #32
1e4d4     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1e4d8     09 12 C6 F9 | 	decod	arg01, #9
1e4dc     2C 15 06 F6 | 	mov	arg02, #300
1e4e0     EC 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1e4e4     F2 16 02 F6 | 	mov	arg03, objptr
1e4e8     50 00 00 FF 
1e4ec     1C E5 05 F1 | 	add	objptr, ##41244
1e4f0     F2 14 02 F6 | 	mov	arg02, objptr
1e4f4     0A 17 62 FC | 	wrlong	arg03, arg02
1e4f8     04 14 06 F1 | 	add	arg02, #4
1e4fc     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1e500     EF 14 02 F6 | 	mov	arg02, entryptr__
1e504     1E FA 05 F6 | 	mov	result1, #30
1e508     28 E4 61 FD | 	setq	objptr
1e50c     0A FB F1 FC | 	coginit	result1, arg02 wc
1e510     01 FA 65 C6 |  if_b	neg	result1, #1
1e514     04 E4 85 F1 | 	sub	objptr, #4
1e518     F2 FA 61 FC | 	wrlong	result1, objptr
1e51c     01 00 00 FF 
1e520     90 E4 05 F1 | 	add	objptr, ##656
1e524     F2 00 68 FC | 	wrlong	#0, objptr
1e528     1A 00 00 FF 
1e52c     74 E5 85 F1 | 	sub	objptr, ##13684
1e530     F2 04 68 FC | 	wrlong	#2, objptr
1e534     04 E4 05 F1 | 	add	objptr, #4
1e538     F2 26 69 FC | 	wrlong	#147, objptr
1e53c     04 E4 05 F1 | 	add	objptr, #4
1e540     F2 34 69 FC | 	wrlong	#154, objptr
1e544     04 E4 05 F1 | 	add	objptr, #4
1e548     F2 08 68 FC | 	wrlong	#4, objptr
1e54c     04 E4 85 F1 | 	sub	objptr, #4
1e550     F2 16 02 FB | 	rdlong	arg03, objptr
1e554     14 E4 85 F1 | 	sub	objptr, #20
1e558     F2 16 62 FC | 	wrlong	arg03, objptr
1e55c     04 E4 05 F1 | 	add	objptr, #4
1e560     F2 00 68 FC | 	wrlong	#0, objptr
1e564     04 E4 05 F1 | 	add	objptr, #4
1e568     F2 00 68 FC | 	wrlong	#0, objptr
1e56c     19 00 00 FF 
1e570     E4 E4 05 F1 | 	add	objptr, ##13028
1e574     F2 02 68 FC | 	wrlong	#1, objptr
1e578     01 00 00 FF 
1e57c     9C E4 05 F1 | 	add	objptr, ##668
1e580     F2 00 68 FC | 	wrlong	#0, objptr
1e584     01 00 00 FF 
1e588     00 EA 05 F1 | 	add	ptr__dat__, ##512
1e58c     08 E4 05 F1 | 	add	objptr, #8
1e590     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1e594     04 E4 85 F1 | 	sub	objptr, #4
1e598     03 00 80 FF 
1e59c     F2 3C 69 FC | 	wrlong	##1694, objptr
1e5a0     0C 00 00 FF 
1e5a4     50 E5 85 F1 | 	sub	objptr, ##6480
1e5a8     F2 18 68 FC | 	wrlong	#12, objptr
1e5ac     45 00 00 FF 
1e5b0     64 E4 85 F1 | 	sub	objptr, ##35428
1e5b4     01 00 00 FF 
1e5b8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1e5bc     FC DA BF FD | 	call	#_init_commands
1e5c0     90 F6 BF FD | 	call	#_init_error_strings
1e5c4     14 EE BF FD | 	call	#_init_audio
1e5c8     90 4D BF FD | 	call	#_do_new
1e5cc     37 00 00 FF 
1e5d0     3C E4 05 F1 | 	add	objptr, ##28220
1e5d4     F2 12 02 FB | 	rdlong	arg01, objptr
1e5d8     04 E4 85 F1 | 	sub	objptr, #4
1e5dc     F2 14 02 FB | 	rdlong	arg02, objptr
1e5e0     37 00 00 FF 
1e5e4     38 E4 85 F1 | 	sub	objptr, ##28216
1e5e8     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1e5ec     37 00 00 FF 
1e5f0     40 E4 05 F1 | 	add	objptr, ##28224
1e5f4     F2 12 02 FB | 	rdlong	arg01, objptr
1e5f8     37 00 00 FF 
1e5fc     40 E4 85 F1 | 	sub	objptr, ##28224
1e600     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1e604                 | ' 
1e604                 | ' leading_spaces:=amount
1e604     01 00 00 FF 
1e608     B6 E4 05 F1 | 	add	objptr, ##694
1e60c     F2 04 68 FC | 	wrlong	#2, objptr
1e610     01 00 00 FF 
1e614     B6 E4 85 F1 | 	sub	objptr, ##694
1e618     90 01 00 FF 
1e61c     84 1E 06 F6 | 	mov	local01, ##@LR__5673
1e620     3D 12 06 F6 | 	mov	arg01, #61
1e624     3C 14 06 F6 | 	mov	arg02, #60
1e628     3B 16 06 F6 | 	mov	arg03, #59
1e62c     3A 18 06 F6 | 	mov	arg04, #58
1e630     18 7C B0 FD | 	call	#__system___vfs_open_sdcardx
1e634     FD 14 02 F6 | 	mov	arg02, result1
1e638     0F 13 02 F6 | 	mov	arg01, local01
1e63c     10 33 B0 FD | 	call	#__system___mount
1e640     90 01 00 FF 
1e644     88 12 06 F6 | 	mov	arg01, ##@LR__5674
1e648     C4 35 B0 FD | 	call	#__system___chdir
1e64c     90 01 00 FF 
1e650     90 1E 06 F6 | 	mov	local01, ##@LR__5675
1e654     4A 00 00 FF 
1e658     94 E4 05 F1 | 	add	objptr, ##38036
1e65c     F2 1E 62 FC | 	wrlong	local01, objptr
1e660     13 00 00 FF 
1e664     60 E4 85 F1 | 	sub	objptr, ##9824
1e668     F2 12 02 FB | 	rdlong	arg01, objptr
1e66c     37 00 00 FF 
1e670     34 E4 85 F1 | 	sub	objptr, ##28212
1e674     01 12 66 F0 | 	shl	arg01, #1
1e678     01 14 06 F6 | 	mov	arg02, #1
1e67c     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e680                 | ' init_commands
1e680                 | ' init_error_strings
1e680                 | ' init_audio
1e680                 | ' do_new
1e680                 | ' cls(ink, paper)
1e680                 | ' v.setfontfamily(font) 				' use ST Mono font
1e680                 | ' v.setleadingspaces(2)
1e680                 | ' mount "/sd", _vfs_open_sdcard()
1e680                 | ' chdir "/sd/bas"
1e680                 | ' currentdir$="/sd/bas"
1e680                 | ' position 2*editor_spaces,1 : print ver$
1e680     00 12 06 F6 | 	mov	arg01, #0
1e684     28 8C B0 FD | 	call	#__system___getiolock_0568
1e688     FD 12 02 F6 | 	mov	arg01, result1
1e68c     F4 2E B0 FD | 	call	#__system___lockmem
1e690     18 00 00 FF 
1e694     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1e698     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1e69c     18 00 00 FF 
1e6a0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1e6a4     00 12 06 F6 | 	mov	arg01, #0
1e6a8     00 16 06 F6 | 	mov	arg03, #0
1e6ac     C8 3B B0 FD | 	call	#__system___basic_print_string
1e6b0     00 12 06 F6 | 	mov	arg01, #0
1e6b4     0A 14 06 F6 | 	mov	arg02, #10
1e6b8     00 16 06 F6 | 	mov	arg03, #0
1e6bc     60 3B B0 FD | 	call	#__system___basic_print_char
1e6c0     00 12 06 F6 | 	mov	arg01, #0
1e6c4     E8 8B B0 FD | 	call	#__system___getiolock_0568
1e6c8     FD 00 68 FC | 	wrlong	#0, result1
1e6cc     51 00 00 FF 
1e6d0     AC E5 05 F1 | 	add	objptr, ##41900
1e6d4     F2 12 02 FB | 	rdlong	arg01, objptr
1e6d8     0E 00 00 FF 
1e6dc     50 E5 85 F1 | 	sub	objptr, ##7504
1e6e0     F2 1E 02 FB | 	rdlong	local01, objptr
1e6e4     43 00 00 FF 
1e6e8     5C E4 85 F1 | 	sub	objptr, ##34396
1e6ec     0F 13 82 F1 | 	sub	arg01, local01
1e6f0     00 14 06 F6 | 	mov	arg02, #0
1e6f4     0A 16 06 F6 | 	mov	arg03, #10
1e6f8     58 51 B0 FD | 	call	#__system__Number_S
1e6fc     FD 12 02 F6 | 	mov	arg01, result1
1e700     90 01 00 FF 
1e704     98 14 06 F6 | 	mov	arg02, ##@LR__5676
1e708     D4 2E B0 FD | 	call	#__system___string_concat
1e70c     FD 1E 02 F6 | 	mov	local01, result1
1e710     50 00 00 FF 
1e714     10 E5 05 F1 | 	add	objptr, ##41232
1e718     F2 1E 62 FC | 	wrlong	local01, objptr
1e71c     50 00 00 FF 
1e720     10 E5 85 F1 | 	sub	objptr, ##41232
1e724                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1e724     00 12 06 F6 | 	mov	arg01, #0
1e728     84 8B B0 FD | 	call	#__system___getiolock_0568
1e72c     FD 12 02 F6 | 	mov	arg01, result1
1e730     50 2E B0 FD | 	call	#__system___lockmem
1e734     50 00 00 FF 
1e738     10 E5 05 F1 | 	add	objptr, ##41232
1e73c     F2 14 02 FB | 	rdlong	arg02, objptr
1e740     50 00 00 FF 
1e744     10 E5 85 F1 | 	sub	objptr, ##41232
1e748     00 12 06 F6 | 	mov	arg01, #0
1e74c     00 16 06 F6 | 	mov	arg03, #0
1e750     24 3B B0 FD | 	call	#__system___basic_print_string
1e754     00 12 06 F6 | 	mov	arg01, #0
1e758     0A 14 06 F6 | 	mov	arg02, #10
1e75c     00 16 06 F6 | 	mov	arg03, #0
1e760     BC 3A B0 FD | 	call	#__system___basic_print_char
1e764     00 12 06 F6 | 	mov	arg01, #0
1e768     44 8B B0 FD | 	call	#__system___getiolock_0568
1e76c     FD 00 68 FC | 	wrlong	#0, result1
1e770     37 00 00 FF 
1e774     34 E4 05 F1 | 	add	objptr, ##28212
1e778     F2 12 02 FB | 	rdlong	arg01, objptr
1e77c     37 00 00 FF 
1e780     34 E4 85 F1 | 	sub	objptr, ##28212
1e784     01 12 66 F0 | 	shl	arg01, #1
1e788     04 14 06 F6 | 	mov	arg02, #4
1e78c     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e790                 | ' position 2*editor_spaces,4 : print "Ready"
1e790     00 12 06 F6 | 	mov	arg01, #0
1e794     18 8B B0 FD | 	call	#__system___getiolock_0568
1e798     FD 12 02 F6 | 	mov	arg01, result1
1e79c     E4 2D B0 FD | 	call	#__system___lockmem
1e7a0     90 01 00 FF 
1e7a4     AA 14 06 F6 | 	mov	arg02, ##@LR__5677
1e7a8     00 12 06 F6 | 	mov	arg01, #0
1e7ac     00 16 06 F6 | 	mov	arg03, #0
1e7b0     C4 3A B0 FD | 	call	#__system___basic_print_string
1e7b4     00 12 06 F6 | 	mov	arg01, #0
1e7b8     0A 14 06 F6 | 	mov	arg02, #10
1e7bc     00 16 06 F6 | 	mov	arg03, #0
1e7c0     5C 3A B0 FD | 	call	#__system___basic_print_char
1e7c4     00 12 06 F6 | 	mov	arg01, #0
1e7c8     E4 8A B0 FD | 	call	#__system___getiolock_0568
1e7cc     FD 00 68 FC | 	wrlong	#0, result1
1e7d0     00 14 06 F6 | 	mov	arg02, #0
1e7d4     01 14 D6 F7 | 	test	arg02, #1 wc
1e7d8     5A 4C 64 FD | 	drvc	#38
1e7dc     01 14 D6 F7 | 	test	arg02, #1 wc
1e7e0     5A 4E 64 FD | 	drvc	#39
1e7e4     90 01 00 FF 
1e7e8     B0 1E 06 F6 | 	mov	local01, ##@LR__5678
1e7ec     51 00 00 FF 
1e7f0     D8 E5 05 F1 | 	add	objptr, ##41944
1e7f4     F2 1E 62 FC | 	wrlong	local01, objptr
1e7f8     04 E4 05 F1 | 	add	objptr, #4
1e7fc     FF FF FF FF 
1e800     F2 FE 6B FC | 	wrlong	##-1, objptr
1e804     0C E4 05 F1 | 	add	objptr, #12
1e808     F2 00 68 FC | 	wrlong	#0, objptr
1e80c     51 00 00 FF 
1e810     E8 E5 85 F1 | 	sub	objptr, ##41960
1e814                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1e814                 | ' loadname="noname.bas"
1e814                 | ' do_insert=-1
1e814                 | ' inload=0
1e814                 | ' '-------------------------------------------------------------------------------------------------------- 
1e814                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1e814                 | ' '--------------------------------------------------------------------------------------------------------
1e814                 | ' 
1e814                 | ' do
1e814                 | LR__2400
1e814     EC 1F BE FD | 	call	#_edit
1e818     FD 1E 02 F6 | 	mov	local01, result1
1e81c     37 00 00 FF 
1e820     1C E4 05 F1 | 	add	objptr, ##28188
1e824     F2 1E 62 FC | 	wrlong	local01, objptr
1e828     37 00 00 FF 
1e82c     1C E4 85 F1 | 	sub	objptr, ##28188
1e830     14 2F BE FD | 	call	#_interpret
1e834     90 01 00 FF 
1e838     BB 1E 06 F6 | 	mov	local01, ##@LR__5679
1e83c     37 00 00 FF 
1e840     1C E4 05 F1 | 	add	objptr, ##28188
1e844     F2 1E 62 FC | 	wrlong	local01, objptr
1e848     37 00 00 FF 
1e84c     1C E4 85 F1 | 	sub	objptr, ##28188
1e850     C0 FF 9F FD | 	jmp	#LR__2400
1e854     A7 F0 03 F6 | 	mov	ptra, fp
1e858     B2 00 A0 FD | 	call	#popregs_
1e85c                 | _program_ret
1e85c     2D 00 64 FD | 	ret
1e860                 | 
1e860                 | ' '' this is not a main program.
1e860                 | ' 
1e860                 | ' '****************************************************************************************************************
1e860                 | ' '                                                                                                             	*
1e860                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1e860                 | ' '                                                                                                            	*
1e860                 | ' ' base - HDMI base pin												*
1e860                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1e860                 | ' '														*
1e860                 | ' '														*
1e860                 | ' '****************************************************************************************************************
1e860                 | ' 
1e860                 | ' pub start(base,mb):result |i
1e860                 | _hg010b_spin2_start
1e860                 | ' 
1e860                 | ' '--------------------------- initialize pointers and variables
1e860                 | ' 
1e860                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1e860     34 E4 05 F1 | 	add	objptr, #52
1e864     F2 FA 01 F6 | 	mov	result1, objptr
1e868     28 E4 85 F1 | 	sub	objptr, #40
1e86c     F2 FA 61 FC | 	wrlong	result1, objptr
1e870                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1e870                 | ' hdmibase:=base							' HDMI base pin, 8*n
1e870     18 E4 05 F1 | 	add	objptr, #24
1e874     F2 12 62 FC | 	wrlong	arg01, objptr
1e878                 | ' mailbox_ptr:=mb		
1e878     04 E4 05 F1 | 	add	objptr, #4
1e87c     F2 14 62 FC | 	wrlong	arg02, objptr
1e880                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1e880     C1 E5 05 F1 | 	add	objptr, #449
1e884     F2 14 62 FC | 	wrlong	arg02, objptr
1e888                 | ' sprite_ptr:=@spr1ptr
1e888     D8 E4 85 F1 | 	sub	objptr, #216
1e88c     F2 FA 01 F6 | 	mov	result1, objptr
1e890     E5 E4 85 F1 | 	sub	objptr, #229
1e894     F2 FA 61 FC | 	wrlong	result1, objptr
1e898                 | ' 
1e898                 | ' 		'
1e898                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1e898     E5 E4 05 F1 | 	add	objptr, #229
1e89c     F2 FA 01 FB | 	rdlong	result1, objptr
1e8a0     D0 FA 05 F1 | 	add	result1, #208
1e8a4     FD 10 58 FC | 	wrword	#8, result1
1e8a8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1e8a8     F2 16 02 FB | 	rdlong	arg03, objptr
1e8ac     D2 16 06 F1 | 	add	arg03, #210
1e8b0     0B 21 58 FC | 	wrword	#16, arg03
1e8b4                 | ' leading_spaces:=0				'
1e8b4     A5 E5 05 F1 | 	add	objptr, #421
1e8b8     F2 00 68 FC | 	wrlong	#0, objptr
1e8bc                 | ' 
1e8bc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1e8bc     99 E4 85 F1 | 	sub	objptr, #153
1e8c0     00 00 A0 FF 
1e8c4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1e8c8                 | ' emptydl[1]:=0
1e8c8     04 E4 05 F1 | 	add	objptr, #4
1e8cc     F2 00 68 FC | 	wrlong	#0, objptr
1e8d0                 | ' 
1e8d0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1e8d0                 | ' 
1e8d0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1e8d0     28 E5 85 F1 | 	sub	objptr, #296
1e8d4     F2 02 68 FC | 	wrlong	#1, objptr
1e8d8                 | ' if s_debug<>0
1e8d8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1e8d8     20 00 80 FF 
1e8dc     F2 00 68 FC | 	wrlong	##16384, objptr
1e8e0     F9 E4 85 F1 | 	sub	objptr, #249
1e8e4                 | ' setmode()							' set the mode, see below
1e8e4     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1e8e8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1e8e8     49 E4 05 F1 | 	add	objptr, #73
1e8ec     F2 FA 01 F6 | 	mov	result1, objptr
1e8f0     35 E4 85 F1 | 	sub	objptr, #53
1e8f4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8f8                 | ' cursor_ptr:=@cursor_x						
1e8f8     28 E4 05 F1 | 	add	objptr, #40
1e8fc     F2 16 02 F6 | 	mov	arg03, objptr
1e900     2C E4 85 F1 | 	sub	objptr, #44
1e904     F2 16 62 FC | 	wrlong	arg03, objptr
1e908                 | ' fontnum:=0  							' start with a PC type font 
1e908     55 E4 05 F1 | 	add	objptr, #85
1e90c     F2 00 68 FC | 	wrlong	#0, objptr
1e910                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1e910     1C E4 05 F1 | 	add	objptr, #28
1e914     F2 12 02 F6 | 	mov	arg01, objptr
1e918     81 E4 85 F1 | 	sub	objptr, #129
1e91c     10 00 00 FF 
1e920     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1e924     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e928     10 00 00 FF 
1e92c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1e930     10 16 06 F6 | 	mov	arg03, #16
1e934     6C 2B B0 FD | 	call	#__system____builtin_memmove
1e938                 | ' leading_spaces:=0
1e938     01 00 00 FF 
1e93c     B6 E4 05 F1 | 	add	objptr, ##694
1e940     F2 00 68 FC | 	wrlong	#0, objptr
1e944     01 00 00 FF 
1e948     B6 E4 85 F1 | 	sub	objptr, ##694
1e94c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e94c                 | ' 
1e94c                 | ' initcursor(154)
1e94c     9A 12 06 F6 | 	mov	arg01, #154
1e950     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1e954                 | ' 
1e954                 | ' '---------------------------- start the cog
1e954                 | ' 
1e954                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1e954     10 00 00 FF 
1e958     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1e95c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e960     10 00 00 FF 
1e964     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1e968     14 E4 05 F1 | 	add	objptr, #20
1e96c     10 FA 05 F6 | 	mov	result1, #16
1e970     28 E4 61 FD | 	setq	objptr
1e974     0A FB F1 FC | 	coginit	result1, arg02 wc
1e978     01 FA 65 C6 |  if_b	neg	result1, #1
1e97c     1C E4 05 F1 | 	add	objptr, #28
1e980     F2 FA 61 FC | 	wrlong	result1, objptr
1e984     30 E4 85 F1 | 	sub	objptr, #48
1e988                 | ' waitms(40)							' wait for stabilize
1e988     28 12 06 F6 | 	mov	arg01, #40
1e98c     E8 2E B0 FD | 	call	#__system___waitms
1e990                 | ' return cog							' return the driver's cog #
1e990     30 E4 05 F1 | 	add	objptr, #48
1e994     F2 FA 01 FB | 	rdlong	result1, objptr
1e998     30 E4 85 F1 | 	sub	objptr, #48
1e99c                 | _hg010b_spin2_start_ret
1e99c     2D 00 64 FD | 	ret
1e9a0                 | 
1e9a0                 | ' 
1e9a0                 | ' 
1e9a0                 | ' '**************************************************************************************************************** 
1e9a0                 | ' '                                                                                                             	*
1e9a0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1e9a0                 | ' '  Mode number - see start() above or bits below								*
1e9a0                 | ' '                                                                                                             	*
1e9a0                 | ' '****************************************************************************************************************
1e9a0                 | ' 
1e9a0                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e9a0                 | ' pub initcursor(color) |i
1e9a0                 | _hg010b_spin2_initcursor
1e9a0     03 4A 05 F6 | 	mov	COUNT_, #3
1e9a4     A8 00 A0 FD | 	call	#pushregs_
1e9a8     09 1F 02 F6 | 	mov	local01, arg01
1e9ac                 | ' 
1e9ac                 | ' cursor_x:=0							' place the cursor at 0:0
1e9ac     3C E4 05 F1 | 	add	objptr, #60
1e9b0     F2 00 58 FC | 	wrword	#0, objptr
1e9b4                 | ' cursor_y:=0
1e9b4     02 E4 05 F1 | 	add	objptr, #2
1e9b8     F2 00 48 FC | 	wrbyte	#0, objptr
1e9bc                 | ' repeat i from 0 to 111
1e9bc     00 20 06 F6 | 	mov	local02, #0
1e9c0     F8 E5 05 F1 | 	add	objptr, #504
1e9c4     97 1A 48 FB | 	callpa	#(@LR__2412-@LR__2410)>>2,fcache_load_ptr_
1e9c8                 | LR__2410
1e9c8                 | '   cursor[i]:=0
1e9c8     10 23 02 F6 | 	mov	local03, local02
1e9cc     F2 22 02 F1 | 	add	local03, objptr
1e9d0     11 01 48 FC | 	wrbyte	#0, local03
1e9d4     01 20 06 F1 | 	add	local02, #1
1e9d8     70 20 56 F2 | 	cmps	local02, #112 wc
1e9dc     E8 FF 9F CD |  if_b	jmp	#LR__2410
1e9e0                 | ' repeat i from 112 to 127
1e9e0     70 20 06 F6 | 	mov	local02, #112
1e9e4                 | LR__2411
1e9e4                 | '   cursor[i]:=color  
1e9e4     10 23 02 F6 | 	mov	local03, local02
1e9e8     F2 22 02 F1 | 	add	local03, objptr
1e9ec     11 1F 42 FC | 	wrbyte	local01, local03
1e9f0     01 20 06 F1 | 	add	local02, #1
1e9f4     80 20 16 F2 | 	cmp	local02, #128 wc
1e9f8     E8 FF 9F CD |  if_b	jmp	#LR__2411
1e9fc                 | LR__2412
1e9fc                 | ' 'repeat i from 0 to 127
1e9fc                 | ' '  if ((i/8)//2)
1e9fc                 | ' '    cursor[i]:=15
1e9fc                 | ' '  else
1e9fc                 | ' '    cursor[i]:=0
1e9fc                 | ' '  if i>=120    
1e9fc                 | ' '    cursor[i]:=40
1e9fc                 | ' setspriteptr(17,@cursor)
1e9fc     F2 14 02 F6 | 	mov	arg02, objptr
1ea00     01 00 00 FF 
1ea04     36 E4 85 F1 | 	sub	objptr, ##566
1ea08     11 12 06 F6 | 	mov	arg01, #17
1ea0c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ea10                 | ' setspritesize(17,8,16)
1ea10     11 12 06 F6 | 	mov	arg01, #17
1ea14     08 14 06 F6 | 	mov	arg02, #8
1ea18     10 16 06 F6 | 	mov	arg03, #16
1ea1c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ea20                 | ' setspritepos(17,0,0)
1ea20     11 12 06 F6 | 	mov	arg01, #17
1ea24     00 14 06 F6 | 	mov	arg02, #0
1ea28     00 16 06 F6 | 	mov	arg03, #0
1ea2c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ea30                 | ' cursorshape:=14
1ea30     0B 00 00 FF 
1ea34     C6 E4 05 F1 | 	add	objptr, ##5830
1ea38     F2 1C 68 FC | 	wrlong	#14, objptr
1ea3c                 | ' cursorcolor:=color
1ea3c     04 E4 85 F1 | 	sub	objptr, #4
1ea40     F2 1E 62 FC | 	wrlong	local01, objptr
1ea44     0B 00 00 FF 
1ea48     C2 E4 85 F1 | 	sub	objptr, ##5826
1ea4c     A7 F0 03 F6 | 	mov	ptra, fp
1ea50     B2 00 A0 FD | 	call	#popregs_
1ea54                 | _hg010b_spin2_initcursor_ret
1ea54     2D 00 64 FD | 	ret
1ea58                 | 
1ea58                 | ' 
1ea58                 | ' pub setcursorshape(shape) | i
1ea58                 | _hg010b_spin2_setcursorshape
1ea58                 | ' 
1ea58                 | ' cursorshape:=shape
1ea58     0B 00 00 FF 
1ea5c     C6 E4 05 F1 | 	add	objptr, ##5830
1ea60     F2 12 62 FC | 	wrlong	arg01, objptr
1ea64                 | ' repeat i from 0 to (8*cursorshape)-1
1ea64     00 00 06 F6 | 	mov	_var01, #0
1ea68     09 03 02 F6 | 	mov	_var02, arg01
1ea6c     03 02 66 F0 | 	shl	_var02, #3
1ea70     01 02 86 F1 | 	sub	_var02, #1
1ea74     00 02 56 F2 | 	cmps	_var02, #0 wc
1ea78     01 04 86 F6 | 	negc	_var03, #1
1ea7c     02 07 02 F6 | 	mov	_var04, _var03
1ea80     02 03 02 F1 | 	add	_var02, _var03
1ea84     0A 00 00 FF 
1ea88     90 E4 85 F1 | 	sub	objptr, ##5264
1ea8c     97 0C 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1ea90                 | LR__2420
1ea90                 | '   cursor[i]:=0
1ea90     00 05 02 F6 | 	mov	_var03, _var01
1ea94     F2 04 02 F1 | 	add	_var03, objptr
1ea98     02 01 48 FC | 	wrbyte	#0, _var03
1ea9c     03 01 02 F1 | 	add	_var01, _var04
1eaa0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1eaa4     E8 FF 9F 5D |  if_ne	jmp	#LR__2420
1eaa8                 | LR__2421
1eaa8                 | ' repeat i from 8*cursorshape to 127
1eaa8     0A 00 00 FF 
1eaac     90 E4 05 F1 | 	add	objptr, ##5264
1eab0     F2 06 02 FB | 	rdlong	_var04, objptr
1eab4     03 01 02 F6 | 	mov	_var01, _var04
1eab8     03 00 66 F0 | 	shl	_var01, #3
1eabc     0B 00 00 FF 
1eac0     C6 E4 85 F1 | 	sub	objptr, ##5830
1eac4     03 06 66 F0 | 	shl	_var04, #3
1eac8     80 06 56 F2 | 	cmps	_var04, #128 wc
1eacc     01 04 A6 F6 | 	negnc	_var03, #1
1ead0     7F 02 06 F6 | 	mov	_var02, #127
1ead4     02 03 02 F1 | 	add	_var02, _var03
1ead8     97 1A 48 FB | 	callpa	#(@LR__2423-@LR__2422)>>2,fcache_load_ptr_
1eadc                 | LR__2422
1eadc                 | '   cursor[i]:=cursorcolor
1eadc     00 07 02 F6 | 	mov	_var04, _var01
1eae0     01 00 00 FF 
1eae4     36 E4 05 F1 | 	add	objptr, ##566
1eae8     F2 06 02 F1 | 	add	_var04, objptr
1eaec     0A 00 00 FF 
1eaf0     8C E4 05 F1 | 	add	objptr, ##5260
1eaf4     F2 12 02 FB | 	rdlong	arg01, objptr
1eaf8     0B 00 00 FF 
1eafc     C2 E4 85 F1 | 	sub	objptr, ##5826
1eb00     03 13 42 FC | 	wrbyte	arg01, _var04
1eb04     02 01 02 F1 | 	add	_var01, _var03
1eb08     01 01 0A F2 | 	cmp	_var01, _var02 wz
1eb0c     CC FF 9F 5D |  if_ne	jmp	#LR__2422
1eb10                 | LR__2423
1eb10                 | _hg010b_spin2_setcursorshape_ret
1eb10     2D 00 64 FD | 	ret
1eb14                 | 
1eb14                 | ' 
1eb14                 | ' pub setcursorcolor(color) | i
1eb14                 | _hg010b_spin2_setcursorcolor
1eb14                 | ' 
1eb14                 | ' cursorcolor:=color
1eb14     0B 00 00 FF 
1eb18     C2 E4 05 F1 | 	add	objptr, ##5826
1eb1c     F2 12 62 FC | 	wrlong	arg01, objptr
1eb20                 | ' repeat i from 0 to (8*cursorshape)-1
1eb20     00 12 06 F6 | 	mov	arg01, #0
1eb24     04 E4 05 F1 | 	add	objptr, #4
1eb28     F2 00 02 FB | 	rdlong	_var01, objptr
1eb2c     03 00 66 F0 | 	shl	_var01, #3
1eb30     01 00 86 F1 | 	sub	_var01, #1
1eb34     00 00 56 F2 | 	cmps	_var01, #0 wc
1eb38     01 02 86 F6 | 	negc	_var02, #1
1eb3c     01 05 02 F6 | 	mov	_var03, _var02
1eb40     01 01 02 F1 | 	add	_var01, _var02
1eb44     0A 00 00 FF 
1eb48     90 E4 85 F1 | 	sub	objptr, ##5264
1eb4c     97 0C 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1eb50                 | LR__2430
1eb50                 | '   cursor[i]:=0
1eb50     09 03 02 F6 | 	mov	_var02, arg01
1eb54     F2 02 02 F1 | 	add	_var02, objptr
1eb58     01 01 48 FC | 	wrbyte	#0, _var02
1eb5c     02 13 02 F1 | 	add	arg01, _var03
1eb60     00 13 0A F2 | 	cmp	arg01, _var01 wz
1eb64     E8 FF 9F 5D |  if_ne	jmp	#LR__2430
1eb68                 | LR__2431
1eb68                 | ' repeat i from 8*cursorshape to 127
1eb68     0A 00 00 FF 
1eb6c     90 E4 05 F1 | 	add	objptr, ##5264
1eb70     F2 04 02 FB | 	rdlong	_var03, objptr
1eb74     02 13 02 F6 | 	mov	arg01, _var03
1eb78     03 12 66 F0 | 	shl	arg01, #3
1eb7c     0B 00 00 FF 
1eb80     C6 E4 85 F1 | 	sub	objptr, ##5830
1eb84     03 04 66 F0 | 	shl	_var03, #3
1eb88     80 04 56 F2 | 	cmps	_var03, #128 wc
1eb8c     01 02 A6 F6 | 	negnc	_var02, #1
1eb90     7F 00 06 F6 | 	mov	_var01, #127
1eb94     01 01 02 F1 | 	add	_var01, _var02
1eb98     97 1A 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
1eb9c                 | LR__2432
1eb9c                 | '   cursor[i]:=cursorcolor
1eb9c     09 05 02 F6 | 	mov	_var03, arg01
1eba0     01 00 00 FF 
1eba4     36 E4 05 F1 | 	add	objptr, ##566
1eba8     F2 04 02 F1 | 	add	_var03, objptr
1ebac     0A 00 00 FF 
1ebb0     8C E4 05 F1 | 	add	objptr, ##5260
1ebb4     F2 06 02 FB | 	rdlong	_var04, objptr
1ebb8     0B 00 00 FF 
1ebbc     C2 E4 85 F1 | 	sub	objptr, ##5826
1ebc0     02 07 42 FC | 	wrbyte	_var04, _var03
1ebc4     01 13 02 F1 | 	add	arg01, _var02
1ebc8     00 13 0A F2 | 	cmp	arg01, _var01 wz
1ebcc     CC FF 9F 5D |  if_ne	jmp	#LR__2432
1ebd0                 | LR__2433
1ebd0                 | _hg010b_spin2_setcursorcolor_ret
1ebd0     2D 00 64 FD | 	ret
1ebd4                 | 
1ebd4                 | '   
1ebd4                 | '   
1ebd4                 | '   
1ebd4                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1ebd4                 | _hg010b_spin2_setmode
1ebd4     02 4A 05 F6 | 	mov	COUNT_, #2
1ebd8     A8 00 A0 FD | 	call	#pushregs_
1ebdc                 | ' 
1ebdc                 | ' 
1ebdc                 | ' dl_ptr:=@emptydl[0]
1ebdc     01 00 00 FF 
1ebe0     1D E4 05 F1 | 	add	objptr, ##541
1ebe4     F2 1A 02 F6 | 	mov	arg05, objptr
1ebe8     FD E5 85 F1 | 	sub	objptr, #509
1ebec     F2 1A 62 FC | 	wrlong	arg05, objptr
1ebf0                 | ' 
1ebf0                 | ' if cog>0 
1ebf0     10 E4 05 F1 | 	add	objptr, #16
1ebf4     F2 1A 02 FB | 	rdlong	arg05, objptr
1ebf8     30 E4 85 F1 | 	sub	objptr, #48
1ebfc     01 1A 56 F2 | 	cmps	arg05, #1 wc
1ec00                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1ec00     01 12 06 36 |  if_ae	mov	arg01, #1
1ec04     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1ec08                 | ' xres:=1024
1ec08     01 00 00 FF 
1ec0c     26 E4 05 F1 | 	add	objptr, ##550
1ec10     02 00 80 FF 
1ec14     F2 00 68 FC | 	wrlong	##1024, objptr
1ec18                 | ' yres:=600
1ec18     04 E4 05 F1 | 	add	objptr, #4
1ec1c     01 00 80 FF 
1ec20     F2 B0 68 FC | 	wrlong	##600, objptr
1ec24                 | ' ppl:=(timings[3])
1ec24     10 00 00 FF 
1ec28     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1ec2c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ec30     51 E5 85 F1 | 	sub	objptr, #337
1ec34     F2 1A 62 FC | 	wrlong	arg05, objptr
1ec38                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1ec38     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1ec3c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1ec40     01 1E 66 F0 | 	shl	local01, #1
1ec44     80 E4 85 F1 | 	sub	objptr, #128
1ec48     F2 1E 62 FC | 	wrlong	local01, objptr
1ec4c                 | ' cpl1:=cpl '' todo remove
1ec4c     04 E4 05 F1 | 	add	objptr, #4
1ec50     F2 1E 62 FC | 	wrlong	local01, objptr
1ec54                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1ec54     02 00 00 FF 
1ec58     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1ec5c     41 E4 85 F1 | 	sub	objptr, #65
1ec60     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1ec64                 | ' repeat i from 0 to 3
1ec64     00 20 06 F6 | 	mov	local02, #0
1ec68     02 00 00 FF 
1ec6c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1ec70     08 E4 05 F1 | 	add	objptr, #8
1ec74     97 20 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1ec78                 | LR__2440
1ec78                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1ec78     10 1F 02 F6 | 	mov	local01, local02
1ec7c     02 1E 66 F0 | 	shl	local01, #2
1ec80     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1ec84     F2 1A 02 FB | 	rdlong	arg05, objptr
1ec88     11 1A 66 F0 | 	shl	arg05, #17
1ec8c     0F 1F 02 FB | 	rdlong	local01, local01
1ec90     0D 1F 02 F1 | 	add	local01, arg05
1ec94     80 40 38 FF 
1ec98     00 1E 06 F1 | 	add	local01, ##1887502336
1ec9c     10 1B 02 F6 | 	mov	arg05, local02
1eca0     02 1A 66 F0 | 	shl	arg05, #2
1eca4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1eca8     0D 1F 62 FC | 	wrlong	local01, arg05
1ecac     01 20 06 F1 | 	add	local02, #1
1ecb0     04 20 56 F2 | 	cmps	local02, #4 wc
1ecb4     C0 FF 9F CD |  if_b	jmp	#LR__2440
1ecb8                 | LR__2441
1ecb8     24 E4 85 F1 | 	sub	objptr, #36
1ecbc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1ecbc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1ecc0     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1ecc4     14 1E 66 FC | 	wrlong	local01, #20
1ecc8                 | ' hubset(timings[10])
1ecc8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1eccc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1ecd0     10 00 00 FF 
1ecd4     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1ecd8     00 12 62 FD | 	hubset	arg01
1ecdc                 | ' waitms(1)                                                   	' wait for stabilization
1ecdc     01 12 06 F6 | 	mov	arg01, #1
1ece0     94 2B B0 FD | 	call	#__system___waitms
1ece4     10 00 00 FF 
1ece8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1ecec     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1ecf0     61 E4 05 F1 | 	add	objptr, #97
1ecf4     F2 20 62 FC | 	wrlong	local02, objptr
1ecf8     10 1F 52 F6 | 	abs	local01, local02 wc
1ecfc     04 1E 46 F0 | 	shr	local01, #4
1ed00     0F 1F 82 F6 | 	negc	local01, local01
1ed04     9C E4 05 F1 | 	add	objptr, #156
1ed08     F2 1E 62 FC | 	wrlong	local01, objptr
1ed0c     A4 E4 85 F1 | 	sub	objptr, #164
1ed10     F2 20 02 FB | 	rdlong	local02, objptr
1ed14     08 E4 05 F1 | 	add	objptr, #8
1ed18     F2 1E 02 FB | 	rdlong	local01, objptr
1ed1c     0F 21 02 FD | 	qmul	local02, local01
1ed20                 | ' lines:=timings[11]
1ed20                 | ' t_lines:=lines/16
1ed20                 | ' buflen:=cpl*lines						' framebuffer length in longs
1ed20     29 E4 85 F1 | 	sub	objptr, #41
1ed24     19 1E C6 F9 | 	decod	local01, #25
1ed28     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1ed2c     18 20 62 FD | 	getqx	local02
1ed30     F2 20 62 FC | 	wrlong	local02, objptr
1ed34     38 E4 85 F1 | 	sub	objptr, #56
1ed38     02 20 66 F0 | 	shl	local02, #2
1ed3c     10 1F 82 F1 | 	sub	local01, local02
1ed40     F2 1E 62 FC | 	wrlong	local01, objptr
1ed44     FD E4 05 F1 | 	add	objptr, #253
1ed48     F2 20 02 FB | 	rdlong	local02, objptr
1ed4c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ed50     0D 21 02 FD | 	qmul	local02, arg05
1ed54                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1ed54                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1ed54     F9 E4 85 F1 | 	sub	objptr, #249
1ed58                 | ' mode_ptr:=@timings						' set pointers to timings
1ed58     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1ed5c                 | ' graphmode:=1024+512+192+48							' det global variable
1ed5c                 | ' makedl(graphmode)							' make a DL for the mode
1ed5c     03 00 00 FF 
1ed60     F0 12 06 F6 | 	mov	arg01, ##1776
1ed64     18 20 62 FD | 	getqx	local02
1ed68     10 1F 82 F1 | 	sub	local01, local02
1ed6c     F2 1E 62 FC | 	wrlong	local01, objptr
1ed70     14 E4 05 F1 | 	add	objptr, #20
1ed74     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1ed78     79 E4 05 F1 | 	add	objptr, #121
1ed7c     03 00 80 FF 
1ed80     F2 E0 69 FC | 	wrlong	##1776, objptr
1ed84     91 E4 85 F1 | 	sub	objptr, #145
1ed88     10 00 00 FF 
1ed8c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1ed90     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1ed94                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1ed94     F2 1E 02 FB | 	rdlong	local01, objptr
1ed98     DD E4 05 F1 | 	add	objptr, #221
1ed9c     F2 1E 62 FC | 	wrlong	local01, objptr
1eda0                 | ' s_font_ptr:=font_ptr
1eda0     D5 E4 85 F1 | 	sub	objptr, #213
1eda4     F2 1E 02 FB | 	rdlong	local01, objptr
1eda8     D9 E4 05 F1 | 	add	objptr, #217
1edac     F2 1E 62 FC | 	wrlong	local01, objptr
1edb0                 | ' s_lines:=lines
1edb0     80 E4 85 F1 | 	sub	objptr, #128
1edb4     F2 1E 02 FB | 	rdlong	local01, objptr
1edb8     84 E4 05 F1 | 	add	objptr, #132
1edbc     F2 1E 62 FC | 	wrlong	local01, objptr
1edc0                 | ' s_buflen:=buflen
1edc0     AD E4 85 F1 | 	sub	objptr, #173
1edc4     F2 1E 02 FB | 	rdlong	local01, objptr
1edc8     B5 E4 05 F1 | 	add	objptr, #181
1edcc     F2 1E 62 FC | 	wrlong	local01, objptr
1edd0                 | ' s_cpl:=cpl
1edd0     94 E4 85 F1 | 	sub	objptr, #148
1edd4     F2 1E 02 FB | 	rdlong	local01, objptr
1edd8     90 E4 05 F1 | 	add	objptr, #144
1eddc     F2 1E 62 FC | 	wrlong	local01, objptr
1ede0                 | ' s_cpl1:=cpl
1ede0     90 E4 85 F1 | 	sub	objptr, #144
1ede4     F2 1E 02 FB | 	rdlong	local01, objptr
1ede8     98 E4 05 F1 | 	add	objptr, #152
1edec     F2 1E 62 FC | 	wrlong	local01, objptr
1edf0                 | ' st_lines:=t_lines
1edf0     0C E4 05 F1 | 	add	objptr, #12
1edf4     F2 1E 02 FB | 	rdlong	local01, objptr
1edf8     04 E4 05 F1 | 	add	objptr, #4
1edfc     F2 1E 62 FC | 	wrlong	local01, objptr
1ee00                 | ' ppl:=ppl/xzoom  
1ee00     28 E4 85 F1 | 	sub	objptr, #40
1ee04     F2 80 02 FB | 	rdlong	muldiva_, objptr
1ee08     2C E4 05 F1 | 	add	objptr, #44
1ee0c     F2 82 02 FB | 	rdlong	muldivb_, objptr
1ee10     05 E5 85 F1 | 	sub	objptr, #261
1ee14     BA 00 A0 FD | 	call	#divide_
1ee18     D9 E4 05 F1 | 	add	objptr, #217
1ee1c     F2 82 62 FC | 	wrlong	muldivb_, objptr
1ee20                 | ' s_ppl:=ppl
1ee20     1C E4 05 F1 | 	add	objptr, #28
1ee24     F2 82 62 FC | 	wrlong	muldivb_, objptr
1ee28     F5 E4 85 F1 | 	sub	objptr, #245
1ee2c                 | ' waitms(20)							' wait 
1ee2c     14 12 06 F6 | 	mov	arg01, #20
1ee30     44 2A B0 FD | 	call	#__system___waitms
1ee34                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1ee34     04 E4 05 F1 | 	add	objptr, #4
1ee38     F2 12 02 FB | 	rdlong	arg01, objptr
1ee3c     04 E4 85 F1 | 	sub	objptr, #4
1ee40     F2 16 02 FB | 	rdlong	arg03, objptr
1ee44     09 17 82 F1 | 	sub	arg03, arg01
1ee48     20 14 06 F6 | 	mov	arg02, #32
1ee4c     00 18 06 F6 | 	mov	arg04, #0
1ee50     01 1A 06 F6 | 	mov	arg05, #1
1ee54     0B 00 00 FF 
1ee58     CC E4 05 F1 | 	add	objptr, ##5836
1ee5c     1C 1C B0 FD | 	call	#_psram_spin2_fill
1ee60     0B 00 00 FF 
1ee64     CC E4 85 F1 | 	sub	objptr, ##5836
1ee68     A7 F0 03 F6 | 	mov	ptra, fp
1ee6c     B2 00 A0 FD | 	call	#popregs_
1ee70                 | _hg010b_spin2_setmode_ret
1ee70     2D 00 64 FD | 	ret
1ee74                 | 
1ee74                 | ' 
1ee74                 | ' '****************************************************************************************************************
1ee74                 | ' '                                                                                                             	*
1ee74                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1ee74                 | ' '                                                                                                             	*
1ee74                 | ' '****************************************************************************************************************
1ee74                 | ' 
1ee74                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1ee74                 | _hg010b_spin2_makedl
1ee74                 | ' 
1ee74                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1ee74                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1ee74                 | ' repeat i from 0 to 11                                                           ' clear DL
1ee74     00 00 06 F6 | 	mov	_var01, #0
1ee78     ED E5 05 F1 | 	add	objptr, #493
1ee7c     97 0E 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1ee80                 | LR__2450
1ee80                 | '   displaylist[i]:=0 
1ee80     00 03 02 F6 | 	mov	_var02, _var01
1ee84     02 02 66 F0 | 	shl	_var02, #2
1ee88     F2 02 02 F1 | 	add	_var02, objptr
1ee8c     01 01 68 FC | 	wrlong	#0, _var02
1ee90     01 00 06 F1 | 	add	_var01, #1
1ee94     0C 00 56 F2 | 	cmps	_var01, #12 wc
1ee98     E4 FF 9F CD |  if_b	jmp	#LR__2450
1ee9c                 | LR__2451
1ee9c                 | '                         ' 
1ee9c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1ee9c     8C E5 85 F1 | 	sub	objptr, #396
1eea0     F2 02 02 FB | 	rdlong	_var02, objptr
1eea4     14 02 66 F0 | 	shl	_var02, #20
1eea8     01 02 06 F1 | 	add	_var02, #1
1eeac     04 E4 85 F1 | 	sub	objptr, #4
1eeb0     F2 00 02 FB | 	rdlong	_var01, objptr
1eeb4     02 00 66 F0 | 	shl	_var01, #2
1eeb8     04 00 66 F0 | 	shl	_var01, #4
1eebc     00 03 02 F1 | 	add	_var02, _var01
1eec0     90 E5 05 F1 | 	add	objptr, #400
1eec4     F2 02 62 FC | 	wrlong	_var02, objptr
1eec8     ED E5 85 F1 | 	sub	objptr, #493
1eecc                 | ' displaylist[1]:=buf_ptr<<4+%10  
1eecc     F2 02 02 FB | 	rdlong	_var02, objptr
1eed0     04 02 66 F0 | 	shl	_var02, #4
1eed4     02 02 06 F1 | 	add	_var02, #2
1eed8     F1 E5 05 F1 | 	add	objptr, #497
1eedc     F2 02 62 FC | 	wrlong	_var02, objptr
1eee0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1eee0     04 E4 85 F1 | 	sub	objptr, #4
1eee4     F2 02 02 F6 | 	mov	_var02, objptr
1eee8     CD E5 85 F1 | 	sub	objptr, #461
1eeec     F2 02 62 FC | 	wrlong	_var02, objptr
1eef0     20 E4 85 F1 | 	sub	objptr, #32
1eef4                 | _hg010b_spin2_makedl_ret
1eef4     2D 00 64 FD | 	ret
1eef8                 | 
1eef8                 | ' 
1eef8                 | ' 
1eef8                 | ' '****************************************************************************************************************
1eef8                 | ' '                                                                        					*
1eef8                 | ' '  Graphic primitives                                                    					*
1eef8                 | ' '                                                                        					*
1eef8                 | ' '****************************************************************************************************************
1eef8                 | ' 
1eef8                 | ' pub setspriteptr(num,ptr)
1eef8                 | _hg010b_spin2_setspriteptr
1eef8                 | ' long[@spr1ptr+12*num]:=ptr
1eef8     11 E5 05 F1 | 	add	objptr, #273
1eefc     F2 00 02 F6 | 	mov	_var01, objptr
1ef00     09 03 02 F6 | 	mov	_var02, arg01
1ef04     01 02 66 F0 | 	shl	_var02, #1
1ef08     09 03 02 F1 | 	add	_var02, arg01
1ef0c     02 02 66 F0 | 	shl	_var02, #2
1ef10     01 01 02 F1 | 	add	_var01, _var02
1ef14     00 15 62 FC | 	wrlong	arg02, _var01
1ef18     11 E5 85 F1 | 	sub	objptr, #273
1ef1c                 | _hg010b_spin2_setspriteptr_ret
1ef1c     2D 00 64 FD | 	ret
1ef20                 | 
1ef20                 | ' 
1ef20                 | ' pub setspritepos(num,x,y)
1ef20                 | _hg010b_spin2_setspritepos
1ef20                 | ' if y>601
1ef20     01 00 00 FF 
1ef24     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1ef28                 | '   y:=601
1ef28     01 00 00 3F 
1ef2c     59 16 06 36 |  if_ae	mov	arg03, ##601
1ef30                 | ' if x>1024
1ef30     02 00 00 FF 
1ef34     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1ef38                 | '   x:=1024
1ef38     0A 14 C6 39 |  if_ae	decod	arg02, #10
1ef3c                 | ' word[@spr1ptr+12*num+4]:=x
1ef3c     11 E5 05 F1 | 	add	objptr, #273
1ef40     F2 00 02 F6 | 	mov	_var01, objptr
1ef44     09 03 02 F6 | 	mov	_var02, arg01
1ef48     01 02 66 F0 | 	shl	_var02, #1
1ef4c     09 03 02 F1 | 	add	_var02, arg01
1ef50     02 02 66 F0 | 	shl	_var02, #2
1ef54     01 01 02 F1 | 	add	_var01, _var02
1ef58     04 00 06 F1 | 	add	_var01, #4
1ef5c     00 15 52 FC | 	wrword	arg02, _var01
1ef60                 | ' word[@spr1ptr+12*num+6]:=y
1ef60     F2 00 02 F6 | 	mov	_var01, objptr
1ef64     09 03 02 F6 | 	mov	_var02, arg01
1ef68     01 02 66 F0 | 	shl	_var02, #1
1ef6c     09 03 02 F1 | 	add	_var02, arg01
1ef70     02 02 66 F0 | 	shl	_var02, #2
1ef74     01 01 02 F1 | 	add	_var01, _var02
1ef78     06 00 06 F1 | 	add	_var01, #6
1ef7c     00 17 52 FC | 	wrword	arg03, _var01
1ef80     11 E5 85 F1 | 	sub	objptr, #273
1ef84                 | _hg010b_spin2_setspritepos_ret
1ef84     2D 00 64 FD | 	ret
1ef88                 | 
1ef88                 | ' 
1ef88                 | ' pub setspritesize(num,w,h)
1ef88                 | _hg010b_spin2_setspritesize
1ef88                 | ' word[@spr1ptr+12*num+8]:=w
1ef88     11 E5 05 F1 | 	add	objptr, #273
1ef8c     F2 00 02 F6 | 	mov	_var01, objptr
1ef90     09 03 02 F6 | 	mov	_var02, arg01
1ef94     01 02 66 F0 | 	shl	_var02, #1
1ef98     09 03 02 F1 | 	add	_var02, arg01
1ef9c     02 02 66 F0 | 	shl	_var02, #2
1efa0     01 01 02 F1 | 	add	_var01, _var02
1efa4     08 00 06 F1 | 	add	_var01, #8
1efa8     00 15 52 FC | 	wrword	arg02, _var01
1efac                 | ' word[@spr1ptr+12*num+10]:=h
1efac     F2 00 02 F6 | 	mov	_var01, objptr
1efb0     09 03 02 F6 | 	mov	_var02, arg01
1efb4     01 02 66 F0 | 	shl	_var02, #1
1efb8     09 03 02 F1 | 	add	_var02, arg01
1efbc     02 02 66 F0 | 	shl	_var02, #2
1efc0     01 01 02 F1 | 	add	_var01, _var02
1efc4     0A 00 06 F1 | 	add	_var01, #10
1efc8     00 17 52 FC | 	wrword	arg03, _var01
1efcc     11 E5 85 F1 | 	sub	objptr, #273
1efd0                 | _hg010b_spin2_setspritesize_ret
1efd0     2D 00 64 FD | 	ret
1efd4                 | 
1efd4                 | ' 
1efd4                 | ' 
1efd4                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1efd4                 | ' 
1efd4                 | ' 
1efd4                 | ' pub putpixel(x,y,c)
1efd4                 | _hg010b_spin2_putpixel
1efd4     04 4A 05 F6 | 	mov	COUNT_, #4
1efd8     A8 00 A0 FD | 	call	#pushregs_
1efdc     09 1F 02 F6 | 	mov	local01, arg01
1efe0                 | ' 
1efe0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1efe0     00 20 06 F6 | 	mov	local02, #0
1efe4     00 1E 56 F2 | 	cmps	local01, #0 wc
1efe8     01 20 66 36 |  if_ae	neg	local02, #1
1efec     E9 E4 05 F1 | 	add	objptr, #233
1eff0     F2 1A 02 FB | 	rdlong	arg05, objptr
1eff4     02 1A 66 F0 | 	shl	arg05, #2
1eff8     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1effc     11 23 A2 F1 | 	subx	local03, local03
1f000     11 21 02 F5 | 	and	local02, local03
1f004     00 22 06 F6 | 	mov	local03, #0
1f008     00 14 56 F2 | 	cmps	arg02, #0 wc
1f00c     01 22 66 36 |  if_ae	neg	local03, #1
1f010     11 21 02 F5 | 	and	local02, local03
1f014     04 E4 85 F1 | 	sub	objptr, #4
1f018     F2 22 02 FB | 	rdlong	local03, objptr
1f01c     E5 E4 85 F1 | 	sub	objptr, #229
1f020     11 15 52 F2 | 	cmps	arg02, local03 wc
1f024     12 25 A2 F1 | 	subx	local04, local04
1f028     12 21 CA F7 | 	test	local02, local04 wz
1f02c     48 00 90 AD |  if_e	jmp	#LR__2460
1f030     DD E4 05 F1 | 	add	objptr, #221
1f034     F2 12 02 FB | 	rdlong	arg01, objptr
1f038     14 E4 05 F1 | 	add	objptr, #20
1f03c     F2 24 02 FB | 	rdlong	local04, objptr
1f040     02 24 66 F0 | 	shl	local04, #2
1f044     0A 25 02 FD | 	qmul	local04, arg02
1f048                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f048     0B 15 02 F6 | 	mov	arg02, arg03
1f04c     01 16 06 F6 | 	mov	arg03, #1
1f050     00 18 06 F6 | 	mov	arg04, #0
1f054     01 1A 06 F6 | 	mov	arg05, #1
1f058     0A 00 00 FF 
1f05c     DB E5 05 F1 | 	add	objptr, ##5595
1f060     18 24 62 FD | 	getqx	local04
1f064     0F 25 02 F1 | 	add	local04, local01
1f068     12 13 02 F1 | 	add	arg01, local04
1f06c     0C 1A B0 FD | 	call	#_psram_spin2_fill
1f070     0B 00 00 FF 
1f074     CC E4 85 F1 | 	sub	objptr, ##5836
1f078                 | LR__2460
1f078     A7 F0 03 F6 | 	mov	ptra, fp
1f07c     B2 00 A0 FD | 	call	#popregs_
1f080                 | _hg010b_spin2_putpixel_ret
1f080     2D 00 64 FD | 	ret
1f084                 | 
1f084                 | ' 
1f084                 | ' pub putpixel2(x,y,c)
1f084                 | _hg010b_spin2_putpixel2
1f084     02 4A 05 F6 | 	mov	COUNT_, #2
1f088     A8 00 A0 FD | 	call	#pushregs_
1f08c     DD E4 05 F1 | 	add	objptr, #221
1f090     F2 1E 02 FB | 	rdlong	local01, objptr
1f094     14 E4 05 F1 | 	add	objptr, #20
1f098     F2 1A 02 FB | 	rdlong	arg05, objptr
1f09c     02 1A 66 F0 | 	shl	arg05, #2
1f0a0     0A 1B 02 FD | 	qmul	arg05, arg02
1f0a4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f0a4     0B 15 02 F6 | 	mov	arg02, arg03
1f0a8     01 16 06 F6 | 	mov	arg03, #1
1f0ac     00 18 06 F6 | 	mov	arg04, #0
1f0b0     01 1A 06 F6 | 	mov	arg05, #1
1f0b4     0A 00 00 FF 
1f0b8     DB E5 05 F1 | 	add	objptr, ##5595
1f0bc     18 20 62 FD | 	getqx	local02
1f0c0     09 21 02 F1 | 	add	local02, arg01
1f0c4     10 1F 02 F1 | 	add	local01, local02
1f0c8     0F 13 02 F6 | 	mov	arg01, local01
1f0cc     AC 19 B0 FD | 	call	#_psram_spin2_fill
1f0d0     0B 00 00 FF 
1f0d4     CC E4 85 F1 | 	sub	objptr, ##5836
1f0d8     A7 F0 03 F6 | 	mov	ptra, fp
1f0dc     B2 00 A0 FD | 	call	#popregs_
1f0e0                 | _hg010b_spin2_putpixel2_ret
1f0e0     2D 00 64 FD | 	ret
1f0e4                 | 
1f0e4                 | ' 
1f0e4                 | ' pub getpixel2(x,y): c 
1f0e4                 | _hg010b_spin2_getpixel2
1f0e4     02 4A 05 F6 | 	mov	COUNT_, #2
1f0e8     A8 00 A0 FD | 	call	#pushregs_
1f0ec     0C F0 07 F1 | 	add	ptra, #12
1f0f0     04 4E 05 F1 | 	add	fp, #4
1f0f4     A7 12 62 FC | 	wrlong	arg01, fp
1f0f8     04 4E 05 F1 | 	add	fp, #4
1f0fc     A7 14 62 FC | 	wrlong	arg02, fp
1f100     08 4E 85 F1 | 	sub	fp, #8
1f104     A7 00 68 FC | 	wrlong	#0, fp
1f108     A7 12 02 F6 | 	mov	arg01, fp
1f10c     DD E4 05 F1 | 	add	objptr, #221
1f110     F2 14 02 FB | 	rdlong	arg02, objptr
1f114     14 E4 05 F1 | 	add	objptr, #20
1f118     F2 16 02 FB | 	rdlong	arg03, objptr
1f11c     02 16 66 F0 | 	shl	arg03, #2
1f120     08 4E 05 F1 | 	add	fp, #8
1f124     A7 FA 01 FB | 	rdlong	result1, fp
1f128     FD 16 02 FD | 	qmul	arg03, result1
1f12c                 | ' 
1f12c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1f12c     04 4E 85 F1 | 	sub	fp, #4
1f130     A7 1E 02 FB | 	rdlong	local01, fp
1f134     04 4E 85 F1 | 	sub	fp, #4
1f138     01 16 06 F6 | 	mov	arg03, #1
1f13c     0A 00 00 FF 
1f140     DB E5 05 F1 | 	add	objptr, ##5595
1f144     18 20 62 FD | 	getqx	local02
1f148     0F 21 02 F1 | 	add	local02, local01
1f14c     10 15 02 F1 | 	add	arg02, local02
1f150     F0 17 B0 FD | 	call	#_psram_spin2_read1
1f154     0B 00 00 FF 
1f158     CC E4 85 F1 | 	sub	objptr, ##5836
1f15c                 | ' return c
1f15c     A7 FA 01 FB | 	rdlong	result1, fp
1f160     A7 F0 03 F6 | 	mov	ptra, fp
1f164     B2 00 A0 FD | 	call	#popregs_
1f168                 | _hg010b_spin2_getpixel2_ret
1f168     2D 00 64 FD | 	ret
1f16c                 | 
1f16c                 | '   
1f16c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1f16c                 | ' 
1f16c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1f16c                 | _hg010b_spin2_fastline
1f16c     02 4A 05 F6 | 	mov	COUNT_, #2
1f170     A8 00 A0 FD | 	call	#pushregs_
1f174     09 1F 02 F6 | 	mov	local01, arg01
1f178     0A 21 02 F6 | 	mov	local02, arg02
1f17c                 | ' 
1f17c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1f17c     00 16 56 F2 | 	cmps	arg03, #0 wc
1f180     F4 00 90 CD |  if_b	jmp	#LR__2470
1f184     01 00 00 FF 
1f188     2A E4 05 F1 | 	add	objptr, ##554
1f18c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f190     01 00 00 FF 
1f194     2A E4 85 F1 | 	sub	objptr, ##554
1f198     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1f19c     D8 00 90 3D |  if_ae	jmp	#LR__2470
1f1a0     00 1E 56 F2 | 	cmps	local01, #0 wc
1f1a4     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1f1a8     CC 00 90 CD |  if_b	jmp	#LR__2470
1f1ac     01 00 00 FF 
1f1b0     26 E4 05 F1 | 	add	objptr, ##550
1f1b4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f1b8     01 00 00 FF 
1f1bc     26 E4 85 F1 | 	sub	objptr, ##550
1f1c0     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1f1c4     01 00 00 1F 
1f1c8     26 E4 05 11 |  if_a	add	objptr, ##550
1f1cc     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1f1d0     01 00 00 1F 
1f1d4     26 E4 85 11 |  if_a	sub	objptr, ##550
1f1d8     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1f1dc                 | '   return
1f1dc     98 00 90 1D |  if_a	jmp	#LR__2470
1f1e0     10 1F 5A F2 | 	cmps	local01, local02 wcz
1f1e4     0F 1B 02 16 |  if_a	mov	arg05, local01
1f1e8     10 1F 02 16 |  if_a	mov	local01, local02
1f1ec     0D 21 02 16 |  if_a	mov	local02, arg05
1f1f0     00 1E 56 F2 | 	cmps	local01, #0 wc
1f1f4     00 1E 06 C6 |  if_b	mov	local01, #0
1f1f8     01 00 00 FF 
1f1fc     26 E4 05 F1 | 	add	objptr, ##550
1f200     F2 1A 02 FB | 	rdlong	arg05, objptr
1f204     01 00 00 FF 
1f208     26 E4 85 F1 | 	sub	objptr, ##550
1f20c     0D 21 52 F2 | 	cmps	local02, arg05 wc
1f210     01 00 00 3F 
1f214     26 E4 05 31 |  if_ae	add	objptr, ##550
1f218     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1f21c     01 00 00 3F 
1f220     26 E4 85 31 |  if_ae	sub	objptr, ##550
1f224     DD E4 05 F1 | 	add	objptr, #221
1f228     F2 12 02 FB | 	rdlong	arg01, objptr
1f22c     14 E4 05 F1 | 	add	objptr, #20
1f230     F2 1A 02 FB | 	rdlong	arg05, objptr
1f234     02 1A 66 F0 | 	shl	arg05, #2
1f238     0B 1B 02 FD | 	qmul	arg05, arg03
1f23c                 | ' if x1>x2
1f23c                 | '   x1,x2:=x2,x1
1f23c                 | ' if x1<0 
1f23c                 | '   x1:=0
1f23c                 | ' if x2>=xres
1f23c                 | '   x2:=xres-1  
1f23c     01 20 86 31 |  if_ae	sub	local02, #1
1f240                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1f240     01 16 06 F6 | 	mov	arg03, #1
1f244     10 17 02 F1 | 	add	arg03, local02
1f248     0F 17 82 F1 | 	sub	arg03, local01
1f24c     0C 15 02 F6 | 	mov	arg02, arg04
1f250     00 18 06 F6 | 	mov	arg04, #0
1f254     01 1A 06 F6 | 	mov	arg05, #1
1f258     0A 00 00 FF 
1f25c     DB E5 05 F1 | 	add	objptr, ##5595
1f260     18 20 62 FD | 	getqx	local02
1f264     0F 21 02 F1 | 	add	local02, local01
1f268     10 13 02 F1 | 	add	arg01, local02
1f26c     0C 18 B0 FD | 	call	#_psram_spin2_fill
1f270     0B 00 00 FF 
1f274     CC E4 85 F1 | 	sub	objptr, ##5836
1f278                 | LR__2470
1f278     A7 F0 03 F6 | 	mov	ptra, fp
1f27c     B2 00 A0 FD | 	call	#popregs_
1f280                 | _hg010b_spin2_fastline_ret
1f280     2D 00 64 FD | 	ret
1f284                 | 
1f284                 | ' 
1f284                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1f284                 | _hg010b_spin2_draw
1f284     0E 4A 05 F6 | 	mov	COUNT_, #14
1f288     A8 00 A0 FD | 	call	#pushregs_
1f28c     09 1F 02 F6 | 	mov	local01, arg01
1f290     0A 21 02 F6 | 	mov	local02, arg02
1f294     0B 23 02 F6 | 	mov	local03, arg03
1f298     0C 25 02 F6 | 	mov	local04, arg04
1f29c     0D 27 02 F6 | 	mov	local05, arg05
1f2a0                 | ' 
1f2a0                 | ' if (y1==y2)
1f2a0     12 21 0A F2 | 	cmp	local02, local04 wz
1f2a4     18 00 90 5D |  if_ne	jmp	#LR__2480
1f2a8                 | '   fastline(x1,x2,y1,c)
1f2a8     0F 13 02 F6 | 	mov	arg01, local01
1f2ac     11 15 02 F6 | 	mov	arg02, local03
1f2b0     10 17 02 F6 | 	mov	arg03, local02
1f2b4     13 19 02 F6 | 	mov	arg04, local05
1f2b8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1f2bc     F8 00 90 FD | 	jmp	#LR__2486
1f2c0                 | LR__2480
1f2c0                 | ' else  
1f2c0                 | '   x:=x1
1f2c0     0F 29 02 F6 | 	mov	local06, local01
1f2c4                 | '   y:=y1
1f2c4     10 2B 02 F6 | 	mov	local07, local02
1f2c8                 | ' 
1f2c8                 | '   if (x1<x2) 
1f2c8     11 1F 52 F2 | 	cmps	local01, local03 wc
1f2cc                 | '     xi:=1
1f2cc     01 2C 06 C6 |  if_b	mov	local08, #1
1f2d0                 | '     dx:=x2-x1
1f2d0     11 2F 02 C6 |  if_b	mov	local09, local03
1f2d4     0F 2F 82 C1 |  if_b	sub	local09, local01
1f2d8                 | '   else
1f2d8                 | '     xi:=-1
1f2d8     01 2C 66 36 |  if_ae	neg	local08, #1
1f2dc                 | '     dx:=x1-x2
1f2dc     11 1F 82 31 |  if_ae	sub	local01, local03
1f2e0     0F 2F 02 36 |  if_ae	mov	local09, local01
1f2e4                 | '   
1f2e4                 | '   if (y1<y2) 
1f2e4     12 21 52 F2 | 	cmps	local02, local04 wc
1f2e8                 | '     yi:=1
1f2e8     01 30 06 C6 |  if_b	mov	local10, #1
1f2ec                 | '     dy:=y2-y1
1f2ec     12 33 02 C6 |  if_b	mov	local11, local04
1f2f0     10 33 82 C1 |  if_b	sub	local11, local02
1f2f4                 | '   else
1f2f4                 | '     yi:=-1
1f2f4     01 30 66 36 |  if_ae	neg	local10, #1
1f2f8                 | '     dy:=y1-y2
1f2f8     12 21 82 31 |  if_ae	sub	local02, local04
1f2fc     10 33 02 36 |  if_ae	mov	local11, local02
1f300                 | ' 
1f300                 | '   putpixel(x,y,c)
1f300     13 17 02 F6 | 	mov	arg03, local05
1f304     14 13 02 F6 | 	mov	arg01, local06
1f308     15 15 02 F6 | 	mov	arg02, local07
1f30c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f310                 | ' 
1f310                 | '   if (dx>dy)
1f310     19 2F 5A F2 | 	cmps	local09, local11 wcz
1f314     50 00 90 ED |  if_be	jmp	#LR__2482
1f318                 | '     ai:=(dy-dx)*2
1f318     19 35 02 F6 | 	mov	local12, local11
1f31c     17 35 82 F1 | 	sub	local12, local09
1f320     01 34 66 F0 | 	shl	local12, #1
1f324                 | '     bi:=dy*2
1f324     01 32 66 F0 | 	shl	local11, #1
1f328     19 37 02 F6 | 	mov	local13, local11
1f32c                 | '     d:= bi-dx
1f32c     1B 39 02 F6 | 	mov	local14, local13
1f330     17 39 82 F1 | 	sub	local14, local09
1f334                 | '     repeat while (x<>x2) 
1f334                 | LR__2481
1f334     11 29 0A F2 | 	cmp	local06, local03 wz
1f338     7C 00 90 AD |  if_e	jmp	#LR__2485
1f33c                 | '       if (d>=0) 
1f33c     00 38 56 F2 | 	cmps	local14, #0 wc
1f340                 | '         x+=xi
1f340     16 29 02 31 |  if_ae	add	local06, local08
1f344                 | '         y+=yi
1f344     18 2B 02 31 |  if_ae	add	local07, local10
1f348                 | '         d+=ai
1f348     1A 39 02 31 |  if_ae	add	local14, local12
1f34c                 | '       else
1f34c                 | '         d+=bi
1f34c     1B 39 02 C1 |  if_b	add	local14, local13
1f350                 | '         x+=xi
1f350     16 29 02 C1 |  if_b	add	local06, local08
1f354                 | '       putpixel(x,y,c)
1f354     14 13 02 F6 | 	mov	arg01, local06
1f358     15 15 02 F6 | 	mov	arg02, local07
1f35c     13 17 02 F6 | 	mov	arg03, local05
1f360     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f364     CC FF 9F FD | 	jmp	#LR__2481
1f368                 | LR__2482
1f368                 | '   else
1f368                 | '     ai:=(dx-dy)*2
1f368     17 35 02 F6 | 	mov	local12, local09
1f36c     19 35 82 F1 | 	sub	local12, local11
1f370     01 34 66 F0 | 	shl	local12, #1
1f374                 | '     bi:=dx*2
1f374     01 2E 66 F0 | 	shl	local09, #1
1f378     17 37 02 F6 | 	mov	local13, local09
1f37c                 | '     d:=bi-dy
1f37c     1B 39 02 F6 | 	mov	local14, local13
1f380     19 39 82 F1 | 	sub	local14, local11
1f384                 | '     repeat while (y<>y2)
1f384                 | LR__2483
1f384     12 2B 0A F2 | 	cmp	local07, local04 wz
1f388     2C 00 90 AD |  if_e	jmp	#LR__2484
1f38c                 | '       if (d>=0)
1f38c     00 38 56 F2 | 	cmps	local14, #0 wc
1f390                 | '         x+=xi
1f390     16 29 02 31 |  if_ae	add	local06, local08
1f394                 | '         y+=yi
1f394     18 2B 02 31 |  if_ae	add	local07, local10
1f398                 | '         d+=ai
1f398     1A 39 02 31 |  if_ae	add	local14, local12
1f39c                 | '       else
1f39c                 | '         d+=bi
1f39c     1B 39 02 C1 |  if_b	add	local14, local13
1f3a0                 | '         y+=yi
1f3a0     18 2B 02 C1 |  if_b	add	local07, local10
1f3a4                 | '       putpixel(x, y,c)
1f3a4     14 13 02 F6 | 	mov	arg01, local06
1f3a8     15 15 02 F6 | 	mov	arg02, local07
1f3ac     13 17 02 F6 | 	mov	arg03, local05
1f3b0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f3b4     CC FF 9F FD | 	jmp	#LR__2483
1f3b8                 | LR__2484
1f3b8                 | LR__2485
1f3b8                 | LR__2486
1f3b8     A7 F0 03 F6 | 	mov	ptra, fp
1f3bc     B2 00 A0 FD | 	call	#popregs_
1f3c0                 | _hg010b_spin2_draw_ret
1f3c0     2D 00 64 FD | 	ret
1f3c4                 | 
1f3c4                 | '  
1f3c4                 | ' pub fillpush(val) 
1f3c4                 | _hg010b_spin2_fillpush
1f3c4                 | ' fillstack[fillptr]:=val
1f3c4     0B 00 00 FF 
1f3c8     BA E4 05 F1 | 	add	objptr, ##5818
1f3cc     F2 00 02 FB | 	rdlong	_var01, objptr
1f3d0     02 00 66 F0 | 	shl	_var01, #2
1f3d4     0A 00 00 FF 
1f3d8     00 E4 85 F1 | 	sub	objptr, ##5120
1f3dc     F2 00 02 F1 | 	add	_var01, objptr
1f3e0     00 13 62 FC | 	wrlong	arg01, _var01
1f3e4                 | ' fillptr+=1   
1f3e4     0A 00 00 FF 
1f3e8     00 E4 05 F1 | 	add	objptr, ##5120
1f3ec     F2 00 02 FB | 	rdlong	_var01, objptr
1f3f0     01 00 06 F1 | 	add	_var01, #1
1f3f4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3f8     0B 00 00 FF 
1f3fc     BA E4 85 F1 | 	sub	objptr, ##5818
1f400                 | _hg010b_spin2_fillpush_ret
1f400     2D 00 64 FD | 	ret
1f404                 | 
1f404                 | ' 
1f404                 | '     
1f404                 | ' pub fillpop() : val
1f404                 | _hg010b_spin2_fillpop
1f404                 | ' 
1f404                 | ' fillptr-=1
1f404     0B 00 00 FF 
1f408     BA E4 05 F1 | 	add	objptr, ##5818
1f40c     F2 FA 01 FB | 	rdlong	result1, objptr
1f410     01 FA 85 F1 | 	sub	result1, #1
1f414     F2 FA 61 FC | 	wrlong	result1, objptr
1f418                 | ' if fillptr<0
1f418     0B 00 00 FF 
1f41c     BA E4 85 F1 | 	sub	objptr, ##5818
1f420     00 FA 55 F2 | 	cmps	result1, #0 wc
1f424                 | '   fillptr:=0
1f424     0B 00 00 CF 
1f428     BA E4 05 C1 |  if_b	add	objptr, ##5818
1f42c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1f430     0B 00 00 CF 
1f434     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1f438                 | '   val:=-12345
1f438     E7 FF 7F CF 
1f43c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1f440     28 00 90 CD |  if_b	jmp	#LR__2490
1f444                 | ' else 
1f444                 | '   val:=fillstack[fillptr]
1f444     0B 00 00 FF 
1f448     BA E4 05 F1 | 	add	objptr, ##5818
1f44c     F2 00 02 FB | 	rdlong	_var01, objptr
1f450     02 00 66 F0 | 	shl	_var01, #2
1f454     0A 00 00 FF 
1f458     00 E4 85 F1 | 	sub	objptr, ##5120
1f45c     F2 00 02 F1 | 	add	_var01, objptr
1f460     00 01 02 FB | 	rdlong	_var01, _var01
1f464     01 00 00 FF 
1f468     BA E4 85 F1 | 	sub	objptr, ##698
1f46c                 | LR__2490
1f46c                 | ' return val
1f46c     00 FB 01 F6 | 	mov	result1, _var01
1f470                 | _hg010b_spin2_fillpop_ret
1f470     2D 00 64 FD | 	ret
1f474                 | 
1f474                 | ' 
1f474                 | '       
1f474                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1f474                 | _hg010b_spin2_fill
1f474     0B 4A 05 F6 | 	mov	COUNT_, #11
1f478     A8 00 A0 FD | 	call	#pushregs_
1f47c                 | ' 
1f47c                 | ' newcolor:=newcolor & 255
1f47c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1f480                 | ' oldcolor:=oldcolor & 255
1f480     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1f484                 | ' 
1f484                 | ' if (oldcolor == newcolor) 
1f484     0F 21 0A F2 | 	cmp	local02, local01 wz
1f488                 | '   return
1f488     70 02 90 AD |  if_e	jmp	#LR__2509
1f48c                 | ' 
1f48c                 | ' fillptr:=0
1f48c     0B 00 00 FF 
1f490     BA E4 05 F1 | 	add	objptr, ##5818
1f494     F2 00 68 FC | 	wrlong	#0, objptr
1f498                 | ' fillmax:=0
1f498     04 E4 05 F1 | 	add	objptr, #4
1f49c     F2 00 68 FC | 	wrlong	#0, objptr
1f4a0     0B 00 00 FF 
1f4a4     BE E4 85 F1 | 	sub	objptr, ##5822
1f4a8                 | ' fillpush(x)
1f4a8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f4ac                 | ' fillpush(y)
1f4ac     0A 13 02 F6 | 	mov	arg01, arg02
1f4b0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f4b4                 | ' y:=fillpop()
1f4b4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1f4b8     FD 22 02 F6 | 	mov	local03, result1
1f4bc                 | ' x:=fillpop()
1f4bc     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1f4c0     FD 24 02 F6 | 	mov	local04, result1
1f4c4                 | ' 'pinhigh(38)
1f4c4                 | ' repeat while (x>-1)       
1f4c4                 | LR__2500
1f4c4     00 24 56 F2 | 	cmps	local04, #0 wc
1f4c8     30 02 90 CD |  if_b	jmp	#LR__2508
1f4cc                 | '  ' pintoggle(39)
1f4cc                 | '   x1 := x
1f4cc     12 27 02 F6 | 	mov	local05, local04
1f4d0                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1f4d0                 | LR__2501
1f4d0     00 28 06 F6 | 	mov	local06, #0
1f4d4     00 2A 06 F6 | 	mov	local07, #0
1f4d8     00 26 56 F2 | 	cmps	local05, #0 wc
1f4dc     01 2A 66 36 |  if_ae	neg	local07, #1
1f4e0     00 2A 0E F2 | 	cmp	local07, #0 wz
1f4e4     00 28 26 56 |  if_ne	not	local06, #0
1f4e8     00 2C 06 F6 | 	mov	local08, #0
1f4ec     00 2E 06 F6 | 	mov	local09, #0
1f4f0     11 15 02 F6 | 	mov	arg02, local03
1f4f4     13 13 02 F6 | 	mov	arg01, local05
1f4f8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f4fc     10 FB 09 F2 | 	cmp	result1, local02 wz
1f500     00 2E 26 A6 |  if_e	not	local09, #0
1f504     00 2E 0E F2 | 	cmp	local09, #0 wz
1f508     00 2C 26 56 |  if_ne	not	local08, #0
1f50c     16 29 CA F7 | 	test	local06, local08 wz
1f510                 | '     x1--
1f510     01 26 86 51 |  if_ne	sub	local05, #1
1f514     B8 FF 9F 5D |  if_ne	jmp	#LR__2501
1f518                 | '   x1++
1f518     01 26 06 F1 | 	add	local05, #1
1f51c                 | '   spanabove := 0
1f51c     00 30 06 F6 | 	mov	local10, #0
1f520                 | '   spanbelow := 0
1f520     00 32 06 F6 | 	mov	local11, #0
1f524                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1f524                 | LR__2502
1f524     00 28 06 F6 | 	mov	local06, #0
1f528     02 00 00 FF 
1f52c     00 26 56 F2 | 	cmps	local05, ##1024 wc
1f530     00 28 26 C6 |  if_b	not	local06, #0
1f534     00 2C 06 F6 | 	mov	local08, #0
1f538     00 2E 06 F6 | 	mov	local09, #0
1f53c     11 15 02 F6 | 	mov	arg02, local03
1f540     13 13 02 F6 | 	mov	arg01, local05
1f544     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f548     10 FB 09 F2 | 	cmp	result1, local02 wz
1f54c     00 2E 26 A6 |  if_e	not	local09, #0
1f550     00 2E 0E F2 | 	cmp	local09, #0 wz
1f554     00 2C 26 56 |  if_ne	not	local08, #0
1f558     16 29 CA F7 | 	test	local06, local08 wz
1f55c     88 01 90 AD |  if_e	jmp	#LR__2507
1f560                 | '     putpixel2 (x1,y, newcolor & 255)
1f560     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1f564     13 13 02 F6 | 	mov	arg01, local05
1f568     11 15 02 F6 | 	mov	arg02, local03
1f56c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1f570                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1f570     00 28 06 F6 | 	mov	local06, #0
1f574     00 2A 06 F6 | 	mov	local07, #0
1f578     00 30 0E F2 | 	cmp	local10, #0 wz
1f57c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1f580     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1f584     00 2A 0E F2 | 	cmp	local07, #0 wz
1f588     00 28 26 56 |  if_ne	not	local06, #0
1f58c     00 2C 06 F6 | 	mov	local08, #0
1f590     00 2E 06 F6 | 	mov	local09, #0
1f594     11 15 02 F6 | 	mov	arg02, local03
1f598     01 14 86 F1 | 	sub	arg02, #1
1f59c     13 13 02 F6 | 	mov	arg01, local05
1f5a0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f5a4     10 FB 09 F2 | 	cmp	result1, local02 wz
1f5a8     00 2E 26 A6 |  if_e	not	local09, #0
1f5ac     00 2E 0E F2 | 	cmp	local09, #0 wz
1f5b0     00 2C 26 56 |  if_ne	not	local08, #0
1f5b4     16 29 CA F7 | 	test	local06, local08 wz
1f5b8     1C 00 90 AD |  if_e	jmp	#LR__2503
1f5bc                 | '       fillpush(x1)
1f5bc     13 13 02 F6 | 	mov	arg01, local05
1f5c0     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1f5c4                 | '       fillpush(y-1)
1f5c4     11 13 02 F6 | 	mov	arg01, local03
1f5c8     01 12 86 F1 | 	sub	arg01, #1
1f5cc     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f5d0                 | '       spanabove := 1 
1f5d0     01 30 06 F6 | 	mov	local10, #1
1f5d4     4C 00 90 FD | 	jmp	#LR__2504
1f5d8                 | LR__2503
1f5d8                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1f5d8     00 28 06 F6 | 	mov	local06, #0
1f5dc     00 2A 06 F6 | 	mov	local07, #0
1f5e0     00 30 0E F2 | 	cmp	local10, #0 wz
1f5e4     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1f5e8     01 2A 66 16 |  if_a	neg	local07, #1
1f5ec     00 2A 0E F2 | 	cmp	local07, #0 wz
1f5f0     00 28 26 56 |  if_ne	not	local06, #0
1f5f4     00 2C 06 F6 | 	mov	local08, #0
1f5f8     00 2E 06 F6 | 	mov	local09, #0
1f5fc     11 15 02 F6 | 	mov	arg02, local03
1f600     01 14 86 F1 | 	sub	arg02, #1
1f604     13 13 02 F6 | 	mov	arg01, local05
1f608     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f60c     10 FB 09 F2 | 	cmp	result1, local02 wz
1f610     00 2E 26 56 |  if_ne	not	local09, #0
1f614     00 2E 0E F2 | 	cmp	local09, #0 wz
1f618     00 2C 26 56 |  if_ne	not	local08, #0
1f61c     16 29 CA F7 | 	test	local06, local08 wz
1f620                 | '       spanabove := 0 
1f620     00 30 06 56 |  if_ne	mov	local10, #0
1f624                 | LR__2504
1f624                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1f624     00 28 06 F6 | 	mov	local06, #0
1f628     00 2A 06 F6 | 	mov	local07, #0
1f62c     00 32 0E F2 | 	cmp	local11, #0 wz
1f630     01 00 00 AF 
1f634     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1f638     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1f63c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f640     00 28 26 56 |  if_ne	not	local06, #0
1f644     00 2C 06 F6 | 	mov	local08, #0
1f648     00 2E 06 F6 | 	mov	local09, #0
1f64c     11 15 02 F6 | 	mov	arg02, local03
1f650     01 14 06 F1 | 	add	arg02, #1
1f654     13 13 02 F6 | 	mov	arg01, local05
1f658     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f65c     10 FB 09 F2 | 	cmp	result1, local02 wz
1f660     00 2E 26 A6 |  if_e	not	local09, #0
1f664     00 2E 0E F2 | 	cmp	local09, #0 wz
1f668     00 2C 26 56 |  if_ne	not	local08, #0
1f66c     16 29 CA F7 | 	test	local06, local08 wz
1f670     1C 00 90 AD |  if_e	jmp	#LR__2505
1f674                 | '       fillpush(x1)
1f674     13 13 02 F6 | 	mov	arg01, local05
1f678     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f67c                 | '       fillpush(y + 1)
1f67c     11 13 02 F6 | 	mov	arg01, local03
1f680     01 12 06 F1 | 	add	arg01, #1
1f684     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1f688                 | '       spanBelow := 1
1f688     01 32 06 F6 | 	mov	local11, #1
1f68c     50 00 90 FD | 	jmp	#LR__2506
1f690                 | LR__2505
1f690                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1f690     00 28 06 F6 | 	mov	local06, #0
1f694     00 2A 06 F6 | 	mov	local07, #0
1f698     00 32 0E F2 | 	cmp	local11, #0 wz
1f69c     01 00 00 5F 
1f6a0     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1f6a4     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1f6a8     00 2A 0E F2 | 	cmp	local07, #0 wz
1f6ac     00 28 26 56 |  if_ne	not	local06, #0
1f6b0     00 2C 06 F6 | 	mov	local08, #0
1f6b4     00 2E 06 F6 | 	mov	local09, #0
1f6b8     11 15 02 F6 | 	mov	arg02, local03
1f6bc     01 14 06 F1 | 	add	arg02, #1
1f6c0     13 13 02 F6 | 	mov	arg01, local05
1f6c4     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f6c8     10 FB 09 F2 | 	cmp	result1, local02 wz
1f6cc     00 2E 26 56 |  if_ne	not	local09, #0
1f6d0     00 2E 0E F2 | 	cmp	local09, #0 wz
1f6d4     00 2C 26 56 |  if_ne	not	local08, #0
1f6d8     16 29 CA F7 | 	test	local06, local08 wz
1f6dc                 | '       spanbelow := 0
1f6dc     00 32 06 56 |  if_ne	mov	local11, #0
1f6e0                 | LR__2506
1f6e0                 | '     x1++
1f6e0     01 26 06 F1 | 	add	local05, #1
1f6e4     3C FE 9F FD | 	jmp	#LR__2502
1f6e8                 | LR__2507
1f6e8                 | '   y:=fillpop()
1f6e8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f6ec     FD 22 02 F6 | 	mov	local03, result1
1f6f0                 | '   x:=fillpop()
1f6f0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f6f4     FD 24 02 F6 | 	mov	local04, result1
1f6f8     C8 FD 9F FD | 	jmp	#LR__2500
1f6fc                 | LR__2508
1f6fc                 | LR__2509
1f6fc     A7 F0 03 F6 | 	mov	ptra, fp
1f700     B2 00 A0 FD | 	call	#popregs_
1f704                 | _hg010b_spin2_fill_ret
1f704     2D 00 64 FD | 	ret
1f708                 | 
1f708                 | ' 'pinlow(38)    
1f708                 | ' 
1f708                 | ' '-- A filled circle -----------------------------------------------------
1f708                 | ' 
1f708                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1f708                 | _hg010b_spin2_fcircle
1f708     08 4A 05 F6 | 	mov	COUNT_, #8
1f70c     A8 00 A0 FD | 	call	#pushregs_
1f710     0B 1F 02 F6 | 	mov	local01, arg03
1f714     FF FF 7F FF 
1f718     FE 1F 06 FD | 	qmul	local01, ##-2
1f71c     09 21 02 F6 | 	mov	local02, arg01
1f720     0A 23 02 F6 | 	mov	local03, arg02
1f724     0C 25 02 F6 | 	mov	local04, arg04
1f728                 | ' 
1f728                 | ' d:=5-4*r
1f728     0F 19 02 F6 | 	mov	arg04, local01
1f72c     02 18 66 F0 | 	shl	arg04, #2
1f730     05 26 06 F6 | 	mov	local05, #5
1f734     0C 27 82 F1 | 	sub	local05, arg04
1f738                 | ' x:=0
1f738     00 28 06 F6 | 	mov	local06, #0
1f73c                 | ' y:=r
1f73c                 | ' da:=(-2*r+5)*4
1f73c                 | ' db:=3*4
1f73c     0C 2A 06 F6 | 	mov	local07, #12
1f740                 | ' repeat while (x<=y) 
1f740     18 2C 62 FD | 	getqx	local08
1f744     05 2C 06 F1 | 	add	local08, #5
1f748     02 2C 66 F0 | 	shl	local08, #2
1f74c                 | LR__2510
1f74c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f750     B4 00 90 1D |  if_a	jmp	#LR__2512
1f754                 | '   fastline(x0-x,x0+x,y0-y,c)
1f754     10 13 02 F6 | 	mov	arg01, local02
1f758     14 13 82 F1 | 	sub	arg01, local06
1f75c     10 15 02 F6 | 	mov	arg02, local02
1f760     14 15 02 F1 | 	add	arg02, local06
1f764     11 17 02 F6 | 	mov	arg03, local03
1f768     0F 17 82 F1 | 	sub	arg03, local01
1f76c     12 19 02 F6 | 	mov	arg04, local04
1f770     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f774                 | '   fastline(x0-x,x0+x,y0+y,c)
1f774     10 13 02 F6 | 	mov	arg01, local02
1f778     14 13 82 F1 | 	sub	arg01, local06
1f77c     10 15 02 F6 | 	mov	arg02, local02
1f780     14 15 02 F1 | 	add	arg02, local06
1f784     11 17 02 F6 | 	mov	arg03, local03
1f788     0F 17 02 F1 | 	add	arg03, local01
1f78c     12 19 02 F6 | 	mov	arg04, local04
1f790     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f794                 | '   fastline(x0-y,x0+y,y0-x,c)
1f794     10 13 02 F6 | 	mov	arg01, local02
1f798     0F 13 82 F1 | 	sub	arg01, local01
1f79c     10 15 02 F6 | 	mov	arg02, local02
1f7a0     0F 15 02 F1 | 	add	arg02, local01
1f7a4     11 17 02 F6 | 	mov	arg03, local03
1f7a8     14 17 82 F1 | 	sub	arg03, local06
1f7ac     12 19 02 F6 | 	mov	arg04, local04
1f7b0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f7b4                 | '   fastline(x0-y,x0+y,y0+x,c)
1f7b4     10 13 02 F6 | 	mov	arg01, local02
1f7b8     0F 13 82 F1 | 	sub	arg01, local01
1f7bc     10 15 02 F6 | 	mov	arg02, local02
1f7c0     0F 15 02 F1 | 	add	arg02, local01
1f7c4     11 17 02 F6 | 	mov	arg03, local03
1f7c8     14 17 02 F1 | 	add	arg03, local06
1f7cc     12 19 02 F6 | 	mov	arg04, local04
1f7d0     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f7d4                 | '   if d>0 
1f7d4     01 26 56 F2 | 	cmps	local05, #1 wc
1f7d8     18 00 90 CD |  if_b	jmp	#LR__2511
1f7dc                 | '     d+=da
1f7dc     16 27 02 F1 | 	add	local05, local08
1f7e0                 | '     y-=1
1f7e0     01 1E 86 F1 | 	sub	local01, #1
1f7e4                 | '     x+=1
1f7e4     01 28 06 F1 | 	add	local06, #1
1f7e8                 | '     da+=4*4
1f7e8     10 2C 06 F1 | 	add	local08, #16
1f7ec                 | '     db+=2*4
1f7ec     08 2A 06 F1 | 	add	local07, #8
1f7f0     58 FF 9F FD | 	jmp	#LR__2510
1f7f4                 | LR__2511
1f7f4                 | '   else
1f7f4                 | '     d+=db
1f7f4     15 27 02 F1 | 	add	local05, local07
1f7f8                 | '     x+=1
1f7f8     01 28 06 F1 | 	add	local06, #1
1f7fc                 | '     da+=2*4
1f7fc     08 2C 06 F1 | 	add	local08, #8
1f800                 | '     db+=2*4
1f800     08 2A 06 F1 | 	add	local07, #8
1f804     44 FF 9F FD | 	jmp	#LR__2510
1f808                 | LR__2512
1f808     A7 F0 03 F6 | 	mov	ptra, fp
1f80c     B2 00 A0 FD | 	call	#popregs_
1f810                 | _hg010b_spin2_fcircle_ret
1f810     2D 00 64 FD | 	ret
1f814                 | 
1f814                 | '  
1f814                 | ' '-- A circle ------------------------------------------------------------ 
1f814                 | '  
1f814                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1f814                 | _hg010b_spin2_circle
1f814     08 4A 05 F6 | 	mov	COUNT_, #8
1f818     A8 00 A0 FD | 	call	#pushregs_
1f81c     0B 1F 02 F6 | 	mov	local01, arg03
1f820     FF FF 7F FF 
1f824     FE 1F 06 FD | 	qmul	local01, ##-2
1f828     09 21 02 F6 | 	mov	local02, arg01
1f82c     0A 23 02 F6 | 	mov	local03, arg02
1f830     0C 25 02 F6 | 	mov	local04, arg04
1f834                 | ' 
1f834                 | '  
1f834                 | ' d:=5-4*r
1f834     0F 19 02 F6 | 	mov	arg04, local01
1f838     02 18 66 F0 | 	shl	arg04, #2
1f83c     05 26 06 F6 | 	mov	local05, #5
1f840     0C 27 82 F1 | 	sub	local05, arg04
1f844                 | ' x:=0
1f844     00 28 06 F6 | 	mov	local06, #0
1f848                 | ' y:=r
1f848                 | ' da:=(-2*r+5)*4
1f848                 | ' db:=3*4
1f848     0C 2A 06 F6 | 	mov	local07, #12
1f84c                 | ' repeat while (x<=y) 
1f84c     18 2C 62 FD | 	getqx	local08
1f850     05 2C 06 F1 | 	add	local08, #5
1f854     02 2C 66 F0 | 	shl	local08, #2
1f858                 | LR__2520
1f858     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f85c     F4 00 90 1D |  if_a	jmp	#LR__2522
1f860                 | '   putpixel(x0-x,y0-y,c)
1f860     10 13 02 F6 | 	mov	arg01, local02
1f864     14 13 82 F1 | 	sub	arg01, local06
1f868     11 15 02 F6 | 	mov	arg02, local03
1f86c     0F 15 82 F1 | 	sub	arg02, local01
1f870     12 17 02 F6 | 	mov	arg03, local04
1f874     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f878                 | '   putpixel(x0-x,y0+y,c)
1f878     10 13 02 F6 | 	mov	arg01, local02
1f87c     14 13 82 F1 | 	sub	arg01, local06
1f880     11 15 02 F6 | 	mov	arg02, local03
1f884     0F 15 02 F1 | 	add	arg02, local01
1f888     12 17 02 F6 | 	mov	arg03, local04
1f88c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f890                 | '   putpixel(x0+x,y0-y,c)
1f890     10 13 02 F6 | 	mov	arg01, local02
1f894     14 13 02 F1 | 	add	arg01, local06
1f898     11 15 02 F6 | 	mov	arg02, local03
1f89c     0F 15 82 F1 | 	sub	arg02, local01
1f8a0     12 17 02 F6 | 	mov	arg03, local04
1f8a4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f8a8                 | '   putpixel(x0+x,y0+y,c)
1f8a8     10 13 02 F6 | 	mov	arg01, local02
1f8ac     14 13 02 F1 | 	add	arg01, local06
1f8b0     11 15 02 F6 | 	mov	arg02, local03
1f8b4     0F 15 02 F1 | 	add	arg02, local01
1f8b8     12 17 02 F6 | 	mov	arg03, local04
1f8bc     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f8c0                 | '   putpixel(x0-y,y0-x,c)
1f8c0     10 13 02 F6 | 	mov	arg01, local02
1f8c4     0F 13 82 F1 | 	sub	arg01, local01
1f8c8     11 15 02 F6 | 	mov	arg02, local03
1f8cc     14 15 82 F1 | 	sub	arg02, local06
1f8d0     12 17 02 F6 | 	mov	arg03, local04
1f8d4     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f8d8                 | '   putpixel(x0-y,y0+x,c)
1f8d8     10 13 02 F6 | 	mov	arg01, local02
1f8dc     0F 13 82 F1 | 	sub	arg01, local01
1f8e0     11 15 02 F6 | 	mov	arg02, local03
1f8e4     14 15 02 F1 | 	add	arg02, local06
1f8e8     12 17 02 F6 | 	mov	arg03, local04
1f8ec     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f8f0                 | '   putpixel(x0+y,y0-x,c)
1f8f0     10 13 02 F6 | 	mov	arg01, local02
1f8f4     0F 13 02 F1 | 	add	arg01, local01
1f8f8     11 15 02 F6 | 	mov	arg02, local03
1f8fc     14 15 82 F1 | 	sub	arg02, local06
1f900     12 17 02 F6 | 	mov	arg03, local04
1f904     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f908                 | '   putpixel(x0+y,y0+x,c)
1f908     10 13 02 F6 | 	mov	arg01, local02
1f90c     0F 13 02 F1 | 	add	arg01, local01
1f910     11 15 02 F6 | 	mov	arg02, local03
1f914     14 15 02 F1 | 	add	arg02, local06
1f918     12 17 02 F6 | 	mov	arg03, local04
1f91c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f920                 | '   if d>0 
1f920     01 26 56 F2 | 	cmps	local05, #1 wc
1f924     18 00 90 CD |  if_b	jmp	#LR__2521
1f928                 | '     d+=da
1f928     16 27 02 F1 | 	add	local05, local08
1f92c                 | '     y-=1
1f92c     01 1E 86 F1 | 	sub	local01, #1
1f930                 | '     x+=1
1f930     01 28 06 F1 | 	add	local06, #1
1f934                 | '     da+=4*4
1f934     10 2C 06 F1 | 	add	local08, #16
1f938                 | '     db+=2*4
1f938     08 2A 06 F1 | 	add	local07, #8
1f93c     18 FF 9F FD | 	jmp	#LR__2520
1f940                 | LR__2521
1f940                 | '   else
1f940                 | '     d+=db
1f940     15 27 02 F1 | 	add	local05, local07
1f944                 | '     x+=1
1f944     01 28 06 F1 | 	add	local06, #1
1f948                 | '     da+=2*4
1f948     08 2C 06 F1 | 	add	local08, #8
1f94c                 | '     db+=2*4
1f94c     08 2A 06 F1 | 	add	local07, #8
1f950     04 FF 9F FD | 	jmp	#LR__2520
1f954                 | LR__2522
1f954     A7 F0 03 F6 | 	mov	ptra, fp
1f958     B2 00 A0 FD | 	call	#popregs_
1f95c                 | _hg010b_spin2_circle_ret
1f95c     2D 00 64 FD | 	ret
1f960                 | 
1f960                 | '     
1f960                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1f960                 | ' 
1f960                 | ' pub frame(x1,y1,x2,y2,c)
1f960                 | _hg010b_spin2_frame
1f960     05 4A 05 F6 | 	mov	COUNT_, #5
1f964     A8 00 A0 FD | 	call	#pushregs_
1f968     09 1F 02 F6 | 	mov	local01, arg01
1f96c     0A 21 02 F6 | 	mov	local02, arg02
1f970     0B 23 02 F6 | 	mov	local03, arg03
1f974     0C 25 02 F6 | 	mov	local04, arg04
1f978     0D 27 02 F6 | 	mov	local05, arg05
1f97c                 | ' 
1f97c                 | ' fastline(x1,x2,y1,c)
1f97c     0F 13 02 F6 | 	mov	arg01, local01
1f980     11 15 02 F6 | 	mov	arg02, local03
1f984     10 17 02 F6 | 	mov	arg03, local02
1f988     13 19 02 F6 | 	mov	arg04, local05
1f98c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1f990                 | ' fastline(x1,x2,y2,c)
1f990     0F 13 02 F6 | 	mov	arg01, local01
1f994     11 15 02 F6 | 	mov	arg02, local03
1f998     12 17 02 F6 | 	mov	arg03, local04
1f99c     13 19 02 F6 | 	mov	arg04, local05
1f9a0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1f9a4                 | ' line(x1,y1,x1,y2,c)
1f9a4     0F 13 02 F6 | 	mov	arg01, local01
1f9a8     10 15 02 F6 | 	mov	arg02, local02
1f9ac     0F 17 02 F6 | 	mov	arg03, local01
1f9b0     12 19 02 F6 | 	mov	arg04, local04
1f9b4     13 1B 02 F6 | 	mov	arg05, local05
1f9b8                 | ' draw(x1,y1,x2,y2,c)
1f9b8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1f9bc                 | ' line(x2,y1,x2,y2,c)
1f9bc     11 13 02 F6 | 	mov	arg01, local03
1f9c0     10 15 02 F6 | 	mov	arg02, local02
1f9c4     11 17 02 F6 | 	mov	arg03, local03
1f9c8     12 19 02 F6 | 	mov	arg04, local04
1f9cc     13 1B 02 F6 | 	mov	arg05, local05
1f9d0                 | ' draw(x1,y1,x2,y2,c)
1f9d0     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1f9d4     A7 F0 03 F6 | 	mov	ptra, fp
1f9d8     B2 00 A0 FD | 	call	#popregs_
1f9dc                 | _hg010b_spin2_frame_ret
1f9dc     2D 00 64 FD | 	ret
1f9e0                 | 
1f9e0                 | ' 
1f9e0                 | ' '-- A box (a filled rectangle) ----------------------------------------
1f9e0                 | ' 
1f9e0                 | ' pub box(x1,y1,x2,y2,c) |yy
1f9e0                 | _hg010b_spin2_box
1f9e0     06 4A 05 F6 | 	mov	COUNT_, #6
1f9e4     A8 00 A0 FD | 	call	#pushregs_
1f9e8     09 1F 02 F6 | 	mov	local01, arg01
1f9ec     0A 21 02 F6 | 	mov	local02, arg02
1f9f0     0B 23 02 F6 | 	mov	local03, arg03
1f9f4     0C 25 02 F6 | 	mov	local04, arg04
1f9f8     0D 27 02 F6 | 	mov	local05, arg05
1f9fc                 | ' 
1f9fc                 | ' repeat yy from y1 to y2
1f9fc     10 25 52 F2 | 	cmps	local04, local02 wc
1fa00     01 28 86 F6 | 	negc	local06, #1
1fa04     14 25 02 F1 | 	add	local04, local06
1fa08                 | LR__2530
1fa08                 | '   fastline(x1,x2,yy,c)
1fa08     0F 13 02 F6 | 	mov	arg01, local01
1fa0c     11 15 02 F6 | 	mov	arg02, local03
1fa10     13 19 02 F6 | 	mov	arg04, local05
1fa14     10 17 02 F6 | 	mov	arg03, local02
1fa18     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1fa1c     14 21 02 F1 | 	add	local02, local06
1fa20     12 21 0A F2 | 	cmp	local02, local04 wz
1fa24     E0 FF 9F 5D |  if_ne	jmp	#LR__2530
1fa28     A7 F0 03 F6 | 	mov	ptra, fp
1fa2c     B2 00 A0 FD | 	call	#popregs_
1fa30                 | _hg010b_spin2_box_ret
1fa30     2D 00 64 FD | 	ret
1fa34                 | 
1fa34                 | '       
1fa34                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1fa34                 | _hg010b_spin2_putcharxycgf
1fa34                 | ' 
1fa34                 | '  
1fa34                 | ' repeat yy from 0 to 15
1fa34     00 00 06 F6 | 	mov	_var01, #0
1fa38     97 8C 48 FB | 	callpa	#(@LR__2542-@LR__2540)>>2,fcache_load_ptr_
1fa3c                 | LR__2540
1fa3c                 | ' 
1fa3c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1fa3c     95 E4 05 F1 | 	add	objptr, #149
1fa40     F2 02 02 FB | 	rdlong	_var02, objptr
1fa44     0A 02 66 F0 | 	shl	_var02, #10
1fa48     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1fa4c     01 05 02 F1 | 	add	_var03, _var02
1fa50     0B 03 02 F6 | 	mov	_var02, arg03
1fa54     04 02 66 F0 | 	shl	_var02, #4
1fa58     01 05 02 F1 | 	add	_var03, _var02
1fa5c     00 05 02 F1 | 	add	_var03, _var01
1fa60     02 05 C2 FA | 	rdbyte	_var03, _var03
1fa64                 | '   asm
1fa64     00 04 0E F4 | 	testb	_var03, #0 wz
1fa68     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1fa6c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1fa70     01 04 0E F4 | 	testb	_var03, #1 wz
1fa74     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1fa78     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1fa7c     02 04 0E F4 | 	testb	_var03, #2 wz
1fa80     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1fa84     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1fa88     03 04 0E F4 | 	testb	_var03, #3 wz
1fa8c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1fa90     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1fa94     04 04 0E F4 | 	testb	_var03, #4 wz
1fa98     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1fa9c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1faa0     05 04 0E F4 | 	testb	_var03, #5 wz
1faa4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1faa8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1faac     06 04 0E F4 | 	testb	_var03, #6 wz
1fab0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1fab4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1fab8     07 04 0E F4 | 	testb	_var03, #7 wz
1fabc     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1fac0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1fac4                 | '   
1fac4                 | '   ccc[0]:=c1
1fac4     99 E5 05 F1 | 	add	objptr, #409
1fac8     F2 06 62 FC | 	wrlong	_var04, objptr
1facc                 | '   ccc[1]:=c2 
1facc     04 E4 05 F1 | 	add	objptr, #4
1fad0     F2 08 62 FC | 	wrlong	_var05, objptr
1fad4                 | '   long[mailbox0][2]:=8
1fad4     49 E4 85 F1 | 	sub	objptr, #73
1fad8     F2 04 02 FB | 	rdlong	_var03, objptr
1fadc     08 04 06 F1 | 	add	_var03, #8
1fae0     02 11 68 FC | 	wrlong	#8, _var03
1fae4                 | '   long[mailbox0][1]:=@ccc
1fae4     45 E4 05 F1 | 	add	objptr, #69
1fae8     F2 04 02 F6 | 	mov	_var03, objptr
1faec     45 E4 85 F1 | 	sub	objptr, #69
1faf0     F2 02 02 FB | 	rdlong	_var02, objptr
1faf4     04 02 06 F1 | 	add	_var02, #4
1faf8     01 05 62 FC | 	wrlong	_var03, _var02
1fafc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1fafc     0C E5 85 F1 | 	sub	objptr, #268
1fb00     F2 04 02 FB | 	rdlong	_var03, objptr
1fb04     0A 03 02 F6 | 	mov	_var02, arg02
1fb08     00 03 02 F1 | 	add	_var02, _var01
1fb0c     0A 02 66 F0 | 	shl	_var02, #10
1fb10     09 0B 02 F6 | 	mov	_var06, arg01
1fb14     02 0A 66 F0 | 	shl	_var06, #2
1fb18     05 03 02 F1 | 	add	_var02, _var06
1fb1c     01 05 02 F1 | 	add	_var03, _var02
1fb20     00 00 78 FF 
1fb24     00 04 06 F1 | 	add	_var03, ##-268435456
1fb28     0C E5 05 F1 | 	add	objptr, #268
1fb2c     F2 0A 02 FB | 	rdlong	_var06, objptr
1fb30     05 05 62 FC | 	wrlong	_var03, _var06
1fb34                 | '   repeat
1fb34                 | LR__2541
1fb34     F2 04 02 FB | 	rdlong	_var03, objptr
1fb38     02 03 02 FB | 	rdlong	_var02, _var03
1fb3c     00 02 56 F2 | 	cmps	_var02, #0 wc
1fb40     F0 FF 9F CD |  if_b	jmp	#LR__2541
1fb44     E9 E5 85 F1 | 	sub	objptr, #489
1fb48     01 00 06 F1 | 	add	_var01, #1
1fb4c     10 00 56 F2 | 	cmps	_var01, #16 wc
1fb50     E8 FE 9F CD |  if_b	jmp	#LR__2540
1fb54                 | LR__2542
1fb54                 | _hg010b_spin2_putcharxycgf_ret
1fb54     2D 00 64 FD | 	ret
1fb58                 | 
1fb58                 | ' 
1fb58                 | ' 
1fb58                 | ' '**********************************************************************r***
1fb58                 | ' '                                                                        *
1fb58                 | ' ' Font related functions                                                 *
1fb58                 | ' '                                                                        *
1fb58                 | ' '*************************************************************************
1fb58                 | ' 
1fb58                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1fb58                 | ' 
1fb58                 | ' pub setfontfamily(afontnum)
1fb58                 | _hg010b_spin2_setfontfamily
1fb58                 | ' 
1fb58                 | ' font_family:=afontnum
1fb58     95 E4 05 F1 | 	add	objptr, #149
1fb5c     F2 12 62 FC | 	wrlong	arg01, objptr
1fb60     95 E4 85 F1 | 	sub	objptr, #149
1fb64                 | ' 'if afontnum==8
1fb64                 | ' '  font_ptr:=@amiga_font
1fb64                 | ' 
1fb64                 | ' if afontnum==4
1fb64     04 12 0E F2 | 	cmp	arg01, #4 wz
1fb68                 | '   font_ptr:=@st_font
1fb68     08 00 00 AF 
1fb6c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1fb70     08 E4 05 A1 |  if_e	add	objptr, #8
1fb74     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1fb78     08 E4 85 A1 |  if_e	sub	objptr, #8
1fb7c     08 00 00 AF 
1fb80     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1fb84                 | ' if afontnum==0
1fb84     00 12 0E F2 | 	cmp	arg01, #0 wz
1fb88                 | '   font_ptr:=@vga_font
1fb88     08 E4 05 A1 |  if_e	add	objptr, #8
1fb8c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1fb90     08 E4 85 A1 |  if_e	sub	objptr, #8
1fb94                 | _hg010b_spin2_setfontfamily_ret
1fb94     2D 00 64 FD | 	ret
1fb98                 | 
1fb98                 | ' 
1fb98                 | ' '*************************************************************************
1fb98                 | ' '                                                                        *
1fb98                 | ' '  Cursor functions                                                      *
1fb98                 | ' '                                                                        *
1fb98                 | ' '*************************************************************************
1fb98                 | ' 
1fb98                 | ' 
1fb98                 | ' pub setcursorpos(x,y)
1fb98                 | _hg010b_spin2_setcursorpos
1fb98                 | ' 
1fb98                 | ' ''---------- Set the (x,y) position of cursor
1fb98                 | ' 
1fb98                 | ' cursor_x:=x
1fb98     3C E4 05 F1 | 	add	objptr, #60
1fb9c     F2 12 52 FC | 	wrword	arg01, objptr
1fba0                 | ' cursor_y:=y
1fba0     02 E4 05 F1 | 	add	objptr, #2
1fba4     F2 14 42 FC | 	wrbyte	arg02, objptr
1fba8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fba8     02 E4 85 F1 | 	sub	objptr, #2
1fbac     F2 14 E2 FA | 	rdword	arg02, objptr
1fbb0     02 14 66 F0 | 	shl	arg02, #2
1fbb4     02 E4 05 F1 | 	add	objptr, #2
1fbb8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fbbc     3E E4 85 F1 | 	sub	objptr, #62
1fbc0     04 16 66 F0 | 	shl	arg03, #4
1fbc4     04 16 06 F1 | 	add	arg03, #4
1fbc8     11 12 06 F6 | 	mov	arg01, #17
1fbcc     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1fbd0                 | _hg010b_spin2_setcursorpos_ret
1fbd0     2D 00 64 FD | 	ret
1fbd4                 | 
1fbd4                 | ' 
1fbd4                 | ' pub setcursorx(x)
1fbd4                 | _hg010b_spin2_setcursorx
1fbd4                 | ' cursor_x:=x
1fbd4     3C E4 05 F1 | 	add	objptr, #60
1fbd8     F2 12 52 FC | 	wrword	arg01, objptr
1fbdc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fbdc     F2 14 E2 FA | 	rdword	arg02, objptr
1fbe0     02 14 66 F0 | 	shl	arg02, #2
1fbe4     02 E4 05 F1 | 	add	objptr, #2
1fbe8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fbec     3E E4 85 F1 | 	sub	objptr, #62
1fbf0     04 16 66 F0 | 	shl	arg03, #4
1fbf4     04 16 06 F1 | 	add	arg03, #4
1fbf8     11 12 06 F6 | 	mov	arg01, #17
1fbfc     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1fc00                 | _hg010b_spin2_setcursorx_ret
1fc00     2D 00 64 FD | 	ret
1fc04                 | 
1fc04                 | ' 
1fc04                 | ' pub setcursory(y) 
1fc04                 | _hg010b_spin2_setcursory
1fc04                 | ' cursor_y:=y
1fc04     3E E4 05 F1 | 	add	objptr, #62
1fc08     F2 12 42 FC | 	wrbyte	arg01, objptr
1fc0c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1fc0c     02 E4 85 F1 | 	sub	objptr, #2
1fc10     F2 14 E2 FA | 	rdword	arg02, objptr
1fc14     02 14 66 F0 | 	shl	arg02, #2
1fc18     02 E4 05 F1 | 	add	objptr, #2
1fc1c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fc20     3E E4 85 F1 | 	sub	objptr, #62
1fc24     04 16 66 F0 | 	shl	arg03, #4
1fc28     04 16 06 F1 | 	add	arg03, #4
1fc2c     11 12 06 F6 | 	mov	arg01, #17
1fc30     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1fc34                 | _hg010b_spin2_setcursory_ret
1fc34     2D 00 64 FD | 	ret
1fc38                 | 
1fc38                 | ' 
1fc38                 | ' '*************************************************************************
1fc38                 | ' '                                                                        *
1fc38                 | ' '  VBlank functions                                                      *
1fc38                 | ' '                                                                        *
1fc38                 | ' '*************************************************************************
1fc38                 | ' 
1fc38                 | ' pub waitvbl(amount) | i
1fc38                 | _hg010b_spin2_waitvbl
1fc38     03 4A 05 F6 | 	mov	COUNT_, #3
1fc3c     A8 00 A0 FD | 	call	#pushregs_
1fc40     09 1F 02 F6 | 	mov	local01, arg01
1fc44                 | ' 
1fc44                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1fc44                 | ' 
1fc44                 | ' repeat i from 1 to amount
1fc44     01 20 06 F6 | 	mov	local02, #1
1fc48     01 1E 56 F2 | 	cmps	local01, #1 wc
1fc4c     01 22 86 F6 | 	negc	local03, #1
1fc50     11 1F 02 F1 | 	add	local01, local03
1fc54                 | LR__2550
1fc54                 | '   repeat until vblank==0
1fc54                 | LR__2551
1fc54     49 E4 05 F1 | 	add	objptr, #73
1fc58     F2 12 0A FB | 	rdlong	arg01, objptr wz
1fc5c     49 E4 85 F1 | 	sub	objptr, #73
1fc60     0C 00 90 AD |  if_e	jmp	#LR__2552
1fc64                 | '     waitus(100)
1fc64     64 12 06 F6 | 	mov	arg01, #100
1fc68     78 1C B0 FD | 	call	#__system___waitus
1fc6c     E4 FF 9F FD | 	jmp	#LR__2551
1fc70                 | LR__2552
1fc70                 | '   repeat until vblank==1
1fc70                 | LR__2553
1fc70     49 E4 05 F1 | 	add	objptr, #73
1fc74     F2 12 02 FB | 	rdlong	arg01, objptr
1fc78     49 E4 85 F1 | 	sub	objptr, #73
1fc7c     01 12 0E F2 | 	cmp	arg01, #1 wz
1fc80     0C 00 90 AD |  if_e	jmp	#LR__2554
1fc84                 | '     waitus(100)
1fc84     64 12 06 F6 | 	mov	arg01, #100
1fc88     58 1C B0 FD | 	call	#__system___waitus
1fc8c     E0 FF 9F FD | 	jmp	#LR__2553
1fc90                 | LR__2554
1fc90     11 21 02 F1 | 	add	local02, local03
1fc94     0F 21 0A F2 | 	cmp	local02, local01 wz
1fc98     B8 FF 9F 5D |  if_ne	jmp	#LR__2550
1fc9c     A7 F0 03 F6 | 	mov	ptra, fp
1fca0     B2 00 A0 FD | 	call	#popregs_
1fca4                 | _hg010b_spin2_waitvbl_ret
1fca4     2D 00 64 FD | 	ret
1fca8                 | 
1fca8                 | ' 
1fca8                 | ' 
1fca8                 | ' pub cls(fc,bc)   :c,i
1fca8                 | _hg010b_spin2_cls
1fca8     02 4A 05 F6 | 	mov	COUNT_, #2
1fcac     A8 00 A0 FD | 	call	#pushregs_
1fcb0     09 1F 02 F6 | 	mov	local01, arg01
1fcb4     0A 21 02 F6 | 	mov	local02, arg02
1fcb8                 | ' 
1fcb8                 | ' c:=bc
1fcb8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1fcb8     DD E4 05 F1 | 	add	objptr, #221
1fcbc     F2 12 02 FB | 	rdlong	arg01, objptr
1fcc0     A5 E4 85 F1 | 	sub	objptr, #165
1fcc4     F2 16 02 FB | 	rdlong	arg03, objptr
1fcc8     02 16 66 F0 | 	shl	arg03, #2
1fccc     10 15 02 F6 | 	mov	arg02, local02
1fcd0     00 18 06 F6 | 	mov	arg04, #0
1fcd4     01 1A 06 F6 | 	mov	arg05, #1
1fcd8     0B 00 00 FF 
1fcdc     94 E4 05 F1 | 	add	objptr, ##5780
1fce0     98 0D B0 FD | 	call	#_psram_spin2_fill
1fce4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1fce4     0B 00 00 FF 
1fce8     C8 E4 85 F1 | 	sub	objptr, ##5832
1fcec     F2 12 02 FB | 	rdlong	arg01, objptr
1fcf0     04 E4 85 F1 | 	sub	objptr, #4
1fcf4     F2 16 02 FB | 	rdlong	arg03, objptr
1fcf8     09 17 82 F1 | 	sub	arg03, arg01
1fcfc     20 14 06 F6 | 	mov	arg02, #32
1fd00     00 18 06 F6 | 	mov	arg04, #0
1fd04     01 1A 06 F6 | 	mov	arg05, #1
1fd08     0B 00 00 FF 
1fd0c     CC E4 05 F1 | 	add	objptr, ##5836
1fd10     68 0D B0 FD | 	call	#_psram_spin2_fill
1fd14                 | ' setwritecolors(fc,bc)
1fd14                 | ' 
1fd14                 | ' write_color:=ff
1fd14     0B 00 00 FF 
1fd18     8B E4 85 F1 | 	sub	objptr, ##5771
1fd1c     F2 1E 62 FC | 	wrlong	local01, objptr
1fd20                 | ' write_background:=bb
1fd20     04 E4 05 F1 | 	add	objptr, #4
1fd24     F2 20 62 FC | 	wrlong	local02, objptr
1fd28                 | ' cursor_x:=0
1fd28     09 E4 85 F1 | 	sub	objptr, #9
1fd2c     F2 00 58 FC | 	wrword	#0, objptr
1fd30                 | ' cursor_y:=0
1fd30     02 E4 05 F1 | 	add	objptr, #2
1fd34     F2 00 48 FC | 	wrbyte	#0, objptr
1fd38                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fd38     02 E4 85 F1 | 	sub	objptr, #2
1fd3c     F2 14 E2 FA | 	rdword	arg02, objptr
1fd40     02 14 66 F0 | 	shl	arg02, #2
1fd44     02 E4 05 F1 | 	add	objptr, #2
1fd48     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fd4c     3E E4 85 F1 | 	sub	objptr, #62
1fd50     04 16 66 F0 | 	shl	arg03, #4
1fd54     04 16 06 F1 | 	add	arg03, #4
1fd58     11 12 06 F6 | 	mov	arg01, #17
1fd5c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1fd60                 | ' setcursorcolor(fc)
1fd60     0F 13 02 F6 | 	mov	arg01, local01
1fd64     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1fd68     10 FB 01 F6 | 	mov	result1, local02
1fd6c     00 FC 05 F6 | 	mov	result2, #0
1fd70     A7 F0 03 F6 | 	mov	ptra, fp
1fd74     B2 00 A0 FD | 	call	#popregs_
1fd78                 | _hg010b_spin2_cls_ret
1fd78     2D 00 64 FD | 	ret
1fd7c                 | 
1fd7c                 | ' 
1fd7c                 | ' ''---------- Output a char at the cursor position, move the cursor 
1fd7c                 | ' 
1fd7c                 | ' pub putchar(achar) | c,x,y,l,newcpl
1fd7c                 | _hg010b_spin2_putchar
1fd7c     02 4A 05 F6 | 	mov	COUNT_, #2
1fd80     A8 00 A0 FD | 	call	#pushregs_
1fd84     09 1F 02 F6 | 	mov	local01, arg01
1fd88                 | ' 
1fd88                 | ' if achar==10
1fd88     0A 1E 0E F2 | 	cmp	local01, #10 wz
1fd8c                 | '   crlf()
1fd8c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1fd90                 | ' if achar==9
1fd90     09 1E 0E F2 | 	cmp	local01, #9 wz
1fd94     18 00 90 5D |  if_ne	jmp	#LR__2560
1fd98                 | '   cursor_x:=(cursor_x& %11110000)+16
1fd98     3C E4 05 F1 | 	add	objptr, #60
1fd9c     F2 16 E2 FA | 	rdword	arg03, objptr
1fda0     F0 16 06 F5 | 	and	arg03, #240
1fda4     10 16 06 F1 | 	add	arg03, #16
1fda8     F2 16 52 FC | 	wrword	arg03, objptr
1fdac     3C E4 85 F1 | 	sub	objptr, #60
1fdb0                 | LR__2560
1fdb0                 | '   
1fdb0                 | ' if (achar<>9) && (achar<>10) 
1fdb0     09 1E 0E F2 | 	cmp	local01, #9 wz
1fdb4     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1fdb8     A8 00 90 AD |  if_e	jmp	#LR__2561
1fdbc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1fdbc     3C E4 05 F1 | 	add	objptr, #60
1fdc0     F2 12 E2 FA | 	rdword	arg01, objptr
1fdc4     02 E4 05 F1 | 	add	objptr, #2
1fdc8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fdcc     04 14 66 F0 | 	shl	arg02, #4
1fdd0     04 14 06 F1 | 	add	arg02, #4
1fdd4     03 E4 05 F1 | 	add	objptr, #3
1fdd8     F2 18 02 FB | 	rdlong	arg04, objptr
1fddc     04 E4 05 F1 | 	add	objptr, #4
1fde0     F2 1A 02 FB | 	rdlong	arg05, objptr
1fde4     45 E4 85 F1 | 	sub	objptr, #69
1fde8     0F 17 02 F6 | 	mov	arg03, local01
1fdec     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1fdf0     04 E4 05 F1 | 	add	objptr, #4
1fdf4     F2 12 02 FB | 	rdlong	arg01, objptr
1fdf8     10 00 00 FF 
1fdfc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fe00     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fe04     3A E4 05 F1 | 	add	objptr, #58
1fe08     F2 1A C2 FA | 	rdbyte	arg05, objptr
1fe0c     0D 17 02 FD | 	qmul	arg03, arg05
1fe10                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1fe10     10 00 00 FF 
1fe14     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fe18     02 E4 85 F1 | 	sub	objptr, #2
1fe1c     F2 20 E2 FA | 	rdword	local02, objptr
1fe20     01 20 46 F0 | 	shr	local02, #1
1fe24     0F 15 02 F6 | 	mov	arg02, local01
1fe28     01 16 06 F6 | 	mov	arg03, #1
1fe2c     00 18 06 F6 | 	mov	arg04, #0
1fe30     01 1A 06 F6 | 	mov	arg05, #1
1fe34     0B 00 00 FF 
1fe38     90 E4 05 F1 | 	add	objptr, ##5776
1fe3c     18 1E 62 FD | 	getqx	local01
1fe40     10 1F 02 F1 | 	add	local01, local02
1fe44     0F 13 02 F1 | 	add	arg01, local01
1fe48     30 0C B0 FD | 	call	#_psram_spin2_fill
1fe4c                 | '   cursor_x+=2
1fe4c     0B 00 00 FF 
1fe50     90 E4 85 F1 | 	sub	objptr, ##5776
1fe54     F2 20 E2 FA | 	rdword	local02, objptr
1fe58     02 20 06 F1 | 	add	local02, #2
1fe5c     F2 20 52 FC | 	wrword	local02, objptr
1fe60     3C E4 85 F1 | 	sub	objptr, #60
1fe64                 | LR__2561
1fe64                 | ' 
1fe64                 | ' if cursor_x>=256
1fe64     3C E4 05 F1 | 	add	objptr, #60
1fe68     F2 20 E2 FA | 	rdword	local02, objptr
1fe6c     3C E4 85 F1 | 	sub	objptr, #60
1fe70     00 21 56 F2 | 	cmps	local02, #256 wc
1fe74     64 00 90 CD |  if_b	jmp	#LR__2563
1fe78                 | '   cursor_x:=0
1fe78     3C E4 05 F1 | 	add	objptr, #60
1fe7c     F2 00 58 FC | 	wrword	#0, objptr
1fe80                 | '   cursor_y+=1
1fe80     02 E4 05 F1 | 	add	objptr, #2
1fe84     F2 20 C2 FA | 	rdbyte	local02, objptr
1fe88     01 20 06 F1 | 	add	local02, #1
1fe8c     F2 20 42 FC | 	wrbyte	local02, objptr
1fe90                 | '   if cursor_y>st_lines-1
1fe90     C3 E4 05 F1 | 	add	objptr, #195
1fe94     F2 20 02 FB | 	rdlong	local02, objptr
1fe98     01 20 86 F1 | 	sub	local02, #1
1fe9c     C3 E4 85 F1 | 	sub	objptr, #195
1fea0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fea4     3E E4 85 F1 | 	sub	objptr, #62
1fea8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1feac     2C 00 90 ED |  if_be	jmp	#LR__2562
1feb0                 | '     scrollup2()
1feb0     00 12 06 F6 | 	mov	arg01, #0
1feb4     01 00 00 FF 
1feb8     58 14 06 F6 | 	mov	arg02, ##600
1febc     10 16 06 F6 | 	mov	arg03, #16
1fec0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1fec4                 | '     cursor_y:=st_lines-1
1fec4     01 E5 05 F1 | 	add	objptr, #257
1fec8     F2 20 02 FB | 	rdlong	local02, objptr
1fecc     01 20 86 F1 | 	sub	local02, #1
1fed0     C3 E4 85 F1 | 	sub	objptr, #195
1fed4     F2 20 42 FC | 	wrbyte	local02, objptr
1fed8     3E E4 85 F1 | 	sub	objptr, #62
1fedc                 | LR__2562
1fedc                 | LR__2563
1fedc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fedc     3C E4 05 F1 | 	add	objptr, #60
1fee0     F2 14 E2 FA | 	rdword	arg02, objptr
1fee4     02 14 66 F0 | 	shl	arg02, #2
1fee8     02 E4 05 F1 | 	add	objptr, #2
1feec     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fef0     3E E4 85 F1 | 	sub	objptr, #62
1fef4     04 16 66 F0 | 	shl	arg03, #4
1fef8     04 16 06 F1 | 	add	arg03, #4
1fefc     11 12 06 F6 | 	mov	arg01, #17
1ff00     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1ff04     A7 F0 03 F6 | 	mov	ptra, fp
1ff08     B2 00 A0 FD | 	call	#popregs_
1ff0c                 | _hg010b_spin2_putchar_ret
1ff0c     2D 00 64 FD | 	ret
1ff10                 | 
1ff10                 | '     
1ff10                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1ff10                 | ' 
1ff10                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1ff10                 | _hg010b_spin2_putchar2
1ff10     02 4A 05 F6 | 	mov	COUNT_, #2
1ff14     A8 00 A0 FD | 	call	#pushregs_
1ff18     09 1F 02 F6 | 	mov	local01, arg01
1ff1c                 | ' 
1ff1c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1ff1c     3C E4 05 F1 | 	add	objptr, #60
1ff20     F2 12 E2 FA | 	rdword	arg01, objptr
1ff24     02 E4 05 F1 | 	add	objptr, #2
1ff28     F2 14 C2 FA | 	rdbyte	arg02, objptr
1ff2c     04 14 66 F0 | 	shl	arg02, #4
1ff30     04 14 06 F1 | 	add	arg02, #4
1ff34     03 E4 05 F1 | 	add	objptr, #3
1ff38     F2 18 02 FB | 	rdlong	arg04, objptr
1ff3c     04 E4 05 F1 | 	add	objptr, #4
1ff40     F2 1A 02 FB | 	rdlong	arg05, objptr
1ff44     45 E4 85 F1 | 	sub	objptr, #69
1ff48     0F 17 02 F6 | 	mov	arg03, local01
1ff4c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1ff50     04 E4 05 F1 | 	add	objptr, #4
1ff54     F2 12 02 FB | 	rdlong	arg01, objptr
1ff58     10 00 00 FF 
1ff5c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1ff60     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1ff64     3A E4 05 F1 | 	add	objptr, #58
1ff68     F2 1A C2 FA | 	rdbyte	arg05, objptr
1ff6c     0D 17 02 FD | 	qmul	arg03, arg05
1ff70                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1ff70     10 00 00 FF 
1ff74     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1ff78     02 E4 85 F1 | 	sub	objptr, #2
1ff7c     F2 20 E2 FA | 	rdword	local02, objptr
1ff80     01 20 46 F0 | 	shr	local02, #1
1ff84     0F 15 02 F6 | 	mov	arg02, local01
1ff88     01 16 06 F6 | 	mov	arg03, #1
1ff8c     00 18 06 F6 | 	mov	arg04, #0
1ff90     01 1A 06 F6 | 	mov	arg05, #1
1ff94     0B 00 00 FF 
1ff98     90 E4 05 F1 | 	add	objptr, ##5776
1ff9c     18 1E 62 FD | 	getqx	local01
1ffa0     10 1F 02 F1 | 	add	local01, local02
1ffa4     0F 13 02 F1 | 	add	arg01, local01
1ffa8     D0 0A B0 FD | 	call	#_psram_spin2_fill
1ffac                 | ' 
1ffac                 | ' cursor_x+=2
1ffac     0B 00 00 FF 
1ffb0     90 E4 85 F1 | 	sub	objptr, ##5776
1ffb4     F2 20 E2 FA | 	rdword	local02, objptr
1ffb8     02 20 06 F1 | 	add	local02, #2
1ffbc     F2 20 52 FC | 	wrword	local02, objptr
1ffc0                 | ' if cursor_x>=256
1ffc0     F2 20 E2 FA | 	rdword	local02, objptr
1ffc4     3C E4 85 F1 | 	sub	objptr, #60
1ffc8     00 21 56 F2 | 	cmps	local02, #256 wc
1ffcc     64 00 90 CD |  if_b	jmp	#LR__2571
1ffd0                 | '   cursor_x:=0
1ffd0     3C E4 05 F1 | 	add	objptr, #60
1ffd4     F2 00 58 FC | 	wrword	#0, objptr
1ffd8                 | '   cursor_y+=1
1ffd8     02 E4 05 F1 | 	add	objptr, #2
1ffdc     F2 20 C2 FA | 	rdbyte	local02, objptr
1ffe0     01 20 06 F1 | 	add	local02, #1
1ffe4     F2 20 42 FC | 	wrbyte	local02, objptr
1ffe8                 | '   if cursor_y>st_lines-1
1ffe8     C3 E4 05 F1 | 	add	objptr, #195
1ffec     F2 20 02 FB | 	rdlong	local02, objptr
1fff0     01 20 86 F1 | 	sub	local02, #1
1fff4     C3 E4 85 F1 | 	sub	objptr, #195
1fff8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fffc     3E E4 85 F1 | 	sub	objptr, #62
20000     10 17 5A F2 | 	cmps	arg03, local02 wcz
20004     2C 00 90 ED |  if_be	jmp	#LR__2570
20008                 | '     scrollup2()
20008     00 12 06 F6 | 	mov	arg01, #0
2000c     01 00 00 FF 
20010     58 14 06 F6 | 	mov	arg02, ##600
20014     10 16 06 F6 | 	mov	arg03, #16
20018     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2001c                 | '     cursor_y:=st_lines-1
2001c     01 E5 05 F1 | 	add	objptr, #257
20020     F2 20 02 FB | 	rdlong	local02, objptr
20024     01 20 86 F1 | 	sub	local02, #1
20028     C3 E4 85 F1 | 	sub	objptr, #195
2002c     F2 20 42 FC | 	wrbyte	local02, objptr
20030     3E E4 85 F1 | 	sub	objptr, #62
20034                 | LR__2570
20034                 | LR__2571
20034                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
20034     3C E4 05 F1 | 	add	objptr, #60
20038     F2 14 E2 FA | 	rdword	arg02, objptr
2003c     02 14 66 F0 | 	shl	arg02, #2
20040     02 E4 05 F1 | 	add	objptr, #2
20044     F2 16 C2 FA | 	rdbyte	arg03, objptr
20048     3E E4 85 F1 | 	sub	objptr, #62
2004c     04 16 66 F0 | 	shl	arg03, #4
20050     04 16 06 F1 | 	add	arg03, #4
20054     11 12 06 F6 | 	mov	arg01, #17
20058     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2005c     A7 F0 03 F6 | 	mov	ptra, fp
20060     B2 00 A0 FD | 	call	#popregs_
20064                 | _hg010b_spin2_putchar2_ret
20064     2D 00 64 FD | 	ret
20068                 | 
20068                 | ' ''--------- Output a string at the cursor position, move the cursor  
20068                 | ' 
20068                 | ' pub write(text) | iii,c,ncx,ncy
20068                 | _hg010b_spin2_write
20068     04 4A 05 F6 | 	mov	COUNT_, #4
2006c     A8 00 A0 FD | 	call	#pushregs_
20070     09 1F 02 F6 | 	mov	local01, arg01
20074                 | ' 
20074                 | ' repeat iii from 0 to strsize(text)-1
20074     00 20 06 F6 | 	mov	local02, #0
20078     0F 13 02 F6 | 	mov	arg01, local01
2007c     09 23 02 F6 | 	mov	local03, arg01
20080     97 06 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
20084                 | LR__2580
20084     11 FB C9 FA | 	rdbyte	result1, local03 wz
20088     01 22 06 51 |  if_ne	add	local03, #1
2008c     F4 FF 9F 5D |  if_ne	jmp	#LR__2580
20090                 | LR__2581
20090     09 23 82 F1 | 	sub	local03, arg01
20094     01 22 86 F1 | 	sub	local03, #1
20098     00 22 56 F2 | 	cmps	local03, #0 wc
2009c     01 24 86 F6 | 	negc	local04, #1
200a0     12 23 02 F1 | 	add	local03, local04
200a4                 | LR__2582
200a4                 | '   putchar2(byte[text+iii])
200a4     0F 13 02 F6 | 	mov	arg01, local01
200a8     10 13 02 F1 | 	add	arg01, local02
200ac     09 13 C2 FA | 	rdbyte	arg01, arg01
200b0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
200b4     12 21 02 F1 | 	add	local02, local04
200b8     11 21 0A F2 | 	cmp	local02, local03 wz
200bc     E4 FF 9F 5D |  if_ne	jmp	#LR__2582
200c0     A7 F0 03 F6 | 	mov	ptra, fp
200c4     B2 00 A0 FD | 	call	#popregs_
200c8                 | _hg010b_spin2_write_ret
200c8     2D 00 64 FD | 	ret
200cc                 | 
200cc                 | '    
200cc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
200cc                 | ' 
200cc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
200cc                 | _hg010b_spin2_scrollup2
200cc     03 4A 05 F6 | 	mov	COUNT_, #3
200d0     A8 00 A0 FD | 	call	#pushregs_
200d4                 | ' 	
200d4                 | ' repeat i from 4 to 579 
200d4     04 1E 06 F6 | 	mov	local01, #4
200d8                 | LR__2590
200d8     F9 E4 05 F1 | 	add	objptr, #249
200dc     F2 1A 02 FB | 	rdlong	arg05, objptr
200e0     1C E4 85 F1 | 	sub	objptr, #28
200e4     F2 14 02 FB | 	rdlong	arg02, objptr
200e8     0F 19 02 F6 | 	mov	arg04, local01
200ec     10 18 06 F1 | 	add	arg04, #16
200f0     02 18 66 F0 | 	shl	arg04, #2
200f4     14 E4 05 F1 | 	add	objptr, #20
200f8     F2 16 02 FB | 	rdlong	arg03, objptr
200fc     0B 19 02 FD | 	qmul	arg04, arg03
20100                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
20100     F6 03 00 FF 
20104     00 12 06 F6 | 	mov	arg01, ##519168
20108     0D 13 82 F1 | 	sub	arg01, arg05
2010c     02 16 66 F0 | 	shl	arg03, #2
20110     0A 00 00 FF 
20114     DB E5 05 F1 | 	add	objptr, ##5595
20118     18 1A 62 FD | 	getqx	arg05
2011c     0D 15 02 F1 | 	add	arg02, arg05
20120     20 08 B0 FD | 	call	#_psram_spin2_read1
20124     0A 00 00 FF 
20128     D3 E5 85 F1 | 	sub	objptr, ##5587
2012c     F2 1A 02 FB | 	rdlong	arg05, objptr
20130     1C E4 85 F1 | 	sub	objptr, #28
20134     F2 14 02 FB | 	rdlong	arg02, objptr
20138     0F 19 02 F6 | 	mov	arg04, local01
2013c     02 18 66 F0 | 	shl	arg04, #2
20140     14 E4 05 F1 | 	add	objptr, #20
20144     F2 16 02 FB | 	rdlong	arg03, objptr
20148     0B 19 02 FD | 	qmul	arg04, arg03
2014c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2014c     F6 03 00 FF 
20150     00 12 06 F6 | 	mov	arg01, ##519168
20154     0D 13 82 F1 | 	sub	arg01, arg05
20158     02 16 66 F0 | 	shl	arg03, #2
2015c     0A 00 00 FF 
20160     DB E5 05 F1 | 	add	objptr, ##5595
20164     18 1A 62 FD | 	getqx	arg05
20168     0D 15 02 F1 | 	add	arg02, arg05
2016c     70 08 B0 FD | 	call	#_psram_spin2_write
20170     0B 00 00 FF 
20174     CC E4 85 F1 | 	sub	objptr, ##5836
20178     01 1E 06 F1 | 	add	local01, #1
2017c     01 00 00 FF 
20180     44 1E 16 F2 | 	cmp	local01, ##580 wc
20184     50 FF 9F CD |  if_b	jmp	#LR__2590
20188                 | ' 
20188                 | ' repeat i from 580 to 599
20188     01 00 00 FF 
2018c     44 1E 06 F6 | 	mov	local01, ##580
20190                 | LR__2591
20190                 | '    fastline(0,1023,i,write_background)   
20190     45 E4 05 F1 | 	add	objptr, #69
20194     F2 18 02 FB | 	rdlong	arg04, objptr
20198     45 E4 85 F1 | 	sub	objptr, #69
2019c     00 12 06 F6 | 	mov	arg01, #0
201a0     09 14 CE F9 | 	bmask	arg02, #9
201a4     0F 17 02 F6 | 	mov	arg03, local01
201a8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
201ac     01 1E 06 F1 | 	add	local01, #1
201b0     01 00 00 FF 
201b4     58 1E 16 F2 | 	cmp	local01, ##600 wc
201b8     D4 FF 9F CD |  if_b	jmp	#LR__2591
201bc                 | ' repeat i from 0 to 3
201bc     00 1E 06 F6 | 	mov	local01, #0
201c0                 | LR__2592
201c0                 | '    fastline(0,1023,i,write_background)      
201c0     45 E4 05 F1 | 	add	objptr, #69
201c4     F2 18 02 FB | 	rdlong	arg04, objptr
201c8     45 E4 85 F1 | 	sub	objptr, #69
201cc     00 12 06 F6 | 	mov	arg01, #0
201d0     09 14 CE F9 | 	bmask	arg02, #9
201d4     0F 17 02 F6 | 	mov	arg03, local01
201d8     90 EF BF FD | 	call	#_hg010b_spin2_fastline
201dc     01 1E 06 F1 | 	add	local01, #1
201e0     04 1E 56 F2 | 	cmps	local01, #4 wc
201e4     D8 FF 9F CD |  if_b	jmp	#LR__2592
201e8                 | ' 
201e8                 | ' repeat i from 0 to 35
201e8     00 1E 06 F6 | 	mov	local01, #0
201ec                 | LR__2593
201ec     0F 1B 02 F6 | 	mov	arg05, local01
201f0     01 1A 06 F1 | 	add	arg05, #1
201f4     10 00 00 FF 
201f8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
201fc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20200     0B 1B 02 FD | 	qmul	arg05, arg03
20204                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
20204     F6 03 00 FF 
20208     00 12 06 F6 | 	mov	arg01, ##519168
2020c     F9 E4 05 F1 | 	add	objptr, #249
20210     F2 1A 02 FB | 	rdlong	arg05, objptr
20214     0D 13 82 F1 | 	sub	arg01, arg05
20218     F5 E4 85 F1 | 	sub	objptr, #245
2021c     F2 14 02 FB | 	rdlong	arg02, objptr
20220     10 00 00 FF 
20224     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20228     0B 00 00 FF 
2022c     C8 E4 05 F1 | 	add	objptr, ##5832
20230     18 1A 62 FD | 	getqx	arg05
20234     0D 15 02 F1 | 	add	arg02, arg05
20238     08 07 B0 FD | 	call	#_psram_spin2_read1
2023c     10 00 00 FF 
20240     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20244     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20248     0B 1F 02 FD | 	qmul	local01, arg03
2024c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2024c     F6 03 00 FF 
20250     00 12 06 F6 | 	mov	arg01, ##519168
20254     0A 00 00 FF 
20258     D3 E5 85 F1 | 	sub	objptr, ##5587
2025c     F2 1A 02 FB | 	rdlong	arg05, objptr
20260     0D 13 82 F1 | 	sub	arg01, arg05
20264     F5 E4 85 F1 | 	sub	objptr, #245
20268     F2 14 02 FB | 	rdlong	arg02, objptr
2026c     10 00 00 FF 
20270     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20274     0B 00 00 FF 
20278     C8 E4 05 F1 | 	add	objptr, ##5832
2027c     18 1A 62 FD | 	getqx	arg05
20280     0D 15 02 F1 | 	add	arg02, arg05
20284     58 07 B0 FD | 	call	#_psram_spin2_write
20288     0B 00 00 FF 
2028c     CC E4 85 F1 | 	sub	objptr, ##5836
20290     01 1E 06 F1 | 	add	local01, #1
20294     24 1E 56 F2 | 	cmps	local01, #36 wc
20298     50 FF 9F CD |  if_b	jmp	#LR__2593
2029c                 | ' repeat i from 0 to timings[7]-1
2029c     00 1E 06 F6 | 	mov	local01, #0
202a0     10 00 00 FF 
202a4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
202a8     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
202ac     10 00 00 FF 
202b0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
202b4     01 20 86 F1 | 	sub	local02, #1
202b8     00 20 56 F2 | 	cmps	local02, #0 wc
202bc     01 22 86 F6 | 	negc	local03, #1
202c0     11 21 02 F1 | 	add	local02, local03
202c4                 | LR__2594
202c4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
202c4     04 E4 05 F1 | 	add	objptr, #4
202c8     F2 12 02 FB | 	rdlong	arg01, objptr
202cc     10 00 00 FF 
202d0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
202d4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
202d8     10 00 00 FF 
202dc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
202e0     0D 19 02 F6 | 	mov	arg04, arg05
202e4     03 18 66 F0 | 	shl	arg04, #3
202e8     0D 19 02 F1 | 	add	arg04, arg05
202ec     02 18 66 F0 | 	shl	arg04, #2
202f0     0F 19 02 F1 | 	add	arg04, local01
202f4     0C 13 02 F1 | 	add	arg01, arg04
202f8     20 14 06 F6 | 	mov	arg02, #32
202fc     01 16 06 F6 | 	mov	arg03, #1
20300     00 18 06 F6 | 	mov	arg04, #0
20304     01 1A 06 F6 | 	mov	arg05, #1
20308     0B 00 00 FF 
2030c     C8 E4 05 F1 | 	add	objptr, ##5832
20310     68 07 B0 FD | 	call	#_psram_spin2_fill
20314     0B 00 00 FF 
20318     CC E4 85 F1 | 	sub	objptr, ##5836
2031c     11 1F 02 F1 | 	add	local01, local03
20320     10 1F 0A F2 | 	cmp	local01, local02 wz
20324     9C FF 9F 5D |  if_ne	jmp	#LR__2594
20328     A7 F0 03 F6 | 	mov	ptra, fp
2032c     B2 00 A0 FD | 	call	#popregs_
20330                 | _hg010b_spin2_scrollup2_ret
20330     2D 00 64 FD | 	ret
20334                 | 
20334                 | '  
20334                 | ' ''----------- Scroll the screen one line down 
20334                 | ' 
20334                 | ' pub scrolldown(start=0) | i
20334                 | _hg010b_spin2_scrolldown
20334     05 4A 05 F6 | 	mov	COUNT_, #5
20338     A8 00 A0 FD | 	call	#pushregs_
2033c     09 1F 02 F6 | 	mov	local01, arg01
20340                 | ' 
20340                 | ' repeat i from 579 to (start*16)+4
20340     01 00 00 FF 
20344     43 20 06 F6 | 	mov	local02, ##579
20348     0F 23 02 F6 | 	mov	local03, local01
2034c     04 22 66 F0 | 	shl	local03, #4
20350     04 22 06 F1 | 	add	local03, #4
20354     01 00 00 FF 
20358     43 22 56 F2 | 	cmps	local03, ##579 wc
2035c     01 24 86 F6 | 	negc	local04, #1
20360     12 27 02 F6 | 	mov	local05, local04
20364     12 23 02 F1 | 	add	local03, local04
20368                 | LR__2600
20368     F9 E4 05 F1 | 	add	objptr, #249
2036c     F2 24 02 FB | 	rdlong	local04, objptr
20370     1C E4 85 F1 | 	sub	objptr, #28
20374     F2 14 02 FB | 	rdlong	arg02, objptr
20378     10 1B 02 F6 | 	mov	arg05, local02
2037c     02 1A 66 F0 | 	shl	arg05, #2
20380     14 E4 05 F1 | 	add	objptr, #20
20384     F2 16 02 FB | 	rdlong	arg03, objptr
20388     0B 1B 02 FD | 	qmul	arg05, arg03
2038c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2038c     F6 03 00 FF 
20390     00 12 06 F6 | 	mov	arg01, ##519168
20394     12 13 82 F1 | 	sub	arg01, local04
20398     02 16 66 F0 | 	shl	arg03, #2
2039c     0A 00 00 FF 
203a0     DB E5 05 F1 | 	add	objptr, ##5595
203a4     18 24 62 FD | 	getqx	local04
203a8     12 15 02 F1 | 	add	arg02, local04
203ac     94 05 B0 FD | 	call	#_psram_spin2_read1
203b0     0A 00 00 FF 
203b4     D3 E5 85 F1 | 	sub	objptr, ##5587
203b8     F2 24 02 FB | 	rdlong	local04, objptr
203bc     1C E4 85 F1 | 	sub	objptr, #28
203c0     F2 14 02 FB | 	rdlong	arg02, objptr
203c4     10 1B 02 F6 | 	mov	arg05, local02
203c8     10 1A 06 F1 | 	add	arg05, #16
203cc     02 1A 66 F0 | 	shl	arg05, #2
203d0     14 E4 05 F1 | 	add	objptr, #20
203d4     F2 16 02 FB | 	rdlong	arg03, objptr
203d8     0B 1B 02 FD | 	qmul	arg05, arg03
203dc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
203dc     F6 03 00 FF 
203e0     00 12 06 F6 | 	mov	arg01, ##519168
203e4     12 13 82 F1 | 	sub	arg01, local04
203e8     02 16 66 F0 | 	shl	arg03, #2
203ec     0A 00 00 FF 
203f0     DB E5 05 F1 | 	add	objptr, ##5595
203f4     18 24 62 FD | 	getqx	local04
203f8     12 15 02 F1 | 	add	arg02, local04
203fc     E0 05 B0 FD | 	call	#_psram_spin2_write
20400     0B 00 00 FF 
20404     CC E4 85 F1 | 	sub	objptr, ##5836
20408     13 21 02 F1 | 	add	local02, local05
2040c     11 21 0A F2 | 	cmp	local02, local03 wz
20410     54 FF 9F 5D |  if_ne	jmp	#LR__2600
20414                 | ' 
20414                 | ' repeat i from (start*16)+4 to (start*16)+19
20414     0F 21 02 F6 | 	mov	local02, local01
20418     04 20 66 F0 | 	shl	local02, #4
2041c     04 20 06 F1 | 	add	local02, #4
20420     0F 27 02 F6 | 	mov	local05, local01
20424     04 26 66 F0 | 	shl	local05, #4
20428     13 26 06 F1 | 	add	local05, #19
2042c     0F 25 02 F6 | 	mov	local04, local01
20430     04 24 66 F0 | 	shl	local04, #4
20434     04 24 06 F1 | 	add	local04, #4
20438     12 27 52 F2 | 	cmps	local05, local04 wc
2043c     01 24 86 F6 | 	negc	local04, #1
20440     12 23 02 F6 | 	mov	local03, local04
20444     12 27 02 F1 | 	add	local05, local04
20448                 | LR__2601
20448                 | '    fastline(0,1023,i,write_background)    
20448     45 E4 05 F1 | 	add	objptr, #69
2044c     F2 18 02 FB | 	rdlong	arg04, objptr
20450     45 E4 85 F1 | 	sub	objptr, #69
20454     00 12 06 F6 | 	mov	arg01, #0
20458     09 14 CE F9 | 	bmask	arg02, #9
2045c     10 17 02 F6 | 	mov	arg03, local02
20460     08 ED BF FD | 	call	#_hg010b_spin2_fastline
20464     11 21 02 F1 | 	add	local02, local03
20468     13 21 0A F2 | 	cmp	local02, local05 wz
2046c     D8 FF 9F 5D |  if_ne	jmp	#LR__2601
20470                 | '    
20470                 | ' repeat i from 35 to start
20470     23 20 06 F6 | 	mov	local02, #35
20474     23 1E 56 F2 | 	cmps	local01, #35 wc
20478     01 24 86 F6 | 	negc	local04, #1
2047c     0F 27 02 F6 | 	mov	local05, local01
20480     12 27 02 F1 | 	add	local05, local04
20484                 | LR__2602
20484                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
20484     F6 03 00 FF 
20488     00 12 06 F6 | 	mov	arg01, ##519168
2048c     F9 E4 05 F1 | 	add	objptr, #249
20490     F2 22 02 FB | 	rdlong	local03, objptr
20494     11 13 82 F1 | 	sub	arg01, local03
20498     F5 E4 85 F1 | 	sub	objptr, #245
2049c     F2 14 02 FB | 	rdlong	arg02, objptr
204a0     10 23 02 F6 | 	mov	local03, local02
204a4     07 22 66 F0 | 	shl	local03, #7
204a8     11 15 02 F1 | 	add	arg02, local03
204ac     80 16 06 F6 | 	mov	arg03, #128
204b0     0B 00 00 FF 
204b4     C8 E4 05 F1 | 	add	objptr, ##5832
204b8     88 04 B0 FD | 	call	#_psram_spin2_read1
204bc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
204bc     F6 03 00 FF 
204c0     00 12 06 F6 | 	mov	arg01, ##519168
204c4     0A 00 00 FF 
204c8     D3 E5 85 F1 | 	sub	objptr, ##5587
204cc     F2 22 02 FB | 	rdlong	local03, objptr
204d0     11 13 82 F1 | 	sub	arg01, local03
204d4     F5 E4 85 F1 | 	sub	objptr, #245
204d8     F2 14 02 FB | 	rdlong	arg02, objptr
204dc     10 23 02 F6 | 	mov	local03, local02
204e0     01 22 06 F1 | 	add	local03, #1
204e4     07 22 66 F0 | 	shl	local03, #7
204e8     11 15 02 F1 | 	add	arg02, local03
204ec     80 16 06 F6 | 	mov	arg03, #128
204f0     0B 00 00 FF 
204f4     C8 E4 05 F1 | 	add	objptr, ##5832
204f8     E4 04 B0 FD | 	call	#_psram_spin2_write
204fc     0B 00 00 FF 
20500     CC E4 85 F1 | 	sub	objptr, ##5836
20504     12 21 02 F1 | 	add	local02, local04
20508     13 21 0A F2 | 	cmp	local02, local05 wz
2050c     74 FF 9F 5D |  if_ne	jmp	#LR__2602
20510                 | ' repeat i from 0 to 127
20510     00 20 06 F6 | 	mov	local02, #0
20514                 | LR__2603
20514                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
20514     04 E4 05 F1 | 	add	objptr, #4
20518     F2 12 02 FB | 	rdlong	arg01, objptr
2051c     0F 27 02 F6 | 	mov	local05, local01
20520     07 26 66 F0 | 	shl	local05, #7
20524     13 13 02 F1 | 	add	arg01, local05
20528     10 13 02 F1 | 	add	arg01, local02
2052c     20 14 06 F6 | 	mov	arg02, #32
20530     01 16 06 F6 | 	mov	arg03, #1
20534     00 18 06 F6 | 	mov	arg04, #0
20538     01 1A 06 F6 | 	mov	arg05, #1
2053c     0B 00 00 FF 
20540     C8 E4 05 F1 | 	add	objptr, ##5832
20544     34 05 B0 FD | 	call	#_psram_spin2_fill
20548     0B 00 00 FF 
2054c     CC E4 85 F1 | 	sub	objptr, ##5836
20550     01 20 06 F1 | 	add	local02, #1
20554     80 20 56 F2 | 	cmps	local02, #128 wc
20558     B8 FF 9F CD |  if_b	jmp	#LR__2603
2055c     A7 F0 03 F6 | 	mov	ptra, fp
20560     B2 00 A0 FD | 	call	#popregs_
20564                 | _hg010b_spin2_scrolldown_ret
20564     2D 00 64 FD | 	ret
20568                 | 
20568                 | ' 
20568                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
20568                 | ' 
20568                 | ' pub crlf()
20568                 | _hg010b_spin2_crlf
20568                 | ' 
20568                 | ' cursor_x:=leading_spaces*2
20568     01 00 00 FF 
2056c     B6 E4 05 F1 | 	add	objptr, ##694
20570     F2 16 02 FB | 	rdlong	arg03, objptr
20574     01 16 66 F0 | 	shl	arg03, #1
20578     01 00 00 FF 
2057c     7A E4 85 F1 | 	sub	objptr, ##634
20580     F2 16 52 FC | 	wrword	arg03, objptr
20584                 | ' cursor_y+=1
20584     02 E4 05 F1 | 	add	objptr, #2
20588     F2 16 C2 FA | 	rdbyte	arg03, objptr
2058c     01 16 06 F1 | 	add	arg03, #1
20590     F2 16 42 FC | 	wrbyte	arg03, objptr
20594                 | ' if cursor_y>st_lines-1
20594     C3 E4 05 F1 | 	add	objptr, #195
20598     F2 16 02 FB | 	rdlong	arg03, objptr
2059c     01 16 86 F1 | 	sub	arg03, #1
205a0     C3 E4 85 F1 | 	sub	objptr, #195
205a4     F2 14 C2 FA | 	rdbyte	arg02, objptr
205a8     3E E4 85 F1 | 	sub	objptr, #62
205ac     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
205b0     2C 00 90 ED |  if_be	jmp	#LR__2610
205b4                 | '   scrollup2()
205b4     00 12 06 F6 | 	mov	arg01, #0
205b8     01 00 00 FF 
205bc     58 14 06 F6 | 	mov	arg02, ##600
205c0     10 16 06 F6 | 	mov	arg03, #16
205c4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
205c8                 | '   cursor_y:=st_lines-1
205c8     01 E5 05 F1 | 	add	objptr, #257
205cc     F2 16 02 FB | 	rdlong	arg03, objptr
205d0     01 16 86 F1 | 	sub	arg03, #1
205d4     C3 E4 85 F1 | 	sub	objptr, #195
205d8     F2 16 42 FC | 	wrbyte	arg03, objptr
205dc     3E E4 85 F1 | 	sub	objptr, #62
205e0                 | LR__2610
205e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
205e0     3C E4 05 F1 | 	add	objptr, #60
205e4     F2 14 E2 FA | 	rdword	arg02, objptr
205e8     02 14 66 F0 | 	shl	arg02, #2
205ec     02 E4 05 F1 | 	add	objptr, #2
205f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
205f4     3E E4 85 F1 | 	sub	objptr, #62
205f8     04 16 66 F0 | 	shl	arg03, #4
205fc     04 16 06 F1 | 	add	arg03, #4
20600     11 12 06 F6 | 	mov	arg01, #17
20604     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
20608                 | _hg010b_spin2_crlf_ret
20608     2D 00 64 FD | 	ret
2060c                 | 
2060c                 | ' 
2060c                 | ' 
2060c                 | ' '*************************************************************************
2060c                 | ' '                                                                        *
2060c                 | ' '  Conversions                                                           *
2060c                 | ' '                                                                        *
2060c                 | ' '*************************************************************************
2060c                 | ' 
2060c                 | ' ''---------- Convert a integer to dec string, return a pointer
2060c                 | ' 
2060c                 | ' pub inttostr(i):result |q,pos,k,j
2060c                 | _hg010b_spin2_inttostr
2060c     03 4A 05 F6 | 	mov	COUNT_, #3
20610     A8 00 A0 FD | 	call	#pushregs_
20614     09 1F 0A F6 | 	mov	local01, arg01 wz
20618                 | ' 
20618                 | ' j:=i
20618                 | ' pos:=10
20618     0A 20 06 F6 | 	mov	local02, #10
2061c                 | ' k:=0
2061c     00 22 06 F6 | 	mov	local03, #0
20620                 | ' 
20620                 | ' if (j==0)
20620     18 00 90 5D |  if_ne	jmp	#LR__2620
20624                 | '   n_string[0]:=48
20624     4D E4 05 F1 | 	add	objptr, #77
20628     F2 60 48 FC | 	wrbyte	#48, objptr
2062c                 | '   n_string[1]:=0
2062c     01 E4 05 F1 | 	add	objptr, #1
20630     F2 00 48 FC | 	wrbyte	#0, objptr
20634     4E E4 85 F1 | 	sub	objptr, #78
20638     C4 00 90 FD | 	jmp	#LR__2627
2063c                 | LR__2620
2063c                 | ' 
2063c                 | ' else
2063c                 | '   if (j<0)
2063c     0F 1F 52 F6 | 	abs	local01, local01 wc
20640                 | '     j:=0-j
20640                 | '     k:=45
20640     2D 22 06 C6 |  if_b	mov	local03, #45
20644                 | ' 
20644                 | '   n_string[11]:=0
20644     58 E4 05 F1 | 	add	objptr, #88
20648     F2 00 48 FC | 	wrbyte	#0, objptr
2064c     58 E4 85 F1 | 	sub	objptr, #88
20650     97 24 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
20654                 | '   repeat while (pos>-1)
20654                 | LR__2621
20654     00 20 56 F2 | 	cmps	local02, #0 wc
20658     40 00 90 CD |  if_b	jmp	#LR__2623
2065c     0F FB 51 F6 | 	abs	result1, local01 wc
20660     0A FA 15 FD | 	qdiv	result1, #10
20664                 | '     q:=j//10
20664     19 FA 61 FD | 	getqy	result1
20668     FD FA 81 F6 | 	negc	result1, result1
2066c     0F 1F 52 F6 | 	abs	local01, local01 wc
20670     0A 1E 16 FD | 	qdiv	local01, #10
20674                 | '     q:=48+q
20674     30 FA 05 F1 | 	add	result1, #48
20678                 | '     n_string[pos]:=q
20678     10 1F 02 F6 | 	mov	local01, local02
2067c     4D E4 05 F1 | 	add	objptr, #77
20680     F2 1E 02 F1 | 	add	local01, objptr
20684     0F FB 41 FC | 	wrbyte	result1, local01
20688                 | '     j:=j/10
20688     4D E4 85 F1 | 	sub	objptr, #77
2068c                 | '     pos-=1
2068c     01 20 86 F1 | 	sub	local02, #1
20690     18 1E 62 FD | 	getqx	local01
20694     0F 1F 82 F6 | 	negc	local01, local01
20698     B8 FF 9F FD | 	jmp	#LR__2621
2069c                 | LR__2622
2069c                 | LR__2623
2069c                 | '   repeat while n_string[0]==48
2069c                 | LR__2624
2069c     4D E4 05 F1 | 	add	objptr, #77
206a0     F2 16 C2 FA | 	rdbyte	arg03, objptr
206a4     4D E4 85 F1 | 	sub	objptr, #77
206a8     30 16 0E F2 | 	cmp	arg03, #48 wz
206ac     20 00 90 5D |  if_ne	jmp	#LR__2625
206b0                 | '     bytemove(@n_string,@n_string+1,12)
206b0     4D E4 05 F1 | 	add	objptr, #77
206b4     F2 12 02 F6 | 	mov	arg01, objptr
206b8     F2 14 02 F6 | 	mov	arg02, objptr
206bc     4D E4 85 F1 | 	sub	objptr, #77
206c0     01 14 06 F1 | 	add	arg02, #1
206c4     0C 16 06 F6 | 	mov	arg03, #12
206c8     D8 0D B0 FD | 	call	#__system____builtin_memmove
206cc     CC FF 9F FD | 	jmp	#LR__2624
206d0                 | LR__2625
206d0                 | ' 
206d0                 | '   if k==45
206d0     2D 22 0E F2 | 	cmp	local03, #45 wz
206d4     28 00 90 5D |  if_ne	jmp	#LR__2626
206d8                 | '      bytemove(@n_string+1,@n_string,12)
206d8     4D E4 05 F1 | 	add	objptr, #77
206dc     F2 12 02 F6 | 	mov	arg01, objptr
206e0     01 12 06 F1 | 	add	arg01, #1
206e4     F2 14 02 F6 | 	mov	arg02, objptr
206e8     4D E4 85 F1 | 	sub	objptr, #77
206ec     0C 16 06 F6 | 	mov	arg03, #12
206f0     B0 0D B0 FD | 	call	#__system____builtin_memmove
206f4                 | '      n_string[0]:=k
206f4     4D E4 05 F1 | 	add	objptr, #77
206f8     F2 22 42 FC | 	wrbyte	local03, objptr
206fc     4D E4 85 F1 | 	sub	objptr, #77
20700                 | LR__2626
20700                 | LR__2627
20700                 | ' 
20700                 | ' q:=@n_string
20700     4D E4 05 F1 | 	add	objptr, #77
20704     F2 FA 01 F6 | 	mov	result1, objptr
20708     4D E4 85 F1 | 	sub	objptr, #77
2070c                 | ' return q
2070c     A7 F0 03 F6 | 	mov	ptra, fp
20710     B2 00 A0 FD | 	call	#popregs_
20714                 | _hg010b_spin2_inttostr_ret
20714     2D 00 64 FD | 	ret
20718                 | 
20718                 | ' 
20718                 | ' '..............................................................................
20718                 | ' 
20718                 | ' {{
20718                 | ' }}
20718                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
20718                 | _psram_spin2_startx
20718     04 4A 05 F6 | 	mov	COUNT_, #4
2071c     A8 00 A0 FD | 	call	#pushregs_
20720     09 1F 02 F6 | 	mov	local01, arg01
20724     0B 21 02 F6 | 	mov	local02, arg03
20728     0C 23 02 F6 | 	mov	local03, arg04
2072c                 | '     stop() ' restart driver if required
2072c     54 01 B0 FD | 	call	#_psram_spin2_stop
20730     00 1E 0E F2 | 	cmp	local01, #0 wz
20734     14 1E 06 AB |  if_e	rdlong	local01, #20
20738     0F 15 52 F6 | 	abs	arg02, local01 wc
2073c     A1 07 00 FF 
20740     40 14 16 FD | 	qdiv	arg02, ##1000000
20744                 | ' 
20744                 | '     ' use current frequency if none specified
20744                 | ' 
20744                 | '     if freq == 0 
20744                 | '         freq := clkfreq 
20744                 | ' 
20744                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
20744                 | ' 
20744                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
20744                 | '     if burst < 0
20744                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
20744     18 14 62 FD | 	getqx	arg02
20748     0A 19 82 F6 | 	negc	arg04, arg02
2074c     03 18 66 F0 | 	shl	arg04, #3
20750     84 18 86 F1 | 	sub	arg04, #132
20754     04 18 46 F0 | 	shr	arg04, #4
20758     04 18 66 F0 | 	shl	arg04, #4
2075c     00 18 56 F2 | 	cmps	arg04, #0 wc
20760     0E FA 65 C6 |  if_b	neg	result1, #14
20764     10 01 90 CD |  if_b	jmp	#LR__2633
20768                 | ' 
20768                 | '     ' compute the input delay
20768                 | ' 
20768                 | '     if delay <= 0
20768     01 20 56 F2 | 	cmps	local02, #1 wc
2076c     10 00 90 3D |  if_ae	jmp	#LR__2630
20770                 | '         delay := lookupDelay(freq)
20770     0F 13 02 F6 | 	mov	arg01, local01
20774     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
20778     FD 20 02 F6 | 	mov	local02, result1
2077c     04 00 90 FD | 	jmp	#LR__2631
20780                 | LR__2630
20780                 | '     else
20780                 | '         delay <#= $f ' limit to 15
20780     0F 20 66 F3 | 	fles	local02, #15
20784                 | LR__2631
20784                 | ' 
20784                 | '     ' create our lock
20784                 | ' 
20784                 | '     driverlock := LOCKNEW()  
20784     00 FA 05 F6 | 	mov	result1, #0
20788     04 FA 61 FD | 	locknew	result1
2078c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20790     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
20794                 | '     if driverlock == -1
20794     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20798     FF FF 7F FF 
2079c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
207a0                 | '         return ERR_NO_LOCK
207a0     1A FA 65 A6 |  if_e	neg	result1, #26
207a4     D0 00 90 AD |  if_e	jmp	#LR__2633
207a8                 | ' 
207a8                 | '     ' patch in the proper data and HUB addresses to the startup structure
207a8                 | ' 
207a8                 | '     long[@startupData][0]:=clkfreq
207a8     14 1E 06 FB | 	rdlong	local01, #20
207ac     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
207b0     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
207b4                 | ' '    long[@startupData][1]:=$1000_0000
207b4                 | '     long[@startupData][5]:=@deviceData
207b4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
207b8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
207bc     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
207c0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
207c4     14 14 06 F1 | 	add	arg02, #20
207c8     0A 1F 62 FC | 	wrlong	local01, arg02
207cc                 | '     long[@startupData][6]:=@qosData
207cc     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
207d0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
207d4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
207d8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
207dc     18 14 06 F1 | 	add	arg02, #24
207e0     0A 1F 62 FC | 	wrlong	local01, arg02
207e4                 | '     long[@startupData][7]:=$7FF00
207e4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
207e8     1C 1E 06 F1 | 	add	local01, #28
207ec     FF 03 80 FF 
207f0     0F 01 6A FC | 	wrlong	##524032, local01
207f4                 | ' 
207f4                 | '     ' setup some default bank and QoS parameter values
207f4                 | ' 
207f4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
207f4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
207f8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
207fc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
20800     10 18 66 F0 | 	shl	arg04, #16
20804     0C 20 66 F0 | 	shl	local02, #12
20808     10 19 42 F5 | 	or	arg04, local02
2080c     18 18 46 F5 | 	or	arg04, #24
20810     0C 15 02 F6 | 	mov	arg02, arg04
20814     02 16 06 F6 | 	mov	arg03, #2
20818     A0 00 A0 FD | 	call	#\builtin_longfill_
2081c                 | '     longfill(@qosData, $FFFF0000, 8)
2081c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20820     07 16 06 F6 | 	mov	arg03, #7
20824     28 16 62 FD | 	setq	arg03
20828     80 FF FF FF 
2082c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
20830                 | ' 
20830                 | '     ' get the address of the PSRAM memory driver so we can start it
20830                 | ' 
20830                 | '     driverAddr:= driver.getDriverAddr()
20830                 | '     return @driver_start
20830     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
20834     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
20838     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2083c                 | ' 
2083c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2083c                 | ' 
2083c                 | '     if desiredcog < 0
2083c     00 22 56 F2 | 	cmps	local03, #0 wc
20840                 | '         desiredcog := NEWCOG
20840     10 22 06 C6 |  if_b	mov	local03, #16
20844                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
20844     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20848     11 25 02 F6 | 	mov	local04, local03
2084c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
20850     0A 25 F2 FC | 	coginit	local04, arg02 wc
20854     01 24 66 C6 |  if_b	neg	local04, #1
20858     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2085c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
20860                 | '     repeat until long[@startupData] == 0 
20860     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
20864                 | LR__2632
20864     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
20868     F8 FF 9F 5D |  if_ne	jmp	#LR__2632
2086c                 | ' 
2086c                 | '     return drivercog
2086c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
20870     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
20874     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20878                 | LR__2633
20878     A7 F0 03 F6 | 	mov	ptra, fp
2087c     B2 00 A0 FD | 	call	#popregs_
20880                 | _psram_spin2_startx_ret
20880     2D 00 64 FD | 	ret
20884                 | 
20884                 | ' 
20884                 | ' '..............................................................................
20884                 | ' 
20884                 | ' {{
20884                 | ' }}
20884                 | ' PUB stop() : i
20884                 | _psram_spin2_stop
20884     00 00 06 F6 | 	mov	_var01, #0
20888                 | '     if drivercog <> -1
20888     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2088c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20890     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20894     FF FF 7F FF 
20898     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
2089c     70 00 90 AD |  if_e	jmp	#LR__2643
208a0                 | '         cogstop(drivercog) ' a rather brutal stop
208a0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
208a4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
208a8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
208ac     03 12 62 FD | 	cogstop	arg01
208b0     97 26 48 FB | 	callpa	#(@LR__2642-@LR__2640)>>2,fcache_load_ptr_
208b4                 | '         repeat i from 0 to 7
208b4                 | LR__2640
208b4                 | '             if long[$7FF00][i*3] < 0
208b4     00 FB 01 F6 | 	mov	result1, _var01
208b8     01 FA 65 F0 | 	shl	result1, #1
208bc     00 FB 01 F1 | 	add	result1, _var01
208c0     02 FA 65 F0 | 	shl	result1, #2
208c4     FF 03 00 FF 
208c8     00 FB 05 F1 | 	add	result1, ##524032
208cc     FD FA 01 FB | 	rdlong	result1, result1
208d0     00 FA 55 F2 | 	cmps	result1, #0 wc
208d4     1C 00 90 3D |  if_ae	jmp	#LR__2641
208d8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
208d8     00 FB 01 F6 | 	mov	result1, _var01
208dc     01 FA 65 F0 | 	shl	result1, #1
208e0     00 FB 01 F1 | 	add	result1, _var01
208e4     02 FA 65 F0 | 	shl	result1, #2
208e8     FF 03 00 FF 
208ec     00 FB 05 F1 | 	add	result1, ##524032
208f0     FD 20 68 FC | 	wrlong	#16, result1
208f4                 | LR__2641
208f4     01 00 06 F1 | 	add	_var01, #1
208f8     08 00 56 F2 | 	cmps	_var01, #8 wc
208fc     B4 FF 9F CD |  if_b	jmp	#LR__2640
20900                 | LR__2642
20900                 | '         drivercog := -1
20900     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20904     FF FF FF FF 
20908     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2090c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20910                 | LR__2643
20910                 | '     if driverlock <> -1
20910     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20914     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20918     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2091c     FF FF 7F FF 
20920     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20924                 | '         LOCKRET(driverlock)
20924     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
20928     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2092c     05 12 62 5D |  if_ne	lockret	arg01
20930                 | '         driverlock := -1
20930     FF FF FF 5F 
20934     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
20938     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2093c     00 FB 01 F6 | 	mov	result1, _var01
20940                 | _psram_spin2_stop_ret
20940     2D 00 64 FD | 	ret
20944                 | 
20944                 | ' 
20944                 | ' '..............................................................................
20944                 | ' 
20944                 | ' {{
20944                 | ' }}
20944                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
20944                 | _psram_spin2_read1
20944                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
20944                 | '     if drivercog == -1 ' driver must be running
20944     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20948     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2094c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20950     FF FF 7F FF 
20954     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
20958                 | '         return ERR_INACTIVE
20958     0F FA 65 A6 |  if_e	neg	result1, #15
2095c     7C 00 90 AD |  if_e	jmp	#LR__2651
20960                 | '     if count == 0 ' don't even bother reading
20960     00 16 0E F2 | 	cmp	arg03, #0 wz
20964                 | '         return 0
20964     00 FA 05 A6 |  if_e	mov	result1, #0
20968     70 00 90 AD |  if_e	jmp	#LR__2651
2096c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2096c     00 FA 05 F6 | 	mov	result1, #0
20970     01 FA 61 FD | 	cogid	result1
20974     FD 00 02 F6 | 	mov	_var01, result1
20978     01 00 66 F0 | 	shl	_var01, #1
2097c     FD 00 02 F1 | 	add	_var01, result1
20980     02 00 66 F0 | 	shl	_var01, #2
20984     FF 03 00 FF 
20988     00 03 06 F6 | 	mov	_var02, ##524032
2098c     00 03 02 F1 | 	add	_var02, _var01
20990                 | '     if long[mailbox] < 0
20990     01 01 02 FB | 	rdlong	_var01, _var02
20994     00 00 56 F2 | 	cmps	_var01, #0 wc
20998                 | '         return ERR_MAILBOX_BUSY
20998     1C FA 65 C6 |  if_b	neg	result1, #28
2099c     3C 00 90 CD |  if_b	jmp	#LR__2651
209a0                 | '     long[mailbox][2] := count
209a0     08 02 06 F1 | 	add	_var02, #8
209a4     01 17 62 FC | 	wrlong	arg03, _var02
209a8                 | '     long[mailbox][1] := dstHubAddr
209a8     04 02 86 F1 | 	sub	_var02, #4
209ac     01 13 62 FC | 	wrlong	arg01, _var02
209b0     04 02 86 F1 | 	sub	_var02, #4
209b4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
209b4     0A 05 02 F6 | 	mov	_var03, arg02
209b8     D9 04 06 F4 | 	bitl	_var03, #217
209bc     00 00 58 FF 
209c0     00 00 06 F6 | 	mov	_var01, ##-1342177280
209c4     02 01 02 F1 | 	add	_var01, _var03
209c8     01 01 62 FC | 	wrlong	_var01, _var02
209cc                 | '     repeat
209cc                 | LR__2650
209cc                 | '         result := long[mailbox]    
209cc     01 05 02 FB | 	rdlong	_var03, _var02
209d0     00 04 56 F2 | 	cmps	_var03, #0 wc
209d4     F4 FF 9F CD |  if_b	jmp	#LR__2650
209d8                 | '     while result < 0   
209d8                 | '     return -result                       'return success or error
209d8     02 FB 61 F6 | 	neg	result1, _var03
209dc                 | LR__2651
209dc                 | _psram_spin2_read1_ret
209dc     2D 00 64 FD | 	ret
209e0                 | 
209e0                 | ' 
209e0                 | ' '..............................................................................
209e0                 | ' 
209e0                 | ' {{
209e0                 | ' }}
209e0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
209e0                 | _psram_spin2_write
209e0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
209e0                 | '     if drivercog == -1 ' driver must be running
209e0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
209e4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
209e8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
209ec     FF FF 7F FF 
209f0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
209f4                 | '         return ERR_INACTIVE
209f4     0F FA 65 A6 |  if_e	neg	result1, #15
209f8     7C 00 90 AD |  if_e	jmp	#LR__2661
209fc                 | '     if count == 0 ' don't even bother writing
209fc     00 16 0E F2 | 	cmp	arg03, #0 wz
20a00                 | '         return 0
20a00     00 FA 05 A6 |  if_e	mov	result1, #0
20a04     70 00 90 AD |  if_e	jmp	#LR__2661
20a08                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
20a08     00 FA 05 F6 | 	mov	result1, #0
20a0c     01 FA 61 FD | 	cogid	result1
20a10     FD 00 02 F6 | 	mov	_var01, result1
20a14     01 00 66 F0 | 	shl	_var01, #1
20a18     FD 00 02 F1 | 	add	_var01, result1
20a1c     02 00 66 F0 | 	shl	_var01, #2
20a20     FF 03 00 FF 
20a24     00 03 06 F6 | 	mov	_var02, ##524032
20a28     00 03 02 F1 | 	add	_var02, _var01
20a2c                 | '     if long[mailbox] < 0
20a2c     01 01 02 FB | 	rdlong	_var01, _var02
20a30     00 00 56 F2 | 	cmps	_var01, #0 wc
20a34                 | '         return ERR_MAILBOX_BUSY
20a34     1C FA 65 C6 |  if_b	neg	result1, #28
20a38     3C 00 90 CD |  if_b	jmp	#LR__2661
20a3c                 | '     long[mailbox][2] := count
20a3c     08 02 06 F1 | 	add	_var02, #8
20a40     01 17 62 FC | 	wrlong	arg03, _var02
20a44                 | '     long[mailbox][1] := srcHubAddr
20a44     04 02 86 F1 | 	sub	_var02, #4
20a48     01 13 62 FC | 	wrlong	arg01, _var02
20a4c     04 02 86 F1 | 	sub	_var02, #4
20a50                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
20a50     0A 05 02 F6 | 	mov	_var03, arg02
20a54     D9 04 06 F4 | 	bitl	_var03, #217
20a58     00 00 78 FF 
20a5c     00 00 06 F6 | 	mov	_var01, ##-268435456
20a60     02 01 02 F1 | 	add	_var01, _var03
20a64     01 01 62 FC | 	wrlong	_var01, _var02
20a68                 | '     repeat
20a68                 | LR__2660
20a68                 | '         result := long[mailbox]    
20a68     01 05 02 FB | 	rdlong	_var03, _var02
20a6c     00 04 56 F2 | 	cmps	_var03, #0 wc
20a70     F4 FF 9F CD |  if_b	jmp	#LR__2660
20a74                 | '     while result < 0   
20a74                 | '     return -result                       'return success or error
20a74     02 FB 61 F6 | 	neg	result1, _var03
20a78                 | LR__2661
20a78                 | _psram_spin2_write_ret
20a78     2D 00 64 FD | 	ret
20a7c                 | 
20a7c                 | ' 
20a7c                 | ' ' generalized fill
20a7c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
20a7c                 | _psram_spin2_fill
20a7c     09 01 02 F6 | 	mov	_var01, arg01
20a80     0A 03 02 F6 | 	mov	_var02, arg02
20a84     0B 05 02 F6 | 	mov	_var03, arg03
20a88     0D 07 02 F6 | 	mov	_var04, arg05
20a8c                 | '     case datasize 
20a8c     01 06 86 F1 | 	sub	_var04, #1
20a90     04 06 26 F3 | 	fle	_var04, #4
20a94     30 06 62 FD | 	jmprel	_var04
20a98                 | LR__2670
20a98     10 00 90 FD | 	jmp	#LR__2671
20a9c     18 00 90 FD | 	jmp	#LR__2672
20aa0     2C 00 90 FD | 	jmp	#LR__2674
20aa4     1C 00 90 FD | 	jmp	#LR__2673
20aa8     24 00 90 FD | 	jmp	#LR__2674
20aac                 | LR__2671
20aac                 | '         1: req := driver.R_WRITEBYTE
20aac     00 00 60 FF 
20ab0     00 08 06 F6 | 	mov	_var05, ##-1073741824
20ab4     20 00 90 FD | 	jmp	#LR__2675
20ab8                 | LR__2672
20ab8                 | '         2: req := driver.R_WRITEWORD
20ab8     00 00 68 FF 
20abc     00 08 06 F6 | 	mov	_var05, ##-805306368
20ac0     14 00 90 FD | 	jmp	#LR__2675
20ac4                 | LR__2673
20ac4                 | '         4: req := driver.R_WRITELONG
20ac4     00 00 70 FF 
20ac8     00 08 06 F6 | 	mov	_var05, ##-536870912
20acc     08 00 90 FD | 	jmp	#LR__2675
20ad0                 | LR__2674
20ad0                 | '         other : return ERR_INVALID
20ad0     06 FA 65 F6 | 	neg	result1, #6
20ad4     94 00 90 FD | 	jmp	#LR__2677
20ad8                 | LR__2675
20ad8                 | '     if count == 0   ' nothing to do
20ad8     00 04 0E F2 | 	cmp	_var03, #0 wz
20adc                 | '         return 0
20adc     00 FA 05 A6 |  if_e	mov	result1, #0
20ae0     88 00 90 AD |  if_e	jmp	#LR__2677
20ae4                 | '     if drivercog == -1
20ae4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20ae8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
20aec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20af0     FF FF 7F FF 
20af4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
20af8                 | '         return ERR_INACTIVE
20af8     0F FA 65 A6 |  if_e	neg	result1, #15
20afc     6C 00 90 AD |  if_e	jmp	#LR__2677
20b00                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
20b00     00 FA 05 F6 | 	mov	result1, #0
20b04     01 FA 61 FD | 	cogid	result1
20b08     FD 06 02 F6 | 	mov	_var04, result1
20b0c     01 06 66 F0 | 	shl	_var04, #1
20b10     FD 06 02 F1 | 	add	_var04, result1
20b14     02 06 66 F0 | 	shl	_var04, #2
20b18     FF 03 00 FF 
20b1c     00 0B 06 F6 | 	mov	_var06, ##524032
20b20     03 0B 02 F1 | 	add	_var06, _var04
20b24                 | '     if long[mailbox] < 0
20b24     05 07 02 FB | 	rdlong	_var04, _var06
20b28     00 06 56 F2 | 	cmps	_var04, #0 wc
20b2c                 | '         return ERR_MAILBOX_BUSY
20b2c     1C FA 65 C6 |  if_b	neg	result1, #28
20b30     38 00 90 CD |  if_b	jmp	#LR__2677
20b34                 | '     long[mailbox][2] := count
20b34     08 0A 06 F1 | 	add	_var06, #8
20b38     05 05 62 FC | 	wrlong	_var03, _var06
20b3c                 | '     long[mailbox][1] := pattern
20b3c     04 0A 86 F1 | 	sub	_var06, #4
20b40     05 03 62 FC | 	wrlong	_var02, _var06
20b44     04 0A 86 F1 | 	sub	_var06, #4
20b48                 | '     long[mailbox] := req + (addr & $1ffffff)
20b48     04 0D 02 F6 | 	mov	_var07, _var05
20b4c     00 0F 02 F6 | 	mov	_var08, _var01
20b50     D9 0E 06 F4 | 	bitl	_var08, #217
20b54     07 0D 02 F1 | 	add	_var07, _var08
20b58     05 0D 62 FC | 	wrlong	_var07, _var06
20b5c                 | '     repeat
20b5c                 | LR__2676
20b5c                 | '         r := long[mailbox]
20b5c     05 0F 02 FB | 	rdlong	_var08, _var06
20b60     00 0E 56 F2 | 	cmps	_var08, #0 wc
20b64     F4 FF 9F CD |  if_b	jmp	#LR__2676
20b68                 | '     while r < 0
20b68                 | '     return -r                  ' return 0 for success or negated error code
20b68     07 FB 61 F6 | 	neg	result1, _var08
20b6c                 | LR__2677
20b6c                 | _psram_spin2_fill_ret
20b6c     2D 00 64 FD | 	ret
20b70                 | 
20b70                 | ' 
20b70                 | ' '..............................................................................
20b70                 | ' 
20b70                 | ' {{
20b70                 | ' }}
20b70                 | ' PUB setQos(cog, qos) : result | mailbox
20b70                 | _psram_spin2_setQos
20b70     09 01 02 F6 | 	mov	_var01, arg01
20b74                 | '     if drivercog == -1 ' driver must be running
20b74     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20b78     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20b7c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20b80     FF FF 7F FF 
20b84     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20b88                 | '         return ERR_INACTIVE
20b88     0F FA 65 A6 |  if_e	neg	result1, #15
20b8c     9C 00 90 AD |  if_e	jmp	#LR__2684
20b90                 | '     if cog < 0 or cog > 7 ' enforce cog id range
20b90     00 00 56 F2 | 	cmps	_var01, #0 wc
20b94     08 00 90 CD |  if_b	jmp	#LR__2680
20b98     08 00 56 F2 | 	cmps	_var01, #8 wc
20b9c     08 00 90 CD |  if_b	jmp	#LR__2681
20ba0                 | LR__2680
20ba0                 | '         return ERR_INVALID
20ba0     06 FA 65 F6 | 	neg	result1, #6
20ba4     84 00 90 FD | 	jmp	#LR__2684
20ba8                 | LR__2681
20ba8                 | '     long[@qosData][cog] := qos & !$1ff
20ba8     FF 15 26 F5 | 	andn	arg02, #511
20bac     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20bb0     02 00 66 F0 | 	shl	_var01, #2
20bb4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
20bb8     00 15 62 FC | 	wrlong	arg02, _var01
20bbc                 | '     mailbox := $7FF00 + drivercog*12
20bbc     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
20bc0     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
20bc4     02 07 02 F6 | 	mov	_var04, _var03
20bc8     01 06 66 F0 | 	shl	_var04, #1
20bcc     02 07 02 F1 | 	add	_var04, _var03
20bd0     02 06 66 F0 | 	shl	_var04, #2
20bd4     FF 03 00 FF 
20bd8     00 09 06 F6 | 	mov	_var05, ##524032
20bdc     03 09 02 F1 | 	add	_var05, _var04
20be0                 | '     repeat until LOCKTRY(driverlock)
20be0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
20be4                 | LR__2682
20be4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20be8     06 12 72 FD | 	locktry	arg01 wc
20bec     F4 FF 9F 3D |  if_ae	jmp	#LR__2682
20bf0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20bf4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
20bf4     00 06 06 F6 | 	mov	_var04, #0
20bf8     01 06 62 FD | 	cogid	_var04
20bfc     00 00 78 FF 
20c00     00 02 06 F6 | 	mov	_var02, ##-268435456
20c04     03 03 02 F1 | 	add	_var02, _var04
20c08     04 03 62 FC | 	wrlong	_var02, _var05
20c0c                 | '     repeat while long[mailbox] < 0
20c0c                 | LR__2683
20c0c     04 03 02 FB | 	rdlong	_var02, _var05
20c10     00 02 56 F2 | 	cmps	_var02, #0 wc
20c14     F4 FF 9F CD |  if_b	jmp	#LR__2683
20c18                 | '     LOCKREL(driverlock)
20c18     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20c1c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20c20     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20c24     07 12 72 FD | 	lockrel	arg01 wc
20c28     00 FA 05 F6 | 	mov	result1, #0
20c2c                 | LR__2684
20c2c                 | _psram_spin2_setQos_ret
20c2c     2D 00 64 FD | 	ret
20c30                 | 
20c30                 | ' 
20c30                 | ' '..............................................................................
20c30                 | ' 
20c30                 | ' {{
20c30                 | ' }}
20c30                 | ' PRI lookupDelay(freq) : delay | profile
20c30                 | _psram_spin2_lookupDelay
20c30                 | '     profile := @delayTable
20c30     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
20c34     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
20c38                 | '     delay := long[profile][0]
20c38     00 03 02 FB | 	rdlong	_var02, _var01
20c3c                 | '     repeat while long[profile][1] 
20c3c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
20c40     97 16 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
20c44                 | LR__2690
20c44     04 00 06 F1 | 	add	_var01, #4
20c48     00 FB 09 FB | 	rdlong	result1, _var01 wz
20c4c     04 00 86 F1 | 	sub	_var01, #4
20c50     1C 00 90 AD |  if_e	jmp	#LR__2692
20c54                 | '         if freq +< long[profile][1] 
20c54     04 00 06 F1 | 	add	_var01, #4
20c58     00 FB 01 FB | 	rdlong	result1, _var01
20c5c     04 00 86 F1 | 	sub	_var01, #4
20c60     FD 12 12 F2 | 	cmp	arg01, result1 wc
20c64                 | '             quit
20c64                 | '         profile += 4
20c64     04 00 06 31 |  if_ae	add	_var01, #4
20c68                 | '         delay++
20c68     01 02 06 31 |  if_ae	add	_var02, #1
20c6c     D4 FF 9F 3D |  if_ae	jmp	#LR__2690
20c70                 | LR__2691
20c70                 | LR__2692
20c70     01 FB 01 F6 | 	mov	result1, _var02
20c74                 | _psram_spin2_lookupDelay_ret
20c74     2D 00 64 FD | 	ret
20c78                 | 
20c78                 | ' 
20c78                 | ' PUB start() : r
20c78                 | _usbnew_spin2_start
20c78     00 00 06 F6 | 	mov	_var01, #0
20c7c                 | '   ifnot driver_cog
20c7c     15 00 00 FF 
20c80     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20c84     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20c88     15 00 00 FF 
20c8c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20c90     38 00 90 5D |  if_ne	jmp	#LR__2700
20c94                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20c94     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20c98     10 00 06 F6 | 	mov	_var01, #16
20c9c     00 16 06 F6 | 	mov	arg03, #0
20ca0     28 16 62 FD | 	setq	arg03
20ca4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20ca8     01 00 66 C6 |  if_b	neg	_var01, #1
20cac                 | '     if r >= 0
20cac     00 00 56 F2 | 	cmps	_var01, #0 wc
20cb0                 | '       driver_cog := r+1
20cb0     00 03 02 36 |  if_ae	mov	_var02, _var01
20cb4     01 02 06 31 |  if_ae	add	_var02, #1
20cb8     15 00 00 3F 
20cbc     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20cc0     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
20cc4     15 00 00 3F 
20cc8     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20ccc                 | LR__2700
20ccc     00 FB 01 F6 | 	mov	result1, _var01
20cd0                 | _usbnew_spin2_start_ret
20cd0     2D 00 64 FD | 	ret
20cd4                 | 
20cd4                 | '     '' (Always enabled)
20cd4                 | ' 
20cd4                 | ' '' Get current pressed state of a keyboard key
20cd4                 | ' PUB keystate(key) : r | buf[2],tmp
20cd4                 | _usbnew_spin2_keystate
20cd4     00 04 06 F6 | 	mov	_var03, #0
20cd8                 | '   if key >= $E0 && key < $E8
20cd8     E0 12 56 F2 | 	cmps	arg01, #224 wc
20cdc     34 00 90 CD |  if_b	jmp	#LR__2710
20ce0     E8 12 56 F2 | 	cmps	arg01, #232 wc
20ce4     2C 00 90 3D |  if_ae	jmp	#LR__2710
20ce8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
20ce8     00 FA 05 F6 | 	mov	result1, #0
20cec     13 00 00 FF 
20cf0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20cf4     09 07 02 F6 | 	mov	_var04, arg01
20cf8     E0 06 86 F1 | 	sub	_var04, #224
20cfc     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
20d00     03 09 4A F0 | 	shr	_var05, _var04 wz
20d04     13 00 00 FF 
20d08     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20d0c     01 FA 65 56 |  if_ne	neg	result1, #1
20d10     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
20d14                 | LR__2710
20d14                 | '   else
20d14                 | '     '' Do this in inline ASM to ensure atomicity
20d14                 | '     tmp := @hkbd_report
20d14     13 00 00 FF 
20d18     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20d1c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
20d20                 | '     org
20d20     13 00 00 FF 
20d24     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20d28     97 1E 48 FB | 	callpa	#(@LR__2712-@LR__2711)>>2,fcache_load_ptr_
20d2c                 | LR__2711
20d2c 000             | 	org	0
20d2c 000 28 02 64 FD | 	setq	#1
20d30 001 04 01 02 FB | 	rdlong	_var01, _var05
20d34 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
20d38 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
20d3c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20d40 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d44 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20d48 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d4c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20d50 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d54 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20d58 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d5c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20d60 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20d64 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20d68 00f             | LR__2712
20d68                 | 	orgh
20d68     02 FB 01 F6 | 	mov	result1, _var03
20d6c                 | _usbnew_spin2_keystate_ret
20d6c     2D 00 64 FD | 	ret
20d70                 | 
20d70                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20d70                 | ' 
20d70                 | ' '' Return key event from buffer if there is one
20d70                 | ' PUB get_key() : r | tail
20d70                 | _usbnew_spin2_get_key
20d70                 | '   tail := keyq_tail
20d70     0F 00 00 FF 
20d74     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20d78     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20d7c                 | '   if keyq_head == tail
20d7c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20d80     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20d84     0F 00 00 FF 
20d88     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20d8c     00 03 0A F2 | 	cmp	_var02, _var01 wz
20d90                 | '     return 0 ' No event
20d90     00 FA 05 A6 |  if_e	mov	result1, #0
20d94     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20d98                 | '   r := keyq_data[tail]
20d98     00 03 02 F6 | 	mov	_var02, _var01
20d9c     02 02 66 F0 | 	shl	_var02, #2
20da0     0F 00 00 FF 
20da4     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20da8     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20dac     01 FB 01 FB | 	rdlong	result1, _var02
20db0                 | '   if ++tail == KEYQUEUE_SIZE
20db0     01 00 06 F1 | 	add	_var01, #1
20db4     80 00 0E F2 | 	cmp	_var01, #128 wz
20db8                 | '     tail := 0
20db8     00 00 06 A6 |  if_e	mov	_var01, #0
20dbc                 | '   keyq_tail := tail
20dbc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20dc0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20dc4     0F 00 00 FF 
20dc8     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20dcc                 | _usbnew_spin2_get_key_ret
20dcc     2D 00 64 FD | 	ret
20dd0                 | 
20dd0                 | ' 
20dd0                 | ' '' Emulate mouse movement
20dd0                 | ' PUB mouse_move(x,y)
20dd0                 | _usbnew_spin2_mouse_move
20dd0     02 4A 05 F6 | 	mov	COUNT_, #2
20dd4     A8 00 A0 FD | 	call	#pushregs_
20dd8     09 1F 02 F6 | 	mov	local01, arg01
20ddc     0A 21 02 F6 | 	mov	local02, arg02
20de0                 | '   mouse_lock := 1
20de0     14 00 00 FF 
20de4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20de8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20dec     14 00 00 FF 
20df0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20df4                 | '   waitus(2) ' hope driver is now done
20df4     02 12 06 F6 | 	mov	arg01, #2
20df8     E8 0A B0 FD | 	call	#__system___waitus
20dfc                 | '   mouse_xacc := x
20dfc     14 00 00 FF 
20e00     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
20e04     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
20e08                 | '   mouse_yacc := y
20e08     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20e0c     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
20e10                 | '   if mouse_outptr
20e10     04 00 00 FF 
20e14     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
20e18     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
20e1c     0F 00 00 FF 
20e20     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20e24     24 00 90 AD |  if_e	jmp	#LR__2720
20e28                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
20e28     10 20 66 F0 | 	shl	local02, #16
20e2c     0F 1F 32 F9 | 	getword	local01, local01, #0
20e30     0F 21 42 F5 | 	or	local02, local01
20e34     0F 00 00 FF 
20e38     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
20e3c     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20e40     0F 00 00 FF 
20e44     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20e48     0F 21 62 FC | 	wrlong	local02, local01
20e4c                 | LR__2720
20e4c                 | '   mouse_lock := 0
20e4c     14 00 00 FF 
20e50     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20e54     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20e58     14 00 00 FF 
20e5c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20e60     A7 F0 03 F6 | 	mov	ptra, fp
20e64     B2 00 A0 FD | 	call	#popregs_
20e68                 | _usbnew_spin2_mouse_move_ret
20e68     2D 00 64 FD | 	ret
20e6c                 | 
20e6c                 | '     '' Set HAVE_HIDPAD to enable.
20e6c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20e6c                 | ' 
20e6c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20e6c                 | ' PUB hidpad_id(dev) : r
20e6c                 | _usbnew_spin2_hidpad_id
20e6c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20e6c     13 00 00 FF 
20e70     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20e74     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20e78     09 01 02 F6 | 	mov	_var01, arg01
20e7c     03 00 66 F0 | 	shl	_var01, #3
20e80     09 01 82 F1 | 	sub	_var01, arg01
20e84     02 00 66 F0 | 	shl	_var01, #2
20e88     00 FB 01 F1 | 	add	result1, _var01
20e8c     FD FA 01 FB | 	rdlong	result1, result1
20e90     13 00 00 FF 
20e94     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20e98                 | _usbnew_spin2_hidpad_id_ret
20e98     2D 00 64 FD | 	ret
20e9c                 | 
20e9c                 | ' 
20e9c                 | ' '' Get all button states for a device
20e9c                 | ' PUB hidpad_buttons(dev) : r 
20e9c                 | _usbnew_spin2_hidpad_buttons
20e9c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20e9c     13 00 00 FF 
20ea0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20ea4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20ea8     09 01 02 F6 | 	mov	_var01, arg01
20eac     03 00 66 F0 | 	shl	_var01, #3
20eb0     09 01 82 F1 | 	sub	_var01, arg01
20eb4     02 00 66 F0 | 	shl	_var01, #2
20eb8     00 FB 01 F1 | 	add	result1, _var01
20ebc     14 FA 05 F1 | 	add	result1, #20
20ec0     FD FA 01 FB | 	rdlong	result1, result1
20ec4     13 00 00 FF 
20ec8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20ecc                 | _usbnew_spin2_hidpad_buttons_ret
20ecc     2D 00 64 FD | 	ret
20ed0                 | 
20ed0                 | ' 
20ed0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20ed0                 | ' PUB hidpad_axis(dev,axnum) : r
20ed0                 | _usbnew_spin2_hidpad_axis
20ed0                 | '   if axnum +>= 6
20ed0     06 14 16 F2 | 	cmp	arg02, #6 wc
20ed4                 | '     return 0
20ed4     00 FA 05 36 |  if_ae	mov	result1, #0
20ed8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20edc                 | '   else 
20edc                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20edc     13 00 00 FF 
20ee0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20ee4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20ee8     09 01 02 F6 | 	mov	_var01, arg01
20eec     03 00 66 F0 | 	shl	_var01, #3
20ef0     09 01 82 F1 | 	sub	_var01, arg01
20ef4     02 00 66 F0 | 	shl	_var01, #2
20ef8     00 FB 01 F1 | 	add	result1, _var01
20efc     04 00 06 F6 | 	mov	_var01, #4
20f00     0A 01 02 F1 | 	add	_var01, arg02
20f04     01 00 66 F0 | 	shl	_var01, #1
20f08     FD 00 02 F1 | 	add	_var01, result1
20f0c     00 FB E1 FA | 	rdword	result1, _var01
20f10     0F FA 65 F7 | 	signx	result1, #15
20f14     13 00 00 FF 
20f18     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20f1c                 | _usbnew_spin2_hidpad_axis_ret
20f1c     2D 00 64 FD | 	ret
20f20                 | 
20f20                 | ' 
20f20                 | ' 
20f20                 | ' '--------------------------------------------------------------
20f20                 | ' '---------- Init the variables, start the cog. ----------------
20f20                 | ' '--------------------------------------------------------------
20f20                 | ' 
20f20                 | ' pub start(mbox,scope,cache) :cog,base | iii
20f20                 | _audio096_spin2_start
20f20     04 4A 05 F6 | 	mov	COUNT_, #4
20f24     A8 00 A0 FD | 	call	#pushregs_
20f28     09 1F 02 F6 | 	mov	local01, arg01
20f2c                 | ' 
20f2c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
20f2c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
20f2c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
20f2c                 | ' 
20f2c                 | ' mailboxaddr:=mbox 
20f2c     F2 1E 62 FC | 	wrlong	local01, objptr
20f30                 | ' scope_ptr:=scope
20f30     04 E4 05 F1 | 	add	objptr, #4
20f34     F2 14 62 FC | 	wrlong	arg02, objptr
20f38                 | ' cache_ptr:=cache
20f38     04 E4 05 F1 | 	add	objptr, #4
20f3c     F2 16 62 FC | 	wrlong	arg03, objptr
20f40                 | ' base:=@channel1[0]
20f40     04 E4 05 F1 | 	add	objptr, #4
20f44     F2 20 02 F6 | 	mov	local02, objptr
20f48                 | ' long[$40]:=mbox
20f48     40 1E 66 FC | 	wrlong	local01, #64
20f4c                 | ' repeat iii from 0 to 7
20f4c     00 22 06 F6 | 	mov	local03, #0
20f50     02 00 00 FF 
20f54     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20f58     0C E4 85 F1 | 	sub	objptr, #12
20f5c     97 BC 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
20f60                 | LR__2730
20f60                 | '   long[base+64*iii]:=0
20f60     10 1F 02 F6 | 	mov	local01, local02
20f64     11 FD 01 F6 | 	mov	result2, local03
20f68     06 FC 65 F0 | 	shl	result2, #6
20f6c     FE 1E 02 F1 | 	add	local01, result2
20f70     0F 01 68 FC | 	wrlong	#0, local01
20f74                 | '   long[base+64*iii+4]:=0
20f74     10 1F 02 F6 | 	mov	local01, local02
20f78     11 FD 01 F6 | 	mov	result2, local03
20f7c     06 FC 65 F0 | 	shl	result2, #6
20f80     FE 1E 02 F1 | 	add	local01, result2
20f84     04 1E 06 F1 | 	add	local01, #4
20f88     0F 01 68 FC | 	wrlong	#0, local01
20f8c                 | '   long[base+64*iii+12]:=0
20f8c     10 25 02 F6 | 	mov	local04, local02
20f90     11 1F 02 F6 | 	mov	local01, local03
20f94     06 1E 66 F0 | 	shl	local01, #6
20f98     0F 25 02 F1 | 	add	local04, local01
20f9c     0C 24 06 F1 | 	add	local04, #12
20fa0     12 01 68 FC | 	wrlong	#0, local04
20fa4                 | '   long[base+64*iii+16]:=2 
20fa4     10 25 02 F6 | 	mov	local04, local02
20fa8     11 1F 02 F6 | 	mov	local01, local03
20fac     06 1E 66 F0 | 	shl	local01, #6
20fb0     0F 25 02 F1 | 	add	local04, local01
20fb4     10 24 06 F1 | 	add	local04, #16
20fb8     12 05 68 FC | 	wrlong	#2, local04
20fbc                 | '   word[base+64*iii+20]:=0
20fbc     10 25 02 F6 | 	mov	local04, local02
20fc0     11 1F 02 F6 | 	mov	local01, local03
20fc4     06 1E 66 F0 | 	shl	local01, #6
20fc8     0F 25 02 F1 | 	add	local04, local01
20fcc     14 24 06 F1 | 	add	local04, #20
20fd0     12 01 58 FC | 	wrword	#0, local04
20fd4                 | '   word[base+64*iii+22]:=8192
20fd4     10 25 02 F6 | 	mov	local04, local02
20fd8     11 1F 02 F6 | 	mov	local01, local03
20fdc     06 1E 66 F0 | 	shl	local01, #6
20fe0     0F 25 02 F1 | 	add	local04, local01
20fe4     16 24 06 F1 | 	add	local04, #22
20fe8     10 00 80 FF 
20fec     12 01 58 FC | 	wrword	##8192, local04
20ff0                 | '   word[base+64*iii+24]:=4000+2*iii
20ff0     11 25 02 F6 | 	mov	local04, local03
20ff4     01 24 66 F0 | 	shl	local04, #1
20ff8     07 00 00 FF 
20ffc     A0 1F 06 F6 | 	mov	local01, ##4000
21000     12 1F 02 F1 | 	add	local01, local04
21004     10 25 02 F6 | 	mov	local04, local02
21008     11 FD 01 F6 | 	mov	result2, local03
2100c     06 FC 65 F0 | 	shl	result2, #6
21010     FE 24 02 F1 | 	add	local04, result2
21014     18 24 06 F1 | 	add	local04, #24
21018     12 1F 52 FC | 	wrword	local01, local04
2101c                 | '   word[base+64*iii+26]:=2
2101c     10 25 02 F6 | 	mov	local04, local02
21020     11 1F 02 F6 | 	mov	local01, local03
21024     06 1E 66 F0 | 	shl	local01, #6
21028     0F 25 02 F1 | 	add	local04, local01
2102c     1A 24 06 F1 | 	add	local04, #26
21030     12 05 58 FC | 	wrword	#2, local04
21034                 | '   long [base+64*iii+8]:=@null | $C0000000
21034     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
21038     3E 1E 26 F4 | 	bith	local01, #62
2103c     10 25 02 F6 | 	mov	local04, local02
21040     11 17 02 F6 | 	mov	arg03, local03
21044     06 16 66 F0 | 	shl	arg03, #6
21048     0B 25 02 F1 | 	add	local04, arg03
2104c     08 24 06 F1 | 	add	local04, #8
21050     12 1F 62 FC | 	wrlong	local01, local04
21054                 | '   long[base+64*iii+32]:=0
21054     10 25 02 F6 | 	mov	local04, local02
21058     11 1F 02 F6 | 	mov	local01, local03
2105c     06 1E 66 F0 | 	shl	local01, #6
21060     0F 25 02 F1 | 	add	local04, local01
21064     20 24 06 F1 | 	add	local04, #32
21068     12 01 68 FC | 	wrlong	#0, local04
2106c                 | '   long[base+64*iii+36]:=0
2106c     10 25 02 F6 | 	mov	local04, local02
21070     11 1F 02 F6 | 	mov	local01, local03
21074     06 1E 66 F0 | 	shl	local01, #6
21078     0F 25 02 F1 | 	add	local04, local01
2107c     24 24 06 F1 | 	add	local04, #36
21080     12 01 68 FC | 	wrlong	#0, local04
21084                 | '   long[base+64*iii+40]:=0
21084     10 25 02 F6 | 	mov	local04, local02
21088     11 1F 02 F6 | 	mov	local01, local03
2108c     06 1E 66 F0 | 	shl	local01, #6
21090     0F 25 02 F1 | 	add	local04, local01
21094     28 24 06 F1 | 	add	local04, #40
21098     12 01 68 FC | 	wrlong	#0, local04
2109c                 | '   long[base+64*iii+44]:=0
2109c     10 25 02 F6 | 	mov	local04, local02
210a0     11 1F 02 F6 | 	mov	local01, local03
210a4     06 1E 66 F0 | 	shl	local01, #6
210a8     0F 25 02 F1 | 	add	local04, local01
210ac     2C 24 06 F1 | 	add	local04, #44
210b0     12 01 68 FC | 	wrlong	#0, local04
210b4                 | '   long[base+64*iii+28]:=0
210b4     10 25 02 F6 | 	mov	local04, local02
210b8     11 1F 02 F6 | 	mov	local01, local03
210bc     06 1E 66 F0 | 	shl	local01, #6
210c0     0F 25 02 F1 | 	add	local04, local01
210c4     1C 24 06 F1 | 	add	local04, #28
210c8     12 01 68 FC | 	wrlong	#0, local04
210cc     01 22 06 F1 | 	add	local03, #1
210d0     08 22 56 F2 | 	cmps	local03, #8 wc
210d4     88 FE 9F CD |  if_b	jmp	#LR__2730
210d8                 | LR__2731
210d8     02 00 00 FF 
210dc     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
210e0                 | '   
210e0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
210e0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
210e4     F2 16 02 F6 | 	mov	arg03, objptr
210e8     10 24 06 F6 | 	mov	local04, #16
210ec     28 16 62 FD | 	setq	arg03
210f0     0A 25 F2 FC | 	coginit	local04, arg02 wc
210f4     01 24 66 C6 |  if_b	neg	local04, #1
210f8                 | ' waitms(100)
210f8     64 12 06 F6 | 	mov	arg01, #100
210fc     78 07 B0 FD | 	call	#__system___waitms
21100                 | ' return cog,base
21100     10 FD 01 F6 | 	mov	result2, local02
21104     12 FB 01 F6 | 	mov	result1, local04
21108     A7 F0 03 F6 | 	mov	ptra, fp
2110c     B2 00 A0 FD | 	call	#popregs_
21110                 | _audio096_spin2_start_ret
21110     2D 00 64 FD | 	ret
21114                 | 
21114                 | ' 
21114                 | ' ' a simple play procedure to not poke everything. 
21114                 | ' 
21114                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
21114                 | _audio096_spin2_play
21114     0C E4 05 F1 | 	add	objptr, #12
21118     F2 00 02 F6 | 	mov	_var01, objptr
2111c     06 12 66 F0 | 	shl	arg01, #6
21120     09 01 02 F1 | 	add	_var01, arg01
21124     00 13 02 F6 | 	mov	arg01, _var01
21128     0C 12 06 F1 | 	add	arg01, #12
2112c     09 1B 62 FC | 	wrlong	arg05, arg01
21130     00 1C 56 F2 | 	cmps	arg06, #0 wc
21134     00 13 02 36 |  if_ae	mov	arg01, _var01
21138     10 12 06 31 |  if_ae	add	arg01, #16
2113c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
21140     02 1A 06 C1 |  if_b	add	arg05, #2
21144     00 13 02 C6 |  if_b	mov	arg01, _var01
21148     10 12 06 C1 |  if_b	add	arg01, #16
2114c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
21150     0B 13 52 F6 | 	abs	arg01, arg03 wc
21154     0F 1B 80 FF 
21158     09 1F 1A FD | 	qdiv	##3546895, arg01
2115c                 | ' 
2115c                 | ' base2:=@channel1[0]+64*channel
2115c                 | ' 
2115c                 | ' 
2115c                 | ' long[base2+12]:= len
2115c                 | ' if loop >=0 
2115c                 | '   long[base2+16]:= loop
2115c     0C E4 85 F1 | 	sub	objptr, #12
21160                 | ' else
21160                 | '   long[base2+16]:= len+2
21160                 | ' word[base2+20]:=vol
21160     00 13 02 F6 | 	mov	arg01, _var01
21164     14 12 06 F1 | 	add	arg01, #20
21168     09 19 52 FC | 	wrword	arg04, arg01
2116c                 | ' word[base2+24]:= 3546895/splfreq 
2116c     00 19 02 F6 | 	mov	arg04, _var01
21170     18 18 06 F1 | 	add	arg04, #24
21174                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
21174                 | ' long[base2+28]:=$40000000    
21174                 | ' long[base2+32]:=0    
21174                 | ' long[base2+36]:=0    
21174                 | ' long[base2+40]:=0    
21174                 | ' long[base2+44]:=0    
21174                 | ' long[base2+8]:=sample+$C0000000     
21174     00 00 60 FF 
21178     00 14 06 F1 | 	add	arg02, ##-1073741824
2117c     18 12 62 FD | 	getqx	arg01
21180     09 13 82 F6 | 	negc	arg01, arg01
21184     0C 13 52 FC | 	wrword	arg01, arg04
21188     00 13 02 F6 | 	mov	arg01, _var01
2118c     1A 12 06 F1 | 	add	arg01, #26
21190     09 01 5A FC | 	wrword	#256, arg01
21194     00 13 02 F6 | 	mov	arg01, _var01
21198     1C 12 06 F1 | 	add	arg01, #28
2119c     00 00 A0 FF 
211a0     09 01 68 FC | 	wrlong	##1073741824, arg01
211a4     00 13 02 F6 | 	mov	arg01, _var01
211a8     20 12 06 F1 | 	add	arg01, #32
211ac     09 01 68 FC | 	wrlong	#0, arg01
211b0     00 13 02 F6 | 	mov	arg01, _var01
211b4     24 12 06 F1 | 	add	arg01, #36
211b8     09 01 68 FC | 	wrlong	#0, arg01
211bc     00 13 02 F6 | 	mov	arg01, _var01
211c0     28 12 06 F1 | 	add	arg01, #40
211c4     09 01 68 FC | 	wrlong	#0, arg01
211c8     00 13 02 F6 | 	mov	arg01, _var01
211cc     2C 12 06 F1 | 	add	arg01, #44
211d0     09 01 68 FC | 	wrlong	#0, arg01
211d4     08 00 06 F1 | 	add	_var01, #8
211d8     00 15 62 FC | 	wrlong	arg02, _var01
211dc                 | _audio096_spin2_play_ret
211dc     2D 00 64 FD | 	ret
211e0                 | 
211e0                 | ' 
211e0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
211e0                 | _audio096_spin2_play8
211e0                 | ' 
211e0                 | ' base2:=@channel1[0]+64*channel
211e0     0C E4 05 F1 | 	add	objptr, #12
211e4     F2 00 02 F6 | 	mov	_var01, objptr
211e8     06 12 66 F0 | 	shl	arg01, #6
211ec     09 01 02 F1 | 	add	_var01, arg01
211f0                 | ' long[base2]:=0
211f0     00 01 68 FC | 	wrlong	#0, _var01
211f4                 | ' long[base2+8]:=sample+$40000000 
211f4     00 00 20 FF 
211f8     00 14 06 F1 | 	add	arg02, ##1073741824
211fc     00 13 02 F6 | 	mov	arg01, _var01
21200     08 12 06 F1 | 	add	arg01, #8
21204     09 15 62 FC | 	wrlong	arg02, arg01
21208                 | ' if loop>=0
21208     00 1C 56 F2 | 	cmps	arg06, #0 wc
2120c     0C E4 85 F1 | 	sub	objptr, #12
21210     1C 00 90 CD |  if_b	jmp	#LR__2740
21214                 | '   long[base2+12]:=loop
21214     00 15 02 F6 | 	mov	arg02, _var01
21218     0C 14 06 F1 | 	add	arg02, #12
2121c     0A 1D 62 FC | 	wrlong	arg06, arg02
21220                 | '   long[base2+16]:= len
21220     00 1D 02 F6 | 	mov	arg06, _var01
21224     10 1C 06 F1 | 	add	arg06, #16
21228     0E 1B 62 FC | 	wrlong	arg05, arg06
2122c     1C 00 90 FD | 	jmp	#LR__2741
21230                 | LR__2740
21230                 | ' else
21230                 | '   long[base2+12]:= len
21230     00 1D 02 F6 | 	mov	arg06, _var01
21234     0C 1C 06 F1 | 	add	arg06, #12
21238     0E 1B 62 FC | 	wrlong	arg05, arg06
2123c                 | '   long[base2+16]:= len+1
2123c     01 1A 06 F1 | 	add	arg05, #1
21240     00 13 02 F6 | 	mov	arg01, _var01
21244     10 12 06 F1 | 	add	arg01, #16
21248     09 1B 62 FC | 	wrlong	arg05, arg01
2124c                 | LR__2741
2124c     0B 17 52 F6 | 	abs	arg03, arg03 wc
21250     0F 1B 80 FF 
21254     0B 1F 1A FD | 	qdiv	##3546895, arg03
21258                 | ' word[base2+20]:=vol
21258     00 17 02 F6 | 	mov	arg03, _var01
2125c     14 16 06 F1 | 	add	arg03, #20
21260     0B 19 52 FC | 	wrword	arg04, arg03
21264                 | ' word[base2+24]:= 3546895 /splfreq 
21264     00 13 02 F6 | 	mov	arg01, _var01
21268     18 12 06 F1 | 	add	arg01, #24
2126c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2126c     1A 00 06 F1 | 	add	_var01, #26
21270     18 18 62 FD | 	getqx	arg04
21274     0C 19 82 F6 | 	negc	arg04, arg04
21278     09 19 52 FC | 	wrword	arg04, arg01
2127c     00 01 5A FC | 	wrword	#256, _var01
21280                 | _audio096_spin2_play8_ret
21280     2D 00 64 FD | 	ret
21284                 | 
21284                 | ' 'long[base2+28]:=$40000000
21284                 | ' 
21284                 | '     
21284                 | ' pub stop(channel) 'silence it
21284                 | _audio096_spin2_stop
21284                 | ' 
21284                 | ' word[@channel1[0]+64*channel+20]:=0
21284     0C E4 05 F1 | 	add	objptr, #12
21288     F2 00 02 F6 | 	mov	_var01, objptr
2128c     09 03 02 F6 | 	mov	_var02, arg01
21290     06 02 66 F0 | 	shl	_var02, #6
21294     01 01 02 F1 | 	add	_var01, _var02
21298     14 00 06 F1 | 	add	_var01, #20
2129c     00 01 58 FC | 	wrword	#0, _var01
212a0                 | ' word[@channel1[0]+64*channel+20]:=0
212a0     F2 00 02 F6 | 	mov	_var01, objptr
212a4     06 12 66 F0 | 	shl	arg01, #6
212a8     09 01 02 F1 | 	add	_var01, arg01
212ac     14 00 06 F1 | 	add	_var01, #20
212b0     00 01 58 FC | 	wrword	#0, _var01
212b4     0C E4 85 F1 | 	sub	objptr, #12
212b8                 | _audio096_spin2_stop_ret
212b8     2D 00 64 FD | 	ret
212bc                 | hubexit
212bc     81 00 80 FD | 	jmp	#cogexit
212c0                 | 
212c0                 | __system___setbaud
212c0     14 80 06 FB | 	rdlong	muldiva_, #20
212c4     09 83 02 F6 | 	mov	muldivb_, arg01
212c8     BA 00 A0 FD | 	call	#divide_
212cc     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
212d0                 | LR__2750
212d0     3E FA 9D FA | 	rdpin	result1, #62 wc
212d4     FE FC A1 F1 | 	subx	result2, result2
212d8     F4 FF 9F CD |  if_b	jmp	#LR__2750
212dc                 | LR__2751
212dc     40 7C 64 FD | 	dirl	#62
212e0     40 7E 64 FD | 	dirl	#63
212e4     F3 82 62 FC | 	wrlong	muldivb_, ptr___system__dat__
212e8     10 82 66 F0 | 	shl	muldivb_, #16
212ec     07 14 06 F6 | 	mov	arg02, #7
212f0     41 15 02 F1 | 	add	arg02, muldivb_
212f4     3E F8 0C FC | 	wrpin	#124, #62
212f8     3E 14 16 FC | 	wxpin	arg02, #62
212fc     3F 7C 0C FC | 	wrpin	#62, #63
21300     14 14 06 F1 | 	add	arg02, #20
21304     3F 14 16 FC | 	wxpin	arg02, #63
21308     41 7C 64 FD | 	dirh	#62
2130c     41 7E 64 FD | 	dirh	#63
21310                 | __system___setbaud_ret
21310     2D 00 64 FD | 	ret
21314                 | 
21314                 | __system___txraw
21314     01 4A 05 F6 | 	mov	COUNT_, #1
21318     A8 00 A0 FD | 	call	#pushregs_
2131c     09 1F 02 F6 | 	mov	local01, arg01
21320     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
21324                 | LR__2760
21324     3E FA 9D FA | 	rdpin	result1, #62 wc
21328     FE FC A1 F1 | 	subx	result2, result2
2132c     F4 FF 9F CD |  if_b	jmp	#LR__2760
21330                 | LR__2761
21330     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
21334     C2 01 00 AF 
21338     00 12 06 A6 |  if_e	mov	arg01, ##230400
2133c     80 FF BF AD |  if_e	call	#__system___setbaud
21340     58 7C 64 FD | 	drvl	#62
21344     3E 1E 26 FC | 	wypin	local01, #62
21348     01 FA 05 F6 | 	mov	result1, #1
2134c     A7 F0 03 F6 | 	mov	ptra, fp
21350     B2 00 A0 FD | 	call	#popregs_
21354                 | __system___txraw_ret
21354     2D 00 64 FD | 	ret
21358                 | 
21358                 | __system___rxraw
21358     0D 4A 05 F6 | 	mov	COUNT_, #13
2135c     A8 00 A0 FD | 	call	#pushregs_
21360     09 1F 02 F6 | 	mov	local01, arg01
21364     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21368     C2 01 00 AF 
2136c     00 12 06 A6 |  if_e	mov	arg01, ##230400
21370     4C FF BF AD |  if_e	call	#__system___setbaud
21374     00 1E 0E F2 | 	cmp	local01, #0 wz
21378     20 00 90 AD |  if_e	jmp	#LR__2770
2137c     14 22 06 FB | 	rdlong	local03, #20
21380     0A 22 46 F0 | 	shr	local03, #10
21384     11 1F 02 FD | 	qmul	local01, local03
21388     1A FA 61 FD | 	getct	result1
2138c     18 24 62 FD | 	getqx	local04
21390     12 FB 01 F1 | 	add	result1, local04
21394     FD 26 02 F6 | 	mov	local05, result1
21398     04 00 90 FD | 	jmp	#LR__2771
2139c                 | LR__2770
2139c     00 26 06 F6 | 	mov	local05, #0
213a0                 | LR__2771
213a0     01 28 66 F6 | 	neg	local06, #1
213a4     3F 2A 06 F6 | 	mov	local07, #63
213a8     00 2C 06 F6 | 	mov	local08, #0
213ac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
213b0     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
213b4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
213b8                 | LR__2772
213b8     08 2E 16 F4 | 	testb	local09, #8 wc
213bc     09 2E 76 F4 | 	testbn	local09, #9 andc
213c0     0A 2E 46 F0 | 	shr	local09, #10
213c4     01 2C 06 C6 |  if_b	mov	local08, #1
213c8     40 7E 6C 3D |  if_ae	testp	#63 wz
213cc     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
213d0     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
213d4     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
213d8                 | LR__2773
213d8     00 20 06 F6 | 	mov	local02, #0
213dc     00 2C 0E F2 | 	cmp	local08, #0 wz
213e0     01 20 66 56 |  if_ne	neg	local02, #1
213e4     00 30 06 F6 | 	mov	local10, #0
213e8     00 22 06 F6 | 	mov	local03, #0
213ec     00 1E 0E F2 | 	cmp	local01, #0 wz
213f0     01 22 66 56 |  if_ne	neg	local03, #1
213f4     00 24 06 F6 | 	mov	local04, #0
213f8     00 32 06 F6 | 	mov	local11, #0
213fc     13 35 02 F6 | 	mov	local12, local05
21400     1A FA 61 FD | 	getct	result1
21404     FD 36 02 F6 | 	mov	local13, result1
21408     1B 35 82 F1 | 	sub	local12, local13
2140c     00 34 56 F2 | 	cmps	local12, #0 wc
21410     00 32 26 C6 |  if_b	not	local11, #0
21414     00 32 0E F2 | 	cmp	local11, #0 wz
21418     00 24 26 56 |  if_ne	not	local04, #0
2141c     12 23 CA F7 | 	test	local03, local04 wz
21420     00 30 26 56 |  if_ne	not	local10, #0
21424     18 21 4A F5 | 	or	local02, local10 wz
21428     8C FF 9F AD |  if_e	jmp	#LR__2772
2142c     00 2C 0E F2 | 	cmp	local08, #0 wz
21430     17 29 02 56 |  if_ne	mov	local06, local09
21434     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
21438     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2143c     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
21440     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21444     14 FB 01 F6 | 	mov	result1, local06
21448     A7 F0 03 F6 | 	mov	ptra, fp
2144c     B2 00 A0 FD | 	call	#popregs_
21450                 | __system___rxraw_ret
21450     2D 00 64 FD | 	ret
21454                 | 
21454                 | __system___getus
21454     1A FC 71 FD | 	getct	result2 wc
21458     1A 00 62 FD | 	getct	_var01
2145c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
21460     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
21464     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21468     20 00 90 5D |  if_ne	jmp	#LR__2780
2146c     14 02 06 FB | 	rdlong	_var02, #20
21470     A1 07 00 FF 
21474     40 02 16 FD | 	qdiv	_var02, ##1000000
21478     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2147c     18 FA 61 FD | 	getqx	result1
21480     FD 02 02 F6 | 	mov	_var02, result1
21484     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21488     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2148c                 | LR__2780
2148c     01 FD 11 FD | 	qdiv	result2, _var02
21490     19 FC 61 FD | 	getqy	result2
21494     28 FC 61 FD | 	setq	result2
21498     01 01 12 FD | 	qdiv	_var01, _var02
2149c     18 FA 61 FD | 	getqx	result1
214a0                 | __system___getus_ret
214a0     2D 00 64 FD | 	ret
214a4                 | 
214a4                 | __system____builtin_memmove
214a4     09 01 02 F6 | 	mov	_var01, arg01
214a8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
214ac     10 00 90 CD |  if_b	jmp	#LR__2790
214b0     0A 03 02 F6 | 	mov	_var02, arg02
214b4     0B 03 02 F1 | 	add	_var02, arg03
214b8     01 13 52 F2 | 	cmps	arg01, _var02 wc
214bc     48 00 90 CD |  if_b	jmp	#LR__2796
214c0                 | LR__2790
214c0     0B 05 02 F6 | 	mov	_var03, arg03
214c4     02 04 4E F0 | 	shr	_var03, #2 wz
214c8     18 00 90 AD |  if_e	jmp	#LR__2795
214cc     97 0A 48 FB | 	callpa	#(@LR__2793-@LR__2791)>>2,fcache_load_ptr_
214d0                 | LR__2791
214d0     02 09 D8 FC | 	rep	@LR__2794, _var03
214d4                 | LR__2792
214d4     0A 05 02 FB | 	rdlong	_var03, arg02
214d8     09 05 62 FC | 	wrlong	_var03, arg01
214dc     04 12 06 F1 | 	add	arg01, #4
214e0     04 14 06 F1 | 	add	arg02, #4
214e4                 | LR__2793
214e4                 | LR__2794
214e4                 | LR__2795
214e4     02 16 CE F7 | 	test	arg03, #2 wz
214e8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
214ec     09 03 52 5C |  if_ne	wrword	_var02, arg01
214f0     02 12 06 51 |  if_ne	add	arg01, #2
214f4     02 14 06 51 |  if_ne	add	arg02, #2
214f8     01 16 CE F7 | 	test	arg03, #1 wz
214fc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
21500     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
21504     28 00 90 FD | 	jmp	#LR__2802
21508                 | LR__2796
21508     0B 13 02 F1 | 	add	arg01, arg03
2150c     0B 15 02 F1 | 	add	arg02, arg03
21510     0B 07 0A F6 | 	mov	_var04, arg03 wz
21514     18 00 90 AD |  if_e	jmp	#LR__2801
21518     97 0A 48 FB | 	callpa	#(@LR__2799-@LR__2797)>>2,fcache_load_ptr_
2151c                 | LR__2797
2151c     03 09 D8 FC | 	rep	@LR__2800, _var04
21520                 | LR__2798
21520     01 12 86 F1 | 	sub	arg01, #1
21524     01 14 86 F1 | 	sub	arg02, #1
21528     0A 03 C2 FA | 	rdbyte	_var02, arg02
2152c     09 03 42 FC | 	wrbyte	_var02, arg01
21530                 | LR__2799
21530                 | LR__2800
21530                 | LR__2801
21530                 | LR__2802
21530     00 FB 01 F6 | 	mov	result1, _var01
21534                 | __system____builtin_memmove_ret
21534     2D 00 64 FD | 	ret
21538                 | 
21538                 | __system____builtin_strcpy
21538     09 01 02 F6 | 	mov	_var01, arg01
2153c     97 0A 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
21540                 | LR__2810
21540     0A FB C9 FA | 	rdbyte	result1, arg02 wz
21544     09 FB 41 FC | 	wrbyte	result1, arg01
21548     01 14 06 F1 | 	add	arg02, #1
2154c     01 12 06 F1 | 	add	arg01, #1
21550     EC FF 9F 5D |  if_ne	jmp	#LR__2810
21554                 | LR__2811
21554     00 FB 01 F6 | 	mov	result1, _var01
21558                 | __system____builtin_strcpy_ret
21558     2D 00 64 FD | 	ret
2155c                 | 
2155c                 | __system____topofstack
2155c     00 4A 05 F6 | 	mov	COUNT_, #0
21560     A8 00 A0 FD | 	call	#pushregs_
21564     08 F0 07 F1 | 	add	ptra, #8
21568     04 4E 05 F1 | 	add	fp, #4
2156c     A7 12 62 FC | 	wrlong	arg01, fp
21570     A7 FA 01 F6 | 	mov	result1, fp
21574     04 4E 85 F1 | 	sub	fp, #4
21578     A7 F0 03 F6 | 	mov	ptra, fp
2157c     B2 00 A0 FD | 	call	#popregs_
21580                 | __system____topofstack_ret
21580     2D 00 64 FD | 	ret
21584                 | 
21584                 | __system___lockmem
21584     00 FA 05 F6 | 	mov	result1, #0
21588     01 FA 61 FD | 	cogid	result1
2158c     00 FB 05 F1 | 	add	result1, #256
21590                 | LR__2820
21590     09 01 0A FB | 	rdlong	_var01, arg01 wz
21594     09 FB 61 AC |  if_e	wrlong	result1, arg01
21598     09 01 02 AB |  if_e	rdlong	_var01, arg01
2159c     09 01 02 AB |  if_e	rdlong	_var01, arg01
215a0     FD 00 0A F2 | 	cmp	_var01, result1 wz
215a4     E8 FF 9F 5D |  if_ne	jmp	#LR__2820
215a8                 | __system___lockmem_ret
215a8     2D 00 64 FD | 	ret
215ac                 | 
215ac                 | __system___string_cmp
215ac     97 14 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
215b0                 | LR__2830
215b0     09 01 C2 FA | 	rdbyte	_var01, arg01
215b4     0A 03 C2 FA | 	rdbyte	_var02, arg02
215b8     00 05 02 F6 | 	mov	_var03, _var01
215bc     01 05 8A F1 | 	sub	_var03, _var02 wz
215c0     01 12 06 F1 | 	add	arg01, #1
215c4     01 14 06 F1 | 	add	arg02, #1
215c8     0C 00 90 5D |  if_ne	jmp	#LR__2832
215cc     00 00 0E F2 | 	cmp	_var01, #0 wz
215d0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
215d4     D8 FF 9F 5D |  if_ne	jmp	#LR__2830
215d8                 | LR__2831
215d8                 | LR__2832
215d8     02 FB 01 F6 | 	mov	result1, _var03
215dc                 | __system___string_cmp_ret
215dc     2D 00 64 FD | 	ret
215e0                 | 
215e0                 | __system___string_concat
215e0     05 4A 05 F6 | 	mov	COUNT_, #5
215e4     A8 00 A0 FD | 	call	#pushregs_
215e8     09 1F 02 F6 | 	mov	local01, arg01
215ec     0A 21 02 F6 | 	mov	local02, arg02
215f0     0F 13 02 F6 | 	mov	arg01, local01
215f4     09 23 02 F6 | 	mov	local03, arg01
215f8     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
215fc                 | LR__2840
215fc     11 FB C9 FA | 	rdbyte	result1, local03 wz
21600     01 22 06 51 |  if_ne	add	local03, #1
21604     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
21608                 | LR__2841
21608     09 23 82 F1 | 	sub	local03, arg01
2160c     11 25 02 F6 | 	mov	local04, local03
21610     10 13 02 F6 | 	mov	arg01, local02
21614     09 23 02 F6 | 	mov	local03, arg01
21618     97 06 48 FB | 	callpa	#(@LR__2843-@LR__2842)>>2,fcache_load_ptr_
2161c                 | LR__2842
2161c     11 FB C9 FA | 	rdbyte	result1, local03 wz
21620     01 22 06 51 |  if_ne	add	local03, #1
21624     F4 FF 9F 5D |  if_ne	jmp	#LR__2842
21628                 | LR__2843
21628     09 23 82 F1 | 	sub	local03, arg01
2162c     12 13 02 F6 | 	mov	arg01, local04
21630     11 13 02 F1 | 	add	arg01, local03
21634     01 12 06 F1 | 	add	arg01, #1
21638     2C 40 B0 FD | 	call	#__system___gc_alloc_managed
2163c     FD 26 0A F6 | 	mov	local05, result1 wz
21640     28 00 90 AD |  if_e	jmp	#LR__2844
21644     13 13 02 F6 | 	mov	arg01, local05
21648     0F 15 02 F6 | 	mov	arg02, local01
2164c     12 17 02 F6 | 	mov	arg03, local04
21650     50 FE BF FD | 	call	#__system____builtin_memmove
21654     13 13 02 F6 | 	mov	arg01, local05
21658     12 13 02 F1 | 	add	arg01, local04
2165c     01 22 06 F1 | 	add	local03, #1
21660     10 15 02 F6 | 	mov	arg02, local02
21664     11 17 02 F6 | 	mov	arg03, local03
21668     38 FE BF FD | 	call	#__system____builtin_memmove
2166c                 | LR__2844
2166c     13 FB 01 F6 | 	mov	result1, local05
21670     A7 F0 03 F6 | 	mov	ptra, fp
21674     B2 00 A0 FD | 	call	#popregs_
21678                 | __system___string_concat_ret
21678     2D 00 64 FD | 	ret
2167c                 | 
2167c                 | __system___tx
2167c     02 4A 05 F6 | 	mov	COUNT_, #2
21680     A8 00 A0 FD | 	call	#pushregs_
21684     09 1F 02 F6 | 	mov	local01, arg01
21688     0A 1E 0E F2 | 	cmp	local01, #10 wz
2168c     18 00 90 5D |  if_ne	jmp	#LR__2850
21690     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21694     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
21698     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2169c     02 20 CE F7 | 	test	local02, #2 wz
216a0     0D 12 06 56 |  if_ne	mov	arg01, #13
216a4     6C FC BF 5D |  if_ne	call	#__system___txraw
216a8                 | LR__2850
216a8     0F 13 02 F6 | 	mov	arg01, local01
216ac     64 FC BF FD | 	call	#__system___txraw
216b0     A7 F0 03 F6 | 	mov	ptra, fp
216b4     B2 00 A0 FD | 	call	#popregs_
216b8                 | __system___tx_ret
216b8     2D 00 64 FD | 	ret
216bc                 | 
216bc                 | __system___rx
216bc     01 4A 05 F6 | 	mov	COUNT_, #1
216c0     A8 00 A0 FD | 	call	#pushregs_
216c4                 | LR__2860
216c4     00 12 06 F6 | 	mov	arg01, #0
216c8     8C FC BF FD | 	call	#__system___rxraw
216cc     FD 1E 02 F6 | 	mov	local01, result1
216d0     FF FF 7F FF 
216d4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
216d8     E8 FF 9F AD |  if_e	jmp	#LR__2860
216dc     0D 1E 0E F2 | 	cmp	local01, #13 wz
216e0     14 00 90 5D |  if_ne	jmp	#LR__2861
216e4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
216e8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
216ec     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
216f0     02 FA CD F7 | 	test	result1, #2 wz
216f4     0A 1E 06 56 |  if_ne	mov	local01, #10
216f8                 | LR__2861
216f8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
216fc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21700     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21704     01 12 CE F7 | 	test	arg01, #1 wz
21708     1C 00 90 AD |  if_e	jmp	#LR__2864
2170c     7F 1E 0E F2 | 	cmp	local01, #127 wz
21710     0C 00 90 5D |  if_ne	jmp	#LR__2862
21714     08 12 06 F6 | 	mov	arg01, #8
21718     60 FF BF FD | 	call	#__system___tx
2171c     08 00 90 FD | 	jmp	#LR__2863
21720                 | LR__2862
21720     0F 13 02 F6 | 	mov	arg01, local01
21724     54 FF BF FD | 	call	#__system___tx
21728                 | LR__2863
21728                 | LR__2864
21728     0F FB 01 F6 | 	mov	result1, local01
2172c     A7 F0 03 F6 | 	mov	ptra, fp
21730     B2 00 A0 FD | 	call	#popregs_
21734                 | __system___rx_ret
21734     2D 00 64 FD | 	ret
21738                 | 
21738                 | __system___pinwrite
21738     09 01 02 F6 | 	mov	_var01, arg01
2173c     1F 00 06 F5 | 	and	_var01, #31
21740     20 12 CE F7 | 	test	arg01, #32 wz
21744     06 12 46 F0 | 	shr	arg01, #6
21748     09 13 CA F9 | 	bmask	arg01, arg01
2174c     00 13 62 F0 | 	shl	arg01, _var01
21750     00 15 62 F0 | 	shl	arg02, _var01
21754     1C 00 90 AD |  if_e	jmp	#LR__2870
21758     09 F7 43 F5 | 	or	dirb, arg01
2175c     FD 01 02 F6 | 	mov	_var01, outb
21760     09 01 22 F5 | 	andn	_var01, arg01
21764     09 15 02 F5 | 	and	arg02, arg01
21768     0A 01 42 F5 | 	or	_var01, arg02
2176c     00 FB 03 F6 | 	mov	outb, _var01
21770     18 00 90 FD | 	jmp	#LR__2871
21774                 | LR__2870
21774     09 F5 43 F5 | 	or	dira, arg01
21778     FC 01 02 F6 | 	mov	_var01, outa
2177c     09 01 22 F5 | 	andn	_var01, arg01
21780     09 15 02 F5 | 	and	arg02, arg01
21784     0A 01 42 F5 | 	or	_var01, arg02
21788     00 F9 03 F6 | 	mov	outa, _var01
2178c                 | LR__2871
2178c                 | __system___pinwrite_ret
2178c     2D 00 64 FD | 	ret
21790                 | 
21790                 | __system___basic_read_line
21790     06 4A 05 F6 | 	mov	COUNT_, #6
21794     A8 00 A0 FD | 	call	#pushregs_
21798     09 1F 02 F6 | 	mov	local01, arg01
2179c     00 20 06 F6 | 	mov	local02, #0
217a0     18 22 06 F6 | 	mov	local03, #24
217a4     00 24 06 F6 | 	mov	local04, #0
217a8     18 12 06 F6 | 	mov	arg01, #24
217ac     B8 3E B0 FD | 	call	#__system___gc_alloc_managed
217b0     FD 26 0A F6 | 	mov	local05, result1 wz
217b4     13 FB 01 A6 |  if_e	mov	result1, local05
217b8     B0 00 90 AD |  if_e	jmp	#LR__2883
217bc                 | LR__2880
217bc     0F 13 02 F6 | 	mov	arg01, local01
217c0     78 0B B0 FD | 	call	#__system___basic_get_char
217c4     FD 28 02 F6 | 	mov	local06, result1
217c8     01 28 56 F2 | 	cmps	local06, #1 wc
217cc     8C 00 90 CD |  if_b	jmp	#LR__2882
217d0     0A 28 0E F2 | 	cmp	local06, #10 wz
217d4     10 00 90 5D |  if_ne	jmp	#LR__2881
217d8     00 24 0E F2 | 	cmp	local04, #0 wz
217dc     01 20 56 52 |  if_ne	cmps	local02, #1 wc
217e0     01 20 86 11 |  if_a	sub	local02, #1
217e4     74 00 90 FD | 	jmp	#LR__2882
217e8                 | LR__2881
217e8     0D 28 0E F2 | 	cmp	local06, #13 wz
217ec     01 24 06 A6 |  if_e	mov	local04, #1
217f0     00 24 06 56 |  if_ne	mov	local04, #0
217f4     08 28 0E F2 | 	cmp	local06, #8 wz
217f8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
217fc     01 20 56 A2 |  if_e	cmps	local02, #1 wc
21800     01 20 86 21 |  if_nc_and_z	sub	local02, #1
21804     B4 FF 9F AD |  if_e	jmp	#LR__2880
21808     13 17 02 F6 | 	mov	arg03, local05
2180c     10 17 02 F1 | 	add	arg03, local02
21810     0B 29 42 FC | 	wrbyte	local06, arg03
21814     01 20 06 F1 | 	add	local02, #1
21818     11 21 0A F2 | 	cmp	local02, local03 wz
2181c     9C FF 9F 5D |  if_ne	jmp	#LR__2880
21820     11 13 02 F6 | 	mov	arg01, local03
21824     20 12 06 F1 | 	add	arg01, #32
21828     3C 3E B0 FD | 	call	#__system___gc_alloc_managed
2182c     FD 28 0A F6 | 	mov	local06, result1 wz
21830     14 FB 01 A6 |  if_e	mov	result1, local06
21834     34 00 90 AD |  if_e	jmp	#LR__2883
21838     14 13 02 F6 | 	mov	arg01, local06
2183c     13 15 02 F6 | 	mov	arg02, local05
21840     11 17 02 F6 | 	mov	arg03, local03
21844     5C FC BF FD | 	call	#__system____builtin_memmove
21848     20 22 06 F1 | 	add	local03, #32
2184c     13 13 02 F6 | 	mov	arg01, local05
21850     50 3F B0 FD | 	call	#__system___gc_free
21854     14 27 02 F6 | 	mov	local05, local06
21858     60 FF 9F FD | 	jmp	#LR__2880
2185c                 | LR__2882
2185c     13 29 02 F6 | 	mov	local06, local05
21860     10 29 02 F1 | 	add	local06, local02
21864     14 01 48 FC | 	wrbyte	#0, local06
21868     13 FB 01 F6 | 	mov	result1, local05
2186c                 | LR__2883
2186c     A7 F0 03 F6 | 	mov	ptra, fp
21870     B2 00 A0 FD | 	call	#popregs_
21874                 | __system___basic_read_line_ret
21874     2D 00 64 FD | 	ret
21878                 | 
21878                 | __system___waitms
21878     09 01 02 F6 | 	mov	_var01, arg01
2187c     1A 02 62 FD | 	getct	_var02
21880     14 04 06 FB | 	rdlong	_var03, #20
21884     97 14 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
21888                 | LR__2890
21888     01 00 00 FF 
2188c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
21890     1C 00 90 CD |  if_b	jmp	#LR__2892
21894     02 03 02 F1 | 	add	_var02, _var03
21898     01 13 02 F6 | 	mov	arg01, _var02
2189c     00 12 66 FA | 	addct1	arg01, #0
218a0     24 22 60 FD | 	waitct1
218a4     01 00 00 FF 
218a8     E8 01 86 F1 | 	sub	_var01, ##1000
218ac     D8 FF 9F FD | 	jmp	#LR__2890
218b0                 | LR__2891
218b0                 | LR__2892
218b0     01 00 56 F2 | 	cmps	_var01, #1 wc
218b4     28 00 90 CD |  if_b	jmp	#LR__2893
218b8     02 01 02 FD | 	qmul	_var01, _var03
218bc     01 00 00 FF 
218c0     E8 17 06 F6 | 	mov	arg03, ##1000
218c4     19 FA 61 FD | 	getqy	result1
218c8     18 12 62 FD | 	getqx	arg01
218cc     28 FA 61 FD | 	setq	result1
218d0     0B 13 12 FD | 	qdiv	arg01, arg03
218d4     18 12 62 FD | 	getqx	arg01
218d8     01 13 62 FA | 	addct1	arg01, _var02
218dc     24 22 60 FD | 	waitct1
218e0                 | LR__2893
218e0                 | __system___waitms_ret
218e0     2D 00 64 FD | 	ret
218e4                 | 
218e4                 | __system___waitus
218e4     09 01 02 F6 | 	mov	_var01, arg01
218e8     1A 02 62 FD | 	getct	_var02
218ec     14 04 06 FB | 	rdlong	_var03, #20
218f0     97 14 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
218f4                 | LR__2900
218f4     A1 07 00 FF 
218f8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
218fc     1C 00 90 CD |  if_b	jmp	#LR__2902
21900     02 03 02 F1 | 	add	_var02, _var03
21904     01 13 02 F6 | 	mov	arg01, _var02
21908     00 12 66 FA | 	addct1	arg01, #0
2190c     24 22 60 FD | 	waitct1
21910     A1 07 00 FF 
21914     40 00 86 F1 | 	sub	_var01, ##1000000
21918     D8 FF 9F FD | 	jmp	#LR__2900
2191c                 | LR__2901
2191c                 | LR__2902
2191c     01 00 56 F2 | 	cmps	_var01, #1 wc
21920     28 00 90 CD |  if_b	jmp	#LR__2903
21924     02 01 02 FD | 	qmul	_var01, _var03
21928     A1 07 00 FF 
2192c     40 16 06 F6 | 	mov	arg03, ##1000000
21930     19 FA 61 FD | 	getqy	result1
21934     18 12 62 FD | 	getqx	arg01
21938     28 FA 61 FD | 	setq	result1
2193c     0B 13 12 FD | 	qdiv	arg01, arg03
21940     18 FA 61 FD | 	getqx	result1
21944     FD 02 62 FA | 	addct1	_var02, result1
21948     24 22 60 FD | 	waitct1
2194c                 | LR__2903
2194c                 | __system___waitus_ret
2194c     2D 00 64 FD | 	ret
21950                 | 
21950                 | __system___mount
21950     0B 4A 05 F6 | 	mov	COUNT_, #11
21954     A8 00 A0 FD | 	call	#pushregs_
21958     09 1F 02 F6 | 	mov	local01, arg01
2195c     0A 21 0A F6 | 	mov	local02, arg02 wz
21960     01 22 66 F6 | 	neg	local03, #1
21964     01 FA 65 A6 |  if_e	neg	result1, #1
21968     98 02 90 AD |  if_e	jmp	#LR__2925
2196c     0F FB C1 FA | 	rdbyte	result1, local01
21970     2F FA 0D F2 | 	cmp	result1, #47 wz
21974     28 00 90 5D |  if_ne	jmp	#LR__2912
21978     0F 13 02 F6 | 	mov	arg01, local01
2197c     09 25 02 F6 | 	mov	local04, arg01
21980     97 06 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
21984                 | LR__2910
21984     12 FB C9 FA | 	rdbyte	result1, local04 wz
21988     01 24 06 51 |  if_ne	add	local04, #1
2198c     F4 FF 9F 5D |  if_ne	jmp	#LR__2910
21990                 | LR__2911
21990     09 25 82 F1 | 	sub	local04, arg01
21994     12 FB 01 F6 | 	mov	result1, local04
21998     10 FA 55 F2 | 	cmps	result1, #16 wc
2199c     14 00 90 CD |  if_b	jmp	#LR__2913
219a0                 | LR__2912
219a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
219a4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
219a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
219ac     01 FA 65 F6 | 	neg	result1, #1
219b0     50 02 90 FD | 	jmp	#LR__2925
219b4                 | LR__2913
219b4     00 26 06 F6 | 	mov	local05, #0
219b8                 | LR__2914
219b8     04 26 56 F2 | 	cmps	local05, #4 wc
219bc     B0 00 90 3D |  if_ae	jmp	#LR__2919
219c0     13 13 02 F6 | 	mov	arg01, local05
219c4     02 12 66 F0 | 	shl	arg01, #2
219c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
219cc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
219d0     09 FB 09 FB | 	rdlong	result1, arg01 wz
219d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
219d8     00 22 56 A2 |  if_e	cmps	local03, #0 wc
219dc     13 23 02 86 |  if_c_and_z	mov	local03, local05
219e0     84 00 90 8D |  if_c_and_z	jmp	#LR__2918
219e4     13 13 02 F6 | 	mov	arg01, local05
219e8     02 12 66 F0 | 	shl	arg01, #2
219ec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
219f0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
219f4     09 13 02 FB | 	rdlong	arg01, arg01
219f8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
219fc     09 25 02 F6 | 	mov	local04, arg01
21a00     97 06 48 FB | 	callpa	#(@LR__2916-@LR__2915)>>2,fcache_load_ptr_
21a04                 | LR__2915
21a04     12 FB C9 FA | 	rdbyte	result1, local04 wz
21a08     01 24 06 51 |  if_ne	add	local04, #1
21a0c     F4 FF 9F 5D |  if_ne	jmp	#LR__2915
21a10                 | LR__2916
21a10     09 25 82 F1 | 	sub	local04, arg01
21a14     12 29 02 F6 | 	mov	local06, local04
21a18     14 13 02 F6 | 	mov	arg01, local06
21a1c     0F 13 02 F1 | 	add	arg01, local01
21a20     09 FB C1 FA | 	rdbyte	result1, arg01
21a24     2F FA 0D F2 | 	cmp	result1, #47 wz
21a28     14 2B 02 56 |  if_ne	mov	local07, local06
21a2c     0F 2B 02 51 |  if_ne	add	local07, local01
21a30     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
21a34     30 00 90 5D |  if_ne	jmp	#LR__2917
21a38     13 17 02 F6 | 	mov	arg03, local05
21a3c     02 16 66 F0 | 	shl	arg03, #2
21a40     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21a44     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21a48     0B 15 02 FB | 	rdlong	arg02, arg03
21a4c     0F 13 02 F6 | 	mov	arg01, local01
21a50     14 17 02 F6 | 	mov	arg03, local06
21a54     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21a58     4C 51 B0 FD | 	call	#__system__strncmp
21a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
21a60     13 23 02 A6 |  if_e	mov	local03, local05
21a64     08 00 90 AD |  if_e	jmp	#LR__2919
21a68                 | LR__2917
21a68                 | LR__2918
21a68     01 26 06 F1 | 	add	local05, #1
21a6c     48 FF 9F FD | 	jmp	#LR__2914
21a70                 | LR__2919
21a70     FF FF 7F FF 
21a74     FF 23 0E F2 | 	cmp	local03, ##-1 wz
21a78     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21a7c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
21a80     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21a84     01 FA 65 A6 |  if_e	neg	result1, #1
21a88     78 01 90 AD |  if_e	jmp	#LR__2925
21a8c     11 27 02 F6 | 	mov	local05, local03
21a90     13 2B 02 F6 | 	mov	local07, local05
21a94     02 2A 66 F0 | 	shl	local07, #2
21a98     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21a9c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
21aa0     15 29 0A FB | 	rdlong	local06, local07 wz
21aa4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21aa8     58 00 90 AD |  if_e	jmp	#LR__2920
21aac     4C 28 06 F1 | 	add	local06, #76
21ab0     14 2B 0A FB | 	rdlong	local07, local06 wz
21ab4     4C 28 86 F1 | 	sub	local06, #76
21ab8     48 00 90 AD |  if_e	jmp	#LR__2920
21abc     4C 28 06 F1 | 	add	local06, #76
21ac0     14 2B 02 FB | 	rdlong	local07, local06
21ac4     15 23 02 F6 | 	mov	local03, local07
21ac8     13 2A 46 F7 | 	zerox	local07, #19
21acc     14 22 46 F0 | 	shr	local03, #20
21ad0     02 22 66 F0 | 	shl	local03, #2
21ad4     ED 22 02 F1 | 	add	local03, __methods__
21ad8     11 23 02 FB | 	rdlong	local03, local03
21adc     13 29 02 F6 | 	mov	local06, local05
21ae0     02 28 66 F0 | 	shl	local06, #2
21ae4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21ae8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21aec     14 13 02 FB | 	rdlong	arg01, local06
21af0     F2 28 02 F6 | 	mov	local06, objptr
21af4     15 E5 01 F6 | 	mov	objptr, local07
21af8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21afc     2D 22 62 FD | 	call	local03
21b00     14 E5 01 F6 | 	mov	objptr, local06
21b04                 | LR__2920
21b04     13 2D 02 F6 | 	mov	local08, local05
21b08     02 2C 66 F0 | 	shl	local08, #2
21b0c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21b10     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21b14     16 21 62 FC | 	wrlong	local02, local08
21b18     00 20 0E F2 | 	cmp	local02, #0 wz
21b1c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21b20     18 00 90 5D |  if_ne	jmp	#LR__2921
21b24     02 26 66 F0 | 	shl	local05, #2
21b28     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21b2c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21b30     13 01 68 FC | 	wrlong	#0, local05
21b34     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21b38     C4 00 90 FD | 	jmp	#LR__2924
21b3c                 | LR__2921
21b3c     13 2F 02 F6 | 	mov	local09, local05
21b40     04 2E 66 F0 | 	shl	local09, #4
21b44     24 E6 05 F1 | 	add	ptr___system__dat__, #36
21b48     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
21b4c     17 13 02 F6 | 	mov	arg01, local09
21b50     0F 15 02 F6 | 	mov	arg02, local01
21b54     10 16 06 F6 | 	mov	arg03, #16
21b58     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
21b5c     9C 4F B0 FD | 	call	#__system__strncpy
21b60     48 20 06 F1 | 	add	local02, #72
21b64     10 2D 0A FB | 	rdlong	local08, local02 wz
21b68     48 20 86 F1 | 	sub	local02, #72
21b6c     7C 00 90 AD |  if_e	jmp	#LR__2923
21b70     48 20 06 F1 | 	add	local02, #72
21b74     10 2D 02 FB | 	rdlong	local08, local02
21b78     16 31 02 F6 | 	mov	local10, local08
21b7c     13 2C 46 F7 | 	zerox	local08, #19
21b80     14 30 46 F0 | 	shr	local10, #20
21b84     02 30 66 F0 | 	shl	local10, #2
21b88     ED 30 02 F1 | 	add	local10, __methods__
21b8c     18 31 02 FB | 	rdlong	local10, local10
21b90     17 13 02 F6 | 	mov	arg01, local09
21b94     F2 32 02 F6 | 	mov	local11, objptr
21b98     16 E5 01 F6 | 	mov	objptr, local08
21b9c     2D 30 62 FD | 	call	local10
21ba0     19 E5 01 F6 | 	mov	objptr, local11
21ba4     FD 12 0A F6 | 	mov	arg01, result1 wz
21ba8     40 00 90 AD |  if_e	jmp	#LR__2922
21bac     13 2D 02 F6 | 	mov	local08, local05
21bb0     02 2C 66 F0 | 	shl	local08, #2
21bb4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21bb8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21bbc     16 01 68 FC | 	wrlong	#0, local08
21bc0     02 26 66 F0 | 	shl	local05, #2
21bc4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21bc8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21bcc     13 01 68 FC | 	wrlong	#0, local05
21bd0     09 13 6A F6 | 	neg	arg01, arg01 wz
21bd4     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
21bd8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21bdc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21be0     01 FA 65 56 |  if_ne	neg	result1, #1
21be4     00 FA 05 A6 |  if_e	mov	result1, #0
21be8     18 00 90 FD | 	jmp	#LR__2925
21bec                 | LR__2922
21bec                 | LR__2923
21bec     02 26 66 F0 | 	shl	local05, #2
21bf0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21bf4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21bf8     13 2F 62 FC | 	wrlong	local09, local05
21bfc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21c00                 | LR__2924
21c00     00 FA 05 F6 | 	mov	result1, #0
21c04                 | LR__2925
21c04     A7 F0 03 F6 | 	mov	ptra, fp
21c08     B2 00 A0 FD | 	call	#popregs_
21c0c                 | __system___mount_ret
21c0c     2D 00 64 FD | 	ret
21c10                 | 
21c10                 | __system___chdir
21c10     00 4A 05 F6 | 	mov	COUNT_, #0
21c14     A8 00 A0 FD | 	call	#pushregs_
21c18     40 F0 07 F1 | 	add	ptra, #64
21c1c     04 4E 05 F1 | 	add	fp, #4
21c20     A7 12 62 FC | 	wrlong	arg01, fp
21c24     04 4E 05 F1 | 	add	fp, #4
21c28     A7 14 02 F6 | 	mov	arg02, fp
21c2c     08 4E 85 F1 | 	sub	fp, #8
21c30     AC 4A B0 FD | 	call	#__system__stat
21c34     3C 4E 05 F1 | 	add	fp, #60
21c38     A7 FA 61 FC | 	wrlong	result1, fp
21c3c     3C 4E 85 F1 | 	sub	fp, #60
21c40     00 FA 0D F2 | 	cmp	result1, #0 wz
21c44     3C 4E 05 51 |  if_ne	add	fp, #60
21c48     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21c4c     3C 4E 85 51 |  if_ne	sub	fp, #60
21c50     BC 00 90 5D |  if_ne	jmp	#LR__2932
21c54     10 4E 05 F1 | 	add	fp, #16
21c58     A7 12 02 FB | 	rdlong	arg01, fp
21c5c     10 4E 85 F1 | 	sub	fp, #16
21c60     78 00 00 FF 
21c64     00 12 06 F5 | 	and	arg01, ##61440
21c68     08 00 00 FF 
21c6c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21c70     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
21c74     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21c78     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21c7c     01 FA 65 56 |  if_ne	neg	result1, #1
21c80     8C 00 90 5D |  if_ne	jmp	#LR__2932
21c84     04 4E 05 F1 | 	add	fp, #4
21c88     A7 16 02 FB | 	rdlong	arg03, fp
21c8c     04 4E 85 F1 | 	sub	fp, #4
21c90     0B 17 C2 FA | 	rdbyte	arg03, arg03
21c94     2F 16 0E F2 | 	cmp	arg03, #47 wz
21c98     24 00 90 5D |  if_ne	jmp	#LR__2930
21c9c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21ca0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21ca4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21ca8     04 4E 05 F1 | 	add	fp, #4
21cac     A7 14 02 FB | 	rdlong	arg02, fp
21cb0     04 4E 85 F1 | 	sub	fp, #4
21cb4     00 17 06 F6 | 	mov	arg03, #256
21cb8     40 4E B0 FD | 	call	#__system__strncpy
21cbc     4C 00 90 FD | 	jmp	#LR__2931
21cc0                 | LR__2930
21cc0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21cc4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21cc8     38 4E 05 F1 | 	add	fp, #56
21ccc     A7 12 62 FC | 	wrlong	arg01, fp
21cd0     38 4E 85 F1 | 	sub	fp, #56
21cd4     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
21cd8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21cdc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21ce0     00 17 06 F6 | 	mov	arg03, #256
21ce4     14 4E B0 FD | 	call	#__system__strncpy
21ce8     38 4E 05 F1 | 	add	fp, #56
21cec     A7 12 02 FB | 	rdlong	arg01, fp
21cf0     34 4E 85 F1 | 	sub	fp, #52
21cf4     A7 14 02 FB | 	rdlong	arg02, fp
21cf8     04 4E 85 F1 | 	sub	fp, #4
21cfc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21d00     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
21d04     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21d08     10 00 B0 FD | 	call	#__system____getvfsforfile
21d0c                 | LR__2931
21d0c     00 FA 05 F6 | 	mov	result1, #0
21d10                 | LR__2932
21d10     A7 F0 03 F6 | 	mov	ptra, fp
21d14     B2 00 A0 FD | 	call	#popregs_
21d18                 | __system___chdir_ret
21d18     2D 00 64 FD | 	ret
21d1c                 | 
21d1c                 | __system____getvfsforfile
21d1c     0E 4A 05 F6 | 	mov	COUNT_, #14
21d20     A8 00 A0 FD | 	call	#pushregs_
21d24     09 1F 02 F6 | 	mov	local01, arg01
21d28     0A 21 02 F6 | 	mov	local02, arg02
21d2c     0B 23 02 F6 | 	mov	local03, arg03
21d30     97 10 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
21d34                 | LR__2940
21d34     10 FB C1 FA | 	rdbyte	result1, local02
21d38     2F FA 0D F2 | 	cmp	result1, #47 wz
21d3c     01 20 06 A1 |  if_e	add	local02, #1
21d40     10 25 C2 AA |  if_e	rdbyte	local04, local02
21d44     01 20 86 A1 |  if_e	sub	local02, #1
21d48     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
21d4c     01 20 06 A1 |  if_e	add	local02, #1
21d50     E0 FF 9F AD |  if_e	jmp	#LR__2940
21d54                 | LR__2941
21d54     10 25 C2 FA | 	rdbyte	local04, local02
21d58     2F 24 0E F2 | 	cmp	local04, #47 wz
21d5c     14 00 90 5D |  if_ne	jmp	#LR__2942
21d60     0F 13 02 F6 | 	mov	arg01, local01
21d64     10 15 02 F6 | 	mov	arg02, local02
21d68     00 17 06 F6 | 	mov	arg03, #256
21d6c     8C 4D B0 FD | 	call	#__system__strncpy
21d70     7C 00 90 FD | 	jmp	#LR__2944
21d74                 | LR__2942
21d74     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21d78     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21d7c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21d80     0F 13 02 F6 | 	mov	arg01, local01
21d84     00 17 06 F6 | 	mov	arg03, #256
21d88     70 4D B0 FD | 	call	#__system__strncpy
21d8c     10 25 CA FA | 	rdbyte	local04, local02 wz
21d90     5C 00 90 AD |  if_e	jmp	#LR__2943
21d94     10 25 C2 FA | 	rdbyte	local04, local02
21d98     2E 24 0E F2 | 	cmp	local04, #46 wz
21d9c     01 20 06 A1 |  if_e	add	local02, #1
21da0     10 27 C2 AA |  if_e	rdbyte	local05, local02
21da4     01 20 86 A1 |  if_e	sub	local02, #1
21da8     13 29 02 A6 |  if_e	mov	local06, local05
21dac     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21db0     3C 00 90 AD |  if_e	jmp	#LR__2943
21db4     0F 27 C2 FA | 	rdbyte	local05, local01
21db8     2F 26 0E F2 | 	cmp	local05, #47 wz
21dbc     01 1E 06 A1 |  if_e	add	local01, #1
21dc0     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21dc4     01 1E 86 A1 |  if_e	sub	local01, #1
21dc8     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21dcc     88 01 00 5F 
21dd0     94 14 06 56 |  if_ne	mov	arg02, ##@LR__5070
21dd4     0F 13 02 56 |  if_ne	mov	arg01, local01
21dd8     00 17 06 56 |  if_ne	mov	arg03, #256
21ddc     68 4D B0 5D |  if_ne	call	#__system__strncat
21de0     0F 13 02 F6 | 	mov	arg01, local01
21de4     10 15 02 F6 | 	mov	arg02, local02
21de8     00 17 06 F6 | 	mov	arg03, #256
21dec     58 4D B0 FD | 	call	#__system__strncat
21df0                 | LR__2943
21df0                 | LR__2944
21df0     0F 13 02 F6 | 	mov	arg01, local01
21df4     10 4F B0 FD | 	call	#__system___normalizeName
21df8     0F 25 CA FA | 	rdbyte	local04, local01 wz
21dfc     1C 00 90 AD |  if_e	jmp	#LR__2945
21e00     0F 25 C2 FA | 	rdbyte	local04, local01
21e04     2F 24 0E F2 | 	cmp	local04, #47 wz
21e08     01 1E 06 A1 |  if_e	add	local01, #1
21e0c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
21e10     01 1E 86 A1 |  if_e	sub	local01, #1
21e14     00 28 4E A2 |  if_e	cmps	local06, #0 wz
21e18     18 00 90 5D |  if_ne	jmp	#LR__2946
21e1c                 | LR__2945
21e1c     01 00 00 FF 
21e20     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
21e24     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21e28     01 00 00 FF 
21e2c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
21e30     EC 01 90 FD | 	jmp	#LR__2960
21e34                 | LR__2946
21e34     00 2A 06 F6 | 	mov	local07, #0
21e38                 | LR__2947
21e38     04 2A 56 F2 | 	cmps	local07, #4 wc
21e3c     CC 01 90 3D |  if_ae	jmp	#LR__2959
21e40     15 29 02 F6 | 	mov	local06, local07
21e44     02 28 66 F0 | 	shl	local06, #2
21e48     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21e4c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21e50     14 29 0A FB | 	rdlong	local06, local06 wz
21e54     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21e58     A8 01 90 AD |  if_e	jmp	#LR__2958
21e5c     15 25 02 F6 | 	mov	local04, local07
21e60     02 24 66 F0 | 	shl	local04, #2
21e64     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21e68     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21e6c     12 13 02 FB | 	rdlong	arg01, local04
21e70     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21e74     09 2D 02 F6 | 	mov	local08, arg01
21e78     97 06 48 FB | 	callpa	#(@LR__2949-@LR__2948)>>2,fcache_load_ptr_
21e7c                 | LR__2948
21e7c     16 FB C9 FA | 	rdbyte	result1, local08 wz
21e80     01 2C 06 51 |  if_ne	add	local08, #1
21e84     F4 FF 9F 5D |  if_ne	jmp	#LR__2948
21e88                 | LR__2949
21e88     09 2D 82 F1 | 	sub	local08, arg01
21e8c     16 2F 02 F6 | 	mov	local09, local08
21e90     17 25 02 F6 | 	mov	local04, local09
21e94     0F 25 02 F1 | 	add	local04, local01
21e98     12 29 C2 FA | 	rdbyte	local06, local04
21e9c     2F 28 0E F2 | 	cmp	local06, #47 wz
21ea0     17 31 02 56 |  if_ne	mov	local10, local09
21ea4     0F 31 02 51 |  if_ne	add	local10, local01
21ea8     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21eac     54 01 90 5D |  if_ne	jmp	#LR__2957
21eb0     15 17 02 F6 | 	mov	arg03, local07
21eb4     02 16 66 F0 | 	shl	arg03, #2
21eb8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21ebc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21ec0     0B 15 02 FB | 	rdlong	arg02, arg03
21ec4     17 17 02 F6 | 	mov	arg03, local09
21ec8     0F 13 02 F6 | 	mov	arg01, local01
21ecc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21ed0     D4 4C B0 FD | 	call	#__system__strncmp
21ed4     00 FA 4D F2 | 	cmps	result1, #0 wz
21ed8     28 01 90 5D |  if_ne	jmp	#LR__2957
21edc     15 33 02 F6 | 	mov	local11, local07
21ee0     02 32 66 F0 | 	shl	local11, #2
21ee4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21ee8     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21eec     19 35 02 FB | 	rdlong	local12, local11
21ef0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21ef4     97 22 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
21ef8                 | LR__2950
21ef8     17 29 02 F6 | 	mov	local06, local09
21efc     01 28 06 F1 | 	add	local06, #1
21f00     0F 29 02 F1 | 	add	local06, local01
21f04     14 33 C2 FA | 	rdbyte	local11, local06
21f08     2E 32 0E F2 | 	cmp	local11, #46 wz
21f0c     2C 00 90 5D |  if_ne	jmp	#LR__2952
21f10     17 33 02 F6 | 	mov	local11, local09
21f14     02 32 06 F1 | 	add	local11, #2
21f18     0F 33 02 F1 | 	add	local11, local01
21f1c     19 31 C2 FA | 	rdbyte	local10, local11
21f20     2F 30 0E F2 | 	cmp	local10, #47 wz
21f24     17 37 02 56 |  if_ne	mov	local13, local09
21f28     02 36 06 51 |  if_ne	add	local13, #2
21f2c     0F 37 02 51 |  if_ne	add	local13, local01
21f30     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
21f34     01 2E 06 A1 |  if_e	add	local09, #1
21f38     BC FF 9F AD |  if_e	jmp	#LR__2950
21f3c                 | LR__2951
21f3c                 | LR__2952
21f3c     00 22 0E F2 | 	cmp	local03, #0 wz
21f40     11 13 02 56 |  if_ne	mov	arg01, local03
21f44     0F 15 02 56 |  if_ne	mov	arg02, local01
21f48     00 17 06 56 |  if_ne	mov	arg03, #256
21f4c     AC 4B B0 5D |  if_ne	call	#__system__strncpy
21f50     0F 15 02 F6 | 	mov	arg02, local01
21f54     17 15 02 F1 | 	add	arg02, local09
21f58     01 14 06 F1 | 	add	arg02, #1
21f5c     0F 13 02 F6 | 	mov	arg01, local01
21f60     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21f64     0F 13 02 F6 | 	mov	arg01, local01
21f68     09 2D 02 F6 | 	mov	local08, arg01
21f6c     97 06 48 FB | 	callpa	#(@LR__2954-@LR__2953)>>2,fcache_load_ptr_
21f70                 | LR__2953
21f70     16 FB C9 FA | 	rdbyte	result1, local08 wz
21f74     01 2C 06 51 |  if_ne	add	local08, #1
21f78     F4 FF 9F 5D |  if_ne	jmp	#LR__2953
21f7c                 | LR__2954
21f7c     09 2D 82 F1 | 	sub	local08, arg01
21f80     16 2F 02 F6 | 	mov	local09, local08
21f84                 | LR__2955
21f84     01 2E 56 F2 | 	cmps	local09, #1 wc
21f88     70 00 90 CD |  if_b	jmp	#LR__2956
21f8c     17 25 02 F6 | 	mov	local04, local09
21f90     0F 25 02 F1 | 	add	local04, local01
21f94     12 33 C2 FA | 	rdbyte	local11, local04
21f98     2F 32 0E F2 | 	cmp	local11, #47 wz
21f9c     17 33 02 A6 |  if_e	mov	local11, local09
21fa0     0F 33 02 A1 |  if_e	add	local11, local01
21fa4     19 01 48 AC |  if_e	wrbyte	#0, local11
21fa8     01 2E 86 A1 |  if_e	sub	local09, #1
21fac     D4 FF 9F AD |  if_e	jmp	#LR__2955
21fb0     17 25 02 F6 | 	mov	local04, local09
21fb4     0F 25 02 F1 | 	add	local04, local01
21fb8     12 33 C2 FA | 	rdbyte	local11, local04
21fbc     2E 32 0E F2 | 	cmp	local11, #46 wz
21fc0     38 00 90 5D |  if_ne	jmp	#LR__2956
21fc4     02 2E 56 F2 | 	cmps	local09, #2 wc
21fc8     30 00 90 CD |  if_b	jmp	#LR__2956
21fcc     17 39 02 F6 | 	mov	local14, local09
21fd0     01 38 86 F1 | 	sub	local14, #1
21fd4     0F 39 02 F1 | 	add	local14, local01
21fd8     1C 27 C2 FA | 	rdbyte	local05, local14
21fdc     2F 26 0E F2 | 	cmp	local05, #47 wz
21fe0     18 00 90 5D |  if_ne	jmp	#LR__2956
21fe4     17 25 02 F6 | 	mov	local04, local09
21fe8     01 24 86 F1 | 	sub	local04, #1
21fec     0F 25 02 F1 | 	add	local04, local01
21ff0     12 01 48 FC | 	wrbyte	#0, local04
21ff4     02 2E 86 F1 | 	sub	local09, #2
21ff8     88 FF 9F FD | 	jmp	#LR__2955
21ffc                 | LR__2956
21ffc     1A FB 01 F6 | 	mov	result1, local12
22000     1C 00 90 FD | 	jmp	#LR__2960
22004                 | LR__2957
22004                 | LR__2958
22004     01 2A 06 F1 | 	add	local07, #1
22008     2C FE 9F FD | 	jmp	#LR__2947
2200c                 | LR__2959
2200c     02 00 00 FF 
22010     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22014     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22018     02 00 00 FF 
2201c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22020                 | LR__2960
22020     A7 F0 03 F6 | 	mov	ptra, fp
22024     B2 00 A0 FD | 	call	#popregs_
22028                 | __system____getvfsforfile_ret
22028     2D 00 64 FD | 	ret
2202c                 | 
2202c                 | __system___basic_open
2202c     05 4A 05 F6 | 	mov	COUNT_, #5
22030     A8 00 A0 FD | 	call	#pushregs_
22034     0A 1F 02 F6 | 	mov	local01, arg02
22038     0B 21 02 F6 | 	mov	local02, arg03
2203c     0C 23 02 F6 | 	mov	local03, arg04
22040     00 24 06 F6 | 	mov	local04, #0
22044     8C 4A B0 FD | 	call	#__system____getftab
22048     FD 26 0A F6 | 	mov	local05, result1 wz
2204c     18 00 90 5D |  if_ne	jmp	#LR__2970
22050     EE 12 02 F6 | 	mov	arg01, abortchain
22054     0C 14 06 F6 | 	mov	arg02, #12
22058     01 16 06 F6 | 	mov	arg03, #1
2205c     DA 00 A0 FD | 	call	#__longjmp
22060     01 FA 65 F6 | 	neg	result1, #1
22064     14 01 90 FD | 	jmp	#LR__2979
22068                 | LR__2970
22068     08 26 06 F1 | 	add	local05, #8
2206c     13 FB 09 FB | 	rdlong	result1, local05 wz
22070     08 26 86 F1 | 	sub	local05, #8
22074     13 13 02 56 |  if_ne	mov	arg01, local05
22078     EC 40 B0 5D |  if_ne	call	#__system___closeraw
2207c     00 1E 0E F2 | 	cmp	local01, #0 wz
22080     00 20 0E A2 |  if_e	cmp	local02, #0 wz
22084     00 22 0E A2 |  if_e	cmp	local03, #0 wz
22088     3C 00 90 AD |  if_e	jmp	#LR__2972
2208c     0C 12 06 F6 | 	mov	arg01, #12
22090     D4 35 B0 FD | 	call	#__system___gc_alloc_managed
22094     FD 24 0A F6 | 	mov	local04, result1 wz
22098     18 00 90 5D |  if_ne	jmp	#LR__2971
2209c     EE 12 02 F6 | 	mov	arg01, abortchain
220a0     07 14 06 F6 | 	mov	arg02, #7
220a4     01 16 06 F6 | 	mov	arg03, #1
220a8     DA 00 A0 FD | 	call	#__longjmp
220ac     01 FA 65 F6 | 	neg	result1, #1
220b0     C8 00 90 FD | 	jmp	#LR__2979
220b4                 | LR__2971
220b4     12 01 68 FC | 	wrlong	#0, local04
220b8     04 24 06 F1 | 	add	local04, #4
220bc     12 01 68 FC | 	wrlong	#0, local04
220c0     04 24 86 F1 | 	sub	local04, #4
220c4     13 25 62 FC | 	wrlong	local04, local05
220c8                 | LR__2972
220c8     00 1E 0E F2 | 	cmp	local01, #0 wz
220cc     20 00 90 AD |  if_e	jmp	#LR__2973
220d0     12 1F 62 FC | 	wrlong	local01, local04
220d4     12 FB 01 F6 | 	mov	result1, local04
220d8     00 90 04 FF 
220dc     00 FA 45 F5 | 	or	result1, ##153092096
220e0     1C 26 06 F1 | 	add	local05, #28
220e4     13 FB 61 FC | 	wrlong	result1, local05
220e8     1C 26 86 F1 | 	sub	local05, #28
220ec     0C 00 90 FD | 	jmp	#LR__2974
220f0                 | LR__2973
220f0     1C 26 06 F1 | 	add	local05, #28
220f4     13 01 68 FC | 	wrlong	#0, local05
220f8     1C 26 86 F1 | 	sub	local05, #28
220fc                 | LR__2974
220fc     00 20 0E F2 | 	cmp	local02, #0 wz
22100     28 00 90 AD |  if_e	jmp	#LR__2975
22104     04 24 06 F1 | 	add	local04, #4
22108     12 21 62 FC | 	wrlong	local02, local04
2210c     04 24 86 F1 | 	sub	local04, #4
22110     12 FB 01 F6 | 	mov	result1, local04
22114     00 98 04 FF 
22118     00 FA 45 F5 | 	or	result1, ##154140672
2211c     20 26 06 F1 | 	add	local05, #32
22120     13 FB 61 FC | 	wrlong	result1, local05
22124     20 26 86 F1 | 	sub	local05, #32
22128     0C 00 90 FD | 	jmp	#LR__2976
2212c                 | LR__2975
2212c     20 26 06 F1 | 	add	local05, #32
22130     13 01 68 FC | 	wrlong	#0, local05
22134     20 26 86 F1 | 	sub	local05, #32
22138                 | LR__2976
22138     00 22 0E F2 | 	cmp	local03, #0 wz
2213c     24 00 90 AD |  if_e	jmp	#LR__2977
22140     08 24 06 F1 | 	add	local04, #8
22144     12 23 62 FC | 	wrlong	local03, local04
22148     08 24 86 F1 | 	sub	local04, #8
2214c     00 A0 04 FF 
22150     00 24 46 F5 | 	or	local04, ##155189248
22154     24 26 06 F1 | 	add	local05, #36
22158     13 25 62 FC | 	wrlong	local04, local05
2215c     24 26 86 F1 | 	sub	local05, #36
22160     0C 00 90 FD | 	jmp	#LR__2978
22164                 | LR__2977
22164     24 26 06 F1 | 	add	local05, #36
22168     13 01 68 FC | 	wrlong	#0, local05
2216c     24 26 86 F1 | 	sub	local05, #36
22170                 | LR__2978
22170     08 26 06 F1 | 	add	local05, #8
22174     13 0F 68 FC | 	wrlong	#7, local05
22178     00 FA 05 F6 | 	mov	result1, #0
2217c                 | LR__2979
2217c     A7 F0 03 F6 | 	mov	ptra, fp
22180     B2 00 A0 FD | 	call	#popregs_
22184                 | __system___basic_open_ret
22184     2D 00 64 FD | 	ret
22188                 | 
22188                 | __system___basic_open_string
22188     04 4A 05 F6 | 	mov	COUNT_, #4
2218c     A8 00 A0 FD | 	call	#pushregs_
22190     0A 1F 02 F6 | 	mov	local01, arg02
22194     0B 21 02 F6 | 	mov	local02, arg03
22198     38 49 B0 FD | 	call	#__system____getftab
2219c     FD 22 0A F6 | 	mov	local03, result1 wz
221a0     18 00 90 5D |  if_ne	jmp	#LR__2980
221a4     EE 12 02 F6 | 	mov	arg01, abortchain
221a8     0C 14 06 F6 | 	mov	arg02, #12
221ac     01 16 06 F6 | 	mov	arg03, #1
221b0     DA 00 A0 FD | 	call	#__longjmp
221b4     01 FA 65 F6 | 	neg	result1, #1
221b8     58 00 90 FD | 	jmp	#LR__2982
221bc                 | LR__2980
221bc     08 22 06 F1 | 	add	local03, #8
221c0     11 19 0A FB | 	rdlong	arg04, local03 wz
221c4     08 22 86 F1 | 	sub	local03, #8
221c8     11 13 02 56 |  if_ne	mov	arg01, local03
221cc     98 3F B0 5D |  if_ne	call	#__system___closeraw
221d0     0F 15 02 F6 | 	mov	arg02, local01
221d4     10 17 02 F6 | 	mov	arg03, local02
221d8     11 13 02 F6 | 	mov	arg01, local03
221dc     B6 19 06 F6 | 	mov	arg04, #438
221e0     80 3C B0 FD | 	call	#__system___openraw
221e4     FD 24 02 F6 | 	mov	local04, result1
221e8     00 24 56 F2 | 	cmps	local04, #0 wc
221ec     20 00 90 3D |  if_ae	jmp	#LR__2981
221f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
221f4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
221f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
221fc     EE 12 02 F6 | 	mov	arg01, abortchain
22200     01 16 06 F6 | 	mov	arg03, #1
22204     DA 00 A0 FD | 	call	#__longjmp
22208     01 FA 65 F6 | 	neg	result1, #1
2220c     04 00 90 FD | 	jmp	#LR__2982
22210                 | LR__2981
22210     12 FB 01 F6 | 	mov	result1, local04
22214                 | LR__2982
22214     A7 F0 03 F6 | 	mov	ptra, fp
22218     B2 00 A0 FD | 	call	#popregs_
2221c                 | __system___basic_open_string_ret
2221c     2D 00 64 FD | 	ret
22220                 | 
22220                 | __system___basic_print_char
22220     03 4A 05 F6 | 	mov	COUNT_, #3
22224     A8 00 A0 FD | 	call	#pushregs_
22228     0A 1F 02 F6 | 	mov	local01, arg02
2222c     F8 4F B0 FD | 	call	#__system___gettxfunc
22230     FD 20 0A F6 | 	mov	local02, result1 wz
22234     00 FA 05 A6 |  if_e	mov	result1, #0
22238     30 00 90 AD |  if_e	jmp	#LR__2990
2223c     10 23 02 F6 | 	mov	local03, local02
22240     13 20 46 F7 | 	zerox	local02, #19
22244     14 22 46 F0 | 	shr	local03, #20
22248     02 22 66 F0 | 	shl	local03, #2
2224c     ED 22 02 F1 | 	add	local03, __methods__
22250     11 23 02 FB | 	rdlong	local03, local03
22254     0F 13 02 F6 | 	mov	arg01, local01
22258     F2 1E 02 F6 | 	mov	local01, objptr
2225c     10 E5 01 F6 | 	mov	objptr, local02
22260     2D 22 62 FD | 	call	local03
22264     0F E5 01 F6 | 	mov	objptr, local01
22268     01 FA 05 F6 | 	mov	result1, #1
2226c                 | LR__2990
2226c     A7 F0 03 F6 | 	mov	ptra, fp
22270     B2 00 A0 FD | 	call	#popregs_
22274                 | __system___basic_print_char_ret
22274     2D 00 64 FD | 	ret
22278                 | 
22278                 | __system___basic_print_string
22278     03 4A 05 F6 | 	mov	COUNT_, #3
2227c     A8 00 A0 FD | 	call	#pushregs_
22280     0A 1F 02 F6 | 	mov	local01, arg02
22284     0B 21 02 F6 | 	mov	local02, arg03
22288     9C 4F B0 FD | 	call	#__system___gettxfunc
2228c     FD 22 0A F6 | 	mov	local03, result1 wz
22290     00 FA 05 A6 |  if_e	mov	result1, #0
22294     18 00 90 AD |  if_e	jmp	#LR__3000
22298     00 1E 0E F2 | 	cmp	local01, #0 wz
2229c     00 FA 05 A6 |  if_e	mov	result1, #0
222a0     11 13 02 56 |  if_ne	mov	arg01, local03
222a4     10 15 02 56 |  if_ne	mov	arg02, local02
222a8     0F 17 02 56 |  if_ne	mov	arg03, local01
222ac     08 02 B0 5D |  if_ne	call	#__system___fmtstr
222b0                 | LR__3000
222b0     A7 F0 03 F6 | 	mov	ptra, fp
222b4     B2 00 A0 FD | 	call	#popregs_
222b8                 | __system___basic_print_string_ret
222b8     2D 00 64 FD | 	ret
222bc                 | 
222bc                 | __system___basic_print_integer
222bc     04 4A 05 F6 | 	mov	COUNT_, #4
222c0     A8 00 A0 FD | 	call	#pushregs_
222c4     0A 1F 02 F6 | 	mov	local01, arg02
222c8     0B 21 02 F6 | 	mov	local02, arg03
222cc     0C 23 02 F6 | 	mov	local03, arg04
222d0     54 4F B0 FD | 	call	#__system___gettxfunc
222d4     FD 24 0A F6 | 	mov	local04, result1 wz
222d8     00 FA 05 A6 |  if_e	mov	result1, #0
222dc     12 13 02 56 |  if_ne	mov	arg01, local04
222e0     10 15 02 56 |  if_ne	mov	arg02, local02
222e4     0F 17 02 56 |  if_ne	mov	arg03, local01
222e8     11 19 02 56 |  if_ne	mov	arg04, local03
222ec     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
222f0     A7 F0 03 F6 | 	mov	ptra, fp
222f4     B2 00 A0 FD | 	call	#popregs_
222f8                 | __system___basic_print_integer_ret
222f8     2D 00 64 FD | 	ret
222fc                 | 
222fc                 | __system___basic_print_unsigned
222fc     03 4A 05 F6 | 	mov	COUNT_, #3
22300     A8 00 A0 FD | 	call	#pushregs_
22304     0A 1F 02 F6 | 	mov	local01, arg02
22308     0B 21 02 F6 | 	mov	local02, arg03
2230c     0C 23 02 F6 | 	mov	local03, arg04
22310     14 4F B0 FD | 	call	#__system___gettxfunc
22314     FD 12 0A F6 | 	mov	arg01, result1 wz
22318     00 FA 05 A6 |  if_e	mov	result1, #0
2231c     3A 20 26 54 |  if_ne	bith	local02, #58
22320     10 15 02 56 |  if_ne	mov	arg02, local02
22324     0F 17 02 56 |  if_ne	mov	arg03, local01
22328     11 19 02 56 |  if_ne	mov	arg04, local03
2232c     74 02 B0 5D |  if_ne	call	#__system___fmtnum
22330     A7 F0 03 F6 | 	mov	ptra, fp
22334     B2 00 A0 FD | 	call	#popregs_
22338                 | __system___basic_print_unsigned_ret
22338     2D 00 64 FD | 	ret
2233c                 | 
2233c                 | __system___basic_get_char
2233c     03 4A 05 F6 | 	mov	COUNT_, #3
22340     A8 00 A0 FD | 	call	#pushregs_
22344     24 4F B0 FD | 	call	#__system___getrxfunc
22348     FD 1E 0A F6 | 	mov	local01, result1 wz
2234c     01 FA 65 A6 |  if_e	neg	result1, #1
22350     28 00 90 AD |  if_e	jmp	#LR__3010
22354     0F 21 02 F6 | 	mov	local02, local01
22358     13 1E 46 F7 | 	zerox	local01, #19
2235c     14 20 46 F0 | 	shr	local02, #20
22360     02 20 66 F0 | 	shl	local02, #2
22364     ED 20 02 F1 | 	add	local02, __methods__
22368     10 21 02 FB | 	rdlong	local02, local02
2236c     F2 22 02 F6 | 	mov	local03, objptr
22370     0F E5 01 F6 | 	mov	objptr, local01
22374     2D 20 62 FD | 	call	local02
22378     11 E5 01 F6 | 	mov	objptr, local03
2237c                 | LR__3010
2237c     A7 F0 03 F6 | 	mov	ptra, fp
22380     B2 00 A0 FD | 	call	#popregs_
22384                 | __system___basic_get_char_ret
22384     2D 00 64 FD | 	ret
22388                 | 
22388                 | __system___basic_put
22388     04 4A 05 F6 | 	mov	COUNT_, #4
2238c     A8 00 A0 FD | 	call	#pushregs_
22390     0D 1F 02 F6 | 	mov	local01, arg05
22394     0F 19 02 FD | 	qmul	arg04, local01
22398     09 21 02 F6 | 	mov	local02, arg01
2239c     0B 23 02 F6 | 	mov	local03, arg03
223a0     00 14 0E F2 | 	cmp	arg02, #0 wz
223a4     01 14 86 51 |  if_ne	sub	arg02, #1
223a8     10 13 02 56 |  if_ne	mov	arg01, local02
223ac     00 16 06 56 |  if_ne	mov	arg03, #0
223b0     18 24 62 FD | 	getqx	local04
223b4     A4 44 B0 5D |  if_ne	call	#__system__lseek
223b8     11 15 02 F6 | 	mov	arg02, local03
223bc     12 17 02 F6 | 	mov	arg03, local04
223c0     10 13 02 F6 | 	mov	arg01, local02
223c4     E0 43 B0 FD | 	call	#__system__write
223c8     FD 24 02 F6 | 	mov	local04, result1
223cc     01 24 56 F2 | 	cmps	local04, #1 wc
223d0     10 00 90 CD |  if_b	jmp	#LR__3020
223d4     12 81 02 F6 | 	mov	muldiva_, local04
223d8     0F 83 02 F6 | 	mov	muldivb_, local01
223dc     BA 00 A0 FD | 	call	#divide_
223e0     41 25 02 F6 | 	mov	local04, muldivb_
223e4                 | LR__3020
223e4     12 FB 01 F6 | 	mov	result1, local04
223e8     A7 F0 03 F6 | 	mov	ptra, fp
223ec     B2 00 A0 FD | 	call	#popregs_
223f0                 | __system___basic_put_ret
223f0     2D 00 64 FD | 	ret
223f4                 | 
223f4                 | __system___basic_get
223f4     04 4A 05 F6 | 	mov	COUNT_, #4
223f8     A8 00 A0 FD | 	call	#pushregs_
223fc     0D 1F 02 F6 | 	mov	local01, arg05
22400     0F 19 02 FD | 	qmul	arg04, local01
22404     09 21 02 F6 | 	mov	local02, arg01
22408     0B 23 02 F6 | 	mov	local03, arg03
2240c     00 14 0E F2 | 	cmp	arg02, #0 wz
22410     01 14 86 51 |  if_ne	sub	arg02, #1
22414     10 13 02 56 |  if_ne	mov	arg01, local02
22418     00 16 06 56 |  if_ne	mov	arg03, #0
2241c     18 24 62 FD | 	getqx	local04
22420     38 44 B0 5D |  if_ne	call	#__system__lseek
22424     11 15 02 F6 | 	mov	arg02, local03
22428     12 17 02 F6 | 	mov	arg03, local04
2242c     10 13 02 F6 | 	mov	arg01, local02
22430     B0 43 B0 FD | 	call	#__system__read
22434     FD 24 02 F6 | 	mov	local04, result1
22438     01 24 56 F2 | 	cmps	local04, #1 wc
2243c     10 00 90 CD |  if_b	jmp	#LR__3030
22440     12 81 02 F6 | 	mov	muldiva_, local04
22444     0F 83 02 F6 | 	mov	muldivb_, local01
22448     BA 00 A0 FD | 	call	#divide_
2244c     41 25 02 F6 | 	mov	local04, muldivb_
22450                 | LR__3030
22450     12 FB 01 F6 | 	mov	result1, local04
22454     A7 F0 03 F6 | 	mov	ptra, fp
22458     B2 00 A0 FD | 	call	#popregs_
2245c                 | __system___basic_get_ret
2245c     2D 00 64 FD | 	ret
22460                 | 
22460                 | __system___fmtchar
22460     00 4A 05 F6 | 	mov	COUNT_, #0
22464     A8 00 A0 FD | 	call	#pushregs_
22468     10 F0 07 F1 | 	add	ptra, #16
2246c     04 4E 05 F1 | 	add	fp, #4
22470     A7 12 62 FC | 	wrlong	arg01, fp
22474     04 4E 05 F1 | 	add	fp, #4
22478     A7 14 62 FC | 	wrlong	arg02, fp
2247c     04 4E 05 F1 | 	add	fp, #4
22480     A7 16 62 FC | 	wrlong	arg03, fp
22484     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
22488     A7 16 62 FC | 	wrlong	arg03, fp
2248c     08 4E 85 F1 | 	sub	fp, #8
22490     A7 12 02 FB | 	rdlong	arg01, fp
22494     04 4E 05 F1 | 	add	fp, #4
22498     A7 14 02 FB | 	rdlong	arg02, fp
2249c     04 4E 05 F1 | 	add	fp, #4
224a0     A7 16 02 F6 | 	mov	arg03, fp
224a4     0C 4E 85 F1 | 	sub	fp, #12
224a8     0C 00 B0 FD | 	call	#__system___fmtstr
224ac     A7 F0 03 F6 | 	mov	ptra, fp
224b0     B2 00 A0 FD | 	call	#popregs_
224b4                 | __system___fmtchar_ret
224b4     2D 00 64 FD | 	ret
224b8                 | 
224b8                 | __system___fmtstr
224b8     09 4A 05 F6 | 	mov	COUNT_, #9
224bc     A8 00 A0 FD | 	call	#pushregs_
224c0     09 1F 02 F6 | 	mov	local01, arg01
224c4     0A 21 02 F6 | 	mov	local02, arg02
224c8     0B 23 02 F6 | 	mov	local03, arg03
224cc     10 19 E2 F8 | 	getbyte	arg04, local02, #0
224d0     11 13 02 F6 | 	mov	arg01, local03
224d4     09 25 02 F6 | 	mov	local04, arg01
224d8     97 06 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
224dc                 | LR__3040
224dc     12 FB C9 FA | 	rdbyte	result1, local04 wz
224e0     01 24 06 51 |  if_ne	add	local04, #1
224e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3040
224e8                 | LR__3041
224e8     09 25 82 F1 | 	sub	local04, arg01
224ec     00 18 0E F2 | 	cmp	arg04, #0 wz
224f0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
224f4     10 15 02 F6 | 	mov	arg02, local02
224f8     12 17 02 F6 | 	mov	arg03, local04
224fc     0F 13 02 F6 | 	mov	arg01, local01
22500     02 18 06 F6 | 	mov	arg04, #2
22504     C0 49 B0 FD | 	call	#__system___fmtpad
22508     FD 26 02 F6 | 	mov	local05, result1
2250c     00 26 56 F2 | 	cmps	local05, #0 wc
22510     13 FB 01 C6 |  if_b	mov	result1, local05
22514     80 00 90 CD |  if_b	jmp	#LR__3044
22518     01 24 56 F2 | 	cmps	local04, #1 wc
2251c     50 00 90 CD |  if_b	jmp	#LR__3043
22520     12 29 02 F6 | 	mov	local06, local04
22524                 | LR__3042
22524     0F 2B 02 F6 | 	mov	local07, local01
22528     0F 2D 02 F6 | 	mov	local08, local01
2252c     13 2A 46 F7 | 	zerox	local07, #19
22530     14 2C 46 F0 | 	shr	local08, #20
22534     02 2C 66 F0 | 	shl	local08, #2
22538     ED 2C 02 F1 | 	add	local08, __methods__
2253c     16 2D 02 FB | 	rdlong	local08, local08
22540     11 13 C2 FA | 	rdbyte	arg01, local03
22544     F2 2E 02 F6 | 	mov	local09, objptr
22548     15 E5 01 F6 | 	mov	objptr, local07
2254c     01 22 06 F1 | 	add	local03, #1
22550     2D 2C 62 FD | 	call	local08
22554     17 E5 01 F6 | 	mov	objptr, local09
22558     FD 2E 02 F6 | 	mov	local09, result1
2255c     00 2E 56 F2 | 	cmps	local09, #0 wc
22560     17 FB 01 C6 |  if_b	mov	result1, local09
22564     30 00 90 CD |  if_b	jmp	#LR__3044
22568     17 27 02 F1 | 	add	local05, local09
2256c     ED 29 6E FB | 	djnz	local06, #LR__3042
22570                 | LR__3043
22570     10 15 02 F6 | 	mov	arg02, local02
22574     12 17 02 F6 | 	mov	arg03, local04
22578     0F 13 02 F6 | 	mov	arg01, local01
2257c     01 18 06 F6 | 	mov	arg04, #1
22580     44 49 B0 FD | 	call	#__system___fmtpad
22584     FD 2E 02 F6 | 	mov	local09, result1
22588     00 2E 56 F2 | 	cmps	local09, #0 wc
2258c     17 FB 01 C6 |  if_b	mov	result1, local09
22590     17 27 02 31 |  if_ae	add	local05, local09
22594     13 FB 01 36 |  if_ae	mov	result1, local05
22598                 | LR__3044
22598     A7 F0 03 F6 | 	mov	ptra, fp
2259c     B2 00 A0 FD | 	call	#popregs_
225a0                 | __system___fmtstr_ret
225a0     2D 00 64 FD | 	ret
225a4                 | 
225a4                 | __system___fmtnum
225a4     0B 4A 05 F6 | 	mov	COUNT_, #11
225a8     A8 00 A0 FD | 	call	#pushregs_
225ac     09 1F 02 F6 | 	mov	local01, arg01
225b0     0A 21 02 F6 | 	mov	local02, arg02
225b4     0B 23 02 F6 | 	mov	local03, arg03
225b8     0C 25 02 F6 | 	mov	local04, arg04
225bc     F8 27 02 F6 | 	mov	local05, ptra
225c0     13 29 02 F6 | 	mov	local06, local05
225c4     00 2A 06 F6 | 	mov	local07, #0
225c8     10 2D 02 F6 | 	mov	local08, local02
225cc     10 2C 46 F0 | 	shr	local08, #16
225d0     3F 2C 06 F5 | 	and	local08, #63
225d4     10 2F E2 F8 | 	getbyte	local09, local02, #0
225d8     10 31 02 F6 | 	mov	local10, local02
225dc     1A 30 46 F0 | 	shr	local10, #26
225e0     03 30 06 F5 | 	and	local10, #3
225e4     18 33 02 F6 | 	mov	local11, local10
225e8     01 2C 56 F2 | 	cmps	local08, #1 wc
225ec     44 F0 07 F1 | 	add	ptra, #68
225f0     01 2C 86 31 |  if_ae	sub	local08, #1
225f4     41 2E 56 F2 | 	cmps	local09, #65 wc
225f8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
225fc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
22600     03 32 0E F2 | 	cmp	local11, #3 wz
22604     00 32 06 A6 |  if_e	mov	local11, #0
22608     00 22 56 52 |  if_ne	cmps	local03, #0 wc
2260c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
22610     11 23 62 46 |  if_c_and_nz	neg	local03, local03
22614     00 32 0E F2 | 	cmp	local11, #0 wz
22618     4C 00 90 AD |  if_e	jmp	#LR__3053
2261c     01 2A 06 F6 | 	mov	local07, #1
22620     17 2D 0A F2 | 	cmp	local08, local09 wz
22624     18 00 90 5D |  if_ne	jmp	#LR__3051
22628     05 2C 6E FB | 	djnz	local08, #LR__3050
2262c     0F 13 02 F6 | 	mov	arg01, local01
22630     10 15 02 F6 | 	mov	arg02, local02
22634     23 16 06 F6 | 	mov	arg03, #35
22638     24 FE BF FD | 	call	#__system___fmtchar
2263c     88 00 90 FD | 	jmp	#LR__3057
22640                 | LR__3050
22640                 | LR__3051
22640     02 32 0E F2 | 	cmp	local11, #2 wz
22644     14 31 02 A6 |  if_e	mov	local10, local06
22648     01 28 06 A1 |  if_e	add	local06, #1
2264c     18 41 48 AC |  if_e	wrbyte	#32, local10
22650     14 00 90 AD |  if_e	jmp	#LR__3052
22654     04 32 0E F2 | 	cmp	local11, #4 wz
22658     14 5B 48 AC |  if_e	wrbyte	#45, local06
2265c     01 28 06 A1 |  if_e	add	local06, #1
22660     14 57 48 5C |  if_ne	wrbyte	#43, local06
22664     01 28 06 51 |  if_ne	add	local06, #1
22668                 | LR__3052
22668                 | LR__3053
22668     14 13 02 F6 | 	mov	arg01, local06
2266c     11 15 02 F6 | 	mov	arg02, local03
22670     12 17 02 F6 | 	mov	arg03, local04
22674     16 19 02 F6 | 	mov	arg04, local08
22678     00 1A 06 F6 | 	mov	arg05, #0
2267c     1D 20 2E F4 | 	testbn	local02, #29 wz
22680     01 1A 06 56 |  if_ne	mov	arg05, #1
22684     08 49 B0 FD | 	call	#__system___uitoa
22688     FD 2A 02 F1 | 	add	local07, result1
2268c     17 2B 5A F2 | 	cmps	local07, local09 wcz
22690     24 00 90 ED |  if_be	jmp	#LR__3056
22694     97 0E 48 FB | 	callpa	#(@LR__3055-@LR__3054)>>2,fcache_load_ptr_
22698                 | LR__3054
22698     17 31 02 F6 | 	mov	local10, local09
2269c     01 30 56 F2 | 	cmps	local10, #1 wc
226a0     01 2E 86 F1 | 	sub	local09, #1
226a4     14 31 02 36 |  if_ae	mov	local10, local06
226a8     01 28 06 31 |  if_ae	add	local06, #1
226ac     18 47 48 3C |  if_ae	wrbyte	#35, local10
226b0     E4 FF 9F 3D |  if_ae	jmp	#LR__3054
226b4                 | LR__3055
226b4     14 01 48 FC | 	wrbyte	#0, local06
226b8                 | LR__3056
226b8     0F 13 02 F6 | 	mov	arg01, local01
226bc     10 15 02 F6 | 	mov	arg02, local02
226c0     13 17 02 F6 | 	mov	arg03, local05
226c4     F0 FD BF FD | 	call	#__system___fmtstr
226c8                 | LR__3057
226c8     A7 F0 03 F6 | 	mov	ptra, fp
226cc     B2 00 A0 FD | 	call	#popregs_
226d0                 | __system___fmtnum_ret
226d0     2D 00 64 FD | 	ret
226d4                 | 
226d4                 | __system___fmtfloat
226d4     10 4A 05 F6 | 	mov	COUNT_, #16
226d8     A8 00 A0 FD | 	call	#pushregs_
226dc     24 F1 07 F1 | 	add	ptra, #292
226e0     04 4E 05 F1 | 	add	fp, #4
226e4     A7 12 62 FC | 	wrlong	arg01, fp
226e8     04 4E 05 F1 | 	add	fp, #4
226ec     A7 14 62 FC | 	wrlong	arg02, fp
226f0     04 4E 05 F1 | 	add	fp, #4
226f4     A7 16 62 FC | 	wrlong	arg03, fp
226f8     04 4E 05 F1 | 	add	fp, #4
226fc     A7 18 62 FC | 	wrlong	arg04, fp
22700     0C 4E 05 F1 | 	add	fp, #12
22704     A7 14 68 FC | 	wrlong	#10, fp
22708     08 4E 05 F1 | 	add	fp, #8
2270c     A7 00 68 FC | 	wrlong	#0, fp
22710     08 4E 05 F1 | 	add	fp, #8
22714     A7 00 68 FC | 	wrlong	#0, fp
22718     08 4E 05 F1 | 	add	fp, #8
2271c     A7 00 68 FC | 	wrlong	#0, fp
22720     04 4E 05 F1 | 	add	fp, #4
22724     A7 04 68 FC | 	wrlong	#2, fp
22728     04 4E 05 F1 | 	add	fp, #4
2272c     A7 00 68 FC | 	wrlong	#0, fp
22730     04 4E 05 F1 | 	add	fp, #4
22734     A7 00 68 FC | 	wrlong	#0, fp
22738     04 4E 05 F1 | 	add	fp, #4
2273c     A7 00 68 FC | 	wrlong	#0, fp
22740     04 4E 05 F1 | 	add	fp, #4
22744     A7 00 68 FC | 	wrlong	#0, fp
22748     18 4E 05 F1 | 	add	fp, #24
2274c     A7 00 68 FC | 	wrlong	#0, fp
22750     68 4E 05 F1 | 	add	fp, #104
22754     A7 1E 02 F6 | 	mov	local01, fp
22758     08 4E 85 F1 | 	sub	fp, #8
2275c     A7 1E 62 FC | 	wrlong	local01, fp
22760     04 4E 05 F1 | 	add	fp, #4
22764     A7 1E 62 FC | 	wrlong	local01, fp
22768     BC 4E 85 F1 | 	sub	fp, #188
2276c     A7 1E 02 FB | 	rdlong	local01, fp
22770     10 1E 46 F0 | 	shr	local01, #16
22774     3F 1E 06 F5 | 	and	local01, #63
22778     B0 4E 05 F1 | 	add	fp, #176
2277c     A7 1E 62 FC | 	wrlong	local01, fp
22780     B0 4E 85 F1 | 	sub	fp, #176
22784     A7 1E 02 FB | 	rdlong	local01, fp
22788     1C 1E 46 F0 | 	shr	local01, #28
2278c     01 1E 06 F5 | 	and	local01, #1
22790     08 4F 05 F1 | 	add	fp, #264
22794     A7 1E 62 FC | 	wrlong	local01, fp
22798     58 4E 85 F1 | 	sub	fp, #88
2279c     A7 1E 0A FB | 	rdlong	local01, fp wz
227a0     B8 4E 85 F1 | 	sub	fp, #184
227a4     3C 00 90 5D |  if_ne	jmp	#LR__3061
227a8     10 4E 05 F1 | 	add	fp, #16
227ac     A7 1E 02 FB | 	rdlong	local01, fp
227b0     10 4E 85 F1 | 	sub	fp, #16
227b4     61 1E 0E F2 | 	cmp	local01, #97 wz
227b8     18 00 90 5D |  if_ne	jmp	#LR__3060
227bc     B8 4E 05 F1 | 	add	fp, #184
227c0     A7 1A 68 FC | 	wrlong	#13, fp
227c4     84 4E 85 F1 | 	sub	fp, #132
227c8     A7 02 68 FC | 	wrlong	#1, fp
227cc     34 4E 85 F1 | 	sub	fp, #52
227d0     24 00 90 FD | 	jmp	#LR__3062
227d4                 | LR__3060
227d4     B8 4E 05 F1 | 	add	fp, #184
227d8     A7 0C 68 FC | 	wrlong	#6, fp
227dc     B8 4E 85 F1 | 	sub	fp, #184
227e0     14 00 90 FD | 	jmp	#LR__3062
227e4                 | LR__3061
227e4     B8 4E 05 F1 | 	add	fp, #184
227e8     A7 1E 02 FB | 	rdlong	local01, fp
227ec     01 1E 86 F1 | 	sub	local01, #1
227f0     A7 1E 62 FC | 	wrlong	local01, fp
227f4     B8 4E 85 F1 | 	sub	fp, #184
227f8                 | LR__3062
227f8     08 4E 05 F1 | 	add	fp, #8
227fc     A7 1E 02 FB | 	rdlong	local01, fp
22800     16 1E 46 F0 | 	shr	local01, #22
22804     03 1E 06 F5 | 	and	local01, #3
22808     04 4F 05 F1 | 	add	fp, #260
2280c     A7 1E 62 FC | 	wrlong	local01, fp
22810     04 4F 85 F1 | 	sub	fp, #260
22814     A7 1E 02 FB | 	rdlong	local01, fp
22818     1D 1E 46 F0 | 	shr	local01, #29
2281c     01 1E 06 F5 | 	and	local01, #1
22820     B4 4E 05 F1 | 	add	fp, #180
22824     A7 1E 62 FC | 	wrlong	local01, fp
22828     B4 4E 85 F1 | 	sub	fp, #180
2282c     A7 1E 02 FB | 	rdlong	local01, fp
22830     0F 1F EA F8 | 	getbyte	local01, local01, #1
22834     60 4E 05 F1 | 	add	fp, #96
22838     A7 1E 62 FC | 	wrlong	local01, fp
2283c     60 4E 85 F1 | 	sub	fp, #96
22840     A7 1E 02 FB | 	rdlong	local01, fp
22844     0F 1F E2 F8 | 	getbyte	local01, local01, #0
22848     64 4E 05 F1 | 	add	fp, #100
2284c     A7 1E 62 FC | 	wrlong	local01, fp
22850     00 1E 06 F6 | 	mov	local01, #0
22854     5C 4E 85 F1 | 	sub	fp, #92
22858     A7 1A 02 FB | 	rdlong	arg05, fp
2285c     65 1A 0E F2 | 	cmp	arg05, #101 wz
22860     01 1E 06 A6 |  if_e	mov	local01, #1
22864     14 4E 05 F1 | 	add	fp, #20
22868     A7 1E 62 FC | 	wrlong	local01, fp
2286c     98 4E 05 F1 | 	add	fp, #152
22870     A7 20 0A FB | 	rdlong	local02, fp wz
22874     45 1E 06 56 |  if_ne	mov	local01, #69
22878     65 1E 06 A6 |  if_e	mov	local01, #101
2287c     8C 4E 85 F1 | 	sub	fp, #140
22880     A7 1E 62 FC | 	wrlong	local01, fp
22884     20 4E 85 F1 | 	sub	fp, #32
22888     A7 1E 02 FB | 	rdlong	local01, fp
2288c     10 4E 85 F1 | 	sub	fp, #16
22890     61 1E 0E F2 | 	cmp	local01, #97 wz
22894     4C 00 90 5D |  if_ne	jmp	#LR__3063
22898     24 4E 05 F1 | 	add	fp, #36
2289c     A7 02 68 FC | 	wrlong	#1, fp
228a0     98 4E 05 F1 | 	add	fp, #152
228a4     A7 20 0A FB | 	rdlong	local02, fp wz
228a8     50 1E 06 56 |  if_ne	mov	local01, #80
228ac     70 1E 06 A6 |  if_e	mov	local01, #112
228b0     8C 4E 85 F1 | 	sub	fp, #140
228b4     A7 1E 62 FC | 	wrlong	local01, fp
228b8     14 4E 85 F1 | 	sub	fp, #20
228bc     A7 04 68 FC | 	wrlong	#2, fp
228c0     1C 4E 05 F1 | 	add	fp, #28
228c4     A7 02 68 FC | 	wrlong	#1, fp
228c8     84 4E 05 F1 | 	add	fp, #132
228cc     A7 20 0A FB | 	rdlong	local02, fp wz
228d0     58 1E 06 56 |  if_ne	mov	local01, #88
228d4     78 1E 06 A6 |  if_e	mov	local01, #120
228d8     7C 4E 85 F1 | 	sub	fp, #124
228dc     A7 1E 62 FC | 	wrlong	local01, fp
228e0     40 4E 85 F1 | 	sub	fp, #64
228e4                 | LR__3063
228e4     10 4E 05 F1 | 	add	fp, #16
228e8     A7 1E 02 FB | 	rdlong	local01, fp
228ec     10 4E 85 F1 | 	sub	fp, #16
228f0     23 1E 0E F2 | 	cmp	local01, #35 wz
228f4     3C 00 90 5D |  if_ne	jmp	#LR__3066
228f8     48 4E 05 F1 | 	add	fp, #72
228fc     A7 02 68 FC | 	wrlong	#1, fp
22900     C8 4E 05 F1 | 	add	fp, #200
22904     A7 1E 0A FB | 	rdlong	local01, fp wz
22908     10 4F 85 F1 | 	sub	fp, #272
2290c     18 00 90 AD |  if_e	jmp	#LR__3064
22910     10 4E 05 F1 | 	add	fp, #16
22914     A7 CC 68 FC | 	wrlong	#102, fp
22918     00 4F 05 F1 | 	add	fp, #256
2291c     A7 00 68 FC | 	wrlong	#0, fp
22920     10 4F 85 F1 | 	sub	fp, #272
22924     0C 00 90 FD | 	jmp	#LR__3065
22928                 | LR__3064
22928     10 4F 05 F1 | 	add	fp, #272
2292c     A7 02 68 FC | 	wrlong	#1, fp
22930     10 4F 85 F1 | 	sub	fp, #272
22934                 | LR__3065
22934                 | LR__3066
22934     08 4E 05 F1 | 	add	fp, #8
22938     A7 1E 02 FB | 	rdlong	local01, fp
2293c     1A 1E 46 F0 | 	shr	local01, #26
22940     03 1E 06 F5 | 	and	local01, #3
22944     5C 4E 05 F1 | 	add	fp, #92
22948     A7 1E 62 FC | 	wrlong	local01, fp
2294c     58 4E 85 F1 | 	sub	fp, #88
22950     A7 FA 01 FB | 	rdlong	result1, fp
22954     0C 4E 85 F1 | 	sub	fp, #12
22958     1F FA 4D F0 | 	shr	result1, #31 wz
2295c     20 00 90 AD |  if_e	jmp	#LR__3067
22960     2C 4E 05 F1 | 	add	fp, #44
22964     A7 5A 68 FC | 	wrlong	#45, fp
22968     20 4E 85 F1 | 	sub	fp, #32
2296c     A7 FA 01 FB | 	rdlong	result1, fp
22970     1F FA E5 F4 | 	bitnot	result1, #31
22974     A7 FA 61 FC | 	wrlong	result1, fp
22978     0C 4E 85 F1 | 	sub	fp, #12
2297c     3C 00 90 FD | 	jmp	#LR__3069
22980                 | LR__3067
22980     64 4E 05 F1 | 	add	fp, #100
22984     A7 1E 02 FB | 	rdlong	local01, fp
22988     64 4E 85 F1 | 	sub	fp, #100
2298c     01 1E 0E F2 | 	cmp	local01, #1 wz
22990     2C 4E 05 A1 |  if_e	add	fp, #44
22994     A7 56 68 AC |  if_e	wrlong	#43, fp
22998     2C 4E 85 A1 |  if_e	sub	fp, #44
2299c     1C 00 90 AD |  if_e	jmp	#LR__3068
229a0     64 4E 05 F1 | 	add	fp, #100
229a4     A7 1E 02 FB | 	rdlong	local01, fp
229a8     64 4E 85 F1 | 	sub	fp, #100
229ac     02 1E 0E F2 | 	cmp	local01, #2 wz
229b0     2C 4E 05 A1 |  if_e	add	fp, #44
229b4     A7 40 68 AC |  if_e	wrlong	#32, fp
229b8     2C 4E 85 A1 |  if_e	sub	fp, #44
229bc                 | LR__3068
229bc                 | LR__3069
229bc     08 4E 05 F1 | 	add	fp, #8
229c0     A7 1E 02 FB | 	rdlong	local01, fp
229c4     18 1E 46 F0 | 	shr	local01, #24
229c8     03 1E 06 F5 | 	and	local01, #3
229cc     3C 4E 05 F1 | 	add	fp, #60
229d0     A7 1E 62 FC | 	wrlong	local01, fp
229d4     00 1E 06 F6 | 	mov	local01, #0
229d8     18 4E 85 F1 | 	sub	fp, #24
229dc     A7 22 0A FB | 	rdlong	local03, fp wz
229e0     2C 4E 85 F1 | 	sub	fp, #44
229e4     18 00 90 5D |  if_ne	jmp	#LR__3070
229e8     1C 4E 05 F1 | 	add	fp, #28
229ec     A7 24 02 FB | 	rdlong	local04, fp
229f0     1C 4E 85 F1 | 	sub	fp, #28
229f4     12 27 02 F6 | 	mov	local05, local04
229f8     0A 26 0E F2 | 	cmp	local05, #10 wz
229fc     04 00 90 AD |  if_e	jmp	#LR__3071
22a00                 | LR__3070
22a00     01 1E 66 F5 | 	xor	local01, #1
22a04                 | LR__3071
22a04     3C 4E 05 F1 | 	add	fp, #60
22a08     A7 1E 62 FC | 	wrlong	local01, fp
22a0c     3C 4E 85 F1 | 	sub	fp, #60
22a10     00 1E 0E F2 | 	cmp	local01, #0 wz
22a14     0C 01 90 AD |  if_e	jmp	#LR__3073
22a18     44 4E 05 F1 | 	add	fp, #68
22a1c     A7 26 02 FB | 	rdlong	local05, fp
22a20     44 4E 85 F1 | 	sub	fp, #68
22a24     13 23 02 F6 | 	mov	local03, local05
22a28     02 22 0E F2 | 	cmp	local03, #2 wz
22a2c     F4 00 90 5D |  if_ne	jmp	#LR__3073
22a30     0C 4F 05 F1 | 	add	fp, #268
22a34     A7 28 02 FB | 	rdlong	local06, fp
22a38     0C 4F 85 F1 | 	sub	fp, #268
22a3c     14 25 02 F6 | 	mov	local04, local06
22a40     02 24 0E F2 | 	cmp	local04, #2 wz
22a44     DC 00 90 AD |  if_e	jmp	#LR__3073
22a48     C0 4E 05 F1 | 	add	fp, #192
22a4c     A7 12 02 FB | 	rdlong	arg01, fp
22a50     94 4E 85 F1 | 	sub	fp, #148
22a54     A7 14 02 FB | 	rdlong	arg02, fp
22a58     14 4E 05 F1 | 	add	fp, #20
22a5c     A7 16 02 FB | 	rdlong	arg03, fp
22a60     40 4E 85 F1 | 	sub	fp, #64
22a64     90 47 B0 FD | 	call	#__system__emitsign_0528
22a68     14 4F 05 F1 | 	add	fp, #276
22a6c     A7 FA 61 FC | 	wrlong	result1, fp
22a70     14 4F 85 F1 | 	sub	fp, #276
22a74     00 FA 55 F2 | 	cmps	result1, #0 wc
22a78     14 4F 05 C1 |  if_b	add	fp, #276
22a7c     A7 FA 01 CB |  if_b	rdlong	result1, fp
22a80     14 4F 85 C1 |  if_b	sub	fp, #276
22a84     6C 0B 90 CD |  if_b	jmp	#LR__3123
22a88     C0 4E 05 F1 | 	add	fp, #192
22a8c     A7 1E 02 FB | 	rdlong	local01, fp
22a90     54 4E 05 F1 | 	add	fp, #84
22a94     A7 26 02 FB | 	rdlong	local05, fp
22a98     13 23 02 F6 | 	mov	local03, local05
22a9c     13 1F 02 F1 | 	add	local01, local05
22aa0     54 4E 85 F1 | 	sub	fp, #84
22aa4     A7 1E 62 FC | 	wrlong	local01, fp
22aa8     58 4E 85 F1 | 	sub	fp, #88
22aac     A7 1E 0A FB | 	rdlong	local01, fp wz
22ab0     68 4E 85 F1 | 	sub	fp, #104
22ab4     60 00 90 AD |  if_e	jmp	#LR__3072
22ab8     68 4E 05 F1 | 	add	fp, #104
22abc     A7 1E 02 FB | 	rdlong	local01, fp
22ac0     AC 4E 05 F1 | 	add	fp, #172
22ac4     A7 22 02 FB | 	rdlong	local03, fp
22ac8     11 1F 82 F1 | 	sub	local01, local03
22acc     AC 4E 85 F1 | 	sub	fp, #172
22ad0     A7 1E 62 FC | 	wrlong	local01, fp
22ad4     68 4E 85 F1 | 	sub	fp, #104
22ad8     00 1E 56 F2 | 	cmps	local01, #0 wc
22adc     68 4E 05 C1 |  if_b	add	fp, #104
22ae0     A7 00 68 CC |  if_b	wrlong	#0, fp
22ae4     68 4E 85 C1 |  if_b	sub	fp, #104
22ae8     08 4E 05 F1 | 	add	fp, #8
22aec     A7 1E 02 FB | 	rdlong	local01, fp
22af0     E8 1E 06 F4 | 	bitl	local01, #232
22af4     A7 1E 62 FC | 	wrlong	local01, fp
22af8     60 4E 05 F1 | 	add	fp, #96
22afc     A7 26 02 FB | 	rdlong	local05, fp
22b00     13 23 02 F6 | 	mov	local03, local05
22b04     08 22 66 F0 | 	shl	local03, #8
22b08     11 1F 42 F5 | 	or	local01, local03
22b0c     60 4E 85 F1 | 	sub	fp, #96
22b10     A7 1E 62 FC | 	wrlong	local01, fp
22b14     08 4E 85 F1 | 	sub	fp, #8
22b18                 | LR__3072
22b18     3C 4E 05 F1 | 	add	fp, #60
22b1c     A7 00 68 FC | 	wrlong	#0, fp
22b20     3C 4E 85 F1 | 	sub	fp, #60
22b24                 | LR__3073
22b24     0C 4E 05 F1 | 	add	fp, #12
22b28     A7 12 02 FB | 	rdlong	arg01, fp
22b2c     0C 4E 85 F1 | 	sub	fp, #12
22b30     30 21 B0 FD | 	call	#__system____builtin_ilogb
22b34     FF FF 3F FF 
22b38     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
22b3c     50 00 90 5D |  if_ne	jmp	#LR__3075
22b40     2C 4E 05 F1 | 	add	fp, #44
22b44     A7 1E 0A FB | 	rdlong	local01, fp wz
22b48     2C 4E 85 F1 | 	sub	fp, #44
22b4c     24 00 90 AD |  if_e	jmp	#LR__3074
22b50     C0 4E 05 F1 | 	add	fp, #192
22b54     A7 20 02 FB | 	rdlong	local02, fp
22b58     10 23 02 F6 | 	mov	local03, local02
22b5c     01 22 06 F1 | 	add	local03, #1
22b60     A7 22 62 FC | 	wrlong	local03, fp
22b64     94 4E 85 F1 | 	sub	fp, #148
22b68     A7 24 02 FB | 	rdlong	local04, fp
22b6c     2C 4E 85 F1 | 	sub	fp, #44
22b70     10 25 42 FC | 	wrbyte	local04, local02
22b74                 | LR__3074
22b74     C0 4E 05 F1 | 	add	fp, #192
22b78     A7 12 02 FB | 	rdlong	arg01, fp
22b7c     C0 4E 85 F1 | 	sub	fp, #192
22b80     88 01 00 FF 
22b84     96 14 06 F6 | 	mov	arg02, ##@LR__5071
22b88     AC E9 BF FD | 	call	#__system____builtin_strcpy
22b8c     A4 08 90 FD | 	jmp	#LR__3111
22b90                 | LR__3075
22b90     0C 4E 05 F1 | 	add	fp, #12
22b94     A7 20 02 FB | 	rdlong	local02, fp
22b98     0C 4E 85 F1 | 	sub	fp, #12
22b9c     10 13 02 F6 | 	mov	arg01, local02
22ba0     C0 20 B0 FD | 	call	#__system____builtin_ilogb
22ba4     00 00 40 FF 
22ba8     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
22bac     50 00 90 5D |  if_ne	jmp	#LR__3077
22bb0     2C 4E 05 F1 | 	add	fp, #44
22bb4     A7 1E 0A FB | 	rdlong	local01, fp wz
22bb8     2C 4E 85 F1 | 	sub	fp, #44
22bbc     24 00 90 AD |  if_e	jmp	#LR__3076
22bc0     C0 4E 05 F1 | 	add	fp, #192
22bc4     A7 20 02 FB | 	rdlong	local02, fp
22bc8     10 23 02 F6 | 	mov	local03, local02
22bcc     01 22 06 F1 | 	add	local03, #1
22bd0     A7 22 62 FC | 	wrlong	local03, fp
22bd4     94 4E 85 F1 | 	sub	fp, #148
22bd8     A7 24 02 FB | 	rdlong	local04, fp
22bdc     2C 4E 85 F1 | 	sub	fp, #44
22be0     10 25 42 FC | 	wrbyte	local04, local02
22be4                 | LR__3076
22be4     C0 4E 05 F1 | 	add	fp, #192
22be8     A7 12 02 FB | 	rdlong	arg01, fp
22bec     C0 4E 85 F1 | 	sub	fp, #192
22bf0     88 01 00 FF 
22bf4     9A 14 06 F6 | 	mov	arg02, ##@LR__5072
22bf8     3C E9 BF FD | 	call	#__system____builtin_strcpy
22bfc     34 08 90 FD | 	jmp	#LR__3111
22c00                 | LR__3077
22c00     10 4E 05 F1 | 	add	fp, #16
22c04     A7 1E 02 FB | 	rdlong	local01, fp
22c08     10 4E 85 F1 | 	sub	fp, #16
22c0c     67 1E 0E F2 | 	cmp	local01, #103 wz
22c10     10 4E 05 51 |  if_ne	add	fp, #16
22c14     A7 22 02 5B |  if_ne	rdlong	local03, fp
22c18     10 4E 85 51 |  if_ne	sub	fp, #16
22c1c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
22c20     94 01 90 5D |  if_ne	jmp	#LR__3082
22c24     0C 4E 05 F1 | 	add	fp, #12
22c28     A7 12 02 FB | 	rdlong	arg01, fp
22c2c     08 4E 05 F1 | 	add	fp, #8
22c30     A7 14 02 F6 | 	mov	arg02, fp
22c34     0C 4E 05 F1 | 	add	fp, #12
22c38     A7 16 02 F6 | 	mov	arg03, fp
22c3c     98 4E 05 F1 | 	add	fp, #152
22c40     A7 18 02 FB | 	rdlong	arg04, fp
22c44     9C 4E 85 F1 | 	sub	fp, #156
22c48     A7 1A 02 FB | 	rdlong	arg05, fp
22c4c     1C 4E 85 F1 | 	sub	fp, #28
22c50     B0 43 B0 FD | 	call	#__system__disassemble_0526
22c54     10 4E 05 F1 | 	add	fp, #16
22c58     A7 1E 02 FB | 	rdlong	local01, fp
22c5c     10 4E 85 F1 | 	sub	fp, #16
22c60     23 1E 0E F2 | 	cmp	local01, #35 wz
22c64     A0 00 90 5D |  if_ne	jmp	#LR__3079
22c68     20 4E 05 F1 | 	add	fp, #32
22c6c     A7 1E 02 FB | 	rdlong	local01, fp
22c70     98 4E 05 F1 | 	add	fp, #152
22c74     A7 22 02 FB | 	rdlong	local03, fp
22c78     B8 4E 85 F1 | 	sub	fp, #184
22c7c     11 1F 5A F2 | 	cmps	local01, local03 wcz
22c80     24 4E 05 11 |  if_a	add	fp, #36
22c84     A7 02 68 1C |  if_a	wrlong	#1, fp
22c88     24 4E 85 11 |  if_a	sub	fp, #36
22c8c     A4 01 90 1D |  if_a	jmp	#LR__3085
22c90     20 4E 05 F1 | 	add	fp, #32
22c94     A7 1E 02 FB | 	rdlong	local01, fp
22c98     20 4E 85 F1 | 	sub	fp, #32
22c9c     00 1E 56 F2 | 	cmps	local01, #0 wc
22ca0     2C 00 90 3D |  if_ae	jmp	#LR__3078
22ca4     B8 4E 05 F1 | 	add	fp, #184
22ca8     A7 1E 02 FB | 	rdlong	local01, fp
22cac     0F 1F 62 F6 | 	neg	local01, local01
22cb0     98 4E 85 F1 | 	sub	fp, #152
22cb4     A7 22 02 FB | 	rdlong	local03, fp
22cb8     20 4E 85 F1 | 	sub	fp, #32
22cbc     0F 23 5A F2 | 	cmps	local03, local01 wcz
22cc0     24 4E 05 E1 |  if_be	add	fp, #36
22cc4     A7 02 68 EC |  if_be	wrlong	#1, fp
22cc8     24 4E 85 E1 |  if_be	sub	fp, #36
22ccc     64 01 90 FD | 	jmp	#LR__3085
22cd0                 | LR__3078
22cd0     20 4E 05 F1 | 	add	fp, #32
22cd4     A7 1E 02 FB | 	rdlong	local01, fp
22cd8     20 4E 85 F1 | 	sub	fp, #32
22cdc     01 1E 56 F2 | 	cmps	local01, #1 wc
22ce0     50 01 90 CD |  if_b	jmp	#LR__3085
22ce4     B8 4E 05 F1 | 	add	fp, #184
22ce8     A7 1E 02 FB | 	rdlong	local01, fp
22cec     98 4E 85 F1 | 	sub	fp, #152
22cf0     A7 22 02 FB | 	rdlong	local03, fp
22cf4     11 1F 82 F1 | 	sub	local01, local03
22cf8     98 4E 05 F1 | 	add	fp, #152
22cfc     A7 1E 62 FC | 	wrlong	local01, fp
22d00     B8 4E 85 F1 | 	sub	fp, #184
22d04     2C 01 90 FD | 	jmp	#LR__3085
22d08                 | LR__3079
22d08     00 1E 06 F6 | 	mov	local01, #0
22d0c     08 4E 05 F1 | 	add	fp, #8
22d10     A7 20 02 FB | 	rdlong	local02, fp
22d14     1C 20 46 F0 | 	shr	local02, #28
22d18     01 20 0E F5 | 	and	local02, #1 wz
22d1c     01 1E 06 A6 |  if_e	mov	local01, #1
22d20     2C 4E 05 F1 | 	add	fp, #44
22d24     A7 1E 62 FC | 	wrlong	local01, fp
22d28     14 4E 85 F1 | 	sub	fp, #20
22d2c     A7 1E 02 FB | 	rdlong	local01, fp
22d30     98 4E 05 F1 | 	add	fp, #152
22d34     A7 22 02 FB | 	rdlong	local03, fp
22d38     B8 4E 85 F1 | 	sub	fp, #184
22d3c     11 1F 52 F2 | 	cmps	local01, local03 wc
22d40     18 00 90 3D |  if_ae	jmp	#LR__3080
22d44     20 4E 05 F1 | 	add	fp, #32
22d48     A7 24 02 FB | 	rdlong	local04, fp
22d4c     20 4E 85 F1 | 	sub	fp, #32
22d50     FF FF 7F FF 
22d54     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22d58     10 00 90 3D |  if_ae	jmp	#LR__3081
22d5c                 | LR__3080
22d5c     24 4E 05 F1 | 	add	fp, #36
22d60     A7 02 68 FC | 	wrlong	#1, fp
22d64     24 4E 85 F1 | 	sub	fp, #36
22d68     C8 00 90 FD | 	jmp	#LR__3085
22d6c                 | LR__3081
22d6c     B8 4E 05 F1 | 	add	fp, #184
22d70     A7 24 02 FB | 	rdlong	local04, fp
22d74     98 4E 85 F1 | 	sub	fp, #152
22d78     A7 22 02 FB | 	rdlong	local03, fp
22d7c     11 25 82 F1 | 	sub	local04, local03
22d80     98 4E 05 F1 | 	add	fp, #152
22d84     A7 24 62 FC | 	wrlong	local04, fp
22d88     AC 4E 85 F1 | 	sub	fp, #172
22d8c     A7 12 02 FB | 	rdlong	arg01, fp
22d90     08 4E 05 F1 | 	add	fp, #8
22d94     A7 14 02 F6 | 	mov	arg02, fp
22d98     0C 4E 05 F1 | 	add	fp, #12
22d9c     A7 16 02 F6 | 	mov	arg03, fp
22da0     12 19 62 F6 | 	neg	arg04, local04
22da4     04 4E 85 F1 | 	sub	fp, #4
22da8     A7 1A 02 FB | 	rdlong	arg05, fp
22dac     1C 4E 85 F1 | 	sub	fp, #28
22db0     50 42 B0 FD | 	call	#__system__disassemble_0526
22db4     7C 00 90 FD | 	jmp	#LR__3085
22db8                 | LR__3082
22db8     24 4E 05 F1 | 	add	fp, #36
22dbc     A7 1E 0A FB | 	rdlong	local01, fp wz
22dc0     24 4E 85 F1 | 	sub	fp, #36
22dc4     34 00 90 AD |  if_e	jmp	#LR__3083
22dc8     0C 4E 05 F1 | 	add	fp, #12
22dcc     A7 12 02 FB | 	rdlong	arg01, fp
22dd0     08 4E 05 F1 | 	add	fp, #8
22dd4     A7 14 02 F6 | 	mov	arg02, fp
22dd8     0C 4E 05 F1 | 	add	fp, #12
22ddc     A7 16 02 F6 | 	mov	arg03, fp
22de0     98 4E 05 F1 | 	add	fp, #152
22de4     A7 18 02 FB | 	rdlong	arg04, fp
22de8     9C 4E 85 F1 | 	sub	fp, #156
22dec     A7 1A 02 FB | 	rdlong	arg05, fp
22df0     1C 4E 85 F1 | 	sub	fp, #28
22df4     0C 42 B0 FD | 	call	#__system__disassemble_0526
22df8     38 00 90 FD | 	jmp	#LR__3084
22dfc                 | LR__3083
22dfc     0C 4E 05 F1 | 	add	fp, #12
22e00     A7 12 02 FB | 	rdlong	arg01, fp
22e04     08 4E 05 F1 | 	add	fp, #8
22e08     A7 14 02 F6 | 	mov	arg02, fp
22e0c     0C 4E 05 F1 | 	add	fp, #12
22e10     A7 16 02 F6 | 	mov	arg03, fp
22e14     98 4E 05 F1 | 	add	fp, #152
22e18     A7 24 02 FB | 	rdlong	local04, fp
22e1c     01 24 06 F1 | 	add	local04, #1
22e20     12 19 62 F6 | 	neg	arg04, local04
22e24     9C 4E 85 F1 | 	sub	fp, #156
22e28     A7 1A 02 FB | 	rdlong	arg05, fp
22e2c     1C 4E 85 F1 | 	sub	fp, #28
22e30     D0 41 B0 FD | 	call	#__system__disassemble_0526
22e34                 | LR__3084
22e34                 | LR__3085
22e34     1C 4E 05 F1 | 	add	fp, #28
22e38     A7 1E 02 FB | 	rdlong	local01, fp
22e3c     1C 4E 85 F1 | 	sub	fp, #28
22e40     02 1E 0E F2 | 	cmp	local01, #2 wz
22e44     4C 00 90 5D |  if_ne	jmp	#LR__3088
22e48     1C 4E 05 F1 | 	add	fp, #28
22e4c     A7 20 68 FC | 	wrlong	#16, fp
22e50     1C 4E 85 F1 | 	sub	fp, #28
22e54                 | LR__3086
22e54     14 4E 05 F1 | 	add	fp, #20
22e58     A7 1E 0A FB | 	rdlong	local01, fp wz
22e5c     14 4E 85 F1 | 	sub	fp, #20
22e60     30 00 90 AD |  if_e	jmp	#LR__3087
22e64     14 4E 05 F1 | 	add	fp, #20
22e68     A7 22 02 FB | 	rdlong	local03, fp
22e6c     14 4E 85 F1 | 	sub	fp, #20
22e70     00 80 00 FF 
22e74     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22e78     18 00 90 3D |  if_ae	jmp	#LR__3087
22e7c     14 4E 05 F1 | 	add	fp, #20
22e80     A7 1E 02 FB | 	rdlong	local01, fp
22e84     01 1E 66 F0 | 	shl	local01, #1
22e88     A7 1E 62 FC | 	wrlong	local01, fp
22e8c     14 4E 85 F1 | 	sub	fp, #20
22e90     C0 FF 9F FD | 	jmp	#LR__3086
22e94                 | LR__3087
22e94                 | LR__3088
22e94     70 4E 05 F1 | 	add	fp, #112
22e98     A7 12 02 F6 | 	mov	arg01, fp
22e9c     5C 4E 85 F1 | 	sub	fp, #92
22ea0     A7 14 02 FB | 	rdlong	arg02, fp
22ea4     08 4E 05 F1 | 	add	fp, #8
22ea8     A7 16 02 FB | 	rdlong	arg03, fp
22eac     A0 4E 05 F1 | 	add	fp, #160
22eb0     A7 1A 02 FB | 	rdlong	arg05, fp
22eb4     BC 4E 85 F1 | 	sub	fp, #188
22eb8     01 18 06 F6 | 	mov	arg04, #1
22ebc     D0 40 B0 FD | 	call	#__system___uitoa
22ec0     58 4E 05 F1 | 	add	fp, #88
22ec4     A7 FA 61 FC | 	wrlong	result1, fp
22ec8     38 4E 85 F1 | 	sub	fp, #56
22ecc     A7 1E 02 FB | 	rdlong	local01, fp
22ed0     20 4E 85 F1 | 	sub	fp, #32
22ed4     00 1E 56 F2 | 	cmps	local01, #0 wc
22ed8     50 00 90 3D |  if_ae	jmp	#LR__3089
22edc     60 4E 05 F1 | 	add	fp, #96
22ee0     A7 5A 68 FC | 	wrlong	#45, fp
22ee4     50 4E 05 F1 | 	add	fp, #80
22ee8     A7 12 02 F6 | 	mov	arg01, fp
22eec     90 4E 85 F1 | 	sub	fp, #144
22ef0     A7 22 02 FB | 	rdlong	local03, fp
22ef4     11 15 62 F6 | 	neg	arg02, local03
22ef8     18 4E 05 F1 | 	add	fp, #24
22efc     A7 18 02 FB | 	rdlong	arg04, fp
22f00     84 4E 05 F1 | 	add	fp, #132
22f04     A7 28 02 FB | 	rdlong	local06, fp
22f08     BC 4E 85 F1 | 	sub	fp, #188
22f0c     14 25 02 F6 | 	mov	local04, local06
22f10     0A 16 06 F6 | 	mov	arg03, #10
22f14     12 1B 02 F6 | 	mov	arg05, local04
22f18     74 40 B0 FD | 	call	#__system___uitoa
22f1c     5C 4E 05 F1 | 	add	fp, #92
22f20     A7 FA 61 FC | 	wrlong	result1, fp
22f24     5C 4E 85 F1 | 	sub	fp, #92
22f28     48 00 90 FD | 	jmp	#LR__3090
22f2c                 | LR__3089
22f2c     60 4E 05 F1 | 	add	fp, #96
22f30     A7 56 68 FC | 	wrlong	#43, fp
22f34     50 4E 05 F1 | 	add	fp, #80
22f38     A7 12 02 F6 | 	mov	arg01, fp
22f3c     90 4E 85 F1 | 	sub	fp, #144
22f40     A7 14 02 FB | 	rdlong	arg02, fp
22f44     18 4E 05 F1 | 	add	fp, #24
22f48     A7 18 02 FB | 	rdlong	arg04, fp
22f4c     84 4E 05 F1 | 	add	fp, #132
22f50     A7 28 02 FB | 	rdlong	local06, fp
22f54     BC 4E 85 F1 | 	sub	fp, #188
22f58     14 25 02 F6 | 	mov	local04, local06
22f5c     0A 16 06 F6 | 	mov	arg03, #10
22f60     12 1B 02 F6 | 	mov	arg05, local04
22f64     28 40 B0 FD | 	call	#__system___uitoa
22f68     5C 4E 05 F1 | 	add	fp, #92
22f6c     A7 FA 61 FC | 	wrlong	result1, fp
22f70     5C 4E 85 F1 | 	sub	fp, #92
22f74                 | LR__3090
22f74     24 4E 05 F1 | 	add	fp, #36
22f78     A7 1E 0A FB | 	rdlong	local01, fp wz
22f7c     24 4E 85 F1 | 	sub	fp, #36
22f80     2C 00 90 AD |  if_e	jmp	#LR__3091
22f84     50 4E 05 F1 | 	add	fp, #80
22f88     A7 00 68 FC | 	wrlong	#0, fp
22f8c     04 4E 85 F1 | 	sub	fp, #4
22f90     A7 00 68 FC | 	wrlong	#0, fp
22f94     6C 4E 05 F1 | 	add	fp, #108
22f98     A7 1E 02 FB | 	rdlong	local01, fp
22f9c     01 1E 06 F1 | 	add	local01, #1
22fa0     64 4E 85 F1 | 	sub	fp, #100
22fa4     A7 1E 62 FC | 	wrlong	local01, fp
22fa8     54 4E 85 F1 | 	sub	fp, #84
22fac     88 00 90 FD | 	jmp	#LR__3094
22fb0                 | LR__3091
22fb0     20 4E 05 F1 | 	add	fp, #32
22fb4     A7 1E 02 FB | 	rdlong	local01, fp
22fb8     20 4E 85 F1 | 	sub	fp, #32
22fbc     00 1E 56 F2 | 	cmps	local01, #0 wc
22fc0     40 00 90 3D |  if_ae	jmp	#LR__3092
22fc4     20 4E 05 F1 | 	add	fp, #32
22fc8     A7 20 02 FB | 	rdlong	local02, fp
22fcc     30 4E 05 F1 | 	add	fp, #48
22fd0     A7 20 62 FC | 	wrlong	local02, fp
22fd4     04 4E 85 F1 | 	sub	fp, #4
22fd8     A7 20 62 FC | 	wrlong	local02, fp
22fdc     2C 4E 85 F1 | 	sub	fp, #44
22fe0     A7 1E 02 FB | 	rdlong	local01, fp
22fe4     98 4E 05 F1 | 	add	fp, #152
22fe8     A7 22 02 FB | 	rdlong	local03, fp
22fec     11 1F 02 F1 | 	add	local01, local03
22ff0     01 1E 06 F1 | 	add	local01, #1
22ff4     64 4E 85 F1 | 	sub	fp, #100
22ff8     A7 1E 62 FC | 	wrlong	local01, fp
22ffc     54 4E 85 F1 | 	sub	fp, #84
23000     34 00 90 FD | 	jmp	#LR__3093
23004                 | LR__3092
23004     4C 4E 05 F1 | 	add	fp, #76
23008     A7 00 68 FC | 	wrlong	#0, fp
2300c     2C 4E 85 F1 | 	sub	fp, #44
23010     A7 1E 02 FB | 	rdlong	local01, fp
23014     30 4E 05 F1 | 	add	fp, #48
23018     A7 1E 62 FC | 	wrlong	local01, fp
2301c     68 4E 05 F1 | 	add	fp, #104
23020     A7 22 02 FB | 	rdlong	local03, fp
23024     11 1F 02 F1 | 	add	local01, local03
23028     01 1E 06 F1 | 	add	local01, #1
2302c     64 4E 85 F1 | 	sub	fp, #100
23030     A7 1E 62 FC | 	wrlong	local01, fp
23034     54 4E 85 F1 | 	sub	fp, #84
23038                 | LR__3093
23038                 | LR__3094
23038     54 4E 05 F1 | 	add	fp, #84
2303c     A7 1E 02 FB | 	rdlong	local01, fp
23040     08 4E 85 F1 | 	sub	fp, #8
23044     A7 22 02 FB | 	rdlong	local03, fp
23048     11 1F 82 F1 | 	sub	local01, local03
2304c     01 1E 06 F1 | 	add	local01, #1
23050     24 4E 85 F1 | 	sub	fp, #36
23054     A7 1E 62 FC | 	wrlong	local01, fp
23058     04 4E 05 F1 | 	add	fp, #4
2305c     A7 1E 0A FB | 	rdlong	local01, fp wz
23060     2C 4E 85 F1 | 	sub	fp, #44
23064     28 4E 05 51 |  if_ne	add	fp, #40
23068     A7 22 02 5B |  if_ne	rdlong	local03, fp
2306c     01 22 06 51 |  if_ne	add	local03, #1
23070     A7 22 62 5C |  if_ne	wrlong	local03, fp
23074     28 4E 85 51 |  if_ne	sub	fp, #40
23078     1C 4E 05 F1 | 	add	fp, #28
2307c     A7 1E 02 FB | 	rdlong	local01, fp
23080     1C 4E 85 F1 | 	sub	fp, #28
23084     10 1E 0E F2 | 	cmp	local01, #16 wz
23088     28 4E 05 A1 |  if_e	add	fp, #40
2308c     A7 1E 02 AB |  if_e	rdlong	local01, fp
23090     02 1E 06 A1 |  if_e	add	local01, #2
23094     A7 1E 62 AC |  if_e	wrlong	local01, fp
23098     28 4E 85 A1 |  if_e	sub	fp, #40
2309c     24 4E 05 F1 | 	add	fp, #36
230a0     A7 1E 0A FB | 	rdlong	local01, fp wz
230a4     24 4E 85 F1 | 	sub	fp, #36
230a8     28 00 90 AD |  if_e	jmp	#LR__3095
230ac     28 4E 05 F1 | 	add	fp, #40
230b0     A7 1E 02 FB | 	rdlong	local01, fp
230b4     02 22 06 F6 | 	mov	local03, #2
230b8     34 4E 05 F1 | 	add	fp, #52
230bc     A7 26 02 FB | 	rdlong	local05, fp
230c0     13 23 02 F1 | 	add	local03, local05
230c4     11 1F 02 F1 | 	add	local01, local03
230c8     34 4E 85 F1 | 	sub	fp, #52
230cc     A7 1E 62 FC | 	wrlong	local01, fp
230d0     28 4E 85 F1 | 	sub	fp, #40
230d4                 | LR__3095
230d4     28 4E 05 F1 | 	add	fp, #40
230d8     A7 1E 02 FB | 	rdlong	local01, fp
230dc     28 4E 85 F1 | 	sub	fp, #40
230e0     41 1E 56 F2 | 	cmps	local01, #65 wc
230e4     01 FA 65 36 |  if_ae	neg	result1, #1
230e8     08 05 90 3D |  if_ae	jmp	#LR__3123
230ec     3C 4E 05 F1 | 	add	fp, #60
230f0     A7 1E 0A FB | 	rdlong	local01, fp wz
230f4     3C 4E 85 F1 | 	sub	fp, #60
230f8     60 00 90 AD |  if_e	jmp	#LR__3096
230fc     C0 4E 05 F1 | 	add	fp, #192
23100     A7 12 02 FB | 	rdlong	arg01, fp
23104     94 4E 85 F1 | 	sub	fp, #148
23108     A7 14 02 FB | 	rdlong	arg02, fp
2310c     14 4E 05 F1 | 	add	fp, #20
23110     A7 16 02 FB | 	rdlong	arg03, fp
23114     40 4E 85 F1 | 	sub	fp, #64
23118     DC 40 B0 FD | 	call	#__system__emitsign_0528
2311c     18 4F 05 F1 | 	add	fp, #280
23120     A7 FA 61 FC | 	wrlong	result1, fp
23124     18 4F 85 F1 | 	sub	fp, #280
23128     00 FA 55 F2 | 	cmps	result1, #0 wc
2312c     18 4F 05 C1 |  if_b	add	fp, #280
23130     A7 FA 01 CB |  if_b	rdlong	result1, fp
23134     18 4F 85 C1 |  if_b	sub	fp, #280
23138     B8 04 90 CD |  if_b	jmp	#LR__3123
2313c     C0 4E 05 F1 | 	add	fp, #192
23140     A7 1E 02 FB | 	rdlong	local01, fp
23144     58 4E 05 F1 | 	add	fp, #88
23148     A7 22 02 FB | 	rdlong	local03, fp
2314c     11 1F 02 F1 | 	add	local01, local03
23150     58 4E 85 F1 | 	sub	fp, #88
23154     A7 1E 62 FC | 	wrlong	local01, fp
23158     C0 4E 85 F1 | 	sub	fp, #192
2315c                 | LR__3096
2315c     4C 4E 05 F1 | 	add	fp, #76
23160     A7 1E 02 FB | 	rdlong	local01, fp
23164     34 4E 85 F1 | 	sub	fp, #52
23168     A7 1E 62 FC | 	wrlong	local01, fp
2316c     18 4E 85 F1 | 	sub	fp, #24
23170     97 9E 48 FB | 	callpa	#(@LR__3102-@LR__3097)>>2,fcache_load_ptr_
23174                 | LR__3097
23174     18 4E 05 F1 | 	add	fp, #24
23178     A7 20 02 FB | 	rdlong	local02, fp
2317c     3C 4E 05 F1 | 	add	fp, #60
23180     A7 26 02 FB | 	rdlong	local05, fp
23184     54 4E 85 F1 | 	sub	fp, #84
23188     13 21 52 F2 | 	cmps	local02, local05 wc
2318c     20 01 90 3D |  if_ae	jmp	#LR__3103
23190     18 4E 05 F1 | 	add	fp, #24
23194     A7 28 02 FB | 	rdlong	local06, fp
23198     18 4E 85 F1 | 	sub	fp, #24
2319c     00 28 56 F2 | 	cmps	local06, #0 wc
231a0     58 00 90 CD |  if_b	jmp	#LR__3098
231a4     18 4E 05 F1 | 	add	fp, #24
231a8     A7 28 02 FB | 	rdlong	local06, fp
231ac     40 4E 05 F1 | 	add	fp, #64
231b0     A7 2A 02 FB | 	rdlong	local07, fp
231b4     58 4E 85 F1 | 	sub	fp, #88
231b8     15 29 52 F2 | 	cmps	local06, local07 wc
231bc     3C 00 90 3D |  if_ae	jmp	#LR__3098
231c0     C0 4E 05 F1 | 	add	fp, #192
231c4     A7 2C 02 FB | 	rdlong	local08, fp
231c8     16 2B 02 F6 | 	mov	local07, local08
231cc     01 2A 06 F1 | 	add	local07, #1
231d0     A7 2A 62 FC | 	wrlong	local07, fp
231d4     A8 4E 85 F1 | 	sub	fp, #168
231d8     A7 2A 02 FB | 	rdlong	local07, fp
231dc     15 2F 02 F6 | 	mov	local09, local07
231e0     58 4E 05 F1 | 	add	fp, #88
231e4     A7 30 02 F6 | 	mov	local10, fp
231e8     A7 2E 02 F1 | 	add	local09, fp
231ec     17 33 C2 FA | 	rdbyte	local11, local09
231f0     16 33 42 FC | 	wrbyte	local11, local08
231f4     70 4E 85 F1 | 	sub	fp, #112
231f8     20 00 90 FD | 	jmp	#LR__3099
231fc                 | LR__3098
231fc     C0 4E 05 F1 | 	add	fp, #192
23200     A7 2C 02 FB | 	rdlong	local08, fp
23204     16 2F 02 F6 | 	mov	local09, local08
23208     01 2E 06 F1 | 	add	local09, #1
2320c     A7 2E 62 FC | 	wrlong	local09, fp
23210     C0 4E 85 F1 | 	sub	fp, #192
23214     30 2E 06 F6 | 	mov	local09, #48
23218     16 61 48 FC | 	wrbyte	#48, local08
2321c                 | LR__3099
2321c     18 4E 05 F1 | 	add	fp, #24
23220     A7 28 02 FB | 	rdlong	local06, fp
23224     38 4E 05 F1 | 	add	fp, #56
23228     A7 34 02 FB | 	rdlong	local12, fp
2322c     50 4E 85 F1 | 	sub	fp, #80
23230     1A 29 0A F2 | 	cmp	local06, local12 wz
23234     5C 00 90 5D |  if_ne	jmp	#LR__3101
23238     10 4F 05 F1 | 	add	fp, #272
2323c     A7 2A 02 FB | 	rdlong	local07, fp
23240     10 4F 85 F1 | 	sub	fp, #272
23244     15 2F 0A F6 | 	mov	local09, local07 wz
23248     28 00 90 5D |  if_ne	jmp	#LR__3100
2324c     54 4E 05 F1 | 	add	fp, #84
23250     A7 32 02 FB | 	rdlong	local11, fp
23254     19 31 02 F6 | 	mov	local10, local11
23258     01 30 86 F1 | 	sub	local10, #1
2325c     3C 4E 85 F1 | 	sub	fp, #60
23260     A7 36 02 FB | 	rdlong	local13, fp
23264     18 4E 85 F1 | 	sub	fp, #24
23268     1B 39 02 F6 | 	mov	local14, local13
2326c     18 39 52 F2 | 	cmps	local14, local10 wc
23270     20 00 90 3D |  if_ae	jmp	#LR__3101
23274                 | LR__3100
23274     C0 4E 05 F1 | 	add	fp, #192
23278     A7 2C 02 FB | 	rdlong	local08, fp
2327c     16 35 02 F6 | 	mov	local12, local08
23280     01 34 06 F1 | 	add	local12, #1
23284     A7 34 62 FC | 	wrlong	local12, fp
23288     C0 4E 85 F1 | 	sub	fp, #192
2328c     2E 2E 06 F6 | 	mov	local09, #46
23290     16 5D 48 FC | 	wrbyte	#46, local08
23294                 | LR__3101
23294     18 4E 05 F1 | 	add	fp, #24
23298     A7 3A 02 FB | 	rdlong	local15, fp
2329c     1D 35 02 F6 | 	mov	local12, local15
232a0     01 34 06 F1 | 	add	local12, #1
232a4     A7 34 62 FC | 	wrlong	local12, fp
232a8     18 4E 85 F1 | 	sub	fp, #24
232ac     C4 FE 9F FD | 	jmp	#LR__3097
232b0                 | LR__3102
232b0                 | LR__3103
232b0     34 4E 05 F1 | 	add	fp, #52
232b4     A7 1E 0A FB | 	rdlong	local01, fp wz
232b8     34 4E 85 F1 | 	sub	fp, #52
232bc     A0 00 90 AD |  if_e	jmp	#LR__3107
232c0     C0 4E 05 F1 | 	add	fp, #192
232c4     A7 1E 02 FB | 	rdlong	local01, fp
232c8     01 1E 86 F1 | 	sub	local01, #1
232cc     A7 1E 62 FC | 	wrlong	local01, fp
232d0     C0 4E 85 F1 | 	sub	fp, #192
232d4     97 26 48 FB | 	callpa	#(@LR__3105-@LR__3104)>>2,fcache_load_ptr_
232d8                 | LR__3104
232d8     C0 4E 05 F1 | 	add	fp, #192
232dc     A7 1E 02 FB | 	rdlong	local01, fp
232e0     04 4E 05 F1 | 	add	fp, #4
232e4     A7 22 02 FB | 	rdlong	local03, fp
232e8     C4 4E 85 F1 | 	sub	fp, #196
232ec     11 1F 5A F2 | 	cmps	local01, local03 wcz
232f0     30 00 90 ED |  if_be	jmp	#LR__3106
232f4     C0 4E 05 F1 | 	add	fp, #192
232f8     A7 28 02 FB | 	rdlong	local06, fp
232fc     C0 4E 85 F1 | 	sub	fp, #192
23300     14 25 C2 FA | 	rdbyte	local04, local06
23304     30 24 0E F2 | 	cmp	local04, #48 wz
23308     18 00 90 5D |  if_ne	jmp	#LR__3106
2330c     C0 4E 05 F1 | 	add	fp, #192
23310     A7 1E 02 FB | 	rdlong	local01, fp
23314     01 1E 86 F1 | 	sub	local01, #1
23318     A7 1E 62 FC | 	wrlong	local01, fp
2331c     C0 4E 85 F1 | 	sub	fp, #192
23320     B4 FF 9F FD | 	jmp	#LR__3104
23324                 | LR__3105
23324                 | LR__3106
23324     C0 4E 05 F1 | 	add	fp, #192
23328     A7 20 02 FB | 	rdlong	local02, fp
2332c     C0 4E 85 F1 | 	sub	fp, #192
23330     10 1F C2 FA | 	rdbyte	local01, local02
23334     2E 1E 0E F2 | 	cmp	local01, #46 wz
23338     C0 4E 05 A1 |  if_e	add	fp, #192
2333c     A7 1E 02 AB |  if_e	rdlong	local01, fp
23340     01 1E 86 A1 |  if_e	sub	local01, #1
23344     A7 1E 62 AC |  if_e	wrlong	local01, fp
23348     C0 4E 85 A1 |  if_e	sub	fp, #192
2334c     C0 4E 05 F1 | 	add	fp, #192
23350     A7 22 02 FB | 	rdlong	local03, fp
23354     01 22 06 F1 | 	add	local03, #1
23358     A7 22 62 FC | 	wrlong	local03, fp
2335c     C0 4E 85 F1 | 	sub	fp, #192
23360                 | LR__3107
23360     24 4E 05 F1 | 	add	fp, #36
23364     A7 1E 0A FB | 	rdlong	local01, fp wz
23368     24 4E 85 F1 | 	sub	fp, #36
2336c     B4 00 90 AD |  if_e	jmp	#LR__3110
23370     C0 4E 05 F1 | 	add	fp, #192
23374     A7 20 02 FB | 	rdlong	local02, fp
23378     10 23 02 F6 | 	mov	local03, local02
2337c     01 22 06 F1 | 	add	local03, #1
23380     A7 22 62 FC | 	wrlong	local03, fp
23384     90 4E 85 F1 | 	sub	fp, #144
23388     A7 24 02 FB | 	rdlong	local04, fp
2338c     10 25 42 FC | 	wrbyte	local04, local02
23390     90 4E 05 F1 | 	add	fp, #144
23394     A7 20 02 FB | 	rdlong	local02, fp
23398     10 23 02 F6 | 	mov	local03, local02
2339c     01 22 06 F1 | 	add	local03, #1
233a0     A7 22 62 FC | 	wrlong	local03, fp
233a4     60 4E 85 F1 | 	sub	fp, #96
233a8     A7 24 02 FB | 	rdlong	local04, fp
233ac     10 25 42 FC | 	wrbyte	local04, local02
233b0     48 4E 85 F1 | 	sub	fp, #72
233b4     A7 00 68 FC | 	wrlong	#0, fp
233b8     18 4E 85 F1 | 	sub	fp, #24
233bc                 | LR__3108
233bc     18 4E 05 F1 | 	add	fp, #24
233c0     A7 20 02 FB | 	rdlong	local02, fp
233c4     44 4E 05 F1 | 	add	fp, #68
233c8     A7 26 02 FB | 	rdlong	local05, fp
233cc     5C 4E 85 F1 | 	sub	fp, #92
233d0     13 21 52 F2 | 	cmps	local02, local05 wc
233d4     4C 00 90 3D |  if_ae	jmp	#LR__3109
233d8     C0 4E 05 F1 | 	add	fp, #192
233dc     A7 2C 02 FB | 	rdlong	local08, fp
233e0     16 35 02 F6 | 	mov	local12, local08
233e4     01 34 06 F1 | 	add	local12, #1
233e8     A7 34 62 FC | 	wrlong	local12, fp
233ec     A8 4E 85 F1 | 	sub	fp, #168
233f0     A7 2A 02 FB | 	rdlong	local07, fp
233f4     15 2F 02 F6 | 	mov	local09, local07
233f8     98 4E 05 F1 | 	add	fp, #152
233fc     A7 30 02 F6 | 	mov	local10, fp
23400     A7 2E 02 F1 | 	add	local09, fp
23404     17 33 C2 FA | 	rdbyte	local11, local09
23408     16 33 42 FC | 	wrbyte	local11, local08
2340c     98 4E 85 F1 | 	sub	fp, #152
23410     A7 34 02 FB | 	rdlong	local12, fp
23414     01 34 06 F1 | 	add	local12, #1
23418     A7 34 62 FC | 	wrlong	local12, fp
2341c     18 4E 85 F1 | 	sub	fp, #24
23420     98 FF 9F FD | 	jmp	#LR__3108
23424                 | LR__3109
23424                 | LR__3110
23424     C0 4E 05 F1 | 	add	fp, #192
23428     A7 1E 02 FB | 	rdlong	local01, fp
2342c     C0 4E 85 F1 | 	sub	fp, #192
23430     0F 01 48 FC | 	wrbyte	#0, local01
23434                 | LR__3111
23434     6C 4E 05 F1 | 	add	fp, #108
23438     A7 1E 0A FB | 	rdlong	local01, fp wz
2343c     6C 4E 85 F1 | 	sub	fp, #108
23440     90 01 90 AD |  if_e	jmp	#LR__3122
23444     48 4E 05 F1 | 	add	fp, #72
23448     A7 22 0A FB | 	rdlong	local03, fp wz
2344c     48 4E 85 F1 | 	sub	fp, #72
23450     80 01 90 AD |  if_e	jmp	#LR__3122
23454     C4 4E 05 F1 | 	add	fp, #196
23458     A7 12 02 FB | 	rdlong	arg01, fp
2345c     C4 4E 85 F1 | 	sub	fp, #196
23460     09 3D 02 F6 | 	mov	local16, arg01
23464     97 06 48 FB | 	callpa	#(@LR__3113-@LR__3112)>>2,fcache_load_ptr_
23468                 | LR__3112
23468     1E FB C9 FA | 	rdbyte	result1, local16 wz
2346c     01 3C 06 51 |  if_ne	add	local16, #1
23470     F4 FF 9F 5D |  if_ne	jmp	#LR__3112
23474                 | LR__3113
23474     09 3D 82 F1 | 	sub	local16, arg01
23478     1E 25 02 F6 | 	mov	local04, local16
2347c     6C 4E 05 F1 | 	add	fp, #108
23480     A7 28 02 FB | 	rdlong	local06, fp
23484     6C 4E 85 F1 | 	sub	fp, #108
23488     14 25 5A F2 | 	cmps	local04, local06 wcz
2348c     44 01 90 ED |  if_be	jmp	#LR__3122
23490     C4 4E 05 F1 | 	add	fp, #196
23494     A7 1E 02 FB | 	rdlong	local01, fp
23498     5C 4E 05 F1 | 	add	fp, #92
2349c     A7 1E 62 FC | 	wrlong	local01, fp
234a0     FC 4E 85 F1 | 	sub	fp, #252
234a4     A7 1E 0A FB | 	rdlong	local01, fp wz
234a8     24 4E 85 F1 | 	sub	fp, #36
234ac     20 00 90 AD |  if_e	jmp	#LR__3114
234b0     B8 4E 05 F1 | 	add	fp, #184
234b4     A7 00 68 FC | 	wrlong	#0, fp
234b8     4C 4E 85 F1 | 	sub	fp, #76
234bc     A7 1E 02 FB | 	rdlong	local01, fp
234c0     B0 4E 05 F1 | 	add	fp, #176
234c4     A7 1E 62 FC | 	wrlong	local01, fp
234c8     1C 4F 85 F1 | 	sub	fp, #284
234cc     24 00 90 FD | 	jmp	#LR__3115
234d0                 | LR__3114
234d0     6C 4E 05 F1 | 	add	fp, #108
234d4     A7 1E 02 FB | 	rdlong	local01, fp
234d8     01 1E 86 F1 | 	sub	local01, #1
234dc     4C 4E 05 F1 | 	add	fp, #76
234e0     A7 22 02 FB | 	rdlong	local03, fp
234e4     11 1F 82 F1 | 	sub	local01, local03
234e8     64 4E 05 F1 | 	add	fp, #100
234ec     A7 1E 62 FC | 	wrlong	local01, fp
234f0     1C 4F 85 F1 | 	sub	fp, #284
234f4                 | LR__3115
234f4     97 20 48 FB | 	callpa	#(@LR__3117-@LR__3116)>>2,fcache_load_ptr_
234f8                 | LR__3116
234f8     1C 4F 05 F1 | 	add	fp, #284
234fc     A7 1E 0A FB | 	rdlong	local01, fp wz
23500     1C 4F 85 F1 | 	sub	fp, #284
23504     30 00 90 AD |  if_e	jmp	#LR__3118
23508     20 4F 05 F1 | 	add	fp, #288
2350c     A7 20 02 FB | 	rdlong	local02, fp
23510     10 23 02 F6 | 	mov	local03, local02
23514     01 22 06 F1 | 	add	local03, #1
23518     A7 22 62 FC | 	wrlong	local03, fp
2351c     10 55 48 FC | 	wrbyte	#42, local02
23520     04 4E 85 F1 | 	sub	fp, #4
23524     A7 1E 02 FB | 	rdlong	local01, fp
23528     01 1E 86 F1 | 	sub	local01, #1
2352c     A7 1E 62 FC | 	wrlong	local01, fp
23530     1C 4F 85 F1 | 	sub	fp, #284
23534     C0 FF 9F FD | 	jmp	#LR__3116
23538                 | LR__3117
23538                 | LR__3118
23538     B8 4E 05 F1 | 	add	fp, #184
2353c     A7 1E 0A FB | 	rdlong	local01, fp wz
23540     B8 4E 85 F1 | 	sub	fp, #184
23544     70 00 90 AD |  if_e	jmp	#LR__3121
23548     20 4F 05 F1 | 	add	fp, #288
2354c     A7 20 02 FB | 	rdlong	local02, fp
23550     10 23 02 F6 | 	mov	local03, local02
23554     01 22 06 F1 | 	add	local03, #1
23558     A7 22 62 FC | 	wrlong	local03, fp
2355c     10 5D 48 FC | 	wrbyte	#46, local02
23560     04 4E 85 F1 | 	sub	fp, #4
23564     A7 00 68 FC | 	wrlong	#0, fp
23568     1C 4F 85 F1 | 	sub	fp, #284
2356c                 | LR__3119
2356c     1C 4F 05 F1 | 	add	fp, #284
23570     A7 20 02 FB | 	rdlong	local02, fp
23574     64 4E 85 F1 | 	sub	fp, #100
23578     A7 26 02 FB | 	rdlong	local05, fp
2357c     B8 4E 85 F1 | 	sub	fp, #184
23580     13 21 52 F2 | 	cmps	local02, local05 wc
23584     30 00 90 3D |  if_ae	jmp	#LR__3120
23588     20 4F 05 F1 | 	add	fp, #288
2358c     A7 2C 02 FB | 	rdlong	local08, fp
23590     16 35 02 F6 | 	mov	local12, local08
23594     01 34 06 F1 | 	add	local12, #1
23598     A7 34 62 FC | 	wrlong	local12, fp
2359c     16 55 48 FC | 	wrbyte	#42, local08
235a0     04 4E 85 F1 | 	sub	fp, #4
235a4     A7 34 02 FB | 	rdlong	local12, fp
235a8     01 34 06 F1 | 	add	local12, #1
235ac     A7 34 62 FC | 	wrlong	local12, fp
235b0     1C 4F 85 F1 | 	sub	fp, #284
235b4     B4 FF 9F FD | 	jmp	#LR__3119
235b8                 | LR__3120
235b8                 | LR__3121
235b8     20 4F 05 F1 | 	add	fp, #288
235bc     A7 20 02 FB | 	rdlong	local02, fp
235c0     10 23 02 F6 | 	mov	local03, local02
235c4     01 22 06 F1 | 	add	local03, #1
235c8     A7 22 62 FC | 	wrlong	local03, fp
235cc     20 4F 85 F1 | 	sub	fp, #288
235d0     10 01 48 FC | 	wrbyte	#0, local02
235d4                 | LR__3122
235d4     04 4E 05 F1 | 	add	fp, #4
235d8     A7 12 02 FB | 	rdlong	arg01, fp
235dc     04 4E 05 F1 | 	add	fp, #4
235e0     A7 14 02 FB | 	rdlong	arg02, fp
235e4     BC 4E 05 F1 | 	add	fp, #188
235e8     A7 16 02 FB | 	rdlong	arg03, fp
235ec     C4 4E 85 F1 | 	sub	fp, #196
235f0     C4 EE BF FD | 	call	#__system___fmtstr
235f4                 | LR__3123
235f4     A7 F0 03 F6 | 	mov	ptra, fp
235f8     B2 00 A0 FD | 	call	#popregs_
235fc                 | __system___fmtfloat_ret
235fc     2D 00 64 FD | 	ret
23600                 | 
23600                 | __system__Left_S
23600     04 4A 05 F6 | 	mov	COUNT_, #4
23604     A8 00 A0 FD | 	call	#pushregs_
23608     09 1F 02 F6 | 	mov	local01, arg01
2360c     0A 21 02 F6 | 	mov	local02, arg02
23610     01 20 56 F2 | 	cmps	local02, #1 wc
23614     88 01 00 CF 
23618     9E FA 05 C6 |  if_b	mov	result1, ##@LR__5073
2361c     5C 00 90 CD |  if_b	jmp	#LR__3133
23620     0F 13 02 F6 | 	mov	arg01, local01
23624     09 23 02 F6 | 	mov	local03, arg01
23628     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
2362c                 | LR__3130
2362c     11 FB C9 FA | 	rdbyte	result1, local03 wz
23630     01 22 06 51 |  if_ne	add	local03, #1
23634     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
23638                 | LR__3131
23638     09 23 82 F1 | 	sub	local03, arg01
2363c     11 FB 01 F6 | 	mov	result1, local03
23640     10 FB 59 F2 | 	cmps	result1, local02 wcz
23644     0F FB 01 E6 |  if_be	mov	result1, local01
23648     30 00 90 ED |  if_be	jmp	#LR__3133
2364c     10 13 02 F6 | 	mov	arg01, local02
23650     02 12 06 F1 | 	add	arg01, #2
23654     10 20 B0 FD | 	call	#__system___gc_alloc_managed
23658     FD 24 0A F6 | 	mov	local04, result1 wz
2365c     18 00 90 AD |  if_e	jmp	#LR__3132
23660     12 13 02 F6 | 	mov	arg01, local04
23664     0F 15 02 F6 | 	mov	arg02, local01
23668     10 17 02 F6 | 	mov	arg03, local02
2366c     34 DE BF FD | 	call	#__system____builtin_memmove
23670     12 21 02 F1 | 	add	local02, local04
23674     10 01 48 FC | 	wrbyte	#0, local02
23678                 | LR__3132
23678     12 FB 01 F6 | 	mov	result1, local04
2367c                 | LR__3133
2367c     A7 F0 03 F6 | 	mov	ptra, fp
23680     B2 00 A0 FD | 	call	#popregs_
23684                 | __system__Left_S_ret
23684     2D 00 64 FD | 	ret
23688                 | 
23688                 | __system__Right_S
23688     05 4A 05 F6 | 	mov	COUNT_, #5
2368c     A8 00 A0 FD | 	call	#pushregs_
23690     09 1F 02 F6 | 	mov	local01, arg01
23694     0A 21 02 F6 | 	mov	local02, arg02
23698     01 20 56 F2 | 	cmps	local02, #1 wc
2369c     88 01 00 CF 
236a0     9F FA 05 C6 |  if_b	mov	result1, ##@LR__5074
236a4     64 00 90 CD |  if_b	jmp	#LR__3143
236a8     0F 13 02 F6 | 	mov	arg01, local01
236ac     09 23 02 F6 | 	mov	local03, arg01
236b0     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
236b4                 | LR__3140
236b4     11 FB C9 FA | 	rdbyte	result1, local03 wz
236b8     01 22 06 51 |  if_ne	add	local03, #1
236bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
236c0                 | LR__3141
236c0     09 23 82 F1 | 	sub	local03, arg01
236c4     11 FB 01 F6 | 	mov	result1, local03
236c8     FD 24 02 F6 | 	mov	local04, result1
236cc     10 25 5A F2 | 	cmps	local04, local02 wcz
236d0     0F FB 01 E6 |  if_be	mov	result1, local01
236d4     34 00 90 ED |  if_be	jmp	#LR__3143
236d8     10 13 02 F6 | 	mov	arg01, local02
236dc     02 12 06 F1 | 	add	arg01, #2
236e0     84 1F B0 FD | 	call	#__system___gc_alloc_managed
236e4     FD 26 0A F6 | 	mov	local05, result1 wz
236e8     1C 00 90 AD |  if_e	jmp	#LR__3142
236ec     10 25 82 F1 | 	sub	local04, local02
236f0     0F 25 02 F1 | 	add	local04, local01
236f4     01 20 06 F1 | 	add	local02, #1
236f8     13 13 02 F6 | 	mov	arg01, local05
236fc     12 15 02 F6 | 	mov	arg02, local04
23700     10 17 02 F6 | 	mov	arg03, local02
23704     9C DD BF FD | 	call	#__system____builtin_memmove
23708                 | LR__3142
23708     13 FB 01 F6 | 	mov	result1, local05
2370c                 | LR__3143
2370c     A7 F0 03 F6 | 	mov	ptra, fp
23710     B2 00 A0 FD | 	call	#popregs_
23714                 | __system__Right_S_ret
23714     2D 00 64 FD | 	ret
23718                 | 
23718                 | __system__Mid_S
23718     05 4A 05 F6 | 	mov	COUNT_, #5
2371c     A8 00 A0 FD | 	call	#pushregs_
23720     09 1F 02 F6 | 	mov	local01, arg01
23724     0A 21 02 F6 | 	mov	local02, arg02
23728     01 16 56 F2 | 	cmps	arg03, #1 wc
2372c     88 01 00 CF 
23730     A0 FA 05 C6 |  if_b	mov	result1, ##@LR__5075
23734     80 00 90 CD |  if_b	jmp	#LR__3153
23738     01 20 86 F1 | 	sub	local02, #1
2373c     00 20 56 F3 | 	fges	local02, #0 wc
23740     0F 13 02 F6 | 	mov	arg01, local01
23744     09 23 02 F6 | 	mov	local03, arg01
23748     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
2374c                 | LR__3150
2374c     11 FB C9 FA | 	rdbyte	result1, local03 wz
23750     01 22 06 51 |  if_ne	add	local03, #1
23754     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
23758                 | LR__3151
23758     09 23 82 F1 | 	sub	local03, arg01
2375c     11 FB 01 F6 | 	mov	result1, local03
23760     FD 14 02 F6 | 	mov	arg02, result1
23764     10 15 52 F2 | 	cmps	arg02, local02 wc
23768     88 01 00 CF 
2376c     A1 FA 05 C6 |  if_b	mov	result1, ##@LR__5076
23770     44 00 90 CD |  if_b	jmp	#LR__3153
23774     0A 25 02 F6 | 	mov	local04, arg02
23778     10 25 82 F1 | 	sub	local04, local02
2377c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
23780     0B 25 02 16 |  if_a	mov	local04, arg03
23784     12 13 02 F6 | 	mov	arg01, local04
23788     02 12 06 F1 | 	add	arg01, #2
2378c     D8 1E B0 FD | 	call	#__system___gc_alloc_managed
23790     FD 26 0A F6 | 	mov	local05, result1 wz
23794     1C 00 90 AD |  if_e	jmp	#LR__3152
23798     0F 21 02 F1 | 	add	local02, local01
2379c     13 13 02 F6 | 	mov	arg01, local05
237a0     10 15 02 F6 | 	mov	arg02, local02
237a4     12 17 02 F6 | 	mov	arg03, local04
237a8     F8 DC BF FD | 	call	#__system____builtin_memmove
237ac     13 25 02 F1 | 	add	local04, local05
237b0     12 01 48 FC | 	wrbyte	#0, local04
237b4                 | LR__3152
237b4     13 FB 01 F6 | 	mov	result1, local05
237b8                 | LR__3153
237b8     A7 F0 03 F6 | 	mov	ptra, fp
237bc     B2 00 A0 FD | 	call	#popregs_
237c0                 | __system__Mid_S_ret
237c0     2D 00 64 FD | 	ret
237c4                 | 
237c4                 | __system__Chr_S
237c4     01 4A 05 F6 | 	mov	COUNT_, #1
237c8     A8 00 A0 FD | 	call	#pushregs_
237cc     09 1F 02 F6 | 	mov	local01, arg01
237d0     03 12 06 F6 | 	mov	arg01, #3
237d4     90 1E B0 FD | 	call	#__system___gc_alloc_managed
237d8     00 FA 4D F2 | 	cmps	result1, #0 wz
237dc     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
237e0     01 FA 05 51 |  if_ne	add	result1, #1
237e4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
237e8     01 FA 85 51 |  if_ne	sub	result1, #1
237ec     A7 F0 03 F6 | 	mov	ptra, fp
237f0     B2 00 A0 FD | 	call	#popregs_
237f4                 | __system__Chr_S_ret
237f4     2D 00 64 FD | 	ret
237f8                 | 
237f8                 | __system__str_S
237f8     02 4A 05 F6 | 	mov	COUNT_, #2
237fc     A8 00 A0 FD | 	call	#pushregs_
23800     09 1F 02 F6 | 	mov	local01, arg01
23804     10 12 06 F6 | 	mov	arg01, #16
23808     5C 1E B0 FD | 	call	#__system___gc_alloc_managed
2380c     FD 20 0A F6 | 	mov	local02, result1 wz
23810     30 00 90 AD |  if_e	jmp	#LR__3160
23814     F8 13 02 F6 | 	mov	arg01, ptra
23818     08 F0 07 F1 | 	add	ptra, #8
2381c     09 21 62 FC | 	wrlong	local02, arg01
23820     04 12 06 F1 | 	add	arg01, #4
23824     09 01 68 FC | 	wrlong	#0, arg01
23828     04 12 86 F1 | 	sub	arg01, #4
2382c     00 B8 04 FF 
23830     00 12 46 F5 | 	or	arg01, ##158334976
23834     00 14 06 F6 | 	mov	arg02, #0
23838     0F 17 02 F6 | 	mov	arg03, local01
2383c     67 18 06 F6 | 	mov	arg04, #103
23840     90 EE BF FD | 	call	#__system___fmtfloat
23844                 | LR__3160
23844     10 FB 01 F6 | 	mov	result1, local02
23848     A7 F0 03 F6 | 	mov	ptra, fp
2384c     B2 00 A0 FD | 	call	#popregs_
23850                 | __system__str_S_ret
23850     2D 00 64 FD | 	ret
23854                 | 
23854                 | __system__Number_S
23854     08 4A 05 F6 | 	mov	COUNT_, #8
23858     A8 00 A0 FD | 	call	#pushregs_
2385c     09 1F 02 F6 | 	mov	local01, arg01
23860     0A 21 0A F6 | 	mov	local02, arg02 wz
23864     0B 23 02 F6 | 	mov	local03, arg03
23868     3C 00 90 5D |  if_ne	jmp	#LR__3172
2386c     01 20 06 F6 | 	mov	local02, #1
23870     11 25 02 F6 | 	mov	local04, local03
23874     01 26 06 F6 | 	mov	local05, #1
23878     97 16 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
2387c                 | LR__3170
2387c     00 28 06 F6 | 	mov	local06, #0
23880     0F 25 1A F2 | 	cmp	local04, local01 wcz
23884     01 28 66 E6 |  if_be	neg	local06, #1
23888     12 27 12 F2 | 	cmp	local05, local04 wc
2388c     15 2B A2 F1 | 	subx	local07, local07
23890     15 29 CA F7 | 	test	local06, local07 wz
23894     11 25 02 5D |  if_ne	qmul	local04, local03
23898     12 27 02 56 |  if_ne	mov	local05, local04
2389c     01 20 06 51 |  if_ne	add	local02, #1
238a0     18 24 62 5D |  if_ne	getqx	local04
238a4     D4 FF 9F 5D |  if_ne	jmp	#LR__3170
238a8                 | LR__3171
238a8                 | LR__3172
238a8     20 20 36 F3 | 	fle	local02, #32 wc
238ac     10 13 02 F6 | 	mov	arg01, local02
238b0     02 12 06 F1 | 	add	arg01, #2
238b4     B0 1D B0 FD | 	call	#__system___gc_alloc_managed
238b8     FD 28 02 F6 | 	mov	local06, result1
238bc     10 2B 02 F6 | 	mov	local07, local02
238c0     14 2B 02 F1 | 	add	local07, local06
238c4     15 01 48 FC | 	wrbyte	#0, local07
238c8     97 1A 48 FB | 	callpa	#(@LR__3174-@LR__3173)>>2,fcache_load_ptr_
238cc                 | LR__3173
238cc     01 20 16 F2 | 	cmp	local02, #1 wc
238d0     2C 00 90 CD |  if_b	jmp	#LR__3175
238d4     11 1F 12 FD | 	qdiv	local01, local03
238d8     01 20 86 F1 | 	sub	local02, #1
238dc     10 2B 02 F6 | 	mov	local07, local02
238e0     14 2B 02 F1 | 	add	local07, local06
238e4     19 2C 62 FD | 	getqy	local08
238e8     0A 2C 16 F2 | 	cmp	local08, #10 wc
238ec     30 2C 06 C1 |  if_b	add	local08, #48
238f0     37 2C 06 31 |  if_ae	add	local08, #55
238f4     15 2D 42 FC | 	wrbyte	local08, local07
238f8     18 1E 62 FD | 	getqx	local01
238fc     CC FF 9F FD | 	jmp	#LR__3173
23900                 | LR__3174
23900                 | LR__3175
23900     14 FB 01 F6 | 	mov	result1, local06
23904     A7 F0 03 F6 | 	mov	ptra, fp
23908     B2 00 A0 FD | 	call	#popregs_
2390c                 | __system__Number_S_ret
2390c     2D 00 64 FD | 	ret
23910                 | 
23910                 | __system__LCase_S
23910     07 4A 05 F6 | 	mov	COUNT_, #7
23914     A8 00 A0 FD | 	call	#pushregs_
23918     09 1F 02 F6 | 	mov	local01, arg01
2391c     09 21 02 F6 | 	mov	local02, arg01
23920     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
23924                 | LR__3180
23924     10 FB C9 FA | 	rdbyte	result1, local02 wz
23928     01 20 06 51 |  if_ne	add	local02, #1
2392c     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
23930                 | LR__3181
23930     09 21 82 F1 | 	sub	local02, arg01
23934     10 FB 01 F6 | 	mov	result1, local02
23938     FD 20 0A F6 | 	mov	local02, result1 wz
2393c     88 01 00 AF 
23940     A2 FA 05 A6 |  if_e	mov	result1, ##@LR__5077
23944     7C 00 90 AD |  if_e	jmp	#LR__3187
23948     10 13 02 F6 | 	mov	arg01, local02
2394c     02 12 06 F1 | 	add	arg01, #2
23950     14 1D B0 FD | 	call	#__system___gc_alloc_managed
23954     FD 22 0A F6 | 	mov	local03, result1 wz
23958     64 00 90 AD |  if_e	jmp	#LR__3186
2395c     01 24 66 F6 | 	neg	local04, #1
23960     97 26 48 FB | 	callpa	#(@LR__3185-@LR__3182)>>2,fcache_load_ptr_
23964                 | LR__3182
23964     01 24 06 F1 | 	add	local04, #1
23968     12 27 02 F6 | 	mov	local05, local04
2396c     0F 27 02 F1 | 	add	local05, local01
23970     13 29 C2 FA | 	rdbyte	local06, local05
23974     41 28 56 F2 | 	cmps	local06, #65 wc
23978     18 00 90 CD |  if_b	jmp	#LR__3183
2397c     5B 28 56 F2 | 	cmps	local06, #91 wc
23980     12 2B 02 C6 |  if_b	mov	local07, local04
23984     11 2B 02 C1 |  if_b	add	local07, local03
23988     20 28 06 C1 |  if_b	add	local06, #32
2398c     15 29 42 CC |  if_b	wrbyte	local06, local07
23990     0C 00 90 CD |  if_b	jmp	#LR__3184
23994                 | LR__3183
23994     12 2B 02 F6 | 	mov	local07, local04
23998     11 2B 02 F1 | 	add	local07, local03
2399c     15 29 42 FC | 	wrbyte	local06, local07
239a0                 | LR__3184
239a0     10 29 02 F6 | 	mov	local06, local02
239a4     01 28 86 F1 | 	sub	local06, #1
239a8     14 25 0A F2 | 	cmp	local04, local06 wz
239ac     B4 FF 9F 5D |  if_ne	jmp	#LR__3182
239b0                 | LR__3185
239b0     11 21 02 F1 | 	add	local02, local03
239b4     10 01 48 FC | 	wrbyte	#0, local02
239b8     11 FB 01 F6 | 	mov	result1, local03
239bc     04 00 90 FD | 	jmp	#LR__3187
239c0                 | LR__3186
239c0     11 FB 01 F6 | 	mov	result1, local03
239c4                 | LR__3187
239c4     A7 F0 03 F6 | 	mov	ptra, fp
239c8     B2 00 A0 FD | 	call	#popregs_
239cc                 | __system__LCase_S_ret
239cc     2D 00 64 FD | 	ret
239d0                 | 
239d0                 | __system__LTrim_S
239d0     05 4A 05 F6 | 	mov	COUNT_, #5
239d4     A8 00 A0 FD | 	call	#pushregs_
239d8     09 1F 02 F6 | 	mov	local01, arg01
239dc     09 21 02 F6 | 	mov	local02, arg01
239e0     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
239e4                 | LR__3190
239e4     10 FB C9 FA | 	rdbyte	result1, local02 wz
239e8     01 20 06 51 |  if_ne	add	local02, #1
239ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
239f0                 | LR__3191
239f0     09 21 82 F1 | 	sub	local02, arg01
239f4     10 FB 01 F6 | 	mov	result1, local02
239f8     FD 20 0A F6 | 	mov	local02, result1 wz
239fc     88 01 00 AF 
23a00     A3 FA 05 A6 |  if_e	mov	result1, ##@LR__5078
23a04     7C 00 90 AD |  if_e	jmp	#LR__3196
23a08     00 22 06 F6 | 	mov	local03, #0
23a0c     10 25 02 F6 | 	mov	local04, local02
23a10                 | LR__3192
23a10     12 23 52 F2 | 	cmps	local03, local04 wc
23a14     68 00 90 3D |  if_ae	jmp	#LR__3195
23a18     11 17 02 F6 | 	mov	arg03, local03
23a1c     0F 17 02 F1 | 	add	arg03, local01
23a20     0B 17 C2 FA | 	rdbyte	arg03, arg03
23a24     20 16 0E F2 | 	cmp	arg03, #32 wz
23a28     4C 00 90 AD |  if_e	jmp	#LR__3194
23a2c     10 13 02 F6 | 	mov	arg01, local02
23a30     11 13 82 F1 | 	sub	arg01, local03
23a34     02 12 06 F1 | 	add	arg01, #2
23a38     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
23a3c     FD 26 0A F6 | 	mov	local05, result1 wz
23a40     2C 00 90 AD |  if_e	jmp	#LR__3193
23a44     11 15 02 F6 | 	mov	arg02, local03
23a48     0F 15 02 F1 | 	add	arg02, local01
23a4c     10 17 02 F6 | 	mov	arg03, local02
23a50     11 17 82 F1 | 	sub	arg03, local03
23a54     13 13 02 F6 | 	mov	arg01, local05
23a58     48 DA BF FD | 	call	#__system____builtin_memmove
23a5c     11 21 82 F1 | 	sub	local02, local03
23a60     13 21 02 F1 | 	add	local02, local05
23a64     10 01 48 FC | 	wrbyte	#0, local02
23a68     13 FB 01 F6 | 	mov	result1, local05
23a6c     14 00 90 FD | 	jmp	#LR__3196
23a70                 | LR__3193
23a70     13 FB 01 F6 | 	mov	result1, local05
23a74     0C 00 90 FD | 	jmp	#LR__3196
23a78                 | LR__3194
23a78     01 22 06 F1 | 	add	local03, #1
23a7c     90 FF 9F FD | 	jmp	#LR__3192
23a80                 | LR__3195
23a80     0F FB 01 F6 | 	mov	result1, local01
23a84                 | LR__3196
23a84     A7 F0 03 F6 | 	mov	ptra, fp
23a88     B2 00 A0 FD | 	call	#popregs_
23a8c                 | __system__LTrim_S_ret
23a8c     2D 00 64 FD | 	ret
23a90                 | 
23a90                 | __system__RTrim_S
23a90     04 4A 05 F6 | 	mov	COUNT_, #4
23a94     A8 00 A0 FD | 	call	#pushregs_
23a98     09 1F 02 F6 | 	mov	local01, arg01
23a9c     09 21 02 F6 | 	mov	local02, arg01
23aa0     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
23aa4                 | LR__3200
23aa4     10 FB C9 FA | 	rdbyte	result1, local02 wz
23aa8     01 20 06 51 |  if_ne	add	local02, #1
23aac     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
23ab0                 | LR__3201
23ab0     09 21 82 F1 | 	sub	local02, arg01
23ab4     10 FB 01 F6 | 	mov	result1, local02
23ab8     FD 20 0A F6 | 	mov	local02, result1 wz
23abc     88 01 00 AF 
23ac0     A4 FA 05 A6 |  if_e	mov	result1, ##@LR__5079
23ac4     74 00 90 AD |  if_e	jmp	#LR__3205
23ac8     10 23 02 F6 | 	mov	local03, local02
23acc     01 22 86 F1 | 	sub	local03, #1
23ad0                 | LR__3202
23ad0     11 15 02 F6 | 	mov	arg02, local03
23ad4     0F 15 02 F1 | 	add	arg02, local01
23ad8     0A 21 C2 FA | 	rdbyte	local02, arg02
23adc     20 20 0E F2 | 	cmp	local02, #32 wz
23ae0     44 00 90 AD |  if_e	jmp	#LR__3204
23ae4     11 13 02 F6 | 	mov	arg01, local03
23ae8     02 12 06 F1 | 	add	arg01, #2
23aec     78 1B B0 FD | 	call	#__system___gc_alloc_managed
23af0     FD 24 0A F6 | 	mov	local04, result1 wz
23af4     28 00 90 AD |  if_e	jmp	#LR__3203
23af8     11 17 02 F6 | 	mov	arg03, local03
23afc     01 16 06 F1 | 	add	arg03, #1
23b00     12 13 02 F6 | 	mov	arg01, local04
23b04     0F 15 02 F6 | 	mov	arg02, local01
23b08     98 D9 BF FD | 	call	#__system____builtin_memmove
23b0c     01 22 06 F1 | 	add	local03, #1
23b10     12 23 02 F1 | 	add	local03, local04
23b14     11 01 48 FC | 	wrbyte	#0, local03
23b18     12 FB 01 F6 | 	mov	result1, local04
23b1c     1C 00 90 FD | 	jmp	#LR__3205
23b20                 | LR__3203
23b20     12 FB 01 F6 | 	mov	result1, local04
23b24     14 00 90 FD | 	jmp	#LR__3205
23b28                 | LR__3204
23b28     01 22 86 F1 | 	sub	local03, #1
23b2c     00 22 56 F2 | 	cmps	local03, #0 wc
23b30     9C FF 9F 3D |  if_ae	jmp	#LR__3202
23b34     88 01 00 FF 
23b38     A5 FA 05 F6 | 	mov	result1, ##@LR__5080
23b3c                 | LR__3205
23b3c     A7 F0 03 F6 | 	mov	ptra, fp
23b40     B2 00 A0 FD | 	call	#popregs_
23b44                 | __system__RTrim_S_ret
23b44     2D 00 64 FD | 	ret
23b48                 | 
23b48                 | __system__Instr
23b48     07 4A 05 F6 | 	mov	COUNT_, #7
23b4c     A8 00 A0 FD | 	call	#pushregs_
23b50     09 1F 02 F6 | 	mov	local01, arg01
23b54     0A 21 02 F6 | 	mov	local02, arg02
23b58     0B 23 02 F6 | 	mov	local03, arg03
23b5c     11 13 02 F6 | 	mov	arg01, local03
23b60     09 25 02 F6 | 	mov	local04, arg01
23b64     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
23b68                 | LR__3210
23b68     12 FB C9 FA | 	rdbyte	result1, local04 wz
23b6c     01 24 06 51 |  if_ne	add	local04, #1
23b70     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
23b74                 | LR__3211
23b74     09 25 82 F1 | 	sub	local04, arg01
23b78     12 27 02 F6 | 	mov	local05, local04
23b7c     10 13 02 F6 | 	mov	arg01, local02
23b80     09 25 02 F6 | 	mov	local04, arg01
23b84     97 06 48 FB | 	callpa	#(@LR__3213-@LR__3212)>>2,fcache_load_ptr_
23b88                 | LR__3212
23b88     12 FB C9 FA | 	rdbyte	result1, local04 wz
23b8c     01 24 06 51 |  if_ne	add	local04, #1
23b90     F4 FF 9F 5D |  if_ne	jmp	#LR__3212
23b94                 | LR__3213
23b94     09 25 82 F1 | 	sub	local04, arg01
23b98     12 FB 01 F6 | 	mov	result1, local04
23b9c     FD 18 0A F6 | 	mov	arg04, result1 wz
23ba0     00 FA 05 A6 |  if_e	mov	result1, #0
23ba4     98 00 90 AD |  if_e	jmp	#LR__3217
23ba8     00 26 0E F2 | 	cmp	local05, #0 wz
23bac     00 FA 05 A6 |  if_e	mov	result1, #0
23bb0     8C 00 90 AD |  if_e	jmp	#LR__3217
23bb4     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23bb8     00 FA 05 16 |  if_a	mov	result1, #0
23bbc     80 00 90 1D |  if_a	jmp	#LR__3217
23bc0     01 1E 56 F2 | 	cmps	local01, #1 wc
23bc4     01 1E 06 C6 |  if_b	mov	local01, #1
23bc8     11 29 C2 FA | 	rdbyte	local06, local03
23bcc     01 26 0E F2 | 	cmp	local05, #1 wz
23bd0     18 00 90 5D |  if_ne	jmp	#LR__3214
23bd4     10 13 02 F6 | 	mov	arg01, local02
23bd8     14 15 02 F6 | 	mov	arg02, local06
23bdc     0F 17 02 F6 | 	mov	arg03, local01
23be0     00 18 06 F6 | 	mov	arg04, #0
23be4     18 37 B0 FD | 	call	#__system____ScanForChar
23be8     54 00 90 FD | 	jmp	#LR__3217
23bec                 | LR__3214
23bec     0F 2B 02 F6 | 	mov	local07, local01
23bf0                 | LR__3215
23bf0     10 13 02 F6 | 	mov	arg01, local02
23bf4     14 15 02 F6 | 	mov	arg02, local06
23bf8     15 17 02 F6 | 	mov	arg03, local07
23bfc     00 18 06 F6 | 	mov	arg04, #0
23c00     FC 36 B0 FD | 	call	#__system____ScanForChar
23c04     FD 2A 0A F6 | 	mov	local07, result1 wz
23c08     30 00 90 AD |  if_e	jmp	#LR__3216
23c0c     13 17 02 F6 | 	mov	arg03, local05
23c10     10 13 02 F6 | 	mov	arg01, local02
23c14     15 15 02 F6 | 	mov	arg02, local07
23c18     FC FA BF FD | 	call	#__system__Mid_S
23c1c     FD 12 02 F6 | 	mov	arg01, result1
23c20     11 15 02 F6 | 	mov	arg02, local03
23c24     84 D9 BF FD | 	call	#__system___string_cmp
23c28     00 FA 0D F2 | 	cmp	result1, #0 wz
23c2c     15 FB 01 A6 |  if_e	mov	result1, local07
23c30     0C 00 90 AD |  if_e	jmp	#LR__3217
23c34     13 2B 02 F1 | 	add	local07, local05
23c38     B4 FF 9F FD | 	jmp	#LR__3215
23c3c                 | LR__3216
23c3c     00 FA 05 F6 | 	mov	result1, #0
23c40                 | LR__3217
23c40     A7 F0 03 F6 | 	mov	ptra, fp
23c44     B2 00 A0 FD | 	call	#popregs_
23c48                 | __system__Instr_ret
23c48     2D 00 64 FD | 	ret
23c4c                 | 
23c4c                 | __system__InstrRev
23c4c     07 4A 05 F6 | 	mov	COUNT_, #7
23c50     A8 00 A0 FD | 	call	#pushregs_
23c54     09 1F 02 F6 | 	mov	local01, arg01
23c58     0A 21 02 F6 | 	mov	local02, arg02
23c5c     0B 23 02 F6 | 	mov	local03, arg03
23c60     11 13 02 F6 | 	mov	arg01, local03
23c64     09 25 02 F6 | 	mov	local04, arg01
23c68     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
23c6c                 | LR__3220
23c6c     12 FB C9 FA | 	rdbyte	result1, local04 wz
23c70     01 24 06 51 |  if_ne	add	local04, #1
23c74     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
23c78                 | LR__3221
23c78     09 25 82 F1 | 	sub	local04, arg01
23c7c     12 27 02 F6 | 	mov	local05, local04
23c80     10 13 02 F6 | 	mov	arg01, local02
23c84     09 25 02 F6 | 	mov	local04, arg01
23c88     97 06 48 FB | 	callpa	#(@LR__3223-@LR__3222)>>2,fcache_load_ptr_
23c8c                 | LR__3222
23c8c     12 FB C9 FA | 	rdbyte	result1, local04 wz
23c90     01 24 06 51 |  if_ne	add	local04, #1
23c94     F4 FF 9F 5D |  if_ne	jmp	#LR__3222
23c98                 | LR__3223
23c98     09 25 82 F1 | 	sub	local04, arg01
23c9c     12 FB 01 F6 | 	mov	result1, local04
23ca0     FD 18 0A F6 | 	mov	arg04, result1 wz
23ca4     00 FA 05 A6 |  if_e	mov	result1, #0
23ca8     98 00 90 AD |  if_e	jmp	#LR__3227
23cac     00 26 0E F2 | 	cmp	local05, #0 wz
23cb0     00 FA 05 A6 |  if_e	mov	result1, #0
23cb4     8C 00 90 AD |  if_e	jmp	#LR__3227
23cb8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23cbc     0C 1F 02 16 |  if_a	mov	local01, arg04
23cc0     01 1E 56 F2 | 	cmps	local01, #1 wc
23cc4     01 1E 06 C6 |  if_b	mov	local01, #1
23cc8     11 29 C2 FA | 	rdbyte	local06, local03
23ccc     01 26 0E F2 | 	cmp	local05, #1 wz
23cd0     18 00 90 5D |  if_ne	jmp	#LR__3224
23cd4     10 13 02 F6 | 	mov	arg01, local02
23cd8     14 15 02 F6 | 	mov	arg02, local06
23cdc     0F 17 02 F6 | 	mov	arg03, local01
23ce0     01 18 06 F6 | 	mov	arg04, #1
23ce4     18 36 B0 FD | 	call	#__system____ScanForChar
23ce8     58 00 90 FD | 	jmp	#LR__3227
23cec                 | LR__3224
23cec     13 2B 02 F6 | 	mov	local07, local05
23cf0     01 2A 86 F1 | 	sub	local07, #1
23cf4                 | LR__3225
23cf4     10 13 02 F6 | 	mov	arg01, local02
23cf8     14 15 02 F6 | 	mov	arg02, local06
23cfc     15 17 02 F6 | 	mov	arg03, local07
23d00     01 18 06 F6 | 	mov	arg04, #1
23d04     F8 35 B0 FD | 	call	#__system____ScanForChar
23d08     FD 2A 0A F6 | 	mov	local07, result1 wz
23d0c     30 00 90 AD |  if_e	jmp	#LR__3226
23d10     13 17 02 F6 | 	mov	arg03, local05
23d14     10 13 02 F6 | 	mov	arg01, local02
23d18     15 15 02 F6 | 	mov	arg02, local07
23d1c     F8 F9 BF FD | 	call	#__system__Mid_S
23d20     FD 12 02 F6 | 	mov	arg01, result1
23d24     11 15 02 F6 | 	mov	arg02, local03
23d28     80 D8 BF FD | 	call	#__system___string_cmp
23d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
23d30     15 FB 01 A6 |  if_e	mov	result1, local07
23d34     0C 00 90 AD |  if_e	jmp	#LR__3227
23d38     13 2B 82 F1 | 	sub	local07, local05
23d3c     B4 FF 9F FD | 	jmp	#LR__3225
23d40                 | LR__3226
23d40     00 FA 05 F6 | 	mov	result1, #0
23d44                 | LR__3227
23d44     A7 F0 03 F6 | 	mov	ptra, fp
23d48     B2 00 A0 FD | 	call	#popregs_
23d4c                 | __system__InstrRev_ret
23d4c     2D 00 64 FD | 	ret
23d50                 | 
23d50                 | __system___remove
23d50     06 4A 05 F6 | 	mov	COUNT_, #6
23d54     A8 00 A0 FD | 	call	#pushregs_
23d58     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23d5c     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
23d60     09 15 02 F6 | 	mov	arg02, arg01
23d64     0F 13 02 F6 | 	mov	arg01, local01
23d68     00 16 06 F6 | 	mov	arg03, #0
23d6c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23d70     A8 DF BF FD | 	call	#__system____getvfsforfile
23d74     FD 20 0A F6 | 	mov	local02, result1 wz
23d78     10 00 90 AD |  if_e	jmp	#LR__3230
23d7c     20 20 06 F1 | 	add	local02, #32
23d80     10 13 0A FB | 	rdlong	arg01, local02 wz
23d84     20 20 86 F1 | 	sub	local02, #32
23d88     14 00 90 5D |  if_ne	jmp	#LR__3231
23d8c                 | LR__3230
23d8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23d90     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23d94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23d98     01 FA 65 F6 | 	neg	result1, #1
23d9c     A8 00 90 FD | 	jmp	#LR__3234
23da0                 | LR__3231
23da0     40 20 06 F1 | 	add	local02, #64
23da4     10 23 02 FB | 	rdlong	local03, local02
23da8     11 25 02 F6 | 	mov	local04, local03
23dac     40 20 86 F1 | 	sub	local02, #64
23db0     13 24 46 F7 | 	zerox	local04, #19
23db4     14 22 46 F0 | 	shr	local03, #20
23db8     02 22 66 F0 | 	shl	local03, #2
23dbc     ED 22 02 F1 | 	add	local03, __methods__
23dc0     11 23 02 FB | 	rdlong	local03, local03
23dc4     0F 13 02 F6 | 	mov	arg01, local01
23dc8     F2 26 02 F6 | 	mov	local05, objptr
23dcc     12 E5 01 F6 | 	mov	objptr, local04
23dd0     2D 22 62 FD | 	call	local03
23dd4     13 E5 01 F6 | 	mov	objptr, local05
23dd8     FD 28 02 F6 | 	mov	local06, result1
23ddc     FF FF 7F FF 
23de0     F2 29 0E F2 | 	cmp	local06, ##-14 wz
23de4     38 00 90 5D |  if_ne	jmp	#LR__3232
23de8     3C 20 06 F1 | 	add	local02, #60
23dec     10 29 02 FB | 	rdlong	local06, local02
23df0     14 23 02 F6 | 	mov	local03, local06
23df4     13 28 46 F7 | 	zerox	local06, #19
23df8     14 22 46 F0 | 	shr	local03, #20
23dfc     02 22 66 F0 | 	shl	local03, #2
23e00     ED 22 02 F1 | 	add	local03, __methods__
23e04     11 23 02 FB | 	rdlong	local03, local03
23e08     0F 13 02 F6 | 	mov	arg01, local01
23e0c     F2 26 02 F6 | 	mov	local05, objptr
23e10     14 E5 01 F6 | 	mov	objptr, local06
23e14     2D 22 62 FD | 	call	local03
23e18     13 E5 01 F6 | 	mov	objptr, local05
23e1c     FD 28 02 F6 | 	mov	local06, result1
23e20                 | LR__3232
23e20     00 28 0E F2 | 	cmp	local06, #0 wz
23e24     1C 00 90 AD |  if_e	jmp	#LR__3233
23e28     14 13 6A F6 | 	neg	arg01, local06 wz
23e2c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23e30     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23e34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23e38     01 FA 65 56 |  if_ne	neg	result1, #1
23e3c     00 FA 05 A6 |  if_e	mov	result1, #0
23e40     04 00 90 FD | 	jmp	#LR__3234
23e44                 | LR__3233
23e44     00 FA 05 F6 | 	mov	result1, #0
23e48                 | LR__3234
23e48     A7 F0 03 F6 | 	mov	ptra, fp
23e4c     B2 00 A0 FD | 	call	#popregs_
23e50                 | __system___remove_ret
23e50     2D 00 64 FD | 	ret
23e54                 | 
23e54                 | __system___strerror
23e54     00 12 56 F2 | 	cmps	arg01, #0 wc
23e58     08 00 90 CD |  if_b	jmp	#LR__3240
23e5c     1A 12 56 F2 | 	cmps	arg01, #26 wc
23e60     04 00 90 CD |  if_b	jmp	#LR__3241
23e64                 | LR__3240
23e64     19 12 06 F6 | 	mov	arg01, #25
23e68                 | LR__3241
23e68     02 12 66 F0 | 	shl	arg01, #2
23e6c     01 00 00 FF 
23e70     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23e74     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23e78     09 FB 01 FB | 	rdlong	result1, arg01
23e7c     01 00 00 FF 
23e80     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23e84                 | __system___strerror_ret
23e84     2D 00 64 FD | 	ret
23e88                 | 
23e88                 | __system___int64_shl
23e88     20 16 CE F7 | 	test	arg03, #32 wz
23e8c     09 15 02 56 |  if_ne	mov	arg02, arg01
23e90     00 12 06 56 |  if_ne	mov	arg01, #0
23e94     1F 16 CE F7 | 	test	arg03, #31 wz
23e98     18 00 90 AD |  if_e	jmp	#LR__3250
23e9c     0B 15 62 F0 | 	shl	arg02, arg03
23ea0     09 FB 01 F6 | 	mov	result1, arg01
23ea4     0B FD 61 F6 | 	neg	result2, arg03
23ea8     FE FA 41 F0 | 	shr	result1, result2
23eac     FD 14 42 F5 | 	or	arg02, result1
23eb0     0B 13 62 F0 | 	shl	arg01, arg03
23eb4                 | LR__3250
23eb4     0A FD 01 F6 | 	mov	result2, arg02
23eb8     09 FB 01 F6 | 	mov	result1, arg01
23ebc                 | __system___int64_shl_ret
23ebc     2D 00 64 FD | 	ret
23ec0                 | 
23ec0                 | __system___usepins
23ec0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23ec4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23ec8     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23ecc     00 13 CA F7 | 	test	arg01, _var01 wz
23ed0     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23ed4     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23ed8     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23edc     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23ee0     00 FA 05 56 |  if_ne	mov	result1, #0
23ee4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23ee8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23eec     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23ef0     09 03 42 F5 | 	or	_var02, arg01
23ef4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23ef8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23efc     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23f00     0A 03 42 F5 | 	or	_var02, arg02
23f04     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23f08     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23f0c     01 FA 65 F6 | 	neg	result1, #1
23f10                 | __system___usepins_ret
23f10     2D 00 64 FD | 	ret
23f14                 | 
23f14                 | __system___freepins
23f14     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23f18     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23f1c     09 01 22 F5 | 	andn	_var01, arg01
23f20     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23f24     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23f28     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23f2c     0A 01 22 F5 | 	andn	_var01, arg02
23f30     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23f34     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23f38                 | __system___freepins_ret
23f38     2D 00 64 FD | 	ret
23f3c                 | 
23f3c                 | __system___float_fromuns
23f3c     09 17 0A F6 | 	mov	arg03, arg01 wz
23f40     0B FB 01 A6 |  if_e	mov	result1, arg03
23f44     24 00 90 AD |  if_e	jmp	#LR__3260
23f48     0B 15 92 F7 | 	encod	arg02, arg03 wc
23f4c     01 14 06 C1 |  if_b	add	arg02, #1
23f50     01 14 86 F1 | 	sub	arg02, #1
23f54     1F 12 06 F6 | 	mov	arg01, #31
23f58     0A 13 82 F1 | 	sub	arg01, arg02
23f5c     09 17 62 F0 | 	shl	arg03, arg01
23f60     02 16 46 F0 | 	shr	arg03, #2
23f64     00 12 06 F6 | 	mov	arg01, #0
23f68     4C 09 B0 FD | 	call	#__system___float_Pack
23f6c                 | LR__3260
23f6c                 | __system___float_fromuns_ret
23f6c     2D 00 64 FD | 	ret
23f70                 | 
23f70                 | __system___float_add
23f70     0F 4A 05 F6 | 	mov	COUNT_, #15
23f74     A8 00 A0 FD | 	call	#pushregs_
23f78     09 1F 02 F6 | 	mov	local01, arg01
23f7c     0A 21 02 F6 | 	mov	local02, arg02
23f80     00 22 06 F6 | 	mov	local03, #0
23f84     0F 25 02 F6 | 	mov	local04, local01
23f88     12 27 02 F6 | 	mov	local05, local04
23f8c     16 26 46 F7 | 	zerox	local05, #22
23f90     12 29 02 F6 | 	mov	local06, local04
23f94     01 28 66 F0 | 	shl	local06, #1
23f98     18 28 46 F0 | 	shr	local06, #24
23f9c     1F 24 46 F0 | 	shr	local04, #31
23fa0     10 13 02 F6 | 	mov	arg01, local02
23fa4     09 FB 01 F6 | 	mov	result1, arg01
23fa8     FD 2A 02 F6 | 	mov	local07, result1
23fac     15 2D 02 F6 | 	mov	local08, local07
23fb0     16 2C 46 F7 | 	zerox	local08, #22
23fb4     15 2F 02 F6 | 	mov	local09, local07
23fb8     01 2E 66 F0 | 	shl	local09, #1
23fbc     18 2E 46 F0 | 	shr	local09, #24
23fc0     17 31 02 F6 | 	mov	local10, local09
23fc4     1F 2A 46 F0 | 	shr	local07, #31
23fc8     00 32 06 F6 | 	mov	local11, #0
23fcc     00 34 06 F6 | 	mov	local12, #0
23fd0     18 29 12 F2 | 	cmp	local06, local10 wc
23fd4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23fd8     2C 00 90 1D |  if_a	jmp	#LR__3270
23fdc     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23fe0     24 00 90 3D |  if_ae	jmp	#LR__3270
23fe4     13 37 02 F6 | 	mov	local13, local05
23fe8     16 27 02 F6 | 	mov	local05, local08
23fec     1B 2D 02 F6 | 	mov	local08, local13
23ff0     14 37 02 F6 | 	mov	local13, local06
23ff4     18 29 02 F6 | 	mov	local06, local10
23ff8     1B 31 02 F6 | 	mov	local10, local13
23ffc     12 37 02 F6 | 	mov	local13, local04
24000     15 25 02 F6 | 	mov	local04, local07
24004     1B 2B 02 F6 | 	mov	local07, local13
24008                 | LR__3270
24008     FF 28 0E F2 | 	cmp	local06, #255 wz
2400c     70 01 90 AD |  if_e	jmp	#LR__3285
24010     00 28 0E F2 | 	cmp	local06, #0 wz
24014     AC 01 90 AD |  if_e	jmp	#LR__3287
24018     17 26 26 F4 | 	bith	local05, #23
2401c                 | LR__3271
2401c     00 30 0E F2 | 	cmp	local10, #0 wz
24020     F0 01 90 AD |  if_e	jmp	#LR__3291
24024     17 2C 26 F4 | 	bith	local08, #23
24028                 | LR__3272
24028     7F 28 86 F1 | 	sub	local06, #127
2402c     7F 30 86 F1 | 	sub	local10, #127
24030     14 39 02 F6 | 	mov	local14, local06
24034     18 39 82 F1 | 	sub	local14, local10
24038     97 14 48 FB | 	callpa	#(@LR__3274-@LR__3273)>>2,fcache_load_ptr_
2403c                 | LR__3273
2403c     20 38 56 F2 | 	cmps	local14, #32 wc
24040     20 00 90 CD |  if_b	jmp	#LR__3275
24044     16 2F 02 F6 | 	mov	local09, local08
24048     00 32 0E F2 | 	cmp	local11, #0 wz
2404c     6F 32 62 FD | 	wrnz	local11
24050     19 2F 42 F5 | 	or	local09, local11
24054     17 33 02 F6 | 	mov	local11, local09
24058     00 2C 06 F6 | 	mov	local08, #0
2405c     20 38 86 F1 | 	sub	local14, #32
24060     D8 FF 9F FD | 	jmp	#LR__3273
24064                 | LR__3274
24064                 | LR__3275
24064     00 38 0E F2 | 	cmp	local14, #0 wz
24068     38 00 90 AD |  if_e	jmp	#LR__3276
2406c     16 37 02 F6 | 	mov	local13, local08
24070     20 30 06 F6 | 	mov	local10, #32
24074     1C 31 82 F1 | 	sub	local10, local14
24078     18 37 62 F0 | 	shl	local13, local10
2407c     19 31 02 F6 | 	mov	local10, local11
24080     20 2E 06 F6 | 	mov	local09, #32
24084     1C 2F 82 F1 | 	sub	local09, local14
24088     17 31 6A F0 | 	shl	local10, local09 wz
2408c     1C 33 42 F0 | 	shr	local11, local14
24090     1C 2D 42 F0 | 	shr	local08, local14
24094     1B 33 42 F5 | 	or	local11, local13
24098     00 3A 06 F6 | 	mov	local15, #0
2409c     01 3A 06 56 |  if_ne	mov	local15, #1
240a0     1D 33 42 F5 | 	or	local11, local15
240a4                 | LR__3276
240a4     12 3B 02 F6 | 	mov	local15, local04
240a8     15 3B 62 F5 | 	xor	local15, local07
240ac     01 3A CE F7 | 	test	local15, #1 wz
240b0     18 00 90 AD |  if_e	jmp	#LR__3277
240b4     16 2D 22 F6 | 	not	local08, local08
240b8     19 33 22 F6 | 	not	local11, local11
240bc     01 32 0E F1 | 	add	local11, #1 wz
240c0     00 3A 06 F6 | 	mov	local15, #0
240c4     01 3A 06 A6 |  if_e	mov	local15, #1
240c8     1D 2D 02 F1 | 	add	local08, local15
240cc                 | LR__3277
240cc     19 35 12 F1 | 	add	local12, local11 wc
240d0     16 27 22 F1 | 	addx	local05, local08
240d4     00 26 56 F2 | 	cmps	local05, #0 wc
240d8     1C 00 90 3D |  if_ae	jmp	#LR__3278
240dc     01 24 66 F5 | 	xor	local04, #1
240e0     13 27 22 F6 | 	not	local05, local05
240e4     1A 35 22 F6 | 	not	local12, local12
240e8     01 34 0E F1 | 	add	local12, #1 wz
240ec     00 3A 06 F6 | 	mov	local15, #0
240f0     01 3A 06 A6 |  if_e	mov	local15, #1
240f4     1D 27 02 F1 | 	add	local05, local15
240f8                 | LR__3278
240f8     00 80 00 FF 
240fc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
24100     28 00 90 CD |  if_b	jmp	#LR__3279
24104     01 28 06 F1 | 	add	local06, #1
24108     1A 39 02 F6 | 	mov	local14, local12
2410c     01 38 06 F5 | 	and	local14, #1
24110     01 34 46 F0 | 	shr	local12, #1
24114     13 3B 02 F6 | 	mov	local15, local05
24118     1F 3A 66 F0 | 	shl	local15, #31
2411c     1D 35 42 F5 | 	or	local12, local15
24120     1C 35 42 F5 | 	or	local12, local14
24124     01 26 46 F0 | 	shr	local05, #1
24128     3C 00 90 FD | 	jmp	#LR__3284
2412c                 | LR__3279
2412c     00 40 00 FF 
24130     00 26 16 F2 | 	cmp	local05, ##8388608 wc
24134     30 00 90 3D |  if_ae	jmp	#LR__3283
24138     00 26 0E F2 | 	cmp	local05, #0 wz
2413c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
24140     08 24 46 A5 |  if_e	or	local04, #8
24144     01 24 26 A5 |  if_e	andn	local04, #1
24148     1C 00 90 AD |  if_e	jmp	#LR__3282
2414c                 | LR__3280
2414c     00 40 00 FF 
24150     00 26 16 F2 | 	cmp	local05, ##8388608 wc
24154     10 00 90 3D |  if_ae	jmp	#LR__3281
24158     1A 35 12 F1 | 	add	local12, local12 wc
2415c     13 27 22 F1 | 	addx	local05, local05
24160     01 28 86 F1 | 	sub	local06, #1
24164     E4 FF 9F FD | 	jmp	#LR__3280
24168                 | LR__3281
24168                 | LR__3282
24168                 | LR__3283
24168                 | LR__3284
24168     13 13 02 F6 | 	mov	arg01, local05
2416c     1A 15 02 F6 | 	mov	arg02, local12
24170     14 17 02 F6 | 	mov	arg03, local06
24174     12 19 02 F6 | 	mov	arg04, local04
24178     C8 35 B0 FD | 	call	#__system__pack_0637
2417c     DC 00 90 FD | 	jmp	#LR__3295
24180                 | LR__3285
24180     FF 30 0E F2 | 	cmp	local10, #255 wz
24184     10 00 90 5D |  if_ne	jmp	#LR__3286
24188     12 2B 0A F2 | 	cmp	local07, local04 wz
2418c     00 F8 3F 5F 
24190     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
24194     C4 00 90 5D |  if_ne	jmp	#LR__3295
24198                 | LR__3286
24198     00 26 0E F2 | 	cmp	local05, #0 wz
2419c     00 F8 3F 5F 
241a0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
241a4     B4 00 90 5D |  if_ne	jmp	#LR__3295
241a8     1A 15 02 F6 | 	mov	arg02, local12
241ac     14 17 02 F6 | 	mov	arg03, local06
241b0     12 19 02 F6 | 	mov	arg04, local04
241b4     02 18 46 F5 | 	or	arg04, #2
241b8     13 13 02 F6 | 	mov	arg01, local05
241bc     84 35 B0 FD | 	call	#__system__pack_0637
241c0     98 00 90 FD | 	jmp	#LR__3295
241c4                 | LR__3287
241c4     00 26 0E F2 | 	cmp	local05, #0 wz
241c8     28 00 90 AD |  if_e	jmp	#LR__3290
241cc     01 26 66 F0 | 	shl	local05, #1
241d0     97 0E 48 FB | 	callpa	#(@LR__3289-@LR__3288)>>2,fcache_load_ptr_
241d4                 | LR__3288
241d4     00 40 00 FF 
241d8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
241dc     14 3B 02 C6 |  if_b	mov	local15, local06
241e0     01 3A 86 C1 |  if_b	sub	local15, #1
241e4     1D 29 02 C6 |  if_b	mov	local06, local15
241e8     01 26 66 C0 |  if_b	shl	local05, #1
241ec     E4 FF 9F CD |  if_b	jmp	#LR__3288
241f0                 | LR__3289
241f0     28 FE 9F FD | 	jmp	#LR__3271
241f4                 | LR__3290
241f4     15 25 02 F5 | 	and	local04, local07
241f8     12 19 02 F6 | 	mov	arg04, local04
241fc     08 18 46 F5 | 	or	arg04, #8
24200     00 12 06 F6 | 	mov	arg01, #0
24204     00 14 06 F6 | 	mov	arg02, #0
24208     00 16 06 F6 | 	mov	arg03, #0
2420c     34 35 B0 FD | 	call	#__system__pack_0637
24210     48 00 90 FD | 	jmp	#LR__3295
24214                 | LR__3291
24214     00 2C 0E F2 | 	cmp	local08, #0 wz
24218     28 00 90 AD |  if_e	jmp	#LR__3294
2421c     01 2C 66 F0 | 	shl	local08, #1
24220     97 0E 48 FB | 	callpa	#(@LR__3293-@LR__3292)>>2,fcache_load_ptr_
24224                 | LR__3292
24224     00 40 00 FF 
24228     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
2422c     18 3B 02 C6 |  if_b	mov	local15, local10
24230     01 3A 86 C1 |  if_b	sub	local15, #1
24234     1D 31 02 C6 |  if_b	mov	local10, local15
24238     01 2C 66 C0 |  if_b	shl	local08, #1
2423c     E4 FF 9F CD |  if_b	jmp	#LR__3292
24240                 | LR__3293
24240     E4 FD 9F FD | 	jmp	#LR__3272
24244                 | LR__3294
24244     7F 28 86 F1 | 	sub	local06, #127
24248     13 13 02 F6 | 	mov	arg01, local05
2424c     1A 15 02 F6 | 	mov	arg02, local12
24250     14 17 02 F6 | 	mov	arg03, local06
24254     12 19 02 F6 | 	mov	arg04, local04
24258     E8 34 B0 FD | 	call	#__system__pack_0637
2425c                 | LR__3295
2425c     A7 F0 03 F6 | 	mov	ptra, fp
24260     B2 00 A0 FD | 	call	#popregs_
24264                 | __system___float_add_ret
24264     2D 00 64 FD | 	ret
24268                 | 
24268                 | __system___float_sqrt
24268     04 4A 05 F6 | 	mov	COUNT_, #4
2426c     A8 00 A0 FD | 	call	#pushregs_
24270     09 1F 02 F6 | 	mov	local01, arg01
24274     09 FB 01 F6 | 	mov	result1, arg01
24278     FD 20 02 F6 | 	mov	local02, result1
2427c     10 23 02 F6 | 	mov	local03, local02
24280     16 22 46 F7 | 	zerox	local03, #22
24284     10 25 02 F6 | 	mov	local04, local02
24288     01 24 66 F0 | 	shl	local04, #1
2428c     18 24 4E F0 | 	shr	local04, #24 wz
24290     1F 20 46 F0 | 	shr	local02, #31
24294     70 00 90 AD |  if_e	jmp	#LR__3301
24298     17 22 26 F4 | 	bith	local03, #23
2429c                 | LR__3300
2429c     00 20 0E F2 | 	cmp	local02, #0 wz
242a0     00 F8 3F 5F 
242a4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
242a8     88 00 90 5D |  if_ne	jmp	#LR__3304
242ac     FF 24 0E F2 | 	cmp	local04, #255 wz
242b0     0F FB 01 A6 |  if_e	mov	result1, local01
242b4     7C 00 90 AD |  if_e	jmp	#LR__3304
242b8     7F 24 86 F1 | 	sub	local04, #127
242bc     01 24 CE F7 | 	test	local04, #1 wz
242c0     01 22 66 50 |  if_ne	shl	local03, #1
242c4     05 22 66 F0 | 	shl	local03, #5
242c8     11 01 38 FD | 	qsqrt	#0, local03
242cc     01 24 86 51 |  if_ne	sub	local04, #1
242d0     12 25 52 F6 | 	abs	local04, local04 wc
242d4     01 24 46 F0 | 	shr	local04, #1
242d8     12 17 82 F6 | 	negc	arg03, local04
242dc     10 19 02 F6 | 	mov	arg04, local02
242e0     18 12 62 FD | 	getqx	arg01
242e4     09 15 02 F6 | 	mov	arg02, arg01
242e8     19 14 66 F0 | 	shl	arg02, #25
242ec     07 12 46 F0 | 	shr	arg01, #7
242f0     00 80 00 FF 
242f4     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
242f8     01 16 06 31 |  if_ae	add	arg03, #1
242fc     01 12 46 30 |  if_ae	shr	arg01, #1
24300     40 34 B0 FD | 	call	#__system__pack_0637
24304     2C 00 90 FD | 	jmp	#LR__3304
24308                 | LR__3301
24308     00 22 0E F2 | 	cmp	local03, #0 wz
2430c     0F FB 01 A6 |  if_e	mov	result1, local01
24310     20 00 90 AD |  if_e	jmp	#LR__3304
24314     01 22 66 F0 | 	shl	local03, #1
24318     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
2431c                 | LR__3302
2431c     00 40 00 FF 
24320     00 22 16 F2 | 	cmp	local03, ##8388608 wc
24324     01 24 86 C1 |  if_b	sub	local04, #1
24328     01 22 66 C0 |  if_b	shl	local03, #1
2432c     EC FF 9F CD |  if_b	jmp	#LR__3302
24330                 | LR__3303
24330     68 FF 9F FD | 	jmp	#LR__3300
24334                 | LR__3304
24334     A7 F0 03 F6 | 	mov	ptra, fp
24338     B2 00 A0 FD | 	call	#popregs_
2433c                 | __system___float_sqrt_ret
2433c     2D 00 64 FD | 	ret
24340                 | 
24340                 | __system___float_mul
24340     0B 4A 05 F6 | 	mov	COUNT_, #11
24344     A8 00 A0 FD | 	call	#pushregs_
24348     09 1F 02 F6 | 	mov	local01, arg01
2434c     0A 21 02 F6 | 	mov	local02, arg02
24350     0F 23 02 F6 | 	mov	local03, local01
24354     11 25 02 F6 | 	mov	local04, local03
24358     16 24 46 F7 | 	zerox	local04, #22
2435c     11 27 02 F6 | 	mov	local05, local03
24360     01 26 66 F0 | 	shl	local05, #1
24364     18 26 46 F0 | 	shr	local05, #24
24368     1F 22 46 F0 | 	shr	local03, #31
2436c     10 FB 01 F6 | 	mov	result1, local02
24370     FD 28 02 F6 | 	mov	local06, result1
24374     14 2B 02 F6 | 	mov	local07, local06
24378     16 2A 46 F7 | 	zerox	local07, #22
2437c     14 2D 02 F6 | 	mov	local08, local06
24380     01 2C 66 F0 | 	shl	local08, #1
24384     18 2C 46 F0 | 	shr	local08, #24
24388     1F 28 46 F0 | 	shr	local06, #31
2438c     14 23 62 F5 | 	xor	local03, local06
24390     FF 26 0E F2 | 	cmp	local05, #255 wz
24394     90 00 90 AD |  if_e	jmp	#LR__3313
24398     FF 2C 0E F2 | 	cmp	local08, #255 wz
2439c     D8 00 90 AD |  if_e	jmp	#LR__3315
243a0     00 26 0E F2 | 	cmp	local05, #0 wz
243a4     0C 01 90 AD |  if_e	jmp	#LR__3316
243a8     17 24 26 F4 | 	bith	local04, #23
243ac                 | LR__3310
243ac     00 2C 0E F2 | 	cmp	local08, #0 wz
243b0     44 01 90 AD |  if_e	jmp	#LR__3320
243b4     17 2A 26 F4 | 	bith	local07, #23
243b8                 | LR__3311
243b8     12 21 02 F6 | 	mov	local02, local04
243bc     04 20 66 F0 | 	shl	local02, #4
243c0     15 29 02 F6 | 	mov	local06, local07
243c4     05 28 66 F0 | 	shl	local06, #5
243c8     14 21 02 FD | 	qmul	local02, local06
243cc     16 27 02 F1 | 	add	local05, local08
243d0     FE 26 86 F1 | 	sub	local05, #254
243d4     13 2F 02 F6 | 	mov	local09, local05
243d8     04 24 66 F0 | 	shl	local04, #4
243dc     05 2A 66 F0 | 	shl	local07, #5
243e0     18 30 62 FD | 	getqx	local10
243e4     15 25 02 FD | 	qmul	local04, local07
243e8     19 32 62 FD | 	getqy	local11
243ec     00 80 00 FF 
243f0     00 32 16 F2 | 	cmp	local11, ##16777216 wc
243f4     18 00 90 CD |  if_b	jmp	#LR__3312
243f8     01 2E 06 F1 | 	add	local09, #1
243fc     01 30 46 F0 | 	shr	local10, #1
24400     19 2D 02 F6 | 	mov	local08, local11
24404     1F 2C 66 F0 | 	shl	local08, #31
24408     16 31 42 F5 | 	or	local10, local08
2440c     01 32 46 F0 | 	shr	local11, #1
24410                 | LR__3312
24410     19 13 02 F6 | 	mov	arg01, local11
24414     18 15 02 F6 | 	mov	arg02, local10
24418     17 17 02 F6 | 	mov	arg03, local09
2441c     11 19 02 F6 | 	mov	arg04, local03
24420     20 33 B0 FD | 	call	#__system__pack_0637
24424     10 01 90 FD | 	jmp	#LR__3324
24428                 | LR__3313
24428     00 24 0E F2 | 	cmp	local04, #0 wz
2442c     0F FB 01 56 |  if_ne	mov	result1, local01
24430     04 01 90 5D |  if_ne	jmp	#LR__3324
24434     FF 2C 56 F2 | 	cmps	local08, #255 wc
24438     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
2443c     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
24440     18 00 90 4D |  if_c_and_nz	jmp	#LR__3314
24444     00 F8 3F CF 
24448     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2444c     E8 00 90 CD |  if_b	jmp	#LR__3324
24450     00 2A 0E F2 | 	cmp	local07, #0 wz
24454     10 FB 01 56 |  if_ne	mov	result1, local02
24458     DC 00 90 5D |  if_ne	jmp	#LR__3324
2445c                 | LR__3314
2445c     02 22 46 F5 | 	or	local03, #2
24460     00 12 06 F6 | 	mov	arg01, #0
24464     00 14 06 F6 | 	mov	arg02, #0
24468     13 17 02 F6 | 	mov	arg03, local05
2446c     11 19 02 F6 | 	mov	arg04, local03
24470     D0 32 B0 FD | 	call	#__system__pack_0637
24474     C0 00 90 FD | 	jmp	#LR__3324
24478                 | LR__3315
24478     00 26 0E F2 | 	cmp	local05, #0 wz
2447c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
24480     00 F8 3F AF 
24484     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24488     AC 00 90 AD |  if_e	jmp	#LR__3324
2448c     00 2A 0E F2 | 	cmp	local07, #0 wz
24490     10 FB 01 56 |  if_ne	mov	result1, local02
24494     A0 00 90 5D |  if_ne	jmp	#LR__3324
24498     16 17 02 F6 | 	mov	arg03, local08
2449c     11 19 02 F6 | 	mov	arg04, local03
244a0     02 18 46 F5 | 	or	arg04, #2
244a4     00 12 06 F6 | 	mov	arg01, #0
244a8     00 14 06 F6 | 	mov	arg02, #0
244ac     94 32 B0 FD | 	call	#__system__pack_0637
244b0     84 00 90 FD | 	jmp	#LR__3324
244b4                 | LR__3316
244b4     00 24 0E F2 | 	cmp	local04, #0 wz
244b8     20 00 90 AD |  if_e	jmp	#LR__3319
244bc     01 24 66 F0 | 	shl	local04, #1
244c0     97 0A 48 FB | 	callpa	#(@LR__3318-@LR__3317)>>2,fcache_load_ptr_
244c4                 | LR__3317
244c4     00 40 00 FF 
244c8     00 24 16 F2 | 	cmp	local04, ##8388608 wc
244cc     01 26 86 C1 |  if_b	sub	local05, #1
244d0     01 24 66 C0 |  if_b	shl	local04, #1
244d4     EC FF 9F CD |  if_b	jmp	#LR__3317
244d8                 | LR__3318
244d8     D0 FE 9F FD | 	jmp	#LR__3310
244dc                 | LR__3319
244dc     08 22 46 F5 | 	or	local03, #8
244e0     00 12 06 F6 | 	mov	arg01, #0
244e4     00 14 06 F6 | 	mov	arg02, #0
244e8     00 16 06 F6 | 	mov	arg03, #0
244ec     11 19 02 F6 | 	mov	arg04, local03
244f0     50 32 B0 FD | 	call	#__system__pack_0637
244f4     40 00 90 FD | 	jmp	#LR__3324
244f8                 | LR__3320
244f8     00 2A 0E F2 | 	cmp	local07, #0 wz
244fc     20 00 90 AD |  if_e	jmp	#LR__3323
24500     01 2A 66 F0 | 	shl	local07, #1
24504     97 0A 48 FB | 	callpa	#(@LR__3322-@LR__3321)>>2,fcache_load_ptr_
24508                 | LR__3321
24508     00 40 00 FF 
2450c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
24510     01 2C 86 C1 |  if_b	sub	local08, #1
24514     01 2A 66 C0 |  if_b	shl	local07, #1
24518     EC FF 9F CD |  if_b	jmp	#LR__3321
2451c                 | LR__3322
2451c     98 FE 9F FD | 	jmp	#LR__3311
24520                 | LR__3323
24520     08 22 46 F5 | 	or	local03, #8
24524     00 12 06 F6 | 	mov	arg01, #0
24528     00 14 06 F6 | 	mov	arg02, #0
2452c     00 16 06 F6 | 	mov	arg03, #0
24530     11 19 02 F6 | 	mov	arg04, local03
24534     0C 32 B0 FD | 	call	#__system__pack_0637
24538                 | LR__3324
24538     A7 F0 03 F6 | 	mov	ptra, fp
2453c     B2 00 A0 FD | 	call	#popregs_
24540                 | __system___float_mul_ret
24540     2D 00 64 FD | 	ret
24544                 | 
24544                 | __system___float_div
24544     0E 4A 05 F6 | 	mov	COUNT_, #14
24548     A8 00 A0 FD | 	call	#pushregs_
2454c     09 23 02 F6 | 	mov	local03, arg01
24550     0A 25 02 F6 | 	mov	local04, arg02
24554     11 27 02 F6 | 	mov	local05, local03
24558     13 29 02 F6 | 	mov	local06, local05
2455c     16 28 46 F7 | 	zerox	local06, #22
24560     13 2B 02 F6 | 	mov	local07, local05
24564     01 2A 66 F0 | 	shl	local07, #1
24568     18 2A 46 F0 | 	shr	local07, #24
2456c     1F 26 46 F0 | 	shr	local05, #31
24570     12 FB 01 F6 | 	mov	result1, local04
24574     FD 2C 02 F6 | 	mov	local08, result1
24578     16 2F 02 F6 | 	mov	local09, local08
2457c     16 2E 46 F7 | 	zerox	local09, #22
24580     16 31 02 F6 | 	mov	local10, local08
24584     01 30 66 F0 | 	shl	local10, #1
24588     18 30 46 F0 | 	shr	local10, #24
2458c     1F 2C 46 F0 | 	shr	local08, #31
24590     16 27 62 F5 | 	xor	local05, local08
24594     FF 2A 0E F2 | 	cmp	local07, #255 wz
24598     D4 00 90 AD |  if_e	jmp	#LR__3335
2459c     FF 30 0E F2 | 	cmp	local10, #255 wz
245a0     04 01 90 AD |  if_e	jmp	#LR__3336
245a4     00 2A 0E F2 | 	cmp	local07, #0 wz
245a8     24 01 90 AD |  if_e	jmp	#LR__3337
245ac     17 28 26 F4 | 	bith	local06, #23
245b0                 | LR__3330
245b0     00 30 0E F2 | 	cmp	local10, #0 wz
245b4     70 01 90 AD |  if_e	jmp	#LR__3341
245b8     17 2E 26 F4 | 	bith	local09, #23
245bc                 | LR__3331
245bc     18 2B 82 F1 | 	sub	local07, local10
245c0     15 33 02 F6 | 	mov	local11, local07
245c4     14 13 02 F6 | 	mov	arg01, local06
245c8     02 12 46 F0 | 	shr	arg01, #2
245cc     1E 28 66 F0 | 	shl	local06, #30
245d0     14 15 02 F6 | 	mov	arg02, local06
245d4     17 17 02 F6 | 	mov	arg03, local09
245d8     28 12 62 FD | 	setq	arg01
245dc     0B 15 12 FD | 	qdiv	arg02, arg03
245e0     00 34 06 F6 | 	mov	local12, #0
245e4     18 1E 62 FD | 	getqx	local01
245e8     19 FC 61 FD | 	getqy	result2
245ec     FE 20 02 F6 | 	mov	local02, result2
245f0     0F 37 02 F6 | 	mov	local13, local01
245f4     00 20 4E F2 | 	cmps	local02, #0 wz
245f8     1B 39 02 F6 | 	mov	local14, local13
245fc     19 38 66 F0 | 	shl	local14, #25
24600     01 34 06 56 |  if_ne	mov	local12, #1
24604     1A 39 42 F5 | 	or	local14, local12
24608     07 36 46 F0 | 	shr	local13, #7
2460c     00 80 00 FF 
24610     00 36 16 F2 | 	cmp	local13, ##16777216 wc
24614     1C 00 90 CD |  if_b	jmp	#LR__3332
24618     01 32 06 F1 | 	add	local11, #1
2461c     01 38 46 F0 | 	shr	local14, #1
24620     1B 35 02 F6 | 	mov	local12, local13
24624     1F 34 66 F0 | 	shl	local12, #31
24628     1A 39 42 F5 | 	or	local14, local12
2462c     01 36 46 F0 | 	shr	local13, #1
24630     24 00 90 FD | 	jmp	#LR__3334
24634                 | LR__3332
24634     00 40 00 FF 
24638     00 36 16 F2 | 	cmp	local13, ##8388608 wc
2463c     18 00 90 3D |  if_ae	jmp	#LR__3333
24640     01 32 86 F1 | 	sub	local11, #1
24644     01 36 66 F0 | 	shl	local13, #1
24648     1C 35 02 F6 | 	mov	local12, local14
2464c     1F 34 46 F0 | 	shr	local12, #31
24650     1A 37 42 F5 | 	or	local13, local12
24654     01 38 66 F0 | 	shl	local14, #1
24658                 | LR__3333
24658                 | LR__3334
24658     1B 13 02 F6 | 	mov	arg01, local13
2465c     1C 15 02 F6 | 	mov	arg02, local14
24660     19 17 02 F6 | 	mov	arg03, local11
24664     13 19 02 F6 | 	mov	arg04, local05
24668     D8 30 B0 FD | 	call	#__system__pack_0637
2466c     F8 00 90 FD | 	jmp	#LR__3345
24670                 | LR__3335
24670     00 28 0E F2 | 	cmp	local06, #0 wz
24674     11 FB 01 56 |  if_ne	mov	result1, local03
24678     EC 00 90 5D |  if_ne	jmp	#LR__3345
2467c     FF 30 0E F2 | 	cmp	local10, #255 wz
24680     00 F8 3F AF 
24684     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24688     DC 00 90 AD |  if_e	jmp	#LR__3345
2468c     02 26 46 F5 | 	or	local05, #2
24690     00 12 06 F6 | 	mov	arg01, #0
24694     00 14 06 F6 | 	mov	arg02, #0
24698     15 17 02 F6 | 	mov	arg03, local07
2469c     13 19 02 F6 | 	mov	arg04, local05
246a0     A0 30 B0 FD | 	call	#__system__pack_0637
246a4     C0 00 90 FD | 	jmp	#LR__3345
246a8                 | LR__3336
246a8     00 2E 0E F2 | 	cmp	local09, #0 wz
246ac     12 FB 01 56 |  if_ne	mov	result1, local04
246b0     B4 00 90 5D |  if_ne	jmp	#LR__3345
246b4     13 19 02 F6 | 	mov	arg04, local05
246b8     08 18 46 F5 | 	or	arg04, #8
246bc     00 12 06 F6 | 	mov	arg01, #0
246c0     00 14 06 F6 | 	mov	arg02, #0
246c4     00 16 06 F6 | 	mov	arg03, #0
246c8     78 30 B0 FD | 	call	#__system__pack_0637
246cc     98 00 90 FD | 	jmp	#LR__3345
246d0                 | LR__3337
246d0     00 28 0E F2 | 	cmp	local06, #0 wz
246d4     20 00 90 AD |  if_e	jmp	#LR__3340
246d8     01 28 66 F0 | 	shl	local06, #1
246dc     97 0A 48 FB | 	callpa	#(@LR__3339-@LR__3338)>>2,fcache_load_ptr_
246e0                 | LR__3338
246e0     00 40 00 FF 
246e4     00 28 16 F2 | 	cmp	local06, ##8388608 wc
246e8     01 2A 86 C1 |  if_b	sub	local07, #1
246ec     01 28 66 C0 |  if_b	shl	local06, #1
246f0     EC FF 9F CD |  if_b	jmp	#LR__3338
246f4                 | LR__3339
246f4     B8 FE 9F FD | 	jmp	#LR__3330
246f8                 | LR__3340
246f8     00 30 0E F2 | 	cmp	local10, #0 wz
246fc     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
24700     00 F8 3F AF 
24704     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24708     5C 00 90 AD |  if_e	jmp	#LR__3345
2470c     13 19 02 F6 | 	mov	arg04, local05
24710     08 18 46 F5 | 	or	arg04, #8
24714     00 12 06 F6 | 	mov	arg01, #0
24718     00 14 06 F6 | 	mov	arg02, #0
2471c     00 16 06 F6 | 	mov	arg03, #0
24720     20 30 B0 FD | 	call	#__system__pack_0637
24724     40 00 90 FD | 	jmp	#LR__3345
24728                 | LR__3341
24728     00 2E 0E F2 | 	cmp	local09, #0 wz
2472c     20 00 90 AD |  if_e	jmp	#LR__3344
24730     01 2E 66 F0 | 	shl	local09, #1
24734     97 0A 48 FB | 	callpa	#(@LR__3343-@LR__3342)>>2,fcache_load_ptr_
24738                 | LR__3342
24738     00 40 00 FF 
2473c     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
24740     01 30 86 C1 |  if_b	sub	local10, #1
24744     01 2E 66 C0 |  if_b	shl	local09, #1
24748     EC FF 9F CD |  if_b	jmp	#LR__3342
2474c                 | LR__3343
2474c     6C FE 9F FD | 	jmp	#LR__3331
24750                 | LR__3344
24750     02 26 46 F5 | 	or	local05, #2
24754     00 12 06 F6 | 	mov	arg01, #0
24758     00 14 06 F6 | 	mov	arg02, #0
2475c     00 16 06 F6 | 	mov	arg03, #0
24760     13 19 02 F6 | 	mov	arg04, local05
24764     DC 2F B0 FD | 	call	#__system__pack_0637
24768                 | LR__3345
24768     A7 F0 03 F6 | 	mov	ptra, fp
2476c     B2 00 A0 FD | 	call	#popregs_
24770                 | __system___float_div_ret
24770     2D 00 64 FD | 	ret
24774                 | 
24774                 | __system___float_cmp
24774     00 C0 3F FF 
24778     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2477c     00 C0 3F CF 
24780     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
24784     0B FB 01 36 |  if_ae	mov	result1, arg03
24788     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2478c     00 C0 7F FF 
24790     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
24794     00 C0 7F CF 
24798     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2479c     0B FB 01 36 |  if_ae	mov	result1, arg03
247a0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
247a4     00 12 56 F2 | 	cmps	arg01, #0 wc
247a8     2C 00 90 3D |  if_ae	jmp	#LR__3350
247ac     00 14 56 F2 | 	cmps	arg02, #0 wc
247b0     0A FB 01 C6 |  if_b	mov	result1, arg02
247b4     09 FB 81 C1 |  if_b	sub	result1, arg01
247b8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
247bc     00 14 0E F2 | 	cmp	arg02, #0 wz
247c0     00 00 40 AF 
247c4     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
247c8     00 FA 05 A6 |  if_e	mov	result1, #0
247cc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
247d0     01 FA 65 F6 | 	neg	result1, #1
247d4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
247d8                 | LR__3350
247d8     00 14 56 F2 | 	cmps	arg02, #0 wc
247dc     1C 00 90 3D |  if_ae	jmp	#LR__3351
247e0     00 12 0E F2 | 	cmp	arg01, #0 wz
247e4     00 00 40 AF 
247e8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
247ec     00 FA 05 A6 |  if_e	mov	result1, #0
247f0     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
247f4     01 FA 05 F6 | 	mov	result1, #1
247f8     08 00 90 FD | 	jmp	#__system___float_cmp_ret
247fc                 | LR__3351
247fc     0A 13 82 F1 | 	sub	arg01, arg02
24800     09 FB 01 F6 | 	mov	result1, arg01
24804                 | __system___float_cmp_ret
24804     2D 00 64 FD | 	ret
24808                 | 
24808                 | __system___float_tointeger
24808     02 4A 05 F6 | 	mov	COUNT_, #2
2480c     A8 00 A0 FD | 	call	#pushregs_
24810     50 00 B0 FD | 	call	#__system___float_Unpack
24814     FF FF 7F FF 
24818     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2481c     34 00 90 CD |  if_b	jmp	#LR__3360
24820     1F FC 55 F2 | 	cmps	result2, #31 wc
24824     2C 00 90 3D |  if_ae	jmp	#LR__3360
24828     02 FE 65 F0 | 	shl	result3, #2
2482c     1E 1E 06 F6 | 	mov	local01, #30
24830     FE 1E 82 F1 | 	sub	local01, result2
24834     0F FF 41 F0 | 	shr	result3, local01
24838     FF 20 02 F6 | 	mov	local02, result3
2483c     0A 21 02 F1 | 	add	local02, arg02
24840     01 20 46 F0 | 	shr	local02, #1
24844     00 FA 0D F2 | 	cmp	result1, #0 wz
24848     10 21 62 56 |  if_ne	neg	local02, local02
2484c     10 FB 01 F6 | 	mov	result1, local02
24850     04 00 90 FD | 	jmp	#LR__3361
24854                 | LR__3360
24854     00 FA 05 F6 | 	mov	result1, #0
24858                 | LR__3361
24858     A7 F0 03 F6 | 	mov	ptra, fp
2485c     B2 00 A0 FD | 	call	#popregs_
24860                 | __system___float_tointeger_ret
24860     2D 00 64 FD | 	ret
24864                 | 
24864                 | __system___float_Unpack
24864     09 01 02 F6 | 	mov	_var01, arg01
24868     1F 00 46 F0 | 	shr	_var01, #31
2486c     09 03 02 F6 | 	mov	_var02, arg01
24870     01 02 66 F0 | 	shl	_var02, #1
24874     18 02 4E F0 | 	shr	_var02, #24 wz
24878     17 13 06 F4 | 	bitl	arg01, #279
2487c     06 12 66 50 |  if_ne	shl	arg01, #6
24880     1D 12 26 54 |  if_ne	bith	arg01, #29
24884     1C 00 90 5D |  if_ne	jmp	#LR__3370
24888     09 05 92 F7 | 	encod	_var03, arg01 wc
2488c     01 04 06 C1 |  if_b	add	_var03, #1
24890     17 04 86 F1 | 	sub	_var03, #23
24894     02 03 02 F6 | 	mov	_var02, _var03
24898     07 FC 05 F6 | 	mov	result2, #7
2489c     02 FD 81 F1 | 	sub	result2, _var03
248a0     FE 12 62 F0 | 	shl	arg01, result2
248a4                 | LR__3370
248a4     7F 02 86 F1 | 	sub	_var02, #127
248a8     09 FF 01 F6 | 	mov	result3, arg01
248ac     00 FB 01 F6 | 	mov	result1, _var01
248b0     01 FD 01 F6 | 	mov	result2, _var02
248b4                 | __system___float_Unpack_ret
248b4     2D 00 64 FD | 	ret
248b8                 | 
248b8                 | __system___float_Pack
248b8     00 00 06 F6 | 	mov	_var01, #0
248bc     00 16 0E F2 | 	cmp	arg03, #0 wz
248c0     8C 00 90 AD |  if_e	jmp	#LR__3381
248c4     0B 03 92 F7 | 	encod	_var02, arg03 wc
248c8     01 02 06 C1 |  if_b	add	_var02, #1
248cc     21 00 06 F6 | 	mov	_var01, #33
248d0     01 01 82 F1 | 	sub	_var01, _var02
248d4     00 17 62 F0 | 	shl	arg03, _var01
248d8     03 02 06 F6 | 	mov	_var02, #3
248dc     00 03 82 F1 | 	sub	_var02, _var01
248e0     01 15 02 F1 | 	add	arg02, _var02
248e4     0A 05 02 F6 | 	mov	_var03, arg02
248e8     00 17 06 F1 | 	add	arg03, #256
248ec     0B 03 02 F6 | 	mov	_var02, arg03
248f0     FF 02 2E F5 | 	andn	_var02, #255 wz
248f4     01 04 06 A1 |  if_e	add	_var03, #1
248f8     7F 04 06 F1 | 	add	_var03, #127
248fc     FF FF 7F FF 
24900     E9 05 46 F3 | 	fges	_var03, ##-23
24904     FF 04 66 F3 | 	fles	_var03, #255
24908     01 04 56 F2 | 	cmps	_var03, #1 wc
2490c     1C 00 90 3D |  if_ae	jmp	#LR__3380
24910     01 16 46 F0 | 	shr	arg03, #1
24914     1F 02 C6 F9 | 	decod	_var02, #31
24918     0B 03 02 F1 | 	add	_var02, arg03
2491c     02 05 62 F6 | 	neg	_var03, _var03
24920     02 03 42 F0 | 	shr	_var02, _var03
24924     01 17 02 F6 | 	mov	arg03, _var02
24928     00 04 06 F6 | 	mov	_var03, #0
2492c                 | LR__3380
2492c     09 FB 01 F6 | 	mov	result1, arg01
24930     1F FA 65 F0 | 	shl	result1, #31
24934     02 03 02 F6 | 	mov	_var02, _var03
24938     17 02 66 F0 | 	shl	_var02, #23
2493c     01 FB 41 F5 | 	or	result1, _var02
24940     0B 07 02 F6 | 	mov	_var04, arg03
24944     09 06 46 F0 | 	shr	_var04, #9
24948     03 FB 41 F5 | 	or	result1, _var04
2494c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
24950                 | LR__3381
24950     00 FB 01 F6 | 	mov	result1, _var01
24954                 | __system___float_Pack_ret
24954     2D 00 64 FD | 	ret
24958                 | 
24958                 | __system___basic_print_float
24958     05 4A 05 F6 | 	mov	COUNT_, #5
2495c     A8 00 A0 FD | 	call	#pushregs_
24960     09 1F 02 F6 | 	mov	local01, arg01
24964     0A 21 02 F6 | 	mov	local02, arg02
24968     0B 23 0A F6 | 	mov	local03, arg03 wz
2496c     0C 25 02 F6 | 	mov	local04, arg04
24970     14 00 90 5D |  if_ne	jmp	#LR__3390
24974     23 24 0E F2 | 	cmp	local04, #35 wz
24978     80 02 10 AF 
2497c     00 26 06 A6 |  if_e	mov	local05, ##537198592
24980     1D 26 C6 59 |  if_ne	decod	local05, #29
24984     13 23 02 F6 | 	mov	local03, local05
24988                 | LR__3390
24988     0F 13 02 F6 | 	mov	arg01, local01
2498c     98 28 B0 FD | 	call	#__system___gettxfunc
24990     FD 26 0A F6 | 	mov	local05, result1 wz
24994     00 FA 05 A6 |  if_e	mov	result1, #0
24998     13 13 02 56 |  if_ne	mov	arg01, local05
2499c     11 15 02 56 |  if_ne	mov	arg02, local03
249a0     10 17 02 56 |  if_ne	mov	arg03, local02
249a4     12 19 02 56 |  if_ne	mov	arg04, local04
249a8     28 DD BF 5D |  if_ne	call	#__system___fmtfloat
249ac     A7 F0 03 F6 | 	mov	ptra, fp
249b0     B2 00 A0 FD | 	call	#popregs_
249b4                 | __system___basic_print_float_ret
249b4     2D 00 64 FD | 	ret
249b8                 | 
249b8                 | __system____builtin_atoi
249b8     07 4A 05 F6 | 	mov	COUNT_, #7
249bc     A8 00 A0 FD | 	call	#pushregs_
249c0                 | __system____builtin_atoi_enter
249c0     09 1F 02 F6 | 	mov	local01, arg01
249c4     0A 21 02 F6 | 	mov	local02, arg02
249c8     00 22 06 F6 | 	mov	local03, #0
249cc     00 24 06 F6 | 	mov	local04, #0
249d0     00 26 06 F6 | 	mov	local05, #0
249d4     97 1C 48 FB | 	callpa	#(@LR__3402-@LR__3400)>>2,fcache_load_ptr_
249d8                 | LR__3400
249d8     0F 29 C2 FA | 	rdbyte	local06, local01
249dc     20 28 0E F2 | 	cmp	local06, #32 wz
249e0     01 1E 06 A1 |  if_e	add	local01, #1
249e4     F0 FF 9F AD |  if_e	jmp	#LR__3400
249e8     0F 2B C2 FA | 	rdbyte	local07, local01
249ec                 | LR__3401
249ec     2D 2A 0E F2 | 	cmp	local07, #45 wz
249f0     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
249f4     18 00 90 5D |  if_ne	jmp	#LR__3403
249f8     01 1E 06 F1 | 	add	local01, #1
249fc     2D 2A 0E F2 | 	cmp	local07, #45 wz
24a00     01 28 06 A6 |  if_e	mov	local06, #1
24a04     14 27 C2 A2 |  if_e	subr	local05, local06
24a08     0F 2B C2 FA | 	rdbyte	local07, local01
24a0c     DC FF 9F FD | 	jmp	#LR__3401
24a10                 | LR__3402
24a10                 | LR__3403
24a10     00 20 0E F2 | 	cmp	local02, #0 wz
24a14     1C 00 90 5D |  if_ne	jmp	#LR__3405
24a18     24 2A 0E F2 | 	cmp	local07, #36 wz
24a1c     10 20 06 A6 |  if_e	mov	local02, #16
24a20     01 1E 06 A1 |  if_e	add	local01, #1
24a24     0C 00 90 AD |  if_e	jmp	#LR__3404
24a28     25 2A 0E F2 | 	cmp	local07, #37 wz
24a2c     02 20 06 A6 |  if_e	mov	local02, #2
24a30     01 1E 06 A1 |  if_e	add	local01, #1
24a34                 | LR__3404
24a34                 | LR__3405
24a34     97 48 48 FB | 	callpa	#(@LR__3413-@LR__3406)>>2,fcache_load_ptr_
24a38                 | LR__3406
24a38                 | LR__3407
24a38     0F 2B C2 FA | 	rdbyte	local07, local01
24a3c     5F 2A 0E F2 | 	cmp	local07, #95 wz
24a40     01 1E 06 F1 | 	add	local01, #1
24a44     F0 FF 9F AD |  if_e	jmp	#LR__3407
24a48     30 2A 0E F2 | 	cmp	local07, #48 wz
24a4c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
24a50     00 24 06 A6 |  if_e	mov	local04, #0
24a54     60 00 90 AD |  if_e	jmp	#LR__3412
24a58     31 2A 56 F2 | 	cmps	local07, #49 wc
24a5c     18 00 90 CD |  if_b	jmp	#LR__3408
24a60     3A 2A 56 F2 | 	cmps	local07, #58 wc
24a64     15 25 02 C6 |  if_b	mov	local04, local07
24a68     30 24 86 C1 |  if_b	sub	local04, #48
24a6c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
24a70     0A 20 06 86 |  if_c_and_z	mov	local02, #10
24a74     40 00 90 CD |  if_b	jmp	#LR__3411
24a78                 | LR__3408
24a78     0B 20 56 F2 | 	cmps	local02, #11 wc
24a7c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
24a80     14 00 90 CD |  if_b	jmp	#LR__3409
24a84     67 2A 56 F2 | 	cmps	local07, #103 wc
24a88     61 2A 86 C1 |  if_b	sub	local07, #97
24a8c     0A 24 06 C6 |  if_b	mov	local04, #10
24a90     15 25 02 C1 |  if_b	add	local04, local07
24a94     20 00 90 CD |  if_b	jmp	#LR__3410
24a98                 | LR__3409
24a98     0B 20 56 F2 | 	cmps	local02, #11 wc
24a9c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
24aa0     24 00 90 CD |  if_b	jmp	#LR__3414
24aa4     47 2A 56 F2 | 	cmps	local07, #71 wc
24aa8     41 2A 86 C1 |  if_b	sub	local07, #65
24aac     0A 24 06 C6 |  if_b	mov	local04, #10
24ab0     15 25 02 C1 |  if_b	add	local04, local07
24ab4     10 00 90 3D |  if_ae	jmp	#LR__3414
24ab8                 | LR__3410
24ab8                 | LR__3411
24ab8                 | LR__3412
24ab8     11 21 02 FD | 	qmul	local02, local03
24abc     18 22 62 FD | 	getqx	local03
24ac0     12 23 02 F1 | 	add	local03, local04
24ac4     70 FF 9F FD | 	jmp	#LR__3406
24ac8                 | LR__3413
24ac8                 | LR__3414
24ac8     00 20 0E F2 | 	cmp	local02, #0 wz
24acc     64 00 90 5D |  if_ne	jmp	#LR__3420
24ad0     78 2A 0E F2 | 	cmp	local07, #120 wz
24ad4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
24ad8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
24adc     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
24ae0     14 00 90 5D |  if_ne	jmp	#LR__3415
24ae4     0F 13 02 F6 | 	mov	arg01, local01
24ae8     10 14 06 F6 | 	mov	arg02, #16
24aec     C8 FE BF FD | 	call	#__system____builtin_atoi
24af0     FD 22 02 F6 | 	mov	local03, result1
24af4     3C 00 90 FD | 	jmp	#LR__3419
24af8                 | LR__3415
24af8     62 2A 0E F2 | 	cmp	local07, #98 wz
24afc     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
24b00     14 00 90 5D |  if_ne	jmp	#LR__3416
24b04     0F 13 02 F6 | 	mov	arg01, local01
24b08     02 14 06 F6 | 	mov	arg02, #2
24b0c     A8 FE BF FD | 	call	#__system____builtin_atoi
24b10     FD 22 02 F6 | 	mov	local03, result1
24b14     1C 00 90 FD | 	jmp	#LR__3418
24b18                 | LR__3416
24b18     6F 2A 0E F2 | 	cmp	local07, #111 wz
24b1c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
24b20     10 00 90 5D |  if_ne	jmp	#LR__3417
24b24     0F 13 02 F6 | 	mov	arg01, local01
24b28     08 14 06 F6 | 	mov	arg02, #8
24b2c     88 FE BF FD | 	call	#__system____builtin_atoi
24b30     FD 22 02 F6 | 	mov	local03, result1
24b34                 | LR__3417
24b34                 | LR__3418
24b34                 | LR__3419
24b34                 | LR__3420
24b34     00 26 0E F2 | 	cmp	local05, #0 wz
24b38     11 23 62 56 |  if_ne	neg	local03, local03
24b3c     11 FB 01 F6 | 	mov	result1, local03
24b40     A7 F0 03 F6 | 	mov	ptra, fp
24b44     B2 00 A0 FD | 	call	#popregs_
24b48                 | __system____builtin_atoi_ret
24b48     2D 00 64 FD | 	ret
24b4c                 | 
24b4c                 | __system____builtin_atof
24b4c     07 4A 05 F6 | 	mov	COUNT_, #7
24b50     A8 00 A0 FD | 	call	#pushregs_
24b54     09 1F 02 F6 | 	mov	local01, arg01
24b58     00 20 06 F6 | 	mov	local02, #0
24b5c     00 22 06 F6 | 	mov	local03, #0
24b60     00 24 06 F6 | 	mov	local04, #0
24b64     00 26 06 F6 | 	mov	local05, #0
24b68     97 08 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
24b6c                 | LR__3430
24b6c     0F 17 C2 FA | 	rdbyte	arg03, local01
24b70     20 16 0E F2 | 	cmp	arg03, #32 wz
24b74     01 1E 06 A1 |  if_e	add	local01, #1
24b78     F0 FF 9F AD |  if_e	jmp	#LR__3430
24b7c                 | LR__3431
24b7c     0F 29 C2 FA | 	rdbyte	local06, local01
24b80                 | LR__3432
24b80     2B 28 0E F2 | 	cmp	local06, #43 wz
24b84     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
24b88     14 00 90 5D |  if_ne	jmp	#LR__3433
24b8c     2D 28 0E F2 | 	cmp	local06, #45 wz
24b90     1F 24 E6 A4 |  if_e	bitnot	local04, #31
24b94     01 1E 06 F1 | 	add	local01, #1
24b98     0F 29 C2 FA | 	rdbyte	local06, local01
24b9c     E0 FF 9F FD | 	jmp	#LR__3432
24ba0                 | LR__3433
24ba0                 | LR__3434
24ba0     97 08 48 FB | 	callpa	#(@LR__3436-@LR__3435)>>2,fcache_load_ptr_
24ba4                 | LR__3435
24ba4     0F 29 C2 FA | 	rdbyte	local06, local01
24ba8     5F 28 0E F2 | 	cmp	local06, #95 wz
24bac     01 1E 06 F1 | 	add	local01, #1
24bb0     F0 FF 9F AD |  if_e	jmp	#LR__3435
24bb4                 | LR__3436
24bb4     00 28 0E F2 | 	cmp	local06, #0 wz
24bb8     5C 00 90 AD |  if_e	jmp	#LR__3438
24bbc     30 28 56 F2 | 	cmps	local06, #48 wc
24bc0     44 00 90 CD |  if_b	jmp	#LR__3437
24bc4     3A 28 56 F2 | 	cmps	local06, #58 wc
24bc8     3C 00 90 3D |  if_ae	jmp	#LR__3437
24bcc     10 13 02 F6 | 	mov	arg01, local02
24bd0     00 90 20 FF 
24bd4     00 14 06 F6 | 	mov	arg02, ##1092616192
24bd8     64 F7 BF FD | 	call	#__system___float_mul
24bdc     FD 20 02 F6 | 	mov	local02, result1
24be0     30 28 86 F1 | 	sub	local06, #48
24be4     14 13 02 F6 | 	mov	arg01, local06
24be8     50 F3 BF FD | 	call	#__system___float_fromuns
24bec     FD 14 02 F6 | 	mov	arg02, result1
24bf0     10 13 02 F6 | 	mov	arg01, local02
24bf4     78 F3 BF FD | 	call	#__system___float_add
24bf8     FD 20 02 F6 | 	mov	local02, result1
24bfc     00 26 0E F2 | 	cmp	local05, #0 wz
24c00     01 22 86 51 |  if_ne	sub	local03, #1
24c04     98 FF 9F FD | 	jmp	#LR__3434
24c08                 | LR__3437
24c08     2E 28 0E F2 | 	cmp	local06, #46 wz
24c0c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
24c10     01 26 06 A6 |  if_e	mov	local05, #1
24c14     88 FF 9F AD |  if_e	jmp	#LR__3434
24c18                 | LR__3438
24c18     45 28 0E F2 | 	cmp	local06, #69 wz
24c1c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
24c20     18 00 90 5D |  if_ne	jmp	#LR__3439
24c24     0F 13 02 F6 | 	mov	arg01, local01
24c28     00 14 06 F6 | 	mov	arg02, #0
24c2c     88 FD BF FD | 	call	#__system____builtin_atoi
24c30     11 FB 01 F1 | 	add	result1, local03
24c34     FD 2A 02 F6 | 	mov	local07, result1
24c38     04 00 90 FD | 	jmp	#LR__3440
24c3c                 | LR__3439
24c3c     11 2B 02 F6 | 	mov	local07, local03
24c40                 | LR__3440
24c40     15 17 02 F6 | 	mov	arg03, local07
24c44     10 13 02 F6 | 	mov	arg01, local02
24c48     00 90 20 FF 
24c4c     00 14 06 F6 | 	mov	arg02, ##1092616192
24c50     F4 06 B0 FD | 	call	#__system___float_pow_n
24c54     12 FB 61 F5 | 	xor	result1, local04
24c58     A7 F0 03 F6 | 	mov	ptra, fp
24c5c     B2 00 A0 FD | 	call	#popregs_
24c60                 | __system____builtin_atof_ret
24c60     2D 00 64 FD | 	ret
24c64                 | 
24c64                 | __system____builtin_ilogb
24c64     FC FB BF FD | 	call	#__system___float_Unpack
24c68     00 FE 0D F2 | 	cmp	result3, #0 wz
24c6c     00 00 40 AF 
24c70     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
24c74     24 00 90 AD |  if_e	jmp	#LR__3451
24c78     80 FC 0D F2 | 	cmp	result2, #128 wz
24c7c     18 00 90 5D |  if_ne	jmp	#LR__3450
24c80     00 00 10 FF 
24c84     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
24c88     1E FA CD A9 |  if_e	bmask	result1, #30
24c8c     0C 00 90 AD |  if_e	jmp	#LR__3451
24c90     1F FA C5 F9 | 	decod	result1, #31
24c94     04 00 90 FD | 	jmp	#LR__3451
24c98                 | LR__3450
24c98     FE FA 01 F6 | 	mov	result1, result2
24c9c                 | LR__3451
24c9c                 | __system____builtin_ilogb_ret
24c9c     2D 00 64 FD | 	ret
24ca0                 | 
24ca0                 | __system____builtin_sinf
24ca0     03 4A 05 F6 | 	mov	COUNT_, #3
24ca4     A8 00 A0 FD | 	call	#pushregs_
24ca8     09 1F 02 F6 | 	mov	local01, arg01
24cac     87 64 20 FF 
24cb0     DB 15 06 F6 | 	mov	arg02, ##1086918619
24cb4     8C F8 BF FD | 	call	#__system___float_div
24cb8     FD 12 02 F6 | 	mov	arg01, result1
24cbc     00 14 06 F6 | 	mov	arg02, #0
24cc0     44 FB BF FD | 	call	#__system___float_tointeger
24cc4     FD 16 0A F6 | 	mov	arg03, result1 wz
24cc8     44 00 90 AD |  if_e	jmp	#LR__3460
24ccc     0B 13 52 F6 | 	abs	arg01, arg03 wc
24cd0     1F 20 C6 C9 |  if_b	decod	local02, #31
24cd4     00 20 06 36 |  if_ae	mov	local02, #0
24cd8     60 F2 BF FD | 	call	#__system___float_fromuns
24cdc     10 FB 61 F5 | 	xor	result1, local02
24ce0     FD 12 02 F6 | 	mov	arg01, result1
24ce4     1E 14 C6 F9 | 	decod	arg02, #30
24ce8     54 F6 BF FD | 	call	#__system___float_mul
24cec     FD 12 02 F6 | 	mov	arg01, result1
24cf0     87 24 20 FF 
24cf4     DB 15 06 F6 | 	mov	arg02, ##1078530011
24cf8     44 F6 BF FD | 	call	#__system___float_mul
24cfc     FD 14 02 F6 | 	mov	arg02, result1
24d00     0F 13 02 F6 | 	mov	arg01, local01
24d04     1F 14 E6 F4 | 	bitnot	arg02, #31
24d08     64 F2 BF FD | 	call	#__system___float_add
24d0c     FD 1E 02 F6 | 	mov	local01, result1
24d10                 | LR__3460
24d10     0F 13 02 F6 | 	mov	arg01, local01
24d14     66 E6 1E FF 
24d18     CD 14 06 F6 | 	mov	arg02, ##1036831949
24d1c     01 16 06 F6 | 	mov	arg03, #1
24d20     50 FA BF FD | 	call	#__system___float_cmp
24d24     00 FA 55 F2 | 	cmps	result1, #0 wc
24d28     5C 00 90 3D |  if_ae	jmp	#LR__3461
24d2c     0F 13 02 F6 | 	mov	arg01, local01
24d30     66 E6 5E FF 
24d34     CD 14 06 F6 | 	mov	arg02, ##-1110651699
24d38     01 16 66 F6 | 	neg	arg03, #1
24d3c     34 FA BF FD | 	call	#__system___float_cmp
24d40     01 FA 55 F2 | 	cmps	result1, #1 wc
24d44     40 00 90 CD |  if_b	jmp	#LR__3461
24d48     0F 13 02 F6 | 	mov	arg01, local01
24d4c     0F 15 02 F6 | 	mov	arg02, local01
24d50     EC F5 BF FD | 	call	#__system___float_mul
24d54     FD 12 02 F6 | 	mov	arg01, result1
24d58     0F 15 02 F6 | 	mov	arg02, local01
24d5c     E0 F5 BF FD | 	call	#__system___float_mul
24d60     FD 12 02 F6 | 	mov	arg01, result1
24d64     00 60 20 FF 
24d68     00 14 06 F6 | 	mov	arg02, ##1086324736
24d6c     D4 F7 BF FD | 	call	#__system___float_div
24d70     FD 14 02 F6 | 	mov	arg02, result1
24d74     0F 13 02 F6 | 	mov	arg01, local01
24d78     1F 14 E6 F4 | 	bitnot	arg02, #31
24d7c     F0 F1 BF FD | 	call	#__system___float_add
24d80     FD 22 02 F6 | 	mov	local03, result1
24d84     54 00 90 FD | 	jmp	#LR__3462
24d88                 | LR__3461
24d88     0F 13 02 F6 | 	mov	arg01, local01
24d8c     7C 91 26 FF 
24d90     83 15 06 F6 | 	mov	arg02, ##1294137731
24d94     A8 F5 BF FD | 	call	#__system___float_mul
24d98     FD 12 02 F6 | 	mov	arg01, result1
24d9c     00 14 06 F6 | 	mov	arg02, #0
24da0     64 FA BF FD | 	call	#__system___float_tointeger
24da4     02 FA 65 F0 | 	shl	result1, #2
24da8     00 00 A0 FF 
24dac     FD 00 48 FD | 	qrotate	##1073741824, result1
24db0     19 12 62 FD | 	getqy	arg01
24db4     09 13 52 F6 | 	abs	arg01, arg01 wc
24db8     1F 20 C6 C9 |  if_b	decod	local02, #31
24dbc     00 20 06 36 |  if_ae	mov	local02, #0
24dc0     78 F1 BF FD | 	call	#__system___float_fromuns
24dc4     10 FB 61 F5 | 	xor	result1, local02
24dc8     FD 12 02 F6 | 	mov	arg01, result1
24dcc     00 40 27 FF 
24dd0     00 14 06 F6 | 	mov	arg02, ##1317011456
24dd4     6C F7 BF FD | 	call	#__system___float_div
24dd8     FD 22 02 F6 | 	mov	local03, result1
24ddc                 | LR__3462
24ddc     11 FB 01 F6 | 	mov	result1, local03
24de0     A7 F0 03 F6 | 	mov	ptra, fp
24de4     B2 00 A0 FD | 	call	#popregs_
24de8                 | __system____builtin_sinf_ret
24de8     2D 00 64 FD | 	ret
24dec                 | 
24dec                 | __system____builtin_tanf
24dec     02 4A 05 F6 | 	mov	COUNT_, #2
24df0     A8 00 A0 FD | 	call	#pushregs_
24df4     09 1F 02 F6 | 	mov	local01, arg01
24df8     A4 FE BF FD | 	call	#__system____builtin_sinf
24dfc     FD 20 02 F6 | 	mov	local02, result1
24e00     0F 15 02 F6 | 	mov	arg02, local01
24e04     87 E4 1F FF 
24e08     DB 13 06 F6 | 	mov	arg01, ##1070141403
24e0c     1F 14 E6 F4 | 	bitnot	arg02, #31
24e10     5C F1 BF FD | 	call	#__system___float_add
24e14     FD 12 02 F6 | 	mov	arg01, result1
24e18     84 FE BF FD | 	call	#__system____builtin_sinf
24e1c     FD 14 02 F6 | 	mov	arg02, result1
24e20     10 13 02 F6 | 	mov	arg01, local02
24e24     1C F7 BF FD | 	call	#__system___float_div
24e28     A7 F0 03 F6 | 	mov	ptra, fp
24e2c     B2 00 A0 FD | 	call	#popregs_
24e30                 | __system____builtin_tanf_ret
24e30     2D 00 64 FD | 	ret
24e34                 | 
24e34                 | __system____builtin_asinf
24e34     01 4A 05 F6 | 	mov	COUNT_, #1
24e38     A8 00 A0 FD | 	call	#pushregs_
24e3c     09 1F 02 F6 | 	mov	local01, arg01
24e40     0F 15 02 F6 | 	mov	arg02, local01
24e44     0F 13 02 F6 | 	mov	arg01, local01
24e48     F4 F4 BF FD | 	call	#__system___float_mul
24e4c     FD 14 02 F6 | 	mov	arg02, result1
24e50     00 C0 1F FF 
24e54     00 12 06 F6 | 	mov	arg01, ##1065353216
24e58     1F 14 E6 F4 | 	bitnot	arg02, #31
24e5c     10 F1 BF FD | 	call	#__system___float_add
24e60     FD 12 02 F6 | 	mov	arg01, result1
24e64     00 F4 BF FD | 	call	#__system___float_sqrt
24e68     FD 14 02 F6 | 	mov	arg02, result1
24e6c     0F 13 02 F6 | 	mov	arg01, local01
24e70     58 00 B0 FD | 	call	#__system____builtin_atan2f
24e74     A7 F0 03 F6 | 	mov	ptra, fp
24e78     B2 00 A0 FD | 	call	#popregs_
24e7c                 | __system____builtin_asinf_ret
24e7c     2D 00 64 FD | 	ret
24e80                 | 
24e80                 | __system____builtin_acosf
24e80     01 4A 05 F6 | 	mov	COUNT_, #1
24e84     A8 00 A0 FD | 	call	#pushregs_
24e88     09 1F 02 F6 | 	mov	local01, arg01
24e8c     0F 15 02 F6 | 	mov	arg02, local01
24e90     0F 13 02 F6 | 	mov	arg01, local01
24e94     A8 F4 BF FD | 	call	#__system___float_mul
24e98     FD 14 02 F6 | 	mov	arg02, result1
24e9c     00 C0 1F FF 
24ea0     00 12 06 F6 | 	mov	arg01, ##1065353216
24ea4     1F 14 E6 F4 | 	bitnot	arg02, #31
24ea8     C4 F0 BF FD | 	call	#__system___float_add
24eac     FD 12 02 F6 | 	mov	arg01, result1
24eb0     B4 F3 BF FD | 	call	#__system___float_sqrt
24eb4     FD 12 02 F6 | 	mov	arg01, result1
24eb8     0F 15 02 F6 | 	mov	arg02, local01
24ebc     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24ec0     A7 F0 03 F6 | 	mov	ptra, fp
24ec4     B2 00 A0 FD | 	call	#popregs_
24ec8                 | __system____builtin_acosf_ret
24ec8     2D 00 64 FD | 	ret
24ecc                 | 
24ecc                 | __system____builtin_atan2f
24ecc     04 4A 05 F6 | 	mov	COUNT_, #4
24ed0     A8 00 A0 FD | 	call	#pushregs_
24ed4     09 1F 02 F6 | 	mov	local01, arg01
24ed8     0A 21 02 F6 | 	mov	local02, arg02
24edc     0F 13 02 F6 | 	mov	arg01, local01
24ee0     00 14 06 F6 | 	mov	arg02, #0
24ee4     01 16 06 F6 | 	mov	arg03, #1
24ee8     88 F8 BF FD | 	call	#__system___float_cmp
24eec     00 FA 0D F2 | 	cmp	result1, #0 wz
24ef0     28 00 90 5D |  if_ne	jmp	#LR__3470
24ef4     10 13 02 F6 | 	mov	arg01, local02
24ef8     00 14 06 F6 | 	mov	arg02, #0
24efc     01 16 06 F6 | 	mov	arg03, #1
24f00     70 F8 BF FD | 	call	#__system___float_cmp
24f04     00 FA 55 F2 | 	cmps	result1, #0 wc
24f08     87 24 60 CF 
24f0c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24f10     DC 00 90 CD |  if_b	jmp	#LR__3471
24f14     00 FA 05 F6 | 	mov	result1, #0
24f18     D4 00 90 FD | 	jmp	#LR__3471
24f1c                 | LR__3470
24f1c     10 13 02 F6 | 	mov	arg01, local02
24f20     10 15 02 F6 | 	mov	arg02, local02
24f24     18 F4 BF FD | 	call	#__system___float_mul
24f28     FD 22 02 F6 | 	mov	local03, result1
24f2c     0F 13 02 F6 | 	mov	arg01, local01
24f30     0F 15 02 F6 | 	mov	arg02, local01
24f34     08 F4 BF FD | 	call	#__system___float_mul
24f38     FD 14 02 F6 | 	mov	arg02, result1
24f3c     11 13 02 F6 | 	mov	arg01, local03
24f40     2C F0 BF FD | 	call	#__system___float_add
24f44     FD 12 02 F6 | 	mov	arg01, result1
24f48     1C F3 BF FD | 	call	#__system___float_sqrt
24f4c     FD 22 02 F6 | 	mov	local03, result1
24f50     10 13 02 F6 | 	mov	arg01, local02
24f54     11 15 02 F6 | 	mov	arg02, local03
24f58     E8 F5 BF FD | 	call	#__system___float_div
24f5c     FD 20 02 F6 | 	mov	local02, result1
24f60     0F 13 02 F6 | 	mov	arg01, local01
24f64     11 15 02 F6 | 	mov	arg02, local03
24f68     D8 F5 BF FD | 	call	#__system___float_div
24f6c     FD 1E 02 F6 | 	mov	local01, result1
24f70     00 40 27 FF 
24f74     00 12 06 F6 | 	mov	arg01, ##1317011456
24f78     10 15 02 F6 | 	mov	arg02, local02
24f7c     C0 F3 BF FD | 	call	#__system___float_mul
24f80     FD 12 02 F6 | 	mov	arg01, result1
24f84     00 14 06 F6 | 	mov	arg02, #0
24f88     7C F8 BF FD | 	call	#__system___float_tointeger
24f8c     FD 22 02 F6 | 	mov	local03, result1
24f90     00 40 27 FF 
24f94     00 12 06 F6 | 	mov	arg01, ##1317011456
24f98     0F 15 02 F6 | 	mov	arg02, local01
24f9c     A0 F3 BF FD | 	call	#__system___float_mul
24fa0     FD 12 02 F6 | 	mov	arg01, result1
24fa4     00 14 06 F6 | 	mov	arg02, #0
24fa8     5C F8 BF FD | 	call	#__system___float_tointeger
24fac     FD 22 52 FD | 	qvector	local03, result1
24fb0     87 24 20 FF 
24fb4     DB 23 06 F6 | 	mov	local03, ##1078530011
24fb8     19 12 62 FD | 	getqy	arg01
24fbc     01 12 C6 F0 | 	sar	arg01, #1
24fc0     09 13 52 F6 | 	abs	arg01, arg01 wc
24fc4     1F 24 C6 C9 |  if_b	decod	local04, #31
24fc8     00 24 06 36 |  if_ae	mov	local04, #0
24fcc     6C EF BF FD | 	call	#__system___float_fromuns
24fd0     12 FB 61 F5 | 	xor	result1, local04
24fd4     FD 12 02 F6 | 	mov	arg01, result1
24fd8     00 40 27 FF 
24fdc     00 14 06 F6 | 	mov	arg02, ##1317011456
24fe0     60 F5 BF FD | 	call	#__system___float_div
24fe4     FD 14 02 F6 | 	mov	arg02, result1
24fe8     11 13 02 F6 | 	mov	arg01, local03
24fec     50 F3 BF FD | 	call	#__system___float_mul
24ff0                 | LR__3471
24ff0     A7 F0 03 F6 | 	mov	ptra, fp
24ff4     B2 00 A0 FD | 	call	#popregs_
24ff8                 | __system____builtin_atan2f_ret
24ff8     2D 00 64 FD | 	ret
24ffc                 | 
24ffc                 | __system____builtin_exp2f
24ffc     04 4A 05 F6 | 	mov	COUNT_, #4
25000     A8 00 A0 FD | 	call	#pushregs_
25004     09 1F 02 F6 | 	mov	local01, arg01
25008     00 7F 21 FF 
2500c     00 14 06 F6 | 	mov	arg02, ##1123942400
25010     01 16 66 F6 | 	neg	arg03, #1
25014     5C F7 BF FD | 	call	#__system___float_cmp
25018     00 FA 55 F2 | 	cmps	result1, #0 wc
2501c     00 C0 3F 3F 
25020     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
25024     DC 00 90 3D |  if_ae	jmp	#LR__3481
25028     0F 13 02 F6 | 	mov	arg01, local01
2502c     00 7F 61 FF 
25030     00 14 06 F6 | 	mov	arg02, ##-1023541248
25034     01 16 06 F6 | 	mov	arg03, #1
25038     38 F7 BF FD | 	call	#__system___float_cmp
2503c     00 FA 55 F2 | 	cmps	result1, #0 wc
25040     00 FA 05 C6 |  if_b	mov	result1, #0
25044     BC 00 90 CD |  if_b	jmp	#LR__3481
25048     0F 13 02 F6 | 	mov	arg01, local01
2504c     00 14 06 F6 | 	mov	arg02, #0
25050     B4 F7 BF FD | 	call	#__system___float_tointeger
25054     FD 20 02 F6 | 	mov	local02, result1
25058     10 13 52 F6 | 	abs	arg01, local02 wc
2505c     1F 22 C6 C9 |  if_b	decod	local03, #31
25060     00 22 06 36 |  if_ae	mov	local03, #0
25064     D4 EE BF FD | 	call	#__system___float_fromuns
25068     11 FB 61 F5 | 	xor	result1, local03
2506c     FD 14 02 F6 | 	mov	arg02, result1
25070     0F 13 02 F6 | 	mov	arg01, local01
25074     1F 14 E6 F4 | 	bitnot	arg02, #31
25078     F4 EE BF FD | 	call	#__system___float_add
2507c     FD 24 02 F6 | 	mov	local04, result1
25080     12 13 02 F6 | 	mov	arg01, local04
25084     00 14 06 F6 | 	mov	arg02, #0
25088     01 16 06 F6 | 	mov	arg03, #1
2508c     E4 F6 BF FD | 	call	#__system___float_cmp
25090     00 FA 55 F2 | 	cmps	result1, #0 wc
25094     18 00 90 3D |  if_ae	jmp	#LR__3480
25098     12 13 02 F6 | 	mov	arg01, local04
2509c     00 C0 1F FF 
250a0     00 14 06 F6 | 	mov	arg02, ##1065353216
250a4     C8 EE BF FD | 	call	#__system___float_add
250a8     FD 24 02 F6 | 	mov	local04, result1
250ac     01 20 86 F1 | 	sub	local02, #1
250b0                 | LR__3480
250b0     7F 20 06 F1 | 	add	local02, #127
250b4     17 20 66 F0 | 	shl	local02, #23
250b8     12 13 02 F6 | 	mov	arg01, local04
250bc     00 80 26 FF 
250c0     00 14 06 F6 | 	mov	arg02, ##1291845632
250c4     78 F2 BF FD | 	call	#__system___float_mul
250c8     FD 12 02 F6 | 	mov	arg01, result1
250cc     00 14 06 F6 | 	mov	arg02, #0
250d0     34 F7 BF FD | 	call	#__system___float_tointeger
250d4     FD 24 0A F6 | 	mov	local04, result1 wz
250d8     10 FB 01 A6 |  if_e	mov	result1, local02
250dc     24 00 90 AD |  if_e	jmp	#LR__3481
250e0     3E 24 26 F4 | 	bith	local04, #62
250e4     0F 24 62 FD | 	qexp	local04
250e8     10 13 02 F6 | 	mov	arg01, local02
250ec     18 14 62 FD | 	getqx	arg02
250f0     01 14 06 F1 | 	add	arg02, #1
250f4     01 14 46 F0 | 	shr	arg02, #1
250f8     00 80 1F FF 
250fc     00 14 06 F1 | 	add	arg02, ##1056964608
25100     3C F2 BF FD | 	call	#__system___float_mul
25104                 | LR__3481
25104     A7 F0 03 F6 | 	mov	ptra, fp
25108     B2 00 A0 FD | 	call	#popregs_
2510c                 | __system____builtin_exp2f_ret
2510c     2D 00 64 FD | 	ret
25110                 | 
25110                 | __system____builtin_log2f
25110     06 4A 05 F6 | 	mov	COUNT_, #6
25114     A8 00 A0 FD | 	call	#pushregs_
25118     09 1F 02 F6 | 	mov	local01, arg01
2511c     09 21 0A F6 | 	mov	local02, arg01 wz
25120     00 00 40 5F 
25124     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
25128     00 40 00 AF 
2512c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
25130     08 01 90 AD |  if_e	jmp	#LR__3494
25134     00 20 56 F2 | 	cmps	local02, #0 wc
25138     00 E0 3F CF 
2513c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
25140     F8 00 90 CD |  if_b	jmp	#LR__3494
25144     0F 13 02 F6 | 	mov	arg01, local01
25148     00 90 20 FF 
2514c     00 14 06 F6 | 	mov	arg02, ##1092616192
25150     01 16 06 F6 | 	mov	arg03, #1
25154     1C F6 BF FD | 	call	#__system___float_cmp
25158     00 FA 0D F2 | 	cmp	result1, #0 wz
2515c     4D 2A 20 AF 
25160     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
25164     D4 00 90 AD |  if_e	jmp	#LR__3494
25168     0F 13 02 F6 | 	mov	arg01, local01
2516c     FC 16 20 FF 
25170     54 14 06 F6 | 	mov	arg02, ##1076754516
25174     01 16 06 F6 | 	mov	arg03, #1
25178     F8 F5 BF FD | 	call	#__system___float_cmp
2517c     00 FA 0D F2 | 	cmp	result1, #0 wz
25180     55 DC 1F AF 
25184     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
25188     B0 00 90 AD |  if_e	jmp	#LR__3494
2518c     10 23 02 F6 | 	mov	local03, local02
25190     17 22 46 F0 | 	shr	local03, #23
25194     11 23 E2 F8 | 	getbyte	local03, local03, #0
25198     17 21 06 F4 | 	bitl	local02, #279
2519c     10 25 02 F6 | 	mov	local04, local02
251a0     FF 22 0E F2 | 	cmp	local03, #255 wz
251a4     1C 00 90 5D |  if_ne	jmp	#LR__3490
251a8     00 24 0E F2 | 	cmp	local04, #0 wz
251ac     00 C0 3F 5F 
251b0     00 26 06 56 |  if_ne	mov	local05, ##2139095040
251b4     00 E0 3F AF 
251b8     00 26 06 A6 |  if_e	mov	local05, ##2143289344
251bc     13 FB 01 F6 | 	mov	result1, local05
251c0     78 00 90 FD | 	jmp	#LR__3494
251c4                 | LR__3490
251c4     00 22 0E F2 | 	cmp	local03, #0 wz
251c8     17 24 26 54 |  if_ne	bith	local04, #23
251cc     7F 22 86 51 |  if_ne	sub	local03, #127
251d0     28 00 90 5D |  if_ne	jmp	#LR__3493
251d4     00 24 0E F2 | 	cmp	local04, #0 wz
251d8     00 40 00 AF 
251dc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
251e0     58 00 90 AD |  if_e	jmp	#LR__3494
251e4     7E 22 66 F6 | 	neg	local03, #126
251e8     97 08 48 FB | 	callpa	#(@LR__3492-@LR__3491)>>2,fcache_load_ptr_
251ec                 | LR__3491
251ec     17 24 2E F4 | 	testbn	local04, #23 wz
251f0     01 24 66 A0 |  if_e	shl	local04, #1
251f4     01 22 06 A1 |  if_e	add	local03, #1
251f8     F0 FF 9F AD |  if_e	jmp	#LR__3491
251fc                 | LR__3492
251fc                 | LR__3493
251fc     0E 24 62 FD | 	qlog	local04
25200     01 22 86 F1 | 	sub	local03, #1
25204     11 13 52 F6 | 	abs	arg01, local03 wc
25208     1F 28 C6 C9 |  if_b	decod	local06, #31
2520c     00 28 06 36 |  if_ae	mov	local06, #0
25210     18 26 62 FD | 	getqx	local05
25214     9B 26 06 F4 | 	bitl	local05, #155
25218     08 26 06 F1 | 	add	local05, #8
2521c     04 26 46 F0 | 	shr	local05, #4
25220     00 C0 1F FF 
25224     00 26 06 F1 | 	add	local05, ##1065353216
25228     10 ED BF FD | 	call	#__system___float_fromuns
2522c     14 FB 61 F5 | 	xor	result1, local06
25230     FD 14 02 F6 | 	mov	arg02, result1
25234     13 13 02 F6 | 	mov	arg01, local05
25238     34 ED BF FD | 	call	#__system___float_add
2523c                 | LR__3494
2523c     A7 F0 03 F6 | 	mov	ptra, fp
25240     B2 00 A0 FD | 	call	#popregs_
25244                 | __system____builtin_log2f_ret
25244     2D 00 64 FD | 	ret
25248                 | 
25248                 | __system____builtin_powf
25248     04 4A 05 F6 | 	mov	COUNT_, #4
2524c     A8 00 A0 FD | 	call	#pushregs_
25250     09 1F 02 F6 | 	mov	local01, arg01
25254     0A 21 02 F6 | 	mov	local02, arg02
25258     10 13 02 F6 | 	mov	arg01, local02
2525c     00 14 06 F6 | 	mov	arg02, #0
25260     A4 F5 BF FD | 	call	#__system___float_tointeger
25264     FD 22 02 F6 | 	mov	local03, result1
25268     11 13 52 F6 | 	abs	arg01, local03 wc
2526c     1F 24 C6 C9 |  if_b	decod	local04, #31
25270     00 24 06 36 |  if_ae	mov	local04, #0
25274     C4 EC BF FD | 	call	#__system___float_fromuns
25278     12 FB 61 F5 | 	xor	result1, local04
2527c     FD 12 02 F6 | 	mov	arg01, result1
25280     10 15 02 F6 | 	mov	arg02, local02
25284     01 16 06 F6 | 	mov	arg03, #1
25288     E8 F4 BF FD | 	call	#__system___float_cmp
2528c     00 FA 0D F2 | 	cmp	result1, #0 wz
25290     18 00 90 5D |  if_ne	jmp	#LR__3500
25294     00 C0 1F FF 
25298     00 12 06 F6 | 	mov	arg01, ##1065353216
2529c     0F 15 02 F6 | 	mov	arg02, local01
252a0     11 17 02 F6 | 	mov	arg03, local03
252a4     A0 00 B0 FD | 	call	#__system___float_pow_n
252a8     58 00 90 FD | 	jmp	#LR__3501
252ac                 | LR__3500
252ac     0F 13 02 F6 | 	mov	arg01, local01
252b0     00 14 06 F6 | 	mov	arg02, #0
252b4     01 16 06 F6 | 	mov	arg03, #1
252b8     B8 F4 BF FD | 	call	#__system___float_cmp
252bc     00 FA 55 F2 | 	cmps	result1, #0 wc
252c0     00 E0 3F CF 
252c4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
252c8     38 00 90 CD |  if_b	jmp	#LR__3501
252cc     0F 13 02 F6 | 	mov	arg01, local01
252d0     00 14 06 F6 | 	mov	arg02, #0
252d4     01 16 06 F6 | 	mov	arg03, #1
252d8     98 F4 BF FD | 	call	#__system___float_cmp
252dc     00 FA 0D F2 | 	cmp	result1, #0 wz
252e0     00 FA 05 A6 |  if_e	mov	result1, #0
252e4     1C 00 90 AD |  if_e	jmp	#LR__3501
252e8     0F 13 02 F6 | 	mov	arg01, local01
252ec     20 FE BF FD | 	call	#__system____builtin_log2f
252f0     FD 12 02 F6 | 	mov	arg01, result1
252f4     10 15 02 F6 | 	mov	arg02, local02
252f8     44 F0 BF FD | 	call	#__system___float_mul
252fc     FD 12 02 F6 | 	mov	arg01, result1
25300     F8 FC BF FD | 	call	#__system____builtin_exp2f
25304                 | LR__3501
25304     A7 F0 03 F6 | 	mov	ptra, fp
25308     B2 00 A0 FD | 	call	#popregs_
2530c                 | __system____builtin_powf_ret
2530c     2D 00 64 FD | 	ret
25310                 | 
25310                 | __system____builtin_logbase
25310     02 4A 05 F6 | 	mov	COUNT_, #2
25314     A8 00 A0 FD | 	call	#pushregs_
25318     09 1F 02 F6 | 	mov	local01, arg01
2531c     0A 13 02 F6 | 	mov	arg01, arg02
25320     EC FD BF FD | 	call	#__system____builtin_log2f
25324     FD 20 02 F6 | 	mov	local02, result1
25328     0F 13 02 F6 | 	mov	arg01, local01
2532c     E0 FD BF FD | 	call	#__system____builtin_log2f
25330     FD 14 02 F6 | 	mov	arg02, result1
25334     10 13 02 F6 | 	mov	arg01, local02
25338     08 F2 BF FD | 	call	#__system___float_div
2533c     A7 F0 03 F6 | 	mov	ptra, fp
25340     B2 00 A0 FD | 	call	#popregs_
25344                 | __system____builtin_logbase_ret
25344     2D 00 64 FD | 	ret
25348                 | 
25348                 | __system___float_pow_n
25348     05 4A 05 F6 | 	mov	COUNT_, #5
2534c     A8 00 A0 FD | 	call	#pushregs_
25350     09 1F 02 F6 | 	mov	local01, arg01
25354     0A 21 02 F6 | 	mov	local02, arg02
25358     0B 23 02 F6 | 	mov	local03, arg03
2535c     00 22 56 F2 | 	cmps	local03, #0 wc
25360     18 00 90 3D |  if_ae	jmp	#LR__3510
25364     01 24 06 F6 | 	mov	local04, #1
25368     11 23 62 F6 | 	neg	local03, local03
2536c     00 22 56 F2 | 	cmps	local03, #0 wc
25370     00 FA 05 C6 |  if_b	mov	result1, #0
25374     94 00 90 CD |  if_b	jmp	#LR__3518
25378     04 00 90 FD | 	jmp	#LR__3511
2537c                 | LR__3510
2537c     00 24 06 F6 | 	mov	local04, #0
25380                 | LR__3511
25380     00 C0 1F FF 
25384     00 26 06 F6 | 	mov	local05, ##1065353216
25388                 | LR__3512
25388     01 22 56 F2 | 	cmps	local03, #1 wc
2538c     30 00 90 CD |  if_b	jmp	#LR__3514
25390     01 22 CE F7 | 	test	local03, #1 wz
25394     10 00 90 AD |  if_e	jmp	#LR__3513
25398     13 13 02 F6 | 	mov	arg01, local05
2539c     10 15 02 F6 | 	mov	arg02, local02
253a0     9C EF BF FD | 	call	#__system___float_mul
253a4     FD 26 02 F6 | 	mov	local05, result1
253a8                 | LR__3513
253a8     01 22 C6 F0 | 	sar	local03, #1
253ac     10 13 02 F6 | 	mov	arg01, local02
253b0     10 15 02 F6 | 	mov	arg02, local02
253b4     88 EF BF FD | 	call	#__system___float_mul
253b8     FD 20 02 F6 | 	mov	local02, result1
253bc     C8 FF 9F FD | 	jmp	#LR__3512
253c0                 | LR__3514
253c0     00 24 0E F2 | 	cmp	local04, #0 wz
253c4     14 00 90 AD |  if_e	jmp	#LR__3515
253c8     0F 13 02 F6 | 	mov	arg01, local01
253cc     13 15 02 F6 | 	mov	arg02, local05
253d0     70 F1 BF FD | 	call	#__system___float_div
253d4     FD 26 02 F6 | 	mov	local05, result1
253d8     2C 00 90 FD | 	jmp	#LR__3517
253dc                 | LR__3515
253dc     0F 13 02 F6 | 	mov	arg01, local01
253e0     00 C0 1F FF 
253e4     00 14 06 F6 | 	mov	arg02, ##1065353216
253e8     01 16 06 F6 | 	mov	arg03, #1
253ec     84 F3 BF FD | 	call	#__system___float_cmp
253f0     00 FA 0D F2 | 	cmp	result1, #0 wz
253f4     10 00 90 AD |  if_e	jmp	#LR__3516
253f8     0F 13 02 F6 | 	mov	arg01, local01
253fc     13 15 02 F6 | 	mov	arg02, local05
25400     3C EF BF FD | 	call	#__system___float_mul
25404     FD 26 02 F6 | 	mov	local05, result1
25408                 | LR__3516
25408                 | LR__3517
25408     13 FB 01 F6 | 	mov	result1, local05
2540c                 | LR__3518
2540c     A7 F0 03 F6 | 	mov	ptra, fp
25410     B2 00 A0 FD | 	call	#popregs_
25414                 | __system___float_pow_n_ret
25414     2D 00 64 FD | 	ret
25418                 | 
25418                 | __system___gc_ptrs
25418     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2541c     00 03 02 F6 | 	mov	_var02, _var01
25420     76 01 00 FF 
25424     F8 03 06 F1 | 	add	_var02, ##191992
25428     00 FD 09 FB | 	rdlong	result2, _var01 wz
2542c     74 00 90 5D |  if_ne	jmp	#LR__3520
25430     01 FD 01 F6 | 	mov	result2, _var02
25434     00 FD 81 F1 | 	sub	result2, _var01
25438     00 03 58 FC | 	wrword	#1, _var01
2543c     00 FB 01 F6 | 	mov	result1, _var01
25440     02 FA 05 F1 | 	add	result1, #2
25444     36 00 80 FF 
25448     FD 20 59 FC | 	wrword	##27792, result1
2544c     00 FB 01 F6 | 	mov	result1, _var01
25450     04 FA 05 F1 | 	add	result1, #4
25454     FD 00 58 FC | 	wrword	#0, result1
25458     00 FB 01 F6 | 	mov	result1, _var01
2545c     06 FA 05 F1 | 	add	result1, #6
25460     FD 02 58 FC | 	wrword	#1, result1
25464     10 00 06 F1 | 	add	_var01, #16
25468     FE FC 51 F6 | 	abs	result2, result2 wc
2546c     04 FC 45 F0 | 	shr	result2, #4
25470     FE FC 81 F6 | 	negc	result2, result2
25474     00 FD 51 FC | 	wrword	result2, _var01
25478     00 FD 01 F6 | 	mov	result2, _var01
2547c     02 FC 05 F1 | 	add	result2, #2
25480     36 00 80 FF 
25484     FE 1E 59 FC | 	wrword	##27791, result2
25488     00 FD 01 F6 | 	mov	result2, _var01
2548c     04 FC 05 F1 | 	add	result2, #4
25490     FE 00 58 FC | 	wrword	#0, result2
25494     00 FD 01 F6 | 	mov	result2, _var01
25498     06 FC 05 F1 | 	add	result2, #6
2549c     FE 00 58 FC | 	wrword	#0, result2
254a0     10 00 86 F1 | 	sub	_var01, #16
254a4                 | LR__3520
254a4     00 FB 01 F6 | 	mov	result1, _var01
254a8     01 FD 01 F6 | 	mov	result2, _var02
254ac                 | __system___gc_ptrs_ret
254ac     2D 00 64 FD | 	ret
254b0                 | 
254b0                 | __system___gc_tryalloc
254b0     0B 4A 05 F6 | 	mov	COUNT_, #11
254b4     A8 00 A0 FD | 	call	#pushregs_
254b8     09 1F 02 F6 | 	mov	local01, arg01
254bc     0A 21 02 F6 | 	mov	local02, arg02
254c0     54 FF BF FD | 	call	#__system___gc_ptrs
254c4     FD 22 02 F6 | 	mov	local03, result1
254c8     FE 24 02 F6 | 	mov	local04, result2
254cc     11 27 02 F6 | 	mov	local05, local03
254d0     00 28 06 F6 | 	mov	local06, #0
254d4     97 1E 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
254d8                 | LR__3530
254d8     13 2B 02 F6 | 	mov	local07, local05
254dc     06 26 06 F1 | 	add	local05, #6
254e0     13 15 EA FA | 	rdword	arg02, local05 wz
254e4     11 13 02 F6 | 	mov	arg01, local03
254e8     00 FA 05 A6 |  if_e	mov	result1, #0
254ec     04 14 66 50 |  if_ne	shl	arg02, #4
254f0     0A 13 02 51 |  if_ne	add	arg01, arg02
254f4     09 FB 01 56 |  if_ne	mov	result1, arg01
254f8     FD 26 0A F6 | 	mov	local05, result1 wz
254fc     13 29 E2 5A |  if_ne	rdword	local06, local05
25500     00 26 0E F2 | 	cmp	local05, #0 wz
25504     12 27 52 52 |  if_ne	cmps	local05, local04 wc
25508     08 00 90 1D |  if_a	jmp	#LR__3532
2550c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
25510     C4 FF 9F 1D |  if_a	jmp	#LR__3530
25514                 | LR__3531
25514                 | LR__3532
25514     00 26 0E F2 | 	cmp	local05, #0 wz
25518     13 FB 01 A6 |  if_e	mov	result1, local05
2551c     3C 01 90 AD |  if_e	jmp	#LR__3535
25520     13 FD 01 F6 | 	mov	result2, local05
25524     06 FC 05 F1 | 	add	result2, #6
25528     FE 2C E2 FA | 	rdword	local08, result2
2552c     14 1F 52 F2 | 	cmps	local01, local06 wc
25530     C0 00 90 3D |  if_ae	jmp	#LR__3534
25534     13 1F 52 FC | 	wrword	local01, local05
25538     13 13 02 F6 | 	mov	arg01, local05
2553c     0F 2D 02 F6 | 	mov	local08, local01
25540     04 2C 66 F0 | 	shl	local08, #4
25544     16 13 02 F1 | 	add	arg01, local08
25548     0F 29 82 F1 | 	sub	local06, local01
2554c     09 29 52 FC | 	wrword	local06, arg01
25550     09 2D 02 F6 | 	mov	local08, arg01
25554     02 2C 06 F1 | 	add	local08, #2
25558     36 00 80 FF 
2555c     16 1F 59 FC | 	wrword	##27791, local08
25560     13 15 0A F6 | 	mov	arg02, local05 wz
25564     00 FA 05 A6 |  if_e	mov	result1, #0
25568     11 15 82 51 |  if_ne	sub	arg02, local03
2556c     04 14 46 50 |  if_ne	shr	arg02, #4
25570     0A FB 01 56 |  if_ne	mov	result1, arg02
25574     09 2D 02 F6 | 	mov	local08, arg01
25578     04 2C 06 F1 | 	add	local08, #4
2557c     16 FB 51 FC | 	wrword	result1, local08
25580     13 2D 02 F6 | 	mov	local08, local05
25584     06 2C 06 F1 | 	add	local08, #6
25588     09 15 02 F6 | 	mov	arg02, arg01
2558c     16 2D E2 FA | 	rdword	local08, local08
25590     06 14 06 F1 | 	add	arg02, #6
25594     0A 2D 52 FC | 	wrword	local08, arg02
25598     09 2F 02 F6 | 	mov	local09, arg01
2559c     17 15 0A F6 | 	mov	arg02, local09 wz
255a0     00 FA 05 A6 |  if_e	mov	result1, #0
255a4     11 15 82 51 |  if_ne	sub	arg02, local03
255a8     04 14 46 50 |  if_ne	shr	arg02, #4
255ac     0A FB 01 56 |  if_ne	mov	result1, arg02
255b0     FD 2C 02 F6 | 	mov	local08, result1
255b4     09 31 EA FA | 	rdword	local10, arg01 wz
255b8     00 FA 05 A6 |  if_e	mov	result1, #0
255bc     04 30 66 50 |  if_ne	shl	local10, #4
255c0     18 13 02 51 |  if_ne	add	arg01, local10
255c4     09 FB 01 56 |  if_ne	mov	result1, arg01
255c8     FD 32 0A F6 | 	mov	local11, result1 wz
255cc     24 00 90 AD |  if_e	jmp	#LR__3533
255d0     12 33 52 F2 | 	cmps	local11, local04 wc
255d4     1C 00 90 3D |  if_ae	jmp	#LR__3533
255d8     17 15 0A F6 | 	mov	arg02, local09 wz
255dc     00 FA 05 A6 |  if_e	mov	result1, #0
255e0     11 15 82 51 |  if_ne	sub	arg02, local03
255e4     04 14 46 50 |  if_ne	shr	arg02, #4
255e8     0A FB 01 56 |  if_ne	mov	result1, arg02
255ec     04 32 06 F1 | 	add	local11, #4
255f0     19 FB 51 FC | 	wrword	result1, local11
255f4                 | LR__3533
255f4                 | LR__3534
255f4     06 2A 06 F1 | 	add	local07, #6
255f8     15 2D 52 FC | 	wrword	local08, local07
255fc     36 00 00 FF 
25600     80 2E 06 F6 | 	mov	local09, ##27776
25604     10 2F 42 F5 | 	or	local09, local02
25608     00 FA 05 F6 | 	mov	result1, #0
2560c     01 FA 61 FD | 	cogid	result1
25610     FD 2E 42 F5 | 	or	local09, result1
25614     13 33 02 F6 | 	mov	local11, local05
25618     02 32 06 F1 | 	add	local11, #2
2561c     19 2F 52 FC | 	wrword	local09, local11
25620     11 2F 02 F6 | 	mov	local09, local03
25624     08 2E 06 F1 | 	add	local09, #8
25628     13 33 02 F6 | 	mov	local11, local05
2562c     17 2F E2 FA | 	rdword	local09, local09
25630     06 32 06 F1 | 	add	local11, #6
25634     19 2F 52 FC | 	wrword	local09, local11
25638     13 15 0A F6 | 	mov	arg02, local05 wz
2563c     00 FA 05 A6 |  if_e	mov	result1, #0
25640     11 15 82 51 |  if_ne	sub	arg02, local03
25644     04 14 46 50 |  if_ne	shr	arg02, #4
25648     0A FB 01 56 |  if_ne	mov	result1, arg02
2564c     08 22 06 F1 | 	add	local03, #8
25650     11 FB 51 FC | 	wrword	result1, local03
25654     08 26 06 F1 | 	add	local05, #8
25658     13 FB 01 F6 | 	mov	result1, local05
2565c                 | LR__3535
2565c     A7 F0 03 F6 | 	mov	ptra, fp
25660     B2 00 A0 FD | 	call	#popregs_
25664                 | __system___gc_tryalloc_ret
25664     2D 00 64 FD | 	ret
25668                 | 
25668                 | __system___gc_alloc_managed
25668     01 4A 05 F6 | 	mov	COUNT_, #1
2566c     A8 00 A0 FD | 	call	#pushregs_
25670     09 1F 02 F6 | 	mov	local01, arg01
25674     00 14 06 F6 | 	mov	arg02, #0
25678     1C 00 B0 FD | 	call	#__system___gc_doalloc
2567c     FD 14 0A F6 | 	mov	arg02, result1 wz
25680     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
25684     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
25688     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2568c     A7 F0 03 F6 | 	mov	ptra, fp
25690     B2 00 A0 FD | 	call	#popregs_
25694                 | __system___gc_alloc_managed_ret
25694     2D 00 64 FD | 	ret
25698                 | 
25698                 | __system___gc_doalloc
25698     06 4A 05 F6 | 	mov	COUNT_, #6
2569c     A8 00 A0 FD | 	call	#pushregs_
256a0     09 1F 0A F6 | 	mov	local01, arg01 wz
256a4     0A 21 02 F6 | 	mov	local02, arg02
256a8     00 FA 05 A6 |  if_e	mov	result1, #0
256ac     8C 00 90 AD |  if_e	jmp	#LR__3547
256b0     17 1E 06 F1 | 	add	local01, #23
256b4     0F 1E 26 F5 | 	andn	local01, #15
256b8     04 1E 46 F0 | 	shr	local01, #4
256bc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
256c0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
256c4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
256c8     B8 BE BF FD | 	call	#__system___lockmem
256cc     0F 13 02 F6 | 	mov	arg01, local01
256d0     10 15 02 F6 | 	mov	arg02, local02
256d4     D8 FD BF FD | 	call	#__system___gc_tryalloc
256d8     FD 22 0A F6 | 	mov	local03, result1 wz
256dc     14 00 90 5D |  if_ne	jmp	#LR__3540
256e0     70 03 B0 FD | 	call	#__system___gc_docollect
256e4     0F 13 02 F6 | 	mov	arg01, local01
256e8     10 15 02 F6 | 	mov	arg02, local02
256ec     C0 FD BF FD | 	call	#__system___gc_tryalloc
256f0     FD 22 02 F6 | 	mov	local03, result1
256f4                 | LR__3540
256f4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
256f8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
256fc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25700     09 01 68 FC | 	wrlong	#0, arg01
25704     00 22 0E F2 | 	cmp	local03, #0 wz
25708     2C 00 90 AD |  if_e	jmp	#LR__3546
2570c     04 1E 66 F0 | 	shl	local01, #4
25710     08 1E 86 F1 | 	sub	local01, #8
25714     0F 25 52 F6 | 	abs	local04, local01 wc
25718     02 24 46 F0 | 	shr	local04, #2
2571c     12 27 8A F6 | 	negc	local05, local04 wz
25720     11 29 02 F6 | 	mov	local06, local03
25724     10 00 90 AD |  if_e	jmp	#LR__3545
25728     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3541)>>2,fcache_load_ptr_
2572c                 | LR__3541
2572c     13 05 D8 FC | 	rep	@LR__3544, local05
25730                 | LR__3542
25730     14 01 68 FC | 	wrlong	#0, local06
25734     04 28 06 F1 | 	add	local06, #4
25738                 | LR__3543
25738                 | LR__3544
25738                 | LR__3545
25738                 | LR__3546
25738     11 FB 01 F6 | 	mov	result1, local03
2573c                 | LR__3547
2573c     A7 F0 03 F6 | 	mov	ptra, fp
25740     B2 00 A0 FD | 	call	#popregs_
25744                 | __system___gc_doalloc_ret
25744     2D 00 64 FD | 	ret
25748                 | 
25748                 | __system___gc_isvalidptr
25748     F8 16 06 F4 | 	bitl	arg03, #248
2574c     08 16 86 F1 | 	sub	arg03, #8
25750     09 17 52 F2 | 	cmps	arg03, arg01 wc
25754     08 00 90 CD |  if_b	jmp	#LR__3550
25758     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2575c     08 00 90 CD |  if_b	jmp	#LR__3551
25760                 | LR__3550
25760     00 FA 05 F6 | 	mov	result1, #0
25764     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
25768                 | LR__3551
25768     0B 01 02 F6 | 	mov	_var01, arg03
2576c     09 01 62 F5 | 	xor	_var01, arg01
25770     0F 00 CE F7 | 	test	_var01, #15 wz
25774     00 FA 05 56 |  if_ne	mov	result1, #0
25778     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2577c     0B 01 02 F6 | 	mov	_var01, arg03
25780     02 00 06 F1 | 	add	_var01, #2
25784     00 01 E2 FA | 	rdword	_var01, _var01
25788     7F 00 00 FF 
2578c     C0 01 06 F5 | 	and	_var01, ##65472
25790     36 00 00 FF 
25794     80 00 0E F2 | 	cmp	_var01, ##27776 wz
25798     00 FA 05 56 |  if_ne	mov	result1, #0
2579c     0B FB 01 A6 |  if_e	mov	result1, arg03
257a0                 | __system___gc_isvalidptr_ret
257a0     2D 00 64 FD | 	ret
257a4                 | 
257a4                 | __system___gc_free
257a4     09 17 02 F6 | 	mov	arg03, arg01
257a8     6C FC BF FD | 	call	#__system___gc_ptrs
257ac     FD 12 02 F6 | 	mov	arg01, result1
257b0     FE 14 02 F6 | 	mov	arg02, result2
257b4     90 FF BF FD | 	call	#__system___gc_isvalidptr
257b8     FD 14 0A F6 | 	mov	arg02, result1 wz
257bc     28 00 90 AD |  if_e	jmp	#LR__3560
257c0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
257c4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
257c8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
257cc     B4 BD BF FD | 	call	#__system___lockmem
257d0     0A 13 02 F6 | 	mov	arg01, arg02
257d4     14 00 B0 FD | 	call	#__system___gc_dofree
257d8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
257dc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
257e0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
257e4     09 01 68 FC | 	wrlong	#0, arg01
257e8                 | LR__3560
257e8                 | __system___gc_free_ret
257e8     2D 00 64 FD | 	ret
257ec                 | 
257ec                 | __system___gc_dofree
257ec     06 4A 05 F6 | 	mov	COUNT_, #6
257f0     A8 00 A0 FD | 	call	#pushregs_
257f4     09 1F 02 F6 | 	mov	local01, arg01
257f8     1C FC BF FD | 	call	#__system___gc_ptrs
257fc     FD 20 02 F6 | 	mov	local02, result1
25800     FE 22 02 F6 | 	mov	local03, result2
25804     0F 15 02 F6 | 	mov	arg02, local01
25808     02 14 06 F1 | 	add	arg02, #2
2580c     36 00 80 FF 
25810     0A 1F 59 FC | 	wrword	##27791, arg02
25814     0F 25 02 F6 | 	mov	local04, local01
25818     0F 13 02 F6 | 	mov	arg01, local01
2581c     09 27 EA FA | 	rdword	local05, arg01 wz
25820     00 FA 05 A6 |  if_e	mov	result1, #0
25824     04 26 66 50 |  if_ne	shl	local05, #4
25828     13 13 02 51 |  if_ne	add	arg01, local05
2582c     09 FB 01 56 |  if_ne	mov	result1, arg01
25830     FD 28 02 F6 | 	mov	local06, result1
25834     97 24 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
25838                 | LR__3570
25838     04 24 06 F1 | 	add	local04, #4
2583c     12 15 EA FA | 	rdword	arg02, local04 wz
25840     10 13 02 F6 | 	mov	arg01, local02
25844     00 FA 05 A6 |  if_e	mov	result1, #0
25848     04 14 66 50 |  if_ne	shl	arg02, #4
2584c     0A 13 02 51 |  if_ne	add	arg01, arg02
25850     09 FB 01 56 |  if_ne	mov	result1, arg01
25854     FD 24 0A F6 | 	mov	local04, result1 wz
25858     24 00 90 AD |  if_e	jmp	#LR__3572
2585c     12 13 02 F6 | 	mov	arg01, local04
25860     00 FA 05 F6 | 	mov	result1, #0
25864     02 12 06 F1 | 	add	arg01, #2
25868     09 13 E2 FA | 	rdword	arg01, arg01
2586c     36 00 00 FF 
25870     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
25874     01 FA 65 A6 |  if_e	neg	result1, #1
25878     00 FA 0D F2 | 	cmp	result1, #0 wz
2587c     B8 FF 9F AD |  if_e	jmp	#LR__3570
25880                 | LR__3571
25880                 | LR__3572
25880     00 24 0E F2 | 	cmp	local04, #0 wz
25884     10 25 02 A6 |  if_e	mov	local04, local02
25888     12 15 02 F6 | 	mov	arg02, local04
2588c     06 14 06 F1 | 	add	arg02, #6
25890     0F 13 02 F6 | 	mov	arg01, local01
25894     0A 15 E2 FA | 	rdword	arg02, arg02
25898     06 12 06 F1 | 	add	arg01, #6
2589c     09 15 52 FC | 	wrword	arg02, arg01
258a0     0F 15 0A F6 | 	mov	arg02, local01 wz
258a4     00 FA 05 A6 |  if_e	mov	result1, #0
258a8     10 15 82 51 |  if_ne	sub	arg02, local02
258ac     04 14 46 50 |  if_ne	shr	arg02, #4
258b0     0A FB 01 56 |  if_ne	mov	result1, arg02
258b4     12 15 02 F6 | 	mov	arg02, local04
258b8     06 14 06 F1 | 	add	arg02, #6
258bc     0A FB 51 FC | 	wrword	result1, arg02
258c0     10 25 0A F2 | 	cmp	local04, local02 wz
258c4     A4 00 90 AD |  if_e	jmp	#LR__3575
258c8     12 13 02 F6 | 	mov	arg01, local04
258cc     09 27 EA FA | 	rdword	local05, arg01 wz
258d0     00 FA 05 A6 |  if_e	mov	result1, #0
258d4     04 26 66 50 |  if_ne	shl	local05, #4
258d8     13 13 02 51 |  if_ne	add	arg01, local05
258dc     09 FB 01 56 |  if_ne	mov	result1, arg01
258e0     0F FB 09 F2 | 	cmp	result1, local01 wz
258e4     84 00 90 5D |  if_ne	jmp	#LR__3574
258e8     12 29 E2 FA | 	rdword	local06, local04
258ec     0F 15 E2 FA | 	rdword	arg02, local01
258f0     0A 29 02 F1 | 	add	local06, arg02
258f4     12 29 52 FC | 	wrword	local06, local04
258f8     0F 29 02 F6 | 	mov	local06, local01
258fc     02 28 06 F1 | 	add	local06, #2
25900     14 01 58 FC | 	wrword	#0, local06
25904     0F 13 02 F6 | 	mov	arg01, local01
25908     09 27 EA FA | 	rdword	local05, arg01 wz
2590c     00 FA 05 A6 |  if_e	mov	result1, #0
25910     04 26 66 50 |  if_ne	shl	local05, #4
25914     13 13 02 51 |  if_ne	add	arg01, local05
25918     09 FB 01 56 |  if_ne	mov	result1, arg01
2591c     FD 28 02 F6 | 	mov	local06, result1
25920     11 29 52 F2 | 	cmps	local06, local03 wc
25924     20 00 90 3D |  if_ae	jmp	#LR__3573
25928     12 15 0A F6 | 	mov	arg02, local04 wz
2592c     00 FA 05 A6 |  if_e	mov	result1, #0
25930     10 15 82 51 |  if_ne	sub	arg02, local02
25934     04 14 46 50 |  if_ne	shr	arg02, #4
25938     0A FB 01 56 |  if_ne	mov	result1, arg02
2593c     14 15 02 F6 | 	mov	arg02, local06
25940     04 14 06 F1 | 	add	arg02, #4
25944     0A FB 51 FC | 	wrword	result1, arg02
25948                 | LR__3573
25948     0F 15 02 F6 | 	mov	arg02, local01
2594c     06 14 06 F1 | 	add	arg02, #6
25950     12 FD 01 F6 | 	mov	result2, local04
25954     0A 15 E2 FA | 	rdword	arg02, arg02
25958     06 FC 05 F1 | 	add	result2, #6
2595c     FE 14 52 FC | 	wrword	arg02, result2
25960     06 1E 06 F1 | 	add	local01, #6
25964     0F 01 58 FC | 	wrword	#0, local01
25968     12 1F 02 F6 | 	mov	local01, local04
2596c                 | LR__3574
2596c                 | LR__3575
2596c     0F 13 02 F6 | 	mov	arg01, local01
25970     09 27 EA FA | 	rdword	local05, arg01 wz
25974     00 FA 05 A6 |  if_e	mov	result1, #0
25978     04 26 66 50 |  if_ne	shl	local05, #4
2597c     13 13 02 51 |  if_ne	add	arg01, local05
25980     09 FB 01 56 |  if_ne	mov	result1, arg01
25984     FD 14 0A F6 | 	mov	arg02, result1 wz
25988     B8 00 90 AD |  if_e	jmp	#LR__3577
2598c     11 15 52 F2 | 	cmps	arg02, local03 wc
25990     B0 00 90 3D |  if_ae	jmp	#LR__3577
25994     0A 13 02 F6 | 	mov	arg01, arg02
25998     00 FA 05 F6 | 	mov	result1, #0
2599c     02 12 06 F1 | 	add	arg01, #2
259a0     09 13 E2 FA | 	rdword	arg01, arg01
259a4     36 00 00 FF 
259a8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
259ac     01 FA 65 A6 |  if_e	neg	result1, #1
259b0     00 FA 0D F2 | 	cmp	result1, #0 wz
259b4     8C 00 90 AD |  if_e	jmp	#LR__3577
259b8     0F 25 02 F6 | 	mov	local04, local01
259bc     12 29 E2 FA | 	rdword	local06, local04
259c0     0A 13 02 F6 | 	mov	arg01, arg02
259c4     09 1F E2 FA | 	rdword	local01, arg01
259c8     0F 29 02 F1 | 	add	local06, local01
259cc     12 29 52 FC | 	wrword	local06, local04
259d0     09 29 02 F6 | 	mov	local06, arg01
259d4     06 28 06 F1 | 	add	local06, #6
259d8     12 1F 02 F6 | 	mov	local01, local04
259dc     14 29 E2 FA | 	rdword	local06, local06
259e0     06 1E 06 F1 | 	add	local01, #6
259e4     0F 29 52 FC | 	wrword	local06, local01
259e8     09 29 02 F6 | 	mov	local06, arg01
259ec     02 28 06 F1 | 	add	local06, #2
259f0     14 55 59 FC | 	wrword	#170, local06
259f4     09 29 02 F6 | 	mov	local06, arg01
259f8     06 28 06 F1 | 	add	local06, #6
259fc     14 01 58 FC | 	wrword	#0, local06
25a00     09 27 EA FA | 	rdword	local05, arg01 wz
25a04     00 FA 05 A6 |  if_e	mov	result1, #0
25a08     04 26 66 50 |  if_ne	shl	local05, #4
25a0c     13 13 02 51 |  if_ne	add	arg01, local05
25a10     09 FB 01 56 |  if_ne	mov	result1, arg01
25a14     FD 28 0A F6 | 	mov	local06, result1 wz
25a18     28 00 90 AD |  if_e	jmp	#LR__3576
25a1c     11 29 52 F2 | 	cmps	local06, local03 wc
25a20     20 00 90 3D |  if_ae	jmp	#LR__3576
25a24     12 15 0A F6 | 	mov	arg02, local04 wz
25a28     00 FA 05 A6 |  if_e	mov	result1, #0
25a2c     10 15 82 51 |  if_ne	sub	arg02, local02
25a30     04 14 46 50 |  if_ne	shr	arg02, #4
25a34     0A FB 01 56 |  if_ne	mov	result1, arg02
25a38     14 25 02 F6 | 	mov	local04, local06
25a3c     04 24 06 F1 | 	add	local04, #4
25a40     12 FB 51 FC | 	wrword	result1, local04
25a44                 | LR__3576
25a44                 | LR__3577
25a44     14 FB 01 F6 | 	mov	result1, local06
25a48     A7 F0 03 F6 | 	mov	ptra, fp
25a4c     B2 00 A0 FD | 	call	#popregs_
25a50                 | __system___gc_dofree_ret
25a50     2D 00 64 FD | 	ret
25a54                 | 
25a54                 | __system___gc_docollect
25a54     05 4A 05 F6 | 	mov	COUNT_, #5
25a58     A8 00 A0 FD | 	call	#pushregs_
25a5c     B8 F9 BF FD | 	call	#__system___gc_ptrs
25a60     FE 1E 02 F6 | 	mov	local01, result2
25a64     FD 20 02 F6 | 	mov	local02, result1
25a68     10 13 02 F6 | 	mov	arg01, local02
25a6c     09 23 EA FA | 	rdword	local03, arg01 wz
25a70     00 FA 05 A6 |  if_e	mov	result1, #0
25a74     04 22 66 50 |  if_ne	shl	local03, #4
25a78     11 13 02 51 |  if_ne	add	arg01, local03
25a7c     09 FB 01 56 |  if_ne	mov	result1, arg01
25a80     FD 24 0A F6 | 	mov	local04, result1 wz
25a84     00 FA 05 F6 | 	mov	result1, #0
25a88     01 FA 61 FD | 	cogid	result1
25a8c     FD 26 02 F6 | 	mov	local05, result1
25a90     48 00 90 AD |  if_e	jmp	#LR__3582
25a94     97 22 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
25a98                 | LR__3580
25a98     0F 25 52 F2 | 	cmps	local04, local01 wc
25a9c     3C 00 90 3D |  if_ae	jmp	#LR__3582
25aa0     12 15 02 F6 | 	mov	arg02, local04
25aa4     02 14 06 F1 | 	add	arg02, #2
25aa8     0A 15 E2 FA | 	rdword	arg02, arg02
25aac     20 14 26 F5 | 	andn	arg02, #32
25ab0     12 13 02 F6 | 	mov	arg01, local04
25ab4     02 12 06 F1 | 	add	arg01, #2
25ab8     09 15 52 FC | 	wrword	arg02, arg01
25abc     12 13 02 F6 | 	mov	arg01, local04
25ac0     09 23 EA FA | 	rdword	local03, arg01 wz
25ac4     00 FA 05 A6 |  if_e	mov	result1, #0
25ac8     04 22 66 50 |  if_ne	shl	local03, #4
25acc     11 13 02 51 |  if_ne	add	arg01, local03
25ad0     09 FB 01 56 |  if_ne	mov	result1, arg01
25ad4     FD 24 0A F6 | 	mov	local04, result1 wz
25ad8     BC FF 9F 5D |  if_ne	jmp	#LR__3580
25adc                 | LR__3581
25adc                 | LR__3582
25adc     00 22 06 F6 | 	mov	local03, #0
25ae0     00 12 06 F6 | 	mov	arg01, #0
25ae4     74 BA BF FD | 	call	#__system____topofstack
25ae8     FD 14 02 F6 | 	mov	arg02, result1
25aec     11 13 02 F6 | 	mov	arg01, local03
25af0     90 00 B0 FD | 	call	#__system___gc_markhub
25af4     1C 01 B0 FD | 	call	#__system___gc_markcog
25af8     10 13 02 F6 | 	mov	arg01, local02
25afc     09 23 EA FA | 	rdword	local03, arg01 wz
25b00     00 FA 05 A6 |  if_e	mov	result1, #0
25b04     04 22 66 50 |  if_ne	shl	local03, #4
25b08     11 13 02 51 |  if_ne	add	arg01, local03
25b0c     09 FB 01 56 |  if_ne	mov	result1, arg01
25b10     FD 20 0A F6 | 	mov	local02, result1 wz
25b14     60 00 90 AD |  if_e	jmp	#LR__3586
25b18                 | LR__3583
25b18     10 25 02 F6 | 	mov	local04, local02
25b1c     12 13 02 F6 | 	mov	arg01, local04
25b20     09 23 EA FA | 	rdword	local03, arg01 wz
25b24     00 FA 05 A6 |  if_e	mov	result1, #0
25b28     04 22 66 50 |  if_ne	shl	local03, #4
25b2c     11 13 02 51 |  if_ne	add	arg01, local03
25b30     09 FB 01 56 |  if_ne	mov	result1, arg01
25b34     FD 20 02 F6 | 	mov	local02, result1
25b38     12 15 02 F6 | 	mov	arg02, local04
25b3c     02 14 06 F1 | 	add	arg02, #2
25b40     0A 15 E2 FA | 	rdword	arg02, arg02
25b44     20 14 CE F7 | 	test	arg02, #32 wz
25b48     10 14 CE A7 |  if_e	test	arg02, #16 wz
25b4c     1C 00 90 5D |  if_ne	jmp	#LR__3585
25b50     0A 15 42 F8 | 	getnib	arg02, arg02, #0
25b54     13 15 0A F2 | 	cmp	arg02, local05 wz
25b58     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
25b5c     0C 00 90 5D |  if_ne	jmp	#LR__3584
25b60     12 13 02 F6 | 	mov	arg01, local04
25b64     84 FC BF FD | 	call	#__system___gc_dofree
25b68     FD 20 02 F6 | 	mov	local02, result1
25b6c                 | LR__3584
25b6c                 | LR__3585
25b6c     00 20 0E F2 | 	cmp	local02, #0 wz
25b70     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
25b74     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3583
25b78                 | LR__3586
25b78     A7 F0 03 F6 | 	mov	ptra, fp
25b7c     B2 00 A0 FD | 	call	#popregs_
25b80                 | __system___gc_docollect_ret
25b80     2D 00 64 FD | 	ret
25b84                 | 
25b84                 | __system___gc_markhub
25b84     04 4A 05 F6 | 	mov	COUNT_, #4
25b88     A8 00 A0 FD | 	call	#pushregs_
25b8c     09 1F 02 F6 | 	mov	local01, arg01
25b90     0A 21 02 F6 | 	mov	local02, arg02
25b94     80 F8 BF FD | 	call	#__system___gc_ptrs
25b98     FD 22 02 F6 | 	mov	local03, result1
25b9c     FE 24 02 F6 | 	mov	local04, result2
25ba0                 | LR__3590
25ba0     10 1F 52 F2 | 	cmps	local01, local02 wc
25ba4     60 00 90 3D |  if_ae	jmp	#LR__3591
25ba8     0F 17 02 FB | 	rdlong	arg03, local01
25bac     04 1E 06 F1 | 	add	local01, #4
25bb0     12 15 02 F6 | 	mov	arg02, local04
25bb4     11 13 02 F6 | 	mov	arg01, local03
25bb8     8C FB BF FD | 	call	#__system___gc_isvalidptr
25bbc     FD 16 0A F6 | 	mov	arg03, result1 wz
25bc0     DC FF 9F AD |  if_e	jmp	#LR__3590
25bc4     0B 13 02 F6 | 	mov	arg01, arg03
25bc8     00 FA 05 F6 | 	mov	result1, #0
25bcc     02 12 06 F1 | 	add	arg01, #2
25bd0     09 13 E2 FA | 	rdword	arg01, arg01
25bd4     36 00 00 FF 
25bd8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
25bdc     01 FA 65 A6 |  if_e	neg	result1, #1
25be0     00 FA 0D F2 | 	cmp	result1, #0 wz
25be4     B8 FF 9F 5D |  if_ne	jmp	#LR__3590
25be8     0B FD 01 F6 | 	mov	result2, arg03
25bec     02 FC 05 F1 | 	add	result2, #2
25bf0     FE FC E1 FA | 	rdword	result2, result2
25bf4     0F FC 25 F5 | 	andn	result2, #15
25bf8     2E FC 45 F5 | 	or	result2, #46
25bfc     02 16 06 F1 | 	add	arg03, #2
25c00     0B FD 51 FC | 	wrword	result2, arg03
25c04     98 FF 9F FD | 	jmp	#LR__3590
25c08                 | LR__3591
25c08     A7 F0 03 F6 | 	mov	ptra, fp
25c0c     B2 00 A0 FD | 	call	#popregs_
25c10                 | __system___gc_markhub_ret
25c10     2D 00 64 FD | 	ret
25c14                 | 
25c14                 | __system___gc_markcog
25c14     04 4A 05 F6 | 	mov	COUNT_, #4
25c18     A8 00 A0 FD | 	call	#pushregs_
25c1c     F8 F7 BF FD | 	call	#__system___gc_ptrs
25c20     FD 1E 02 F6 | 	mov	local01, result1
25c24     FE 20 02 F6 | 	mov	local02, result2
25c28     EF 23 06 F6 | 	mov	local03, #495
25c2c                 | LR__3600
25c2c                 | 	'.live	local03
25c2c     00 22 96 F9 | 	alts	local03, #0
25c30     11 25 02 F6 | 	mov	local04, local03
25c34     0F 13 02 F6 | 	mov	arg01, local01
25c38     10 15 02 F6 | 	mov	arg02, local02
25c3c     12 17 02 F6 | 	mov	arg03, local04
25c40     04 FB BF FD | 	call	#__system___gc_isvalidptr
25c44     00 FA 0D F2 | 	cmp	result1, #0 wz
25c48     18 00 90 AD |  if_e	jmp	#LR__3601
25c4c     FD 24 02 F6 | 	mov	local04, result1
25c50     02 24 06 F1 | 	add	local04, #2
25c54     12 25 E2 FA | 	rdword	local04, local04
25c58     20 24 46 F5 | 	or	local04, #32
25c5c     02 FA 05 F1 | 	add	result1, #2
25c60     FD 24 52 FC | 	wrword	local04, result1
25c64                 | LR__3601
25c64     01 22 86 F1 | 	sub	local03, #1
25c68     00 22 56 F2 | 	cmps	local03, #0 wc
25c6c     BC FF 9F 3D |  if_ae	jmp	#LR__3600
25c70     A7 F0 03 F6 | 	mov	ptra, fp
25c74     B2 00 A0 FD | 	call	#popregs_
25c78                 | __system___gc_markcog_ret
25c78     2D 00 64 FD | 	ret
25c7c                 | 
25c7c                 | __system__opendir
25c7c     06 4A 05 F6 | 	mov	COUNT_, #6
25c80     A8 00 A0 FD | 	call	#pushregs_
25c84     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25c88     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
25c8c     09 15 02 F6 | 	mov	arg02, arg01
25c90     0F 13 02 F6 | 	mov	arg01, local01
25c94     00 16 06 F6 | 	mov	arg03, #0
25c98     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25c9c     7C C0 BF FD | 	call	#__system____getvfsforfile
25ca0     FD 20 0A F6 | 	mov	local02, result1 wz
25ca4     10 00 90 AD |  if_e	jmp	#LR__3610
25ca8     28 20 06 F1 | 	add	local02, #40
25cac     10 17 0A FB | 	rdlong	arg03, local02 wz
25cb0     28 20 86 F1 | 	sub	local02, #40
25cb4     14 00 90 5D |  if_ne	jmp	#LR__3611
25cb8                 | LR__3610
25cb8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25cbc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25cc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25cc4     00 FA 05 F6 | 	mov	result1, #0
25cc8     90 00 90 FD | 	jmp	#LR__3613
25ccc                 | LR__3611
25ccc     5C 12 06 F6 | 	mov	arg01, #92
25cd0     10 14 06 F6 | 	mov	arg02, #16
25cd4     C0 F9 BF FD | 	call	#__system___gc_doalloc
25cd8     FD 22 0A F6 | 	mov	local03, result1 wz
25cdc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25ce0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
25ce4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25ce8     00 FA 05 A6 |  if_e	mov	result1, #0
25cec     6C 00 90 AD |  if_e	jmp	#LR__3613
25cf0     28 20 06 F1 | 	add	local02, #40
25cf4     10 25 02 FB | 	rdlong	local04, local02
25cf8     12 27 02 F6 | 	mov	local05, local04
25cfc     28 20 86 F1 | 	sub	local02, #40
25d00     13 26 46 F7 | 	zerox	local05, #19
25d04     14 24 46 F0 | 	shr	local04, #20
25d08     02 24 66 F0 | 	shl	local04, #2
25d0c     ED 24 02 F1 | 	add	local04, __methods__
25d10     12 25 02 FB | 	rdlong	local04, local04
25d14     11 13 02 F6 | 	mov	arg01, local03
25d18     0F 15 02 F6 | 	mov	arg02, local01
25d1c     F2 28 02 F6 | 	mov	local06, objptr
25d20     13 E5 01 F6 | 	mov	objptr, local05
25d24     2D 24 62 FD | 	call	local04
25d28     14 E5 01 F6 | 	mov	objptr, local06
25d2c     FD 16 0A F6 | 	mov	arg03, result1 wz
25d30     20 00 90 AD |  if_e	jmp	#LR__3612
25d34     00 16 4E F2 | 	cmps	arg03, #0 wz
25d38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25d3c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
25d40     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25d44     11 13 02 F6 | 	mov	arg01, local03
25d48     58 FA BF FD | 	call	#__system___gc_free
25d4c     00 FA 05 F6 | 	mov	result1, #0
25d50     08 00 90 FD | 	jmp	#LR__3613
25d54                 | LR__3612
25d54     11 21 62 FC | 	wrlong	local02, local03
25d58     11 FB 01 F6 | 	mov	result1, local03
25d5c                 | LR__3613
25d5c     A7 F0 03 F6 | 	mov	ptra, fp
25d60     B2 00 A0 FD | 	call	#popregs_
25d64                 | __system__opendir_ret
25d64     2D 00 64 FD | 	ret
25d68                 | 
25d68                 | __system__closedir
25d68     04 4A 05 F6 | 	mov	COUNT_, #4
25d6c     A8 00 A0 FD | 	call	#pushregs_
25d70     09 1F 02 F6 | 	mov	local01, arg01
25d74     0F 13 02 FB | 	rdlong	arg01, local01
25d78     2C 12 06 F1 | 	add	arg01, #44
25d7c     09 21 02 FB | 	rdlong	local02, arg01
25d80     10 23 02 F6 | 	mov	local03, local02
25d84     13 22 46 F7 | 	zerox	local03, #19
25d88     14 20 46 F0 | 	shr	local02, #20
25d8c     02 20 66 F0 | 	shl	local02, #2
25d90     ED 20 02 F1 | 	add	local02, __methods__
25d94     10 21 02 FB | 	rdlong	local02, local02
25d98     0F 13 02 F6 | 	mov	arg01, local01
25d9c     F2 24 02 F6 | 	mov	local04, objptr
25da0     11 E5 01 F6 | 	mov	objptr, local03
25da4     2D 20 62 FD | 	call	local02
25da8     12 E5 01 F6 | 	mov	objptr, local04
25dac     FD 24 02 F6 | 	mov	local04, result1
25db0     0F 13 02 F6 | 	mov	arg01, local01
25db4     EC F9 BF FD | 	call	#__system___gc_free
25db8     00 24 4E F2 | 	cmps	local04, #0 wz
25dbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25dc0     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
25dc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25dc8     01 FA 65 56 |  if_ne	neg	result1, #1
25dcc     00 FA 05 A6 |  if_e	mov	result1, #0
25dd0     A7 F0 03 F6 | 	mov	ptra, fp
25dd4     B2 00 A0 FD | 	call	#popregs_
25dd8                 | __system__closedir_ret
25dd8     2D 00 64 FD | 	ret
25ddc                 | 
25ddc                 | __system__readdir
25ddc     04 4A 05 F6 | 	mov	COUNT_, #4
25de0     A8 00 A0 FD | 	call	#pushregs_
25de4     09 15 0A FB | 	rdlong	arg02, arg01 wz
25de8     08 12 06 F1 | 	add	arg01, #8
25dec     09 1F 02 F6 | 	mov	local01, arg01
25df0     08 12 86 F1 | 	sub	arg01, #8
25df4     00 FA 05 A6 |  if_e	mov	result1, #0
25df8     5C 00 90 AD |  if_e	jmp	#LR__3621
25dfc     30 14 06 F1 | 	add	arg02, #48
25e00     0A 21 02 FB | 	rdlong	local02, arg02
25e04     10 23 02 F6 | 	mov	local03, local02
25e08     13 22 46 F7 | 	zerox	local03, #19
25e0c     14 20 46 F0 | 	shr	local02, #20
25e10     02 20 66 F0 | 	shl	local02, #2
25e14     ED 20 02 F1 | 	add	local02, __methods__
25e18     10 21 02 FB | 	rdlong	local02, local02
25e1c     0F 15 02 F6 | 	mov	arg02, local01
25e20     F2 24 02 F6 | 	mov	local04, objptr
25e24     11 E5 01 F6 | 	mov	objptr, local03
25e28     2D 20 62 FD | 	call	local02
25e2c     12 E5 01 F6 | 	mov	objptr, local04
25e30     00 FA 4D F2 | 	cmps	result1, #0 wz
25e34     1C 00 90 AD |  if_e	jmp	#LR__3620
25e38     01 FA 55 F2 | 	cmps	result1, #1 wc
25e3c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
25e40     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25e44     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
25e48     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25e4c     00 FA 05 F6 | 	mov	result1, #0
25e50     04 00 90 FD | 	jmp	#LR__3621
25e54                 | LR__3620
25e54     0F FB 01 F6 | 	mov	result1, local01
25e58                 | LR__3621
25e58     A7 F0 03 F6 | 	mov	ptra, fp
25e5c     B2 00 A0 FD | 	call	#popregs_
25e60                 | __system__readdir_ret
25e60     2D 00 64 FD | 	ret
25e64                 | 
25e64                 | __system___openraw
25e64     15 4A 05 F6 | 	mov	COUNT_, #21
25e68     A8 00 A0 FD | 	call	#pushregs_
25e6c     09 1F 02 F6 | 	mov	local01, arg01
25e70     0A 21 02 F6 | 	mov	local02, arg02
25e74     0B 23 02 F6 | 	mov	local03, arg03
25e78     0C 25 02 F6 | 	mov	local04, arg04
25e7c     04 26 06 F6 | 	mov	local05, #4
25e80     0F 29 02 F6 | 	mov	local06, local01
25e84     00 2A 06 F6 | 	mov	local07, #0
25e88     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25e8c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25e90     16 13 02 F6 | 	mov	arg01, local08
25e94     10 15 02 F6 | 	mov	arg02, local02
25e98     00 16 06 F6 | 	mov	arg03, #0
25e9c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25ea0     78 BE BF FD | 	call	#__system____getvfsforfile
25ea4     FD 2E 0A F6 | 	mov	local09, result1 wz
25ea8     10 00 90 AD |  if_e	jmp	#LR__3630
25eac     20 2E 06 F1 | 	add	local09, #32
25eb0     17 FB 09 FB | 	rdlong	result1, local09 wz
25eb4     20 2E 86 F1 | 	sub	local09, #32
25eb8     14 00 90 5D |  if_ne	jmp	#LR__3631
25ebc                 | LR__3630
25ebc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25ec0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25ec4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25ec8     01 FA 65 F6 | 	neg	result1, #1
25ecc     8C 02 90 FD | 	jmp	#LR__3644
25ed0                 | LR__3631
25ed0     14 13 02 F6 | 	mov	arg01, local06
25ed4     00 14 06 F6 | 	mov	arg02, #0
25ed8     34 16 06 F6 | 	mov	arg03, #52
25edc     09 31 02 F6 | 	mov	local10, arg01
25ee0     98 00 A0 FD | 	call	#\builtin_bytefill_
25ee4     20 2E 06 F1 | 	add	local09, #32
25ee8     17 33 02 FB | 	rdlong	local11, local09
25eec     19 35 02 F6 | 	mov	local12, local11
25ef0     19 37 02 F6 | 	mov	local13, local11
25ef4     20 2E 86 F1 | 	sub	local09, #32
25ef8     1B 39 02 F6 | 	mov	local14, local13
25efc     13 34 46 F7 | 	zerox	local12, #19
25f00     14 38 46 F0 | 	shr	local14, #20
25f04     02 38 66 F0 | 	shl	local14, #2
25f08     ED 38 02 F1 | 	add	local14, __methods__
25f0c     1C 39 02 FB | 	rdlong	local14, local14
25f10     14 3B 02 F6 | 	mov	local15, local06
25f14     16 3D 02 F6 | 	mov	local16, local08
25f18     11 3F 02 F6 | 	mov	local17, local03
25f1c     1D 13 02 F6 | 	mov	arg01, local15
25f20     1E 15 02 F6 | 	mov	arg02, local16
25f24     1F 17 02 F6 | 	mov	arg03, local17
25f28     F2 40 02 F6 | 	mov	local18, objptr
25f2c     1A E5 01 F6 | 	mov	objptr, local12
25f30     2D 38 62 FD | 	call	local14
25f34     20 E5 01 F6 | 	mov	objptr, local18
25f38     FD 42 0A F6 | 	mov	local19, result1 wz
25f3c     04 22 CE 57 |  if_ne	test	local03, #4 wz
25f40     58 00 90 AD |  if_e	jmp	#LR__3632
25f44     24 2E 06 F1 | 	add	local09, #36
25f48     17 33 02 FB | 	rdlong	local11, local09
25f4c     19 35 02 F6 | 	mov	local12, local11
25f50     19 37 02 F6 | 	mov	local13, local11
25f54     24 2E 86 F1 | 	sub	local09, #36
25f58     1B 39 02 F6 | 	mov	local14, local13
25f5c     13 34 46 F7 | 	zerox	local12, #19
25f60     14 38 46 F0 | 	shr	local14, #20
25f64     02 38 66 F0 | 	shl	local14, #2
25f68     ED 38 02 F1 | 	add	local14, __methods__
25f6c     1C 39 02 FB | 	rdlong	local14, local14
25f70     14 3B 02 F6 | 	mov	local15, local06
25f74     16 3D 02 F6 | 	mov	local16, local08
25f78     12 3F 02 F6 | 	mov	local17, local04
25f7c     1D 13 02 F6 | 	mov	arg01, local15
25f80     1E 15 02 F6 | 	mov	arg02, local16
25f84     1F 17 02 F6 | 	mov	arg03, local17
25f88     F2 40 02 F6 | 	mov	local18, objptr
25f8c     1A E5 01 F6 | 	mov	objptr, local12
25f90     2D 38 62 FD | 	call	local14
25f94     20 E5 01 F6 | 	mov	objptr, local18
25f98     FD 42 02 F6 | 	mov	local19, result1
25f9c                 | LR__3632
25f9c     00 42 0E F2 | 	cmp	local19, #0 wz
25fa0     8C 01 90 5D |  if_ne	jmp	#LR__3642
25fa4     11 45 02 F6 | 	mov	local20, local03
25fa8     03 44 0E F5 | 	and	local20, #3 wz
25fac     02 26 46 55 |  if_ne	or	local05, #2
25fb0     01 44 0E F2 | 	cmp	local20, #1 wz
25fb4     01 26 46 55 |  if_ne	or	local05, #1
25fb8     20 22 CE F7 | 	test	local03, #32 wz
25fbc     C0 26 46 55 |  if_ne	or	local05, #192
25fc0     08 28 06 F1 | 	add	local06, #8
25fc4     14 27 62 FC | 	wrlong	local05, local06
25fc8     0C 28 06 F1 | 	add	local06, #12
25fcc     14 47 0A FB | 	rdlong	local21, local06 wz
25fd0     14 28 86 F1 | 	sub	local06, #20
25fd4     18 00 90 5D |  if_ne	jmp	#LR__3633
25fd8     04 2E 06 F1 | 	add	local09, #4
25fdc     17 47 02 FB | 	rdlong	local21, local09
25fe0     04 2E 86 F1 | 	sub	local09, #4
25fe4     14 28 06 F1 | 	add	local06, #20
25fe8     14 47 62 FC | 	wrlong	local21, local06
25fec     14 28 86 F1 | 	sub	local06, #20
25ff0                 | LR__3633
25ff0     18 28 06 F1 | 	add	local06, #24
25ff4     14 47 0A FB | 	rdlong	local21, local06 wz
25ff8     18 28 86 F1 | 	sub	local06, #24
25ffc     18 00 90 5D |  if_ne	jmp	#LR__3634
26000     08 2E 06 F1 | 	add	local09, #8
26004     17 47 02 FB | 	rdlong	local21, local09
26008     08 2E 86 F1 | 	sub	local09, #8
2600c     18 28 06 F1 | 	add	local06, #24
26010     14 47 62 FC | 	wrlong	local21, local06
26014     18 28 86 F1 | 	sub	local06, #24
26018                 | LR__3634
26018     24 28 06 F1 | 	add	local06, #36
2601c     14 47 0A FB | 	rdlong	local21, local06 wz
26020     24 28 86 F1 | 	sub	local06, #36
26024     17 47 02 AB |  if_e	rdlong	local21, local09
26028     24 28 06 A1 |  if_e	add	local06, #36
2602c     14 47 62 AC |  if_e	wrlong	local21, local06
26030     24 28 86 A1 |  if_e	sub	local06, #36
26034     28 28 06 F1 | 	add	local06, #40
26038     14 47 0A FB | 	rdlong	local21, local06 wz
2603c     28 28 86 F1 | 	sub	local06, #40
26040     18 00 90 5D |  if_ne	jmp	#LR__3635
26044     10 2E 06 F1 | 	add	local09, #16
26048     17 47 02 FB | 	rdlong	local21, local09
2604c     10 2E 86 F1 | 	sub	local09, #16
26050     28 28 06 F1 | 	add	local06, #40
26054     14 47 62 FC | 	wrlong	local21, local06
26058     28 28 86 F1 | 	sub	local06, #40
2605c                 | LR__3635
2605c     30 28 06 F1 | 	add	local06, #48
26060     14 47 0A FB | 	rdlong	local21, local06 wz
26064     30 28 86 F1 | 	sub	local06, #48
26068     18 00 90 5D |  if_ne	jmp	#LR__3636
2606c     0C 2E 06 F1 | 	add	local09, #12
26070     17 47 02 FB | 	rdlong	local21, local09
26074     0C 2E 86 F1 | 	sub	local09, #12
26078     30 28 06 F1 | 	add	local06, #48
2607c     14 47 62 FC | 	wrlong	local21, local06
26080     30 28 86 F1 | 	sub	local06, #48
26084                 | LR__3636
26084     1C 28 06 F1 | 	add	local06, #28
26088     14 47 0A FB | 	rdlong	local21, local06 wz
2608c     1C 28 86 F1 | 	sub	local06, #28
26090     1C 00 90 5D |  if_ne	jmp	#LR__3637
26094     01 2A 06 F6 | 	mov	local07, #1
26098     F2 12 02 F6 | 	mov	arg01, objptr
2609c     00 E0 04 FF 
260a0     00 12 46 F5 | 	or	arg01, ##163577856
260a4     1C 28 06 F1 | 	add	local06, #28
260a8     14 13 62 FC | 	wrlong	arg01, local06
260ac     1C 28 86 F1 | 	sub	local06, #28
260b0                 | LR__3637
260b0     20 28 06 F1 | 	add	local06, #32
260b4     14 47 0A FB | 	rdlong	local21, local06 wz
260b8     20 28 86 F1 | 	sub	local06, #32
260bc     1C 00 90 5D |  if_ne	jmp	#LR__3638
260c0     01 2A 06 F6 | 	mov	local07, #1
260c4     F2 12 02 F6 | 	mov	arg01, objptr
260c8     00 E8 04 FF 
260cc     00 12 46 F5 | 	or	arg01, ##164626432
260d0     20 28 06 F1 | 	add	local06, #32
260d4     14 13 62 FC | 	wrlong	arg01, local06
260d8     20 28 86 F1 | 	sub	local06, #32
260dc                 | LR__3638
260dc     2C 28 06 F1 | 	add	local06, #44
260e0     14 47 0A FB | 	rdlong	local21, local06 wz
260e4     2C 28 86 F1 | 	sub	local06, #44
260e8     44 00 90 5D |  if_ne	jmp	#LR__3641
260ec     14 2E 06 F1 | 	add	local09, #20
260f0     17 47 0A FB | 	rdlong	local21, local09 wz
260f4     14 2E 86 F1 | 	sub	local09, #20
260f8     18 00 90 AD |  if_e	jmp	#LR__3639
260fc     14 2E 06 F1 | 	add	local09, #20
26100     17 47 02 FB | 	rdlong	local21, local09
26104     2C 28 06 F1 | 	add	local06, #44
26108     14 47 62 FC | 	wrlong	local21, local06
2610c     2C 28 86 F1 | 	sub	local06, #44
26110     1C 00 90 FD | 	jmp	#LR__3640
26114                 | LR__3639
26114     01 2A 06 F6 | 	mov	local07, #1
26118     F2 12 02 F6 | 	mov	arg01, objptr
2611c     00 F0 04 FF 
26120     00 12 46 F5 | 	or	arg01, ##165675008
26124     2C 28 06 F1 | 	add	local06, #44
26128     14 13 62 FC | 	wrlong	arg01, local06
2612c     2C 28 86 F1 | 	sub	local06, #44
26130                 | LR__3640
26130                 | LR__3641
26130                 | LR__3642
26130     00 2A 0E F2 | 	cmp	local07, #0 wz
26134     14 13 02 56 |  if_ne	mov	arg01, local06
26138     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2613c     00 42 0E F2 | 	cmp	local19, #0 wz
26140     00 12 06 A6 |  if_e	mov	arg01, #0
26144     10 00 90 5D |  if_ne	jmp	#LR__3643
26148     00 12 4E F2 | 	cmps	arg01, #0 wz
2614c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26150     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26154     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26158                 | LR__3643
26158     21 FB 01 F6 | 	mov	result1, local19
2615c                 | LR__3644
2615c     A7 F0 03 F6 | 	mov	ptra, fp
26160     B2 00 A0 FD | 	call	#popregs_
26164                 | __system___openraw_ret
26164     2D 00 64 FD | 	ret
26168                 | 
26168                 | __system___closeraw
26168     05 4A 05 F6 | 	mov	COUNT_, #5
2616c     A8 00 A0 FD | 	call	#pushregs_
26170     09 1F 02 F6 | 	mov	local01, arg01
26174     00 20 06 F6 | 	mov	local02, #0
26178     08 1E 06 F1 | 	add	local01, #8
2617c     0F FB 09 FB | 	rdlong	result1, local01 wz
26180     08 1E 86 F1 | 	sub	local01, #8
26184     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26188     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2618c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26190     01 FA 65 A6 |  if_e	neg	result1, #1
26194     A8 00 90 AD |  if_e	jmp	#LR__3652
26198     2C 1E 06 F1 | 	add	local01, #44
2619c     0F FB 09 FB | 	rdlong	result1, local01 wz
261a0     2C 1E 86 F1 | 	sub	local01, #44
261a4     38 00 90 AD |  if_e	jmp	#LR__3650
261a8     2C 1E 06 F1 | 	add	local01, #44
261ac     0F 23 02 FB | 	rdlong	local03, local01
261b0     11 25 02 F6 | 	mov	local04, local03
261b4     2C 1E 86 F1 | 	sub	local01, #44
261b8     13 24 46 F7 | 	zerox	local04, #19
261bc     14 22 46 F0 | 	shr	local03, #20
261c0     02 22 66 F0 | 	shl	local03, #2
261c4     ED 22 02 F1 | 	add	local03, __methods__
261c8     11 23 02 FB | 	rdlong	local03, local03
261cc     0F 13 02 F6 | 	mov	arg01, local01
261d0     F2 26 02 F6 | 	mov	local05, objptr
261d4     12 E5 01 F6 | 	mov	objptr, local04
261d8     2D 22 62 FD | 	call	local03
261dc     13 E5 01 F6 | 	mov	objptr, local05
261e0                 | LR__3650
261e0     24 1E 06 F1 | 	add	local01, #36
261e4     0F 27 0A FB | 	rdlong	local05, local01 wz
261e8     24 1E 86 F1 | 	sub	local01, #36
261ec     3C 00 90 AD |  if_e	jmp	#LR__3651
261f0     24 1E 06 F1 | 	add	local01, #36
261f4     0F 23 02 FB | 	rdlong	local03, local01
261f8     11 25 02 F6 | 	mov	local04, local03
261fc     24 1E 86 F1 | 	sub	local01, #36
26200     13 24 46 F7 | 	zerox	local04, #19
26204     14 22 46 F0 | 	shr	local03, #20
26208     02 22 66 F0 | 	shl	local03, #2
2620c     ED 22 02 F1 | 	add	local03, __methods__
26210     11 23 02 FB | 	rdlong	local03, local03
26214     0F 13 02 F6 | 	mov	arg01, local01
26218     F2 26 02 F6 | 	mov	local05, objptr
2621c     12 E5 01 F6 | 	mov	objptr, local04
26220     2D 22 62 FD | 	call	local03
26224     13 E5 01 F6 | 	mov	objptr, local05
26228     FD 20 02 F6 | 	mov	local02, result1
2622c                 | LR__3651
2622c     0F 13 02 F6 | 	mov	arg01, local01
26230     00 14 06 F6 | 	mov	arg02, #0
26234     34 16 06 F6 | 	mov	arg03, #52
26238     98 00 A0 FD | 	call	#\builtin_bytefill_
2623c     10 FB 01 F6 | 	mov	result1, local02
26240                 | LR__3652
26240     A7 F0 03 F6 | 	mov	ptra, fp
26244     B2 00 A0 FD | 	call	#popregs_
26248                 | __system___closeraw_ret
26248     2D 00 64 FD | 	ret
2624c                 | 
2624c                 | __system___vfs_open_sdcardx
2624c     0B 4A 05 F6 | 	mov	COUNT_, #11
26250     A8 00 A0 FD | 	call	#pushregs_
26254     09 23 02 F6 | 	mov	local03, arg01
26258     0A 25 02 F6 | 	mov	local04, arg02
2625c     0B 27 02 F6 | 	mov	local05, arg03
26260     0C 29 02 F6 | 	mov	local06, arg04
26264     01 00 00 FF 
26268     24 12 06 F6 | 	mov	arg01, ##548
2626c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
26270     FD 2A 02 F6 | 	mov	local07, result1
26274     01 00 00 FF 
26278     34 12 06 F6 | 	mov	arg01, ##564
2627c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
26280     FD 2C 02 F6 | 	mov	local08, result1
26284     11 19 02 F6 | 	mov	arg04, local03
26288     1F 18 C6 F0 | 	sar	arg04, #31
2628c     11 17 02 F6 | 	mov	arg03, local03
26290     01 12 06 F6 | 	mov	arg01, #1
26294     00 14 06 F6 | 	mov	arg02, #0
26298     EC DB BF FD | 	call	#__system___int64_shl
2629c     FD 1E 02 F6 | 	mov	local01, result1
262a0     FE 2E 02 F6 | 	mov	local09, result2
262a4     12 19 02 F6 | 	mov	arg04, local04
262a8     1F 18 C6 F0 | 	sar	arg04, #31
262ac     12 17 02 F6 | 	mov	arg03, local04
262b0     01 12 06 F6 | 	mov	arg01, #1
262b4     00 14 06 F6 | 	mov	arg02, #0
262b8     CC DB BF FD | 	call	#__system___int64_shl
262bc     FD 1E 42 F5 | 	or	local01, result1
262c0     FE 2E 42 F5 | 	or	local09, result2
262c4     13 19 02 F6 | 	mov	arg04, local05
262c8     1F 18 C6 F0 | 	sar	arg04, #31
262cc     13 17 02 F6 | 	mov	arg03, local05
262d0     01 12 06 F6 | 	mov	arg01, #1
262d4     00 14 06 F6 | 	mov	arg02, #0
262d8     AC DB BF FD | 	call	#__system___int64_shl
262dc     FD 1E 42 F5 | 	or	local01, result1
262e0     FE 2E 42 F5 | 	or	local09, result2
262e4     14 19 02 F6 | 	mov	arg04, local06
262e8     1F 18 C6 F0 | 	sar	arg04, #31
262ec     14 17 02 F6 | 	mov	arg03, local06
262f0     01 12 06 F6 | 	mov	arg01, #1
262f4     00 14 06 F6 | 	mov	arg02, #0
262f8     8C DB BF FD | 	call	#__system___int64_shl
262fc     17 15 02 F6 | 	mov	arg02, local09
26300     FD 1E 42 F5 | 	or	local01, result1
26304     0A FD 41 F5 | 	or	result2, arg02
26308     FE 20 02 F6 | 	mov	local02, result2
2630c     0F 13 02 F6 | 	mov	arg01, local01
26310     10 15 02 F6 | 	mov	arg02, local02
26314     A8 DB BF FD | 	call	#__system___usepins
26318     00 FA 0D F2 | 	cmp	result1, #0 wz
2631c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26320     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
26324     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26328     00 FA 05 A6 |  if_e	mov	result1, #0
2632c     B4 00 90 AD |  if_e	jmp	#LR__3662
26330     0F 31 02 F6 | 	mov	local10, local01
26334     10 2F 02 F6 | 	mov	local09, local02
26338     01 00 00 FF 
2633c     08 2A 06 F1 | 	add	local07, ##520
26340     15 31 62 FC | 	wrlong	local10, local07
26344     04 2A 06 F1 | 	add	local07, #4
26348     15 2F 62 FC | 	wrlong	local09, local07
2634c     01 00 00 FF 
26350     0C 2A 86 F1 | 	sub	local07, ##524
26354     14 1B 02 F6 | 	mov	arg05, local06
26358     00 12 06 F6 | 	mov	arg01, #0
2635c     11 15 02 F6 | 	mov	arg02, local03
26360     12 17 02 F6 | 	mov	arg03, local04
26364     13 19 02 F6 | 	mov	arg04, local05
26368     F2 30 02 F6 | 	mov	local10, objptr
2636c     15 E5 01 F6 | 	mov	objptr, local07
26370     40 2A B0 FD | 	call	#_fatfs_cc_disk_setpins
26374     18 E5 01 F6 | 	mov	objptr, local10
26378     FD 32 0A F6 | 	mov	local11, result1 wz
2637c     24 00 90 5D |  if_ne	jmp	#LR__3660
26380     88 01 00 FF 
26384     FE 14 06 F6 | 	mov	arg02, ##@LR__5087
26388     16 13 02 F6 | 	mov	arg01, local08
2638c     00 16 06 F6 | 	mov	arg03, #0
26390     F2 32 02 F6 | 	mov	local11, objptr
26394     15 E5 01 F6 | 	mov	objptr, local07
26398     70 61 B0 FD | 	call	#_fatfs_cc_f_mount
2639c     19 E5 01 F6 | 	mov	objptr, local11
263a0     FD 32 02 F6 | 	mov	local11, result1
263a4                 | LR__3660
263a4     00 32 0E F2 | 	cmp	local11, #0 wz
263a8     24 00 90 AD |  if_e	jmp	#LR__3661
263ac     0F 13 02 F6 | 	mov	arg01, local01
263b0     10 15 02 F6 | 	mov	arg02, local02
263b4     5C DB BF FD | 	call	#__system___freepins
263b8     19 13 6A F6 | 	neg	arg01, local11 wz
263bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
263c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
263c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
263c8     00 FA 05 F6 | 	mov	result1, #0
263cc     14 00 90 FD | 	jmp	#LR__3662
263d0                 | LR__3661
263d0     15 13 02 F6 | 	mov	arg01, local07
263d4     F2 32 02 F6 | 	mov	local11, objptr
263d8     15 E5 01 F6 | 	mov	objptr, local07
263dc     0C 9E B0 FD | 	call	#_fatfs_cc_get_vfs
263e0     19 E5 01 F6 | 	mov	objptr, local11
263e4                 | LR__3662
263e4     A7 F0 03 F6 | 	mov	ptra, fp
263e8     B2 00 A0 FD | 	call	#popregs_
263ec                 | __system___vfs_open_sdcardx_ret
263ec     2D 00 64 FD | 	ret
263f0                 | 
263f0                 | __system____default_getc
263f0     03 4A 05 F6 | 	mov	COUNT_, #3
263f4     A8 00 A0 FD | 	call	#pushregs_
263f8     09 1F 02 F6 | 	mov	local01, arg01
263fc     0F 21 02 FB | 	rdlong	local02, local01
26400     08 20 06 F1 | 	add	local02, #8
26404     10 23 02 FB | 	rdlong	local03, local02
26408     02 22 CE F7 | 	test	local03, #2 wz
2640c     0F 13 02 56 |  if_ne	mov	arg01, local01
26410     00 01 B0 5D |  if_ne	call	#__system____default_flush
26414     10 23 02 FB | 	rdlong	local03, local02
26418     01 22 46 F5 | 	or	local03, #1
2641c     10 23 62 FC | 	wrlong	local03, local02
26420     08 20 86 F1 | 	sub	local02, #8
26424     10 23 0A FB | 	rdlong	local03, local02 wz
26428     0C 00 90 5D |  if_ne	jmp	#LR__3670
2642c     0F 13 02 F6 | 	mov	arg01, local01
26430     28 19 B0 FD | 	call	#__system____default_filbuf
26434     FD 22 02 F6 | 	mov	local03, result1
26438                 | LR__3670
26438     01 22 56 F2 | 	cmps	local03, #1 wc
2643c     01 FA 65 C6 |  if_b	neg	result1, #1
26440     1C 00 90 CD |  if_b	jmp	#LR__3671
26444     01 22 86 F1 | 	sub	local03, #1
26448     10 23 62 FC | 	wrlong	local03, local02
2644c     04 20 06 F1 | 	add	local02, #4
26450     10 23 02 FB | 	rdlong	local03, local02
26454     11 FB C1 FA | 	rdbyte	result1, local03
26458     01 22 06 F1 | 	add	local03, #1
2645c     10 23 62 FC | 	wrlong	local03, local02
26460                 | LR__3671
26460     A7 F0 03 F6 | 	mov	ptra, fp
26464     B2 00 A0 FD | 	call	#popregs_
26468                 | __system____default_getc_ret
26468     2D 00 64 FD | 	ret
2646c                 | 
2646c                 | __system____default_putc
2646c     06 4A 05 F6 | 	mov	COUNT_, #6
26470     A8 00 A0 FD | 	call	#pushregs_
26474     09 1F 02 F6 | 	mov	local01, arg01
26478     0A 21 02 F6 | 	mov	local02, arg02
2647c     10 23 02 FB | 	rdlong	local03, local02
26480     08 22 06 F1 | 	add	local03, #8
26484     11 FB 01 FB | 	rdlong	result1, local03
26488     01 FA CD F7 | 	test	result1, #1 wz
2648c     10 13 02 56 |  if_ne	mov	arg01, local02
26490     80 00 B0 5D |  if_ne	call	#__system____default_flush
26494     11 25 02 FB | 	rdlong	local04, local03
26498     02 24 46 F5 | 	or	local04, #2
2649c     11 25 62 FC | 	wrlong	local04, local03
264a0     08 22 86 F1 | 	sub	local03, #8
264a4     11 27 02 FB | 	rdlong	local05, local03
264a8     10 22 06 F1 | 	add	local03, #16
264ac     11 15 02 FB | 	rdlong	arg02, local03
264b0     10 22 86 F1 | 	sub	local03, #16
264b4     13 FB 01 F6 | 	mov	result1, local05
264b8     0A FB 01 F1 | 	add	result1, arg02
264bc     FD 1E 42 FC | 	wrbyte	local01, result1
264c0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
264c4     01 26 06 F1 | 	add	local05, #1
264c8     11 27 62 FC | 	wrlong	local05, local03
264cc     06 20 06 F1 | 	add	local02, #6
264d0     10 29 EA FA | 	rdword	local06, local02 wz
264d4     06 20 86 F1 | 	sub	local02, #6
264d8     0C 22 06 51 |  if_ne	add	local03, #12
264dc     11 25 02 5B |  if_ne	rdlong	local04, local03
264e0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
264e4     0C 00 90 AD |  if_e	jmp	#LR__3680
264e8     0A 1E 0E F2 | 	cmp	local01, #10 wz
264ec     01 28 0E A2 |  if_e	cmp	local06, #1 wz
264f0     10 00 90 5D |  if_ne	jmp	#LR__3681
264f4                 | LR__3680
264f4     10 13 02 F6 | 	mov	arg01, local02
264f8     18 00 B0 FD | 	call	#__system____default_flush
264fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26500     01 1E 66 56 |  if_ne	neg	local01, #1
26504                 | LR__3681
26504     0F FB 01 F6 | 	mov	result1, local01
26508     A7 F0 03 F6 | 	mov	ptra, fp
2650c     B2 00 A0 FD | 	call	#popregs_
26510                 | __system____default_putc_ret
26510     2D 00 64 FD | 	ret
26514                 | 
26514                 | __system____default_flush
26514     06 4A 05 F6 | 	mov	COUNT_, #6
26518     A8 00 A0 FD | 	call	#pushregs_
2651c     09 1F 02 F6 | 	mov	local01, arg01
26520     0F 21 02 FB | 	rdlong	local02, local01
26524     10 23 02 FB | 	rdlong	local03, local02
26528     08 20 06 F1 | 	add	local02, #8
2652c     10 FB 01 FB | 	rdlong	result1, local02
26530     08 20 86 F1 | 	sub	local02, #8
26534     02 FA CD F7 | 	test	result1, #2 wz
26538     D0 00 90 AD |  if_e	jmp	#LR__3692
2653c     01 22 56 F2 | 	cmps	local03, #1 wc
26540     20 01 90 CD |  if_b	jmp	#LR__3694
26544     08 1E 06 F1 | 	add	local01, #8
26548     0F FB 01 FB | 	rdlong	result1, local01
2654c     08 1E 86 F1 | 	sub	local01, #8
26550     40 FA CD F7 | 	test	result1, #64 wz
26554     68 00 90 AD |  if_e	jmp	#LR__3691
26558     08 1E 06 F1 | 	add	local01, #8
2655c     0F 17 02 FB | 	rdlong	arg03, local01
26560     08 1E 86 F1 | 	sub	local01, #8
26564     80 16 CE F7 | 	test	arg03, #128 wz
26568     54 00 90 AD |  if_e	jmp	#LR__3690
2656c     30 1E 06 F1 | 	add	local01, #48
26570     0F 25 02 FB | 	rdlong	local04, local01
26574     12 27 02 F6 | 	mov	local05, local04
26578     30 1E 86 F1 | 	sub	local01, #48
2657c     13 26 46 F7 | 	zerox	local05, #19
26580     14 24 46 F0 | 	shr	local04, #20
26584     02 24 66 F0 | 	shl	local04, #2
26588     ED 24 02 F1 | 	add	local04, __methods__
2658c     12 25 02 FB | 	rdlong	local04, local04
26590     0F 13 02 F6 | 	mov	arg01, local01
26594     00 14 06 F6 | 	mov	arg02, #0
26598     02 16 06 F6 | 	mov	arg03, #2
2659c     F2 28 02 F6 | 	mov	local06, objptr
265a0     13 E5 01 F6 | 	mov	objptr, local05
265a4     2D 24 62 FD | 	call	local04
265a8     14 E5 01 F6 | 	mov	objptr, local06
265ac     08 1E 06 F1 | 	add	local01, #8
265b0     0F 29 02 FB | 	rdlong	local06, local01
265b4     80 28 26 F5 | 	andn	local06, #128
265b8     0F 29 62 FC | 	wrlong	local06, local01
265bc     08 1E 86 F1 | 	sub	local01, #8
265c0                 | LR__3690
265c0                 | LR__3691
265c0     18 1E 06 F1 | 	add	local01, #24
265c4     0F 25 02 FB | 	rdlong	local04, local01
265c8     12 27 02 F6 | 	mov	local05, local04
265cc     18 1E 86 F1 | 	sub	local01, #24
265d0     13 26 46 F7 | 	zerox	local05, #19
265d4     14 24 46 F0 | 	shr	local04, #20
265d8     02 24 66 F0 | 	shl	local04, #2
265dc     ED 24 02 F1 | 	add	local04, __methods__
265e0     12 25 02 FB | 	rdlong	local04, local04
265e4     10 20 06 F1 | 	add	local02, #16
265e8     10 15 02 FB | 	rdlong	arg02, local02
265ec     10 20 86 F1 | 	sub	local02, #16
265f0     0F 13 02 F6 | 	mov	arg01, local01
265f4     11 17 02 F6 | 	mov	arg03, local03
265f8     F2 28 02 F6 | 	mov	local06, objptr
265fc     13 E5 01 F6 | 	mov	objptr, local05
26600     2D 24 62 FD | 	call	local04
26604     14 E5 01 F6 | 	mov	objptr, local06
26608     58 00 90 FD | 	jmp	#LR__3694
2660c                 | LR__3692
2660c     08 20 06 F1 | 	add	local02, #8
26610     10 29 02 FB | 	rdlong	local06, local02
26614     08 20 86 F1 | 	sub	local02, #8
26618     01 28 CE F7 | 	test	local06, #1 wz
2661c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
26620     40 00 90 AD |  if_e	jmp	#LR__3693
26624     30 1E 06 F1 | 	add	local01, #48
26628     0F 25 02 FB | 	rdlong	local04, local01
2662c     12 27 02 F6 | 	mov	local05, local04
26630     30 1E 86 F1 | 	sub	local01, #48
26634     13 26 46 F7 | 	zerox	local05, #19
26638     14 24 46 F0 | 	shr	local04, #20
2663c     02 24 66 F0 | 	shl	local04, #2
26640     ED 24 02 F1 | 	add	local04, __methods__
26644     12 25 02 FB | 	rdlong	local04, local04
26648     0F 13 02 F6 | 	mov	arg01, local01
2664c     11 15 62 F6 | 	neg	arg02, local03
26650     01 16 06 F6 | 	mov	arg03, #1
26654     F2 28 02 F6 | 	mov	local06, objptr
26658     13 E5 01 F6 | 	mov	objptr, local05
2665c     2D 24 62 FD | 	call	local04
26660     14 E5 01 F6 | 	mov	objptr, local06
26664                 | LR__3693
26664                 | LR__3694
26664     10 01 68 FC | 	wrlong	#0, local02
26668     04 20 06 F1 | 	add	local02, #4
2666c     10 01 68 FC | 	wrlong	#0, local02
26670     04 20 06 F1 | 	add	local02, #4
26674     10 01 68 FC | 	wrlong	#0, local02
26678     00 FA 05 F6 | 	mov	result1, #0
2667c     A7 F0 03 F6 | 	mov	ptra, fp
26680     B2 00 A0 FD | 	call	#popregs_
26684                 | __system____default_flush_ret
26684     2D 00 64 FD | 	ret
26688                 | 
26688                 | __system____default_buffer_init
26688     02 4A 05 F6 | 	mov	COUNT_, #2
2668c     A8 00 A0 FD | 	call	#pushregs_
26690     09 1F 02 F6 | 	mov	local01, arg01
26694     0F 21 02 FB | 	rdlong	local02, local01
26698     0F 13 02 F6 | 	mov	arg01, local01
2669c     34 03 B0 FD | 	call	#__system___isatty
266a0     00 FA 0D F2 | 	cmp	result1, #0 wz
266a4     06 1E 06 51 |  if_ne	add	local01, #6
266a8     0F 0B 58 5C |  if_ne	wrword	#5, local01
266ac     06 1E 06 A1 |  if_e	add	local01, #6
266b0     0F 0D 58 AC |  if_e	wrword	#6, local01
266b4     14 20 06 F1 | 	add	local02, #20
266b8     10 1F 02 F6 | 	mov	local01, local02
266bc     04 20 86 F1 | 	sub	local02, #4
266c0     10 1F 62 FC | 	wrlong	local01, local02
266c4     04 20 86 F1 | 	sub	local02, #4
266c8     02 00 80 FF 
266cc     10 01 68 FC | 	wrlong	##1024, local02
266d0     00 FA 05 F6 | 	mov	result1, #0
266d4     A7 F0 03 F6 | 	mov	ptra, fp
266d8     B2 00 A0 FD | 	call	#popregs_
266dc                 | __system____default_buffer_init_ret
266dc     2D 00 64 FD | 	ret
266e0                 | 
266e0                 | __system__stat
266e0     04 4A 05 F6 | 	mov	COUNT_, #4
266e4     A8 00 A0 FD | 	call	#pushregs_
266e8     0A 1F 02 F6 | 	mov	local01, arg02
266ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
266f0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
266f4     09 15 02 F6 | 	mov	arg02, arg01
266f8     10 13 02 F6 | 	mov	arg01, local02
266fc     00 16 06 F6 | 	mov	arg03, #0
26700     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26704     14 B6 BF FD | 	call	#__system____getvfsforfile
26708     FD 22 0A F6 | 	mov	local03, result1 wz
2670c     10 00 90 AD |  if_e	jmp	#LR__3700
26710     34 22 06 F1 | 	add	local03, #52
26714     11 17 0A FB | 	rdlong	arg03, local03 wz
26718     34 22 86 F1 | 	sub	local03, #52
2671c     14 00 90 5D |  if_ne	jmp	#LR__3701
26720                 | LR__3700
26720     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26724     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26728     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2672c     01 FA 65 F6 | 	neg	result1, #1
26730     68 00 90 FD | 	jmp	#LR__3702
26734                 | LR__3701
26734     0F 13 02 F6 | 	mov	arg01, local01
26738     00 14 06 F6 | 	mov	arg02, #0
2673c     30 16 06 F6 | 	mov	arg03, #48
26740     09 25 02 F6 | 	mov	local04, arg01
26744     98 00 A0 FD | 	call	#\builtin_bytefill_
26748     12 FB 01 F6 | 	mov	result1, local04
2674c     10 13 CA FA | 	rdbyte	arg01, local02 wz
26750     08 1E 06 A1 |  if_e	add	local01, #8
26754     08 00 80 AF 
26758     0F FF 6B AC |  if_e	wrlong	##4607, local01
2675c     00 FA 05 A6 |  if_e	mov	result1, #0
26760     38 00 90 AD |  if_e	jmp	#LR__3702
26764     34 22 06 F1 | 	add	local03, #52
26768     11 23 02 FB | 	rdlong	local03, local03
2676c     11 25 02 F6 | 	mov	local04, local03
26770     13 22 46 F7 | 	zerox	local03, #19
26774     14 24 46 F0 | 	shr	local04, #20
26778     02 24 66 F0 | 	shl	local04, #2
2677c     ED 24 02 F1 | 	add	local04, __methods__
26780     12 25 02 FB | 	rdlong	local04, local04
26784     10 13 02 F6 | 	mov	arg01, local02
26788     0F 15 02 F6 | 	mov	arg02, local01
2678c     F2 20 02 F6 | 	mov	local02, objptr
26790     11 E5 01 F6 | 	mov	objptr, local03
26794     2D 24 62 FD | 	call	local04
26798     10 E5 01 F6 | 	mov	objptr, local02
2679c                 | LR__3702
2679c     A7 F0 03 F6 | 	mov	ptra, fp
267a0     B2 00 A0 FD | 	call	#popregs_
267a4                 | __system__stat_ret
267a4     2D 00 64 FD | 	ret
267a8                 | 
267a8                 | __system__write
267a8     0A 12 16 F2 | 	cmp	arg01, #10 wc
267ac     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
267b0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
267b4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
267b8     01 FA 65 36 |  if_ae	neg	result1, #1
267bc     20 00 90 3D |  if_ae	jmp	#LR__3710
267c0     34 12 06 FD | 	qmul	arg01, #52
267c4     02 00 00 FF 
267c8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
267cc     18 12 62 FD | 	getqx	arg01
267d0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
267d4     02 00 00 FF 
267d8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
267dc     CC 10 B0 FD | 	call	#__system___vfswrite
267e0                 | LR__3710
267e0                 | __system__write_ret
267e0     2D 00 64 FD | 	ret
267e4                 | 
267e4                 | __system__read
267e4     0A 12 16 F2 | 	cmp	arg01, #10 wc
267e8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
267ec     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
267f0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
267f4     01 FA 65 36 |  if_ae	neg	result1, #1
267f8     20 00 90 3D |  if_ae	jmp	#LR__3720
267fc     34 12 06 FD | 	qmul	arg01, #52
26800     02 00 00 FF 
26804     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26808     18 12 62 FD | 	getqx	arg01
2680c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26810     02 00 00 FF 
26814     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26818     58 12 B0 FD | 	call	#__system___vfsread
2681c                 | LR__3720
2681c                 | __system__read_ret
2681c     2D 00 64 FD | 	ret
26820                 | 
26820                 | __system__close
26820     0A 12 16 F2 | 	cmp	arg01, #10 wc
26824     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26828     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2682c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26830     01 FA 65 36 |  if_ae	neg	result1, #1
26834     20 00 90 3D |  if_ae	jmp	#LR__3730
26838     34 12 06 FD | 	qmul	arg01, #52
2683c     02 00 00 FF 
26840     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26844     18 12 62 FD | 	getqx	arg01
26848     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2684c     02 00 00 FF 
26850     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26854     10 F9 BF FD | 	call	#__system___closeraw
26858                 | LR__3730
26858                 | __system__close_ret
26858     2D 00 64 FD | 	ret
2685c                 | 
2685c                 | __system__lseek
2685c     06 4A 05 F6 | 	mov	COUNT_, #6
26860     A8 00 A0 FD | 	call	#pushregs_
26864     0A 12 16 F2 | 	cmp	arg01, #10 wc
26868     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2686c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26870     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26874     01 FA 65 36 |  if_ae	neg	result1, #1
26878     C4 00 90 3D |  if_ae	jmp	#LR__3741
2687c     34 12 06 FD | 	qmul	arg01, #52
26880     02 00 00 FF 
26884     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26888     18 1E 62 FD | 	getqx	local01
2688c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
26890     30 1E 06 F1 | 	add	local01, #48
26894     0F 13 0A FB | 	rdlong	arg01, local01 wz
26898     30 1E 86 F1 | 	sub	local01, #48
2689c     02 00 00 FF 
268a0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
268a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268a8     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
268ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268b0     01 FA 65 A6 |  if_e	neg	result1, #1
268b4     88 00 90 AD |  if_e	jmp	#LR__3741
268b8     08 1E 06 F1 | 	add	local01, #8
268bc     0F 21 02 FB | 	rdlong	local02, local01
268c0     08 1E 86 F1 | 	sub	local01, #8
268c4     40 20 CE F7 | 	test	local02, #64 wz
268c8     08 1E 06 51 |  if_ne	add	local01, #8
268cc     0F 21 02 5B |  if_ne	rdlong	local02, local01
268d0     80 20 46 55 |  if_ne	or	local02, #128
268d4     0F 21 62 5C |  if_ne	wrlong	local02, local01
268d8     08 1E 86 51 |  if_ne	sub	local01, #8
268dc     30 1E 06 F1 | 	add	local01, #48
268e0     0F 23 02 FB | 	rdlong	local03, local01
268e4     11 25 02 F6 | 	mov	local04, local03
268e8     30 1E 86 F1 | 	sub	local01, #48
268ec     13 24 46 F7 | 	zerox	local04, #19
268f0     14 22 46 F0 | 	shr	local03, #20
268f4     02 22 66 F0 | 	shl	local03, #2
268f8     ED 22 02 F1 | 	add	local03, __methods__
268fc     11 23 02 FB | 	rdlong	local03, local03
26900     0F 13 02 F6 | 	mov	arg01, local01
26904     F2 26 02 F6 | 	mov	local05, objptr
26908     12 E5 01 F6 | 	mov	objptr, local04
2690c     2D 22 62 FD | 	call	local03
26910     13 E5 01 F6 | 	mov	objptr, local05
26914     FD 28 02 F6 | 	mov	local06, result1
26918     00 28 56 F2 | 	cmps	local06, #0 wc
2691c     1C 00 90 3D |  if_ae	jmp	#LR__3740
26920     14 13 6A F6 | 	neg	arg01, local06 wz
26924     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26928     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2692c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26930     01 FA 65 56 |  if_ne	neg	result1, #1
26934     00 FA 05 A6 |  if_e	mov	result1, #0
26938     04 00 90 FD | 	jmp	#LR__3741
2693c                 | LR__3740
2693c     14 FB 01 F6 | 	mov	result1, local06
26940                 | LR__3741
26940     A7 F0 03 F6 | 	mov	ptra, fp
26944     B2 00 A0 FD | 	call	#popregs_
26948                 | __system__lseek_ret
26948     2D 00 64 FD | 	ret
2694c                 | 
2694c                 | __system___ioctl
2694c     03 4A 05 F6 | 	mov	COUNT_, #3
26950     A8 00 A0 FD | 	call	#pushregs_
26954     00 12 4E F2 | 	cmps	arg01, #0 wz
26958     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2695c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26960     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26964     01 FA 65 A6 |  if_e	neg	result1, #1
26968     5C 00 90 AD |  if_e	jmp	#LR__3751
2696c     28 12 06 F1 | 	add	arg01, #40
26970     09 1F 02 FB | 	rdlong	local01, arg01
26974     0F 21 02 F6 | 	mov	local02, local01
26978     28 12 86 F1 | 	sub	arg01, #40
2697c     13 20 46 F7 | 	zerox	local02, #19
26980     14 1E 46 F0 | 	shr	local01, #20
26984     02 1E 66 F0 | 	shl	local01, #2
26988     ED 1E 02 F1 | 	add	local01, __methods__
2698c     0F 1F 02 FB | 	rdlong	local01, local01
26990     F2 22 02 F6 | 	mov	local03, objptr
26994     10 E5 01 F6 | 	mov	objptr, local02
26998     2D 1E 62 FD | 	call	local01
2699c     11 E5 01 F6 | 	mov	objptr, local03
269a0     FD 12 0A F6 | 	mov	arg01, result1 wz
269a4     1C 00 90 AD |  if_e	jmp	#LR__3750
269a8     00 12 4E F2 | 	cmps	arg01, #0 wz
269ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
269b0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
269b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
269b8     01 FA 65 56 |  if_ne	neg	result1, #1
269bc     00 FA 05 A6 |  if_e	mov	result1, #0
269c0     04 00 90 FD | 	jmp	#LR__3751
269c4                 | LR__3750
269c4     00 FA 05 F6 | 	mov	result1, #0
269c8                 | LR__3751
269c8     A7 F0 03 F6 | 	mov	ptra, fp
269cc     B2 00 A0 FD | 	call	#popregs_
269d0                 | __system___ioctl_ret
269d0     2D 00 64 FD | 	ret
269d4                 | 
269d4                 | __system___isatty
269d4     00 4A 05 F6 | 	mov	COUNT_, #0
269d8     A8 00 A0 FD | 	call	#pushregs_
269dc     0C F0 07 F1 | 	add	ptra, #12
269e0     04 4E 05 F1 | 	add	fp, #4
269e4     A7 12 62 FC | 	wrlong	arg01, fp
269e8     04 4E 05 F1 | 	add	fp, #4
269ec     A7 16 02 F6 | 	mov	arg03, fp
269f0     08 4E 85 F1 | 	sub	fp, #8
269f4     00 15 06 F6 | 	mov	arg02, #256
269f8     50 FF BF FD | 	call	#__system___ioctl
269fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26a00     01 FA 05 A6 |  if_e	mov	result1, #1
26a04     00 FA 05 56 |  if_ne	mov	result1, #0
26a08     A7 F0 03 F6 | 	mov	ptra, fp
26a0c     B2 00 A0 FD | 	call	#popregs_
26a10                 | __system___isatty_ret
26a10     2D 00 64 FD | 	ret
26a14                 | 
26a14                 | __system__mkdir
26a14     07 4A 05 F6 | 	mov	COUNT_, #7
26a18     A8 00 A0 FD | 	call	#pushregs_
26a1c     0A 1F 02 F6 | 	mov	local01, arg02
26a20     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26a24     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
26a28     09 15 02 F6 | 	mov	arg02, arg01
26a2c     10 13 02 F6 | 	mov	arg01, local02
26a30     00 16 06 F6 | 	mov	arg03, #0
26a34     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26a38     E0 B2 BF FD | 	call	#__system____getvfsforfile
26a3c     FD 22 0A F6 | 	mov	local03, result1 wz
26a40     10 00 90 AD |  if_e	jmp	#LR__3760
26a44     20 22 06 F1 | 	add	local03, #32
26a48     11 13 0A FB | 	rdlong	arg01, local03 wz
26a4c     20 22 86 F1 | 	sub	local03, #32
26a50     14 00 90 5D |  if_ne	jmp	#LR__3761
26a54                 | LR__3760
26a54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26a58     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26a5c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26a60     01 FA 65 F6 | 	neg	result1, #1
26a64     60 00 90 FD | 	jmp	#LR__3763
26a68                 | LR__3761
26a68     38 22 06 F1 | 	add	local03, #56
26a6c     11 25 02 FB | 	rdlong	local04, local03
26a70     12 27 02 F6 | 	mov	local05, local04
26a74     13 24 46 F7 | 	zerox	local04, #19
26a78     14 26 46 F0 | 	shr	local05, #20
26a7c     02 26 66 F0 | 	shl	local05, #2
26a80     ED 26 02 F1 | 	add	local05, __methods__
26a84     13 27 02 FB | 	rdlong	local05, local05
26a88     10 13 02 F6 | 	mov	arg01, local02
26a8c     0F 15 02 F6 | 	mov	arg02, local01
26a90     F2 28 02 F6 | 	mov	local06, objptr
26a94     12 E5 01 F6 | 	mov	objptr, local04
26a98     2D 26 62 FD | 	call	local05
26a9c     14 E5 01 F6 | 	mov	objptr, local06
26aa0     FD 2A 0A F6 | 	mov	local07, result1 wz
26aa4     1C 00 90 AD |  if_e	jmp	#LR__3762
26aa8     15 13 6A F6 | 	neg	arg01, local07 wz
26aac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26ab0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26ab4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26ab8     01 FA 65 56 |  if_ne	neg	result1, #1
26abc     00 FA 05 A6 |  if_e	mov	result1, #0
26ac0     04 00 90 FD | 	jmp	#LR__3763
26ac4                 | LR__3762
26ac4     15 FB 01 F6 | 	mov	result1, local07
26ac8                 | LR__3763
26ac8     A7 F0 03 F6 | 	mov	ptra, fp
26acc     B2 00 A0 FD | 	call	#popregs_
26ad0                 | __system__mkdir_ret
26ad0     2D 00 64 FD | 	ret
26ad4                 | 
26ad4                 | __system____getftab
26ad4     0A 12 16 F2 | 	cmp	arg01, #10 wc
26ad8     34 12 06 CD |  if_b	qmul	arg01, #52
26adc     00 FA 05 36 |  if_ae	mov	result1, #0
26ae0     02 00 00 CF 
26ae4     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
26ae8     18 FA 61 CD |  if_b	getqx	result1
26aec     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
26af0     02 00 00 CF 
26af4     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
26af8                 | __system____getftab_ret
26af8     2D 00 64 FD | 	ret
26afc                 | 
26afc                 | __system__strncpy
26afc     09 01 02 F6 | 	mov	_var01, arg01
26b00                 | LR__3770
26b00     01 16 86 F1 | 	sub	arg03, #1
26b04     00 16 56 F2 | 	cmps	arg03, #0 wc
26b08     18 00 90 CD |  if_b	jmp	#LR__3771
26b0c     0A FB C1 FA | 	rdbyte	result1, arg02
26b10     00 FB 41 FC | 	wrbyte	result1, _var01
26b14     01 14 06 F1 | 	add	arg02, #1
26b18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26b1c     01 00 06 F1 | 	add	_var01, #1
26b20     DC FF 9F 5D |  if_ne	jmp	#LR__3770
26b24                 | LR__3771
26b24     97 0C 48 FB | 	callpa	#(@LR__3773-@LR__3772)>>2,fcache_load_ptr_
26b28                 | LR__3772
26b28     01 16 86 F1 | 	sub	arg03, #1
26b2c     00 16 56 F2 | 	cmps	arg03, #0 wc
26b30     00 03 02 36 |  if_ae	mov	_var02, _var01
26b34     01 00 06 31 |  if_ae	add	_var01, #1
26b38     01 01 48 3C |  if_ae	wrbyte	#0, _var02
26b3c     E8 FF 9F 3D |  if_ae	jmp	#LR__3772
26b40                 | LR__3773
26b40     09 FB 01 F6 | 	mov	result1, arg01
26b44                 | __system__strncpy_ret
26b44     2D 00 64 FD | 	ret
26b48                 | 
26b48                 | __system__strncat
26b48     00 14 4E F2 | 	cmps	arg02, #0 wz
26b4c     50 00 90 AD |  if_e	jmp	#LR__3784
26b50     01 16 16 F2 | 	cmp	arg03, #1 wc
26b54     48 00 90 CD |  if_b	jmp	#LR__3784
26b58     09 01 02 F6 | 	mov	_var01, arg01
26b5c     97 1E 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
26b60                 | LR__3780
26b60     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26b64     01 00 06 51 |  if_ne	add	_var01, #1
26b68     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
26b6c     0B 03 02 F6 | 	mov	_var02, arg03
26b70                 | LR__3781
26b70     0A 05 C2 FA | 	rdbyte	_var03, arg02
26b74     02 07 02 F6 | 	mov	_var04, _var03
26b78     07 06 4E F7 | 	zerox	_var04, #7 wz
26b7c     01 14 06 F1 | 	add	arg02, #1
26b80     18 00 90 AD |  if_e	jmp	#LR__3783
26b84     01 02 86 F1 | 	sub	_var02, #1
26b88     00 02 56 F2 | 	cmps	_var02, #0 wc
26b8c     00 07 02 36 |  if_ae	mov	_var04, _var01
26b90     01 00 06 31 |  if_ae	add	_var01, #1
26b94     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
26b98     D4 FF 9F 3D |  if_ae	jmp	#LR__3781
26b9c                 | LR__3782
26b9c                 | LR__3783
26b9c     00 01 48 FC | 	wrbyte	#0, _var01
26ba0                 | LR__3784
26ba0     09 FB 01 F6 | 	mov	result1, arg01
26ba4                 | __system__strncat_ret
26ba4     2D 00 64 FD | 	ret
26ba8                 | 
26ba8                 | __system__strncmp
26ba8     09 01 0A F6 | 	mov	_var01, arg01 wz
26bac     14 00 90 5D |  if_ne	jmp	#LR__3790
26bb0     00 14 0E F2 | 	cmp	arg02, #0 wz
26bb4     01 02 66 56 |  if_ne	neg	_var02, #1
26bb8     00 02 06 A6 |  if_e	mov	_var02, #0
26bbc     01 FB 01 F6 | 	mov	result1, _var02
26bc0     74 00 90 FD | 	jmp	#__system__strncmp_ret
26bc4                 | LR__3790
26bc4     00 14 0E F2 | 	cmp	arg02, #0 wz
26bc8     01 FA 05 A6 |  if_e	mov	result1, #1
26bcc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26bd0     0B 05 02 F6 | 	mov	_var03, arg03
26bd4     97 16 48 FB | 	callpa	#(@LR__3792-@LR__3791)>>2,fcache_load_ptr_
26bd8                 | LR__3791
26bd8     00 07 C2 FA | 	rdbyte	_var04, _var01
26bdc     0A 09 02 F6 | 	mov	_var05, arg02
26be0     04 0B C2 FA | 	rdbyte	_var06, _var05
26be4     01 04 86 F1 | 	sub	_var03, #1
26be8     00 04 56 F2 | 	cmps	_var03, #0 wc
26bec     01 00 06 F1 | 	add	_var01, #1
26bf0     01 14 06 F1 | 	add	arg02, #1
26bf4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
26bf8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3793
26bfc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
26c00     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3791
26c04                 | LR__3792
26c04                 | LR__3793
26c04     00 04 56 F2 | 	cmps	_var03, #0 wc
26c08     00 FA 05 C6 |  if_b	mov	result1, #0
26c0c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
26c10     05 07 0A F2 | 	cmp	_var04, _var06 wz
26c14     00 FA 05 A6 |  if_e	mov	result1, #0
26c18     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26c1c     00 06 0E F2 | 	cmp	_var04, #0 wz
26c20     01 FA 65 A6 |  if_e	neg	result1, #1
26c24     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26c28     00 0A 0E F2 | 	cmp	_var06, #0 wz
26c2c     01 FA 05 A6 |  if_e	mov	result1, #1
26c30     03 FB 01 56 |  if_ne	mov	result1, _var04
26c34     05 FB 81 51 |  if_ne	sub	result1, _var06
26c38                 | __system__strncmp_ret
26c38     2D 00 64 FD | 	ret
26c3c                 | 
26c3c                 | __system____root_opendir
26c3c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26c40     04 12 06 F1 | 	add	arg01, #4
26c44     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
26c48     00 FA 05 F6 | 	mov	result1, #0
26c4c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26c50                 | __system____root_opendir_ret
26c50     2D 00 64 FD | 	ret
26c54                 | 
26c54                 | __system____root_readdir
26c54     03 4A 05 F6 | 	mov	COUNT_, #3
26c58     A8 00 A0 FD | 	call	#pushregs_
26c5c     09 1F 02 F6 | 	mov	local01, arg01
26c60     0A 21 02 F6 | 	mov	local02, arg02
26c64     04 1E 06 F1 | 	add	local01, #4
26c68     0F 23 02 FB | 	rdlong	local03, local01
26c6c     04 1E 86 F1 | 	sub	local01, #4
26c70                 | LR__3800
26c70     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26c74     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
26c78     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26c7c     01 FA 65 A6 |  if_e	neg	result1, #1
26c80     48 00 90 AD |  if_e	jmp	#LR__3801
26c84     11 17 0A FB | 	rdlong	arg03, local03 wz
26c88     04 22 06 A1 |  if_e	add	local03, #4
26c8c     E0 FF 9F AD |  if_e	jmp	#LR__3800
26c90     11 15 02 FB | 	rdlong	arg02, local03
26c94     01 14 06 F1 | 	add	arg02, #1
26c98     10 13 02 F6 | 	mov	arg01, local02
26c9c     40 16 06 F6 | 	mov	arg03, #64
26ca0     58 FE BF FD | 	call	#__system__strncpy
26ca4     50 20 06 F1 | 	add	local02, #80
26ca8     10 03 48 FC | 	wrbyte	#1, local02
26cac     08 20 86 F1 | 	sub	local02, #8
26cb0     10 01 68 FC | 	wrlong	#0, local02
26cb4     04 20 06 F1 | 	add	local02, #4
26cb8     10 01 68 FC | 	wrlong	#0, local02
26cbc     04 22 06 F1 | 	add	local03, #4
26cc0     04 1E 06 F1 | 	add	local01, #4
26cc4     0F 23 62 FC | 	wrlong	local03, local01
26cc8     00 FA 05 F6 | 	mov	result1, #0
26ccc                 | LR__3801
26ccc     A7 F0 03 F6 | 	mov	ptra, fp
26cd0     B2 00 A0 FD | 	call	#popregs_
26cd4                 | __system____root_readdir_ret
26cd4     2D 00 64 FD | 	ret
26cd8                 | 
26cd8                 | __system____root_closedir
26cd8     00 FA 05 F6 | 	mov	result1, #0
26cdc                 | __system____root_closedir_ret
26cdc     2D 00 64 FD | 	ret
26ce0                 | 
26ce0                 | __system____root_stat
26ce0     0A 01 02 F6 | 	mov	_var01, arg02
26ce4     00 13 02 F6 | 	mov	arg01, _var01
26ce8     00 14 06 F6 | 	mov	arg02, #0
26cec     30 16 06 F6 | 	mov	arg03, #48
26cf0     98 00 A0 FD | 	call	#\builtin_bytefill_
26cf4     08 00 06 F1 | 	add	_var01, #8
26cf8     08 00 80 FF 
26cfc     00 FF 6B FC | 	wrlong	##4607, _var01
26d00     00 FA 05 F6 | 	mov	result1, #0
26d04                 | __system____root_stat_ret
26d04     2D 00 64 FD | 	ret
26d08                 | 
26d08                 | __system___normalizeName
26d08     00 00 06 F6 | 	mov	_var01, #0
26d0c     09 03 02 F6 | 	mov	_var02, arg01
26d10     01 05 02 F6 | 	mov	_var03, _var02
26d14                 | LR__3810
26d14     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26d18     5C 01 90 AD |  if_e	jmp	#LR__3829
26d1c     00 00 0E F2 | 	cmp	_var01, #0 wz
26d20     02 07 02 56 |  if_ne	mov	_var04, _var03
26d24     01 04 06 51 |  if_ne	add	_var03, #1
26d28     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
26d2c     00 00 06 56 |  if_ne	mov	_var01, #0
26d30     01 07 C2 FA | 	rdbyte	_var04, _var02
26d34     2E 06 0E F2 | 	cmp	_var04, #46 wz
26d38     D8 00 90 5D |  if_ne	jmp	#LR__3822
26d3c     01 02 06 F1 | 	add	_var02, #1
26d40     01 07 C2 FA | 	rdbyte	_var04, _var02
26d44     01 02 86 F1 | 	sub	_var02, #1
26d48     2F 06 0E F2 | 	cmp	_var04, #47 wz
26d4c     18 00 90 AD |  if_e	jmp	#LR__3811
26d50     01 02 06 F1 | 	add	_var02, #1
26d54     01 09 C2 FA | 	rdbyte	_var05, _var02
26d58     01 02 86 F1 | 	sub	_var02, #1
26d5c     04 0B 02 F6 | 	mov	_var06, _var05
26d60     07 0A 4E F7 | 	zerox	_var06, #7 wz
26d64     10 00 90 5D |  if_ne	jmp	#LR__3812
26d68                 | LR__3811
26d68     01 0D 02 F6 | 	mov	_var07, _var02
26d6c     01 0C 06 F1 | 	add	_var07, #1
26d70     06 03 02 F6 | 	mov	_var02, _var07
26d74     E0 00 90 FD | 	jmp	#LR__3826
26d78                 | LR__3812
26d78     01 02 06 F1 | 	add	_var02, #1
26d7c     01 0D C2 FA | 	rdbyte	_var07, _var02
26d80     01 02 86 F1 | 	sub	_var02, #1
26d84     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26d88     2E 06 0E F2 | 	cmp	_var04, #46 wz
26d8c     84 00 90 5D |  if_ne	jmp	#LR__3821
26d90     02 02 06 F1 | 	add	_var02, #2
26d94     01 0D C2 FA | 	rdbyte	_var07, _var02
26d98     02 02 86 F1 | 	sub	_var02, #2
26d9c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26da0     2F 06 0E F2 | 	cmp	_var04, #47 wz
26da4     18 00 90 AD |  if_e	jmp	#LR__3813
26da8     02 02 06 F1 | 	add	_var02, #2
26dac     01 09 C2 FA | 	rdbyte	_var05, _var02
26db0     02 02 86 F1 | 	sub	_var02, #2
26db4     04 0B 02 F6 | 	mov	_var06, _var05
26db8     07 0A 4E F7 | 	zerox	_var06, #7 wz
26dbc     54 00 90 5D |  if_ne	jmp	#LR__3820
26dc0                 | LR__3813
26dc0     02 02 06 F1 | 	add	_var02, #2
26dc4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
26dc8     40 00 90 ED |  if_be	jmp	#LR__3819
26dcc     02 0F 02 F6 | 	mov	_var08, _var03
26dd0     01 0E 86 F1 | 	sub	_var08, #1
26dd4                 | LR__3814
26dd4     07 07 C2 FA | 	rdbyte	_var04, _var08
26dd8     2F 06 0E F2 | 	cmp	_var04, #47 wz
26ddc     0C 00 90 5D |  if_ne	jmp	#LR__3815
26de0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26de4     01 0E 86 11 |  if_a	sub	_var08, #1
26de8     E8 FF 9F 1D |  if_a	jmp	#LR__3814
26dec                 | LR__3815
26dec     97 0C 48 FB | 	callpa	#(@LR__3817-@LR__3816)>>2,fcache_load_ptr_
26df0                 | LR__3816
26df0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26df4     10 00 90 ED |  if_be	jmp	#LR__3818
26df8     07 07 C2 FA | 	rdbyte	_var04, _var08
26dfc     2F 06 0E F2 | 	cmp	_var04, #47 wz
26e00     01 0E 86 51 |  if_ne	sub	_var08, #1
26e04     E8 FF 9F 5D |  if_ne	jmp	#LR__3816
26e08                 | LR__3817
26e08                 | LR__3818
26e08     07 05 02 F6 | 	mov	_var03, _var08
26e0c                 | LR__3819
26e0c     01 00 06 F6 | 	mov	_var01, #1
26e10     44 00 90 FD | 	jmp	#LR__3826
26e14                 | LR__3820
26e14                 | LR__3821
26e14                 | LR__3822
26e14     97 18 48 FB | 	callpa	#(@LR__3824-@LR__3823)>>2,fcache_load_ptr_
26e18                 | LR__3823
26e18     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26e1c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
26e20     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
26e24     20 00 90 AD |  if_e	jmp	#LR__3825
26e28     01 0B 02 F6 | 	mov	_var06, _var02
26e2c     01 09 02 F6 | 	mov	_var05, _var02
26e30     01 08 06 F1 | 	add	_var05, #1
26e34     05 11 C2 FA | 	rdbyte	_var09, _var06
26e38     04 03 02 F6 | 	mov	_var02, _var05
26e3c     02 11 42 FC | 	wrbyte	_var09, _var03
26e40     01 04 06 F1 | 	add	_var03, #1
26e44     D0 FF 9F FD | 	jmp	#LR__3823
26e48                 | LR__3824
26e48                 | LR__3825
26e48     01 07 C2 FA | 	rdbyte	_var04, _var02
26e4c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26e50     C0 FE 9F 5D |  if_ne	jmp	#LR__3810
26e54     01 00 06 F6 | 	mov	_var01, #1
26e58                 | LR__3826
26e58     97 0C 48 FB | 	callpa	#(@LR__3828-@LR__3827)>>2,fcache_load_ptr_
26e5c                 | LR__3827
26e5c     01 07 C2 FA | 	rdbyte	_var04, _var02
26e60     2F 06 0E F2 | 	cmp	_var04, #47 wz
26e64     01 0D 02 A6 |  if_e	mov	_var07, _var02
26e68     01 0C 06 A1 |  if_e	add	_var07, #1
26e6c     06 03 02 A6 |  if_e	mov	_var02, _var07
26e70     E8 FF 9F AD |  if_e	jmp	#LR__3827
26e74                 | LR__3828
26e74     9C FE 9F FD | 	jmp	#LR__3810
26e78                 | LR__3829
26e78     02 01 48 FC | 	wrbyte	#0, _var03
26e7c                 | __system___normalizeName_ret
26e7c     2D 00 64 FD | 	ret
26e80                 | 
26e80                 | __system___strrev
26e80     09 01 CA FA | 	rdbyte	_var01, arg01 wz
26e84     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26e88     09 03 02 F6 | 	mov	_var02, arg01
26e8c     97 1A 48 FB | 	callpa	#(@LR__3832-@LR__3830)>>2,fcache_load_ptr_
26e90                 | LR__3830
26e90     01 01 CA FA | 	rdbyte	_var01, _var02 wz
26e94     01 02 06 51 |  if_ne	add	_var02, #1
26e98     F4 FF 9F 5D |  if_ne	jmp	#LR__3830
26e9c     01 02 86 F1 | 	sub	_var02, #1
26ea0                 | LR__3831
26ea0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
26ea4     1C 00 90 ED |  if_be	jmp	#LR__3833
26ea8     09 01 C2 FA | 	rdbyte	_var01, arg01
26eac     01 05 C2 FA | 	rdbyte	_var03, _var02
26eb0     09 05 42 FC | 	wrbyte	_var03, arg01
26eb4     01 01 42 FC | 	wrbyte	_var01, _var02
26eb8     01 12 06 F1 | 	add	arg01, #1
26ebc     01 02 86 F1 | 	sub	_var02, #1
26ec0     DC FF 9F FD | 	jmp	#LR__3831
26ec4                 | LR__3832
26ec4                 | LR__3833
26ec4                 | __system___strrev_ret
26ec4     2D 00 64 FD | 	ret
26ec8                 | 
26ec8                 | __system___fmtpad
26ec8     06 4A 05 F6 | 	mov	COUNT_, #6
26ecc     A8 00 A0 FD | 	call	#pushregs_
26ed0     09 1F 02 F6 | 	mov	local01, arg01
26ed4     0A 21 02 F6 | 	mov	local02, arg02
26ed8     0B 23 02 F6 | 	mov	local03, arg03
26edc     10 13 EA F8 | 	getbyte	arg01, local02, #1
26ee0     16 20 46 F0 | 	shr	local02, #22
26ee4     03 20 0E F5 | 	and	local02, #3 wz
26ee8     00 24 06 F6 | 	mov	local04, #0
26eec     01 20 06 A6 |  if_e	mov	local02, #1
26ef0     0C 21 CA F7 | 	test	local02, arg04 wz
26ef4     00 FA 05 A6 |  if_e	mov	result1, #0
26ef8     88 00 90 AD |  if_e	jmp	#LR__3843
26efc     09 23 C2 F2 | 	subr	local03, arg01
26f00     01 22 56 F2 | 	cmps	local03, #1 wc
26f04     00 FA 05 C6 |  if_b	mov	result1, #0
26f08     78 00 90 CD |  if_b	jmp	#LR__3843
26f0c     03 20 0E F2 | 	cmp	local02, #3 wz
26f10     18 00 90 5D |  if_ne	jmp	#LR__3840
26f14     01 18 0E F2 | 	cmp	arg04, #1 wz
26f18     6E 20 62 FD | 	wrz	local02
26f1c     10 23 02 F1 | 	add	local03, local02
26f20     11 23 52 F6 | 	abs	local03, local03 wc
26f24     01 22 46 F0 | 	shr	local03, #1
26f28     11 23 82 F6 | 	negc	local03, local03
26f2c                 | LR__3840
26f2c     01 22 56 F2 | 	cmps	local03, #1 wc
26f30     4C 00 90 CD |  if_b	jmp	#LR__3842
26f34     11 27 02 F6 | 	mov	local05, local03
26f38                 | LR__3841
26f38     0F 21 02 F6 | 	mov	local02, local01
26f3c     0F 29 02 F6 | 	mov	local06, local01
26f40     13 20 46 F7 | 	zerox	local02, #19
26f44     14 28 46 F0 | 	shr	local06, #20
26f48     02 28 66 F0 | 	shl	local06, #2
26f4c     ED 28 02 F1 | 	add	local06, __methods__
26f50     14 29 02 FB | 	rdlong	local06, local06
26f54     20 12 06 F6 | 	mov	arg01, #32
26f58     F2 22 02 F6 | 	mov	local03, objptr
26f5c     10 E5 01 F6 | 	mov	objptr, local02
26f60     2D 28 62 FD | 	call	local06
26f64     11 E5 01 F6 | 	mov	objptr, local03
26f68     FD 28 02 F6 | 	mov	local06, result1
26f6c     00 28 56 F2 | 	cmps	local06, #0 wc
26f70     14 FB 01 C6 |  if_b	mov	result1, local06
26f74     0C 00 90 CD |  if_b	jmp	#LR__3843
26f78     14 25 02 F1 | 	add	local04, local06
26f7c     EE 27 6E FB | 	djnz	local05, #LR__3841
26f80                 | LR__3842
26f80     12 FB 01 F6 | 	mov	result1, local04
26f84                 | LR__3843
26f84     A7 F0 03 F6 | 	mov	ptra, fp
26f88     B2 00 A0 FD | 	call	#popregs_
26f8c                 | __system___fmtpad_ret
26f8c     2D 00 64 FD | 	ret
26f90                 | 
26f90                 | __system___uitoa
26f90     04 4A 05 F6 | 	mov	COUNT_, #4
26f94     A8 00 A0 FD | 	call	#pushregs_
26f98     09 1F 02 F6 | 	mov	local01, arg01
26f9c     00 1A 4E F2 | 	cmps	arg05, #0 wz
26fa0     0F 1B 02 F6 | 	mov	arg05, local01
26fa4     00 20 06 F6 | 	mov	local02, #0
26fa8     37 22 06 56 |  if_ne	mov	local03, #55
26fac     57 22 06 A6 |  if_e	mov	local03, #87
26fb0                 | LR__3850
26fb0     0B 15 12 FD | 	qdiv	arg02, arg03
26fb4     19 24 62 FD | 	getqy	local04
26fb8     0B 15 12 FD | 	qdiv	arg02, arg03
26fbc     0A 24 16 F2 | 	cmp	local04, #10 wc
26fc0     30 24 06 C1 |  if_b	add	local04, #48
26fc4     11 25 02 31 |  if_ae	add	local04, local03
26fc8     0D 25 42 FC | 	wrbyte	local04, arg05
26fcc     01 1A 06 F1 | 	add	arg05, #1
26fd0     01 20 06 F1 | 	add	local02, #1
26fd4     18 14 62 FD | 	getqx	arg02
26fd8     00 14 0E F2 | 	cmp	arg02, #0 wz
26fdc     D0 FF 9F 5D |  if_ne	jmp	#LR__3850
26fe0     0C 21 12 F2 | 	cmp	local02, arg04 wc
26fe4     C8 FF 9F CD |  if_b	jmp	#LR__3850
26fe8     0D 01 48 FC | 	wrbyte	#0, arg05
26fec     0F 13 02 F6 | 	mov	arg01, local01
26ff0     8C FE BF FD | 	call	#__system___strrev
26ff4     10 FB 01 F6 | 	mov	result1, local02
26ff8     A7 F0 03 F6 | 	mov	ptra, fp
26ffc     B2 00 A0 FD | 	call	#popregs_
27000                 | __system___uitoa_ret
27000     2D 00 64 FD | 	ret
27004                 | 
27004                 | __system__disassemble_0526
27004     10 4A 05 F6 | 	mov	COUNT_, #16
27008     A8 00 A0 FD | 	call	#pushregs_
2700c     09 1F 02 F6 | 	mov	local01, arg01
27010     0A 21 02 F6 | 	mov	local02, arg02
27014     0B 23 02 F6 | 	mov	local03, arg03
27018     0C 25 02 F6 | 	mov	local04, arg04
2701c     0D 27 02 F6 | 	mov	local05, arg05
27020     13 13 52 F6 | 	abs	arg01, local05 wc
27024     1F 28 C6 C9 |  if_b	decod	local06, #31
27028     00 28 06 36 |  if_ae	mov	local06, #0
2702c     0C CF BF FD | 	call	#__system___float_fromuns
27030     14 FB 61 F5 | 	xor	result1, local06
27034     FD 2A 02 F6 | 	mov	local07, result1
27038     00 2C 06 F6 | 	mov	local08, #0
2703c     0F 13 02 F6 | 	mov	arg01, local01
27040     00 14 06 F6 | 	mov	arg02, #0
27044     01 16 06 F6 | 	mov	arg03, #1
27048     28 D7 BF FD | 	call	#__system___float_cmp
2704c     00 FA 0D F2 | 	cmp	result1, #0 wz
27050     00 2E 06 A6 |  if_e	mov	local09, #0
27054     10 01 68 AC |  if_e	wrlong	#0, local02
27058     11 2F 62 AC |  if_e	wrlong	local09, local03
2705c     8C 01 90 AD |  if_e	jmp	#LR__3872
27060     0F 13 02 F6 | 	mov	arg01, local01
27064     FC DB BF FD | 	call	#__system____builtin_ilogb
27068     FD 30 02 F6 | 	mov	local10, result1
2706c     0A 26 0E F2 | 	cmp	local05, #10 wz
27070     24 00 90 5D |  if_ne	jmp	#LR__3860
27074     18 2F 02 F6 | 	mov	local09, local10
27078     01 2E 66 F0 | 	shl	local09, #1
2707c     18 2F 02 F1 | 	add	local09, local10
27080     17 31 52 F6 | 	abs	local10, local09 wc
27084     0A 30 16 FD | 	qdiv	local10, #10
27088     09 32 06 F6 | 	mov	local11, #9
2708c     18 30 62 FD | 	getqx	local10
27090     18 31 82 F6 | 	negc	local10, local10
27094     04 00 90 FD | 	jmp	#LR__3861
27098                 | LR__3860
27098     18 32 06 F6 | 	mov	local11, #24
2709c                 | LR__3861
2709c                 | LR__3862
2709c     08 2C 56 F2 | 	cmps	local08, #8 wc
270a0     01 2C 06 F1 | 	add	local08, #1
270a4     60 00 90 3D |  if_ae	jmp	#LR__3863
270a8     00 C0 1F FF 
270ac     00 12 06 F6 | 	mov	arg01, ##1065353216
270b0     15 15 02 F6 | 	mov	arg02, local07
270b4     18 17 02 F6 | 	mov	arg03, local10
270b8     8C E2 BF FD | 	call	#__system___float_pow_n
270bc     FD 14 02 F6 | 	mov	arg02, result1
270c0     0F 13 02 F6 | 	mov	arg01, local01
270c4     7C D4 BF FD | 	call	#__system___float_div
270c8     FD 34 02 F6 | 	mov	local12, result1
270cc     1A 13 02 F6 | 	mov	arg01, local12
270d0     00 C0 1F FF 
270d4     00 14 06 F6 | 	mov	arg02, ##1065353216
270d8     01 16 06 F6 | 	mov	arg03, #1
270dc     94 D6 BF FD | 	call	#__system___float_cmp
270e0     00 FA 55 F2 | 	cmps	result1, #0 wc
270e4     01 30 86 C1 |  if_b	sub	local10, #1
270e8     B0 FF 9F CD |  if_b	jmp	#LR__3862
270ec     15 15 02 F6 | 	mov	arg02, local07
270f0     1A 13 02 F6 | 	mov	arg01, local12
270f4     01 16 66 F6 | 	neg	arg03, #1
270f8     78 D6 BF FD | 	call	#__system___float_cmp
270fc     00 FA 55 F2 | 	cmps	result1, #0 wc
27100     01 30 06 31 |  if_ae	add	local10, #1
27104     94 FF 9F 3D |  if_ae	jmp	#LR__3862
27108                 | LR__3863
27108     1A 13 02 F6 | 	mov	arg01, local12
2710c     54 DB BF FD | 	call	#__system____builtin_ilogb
27110     FD 36 02 F6 | 	mov	local13, result1
27114     1A 39 02 F6 | 	mov	local14, local12
27118     17 39 06 F4 | 	bitl	local14, #279
2711c     17 38 26 F4 | 	bith	local14, #23
27120     1B 39 62 F0 | 	shl	local14, local13
27124     02 26 0E F2 | 	cmp	local05, #2 wz
27128     02 24 66 A0 |  if_e	shl	local04, #2
2712c     00 3A 06 F6 | 	mov	local15, #0
27130     00 24 56 F2 | 	cmps	local04, #0 wc
27134     10 00 90 3D |  if_ae	jmp	#LR__3864
27138     18 25 C2 F2 | 	subr	local04, local10
2713c     00 24 56 F2 | 	cmps	local04, #0 wc
27140     A0 00 90 CD |  if_b	jmp	#LR__3871
27144     04 00 90 FD | 	jmp	#LR__3865
27148                 | LR__3864
27148     01 24 06 F1 | 	add	local04, #1
2714c                 | LR__3865
2714c     19 25 7A F3 | 	fles	local04, local11 wcz
27150     01 3C 06 F6 | 	mov	local16, #1
27154     97 22 48 FB | 	callpa	#(@LR__3867-@LR__3866)>>2,fcache_load_ptr_
27158                 | LR__3866
27158     00 40 00 FF 
2715c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
27160     38 00 90 3D |  if_ae	jmp	#LR__3868
27164     01 24 56 F2 | 	cmps	local04, #1 wc
27168     01 24 86 F1 | 	sub	local04, #1
2716c     2C 00 90 CD |  if_b	jmp	#LR__3868
27170     13 3B 02 FD | 	qmul	local15, local05
27174     1C 37 02 F6 | 	mov	local13, local14
27178     17 36 46 F0 | 	shr	local13, #23
2717c     17 39 06 F4 | 	bitl	local14, #279
27180     18 3A 62 FD | 	getqx	local15
27184     13 3D 02 FD | 	qmul	local16, local05
27188     18 3C 62 FD | 	getqx	local16
2718c     13 39 02 FD | 	qmul	local14, local05
27190     1B 3B 02 F1 | 	add	local15, local13
27194     18 38 62 FD | 	getqx	local14
27198     BC FF 9F FD | 	jmp	#LR__3866
2719c                 | LR__3867
2719c                 | LR__3868
2719c     13 2F 02 F6 | 	mov	local09, local05
271a0     17 2E 66 F0 | 	shl	local09, #23
271a4     17 37 52 F6 | 	abs	local13, local09 wc
271a8     01 36 46 F0 | 	shr	local13, #1
271ac     1B 37 82 F6 | 	negc	local13, local13
271b0     1B 39 1A F2 | 	cmp	local14, local13 wcz
271b4     20 00 90 1D |  if_a	jmp	#LR__3869
271b8     17 26 66 F0 | 	shl	local05, #23
271bc     13 37 52 F6 | 	abs	local13, local05 wc
271c0     01 36 46 F0 | 	shr	local13, #1
271c4     1B 37 82 F6 | 	negc	local13, local13
271c8     1B 39 0A F2 | 	cmp	local14, local13 wz
271cc     14 00 90 5D |  if_ne	jmp	#LR__3870
271d0     01 3A CE F7 | 	test	local15, #1 wz
271d4     0C 00 90 AD |  if_e	jmp	#LR__3870
271d8                 | LR__3869
271d8     01 3A 06 F1 | 	add	local15, #1
271dc     1E 3B 0A F2 | 	cmp	local15, local16 wz
271e0     01 30 06 A1 |  if_e	add	local10, #1
271e4                 | LR__3870
271e4                 | LR__3871
271e4     10 3B 62 FC | 	wrlong	local15, local02
271e8     11 31 62 FC | 	wrlong	local10, local03
271ec                 | LR__3872
271ec     A7 F0 03 F6 | 	mov	ptra, fp
271f0     B2 00 A0 FD | 	call	#popregs_
271f4                 | __system__disassemble_0526_ret
271f4     2D 00 64 FD | 	ret
271f8                 | 
271f8                 | __system__emitsign_0528
271f8     00 FA 05 F6 | 	mov	result1, #0
271fc     00 14 0E F2 | 	cmp	arg02, #0 wz
27200     09 01 02 56 |  if_ne	mov	_var01, arg01
27204     01 12 06 51 |  if_ne	add	arg01, #1
27208     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2720c     01 FA 05 56 |  if_ne	mov	result1, #1
27210     00 16 0E F2 | 	cmp	arg03, #0 wz
27214     09 61 48 5C |  if_ne	wrbyte	#48, arg01
27218     01 12 06 51 |  if_ne	add	arg01, #1
2721c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
27220     02 FA 05 51 |  if_ne	add	result1, #2
27224                 | __system__emitsign_0528_ret
27224     2D 00 64 FD | 	ret
27228                 | 
27228                 | __system___gettxfunc
27228     01 4A 05 F6 | 	mov	COUNT_, #1
2722c     A8 00 A0 FD | 	call	#pushregs_
27230     A0 F8 BF FD | 	call	#__system____getftab
27234     FD 1E 0A F6 | 	mov	local01, result1 wz
27238     10 00 90 AD |  if_e	jmp	#LR__3880
2723c     08 1E 06 F1 | 	add	local01, #8
27240     0F 15 0A FB | 	rdlong	arg02, local01 wz
27244     08 1E 86 F1 | 	sub	local01, #8
27248     08 00 90 5D |  if_ne	jmp	#LR__3881
2724c                 | LR__3880
2724c     00 FA 05 F6 | 	mov	result1, #0
27250     0C 00 90 FD | 	jmp	#LR__3882
27254                 | LR__3881
27254     00 A8 04 FF 
27258     00 1E 46 F5 | 	or	local01, ##156237824
2725c     0F FB 01 F6 | 	mov	result1, local01
27260                 | LR__3882
27260     A7 F0 03 F6 | 	mov	ptra, fp
27264     B2 00 A0 FD | 	call	#popregs_
27268                 | __system___gettxfunc_ret
27268     2D 00 64 FD | 	ret
2726c                 | 
2726c                 | __system___getrxfunc
2726c     01 4A 05 F6 | 	mov	COUNT_, #1
27270     A8 00 A0 FD | 	call	#pushregs_
27274     5C F8 BF FD | 	call	#__system____getftab
27278     FD 1E 0A F6 | 	mov	local01, result1 wz
2727c     10 00 90 AD |  if_e	jmp	#LR__3890
27280     08 1E 06 F1 | 	add	local01, #8
27284     0F 15 0A FB | 	rdlong	arg02, local01 wz
27288     08 1E 86 F1 | 	sub	local01, #8
2728c     08 00 90 5D |  if_ne	jmp	#LR__3891
27290                 | LR__3890
27290     00 FA 05 F6 | 	mov	result1, #0
27294     0C 00 90 FD | 	jmp	#LR__3892
27298                 | LR__3891
27298     00 B0 04 FF 
2729c     00 1E 46 F5 | 	or	local01, ##157286400
272a0     0F FB 01 F6 | 	mov	result1, local01
272a4                 | LR__3892
272a4     A7 F0 03 F6 | 	mov	ptra, fp
272a8     B2 00 A0 FD | 	call	#popregs_
272ac                 | __system___getrxfunc_ret
272ac     2D 00 64 FD | 	ret
272b0                 | 
272b0                 | __system___getiolock_0568
272b0     01 4A 05 F6 | 	mov	COUNT_, #1
272b4     A8 00 A0 FD | 	call	#pushregs_
272b8     18 F8 BF FD | 	call	#__system____getftab
272bc     FD 1E 0A F6 | 	mov	local01, result1 wz
272c0     10 00 90 AD |  if_e	jmp	#LR__3900
272c4     08 1E 06 F1 | 	add	local01, #8
272c8     0F FB 09 FB | 	rdlong	result1, local01 wz
272cc     08 1E 86 F1 | 	sub	local01, #8
272d0     18 00 90 5D |  if_ne	jmp	#LR__3901
272d4                 | LR__3900
272d4     01 00 00 FF 
272d8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
272dc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
272e0     01 00 00 FF 
272e4     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
272e8     08 00 90 FD | 	jmp	#LR__3902
272ec                 | LR__3901
272ec     0C 1E 06 F1 | 	add	local01, #12
272f0     0F FB 01 F6 | 	mov	result1, local01
272f4                 | LR__3902
272f4     A7 F0 03 F6 | 	mov	ptra, fp
272f8     B2 00 A0 FD | 	call	#popregs_
272fc                 | __system___getiolock_0568_ret
272fc     2D 00 64 FD | 	ret
27300                 | 
27300                 | __system____ScanForChar
27300     09 01 02 F6 | 	mov	_var01, arg01
27304     09 03 02 F6 | 	mov	_var02, arg01
27308     97 06 48 FB | 	callpa	#(@LR__3911-@LR__3910)>>2,fcache_load_ptr_
2730c                 | LR__3910
2730c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
27310     01 02 06 51 |  if_ne	add	_var02, #1
27314     F4 FF 9F 5D |  if_ne	jmp	#LR__3910
27318                 | LR__3911
27318     09 03 82 F1 | 	sub	_var02, arg01
2731c     01 FB 01 F6 | 	mov	result1, _var02
27320     FD 12 0A F6 | 	mov	arg01, result1 wz
27324     00 FA 05 A6 |  if_e	mov	result1, #0
27328     B8 00 90 AD |  if_e	jmp	#LR__3918
2732c     0A 05 02 F6 | 	mov	_var03, arg02
27330     07 04 4E F7 | 	zerox	_var03, #7 wz
27334     00 FA 05 A6 |  if_e	mov	result1, #0
27338     A8 00 90 AD |  if_e	jmp	#LR__3918
2733c     01 16 16 F2 | 	cmp	arg03, #1 wc
27340     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
27344     01 16 06 86 |  if_c_and_z	mov	arg03, #1
27348     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2734c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3918
27350     09 17 1A F2 | 	cmp	arg03, arg01 wcz
27354     10 00 90 ED |  if_be	jmp	#LR__3912
27358     00 18 0E F2 | 	cmp	arg04, #0 wz
2735c     00 FA 05 A6 |  if_e	mov	result1, #0
27360     80 00 90 AD |  if_e	jmp	#LR__3918
27364     09 17 02 F6 | 	mov	arg03, arg01
27368                 | LR__3912
27368     01 16 86 F1 | 	sub	arg03, #1
2736c     00 18 0E F2 | 	cmp	arg04, #0 wz
27370     38 00 90 5D |  if_ne	jmp	#LR__3914
27374     0B 07 02 F6 | 	mov	_var04, arg03
27378     09 09 02 F6 | 	mov	_var05, arg01
2737c                 | LR__3913
2737c     04 07 12 F2 | 	cmp	_var04, _var05 wc
27380     5C 00 90 3D |  if_ae	jmp	#LR__3917
27384     03 05 02 F6 | 	mov	_var03, _var04
27388     00 05 02 F1 | 	add	_var03, _var01
2738c     02 05 C2 FA | 	rdbyte	_var03, _var03
27390     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
27394     0C 05 0A F2 | 	cmp	_var03, arg04 wz
27398     01 06 06 A1 |  if_e	add	_var04, #1
2739c     03 FB 01 A6 |  if_e	mov	result1, _var04
273a0     40 00 90 AD |  if_e	jmp	#LR__3918
273a4     01 06 06 F1 | 	add	_var04, #1
273a8     D0 FF 9F FD | 	jmp	#LR__3913
273ac                 | LR__3914
273ac     0B 07 02 F6 | 	mov	_var04, arg03
273b0                 | LR__3915
273b0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
273b4     28 00 90 1D |  if_a	jmp	#LR__3916
273b8     03 09 02 F6 | 	mov	_var05, _var04
273bc     00 09 02 F1 | 	add	_var05, _var01
273c0     04 05 C2 FA | 	rdbyte	_var03, _var05
273c4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
273c8     04 05 0A F2 | 	cmp	_var03, _var05 wz
273cc     01 06 06 A1 |  if_e	add	_var04, #1
273d0     03 FB 01 A6 |  if_e	mov	result1, _var04
273d4     0C 00 90 AD |  if_e	jmp	#LR__3918
273d8     01 06 86 F1 | 	sub	_var04, #1
273dc     D0 FF 9F FD | 	jmp	#LR__3915
273e0                 | LR__3916
273e0                 | LR__3917
273e0     00 FA 05 F6 | 	mov	result1, #0
273e4                 | LR__3918
273e4                 | __system____ScanForChar_ret
273e4     2D 00 64 FD | 	ret
273e8                 | 
273e8                 | __system___basic_dir
273e8     05 4A 05 F6 | 	mov	COUNT_, #5
273ec     A8 00 A0 FD | 	call	#pushregs_
273f0     4C F0 07 F1 | 	add	ptra, #76
273f4     04 4E 05 F1 | 	add	fp, #4
273f8     A7 12 62 FC | 	wrlong	arg01, fp
273fc     04 4E 05 F1 | 	add	fp, #4
27400     A7 14 62 FC | 	wrlong	arg02, fp
27404     04 4E 85 F1 | 	sub	fp, #4
27408     A7 14 0A FB | 	rdlong	arg02, fp wz
2740c     04 4E 85 F1 | 	sub	fp, #4
27410     04 4E 05 51 |  if_ne	add	fp, #4
27414     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27418     04 4E 85 51 |  if_ne	sub	fp, #4
2741c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
27420     70 00 90 AD |  if_e	jmp	#LR__3920
27424     03 00 00 FF 
27428     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2742c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27430     03 00 00 FF 
27434     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27438     03 00 00 5F 
2743c     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
27440     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
27444     03 00 00 5F 
27448     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2744c     18 E9 BF 5D |  if_ne	call	#__system__closedir
27450     88 01 00 FF 
27454     00 13 06 F6 | 	mov	arg01, ##@LR__5088
27458     20 E8 BF FD | 	call	#__system__opendir
2745c     03 00 00 FF 
27460     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27464     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
27468     08 4E 05 F1 | 	add	fp, #8
2746c     A7 20 02 FB | 	rdlong	local02, fp
27470     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27474     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
27478     04 4E 85 F1 | 	sub	fp, #4
2747c     A7 20 02 FB | 	rdlong	local02, fp
27480     04 4E 85 F1 | 	sub	fp, #4
27484     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27488     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2748c     03 00 00 FF 
27490     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27494                 | LR__3920
27494     03 00 00 FF 
27498     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2749c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
274a0     03 00 00 FF 
274a4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
274a8     88 01 00 AF 
274ac     02 FB 05 A6 |  if_e	mov	result1, ##@LR__5089
274b0     84 02 90 AD |  if_e	jmp	#LR__3933
274b4                 | LR__3921
274b4     03 00 00 FF 
274b8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
274bc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
274c0     03 00 00 FF 
274c4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
274c8     10 E9 BF FD | 	call	#__system__readdir
274cc     0C 4E 05 F1 | 	add	fp, #12
274d0     A7 FA 61 FC | 	wrlong	result1, fp
274d4     0C 4E 85 F1 | 	sub	fp, #12
274d8     00 FA 0D F2 | 	cmp	result1, #0 wz
274dc     38 00 90 5D |  if_ne	jmp	#LR__3922
274e0     03 00 00 FF 
274e4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
274e8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
274ec     03 00 00 FF 
274f0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
274f4     70 E8 BF FD | 	call	#__system__closedir
274f8     03 00 00 FF 
274fc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27500     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
27504     03 00 00 FF 
27508     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2750c     88 01 00 FF 
27510     04 FB 05 F6 | 	mov	result1, ##@LR__5090
27514     20 02 90 FD | 	jmp	#LR__3933
27518                 | LR__3922
27518     0C 4E 05 F1 | 	add	fp, #12
2751c     A7 12 02 FB | 	rdlong	arg01, fp
27520     0C 4E 85 F1 | 	sub	fp, #12
27524     03 00 00 FF 
27528     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2752c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27530     03 00 00 FF 
27534     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27538     10 09 B0 FD | 	call	#__system___pat_match
2753c     00 FA 0D F2 | 	cmp	result1, #0 wz
27540     70 FF 9F AD |  if_e	jmp	#LR__3921
27544     03 00 00 FF 
27548     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2754c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27550     03 00 00 FF 
27554     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27558     78 01 90 AD |  if_e	jmp	#LR__3929
2755c     0C 4E 05 F1 | 	add	fp, #12
27560     A7 12 02 FB | 	rdlong	arg01, fp
27564     04 4E 05 F1 | 	add	fp, #4
27568     A7 14 02 F6 | 	mov	arg02, fp
2756c     10 4E 85 F1 | 	sub	fp, #16
27570     6C F1 BF FD | 	call	#__system__stat
27574     40 4E 05 F1 | 	add	fp, #64
27578     A7 FA 61 FC | 	wrlong	result1, fp
2757c     40 4E 85 F1 | 	sub	fp, #64
27580     00 FA 0D F2 | 	cmp	result1, #0 wz
27584     88 01 00 5F 
27588     06 FB 05 56 |  if_ne	mov	result1, ##@LR__5091
2758c     A8 01 90 5D |  if_ne	jmp	#LR__3933
27590     18 4E 05 F1 | 	add	fp, #24
27594     A7 20 02 FB | 	rdlong	local02, fp
27598     78 00 00 FF 
2759c     00 20 06 F5 | 	and	local02, ##61440
275a0     2C 4E 05 F1 | 	add	fp, #44
275a4     A7 20 62 FC | 	wrlong	local02, fp
275a8     38 4E 85 F1 | 	sub	fp, #56
275ac     A7 20 02 FB | 	rdlong	local02, fp
275b0     0C 4E 85 F1 | 	sub	fp, #12
275b4     10 21 C2 FA | 	rdbyte	local02, local02
275b8     2E 20 0E F2 | 	cmp	local02, #46 wz
275bc     08 4E 05 A1 |  if_e	add	fp, #8
275c0     A7 04 68 AC |  if_e	wrlong	#2, fp
275c4     08 4E C5 F3 | 	sumz	fp, #8
275c8     A7 00 68 5C |  if_ne	wrlong	#0, fp
275cc     08 4E 85 51 |  if_ne	sub	fp, #8
275d0     44 4E 05 F1 | 	add	fp, #68
275d4     A7 20 02 FB | 	rdlong	local02, fp
275d8     44 4E 85 F1 | 	sub	fp, #68
275dc     08 00 00 FF 
275e0     00 20 0E F2 | 	cmp	local02, ##4096 wz
275e4     18 00 90 5D |  if_ne	jmp	#LR__3923
275e8     08 4E 05 F1 | 	add	fp, #8
275ec     A7 20 02 FB | 	rdlong	local02, fp
275f0     10 20 46 F5 | 	or	local02, #16
275f4     A7 20 62 FC | 	wrlong	local02, fp
275f8     08 4E 85 F1 | 	sub	fp, #8
275fc     AC 00 90 FD | 	jmp	#LR__3928
27600                 | LR__3923
27600     44 4E 05 F1 | 	add	fp, #68
27604     A7 20 02 FB | 	rdlong	local02, fp
27608     44 4E 85 F1 | 	sub	fp, #68
2760c     10 00 00 FF 
27610     00 20 0E F2 | 	cmp	local02, ##8192 wz
27614     44 4E 05 51 |  if_ne	add	fp, #68
27618     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2761c     44 4E 85 51 |  if_ne	sub	fp, #68
27620     18 00 00 5F 
27624     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
27628     44 4E 05 51 |  if_ne	add	fp, #68
2762c     0F 23 02 56 |  if_ne	mov	local03, local01
27630     44 4E 85 51 |  if_ne	sub	fp, #68
27634     20 00 00 5F 
27638     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
2763c     18 00 90 5D |  if_ne	jmp	#LR__3924
27640     08 4E 05 F1 | 	add	fp, #8
27644     A7 20 02 FB | 	rdlong	local02, fp
27648     04 20 46 F5 | 	or	local02, #4
2764c     A7 20 62 FC | 	wrlong	local02, fp
27650     08 4E 85 F1 | 	sub	fp, #8
27654     54 00 90 FD | 	jmp	#LR__3927
27658                 | LR__3924
27658     18 4E 05 F1 | 	add	fp, #24
2765c     A7 20 02 FB | 	rdlong	local02, fp
27660     18 4E 85 F1 | 	sub	fp, #24
27664     92 20 CE F7 | 	test	local02, #146 wz
27668     18 00 90 5D |  if_ne	jmp	#LR__3925
2766c     08 4E 05 F1 | 	add	fp, #8
27670     A7 20 02 FB | 	rdlong	local02, fp
27674     01 20 46 F5 | 	or	local02, #1
27678     A7 20 62 FC | 	wrlong	local02, fp
2767c     08 4E 85 F1 | 	sub	fp, #8
27680     28 00 90 FD | 	jmp	#LR__3926
27684                 | LR__3925
27684     44 4E 05 F1 | 	add	fp, #68
27688     A7 24 02 FB | 	rdlong	local04, fp
2768c     44 4E 85 F1 | 	sub	fp, #68
27690     08 00 00 FF 
27694     00 24 0E F2 | 	cmp	local04, ##4096 wz
27698     08 4E 05 51 |  if_ne	add	fp, #8
2769c     A7 24 02 5B |  if_ne	rdlong	local04, fp
276a0     20 24 46 55 |  if_ne	or	local04, #32
276a4     A7 24 62 5C |  if_ne	wrlong	local04, fp
276a8     08 4E 85 51 |  if_ne	sub	fp, #8
276ac                 | LR__3926
276ac                 | LR__3927
276ac                 | LR__3928
276ac     08 4E 05 F1 | 	add	fp, #8
276b0     A7 24 02 FB | 	rdlong	local04, fp
276b4     08 4E 85 F1 | 	sub	fp, #8
276b8     03 00 00 FF 
276bc     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
276c0     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
276c4     03 00 00 FF 
276c8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
276cc     0F 25 CA F7 | 	test	local04, local01 wz
276d0     E0 FD 9F AD |  if_e	jmp	#LR__3921
276d4                 | LR__3929
276d4     0C 4E 05 F1 | 	add	fp, #12
276d8     A7 12 02 FB | 	rdlong	arg01, fp
276dc     0C 4E 85 F1 | 	sub	fp, #12
276e0     09 27 02 F6 | 	mov	local05, arg01
276e4     97 06 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
276e8                 | LR__3930
276e8     13 FB C9 FA | 	rdbyte	result1, local05 wz
276ec     01 26 06 51 |  if_ne	add	local05, #1
276f0     F4 FF 9F 5D |  if_ne	jmp	#LR__3930
276f4                 | LR__3931
276f4     13 13 C2 F2 | 	subr	arg01, local05
276f8     01 12 06 F1 | 	add	arg01, #1
276fc     68 DF BF FD | 	call	#__system___gc_alloc_managed
27700     48 4E 05 F1 | 	add	fp, #72
27704     A7 FA 61 FC | 	wrlong	result1, fp
27708     48 4E 85 F1 | 	sub	fp, #72
2770c     00 FA 0D F2 | 	cmp	result1, #0 wz
27710     18 00 90 AD |  if_e	jmp	#LR__3932
27714     48 4E 05 F1 | 	add	fp, #72
27718     A7 12 02 FB | 	rdlong	arg01, fp
2771c     3C 4E 85 F1 | 	sub	fp, #60
27720     A7 14 02 FB | 	rdlong	arg02, fp
27724     0C 4E 85 F1 | 	sub	fp, #12
27728     0C 9E BF FD | 	call	#__system____builtin_strcpy
2772c                 | LR__3932
2772c     48 4E 05 F1 | 	add	fp, #72
27730     A7 FA 01 FB | 	rdlong	result1, fp
27734     48 4E 85 F1 | 	sub	fp, #72
27738                 | LR__3933
27738     A7 F0 03 F6 | 	mov	ptra, fp
2773c     B2 00 A0 FD | 	call	#popregs_
27740                 | __system___basic_dir_ret
27740     2D 00 64 FD | 	ret
27744                 | 
27744                 | __system__pack_0637
27744     09 01 02 F6 | 	mov	_var01, arg01
27748     7F 16 06 F1 | 	add	arg03, #127
2774c     04 18 CE F7 | 	test	arg04, #4 wz
27750     10 00 90 AD |  if_e	jmp	#LR__3940
27754     00 00 0E F2 | 	cmp	_var01, #0 wz
27758     16 00 C6 A9 |  if_e	decod	_var01, #22
2775c     F7 00 26 F4 | 	bith	_var01, #247
27760     B4 00 90 FD | 	jmp	#LR__3949
27764                 | LR__3940
27764     02 18 CE F7 | 	test	arg04, #2 wz
27768     00 C0 3F 5F 
2776c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
27770     00 14 06 56 |  if_ne	mov	arg02, #0
27774     A0 00 90 5D |  if_ne	jmp	#LR__3948
27778     08 18 CE F7 | 	test	arg04, #8 wz
2777c     00 00 06 56 |  if_ne	mov	_var01, #0
27780     94 00 90 5D |  if_ne	jmp	#LR__3947
27784     FF 16 56 F2 | 	cmps	arg03, #255 wc
27788     00 C0 3F 3F 
2778c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
27790     00 14 06 36 |  if_ae	mov	arg02, #0
27794     80 00 90 3D |  if_ae	jmp	#LR__3946
27798     01 16 56 F2 | 	cmps	arg03, #1 wc
2779c     6C 00 90 3D |  if_ae	jmp	#LR__3944
277a0     01 14 46 F0 | 	shr	arg02, #1
277a4     00 03 02 F6 | 	mov	_var02, _var01
277a8     01 02 06 F5 | 	and	_var02, #1
277ac     1F 02 66 F0 | 	shl	_var02, #31
277b0     01 15 42 F5 | 	or	arg02, _var02
277b4     01 00 46 F0 | 	shr	_var01, #1
277b8     97 1E 48 FB | 	callpa	#(@LR__3942-@LR__3941)>>2,fcache_load_ptr_
277bc                 | LR__3941
277bc     00 16 56 F2 | 	cmps	arg03, #0 wc
277c0     34 00 90 3D |  if_ae	jmp	#LR__3943
277c4     00 00 0E F2 | 	cmp	_var01, #0 wz
277c8     2C 00 90 AD |  if_e	jmp	#LR__3943
277cc     0A 13 02 F6 | 	mov	arg01, arg02
277d0     01 12 06 F5 | 	and	arg01, #1
277d4     01 16 06 F1 | 	add	arg03, #1
277d8     01 14 46 F0 | 	shr	arg02, #1
277dc     00 03 02 F6 | 	mov	_var02, _var01
277e0     01 02 06 F5 | 	and	_var02, #1
277e4     1F 02 66 F0 | 	shl	_var02, #31
277e8     01 15 42 F5 | 	or	arg02, _var02
277ec     09 15 42 F5 | 	or	arg02, arg01
277f0     01 00 46 F0 | 	shr	_var01, #1
277f4     C4 FF 9F FD | 	jmp	#LR__3941
277f8                 | LR__3942
277f8                 | LR__3943
277f8     00 16 56 F2 | 	cmps	arg03, #0 wc
277fc     18 00 90 3D |  if_ae	jmp	#LR__3945
27800     00 14 0E F2 | 	cmp	arg02, #0 wz
27804     6F 14 62 FD | 	wrnz	arg02
27808     0C 00 90 FD | 	jmp	#LR__3945
2780c                 | LR__3944
2780c     17 01 06 F4 | 	bitl	_var01, #279
27810     17 16 66 F0 | 	shl	arg03, #23
27814     0B 01 42 F5 | 	or	_var01, arg03
27818                 | LR__3945
27818                 | LR__3946
27818                 | LR__3947
27818                 | LR__3948
27818                 | LR__3949
27818     01 00 CE F7 | 	test	_var01, #1 wz
2781c     01 14 46 55 |  if_ne	or	arg02, #1
27820     0A 17 02 F6 | 	mov	arg03, arg02
27824     00 02 06 F6 | 	mov	_var02, #0
27828     FF FF 3F FF 
2782c     FF 15 06 F1 | 	add	arg02, ##2147483647
27830     0B 15 12 F2 | 	cmp	arg02, arg03 wc
27834     01 02 06 C6 |  if_b	mov	_var02, #1
27838     01 01 02 F1 | 	add	_var01, _var02
2783c     01 18 CE F7 | 	test	arg04, #1 wz
27840     1F 00 26 54 |  if_ne	bith	_var01, #31
27844     00 FB 01 F6 | 	mov	result1, _var01
27848                 | __system__pack_0637_ret
27848     2D 00 64 FD | 	ret
2784c                 | 
2784c                 | __system___rxtxioctl_0727
2784c     00 15 0E F2 | 	cmp	arg02, #256 wz
27850     0C 00 90 AD |  if_e	jmp	#LR__3950
27854     01 15 0E F2 | 	cmp	arg02, #257 wz
27858     1C 00 90 AD |  if_e	jmp	#LR__3951
2785c     30 00 90 FD | 	jmp	#LR__3952
27860                 | LR__3950
27860     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27864     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27868     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2786c     0B FB 61 FC | 	wrlong	result1, arg03
27870     00 FA 05 F6 | 	mov	result1, #0
27874     28 00 90 FD | 	jmp	#LR__3953
27878                 | LR__3951
27878     0B 13 02 FB | 	rdlong	arg01, arg03
2787c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27880     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27884     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27888     00 FA 05 F6 | 	mov	result1, #0
2788c     10 00 90 FD | 	jmp	#LR__3953
27890                 | LR__3952
27890     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27894     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27898     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2789c     01 FA 65 F6 | 	neg	result1, #1
278a0                 | LR__3953
278a0                 | __system___rxtxioctl_0727_ret
278a0     2D 00 64 FD | 	ret
278a4                 | 
278a4                 | __system____dummy_flush_0728
278a4     00 FA 05 F6 | 	mov	result1, #0
278a8                 | __system____dummy_flush_0728_ret
278a8     2D 00 64 FD | 	ret
278ac                 | 
278ac                 | __system___vfswrite
278ac     09 4A 05 F6 | 	mov	COUNT_, #9
278b0     A8 00 A0 FD | 	call	#pushregs_
278b4     09 1F 02 F6 | 	mov	local01, arg01
278b8     0A 21 02 F6 | 	mov	local02, arg02
278bc     0B 23 02 F6 | 	mov	local03, arg03
278c0     10 25 02 F6 | 	mov	local04, local02
278c4     08 1E 06 F1 | 	add	local01, #8
278c8     0F 13 02 FB | 	rdlong	arg01, local01
278cc     08 1E 86 F1 | 	sub	local01, #8
278d0     02 12 CE F7 | 	test	arg01, #2 wz
278d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
278d8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
278dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
278e0     01 FA 65 A6 |  if_e	neg	result1, #1
278e4     80 01 90 AD |  if_e	jmp	#LR__3966
278e8     08 1E 06 F1 | 	add	local01, #8
278ec     0F FB 01 FB | 	rdlong	result1, local01
278f0     08 1E 86 F1 | 	sub	local01, #8
278f4     40 FA CD F7 | 	test	result1, #64 wz
278f8     68 00 90 AD |  if_e	jmp	#LR__3961
278fc     08 1E 06 F1 | 	add	local01, #8
27900     0F 15 02 FB | 	rdlong	arg02, local01
27904     08 1E 86 F1 | 	sub	local01, #8
27908     80 14 CE F7 | 	test	arg02, #128 wz
2790c     54 00 90 AD |  if_e	jmp	#LR__3960
27910     30 1E 06 F1 | 	add	local01, #48
27914     0F 27 02 FB | 	rdlong	local05, local01
27918     13 29 02 F6 | 	mov	local06, local05
2791c     30 1E 86 F1 | 	sub	local01, #48
27920     13 28 46 F7 | 	zerox	local06, #19
27924     14 26 46 F0 | 	shr	local05, #20
27928     02 26 66 F0 | 	shl	local05, #2
2792c     ED 26 02 F1 | 	add	local05, __methods__
27930     13 27 02 FB | 	rdlong	local05, local05
27934     0F 13 02 F6 | 	mov	arg01, local01
27938     00 14 06 F6 | 	mov	arg02, #0
2793c     02 16 06 F6 | 	mov	arg03, #2
27940     F2 2A 02 F6 | 	mov	local07, objptr
27944     14 E5 01 F6 | 	mov	objptr, local06
27948     2D 26 62 FD | 	call	local05
2794c     15 E5 01 F6 | 	mov	objptr, local07
27950     08 1E 06 F1 | 	add	local01, #8
27954     0F 2B 02 FB | 	rdlong	local07, local01
27958     80 2A 26 F5 | 	andn	local07, #128
2795c     0F 2B 62 FC | 	wrlong	local07, local01
27960     08 1E 86 F1 | 	sub	local01, #8
27964                 | LR__3960
27964                 | LR__3961
27964     18 1E 06 F1 | 	add	local01, #24
27968     0F 2B 0A FB | 	rdlong	local07, local01 wz
2796c     18 1E 86 F1 | 	sub	local01, #24
27970     80 00 90 AD |  if_e	jmp	#LR__3963
27974     18 1E 06 F1 | 	add	local01, #24
27978     0F 27 02 FB | 	rdlong	local05, local01
2797c     13 29 02 F6 | 	mov	local06, local05
27980     18 1E 86 F1 | 	sub	local01, #24
27984     13 28 46 F7 | 	zerox	local06, #19
27988     14 26 46 F0 | 	shr	local05, #20
2798c     02 26 66 F0 | 	shl	local05, #2
27990     ED 26 02 F1 | 	add	local05, __methods__
27994     13 27 02 FB | 	rdlong	local05, local05
27998     10 15 02 F6 | 	mov	arg02, local02
2799c     11 17 02 F6 | 	mov	arg03, local03
279a0     0F 13 02 F6 | 	mov	arg01, local01
279a4     F2 2A 02 F6 | 	mov	local07, objptr
279a8     14 E5 01 F6 | 	mov	objptr, local06
279ac     2D 26 62 FD | 	call	local05
279b0     15 E5 01 F6 | 	mov	objptr, local07
279b4     FD 2C 02 F6 | 	mov	local08, result1
279b8     00 2C 56 F2 | 	cmps	local08, #0 wc
279bc     2C 00 90 3D |  if_ae	jmp	#LR__3962
279c0     08 1E 06 F1 | 	add	local01, #8
279c4     0F 2B 02 FB | 	rdlong	local07, local01
279c8     20 2A 46 F5 | 	or	local07, #32
279cc     0F 2B 62 FC | 	wrlong	local07, local01
279d0     00 2C 4E F2 | 	cmps	local08, #0 wz
279d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
279d8     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
279dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
279e0     01 FA 65 56 |  if_ne	neg	result1, #1
279e4     00 FA 05 A6 |  if_e	mov	result1, #0
279e8     7C 00 90 FD | 	jmp	#LR__3966
279ec                 | LR__3962
279ec     16 FB 01 F6 | 	mov	result1, local08
279f0     74 00 90 FD | 	jmp	#LR__3966
279f4                 | LR__3963
279f4     1C 1E 06 F1 | 	add	local01, #28
279f8     0F 2F 0A FB | 	rdlong	local09, local01 wz
279fc     1C 1E 86 F1 | 	sub	local01, #28
27a00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27a04     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27a08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27a0c     01 FA 65 A6 |  if_e	neg	result1, #1
27a10     54 00 90 AD |  if_e	jmp	#LR__3966
27a14     00 2C 06 F6 | 	mov	local08, #0
27a18                 | LR__3964
27a18     01 22 16 F2 | 	cmp	local03, #1 wc
27a1c     44 00 90 CD |  if_b	jmp	#LR__3965
27a20     17 29 02 F6 | 	mov	local06, local09
27a24     17 27 02 F6 | 	mov	local05, local09
27a28     13 28 46 F7 | 	zerox	local06, #19
27a2c     14 26 46 F0 | 	shr	local05, #20
27a30     02 26 66 F0 | 	shl	local05, #2
27a34     ED 26 02 F1 | 	add	local05, __methods__
27a38     13 27 02 FB | 	rdlong	local05, local05
27a3c     12 13 C2 FA | 	rdbyte	arg01, local04
27a40     0F 15 02 F6 | 	mov	arg02, local01
27a44     F2 2A 02 F6 | 	mov	local07, objptr
27a48     14 E5 01 F6 | 	mov	objptr, local06
27a4c     01 24 06 F1 | 	add	local04, #1
27a50     2D 26 62 FD | 	call	local05
27a54     15 E5 01 F6 | 	mov	objptr, local07
27a58     FD 2C 02 F1 | 	add	local08, result1
27a5c     01 22 86 F1 | 	sub	local03, #1
27a60     B4 FF 9F FD | 	jmp	#LR__3964
27a64                 | LR__3965
27a64     16 FB 01 F6 | 	mov	result1, local08
27a68                 | LR__3966
27a68     A7 F0 03 F6 | 	mov	ptra, fp
27a6c     B2 00 A0 FD | 	call	#popregs_
27a70                 | __system___vfswrite_ret
27a70     2D 00 64 FD | 	ret
27a74                 | 
27a74                 | __system___vfsread
27a74     03 4A 05 F6 | 	mov	COUNT_, #3
27a78     A8 00 A0 FD | 	call	#pushregs_
27a7c     28 F0 07 F1 | 	add	ptra, #40
27a80     04 4E 05 F1 | 	add	fp, #4
27a84     A7 12 62 FC | 	wrlong	arg01, fp
27a88     04 4E 05 F1 | 	add	fp, #4
27a8c     A7 14 62 FC | 	wrlong	arg02, fp
27a90     04 4E 05 F1 | 	add	fp, #4
27a94     A7 16 62 FC | 	wrlong	arg03, fp
27a98     04 4E 85 F1 | 	sub	fp, #4
27a9c     A7 FA 01 FB | 	rdlong	result1, fp
27aa0     14 4E 05 F1 | 	add	fp, #20
27aa4     A7 FA 61 FC | 	wrlong	result1, fp
27aa8     04 4E 05 F1 | 	add	fp, #4
27aac     A7 00 68 FC | 	wrlong	#0, fp
27ab0     1C 4E 85 F1 | 	sub	fp, #28
27ab4     A7 12 02 FB | 	rdlong	arg01, fp
27ab8     04 4E 85 F1 | 	sub	fp, #4
27abc     08 12 06 F1 | 	add	arg01, #8
27ac0     09 FB 01 FB | 	rdlong	result1, arg01
27ac4     01 FA CD F7 | 	test	result1, #1 wz
27ac8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27acc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27ad0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27ad4     01 FA 65 A6 |  if_e	neg	result1, #1
27ad8     74 02 90 AD |  if_e	jmp	#LR__3976
27adc     04 4E 05 F1 | 	add	fp, #4
27ae0     A7 12 02 FB | 	rdlong	arg01, fp
27ae4     04 4E 85 F1 | 	sub	fp, #4
27ae8     14 12 06 F1 | 	add	arg01, #20
27aec     09 FB 09 FB | 	rdlong	result1, arg01 wz
27af0     B8 00 90 AD |  if_e	jmp	#LR__3971
27af4     04 4E 05 F1 | 	add	fp, #4
27af8     A7 12 02 FB | 	rdlong	arg01, fp
27afc     09 17 02 F6 | 	mov	arg03, arg01
27b00     14 16 06 F1 | 	add	arg03, #20
27b04     0B 1F 02 FB | 	rdlong	local01, arg03
27b08     0F 21 02 F6 | 	mov	local02, local01
27b0c     13 1E 46 F7 | 	zerox	local01, #19
27b10     14 20 46 F0 | 	shr	local02, #20
27b14     02 20 66 F0 | 	shl	local02, #2
27b18     ED 20 02 F1 | 	add	local02, __methods__
27b1c     10 21 02 FB | 	rdlong	local02, local02
27b20     04 4E 05 F1 | 	add	fp, #4
27b24     A7 14 02 FB | 	rdlong	arg02, fp
27b28     04 4E 05 F1 | 	add	fp, #4
27b2c     A7 16 02 FB | 	rdlong	arg03, fp
27b30     0C 4E 85 F1 | 	sub	fp, #12
27b34     F2 22 02 F6 | 	mov	local03, objptr
27b38     0F E5 01 F6 | 	mov	objptr, local01
27b3c     2D 20 62 FD | 	call	local02
27b40     11 E5 01 F6 | 	mov	objptr, local03
27b44     10 4E 05 F1 | 	add	fp, #16
27b48     A7 FA 61 FC | 	wrlong	result1, fp
27b4c     10 4E 85 F1 | 	sub	fp, #16
27b50     00 FA 55 F2 | 	cmps	result1, #0 wc
27b54     44 00 90 3D |  if_ae	jmp	#LR__3970
27b58     04 4E 05 F1 | 	add	fp, #4
27b5c     A7 22 02 FB | 	rdlong	local03, fp
27b60     11 1F 02 F6 | 	mov	local01, local03
27b64     08 22 06 F1 | 	add	local03, #8
27b68     11 21 02 FB | 	rdlong	local02, local03
27b6c     20 20 46 F5 | 	or	local02, #32
27b70     08 1E 06 F1 | 	add	local01, #8
27b74     0F 21 62 FC | 	wrlong	local02, local01
27b78     0C 4E 05 F1 | 	add	fp, #12
27b7c     A7 12 0A FB | 	rdlong	arg01, fp wz
27b80     10 4E 85 F1 | 	sub	fp, #16
27b84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27b88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27b8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27b90     01 FA 65 56 |  if_ne	neg	result1, #1
27b94     00 FA 05 A6 |  if_e	mov	result1, #0
27b98     B4 01 90 FD | 	jmp	#LR__3976
27b9c                 | LR__3970
27b9c     10 4E 05 F1 | 	add	fp, #16
27ba0     A7 FA 01 FB | 	rdlong	result1, fp
27ba4     10 4E 85 F1 | 	sub	fp, #16
27ba8     A4 01 90 FD | 	jmp	#LR__3976
27bac                 | LR__3971
27bac     04 4E 05 F1 | 	add	fp, #4
27bb0     A7 12 02 FB | 	rdlong	arg01, fp
27bb4     20 12 06 F1 | 	add	arg01, #32
27bb8     09 13 0A FB | 	rdlong	arg01, arg01 wz
27bbc     14 4E 05 F1 | 	add	fp, #20
27bc0     A7 12 62 FC | 	wrlong	arg01, fp
27bc4     18 4E 85 F1 | 	sub	fp, #24
27bc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27bcc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27bd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27bd4     01 FA 65 A6 |  if_e	neg	result1, #1
27bd8     74 01 90 AD |  if_e	jmp	#LR__3976
27bdc     04 4E 05 F1 | 	add	fp, #4
27be0     A7 22 02 FB | 	rdlong	local03, fp
27be4     04 4E 85 F1 | 	sub	fp, #4
27be8     28 22 06 F1 | 	add	local03, #40
27bec     11 21 0A FB | 	rdlong	local02, local03 wz
27bf0     7C 00 90 AD |  if_e	jmp	#LR__3973
27bf4     04 4E 05 F1 | 	add	fp, #4
27bf8     A7 12 02 FB | 	rdlong	arg01, fp
27bfc     09 23 02 F6 | 	mov	local03, arg01
27c00     28 22 06 F1 | 	add	local03, #40
27c04     11 1F 02 FB | 	rdlong	local01, local03
27c08     0F 21 02 F6 | 	mov	local02, local01
27c0c     13 1E 46 F7 | 	zerox	local01, #19
27c10     14 20 46 F0 | 	shr	local02, #20
27c14     02 20 66 F0 | 	shl	local02, #2
27c18     ED 20 02 F1 | 	add	local02, __methods__
27c1c     10 21 02 FB | 	rdlong	local02, local02
27c20     20 4E 05 F1 | 	add	fp, #32
27c24     A7 16 02 F6 | 	mov	arg03, fp
27c28     24 4E 85 F1 | 	sub	fp, #36
27c2c     00 15 06 F6 | 	mov	arg02, #256
27c30     F2 22 02 F6 | 	mov	local03, objptr
27c34     0F E5 01 F6 | 	mov	objptr, local01
27c38     2D 20 62 FD | 	call	local02
27c3c     11 E5 01 F6 | 	mov	objptr, local03
27c40     10 4E 05 F1 | 	add	fp, #16
27c44     A7 FA 61 FC | 	wrlong	result1, fp
27c48     00 FA 4D F2 | 	cmps	result1, #0 wz
27c4c     10 4E 85 F1 | 	sub	fp, #16
27c50     1C 00 90 5D |  if_ne	jmp	#LR__3972
27c54     24 4E 05 F1 | 	add	fp, #36
27c58     A7 20 02 FB | 	rdlong	local02, fp
27c5c     24 4E 85 F1 | 	sub	fp, #36
27c60     02 20 CE F7 | 	test	local02, #2 wz
27c64     20 4E 05 51 |  if_ne	add	fp, #32
27c68     A7 02 68 5C |  if_ne	wrlong	#1, fp
27c6c     20 4E 85 51 |  if_ne	sub	fp, #32
27c70                 | LR__3972
27c70                 | LR__3973
27c70     10 4E 05 F1 | 	add	fp, #16
27c74     A7 00 68 FC | 	wrlong	#0, fp
27c78     10 4E 85 F1 | 	sub	fp, #16
27c7c                 | LR__3974
27c7c     0C 4E 05 F1 | 	add	fp, #12
27c80     A7 22 02 FB | 	rdlong	local03, fp
27c84     0C 4E 85 F1 | 	sub	fp, #12
27c88     01 22 16 F2 | 	cmp	local03, #1 wc
27c8c     B4 00 90 CD |  if_b	jmp	#LR__3975
27c90     18 4E 05 F1 | 	add	fp, #24
27c94     A7 20 02 FB | 	rdlong	local02, fp
27c98     10 23 02 F6 | 	mov	local03, local02
27c9c     13 22 46 F7 | 	zerox	local03, #19
27ca0     14 20 46 F0 | 	shr	local02, #20
27ca4     02 20 66 F0 | 	shl	local02, #2
27ca8     ED 20 02 F1 | 	add	local02, __methods__
27cac     10 21 02 FB | 	rdlong	local02, local02
27cb0     14 4E 85 F1 | 	sub	fp, #20
27cb4     A7 12 02 FB | 	rdlong	arg01, fp
27cb8     04 4E 85 F1 | 	sub	fp, #4
27cbc     F2 1E 02 F6 | 	mov	local01, objptr
27cc0     11 E5 01 F6 | 	mov	objptr, local03
27cc4     2D 20 62 FD | 	call	local02
27cc8     0F E5 01 F6 | 	mov	objptr, local01
27ccc     14 4E 05 F1 | 	add	fp, #20
27cd0     A7 FA 61 FC | 	wrlong	result1, fp
27cd4     14 4E 85 F1 | 	sub	fp, #20
27cd8     00 FA 55 F2 | 	cmps	result1, #0 wc
27cdc     64 00 90 CD |  if_b	jmp	#LR__3975
27ce0     1C 4E 05 F1 | 	add	fp, #28
27ce4     A7 22 02 FB | 	rdlong	local03, fp
27ce8     11 21 02 F6 | 	mov	local02, local03
27cec     01 20 06 F1 | 	add	local02, #1
27cf0     A7 20 62 FC | 	wrlong	local02, fp
27cf4     08 4E 85 F1 | 	sub	fp, #8
27cf8     A7 20 02 FB | 	rdlong	local02, fp
27cfc     11 21 42 FC | 	wrbyte	local02, local03
27d00     04 4E 85 F1 | 	sub	fp, #4
27d04     A7 22 02 FB | 	rdlong	local03, fp
27d08     01 22 06 F1 | 	add	local03, #1
27d0c     A7 22 62 FC | 	wrlong	local03, fp
27d10     04 4E 85 F1 | 	sub	fp, #4
27d14     A7 22 02 FB | 	rdlong	local03, fp
27d18     01 22 86 F1 | 	sub	local03, #1
27d1c     A7 22 62 FC | 	wrlong	local03, fp
27d20     14 4E 05 F1 | 	add	fp, #20
27d24     A7 22 0A FB | 	rdlong	local03, fp wz
27d28     20 4E 85 F1 | 	sub	fp, #32
27d2c     4C FF 9F AD |  if_e	jmp	#LR__3974
27d30     14 4E 05 F1 | 	add	fp, #20
27d34     A7 20 02 FB | 	rdlong	local02, fp
27d38     14 4E 85 F1 | 	sub	fp, #20
27d3c     0A 20 0E F2 | 	cmp	local02, #10 wz
27d40     38 FF 9F 5D |  if_ne	jmp	#LR__3974
27d44                 | LR__3975
27d44     10 4E 05 F1 | 	add	fp, #16
27d48     A7 FA 01 FB | 	rdlong	result1, fp
27d4c     10 4E 85 F1 | 	sub	fp, #16
27d50                 | LR__3976
27d50     A7 F0 03 F6 | 	mov	ptra, fp
27d54     B2 00 A0 FD | 	call	#popregs_
27d58                 | __system___vfsread_ret
27d58     2D 00 64 FD | 	ret
27d5c                 | 
27d5c                 | __system____default_filbuf
27d5c     04 4A 05 F6 | 	mov	COUNT_, #4
27d60     A8 00 A0 FD | 	call	#pushregs_
27d64     09 1F 02 F6 | 	mov	local01, arg01
27d68     0F 21 02 FB | 	rdlong	local02, local01
27d6c     0C 20 06 F1 | 	add	local02, #12
27d70     10 FB 09 FB | 	rdlong	result1, local02 wz
27d74     0C 20 86 F1 | 	sub	local02, #12
27d78     20 00 90 5D |  if_ne	jmp	#LR__3980
27d7c     14 20 06 F1 | 	add	local02, #20
27d80     10 FB 01 F6 | 	mov	result1, local02
27d84     04 20 86 F1 | 	sub	local02, #4
27d88     10 FB 61 FC | 	wrlong	result1, local02
27d8c     04 20 86 F1 | 	sub	local02, #4
27d90     02 00 80 FF 
27d94     10 01 68 FC | 	wrlong	##1024, local02
27d98     0C 20 86 F1 | 	sub	local02, #12
27d9c                 | LR__3980
27d9c     14 1E 06 F1 | 	add	local01, #20
27da0     0F 23 02 FB | 	rdlong	local03, local01
27da4     11 25 02 F6 | 	mov	local04, local03
27da8     14 1E 86 F1 | 	sub	local01, #20
27dac     13 24 46 F7 | 	zerox	local04, #19
27db0     14 22 46 F0 | 	shr	local03, #20
27db4     02 22 66 F0 | 	shl	local03, #2
27db8     ED 22 02 F1 | 	add	local03, __methods__
27dbc     11 23 02 FB | 	rdlong	local03, local03
27dc0     10 20 06 F1 | 	add	local02, #16
27dc4     10 15 02 FB | 	rdlong	arg02, local02
27dc8     04 20 86 F1 | 	sub	local02, #4
27dcc     10 17 02 FB | 	rdlong	arg03, local02
27dd0     0C 20 86 F1 | 	sub	local02, #12
27dd4     0F 13 02 F6 | 	mov	arg01, local01
27dd8     F2 1E 02 F6 | 	mov	local01, objptr
27ddc     12 E5 01 F6 | 	mov	objptr, local04
27de0     2D 22 62 FD | 	call	local03
27de4     0F E5 01 F6 | 	mov	objptr, local01
27de8     FD 24 02 F6 | 	mov	local04, result1
27dec     00 24 56 F2 | 	cmps	local04, #0 wc
27df0     01 FA 65 C6 |  if_b	neg	result1, #1
27df4     28 00 90 CD |  if_b	jmp	#LR__3981
27df8     10 25 62 FC | 	wrlong	local04, local02
27dfc     10 20 06 F1 | 	add	local02, #16
27e00     10 23 02 FB | 	rdlong	local03, local02
27e04     0C 20 86 F1 | 	sub	local02, #12
27e08     10 23 62 FC | 	wrlong	local03, local02
27e0c     04 20 06 F1 | 	add	local02, #4
27e10     10 23 02 FB | 	rdlong	local03, local02
27e14     01 22 46 F5 | 	or	local03, #1
27e18     10 23 62 FC | 	wrlong	local03, local02
27e1c     12 FB 01 F6 | 	mov	result1, local04
27e20                 | LR__3981
27e20     A7 F0 03 F6 | 	mov	ptra, fp
27e24     B2 00 A0 FD | 	call	#popregs_
27e28                 | __system____default_filbuf_ret
27e28     2D 00 64 FD | 	ret
27e2c                 | 
27e2c                 | __system__getlower_1117
27e2c     41 12 56 F2 | 	cmps	arg01, #65 wc
27e30     10 00 90 CD |  if_b	jmp	#LR__3990
27e34     5B 12 56 F2 | 	cmps	arg01, #91 wc
27e38     09 FB 01 C6 |  if_b	mov	result1, arg01
27e3c     20 FA 05 C1 |  if_b	add	result1, #32
27e40     04 00 90 CD |  if_b	jmp	#__system__getlower_1117_ret
27e44                 | LR__3990
27e44     09 FB 01 F6 | 	mov	result1, arg01
27e48                 | __system__getlower_1117_ret
27e48     2D 00 64 FD | 	ret
27e4c                 | 
27e4c                 | __system___pat_match
27e4c     08 4A 05 F6 | 	mov	COUNT_, #8
27e50     A8 00 A0 FD | 	call	#pushregs_
27e54     09 1F 02 F6 | 	mov	local01, arg01
27e58                 | LR__4000
27e58     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
27e5c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
27e60     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
27e64     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27e68     2C 00 90 AD |  if_e	jmp	#LR__4001
27e6c     0A 13 C2 FA | 	rdbyte	arg01, arg02
27e70     B8 FF BF FD | 	call	#__system__getlower_1117
27e74     FD 22 02 F6 | 	mov	local03, result1
27e78     0F 13 C2 FA | 	rdbyte	arg01, local01
27e7c     AC FF BF FD | 	call	#__system__getlower_1117
27e80     11 FB 09 F2 | 	cmp	result1, local03 wz
27e84     00 FA 05 56 |  if_ne	mov	result1, #0
27e88     FC 00 90 5D |  if_ne	jmp	#LR__4009
27e8c     01 1E 06 F1 | 	add	local01, #1
27e90     01 14 06 F1 | 	add	arg02, #1
27e94     C0 FF 9F FD | 	jmp	#LR__4000
27e98                 | LR__4001
27e98     0A 23 C2 FA | 	rdbyte	local03, arg02
27e9c     2A 22 0E F2 | 	cmp	local03, #42 wz
27ea0     D4 00 90 5D |  if_ne	jmp	#LR__4008
27ea4     01 14 06 F1 | 	add	arg02, #1
27ea8     0A 21 C2 FA | 	rdbyte	local02, arg02
27eac     01 14 86 F1 | 	sub	arg02, #1
27eb0     2E 20 0E F2 | 	cmp	local02, #46 wz
27eb4     28 00 90 5D |  if_ne	jmp	#LR__4002
27eb8     02 14 06 F1 | 	add	arg02, #2
27ebc     0A 21 C2 FA | 	rdbyte	local02, arg02
27ec0     02 14 86 F1 | 	sub	arg02, #2
27ec4     2A 20 0E F2 | 	cmp	local02, #42 wz
27ec8     03 14 06 A1 |  if_e	add	arg02, #3
27ecc     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
27ed0     03 14 86 A1 |  if_e	sub	arg02, #3
27ed4     12 27 0A A6 |  if_e	mov	local05, local04 wz
27ed8     01 FA 05 A6 |  if_e	mov	result1, #1
27edc     A8 00 90 AD |  if_e	jmp	#LR__4009
27ee0                 | LR__4002
27ee0     01 14 06 F1 | 	add	arg02, #1
27ee4     00 28 06 F6 | 	mov	local06, #0
27ee8     97 1E 48 FB | 	callpa	#(@LR__4005-@LR__4003)>>2,fcache_load_ptr_
27eec                 | LR__4003
27eec     14 2B 02 F6 | 	mov	local07, local06
27ef0     0A 2B 02 F1 | 	add	local07, arg02
27ef4     15 2B CA FA | 	rdbyte	local07, local07 wz
27ef8     14 27 02 56 |  if_ne	mov	local05, local06
27efc     01 26 06 51 |  if_ne	add	local05, #1
27f00     13 29 02 56 |  if_ne	mov	local06, local05
27f04     E4 FF 9F 5D |  if_ne	jmp	#LR__4003
27f08     00 2C 06 F6 | 	mov	local08, #0
27f0c                 | LR__4004
27f0c     16 2B 02 F6 | 	mov	local07, local08
27f10     0F 2B 02 F1 | 	add	local07, local01
27f14     15 2B CA FA | 	rdbyte	local07, local07 wz
27f18     16 27 02 56 |  if_ne	mov	local05, local08
27f1c     01 26 06 51 |  if_ne	add	local05, #1
27f20     13 2D 02 56 |  if_ne	mov	local08, local05
27f24     E4 FF 9F 5D |  if_ne	jmp	#LR__4004
27f28                 | LR__4005
27f28     14 2D 52 F2 | 	cmps	local08, local06 wc
27f2c     00 FA 05 C6 |  if_b	mov	result1, #0
27f30     54 00 90 CD |  if_b	jmp	#LR__4009
27f34     16 21 02 F6 | 	mov	local02, local08
27f38     14 21 82 F1 | 	sub	local02, local06
27f3c     10 1F 02 F1 | 	add	local01, local02
27f40                 | LR__4006
27f40     01 28 56 F2 | 	cmps	local06, #1 wc
27f44     30 00 90 CD |  if_b	jmp	#LR__4007
27f48     0F 13 C2 FA | 	rdbyte	arg01, local01
27f4c     DC FE BF FD | 	call	#__system__getlower_1117
27f50     FD 2C 02 F6 | 	mov	local08, result1
27f54     0A 13 C2 FA | 	rdbyte	arg01, arg02
27f58     D0 FE BF FD | 	call	#__system__getlower_1117
27f5c     FD 2C 0A F2 | 	cmp	local08, result1 wz
27f60     00 FA 05 56 |  if_ne	mov	result1, #0
27f64     20 00 90 5D |  if_ne	jmp	#LR__4009
27f68     01 1E 06 F1 | 	add	local01, #1
27f6c     01 14 06 F1 | 	add	arg02, #1
27f70     01 28 86 F1 | 	sub	local06, #1
27f74     C8 FF 9F FD | 	jmp	#LR__4006
27f78                 | LR__4007
27f78                 | LR__4008
27f78     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27f7c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27f80     01 FA 05 A6 |  if_e	mov	result1, #1
27f84     00 FA 05 56 |  if_ne	mov	result1, #0
27f88                 | LR__4009
27f88     A7 F0 03 F6 | 	mov	ptra, fp
27f8c     B2 00 A0 FD | 	call	#popregs_
27f90                 | __system___pat_match_ret
27f90     2D 00 64 FD | 	ret
27f94                 | 
27f94                 | _fatfs_cc_ff_uni2oem
27f94     00 00 06 F6 | 	mov	_var01, #0
27f98     80 12 16 F2 | 	cmp	arg01, #128 wc
27f9c     09 01 02 C6 |  if_b	mov	_var01, arg01
27fa0     58 00 90 CD |  if_b	jmp	#LR__4014
27fa4     80 00 00 FF 
27fa8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27fac     4C 00 90 3D |  if_ae	jmp	#LR__4013
27fb0     0A FB 31 F9 | 	getword	result1, arg02, #0
27fb4     01 00 00 FF 
27fb8     52 FB 0D F2 | 	cmp	result1, ##850 wz
27fbc     3C 00 90 5D |  if_ne	jmp	#LR__4013
27fc0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
27fc0     00 00 06 F6 | 	mov	_var01, #0
27fc4     97 14 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
27fc8                 | LR__4010
27fc8     00 FB 31 F9 | 	getword	result1, _var01, #0
27fcc     80 FA 15 F2 | 	cmp	result1, #128 wc
27fd0     1C 00 90 3D |  if_ae	jmp	#LR__4012
27fd4     00 FB 31 F9 | 	getword	result1, _var01, #0
27fd8     01 FA 65 F0 | 	shl	result1, #1
27fdc     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
27fe0     FD FA E1 FA | 	rdword	result1, result1
27fe4     FD 12 0A F2 | 	cmp	arg01, result1 wz
27fe8     01 00 06 51 |  if_ne	add	_var01, #1
27fec     D8 FF 9F 5D |  if_ne	jmp	#LR__4010
27ff0                 | LR__4011
27ff0                 | LR__4012
27ff0     00 01 32 F9 | 	getword	_var01, _var01, #0
27ff4     80 00 06 F1 | 	add	_var01, #128
27ff8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
27ffc                 | LR__4013
27ffc                 | LR__4014
27ffc                 | ' 			c = (c + 0x80) & 0xFF;
27ffc                 | ' 		}
27ffc                 | ' 	}
27ffc                 | ' 
27ffc                 | ' 	return c;
27ffc     00 FB 01 F6 | 	mov	result1, _var01
28000                 | _fatfs_cc_ff_uni2oem_ret
28000     2D 00 64 FD | 	ret
28004                 | 
28004                 | _fatfs_cc_ff_oem2uni
28004     00 00 06 F6 | 	mov	_var01, #0
28008     09 FB 31 F9 | 	getword	result1, arg01, #0
2800c     80 FA 15 F2 | 	cmp	result1, #128 wc
28010     09 01 02 C6 |  if_b	mov	_var01, arg01
28014     2C 00 90 CD |  if_b	jmp	#LR__4021
28018     0A 15 32 F9 | 	getword	arg02, arg02, #0
2801c     01 00 00 FF 
28020     52 15 0E F2 | 	cmp	arg02, ##850 wz
28024     1C 00 90 5D |  if_ne	jmp	#LR__4020
28028     09 FB 31 F9 | 	getword	result1, arg01, #0
2802c     00 FB 15 F2 | 	cmp	result1, #256 wc
28030     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
28034     80 12 86 C1 |  if_b	sub	arg01, #128
28038     01 12 66 C0 |  if_b	shl	arg01, #1
2803c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
28040     09 01 E2 CA |  if_b	rdword	_var01, arg01
28044                 | LR__4020
28044                 | LR__4021
28044                 | ' 		}
28044                 | ' 	}
28044                 | ' 
28044                 | ' 	return c;
28044     00 FB 01 F6 | 	mov	result1, _var01
28048                 | _fatfs_cc_ff_oem2uni_ret
28048     2D 00 64 FD | 	ret
2804c                 | 
2804c                 | _fatfs_cc_ff_wtoupper
2804c     09 01 02 F6 | 	mov	_var01, arg01
28050     80 00 00 FF 
28054     00 00 16 F2 | 	cmp	_var01, ##65536 wc
28058     60 01 90 3D |  if_ae	jmp	#LR__4043
2805c     00 03 02 F6 | 	mov	_var02, _var01
28060     01 01 32 F9 | 	getword	_var01, _var02, #0
28064     08 00 00 FF 
28068     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2806c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
28070     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
28074     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
28078     01 00 00 3F 
2807c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
28080     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
28084     01 00 00 3F 
28088     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2808c     02 07 02 F6 | 	mov	_var04, _var03
28090                 | ' 		uc = (WORD)uni;
28090                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
28090                 | ' 		for (;;) {
28090                 | LR__4030
28090     03 09 E2 FA | 	rdword	_var05, _var04
28094     04 05 02 F6 | 	mov	_var03, _var05
28098     0F 04 4E F7 | 	zerox	_var03, #15 wz
2809c     02 06 06 F1 | 	add	_var04, #2
280a0     14 01 90 AD |  if_e	jmp	#LR__4042
280a4     01 05 32 F9 | 	getword	_var03, _var02, #0
280a8     04 01 32 F9 | 	getword	_var01, _var05, #0
280ac     00 05 12 F2 | 	cmp	_var03, _var01 wc
280b0     04 01 90 CD |  if_b	jmp	#LR__4042
280b4     03 0B E2 FA | 	rdword	_var06, _var04
280b8     05 0D 32 F9 | 	getword	_var07, _var06, #0
280bc     08 0C 46 F0 | 	shr	_var07, #8
280c0     05 0B 32 F9 | 	getword	_var06, _var06, #0
280c4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
280c8     01 05 32 F9 | 	getword	_var03, _var02, #0
280cc     04 0F 32 F9 | 	getword	_var08, _var05, #0
280d0     05 01 32 F9 | 	getword	_var01, _var06, #0
280d4     00 0F 02 F1 | 	add	_var08, _var01
280d8     07 05 52 F2 | 	cmps	_var03, _var08 wc
280dc     02 06 06 F1 | 	add	_var04, #2
280e0     C4 00 90 3D |  if_ae	jmp	#LR__4041
280e4                 | ' 				switch (cmd) {
280e4     06 11 32 F9 | 	getword	_var09, _var07, #0
280e8     09 10 26 F3 | 	fle	_var09, #9
280ec     30 10 62 FD | 	jmprel	_var09
280f0                 | LR__4031
280f0     24 00 90 FD | 	jmp	#LR__4032
280f4     3C 00 90 FD | 	jmp	#LR__4033
280f8     54 00 90 FD | 	jmp	#LR__4034
280fc     5C 00 90 FD | 	jmp	#LR__4035
28100     64 00 90 FD | 	jmp	#LR__4036
28104     6C 00 90 FD | 	jmp	#LR__4037
28108     74 00 90 FD | 	jmp	#LR__4038
2810c     7C 00 90 FD | 	jmp	#LR__4039
28110     84 00 90 FD | 	jmp	#LR__4040
28114     A0 00 90 FD | 	jmp	#LR__4042
28118                 | LR__4032
28118     01 03 32 F9 | 	getword	_var02, _var02, #0
2811c     04 09 32 F9 | 	getword	_var05, _var05, #0
28120     04 03 82 F1 | 	sub	_var02, _var05
28124     01 02 66 F0 | 	shl	_var02, #1
28128     03 03 02 F1 | 	add	_var02, _var04
2812c     01 03 E2 FA | 	rdword	_var02, _var02
28130     84 00 90 FD | 	jmp	#LR__4042
28134                 | LR__4033
28134     01 05 32 F9 | 	getword	_var03, _var02, #0
28138     01 03 32 F9 | 	getword	_var02, _var02, #0
2813c     04 09 32 F9 | 	getword	_var05, _var05, #0
28140     04 03 82 F1 | 	sub	_var02, _var05
28144     01 02 06 F5 | 	and	_var02, #1
28148     02 03 C2 F2 | 	subr	_var02, _var03
2814c     68 00 90 FD | 	jmp	#LR__4042
28150                 | LR__4034
28150     01 03 32 F9 | 	getword	_var02, _var02, #0
28154     10 02 86 F1 | 	sub	_var02, #16
28158     5C 00 90 FD | 	jmp	#LR__4042
2815c                 | LR__4035
2815c     01 03 32 F9 | 	getword	_var02, _var02, #0
28160     20 02 86 F1 | 	sub	_var02, #32
28164     50 00 90 FD | 	jmp	#LR__4042
28168                 | LR__4036
28168     01 03 32 F9 | 	getword	_var02, _var02, #0
2816c     30 02 86 F1 | 	sub	_var02, #48
28170     44 00 90 FD | 	jmp	#LR__4042
28174                 | LR__4037
28174     01 03 32 F9 | 	getword	_var02, _var02, #0
28178     1A 02 86 F1 | 	sub	_var02, #26
2817c     38 00 90 FD | 	jmp	#LR__4042
28180                 | LR__4038
28180     01 03 32 F9 | 	getword	_var02, _var02, #0
28184     08 02 06 F1 | 	add	_var02, #8
28188     2C 00 90 FD | 	jmp	#LR__4042
2818c                 | LR__4039
2818c     01 03 32 F9 | 	getword	_var02, _var02, #0
28190     50 02 86 F1 | 	sub	_var02, #80
28194     20 00 90 FD | 	jmp	#LR__4042
28198                 | LR__4040
28198     01 03 32 F9 | 	getword	_var02, _var02, #0
2819c     0E 00 00 FF 
281a0     60 02 86 F1 | 	sub	_var02, ##7264
281a4                 | ' 				}
281a4                 | ' 				break;
281a4     10 00 90 FD | 	jmp	#LR__4042
281a8                 | LR__4041
281a8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
281ac     02 0A 06 AA |  if_e	mul	_var06, #2
281b0     05 07 02 A1 |  if_e	add	_var04, _var06
281b4     D8 FE 9F FD | 	jmp	#LR__4030
281b8                 | LR__4042
281b8     01 01 32 F9 | 	getword	_var01, _var02, #0
281bc                 | LR__4043
281bc                 | ' 		}
281bc                 | ' 		uni = uc;
281bc                 | ' 	}
281bc                 | ' 
281bc                 | ' 	return uni;
281bc     00 FB 01 F6 | 	mov	result1, _var01
281c0                 | _fatfs_cc_ff_wtoupper_ret
281c0     2D 00 64 FD | 	ret
281c4                 | 
281c4                 | _fatfs_cc_strncpy
281c4     09 01 02 F6 | 	mov	_var01, arg01
281c8     97 12 48 FB | 	callpa	#(@LR__4051-@LR__4050)>>2,fcache_load_ptr_
281cc                 | ' 
281cc                 | ' 	dscan = dst;
281cc                 | ' 	sscan = src;
281cc                 | ' 	count = n;
281cc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
281cc                 | LR__4050
281cc     01 16 86 F1 | 	sub	arg03, #1
281d0     00 16 56 F2 | 	cmps	arg03, #0 wc
281d4     18 00 90 CD |  if_b	jmp	#LR__4052
281d8     0A FB C1 FA | 	rdbyte	result1, arg02
281dc     00 FB 41 FC | 	wrbyte	result1, _var01
281e0     01 14 06 F1 | 	add	arg02, #1
281e4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
281e8                 | ' 		continue;
281e8     01 00 06 F1 | 	add	_var01, #1
281ec     DC FF 9F 5D |  if_ne	jmp	#LR__4050
281f0                 | LR__4051
281f0                 | LR__4052
281f0     97 0C 48 FB | 	callpa	#(@LR__4054-@LR__4053)>>2,fcache_load_ptr_
281f4                 | ' 	while (--count >= 0)
281f4                 | LR__4053
281f4     01 16 86 F1 | 	sub	arg03, #1
281f8     00 16 56 F2 | 	cmps	arg03, #0 wc
281fc     00 03 02 36 |  if_ae	mov	_var02, _var01
28200     01 00 06 31 |  if_ae	add	_var01, #1
28204     01 01 48 3C |  if_ae	wrbyte	#0, _var02
28208     E8 FF 9F 3D |  if_ae	jmp	#LR__4053
2820c                 | LR__4054
2820c                 | ' 		*dscan++ = '\0';
2820c                 | ' 	return(dst);
2820c     09 FB 01 F6 | 	mov	result1, arg01
28210                 | _fatfs_cc_strncpy_ret
28210     2D 00 64 FD | 	ret
28214                 | 
28214                 | _fatfs_cc_memcmp
28214                 | ' 	for (n = size; n > 0; n--)
28214     00 16 0E F2 | 	cmp	arg03, #0 wz
28218     28 00 90 AD |  if_e	jmp	#LR__4061
2821c                 | LR__4060
2821c     09 01 C2 FA | 	rdbyte	_var01, arg01
28220     0A 03 C2 FA | 	rdbyte	_var02, arg02
28224     01 01 0A F2 | 	cmp	_var01, _var02 wz
28228     01 12 06 A1 |  if_e	add	arg01, #1
2822c     01 14 06 A1 |  if_e	add	arg02, #1
28230                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
28230     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
28234     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
28238     01 FB 81 51 |  if_ne	sub	result1, _var02
2823c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
28240     F6 17 6E FB | 	djnz	arg03, #LR__4060
28244                 | LR__4061
28244                 | ' 
28244                 | ' 	return(0);
28244     00 FA 05 F6 | 	mov	result1, #0
28248                 | _fatfs_cc_memcmp_ret
28248     2D 00 64 FD | 	ret
2824c                 | 
2824c                 | _fatfs_cc_strncmp
2824c     09 01 0A F6 | 	mov	_var01, arg01 wz
28250     14 00 90 5D |  if_ne	jmp	#LR__4070
28254                 | ' 		return scan2 ? -1 : 0;
28254     00 14 0E F2 | 	cmp	arg02, #0 wz
28258     01 02 66 56 |  if_ne	neg	_var02, #1
2825c     00 02 06 A6 |  if_e	mov	_var02, #0
28260     01 FB 01 F6 | 	mov	result1, _var02
28264     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
28268                 | LR__4070
28268     00 14 0E F2 | 	cmp	arg02, #0 wz
2826c     01 FA 05 A6 |  if_e	mov	result1, #1
28270     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
28274     0B 05 02 F6 | 	mov	_var03, arg03
28278     97 16 48 FB | 	callpa	#(@LR__4072-@LR__4071)>>2,fcache_load_ptr_
2827c                 | ' 	count = n;
2827c                 | ' 	do {
2827c                 | LR__4071
2827c     00 07 C2 FA | 	rdbyte	_var04, _var01
28280     0A 09 02 F6 | 	mov	_var05, arg02
28284     04 0B C2 FA | 	rdbyte	_var06, _var05
28288     01 04 86 F1 | 	sub	_var03, #1
2828c     00 04 56 F2 | 	cmps	_var03, #0 wc
28290     01 00 06 F1 | 	add	_var01, #1
28294     01 14 06 F1 | 	add	arg02, #1
28298     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2829c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4073
282a0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
282a4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4071
282a8                 | LR__4072
282a8                 | LR__4073
282a8     00 04 56 F2 | 	cmps	_var03, #0 wc
282ac                 | ' 		return(0);
282ac     00 FA 05 C6 |  if_b	mov	result1, #0
282b0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
282b4     05 07 0A F2 | 	cmp	_var04, _var06 wz
282b8                 | ' 		return(0);
282b8     00 FA 05 A6 |  if_e	mov	result1, #0
282bc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
282c0     00 06 0E F2 | 	cmp	_var04, #0 wz
282c4                 | ' 		return(-1);
282c4     01 FA 65 A6 |  if_e	neg	result1, #1
282c8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
282cc     00 0A 0E F2 | 	cmp	_var06, #0 wz
282d0                 | ' 		return(1);
282d0     01 FA 05 A6 |  if_e	mov	result1, #1
282d4                 | ' 		return(c1 - c2);
282d4     03 FB 01 56 |  if_ne	mov	result1, _var04
282d8     05 FB 81 51 |  if_ne	sub	result1, _var06
282dc                 | _fatfs_cc_strncmp_ret
282dc     2D 00 64 FD | 	ret
282e0                 | 
282e0                 | _fatfs_cc_strchr
282e0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
282e0                 | ' 	while ((c = *s++) != (char) charwanted)
282e0                 | LR__4080
282e0     09 01 02 F6 | 	mov	_var01, arg01
282e4     00 03 C2 FA | 	rdbyte	_var02, _var01
282e8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
282ec     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
282f0     03 05 0A F2 | 	cmp	_var03, _var04 wz
282f4     01 12 06 F1 | 	add	arg01, #1
282f8     14 00 90 AD |  if_e	jmp	#LR__4081
282fc     01 05 02 F6 | 	mov	_var03, _var02
28300     07 04 4E F7 | 	zerox	_var03, #7 wz
28304     00 FA 05 A6 |  if_e	mov	result1, #0
28308     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2830c     D0 FF 9F FD | 	jmp	#LR__4080
28310                 | LR__4081
28310                 | ' 	return((char *)--s);
28310     01 12 86 F1 | 	sub	arg01, #1
28314     09 FB 01 F6 | 	mov	result1, arg01
28318                 | _fatfs_cc_strchr_ret
28318     2D 00 64 FD | 	ret
2831c                 | 
2831c                 | _fatfs_cc_disk_initialize
2831c     04 4A 05 F6 | 	mov	COUNT_, #4
28320     A8 00 A0 FD | 	call	#pushregs_
28324     40 F0 07 F1 | 	add	ptra, #64
28328     04 4E 05 F1 | 	add	fp, #4
2832c     A7 12 42 FC | 	wrbyte	arg01, fp
28330     01 00 00 FF 
28334     14 E4 05 F1 | 	add	objptr, ##532
28338     F2 18 02 FB | 	rdlong	arg04, objptr
2833c     2C 4E 05 F1 | 	add	fp, #44
28340     A7 18 62 FC | 	wrlong	arg04, fp
28344     04 E4 85 F1 | 	sub	objptr, #4
28348     F2 18 02 FB | 	rdlong	arg04, objptr
2834c     04 4E 05 F1 | 	add	fp, #4
28350     A7 18 62 FC | 	wrlong	arg04, fp
28354     08 E4 05 F1 | 	add	objptr, #8
28358     F2 18 02 FB | 	rdlong	arg04, objptr
2835c     04 4E 05 F1 | 	add	fp, #4
28360     A7 18 62 FC | 	wrlong	arg04, fp
28364     04 E4 05 F1 | 	add	objptr, #4
28368     F2 18 02 FB | 	rdlong	arg04, objptr
2836c     04 4E 05 F1 | 	add	fp, #4
28370     A7 18 62 FC | 	wrlong	arg04, fp
28374     04 E4 05 F1 | 	add	objptr, #4
28378     F2 02 48 FC | 	wrbyte	#1, objptr
2837c     01 00 00 FF 
28380     20 E4 85 F1 | 	sub	objptr, ##544
28384     38 4E 85 F1 | 	sub	fp, #56
28388     A7 18 CA FA | 	rdbyte	arg04, fp wz
2838c     04 4E 85 F1 | 	sub	fp, #4
28390                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28390                 | '             return RES_NOTRDY;
28390     03 FA 05 56 |  if_ne	mov	result1, #3
28394     D8 05 90 5D |  if_ne	jmp	#LR__4108
28398     13 00 00 FF 
2839c     10 13 06 F6 | 	mov	arg01, ##10000
283a0     40 95 BF FD | 	call	#__system___waitus
283a4     30 4E 05 F1 | 	add	fp, #48
283a8     A7 12 02 FB | 	rdlong	arg01, fp
283ac     09 01 08 FC | 	wrpin	#0, arg01
283b0     04 4E 05 F1 | 	add	fp, #4
283b4     A7 12 02 FB | 	rdlong	arg01, fp
283b8     09 01 08 FC | 	wrpin	#0, arg01
283bc     04 4E 05 F1 | 	add	fp, #4
283c0     A7 12 02 FB | 	rdlong	arg01, fp
283c4     09 01 08 FC | 	wrpin	#0, arg01
283c8     04 4E 05 F1 | 	add	fp, #4
283cc     A7 12 02 FB | 	rdlong	arg01, fp
283d0     09 00 80 FF 
283d4     09 01 08 FC | 	wrpin	##4608, arg01
283d8     0C 4E 85 F1 | 	sub	fp, #12
283dc     A7 12 02 FB | 	rdlong	arg01, fp
283e0     59 12 62 FD | 	drvh	arg01
283e4     04 4E 05 F1 | 	add	fp, #4
283e8     A7 12 02 FB | 	rdlong	arg01, fp
283ec     59 12 62 FD | 	drvh	arg01
283f0     04 4E 05 F1 | 	add	fp, #4
283f4     A7 12 02 FB | 	rdlong	arg01, fp
283f8     59 12 62 FD | 	drvh	arg01
283fc     04 4E 05 F1 | 	add	fp, #4
28400     A7 12 02 FB | 	rdlong	arg01, fp
28404     59 12 62 FD | 	drvh	arg01
28408     20 4E 85 F1 | 	sub	fp, #32
2840c     00 04 80 FF 
28410     A7 20 68 FC | 	wrlong	##524304, fp
28414     04 4E 05 F1 | 	add	fp, #4
28418     20 03 80 FF 
2841c     A7 90 68 FC | 	wrlong	##409672, fp
28420     14 4E 05 F1 | 	add	fp, #20
28424     A7 1E 02 FB | 	rdlong	local01, fp
28428     18 4E 85 F1 | 	sub	fp, #24
2842c     A7 16 02 FB | 	rdlong	arg03, fp
28430     40 1E 62 FD | 	dirl	local01
28434     A0 03 80 FF 
28438     0F 91 08 FC | 	wrpin	##475208, local01
2843c     0F 17 12 FC | 	wxpin	arg03, local01
28440     0F 01 28 FC | 	wypin	#0, local01
28444     41 1E 62 FD | 	dirh	local01
28448     1C 4E 05 F1 | 	add	fp, #28
2844c     A7 20 02 FB | 	rdlong	local02, fp
28450     10 1F 82 F1 | 	sub	local01, local02
28454     07 1E 06 F5 | 	and	local01, #7
28458     18 1E 66 F0 | 	shl	local01, #24
2845c     78 14 06 F6 | 	mov	arg02, #120
28460     0F 15 42 F5 | 	or	arg02, local01
28464     14 4E 85 F1 | 	sub	fp, #20
28468     A7 14 62 FC | 	wrlong	arg02, fp
2846c     14 4E 05 F1 | 	add	fp, #20
28470     A7 12 02 FB | 	rdlong	arg01, fp
28474     10 14 26 F4 | 	bith	arg02, #16
28478     40 12 62 FD | 	dirl	arg01
2847c     09 15 02 FC | 	wrpin	arg02, arg01
28480     09 3F 18 FC | 	wxpin	#31, arg01
28484     FF FF FF FF 
28488     09 FF 2B FC | 	wypin	##-1, arg01
2848c     41 12 62 FD | 	dirh	arg01
28490     04 4E 85 F1 | 	sub	fp, #4
28494     A7 14 02 FB | 	rdlong	arg02, fp
28498     08 4E 05 F1 | 	add	fp, #8
2849c     A7 22 02 FB | 	rdlong	local03, fp
284a0     11 15 82 F1 | 	sub	arg02, local03
284a4     07 14 06 F5 | 	and	arg02, #7
284a8     18 14 66 F0 | 	shl	arg02, #24
284ac     14 4E 85 F1 | 	sub	fp, #20
284b0     A7 14 62 FC | 	wrlong	arg02, fp
284b4     29 00 00 FF 
284b8     7A 14 46 F5 | 	or	arg02, ##21114
284bc     A7 14 62 FC | 	wrlong	arg02, fp
284c0     14 4E 05 F1 | 	add	fp, #20
284c4     A7 12 02 FB | 	rdlong	arg01, fp
284c8     40 12 62 FD | 	dirl	arg01
284cc     09 15 02 FC | 	wrpin	arg02, arg01
284d0     09 4F 18 FC | 	wxpin	#39, arg01
284d4     09 01 28 FC | 	wypin	#0, arg01
284d8     41 12 62 FD | 	dirh	arg01
284dc     28 4E 85 F1 | 	sub	fp, #40
284e0     A7 12 02 F6 | 	mov	arg01, fp
284e4     14 4E 85 F1 | 	sub	fp, #20
284e8     0A 14 06 F6 | 	mov	arg02, #10
284ec     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
284f0     00 12 06 F6 | 	mov	arg01, #0
284f4     00 14 06 F6 | 	mov	arg02, #0
284f8     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
284fc     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1161
28500     64 12 06 F6 | 	mov	arg01, #100
28504     DC 93 BF FD | 	call	#__system___waitus
28508     14 4E 05 F1 | 	add	fp, #20
2850c     A7 12 02 F6 | 	mov	arg01, fp
28510     14 4E 85 F1 | 	sub	fp, #20
28514     0A 14 06 F6 | 	mov	arg02, #10
28518     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
2851c     0C 4E 05 F1 | 	add	fp, #12
28520     A7 00 48 FC | 	wrbyte	#0, fp
28524     0C 4E 85 F1 | 	sub	fp, #12
28528     00 12 06 F6 | 	mov	arg01, #0
2852c     00 14 06 F6 | 	mov	arg02, #0
28530     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28534     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
28538     01 18 0E F2 | 	cmp	arg04, #1 wz
2853c     B8 03 90 5D |  if_ne	jmp	#LR__4107
28540     08 12 06 F6 | 	mov	arg01, #8
28544     AA 15 06 F6 | 	mov	arg02, #426
28548     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
2854c     FD FA E1 F8 | 	getbyte	result1, result1, #0
28550     01 FA 0D F2 | 	cmp	result1, #1 wz
28554     98 01 90 5D |  if_ne	jmp	#LR__4093
28558     14 4E 05 F1 | 	add	fp, #20
2855c     A7 12 02 F6 | 	mov	arg01, fp
28560     14 4E 85 F1 | 	sub	fp, #20
28564     04 14 06 F6 | 	mov	arg02, #4
28568     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
2856c     16 4E 05 F1 | 	add	fp, #22
28570     A7 24 C2 FA | 	rdbyte	local04, fp
28574     16 4E 85 F1 | 	sub	fp, #22
28578     01 24 0E F2 | 	cmp	local04, #1 wz
2857c     17 4E 05 A1 |  if_e	add	fp, #23
28580     A7 22 C2 AA |  if_e	rdbyte	local03, fp
28584     17 4E 85 A1 |  if_e	sub	fp, #23
28588     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
2858c     68 03 90 5D |  if_ne	jmp	#LR__4106
28590                 | ' 				for (tmr = 1000; tmr; tmr--) {
28590     18 4E 05 F1 | 	add	fp, #24
28594     01 00 80 FF 
28598     A7 D0 6B FC | 	wrlong	##1000, fp
2859c     18 4E 85 F1 | 	sub	fp, #24
285a0                 | LR__4090
285a0     18 4E 05 F1 | 	add	fp, #24
285a4     A7 1E 0A FB | 	rdlong	local01, fp wz
285a8     18 4E 85 F1 | 	sub	fp, #24
285ac     3C 00 90 AD |  if_e	jmp	#LR__4091
285b0     A9 12 06 F6 | 	mov	arg01, #169
285b4     1E 14 C6 F9 | 	decod	arg02, #30
285b8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
285bc     FD 24 02 F6 | 	mov	local04, result1
285c0     07 24 4E F7 | 	zerox	local04, #7 wz
285c4     24 00 90 AD |  if_e	jmp	#LR__4091
285c8     01 00 00 FF 
285cc     E8 13 06 F6 | 	mov	arg01, ##1000
285d0     10 93 BF FD | 	call	#__system___waitus
285d4     18 4E 05 F1 | 	add	fp, #24
285d8     A7 24 02 FB | 	rdlong	local04, fp
285dc     01 24 86 F1 | 	sub	local04, #1
285e0     A7 24 62 FC | 	wrlong	local04, fp
285e4     18 4E 85 F1 | 	sub	fp, #24
285e8     B4 FF 9F FD | 	jmp	#LR__4090
285ec                 | LR__4091
285ec     18 4E 05 F1 | 	add	fp, #24
285f0     A7 24 0A FB | 	rdlong	local04, fp wz
285f4     18 4E 85 F1 | 	sub	fp, #24
285f8     4C 00 90 AD |  if_e	jmp	#LR__4092
285fc     3A 12 06 F6 | 	mov	arg01, #58
28600     00 14 06 F6 | 	mov	arg02, #0
28604     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28608     FD 22 02 F6 | 	mov	local03, result1
2860c     07 22 4E F7 | 	zerox	local03, #7 wz
28610     34 00 90 5D |  if_ne	jmp	#LR__4092
28614     14 4E 05 F1 | 	add	fp, #20
28618     A7 12 02 F6 | 	mov	arg01, fp
2861c     14 4E 85 F1 | 	sub	fp, #20
28620     04 14 06 F6 | 	mov	arg02, #4
28624     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
28628     14 4E 05 F1 | 	add	fp, #20
2862c     A7 1E C2 FA | 	rdbyte	local01, fp
28630     40 1E CE F7 | 	test	local01, #64 wz
28634     0C 24 06 56 |  if_ne	mov	local04, #12
28638     04 24 06 A6 |  if_e	mov	local04, #4
2863c     08 4E 85 F1 | 	sub	fp, #8
28640     A7 24 42 FC | 	wrbyte	local04, fp
28644     0C 4E 85 F1 | 	sub	fp, #12
28648                 | LR__4092
28648     14 24 06 FB | 	rdlong	local04, #20
2864c     18 4E 05 F1 | 	add	fp, #24
28650     A7 24 62 FC | 	wrlong	local04, fp
28654     0C 4E 05 F1 | 	add	fp, #12
28658     A7 24 02 FB | 	rdlong	local04, fp
2865c     1B 24 26 F4 | 	bith	local04, #27
28660     A7 24 62 FC | 	wrlong	local04, fp
28664     0C 4E 85 F1 | 	sub	fp, #12
28668     A7 24 02 FB | 	rdlong	local04, fp
2866c     18 4E 85 F1 | 	sub	fp, #24
28670     68 78 04 FF 
28674     81 25 16 F2 | 	cmp	local04, ##150000001 wc
28678     1C 4E 05 C1 |  if_b	add	fp, #28
2867c     00 01 80 CF 
28680     A7 08 68 CC |  if_b	wrlong	##131076, fp
28684     1C 4E 85 C1 |  if_b	sub	fp, #28
28688     6C 02 90 CD |  if_b	jmp	#LR__4106
2868c     18 4E 05 F1 | 	add	fp, #24
28690     A7 24 02 FB | 	rdlong	local04, fp
28694     18 4E 85 F1 | 	sub	fp, #24
28698     E1 F5 05 FF 
2869c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
286a0     1C 4E 05 C1 |  if_b	add	fp, #28
286a4     00 01 80 CF 
286a8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
286ac     1C 4E 85 C1 |  if_b	sub	fp, #28
286b0     44 02 90 CD |  if_b	jmp	#LR__4106
286b4     18 4E 05 F1 | 	add	fp, #24
286b8     A7 24 02 FB | 	rdlong	local04, fp
286bc     18 4E 85 F1 | 	sub	fp, #24
286c0     3B 58 08 FF 
286c4     01 24 16 F2 | 	cmp	local04, ##280000001 wc
286c8     1C 4E 05 C1 |  if_b	add	fp, #28
286cc     00 01 80 CF 
286d0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
286d4     1C 4E 85 C1 |  if_b	sub	fp, #28
286d8     1C 02 90 CD |  if_b	jmp	#LR__4106
286dc     1C 4E 05 F1 | 	add	fp, #28
286e0     80 01 80 FF 
286e4     A7 10 68 FC | 	wrlong	##196616, fp
286e8     1C 4E 85 F1 | 	sub	fp, #28
286ec     08 02 90 FD | 	jmp	#LR__4106
286f0                 | LR__4093
286f0     A9 12 06 F6 | 	mov	arg01, #169
286f4     00 14 06 F6 | 	mov	arg02, #0
286f8     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
286fc     FD 24 E2 F8 | 	getbyte	local04, result1, #0
28700     02 24 16 F2 | 	cmp	local04, #2 wc
28704     18 00 90 3D |  if_ae	jmp	#LR__4094
28708     0C 4E 05 F1 | 	add	fp, #12
2870c     A7 04 48 FC | 	wrbyte	#2, fp
28710     04 4E 05 F1 | 	add	fp, #4
28714     A7 52 49 FC | 	wrbyte	#169, fp
28718     10 4E 85 F1 | 	sub	fp, #16
2871c     14 00 90 FD | 	jmp	#LR__4095
28720                 | LR__4094
28720     0C 4E 05 F1 | 	add	fp, #12
28724     A7 02 48 FC | 	wrbyte	#1, fp
28728     04 4E 05 F1 | 	add	fp, #4
2872c     A7 02 48 FC | 	wrbyte	#1, fp
28730     10 4E 85 F1 | 	sub	fp, #16
28734                 | LR__4095
28734                 | ' 				ty =  0x01 ; cmd =  (1) ;
28734                 | ' 			}
28734                 | ' 			for (tmr = 1000; tmr; tmr--) {
28734     18 4E 05 F1 | 	add	fp, #24
28738     01 00 80 FF 
2873c     A7 D0 6B FC | 	wrlong	##1000, fp
28740     18 4E 85 F1 | 	sub	fp, #24
28744                 | LR__4096
28744     18 4E 05 F1 | 	add	fp, #24
28748     A7 22 0A FB | 	rdlong	local03, fp wz
2874c     18 4E 85 F1 | 	sub	fp, #24
28750     44 00 90 AD |  if_e	jmp	#LR__4097
28754     10 4E 05 F1 | 	add	fp, #16
28758     A7 12 C2 FA | 	rdbyte	arg01, fp
2875c     10 4E 85 F1 | 	sub	fp, #16
28760     00 14 06 F6 | 	mov	arg02, #0
28764     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28768     FD 24 02 F6 | 	mov	local04, result1
2876c     07 24 4E F7 | 	zerox	local04, #7 wz
28770     24 00 90 AD |  if_e	jmp	#LR__4097
28774     01 00 00 FF 
28778     E8 13 06 F6 | 	mov	arg01, ##1000
2877c     64 91 BF FD | 	call	#__system___waitus
28780     18 4E 05 F1 | 	add	fp, #24
28784     A7 24 02 FB | 	rdlong	local04, fp
28788     01 24 86 F1 | 	sub	local04, #1
2878c     A7 24 62 FC | 	wrlong	local04, fp
28790     18 4E 85 F1 | 	sub	fp, #24
28794     AC FF 9F FD | 	jmp	#LR__4096
28798                 | LR__4097
28798     18 4E 05 F1 | 	add	fp, #24
2879c     A7 24 0A FB | 	rdlong	local04, fp wz
287a0     18 4E 85 F1 | 	sub	fp, #24
287a4     14 00 90 AD |  if_e	jmp	#LR__4098
287a8     10 12 06 F6 | 	mov	arg01, #16
287ac     09 14 C6 F9 | 	decod	arg02, #9
287b0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
287b4     07 FA 4D F7 | 	zerox	result1, #7 wz
287b8     0C 00 90 AD |  if_e	jmp	#LR__4099
287bc                 | LR__4098
287bc     0C 4E 05 F1 | 	add	fp, #12
287c0     A7 00 48 FC | 	wrbyte	#0, fp
287c4     0C 4E 85 F1 | 	sub	fp, #12
287c8                 | LR__4099
287c8     14 24 06 FB | 	rdlong	local04, #20
287cc     18 4E 05 F1 | 	add	fp, #24
287d0     A7 24 62 FC | 	wrlong	local04, fp
287d4     18 4E 85 F1 | 	sub	fp, #24
287d8     F0 FA 02 FF 
287dc     01 25 16 F2 | 	cmp	local04, ##100000001 wc
287e0     18 00 90 3D |  if_ae	jmp	#LR__4100
287e4     24 4E 05 F1 | 	add	fp, #36
287e8     A7 24 02 FB | 	rdlong	local04, fp
287ec     1B 24 26 F4 | 	bith	local04, #27
287f0     A7 24 62 FC | 	wrlong	local04, fp
287f4     24 4E 85 F1 | 	sub	fp, #36
287f8     2C 00 90 FD | 	jmp	#LR__4101
287fc                 | LR__4100
287fc     18 4E 05 F1 | 	add	fp, #24
28800     A7 24 02 FB | 	rdlong	local04, fp
28804     18 4E 85 F1 | 	sub	fp, #24
28808     E1 F5 05 FF 
2880c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
28810     24 4E 05 C1 |  if_b	add	fp, #36
28814     A7 24 02 CB |  if_b	rdlong	local04, fp
28818     80 00 04 CF 
2881c     00 24 46 C5 |  if_b	or	local04, ##134283264
28820     A7 24 62 CC |  if_b	wrlong	local04, fp
28824     24 4E 85 C1 |  if_b	sub	fp, #36
28828                 | LR__4101
28828     18 4E 05 F1 | 	add	fp, #24
2882c     A7 24 02 FB | 	rdlong	local04, fp
28830     18 4E 85 F1 | 	sub	fp, #24
28834     F0 FA 02 FF 
28838     01 25 16 F2 | 	cmp	local04, ##100000001 wc
2883c     1C 4E 05 C1 |  if_b	add	fp, #28
28840     00 01 80 CF 
28844     A7 08 68 CC |  if_b	wrlong	##131076, fp
28848     1C 4E 85 C1 |  if_b	sub	fp, #28
2884c     A8 00 90 CD |  if_b	jmp	#LR__4105
28850     18 4E 05 F1 | 	add	fp, #24
28854     A7 24 02 FB | 	rdlong	local04, fp
28858     18 4E 85 F1 | 	sub	fp, #24
2885c     68 78 04 FF 
28860     81 25 16 F2 | 	cmp	local04, ##150000001 wc
28864     1C 4E 05 C1 |  if_b	add	fp, #28
28868     80 01 80 CF 
2886c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
28870     1C 4E 85 C1 |  if_b	sub	fp, #28
28874     80 00 90 CD |  if_b	jmp	#LR__4104
28878     18 4E 05 F1 | 	add	fp, #24
2887c     A7 24 02 FB | 	rdlong	local04, fp
28880     18 4E 85 F1 | 	sub	fp, #24
28884     E1 F5 05 FF 
28888     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2888c     1C 4E 05 C1 |  if_b	add	fp, #28
28890     00 02 80 CF 
28894     A7 10 68 CC |  if_b	wrlong	##262152, fp
28898     1C 4E 85 C1 |  if_b	sub	fp, #28
2889c     58 00 90 CD |  if_b	jmp	#LR__4103
288a0     18 4E 05 F1 | 	add	fp, #24
288a4     A7 24 02 FB | 	rdlong	local04, fp
288a8     18 4E 85 F1 | 	sub	fp, #24
288ac     59 73 07 FF 
288b0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
288b4     1C 4E 05 C1 |  if_b	add	fp, #28
288b8     80 02 80 CF 
288bc     A7 14 68 CC |  if_b	wrlong	##327690, fp
288c0     1C 4E 85 C1 |  if_b	sub	fp, #28
288c4     30 00 90 CD |  if_b	jmp	#LR__4102
288c8     18 4E 05 F1 | 	add	fp, #24
288cc     A7 24 02 FB | 	rdlong	local04, fp
288d0     18 4E 85 F1 | 	sub	fp, #24
288d4     D1 F0 08 FF 
288d8     01 25 16 F2 | 	cmp	local04, ##300000001 wc
288dc     1C 4E 05 C1 |  if_b	add	fp, #28
288e0     00 03 80 CF 
288e4     A7 18 68 CC |  if_b	wrlong	##393228, fp
288e8     1C 4E 85 F3 | 	sumc	fp, #28
288ec     80 03 80 3F 
288f0     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
288f4     1C 4E 85 31 |  if_ae	sub	fp, #28
288f8                 | LR__4102
288f8                 | LR__4103
288f8                 | LR__4104
288f8                 | LR__4105
288f8                 | LR__4106
288f8                 | LR__4107
288f8     0C 4E 05 F1 | 	add	fp, #12
288fc     A7 24 C2 FA | 	rdbyte	local04, fp
28900     01 00 00 FF 
28904     21 E4 05 F1 | 	add	objptr, ##545
28908     F2 24 42 FC | 	wrbyte	local04, objptr
2890c     A7 1E CA FA | 	rdbyte	local01, fp wz
28910     00 24 06 56 |  if_ne	mov	local04, #0
28914     01 24 06 A6 |  if_e	mov	local04, #1
28918     20 4E 05 F1 | 	add	fp, #32
2891c     A7 24 42 FC | 	wrbyte	local04, fp
28920     A7 24 C2 FA | 	rdbyte	local04, fp
28924     2C 4E 85 F1 | 	sub	fp, #44
28928     01 E4 85 F1 | 	sub	objptr, #1
2892c     F2 24 42 FC | 	wrbyte	local04, objptr
28930     01 00 00 FF 
28934     20 E4 85 F1 | 	sub	objptr, ##544
28938     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1161
2893c     34 4E 05 F1 | 	add	fp, #52
28940     A7 12 02 FB | 	rdlong	arg01, fp
28944     18 4E 85 F1 | 	sub	fp, #24
28948     A7 14 02 FB | 	rdlong	arg02, fp
2894c     09 15 12 FC | 	wxpin	arg02, arg01
28950     1C 4E 05 F1 | 	add	fp, #28
28954     A7 12 02 FB | 	rdlong	arg01, fp
28958     14 4E 85 F1 | 	sub	fp, #20
2895c     A7 14 02 FB | 	rdlong	arg02, fp
28960     09 15 02 FC | 	wrpin	arg02, arg01
28964                 | ' 
28964                 | ' 		}
28964                 | ' 	}
28964                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28964                 | ' 	CardType = ty;
28964                 | ' 	s = ty ? 0 :  0x01 ;
28964                 | ' 	Stat = s;
28964                 | ' 
28964                 | ' 	deselect();
28964                 | ' 
28964                 | ' 
28964                 | ' 	_wxpin( PIN_CLK, ck_div );
28964                 | ' 	_wrpin( PIN_DI, spm_tx );
28964                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28964                 | ' 	return s;
28964     08 4E 05 F1 | 	add	fp, #8
28968     A7 FA C1 FA | 	rdbyte	result1, fp
2896c     2C 4E 85 F1 | 	sub	fp, #44
28970                 | LR__4108
28970     A7 F0 03 F6 | 	mov	ptra, fp
28974     B2 00 A0 FD | 	call	#popregs_
28978                 | _fatfs_cc_disk_initialize_ret
28978     2D 00 64 FD | 	ret
2897c                 | 
2897c                 | _fatfs_cc_disk_read
2897c     05 4A 05 F6 | 	mov	COUNT_, #5
28980     A8 00 A0 FD | 	call	#pushregs_
28984     0A 1F 02 F6 | 	mov	local01, arg02
28988     0B 21 02 F6 | 	mov	local02, arg03
2898c     0C 23 02 F6 | 	mov	local03, arg04
28990     00 12 0E F2 | 	cmp	arg01, #0 wz
28994     01 FA 05 56 |  if_ne	mov	result1, #1
28998                 | ' 
28998                 | ' 	return Stat;
28998     01 00 00 AF 
2899c     20 E4 05 A1 |  if_e	add	objptr, ##544
289a0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
289a4     01 00 00 AF 
289a8     20 E4 85 A1 |  if_e	sub	objptr, ##544
289ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
289b0     01 FA CD F7 | 	test	result1, #1 wz
289b4     03 FA 05 56 |  if_ne	mov	result1, #3
289b8     84 00 90 5D |  if_ne	jmp	#LR__4112
289bc     01 00 00 FF 
289c0     21 E4 05 F1 | 	add	objptr, ##545
289c4     F2 24 C2 FA | 	rdbyte	local04, objptr
289c8     01 00 00 FF 
289cc     21 E4 85 F1 | 	sub	objptr, ##545
289d0     08 24 CE F7 | 	test	local04, #8 wz
289d4     09 20 66 A0 |  if_e	shl	local02, #9
289d8     02 22 16 F2 | 	cmp	local03, #2 wc
289dc     12 24 06 36 |  if_ae	mov	local04, #18
289e0     11 24 06 C6 |  if_b	mov	local04, #17
289e4     10 15 02 F6 | 	mov	arg02, local02
289e8     12 13 02 F6 | 	mov	arg01, local04
289ec     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1175
289f0     FD 26 02 F6 | 	mov	local05, result1
289f4     07 26 4E F7 | 	zerox	local05, #7 wz
289f8     30 00 90 5D |  if_ne	jmp	#LR__4111
289fc                 | ' 		do {
289fc                 | LR__4110
289fc     0F 13 02 F6 | 	mov	arg01, local01
28a00     09 14 C6 F9 | 	decod	arg02, #9
28a04     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1169
28a08     00 FA 0D F2 | 	cmp	result1, #0 wz
28a0c     01 00 00 5F 
28a10     00 1E 06 51 |  if_ne	add	local01, ##512
28a14     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4110
28a18     12 25 E2 F8 | 	getbyte	local04, local04, #0
28a1c     12 24 0E F2 | 	cmp	local04, #18 wz
28a20     0C 12 06 A6 |  if_e	mov	arg01, #12
28a24     00 14 06 A6 |  if_e	mov	arg02, #0
28a28     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1175
28a2c                 | LR__4111
28a2c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1161
28a30                 | ' 	}
28a30                 | ' 	deselect();
28a30                 | ' 
28a30                 | ' 	return count ? RES_ERROR : RES_OK;
28a30     00 22 0E F2 | 	cmp	local03, #0 wz
28a34     01 26 06 56 |  if_ne	mov	local05, #1
28a38     00 26 06 A6 |  if_e	mov	local05, #0
28a3c     13 FB 01 F6 | 	mov	result1, local05
28a40                 | LR__4112
28a40     A7 F0 03 F6 | 	mov	ptra, fp
28a44     B2 00 A0 FD | 	call	#popregs_
28a48                 | _fatfs_cc_disk_read_ret
28a48     2D 00 64 FD | 	ret
28a4c                 | 
28a4c                 | _fatfs_cc_disk_write
28a4c     04 4A 05 F6 | 	mov	COUNT_, #4
28a50     A8 00 A0 FD | 	call	#pushregs_
28a54     0A 1F 02 F6 | 	mov	local01, arg02
28a58     0C 21 02 F6 | 	mov	local02, arg04
28a5c     0B 23 02 F6 | 	mov	local03, arg03
28a60     00 12 0E F2 | 	cmp	arg01, #0 wz
28a64     01 FA 05 56 |  if_ne	mov	result1, #1
28a68                 | ' 
28a68                 | ' 	return Stat;
28a68     01 00 00 AF 
28a6c     20 E4 05 A1 |  if_e	add	objptr, ##544
28a70     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28a74     01 00 00 AF 
28a78     20 E4 85 A1 |  if_e	sub	objptr, ##544
28a7c     FD FA E1 F8 | 	getbyte	result1, result1, #0
28a80     01 FA CD F7 | 	test	result1, #1 wz
28a84     03 FA 05 56 |  if_ne	mov	result1, #3
28a88     D4 00 90 5D |  if_ne	jmp	#LR__4124
28a8c     01 00 00 FF 
28a90     21 E4 05 F1 | 	add	objptr, ##545
28a94     F2 16 C2 FA | 	rdbyte	arg03, objptr
28a98     01 00 00 FF 
28a9c     21 E4 85 F1 | 	sub	objptr, ##545
28aa0     08 16 CE F7 | 	test	arg03, #8 wz
28aa4     09 22 66 A0 |  if_e	shl	local03, #9
28aa8     01 20 0E F2 | 	cmp	local02, #1 wz
28aac     30 00 90 5D |  if_ne	jmp	#LR__4120
28ab0     18 12 06 F6 | 	mov	arg01, #24
28ab4     11 15 02 F6 | 	mov	arg02, local03
28ab8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28abc     FD 24 02 F6 | 	mov	local04, result1
28ac0     07 24 4E F7 | 	zerox	local04, #7 wz
28ac4     84 00 90 5D |  if_ne	jmp	#LR__4123
28ac8     0F 13 02 F6 | 	mov	arg01, local01
28acc     FE 14 06 F6 | 	mov	arg02, #254
28ad0     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1171
28ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
28ad8     00 20 06 56 |  if_ne	mov	local02, #0
28adc     6C 00 90 FD | 	jmp	#LR__4123
28ae0                 | LR__4120
28ae0     01 00 00 FF 
28ae4     21 E4 05 F1 | 	add	objptr, ##545
28ae8     F2 24 C2 FA | 	rdbyte	local04, objptr
28aec     01 00 00 FF 
28af0     21 E4 85 F1 | 	sub	objptr, ##545
28af4     06 24 CE F7 | 	test	local04, #6 wz
28af8     97 12 06 56 |  if_ne	mov	arg01, #151
28afc     10 15 02 56 |  if_ne	mov	arg02, local02
28b00     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1175
28b04     11 15 02 F6 | 	mov	arg02, local03
28b08     19 12 06 F6 | 	mov	arg01, #25
28b0c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28b10     FD 24 02 F6 | 	mov	local04, result1
28b14     07 24 4E F7 | 	zerox	local04, #7 wz
28b18     30 00 90 5D |  if_ne	jmp	#LR__4122
28b1c                 | ' 			do {
28b1c                 | LR__4121
28b1c     0F 13 02 F6 | 	mov	arg01, local01
28b20     FC 14 06 F6 | 	mov	arg02, #252
28b24     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1171
28b28     00 FA 0D F2 | 	cmp	result1, #0 wz
28b2c     01 00 00 5F 
28b30     00 1E 06 51 |  if_ne	add	local01, ##512
28b34     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4121
28b38     00 12 06 F6 | 	mov	arg01, #0
28b3c     FD 14 06 F6 | 	mov	arg02, #253
28b40     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1171
28b44     00 FA 0D F2 | 	cmp	result1, #0 wz
28b48     01 20 06 A6 |  if_e	mov	local02, #1
28b4c                 | LR__4122
28b4c                 | LR__4123
28b4c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1161
28b50                 | ' 				count = 1;
28b50                 | ' 		}
28b50                 | ' 	}
28b50                 | ' 	deselect();
28b50                 | ' 
28b50                 | ' 	return count ? RES_ERROR : RES_OK;
28b50     00 20 0E F2 | 	cmp	local02, #0 wz
28b54     01 24 06 56 |  if_ne	mov	local04, #1
28b58     00 24 06 A6 |  if_e	mov	local04, #0
28b5c     12 FB 01 F6 | 	mov	result1, local04
28b60                 | LR__4124
28b60     A7 F0 03 F6 | 	mov	ptra, fp
28b64     B2 00 A0 FD | 	call	#popregs_
28b68                 | _fatfs_cc_disk_write_ret
28b68     2D 00 64 FD | 	ret
28b6c                 | 
28b6c                 | _fatfs_cc_disk_ioctl
28b6c     01 4A 05 F6 | 	mov	COUNT_, #1
28b70     A8 00 A0 FD | 	call	#pushregs_
28b74     30 F0 07 F1 | 	add	ptra, #48
28b78     04 4E 05 F1 | 	add	fp, #4
28b7c     A7 12 42 FC | 	wrbyte	arg01, fp
28b80     04 4E 05 F1 | 	add	fp, #4
28b84     A7 14 42 FC | 	wrbyte	arg02, fp
28b88     04 4E 05 F1 | 	add	fp, #4
28b8c     A7 16 62 FC | 	wrlong	arg03, fp
28b90     08 4E 85 F1 | 	sub	fp, #8
28b94     A7 12 CA FA | 	rdbyte	arg01, fp wz
28b98     04 4E 85 F1 | 	sub	fp, #4
28b9c     01 FA 05 56 |  if_ne	mov	result1, #1
28ba0                 | ' 
28ba0                 | ' 	return Stat;
28ba0     01 00 00 AF 
28ba4     20 E4 05 A1 |  if_e	add	objptr, ##544
28ba8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28bac     01 00 00 AF 
28bb0     20 E4 85 A1 |  if_e	sub	objptr, ##544
28bb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
28bb8     01 FA CD F7 | 	test	result1, #1 wz
28bbc     03 FA 05 56 |  if_ne	mov	result1, #3
28bc0     E4 01 90 5D |  if_ne	jmp	#LR__4138
28bc4     10 4E 05 F1 | 	add	fp, #16
28bc8     A7 02 68 FC | 	wrlong	#1, fp
28bcc                 | ' 
28bcc                 | ' 	res = RES_ERROR;
28bcc                 | ' 	switch (ctrl) {
28bcc     08 4E 85 F1 | 	sub	fp, #8
28bd0     A7 1E C2 FA | 	rdbyte	local01, fp
28bd4     08 4E 85 F1 | 	sub	fp, #8
28bd8     04 1E 26 F3 | 	fle	local01, #4
28bdc     30 1E 62 FD | 	jmprel	local01
28be0                 | LR__4130
28be0     10 00 90 FD | 	jmp	#LR__4131
28be4     24 00 90 FD | 	jmp	#LR__4132
28be8     A0 01 90 FD | 	jmp	#LR__4136
28bec     80 01 90 FD | 	jmp	#LR__4135
28bf0     98 01 90 FD | 	jmp	#LR__4136
28bf4                 | LR__4131
28bf4     B4 79 B0 FD | 	call	#_fatfs_cc_select_1165
28bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
28bfc     10 4E 05 51 |  if_ne	add	fp, #16
28c00     A7 00 68 5C |  if_ne	wrlong	#0, fp
28c04     10 4E 85 51 |  if_ne	sub	fp, #16
28c08                 | ' 			break;
28c08     8C 01 90 FD | 	jmp	#LR__4137
28c0c                 | LR__4132
28c0c     09 12 06 F6 | 	mov	arg01, #9
28c10     00 14 06 F6 | 	mov	arg02, #0
28c14     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28c18     FD 1E 02 F6 | 	mov	local01, result1
28c1c     07 1E 4E F7 | 	zerox	local01, #7 wz
28c20     74 01 90 5D |  if_ne	jmp	#LR__4137
28c24     18 4E 05 F1 | 	add	fp, #24
28c28     A7 12 02 F6 | 	mov	arg01, fp
28c2c     18 4E 85 F1 | 	sub	fp, #24
28c30     10 14 06 F6 | 	mov	arg02, #16
28c34     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1169
28c38     00 FA 0D F2 | 	cmp	result1, #0 wz
28c3c     58 01 90 AD |  if_e	jmp	#LR__4137
28c40     18 4E 05 F1 | 	add	fp, #24
28c44     A7 1E C2 FA | 	rdbyte	local01, fp
28c48     18 4E 85 F1 | 	sub	fp, #24
28c4c     06 1E 46 F0 | 	shr	local01, #6
28c50     01 1E 0E F2 | 	cmp	local01, #1 wz
28c54     5C 00 90 5D |  if_ne	jmp	#LR__4133
28c58     21 4E 05 F1 | 	add	fp, #33
28c5c     A7 1E C2 FA | 	rdbyte	local01, fp
28c60     01 4E 85 F1 | 	sub	fp, #1
28c64     A7 FA C1 FA | 	rdbyte	result1, fp
28c68     FD FA 31 F9 | 	getword	result1, result1, #0
28c6c     08 FA 65 F0 | 	shl	result1, #8
28c70     FD 1E 02 F1 | 	add	local01, result1
28c74     01 4E 85 F1 | 	sub	fp, #1
28c78     A7 FA C1 FA | 	rdbyte	result1, fp
28c7c     3F FA 05 F5 | 	and	result1, #63
28c80     10 FA 65 F0 | 	shl	result1, #16
28c84     FD 1E 02 F1 | 	add	local01, result1
28c88     01 1E 06 F1 | 	add	local01, #1
28c8c     09 4E 05 F1 | 	add	fp, #9
28c90     A7 1E 62 FC | 	wrlong	local01, fp
28c94     1C 4E 85 F1 | 	sub	fp, #28
28c98     A7 1E 02 FB | 	rdlong	local01, fp
28c9c     1C 4E 05 F1 | 	add	fp, #28
28ca0     A7 FA 01 FB | 	rdlong	result1, fp
28ca4     28 4E 85 F1 | 	sub	fp, #40
28ca8     0A FA 65 F0 | 	shl	result1, #10
28cac     0F FB 61 FC | 	wrlong	result1, local01
28cb0     AC 00 90 FD | 	jmp	#LR__4134
28cb4                 | LR__4133
28cb4     1D 4E 05 F1 | 	add	fp, #29
28cb8     A7 1E C2 FA | 	rdbyte	local01, fp
28cbc     0F 1F 42 F8 | 	getnib	local01, local01, #0
28cc0     05 4E 05 F1 | 	add	fp, #5
28cc4     A7 FA C1 FA | 	rdbyte	result1, fp
28cc8     80 FA 05 F5 | 	and	result1, #128
28ccc     07 FA C5 F0 | 	sar	result1, #7
28cd0     FD 1E 02 F1 | 	add	local01, result1
28cd4     01 4E 85 F1 | 	sub	fp, #1
28cd8     A7 FA C1 FA | 	rdbyte	result1, fp
28cdc     03 FA 05 F5 | 	and	result1, #3
28ce0     01 FA 65 F0 | 	shl	result1, #1
28ce4     FD 1E 02 F1 | 	add	local01, result1
28ce8     02 1E 06 F1 | 	add	local01, #2
28cec     0D 4E 85 F1 | 	sub	fp, #13
28cf0     A7 1E 42 FC | 	wrbyte	local01, fp
28cf4     0C 4E 05 F1 | 	add	fp, #12
28cf8     A7 1E C2 FA | 	rdbyte	local01, fp
28cfc     06 1E 46 F0 | 	shr	local01, #6
28d00     01 4E 85 F1 | 	sub	fp, #1
28d04     A7 FA C1 FA | 	rdbyte	result1, fp
28d08     FD FA 31 F9 | 	getword	result1, result1, #0
28d0c     02 FA 65 F0 | 	shl	result1, #2
28d10     FD 1E 02 F1 | 	add	local01, result1
28d14     01 4E 85 F1 | 	sub	fp, #1
28d18     A7 FA C1 FA | 	rdbyte	result1, fp
28d1c     03 FA 05 F5 | 	and	result1, #3
28d20     FD FA 31 F9 | 	getword	result1, result1, #0
28d24     0A FA 65 F0 | 	shl	result1, #10
28d28     FD 1E 02 F1 | 	add	local01, result1
28d2c     01 1E 06 F1 | 	add	local01, #1
28d30     0A 4E 05 F1 | 	add	fp, #10
28d34     A7 1E 62 FC | 	wrlong	local01, fp
28d38     1C 4E 85 F1 | 	sub	fp, #28
28d3c     A7 1E 02 FB | 	rdlong	local01, fp
28d40     1C 4E 05 F1 | 	add	fp, #28
28d44     A7 FA 01 FB | 	rdlong	result1, fp
28d48     14 4E 85 F1 | 	sub	fp, #20
28d4c     A7 16 C2 FA | 	rdbyte	arg03, fp
28d50     14 4E 85 F1 | 	sub	fp, #20
28d54     09 16 86 F1 | 	sub	arg03, #9
28d58     0B FB 61 F0 | 	shl	result1, arg03
28d5c     0F FB 61 FC | 	wrlong	result1, local01
28d60                 | LR__4134
28d60     10 4E 05 F1 | 	add	fp, #16
28d64     A7 00 68 FC | 	wrlong	#0, fp
28d68     10 4E 85 F1 | 	sub	fp, #16
28d6c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
28d6c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
28d6c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
28d6c                 | ' 				}
28d6c                 | ' 				res = RES_OK;
28d6c                 | ' 			}
28d6c                 | ' 			break;
28d6c     28 00 90 FD | 	jmp	#LR__4137
28d70                 | LR__4135
28d70     0C 4E 05 F1 | 	add	fp, #12
28d74     A7 1E 02 FB | 	rdlong	local01, fp
28d78     0F 01 69 FC | 	wrlong	#128, local01
28d7c     04 4E 05 F1 | 	add	fp, #4
28d80     A7 00 68 FC | 	wrlong	#0, fp
28d84     10 4E 85 F1 | 	sub	fp, #16
28d88                 | ' 			*(DWORD*)buff = 128;
28d88                 | ' 			res = RES_OK;
28d88                 | ' 			break;
28d88     0C 00 90 FD | 	jmp	#LR__4137
28d8c                 | LR__4136
28d8c     10 4E 05 F1 | 	add	fp, #16
28d90     A7 08 68 FC | 	wrlong	#4, fp
28d94     10 4E 85 F1 | 	sub	fp, #16
28d98                 | LR__4137
28d98     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1161
28d9c                 | ' 			res = RES_PARERR;
28d9c                 | ' 	}
28d9c                 | ' 
28d9c                 | ' 	deselect();
28d9c                 | ' 
28d9c                 | ' 	return res;
28d9c     10 4E 05 F1 | 	add	fp, #16
28da0     A7 FA 01 FB | 	rdlong	result1, fp
28da4     10 4E 85 F1 | 	sub	fp, #16
28da8                 | LR__4138
28da8     A7 F0 03 F6 | 	mov	ptra, fp
28dac     B2 00 A0 FD | 	call	#popregs_
28db0                 | _fatfs_cc_disk_ioctl_ret
28db0     2D 00 64 FD | 	ret
28db4                 | 
28db4                 | _fatfs_cc_disk_setpins
28db4     00 12 0E F2 | 	cmp	arg01, #0 wz
28db8     01 FA 65 56 |  if_ne	neg	result1, #1
28dbc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
28dc0     01 00 00 FF 
28dc4     10 E4 05 F1 | 	add	objptr, ##528
28dc8     F2 14 62 FC | 	wrlong	arg02, objptr
28dcc     04 E4 05 F1 | 	add	objptr, #4
28dd0     F2 16 62 FC | 	wrlong	arg03, objptr
28dd4     04 E4 05 F1 | 	add	objptr, #4
28dd8     F2 18 62 FC | 	wrlong	arg04, objptr
28ddc     04 E4 05 F1 | 	add	objptr, #4
28de0     F2 1A 62 FC | 	wrlong	arg05, objptr
28de4     01 00 00 FF 
28de8     1C E4 85 F1 | 	sub	objptr, ##540
28dec     00 FA 05 F6 | 	mov	result1, #0
28df0                 | _fatfs_cc_disk_setpins_ret
28df0     2D 00 64 FD | 	ret
28df4                 | 
28df4                 | _fatfs_cc_tchar2uni
28df4     09 01 02 FB | 	rdlong	_var01, arg01
28df8     00 03 02 F6 | 	mov	_var02, _var01
28dfc     01 00 06 F1 | 	add	_var01, #1
28e00     00 05 02 F6 | 	mov	_var03, _var01
28e04     01 07 C2 FA | 	rdbyte	_var04, _var02
28e08     80 06 CE F7 | 	test	_var04, #128 wz
28e0c     E8 00 90 AD |  if_e	jmp	#LR__4147
28e10     03 09 02 F6 | 	mov	_var05, _var04
28e14     E0 08 06 F5 | 	and	_var05, #224
28e18     C0 08 0E F2 | 	cmp	_var05, #192 wz
28e1c     1F 06 06 A5 |  if_e	and	_var04, #31
28e20     01 0A 06 A6 |  if_e	mov	_var06, #1
28e24     34 00 90 AD |  if_e	jmp	#LR__4141
28e28     03 09 02 F6 | 	mov	_var05, _var04
28e2c     F0 08 06 F5 | 	and	_var05, #240
28e30     E0 08 0E F2 | 	cmp	_var05, #224 wz
28e34     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
28e38     02 0A 06 A6 |  if_e	mov	_var06, #2
28e3c     1C 00 90 AD |  if_e	jmp	#LR__4140
28e40     03 09 02 F6 | 	mov	_var05, _var04
28e44     F8 08 06 F5 | 	and	_var05, #248
28e48     F0 08 0E F2 | 	cmp	_var05, #240 wz
28e4c     07 06 06 A5 |  if_e	and	_var04, #7
28e50     03 0A 06 A6 |  if_e	mov	_var06, #3
28e54                 | ' 			return 0xFFFFFFFF;
28e54     01 FA 65 56 |  if_ne	neg	result1, #1
28e58     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28e5c                 | LR__4140
28e5c                 | LR__4141
28e5c                 | ' 		}
28e5c                 | ' 		do {
28e5c                 | LR__4142
28e5c     02 0D C2 FA | 	rdbyte	_var07, _var03
28e60     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
28e64     C0 08 06 F5 | 	and	_var05, #192
28e68     80 08 0E F2 | 	cmp	_var05, #128 wz
28e6c     01 04 06 F1 | 	add	_var03, #1
28e70     01 FA 65 56 |  if_ne	neg	result1, #1
28e74     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28e78     06 06 66 F0 | 	shl	_var04, #6
28e7c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
28e80     3F 02 06 F5 | 	and	_var02, #63
28e84     01 07 42 F5 | 	or	_var04, _var02
28e88     F4 0B 6E FB | 	djnz	_var06, #LR__4142
28e8c     80 06 16 F2 | 	cmp	_var04, #128 wc
28e90     24 00 90 CD |  if_b	jmp	#LR__4144
28e94     6C 00 00 FF 
28e98     00 06 16 F2 | 	cmp	_var04, ##55296 wc
28e9c     0C 00 90 CD |  if_b	jmp	#LR__4143
28ea0     70 00 00 FF 
28ea4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28ea8     0C 00 90 CD |  if_b	jmp	#LR__4144
28eac                 | LR__4143
28eac     80 08 00 FF 
28eb0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
28eb4     08 00 90 CD |  if_b	jmp	#LR__4145
28eb8                 | LR__4144
28eb8     01 FA 65 F6 | 	neg	result1, #1
28ebc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
28ec0                 | LR__4145
28ec0     80 00 00 FF 
28ec4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28ec8     2C 00 90 CD |  if_b	jmp	#LR__4146
28ecc     03 03 02 F6 | 	mov	_var02, _var04
28ed0     80 00 00 FF 
28ed4     00 02 86 F1 | 	sub	_var02, ##65536
28ed8     06 02 66 F0 | 	shl	_var02, #6
28edc     80 FF 01 FF 
28ee0     00 02 06 F5 | 	and	_var02, ##67043328
28ee4     6E 00 6C FF 
28ee8     00 08 06 F6 | 	mov	_var05, ##-671032320
28eec     01 09 42 F5 | 	or	_var05, _var02
28ef0     09 06 46 F7 | 	zerox	_var04, #9
28ef4     04 07 42 F5 | 	or	_var04, _var05
28ef8                 | LR__4146
28ef8                 | LR__4147
28ef8     09 05 62 FC | 	wrlong	_var03, arg01
28efc                 | ' 	}
28efc                 | ' #line 811 "ff.c"
28efc                 | ' 	*str = p;
28efc                 | ' 	return uc;
28efc     03 FB 01 F6 | 	mov	result1, _var04
28f00                 | _fatfs_cc_tchar2uni_ret
28f00     2D 00 64 FD | 	ret
28f04                 | 
28f04                 | _fatfs_cc_put_utf
28f04     80 12 16 F2 | 	cmp	arg01, #128 wc
28f08     18 00 90 3D |  if_ae	jmp	#LR__4150
28f0c     01 16 16 F2 | 	cmp	arg03, #1 wc
28f10     00 FA 05 C6 |  if_b	mov	result1, #0
28f14     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28f18     0A 13 42 FC | 	wrbyte	arg01, arg02
28f1c                 | ' 		*buf = (TCHAR)chr;
28f1c                 | ' 		return 1;
28f1c     01 FA 05 F6 | 	mov	result1, #1
28f20     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28f24                 | LR__4150
28f24     04 00 00 FF 
28f28     00 12 16 F2 | 	cmp	arg01, ##2048 wc
28f2c     40 00 90 3D |  if_ae	jmp	#LR__4151
28f30     02 16 16 F2 | 	cmp	arg03, #2 wc
28f34     00 FA 05 C6 |  if_b	mov	result1, #0
28f38     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28f3c     09 FB 01 F6 | 	mov	result1, arg01
28f40     06 FA 45 F0 | 	shr	result1, #6
28f44     1F FA 05 F5 | 	and	result1, #31
28f48     C0 16 06 F6 | 	mov	arg03, #192
28f4c     FD 16 42 F5 | 	or	arg03, result1
28f50     0A 17 42 FC | 	wrbyte	arg03, arg02
28f54     01 14 06 F1 | 	add	arg02, #1
28f58     3F 12 06 F5 | 	and	arg01, #63
28f5c     80 FA 05 F6 | 	mov	result1, #128
28f60     09 FB 41 F5 | 	or	result1, arg01
28f64     0A FB 41 FC | 	wrbyte	result1, arg02
28f68                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28f68                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28f68                 | ' 		return 2;
28f68     02 FA 05 F6 | 	mov	result1, #2
28f6c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28f70                 | LR__4151
28f70     80 00 00 FF 
28f74     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28f78     70 00 90 3D |  if_ae	jmp	#LR__4154
28f7c     03 16 16 F2 | 	cmp	arg03, #3 wc
28f80     18 00 90 CD |  if_b	jmp	#LR__4152
28f84     6C 00 00 FF 
28f88     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28f8c     14 00 90 CD |  if_b	jmp	#LR__4153
28f90     70 00 00 FF 
28f94     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28f98     08 00 90 3D |  if_ae	jmp	#LR__4153
28f9c                 | LR__4152
28f9c     00 FA 05 F6 | 	mov	result1, #0
28fa0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28fa4                 | LR__4153
28fa4     09 FB 59 F8 | 	getnib	result1, arg01, #3
28fa8     E0 16 06 F6 | 	mov	arg03, #224
28fac     FD 16 42 F5 | 	or	arg03, result1
28fb0     0A 17 42 FC | 	wrbyte	arg03, arg02
28fb4     01 14 06 F1 | 	add	arg02, #1
28fb8     09 FB 01 F6 | 	mov	result1, arg01
28fbc     06 FA 45 F0 | 	shr	result1, #6
28fc0     3F FA 05 F5 | 	and	result1, #63
28fc4     80 16 06 F6 | 	mov	arg03, #128
28fc8     FD 16 42 F5 | 	or	arg03, result1
28fcc     0A 17 42 FC | 	wrbyte	arg03, arg02
28fd0     01 14 06 F1 | 	add	arg02, #1
28fd4     3F 12 06 F5 | 	and	arg01, #63
28fd8     80 FA 05 F6 | 	mov	result1, #128
28fdc     09 FB 41 F5 | 	or	result1, arg01
28fe0     0A FB 41 FC | 	wrbyte	result1, arg02
28fe4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
28fe4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28fe4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28fe4                 | ' 		return 3;
28fe4     03 FA 05 F6 | 	mov	result1, #3
28fe8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28fec                 | LR__4154
28fec     04 16 16 F2 | 	cmp	arg03, #4 wc
28ff0     00 FA 05 C6 |  if_b	mov	result1, #0
28ff4     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28ff8     09 01 02 F6 | 	mov	_var01, arg01
28ffc     E0 01 06 F4 | 	bitl	_var01, #480
29000     00 00 6C FF 
29004     00 00 86 F1 | 	sub	_var01, ##-671088640
29008     06 00 46 F0 | 	shr	_var01, #6
2900c     09 13 32 F9 | 	getword	arg01, arg01, #0
29010     6E 00 00 FF 
29014     00 12 86 F1 | 	sub	arg01, ##56320
29018     00 08 00 FF 
2901c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
29020     02 00 00 CF 
29024     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
29028     00 FA 05 36 |  if_ae	mov	result1, #0
2902c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
29030     09 01 42 F5 | 	or	_var01, arg01
29034     80 00 00 FF 
29038     00 00 06 F1 | 	add	_var01, ##65536
2903c     00 FB 01 F6 | 	mov	result1, _var01
29040     12 FA 45 F0 | 	shr	result1, #18
29044     07 FA 05 F5 | 	and	result1, #7
29048     F0 16 06 F6 | 	mov	arg03, #240
2904c     FD 16 42 F5 | 	or	arg03, result1
29050     0A 17 42 FC | 	wrbyte	arg03, arg02
29054     01 14 06 F1 | 	add	arg02, #1
29058     00 FB 01 F6 | 	mov	result1, _var01
2905c     0C FA 45 F0 | 	shr	result1, #12
29060     3F FA 05 F5 | 	and	result1, #63
29064     80 16 06 F6 | 	mov	arg03, #128
29068     FD 16 42 F5 | 	or	arg03, result1
2906c     0A 17 42 FC | 	wrbyte	arg03, arg02
29070     01 14 06 F1 | 	add	arg02, #1
29074     00 FB 01 F6 | 	mov	result1, _var01
29078     06 FA 45 F0 | 	shr	result1, #6
2907c     3F FA 05 F5 | 	and	result1, #63
29080     80 16 06 F6 | 	mov	arg03, #128
29084     FD 16 42 F5 | 	or	arg03, result1
29088     0A 17 42 FC | 	wrbyte	arg03, arg02
2908c     01 14 06 F1 | 	add	arg02, #1
29090     3F 00 06 F5 | 	and	_var01, #63
29094     80 FA 05 F6 | 	mov	result1, #128
29098     00 FB 41 F5 | 	or	result1, _var01
2909c     0A FB 41 FC | 	wrbyte	result1, arg02
290a0                 | ' 	chr = (hc | chr) + 0x10000;
290a0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
290a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
290a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
290a0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
290a0                 | ' 	return 4;
290a0     04 FA 05 F6 | 	mov	result1, #4
290a4                 | _fatfs_cc_put_utf_ret
290a4     2D 00 64 FD | 	ret
290a8                 | 
290a8                 | _fatfs_cc_sync_window
290a8     02 4A 05 F6 | 	mov	COUNT_, #2
290ac     A8 00 A0 FD | 	call	#pushregs_
290b0     09 1F 02 F6 | 	mov	local01, arg01
290b4     00 20 06 F6 | 	mov	local02, #0
290b8     03 1E 06 F1 | 	add	local01, #3
290bc     0F FB C9 FA | 	rdbyte	result1, local01 wz
290c0     03 1E 86 F1 | 	sub	local01, #3
290c4     A4 00 90 AD |  if_e	jmp	#LR__4162
290c8     01 1E 06 F1 | 	add	local01, #1
290cc     0F 13 C2 FA | 	rdbyte	arg01, local01
290d0     33 1E 06 F1 | 	add	local01, #51
290d4     0F 15 02 F6 | 	mov	arg02, local01
290d8     04 1E 86 F1 | 	sub	local01, #4
290dc     0F 17 02 FB | 	rdlong	arg03, local01
290e0     30 1E 86 F1 | 	sub	local01, #48
290e4     01 18 06 F6 | 	mov	arg04, #1
290e8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
290ec     00 FA 0D F2 | 	cmp	result1, #0 wz
290f0     74 00 90 5D |  if_ne	jmp	#LR__4160
290f4     03 1E 06 F1 | 	add	local01, #3
290f8     0F 01 48 FC | 	wrbyte	#0, local01
290fc     2D 1E 06 F1 | 	add	local01, #45
29100     0F FB 01 FB | 	rdlong	result1, local01
29104     0C 1E 86 F1 | 	sub	local01, #12
29108     0F 19 02 FB | 	rdlong	arg04, local01
2910c     0C FB 81 F1 | 	sub	result1, arg04
29110     08 1E 86 F1 | 	sub	local01, #8
29114     0F 19 02 FB | 	rdlong	arg04, local01
29118     1C 1E 86 F1 | 	sub	local01, #28
2911c     0C FB 11 F2 | 	cmp	result1, arg04 wc
29120     48 00 90 3D |  if_ae	jmp	#LR__4161
29124     02 1E 06 F1 | 	add	local01, #2
29128     0F 19 C2 FA | 	rdbyte	arg04, local01
2912c     02 1E 86 F1 | 	sub	local01, #2
29130     02 18 0E F2 | 	cmp	arg04, #2 wz
29134     34 00 90 5D |  if_ne	jmp	#LR__4161
29138     01 1E 06 F1 | 	add	local01, #1
2913c     0F 13 C2 FA | 	rdbyte	arg01, local01
29140     33 1E 06 F1 | 	add	local01, #51
29144     0F 15 02 F6 | 	mov	arg02, local01
29148     04 1E 86 F1 | 	sub	local01, #4
2914c     0F 17 02 FB | 	rdlong	arg03, local01
29150     14 1E 86 F1 | 	sub	local01, #20
29154     0F 1F 02 FB | 	rdlong	local01, local01
29158     0F 17 02 F1 | 	add	arg03, local01
2915c     01 18 06 F6 | 	mov	arg04, #1
29160     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
29164     04 00 90 FD | 	jmp	#LR__4161
29168                 | LR__4160
29168     01 20 06 F6 | 	mov	local02, #1
2916c                 | LR__4161
2916c                 | LR__4162
2916c                 | ' 			res = FR_DISK_ERR;
2916c                 | ' 		}
2916c                 | ' 	}
2916c                 | ' 	return res;
2916c     10 FB 01 F6 | 	mov	result1, local02
29170     A7 F0 03 F6 | 	mov	ptra, fp
29174     B2 00 A0 FD | 	call	#popregs_
29178                 | _fatfs_cc_sync_window_ret
29178     2D 00 64 FD | 	ret
2917c                 | 
2917c                 | _fatfs_cc_move_window
2917c     03 4A 05 F6 | 	mov	COUNT_, #3
29180     A8 00 A0 FD | 	call	#pushregs_
29184     09 1F 02 F6 | 	mov	local01, arg01
29188     0A 21 02 F6 | 	mov	local02, arg02
2918c     00 22 06 F6 | 	mov	local03, #0
29190     30 1E 06 F1 | 	add	local01, #48
29194     0F 19 02 FB | 	rdlong	arg04, local01
29198     30 1E 86 F1 | 	sub	local01, #48
2919c     0C 21 0A F2 | 	cmp	local02, arg04 wz
291a0     40 00 90 AD |  if_e	jmp	#LR__4171
291a4     0F 13 02 F6 | 	mov	arg01, local01
291a8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
291ac     FD 22 0A F6 | 	mov	local03, result1 wz
291b0     30 00 90 5D |  if_ne	jmp	#LR__4170
291b4     01 1E 06 F1 | 	add	local01, #1
291b8     0F 13 C2 FA | 	rdbyte	arg01, local01
291bc     33 1E 06 F1 | 	add	local01, #51
291c0     0F 15 02 F6 | 	mov	arg02, local01
291c4     10 17 02 F6 | 	mov	arg03, local02
291c8     01 18 06 F6 | 	mov	arg04, #1
291cc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
291d0     00 FA 0D F2 | 	cmp	result1, #0 wz
291d4     01 20 66 56 |  if_ne	neg	local02, #1
291d8     01 22 06 56 |  if_ne	mov	local03, #1
291dc     04 1E 86 F1 | 	sub	local01, #4
291e0     0F 21 62 FC | 	wrlong	local02, local01
291e4                 | LR__4170
291e4                 | LR__4171
291e4                 | ' 				sect = (LBA_t)0 - 1;
291e4                 | ' 				res = FR_DISK_ERR;
291e4                 | ' 			}
291e4                 | ' 			fs->winsect = sect;
291e4                 | ' 		}
291e4                 | ' 	}
291e4                 | ' 	return res;
291e4     11 FB 01 F6 | 	mov	result1, local03
291e8     A7 F0 03 F6 | 	mov	ptra, fp
291ec     B2 00 A0 FD | 	call	#popregs_
291f0                 | _fatfs_cc_move_window_ret
291f0     2D 00 64 FD | 	ret
291f4                 | 
291f4                 | _fatfs_cc_sync_fs
291f4     02 4A 05 F6 | 	mov	COUNT_, #2
291f8     A8 00 A0 FD | 	call	#pushregs_
291fc     09 1F 02 F6 | 	mov	local01, arg01
29200     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
29204     FD 20 0A F6 | 	mov	local02, result1 wz
29208     D8 00 90 5D |  if_ne	jmp	#LR__4181
2920c     0F 19 C2 FA | 	rdbyte	arg04, local01
29210     03 18 0E F2 | 	cmp	arg04, #3 wz
29214     04 1E 06 A1 |  if_e	add	local01, #4
29218     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
2921c     04 1E 86 A1 |  if_e	sub	local01, #4
29220     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
29224     A0 00 90 5D |  if_ne	jmp	#LR__4180
29228     34 1E 06 F1 | 	add	local01, #52
2922c     0F 13 02 F6 | 	mov	arg01, local01
29230     00 14 06 F6 | 	mov	arg02, #0
29234     09 16 C6 F9 | 	decod	arg03, #9
29238     98 00 A0 FD | 	call	#\builtin_bytefill_
2923c     0F 13 02 F6 | 	mov	arg01, local01
29240     FE 13 06 F1 | 	add	arg01, #510
29244     55 00 80 FF 
29248     09 AB 58 FC | 	wrword	##43605, arg01
2924c     A9 B0 A0 FF 
29250     0F A5 68 FC | 	wrlong	##1096897106, local01
29254     0F 13 02 F6 | 	mov	arg01, local01
29258     E4 13 06 F1 | 	add	arg01, #484
2925c     B9 A0 B0 FF 
29260     09 E5 68 FC | 	wrlong	##1631679090, arg01
29264     0F 13 02 F6 | 	mov	arg01, local01
29268     E8 13 06 F1 | 	add	arg01, #488
2926c     20 1E 86 F1 | 	sub	local01, #32
29270     0F 15 02 FB | 	rdlong	arg02, local01
29274     09 15 62 FC | 	wrlong	arg02, arg01
29278     20 1E 06 F1 | 	add	local01, #32
2927c     0F 13 02 F6 | 	mov	arg01, local01
29280     EC 13 06 F1 | 	add	arg01, #492
29284     24 1E 86 F1 | 	sub	local01, #36
29288     0F 15 02 FB | 	rdlong	arg02, local01
2928c     09 15 62 FC | 	wrlong	arg02, arg01
29290     10 1E 06 F1 | 	add	local01, #16
29294     0F 17 02 FB | 	rdlong	arg03, local01
29298     01 16 06 F1 | 	add	arg03, #1
2929c     10 1E 06 F1 | 	add	local01, #16
292a0     0F 17 62 FC | 	wrlong	arg03, local01
292a4     2F 1E 86 F1 | 	sub	local01, #47
292a8     0F 13 C2 FA | 	rdbyte	arg01, local01
292ac     33 1E 06 F1 | 	add	local01, #51
292b0     0F 15 02 F6 | 	mov	arg02, local01
292b4     01 18 06 F6 | 	mov	arg04, #1
292b8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
292bc     30 1E 86 F1 | 	sub	local01, #48
292c0     0F 01 48 FC | 	wrbyte	#0, local01
292c4     04 1E 86 F1 | 	sub	local01, #4
292c8                 | LR__4180
292c8     01 1E 06 F1 | 	add	local01, #1
292cc     0F 13 C2 FA | 	rdbyte	arg01, local01
292d0     00 14 06 F6 | 	mov	arg02, #0
292d4     00 16 06 F6 | 	mov	arg03, #0
292d8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
292dc     00 FA 0D F2 | 	cmp	result1, #0 wz
292e0     01 20 06 56 |  if_ne	mov	local02, #1
292e4                 | LR__4181
292e4                 | ' 	}
292e4                 | ' 
292e4                 | ' 	return res;
292e4     10 FB 01 F6 | 	mov	result1, local02
292e8     A7 F0 03 F6 | 	mov	ptra, fp
292ec     B2 00 A0 FD | 	call	#popregs_
292f0                 | _fatfs_cc_sync_fs_ret
292f0     2D 00 64 FD | 	ret
292f4                 | 
292f4                 | _fatfs_cc_clst2sect
292f4     02 14 86 F1 | 	sub	arg02, #2
292f8     18 12 06 F1 | 	add	arg01, #24
292fc     09 01 02 FB | 	rdlong	_var01, arg01
29300     18 12 86 F1 | 	sub	arg01, #24
29304     02 00 86 F1 | 	sub	_var01, #2
29308     00 15 12 F2 | 	cmp	arg02, _var01 wc
2930c     00 FA 05 36 |  if_ae	mov	result1, #0
29310     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
29314     0A 12 06 F1 | 	add	arg01, #10
29318     09 01 E2 FA | 	rdword	_var01, arg01
2931c     0A 01 02 FD | 	qmul	_var01, arg02
29320                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
29320     22 12 06 F1 | 	add	arg01, #34
29324     09 FB 01 FB | 	rdlong	result1, arg01
29328     18 00 62 FD | 	getqx	_var01
2932c     00 FB 01 F1 | 	add	result1, _var01
29330                 | _fatfs_cc_clst2sect_ret
29330     2D 00 64 FD | 	ret
29334                 | 
29334                 | _fatfs_cc_get_fat
29334     07 4A 05 F6 | 	mov	COUNT_, #7
29338     A8 00 A0 FD | 	call	#pushregs_
2933c     0A 1F 02 F6 | 	mov	local01, arg02
29340     09 21 02 FB | 	rdlong	local02, arg01
29344     02 1E 16 F2 | 	cmp	local01, #2 wc
29348     14 00 90 CD |  if_b	jmp	#LR__4190
2934c     18 20 06 F1 | 	add	local02, #24
29350     10 23 02 FB | 	rdlong	local03, local02
29354     18 20 86 F1 | 	sub	local02, #24
29358     11 1F 12 F2 | 	cmp	local01, local03 wc
2935c     08 00 90 CD |  if_b	jmp	#LR__4191
29360                 | LR__4190
29360     01 24 06 F6 | 	mov	local04, #1
29364     60 01 90 FD | 	jmp	#LR__4198
29368                 | LR__4191
29368     01 24 66 F6 | 	neg	local04, #1
2936c                 | ' 		val = 0xFFFFFFFF;
2936c                 | ' 
2936c                 | ' 		switch (fs->fs_type) {
2936c     10 27 C2 FA | 	rdbyte	local05, local02
29370     01 26 86 F1 | 	sub	local05, #1
29374     03 26 26 F3 | 	fle	local05, #3
29378     30 26 62 FD | 	jmprel	local05
2937c                 | LR__4192
2937c     0C 00 90 FD | 	jmp	#LR__4193
29380     B8 00 90 FD | 	jmp	#LR__4194
29384     F8 00 90 FD | 	jmp	#LR__4195
29388     38 01 90 FD | 	jmp	#LR__4196
2938c                 | LR__4193
2938c     0F 27 02 F6 | 	mov	local05, local01
29390     0F 13 02 F6 | 	mov	arg01, local01
29394     01 12 46 F0 | 	shr	arg01, #1
29398     09 27 02 F1 | 	add	local05, arg01
2939c     10 13 02 F6 | 	mov	arg01, local02
293a0     13 29 02 F6 | 	mov	local06, local05
293a4     09 28 46 F0 | 	shr	local06, #9
293a8     24 20 06 F1 | 	add	local02, #36
293ac     10 15 02 FB | 	rdlong	arg02, local02
293b0     24 20 86 F1 | 	sub	local02, #36
293b4     14 15 02 F1 | 	add	arg02, local06
293b8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
293bc     00 FA 0D F2 | 	cmp	result1, #0 wz
293c0     04 01 90 5D |  if_ne	jmp	#LR__4197
293c4     13 29 02 F6 | 	mov	local06, local05
293c8     FF 29 06 F5 | 	and	local06, #511
293cc     34 20 06 F1 | 	add	local02, #52
293d0     10 29 02 F1 | 	add	local06, local02
293d4     14 2B C2 FA | 	rdbyte	local07, local06
293d8     34 20 86 F1 | 	sub	local02, #52
293dc     10 13 02 F6 | 	mov	arg01, local02
293e0     01 26 06 F1 | 	add	local05, #1
293e4     13 29 02 F6 | 	mov	local06, local05
293e8     09 28 46 F0 | 	shr	local06, #9
293ec     24 20 06 F1 | 	add	local02, #36
293f0     10 15 02 FB | 	rdlong	arg02, local02
293f4     24 20 86 F1 | 	sub	local02, #36
293f8     14 15 02 F1 | 	add	arg02, local06
293fc     7C FD BF FD | 	call	#_fatfs_cc_move_window
29400     00 FA 0D F2 | 	cmp	result1, #0 wz
29404     C0 00 90 5D |  if_ne	jmp	#LR__4197
29408     FF 27 06 F5 | 	and	local05, #511
2940c     34 20 06 F1 | 	add	local02, #52
29410     10 27 02 F1 | 	add	local05, local02
29414     13 29 C2 FA | 	rdbyte	local06, local05
29418     08 28 66 F0 | 	shl	local06, #8
2941c     14 2B 42 F5 | 	or	local07, local06
29420     01 1E CE F7 | 	test	local01, #1 wz
29424     04 2A 46 50 |  if_ne	shr	local07, #4
29428     15 23 02 56 |  if_ne	mov	local03, local07
2942c     0B 2A 46 A7 |  if_e	zerox	local07, #11
29430     15 23 02 A6 |  if_e	mov	local03, local07
29434     11 25 02 F6 | 	mov	local04, local03
29438                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
29438                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
29438                 | ' 			break;
29438     8C 00 90 FD | 	jmp	#LR__4197
2943c                 | LR__4194
2943c     10 13 02 F6 | 	mov	arg01, local02
29440     0F 29 02 F6 | 	mov	local06, local01
29444     08 28 46 F0 | 	shr	local06, #8
29448     24 20 06 F1 | 	add	local02, #36
2944c     10 15 02 FB | 	rdlong	arg02, local02
29450     24 20 86 F1 | 	sub	local02, #36
29454     14 15 02 F1 | 	add	arg02, local06
29458     20 FD BF FD | 	call	#_fatfs_cc_move_window
2945c     00 FA 0D F2 | 	cmp	result1, #0 wz
29460     64 00 90 5D |  if_ne	jmp	#LR__4197
29464     34 20 06 F1 | 	add	local02, #52
29468     01 1E 66 F0 | 	shl	local01, #1
2946c     FF 1F 06 F5 | 	and	local01, #511
29470     0F 21 02 F1 | 	add	local02, local01
29474                 | ' {
29474                 | ' 
29474                 | ' 	return *((WORD*)ptr);
29474     10 FB E1 FA | 	rdword	result1, local02
29478     FD 24 32 F9 | 	getword	local04, result1, #0
2947c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2947c                 | ' 			break;
2947c     48 00 90 FD | 	jmp	#LR__4197
29480                 | LR__4195
29480     10 13 02 F6 | 	mov	arg01, local02
29484     0F 29 02 F6 | 	mov	local06, local01
29488     07 28 46 F0 | 	shr	local06, #7
2948c     24 20 06 F1 | 	add	local02, #36
29490     10 15 02 FB | 	rdlong	arg02, local02
29494     24 20 86 F1 | 	sub	local02, #36
29498     14 15 02 F1 | 	add	arg02, local06
2949c     DC FC BF FD | 	call	#_fatfs_cc_move_window
294a0     00 FA 0D F2 | 	cmp	result1, #0 wz
294a4     20 00 90 5D |  if_ne	jmp	#LR__4197
294a8     34 20 06 F1 | 	add	local02, #52
294ac     02 1E 66 F0 | 	shl	local01, #2
294b0     FF 1F 06 F5 | 	and	local01, #511
294b4     0F 21 02 F1 | 	add	local02, local01
294b8                 | ' {
294b8                 | ' 
294b8                 | ' 	return *((DWORD*)ptr);
294b8     10 25 02 FB | 	rdlong	local04, local02
294bc     7C 24 06 F4 | 	bitl	local04, #124
294c0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
294c0                 | ' 			break;
294c0     04 00 90 FD | 	jmp	#LR__4197
294c4                 | LR__4196
294c4     01 24 06 F6 | 	mov	local04, #1
294c8                 | LR__4197
294c8                 | LR__4198
294c8                 | ' 			val = 1;
294c8                 | ' 		}
294c8                 | ' 	}
294c8                 | ' 
294c8                 | ' 	return val;
294c8     12 FB 01 F6 | 	mov	result1, local04
294cc     A7 F0 03 F6 | 	mov	ptra, fp
294d0     B2 00 A0 FD | 	call	#popregs_
294d4                 | _fatfs_cc_get_fat_ret
294d4     2D 00 64 FD | 	ret
294d8                 | 
294d8                 | _fatfs_cc_put_fat
294d8     08 4A 05 F6 | 	mov	COUNT_, #8
294dc     A8 00 A0 FD | 	call	#pushregs_
294e0     09 1F 02 F6 | 	mov	local01, arg01
294e4     0A 21 02 F6 | 	mov	local02, arg02
294e8     0B 23 02 F6 | 	mov	local03, arg03
294ec     02 24 06 F6 | 	mov	local04, #2
294f0     02 20 16 F2 | 	cmp	local02, #2 wc
294f4     E0 01 90 CD |  if_b	jmp	#LR__4207
294f8     18 1E 06 F1 | 	add	local01, #24
294fc     0F 27 02 FB | 	rdlong	local05, local01
29500     18 1E 86 F1 | 	sub	local01, #24
29504     13 21 12 F2 | 	cmp	local02, local05 wc
29508     CC 01 90 3D |  if_ae	jmp	#LR__4207
2950c                 | ' 		switch (fs->fs_type) {
2950c     0F 29 C2 FA | 	rdbyte	local06, local01
29510     01 28 86 F1 | 	sub	local06, #1
29514     03 28 26 F3 | 	fle	local06, #3
29518     30 28 62 FD | 	jmprel	local06
2951c                 | LR__4200
2951c     0C 00 90 FD | 	jmp	#LR__4201
29520     F8 00 90 FD | 	jmp	#LR__4204
29524     40 01 90 FD | 	jmp	#LR__4205
29528     AC 01 90 FD | 	jmp	#LR__4206
2952c                 | LR__4201
2952c     10 2B 02 F6 | 	mov	local07, local02
29530     10 27 02 F6 | 	mov	local05, local02
29534     01 26 46 F0 | 	shr	local05, #1
29538     13 2B 02 F1 | 	add	local07, local05
2953c     0F 13 02 F6 | 	mov	arg01, local01
29540     15 29 02 F6 | 	mov	local06, local07
29544     09 28 46 F0 | 	shr	local06, #9
29548     24 1E 06 F1 | 	add	local01, #36
2954c     0F 15 02 FB | 	rdlong	arg02, local01
29550     24 1E 86 F1 | 	sub	local01, #36
29554     14 15 02 F1 | 	add	arg02, local06
29558     20 FC BF FD | 	call	#_fatfs_cc_move_window
2955c     FD 24 0A F6 | 	mov	local04, result1 wz
29560     74 01 90 5D |  if_ne	jmp	#LR__4206
29564     34 1E 06 F1 | 	add	local01, #52
29568     0F 2D 02 F6 | 	mov	local08, local01
2956c     15 27 02 F6 | 	mov	local05, local07
29570     FF 27 06 F5 | 	and	local05, #511
29574     13 2D 02 F1 | 	add	local08, local05
29578     01 20 CE F7 | 	test	local02, #1 wz
2957c     34 1E 86 F1 | 	sub	local01, #52
29580     01 2A 06 F1 | 	add	local07, #1
29584     18 00 90 AD |  if_e	jmp	#LR__4202
29588     16 27 C2 FA | 	rdbyte	local05, local08
2958c     13 27 42 F8 | 	getnib	local05, local05, #0
29590     11 29 E2 F8 | 	getbyte	local06, local03, #0
29594     04 28 66 F0 | 	shl	local06, #4
29598     14 27 42 F5 | 	or	local05, local06
2959c     04 00 90 FD | 	jmp	#LR__4203
295a0                 | LR__4202
295a0     11 27 02 F6 | 	mov	local05, local03
295a4                 | LR__4203
295a4     16 27 42 FC | 	wrbyte	local05, local08
295a8     03 1E 06 F1 | 	add	local01, #3
295ac     0F 03 48 FC | 	wrbyte	#1, local01
295b0     03 1E 86 F1 | 	sub	local01, #3
295b4     0F 13 02 F6 | 	mov	arg01, local01
295b8     15 2D 02 F6 | 	mov	local08, local07
295bc     09 2C 46 F0 | 	shr	local08, #9
295c0     24 1E 06 F1 | 	add	local01, #36
295c4     0F 15 02 FB | 	rdlong	arg02, local01
295c8     24 1E 86 F1 | 	sub	local01, #36
295cc     16 15 02 F1 | 	add	arg02, local08
295d0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
295d4     FD 24 0A F6 | 	mov	local04, result1 wz
295d8     FC 00 90 5D |  if_ne	jmp	#LR__4206
295dc     34 1E 06 F1 | 	add	local01, #52
295e0     0F 2D 02 F6 | 	mov	local08, local01
295e4     FF 2B 06 F5 | 	and	local07, #511
295e8     15 2D 02 F1 | 	add	local08, local07
295ec     01 20 CE F7 | 	test	local02, #1 wz
295f0     04 22 46 50 |  if_ne	shr	local03, #4
295f4     11 27 02 56 |  if_ne	mov	local05, local03
295f8     16 27 C2 AA |  if_e	rdbyte	local05, local08
295fc     F0 26 06 A5 |  if_e	and	local05, #240
29600     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
29604     11 23 42 A8 |  if_e	getnib	local03, local03, #0
29608     11 27 42 A5 |  if_e	or	local05, local03
2960c     16 27 42 FC | 	wrbyte	local05, local08
29610     31 1E 86 F1 | 	sub	local01, #49
29614     0F 03 48 FC | 	wrbyte	#1, local01
29618                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
29618                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
29618                 | ' 			fs->wflag = 1;
29618                 | ' 			break;
29618     BC 00 90 FD | 	jmp	#LR__4206
2961c                 | LR__4204
2961c     0F 13 02 F6 | 	mov	arg01, local01
29620     10 2D 02 F6 | 	mov	local08, local02
29624     08 2C 46 F0 | 	shr	local08, #8
29628     24 1E 06 F1 | 	add	local01, #36
2962c     0F 15 02 FB | 	rdlong	arg02, local01
29630     24 1E 86 F1 | 	sub	local01, #36
29634     16 15 02 F1 | 	add	arg02, local08
29638     40 FB BF FD | 	call	#_fatfs_cc_move_window
2963c     FD 24 0A F6 | 	mov	local04, result1 wz
29640     94 00 90 5D |  if_ne	jmp	#LR__4206
29644     34 1E 06 F1 | 	add	local01, #52
29648     0F 13 02 F6 | 	mov	arg01, local01
2964c     01 20 66 F0 | 	shl	local02, #1
29650     FF 21 06 F5 | 	and	local02, #511
29654     10 13 02 F1 | 	add	arg01, local02
29658     09 23 52 FC | 	wrword	local03, arg01
2965c     31 1E 86 F1 | 	sub	local01, #49
29660     0F 03 48 FC | 	wrbyte	#1, local01
29664                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
29664                 | ' 			fs->wflag = 1;
29664                 | ' 			break;
29664     70 00 90 FD | 	jmp	#LR__4206
29668                 | LR__4205
29668     0F 13 02 F6 | 	mov	arg01, local01
2966c     10 2D 02 F6 | 	mov	local08, local02
29670     07 2C 46 F0 | 	shr	local08, #7
29674     24 1E 06 F1 | 	add	local01, #36
29678     0F 15 02 FB | 	rdlong	arg02, local01
2967c     24 1E 86 F1 | 	sub	local01, #36
29680     16 15 02 F1 | 	add	arg02, local08
29684     F4 FA BF FD | 	call	#_fatfs_cc_move_window
29688     FD 24 0A F6 | 	mov	local04, result1 wz
2968c     48 00 90 5D |  if_ne	jmp	#LR__4206
29690     7C 22 06 F4 | 	bitl	local03, #124
29694     34 1E 06 F1 | 	add	local01, #52
29698     10 2D 02 F6 | 	mov	local08, local02
2969c     02 2C 66 F0 | 	shl	local08, #2
296a0     FF 2D 06 F5 | 	and	local08, #511
296a4     0F 13 02 F6 | 	mov	arg01, local01
296a8     16 13 02 F1 | 	add	arg01, local08
296ac                 | ' {
296ac                 | ' 
296ac                 | ' 	return *((DWORD*)ptr);
296ac     09 2D 02 FB | 	rdlong	local08, arg01
296b0     00 00 78 FF 
296b4     00 2C 06 F5 | 	and	local08, ##-268435456
296b8     16 23 42 F5 | 	or	local03, local08
296bc     0F 13 02 F6 | 	mov	arg01, local01
296c0     02 20 66 F0 | 	shl	local02, #2
296c4     FF 21 06 F5 | 	and	local02, #511
296c8     10 13 02 F1 | 	add	arg01, local02
296cc     09 23 62 FC | 	wrlong	local03, arg01
296d0     31 1E 86 F1 | 	sub	local01, #49
296d4     0F 03 48 FC | 	wrbyte	#1, local01
296d8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
296d8                 | ' 			}
296d8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
296d8                 | ' 			fs->wflag = 1;
296d8                 | ' 			break;
296d8                 | LR__4206
296d8                 | LR__4207
296d8                 | ' 		}
296d8                 | ' 	}
296d8                 | ' 	return res;
296d8     12 FB 01 F6 | 	mov	result1, local04
296dc     A7 F0 03 F6 | 	mov	ptra, fp
296e0     B2 00 A0 FD | 	call	#popregs_
296e4                 | _fatfs_cc_put_fat_ret
296e4     2D 00 64 FD | 	ret
296e8                 | 
296e8                 | _fatfs_cc_remove_chain
296e8     05 4A 05 F6 | 	mov	COUNT_, #5
296ec     A8 00 A0 FD | 	call	#pushregs_
296f0     09 1F 02 F6 | 	mov	local01, arg01
296f4     0A 21 02 F6 | 	mov	local02, arg02
296f8     0B 23 02 F6 | 	mov	local03, arg03
296fc     0F 25 02 FB | 	rdlong	local04, local01
29700     02 20 16 F2 | 	cmp	local02, #2 wc
29704     14 00 90 CD |  if_b	jmp	#LR__4210
29708     18 24 06 F1 | 	add	local04, #24
2970c     12 FB 01 FB | 	rdlong	result1, local04
29710     18 24 86 F1 | 	sub	local04, #24
29714     FD 20 12 F2 | 	cmp	local02, result1 wc
29718     08 00 90 CD |  if_b	jmp	#LR__4211
2971c                 | LR__4210
2971c     02 FA 05 F6 | 	mov	result1, #2
29720     CC 00 90 FD | 	jmp	#LR__4216
29724                 | LR__4211
29724     00 22 0E F2 | 	cmp	local03, #0 wz
29728     18 00 90 AD |  if_e	jmp	#LR__4212
2972c     11 15 02 F6 | 	mov	arg02, local03
29730     12 13 02 F6 | 	mov	arg01, local04
29734     01 16 66 F6 | 	neg	arg03, #1
29738     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2973c     00 FA 0D F2 | 	cmp	result1, #0 wz
29740     AC 00 90 5D |  if_ne	jmp	#LR__4216
29744                 | LR__4212
29744                 | ' 	}
29744                 | ' 
29744                 | ' 
29744                 | ' 	do {
29744                 | LR__4213
29744     10 15 02 F6 | 	mov	arg02, local02
29748     0F 13 02 F6 | 	mov	arg01, local01
2974c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
29750     FD 26 0A F6 | 	mov	local05, result1 wz
29754     94 00 90 AD |  if_e	jmp	#LR__4215
29758     01 26 0E F2 | 	cmp	local05, #1 wz
2975c     02 FA 05 A6 |  if_e	mov	result1, #2
29760     8C 00 90 AD |  if_e	jmp	#LR__4216
29764     FF FF 7F FF 
29768     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2976c     01 FA 05 A6 |  if_e	mov	result1, #1
29770     7C 00 90 AD |  if_e	jmp	#LR__4216
29774     10 15 02 F6 | 	mov	arg02, local02
29778     12 13 02 F6 | 	mov	arg01, local04
2977c     00 16 06 F6 | 	mov	arg03, #0
29780     54 FD BF FD | 	call	#_fatfs_cc_put_fat
29784     FD 22 0A F6 | 	mov	local03, result1 wz
29788     11 FB 01 56 |  if_ne	mov	result1, local03
2978c     60 00 90 5D |  if_ne	jmp	#LR__4216
29790     18 24 06 F1 | 	add	local04, #24
29794     12 23 02 FB | 	rdlong	local03, local04
29798     02 22 86 F1 | 	sub	local03, #2
2979c     04 24 86 F1 | 	sub	local04, #4
297a0     12 21 02 FB | 	rdlong	local02, local04
297a4     14 24 86 F1 | 	sub	local04, #20
297a8     11 21 12 F2 | 	cmp	local02, local03 wc
297ac     24 00 90 3D |  if_ae	jmp	#LR__4214
297b0     14 24 06 F1 | 	add	local04, #20
297b4     12 23 02 FB | 	rdlong	local03, local04
297b8     01 22 06 F1 | 	add	local03, #1
297bc     12 23 62 FC | 	wrlong	local03, local04
297c0     10 24 86 F1 | 	sub	local04, #16
297c4     12 23 C2 FA | 	rdbyte	local03, local04
297c8     01 22 46 F5 | 	or	local03, #1
297cc     12 23 42 FC | 	wrbyte	local03, local04
297d0     04 24 86 F1 | 	sub	local04, #4
297d4                 | LR__4214
297d4     13 21 02 F6 | 	mov	local02, local05
297d8     18 24 06 F1 | 	add	local04, #24
297dc     12 27 02 FB | 	rdlong	local05, local04
297e0     18 24 86 F1 | 	sub	local04, #24
297e4     13 21 12 F2 | 	cmp	local02, local05 wc
297e8     58 FF 9F CD |  if_b	jmp	#LR__4213
297ec                 | LR__4215
297ec                 | ' #line 1500 "ff.c"
297ec                 | ' 	return FR_OK;
297ec     00 FA 05 F6 | 	mov	result1, #0
297f0                 | LR__4216
297f0     A7 F0 03 F6 | 	mov	ptra, fp
297f4     B2 00 A0 FD | 	call	#popregs_
297f8                 | _fatfs_cc_remove_chain_ret
297f8     2D 00 64 FD | 	ret
297fc                 | 
297fc                 | _fatfs_cc_create_chain
297fc     09 4A 05 F6 | 	mov	COUNT_, #9
29800     A8 00 A0 FD | 	call	#pushregs_
29804     09 1F 02 F6 | 	mov	local01, arg01
29808     0A 21 0A F6 | 	mov	local02, arg02 wz
2980c     0F 23 02 FB | 	rdlong	local03, local01
29810     28 00 90 5D |  if_ne	jmp	#LR__4220
29814     10 22 06 F1 | 	add	local03, #16
29818     11 25 0A FB | 	rdlong	local04, local03 wz
2981c     10 22 86 F1 | 	sub	local03, #16
29820     18 22 06 51 |  if_ne	add	local03, #24
29824     11 27 02 5B |  if_ne	rdlong	local05, local03
29828     18 22 86 51 |  if_ne	sub	local03, #24
2982c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
29830     50 00 90 4D |  if_c_and_nz	jmp	#LR__4221
29834     01 24 06 F6 | 	mov	local04, #1
29838     48 00 90 FD | 	jmp	#LR__4221
2983c                 | LR__4220
2983c     10 15 02 F6 | 	mov	arg02, local02
29840     0F 13 02 F6 | 	mov	arg01, local01
29844     EC FA BF FD | 	call	#_fatfs_cc_get_fat
29848     FD 24 02 F6 | 	mov	local04, result1
2984c     02 24 16 F2 | 	cmp	local04, #2 wc
29850     01 FA 05 C6 |  if_b	mov	result1, #1
29854     BC 01 90 CD |  if_b	jmp	#LR__4231
29858     FF FF 7F FF 
2985c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29860     12 FB 01 A6 |  if_e	mov	result1, local04
29864     AC 01 90 AD |  if_e	jmp	#LR__4231
29868     18 22 06 F1 | 	add	local03, #24
2986c     11 27 02 FB | 	rdlong	local05, local03
29870     18 22 86 F1 | 	sub	local03, #24
29874     13 25 12 F2 | 	cmp	local04, local05 wc
29878     12 FB 01 C6 |  if_b	mov	result1, local04
2987c     94 01 90 CD |  if_b	jmp	#LR__4231
29880     10 25 02 F6 | 	mov	local04, local02
29884                 | LR__4221
29884     14 22 06 F1 | 	add	local03, #20
29888     11 27 0A FB | 	rdlong	local05, local03 wz
2988c     14 22 86 F1 | 	sub	local03, #20
29890     00 FA 05 A6 |  if_e	mov	result1, #0
29894     7C 01 90 AD |  if_e	jmp	#LR__4231
29898     00 28 06 F6 | 	mov	local06, #0
2989c     10 25 0A F2 | 	cmp	local04, local02 wz
298a0     74 00 90 5D |  if_ne	jmp	#LR__4224
298a4     12 29 02 F6 | 	mov	local06, local04
298a8     01 28 06 F1 | 	add	local06, #1
298ac     18 22 06 F1 | 	add	local03, #24
298b0     11 27 02 FB | 	rdlong	local05, local03
298b4     18 22 86 F1 | 	sub	local03, #24
298b8     13 29 12 F2 | 	cmp	local06, local05 wc
298bc     02 28 06 36 |  if_ae	mov	local06, #2
298c0     14 15 02 F6 | 	mov	arg02, local06
298c4     0F 13 02 F6 | 	mov	arg01, local01
298c8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
298cc     FD 26 02 F6 | 	mov	local05, result1
298d0     01 26 0E F2 | 	cmp	local05, #1 wz
298d4     FF FF 7F 5F 
298d8     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
298dc     13 FB 01 A6 |  if_e	mov	result1, local05
298e0     30 01 90 AD |  if_e	jmp	#LR__4231
298e4     00 26 0E F2 | 	cmp	local05, #0 wz
298e8     2C 00 90 AD |  if_e	jmp	#LR__4223
298ec     10 22 06 F1 | 	add	local03, #16
298f0     11 2B 02 FB | 	rdlong	local07, local03
298f4     10 22 86 F1 | 	sub	local03, #16
298f8     02 2A 16 F2 | 	cmp	local07, #2 wc
298fc     14 00 90 CD |  if_b	jmp	#LR__4222
29900     18 22 06 F1 | 	add	local03, #24
29904     11 27 02 FB | 	rdlong	local05, local03
29908     18 22 86 F1 | 	sub	local03, #24
2990c     13 2B 12 F2 | 	cmp	local07, local05 wc
29910     15 25 02 C6 |  if_b	mov	local04, local07
29914                 | LR__4222
29914     00 28 06 F6 | 	mov	local06, #0
29918                 | LR__4223
29918                 | LR__4224
29918     00 28 0E F2 | 	cmp	local06, #0 wz
2991c     60 00 90 5D |  if_ne	jmp	#LR__4227
29920     12 29 02 F6 | 	mov	local06, local04
29924                 | ' 			ncl = scl;
29924                 | ' 			for (;;) {
29924                 | LR__4225
29924     01 28 06 F1 | 	add	local06, #1
29928     18 22 06 F1 | 	add	local03, #24
2992c     11 27 02 FB | 	rdlong	local05, local03
29930     18 22 86 F1 | 	sub	local03, #24
29934     13 29 12 F2 | 	cmp	local06, local05 wc
29938     02 28 06 36 |  if_ae	mov	local06, #2
2993c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
29940     00 FA 05 16 |  if_a	mov	result1, #0
29944     CC 00 90 1D |  if_a	jmp	#LR__4231
29948     14 15 02 F6 | 	mov	arg02, local06
2994c     0F 13 02 F6 | 	mov	arg01, local01
29950     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
29954     FD 2A 0A F6 | 	mov	local07, result1 wz
29958     24 00 90 AD |  if_e	jmp	#LR__4226
2995c     01 2A 0E F2 | 	cmp	local07, #1 wz
29960     FF FF 7F 5F 
29964     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
29968     15 FB 01 A6 |  if_e	mov	result1, local07
2996c     A4 00 90 AD |  if_e	jmp	#LR__4231
29970     12 29 0A F2 | 	cmp	local06, local04 wz
29974     00 FA 05 A6 |  if_e	mov	result1, #0
29978     98 00 90 AD |  if_e	jmp	#LR__4231
2997c     A4 FF 9F FD | 	jmp	#LR__4225
29980                 | LR__4226
29980                 | LR__4227
29980     11 13 02 F6 | 	mov	arg01, local03
29984     14 15 02 F6 | 	mov	arg02, local06
29988     01 16 66 F6 | 	neg	arg03, #1
2998c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
29990     FD 2C 0A F6 | 	mov	local08, result1 wz
29994     1C 00 90 5D |  if_ne	jmp	#LR__4228
29998     00 20 0E F2 | 	cmp	local02, #0 wz
2999c     14 00 90 AD |  if_e	jmp	#LR__4228
299a0     11 13 02 F6 | 	mov	arg01, local03
299a4     10 15 02 F6 | 	mov	arg02, local02
299a8     14 17 02 F6 | 	mov	arg03, local06
299ac     28 FB BF FD | 	call	#_fatfs_cc_put_fat
299b0     FD 2C 02 F6 | 	mov	local08, result1
299b4                 | LR__4228
299b4     00 2C 0E F2 | 	cmp	local08, #0 wz
299b8     4C 00 90 5D |  if_ne	jmp	#LR__4229
299bc     10 22 06 F1 | 	add	local03, #16
299c0     11 29 62 FC | 	wrlong	local06, local03
299c4     08 22 06 F1 | 	add	local03, #8
299c8     11 27 02 FB | 	rdlong	local05, local03
299cc     02 26 86 F1 | 	sub	local05, #2
299d0     04 22 86 F1 | 	sub	local03, #4
299d4     11 2F 02 FB | 	rdlong	local09, local03
299d8     14 22 86 F1 | 	sub	local03, #20
299dc     13 2F 1A F2 | 	cmp	local09, local05 wcz
299e0     14 22 06 E1 |  if_be	add	local03, #20
299e4     11 2F 02 EB |  if_be	rdlong	local09, local03
299e8     01 2E 86 E1 |  if_be	sub	local09, #1
299ec     11 2F 62 EC |  if_be	wrlong	local09, local03
299f0     14 22 86 E1 |  if_be	sub	local03, #20
299f4     04 22 06 F1 | 	add	local03, #4
299f8     11 27 C2 FA | 	rdbyte	local05, local03
299fc     01 26 46 F5 | 	or	local05, #1
29a00     11 27 42 FC | 	wrbyte	local05, local03
29a04     08 00 90 FD | 	jmp	#LR__4230
29a08                 | LR__4229
29a08     01 2C 0E F2 | 	cmp	local08, #1 wz
29a0c     01 28 C6 F6 | 	negz	local06, #1
29a10                 | LR__4230
29a10                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
29a10                 | ' 	}
29a10                 | ' 
29a10                 | ' 	return ncl;
29a10     14 FB 01 F6 | 	mov	result1, local06
29a14                 | LR__4231
29a14     A7 F0 03 F6 | 	mov	ptra, fp
29a18     B2 00 A0 FD | 	call	#popregs_
29a1c                 | _fatfs_cc_create_chain_ret
29a1c     2D 00 64 FD | 	ret
29a20                 | 
29a20                 | _fatfs_cc_dir_clear
29a20     06 4A 05 F6 | 	mov	COUNT_, #6
29a24     A8 00 A0 FD | 	call	#pushregs_
29a28     09 1F 02 F6 | 	mov	local01, arg01
29a2c     0A 21 02 F6 | 	mov	local02, arg02
29a30     0F 13 02 F6 | 	mov	arg01, local01
29a34     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
29a38     00 FA 0D F2 | 	cmp	result1, #0 wz
29a3c     01 FA 05 56 |  if_ne	mov	result1, #1
29a40     90 00 90 5D |  if_ne	jmp	#LR__4242
29a44     0F 13 02 F6 | 	mov	arg01, local01
29a48     10 15 02 F6 | 	mov	arg02, local02
29a4c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
29a50     FD 22 02 F6 | 	mov	local03, result1
29a54     30 1E 06 F1 | 	add	local01, #48
29a58     0F 23 62 FC | 	wrlong	local03, local01
29a5c     04 1E 06 F1 | 	add	local01, #4
29a60     0F 13 02 F6 | 	mov	arg01, local01
29a64     00 14 06 F6 | 	mov	arg02, #0
29a68     09 16 C6 F9 | 	decod	arg03, #9
29a6c     98 00 A0 FD | 	call	#\builtin_bytefill_
29a70     0F 25 02 F6 | 	mov	local04, local01
29a74                 | ' #line 1667 "ff.c"
29a74                 | ' 	{
29a74                 | ' 		ibuf = fs->win; szb = 1;
29a74                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
29a74     00 26 06 F6 | 	mov	local05, #0
29a78     34 1E 86 F1 | 	sub	local01, #52
29a7c                 | LR__4240
29a7c     0A 1E 06 F1 | 	add	local01, #10
29a80     0F 29 E2 FA | 	rdword	local06, local01
29a84     0A 1E 86 F1 | 	sub	local01, #10
29a88     14 27 12 F2 | 	cmp	local05, local06 wc
29a8c     2C 00 90 3D |  if_ae	jmp	#LR__4241
29a90     01 1E 06 F1 | 	add	local01, #1
29a94     0F 13 C2 FA | 	rdbyte	arg01, local01
29a98     01 1E 86 F1 | 	sub	local01, #1
29a9c     12 15 02 F6 | 	mov	arg02, local04
29aa0     11 17 02 F6 | 	mov	arg03, local03
29aa4     13 17 02 F1 | 	add	arg03, local05
29aa8     01 18 06 F6 | 	mov	arg04, #1
29aac     9C EF BF FD | 	call	#_fatfs_cc_disk_write
29ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ab4     01 26 06 A1 |  if_e	add	local05, #1
29ab8     C0 FF 9F AD |  if_e	jmp	#LR__4240
29abc                 | LR__4241
29abc                 | ' 	}
29abc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
29abc     0A 1E 06 F1 | 	add	local01, #10
29ac0     0F 25 E2 FA | 	rdword	local04, local01
29ac4     12 27 0A F2 | 	cmp	local05, local04 wz
29ac8     00 28 06 A6 |  if_e	mov	local06, #0
29acc     01 28 06 56 |  if_ne	mov	local06, #1
29ad0     14 FB 01 F6 | 	mov	result1, local06
29ad4                 | LR__4242
29ad4     A7 F0 03 F6 | 	mov	ptra, fp
29ad8     B2 00 A0 FD | 	call	#popregs_
29adc                 | _fatfs_cc_dir_clear_ret
29adc     2D 00 64 FD | 	ret
29ae0                 | 
29ae0                 | _fatfs_cc_dir_sdi
29ae0     06 4A 05 F6 | 	mov	COUNT_, #6
29ae4     A8 00 A0 FD | 	call	#pushregs_
29ae8     09 1F 02 F6 | 	mov	local01, arg01
29aec     0A 21 02 F6 | 	mov	local02, arg02
29af0     0F 23 02 FB | 	rdlong	local03, local01
29af4     00 10 00 FF 
29af8     00 20 16 F2 | 	cmp	local02, ##2097152 wc
29afc     1F 20 CE C7 |  if_b	test	local02, #31 wz
29b00                 | ' 		return FR_INT_ERR;
29b00     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
29b04     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4256
29b08     10 1E 06 F1 | 	add	local01, #16
29b0c     0F 21 62 FC | 	wrlong	local02, local01
29b10     08 1E 86 F1 | 	sub	local01, #8
29b14     0F 25 0A FB | 	rdlong	local04, local01 wz
29b18     08 1E 86 F1 | 	sub	local01, #8
29b1c     11 27 C2 AA |  if_e	rdbyte	local05, local03
29b20     03 26 16 A2 |  if_e	cmp	local05, #3 wc
29b24     28 22 06 21 |  if_nc_and_z	add	local03, #40
29b28     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
29b2c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
29b30     00 24 0E F2 | 	cmp	local04, #0 wz
29b34     3C 00 90 5D |  if_ne	jmp	#LR__4250
29b38     10 27 02 F6 | 	mov	local05, local02
29b3c     05 26 46 F0 | 	shr	local05, #5
29b40     08 22 06 F1 | 	add	local03, #8
29b44     11 15 E2 FA | 	rdword	arg02, local03
29b48     08 22 86 F1 | 	sub	local03, #8
29b4c     0A 27 12 F2 | 	cmp	local05, arg02 wc
29b50     02 FA 05 36 |  if_ae	mov	result1, #2
29b54     E4 00 90 3D |  if_ae	jmp	#LR__4256
29b58     28 22 06 F1 | 	add	local03, #40
29b5c     11 27 02 FB | 	rdlong	local05, local03
29b60     28 22 86 F1 | 	sub	local03, #40
29b64     18 1E 06 F1 | 	add	local01, #24
29b68     0F 27 62 FC | 	wrlong	local05, local01
29b6c     18 1E 86 F1 | 	sub	local01, #24
29b70     7C 00 90 FD | 	jmp	#LR__4255
29b74                 | LR__4250
29b74     0A 22 06 F1 | 	add	local03, #10
29b78     11 29 E2 FA | 	rdword	local06, local03
29b7c     0A 22 86 F1 | 	sub	local03, #10
29b80     09 28 66 F0 | 	shl	local06, #9
29b84                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
29b84                 | ' 		while (ofs >= csz) {
29b84                 | LR__4251
29b84     14 21 12 F2 | 	cmp	local02, local06 wc
29b88     4C 00 90 CD |  if_b	jmp	#LR__4254
29b8c     0F 13 02 F6 | 	mov	arg01, local01
29b90     12 15 02 F6 | 	mov	arg02, local04
29b94     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
29b98     FD 24 02 F6 | 	mov	local04, result1
29b9c     FF FF 7F FF 
29ba0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29ba4     01 FA 05 A6 |  if_e	mov	result1, #1
29ba8     90 00 90 AD |  if_e	jmp	#LR__4256
29bac     02 24 16 F2 | 	cmp	local04, #2 wc
29bb0     14 00 90 CD |  if_b	jmp	#LR__4252
29bb4     18 22 06 F1 | 	add	local03, #24
29bb8     11 27 02 FB | 	rdlong	local05, local03
29bbc     18 22 86 F1 | 	sub	local03, #24
29bc0     13 25 12 F2 | 	cmp	local04, local05 wc
29bc4     08 00 90 CD |  if_b	jmp	#LR__4253
29bc8                 | LR__4252
29bc8     02 FA 05 F6 | 	mov	result1, #2
29bcc     6C 00 90 FD | 	jmp	#LR__4256
29bd0                 | LR__4253
29bd0     14 21 82 F1 | 	sub	local02, local06
29bd4     AC FF 9F FD | 	jmp	#LR__4251
29bd8                 | LR__4254
29bd8     11 13 02 F6 | 	mov	arg01, local03
29bdc     12 15 02 F6 | 	mov	arg02, local04
29be0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
29be4     18 1E 06 F1 | 	add	local01, #24
29be8     0F FB 61 FC | 	wrlong	result1, local01
29bec     18 1E 86 F1 | 	sub	local01, #24
29bf0                 | LR__4255
29bf0     14 1E 06 F1 | 	add	local01, #20
29bf4     0F 25 62 FC | 	wrlong	local04, local01
29bf8     04 1E 06 F1 | 	add	local01, #4
29bfc     0F 27 0A FB | 	rdlong	local05, local01 wz
29c00     18 1E 86 F1 | 	sub	local01, #24
29c04     02 FA 05 A6 |  if_e	mov	result1, #2
29c08     30 00 90 AD |  if_e	jmp	#LR__4256
29c0c     10 29 02 F6 | 	mov	local06, local02
29c10     09 28 46 F0 | 	shr	local06, #9
29c14     18 1E 06 F1 | 	add	local01, #24
29c18     0F 27 02 FB | 	rdlong	local05, local01
29c1c     14 27 02 F1 | 	add	local05, local06
29c20     0F 27 62 FC | 	wrlong	local05, local01
29c24     34 22 06 F1 | 	add	local03, #52
29c28     FF 21 06 F5 | 	and	local02, #511
29c2c     10 23 02 F1 | 	add	local03, local02
29c30     04 1E 06 F1 | 	add	local01, #4
29c34     0F 23 62 FC | 	wrlong	local03, local01
29c38                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
29c38                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
29c38                 | ' 
29c38                 | ' 	return FR_OK;
29c38     00 FA 05 F6 | 	mov	result1, #0
29c3c                 | LR__4256
29c3c     A7 F0 03 F6 | 	mov	ptra, fp
29c40     B2 00 A0 FD | 	call	#popregs_
29c44                 | _fatfs_cc_dir_sdi_ret
29c44     2D 00 64 FD | 	ret
29c48                 | 
29c48                 | _fatfs_cc_dir_next
29c48     05 4A 05 F6 | 	mov	COUNT_, #5
29c4c     A8 00 A0 FD | 	call	#pushregs_
29c50     09 1F 02 F6 | 	mov	local01, arg01
29c54     0A 21 02 F6 | 	mov	local02, arg02
29c58     0F 23 02 FB | 	rdlong	local03, local01
29c5c     10 1E 06 F1 | 	add	local01, #16
29c60     0F 25 02 FB | 	rdlong	local04, local01
29c64     10 1E 86 F1 | 	sub	local01, #16
29c68     20 24 06 F1 | 	add	local04, #32
29c6c     00 10 00 FF 
29c70     00 24 16 F2 | 	cmp	local04, ##2097152 wc
29c74     18 1E 06 31 |  if_ae	add	local01, #24
29c78     0F 01 68 3C |  if_ae	wrlong	#0, local01
29c7c     18 1E 86 31 |  if_ae	sub	local01, #24
29c80     18 1E 06 F1 | 	add	local01, #24
29c84     0F 15 0A FB | 	rdlong	arg02, local01 wz
29c88     18 1E 86 F1 | 	sub	local01, #24
29c8c     04 FA 05 A6 |  if_e	mov	result1, #4
29c90     64 01 90 AD |  if_e	jmp	#LR__4265
29c94     FF 25 CE F7 | 	test	local04, #511 wz
29c98     3C 01 90 5D |  if_ne	jmp	#LR__4264
29c9c     18 1E 06 F1 | 	add	local01, #24
29ca0     0F 15 02 FB | 	rdlong	arg02, local01
29ca4     01 14 06 F1 | 	add	arg02, #1
29ca8     0F 15 62 FC | 	wrlong	arg02, local01
29cac     04 1E 86 F1 | 	sub	local01, #4
29cb0     0F 15 0A FB | 	rdlong	arg02, local01 wz
29cb4     14 1E 86 F1 | 	sub	local01, #20
29cb8     2C 00 90 5D |  if_ne	jmp	#LR__4260
29cbc     12 15 02 F6 | 	mov	arg02, local04
29cc0     05 14 46 F0 | 	shr	arg02, #5
29cc4     08 22 06 F1 | 	add	local03, #8
29cc8     11 21 E2 FA | 	rdword	local02, local03
29ccc     08 22 86 F1 | 	sub	local03, #8
29cd0     10 15 12 F2 | 	cmp	arg02, local02 wc
29cd4     18 1E 06 31 |  if_ae	add	local01, #24
29cd8     0F 01 68 3C |  if_ae	wrlong	#0, local01
29cdc                 | ' 				dp->sect = 0; return FR_NO_FILE;
29cdc     04 FA 05 36 |  if_ae	mov	result1, #4
29ce0     14 01 90 3D |  if_ae	jmp	#LR__4265
29ce4     F0 00 90 FD | 	jmp	#LR__4263
29ce8                 | LR__4260
29ce8     12 13 02 F6 | 	mov	arg01, local04
29cec     09 12 46 F0 | 	shr	arg01, #9
29cf0     0A 22 06 F1 | 	add	local03, #10
29cf4     11 15 E2 FA | 	rdword	arg02, local03
29cf8     0A 22 86 F1 | 	sub	local03, #10
29cfc     01 14 86 F1 | 	sub	arg02, #1
29d00     0A 13 CA F7 | 	test	arg01, arg02 wz
29d04     D0 00 90 5D |  if_ne	jmp	#LR__4262
29d08     0F 13 02 F6 | 	mov	arg01, local01
29d0c     14 1E 06 F1 | 	add	local01, #20
29d10     0F 15 02 FB | 	rdlong	arg02, local01
29d14     14 1E 86 F1 | 	sub	local01, #20
29d18     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
29d1c     FD 26 02 F6 | 	mov	local05, result1
29d20     02 26 16 F2 | 	cmp	local05, #2 wc
29d24     02 FA 05 C6 |  if_b	mov	result1, #2
29d28     CC 00 90 CD |  if_b	jmp	#LR__4265
29d2c     FF FF 7F FF 
29d30     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29d34     01 FA 05 A6 |  if_e	mov	result1, #1
29d38     BC 00 90 AD |  if_e	jmp	#LR__4265
29d3c     18 22 06 F1 | 	add	local03, #24
29d40     11 15 02 FB | 	rdlong	arg02, local03
29d44     18 22 86 F1 | 	sub	local03, #24
29d48     0A 27 12 F2 | 	cmp	local05, arg02 wc
29d4c     68 00 90 CD |  if_b	jmp	#LR__4261
29d50     00 20 0E F2 | 	cmp	local02, #0 wz
29d54     18 1E 06 A1 |  if_e	add	local01, #24
29d58     0F 01 68 AC |  if_e	wrlong	#0, local01
29d5c                 | ' 						dp->sect = 0; return FR_NO_FILE;
29d5c     04 FA 05 A6 |  if_e	mov	result1, #4
29d60     94 00 90 AD |  if_e	jmp	#LR__4265
29d64     0F 13 02 F6 | 	mov	arg01, local01
29d68     14 1E 06 F1 | 	add	local01, #20
29d6c     0F 15 02 FB | 	rdlong	arg02, local01
29d70     14 1E 86 F1 | 	sub	local01, #20
29d74     84 FA BF FD | 	call	#_fatfs_cc_create_chain
29d78     FD 26 0A F6 | 	mov	local05, result1 wz
29d7c     07 FA 05 A6 |  if_e	mov	result1, #7
29d80     74 00 90 AD |  if_e	jmp	#LR__4265
29d84     01 26 0E F2 | 	cmp	local05, #1 wz
29d88     02 FA 05 A6 |  if_e	mov	result1, #2
29d8c     68 00 90 AD |  if_e	jmp	#LR__4265
29d90     FF FF 7F FF 
29d94     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29d98     01 FA 05 A6 |  if_e	mov	result1, #1
29d9c     58 00 90 AD |  if_e	jmp	#LR__4265
29da0     13 15 02 F6 | 	mov	arg02, local05
29da4     11 13 02 F6 | 	mov	arg01, local03
29da8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
29dac     00 FA 0D F2 | 	cmp	result1, #0 wz
29db0     01 FA 05 56 |  if_ne	mov	result1, #1
29db4     40 00 90 5D |  if_ne	jmp	#LR__4265
29db8                 | LR__4261
29db8     14 1E 06 F1 | 	add	local01, #20
29dbc     0F 27 62 FC | 	wrlong	local05, local01
29dc0     11 13 02 F6 | 	mov	arg01, local03
29dc4     13 15 02 F6 | 	mov	arg02, local05
29dc8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
29dcc     04 1E 06 F1 | 	add	local01, #4
29dd0     0F FB 61 FC | 	wrlong	result1, local01
29dd4     18 1E 86 F1 | 	sub	local01, #24
29dd8                 | LR__4262
29dd8                 | LR__4263
29dd8                 | LR__4264
29dd8     10 1E 06 F1 | 	add	local01, #16
29ddc     0F 25 62 FC | 	wrlong	local04, local01
29de0     34 22 06 F1 | 	add	local03, #52
29de4     FF 25 06 F5 | 	and	local04, #511
29de8     12 23 02 F1 | 	add	local03, local04
29dec     0C 1E 06 F1 | 	add	local01, #12
29df0     0F 23 62 FC | 	wrlong	local03, local01
29df4                 | ' #line 1771 "ff.c"
29df4                 | ' 				}
29df4                 | ' 				dp->clust = clst;
29df4                 | ' 				dp->sect = clst2sect(fs, clst);
29df4                 | ' 			}
29df4                 | ' 		}
29df4                 | ' 	}
29df4                 | ' 	dp->dptr = ofs;
29df4                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
29df4                 | ' 
29df4                 | ' 	return FR_OK;
29df4     00 FA 05 F6 | 	mov	result1, #0
29df8                 | LR__4265
29df8     A7 F0 03 F6 | 	mov	ptra, fp
29dfc     B2 00 A0 FD | 	call	#popregs_
29e00                 | _fatfs_cc_dir_next_ret
29e00     2D 00 64 FD | 	ret
29e04                 | 
29e04                 | _fatfs_cc_dir_alloc
29e04     08 4A 05 F6 | 	mov	COUNT_, #8
29e08     A8 00 A0 FD | 	call	#pushregs_
29e0c     09 1F 02 F6 | 	mov	local01, arg01
29e10     0A 21 02 F6 | 	mov	local02, arg02
29e14     0F 23 02 FB | 	rdlong	local03, local01
29e18     0F 13 02 F6 | 	mov	arg01, local01
29e1c     00 14 06 F6 | 	mov	arg02, #0
29e20     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
29e24     FD 24 0A F6 | 	mov	local04, result1 wz
29e28     70 00 90 5D |  if_ne	jmp	#LR__4274
29e2c     00 26 06 F6 | 	mov	local05, #0
29e30                 | ' 		n = 0;
29e30                 | ' 		do {
29e30                 | LR__4270
29e30     18 1E 06 F1 | 	add	local01, #24
29e34     0F 15 02 FB | 	rdlong	arg02, local01
29e38     18 1E 86 F1 | 	sub	local01, #24
29e3c     11 13 02 F6 | 	mov	arg01, local03
29e40     38 F3 BF FD | 	call	#_fatfs_cc_move_window
29e44     FD 24 0A F6 | 	mov	local04, result1 wz
29e48     50 00 90 5D |  if_ne	jmp	#LR__4273
29e4c     1C 1E 06 F1 | 	add	local01, #28
29e50     0F 29 02 FB | 	rdlong	local06, local01
29e54     1C 1E 86 F1 | 	sub	local01, #28
29e58     14 29 C2 FA | 	rdbyte	local06, local06
29e5c     E5 28 0E F2 | 	cmp	local06, #229 wz
29e60     1C 1E 06 51 |  if_ne	add	local01, #28
29e64     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29e68     1C 1E 86 51 |  if_ne	sub	local01, #28
29e6c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
29e70     10 00 90 5D |  if_ne	jmp	#LR__4271
29e74     01 26 06 F1 | 	add	local05, #1
29e78     10 27 0A F2 | 	cmp	local05, local02 wz
29e7c     1C 00 90 AD |  if_e	jmp	#LR__4273
29e80     04 00 90 FD | 	jmp	#LR__4272
29e84                 | LR__4271
29e84     00 26 06 F6 | 	mov	local05, #0
29e88                 | LR__4272
29e88     0F 13 02 F6 | 	mov	arg01, local01
29e8c     01 14 06 F6 | 	mov	arg02, #1
29e90     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
29e94     FD 24 0A F6 | 	mov	local04, result1 wz
29e98     94 FF 9F AD |  if_e	jmp	#LR__4270
29e9c                 | LR__4273
29e9c                 | LR__4274
29e9c     04 24 0E F2 | 	cmp	local04, #4 wz
29ea0     07 24 06 A6 |  if_e	mov	local04, #7
29ea4                 | ' 	return res;
29ea4     12 FB 01 F6 | 	mov	result1, local04
29ea8     A7 F0 03 F6 | 	mov	ptra, fp
29eac     B2 00 A0 FD | 	call	#popregs_
29eb0                 | _fatfs_cc_dir_alloc_ret
29eb0     2D 00 64 FD | 	ret
29eb4                 | 
29eb4                 | _fatfs_cc_ld_clust
29eb4     09 01 02 F6 | 	mov	_var01, arg01
29eb8     0A 13 02 F6 | 	mov	arg01, arg02
29ebc     1A 12 06 F1 | 	add	arg01, #26
29ec0                 | ' {
29ec0                 | ' 
29ec0                 | ' 	return *((WORD*)ptr);
29ec0     09 FB E1 FA | 	rdword	result1, arg01
29ec4     FD 12 32 F9 | 	getword	arg01, result1, #0
29ec8     00 01 C2 FA | 	rdbyte	_var01, _var01
29ecc     03 00 0E F2 | 	cmp	_var01, #3 wz
29ed0     14 14 06 A1 |  if_e	add	arg02, #20
29ed4                 | ' {
29ed4                 | ' 
29ed4                 | ' 	return *((WORD*)ptr);
29ed4     0A FB E1 AA |  if_e	rdword	result1, arg02
29ed8     10 FA 65 A0 |  if_e	shl	result1, #16
29edc     FD 12 42 A5 |  if_e	or	arg01, result1
29ee0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
29ee0                 | ' 	}
29ee0                 | ' 
29ee0                 | ' 	return cl;
29ee0     09 FB 01 F6 | 	mov	result1, arg01
29ee4                 | _fatfs_cc_ld_clust_ret
29ee4     2D 00 64 FD | 	ret
29ee8                 | 
29ee8                 | _fatfs_cc_st_clust
29ee8     09 01 02 F6 | 	mov	_var01, arg01
29eec     0A 13 02 F6 | 	mov	arg01, arg02
29ef0     1A 12 06 F1 | 	add	arg01, #26
29ef4     09 17 52 FC | 	wrword	arg03, arg01
29ef8     00 01 C2 FA | 	rdbyte	_var01, _var01
29efc     03 00 0E F2 | 	cmp	_var01, #3 wz
29f00     14 14 06 A1 |  if_e	add	arg02, #20
29f04     10 16 46 A0 |  if_e	shr	arg03, #16
29f08     0A 17 52 AC |  if_e	wrword	arg03, arg02
29f0c                 | _fatfs_cc_st_clust_ret
29f0c     2D 00 64 FD | 	ret
29f10                 | 
29f10                 | _fatfs_cc_cmp_lfn
29f10     07 4A 05 F6 | 	mov	COUNT_, #7
29f14     A8 00 A0 FD | 	call	#pushregs_
29f18     09 1F 02 F6 | 	mov	local01, arg01
29f1c     0A 13 02 F6 | 	mov	arg01, arg02
29f20     1A 12 06 F1 | 	add	arg01, #26
29f24                 | ' {
29f24                 | ' 
29f24                 | ' 	return *((WORD*)ptr);
29f24     09 FB E9 FA | 	rdword	result1, arg01 wz
29f28     00 FA 05 56 |  if_ne	mov	result1, #0
29f2c     E0 00 90 5D |  if_ne	jmp	#LR__4286
29f30     0A 21 C2 FA | 	rdbyte	local02, arg02
29f34     3F 20 06 F5 | 	and	local02, #63
29f38     01 20 86 F1 | 	sub	local02, #1
29f3c     0D 20 06 FD | 	qmul	local02, #13
29f40                 | ' 
29f40                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
29f40                 | ' 
29f40                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29f40     01 22 06 F6 | 	mov	local03, #1
29f44     00 24 06 F6 | 	mov	local04, #0
29f48     18 26 62 FD | 	getqx	local05
29f4c                 | LR__4280
29f4c     0D 24 16 F2 | 	cmp	local04, #13 wc
29f50     9C 00 90 3D |  if_ae	jmp	#LR__4285
29f54     0A 13 02 F6 | 	mov	arg01, arg02
29f58     12 21 02 F6 | 	mov	local02, local04
29f5c     01 00 00 FF 
29f60     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29f64     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29f68     10 21 C2 FA | 	rdbyte	local02, local02
29f6c     01 20 06 FA | 	mul	local02, #1
29f70     10 13 02 F1 | 	add	arg01, local02
29f74     01 00 00 FF 
29f78     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29f7c                 | ' {
29f7c                 | ' 
29f7c                 | ' 	return *((WORD*)ptr);
29f7c     09 FB E1 FA | 	rdword	result1, arg01
29f80     FD 28 02 F6 | 	mov	local06, result1
29f84     11 21 02 F6 | 	mov	local02, local03
29f88     0F 20 4E F7 | 	zerox	local02, #15 wz
29f8c     44 00 90 AD |  if_e	jmp	#LR__4283
29f90     00 27 16 F2 | 	cmp	local05, #256 wc
29f94     2C 00 90 3D |  if_ae	jmp	#LR__4281
29f98     14 13 32 F9 | 	getword	arg01, local06, #0
29f9c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29fa0     FD 20 02 F6 | 	mov	local02, result1
29fa4     13 23 02 F6 | 	mov	local03, local05
29fa8     01 22 66 F0 | 	shl	local03, #1
29fac     0F 23 02 F1 | 	add	local03, local01
29fb0     11 13 E2 FA | 	rdword	arg01, local03
29fb4     01 26 06 F1 | 	add	local05, #1
29fb8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29fbc     FD 20 0A F2 | 	cmp	local02, result1 wz
29fc0     08 00 90 AD |  if_e	jmp	#LR__4282
29fc4                 | LR__4281
29fc4                 | ' 				return 0;
29fc4     00 FA 05 F6 | 	mov	result1, #0
29fc8     44 00 90 FD | 	jmp	#LR__4286
29fcc                 | LR__4282
29fcc     14 23 02 F6 | 	mov	local03, local06
29fd0     14 00 90 FD | 	jmp	#LR__4284
29fd4                 | LR__4283
29fd4     14 29 32 F9 | 	getword	local06, local06, #0
29fd8     7F 00 00 FF 
29fdc     FF 29 0E F2 | 	cmp	local06, ##65535 wz
29fe0     00 FA 05 56 |  if_ne	mov	result1, #0
29fe4     28 00 90 5D |  if_ne	jmp	#LR__4286
29fe8                 | LR__4284
29fe8     01 24 06 F1 | 	add	local04, #1
29fec     5C FF 9F FD | 	jmp	#LR__4280
29ff0                 | LR__4285
29ff0     0A 21 C2 FA | 	rdbyte	local02, arg02
29ff4     40 20 CE F7 | 	test	local02, #64 wz
29ff8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
29ffc     01 26 66 50 |  if_ne	shl	local05, #1
2a000     0F 27 02 51 |  if_ne	add	local05, local01
2a004     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2a008     00 FA 05 56 |  if_ne	mov	result1, #0
2a00c                 | ' 
2a00c                 | ' 	return 1;
2a00c     01 FA 05 A6 |  if_e	mov	result1, #1
2a010                 | LR__4286
2a010     A7 F0 03 F6 | 	mov	ptra, fp
2a014     B2 00 A0 FD | 	call	#popregs_
2a018                 | _fatfs_cc_cmp_lfn_ret
2a018     2D 00 64 FD | 	ret
2a01c                 | 
2a01c                 | _fatfs_cc_pick_lfn
2a01c     09 01 02 F6 | 	mov	_var01, arg01
2a020     0A 13 02 F6 | 	mov	arg01, arg02
2a024     1A 12 06 F1 | 	add	arg01, #26
2a028                 | ' {
2a028                 | ' 
2a028                 | ' 	return *((WORD*)ptr);
2a028     09 FB E9 FA | 	rdword	result1, arg01 wz
2a02c     00 FA 05 56 |  if_ne	mov	result1, #0
2a030     D4 00 90 5D |  if_ne	jmp	#LR__4295
2a034     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a038     40 02 26 F5 | 	andn	_var02, #64
2a03c     01 02 86 F1 | 	sub	_var02, #1
2a040     0D 02 06 FD | 	qmul	_var02, #13
2a044                 | ' 
2a044                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2a044                 | ' 
2a044                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2a044     01 04 06 F6 | 	mov	_var03, #1
2a048     00 06 06 F6 | 	mov	_var04, #0
2a04c     18 08 62 FD | 	getqx	_var05
2a050                 | LR__4290
2a050     0D 06 16 F2 | 	cmp	_var04, #13 wc
2a054     80 00 90 3D |  if_ae	jmp	#LR__4293
2a058     0A 13 02 F6 | 	mov	arg01, arg02
2a05c     03 03 02 F6 | 	mov	_var02, _var04
2a060     01 00 00 FF 
2a064     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a068     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2a06c     01 03 C2 FA | 	rdbyte	_var02, _var02
2a070     01 02 06 FA | 	mul	_var02, #1
2a074     01 13 02 F1 | 	add	arg01, _var02
2a078     01 00 00 FF 
2a07c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a080                 | ' {
2a080                 | ' 
2a080                 | ' 	return *((WORD*)ptr);
2a080     09 FB E1 FA | 	rdword	result1, arg01
2a084     FD 0A 02 F6 | 	mov	_var06, result1
2a088     02 03 02 F6 | 	mov	_var02, _var03
2a08c     0F 02 4E F7 | 	zerox	_var02, #15 wz
2a090     28 00 90 AD |  if_e	jmp	#LR__4291
2a094     00 09 16 F2 | 	cmp	_var05, #256 wc
2a098     00 FA 05 36 |  if_ae	mov	result1, #0
2a09c     68 00 90 3D |  if_ae	jmp	#LR__4295
2a0a0     04 03 02 F6 | 	mov	_var02, _var05
2a0a4     01 02 66 F0 | 	shl	_var02, #1
2a0a8     00 03 02 F1 | 	add	_var02, _var01
2a0ac     05 05 02 F6 | 	mov	_var03, _var06
2a0b0     01 05 52 FC | 	wrword	_var03, _var02
2a0b4     01 08 06 F1 | 	add	_var05, #1
2a0b8     14 00 90 FD | 	jmp	#LR__4292
2a0bc                 | LR__4291
2a0bc     05 0B 32 F9 | 	getword	_var06, _var06, #0
2a0c0     7F 00 00 FF 
2a0c4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2a0c8     00 FA 05 56 |  if_ne	mov	result1, #0
2a0cc     38 00 90 5D |  if_ne	jmp	#LR__4295
2a0d0                 | LR__4292
2a0d0     01 06 06 F1 | 	add	_var04, #1
2a0d4     78 FF 9F FD | 	jmp	#LR__4290
2a0d8                 | LR__4293
2a0d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a0dc     40 02 CE F7 | 	test	_var02, #64 wz
2a0e0     02 0D 02 56 |  if_ne	mov	_var07, _var03
2a0e4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2a0e8     18 00 90 AD |  if_e	jmp	#LR__4294
2a0ec     00 09 16 F2 | 	cmp	_var05, #256 wc
2a0f0     00 FA 05 36 |  if_ae	mov	result1, #0
2a0f4     10 00 90 3D |  if_ae	jmp	#LR__4295
2a0f8     01 08 66 F0 | 	shl	_var05, #1
2a0fc     00 09 02 F1 | 	add	_var05, _var01
2a100     04 01 58 FC | 	wrword	#0, _var05
2a104                 | LR__4294
2a104                 | ' 		lfnbuf[i] = 0;
2a104                 | ' 	}
2a104                 | ' 
2a104                 | ' 	return 1;
2a104     01 FA 05 F6 | 	mov	result1, #1
2a108                 | LR__4295
2a108                 | _fatfs_cc_pick_lfn_ret
2a108     2D 00 64 FD | 	ret
2a10c                 | 
2a10c                 | _fatfs_cc_put_lfn
2a10c     0D 14 06 F1 | 	add	arg02, #13
2a110     0A 19 42 FC | 	wrbyte	arg04, arg02
2a114     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2a118     01 18 86 F1 | 	sub	arg04, #1
2a11c     0D 18 06 FD | 	qmul	arg04, #13
2a120     09 01 02 F6 | 	mov	_var01, arg01
2a124     02 14 86 F1 | 	sub	arg02, #2
2a128     0A 1F 48 FC | 	wrbyte	#15, arg02
2a12c     01 14 06 F1 | 	add	arg02, #1
2a130     0A 01 48 FC | 	wrbyte	#0, arg02
2a134     0C 14 86 F1 | 	sub	arg02, #12
2a138     0A 13 02 F6 | 	mov	arg01, arg02
2a13c     1A 12 06 F1 | 	add	arg01, #26
2a140     09 01 58 FC | 	wrword	#0, arg01
2a144     00 02 06 F6 | 	mov	_var02, #0
2a148     00 04 06 F6 | 	mov	_var03, #0
2a14c                 | ' 	BYTE* dir,
2a14c                 | ' 	BYTE ord,
2a14c                 | ' 	BYTE sum
2a14c                 | ' )
2a14c                 | ' {
2a14c                 | ' 	UINT i, s;
2a14c                 | ' 	WCHAR wc;
2a14c                 | ' 
2a14c                 | ' 
2a14c                 | ' 	dir[ 13 ] = sum;
2a14c                 | ' 	dir[ 11 ] =  0x0F ;
2a14c                 | ' 	dir[ 12 ] = 0;
2a14c                 | ' 	st_word(dir +  26 , 0);
2a14c                 | ' 
2a14c                 | ' 	i = (ord - 1) * 13;
2a14c                 | ' 	s = wc = 0;
2a14c                 | ' 	do {
2a14c     01 00 00 FF 
2a150     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a154     18 06 62 FD | 	getqx	_var04
2a158     97 2A 48 FB | 	callpa	#(@LR__4301-@LR__4300)>>2,fcache_load_ptr_
2a15c                 | LR__4300
2a15c     01 19 32 F9 | 	getword	arg04, _var02, #0
2a160     7F 00 00 FF 
2a164     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2a168     03 13 02 56 |  if_ne	mov	arg01, _var04
2a16c     01 06 06 51 |  if_ne	add	_var04, #1
2a170     01 12 66 50 |  if_ne	shl	arg01, #1
2a174     00 13 02 51 |  if_ne	add	arg01, _var01
2a178     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2a17c     0A 13 02 F6 | 	mov	arg01, arg02
2a180     02 19 02 F6 | 	mov	arg04, _var03
2a184     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2a188     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a18c     01 18 06 FA | 	mul	arg04, #1
2a190     0C 13 02 F1 | 	add	arg01, arg04
2a194     09 03 52 FC | 	wrword	_var02, arg01
2a198     01 19 02 F6 | 	mov	arg04, _var02
2a19c     0F 18 4E F7 | 	zerox	arg04, #15 wz
2a1a0     0F 02 CE A9 |  if_e	bmask	_var02, #15
2a1a4     01 04 06 F1 | 	add	_var03, #1
2a1a8     0D 04 16 F2 | 	cmp	_var03, #13 wc
2a1ac     AC FF 9F CD |  if_b	jmp	#LR__4300
2a1b0                 | LR__4301
2a1b0     01 00 00 FF 
2a1b4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a1b8     01 03 32 F9 | 	getword	_var02, _var02, #0
2a1bc     7F 00 00 FF 
2a1c0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2a1c4     01 06 66 50 |  if_ne	shl	_var04, #1
2a1c8     00 07 02 51 |  if_ne	add	_var04, _var01
2a1cc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2a1d0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2a1d4     40 16 46 A5 |  if_e	or	arg03, #64
2a1d8     0A 17 42 FC | 	wrbyte	arg03, arg02
2a1dc                 | _fatfs_cc_put_lfn_ret
2a1dc     2D 00 64 FD | 	ret
2a1e0                 | 
2a1e0                 | _fatfs_cc_gen_numname
2a1e0     08 4A 05 F6 | 	mov	COUNT_, #8
2a1e4     A8 00 A0 FD | 	call	#pushregs_
2a1e8     2C F0 07 F1 | 	add	ptra, #44
2a1ec     09 1F 02 F6 | 	mov	local01, arg01
2a1f0     0A 21 02 F6 | 	mov	local02, arg02
2a1f4     0B 23 02 F6 | 	mov	local03, arg03
2a1f8     0C 25 02 F6 | 	mov	local04, arg04
2a1fc     0F 13 02 F6 | 	mov	arg01, local01
2a200     10 15 02 F6 | 	mov	arg02, local02
2a204     0B 16 06 F6 | 	mov	arg03, #11
2a208     98 72 BF FD | 	call	#__system____builtin_memmove
2a20c     06 24 16 F2 | 	cmp	local04, #6 wc
2a210     48 00 90 CD |  if_b	jmp	#LR__4315
2a214     12 27 02 F6 | 	mov	local05, local04
2a218     97 1E 48 FB | 	callpa	#(@LR__4313-@LR__4310)>>2,fcache_load_ptr_
2a21c                 | ' 		sreg = seq;
2a21c                 | ' 		while (*lfn) {
2a21c                 | LR__4310
2a21c     11 29 EA FA | 	rdword	local06, local03 wz
2a220     34 00 90 AD |  if_e	jmp	#LR__4314
2a224     11 2B E2 FA | 	rdword	local07, local03
2a228                 | ' 			wc = *lfn++;
2a228                 | ' 			for (i = 0; i < 16; i++) {
2a228     02 22 06 F1 | 	add	local03, #2
2a22c     10 12 DC FC | 	rep	@LR__4312, #16
2a230                 | LR__4311
2a230     01 26 66 F0 | 	shl	local05, #1
2a234     15 29 32 F9 | 	getword	local06, local07, #0
2a238     01 28 06 F5 | 	and	local06, #1
2a23c     14 27 02 F1 | 	add	local05, local06
2a240     15 2B 32 F9 | 	getword	local07, local07, #0
2a244     01 2A 46 F0 | 	shr	local07, #1
2a248     10 26 2E F4 | 	testbn	local05, #16 wz
2a24c     88 00 00 5F 
2a250     21 26 66 55 |  if_ne	xor	local05, ##69665
2a254                 | LR__4312
2a254     C4 FF 9F FD | 	jmp	#LR__4310
2a258                 | LR__4313
2a258                 | LR__4314
2a258     13 25 02 F6 | 	mov	local04, local05
2a25c                 | LR__4315
2a25c     07 2A 06 F6 | 	mov	local07, #7
2a260                 | ' 			}
2a260                 | ' 		}
2a260                 | ' 		seq = (UINT)sreg;
2a260                 | ' 	}
2a260                 | ' 
2a260                 | ' 
2a260                 | ' 	i = 7;
2a260                 | ' 	do {
2a260     10 4E 05 F1 | 	add	fp, #16
2a264     97 1A 48 FB | 	callpa	#(@LR__4317-@LR__4316)>>2,fcache_load_ptr_
2a268                 | LR__4316
2a268     12 27 42 F8 | 	getnib	local05, local04, #0
2a26c     30 26 06 F1 | 	add	local05, #48
2a270     04 24 46 F0 | 	shr	local04, #4
2a274     13 29 E2 F8 | 	getbyte	local06, local05, #0
2a278     3A 28 16 F2 | 	cmp	local06, #58 wc
2a27c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
2a280     07 26 06 31 |  if_ae	add	local05, #7
2a284     15 29 02 F6 | 	mov	local06, local07
2a288     01 2A 8E F1 | 	sub	local07, #1 wz
2a28c     A7 28 02 F1 | 	add	local06, fp
2a290     14 27 42 FC | 	wrbyte	local05, local06
2a294     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
2a298     CC FF 9F 5D |  if_ne	jmp	#LR__4316
2a29c                 | LR__4317
2a29c     15 29 02 F6 | 	mov	local06, local07
2a2a0     A7 28 02 F1 | 	add	local06, fp
2a2a4     14 FD 48 FC | 	wrbyte	#126, local06
2a2a8                 | ' 	ns[i] = '~';
2a2a8                 | ' 
2a2a8                 | ' 
2a2a8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2a2a8     00 26 06 F6 | 	mov	local05, #0
2a2ac     10 4E 85 F1 | 	sub	fp, #16
2a2b0     97 2A 48 FB | 	callpa	#(@LR__4320-@LR__4318)>>2,fcache_load_ptr_
2a2b4                 | LR__4318
2a2b4     15 27 12 F2 | 	cmp	local05, local07 wc
2a2b8     4C 00 90 3D |  if_ae	jmp	#LR__4321
2a2bc     13 29 02 F6 | 	mov	local06, local05
2a2c0     0F 29 02 F1 | 	add	local06, local01
2a2c4     14 29 C2 FA | 	rdbyte	local06, local06
2a2c8     20 28 0E F2 | 	cmp	local06, #32 wz
2a2cc     38 00 90 AD |  if_e	jmp	#LR__4321
2a2d0     13 13 02 F6 | 	mov	arg01, local05
2a2d4     0F 13 02 F1 | 	add	arg01, local01
2a2d8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2a2dc     00 FA 05 56 |  if_ne	mov	result1, #0
2a2e0                 | ' 
2a2e0                 | ' 	return 0;
2a2e0     00 FA 05 A6 |  if_e	mov	result1, #0
2a2e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2e8     14 00 90 AD |  if_e	jmp	#LR__4319
2a2ec     15 29 02 F6 | 	mov	local06, local07
2a2f0     01 28 86 F1 | 	sub	local06, #1
2a2f4     14 27 0A F2 | 	cmp	local05, local06 wz
2a2f8     0C 00 90 AD |  if_e	jmp	#LR__4321
2a2fc     01 26 06 F1 | 	add	local05, #1
2a300                 | LR__4319
2a300     01 26 06 F1 | 	add	local05, #1
2a304     AC FF 9F FD | 	jmp	#LR__4318
2a308                 | LR__4320
2a308                 | LR__4321
2a308     97 20 48 FB | 	callpa	#(@LR__4325-@LR__4322)>>2,fcache_load_ptr_
2a30c                 | ' 			j++;
2a30c                 | ' 		}
2a30c                 | ' 	}
2a30c                 | ' 	do {
2a30c                 | LR__4322
2a30c     13 29 02 F6 | 	mov	local06, local05
2a310     0F 29 02 F1 | 	add	local06, local01
2a314     08 2A 16 F2 | 	cmp	local07, #8 wc
2a318     01 26 06 F1 | 	add	local05, #1
2a31c     1C 00 90 3D |  if_ae	jmp	#LR__4323
2a320     15 25 02 F6 | 	mov	local04, local07
2a324     10 4E 05 F1 | 	add	fp, #16
2a328     A7 24 02 F1 | 	add	local04, fp
2a32c     12 2D C2 FA | 	rdbyte	local08, local04
2a330     01 2A 06 F1 | 	add	local07, #1
2a334     10 4E 85 F1 | 	sub	fp, #16
2a338     04 00 90 FD | 	jmp	#LR__4324
2a33c                 | LR__4323
2a33c     20 2C 06 F6 | 	mov	local08, #32
2a340                 | LR__4324
2a340     14 2D 42 FC | 	wrbyte	local08, local06
2a344     08 26 16 F2 | 	cmp	local05, #8 wc
2a348     C0 FF 9F CD |  if_b	jmp	#LR__4322
2a34c                 | LR__4325
2a34c     A7 F0 03 F6 | 	mov	ptra, fp
2a350     B2 00 A0 FD | 	call	#popregs_
2a354                 | _fatfs_cc_gen_numname_ret
2a354     2D 00 64 FD | 	ret
2a358                 | 
2a358                 | _fatfs_cc_sum_sfn
2a358     00 00 06 F6 | 	mov	_var01, #0
2a35c                 | ' )
2a35c                 | ' {
2a35c                 | ' 	BYTE sum = 0;
2a35c                 | ' 	UINT n = 11;
2a35c                 | ' 
2a35c                 | ' 	do {
2a35c     97 12 48 FB | 	callpa	#(@LR__4332-@LR__4330)>>2,fcache_load_ptr_
2a360                 | LR__4330
2a360     0B 10 DC FC | 	rep	@LR__4333, #11
2a364                 | LR__4331
2a364     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2a368     01 FA 45 F0 | 	shr	result1, #1
2a36c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2a370     07 00 66 F0 | 	shl	_var01, #7
2a374     00 FB 01 F1 | 	add	result1, _var01
2a378     09 01 C2 FA | 	rdbyte	_var01, arg01
2a37c     FD 00 02 F1 | 	add	_var01, result1
2a380     01 12 06 F1 | 	add	arg01, #1
2a384                 | LR__4332
2a384                 | LR__4333
2a384                 | ' 	return sum;
2a384     00 FB 01 F6 | 	mov	result1, _var01
2a388                 | _fatfs_cc_sum_sfn_ret
2a388     2D 00 64 FD | 	ret
2a38c                 | 
2a38c                 | _fatfs_cc_dir_read
2a38c     0C 4A 05 F6 | 	mov	COUNT_, #12
2a390     A8 00 A0 FD | 	call	#pushregs_
2a394     09 1F 02 F6 | 	mov	local01, arg01
2a398     0A 21 02 F6 | 	mov	local02, arg02
2a39c     04 22 06 F6 | 	mov	local03, #4
2a3a0     0F 25 02 FB | 	rdlong	local04, local01
2a3a4     FF 26 06 F6 | 	mov	local05, #255
2a3a8     FF 28 06 F6 | 	mov	local06, #255
2a3ac                 | ' )
2a3ac                 | ' {
2a3ac                 | ' 	FRESULT res = FR_NO_FILE;
2a3ac                 | ' 	FATFS *fs = dp->obj.fs;
2a3ac                 | ' 	BYTE attr, b;
2a3ac                 | ' 
2a3ac                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2a3ac                 | ' 
2a3ac                 | ' 
2a3ac                 | ' 	while (dp->sect) {
2a3ac                 | LR__4340
2a3ac     18 1E 06 F1 | 	add	local01, #24
2a3b0     0F FB 09 FB | 	rdlong	result1, local01 wz
2a3b4     18 1E 86 F1 | 	sub	local01, #24
2a3b8     AC 01 90 AD |  if_e	jmp	#LR__4350
2a3bc     18 1E 06 F1 | 	add	local01, #24
2a3c0     0F 15 02 FB | 	rdlong	arg02, local01
2a3c4     18 1E 86 F1 | 	sub	local01, #24
2a3c8     12 13 02 F6 | 	mov	arg01, local04
2a3cc     AC ED BF FD | 	call	#_fatfs_cc_move_window
2a3d0     FD 22 0A F6 | 	mov	local03, result1 wz
2a3d4     90 01 90 5D |  if_ne	jmp	#LR__4350
2a3d8     1C 1E 06 F1 | 	add	local01, #28
2a3dc     0F FB 01 FB | 	rdlong	result1, local01
2a3e0     1C 1E 86 F1 | 	sub	local01, #28
2a3e4     FD 2A C2 FA | 	rdbyte	local07, result1
2a3e8     15 FB 01 F6 | 	mov	result1, local07
2a3ec     07 FA 4D F7 | 	zerox	result1, #7 wz
2a3f0     04 22 06 A6 |  if_e	mov	local03, #4
2a3f4                 | ' 			res = FR_NO_FILE; break;
2a3f4     70 01 90 AD |  if_e	jmp	#LR__4350
2a3f8     1C 1E 06 F1 | 	add	local01, #28
2a3fc     0F 2D 02 FB | 	rdlong	local08, local01
2a400     0B 2C 06 F1 | 	add	local08, #11
2a404     16 2F C2 FA | 	rdbyte	local09, local08
2a408     3F 2E 06 F5 | 	and	local09, #63
2a40c     16 1E 86 F1 | 	sub	local01, #22
2a410     0F 2F 42 FC | 	wrbyte	local09, local01
2a414     06 1E 86 F1 | 	sub	local01, #6
2a418     15 FB E1 F8 | 	getbyte	result1, local07, #0
2a41c     E5 FA 0D F2 | 	cmp	result1, #229 wz
2a420     15 2D 02 56 |  if_ne	mov	local08, local07
2a424     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2a428     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2a42c     1C 00 90 AD |  if_e	jmp	#LR__4341
2a430     00 30 06 F6 | 	mov	local10, #0
2a434     17 2D E2 F8 | 	getbyte	local08, local09, #0
2a438     20 2C 26 F5 | 	andn	local08, #32
2a43c     08 2C 0E F2 | 	cmp	local08, #8 wz
2a440     01 30 06 A6 |  if_e	mov	local10, #1
2a444     10 31 0A F2 | 	cmp	local10, local02 wz
2a448     08 00 90 AD |  if_e	jmp	#LR__4342
2a44c                 | LR__4341
2a44c     FF 26 06 F6 | 	mov	local05, #255
2a450     00 01 90 FD | 	jmp	#LR__4349
2a454                 | LR__4342
2a454     17 2F E2 F8 | 	getbyte	local09, local09, #0
2a458     0F 2E 0E F2 | 	cmp	local09, #15 wz
2a45c     B4 00 90 5D |  if_ne	jmp	#LR__4346
2a460     15 33 E2 F8 | 	getbyte	local11, local07, #0
2a464     40 32 CE F7 | 	test	local11, #64 wz
2a468     30 00 90 AD |  if_e	jmp	#LR__4343
2a46c     1C 1E 06 F1 | 	add	local01, #28
2a470     0F 33 02 FB | 	rdlong	local11, local01
2a474     0D 32 06 F1 | 	add	local11, #13
2a478     19 29 C2 FA | 	rdbyte	local06, local11
2a47c     15 2B E2 F8 | 	getbyte	local07, local07, #0
2a480     BF 2A 06 F5 | 	and	local07, #191
2a484     15 27 02 F6 | 	mov	local05, local07
2a488     0C 1E 86 F1 | 	sub	local01, #12
2a48c     0F 33 02 FB | 	rdlong	local11, local01
2a490     1C 1E 06 F1 | 	add	local01, #28
2a494     0F 33 62 FC | 	wrlong	local11, local01
2a498     2C 1E 86 F1 | 	sub	local01, #44
2a49c                 | LR__4343
2a49c     15 2D E2 F8 | 	getbyte	local08, local07, #0
2a4a0     13 31 E2 F8 | 	getbyte	local10, local05, #0
2a4a4     18 2D 0A F2 | 	cmp	local08, local10 wz
2a4a8     5C 00 90 5D |  if_ne	jmp	#LR__4344
2a4ac     14 31 E2 F8 | 	getbyte	local10, local06, #0
2a4b0     1C 1E 06 F1 | 	add	local01, #28
2a4b4     0F 2F 02 FB | 	rdlong	local09, local01
2a4b8     1C 1E 86 F1 | 	sub	local01, #28
2a4bc     0D 2E 06 F1 | 	add	local09, #13
2a4c0     17 2D C2 FA | 	rdbyte	local08, local09
2a4c4     16 2F E2 F8 | 	getbyte	local09, local08, #0
2a4c8     17 31 0A F2 | 	cmp	local10, local09 wz
2a4cc     38 00 90 5D |  if_ne	jmp	#LR__4344
2a4d0     0C 24 06 F1 | 	add	local04, #12
2a4d4     12 13 02 FB | 	rdlong	arg01, local04
2a4d8     0C 24 86 F1 | 	sub	local04, #12
2a4dc     1C 1E 06 F1 | 	add	local01, #28
2a4e0     0F 35 02 FB | 	rdlong	local12, local01
2a4e4     1C 1E 86 F1 | 	sub	local01, #28
2a4e8     1A 15 02 F6 | 	mov	arg02, local12
2a4ec     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2a4f0     00 FA 4D F2 | 	cmps	result1, #0 wz
2a4f4     13 35 02 56 |  if_ne	mov	local12, local05
2a4f8     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
2a4fc     01 34 86 51 |  if_ne	sub	local12, #1
2a500     1A 33 02 56 |  if_ne	mov	local11, local12
2a504     04 00 90 5D |  if_ne	jmp	#LR__4345
2a508                 | LR__4344
2a508     FF 32 06 F6 | 	mov	local11, #255
2a50c                 | LR__4345
2a50c     19 27 02 F6 | 	mov	local05, local11
2a510     40 00 90 FD | 	jmp	#LR__4348
2a514                 | LR__4346
2a514     13 33 02 F6 | 	mov	local11, local05
2a518     07 32 4E F7 | 	zerox	local11, #7 wz
2a51c     20 00 90 5D |  if_ne	jmp	#LR__4347
2a520     14 29 E2 F8 | 	getbyte	local06, local06, #0
2a524     1C 1E 06 F1 | 	add	local01, #28
2a528     0F 13 02 FB | 	rdlong	arg01, local01
2a52c     1C 1E 86 F1 | 	sub	local01, #28
2a530     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2a534     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a538     FD 28 0A F2 | 	cmp	local06, result1 wz
2a53c     28 00 90 AD |  if_e	jmp	#LR__4350
2a540                 | LR__4347
2a540     2C 1E 06 F1 | 	add	local01, #44
2a544     FF FF FF FF 
2a548     0F FF 6B FC | 	wrlong	##-1, local01
2a54c     2C 1E 86 F1 | 	sub	local01, #44
2a550                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2a550                 | ' 					}
2a550                 | ' 					break;
2a550     14 00 90 FD | 	jmp	#LR__4350
2a554                 | LR__4348
2a554                 | LR__4349
2a554     0F 13 02 F6 | 	mov	arg01, local01
2a558     00 14 06 F6 | 	mov	arg02, #0
2a55c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2a560     FD 22 0A F6 | 	mov	local03, result1 wz
2a564     44 FE 9F AD |  if_e	jmp	#LR__4340
2a568                 | LR__4350
2a568     00 22 0E F2 | 	cmp	local03, #0 wz
2a56c     18 1E 06 51 |  if_ne	add	local01, #24
2a570     0F 01 68 5C |  if_ne	wrlong	#0, local01
2a574                 | ' 	return res;
2a574     11 FB 01 F6 | 	mov	result1, local03
2a578     A7 F0 03 F6 | 	mov	ptra, fp
2a57c     B2 00 A0 FD | 	call	#popregs_
2a580                 | _fatfs_cc_dir_read_ret
2a580     2D 00 64 FD | 	ret
2a584                 | 
2a584                 | _fatfs_cc_dir_find
2a584     0B 4A 05 F6 | 	mov	COUNT_, #11
2a588     A8 00 A0 FD | 	call	#pushregs_
2a58c     09 1F 02 F6 | 	mov	local01, arg01
2a590     0F 21 02 FB | 	rdlong	local02, local01
2a594     0F 13 02 F6 | 	mov	arg01, local01
2a598     00 14 06 F6 | 	mov	arg02, #0
2a59c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2a5a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a5a4     18 02 90 5D |  if_ne	jmp	#LR__4372
2a5a8     FF 22 06 F6 | 	mov	local03, #255
2a5ac     FF 24 06 F6 | 	mov	local04, #255
2a5b0     2C 1E 06 F1 | 	add	local01, #44
2a5b4     FF FF FF FF 
2a5b8     0F FF 6B FC | 	wrlong	##-1, local01
2a5bc     2C 1E 86 F1 | 	sub	local01, #44
2a5c0                 | ' #line 2404 "ff.c"
2a5c0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2a5c0                 | ' 
2a5c0                 | ' 	do {
2a5c0                 | LR__4360
2a5c0     18 1E 06 F1 | 	add	local01, #24
2a5c4     0F 15 02 FB | 	rdlong	arg02, local01
2a5c8     18 1E 86 F1 | 	sub	local01, #24
2a5cc     10 13 02 F6 | 	mov	arg01, local02
2a5d0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2a5d4     FD 26 0A F6 | 	mov	local05, result1 wz
2a5d8     E0 01 90 5D |  if_ne	jmp	#LR__4371
2a5dc     1C 1E 06 F1 | 	add	local01, #28
2a5e0     0F 17 02 FB | 	rdlong	arg03, local01
2a5e4     1C 1E 86 F1 | 	sub	local01, #28
2a5e8     0B 29 C2 FA | 	rdbyte	local06, arg03
2a5ec     14 17 02 F6 | 	mov	arg03, local06
2a5f0     07 16 4E F7 | 	zerox	arg03, #7 wz
2a5f4     04 26 06 A6 |  if_e	mov	local05, #4
2a5f8     C0 01 90 AD |  if_e	jmp	#LR__4371
2a5fc     1C 1E 06 F1 | 	add	local01, #28
2a600     0F 2B 02 FB | 	rdlong	local07, local01
2a604     15 17 02 F6 | 	mov	arg03, local07
2a608     0B 16 06 F1 | 	add	arg03, #11
2a60c     0B 2D C2 FA | 	rdbyte	local08, arg03
2a610     3F 2C 06 F5 | 	and	local08, #63
2a614     16 1E 86 F1 | 	sub	local01, #22
2a618     0F 2D 42 FC | 	wrbyte	local08, local01
2a61c     06 1E 86 F1 | 	sub	local01, #6
2a620     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2a624     E5 16 0E F2 | 	cmp	arg03, #229 wz
2a628     18 00 90 AD |  if_e	jmp	#LR__4361
2a62c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2a630     08 16 CE F7 | 	test	arg03, #8 wz
2a634     16 2B 02 56 |  if_ne	mov	local07, local08
2a638     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
2a63c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2a640     18 00 90 AD |  if_e	jmp	#LR__4362
2a644                 | LR__4361
2a644     FF 24 06 F6 | 	mov	local04, #255
2a648     2C 1E 06 F1 | 	add	local01, #44
2a64c     FF FF FF FF 
2a650     0F FF 6B FC | 	wrlong	##-1, local01
2a654     2C 1E 86 F1 | 	sub	local01, #44
2a658     4C 01 90 FD | 	jmp	#LR__4370
2a65c                 | LR__4362
2a65c     16 2D E2 F8 | 	getbyte	local08, local08, #0
2a660     0F 2C 0E F2 | 	cmp	local08, #15 wz
2a664     C8 00 90 5D |  if_ne	jmp	#LR__4366
2a668     2B 1E 06 F1 | 	add	local01, #43
2a66c     0F 2D C2 FA | 	rdbyte	local08, local01
2a670     2B 1E 86 F1 | 	sub	local01, #43
2a674     40 2C CE F7 | 	test	local08, #64 wz
2a678     2C 01 90 5D |  if_ne	jmp	#LR__4369
2a67c     14 2F E2 F8 | 	getbyte	local09, local06, #0
2a680     40 2E CE F7 | 	test	local09, #64 wz
2a684     30 00 90 AD |  if_e	jmp	#LR__4363
2a688     1C 1E 06 F1 | 	add	local01, #28
2a68c     0F 2F 02 FB | 	rdlong	local09, local01
2a690     0D 2E 06 F1 | 	add	local09, #13
2a694     17 23 C2 FA | 	rdbyte	local03, local09
2a698     14 29 E2 F8 | 	getbyte	local06, local06, #0
2a69c     BF 28 06 F5 | 	and	local06, #191
2a6a0     14 25 02 F6 | 	mov	local04, local06
2a6a4     0C 1E 86 F1 | 	sub	local01, #12
2a6a8     0F 2F 02 FB | 	rdlong	local09, local01
2a6ac     1C 1E 06 F1 | 	add	local01, #28
2a6b0     0F 2F 62 FC | 	wrlong	local09, local01
2a6b4     2C 1E 86 F1 | 	sub	local01, #44
2a6b8                 | LR__4363
2a6b8     14 31 E2 F8 | 	getbyte	local10, local06, #0
2a6bc     12 2B E2 F8 | 	getbyte	local07, local04, #0
2a6c0     15 31 0A F2 | 	cmp	local10, local07 wz
2a6c4     5C 00 90 5D |  if_ne	jmp	#LR__4364
2a6c8     11 2D E2 F8 | 	getbyte	local08, local03, #0
2a6cc     1C 1E 06 F1 | 	add	local01, #28
2a6d0     0F 2B 02 FB | 	rdlong	local07, local01
2a6d4     1C 1E 86 F1 | 	sub	local01, #28
2a6d8     0D 2A 06 F1 | 	add	local07, #13
2a6dc     15 29 C2 FA | 	rdbyte	local06, local07
2a6e0     14 2B E2 F8 | 	getbyte	local07, local06, #0
2a6e4     15 2D 0A F2 | 	cmp	local08, local07 wz
2a6e8     38 00 90 5D |  if_ne	jmp	#LR__4364
2a6ec     0C 20 06 F1 | 	add	local02, #12
2a6f0     10 13 02 FB | 	rdlong	arg01, local02
2a6f4     0C 20 86 F1 | 	sub	local02, #12
2a6f8     1C 1E 06 F1 | 	add	local01, #28
2a6fc     0F 33 02 FB | 	rdlong	local11, local01
2a700     1C 1E 86 F1 | 	sub	local01, #28
2a704     19 15 02 F6 | 	mov	arg02, local11
2a708     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2a70c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a710     12 33 02 56 |  if_ne	mov	local11, local04
2a714     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2a718     01 32 86 51 |  if_ne	sub	local11, #1
2a71c     19 2F 02 56 |  if_ne	mov	local09, local11
2a720     04 00 90 5D |  if_ne	jmp	#LR__4365
2a724                 | LR__4364
2a724     FF 2E 06 F6 | 	mov	local09, #255
2a728                 | LR__4365
2a728     17 25 02 F6 | 	mov	local04, local09
2a72c     78 00 90 FD | 	jmp	#LR__4369
2a730                 | LR__4366
2a730     12 2F 02 F6 | 	mov	local09, local04
2a734     07 2E 4E F7 | 	zerox	local09, #7 wz
2a738     20 00 90 5D |  if_ne	jmp	#LR__4367
2a73c     11 31 E2 F8 | 	getbyte	local10, local03, #0
2a740     1C 1E 06 F1 | 	add	local01, #28
2a744     0F 13 02 FB | 	rdlong	arg01, local01
2a748     1C 1E 86 F1 | 	sub	local01, #28
2a74c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2a750     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a754     FD 30 0A F2 | 	cmp	local10, result1 wz
2a758     60 00 90 AD |  if_e	jmp	#LR__4371
2a75c                 | LR__4367
2a75c     2B 1E 06 F1 | 	add	local01, #43
2a760     0F 2F C2 FA | 	rdbyte	local09, local01
2a764     2B 1E 86 F1 | 	sub	local01, #43
2a768     01 2E CE F7 | 	test	local09, #1 wz
2a76c     24 00 90 5D |  if_ne	jmp	#LR__4368
2a770     1C 1E 06 F1 | 	add	local01, #28
2a774     0F 13 02 FB | 	rdlong	arg01, local01
2a778     04 1E 06 F1 | 	add	local01, #4
2a77c     0F 15 02 F6 | 	mov	arg02, local01
2a780     20 1E 86 F1 | 	sub	local01, #32
2a784     0B 16 06 F6 | 	mov	arg03, #11
2a788     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2a78c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a790     28 00 90 AD |  if_e	jmp	#LR__4371
2a794                 | LR__4368
2a794     FF 24 06 F6 | 	mov	local04, #255
2a798     2C 1E 06 F1 | 	add	local01, #44
2a79c     FF FF FF FF 
2a7a0     0F FF 6B FC | 	wrlong	##-1, local01
2a7a4     2C 1E 86 F1 | 	sub	local01, #44
2a7a8                 | LR__4369
2a7a8                 | LR__4370
2a7a8     0F 13 02 F6 | 	mov	arg01, local01
2a7ac     00 14 06 F6 | 	mov	arg02, #0
2a7b0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2a7b4     FD 26 0A F6 | 	mov	local05, result1 wz
2a7b8     04 FE 9F AD |  if_e	jmp	#LR__4360
2a7bc                 | LR__4371
2a7bc                 | ' 
2a7bc                 | ' 	return res;
2a7bc     13 FB 01 F6 | 	mov	result1, local05
2a7c0                 | LR__4372
2a7c0     A7 F0 03 F6 | 	mov	ptra, fp
2a7c4     B2 00 A0 FD | 	call	#popregs_
2a7c8                 | _fatfs_cc_dir_find_ret
2a7c8     2D 00 64 FD | 	ret
2a7cc                 | 
2a7cc                 | _fatfs_cc_dir_register
2a7cc     0A 4A 05 F6 | 	mov	COUNT_, #10
2a7d0     A8 00 A0 FD | 	call	#pushregs_
2a7d4     2C F0 07 F1 | 	add	ptra, #44
2a7d8     04 4E 05 F1 | 	add	fp, #4
2a7dc     A7 12 62 FC | 	wrlong	arg01, fp
2a7e0     09 1F 02 FB | 	rdlong	local01, arg01
2a7e4     08 4E 05 F1 | 	add	fp, #8
2a7e8     A7 1E 62 FC | 	wrlong	local01, fp
2a7ec     08 4E 85 F1 | 	sub	fp, #8
2a7f0     A7 20 02 FB | 	rdlong	local02, fp
2a7f4     04 4E 85 F1 | 	sub	fp, #4
2a7f8     2B 20 06 F1 | 	add	local02, #43
2a7fc     10 21 C2 FA | 	rdbyte	local02, local02
2a800     A0 20 CE F7 | 	test	local02, #160 wz
2a804     06 FA 05 56 |  if_ne	mov	result1, #6
2a808     F8 03 90 5D |  if_ne	jmp	#LR__4395
2a80c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2a80c     14 4E 05 F1 | 	add	fp, #20
2a810     A7 00 68 FC | 	wrlong	#0, fp
2a814     14 4E 85 F1 | 	sub	fp, #20
2a818     97 28 48 FB | 	callpa	#(@LR__4381-@LR__4380)>>2,fcache_load_ptr_
2a81c                 | LR__4380
2a81c     0C 4E 05 F1 | 	add	fp, #12
2a820     A7 20 02 FB | 	rdlong	local02, fp
2a824     0C 20 06 F1 | 	add	local02, #12
2a828     10 23 02 FB | 	rdlong	local03, local02
2a82c     08 4E 05 F1 | 	add	fp, #8
2a830     A7 24 02 FB | 	rdlong	local04, fp
2a834     14 4E 85 F1 | 	sub	fp, #20
2a838     01 24 66 F0 | 	shl	local04, #1
2a83c     11 25 02 F1 | 	add	local04, local03
2a840     12 21 EA FA | 	rdword	local02, local04 wz
2a844     24 00 90 AD |  if_e	jmp	#LR__4382
2a848     14 4E 05 F1 | 	add	fp, #20
2a84c     A7 26 02 FB | 	rdlong	local05, fp
2a850     13 29 02 F6 | 	mov	local06, local05
2a854     13 2B 02 F6 | 	mov	local07, local05
2a858     15 2D 02 F6 | 	mov	local08, local07
2a85c     01 2C 06 F1 | 	add	local08, #1
2a860     A7 2C 62 FC | 	wrlong	local08, fp
2a864     14 4E 85 F1 | 	sub	fp, #20
2a868     B0 FF 9F FD | 	jmp	#LR__4380
2a86c                 | LR__4381
2a86c                 | LR__4382
2a86c     1C 4E 05 F1 | 	add	fp, #28
2a870     A7 12 02 F6 | 	mov	arg01, fp
2a874     18 4E 85 F1 | 	sub	fp, #24
2a878     A7 14 02 FB | 	rdlong	arg02, fp
2a87c     04 4E 85 F1 | 	sub	fp, #4
2a880     20 14 06 F1 | 	add	arg02, #32
2a884     0C 16 06 F6 | 	mov	arg03, #12
2a888     18 6C BF FD | 	call	#__system____builtin_memmove
2a88c     27 4E 05 F1 | 	add	fp, #39
2a890     A7 2E C2 FA | 	rdbyte	local09, fp
2a894     27 4E 85 F1 | 	sub	fp, #39
2a898     01 2E CE F7 | 	test	local09, #1 wz
2a89c     F4 00 90 AD |  if_e	jmp	#LR__4385
2a8a0     04 4E 05 F1 | 	add	fp, #4
2a8a4     A7 30 02 FB | 	rdlong	local10, fp
2a8a8     2B 30 06 F1 | 	add	local10, #43
2a8ac     18 81 48 FC | 	wrbyte	#64, local10
2a8b0                 | ' 		dp->fn[ 11 ] =  0x40 ;
2a8b0                 | ' 		for (n = 1; n < 100; n++) {
2a8b0     0C 4E 05 F1 | 	add	fp, #12
2a8b4     A7 02 68 FC | 	wrlong	#1, fp
2a8b8     10 4E 85 F1 | 	sub	fp, #16
2a8bc                 | LR__4383
2a8bc     10 4E 05 F1 | 	add	fp, #16
2a8c0     A7 20 02 FB | 	rdlong	local02, fp
2a8c4     10 4E 85 F1 | 	sub	fp, #16
2a8c8     64 20 16 F2 | 	cmp	local02, #100 wc
2a8cc     70 00 90 3D |  if_ae	jmp	#LR__4384
2a8d0     04 4E 05 F1 | 	add	fp, #4
2a8d4     A7 12 02 FB | 	rdlong	arg01, fp
2a8d8     20 12 06 F1 | 	add	arg01, #32
2a8dc     18 4E 05 F1 | 	add	fp, #24
2a8e0     A7 14 02 F6 | 	mov	arg02, fp
2a8e4     10 4E 85 F1 | 	sub	fp, #16
2a8e8     A7 30 02 FB | 	rdlong	local10, fp
2a8ec     0C 30 06 F1 | 	add	local10, #12
2a8f0     18 17 02 FB | 	rdlong	arg03, local10
2a8f4     04 4E 05 F1 | 	add	fp, #4
2a8f8     A7 18 02 FB | 	rdlong	arg04, fp
2a8fc     10 4E 85 F1 | 	sub	fp, #16
2a900     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2a904     04 4E 05 F1 | 	add	fp, #4
2a908     A7 12 02 FB | 	rdlong	arg01, fp
2a90c     04 4E 85 F1 | 	sub	fp, #4
2a910     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2a914     08 4E 05 F1 | 	add	fp, #8
2a918     A7 FA 61 FC | 	wrlong	result1, fp
2a91c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a920     08 4E 85 F1 | 	sub	fp, #8
2a924     18 00 90 5D |  if_ne	jmp	#LR__4384
2a928     10 4E 05 F1 | 	add	fp, #16
2a92c     A7 30 02 FB | 	rdlong	local10, fp
2a930     01 30 06 F1 | 	add	local10, #1
2a934     A7 30 62 FC | 	wrlong	local10, fp
2a938     10 4E 85 F1 | 	sub	fp, #16
2a93c     7C FF 9F FD | 	jmp	#LR__4383
2a940                 | LR__4384
2a940     10 4E 05 F1 | 	add	fp, #16
2a944     A7 30 02 FB | 	rdlong	local10, fp
2a948     10 4E 85 F1 | 	sub	fp, #16
2a94c     64 30 0E F2 | 	cmp	local10, #100 wz
2a950     07 FA 05 A6 |  if_e	mov	result1, #7
2a954     AC 02 90 AD |  if_e	jmp	#LR__4395
2a958     08 4E 05 F1 | 	add	fp, #8
2a95c     A7 30 02 FB | 	rdlong	local10, fp
2a960     08 4E 85 F1 | 	sub	fp, #8
2a964     04 30 0E F2 | 	cmp	local10, #4 wz
2a968     08 4E 05 51 |  if_ne	add	fp, #8
2a96c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2a970     08 4E 85 51 |  if_ne	sub	fp, #8
2a974     8C 02 90 5D |  if_ne	jmp	#LR__4395
2a978     04 4E 05 F1 | 	add	fp, #4
2a97c     A7 30 02 FB | 	rdlong	local10, fp
2a980     23 4E 05 F1 | 	add	fp, #35
2a984     A7 1E C2 FA | 	rdbyte	local01, fp
2a988     27 4E 85 F1 | 	sub	fp, #39
2a98c     2B 30 06 F1 | 	add	local10, #43
2a990     18 1F 42 FC | 	wrbyte	local01, local10
2a994                 | LR__4385
2a994     27 4E 05 F1 | 	add	fp, #39
2a998     A7 20 C2 FA | 	rdbyte	local02, fp
2a99c     27 4E 85 F1 | 	sub	fp, #39
2a9a0     02 20 CE F7 | 	test	local02, #2 wz
2a9a4     20 00 90 AD |  if_e	jmp	#LR__4386
2a9a8     14 4E 05 F1 | 	add	fp, #20
2a9ac     A7 30 02 FB | 	rdlong	local10, fp
2a9b0     0C 30 06 F1 | 	add	local10, #12
2a9b4     0D 30 16 FD | 	qdiv	local10, #13
2a9b8     14 4E 85 F1 | 	sub	fp, #20
2a9bc     18 30 62 FD | 	getqx	local10
2a9c0     01 30 06 F1 | 	add	local10, #1
2a9c4     04 00 90 FD | 	jmp	#LR__4387
2a9c8                 | LR__4386
2a9c8     01 30 06 F6 | 	mov	local10, #1
2a9cc                 | LR__4387
2a9cc     18 4E 05 F1 | 	add	fp, #24
2a9d0     A7 30 62 FC | 	wrlong	local10, fp
2a9d4     14 4E 85 F1 | 	sub	fp, #20
2a9d8     A7 12 02 FB | 	rdlong	arg01, fp
2a9dc     18 15 02 F6 | 	mov	arg02, local10
2a9e0     04 4E 85 F1 | 	sub	fp, #4
2a9e4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2a9e8     08 4E 05 F1 | 	add	fp, #8
2a9ec     A7 FA 61 FC | 	wrlong	result1, fp
2a9f0     08 4E 85 F1 | 	sub	fp, #8
2a9f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9f8     38 01 90 5D |  if_ne	jmp	#LR__4392
2a9fc     18 4E 05 F1 | 	add	fp, #24
2aa00     A7 30 02 FB | 	rdlong	local10, fp
2aa04     01 30 8E F1 | 	sub	local10, #1 wz
2aa08     A7 30 62 FC | 	wrlong	local10, fp
2aa0c     18 4E 85 F1 | 	sub	fp, #24
2aa10     20 01 90 AD |  if_e	jmp	#LR__4392
2aa14     04 4E 05 F1 | 	add	fp, #4
2aa18     A7 30 02 FB | 	rdlong	local10, fp
2aa1c     18 13 02 F6 | 	mov	arg01, local10
2aa20     14 4E 05 F1 | 	add	fp, #20
2aa24     A7 18 02 FB | 	rdlong	arg04, fp
2aa28     18 4E 85 F1 | 	sub	fp, #24
2aa2c     05 18 66 F0 | 	shl	arg04, #5
2aa30     10 30 06 F1 | 	add	local10, #16
2aa34     18 15 02 FB | 	rdlong	arg02, local10
2aa38     0C 15 82 F1 | 	sub	arg02, arg04
2aa3c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2aa40     08 4E 05 F1 | 	add	fp, #8
2aa44     A7 FA 61 FC | 	wrlong	result1, fp
2aa48     08 4E 85 F1 | 	sub	fp, #8
2aa4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa50     E0 00 90 5D |  if_ne	jmp	#LR__4391
2aa54     04 4E 05 F1 | 	add	fp, #4
2aa58     A7 12 02 FB | 	rdlong	arg01, fp
2aa5c     04 4E 85 F1 | 	sub	fp, #4
2aa60     20 12 06 F1 | 	add	arg01, #32
2aa64     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2aa68     FD 30 02 F6 | 	mov	local10, result1
2aa6c     28 4E 05 F1 | 	add	fp, #40
2aa70     A7 30 42 FC | 	wrbyte	local10, fp
2aa74     28 4E 85 F1 | 	sub	fp, #40
2aa78                 | ' 			sum = sum_sfn(dp->fn);
2aa78                 | ' 			do {
2aa78                 | LR__4388
2aa78     0C 4E 05 F1 | 	add	fp, #12
2aa7c     A7 12 02 FB | 	rdlong	arg01, fp
2aa80     08 4E 85 F1 | 	sub	fp, #8
2aa84     A7 1E 02 FB | 	rdlong	local01, fp
2aa88     04 4E 85 F1 | 	sub	fp, #4
2aa8c     18 1E 06 F1 | 	add	local01, #24
2aa90     0F 15 02 FB | 	rdlong	arg02, local01
2aa94     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2aa98     08 4E 05 F1 | 	add	fp, #8
2aa9c     A7 FA 61 FC | 	wrlong	result1, fp
2aaa0     00 FA 4D F2 | 	cmps	result1, #0 wz
2aaa4     08 4E 85 F1 | 	sub	fp, #8
2aaa8     88 00 90 5D |  if_ne	jmp	#LR__4390
2aaac     0C 4E 05 F1 | 	add	fp, #12
2aab0     A7 20 02 FB | 	rdlong	local02, fp
2aab4     0C 20 06 F1 | 	add	local02, #12
2aab8     10 13 02 FB | 	rdlong	arg01, local02
2aabc     08 4E 85 F1 | 	sub	fp, #8
2aac0     A7 1E 02 FB | 	rdlong	local01, fp
2aac4     1C 1E 06 F1 | 	add	local01, #28
2aac8     0F 15 02 FB | 	rdlong	arg02, local01
2aacc     14 4E 05 F1 | 	add	fp, #20
2aad0     A7 16 02 FB | 	rdlong	arg03, fp
2aad4     10 4E 05 F1 | 	add	fp, #16
2aad8     A7 18 C2 FA | 	rdbyte	arg04, fp
2aadc     28 4E 85 F1 | 	sub	fp, #40
2aae0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2aae4     0C 4E 05 F1 | 	add	fp, #12
2aae8     A7 30 02 FB | 	rdlong	local10, fp
2aaec     03 30 06 F1 | 	add	local10, #3
2aaf0     18 03 48 FC | 	wrbyte	#1, local10
2aaf4     08 4E 85 F1 | 	sub	fp, #8
2aaf8     A7 12 02 FB | 	rdlong	arg01, fp
2aafc     04 4E 85 F1 | 	sub	fp, #4
2ab00     00 14 06 F6 | 	mov	arg02, #0
2ab04     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2ab08     08 4E 05 F1 | 	add	fp, #8
2ab0c     A7 FA 61 FC | 	wrlong	result1, fp
2ab10     00 FA 4D F2 | 	cmps	result1, #0 wz
2ab14     08 4E 85 F1 | 	sub	fp, #8
2ab18     18 00 90 5D |  if_ne	jmp	#LR__4389
2ab1c     18 4E 05 F1 | 	add	fp, #24
2ab20     A7 30 02 FB | 	rdlong	local10, fp
2ab24     01 30 8E F1 | 	sub	local10, #1 wz
2ab28     A7 30 62 FC | 	wrlong	local10, fp
2ab2c     18 4E 85 F1 | 	sub	fp, #24
2ab30     44 FF 9F 5D |  if_ne	jmp	#LR__4388
2ab34                 | LR__4389
2ab34                 | LR__4390
2ab34                 | LR__4391
2ab34                 | LR__4392
2ab34     08 4E 05 F1 | 	add	fp, #8
2ab38     A7 30 0A FB | 	rdlong	local10, fp wz
2ab3c     08 4E 85 F1 | 	sub	fp, #8
2ab40     B4 00 90 5D |  if_ne	jmp	#LR__4394
2ab44     0C 4E 05 F1 | 	add	fp, #12
2ab48     A7 12 02 FB | 	rdlong	arg01, fp
2ab4c     08 4E 85 F1 | 	sub	fp, #8
2ab50     A7 1E 02 FB | 	rdlong	local01, fp
2ab54     04 4E 85 F1 | 	sub	fp, #4
2ab58     18 1E 06 F1 | 	add	local01, #24
2ab5c     0F 15 02 FB | 	rdlong	arg02, local01
2ab60     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2ab64     08 4E 05 F1 | 	add	fp, #8
2ab68     A7 FA 61 FC | 	wrlong	result1, fp
2ab6c     08 4E 85 F1 | 	sub	fp, #8
2ab70     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab74     80 00 90 5D |  if_ne	jmp	#LR__4393
2ab78     04 4E 05 F1 | 	add	fp, #4
2ab7c     A7 20 02 FB | 	rdlong	local02, fp
2ab80     04 4E 85 F1 | 	sub	fp, #4
2ab84     1C 20 06 F1 | 	add	local02, #28
2ab88     10 13 02 FB | 	rdlong	arg01, local02
2ab8c     00 14 06 F6 | 	mov	arg02, #0
2ab90     20 16 06 F6 | 	mov	arg03, #32
2ab94     98 00 A0 FD | 	call	#\builtin_bytefill_
2ab98     04 4E 05 F1 | 	add	fp, #4
2ab9c     A7 14 02 FB | 	rdlong	arg02, fp
2aba0     0A 1F 02 F6 | 	mov	local01, arg02
2aba4     1C 1E 06 F1 | 	add	local01, #28
2aba8     0F 13 02 FB | 	rdlong	arg01, local01
2abac     04 4E 85 F1 | 	sub	fp, #4
2abb0     20 14 06 F1 | 	add	arg02, #32
2abb4     0B 16 06 F6 | 	mov	arg03, #11
2abb8     E8 68 BF FD | 	call	#__system____builtin_memmove
2abbc     04 4E 05 F1 | 	add	fp, #4
2abc0     A7 2E 02 FB | 	rdlong	local09, fp
2abc4     17 31 02 F6 | 	mov	local10, local09
2abc8     1C 30 06 F1 | 	add	local10, #28
2abcc     18 1F 02 FB | 	rdlong	local01, local10
2abd0     2B 2E 06 F1 | 	add	local09, #43
2abd4     17 31 C2 FA | 	rdbyte	local10, local09
2abd8     18 30 06 F5 | 	and	local10, #24
2abdc     0C 1E 06 F1 | 	add	local01, #12
2abe0     0F 31 42 FC | 	wrbyte	local10, local01
2abe4     08 4E 05 F1 | 	add	fp, #8
2abe8     A7 30 02 FB | 	rdlong	local10, fp
2abec     0C 4E 85 F1 | 	sub	fp, #12
2abf0     03 30 06 F1 | 	add	local10, #3
2abf4     18 03 48 FC | 	wrbyte	#1, local10
2abf8                 | LR__4393
2abf8                 | LR__4394
2abf8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2abf8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2abf8                 | ' 
2abf8                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2abf8                 | ' 
2abf8                 | ' 			fs->wflag = 1;
2abf8                 | ' 		}
2abf8                 | ' 	}
2abf8                 | ' 
2abf8                 | ' 	return res;
2abf8     08 4E 05 F1 | 	add	fp, #8
2abfc     A7 FA 01 FB | 	rdlong	result1, fp
2ac00     08 4E 85 F1 | 	sub	fp, #8
2ac04                 | LR__4395
2ac04     A7 F0 03 F6 | 	mov	ptra, fp
2ac08     B2 00 A0 FD | 	call	#popregs_
2ac0c                 | _fatfs_cc_dir_register_ret
2ac0c     2D 00 64 FD | 	ret
2ac10                 | 
2ac10                 | _fatfs_cc_dir_remove
2ac10     05 4A 05 F6 | 	mov	COUNT_, #5
2ac14     A8 00 A0 FD | 	call	#pushregs_
2ac18     09 1F 02 F6 | 	mov	local01, arg01
2ac1c     0F 21 02 FB | 	rdlong	local02, local01
2ac20     10 1E 06 F1 | 	add	local01, #16
2ac24     0F 23 02 FB | 	rdlong	local03, local01
2ac28     1C 1E 06 F1 | 	add	local01, #28
2ac2c     0F 15 02 FB | 	rdlong	arg02, local01
2ac30     2C 1E 86 F1 | 	sub	local01, #44
2ac34     FF FF 7F FF 
2ac38     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2ac3c     00 24 06 A6 |  if_e	mov	local04, #0
2ac40     18 00 90 AD |  if_e	jmp	#LR__4400
2ac44     0F 13 02 F6 | 	mov	arg01, local01
2ac48     2C 1E 06 F1 | 	add	local01, #44
2ac4c     0F 15 02 FB | 	rdlong	arg02, local01
2ac50     2C 1E 86 F1 | 	sub	local01, #44
2ac54     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2ac58     FD 24 02 F6 | 	mov	local04, result1
2ac5c                 | LR__4400
2ac5c     12 27 0A F6 | 	mov	local05, local04 wz
2ac60     64 00 90 5D |  if_ne	jmp	#LR__4403
2ac64                 | ' 		do {
2ac64                 | LR__4401
2ac64     18 1E 06 F1 | 	add	local01, #24
2ac68     0F 15 02 FB | 	rdlong	arg02, local01
2ac6c     18 1E 86 F1 | 	sub	local01, #24
2ac70     10 13 02 F6 | 	mov	arg01, local02
2ac74     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2ac78     FD 26 0A F6 | 	mov	local05, result1 wz
2ac7c     40 00 90 5D |  if_ne	jmp	#LR__4402
2ac80     1C 1E 06 F1 | 	add	local01, #28
2ac84     0F 25 02 FB | 	rdlong	local04, local01
2ac88     12 CB 49 FC | 	wrbyte	#229, local04
2ac8c     03 20 06 F1 | 	add	local02, #3
2ac90     10 03 48 FC | 	wrbyte	#1, local02
2ac94     03 20 86 F1 | 	sub	local02, #3
2ac98     0C 1E 86 F1 | 	sub	local01, #12
2ac9c     0F 25 02 FB | 	rdlong	local04, local01
2aca0     10 1E 86 F1 | 	sub	local01, #16
2aca4     11 25 12 F2 | 	cmp	local04, local03 wc
2aca8     14 00 90 3D |  if_ae	jmp	#LR__4402
2acac     0F 13 02 F6 | 	mov	arg01, local01
2acb0     00 14 06 F6 | 	mov	arg02, #0
2acb4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2acb8     FD 26 0A F6 | 	mov	local05, result1 wz
2acbc     A4 FF 9F AD |  if_e	jmp	#LR__4401
2acc0                 | LR__4402
2acc0     04 26 0E F2 | 	cmp	local05, #4 wz
2acc4     02 26 06 A6 |  if_e	mov	local05, #2
2acc8                 | LR__4403
2acc8                 | ' 	}
2acc8                 | ' #line 2590 "ff.c"
2acc8                 | ' 	return res;
2acc8     13 FB 01 F6 | 	mov	result1, local05
2accc     A7 F0 03 F6 | 	mov	ptra, fp
2acd0     B2 00 A0 FD | 	call	#popregs_
2acd4                 | _fatfs_cc_dir_remove_ret
2acd4     2D 00 64 FD | 	ret
2acd8                 | 
2acd8                 | _fatfs_cc_get_fileinfo
2acd8     0F 4A 05 F6 | 	mov	COUNT_, #15
2acdc     A8 00 A0 FD | 	call	#pushregs_
2ace0     09 1F 02 F6 | 	mov	local01, arg01
2ace4     0A 21 02 F6 | 	mov	local02, arg02
2ace8     0F 23 02 FB | 	rdlong	local03, local01
2acec     1C 20 06 F1 | 	add	local02, #28
2acf0     10 01 48 FC | 	wrbyte	#0, local02
2acf4     1C 20 86 F1 | 	sub	local02, #28
2acf8     18 1E 06 F1 | 	add	local01, #24
2acfc     0F 25 0A FB | 	rdlong	local04, local01 wz
2ad00     18 1E 86 F1 | 	sub	local01, #24
2ad04     90 03 90 AD |  if_e	jmp	#LR__4424
2ad08     2C 1E 06 F1 | 	add	local01, #44
2ad0c     0F 25 02 FB | 	rdlong	local04, local01
2ad10     2C 1E 86 F1 | 	sub	local01, #44
2ad14     FF FF 7F FF 
2ad18     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2ad1c     D8 00 90 AD |  if_e	jmp	#LR__4413
2ad20     00 26 06 F6 | 	mov	local05, #0
2ad24     00 28 06 F6 | 	mov	local06, #0
2ad28     00 2A 06 F6 | 	mov	local07, #0
2ad2c                 | ' 			si = di = 0;
2ad2c                 | ' 			hs = 0;
2ad2c                 | ' 			while (fs->lfnbuf[si] != 0) {
2ad2c                 | LR__4410
2ad2c     0C 22 06 F1 | 	add	local03, #12
2ad30     11 25 02 FB | 	rdlong	local04, local03
2ad34     0C 22 86 F1 | 	sub	local03, #12
2ad38     14 2D 02 F6 | 	mov	local08, local06
2ad3c     01 2C 66 F0 | 	shl	local08, #1
2ad40     12 2D 02 F1 | 	add	local08, local04
2ad44     16 25 EA FA | 	rdword	local04, local08 wz
2ad48     90 00 90 AD |  if_e	jmp	#LR__4412
2ad4c     0C 22 06 F1 | 	add	local03, #12
2ad50     11 2F 02 FB | 	rdlong	local09, local03
2ad54     0C 22 86 F1 | 	sub	local03, #12
2ad58     14 31 02 F6 | 	mov	local10, local06
2ad5c     01 30 66 F0 | 	shl	local10, #1
2ad60     17 31 02 F1 | 	add	local10, local09
2ad64     18 33 E2 FA | 	rdword	local11, local10
2ad68     15 25 02 F6 | 	mov	local04, local07
2ad6c     0F 24 4E F7 | 	zerox	local04, #15 wz
2ad70     01 28 06 F1 | 	add	local06, #1
2ad74     24 00 90 5D |  if_ne	jmp	#LR__4411
2ad78     19 35 32 F9 | 	getword	local12, local11, #0
2ad7c     6C 00 00 FF 
2ad80     00 34 16 F2 | 	cmp	local12, ##55296 wc
2ad84     14 00 90 CD |  if_b	jmp	#LR__4411
2ad88     19 37 32 F9 | 	getword	local13, local11, #0
2ad8c     70 00 00 FF 
2ad90     00 36 16 F2 | 	cmp	local13, ##57344 wc
2ad94     19 2B 02 C6 |  if_b	mov	local07, local11
2ad98                 | ' 					hs = wc; continue;
2ad98     90 FF 9F CD |  if_b	jmp	#LR__4410
2ad9c                 | LR__4411
2ad9c     15 13 32 F9 | 	getword	arg01, local07, #0
2ada0     10 12 66 F0 | 	shl	arg01, #16
2ada4     19 33 32 F9 | 	getword	local11, local11, #0
2ada8     19 13 42 F5 | 	or	arg01, local11
2adac     13 15 02 F6 | 	mov	arg02, local05
2adb0     1C 20 06 F1 | 	add	local02, #28
2adb4     10 15 02 F1 | 	add	arg02, local02
2adb8     FF 16 06 F6 | 	mov	arg03, #255
2adbc     13 17 82 F1 | 	sub	arg03, local05
2adc0     1C 20 86 F1 | 	sub	local02, #28
2adc4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2adc8     FD 38 0A F6 | 	mov	local14, result1 wz
2adcc     00 26 06 A6 |  if_e	mov	local05, #0
2add0     1C 27 02 51 |  if_ne	add	local05, local14
2add4     00 2A 06 56 |  if_ne	mov	local07, #0
2add8     50 FF 9F 5D |  if_ne	jmp	#LR__4410
2addc                 | LR__4412
2addc     15 25 02 F6 | 	mov	local04, local07
2ade0     0F 24 4E F7 | 	zerox	local04, #15 wz
2ade4     00 26 06 56 |  if_ne	mov	local05, #0
2ade8     1C 20 06 F1 | 	add	local02, #28
2adec     10 27 02 F1 | 	add	local05, local02
2adf0     13 01 48 FC | 	wrbyte	#0, local05
2adf4     1C 20 86 F1 | 	sub	local02, #28
2adf8                 | LR__4413
2adf8     00 26 06 F6 | 	mov	local05, #0
2adfc     00 28 06 F6 | 	mov	local06, #0
2ae00                 | ' 			fno->fname[di] = 0;
2ae00                 | ' 		}
2ae00                 | ' 	}
2ae00                 | ' 
2ae00                 | ' 	si = di = 0;
2ae00                 | ' 	while (si < 11) {
2ae00                 | LR__4414
2ae00     0B 28 16 F2 | 	cmp	local06, #11 wc
2ae04     20 01 90 3D |  if_ae	jmp	#LR__4417
2ae08     1C 1E 06 F1 | 	add	local01, #28
2ae0c     0F 2F 02 FB | 	rdlong	local09, local01
2ae10     1C 1E 86 F1 | 	sub	local01, #28
2ae14     14 31 02 F6 | 	mov	local10, local06
2ae18     17 31 02 F1 | 	add	local10, local09
2ae1c     18 33 C2 FA | 	rdbyte	local11, local10
2ae20     19 25 32 F9 | 	getword	local04, local11, #0
2ae24     20 24 0E F2 | 	cmp	local04, #32 wz
2ae28     01 28 06 F1 | 	add	local06, #1
2ae2c     D0 FF 9F AD |  if_e	jmp	#LR__4414
2ae30     19 25 32 F9 | 	getword	local04, local11, #0
2ae34     05 24 0E F2 | 	cmp	local04, #5 wz
2ae38     E5 32 06 A6 |  if_e	mov	local11, #229
2ae3c     09 28 0E F2 | 	cmp	local06, #9 wz
2ae40     20 00 90 5D |  if_ne	jmp	#LR__4415
2ae44     0C 26 16 F2 | 	cmp	local05, #12 wc
2ae48     18 00 90 3D |  if_ae	jmp	#LR__4415
2ae4c     13 37 02 F6 | 	mov	local13, local05
2ae50     0C 20 06 F1 | 	add	local02, #12
2ae54     10 37 02 F1 | 	add	local13, local02
2ae58     1B 5D 48 FC | 	wrbyte	#46, local13
2ae5c     01 26 06 F1 | 	add	local05, #1
2ae60     0C 20 86 F1 | 	sub	local02, #12
2ae64                 | LR__4415
2ae64     19 13 32 F9 | 	getword	arg01, local11, #0
2ae68     07 12 4E F7 | 	zerox	arg01, #7 wz
2ae6c     00 FA 05 56 |  if_ne	mov	result1, #0
2ae70                 | ' 
2ae70                 | ' 	return 0;
2ae70     00 FA 05 A6 |  if_e	mov	result1, #0
2ae74     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae78     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2ae7c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2ae80     50 00 90 AD |  if_e	jmp	#LR__4416
2ae84     1C 1E 06 F1 | 	add	local01, #28
2ae88     0F 31 02 FB | 	rdlong	local10, local01
2ae8c     1C 1E 86 F1 | 	sub	local01, #28
2ae90     14 2D 02 F6 | 	mov	local08, local06
2ae94     18 2D 02 F1 | 	add	local08, local10
2ae98     16 13 CA FA | 	rdbyte	arg01, local08 wz
2ae9c     00 FA 05 56 |  if_ne	mov	result1, #0
2aea0                 | ' 
2aea0                 | ' 	return 0;
2aea0     00 FA 05 A6 |  if_e	mov	result1, #0
2aea4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aea8     28 00 90 AD |  if_e	jmp	#LR__4416
2aeac     19 33 32 F9 | 	getword	local11, local11, #0
2aeb0     08 32 66 F0 | 	shl	local11, #8
2aeb4     1C 1E 06 F1 | 	add	local01, #28
2aeb8     0F 39 02 FB | 	rdlong	local14, local01
2aebc     1C 1E 86 F1 | 	sub	local01, #28
2aec0     14 2F 02 F6 | 	mov	local09, local06
2aec4     1C 2F 02 F1 | 	add	local09, local14
2aec8     17 35 C2 FA | 	rdbyte	local12, local09
2aecc     1A 33 42 F5 | 	or	local11, local12
2aed0     01 28 06 F1 | 	add	local06, #1
2aed4                 | LR__4416
2aed4     19 13 02 F6 | 	mov	arg01, local11
2aed8     01 00 00 FF 
2aedc     52 15 06 F6 | 	mov	arg02, ##850
2aee0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2aee4     FD 32 02 F6 | 	mov	local11, result1
2aee8     19 25 02 F6 | 	mov	local04, local11
2aeec     0F 24 4E F7 | 	zerox	local04, #15 wz
2aef0     00 26 06 A6 |  if_e	mov	local05, #0
2aef4     30 00 90 AD |  if_e	jmp	#LR__4417
2aef8     19 13 32 F9 | 	getword	arg01, local11, #0
2aefc     13 15 02 F6 | 	mov	arg02, local05
2af00     0C 20 06 F1 | 	add	local02, #12
2af04     10 15 02 F1 | 	add	arg02, local02
2af08     0C 16 06 F6 | 	mov	arg03, #12
2af0c     13 17 82 F1 | 	sub	arg03, local05
2af10     0C 20 86 F1 | 	sub	local02, #12
2af14     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2af18     FD 38 0A F6 | 	mov	local14, result1 wz
2af1c     00 26 06 A6 |  if_e	mov	local05, #0
2af20     1C 27 02 51 |  if_ne	add	local05, local14
2af24     D8 FE 9F 5D |  if_ne	jmp	#LR__4414
2af28                 | LR__4417
2af28     13 25 02 F6 | 	mov	local04, local05
2af2c     0C 20 06 F1 | 	add	local02, #12
2af30     10 25 02 F1 | 	add	local04, local02
2af34     12 01 48 FC | 	wrbyte	#0, local04
2af38     10 20 06 F1 | 	add	local02, #16
2af3c     10 25 CA FA | 	rdbyte	local04, local02 wz
2af40     1C 20 86 F1 | 	sub	local02, #28
2af44     F8 00 90 5D |  if_ne	jmp	#LR__4423
2af48     00 26 0E F2 | 	cmp	local05, #0 wz
2af4c     1C 00 90 5D |  if_ne	jmp	#LR__4418
2af50     13 37 02 F6 | 	mov	local13, local05
2af54     1C 20 06 F1 | 	add	local02, #28
2af58     10 37 02 F1 | 	add	local13, local02
2af5c     1B 7F 48 FC | 	wrbyte	#63, local13
2af60     01 26 06 F1 | 	add	local05, #1
2af64     1C 20 86 F1 | 	sub	local02, #28
2af68     A4 00 90 FD | 	jmp	#LR__4422
2af6c                 | LR__4418
2af6c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2af6c     00 26 06 F6 | 	mov	local05, #0
2af70     00 28 06 F6 | 	mov	local06, #0
2af74     08 3A 06 F6 | 	mov	local15, #8
2af78                 | LR__4419
2af78     14 25 02 F6 | 	mov	local04, local06
2af7c     0C 20 06 F1 | 	add	local02, #12
2af80     10 25 02 F1 | 	add	local04, local02
2af84     12 37 CA FA | 	rdbyte	local13, local04 wz
2af88     0C 20 86 F1 | 	sub	local02, #12
2af8c     80 00 90 AD |  if_e	jmp	#LR__4421
2af90     14 2D 02 F6 | 	mov	local08, local06
2af94     0C 20 06 F1 | 	add	local02, #12
2af98     10 2D 02 F1 | 	add	local08, local02
2af9c     16 33 C2 FA | 	rdbyte	local11, local08
2afa0     19 39 32 F9 | 	getword	local14, local11, #0
2afa4     2E 38 0E F2 | 	cmp	local14, #46 wz
2afa8     0C 20 86 F1 | 	sub	local02, #12
2afac     10 3A 06 A6 |  if_e	mov	local15, #16
2afb0     19 39 32 F9 | 	getword	local14, local11, #0
2afb4     41 38 16 F2 | 	cmp	local14, #65 wc
2afb8     30 00 90 CD |  if_b	jmp	#LR__4420
2afbc     19 2D 32 F9 | 	getword	local08, local11, #0
2afc0     5B 2C 16 F2 | 	cmp	local08, #91 wc
2afc4     24 00 90 3D |  if_ae	jmp	#LR__4420
2afc8     1C 1E 06 F1 | 	add	local01, #28
2afcc     0F 2F 02 FB | 	rdlong	local09, local01
2afd0     1C 1E 86 F1 | 	sub	local01, #28
2afd4     0C 2E 06 F1 | 	add	local09, #12
2afd8     17 31 C2 FA | 	rdbyte	local10, local09
2afdc     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2afe0     1C 31 CA F7 | 	test	local10, local14 wz
2afe4     19 33 32 59 |  if_ne	getword	local11, local11, #0
2afe8     20 32 06 51 |  if_ne	add	local11, #32
2afec                 | LR__4420
2afec     13 39 02 F6 | 	mov	local14, local05
2aff0     1C 20 06 F1 | 	add	local02, #28
2aff4     10 39 02 F1 | 	add	local14, local02
2aff8     19 33 32 F9 | 	getword	local11, local11, #0
2affc     1C 33 42 FC | 	wrbyte	local11, local14
2b000     01 28 06 F1 | 	add	local06, #1
2b004     01 26 06 F1 | 	add	local05, #1
2b008     1C 20 86 F1 | 	sub	local02, #28
2b00c     68 FF 9F FD | 	jmp	#LR__4419
2b010                 | LR__4421
2b010                 | LR__4422
2b010     1C 20 06 F1 | 	add	local02, #28
2b014     10 27 02 F1 | 	add	local05, local02
2b018     13 01 48 FC | 	wrbyte	#0, local05
2b01c     1C 1E 06 F1 | 	add	local01, #28
2b020     0F 25 02 FB | 	rdlong	local04, local01
2b024     1C 1E 86 F1 | 	sub	local01, #28
2b028     0C 24 06 F1 | 	add	local04, #12
2b02c     12 37 CA FA | 	rdbyte	local13, local04 wz
2b030     1C 20 86 F1 | 	sub	local02, #28
2b034     0C 20 06 A1 |  if_e	add	local02, #12
2b038     10 01 48 AC |  if_e	wrbyte	#0, local02
2b03c     0C 20 86 A1 |  if_e	sub	local02, #12
2b040                 | LR__4423
2b040     1C 1E 06 F1 | 	add	local01, #28
2b044     0F 35 02 FB | 	rdlong	local12, local01
2b048     0B 34 06 F1 | 	add	local12, #11
2b04c     1A 25 C2 FA | 	rdbyte	local04, local12
2b050     3F 24 06 F5 | 	and	local04, #63
2b054     08 20 06 F1 | 	add	local02, #8
2b058     10 25 42 FC | 	wrbyte	local04, local02
2b05c     08 20 86 F1 | 	sub	local02, #8
2b060     0F 13 02 FB | 	rdlong	arg01, local01
2b064     1C 12 06 F1 | 	add	arg01, #28
2b068                 | ' {
2b068                 | ' 
2b068                 | ' 	return *((DWORD*)ptr);
2b068     09 FB 01 FB | 	rdlong	result1, arg01
2b06c     10 FB 61 FC | 	wrlong	result1, local02
2b070     0F 13 02 FB | 	rdlong	arg01, local01
2b074     16 12 06 F1 | 	add	arg01, #22
2b078                 | ' {
2b078                 | ' 
2b078                 | ' 	return *((WORD*)ptr);
2b078     09 FB E1 FA | 	rdword	result1, arg01
2b07c     06 20 06 F1 | 	add	local02, #6
2b080     10 FB 51 FC | 	wrword	result1, local02
2b084     0F 13 02 FB | 	rdlong	arg01, local01
2b088     18 12 06 F1 | 	add	arg01, #24
2b08c                 | ' {
2b08c                 | ' 
2b08c                 | ' 	return *((WORD*)ptr);
2b08c     09 FB E1 FA | 	rdword	result1, arg01
2b090     02 20 86 F1 | 	sub	local02, #2
2b094     10 FB 51 FC | 	wrword	result1, local02
2b098                 | LR__4424
2b098     A7 F0 03 F6 | 	mov	ptra, fp
2b09c     B2 00 A0 FD | 	call	#popregs_
2b0a0                 | _fatfs_cc_get_fileinfo_ret
2b0a0     2D 00 64 FD | 	ret
2b0a4                 | 
2b0a4                 | _fatfs_cc_create_name
2b0a4     0D 4A 05 F6 | 	mov	COUNT_, #13
2b0a8     A8 00 A0 FD | 	call	#pushregs_
2b0ac     34 F0 07 F1 | 	add	ptra, #52
2b0b0     04 4E 05 F1 | 	add	fp, #4
2b0b4     A7 12 62 FC | 	wrlong	arg01, fp
2b0b8     04 4E 05 F1 | 	add	fp, #4
2b0bc     A7 14 62 FC | 	wrlong	arg02, fp
2b0c0     0A FB 01 FB | 	rdlong	result1, arg02
2b0c4     28 4E 05 F1 | 	add	fp, #40
2b0c8     A7 FA 61 FC | 	wrlong	result1, fp
2b0cc     2C 4E 85 F1 | 	sub	fp, #44
2b0d0     A7 FA 01 FB | 	rdlong	result1, fp
2b0d4     FD 1E 02 FB | 	rdlong	local01, result1
2b0d8     0C 1E 06 F1 | 	add	local01, #12
2b0dc     0F 21 02 FB | 	rdlong	local02, local01
2b0e0     14 4E 05 F1 | 	add	fp, #20
2b0e4     A7 20 62 FC | 	wrlong	local02, fp
2b0e8     14 4E 05 F1 | 	add	fp, #20
2b0ec     A7 00 68 FC | 	wrlong	#0, fp
2b0f0     2C 4E 85 F1 | 	sub	fp, #44
2b0f4                 | ' 
2b0f4                 | ' 
2b0f4                 | ' 
2b0f4                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2b0f4                 | ' 	for (;;) {
2b0f4                 | LR__4430
2b0f4     30 4E 05 F1 | 	add	fp, #48
2b0f8     A7 12 02 F6 | 	mov	arg01, fp
2b0fc     30 4E 85 F1 | 	sub	fp, #48
2b100     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2b104     1C 4E 05 F1 | 	add	fp, #28
2b108     A7 FA 61 FC | 	wrlong	result1, fp
2b10c     1C 4E 85 F1 | 	sub	fp, #28
2b110     FF FF 7F FF 
2b114     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b118     06 FA 05 A6 |  if_e	mov	result1, #6
2b11c     74 08 90 AD |  if_e	jmp	#LR__4470
2b120     1C 4E 05 F1 | 	add	fp, #28
2b124     A7 1E 02 FB | 	rdlong	local01, fp
2b128     1C 4E 85 F1 | 	sub	fp, #28
2b12c     80 00 00 FF 
2b130     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2b134     3C 00 90 CD |  if_b	jmp	#LR__4431
2b138     18 4E 05 F1 | 	add	fp, #24
2b13c     A7 22 02 FB | 	rdlong	local03, fp
2b140     14 4E 05 F1 | 	add	fp, #20
2b144     A7 1E 02 FB | 	rdlong	local01, fp
2b148     0F 25 02 F6 | 	mov	local04, local01
2b14c     01 24 06 F1 | 	add	local04, #1
2b150     A7 24 62 FC | 	wrlong	local04, fp
2b154     01 1E 66 F0 | 	shl	local01, #1
2b158     11 1F 02 F1 | 	add	local01, local03
2b15c     10 4E 85 F1 | 	sub	fp, #16
2b160     A7 26 02 FB | 	rdlong	local05, fp
2b164     1C 4E 85 F1 | 	sub	fp, #28
2b168     13 29 02 F6 | 	mov	local06, local05
2b16c     10 28 46 F0 | 	shr	local06, #16
2b170     0F 29 52 FC | 	wrword	local06, local01
2b174                 | LR__4431
2b174     1C 4E 05 F1 | 	add	fp, #28
2b178     A7 1E 02 FB | 	rdlong	local01, fp
2b17c     08 4E 85 F1 | 	sub	fp, #8
2b180     A7 1E 52 FC | 	wrword	local01, fp
2b184     A7 1E E2 FA | 	rdword	local01, fp
2b188     14 4E 85 F1 | 	sub	fp, #20
2b18c     20 1E 16 F2 | 	cmp	local01, #32 wc
2b190     B0 00 90 CD |  if_b	jmp	#LR__4433
2b194     14 4E 05 F1 | 	add	fp, #20
2b198     A7 1E E2 FA | 	rdword	local01, fp
2b19c     14 4E 85 F1 | 	sub	fp, #20
2b1a0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2b1a4     14 4E 05 51 |  if_ne	add	fp, #20
2b1a8     A7 24 E2 5A |  if_ne	rdword	local04, fp
2b1ac     14 4E 85 51 |  if_ne	sub	fp, #20
2b1b0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2b1b4     8C 00 90 AD |  if_e	jmp	#LR__4433
2b1b8     14 4E 05 F1 | 	add	fp, #20
2b1bc     A7 12 E2 FA | 	rdword	arg01, fp
2b1c0     14 4E 85 F1 | 	sub	fp, #20
2b1c4     80 12 16 F2 | 	cmp	arg01, #128 wc
2b1c8     24 00 90 3D |  if_ae	jmp	#LR__4432
2b1cc     88 01 00 FF 
2b1d0     08 13 06 F6 | 	mov	arg01, ##@LR__5092
2b1d4     14 4E 05 F1 | 	add	fp, #20
2b1d8     A7 14 E2 FA | 	rdword	arg02, fp
2b1dc     14 4E 85 F1 | 	sub	fp, #20
2b1e0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2b1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b1e8     06 FA 05 56 |  if_ne	mov	result1, #6
2b1ec     A4 07 90 5D |  if_ne	jmp	#LR__4470
2b1f0                 | LR__4432
2b1f0     2C 4E 05 F1 | 	add	fp, #44
2b1f4     A7 28 02 FB | 	rdlong	local06, fp
2b1f8     2C 4E 85 F1 | 	sub	fp, #44
2b1fc     FF 28 16 F2 | 	cmp	local06, #255 wc
2b200     06 FA 05 36 |  if_ae	mov	result1, #6
2b204     8C 07 90 3D |  if_ae	jmp	#LR__4470
2b208     18 4E 05 F1 | 	add	fp, #24
2b20c     A7 22 02 FB | 	rdlong	local03, fp
2b210     14 4E 05 F1 | 	add	fp, #20
2b214     A7 20 02 FB | 	rdlong	local02, fp
2b218     10 25 02 F6 | 	mov	local04, local02
2b21c     01 24 06 F1 | 	add	local04, #1
2b220     A7 24 62 FC | 	wrlong	local04, fp
2b224     10 1F 02 F6 | 	mov	local01, local02
2b228     01 1E 66 F0 | 	shl	local01, #1
2b22c     11 1F 02 F1 | 	add	local01, local03
2b230     18 4E 85 F1 | 	sub	fp, #24
2b234     A7 28 E2 FA | 	rdword	local06, fp
2b238     14 4E 85 F1 | 	sub	fp, #20
2b23c     0F 29 52 FC | 	wrword	local06, local01
2b240     B0 FE 9F FD | 	jmp	#LR__4430
2b244                 | LR__4433
2b244     14 4E 05 F1 | 	add	fp, #20
2b248     A7 2A E2 FA | 	rdword	local07, fp
2b24c     14 4E 85 F1 | 	sub	fp, #20
2b250     20 2A 16 F2 | 	cmp	local07, #32 wc
2b254     10 4E 05 C1 |  if_b	add	fp, #16
2b258     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b25c     10 4E 85 C1 |  if_b	sub	fp, #16
2b260     74 00 90 CD |  if_b	jmp	#LR__4438
2b264     97 24 48 FB | 	callpa	#(@LR__4436-@LR__4434)>>2,fcache_load_ptr_
2b268                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2b268                 | LR__4434
2b268     30 4E 05 F1 | 	add	fp, #48
2b26c     A7 24 02 FB | 	rdlong	local04, fp
2b270     30 4E 85 F1 | 	sub	fp, #48
2b274     12 2B C2 FA | 	rdbyte	local07, local04
2b278     2F 2A 0E F2 | 	cmp	local07, #47 wz
2b27c     18 00 90 AD |  if_e	jmp	#LR__4435
2b280     30 4E 05 F1 | 	add	fp, #48
2b284     A7 24 02 FB | 	rdlong	local04, fp
2b288     30 4E 85 F1 | 	sub	fp, #48
2b28c     12 21 C2 FA | 	rdbyte	local02, local04
2b290     5C 20 0E F2 | 	cmp	local02, #92 wz
2b294     18 00 90 5D |  if_ne	jmp	#LR__4437
2b298                 | LR__4435
2b298     30 4E 05 F1 | 	add	fp, #48
2b29c     A7 1E 02 FB | 	rdlong	local01, fp
2b2a0     01 1E 06 F1 | 	add	local01, #1
2b2a4     A7 1E 62 FC | 	wrlong	local01, fp
2b2a8     30 4E 85 F1 | 	sub	fp, #48
2b2ac     B8 FF 9F FD | 	jmp	#LR__4434
2b2b0                 | LR__4436
2b2b0                 | LR__4437
2b2b0     10 4E 05 F1 | 	add	fp, #16
2b2b4     A7 00 48 FC | 	wrbyte	#0, fp
2b2b8     20 4E 05 F1 | 	add	fp, #32
2b2bc     A7 28 02 FB | 	rdlong	local06, fp
2b2c0     30 4E 85 F1 | 	sub	fp, #48
2b2c4     14 2B C2 FA | 	rdbyte	local07, local06
2b2c8     20 2A 16 F2 | 	cmp	local07, #32 wc
2b2cc     10 4E 05 C1 |  if_b	add	fp, #16
2b2d0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b2d4     10 4E 85 C1 |  if_b	sub	fp, #16
2b2d8                 | LR__4438
2b2d8     08 4E 05 F1 | 	add	fp, #8
2b2dc     A7 2A 02 FB | 	rdlong	local07, fp
2b2e0     28 4E 05 F1 | 	add	fp, #40
2b2e4     A7 1E 02 FB | 	rdlong	local01, fp
2b2e8     30 4E 85 F1 | 	sub	fp, #48
2b2ec     15 1F 62 FC | 	wrlong	local01, local07
2b2f0     97 38 48 FB | 	callpa	#(@LR__4440-@LR__4439)>>2,fcache_load_ptr_
2b2f4                 | ' 	}
2b2f4                 | ' 	*path = p;
2b2f4                 | ' #line 2862 "ff.c"
2b2f4                 | ' 	while (di) {
2b2f4                 | LR__4439
2b2f4     2C 4E 05 F1 | 	add	fp, #44
2b2f8     A7 2A 0A FB | 	rdlong	local07, fp wz
2b2fc     2C 4E 85 F1 | 	sub	fp, #44
2b300     60 00 90 AD |  if_e	jmp	#LR__4441
2b304     18 4E 05 F1 | 	add	fp, #24
2b308     A7 28 02 FB | 	rdlong	local06, fp
2b30c     14 4E 05 F1 | 	add	fp, #20
2b310     A7 24 02 FB | 	rdlong	local04, fp
2b314     01 24 86 F1 | 	sub	local04, #1
2b318     01 24 66 F0 | 	shl	local04, #1
2b31c     14 25 02 F1 | 	add	local04, local06
2b320     12 29 E2 FA | 	rdword	local06, local04
2b324     18 4E 85 F1 | 	sub	fp, #24
2b328     A7 28 52 FC | 	wrword	local06, fp
2b32c     A7 2A E2 FA | 	rdword	local07, fp
2b330     14 4E 85 F1 | 	sub	fp, #20
2b334     20 2A 0E F2 | 	cmp	local07, #32 wz
2b338     14 4E 05 51 |  if_ne	add	fp, #20
2b33c     A7 1E E2 5A |  if_ne	rdword	local01, fp
2b340     14 4E 85 51 |  if_ne	sub	fp, #20
2b344     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2b348     18 00 90 5D |  if_ne	jmp	#LR__4441
2b34c     2C 4E 05 F1 | 	add	fp, #44
2b350     A7 1E 02 FB | 	rdlong	local01, fp
2b354     01 1E 86 F1 | 	sub	local01, #1
2b358     A7 1E 62 FC | 	wrlong	local01, fp
2b35c     2C 4E 85 F1 | 	sub	fp, #44
2b360     90 FF 9F FD | 	jmp	#LR__4439
2b364                 | LR__4440
2b364                 | LR__4441
2b364     18 4E 05 F1 | 	add	fp, #24
2b368     A7 2C 02 FB | 	rdlong	local08, fp
2b36c     14 4E 05 F1 | 	add	fp, #20
2b370     A7 24 02 FB | 	rdlong	local04, fp
2b374     01 24 66 F0 | 	shl	local04, #1
2b378     16 25 02 F1 | 	add	local04, local08
2b37c     12 01 58 FC | 	wrword	#0, local04
2b380     A7 2A 0A FB | 	rdlong	local07, fp wz
2b384     2C 4E 85 F1 | 	sub	fp, #44
2b388     06 FA 05 A6 |  if_e	mov	result1, #6
2b38c     04 06 90 AD |  if_e	jmp	#LR__4470
2b390                 | ' 
2b390                 | ' 
2b390                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2b390     28 4E 05 F1 | 	add	fp, #40
2b394     A7 00 68 FC | 	wrlong	#0, fp
2b398     28 4E 85 F1 | 	sub	fp, #40
2b39c     97 22 48 FB | 	callpa	#(@LR__4443-@LR__4442)>>2,fcache_load_ptr_
2b3a0                 | LR__4442
2b3a0     18 4E 05 F1 | 	add	fp, #24
2b3a4     A7 2E 02 FB | 	rdlong	local09, fp
2b3a8     10 4E 05 F1 | 	add	fp, #16
2b3ac     A7 30 02 FB | 	rdlong	local10, fp
2b3b0     28 4E 85 F1 | 	sub	fp, #40
2b3b4     01 30 66 F0 | 	shl	local10, #1
2b3b8     17 31 02 F1 | 	add	local10, local09
2b3bc     18 33 E2 FA | 	rdword	local11, local10
2b3c0     20 32 0E F2 | 	cmp	local11, #32 wz
2b3c4     1C 00 90 5D |  if_ne	jmp	#LR__4444
2b3c8     28 4E 05 F1 | 	add	fp, #40
2b3cc     A7 34 02 FB | 	rdlong	local12, fp
2b3d0     1A 27 02 F6 | 	mov	local05, local12
2b3d4     01 26 06 F1 | 	add	local05, #1
2b3d8     A7 26 62 FC | 	wrlong	local05, fp
2b3dc     28 4E 85 F1 | 	sub	fp, #40
2b3e0     BC FF 9F FD | 	jmp	#LR__4442
2b3e4                 | LR__4443
2b3e4                 | LR__4444
2b3e4     28 4E 05 F1 | 	add	fp, #40
2b3e8     A7 2A 02 FB | 	rdlong	local07, fp
2b3ec     28 4E 85 F1 | 	sub	fp, #40
2b3f0     01 2A 16 F2 | 	cmp	local07, #1 wc
2b3f4     28 00 90 3D |  if_ae	jmp	#LR__4445
2b3f8     18 4E 05 F1 | 	add	fp, #24
2b3fc     A7 22 02 FB | 	rdlong	local03, fp
2b400     10 4E 05 F1 | 	add	fp, #16
2b404     A7 2E 02 FB | 	rdlong	local09, fp
2b408     28 4E 85 F1 | 	sub	fp, #40
2b40c     01 2E 66 F0 | 	shl	local09, #1
2b410     11 2F 02 F1 | 	add	local09, local03
2b414     17 1F E2 FA | 	rdword	local01, local09
2b418     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b41c     14 00 90 5D |  if_ne	jmp	#LR__4446
2b420                 | LR__4445
2b420     10 4E 05 F1 | 	add	fp, #16
2b424     A7 2A C2 FA | 	rdbyte	local07, fp
2b428     03 2A 46 F5 | 	or	local07, #3
2b42c     A7 2A 42 FC | 	wrbyte	local07, fp
2b430     10 4E 85 F1 | 	sub	fp, #16
2b434                 | LR__4446
2b434     97 2C 48 FB | 	callpa	#(@LR__4448-@LR__4447)>>2,fcache_load_ptr_
2b438                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2b438                 | LR__4447
2b438     2C 4E 05 F1 | 	add	fp, #44
2b43c     A7 2A 02 FB | 	rdlong	local07, fp
2b440     2C 4E 85 F1 | 	sub	fp, #44
2b444     01 2A 16 F2 | 	cmp	local07, #1 wc
2b448     44 00 90 CD |  if_b	jmp	#LR__4449
2b44c     18 4E 05 F1 | 	add	fp, #24
2b450     A7 28 02 FB | 	rdlong	local06, fp
2b454     14 4E 05 F1 | 	add	fp, #20
2b458     A7 22 02 FB | 	rdlong	local03, fp
2b45c     2C 4E 85 F1 | 	sub	fp, #44
2b460     01 22 86 F1 | 	sub	local03, #1
2b464     01 22 66 F0 | 	shl	local03, #1
2b468     14 23 02 F1 | 	add	local03, local06
2b46c     11 1F E2 FA | 	rdword	local01, local03
2b470     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b474     18 00 90 AD |  if_e	jmp	#LR__4449
2b478     2C 4E 05 F1 | 	add	fp, #44
2b47c     A7 1E 02 FB | 	rdlong	local01, fp
2b480     01 1E 86 F1 | 	sub	local01, #1
2b484     A7 1E 62 FC | 	wrlong	local01, fp
2b488     2C 4E 85 F1 | 	sub	fp, #44
2b48c     A8 FF 9F FD | 	jmp	#LR__4447
2b490                 | LR__4448
2b490                 | LR__4449
2b490     04 4E 05 F1 | 	add	fp, #4
2b494     A7 12 02 FB | 	rdlong	arg01, fp
2b498     04 4E 85 F1 | 	sub	fp, #4
2b49c     20 12 06 F1 | 	add	arg01, #32
2b4a0     20 14 06 F6 | 	mov	arg02, #32
2b4a4     0B 16 06 F6 | 	mov	arg03, #11
2b4a8     09 37 02 F6 | 	mov	local13, arg01
2b4ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2b4b0     1B FB 01 F6 | 	mov	result1, local13
2b4b4     0C 4E 05 F1 | 	add	fp, #12
2b4b8     A7 00 48 FC | 	wrbyte	#0, fp
2b4bc     A7 2A C2 FA | 	rdbyte	local07, fp
2b4c0     14 4E 05 F1 | 	add	fp, #20
2b4c4     A7 2A 62 FC | 	wrlong	local07, fp
2b4c8     04 4E 05 F1 | 	add	fp, #4
2b4cc     A7 10 68 FC | 	wrlong	#8, fp
2b4d0     24 4E 85 F1 | 	sub	fp, #36
2b4d4                 | ' 
2b4d4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2b4d4                 | ' 	i = b = 0; ni = 8;
2b4d4                 | ' 	for (;;) {
2b4d4                 | LR__4450
2b4d4     18 4E 05 F1 | 	add	fp, #24
2b4d8     A7 22 02 FB | 	rdlong	local03, fp
2b4dc     10 4E 05 F1 | 	add	fp, #16
2b4e0     A7 2E 02 FB | 	rdlong	local09, fp
2b4e4     17 25 02 F6 | 	mov	local04, local09
2b4e8     01 24 06 F1 | 	add	local04, #1
2b4ec     A7 24 62 FC | 	wrlong	local04, fp
2b4f0     01 2E 66 F0 | 	shl	local09, #1
2b4f4     11 2F 02 F1 | 	add	local09, local03
2b4f8     17 29 E2 FA | 	rdword	local06, local09
2b4fc     14 4E 85 F1 | 	sub	fp, #20
2b500     A7 28 52 FC | 	wrword	local06, fp
2b504     A7 2A EA FA | 	rdword	local07, fp wz
2b508     14 4E 85 F1 | 	sub	fp, #20
2b50c     74 03 90 AD |  if_e	jmp	#LR__4466
2b510     14 4E 05 F1 | 	add	fp, #20
2b514     A7 2A E2 FA | 	rdword	local07, fp
2b518     14 4E 85 F1 | 	sub	fp, #20
2b51c     20 2A 0E F2 | 	cmp	local07, #32 wz
2b520     30 00 90 AD |  if_e	jmp	#LR__4451
2b524     14 4E 05 F1 | 	add	fp, #20
2b528     A7 1E E2 FA | 	rdword	local01, fp
2b52c     14 4E 85 F1 | 	sub	fp, #20
2b530     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b534     34 00 90 5D |  if_ne	jmp	#LR__4452
2b538     28 4E 05 F1 | 	add	fp, #40
2b53c     A7 24 02 FB | 	rdlong	local04, fp
2b540     04 4E 05 F1 | 	add	fp, #4
2b544     A7 30 02 FB | 	rdlong	local10, fp
2b548     2C 4E 85 F1 | 	sub	fp, #44
2b54c     18 25 0A F2 | 	cmp	local04, local10 wz
2b550     18 00 90 AD |  if_e	jmp	#LR__4452
2b554                 | LR__4451
2b554     10 4E 05 F1 | 	add	fp, #16
2b558     A7 2A C2 FA | 	rdbyte	local07, fp
2b55c     03 2A 46 F5 | 	or	local07, #3
2b560     A7 2A 42 FC | 	wrbyte	local07, fp
2b564     10 4E 85 F1 | 	sub	fp, #16
2b568                 | ' 			cf |=  0x01  |  0x02 ;
2b568                 | ' 			continue;
2b568     68 FF 9F FD | 	jmp	#LR__4450
2b56c                 | LR__4452
2b56c     20 4E 05 F1 | 	add	fp, #32
2b570     A7 2A 02 FB | 	rdlong	local07, fp
2b574     04 4E 05 F1 | 	add	fp, #4
2b578     A7 1E 02 FB | 	rdlong	local01, fp
2b57c     24 4E 85 F1 | 	sub	fp, #36
2b580     0F 2B 12 F2 | 	cmp	local07, local01 wc
2b584     1C 00 90 3D |  if_ae	jmp	#LR__4453
2b588     28 4E 05 F1 | 	add	fp, #40
2b58c     A7 2C 02 FB | 	rdlong	local08, fp
2b590     04 4E 05 F1 | 	add	fp, #4
2b594     A7 30 02 FB | 	rdlong	local10, fp
2b598     2C 4E 85 F1 | 	sub	fp, #44
2b59c     18 2D 0A F2 | 	cmp	local08, local10 wz
2b5a0     B0 00 90 5D |  if_ne	jmp	#LR__4455
2b5a4                 | LR__4453
2b5a4     24 4E 05 F1 | 	add	fp, #36
2b5a8     A7 2A 02 FB | 	rdlong	local07, fp
2b5ac     24 4E 85 F1 | 	sub	fp, #36
2b5b0     0B 2A 0E F2 | 	cmp	local07, #11 wz
2b5b4     18 00 90 5D |  if_ne	jmp	#LR__4454
2b5b8     10 4E 05 F1 | 	add	fp, #16
2b5bc     A7 2A C2 FA | 	rdbyte	local07, fp
2b5c0     03 2A 46 F5 | 	or	local07, #3
2b5c4     A7 2A 42 FC | 	wrbyte	local07, fp
2b5c8     10 4E 85 F1 | 	sub	fp, #16
2b5cc                 | ' 				cf |=  0x01  |  0x02 ;
2b5cc                 | ' 				break;
2b5cc     B4 02 90 FD | 	jmp	#LR__4466
2b5d0                 | LR__4454
2b5d0     28 4E 05 F1 | 	add	fp, #40
2b5d4     A7 2A 02 FB | 	rdlong	local07, fp
2b5d8     04 4E 05 F1 | 	add	fp, #4
2b5dc     A7 1E 02 FB | 	rdlong	local01, fp
2b5e0     2C 4E 85 F1 | 	sub	fp, #44
2b5e4     0F 2B 0A F2 | 	cmp	local07, local01 wz
2b5e8     10 4E 05 51 |  if_ne	add	fp, #16
2b5ec     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b5f0     03 2A 46 55 |  if_ne	or	local07, #3
2b5f4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b5f8     10 4E 85 51 |  if_ne	sub	fp, #16
2b5fc     28 4E 05 F1 | 	add	fp, #40
2b600     A7 2A 02 FB | 	rdlong	local07, fp
2b604     04 4E 05 F1 | 	add	fp, #4
2b608     A7 20 02 FB | 	rdlong	local02, fp
2b60c     2C 4E 85 F1 | 	sub	fp, #44
2b610     10 2B 1A F2 | 	cmp	local07, local02 wcz
2b614     6C 02 90 1D |  if_a	jmp	#LR__4466
2b618     2C 4E 05 F1 | 	add	fp, #44
2b61c     A7 2A 02 FB | 	rdlong	local07, fp
2b620     04 4E 85 F1 | 	sub	fp, #4
2b624     A7 2A 62 FC | 	wrlong	local07, fp
2b628     08 4E 85 F1 | 	sub	fp, #8
2b62c     A7 10 68 FC | 	wrlong	#8, fp
2b630     04 4E 05 F1 | 	add	fp, #4
2b634     A7 16 68 FC | 	wrlong	#11, fp
2b638     18 4E 85 F1 | 	sub	fp, #24
2b63c     A7 32 C2 FA | 	rdbyte	local11, fp
2b640     19 2B E2 F8 | 	getbyte	local07, local11, #0
2b644     02 2A 66 F0 | 	shl	local07, #2
2b648     A7 2A 42 FC | 	wrbyte	local07, fp
2b64c     0C 4E 85 F1 | 	sub	fp, #12
2b650                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2b650                 | ' 			continue;
2b650     80 FE 9F FD | 	jmp	#LR__4450
2b654                 | LR__4455
2b654     14 4E 05 F1 | 	add	fp, #20
2b658     A7 2A E2 FA | 	rdword	local07, fp
2b65c     14 4E 85 F1 | 	sub	fp, #20
2b660     80 2A 16 F2 | 	cmp	local07, #128 wc
2b664     6C 00 90 CD |  if_b	jmp	#LR__4457
2b668     10 4E 05 F1 | 	add	fp, #16
2b66c     A7 2A C2 FA | 	rdbyte	local07, fp
2b670     02 2A 46 F5 | 	or	local07, #2
2b674     A7 2A 42 FC | 	wrbyte	local07, fp
2b678     04 4E 05 F1 | 	add	fp, #4
2b67c     A7 12 E2 FA | 	rdword	arg01, fp
2b680     14 4E 85 F1 | 	sub	fp, #20
2b684     01 00 00 FF 
2b688     52 15 06 F6 | 	mov	arg02, ##850
2b68c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2b690     14 4E 05 F1 | 	add	fp, #20
2b694     A7 FA 51 FC | 	wrword	result1, fp
2b698     A7 2A E2 FA | 	rdword	local07, fp
2b69c     14 4E 85 F1 | 	sub	fp, #20
2b6a0     80 2A CE F7 | 	test	local07, #128 wz
2b6a4     2C 00 90 AD |  if_e	jmp	#LR__4456
2b6a8     14 4E 05 F1 | 	add	fp, #20
2b6ac     A7 20 E2 FA | 	rdword	local02, fp
2b6b0     7F 20 06 F5 | 	and	local02, #127
2b6b4     01 00 00 FF 
2b6b8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2b6bc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2b6c0     10 2B C2 FA | 	rdbyte	local07, local02
2b6c4     A7 2A 52 FC | 	wrword	local07, fp
2b6c8     14 4E 85 F1 | 	sub	fp, #20
2b6cc     01 00 00 FF 
2b6d0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2b6d4                 | LR__4456
2b6d4                 | LR__4457
2b6d4     14 4E 05 F1 | 	add	fp, #20
2b6d8     A7 2A E2 FA | 	rdword	local07, fp
2b6dc     14 4E 85 F1 | 	sub	fp, #20
2b6e0     00 2B 16 F2 | 	cmp	local07, #256 wc
2b6e4     88 00 90 CD |  if_b	jmp	#LR__4459
2b6e8     24 4E 05 F1 | 	add	fp, #36
2b6ec     A7 2A 02 FB | 	rdlong	local07, fp
2b6f0     01 2A 86 F1 | 	sub	local07, #1
2b6f4     04 4E 85 F1 | 	sub	fp, #4
2b6f8     A7 20 02 FB | 	rdlong	local02, fp
2b6fc     20 4E 85 F1 | 	sub	fp, #32
2b700     15 21 12 F2 | 	cmp	local02, local07 wc
2b704     2C 00 90 CD |  if_b	jmp	#LR__4458
2b708     10 4E 05 F1 | 	add	fp, #16
2b70c     A7 32 C2 FA | 	rdbyte	local11, fp
2b710     19 2B E2 F8 | 	getbyte	local07, local11, #0
2b714     03 2A 46 F5 | 	or	local07, #3
2b718     A7 2A 42 FC | 	wrbyte	local07, fp
2b71c     14 4E 05 F1 | 	add	fp, #20
2b720     A7 2A 02 FB | 	rdlong	local07, fp
2b724     04 4E 85 F1 | 	sub	fp, #4
2b728     A7 2A 62 FC | 	wrlong	local07, fp
2b72c     20 4E 85 F1 | 	sub	fp, #32
2b730                 | ' 				cf |=  0x01  |  0x02 ;
2b730                 | ' 				i = ni; continue;
2b730     A0 FD 9F FD | 	jmp	#LR__4450
2b734                 | LR__4458
2b734     04 4E 05 F1 | 	add	fp, #4
2b738     A7 2E 02 FB | 	rdlong	local09, fp
2b73c     1C 4E 05 F1 | 	add	fp, #28
2b740     A7 30 02 FB | 	rdlong	local10, fp
2b744     18 25 02 F6 | 	mov	local04, local10
2b748     01 24 06 F1 | 	add	local04, #1
2b74c     A7 24 62 FC | 	wrlong	local04, fp
2b750     20 2E 06 F1 | 	add	local09, #32
2b754     17 31 02 F1 | 	add	local10, local09
2b758     0C 4E 85 F1 | 	sub	fp, #12
2b75c     A7 22 E2 FA | 	rdword	local03, fp
2b760     14 4E 85 F1 | 	sub	fp, #20
2b764     08 22 46 F0 | 	shr	local03, #8
2b768     18 23 42 FC | 	wrbyte	local03, local10
2b76c     D4 00 90 FD | 	jmp	#LR__4465
2b770                 | LR__4459
2b770     14 4E 05 F1 | 	add	fp, #20
2b774     A7 2A EA FA | 	rdword	local07, fp wz
2b778     14 4E 85 F1 | 	sub	fp, #20
2b77c     20 00 90 AD |  if_e	jmp	#LR__4460
2b780     88 01 00 FF 
2b784     11 13 06 F6 | 	mov	arg01, ##@LR__5093
2b788     14 4E 05 F1 | 	add	fp, #20
2b78c     A7 14 E2 FA | 	rdword	arg02, fp
2b790     14 4E 85 F1 | 	sub	fp, #20
2b794     48 CB BF FD | 	call	#_fatfs_cc_strchr
2b798     00 FA 0D F2 | 	cmp	result1, #0 wz
2b79c     20 00 90 AD |  if_e	jmp	#LR__4461
2b7a0                 | LR__4460
2b7a0     14 4E 05 F1 | 	add	fp, #20
2b7a4     A7 BE 58 FC | 	wrword	#95, fp
2b7a8     04 4E 85 F1 | 	sub	fp, #4
2b7ac     A7 2A C2 FA | 	rdbyte	local07, fp
2b7b0     03 2A 46 F5 | 	or	local07, #3
2b7b4     A7 2A 42 FC | 	wrbyte	local07, fp
2b7b8     10 4E 85 F1 | 	sub	fp, #16
2b7bc     84 00 90 FD | 	jmp	#LR__4464
2b7c0                 | LR__4461
2b7c0     14 4E 05 F1 | 	add	fp, #20
2b7c4     A7 2A E2 FA | 	rdword	local07, fp
2b7c8     14 4E 85 F1 | 	sub	fp, #20
2b7cc     41 2A 16 F2 | 	cmp	local07, #65 wc
2b7d0     24 00 90 CD |  if_b	jmp	#LR__4462
2b7d4     14 4E 05 F1 | 	add	fp, #20
2b7d8     A7 1E E2 FA | 	rdword	local01, fp
2b7dc     14 4E 85 F1 | 	sub	fp, #20
2b7e0     5B 1E 16 F2 | 	cmp	local01, #91 wc
2b7e4     0C 4E 05 C1 |  if_b	add	fp, #12
2b7e8     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2b7ec     02 2A 46 C5 |  if_b	or	local07, #2
2b7f0     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2b7f4     0C 4E 85 C1 |  if_b	sub	fp, #12
2b7f8                 | LR__4462
2b7f8     14 4E 05 F1 | 	add	fp, #20
2b7fc     A7 2A E2 FA | 	rdword	local07, fp
2b800     14 4E 85 F1 | 	sub	fp, #20
2b804     61 2A 16 F2 | 	cmp	local07, #97 wc
2b808     38 00 90 CD |  if_b	jmp	#LR__4463
2b80c     14 4E 05 F1 | 	add	fp, #20
2b810     A7 1E E2 FA | 	rdword	local01, fp
2b814     14 4E 85 F1 | 	sub	fp, #20
2b818     7B 1E 16 F2 | 	cmp	local01, #123 wc
2b81c     24 00 90 3D |  if_ae	jmp	#LR__4463
2b820     0C 4E 05 F1 | 	add	fp, #12
2b824     A7 2A C2 FA | 	rdbyte	local07, fp
2b828     01 2A 46 F5 | 	or	local07, #1
2b82c     A7 2A 42 FC | 	wrbyte	local07, fp
2b830     08 4E 05 F1 | 	add	fp, #8
2b834     A7 2A E2 FA | 	rdword	local07, fp
2b838     20 2A 86 F1 | 	sub	local07, #32
2b83c     A7 2A 52 FC | 	wrword	local07, fp
2b840     14 4E 85 F1 | 	sub	fp, #20
2b844                 | LR__4463
2b844                 | LR__4464
2b844                 | LR__4465
2b844     04 4E 05 F1 | 	add	fp, #4
2b848     A7 32 02 FB | 	rdlong	local11, fp
2b84c     19 2F 02 F6 | 	mov	local09, local11
2b850     1C 4E 05 F1 | 	add	fp, #28
2b854     A7 20 02 FB | 	rdlong	local02, fp
2b858     10 25 02 F6 | 	mov	local04, local02
2b85c     01 24 06 F1 | 	add	local04, #1
2b860     A7 24 62 FC | 	wrlong	local04, fp
2b864     10 31 02 F6 | 	mov	local10, local02
2b868     20 2E 06 F1 | 	add	local09, #32
2b86c     17 31 02 F1 | 	add	local10, local09
2b870     0C 4E 85 F1 | 	sub	fp, #12
2b874     A7 22 E2 FA | 	rdword	local03, fp
2b878     14 4E 85 F1 | 	sub	fp, #20
2b87c     18 23 42 FC | 	wrbyte	local03, local10
2b880     50 FC 9F FD | 	jmp	#LR__4450
2b884                 | LR__4466
2b884     04 4E 05 F1 | 	add	fp, #4
2b888     A7 32 02 FB | 	rdlong	local11, fp
2b88c     04 4E 85 F1 | 	sub	fp, #4
2b890     20 32 06 F1 | 	add	local11, #32
2b894     19 2B C2 FA | 	rdbyte	local07, local11
2b898     E5 2A 0E F2 | 	cmp	local07, #229 wz
2b89c     04 4E 05 A1 |  if_e	add	fp, #4
2b8a0     A7 2A 02 AB |  if_e	rdlong	local07, fp
2b8a4     04 4E 85 A1 |  if_e	sub	fp, #4
2b8a8     20 2A 06 A1 |  if_e	add	local07, #32
2b8ac     15 0B 48 AC |  if_e	wrbyte	#5, local07
2b8b0     24 4E 05 F1 | 	add	fp, #36
2b8b4     A7 2A 02 FB | 	rdlong	local07, fp
2b8b8     24 4E 85 F1 | 	sub	fp, #36
2b8bc     08 2A 0E F2 | 	cmp	local07, #8 wz
2b8c0     0C 4E 05 A1 |  if_e	add	fp, #12
2b8c4     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2b8c8     02 2A 66 A0 |  if_e	shl	local07, #2
2b8cc     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2b8d0     0C 4E 85 A1 |  if_e	sub	fp, #12
2b8d4     0C 4E 05 F1 | 	add	fp, #12
2b8d8     A7 2A C2 FA | 	rdbyte	local07, fp
2b8dc     0C 4E 85 F1 | 	sub	fp, #12
2b8e0     0C 2A 06 F5 | 	and	local07, #12
2b8e4     0C 2A 0E F2 | 	cmp	local07, #12 wz
2b8e8     18 00 90 AD |  if_e	jmp	#LR__4467
2b8ec     0C 4E 05 F1 | 	add	fp, #12
2b8f0     A7 1E C2 FA | 	rdbyte	local01, fp
2b8f4     0C 4E 85 F1 | 	sub	fp, #12
2b8f8     03 1E 06 F5 | 	and	local01, #3
2b8fc     03 1E 0E F2 | 	cmp	local01, #3 wz
2b900     14 00 90 5D |  if_ne	jmp	#LR__4468
2b904                 | LR__4467
2b904     10 4E 05 F1 | 	add	fp, #16
2b908     A7 2A C2 FA | 	rdbyte	local07, fp
2b90c     02 2A 46 F5 | 	or	local07, #2
2b910     A7 2A 42 FC | 	wrbyte	local07, fp
2b914     10 4E 85 F1 | 	sub	fp, #16
2b918                 | LR__4468
2b918     10 4E 05 F1 | 	add	fp, #16
2b91c     A7 2A C2 FA | 	rdbyte	local07, fp
2b920     10 4E 85 F1 | 	sub	fp, #16
2b924     02 2A CE F7 | 	test	local07, #2 wz
2b928     48 00 90 5D |  if_ne	jmp	#LR__4469
2b92c     0C 4E 05 F1 | 	add	fp, #12
2b930     A7 2A C2 FA | 	rdbyte	local07, fp
2b934     0C 4E 85 F1 | 	sub	fp, #12
2b938     01 2A CE F7 | 	test	local07, #1 wz
2b93c     10 4E 05 51 |  if_ne	add	fp, #16
2b940     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b944     10 2A 46 55 |  if_ne	or	local07, #16
2b948     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b94c     10 4E 85 51 |  if_ne	sub	fp, #16
2b950     0C 4E 05 F1 | 	add	fp, #12
2b954     A7 2A C2 FA | 	rdbyte	local07, fp
2b958     0C 4E 85 F1 | 	sub	fp, #12
2b95c     04 2A CE F7 | 	test	local07, #4 wz
2b960     10 4E 05 51 |  if_ne	add	fp, #16
2b964     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b968     08 2A 46 55 |  if_ne	or	local07, #8
2b96c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b970     10 4E 85 51 |  if_ne	sub	fp, #16
2b974                 | LR__4469
2b974     04 4E 05 F1 | 	add	fp, #4
2b978     A7 2A 02 FB | 	rdlong	local07, fp
2b97c     0C 4E 05 F1 | 	add	fp, #12
2b980     A7 1E C2 FA | 	rdbyte	local01, fp
2b984     10 4E 85 F1 | 	sub	fp, #16
2b988     2B 2A 06 F1 | 	add	local07, #43
2b98c     15 1F 42 FC | 	wrbyte	local01, local07
2b990                 | ' 	}
2b990                 | ' 
2b990                 | ' 	dp->fn[ 11 ] = cf;
2b990                 | ' 
2b990                 | ' 	return FR_OK;
2b990     00 FA 05 F6 | 	mov	result1, #0
2b994                 | LR__4470
2b994     A7 F0 03 F6 | 	mov	ptra, fp
2b998     B2 00 A0 FD | 	call	#popregs_
2b99c                 | _fatfs_cc_create_name_ret
2b99c     2D 00 64 FD | 	ret
2b9a0                 | 
2b9a0                 | _fatfs_cc_follow_path
2b9a0     02 4A 05 F6 | 	mov	COUNT_, #2
2b9a4     A8 00 A0 FD | 	call	#pushregs_
2b9a8     18 F0 07 F1 | 	add	ptra, #24
2b9ac     04 4E 05 F1 | 	add	fp, #4
2b9b0     A7 12 62 FC | 	wrlong	arg01, fp
2b9b4     04 4E 05 F1 | 	add	fp, #4
2b9b8     A7 14 62 FC | 	wrlong	arg02, fp
2b9bc     04 4E 85 F1 | 	sub	fp, #4
2b9c0     A7 FA 01 FB | 	rdlong	result1, fp
2b9c4     FD 1E 02 FB | 	rdlong	local01, result1
2b9c8     10 4E 05 F1 | 	add	fp, #16
2b9cc     A7 1E 62 FC | 	wrlong	local01, fp
2b9d0     14 4E 85 F1 | 	sub	fp, #20
2b9d4     97 24 48 FB | 	callpa	#(@LR__4482-@LR__4480)>>2,fcache_load_ptr_
2b9d8                 | ' )
2b9d8                 | ' {
2b9d8                 | ' 	FRESULT res;
2b9d8                 | ' 	BYTE ns;
2b9d8                 | ' 	FATFS *fs = dp->obj.fs;
2b9d8                 | ' #line 3034 "ff.c"
2b9d8                 | ' 	{
2b9d8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2b9d8                 | LR__4480
2b9d8     08 4E 05 F1 | 	add	fp, #8
2b9dc     A7 1E 02 FB | 	rdlong	local01, fp
2b9e0     08 4E 85 F1 | 	sub	fp, #8
2b9e4     0F 1F C2 FA | 	rdbyte	local01, local01
2b9e8     2F 1E 0E F2 | 	cmp	local01, #47 wz
2b9ec     18 00 90 AD |  if_e	jmp	#LR__4481
2b9f0     08 4E 05 F1 | 	add	fp, #8
2b9f4     A7 1E 02 FB | 	rdlong	local01, fp
2b9f8     08 4E 85 F1 | 	sub	fp, #8
2b9fc     0F 1F C2 FA | 	rdbyte	local01, local01
2ba00     5C 1E 0E F2 | 	cmp	local01, #92 wz
2ba04     18 00 90 5D |  if_ne	jmp	#LR__4483
2ba08                 | LR__4481
2ba08     08 4E 05 F1 | 	add	fp, #8
2ba0c     A7 1E 02 FB | 	rdlong	local01, fp
2ba10     01 1E 06 F1 | 	add	local01, #1
2ba14     A7 1E 62 FC | 	wrlong	local01, fp
2ba18     08 4E 85 F1 | 	sub	fp, #8
2ba1c     B8 FF 9F FD | 	jmp	#LR__4480
2ba20                 | LR__4482
2ba20                 | LR__4483
2ba20     04 4E 05 F1 | 	add	fp, #4
2ba24     A7 1E 02 FB | 	rdlong	local01, fp
2ba28     08 1E 06 F1 | 	add	local01, #8
2ba2c     0F 01 68 FC | 	wrlong	#0, local01
2ba30     04 4E 05 F1 | 	add	fp, #4
2ba34     A7 1E 02 FB | 	rdlong	local01, fp
2ba38     08 4E 85 F1 | 	sub	fp, #8
2ba3c     0F 1F C2 FA | 	rdbyte	local01, local01
2ba40     20 1E 16 F2 | 	cmp	local01, #32 wc
2ba44     30 00 90 3D |  if_ae	jmp	#LR__4484
2ba48     04 4E 05 F1 | 	add	fp, #4
2ba4c     A7 1E 02 FB | 	rdlong	local01, fp
2ba50     2B 1E 06 F1 | 	add	local01, #43
2ba54     0F 01 49 FC | 	wrbyte	#128, local01
2ba58     A7 12 02 FB | 	rdlong	arg01, fp
2ba5c     04 4E 85 F1 | 	sub	fp, #4
2ba60     00 14 06 F6 | 	mov	arg02, #0
2ba64     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ba68     0C 4E 05 F1 | 	add	fp, #12
2ba6c     A7 FA 61 FC | 	wrlong	result1, fp
2ba70     0C 4E 85 F1 | 	sub	fp, #12
2ba74     1C 01 90 FD | 	jmp	#LR__4488
2ba78                 | LR__4484
2ba78                 | ' 		for (;;) {
2ba78                 | LR__4485
2ba78     04 4E 05 F1 | 	add	fp, #4
2ba7c     A7 12 02 FB | 	rdlong	arg01, fp
2ba80     04 4E 05 F1 | 	add	fp, #4
2ba84     A7 14 02 F6 | 	mov	arg02, fp
2ba88     08 4E 85 F1 | 	sub	fp, #8
2ba8c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ba90     0C 4E 05 F1 | 	add	fp, #12
2ba94     A7 FA 61 FC | 	wrlong	result1, fp
2ba98     00 FA 4D F2 | 	cmps	result1, #0 wz
2ba9c     0C 4E 85 F1 | 	sub	fp, #12
2baa0     F0 00 90 5D |  if_ne	jmp	#LR__4487
2baa4     04 4E 05 F1 | 	add	fp, #4
2baa8     A7 12 02 FB | 	rdlong	arg01, fp
2baac     04 4E 85 F1 | 	sub	fp, #4
2bab0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2bab4     0C 4E 05 F1 | 	add	fp, #12
2bab8     A7 FA 61 FC | 	wrlong	result1, fp
2babc     08 4E 85 F1 | 	sub	fp, #8
2bac0     A7 1E 02 FB | 	rdlong	local01, fp
2bac4     2B 1E 06 F1 | 	add	local01, #43
2bac8     0F 1F C2 FA | 	rdbyte	local01, local01
2bacc     0C 4E 05 F1 | 	add	fp, #12
2bad0     A7 1E 42 FC | 	wrbyte	local01, fp
2bad4     04 4E 85 F1 | 	sub	fp, #4
2bad8     A7 1E 0A FB | 	rdlong	local01, fp wz
2badc     0C 4E 85 F1 | 	sub	fp, #12
2bae0     34 00 90 AD |  if_e	jmp	#LR__4486
2bae4     0C 4E 05 F1 | 	add	fp, #12
2bae8     A7 1E 02 FB | 	rdlong	local01, fp
2baec     0C 4E 85 F1 | 	sub	fp, #12
2baf0     04 1E 0E F2 | 	cmp	local01, #4 wz
2baf4     9C 00 90 5D |  if_ne	jmp	#LR__4487
2baf8     10 4E 05 F1 | 	add	fp, #16
2bafc     A7 1E C2 FA | 	rdbyte	local01, fp
2bb00     10 4E 85 F1 | 	sub	fp, #16
2bb04     04 1E CE F7 | 	test	local01, #4 wz
2bb08     0C 4E 05 A1 |  if_e	add	fp, #12
2bb0c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2bb10     0C 4E 85 A1 |  if_e	sub	fp, #12
2bb14                 | ' 					}
2bb14                 | ' 				}
2bb14                 | ' 				break;
2bb14     7C 00 90 FD | 	jmp	#LR__4487
2bb18                 | LR__4486
2bb18     10 4E 05 F1 | 	add	fp, #16
2bb1c     A7 1E C2 FA | 	rdbyte	local01, fp
2bb20     10 4E 85 F1 | 	sub	fp, #16
2bb24     04 1E CE F7 | 	test	local01, #4 wz
2bb28     68 00 90 5D |  if_ne	jmp	#LR__4487
2bb2c     04 4E 05 F1 | 	add	fp, #4
2bb30     A7 1E 02 FB | 	rdlong	local01, fp
2bb34     04 4E 85 F1 | 	sub	fp, #4
2bb38     06 1E 06 F1 | 	add	local01, #6
2bb3c     0F 1F C2 FA | 	rdbyte	local01, local01
2bb40     10 1E CE F7 | 	test	local01, #16 wz
2bb44     0C 4E 05 A1 |  if_e	add	fp, #12
2bb48     A7 0A 68 AC |  if_e	wrlong	#5, fp
2bb4c     0C 4E 85 A1 |  if_e	sub	fp, #12
2bb50                 | ' 				res = FR_NO_PATH; break;
2bb50     40 00 90 AD |  if_e	jmp	#LR__4487
2bb54     04 4E 05 F1 | 	add	fp, #4
2bb58     A7 20 02 FB | 	rdlong	local02, fp
2bb5c     10 1F 02 F6 | 	mov	local01, local02
2bb60     10 4E 05 F1 | 	add	fp, #16
2bb64     A7 14 02 FB | 	rdlong	arg02, fp
2bb68     0A 13 02 F6 | 	mov	arg01, arg02
2bb6c     34 14 06 F1 | 	add	arg02, #52
2bb70     14 4E 85 F1 | 	sub	fp, #20
2bb74     10 20 06 F1 | 	add	local02, #16
2bb78     10 21 02 FB | 	rdlong	local02, local02
2bb7c     FF 21 06 F5 | 	and	local02, #511
2bb80     10 15 02 F1 | 	add	arg02, local02
2bb84     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2bb88     08 1E 06 F1 | 	add	local01, #8
2bb8c     0F FB 61 FC | 	wrlong	result1, local01
2bb90     E4 FE 9F FD | 	jmp	#LR__4485
2bb94                 | LR__4487
2bb94                 | LR__4488
2bb94                 | ' 			}
2bb94                 | ' #line 3090 "ff.c"
2bb94                 | ' 			{
2bb94                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2bb94                 | ' 			}
2bb94                 | ' 		}
2bb94                 | ' 	}
2bb94                 | ' 
2bb94                 | ' 	return res;
2bb94     0C 4E 05 F1 | 	add	fp, #12
2bb98     A7 FA 01 FB | 	rdlong	result1, fp
2bb9c     0C 4E 85 F1 | 	sub	fp, #12
2bba0     A7 F0 03 F6 | 	mov	ptra, fp
2bba4     B2 00 A0 FD | 	call	#popregs_
2bba8                 | _fatfs_cc_follow_path_ret
2bba8     2D 00 64 FD | 	ret
2bbac                 | 
2bbac                 | _fatfs_cc_get_ldnumber
2bbac     01 00 66 F6 | 	neg	_var01, #1
2bbb0     09 03 0A FB | 	rdlong	_var02, arg01 wz
2bbb4     01 05 02 F6 | 	mov	_var03, _var02
2bbb8     01 FA 65 A6 |  if_e	neg	result1, #1
2bbbc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2bbc0     97 10 48 FB | 	callpa	#(@LR__4491-@LR__4490)>>2,fcache_load_ptr_
2bbc4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2bbc4                 | LR__4490
2bbc4     02 07 C2 FA | 	rdbyte	_var04, _var03
2bbc8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2bbcc     20 FA 15 F2 | 	cmp	result1, #32 wc
2bbd0     01 04 06 F1 | 	add	_var03, #1
2bbd4     03 09 02 36 |  if_ae	mov	_var05, _var04
2bbd8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2bbdc     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2bbe0     E0 FF 9F 1D |  if_a	jmp	#LR__4490
2bbe4                 | LR__4491
2bbe4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2bbe8     3A 06 0E F2 | 	cmp	_var04, #58 wz
2bbec     40 00 90 5D |  if_ne	jmp	#LR__4493
2bbf0     01 0A 06 F6 | 	mov	_var06, #1
2bbf4     01 09 C2 FA | 	rdbyte	_var05, _var02
2bbf8     30 08 16 F2 | 	cmp	_var05, #48 wc
2bbfc     1C 00 90 CD |  if_b	jmp	#LR__4492
2bc00     01 09 C2 FA | 	rdbyte	_var05, _var02
2bc04     3A 08 16 F2 | 	cmp	_var05, #58 wc
2bc08     01 0D 02 C6 |  if_b	mov	_var07, _var02
2bc0c     02 0C 06 C1 |  if_b	add	_var07, #2
2bc10     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2bc14     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2bc18     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2bc1c                 | LR__4492
2bc1c     01 0A 56 F2 | 	cmps	_var06, #1 wc
2bc20     05 01 02 C6 |  if_b	mov	_var01, _var06
2bc24     09 05 62 CC |  if_b	wrlong	_var03, arg01
2bc28                 | ' 			vol = i;
2bc28                 | ' 			*path = tt;
2bc28                 | ' 		}
2bc28                 | ' 		return vol;
2bc28     00 FB 01 F6 | 	mov	result1, _var01
2bc2c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2bc30                 | LR__4493
2bc30                 | ' 	}
2bc30                 | ' #line 3170 "ff.c"
2bc30                 | ' 	vol = 0;
2bc30                 | ' 
2bc30                 | ' 	return vol;
2bc30     00 FA 05 F6 | 	mov	result1, #0
2bc34                 | _fatfs_cc_get_ldnumber_ret
2bc34     2D 00 64 FD | 	ret
2bc38                 | 
2bc38                 | _fatfs_cc_check_fs
2bc38     04 4A 05 F6 | 	mov	COUNT_, #4
2bc3c     A8 00 A0 FD | 	call	#pushregs_
2bc40     09 1F 02 F6 | 	mov	local01, arg01
2bc44     03 1E 06 F1 | 	add	local01, #3
2bc48     0F 01 48 FC | 	wrbyte	#0, local01
2bc4c     2D 1E 06 F1 | 	add	local01, #45
2bc50     FF FF FF FF 
2bc54     0F FF 6B FC | 	wrlong	##-1, local01
2bc58     30 1E 86 F1 | 	sub	local01, #48
2bc5c     0F 13 02 F6 | 	mov	arg01, local01
2bc60     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2bc64     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc68     04 FA 05 56 |  if_ne	mov	result1, #4
2bc6c     94 01 90 5D |  if_ne	jmp	#LR__4504
2bc70     34 1E 06 F1 | 	add	local01, #52
2bc74     0F 13 02 F6 | 	mov	arg01, local01
2bc78     FE 13 06 F1 | 	add	arg01, #510
2bc7c                 | ' {
2bc7c                 | ' 
2bc7c                 | ' 	return *((WORD*)ptr);
2bc7c     09 21 E2 FA | 	rdword	local02, arg01
2bc80     0F 23 C2 FA | 	rdbyte	local03, local01
2bc84     34 1E 86 F1 | 	sub	local01, #52
2bc88     11 25 E2 F8 | 	getbyte	local04, local03, #0
2bc8c     EB 24 0E F2 | 	cmp	local04, #235 wz
2bc90     11 17 02 56 |  if_ne	mov	arg03, local03
2bc94     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2bc98     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2bc9c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2bca0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2bca4     44 01 90 5D |  if_ne	jmp	#LR__4503
2bca8     10 25 32 F9 | 	getword	local04, local02, #0
2bcac     55 00 00 FF 
2bcb0     55 24 0E F2 | 	cmp	local04, ##43605 wz
2bcb4     2C 00 90 5D |  if_ne	jmp	#LR__4500
2bcb8     34 1E 06 F1 | 	add	local01, #52
2bcbc     0F 13 02 F6 | 	mov	arg01, local01
2bcc0     34 1E 86 F1 | 	sub	local01, #52
2bcc4     52 12 06 F1 | 	add	arg01, #82
2bcc8     88 01 00 FF 
2bccc     18 15 06 F6 | 	mov	arg02, ##@LR__5094
2bcd0     08 16 06 F6 | 	mov	arg03, #8
2bcd4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2bcd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bcdc                 | ' 			return 0;
2bcdc     00 FA 05 A6 |  if_e	mov	result1, #0
2bce0     20 01 90 AD |  if_e	jmp	#LR__4504
2bce4                 | LR__4500
2bce4     34 1E 06 F1 | 	add	local01, #52
2bce8     0F 13 02 F6 | 	mov	arg01, local01
2bcec     0B 12 06 F1 | 	add	arg01, #11
2bcf0                 | ' {
2bcf0                 | ' 
2bcf0                 | ' 	return *((WORD*)ptr);
2bcf0     09 FB E1 FA | 	rdword	result1, arg01
2bcf4     0D 1E 06 F1 | 	add	local01, #13
2bcf8     0F 23 C2 FA | 	rdbyte	local03, local01
2bcfc     41 1E 86 F1 | 	sub	local01, #65
2bd00     FD 24 32 F9 | 	getword	local04, result1, #0
2bd04     FD 14 32 F9 | 	getword	arg02, result1, #0
2bd08     01 14 86 F1 | 	sub	arg02, #1
2bd0c     0A 25 CA F7 | 	test	local04, arg02 wz
2bd10     D8 00 90 5D |  if_ne	jmp	#LR__4502
2bd14     FD 14 32 F9 | 	getword	arg02, result1, #0
2bd18     01 00 00 FF 
2bd1c     00 14 16 F2 | 	cmp	arg02, ##512 wc
2bd20     C8 00 90 CD |  if_b	jmp	#LR__4502
2bd24     FD 14 32 F9 | 	getword	arg02, result1, #0
2bd28     01 00 00 FF 
2bd2c     01 14 16 F2 | 	cmp	arg02, ##513 wc
2bd30     B8 00 90 3D |  if_ae	jmp	#LR__4502
2bd34     11 13 02 F6 | 	mov	arg01, local03
2bd38     07 12 4E F7 | 	zerox	arg01, #7 wz
2bd3c     AC 00 90 AD |  if_e	jmp	#LR__4502
2bd40     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2bd44     11 23 E2 F8 | 	getbyte	local03, local03, #0
2bd48     01 22 86 F1 | 	sub	local03, #1
2bd4c     11 13 CA F7 | 	test	arg01, local03 wz
2bd50     98 00 90 5D |  if_ne	jmp	#LR__4502
2bd54     34 1E 06 F1 | 	add	local01, #52
2bd58     0F 13 02 F6 | 	mov	arg01, local01
2bd5c     34 1E 86 F1 | 	sub	local01, #52
2bd60     0E 12 06 F1 | 	add	arg01, #14
2bd64                 | ' {
2bd64                 | ' 
2bd64                 | ' 	return *((WORD*)ptr);
2bd64     09 FB E9 FA | 	rdword	result1, arg01 wz
2bd68     80 00 90 AD |  if_e	jmp	#LR__4502
2bd6c     44 1E 06 F1 | 	add	local01, #68
2bd70     0F 13 C2 FA | 	rdbyte	arg01, local01
2bd74     44 1E 86 F1 | 	sub	local01, #68
2bd78     01 12 86 F1 | 	sub	arg01, #1
2bd7c     02 12 16 F2 | 	cmp	arg01, #2 wc
2bd80     68 00 90 3D |  if_ae	jmp	#LR__4502
2bd84     34 1E 06 F1 | 	add	local01, #52
2bd88     0F 13 02 F6 | 	mov	arg01, local01
2bd8c     34 1E 86 F1 | 	sub	local01, #52
2bd90     11 12 06 F1 | 	add	arg01, #17
2bd94                 | ' {
2bd94                 | ' 
2bd94                 | ' 	return *((WORD*)ptr);
2bd94     09 FB E9 FA | 	rdword	result1, arg01 wz
2bd98     50 00 90 AD |  if_e	jmp	#LR__4502
2bd9c     34 1E 06 F1 | 	add	local01, #52
2bda0     0F 13 02 F6 | 	mov	arg01, local01
2bda4     34 1E 86 F1 | 	sub	local01, #52
2bda8     13 12 06 F1 | 	add	arg01, #19
2bdac                 | ' {
2bdac                 | ' 
2bdac                 | ' 	return *((WORD*)ptr);
2bdac     09 FB E1 FA | 	rdword	result1, arg01
2bdb0     FD 22 32 F9 | 	getword	local03, result1, #0
2bdb4     80 22 16 F2 | 	cmp	local03, #128 wc
2bdb8     20 00 90 3D |  if_ae	jmp	#LR__4501
2bdbc     34 1E 06 F1 | 	add	local01, #52
2bdc0     0F 13 02 F6 | 	mov	arg01, local01
2bdc4     34 1E 86 F1 | 	sub	local01, #52
2bdc8     20 12 06 F1 | 	add	arg01, #32
2bdcc                 | ' {
2bdcc                 | ' 
2bdcc                 | ' 	return *((DWORD*)ptr);
2bdcc     09 FB 01 FB | 	rdlong	result1, arg01
2bdd0     80 00 00 FF 
2bdd4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2bdd8     10 00 90 CD |  if_b	jmp	#LR__4502
2bddc                 | LR__4501
2bddc     4A 1E 06 F1 | 	add	local01, #74
2bde0                 | ' {
2bde0                 | ' 
2bde0                 | ' 	return *((WORD*)ptr);
2bde0     0F FB E9 FA | 	rdword	result1, local01 wz
2bde4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2bde4                 | ' 			&& ld_word(fs->win +  14 ) != 0
2bde4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2bde4                 | ' 			&& ld_word(fs->win +  17 ) != 0
2bde4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2bde4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2bde4                 | ' 				return 0;
2bde4     00 FA 05 56 |  if_ne	mov	result1, #0
2bde8     18 00 90 5D |  if_ne	jmp	#LR__4504
2bdec                 | LR__4502
2bdec                 | LR__4503
2bdec                 | ' 		}
2bdec                 | ' 	}
2bdec                 | ' 	return sign == 0xAA55 ? 2 : 3;
2bdec     10 23 32 F9 | 	getword	local03, local02, #0
2bdf0     55 00 00 FF 
2bdf4     55 22 0E F2 | 	cmp	local03, ##43605 wz
2bdf8     02 24 06 A6 |  if_e	mov	local04, #2
2bdfc     03 24 06 56 |  if_ne	mov	local04, #3
2be00     12 FB 01 F6 | 	mov	result1, local04
2be04                 | LR__4504
2be04     A7 F0 03 F6 | 	mov	ptra, fp
2be08     B2 00 A0 FD | 	call	#popregs_
2be0c                 | _fatfs_cc_check_fs_ret
2be0c     2D 00 64 FD | 	ret
2be10                 | 
2be10                 | _fatfs_cc_find_volume
2be10     05 4A 05 F6 | 	mov	COUNT_, #5
2be14     A8 00 A0 FD | 	call	#pushregs_
2be18     24 F0 07 F1 | 	add	ptra, #36
2be1c     09 1F 02 F6 | 	mov	local01, arg01
2be20     0A 21 02 F6 | 	mov	local02, arg02
2be24     0F 13 02 F6 | 	mov	arg01, local01
2be28     00 14 06 F6 | 	mov	arg02, #0
2be2c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2be30     02 FA 0D F2 | 	cmp	result1, #2 wz
2be34     0C 00 90 AD |  if_e	jmp	#LR__4510
2be38     03 FA 15 F2 | 	cmp	result1, #3 wc
2be3c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2be40     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4518
2be44                 | LR__4510
2be44                 | ' 	for (i = 0; i < 4; i++) {
2be44     00 22 06 F6 | 	mov	local03, #0
2be48     97 26 48 FB | 	callpa	#(@LR__4512-@LR__4511)>>2,fcache_load_ptr_
2be4c                 | LR__4511
2be4c     04 22 16 F2 | 	cmp	local03, #4 wc
2be50     44 00 90 3D |  if_ae	jmp	#LR__4513
2be54     11 25 02 F6 | 	mov	local04, local03
2be58     02 24 66 F0 | 	shl	local04, #2
2be5c     14 4E 05 F1 | 	add	fp, #20
2be60     A7 24 02 F1 | 	add	local04, fp
2be64     34 1E 06 F1 | 	add	local01, #52
2be68     0F 13 02 F6 | 	mov	arg01, local01
2be6c     34 1E 86 F1 | 	sub	local01, #52
2be70     BE 13 06 F1 | 	add	arg01, #446
2be74     11 15 02 F6 | 	mov	arg02, local03
2be78     04 14 66 F0 | 	shl	arg02, #4
2be7c     0A 13 02 F1 | 	add	arg01, arg02
2be80     08 12 06 F1 | 	add	arg01, #8
2be84                 | ' {
2be84                 | ' 
2be84                 | ' 	return *((DWORD*)ptr);
2be84     09 FB 01 FB | 	rdlong	result1, arg01
2be88     14 4E 85 F1 | 	sub	fp, #20
2be8c     12 FB 61 FC | 	wrlong	result1, local04
2be90     01 22 06 F1 | 	add	local03, #1
2be94     B4 FF 9F FD | 	jmp	#LR__4511
2be98                 | LR__4512
2be98                 | LR__4513
2be98     00 20 0E F2 | 	cmp	local02, #0 wz
2be9c     10 25 02 56 |  if_ne	mov	local04, local02
2bea0     01 24 86 51 |  if_ne	sub	local04, #1
2bea4     00 24 06 A6 |  if_e	mov	local04, #0
2bea8     12 23 02 F6 | 	mov	local03, local04
2beac                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2beac                 | ' 	}
2beac                 | ' 	i = part ? part - 1 : 0;
2beac                 | ' 	do {
2beac                 | LR__4514
2beac     11 25 02 F6 | 	mov	local04, local03
2beb0     02 24 66 F0 | 	shl	local04, #2
2beb4     14 4E 05 F1 | 	add	fp, #20
2beb8     A7 24 02 F1 | 	add	local04, fp
2bebc     12 25 0A FB | 	rdlong	local04, local04 wz
2bec0     14 4E 85 F1 | 	sub	fp, #20
2bec4     28 00 90 AD |  if_e	jmp	#LR__4515
2bec8     11 25 02 F6 | 	mov	local04, local03
2becc     02 24 66 F0 | 	shl	local04, #2
2bed0     14 4E 05 F1 | 	add	fp, #20
2bed4     A7 24 02 F1 | 	add	local04, fp
2bed8     12 15 02 FB | 	rdlong	arg02, local04
2bedc     0F 13 02 F6 | 	mov	arg01, local01
2bee0     14 4E 85 F1 | 	sub	fp, #20
2bee4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2bee8     FD 24 02 F6 | 	mov	local04, result1
2beec     04 00 90 FD | 	jmp	#LR__4516
2bef0                 | LR__4515
2bef0     03 24 06 F6 | 	mov	local04, #3
2bef4                 | LR__4516
2bef4     12 27 02 F6 | 	mov	local05, local04
2bef8     00 20 0E F2 | 	cmp	local02, #0 wz
2befc     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2bf00     0C 00 90 8D |  if_c_and_z	jmp	#LR__4517
2bf04     01 22 06 A1 |  if_e	add	local03, #1
2bf08     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2bf0c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4514
2bf10                 | LR__4517
2bf10                 | ' 	return fmt;
2bf10     13 FB 01 F6 | 	mov	result1, local05
2bf14                 | LR__4518
2bf14     A7 F0 03 F6 | 	mov	ptra, fp
2bf18     B2 00 A0 FD | 	call	#popregs_
2bf1c                 | _fatfs_cc_find_volume_ret
2bf1c     2D 00 64 FD | 	ret
2bf20                 | 
2bf20                 | _fatfs_cc_mount_volume
2bf20     0B 4A 05 F6 | 	mov	COUNT_, #11
2bf24     A8 00 A0 FD | 	call	#pushregs_
2bf28     0A 1F 02 F6 | 	mov	local01, arg02
2bf2c     0B 21 02 F6 | 	mov	local02, arg03
2bf30     0F 01 68 FC | 	wrlong	#0, local01
2bf34     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2bf38     FD 22 02 F6 | 	mov	local03, result1
2bf3c     00 22 56 F2 | 	cmps	local03, #0 wc
2bf40     0B FA 05 C6 |  if_b	mov	result1, #11
2bf44     3C 05 90 CD |  if_b	jmp	#LR__4530
2bf48     11 17 02 F6 | 	mov	arg03, local03
2bf4c     02 16 66 F0 | 	shl	arg03, #2
2bf50     F2 16 02 F1 | 	add	arg03, objptr
2bf54     0B 25 0A FB | 	rdlong	local04, arg03 wz
2bf58     0C FA 05 A6 |  if_e	mov	result1, #12
2bf5c     24 05 90 AD |  if_e	jmp	#LR__4530
2bf60     0F 25 62 FC | 	wrlong	local04, local01
2bf64     10 21 E2 F8 | 	getbyte	local02, local02, #0
2bf68     FE 20 06 F5 | 	and	local02, #254
2bf6c     12 17 CA FA | 	rdbyte	arg03, local04 wz
2bf70     4C 00 90 AD |  if_e	jmp	#LR__4521
2bf74     01 24 06 F1 | 	add	local04, #1
2bf78     12 13 CA FA | 	rdbyte	arg01, local04 wz
2bf7c     01 24 86 F1 | 	sub	local04, #1
2bf80     01 FA 05 56 |  if_ne	mov	result1, #1
2bf84                 | ' 
2bf84                 | ' 	return Stat;
2bf84     01 00 00 AF 
2bf88     20 E4 05 A1 |  if_e	add	objptr, ##544
2bf8c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2bf90     01 00 00 AF 
2bf94     20 E4 85 A1 |  if_e	sub	objptr, ##544
2bf98     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2bf9c     01 16 CE F7 | 	test	arg03, #1 wz
2bfa0     1C 00 90 5D |  if_ne	jmp	#LR__4520
2bfa4     00 20 0E F2 | 	cmp	local02, #0 wz
2bfa8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2bfac     04 FA CD 57 |  if_ne	test	result1, #4 wz
2bfb0                 | ' 				return FR_WRITE_PROTECTED;
2bfb0     0A FA 05 56 |  if_ne	mov	result1, #10
2bfb4     CC 04 90 5D |  if_ne	jmp	#LR__4530
2bfb8                 | ' 			}
2bfb8                 | ' 			return FR_OK;
2bfb8     00 FA 05 F6 | 	mov	result1, #0
2bfbc     C4 04 90 FD | 	jmp	#LR__4530
2bfc0                 | LR__4520
2bfc0                 | LR__4521
2bfc0     12 01 48 FC | 	wrbyte	#0, local04
2bfc4     01 24 06 F1 | 	add	local04, #1
2bfc8     12 23 42 FC | 	wrbyte	local03, local04
2bfcc     12 13 C2 FA | 	rdbyte	arg01, local04
2bfd0     01 24 86 F1 | 	sub	local04, #1
2bfd4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2bfd8     FD 16 02 F6 | 	mov	arg03, result1
2bfdc     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2bfe0     01 26 CE F7 | 	test	local05, #1 wz
2bfe4                 | ' 		return FR_NOT_READY;
2bfe4     03 FA 05 56 |  if_ne	mov	result1, #3
2bfe8     98 04 90 5D |  if_ne	jmp	#LR__4530
2bfec     00 20 0E F2 | 	cmp	local02, #0 wz
2bff0     0B 27 02 56 |  if_ne	mov	local05, arg03
2bff4     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2bff8     04 26 CE 57 |  if_ne	test	local05, #4 wz
2bffc                 | ' 		return FR_WRITE_PROTECTED;
2bffc     0A FA 05 56 |  if_ne	mov	result1, #10
2c000     80 04 90 5D |  if_ne	jmp	#LR__4530
2c004     12 13 02 F6 | 	mov	arg01, local04
2c008     00 14 06 F6 | 	mov	arg02, #0
2c00c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2c010     FD 12 02 F6 | 	mov	arg01, result1
2c014     04 12 0E F2 | 	cmp	arg01, #4 wz
2c018     01 FA 05 A6 |  if_e	mov	result1, #1
2c01c     64 04 90 AD |  if_e	jmp	#LR__4530
2c020     02 12 16 F2 | 	cmp	arg01, #2 wc
2c024     0D FA 05 36 |  if_ae	mov	result1, #13
2c028     58 04 90 3D |  if_ae	jmp	#LR__4530
2c02c     30 24 06 F1 | 	add	local04, #48
2c030     12 29 02 FB | 	rdlong	local06, local04
2c034     04 24 06 F1 | 	add	local04, #4
2c038     12 13 02 F6 | 	mov	arg01, local04
2c03c     34 24 86 F1 | 	sub	local04, #52
2c040     0B 12 06 F1 | 	add	arg01, #11
2c044                 | ' {
2c044                 | ' 
2c044                 | ' 	return *((WORD*)ptr);
2c044     09 FB E1 FA | 	rdword	result1, arg01
2c048     01 00 00 FF 
2c04c     00 FA 0D F2 | 	cmp	result1, ##512 wz
2c050     0D FA 05 56 |  if_ne	mov	result1, #13
2c054     2C 04 90 5D |  if_ne	jmp	#LR__4530
2c058     34 24 06 F1 | 	add	local04, #52
2c05c     12 13 02 F6 | 	mov	arg01, local04
2c060     34 24 86 F1 | 	sub	local04, #52
2c064     16 12 06 F1 | 	add	arg01, #22
2c068                 | ' {
2c068                 | ' 
2c068                 | ' 	return *((WORD*)ptr);
2c068     09 FB E1 FA | 	rdword	result1, arg01
2c06c     FD 2A 0A F6 | 	mov	local07, result1 wz
2c070     18 00 90 5D |  if_ne	jmp	#LR__4522
2c074     34 24 06 F1 | 	add	local04, #52
2c078     12 13 02 F6 | 	mov	arg01, local04
2c07c     34 24 86 F1 | 	sub	local04, #52
2c080     24 12 06 F1 | 	add	arg01, #36
2c084                 | ' {
2c084                 | ' 
2c084                 | ' 	return *((DWORD*)ptr);
2c084     09 FB 01 FB | 	rdlong	result1, arg01
2c088     FD 2A 02 F6 | 	mov	local07, result1
2c08c                 | LR__4522
2c08c     1C 24 06 F1 | 	add	local04, #28
2c090     12 2B 62 FC | 	wrlong	local07, local04
2c094     28 24 06 F1 | 	add	local04, #40
2c098     12 27 C2 FA | 	rdbyte	local05, local04
2c09c     42 24 86 F1 | 	sub	local04, #66
2c0a0     12 27 42 FC | 	wrbyte	local05, local04
2c0a4     12 27 C2 FA | 	rdbyte	local05, local04
2c0a8     02 24 86 F1 | 	sub	local04, #2
2c0ac     01 26 0E F2 | 	cmp	local05, #1 wz
2c0b0     02 24 06 51 |  if_ne	add	local04, #2
2c0b4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2c0b8     02 24 86 51 |  if_ne	sub	local04, #2
2c0bc     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2c0c0     0D FA 05 56 |  if_ne	mov	result1, #13
2c0c4     BC 03 90 5D |  if_ne	jmp	#LR__4530
2c0c8     02 24 06 F1 | 	add	local04, #2
2c0cc     12 27 C2 FA | 	rdbyte	local05, local04
2c0d0     13 2B 02 FD | 	qmul	local07, local05
2c0d4     3F 24 06 F1 | 	add	local04, #63
2c0d8     12 27 C2 FA | 	rdbyte	local05, local04
2c0dc     37 24 86 F1 | 	sub	local04, #55
2c0e0     12 27 52 FC | 	wrword	local05, local04
2c0e4     12 27 EA FA | 	rdword	local05, local04 wz
2c0e8     0A 24 86 F1 | 	sub	local04, #10
2c0ec     18 2A 62 FD | 	getqx	local07
2c0f0     20 00 90 AD |  if_e	jmp	#LR__4523
2c0f4     0A 24 06 F1 | 	add	local04, #10
2c0f8     12 27 E2 FA | 	rdword	local05, local04
2c0fc     13 23 32 F9 | 	getword	local03, local05, #0
2c100     0A 24 86 F1 | 	sub	local04, #10
2c104     13 27 32 F9 | 	getword	local05, local05, #0
2c108     01 26 86 F1 | 	sub	local05, #1
2c10c     13 23 CA F7 | 	test	local03, local05 wz
2c110     08 00 90 AD |  if_e	jmp	#LR__4524
2c114                 | LR__4523
2c114     0D FA 05 F6 | 	mov	result1, #13
2c118     68 03 90 FD | 	jmp	#LR__4530
2c11c                 | LR__4524
2c11c     34 24 06 F1 | 	add	local04, #52
2c120     12 13 02 F6 | 	mov	arg01, local04
2c124     11 12 06 F1 | 	add	arg01, #17
2c128                 | ' {
2c128                 | ' 
2c128                 | ' 	return *((WORD*)ptr);
2c128     09 FB E1 FA | 	rdword	result1, arg01
2c12c     2C 24 86 F1 | 	sub	local04, #44
2c130     12 FB 51 FC | 	wrword	result1, local04
2c134     12 27 E2 FA | 	rdword	local05, local04
2c138     08 24 86 F1 | 	sub	local04, #8
2c13c     13 13 52 F6 | 	abs	arg01, local05 wc
2c140     09 13 42 F8 | 	getnib	arg01, arg01, #0
2c144     09 13 8A F6 | 	negc	arg01, arg01 wz
2c148     0D FA 05 56 |  if_ne	mov	result1, #13
2c14c     34 03 90 5D |  if_ne	jmp	#LR__4530
2c150     34 24 06 F1 | 	add	local04, #52
2c154     12 13 02 F6 | 	mov	arg01, local04
2c158     34 24 86 F1 | 	sub	local04, #52
2c15c     13 12 06 F1 | 	add	arg01, #19
2c160                 | ' {
2c160                 | ' 
2c160                 | ' 	return *((WORD*)ptr);
2c160     09 FB E1 FA | 	rdword	result1, arg01
2c164     FD 2C 0A F6 | 	mov	local08, result1 wz
2c168     34 24 06 A1 |  if_e	add	local04, #52
2c16c     12 13 02 A6 |  if_e	mov	arg01, local04
2c170     34 24 86 A1 |  if_e	sub	local04, #52
2c174     20 12 06 A1 |  if_e	add	arg01, #32
2c178                 | ' {
2c178                 | ' 
2c178                 | ' 	return *((DWORD*)ptr);
2c178     09 2D 02 AB |  if_e	rdlong	local08, arg01
2c17c     34 24 06 F1 | 	add	local04, #52
2c180     12 13 02 F6 | 	mov	arg01, local04
2c184     34 24 86 F1 | 	sub	local04, #52
2c188     0E 12 06 F1 | 	add	arg01, #14
2c18c                 | ' {
2c18c                 | ' 
2c18c                 | ' 	return *((WORD*)ptr);
2c18c     09 FB E1 FA | 	rdword	result1, arg01
2c190     FD 12 02 F6 | 	mov	arg01, result1
2c194     09 27 02 F6 | 	mov	local05, arg01
2c198     0F 26 4E F7 | 	zerox	local05, #15 wz
2c19c     0D FA 05 A6 |  if_e	mov	result1, #13
2c1a0     E0 02 90 AD |  if_e	jmp	#LR__4530
2c1a4     09 2F 32 F9 | 	getword	local09, arg01, #0
2c1a8     15 2F 02 F1 | 	add	local09, local07
2c1ac     08 24 06 F1 | 	add	local04, #8
2c1b0     12 27 E2 FA | 	rdword	local05, local04
2c1b4     08 24 86 F1 | 	sub	local04, #8
2c1b8     13 27 52 F6 | 	abs	local05, local05 wc
2c1bc     04 26 46 F0 | 	shr	local05, #4
2c1c0     13 2F 82 F3 | 	sumc	local09, local05
2c1c4     17 2D 12 F2 | 	cmp	local08, local09 wc
2c1c8     0D FA 05 C6 |  if_b	mov	result1, #13
2c1cc     B4 02 90 CD |  if_b	jmp	#LR__4530
2c1d0     17 2D 82 F1 | 	sub	local08, local09
2c1d4     0A 24 06 F1 | 	add	local04, #10
2c1d8     12 27 E2 FA | 	rdword	local05, local04
2c1dc     13 2D 12 FD | 	qdiv	local08, local05
2c1e0     0A 24 86 F1 | 	sub	local04, #10
2c1e4     18 26 62 FD | 	getqx	local05
2c1e8     00 26 0E F2 | 	cmp	local05, #0 wz
2c1ec     0D FA 05 A6 |  if_e	mov	result1, #13
2c1f0     90 02 90 AD |  if_e	jmp	#LR__4530
2c1f4     00 30 06 F6 | 	mov	local10, #0
2c1f8     FF FF 07 FF 
2c1fc     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2c200     03 30 06 C6 |  if_b	mov	local10, #3
2c204     7F 00 00 FF 
2c208     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2c20c     02 30 06 C6 |  if_b	mov	local10, #2
2c210     07 00 00 FF 
2c214     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2c218     01 30 06 C6 |  if_b	mov	local10, #1
2c21c     00 30 0E F2 | 	cmp	local10, #0 wz
2c220     0D FA 05 A6 |  if_e	mov	result1, #13
2c224     5C 02 90 AD |  if_e	jmp	#LR__4530
2c228     02 26 06 F1 | 	add	local05, #2
2c22c     18 24 06 F1 | 	add	local04, #24
2c230     12 27 62 FC | 	wrlong	local05, local04
2c234     08 24 06 F1 | 	add	local04, #8
2c238     12 29 62 FC | 	wrlong	local06, local04
2c23c     14 27 02 F6 | 	mov	local05, local06
2c240     09 13 32 F9 | 	getword	arg01, arg01, #0
2c244     09 27 02 F1 | 	add	local05, arg01
2c248     04 24 06 F1 | 	add	local04, #4
2c24c     12 27 62 FC | 	wrlong	local05, local04
2c250     14 27 02 F6 | 	mov	local05, local06
2c254     17 27 02 F1 | 	add	local05, local09
2c258     08 24 06 F1 | 	add	local04, #8
2c25c     12 27 62 FC | 	wrlong	local05, local04
2c260     2C 24 86 F1 | 	sub	local04, #44
2c264     03 30 0E F2 | 	cmp	local10, #3 wz
2c268     5C 00 90 5D |  if_ne	jmp	#LR__4525
2c26c     34 24 06 F1 | 	add	local04, #52
2c270     12 13 02 F6 | 	mov	arg01, local04
2c274     34 24 86 F1 | 	sub	local04, #52
2c278     2A 12 06 F1 | 	add	arg01, #42
2c27c                 | ' {
2c27c                 | ' 
2c27c                 | ' 	return *((WORD*)ptr);
2c27c     09 FB E9 FA | 	rdword	result1, arg01 wz
2c280     0D FA 05 56 |  if_ne	mov	result1, #13
2c284     FC 01 90 5D |  if_ne	jmp	#LR__4530
2c288     08 24 06 F1 | 	add	local04, #8
2c28c     12 27 EA FA | 	rdword	local05, local04 wz
2c290     08 24 86 F1 | 	sub	local04, #8
2c294     0D FA 05 56 |  if_ne	mov	result1, #13
2c298     E8 01 90 5D |  if_ne	jmp	#LR__4530
2c29c     34 24 06 F1 | 	add	local04, #52
2c2a0     12 13 02 F6 | 	mov	arg01, local04
2c2a4     2C 12 06 F1 | 	add	arg01, #44
2c2a8                 | ' {
2c2a8                 | ' 
2c2a8                 | ' 	return *((DWORD*)ptr);
2c2a8     09 FB 01 FB | 	rdlong	result1, arg01
2c2ac     0C 24 86 F1 | 	sub	local04, #12
2c2b0     12 FB 61 FC | 	wrlong	result1, local04
2c2b4     10 24 86 F1 | 	sub	local04, #16
2c2b8     12 33 02 FB | 	rdlong	local11, local04
2c2bc     18 24 86 F1 | 	sub	local04, #24
2c2c0     02 32 66 F0 | 	shl	local11, #2
2c2c4     6C 00 90 FD | 	jmp	#LR__4527
2c2c8                 | LR__4525
2c2c8     08 24 06 F1 | 	add	local04, #8
2c2cc     12 27 EA FA | 	rdword	local05, local04 wz
2c2d0     08 24 86 F1 | 	sub	local04, #8
2c2d4     0D FA 05 A6 |  if_e	mov	result1, #13
2c2d8     A8 01 90 AD |  if_e	jmp	#LR__4530
2c2dc     24 24 06 F1 | 	add	local04, #36
2c2e0     12 27 02 FB | 	rdlong	local05, local04
2c2e4     15 27 02 F1 | 	add	local05, local07
2c2e8     04 24 06 F1 | 	add	local04, #4
2c2ec     12 27 62 FC | 	wrlong	local05, local04
2c2f0     28 24 86 F1 | 	sub	local04, #40
2c2f4     02 30 0E F2 | 	cmp	local10, #2 wz
2c2f8     18 24 06 A1 |  if_e	add	local04, #24
2c2fc     12 27 02 AB |  if_e	rdlong	local05, local04
2c300     18 24 86 A1 |  if_e	sub	local04, #24
2c304     01 26 66 A0 |  if_e	shl	local05, #1
2c308     24 00 90 AD |  if_e	jmp	#LR__4526
2c30c     18 24 06 F1 | 	add	local04, #24
2c310     12 33 02 FB | 	rdlong	local11, local04
2c314     19 27 02 F6 | 	mov	local05, local11
2c318     01 26 66 F0 | 	shl	local05, #1
2c31c     19 27 02 F1 | 	add	local05, local11
2c320     01 26 46 F0 | 	shr	local05, #1
2c324     18 24 86 F1 | 	sub	local04, #24
2c328     01 32 06 F5 | 	and	local11, #1
2c32c     19 27 02 F1 | 	add	local05, local11
2c330                 | LR__4526
2c330     13 33 02 F6 | 	mov	local11, local05
2c334                 | LR__4527
2c334     FF 33 06 F1 | 	add	local11, #511
2c338     09 32 46 F0 | 	shr	local11, #9
2c33c     1C 24 06 F1 | 	add	local04, #28
2c340     12 17 02 FB | 	rdlong	arg03, local04
2c344     1C 24 86 F1 | 	sub	local04, #28
2c348     19 17 12 F2 | 	cmp	arg03, local11 wc
2c34c     0D FA 05 C6 |  if_b	mov	result1, #13
2c350     30 01 90 CD |  if_b	jmp	#LR__4530
2c354     14 24 06 F1 | 	add	local04, #20
2c358     FF FF FF FF 
2c35c     12 FF 6B FC | 	wrlong	##-1, local04
2c360     04 24 86 F1 | 	sub	local04, #4
2c364     FF FF FF FF 
2c368     12 FF 6B FC | 	wrlong	##-1, local04
2c36c     0C 24 86 F1 | 	sub	local04, #12
2c370     12 01 49 FC | 	wrbyte	#128, local04
2c374     04 24 86 F1 | 	sub	local04, #4
2c378     03 30 0E F2 | 	cmp	local10, #3 wz
2c37c     D0 00 90 5D |  if_ne	jmp	#LR__4529
2c380     34 24 06 F1 | 	add	local04, #52
2c384     12 13 02 F6 | 	mov	arg01, local04
2c388     34 24 86 F1 | 	sub	local04, #52
2c38c     30 12 06 F1 | 	add	arg01, #48
2c390                 | ' {
2c390                 | ' 
2c390                 | ' 	return *((WORD*)ptr);
2c390     09 FB E1 FA | 	rdword	result1, arg01
2c394     FD 26 32 F9 | 	getword	local05, result1, #0
2c398     01 26 0E F2 | 	cmp	local05, #1 wz
2c39c     B0 00 90 5D |  if_ne	jmp	#LR__4529
2c3a0     01 28 06 F1 | 	add	local06, #1
2c3a4     12 13 02 F6 | 	mov	arg01, local04
2c3a8     14 15 02 F6 | 	mov	arg02, local06
2c3ac     CC CD BF FD | 	call	#_fatfs_cc_move_window
2c3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3b4     98 00 90 5D |  if_ne	jmp	#LR__4529
2c3b8     04 24 06 F1 | 	add	local04, #4
2c3bc     12 01 48 FC | 	wrbyte	#0, local04
2c3c0     30 24 06 F1 | 	add	local04, #48
2c3c4     12 13 02 F6 | 	mov	arg01, local04
2c3c8     34 24 86 F1 | 	sub	local04, #52
2c3cc     FE 13 06 F1 | 	add	arg01, #510
2c3d0                 | ' {
2c3d0                 | ' 
2c3d0                 | ' 	return *((WORD*)ptr);
2c3d0     09 FB E1 FA | 	rdword	result1, arg01
2c3d4     FD 26 32 F9 | 	getword	local05, result1, #0
2c3d8     55 00 00 FF 
2c3dc     55 26 0E F2 | 	cmp	local05, ##43605 wz
2c3e0     34 24 06 A1 |  if_e	add	local04, #52
2c3e4     12 13 02 A6 |  if_e	mov	arg01, local04
2c3e8     34 24 86 A1 |  if_e	sub	local04, #52
2c3ec                 | ' {
2c3ec                 | ' 
2c3ec                 | ' 	return *((DWORD*)ptr);
2c3ec     09 FB 01 AB |  if_e	rdlong	result1, arg01
2c3f0     A9 B0 20 AF 
2c3f4     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2c3f8     54 00 90 5D |  if_ne	jmp	#LR__4528
2c3fc     34 24 06 F1 | 	add	local04, #52
2c400     12 13 02 F6 | 	mov	arg01, local04
2c404     34 24 86 F1 | 	sub	local04, #52
2c408     E4 13 06 F1 | 	add	arg01, #484
2c40c                 | ' {
2c40c                 | ' 
2c40c                 | ' 	return *((DWORD*)ptr);
2c40c     09 FB 01 FB | 	rdlong	result1, arg01
2c410     B9 A0 30 FF 
2c414     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2c418     34 00 90 5D |  if_ne	jmp	#LR__4528
2c41c     34 24 06 F1 | 	add	local04, #52
2c420     12 13 02 F6 | 	mov	arg01, local04
2c424     E8 13 06 F1 | 	add	arg01, #488
2c428                 | ' {
2c428                 | ' 
2c428                 | ' 	return *((DWORD*)ptr);
2c428     09 FB 01 FB | 	rdlong	result1, arg01
2c42c     20 24 86 F1 | 	sub	local04, #32
2c430     12 FB 61 FC | 	wrlong	result1, local04
2c434     20 24 06 F1 | 	add	local04, #32
2c438     12 13 02 F6 | 	mov	arg01, local04
2c43c     EC 13 06 F1 | 	add	arg01, #492
2c440                 | ' {
2c440                 | ' 
2c440                 | ' 	return *((DWORD*)ptr);
2c440     09 FB 01 FB | 	rdlong	result1, arg01
2c444     24 24 86 F1 | 	sub	local04, #36
2c448     12 FB 61 FC | 	wrlong	result1, local04
2c44c     10 24 86 F1 | 	sub	local04, #16
2c450                 | LR__4528
2c450                 | LR__4529
2c450     12 31 42 FC | 	wrbyte	local10, local04
2c454     04 E4 05 F1 | 	add	objptr, #4
2c458     F2 26 E2 FA | 	rdword	local05, objptr
2c45c     01 26 06 F1 | 	add	local05, #1
2c460     F2 26 52 FC | 	wrword	local05, objptr
2c464     F2 32 E2 FA | 	rdword	local11, objptr
2c468     06 24 06 F1 | 	add	local04, #6
2c46c     12 33 52 FC | 	wrword	local11, local04
2c470     04 E4 05 F1 | 	add	objptr, #4
2c474     06 24 06 F1 | 	add	local04, #6
2c478     12 E5 61 FC | 	wrlong	objptr, local04
2c47c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2c47c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2c47c                 | ' 			{
2c47c                 | ' 
2c47c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2c47c                 | ' 
2c47c                 | ' 
2c47c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2c47c                 | ' 
2c47c                 | ' 			}
2c47c                 | ' 		}
2c47c                 | ' 
2c47c                 | ' 
2c47c                 | ' 	}
2c47c                 | ' 
2c47c                 | ' 	fs->fs_type = (BYTE)fmt;
2c47c                 | ' 	fs->id = ++Fsid;
2c47c                 | ' 
2c47c                 | ' 	fs->lfnbuf = LfnBuf;
2c47c                 | ' #line 3567 "ff.c"
2c47c                 | ' 	return FR_OK;
2c47c     00 FA 05 F6 | 	mov	result1, #0
2c480     08 E4 85 F1 | 	sub	objptr, #8
2c484                 | LR__4530
2c484     A7 F0 03 F6 | 	mov	ptra, fp
2c488     B2 00 A0 FD | 	call	#popregs_
2c48c                 | _fatfs_cc_mount_volume_ret
2c48c     2D 00 64 FD | 	ret
2c490                 | 
2c490                 | _fatfs_cc_validate
2c490     09 01 0A F6 | 	mov	_var01, arg01 wz
2c494     09 02 06 F6 | 	mov	_var02, #9
2c498     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2c49c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2c4a0     50 00 90 AD |  if_e	jmp	#LR__4540
2c4a4     04 00 06 F1 | 	add	_var01, #4
2c4a8     00 07 E2 FA | 	rdword	_var04, _var01
2c4ac     04 00 86 F1 | 	sub	_var01, #4
2c4b0     00 13 02 FB | 	rdlong	arg01, _var01
2c4b4     06 12 06 F1 | 	add	arg01, #6
2c4b8     09 FB E1 FA | 	rdword	result1, arg01
2c4bc     FD 06 0A F2 | 	cmp	_var04, result1 wz
2c4c0     30 00 90 5D |  if_ne	jmp	#LR__4540
2c4c4     00 07 02 FB | 	rdlong	_var04, _var01
2c4c8     01 06 06 F1 | 	add	_var04, #1
2c4cc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2c4d0     01 FA 05 56 |  if_ne	mov	result1, #1
2c4d4                 | ' 
2c4d4                 | ' 	return Stat;
2c4d4     01 00 00 AF 
2c4d8     20 E4 05 A1 |  if_e	add	objptr, ##544
2c4dc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c4e0     01 00 00 AF 
2c4e4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c4e8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2c4ec     01 04 CE F7 | 	test	_var03, #1 wz
2c4f0     00 02 06 A6 |  if_e	mov	_var02, #0
2c4f4                 | LR__4540
2c4f4     00 02 0E F2 | 	cmp	_var02, #0 wz
2c4f8     00 05 02 AB |  if_e	rdlong	_var03, _var01
2c4fc     00 04 06 56 |  if_ne	mov	_var03, #0
2c500     0A 05 62 FC | 	wrlong	_var03, arg02
2c504                 | ' 			res = FR_OK;
2c504                 | ' 		}
2c504                 | ' 
2c504                 | ' 	}
2c504                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2c504                 | ' 	return res;
2c504     01 FB 01 F6 | 	mov	result1, _var02
2c508                 | _fatfs_cc_validate_ret
2c508     2D 00 64 FD | 	ret
2c50c                 | 
2c50c                 | _fatfs_cc_f_mount
2c50c     01 4A 05 F6 | 	mov	COUNT_, #1
2c510     A8 00 A0 FD | 	call	#pushregs_
2c514     20 F0 07 F1 | 	add	ptra, #32
2c518     04 4E 05 F1 | 	add	fp, #4
2c51c     A7 12 62 FC | 	wrlong	arg01, fp
2c520     04 4E 05 F1 | 	add	fp, #4
2c524     A7 14 62 FC | 	wrlong	arg02, fp
2c528     04 4E 05 F1 | 	add	fp, #4
2c52c     A7 16 42 FC | 	wrbyte	arg03, fp
2c530     04 4E 85 F1 | 	sub	fp, #4
2c534     A7 16 02 FB | 	rdlong	arg03, fp
2c538     14 4E 05 F1 | 	add	fp, #20
2c53c     A7 16 62 FC | 	wrlong	arg03, fp
2c540     A7 12 02 F6 | 	mov	arg01, fp
2c544     1C 4E 85 F1 | 	sub	fp, #28
2c548     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2c54c     14 4E 05 F1 | 	add	fp, #20
2c550     A7 FA 61 FC | 	wrlong	result1, fp
2c554     14 4E 85 F1 | 	sub	fp, #20
2c558     00 FA 55 F2 | 	cmps	result1, #0 wc
2c55c     0B FA 05 C6 |  if_b	mov	result1, #11
2c560     C0 00 90 CD |  if_b	jmp	#LR__4551
2c564     14 4E 05 F1 | 	add	fp, #20
2c568     A7 16 02 FB | 	rdlong	arg03, fp
2c56c     02 16 66 F0 | 	shl	arg03, #2
2c570     F2 16 02 F1 | 	add	arg03, objptr
2c574     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2c578     04 4E 85 F1 | 	sub	fp, #4
2c57c     A7 16 62 FC | 	wrlong	arg03, fp
2c580     10 4E 85 F1 | 	sub	fp, #16
2c584     28 00 90 AD |  if_e	jmp	#LR__4550
2c588     10 4E 05 F1 | 	add	fp, #16
2c58c     A7 16 02 FB | 	rdlong	arg03, fp
2c590     10 4E 85 F1 | 	sub	fp, #16
2c594     01 16 06 F1 | 	add	arg03, #1
2c598     0B 13 C2 FA | 	rdbyte	arg01, arg03
2c59c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2c5a0     10 4E 05 F1 | 	add	fp, #16
2c5a4     A7 16 02 FB | 	rdlong	arg03, fp
2c5a8     10 4E 85 F1 | 	sub	fp, #16
2c5ac     0B 01 48 FC | 	wrbyte	#0, arg03
2c5b0                 | LR__4550
2c5b0     04 4E 05 F1 | 	add	fp, #4
2c5b4     A7 1E 0A FB | 	rdlong	local01, fp wz
2c5b8     04 4E 85 F1 | 	sub	fp, #4
2c5bc     04 4E 05 51 |  if_ne	add	fp, #4
2c5c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2c5c4     04 4E 85 51 |  if_ne	sub	fp, #4
2c5c8     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2c5cc     14 4E 05 F1 | 	add	fp, #20
2c5d0     A7 1E 02 FB | 	rdlong	local01, fp
2c5d4     02 1E 66 F0 | 	shl	local01, #2
2c5d8     F2 1E 02 F1 | 	add	local01, objptr
2c5dc     10 4E 85 F1 | 	sub	fp, #16
2c5e0     A7 16 02 FB | 	rdlong	arg03, fp
2c5e4     0F 17 62 FC | 	wrlong	arg03, local01
2c5e8     08 4E 05 F1 | 	add	fp, #8
2c5ec     A7 1E CA FA | 	rdbyte	local01, fp wz
2c5f0     0C 4E 85 F1 | 	sub	fp, #12
2c5f4     00 FA 05 A6 |  if_e	mov	result1, #0
2c5f8     28 00 90 AD |  if_e	jmp	#LR__4551
2c5fc     08 4E 05 F1 | 	add	fp, #8
2c600     A7 12 02 F6 | 	mov	arg01, fp
2c604     04 4E 85 F1 | 	sub	fp, #4
2c608     A7 14 02 F6 | 	mov	arg02, fp
2c60c     04 4E 85 F1 | 	sub	fp, #4
2c610     00 16 06 F6 | 	mov	arg03, #0
2c614     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2c618     18 4E 05 F1 | 	add	fp, #24
2c61c     A7 FA 61 FC | 	wrlong	result1, fp
2c620                 | ' 
2c620                 | ' 	res = mount_volume(&path, &fs, 0);
2c620                 | ' 	return res ;
2c620     18 4E 85 F1 | 	sub	fp, #24
2c624                 | LR__4551
2c624     A7 F0 03 F6 | 	mov	ptra, fp
2c628     B2 00 A0 FD | 	call	#popregs_
2c62c                 | _fatfs_cc_f_mount_ret
2c62c     2D 00 64 FD | 	ret
2c630                 | 
2c630                 | _fatfs_cc_f_open
2c630     02 4A 05 F6 | 	mov	COUNT_, #2
2c634     A8 00 A0 FD | 	call	#pushregs_
2c638     60 F0 07 F1 | 	add	ptra, #96
2c63c     04 4E 05 F1 | 	add	fp, #4
2c640     A7 12 62 FC | 	wrlong	arg01, fp
2c644     04 4E 05 F1 | 	add	fp, #4
2c648     A7 14 62 FC | 	wrlong	arg02, fp
2c64c     04 4E 05 F1 | 	add	fp, #4
2c650     A7 16 42 FC | 	wrbyte	arg03, fp
2c654     08 4E 85 F1 | 	sub	fp, #8
2c658     A7 18 0A FB | 	rdlong	arg04, fp wz
2c65c     04 4E 85 F1 | 	sub	fp, #4
2c660     09 FA 05 A6 |  if_e	mov	result1, #9
2c664     98 06 90 AD |  if_e	jmp	#LR__4577
2c668     0C 4E 05 F1 | 	add	fp, #12
2c66c     A7 18 C2 FA | 	rdbyte	arg04, fp
2c670     3F 18 06 F5 | 	and	arg04, #63
2c674     A7 18 42 FC | 	wrbyte	arg04, fp
2c678     04 4E 85 F1 | 	sub	fp, #4
2c67c     A7 12 02 F6 | 	mov	arg01, fp
2c680     3C 4E 05 F1 | 	add	fp, #60
2c684     A7 14 02 F6 | 	mov	arg02, fp
2c688     38 4E 85 F1 | 	sub	fp, #56
2c68c     A7 16 C2 FA | 	rdbyte	arg03, fp
2c690     0C 4E 85 F1 | 	sub	fp, #12
2c694     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2c698     10 4E 05 F1 | 	add	fp, #16
2c69c     A7 FA 61 FC | 	wrlong	result1, fp
2c6a0     10 4E 85 F1 | 	sub	fp, #16
2c6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6a8     2C 06 90 5D |  if_ne	jmp	#LR__4576
2c6ac     44 4E 05 F1 | 	add	fp, #68
2c6b0     A7 18 02 FB | 	rdlong	arg04, fp
2c6b4     30 4E 85 F1 | 	sub	fp, #48
2c6b8     A7 18 62 FC | 	wrlong	arg04, fp
2c6bc     A7 12 02 F6 | 	mov	arg01, fp
2c6c0     0C 4E 85 F1 | 	sub	fp, #12
2c6c4     A7 1E 02 FB | 	rdlong	local01, fp
2c6c8     08 4E 85 F1 | 	sub	fp, #8
2c6cc     0F 15 02 F6 | 	mov	arg02, local01
2c6d0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2c6d4     10 4E 05 F1 | 	add	fp, #16
2c6d8     A7 FA 61 FC | 	wrlong	result1, fp
2c6dc     10 4E 85 F1 | 	sub	fp, #16
2c6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6e4     1C 00 90 5D |  if_ne	jmp	#LR__4560
2c6e8     3F 4E 05 F1 | 	add	fp, #63
2c6ec     A7 18 C2 FA | 	rdbyte	arg04, fp
2c6f0     3F 4E 85 F1 | 	sub	fp, #63
2c6f4     80 18 CE F7 | 	test	arg04, #128 wz
2c6f8     10 4E 05 51 |  if_ne	add	fp, #16
2c6fc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2c700     10 4E 85 51 |  if_ne	sub	fp, #16
2c704                 | LR__4560
2c704     0C 4E 05 F1 | 	add	fp, #12
2c708     A7 18 C2 FA | 	rdbyte	arg04, fp
2c70c     0C 4E 85 F1 | 	sub	fp, #12
2c710     1C 18 CE F7 | 	test	arg04, #28 wz
2c714     F0 01 90 AD |  if_e	jmp	#LR__4565
2c718     10 4E 05 F1 | 	add	fp, #16
2c71c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c720     10 4E 85 F1 | 	sub	fp, #16
2c724     48 00 90 AD |  if_e	jmp	#LR__4562
2c728     10 4E 05 F1 | 	add	fp, #16
2c72c     A7 18 02 FB | 	rdlong	arg04, fp
2c730     10 4E 85 F1 | 	sub	fp, #16
2c734     04 18 0E F2 | 	cmp	arg04, #4 wz
2c738     1C 00 90 5D |  if_ne	jmp	#LR__4561
2c73c     14 4E 05 F1 | 	add	fp, #20
2c740     A7 12 02 F6 | 	mov	arg01, fp
2c744     14 4E 85 F1 | 	sub	fp, #20
2c748     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2c74c     10 4E 05 F1 | 	add	fp, #16
2c750     A7 FA 61 FC | 	wrlong	result1, fp
2c754     10 4E 85 F1 | 	sub	fp, #16
2c758                 | LR__4561
2c758     0C 4E 05 F1 | 	add	fp, #12
2c75c     A7 1E C2 FA | 	rdbyte	local01, fp
2c760     08 1E 46 F5 | 	or	local01, #8
2c764     A7 1E 42 FC | 	wrbyte	local01, fp
2c768     0C 4E 85 F1 | 	sub	fp, #12
2c76c     3C 00 90 FD | 	jmp	#LR__4564
2c770                 | LR__4562
2c770     1A 4E 05 F1 | 	add	fp, #26
2c774     A7 1E C2 FA | 	rdbyte	local01, fp
2c778     1A 4E 85 F1 | 	sub	fp, #26
2c77c     11 1E CE F7 | 	test	local01, #17 wz
2c780     10 4E 05 51 |  if_ne	add	fp, #16
2c784     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c788     10 4E 85 51 |  if_ne	sub	fp, #16
2c78c     1C 00 90 5D |  if_ne	jmp	#LR__4563
2c790     0C 4E 05 F1 | 	add	fp, #12
2c794     A7 1E C2 FA | 	rdbyte	local01, fp
2c798     0C 4E 85 F1 | 	sub	fp, #12
2c79c     04 1E CE F7 | 	test	local01, #4 wz
2c7a0     10 4E 05 51 |  if_ne	add	fp, #16
2c7a4     A7 10 68 5C |  if_ne	wrlong	#8, fp
2c7a8     10 4E 85 51 |  if_ne	sub	fp, #16
2c7ac                 | LR__4563
2c7ac                 | LR__4564
2c7ac     10 4E 05 F1 | 	add	fp, #16
2c7b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2c7b4     10 4E 85 F1 | 	sub	fp, #16
2c7b8     A8 01 90 5D |  if_ne	jmp	#LR__4568
2c7bc     0C 4E 05 F1 | 	add	fp, #12
2c7c0     A7 1E C2 FA | 	rdbyte	local01, fp
2c7c4     0C 4E 85 F1 | 	sub	fp, #12
2c7c8     08 1E CE F7 | 	test	local01, #8 wz
2c7cc     94 01 90 AD |  if_e	jmp	#LR__4568
2c7d0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2c7d4     54 4E 05 F1 | 	add	fp, #84
2c7d8     A7 FA 61 FC | 	wrlong	result1, fp
2c7dc     24 4E 85 F1 | 	sub	fp, #36
2c7e0     A7 12 02 FB | 	rdlong	arg01, fp
2c7e4     0E 12 06 F1 | 	add	arg01, #14
2c7e8     09 FB 61 FC | 	wrlong	result1, arg01
2c7ec     A7 12 02 FB | 	rdlong	arg01, fp
2c7f0     16 12 06 F1 | 	add	arg01, #22
2c7f4     24 4E 05 F1 | 	add	fp, #36
2c7f8     A7 14 02 FB | 	rdlong	arg02, fp
2c7fc     09 15 62 FC | 	wrlong	arg02, arg01
2c800     10 4E 85 F1 | 	sub	fp, #16
2c804     A7 12 02 FB | 	rdlong	arg01, fp
2c808     14 4E 85 F1 | 	sub	fp, #20
2c80c     A7 14 02 FB | 	rdlong	arg02, fp
2c810     30 4E 85 F1 | 	sub	fp, #48
2c814     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2c818     48 4E 05 F1 | 	add	fp, #72
2c81c     A7 FA 61 FC | 	wrlong	result1, fp
2c820     18 4E 85 F1 | 	sub	fp, #24
2c824     A7 1E 02 FB | 	rdlong	local01, fp
2c828     0B 1E 06 F1 | 	add	local01, #11
2c82c     0F 41 48 FC | 	wrbyte	#32, local01
2c830     14 4E 05 F1 | 	add	fp, #20
2c834     A7 12 02 FB | 	rdlong	arg01, fp
2c838     14 4E 85 F1 | 	sub	fp, #20
2c83c     A7 14 02 FB | 	rdlong	arg02, fp
2c840     30 4E 85 F1 | 	sub	fp, #48
2c844     00 16 06 F6 | 	mov	arg03, #0
2c848     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2c84c     30 4E 05 F1 | 	add	fp, #48
2c850     A7 12 02 FB | 	rdlong	arg01, fp
2c854     1C 12 06 F1 | 	add	arg01, #28
2c858     09 01 68 FC | 	wrlong	#0, arg01
2c85c     14 4E 05 F1 | 	add	fp, #20
2c860     A7 1E 02 FB | 	rdlong	local01, fp
2c864     03 1E 06 F1 | 	add	local01, #3
2c868     0F 03 48 FC | 	wrbyte	#1, local01
2c86c     04 4E 05 F1 | 	add	fp, #4
2c870     A7 1E 0A FB | 	rdlong	local01, fp wz
2c874     48 4E 85 F1 | 	sub	fp, #72
2c878     E8 00 90 AD |  if_e	jmp	#LR__4568
2c87c     44 4E 05 F1 | 	add	fp, #68
2c880     A7 1E 02 FB | 	rdlong	local01, fp
2c884     30 1E 06 F1 | 	add	local01, #48
2c888     0F 1F 02 FB | 	rdlong	local01, local01
2c88c     14 4E 05 F1 | 	add	fp, #20
2c890     A7 1E 62 FC | 	wrlong	local01, fp
2c894     44 4E 85 F1 | 	sub	fp, #68
2c898     A7 12 02 F6 | 	mov	arg01, fp
2c89c     34 4E 05 F1 | 	add	fp, #52
2c8a0     A7 14 02 FB | 	rdlong	arg02, fp
2c8a4     48 4E 85 F1 | 	sub	fp, #72
2c8a8     00 16 06 F6 | 	mov	arg03, #0
2c8ac     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2c8b0     10 4E 05 F1 | 	add	fp, #16
2c8b4     A7 FA 61 FC | 	wrlong	result1, fp
2c8b8     10 4E 85 F1 | 	sub	fp, #16
2c8bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8c0     A0 00 90 5D |  if_ne	jmp	#LR__4568
2c8c4     44 4E 05 F1 | 	add	fp, #68
2c8c8     A7 12 02 FB | 	rdlong	arg01, fp
2c8cc     14 4E 05 F1 | 	add	fp, #20
2c8d0     A7 14 02 FB | 	rdlong	arg02, fp
2c8d4     58 4E 85 F1 | 	sub	fp, #88
2c8d8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2c8dc     10 4E 05 F1 | 	add	fp, #16
2c8e0     A7 FA 61 FC | 	wrlong	result1, fp
2c8e4     34 4E 05 F1 | 	add	fp, #52
2c8e8     A7 18 02 FB | 	rdlong	arg04, fp
2c8ec     04 4E 05 F1 | 	add	fp, #4
2c8f0     A7 1E 02 FB | 	rdlong	local01, fp
2c8f4     48 4E 85 F1 | 	sub	fp, #72
2c8f8     01 1E 86 F1 | 	sub	local01, #1
2c8fc     10 18 06 F1 | 	add	arg04, #16
2c900     0C 1F 62 FC | 	wrlong	local01, arg04
2c904     5C 00 90 FD | 	jmp	#LR__4568
2c908                 | LR__4565
2c908     10 4E 05 F1 | 	add	fp, #16
2c90c     A7 18 0A FB | 	rdlong	arg04, fp wz
2c910     10 4E 85 F1 | 	sub	fp, #16
2c914     4C 00 90 5D |  if_ne	jmp	#LR__4567
2c918     1A 4E 05 F1 | 	add	fp, #26
2c91c     A7 18 C2 FA | 	rdbyte	arg04, fp
2c920     1A 4E 85 F1 | 	sub	fp, #26
2c924     10 18 CE F7 | 	test	arg04, #16 wz
2c928     10 4E 05 51 |  if_ne	add	fp, #16
2c92c     A7 08 68 5C |  if_ne	wrlong	#4, fp
2c930     10 4E 85 51 |  if_ne	sub	fp, #16
2c934     2C 00 90 5D |  if_ne	jmp	#LR__4566
2c938     0C 4E 05 F1 | 	add	fp, #12
2c93c     A7 18 C2 FA | 	rdbyte	arg04, fp
2c940     0C 4E 85 F1 | 	sub	fp, #12
2c944     02 18 CE F7 | 	test	arg04, #2 wz
2c948     1A 4E 05 51 |  if_ne	add	fp, #26
2c94c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2c950     1A 4E 85 51 |  if_ne	sub	fp, #26
2c954     01 1E CE 57 |  if_ne	test	local01, #1 wz
2c958     10 4E 05 51 |  if_ne	add	fp, #16
2c95c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c960     10 4E 85 51 |  if_ne	sub	fp, #16
2c964                 | LR__4566
2c964                 | LR__4567
2c964                 | LR__4568
2c964     10 4E 05 F1 | 	add	fp, #16
2c968     A7 1E 0A FB | 	rdlong	local01, fp wz
2c96c     10 4E 85 F1 | 	sub	fp, #16
2c970     60 00 90 5D |  if_ne	jmp	#LR__4569
2c974     0C 4E 05 F1 | 	add	fp, #12
2c978     A7 20 C2 FA | 	rdbyte	local02, fp
2c97c     0C 4E 85 F1 | 	sub	fp, #12
2c980     08 20 CE F7 | 	test	local02, #8 wz
2c984     0C 4E 05 51 |  if_ne	add	fp, #12
2c988     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2c98c     40 20 46 55 |  if_ne	or	local02, #64
2c990     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2c994     0C 4E 85 51 |  if_ne	sub	fp, #12
2c998     04 4E 05 F1 | 	add	fp, #4
2c99c     A7 20 02 FB | 	rdlong	local02, fp
2c9a0     40 4E 05 F1 | 	add	fp, #64
2c9a4     A7 1E 02 FB | 	rdlong	local01, fp
2c9a8     30 1E 06 F1 | 	add	local01, #48
2c9ac     0F 1F 02 FB | 	rdlong	local01, local01
2c9b0     20 20 06 F1 | 	add	local02, #32
2c9b4     10 1F 62 FC | 	wrlong	local01, local02
2c9b8     40 4E 85 F1 | 	sub	fp, #64
2c9bc     A7 20 02 FB | 	rdlong	local02, fp
2c9c0     2C 4E 05 F1 | 	add	fp, #44
2c9c4     A7 1E 02 FB | 	rdlong	local01, fp
2c9c8     30 4E 85 F1 | 	sub	fp, #48
2c9cc     24 20 06 F1 | 	add	local02, #36
2c9d0     10 1F 62 FC | 	wrlong	local01, local02
2c9d4                 | LR__4569
2c9d4     10 4E 05 F1 | 	add	fp, #16
2c9d8     A7 20 0A FB | 	rdlong	local02, fp wz
2c9dc     10 4E 85 F1 | 	sub	fp, #16
2c9e0     F4 02 90 5D |  if_ne	jmp	#LR__4575
2c9e4     04 4E 05 F1 | 	add	fp, #4
2c9e8     A7 20 02 FB | 	rdlong	local02, fp
2c9ec     40 4E 05 F1 | 	add	fp, #64
2c9f0     A7 12 02 FB | 	rdlong	arg01, fp
2c9f4     14 4E 85 F1 | 	sub	fp, #20
2c9f8     A7 14 02 FB | 	rdlong	arg02, fp
2c9fc     30 4E 85 F1 | 	sub	fp, #48
2ca00     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2ca04     08 20 06 F1 | 	add	local02, #8
2ca08     10 FB 61 FC | 	wrlong	result1, local02
2ca0c     04 4E 05 F1 | 	add	fp, #4
2ca10     A7 20 02 FB | 	rdlong	local02, fp
2ca14     2C 4E 05 F1 | 	add	fp, #44
2ca18     A7 12 02 FB | 	rdlong	arg01, fp
2ca1c     1C 12 06 F1 | 	add	arg01, #28
2ca20                 | ' {
2ca20                 | ' 
2ca20                 | ' 	return *((DWORD*)ptr);
2ca20     09 FB 01 FB | 	rdlong	result1, arg01
2ca24     0C 20 06 F1 | 	add	local02, #12
2ca28     10 FB 61 FC | 	wrlong	result1, local02
2ca2c     2C 4E 85 F1 | 	sub	fp, #44
2ca30     A7 20 02 FB | 	rdlong	local02, fp
2ca34     40 4E 05 F1 | 	add	fp, #64
2ca38     A7 1E 02 FB | 	rdlong	local01, fp
2ca3c     10 1F 62 FC | 	wrlong	local01, local02
2ca40     40 4E 85 F1 | 	sub	fp, #64
2ca44     A7 20 02 FB | 	rdlong	local02, fp
2ca48     40 4E 05 F1 | 	add	fp, #64
2ca4c     A7 1E 02 FB | 	rdlong	local01, fp
2ca50     06 1E 06 F1 | 	add	local01, #6
2ca54     0F 1F E2 FA | 	rdword	local01, local01
2ca58     04 20 06 F1 | 	add	local02, #4
2ca5c     10 1F 52 FC | 	wrword	local01, local02
2ca60     40 4E 85 F1 | 	sub	fp, #64
2ca64     A7 20 02 FB | 	rdlong	local02, fp
2ca68     08 4E 05 F1 | 	add	fp, #8
2ca6c     A7 1E C2 FA | 	rdbyte	local01, fp
2ca70     10 20 06 F1 | 	add	local02, #16
2ca74     10 1F 42 FC | 	wrbyte	local01, local02
2ca78     08 4E 85 F1 | 	sub	fp, #8
2ca7c     A7 20 02 FB | 	rdlong	local02, fp
2ca80     11 20 06 F1 | 	add	local02, #17
2ca84     10 01 48 FC | 	wrbyte	#0, local02
2ca88     A7 20 02 FB | 	rdlong	local02, fp
2ca8c     1C 20 06 F1 | 	add	local02, #28
2ca90     10 01 68 FC | 	wrlong	#0, local02
2ca94     A7 20 02 FB | 	rdlong	local02, fp
2ca98     14 20 06 F1 | 	add	local02, #20
2ca9c     10 01 68 FC | 	wrlong	#0, local02
2caa0     A7 12 02 FB | 	rdlong	arg01, fp
2caa4     04 4E 85 F1 | 	sub	fp, #4
2caa8     28 12 06 F1 | 	add	arg01, #40
2caac     00 14 06 F6 | 	mov	arg02, #0
2cab0     09 16 C6 F9 | 	decod	arg03, #9
2cab4     98 00 A0 FD | 	call	#\builtin_bytefill_
2cab8     0C 4E 05 F1 | 	add	fp, #12
2cabc     A7 20 C2 FA | 	rdbyte	local02, fp
2cac0     0C 4E 85 F1 | 	sub	fp, #12
2cac4     20 20 CE F7 | 	test	local02, #32 wz
2cac8     0C 02 90 AD |  if_e	jmp	#LR__4574
2cacc     04 4E 05 F1 | 	add	fp, #4
2cad0     A7 1E 02 FB | 	rdlong	local01, fp
2cad4     04 4E 85 F1 | 	sub	fp, #4
2cad8     0C 1E 06 F1 | 	add	local01, #12
2cadc     0F 21 02 FB | 	rdlong	local02, local01
2cae0     01 20 16 F2 | 	cmp	local02, #1 wc
2cae4     F0 01 90 CD |  if_b	jmp	#LR__4574
2cae8     04 4E 05 F1 | 	add	fp, #4
2caec     A7 1E 02 FB | 	rdlong	local01, fp
2caf0     0F 21 02 F6 | 	mov	local02, local01
2caf4     0C 1E 06 F1 | 	add	local01, #12
2caf8     0F 1F 02 FB | 	rdlong	local01, local01
2cafc     14 20 06 F1 | 	add	local02, #20
2cb00     10 1F 62 FC | 	wrlong	local01, local02
2cb04     40 4E 05 F1 | 	add	fp, #64
2cb08     A7 20 02 FB | 	rdlong	local02, fp
2cb0c     0A 20 06 F1 | 	add	local02, #10
2cb10     10 21 E2 FA | 	rdword	local02, local02
2cb14     09 20 66 F0 | 	shl	local02, #9
2cb18     08 4E 05 F1 | 	add	fp, #8
2cb1c     A7 20 62 FC | 	wrlong	local02, fp
2cb20     48 4E 85 F1 | 	sub	fp, #72
2cb24     A7 20 02 FB | 	rdlong	local02, fp
2cb28     08 20 06 F1 | 	add	local02, #8
2cb2c     10 1F 02 FB | 	rdlong	local01, local02
2cb30     4C 4E 05 F1 | 	add	fp, #76
2cb34     A7 1E 62 FC | 	wrlong	local01, fp
2cb38                 | ' 				fp->fptr = fp->obj.objsize;
2cb38                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2cb38                 | ' 				clst = fp->obj.sclust;
2cb38                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2cb38     4C 4E 85 F1 | 	sub	fp, #76
2cb3c     A7 20 02 FB | 	rdlong	local02, fp
2cb40     0C 20 06 F1 | 	add	local02, #12
2cb44     10 1F 02 FB | 	rdlong	local01, local02
2cb48     58 4E 05 F1 | 	add	fp, #88
2cb4c     A7 1E 62 FC | 	wrlong	local01, fp
2cb50     5C 4E 85 F1 | 	sub	fp, #92
2cb54                 | LR__4570
2cb54     10 4E 05 F1 | 	add	fp, #16
2cb58     A7 20 0A FB | 	rdlong	local02, fp wz
2cb5c     10 4E 85 F1 | 	sub	fp, #16
2cb60     94 00 90 5D |  if_ne	jmp	#LR__4571
2cb64     5C 4E 05 F1 | 	add	fp, #92
2cb68     A7 20 02 FB | 	rdlong	local02, fp
2cb6c     10 4E 85 F1 | 	sub	fp, #16
2cb70     A7 1E 02 FB | 	rdlong	local01, fp
2cb74     4C 4E 85 F1 | 	sub	fp, #76
2cb78     0F 21 1A F2 | 	cmp	local02, local01 wcz
2cb7c     78 00 90 ED |  if_be	jmp	#LR__4571
2cb80     04 4E 05 F1 | 	add	fp, #4
2cb84     A7 12 02 FB | 	rdlong	arg01, fp
2cb88     4C 4E 05 F1 | 	add	fp, #76
2cb8c     A7 14 02 FB | 	rdlong	arg02, fp
2cb90     50 4E 85 F1 | 	sub	fp, #80
2cb94     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2cb98     50 4E 05 F1 | 	add	fp, #80
2cb9c     A7 FA 61 FC | 	wrlong	result1, fp
2cba0     50 4E 85 F1 | 	sub	fp, #80
2cba4     02 FA 15 F2 | 	cmp	result1, #2 wc
2cba8     10 4E 05 C1 |  if_b	add	fp, #16
2cbac     A7 04 68 CC |  if_b	wrlong	#2, fp
2cbb0     10 4E 85 C1 |  if_b	sub	fp, #16
2cbb4     50 4E 05 F1 | 	add	fp, #80
2cbb8     A7 20 02 FB | 	rdlong	local02, fp
2cbbc     50 4E 85 F1 | 	sub	fp, #80
2cbc0     FF FF 7F FF 
2cbc4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2cbc8     10 4E 05 A1 |  if_e	add	fp, #16
2cbcc     A7 02 68 AC |  if_e	wrlong	#1, fp
2cbd0     10 4E 85 A1 |  if_e	sub	fp, #16
2cbd4     5C 4E 05 F1 | 	add	fp, #92
2cbd8     A7 20 02 FB | 	rdlong	local02, fp
2cbdc     10 4E 85 F1 | 	sub	fp, #16
2cbe0     A7 1E 02 FB | 	rdlong	local01, fp
2cbe4     0F 21 82 F1 | 	sub	local02, local01
2cbe8     10 4E 05 F1 | 	add	fp, #16
2cbec     A7 20 62 FC | 	wrlong	local02, fp
2cbf0     5C 4E 85 F1 | 	sub	fp, #92
2cbf4     5C FF 9F FD | 	jmp	#LR__4570
2cbf8                 | LR__4571
2cbf8     04 4E 05 F1 | 	add	fp, #4
2cbfc     A7 20 02 FB | 	rdlong	local02, fp
2cc00     4C 4E 05 F1 | 	add	fp, #76
2cc04     A7 1E 02 FB | 	rdlong	local01, fp
2cc08     18 20 06 F1 | 	add	local02, #24
2cc0c     10 1F 62 FC | 	wrlong	local01, local02
2cc10     40 4E 85 F1 | 	sub	fp, #64
2cc14     A7 20 0A FB | 	rdlong	local02, fp wz
2cc18     10 4E 85 F1 | 	sub	fp, #16
2cc1c     B8 00 90 5D |  if_ne	jmp	#LR__4573
2cc20     5C 4E 05 F1 | 	add	fp, #92
2cc24     A7 1E 02 FB | 	rdlong	local01, fp
2cc28     5C 4E 85 F1 | 	sub	fp, #92
2cc2c     FF 1F CE F7 | 	test	local01, #511 wz
2cc30     A4 00 90 AD |  if_e	jmp	#LR__4573
2cc34     44 4E 05 F1 | 	add	fp, #68
2cc38     A7 12 02 FB | 	rdlong	arg01, fp
2cc3c     0C 4E 05 F1 | 	add	fp, #12
2cc40     A7 14 02 FB | 	rdlong	arg02, fp
2cc44     50 4E 85 F1 | 	sub	fp, #80
2cc48     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2cc4c     58 4E 05 F1 | 	add	fp, #88
2cc50     A7 FA 61 FC | 	wrlong	result1, fp
2cc54     00 FA 4D F2 | 	cmps	result1, #0 wz
2cc58     58 4E 85 F1 | 	sub	fp, #88
2cc5c     10 4E 05 A1 |  if_e	add	fp, #16
2cc60     A7 04 68 AC |  if_e	wrlong	#2, fp
2cc64     10 4E 85 A1 |  if_e	sub	fp, #16
2cc68     6C 00 90 AD |  if_e	jmp	#LR__4572
2cc6c     04 4E 05 F1 | 	add	fp, #4
2cc70     A7 20 02 FB | 	rdlong	local02, fp
2cc74     54 4E 05 F1 | 	add	fp, #84
2cc78     A7 1E 02 FB | 	rdlong	local01, fp
2cc7c     04 4E 05 F1 | 	add	fp, #4
2cc80     A7 18 02 FB | 	rdlong	arg04, fp
2cc84     09 18 46 F0 | 	shr	arg04, #9
2cc88     0C 1F 02 F1 | 	add	local01, arg04
2cc8c     1C 20 06 F1 | 	add	local02, #28
2cc90     10 1F 62 FC | 	wrlong	local01, local02
2cc94     18 4E 85 F1 | 	sub	fp, #24
2cc98     A7 20 02 FB | 	rdlong	local02, fp
2cc9c     01 20 06 F1 | 	add	local02, #1
2cca0     10 13 C2 FA | 	rdbyte	arg01, local02
2cca4     40 4E 85 F1 | 	sub	fp, #64
2cca8     A7 20 02 FB | 	rdlong	local02, fp
2ccac     10 15 02 F6 | 	mov	arg02, local02
2ccb0     28 14 06 F1 | 	add	arg02, #40
2ccb4     04 4E 85 F1 | 	sub	fp, #4
2ccb8     1C 20 06 F1 | 	add	local02, #28
2ccbc     10 17 02 FB | 	rdlong	arg03, local02
2ccc0     01 18 06 F6 | 	mov	arg04, #1
2ccc4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2ccc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cccc     10 4E 05 51 |  if_ne	add	fp, #16
2ccd0     A7 02 68 5C |  if_ne	wrlong	#1, fp
2ccd4     10 4E 85 51 |  if_ne	sub	fp, #16
2ccd8                 | LR__4572
2ccd8                 | LR__4573
2ccd8                 | LR__4574
2ccd8                 | LR__4575
2ccd8                 | LR__4576
2ccd8     10 4E 05 F1 | 	add	fp, #16
2ccdc     A7 20 0A FB | 	rdlong	local02, fp wz
2cce0     10 4E 85 F1 | 	sub	fp, #16
2cce4     04 4E 05 51 |  if_ne	add	fp, #4
2cce8     A7 20 02 5B |  if_ne	rdlong	local02, fp
2ccec     04 4E 85 51 |  if_ne	sub	fp, #4
2ccf0     10 01 68 5C |  if_ne	wrlong	#0, local02
2ccf4                 | ' 
2ccf4                 | ' 	return res ;
2ccf4     10 4E 05 F1 | 	add	fp, #16
2ccf8     A7 FA 01 FB | 	rdlong	result1, fp
2ccfc     10 4E 85 F1 | 	sub	fp, #16
2cd00                 | LR__4577
2cd00     A7 F0 03 F6 | 	mov	ptra, fp
2cd04     B2 00 A0 FD | 	call	#popregs_
2cd08                 | _fatfs_cc_f_open_ret
2cd08     2D 00 64 FD | 	ret
2cd0c                 | 
2cd0c                 | _fatfs_cc_f_read
2cd0c     0E 4A 05 F6 | 	mov	COUNT_, #14
2cd10     A8 00 A0 FD | 	call	#pushregs_
2cd14     38 F0 07 F1 | 	add	ptra, #56
2cd18     04 4E 05 F1 | 	add	fp, #4
2cd1c     A7 12 62 FC | 	wrlong	arg01, fp
2cd20     04 4E 05 F1 | 	add	fp, #4
2cd24     A7 14 62 FC | 	wrlong	arg02, fp
2cd28     04 4E 05 F1 | 	add	fp, #4
2cd2c     A7 16 62 FC | 	wrlong	arg03, fp
2cd30     04 4E 05 F1 | 	add	fp, #4
2cd34     A7 18 62 FC | 	wrlong	arg04, fp
2cd38     08 4E 85 F1 | 	sub	fp, #8
2cd3c     A7 FA 01 FB | 	rdlong	result1, fp
2cd40     2C 4E 05 F1 | 	add	fp, #44
2cd44     A7 FA 61 FC | 	wrlong	result1, fp
2cd48     24 4E 85 F1 | 	sub	fp, #36
2cd4c     A7 FA 01 FB | 	rdlong	result1, fp
2cd50     FD 00 68 FC | 	wrlong	#0, result1
2cd54     0C 4E 85 F1 | 	sub	fp, #12
2cd58     A7 12 02 FB | 	rdlong	arg01, fp
2cd5c     14 4E 05 F1 | 	add	fp, #20
2cd60     A7 14 02 F6 | 	mov	arg02, fp
2cd64     18 4E 85 F1 | 	sub	fp, #24
2cd68     24 F7 BF FD | 	call	#_fatfs_cc_validate
2cd6c     14 4E 05 F1 | 	add	fp, #20
2cd70     A7 FA 61 FC | 	wrlong	result1, fp
2cd74     00 FA 4D F2 | 	cmps	result1, #0 wz
2cd78     14 4E 85 F1 | 	sub	fp, #20
2cd7c     20 00 90 5D |  if_ne	jmp	#LR__4580
2cd80     04 4E 05 F1 | 	add	fp, #4
2cd84     A7 14 02 FB | 	rdlong	arg02, fp
2cd88     11 14 06 F1 | 	add	arg02, #17
2cd8c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2cd90     10 4E 05 F1 | 	add	fp, #16
2cd94     A7 14 62 FC | 	wrlong	arg02, fp
2cd98     14 4E 85 F1 | 	sub	fp, #20
2cd9c     10 00 90 AD |  if_e	jmp	#LR__4581
2cda0                 | LR__4580
2cda0     14 4E 05 F1 | 	add	fp, #20
2cda4     A7 FA 01 FB | 	rdlong	result1, fp
2cda8     14 4E 85 F1 | 	sub	fp, #20
2cdac     EC 05 90 FD | 	jmp	#LR__4600
2cdb0                 | LR__4581
2cdb0     04 4E 05 F1 | 	add	fp, #4
2cdb4     A7 18 02 FB | 	rdlong	arg04, fp
2cdb8     04 4E 85 F1 | 	sub	fp, #4
2cdbc     10 18 06 F1 | 	add	arg04, #16
2cdc0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cdc4     01 18 CE F7 | 	test	arg04, #1 wz
2cdc8     07 FA 05 A6 |  if_e	mov	result1, #7
2cdcc     CC 05 90 AD |  if_e	jmp	#LR__4600
2cdd0     04 4E 05 F1 | 	add	fp, #4
2cdd4     A7 1E 02 FB | 	rdlong	local01, fp
2cdd8     0F 21 02 F6 | 	mov	local02, local01
2cddc     0C 20 06 F1 | 	add	local02, #12
2cde0     10 23 02 FB | 	rdlong	local03, local02
2cde4     14 1E 06 F1 | 	add	local01, #20
2cde8     0F 1F 02 FB | 	rdlong	local01, local01
2cdec     0F 23 82 F1 | 	sub	local03, local01
2cdf0     20 4E 05 F1 | 	add	fp, #32
2cdf4     A7 22 62 FC | 	wrlong	local03, fp
2cdf8     18 4E 85 F1 | 	sub	fp, #24
2cdfc     A7 24 02 FB | 	rdlong	local04, fp
2ce00     0C 4E 85 F1 | 	sub	fp, #12
2ce04     11 25 1A F2 | 	cmp	local04, local03 wcz
2ce08     24 4E 05 11 |  if_a	add	fp, #36
2ce0c     A7 24 02 1B |  if_a	rdlong	local04, fp
2ce10     18 4E 85 11 |  if_a	sub	fp, #24
2ce14     A7 24 62 1C |  if_a	wrlong	local04, fp
2ce18     0C 4E 85 11 |  if_a	sub	fp, #12
2ce1c                 | ' 
2ce1c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2ce1c                 | LR__4582
2ce1c     0C 4E 05 F1 | 	add	fp, #12
2ce20     A7 20 02 FB | 	rdlong	local02, fp
2ce24     0C 4E 85 F1 | 	sub	fp, #12
2ce28     10 25 02 F6 | 	mov	local04, local02
2ce2c     01 24 16 F2 | 	cmp	local04, #1 wc
2ce30     64 05 90 CD |  if_b	jmp	#LR__4599
2ce34     04 4E 05 F1 | 	add	fp, #4
2ce38     A7 22 02 FB | 	rdlong	local03, fp
2ce3c     04 4E 85 F1 | 	sub	fp, #4
2ce40     14 22 06 F1 | 	add	local03, #20
2ce44     11 23 02 FB | 	rdlong	local03, local03
2ce48     FF 23 CE F7 | 	test	local03, #511 wz
2ce4c     3C 04 90 5D |  if_ne	jmp	#LR__4597
2ce50     04 4E 05 F1 | 	add	fp, #4
2ce54     A7 1E 02 FB | 	rdlong	local01, fp
2ce58     14 1E 06 F1 | 	add	local01, #20
2ce5c     0F 23 02 FB | 	rdlong	local03, local01
2ce60     09 22 46 F0 | 	shr	local03, #9
2ce64     14 4E 05 F1 | 	add	fp, #20
2ce68     A7 26 02 FB | 	rdlong	local05, fp
2ce6c     13 29 02 F6 | 	mov	local06, local05
2ce70     0A 28 06 F1 | 	add	local06, #10
2ce74     14 2B E2 FA | 	rdword	local07, local06
2ce78     0A 28 86 F1 | 	sub	local06, #10
2ce7c     15 2D 32 F9 | 	getword	local08, local07, #0
2ce80     01 2C 86 F1 | 	sub	local08, #1
2ce84     16 23 0A F5 | 	and	local03, local08 wz
2ce88     18 4E 05 F1 | 	add	fp, #24
2ce8c     A7 22 62 FC | 	wrlong	local03, fp
2ce90     30 4E 85 F1 | 	sub	fp, #48
2ce94     E0 00 90 5D |  if_ne	jmp	#LR__4587
2ce98     04 4E 05 F1 | 	add	fp, #4
2ce9c     A7 22 02 FB | 	rdlong	local03, fp
2cea0     04 4E 85 F1 | 	sub	fp, #4
2cea4     14 22 06 F1 | 	add	local03, #20
2cea8     11 23 0A FB | 	rdlong	local03, local03 wz
2ceac     20 00 90 5D |  if_ne	jmp	#LR__4583
2ceb0     04 4E 05 F1 | 	add	fp, #4
2ceb4     A7 22 02 FB | 	rdlong	local03, fp
2ceb8     08 22 06 F1 | 	add	local03, #8
2cebc     11 23 02 FB | 	rdlong	local03, local03
2cec0     18 4E 05 F1 | 	add	fp, #24
2cec4     A7 22 62 FC | 	wrlong	local03, fp
2cec8     1C 4E 85 F1 | 	sub	fp, #28
2cecc     28 00 90 FD | 	jmp	#LR__4584
2ced0                 | LR__4583
2ced0     04 4E 05 F1 | 	add	fp, #4
2ced4     A7 2C 02 FB | 	rdlong	local08, fp
2ced8     16 13 02 F6 | 	mov	arg01, local08
2cedc     04 4E 85 F1 | 	sub	fp, #4
2cee0     18 2C 06 F1 | 	add	local08, #24
2cee4     16 15 02 FB | 	rdlong	arg02, local08
2cee8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2ceec     1C 4E 05 F1 | 	add	fp, #28
2cef0     A7 FA 61 FC | 	wrlong	result1, fp
2cef4     1C 4E 85 F1 | 	sub	fp, #28
2cef8                 | LR__4584
2cef8     1C 4E 05 F1 | 	add	fp, #28
2cefc     A7 22 02 FB | 	rdlong	local03, fp
2cf00     1C 4E 85 F1 | 	sub	fp, #28
2cf04     02 22 16 F2 | 	cmp	local03, #2 wc
2cf08     1C 00 90 3D |  if_ae	jmp	#LR__4585
2cf0c     04 4E 05 F1 | 	add	fp, #4
2cf10     A7 22 02 FB | 	rdlong	local03, fp
2cf14     04 4E 85 F1 | 	sub	fp, #4
2cf18     11 22 06 F1 | 	add	local03, #17
2cf1c     11 05 48 FC | 	wrbyte	#2, local03
2cf20     02 FA 05 F6 | 	mov	result1, #2
2cf24     74 04 90 FD | 	jmp	#LR__4600
2cf28                 | LR__4585
2cf28     1C 4E 05 F1 | 	add	fp, #28
2cf2c     A7 22 02 FB | 	rdlong	local03, fp
2cf30     1C 4E 85 F1 | 	sub	fp, #28
2cf34     FF FF 7F FF 
2cf38     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2cf3c     1C 00 90 5D |  if_ne	jmp	#LR__4586
2cf40     04 4E 05 F1 | 	add	fp, #4
2cf44     A7 22 02 FB | 	rdlong	local03, fp
2cf48     04 4E 85 F1 | 	sub	fp, #4
2cf4c     11 22 06 F1 | 	add	local03, #17
2cf50     11 03 48 FC | 	wrbyte	#1, local03
2cf54     01 FA 05 F6 | 	mov	result1, #1
2cf58     40 04 90 FD | 	jmp	#LR__4600
2cf5c                 | LR__4586
2cf5c     04 4E 05 F1 | 	add	fp, #4
2cf60     A7 22 02 FB | 	rdlong	local03, fp
2cf64     18 4E 05 F1 | 	add	fp, #24
2cf68     A7 2C 02 FB | 	rdlong	local08, fp
2cf6c     1C 4E 85 F1 | 	sub	fp, #28
2cf70     18 22 06 F1 | 	add	local03, #24
2cf74     11 2D 62 FC | 	wrlong	local08, local03
2cf78                 | LR__4587
2cf78     18 4E 05 F1 | 	add	fp, #24
2cf7c     A7 12 02 FB | 	rdlong	arg01, fp
2cf80     14 4E 85 F1 | 	sub	fp, #20
2cf84     A7 22 02 FB | 	rdlong	local03, fp
2cf88     04 4E 85 F1 | 	sub	fp, #4
2cf8c     18 22 06 F1 | 	add	local03, #24
2cf90     11 15 02 FB | 	rdlong	arg02, local03
2cf94     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2cf98     20 4E 05 F1 | 	add	fp, #32
2cf9c     A7 FA 61 FC | 	wrlong	result1, fp
2cfa0     20 4E 85 F1 | 	sub	fp, #32
2cfa4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfa8     1C 00 90 5D |  if_ne	jmp	#LR__4588
2cfac     04 4E 05 F1 | 	add	fp, #4
2cfb0     A7 22 02 FB | 	rdlong	local03, fp
2cfb4     04 4E 85 F1 | 	sub	fp, #4
2cfb8     11 22 06 F1 | 	add	local03, #17
2cfbc     11 05 48 FC | 	wrbyte	#2, local03
2cfc0     02 FA 05 F6 | 	mov	result1, #2
2cfc4     D4 03 90 FD | 	jmp	#LR__4600
2cfc8                 | LR__4588
2cfc8     20 4E 05 F1 | 	add	fp, #32
2cfcc     A7 22 02 FB | 	rdlong	local03, fp
2cfd0     10 4E 05 F1 | 	add	fp, #16
2cfd4     A7 2C 02 FB | 	rdlong	local08, fp
2cfd8     16 23 02 F1 | 	add	local03, local08
2cfdc     10 4E 85 F1 | 	sub	fp, #16
2cfe0     A7 22 62 FC | 	wrlong	local03, fp
2cfe4     14 4E 85 F1 | 	sub	fp, #20
2cfe8     A7 22 02 FB | 	rdlong	local03, fp
2cfec     09 22 46 F0 | 	shr	local03, #9
2cff0     20 4E 05 F1 | 	add	fp, #32
2cff4     A7 22 62 FC | 	wrlong	local03, fp
2cff8     2C 4E 85 F1 | 	sub	fp, #44
2cffc     01 22 16 F2 | 	cmp	local03, #1 wc
2d000     5C 01 90 CD |  if_b	jmp	#LR__4592
2d004     30 4E 05 F1 | 	add	fp, #48
2d008     A7 22 02 FB | 	rdlong	local03, fp
2d00c     04 4E 85 F1 | 	sub	fp, #4
2d010     A7 2C 02 FB | 	rdlong	local08, fp
2d014     16 23 02 F1 | 	add	local03, local08
2d018     14 4E 85 F1 | 	sub	fp, #20
2d01c     A7 2C 02 FB | 	rdlong	local08, fp
2d020     18 4E 85 F1 | 	sub	fp, #24
2d024     0A 2C 06 F1 | 	add	local08, #10
2d028     16 2D E2 FA | 	rdword	local08, local08
2d02c     16 23 1A F2 | 	cmp	local03, local08 wcz
2d030     28 00 90 ED |  if_be	jmp	#LR__4589
2d034     18 4E 05 F1 | 	add	fp, #24
2d038     A7 1E 02 FB | 	rdlong	local01, fp
2d03c     0A 1E 06 F1 | 	add	local01, #10
2d040     0F 23 E2 FA | 	rdword	local03, local01
2d044     18 4E 05 F1 | 	add	fp, #24
2d048     A7 2C 02 FB | 	rdlong	local08, fp
2d04c     16 23 82 F1 | 	sub	local03, local08
2d050     04 4E 85 F1 | 	sub	fp, #4
2d054     A7 22 62 FC | 	wrlong	local03, fp
2d058     2C 4E 85 F1 | 	sub	fp, #44
2d05c                 | LR__4589
2d05c     18 4E 05 F1 | 	add	fp, #24
2d060     A7 1E 02 FB | 	rdlong	local01, fp
2d064     01 1E 06 F1 | 	add	local01, #1
2d068     0F 13 C2 FA | 	rdbyte	arg01, local01
2d06c     1C 4E 05 F1 | 	add	fp, #28
2d070     A7 14 02 FB | 	rdlong	arg02, fp
2d074     14 4E 85 F1 | 	sub	fp, #20
2d078     A7 16 02 FB | 	rdlong	arg03, fp
2d07c     0C 4E 05 F1 | 	add	fp, #12
2d080     A7 18 02 FB | 	rdlong	arg04, fp
2d084     2C 4E 85 F1 | 	sub	fp, #44
2d088     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2d08c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d090     1C 00 90 AD |  if_e	jmp	#LR__4590
2d094     04 4E 05 F1 | 	add	fp, #4
2d098     A7 22 02 FB | 	rdlong	local03, fp
2d09c     04 4E 85 F1 | 	sub	fp, #4
2d0a0     11 22 06 F1 | 	add	local03, #17
2d0a4     11 03 48 FC | 	wrbyte	#1, local03
2d0a8     01 FA 05 F6 | 	mov	result1, #1
2d0ac     EC 02 90 FD | 	jmp	#LR__4600
2d0b0                 | LR__4590
2d0b0     04 4E 05 F1 | 	add	fp, #4
2d0b4     A7 1E 02 FB | 	rdlong	local01, fp
2d0b8     04 4E 85 F1 | 	sub	fp, #4
2d0bc     10 1E 06 F1 | 	add	local01, #16
2d0c0     0F 23 C2 FA | 	rdbyte	local03, local01
2d0c4     80 22 CE F7 | 	test	local03, #128 wz
2d0c8     78 00 90 AD |  if_e	jmp	#LR__4591
2d0cc     04 4E 05 F1 | 	add	fp, #4
2d0d0     A7 2C 02 FB | 	rdlong	local08, fp
2d0d4     1C 2C 06 F1 | 	add	local08, #28
2d0d8     16 2D 02 FB | 	rdlong	local08, local08
2d0dc     1C 4E 05 F1 | 	add	fp, #28
2d0e0     A7 2E 02 FB | 	rdlong	local09, fp
2d0e4     17 2D 82 F1 | 	sub	local08, local09
2d0e8     0C 4E 05 F1 | 	add	fp, #12
2d0ec     A7 30 02 FB | 	rdlong	local10, fp
2d0f0     2C 4E 85 F1 | 	sub	fp, #44
2d0f4     18 33 02 F6 | 	mov	local11, local10
2d0f8     19 2D 12 F2 | 	cmp	local08, local11 wc
2d0fc     44 00 90 3D |  if_ae	jmp	#LR__4591
2d100     34 4E 05 F1 | 	add	fp, #52
2d104     A7 12 02 FB | 	rdlong	arg01, fp
2d108     30 4E 85 F1 | 	sub	fp, #48
2d10c     A7 14 02 FB | 	rdlong	arg02, fp
2d110     0A 33 02 F6 | 	mov	local11, arg02
2d114     1C 32 06 F1 | 	add	local11, #28
2d118     19 2F 02 FB | 	rdlong	local09, local11
2d11c     1C 4E 05 F1 | 	add	fp, #28
2d120     A7 26 02 FB | 	rdlong	local05, fp
2d124     13 2F 82 F1 | 	sub	local09, local05
2d128     09 2E 66 F0 | 	shl	local09, #9
2d12c     17 33 02 F6 | 	mov	local11, local09
2d130     17 13 02 F1 | 	add	arg01, local09
2d134     20 4E 85 F1 | 	sub	fp, #32
2d138     28 14 06 F1 | 	add	arg02, #40
2d13c     09 16 C6 F9 | 	decod	arg03, #9
2d140     60 43 BF FD | 	call	#__system____builtin_memmove
2d144                 | LR__4591
2d144     2C 4E 05 F1 | 	add	fp, #44
2d148     A7 22 02 FB | 	rdlong	local03, fp
2d14c     09 22 66 F0 | 	shl	local03, #9
2d150     04 4E 85 F1 | 	sub	fp, #4
2d154     A7 22 62 FC | 	wrlong	local03, fp
2d158     28 4E 85 F1 | 	sub	fp, #40
2d15c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2d15c                 | ' 				}
2d15c                 | ' 
2d15c                 | ' 
2d15c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2d15c                 | ' 				continue;
2d15c     B4 01 90 FD | 	jmp	#LR__4598
2d160                 | LR__4592
2d160     04 4E 05 F1 | 	add	fp, #4
2d164     A7 22 02 FB | 	rdlong	local03, fp
2d168     1C 22 06 F1 | 	add	local03, #28
2d16c     11 23 02 FB | 	rdlong	local03, local03
2d170     1C 4E 05 F1 | 	add	fp, #28
2d174     A7 1E 02 FB | 	rdlong	local01, fp
2d178     20 4E 85 F1 | 	sub	fp, #32
2d17c     0F 23 0A F2 | 	cmp	local03, local01 wz
2d180     EC 00 90 AD |  if_e	jmp	#LR__4596
2d184     04 4E 05 F1 | 	add	fp, #4
2d188     A7 1E 02 FB | 	rdlong	local01, fp
2d18c     04 4E 85 F1 | 	sub	fp, #4
2d190     10 1E 06 F1 | 	add	local01, #16
2d194     0F 23 C2 FA | 	rdbyte	local03, local01
2d198     80 22 CE F7 | 	test	local03, #128 wz
2d19c     7C 00 90 AD |  if_e	jmp	#LR__4594
2d1a0     18 4E 05 F1 | 	add	fp, #24
2d1a4     A7 1E 02 FB | 	rdlong	local01, fp
2d1a8     01 1E 06 F1 | 	add	local01, #1
2d1ac     0F 13 C2 FA | 	rdbyte	arg01, local01
2d1b0     14 4E 85 F1 | 	sub	fp, #20
2d1b4     A7 22 02 FB | 	rdlong	local03, fp
2d1b8     11 15 02 F6 | 	mov	arg02, local03
2d1bc     28 14 06 F1 | 	add	arg02, #40
2d1c0     04 4E 85 F1 | 	sub	fp, #4
2d1c4     1C 22 06 F1 | 	add	local03, #28
2d1c8     11 17 02 FB | 	rdlong	arg03, local03
2d1cc     01 18 06 F6 | 	mov	arg04, #1
2d1d0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2d1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d1d8     1C 00 90 AD |  if_e	jmp	#LR__4593
2d1dc     04 4E 05 F1 | 	add	fp, #4
2d1e0     A7 22 02 FB | 	rdlong	local03, fp
2d1e4     04 4E 85 F1 | 	sub	fp, #4
2d1e8     11 22 06 F1 | 	add	local03, #17
2d1ec     11 03 48 FC | 	wrbyte	#1, local03
2d1f0     01 FA 05 F6 | 	mov	result1, #1
2d1f4     A4 01 90 FD | 	jmp	#LR__4600
2d1f8                 | LR__4593
2d1f8     04 4E 05 F1 | 	add	fp, #4
2d1fc     A7 32 02 FB | 	rdlong	local11, fp
2d200     19 23 02 F6 | 	mov	local03, local11
2d204     04 4E 85 F1 | 	sub	fp, #4
2d208     10 32 06 F1 | 	add	local11, #16
2d20c     19 33 C2 FA | 	rdbyte	local11, local11
2d210     7F 32 06 F5 | 	and	local11, #127
2d214     10 22 06 F1 | 	add	local03, #16
2d218     11 33 42 FC | 	wrbyte	local11, local03
2d21c                 | LR__4594
2d21c     18 4E 05 F1 | 	add	fp, #24
2d220     A7 1E 02 FB | 	rdlong	local01, fp
2d224     01 1E 06 F1 | 	add	local01, #1
2d228     0F 13 C2 FA | 	rdbyte	arg01, local01
2d22c     14 4E 85 F1 | 	sub	fp, #20
2d230     A7 14 02 FB | 	rdlong	arg02, fp
2d234     28 14 06 F1 | 	add	arg02, #40
2d238     1C 4E 05 F1 | 	add	fp, #28
2d23c     A7 16 02 FB | 	rdlong	arg03, fp
2d240     20 4E 85 F1 | 	sub	fp, #32
2d244     01 18 06 F6 | 	mov	arg04, #1
2d248     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2d24c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d250     1C 00 90 AD |  if_e	jmp	#LR__4595
2d254     04 4E 05 F1 | 	add	fp, #4
2d258     A7 22 02 FB | 	rdlong	local03, fp
2d25c     04 4E 85 F1 | 	sub	fp, #4
2d260     11 22 06 F1 | 	add	local03, #17
2d264     11 03 48 FC | 	wrbyte	#1, local03
2d268     01 FA 05 F6 | 	mov	result1, #1
2d26c     2C 01 90 FD | 	jmp	#LR__4600
2d270                 | LR__4595
2d270                 | LR__4596
2d270     04 4E 05 F1 | 	add	fp, #4
2d274     A7 22 02 FB | 	rdlong	local03, fp
2d278     1C 4E 05 F1 | 	add	fp, #28
2d27c     A7 32 02 FB | 	rdlong	local11, fp
2d280     20 4E 85 F1 | 	sub	fp, #32
2d284     1C 22 06 F1 | 	add	local03, #28
2d288     11 33 62 FC | 	wrlong	local11, local03
2d28c                 | LR__4597
2d28c     04 4E 05 F1 | 	add	fp, #4
2d290     A7 1E 02 FB | 	rdlong	local01, fp
2d294     14 1E 06 F1 | 	add	local01, #20
2d298     0F 33 02 FB | 	rdlong	local11, local01
2d29c     FF 33 06 F5 | 	and	local11, #511
2d2a0     09 22 C6 F9 | 	decod	local03, #9
2d2a4     19 23 82 F1 | 	sub	local03, local11
2d2a8     24 4E 05 F1 | 	add	fp, #36
2d2ac     A7 22 62 FC | 	wrlong	local03, fp
2d2b0     1C 4E 85 F1 | 	sub	fp, #28
2d2b4     A7 32 02 FB | 	rdlong	local11, fp
2d2b8     0C 4E 85 F1 | 	sub	fp, #12
2d2bc     19 23 1A F2 | 	cmp	local03, local11 wcz
2d2c0     0C 4E 05 11 |  if_a	add	fp, #12
2d2c4     A7 22 02 1B |  if_a	rdlong	local03, fp
2d2c8     1C 4E 05 11 |  if_a	add	fp, #28
2d2cc     A7 22 62 1C |  if_a	wrlong	local03, fp
2d2d0     28 4E 85 11 |  if_a	sub	fp, #40
2d2d4     34 4E 05 F1 | 	add	fp, #52
2d2d8     A7 12 02 FB | 	rdlong	arg01, fp
2d2dc     30 4E 85 F1 | 	sub	fp, #48
2d2e0     A7 28 02 FB | 	rdlong	local06, fp
2d2e4     14 15 02 F6 | 	mov	arg02, local06
2d2e8     28 14 06 F1 | 	add	arg02, #40
2d2ec     14 28 06 F1 | 	add	local06, #20
2d2f0     14 33 02 FB | 	rdlong	local11, local06
2d2f4     19 2F 02 F6 | 	mov	local09, local11
2d2f8     17 31 02 F6 | 	mov	local10, local09
2d2fc     FF 31 06 F5 | 	and	local10, #511
2d300     18 15 02 F1 | 	add	arg02, local10
2d304     24 4E 05 F1 | 	add	fp, #36
2d308     A7 16 02 FB | 	rdlong	arg03, fp
2d30c     28 4E 85 F1 | 	sub	fp, #40
2d310     90 41 BF FD | 	call	#__system____builtin_memmove
2d314                 | LR__4598
2d314     0C 4E 05 F1 | 	add	fp, #12
2d318     A7 22 02 FB | 	rdlong	local03, fp
2d31c     1C 4E 05 F1 | 	add	fp, #28
2d320     A7 2C 02 FB | 	rdlong	local08, fp
2d324     16 23 82 F1 | 	sub	local03, local08
2d328     1C 4E 85 F1 | 	sub	fp, #28
2d32c     A7 22 62 FC | 	wrlong	local03, fp
2d330     04 4E 05 F1 | 	add	fp, #4
2d334     A7 1E 02 FB | 	rdlong	local01, fp
2d338     0F 2B 02 FB | 	rdlong	local07, local01
2d33c     18 4E 05 F1 | 	add	fp, #24
2d340     A7 2C 02 FB | 	rdlong	local08, fp
2d344     16 2B 02 F1 | 	add	local07, local08
2d348     0F 2B 62 FC | 	wrlong	local07, local01
2d34c     0C 4E 05 F1 | 	add	fp, #12
2d350     A7 22 02 FB | 	rdlong	local03, fp
2d354     0C 4E 85 F1 | 	sub	fp, #12
2d358     A7 34 02 FB | 	rdlong	local12, fp
2d35c     1A 23 02 F1 | 	add	local03, local12
2d360     0C 4E 05 F1 | 	add	fp, #12
2d364     A7 22 62 FC | 	wrlong	local03, fp
2d368     30 4E 85 F1 | 	sub	fp, #48
2d36c     A7 36 02 FB | 	rdlong	local13, fp
2d370     1B 23 02 F6 | 	mov	local03, local13
2d374     14 36 06 F1 | 	add	local13, #20
2d378     1B 39 02 FB | 	rdlong	local14, local13
2d37c     24 4E 05 F1 | 	add	fp, #36
2d380     A7 28 02 FB | 	rdlong	local06, fp
2d384     28 4E 85 F1 | 	sub	fp, #40
2d388     14 39 02 F1 | 	add	local14, local06
2d38c     14 22 06 F1 | 	add	local03, #20
2d390     11 39 62 FC | 	wrlong	local14, local03
2d394     84 FA 9F FD | 	jmp	#LR__4582
2d398                 | LR__4599
2d398                 | ' 
2d398                 | ' 
2d398                 | ' 
2d398                 | ' 
2d398                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2d398                 | ' 
2d398                 | ' 	}
2d398                 | ' 
2d398                 | ' 	return FR_OK ;
2d398     00 FA 05 F6 | 	mov	result1, #0
2d39c                 | LR__4600
2d39c     A7 F0 03 F6 | 	mov	ptra, fp
2d3a0     B2 00 A0 FD | 	call	#popregs_
2d3a4                 | _fatfs_cc_f_read_ret
2d3a4     2D 00 64 FD | 	ret
2d3a8                 | 
2d3a8                 | _fatfs_cc_f_write
2d3a8     15 4A 05 F6 | 	mov	COUNT_, #21
2d3ac     A8 00 A0 FD | 	call	#pushregs_
2d3b0     34 F0 07 F1 | 	add	ptra, #52
2d3b4     04 4E 05 F1 | 	add	fp, #4
2d3b8     A7 12 62 FC | 	wrlong	arg01, fp
2d3bc     04 4E 05 F1 | 	add	fp, #4
2d3c0     A7 14 62 FC | 	wrlong	arg02, fp
2d3c4     04 4E 05 F1 | 	add	fp, #4
2d3c8     A7 16 62 FC | 	wrlong	arg03, fp
2d3cc     04 4E 05 F1 | 	add	fp, #4
2d3d0     A7 18 62 FC | 	wrlong	arg04, fp
2d3d4     08 4E 85 F1 | 	sub	fp, #8
2d3d8     A7 FA 01 FB | 	rdlong	result1, fp
2d3dc     28 4E 05 F1 | 	add	fp, #40
2d3e0     A7 FA 61 FC | 	wrlong	result1, fp
2d3e4     20 4E 85 F1 | 	sub	fp, #32
2d3e8     A7 FA 01 FB | 	rdlong	result1, fp
2d3ec     FD 00 68 FC | 	wrlong	#0, result1
2d3f0     0C 4E 85 F1 | 	sub	fp, #12
2d3f4     A7 12 02 FB | 	rdlong	arg01, fp
2d3f8     14 4E 05 F1 | 	add	fp, #20
2d3fc     A7 14 02 F6 | 	mov	arg02, fp
2d400     18 4E 85 F1 | 	sub	fp, #24
2d404     88 F0 BF FD | 	call	#_fatfs_cc_validate
2d408     14 4E 05 F1 | 	add	fp, #20
2d40c     A7 FA 61 FC | 	wrlong	result1, fp
2d410     00 FA 4D F2 | 	cmps	result1, #0 wz
2d414     14 4E 85 F1 | 	sub	fp, #20
2d418     20 00 90 5D |  if_ne	jmp	#LR__4610
2d41c     04 4E 05 F1 | 	add	fp, #4
2d420     A7 14 02 FB | 	rdlong	arg02, fp
2d424     11 14 06 F1 | 	add	arg02, #17
2d428     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2d42c     10 4E 05 F1 | 	add	fp, #16
2d430     A7 14 62 FC | 	wrlong	arg02, fp
2d434     14 4E 85 F1 | 	sub	fp, #20
2d438     10 00 90 AD |  if_e	jmp	#LR__4611
2d43c                 | LR__4610
2d43c     14 4E 05 F1 | 	add	fp, #20
2d440     A7 FA 01 FB | 	rdlong	result1, fp
2d444     14 4E 85 F1 | 	sub	fp, #20
2d448     44 07 90 FD | 	jmp	#LR__4633
2d44c                 | LR__4611
2d44c     04 4E 05 F1 | 	add	fp, #4
2d450     A7 14 02 FB | 	rdlong	arg02, fp
2d454     04 4E 85 F1 | 	sub	fp, #4
2d458     10 14 06 F1 | 	add	arg02, #16
2d45c     0A 15 C2 FA | 	rdbyte	arg02, arg02
2d460     02 14 CE F7 | 	test	arg02, #2 wz
2d464     07 FA 05 A6 |  if_e	mov	result1, #7
2d468     24 07 90 AD |  if_e	jmp	#LR__4633
2d46c     04 4E 05 F1 | 	add	fp, #4
2d470     A7 14 02 FB | 	rdlong	arg02, fp
2d474     0A 13 02 F6 | 	mov	arg01, arg02
2d478     14 12 06 F1 | 	add	arg01, #20
2d47c     09 13 02 FB | 	rdlong	arg01, arg01
2d480     08 4E 05 F1 | 	add	fp, #8
2d484     A7 FA 01 FB | 	rdlong	result1, fp
2d488     FD 12 02 F1 | 	add	arg01, result1
2d48c     0C 4E 85 F1 | 	sub	fp, #12
2d490     14 14 06 F1 | 	add	arg02, #20
2d494     0A FB 01 FB | 	rdlong	result1, arg02
2d498     FD 12 12 F2 | 	cmp	arg01, result1 wc
2d49c     24 00 90 3D |  if_ae	jmp	#LR__4612
2d4a0     04 4E 05 F1 | 	add	fp, #4
2d4a4     A7 14 02 FB | 	rdlong	arg02, fp
2d4a8     01 FA 65 F6 | 	neg	result1, #1
2d4ac     14 14 06 F1 | 	add	arg02, #20
2d4b0     0A 15 02 FB | 	rdlong	arg02, arg02
2d4b4     0A FB 81 F1 | 	sub	result1, arg02
2d4b8     08 4E 05 F1 | 	add	fp, #8
2d4bc     A7 FA 61 FC | 	wrlong	result1, fp
2d4c0     0C 4E 85 F1 | 	sub	fp, #12
2d4c4                 | LR__4612
2d4c4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2d4c4                 | ' 	}
2d4c4                 | ' 
2d4c4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2d4c4                 | LR__4613
2d4c4     0C 4E 05 F1 | 	add	fp, #12
2d4c8     A7 FA 01 FB | 	rdlong	result1, fp
2d4cc     0C 4E 85 F1 | 	sub	fp, #12
2d4d0     01 FA 15 F2 | 	cmp	result1, #1 wc
2d4d4     90 06 90 CD |  if_b	jmp	#LR__4632
2d4d8     04 4E 05 F1 | 	add	fp, #4
2d4dc     A7 FA 01 FB | 	rdlong	result1, fp
2d4e0     04 4E 85 F1 | 	sub	fp, #4
2d4e4     14 FA 05 F1 | 	add	result1, #20
2d4e8     FD FA 01 FB | 	rdlong	result1, result1
2d4ec     FF FB CD F7 | 	test	result1, #511 wz
2d4f0     D8 04 90 5D |  if_ne	jmp	#LR__4628
2d4f4     04 4E 05 F1 | 	add	fp, #4
2d4f8     A7 FA 01 FB | 	rdlong	result1, fp
2d4fc     14 FA 05 F1 | 	add	result1, #20
2d500     FD FA 01 FB | 	rdlong	result1, result1
2d504     09 FA 45 F0 | 	shr	result1, #9
2d508     14 4E 05 F1 | 	add	fp, #20
2d50c     A7 14 02 FB | 	rdlong	arg02, fp
2d510     0A 14 06 F1 | 	add	arg02, #10
2d514     0A 19 E2 FA | 	rdword	arg04, arg02
2d518     0C 15 32 F9 | 	getword	arg02, arg04, #0
2d51c     01 14 86 F1 | 	sub	arg02, #1
2d520     0A FB 09 F5 | 	and	result1, arg02 wz
2d524     14 4E 05 F1 | 	add	fp, #20
2d528     A7 FA 61 FC | 	wrlong	result1, fp
2d52c     2C 4E 85 F1 | 	sub	fp, #44
2d530     44 01 90 5D |  if_ne	jmp	#LR__4619
2d534     04 4E 05 F1 | 	add	fp, #4
2d538     A7 FA 01 FB | 	rdlong	result1, fp
2d53c     04 4E 85 F1 | 	sub	fp, #4
2d540     14 FA 05 F1 | 	add	result1, #20
2d544     FD 14 0A FB | 	rdlong	arg02, result1 wz
2d548     44 00 90 5D |  if_ne	jmp	#LR__4614
2d54c     04 4E 05 F1 | 	add	fp, #4
2d550     A7 14 02 FB | 	rdlong	arg02, fp
2d554     08 14 06 F1 | 	add	arg02, #8
2d558     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2d55c     18 4E 05 F1 | 	add	fp, #24
2d560     A7 14 62 FC | 	wrlong	arg02, fp
2d564     1C 4E 85 F1 | 	sub	fp, #28
2d568     4C 00 90 5D |  if_ne	jmp	#LR__4615
2d56c     04 4E 05 F1 | 	add	fp, #4
2d570     A7 12 02 FB | 	rdlong	arg01, fp
2d574     04 4E 85 F1 | 	sub	fp, #4
2d578     00 14 06 F6 | 	mov	arg02, #0
2d57c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2d580     1C 4E 05 F1 | 	add	fp, #28
2d584     A7 FA 61 FC | 	wrlong	result1, fp
2d588     1C 4E 85 F1 | 	sub	fp, #28
2d58c     28 00 90 FD | 	jmp	#LR__4615
2d590                 | LR__4614
2d590     04 4E 05 F1 | 	add	fp, #4
2d594     A7 18 02 FB | 	rdlong	arg04, fp
2d598     0C 13 02 F6 | 	mov	arg01, arg04
2d59c     04 4E 85 F1 | 	sub	fp, #4
2d5a0     18 18 06 F1 | 	add	arg04, #24
2d5a4     0C 15 02 FB | 	rdlong	arg02, arg04
2d5a8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2d5ac     1C 4E 05 F1 | 	add	fp, #28
2d5b0     A7 FA 61 FC | 	wrlong	result1, fp
2d5b4     1C 4E 85 F1 | 	sub	fp, #28
2d5b8                 | LR__4615
2d5b8     1C 4E 05 F1 | 	add	fp, #28
2d5bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2d5c0     1C 4E 85 F1 | 	sub	fp, #28
2d5c4     A0 05 90 AD |  if_e	jmp	#LR__4632
2d5c8     1C 4E 05 F1 | 	add	fp, #28
2d5cc     A7 FA 01 FB | 	rdlong	result1, fp
2d5d0     1C 4E 85 F1 | 	sub	fp, #28
2d5d4     01 FA 0D F2 | 	cmp	result1, #1 wz
2d5d8     1C 00 90 5D |  if_ne	jmp	#LR__4616
2d5dc     04 4E 05 F1 | 	add	fp, #4
2d5e0     A7 FA 01 FB | 	rdlong	result1, fp
2d5e4     04 4E 85 F1 | 	sub	fp, #4
2d5e8     11 FA 05 F1 | 	add	result1, #17
2d5ec     FD 04 48 FC | 	wrbyte	#2, result1
2d5f0     02 FA 05 F6 | 	mov	result1, #2
2d5f4     98 05 90 FD | 	jmp	#LR__4633
2d5f8                 | LR__4616
2d5f8     1C 4E 05 F1 | 	add	fp, #28
2d5fc     A7 FA 01 FB | 	rdlong	result1, fp
2d600     1C 4E 85 F1 | 	sub	fp, #28
2d604     FF FF 7F FF 
2d608     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d60c     1C 00 90 5D |  if_ne	jmp	#LR__4617
2d610     04 4E 05 F1 | 	add	fp, #4
2d614     A7 FA 01 FB | 	rdlong	result1, fp
2d618     04 4E 85 F1 | 	sub	fp, #4
2d61c     11 FA 05 F1 | 	add	result1, #17
2d620     FD 02 48 FC | 	wrbyte	#1, result1
2d624     01 FA 05 F6 | 	mov	result1, #1
2d628     64 05 90 FD | 	jmp	#LR__4633
2d62c                 | LR__4617
2d62c     04 4E 05 F1 | 	add	fp, #4
2d630     A7 FA 01 FB | 	rdlong	result1, fp
2d634     18 4E 05 F1 | 	add	fp, #24
2d638     A7 18 02 FB | 	rdlong	arg04, fp
2d63c     18 FA 05 F1 | 	add	result1, #24
2d640     FD 18 62 FC | 	wrlong	arg04, result1
2d644     18 4E 85 F1 | 	sub	fp, #24
2d648     A7 FA 01 FB | 	rdlong	result1, fp
2d64c     04 4E 85 F1 | 	sub	fp, #4
2d650     08 FA 05 F1 | 	add	result1, #8
2d654     FD FA 09 FB | 	rdlong	result1, result1 wz
2d658     1C 00 90 5D |  if_ne	jmp	#LR__4618
2d65c     04 4E 05 F1 | 	add	fp, #4
2d660     A7 18 02 FB | 	rdlong	arg04, fp
2d664     18 4E 05 F1 | 	add	fp, #24
2d668     A7 FA 01 FB | 	rdlong	result1, fp
2d66c     1C 4E 85 F1 | 	sub	fp, #28
2d670     08 18 06 F1 | 	add	arg04, #8
2d674     0C FB 61 FC | 	wrlong	result1, arg04
2d678                 | LR__4618
2d678                 | LR__4619
2d678     04 4E 05 F1 | 	add	fp, #4
2d67c     A7 18 02 FB | 	rdlong	arg04, fp
2d680     04 4E 85 F1 | 	sub	fp, #4
2d684     10 18 06 F1 | 	add	arg04, #16
2d688     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d68c     80 18 CE F7 | 	test	arg04, #128 wz
2d690     7C 00 90 AD |  if_e	jmp	#LR__4621
2d694     18 4E 05 F1 | 	add	fp, #24
2d698     A7 18 02 FB | 	rdlong	arg04, fp
2d69c     01 18 06 F1 | 	add	arg04, #1
2d6a0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d6a4     14 4E 85 F1 | 	sub	fp, #20
2d6a8     A7 18 02 FB | 	rdlong	arg04, fp
2d6ac     0C 15 02 F6 | 	mov	arg02, arg04
2d6b0     28 14 06 F1 | 	add	arg02, #40
2d6b4     04 4E 85 F1 | 	sub	fp, #4
2d6b8     1C 18 06 F1 | 	add	arg04, #28
2d6bc     0C 17 02 FB | 	rdlong	arg03, arg04
2d6c0     01 18 06 F6 | 	mov	arg04, #1
2d6c4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2d6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6cc     1C 00 90 AD |  if_e	jmp	#LR__4620
2d6d0     04 4E 05 F1 | 	add	fp, #4
2d6d4     A7 FA 01 FB | 	rdlong	result1, fp
2d6d8     04 4E 85 F1 | 	sub	fp, #4
2d6dc     11 FA 05 F1 | 	add	result1, #17
2d6e0     FD 02 48 FC | 	wrbyte	#1, result1
2d6e4     01 FA 05 F6 | 	mov	result1, #1
2d6e8     A4 04 90 FD | 	jmp	#LR__4633
2d6ec                 | LR__4620
2d6ec     04 4E 05 F1 | 	add	fp, #4
2d6f0     A7 18 02 FB | 	rdlong	arg04, fp
2d6f4     0C FB 01 F6 | 	mov	result1, arg04
2d6f8     04 4E 85 F1 | 	sub	fp, #4
2d6fc     10 18 06 F1 | 	add	arg04, #16
2d700     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d704     7F 18 06 F5 | 	and	arg04, #127
2d708     10 FA 05 F1 | 	add	result1, #16
2d70c     FD 18 42 FC | 	wrbyte	arg04, result1
2d710                 | LR__4621
2d710     18 4E 05 F1 | 	add	fp, #24
2d714     A7 12 02 FB | 	rdlong	arg01, fp
2d718     14 4E 85 F1 | 	sub	fp, #20
2d71c     A7 14 02 FB | 	rdlong	arg02, fp
2d720     04 4E 85 F1 | 	sub	fp, #4
2d724     18 14 06 F1 | 	add	arg02, #24
2d728     0A 15 02 FB | 	rdlong	arg02, arg02
2d72c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2d730     20 4E 05 F1 | 	add	fp, #32
2d734     A7 FA 61 FC | 	wrlong	result1, fp
2d738     20 4E 85 F1 | 	sub	fp, #32
2d73c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d740     1C 00 90 5D |  if_ne	jmp	#LR__4622
2d744     04 4E 05 F1 | 	add	fp, #4
2d748     A7 FA 01 FB | 	rdlong	result1, fp
2d74c     04 4E 85 F1 | 	sub	fp, #4
2d750     11 FA 05 F1 | 	add	result1, #17
2d754     FD 04 48 FC | 	wrbyte	#2, result1
2d758     02 FA 05 F6 | 	mov	result1, #2
2d75c     30 04 90 FD | 	jmp	#LR__4633
2d760                 | LR__4622
2d760     20 4E 05 F1 | 	add	fp, #32
2d764     A7 FA 01 FB | 	rdlong	result1, fp
2d768     0C 4E 05 F1 | 	add	fp, #12
2d76c     A7 1E 02 FB | 	rdlong	local01, fp
2d770     0F FB 01 F1 | 	add	result1, local01
2d774     0C 4E 85 F1 | 	sub	fp, #12
2d778     A7 FA 61 FC | 	wrlong	result1, fp
2d77c     14 4E 85 F1 | 	sub	fp, #20
2d780     A7 FA 01 FB | 	rdlong	result1, fp
2d784     09 FA 45 F0 | 	shr	result1, #9
2d788     1C 4E 05 F1 | 	add	fp, #28
2d78c     A7 FA 61 FC | 	wrlong	result1, fp
2d790     28 4E 85 F1 | 	sub	fp, #40
2d794     01 FA 15 F2 | 	cmp	result1, #1 wc
2d798     60 01 90 CD |  if_b	jmp	#LR__4626
2d79c     2C 4E 05 F1 | 	add	fp, #44
2d7a0     A7 FA 01 FB | 	rdlong	result1, fp
2d7a4     04 4E 85 F1 | 	sub	fp, #4
2d7a8     A7 18 02 FB | 	rdlong	arg04, fp
2d7ac     0C FB 01 F1 | 	add	result1, arg04
2d7b0     10 4E 85 F1 | 	sub	fp, #16
2d7b4     A7 18 02 FB | 	rdlong	arg04, fp
2d7b8     18 4E 85 F1 | 	sub	fp, #24
2d7bc     0A 18 06 F1 | 	add	arg04, #10
2d7c0     0C 19 E2 FA | 	rdword	arg04, arg04
2d7c4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2d7c8     28 00 90 ED |  if_be	jmp	#LR__4623
2d7cc     18 4E 05 F1 | 	add	fp, #24
2d7d0     A7 FA 01 FB | 	rdlong	result1, fp
2d7d4     0A FA 05 F1 | 	add	result1, #10
2d7d8     FD FA E1 FA | 	rdword	result1, result1
2d7dc     14 4E 05 F1 | 	add	fp, #20
2d7e0     A7 18 02 FB | 	rdlong	arg04, fp
2d7e4     0C FB 81 F1 | 	sub	result1, arg04
2d7e8     04 4E 85 F1 | 	sub	fp, #4
2d7ec     A7 FA 61 FC | 	wrlong	result1, fp
2d7f0     28 4E 85 F1 | 	sub	fp, #40
2d7f4                 | LR__4623
2d7f4     18 4E 05 F1 | 	add	fp, #24
2d7f8     A7 18 02 FB | 	rdlong	arg04, fp
2d7fc     01 18 06 F1 | 	add	arg04, #1
2d800     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d804     18 4E 05 F1 | 	add	fp, #24
2d808     A7 14 02 FB | 	rdlong	arg02, fp
2d80c     10 4E 85 F1 | 	sub	fp, #16
2d810     A7 16 02 FB | 	rdlong	arg03, fp
2d814     08 4E 05 F1 | 	add	fp, #8
2d818     A7 18 02 FB | 	rdlong	arg04, fp
2d81c     28 4E 85 F1 | 	sub	fp, #40
2d820     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2d824     00 FA 0D F2 | 	cmp	result1, #0 wz
2d828     1C 00 90 AD |  if_e	jmp	#LR__4624
2d82c     04 4E 05 F1 | 	add	fp, #4
2d830     A7 1E 02 FB | 	rdlong	local01, fp
2d834     04 4E 85 F1 | 	sub	fp, #4
2d838     11 1E 06 F1 | 	add	local01, #17
2d83c     0F 03 48 FC | 	wrbyte	#1, local01
2d840     01 FA 05 F6 | 	mov	result1, #1
2d844     48 03 90 FD | 	jmp	#LR__4633
2d848                 | LR__4624
2d848     04 4E 05 F1 | 	add	fp, #4
2d84c     A7 FA 01 FB | 	rdlong	result1, fp
2d850     1C FA 05 F1 | 	add	result1, #28
2d854     FD FA 01 FB | 	rdlong	result1, result1
2d858     1C 4E 05 F1 | 	add	fp, #28
2d85c     A7 20 02 FB | 	rdlong	local02, fp
2d860     10 FB 81 F1 | 	sub	result1, local02
2d864     08 4E 05 F1 | 	add	fp, #8
2d868     A7 18 02 FB | 	rdlong	arg04, fp
2d86c     28 4E 85 F1 | 	sub	fp, #40
2d870     0C FB 11 F2 | 	cmp	result1, arg04 wc
2d874     68 00 90 3D |  if_ae	jmp	#LR__4625
2d878     04 4E 05 F1 | 	add	fp, #4
2d87c     A7 12 02 FB | 	rdlong	arg01, fp
2d880     28 12 06 F1 | 	add	arg01, #40
2d884     2C 4E 05 F1 | 	add	fp, #44
2d888     A7 14 02 FB | 	rdlong	arg02, fp
2d88c     2C 4E 85 F1 | 	sub	fp, #44
2d890     A7 FA 01 FB | 	rdlong	result1, fp
2d894     1C FA 05 F1 | 	add	result1, #28
2d898     FD 22 02 FB | 	rdlong	local03, result1
2d89c     1C 4E 05 F1 | 	add	fp, #28
2d8a0     A7 18 02 FB | 	rdlong	arg04, fp
2d8a4     20 4E 85 F1 | 	sub	fp, #32
2d8a8     0C 23 82 F1 | 	sub	local03, arg04
2d8ac     09 22 66 F0 | 	shl	local03, #9
2d8b0     11 15 02 F1 | 	add	arg02, local03
2d8b4     09 16 C6 F9 | 	decod	arg03, #9
2d8b8     E8 3B BF FD | 	call	#__system____builtin_memmove
2d8bc     04 4E 05 F1 | 	add	fp, #4
2d8c0     A7 18 02 FB | 	rdlong	arg04, fp
2d8c4     0C FB 01 F6 | 	mov	result1, arg04
2d8c8     04 4E 85 F1 | 	sub	fp, #4
2d8cc     10 18 06 F1 | 	add	arg04, #16
2d8d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d8d4     7F 18 06 F5 | 	and	arg04, #127
2d8d8     10 FA 05 F1 | 	add	result1, #16
2d8dc     FD 18 42 FC | 	wrbyte	arg04, result1
2d8e0                 | LR__4625
2d8e0     28 4E 05 F1 | 	add	fp, #40
2d8e4     A7 FA 01 FB | 	rdlong	result1, fp
2d8e8     09 FA 65 F0 | 	shl	result1, #9
2d8ec     04 4E 85 F1 | 	sub	fp, #4
2d8f0     A7 FA 61 FC | 	wrlong	result1, fp
2d8f4     24 4E 85 F1 | 	sub	fp, #36
2d8f8                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2d8f8                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2d8f8                 | ' 				}
2d8f8                 | ' 
2d8f8                 | ' 
2d8f8                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2d8f8                 | ' 				continue;
2d8f8     74 01 90 FD | 	jmp	#LR__4629
2d8fc                 | LR__4626
2d8fc     04 4E 05 F1 | 	add	fp, #4
2d900     A7 20 02 FB | 	rdlong	local02, fp
2d904     1C 20 06 F1 | 	add	local02, #28
2d908     10 FB 01 FB | 	rdlong	result1, local02
2d90c     1C 4E 05 F1 | 	add	fp, #28
2d910     A7 20 02 FB | 	rdlong	local02, fp
2d914     20 4E 85 F1 | 	sub	fp, #32
2d918     10 FB 09 F2 | 	cmp	result1, local02 wz
2d91c     90 00 90 AD |  if_e	jmp	#LR__4627
2d920     04 4E 05 F1 | 	add	fp, #4
2d924     A7 FA 01 FB | 	rdlong	result1, fp
2d928     FD 22 02 F6 | 	mov	local03, result1
2d92c     04 4E 85 F1 | 	sub	fp, #4
2d930     14 22 06 F1 | 	add	local03, #20
2d934     11 23 02 FB | 	rdlong	local03, local03
2d938     0C FA 05 F1 | 	add	result1, #12
2d93c     FD 24 02 FB | 	rdlong	local04, result1
2d940     12 27 02 F6 | 	mov	local05, local04
2d944     13 23 12 F2 | 	cmp	local03, local05 wc
2d948     64 00 90 3D |  if_ae	jmp	#LR__4627
2d94c     18 4E 05 F1 | 	add	fp, #24
2d950     A7 18 02 FB | 	rdlong	arg04, fp
2d954     01 18 06 F1 | 	add	arg04, #1
2d958     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d95c     14 4E 85 F1 | 	sub	fp, #20
2d960     A7 28 02 FB | 	rdlong	local06, fp
2d964     28 28 06 F1 | 	add	local06, #40
2d968     14 2B 02 F6 | 	mov	local07, local06
2d96c     1C 4E 05 F1 | 	add	fp, #28
2d970     A7 2C 02 FB | 	rdlong	local08, fp
2d974     20 4E 85 F1 | 	sub	fp, #32
2d978     01 2E 06 F6 | 	mov	local09, #1
2d97c     15 15 02 F6 | 	mov	arg02, local07
2d980     16 17 02 F6 | 	mov	arg03, local08
2d984     01 18 06 F6 | 	mov	arg04, #1
2d988     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2d98c     FD 30 0A F6 | 	mov	local10, result1 wz
2d990     1C 00 90 AD |  if_e	jmp	#LR__4627
2d994     04 4E 05 F1 | 	add	fp, #4
2d998     A7 30 02 FB | 	rdlong	local10, fp
2d99c     04 4E 85 F1 | 	sub	fp, #4
2d9a0     11 30 06 F1 | 	add	local10, #17
2d9a4     18 03 48 FC | 	wrbyte	#1, local10
2d9a8                 | ' 				fp->fptr < fp->obj.objsize &&
2d9a8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2d9a8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2d9a8     01 FA 05 F6 | 	mov	result1, #1
2d9ac     E0 01 90 FD | 	jmp	#LR__4633
2d9b0                 | LR__4627
2d9b0     04 4E 05 F1 | 	add	fp, #4
2d9b4     A7 18 02 FB | 	rdlong	arg04, fp
2d9b8     1C 4E 05 F1 | 	add	fp, #28
2d9bc     A7 FA 01 FB | 	rdlong	result1, fp
2d9c0     20 4E 85 F1 | 	sub	fp, #32
2d9c4     1C 18 06 F1 | 	add	arg04, #28
2d9c8     0C FB 61 FC | 	wrlong	result1, arg04
2d9cc                 | LR__4628
2d9cc     04 4E 05 F1 | 	add	fp, #4
2d9d0     A7 FA 01 FB | 	rdlong	result1, fp
2d9d4     14 FA 05 F1 | 	add	result1, #20
2d9d8     FD FA 01 FB | 	rdlong	result1, result1
2d9dc     FF FB 05 F5 | 	and	result1, #511
2d9e0     09 32 C6 F9 | 	decod	local11, #9
2d9e4     FD 32 82 F1 | 	sub	local11, result1
2d9e8     20 4E 05 F1 | 	add	fp, #32
2d9ec     A7 32 62 FC | 	wrlong	local11, fp
2d9f0     18 4E 85 F1 | 	sub	fp, #24
2d9f4     A7 FA 01 FB | 	rdlong	result1, fp
2d9f8     0C 4E 85 F1 | 	sub	fp, #12
2d9fc     FD 32 1A F2 | 	cmp	local11, result1 wcz
2da00     0C 4E 05 11 |  if_a	add	fp, #12
2da04     A7 32 02 1B |  if_a	rdlong	local11, fp
2da08     18 4E 05 11 |  if_a	add	fp, #24
2da0c     A7 32 62 1C |  if_a	wrlong	local11, fp
2da10     24 4E 85 11 |  if_a	sub	fp, #36
2da14     04 4E 05 F1 | 	add	fp, #4
2da18     A7 32 02 FB | 	rdlong	local11, fp
2da1c     19 13 02 F6 | 	mov	arg01, local11
2da20     28 12 06 F1 | 	add	arg01, #40
2da24     14 32 06 F1 | 	add	local11, #20
2da28     19 33 02 FB | 	rdlong	local11, local11
2da2c     FF 33 06 F5 | 	and	local11, #511
2da30     19 13 02 F1 | 	add	arg01, local11
2da34     2C 4E 05 F1 | 	add	fp, #44
2da38     A7 14 02 FB | 	rdlong	arg02, fp
2da3c     0C 4E 85 F1 | 	sub	fp, #12
2da40     A7 16 02 FB | 	rdlong	arg03, fp
2da44     24 4E 85 F1 | 	sub	fp, #36
2da48     58 3A BF FD | 	call	#__system____builtin_memmove
2da4c     04 4E 05 F1 | 	add	fp, #4
2da50     A7 FA 01 FB | 	rdlong	result1, fp
2da54     FD 32 02 F6 | 	mov	local11, result1
2da58     04 4E 85 F1 | 	sub	fp, #4
2da5c     10 FA 05 F1 | 	add	result1, #16
2da60     FD FA C1 FA | 	rdbyte	result1, result1
2da64     80 FA 45 F5 | 	or	result1, #128
2da68     10 32 06 F1 | 	add	local11, #16
2da6c     19 FB 41 FC | 	wrbyte	result1, local11
2da70                 | LR__4629
2da70     0C 4E 05 F1 | 	add	fp, #12
2da74     A7 32 02 FB | 	rdlong	local11, fp
2da78     18 4E 05 F1 | 	add	fp, #24
2da7c     A7 FA 01 FB | 	rdlong	result1, fp
2da80     FD 32 82 F1 | 	sub	local11, result1
2da84     18 4E 85 F1 | 	sub	fp, #24
2da88     A7 32 62 FC | 	wrlong	local11, fp
2da8c     04 4E 05 F1 | 	add	fp, #4
2da90     A7 34 02 FB | 	rdlong	local12, fp
2da94     1A 33 02 FB | 	rdlong	local11, local12
2da98     14 4E 05 F1 | 	add	fp, #20
2da9c     A7 36 02 FB | 	rdlong	local13, fp
2daa0     1B 33 02 F1 | 	add	local11, local13
2daa4     1A 33 62 FC | 	wrlong	local11, local12
2daa8     0C 4E 05 F1 | 	add	fp, #12
2daac     A7 32 02 FB | 	rdlong	local11, fp
2dab0     0C 4E 85 F1 | 	sub	fp, #12
2dab4     A7 38 02 FB | 	rdlong	local14, fp
2dab8     1C 33 02 F1 | 	add	local11, local14
2dabc     0C 4E 05 F1 | 	add	fp, #12
2dac0     A7 32 62 FC | 	wrlong	local11, fp
2dac4     2C 4E 85 F1 | 	sub	fp, #44
2dac8     A7 3A 02 FB | 	rdlong	local15, fp
2dacc     1D 33 02 F6 | 	mov	local11, local15
2dad0     14 3A 06 F1 | 	add	local15, #20
2dad4     1D 3B 02 FB | 	rdlong	local15, local15
2dad8     20 4E 05 F1 | 	add	fp, #32
2dadc     A7 3C 02 FB | 	rdlong	local16, fp
2dae0     1E 3B 02 F1 | 	add	local15, local16
2dae4     14 32 06 F1 | 	add	local11, #20
2dae8     19 3B 62 FC | 	wrlong	local15, local11
2daec     20 4E 85 F1 | 	sub	fp, #32
2daf0     A7 3E 02 FB | 	rdlong	local17, fp
2daf4     1F 33 02 F6 | 	mov	local11, local17
2daf8     1F 41 02 F6 | 	mov	local18, local17
2dafc     04 4E 85 F1 | 	sub	fp, #4
2db00     14 3E 06 F1 | 	add	local17, #20
2db04     1F 43 02 FB | 	rdlong	local19, local17
2db08     0C 40 06 F1 | 	add	local18, #12
2db0c     20 45 02 FB | 	rdlong	local20, local18
2db10     22 43 1A F2 | 	cmp	local19, local20 wcz
2db14     24 00 90 ED |  if_be	jmp	#LR__4630
2db18     04 4E 05 F1 | 	add	fp, #4
2db1c     A7 26 02 FB | 	rdlong	local05, fp
2db20     04 4E 85 F1 | 	sub	fp, #4
2db24     13 23 02 F6 | 	mov	local03, local05
2db28     14 22 06 F1 | 	add	local03, #20
2db2c     11 25 02 FB | 	rdlong	local04, local03
2db30     14 22 86 F1 | 	sub	local03, #20
2db34     12 47 02 F6 | 	mov	local21, local04
2db38     20 00 90 FD | 	jmp	#LR__4631
2db3c                 | LR__4630
2db3c     04 4E 05 F1 | 	add	fp, #4
2db40     A7 2A 02 FB | 	rdlong	local07, fp
2db44     04 4E 85 F1 | 	sub	fp, #4
2db48     15 31 02 F6 | 	mov	local10, local07
2db4c     0C 30 06 F1 | 	add	local10, #12
2db50     18 2D 02 FB | 	rdlong	local08, local10
2db54     0C 30 86 F1 | 	sub	local10, #12
2db58     16 47 02 F6 | 	mov	local21, local08
2db5c                 | LR__4631
2db5c     0C 32 06 F1 | 	add	local11, #12
2db60     19 47 62 FC | 	wrlong	local21, local11
2db64     5C F9 9F FD | 	jmp	#LR__4613
2db68                 | LR__4632
2db68     04 4E 05 F1 | 	add	fp, #4
2db6c     A7 34 02 FB | 	rdlong	local12, fp
2db70     1A 1F 02 F6 | 	mov	local01, local12
2db74     04 4E 85 F1 | 	sub	fp, #4
2db78     10 34 06 F1 | 	add	local12, #16
2db7c     1A 33 C2 FA | 	rdbyte	local11, local12
2db80     40 32 46 F5 | 	or	local11, #64
2db84     10 1E 06 F1 | 	add	local01, #16
2db88     0F 33 42 FC | 	wrbyte	local11, local01
2db8c                 | ' 
2db8c                 | ' 
2db8c                 | ' 
2db8c                 | ' 
2db8c                 | ' 
2db8c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2db8c                 | ' 		fp->flag |=  0x80 ;
2db8c                 | ' 
2db8c                 | ' 	}
2db8c                 | ' 
2db8c                 | ' 	fp->flag |=  0x40 ;
2db8c                 | ' 
2db8c                 | ' 	return FR_OK ;
2db8c     00 FA 05 F6 | 	mov	result1, #0
2db90                 | LR__4633
2db90     A7 F0 03 F6 | 	mov	ptra, fp
2db94     B2 00 A0 FD | 	call	#popregs_
2db98                 | _fatfs_cc_f_write_ret
2db98     2D 00 64 FD | 	ret
2db9c                 | 
2db9c                 | _fatfs_cc_f_sync
2db9c     00 4A 05 F6 | 	mov	COUNT_, #0
2dba0     A8 00 A0 FD | 	call	#pushregs_
2dba4     18 F0 07 F1 | 	add	ptra, #24
2dba8     04 4E 05 F1 | 	add	fp, #4
2dbac     A7 12 62 FC | 	wrlong	arg01, fp
2dbb0     08 4E 05 F1 | 	add	fp, #8
2dbb4     A7 14 02 F6 | 	mov	arg02, fp
2dbb8     0C 4E 85 F1 | 	sub	fp, #12
2dbbc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2dbc0     08 4E 05 F1 | 	add	fp, #8
2dbc4     A7 FA 61 FC | 	wrlong	result1, fp
2dbc8     08 4E 85 F1 | 	sub	fp, #8
2dbcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbd0     C0 01 90 5D |  if_ne	jmp	#LR__4643
2dbd4     04 4E 05 F1 | 	add	fp, #4
2dbd8     A7 18 02 FB | 	rdlong	arg04, fp
2dbdc     04 4E 85 F1 | 	sub	fp, #4
2dbe0     10 18 06 F1 | 	add	arg04, #16
2dbe4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dbe8     40 18 CE F7 | 	test	arg04, #64 wz
2dbec     A4 01 90 AD |  if_e	jmp	#LR__4642
2dbf0     04 4E 05 F1 | 	add	fp, #4
2dbf4     A7 18 02 FB | 	rdlong	arg04, fp
2dbf8     04 4E 85 F1 | 	sub	fp, #4
2dbfc     10 18 06 F1 | 	add	arg04, #16
2dc00     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dc04     80 18 CE F7 | 	test	arg04, #128 wz
2dc08     64 00 90 AD |  if_e	jmp	#LR__4640
2dc0c     0C 4E 05 F1 | 	add	fp, #12
2dc10     A7 18 02 FB | 	rdlong	arg04, fp
2dc14     01 18 06 F1 | 	add	arg04, #1
2dc18     0C 13 C2 FA | 	rdbyte	arg01, arg04
2dc1c     08 4E 85 F1 | 	sub	fp, #8
2dc20     A7 18 02 FB | 	rdlong	arg04, fp
2dc24     0C 15 02 F6 | 	mov	arg02, arg04
2dc28     28 14 06 F1 | 	add	arg02, #40
2dc2c     04 4E 85 F1 | 	sub	fp, #4
2dc30     1C 18 06 F1 | 	add	arg04, #28
2dc34     0C 17 02 FB | 	rdlong	arg03, arg04
2dc38     01 18 06 F6 | 	mov	arg04, #1
2dc3c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2dc40     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc44     01 FA 05 56 |  if_ne	mov	result1, #1
2dc48     54 01 90 5D |  if_ne	jmp	#LR__4644
2dc4c     04 4E 05 F1 | 	add	fp, #4
2dc50     A7 18 02 FB | 	rdlong	arg04, fp
2dc54     0C 17 02 F6 | 	mov	arg03, arg04
2dc58     04 4E 85 F1 | 	sub	fp, #4
2dc5c     10 18 06 F1 | 	add	arg04, #16
2dc60     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dc64     7F 18 06 F5 | 	and	arg04, #127
2dc68     10 16 06 F1 | 	add	arg03, #16
2dc6c     0B 19 42 FC | 	wrbyte	arg04, arg03
2dc70                 | LR__4640
2dc70     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2dc74     10 4E 05 F1 | 	add	fp, #16
2dc78     A7 FA 61 FC | 	wrlong	result1, fp
2dc7c     04 4E 85 F1 | 	sub	fp, #4
2dc80     A7 12 02 FB | 	rdlong	arg01, fp
2dc84     08 4E 85 F1 | 	sub	fp, #8
2dc88     A7 18 02 FB | 	rdlong	arg04, fp
2dc8c     04 4E 85 F1 | 	sub	fp, #4
2dc90     20 18 06 F1 | 	add	arg04, #32
2dc94     0C 15 02 FB | 	rdlong	arg02, arg04
2dc98     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2dc9c     08 4E 05 F1 | 	add	fp, #8
2dca0     A7 FA 61 FC | 	wrlong	result1, fp
2dca4     08 4E 85 F1 | 	sub	fp, #8
2dca8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcac     E4 00 90 5D |  if_ne	jmp	#LR__4641
2dcb0     04 4E 05 F1 | 	add	fp, #4
2dcb4     A7 18 02 FB | 	rdlong	arg04, fp
2dcb8     24 18 06 F1 | 	add	arg04, #36
2dcbc     0C 19 02 FB | 	rdlong	arg04, arg04
2dcc0     10 4E 05 F1 | 	add	fp, #16
2dcc4     A7 18 62 FC | 	wrlong	arg04, fp
2dcc8     0C 17 02 F6 | 	mov	arg03, arg04
2dccc     0B 16 06 F1 | 	add	arg03, #11
2dcd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2dcd4     20 16 46 F5 | 	or	arg03, #32
2dcd8     0B 18 06 F1 | 	add	arg04, #11
2dcdc     0C 17 42 FC | 	wrbyte	arg03, arg04
2dce0     10 4E 85 F1 | 	sub	fp, #16
2dce4     A7 18 02 FB | 	rdlong	arg04, fp
2dce8     0C 13 02 FB | 	rdlong	arg01, arg04
2dcec     10 4E 05 F1 | 	add	fp, #16
2dcf0     A7 14 02 FB | 	rdlong	arg02, fp
2dcf4     14 4E 85 F1 | 	sub	fp, #20
2dcf8     08 18 06 F1 | 	add	arg04, #8
2dcfc     0C 17 02 FB | 	rdlong	arg03, arg04
2dd00     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2dd04     14 4E 05 F1 | 	add	fp, #20
2dd08     A7 12 02 FB | 	rdlong	arg01, fp
2dd0c     1C 12 06 F1 | 	add	arg01, #28
2dd10     10 4E 85 F1 | 	sub	fp, #16
2dd14     A7 18 02 FB | 	rdlong	arg04, fp
2dd18     0C 18 06 F1 | 	add	arg04, #12
2dd1c     0C 15 02 FB | 	rdlong	arg02, arg04
2dd20     09 15 62 FC | 	wrlong	arg02, arg01
2dd24     10 4E 05 F1 | 	add	fp, #16
2dd28     A7 12 02 FB | 	rdlong	arg01, fp
2dd2c     16 12 06 F1 | 	add	arg01, #22
2dd30     04 4E 85 F1 | 	sub	fp, #4
2dd34     A7 14 02 FB | 	rdlong	arg02, fp
2dd38     09 15 62 FC | 	wrlong	arg02, arg01
2dd3c     04 4E 05 F1 | 	add	fp, #4
2dd40     A7 12 02 FB | 	rdlong	arg01, fp
2dd44     12 12 06 F1 | 	add	arg01, #18
2dd48     09 01 58 FC | 	wrword	#0, arg01
2dd4c     08 4E 85 F1 | 	sub	fp, #8
2dd50     A7 18 02 FB | 	rdlong	arg04, fp
2dd54     03 18 06 F1 | 	add	arg04, #3
2dd58     0C 03 48 FC | 	wrbyte	#1, arg04
2dd5c     A7 12 02 FB | 	rdlong	arg01, fp
2dd60     0C 4E 85 F1 | 	sub	fp, #12
2dd64     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2dd68     08 4E 05 F1 | 	add	fp, #8
2dd6c     A7 FA 61 FC | 	wrlong	result1, fp
2dd70     04 4E 85 F1 | 	sub	fp, #4
2dd74     A7 18 02 FB | 	rdlong	arg04, fp
2dd78     0C 17 02 F6 | 	mov	arg03, arg04
2dd7c     04 4E 85 F1 | 	sub	fp, #4
2dd80     10 18 06 F1 | 	add	arg04, #16
2dd84     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dd88     BF 18 06 F5 | 	and	arg04, #191
2dd8c     10 16 06 F1 | 	add	arg03, #16
2dd90     0B 19 42 FC | 	wrbyte	arg04, arg03
2dd94                 | LR__4641
2dd94                 | LR__4642
2dd94                 | LR__4643
2dd94                 | ' 					dir = fp->dir_ptr;
2dd94                 | ' 					dir[ 11 ] |=  0x20 ;
2dd94                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2dd94                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2dd94                 | ' 					st_dword(dir +  22 , tm);
2dd94                 | ' 					st_word(dir +  18 , 0);
2dd94                 | ' 					fs->wflag = 1;
2dd94                 | ' 					res = sync_fs(fs);
2dd94                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2dd94                 | ' 				}
2dd94                 | ' 			}
2dd94                 | ' 		}
2dd94                 | ' 	}
2dd94                 | ' 
2dd94                 | ' 	return res ;
2dd94     08 4E 05 F1 | 	add	fp, #8
2dd98     A7 FA 01 FB | 	rdlong	result1, fp
2dd9c     08 4E 85 F1 | 	sub	fp, #8
2dda0                 | LR__4644
2dda0     A7 F0 03 F6 | 	mov	ptra, fp
2dda4     B2 00 A0 FD | 	call	#popregs_
2dda8                 | _fatfs_cc_f_sync_ret
2dda8     2D 00 64 FD | 	ret
2ddac                 | 
2ddac                 | _fatfs_cc_f_close
2ddac     01 4A 05 F6 | 	mov	COUNT_, #1
2ddb0     A8 00 A0 FD | 	call	#pushregs_
2ddb4     10 F0 07 F1 | 	add	ptra, #16
2ddb8     04 4E 05 F1 | 	add	fp, #4
2ddbc     A7 12 62 FC | 	wrlong	arg01, fp
2ddc0     04 4E 85 F1 | 	sub	fp, #4
2ddc4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ddc8     08 4E 05 F1 | 	add	fp, #8
2ddcc     A7 FA 61 FC | 	wrlong	result1, fp
2ddd0     08 4E 85 F1 | 	sub	fp, #8
2ddd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddd8     38 00 90 5D |  if_ne	jmp	#LR__4650
2dddc     04 4E 05 F1 | 	add	fp, #4
2dde0     A7 12 02 FB | 	rdlong	arg01, fp
2dde4     08 4E 05 F1 | 	add	fp, #8
2dde8     A7 14 02 F6 | 	mov	arg02, fp
2ddec     0C 4E 85 F1 | 	sub	fp, #12
2ddf0     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ddf4     08 4E 05 F1 | 	add	fp, #8
2ddf8     A7 FA 61 FC | 	wrlong	result1, fp
2ddfc     08 4E 85 F1 | 	sub	fp, #8
2de00     00 FA 0D F2 | 	cmp	result1, #0 wz
2de04     04 4E 05 A1 |  if_e	add	fp, #4
2de08     A7 1E 02 AB |  if_e	rdlong	local01, fp
2de0c     04 4E 85 A1 |  if_e	sub	fp, #4
2de10     0F 01 68 AC |  if_e	wrlong	#0, local01
2de14                 | LR__4650
2de14                 | ' 
2de14                 | ' 
2de14                 | ' 
2de14                 | ' 
2de14                 | ' 			fp->obj.fs = 0;
2de14                 | ' #line 4192 "ff.c"
2de14                 | ' 		}
2de14                 | ' 	}
2de14                 | ' 	return res;
2de14     08 4E 05 F1 | 	add	fp, #8
2de18     A7 FA 01 FB | 	rdlong	result1, fp
2de1c     08 4E 85 F1 | 	sub	fp, #8
2de20     A7 F0 03 F6 | 	mov	ptra, fp
2de24     B2 00 A0 FD | 	call	#popregs_
2de28                 | _fatfs_cc_f_close_ret
2de28     2D 00 64 FD | 	ret
2de2c                 | 
2de2c                 | _fatfs_cc_f_lseek
2de2c     00 4A 05 F6 | 	mov	COUNT_, #0
2de30     A8 00 A0 FD | 	call	#pushregs_
2de34     24 F0 07 F1 | 	add	ptra, #36
2de38     04 4E 05 F1 | 	add	fp, #4
2de3c     A7 12 62 FC | 	wrlong	arg01, fp
2de40     04 4E 05 F1 | 	add	fp, #4
2de44     A7 14 62 FC | 	wrlong	arg02, fp
2de48     04 4E 85 F1 | 	sub	fp, #4
2de4c     A7 12 02 FB | 	rdlong	arg01, fp
2de50     0C 4E 05 F1 | 	add	fp, #12
2de54     A7 14 02 F6 | 	mov	arg02, fp
2de58     10 4E 85 F1 | 	sub	fp, #16
2de5c     30 E6 BF FD | 	call	#_fatfs_cc_validate
2de60     0C 4E 05 F1 | 	add	fp, #12
2de64     A7 FA 61 FC | 	wrlong	result1, fp
2de68     0C 4E 85 F1 | 	sub	fp, #12
2de6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2de70     1C 00 90 5D |  if_ne	jmp	#LR__4660
2de74     04 4E 05 F1 | 	add	fp, #4
2de78     A7 18 02 FB | 	rdlong	arg04, fp
2de7c     11 18 06 F1 | 	add	arg04, #17
2de80     0C 19 C2 FA | 	rdbyte	arg04, arg04
2de84     08 4E 05 F1 | 	add	fp, #8
2de88     A7 18 62 FC | 	wrlong	arg04, fp
2de8c     0C 4E 85 F1 | 	sub	fp, #12
2de90                 | LR__4660
2de90     0C 4E 05 F1 | 	add	fp, #12
2de94     A7 18 0A FB | 	rdlong	arg04, fp wz
2de98     0C 4E 85 F1 | 	sub	fp, #12
2de9c     0C 4E 05 51 |  if_ne	add	fp, #12
2dea0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2dea4     0C 4E 85 51 |  if_ne	sub	fp, #12
2dea8     40 06 90 5D |  if_ne	jmp	#LR__4683
2deac     04 4E 05 F1 | 	add	fp, #4
2deb0     A7 18 02 FB | 	rdlong	arg04, fp
2deb4     04 4E 05 F1 | 	add	fp, #4
2deb8     A7 16 02 FB | 	rdlong	arg03, fp
2debc     08 4E 85 F1 | 	sub	fp, #8
2dec0     0C 18 06 F1 | 	add	arg04, #12
2dec4     0C 19 02 FB | 	rdlong	arg04, arg04
2dec8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2decc     3C 00 90 ED |  if_be	jmp	#LR__4661
2ded0     04 4E 05 F1 | 	add	fp, #4
2ded4     A7 16 02 FB | 	rdlong	arg03, fp
2ded8     04 4E 85 F1 | 	sub	fp, #4
2dedc     10 16 06 F1 | 	add	arg03, #16
2dee0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2dee4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2dee8     02 16 CE F7 | 	test	arg03, #2 wz
2deec     1C 00 90 5D |  if_ne	jmp	#LR__4661
2def0     04 4E 05 F1 | 	add	fp, #4
2def4     A7 16 02 FB | 	rdlong	arg03, fp
2def8     0C 16 06 F1 | 	add	arg03, #12
2defc     0B 17 02 FB | 	rdlong	arg03, arg03
2df00     04 4E 05 F1 | 	add	fp, #4
2df04     A7 16 62 FC | 	wrlong	arg03, fp
2df08     08 4E 85 F1 | 	sub	fp, #8
2df0c                 | LR__4661
2df0c     04 4E 05 F1 | 	add	fp, #4
2df10     A7 16 02 FB | 	rdlong	arg03, fp
2df14     14 16 06 F1 | 	add	arg03, #20
2df18     0B 17 02 FB | 	rdlong	arg03, arg03
2df1c     1C 4E 05 F1 | 	add	fp, #28
2df20     A7 16 62 FC | 	wrlong	arg03, fp
2df24     1C 4E 85 F1 | 	sub	fp, #28
2df28     A7 16 02 FB | 	rdlong	arg03, fp
2df2c     18 4E 05 F1 | 	add	fp, #24
2df30     A7 00 68 FC | 	wrlong	#0, fp
2df34     14 16 06 F1 | 	add	arg03, #20
2df38     0B 01 68 FC | 	wrlong	#0, arg03
2df3c     14 4E 85 F1 | 	sub	fp, #20
2df40     A7 16 02 FB | 	rdlong	arg03, fp
2df44     08 4E 85 F1 | 	sub	fp, #8
2df48     01 16 16 F2 | 	cmp	arg03, #1 wc
2df4c     E4 03 90 CD |  if_b	jmp	#LR__4677
2df50     10 4E 05 F1 | 	add	fp, #16
2df54     A7 16 02 FB | 	rdlong	arg03, fp
2df58     0A 16 06 F1 | 	add	arg03, #10
2df5c     0B 19 E2 FA | 	rdword	arg04, arg03
2df60     09 18 66 F0 | 	shl	arg04, #9
2df64     08 4E 05 F1 | 	add	fp, #8
2df68     A7 18 62 FC | 	wrlong	arg04, fp
2df6c     08 4E 05 F1 | 	add	fp, #8
2df70     A7 18 02 FB | 	rdlong	arg04, fp
2df74     20 4E 85 F1 | 	sub	fp, #32
2df78     01 18 16 F2 | 	cmp	arg04, #1 wc
2df7c     AC 00 90 CD |  if_b	jmp	#LR__4662
2df80     08 4E 05 F1 | 	add	fp, #8
2df84     A7 18 02 FB | 	rdlong	arg04, fp
2df88     01 18 86 F1 | 	sub	arg04, #1
2df8c     10 4E 05 F1 | 	add	fp, #16
2df90     A7 16 02 FB | 	rdlong	arg03, fp
2df94     0B 19 12 FD | 	qdiv	arg04, arg03
2df98     08 4E 05 F1 | 	add	fp, #8
2df9c     A7 FA 01 FB | 	rdlong	result1, fp
2dfa0     01 FA 85 F1 | 	sub	result1, #1
2dfa4     18 18 62 FD | 	getqx	arg04
2dfa8     0B FB 11 FD | 	qdiv	result1, arg03
2dfac     20 4E 85 F1 | 	sub	fp, #32
2dfb0     18 16 62 FD | 	getqx	arg03
2dfb4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2dfb8     70 00 90 CD |  if_b	jmp	#LR__4662
2dfbc     04 4E 05 F1 | 	add	fp, #4
2dfc0     A7 16 02 FB | 	rdlong	arg03, fp
2dfc4     1C 4E 05 F1 | 	add	fp, #28
2dfc8     A7 FA 01 FB | 	rdlong	result1, fp
2dfcc     01 FA 85 F1 | 	sub	result1, #1
2dfd0     08 4E 85 F1 | 	sub	fp, #8
2dfd4     A7 18 02 FB | 	rdlong	arg04, fp
2dfd8     01 18 86 F1 | 	sub	arg04, #1
2dfdc     0C FB 21 F5 | 	andn	result1, arg04
2dfe0     14 16 06 F1 | 	add	arg03, #20
2dfe4     0B FB 61 FC | 	wrlong	result1, arg03
2dfe8     10 4E 85 F1 | 	sub	fp, #16
2dfec     A7 16 02 FB | 	rdlong	arg03, fp
2dff0     04 4E 85 F1 | 	sub	fp, #4
2dff4     A7 18 02 FB | 	rdlong	arg04, fp
2dff8     14 18 06 F1 | 	add	arg04, #20
2dffc     0C 19 02 FB | 	rdlong	arg04, arg04
2e000     0C 17 82 F1 | 	sub	arg03, arg04
2e004     04 4E 05 F1 | 	add	fp, #4
2e008     A7 16 62 FC | 	wrlong	arg03, fp
2e00c     04 4E 85 F1 | 	sub	fp, #4
2e010     A7 16 02 FB | 	rdlong	arg03, fp
2e014     18 16 06 F1 | 	add	arg03, #24
2e018     0B 17 02 FB | 	rdlong	arg03, arg03
2e01c     10 4E 05 F1 | 	add	fp, #16
2e020     A7 16 62 FC | 	wrlong	arg03, fp
2e024     14 4E 85 F1 | 	sub	fp, #20
2e028     D0 00 90 FD | 	jmp	#LR__4666
2e02c                 | LR__4662
2e02c     04 4E 05 F1 | 	add	fp, #4
2e030     A7 16 02 FB | 	rdlong	arg03, fp
2e034     08 16 06 F1 | 	add	arg03, #8
2e038     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2e03c     10 4E 05 F1 | 	add	fp, #16
2e040     A7 16 62 FC | 	wrlong	arg03, fp
2e044     14 4E 85 F1 | 	sub	fp, #20
2e048     94 00 90 5D |  if_ne	jmp	#LR__4665
2e04c     04 4E 05 F1 | 	add	fp, #4
2e050     A7 12 02 FB | 	rdlong	arg01, fp
2e054     04 4E 85 F1 | 	sub	fp, #4
2e058     00 14 06 F6 | 	mov	arg02, #0
2e05c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2e060     14 4E 05 F1 | 	add	fp, #20
2e064     A7 FA 61 FC | 	wrlong	result1, fp
2e068     14 4E 85 F1 | 	sub	fp, #20
2e06c     01 FA 0D F2 | 	cmp	result1, #1 wz
2e070     1C 00 90 5D |  if_ne	jmp	#LR__4663
2e074     04 4E 05 F1 | 	add	fp, #4
2e078     A7 16 02 FB | 	rdlong	arg03, fp
2e07c     04 4E 85 F1 | 	sub	fp, #4
2e080     11 16 06 F1 | 	add	arg03, #17
2e084     0B 05 48 FC | 	wrbyte	#2, arg03
2e088     02 FA 05 F6 | 	mov	result1, #2
2e08c     5C 04 90 FD | 	jmp	#LR__4683
2e090                 | LR__4663
2e090     14 4E 05 F1 | 	add	fp, #20
2e094     A7 FA 01 FB | 	rdlong	result1, fp
2e098     14 4E 85 F1 | 	sub	fp, #20
2e09c     FF FF 7F FF 
2e0a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2e0a4     1C 00 90 5D |  if_ne	jmp	#LR__4664
2e0a8     04 4E 05 F1 | 	add	fp, #4
2e0ac     A7 16 02 FB | 	rdlong	arg03, fp
2e0b0     04 4E 85 F1 | 	sub	fp, #4
2e0b4     11 16 06 F1 | 	add	arg03, #17
2e0b8     0B 03 48 FC | 	wrbyte	#1, arg03
2e0bc     01 FA 05 F6 | 	mov	result1, #1
2e0c0     28 04 90 FD | 	jmp	#LR__4683
2e0c4                 | LR__4664
2e0c4     04 4E 05 F1 | 	add	fp, #4
2e0c8     A7 16 02 FB | 	rdlong	arg03, fp
2e0cc     10 4E 05 F1 | 	add	fp, #16
2e0d0     A7 18 02 FB | 	rdlong	arg04, fp
2e0d4     14 4E 85 F1 | 	sub	fp, #20
2e0d8     08 16 06 F1 | 	add	arg03, #8
2e0dc     0B 19 62 FC | 	wrlong	arg04, arg03
2e0e0                 | LR__4665
2e0e0     04 4E 05 F1 | 	add	fp, #4
2e0e4     A7 16 02 FB | 	rdlong	arg03, fp
2e0e8     10 4E 05 F1 | 	add	fp, #16
2e0ec     A7 18 02 FB | 	rdlong	arg04, fp
2e0f0     14 4E 85 F1 | 	sub	fp, #20
2e0f4     18 16 06 F1 | 	add	arg03, #24
2e0f8     0B 19 62 FC | 	wrlong	arg04, arg03
2e0fc                 | LR__4666
2e0fc     14 4E 05 F1 | 	add	fp, #20
2e100     A7 16 0A FB | 	rdlong	arg03, fp wz
2e104     14 4E 85 F1 | 	sub	fp, #20
2e108     28 02 90 AD |  if_e	jmp	#LR__4676
2e10c                 | ' 				while (ofs > bcs) {
2e10c                 | LR__4667
2e10c     08 4E 05 F1 | 	add	fp, #8
2e110     A7 18 02 FB | 	rdlong	arg04, fp
2e114     10 4E 05 F1 | 	add	fp, #16
2e118     A7 16 02 FB | 	rdlong	arg03, fp
2e11c     18 4E 85 F1 | 	sub	fp, #24
2e120     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2e124     68 01 90 ED |  if_be	jmp	#LR__4673
2e128     08 4E 05 F1 | 	add	fp, #8
2e12c     A7 18 02 FB | 	rdlong	arg04, fp
2e130     10 4E 05 F1 | 	add	fp, #16
2e134     A7 16 02 FB | 	rdlong	arg03, fp
2e138     0B 19 82 F1 | 	sub	arg04, arg03
2e13c     10 4E 85 F1 | 	sub	fp, #16
2e140     A7 18 62 FC | 	wrlong	arg04, fp
2e144     04 4E 85 F1 | 	sub	fp, #4
2e148     A7 18 02 FB | 	rdlong	arg04, fp
2e14c     0C FB 01 F6 | 	mov	result1, arg04
2e150     14 18 06 F1 | 	add	arg04, #20
2e154     0C 19 02 FB | 	rdlong	arg04, arg04
2e158     14 4E 05 F1 | 	add	fp, #20
2e15c     A7 16 02 FB | 	rdlong	arg03, fp
2e160     0B 19 02 F1 | 	add	arg04, arg03
2e164     14 FA 05 F1 | 	add	result1, #20
2e168     FD 18 62 FC | 	wrlong	arg04, result1
2e16c     14 4E 85 F1 | 	sub	fp, #20
2e170     A7 16 02 FB | 	rdlong	arg03, fp
2e174     04 4E 85 F1 | 	sub	fp, #4
2e178     10 16 06 F1 | 	add	arg03, #16
2e17c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e180     02 16 CE F7 | 	test	arg03, #2 wz
2e184     3C 00 90 AD |  if_e	jmp	#LR__4668
2e188     04 4E 05 F1 | 	add	fp, #4
2e18c     A7 12 02 FB | 	rdlong	arg01, fp
2e190     10 4E 05 F1 | 	add	fp, #16
2e194     A7 14 02 FB | 	rdlong	arg02, fp
2e198     14 4E 85 F1 | 	sub	fp, #20
2e19c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2e1a0     14 4E 05 F1 | 	add	fp, #20
2e1a4     A7 FA 61 FC | 	wrlong	result1, fp
2e1a8     00 FA 4D F2 | 	cmps	result1, #0 wz
2e1ac     14 4E 85 F1 | 	sub	fp, #20
2e1b0     08 4E 05 A1 |  if_e	add	fp, #8
2e1b4     A7 00 68 AC |  if_e	wrlong	#0, fp
2e1b8     08 4E 85 A1 |  if_e	sub	fp, #8
2e1bc                 | ' 							ofs = 0; break;
2e1bc     D0 00 90 AD |  if_e	jmp	#LR__4673
2e1c0     24 00 90 FD | 	jmp	#LR__4669
2e1c4                 | LR__4668
2e1c4     04 4E 05 F1 | 	add	fp, #4
2e1c8     A7 12 02 FB | 	rdlong	arg01, fp
2e1cc     10 4E 05 F1 | 	add	fp, #16
2e1d0     A7 14 02 FB | 	rdlong	arg02, fp
2e1d4     14 4E 85 F1 | 	sub	fp, #20
2e1d8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2e1dc     14 4E 05 F1 | 	add	fp, #20
2e1e0     A7 FA 61 FC | 	wrlong	result1, fp
2e1e4     14 4E 85 F1 | 	sub	fp, #20
2e1e8                 | LR__4669
2e1e8     14 4E 05 F1 | 	add	fp, #20
2e1ec     A7 16 02 FB | 	rdlong	arg03, fp
2e1f0     14 4E 85 F1 | 	sub	fp, #20
2e1f4     FF FF 7F FF 
2e1f8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2e1fc     1C 00 90 5D |  if_ne	jmp	#LR__4670
2e200     04 4E 05 F1 | 	add	fp, #4
2e204     A7 16 02 FB | 	rdlong	arg03, fp
2e208     04 4E 85 F1 | 	sub	fp, #4
2e20c     11 16 06 F1 | 	add	arg03, #17
2e210     0B 03 48 FC | 	wrbyte	#1, arg03
2e214     01 FA 05 F6 | 	mov	result1, #1
2e218     D0 02 90 FD | 	jmp	#LR__4683
2e21c                 | LR__4670
2e21c     14 4E 05 F1 | 	add	fp, #20
2e220     A7 16 02 FB | 	rdlong	arg03, fp
2e224     14 4E 85 F1 | 	sub	fp, #20
2e228     02 16 16 F2 | 	cmp	arg03, #2 wc
2e22c     24 00 90 CD |  if_b	jmp	#LR__4671
2e230     10 4E 05 F1 | 	add	fp, #16
2e234     A7 18 02 FB | 	rdlong	arg04, fp
2e238     04 4E 05 F1 | 	add	fp, #4
2e23c     A7 16 02 FB | 	rdlong	arg03, fp
2e240     14 4E 85 F1 | 	sub	fp, #20
2e244     18 18 06 F1 | 	add	arg04, #24
2e248     0C 19 02 FB | 	rdlong	arg04, arg04
2e24c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2e250     1C 00 90 CD |  if_b	jmp	#LR__4672
2e254                 | LR__4671
2e254     04 4E 05 F1 | 	add	fp, #4
2e258     A7 16 02 FB | 	rdlong	arg03, fp
2e25c     04 4E 85 F1 | 	sub	fp, #4
2e260     11 16 06 F1 | 	add	arg03, #17
2e264     0B 05 48 FC | 	wrbyte	#2, arg03
2e268     02 FA 05 F6 | 	mov	result1, #2
2e26c     7C 02 90 FD | 	jmp	#LR__4683
2e270                 | LR__4672
2e270     04 4E 05 F1 | 	add	fp, #4
2e274     A7 18 02 FB | 	rdlong	arg04, fp
2e278     10 4E 05 F1 | 	add	fp, #16
2e27c     A7 16 02 FB | 	rdlong	arg03, fp
2e280     14 4E 85 F1 | 	sub	fp, #20
2e284     18 18 06 F1 | 	add	arg04, #24
2e288     0C 17 62 FC | 	wrlong	arg03, arg04
2e28c     7C FE 9F FD | 	jmp	#LR__4667
2e290                 | LR__4673
2e290     04 4E 05 F1 | 	add	fp, #4
2e294     A7 16 02 FB | 	rdlong	arg03, fp
2e298     0B 13 02 F6 | 	mov	arg01, arg03
2e29c     14 16 06 F1 | 	add	arg03, #20
2e2a0     0B 15 02 FB | 	rdlong	arg02, arg03
2e2a4     04 4E 05 F1 | 	add	fp, #4
2e2a8     A7 16 02 FB | 	rdlong	arg03, fp
2e2ac     0B 15 02 F1 | 	add	arg02, arg03
2e2b0     14 12 06 F1 | 	add	arg01, #20
2e2b4     09 15 62 FC | 	wrlong	arg02, arg01
2e2b8     A7 16 02 FB | 	rdlong	arg03, fp
2e2bc     08 4E 85 F1 | 	sub	fp, #8
2e2c0     FF 17 CE F7 | 	test	arg03, #511 wz
2e2c4     6C 00 90 AD |  if_e	jmp	#LR__4675
2e2c8     10 4E 05 F1 | 	add	fp, #16
2e2cc     A7 12 02 FB | 	rdlong	arg01, fp
2e2d0     04 4E 05 F1 | 	add	fp, #4
2e2d4     A7 14 02 FB | 	rdlong	arg02, fp
2e2d8     14 4E 85 F1 | 	sub	fp, #20
2e2dc     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2e2e0     1C 4E 05 F1 | 	add	fp, #28
2e2e4     A7 FA 61 FC | 	wrlong	result1, fp
2e2e8     1C 4E 85 F1 | 	sub	fp, #28
2e2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2f0     1C 00 90 5D |  if_ne	jmp	#LR__4674
2e2f4     04 4E 05 F1 | 	add	fp, #4
2e2f8     A7 16 02 FB | 	rdlong	arg03, fp
2e2fc     04 4E 85 F1 | 	sub	fp, #4
2e300     11 16 06 F1 | 	add	arg03, #17
2e304     0B 05 48 FC | 	wrbyte	#2, arg03
2e308     02 FA 05 F6 | 	mov	result1, #2
2e30c     DC 01 90 FD | 	jmp	#LR__4683
2e310                 | LR__4674
2e310     1C 4E 05 F1 | 	add	fp, #28
2e314     A7 18 02 FB | 	rdlong	arg04, fp
2e318     14 4E 85 F1 | 	sub	fp, #20
2e31c     A7 16 02 FB | 	rdlong	arg03, fp
2e320     09 16 46 F0 | 	shr	arg03, #9
2e324     0B 19 02 F1 | 	add	arg04, arg03
2e328     14 4E 05 F1 | 	add	fp, #20
2e32c     A7 18 62 FC | 	wrlong	arg04, fp
2e330     1C 4E 85 F1 | 	sub	fp, #28
2e334                 | LR__4675
2e334                 | LR__4676
2e334                 | LR__4677
2e334     04 4E 05 F1 | 	add	fp, #4
2e338     A7 18 02 FB | 	rdlong	arg04, fp
2e33c     0C 17 02 F6 | 	mov	arg03, arg04
2e340     04 4E 85 F1 | 	sub	fp, #4
2e344     14 16 06 F1 | 	add	arg03, #20
2e348     0B 17 02 FB | 	rdlong	arg03, arg03
2e34c     0C 18 06 F1 | 	add	arg04, #12
2e350     0C 19 02 FB | 	rdlong	arg04, arg04
2e354     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2e358     3C 00 90 ED |  if_be	jmp	#LR__4678
2e35c     04 4E 05 F1 | 	add	fp, #4
2e360     A7 18 02 FB | 	rdlong	arg04, fp
2e364     0C 17 02 F6 | 	mov	arg03, arg04
2e368     14 18 06 F1 | 	add	arg04, #20
2e36c     0C 19 02 FB | 	rdlong	arg04, arg04
2e370     0C 16 06 F1 | 	add	arg03, #12
2e374     0B 19 62 FC | 	wrlong	arg04, arg03
2e378     A7 18 02 FB | 	rdlong	arg04, fp
2e37c     0C 17 02 F6 | 	mov	arg03, arg04
2e380     04 4E 85 F1 | 	sub	fp, #4
2e384     10 18 06 F1 | 	add	arg04, #16
2e388     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e38c     40 18 46 F5 | 	or	arg04, #64
2e390     10 16 06 F1 | 	add	arg03, #16
2e394     0B 19 42 FC | 	wrbyte	arg04, arg03
2e398                 | LR__4678
2e398     04 4E 05 F1 | 	add	fp, #4
2e39c     A7 16 02 FB | 	rdlong	arg03, fp
2e3a0     04 4E 85 F1 | 	sub	fp, #4
2e3a4     14 16 06 F1 | 	add	arg03, #20
2e3a8     0B 17 02 FB | 	rdlong	arg03, arg03
2e3ac     FF 17 CE F7 | 	test	arg03, #511 wz
2e3b0     2C 01 90 AD |  if_e	jmp	#LR__4682
2e3b4     04 4E 05 F1 | 	add	fp, #4
2e3b8     A7 18 02 FB | 	rdlong	arg04, fp
2e3bc     18 4E 05 F1 | 	add	fp, #24
2e3c0     A7 16 02 FB | 	rdlong	arg03, fp
2e3c4     1C 4E 85 F1 | 	sub	fp, #28
2e3c8     1C 18 06 F1 | 	add	arg04, #28
2e3cc     0C 19 02 FB | 	rdlong	arg04, arg04
2e3d0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2e3d4     08 01 90 AD |  if_e	jmp	#LR__4682
2e3d8     04 4E 05 F1 | 	add	fp, #4
2e3dc     A7 16 02 FB | 	rdlong	arg03, fp
2e3e0     04 4E 85 F1 | 	sub	fp, #4
2e3e4     10 16 06 F1 | 	add	arg03, #16
2e3e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e3ec     80 16 CE F7 | 	test	arg03, #128 wz
2e3f0     7C 00 90 AD |  if_e	jmp	#LR__4680
2e3f4     10 4E 05 F1 | 	add	fp, #16
2e3f8     A7 16 02 FB | 	rdlong	arg03, fp
2e3fc     01 16 06 F1 | 	add	arg03, #1
2e400     0B 13 C2 FA | 	rdbyte	arg01, arg03
2e404     0C 4E 85 F1 | 	sub	fp, #12
2e408     A7 16 02 FB | 	rdlong	arg03, fp
2e40c     0B 15 02 F6 | 	mov	arg02, arg03
2e410     28 14 06 F1 | 	add	arg02, #40
2e414     04 4E 85 F1 | 	sub	fp, #4
2e418     1C 16 06 F1 | 	add	arg03, #28
2e41c     0B 17 02 FB | 	rdlong	arg03, arg03
2e420     01 18 06 F6 | 	mov	arg04, #1
2e424     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2e428     00 FA 0D F2 | 	cmp	result1, #0 wz
2e42c     1C 00 90 AD |  if_e	jmp	#LR__4679
2e430     04 4E 05 F1 | 	add	fp, #4
2e434     A7 16 02 FB | 	rdlong	arg03, fp
2e438     04 4E 85 F1 | 	sub	fp, #4
2e43c     11 16 06 F1 | 	add	arg03, #17
2e440     0B 03 48 FC | 	wrbyte	#1, arg03
2e444     01 FA 05 F6 | 	mov	result1, #1
2e448     A0 00 90 FD | 	jmp	#LR__4683
2e44c                 | LR__4679
2e44c     04 4E 05 F1 | 	add	fp, #4
2e450     A7 18 02 FB | 	rdlong	arg04, fp
2e454     0C 17 02 F6 | 	mov	arg03, arg04
2e458     04 4E 85 F1 | 	sub	fp, #4
2e45c     10 18 06 F1 | 	add	arg04, #16
2e460     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e464     7F 18 06 F5 | 	and	arg04, #127
2e468     10 16 06 F1 | 	add	arg03, #16
2e46c     0B 19 42 FC | 	wrbyte	arg04, arg03
2e470                 | LR__4680
2e470     10 4E 05 F1 | 	add	fp, #16
2e474     A7 16 02 FB | 	rdlong	arg03, fp
2e478     01 16 06 F1 | 	add	arg03, #1
2e47c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2e480     0C 4E 85 F1 | 	sub	fp, #12
2e484     A7 14 02 FB | 	rdlong	arg02, fp
2e488     28 14 06 F1 | 	add	arg02, #40
2e48c     18 4E 05 F1 | 	add	fp, #24
2e490     A7 16 02 FB | 	rdlong	arg03, fp
2e494     1C 4E 85 F1 | 	sub	fp, #28
2e498     01 18 06 F6 | 	mov	arg04, #1
2e49c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2e4a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4a4     1C 00 90 AD |  if_e	jmp	#LR__4681
2e4a8     04 4E 05 F1 | 	add	fp, #4
2e4ac     A7 16 02 FB | 	rdlong	arg03, fp
2e4b0     04 4E 85 F1 | 	sub	fp, #4
2e4b4     11 16 06 F1 | 	add	arg03, #17
2e4b8     0B 03 48 FC | 	wrbyte	#1, arg03
2e4bc     01 FA 05 F6 | 	mov	result1, #1
2e4c0     28 00 90 FD | 	jmp	#LR__4683
2e4c4                 | LR__4681
2e4c4     04 4E 05 F1 | 	add	fp, #4
2e4c8     A7 18 02 FB | 	rdlong	arg04, fp
2e4cc     18 4E 05 F1 | 	add	fp, #24
2e4d0     A7 16 02 FB | 	rdlong	arg03, fp
2e4d4     1C 4E 85 F1 | 	sub	fp, #28
2e4d8     1C 18 06 F1 | 	add	arg04, #28
2e4dc     0C 17 62 FC | 	wrlong	arg03, arg04
2e4e0                 | LR__4682
2e4e0                 | ' 
2e4e0                 | ' 			fp->sect = nsect;
2e4e0                 | ' 		}
2e4e0                 | ' 	}
2e4e0                 | ' 
2e4e0                 | ' 	return res ;
2e4e0     0C 4E 05 F1 | 	add	fp, #12
2e4e4     A7 FA 01 FB | 	rdlong	result1, fp
2e4e8     0C 4E 85 F1 | 	sub	fp, #12
2e4ec                 | LR__4683
2e4ec     A7 F0 03 F6 | 	mov	ptra, fp
2e4f0     B2 00 A0 FD | 	call	#popregs_
2e4f4                 | _fatfs_cc_f_lseek_ret
2e4f4     2D 00 64 FD | 	ret
2e4f8                 | 
2e4f8                 | _fatfs_cc_f_opendir
2e4f8     01 4A 05 F6 | 	mov	COUNT_, #1
2e4fc     A8 00 A0 FD | 	call	#pushregs_
2e500     14 F0 07 F1 | 	add	ptra, #20
2e504     04 4E 05 F1 | 	add	fp, #4
2e508     A7 12 62 FC | 	wrlong	arg01, fp
2e50c     04 4E 05 F1 | 	add	fp, #4
2e510     A7 14 62 FC | 	wrlong	arg02, fp
2e514     04 4E 85 F1 | 	sub	fp, #4
2e518     A7 16 0A FB | 	rdlong	arg03, fp wz
2e51c     04 4E 85 F1 | 	sub	fp, #4
2e520     09 FA 05 A6 |  if_e	mov	result1, #9
2e524     78 01 90 AD |  if_e	jmp	#LR__4696
2e528     08 4E 05 F1 | 	add	fp, #8
2e52c     A7 12 02 F6 | 	mov	arg01, fp
2e530     08 4E 05 F1 | 	add	fp, #8
2e534     A7 14 02 F6 | 	mov	arg02, fp
2e538     10 4E 85 F1 | 	sub	fp, #16
2e53c     00 16 06 F6 | 	mov	arg03, #0
2e540     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2e544     0C 4E 05 F1 | 	add	fp, #12
2e548     A7 FA 61 FC | 	wrlong	result1, fp
2e54c     0C 4E 85 F1 | 	sub	fp, #12
2e550     00 FA 0D F2 | 	cmp	result1, #0 wz
2e554     20 01 90 5D |  if_ne	jmp	#LR__4695
2e558     04 4E 05 F1 | 	add	fp, #4
2e55c     A7 16 02 FB | 	rdlong	arg03, fp
2e560     0C 4E 05 F1 | 	add	fp, #12
2e564     A7 FA 01 FB | 	rdlong	result1, fp
2e568     0B FB 61 FC | 	wrlong	result1, arg03
2e56c     0C 4E 85 F1 | 	sub	fp, #12
2e570     A7 12 02 FB | 	rdlong	arg01, fp
2e574     04 4E 05 F1 | 	add	fp, #4
2e578     A7 14 02 FB | 	rdlong	arg02, fp
2e57c     08 4E 85 F1 | 	sub	fp, #8
2e580     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2e584     0C 4E 05 F1 | 	add	fp, #12
2e588     A7 FA 61 FC | 	wrlong	result1, fp
2e58c     0C 4E 85 F1 | 	sub	fp, #12
2e590     00 FA 0D F2 | 	cmp	result1, #0 wz
2e594     C4 00 90 5D |  if_ne	jmp	#LR__4694
2e598     04 4E 05 F1 | 	add	fp, #4
2e59c     A7 16 02 FB | 	rdlong	arg03, fp
2e5a0     04 4E 85 F1 | 	sub	fp, #4
2e5a4     2B 16 06 F1 | 	add	arg03, #43
2e5a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e5ac     80 16 CE F7 | 	test	arg03, #128 wz
2e5b0     58 00 90 5D |  if_ne	jmp	#LR__4692
2e5b4     04 4E 05 F1 | 	add	fp, #4
2e5b8     A7 16 02 FB | 	rdlong	arg03, fp
2e5bc     04 4E 85 F1 | 	sub	fp, #4
2e5c0     06 16 06 F1 | 	add	arg03, #6
2e5c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e5c8     10 16 CE F7 | 	test	arg03, #16 wz
2e5cc     30 00 90 AD |  if_e	jmp	#LR__4690
2e5d0     04 4E 05 F1 | 	add	fp, #4
2e5d4     A7 16 02 FB | 	rdlong	arg03, fp
2e5d8     0B 1F 02 F6 | 	mov	local01, arg03
2e5dc     0C 4E 05 F1 | 	add	fp, #12
2e5e0     A7 12 02 FB | 	rdlong	arg01, fp
2e5e4     10 4E 85 F1 | 	sub	fp, #16
2e5e8     1C 16 06 F1 | 	add	arg03, #28
2e5ec     0B 15 02 FB | 	rdlong	arg02, arg03
2e5f0     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2e5f4     08 1E 06 F1 | 	add	local01, #8
2e5f8     0F FB 61 FC | 	wrlong	result1, local01
2e5fc     0C 00 90 FD | 	jmp	#LR__4691
2e600                 | LR__4690
2e600     0C 4E 05 F1 | 	add	fp, #12
2e604     A7 0A 68 FC | 	wrlong	#5, fp
2e608     0C 4E 85 F1 | 	sub	fp, #12
2e60c                 | LR__4691
2e60c                 | LR__4692
2e60c     0C 4E 05 F1 | 	add	fp, #12
2e610     A7 1E 0A FB | 	rdlong	local01, fp wz
2e614     0C 4E 85 F1 | 	sub	fp, #12
2e618     40 00 90 5D |  if_ne	jmp	#LR__4693
2e61c     04 4E 05 F1 | 	add	fp, #4
2e620     A7 1E 02 FB | 	rdlong	local01, fp
2e624     0C 4E 05 F1 | 	add	fp, #12
2e628     A7 16 02 FB | 	rdlong	arg03, fp
2e62c     06 16 06 F1 | 	add	arg03, #6
2e630     0B 17 E2 FA | 	rdword	arg03, arg03
2e634     04 1E 06 F1 | 	add	local01, #4
2e638     0F 17 52 FC | 	wrword	arg03, local01
2e63c     0C 4E 85 F1 | 	sub	fp, #12
2e640     A7 12 02 FB | 	rdlong	arg01, fp
2e644     04 4E 85 F1 | 	sub	fp, #4
2e648     00 14 06 F6 | 	mov	arg02, #0
2e64c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2e650     0C 4E 05 F1 | 	add	fp, #12
2e654     A7 FA 61 FC | 	wrlong	result1, fp
2e658     0C 4E 85 F1 | 	sub	fp, #12
2e65c                 | LR__4693
2e65c                 | LR__4694
2e65c     0C 4E 05 F1 | 	add	fp, #12
2e660     A7 1E 02 FB | 	rdlong	local01, fp
2e664     0C 4E 85 F1 | 	sub	fp, #12
2e668     04 1E 0E F2 | 	cmp	local01, #4 wz
2e66c     0C 4E 05 A1 |  if_e	add	fp, #12
2e670     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e674     0C 4E 85 A1 |  if_e	sub	fp, #12
2e678                 | LR__4695
2e678     0C 4E 05 F1 | 	add	fp, #12
2e67c     A7 1E 0A FB | 	rdlong	local01, fp wz
2e680     0C 4E 85 F1 | 	sub	fp, #12
2e684     04 4E 05 51 |  if_ne	add	fp, #4
2e688     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2e68c     04 4E 85 51 |  if_ne	sub	fp, #4
2e690     0F 01 68 5C |  if_ne	wrlong	#0, local01
2e694                 | ' 
2e694                 | ' 	return res ;
2e694     0C 4E 05 F1 | 	add	fp, #12
2e698     A7 FA 01 FB | 	rdlong	result1, fp
2e69c     0C 4E 85 F1 | 	sub	fp, #12
2e6a0                 | LR__4696
2e6a0     A7 F0 03 F6 | 	mov	ptra, fp
2e6a4     B2 00 A0 FD | 	call	#popregs_
2e6a8                 | _fatfs_cc_f_opendir_ret
2e6a8     2D 00 64 FD | 	ret
2e6ac                 | 
2e6ac                 | _fatfs_cc_f_closedir
2e6ac     00 4A 05 F6 | 	mov	COUNT_, #0
2e6b0     A8 00 A0 FD | 	call	#pushregs_
2e6b4     10 F0 07 F1 | 	add	ptra, #16
2e6b8     04 4E 05 F1 | 	add	fp, #4
2e6bc     A7 12 62 FC | 	wrlong	arg01, fp
2e6c0     08 4E 05 F1 | 	add	fp, #8
2e6c4     A7 14 02 F6 | 	mov	arg02, fp
2e6c8     0C 4E 85 F1 | 	sub	fp, #12
2e6cc     C0 DD BF FD | 	call	#_fatfs_cc_validate
2e6d0     08 4E 05 F1 | 	add	fp, #8
2e6d4     A7 FA 61 FC | 	wrlong	result1, fp
2e6d8     08 4E 85 F1 | 	sub	fp, #8
2e6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6e0     04 4E 05 A1 |  if_e	add	fp, #4
2e6e4     A7 FA 01 AB |  if_e	rdlong	result1, fp
2e6e8     04 4E 85 A1 |  if_e	sub	fp, #4
2e6ec     FD 00 68 AC |  if_e	wrlong	#0, result1
2e6f0                 | ' 
2e6f0                 | ' 
2e6f0                 | ' 
2e6f0                 | ' 
2e6f0                 | ' 		dp->obj.fs = 0;
2e6f0                 | ' #line 4633 "ff.c"
2e6f0                 | ' 	}
2e6f0                 | ' 	return res;
2e6f0     08 4E 05 F1 | 	add	fp, #8
2e6f4     A7 FA 01 FB | 	rdlong	result1, fp
2e6f8     08 4E 85 F1 | 	sub	fp, #8
2e6fc     A7 F0 03 F6 | 	mov	ptra, fp
2e700     B2 00 A0 FD | 	call	#popregs_
2e704                 | _fatfs_cc_f_closedir_ret
2e704     2D 00 64 FD | 	ret
2e708                 | 
2e708                 | _fatfs_cc_f_readdir
2e708     00 4A 05 F6 | 	mov	COUNT_, #0
2e70c     A8 00 A0 FD | 	call	#pushregs_
2e710     14 F0 07 F1 | 	add	ptra, #20
2e714     04 4E 05 F1 | 	add	fp, #4
2e718     A7 12 62 FC | 	wrlong	arg01, fp
2e71c     04 4E 05 F1 | 	add	fp, #4
2e720     A7 14 62 FC | 	wrlong	arg02, fp
2e724     04 4E 85 F1 | 	sub	fp, #4
2e728     A7 12 02 FB | 	rdlong	arg01, fp
2e72c     0C 4E 05 F1 | 	add	fp, #12
2e730     A7 14 02 F6 | 	mov	arg02, fp
2e734     10 4E 85 F1 | 	sub	fp, #16
2e738     54 DD BF FD | 	call	#_fatfs_cc_validate
2e73c     0C 4E 05 F1 | 	add	fp, #12
2e740     A7 FA 61 FC | 	wrlong	result1, fp
2e744     0C 4E 85 F1 | 	sub	fp, #12
2e748     00 FA 0D F2 | 	cmp	result1, #0 wz
2e74c     BC 00 90 5D |  if_ne	jmp	#LR__4703
2e750     08 4E 05 F1 | 	add	fp, #8
2e754     A7 FA 09 FB | 	rdlong	result1, fp wz
2e758     08 4E 85 F1 | 	sub	fp, #8
2e75c     24 00 90 5D |  if_ne	jmp	#LR__4700
2e760     04 4E 05 F1 | 	add	fp, #4
2e764     A7 12 02 FB | 	rdlong	arg01, fp
2e768     04 4E 85 F1 | 	sub	fp, #4
2e76c     00 14 06 F6 | 	mov	arg02, #0
2e770     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2e774     0C 4E 05 F1 | 	add	fp, #12
2e778     A7 FA 61 FC | 	wrlong	result1, fp
2e77c     0C 4E 85 F1 | 	sub	fp, #12
2e780     88 00 90 FD | 	jmp	#LR__4702
2e784                 | LR__4700
2e784     04 4E 05 F1 | 	add	fp, #4
2e788     A7 12 02 FB | 	rdlong	arg01, fp
2e78c     04 4E 85 F1 | 	sub	fp, #4
2e790     00 14 06 F6 | 	mov	arg02, #0
2e794     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2e798     0C 4E 05 F1 | 	add	fp, #12
2e79c     A7 FA 61 FC | 	wrlong	result1, fp
2e7a0     0C 4E 85 F1 | 	sub	fp, #12
2e7a4     04 FA 0D F2 | 	cmp	result1, #4 wz
2e7a8     0C 4E 05 A1 |  if_e	add	fp, #12
2e7ac     A7 00 68 AC |  if_e	wrlong	#0, fp
2e7b0     0C 4E 85 A1 |  if_e	sub	fp, #12
2e7b4     0C 4E 05 F1 | 	add	fp, #12
2e7b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2e7bc     0C 4E 85 F1 | 	sub	fp, #12
2e7c0     48 00 90 5D |  if_ne	jmp	#LR__4701
2e7c4     04 4E 05 F1 | 	add	fp, #4
2e7c8     A7 12 02 FB | 	rdlong	arg01, fp
2e7cc     04 4E 05 F1 | 	add	fp, #4
2e7d0     A7 14 02 FB | 	rdlong	arg02, fp
2e7d4     08 4E 85 F1 | 	sub	fp, #8
2e7d8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2e7dc     04 4E 05 F1 | 	add	fp, #4
2e7e0     A7 12 02 FB | 	rdlong	arg01, fp
2e7e4     04 4E 85 F1 | 	sub	fp, #4
2e7e8     00 14 06 F6 | 	mov	arg02, #0
2e7ec     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2e7f0     0C 4E 05 F1 | 	add	fp, #12
2e7f4     A7 FA 61 FC | 	wrlong	result1, fp
2e7f8     0C 4E 85 F1 | 	sub	fp, #12
2e7fc     04 FA 0D F2 | 	cmp	result1, #4 wz
2e800     0C 4E 05 A1 |  if_e	add	fp, #12
2e804     A7 00 68 AC |  if_e	wrlong	#0, fp
2e808     0C 4E 85 A1 |  if_e	sub	fp, #12
2e80c                 | LR__4701
2e80c                 | LR__4702
2e80c                 | LR__4703
2e80c                 | ' 			}
2e80c                 | ' 			;
2e80c                 | ' 		}
2e80c                 | ' 	}
2e80c                 | ' 	return res ;
2e80c     0C 4E 05 F1 | 	add	fp, #12
2e810     A7 FA 01 FB | 	rdlong	result1, fp
2e814     0C 4E 85 F1 | 	sub	fp, #12
2e818     A7 F0 03 F6 | 	mov	ptra, fp
2e81c     B2 00 A0 FD | 	call	#popregs_
2e820                 | _fatfs_cc_f_readdir_ret
2e820     2D 00 64 FD | 	ret
2e824                 | 
2e824                 | _fatfs_cc_f_stat
2e824     00 4A 05 F6 | 	mov	COUNT_, #0
2e828     A8 00 A0 FD | 	call	#pushregs_
2e82c     40 F0 07 F1 | 	add	ptra, #64
2e830     04 4E 05 F1 | 	add	fp, #4
2e834     A7 12 62 FC | 	wrlong	arg01, fp
2e838     04 4E 05 F1 | 	add	fp, #4
2e83c     A7 14 62 FC | 	wrlong	arg02, fp
2e840     04 4E 85 F1 | 	sub	fp, #4
2e844     A7 12 02 F6 | 	mov	arg01, fp
2e848     0C 4E 05 F1 | 	add	fp, #12
2e84c     A7 14 02 F6 | 	mov	arg02, fp
2e850     10 4E 85 F1 | 	sub	fp, #16
2e854     00 16 06 F6 | 	mov	arg03, #0
2e858     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2e85c     0C 4E 05 F1 | 	add	fp, #12
2e860     A7 FA 61 FC | 	wrlong	result1, fp
2e864     0C 4E 85 F1 | 	sub	fp, #12
2e868     00 FA 0D F2 | 	cmp	result1, #0 wz
2e86c     74 00 90 5D |  if_ne	jmp	#LR__4713
2e870     10 4E 05 F1 | 	add	fp, #16
2e874     A7 12 02 F6 | 	mov	arg01, fp
2e878     0C 4E 85 F1 | 	sub	fp, #12
2e87c     A7 14 02 FB | 	rdlong	arg02, fp
2e880     04 4E 85 F1 | 	sub	fp, #4
2e884     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2e888     0C 4E 05 F1 | 	add	fp, #12
2e88c     A7 FA 61 FC | 	wrlong	result1, fp
2e890     0C 4E 85 F1 | 	sub	fp, #12
2e894     00 FA 0D F2 | 	cmp	result1, #0 wz
2e898     48 00 90 5D |  if_ne	jmp	#LR__4712
2e89c     3B 4E 05 F1 | 	add	fp, #59
2e8a0     A7 FA C1 FA | 	rdbyte	result1, fp
2e8a4     3B 4E 85 F1 | 	sub	fp, #59
2e8a8     80 FA CD F7 | 	test	result1, #128 wz
2e8ac     0C 4E 05 51 |  if_ne	add	fp, #12
2e8b0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e8b4     0C 4E 85 51 |  if_ne	sub	fp, #12
2e8b8     28 00 90 5D |  if_ne	jmp	#LR__4711
2e8bc     08 4E 05 F1 | 	add	fp, #8
2e8c0     A7 FA 09 FB | 	rdlong	result1, fp wz
2e8c4     08 4E 85 F1 | 	sub	fp, #8
2e8c8     18 00 90 AD |  if_e	jmp	#LR__4710
2e8cc     10 4E 05 F1 | 	add	fp, #16
2e8d0     A7 12 02 F6 | 	mov	arg01, fp
2e8d4     08 4E 85 F1 | 	sub	fp, #8
2e8d8     A7 14 02 FB | 	rdlong	arg02, fp
2e8dc     08 4E 85 F1 | 	sub	fp, #8
2e8e0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2e8e4                 | LR__4710
2e8e4                 | LR__4711
2e8e4                 | LR__4712
2e8e4                 | LR__4713
2e8e4                 | ' 			}
2e8e4                 | ' 		}
2e8e4                 | ' 		;
2e8e4                 | ' 	}
2e8e4                 | ' 
2e8e4                 | ' 	return res ;
2e8e4     0C 4E 05 F1 | 	add	fp, #12
2e8e8     A7 FA 01 FB | 	rdlong	result1, fp
2e8ec     0C 4E 85 F1 | 	sub	fp, #12
2e8f0     A7 F0 03 F6 | 	mov	ptra, fp
2e8f4     B2 00 A0 FD | 	call	#popregs_
2e8f8                 | _fatfs_cc_f_stat_ret
2e8f8     2D 00 64 FD | 	ret
2e8fc                 | 
2e8fc                 | _fatfs_cc_f_unlink
2e8fc     00 4A 05 F6 | 	mov	COUNT_, #0
2e900     A8 00 A0 FD | 	call	#pushregs_
2e904     74 F0 07 F1 | 	add	ptra, #116
2e908     04 4E 05 F1 | 	add	fp, #4
2e90c     A7 12 62 FC | 	wrlong	arg01, fp
2e910     68 4E 05 F1 | 	add	fp, #104
2e914     A7 00 68 FC | 	wrlong	#0, fp
2e918     68 4E 85 F1 | 	sub	fp, #104
2e91c     A7 12 02 F6 | 	mov	arg01, fp
2e920     6C 4E 05 F1 | 	add	fp, #108
2e924     A7 14 02 F6 | 	mov	arg02, fp
2e928     70 4E 85 F1 | 	sub	fp, #112
2e92c     02 16 06 F6 | 	mov	arg03, #2
2e930     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2e934     08 4E 05 F1 | 	add	fp, #8
2e938     A7 FA 61 FC | 	wrlong	result1, fp
2e93c     08 4E 85 F1 | 	sub	fp, #8
2e940     00 FA 0D F2 | 	cmp	result1, #0 wz
2e944     E4 01 90 5D |  if_ne	jmp	#LR__4728
2e948     70 4E 05 F1 | 	add	fp, #112
2e94c     A7 16 02 FB | 	rdlong	arg03, fp
2e950     64 4E 85 F1 | 	sub	fp, #100
2e954     A7 16 62 FC | 	wrlong	arg03, fp
2e958     A7 12 02 F6 | 	mov	arg01, fp
2e95c     08 4E 85 F1 | 	sub	fp, #8
2e960     A7 14 02 FB | 	rdlong	arg02, fp
2e964     04 4E 85 F1 | 	sub	fp, #4
2e968     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2e96c     08 4E 05 F1 | 	add	fp, #8
2e970     A7 FA 61 FC | 	wrlong	result1, fp
2e974     00 FA 4D F2 | 	cmps	result1, #0 wz
2e978     08 4E 85 F1 | 	sub	fp, #8
2e97c     AC 01 90 5D |  if_ne	jmp	#LR__4727
2e980     37 4E 05 F1 | 	add	fp, #55
2e984     A7 FA C1 FA | 	rdbyte	result1, fp
2e988     37 4E 85 F1 | 	sub	fp, #55
2e98c     80 FA CD F7 | 	test	result1, #128 wz
2e990     08 4E 05 51 |  if_ne	add	fp, #8
2e994     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e998     08 4E 85 51 |  if_ne	sub	fp, #8
2e99c     1C 00 90 5D |  if_ne	jmp	#LR__4720
2e9a0     12 4E 05 F1 | 	add	fp, #18
2e9a4     A7 FA C1 FA | 	rdbyte	result1, fp
2e9a8     12 4E 85 F1 | 	sub	fp, #18
2e9ac     01 FA CD F7 | 	test	result1, #1 wz
2e9b0     08 4E 05 51 |  if_ne	add	fp, #8
2e9b4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2e9b8     08 4E 85 51 |  if_ne	sub	fp, #8
2e9bc                 | LR__4720
2e9bc     08 4E 05 F1 | 	add	fp, #8
2e9c0     A7 FA 09 FB | 	rdlong	result1, fp wz
2e9c4     08 4E 85 F1 | 	sub	fp, #8
2e9c8     C8 00 90 5D |  if_ne	jmp	#LR__4723
2e9cc     70 4E 05 F1 | 	add	fp, #112
2e9d0     A7 12 02 FB | 	rdlong	arg01, fp
2e9d4     48 4E 85 F1 | 	sub	fp, #72
2e9d8     A7 14 02 FB | 	rdlong	arg02, fp
2e9dc     28 4E 85 F1 | 	sub	fp, #40
2e9e0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2e9e4     6C 4E 05 F1 | 	add	fp, #108
2e9e8     A7 FA 61 FC | 	wrlong	result1, fp
2e9ec     5A 4E 85 F1 | 	sub	fp, #90
2e9f0     A7 FA C1 FA | 	rdbyte	result1, fp
2e9f4     12 4E 85 F1 | 	sub	fp, #18
2e9f8     10 FA CD F7 | 	test	result1, #16 wz
2e9fc     94 00 90 AD |  if_e	jmp	#LR__4722
2ea00     70 4E 05 F1 | 	add	fp, #112
2ea04     A7 FA 01 FB | 	rdlong	result1, fp
2ea08     34 4E 85 F1 | 	sub	fp, #52
2ea0c     A7 FA 61 FC | 	wrlong	result1, fp
2ea10     30 4E 05 F1 | 	add	fp, #48
2ea14     A7 16 02 FB | 	rdlong	arg03, fp
2ea18     28 4E 85 F1 | 	sub	fp, #40
2ea1c     A7 16 62 FC | 	wrlong	arg03, fp
2ea20     08 4E 85 F1 | 	sub	fp, #8
2ea24     A7 12 02 F6 | 	mov	arg01, fp
2ea28     3C 4E 85 F1 | 	sub	fp, #60
2ea2c     00 14 06 F6 | 	mov	arg02, #0
2ea30     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ea34     08 4E 05 F1 | 	add	fp, #8
2ea38     A7 FA 61 FC | 	wrlong	result1, fp
2ea3c     08 4E 85 F1 | 	sub	fp, #8
2ea40     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea44     4C 00 90 5D |  if_ne	jmp	#LR__4721
2ea48     3C 4E 05 F1 | 	add	fp, #60
2ea4c     A7 12 02 F6 | 	mov	arg01, fp
2ea50     3C 4E 85 F1 | 	sub	fp, #60
2ea54     00 14 06 F6 | 	mov	arg02, #0
2ea58     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2ea5c     08 4E 05 F1 | 	add	fp, #8
2ea60     A7 FA 61 FC | 	wrlong	result1, fp
2ea64     00 FA 4D F2 | 	cmps	result1, #0 wz
2ea68     08 4E 85 F1 | 	sub	fp, #8
2ea6c     08 4E 05 A1 |  if_e	add	fp, #8
2ea70     A7 0E 68 AC |  if_e	wrlong	#7, fp
2ea74     08 4E 85 A1 |  if_e	sub	fp, #8
2ea78     08 4E 05 F1 | 	add	fp, #8
2ea7c     A7 FA 01 FB | 	rdlong	result1, fp
2ea80     08 4E 85 F1 | 	sub	fp, #8
2ea84     04 FA 0D F2 | 	cmp	result1, #4 wz
2ea88     08 4E 05 A1 |  if_e	add	fp, #8
2ea8c     A7 00 68 AC |  if_e	wrlong	#0, fp
2ea90     08 4E 85 A1 |  if_e	sub	fp, #8
2ea94                 | LR__4721
2ea94                 | LR__4722
2ea94                 | LR__4723
2ea94     08 4E 05 F1 | 	add	fp, #8
2ea98     A7 FA 09 FB | 	rdlong	result1, fp wz
2ea9c     08 4E 85 F1 | 	sub	fp, #8
2eaa0     88 00 90 5D |  if_ne	jmp	#LR__4726
2eaa4     0C 4E 05 F1 | 	add	fp, #12
2eaa8     A7 12 02 F6 | 	mov	arg01, fp
2eaac     0C 4E 85 F1 | 	sub	fp, #12
2eab0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2eab4     08 4E 05 F1 | 	add	fp, #8
2eab8     A7 FA 61 FC | 	wrlong	result1, fp
2eabc     08 4E 85 F1 | 	sub	fp, #8
2eac0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eac4     38 00 90 5D |  if_ne	jmp	#LR__4724
2eac8     6C 4E 05 F1 | 	add	fp, #108
2eacc     A7 FA 09 FB | 	rdlong	result1, fp wz
2ead0     6C 4E 85 F1 | 	sub	fp, #108
2ead4     28 00 90 AD |  if_e	jmp	#LR__4724
2ead8     0C 4E 05 F1 | 	add	fp, #12
2eadc     A7 12 02 F6 | 	mov	arg01, fp
2eae0     60 4E 05 F1 | 	add	fp, #96
2eae4     A7 14 02 FB | 	rdlong	arg02, fp
2eae8     6C 4E 85 F1 | 	sub	fp, #108
2eaec     00 16 06 F6 | 	mov	arg03, #0
2eaf0     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2eaf4     08 4E 05 F1 | 	add	fp, #8
2eaf8     A7 FA 61 FC | 	wrlong	result1, fp
2eafc     08 4E 85 F1 | 	sub	fp, #8
2eb00                 | LR__4724
2eb00     08 4E 05 F1 | 	add	fp, #8
2eb04     A7 FA 09 FB | 	rdlong	result1, fp wz
2eb08     08 4E 85 F1 | 	sub	fp, #8
2eb0c     1C 00 90 5D |  if_ne	jmp	#LR__4725
2eb10     70 4E 05 F1 | 	add	fp, #112
2eb14     A7 12 02 FB | 	rdlong	arg01, fp
2eb18     70 4E 85 F1 | 	sub	fp, #112
2eb1c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2eb20     08 4E 05 F1 | 	add	fp, #8
2eb24     A7 FA 61 FC | 	wrlong	result1, fp
2eb28     08 4E 85 F1 | 	sub	fp, #8
2eb2c                 | LR__4725
2eb2c                 | LR__4726
2eb2c                 | LR__4727
2eb2c                 | LR__4728
2eb2c                 | ' 			}
2eb2c                 | ' 		}
2eb2c                 | ' 		;
2eb2c                 | ' 	}
2eb2c                 | ' 
2eb2c                 | ' 	return res ;
2eb2c     08 4E 05 F1 | 	add	fp, #8
2eb30     A7 FA 01 FB | 	rdlong	result1, fp
2eb34     08 4E 85 F1 | 	sub	fp, #8
2eb38     A7 F0 03 F6 | 	mov	ptra, fp
2eb3c     B2 00 A0 FD | 	call	#popregs_
2eb40                 | _fatfs_cc_f_unlink_ret
2eb40     2D 00 64 FD | 	ret
2eb44                 | 
2eb44                 | _fatfs_cc_f_mkdir
2eb44     00 4A 05 F6 | 	mov	COUNT_, #0
2eb48     A8 00 A0 FD | 	call	#pushregs_
2eb4c     5C F0 07 F1 | 	add	ptra, #92
2eb50     04 4E 05 F1 | 	add	fp, #4
2eb54     A7 12 62 FC | 	wrlong	arg01, fp
2eb58     A7 12 02 F6 | 	mov	arg01, fp
2eb5c     48 4E 05 F1 | 	add	fp, #72
2eb60     A7 14 02 F6 | 	mov	arg02, fp
2eb64     4C 4E 85 F1 | 	sub	fp, #76
2eb68     02 16 06 F6 | 	mov	arg03, #2
2eb6c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2eb70     08 4E 05 F1 | 	add	fp, #8
2eb74     A7 FA 61 FC | 	wrlong	result1, fp
2eb78     08 4E 85 F1 | 	sub	fp, #8
2eb7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb80     C4 02 90 5D |  if_ne	jmp	#LR__4735
2eb84     4C 4E 05 F1 | 	add	fp, #76
2eb88     A7 16 02 FB | 	rdlong	arg03, fp
2eb8c     40 4E 85 F1 | 	sub	fp, #64
2eb90     A7 16 62 FC | 	wrlong	arg03, fp
2eb94     A7 12 02 F6 | 	mov	arg01, fp
2eb98     08 4E 85 F1 | 	sub	fp, #8
2eb9c     A7 14 02 FB | 	rdlong	arg02, fp
2eba0     04 4E 85 F1 | 	sub	fp, #4
2eba4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2eba8     08 4E 05 F1 | 	add	fp, #8
2ebac     A7 FA 61 FC | 	wrlong	result1, fp
2ebb0     00 FA 4D F2 | 	cmps	result1, #0 wz
2ebb4     08 4E 85 F1 | 	sub	fp, #8
2ebb8     08 4E 05 A1 |  if_e	add	fp, #8
2ebbc     A7 10 68 AC |  if_e	wrlong	#8, fp
2ebc0     08 4E 85 A1 |  if_e	sub	fp, #8
2ebc4     08 4E 05 F1 | 	add	fp, #8
2ebc8     A7 FA 01 FB | 	rdlong	result1, fp
2ebcc     08 4E 85 F1 | 	sub	fp, #8
2ebd0     04 FA 0D F2 | 	cmp	result1, #4 wz
2ebd4     70 02 90 5D |  if_ne	jmp	#LR__4734
2ebd8     4C 4E 05 F1 | 	add	fp, #76
2ebdc     A7 16 02 FB | 	rdlong	arg03, fp
2ebe0     10 4E 85 F1 | 	sub	fp, #16
2ebe4     A7 16 62 FC | 	wrlong	arg03, fp
2ebe8     A7 12 02 F6 | 	mov	arg01, fp
2ebec     3C 4E 85 F1 | 	sub	fp, #60
2ebf0     00 14 06 F6 | 	mov	arg02, #0
2ebf4     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2ebf8     50 4E 05 F1 | 	add	fp, #80
2ebfc     A7 FA 61 FC | 	wrlong	result1, fp
2ec00     48 4E 85 F1 | 	sub	fp, #72
2ec04     A7 00 68 FC | 	wrlong	#0, fp
2ec08     48 4E 05 F1 | 	add	fp, #72
2ec0c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ec10     50 4E 85 F1 | 	sub	fp, #80
2ec14     08 4E 05 A1 |  if_e	add	fp, #8
2ec18     A7 0E 68 AC |  if_e	wrlong	#7, fp
2ec1c     08 4E 85 A1 |  if_e	sub	fp, #8
2ec20     50 4E 05 F1 | 	add	fp, #80
2ec24     A7 FA 01 FB | 	rdlong	result1, fp
2ec28     50 4E 85 F1 | 	sub	fp, #80
2ec2c     01 FA 0D F2 | 	cmp	result1, #1 wz
2ec30     08 4E 05 A1 |  if_e	add	fp, #8
2ec34     A7 04 68 AC |  if_e	wrlong	#2, fp
2ec38     08 4E 85 A1 |  if_e	sub	fp, #8
2ec3c     50 4E 05 F1 | 	add	fp, #80
2ec40     A7 16 02 FB | 	rdlong	arg03, fp
2ec44     50 4E 85 F1 | 	sub	fp, #80
2ec48     FF FF 7F FF 
2ec4c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2ec50     08 4E 05 A1 |  if_e	add	fp, #8
2ec54     A7 02 68 AC |  if_e	wrlong	#1, fp
2ec58     08 4E 85 A1 |  if_e	sub	fp, #8
2ec5c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2ec60     58 4E 05 F1 | 	add	fp, #88
2ec64     A7 FA 61 FC | 	wrlong	result1, fp
2ec68     50 4E 85 F1 | 	sub	fp, #80
2ec6c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ec70     08 4E 85 F1 | 	sub	fp, #8
2ec74     1C 01 90 5D |  if_ne	jmp	#LR__4731
2ec78     4C 4E 05 F1 | 	add	fp, #76
2ec7c     A7 12 02 FB | 	rdlong	arg01, fp
2ec80     04 4E 05 F1 | 	add	fp, #4
2ec84     A7 14 02 FB | 	rdlong	arg02, fp
2ec88     50 4E 85 F1 | 	sub	fp, #80
2ec8c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2ec90     08 4E 05 F1 | 	add	fp, #8
2ec94     A7 FA 61 FC | 	wrlong	result1, fp
2ec98     00 FA 4D F2 | 	cmps	result1, #0 wz
2ec9c     08 4E 85 F1 | 	sub	fp, #8
2eca0     F0 00 90 5D |  if_ne	jmp	#LR__4730
2eca4     4C 4E 05 F1 | 	add	fp, #76
2eca8     A7 12 02 FB | 	rdlong	arg01, fp
2ecac     4C 4E 85 F1 | 	sub	fp, #76
2ecb0     34 12 06 F1 | 	add	arg01, #52
2ecb4     20 14 06 F6 | 	mov	arg02, #32
2ecb8     0B 16 06 F6 | 	mov	arg03, #11
2ecbc     98 00 A0 FD | 	call	#\builtin_bytefill_
2ecc0     4C 4E 05 F1 | 	add	fp, #76
2ecc4     A7 FA 01 FB | 	rdlong	result1, fp
2ecc8     34 FA 05 F1 | 	add	result1, #52
2eccc     FD 5C 48 FC | 	wrbyte	#46, result1
2ecd0     A7 16 02 FB | 	rdlong	arg03, fp
2ecd4     3F 16 06 F1 | 	add	arg03, #63
2ecd8     0B 21 48 FC | 	wrbyte	#16, arg03
2ecdc     A7 12 02 FB | 	rdlong	arg01, fp
2ece0     4A 12 06 F1 | 	add	arg01, #74
2ece4     0C 4E 05 F1 | 	add	fp, #12
2ece8     A7 14 02 FB | 	rdlong	arg02, fp
2ecec     09 15 62 FC | 	wrlong	arg02, arg01
2ecf0     0C 4E 85 F1 | 	sub	fp, #12
2ecf4     A7 14 02 FB | 	rdlong	arg02, fp
2ecf8     0A 13 02 F6 | 	mov	arg01, arg02
2ecfc     34 14 06 F1 | 	add	arg02, #52
2ed00     04 4E 05 F1 | 	add	fp, #4
2ed04     A7 16 02 FB | 	rdlong	arg03, fp
2ed08     50 4E 85 F1 | 	sub	fp, #80
2ed0c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ed10     4C 4E 05 F1 | 	add	fp, #76
2ed14     A7 14 02 FB | 	rdlong	arg02, fp
2ed18     0A 13 02 F6 | 	mov	arg01, arg02
2ed1c     54 12 06 F1 | 	add	arg01, #84
2ed20     4C 4E 85 F1 | 	sub	fp, #76
2ed24     34 14 06 F1 | 	add	arg02, #52
2ed28     20 16 06 F6 | 	mov	arg03, #32
2ed2c     74 27 BF FD | 	call	#__system____builtin_memmove
2ed30     4C 4E 05 F1 | 	add	fp, #76
2ed34     A7 16 02 FB | 	rdlong	arg03, fp
2ed38     55 16 06 F1 | 	add	arg03, #85
2ed3c     0B 5D 48 FC | 	wrbyte	#46, arg03
2ed40     38 4E 85 F1 | 	sub	fp, #56
2ed44     A7 16 02 FB | 	rdlong	arg03, fp
2ed48     40 4E 05 F1 | 	add	fp, #64
2ed4c     A7 16 62 FC | 	wrlong	arg03, fp
2ed50     08 4E 85 F1 | 	sub	fp, #8
2ed54     A7 14 02 FB | 	rdlong	arg02, fp
2ed58     0A 13 02 F6 | 	mov	arg01, arg02
2ed5c     54 14 06 F1 | 	add	arg02, #84
2ed60     4C 4E 85 F1 | 	sub	fp, #76
2ed64     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ed68     4C 4E 05 F1 | 	add	fp, #76
2ed6c     A7 16 02 FB | 	rdlong	arg03, fp
2ed70     03 16 06 F1 | 	add	arg03, #3
2ed74     0B 03 48 FC | 	wrbyte	#1, arg03
2ed78     40 4E 85 F1 | 	sub	fp, #64
2ed7c     A7 12 02 F6 | 	mov	arg01, fp
2ed80     0C 4E 85 F1 | 	sub	fp, #12
2ed84     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2ed88     08 4E 05 F1 | 	add	fp, #8
2ed8c     A7 FA 61 FC | 	wrlong	result1, fp
2ed90     08 4E 85 F1 | 	sub	fp, #8
2ed94                 | LR__4730
2ed94                 | LR__4731
2ed94     08 4E 05 F1 | 	add	fp, #8
2ed98     A7 FA 09 FB | 	rdlong	result1, fp wz
2ed9c     08 4E 85 F1 | 	sub	fp, #8
2eda0     88 00 90 5D |  if_ne	jmp	#LR__4732
2eda4     28 4E 05 F1 | 	add	fp, #40
2eda8     A7 12 02 FB | 	rdlong	arg01, fp
2edac     16 12 06 F1 | 	add	arg01, #22
2edb0     30 4E 05 F1 | 	add	fp, #48
2edb4     A7 14 02 FB | 	rdlong	arg02, fp
2edb8     09 15 62 FC | 	wrlong	arg02, arg01
2edbc     0C 4E 85 F1 | 	sub	fp, #12
2edc0     A7 12 02 FB | 	rdlong	arg01, fp
2edc4     24 4E 85 F1 | 	sub	fp, #36
2edc8     A7 14 02 FB | 	rdlong	arg02, fp
2edcc     28 4E 05 F1 | 	add	fp, #40
2edd0     A7 16 02 FB | 	rdlong	arg03, fp
2edd4     50 4E 85 F1 | 	sub	fp, #80
2edd8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2eddc     28 4E 05 F1 | 	add	fp, #40
2ede0     A7 FA 01 FB | 	rdlong	result1, fp
2ede4     0B FA 05 F1 | 	add	result1, #11
2ede8     FD 20 48 FC | 	wrbyte	#16, result1
2edec     24 4E 05 F1 | 	add	fp, #36
2edf0     A7 FA 01 FB | 	rdlong	result1, fp
2edf4     03 FA 05 F1 | 	add	result1, #3
2edf8     FD 02 48 FC | 	wrbyte	#1, result1
2edfc     44 4E 85 F1 | 	sub	fp, #68
2ee00     A7 FA 09 FB | 	rdlong	result1, fp wz
2ee04     08 4E 85 F1 | 	sub	fp, #8
2ee08     3C 00 90 5D |  if_ne	jmp	#LR__4733
2ee0c     4C 4E 05 F1 | 	add	fp, #76
2ee10     A7 12 02 FB | 	rdlong	arg01, fp
2ee14     4C 4E 85 F1 | 	sub	fp, #76
2ee18     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2ee1c     08 4E 05 F1 | 	add	fp, #8
2ee20     A7 FA 61 FC | 	wrlong	result1, fp
2ee24     08 4E 85 F1 | 	sub	fp, #8
2ee28     1C 00 90 FD | 	jmp	#LR__4733
2ee2c                 | LR__4732
2ee2c     3C 4E 05 F1 | 	add	fp, #60
2ee30     A7 12 02 F6 | 	mov	arg01, fp
2ee34     14 4E 05 F1 | 	add	fp, #20
2ee38     A7 14 02 FB | 	rdlong	arg02, fp
2ee3c     50 4E 85 F1 | 	sub	fp, #80
2ee40     00 16 06 F6 | 	mov	arg03, #0
2ee44     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2ee48                 | LR__4733
2ee48                 | LR__4734
2ee48                 | LR__4735
2ee48                 | ' 				remove_chain(&sobj, dcl, 0);
2ee48                 | ' 			}
2ee48                 | ' 		}
2ee48                 | ' 		;
2ee48                 | ' 	}
2ee48                 | ' 
2ee48                 | ' 	return res ;
2ee48     08 4E 05 F1 | 	add	fp, #8
2ee4c     A7 FA 01 FB | 	rdlong	result1, fp
2ee50     08 4E 85 F1 | 	sub	fp, #8
2ee54     A7 F0 03 F6 | 	mov	ptra, fp
2ee58     B2 00 A0 FD | 	call	#popregs_
2ee5c                 | _fatfs_cc_f_mkdir_ret
2ee5c     2D 00 64 FD | 	ret
2ee60                 | 
2ee60                 | _fatfs_cc_f_rename
2ee60     01 4A 05 F6 | 	mov	COUNT_, #1
2ee64     A8 00 A0 FD | 	call	#pushregs_
2ee68     9C F0 07 F1 | 	add	ptra, #156
2ee6c     04 4E 05 F1 | 	add	fp, #4
2ee70     A7 12 62 FC | 	wrlong	arg01, fp
2ee74     04 4E 05 F1 | 	add	fp, #4
2ee78     A7 14 62 FC | 	wrlong	arg02, fp
2ee7c     A7 12 02 F6 | 	mov	arg01, fp
2ee80     08 4E 85 F1 | 	sub	fp, #8
2ee84     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2ee88     04 4E 05 F1 | 	add	fp, #4
2ee8c     A7 12 02 F6 | 	mov	arg01, fp
2ee90     6C 4E 05 F1 | 	add	fp, #108
2ee94     A7 14 02 F6 | 	mov	arg02, fp
2ee98     70 4E 85 F1 | 	sub	fp, #112
2ee9c     02 16 06 F6 | 	mov	arg03, #2
2eea0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2eea4     0C 4E 05 F1 | 	add	fp, #12
2eea8     A7 FA 61 FC | 	wrlong	result1, fp
2eeac     0C 4E 85 F1 | 	sub	fp, #12
2eeb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eeb4     44 03 90 5D |  if_ne	jmp	#LR__4753
2eeb8     70 4E 05 F1 | 	add	fp, #112
2eebc     A7 16 02 FB | 	rdlong	arg03, fp
2eec0     60 4E 85 F1 | 	sub	fp, #96
2eec4     A7 16 62 FC | 	wrlong	arg03, fp
2eec8     A7 12 02 F6 | 	mov	arg01, fp
2eecc     0C 4E 85 F1 | 	sub	fp, #12
2eed0     A7 14 02 FB | 	rdlong	arg02, fp
2eed4     04 4E 85 F1 | 	sub	fp, #4
2eed8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2eedc     0C 4E 05 F1 | 	add	fp, #12
2eee0     A7 FA 61 FC | 	wrlong	result1, fp
2eee4     00 FA 4D F2 | 	cmps	result1, #0 wz
2eee8     0C 4E 85 F1 | 	sub	fp, #12
2eeec     1C 00 90 5D |  if_ne	jmp	#LR__4740
2eef0     3B 4E 05 F1 | 	add	fp, #59
2eef4     A7 FA C1 FA | 	rdbyte	result1, fp
2eef8     3B 4E 85 F1 | 	sub	fp, #59
2eefc     A0 FA CD F7 | 	test	result1, #160 wz
2ef00     0C 4E 05 51 |  if_ne	add	fp, #12
2ef04     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ef08     0C 4E 85 51 |  if_ne	sub	fp, #12
2ef0c                 | LR__4740
2ef0c     0C 4E 05 F1 | 	add	fp, #12
2ef10     A7 1E 0A FB | 	rdlong	local01, fp wz
2ef14     0C 4E 85 F1 | 	sub	fp, #12
2ef18     E0 02 90 5D |  if_ne	jmp	#LR__4752
2ef1c     74 4E 05 F1 | 	add	fp, #116
2ef20     A7 12 02 F6 | 	mov	arg01, fp
2ef24     48 4E 85 F1 | 	sub	fp, #72
2ef28     A7 14 02 FB | 	rdlong	arg02, fp
2ef2c     2C 4E 85 F1 | 	sub	fp, #44
2ef30     20 16 06 F6 | 	mov	arg03, #32
2ef34     6C 25 BF FD | 	call	#__system____builtin_memmove
2ef38     40 4E 05 F1 | 	add	fp, #64
2ef3c     A7 12 02 F6 | 	mov	arg01, fp
2ef40     30 4E 85 F1 | 	sub	fp, #48
2ef44     A7 14 02 F6 | 	mov	arg02, fp
2ef48     10 4E 85 F1 | 	sub	fp, #16
2ef4c     30 16 06 F6 | 	mov	arg03, #48
2ef50     50 25 BF FD | 	call	#__system____builtin_memmove
2ef54     40 4E 05 F1 | 	add	fp, #64
2ef58     A7 12 02 F6 | 	mov	arg01, fp
2ef5c     38 4E 85 F1 | 	sub	fp, #56
2ef60     A7 14 02 FB | 	rdlong	arg02, fp
2ef64     08 4E 85 F1 | 	sub	fp, #8
2ef68     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2ef6c     0C 4E 05 F1 | 	add	fp, #12
2ef70     A7 FA 61 FC | 	wrlong	result1, fp
2ef74     0C 4E 85 F1 | 	sub	fp, #12
2ef78     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef7c     4C 00 90 5D |  if_ne	jmp	#LR__4743
2ef80     48 4E 05 F1 | 	add	fp, #72
2ef84     A7 FA 01 FB | 	rdlong	result1, fp
2ef88     30 4E 85 F1 | 	sub	fp, #48
2ef8c     A7 16 02 FB | 	rdlong	arg03, fp
2ef90     18 4E 85 F1 | 	sub	fp, #24
2ef94     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ef98     20 00 90 5D |  if_ne	jmp	#LR__4741
2ef9c     50 4E 05 F1 | 	add	fp, #80
2efa0     A7 FA 01 FB | 	rdlong	result1, fp
2efa4     30 4E 85 F1 | 	sub	fp, #48
2efa8     A7 16 02 FB | 	rdlong	arg03, fp
2efac     20 4E 85 F1 | 	sub	fp, #32
2efb0     0B FB 09 F2 | 	cmp	result1, arg03 wz
2efb4     04 1E 06 A6 |  if_e	mov	local01, #4
2efb8     04 00 90 AD |  if_e	jmp	#LR__4742
2efbc                 | LR__4741
2efbc     08 1E 06 F6 | 	mov	local01, #8
2efc0                 | LR__4742
2efc0     0C 4E 05 F1 | 	add	fp, #12
2efc4     A7 1E 62 FC | 	wrlong	local01, fp
2efc8     0C 4E 85 F1 | 	sub	fp, #12
2efcc                 | LR__4743
2efcc     0C 4E 05 F1 | 	add	fp, #12
2efd0     A7 1E 02 FB | 	rdlong	local01, fp
2efd4     0C 4E 85 F1 | 	sub	fp, #12
2efd8     04 1E 0E F2 | 	cmp	local01, #4 wz
2efdc     CC 01 90 5D |  if_ne	jmp	#LR__4749
2efe0     40 4E 05 F1 | 	add	fp, #64
2efe4     A7 12 02 F6 | 	mov	arg01, fp
2efe8     40 4E 85 F1 | 	sub	fp, #64
2efec     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2eff0     0C 4E 05 F1 | 	add	fp, #12
2eff4     A7 FA 61 FC | 	wrlong	result1, fp
2eff8     0C 4E 85 F1 | 	sub	fp, #12
2effc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f000     A8 01 90 5D |  if_ne	jmp	#LR__4748
2f004     5C 4E 05 F1 | 	add	fp, #92
2f008     A7 12 02 FB | 	rdlong	arg01, fp
2f00c     38 4E 05 F1 | 	add	fp, #56
2f010     A7 12 62 FC | 	wrlong	arg01, fp
2f014     0D 12 06 F1 | 	add	arg01, #13
2f018     20 4E 85 F1 | 	sub	fp, #32
2f01c     A7 14 02 F6 | 	mov	arg02, fp
2f020     74 4E 85 F1 | 	sub	fp, #116
2f024     0D 14 06 F1 | 	add	arg02, #13
2f028     13 16 06 F6 | 	mov	arg03, #19
2f02c     74 24 BF FD | 	call	#__system____builtin_memmove
2f030     94 4E 05 F1 | 	add	fp, #148
2f034     A7 1E 02 FB | 	rdlong	local01, fp
2f038     15 4E 85 F1 | 	sub	fp, #21
2f03c     A7 FA C1 FA | 	rdbyte	result1, fp
2f040     0B 1E 06 F1 | 	add	local01, #11
2f044     0F FB 41 FC | 	wrbyte	result1, local01
2f048     15 4E 05 F1 | 	add	fp, #21
2f04c     A7 1E 02 FB | 	rdlong	local01, fp
2f050     94 4E 85 F1 | 	sub	fp, #148
2f054     0B 1E 06 F1 | 	add	local01, #11
2f058     0F 1F C2 FA | 	rdbyte	local01, local01
2f05c     10 1E CE F7 | 	test	local01, #16 wz
2f060     24 00 90 5D |  if_ne	jmp	#LR__4744
2f064     94 4E 05 F1 | 	add	fp, #148
2f068     A7 FA 01 FB | 	rdlong	result1, fp
2f06c     FD 1E 02 F6 | 	mov	local01, result1
2f070     94 4E 85 F1 | 	sub	fp, #148
2f074     0B FA 05 F1 | 	add	result1, #11
2f078     FD FA C1 FA | 	rdbyte	result1, result1
2f07c     20 FA 45 F5 | 	or	result1, #32
2f080     0B 1E 06 F1 | 	add	local01, #11
2f084     0F FB 41 FC | 	wrbyte	result1, local01
2f088                 | LR__4744
2f088     70 4E 05 F1 | 	add	fp, #112
2f08c     A7 1E 02 FB | 	rdlong	local01, fp
2f090     03 1E 06 F1 | 	add	local01, #3
2f094     0F 03 48 FC | 	wrbyte	#1, local01
2f098     24 4E 05 F1 | 	add	fp, #36
2f09c     A7 1E 02 FB | 	rdlong	local01, fp
2f0a0     94 4E 85 F1 | 	sub	fp, #148
2f0a4     0B 1E 06 F1 | 	add	local01, #11
2f0a8     0F 1F C2 FA | 	rdbyte	local01, local01
2f0ac     10 1E CE F7 | 	test	local01, #16 wz
2f0b0     F8 00 90 AD |  if_e	jmp	#LR__4747
2f0b4     18 4E 05 F1 | 	add	fp, #24
2f0b8     A7 16 02 FB | 	rdlong	arg03, fp
2f0bc     30 4E 05 F1 | 	add	fp, #48
2f0c0     A7 1E 02 FB | 	rdlong	local01, fp
2f0c4     48 4E 85 F1 | 	sub	fp, #72
2f0c8     0F 17 0A F2 | 	cmp	arg03, local01 wz
2f0cc     DC 00 90 AD |  if_e	jmp	#LR__4747
2f0d0     70 4E 05 F1 | 	add	fp, #112
2f0d4     A7 12 02 FB | 	rdlong	arg01, fp
2f0d8     09 1F 02 F6 | 	mov	local01, arg01
2f0dc     24 4E 05 F1 | 	add	fp, #36
2f0e0     A7 14 02 FB | 	rdlong	arg02, fp
2f0e4     94 4E 85 F1 | 	sub	fp, #148
2f0e8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2f0ec     FD 14 02 F6 | 	mov	arg02, result1
2f0f0     0F 13 02 F6 | 	mov	arg01, local01
2f0f4     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2f0f8     98 4E 05 F1 | 	add	fp, #152
2f0fc     A7 FA 61 FC | 	wrlong	result1, fp
2f100     00 FA 4D F2 | 	cmps	result1, #0 wz
2f104     98 4E 85 F1 | 	sub	fp, #152
2f108     0C 4E 05 A1 |  if_e	add	fp, #12
2f10c     A7 04 68 AC |  if_e	wrlong	#2, fp
2f110     0C 4E 85 A1 |  if_e	sub	fp, #12
2f114     94 00 90 AD |  if_e	jmp	#LR__4746
2f118     70 4E 05 F1 | 	add	fp, #112
2f11c     A7 12 02 FB | 	rdlong	arg01, fp
2f120     28 4E 05 F1 | 	add	fp, #40
2f124     A7 14 02 FB | 	rdlong	arg02, fp
2f128     98 4E 85 F1 | 	sub	fp, #152
2f12c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2f130     0C 4E 05 F1 | 	add	fp, #12
2f134     A7 FA 61 FC | 	wrlong	result1, fp
2f138     64 4E 05 F1 | 	add	fp, #100
2f13c     A7 1E 02 FB | 	rdlong	local01, fp
2f140     54 1E 06 F1 | 	add	local01, #84
2f144     24 4E 05 F1 | 	add	fp, #36
2f148     A7 1E 62 FC | 	wrlong	local01, fp
2f14c     88 4E 85 F1 | 	sub	fp, #136
2f150     A7 1E 0A FB | 	rdlong	local01, fp wz
2f154     0C 4E 85 F1 | 	sub	fp, #12
2f158     50 00 90 5D |  if_ne	jmp	#LR__4745
2f15c     94 4E 05 F1 | 	add	fp, #148
2f160     A7 1E 02 FB | 	rdlong	local01, fp
2f164     94 4E 85 F1 | 	sub	fp, #148
2f168     01 1E 06 F1 | 	add	local01, #1
2f16c     0F 1F C2 FA | 	rdbyte	local01, local01
2f170     2E 1E 0E F2 | 	cmp	local01, #46 wz
2f174     34 00 90 5D |  if_ne	jmp	#LR__4745
2f178     70 4E 05 F1 | 	add	fp, #112
2f17c     A7 12 02 FB | 	rdlong	arg01, fp
2f180     24 4E 05 F1 | 	add	fp, #36
2f184     A7 14 02 FB | 	rdlong	arg02, fp
2f188     4C 4E 85 F1 | 	sub	fp, #76
2f18c     A7 16 02 FB | 	rdlong	arg03, fp
2f190     48 4E 85 F1 | 	sub	fp, #72
2f194     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2f198     70 4E 05 F1 | 	add	fp, #112
2f19c     A7 1E 02 FB | 	rdlong	local01, fp
2f1a0     70 4E 85 F1 | 	sub	fp, #112
2f1a4     03 1E 06 F1 | 	add	local01, #3
2f1a8     0F 03 48 FC | 	wrbyte	#1, local01
2f1ac                 | LR__4745
2f1ac                 | LR__4746
2f1ac                 | LR__4747
2f1ac                 | LR__4748
2f1ac                 | LR__4749
2f1ac     0C 4E 05 F1 | 	add	fp, #12
2f1b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2f1b4     0C 4E 85 F1 | 	sub	fp, #12
2f1b8     40 00 90 5D |  if_ne	jmp	#LR__4751
2f1bc     10 4E 05 F1 | 	add	fp, #16
2f1c0     A7 12 02 F6 | 	mov	arg01, fp
2f1c4     10 4E 85 F1 | 	sub	fp, #16
2f1c8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2f1cc     0C 4E 05 F1 | 	add	fp, #12
2f1d0     A7 FA 61 FC | 	wrlong	result1, fp
2f1d4     0C 4E 85 F1 | 	sub	fp, #12
2f1d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f1dc     1C 00 90 5D |  if_ne	jmp	#LR__4750
2f1e0     70 4E 05 F1 | 	add	fp, #112
2f1e4     A7 12 02 FB | 	rdlong	arg01, fp
2f1e8     70 4E 85 F1 | 	sub	fp, #112
2f1ec     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2f1f0     0C 4E 05 F1 | 	add	fp, #12
2f1f4     A7 FA 61 FC | 	wrlong	result1, fp
2f1f8     0C 4E 85 F1 | 	sub	fp, #12
2f1fc                 | LR__4750
2f1fc                 | LR__4751
2f1fc                 | LR__4752
2f1fc                 | LR__4753
2f1fc                 | ' 					res = sync_fs(fs);
2f1fc                 | ' 				}
2f1fc                 | ' 			}
2f1fc                 | ' 
2f1fc                 | ' 		}
2f1fc                 | ' 		;
2f1fc                 | ' 	}
2f1fc                 | ' 
2f1fc                 | ' 	return res ;
2f1fc     0C 4E 05 F1 | 	add	fp, #12
2f200     A7 FA 01 FB | 	rdlong	result1, fp
2f204     0C 4E 85 F1 | 	sub	fp, #12
2f208     A7 F0 03 F6 | 	mov	ptra, fp
2f20c     B2 00 A0 FD | 	call	#popregs_
2f210                 | _fatfs_cc_f_rename_ret
2f210     2D 00 64 FD | 	ret
2f214                 | 
2f214                 | _fatfs_cc_time
2f214     00 4A 05 F6 | 	mov	COUNT_, #0
2f218     A8 00 A0 FD | 	call	#pushregs_
2f21c     14 F0 07 F1 | 	add	ptra, #20
2f220     04 4E 05 F1 | 	add	fp, #4
2f224     A7 12 62 FC | 	wrlong	arg01, fp
2f228     04 4E 05 F1 | 	add	fp, #4
2f22c     A7 12 02 F6 | 	mov	arg01, fp
2f230     08 4E 85 F1 | 	sub	fp, #8
2f234     00 14 06 F6 | 	mov	arg02, #0
2f238     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2f23c     08 4E 05 F1 | 	add	fp, #8
2f240     A7 FA 01 FB | 	rdlong	result1, fp
2f244     08 4E 05 F1 | 	add	fp, #8
2f248     A7 FA 61 FC | 	wrlong	result1, fp
2f24c     0C 4E 85 F1 | 	sub	fp, #12
2f250     A7 FA 09 FB | 	rdlong	result1, fp wz
2f254     04 4E 85 F1 | 	sub	fp, #4
2f258     18 00 90 AD |  if_e	jmp	#LR__4760
2f25c     04 4E 05 F1 | 	add	fp, #4
2f260     A7 FA 01 FB | 	rdlong	result1, fp
2f264     0C 4E 05 F1 | 	add	fp, #12
2f268     A7 14 02 FB | 	rdlong	arg02, fp
2f26c     10 4E 85 F1 | 	sub	fp, #16
2f270     FD 14 62 FC | 	wrlong	arg02, result1
2f274                 | LR__4760
2f274                 | '         *tp = now;
2f274                 | '     return now;
2f274     10 4E 05 F1 | 	add	fp, #16
2f278     A7 FA 01 FB | 	rdlong	result1, fp
2f27c     10 4E 85 F1 | 	sub	fp, #16
2f280     A7 F0 03 F6 | 	mov	ptra, fp
2f284     B2 00 A0 FD | 	call	#popregs_
2f288                 | _fatfs_cc_time_ret
2f288     2D 00 64 FD | 	ret
2f28c                 | 
2f28c                 | _fatfs_cc_mktime
2f28c     06 4A 05 F6 | 	mov	COUNT_, #6
2f290     A8 00 A0 FD | 	call	#pushregs_
2f294     09 1F 02 F6 | 	mov	local01, arg01
2f298     14 1E 06 F1 | 	add	local01, #20
2f29c     0F 13 02 FB | 	rdlong	arg01, local01
2f2a0     14 1E 86 F1 | 	sub	local01, #20
2f2a4     46 12 56 F2 | 	cmps	arg01, #70 wc
2f2a8                 | '                 return (time_t) -1;
2f2a8     01 FA 65 C6 |  if_b	neg	result1, #1
2f2ac     7C 01 90 CD |  if_b	jmp	#LR__4774
2f2b0     03 00 00 FF 
2f2b4     6C 21 06 F6 | 	mov	local02, ##1900
2f2b8     14 1E 06 F1 | 	add	local01, #20
2f2bc     0F FB 01 FB | 	rdlong	result1, local01
2f2c0     FD 20 02 F1 | 	add	local02, result1
2f2c4     08 1E 86 F1 | 	sub	local01, #8
2f2c8     0F 23 02 FB | 	rdlong	local03, local01
2f2cc     01 22 86 F1 | 	sub	local03, #1
2f2d0     04 1E 06 F1 | 	add	local01, #4
2f2d4     0F 13 02 FB | 	rdlong	arg01, local01
2f2d8     10 1E 86 F1 | 	sub	local01, #16
2f2dc     02 12 66 F0 | 	shl	arg01, #2
2f2e0     02 00 00 FF 
2f2e4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2f2e8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2f2ec     09 FB 01 FB | 	rdlong	result1, arg01
2f2f0     FD 22 02 F1 | 	add	local03, result1
2f2f4     10 13 02 F6 | 	mov	arg01, local02
2f2f8     02 00 00 FF 
2f2fc     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2f300     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f304     00 FA 0D F2 | 	cmp	result1, #0 wz
2f308     1C 00 90 AD |  if_e	jmp	#LR__4770
2f30c     00 24 06 F6 | 	mov	local04, #0
2f310     10 1E 06 F1 | 	add	local01, #16
2f314     0F FB 01 FB | 	rdlong	result1, local01
2f318     10 1E 86 F1 | 	sub	local01, #16
2f31c     02 FA 55 F2 | 	cmps	result1, #2 wc
2f320     01 24 06 36 |  if_ae	mov	local04, #1
2f324     04 00 90 FD | 	jmp	#LR__4771
2f328                 | LR__4770
2f328     00 24 06 F6 | 	mov	local04, #0
2f32c                 | LR__4771
2f32c     04 1E 06 F1 | 	add	local01, #4
2f330     0F FB 01 FB | 	rdlong	result1, local01
2f334     04 1E 86 F1 | 	sub	local01, #4
2f338     0F 27 02 FB | 	rdlong	local05, local01
2f33c     08 1E 06 F1 | 	add	local01, #8
2f340     0F 13 02 FB | 	rdlong	arg01, local01
2f344     07 00 00 FF 
2f348     10 12 06 FD | 	qmul	arg01, ##3600
2f34c     12 23 02 F1 | 	add	local03, local04
2f350     FD 24 02 F6 | 	mov	local04, result1
2f354     04 24 66 F0 | 	shl	local04, #4
2f358     FD 24 82 F1 | 	sub	local04, result1
2f35c     02 24 66 F0 | 	shl	local04, #2
2f360     12 27 02 F1 | 	add	local05, local04
2f364     08 1E 86 F1 | 	sub	local01, #8
2f368     18 24 62 FD | 	getqx	local04
2f36c     A8 00 00 FF 
2f370     80 23 06 FD | 	qmul	local03, ##86400
2f374     12 27 02 F1 | 	add	local05, local04
2f378     10 23 02 F6 | 	mov	local03, local02
2f37c     03 00 00 FF 
2f380     B2 23 86 F1 | 	sub	local03, ##1970
2f384     18 24 62 FD | 	getqx	local04
2f388     99 F0 00 FF 
2f38c     80 23 06 FD | 	qmul	local03, ##31536000
2f390     12 27 02 F1 | 	add	local05, local04
2f394     10 23 02 F6 | 	mov	local03, local02
2f398     03 00 00 FF 
2f39c     B1 23 86 F1 | 	sub	local03, ##1969
2f3a0     11 29 52 F6 | 	abs	local06, local03 wc
2f3a4     02 28 46 F0 | 	shr	local06, #2
2f3a8     14 29 82 F6 | 	negc	local06, local06
2f3ac     03 00 00 FF 
2f3b0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2f3b4     18 24 62 FD | 	getqx	local04
2f3b8     12 27 02 F1 | 	add	local05, local04
2f3bc     18 00 90 CD |  if_b	jmp	#LR__4772
2f3c0     03 00 00 FF 
2f3c4     D0 21 86 F1 | 	sub	local02, ##2000
2f3c8     10 25 52 F6 | 	abs	local04, local02 wc
2f3cc     64 24 16 FD | 	qdiv	local04, #100
2f3d0     18 24 62 FD | 	getqx	local04
2f3d4     12 29 A2 F3 | 	sumnc	local06, local04
2f3d8                 | LR__4772
2f3d8     A8 00 00 FF 
2f3dc     80 29 06 FD | 	qmul	local06, ##86400
2f3e0     18 28 62 FD | 	getqx	local06
2f3e4     14 27 02 F1 | 	add	local05, local06
2f3e8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2f3ec     02 00 00 FF 
2f3f0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2f3f4     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2f3f8     14 27 02 F1 | 	add	local05, local06
2f3fc     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2f400     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2f404     02 00 00 FF 
2f408     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2f40c     01 22 0E F2 | 	cmp	local03, #1 wz
2f410     14 00 90 5D |  if_ne	jmp	#LR__4773
2f414     0F 13 02 F6 | 	mov	arg01, local01
2f418     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2f41c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f420     07 00 00 5F 
2f424     10 26 86 51 |  if_ne	sub	local05, ##3600
2f428                 | LR__4773
2f428                 | '                 s -=  (3600L) ;
2f428                 | ' 
2f428                 | '         return s;
2f428     13 FB 01 F6 | 	mov	result1, local05
2f42c                 | LR__4774
2f42c     A7 F0 03 F6 | 	mov	ptra, fp
2f430     B2 00 A0 FD | 	call	#popregs_
2f434                 | _fatfs_cc_mktime_ret
2f434     2D 00 64 FD | 	ret
2f438                 | 
2f438                 | _fatfs_cc__gmtime_r
2f438     03 4A 05 F6 | 	mov	COUNT_, #3
2f43c     A8 00 A0 FD | 	call	#pushregs_
2f440     09 1F 02 FB | 	rdlong	local01, arg01
2f444     A8 00 00 FF 
2f448     80 1F 16 FD | 	qdiv	local01, ##86400
2f44c     18 FA 61 FD | 	getqx	result1
2f450     04 FA 05 F1 | 	add	result1, #4
2f454     07 FA 15 FD | 	qdiv	result1, #7
2f458     18 14 06 F1 | 	add	arg02, #24
2f45c     D1 7F 27 FF 
2f460     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2f464     D1 7F 27 3F 
2f468     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2f46c     03 00 00 3F 
2f470     DC 21 06 36 |  if_ae	mov	local02, ##2012
2f474     03 00 00 CF 
2f478     B2 21 06 C6 |  if_b	mov	local02, ##1970
2f47c                 | ' 	  year = 1970;
2f47c                 | ' 	}
2f47c                 | ' 
2f47c                 | ' 	for(;;) {
2f47c     19 FA 61 FD | 	getqy	result1
2f480     0A FB 61 FC | 	wrlong	result1, arg02
2f484     18 14 86 F1 | 	sub	arg02, #24
2f488                 | LR__4780
2f488     10 13 02 F6 | 	mov	arg01, local02
2f48c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f490     00 FA 0D F2 | 	cmp	result1, #0 wz
2f494     42 F1 00 5F 
2f498     00 23 06 56 |  if_ne	mov	local03, ##31622400
2f49c     99 F0 00 AF 
2f4a0     80 23 06 A6 |  if_e	mov	local03, ##31536000
2f4a4     11 1F 12 F2 | 	cmp	local01, local03 wc
2f4a8                 | ' 	    break;
2f4a8     01 20 06 31 |  if_ae	add	local02, #1
2f4ac     11 1F 82 31 |  if_ae	sub	local01, local03
2f4b0     D4 FF 9F 3D |  if_ae	jmp	#LR__4780
2f4b4     A8 00 00 FF 
2f4b8     80 1F 16 FD | 	qdiv	local01, ##86400
2f4bc     10 23 02 F6 | 	mov	local03, local02
2f4c0     03 00 00 FF 
2f4c4     6C 23 86 F1 | 	sub	local03, ##1900
2f4c8     14 14 06 F1 | 	add	arg02, #20
2f4cc     0A 23 62 FC | 	wrlong	local03, arg02
2f4d0     08 14 06 F1 | 	add	arg02, #8
2f4d4     10 13 02 F6 | 	mov	arg01, local02
2f4d8     18 20 62 FD | 	getqx	local02
2f4dc     0A 21 62 FC | 	wrlong	local02, arg02
2f4e0     1C 14 86 F1 | 	sub	arg02, #28
2f4e4     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f4ec     1D 22 06 56 |  if_ne	mov	local03, #29
2f4f0     1C 22 06 A6 |  if_e	mov	local03, #28
2f4f4     02 00 00 FF 
2f4f8     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2f4fc     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2f500     02 00 00 FF 
2f504     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2f508                 | ' 
2f508                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2f508                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2f508     00 12 06 F6 | 	mov	arg01, #0
2f50c     97 2A 48 FB | 	callpa	#(@LR__4782-@LR__4781)>>2,fcache_load_ptr_
2f510                 | LR__4781
2f510     09 23 02 F6 | 	mov	local03, arg01
2f514     02 22 66 F0 | 	shl	local03, #2
2f518     02 00 00 FF 
2f51c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2f520     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2f524     11 23 02 FB | 	rdlong	local03, local03
2f528     11 21 52 F2 | 	cmps	local02, local03 wc
2f52c     02 00 00 FF 
2f530     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2f534     2C 00 90 CD |  if_b	jmp	#LR__4783
2f538     09 23 02 F6 | 	mov	local03, arg01
2f53c     02 22 66 F0 | 	shl	local03, #2
2f540     02 00 00 FF 
2f544     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2f548     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2f54c     11 23 02 FB | 	rdlong	local03, local03
2f550     11 21 82 F1 | 	sub	local02, local03
2f554     01 12 06 F1 | 	add	arg01, #1
2f558     02 00 00 FF 
2f55c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2f560     AC FF 9F FD | 	jmp	#LR__4781
2f564                 | LR__4782
2f564                 | LR__4783
2f564     A8 00 00 FF 
2f568     80 1F 16 FD | 	qdiv	local01, ##86400
2f56c     10 14 06 F1 | 	add	arg02, #16
2f570     0A 13 62 FC | 	wrlong	arg01, arg02
2f574     01 20 06 F1 | 	add	local02, #1
2f578     04 14 86 F1 | 	sub	arg02, #4
2f57c     0A 21 62 FC | 	wrlong	local02, arg02
2f580     19 1E 62 FD | 	getqy	local01
2f584     07 00 00 FF 
2f588     10 1E 16 FD | 	qdiv	local01, ##3600
2f58c     18 22 62 FD | 	getqx	local03
2f590     07 00 00 FF 
2f594     10 1E 16 FD | 	qdiv	local01, ##3600
2f598     04 14 86 F1 | 	sub	arg02, #4
2f59c     0A 23 62 FC | 	wrlong	local03, arg02
2f5a0     19 1E 62 FD | 	getqy	local01
2f5a4     3C 1E 16 FD | 	qdiv	local01, #60
2f5a8     18 22 62 FD | 	getqx	local03
2f5ac     3C 1E 16 FD | 	qdiv	local01, #60
2f5b0     04 14 86 F1 | 	sub	arg02, #4
2f5b4     0A 23 62 FC | 	wrlong	local03, arg02
2f5b8     04 14 86 F1 | 	sub	arg02, #4
2f5bc                 | '         stm->tm_isdst = 0;
2f5bc                 | ' 
2f5bc                 | ' ;
2f5bc                 | '         return stm;
2f5bc     0A FB 01 F6 | 	mov	result1, arg02
2f5c0     19 22 62 FD | 	getqy	local03
2f5c4     0A 23 62 FC | 	wrlong	local03, arg02
2f5c8     20 14 06 F1 | 	add	arg02, #32
2f5cc     0A 01 68 FC | 	wrlong	#0, arg02
2f5d0     A7 F0 03 F6 | 	mov	ptra, fp
2f5d4     B2 00 A0 FD | 	call	#popregs_
2f5d8                 | _fatfs_cc__gmtime_r_ret
2f5d8     2D 00 64 FD | 	ret
2f5dc                 | 
2f5dc                 | _fatfs_cc__tzset
2f5dc     88 01 00 FF 
2f5e0     21 13 06 F6 | 	mov	arg01, ##@LR__5095
2f5e4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2f5e8     FD 12 02 F6 | 	mov	arg01, result1
2f5ec     02 00 00 FF 
2f5f0     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2f5f4     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2f5f8     02 00 00 FF 
2f5fc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2f600     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2f604     02 00 00 FF 
2f608     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2f60c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2f610     02 00 00 FF 
2f614     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2f618                 | _fatfs_cc__tzset_ret
2f618     2D 00 64 FD | 	ret
2f61c                 | 
2f61c                 | _fatfs_cc_getenv
2f61c     06 4A 05 F6 | 	mov	COUNT_, #6
2f620     A8 00 A0 FD | 	call	#pushregs_
2f624     09 1F 02 F6 | 	mov	local01, arg01
2f628     09 21 02 F6 | 	mov	local02, arg01
2f62c     97 06 48 FB | 	callpa	#(@LR__4791-@LR__4790)>>2,fcache_load_ptr_
2f630                 | LR__4790
2f630     10 FB C9 FA | 	rdbyte	result1, local02 wz
2f634     01 20 06 51 |  if_ne	add	local02, #1
2f638     F4 FF 9F 5D |  if_ne	jmp	#LR__4790
2f63c                 | LR__4791
2f63c     09 21 82 F1 | 	sub	local02, arg01
2f640     10 FB 01 F6 | 	mov	result1, local02
2f644     02 00 00 FF 
2f648     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2f64c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2f650     02 00 00 FF 
2f654     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2f658                 | '             return 0;
2f658     00 FA 05 A6 |  if_e	mov	result1, #0
2f65c     5C 00 90 AD |  if_e	jmp	#LR__4794
2f660                 | ' 
2f660                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2f660     02 00 00 FF 
2f664     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2f668     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2f66c     02 00 00 FF 
2f670     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2f674                 | LR__4792
2f674     11 25 0A FB | 	rdlong	local04, local03 wz
2f678     3C 00 90 AD |  if_e	jmp	#LR__4793
2f67c     12 13 02 F6 | 	mov	arg01, local04
2f680     0F 15 02 F6 | 	mov	arg02, local01
2f684     10 17 02 F6 | 	mov	arg03, local02
2f688     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2f68c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f690     10 27 02 A6 |  if_e	mov	local05, local02
2f694     12 27 02 A1 |  if_e	add	local05, local04
2f698     13 29 C2 AA |  if_e	rdbyte	local06, local05
2f69c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2f6a0                 | ' 			return name+len+1;
2f6a0     10 25 02 A1 |  if_e	add	local04, local02
2f6a4     01 24 06 A1 |  if_e	add	local04, #1
2f6a8     12 FB 01 A6 |  if_e	mov	result1, local04
2f6ac     0C 00 90 AD |  if_e	jmp	#LR__4794
2f6b0     04 22 06 F1 | 	add	local03, #4
2f6b4     BC FF 9F FD | 	jmp	#LR__4792
2f6b8                 | LR__4793
2f6b8                 | ' 	}
2f6b8                 | ' 	return 0;
2f6b8     00 FA 05 F6 | 	mov	result1, #0
2f6bc                 | LR__4794
2f6bc     A7 F0 03 F6 | 	mov	ptra, fp
2f6c0     B2 00 A0 FD | 	call	#popregs_
2f6c4                 | _fatfs_cc_getenv_ret
2f6c4     2D 00 64 FD | 	ret
2f6c8                 | 
2f6c8                 | _fatfs_cc__get_fattime
2f6c8     00 4A 05 F6 | 	mov	COUNT_, #0
2f6cc     A8 00 A0 FD | 	call	#pushregs_
2f6d0     34 F0 07 F1 | 	add	ptra, #52
2f6d4     00 12 06 F6 | 	mov	arg01, #0
2f6d8     38 FB BF FD | 	call	#_fatfs_cc_time
2f6dc     04 4E 05 F1 | 	add	fp, #4
2f6e0     A7 FA 61 FC | 	wrlong	result1, fp
2f6e4     A7 12 02 F6 | 	mov	arg01, fp
2f6e8     0C 4E 05 F1 | 	add	fp, #12
2f6ec     A7 14 02 F6 | 	mov	arg02, fp
2f6f0     10 4E 85 F1 | 	sub	fp, #16
2f6f4     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2f6f8     24 4E 05 F1 | 	add	fp, #36
2f6fc     A7 14 02 FB | 	rdlong	arg02, fp
2f700     50 14 86 F1 | 	sub	arg02, #80
2f704     09 14 66 F0 | 	shl	arg02, #9
2f708     04 4E 85 F1 | 	sub	fp, #4
2f70c     A7 FA 01 FB | 	rdlong	result1, fp
2f710     01 FA 05 F1 | 	add	result1, #1
2f714     05 FA 65 F0 | 	shl	result1, #5
2f718     FD 14 42 F5 | 	or	arg02, result1
2f71c     04 4E 85 F1 | 	sub	fp, #4
2f720     A7 FA 01 FB | 	rdlong	result1, fp
2f724     FD 14 42 F5 | 	or	arg02, result1
2f728     14 4E 85 F1 | 	sub	fp, #20
2f72c     A7 14 62 FC | 	wrlong	arg02, fp
2f730     10 4E 05 F1 | 	add	fp, #16
2f734     A7 14 02 FB | 	rdlong	arg02, fp
2f738     0B 14 66 F0 | 	shl	arg02, #11
2f73c     04 4E 85 F1 | 	sub	fp, #4
2f740     A7 FA 01 FB | 	rdlong	result1, fp
2f744     05 FA 65 F0 | 	shl	result1, #5
2f748     FD 14 42 F5 | 	or	arg02, result1
2f74c     04 4E 85 F1 | 	sub	fp, #4
2f750     A7 FA 01 FB | 	rdlong	result1, fp
2f754     FD 14 42 F5 | 	or	arg02, result1
2f758     04 4E 85 F1 | 	sub	fp, #4
2f75c     A7 14 62 FC | 	wrlong	arg02, fp
2f760                 | ' 
2f760                 | '     now = time(0);
2f760                 | '     _gmtime_r (&now, &date);
2f760                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2f760                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2f760                 | '     return (ffdate << 16) | fftime;
2f760     04 4E 85 F1 | 	sub	fp, #4
2f764     A7 FA 01 FB | 	rdlong	result1, fp
2f768     10 FA 65 F0 | 	shl	result1, #16
2f76c     08 4E 85 F1 | 	sub	fp, #8
2f770     0A FB 41 F5 | 	or	result1, arg02
2f774     A7 F0 03 F6 | 	mov	ptra, fp
2f778     B2 00 A0 FD | 	call	#popregs_
2f77c                 | _fatfs_cc__get_fattime_ret
2f77c     2D 00 64 FD | 	ret
2f780                 | 
2f780                 | _fatfs_cc_unixtime_0991
2f780     00 4A 05 F6 | 	mov	COUNT_, #0
2f784     A8 00 A0 FD | 	call	#pushregs_
2f788     34 F0 07 F1 | 	add	ptra, #52
2f78c     04 4E 05 F1 | 	add	fp, #4
2f790     A7 12 62 FC | 	wrlong	arg01, fp
2f794     04 4E 05 F1 | 	add	fp, #4
2f798     A7 14 62 FC | 	wrlong	arg02, fp
2f79c     04 4E 85 F1 | 	sub	fp, #4
2f7a0     A7 14 02 FB | 	rdlong	arg02, fp
2f7a4     09 14 46 F0 | 	shr	arg02, #9
2f7a8     7F 14 06 F5 | 	and	arg02, #127
2f7ac     50 FA 05 F6 | 	mov	result1, #80
2f7b0     0A FB 01 F1 | 	add	result1, arg02
2f7b4     20 4E 05 F1 | 	add	fp, #32
2f7b8     A7 FA 61 FC | 	wrlong	result1, fp
2f7bc     20 4E 85 F1 | 	sub	fp, #32
2f7c0     A7 FA 01 FB | 	rdlong	result1, fp
2f7c4     05 FA 45 F0 | 	shr	result1, #5
2f7c8     FD FA 41 F8 | 	getnib	result1, result1, #0
2f7cc     01 FA 85 F1 | 	sub	result1, #1
2f7d0     1C 4E 05 F1 | 	add	fp, #28
2f7d4     A7 FA 61 FC | 	wrlong	result1, fp
2f7d8     1C 4E 85 F1 | 	sub	fp, #28
2f7dc     A7 FA 01 FB | 	rdlong	result1, fp
2f7e0     1F FA 05 F5 | 	and	result1, #31
2f7e4     18 4E 05 F1 | 	add	fp, #24
2f7e8     A7 FA 61 FC | 	wrlong	result1, fp
2f7ec     14 4E 85 F1 | 	sub	fp, #20
2f7f0     A7 FA 01 FB | 	rdlong	result1, fp
2f7f4     0B FA 45 F0 | 	shr	result1, #11
2f7f8     1F FA 05 F5 | 	and	result1, #31
2f7fc     10 4E 05 F1 | 	add	fp, #16
2f800     A7 FA 61 FC | 	wrlong	result1, fp
2f804     10 4E 85 F1 | 	sub	fp, #16
2f808     A7 FA 01 FB | 	rdlong	result1, fp
2f80c     05 FA 45 F0 | 	shr	result1, #5
2f810     3F FA 05 F5 | 	and	result1, #63
2f814     0C 4E 05 F1 | 	add	fp, #12
2f818     A7 FA 61 FC | 	wrlong	result1, fp
2f81c     0C 4E 85 F1 | 	sub	fp, #12
2f820     A7 14 02 FB | 	rdlong	arg02, fp
2f824     1F 14 06 F5 | 	and	arg02, #31
2f828     01 14 66 F0 | 	shl	arg02, #1
2f82c     08 4E 05 F1 | 	add	fp, #8
2f830     A7 14 62 FC | 	wrlong	arg02, fp
2f834     A7 12 02 F6 | 	mov	arg01, fp
2f838     10 4E 85 F1 | 	sub	fp, #16
2f83c     4C FA BF FD | 	call	#_fatfs_cc_mktime
2f840     0C 4E 05 F1 | 	add	fp, #12
2f844     A7 FA 61 FC | 	wrlong	result1, fp
2f848                 | ' 
2f848                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2f848                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2f848                 | '     date.tm_mday = (dosdate & 0x1f);
2f848                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2f848                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2f848                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2f848                 | ' 
2f848                 | '     t = mktime(&date);
2f848                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f848                 | '     return t;
2f848     0C 4E 85 F1 | 	sub	fp, #12
2f84c     A7 F0 03 F6 | 	mov	ptra, fp
2f850     B2 00 A0 FD | 	call	#popregs_
2f854                 | _fatfs_cc_unixtime_0991_ret
2f854     2D 00 64 FD | 	ret
2f858                 | 
2f858                 | _fatfs_cc__set_dos_error_0993
2f858     09 01 02 F6 | 	mov	_var01, arg01
2f85c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f85c                 | '     switch (derr) {
2f85c     14 00 26 F3 | 	fle	_var01, #20
2f860     30 00 62 FD | 	jmprel	_var01
2f864                 | LR__4800
2f864     50 00 90 FD | 	jmp	#LR__4801
2f868     84 00 90 FD | 	jmp	#LR__4815
2f86c     80 00 90 FD | 	jmp	#LR__4816
2f870     7C 00 90 FD | 	jmp	#LR__4817
2f874     48 00 90 FD | 	jmp	#LR__4802
2f878     44 00 90 FD | 	jmp	#LR__4803
2f87c     40 00 90 FD | 	jmp	#LR__4804
2f880     44 00 90 FD | 	jmp	#LR__4805
2f884     48 00 90 FD | 	jmp	#LR__4807
2f888     54 00 90 FD | 	jmp	#LR__4810
2f88c     38 00 90 FD | 	jmp	#LR__4806
2f890     4C 00 90 FD | 	jmp	#LR__4811
2f894     48 00 90 FD | 	jmp	#LR__4812
2f898     44 00 90 FD | 	jmp	#LR__4813
2f89c     50 00 90 FD | 	jmp	#LR__4818
2f8a0     4C 00 90 FD | 	jmp	#LR__4818
2f8a4     48 00 90 FD | 	jmp	#LR__4818
2f8a8     2C 00 90 FD | 	jmp	#LR__4808
2f8ac     38 00 90 FD | 	jmp	#LR__4814
2f8b0     2C 00 90 FD | 	jmp	#LR__4809
2f8b4     38 00 90 FD | 	jmp	#LR__4818
2f8b8                 | LR__4801
2f8b8     00 02 06 F6 | 	mov	_var02, #0
2f8bc                 | '         r = 0;
2f8bc                 | '         break;
2f8bc     34 00 90 FD | 	jmp	#LR__4819
2f8c0                 | LR__4802
2f8c0                 | LR__4803
2f8c0                 | LR__4804
2f8c0     04 02 06 F6 | 	mov	_var02, #4
2f8c4                 | '         r =  4 ;
2f8c4                 | '         break;
2f8c4     2C 00 90 FD | 	jmp	#LR__4819
2f8c8                 | LR__4805
2f8c8                 | LR__4806
2f8c8     06 02 06 F6 | 	mov	_var02, #6
2f8cc                 | '         r =  6 ;
2f8cc                 | '         break;
2f8cc     24 00 90 FD | 	jmp	#LR__4819
2f8d0                 | LR__4807
2f8d0     09 02 06 F6 | 	mov	_var02, #9
2f8d4                 | '         r =  9 ;
2f8d4                 | '         break;
2f8d4     1C 00 90 FD | 	jmp	#LR__4819
2f8d8                 | LR__4808
2f8d8     07 02 06 F6 | 	mov	_var02, #7
2f8dc                 | '         r =  7 ;
2f8dc                 | '         break;
2f8dc     14 00 90 FD | 	jmp	#LR__4819
2f8e0                 | LR__4809
2f8e0                 | LR__4810
2f8e0                 | LR__4811
2f8e0                 | LR__4812
2f8e0                 | LR__4813
2f8e0     0A 02 06 F6 | 	mov	_var02, #10
2f8e4                 | '         r =  10 ;
2f8e4                 | '         break;
2f8e4     0C 00 90 FD | 	jmp	#LR__4819
2f8e8                 | LR__4814
2f8e8     0B 02 06 F6 | 	mov	_var02, #11
2f8ec                 | '         r =  11 ;
2f8ec                 | '         break;
2f8ec     04 00 90 FD | 	jmp	#LR__4819
2f8f0                 | LR__4815
2f8f0                 | LR__4816
2f8f0                 | LR__4817
2f8f0                 | LR__4818
2f8f0     0C 02 06 F6 | 	mov	_var02, #12
2f8f4                 | '         r =  12 ;
2f8f4                 | '         break;
2f8f4                 | LR__4819
2f8f4                 | '     }
2f8f4                 | '     return _seterror(r);
2f8f4     00 02 4E F2 | 	cmps	_var02, #0 wz
2f8f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f8fc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2f900     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f904     01 FA 65 56 |  if_ne	neg	result1, #1
2f908     00 FA 05 A6 |  if_e	mov	result1, #0
2f90c                 | _fatfs_cc__set_dos_error_0993_ret
2f90c     2D 00 64 FD | 	ret
2f910                 | 
2f910                 | _fatfs_cc_v_creat
2f910     04 4A 05 F6 | 	mov	COUNT_, #4
2f914     A8 00 A0 FD | 	call	#pushregs_
2f918     09 1F 02 F6 | 	mov	local01, arg01
2f91c     0A 21 02 F6 | 	mov	local02, arg02
2f920     03 00 00 FF 
2f924     3C 12 06 F6 | 	mov	arg01, ##1596
2f928                 | '     return _gc_alloc(size);
2f928     10 14 06 F6 | 	mov	arg02, #16
2f92c     68 5D BF FD | 	call	#__system___gc_doalloc
2f930     FD 22 0A F6 | 	mov	local03, result1 wz
2f934                 | '       return _seterror( 7 );
2f934     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f938     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f93c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f940     01 FA 65 A6 |  if_e	neg	result1, #1
2f944     58 00 90 AD |  if_e	jmp	#LR__4821
2f948     11 13 02 F6 | 	mov	arg01, local03
2f94c     00 14 06 F6 | 	mov	arg02, #0
2f950     03 00 00 FF 
2f954     3C 16 06 F6 | 	mov	arg03, ##1596
2f958     98 00 A0 FD | 	call	#\builtin_bytefill_
2f95c     02 00 00 FF 
2f960     14 22 06 F1 | 	add	local03, ##1044
2f964     11 13 02 F6 | 	mov	arg01, local03
2f968     02 00 00 FF 
2f96c     14 22 86 F1 | 	sub	local03, ##1044
2f970     10 15 02 F6 | 	mov	arg02, local02
2f974     07 16 06 F6 | 	mov	arg03, #7
2f978     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2f97c     FD 24 0A F6 | 	mov	local04, result1 wz
2f980     14 00 90 AD |  if_e	jmp	#LR__4820
2f984     11 13 02 F6 | 	mov	arg01, local03
2f988                 | '     return _gc_free(ptr);
2f988     18 5E BF FD | 	call	#__system___gc_free
2f98c                 | '     free(f);
2f98c                 | '     return _set_dos_error(r);
2f98c     12 13 02 F6 | 	mov	arg01, local04
2f990     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f994     08 00 90 FD | 	jmp	#LR__4821
2f998                 | LR__4820
2f998     0F 23 62 FC | 	wrlong	local03, local01
2f99c                 | '   }
2f99c                 | '   fil->vfsdata = f;
2f99c                 | '   return 0;
2f99c     00 FA 05 F6 | 	mov	result1, #0
2f9a0                 | LR__4821
2f9a0     A7 F0 03 F6 | 	mov	ptra, fp
2f9a4     B2 00 A0 FD | 	call	#popregs_
2f9a8                 | _fatfs_cc_v_creat_ret
2f9a8     2D 00 64 FD | 	ret
2f9ac                 | 
2f9ac                 | _fatfs_cc_v_close
2f9ac     02 4A 05 F6 | 	mov	COUNT_, #2
2f9b0     A8 00 A0 FD | 	call	#pushregs_
2f9b4     09 1F 02 FB | 	rdlong	local01, arg01
2f9b8     02 00 00 FF 
2f9bc     14 1E 06 F1 | 	add	local01, ##1044
2f9c0     0F 13 02 F6 | 	mov	arg01, local01
2f9c4     02 00 00 FF 
2f9c8     14 1E 86 F1 | 	sub	local01, ##1044
2f9cc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2f9d0     FD 20 02 F6 | 	mov	local02, result1
2f9d4     0F 13 02 F6 | 	mov	arg01, local01
2f9d8                 | '     return _gc_free(ptr);
2f9d8     C8 5D BF FD | 	call	#__system___gc_free
2f9dc                 | '     FAT_FIL *f = fil->vfsdata;
2f9dc                 | '     r=f_close(&f->fil);
2f9dc                 | '     free(f);
2f9dc                 | '     return _set_dos_error(r);
2f9dc     10 13 02 F6 | 	mov	arg01, local02
2f9e0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f9e4     A7 F0 03 F6 | 	mov	ptra, fp
2f9e8     B2 00 A0 FD | 	call	#popregs_
2f9ec                 | _fatfs_cc_v_close_ret
2f9ec     2D 00 64 FD | 	ret
2f9f0                 | 
2f9f0                 | _fatfs_cc_v_opendir
2f9f0     04 4A 05 F6 | 	mov	COUNT_, #4
2f9f4     A8 00 A0 FD | 	call	#pushregs_
2f9f8     09 1F 02 F6 | 	mov	local01, arg01
2f9fc     0A 21 02 F6 | 	mov	local02, arg02
2fa00     30 12 06 F6 | 	mov	arg01, #48
2fa04                 | '     return _gc_alloc(size);
2fa04     10 14 06 F6 | 	mov	arg02, #16
2fa08     8C 5C BF FD | 	call	#__system___gc_doalloc
2fa0c     FD 22 0A F6 | 	mov	local03, result1 wz
2fa10                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fa10                 | '       return _seterror( 7 );
2fa10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fa14     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2fa18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fa1c     01 FA 65 A6 |  if_e	neg	result1, #1
2fa20     34 00 90 AD |  if_e	jmp	#LR__4831
2fa24     10 15 02 F6 | 	mov	arg02, local02
2fa28     11 13 02 F6 | 	mov	arg01, local03
2fa2c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2fa30     FD 24 0A F6 | 	mov	local04, result1 wz
2fa34     14 00 90 AD |  if_e	jmp	#LR__4830
2fa38     11 13 02 F6 | 	mov	arg01, local03
2fa3c                 | '     return _gc_free(ptr);
2fa3c     64 5D BF FD | 	call	#__system___gc_free
2fa40                 | '         free(f);
2fa40                 | '         return _set_dos_error(r);
2fa40     12 13 02 F6 | 	mov	arg01, local04
2fa44     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fa48     0C 00 90 FD | 	jmp	#LR__4831
2fa4c                 | LR__4830
2fa4c     04 1E 06 F1 | 	add	local01, #4
2fa50     0F 23 62 FC | 	wrlong	local03, local01
2fa54                 | '     }
2fa54                 | '     dir->vfsdata = f;
2fa54                 | '     return 0;
2fa54     00 FA 05 F6 | 	mov	result1, #0
2fa58                 | LR__4831
2fa58     A7 F0 03 F6 | 	mov	ptra, fp
2fa5c     B2 00 A0 FD | 	call	#popregs_
2fa60                 | _fatfs_cc_v_opendir_ret
2fa60     2D 00 64 FD | 	ret
2fa64                 | 
2fa64                 | _fatfs_cc_v_closedir
2fa64     02 4A 05 F6 | 	mov	COUNT_, #2
2fa68     A8 00 A0 FD | 	call	#pushregs_
2fa6c     04 12 06 F1 | 	add	arg01, #4
2fa70     09 1F 02 FB | 	rdlong	local01, arg01
2fa74     0F 13 02 F6 | 	mov	arg01, local01
2fa78     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2fa7c     FD 20 02 F6 | 	mov	local02, result1
2fa80     0F 13 02 F6 | 	mov	arg01, local01
2fa84                 | '     return _gc_free(ptr);
2fa84     1C 5D BF FD | 	call	#__system___gc_free
2fa88     00 20 0E F2 | 	cmp	local02, #0 wz
2fa8c     10 13 02 56 |  if_ne	mov	arg01, local02
2fa90     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0993
2fa94                 | '     return r;
2fa94     10 FB 01 F6 | 	mov	result1, local02
2fa98     A7 F0 03 F6 | 	mov	ptra, fp
2fa9c     B2 00 A0 FD | 	call	#popregs_
2faa0                 | _fatfs_cc_v_closedir_ret
2faa0     2D 00 64 FD | 	ret
2faa4                 | 
2faa4                 | _fatfs_cc_v_readdir
2faa4     01 4A 05 F6 | 	mov	COUNT_, #1
2faa8     A8 00 A0 FD | 	call	#pushregs_
2faac     2C F1 07 F1 | 	add	ptra, #300
2fab0     04 4E 05 F1 | 	add	fp, #4
2fab4     A7 12 62 FC | 	wrlong	arg01, fp
2fab8     04 4E 05 F1 | 	add	fp, #4
2fabc     A7 14 62 FC | 	wrlong	arg02, fp
2fac0     04 4E 85 F1 | 	sub	fp, #4
2fac4     A7 16 02 FB | 	rdlong	arg03, fp
2fac8     04 16 06 F1 | 	add	arg03, #4
2facc     0B 13 02 FB | 	rdlong	arg01, arg03
2fad0     08 4E 05 F1 | 	add	fp, #8
2fad4     A7 14 02 F6 | 	mov	arg02, fp
2fad8     0C 4E 85 F1 | 	sub	fp, #12
2fadc     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2fae0     28 4F 05 F1 | 	add	fp, #296
2fae4     A7 FA 61 FC | 	wrlong	result1, fp
2fae8     28 4F 85 F1 | 	sub	fp, #296
2faec     00 FA 0D F2 | 	cmp	result1, #0 wz
2faf0     14 00 90 AD |  if_e	jmp	#LR__4840
2faf4                 | '         return _set_dos_error(r);
2faf4     28 4F 05 F1 | 	add	fp, #296
2faf8     A7 12 02 FB | 	rdlong	arg01, fp
2fafc     28 4F 85 F1 | 	sub	fp, #296
2fb00     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fb04     C4 00 90 FD | 	jmp	#LR__4843
2fb08                 | LR__4840
2fb08     28 4E 05 F1 | 	add	fp, #40
2fb0c     A7 16 CA FA | 	rdbyte	arg03, fp wz
2fb10     28 4E 85 F1 | 	sub	fp, #40
2fb14                 | '         return -1;
2fb14     01 FA 65 A6 |  if_e	neg	result1, #1
2fb18     B0 00 90 AD |  if_e	jmp	#LR__4843
2fb1c     08 4E 05 F1 | 	add	fp, #8
2fb20     A7 12 02 FB | 	rdlong	arg01, fp
2fb24     20 4E 05 F1 | 	add	fp, #32
2fb28     A7 14 02 F6 | 	mov	arg02, fp
2fb2c     28 4E 85 F1 | 	sub	fp, #40
2fb30     3F 16 06 F6 | 	mov	arg03, #63
2fb34     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2fb38     08 4E 05 F1 | 	add	fp, #8
2fb3c     A7 16 02 FB | 	rdlong	arg03, fp
2fb40     3F 16 06 F1 | 	add	arg03, #63
2fb44     0B 01 48 FC | 	wrbyte	#0, arg03
2fb48     0C 4E 05 F1 | 	add	fp, #12
2fb4c     A7 16 C2 FA | 	rdbyte	arg03, fp
2fb50     14 4E 85 F1 | 	sub	fp, #20
2fb54     10 16 CE F7 | 	test	arg03, #16 wz
2fb58     18 00 90 AD |  if_e	jmp	#LR__4841
2fb5c     08 4E 05 F1 | 	add	fp, #8
2fb60     A7 16 02 FB | 	rdlong	arg03, fp
2fb64     08 4E 85 F1 | 	sub	fp, #8
2fb68     50 16 06 F1 | 	add	arg03, #80
2fb6c     0B 03 48 FC | 	wrbyte	#1, arg03
2fb70     14 00 90 FD | 	jmp	#LR__4842
2fb74                 | LR__4841
2fb74     08 4E 05 F1 | 	add	fp, #8
2fb78     A7 16 02 FB | 	rdlong	arg03, fp
2fb7c     08 4E 85 F1 | 	sub	fp, #8
2fb80     50 16 06 F1 | 	add	arg03, #80
2fb84     0B 01 48 FC | 	wrbyte	#0, arg03
2fb88                 | LR__4842
2fb88     08 4E 05 F1 | 	add	fp, #8
2fb8c     A7 16 02 FB | 	rdlong	arg03, fp
2fb90     04 4E 05 F1 | 	add	fp, #4
2fb94     A7 14 02 FB | 	rdlong	arg02, fp
2fb98     48 16 06 F1 | 	add	arg03, #72
2fb9c     0B 15 62 FC | 	wrlong	arg02, arg03
2fba0     04 4E 85 F1 | 	sub	fp, #4
2fba4     A7 1E 02 FB | 	rdlong	local01, fp
2fba8     08 4E 05 F1 | 	add	fp, #8
2fbac     A7 12 E2 FA | 	rdword	arg01, fp
2fbb0     02 4E 05 F1 | 	add	fp, #2
2fbb4     A7 14 E2 FA | 	rdword	arg02, fp
2fbb8     12 4E 85 F1 | 	sub	fp, #18
2fbbc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0991
2fbc0     4C 1E 06 F1 | 	add	local01, #76
2fbc4     0F FB 61 FC | 	wrlong	result1, local01
2fbc8                 | '         ent->d_type =  (0) ;
2fbc8                 | '     }
2fbc8                 | '     ent->d_size = finfo.fsize;
2fbc8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2fbc8                 | '     return 0;
2fbc8     00 FA 05 F6 | 	mov	result1, #0
2fbcc                 | LR__4843
2fbcc     A7 F0 03 F6 | 	mov	ptra, fp
2fbd0     B2 00 A0 FD | 	call	#popregs_
2fbd4                 | _fatfs_cc_v_readdir_ret
2fbd4     2D 00 64 FD | 	ret
2fbd8                 | 
2fbd8                 | _fatfs_cc_v_stat
2fbd8     03 4A 05 F6 | 	mov	COUNT_, #3
2fbdc     A8 00 A0 FD | 	call	#pushregs_
2fbe0     30 F1 07 F1 | 	add	ptra, #304
2fbe4     04 4E 05 F1 | 	add	fp, #4
2fbe8     A7 12 62 FC | 	wrlong	arg01, fp
2fbec     04 4E 05 F1 | 	add	fp, #4
2fbf0     A7 14 62 FC | 	wrlong	arg02, fp
2fbf4     08 4E 85 F1 | 	sub	fp, #8
2fbf8     0A 13 02 F6 | 	mov	arg01, arg02
2fbfc     00 14 06 F6 | 	mov	arg02, #0
2fc00     30 16 06 F6 | 	mov	arg03, #48
2fc04     98 00 A0 FD | 	call	#\builtin_bytefill_
2fc08     04 4E 05 F1 | 	add	fp, #4
2fc0c     A7 FA 01 FB | 	rdlong	result1, fp
2fc10     04 4E 85 F1 | 	sub	fp, #4
2fc14     FD FA C9 FA | 	rdbyte	result1, result1 wz
2fc18     2C 00 90 AD |  if_e	jmp	#LR__4850
2fc1c     04 4E 05 F1 | 	add	fp, #4
2fc20     A7 FA 01 FB | 	rdlong	result1, fp
2fc24     04 4E 85 F1 | 	sub	fp, #4
2fc28     FD FA C1 FA | 	rdbyte	result1, result1
2fc2c     2E FA 0D F2 | 	cmp	result1, #46 wz
2fc30     04 4E 05 A1 |  if_e	add	fp, #4
2fc34     A7 1E 02 AB |  if_e	rdlong	local01, fp
2fc38     04 4E 85 A1 |  if_e	sub	fp, #4
2fc3c     01 1E 06 A1 |  if_e	add	local01, #1
2fc40     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2fc44     18 00 90 5D |  if_ne	jmp	#LR__4851
2fc48                 | LR__4850
2fc48     18 4E 05 F1 | 	add	fp, #24
2fc4c     A7 20 48 FC | 	wrbyte	#16, fp
2fc50     0C 4E 85 F1 | 	sub	fp, #12
2fc54     A7 00 68 FC | 	wrlong	#0, fp
2fc58     0C 4E 85 F1 | 	sub	fp, #12
2fc5c     24 00 90 FD | 	jmp	#LR__4852
2fc60                 | LR__4851
2fc60     04 4E 05 F1 | 	add	fp, #4
2fc64     A7 12 02 FB | 	rdlong	arg01, fp
2fc68     0C 4E 05 F1 | 	add	fp, #12
2fc6c     A7 14 02 F6 | 	mov	arg02, fp
2fc70     10 4E 85 F1 | 	sub	fp, #16
2fc74     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2fc78     0C 4E 05 F1 | 	add	fp, #12
2fc7c     A7 FA 61 FC | 	wrlong	result1, fp
2fc80     0C 4E 85 F1 | 	sub	fp, #12
2fc84                 | LR__4852
2fc84     0C 4E 05 F1 | 	add	fp, #12
2fc88     A7 20 0A FB | 	rdlong	local02, fp wz
2fc8c     0C 4E 85 F1 | 	sub	fp, #12
2fc90     14 00 90 AD |  if_e	jmp	#LR__4853
2fc94                 | '         return _set_dos_error(r);
2fc94     0C 4E 05 F1 | 	add	fp, #12
2fc98     A7 12 02 FB | 	rdlong	arg01, fp
2fc9c     0C 4E 85 F1 | 	sub	fp, #12
2fca0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fca4     14 01 90 FD | 	jmp	#LR__4854
2fca8                 | LR__4853
2fca8     2C 4F 05 F1 | 	add	fp, #300
2fcac     A7 48 6A FC | 	wrlong	#292, fp
2fcb0     14 4F 85 F1 | 	sub	fp, #276
2fcb4     A7 22 C2 FA | 	rdbyte	local03, fp
2fcb8     18 4E 85 F1 | 	sub	fp, #24
2fcbc     01 22 CE F7 | 	test	local03, #1 wz
2fcc0     2C 4F 05 A1 |  if_e	add	fp, #300
2fcc4     A7 22 02 AB |  if_e	rdlong	local03, fp
2fcc8     92 22 46 A5 |  if_e	or	local03, #146
2fccc     A7 22 62 AC |  if_e	wrlong	local03, fp
2fcd0     2C 4F 85 A1 |  if_e	sub	fp, #300
2fcd4     18 4E 05 F1 | 	add	fp, #24
2fcd8     A7 22 C2 FA | 	rdbyte	local03, fp
2fcdc     18 4E 85 F1 | 	sub	fp, #24
2fce0     10 22 CE F7 | 	test	local03, #16 wz
2fce4     2C 4F 05 51 |  if_ne	add	fp, #300
2fce8     A7 22 02 5B |  if_ne	rdlong	local03, fp
2fcec     08 00 00 5F 
2fcf0     49 22 46 55 |  if_ne	or	local03, ##4169
2fcf4     A7 22 62 5C |  if_ne	wrlong	local03, fp
2fcf8     2C 4F 85 51 |  if_ne	sub	fp, #300
2fcfc     08 4E 05 F1 | 	add	fp, #8
2fd00     A7 22 02 FB | 	rdlong	local03, fp
2fd04     24 4F 05 F1 | 	add	fp, #292
2fd08     A7 20 02 FB | 	rdlong	local02, fp
2fd0c     08 22 06 F1 | 	add	local03, #8
2fd10     11 21 62 FC | 	wrlong	local02, local03
2fd14     24 4F 85 F1 | 	sub	fp, #292
2fd18     A7 22 02 FB | 	rdlong	local03, fp
2fd1c     0C 22 06 F1 | 	add	local03, #12
2fd20     11 03 68 FC | 	wrlong	#1, local03
2fd24     A7 22 02 FB | 	rdlong	local03, fp
2fd28     08 4E 05 F1 | 	add	fp, #8
2fd2c     A7 20 02 FB | 	rdlong	local02, fp
2fd30     18 22 06 F1 | 	add	local03, #24
2fd34     11 21 62 FC | 	wrlong	local02, local03
2fd38     08 4E 85 F1 | 	sub	fp, #8
2fd3c     A7 22 02 FB | 	rdlong	local03, fp
2fd40     1C 22 06 F1 | 	add	local03, #28
2fd44     01 00 80 FF 
2fd48     11 01 68 FC | 	wrlong	##512, local03
2fd4c     A7 20 02 FB | 	rdlong	local02, fp
2fd50     10 23 02 F6 | 	mov	local03, local02
2fd54     18 20 06 F1 | 	add	local02, #24
2fd58     10 21 02 FB | 	rdlong	local02, local02
2fd5c     FF 21 06 F1 | 	add	local02, #511
2fd60     10 21 52 F6 | 	abs	local02, local02 wc
2fd64     09 20 46 F0 | 	shr	local02, #9
2fd68     10 21 82 F6 | 	negc	local02, local02
2fd6c     20 22 06 F1 | 	add	local03, #32
2fd70     11 21 62 FC | 	wrlong	local02, local03
2fd74     A7 20 02 FB | 	rdlong	local02, fp
2fd78     10 23 02 F6 | 	mov	local03, local02
2fd7c     10 1F 02 F6 | 	mov	local01, local02
2fd80     0C 4E 05 F1 | 	add	fp, #12
2fd84     A7 12 E2 FA | 	rdword	arg01, fp
2fd88     02 4E 05 F1 | 	add	fp, #2
2fd8c     A7 14 E2 FA | 	rdword	arg02, fp
2fd90     16 4E 85 F1 | 	sub	fp, #22
2fd94     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0991
2fd98     2C 1E 06 F1 | 	add	local01, #44
2fd9c     0F FB 61 FC | 	wrlong	result1, local01
2fda0     28 20 06 F1 | 	add	local02, #40
2fda4     10 FB 61 FC | 	wrlong	result1, local02
2fda8     24 22 06 F1 | 	add	local03, #36
2fdac     11 FB 61 FC | 	wrlong	result1, local03
2fdb0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2fdb0                 | '     }
2fdb0                 | '     buf->st_mode = mode;
2fdb0                 | '     buf->st_nlink = 1;
2fdb0                 | '     buf->st_size = finfo.fsize;
2fdb0                 | '     buf->st_blksize = 512;
2fdb0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2fdb0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2fdb0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fdb0                 | '     return r;
2fdb0     0C 4E 05 F1 | 	add	fp, #12
2fdb4     A7 FA 01 FB | 	rdlong	result1, fp
2fdb8     0C 4E 85 F1 | 	sub	fp, #12
2fdbc                 | LR__4854
2fdbc     A7 F0 03 F6 | 	mov	ptra, fp
2fdc0     B2 00 A0 FD | 	call	#popregs_
2fdc4                 | _fatfs_cc_v_stat_ret
2fdc4     2D 00 64 FD | 	ret
2fdc8                 | 
2fdc8                 | _fatfs_cc_v_read
2fdc8     00 4A 05 F6 | 	mov	COUNT_, #0
2fdcc     A8 00 A0 FD | 	call	#pushregs_
2fdd0     1C F0 07 F1 | 	add	ptra, #28
2fdd4     04 4E 05 F1 | 	add	fp, #4
2fdd8     A7 12 62 FC | 	wrlong	arg01, fp
2fddc     04 4E 05 F1 | 	add	fp, #4
2fde0     A7 14 62 FC | 	wrlong	arg02, fp
2fde4     04 4E 05 F1 | 	add	fp, #4
2fde8     A7 16 62 FC | 	wrlong	arg03, fp
2fdec     08 4E 85 F1 | 	sub	fp, #8
2fdf0     A7 12 02 FB | 	rdlong	arg01, fp
2fdf4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2fdf8     0C 4E 05 F1 | 	add	fp, #12
2fdfc     A7 12 62 FC | 	wrlong	arg01, fp
2fe00     10 4E 85 F1 | 	sub	fp, #16
2fe04                 | '         return _seterror( 5 );
2fe04     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fe08     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2fe0c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fe10     01 FA 65 A6 |  if_e	neg	result1, #1
2fe14     B8 00 90 AD |  if_e	jmp	#LR__4862
2fe18     10 4E 05 F1 | 	add	fp, #16
2fe1c     A7 12 02 FB | 	rdlong	arg01, fp
2fe20     02 00 00 FF 
2fe24     14 12 06 F1 | 	add	arg01, ##1044
2fe28     08 4E 85 F1 | 	sub	fp, #8
2fe2c     A7 14 02 FB | 	rdlong	arg02, fp
2fe30     04 4E 05 F1 | 	add	fp, #4
2fe34     A7 16 02 FB | 	rdlong	arg03, fp
2fe38     0C 4E 05 F1 | 	add	fp, #12
2fe3c     A7 18 02 F6 | 	mov	arg04, fp
2fe40     18 4E 85 F1 | 	sub	fp, #24
2fe44     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2fe48     14 4E 05 F1 | 	add	fp, #20
2fe4c     A7 FA 61 FC | 	wrlong	result1, fp
2fe50     14 4E 85 F1 | 	sub	fp, #20
2fe54     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe58     34 00 90 AD |  if_e	jmp	#LR__4860
2fe5c     04 4E 05 F1 | 	add	fp, #4
2fe60     A7 18 02 FB | 	rdlong	arg04, fp
2fe64     0C 17 02 F6 | 	mov	arg03, arg04
2fe68     08 18 06 F1 | 	add	arg04, #8
2fe6c     0C 19 02 FB | 	rdlong	arg04, arg04
2fe70     20 18 46 F5 | 	or	arg04, #32
2fe74     08 16 06 F1 | 	add	arg03, #8
2fe78     0B 19 62 FC | 	wrlong	arg04, arg03
2fe7c                 | '         fil->state |=  (0x20) ;
2fe7c                 | '         return _set_dos_error(r);
2fe7c     10 4E 05 F1 | 	add	fp, #16
2fe80     A7 12 02 FB | 	rdlong	arg01, fp
2fe84     14 4E 85 F1 | 	sub	fp, #20
2fe88     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fe8c     40 00 90 FD | 	jmp	#LR__4862
2fe90                 | LR__4860
2fe90     18 4E 05 F1 | 	add	fp, #24
2fe94     A7 FA 09 FB | 	rdlong	result1, fp wz
2fe98     18 4E 85 F1 | 	sub	fp, #24
2fe9c     24 00 90 5D |  if_ne	jmp	#LR__4861
2fea0     04 4E 05 F1 | 	add	fp, #4
2fea4     A7 FA 01 FB | 	rdlong	result1, fp
2fea8     FD 18 02 F6 | 	mov	arg04, result1
2feac     04 4E 85 F1 | 	sub	fp, #4
2feb0     08 FA 05 F1 | 	add	result1, #8
2feb4     FD FA 01 FB | 	rdlong	result1, result1
2feb8     10 FA 45 F5 | 	or	result1, #16
2febc     08 18 06 F1 | 	add	arg04, #8
2fec0     0C FB 61 FC | 	wrlong	result1, arg04
2fec4                 | LR__4861
2fec4                 | '         fil->state |=  (0x10) ;
2fec4                 | '     }
2fec4                 | '     return x;
2fec4     18 4E 05 F1 | 	add	fp, #24
2fec8     A7 FA 01 FB | 	rdlong	result1, fp
2fecc     18 4E 85 F1 | 	sub	fp, #24
2fed0                 | LR__4862
2fed0     A7 F0 03 F6 | 	mov	ptra, fp
2fed4     B2 00 A0 FD | 	call	#popregs_
2fed8                 | _fatfs_cc_v_read_ret
2fed8     2D 00 64 FD | 	ret
2fedc                 | 
2fedc                 | _fatfs_cc_v_write
2fedc     00 4A 05 F6 | 	mov	COUNT_, #0
2fee0     A8 00 A0 FD | 	call	#pushregs_
2fee4     1C F0 07 F1 | 	add	ptra, #28
2fee8     04 4E 05 F1 | 	add	fp, #4
2feec     A7 12 62 FC | 	wrlong	arg01, fp
2fef0     04 4E 05 F1 | 	add	fp, #4
2fef4     A7 14 62 FC | 	wrlong	arg02, fp
2fef8     04 4E 05 F1 | 	add	fp, #4
2fefc     A7 16 62 FC | 	wrlong	arg03, fp
2ff00     08 4E 85 F1 | 	sub	fp, #8
2ff04     A7 12 02 FB | 	rdlong	arg01, fp
2ff08     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ff0c     0C 4E 05 F1 | 	add	fp, #12
2ff10     A7 12 62 FC | 	wrlong	arg01, fp
2ff14     10 4E 85 F1 | 	sub	fp, #16
2ff18                 | '         return _seterror( 5 );
2ff18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ff1c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ff20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ff24     01 FA 65 A6 |  if_e	neg	result1, #1
2ff28     84 00 90 AD |  if_e	jmp	#LR__4871
2ff2c     10 4E 05 F1 | 	add	fp, #16
2ff30     A7 12 02 FB | 	rdlong	arg01, fp
2ff34     02 00 00 FF 
2ff38     14 12 06 F1 | 	add	arg01, ##1044
2ff3c     08 4E 85 F1 | 	sub	fp, #8
2ff40     A7 14 02 FB | 	rdlong	arg02, fp
2ff44     04 4E 05 F1 | 	add	fp, #4
2ff48     A7 16 02 FB | 	rdlong	arg03, fp
2ff4c     0C 4E 05 F1 | 	add	fp, #12
2ff50     A7 18 02 F6 | 	mov	arg04, fp
2ff54     18 4E 85 F1 | 	sub	fp, #24
2ff58     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ff5c     14 4E 05 F1 | 	add	fp, #20
2ff60     A7 FA 61 FC | 	wrlong	result1, fp
2ff64     14 4E 85 F1 | 	sub	fp, #20
2ff68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff6c     34 00 90 AD |  if_e	jmp	#LR__4870
2ff70     04 4E 05 F1 | 	add	fp, #4
2ff74     A7 18 02 FB | 	rdlong	arg04, fp
2ff78     0C 17 02 F6 | 	mov	arg03, arg04
2ff7c     08 18 06 F1 | 	add	arg04, #8
2ff80     0C 19 02 FB | 	rdlong	arg04, arg04
2ff84     20 18 46 F5 | 	or	arg04, #32
2ff88     08 16 06 F1 | 	add	arg03, #8
2ff8c     0B 19 62 FC | 	wrlong	arg04, arg03
2ff90                 | '         fil->state |=  (0x20) ;
2ff90                 | '         return _set_dos_error(r);
2ff90     10 4E 05 F1 | 	add	fp, #16
2ff94     A7 12 02 FB | 	rdlong	arg01, fp
2ff98     14 4E 85 F1 | 	sub	fp, #20
2ff9c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2ffa0     0C 00 90 FD | 	jmp	#LR__4871
2ffa4                 | LR__4870
2ffa4                 | '     }
2ffa4                 | '     return x;
2ffa4     18 4E 05 F1 | 	add	fp, #24
2ffa8     A7 FA 01 FB | 	rdlong	result1, fp
2ffac     18 4E 85 F1 | 	sub	fp, #24
2ffb0                 | LR__4871
2ffb0     A7 F0 03 F6 | 	mov	ptra, fp
2ffb4     B2 00 A0 FD | 	call	#popregs_
2ffb8                 | _fatfs_cc_v_write_ret
2ffb8     2D 00 64 FD | 	ret
2ffbc                 | 
2ffbc                 | _fatfs_cc_v_lseek
2ffbc     04 4A 05 F6 | 	mov	COUNT_, #4
2ffc0     A8 00 A0 FD | 	call	#pushregs_
2ffc4     0A 1F 02 F6 | 	mov	local01, arg02
2ffc8     0B 21 02 F6 | 	mov	local02, arg03
2ffcc     09 23 02 FB | 	rdlong	local03, arg01
2ffd0     02 00 00 FF 
2ffd4     14 22 0E F1 | 	add	local03, ##1044 wz
2ffd8                 | '         return _seterror( 5 );
2ffd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ffdc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ffe0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ffe4     01 FA 65 A6 |  if_e	neg	result1, #1
2ffe8     4C 00 90 AD |  if_e	jmp	#LR__4882
2ffec     00 20 0E F2 | 	cmp	local02, #0 wz
2fff0     24 00 90 AD |  if_e	jmp	#LR__4880
2fff4     01 20 0E F2 | 	cmp	local02, #1 wz
2fff8     14 22 06 A1 |  if_e	add	local03, #20
2fffc     11 25 02 AB |  if_e	rdlong	local04, local03
30000     14 22 86 A1 |  if_e	sub	local03, #20
30004     12 1F 02 A1 |  if_e	add	local01, local04
30008     0C 22 06 51 |  if_ne	add	local03, #12
3000c     11 25 02 5B |  if_ne	rdlong	local04, local03
30010     0C 22 86 51 |  if_ne	sub	local03, #12
30014     12 1F 02 51 |  if_ne	add	local01, local04
30018                 | LR__4880
30018     0F 15 02 F6 | 	mov	arg02, local01
3001c     11 13 02 F6 | 	mov	arg01, local03
30020     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
30024     FD 12 0A F6 | 	mov	arg01, result1 wz
30028     08 00 90 AD |  if_e	jmp	#LR__4881
3002c                 | '         return _set_dos_error(result);
3002c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
30030     04 00 90 FD | 	jmp	#LR__4882
30034                 | LR__4881
30034                 | '     }
30034                 | '     return offset;
30034     0F FB 01 F6 | 	mov	result1, local01
30038                 | LR__4882
30038     A7 F0 03 F6 | 	mov	ptra, fp
3003c     B2 00 A0 FD | 	call	#popregs_
30040                 | _fatfs_cc_v_lseek_ret
30040     2D 00 64 FD | 	ret
30044                 | 
30044                 | _fatfs_cc_v_ioctl
30044                 | ' {
30044                 | '     return _seterror( 10 );
30044     20 E6 05 F1 | 	add	ptr___system__dat__, #32
30048     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
3004c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
30050     01 FA 65 F6 | 	neg	result1, #1
30054                 | _fatfs_cc_v_ioctl_ret
30054     2D 00 64 FD | 	ret
30058                 | 
30058                 | _fatfs_cc_v_mkdir
30058     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
3005c     FD 12 02 F6 | 	mov	arg01, result1
30060                 | ' 
30060                 | '     r = f_mkdir(name);
30060                 | '     return _set_dos_error(r);
30060     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
30064                 | _fatfs_cc_v_mkdir_ret
30064     2D 00 64 FD | 	ret
30068                 | 
30068                 | _fatfs_cc_v_remove
30068     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3006c     FD 12 02 F6 | 	mov	arg01, result1
30070                 | ' 
30070                 | '     r = f_unlink(name);
30070                 | '     return _set_dos_error(r);
30070     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
30074                 | _fatfs_cc_v_remove_ret
30074     2D 00 64 FD | 	ret
30078                 | 
30078                 | _fatfs_cc_v_rmdir
30078     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3007c     FD 12 02 F6 | 	mov	arg01, result1
30080                 | ' 
30080                 | '     r = f_unlink(name);
30080                 | '     return _set_dos_error(r);
30080     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
30084                 | _fatfs_cc_v_rmdir_ret
30084     2D 00 64 FD | 	ret
30088                 | 
30088                 | _fatfs_cc_v_rename
30088     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
3008c     FD 12 02 F6 | 	mov	arg01, result1
30090                 | '     return _set_dos_error(r);
30090     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
30094                 | _fatfs_cc_v_rename_ret
30094     2D 00 64 FD | 	ret
30098                 | 
30098                 | _fatfs_cc_v_open
30098     07 4A 05 F6 | 	mov	COUNT_, #7
3009c     A8 00 A0 FD | 	call	#pushregs_
300a0     09 1F 02 F6 | 	mov	local01, arg01
300a4     0A 21 02 F6 | 	mov	local02, arg02
300a8     0B 23 02 F6 | 	mov	local03, arg03
300ac     03 00 00 FF 
300b0     3C 12 06 F6 | 	mov	arg01, ##1596
300b4                 | '     return _gc_alloc(size);
300b4     10 14 06 F6 | 	mov	arg02, #16
300b8     DC 55 BF FD | 	call	#__system___gc_doalloc
300bc     FD 24 0A F6 | 	mov	local04, result1 wz
300c0                 | '       return _seterror( 7 );
300c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
300c4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
300c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
300cc     01 FA 65 A6 |  if_e	neg	result1, #1
300d0     98 00 90 AD |  if_e	jmp	#LR__4896
300d4     12 13 02 F6 | 	mov	arg01, local04
300d8     00 14 06 F6 | 	mov	arg02, #0
300dc     03 00 00 FF 
300e0     3C 16 06 F6 | 	mov	arg03, ##1596
300e4     98 00 A0 FD | 	call	#\builtin_bytefill_
300e8                 | '   switch (flags & 3) {
300e8     11 27 02 F6 | 	mov	local05, local03
300ec     03 26 0E F5 | 	and	local05, #3 wz
300f0     0C 00 90 AD |  if_e	jmp	#LR__4890
300f4     01 26 0E F2 | 	cmp	local05, #1 wz
300f8     0C 00 90 AD |  if_e	jmp	#LR__4891
300fc     10 00 90 FD | 	jmp	#LR__4892
30100                 | LR__4890
30100     01 28 06 F6 | 	mov	local06, #1
30104                 | '       fs_flags =  0x01 ;
30104                 | '       break;
30104     0C 00 90 FD | 	jmp	#LR__4893
30108                 | LR__4891
30108     02 28 06 F6 | 	mov	local06, #2
3010c                 | '       fs_flags =  0x02 ;
3010c                 | '       break;
3010c     04 00 90 FD | 	jmp	#LR__4893
30110                 | LR__4892
30110     03 28 06 F6 | 	mov	local06, #3
30114                 | '       fs_flags =  0x01  |  0x02 ;
30114                 | '       break;
30114                 | LR__4893
30114     08 22 CE F7 | 	test	local03, #8 wz
30118     18 28 46 55 |  if_ne	or	local06, #24
3011c     08 00 90 5D |  if_ne	jmp	#LR__4894
30120     20 22 CE F7 | 	test	local03, #32 wz
30124     30 28 46 55 |  if_ne	or	local06, #48
30128                 | LR__4894
30128     02 00 00 FF 
3012c     14 24 06 F1 | 	add	local04, ##1044
30130     12 13 02 F6 | 	mov	arg01, local04
30134     02 00 00 FF 
30138     14 24 86 F1 | 	sub	local04, ##1044
3013c     10 15 02 F6 | 	mov	arg02, local02
30140     14 17 02 F6 | 	mov	arg03, local06
30144     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
30148     FD 2A 0A F6 | 	mov	local07, result1 wz
3014c     14 00 90 AD |  if_e	jmp	#LR__4895
30150     12 13 02 F6 | 	mov	arg01, local04
30154                 | '     return _gc_free(ptr);
30154     4C 56 BF FD | 	call	#__system___gc_free
30158                 | '     free(f);
30158                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30158                 | '     return _set_dos_error(r);
30158     15 13 02 F6 | 	mov	arg01, local07
3015c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
30160     08 00 90 FD | 	jmp	#LR__4896
30164                 | LR__4895
30164     0F 25 62 FC | 	wrlong	local04, local01
30168                 | '   }
30168                 | '   fil->vfsdata = f;
30168                 | '   return 0;
30168     00 FA 05 F6 | 	mov	result1, #0
3016c                 | LR__4896
3016c     A7 F0 03 F6 | 	mov	ptra, fp
30170     B2 00 A0 FD | 	call	#popregs_
30174                 | _fatfs_cc_v_open_ret
30174     2D 00 64 FD | 	ret
30178                 | 
30178                 | _fatfs_cc_v_flush
30178     09 13 02 FB | 	rdlong	arg01, arg01
3017c     02 00 00 FF 
30180     14 12 0E F1 | 	add	arg01, ##1044 wz
30184                 | '         return _seterror( 5 );
30184     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30188     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3018c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30190     01 FA 65 A6 |  if_e	neg	result1, #1
30194     0C 00 90 AD |  if_e	jmp	#LR__4900
30198     00 DA BF FD | 	call	#_fatfs_cc_f_sync
3019c     FD 12 02 F6 | 	mov	arg01, result1
301a0                 | '     }
301a0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
301a0                 | '     result = f_sync(f);
301a0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
301a0                 | '     return _set_dos_error(result);
301a0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
301a4                 | LR__4900
301a4                 | _fatfs_cc_v_flush_ret
301a4     2D 00 64 FD | 	ret
301a8                 | 
301a8                 | _fatfs_cc_v_init
301a8                 | ' {
301a8                 | '     return 0;
301a8     00 FA 05 F6 | 	mov	result1, #0
301ac                 | _fatfs_cc_v_init_ret
301ac     2D 00 64 FD | 	ret
301b0                 | 
301b0                 | _fatfs_cc_v_deinit
301b0     88 01 00 FF 
301b4     24 15 06 F6 | 	mov	arg02, ##@LR__5096
301b8     00 12 06 F6 | 	mov	arg01, #0
301bc     00 16 06 F6 | 	mov	arg03, #0
301c0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
301c4     01 00 00 FF 
301c8     08 E4 05 F1 | 	add	objptr, ##520
301cc     F2 12 02 FB | 	rdlong	arg01, objptr
301d0     04 E4 05 F1 | 	add	objptr, #4
301d4     F2 14 02 FB | 	rdlong	arg02, objptr
301d8     01 00 00 FF 
301dc     0C E4 85 F1 | 	sub	objptr, ##524
301e0     30 3D BF FD | 	call	#__system___freepins
301e4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
301e4                 | '     _freepins(f_pinmask);
301e4                 | '     return 0;
301e4     00 FA 05 F6 | 	mov	result1, #0
301e8                 | _fatfs_cc_v_deinit_ret
301e8     2D 00 64 FD | 	ret
301ec                 | 
301ec                 | _fatfs_cc_get_vfs
301ec     01 4A 05 F6 | 	mov	COUNT_, #1
301f0     A8 00 A0 FD | 	call	#pushregs_
301f4     09 1F 02 F6 | 	mov	local01, arg01
301f8     50 12 06 F6 | 	mov	arg01, #80
301fc     68 54 BF FD | 	call	#__system___gc_alloc_managed
30200     FD 12 02 F6 | 	mov	arg01, result1
30204     F2 FA 01 F6 | 	mov	result1, objptr
30208     00 F8 04 FF 
3020c     00 FA 45 F5 | 	or	result1, ##166723584
30210     09 FB 61 FC | 	wrlong	result1, arg01
30214     F2 FA 01 F6 | 	mov	result1, objptr
30218     00 00 05 FF 
3021c     00 FA 45 F5 | 	or	result1, ##167772160
30220     04 12 06 F1 | 	add	arg01, #4
30224     09 FB 61 FC | 	wrlong	result1, arg01
30228     F2 FA 01 F6 | 	mov	result1, objptr
3022c     00 08 05 FF 
30230     00 FA 45 F5 | 	or	result1, ##168820736
30234     04 12 06 F1 | 	add	arg01, #4
30238     09 FB 61 FC | 	wrlong	result1, arg01
3023c     F2 FA 01 F6 | 	mov	result1, objptr
30240     00 10 05 FF 
30244     00 FA 45 F5 | 	or	result1, ##169869312
30248     04 12 06 F1 | 	add	arg01, #4
3024c     09 FB 61 FC | 	wrlong	result1, arg01
30250     F2 FA 01 F6 | 	mov	result1, objptr
30254     00 18 05 FF 
30258     00 FA 45 F5 | 	or	result1, ##170917888
3025c     04 12 06 F1 | 	add	arg01, #4
30260     09 FB 61 FC | 	wrlong	result1, arg01
30264     04 12 06 F1 | 	add	arg01, #4
30268     09 01 68 FC | 	wrlong	#0, arg01
3026c     04 12 06 F1 | 	add	arg01, #4
30270     09 1F 62 FC | 	wrlong	local01, arg01
30274     04 12 06 F1 | 	add	arg01, #4
30278     09 01 68 FC | 	wrlong	#0, arg01
3027c     F2 FA 01 F6 | 	mov	result1, objptr
30280     00 20 05 FF 
30284     00 FA 45 F5 | 	or	result1, ##171966464
30288     04 12 06 F1 | 	add	arg01, #4
3028c     09 FB 61 FC | 	wrlong	result1, arg01
30290     F2 FA 01 F6 | 	mov	result1, objptr
30294     00 28 05 FF 
30298     00 FA 45 F5 | 	or	result1, ##173015040
3029c     04 12 06 F1 | 	add	arg01, #4
302a0     09 FB 61 FC | 	wrlong	result1, arg01
302a4     F2 FA 01 F6 | 	mov	result1, objptr
302a8     00 30 05 FF 
302ac     00 FA 45 F5 | 	or	result1, ##174063616
302b0     04 12 06 F1 | 	add	arg01, #4
302b4     09 FB 61 FC | 	wrlong	result1, arg01
302b8     F2 FA 01 F6 | 	mov	result1, objptr
302bc     00 38 05 FF 
302c0     00 FA 45 F5 | 	or	result1, ##175112192
302c4     04 12 06 F1 | 	add	arg01, #4
302c8     09 FB 61 FC | 	wrlong	result1, arg01
302cc     F2 FA 01 F6 | 	mov	result1, objptr
302d0     00 40 05 FF 
302d4     00 FA 45 F5 | 	or	result1, ##176160768
302d8     04 12 06 F1 | 	add	arg01, #4
302dc     09 FB 61 FC | 	wrlong	result1, arg01
302e0     F2 FA 01 F6 | 	mov	result1, objptr
302e4     00 48 05 FF 
302e8     00 FA 45 F5 | 	or	result1, ##177209344
302ec     04 12 06 F1 | 	add	arg01, #4
302f0     09 FB 61 FC | 	wrlong	result1, arg01
302f4     F2 FA 01 F6 | 	mov	result1, objptr
302f8     00 50 05 FF 
302fc     00 FA 45 F5 | 	or	result1, ##178257920
30300     04 12 06 F1 | 	add	arg01, #4
30304     09 FB 61 FC | 	wrlong	result1, arg01
30308     F2 FA 01 F6 | 	mov	result1, objptr
3030c     00 58 05 FF 
30310     00 FA 45 F5 | 	or	result1, ##179306496
30314     04 12 06 F1 | 	add	arg01, #4
30318     09 FB 61 FC | 	wrlong	result1, arg01
3031c     F2 FA 01 F6 | 	mov	result1, objptr
30320     00 60 05 FF 
30324     00 FA 45 F5 | 	or	result1, ##180355072
30328     04 12 06 F1 | 	add	arg01, #4
3032c     09 FB 61 FC | 	wrlong	result1, arg01
30330     F2 FA 01 F6 | 	mov	result1, objptr
30334     00 68 05 FF 
30338     00 FA 45 F5 | 	or	result1, ##181403648
3033c     04 12 06 F1 | 	add	arg01, #4
30340     09 FB 61 FC | 	wrlong	result1, arg01
30344     F2 FA 01 F6 | 	mov	result1, objptr
30348     00 70 05 FF 
3034c     00 FA 45 F5 | 	or	result1, ##182452224
30350     04 12 06 F1 | 	add	arg01, #4
30354     09 FB 61 FC | 	wrlong	result1, arg01
30358     F2 FA 01 F6 | 	mov	result1, objptr
3035c     00 78 05 FF 
30360     00 FA 45 F5 | 	or	result1, ##183500800
30364     04 12 06 F1 | 	add	arg01, #4
30368     09 FB 61 FC | 	wrlong	result1, arg01
3036c     4C 12 86 F1 | 	sub	arg01, #76
30370                 | ' 
30370                 | '     v->close = &v_close;
30370                 | '     v->read = &v_read;
30370                 | '     v->write = &v_write;
30370                 | '     v->lseek = &v_lseek;
30370                 | '     v->ioctl = &v_ioctl;
30370                 | '     v->flush = 0;
30370                 | '     v->vfs_data = ptr;
30370                 | '     v->reserved = 0;
30370                 | ' 
30370                 | '     v->open = &v_open;
30370                 | '     v->creat = &v_creat;
30370                 | '     v->opendir = &v_opendir;
30370                 | '     v->closedir = &v_closedir;
30370                 | '     v->readdir = &v_readdir;
30370                 | '     v->stat = &v_stat;
30370                 | ' 
30370                 | '     v->mkdir = &v_mkdir;
30370                 | '     v->rmdir = &v_rmdir;
30370                 | ' 
30370                 | '     v->remove = &v_remove;
30370                 | '     v->rename = &v_rename;
30370                 | ' 
30370                 | '     v->init = &v_init;
30370                 | '     v->deinit = &v_deinit;
30370                 | ' 
30370                 | '     return v;
30370     09 FB 01 F6 | 	mov	result1, arg01
30374     A7 F0 03 F6 | 	mov	ptra, fp
30378     B2 00 A0 FD | 	call	#popregs_
3037c                 | _fatfs_cc_get_vfs_ret
3037c     2D 00 64 FD | 	ret
30380                 | 
30380                 | _fatfs_cc_xmit_mmc_1144
30380     01 00 00 FF 
30384     10 E4 05 F1 | 	add	objptr, ##528
30388     F2 00 02 FB | 	rdlong	_var01, objptr
3038c     08 E4 05 F1 | 	add	objptr, #8
30390     F2 02 02 FB | 	rdlong	_var02, objptr
30394     01 00 00 FF 
30398     18 E4 85 F1 | 	sub	objptr, ##536
3039c     40 02 62 FD | 	dirl	_var02
303a0     28 02 64 FD | 	setq	#1
303a4     09 05 02 FB | 	rdlong	_var03, arg01
303a8     69 04 62 FD | 	rev	_var03
303ac     1B 04 FE F9 | 	movbyts	_var03, #27
303b0     01 05 22 FC | 	wypin	_var03, _var02
303b4     0A 05 02 F6 | 	mov	_var03, arg02
303b8     02 14 4E F0 | 	shr	arg02, #2 wz
303bc     03 04 66 F0 | 	shl	_var03, #3
303c0     00 05 22 FC | 	wypin	_var03, _var01
303c4     41 02 62 FD | 	dirh	_var02
303c8     08 12 06 F1 | 	add	arg01, #8
303cc     69 06 62 FD | 	rev	_var04
303d0     1B 06 FE F9 | 	movbyts	_var04, #27
303d4                 | LR__4910
303d4     01 07 22 5C |  if_ne	wypin	_var04, _var02
303d8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
303dc     04 12 06 51 |  if_ne	add	arg01, #4
303e0     69 06 62 5D |  if_ne	rev	_var04
303e4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
303e8                 | LR__4911
303e8     40 02 72 5D |  if_ne	testp	_var02 wc
303ec     F8 FF 9F 1D |  if_a	jmp	#LR__4911
303f0     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4910
303f4                 | LR__4912
303f4     40 00 72 FD | 	testp	_var01 wc
303f8     F8 FF 9F 3D |  if_ae	jmp	#LR__4912
303fc     40 02 62 FD | 	dirl	_var02
30400     FF FF FF FF 
30404     01 FF 2B FC | 	wypin	##-1, _var02
30408     41 02 62 FD | 	dirh	_var02
3040c                 | _fatfs_cc_xmit_mmc_1144_ret
3040c     2D 00 64 FD | 	ret
30410                 | 
30410                 | _fatfs_cc_rcvr_mmc_1151
30410     01 00 00 FF 
30414     10 E4 05 F1 | 	add	objptr, ##528
30418     F2 00 02 FB | 	rdlong	_var01, objptr
3041c     0C E4 05 F1 | 	add	objptr, #12
30420     F2 02 02 FB | 	rdlong	_var02, objptr
30424     01 00 00 FF 
30428     1C E4 85 F1 | 	sub	objptr, ##540
3042c     01 03 08 FC | 	akpin	_var02
30430     0A 05 0A F6 | 	mov	_var03, arg02 wz
30434     02 04 4E F0 | 	shr	_var03, #2 wz
30438     30 00 90 AD |  if_e	jmp	#LR__4922
3043c     02 07 02 F6 | 	mov	_var04, _var03
30440     05 06 66 F0 | 	shl	_var04, #5
30444     00 07 22 FC | 	wypin	_var04, _var01
30448     01 7F 18 FC | 	wxpin	#63, _var02
3044c                 | LR__4920
3044c                 | LR__4921
3044c     40 02 72 FD | 	testp	_var02 wc
30450     F8 FF 9F 3D |  if_ae	jmp	#LR__4921
30454     01 07 8A FA | 	rdpin	_var04, _var02
30458     69 06 62 FD | 	rev	_var04
3045c     1B 06 FE F9 | 	movbyts	_var04, #27
30460     09 07 62 FC | 	wrlong	_var04, arg01
30464     04 12 06 F1 | 	add	arg01, #4
30468     F8 05 6E FB | 	djnz	_var03, #LR__4920
3046c                 | LR__4922
3046c     03 14 0E F5 | 	and	arg02, #3 wz
30470     24 00 90 AD |  if_e	jmp	#LR__4925
30474     01 4F 18 FC | 	wxpin	#39, _var02
30478                 | LR__4923
30478     00 11 28 FC | 	wypin	#8, _var01
3047c                 | LR__4924
3047c     40 02 72 FD | 	testp	_var02 wc
30480     F8 FF 9F 3D |  if_ae	jmp	#LR__4924
30484     01 07 8A FA | 	rdpin	_var04, _var02
30488     69 06 62 FD | 	rev	_var04
3048c     09 07 42 FC | 	wrbyte	_var04, arg01
30490     01 12 06 F1 | 	add	arg01, #1
30494     F8 15 6E FB | 	djnz	arg02, #LR__4923
30498                 | LR__4925
30498                 | _fatfs_cc_rcvr_mmc_1151_ret
30498     2D 00 64 FD | 	ret
3049c                 | 
3049c                 | _fatfs_cc_wait_ready_1155
3049c     01 4A 05 F6 | 	mov	COUNT_, #1
304a0     A8 00 A0 FD | 	call	#pushregs_
304a4     10 F0 07 F1 | 	add	ptra, #16
304a8     1A FA 61 FD | 	getct	result1
304ac     08 4E 05 F1 | 	add	fp, #8
304b0     A7 FA 61 FC | 	wrlong	result1, fp
304b4     14 1E 06 FB | 	rdlong	local01, #20
304b8     01 1E 46 F0 | 	shr	local01, #1
304bc     04 4E 05 F1 | 	add	fp, #4
304c0     A7 1E 62 FC | 	wrlong	local01, fp
304c4     0C 4E 85 F1 | 	sub	fp, #12
304c8                 | ' {
304c8                 | ' 	BYTE d;
304c8                 | ' 	UINT tmr, tmout;
304c8                 | ' 
304c8                 | ' 	tmr = _cnt();
304c8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
304c8                 | ' 	for(;;) {
304c8                 | LR__4930
304c8     04 4E 05 F1 | 	add	fp, #4
304cc     A7 12 02 F6 | 	mov	arg01, fp
304d0     04 4E 85 F1 | 	sub	fp, #4
304d4     01 14 06 F6 | 	mov	arg02, #1
304d8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
304dc     04 4E 05 F1 | 	add	fp, #4
304e0     A7 1E C2 FA | 	rdbyte	local01, fp
304e4     04 4E 85 F1 | 	sub	fp, #4
304e8     FF 1E 0E F2 | 	cmp	local01, #255 wz
304ec     01 FA 05 A6 |  if_e	mov	result1, #1
304f0     28 00 90 AD |  if_e	jmp	#LR__4931
304f4     1A FA 61 FD | 	getct	result1
304f8     08 4E 05 F1 | 	add	fp, #8
304fc     A7 1E 02 FB | 	rdlong	local01, fp
30500     0F FB 81 F1 | 	sub	result1, local01
30504     04 4E 05 F1 | 	add	fp, #4
30508     A7 1E 02 FB | 	rdlong	local01, fp
3050c     0C 4E 85 F1 | 	sub	fp, #12
30510     0F FB 11 F2 | 	cmp	result1, local01 wc
30514     00 FA 05 36 |  if_ae	mov	result1, #0
30518     AC FF 9F CD |  if_b	jmp	#LR__4930
3051c                 | LR__4931
3051c     A7 F0 03 F6 | 	mov	ptra, fp
30520     B2 00 A0 FD | 	call	#popregs_
30524                 | _fatfs_cc_wait_ready_1155_ret
30524     2D 00 64 FD | 	ret
30528                 | 
30528                 | _fatfs_cc_deselect_1161
30528     00 4A 05 F6 | 	mov	COUNT_, #0
3052c     A8 00 A0 FD | 	call	#pushregs_
30530     14 F0 07 F1 | 	add	ptra, #20
30534     01 00 00 FF 
30538     14 E4 05 F1 | 	add	objptr, ##532
3053c     F2 14 02 FB | 	rdlong	arg02, objptr
30540     04 4E 05 F1 | 	add	fp, #4
30544     A7 14 62 FC | 	wrlong	arg02, fp
30548     04 E4 85 F1 | 	sub	objptr, #4
3054c     F2 14 02 FB | 	rdlong	arg02, objptr
30550     04 4E 05 F1 | 	add	fp, #4
30554     A7 14 62 FC | 	wrlong	arg02, fp
30558     08 E4 05 F1 | 	add	objptr, #8
3055c     F2 14 02 FB | 	rdlong	arg02, objptr
30560     04 4E 05 F1 | 	add	fp, #4
30564     A7 14 62 FC | 	wrlong	arg02, fp
30568     04 E4 05 F1 | 	add	objptr, #4
3056c     F2 14 02 FB | 	rdlong	arg02, objptr
30570     01 00 00 FF 
30574     1C E4 85 F1 | 	sub	objptr, ##540
30578     04 4E 05 F1 | 	add	fp, #4
3057c     A7 14 62 FC | 	wrlong	arg02, fp
30580     0C 4E 85 F1 | 	sub	fp, #12
30584     A7 12 02 FB | 	rdlong	arg01, fp
30588     04 4E 85 F1 | 	sub	fp, #4
3058c     59 12 62 FD | 	drvh	arg01
30590     1F 20 64 FD | 	waitx	#16
30594     A7 12 02 F6 | 	mov	arg01, fp
30598     01 14 06 F6 | 	mov	arg02, #1
3059c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
305a0     A7 F0 03 F6 | 	mov	ptra, fp
305a4     B2 00 A0 FD | 	call	#popregs_
305a8                 | _fatfs_cc_deselect_1161_ret
305a8     2D 00 64 FD | 	ret
305ac                 | 
305ac                 | _fatfs_cc_select_1165
305ac     00 4A 05 F6 | 	mov	COUNT_, #0
305b0     A8 00 A0 FD | 	call	#pushregs_
305b4     10 F0 07 F1 | 	add	ptra, #16
305b8     01 00 00 FF 
305bc     14 E4 05 F1 | 	add	objptr, ##532
305c0     F2 14 02 FB | 	rdlong	arg02, objptr
305c4     08 4E 05 F1 | 	add	fp, #8
305c8     A7 14 62 FC | 	wrlong	arg02, fp
305cc     08 E4 05 F1 | 	add	objptr, #8
305d0     F2 12 02 FB | 	rdlong	arg01, objptr
305d4     01 00 00 FF 
305d8     1C E4 85 F1 | 	sub	objptr, ##540
305dc     04 4E 05 F1 | 	add	fp, #4
305e0     A7 12 62 FC | 	wrlong	arg01, fp
305e4     50 12 62 FD | 	fltl	arg01
305e8     04 4E 85 F1 | 	sub	fp, #4
305ec     A7 12 02 FB | 	rdlong	arg01, fp
305f0     58 12 62 FD | 	drvl	arg01
305f4     1F 20 64 FD | 	waitx	#16
305f8     04 4E 05 F1 | 	add	fp, #4
305fc     A7 12 02 FB | 	rdlong	arg01, fp
30600     41 12 62 FD | 	dirh	arg01
30604     08 4E 85 F1 | 	sub	fp, #8
30608     A7 12 02 F6 | 	mov	arg01, fp
3060c     04 4E 85 F1 | 	sub	fp, #4
30610     01 14 06 F6 | 	mov	arg02, #1
30614     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
30618     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1155
3061c     00 FA 0D F2 | 	cmp	result1, #0 wz
30620     01 FA 05 56 |  if_ne	mov	result1, #1
30624     08 00 90 5D |  if_ne	jmp	#LR__4940
30628     FC FE BF FD | 	call	#_fatfs_cc_deselect_1161
3062c                 | ' 
3062c                 | ' 	deselect();
3062c                 | ' 	return 0;
3062c     00 FA 05 F6 | 	mov	result1, #0
30630                 | LR__4940
30630     A7 F0 03 F6 | 	mov	ptra, fp
30634     B2 00 A0 FD | 	call	#popregs_
30638                 | _fatfs_cc_select_1165_ret
30638     2D 00 64 FD | 	ret
3063c                 | 
3063c                 | _fatfs_cc_rcvr_datablock_1169
3063c     01 4A 05 F6 | 	mov	COUNT_, #1
30640     A8 00 A0 FD | 	call	#pushregs_
30644     18 F0 07 F1 | 	add	ptra, #24
30648     04 4E 05 F1 | 	add	fp, #4
3064c     A7 12 62 FC | 	wrlong	arg01, fp
30650     04 4E 05 F1 | 	add	fp, #4
30654     A7 14 62 FC | 	wrlong	arg02, fp
30658     1A FA 61 FD | 	getct	result1
3065c     08 4E 05 F1 | 	add	fp, #8
30660     A7 FA 61 FC | 	wrlong	result1, fp
30664     14 1E 06 FB | 	rdlong	local01, #20
30668     03 1E 46 F0 | 	shr	local01, #3
3066c     04 4E 05 F1 | 	add	fp, #4
30670     A7 1E 62 FC | 	wrlong	local01, fp
30674     14 4E 85 F1 | 	sub	fp, #20
30678                 | ' 	BYTE *buff,
30678                 | ' 	UINT btr
30678                 | ' )
30678                 | ' {
30678                 | ' 	BYTE d[2];
30678                 | ' 	UINT tmr, tmout;
30678                 | ' 
30678                 | ' 	tmr = _cnt();
30678                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
30678                 | ' 	for(;;) {
30678                 | LR__4950
30678     0C 4E 05 F1 | 	add	fp, #12
3067c     A7 12 02 F6 | 	mov	arg01, fp
30680     0C 4E 85 F1 | 	sub	fp, #12
30684     01 14 06 F6 | 	mov	arg02, #1
30688     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
3068c     0C 4E 05 F1 | 	add	fp, #12
30690     A7 1E C2 FA | 	rdbyte	local01, fp
30694     0C 4E 85 F1 | 	sub	fp, #12
30698     FF 1E 0E F2 | 	cmp	local01, #255 wz
3069c     28 00 90 5D |  if_ne	jmp	#LR__4951
306a0     1A FA 61 FD | 	getct	result1
306a4     FD 1E 02 F6 | 	mov	local01, result1
306a8     10 4E 05 F1 | 	add	fp, #16
306ac     A7 14 02 FB | 	rdlong	arg02, fp
306b0     0A 1F 82 F1 | 	sub	local01, arg02
306b4     04 4E 05 F1 | 	add	fp, #4
306b8     A7 14 02 FB | 	rdlong	arg02, fp
306bc     14 4E 85 F1 | 	sub	fp, #20
306c0     0A 1F 12 F2 | 	cmp	local01, arg02 wc
306c4     B0 FF 9F CD |  if_b	jmp	#LR__4950
306c8                 | LR__4951
306c8     0C 4E 05 F1 | 	add	fp, #12
306cc     A7 1E C2 FA | 	rdbyte	local01, fp
306d0     0C 4E 85 F1 | 	sub	fp, #12
306d4     FE 1E 0E F2 | 	cmp	local01, #254 wz
306d8     00 FA 05 56 |  if_ne	mov	result1, #0
306dc     30 00 90 5D |  if_ne	jmp	#LR__4952
306e0     04 4E 05 F1 | 	add	fp, #4
306e4     A7 12 02 FB | 	rdlong	arg01, fp
306e8     04 4E 05 F1 | 	add	fp, #4
306ec     A7 14 02 FB | 	rdlong	arg02, fp
306f0     08 4E 85 F1 | 	sub	fp, #8
306f4     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
306f8     0C 4E 05 F1 | 	add	fp, #12
306fc     A7 12 02 F6 | 	mov	arg01, fp
30700     0C 4E 85 F1 | 	sub	fp, #12
30704     02 14 06 F6 | 	mov	arg02, #2
30708     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
3070c                 | ' 
3070c                 | ' 	rcvr_mmc(buff, btr);
3070c                 | ' 	rcvr_mmc(d, 2);
3070c                 | ' 
3070c                 | ' 	return 1;
3070c     01 FA 05 F6 | 	mov	result1, #1
30710                 | LR__4952
30710     A7 F0 03 F6 | 	mov	ptra, fp
30714     B2 00 A0 FD | 	call	#popregs_
30718                 | _fatfs_cc_rcvr_datablock_1169_ret
30718     2D 00 64 FD | 	ret
3071c                 | 
3071c                 | _fatfs_cc_xmit_datablock_1171
3071c     00 4A 05 F6 | 	mov	COUNT_, #0
30720     A8 00 A0 FD | 	call	#pushregs_
30724     10 F0 07 F1 | 	add	ptra, #16
30728     04 4E 05 F1 | 	add	fp, #4
3072c     A7 12 62 FC | 	wrlong	arg01, fp
30730     04 4E 05 F1 | 	add	fp, #4
30734     A7 14 42 FC | 	wrbyte	arg02, fp
30738     08 4E 85 F1 | 	sub	fp, #8
3073c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1155
30740     00 FA 0D F2 | 	cmp	result1, #0 wz
30744     00 FA 05 A6 |  if_e	mov	result1, #0
30748     90 00 90 AD |  if_e	jmp	#LR__4961
3074c     08 4E 05 F1 | 	add	fp, #8
30750     A7 14 C2 FA | 	rdbyte	arg02, fp
30754     04 4E 05 F1 | 	add	fp, #4
30758     A7 14 42 FC | 	wrbyte	arg02, fp
3075c     A7 12 02 F6 | 	mov	arg01, fp
30760     0C 4E 85 F1 | 	sub	fp, #12
30764     01 14 06 F6 | 	mov	arg02, #1
30768     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1144
3076c     08 4E 05 F1 | 	add	fp, #8
30770     A7 14 C2 FA | 	rdbyte	arg02, fp
30774     08 4E 85 F1 | 	sub	fp, #8
30778     FD 14 0E F2 | 	cmp	arg02, #253 wz
3077c     58 00 90 AD |  if_e	jmp	#LR__4960
30780     04 4E 05 F1 | 	add	fp, #4
30784     A7 12 02 FB | 	rdlong	arg01, fp
30788     04 4E 85 F1 | 	sub	fp, #4
3078c     09 14 C6 F9 | 	decod	arg02, #9
30790     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1144
30794     0C 4E 05 F1 | 	add	fp, #12
30798     A7 12 02 F6 | 	mov	arg01, fp
3079c     0C 4E 85 F1 | 	sub	fp, #12
307a0     02 14 06 F6 | 	mov	arg02, #2
307a4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
307a8     0C 4E 05 F1 | 	add	fp, #12
307ac     A7 12 02 F6 | 	mov	arg01, fp
307b0     0C 4E 85 F1 | 	sub	fp, #12
307b4     01 14 06 F6 | 	mov	arg02, #1
307b8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
307bc     0C 4E 05 F1 | 	add	fp, #12
307c0     A7 14 C2 FA | 	rdbyte	arg02, fp
307c4     0C 4E 85 F1 | 	sub	fp, #12
307c8     1F 14 06 F5 | 	and	arg02, #31
307cc     05 14 0E F2 | 	cmp	arg02, #5 wz
307d0                 | ' 			return 0;
307d0     00 FA 05 56 |  if_ne	mov	result1, #0
307d4     04 00 90 5D |  if_ne	jmp	#LR__4961
307d8                 | LR__4960
307d8                 | ' 	}
307d8                 | ' 
307d8                 | ' 	return 1;
307d8     01 FA 05 F6 | 	mov	result1, #1
307dc                 | LR__4961
307dc     A7 F0 03 F6 | 	mov	ptra, fp
307e0     B2 00 A0 FD | 	call	#popregs_
307e4                 | _fatfs_cc_xmit_datablock_1171_ret
307e4     2D 00 64 FD | 	ret
307e8                 | 
307e8                 | _fatfs_cc_send_cmd_1175
307e8     01 4A 05 F6 | 	mov	COUNT_, #1
307ec     A8 00 A0 FD | 	call	#pushregs_
307f0     1C F0 07 F1 | 	add	ptra, #28
307f4                 | _fatfs_cc_send_cmd_1175_enter
307f4     04 4E 05 F1 | 	add	fp, #4
307f8     A7 12 42 FC | 	wrbyte	arg01, fp
307fc     04 4E 05 F1 | 	add	fp, #4
30800     A7 14 62 FC | 	wrlong	arg02, fp
30804     04 4E 85 F1 | 	sub	fp, #4
30808     A7 FA C1 FA | 	rdbyte	result1, fp
3080c     04 4E 85 F1 | 	sub	fp, #4
30810     80 FA CD F7 | 	test	result1, #128 wz
30814     44 00 90 AD |  if_e	jmp	#LR__4970
30818     04 4E 05 F1 | 	add	fp, #4
3081c     A7 14 C2 FA | 	rdbyte	arg02, fp
30820     7F 14 06 F5 | 	and	arg02, #127
30824     A7 14 42 FC | 	wrbyte	arg02, fp
30828     04 4E 85 F1 | 	sub	fp, #4
3082c     37 12 06 F6 | 	mov	arg01, #55
30830     00 14 06 F6 | 	mov	arg02, #0
30834     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1175
30838     0C 4E 05 F1 | 	add	fp, #12
3083c     A7 FA 41 FC | 	wrbyte	result1, fp
30840     A7 14 C2 FA | 	rdbyte	arg02, fp
30844     0C 4E 85 F1 | 	sub	fp, #12
30848     02 14 16 F2 | 	cmp	arg02, #2 wc
3084c     0C 4E 05 31 |  if_ae	add	fp, #12
30850     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
30854     0C 4E 85 31 |  if_ae	sub	fp, #12
30858     6C 01 90 3D |  if_ae	jmp	#LR__4974
3085c                 | LR__4970
3085c     04 4E 05 F1 | 	add	fp, #4
30860     A7 14 C2 FA | 	rdbyte	arg02, fp
30864     04 4E 85 F1 | 	sub	fp, #4
30868     0C 14 0E F2 | 	cmp	arg02, #12 wz
3086c     14 00 90 AD |  if_e	jmp	#LR__4971
30870     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1161
30874     34 FD BF FD | 	call	#_fatfs_cc_select_1165
30878     00 FA 0D F2 | 	cmp	result1, #0 wz
3087c     FF FA 05 A6 |  if_e	mov	result1, #255
30880     44 01 90 AD |  if_e	jmp	#LR__4974
30884                 | LR__4971
30884     04 4E 05 F1 | 	add	fp, #4
30888     A7 14 C2 FA | 	rdbyte	arg02, fp
3088c     40 FA 05 F6 | 	mov	result1, #64
30890     0A FB 41 F5 | 	or	result1, arg02
30894     10 4E 05 F1 | 	add	fp, #16
30898     A7 FA 41 FC | 	wrbyte	result1, fp
3089c     0C 4E 85 F1 | 	sub	fp, #12
308a0     A7 FA 01 FB | 	rdlong	result1, fp
308a4     18 FA 45 F0 | 	shr	result1, #24
308a8     0D 4E 05 F1 | 	add	fp, #13
308ac     A7 FA 41 FC | 	wrbyte	result1, fp
308b0     0D 4E 85 F1 | 	sub	fp, #13
308b4     A7 FA 01 FB | 	rdlong	result1, fp
308b8     10 FA 45 F0 | 	shr	result1, #16
308bc     0E 4E 05 F1 | 	add	fp, #14
308c0     A7 FA 41 FC | 	wrbyte	result1, fp
308c4     0E 4E 85 F1 | 	sub	fp, #14
308c8     A7 FA 01 FB | 	rdlong	result1, fp
308cc     08 FA 45 F0 | 	shr	result1, #8
308d0     0F 4E 05 F1 | 	add	fp, #15
308d4     A7 FA 41 FC | 	wrbyte	result1, fp
308d8     0F 4E 85 F1 | 	sub	fp, #15
308dc     A7 FA 01 FB | 	rdlong	result1, fp
308e0     10 4E 05 F1 | 	add	fp, #16
308e4     A7 FA 41 FC | 	wrbyte	result1, fp
308e8     0C 4E 85 F1 | 	sub	fp, #12
308ec     A7 02 48 FC | 	wrbyte	#1, fp
308f0     08 4E 85 F1 | 	sub	fp, #8
308f4     A7 FA C9 FA | 	rdbyte	result1, fp wz
308f8     04 4E 85 F1 | 	sub	fp, #4
308fc     0C 4E 05 A1 |  if_e	add	fp, #12
30900     A7 2A 49 AC |  if_e	wrbyte	#149, fp
30904     0C 4E 85 A1 |  if_e	sub	fp, #12
30908     04 4E 05 F1 | 	add	fp, #4
3090c     A7 FA C1 FA | 	rdbyte	result1, fp
30910     04 4E 85 F1 | 	sub	fp, #4
30914     08 FA 0D F2 | 	cmp	result1, #8 wz
30918     0C 4E 05 A1 |  if_e	add	fp, #12
3091c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
30920     0C 4E 85 A1 |  if_e	sub	fp, #12
30924     0C 4E 05 F1 | 	add	fp, #12
30928     A7 14 C2 FA | 	rdbyte	arg02, fp
3092c     0D 4E 05 F1 | 	add	fp, #13
30930     A7 14 42 FC | 	wrbyte	arg02, fp
30934     05 4E 85 F1 | 	sub	fp, #5
30938     A7 12 02 F6 | 	mov	arg01, fp
3093c     14 4E 85 F1 | 	sub	fp, #20
30940     06 14 06 F6 | 	mov	arg02, #6
30944     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1144
30948     04 4E 05 F1 | 	add	fp, #4
3094c     A7 1E C2 FA | 	rdbyte	local01, fp
30950     04 4E 85 F1 | 	sub	fp, #4
30954     0C 1E 0E F2 | 	cmp	local01, #12 wz
30958     10 4E 05 A1 |  if_e	add	fp, #16
3095c     A7 12 02 A6 |  if_e	mov	arg01, fp
30960     10 4E 85 A1 |  if_e	sub	fp, #16
30964     01 14 06 A6 |  if_e	mov	arg02, #1
30968     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1151
3096c     0C 4E 05 F1 | 	add	fp, #12
30970     A7 14 48 FC | 	wrbyte	#10, fp
30974     0C 4E 85 F1 | 	sub	fp, #12
30978                 | ' 	n = 10;
30978                 | ' 	do
30978                 | LR__4972
30978     10 4E 05 F1 | 	add	fp, #16
3097c     A7 12 02 F6 | 	mov	arg01, fp
30980     10 4E 85 F1 | 	sub	fp, #16
30984     01 14 06 F6 | 	mov	arg02, #1
30988     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
3098c     10 4E 05 F1 | 	add	fp, #16
30990     A7 1E C2 FA | 	rdbyte	local01, fp
30994     10 4E 85 F1 | 	sub	fp, #16
30998     80 1E CE F7 | 	test	local01, #128 wz
3099c     1C 00 90 AD |  if_e	jmp	#LR__4973
309a0     0C 4E 05 F1 | 	add	fp, #12
309a4     A7 1E C2 FA | 	rdbyte	local01, fp
309a8     01 1E 86 F1 | 	sub	local01, #1
309ac     A7 1E 42 FC | 	wrbyte	local01, fp
309b0     A7 1E CA FA | 	rdbyte	local01, fp wz
309b4     0C 4E 85 F1 | 	sub	fp, #12
309b8     BC FF 9F 5D |  if_ne	jmp	#LR__4972
309bc                 | LR__4973
309bc                 | ' 
309bc                 | ' 	return d;
309bc     10 4E 05 F1 | 	add	fp, #16
309c0     A7 FA C1 FA | 	rdbyte	result1, fp
309c4     10 4E 85 F1 | 	sub	fp, #16
309c8                 | LR__4974
309c8     A7 F0 03 F6 | 	mov	ptra, fp
309cc     B2 00 A0 FD | 	call	#popregs_
309d0                 | _fatfs_cc_send_cmd_1175_ret
309d0     2D 00 64 FD | 	ret
309d4                 | 
309d4                 | _fatfs_cc_disk_deinitialize
309d4     03 4A 05 F6 | 	mov	COUNT_, #3
309d8     A8 00 A0 FD | 	call	#pushregs_
309dc     00 12 4E F2 | 	cmps	arg01, #0 wz
309e0     01 00 00 FF 
309e4     14 E4 05 F1 | 	add	objptr, ##532
309e8     F2 12 02 FB | 	rdlong	arg01, objptr
309ec     04 E4 85 F1 | 	sub	objptr, #4
309f0     F2 1E 02 FB | 	rdlong	local01, objptr
309f4     08 E4 05 F1 | 	add	objptr, #8
309f8     F2 20 02 FB | 	rdlong	local02, objptr
309fc     04 E4 05 F1 | 	add	objptr, #4
30a00     F2 22 02 FB | 	rdlong	local03, objptr
30a04     01 00 00 FF 
30a08     1C E4 85 F1 | 	sub	objptr, ##540
30a0c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
30a0c                 | '         return RES_NOTRDY;
30a0c     03 FA 05 56 |  if_ne	mov	result1, #3
30a10     2C 00 90 5D |  if_ne	jmp	#LR__4980
30a14     50 12 62 FD | 	fltl	arg01
30a18     09 01 08 FC | 	wrpin	#0, arg01
30a1c     50 1E 62 FD | 	fltl	local01
30a20     0F 01 08 FC | 	wrpin	#0, local01
30a24     50 20 62 FD | 	fltl	local02
30a28     10 01 08 FC | 	wrpin	#0, local02
30a2c     50 22 62 FD | 	fltl	local03
30a30     11 01 08 FC | 	wrpin	#0, local03
30a34     0A 12 06 F6 | 	mov	arg01, #10
30a38     3C 0E BF FD | 	call	#__system___waitms
30a3c                 | '     }
30a3c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
30a3c                 | '     _pinclear(PIN_SS);
30a3c                 | '     _pinclear(PIN_CLK);
30a3c                 | '     _pinclear(PIN_DI);
30a3c                 | '     _pinclear(PIN_DO);
30a3c                 | ' 
30a3c                 | '     _waitms(10);
30a3c                 | ' 
30a3c                 | '     return 0;
30a3c     00 FA 05 F6 | 	mov	result1, #0
30a40                 | LR__4980
30a40     A7 F0 03 F6 | 	mov	ptra, fp
30a44     B2 00 A0 FD | 	call	#popregs_
30a48                 | _fatfs_cc_disk_deinitialize_ret
30a48     2D 00 64 FD | 	ret
30a4c                 | 
30a4c                 | _fatfs_cc_gettimeofday
30a4c     04 4A 05 F6 | 	mov	COUNT_, #4
30a50     A8 00 A0 FD | 	call	#pushregs_
30a54     09 1F 02 F6 | 	mov	local01, arg01
30a58     F8 09 BF FD | 	call	#__system___getus
30a5c     FD 12 02 F6 | 	mov	arg01, result1
30a60     02 00 00 FF 
30a64     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
30a68     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
30a6c     09 FB 01 F6 | 	mov	result1, arg01
30a70     10 FB 81 F1 | 	sub	result1, local02
30a74     A1 07 00 FF 
30a78     40 FA 15 FD | 	qdiv	result1, ##1000000
30a7c     02 00 00 FF 
30a80     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
30a84     18 20 62 FD | 	getqx	local02
30a88     A1 07 00 FF 
30a8c     40 FA 15 FD | 	qdiv	result1, ##1000000
30a90     00 20 0E F2 | 	cmp	local02, #0 wz
30a94     19 22 62 FD | 	getqy	local03
30a98     28 00 90 AD |  if_e	jmp	#LR__4990
30a9c     02 00 00 FF 
30aa0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
30aa4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
30aa8     10 25 02 F1 | 	add	local04, local02
30aac     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
30ab0     11 13 82 F1 | 	sub	arg01, local03
30ab4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
30ab8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
30abc     02 00 00 FF 
30ac0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
30ac4                 | LR__4990
30ac4     02 00 00 FF 
30ac8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
30acc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
30ad0     02 00 00 FF 
30ad4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
30ad8     0F 25 62 FC | 	wrlong	local04, local01
30adc     04 1E 06 F1 | 	add	local01, #4
30ae0     0F 23 62 FC | 	wrlong	local03, local01
30ae4                 | '         lastsec += secs;
30ae4                 | '         lastus = now - leftover;
30ae4                 | '     }
30ae4                 | '     tv->tv_sec = lastsec;
30ae4                 | '     tv->tv_usec = leftover;
30ae4                 | '     return 0;
30ae4     00 FA 05 F6 | 	mov	result1, #0
30ae8     A7 F0 03 F6 | 	mov	ptra, fp
30aec     B2 00 A0 FD | 	call	#popregs_
30af0                 | _fatfs_cc_gettimeofday_ret
30af0     2D 00 64 FD | 	ret
30af4                 | 
30af4                 | _fatfs_cc__is_leap_year
30af4     09 FB 51 F6 | 	abs	result1, arg01 wc
30af8     03 FA 05 F5 | 	and	result1, #3
30afc     FD FA 89 F6 | 	negc	result1, result1 wz
30b00     38 00 90 5D |  if_ne	jmp	#LR__5001
30b04     09 FB 51 F6 | 	abs	result1, arg01 wc
30b08     64 FA 15 FD | 	qdiv	result1, #100
30b0c     19 FA 61 FD | 	getqy	result1
30b10     FD FA 89 F6 | 	negc	result1, result1 wz
30b14     1C 00 90 5D |  if_ne	jmp	#LR__5000
30b18     09 FB 51 F6 | 	abs	result1, arg01 wc
30b1c     90 FB 15 FD | 	qdiv	result1, #400
30b20                 | '       return (0 == y % 400);
30b20     00 FA 05 F6 | 	mov	result1, #0
30b24     19 00 62 FD | 	getqy	_var01
30b28     00 01 8A F6 | 	negc	_var01, _var01 wz
30b2c     01 FA 05 A6 |  if_e	mov	result1, #1
30b30     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
30b34                 | LR__5000
30b34                 | '     return 1;
30b34     01 FA 05 F6 | 	mov	result1, #1
30b38     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
30b3c                 | LR__5001
30b3c                 | '   }
30b3c                 | '   return 0;
30b3c     00 FA 05 F6 | 	mov	result1, #0
30b40                 | _fatfs_cc__is_leap_year_ret
30b40     2D 00 64 FD | 	ret
30b44                 | 
30b44                 | _fatfs_cc___tzoffset
30b44     09 01 0A F6 | 	mov	_var01, arg01 wz
30b48     FF FF FF FF 
30b4c     0A FF 6B FC | 	wrlong	##-1, arg02
30b50     01 02 06 F6 | 	mov	_var02, #1
30b54     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
30b58                 | '                 return 0;
30b58     00 FA 05 A6 |  if_e	mov	result1, #0
30b5c     94 02 90 AD |  if_e	jmp	#LR__5027
30b60     0A 01 68 FC | 	wrlong	#0, arg02
30b64     02 00 00 FF 
30b68     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30b6c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
30b70                 | ' 
30b70                 | '        *hasdst = 0;
30b70                 | ' 
30b70                 | ' 	n = stdname;
30b70                 | '         while (*s && isalpha(*s)) {
30b70     02 00 00 FF 
30b74     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30b78     97 28 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
30b7c                 | LR__5010
30b7c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
30b80     48 00 90 AD |  if_e	jmp	#LR__5012
30b84     00 13 C2 FA | 	rdbyte	arg01, _var01
30b88                 | ' {
30b88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30b88     80 12 36 F3 | 	fle	arg01, #128 wc
30b8c                 | '     return __ctype[c];
30b8c     02 00 00 FF 
30b90     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30b94     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30b98     09 FB C1 FA | 	rdbyte	result1, arg01
30b9c     02 00 00 FF 
30ba0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30ba4     0C FA CD F7 | 	test	result1, #12 wz
30ba8     20 00 90 AD |  if_e	jmp	#LR__5012
30bac     00 09 02 F6 | 	mov	_var05, _var01
30bb0     00 0B 02 F6 | 	mov	_var06, _var01
30bb4     01 0A 06 F1 | 	add	_var06, #1
30bb8     04 0D C2 FA | 	rdbyte	_var07, _var05
30bbc     05 01 02 F6 | 	mov	_var01, _var06
30bc0     03 0D 42 FC | 	wrbyte	_var07, _var04
30bc4     01 06 06 F1 | 	add	_var04, #1
30bc8     B0 FF 9F FD | 	jmp	#LR__5010
30bcc                 | LR__5011
30bcc                 | LR__5012
30bcc     03 01 48 FC | 	wrbyte	#0, _var04
30bd0     00 0E 06 F6 | 	mov	_var08, #0
30bd4     00 05 C2 FA | 	rdbyte	_var03, _var01
30bd8     2D 04 0E F2 | 	cmp	_var03, #45 wz
30bdc     01 02 66 A6 |  if_e	neg	_var02, #1
30be0     01 00 06 A1 |  if_e	add	_var01, #1
30be4     97 28 48 FB | 	callpa	#(@LR__5014-@LR__5013)>>2,fcache_load_ptr_
30be8                 | '                 sgn = -1;
30be8                 | '                 s++;
30be8                 | '         }
30be8                 | '         while (isdigit(*s)) {
30be8                 | LR__5013
30be8     00 13 C2 FA | 	rdbyte	arg01, _var01
30bec                 | ' {
30bec                 | '   return  (__ctype_get(c) & 0x02 ) ;
30bec     80 12 36 F3 | 	fle	arg01, #128 wc
30bf0                 | '     return __ctype[c];
30bf0     02 00 00 FF 
30bf4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30bf8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30bfc     09 FB C1 FA | 	rdbyte	result1, arg01
30c00     02 00 00 FF 
30c04     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30c08     02 FA CD F7 | 	test	result1, #2 wz
30c0c     28 00 90 AD |  if_e	jmp	#LR__5015
30c10     07 05 02 F6 | 	mov	_var03, _var08
30c14     02 04 66 F0 | 	shl	_var03, #2
30c18     07 05 02 F1 | 	add	_var03, _var08
30c1c     01 04 66 F0 | 	shl	_var03, #1
30c20     00 09 C2 FA | 	rdbyte	_var05, _var01
30c24     30 08 86 F1 | 	sub	_var05, #48
30c28     04 05 02 F1 | 	add	_var03, _var05
30c2c     02 0F 02 F6 | 	mov	_var08, _var03
30c30     01 00 06 F1 | 	add	_var01, #1
30c34     B0 FF 9F FD | 	jmp	#LR__5013
30c38                 | LR__5014
30c38                 | LR__5015
30c38     07 00 00 FF 
30c3c     10 0E 06 FD | 	qmul	_var08, ##3600
30c40     00 05 C2 FA | 	rdbyte	_var03, _var01
30c44     3A 04 0E F2 | 	cmp	_var03, #58 wz
30c48     18 10 62 FD | 	getqx	_var09
30c4c     70 00 90 5D |  if_ne	jmp	#LR__5019
30c50     00 0E 06 F6 | 	mov	_var08, #0
30c54     01 00 06 F1 | 	add	_var01, #1
30c58     97 28 48 FB | 	callpa	#(@LR__5017-@LR__5016)>>2,fcache_load_ptr_
30c5c                 | '                 x = 0;
30c5c                 | '                 s++;
30c5c                 | '                 while (isdigit(*s)) {
30c5c                 | LR__5016
30c5c     00 13 C2 FA | 	rdbyte	arg01, _var01
30c60                 | ' {
30c60                 | '   return  (__ctype_get(c) & 0x02 ) ;
30c60     80 12 36 F3 | 	fle	arg01, #128 wc
30c64                 | '     return __ctype[c];
30c64     02 00 00 FF 
30c68     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30c6c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30c70     09 FB C1 FA | 	rdbyte	result1, arg01
30c74     02 00 00 FF 
30c78     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30c7c     02 FA CD F7 | 	test	result1, #2 wz
30c80     28 00 90 AD |  if_e	jmp	#LR__5018
30c84     07 05 02 F6 | 	mov	_var03, _var08
30c88     02 04 66 F0 | 	shl	_var03, #2
30c8c     07 05 02 F1 | 	add	_var03, _var08
30c90     01 04 66 F0 | 	shl	_var03, #1
30c94     00 09 C2 FA | 	rdbyte	_var05, _var01
30c98     30 08 86 F1 | 	sub	_var05, #48
30c9c     04 05 02 F1 | 	add	_var03, _var05
30ca0     02 0F 02 F6 | 	mov	_var08, _var03
30ca4     01 00 06 F1 | 	add	_var01, #1
30ca8     B0 FF 9F FD | 	jmp	#LR__5016
30cac                 | LR__5017
30cac                 | LR__5018
30cac     07 0D 02 F6 | 	mov	_var07, _var08
30cb0     04 0C 66 F0 | 	shl	_var07, #4
30cb4     07 0D 82 F1 | 	sub	_var07, _var08
30cb8     02 0C 66 F0 | 	shl	_var07, #2
30cbc     06 11 02 F1 | 	add	_var09, _var07
30cc0                 | LR__5019
30cc0     02 00 00 FF 
30cc4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30cc8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
30ccc     00 13 C2 FA | 	rdbyte	arg01, _var01
30cd0                 | ' {
30cd0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30cd0     80 12 36 F3 | 	fle	arg01, #128 wc
30cd4                 | '     return __ctype[c];
30cd4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
30cd8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30cdc     09 FB C1 FA | 	rdbyte	result1, arg01
30ce0     02 00 00 FF 
30ce4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30ce8     0C FA CD F7 | 	test	result1, #12 wz
30cec     50 00 90 AD |  if_e	jmp	#LR__5022
30cf0     0A 03 68 FC | 	wrlong	#1, arg02
30cf4                 | '                 *hasdst = 1;
30cf4                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
30cf4                 | LR__5020
30cf4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
30cf8     44 00 90 AD |  if_e	jmp	#LR__5021
30cfc     00 13 C2 FA | 	rdbyte	arg01, _var01
30d00                 | ' {
30d00                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30d00     80 12 36 F3 | 	fle	arg01, #128 wc
30d04                 | '     return __ctype[c];
30d04     02 00 00 FF 
30d08     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30d0c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30d10     09 FB C1 FA | 	rdbyte	result1, arg01
30d14     02 00 00 FF 
30d18     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30d1c     0C FA CD F7 | 	test	result1, #12 wz
30d20     1C 00 90 AD |  if_e	jmp	#LR__5021
30d24     00 0B 02 F6 | 	mov	_var06, _var01
30d28     01 0A 06 F1 | 	add	_var06, #1
30d2c     00 0D C2 FA | 	rdbyte	_var07, _var01
30d30     05 01 02 F6 | 	mov	_var01, _var06
30d34     03 0D 42 FC | 	wrbyte	_var07, _var04
30d38     01 06 06 F1 | 	add	_var04, #1
30d3c     B4 FF 9F FD | 	jmp	#LR__5020
30d40                 | LR__5021
30d40                 | LR__5022
30d40     03 01 48 FC | 	wrbyte	#0, _var04
30d44     02 00 00 FF 
30d48     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30d4c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30d50     02 00 00 FF 
30d54     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30d58     20 00 90 AD |  if_e	jmp	#LR__5023
30d5c     02 00 00 FF 
30d60     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30d64     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30d68     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
30d6c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30d70     02 00 00 FF 
30d74     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30d78     1C 00 90 FD | 	jmp	#LR__5024
30d7c                 | LR__5023
30d7c     02 00 00 FF 
30d80     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
30d84     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30d88     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
30d8c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30d90     02 00 00 FF 
30d94     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30d98                 | LR__5024
30d98     02 00 00 FF 
30d9c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30da0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30da4     02 00 00 FF 
30da8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
30dac     20 00 90 AD |  if_e	jmp	#LR__5025
30db0     02 00 00 FF 
30db4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30db8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30dbc     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
30dc0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30dc4     02 00 00 FF 
30dc8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30dcc     1C 00 90 FD | 	jmp	#LR__5026
30dd0                 | LR__5025
30dd0     02 00 00 FF 
30dd4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30dd8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30ddc     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
30de0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30de4     02 00 00 FF 
30de8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30dec                 | LR__5026
30dec     08 03 02 FD | 	qmul	_var02, _var09
30df0                 | ' 		_tzname[1] = stdname;
30df0                 | ' 
30df0                 | '         return sgn * off;
30df0     18 FA 61 FD | 	getqx	result1
30df4                 | LR__5027
30df4                 | _fatfs_cc___tzoffset_ret
30df4     2D 00 64 FD | 	ret
30df8                 | 
30df8                 | _fatfs_cc___indst
30df8     10 12 06 F1 | 	add	arg01, #16
30dfc     09 01 02 FB | 	rdlong	_var01, arg01
30e00     10 12 86 F1 | 	sub	arg01, #16
30e04     02 00 0E F2 | 	cmp	_var01, #2 wz
30e08     30 00 90 5D |  if_ne	jmp	#LR__5030
30e0c     07 00 06 F6 | 	mov	_var01, #7
30e10     18 12 06 F1 | 	add	arg01, #24
30e14     09 03 02 FB | 	rdlong	_var02, arg01
30e18     01 01 02 F1 | 	add	_var01, _var02
30e1c     0C 12 86 F1 | 	sub	arg01, #12
30e20     09 05 02 FB | 	rdlong	_var03, arg01
30e24     02 01 82 F1 | 	sub	_var01, _var03
30e28     00 00 56 F2 | 	cmps	_var01, #0 wc
30e2c                 | '                         return 1;
30e2c     01 FA 05 C6 |  if_b	mov	result1, #1
30e30     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30e34                 | '                 return 0;
30e34     00 FA 05 F6 | 	mov	result1, #0
30e38     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30e3c                 | LR__5030
30e3c     10 12 06 F1 | 	add	arg01, #16
30e40     09 01 02 FB | 	rdlong	_var01, arg01
30e44     10 12 86 F1 | 	sub	arg01, #16
30e48     0A 00 0E F2 | 	cmp	_var01, #10 wz
30e4c     28 00 90 5D |  if_ne	jmp	#LR__5031
30e50     18 12 06 F1 | 	add	arg01, #24
30e54     09 01 02 FB | 	rdlong	_var01, arg01
30e58     0C 12 86 F1 | 	sub	arg01, #12
30e5c     09 07 02 FB | 	rdlong	_var04, arg01
30e60     03 01 82 F1 | 	sub	_var01, _var04
30e64     00 00 56 F2 | 	cmps	_var01, #0 wc
30e68                 | '                         return 0;
30e68     00 FA 05 C6 |  if_b	mov	result1, #0
30e6c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30e70                 | '                 return 1;
30e70     01 FA 05 F6 | 	mov	result1, #1
30e74     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30e78                 | LR__5031
30e78                 | '         }
30e78                 | ' 
30e78                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
30e78     00 00 06 F6 | 	mov	_var01, #0
30e7c     10 12 06 F1 | 	add	arg01, #16
30e80     09 03 02 FB | 	rdlong	_var02, arg01
30e84     10 12 86 F1 | 	sub	arg01, #16
30e88     03 02 56 F2 | 	cmps	_var02, #3 wc
30e8c     10 00 90 CD |  if_b	jmp	#LR__5032
30e90     10 12 06 F1 | 	add	arg01, #16
30e94     09 05 02 FB | 	rdlong	_var03, arg01
30e98     0A 04 56 F2 | 	cmps	_var03, #10 wc
30e9c     01 00 06 C6 |  if_b	mov	_var01, #1
30ea0                 | LR__5032
30ea0     00 FB 01 F6 | 	mov	result1, _var01
30ea4                 | _fatfs_cc___indst_ret
30ea4     2D 00 64 FD | 	ret
30ea8                 | 
30ea8                 | ' 	
30ea8                 | ' 	FUNCTION pfunc(c as integer) as integer
30ea8                 | ___strs_cl_pfunc
30ea8                 | ' 		if (i < 16) then
30ea8     04 E4 05 F1 | 	add	objptr, #4
30eac     F2 FA 01 FB | 	rdlong	result1, objptr
30eb0     04 E4 85 F1 | 	sub	objptr, #4
30eb4     10 FA 55 F2 | 	cmps	result1, #16 wc
30eb8     2C 00 90 3D |  if_ae	jmp	#LR__5040
30ebc     F2 FA 01 FB | 	rdlong	result1, objptr
30ec0     04 E4 05 F1 | 	add	objptr, #4
30ec4     F2 00 02 FB | 	rdlong	_var01, objptr
30ec8     FD 00 02 F1 | 	add	_var01, result1
30ecc     00 13 42 FC | 	wrbyte	arg01, _var01
30ed0     F2 FA 01 FB | 	rdlong	result1, objptr
30ed4     01 FA 05 F1 | 	add	result1, #1
30ed8     F2 FA 61 FC | 	wrlong	result1, objptr
30edc     04 E4 85 F1 | 	sub	objptr, #4
30ee0                 | ' 			p(i) = c
30ee0                 | ' 			i = i+1
30ee0                 | ' 			return 1
30ee0     01 FA 05 F6 | 	mov	result1, #1
30ee4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30ee8                 | LR__5040
30ee8                 | ' 			return -1
30ee8     01 FA 65 F6 | 	neg	result1, #1
30eec                 | ___strs_cl_pfunc_ret
30eec     2D 00 64 FD | 	ret
30ef0                 | 
30ef0                 | __struct__s_vfs_file_t_putchar
30ef0     04 4A 05 F6 | 	mov	COUNT_, #4
30ef4     A8 00 A0 FD | 	call	#pushregs_
30ef8     1C E4 05 F1 | 	add	objptr, #28
30efc     F2 1E 0A FB | 	rdlong	local01, objptr wz
30f00     1C E4 85 F1 | 	sub	objptr, #28
30f04     00 FA 05 A6 |  if_e	mov	result1, #0
30f08     48 00 90 AD |  if_e	jmp	#LR__5050
30f0c     1C E4 05 F1 | 	add	objptr, #28
30f10     F2 20 02 FB | 	rdlong	local02, objptr
30f14     10 23 02 F6 | 	mov	local03, local02
30f18     1C E4 85 F1 | 	sub	objptr, #28
30f1c     13 22 46 F7 | 	zerox	local03, #19
30f20     14 20 46 F0 | 	shr	local02, #20
30f24     02 20 66 F0 | 	shl	local02, #2
30f28     ED 20 02 F1 | 	add	local02, __methods__
30f2c     10 21 02 FB | 	rdlong	local02, local02
30f30     F2 14 02 F6 | 	mov	arg02, objptr
30f34     F2 24 02 F6 | 	mov	local04, objptr
30f38     11 E5 01 F6 | 	mov	objptr, local03
30f3c     2D 20 62 FD | 	call	local02
30f40     12 E5 01 F6 | 	mov	objptr, local04
30f44                 | '     return (i < 0) ? 0 : 1;
30f44     00 FA 55 F2 | 	cmps	result1, #0 wc
30f48     00 1E 06 C6 |  if_b	mov	local01, #0
30f4c     01 1E 06 36 |  if_ae	mov	local01, #1
30f50     0F FB 01 F6 | 	mov	result1, local01
30f54                 | LR__5050
30f54     A7 F0 03 F6 | 	mov	ptra, fp
30f58     B2 00 A0 FD | 	call	#popregs_
30f5c                 | __struct__s_vfs_file_t_putchar_ret
30f5c     2D 00 64 FD | 	ret
30f60                 | 
30f60                 | __struct__s_vfs_file_t_getchar
30f60     03 4A 05 F6 | 	mov	COUNT_, #3
30f64     A8 00 A0 FD | 	call	#pushregs_
30f68     20 E4 05 F1 | 	add	objptr, #32
30f6c     F2 12 0A FB | 	rdlong	arg01, objptr wz
30f70     20 E4 85 F1 | 	sub	objptr, #32
30f74     01 FA 65 A6 |  if_e	neg	result1, #1
30f78     38 00 90 AD |  if_e	jmp	#LR__5060
30f7c                 | '     return getcf(__this);
30f7c     20 E4 05 F1 | 	add	objptr, #32
30f80     F2 1E 02 FB | 	rdlong	local01, objptr
30f84     0F 21 02 F6 | 	mov	local02, local01
30f88     20 E4 85 F1 | 	sub	objptr, #32
30f8c     13 20 46 F7 | 	zerox	local02, #19
30f90     14 1E 46 F0 | 	shr	local01, #20
30f94     02 1E 66 F0 | 	shl	local01, #2
30f98     ED 1E 02 F1 | 	add	local01, __methods__
30f9c     0F 1F 02 FB | 	rdlong	local01, local01
30fa0     F2 12 02 F6 | 	mov	arg01, objptr
30fa4     F2 22 02 F6 | 	mov	local03, objptr
30fa8     10 E5 01 F6 | 	mov	objptr, local02
30fac     2D 1E 62 FD | 	call	local01
30fb0     11 E5 01 F6 | 	mov	objptr, local03
30fb4                 | LR__5060
30fb4     A7 F0 03 F6 | 	mov	ptra, fp
30fb8     B2 00 A0 FD | 	call	#popregs_
30fbc                 | __struct__s_vfs_file_t_getchar_ret
30fbc     2D 00 64 FD | 	ret
30fc0                 | 
30fc0                 | __struct___bas_wrap_sender_tx
30fc0     03 4A 05 F6 | 	mov	COUNT_, #3
30fc4     A8 00 A0 FD | 	call	#pushregs_
30fc8     F2 1E 02 FB | 	rdlong	local01, objptr
30fcc     0F 21 02 F6 | 	mov	local02, local01
30fd0     13 1E 46 F7 | 	zerox	local01, #19
30fd4     14 20 46 F0 | 	shr	local02, #20
30fd8     02 20 66 F0 | 	shl	local02, #2
30fdc     ED 20 02 F1 | 	add	local02, __methods__
30fe0     10 21 02 FB | 	rdlong	local02, local02
30fe4     F2 22 02 F6 | 	mov	local03, objptr
30fe8     0F E5 01 F6 | 	mov	objptr, local01
30fec     2D 20 62 FD | 	call	local02
30ff0     11 E5 01 F6 | 	mov	objptr, local03
30ff4     01 FA 05 F6 | 	mov	result1, #1
30ff8     A7 F0 03 F6 | 	mov	ptra, fp
30ffc     B2 00 A0 FD | 	call	#popregs_
31000                 | __struct___bas_wrap_sender_tx_ret
31000     2D 00 64 FD | 	ret
31004                 | 
31004                 | __struct___bas_wrap_sender_rx
31004     03 4A 05 F6 | 	mov	COUNT_, #3
31008     A8 00 A0 FD | 	call	#pushregs_
3100c     04 E4 05 F1 | 	add	objptr, #4
31010     F2 1E 02 FB | 	rdlong	local01, objptr
31014     0F 21 02 F6 | 	mov	local02, local01
31018     04 E4 85 F1 | 	sub	objptr, #4
3101c     13 20 46 F7 | 	zerox	local02, #19
31020     14 1E 46 F0 | 	shr	local01, #20
31024     02 1E 66 F0 | 	shl	local01, #2
31028     ED 1E 02 F1 | 	add	local01, __methods__
3102c     0F 1F 02 FB | 	rdlong	local01, local01
31030     F2 22 02 F6 | 	mov	local03, objptr
31034     10 E5 01 F6 | 	mov	objptr, local02
31038     2D 1E 62 FD | 	call	local01
3103c     11 E5 01 F6 | 	mov	objptr, local03
31040     A7 F0 03 F6 | 	mov	ptra, fp
31044     B2 00 A0 FD | 	call	#popregs_
31048                 | __struct___bas_wrap_sender_rx_ret
31048     2D 00 64 FD | 	ret
3104c                 | 
3104c                 | __struct___bas_wrap_sender_close
3104c     03 4A 05 F6 | 	mov	COUNT_, #3
31050     A8 00 A0 FD | 	call	#pushregs_
31054     08 E4 05 F1 | 	add	objptr, #8
31058     F2 1E 02 FB | 	rdlong	local01, objptr
3105c     0F 21 02 F6 | 	mov	local02, local01
31060     08 E4 85 F1 | 	sub	objptr, #8
31064     13 20 46 F7 | 	zerox	local02, #19
31068     14 1E 46 F0 | 	shr	local01, #20
3106c     02 1E 66 F0 | 	shl	local01, #2
31070     ED 1E 02 F1 | 	add	local01, __methods__
31074     0F 1F 02 FB | 	rdlong	local01, local01
31078     F2 22 02 F6 | 	mov	local03, objptr
3107c     10 E5 01 F6 | 	mov	objptr, local02
31080     2D 1E 62 FD | 	call	local01
31084     11 E5 01 F6 | 	mov	objptr, local03
31088     A7 F0 03 F6 | 	mov	ptra, fp
3108c     B2 00 A0 FD | 	call	#popregs_
31090                 | __struct___bas_wrap_sender_close_ret
31090     2D 00 64 FD | 	ret
31094                 | 
31094                 | LR__5070
31094     2F          | 	byte	"/"
31095     00          | 	byte	0
31096                 | LR__5071
31096     69 6E 66    | 	byte	"inf"
31099     00          | 	byte	0
3109a                 | LR__5072
3109a     6E 61 6E    | 	byte	"nan"
3109d     00          | 	byte	0
3109e                 | LR__5073
3109e                 | 	byte	
3109e     00          | 	byte	0
3109f                 | LR__5074
3109f                 | 	byte	
3109f     00          | 	byte	0
310a0                 | LR__5075
310a0                 | 	byte	
310a0     00          | 	byte	0
310a1                 | LR__5076
310a1                 | 	byte	
310a1     00          | 	byte	0
310a2                 | LR__5077
310a2                 | 	byte	
310a2     00          | 	byte	0
310a3                 | LR__5078
310a3                 | 	byte	
310a3     00          | 	byte	0
310a4                 | LR__5079
310a4                 | 	byte	
310a4     00          | 	byte	0
310a5                 | LR__5080
310a5                 | 	byte	
310a5     00          | 	byte	0
310a6                 | LR__5081
310a6     00          | 	byte	0
310a7     00          | 	byte	0
310a8                 | LR__5082
310a8     00          | 	byte	0
310a9     00          | 	byte	0
310aa                 | LR__5083
310aa     00          | 	byte	0
310ab     00          | 	byte	0
310ac                 | LR__5084
310ac     20 21 21 21 
310b0     20 63 6F 72 
310b4     72 75 70 74 
310b8     65 64 20 68 
310bc     65 61 70 3F 
310c0     3F 3F 20 21 
310c4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
310c7     00          | 	byte	0
310c8                 | LR__5085
310c8     20 21 21 21 
310cc     20 6F 75 74 
310d0     20 6F 66 20 
310d4     68 65 61 70 
310d8     20 6D 65 6D 
310dc     6F 72 79 20 
310e0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
310e4     00          | 	byte	0
310e5                 | LR__5086
310e5     20 21 21 21 
310e9     20 63 6F 72 
310ed     72 75 70 74 
310f1     65 64 20 68 
310f5     65 61 70 20 
310f9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
310fd     00          | 	byte	0
310fe                 | LR__5087
310fe     00          | 	byte	0
310ff     00          | 	byte	0
31100                 | LR__5088
31100     2E          | 	byte	"."
31101     00          | 	byte	0
31102                 | LR__5089
31102     00          | 	byte	0
31103     00          | 	byte	0
31104                 | LR__5090
31104     00          | 	byte	0
31105     00          | 	byte	0
31106                 | LR__5091
31106     00          | 	byte	0
31107     00          | 	byte	0
31108                 | LR__5092
31108     2A 3A 3C 3E 
3110c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
31110     00          | 	byte	0
31111                 | LR__5093
31111     2B 2C 3B 3D 
31115     5B 5D       | 	byte	"+,;=[]"
31117     00          | 	byte	0
31118                 | LR__5094
31118     46 41 54 33 
3111c     32 20 20 20 | 	byte	"FAT32   "
31120     00          | 	byte	0
31121                 | LR__5095
31121     54 5A       | 	byte	"TZ"
31123     00          | 	byte	0
31124                 | LR__5096
31124     00          | 	byte	0
31125     00          | 	byte	0
31126                 | LR__5097
31126                 | 	byte	
31126     00          | 	byte	0
31127                 | LR__5098
31127                 | 	byte	
31127     00          | 	byte	0
31128                 | LR__5099
31128                 | 	byte	
31128     00          | 	byte	0
31129                 | LR__5100
31129                 | 	byte	
31129     00          | 	byte	0
3112a                 | LR__5101
3112a     22          | 	byte	34
3112b     00          | 	byte	0
3112c                 | LR__5102
3112c     22          | 	byte	34
3112d     00          | 	byte	0
3112e                 | LR__5103
3112e     3A          | 	byte	":"
3112f     00          | 	byte	0
31130                 | LR__5104
31130                 | 	byte	
31130     00          | 	byte	0
31131                 | LR__5105
31131                 | 	byte	
31131     00          | 	byte	0
31132                 | LR__5106
31132                 | 	byte	
31132     00          | 	byte	0
31133                 | LR__5107
31133                 | 	byte	
31133     00          | 	byte	0
31134                 | LR__5108
31134                 | 	byte	
31134     00          | 	byte	0
31135                 | LR__5109
31135                 | 	byte	
31135     00          | 	byte	0
31136                 | LR__5110
31136                 | 	byte	
31136     00          | 	byte	0
31137                 | LR__5111
31137     30          | 	byte	"0"
31138     00          | 	byte	0
31139                 | LR__5112
31139     22          | 	byte	34
3113a     00          | 	byte	0
3113b                 | LR__5113
3113b     22          | 	byte	34
3113c     00          | 	byte	0
3113d                 | LR__5114
3113d     22          | 	byte	34
3113e     00          | 	byte	0
3113f                 | LR__5115
3113f     22          | 	byte	34
31140     00          | 	byte	0
31141                 | LR__5116
31141     22          | 	byte	34
31142     00          | 	byte	0
31143                 | LR__5117
31143     3E          | 	byte	">"
31144     00          | 	byte	0
31145                 | LR__5118
31145     3C          | 	byte	"<"
31146     00          | 	byte	0
31147                 | LR__5119
31147     2B          | 	byte	"+"
31148     00          | 	byte	0
31149                 | LR__5120
31149     2D          | 	byte	"-"
3114a     00          | 	byte	0
3114b                 | LR__5121
3114b     2A          | 	byte	"*"
3114c     00          | 	byte	0
3114d                 | LR__5122
3114d     2F          | 	byte	"/"
3114e     00          | 	byte	0
3114f                 | LR__5123
3114f     5E          | 	byte	"^"
31150     00          | 	byte	0
31151                 | LR__5124
31151     3D          | 	byte	"="
31152     00          | 	byte	0
31153                 | LR__5125
31153     2B          | 	byte	"+"
31154     00          | 	byte	0
31155                 | LR__5126
31155     2B          | 	byte	"+"
31156     00          | 	byte	0
31157                 | LR__5127
31157     2D          | 	byte	"-"
31158     00          | 	byte	0
31159                 | LR__5128
31159     2D          | 	byte	"-"
3115a     00          | 	byte	0
3115b                 | LR__5129
3115b     3C          | 	byte	"<"
3115c     00          | 	byte	0
3115d                 | LR__5130
3115d     3E          | 	byte	">"
3115e     00          | 	byte	0
3115f                 | LR__5131
3115f     22          | 	byte	34
31160     00          | 	byte	0
31161                 | LR__5132
31161     22          | 	byte	34
31162     00          | 	byte	0
31163                 | LR__5133
31163     65 6C 73 65 | 	byte	"else"
31167     00          | 	byte	0
31168                 | LR__5134
31168     74 68 65 6E | 	byte	"then"
3116c     00          | 	byte	0
3116d                 | LR__5135
3116d     2E          | 	byte	"."
3116e     00          | 	byte	0
3116f                 | LR__5136
3116f     3F          | 	byte	"?"
31170     00          | 	byte	0
31171                 | LR__5137
31171     3F          | 	byte	"?"
31172     00          | 	byte	0
31173                 | LR__5138
31173     6D 6F 75 73 
31177     65          | 	byte	"mouse"
31178     00          | 	byte	0
31179                 | LR__5139
31179     63 75 72 73 
3117d     6F 72       | 	byte	"cursor"
3117f     00          | 	byte	0
31180                 | LR__5140
31180     63 6C 69 63 
31184     6B          | 	byte	"click"
31185     00          | 	byte	0
31186                 | LR__5141
31186     6F 6E       | 	byte	"on"
31188     00          | 	byte	0
31189                 | LR__5142
31189     31          | 	byte	"1"
3118a     00          | 	byte	0
3118b                 | LR__5143
3118b     6F 66 66    | 	byte	"off"
3118e     00          | 	byte	0
3118f                 | LR__5144
3118f     30          | 	byte	"0"
31190     00          | 	byte	0
31191                 | LR__5145
31191     6D 6F 64 65 | 	byte	"mode"
31195     00          | 	byte	0
31196                 | LR__5146
31196     6D 2E       | 	byte	"m."
31198     00          | 	byte	0
31199                 | LR__5147
31199     61 74 61 72 
3119d     69          | 	byte	"atari"
3119e     00          | 	byte	0
3119f                 | LR__5148
3119f     30          | 	byte	"0"
311a0     00          | 	byte	0
311a1                 | LR__5149
311a1     70 63 5F 61 
311a5     6D 62 65 72 | 	byte	"pc_amber"
311a9     00          | 	byte	0
311aa                 | LR__5150
311aa     31          | 	byte	"1"
311ab     00          | 	byte	0
311ac                 | LR__5151
311ac     70 63 5F 67 
311b0     72 65 65 6E | 	byte	"pc_green"
311b4     00          | 	byte	0
311b5                 | LR__5152
311b5     32          | 	byte	"2"
311b6     00          | 	byte	0
311b7                 | LR__5153
311b7     70 63 5F 77 
311bb     68 69 74 65 | 	byte	"pc_white"
311bf     00          | 	byte	0
311c0                 | LR__5154
311c0     33          | 	byte	"3"
311c1     00          | 	byte	0
311c2                 | LR__5155
311c2     73 74       | 	byte	"st"
311c4     00          | 	byte	0
311c5                 | LR__5156
311c5     34          | 	byte	"4"
311c6     00          | 	byte	0
311c7                 | LR__5157
311c7                 | 	byte	
311c7     00          | 	byte	0
311c8                 | LR__5158
311c8     6C 6F 61 64 | 	byte	"load"
311cc     00          | 	byte	0
311cd                 | LR__5159
311cd     73 61 76 65 | 	byte	"save"
311d1     00          | 	byte	0
311d2                 | LR__5160
311d2     62 72 75 6E | 	byte	"brun"
311d6     00          | 	byte	0
311d7                 | LR__5161
311d7     72 75 6E    | 	byte	"run"
311da     00          | 	byte	0
311db                 | LR__5162
311db     6C 6F 2E    | 	byte	"lo."
311de     00          | 	byte	0
311df                 | LR__5163
311df     73 2E       | 	byte	"s."
311e1     00          | 	byte	0
311e2                 | LR__5164
311e2     62 72 2E    | 	byte	"br."
311e5     00          | 	byte	0
311e6                 | LR__5165
311e6     65 6E 74 65 
311ea     72          | 	byte	"enter"
311eb     00          | 	byte	0
311ec                 | LR__5166
311ec     65 2E       | 	byte	"e."
311ee     00          | 	byte	0
311ef                 | LR__5167
311ef     64 65 6C 65 
311f3     74 65       | 	byte	"delete"
311f5     00          | 	byte	0
311f6                 | LR__5168
311f6     6D 6B 64 69 
311fa     72          | 	byte	"mkdir"
311fb     00          | 	byte	0
311fc                 | LR__5169
311fc     63 64       | 	byte	"cd"
311fe     00          | 	byte	0
311ff                 | LR__5170
311ff     63 64 2E    | 	byte	"cd."
31202     00          | 	byte	0
31203                 | LR__5171
31203     2E          | 	byte	"."
31204     00          | 	byte	0
31205                 | LR__5172
31205     2E 2E       | 	byte	".."
31207     00          | 	byte	0
31208                 | LR__5173
31208     63 64       | 	byte	"cd"
3120a     00          | 	byte	0
3120b                 | LR__5174
3120b     2F          | 	byte	"/"
3120c     00          | 	byte	0
3120d                 | LR__5175
3120d                 | 	byte	
3120d     00          | 	byte	0
3120e                 | LR__5176
3120e                 | 	byte	
3120e     00          | 	byte	0
3120f                 | LR__5177
3120f                 | 	byte	
3120f     00          | 	byte	0
31210                 | LR__5178
31210                 | 	byte	
31210     00          | 	byte	0
31211                 | LR__5179
31211                 | 	byte	
31211     00          | 	byte	0
31212                 | LR__5180
31212     52 65 61 64 
31216     79          | 	byte	"Ready"
31217     00          | 	byte	0
31218                 | LR__5181
31218     2B          | 	byte	"+"
31219     00          | 	byte	0
3121a                 | LR__5182
3121a     2D          | 	byte	"-"
3121b     00          | 	byte	0
3121c                 | LR__5183
3121c     6F 72       | 	byte	"or"
3121e     00          | 	byte	0
3121f                 | LR__5184
3121f     78 6F 72    | 	byte	"xor"
31222     00          | 	byte	0
31223                 | LR__5185
31223     2A          | 	byte	"*"
31224     00          | 	byte	0
31225                 | LR__5186
31225     2F          | 	byte	"/"
31226     00          | 	byte	0
31227                 | LR__5187
31227     61 6E 64    | 	byte	"and"
3122a     00          | 	byte	0
3122b                 | LR__5188
3122b     64 69 76    | 	byte	"div"
3122e     00          | 	byte	0
3122f                 | LR__5189
3122f     6D 6F 64    | 	byte	"mod"
31232     00          | 	byte	0
31233                 | LR__5190
31233     73 68 6C    | 	byte	"shl"
31236     00          | 	byte	0
31237                 | LR__5191
31237     73 68 72    | 	byte	"shr"
3123a     00          | 	byte	0
3123b                 | LR__5192
3123b     5E          | 	byte	"^"
3123c     00          | 	byte	0
3123d                 | LR__5193
3123d     6E 6F 74    | 	byte	"not"
31240     00          | 	byte	0
31241                 | LR__5194
31241     40          | 	byte	"@"
31242     00          | 	byte	0
31243                 | LR__5195
31243     3D          | 	byte	"="
31244     00          | 	byte	0
31245                 | LR__5196
31245     3E 3D       | 	byte	">="
31247     00          | 	byte	0
31248                 | LR__5197
31248     3C 3D       | 	byte	"<="
3124a     00          | 	byte	0
3124b                 | LR__5198
3124b     3C          | 	byte	"<"
3124c     00          | 	byte	0
3124d                 | LR__5199
3124d     3E          | 	byte	">"
3124e     00          | 	byte	0
3124f                 | LR__5200
3124f     3C 3E       | 	byte	"<>"
31251     00          | 	byte	0
31252                 | LR__5201
31252     2B 2B       | 	byte	"++"
31254     00          | 	byte	0
31255                 | LR__5202
31255     2D 2D       | 	byte	"--"
31257     00          | 	byte	0
31258                 | LR__5203
31258     23          | 	byte	"#"
31259     00          | 	byte	0
3125a                 | LR__5204
3125a     30          | 	byte	"0"
3125b     00          | 	byte	0
3125c                 | LR__5205
3125c     39          | 	byte	"9"
3125d     00          | 	byte	0
3125e                 | LR__5206
3125e     23 72 65 61 
31262     64          | 	byte	"#read"
31263     00          | 	byte	0
31264                 | LR__5207
31264     23 77 72 69 
31268     74 65       | 	byte	"#write"
3126a     00          | 	byte	0
3126b                 | LR__5208
3126b     23 61 70 70 
3126f     65 6E 64    | 	byte	"#append"
31272     00          | 	byte	0
31273                 | LR__5209
31273     23          | 	byte	"#"
31274     00          | 	byte	0
31275                 | LR__5210
31275     23          | 	byte	"#"
31276     00          | 	byte	0
31277                 | LR__5211
31277     2D          | 	byte	"-"
31278     00          | 	byte	0
31279                 | LR__5212
31279     30          | 	byte	"0"
3127a     00          | 	byte	0
3127b                 | LR__5213
3127b     63          | 	byte	"c"
3127c     00          | 	byte	0
3127d                 | LR__5214
3127d     63 23       | 	byte	"c#"
3127f     00          | 	byte	0
31280                 | LR__5215
31280     64          | 	byte	"d"
31281     00          | 	byte	0
31282                 | LR__5216
31282     64 23       | 	byte	"d#"
31284     00          | 	byte	0
31285                 | LR__5217
31285     65          | 	byte	"e"
31286     00          | 	byte	0
31287                 | LR__5218
31287     66          | 	byte	"f"
31288     00          | 	byte	0
31289                 | LR__5219
31289     66 23       | 	byte	"f#"
3128b     00          | 	byte	0
3128c                 | LR__5220
3128c     67          | 	byte	"g"
3128d     00          | 	byte	0
3128e                 | LR__5221
3128e     67 23       | 	byte	"g#"
31290     00          | 	byte	0
31291                 | LR__5222
31291     61          | 	byte	"a"
31292     00          | 	byte	0
31293                 | LR__5223
31293     61 23       | 	byte	"a#"
31295     00          | 	byte	0
31296                 | LR__5224
31296     68          | 	byte	"h"
31297     00          | 	byte	0
31298                 | LR__5225
31298     62          | 	byte	"b"
31299     00          | 	byte	0
3129a                 | LR__5226
3129a     2B          | 	byte	"+"
3129b     00          | 	byte	0
3129c                 | LR__5227
3129c     2D          | 	byte	"-"
3129d     00          | 	byte	0
3129e                 | LR__5228
3129e     3D          | 	byte	"="
3129f     00          | 	byte	0
312a0                 | LR__5229
312a0     2C          | 	byte	","
312a1     00          | 	byte	0
312a2                 | LR__5230
312a2     2A          | 	byte	"*"
312a3     00          | 	byte	0
312a4                 | LR__5231
312a4     2F          | 	byte	"/"
312a5     00          | 	byte	0
312a6                 | LR__5232
312a6     3B          | 	byte	";"
312a7     00          | 	byte	0
312a8                 | LR__5233
312a8     22          | 	byte	34
312a9     00          | 	byte	0
312aa                 | LR__5234
312aa     5E          | 	byte	"^"
312ab     00          | 	byte	0
312ac                 | LR__5235
312ac     29          | 	byte	")"
312ad     00          | 	byte	0
312ae                 | LR__5236
312ae     28          | 	byte	"("
312af     00          | 	byte	0
312b0                 | LR__5237
312b0     3A          | 	byte	":"
312b1     00          | 	byte	0
312b2                 | LR__5238
312b2     20          | 	byte	" "
312b3     00          | 	byte	0
312b4                 | LR__5239
312b4     3E          | 	byte	">"
312b5     00          | 	byte	0
312b6                 | LR__5240
312b6     3C          | 	byte	"<"
312b7     00          | 	byte	0
312b8                 | LR__5241
312b8     3D          | 	byte	"="
312b9     00          | 	byte	0
312ba                 | LR__5242
312ba     62 65 65 70 | 	byte	"beep"
312be     00          | 	byte	0
312bf                 | LR__5243
312bf     62 2E       | 	byte	"b."
312c1     00          | 	byte	0
312c2                 | LR__5244
312c2     62 6F 78    | 	byte	"box"
312c5     00          | 	byte	0
312c6                 | LR__5245
312c6     62 72 75 6E | 	byte	"brun"
312ca     00          | 	byte	0
312cb                 | LR__5246
312cb     62 72 2E    | 	byte	"br."
312ce     00          | 	byte	0
312cf                 | LR__5247
312cf     63 64       | 	byte	"cd"
312d1     00          | 	byte	0
312d2                 | LR__5248
312d2     63 68 61 6E 
312d6     67 65 66 72 
312da     65 71       | 	byte	"changefreq"
312dc     00          | 	byte	0
312dd                 | LR__5249
312dd     63 66 2E    | 	byte	"cf."
312e0     00          | 	byte	0
312e1                 | LR__5250
312e1     63 68 61 6E 
312e5     67 65 70 61 
312e9     6E          | 	byte	"changepan"
312ea     00          | 	byte	0
312eb                 | LR__5251
312eb     63 70 2E    | 	byte	"cp."
312ee     00          | 	byte	0
312ef                 | LR__5252
312ef     63 68 61 6E 
312f3     67 65 76 6F 
312f7     6C          | 	byte	"changevol"
312f8     00          | 	byte	0
312f9                 | LR__5253
312f9     63 76 2E    | 	byte	"cv."
312fc     00          | 	byte	0
312fd                 | LR__5254
312fd     63 68 61 6E 
31301     67 65 77 61 
31305     76 65       | 	byte	"changewave"
31307     00          | 	byte	0
31308                 | LR__5255
31308     63 77 2E    | 	byte	"cw."
3130b     00          | 	byte	0
3130c                 | LR__5256
3130c     63 69 72 63 
31310     6C 65       | 	byte	"circle"
31312     00          | 	byte	0
31313                 | LR__5257
31313     63 69 2E    | 	byte	"ci."
31316     00          | 	byte	0
31317                 | LR__5258
31317     63 6C 69 63 
3131b     6B          | 	byte	"click"
3131c     00          | 	byte	0
3131d                 | LR__5259
3131d     63 6C 6F 73 
31321     65          | 	byte	"close"
31322     00          | 	byte	0
31323                 | LR__5260
31323     63 6C 73    | 	byte	"cls"
31326     00          | 	byte	0
31327                 | LR__5261
31327     63 6F 6C 6F 
3132b     72          | 	byte	"color"
3132c     00          | 	byte	0
3132d                 | LR__5262
3132d     63 2E       | 	byte	"c."
3132f     00          | 	byte	0
31330                 | LR__5263
31330     63 73 61 76 
31334     65          | 	byte	"csave"
31335     00          | 	byte	0
31336                 | LR__5264
31336     63 73 2E    | 	byte	"cs."
31339     00          | 	byte	0
3133a                 | LR__5265
3133a     63 75 72 73 
3133e     6F 72       | 	byte	"cursor"
31340     00          | 	byte	0
31341                 | LR__5266
31341     64 65 66 73 
31345     6E 64       | 	byte	"defsnd"
31347     00          | 	byte	0
31348                 | LR__5267
31348     64 65 66 65 
3134c     6E 76       | 	byte	"defenv"
3134e     00          | 	byte	0
3134f                 | LR__5268
3134f     64 65 66 73 
31353     70 72 69 74 
31357     65          | 	byte	"defsprite"
31358     00          | 	byte	0
31359                 | LR__5269
31359     64 73 2E    | 	byte	"ds."
3135c     00          | 	byte	0
3135d                 | LR__5270
3135d     64 65 67    | 	byte	"deg"
31360     00          | 	byte	0
31361                 | LR__5271
31361     64 65 6C 65 
31365     74 65       | 	byte	"delete"
31367     00          | 	byte	0
31368                 | LR__5272
31368     64 69 6D    | 	byte	"dim"
3136b     00          | 	byte	0
3136c                 | LR__5273
3136c     64 69 72    | 	byte	"dir"
3136f     00          | 	byte	0
31370                 | LR__5274
31370     64 70 6F 6B 
31374     65          | 	byte	"dpoke"
31375     00          | 	byte	0
31376                 | LR__5275
31376     64 72 61 77 | 	byte	"draw"
3137a     00          | 	byte	0
3137b                 | LR__5276
3137b     64 72 2E    | 	byte	"dr."
3137e     00          | 	byte	0
3137f                 | LR__5277
3137f     65 6C 73 65 | 	byte	"else"
31383     00          | 	byte	0
31384                 | LR__5278
31384     65 6E 64    | 	byte	"end"
31387     00          | 	byte	0
31388                 | LR__5279
31388     65 6E 74 65 
3138c     72          | 	byte	"enter"
3138d     00          | 	byte	0
3138e                 | LR__5280
3138e     65 2E       | 	byte	"e."
31390     00          | 	byte	0
31391                 | LR__5281
31391     66 63 69 72 
31395     63 6C 65    | 	byte	"fcircle"
31398     00          | 	byte	0
31399                 | LR__5282
31399     66 63 2E    | 	byte	"fc."
3139c     00          | 	byte	0
3139d                 | LR__5283
3139d     66 69 6C 6C | 	byte	"fill"
313a1     00          | 	byte	0
313a2                 | LR__5284
313a2     66 69 2E    | 	byte	"fi."
313a5     00          | 	byte	0
313a6                 | LR__5285
313a6     66 6F 6E 74 | 	byte	"font"
313aa     00          | 	byte	0
313ab                 | LR__5286
313ab     66 6F 72    | 	byte	"for"
313ae     00          | 	byte	0
313af                 | LR__5287
313af     66 2E       | 	byte	"f."
313b1     00          | 	byte	0
313b2                 | LR__5288
313b2     66 72 61 6D 
313b6     65          | 	byte	"frame"
313b7     00          | 	byte	0
313b8                 | LR__5289
313b8     66 72 2E    | 	byte	"fr."
313bb     00          | 	byte	0
313bc                 | LR__5290
313bc     67 65 74    | 	byte	"get"
313bf     00          | 	byte	0
313c0                 | LR__5291
313c0     67 6F 73 75 
313c4     62          | 	byte	"gosub"
313c5     00          | 	byte	0
313c6                 | LR__5292
313c6     67 6F 74 6F | 	byte	"goto"
313ca     00          | 	byte	0
313cb                 | LR__5293
313cb     67 2E       | 	byte	"g."
313cd     00          | 	byte	0
313ce                 | LR__5294
313ce     69 66       | 	byte	"if"
313d0     00          | 	byte	0
313d1                 | LR__5295
313d1     69 6E 6B    | 	byte	"ink"
313d4     00          | 	byte	0
313d5                 | LR__5296
313d5     69 2E       | 	byte	"i."
313d7     00          | 	byte	0
313d8                 | LR__5297
313d8     6C 69 73 74 | 	byte	"list"
313dc     00          | 	byte	0
313dd                 | LR__5298
313dd     6C 2E       | 	byte	"l."
313df     00          | 	byte	0
313e0                 | LR__5299
313e0     6C 6F 61 64 | 	byte	"load"
313e4     00          | 	byte	0
313e5                 | LR__5300
313e5     6C 6F 2E    | 	byte	"lo."
313e8     00          | 	byte	0
313e9                 | LR__5301
313e9     6C 70 6F 6B 
313ed     65          | 	byte	"lpoke"
313ee     00          | 	byte	0
313ef                 | LR__5302
313ef     6D 6B 64 69 
313f3     72          | 	byte	"mkdir"
313f4     00          | 	byte	0
313f5                 | LR__5303
313f5     6D 6F 64 65 | 	byte	"mode"
313f9     00          | 	byte	0
313fa                 | LR__5304
313fa     6D 2E       | 	byte	"m."
313fc     00          | 	byte	0
313fd                 | LR__5305
313fd     6D 6F 75 73 
31401     65          | 	byte	"mouse"
31402     00          | 	byte	0
31403                 | LR__5306
31403     6E 65 77    | 	byte	"new"
31406     00          | 	byte	0
31407                 | LR__5307
31407     6E 65 78 74 | 	byte	"next"
3140b     00          | 	byte	0
3140c                 | LR__5308
3140c     6E 2E       | 	byte	"n."
3140e     00          | 	byte	0
3140f                 | LR__5309
3140f     6F 70 65 6E | 	byte	"open"
31413     00          | 	byte	0
31414                 | LR__5310
31414     70 61 70 65 
31418     72          | 	byte	"paper"
31419     00          | 	byte	0
3141a                 | LR__5311
3141a     70 61 2E    | 	byte	"pa."
3141d     00          | 	byte	0
3141e                 | LR__5312
3141e     70 69 6E 66 
31422     6C 6F 61 74 | 	byte	"pinfloat"
31426     00          | 	byte	0
31427                 | LR__5313
31427     70 69 6E 68 
3142b     69          | 	byte	"pinhi"
3142c     00          | 	byte	0
3142d                 | LR__5314
3142d     70 69 6E 6C 
31431     6F          | 	byte	"pinlo"
31432     00          | 	byte	0
31433                 | LR__5315
31433     70 69 6E 73 
31437     74 61 72 74 | 	byte	"pinstart"
3143b     00          | 	byte	0
3143c                 | LR__5316
3143c     70 69 6E 74 
31440     6F 67 67 6C 
31444     65          | 	byte	"pintoggle"
31445     00          | 	byte	0
31446                 | LR__5317
31446     70 69 6E 77 
3144a     72 69 74 65 | 	byte	"pinwrite"
3144e     00          | 	byte	0
3144f                 | LR__5318
3144f     70 6C 61 79 | 	byte	"play"
31453     00          | 	byte	0
31454                 | LR__5319
31454     70 2E       | 	byte	"p."
31456     00          | 	byte	0
31457                 | LR__5320
31457     70 6C 6F 74 | 	byte	"plot"
3145b     00          | 	byte	0
3145c                 | LR__5321
3145c     70 6C 2E    | 	byte	"pl."
3145f     00          | 	byte	0
31460                 | LR__5322
31460     70 6F 6B 65 | 	byte	"poke"
31464     00          | 	byte	0
31465                 | LR__5323
31465     70 6F 70    | 	byte	"pop"
31468     00          | 	byte	0
31469                 | LR__5324
31469     70 6F 73 69 
3146d     74 69 6F 6E | 	byte	"position"
31471     00          | 	byte	0
31472                 | LR__5325
31472     70 6F 73 2E | 	byte	"pos."
31476     00          | 	byte	0
31477                 | LR__5326
31477     70 72 69 6E 
3147b     74          | 	byte	"print"
3147c     00          | 	byte	0
3147d                 | LR__5327
3147d     3F          | 	byte	"?"
3147e     00          | 	byte	0
3147f                 | LR__5328
3147f     70 75 74    | 	byte	"put"
31482     00          | 	byte	0
31483                 | LR__5329
31483     72 61 64    | 	byte	"rad"
31486     00          | 	byte	0
31487                 | LR__5330
31487     72 65 6C 65 
3148b     61 73 65    | 	byte	"release"
3148e     00          | 	byte	0
3148f                 | LR__5331
3148f     72 65 6D    | 	byte	"rem"
31492     00          | 	byte	0
31493                 | LR__5332
31493     27          | 	byte	"'"
31494     00          | 	byte	0
31495                 | LR__5333
31495     72 65 74 75 
31499     72 6E       | 	byte	"return"
3149b     00          | 	byte	0
3149c                 | LR__5334
3149c     72 75 6E    | 	byte	"run"
3149f     00          | 	byte	0
314a0                 | LR__5335
314a0     73 61 76 65 | 	byte	"save"
314a4     00          | 	byte	0
314a5                 | LR__5336
314a5     73 2E       | 	byte	"s."
314a7     00          | 	byte	0
314a8                 | LR__5337
314a8     73 65 74 64 
314ac     65 6C 61 79 | 	byte	"setdelay"
314b0     00          | 	byte	0
314b1                 | LR__5338
314b1     73 64 2E    | 	byte	"sd."
314b4     00          | 	byte	0
314b5                 | LR__5339
314b5     73 65 74 65 
314b9     6E 76       | 	byte	"setenv"
314bb     00          | 	byte	0
314bc                 | LR__5340
314bc     73 65 2E    | 	byte	"se."
314bf     00          | 	byte	0
314c0                 | LR__5341
314c0     73 65 74 6C 
314c4     65 6E       | 	byte	"setlen"
314c6     00          | 	byte	0
314c7                 | LR__5342
314c7     73 6C 2E    | 	byte	"sl."
314ca     00          | 	byte	0
314cb                 | LR__5343
314cb     73 65 74 70 
314cf     61 6E       | 	byte	"setpan"
314d1     00          | 	byte	0
314d2                 | LR__5344
314d2     73 70       | 	byte	"sp"
314d4     00          | 	byte	0
314d5                 | LR__5345
314d5     73 65 74 73 
314d9     75 73 74 61 
314dd     69 6E       | 	byte	"setsustain"
314df     00          | 	byte	0
314e0                 | LR__5346
314e0     73 73 2E    | 	byte	"ss."
314e3     00          | 	byte	0
314e4                 | LR__5347
314e4     73 65 74 76 
314e8     6F 6C       | 	byte	"setvol"
314ea     00          | 	byte	0
314eb                 | LR__5348
314eb     73 76 2E    | 	byte	"sv."
314ee     00          | 	byte	0
314ef                 | LR__5349
314ef     73 65 74 77 
314f3     61 76 65    | 	byte	"setwave"
314f6     00          | 	byte	0
314f7                 | LR__5350
314f7     73 77 2E    | 	byte	"sw."
314fa     00          | 	byte	0
314fb                 | LR__5351
314fb     73 65 74 77 
314ff     61 76       | 	byte	"setwav"
31501     00          | 	byte	0
31502                 | LR__5352
31502     73 68 75 74 
31506     75 70       | 	byte	"shutup"
31508     00          | 	byte	0
31509                 | LR__5353
31509     73 68 2E    | 	byte	"sh."
3150c     00          | 	byte	0
3150d                 | LR__5354
3150d     73 6F 75 6E 
31511     64          | 	byte	"sound"
31512     00          | 	byte	0
31513                 | LR__5355
31513     73 6F 2E    | 	byte	"so."
31516     00          | 	byte	0
31517                 | LR__5356
31517     73 70 72 69 
3151b     74 65       | 	byte	"sprite"
3151d     00          | 	byte	0
3151e                 | LR__5357
3151e     73 70 72 2E | 	byte	"spr."
31522     00          | 	byte	0
31523                 | LR__5358
31523     74 68 65 6E | 	byte	"then"
31527     00          | 	byte	0
31528                 | LR__5359
31528     77 61 69 74 
3152c     6D 73       | 	byte	"waitms"
3152e     00          | 	byte	0
3152f                 | LR__5360
3152f     77 2E       | 	byte	"w."
31531     00          | 	byte	0
31532                 | LR__5361
31532     77 61 69 74 
31536     63 6C 6F 63 
3153a     6B          | 	byte	"waitclock"
3153b     00          | 	byte	0
3153c                 | LR__5362
3153c     77 63 2E    | 	byte	"wc."
3153f     00          | 	byte	0
31540                 | LR__5363
31540     77 61 69 74 
31544     76 62 6C    | 	byte	"waitvbl"
31547     00          | 	byte	0
31548                 | LR__5364
31548     77 76 2E    | 	byte	"wv."
3154b     00          | 	byte	0
3154c                 | LR__5365
3154c     77 78 70 69 
31550     6E          | 	byte	"wxpin"
31551     00          | 	byte	0
31552                 | LR__5366
31552     77 79 70 69 
31556     6E          | 	byte	"wypin"
31557     00          | 	byte	0
31558                 | LR__5367
31558     61 62 73    | 	byte	"abs"
3155b     00          | 	byte	0
3155c                 | LR__5368
3155c     61 63 6F 73 | 	byte	"acos"
31560     00          | 	byte	0
31561                 | LR__5369
31561     61 64 72    | 	byte	"adr"
31564     00          | 	byte	0
31565                 | LR__5370
31565     61 64 64 72 | 	byte	"addr"
31569     00          | 	byte	0
3156a                 | LR__5371
3156a     61 73 63    | 	byte	"asc"
3156d     00          | 	byte	0
3156e                 | LR__5372
3156e     61 73 69 6E | 	byte	"asin"
31572     00          | 	byte	0
31573                 | LR__5373
31573     61 74 6E    | 	byte	"atn"
31576     00          | 	byte	0
31577                 | LR__5374
31577     62 69 6E 24 | 	byte	"bin$"
3157b     00          | 	byte	0
3157c                 | LR__5375
3157c     63 68 72 24 | 	byte	"chr$"
31580     00          | 	byte	0
31581                 | LR__5376
31581     63 6F 73    | 	byte	"cos"
31584     00          | 	byte	0
31585                 | LR__5377
31585     64 70 65 65 
31589     6B          | 	byte	"dpeek"
3158a     00          | 	byte	0
3158b                 | LR__5378
3158b     66 72 65    | 	byte	"fre"
3158e     00          | 	byte	0
3158f                 | LR__5379
3158f     67 65 74 70 
31593     69 78 65 6C | 	byte	"getpixel"
31597     00          | 	byte	0
31598                 | LR__5380
31598     67 65 2E    | 	byte	"ge."
3159b     00          | 	byte	0
3159c                 | LR__5381
3159c     67 65 74 65 
315a0     6E 76 73 75 
315a4     73 74 61 69 
315a8     6E          | 	byte	"getenvsustain"
315a9     00          | 	byte	0
315aa                 | LR__5382
315aa     67 65 74 6E 
315ae     6F 74 65 76 
315b2     61 6C 75 65 | 	byte	"getnotevalue"
315b6     00          | 	byte	0
315b7                 | LR__5383
315b7     67 65 74 74 
315bb     69 6D 65    | 	byte	"gettime"
315be     00          | 	byte	0
315bf                 | LR__5384
315bf     68 65 78 24 | 	byte	"hex$"
315c3     00          | 	byte	0
315c4                 | LR__5385
315c4     69 6E 6B 65 
315c8     79 24       | 	byte	"inkey$"
315ca     00          | 	byte	0
315cb                 | LR__5386
315cb     69 6E 74    | 	byte	"int"
315ce     00          | 	byte	0
315cf                 | LR__5387
315cf     6C 65 66 74 
315d3     24          | 	byte	"left$"
315d4     00          | 	byte	0
315d5                 | LR__5388
315d5     6C 65 6E    | 	byte	"len"
315d8     00          | 	byte	0
315d9                 | LR__5389
315d9     6C 6F 67    | 	byte	"log"
315dc     00          | 	byte	0
315dd                 | LR__5390
315dd     6C 70 65 65 
315e1     6B          | 	byte	"lpeek"
315e2     00          | 	byte	0
315e3                 | LR__5391
315e3     6D 69 64 24 | 	byte	"mid$"
315e7     00          | 	byte	0
315e8                 | LR__5392
315e8     6D 6F 75 73 
315ec     65 6B       | 	byte	"mousek"
315ee     00          | 	byte	0
315ef                 | LR__5393
315ef     6D 6F 75 73 
315f3     65 77       | 	byte	"mousew"
315f5     00          | 	byte	0
315f6                 | LR__5394
315f6     6D 6F 75 73 
315fa     65 78       | 	byte	"mousex"
315fc     00          | 	byte	0
315fd                 | LR__5395
315fd     6D 6F 75 73 
31601     65 79       | 	byte	"mousey"
31603     00          | 	byte	0
31604                 | LR__5396
31604     70 65 65 6B | 	byte	"peek"
31608     00          | 	byte	0
31609                 | LR__5397
31609     70 69 6E 72 
3160d     65 61 64    | 	byte	"pinread"
31610     00          | 	byte	0
31611                 | LR__5398
31611     72 64 70 69 
31615     6E          | 	byte	"rdpin"
31616     00          | 	byte	0
31617                 | LR__5399
31617     72 69 67 68 
3161b     74 24       | 	byte	"right$"
3161d     00          | 	byte	0
3161e                 | LR__5400
3161e     72 71 70 69 
31622     6E          | 	byte	"rqpin"
31623     00          | 	byte	0
31624                 | LR__5401
31624     72 6F 75 6E 
31628     64          | 	byte	"round"
31629     00          | 	byte	0
3162a                 | LR__5402
3162a     72 6E 64    | 	byte	"rnd"
3162d     00          | 	byte	0
3162e                 | LR__5403
3162e     73 69 6E    | 	byte	"sin"
31631     00          | 	byte	0
31632                 | LR__5404
31632     73 71 72    | 	byte	"sqr"
31635     00          | 	byte	0
31636                 | LR__5405
31636     73 74 69 63 
3163a     6B          | 	byte	"stick"
3163b     00          | 	byte	0
3163c                 | LR__5406
3163c     73 74 72 69 
31640     67          | 	byte	"strig"
31641     00          | 	byte	0
31642                 | LR__5407
31642     73 74 72 24 | 	byte	"str$"
31646     00          | 	byte	0
31647                 | LR__5408
31647     74 61 6E    | 	byte	"tan"
3164a     00          | 	byte	0
3164b                 | LR__5409
3164b     76 61 6C    | 	byte	"val"
3164e     00          | 	byte	0
3164f                 | LR__5410
3164f     76 61 72 70 
31653     74 72       | 	byte	"varptr"
31655     00          | 	byte	0
31656                 | LR__5411
31656     61          | 	byte	"a"
31657     00          | 	byte	0
31658                 | LR__5412
31658     7A          | 	byte	"z"
31659     00          | 	byte	0
3165a                 | LR__5413
3165a     5F          | 	byte	"_"
3165b     00          | 	byte	0
3165c                 | LR__5414
3165c     61          | 	byte	"a"
3165d     00          | 	byte	0
3165e                 | LR__5415
3165e     7A          | 	byte	"z"
3165f     00          | 	byte	0
31660                 | LR__5416
31660     30          | 	byte	"0"
31661     00          | 	byte	0
31662                 | LR__5417
31662     39          | 	byte	"9"
31663     00          | 	byte	0
31664                 | LR__5418
31664     5F          | 	byte	"_"
31665     00          | 	byte	0
31666                 | LR__5419
31666     2E          | 	byte	"."
31667     00          | 	byte	0
31668                 | LR__5420
31668     61          | 	byte	"a"
31669     00          | 	byte	0
3166a                 | LR__5421
3166a     7A          | 	byte	"z"
3166b     00          | 	byte	0
3166c                 | LR__5422
3166c     30          | 	byte	"0"
3166d     00          | 	byte	0
3166e                 | LR__5423
3166e     39          | 	byte	"9"
3166f     00          | 	byte	0
31670                 | LR__5424
31670     5F          | 	byte	"_"
31671     00          | 	byte	0
31672                 | LR__5425
31672     24          | 	byte	"$"
31673     00          | 	byte	0
31674                 | LR__5426
31674     25          | 	byte	"%"
31675     00          | 	byte	0
31676                 | LR__5427
31676     21          | 	byte	"!"
31677     00          | 	byte	0
31678                 | LR__5428
31678     30          | 	byte	"0"
31679     00          | 	byte	0
3167a                 | LR__5429
3167a     39          | 	byte	"9"
3167b     00          | 	byte	0
3167c                 | LR__5430
3167c     2E          | 	byte	"."
3167d     00          | 	byte	0
3167e                 | LR__5431
3167e     24          | 	byte	"$"
3167f     00          | 	byte	0
31680                 | LR__5432
31680     25          | 	byte	"%"
31681     00          | 	byte	0
31682                 | LR__5433
31682     2D          | 	byte	"-"
31683     00          | 	byte	0
31684                 | LR__5434
31684     2E          | 	byte	"."
31685     00          | 	byte	0
31686                 | LR__5435
31686     24          | 	byte	"$"
31687     00          | 	byte	0
31688                 | LR__5436
31688     25          | 	byte	"%"
31689     00          | 	byte	0
3168a                 | LR__5437
3168a     30          | 	byte	"0"
3168b     00          | 	byte	0
3168c                 | LR__5438
3168c     39          | 	byte	"9"
3168d     00          | 	byte	0
3168e                 | LR__5439
3168e     5F          | 	byte	"_"
3168f     00          | 	byte	0
31690                 | LR__5440
31690     2E          | 	byte	"."
31691     00          | 	byte	0
31692                 | LR__5441
31692     45          | 	byte	"E"
31693     00          | 	byte	0
31694                 | LR__5442
31694     65          | 	byte	"e"
31695     00          | 	byte	0
31696                 | LR__5443
31696     2D          | 	byte	"-"
31697     00          | 	byte	0
31698                 | LR__5444
31698     61          | 	byte	"a"
31699     00          | 	byte	0
3169a                 | LR__5445
3169a     66          | 	byte	"f"
3169b     00          | 	byte	0
3169c                 | LR__5446
3169c     30          | 	byte	"0"
3169d     00          | 	byte	0
3169e                 | LR__5447
3169e     31          | 	byte	"1"
3169f     00          | 	byte	0
316a0                 | LR__5448
316a0     5F          | 	byte	"_"
316a1     00          | 	byte	0
316a2                 | LR__5449
316a2     2D          | 	byte	"-"
316a3     00          | 	byte	0
316a4                 | LR__5450
316a4     65          | 	byte	"e"
316a5     00          | 	byte	0
316a6                 | LR__5451
316a6     2E          | 	byte	"."
316a7     00          | 	byte	0
316a8                 | LR__5452
316a8     45          | 	byte	"E"
316a9     00          | 	byte	0
316aa                 | LR__5453
316aa     65          | 	byte	"e"
316ab     00          | 	byte	0
316ac                 | LR__5454
316ac     30          | 	byte	"0"
316ad     00          | 	byte	0
316ae                 | LR__5455
316ae     39          | 	byte	"9"
316af     00          | 	byte	0
316b0                 | LR__5456
316b0     24          | 	byte	"$"
316b1     00          | 	byte	0
316b2                 | LR__5457
316b2     25          | 	byte	"%"
316b3     00          | 	byte	0
316b4                 | LR__5458
316b4     2D          | 	byte	"-"
316b5     00          | 	byte	0
316b6                 | LR__5459
316b6     24          | 	byte	"$"
316b7     00          | 	byte	0
316b8                 | LR__5460
316b8     25          | 	byte	"%"
316b9     00          | 	byte	0
316ba                 | LR__5461
316ba     30          | 	byte	"0"
316bb     00          | 	byte	0
316bc                 | LR__5462
316bc     39          | 	byte	"9"
316bd     00          | 	byte	0
316be                 | LR__5463
316be     5F          | 	byte	"_"
316bf     00          | 	byte	0
316c0                 | LR__5464
316c0     30          | 	byte	"0"
316c1     00          | 	byte	0
316c2                 | LR__5465
316c2     39          | 	byte	"9"
316c3     00          | 	byte	0
316c4                 | LR__5466
316c4     61          | 	byte	"a"
316c5     00          | 	byte	0
316c6                 | LR__5467
316c6     66          | 	byte	"f"
316c7     00          | 	byte	0
316c8                 | LR__5468
316c8     5F          | 	byte	"_"
316c9     00          | 	byte	0
316ca                 | LR__5469
316ca     30          | 	byte	"0"
316cb     00          | 	byte	0
316cc                 | LR__5470
316cc     31          | 	byte	"1"
316cd     00          | 	byte	0
316ce                 | LR__5471
316ce     5F          | 	byte	"_"
316cf     00          | 	byte	0
316d0                 | LR__5472
316d0     30          | 	byte	"0"
316d1     00          | 	byte	0
316d2                 | LR__5473
316d2     39          | 	byte	"9"
316d3     00          | 	byte	0
316d4                 | LR__5474
316d4     5F          | 	byte	"_"
316d5     00          | 	byte	0
316d6                 | LR__5475
316d6     22          | 	byte	34
316d7     00          | 	byte	0
316d8                 | LR__5476
316d8     22          | 	byte	34
316d9     00          | 	byte	0
316da                 | LR__5477
316da     44 69 6D 3A 
316de     20 61 74 20 
316e2     6C 69 6E 65 
316e6     20          | 	byte	"Dim: at line "
316e7     00          | 	byte	0
316e8                 | LR__5478
316e8     3A 20 77 61 
316ec     72 6E 69 6E 
316f0     67 3A 20 74 
316f4     68 65 20 76 
316f8     61 72 69 61 
316fc     62 6C 65 20 
31700     65 78 69 73 
31704     74 65 64 2E | 	byte	": warning: the variable existed."
31708     00          | 	byte	0
31709                 | LR__5479
31709     28          | 	byte	"("
3170a     00          | 	byte	0
3170b                 | LR__5480
3170b     61 73       | 	byte	"as"
3170d     00          | 	byte	0
3170e                 | LR__5481
3170e     61 73       | 	byte	"as"
31710     00          | 	byte	0
31711                 | LR__5482
31711     2C          | 	byte	","
31712     00          | 	byte	0
31713                 | LR__5483
31713     29          | 	byte	")"
31714     00          | 	byte	0
31715                 | LR__5484
31715     29          | 	byte	")"
31716     00          | 	byte	0
31717                 | LR__5485
31717     61 73       | 	byte	"as"
31719     00          | 	byte	0
3171a                 | LR__5486
3171a     62 79 74 65 | 	byte	"byte"
3171e     00          | 	byte	0
3171f                 | LR__5487
3171f     75 62 79 74 
31723     65          | 	byte	"ubyte"
31724     00          | 	byte	0
31725                 | LR__5488
31725     73 68 6F 72 
31729     74          | 	byte	"short"
3172a     00          | 	byte	0
3172b                 | LR__5489
3172b     75 73 68 6F 
3172f     72 74       | 	byte	"ushort"
31731     00          | 	byte	0
31732                 | LR__5490
31732     6C 6F 6E 67 | 	byte	"long"
31736     00          | 	byte	0
31737                 | LR__5491
31737     69 6E 74 65 
3173b     67 65 72    | 	byte	"integer"
3173e     00          | 	byte	0
3173f                 | LR__5492
3173f     75 6C 6F 6E 
31743     67          | 	byte	"ulong"
31744     00          | 	byte	0
31745                 | LR__5493
31745     69 6E 74 36 
31749     34          | 	byte	"int64"
3174a     00          | 	byte	0
3174b                 | LR__5494
3174b     75 69 6E 74 
3174f     36 34       | 	byte	"uint64"
31751     00          | 	byte	0
31752                 | LR__5495
31752     73 69 6E 67 
31756     6C 65       | 	byte	"single"
31758     00          | 	byte	0
31759                 | LR__5496
31759     64 6F 75 62 
3175d     6C 65       | 	byte	"double"
3175f     00          | 	byte	0
31760                 | LR__5497
31760     73 74 72 69 
31764     6E 67       | 	byte	"string"
31766     00          | 	byte	0
31767                 | LR__5498
31767     74 6F       | 	byte	"to"
31769     00          | 	byte	0
3176a                 | LR__5499
3176a     73 74 65 70 | 	byte	"step"
3176e     00          | 	byte	0
3176f                 | LR__5500
3176f     73 2E       | 	byte	"s."
31771     00          | 	byte	0
31772                 | LR__5501
31772     24          | 	byte	"$"
31773     00          | 	byte	0
31774                 | LR__5502
31774     26 68       | 	byte	"&h"
31776     00          | 	byte	0
31777                 | LR__5503
31777     25          | 	byte	"%"
31778     00          | 	byte	0
31779                 | LR__5504
31779     26 62       | 	byte	"&b"
3177b     00          | 	byte	0
3177c                 | LR__5505
3177c                 | 	byte	
3177c     00          | 	byte	0
3177d                 | LR__5506
3177d     61 63 6F 73 
31781     3A 20       | 	byte	"acos: "
31783     00          | 	byte	0
31784                 | LR__5507
31784     61 73 63 3A 
31788     20          | 	byte	"asc: "
31789     00          | 	byte	0
3178a                 | LR__5508
3178a     61 73 63 3A 
3178e     20          | 	byte	"asc: "
3178f     00          | 	byte	0
31790                 | LR__5509
31790     61 73 69 6E 
31794     3A 20       | 	byte	"asin: "
31796     00          | 	byte	0
31797                 | LR__5510
31797     61 74 6E 3A 
3179b     20          | 	byte	"atn: "
3179c     00          | 	byte	0
3179d                 | LR__5511
3179d     62 69 6E 24 
317a1     3A 20       | 	byte	"bin$: "
317a3     00          | 	byte	0
317a4                 | LR__5512
317a4     2F          | 	byte	"/"
317a5     00          | 	byte	0
317a6                 | LR__5513
317a6     2F 73 64 2F 
317aa     62 69 6E 2F | 	byte	"/sd/bin/"
317ae     00          | 	byte	0
317af                 | LR__5514
317af     53 79 73 74 
317b3     65 6D 20 65 
317b7     72 72 6F 72 
317bb     20          | 	byte	"System error "
317bc     00          | 	byte	0
317bd                 | LR__5515
317bd     3A 20       | 	byte	": "
317bf     00          | 	byte	0
317c0                 | LR__5516
317c0     2A          | 	byte	"*"
317c1     00          | 	byte	0
317c2                 | LR__5517
317c2     2E 2E       | 	byte	".."
317c4     00          | 	byte	0
317c5                 | LR__5518
317c5     2F          | 	byte	"/"
317c6     00          | 	byte	0
317c7                 | LR__5519
317c7     2F          | 	byte	"/"
317c8     00          | 	byte	0
317c9                 | LR__5520
317c9     53 79 73 74 
317cd     65 6D 20 65 
317d1     72 72 6F 72 
317d5     20          | 	byte	"System error "
317d6     00          | 	byte	0
317d7                 | LR__5521
317d7     3A 20       | 	byte	": "
317d9     00          | 	byte	0
317da                 | LR__5522
317da     43 75 72 72 
317de     65 6E 74 20 
317e2     64 69 72 65 
317e6     63 74 6F 72 
317ea     79 3A 20    | 	byte	"Current directory: "
317ed     00          | 	byte	0
317ee                 | LR__5523
317ee     2F          | 	byte	"/"
317ef     00          | 	byte	0
317f0                 | LR__5524
317f0     53 79 73 74 
317f4     65 6D 20 65 
317f8     72 72 6F 72 
317fc     20          | 	byte	"System error "
317fd     00          | 	byte	0
317fe                 | LR__5525
317fe     3A 20       | 	byte	": "
31800     00          | 	byte	0
31801                 | LR__5526
31801     43 75 72 72 
31805     65 6E 74 20 
31809     64 69 72 65 
3180d     63 74 6F 72 
31811     79 3A 20    | 	byte	"Current directory: "
31814     00          | 	byte	0
31815                 | LR__5527
31815     2F          | 	byte	"/"
31816     00          | 	byte	0
31817                 | LR__5528
31817     2F          | 	byte	"/"
31818     00          | 	byte	0
31819                 | LR__5529
31819     2F          | 	byte	"/"
3181a     00          | 	byte	0
3181b                 | LR__5530
3181b     53 79 73 74 
3181f     65 6D 20 65 
31823     72 72 6F 72 
31827     20          | 	byte	"System error "
31828     00          | 	byte	0
31829                 | LR__5531
31829     3A 20       | 	byte	": "
3182b     00          | 	byte	0
3182c                 | LR__5532
3182c     43 75 72 72 
31830     65 6E 74 20 
31834     64 69 72 65 
31838     63 74 6F 72 
3183c     79 3A 20    | 	byte	"Current directory: "
3183f     00          | 	byte	0
31840                 | LR__5533
31840     63 68 72 24 
31844     3A 20       | 	byte	"chr$: "
31846     00          | 	byte	0
31847                 | LR__5534
31847     63 68 61 6E 
3184b     6E 65 6C 23 
3184f     20 65 78 70 
31853     65 63 74 65 
31857     64          | 	byte	"channel# expected"
31858     00          | 	byte	0
31859                 | LR__5535
31859     63 6F 73 3A 
3185d     20          | 	byte	"cos: "
3185e     00          | 	byte	0
3185f                 | LR__5536
3185f                 | 	byte	
3185f     00          | 	byte	0
31860                 | LR__5537
31860                 | 	byte	
31860     00          | 	byte	0
31861                 | LR__5538
31861     2F 73 64 2F 
31865     6D 65 64 69 
31869     61 2F 68 2F | 	byte	"/sd/media/h/"
3186d     00          | 	byte	0
3186e                 | LR__5539
3186e     53 79 73 74 
31872     65 6D 20 65 
31876     72 72 6F 72 
3187a     20          | 	byte	"System error "
3187b     00          | 	byte	0
3187c                 | LR__5540
3187c     3A 20       | 	byte	": "
3187e     00          | 	byte	0
3187f                 | LR__5541
3187f                 | 	byte	
3187f     00          | 	byte	0
31880                 | LR__5542
31880                 | 	byte	
31880     00          | 	byte	0
31881                 | LR__5543
31881     2F 73 64 2F 
31885     6D 65 64 69 
31889     61 2F 73 2F | 	byte	"/sd/media/s/"
3188d     00          | 	byte	0
3188e                 | LR__5544
3188e     53 79 73 74 
31892     65 6D 20 65 
31896     72 72 6F 72 
3189a     20          | 	byte	"System error "
3189b     00          | 	byte	0
3189c                 | LR__5545
3189c     3A 20       | 	byte	": "
3189e     00          | 	byte	0
3189f                 | LR__5546
3189f     2F          | 	byte	"/"
318a0     00          | 	byte	0
318a1                 | LR__5547
318a1     2F          | 	byte	"/"
318a2     00          | 	byte	0
318a3                 | LR__5548
318a3     2F          | 	byte	"/"
318a4     00          | 	byte	0
318a5                 | LR__5549
318a5     43 61 6E 6E 
318a9     6F 74 20 64 
318ad     65 6C 65 74 
318b1     65 20 66 69 
318b5     6C 65 20 6F 
318b9     72 20 66 69 
318bd     6C 65 20 64 
318c1     6F 65 73 6E 
318c5     27 74 20 65 
318c9     78 69 73 74 
318cd     3A 20 73 79 
318d1     73 74 65 6D 
318d5     20 65 72 72 
318d9     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
318dc     00          | 	byte	0
318dd                 | LR__5550
318dd     43 75 72 72 
318e1     65 6E 74 20 
318e5     64 69 72 65 
318e9     63 74 6F 72 
318ed     79 3A 20    | 	byte	"Current directory: "
318f0     00          | 	byte	0
318f1                 | LR__5551
318f1                 | 	byte	
318f1     00          | 	byte	0
318f2                 | LR__5552
318f2     2A          | 	byte	"*"
318f3     00          | 	byte	0
318f4                 | LR__5553
318f4                 | 	byte	
318f4     00          | 	byte	0
318f5                 | LR__5554
318f5     5B 64 69 72 
318f9     5D 20       | 	byte	"[dir] "
318fb     00          | 	byte	0
318fc                 | LR__5555
318fc     4D 6F 72 65 
31900     20 74 68 61 
31904     6E 20 31 32 
31908     38 20 65 6E 
3190c     74 72 69 65 
31910     73 20 66 6F 
31914     75 6E 64 3A 
31918     20 63 6C 65 
3191c     61 6E 20 79 
31920     6F 75 72 20 
31924     64 69 72 65 
31928     63 74 6F 72 
3192c     79          | 	byte	"More than 128 entries found: clean your directory"
3192d     00          | 	byte	0
3192e                 | LR__5556
3192e     2A          | 	byte	"*"
3192f     00          | 	byte	0
31930                 | LR__5557
31930                 | 	byte	
31930     00          | 	byte	0
31931                 | LR__5558
31931     4D 6F 72 65 
31935     20 74 68 61 
31939     6E 20 31 32 
3193d     38 20 65 6E 
31941     74 72 69 65 
31945     73 20 66 6F 
31949     75 6E 64 3A 
3194d     20 63 6C 65 
31951     61 6E 20 79 
31955     6F 75 72 20 
31959     64 69 72 65 
3195d     63 74 6F 72 
31961     79          | 	byte	"More than 128 entries found: clean your directory"
31962     00          | 	byte	0
31963                 | LR__5559
31963     45 72 72 6F 
31967     72 20       | 	byte	"Error "
31969     00          | 	byte	0
3196a                 | LR__5560
3196a     3A 20       | 	byte	": "
3196c     00          | 	byte	0
3196d                 | LR__5561
3196d     67 65 74 65 
31971     6E 76 73 75 
31975     73 74 61 69 
31979     6E 3A 20    | 	byte	"getenvsustain: "
3197c     00          | 	byte	0
3197d                 | LR__5562
3197d     67 65 74 70 
31981     69 78 65 6C 
31985     3A 20       | 	byte	"getpixel: "
31987     00          | 	byte	0
31988                 | LR__5563
31988     68 65 78 24 
3198c     3A 20       | 	byte	"hex$: "
3198e     00          | 	byte	0
3198f                 | LR__5564
3198f                 | 	byte	
3198f     00          | 	byte	0
31990                 | LR__5565
31990     6C 65 66 74 
31994     24 3A 20    | 	byte	"left$: "
31997     00          | 	byte	0
31998                 | LR__5566
31998     6C 65 66 74 
3199c     24 3A 20    | 	byte	"left$: "
3199f     00          | 	byte	0
319a0                 | LR__5567
319a0     6C 65 6E 3A 
319a4     20          | 	byte	"len: "
319a5     00          | 	byte	0
319a6                 | LR__5568
319a6     6C 65 6E 3A 
319aa     20          | 	byte	"len: "
319ab     00          | 	byte	0
319ac                 | LR__5569
319ac                 | 	byte	
319ac     00          | 	byte	0
319ad                 | LR__5570
319ad     2F          | 	byte	"/"
319ae     00          | 	byte	0
319af                 | LR__5571
319af     2F          | 	byte	"/"
319b0     00          | 	byte	0
319b1                 | LR__5572
319b1     2E 62 61 73 | 	byte	".bas"
319b5     00          | 	byte	0
319b6                 | LR__5573
319b6     53 79 73 74 
319ba     65 6D 20 65 
319be     72 72 6F 72 
319c2     20          | 	byte	"System error "
319c3     00          | 	byte	0
319c4                 | LR__5574
319c4     3A 20       | 	byte	": "
319c6     00          | 	byte	0
319c7                 | LR__5575
319c7     2E 62 61 73 | 	byte	".bas"
319cb     00          | 	byte	0
319cc                 | LR__5576
319cc     2F          | 	byte	"/"
319cd     00          | 	byte	0
319ce                 | LR__5577
319ce                 | 	byte	
319ce     00          | 	byte	0
319cf                 | LR__5578
319cf     4C 6F 61 64 
319d3     65 64 20    | 	byte	"Loaded "
319d6     00          | 	byte	0
319d7                 | LR__5579
319d7     2F          | 	byte	"/"
319d8     00          | 	byte	0
319d9                 | LR__5580
319d9     6C 6F 67 3A 
319dd     20          | 	byte	"log: "
319de     00          | 	byte	0
319df                 | LR__5581
319df     6D 69 64 24 
319e3     3A 20       | 	byte	"mid$: "
319e5     00          | 	byte	0
319e6                 | LR__5582
319e6     6D 69 64 24 
319ea     3A 20       | 	byte	"mid$: "
319ec     00          | 	byte	0
319ed                 | LR__5583
319ed     43 61 6E 6E 
319f1     6F 74 20 63 
319f5     72 65 61 74 
319f9     65 20 61 20 
319fd     64 69 72 65 
31a01     63 74 6F 72 
31a05     79 3A 20 73 
31a09     79 73 74 65 
31a0d     6D 20 65 72 
31a11     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
31a15     00          | 	byte	0
31a16                 | LR__5584
31a16     20 42 41 53 
31a1a     49 43 20 62 
31a1e     79 74 65 73 
31a22     20 66 72 65 
31a26     65          | 	byte	" BASIC bytes free"
31a27     00          | 	byte	0
31a28                 | LR__5585
31a28                 | 	byte	
31a28     00          | 	byte	0
31a29                 | LR__5586
31a29                 | 	byte	
31a29     00          | 	byte	0
31a2a                 | LR__5587
31a2a     6E 6F 6E 61 
31a2e     6D 65 2E 62 
31a32     61 73       | 	byte	"noname.bas"
31a34     00          | 	byte	0
31a35                 | LR__5588
31a35     66 69 6C 65 
31a39     6E 61 6D 65 
31a3d     20 65 78 70 
31a41     65 63 74 65 
31a45     64          | 	byte	"filename expected"
31a46     00          | 	byte	0
31a47                 | LR__5589
31a47     72 65 61 64 | 	byte	"read"
31a4b     00          | 	byte	0
31a4c                 | LR__5590
31a4c     77 72 69 74 
31a50     65          | 	byte	"write"
31a51     00          | 	byte	0
31a52                 | LR__5591
31a52     61 70 70 65 
31a56     6E 64       | 	byte	"append"
31a58     00          | 	byte	0
31a59                 | LR__5592
31a59     63 68 61 6E 
31a5d     6E 65 6C 23 
31a61     20 65 78 70 
31a65     65 63 74 65 
31a69     64          | 	byte	"channel# expected"
31a6a     00          | 	byte	0
31a6b                 | LR__5593
31a6b     4F 70 65 6E 
31a6f     3A 20 69 6E 
31a73     76 61 6C 69 
31a77     64 20 6D 6F 
31a7b     64 65       | 	byte	"Open: invalid mode"
31a7d     00          | 	byte	0
31a7e                 | LR__5594
31a7e     50 72 69 6E 
31a82     74 20 74 6F 
31a86     20 63 68 61 
31a8a     6E 6E 65 6C 
31a8e     20 28 6E 6F 
31a92     74 20 79 65 
31a96     74 20 69 6D 
31a9a     70 6C 65 6D 
31a9e     65 6E 74 65 
31aa2     64 29       | 	byte	"Print to channel (not yet implemented)"
31aa4     00          | 	byte	0
31aa5                 | LR__5595
31aa5     72 69 67 68 
31aa9     74 24 3A 20 | 	byte	"right$: "
31aad     00          | 	byte	0
31aae                 | LR__5596
31aae     72 69 67 68 
31ab2     74 24 3A 20 | 	byte	"right$: "
31ab6     00          | 	byte	0
31ab7                 | LR__5597
31ab7     72 6E 64 3A 
31abb     20          | 	byte	"rnd: "
31abc     00          | 	byte	0
31abd                 | LR__5598
31abd     72 6E 64 3A 
31ac1     20          | 	byte	"rnd: "
31ac2     00          | 	byte	0
31ac3                 | LR__5599
31ac3     53 74 6F 70 
31ac7     70 65 64 20 
31acb     61 74 20 6C 
31acf     69 6E 65 20 | 	byte	"Stopped at line "
31ad3     00          | 	byte	0
31ad4                 | LR__5600
31ad4                 | 	byte	
31ad4     00          | 	byte	0
31ad5                 | LR__5601
31ad5     2F          | 	byte	"/"
31ad6     00          | 	byte	0
31ad7                 | LR__5602
31ad7                 | 	byte	
31ad7     00          | 	byte	0
31ad8                 | LR__5603
31ad8     53 61 76 65 
31adc     64 20 61 73 
31ae0     20          | 	byte	"Saved as "
31ae1     00          | 	byte	0
31ae2                 | LR__5604
31ae2     2F          | 	byte	"/"
31ae3     00          | 	byte	0
31ae4                 | LR__5605
31ae4     73 69 6E 3A 
31ae8     20          | 	byte	"sin: "
31ae9     00          | 	byte	0
31aea                 | LR__5606
31aea     73 71 72 3A 
31aee     20          | 	byte	"sqr: "
31aef     00          | 	byte	0
31af0                 | LR__5607
31af0     73 74 69 63 
31af4     6B 3A 20    | 	byte	"stick: "
31af7     00          | 	byte	0
31af8                 | LR__5608
31af8     73 74 72 69 
31afc     67 3A 20    | 	byte	"strig: "
31aff     00          | 	byte	0
31b00                 | LR__5609
31b00     74 61 6E 3A 
31b04     20          | 	byte	"tan: "
31b05     00          | 	byte	0
31b06                 | LR__5610
31b06     76 61 6C 3A 
31b0a     20          | 	byte	"val: "
31b0b     00          | 	byte	0
31b0c                 | LR__5611
31b0c     76 61 6C 3A 
31b10     20          | 	byte	"val: "
31b11     00          | 	byte	0
31b12                 | LR__5612
31b12     24          | 	byte	"$"
31b13     00          | 	byte	0
31b14                 | LR__5613
31b14     26 68       | 	byte	"&h"
31b16     00          | 	byte	0
31b17                 | LR__5614
31b17     25          | 	byte	"%"
31b18     00          | 	byte	0
31b19                 | LR__5615
31b19     26 62       | 	byte	"&b"
31b1b     00          | 	byte	0
31b1c                 | LR__5616
31b1c                 | 	byte	
31b1c     00          | 	byte	0
31b1d                 | LR__5617
31b1d     45 78 70 65 
31b21     63 74 65 64 
31b25     20 6E 75 6D 
31b29     62 65 72 2C 
31b2d     20 67 6F 74 
31b31     20 73 6F 6D 
31b35     65 74 68 69 
31b39     6E 67 20 65 
31b3d     6C 73 65    | 	byte	"Expected number, got something else"
31b40     00          | 	byte	0
31b41                 | LR__5618
31b41     43 61 6E 6E 
31b45     6F 74 20 61 
31b49     64 64 20 61 
31b4d     20 6E 75 6D 
31b51     62 65 72 20 
31b55     74 6F 20 61 
31b59     20 73 74 72 
31b5d     69 6E 67    | 	byte	"Cannot add a number to a string"
31b60     00          | 	byte	0
31b61                 | LR__5619
31b61     43 61 6E 6E 
31b65     6F 74 20 73 
31b69     75 62 73 74 
31b6d     72 61 63 74 
31b71     20 73 74 72 
31b75     69 6E 67 73 | 	byte	"Cannot substract strings"
31b79     00          | 	byte	0
31b7a                 | LR__5620
31b7a     55 6E 6B 6E 
31b7e     6F 77 6E 20 
31b82     65 72 72 6F 
31b86     72 20 77 68 
31b8a     69 6C 65 20 
31b8e     61 64 64 69 
31b92     6E 67       | 	byte	"Unknown error while adding"
31b94     00          | 	byte	0
31b95                 | LR__5621
31b95     55 6E 6B 6E 
31b99     6F 77 6E 20 
31b9d     65 72 72 6F 
31ba1     72 20 77 68 
31ba5     69 6C 65 20 
31ba9     73 75 62 73 
31bad     74 72 61 63 
31bb1     74 69 6E 67 | 	byte	"Unknown error while substracting"
31bb5     00          | 	byte	0
31bb6                 | LR__5622
31bb6     43 61 6E 6E 
31bba     6F 74 20 64 
31bbe     6F 20 6C 6F 
31bc2     67 69 63 20 
31bc6     6F 70 65 72 
31bca     61 74 69 6F 
31bce     6E 20 6F 6E 
31bd2     20 73 74 72 
31bd6     69 6E 67 20 
31bda     6F 72 20 66 
31bde     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
31be2     00          | 	byte	0
31be3                 | LR__5623
31be3     55 6E 6B 6E 
31be7     6F 77 6E 20 
31beb     65 72 72 6F 
31bef     72 20 77 68 
31bf3     69 6C 65 20 
31bf7     64 6F 69 6E 
31bfb     67 20 6C 6F 
31bff     67 69 63 20 
31c03     6F 70 65 72 
31c07     61 74 69 6F 
31c0b     6E          | 	byte	"Unknown error while doing logic operation"
31c0c     00          | 	byte	0
31c0d                 | LR__5624
31c0d     43 61 6E 6E 
31c11     6F 74 20 6D 
31c15     75 6C 74 69 
31c19     70 6C 79 20 
31c1d     73 74 72 69 
31c21     6E 67 73    | 	byte	"Cannot multiply strings"
31c24     00          | 	byte	0
31c25                 | LR__5625
31c25     55 6E 6B 6E 
31c29     6F 77 6E 20 
31c2d     65 72 72 6F 
31c31     72 20 77 68 
31c35     69 6C 65 20 
31c39     6D 75 6C 74 
31c3d     69 70 6C 79 
31c41     69 6E 67    | 	byte	"Unknown error while multiplying"
31c44     00          | 	byte	0
31c45                 | LR__5626
31c45     43 61 6E 6E 
31c49     6F 74 20 64 
31c4d     69 76 69 64 
31c51     65 20 73 74 
31c55     72 69 6E 67 
31c59     73          | 	byte	"Cannot divide strings"
31c5a     00          | 	byte	0
31c5b                 | LR__5627
31c5b     55 6E 6B 6E 
31c5f     6F 77 6E 20 
31c63     65 72 72 6F 
31c67     72 20 77 68 
31c6b     69 6C 65 20 
31c6f     64 69 76 69 
31c73     64 69 6E 67 | 	byte	"Unknown error while dividing"
31c77     00          | 	byte	0
31c78                 | LR__5628
31c78     43 61 6E 6E 
31c7c     6F 74 20 63 
31c80     6F 6D 70 75 
31c84     74 65 20 61 
31c88     20 70 6F 77 
31c8c     65 72 20 6F 
31c90     66 20 61 20 
31c94     73 74 72 69 
31c98     6E 67       | 	byte	"Cannot compute a power of a string"
31c9a     00          | 	byte	0
31c9b                 | LR__5629
31c9b     55 6E 6B 6E 
31c9f     6F 77 6E 20 
31ca3     65 72 72 6F 
31ca7     72 20 77 68 
31cab     69 6C 65 20 
31caf     63 6F 6D 70 
31cb3     75 74 69 6E 
31cb7     67 20 61 20 
31cbb     70 6F 77 65 
31cbf     72          | 	byte	"Unknown error while computing a power"
31cc0     00          | 	byte	0
31cc1                 | LR__5630
31cc1     52 69 67 68 
31cc5     74 20 70 61 
31cc9     72 65 6E 74 
31ccd     68 65 73 69 
31cd1     73 20 65 78 
31cd5     70 65 63 74 
31cd9     65 64       | 	byte	"Right parenthesis expected"
31cdb     00          | 	byte	0
31cdc                 | LR__5631
31cdc     45 78 70 65 
31ce0     63 74 65 64 
31ce4     20 73 74 72 
31ce8     69 6E 67    | 	byte	"Expected string"
31ceb     00          | 	byte	0
31cec                 | LR__5632
31cec     45 78 70 65 
31cf0     63 74 65 64 
31cf4     20 66 6C 6F 
31cf8     61 74       | 	byte	"Expected float"
31cfa     00          | 	byte	0
31cfb                 | LR__5633
31cfb     45 78 70 65 
31cff     63 74 65 64 
31d03     20 75 6E 73 
31d07     69 67 6E 65 
31d0b     64 20 69 6E 
31d0f     74 65 67 65 
31d13     72          | 	byte	"Expected unsigned integer"
31d14     00          | 	byte	0
31d15                 | LR__5634
31d15     45 78 70 65 
31d19     63 74 65 64 
31d1d     20 69 6E 74 
31d21     65 67 65 72 | 	byte	"Expected integer"
31d25     00          | 	byte	0
31d26                 | LR__5635
31d26     4E 6F 20 6D 
31d2a     6F 72 65 20 
31d2e     76 61 72 69 
31d32     61 62 6C 65 
31d36     20 73 6C 6F 
31d3a     74 73       | 	byte	"No more variable slots"
31d3c     00          | 	byte	0
31d3d                 | LR__5636
31d3d     56 61 72 69 
31d41     61 62 6C 65 
31d45     20 6E 6F 74 
31d49     20 66 6F 75 
31d4d     6E 64       | 	byte	"Variable not found"
31d4f     00          | 	byte	0
31d50                 | LR__5637
31d50     43 6F 6D 6D 
31d54     61 20 65 78 
31d58     70 65 63 74 
31d5c     65 64       | 	byte	"Comma expected"
31d5e     00          | 	byte	0
31d5f                 | LR__5638
31d5f     43 6F 6D 6D 
31d63     61 20 6F 72 
31d67     20 73 65 6D 
31d6b     69 63 6F 6C 
31d6f     6F 6E 20 65 
31d73     78 70 65 63 
31d77     74 65 64    | 	byte	"Comma or semicolon expected"
31d7a     00          | 	byte	0
31d7b                 | LR__5639
31d7b     55 6E 6B 6E 
31d7f     6F 77 6E 20 
31d83     63 6F 6D 6D 
31d87     61 6E 64    | 	byte	"Unknown command"
31d8a     00          | 	byte	0
31d8b                 | LR__5640
31d8b     53 74 61 63 
31d8f     6B 20 75 6E 
31d93     64 65 72 66 
31d97     6C 6F 77    | 	byte	"Stack underflow"
31d9a     00          | 	byte	0
31d9b                 | LR__5641
31d9b     43 61 6E 6E 
31d9f     6F 74 20 65 
31da3     78 65 63 75 
31da7     74 65 20 67 
31dab     6F 74 6F 20 
31daf     6F 72 20 67 
31db3     6F 73 75 62 
31db7     20 69 6E 20 
31dbb     74 68 65 20 
31dbf     69 6D 6D 65 
31dc3     64 69 61 74 
31dc7     65 20 6D 6F 
31dcb     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
31dcd     00          | 	byte	0
31dce                 | LR__5642
31dce     43 61 6E 6E 
31dd2     6F 74 20 6C 
31dd6     6F 61 64 20 
31dda     66 72 6F 6D 
31dde     20 74 68 69 
31de2     73 20 66 69 
31de6     6C 65       | 	byte	"Cannot load from this file"
31de8     00          | 	byte	0
31de9                 | LR__5643
31de9     54 68 65 20 
31ded     70 72 6F 67 
31df1     72 61 6D 20 
31df5     69 73 20 65 
31df9     6D 70 74 79 | 	byte	"The program is empty"
31dfd     00          | 	byte	0
31dfe                 | LR__5644
31dfe     49 66 20 61 
31e02     66 74 65 72 
31e06     20 69 66    | 	byte	"If after if"
31e09     00          | 	byte	0
31e0a                 | LR__5645
31e0a     45 6D 70 74 
31e0e     79 20 65 78 
31e12     70 72 65 73 
31e16     73 69 6F 6E | 	byte	"Empty expression"
31e1a     00          | 	byte	0
31e1b                 | LR__5646
31e1b     53 74 72 69 
31e1f     6E 67 20 65 
31e23     78 70 65 63 
31e27     74 65 64    | 	byte	"String expected"
31e2a     00          | 	byte	0
31e2b                 | LR__5647
31e2b     49 6E 74 65 
31e2f     72 70 72 65 
31e33     74 65 72 20 
31e37     69 6E 74 65 
31e3b     72 6E 61 6C 
31e3f     20 65 72 72 
31e43     6F 72       | 	byte	"Interpreter internal error"
31e45     00          | 	byte	0
31e46                 | LR__5648
31e46     45 78 70 65 
31e4a     63 74 65 64 
31e4e     20 61 73 73 
31e52     69 67 6E    | 	byte	"Expected assign"
31e55     00          | 	byte	0
31e56                 | LR__5649
31e56     45 78 70 65 
31e5a     63 74 65 64 
31e5e     20 27 74 6F 
31e62     27          | 	byte	"Expected 'to'"
31e63     00          | 	byte	0
31e64                 | LR__5650
31e64     45 78 70 65 
31e68     63 74 65 64 
31e6c     20 69 6E 74 
31e70     65 67 65 72 
31e74     20 76 61 72 
31e78     69 61 62 6C 
31e7c     65          | 	byte	"Expected integer variable"
31e7d     00          | 	byte	0
31e7e                 | LR__5651
31e7e     55 6E 69 6E 
31e82     69 74 69 61 
31e86     6C 69 7A 65 
31e8a     64 20 76 61 
31e8e     72 69 61 62 
31e92     6C 65 20 69 
31e96     6E 20 27 6E 
31e9a     65 78 74 27 
31e9e     2C 20 75 73 
31ea2     65 20 27 66 
31ea6     6F 72 27 20 
31eaa     62 65 66 6F 
31eae     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
31eb0     00          | 	byte	0
31eb1                 | LR__5652
31eb1     4E 6F 20 6D 
31eb5     6F 72 65 20 
31eb9     73 6C 6F 74 
31ebd     73 20 66 6F 
31ec1     72 20 27 66 
31ec5     6F 72 27    | 	byte	"No more slots for 'for'"
31ec8     00          | 	byte	0
31ec9                 | LR__5653
31ec9     27 4E 65 78 
31ecd     74 27 20 64 
31ed1     6F 65 73 6E 
31ed5     27 74 20 6D 
31ed9     61 74 63 68 
31edd     20 27 66 6F 
31ee1     72 27       | 	byte	"'Next' doesn't match 'for'"
31ee3     00          | 	byte	0
31ee4                 | LR__5654
31ee4     27 47 6F 74 
31ee8     6F 27 20 74 
31eec     61 72 67 65 
31ef0     74 20 6C 69 
31ef4     6E 65 20 6E 
31ef8     6F 74 20 66 
31efc     6F 75 6E 64 | 	byte	"'Goto' target line not found"
31f00     00          | 	byte	0
31f01                 | LR__5655
31f01     42 61 64 20 
31f05     6E 75 6D 62 
31f09     65 72 20 6F 
31f0d     66 20 70 61 
31f11     72 61 6D 65 
31f15     74 65 72 73 | 	byte	"Bad number of parameters"
31f19     00          | 	byte	0
31f1a                 | LR__5656
31f1a     46 75 6E 63 
31f1e     74 69 6F 6E 
31f22     20 75 6E 64 
31f26     65 66 69 6E 
31f2a     65 64 20 66 
31f2e     6F 72 20 73 
31f32     74 72 69 6E 
31f36     67 73       | 	byte	"Function undefined for strings"
31f38     00          | 	byte	0
31f39                 | LR__5657
31f39     42 61 64 20 
31f3d     70 61 72 61 
31f41     6D 65 74 65 
31f45     72          | 	byte	"Bad parameter"
31f46     00          | 	byte	0
31f47                 | LR__5658
31f47     43 61 6E 6E 
31f4b     6F 74 20 64 
31f4f     65 63 6C 61 
31f53     72 65 20 61 
31f57     6E 20 61 72 
31f5b     72 61 79 3A 
31f5f     20 74 68 65 
31f63     20 76 61 72 
31f67     69 61 62 6C 
31f6b     65 20 65 78 
31f6f     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
31f73     00          | 	byte	0
31f74                 | LR__5659
31f74     45 78 70 65 
31f78     63 74 65 64 
31f7c     20 27 28 27 | 	byte	"Expected '('"
31f80     00          | 	byte	0
31f81                 | LR__5660
31f81     45 78 70 65 
31f85     63 74 65 64 
31f89     20 27 29 27 
31f8d     20 6F 72 20 
31f91     27 2C 27    | 	byte	"Expected ')' or ','"
31f94     00          | 	byte	0
31f95                 | LR__5661
31f95     4E 6F 20 6D 
31f99     6F 72 65 20 
31f9d     74 68 61 6E 
31fa1     20 33 20 64 
31fa5     69 6D 65 6E 
31fa9     73 69 6F 6E 
31fad     73 20 73 75 
31fb1     70 70 6F 72 
31fb5     74 65 64    | 	byte	"No more than 3 dimensions supported"
31fb8     00          | 	byte	0
31fb9                 | LR__5662
31fb9     56 61 72 69 
31fbd     61 62 6C 65 
31fc1     20 6E 61 6D 
31fc5     65 20 65 78 
31fc9     70 65 63 74 
31fcd     65 64       | 	byte	"Variable name expected"
31fcf     00          | 	byte	0
31fd0                 | LR__5663
31fd0     54 79 70 65 
31fd4     20 6E 61 6D 
31fd8     65 20 65 78 
31fdc     70 65 63 74 
31fe0     65 64       | 	byte	"Type name expected"
31fe2     00          | 	byte	0
31fe3                 | LR__5664
31fe3     54 79 70 65 
31fe7     20 6E 6F 74 
31feb     20 73 75 70 
31fef     70 6F 72 74 
31ff3     65 64 20 79 
31ff7     65 74       | 	byte	"Type not supported yet"
31ff9     00          | 	byte	0
31ffa                 | LR__5665
31ffa     41 72 72 61 
31ffe     79 20 69 6E 
32002     64 65 78 20 
32006     6F 75 74 20 
3200a     6F 66 20 72 
3200e     61 6E 67 65 | 	byte	"Array index out of range"
32012     00          | 	byte	0
32013                 | LR__5666
32013     42 61 64 20 
32017     74 79 70 65 
3201b     20 77 68 69 
3201f     6C 65 20 61 
32023     73 73 69 67 
32027     6E 69 6E 67 
3202b     20 74 6F 20 
3202f     61 72 72 61 
32033     79          | 	byte	"Bad type while assigning to array"
32034     00          | 	byte	0
32035                 | LR__5667
32035     54 6F 6F 20 
32039     6D 61 6E 79 
3203d     20 76 61 72 
32041     69 61 62 6C 
32045     65 73       | 	byte	"Too many variables"
32047     00          | 	byte	0
32048                 | LR__5668
32048     27 54 68 65 
3204c     6E 27 20 65 
32050     78 70 65 63 
32054     74 65 64    | 	byte	"'Then' expected"
32057     00          | 	byte	0
32058                 | LR__5669
32058     44 69 72 65 
3205c     63 74 6F 72 
32060     79 20 64 6F 
32064     65 73 6E 27 
32068     74 20 65 78 
3206c     69 73 74    | 	byte	"Directory doesn't exist"
3206f     00          | 	byte	0
32070                 | LR__5670
32070     45 72 72 6F 
32074     72 20       | 	byte	"Error "
32076     00          | 	byte	0
32077                 | LR__5671
32077     3A 20       | 	byte	": "
32079     00          | 	byte	0
3207a                 | LR__5672
3207a     20 69 6E 20 
3207e     6C 69 6E 65 
32082     20          | 	byte	" in line "
32083     00          | 	byte	0
32084                 | LR__5673
32084     2F 73 64    | 	byte	"/sd"
32087     00          | 	byte	0
32088                 | LR__5674
32088     2F 73 64 2F 
3208c     62 61 73    | 	byte	"/sd/bas"
3208f     00          | 	byte	0
32090                 | LR__5675
32090     2F 73 64 2F 
32094     62 61 73    | 	byte	"/sd/bas"
32097     00          | 	byte	0
32098                 | LR__5676
32098     20 42 41 53 
3209c     49 43 20 62 
320a0     79 74 65 73 
320a4     20 66 72 65 
320a8     65          | 	byte	" BASIC bytes free"
320a9     00          | 	byte	0
320aa                 | LR__5677
320aa     52 65 61 64 
320ae     79          | 	byte	"Ready"
320af     00          | 	byte	0
320b0                 | LR__5678
320b0     6E 6F 6E 61 
320b4     6D 65 2E 62 
320b8     61 73       | 	byte	"noname.bas"
320ba     00          | 	byte	0
320bb                 | LR__5679
320bb                 | 	byte	
320bb     00          | 	byte	0
320bc                 | 	alignl
320bc                 | _dat_
320bc     00 00 00 00 
320c0     00 00 00 00 
320c4     00 00 00 00 
320c8     00 00 00 00 | 	byte	$00[16]
320cc     61 41 17 0E 
320d0     62 42 00 00 
320d4     63 43 19 10 
320d8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
320dc     65 45 18 0F 
320e0     66 46 00 00 
320e4     67 47 00 00 
320e8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
320ec     69 49 00 00 
320f0     6A 4A 00 00 
320f4     6B 4B 00 00 
320f8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
320fc     6D 4D 00 00 
32100     6E 4E 1A 11 
32104     6F 4F 1E 15 
32108     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3210c     71 51 00 00 
32110     72 52 00 00 
32114     73 53 1B 12 
32118     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3211c     75 55 00 00 
32120     76 56 00 00 
32124     77 57 00 00 
32128     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3212c     79 59 00 00 
32130     7A 5A 1D 14 
32134     31 21 04 00 
32138     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3213c     33 23 06 00 
32140     34 24 07 00 
32144     35 25 08 00 
32148     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3214c     37 26 0A 00 
32150     38 2A 0B 00 
32154     39 28 0C 00 
32158     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3215c     8D 8D 00 00 
32160     9B 9B 00 00 
32164     88 88 00 00 
32168     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3216c     20 20 00 00 
32170     2D 5F 00 00 
32174     3D 2B 00 00 
32178     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
3217c     5D 7D 00 00 
32180     5C 7C 00 00 
32184     23 7E 00 00 
32188     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
3218c     27 22 00 00 
32190     60 7E 03 00 
32194     2C 3C 00 00 
32198     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
3219c     2F 3F 00 00 
321a0     B9 B9 00 00 
321a4     BA 00 00 00 
321a8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
321ac     BC 00 00 00 
321b0     BD 00 00 00 
321b4     BE 00 00 00 
321b8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
321bc     C0 00 00 00 
321c0     C1 00 00 00 
321c4     C2 00 00 00 
321c8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
321cc     C4 00 00 00 
321d0     C5 00 00 00 
321d4     C6 00 00 00 
321d8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
321dc     C8 00 00 00 
321e0     C9 00 00 00 
321e4     CA 00 00 00 
321e8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
321ec     7F 7F 00 00 
321f0     CC 00 00 00 
321f4     CD 00 00 00 
321f8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
321fc     CF 00 00 00 
32200     D0 00 00 00 
32204     D1 00 00 00 
32208     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
3220c     2F 2F 00 00 
32210     2A 2A 00 00 
32214     2D 2D 00 00 
32218     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3221c     8D 8D 00 00 
32220     31 31 00 00 
32224     32 32 00 00 
32228     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3222c     34 34 00 00 
32230     35 35 00 00 
32234     36 36 00 00 
32238     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3223c     38 38 00 00 
32240     39 39 00 00 
32244     30 30 00 00 
32248     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3224c     5C 7C 00 00 
32250     00 00 00 00 
32254     00 00 00 00 
32258     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3225c     00 00 00 00 
      ...             
322b4     00 00 00 00 
322b8     00 00 00 00 | 	byte	$00[96]
322bc     2B 00 A6 F2 
322c0     24 A7 09 80 
322c4     5B 88 4D 89 
322c8     80 88 A5 88 | atari_spl file "atari.spl"
322cc     6D 88 B8 88 
322d0     80 88 CB 88 
322d4     92 88 A5 88 
322d8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
322dc     A5 88 CA 88 
322e0     A6 88 DD 88 
322e4     B8 88 AB 89 
322e8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
322ec     C8 AD C6 F1 
322f0     91 06 B6 FF 
322f4     13 00 4A 00 
322f8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
322fc     5D 00 5E 00 
32300     5D 00 5E 00 
32304     5E 00 5D 00 
32308     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3230c     38 00 83 00 
32310     25 00 83 00 
32314     C3 FE D1 04 
32318     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3231c     48 88 38 85 
32320     41 8A CB 88 
32324     28 89 B8 88 
32328     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3232c     15 89 03 89 
32330     02 89 15 89 
32334     16 89 15 89 
32338     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3233c     15 89 3A 89 
32340     72 89 E3 89 
32344     52 83 AD 97 
32348     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3234c     0C 02 B6 FF 
32350     E1 00 A8 00 
32354     F3 00 A8 00 
32358     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3235c     CE 00 CD 00 
32360     CD 00 BA 00 
32364     E1 00 BB 00 
32368     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3236c     DF 00 C9 FF 
32370     E6 01 B6 06 
32374     EE DD 8D 98 
32378     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
3237c     97 89 73 89 
32380     3B 89 60 89 
32384     60 89 60 89 
32388     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
3238c     73 89 72 89 
32390     85 89 73 89 
32394     AA 89 60 89 
32398     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
3239c     E8 8A 18 86 
323a0     92 88 A5 C2 
323a4     E0 00 C3 05 
323a8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
323ac     F2 00 64 01 
323b0     06 01 3E 01 
323b4     2B 01 2B 01 
323b8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
323bc     2B 01 2A 01 
323c0     2B 01 2B 01 
323c4     2B 01 18 01 
323c8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
323cc     39 07 61 F3 
323d0     C0 AF 37 85 
323d4     0F 88 8B 8A 
323d8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
323dc     AB 89 D0 89 
323e0     AB 89 D0 89 
323e4     D0 89 CF 89 
323e8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
323ec     D0 89 F5 89 
323f0     BD 89 08 8A 
323f4     CF 89 E8 8A 
323f8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
323fc     53 B3 0D F8 
32400     F4 07 38 00 
32404     63 01 63 01 
32408     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3240c     88 01 88 01 
32410     76 01 88 01 
32414     88 01 89 01 
32418     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3241c     75 01 AE 01 
32420     76 01 88 01 
32424     4A 00 46 06 
32428     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3242c     08 8A 9A 86 
32430     33 8B 08 8A 
32434     2D 8A F5 89 
32438     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3243c     2D 8A 2D 8A 
32440     2E 8A 1B 8A 
32444     40 8A 2D 8A 
32448     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3244c     2E 8A 79 8A 
32450     66 8A C8 8B 
32454     72 82 2B 97 
32458     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3245c     1D 02 05 01 
32460     F8 01 C0 01 
32464     0B 02 C0 01 
32468     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3246c     F9 01 D3 01 
32470     F8 01 D3 01 
32474     F8 01 D2 01 
32478     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
3247c     E6 01 2B 01 
32480     8E 02 5F 07 
32484     F7 E2 ED 9C 
32488     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
3248c     E8 8A 78 8A 
32490     78 8A 65 8A 
32494     8B 8A 78 8A 
32498     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
3249c     8B 8A 9D 8A 
324a0     9D 8A 8B 8A 
324a4     C2 8A 78 8A 
324a8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
324ac     70 8C 18 86 
324b0     8B 8A 23 C9 
324b4     CB 03 C4 05 
324b8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
324bc     0B 02 7B 02 
324c0     1E 02 55 02 
324c4     30 02 43 02 
324c8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
324cc     43 02 44 02 
324d0     43 02 30 02 
324d4     68 02 31 02 
324d8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
324dc     07 08 3F F7 
324e0     73 B2 13 85 
324e4     15 89 ED 8B 
324e8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
324ec     B0 8A FB 8A 
324f0     D5 8A FA 8A 
324f4     E8 8A FB 8A 
324f8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
324fc     E8 8A 21 8B 
32500     E7 8A 33 8B 
32504     E8 8A 26 8C 
32508     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3250c     8D B0 27 F6 
32510     9C 08 AD 01 
32514     7B 02 8D 02 
32518     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3251c     A1 02 A0 02 
32520     A1 02 A0 02 
32524     A0 02 A0 02 
32528     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3252c     7B 02 D8 02 
32530     7B 02 C6 02 
32534     3E 01 C3 05 
32538     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3253c     00 8C 2A 86 
32540     E0 8C FA 8A 
32544     6A 8B FB 8A 
32548     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3254c     45 8B 45 8B 
32550     45 8B 6B 8B 
32554     46 8B 59 8B 
32558     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3255c     6B 8B 6B 8B 
32560     6B 8B 6B 8B 
32564     7D 8B 7D 8B 
32568     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3256c     90 8B 91 8B 
32570     90 8B 90 8B 
32574     A3 8B A3 8B 
32578     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3257c     B5 8B B6 8B 
32580     B5 8B B5 8B 
32584     B6 8B C8 8B 
32588     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3258c     C8 8B DA 8B 
32590     DB 8B DB 8B 
32594     DB 8B DC 8B 
32598     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
3259c     EE 8B EE 8B 
325a0     00 8C 01 8C 
325a4     00 8C 01 8C 
325a8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
325ac     12 8C 13 8C 
325b0     13 8C 26 8C 
325b4     26 8C 26 8C 
325b8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
325bc     38 8C 38 8C 
325c0     38 8C 38 8C 
325c4     4B 8C 4B 8C 
325c8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
325cc     5E 8C 5E 8C 
325d0     5E 8C 5E 8C 
325d4     70 8C 70 8C 
325d8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
325dc     70 8C 83 8C 
325e0     83 8C 83 8C 
325e4     83 8C 96 8C 
325e8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
325ec     95 8C A9 8C 
325f0     A9 8C A8 8C 
325f4     A8 8C A8 8C 
325f8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
325fc     BB 8C BB 8C 
32600     BB 8C CE 8C 
32604     CE 8C CE 8C 
32608     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3260c     E0 8C E1 8C 
32610     E1 8C E0 8C 
32614     F4 8C F2 8C 
32618     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3261c     05 8D 05 8D 
32620     06 8D 06 8D 
32624     19 8D 19 8D 
32628     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3262c     18 8D 2B 8D 
32630     2B 8D 2B 8D 
32634     2A 8D 3E 8D 
32638     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3263c     3E 8D 51 8D 
32640     50 8D 50 8D 
32644     50 8D 51 8D 
32648     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3264c     63 8D 64 8D 
32650     76 8D 75 8D 
32654     75 8D 76 8D 
32658     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3265c     88 8D 88 8D 
32660     89 8D 9B 8D 
32664     9A 8D 9B 8D 
32668     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3266c     AD 8D AE 8D 
32670     AD 8D AE 8D 
32674     C1 8D C1 8D 
32678     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3267c     D3 8D D3 8D 
32680     D3 8D D3 8D 
32684     D3 8D E6 8D 
32688     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3268c     E6 8D E6 8D 
32690     F9 8D F9 8D 
32694     F9 8D F8 8D 
32698     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
3269c     0B 8E 0B 8E 
326a0     1D 8E 1D 8E 
326a4     1E 8E 1E 8E 
326a8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
326ac     31 8E 31 8E 
326b0     31 8E 42 8E 
326b4     43 8E 43 8E 
326b8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
326bc     56 8E 56 8E 
326c0     55 8E 56 8E 
326c4     68 8E 69 8E 
326c8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
326cc     69 8E 7B 8E 
326d0     7C 8E 7B 8E 
326d4     7B 8E 8D 8E 
326d8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
326dc     8D 8E A1 8E 
326e0     A0 8E A1 8E 
326e4     A1 8E A0 8E 
326e8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
326ec     B3 8E B3 8E 
326f0     C6 8E C5 8E 
326f4     C6 8E C6 8E 
326f8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
326fc     D8 8E D9 8E 
32700     D8 8E EC 8E 
32704     EB 8E EC 8E 
32708     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3270c     FE 8E FE 8E 
32710     FE 8E FE 8E 
32714     10 8F 10 8F 
32718     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3271c     11 8F 23 8F 
32720     24 8F 23 8F 
32724     24 8F 37 8F 
32728     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3272c     36 8F 36 8F 
32730     48 8F 49 8F 
32734     49 8F 49 8F 
32738     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3273c     5B 8F 5C 8F 
32740     5B 8F 6E 8F 
32744     6E 8F 6E 8F 
32748     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3274c     81 8F 81 8F 
32750     81 8F 81 8F 
32754     93 8F 93 8F 
32758     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3275c     93 8F A6 8F 
32760     A6 8F A6 8F 
32764     A6 8F B9 8F 
32768     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3276c     B9 8F B9 8F 
32770     CC 8F CB 8F 
32774     CB 8F CC 8F 
32778     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3277c     DF 8F DE 8F 
32780     DE 8F F1 8F 
32784     F1 8F F1 8F 
32788     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3278c     03 90 04 90 
32790     04 90 04 90 
32794     16 90 17 90 
32798     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3279c     29 90 28 90 
327a0     29 90 28 90 
327a4     29 90 3C 90 
327a8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
327ac     3C 90 4F 90 
327b0     4E 90 4E 90 
327b4     4E 90 4E 90 
327b8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
327bc     61 90 61 90 
327c0     73 90 74 90 
327c4     74 90 74 90 
327c8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
327cc     87 90 86 90 
327d0     87 90 86 90 
327d4     99 90 99 90 
327d8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
327dc     AB 90 AB 90 
327e0     AC 90 AB 90 
327e4     AB 90 BF 90 
327e8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
327ec     BE 90 D1 90 
327f0     D0 90 D1 90 
327f4     D1 90 D1 90 
327f8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
327fc     E3 90 E4 90 
32800     F6 90 F6 90 
32804     F6 90 F6 90 
32808     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3280c     09 91 0A 91 
32810     0A 91 1C 91 
32814     1C 91 1C 91 
32818     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3281c     2F 91 2E 91 
32820     2F 91 2F 91 
32824     2E 91 41 91 
32828     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3282c     41 91 53 91 
32830     54 91 54 91 
32834     53 91 54 91 
32838     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3283c     67 91 67 91 
32840     79 91 7A 91 
32844     79 91 78 91 
32848     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3284c     8C 91 8B 91 
32850     8C 91 8C 91 
32854     9E 91 9E 91 
32858     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3285c     B1 91 B1 91 
32860     B2 91 B1 91 
32864     B1 91 C4 91 
32868     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3286c     C4 91 D6 91 
32870     D7 91 D7 91 
32874     D7 91 D6 91 
32878     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3287c     EA 91 EA 91 
32880     EA 91 FC 91 
32884     FC 91 FB 91 
32888     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3288c     0E 92 0F 92 
32890     0F 92 0E 92 
32894     21 92 21 92 
32898     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3289c     21 92 34 92 
328a0     33 92 34 92 
328a4     34 92 47 92 
328a8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
328ac     46 92 47 92 
328b0     59 92 59 92 
328b4     59 92 59 92 
328b8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
328bc     6C 92 6C 92 
328c0     6B 92 7E 92 
328c4     7E 92 7E 92 
328c8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
328cc     92 92 91 92 
328d0     91 92 90 92 
328d4     91 92 A4 92 
328d8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
328dc     A3 92 B6 92 
328e0     B6 92 B7 92 
328e4     B7 92 B6 92 
328e8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
328ec     CA 92 C9 92 
328f0     CA 92 DC 92 
328f4     DC 92 DC 92 
328f8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
328fc     EF 92 EF 92 
32900     EF 92 EF 92 
32904     01 93 01 93 
32908     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3290c     15 93 14 93 
32910     14 93 14 93 
32914     14 93 27 93 
32918     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3291c     27 93 39 93 
32920     3A 93 39 93 
32924     39 93 39 93 
32928     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3292c     4B 93 4C 93 
32930     5F 93 5F 93 
32934     5F 93 5E 93 
32938     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3293c     5F 93 84 93 
32940     4C 93 96 93 
32944     5F 93 AE 94 
32948     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3294c     7B C1 00 00 
32950     00 00 00 00 
32954     00 00 00 00 
32958     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3295c     00 00 00 00 | 	byte	$00, $00, $00, $00
32960     7A D7 00 80 
32964     87 8A 48 8F 
32968     EC 8C 76 8D 
3296c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
32970     3C 8D 82 8D 
32974     42 8D 88 8D 
32978     8C 8D 8E 8D 
3297c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
32980     97 8D DE 8D 
32984     E1 8D F1 8E 
32988     D8 8C A3 83 
3298c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
32990     65 71 C9 65 
32994     FC 64 C4 65 
32998     C1 65 BF 65 
3299c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
329a0     B6 65 B4 65 
329a4     B2 65 AE 65 
329a8     AC 65 ED 65 
329ac     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
329b0     5E 65 25 66 
329b4     FA 62 23 6B 
329b8     B5 6C 61 0A 
329bc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
329c0     5D 90 BE 8D 
329c4     47 8E C3 8D 
329c8     09 8E C9 8D 
329cc     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
329d0     15 8E 19 8E 
329d4     1B 8E 62 8E 
329d8     64 8E 68 8E 
329dc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
329e0     B5 8E 4C 90 
329e4     FA 84 3C 9D 
329e8     98 13 79 6D 
329ec     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
329f0     D9 66 50 66 
329f4     D4 66 4B 66 
329f8     8C 66 46 66 
329fc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
32a00     81 66 3A 66 
32a04     7C 66 36 66 
32a08     76 66 30 66 
32a0c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
32a10     6B 66 88 72 
32a14     BF 37 E7 B7 
32a18     75 83 8B 8E 
32a1c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
32a20     94 8E 96 8E 
32a24     DD 8E 9C 8E 
32a28     E2 8E A2 8E 
32a2c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
32a30     EE 8E AE 8E 
32a34     38 8F B5 8E 
32a38     3F 8F FD 8E 
32a3c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
32a40     A5 87 1E E3 
32a44     6D 5D FA 71 
32a48     41 64 25 67 
32a4c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
32a50     D9 66 1A 67 
32a54     18 67 15 67 
32a58     12 67 0F 67 
32a5c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
32a60     07 67 C0 66 
32a64     01 67 BC 66 
32a68     B8 66 DE 64 
32a6c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
32a70     43 E5 1F 8B 
32a74     14 8A F1 90 
32a78     1C 8F 63 8F 
32a7c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
32a80     29 8F 6E 8F 
32a84     72 8F 75 8F 
32a88     34 8F BE 8F 
32a8c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
32a90     84 8F 87 8F 
32a94     CC 8F 56 90 
32a98     67 91 49 80 
32a9c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
32aa0     46 77 A6 66 
32aa4     E8 66 B0 67 
32aa8     AD 67 ED 67 
32aac     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
32ab0     A2 67 E3 67 
32ab4     9D 67 9A 67 
32ab8     98 67 94 67 
32abc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
32ac0     49 67 CD 67 
32ac4     28 65 5F 6E 
32ac8     82 67 3A 01 
32acc     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
32ad0     C2 91 A9 8F 
32ad4     EF 8F AE 8F 
32ad8     F4 8F B5 8F 
32adc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
32ae0     01 90 03 90 
32ae4     07 90 09 90 
32ae8     0C 90 53 90 
32aec     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
32af0     18 90 44 93 
32af4     85 84 D6 9D 
32af8     87 1F 2F 75 
32afc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
32b00     C4 68 F6 67 
32b04     BE 68 F1 67 
32b08     76 68 2E 68 
32b0c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
32b10     27 68 24 68 
32b14     64 68 1E 68 
32b18     5F 68 19 68 
32b1c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
32b20     DC 68 56 72 
32b24     7E 36 C2 B8 
32b28     D7 84 73 90 
32b2c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
32b30     7B 90 7F 90 
32b34     82 90 84 90 
32b38     CB 90 8B 90 
32b3c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
32b40     D7 90 96 90 
32b44     20 91 59 90 
32b48     25 91 A2 90 
32b4c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
32b50     D0 89 40 EE 
32b54     12 64 C4 71 
32b58     29 66 0C 69 
32b5c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
32b60     C0 68 02 69 
32b64     FE 68 FB 68 
32b68     F9 68 F6 68 
32b6c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
32b70     EE 68 A8 68 
32b74     2C 69 5F 68 
32b78     E2 68 81 66 
32b7c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
32b80     1E EB A6 8A 
32b84     73 8B 5E 93 
32b88     7B 90 48 91 
32b8c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
32b90     0D 91 11 91 
32b94     14 91 16 91 
32b98     5C 91 1C 91 
32b9c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
32ba0     68 91 AF 91 
32ba4     2A 91 B5 91 
32ba8     75 91 1A 94 
32bac     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
32bb0     70 0E CB 6C 
32bb4     5D 6E C4 67 
32bb8     99 69 54 69 
32bbc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
32bc0     D2 69 49 69 
32bc4     89 69 86 69 
32bc8     40 69 C4 69 
32bcc     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
32bd0     35 69 76 69 
32bd4     58 67 EB 6D 
32bd8     E9 6D 89 0F 
32bdc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
32be0     33 94 94 91 
32be4     D9 91 56 91 
32be8     E0 91 9F 91 
32bec     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
32bf0     EC 91 EE 91 
32bf4     F1 91 F4 91 
32bf8     F7 91 3D 92 
32bfc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
32c00     46 92 21 94 
32c04     11 89 A4 9D 
32c08     FD 0E 8F 6C 
32c0c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
32c10     28 6A E1 69 
32c14     65 6A 1F 6A 
32c18     5F 6A 1A 6A 
32c1c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
32c20     54 6A 0F 6A 
32c24     4F 6A 09 6A 
32c28     06 6A 03 6A 
32c2c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
32c30     23 68 69 77 
32c34     3A 4D 38 CA 
32c38     38 86 4E 91 
32c3c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
32c40     64 92 24 92 
32c44     6A 92 2A 92 
32c48     70 92 30 92 
32c4c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
32c50     7B 92 7E 92 
32c54     C5 92 84 92 
32c58     CB 92 8A 92 
32c5c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
32c60     4D 8D F9 E2 
32c64     97 59 FE 74 
32c68     DB 68 6D 6A 
32c6c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
32c70     A8 6A A5 6A 
32c74     A3 6A 9F 6A 
32c78     9D 6A 9B 6A 
32c7c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
32c80     D6 6A 8F 6A 
32c84     CF 6A 46 6A 
32c88     CA 6A E1 67 
32c8c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
32c90     D3 F7 15 92 
32c94     90 8C BF 94 
32c98     A6 92 EB 92 
32c9c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
32ca0     B1 92 F7 92 
32ca4     FA 92 FD 92 
32ca8     00 93 02 93 
32cac     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
32cb0     4F 93 52 93 
32cb4     54 93 22 94 
32cb8     5A 93 8F 88 
32cbc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
32cc0     1C 77 07 6C 
32cc4     E8 69 7A 6B 
32cc8     34 6B 75 6B 
32ccc     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
32cd0     29 6B 26 6B 
32cd4     24 6B 21 6B 
32cd8     1D 6B 5E 6B 
32cdc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
32ce0     12 6B 52 6B 
32ce4     34 69 34 6E 
32ce8     BA 73 A4 24 
32cec     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
32cf0     7A 94 B3 93 
32cf4     72 93 31 93 
32cf8     78 93 7A 93 
32cfc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
32d00     83 93 86 93 
32d04     89 93 D0 93 
32d08     D2 93 D5 93 
32d0c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
32d10     DD 93 40 96 
32d14     30 8B 99 9C 
32d18     52 10 94 71 
32d1c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
32d20     46 6C 79 6B 
32d24     40 6C B7 6B 
32d28     F7 6B B1 6B 
32d2c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
32d30     EC 6B A5 6B 
32d34     A2 6B 9F 6B 
32d38     9D 6B 9A 6B 
32d3c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
32d40     C8 6A E4 76 
32d44     20 4B F9 CE 
32d48     2E 8A 1A 92 
32d4c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
32d50     FB 93 BA 93 
32d54     01 94 03 94 
32d58     4A 94 09 94 
32d5c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
32d60     55 94 14 94 
32d64     9E 94 1A 94 
32d68     61 94 20 94 
32d6c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
32d70     3E 87 E5 CD 
32d74     5F 50 6C 78 
32d78     B5 6A 04 6C 
32d7c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
32d80     83 6C 7F 6C 
32d84     7C 6C 36 6C 
32d88     76 6C 74 6C 
32d8c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
32d90     6B 6C 25 6C 
32d94     66 6C 1F 6C 
32d98     1D 6C 41 6A 
32d9c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
32da0     BA FA FC 94 
32da4     5B 8D 97 96 
32da8     3B 94 C5 94 
32dac     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
32db0     89 94 8C 94 
32db4     8F 94 92 94 
32db8     94 94 DB 94 
32dbc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
32dc0     E4 94 E7 94 
32dc4     2D 95 74 95 
32dc8     C8 96 15 89 
32dcc     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
32dd0     CB 75 31 6F 
32dd4     7E 6B 10 6D 
32dd8     C9 6C 0A 6D 
32ddc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
32de0     BD 6C FF 6C 
32de4     FB 6C F9 6C 
32de8     B2 6C F3 6C 
32dec     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
32df0     A7 6C E8 6C 
32df4     0D 6B 85 6F 
32df8     C7 74 10 28 
32dfc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
32e00     96 96 47 95 
32e04     06 95 0A 95 
32e08     0C 95 0F 95 
32e0c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
32e10     17 95 5E 95 
32e14     61 95 63 95 
32e18     22 95 AC 95 
32e1c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
32e20     72 95 17 98 
32e24     59 8E 01 96 
32e28     CF FC 5A 68 
32e2c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
32e30     96 6D 50 6D 
32e34     D5 6D 4A 6D 
32e38     8C 6D 89 6D 
32e3c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
32e40     80 6D 3A 6D 
32e44     7A 6D 77 6D 
32e48     75 6D 71 6D 
32e4c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
32e50     18 6C BC 78 
32e54     9A 4F 7E CF 
32e58     1F 89 F1 93 
32e5c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
32e60     D2 95 4E 95 
32e64     D7 95 53 95 
32e68     DD 95 E0 95 
32e6c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
32e70     A5 95 EB 95 
32e74     EE 95 F0 95 
32e78     37 96 B3 95 
32e7c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
32e80     1A 98 D5 8D 
32e84     C5 9F CD 0F 
32e88     0F 71 F3 73 
32e8c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
32e90     D9 6D 5E 6E 
32e94     D3 6D 58 6E 
32e98     12 6E 0F 6E 
32e9c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
32ea0     49 6E BF 6D 
32ea4     87 6E 76 6D 
32ea8     81 6E 11 6B 
32eac     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
32eb0     3F 09 44 95 
32eb4     E5 8D 3F 99 
32eb8     D4 95 A2 96 
32ebc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
32ec0     23 96 69 96 
32ec4     6B 96 6E 96 
32ec8     71 96 74 96 
32ecc     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
32ed0     BF 96 3C 96 
32ed4     C6 96 C8 96 
32ed8     A3 98 51 8D 
32edc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
32ee0     CF 75 29 73 
32ee4     90 6C EC 6E 
32ee8     62 6E E7 6E 
32eec     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
32ef0     9A 6E 98 6E 
32ef4     95 6E 91 6E 
32ef8     8E 6E CF 6E 
32efc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
32f00     40 6E C3 6E 
32f04     E8 6C 45 6F 
32f08     A5 7B C9 35 
32f0c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
32f10     2D 98 23 97 
32f14     E1 96 A0 96 
32f18     A4 96 EA 96 
32f1c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
32f20     AF 96 F4 96 
32f24     F8 96 3E 97 
32f28     FD 96 43 97 
32f2c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
32f30     08 97 6B 99 
32f34     D6 92 88 91 
32f38     D8 EE 84 66 
32f3c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
32f40     2E 6F E7 6E 
32f44     6C 6F 24 6F 
32f48     21 6F 1F 6F 
32f4c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
32f50     17 6F 13 6F 
32f54     54 6F 0E 6F 
32f58     0B 6F 4B 6F 
32f5c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
32f60     27 6D 1C 7B 
32f64     19 59 9F DB 
32f68     66 8E BC 94 
32f6c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
32f70     67 97 26 97 
32f74     6D 97 2B 97 
32f78     72 97 32 97 
32f7c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
32f80     C1 97 7F 97 
32f84     C6 97 85 97 
32f88     CB 97 CE 97 
32f8c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
32f90     EC 8A C4 C6 
32f94     68 4C F4 7D 
32f98     63 6E E8 6E 
32f9c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
32fa0     ED 6F A7 6F 
32fa4     E7 6F A0 6F 
32fa8     E1 6F 9B 6F 
32fac     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
32fb0     D5 6F 8F 6F 
32fb4     CE 6F 45 6F 
32fb8     86 6F 68 6D 
32fbc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
32fc0     C0 13 AD A2 
32fc4     A7 8E 79 99 
32fc8     E6 97 E8 97 
32fcc     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
32fd0     F1 97 F3 97 
32fd4     F6 97 F9 97 
32fd8     FB 97 FE 97 
32fdc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
32fe0     4A 98 0A 98 
32fe4     93 98 0F 98 
32fe8     7F 9B BF 8C 
32fec     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
32ff0     91 7B 62 73 
32ff4     1A 6E B9 70 
32ff8     EB 6F B3 70 
32ffc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
33000     25 70 20 70 
33004     1E 70 1B 70 
33008     18 70 15 70 
3300c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
33010     0D 70 09 70 
33014     07 70 03 70 
33018     01 70 FD 6F 
3301c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
33020     F6 6F F2 6F 
33024     EF 6F EC 6F 
33028     2C 70 E6 6F 
3302c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
33030     DD 6F 97 6F 
33034     D7 6F 84 6E 
33038     8F 6F 3F 7D 
3303c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3303e     FF FF FF FF 
33042     FF FF       | atarist_spl file "atarist.spl" '512
33044     00 00 00 00 
33048     00 00 00 00 
3304c     00 00       | 	byte	$00[10]
3304e     17 7F F2 7F 
33052     B2 7F 72 7F 
33056     33 7F F4 7E 
3305a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3305e     36 7E F5 7D 
33062     E9 51 F2 0D 
33066     8E 00 F3 FD 
3306a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
3306e     57 FD 58 FD 
33072     5B FD 5C FD 
33076     5C FD 60 7D 
3307a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
3307e     D6 7C 98 7C 
33082     59 7C 1A 7C 
33086     DC 7B 9E 7B 
3308a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3308e     F3 05 00 FD 
33092     41 FB EA FA 
33096     D9 FA DB FA 
3309a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3309e     E4 FA 9B 36 
330a2     F8 7A C0 7A 
330a6     84 7A 45 7A 
330aa     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
330ae     8E 79 51 79 
330b2     15 79 D7 78 
330b6     3C 1F EB FF 
330ba     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
330be     6D F8 65 F8 
330c2     68 F8 6D F8 
330c6     70 F8 74 F8 
330ca     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
330ce     AB 60 79 60 
330d2     4B 60 1A 60 
330d6     E9 5F B9 5F 
330da     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
330de     FB 59 B2 0B 
330e2     92 FA 3A F7 
330e6     96 F6 79 F6 
330ea     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
330ee     82 F6 86 F6 
330f2     8C F6 DB 5D 
330f6     F1 5E C1 5E 
330fa     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
330fe     34 5E 04 5E 
33102     D6 5D A6 5D 
33106     78 5D D4 3E 
3310a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3310e     27 F5 BA F4 
33112     AB F4 AD F4 
33116     B2 F4 B8 F4 
3311a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3311e     26 5D 2B 5D 
33122     FC 5C CD 5C 
33126     9F 5C 70 5C 
3312a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3312e     E5 5B B8 5B 
33132     DB 24 A7 FC 
33136     D1 F4 4D F3 
3313a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3313e     04 F3 0B F3 
33142     11 F3 16 F3 
33146     DE 18 98 5B 
3314a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3314e     4E 4A 29 48 
33152     A0 47 6A 47 
33156     43 47 20 47 
3315a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3315e     E2 F6 98 F2 
33162     C5 F1 A3 F1 
33166     A3 F1 A8 F1 
3316a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3316e     BF F1 00 3D 
33172     EF 46 CD 46 
33176     AA 46 86 46 
3317a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3317e     1C 46 F9 45 
33182     D7 45 EE 43 
33186     DE 02 E8 F3 
3318a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3318e     61 F0 65 F0 
33192     6D F0 74 F0 
33196     7C F0 84 F0 
3319a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3319e     8E 45 6D 45 
331a2     49 45 27 45 
331a6     05 45 E1 44 
331aa     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
331ae     F1 2F A9 FB 
331b2     8B F1 9B EF 
331b6     40 EF 36 EF 
331ba     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
331be     4D EF 56 EF 
331c2     5E EF 7B 44 
331c6     8C 44 69 44 
331ca     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
331ce     03 44 E1 43 
331d2     C0 43 F5 37 
331d6     69 33 0F 11 
331da     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
331de     66 EE 37 EE 
331e2     38 EE 40 EE 
331e6     48 EE 51 EE 
331ea     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
331ee     7D 32 6A 32 
331f2     51 32 37 32 
331f6     1F 32 05 32 
331fa     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
331fe     B9 31 A1 31 
33202     F1 04 F4 F1 
33206     50 EE A0 ED 
3320a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3320e     93 ED 9A ED 
33212     A4 ED AD ED 
33216     F4 27 C1 31 
3321a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3321e     78 31 5F 31 
33222     46 31 2E 31 
33226     15 31 FC 30 
3322a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3322e     C4 EF 4A ED 
33232     DC EC CB EC 
33236     D2 EC DA EC 
3323a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3323e     F9 EC 64 2F 
33242     0A 31 F1 30 
33246     D9 30 C0 30 
3324a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3324e     78 30 5F 30 
33252     46 30 38 23 
33256     A6 F6 19 EE 
3325a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3325e     20 EC 28 EC 
33262     32 EC 3C EC 
33266     47 EC 51 EC 
3326a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3326e     A3 22 93 22 
33272     7F 22 6E 22 
33276     5D 22 4C 22 
3327a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3327e     77 09 76 F1 
33282     CC EC F0 EB 
33286     CD EB CE EB 
3328a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3328e     ED EB F5 EB 
33292     3E F6 6B 22 
33296     5F 22 4E 22 
3329a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3329e     1B 22 0B 22 
332a2     FA 21 E9 21 
332a6     D8 21 4D FF 
332aa     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
332ae     92 EB 7B EB 
332b2     82 EB 8C EB 
332b6     97 EB A1 EB 
332ba     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
332be     15 22 04 22 
332c2     F3 21 E3 21 
332c6     D2 21 C0 21 
332ca     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
332ce     8E 21 7D 21 
332d2     9A F8 A4 ED 
332d6     8E EB 2F EB 
332da     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
332de     37 EB 42 EB 
332e2     4C EB 57 EB 
332e6     B2 17 22 19 
332ea     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
332ee     FD 18 EF 18 
332f2     E3 18 D6 18 
332f6     CA 18 BD 18 
332fa     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
332fe     60 EC 35 EB 
33302     01 EB 01 EB 
33306     0C EB 16 EB 
3330a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3330e     34 EB D0 18 
33312     00 19 F4 18 
33316     E8 18 DA 18 
3331a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3331e     B6 18 A9 18 
33322     9D 18 91 05 
33326     F0 EF CA EB 
3332a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3332e     E8 EA F2 EA 
33332     FE EA 07 EB 
33336     12 EB C2 EF 
3333a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3333e     D9 18 CD 18 
33342     C0 18 B3 18 
33346     A7 18 9B 18 
3334a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3334e     B8 FC 30 EE 
33352     61 EB DC EA 
33356     CD EA D2 EA 
3335a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3335e     F3 EA FE EA 
33362     D2 09 D1 18 
33366     C3 18 17 18 
3336a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3336e     66 11 52 11 
33372     49 11 41 11 
33376     38 11 E0 F4 
3337a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3337e     C9 EA C5 EA 
33382     CF EA DB EA 
33386     E6 EA EF EA 
3338a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3338e     89 11 80 11 
33392     78 11 6E 11 
33396     67 11 5D 11 
3339a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3339e     43 11 32 0D 
333a2     9C F1 07 EC 
333a6     F8 EA CD EA 
333aa     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
333ae     E4 EA ED EA 
333b2     F8 EA 02 EB 
333b6     55 11 91 11 
333ba     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
333be     75 11 6E 11 
333c2     64 11 5E 11 
333c6     54 11 4A 11 
333ca     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
333ce     A8 EB F1 EA 
333d2     D9 EA DC EA 
333d6     E8 EA F1 EA 
333da     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
333de     A6 EB 9E 11 
333e2     A0 11 96 11 
333e6     8D 11 85 11 
333ea     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
333ee     6A 11 CA 0D 
333f2     36 0B 57 F8 
333f6     6C ED 57 EB 
333fa     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
333fe     F4 EA FF EA 
33402     09 EB 15 EB 
33406     1E EB 1A FD 
3340a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3340e     ED 0A E8 0A 
33412     E2 0A DC 0A 
33416     D6 0A D1 0A 
3341a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3341e     F8 F3 BC EC 
33422     57 EB 1E EB 
33426     18 EB 24 EB 
3342a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3342e     42 EB 4D EB 
33432     08 09 20 0B 
33436     1A 0B 14 0B 
3343a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3343e     04 0B FE 0A 
33442     F9 0A F2 0A 
33446     84 08 3A F1 
3344a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3344e     42 EB 42 EB 
33452     4E EB 57 EB 
33456     62 EB 6B EB 
3345a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3345e     48 0B 43 0B 
33462     3C 0B 36 0B 
33466     31 0B 2C 0B 
3346a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3346e     1B 0B 5C 00 
33472     6A EF 1B EC 
33476     81 EB 6A EB 
3347a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3347e     85 EB 8E EB 
33482     99 EB A3 EB 
33486     DD 05 E5 05 
3348a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3348e     DB 05 D8 05 
33492     D5 05 D1 05 
33496     D0 05 CB 05 
3349a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3349e     0C EC BB EB 
334a2     B3 EB BB EB 
334a6     C5 EB D0 EB 
334aa     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
334ae     E4 F7 2C 06 
334b2     28 06 24 06 
334b6     22 06 1F 06 
334ba     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
334be     16 06 14 06 
334c2     0F 06 D0 F3 
334c6     65 ED 2D EC 
334ca     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
334ce     01 EC 0A EC 
334d2     14 EC 1E EC 
334d6     29 EC FB 03 
334da     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
334de     63 06 60 06 
334e2     5E 06 59 06 
334e6     58 06 54 06 
334ea     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
334ee     69 F1 21 ED 
334f2     55 EC 33 EC 
334f6     36 EC 40 EC 
334fa     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
334fe     5C EC 68 EC 
33502     92 02 D9 02 
33506     D7 02 D7 02 
3350a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3350e     D1 02 D1 02 
33512     CE 02 CD 02 
33516     5D FC 80 EF 
3351a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3351e     83 EC 8A EC 
33522     93 EC 9C EC 
33526     A5 EC B1 EC 
3352a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3352e     2B 03 2A 03 
33532     29 03 26 03 
33536     25 03 24 03 
3353a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3353e     1F 03 70 F7 
33542     D0 EE 27 ED 
33546     DB EC D4 EC 
3354a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3354e     F0 EC FA EC 
33552     02 ED F9 F4 
33556     7B 03 7C 03 
3355a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3355e     75 03 73 03 
33562     72 03 70 03 
33566     6D 03 6C 03 
3356a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3356e     54 ED 22 ED 
33572     22 ED 2C ED 
33576     35 ED 3F ED 
3357a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3357e     14 01 C3 03 
33582     C1 03 C0 03 
33586     5F 01 A5 00 
3358a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3358e     7B 00 7C 00 
33592     20 00 85 F1 
33596     2A EE 89 ED 
3359a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3359e     80 ED 87 ED 
335a2     90 ED 9A ED 
335a6     A3 ED 73 00 
335aa     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
335ae     D0 00 D0 00 
335b2     D0 00 D0 00 
335b6     D0 00 CF 00 
335ba     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
335be     80 F0 3D EE 
335c2     D5 ED C7 ED 
335c6     CD ED D6 ED 
335ca     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
335ce     F2 ED FA ED 
335d2     1D 01 29 01 
335d6     27 01 27 01 
335da     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
335de     25 01 26 01 
335e2     26 01 23 01 
335e6     D0 F7 EC EF 
335ea     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
335ee     1C EE 24 EE 
335f2     2D EE 37 EE 
335f6     40 EE 47 EE 
335fa     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
335fe     7D 01 7B 01 
33602     7A 01 7A 01 
33606     79 01 78 01 
3360a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3360e     84 FE DE F3 
33612     6C EF 93 EE 
33616     72 EE 72 EE 
3361a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3361e     8B EE 95 EE 
33622     9E EE 15 FC 
33626     67 FE 67 FE 
3362a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3362e     6B FE 6B FE 
33632     6D FE 6D FE 
33636     6D FE 6F FE 
3363a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3363e     DF EE CC EE 
33642     CF EE D9 EE 
33646     E1 EE EA EE 
3364a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3364e     5A FE C4 FE 
33652     C3 FE C5 FE 
33656     C6 FE C6 FE 
3365a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3365e     C8 FE C7 FE 
33662     DA FB 85 F1 
33666     8D EF 31 EF 
3366a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3366e     34 EF 3E EF 
33672     46 EF 4F EF 
33676     57 EF 0D FF 
3367a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3367e     1F FF 1F FF 
33682     21 FF 21 FF 
33686     21 FF 21 FF 
3368a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3368e     15 F1 BE EF 
33692     84 EF 7E EF 
33696     88 EF 8F EF 
3369a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3369e     A9 EF 06 F2 
336a2     A6 FC AB FC 
336a6     AD FC AE FC 
336aa     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
336ae     B2 FC B4 FC 
336b2     B6 FC B7 FC 
336b6     8B F4 BD F0 
336ba     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
336be     E4 EF EE EF 
336c2     F6 EF FD EF 
336c6     04 F0 0E F0 
336ca     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
336ce     0B FD 0D FD 
336d2     0F FD 11 FD 
336d6     11 FD 13 FD 
336da     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
336de     17 FD 64 F3 
336e2     CD F0 52 F0 
336e6     41 F0 45 F0 
336ea     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
336ee     5B F0 64 F0 
336f2     6D F0 FB FC 
336f6     65 FD 68 FD 
336fa     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
336fe     6C FD 6D FD 
33702     6F FD 70 FD 
33706     72 FD B3 FB 
3370a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3370e     A4 F0 99 F0 
33712     A0 F0 A8 F0 
33716     AE F0 B9 F0 
3371a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3371e     CB FB DD FB 
33722     DE FB E0 FB 
33726     E3 FB E3 FB 
3372a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3372e     E9 FB EC FB 
33732     62 F7 27 F2 
33736     2A F1 FF F0 
3373a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3373e     0C F1 13 F1 
33742     1B F1 23 F1 
33746     33 F2 3C FC 
3374a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3374e     42 FC 45 FC 
33752     47 FC 48 FC 
33756     4A FC 4C FC 
3375a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3375e     20 F2 77 F1 
33762     5C F1 5F F1 
33766     64 F1 6C F1 
3376a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3376e     83 F1 DC F8 
33772     9A FC 9A FC 
33776     9B FC 9E FC 
3377a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3377e     A3 FC A4 FC 
33782     A6 FC A9 FC 
33786     90 F4 33 F2 
3378a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3378e     BA F1 BF F1 
33792     C7 F1 CE F1 
33796     D6 F1 DC F1 
3379a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3379e     F3 FC F5 FC 
337a2     FE FB 79 FB 
337a6     62 FB 5F FB 
337aa     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
337ae     6F FA AF F3 
337b2     53 F2 12 F2 
337b6     0F F2 15 F2 
337ba     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
337be     2A F2 32 F2 
337c2     38 F2 9A FB 
337c6     AF FB B1 FB 
337ca     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
337ce     B7 FB B8 FB 
337d2     BA FB BC FB 
337d6     C1 FB 3B F8 
337da     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
337de     6E F2 6C F2 
337e2     74 F2 7A F2 
337e6     81 F2 87 F2 
337ea     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
337ee     06 FC 09 FC 
337f2     0C FC 0E FC 
337f6     0F FC 12 FC 
337fa     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
337fe     17 FC 1A FC 
33802     B2 F6 7B F3 
33806     DD F2 C5 F2 
3380a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3380e     D4 F2 DB F2 
33812     E0 F2 E8 F2 
33816     28 F8 60 FC 
3381a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3381e     64 FC 66 FC 
33822     68 FC 6A FC 
33826     6D FC 52 FC 
3382a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3382e     78 F3 24 F3 
33832     1A F3 1E F3 
33836     24 F3 2A F3 
3383a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3383e     3D F3 80 FA 
33842     0C FB 0F FB 
33846     10 FB 14 FB 
3384a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3384e     1B FB 1D FB 
33852     1F FB 92 FA 
33856     DE F4 AE F3 
3385a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3385e     79 F3 7E F3 
33862     84 F3 8C F3 
33866     92 F3 97 F3 
3386a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3386e     67 FB 69 FB 
33872     6B FB 6F FB 
33876     71 FB 72 FB 
3387a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3387e     E3 F8 BA F4 
33882     EE F3 CC F3 
33886     CA F3 CF F3 
3388a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3388e     E2 F3 E8 F3 
33892     ED F3 B7 FB 
33896     BC FB BE FB 
3389a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3389e     C4 FB C6 FB 
338a2     C8 FB C9 FB 
338a6     CC FB 8F F7 
338aa     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
338ae     1E F4 1E F4 
338b2     24 F4 2A F4 
338b6     30 F4 38 F4 
338ba     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
338be     AD FA B1 FA 
338c2     B4 FA B6 FA 
338c6     BA FA BB FA 
338ca     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
338ce     C2 FA C6 FA 
338d2     55 F6 C6 F4 
338d6     7D F4 72 F4 
338da     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
338de     83 F4 89 F4 
338e2     8F F4 94 F4 
338e6     66 FA 03 FB 
338ea     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
338ee     0A FB 0E FB 
338f2     10 FB 11 FB 
338f6     16 FB 18 FB 
338fa     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
338fe     F9 F4 CA F4 
33902     C5 F4 CB F4 
33906     D1 F4 D7 F4 
3390a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3390e     E8 F4 3F FB 
33912     56 FB 58 FB 
33916     5A FB 5E FB 
3391a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3391e     64 FB 64 FB 
33922     69 FB 99 F9 
33926     E9 F5 33 F5 
3392a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3392e     1D F5 22 F5 
33932     27 F5 2E F5 
33936     32 F5 37 F5 
3393a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3393e     BC FA BC FA 
33942     C1 FA C2 FA 
33946     C4 FA C8 FA 
3394a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3394e     F9 F7 DB F5 
33952     78 F5 69 F5 
33956     6A F5 70 F5 
3395a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3395e     7F F5 85 F5 
33962     6E F7 06 FB 
33966     0A FB 0B FB 
3396a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3396e     14 FB 15 FB 
33972     18 FB 1B FB 
33976     1D FB 70 F7 
3397a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3397e     B6 F5 BB F5 
33982     C0 F5 C6 F5 
33986     CA F5 CF F5 
3398a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3398e     54 FB 56 FB 
33992     5A FB 5B FB 
33996     5E FB 5F FB 
3399a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3399e     67 FB 52 FB 
339a2     29 F7 33 F6 
339a6     06 F6 02 F6 
339aa     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
339ae     10 F6 16 F6 
339b2     1A F6 1F F6 
339b6     81 FB 9F FB 
339ba     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
339be     51 FB F2 FA 
339c2     E3 FA E3 FA 
339c6     E5 FA E9 FA 
339ca     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
339ce     64 F6 4D F6 
339d2     4D F6 53 F6 
339d6     57 F6 5C F6 
339da     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
339de     6A F6 19 FB 
339e2     1E FB 22 FB 
339e6     23 FB 24 FB 
339ea     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
339ee     2C FB 2E FB 
339f2     32 FB F0 F8 
339f6     01 F7 A5 F6 
339fa     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
339fe     9F F6 A3 F6 
33a02     A6 F6 AC F6 
33a06     B0 F6 EB F7 
33a0a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
33a0e     68 FB 6C FB 
33a12     6E FB 71 FB 
33a16     72 FB 74 FB 
33a1a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
33a1e     71 F8 21 F7 
33a22     E5 F6 DD F6 
33a26     E1 F6 E6 F6 
33a2a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
33a2e     F5 F6 F7 F6 
33a32     F7 FA AB FB 
33a36     AD FB AF FB 
33a3a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
33a3e     B6 FB B9 FB 
33a42     BB FB BC FB 
33a46     21 FB 07 F8 
33a4a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
33a4e     22 F7 26 F7 
33a52     2B F7 2E F7 
33a56     34 F7 38 F7 
33a5a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
33a5e     13 FB 16 FB 
33a62     17 FB 1B FB 
33a66     1E FB 20 FB 
33a6a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
33a6e     26 FB 77 FA 
33a72     F3 F7 7C F7 
33a76     67 F7 6A F7 
33a7a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
33a7e     74 F7 7A F7 
33a82     7E F7 82 F7 
33a86     53 FB 5A FB 
33a8a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
33a8e     5F FB 63 FB 
33a92     65 FB 67 FB 
33a96     69 FB 6A FB 
33a9a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
33a9e     B5 F7 A9 F7 
33aa2     AD F7 B0 F7 
33aa6     B5 F7 B8 F7 
33aaa     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
33aae     6E F8 99 FB 
33ab2     9C FB 9D FB 
33ab6     9F FB A4 FB 
33aba     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
33abe     A9 FB AB FB 
33ac2     AD FB 46 F9 
33ac6     26 F8 F0 F7 
33aca     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
33ace     F4 F7 F8 F7 
33ad2     FB F7 FF F7 
33ad6     03 F8 65 FA 
33ada     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
33ade     2B FB 2F FB 
33ae2     30 FB 32 FB 
33ae6     34 FB 38 FB 
33aea     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
33aee     E9 F8 4A F8 
33af2     2E F8 2C F8 
33af6     2F F8 36 F8 
33afa     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
33afe     41 F8 44 F8 
33b02     4A FB 67 FB 
33b06     68 FB 6B FB 
33b0a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
33b0e     73 FB 74 FB 
33b12     78 FB 7A FB 
33b16     14 FB E7 F8 
33b1a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
33b1e     6D F8 70 F8 
33b22     73 F8 78 F8 
33b26     7C F8 80 F8 
33b2a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
33b2e     A6 FB A7 FB 
33b32     A9 FB AC FB 
33b36     AF FB B1 FB 
33b3a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
33b3e     B7 FB 73 FA 
33b42     F8 F8 B4 F8 
33b46     A9 F8 AB F8 
33b4a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
33b4e     B4 F8 B8 F8 
33b52     BB F8 FA F8 
33b56     64 FB 65 FB 
33b5a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
33b5e     6D FB 6F FB 
33b62     70 FB 74 FB 
33b66     77 FB 77 FB 
33b6a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
33b6e     E9 F8 E4 F8 
33b72     E8 F8 EB F8 
33b76     EE F8 F2 F8 
33b7a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
33b7e     B5 FA 9F FB 
33b82     A1 FB A4 FB 
33b86     A5 FB A9 FB 
33b8a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
33b8e     AE FB B1 FB 
33b92     B2 FB C7 F9 
33b96     39 F9 22 F9 
33b9a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
33b9e     26 F9 2A F9 
33ba2     2E F9 32 F9 
33ba6     33 F9 BA FB 
33baa     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
33bae     DE FB E1 FB 
33bb2     E2 FB E4 FB 
33bb6     E5 FB E7 FB 
33bba     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
33bbe     C5 F9 67 F9 
33bc2     57 F9 56 F9 
33bc6     5B F9 5F F9 
33bca     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
33bce     68 F9 6C F9 
33bd2     0B FC 11 FC 
33bd6     14 FC 15 FC 
33bda     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
33bde     B5 FB B5 FB 
33be2     B6 FB B8 FB 
33be6     E9 FA C8 F9 
33bea     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
33bee     90 F9 94 F9 
33bf2     95 F9 99 F9 
33bf6     9D F9 9F F9 
33bfa     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
33bfe     DE FB DF FB 
33c02     E2 FB E4 FB 
33c06     E6 FB E8 FB 
33c0a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
33c0e     EF FB AC FA 
33c12     E9 F9 C7 F9 
33c16     C3 F9 C8 F9 
33c1a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
33c1e     D0 F9 D4 F9 
33c22     D6 F9 0E FB 
33c26     11 FC 13 FC 
33c2a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
33c2e     19 FC 1B FC 
33c32     1D FC 1E FC 
33c36     21 FC 22 FC 
33c3a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
33c3e     F7 F9 F7 F9 
33c42     FB F9 FE F9 
33c46     00 FA 03 FA 
33c4a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
33c4e     1B FC 45 FC 
33c52     46 FC 48 FC 
33c56     4A FC 4B FC 
33c5a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
33c5e     52 FC 54 FC 
33c62     F3 FB 82 FA 
33c66     35 FA 28 FA 
33c6a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
33c6e     31 FA 32 FA 
33c72     37 FA 37 FA 
33c76     3C FA 00 FC 
33c7a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
33c7e     09 FC 0B FC 
33c82     0F FC 12 FC 
33c86     12 FC 15 FC 
33c8a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
33c8e     8D FA 60 FA 
33c92     5B FA 5C FA 
33c96     60 FA 61 FA 
33c9a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
33c9e     6C FA 6D FA 
33ca2     37 FC 3A FC 
33ca6     3B FC 3D FC 
33caa     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
33cae     43 FC 44 FC 
33cb2     45 FC 47 FC 
33cb6     51 FB AB FA 
33cba     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
33cbe     8E FA 91 FA 
33cc2     93 FA 95 FA 
33cc6     98 FA 9B FA 
33cca     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
33cce     68 FC 6A FC 
33cd2     6C FC 6E FC 
33cd6     70 FC 72 FC 
33cda     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
33cde     76 FC 3B FB 
33ce2     D0 FA BB FA 
33ce6     B9 FA BD FA 
33cea     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
33cee     C4 FA C6 FA 
33cf2     CA FA 13 FC 
33cf6     3A FC 3A FC 
33cfa     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
33cfe     41 FC 43 FC 
33d02     44 FC 47 FC 
33d06     48 FC 3C FC 
33d0a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
33d0e     E6 FA E8 FA 
33d12     EB FA EE FA 
33d16     F0 FA F2 FA 
33d1a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
33d1e     61 FC 66 FC 
33d22     68 FC 6B FC 
33d26     6C FC 6E FC 
33d2a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
33d2e     73 FC 75 FC 
33d32     13 FC 3F FB 
33d36     17 FB 12 FB 
33d3a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
33d3e     1A FB 1D FB 
33d42     1F FB 20 FB 
33d46     23 FB 92 FC 
33d4a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
33d4e     96 FC 97 FC 
33d52     9A FC 9C FC 
33d56     9E FC 9F FC 
33d5a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
33d5e     5A FB 41 FB 
33d62     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
33d66     73 32 00 04 
33d6a     00 00 10 00 
33d6e     00 00 00 00 
33d72     00 00 00 00 | atari2 file "atari2.s2"
33d76     43 87 43 87 
33d7a     43 87 44 87 
33d7e     43 87 44 87 
33d82     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33d86     43 87 43 87 
33d8a     43 87 44 87 
33d8e     43 87 43 87 
33d92     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33d96     44 87 43 87 
33d9a     44 87 43 87 
33d9e     43 87 43 87 
33da2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33da6     43 87 43 87 
33daa     44 87 43 87 
33dae     44 87 44 87 
33db2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
33db6     43 87 43 87 
33dba     44 87 43 87 
33dbe     43 87 42 87 
33dc2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33dc6     43 87 43 87 
33dca     43 87 43 87 
33dce     44 87 43 87 
33dd2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33dd6     44 87 44 87 
33dda     43 87 44 87 
33dde     43 87 44 87 
33de2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33de6     44 87 43 87 
33dea     44 87 44 87 
33dee     43 87 43 87 
33df2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33df6     43 87 44 87 
33dfa     44 87 43 87 
33dfe     43 87 44 87 
33e02     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33e06     43 87 43 87 
33e0a     43 87 43 87 
33e0e     43 87 43 87 
33e12     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33e16     42 87 43 87 
33e1a     44 87 42 87 
33e1e     43 87 43 87 
33e22     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33e26     43 87 44 87 
33e2a     44 87 43 87 
33e2e     43 87 43 87 
33e32     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33e36     43 87 5C 87 
33e3a     EE 86 AC 87 
33e3e     4C 7C A3 78 
33e42     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33e46     BC 78 BB 78 
33e4a     BD 78 BC 78 
33e4e     BB 78 BD 78 
33e52     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33e56     BB 78 BB 78 
33e5a     BC 78 BC 78 
33e5e     BC 78 BB 78 
33e62     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33e66     BC 78 BC 78 
33e6a     BC 78 BC 78 
33e6e     BC 78 BC 78 
33e72     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33e76     BB 78 BC 78 
33e7a     A0 78 4C 7C 
33e7e     11 7A 29 89 
33e82     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
33e86     44 87 43 87 
33e8a     44 87 43 87 
33e8e     43 87 42 87 
33e92     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33e96     43 87 43 87 
33e9a     44 87 ED 85 
33e9e     71 85 52 79 
33ea2     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33ea6     BC 78 BC 78 
33eaa     BC 78 BC 78 
33eae     BC 78 BC 78 
33eb2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33eb6     BC 78 BC 78 
33eba     BC 78 A0 78 
33ebe     CF 7A B9 81 
33ec2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33ec6     44 87 43 87 
33eca     43 87 44 87 
33ece     43 87 44 87 
33ed2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33ed6     43 87 43 87 
33eda     43 87 43 87 
33ede     44 87 43 87 
33ee2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33ee6     43 87 43 87 
33eea     44 87 43 87 
33eee     44 87 43 87 
33ef2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33ef6     44 87 43 87 
33efa     43 87 43 87 
33efe     5A 87 39 81 
33f02     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33f06     A5 78 BC 78 
33f0a     BB 78 BC 78 
33f0e     BB 78 BC 78 
33f12     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33f16     BC 78 BC 78 
33f1a     BC 78 BC 78 
33f1e     BC 78 8F 79 
33f22     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33f26     09 85 47 87 
33f2a     43 87 43 87 
33f2e     42 87 42 87 
33f32     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33f36     43 87 43 87 
33f3a     43 87 43 87 
33f3e     43 87 44 87 
33f42     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33f46     43 87 43 87 
33f4a     44 87 43 87 
33f4e     42 87 43 87 
33f52     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33f56     44 87 43 87 
33f5a     43 87 43 87 
33f5e     44 87 44 87 
33f62     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
33f66     94 78 55 7A 
33f6a     B9 78 BC 78 
33f6e     BC 78 BC 78 
33f72     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33f76     BC 78 BB 78 
33f7a     BC 78 BC 78 
33f7e     BC 78 BC 78 
33f82     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33f86     BB 78 BC 78 
33f8a     BC 78 BC 78 
33f8e     BB 78 BC 78 
33f92     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33f96     BC 78 BC 78 
33f9a     BD 78 BC 78 
33f9e     BC 78 BB 78 
33fa2     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33fa6     94 78 B3 84 
33faa     36 84 4A 87 
33fae     43 87 43 87 
33fb2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
33fb6     43 87 44 87 
33fba     43 87 43 87 
33fbe     43 87 43 87 
33fc2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33fc6     43 87 44 87 
33fca     43 87 44 87 
33fce     43 87 43 87 
33fd2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33fd6     43 87 43 87 
33fda     43 87 45 87 
33fde     43 87 43 87 
33fe2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33fe6     43 87 44 87 
33fea     44 87 44 87 
33fee     43 87 43 87 
33ff2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33ff6     43 87 42 87 
33ffa     43 87 43 87 
33ffe     44 87 43 87 
34002     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34006     54 87 3C 82 
3400a     36 83 52 79 
3400e     C6 78 BC 78 
34012     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
34016     BB 78 BB 78 
3401a     BC 78 BC 78 
3401e     BC 78 BC 78 
34022     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34026     BD 78 ED 78 
3402a     1B 79 F4 83 
3402e     4D 83 4E 87 
34032     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
34036     44 87 43 87 
3403a     42 87 44 87 
3403e     43 87 42 87 
34042     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
34046     43 87 54 87 
3404a     26 82 B3 84 
3404e     D6 77 BB 78 
34052     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
34056     BC 78 BB 78 
3405a     BB 78 BB 78 
3405e     BB 78 BB 78 
34062     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
34066     BC 78 BC 78 
3406a     26 79 18 75 
3406e     36 83 1F 84 
34072     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
34076     43 87 43 87 
3407a     43 87 43 87 
3407e     43 87 44 87 
34082     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34086     43 87 44 87 
3408a     44 87 43 87 
3408e     43 87 43 87 
34092     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
34096     43 87 43 87 
3409a     43 87 43 87 
3409e     44 87 44 87 
340a2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
340a6     44 87 43 87 
340aa     43 87 43 87 
340ae     43 87 44 87 
340b2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
340b6     44 87 44 87 
340ba     44 87 43 87 
340be     44 87 43 87 
340c2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
340c6     43 87 43 87 
340ca     43 87 44 87 
340ce     44 87 43 87 
340d2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
340d6     43 87 43 87 
340da     43 87 43 87 
340de     43 87 44 87 
340e2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
340e6     43 87 44 87 
340ea     43 87 44 87 
340ee     19 87 7D 86 
340f2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
340f6     B1 78 BC 78 
340fa     BC 78 BC 78 
340fe     BC 78 BC 78 
34102     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34106     BC 78 BC 78 
3410a     BD 78 BC 78 
3410e     B7 78 3B 7B 
34112     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
34116     96 86 44 87 
3411a     43 87 43 87 
3411e     43 87 43 87 
34122     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
34126     44 87 44 87 
3412a     43 87 44 87 
3412e     43 87 44 87 
34132     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
34136     43 87 44 87 
3413a     43 87 44 87 
3413e     43 87 44 87 
34142     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34146     43 87 44 87 
3414a     43 87 43 87 
3414e     44 87 43 87 
34152     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34156     44 87 44 87 
3415a     43 87 43 87 
3415e     43 87 44 87 
34162     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34166     43 87 43 87 
3416a     43 87 43 87 
3416e     44 87 44 87 
34172     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
34176     36 83 CF 7A 
3417a     AB 78 BB 78 
3417e     BC 78 BC 78 
34182     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
34186     BB 78 BC 78 
3418a     BC 78 BC 78 
3418e     BC 78 BC 78 
34192     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34196     BC 78 BC 78 
3419a     BC 78 BB 78 
3419e     BC 78 BC 78 
341a2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
341a6     BB 78 BC 78 
341aa     BB 78 BC 78 
341ae     BC 78 BD 78 
341b2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
341b6     BC 78 BC 78 
341ba     BC 78 BC 78 
341be     BC 78 BD 78 
341c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
341c6     BC 78 BB 78 
341ca     BC 78 BB 78 
341ce     BB 78 BC 78 
341d2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
341d6     BC 78 BC 78 
341da     BC 78 BC 78 
341de     BC 78 BB 78 
341e2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
341e6     BC 78 BC 78 
341ea     BC 78 BD 78 
341ee     BB 78 BC 78 
341f2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
341f6     BC 78 BC 78 
341fa     BC 78 BB 78 
341fe     BC 78 BB 78 
34202     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
34206     BB 78 BC 78 
3420a     BC 78 BC 78 
3420e     BC 78 BB 78 
34212     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34216     BC 78 BC 78 
3421a     BC 78 BB 78 
3421e     BC 78 BB 78 
34222     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34226     BC 78 BC 78 
3422a     BC 78 BC 78 
3422e     BB 78 BC 78 
34232     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34236     BC 78 9F 78 
3423a     52 79 B3 84 
3423e     2F 86 60 87 
34242     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
34246     44 87 43 87 
3424a     43 87 43 87 
3424e     43 87 43 87 
34252     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34256     43 87 43 87 
3425a     43 87 44 87 
3425e     43 87 43 87 
34262     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34266     43 87 43 87 
3426a     43 87 43 87 
3426e     43 87 44 87 
34272     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34276     44 87 44 87 
3427a     5E 87 BC 80 
3427e     FB 80 94 78 
34282     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
34286     BD 78 BC 78 
3428a     BB 78 BC 78 
3428e     BB 78 BB 78 
34292     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
34296     BC 78 BB 78 
3429a     BB 78 6B 79 
3429e     D6 77 AC 87 
342a2     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
342a6     43 87 44 87 
342aa     43 87 43 87 
342ae     44 87 43 87 
342b2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
342b6     43 87 44 87 
342ba     43 87 5C 87 
342be     E7 80 00 80 
342c2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
342c6     BC 78 BD 78 
342ca     BC 78 BC 78 
342ce     BC 78 BB 78 
342d2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
342d6     BC 78 BC 78 
342da     BB 78 BC 78 
342de     BB 78 BC 78 
342e2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
342e6     BB 78 BC 78 
342ea     BC 78 BC 78 
342ee     BC 78 BC 78 
342f2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
342f6     BC 78 BC 78 
342fa     BC 78 BC 78 
342fe     A0 78 8D 7B 
34302     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
34306     60 87 43 87 
3430a     44 87 44 87 
3430e     43 87 43 87 
34312     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
34316     44 87 43 87 
3431a     43 87 43 87 
3431e     44 87 73 86 
34322     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
34326     51 7B B6 78 
3432a     BC 78 BD 78 
3432e     BC 78 BC 78 
34332     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34336     BB 78 BC 78 
3433a     BD 78 BB 78 
3433e     BC 78 BB 78 
34342     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
34346     BC 78 BC 78 
3434a     BC 78 BC 78 
3434e     BB 78 BC 78 
34352     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34356     BC 78 BB 78 
3435a     BB 78 BC 78 
3435e     BC 78 BB 78 
34362     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
34366     22 8C AF 84 
3436a     48 87 43 87 
3436e     44 87 43 87 
34372     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
34376     43 87 42 87 
3437a     43 87 43 87 
3437e     44 87 43 87 
34382     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34386     43 87 43 87 
3438a     44 87 44 87 
3438e     43 87 43 87 
34392     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34396     43 87 43 87 
3439a     43 87 43 87 
3439e     44 87 43 87 
343a2     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
343a6     9F 8B D6 77 
343aa     16 7C B3 78 
343ae     BC 78 BB 78 
343b2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
343b6     BB 78 BC 78 
343ba     BB 78 BC 78 
343be     BC 78 BC 78 
343c2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
343c6     BC 78 BB 78 
343ca     BB 78 BC 78 
343ce     BB 78 BC 78 
343d2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
343d6     BB 78 BB 78 
343da     BC 78 BC 78 
343de     BC 78 BB 78 
343e2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
343e6     BC 78 BC 78 
343ea     BC 78 BD 78 
343ee     BB 78 BC 78 
343f2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
343f6     BC 78 BC 78 
343fa     BC 78 BB 78 
343fe     BC 78 BC 78 
34402     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34406     A8 78 54 7E 
3440a     F4 83 17 82 
3440e     50 87 43 87 
34412     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
34416     44 87 43 87 
3441a     44 87 43 87 
3441e     43 87 44 87 
34422     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34426     43 87 28 87 
3442a     20 85 CF 7A 
3442e     70 7D AD 78 
34432     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
34436     BB 78 BC 78 
3443a     BC 78 BC 78 
3443e     BB 78 BB 78 
34442     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
34446     BB 78 B2 78 
3444a     9A 7C CF 7A 
3444e     4A 87 0D 87 
34452     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
34456     43 87 44 87 
3445a     43 87 44 87 
3445e     43 87 43 87 
34462     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
34466     44 87 43 87 
3446a     28 87 51 85 
3446e     11 7A 1E 7D 
34472     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
34476     BC 78 BB 78 
3447a     BC 78 BC 78 
3447e     BC 78 BC 78 
34482     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34486     BB 78 BC 78 
3448a     BB 78 BC 78 
3448e     BC 78 BC 78 
34492     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34496     BB 78 BC 78 
3449a     BC 78 BC 78 
3449e     BD 78 BB 78 
344a2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
344a6     BC 78 BB 78 
344aa     BC 78 BC 78 
344ae     BC 78 BB 78 
344b2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
344b6     BC 78 BC 78 
344ba     BC 78 BC 78 
344be     BB 78 BC 78 
344c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
344c6     BC 78 BD 78 
344ca     BC 78 BC 78 
344ce     BC 78 BB 78 
344d2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
344d6     BC 78 BB 78 
344da     BB 78 BC 78 
344de     BC 78 BB 78 
344e2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
344e6     BB 78 BB 78 
344ea     BB 78 BC 78 
344ee     B6 78 48 7D 
344f2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
344f6     56 87 43 87 
344fa     42 87 44 87 
344fe     44 87 43 87 
34502     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34506     43 87 44 87 
3450a     43 87 44 87 
3450e     4C 87 7E 83 
34512     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
34516     F7 78 BC 78 
3451a     BC 78 BB 78 
3451e     BB 78 BC 78 
34522     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34526     BC 78 BB 78 
3452a     BC 78 BC 78 
3452e     BB 78 BC 78 
34532     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34536     BB 78 BC 78 
3453a     BC 78 BC 78 
3453e     BC 78 BB 78 
34542     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34546     BC 78 BC 78 
3454a     BC 78 BC 78 
3454e     BC 78 BB 78 
34552     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34556     BC 78 BB 78 
3455a     BB 78 BC 78 
3455e     BC 78 BB 78 
34562     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34566     BC 78 BC 78 
3456a     BB 78 BC 78 
3456e     BC 78 BC 78 
34572     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
34576     73 32 00 04 
3457a     00 00 10 00 
3457e     00 00 00 00 
34582     00 00 00 00 | atari12 file "atari12.s2"
34586     00 6D 00 6D 
3458a     00 6D 00 6D 
3458e     00 6D 00 6D 
34592     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34596     00 6D 00 6D 
3459a     00 6D 00 6D 
3459e     00 6D 00 6D 
345a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
345a6     00 6D 00 6D 
345aa     00 6D 00 6D 
345ae     00 6D 00 6D 
345b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
345b6     00 6D 00 6D 
345ba     00 6D 00 6D 
345be     00 6D 00 6D 
345c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
345c6     00 6D 00 6D 
345ca     00 6D 00 6D 
345ce     00 6D 00 6D 
345d2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
345d6     00 6C 00 6C 
345da     00 6C 00 6C 
345de     00 6C 00 6C 
345e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
345e6     00 6C 00 6C 
345ea     00 6C 00 6C 
345ee     00 6C 00 6C 
345f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
345f6     00 6C 00 6C 
345fa     00 6C 00 6C 
345fe     00 6C 00 6C 
34602     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34606     00 6C 00 6C 
3460a     00 6C 00 6C 
3460e     00 6C 00 6C 
34612     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34616     00 6C 00 6C 
3461a     00 6C 00 6C 
3461e     00 6C 00 6C 
34622     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34626     00 6C 00 6C 
3462a     00 6C 00 6C 
3462e     00 6C 00 6C 
34632     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34636     00 6C 00 6C 
3463a     00 6C 00 6C 
3463e     00 6C 00 6C 
34642     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34646     00 6C 00 6C 
3464a     00 6C 00 6C 
3464e     00 6C 00 6C 
34652     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34656     00 6C 00 6C 
3465a     00 6C 00 6C 
3465e     00 6C 00 6C 
34662     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34666     00 6C 00 6C 
3466a     00 6C 00 6C 
3466e     00 6C 00 6C 
34672     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34676     00 6C 00 6C 
3467a     00 6C 00 6C 
3467e     00 6C 00 6C 
34682     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34686     00 6C 00 6B 
3468a     00 6B 00 6B 
3468e     00 6B 00 6B 
34692     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34696     00 6B 00 6B 
3469a     00 6B 00 6B 
3469e     00 6B 00 6B 
346a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346a6     00 6B 00 6B 
346aa     00 6B 00 6B 
346ae     00 6B 00 6B 
346b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346b6     00 6B 00 6B 
346ba     00 6B 00 6B 
346be     00 6B 00 6B 
346c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346c6     00 6B 00 6B 
346ca     00 6B 00 6B 
346ce     00 6B 00 6B 
346d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346d6     00 6B 00 6B 
346da     00 6B 00 6B 
346de     00 6B 00 6B 
346e2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346e6     00 6B 00 6B 
346ea     00 6B 00 6B 
346ee     00 6B 00 6B 
346f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
346f6     00 6B 00 6B 
346fa     00 6B 00 6B 
346fe     00 6B 00 6B 
34702     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34706     00 6B 00 6B 
3470a     00 6B 00 6B 
3470e     00 6B 00 6B 
34712     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34716     00 6B 00 6B 
3471a     00 6B 00 6B 
3471e     00 6A 00 9D 
34722     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
34726     00 9E 00 9E 
3472a     00 9E 00 9E 
3472e     00 9E 00 9E 
34732     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34736     00 9E 00 9E 
3473a     00 9E 00 9E 
3473e     00 9E 00 9E 
34742     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34746     00 9E 00 9E 
3474a     00 9E 00 9E 
3474e     00 9E 00 9E 
34752     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34756     00 9E 00 9E 
3475a     00 9E 00 9E 
3475e     00 9E 00 9E 
34762     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34766     00 9E 00 9E 
3476a     00 9E 00 9E 
3476e     00 9E 00 9E 
34772     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34776     00 9E 00 9E 
3477a     00 9E 00 9E 
3477e     00 9E 00 9E 
34782     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34786     00 9E 00 9E 
3478a     00 9E 00 9E 
3478e     00 9E 00 9E 
34792     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34796     00 9E 00 9E 
3479a     00 9E 00 9E 
3479e     00 9E 00 9E 
347a2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
347a6     00 9E 00 9E 
347aa     00 9E 00 9E 
347ae     00 9E 00 9E 
347b2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
347b6     00 9F 00 9F 
347ba     00 9F 00 9F 
347be     00 9F 00 9F 
347c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
347c6     00 9F 00 9F 
347ca     00 9F 00 9F 
347ce     00 9F 00 9F 
347d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
347d6     00 9F 00 9F 
347da     00 9F 00 9F 
347de     00 9F 00 9F 
347e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
347e6     00 9F 00 9F 
347ea     00 9F 00 9F 
347ee     00 9F 00 9F 
347f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
347f6     00 9F 00 9F 
347fa     00 9F 00 9F 
347fe     00 9F 00 9F 
34802     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34806     00 9F 00 9F 
3480a     00 9F 00 9F 
3480e     00 9F 00 9F 
34812     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34816     00 9F 00 9F 
3481a     00 9F 00 9F 
3481e     00 9F 00 9F 
34822     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34826     00 9F 00 9F 
3482a     00 9F 00 9F 
3482e     00 9F 00 9F 
34832     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34836     00 9F 00 9F 
3483a     00 9F 00 9F 
3483e     00 9F 00 9F 
34842     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34846     00 9F 00 9F 
3484a     00 9F 00 9F 
3484e     00 9F 00 9F 
34852     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34856     00 9F 00 9F 
3485a     00 9F 00 9F 
3485e     00 9F 00 9F 
34862     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34866     00 9F 00 9F 
3486a     00 9F 00 9F 
3486e     00 9F 00 9F 
34872     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34876     00 9F 00 9F 
3487a     00 9F 00 A0 
3487e     00 A0 00 A0 
34882     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34886     00 A0 00 A0 
3488a     00 A0 00 A0 
3488e     00 A0 00 A0 
34892     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34896     00 A0 00 A0 
3489a     00 A0 00 A0 
3489e     00 A0 00 A0 
348a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348a6     00 A0 00 A0 
348aa     00 A0 00 A0 
348ae     00 A0 00 A0 
348b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348b6     00 A0 00 A0 
348ba     00 A0 00 A0 
348be     00 A0 00 A0 
348c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348c6     00 A0 00 A0 
348ca     00 A0 00 A0 
348ce     00 A0 00 A0 
348d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348d6     00 A0 00 A0 
348da     00 A0 00 A0 
348de     00 A0 00 A0 
348e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348e6     00 A0 00 A0 
348ea     00 A0 00 A0 
348ee     00 A0 00 A0 
348f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
348f6     00 A0 00 A0 
348fa     00 A0 00 A0 
348fe     00 A0 00 A0 
34902     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34906     00 A0 00 A0 
3490a     00 A0 00 A0 
3490e     00 A0 00 A0 
34912     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34916     00 A0 00 A0 
3491a     00 A0 00 A0 
3491e     00 A0 00 A0 
34922     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34926     00 A0 00 A0 
3492a     00 A0 00 A0 
3492e     00 A0 00 A0 
34932     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34936     00 A0 00 A0 
3493a     00 A0 00 A0 
3493e     00 A0 00 A0 
34942     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
34946     00 6D 00 6D 
3494a     00 6D 00 6D 
3494e     00 6D 00 6D 
34952     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34956     00 6D 00 6D 
3495a     00 6D 00 6D 
3495e     00 6D 00 6D 
34962     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34966     00 6D 00 6D 
3496a     00 6D 00 6D 
3496e     00 6D 00 6D 
34972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34976     00 6D 00 6D 
3497a     00 6D 00 6D 
3497e     00 6D 00 6D 
34982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34986     00 6D 00 6D 
3498a     00 6D 00 6D 
3498e     00 6D 00 6D 
34992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34996     00 6D 00 6D 
3499a     00 6D 00 6D 
3499e     00 6D 00 6D 
349a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349a6     00 6D 00 6D 
349aa     00 6D 00 6D 
349ae     00 6D 00 6D 
349b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349b6     00 6D 00 6D 
349ba     00 6D 00 6D 
349be     00 6D 00 6D 
349c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349c6     00 6D 00 6D 
349ca     00 A0 00 A0 
349ce     00 A0 00 A0 
349d2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
349d6     00 A0 00 A0 
349da     00 A0 00 A0 
349de     00 A0 00 A0 
349e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
349e6     00 A0 00 A0 
349ea     00 A0 00 A0 
349ee     00 A0 00 A0 
349f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
349f6     00 A0 00 A0 
349fa     00 A0 00 A0 
349fe     00 A0 00 A0 
34a02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a06     00 A0 00 A0 
34a0a     00 A0 00 A0 
34a0e     00 A0 00 A0 
34a12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a16     00 A0 00 A0 
34a1a     00 A0 00 A0 
34a1e     00 A0 00 A0 
34a22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a26     00 A0 00 A0 
34a2a     00 A0 00 A0 
34a2e     00 A0 00 A0 
34a32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a36     00 A0 00 A0 
34a3a     00 A0 00 A0 
34a3e     00 A0 00 A0 
34a42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a46     00 A0 00 A0 
34a4a     00 A0 00 A0 
34a4e     00 A0 00 A0 
34a52     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
34a56     00 6D 00 6D 
34a5a     00 6D 00 6D 
34a5e     00 6D 00 6D 
34a62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34a66     00 6D 00 6D 
34a6a     00 6D 00 6D 
34a6e     00 6D 00 6D 
34a72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34a76     00 6D 00 6D 
34a7a     00 6D 00 6D 
34a7e     00 6D 00 6D 
34a82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34a86     00 6D 00 6D 
34a8a     00 6D 00 6D 
34a8e     00 6D 00 6D 
34a92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34a96     00 6D 00 6D 
34a9a     00 6D 00 6D 
34a9e     00 6D 00 6D 
34aa2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34aa6     00 6D 00 6D 
34aaa     00 6D 00 6D 
34aae     00 6D 00 6D 
34ab2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ab6     00 6D 00 6D 
34aba     00 6D 00 6D 
34abe     00 6D 00 6D 
34ac2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ac6     00 6D 00 6D 
34aca     00 6D 00 6D 
34ace     00 6D 00 6D 
34ad2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ad6     00 6D 00 6D 
34ada     00 6C 00 A0 
34ade     00 9F 00 A0 
34ae2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
34ae6     00 A0 00 A0 
34aea     00 A0 00 A0 
34aee     00 A0 00 A0 
34af2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34af6     00 A0 00 A0 
34afa     00 A0 00 A0 
34afe     00 A0 00 A0 
34b02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b06     00 A0 00 A0 
34b0a     00 A0 00 A0 
34b0e     00 A0 00 A0 
34b12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b16     00 A0 00 A0 
34b1a     00 A0 00 A0 
34b1e     00 A0 00 A0 
34b22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b26     00 A0 00 A0 
34b2a     00 A0 00 A0 
34b2e     00 A0 00 A0 
34b32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b36     00 A0 00 A0 
34b3a     00 A0 00 A0 
34b3e     00 A0 00 A0 
34b42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b46     00 A0 00 A0 
34b4a     00 A0 00 A0 
34b4e     00 A0 00 A0 
34b52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b56     00 A0 00 A0 
34b5a     00 A0 00 A0 
34b5e     00 A0 00 A0 
34b62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b66     00 A0 00 A0 
34b6a     00 A0 00 A0 
34b6e     00 A0 00 A0 
34b72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b76     00 A0 00 A0 
34b7a     00 A0 00 A0 
34b7e     00 A0 00 A0 
34b82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34b86     00 A0 00 A0 
34b8a     00 A0 00 A0 
34b8e     00 A0 00 A0 
34b92     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
34b96     00 A1 00 A1 
34b9a     00 A1 00 A1 
34b9e     00 A1 00 A1 
34ba2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34ba6     00 A1 00 A1 
34baa     00 A1 00 A1 
34bae     00 A1 00 A1 
34bb2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34bb6     00 A1 00 A1 
34bba     00 A1 00 A1 
34bbe     00 A1 00 A1 
34bc2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34bc6     00 A1 00 A1 
34bca     00 A1 00 A1 
34bce     00 A1 00 A1 
34bd2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34bd6     00 A1 00 A1 
34bda     00 A1 00 A1 
34bde     00 A1 00 A1 
34be2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34be6     00 A1 00 A1 
34bea     00 A1 00 A1 
34bee     00 6E 00 6E 
34bf2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34bf6     00 6E 00 6E 
34bfa     00 6E 00 6E 
34bfe     00 6E 00 6E 
34c02     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c06     00 6E 00 6E 
34c0a     00 6E 00 6E 
34c0e     00 6E 00 6E 
34c12     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c16     00 6E 00 6E 
34c1a     00 6E 00 6E 
34c1e     00 6E 00 6E 
34c22     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34c26     00 6E 00 6D 
34c2a     00 6D 00 6D 
34c2e     00 6D 00 6D 
34c32     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c36     00 6D 00 6D 
34c3a     00 6D 00 6D 
34c3e     00 6D 00 6D 
34c42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c46     00 6D 00 6D 
34c4a     00 6D 00 6D 
34c4e     00 6D 00 6D 
34c52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c56     00 6D 00 6D 
34c5a     00 6D 00 6D 
34c5e     00 6D 00 6D 
34c62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c66     00 6D 00 6D 
34c6a     00 6D 00 6D 
34c6e     00 6D 00 6D 
34c72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c76     00 6D 00 6D 
34c7a     00 6D 00 6D 
34c7e     00 6D 00 6D 
34c82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c86     00 6D 00 6D 
34c8a     00 6D 00 6D 
34c8e     00 6D 00 6D 
34c92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c96     00 6D 00 6D 
34c9a     00 6D 00 6D 
34c9e     00 6D 00 6D 
34ca2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34ca6     00 6D 00 6D 
34caa     00 6D 00 6D 
34cae     00 6D 00 6D 
34cb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cb6     00 6D 00 6D 
34cba     00 6D 00 6D 
34cbe     00 6D 00 6D 
34cc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cc6     00 6D 00 6D 
34cca     00 6D 00 6D 
34cce     00 6D 00 6D 
34cd2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34cd6     00 6D 00 6D 
34cda     00 6C 00 6C 
34cde     00 6C 00 6C 
34ce2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34ce6     00 6C 00 6C 
34cea     00 6C 00 6C 
34cee     00 6C 00 6C 
34cf2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cf6     00 6C 00 6C 
34cfa     00 6C 00 6C 
34cfe     00 9D 00 9F 
34d02     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
34d06     00 9F 00 9F 
34d0a     00 9F 00 9F 
34d0e     00 A0 00 A0 
34d12     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d16     00 A0 00 A0 
34d1a     00 A0 00 A0 
34d1e     00 A0 00 A0 
34d22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d26     00 A0 00 A0 
34d2a     00 A0 00 A0 
34d2e     00 A0 00 A0 
34d32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d36     00 A0 00 A0 
34d3a     00 A0 00 A0 
34d3e     00 A0 00 A0 
34d42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d46     00 A0 00 A0 
34d4a     00 A0 00 A0 
34d4e     00 A0 00 A0 
34d52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d56     00 A0 00 A0 
34d5a     00 A0 00 A0 
34d5e     00 A0 00 A0 
34d62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d66     00 A0 00 A0 
34d6a     00 A0 00 A0 
34d6e     00 A0 00 A0 
34d72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d76     00 A0 00 A0 
34d7a     00 A0 00 A0 
34d7e     00 A0 00 A0 
34d82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34d86     01 00 00 00 
34d8a     00 00 00 00 
34d8e     00 00 00 00 
34d92     00 00 00 00 | mouse  file "mouse2.def"
34d96     00 00 00 00 
34d9a     00 00 00 00 
34d9e     00 00 00 00 
34da2     00 00 00 00 | 	byte	$00[16]
34da6     01 01 00 00 
34daa     00 00 00 00 
34dae     00 00 00 00 
34db2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34db6     00 00 00 00 
34dba     00 00 00 00 
34dbe     00 00 00 00 
34dc2     00 00 00 00 | 	byte	$00[16]
34dc6     01 0D 01 00 
34dca     00 00 00 00 
34dce     00 00 00 00 
34dd2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34dd6     00 00 00 00 
34dda     00 00 00 00 
34dde     00 00 00 00 
34de2     00 00 00 00 | 	byte	$00[16]
34de6     01 0D 0D 01 
34dea     00 00 00 00 
34dee     00 00 00 00 
34df2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34df6     00 00 00 00 
34dfa     00 00 00 00 
34dfe     00 00 00 00 
34e02     00 00 00 00 | 	byte	$00[16]
34e06     01 0D 0D 0D 
34e0a     01 00 00 00 
34e0e     00 00 00 00 
34e12     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e16     00 00 00 00 
34e1a     00 00 00 00 
34e1e     00 00 00 00 
34e22     00 00 00 00 | 	byte	$00[16]
34e26     01 0D 0D 0D 
34e2a     0D 01 00 00 
34e2e     00 00 00 00 
34e32     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e36     00 00 00 00 
34e3a     00 00 00 00 
34e3e     00 00 00 00 
34e42     00 00 00 00 | 	byte	$00[16]
34e46     01 0D 0D 0D 
34e4a     0D 0D 01 00 
34e4e     00 00 00 00 
34e52     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e56     00 00 00 00 
34e5a     00 00 00 00 
34e5e     00 00 00 00 
34e62     00 00 00 00 | 	byte	$00[16]
34e66     01 0D 0D 0D 
34e6a     0D 0D 0D 01 
34e6e     00 00 00 00 
34e72     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
34e76     00 00 00 00 
34e7a     00 00 00 00 
34e7e     00 00 00 00 
34e82     00 00 00 00 | 	byte	$00[16]
34e86     01 0D 0D 0D 
34e8a     0D 0D 0D 0C 
34e8e     01 00 00 00 
34e92     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
34e96     00 00 00 00 
34e9a     00 00 00 00 
34e9e     00 00 00 00 
34ea2     00 00 00 00 | 	byte	$00[16]
34ea6     01 0D 0D 0D 
34eaa     0D 0D 0D 0D 
34eae     0C 01 00 00 
34eb2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
34eb6     00 00 00 00 
34eba     00 00 00 00 
34ebe     00 00 00 00 
34ec2     00 00 00 00 | 	byte	$00[16]
34ec6     01 0D 0D 0D 
34eca     0D 0D 0D 0D 
34ece     0D 0C 01 00 
34ed2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
34ed6     00 00 00 00 
34eda     00 00 00 00 
34ede     00 00 00 00 
34ee2     00 00 00 00 | 	byte	$00[16]
34ee6     01 0D 0D 0D 
34eea     0D 0D 0D 0D 
34eee     0D 0D 0B 01 
34ef2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
34ef6     00 00 00 00 
34efa     00 00 00 00 
34efe     00 00 00 00 
34f02     00 00 00 00 | 	byte	$00[16]
34f06     01 0D 0D 0D 
34f0a     0C 0D 0D 03 
34f0e     01 01 01 01 
34f12     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
34f16     00 00 00 00 
34f1a     00 00 00 00 
34f1e     00 00 00 00 
34f22     00 00 00 00 | 	byte	$00[16]
34f26     01 0D 0D 0C 
34f2a     01 09 0D 03 
34f2e     00 00 00 00 
34f32     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
34f36     00 00 00 00 
34f3a     00 00 00 00 
34f3e     00 00 00 00 
34f42     00 00 00 00 | 	byte	$00[16]
34f46     01 0D 0C 01 
34f4a     00 01 0D 0B 
34f4e     01 00 00 00 
34f52     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
34f56     00 00 00 00 
34f5a     00 00 00 00 
34f5e     00 00 00 00 
34f62     00 00 00 00 | 	byte	$00[16]
34f66     01 0C 01 00 
34f6a     00 01 0A 0D 
34f6e     01 00 00 00 
34f72     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
34f76     00 00 00 00 
34f7a     00 00 00 00 
34f7e     00 00 00 00 
34f82     00 00 00 00 | 	byte	$00[16]
34f86     01 01 00 00 
34f8a     00 00 01 0D 
34f8e     0B 01 00 00 
34f92     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
34f96     00 00 00 00 
34f9a     00 00 00 00 
34f9e     00 00 00 00 
34fa2     00 00 00 00 
34fa6     00 00 00 00 
34faa     00 00       | 	byte	$00[22]
34fac     01 0B 0D 01 
34fb0     00 00 00 00 
34fb4     00 00 00 00 
34fb8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34fbc     00 00 00 00 
34fc0     00 00 00 00 
34fc4     00 00 00 00 
34fc8     00 00 00 00 
34fcc     00          | 	byte	$00[17]
34fcd     01 01 00 00 
34fd1     00 00 00 00 
34fd5     00 00 00 00 
34fd9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34fdd     00 00 00 00 
      ...             
35181     00 00 00 00 
35185     00          | 	byte	$00[425]
35186                 | 
35186     00 00       |              	org
35188 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3518c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
35190 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
35194 003             | 
35194 003 00 30 04 F6 |                 mov     psramaddr,#0
35198 004             | 
35198 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3519c 005 20 00 00 FF 
351a0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
351a4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
351a8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
351ac 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
351b0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
351b4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
351b8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
351bc 00d             | 
351bc 00d 20 00 00 FF 
351c0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
351c4 00f E0 03 00 FF 
351c8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
351cc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
351d0 012             | 
351d0 012             |                 
351d0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
351d4 013             |     
351d4 013 01 2C 60 FD |                 cogid 	t11				' get id
351d8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
351dc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
351e0 016             | 
351e0 016 00 00 00 00 | t11 		long 	0
351e4 017 00 FF 07 00 | mailbox 	long 	$7FF00
351e8 018 00 00 00 00 | psramaddr 	long 	0
351ec 019 00 00 00 00 | pslockval	long 	0
351f0 01a 00 00 00 00 | cmd             long    0
351f4 01b 00 00 00 00 | buf1            long    0
351f8 01c 00 40 00 00 | buf2            long    16384
351fc 01d 00 52 03 00 | 	long	@@@_dat_ + 12612
35200 01e 50 32 20 52 
35204 01f 65 74 72 6F 
35208 020 6D 61 63 68 
3520c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
35210 022 42 41 53 49 
35214 023 43 20 76 65 
35218 024 72 73 69 6F 
3521c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
35220 026 33 32 00 00 | 	byte	$33, $32, $00, $00
35224 027             | 	alignl
35224 027             | _hg010b_spin2_dat_
35224 027             | 
35224 027 00 00 00 00 
35228 028 00 00 00 00 
3522c 029 00 00 00 00 
35230 02a 00 00 00 00 
35234 02b 00 00 00    | vga_font       file "vgafont.def"
35237 02b 7E 81 A5 81 
3523b 02c 81 BD 99 81 
3523f 02d 81 7E 00 00 
35243 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
35247 02f 7E FF DB FF 
3524b 030 FF C3 E7 FF 
3524f 031 FF 7E 00 00 
35253 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
35257 033 00 36 7F 7F 
3525b 034 7F 7F 3E 1C 
3525f 035 08 00 00 00 
35263 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
35267 037 00 08 1C 3E 
3526b 038 7F 3E 1C 08 
3526f 039 00 00 00 00 
35273 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
35277 03b 18 3C 3C E7 
3527b 03c E7 E7 18 18 
3527f 03d 3C 00 00 00 
35283 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
35287 03f 18 3C 7E FF 
3528b 040 FF 7E 18 18 
3528f 041 3C 00 00 00 
35293 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
35297 043 00 00 00 18 
3529b 044 3C 3C 18 00 
3529f 045 00 00 00 00 
352a3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
352a7 047 FF FF FF E7 
352ab 048 C3 C3 E7 FF 
352af 049 FF FF FF FF 
352b3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
352b7 04b 00 00 3C 66 
352bb 04c 42 42 66 3C 
352bf 04d 00 00 00 00 
352c3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
352c7 04f FF FF C3 99 
352cb 050 BD BD 99 C3 
352cf 051 FF FF FF FF 
352d3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
352d7 053 78 70 58 4C 
352db 054 1E 33 33 33 
352df 055 33 1E 00 00 
352e3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
352e7 057 3C 66 66 66 
352eb 058 66 3C 18 7E 
352ef 059 18 18 00 00 
352f3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
352f7 05b FC CC FC 0C 
352fb 05c 0C 0C 0C 0E 
352ff 05d 0F 07 00 00 
35303 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
35307 05f FE C6 FE C6 
3530b 060 C6 C6 C6 E6 
3530f 061 E7 67 03 00 
35313 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
35317 063 18 18 DB 3C 
3531b 064 E7 3C DB 18 
3531f 065 18 00 00 00 
35323 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
35327 067 03 07 0F 1F 
3532b 068 7F 1F 0F 07 
3532f 069 03 01 00 00 
35333 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
35337 06b 60 70 78 7C 
3533b 06c 7F 7C 78 70 
3533f 06d 60 40 00 00 
35343 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
35347 06f 18 3C 7E 18 
3534b 070 18 18 7E 3C 
3534f 071 18 00 00 00 
35353 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
35357 073 66 66 66 66 
3535b 074 66 66 66    | 	byte	$66[7]
3535e 075 00 66 66 00 
35362 076 00 00 00 00 
35366 077 00 FE DB DB 
3536a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3536e 079 D8 D8 D8 00 
35372 07a 00 00 00 3E 
35376 07b 63 06 1C 36 
3537a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3537e 07d 30 63 3E 00 
35382 07e 00 00 00 00 
35386 07f 00 00 00 00 
3538a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3538e 081 7F 7F 7F 00 
35392 082 00 00 00 00 
35396 083 00 18 3C 7E 
3539a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3539e 085 3C 18 7E 00 
353a2 086 00 00 00 00 
353a6 087 00 18 3C 7E 
353aa 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
353ae 089 18 18 18 00 
353b2 08a 00 00 00 00 
353b6 08b 00 18 18 18 
353ba 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
353be 08d 7E 3C 18 00 
353c2 08e 00 00 00 00 
353c6 08f 00 00 00 18 
353ca 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
353ce 091 00 00 00 00 
353d2 092 00 00 00 00 
353d6 093 00 00 00    | 	byte	$00[11]
353d9 094 0C 06 7F 06 
353dd 095 0C 00 00 00 
353e1 096 00 00 00 00 
353e5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
353e9 098 00 03 03 03 
353ed 099 7F 00 00 00 
353f1 09a 00 00 00 00 
353f5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
353f9 09c 14 36 7F 36 
353fd 09d 14 00 00 00 
35401 09e 00 00 00 00 
35405 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
35409 0a0 1C 1C 3E 3E 
3540d 0a1 7F 7F 00 00 
35411 0a2 00 00 00 00 
35415 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35419 0a4 7F 3E 3E 1C 
3541d 0a5 1C 08 00 00 
35421 0a6 00 00 00 00 
35425 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35429 0a8 00 00 00 00 
3542d 0a9 00 00 00 00 
35431 0aa 00 00 00 00 
35435 0ab 00 00       | 	byte	$00[14]
35437 0ab 18 3C 3C 3C 
3543b 0ac 18 18 18 00 
3543f 0ad 18 18 00 00 
35443 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
35447 0af 66 24 00 00 
3544b 0b0 00 00 00 00 
3544f 0b1 00 00 00 00 
35453 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35457 0b3 00 36 36 7F 
3545b 0b4 36 36 36 7F 
3545f 0b5 36 36 00 00 
35463 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
35467 0b7 3E 63 43 03 
3546b 0b8 3E 60 60 61 
3546f 0b9 63 3E 18 18 
35473 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
35477 0bb 00 00 43 63 
3547b 0bc 30 18 0C 06 
3547f 0bd 63 61 00 00 
35483 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
35487 0bf 1C 36 36 1C 
3548b 0c0 6E 3B 33 33 
3548f 0c1 33 6E 00 00 
35493 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
35497 0c3 0C 0C 0C 06 
3549b 0c4 00 00 00 00 
3549f 0c5 00 00 00 00 
354a3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354a7 0c7 30 18 0C 0C 
354ab 0c8 0C 0C 0C 0C 
354af 0c9 18 30 00 00 
354b3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
354b7 0cb 0C 18 30 30 
354bb 0cc 30 30 30 30 
354bf 0cd 18 0C 00 00 
354c3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
354c7 0cf 00 00 00 66 
354cb 0d0 3C FF 3C 66 
354cf 0d1 00 00 00 00 
354d3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
354d7 0d3 00 00 00 18 
354db 0d4 18 7E 18 18 
354df 0d5 00 00 00 00 
354e3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
354e7 0d7 00 00 00 00 
354eb 0d8 00 00 00 00 | 	byte	$00[8]
354ef 0d9 18 18 18 0C 
354f3 0da 00 00 00 00 
354f7 0db 00 00 00 00 
354fb 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
354ff 0dd 00 00 00 00 
35503 0de 00 00 00 00 
35507 0df 00 00 00 00 
3550b 0e0 00 00 00 00 | 	byte	$00[16]
3550f 0e1 18 18 00 00 
35513 0e2 00 00 00 00 
35517 0e3 00 00 40 60 
3551b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3551f 0e5 03 01 00 00 
35523 0e6 00 00 00 00 
35527 0e7 1C 36 63 63 
3552b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3552f 0e9 36 1C 00 00 
35533 0ea 00 00 00 00 
35537 0eb 18 1C 1E 18 
3553b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3553f 0ed 18 7E 00 00 
35543 0ee 00 00 00 00 
35547 0ef 3E 63 60 30 
3554b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3554f 0f1 63 7F 00 00 
35553 0f2 00 00 00 00 
35557 0f3 3E 63 60 60 
3555b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3555f 0f5 63 3E 00 00 
35563 0f6 00 00 00 00 
35567 0f7 30 38 3C 36 
3556b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3556f 0f9 30 78 00 00 
35573 0fa 00 00 00 00 
35577 0fb 7F 03 03 03 
3557b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3557f 0fd 63 3E 00 00 
35583 0fe 00 00 00 00 
35587 0ff 1C 06 03 03 
3558b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3558f 101 63 3E 00 00 
35593 102 00 00 00 00 
35597 103 7F 63 60 60 
3559b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3559f 105 0C 0C 00 00 
355a3 106 00 00 00 00 
355a7 107 3E 63 63 63 
355ab 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
355af 109 63 3E 00 00 
355b3 10a 00 00 00 00 
355b7 10b 3E 63 63 63 
355bb 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
355bf 10d 30 1E 00 00 
355c3 10e 00 00 00 00 
355c7 10f 00 00 00 18 
355cb 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
355cf 111 18 18 00 00 
355d3 112 00 00 00 00 
355d7 113 00 00 00 18 
355db 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
355df 115 18 18 0C 00 
355e3 116 00 00 00 00 
355e7 117 00 60 30 18 
355eb 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
355ef 119 30 60 00 00 
355f3 11a 00 00 00 00 
355f7 11b 00 00 00 7E 
355fb 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
355ff 11d 00 00 00 00 
35603 11e 00 00 00 00 
35607 11f 00          | 	byte	$00[9]
35608 120 06 0C 18 30 
3560c 121 60 30 18 0C 
35610 122 06 00 00 00 
35614 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
35618 124 63 63 30 18 
3561c 125 18 18 00 18 
35620 126 18 00 00 00 
35624 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
35628 128 3E 63 63 7B 
3562c 129 7B 7B 3B 03 
35630 12a 3E 00 00 00 
35634 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
35638 12c 1C 36 63 63 
3563c 12d 7F 63 63 63 
35640 12e 63 00 00 00 
35644 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
35648 130 66 66 66 3E 
3564c 131 66 66 66 66 
35650 132 3F 00 00 00 
35654 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
35658 134 66 43 03 03 
3565c 135 03 03 43 66 
35660 136 3C 00 00 00 
35664 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
35668 138 36 66 66 66 
3566c 139 66 66 66 36 
35670 13a 1F 00 00 00 
35674 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
35678 13c 66 46 16 1E 
3567c 13d 16 06 46 66 
35680 13e 7F 00 00 00 
35684 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
35688 140 66 46 16 1E 
3568c 141 16 06 06 06 
35690 142 0F 00 00 00 
35694 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
35698 144 66 43 03 03 
3569c 145 7B 63 63 66 
356a0 146 5C 00 00 00 
356a4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
356a8 148 63 63 63 7F 
356ac 149 63 63 63 63 
356b0 14a 63 00 00 00 
356b4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
356b8 14c 18 18 18 18 
356bc 14d 18 18 18 18 | 	byte	$18[8]
356c0 14e 3C 00 00 00 
356c4 14f 00 00 00 78 
356c8 150 30 30 30 30 
356cc 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
356d0 152 1E 00 00 00 
356d4 153 00 00 00 67 
356d8 154 66 66 36 1E 
356dc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
356e0 156 67 00 00 00 
356e4 157 00 00 00 0F 
356e8 158 06 06 06 06 
356ec 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
356f0 15a 7F 00 00 00 
356f4 15b 00 00 00 63 
356f8 15c 77 7F 7F 6B 
356fc 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
35700 15e 63 00 00 00 
35704 15f 00 00 00 63 
35708 160 67 6F 7F 7B 
3570c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
35710 162 63 00 00 00 
35714 163 00 00 00 3E 
35718 164 63 63 63 63 
3571c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35720 166 3E 00 00 00 
35724 167 00 00 00 3F 
35728 168 66 66 66 3E 
3572c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
35730 16a 0F 00 00 00 
35734 16b 00 00 00 3E 
35738 16c 63 63 63 63 
3573c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
35740 16e 3E 30 70 00 
35744 16f 00 00 00 3F 
35748 170 66 66 66 3E 
3574c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
35750 172 67 00 00 00 
35754 173 00 00 00 3E 
35758 174 63 63 06 1C 
3575c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35760 176 3E 00 00 00 
35764 177 00 00 00 7E 
35768 178 7E 5A 18 18 
3576c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
35770 17a 3C 00 00 00 
35774 17b 00 00 00 63 
35778 17c 63 63 63 63 
3577c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
35780 17e 3E 00 00 00 
35784 17f 00 00 00 63 
35788 180 63 63 63 63 
3578c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
35790 182 08 00 00 00 
35794 183 00 00 00 63 
35798 184 63 63 63 6B 
3579c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
357a0 186 36 00 00 00 
357a4 187 00 00 00 63 
357a8 188 63 36 3E 1C 
357ac 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
357b0 18a 63 00 00 00 
357b4 18b 00 00 00 66 
357b8 18c 66 66 66 3C 
357bc 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
357c0 18e 3C 00 00 00 
357c4 18f 00 00 00 7F 
357c8 190 63 61 30 18 
357cc 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
357d0 192 7F 00 00 00 
357d4 193 00 00 00 3C 
357d8 194 0C 0C 0C 0C 
357dc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
357e0 196 3C 00 00 00 
357e4 197 00 00 00 00 
357e8 198 01 03 07 0E 
357ec 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
357f0 19a 40 00 00 00 
357f4 19b 00 00 00 3C 
357f8 19c 30 30 30 30 
357fc 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
35800 19e 3C 00 00 00 
35804 19f 1C 36 00 00 
35808 1a0 00 00 00 00 
3580c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35810 1a2 00 00 00 00 
35814 1a3 00 00 00 00 
35818 1a4 00 00 00 00 
3581c 1a5 00 00 00 00 
35820 1a6 00          | 	byte	$00[17]
35821 1a6 FF 00 00 0C 
35825 1a7 18 00 00 00 
35829 1a8 00 00 00 00 
3582d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35831 1aa 00 00 00 00 
35835 1ab 00 00 00 00 
35839 1ac 00          | 	byte	$00[9]
3583a 1ac 1E 30 3E 33 
3583e 1ad 33 33 6E 00 
35842 1ae 00 00 00 00 
35846 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3584a 1b0 1E 36 66 66 
3584e 1b1 66 66 3E 00 
35852 1b2 00 00 00 00 
35856 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3585a 1b4 3E 63 03 03 
3585e 1b5 03 63 3E 00 
35862 1b6 00 00 00 00 
35866 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3586a 1b8 3C 36 33 33 
3586e 1b9 33 33 6E 00 
35872 1ba 00 00 00 00 
35876 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3587a 1bc 3E 63 7F 03 
3587e 1bd 03 63 3E 00 
35882 1be 00 00 00 00 
35886 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3588a 1c0 0C 1E 0C 0C 
3588e 1c1 0C 0C 1E 00 
35892 1c2 00 00 00 00 
35896 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3589a 1c4 6E 33 33 33 
3589e 1c5 33 33 3E 30 
358a2 1c6 33 1E 00 00 
358a6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
358aa 1c8 36 6E 66 66 
358ae 1c9 66 66 67 00 
358b2 1ca 00 00 00 00 
358b6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
358ba 1cc 1C 18 18 18 
358be 1cd 18 18 3C 00 
358c2 1ce 00 00 00 00 
358c6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
358ca 1d0 70 60 60 60 
358ce 1d1 60 60 60 66 
358d2 1d2 66 3C 00 00 
358d6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
358da 1d4 66 36 1E 1E 
358de 1d5 36 66 67 00 
358e2 1d6 00 00 00 00 
358e6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
358ea 1d8 18 18 18 18 
358ee 1d9 18 18       | 	byte	$18[6]
358f0 1da 3C 00 00 00 
358f4 1db 00 00 00 00 
358f8 1dc 00 00 37 7F 
358fc 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
35900 1de 63 00 00 00 
35904 1df 00 00 00 00 
35908 1e0 00 00 3B 66 
3590c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35910 1e2 66 00 00 00 
35914 1e3 00 00 00 00 
35918 1e4 00 00 3E 63 
3591c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
35920 1e6 3E 00 00 00 
35924 1e7 00 00 00 00 
35928 1e8 00 00 3B 66 
3592c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35930 1ea 3E 06 06 0F 
35934 1eb 00 00 00 00 
35938 1ec 00 00 6E 33 
3593c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
35940 1ee 3E 30 30 78 
35944 1ef 00 00 00 00 
35948 1f0 00 00 3B 6E 
3594c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
35950 1f2 0F 00 00 00 
35954 1f3 00 00 00 00 
35958 1f4 00 00 3E 63 
3595c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
35960 1f6 3E 00 00 00 
35964 1f7 00 00 00 08 
35968 1f8 0C 0C 3F 0C 
3596c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
35970 1fa 38 00 00 00 
35974 1fb 00 00 00 00 
35978 1fc 00 00 33 33 
3597c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
35980 1fe 6E 00 00 00 
35984 1ff 00 00 00 00 
35988 200 00 00 63 63 
3598c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
35990 202 1C 00 00 00 
35994 203 00 00 00 00 
35998 204 00 00 63 63 
3599c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
359a0 206 36 00 00 00 
359a4 207 00 00 00 00 
359a8 208 00 00 63 36 
359ac 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
359b0 20a 63 00 00 00 
359b4 20b 00 00 00 00 
359b8 20c 00 00 63 63 
359bc 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
359c0 20e 7E 60 30 1F 
359c4 20f 00 00 00 00 
359c8 210 00 00 7F 33 
359cc 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
359d0 212 7F 00 00 00 
359d4 213 00 00 00 70 
359d8 214 18 18 18 0E 
359dc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
359e0 216 70 00 00 00 
359e4 217 00 00 00 18 
359e8 218 18 18 18 18 
359ec 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
359f0 21a 18 00 00 00 
359f4 21b 00 00 00 0E 
359f8 21c 18 18 18 70 
359fc 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
35a00 21e 0E 00 00 00 
35a04 21f 6E 3B 00 00 
35a08 220 00 00 00 00 
35a0c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35a10 222 00 00 00 00 
35a14 223 00 00 00 00 
35a18 224 00 00       | 	byte	$00[10]
35a1a 224 08 1C 36 63 
35a1e 225 63 63 7F 00 
35a22 226 00 00 00 00 
35a26 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
35a2a 228 03 03 03 03 
35a2e 229 43 66 3C 18 
35a32 22a 30 1E 00 00 
35a36 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
35a3a 22c 33 33 33 33 
35a3e 22d 33 33       | 	byte	$33[6]
35a40 22e 6E 00 00 00 
35a44 22f 00 00 60 30 
35a48 230 18 00 3E 63 
35a4c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
35a50 232 3E 00 00 00 
35a54 233 00 00 08 1C 
35a58 234 36 00 1E 30 
35a5c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
35a60 236 6E 00 00 00 
35a64 237 00 00 00 00 
35a68 238 33 00 1E 30 
35a6c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
35a70 23a 6E 00 00 00 
35a74 23b 00 00 1C 36 
35a78 23c 1C 00 33 33 
35a7c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
35a80 23e 6E 00 00 00 
35a84 23f 00 00 60 30 
35a88 240 18 00 3E 63 
35a8c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
35a90 242 3E 00 00 00 
35a94 243 00 00 00 00 
35a98 244 00 00 3E 63 
35a9c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
35aa0 246 3E 18 30 1E 
35aa4 247 00 00 00 1C 
35aa8 248 58 78 38 18 
35aac 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
35ab0 24a 3C 00 00 00 
35ab4 24b 00 00 00 00 
35ab8 24c 63 00 3E 63 
35abc 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
35ac0 24e 3E 00 00 00 
35ac4 24f 66 33 00 3E 
35ac8 250 63 63 63 63 
35acc 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35ad0 252 3E 00 00 00 
35ad4 253 00 00 CC 66 
35ad8 254 33 00 3E 63 
35adc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
35ae0 256 3E 00 00 00 
35ae4 257 00 00 18 3C 
35ae8 258 66 00 1C 18 
35aec 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
35af0 25a 3C 00 00 00 
35af4 25b 30 18 00 7F 
35af8 25c 63 61 30 18 
35afc 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
35b00 25e 7F 00 00 00 
35b04 25f 00 63 00 08 
35b08 260 1C 36 63 63 
35b0c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
35b10 262 63 00 00 00 
35b14 263 30 18 00 3C 
35b18 264 66 43 03 03 
35b1c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
35b20 266 3C 00 00 00 
35b24 267 30 18 00 7F 
35b28 268 66 46 16 1E 
35b2c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
35b30 26a 7F 00 00 00 
35b34 26b 0C 06 00 0F 
35b38 26c 06 06 06 06 
35b3c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
35b40 26e 7F 00 00 00 
35b44 26f 30 18 00 1C 
35b48 270 18 18 18 18 
35b4c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
35b50 272 3C 00 00 00 
35b54 273 00 00 08 1C 
35b58 274 36 00 3E 63 
35b5c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
35b60 276 3E 00 00 00 
35b64 277 00 00 00 00 
35b68 278 63 00 3E 63 
35b6c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
35b70 27a 3E 00 00 00 
35b74 27b 00 00 00 6F 
35b78 27c 46 26 06 06 
35b7c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
35b80 27e 7F 00 00 00 
35b84 27f 00 00 00 6E 
35b88 280 4C 2C 0C 0C 
35b8c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
35b90 282 1E 00 00 00 
35b94 283 30 18 00 3E 
35b98 284 63 63 06 1C 
35b9c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35ba0 286 3E 00 00 00 
35ba4 287 00 00 60 30 
35ba8 288 18 00 3E 63 
35bac 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
35bb0 28a 3E 00 00 00 
35bb4 28b 00 63 00 3E 
35bb8 28c 63 63 63 63 
35bbc 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35bc0 28e 3E 00 00 00 
35bc4 28f 00 63 00 63 
35bc8 290 63 63 63 63 
35bcc 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
35bd0 292 3E 00 00 00 
35bd4 293 6C 38 00 7E 
35bd8 294 7E 5A 18 18 
35bdc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
35be0 296 3C 00 00 00 
35be4 297 00 00 60 48 
35be8 298 2C 0C 3F 0C 
35bec 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
35bf0 29a 38 00 00 00 
35bf4 29b 00 00 00 0F 
35bf8 29c 26 36 1E 0E 
35bfc 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
35c00 29e 7F 00 00 00 
35c04 29f 00 00 00 00 
35c08 2a0 00 63 36 1C 
35c0c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
35c10 2a2 00 00 00 00 
35c14 2a3 00 00       | 	byte	$00[6]
35c16 2a3 36 1C 08 00 
35c1a 2a4 3E 63 03 03 
35c1e 2a5 03 63 3E 00 
35c22 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
35c26 2a7 30 18 0C 00 
35c2a 2a8 1E 30 3E 33 
35c2e 2a9 33 33 6E 00 
35c32 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
35c36 2ab 60 30 18 00 
35c3a 2ac 1C 18 18 18 
35c3e 2ad 18 18 3C 00 
35c42 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
35c46 2af 60 30 18 00 
35c4a 2b0 3E 63 63 63 
35c4e 2b1 63 63 3E 00 
35c52 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
35c56 2b3 30 18 0C 00 
35c5a 2b4 33 33 33 33 
35c5e 2b5 33 33 6E 00 
35c62 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
35c66 2b7 00 08 1C 36 
35c6a 2b8 63 63 7F 63 
35c6e 2b9 63 63 63 18 
35c72 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
35c76 2bb 00 00 00 00 
35c7a 2bc 1E 30 3E 33 
35c7e 2bd 33 33 6E 18 
35c82 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
35c86 2bf 00 7F 63 61 
35c8a 2c0 30 18 0C 06 
35c8e 2c1 43 63 7F 00 
35c92 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
35c96 2c3 36 1C 08 00 
35c9a 2c4 7F 33 18 0C 
35c9e 2c5 06 63 7F 00 
35ca2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
35ca6 2c7 00 7F 66 46 
35caa 2c8 16 1E 16 06 
35cae 2c9 46 66 7F 18 
35cb2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
35cb6 2cb 00 00 00 00 
35cba 2cc 3E 63 7F 03 
35cbe 2cd 03 63 3E 18 
35cc2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
35cc6 2cf 00 3C 66 03 
35cca 2d0 1F 03 0F 03 
35cce 2d1 03 66 3C 00 
35cd2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
35cd6 2d3 60 30 18 00 
35cda 2d4 7F 33 18 0C 
35cde 2d5 06 63 7F 00 
35ce2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
35ce6 2d7 00 3C 66 43 
35cea 2d8 03 03 03 03 
35cee 2d9 43 66 3C 00 
35cf2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
35cf6 2db 00 00 00 00 
35cfa 2dc 3E 63 06 1C 
35cfe 2dd 30 63 3E 18 
35d02 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
35d06 2df 00 00 00 00 
35d0a 2e0 00 00       | 	byte	$00[6]
35d0c 2e1 6C 36 1B 36 
35d10 2e2 6C 00 00 00 
35d14 2e3 00 00 00 00 
35d18 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d1c 2e5 1B 36 6C 36 
35d20 2e6 1B 00 00 00 
35d24 2e7 88 22 88 22 
35d28 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
35d2c 2e9 88 22 88 22 
35d30 2ea 88 22 88 22 
35d34 2eb AA 55 AA 55 
35d38 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
35d3c 2ed AA 55 AA 55 
35d40 2ee AA 55 AA 55 
35d44 2ef BB EE BB EE 
35d48 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
35d4c 2f1 BB EE BB EE 
35d50 2f2 BB EE BB EE 
35d54 2f3 18 18 18 18 
35d58 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
35d5c 2f5 18 18 18 18 
35d60 2f6 18 18 18 18 
35d64 2f7 18 18 18 18 
35d68 2f8 18 18 18    | 	byte	$18[15]
35d6b 2f8 1F 18 18 18 
35d6f 2f9 18 18 18 18 
35d73 2fa 18 30 18 00 
35d77 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
35d7b 2fc 63 7F 63 63 
35d7f 2fd 63 63 00 00 
35d83 2fe 00 1C 36 00 
35d87 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
35d8b 300 63 7F 63 63 
35d8f 301 63 63 00 00 
35d93 302 00 36 1C 00 
35d97 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
35d9b 304 1E 16 06 46 
35d9f 305 66 7F 00 00 
35da3 306 00 00 00 00 
35da7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
35dab 308 1C 30 60 63 
35daf 309 63 3E 18 30 
35db3 30a 1E 6C 6C 6C 
35db7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
35dbb 30c 6F 6C 6C 6C 
35dbf 30d 6C 6C 6C 6C 
35dc3 30e 6C 6C 6C 6C 
35dc7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35dcb 310 6C 6C 6C 6C 
35dcf 311 6C 6C 6C 6C 
35dd3 312 6C          | 	byte	$6c[9]
35dd4 313 00 00 00 00 
35dd8 314 00          | 	byte	$00[5]
35dd9 314 7F 60 6F 6C 
35ddd 315 6C 6C 6C 6C 
35de1 316 6C 6C 6C 6C 
35de5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35de9 318 6F 60 7F 00 
35ded 319 00 00 00 00 
35df1 31a 00 00 00 18 
35df5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
35df9 31c 61 30 18 0C 
35dfd 31d 06 43 63 7F 
35e01 31e 00 00 00 00 
35e05 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
35e09 320 00 7F 33 18 
35e0d 321 0C 06 63 7F 
35e11 322 00 00 00 00 
35e15 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
35e19 324 00 00 1F 18 
35e1d 325 18 18 18 18 
35e21 326 18 18 18 18 
35e25 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35e29 328 18 18 F8 00 
35e2d 329 00 00 00 00 
35e31 32a 00 00 00 18 
35e35 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35e39 32c 18 18 FF 00 
35e3d 32d 00 00 00 00 
35e41 32e 00 00 00 00 
35e45 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e49 330 00 00 FF 18 
35e4d 331 18 18 18 18 
35e51 332 18 18 18 18 
35e55 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35e59 334 18 18 F8 18 
35e5d 335 18 18 18 18 
35e61 336 18 18 18 00 
35e65 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35e69 338 00 00 FF 00 
35e6d 339 00 00 00 00 
35e71 33a 00 00 00 18 
35e75 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35e79 33c 18 18 FF 18 
35e7d 33d 18 18 18 18 
35e81 33e 18 18 18 63 
35e85 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
35e89 340 36 63 63 7F 
35e8d 341 63 63 63 63 
35e91 342 00 00 00 00 
35e95 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
35e99 344 00 1E 30 3E 
35e9d 345 33 33 33 6E 
35ea1 346 00 00 00 6C 
35ea5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35ea9 348 EC 0C FC 00 
35ead 349 00 00 00 00 
35eb1 34a 00 00 00 00 
35eb5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35eb9 34c FC 0C EC 6C 
35ebd 34d 6C 6C 6C 6C 
35ec1 34e 6C 6C 6C 6C 
35ec5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35ec9 350 EF 00 FF 00 
35ecd 351 00 00 00 00 
35ed1 352 00 00 00 00 
35ed5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ed9 354 FF 00 EF 6C 
35edd 355 6C 6C 6C 6C 
35ee1 356 6C 6C 6C 6C 
35ee5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35ee9 358 EC 0C EC 6C 
35eed 359 6C 6C 6C 6C 
35ef1 35a 6C 6C 6C 00 
35ef5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35ef9 35c FF 00 FF 00 
35efd 35d 00 00 00 00 
35f01 35e 00 00 00 6C 
35f05 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35f09 360 EF 00 EF 6C 
35f0d 361 6C 6C 6C 6C 
35f11 362 6C 6C 6C 00 
35f15 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35f19 364 63 3E 63 63 
35f1d 365 63 63 3E 63 
35f21 366 00 00 00 00 
35f25 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
35f29 368 30 3C 36 33 
35f2d 369 33 33 33 6E 
35f31 36a 00 00 00 00 
35f35 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
35f39 36c 66 66 6F 66 
35f3d 36d 66 66 36 1F 
35f41 36e 00 00 00 36 
35f45 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
35f49 370 66 66 66 66 
35f4d 371 66 66       | 	byte	$66[6]
35f4f 371 36 1F 00 00 
35f53 372 00 00 63 00 
35f57 373 7F 66 46 16 
35f5b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
35f5f 375 66 7F 00 00 
35f63 376 00 6C 38 00 
35f67 377 38 30 30 3C 
35f6b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
35f6f 379 33 6E 00 00 
35f73 37a 00 36 1C 00 
35f77 37b 63 67 6F 7F 
35f7b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
35f7f 37d 63 63 00 00 
35f83 37e 00 30 18 00 
35f87 37f 3C 18 18 18 
35f8b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35f8f 381 18 3C 00 00 
35f93 382 00 3C 66 00 
35f97 383 3C 18 18 18 
35f9b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35f9f 385 18 3C 00 00 
35fa3 386 00 00 00 36 
35fa7 387 1C 08 00 3E 
35fab 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
35faf 389 63 3E 00 00 
35fb3 38a 00 18 18 18 
35fb7 38b 18 18 18 18 
35fbb 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
35fbf 38d 00 00 00 00 
35fc3 38e 00 00 00 00 
35fc7 38f 00 00 00 00 | 	byte	$00[12]
35fcb 390 F8 18 18 18 
35fcf 391 18 18 18 18 
35fd3 392 18 FF FF FF 
35fd7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
35fdb 394 FF FF FF FF 
35fdf 395 FF FF FF FF 
35fe3 396 FF          | 	byte	$ff[9]
35fe4 397 00 00 00 00 
35fe8 398 00 00 00    | 	byte	$00[7]
35feb 398 FF FF FF FF 
35fef 399 FF FF FF FF 
35ff3 39a FF          | 	byte	$ff[9]
35ff4 39b 00 00 00 7E 
35ff8 39c 7E 5A 18 18 
35ffc 39d 18 18 18 18 
36000 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
36004 39f 1C 36 1C 63 
36008 3a0 63 63 63 63 
3600c 3a1 63 63 63 63 
36010 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36014 3a3 FF FF FF FF 
36018 3a4 FF FF FF    | 	byte	$ff[7]
3601b 3a4 00 00 00 00 
3601f 3a5 00 00 00 00 
36023 3a6 00          | 	byte	$00[9]
36024 3a7 30 18 00 3E 
36028 3a8 63 63 63 63 
3602c 3a9 63 63 63 63 
36030 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36034 3ab 00 00 00 1E 
36038 3ac 33 33 33 1B 
3603c 3ad 33 63 63 63 
36040 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
36044 3af 1C 36 00 3E 
36048 3b0 63 63 63 63 
3604c 3b1 63 63 63 63 
36050 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36054 3b3 30 18 00 63 
36058 3b4 67 6F 7F 7B 
3605c 3b5 73 63 63 63 
36060 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
36064 3b7 00 00 60 30 
36068 3b8 18 00 3B 66 
3606c 3b9 66 66 66 66 
36070 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
36074 3bb 00 00 36 1C 
36078 3bc 08 00 3B 66 
3607c 3bd 66 66 66 66 
36080 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
36084 3bf 36 1C 00 3E 
36088 3c0 63 63 06 1C 
3608c 3c1 30 60 63 63 
36090 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
36094 3c3 00 00 36 1C 
36098 3c4 08 00 3E 63 
3609c 3c5 06 1C 30 63 
360a0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
360a4 3c7 30 18 00 3F 
360a8 3c8 66 66 66 3E 
360ac 3c9 36 66 66 66 
360b0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
360b4 3cb 30 18 00 63 
360b8 3cc 63 63 63 63 
360bc 3cd 63 63 63 63 
360c0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
360c4 3cf 00 00 60 30 
360c8 3d0 18 00 3B 6E 
360cc 3d1 66 06 06 06 
360d0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
360d4 3d3 66 33 00 63 
360d8 3d4 63 63 63 63 
360dc 3d5 63 63 63 63 
360e0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
360e4 3d7 00 00 60 30 
360e8 3d8 18 00 63 63 
360ec 3d9 63 63 63 63 
360f0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
360f4 3db 30 18 00 66 
360f8 3dc 66 66 66 3C 
360fc 3dd 18 18 18 18 
36100 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
36104 3df 00 00 00 08 
36108 3e0 0C 0C 3F 0C 
3610c 3e1 0C 0C 0C 6C 
36110 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
36114 3e3 30 18 00 00 
36118 3e4 00 00 00 00 
3611c 3e5 00 00 00 00 
36120 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36124 3e7 00 00 00 00 
36128 3e8 00 00 00 00 | 	byte	$00[8]
3612c 3e9 7F 00 00 00 
36130 3ea 00 00 00 00 
36134 3eb 66 33 00 00 
36138 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3613c 3ed 00 00 00 00 
36140 3ee 00 00 00 00 
36144 3ef 00 00 00 00 
36148 3f0 00 00 00 00 
3614c 3f1 00 00 00 00 
36150 3f2 00          | 	byte	$00[21]
36151 3f2 0C 06 3C 36 
36155 3f3 1C 00 00 00 
36159 3f4 00 00 00 00 
3615d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36161 3f6 00 00 00 63 
36165 3f7 3E 00 00 00 
36169 3f8 00 00 00 00 
3616d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36171 3fa 00 00 00 00 
36175 3fb 3E 63 06 1C 
36179 3fc 36 63 63 36 
3617d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
36181 3fe 00 00 00 00 
36185 3ff 00 00 00 00 | 	byte	$00[8]
36189 400 18 00 7E 00 
3618d 401 18 00 00 00 
36191 402 00 00 00 00 
36195 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36199 404 00 00 00 00 
3619d 405 00 00 00 00 | 	byte	$00[8]
361a1 406 18 30 1E 00 
361a5 407 00 00 1C 36 
361a9 408 36 1C 00 00 
361ad 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
361b1 40a 00 00 00 00 
361b5 40b 63 00 00 00 
361b9 40c 00 00 00 00 
361bd 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361c1 40e 00 00 00 18 
361c5 40f 18 00 00 00 
361c9 410 00 00 00 00 
361cd 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361d1 412 00 00 00 00 
361d5 413 00          | 	byte	$00[5]
361d6 413 CC 66 33 00 
361da 414 33 33 33 33 
361de 415 33 33 6E 00 
361e2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
361e6 417 00 3F 66 66 
361ea 418 66 3E 36 66 
361ee 419 66 66 6F 00 
361f2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
361f6 41b 36 1C 08 00 
361fa 41c 3B 6E 66 06 
361fe 41d 06 06 0F 00 
36202 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
36206 41f 00 00 00 7E 
3620a 420 7E 7E 7E 7E 
3620e 421 7E 7E 00 00 
36212 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
36216 423 00 00 00 00 
3621a 424 00 00 00 00 
3621e 425 00 00 00 00 
36222 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36224 427             | 'vga_font       file "vgafont.def"
36224 427 00 00 00 00 
      ...             
36254 433 00 00 00 00 
36258 434 00 00 00    | st_font        file "st4font.def"
3625b 434 FF FF 00 00 
3625f 435 00 00 00 00 
36263 436 00 18 18 18 
36267 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3626b 438 18 18 18 18 
3626f 439 18 18 18 18 
36273 43a 18          | 	byte	$18[9]
36274 43b 00 00 00 00 
36278 43c 00 00 00    | 	byte	$00[7]
3627b 43c FF FF 18 18 
3627f 43d 18 18 18 18 
36283 43e 18 18 18 18 
36287 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3628b 440 FF FF 00 00 
3628f 441 00 00 00 00 
36293 442 00 18 18 18 
36297 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3629b 444 1F 1F 18 18 
3629f 445 18 18 18 18 
362a3 446 18 18 18 18 
362a7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
362ab 448 F8 F8 18 18 
362af 449 18 18 18 18 
362b3 44a 18 00 00 00 
362b7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
362bb 44c 1F 1F 18 18 
362bf 44d 18 18 18 18 
362c3 44e 18 00 00 00 
362c7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
362cb 450 F8 F8 18 18 
362cf 451 18 18 18 18 
362d3 452 18 18 18 18 
362d7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
362db 454 1F 1F 00 00 
362df 455 00 00 00 00 
362e3 456 00 18 18 18 
362e7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
362eb 458 F8 F8 00 00 
362ef 459 00 00 00 00 
362f3 45a 00 18 18 18 
362f7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
362fb 45c FF FF 18 18 
362ff 45d 18 18 18 18 
36303 45e 18 00 00 18 
36307 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3630b 460 66 7E 7E 66 
3630f 461 66 66 66 30 
36313 462 18 00 00 7E 
36317 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3631b 464 3E 06 06 06 
3631f 465 06 7E 7E 18 
36323 466 0C 30 18 3C 
36327 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3632b 468 06 06 06 66 
3632f 469 66 7E 3C 00 
36333 46a 00 30 18 66 
36337 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3633b 46c 7E 7E 76 76 
3633f 46d 66 66 66 00 
36343 46e 00 30 18 7C 
36347 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3634b 470 1C 38 70 60 
3634f 471 60 7E 3E 00 
36353 472 00 30 18 7E 
36357 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3635b 474 18 0C 0C 06 
3635f 475 06 7E 7E 00 
36363 476 00 18 18 00 
36367 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3636b 478 18 18 0C 0C 
3636f 479 06 7E 7E 00 
36373 47a 00 30 18 3C 
36377 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3637b 47c 66 66 66 66 
3637f 47d 66          | 	byte	$66[5]
36380 47e 7E 3C 00 00 
36384 47f 00 00 06 06 
36388 480 06 06 16 1E 
3638c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
36390 482 7E 7E 00 00 
36394 483 00 00 00 00 
36398 484 00 3C 7C 60 
3639c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
363a0 486 7E 7C 30 18 
363a4 487 00 00 00 00 
363a8 488 00 3C 7E 66 
363ac 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
363b0 48a 7E 7C 18 0C 
363b4 48b 00 00 30 18 
363b8 48c 00 3C 3E 06 
363bc 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
363c0 48e 7E 7C 00 00 
363c4 48f 00 00 30 18 
363c8 490 00 3E 7E 66 
363cc 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
363d0 492 66 66 00 00 
363d4 493 00 00 30 18 
363d8 494 00 7C 7E 06 
363dc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
363e0 496 7E 3E 00 00 
363e4 497 00 00 30 18 
363e8 498 00 7E 7E 30 
363ec 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
363f0 49a 7E 7E 00 00 
363f4 49b 00 00 18 18 
363f8 49c 00 7E 7E 30 
363fc 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36400 49e 7E 7E 00 00 
36404 49f 00 00 30 18 
36408 4a0 00 3C 7E 66 
3640c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
36410 4a2 7E 3C 00 00 
36414 4a3 00 00 1C 1C 
36418 4a4 18 18 38 3C 
3641c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
36420 4a6 3C 3C 00 00 
36424 4a7 00 00 00 00 
36428 4a8 00 00 00 00 
3642c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36430 4aa 00 00 00 00 
36434 4ab 00 00       | 	byte	$00[6]
36436 4ab 18 18 18 18 
3643a 4ac 18 18 18 18 | 	byte	$18[8]
3643e 4ad 00 00 18 18 
36442 4ae 00 00 00 00 
36446 4af 66 66 66 66 
3644a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3644e 4b1 00 00 00 00 
36452 4b2 00 00 00 00 
36456 4b3 00          | 	byte	$00[9]
36457 4b3 66 66 FF FF 
3645b 4b4 66 66 FF FF 
3645f 4b5 66 66 00 00 
36463 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
36467 4b7 7C 7E 06 06 
3646b 4b8 3E 7C 60 60 
3646f 4b9 7E 3E 18 18 
36473 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
36477 4bb 66 30 30 18 
3647b 4bc 18 0C 0C 66 
3647f 4bd 66 00 00 00 
36483 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
36487 4bf 66 66 3C 1C 
3648b 4c0 1C FC FE 66 
3648f 4c1 66 FE FC 00 
36493 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
36497 4c3 18 18 18 18 
3649b 4c4 00 00 00 00 
3649f 4c5 00 00 00 00 
364a3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
364a7 4c7 18 1C 0C 0C 
364ab 4c8 0C 0C 0C 0C 
364af 4c9 1C 18 30 00 
364b3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
364b7 4cb 18 38 30 30 
364bb 4cc 30 30 30 30 
364bf 4cd 38 18 0C 00 
364c3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
364c7 4cf 66 66 3C 3C 
364cb 4d0 FF FF 3C 3C 
364cf 4d1 66 66 00 00 
364d3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
364d7 4d3 00 18 18 18 
364db 4d4 7E 7E 18 18 
364df 4d5 18 00 00 00 
364e3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
364e7 4d7 00 00 00 00 
364eb 4d8 00 00       | 	byte	$00[6]
364ed 4d9 18 18 18 18 
364f1 4da 18          | 	byte	$18[5]
364f2 4da 0C 04 00 00 
364f6 4db 00 00 00 00 
364fa 4dc 7E 7E 00 00 
364fe 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
36502 4de 00 00 00 00 
36506 4df 00 00 00 00 
3650a 4e0 00 00 00 00 
3650e 4e1 00          | 	byte	$00[13]
3650f 4e1 18 18 18 00 
36513 4e2 00 00 00 60 
36517 4e3 60 60 30 30 
3651b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3651f 4e5 06 06 06 00 
36523 4e6 00 00 00 3C 
36527 4e7 7E 66 66 66 
3652b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3652f 4e9 66 7E 3C 00 
36533 4ea 00 00 00 18 
36537 4eb 18 1C 1C 18 
3653b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3653f 4ed 18 7E 7E 00 
36543 4ee 00 00 00 3C 
36547 4ef 7E 66 66 30 
3654b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3654f 4f1 0C 7E 7E 00 
36553 4f2 00 00 00 7E 
36557 4f3 7E 30 30 18 
3655b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3655f 4f5 66 7E 3C 00 
36563 4f6 00 00 00 30 
36567 4f7 30 38 38 3C 
3656b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3656f 4f9 7E 30 30 00 
36573 4fa 00 00 00 7E 
36577 4fb 7E 06 06 3E 
3657b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3657f 4fd 66 7E 3C 00 
36583 4fe 00 00 00 38 
36587 4ff 3C 0E 06 06 
3658b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3658f 501 66 7E 3C 00 
36593 502 00 00 00 7E 
36597 503 7E 60 60 30 
3659b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3659f 505 0C 0C 0C 00 
365a3 506 00 00 00 3C 
365a7 507 7E 66 66 3C 
365ab 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
365af 509 66 7E 3C 00 
365b3 50a 00 00 00 3C 
365b7 50b 7E 66 66 7E 
365bb 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
365bf 50d 70 3C 1C 00 
365c3 50e 00 00 00 00 
365c7 50f 00 00 18 18 
365cb 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
365cf 511 18 18 18 00 
365d3 512 00 00 00 00 
365d7 513 00 00 18 18 
365db 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
365df 515 18 18 18 0C 
365e3 516 04 00 00 00 
365e7 517 70 38 1C 0E 
365eb 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
365ef 519 70 00 00 00 
365f3 51a 00 00 00 00 
365f7 51b 00 00 7E 7E 
365fb 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
365ff 51d 00 00 00 00 
36603 51e 00 00 00 00 | 	byte	$00[8]
36607 51f 0E 1C 38 70 
3660b 520 E0 70 38 1C 
3660f 521 0E 00 00 00 
36613 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
36617 523 7E 66 66 30 
3661b 524 30 18 18 18 
3661f 525 00 18 18 00 
36623 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
36627 527 7E 66 66 66 
3662b 528 66 36 06 66 
3662f 529 66 7E 3C 00 
36633 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
36637 52b 3C 7E 66 66 
3663b 52c 66 7E 7E 66 
3663f 52d 66 66 66 00 
36643 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
36647 52f 7E 66 66 7E 
3664b 530 3E 66 66 66 
3664f 531 66 7E 3E 00 
36653 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
36657 533 7E 66 66 06 
3665b 534 06 06 06 66 
3665f 535 66 7E 3C 00 
36663 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
36667 537 7E 66 66 66 
3666b 538 66 66 66 66 
3666f 539 66 7E 3E 00 
36673 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
36677 53b 7E 06 06 3E 
3667b 53c 3E 06 06 06 
3667f 53d 06 7E 7E 00 
36683 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
36687 53f 7E 06 06 3E 
3668b 540 3E 06 06 06 
3668f 541 06 06 06 00 
36693 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
36697 543 7E 06 06 76 
3669b 544 76 66 66 66 
3669f 545 66 7E 3C 00 
366a3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
366a7 547 66 66 66 7E 
366ab 548 7E 66 66 66 
366af 549 66 66 66 00 
366b3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
366b7 54b 7E 18 18 18 
366bb 54c 18 18 18 18 
366bf 54d 18 7E 7E 00 
366c3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
366c7 54f 60 60 60 60 
366cb 550 60 60 60    | 	byte	$60[7]
366ce 551 66 66 7E 3C 
366d2 552 00 00 00 00 
366d6 553 66 66 36 36 
366da 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
366de 555 66 66 C6 C6 
366e2 556 00 00 00 00 
366e6 557 06 06 06 06 
366ea 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
366ee 559 06 06 7E 7E 
366f2 55a 00 00 00 00 
366f6 55b C6 C6 EE EE 
366fa 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
366fe 55d C6 C6 C6 C6 
36702 55e 00 00 00 00 
36706 55f 66 66 66 6E 
3670a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3670e 561 76 66 66 66 
36712 562 00 00 00 00 
36716 563 3C 7E 66 66 
3671a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3671e 565 66 66 7E 3C 
36722 566 00 00 00 00 
36726 567 3E 7E 66 66 
3672a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3672e 569 06 06 06 06 
36732 56a 00 00 00 00 
36736 56b 3C 7E 66 66 
3673a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3673e 56d 66 56 3E 6C 
36742 56e 00 00 00 00 
36746 56f 3E 7E 66 66 
3674a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3674e 571 66 66 C6 C6 
36752 572 00 00 00 00 
36756 573 7C 7E 06 06 
3675a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3675e 575 60 60 7E 3E 
36762 576 00 00 00 00 
36766 577 7E 7E 18 18 
3676a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3676e 579 18 18 18 18 
36772 57a 00 00 00 00 
36776 57b 66 66 66 66 
3677a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3677e 57d 66 66 7E 3C 
36782 57e 00 00 00 00 
36786 57f 66 66 66 66 
3678a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3678e 581 3C 3C 18 18 
36792 582 00 00 00 00 
36796 583 C6 C6 C6 C6 
3679a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3679e 585 FE EE C6 82 
367a2 586 00 00 00 00 
367a6 587 66 66 66 3C 
367aa 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
367ae 589 3C 66 66 66 
367b2 58a 00 00 00 00 
367b6 58b 66 66 66 66 
367ba 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
367be 58d 18 18 18 18 
367c2 58e 00 00 00 00 
367c6 58f 7E 7E 30 30 
367ca 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
367ce 591 06 06 7E 7E 
367d2 592 00 00 00 00 
367d6 593 3C 3C 0C 0C 
367da 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
367de 595 0C 0C 3C 3C 
367e2 596 00 00 00 00 
367e6 597 06 06 0C 0C 
367ea 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
367ee 599 60 60 C0 C0 
367f2 59a 00 00 00 00 
367f6 59b 3C 3C 30 30 
367fa 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
367fe 59d 30 30 3C 3C 
36802 59e 00 00 00 00 
36806 59f 18 18 3C 3C 
3680a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3680e 5a1 00 00 00 00 
36812 5a2 00 00 00 00 
36816 5a3 00 00 00 00 
3681a 5a4 00 00 00 00 
3681e 5a5 00 00       | 	byte	$00[18]
36820 5a6 FE FE 00 00 
36824 5a7 00 00 0C 0C 
36828 5a8 18 18 00 00 
3682c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
36830 5aa 00 00 00 00 
36834 5ab 00 00 00 00 
36838 5ac 00          | 	byte	$00[9]
36839 5ac 3C 7C 60 7C 
3683d 5ad 7E 66 66 7E 
36841 5ae 7C 00 00 00 
36845 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
36849 5b0 3E 7E 66 66 
3684d 5b1 66 66 66 7E 
36851 5b2 3E 00 00 00 
36855 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
36859 5b4 3C 3E 06 06 
3685d 5b5 06 06 06 7E 
36861 5b6 7C 00 00 00 
36865 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
36869 5b8 7C 7E 66 66 
3686d 5b9 66 66 66 7E 
36871 5ba 7C 00 00 00 
36875 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
36879 5bc 3C 7E 66 66 
3687d 5bd 7E 06 06 7E 
36881 5be 7C 00 00 00 
36885 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
36889 5c0 18 7E 7E 18 
3688d 5c1 18 18 18 18 
36891 5c2 18 00 00 00 
36895 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36899 5c4 7C 7E 66 66 
3689d 5c5 66 66 7E 7C 
368a1 5c6 60 7E 3E 00 
368a5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
368a9 5c8 3E 7E 66 66 
368ad 5c9 66 66 66 66 
368b1 5ca 66 00 00 00 
368b5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
368b9 5cc 1C 1C 18 18 
368bd 5cd 18 18 18 3C 
368c1 5ce 3C 00 00 00 
368c5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
368c9 5d0 30 30 30 30 
368cd 5d1 30 30 30 30 
368d1 5d2 30          | 	byte	$30[9]
368d2 5d2 3E 1E 00 00 
368d6 5d3 06 06 06 36 
368da 5d4 36 1E 1E 1E 
368de 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
368e2 5d6 00 00 00 00 
368e6 5d7 1C 1C 18 18 
368ea 5d8 18 18 18 18 
368ee 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
368f2 5da 00 00 00 00 
368f6 5db 00 00 00    | 	byte	$00[7]
368f9 5dc 6C FE FE D6 
368fd 5dd D6 C6 C6 C6 
36901 5de C6 00 00 00 
36905 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
36909 5e0 3E 7E 66 66 
3690d 5e1 66 66 66 66 
36911 5e2 66 00 00 00 
36915 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
36919 5e4 3C 7E 66 66 
3691d 5e5 66 66 66 7E 
36921 5e6 3C 00 00 00 
36925 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
36929 5e8 3E 7E 66 66 
3692d 5e9 66 66 66 7E 
36931 5ea 3E 06 06 00 
36935 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
36939 5ec 7C 7E 66 66 
3693d 5ed 66 66 66 7E 
36941 5ee 7C 60 60 00 
36945 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
36949 5f0 3E 7E 66 06 
3694d 5f1 06 06 06 06 
36951 5f2 06 00 00 00 
36955 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
36959 5f4 7C 7E 06 0E 
3695d 5f5 3C 70 60 7E 
36961 5f6 3E 00 00 00 
36965 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
36969 5f8 7E 7E 18 18 
3696d 5f9 18 18 18 78 
36971 5fa 70 00 00 00 
36975 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
36979 5fc 66 66 66 66 
3697d 5fd 66 66 66    | 	byte	$66[7]
36980 5fe 7E 7C 00 00 
36984 5ff 00 00 00 00 
36988 600 00 66 66 66 
3698c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
36990 602 18 18 00 00 
36994 603 00 00 00 00 
36998 604 00 C6 C6 D6 
3699c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
369a0 606 C6 82 00 00 
369a4 607 00 00 00 00 
369a8 608 00 66 66 3C 
369ac 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
369b0 60a 66 66 00 00 
369b4 60b 00 00 00 00 
369b8 60c 00 66 66 66 
369bc 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
369c0 60e 7C 60 7E 3E 
369c4 60f 00 00 00 00 
369c8 610 00 7E 7E 30 
369cc 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
369d0 612 7E 7E 00 00 
369d4 613 00 00 30 18 
369d8 614 18 18 18 0C 
369dc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
369e0 616 18 30 00 00 
369e4 617 00 00 18 18 
369e8 618 18 18 18 18 
369ec 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
369f0 61a 18 18 00 00 
369f4 61b 00 00 0C 18 
369f8 61c 18 18 18 30 
369fc 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
36a00 61e 18 0C 00 00 
36a04 61f 00 00 6C 7E 
36a08 620 36 00 00 00 
36a0c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
36a10 622 00 00 00 00 
36a14 623 00 00 00 00 
36a18 624 00          | 	byte	$00[9]
36a19 624 18 18 18 18 
36a1d 625 18 18 00 00 
36a21 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36a24 627             | 'amiga_font     file "amigafont.def"
36a24 627 00 6C FE FE 
36a28 628 7C 38 10 00 
36a2c 629 18 18 18 F8 
36a30 62a F8 18 18 18 | a8_font        file "atari8.fnt"
36a34 62b C0 C0 C0 C0 
36a38 62c C0 C0 C0 C0 | 	byte	$c0[8]
36a3c 62d 18 18 18 1F 
36a40 62e 1F 00 00 00 
36a44 62f 18 18 18 1F 
36a48 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
36a4c 631 00 00 00 1F 
36a50 632 1F 18 18 18 
36a54 633 C0 E0 70 38 
36a58 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
36a5c 635 03 07 0E 1C 
36a60 636 38 70 E0 C0 
36a64 637 80 C0 E0 F0 
36a68 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
36a6c 639 00 00 00 00 
36a70 63a F0 F0 F0 F0 
36a74 63b 01 03 07 0F 
36a78 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
36a7c 63d F0 F0 F0 F0 
36a80 63e 00 00 00 00 
36a84 63f 0F 0F 0F 0F 
36a88 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
36a8c 641 FF FF 00 00 
36a90 642 00 00 00 00 
36a94 643 00 00 00 00 
36a98 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
36a9c 645 00 00 00 00 
36aa0 646 0F 0F 0F 0F 
36aa4 647 00 38 38 EE 
36aa8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
36aac 649 00 00 00 F8 
36ab0 64a F8 18 18 18 
36ab4 64b 00 00 00 FF 
36ab8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
36abc 64d 18 18 18 FF 
36ac0 64e FF 18 18 18 
36ac4 64f 00 00 3C 7E 
36ac8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
36acc 651 00 00 00 00 
36ad0 652 FF FF FF FF 
36ad4 653 03 03 03 03 
36ad8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
36adc 655 00 00 00 FF 
36ae0 656 FF 18 18 18 
36ae4 657 18 18 18 FF 
36ae8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
36aec 659 0F 0F 0F 0F 
36af0 65a 0F 0F 0F 0F | 	byte	$0f[8]
36af4 65b 18 18 18 F8 
36af8 65c F8 00 00 00 
36afc 65d 1E 06 1E 06 
36b00 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
36b04 65f 00 18 3C 7E 
36b08 660 18 18 18 00 
36b0c 661 00 18 18 18 
36b10 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
36b14 663 00 18 0C 7E 
36b18 664 0C 18 00 00 
36b1c 665 00 18 30 7E 
36b20 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
36b24 667 00 00 00 00 
36b28 668 00 00 00 00 
36b2c 669 00          | 	byte	$00[9]
36b2d 669 18 18 18 18 
36b31 66a 00 18 00 00 
36b35 66b 66 66 66 00 
36b39 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
36b3d 66d 66 FF 66 66 
36b41 66e FF 66 00 18 
36b45 66f 7C 06 3C 60 
36b49 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
36b4d 671 66 36 18 0C 
36b51 672 66 62 00 38 
36b55 673 6C 38 1C F6 
36b59 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
36b5d 675 18 18 18 00 
36b61 676 00 00 00 00 
36b65 677 70 38 18 18 
36b69 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
36b6d 679 0E 1C 18 18 
36b71 67a 1C 0E 00 00 
36b75 67b 66 3C FF 3C 
36b79 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
36b7d 67d 18 18 7E 18 
36b81 67e 18 00 00 00 
36b85 67f 00 00 00 00 
36b89 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
36b8d 681 00 00 7E 00 
36b91 682 00 00 00 00 
36b95 683 00 00 00 00 
36b99 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
36b9d 685 60 30 18 0C 
36ba1 686 06 02 00 00 
36ba5 687 3C 66 76 6E 
36ba9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
36bad 689 18 1C 18 18 
36bb1 68a 18 7E 00 00 
36bb5 68b 3C 66 30 18 
36bb9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
36bbd 68d 7E 30 18 30 
36bc1 68e 66 3C 00 00 
36bc5 68f 30 38 3C 36 
36bc9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
36bcd 691 7E 06 3E 60 
36bd1 692 66 3C 00 00 
36bd5 693 3C 06 3E 66 
36bd9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
36bdd 695 7E 60 30 18 
36be1 696 0C 0C 00 00 
36be5 697 3C 66 3C 66 
36be9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
36bed 699 3C 66 7C 60 
36bf1 69a 30 1C 00 00 
36bf5 69b 00 18 18 00 
36bf9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
36bfd 69d 00 18 18 00 
36c01 69e 18 18 0C 60 
36c05 69f 30 18 0C 18 
36c09 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
36c0d 6a1 00 7E 00 00 
36c11 6a2 7E 00 00 06 
36c15 6a3 0C 18 30 18 
36c19 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
36c1d 6a5 3C 66 30 18 
36c21 6a6 00 18 00 00 
36c25 6a7 3C 66 76 76 
36c29 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
36c2d 6a9 18 3C 66 66 
36c31 6aa 7E 66 00 00 
36c35 6ab 3E 66 3E 66 
36c39 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
36c3d 6ad 3C 66 06 06 
36c41 6ae 66 3C 00 00 
36c45 6af 1E 36 66 66 
36c49 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
36c4d 6b1 7E 06 3E 06 
36c51 6b2 06 7E 00 00 
36c55 6b3 7E 06 3E 06 
36c59 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
36c5d 6b5 7C 06 06 76 
36c61 6b6 66 7C 00 00 
36c65 6b7 66 66 7E 66 
36c69 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
36c6d 6b9 7E 18 18 18 
36c71 6ba 18 7E 00 00 
36c75 6bb 60 60 60 60 
36c79 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
36c7d 6bd 66 36 1E 1E 
36c81 6be 36 66 00 00 
36c85 6bf 06 06 06 06 
36c89 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
36c8d 6c1 C6 EE FE D6 
36c91 6c2 C6 C6 00 00 
36c95 6c3 66 6E 7E 7E 
36c99 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
36c9d 6c5 3C 66 66 66 
36ca1 6c6 66 3C 00 00 
36ca5 6c7 3E 66 66 3E 
36ca9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
36cad 6c9 3C 66 66 66 
36cb1 6ca 36 6C 00 00 
36cb5 6cb 3E 66 66 3E 
36cb9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
36cbd 6cd 3C 06 3C 60 
36cc1 6ce 60 3C 00 00 
36cc5 6cf 7E 18 18 18 
36cc9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
36ccd 6d1 66 66 66 66 
36cd1 6d2 66          | 	byte	$66[5]
36cd2 6d2 7E 00 00 66 
36cd6 6d3 66 66 66 3C 
36cda 6d4 18 00 00 C6 
36cde 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
36ce2 6d6 C6 00 00 66 
36ce6 6d7 66 3C 3C 66 
36cea 6d8 66 00 00 66 
36cee 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
36cf2 6da 18 00 00 7E 
36cf6 6db 30 18 0C 06 
36cfa 6dc 7E 00 00 78 
36cfe 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
36d02 6de 78 00 00 02 
36d06 6df 06 0C 18 30 
36d0a 6e0 60 00 00 1E 
36d0e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
36d12 6e2 1E 00 00 10 
36d16 6e3 38 6C C6 00 
36d1a 6e4 00 00 00 00 
36d1e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
36d22 6e6 FF 00 00 18 
36d26 6e7 3C 7E 7E 3C 
36d2a 6e8 18 00 00 00 
36d2e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
36d32 6ea 7C 00 00 06 
36d36 6eb 06 3E 66 66 
36d3a 6ec 3E 00 00 00 
36d3e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
36d42 6ee 3C 00 00 60 
36d46 6ef 60 7C 66 66 
36d4a 6f0 7C 00 00 00 
36d4e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
36d52 6f2 3C 00 00 70 
36d56 6f3 18 7C 18 18 
36d5a 6f4 18 00 00 00 
36d5e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
36d62 6f6 60 3E 00 06 
36d66 6f7 06 3E 66 66 
36d6a 6f8 66 00 00 18 
36d6e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
36d72 6fa 3C 00 00 60 
36d76 6fb 00 60 60 60 
36d7a 6fc 60 3C 00 06 
36d7e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
36d82 6fe 66 00 00 1C 
36d86 6ff 18 18 18 18 
36d8a 700 3C 00 00 00 
36d8e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
36d92 702 C6 00 00 00 
36d96 703 3E 66 66 66 
36d9a 704 66 00 00 00 
36d9e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
36da2 706 3C 00 00 00 
36da6 707 3E 66 66 3E 
36daa 708 06 06 00 00 
36dae 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
36db2 70a 60 60 00 00 
36db6 70b 3E 66 06 06 
36dba 70c 06 00 00 00 
36dbe 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
36dc2 70e 3E 00 00 18 
36dc6 70f 7E 18 18 18 
36dca 710 70 00 00 00 
36dce 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
36dd2 712 7C 00 00 00 
36dd6 713 66 66 66 3C 
36dda 714 18 00 00 00 
36dde 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
36de2 716 6C 00 00 00 
36de6 717 66 3C 18 3C 
36dea 718 66 00 00 00 
36dee 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
36df2 71a 30 1E 00 00 
36df6 71b 7E 30 18 0C 
36dfa 71c 7E 00 00 18 
36dfe 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
36e02 71e 3C 00 18 18 
36e06 71f 18 18 18 18 
36e0a 720 18 18 00 7E 
36e0e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
36e12 722 60 00 10 18 
36e16 723 1C 1E 1C 18 
36e1a 724 10 00 08 18 
36e1e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
36e22 726 08 00       | 	byte	$08, $00
36e24 727 00 00 00 00 
36e28 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
36e29 728 80 00 00 00 
36e2d 729 00 80 00 00 
36e31 72a 80 80 00 00 
36e35 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
36e39 72c 80 00 80 00 
36e3d 72d 00 40 80 00 
36e41 72e AA AA AA 00 
36e45 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
36e49 730 FF 00 00 00 
36e4d 731 00 FF 00 00 
36e51 732 FF FF 00 00 
36e55 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
36e59 734 FF 00 FF 00 
36e5d 735 00 FF FF 00 
36e61 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
36e64 737 00 00 00 00 
36e68 738 00          | ataripalette   file "ataripalettep2.def"
36e69 738 11 11 11 00 
36e6d 739 22 22 22 00 
36e71 73a 33 33 33 00 
36e75 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
36e79 73c 55 55 55 00 
36e7d 73d 66 66 66 00 
36e81 73e 77 77 77 00 
36e85 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
36e89 740 99 99 99 00 
36e8d 741 AA AA AA 00 
36e91 742 BB BB BB 00 
36e95 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
36e99 744 DD DD DD 00 
36e9d 745 EE EE EE 00 
36ea1 746 FF FF FF 00 
36ea5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
36ea9 748 00 14 40 00 
36ead 749 00 1E 60 00 
36eb1 74a 00 28 80 00 
36eb5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
36eb9 74c 00 3C BF 00 
36ebd 74d 00 46 DF 00 
36ec1 74e 00 50 FF 00 
36ec5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
36ec9 750 39 77 FF 00 
36ecd 751 55 8A FF 00 
36ed1 752 71 9E FF 00 
36ed5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
36ed9 754 AA C5 FF 00 
36edd 755 C6 D8 FF 00 
36ee1 756 E3 EC FF 00 
36ee5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
36ee9 758 00 00 40 00 
36eed 759 00 00 60 00 
36ef1 75a 00 00 80 00 
36ef5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
36ef9 75c 00 00 BF 00 
36efd 75d 00 00 DF 00 
36f01 75e 00 00 FF 00 
36f05 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
36f09 760 39 39 FF 00 
36f0d 761 55 55 FF 00 
36f11 762 71 71 FF 00 
36f15 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
36f19 764 AA AA FF 00 
36f1d 765 C6 C6 FF 00 
36f21 766 E3 E3 FF 00 
36f25 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
36f29 768 20 00 40 00 
36f2d 769 30 00 60 00 
36f31 76a 40 00 80 00 
36f35 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
36f39 76c 60 00 BF 00 
36f3d 76d 70 00 DF 00 
36f41 76e 80 00 FF 00 
36f45 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
36f49 770 9C 39 FF 00 
36f4d 771 AA 55 FF 00 
36f51 772 B8 71 FF 00 
36f55 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
36f59 774 D5 AA FF 00 
36f5d 775 E3 C6 FF 00 
36f61 776 F1 E3 FF 00 
36f65 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
36f69 778 40 00 40 00 
36f6d 779 60 00 60 00 
36f71 77a 80 00 80 00 
36f75 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
36f79 77c BF 00 BF 00 
36f7d 77d DF 00 DF 00 
36f81 77e FF 00 FF 00 
36f85 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
36f89 780 FF 39 FF 00 
36f8d 781 FF 55 FF 00 
36f91 782 FF 71 FF 00 
36f95 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
36f99 784 FF AA FF 00 
36f9d 785 FF C6 FF 00 
36fa1 786 FF E3 FF 00 
36fa5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
36fa9 788 40 00 20 00 
36fad 789 60 00 30 00 
36fb1 78a 80 00 40 00 
36fb5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
36fb9 78c BF 00 60 00 
36fbd 78d DF 00 70 00 
36fc1 78e FF 00 80 00 
36fc5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
36fc9 790 FF 39 9C 00 
36fcd 791 FF 55 AA 00 
36fd1 792 FF 71 B8 00 
36fd5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
36fd9 794 FF AA D5 00 
36fdd 795 FF C6 E3 00 
36fe1 796 FF E3 F1 00 
36fe5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
36fe9 798 40 00 00 00 
36fed 799 60 00 00 00 
36ff1 79a 80 00 00 00 
36ff5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
36ff9 79c BF 00 00 00 
36ffd 79d DF 00 00 00 
37001 79e FF 00 00 00 
37005 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
37009 7a0 FF 39 39 00 
3700d 7a1 FF 55 55 00 
37011 7a2 FF 71 71 00 
37015 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
37019 7a4 FF AA AA 00 
3701d 7a5 FF C6 C6 00 
37021 7a6 FF E3 E3 00 
37025 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
37029 7a8 40 10 00 00 
3702d 7a9 60 18 00 00 
37031 7aa 80 20 00 00 
37035 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
37039 7ac BF 30 00 00 
3703d 7ad DF 38 00 00 
37041 7ae FF 40 00 00 
37045 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
37049 7b0 FF 6A 39 00 
3704d 7b1 FF 80 55 00 
37051 7b2 FF 95 71 00 
37055 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
37059 7b4 FF BF AA 00 
3705d 7b5 FF D5 C6 00 
37061 7b6 FF EA E3 00 
37065 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
37069 7b8 40 20 00 00 
3706d 7b9 60 30 00 00 
37071 7ba 80 40 00 00 
37075 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
37079 7bc BF 60 00 00 
3707d 7bd DF 70 00 00 
37081 7be FF 80 00 00 
37085 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
37089 7c0 FF 9C 39 00 
3708d 7c1 FF AA 55 00 
37091 7c2 FF B8 71 00 
37095 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
37099 7c4 FF D5 AA 00 
3709d 7c5 FF E3 C6 00 
370a1 7c6 FF F1 E3 00 
370a5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
370a9 7c8 40 30 00 00 
370ad 7c9 60 48 00 00 
370b1 7ca 80 60 00 00 
370b5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
370b9 7cc BF 90 00 00 
370bd 7cd DF A8 00 00 
370c1 7ce FF C0 00 00 
370c5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
370c9 7d0 FF CE 39 00 
370cd 7d1 FF D5 55 00 
370d1 7d2 FF DC 71 00 
370d5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
370d9 7d4 FF EA AA 00 
370dd 7d5 FF F1 C6 00 
370e1 7d6 FF F8 E3 00 
370e5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
370e9 7d8 30 40 00 00 
370ed 7d9 48 60 00 00 
370f1 7da 60 80 00 00 
370f5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
370f9 7dc 90 BF 00 00 
370fd 7dd A8 DF 00 00 
37101 7de C0 FF 00 00 
37105 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
37109 7e0 CE FF 39 00 
3710d 7e1 D5 FF 55 00 
37111 7e2 DC FF 71 00 
37115 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
37119 7e4 EA FF AA 00 
3711d 7e5 F1 FF C6 00 
37121 7e6 F8 FF E3 00 
37125 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
37129 7e8 00 40 00 00 
3712d 7e9 00 60 00 00 
37131 7ea 00 80 00 00 
37135 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
37139 7ec 00 BF 00 00 
3713d 7ed 00 DF 00 00 
37141 7ee 00 FF 00 00 
37145 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
37149 7f0 39 FF 39 00 
3714d 7f1 55 FF 55 00 
37151 7f2 71 FF 71 00 
37155 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
37159 7f4 AA FF AA 00 
3715d 7f5 C6 FF C6 00 
37161 7f6 E3 FF E3 00 
37165 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
37169 7f8 00 40 14 00 
3716d 7f9 00 60 1E 00 
37171 7fa 00 80 28 00 
37175 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
37179 7fc 00 BF 3C 00 
3717d 7fd 00 DF 46 00 
37181 7fe 00 FF 50 00 
37185 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
37189 800 39 FF 77 00 
3718d 801 55 FF 8A 00 
37191 802 71 FF 9E 00 
37195 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
37199 804 AA FF C5 00 
3719d 805 C6 FF D8 00 
371a1 806 E3 FF EC 00 
371a5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
371a9 808 00 40 28 00 
371ad 809 00 60 3C 00 
371b1 80a 00 80 50 00 
371b5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
371b9 80c 00 BF 78 00 
371bd 80d 00 DF 8C 00 
371c1 80e 00 FF A0 00 
371c5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
371c9 810 39 FF B5 00 
371cd 811 55 FF C0 00 
371d1 812 71 FF CA 00 
371d5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
371d9 814 AA FF DF 00 
371dd 815 C6 FF EA 00 
371e1 816 E3 FF F4 00 
371e5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
371e9 818 00 40 40 00 
371ed 819 00 60 60 00 
371f1 81a 00 80 80 00 
371f5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
371f9 81c 00 BF BF 00 
371fd 81d 00 DF DF 00 
37201 81e 00 FF FF 00 
37205 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
37209 820 39 FF FF 00 
3720d 821 55 FF FF 00 
37211 822 71 FF FF 00 
37215 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
37219 824 AA FF FF 00 
3721d 825 C6 FF FF 00 
37221 826 E3 FF FF 00 
37225 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
37229 828 00 28 40 00 
3722d 829 00 3C 60 00 
37231 82a 00 50 80 00 
37235 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
37239 82c 00 78 BF 00 
3723d 82d 00 8C DF 00 
37241 82e 00 A0 FF 00 
37245 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
37249 830 39 B5 FF 00 
3724d 831 55 C0 FF 00 
37251 832 71 CA FF 00 
37255 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
37259 834 AA DF FF 00 
3725d 835 C6 EA FF 00 
37261 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
37264 837             | 
37264 837             | '**********************************************************************************
37264 837             | '
37264 837             | '        Timings and colors definitions
37264 837             | '
37264 837             | '**********************************************************************************
37264 837             | 
37264 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
37264 837 08 00 00 00 
37268 838 3C 00 00 00 
3726c 839 08 00 00 00 
37270 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
37274 83b 07 00 00 00 
37278 83c 04 00 00 00 
3727c 83d 01 00 00 00 
37280 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
37284 83f 58 02 00 00 
37288 840 20 9E 4B 14 
3728c 841 FB A8 9E 01 
37290 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
37294 843 00 00 00 00 
37298 844 C0 00 00 00 
3729c 845 00 00 00 00 
372a0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
372a4 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
372a4 847 00 75 C7 97 
372a8 848 27 47 F6 0A 
372ac 849 05 79 CB 9B 
372b0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
372b4 84b             | 
372b4 84b             | ''--------  Initialization  ----------------------------------------------------------------
372b4 84b             | 
372b4 84b 28 0C 64 FD | hdmi            setq    #6
372b8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
372bc 84d 28 10 64 FD |                 setq    #8
372c0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
372c4 84f             | 
372c4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
372c8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
372cc 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
372d0 852 D6 C6 01 F1 |                 add     t1,hbase
372d4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
372d8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
372dc 855 7B 0B 80 5F 
372e0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
372e4 857 66 66 86 FF 
372e8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
372ec 859             | '
372ec 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
372f0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
372f4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
372f8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
372fc 85d             | 
372fc 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
37300 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
37304 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
37308 860             | 
37308 860             | ''--------  frame rendering main loop  ---------------------------------------------------
37308 860             | 
37308 860 28 06 64 FD | p101            setq 	#3
3730c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
37310 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
37314 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
37318 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3731c 865 00 A0 05 F6 |                 mov     dlinum, #0
37320 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
37324 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
37328 868             | 
37328 868             | 
37328 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3732c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
37330 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
37334 86b             |                 
37334 86b             | 
37334 86b             | 
37334 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
37334 86b             |   
37334 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
37338 86c 29 FE 65 3D |          if_nc  setq2   #255
3733c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
37340 86e             | 
37340 86e             | '' -----   up porch (before the picture)
37340 86e             | 
37340 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
37344 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
37348 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3734c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
37350 872             |  
37350 872             |    
37350 872             |  
37350 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37354 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
37358 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3735c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37360 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
37364 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
37368 878             | 
37368 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3736c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
37370 87a 48 00 B0 FD | 		call    #dli
37374 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
37378 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3737c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
37380 87e             |                 	
37380 87e             |                 
37380 87e             | 
37380 87e             |  
37380 87e             | '' ------- the main screen drawing starts here
37380 87e             | 
37380 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
37384 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
37388 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3738c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
37390 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
37394 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
37398 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3739c 885             |               
3739c 885             | 
3739c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
373a0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
373a4 887             | 
373a4 887             | ' ---------------- All visible lines displayed now, start vblank  
373a4 887             | 
373a4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
373a8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
373ac 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
373b0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
373b4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
373b8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
373bc 88d             | 
373bc 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
373bc 88d             | 
373bc 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
373bc 88d             | 
373bc 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
373c0 88e             | 
373c0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
373c4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
373c8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
373cc 891             | 
373cc 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
373d0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
373d4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
373d8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
373dc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
373e0 896             | 
373e0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
373e4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
373e8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
373ec 899 70 00 90 AD |     if_z        jmp     #preload
373f0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
373f4 89b 94 00 90 AD |     if_z        jmp     #preload2
373f8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
373fc 89d 0C 00 90 AD |     if_z        jmp     #p390
37400 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
37404 89f 28 00 90 AD |     if_z        jmp     #p391  
37408 8a0             | 
37408 8a0 2D 00 64 FD | p308            ret
3740c 8a1             |    
3740c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
37410 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
37414 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
37418 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3741c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
37420 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
37424 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
37428 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3742c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
37430 8aa             |  
37430 8aa             | '' --------  Reload palette. To do 
37430 8aa             | 
37430 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
37434 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
37438 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3743c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
37440 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
37444 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
37448 8b0 70 FF 9F FD |         	jmp     #dli                
3744c 8b1             |       
3744c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3744c 8b1             | 
3744c 8b1             | 
3744c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3744c 8b1             | 
3744c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
37450 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
37454 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37458 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3745c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
37460 8b6             |         
37460 8b6             | '' -------------- Preload a line from PSRAM        
37460 8b6             |         
37460 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
37464 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
37468 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3746c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
37470 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
37474 8bb             | 
37474 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
37478 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3747c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
37480 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
37484 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
37488 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3748c 8c1             |  
3748c 8c1             |  
3748c 8c1             | preload2      '  incmod  dlinum,#3
3748c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
37490 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
37494 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
37498 8c4 28 02 64 FD |                 setq	#1
3749c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
374a0 8c6             |                 
374a0 8c6             | 
374a0 8c6             | '' -------------- Draw sprites
374a0 8c6             | 
374a0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
374a4 8c7 10 5C 0E F5 | 		and t8,#16 wz
374a8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
374ac 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
374b0 8ca             | 		
374b0 8ca             | 
374b0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
374b4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
374b8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
374bc 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
374c0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
374c4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
374c8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
374cc 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
374d0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
374d4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
374d8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
374dc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
374e0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
374e4 8d7             | 
374e4 8d7             | 
374e4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
374e8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
374ec 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
374f0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
374f4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
374f8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
374fc 8dd 00 5E 06 F6 |                 mov 	t9,#0
37500 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
37504 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
37508 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3750c 8e1             |      
3750c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
37510 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
37514 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
37518 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3751c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
37520 8e6             |                 
37520 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
37524 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
37528 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3752c 8e9             |   		
3752c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
37530 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
37534 8eb             | 
37534 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
37538 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3753c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
37540 8ee             |  
37540 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
37544 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
37548 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3754c 8f1             | 	
3754c 8f1             | 	
3754c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
37550 8f2 28 CD 01 F1 | 		add	t4,sprite_w
37554 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
37558 8f4             | 
37558 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3755c 8f5             | 
3755c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
37560 8f6 01 58 86 F1 | 	 	sub     t6,#1
37564 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
37568 8f8             | 
37568 8f8 28 58 62 FD |                 setq   	t6
3756c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
37570 8fa 28 5D 02 F6 |                 mov t8,sprite_w
37574 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
37578 8fc 24 00 90 AD |         if_z    jmp #p898
3757c 8fd             |          
3757c 8fd             |         
3757c 8fd 70 5F 06 F6 |                 mov  t9,#368
37580 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
37584 8ff             | 
37584 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
37588 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3758c 901 FF FF 7F FF 
37590 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
37594 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
37598 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3759c 905 2D 01 00 F5 |                 and 0-0, t7
375a0 906             |                
375a0 906             | 
375a0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
375a4 907 E5 E0 7A FA |                 wmlong 368,t3				
375a8 908             |                 
375a8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
375ac 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
375b0 90a 2D 00 64 FD |                 ret
375b4 90b             | 	
375b4 90b             | 	
375b4 90b             |                
375b4 90b             |  
375b4 90b             | '' -------------- Graphics line ------------------------------------------------------------
375b4 90b             |  
375b4 90b             | 
375b4 90b             | '' consts and vars
375b4 90b             | 
375b4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
375b8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
375bc 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
375c0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
375c4 90f             | 
375c4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
375c8 910             | 
375c8 910             | '------ these longs will be set by setmode function
375c8 910             | 
375c8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
375cc 911 00 00 00 00 | m_sn            long    0        'sync
375d0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
375d4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
375d8 914             | 'm_border        long    0        'left/right borders
375d8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
375dc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
375e0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
375e4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
375e8 918 00 00 00 00 | i_totalvis      long    0
375ec 919             | 
375ec 919             | '-------------------------------------
375ec 919             |  
375ec 919 00 00 00 00 | linenum         long    0
375f0 91a 00 00 00 00 | frames          long    0
375f4 91b 00 00 00 00 | dlinum long 0
375f8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
375fc 91d             | 
375fc 91d 00 00 00 00 | vblankptr       long    0
37600 91e 00 00 00 00 | modeptr         long    0
37604 91f 00 00 00 00 | paletteptr      long    0
37608 920 00 00 00 00 | dlptr           long    0
3760c 921 01 00 00 00 | hbase           long    1
37610 922 00 00 00 00 | mailbox         long    0
37614 923 00 00 00 00 | spriteptr          long 0
37618 924             | 
37618 924 00 00 00 00 | cmd             long    0
3761c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
37620 926 00 04 00 00 | buf2            long    1024
37624 927 01 00 00 00 | dlptr2          long    1
37628 928 01 00 00 00 | dl              long    1
3762c 929             | 
3762c 929 00 00 00 00 | buf1c long 0
37630 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
37634 92b 01 00 00 00 | framebuf2       long    1
37638 92c 01 00 00 00 | hsync0          long    1
3763c 92d 01 00 00 00 | hsync1          long    1
37640 92e             | 
37640 92e 01 00 00 00 | t1              long    1
37644 92f 00 00 00 00 | t2 long 0
37648 930 00 00 00 00 | t3 long 0
3764c 931 00 00 00 00 | t4 long 0
37650 932             | 
37650 932 00 00 00 00 | rcnt            long    0  'dl repeat count
37654 933 00 00 00 00 | rcnt2           long    0
37658 934 00 00 00 00 | rcnt2a          long    0
3765c 935 00 00 00 00 | roffset         long    0
37660 936 00 00 00 00 | rdl             long    0  'dl repeat line
37664 937 00 00 00 00 | dlc             long    0  'dl command
37668 938             | 
37668 938 FF FF FF FF | affffffff       long    $ffffffff
3766c 939 00 00 00 00 | sprite1pointer long 0
37670 93a 00 00 00 00 | sprite1xy      long 0
37674 93b 00 00 00 00 | sprite1wh      long 0
37678 93c 00 00 00 00 | sprite2pointer long 0
3767c 93d 00 00 00 00 | sprite2xy      long 0
37680 93e 00 00 00 00 | sprite2wh      long 0
37684 93f 00 00 00 00 | sprite3pointer long 0
37688 940 00 00 00 00 | sprite3xy      long 0
3768c 941 00 00 00 00 | sprite3wh      long 0
37690 942 00 00 00 00 | sprite4pointer long 0
37694 943 00 00 00 00 | sprite4xy      long 0
37698 944 00 00 00 00 | sprite4wh      long 0
3769c 945 00 00 00 00 | sprite5pointer long 0
376a0 946 00 00 00 00 | sprite5xy      long 0
376a4 947 00 00 00 00 | sprite5wh      long 0
376a8 948 00 00 00 00 | sprite6pointer long 0
376ac 949 00 00 00 00 | sprite6xy      long 0
376b0 94a 00 00 00 00 | sprite6wh      long 0
376b4 94b 00 00 00 00 | sprite7pointer long 0
376b8 94c 00 00 00 00 | sprite7xy      long 0
376bc 94d 00 00 00 00 | sprite7wh      long 0
376c0 94e 00 00 00 00 | sprite8pointer long 0
376c4 94f 00 00 00 00 | sprite8xy      long 0
376c8 950 00 00 00 00 | sprite8wh      long 0
376cc 951 00 00 00 00 | sprite9pointer long 0
376d0 952 00 00 00 00 | sprite9xy      long 0
376d4 953 00 00 00 00 | sprite9wh      long 0
376d8 954 00 00 00 00 | sprite10pointer long 0
376dc 955 00 00 00 00 | sprite10xy      long 0
376e0 956 00 00 00 00 | sprite10wh      long 0
376e4 957 00 00 00 00 | sprite11pointer long 0
376e8 958 00 00 00 00 | sprite11xy      long 0
376ec 959 00 00 00 00 | sprite11wh      long 0
376f0 95a 00 00 00 00 | sprite12pointer long 0
376f4 95b 00 00 00 00 | sprite12xy      long 0
376f8 95c 00 00 00 00 | sprite12wh      long 0
376fc 95d 00 00 00 00 | sprite13pointer long 0
37700 95e 00 00 00 00 | sprite13xy      long 0
37704 95f 00 00 00 00 | sprite13wh      long 0
37708 960 00 00 00 00 | sprite14pointer long 0
3770c 961 00 00 00 00 | sprite14xy      long 0
37710 962 00 00 00 00 | sprite14wh      long 0
37714 963 00 00 00 00 | sprite15pointer long 0
37718 964 00 00 00 00 | sprite15xy      long 0
3771c 965 00 00 00 00 | sprite15wh      long 0
37720 966 00 00 00 00 | sprite16pointer long 0
37724 967 00 00 00 00 | sprite16xy      long 0
37728 968 00 00 00 00 | sprite16wh      long 0
3772c 969 00 00 00 00 | sprite17pointer long 0
37730 96a 00 00 00 00 | sprite17xy      long 0
37734 96b 00 00 00 00 | sprite17wh      long 0
37738 96c 00 00 00 00 | sprite18pointer long 0
3773c 96d 00 00 00 00 | sprite18xy      long 0
37740 96e 00 00 00 00 | sprite18wh      long 0
37744 96f 00 00 00 00 | spritenum long 0
37748 970             | 
37748 970 00 00 00 00 | spriteline long 0
3774c 971 84 03 00 00 | sprite_x long 900
37750 972 00 00 00 00 | sprite_y long 0
37754 973 10 00 00 00 | sprite_w long 16
37758 974 40 00 00 00 | sprite_h long 64
3775c 975 00 00 00 00 | l2 long 0
37760 976 00 00 00 00 | t5 long 0
37764 977 00 00 00 00 | t6 long 0
37768 978 00 00 00 00 | t7 long 0
3776c 979 00 00 00 00 | t8 long 0
37770 97a 00 00 00 00 | t9 long 0
37774 97b 00 00 00 00 | preloadaddr long 0
37778 97c 00 00 00 00 | preloadlineaddr long 0
3777c 97d 00 04 00 00 | a1024 long 1024
37780 97e             | 
37780 97e E0 03 00 00 | aa long 992
37784 97f FF 03 00 00 | a1023 long 1023
37788 980 00 10 00 00 | a4096 long 4096
3778c 981             |  fit 368
3778c 981             | _psram_spin2_dat_
3778c 981 00 00 00 00 
      ...             
37884 9bf 00 00 00 00 
37888 9c0 00 00 00 00 |     listdata long 0[8*8]
3788c 9c1             |             orgh
3788c                 | 
3788c                 | ' driver state
3788c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
37890     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
37894                 | 
37894                 | ' delay profile
37894     07 00 00 00 
37898     00 CF 7B 05 
3789c     80 D1 F0 08 
378a0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
378a4     80 C4 60 0F 
378a8     80 39 7A 12 
378ac     40 2D D9 13 
378b0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
378b4                 | 
378b4                 | ' data to be passed to driver when starting it
378b4                 | startupData
378b4     00 00 00 00 |     long    0           ' current frequency
378b8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
378bc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
378c0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
378c4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
378c8     D4 78 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
378cc     54 79 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
378d0     74 79 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
378d4                 | 
378d4                 | ' data for memory
378d4                 | deviceData
378d4                 |     ' 16 bank parameters follow (16MB per bank)
378d4     00 00 00 00 
      ...             
3790c     00 00 00 00 
37910     00 00 00 00 |     long    0[16]                               ' banks 0-15
37914                 |     ' 16 banks of pin parameters follow
37914     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
37918     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3791c     FF FF FF FF 
      ...             
3794c     FF FF FF FF 
37950     FF FF FF FF |     long    -1[14]                              ' banks 2-15
37954                 | 
37954                 | ' data for COG polling
37954                 | qosData 
37954     00 00 FF FF 
37958     00 00 FF FF 
3795c     00 00 FF FF 
37960     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
37964     00 00 FF FF 
37968     00 00 FF FF 
3796c     00 00 FF FF 
37970     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
37974                 |     
37974                 | ' mailbox storage
37974                 | 
37974                 | mailboxes
37974     00 00 00 00 
      ...             
379cc     00 00 00 00 
379d0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
379d4                 | 	alignl
379d4                 | _psram16drv_spin2_dat_
379d4                 |                             orgh
379d4     00 00 00 00 
      ...             
379ec     00 00 00 00 
379f0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
379f4                 | 
379f4                 | driver_start
379f4                 |                             org
379f4 000             | '..................................................................................................
379f4 000             | ' Memory layout for COG RAM once operational:
379f4 000             | '
379f4 000             | '  COG RAM address      Usage
379f4 000             | '  ---------------      ----
379f4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
379f4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
379f4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
379f4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
379f4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
379f4 000             | '  ~$198-$1F3           State and register variables
379f4 000             | '
379f4 000             | ' Also during driver COG startup:
379f4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
379f4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
379f4 000             | '..................................................................................................
379f4 000             |                             
379f4 000             | ' Mailbox storage after vector initialization
379f4 000             | 
379f4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
379f8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
379fc 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
37a00 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
37a04 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
37a08 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
37a0c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
37a10 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
37a14 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
37a18 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
37a1c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
37a20 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
37a24 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
37a28 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
37a2c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
37a30 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
37a34 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
37a38 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
37a3c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
37a40 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
37a44 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
37a48 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
37a4c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
37a50 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
37a54 018             | 
37a54 018             | ' Mailbox parameter addresses per COG once patched
37a54 018             |                             
37a54 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
37a58 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
37a5c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
37a60 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
37a64 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
37a68 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
37a6c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
37a70 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
37a74 020             | 
37a74 020             | '..................................................................................................
37a74 020             | ' Per COG request and state setup and service branching
37a74 020             |         
37a74 020             | cog0                 
37a74 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
37a78 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
37a7c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
37a80 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
37a84 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37a88 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37a8c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
37a90 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
37a94 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
37a98 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37a9c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37aa0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
37aa4 02c             | cog1                        
37aa4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
37aa8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
37aac 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
37ab0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
37ab4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37ab8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37abc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
37ac0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
37ac4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
37ac8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37acc 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37ad0 037 33 CA 63 FD |                             execf   request-0               'jump to service
37ad4 038             | cog2                         
37ad4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
37ad8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
37adc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
37ae0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
37ae4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37ae8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37aec 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
37af0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
37af4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
37af8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37afc 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b00 043 33 CA 63 FD |                             execf   request-0               'jump to service
37b04 044             | cog3                        
37b04 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
37b08 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
37b0c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
37b10 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
37b14 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b18 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b1c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
37b20 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
37b24 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
37b28 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37b2c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b30 04f 33 CA 63 FD |                             execf   request-0               'jump to service
37b34 050             | cog4                        
37b34 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
37b38 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
37b3c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
37b40 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
37b44 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b48 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b4c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
37b50 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
37b54 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
37b58 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37b5c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b60 05b 33 CA 63 FD |                             execf   request-0               'jump to service
37b64 05c             | cog5                        
37b64 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
37b68 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
37b6c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
37b70 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
37b74 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37b78 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37b7c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
37b80 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
37b84 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
37b88 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37b8c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37b90 067 33 CA 63 FD |                             execf   request-0               'jump to service
37b94 068             | cog6                        
37b94 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
37b98 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
37b9c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
37ba0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
37ba4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37ba8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37bac 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
37bb0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
37bb4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
37bb8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37bbc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37bc0 073 33 CA 63 FD |                             execf   request-0               'jump to service
37bc4 074             | cog7                        
37bc4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
37bc8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
37bcc 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
37bd0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
37bd4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
37bd8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37bdc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
37be0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
37be4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
37be8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37bec 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37bf0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
37bf4 080             |                             fit     128
37bf4 080             | 
37bf4 080             |                             fit     128
37bf4 080             | pad                         long    0[128-$]                'align init code to $80
37bf4 080             | 
37bf4 080             | '..................................................................................................
37bf4 080             | 
37bf4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
37bf4 080             | 
37bf4 080             | init                        
37bf4 080             |                             ' get driver scratch long address in hub
37bf4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
37bf8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
37bfc 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
37c00 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
37c04 084             |                     
37c04 084             |                             ' read in the additional LUT RAM code
37c04 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
37c08 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
37c0c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
37c10 087             | 
37c10 087             |                             ' read the startup parameters
37c10 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
37c14 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
37c18 089             | 
37c18 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
37c18 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
37c1c 08a             | 
37c1c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
37c20 08b 01 00 00 5F 
37c24 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
37c28 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
37c2c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
37c30 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
37c34 090             | 
37c34 090             |                             ' setup data pin modes and data bus pin group in streamer commands
37c34 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
37c38 091 01 00 00 FF 
37c3c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
37c40 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
37c44 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
37c48 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
37c4c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
37c50 097 08 DE 47 F5 |                             or      a, #8
37c54 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
37c58 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
37c5c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
37c60 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
37c64 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
37c68 09d 01 DE 07 F1 |                             add     a, #1
37c6c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
37c70 09f             |  
37c70 09f             |                             ' setup device control pin states
37c70 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
37c74 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
37c78 0a1 01 00 00 FF 
37c7c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
37c80 0a3             | 
37c80 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
37c84 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
37c88 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
37c8c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
37c90 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
37c94 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
37c98 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
37c9c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
37ca0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
37ca4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
37ca8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
37cac 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
37cb0 0af             | pinloop
37cb0 0af             |                             ' generate minimum CE high time before access
37cb0 0af A1 07 00 FF 
37cb4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
37cb8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
37cbc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
37cc0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
37cc4 0b4 1F DE 63 FD |                             waitx   a                       'delay
37cc8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
37ccc 0b6             | 
37ccc 0b6             |                             ' setup the COG mailboxes and addresses 
37ccc 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
37cd0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
37cd4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
37cd8 0b9             | 
37cd8 0b9 28 2E 64 FD |                             setq    #24-1
37cdc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
37ce0 0bb             | 
37ce0 0bb             |                             ' setup the polling loop for active COGs 
37ce0 0bb 01 C2 63 FD |                             cogid   id
37ce4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
37ce8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
37cec 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
37cf0 0bf 0A F0 07 F6 |                             mov     ptra, #10
37cf4 0c0 E1 F1 03 FA |                             mul     ptra, id
37cf8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
37cfc 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
37d00 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
37d04 0c4 03 C2 07 FA |                             mul     id, #3
37d08 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
37d0c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
37d10 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
37d14 0c8 D8 01 B0 FD |                             call    #reloadcogs
37d18 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
37d1c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
37d20 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
37d20 0cb D8 E5 B7 F9 |                             setd    d, #addr1
37d24 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
37d28 0cd 08 04 DC FC |                             rep     #2, #8
37d2c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
37d30 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
37d34 0d0             | 
37d34 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
37d34 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
37d34 0d0 01 C2 63 FD |                             cogid   id
37d38 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
37d3c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
37d40 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
37d44 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
37d48 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
37d4c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
37d50 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
37d54 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
37d58 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
37d5c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
37d60 0db 3F E4 A7 F9 |                             alti    d, #%111_111
37d64 0dc 00 00 00 F6 |                             mov     0-0, 0-0
37d68 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
37d6c 0de A5 E5 03 F1 |                             add     d, const512
37d70 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
37d74 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
37d78 0e1 00 00 00 F6 |                             mov     0-0, 0-0
37d7c 0e2             |                             
37d7c 0e2             |                             ' setup register values for control vector loop setup after we return
37d7c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
37d80 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
37d84 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
37d88 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
37d8c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
37d90 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
37d94 0e8 D0 C3 8F F9 |                             altd    id, #id0
37d98 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
37d9c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
37da0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
37da4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
37da8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
37dac 0ee             |  
37dac 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
37db0 0ef 07 CA 07 F5 |                             and     request, #7
37db4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
37db8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
37dbc 0f2             |                             fit     $100                    'ensure all init code fits this space
37dbc 0f2             | 
37dbc 0f2             |                             fit     $100                    'ensure all init code fits this space
37dbc 0f2             | 
37dbc 0f2 00 00 00 00 
      ...             
37dec 0fe 00 00 00 00 
37df0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
37df4 100             | 
37df4 100             | '..................................................................................................
37df4 100             | ' Error result handling and COG notification of request completion
37df4 100             | 
37df4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
37df8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
37dfc 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
37e00 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
37e04 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
37e08 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
37e0c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
37e10 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
37e14 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
37e18 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
37e1c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
37e20 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
37e24 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
37e28 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
37e2c 10e             | ' Poller re-starts here after a COG is serviced
37e2c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
37e30 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
37e34 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
37e38 111             | ' Main dynamic polling loop repeats until a request arrives
37e38 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
37e3c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
37e40 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
37e44 114             | 
37e44 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
37e48 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
37e4c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
37e50 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
37e54 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
37e58 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
37e5c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
37e60 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
37e64 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
37e68 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
37e6c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
37e70 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
37e74 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
37e78 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
37e7c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
37e80 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
37e84 124             | 
37e84 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
37e88 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
37e8c 126             |  
37e8c 126             | '..................................................................................................
37e8c 126             | ' List handler                               
37e8c 126             | 
37e8c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
37e90 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
37e94 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
37e98 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
37e9c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
37ea0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
37ea4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
37ea8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
37eac 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
37eb0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
37eb4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
37eb8 131 33 00 60 FD |                             execf   0-0                     'process the request 
37ebc 132             | 
37ebc 132             | '..................................................................................................
37ebc 132             | ' Restoring per COG state and resuming where we left off
37ebc 132             | 
37ebc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
37ec0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
37ec4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
37ec8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
37ecc 136 D8 CB FB F8 |                             getbyte request, addr1, #3
37ed0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
37ed4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
37ed8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
37edc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
37ee0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
37ee4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
37ee8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
37eec 13e             |                    
37eec 13e             | '..................................................................................................
37eec 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
37eec 13e             | 
37eec 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
37ef0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
37ef4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
37ef8 141 D0 DF B7 F9 |                             setd    a, #id0
37efc 142 D8 DF BF F9 |                             sets    a, #addr1
37f00 143 FE FF FF FF 
37f04 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
37f08 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
37f0c 146 3F DE A7 F9 |                             alti    a, #%111_111 
37f10 147 00 00 F0 F9 |                             muxq    0-0, 0-0
37f14 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
37f18 149 01 E2 63 FD |                             cogid   c
37f1c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
37f20 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
37f24 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
37f28 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
37f2c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
37f30 14f 00 E0 03 F6 |                             mov     b, 0-0
37f34 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
37f38 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
37f3c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
37f40 153 0C 00 90 AD |             if_z            jmp     #excluded               
37f44 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
37f48 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
37f4c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
37f50 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
37f54 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
37f58 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
37f5c 15a             | 
37f5c 15a             | 'determine priority cogs and build instructions for the polling sequence
37f5c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
37f60 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
37f64 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
37f68 15d             | 
37f68 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
37f6c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
37f70 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
37f74 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
37f78 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
37f7c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
37f80 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
37f84 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
37f88 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
37f8c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
37f90 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
37f94 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
37f98 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
37f9c 16a             | endprioloop
37f9c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
37fa0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
37fa4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
37fa8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
37fac 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
37fb0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
37fb4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
37fb8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
37fbc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
37fc0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
37fc4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
37fc8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
37fcc 176             | 
37fcc 176             | ' populate the round robin COG polling instructions
37fcc 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
37fd0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
37fd4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
37fd8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
37fdc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
37fe0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
37fe4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
37fe8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
37fec 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
37ff0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
37ff4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
37ff8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
37ffc 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
38000 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
38004 184             | '..................................................................................................
38004 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
38004 184             | 
38004 184             | set_latency                                                 '            (a) set latency
38004 184             | get_latency                                                 '            (b) get latency
38004 184             | set_burst                                                   '            (c) set burst size of bank
38004 184             | get_burst                                                   '            (d) get burst size of bank
38004 184             |                                                             '            (e) dump state
38004 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
38008 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3800c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
38010 187             |                                                             ' | | | | e  account for following AUGS
38010 187 04 00 00 FF 
38014 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
38018 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3801c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
38020 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
38024 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
38028 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3802c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
38030 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
38034 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
38038 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3803c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
38040 193             | 
38040 193             | '..................................................................................................
38040 193             | ' Misc EXECF code
38040 193             | 
38040 193 33 72 63 FD | start_read_exec             execf   newburstr
38044 194 33 7C 63 FD | start_write_exec            execf   resumewrites
38048 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3804c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
38050 197             | 
38050 197             | '..................................................................................................
38050 197             | ' Variables
38050 197             | 
38050 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
38054 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
38058 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3805c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
38060 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
38064 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
38068 19d             | 
38068 19d 00 00 00 80 | xfreq1          long    $80000000
3806c 19e 00 00 00 40 | xfreq2          long    $40000000
38070 19f 03 00 00 00 | delay           long    3
38074 1a0             | 
38074 1a0             | lutcodeaddr                 
38074 1a0             | startupparams
38074 1a0             | excludedcogs                                    'careful: shared register use!
38074 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
38078 1a1 00 00 00 00 | flags           long    0
3807c 1a2             | mask                                            'careful: shared register use!
3807c 1a2 00 00 00 00 | resetmaskA      long    0
38080 1a3             | limit                                           'careful: shared register use!
38080 1a3 00 00 00 00 | resetmaskB      long    0
38084 1a4 00 00 00 00 | datapins        long    0
38088 1a5             | const512                                        'careful: shared register use!
38088 1a5 00 00 00 00 | devicelist      long    0
3808c 1a6 00 00 00 00 | coglist         long    0
38090 1a7 00 00 00 00 | mbox            long    0 
38094 1a8             | 
38094 1a8             | clkpin                                          'shared with code patched during init
38094 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
38098 1a9             | cspin                                           'shared with code patched during init
38098 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3809c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
380a0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
380a4 1ac 01 00 00 00 | clkdelay        long    1
380a8 1ad 00 00 00 00 | regdatabus      long    0
380ac 1ae             | 
380ac 1ae 10 00 00 00 | deviceaddr      long    $10
380b0 1af             | rrcounter
380b0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
380b4 1b0             | 
380b4 1b0             | ' jump addresses for the per COG handlers
380b4 1b0 20 00 00 00 | cog0_handler    long    cog0
380b8 1b1 2C 00 00 00 | cog1_handler    long    cog1
380bc 1b2 38 00 00 00 | cog2_handler    long    cog2
380c0 1b3 44 00 00 00 | cog3_handler    long    cog3
380c4 1b4 50 00 00 00 | cog4_handler    long    cog4
380c8 1b5 5C 00 00 00 | cog5_handler    long    cog5
380cc 1b6 68 00 00 00 | cog6_handler    long    cog6
380d0 1b7 74 00 00 00 | cog7_handler    long    cog7
380d4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
380d8 1b9             | 
380d8 1b9             | ' EXECF sequences
380d8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
380dc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
380e0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
380e4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
380e8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
380ec 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
380f0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
380f4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
380f4 1c0             | 
380f4 1c0             | 
380f4 1c0             | ' SKIPF sequences
380f4 1c0             | skiptable
380f4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
380f8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
380fc 1c2 00 00 00 00 |                 long    0                      ' read modify write long
38100 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
38104 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
38108 1c5 00 00 00 00 | pattern2        long    0
3810c 1c6 00 00 00 00 | pattern3        long    0
38110 1c7 77 02 00 00 | singlelong      long    %1001110111  
38114 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
38118 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3811c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
38120 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
38124 1cc             | 
38124 1cc             | ' LUT RAM address values
38124 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
38128 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3812c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
38130 1cf F6 02 00 00 | noread          long    noread_lut
38134 1d0             | 
38134 1d0 00 00 00 00 | id0             long    0
38138 1d1 01 00 00 00 | id1             long    1
3813c 1d2 02 00 00 00 | id2             long    2
38140 1d3 03 00 00 00 | id3             long    3
38144 1d4 04 00 00 00 | id4             long    4
38148 1d5 05 00 00 00 | id5             long    5
3814c 1d6 06 00 00 00 | id6             long    6
38150 1d7 07 00 00 00 | id7             long    7
38154 1d8             | 
38154 1d8             | 'These next 10 request registers below are also temporarily reused during init 
38154 1d8             | 'and COG updates and need to follow immediately after id0-id7
38154 1d8 00 00 00 00 | addr1           long    0
38158 1d9 00 00 00 00 | hubdata         long    0
3815c 1da 00 00 00 00 | count           long    0
38160 1db 00 00 00 00 | addr2           long    0
38164 1dc 00 00 00 00 | total           long    0
38168 1dd 00 00 00 00 | offset1         long    0
3816c 1de 00 00 00 00 | offset2         long    0
38170 1df 00 00 00 00 | link            long    0
38174 1e0             | 
38174 1e0             | burstwrite                                      'note shared register use during init
38174 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
38178 1e1 00 00 00 00 | id              long    0
3817c 1e2             | 
3817c 1e2 00 00 00 00 | header          long    0
38180 1e3 00 00 00 00 | trailer         long    0
38184 1e4 00 00 00 00 | cmdaddr         long    0
38188 1e5 00 00 00 00 | request         long    0
3818c 1e6 00 00 00 00 | rrlimit         long    0
38190 1e7 00 00 00 00 | pinconfig       long    0
38194 1e8 00 00 00 00 | clks            long    0
38198 1e9 00 00 00 00 | resume          long    0
3819c 1ea 00 00 00 00 | orighubsize     long    0
381a0 1eb 00 00 00 00 | wrclks          long    0
381a4 1ec             | 
381a4 1ec 00 00 00 00 | pattern         long    0
381a8 1ed 00 00 00 00 | hubscratch      long    0
381ac 1ee 00 10 00 00 | val4k           long    4096
381b0 1ef             | 
381b0 1ef             | ' temporary general purpose regs
381b0 1ef 00 00 00 00 | a               long    0
381b4 1f0 00 00 00 00 | b               long    0
381b8 1f1 00 00 00 00 | c               long    0
381bc 1f2 00 00 00 00 | d               long    0
381c0 1f3             |                 fit     502
381c0 1f3             | 
381c0 1f3             |                 fit     502
381c0 1f3             | 
381c0 1f3             | '..................................................................................................
381c0 1f3             | 
381c0 1f3             |             orgh
381c0                 | 
381c0                 | lut_code
381c0                 | 'HW init code up to 80 longs
381c0                 | 
381c0                 | '..................................................................................................
381c0                 | ' Memory layout for LUT RAM once operational:
381c0                 | '
381c0                 | '  LUT RAM address      Usage
381c0                 | '  ---------------      ----
381c0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
381c0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
381c0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
381c0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
381c0                 | '
381c0                 | ' Also during driver COG startup:
381c0                 | ' $230-$24F is used for HW init setup
381c0                 | ' $250-$26F is used as temporary vector storage 
381c0                 | '..................................................................................................
381c0                 | 
381c0                 |                 org $230    
381c0 230             | 
381c0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
381c0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
381c4 231 24 16 60 FD |                             pollxfi
381c8 232 FF AA 2A FF 
381cc 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
381d0 234 28 00 B0 FD |                             call    #sendqspi
381d4 235 07 F8 07 FF 
381d8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
381dc 237 28 00 B0 FD |                             call    #sendspi
381e0 238 F8 07 78 FF 
381e4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
381e8 23a 1C 00 B0 FD |                             call    #sendspi
381ec 23b 7F 78 78 FF 
381f0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
381f4 23d 10 00 B0 FD |                             call    #sendspi 
381f8 23e 2D 00 64 FD |                             ret
381fc 23f             | 
381fc 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
38200 240 32 0C 64 FD |                             skipf   #%110
38204 241 9C EF 03 F6 |                             mov     pb, xsendimm
38208 242             | 
38208 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3820c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
38210 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
38214 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
38218 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3821c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
38220 248 24 36 60 FD |                             waitxfi                         'wait for the completion
38224 249 50 48 63 FD |                             fltl    datapins                'float data bus
38228 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3822c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
38230 24c             | 
38230 24c 00 00 00 00 
38234 24d 00 00 00 00 
38238 24e 00 00 00 00 
3823c 24f 00 00 00 00 |                 long    0[$270-32-$]
38240 250             |                 fit     $270-32  ' keep room for 32 vector longs
38240 250             |     
38240 250             |                 fit     $270-32  ' keep room for 32 vector longs
38240 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
38240 250             | rw_vect ' PSRAM jump vectors
38240 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38244 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38248 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3824c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
38250 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
38254 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
38258 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3825c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
38260 258             | ro_vect ' R/O PSRAM jump vectors
38260 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38264 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38268 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3826c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
38270 25c 00 01 00 00 |                 long    unsupported
38274 25d 00 01 00 00 |                 long    unsupported
38278 25e 00 01 00 00 |                 long    unsupported
3827c 25f 00 01 00 00 |                 long    unsupported
38280 260             | ctrl_vect ' Control jump vectors
38280 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
38284 261 00 01 00 00 |                 long    unsupported
38288 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3828c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
38290 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
38294 265 00 01 00 00 |                 long    unsupported
38298 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3829c 267 3E 01 00 00 |                 long    reconfig 
382a0 268             | no_vect ' Invalid bank jump vectors
382a0 268 01 01 00 00 |                 long    invalidbank
382a4 269 01 01 00 00 |                 long    invalidbank
382a8 26a 01 01 00 00 |                 long    invalidbank
382ac 26b 01 01 00 00 |                 long    invalidbank
382b0 26c 01 01 00 00 |                 long    invalidbank
382b4 26d 01 01 00 00 |                 long    invalidbank
382b8 26e 01 01 00 00 |                 long    invalidbank
382bc 26f 01 01 00 00 |                 long    invalidbank
382c0 270             |                 fit     $270
382c0 270             | 
382c0 270             |                 fit     $270
382c0 270             | '..................................................................................................
382c0 270             | ' PSRAM READS
382c0 270             |                                                             ' a b c d e f
382c0 270             |                                                             ' B W L B R L  (a) byte read
382c0 270             |                                                             ' Y O O U E O  (b) word read
382c0 270             |                                                             ' T R N R S C  (c) long read
382c0 270             |                                                             ' E D G S U K  (d) new burst read
382c0 270             |                                                             '       T M E  (e) resumed sub-burst
382c0 270             |                                                             '         E D  (f) locked sub-burst
382c0 270             | 
382c0 270             | 
382c0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
382c4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
382c8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
382cc 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
382d0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
382d4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
382d8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
382dc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
382e0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
382e4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
382e8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
382ec 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
382f0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
382f4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
382f8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
382fc 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
38300 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
38304 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
38308 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3830c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
38310 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
38314 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
38318 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3831c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
38320 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
38324 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
38328 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3832c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
38330 28c             | 
38330 28c             |                             ' fall through to read bursts
38330 28c             |                         
38330 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
38330 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
38334 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
38338 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3833c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38340 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
38344 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
38348 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3834c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
38350 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
38354 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
38358 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3835c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
38360 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
38364 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
38368 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3836c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
38370 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
38374 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
38378 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3837c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
38380 2a0 E8 D1 03 F1 |                             add     clks, clks
38384 2a1             | readcommon
38384 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
38388 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3838c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
38390 2a4             | 
38390 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38394 2a5 69 C8 63 FD |                             rev     cmdaddr
38398 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3839c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
383a0 2a8             | 
383a0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
383a4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
383a8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
383a8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
383ac 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
383b0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
383b4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
383b8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
383b8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
383bc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
383c0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
383c4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
383c8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
383cc 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
383d0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
383d0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
383d4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
383d8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
383dc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
383e0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
383e4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
383e8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
383ec 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
383f0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
383f4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
383f8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
383fc 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
38400 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
38404 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
38408 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
38408 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3840c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
38410 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
38414 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
38418 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3841c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
38420 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
38424 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
38428 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3842c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
38430 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
38434 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
38438 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3843c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
38440 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
38444 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
38448 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3844c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
38450 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
38454 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
38458 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3845c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
38460 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
38464 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
38468 2da 10 03 90 FD |                             jmp     #writecommon
3846c 2db             | 
3846c 2db             | '..................................................................................................
3846c 2db             | ' Burst continuation testing
3846c 2db             | 
3846c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
38470 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
38474 2dd             | continue_read_lut          
38474 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
38478 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3847c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
38480 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
38484 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
38488 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3848c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
38490 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
38494 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
38498 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3849c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
384a0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
384a4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
384a8 2ea             | 
384a8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
384ac 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
384b0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
384b4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
384b8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
384bc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
384c0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
384c4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
384c8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
384cc 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
384d0 2f4 2A 1C 66 0D |             _ret_           push    #poller
384d4 2f5             | 
384d4 2f5             | 
384d4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
384d8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
384d8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
384dc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
384e0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
384e4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
384e8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
384ec 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
384f0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
384f4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
384f8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
384fc 2ff             | '..................................................................................................
384fc 2ff             | ' Completion of requests
384fc 2ff             | 
384fc 2ff             | complete_rw_lut             
384fc 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
38500 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
38504 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
38508 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3850c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
38510 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
38514 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
38518 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3851c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
38520 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
38524 309 32 62 64 AD |             if_z            skipf   #%110001
38528 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3852c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
38530 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
38534 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
38538 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3853c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
38540 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
38544 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
38548 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3854c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
38550 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
38554 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
38558 316             |                                                             ' skipcase (a) gfx copy to/from hub
38558 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
38558 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
38558 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3855c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
38560 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
38564 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
38568 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3856c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
38570 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
38574 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
38578 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3857c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
38580 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
38584 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
38588 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3858c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
38590 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
38594 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
38598 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3859c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
385a0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
385a4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
385a8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
385ac 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
385b0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
385b4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
385b8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
385bc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
385c0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
385c4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
385c8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
385cc 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
385d0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
385d4 335 DF B7 03 A6 |             if_z            mov     addr2, link
385d8 336 34 FF 9F AD |             if_z            jmp     #checknext
385dc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
385e0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
385e4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
385e8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
385ec 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
385f0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
385f4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
385f8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
385fc 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
38600 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
38604 341             | 
38604 341             | '..................................................................................................
38604 341             | ' PSRAM WRITES
38604 341             |                                                             '  a b c d e f g h
38604 341             | 
38604 341             |                                                             '  B W L F B R L L (a) byte write(s)
38604 341             |                                                             '  Y O O I U E O O (b) word write(s)
38604 341             |                                                             '  T R N L R S C C (c) long write(s)
38604 341             |                                                             '  E D G L S U K K (d) resumed fill
38604 341             |                                                             '          T M E E (e) new burst write
38604 341             |                                                             '            E D D (f) resumed burst
38604 341             |                                                             '              F B (g) locked fill
38604 341             |                                                             '              I U (h) locked burst write
38604 341             |                                                             '              L R 
38604 341             |                                                             '              L S 
38604 341             |                                                             '                T 
38604 341             | 
38604 341             | w_single                   
38604 341             | w_fill_cont           
38604 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
38608 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3860c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
38610 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
38614 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
38618 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3861c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
38620 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
38624 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
38628 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3862c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
38630 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
38634 34d             |                ' disable call to r_resume_burst for single longs when z=0
38634 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
38638 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3863c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
38640 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
38644 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
38648 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3864c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
38650 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
38654 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
38658 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3865c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
38660 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
38664 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
38668 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3866c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
38670 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
38674 35d             |         
38674 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
38674 35d             |             '
38674 35d             |             '  At least one of these 3 optional components will be sent
38674 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
38674 35d             |             '     body - N x full longs of data
38674 35d             |             '     trailer - last partial long of data
38674 35d             |             '
38674 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
38674 35d             |             '
38674 35d             |             'Case    Type                           Sends
38674 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
38674 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
38674 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
38674 35d             |             ' 4)     Multiple long fill             body only
38674 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
38674 35d             | 
38674 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
38674 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
38678 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3867c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
38680 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38684 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
38688 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3868c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
38690 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
38694 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
38698 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3869c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
386a0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
386a4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
386a8 36a             |                             
386a8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
386ac 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
386b0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
386b4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
386b8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
386bc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
386c0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
386c4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
386c8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
386cc 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
386d0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
386d4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
386d8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
386dc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
386e0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
386e4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
386e8 37a             | 
386e8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
386ec 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
386f0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
386f4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
386f8 37e             |                  
386f8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
386fc 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
38700 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
38704 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
38708 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3870c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
38710 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
38714 385             | 
38714 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
38718 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3871c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
38720 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
38724 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
38728 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3872c 38b             | 
3872c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3872c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
38730 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
38734 38d 2A B0 63 FD |                             push    addr1                   'save address
38738 38e             | 
38738 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
38738 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3873c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
38740 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
38744 391             |             
38744 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
38748 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3874c 393 2B B0 63 FD |                             pop     addr1                   'restore address
38750 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
38754 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
38758 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3875c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
38760 398             | 
38760 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
38764 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
38768 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3876c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
38770 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
38774 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
38778 39e             | 
38778 39e             |                             'trailer is done
38778 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3877c 39f             | 
3877c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
38780 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38784 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
38788 3a2             | 
38788 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3878c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
38790 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38794 3a5 61 C8 63 FD |                             mergeb  cmdaddr
38798 3a6             |                             
38798 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3879c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
387a0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
387a4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
387a8 3aa             |                                                          
387a8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
387ac 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
387b0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
387b4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
387b8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
387bc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
387c0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
387c4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
387c8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
387cc 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
387d0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
387d4 3b5             |  
387d4 3b5 59 52 63 FD |                             drvh    cspin
387d8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
387dc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
387e0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
387e4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
387e8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
387ec 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
387f0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
387f4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
387f8 3be EA E5 03 F6 |                             mov     d, orighubsize
387fc 3bf EF E5 63 F0 |                             shl     d, a
38800 3c0 F2 E3 83 F1 |                             sub     c, d
38804 3c1 DD E3 03 F1 |                             add     c, offset1
38808 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3880c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
38810 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
38814 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
38818 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3881c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
38820 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
38824 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38828 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3882c 3cb BB D3 03 F6 |                             mov     resume, restorefill
38830 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
38834 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
38838 3ce 6C FC BF CD |             if_c            call    #yield
3883c 3cf 2D 00 64 FD |                             ret
38840 3d0             |                            
38840 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
38840 3d0             |                       '     rczl    pa                      'rotate left into address offset
38840 3d0             |                       '     rczl    c wcz                   'restore count and flags
38840 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
38844 3d1 02 EC 67 F0 |                             shl     pa, #2
38848 3d2 28 06 64 AD |             if_z            setq    #3
3884c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
38850 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
38854 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
38858 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3885c 3d7             | 
3885c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
38860 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
38864 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
38868 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3886c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
38870 3dc             |                 fit 1024-32
38870 3dc             |         
38870 3dc             | 
38870 3dc             | '..................................................................................................
38870 3dc             | 
38870 3dc             |                 fit 1024-32
38870 3dc 00 00 00 00 
38874 3dd 00 00 00 00 
38878 3de 00 00 00 00 
3887c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
38880 3e0             |                 org 1024-32
38880 000             | 
38880 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
38880 000 00 00 00 00 |                 long $0000
38884 001 11 11 00 00 |                 long $1111
38888 002 22 22 00 00 |                 long $2222
3888c 003 33 33 00 00 |                 long $3333
38890 004 44 44 00 00 |                 long $4444
38894 005 55 55 00 00 |                 long $5555
38898 006 66 66 00 00 |                 long $6666
3889c 007 77 77 00 00 |                 long $7777
388a0 008 88 88 00 00 |                 long $8888
388a4 009 99 99 00 00 |                 long $9999
388a8 00a AA AA 00 00 |                 long $aaaa
388ac 00b BB BB 00 00 |                 long $bbbb
388b0 00c CC CC 00 00 |                 long $cccc
388b4 00d DD DD 00 00 |                 long $dddd
388b8 00e EE EE 00 00 |                 long $eeee
388bc 00f FF FF 00 00 |                 long $ffff
388c0 010             | 
388c0 010             | 'masks
388c0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
388c4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
388c8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
388cc 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
388d0 014             | 
388d0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
388d4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
388d8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
388dc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
388e0 018             | 
388e0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
388e4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
388e8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
388ec 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
388f0 01c             | 
388f0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
388f4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
388f8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
388fc 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
38900 020             |         fit 1024
38900 020             | 
38900 020             |         fit 1024
38900 020             | 
38900 020             | '--------------------------------------------------------------------------------------------------
38900 020             |         orgh
38900                 | 
38900                 | gfxexpansion
38900                 |                             'simple line drawing graphics expansion of memory driver
38900                 |                             'jmp     #donerepeats                'just return for now
38900                 | 
38900     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
38904     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
38908     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3890c     DD E1 03 F6 |                             mov     b, offset1              'get error term
38910     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
38914     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
38918     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3891c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
38920     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
38924     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
38928     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3892c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
38930     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
38934     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
38938     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3893c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
38940     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
38944     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
38948     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3894c     DC E5 33 F9 |                             getword d, total, #0            'get line width
38950     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
38954     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
38958     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3895c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
38960     C3 03 80 FD |                             jmp     #readmask               'continue filling
38964                 | 	alignl
38964                 | _usbnew_spin2_dat_
38964                 |                 org     $000
38964 000             | 
38964 000             | usb_host_start
38964 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
38968 001             | 
38968 001 03 00 00 FF 
3896c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
38970 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
38974 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
38978 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3897c 006 29 70 63 FD |                 setq2   htmp
38980 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
38984 008             | 
38984 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
38988 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3898c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
38990 00b             | 
38990 00b             | '------------------------------------------------------------------------------
38990 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
38990 00b             | ' special because the receiving function must not respond with either STALL or
38990 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
38990 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
38990 00b             | ' corrupt packet, it must ignore the transaction
38990 00b             | '------------------------------------------------------------------------------
38990 00b             | ' On entry:
38990 00b             | '   PTRA - start address of the SETUP data struct.
38990 00b             | ' On exit:
38990 00b             | '   retval - PID_ACK on success, otherwise error code.
38990 00b             | '------------------------------------------------------------------------------
38990 00b             | txn_setup
38990 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
38994 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
38998 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3899c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
389a0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
389a4 010             | .setup
389a4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
389a8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
389ac 012 2D 00 64 AD |         if_z    ret
389b0 013 7C 0B B0 FD |                 call    #retry_wait
389b4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
389b8 015 2D 00 64 AD |         if_z    ret
389bc 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
389c0 017 E0 FF 9F FD |                 jmp     #.setup
389c4 018             | 
389c4 018             | '------------------------------------------------------------------------------
389c4 018             | ' IN/INTERRUPT transaction.
389c4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
389c4 018             | '------------------------------------------------------------------------------
389c4 018             | ' On entry:
389c4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
389c4 018             | '     CRC(b19..23).
389c4 018             | ' On exit:
389c4 018             | '------------------------------------------------------------------------------
389c4 018             | txn_in
389c4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
389c8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
389cc 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
389d0 01b             | 
389d0 01b             |                 ' Fall through to urx_packet
389d0 01b             | 
389d0 01b             | '------------------------------------------------------------------------------
389d0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
389d0 01b             | ' received are handshakes and IN DATAx.
389d0 01b             | '------------------------------------------------------------------------------
389d0 01b             | ' On entry:
389d0 01b             | ' On exit:
389d0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
389d0 01b             | '     returned.
389d0 01b             | '------------------------------------------------------------------------------
389d0 01b             | urx_packet
389d0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
389d4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
389d8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
389dc 01e 1A 92 63 FD |                 getct   hct2
389e0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
389e4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
389e8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
389ec 022             | .wait_sop
389ec 022 22 A7 8A FA |                 rdpin   urx, dm
389f0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
389f4 024 08 00 90 CD |         if_c    jmp     #.get_pid
389f8 025 FC 25 CC FB |                 jnct2   #.wait_sop
389fc 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
38a00 027             | .get_pid
38a00 027 28 02 B0 FD |                 call    #urx_next
38a04 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
38a08 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
38a0c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
38a10 02b             | .chk_pid
38a10 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a14 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
38a18 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
38a1c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
38a20 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
38a24 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
38a28 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
38a2c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
38a30 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
38a34 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
38a38 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
38a3c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
38a40 037             | .ack_resend
38a40 037 22 A7 82 FA |                 rqpin   urx, dm
38a44 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
38a48 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
38a4c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
38a50 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
38a54 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
38a58 03d             | .chk_eop
38a58 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38a5c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
38a60 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
38a64 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
38a68 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
38a6c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
38a70 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
38a74 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
38a78 045 2D 00 64 FD |                 ret
38a7c 046             | .idle
38a7c 046 22 A7 82 FA |                 rqpin   urx, dm
38a80 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38a84 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
38a88 049 2D 00 64 FD |                 ret
38a8c 04a             | 
38a8c 04a             | '------------------------------------------------------------------------------
38a8c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
38a8c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
38a8c 04a             | ' if one is required.
38a8c 04a             | '------------------------------------------------------------------------------
38a8c 04a             | ' On entry:
38a8c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
38a8c 04a             | ' On exit:
38a8c 04a             | '------------------------------------------------------------------------------
38a8c 04a             | utx_token
38a8c 04a 22 A7 82 FA |                 rqpin   urx, dm
38a90 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38a94 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
38a98 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38a9c 04e 34 0D B0 CD |         if_c    call    #utx_pre
38aa0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38aa4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
38aa8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
38aac 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
38ab0 053             | .next_byte
38ab0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
38ab4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
38ab8 055             | .wait
38ab8 055 40 46 72 FD |                 testp   dp                      wc
38abc 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
38ac0 057 23 03 08 FC |                 akpin   dp
38ac4 058 22 A5 22 FC |                 wypin   utx, dm
38ac8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
38acc 05a             | 
38acc 05a             | '------------------------------------------------------------------------------
38acc 05a             | ' SETUP/OUT/INTERRUPT transaction.
38acc 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
38acc 05a             | '------------------------------------------------------------------------------
38acc 05a             | ' On entry:
38acc 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
38acc 05a             | '     CRC(b19..23).
38acc 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
38acc 05a             | '   pkt_data - count of DATAx payload bytes to send.
38acc 05a             | ' On exit:
38acc 05a             | '------------------------------------------------------------------------------
38acc 05a             | txn_out
38acc 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
38ad0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
38ad4 05c 00 00 C0 FF 
38ad8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
38adc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
38ae0 05f             | 
38ae0 05f             |                 ' Fall through to utx_data
38ae0 05f             | 
38ae0 05f             | '------------------------------------------------------------------------------
38ae0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
38ae0 05f             | ' calculated while the data byte is being shifted out. Since data stage
38ae0 05f             | ' success/fail is not determined until the status stage of the transaction,
38ae0 05f             | ' this routine is only concerned about the current DATAx packet.
38ae0 05f             | '------------------------------------------------------------------------------
38ae0 05f             | ' On entry:
38ae0 05f             | '   PTRA - hub start address of the data to read.
38ae0 05f             | '   pkt_cnt - data payload size.
38ae0 05f             | ' On exit:
38ae0 05f             | '------------------------------------------------------------------------------
38ae0 05f             | utx_data
38ae0 05f 22 A7 82 FA |                 rqpin   urx, dm
38ae4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38ae8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
38aec 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
38af0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
38af4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38af8 065 D8 0C B0 CD |         if_c    call    #utx_pre
38afc 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38b00 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
38b04 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
38b08 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
38b0c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
38b10 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
38b14 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
38b18 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
38b1c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
38b20 06f             | .read_byte
38b20 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
38b24 070 F0 00 B0 FD |                 call    #utx_byte
38b28 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
38b2c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
38b30 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
38b34 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
38b38 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
38b3c 076             | .send_crc
38b3c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
38b40 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
38b44 078 D0 00 B0 FD |                 call    #utx_byte
38b48 079 5D A5 EA F8 |                 getbyte utx, crc, #1
38b4c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
38b50 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
38b54 07c             | 
38b54 07c             | '------------------------------------------------------------------------------
38b54 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
38b54 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
38b54 07c             | ' expects that the packet includes at least the CRC word.
38b54 07c             | '
38b54 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
38b54 07c             | ' was requested, which makes it difficult to determine where the data stops
38b54 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
38b54 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
38b54 07c             | ' USB-16 expected residual value of 0xB001.
38b54 07c             | '
38b54 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
38b54 07c             | ' so the caller can verify IN success before writing the data to its final
38b54 07c             | ' destination.
38b54 07c             | '------------------------------------------------------------------------------
38b54 07c             | ' On entry:
38b54 07c             | '   pkt_data - max byte count expected to be in the packet.
38b54 07c             | '   newb_flg - signals new byte ready when toggled.
38b54 07c             | ' On exit:
38b54 07c             | '   pkt_cnt - actual number of bytes read.
38b54 07c             | '------------------------------------------------------------------------------
38b54 07c             | urx_data
38b54 07c F7 75 03 F6 |                 mov     htmp2, pb
38b58 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
38b5c 07e 00 00 C0 FF 
38b60 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
38b64 080 BA EF 03 F6 |                 mov     pb, htmp2
38b68 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
38b6c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
38b70 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
38b74 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
38b78 085             | .wait_byte
38b78 085             | ' In-line rx for max speed
38b78 085 22 A7 82 FA |                 rqpin   urx, dm
38b7c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
38b80 087 53 A5 02 F5 |                 and     utx, urx
38b84 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
38b88 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
38b8c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
38b90 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
38b94 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
38b98 08d DC FF 9F FD |                 jmp     #.wait_byte
38b9c 08e             | .get_byte
38b9c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
38ba0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
38ba4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
38ba8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
38bac 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
38bb0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
38bb4 094             | .end_crc
38bb4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
38bb8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
38bbc 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
38bc0 097 2D 00 64 1D |         if_a    ret
38bc4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
38bc4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
38bc4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
38bc4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
38bc4 098 22 A7 82 FA |                 rqpin   urx, dm
38bc8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
38bcc 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
38bd0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
38bd0 09b             | .chk_crc
38bd0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
38bd4 09c 58 00 00 FF 
38bd8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
38bdc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
38be0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
38be4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
38be8 0a1 34 09 B0 FD |                 call    #poll_waitx
38bec 0a2             | 
38bec 0a2             |                 ' Fall through to utx_handshake
38bec 0a2             | 
38bec 0a2             | '------------------------------------------------------------------------------
38bec 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
38bec 0a2             | ' the appropriate IP delay has been inserted.
38bec 0a2             | '------------------------------------------------------------------------------
38bec 0a2             | ' On entry:
38bec 0a2             | '   retval - handshake PID to send.
38bec 0a2             | ' On exit:
38bec 0a2             | '   retval unchanged.
38bec 0a2             | '------------------------------------------------------------------------------
38bec 0a2             | utx_handshake
38bec 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38bf0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
38bf4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38bf8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
38bfc 0a6 5F A5 02 F6 |                 mov     utx, retval
38c00 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
38c04 0a8             | .idle
38c04 0a8 22 A7 82 FA |                 rqpin   urx, dm
38c08 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38c0c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
38c10 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
38c14 0ac 08 09 90 FD |                 jmp     #poll_waitx
38c18 0ad             | 
38c18 0ad             | '------------------------------------------------------------------------------
38c18 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
38c18 0ad             | '------------------------------------------------------------------------------
38c18 0ad             | ' On entry:
38c18 0ad             | '   utx - byte to transmit.
38c18 0ad             | ' On exit:
38c18 0ad             | '------------------------------------------------------------------------------
38c18 0ad             | utx_byte
38c18 0ad 40 46 72 FD |                 testp   dp                      wc
38c1c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
38c20 0af 23 03 08 FC |                 akpin   dp
38c24 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
38c28 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
38c2c 0b2             | 
38c2c 0b2             | '------------------------------------------------------------------------------
38c2c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
38c2c 0b2             | '------------------------------------------------------------------------------
38c2c 0b2             | ' On entry:
38c2c 0b2             | ' On exit:
38c2c 0b2             | '   retval - the byte read.
38c2c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
38c2c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
38c2c 0b2             | '     received.
38c2c 0b2             | '------------------------------------------------------------------------------
38c2c 0b2             | urx_next
38c2c 0b2 22 A7 8A FA |                 rdpin   urx, dm
38c30 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
38c34 0b4 53 A5 02 F5 |                 and     utx, urx
38c38 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
38c3c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
38c40 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
38c44 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
38c48 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38c4c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
38c50 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
38c54 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
38c58 0bd 2D 00 64 FD |                 ret
38c5c 0be             | 
38c5c 0be             | '------------------------------------------------------------------------------
38c5c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
38c5c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
38c5c 0be             | ' length, and the PID is not included in the CRC calculation:
38c5c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
38c5c 0be             | '  CRC5  ENDP ADDRESS PID
38c5c 0be             | ' %00000_1111_1111111_xxxxxxxx
38c5c 0be             | '------------------------------------------------------------------------------
38c5c 0be             | ' On entry:
38c5c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
38c5c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
38c5c 0be             | ' On exit:
38c5c 0be             | '   ep_addr_pid - CRC value appended to the packet.
38c5c 0be             | '------------------------------------------------------------------------------
38c5c 0be             | calc_crc5
38c5c 0be FF 03 00 FF 
38c60 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
38c64 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
38c68 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
38c6c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
38c70 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
38c74 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
38c78 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
38c7c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
38c80 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
38c84 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
38c88 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
38c8c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
38c90 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
38c94 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
38c98 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
38c9c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
38ca0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
38ca4 0d0             | 
38ca4 0d0             | '------------------------------------------------------------------------------
38ca4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
38ca4 0d0             | '------------------------------------------------------------------------------
38ca4 0d0             | isr1_fsframe
38ca4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
38ca8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38cac 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38cb0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38cb4 0d4             | .wait
38cb4 0d4 40 46 72 FD |                 testp   dp                      wc
38cb8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
38cbc 0d6 23 03 08 FC |                 akpin   dp
38cc0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
38cc4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
38cc8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
38ccc 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
38cd0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
38cd4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
38cd8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
38cdc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
38ce0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
38ce4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
38ce8 0e1 2C FF BF FD |                 call    #utx_byte
38cec 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
38cf0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
38cf4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
38cf8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
38cfc 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
38d00 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
38d04 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
38d08 0e9 5B A5 42 F5 |                 or      utx, icrc
38d0c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
38d10 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
38d14 0ec 20 00 90 FD |                 jmp     #isr1_wait
38d18 0ed             | isr1_lsframe
38d18 0ed 1A 92 62 FD |                 getct   iframe_ct_base
38d1c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38d20 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38d24 0f0             | .wait
38d24 0f0 40 46 72 FD |                 testp   dp                      wc
38d28 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
38d2c 0f2 23 03 08 FC |                 akpin   dp
38d30 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
38d34 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
38d38 0f5             | isr1_wait
38d38 0f5 22 A5 82 FA |                 rqpin   utx, dm
38d3c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
38d40 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
38d44 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
38d48 0f9 03 00 00 FF 
38d4c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
38d50 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
38d54 0fc F5 FF 3B FB |                 reti1
38d58 0fd             | 
38d58 0fd             | '------------------------------------------------------------------------------
38d58 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
38d58 0fd             | ' transaction will complete before the next frame is triggered.
38d58 0fd             | '------------------------------------------------------------------------------
38d58 0fd             | ' On entry:
38d58 0fd             | ' On exit:
38d58 0fd             | '------------------------------------------------------------------------------
38d58 0fd             | wait_txn_ok
38d58 0fd 1A 74 63 FD |                 getct   htmp2
38d5c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
38d60 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38d64 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
38d68 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
38d6c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
38d70 103 2D 00 64 FD |                 ret
38d74 104             | 
38d74 104             | '------------------------------------------------------------------------------
38d74 104             | ' A device connection was detected, or a bus reset was requested by the USB
38d74 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
38d74 104             | ' and perform a reset sequence prior to device enumeration.
38d74 104             | '------------------------------------------------------------------------------
38d74 104             | dev_reset
38d74 104 22 A7 82 FA |                 rqpin   urx, dm
38d78 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
38d7c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
38d80 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
38d84 108             | reset
38d84 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
38d88 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
38d8c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
38d90 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38d94 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
38d98 10d 1A 92 62 FD |                 getct   iframe_ct_base
38d9c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38da0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38da4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
38da8 111 24 70 07 F1 |                 add     htmp, #36
38dac 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
38db0 113             | .framewait
38db0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
38db4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
38db8 115 2D 00 64 FD |                 ret
38dbc 116             | 
38dbc 116             | '------------------------------------------------------------------------------
38dbc 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
38dbc 116             | '------------------------------------------------------------------------------
38dbc 116             | ' On entry:
38dbc 116             | '   PTRA - source address.
38dbc 116             | '   PB - destination address.
38dbc 116             | '   hr0 - length of copy, in bytes.
38dbc 116             | ' On exit:
38dbc 116             | '------------------------------------------------------------------------------
38dbc 116             | hmemcpy
38dbc 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
38dc0 117 F7 71 43 FC |                 wrbyte  htmp, pb
38dc4 118 01 EE 07 F1 |                 add     pb, #1
38dc8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
38dcc 11a             | 
38dcc 11a             | '------------------------------------------------------------------------------
38dcc 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
38dcc 11a             | ' loop until the errant device is disconnected.
38dcc 11a             | '------------------------------------------------------------------------------
38dcc 11a             | ' On entry:
38dcc 11a             | ' On exit:
38dcc 11a             | '------------------------------------------------------------------------------
38dcc 11a             | host_error
38dcc 11a             |           if ERROR_LED >= 0
38dcc 11a             |           end
38dcc 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
38dd0 11b             | 
38dd0 11b             | '------------------------------------------------------------------------------
38dd0 11b             | ' Get HID descriptor buffer for current port
38dd0 11b             | '------------------------------------------------------------------------------
38dd0 11b             | ' On entry:
38dd0 11b             | ' On exit:
38dd0 11b             | '   PB - HID descriptor buffer pointer
38dd0 11b             | '------------------------------------------------------------------------------
38dd0 11b             | get_hid_descr_buffer
38dd0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
38dd4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
38dd8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
38ddc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
38de0 11f             | 
38de0 11f             | 
38de0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
38de4 120             | 
38de4 120             | ' USB commands and error codes
38de4 120 00 00 00 00 | cmd_data        long    0
38de8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
38dec 122             | 
38dec 122             | ' Parameters block assigned at cog startup
38dec 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
38df0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
38df4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
38df8 125             | if ACTIVITY_LED >= 0
38df8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
38df8 125             | end
38df8 125             | if ERROR_LED >= 0
38df8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
38df8 125             | end
38df8 125 00 00 00 00 | hid_descr_p     long    0
38dfc 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
38dfc 126             | 'hkbd_report_p   long    0
38dfc 126 00 00 00 00 | hub_descr_p     long    0
38e00 127 00 00 00 00 | urx_buff_p      long    0
38e04 128 00 00 00 00 | dev_desc_buff_p long    0
38e08 129 00 00 00 00 | con_desc_buff_p long    0
38e0c 12a 00 00 00 00 | cache_start_p   long    0
38e10 12b 00 00 00 00 | cache_end_p     long    0
38e14 12c             | if EMUPAD_MAX_PLAYER > 0
38e14 12c             | emupad_out_ptr  long    0
38e14 12c             | end
38e14 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
38e18 12d             | 
38e18 12d             | hdev_init_start
38e18 12d             | hdev_port       res     1
38e18 12d             | hdev_port       res     1
38e18 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
38e18 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
38e18 12d             | kbm_next_datax  res     1
38e18 12d             | kbm_next_datax  res     1
38e18 12d             | hub_intf_num    res     1
38e18 12d             | hub_intf_num    res     1
38e18 12d             | hub_next_datax  res     1
38e18 12d             | hub_next_datax  res     1
38e18 12d             | hub_status_chg  res     1
38e18 12d             | hub_status_chg  res     1
38e18 12d             | hub_port_status res     1
38e18 12d             | hub_port_status res     1
38e18 12d             | if HAVE_MOUSE
38e18 12d             | ms_intf_num     res     1
38e18 12d             | ms_intf_num     res     1
38e18 12d             | ms_in_max_pkt   res     1
38e18 12d             | ms_in_max_pkt   res     1
38e18 12d             | end
38e18 12d             | kb_intf_num     res     1
38e18 12d             | kb_intf_num     res     1
38e18 12d             | kb_interval     res     1
38e18 12d             | kb_interval     res     1
38e18 12d             | kb_in_max_pkt   res     1
38e18 12d             | kb_in_max_pkt   res     1
38e18 12d             | kb_max_index    res     1
38e18 12d             | kb_max_index    res     1
38e18 12d             | kb_led_states   res     1
38e18 12d             | kb_led_states   res     1
38e18 12d             | gp_intf_num     res     1
38e18 12d             | gp_intf_num     res     1
38e18 12d             | gp_interval     res     1
38e18 12d             | gp_interval     res     1
38e18 12d             | gp_max_index    res     1
38e18 12d             | gp_max_index    res     1
38e18 12d             | gp_descr_len    res     1+MAX_DEVICES
38e18 12d             | gp_descr_len    res     1+MAX_DEVICES
38e18 12d             | hdev_init_end
38e18 12d             | 
38e18 12d             | ' Initialized at cog startup:
38e18 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
38e18 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
38e18 12d             | iframe_ct_new   res     1
38e18 12d             | iframe_ct_new   res     1
38e18 12d             | iframe_ct_base  res     1
38e18 12d             | iframe_ct_base  res     1
38e18 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
38e18 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
38e18 12d             | 
38e18 12d             | ' This register block is reset to zero when a USB device connects
38e18 12d             | hreg_init_start
38e18 12d             | hstatus         res     1         ' Host status flags
38e18 12d             | hstatus         res     1         ' Host status flags
38e18 12d             | hctwait         res     1         ' Poll-based wait clocks
38e18 12d             | hctwait         res     1         ' Poll-based wait clocks
38e18 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
38e18 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
38e18 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
38e18 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
38e18 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
38e18 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
38e18 12d             | xfer_retry      res     1         ' Control transfer retry count
38e18 12d             | xfer_retry      res     1         ' Control transfer retry count
38e18 12d             | retry           res     1         ' Transaction retry count
38e18 12d             | retry           res     1         ' Transaction retry count
38e18 12d             | utx             res     1         ' Byte to transmit on USB
38e18 12d             | utx             res     1         ' Byte to transmit on USB
38e18 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
38e18 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
38e18 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
38e18 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
38e18 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
38e18 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
38e18 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
38e18 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
38e18 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
38e18 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
38e18 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
38e18 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
38e18 12d             | frame           res     1         ' USB 1ms frame counter value
38e18 12d             | frame           res     1         ' USB 1ms frame counter value
38e18 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
38e18 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
38e18 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
38e18 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
38e18 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
38e18 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
38e18 12d             | crc             res     1         ' Used for CRC16 calculation
38e18 12d             | crc             res     1         ' Used for CRC16 calculation
38e18 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
38e18 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
38e18 12d             | retval          res     1         ' Global success/fail return parameter
38e18 12d             | retval          res     1         ' Global success/fail return parameter
38e18 12d             | context_retval  res     1         ' Operation contextual return parameter
38e18 12d             | context_retval  res     1         ' Operation contextual return parameter
38e18 12d             | ' Device stuff
38e18 12d             | hdev_id         res     1+MAX_DEVICES
38e18 12d             | hdev_id         res     1+MAX_DEVICES
38e18 12d             | hdev_bcd        res     1
38e18 12d             | hdev_bcd        res     1
38e18 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
38e18 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
38e18 12d             | ' Keyboard/mouse stuff
38e18 12d             | hctrl_ep_addr   res     1
38e18 12d             | hctrl_ep_addr   res     1
38e18 12d             | hctrl_max_pkt   res     1
38e18 12d             | hctrl_max_pkt   res     1
38e18 12d             | hconfig_base    res     1
38e18 12d             | hconfig_base    res     1
38e18 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
38e18 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
38e18 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
38e18 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
38e18 12d             | hdev_class      res     1
38e18 12d             | hdev_class      res     1
38e18 12d             | hdev_subclass   res     1
38e18 12d             | hdev_subclass   res     1
38e18 12d             | hdev_protocol   res     1
38e18 12d             | hdev_protocol   res     1
38e18 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
38e18 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
38e18 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
38e18 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
38e18 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
38e18 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
38e18 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
38e18 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
38e18 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
38e18 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
38e18 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
38e18 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
38e18 12d             | if HAVE_MOUSE
38e18 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
38e18 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
38e18 12d             | end
38e18 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
38e18 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
38e18 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
38e18 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
38e18 12d             | hdev_ep_addr    res     1+MAX_DEVICES
38e18 12d             | hdev_ep_addr    res     1+MAX_DEVICES
38e18 12d             | hdev_out_addr   res     1
38e18 12d             | hdev_out_addr   res     1
38e18 12d             | 
38e18 12d             | if EMUPAD_MAX_PLAYER > 0
38e18 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
38e18 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
38e18 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
38e18 12d             | end
38e18 12d             | 
38e18 12d             | hreg_init_end
38e18 12d             | 
38e18 12d             | hidr_start
38e18 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
38e18 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
38e18 12d             | hidr_flags      res     1
38e18 12d             | hidr_flags      res     1
38e18 12d             | hidr_axis       res     3
38e18 12d             | hidr_axis       res     3
38e18 12d             | hidr_buttons    res     1
38e18 12d             | hidr_buttons    res     1
38e18 12d             | hidr_hats       res     1
38e18 12d             | hidr_hats       res     1
38e18 12d             | '' Above are actually useful values, 6 longs
38e18 12d             | hidr_id         res     1
38e18 12d             | hidr_id         res     1
38e18 12d             | hidr_state      res     1
38e18 12d             | hidr_state      res     1
38e18 12d             | hidr_size       res     1
38e18 12d             | hidr_size       res     1
38e18 12d             | hidr_count      res     1
38e18 12d             | hidr_count      res     1
38e18 12d             | hidr_offset     res     1
38e18 12d             | hidr_offset     res     1
38e18 12d             | hidr_usage_idx  res     1
38e18 12d             | hidr_usage_idx  res     1
38e18 12d             | hidr_lminmax    res     1
38e18 12d             | hidr_lminmax    res     1
38e18 12d             | hidr_pminmax    res     1
38e18 12d             | hidr_pminmax    res     1
38e18 12d             | hidr_type       res     1
38e18 12d             | hidr_type       res     1
38e18 12d             | hidr_end
38e18 12d             | 
38e18 12d             | ' Variables dependent on the system freqency
38e18 12d             | _var_64_lower_  res     1
38e18 12d             | _var_64_lower_  res     1
38e18 12d             | _var_64_upper_  res     1
38e18 12d             | _var_64_upper_  res     1
38e18 12d             | _12Mbps_        res     1
38e18 12d             | _12Mbps_        res     1
38e18 12d             | _1_5Mbps_       res     1
38e18 12d             | _1_5Mbps_       res     1
38e18 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
38e18 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
38e18 12d             | _1us_           res     1         ' 1us
38e18 12d             | _1us_           res     1         ' 1us
38e18 12d             | _10us_          res     1         ' 10us
38e18 12d             | _10us_          res     1         ' 10us
38e18 12d             | _33us_          res     1         ' 33us
38e18 12d             | _33us_          res     1         ' 33us
38e18 12d             | _txn_err_       res     1         ' 250us
38e18 12d             | _txn_err_       res     1         ' 250us
38e18 12d             | _500us_         res     1         ' 500us
38e18 12d             | _500us_         res     1         ' 500us
38e18 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
38e18 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
38e18 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
38e18 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
38e18 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
38e18 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
38e18 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
38e18 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
38e18 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
38e18 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
38e18 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
38e18 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
38e18 12d             | _preamble_wait_ res     1
38e18 12d             | _preamble_wait_ res     1
38e18 12d             | _1ms_           res     1         ' 1ms
38e18 12d             | _1ms_           res     1         ' 1ms
38e18 12d             | _2ms_           res     1         ' 2ms
38e18 12d             | _2ms_           res     1         ' 2ms
38e18 12d             | _suspend_wait_  res     1         ' 3ms
38e18 12d             | _suspend_wait_  res     1         ' 3ms
38e18 12d             | _4ms_           res     1         ' 4ms
38e18 12d             | _4ms_           res     1         ' 4ms
38e18 12d             | _xfer_wait_     res     1         ' 5ms
38e18 12d             | _xfer_wait_     res     1         ' 5ms
38e18 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
38e18 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
38e18 12d             | _reset_hold_    res     1         ' 15ms
38e18 12d             | _reset_hold_    res     1         ' 15ms
38e18 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
38e18 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
38e18 12d             | _21ms_          res     1         ' 21ms
38e18 12d             | _21ms_          res     1         ' 21ms
38e18 12d             | _100ms_         res     1         ' 100ms
38e18 12d             | _100ms_         res     1         ' 100ms
38e18 12d             | _500ms_         res     1         ' 500ms
38e18 12d             | _500ms_         res     1         ' 500ms
38e18 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
38e18 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
38e18 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
38e18 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
38e18 12d             | '------------------------------------------------------------------------------
38e18 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
38e18 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
38e18 12d             | _usb_d_ls_nco_  res     1
38e18 12d             | _usb_d_ls_nco_  res     1
38e18 12d             | _usb_h_fs_nco_  res     1
38e18 12d             | _usb_h_fs_nco_  res     1
38e18 12d             | _usb_d_fs_nco_  res     1
38e18 12d             | _usb_d_fs_nco_  res     1
38e18 12d             | '------------------------------------------------------------------------------
38e18 12d             | ' Scratch registers
38e18 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
38e18 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
38e18 12d             | htmp1           res     1
38e18 12d             | htmp1           res     1
38e18 12d             | htmp2           res     1
38e18 12d             | htmp2           res     1
38e18 12d             | htmp3           res     1
38e18 12d             | htmp3           res     1
38e18 12d             | hrep            res     1         ' Repeat count
38e18 12d             | hrep            res     1         ' Repeat count
38e18 12d             | hsave0          res     1         ' Subroutine parameter saves
38e18 12d             | hsave0          res     1         ' Subroutine parameter saves
38e18 12d             | hsave1          res     1
38e18 12d             | hsave1          res     1
38e18 12d             | hsave2          res     1
38e18 12d             | hsave2          res     1
38e18 12d             | isrtmp1         res     1
38e18 12d             | isrtmp1         res     1
38e18 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
38e18 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
38e18 12d             | hr0             res     1         ' Multi-purpose registers
38e18 12d             | hr0             res     1         ' Multi-purpose registers
38e18 12d             | hr1             res     1
38e18 12d             | hr1             res     1
38e18 12d             | hr2             res     1
38e18 12d             | hr2             res     1
38e18 12d             | hr3             res     1
38e18 12d             | hr3             res     1
38e18 12d             | hpar1           res     1         ' Routine entry/exit parameters
38e18 12d             | hpar1           res     1         ' Routine entry/exit parameters
38e18 12d             | hpar2           res     1
38e18 12d             | hpar2           res     1
38e18 12d             | hpar3           res     1
38e18 12d             | hpar3           res     1
38e18 12d             | hct2            res     1         ' Function response bus turn-around timer
38e18 12d             | hct2            res     1         ' Function response bus turn-around timer
38e18 12d             | hct3            res     1         ' Keyboard/mouse poll timer
38e18 12d             | hct3            res     1         ' Keyboard/mouse poll timer
38e18 12d             | mod_cnt         res     1         ' Used in idle loops
38e18 12d             | mod_cnt         res     1         ' Used in idle loops
38e18 12d             |                 fit     $1F0
38e18 12d             |                 org     $200
38e18 200             | hlut_start
38e18 200             | 
38e18 200             | '------------------------------------------------------------------------------
38e18 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
38e18 200             | ' settings to startup defaults.
38e18 200             | '------------------------------------------------------------------------------
38e18 200             | ' On entry:
38e18 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
38e18 200             | '------------------------------------------------------------------------------
38e18 200             | set_speed_full
38e18 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
38e1c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38e20 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
38e24 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
38e28 204             | '                ret                             wcz     ' Restore caller flags on exit
38e28 204             | 
38e28 204             | '------------------------------------------------------------------------------
38e28 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
38e28 204             | ' is a downstream hub connected (not yet implemented), the baud generator
38e28 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
38e28 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
38e28 204             | ' putting the smart pins into reset.
38e28 204             | '------------------------------------------------------------------------------
38e28 204             | ' On entry:
38e28 204             | ' On exit: CZ flags restored to caller states
38e28 204             | '------------------------------------------------------------------------------
38e28 204             | set_speed_low
38e28 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
38e2c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
38e30 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
38e34 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38e38 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38e3c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38e40 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
38e44 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
38e48 20c             | 
38e48 20c             | '------------------------------------------------------------------------------
38e48 20c             | ' Perform configuration stuff required when a device intitially connects.
38e48 20c             | '------------------------------------------------------------------------------
38e48 20c             | ' On entry:
38e48 20c             | ' On exit:
38e48 20c             | '------------------------------------------------------------------------------
38e48 20c             | on_connect
38e48 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
38e4c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
38e50 20e             | .retry
38e50 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38e54 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
38e58 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
38e5c 211 00 08 00 FF 
38e60 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
38e64 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
38e68 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38e6c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
38e70 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
38e74 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
38e78 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e7c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
38e80 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
38e84 21b 4C 03 B0 FD |                 call    #poll_waitx
38e88 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
38e8c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
38e90 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
38e94 21f B8 FF 9F FD |                 jmp     #.retry
38e98 220             | .get_dev_desc
38e98 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
38e9c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
38ea0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
38ea4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
38ea8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
38eac 225 88 FB BF FD |                 call    #reset
38eb0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
38eb4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38eb8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
38ebc 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
38ec0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ec4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38ec8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
38ecc 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
38ed0 22e 04 00 00 FF 
38ed4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
38ed8 230 34 FA BF FD |                 call    #calc_crc5
38edc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
38ee0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38ee4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
38ee8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
38eec 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
38ef0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
38ef4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ef8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38efc 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
38f00 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
38f04 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
38f08 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
38f0c 23d C4 02 B0 FD |                 call    #poll_waitx
38f10 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
38f14 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38f18 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
38f1c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
38f20 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
38f24 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f28 244 2D 00 64 5D |         if_nz   ret
38f2c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
38f30 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
38f34 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
38f38 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
38f3c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
38f40 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
38f44 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
38f48 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
38f4c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
38f50 24e 2C FB 9F CD |         if_b    jmp     #host_error
38f54 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
38f58 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
38f5c 251 2D EC 63 FD |                 call    pa
38f60 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
38f64 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
38f68 254 2C EC 63 FD |                 jmp     pa
38f6c 255             | 
38f6c 255             | '------------------------------------------------------------------------------
38f6c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
38f6c 255             | ' Status reporting is always in the function-to-host direction.
38f6c 255             | '------------------------------------------------------------------------------
38f6c 255             | ' On entry:
38f6c 255             | '   PTRA - start address of the SETUP data in hub.
38f6c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
38f6c 255             | '     stage.
38f6c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
38f6c 255             | ' On exit:
38f6c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
38f6c 255             | '     contains the count of data stage bytes actually received, which must
38f6c 255             | '     always be <= the count requested.
38f6c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38f6c 255             | '     more specific USB operation error code.
38f6c 255             | '------------------------------------------------------------------------------
38f6c 255             | control_read
38f6c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38f70 256 F8 8F 03 F6 |                 mov     hpar2, ptra
38f74 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
38f78 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38f7c 259             | .xfer_start
38f7c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38f80 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38f84 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f88 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
38f8c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
38f90 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38f94 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38f98 260 61 00 00 FF 
38f9c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
38fa0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38fa4 263             | .data
38fa4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
38fa8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
38fac 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38fb0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
38fb4 267             | .nak_retry
38fb4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
38fb8 268             | .in_retry
38fb8 268 BC F6 BF FD |                 call    #txn_in
38fbc 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
38fc0 26a 28 00 90 AD |         if_z    jmp     #.commit
38fc4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38fc8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38fcc 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38fd0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38fd4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
38fd8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38fdc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38fe0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38fe4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
38fe8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
38fec 275             | .commit
38fec 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
38ff0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
38ff4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
38ff8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
38ffc 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
39000 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
39004 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
39008 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3900c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
39010 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
39014 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
39018 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3901c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
39020 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
39024 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
39028 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3902c 285             | .pre_status
3902c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
39030 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
39034 287 00 B0 06 F6 |                 mov     pkt_data, #0
39038 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3903c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
39040 28a 61 00 00 FF 
39044 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
39048 28c             | .out_retry
39048 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3904c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39050 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
39054 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39058 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3905c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39060 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
39064 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39068 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3906c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
39070 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
39074 297             | ' I've encountered transfer STALL, even though the data looks correct, and
39074 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
39074 297             | ' ControlRead() transfer gets things unstuck most of the time...
39074 297             | .xfer_retry
39074 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
39078 298 58 01 B0 FD |                 call    #poll_waitx
3907c 299 8C F9 BF FD |                 call    #wait_txn_ok
39080 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
39084 29b C7 F1 03 F6 |                 mov     ptra, hpar2
39088 29c C8 EF 03 F6 |                 mov     pb, hpar3
3908c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
39090 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
39094 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
39098 2a0             | 
39098 2a0             | '------------------------------------------------------------------------------
39098 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
39098 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
39098 2a0             | ' the SETUP data struct is filled with the required values.
39098 2a0             | '------------------------------------------------------------------------------
39098 2a0             | ' On entry:
39098 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
39098 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
39098 2a0             | '     stage.
39098 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
39098 2a0             | ' On exit:
39098 2a0             | '   retval - used to convey the success/failure of each stage.
39098 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
39098 2a0             | '     more specific USB operation error code.
39098 2a0             | '------------------------------------------------------------------------------
39098 2a0             | control_write
39098 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3909c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
390a0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
390a4 2a3             | 
390a4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
390a8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
390ac 2a5 F7 91 03 F6 |                 mov     hpar3, pb
390b0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
390b4 2a7             | .xfer_start
390b4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
390b8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
390bc 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
390c0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
390c4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
390c8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
390cc 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
390d0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
390d4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
390d8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
390dc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
390e0 2b2             | .data
390e0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
390e4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
390e8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
390ec 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
390f0 2b6             | .out_retry
390f0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
390f4 2b7 88 F6 BF FD |                 call    #txn_out
390f8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
390fc 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
39100 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39104 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
39108 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3910c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
39110 2be             | .commit
39110 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
39114 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
39118 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3911c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
39120 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
39124 2c3             | pre_status_in
39124 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
39128 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3912c 2c5             | .status_retry
3912c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
39130 2c6 44 F5 BF FD |                 call    #txn_in
39134 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
39138 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3913c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
39140 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
39144 2cb 2D 00 64 AD |         if_z    ret
39148 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3914c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39150 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
39154 2cf             | '               ret                                     ' Caller must handle transfer retirement
39154 2cf             | 
39154 2cf             | '------------------------------------------------------------------------------
39154 2cf             | ' Execute an IN interrupt transaction.
39154 2cf             | '------------------------------------------------------------------------------
39154 2cf             | ' On entry:
39154 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
39154 2cf             | '   hpar2 - Address of the IN data buffer
39154 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
39154 2cf             | ' On exit:
39154 2cf             | '   retval - the result of the operation.
39154 2cf             | '   hpar3 - the count of IN data bytes actually received.
39154 2cf             | '------------------------------------------------------------------------------
39154 2cf             | do_int_in
39154 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39158 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3915c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39160 2d2             | 
39160 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
39164 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
39168 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3916c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
39170 2d6             | .retry
39170 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
39174 2d7 00 F5 BF FD |                 call    #txn_in
39178 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3917c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
39180 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
39184 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
39188 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3918c 2dd 54 00 B0 FD |                 call    #retry_wait
39190 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39194 2df 18 00 90 AD |         if_z    jmp     #.post_ret
39198 2e0 D4 FF 9F FD |                 jmp     #.retry
3919c 2e1             | .commit
3919c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
391a0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
391a4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
391a8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
391ac 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
391b0 2e6             | .post_ret
391b0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
391b4 2e7             | 
391b4 2e7             | 
391b4 2e7             | '------------------------------------------------------------------------------
391b4 2e7             | ' Resets the downstream hub port to FS
391b4 2e7             | '------------------------------------------------------------------------------
391b4 2e7             | dwnstream_reset
391b4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
391b8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
391bc 2e9             | 
391bc 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
391c0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
391c4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
391c8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
391cc 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
391d0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
391d4 2ef             | 
391d4 2ef             | '------------------------------------------------------------------------------
391d4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
391d4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
391d4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
391d4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
391d4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
391d4 2ef             | '------------------------------------------------------------------------------
391d4 2ef             | ' On entry:
391d4 2ef             | '   hctwait - wait interval in sysclocks.
391d4 2ef             | ' On exit:
391d4 2ef             | '------------------------------------------------------------------------------
391d4 2ef             | poll_waitx
391d4 2ef 1A 92 63 FD |                 getct   hct2
391d8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
391dc 2f1             | .wait
391dc 2f1 FF 25 CC FB |                 jnct2   #.wait
391e0 2f2 2D 00 64 FD |                 ret
391e4 2f3             | 
391e4 2f3             | '------------------------------------------------------------------------------
391e4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
391e4 2f3             | '------------------------------------------------------------------------------
391e4 2f3             | ' On entry:
391e4 2f3             | '   retval - transaction response PID or error code.
391e4 2f3             | ' On exit:
391e4 2f3             | '------------------------------------------------------------------------------
391e4 2f3             | retry_wait
391e4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
391e8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
391ec 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
391f0 2f6 14 00 90 AD |         if_z    jmp     #.nak
391f4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
391f8 2f8 D8 FF BF FD |                 call    #poll_waitx
391fc 2f9             | .dec
391fc 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
39200 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
39204 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
39208 2fc             | .nak
39208 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3920c 2fd C4 FF BF FD |                 call    #poll_waitx
39210 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
39214 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
39218 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3921c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
39220 302 2D 00 64 FD |                 ret
39224 303             | 
39224 303             | host_reset
39224 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
39228 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3922c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3922c 305 BD 01 05 FF 
39230 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
39234 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
39238 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3923c 309             | ' Check to see if the system clock has been changed.
3923c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
39240 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
39244 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
39248 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3924c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39250 30e 40 46 62 FD |                 dirl    dp
39254 30f             | 
39254 30f 28 02 64 FD |                 setq    #1
39258 310 80 00 80 FF 
3925c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
39260 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
39264 313             | .enable
39264 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
39268 314 41 46 62 FD |                 dirh    dp
3926c 315 1F 36 63 FD |                 waitx   _1us_
39270 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39274 317             | 
39274 317             |                 ' Handle Port protection enable and startup delay
39274 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
39278 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3927c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
39280 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
39284 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
39288 31c             | 
39288 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3928c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
39290 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
39294 31f 00 00 04 F6 |                 mov     0-0, #0
39298 320             | .regloop
39298 320             | 
39298 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
39298 320             | 
39298 320             | discon_entry
39298 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3929c 321             | 
3929c 321             |               
3929c 321             |         if HAVE_HIDPAD
3929c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
392a0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
392a4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
392a8 324 F7 01 68 FC |                 wrlong  #0,pb
392ac 325             |         end
392ac 325             |         if EMUPAD_MAX_PLAYER > 0
392ac 325             |         end
392ac 325             | 
392ac 325             |                 ' Fall through to disconnected loop
392ac 325             | 
392ac 325             | '-----------------------------------------------------------------------------------------------------------------
392ac 325             | ' Device connect handling (Section 7.1.7.3).
392ac 325             | '-----------------------------------------------------------------------------------------------------------------
392ac 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
392ac 325             | ' device to connect (Section 7.1.7.3).
392ac 325             | '-----------------------------------------------------------------------------------------------------------------
392ac 325             | disconnected
392ac 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
392b0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
392b4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
392b8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
392bc 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
392c0 32a             |         if ACTIVITY_LED >= 0
392c0 32a             |         end
392c0 32a 22 A7 82 FA |                 rqpin   urx, dm
392c4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
392c8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
392cc 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
392d0 32e             | .se1_test
392d0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
392d4 32f FC FE BF FD |                 call    #poll_waitx
392d8 330 22 A7 82 FA |                 rqpin   urx, dm
392dc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
392e0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
392e4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
392e8 334             | .se1            'SE1 is a fatal error condition
392e8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
392ec 335 E4 FE BF FD |                 call    #poll_waitx
392f0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
392f4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
392f8 338             | .connect_test                                           ' Test lines until stable J/K state seen
392f8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
392fc 339 22 A7 82 FA |                 rqpin   urx, dm
39300 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
39304 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
39308 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3930c 33d             | connected
3930c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
39310 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
39314 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
39318 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3931c 341             | .set_pulse
3931c 341 1A 64 63 FD |                 getct   _pulse_time_
39320 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
39324 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
39324 343             | ' of 1ms and make a correction, if necessary.
39324 343             | '                mov     htmp, _1ms_
39324 343             | '                subs    htmp, iframe_delta
39324 343             | '                adds    _frame1ms_clks_, htmp
39324 343             | '                debug(udec(_frame1ms_clks_))
39324 343             | 
39324 343             |                 ' Fall through to idle/processing loop
39324 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
39328 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3932c 345             | 
3932c 345             | hidle
3932c 345 22 A7 82 FA |                 rqpin   urx, dm
39330 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39334 347 98 00 90 CD |         if_c    jmp     #.se0_test
39338 348 24 06 70 FD |                 pollct3                         wc
3933c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
39340 34a 1A 94 63 FD |                 getct   hct3
39344 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
39348 34c             | 
39348 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3934c 34d 00 70 E3 F8 |                 getbyte htmp
39350 34e             | 
39350 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
39354 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
39358 350 40 00 90 AD |         if_z    jmp     #.poll
3935c 351             | 
3935c 351             |         if _HAVE_GAMEPAD
3935c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
39360 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
39364 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
39368 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3936c 355 2C 00 90 AD |         if_z    jmp     #.poll
39370 356             |         end
39370 356             | 
39370 356             |         if HAVE_MOUSE
39370 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39374 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
39378 358 20 00 90 AD |         if_z    jmp     #.poll
3937c 359             |         end
3937c 359             | 
3937c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
39380 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
39384 35b 14 00 90 AD |         if_z    jmp     #.poll
39388 35c             | 
39388 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3938c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
39390 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
39394 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
39398 360             |         if HAVE_MOUSE
39398 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3939c 361             |         else
3939c 361             |         end
3939c 361             | 
3939c 361             | .poll
3939c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
393a0 362 2D EC 63 FD |                 call    pa
393a4 363             | .skip_poll
393a4 363             | 
393a4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
393a8 364             | 
393a8 364             | .nopoll
393a8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
393ac 365 44 00 90 AD |         if_z    jmp     #hsuspend
393b0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
393b4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
393b8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
393bc 369 1A 84 63 FD |                 getct   hr0
393c0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
393c4 36b             |         if ACTIVITY_LED >= 0
393c4 36b             |         end
393c4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
393c8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
393cc 36d 5C FF 9F FD |                 jmp     #hidle
393d0 36e             | ' Check for extended SE0 state on the bus
393d0 36e             | .se0_test
393d0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
393d4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
393d8 370 22 A7 82 FA |                 rqpin   urx, dm
393dc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
393e0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
393e4 373 24 F6 BF FD |                 call    #wait_txn_ok
393e8 374 00 00 80 FF 
393ec 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
393f0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
393f0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
393f4 377             | 
393f4 377             | hsuspend
393f4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
393f8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
393fc 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
39400 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
39404 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
39408 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3940c 37d             | 
3940c 37d             |                 ' Fall through to resume wait loop
3940c 37d             | 
3940c 37d             | hwait_resume
3940c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
39410 37e 02 86 47 F0 |                 shr     hr1, #2
39414 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
39418 380             |         if ACTIVITY_LED >= 0
39418 380             |         end
39418 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3941c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
39420 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
39424 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
39428 384 18 00 90 AD |         if_z    jmp     #.resume
3942c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
39430 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
39434 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
39438 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3943c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
39440 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
39444 38b             | .resume
39444 38b 22 05 28 FC |                 wypin   #OUT_K, dm
39448 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3944c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
39450 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
39454 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
39458 390 1F 70 63 FD |                 waitx   htmp
3945c 391 22 07 28 FC |                 wypin   #OUT_J, dm
39460 392 01 70 47 F0 |                 shr     htmp, #1
39464 393 1F 70 63 FD |                 waitx   htmp
39468 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3946c 395 1A 92 62 FD |                 getct   iframe_ct_base
39470 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39474 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39478 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3947c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
39480 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
39484 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
39488 39c             | 
39488 39c             | '------------------------------------------------------------------------------
39488 39c             | ' Send preamble to enable low-speed HUB ports
39488 39c             | '------------------------------------------------------------------------------
39488 39c             | ' On entry:
39488 39c             | ' On exit:
39488 39c             | '   USB baud rate set to low-speed
39488 39c             | '------------------------------------------------------------------------------
39488 39c             | utx_pre
39488 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3948c 39d 40 46 62 FD |                 dirl    dp
39490 39e 28 02 64 FD |                 setq    #1
39494 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
39498 3a0 58 44 62 FD |                 drvl    dm
3949c 3a1 59 46 62 FD |                 drvh    dp
394a0 3a2             | 
394a0 3a2 1E 00 00 FF 
394a4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
394a8 3a4             | 
394a8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
394ac 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
394b0 3a6 28 02 64 3D |         if_nc   setq    #1
394b4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
394b8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
394bc 3a9             | .l1
394bc 3a9             | 
394bc 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
394c0 3aa 40 46 62 FD |                 dirl    dp
394c4 3ab 28 02 64 FD |                 setq    #1
394c8 3ac 80 00 80 FF 
394cc 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
394d0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
394d4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
394d8 3b0 41 46 62 FD |                 dirh    dp
394dc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
394e0 3b2             | 
394e0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
394e4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
394e8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
394ec 3b5             | 
394ec 3b5             | hlut_end
394ec 3b5             |                 fit     $400
394ec 3b5             |                 orgh
394ec                 | if OVERLAP_MEMORY
394ec                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
394ec                 | end
394ec                 | '------------------------------------------------------------------------------
394ec                 | ' Routines called from cog space.
394ec                 | '------------------------------------------------------------------------------
394ec                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
394ec                 | '------------------------------------------------------------------------------
394ec                 | 
394ec                 | '------------------------------------------------------------------------------
394ec                 | ' USB host cog initialization.
394ec                 | '------------------------------------------------------------------------------
394ec                 | usb_host_init
394ec                 |                 ' Initialize buffer pointers
394ec                 |         if OVERLAP_MEMORY
394ec                 |         else
394ec     40 15 B0 FE |                 loc     pb, #hid_descr
394f0                 |         end
394f0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
394f4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
394f4                 |                 {
394f4                 |                 }
394f4                 |         
394f4                 |                 {
394f4                 |                 }
394f4                 |                 'loc     pb,#hkbd_report
394f4                 |                 'mov     hkbd_report_p,pb
394f4                 | 
394f4     08 1D B0 FE |                 loc     pb, #hub_descr
394f8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
394fc     1D 1D B0 FE |                 loc     pb, #urx_buff
39500     F7 4F 02 F6 |                 mov     urx_buff_p, pb
39504     95 1D B0 FE |                 loc     pb, #dev_desc_buff
39508     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3950c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
39510     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
39514     18 15 B0 FE |                 loc     pb, #usb_cache_start
39518     F7 55 02 F6 |                 mov     cache_start_p, pb
3951c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
39520     F7 57 02 F6 |                 mov     cache_end_p, pb
39524                 | 
39524                 |         if ERROR_LED >= 0
39524                 |         end
39524                 | 
39524                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
39524                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
39524                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
39524                 | ' Configure and enable the Serial Host USB port.
39524     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
39528                 | 
39528                 | '------------------------------------------------------------------------------
39528                 | ' Timing calculations happen before any interrupt(s) are enabled.
39528                 | '------------------------------------------------------------------------------
39528                 | ' On entry:
39528                 | '   htmp - current CLKFREQ value.
39528                 | '------------------------------------------------------------------------------
39528                 | hinit_usb_timings
39528                 | '                getct   htmp2
39528     B8 59 02 F6 |                 mov     save_sysclk, htmp
3952c     8D 5B 80 FF 
39530     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
39534     18 30 63 FD |                 getqx   _12Mbps_
39538     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3953c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
39540     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
39544     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
39548     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3954c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
39550     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
39554     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
39558     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3955c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
39560     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
39564     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
39568     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3956c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
39570     80 00 00 FF 
39574     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
39578     18 2C 63 FD |                 getqx   _var_64_lower_
3957c     19 2E 63 FD |                 getqy   _var_64_upper_
39580     28 2C 63 FD |                 setq    _var_64_lower_
39584     65 CD 1D FF 
39588     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3958c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
39590     01 00 00 FF 
39594     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
39598     18 2C 63 FD |                 getqx   _var_64_lower_
3959c     19 2E 63 FD |                 getqy   _var_64_upper_
395a0     28 2C 63 FD |                 setq    _var_64_lower_
395a4     A1 07 00 FF 
395a8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
395ac     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
395b0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
395b4     09 36 57 F0 |                 shr     _1us_, #9               wc
395b8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
395bc     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
395c0     18 38 63 FD |                 getqx   _10us_
395c4     09 38 57 F0 |                 shr     _10us_, #9              wc
395c8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
395cc     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
395d0     18 3A 63 FD |                 getqx   _33us_
395d4     09 3A 57 F0 |                 shr     _33us_, #9              wc
395d8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
395dc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
395e0     18 3C 63 FD |                 getqx   _txn_err_
395e4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
395e8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
395ec     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
395f0     18 3E 63 FD |                 getqx   _500us_
395f4     09 3E 57 F0 |                 shr     _500us_, #9             wc
395f8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
395fc     01 00 00 FF 
39600     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
39604     18 40 63 FD |                 getqx   _txn_ok_ls_
39608     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3960c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
39610     01 00 00 FF 
39614     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
39618     18 42 63 FD |                 getqx   _txn_ok_fs_
3961c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
39620     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
39624     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
39628     05 00 00 FF 
3962c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
39630     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
39634     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
39638     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3963c     1C 00 00 FF 
39640     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
39644     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
39648     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3964c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
39650     00 00 00 FF 
39654     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
39658     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3965c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
39660     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
39664     04 00 00 FF 
39668     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3966c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
39670     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
39674     8D 5B 00 FF 
39678     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3967c     18 4C 63 FD |                 getqx   _preamble_wait_
39680     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
39684     01 00 00 FF 
39688     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3968c     18 2C 63 FD |                 getqx   _var_64_lower_
39690     19 2E 63 FD |                 getqy   _var_64_upper_
39694     28 2C 63 FD |                 setq    _var_64_lower_
39698     01 00 00 FF 
3969c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
396a0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
396a4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
396a8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
396ac     FF FF 7F FF 
396b0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
396b4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
396b8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
396bc     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
396c0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
396c4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
396c8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
396cc     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
396d0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
396d4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
396d8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
396dc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
396e0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
396e4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
396e8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
396ec     A7 59 03 F6 |                 mov     _8ms_, _1ms_
396f0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
396f4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
396f8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
396fc     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
39700     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
39704     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
39708     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3970c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
39710     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
39714     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
39718     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3971c                 | '        _ret_   mov     _1sec_, save_sysclk
3971c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3971c                 | '                ret
3971c                 | {
3971c                 | }
3971c                 | 
3971c                 | '------------------------------------------------------------------------------
3971c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3971c                 | ' one. If it is, start the task progression that will configure the device for
3971c                 | ' use.
3971c                 | '------------------------------------------------------------------------------
3971c                 | ' On entry:
3971c                 | '   hconfig_base - start address of the cached config descriptor chain.
3971c                 | ' On exit:
3971c                 | '------------------------------------------------------------------------------
3971c                 | hparse_con_desc
3971c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
39720     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
39724     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
39728     4E 70 FF F9 |                 movbyts htmp,#%%1032
3972c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
39730                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
39730                 | 
39730     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
39734     6E ED 03 F1 |                 add     pa, hconfig_base
39738     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3973c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3973c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3973c                 | ' that defines a keyboard and/or mouse.
3973c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
39740                 | .next_intf
39740     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39744     BC 01 90 3D |         if_ae   jmp     #hset_config
39748     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3974c     75 F3 03 F1 |                 add     ptrb, hnext_desc
39750     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39754     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
39758     0C 00 90 AD |         if_z    jmp     #.intf
3975c     80 71 C7 FA |                 rdbyte  htmp, ptrb
39760     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39764     D8 FF 9F FD |                 jmp     #.next_intf
39768                 | .intf
39768     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3976c     00 90 07 F6 |                 mov     hpar3, #0
39770     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
39774     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
39778     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3977c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
39780                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
39780                 | 
39780                 | .endp
39780     80 71 C7 FA |                 rdbyte  htmp, ptrb
39784     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39788     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3978c     78 00 90 3D |         if_ae   jmp     #.get_device
39790     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39794     75 F3 03 F1 |                 add     ptrb, hnext_desc
39798     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3979c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
397a0     64 00 90 AD |         if_z    jmp     #.get_device
397a4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
397a8     04 00 90 AD |         if_z    jmp     #.get_ep
397ac     D0 FF 9F FD |                 jmp     #.endp
397b0                 | .get_ep
397b0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
397b4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
397b8     0F 86 67 F0 |                 shl     hr1, #8 + 7
397bc     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
397c0     3F 00 00 FF 
397c4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
397c8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
397cc     00 8E 0F F2 |                 cmp     hpar2, #0               wz
397d0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
397d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
397d8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
397dc     A0 FF 9F FD |                 jmp     #.endp
397e0                 | .in_ep
397e0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
397e4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
397e8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
397e8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
397ec     C2 89 DB F8 |                 setbyte hr2, hr0, #3
397f0     8C FF 9F FD |                 jmp     #.endp
397f4                 | .out_ep
397f4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
397f8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
397fc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
397fc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
39800     C2 8B DB F8 |                 setbyte hr3, hr0, #3
39804     78 FF 9F FD |                 jmp     #.endp
39808                 | 
39808                 | .get_device
39808     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3980c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
39810     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
39814     68 00 90 AD |         if_z    jmp     #.gamepad
39818     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3981c     AC 00 90 AD |         if_z    jmp     #.hub
39820     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
39824     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
39828     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3982c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39830     4C 00 90 AD |         if_z    jmp     #.gamepad
39834     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
39838     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3983c                 | .keyboard
3983c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
39840                 |         if HAVE_MOUSE
39840     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
39844                 |         else
39844                 |         end
39844     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
39848     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3984c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39850     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
39854     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
39858     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3985c                 |                 'debug(udec(kb_intf_num))
3985c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3985c     E0 FE 9F FD |                 jmp     #.next_intf
39860                 | if HAVE_MOUSE
39860                 | .mouse
39860     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
39864     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
39868     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3986c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
39870     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39874                 |                 'getbyte ms_interval, hr2, #3
39874     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
39878     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3987c                 |                 'debug(udec(kb_intf_num))
3987c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3987c     C0 FE 9F FD |                 jmp     #.next_intf
39880                 | end
39880                 | .gamepad
39880     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
39884     C7 71 63 F5 |                 xor     htmp, hpar2
39888     3F 00 00 FF 
3988c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39890     AC FE 9F AD |         if_z    jmp     #.next_intf
39894                 |         if HAVE_MOUSE
39894     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
39898     C7 71 63 F5 |                 xor     htmp, hpar2
3989c     3F 00 00 FF 
398a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
398a4     98 FE 9F AD |         if_z    jmp     #.next_intf
398a8                 |         end
398a8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
398ac     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
398b0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
398b4                 | 
398b4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
398b8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
398bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
398c0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
398c4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
398c8                 |                 'debug(udec(gp_intf_num))
398c8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
398c8     74 FE 9F FD |                 jmp     #.next_intf
398cc                 | .hub
398cc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
398d0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
398d4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
398d8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
398dc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
398e0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
398e4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
398e8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
398ec     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
398f0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
398f4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
398f8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
398fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
39900                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
39900     3C FE 9F FD |                 jmp     #.next_intf
39904                 | 
39904                 | '------------------------------------------------------------------------------
39904                 | ' If a newly-connected device is recognized, do whatever is needed to configure
39904                 | ' it according to its function, or functions. In the case of this boot protocol
39904                 | ' keyboard/mouse class driver:
39904                 | ' - SetConfiguration(config_num)
39904                 | ' - SetProtocol(boot)
39904                 | ' - SetIdle(indefinite)
39904                 | ' - Enter the device interrupt IN polling task stage.
39904                 | '------------------------------------------------------------------------------
39904                 | ' On entry:
39904                 | ' On exit:
39904                 | '------------------------------------------------------------------------------
39904                 | hset_config
39904                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
39904                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
39904     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
39908     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3990c     00 00 0C F2 |                 cmp     0-0, #0                 wz
39910     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
39914                 |         if HAVE_MOUSE
39914     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
39918                 |         end
39918     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3991c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
39920                 | .set_config
39920     6C 0E D0 FE |                 loc     ptra, #set_config
39924     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
39928     6E ED 03 F1 |                 add     pa, hconfig_base
3992c     F6 8D C3 FA |                 rdbyte  hpar1, pa
39930     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
39934     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
39938     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3993c     A0 02 A0 FD |                 call    #control_write
39940     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39944     2D 00 64 5D |         if_nz   ret
39948                 | .kbd_config
39948     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3994c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
39950                 | 
39950     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
39954     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39958     3F 00 00 FF 
3995c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39960     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
39964                 | 
39964     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
39968     34 0E D0 FE |                 loc     ptra, #set_protocol
3996c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
39970     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39974     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
39978     A0 02 A0 FD |                 call    #control_write
3997c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39980     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
39984     E4 02 90 5D |         if_nz   jmp     #.notify_client
39988     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3998c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
39990     30 03 B0 FD |                 call    #hset_idle
39994                 |                 'cmp     retval, #PID_ACK        wz
39994                 |         'if_nz   mov     hkbd_ep_addr, #0
39994                 |         'if_nz   jmp     #.notify_client
39994     A8 99 02 F6 |                 mov     hctwait, _2ms_
39998     EF 02 A0 FD |                 call    #poll_waitx
3999c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
399a0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
399a4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
399a8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
399ac     2C 03 B0 FD |                 call    #hset_kbdled_report
399b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
399b4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
399b8     B0 02 90 5D |         if_nz   jmp     #.notify_client
399bc     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
399c0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
399c4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
399c8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
399cc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
399d0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
399d4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
399d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
399dc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
399e0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
399e4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
399e8                 |         if !!HAVE_MOUSE
399e8                 |         end
399e8                 | 
399e8                 | .mouse_config
399e8                 | if HAVE_MOUSE
399e8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
399ec     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
399f0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
399f4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
399f8     3F 00 00 FF 
399fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39a00     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
39a04                 | 
39a04                 |                 debug("mouse passed addr check")
39a04                 | 
39a04     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
39a08     00 00 80 FF 
39a0c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
39a10     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
39a14     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39a18     55 02 A0 FD |                 call    #control_read
39a1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39a20     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
39a24     44 02 90 5D |         if_nz   jmp     #.notify_client
39a28     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
39a2c     56 01 00 F6 |                 mov     0-0, total_data
39a30     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39a34                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
39a34                 | 
39a34     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
39a38     64 0D D0 FE |                 loc     ptra, #set_protocol
39a3c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
39a40     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39a44     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
39a48     A0 02 A0 FD |                 call    #control_write
39a4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39a50     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
39a54     14 02 90 5D |         if_nz   jmp     #.notify_client
39a58                 |                 debug("mouse passed SetProtocol")
39a58     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
39a5c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
39a60     60 02 B0 FD |                 call    #hset_idle
39a64                 |                 'cmp     retval, #PID_ACK        wz
39a64                 |         'if_nz   mov     hmouse_ep_addr, #0
39a64                 |         'if_nz   jmp     #.notify_client
39a64                 |                 debug("mouse passed SetIdle")
39a64     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
39a68     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39a6c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39a70     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
39a74     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
39a78     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
39a7c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
39a80     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
39a84     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
39a88     3F 00 00 FF 
39a8c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
39a90     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
39a94     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
39a98     D0 01 90 FD |                 jmp     #.notify_client
39a9c                 | end
39a9c                 | .gamepad_config
39a9c                 | if _HAVE_GAMEPAD
39a9c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39aa0     00 00 0C F2 |                 cmp     0-0, #0                 wz
39aa4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
39aa8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39aac     00 70 03 F6 |                 mov     htmp, 0-0
39ab0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39ab4     3F 00 00 FF 
39ab8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39abc     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
39ac0                 | 
39ac0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39ac4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
39ac8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39acc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39ad0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
39ad4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39ad8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
39adc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
39ae0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
39ae4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39ae8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39aec     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
39af0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
39af4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
39af8                 | 
39af8                 |                 if EMUPAD_MAX_PLAYER > 0
39af8                 |                 
39af8                 | .rule_loop           
39af8                 |                 end
39af8                 | 
39af8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
39afc     5C 00 90 AD |         if_e    jmp     #.xinput
39b00     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39b04     00 70 03 F6 |                 mov     htmp,0-0
39b08     01 A6 02 FF 
39b0c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
39b10     7C 00 90 AD |         if_e    jmp     #.ps3
39b14                 | 
39b14     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
39b18     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
39b1c     00 00 80 5F 
39b20     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
39b24     03 00 80 AF 
39b28     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
39b2c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
39b30     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39b34     55 02 A0 FD |                 call    #control_read
39b38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39b3c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
39b40     00 00 04 56 |         if_nz   mov     0-0, #0
39b44     24 01 90 5D |         if_nz   jmp     #.notify_client
39b48     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
39b4c     56 01 00 F6 |                 mov     0-0, total_data
39b50     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39b54                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
39b54                 | 
39b54     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
39b58     10 01 90 FD |                 jmp     #.notify_client
39b5c                 | .xinput
39b5c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
39b60     2D EF 03 F6 |                 mov     pb,hdev_port
39b64     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
39b68     03 EE 27 F3 |                 fle     pb,#3
39b6c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
39b70     02 EF 47 FC |                 wrbyte  pb, ptra[2]
39b74                 | 
39b74     03 B0 06 F6 |                 mov     pkt_data, #3
39b78     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
39b7c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
39b80     5A 00 A0 FD |                 call    #txn_out
39b84     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
39b88                 | 
39b88     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
39b8c     DC 00 90 FD |                 jmp     #.notify_client
39b90                 | .ps3
39b90     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
39b94     2D EF 03 F6 |                 mov     pb,hdev_port
39b98     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
39b9c     04 EE 27 F3 |                 fle     pb,#4
39ba0     F7 EF C3 F9 |                 decod   pb
39ba4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
39ba8                 | 
39ba8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
39bac     00 0C D0 FE |                 loc     ptra, #set_report
39bb0     01 00 80 FF 
39bb4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
39bb8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39bbc     03 61 5C FC |                 wrword  #48, ptra[wLength]
39bc0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
39bc4     A0 02 A0 FD |                 call    #control_write
39bc8                 | 
39bc8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
39bcc     E0 0B D0 FE |                 loc     ptra, #set_report
39bd0     01 00 80 FF 
39bd4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
39bd8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39bdc     03 09 5C FC |                 wrword  #4, ptra[wLength]
39be0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
39be4     A0 02 A0 FD |                 call    #control_write
39be8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
39bec     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
39bf0     00 00 04 56 |         if_nz   mov     0-0, #0
39bf4     74 00 90 5D |         if_nz   jmp     #.notify_client
39bf8                 | 
39bf8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
39bfc     6C 00 90 FD |                 jmp     #.notify_client
39c00                 | end
39c00                 | 
39c00                 | .hub_config
39c00     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
39c04     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
39c08     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
39c0c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39c10     3F 00 00 FF 
39c14     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39c18     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
39c1c                 | 
39c1c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
39c20     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
39c24     26 EF 03 F6 |                 mov     pb, hub_descr_p
39c28     55 02 A0 FD |                 call    #control_read
39c2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39c30     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
39c34     34 00 90 5D |         if_nz   jmp     #.notify_client
39c38                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
39c38                 | 
39c38     26 F1 03 F6 |                 mov     ptra, hub_descr_p
39c3c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
39c40     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
39c44                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
39c44                 | .pwr_loop
39c44     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
39c48     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
39c4c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
39c50     A0 02 A0 FD |                 call    #control_write
39c54     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
39c58                 | 
39c58     B1 99 02 F6 |                 mov     hctwait, _500ms_
39c5c     B0 99 02 F1 |                 add     hctwait, _100ms_
39c60     EF 02 A0 FD |                 call    #poll_waitx
39c64                 | 
39c64     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
39c68     00 00 90 FD |                 jmp     #.notify_client
39c6c                 | 
39c6c                 | .notify_client
39c6c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39c70     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
39c74                 |                 debug(uhex_long(hdev_type,hdev_type+1))
39c74                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
39c74     2D 00 64 FD |                 ret
39c78                 | 
39c78                 | '------------------------------------------------------------------------------
39c78                 | ' Initialize the keyboard/mouse data area to start-up values.
39c78                 | '------------------------------------------------------------------------------
39c78                 | ' On entry:
39c78                 | ' On exit:
39c78                 | '------------------------------------------------------------------------------
39c78                 | init_kbdm_data
39c78     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
39c7c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
39c80                 | 
39c80     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
39c84     2B ED 03 F6 |                 mov     pa, cache_end_p
39c88                 | .loop
39c88     61 01 4C FC |                 wrbyte  #0, ptra++
39c8c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
39c90     F4 FF 9F CD |         if_b    jmp     #.loop
39c94                 |         
39c94                 |         if EMUPAD_MAX_PLAYER > 0
39c94                 |         end
39c94                 | 
39c94                 | 
39c94     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
39c98                 | .regloop
39c98     00 EC 8F F9 |                 altd    pa
39c9c     00 00 04 F6 |                 mov     0-0, #0
39ca0     01 EC 07 F1 |                 add     pa, #1
39ca4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
39ca8     EC FF 9F 5D |         if_nz   jmp     #.regloop
39cac                 | 
39cac     E1 E1 61 FF 
39cb0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
39cb4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
39cb8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
39cbc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
39cc0                 | 
39cc0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
39cc4                 | 
39cc4                 | '------------------------------------------------------------------------------
39cc4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
39cc4                 | ' function.
39cc4                 | '------------------------------------------------------------------------------
39cc4                 | ' On entry:
39cc4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
39cc4                 | '   hpar2 - index number of the target interface.
39cc4                 | ' On exit:
39cc4                 | '------------------------------------------------------------------------------
39cc4                 | hset_idle
39cc4     A8 99 02 F6 |                 mov     hctwait, _2ms_
39cc8     EF 02 A0 FD |                 call    #poll_waitx
39ccc     D8 0A D0 FE |                 loc     ptra, #set_idle
39cd0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
39cd4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
39cd8     A0 02 80 FD |                 jmp     #control_write
39cdc                 | 
39cdc                 | '------------------------------------------------------------------------------
39cdc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
39cdc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
39cdc                 | '------------------------------------------------------------------------------
39cdc                 | ' On entry:
39cdc                 | '   ep_addr_pid - device address and enpoint for the request.
39cdc                 | ' On exit:
39cdc                 | '   retval - transaction result.
39cdc                 | '------------------------------------------------------------------------------
39cdc                 | hset_kbdled_report
39cdc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
39ce0     CC 0A D0 FE |                 loc     ptra, #set_report
39ce4     01 00 80 FF 
39ce8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
39cec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39cf0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
39cf4     27 EF 03 F6 |                 mov     pb, urx_buff_p
39cf8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
39cfc     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
39d00                 | 
39d00                 | '------------------------------------------------------------------------------
39d00                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
39d00                 | '------------------------------------------------------------------------------
39d00                 | ' On entry:
39d00                 | ' On exit:
39d00                 | '------------------------------------------------------------------------------
39d00                 | hget_kbd_in_report
39d00     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
39d04     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39d08     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
39d0c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
39d10     CF 02 A0 FD |                 call    #do_int_in
39d14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39d18     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39d1c                 | 
39d1c     00 90 0F F2 |                 cmp     hpar3, #0               wz
39d20     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39d24                 | 
39d24     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
39d28     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39d2c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
39d30     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
39d34                 | 
39d34     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
39d38     18 00 B0 FD |                 call    #hkbd_compare
39d3c                 |         if EMUPAD_MAX_PLAYER > 0
39d3c                 |         end
39d3c                 | 
39d3c                 | .led_check
39d3c     3B 71 03 F6 |                 mov     htmp, kb_led_states
39d40     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
39d44     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
39d48     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
39d4c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
39d50     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
39d54                 | 
39d54                 | '------------------------------------------------------------------------------
39d54                 | ' Compare current and previous keyboard data buffers for keypress changes.
39d54                 | '------------------------------------------------------------------------------
39d54                 | hkbd_compare
39d54     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39d58     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
39d5c     61 73 07 FB |                 rdlong  htmp1, ptra++
39d60     E1 75 07 FB |                 rdlong  htmp2, ptrb++
39d64     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
39d68     61 73 07 FB |                 rdlong  htmp1, ptra++
39d6c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
39d70     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
39d74     2D 00 64 AD |         if_z    ret
39d78                 | 
39d78     B4 13 D0 FE |                 loc     ptra, #hkbd_report
39d7c                 | 
39d7c                 |                 ' Handle modifiers
39d7c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
39d80     00 87 C7 FA |                 rdbyte  hr1, ptra
39d84     C7 87 43 F9 |                 rolword hr1,hpar2,#0
39d88     63 86 63 FD |                 mergew  hr1
39d8c     08 EC 07 F6 |                 mov     pa,#8
39d90                 | .modloop
39d90     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
39d94     E8 8C 07 F6 |                 mov     hpar1,#$E8
39d98     F6 8D 83 F1 |                 sub     hpar1,pa
39d9c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
39da0     FB ED 6F FB |                 djnz    pa,#.modloop
39da4                 | 
39da4     6F E0 75 FD | .release        modc    _set    wc
39da8                 |                 'alts    hdev_port, #hid_report_p
39da8                 |                 'mov     ptra, hid_report_p
39da8     02 F0 07 F1 |                 add     ptra, #2
39dac     06 EC 07 F6 |                 mov     pa, #6
39db0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
39db4     20 00 90 AD |         if_z    jmp     #.rl3
39db8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39dbc     02 F2 07 F1 |                 add     ptrb, #2
39dc0     06 EE 07 F6 |                 mov     pb, #6
39dc4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
39dc8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39dcc     08 00 90 AD |         if_z    jmp     #.rl3
39dd0     FC EF 6F FB |                 djnz    pb, #.rl2
39dd4     68 00 B0 FD |                 call    #hkbd_translate
39dd8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
39ddc                 | 
39ddc     00 90 07 F6 |                 mov     hpar3, #0
39de0     1F 90 27 F4 |                 bith    hpar3, #31
39de4                 | 
39de4     6F 00 74 FD | .press          modc    _clr    wc
39de8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39dec     02 F0 07 F1 |                 add     ptra, #2
39df0     06 EC 07 F6 |                 mov     pa, #6
39df4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
39df8     20 00 90 AD |         if_z    jmp     #.pl3
39dfc     30 13 F0 FE |                 loc     ptrb, #hkbd_report
39e00     02 F2 07 F1 |                 add     ptrb, #2
39e04     06 EE 07 F6 |                 mov     pb, #6
39e08     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
39e0c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39e10     08 00 90 AD |         if_z    jmp     #.pl3
39e14     FC EF 6F FB |                 djnz    pb, #.pl2
39e18     24 00 B0 FD |                 call    #hkbd_translate
39e1c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
39e20                 | 
39e20     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
39e24     08 13 F0 FE |                 loc     ptrb, #hkbd_report
39e28     28 02 64 FD |                 setq #1
39e2c     61 73 07 FB |                 rdlong  htmp1, ptra++
39e30     28 02 64 FD |                 setq #1
39e34     E1 73 67 FC |                 wrlong  htmp1, ptrb++
39e38     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
39e3c                 | 
39e3c     2D 00 64 FD |                 ret
39e40                 | 
39e40                 | '------------------------------------------------------------------------------
39e40                 | ' Translate keyboard scancode to ASCII
39e40                 | '------------------------------------------------------------------------------
39e40                 | ' On entry:
39e40                 | '   hpar1 - scancode
39e40                 | '   hpar2 - key modifiers state
39e40                 | '       c - pressed (0) or released (1) flag
39e40                 | ' On exit:
39e40                 | '   hpar1 - bit     31 = 0 pressed, 1 released
39e40                 | '               30..17 = unused
39e40                 | '                   18 = scroll-lock state 
39e40                 | '                   17 = caps-lock state
39e40                 | '                   16 = num-lock state 
39e40                 | '                15..8 = key modifiers state
39e40                 | '                 7..0 = scancode
39e40                 | '------------------------------------------------------------------------------
39e40                 | hkbd_translate
39e40     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
39e44     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
39e48     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
39e4c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
39e50     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
39e54     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
39e58                 | 
39e58                 |         if EMUPAD_MAX_PLAYER > 0
39e58                 | 
39e58                 |         if EMUPAD_BT0_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT1_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT2_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT3_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT4_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT5_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT6_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT7_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT8_BIT >= 0
39e58                 |         end
39e58                 |         if EMUPAD_BT9_BIT >= 0
39e58                 |         end
39e58                 | 
39e58                 |         end
39e58     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
39e5c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
39e60     1F 8C 47 F4 |                 bitc    hpar1, #31
39e64                 |         if KEYQUEUE_SIZE > 0
39e64     C4 09 B0 FE |                 loc pb,#keyq_head
39e68     F7 71 E3 FA |                 rdword htmp,pb
39e6c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
39e70     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
39e74     B8 75 03 F6 |                 mov htmp2,htmp
39e78     04 74 07 FA |                 mul htmp2,#4
39e7c     F7 75 03 F1 |                 add htmp2,pb
39e80     02 74 07 F1 |                 add htmp2,#2
39e84     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
39e88     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
39e8c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
39e90     F7 71 43 5C |         if_nz   wrbyte htmp,pb
39e94                 |         end
39e94     2D 00 7C FD |                 ret wcz
39e98                 | 
39e98                 | if HAVE_MOUSE
39e98                 | '------------------------------------------------------------------------------
39e98                 | ' Execute an IN interrupt transaction to poll for mouse activity.
39e98                 | '------------------------------------------------------------------------------
39e98                 | ' On entry:
39e98                 | ' On exit:
39e98                 | '------------------------------------------------------------------------------
39e98                 | hget_mouse_in_report
39e98     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
39e9c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39ea0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
39ea4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
39ea8     CF 02 A0 FD |                 call    #do_int_in
39eac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39eb0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39eb4                 | 
39eb4     00 90 0F F2 |                 cmp     hpar3, #0               wz
39eb8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39ebc                 | 
39ebc     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
39ec0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39ec4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
39ec8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
39ecc                 | 
39ecc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39ed0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
39ed4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
39ed8     01 90 87 31 |         if_ae   sub     hpar3, #1
39edc                 | 
39edc     40 09 90 FE |                 loc     pa, #mouse_limits
39ee0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
39ee4                 | 
39ee4                 |                 ' load xacc,yacc,zacc
39ee4     28 04 64 FD |                 setq    #3-1
39ee8     80 87 07 FB |                 rdlong  hr1,ptrb
39eec                 |                 ' load limits and outptr
39eec     28 04 64 FD |                 setq    #3-1
39ef0     F6 73 03 FB |                 rdlong  htmp1,pa
39ef4                 | 
39ef4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
39ef8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
39efc     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
39f00     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
39f04     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
39f08     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
39f0c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
39f10     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
39f14                 |               
39f14                 | 
39f14     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
39f18     07 70 67 F7 |                 signx   htmp, #7
39f1c     B8 87 03 F1 |                 add     hr1,htmp
39f20     00 72 0F F2 |                 cmp     htmp1,#0 wz
39f24     B9 87 63 53 |         if_ne   fles    hr1,htmp1
39f28     00 86 47 53 |         if_ne   fges    hr1,#0
39f2c                 | 
39f2c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
39f30     07 70 67 F7 |                 signx   htmp, #7
39f34     B8 89 03 F1 |                 add     hr2,htmp
39f38     00 74 0F F2 |                 cmp     htmp2,#0 wz
39f3c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
39f40     00 88 47 53 |         if_ne   fges    hr2,#0
39f44                 |                 
39f44                 | 
39f44     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
39f48     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
39f4c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
39f50     B8 8B 03 A1 |         if_z    add     hr3,htmp
39f54                 | 
39f54     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
39f58     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
39f5c                 | 
39f5c                 |                 ' write back accumulators
39f5c     28 04 64 FD |                 setq    #3-1
39f60     80 87 67 FC |                 wrlong  hr1,ptrb
39f64                 |                 ' if outptr set, write X/Y words
39f64     00 76 0F F2 |                 cmp htmp3,#0                    wz
39f68     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
39f6c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
39f70     2D 00 64 FD |                 ret
39f74                 | end
39f74                 | 
39f74                 | '------------------------------------------------------------------------------
39f74                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39f74                 | '------------------------------------------------------------------------------
39f74                 | ' On entry:
39f74                 | ' On exit:
39f74                 | '------------------------------------------------------------------------------
39f74                 | if _HAVE_GAMEPAD
39f74                 | hget_gp_in_report
39f74     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39f78     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
39f7c                 | 
39f7c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39f80     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
39f84     00 90 E3 F8 |                 getbyte hpar3
39f88     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
39f8c     CF 02 A0 FD |                 call    #do_int_in
39f90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39f94     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39f98                 | 
39f98     00 90 0F F2 |                 cmp     hpar3, #0               wz
39f9c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39fa0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
39fa0                 | 
39fa0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
39fa4     00 70 E3 F8 |                 getbyte htmp                            ' |
39fa8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39fac     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
39fb0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
39fb4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
39fb8     B8 01 C0 F8 |                 setbyte htmp                            ' |
39fbc                 | 
39fbc                 | ' Note: the following code compares the current and previous reports
39fbc                 | ' and process the data if there are changes to ease the debug output.
39fbc                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
39fbc                 | ' gpPreReport buffer.
39fbc                 | 
39fbc                 |                 ' ----- start of block to remove
39fbc                 |                 {
39fbc                 |                 }
39fbc                 |                 ' ----- end of block to remove
39fbc     F4 04 90 FE |                 loc pa,#hpad_translate
39fc0     2A EC 63 FD |                 push pa
39fc4                 | 
39fc4                 |                 ' FALL THROUGH !!!!
39fc4                 | 
39fc4                 | '------------------------------------------------------------------------------
39fc4                 | ' Decode controller report
39fc4                 | '------------------------------------------------------------------------------
39fc4                 | hid_decode
39fc4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
39fc4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
39fc8     00 04 00 FF 
39fcc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
39fd0                 | 
39fd0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39fd4                 | 
39fd4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39fd8     00 2A E3 F8 |                 getbyte hidr_type
39fdc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
39fe0     34 02 90 AD |         if_z    jmp     #hpad_xinput
39fe4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
39fe8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
39fec     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
39ff0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
39ff4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
39ff8                 |                 
39ff8                 | 
39ff8                 | '------------------------------------------------------------------------------
39ff8                 | ' Handle HID controller (or mouse now
39ff8                 | ' On entry:
39ff8                 | '   ptrb - controller report
39ff8                 | '------------------------------------------------------------------------------
39ff8                 | hpad_hid
39ff8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39ffc     F7 F1 03 F6 |                 mov     ptra, pb
3a000     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3a004     00 EC 03 F6 |                 mov     pa, 0-0
3a008                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3a008     19 2A 3B FF 
3a00c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3a010                 | 
3a010                 | .next
3a010     00 EC 5F F2 |                 cmps    pa, #0      wcz
3a014     2D 00 7C ED |         if_be   ret     wcz
3a018                 | 
3a018     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3a01c     01 EC 87 F1 |                 sub     pa, #1
3a020     00 8E 07 F6 |                 mov     hpar2, #0
3a024                 | 
3a024     C6 71 03 F6 |                 mov     htmp, hpar1
3a028     03 70 07 F5 |                 and     htmp, #$03
3a02c     01 70 0F F2 |                 cmp     htmp, #1    wz
3a030     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3a034     07 8E 67 A7 |         if_z    signx   hpar2,#7
3a038     01 EC 87 A1 |         if_z    sub     pa, #1
3a03c     02 70 0F F2 |                 cmp     htmp, #2    wz
3a040     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3a044     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3a048     02 EC 87 A1 |         if_z    sub     pa, #2
3a04c     03 70 0F F2 |                 cmp     htmp, #3    wz
3a050     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3a054     04 EC 87 A1 |         if_z    sub     pa, #4
3a058                 | 
3a058     FC 8C 07 F5 |                 and     hpar1, #$FC
3a05c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3a05c                 | 
3a05c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3a060     0C 01 90 AD |         if_z    jmp     #.report_id
3a064     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3a068     24 01 90 AD |         if_z    jmp     #.usage_page
3a06c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3a070     2C 01 90 AD |         if_z    jmp     #.usage
3a074     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3a078     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3a07c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3a080     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3a084     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3a088     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3a08c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3a090     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3a094     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3a098     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3a09c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3a0a0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3a0a4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3a0a8     64 FF 9F 5D |         if_nz   jmp     #.next
3a0ac                 | 
3a0ac     D8 1D A7 FB |                 tjf     hidr_state,#.next
3a0b0                 | 
3a0b0     03 8E 07 F5 |                 and     hpar2, #$03
3a0b4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3a0b8     18 00 90 5D |         if_nz   jmp     #.skip
3a0bc                 | 
3a0bc     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3a0c0     20 00 90 AD |         if_z    jmp     #.axes
3a0c4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3a0c8     5C 00 90 AD |         if_z    jmp     #.hats
3a0cc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3a0d0     70 00 90 AD |         if_z    jmp     #.buttons
3a0d4                 | .skip
3a0d4     8F 71 03 F6 |                 mov     htmp, hidr_size
3a0d8     90 71 03 FA |                 mul     htmp, hidr_count
3a0dc     B8 23 03 F1 |                 add     hidr_offset, htmp
3a0e0     2C FF 9F FD |                 jmp     #.next
3a0e4                 | .axes
3a0e4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3a0e4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3a0e8     90 87 03 F6 |                 mov     hr1, hidr_count
3a0ec                 | .l1
3a0ec     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a0f0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a0f4     04 03 B0 FD |                 call    #hpad_getbits
3a0f8     64 03 B0 FD |                 call    #hpad_normalize
3a0fc     06 84 1F F2 |                 cmp     hr0, #6         wcz
3a100     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3a104     00 88 43 C8 |         if_b    getnib  hr2
3a108     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3a10c     5F 01 20 C9 |         if_b    setword retval
3a110     01 84 07 C1 |         if_b    add     hr0, #1
3a114     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3a118     F4 87 6F FB |                 djnz    hr1, #.l1
3a11c                 | 
3a11c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3a120     01 1C 07 F6 |                 mov     hidr_state, #1
3a124     E8 FE 9F FD |                 jmp     #.next
3a128                 | .hats
3a128                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3a128     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a12c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a130     C8 02 B0 FD |                 call    #hpad_getbits
3a134     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3a138     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a13c     01 1C 07 F6 |                 mov     hidr_state, #1
3a140     90 FF 9F FD |                 jmp     #.skip
3a144                 | .buttons
3a144                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3a144     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a148     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a14c     90 8F 03 FA |                 mul     hpar2, hidr_count
3a150     A8 02 B0 FD |                 call    #hpad_getbits
3a154     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3a158     B8 BF 62 F0 |                 shl     retval, htmp
3a15c     5F 17 43 F5 |                 or      hidr_buttons, retval
3a160     90 71 03 F1 |                 add     htmp, hidr_count
3a164     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3a168     01 1C 07 F6 |                 mov     hidr_state, #1
3a16c     64 FF 9F FD |                 jmp     #.skip
3a170                 | .report_id
3a170     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3a174     2D 00 7C 5D |         if_nz   ret     wcz
3a178     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a17c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3a180     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3a184     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3a188     01 F2 87 51 |         if_nz   sub     ptrb,#1
3a18c     80 FE 9F FD |                 jmp     #.next
3a190                 | .usage_page
3a190     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3a194     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3a198     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3a19c     70 FE 9F FD |                 jmp     #.next
3a1a0                 | .usage
3a1a0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3a1a4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3a1a8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3a1ac     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a1b0     5C FE 9F AD |         if_z    jmp     #.next
3a1b4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3a1b8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3a1bc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a1c0     4C FE 9F AD |         if_z    jmp     #.next
3a1c4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3a1c8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3a1cc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3a1d0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3a1d4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3a1d8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3a1dc     10 00 90 AD |         if_z    jmp     #.usage_axis
3a1e0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3a1e4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3a1e8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3a1ec     20 FE 9F FD |                 jmp     #.next
3a1f0                 | .usage_axis
3a1f0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3a1f4     18 FE 9F CD |         if_b    jmp     #.next
3a1f8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3a1fc     C7 01 00 F8 |                 setnib  hpar2
3a200                 | 
3a200     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3a204     C7 8F C3 F9 |                 decod   hpar2
3a208     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3a20c                 | 
3a20c     01 24 07 F1 |                 add     hidr_usage_idx, #1
3a210     02 1C 07 F6 |                 mov     hidr_state, #2
3a214     F8 FD 9F FD |                 jmp     #.next
3a218                 | 
3a218                 | '------------------------------------------------------------------------------
3a218                 | ' Handle XInput controller
3a218                 | ' On entry:
3a218                 | '   ptrb - controller report
3a218                 | '------------------------------------------------------------------------------
3a218                 | '   Default implementation translates the report to a pseudo-defacto hid
3a218                 | '   standard and jumps to hpad_translate for actions.
3a218                 | '   Implementors may take specific actions for this kind of controller.
3a218                 | '------------------------------------------------------------------------------
3a218                 | hpad_xinput
3a218     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3a21c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3a220     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3a224     14 70 0F F2 |                 cmp     htmp, #$14      wz
3a228     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3a22c                 | 
3a22c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a22c                 | 
3a22c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3a230     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3a234                 | 
3a234     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3a238     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3a23c     5F BF 22 F6 |                 not     retval
3a240     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a244     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3a248     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3a24c     5F BF 22 F6 |                 not     retval
3a250     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3a254                 | 
3a254     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a258     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3a25c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3a260     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3a264     F8 01 B0 FD |                 call    #hpad_normalize
3a268     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3a26c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3a270     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3a274     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3a278     E4 01 B0 FD |                 call    #hpad_normalize
3a27c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3a280                 | 
3a280     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3a284     81 BF E6 FA |                 rdword  retval, ptrb[1]
3a288     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3a28c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3a290     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3a294     01 16 47 F4 |                 bitc    hidr_buttons, #1
3a298     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3a29c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3a2a0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3a2a4     03 16 47 F4 |                 bitc    hidr_buttons, #3
3a2a8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3a2ac     04 16 47 F4 |                 bitc    hidr_buttons, #4
3a2b0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3a2b4     05 16 47 F4 |                 bitc    hidr_buttons, #5
3a2b8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3a2bc     08 16 47 F4 |                 bitc    hidr_buttons, #8
3a2c0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3a2c4     09 16 47 F4 |                 bitc    hidr_buttons, #9
3a2c8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3a2cc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3a2d0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3a2d4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3a2d8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3a2dc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3a2e0                 | 
3a2e0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a2e4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3a2e8     7A BB 7A FF 
3a2ec     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3a2f0     F9 FF 7F FF 
3a2f4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3a2f8     B9 71 5F F9 |                 altgn   htmp, #htmp1
3a2fc     00 70 43 F8 |                 getnib  htmp
3a300     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3a304                 | 
3a304     AC 01 90 FD |                 jmp     #hpad_translate
3a308                 | 
3a308                 | '------------------------------------------------------------------------------
3a308                 | ' Handle PS3 controller
3a308                 | ' On entry:
3a308                 | '   ptrb - controller report
3a308                 | '------------------------------------------------------------------------------
3a308                 | '   Default implementation translates the report to a pseudo-defacto hid
3a308                 | '   standard and jumps to hpad_translate for actions.
3a308                 | '   Implementors may take specific actions for this kind of controller.
3a308                 | '------------------------------------------------------------------------------
3a308                 | hpad_ps3
3a308     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a30c     01 70 0F F2 |                 cmp     htmp, #$01      wz
3a310     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3a314                 | 
3a314                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a314                 | 
3a314     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a318     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3a31c     40 01 B0 FD |                 call    #hpad_normalize
3a320     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3a324     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3a328     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3a32c     30 01 B0 FD |                 call    #hpad_normalize
3a330     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a334     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3a338     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3a33c     20 01 B0 FD |                 call    #hpad_normalize
3a340     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3a344     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3a348     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3a34c     10 01 B0 FD |                 call    #hpad_normalize
3a350     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3a354     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3a358     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3a35c                 | 
3a35c     08 8C 07 F6 |                 mov     hpar1, #8
3a360     13 8E 07 F6 |                 mov     hpar2, #19
3a364     94 00 B0 FD |                 call    #hpad_getbits
3a368                 | 
3a368     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3a36c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3a370     00 16 47 F4 |                 bitc    hidr_buttons, #0
3a374     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3a378     01 16 47 F4 |                 bitc    hidr_buttons, #1
3a37c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3a380     02 16 47 F4 |                 bitc    hidr_buttons, #2
3a384     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3a388     03 16 47 F4 |                 bitc    hidr_buttons, #3
3a38c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3a390     04 16 47 F4 |                 bitc    hidr_buttons, #4
3a394     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3a398     05 16 47 F4 |                 bitc    hidr_buttons, #5
3a39c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3a3a0     06 16 47 F4 |                 bitc    hidr_buttons, #6
3a3a4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3a3a8     07 16 47 F4 |                 bitc    hidr_buttons, #7
3a3ac     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3a3b0     08 16 47 F4 |                 bitc    hidr_buttons, #8
3a3b4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3a3b8     09 16 47 F4 |                 bitc    hidr_buttons, #9
3a3bc     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3a3c0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3a3c4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3a3c8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3a3cc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3a3d0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3a3d4                 | 
3a3d4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a3d8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3a3dc     09 FA 79 FF 
3a3e0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3a3e4     FF FA 7F FF 
3a3e8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3a3ec     B9 71 5F F9 |                 altgn   htmp, #htmp1
3a3f0     00 70 43 F8 |                 getnib  htmp
3a3f4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3a3f8                 | 
3a3f8     B8 00 90 FD |                 jmp     #hpad_translate
3a3fc                 | 
3a3fc                 | '------------------------------------------------------------------------------
3a3fc                 | ' Read bits from report data buffer
3a3fc                 | '------------------------------------------------------------------------------
3a3fc                 | ' On entry:
3a3fc                 | '   PTRB - report buffer
3a3fc                 | '   hpar1 - start bit
3a3fc                 | '   hpar2 - number of bits
3a3fc                 | ' On exit:
3a3fc                 | '   retval - bits
3a3fc                 | '------------------------------------------------------------------------------
3a3fc                 | hpad_getbits
3a3fc     C6 71 03 F6 |                 mov     htmp, hpar1
3a400     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3a404     F9 71 03 F1 |                 add     htmp, ptrb
3a408     B8 BF 02 FB |                 rdlong  retval, htmp
3a40c                 | 
3a40c     C6 73 03 F6 |                 mov     htmp1, hpar1
3a410     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3a414     B9 BF 42 F0 |                 shr     retval, htmp1
3a418                 | 
3a418     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3a41c     10 00 90 1D |         if_a    jmp     #.l1
3a420                 | 
3a420     C7 8F C3 F9 |                 decod   hpar2
3a424     01 8E 87 F1 |                 sub     hpar2, #1
3a428     C7 BF 02 F5 |                 and     retval, hpar2
3a42c     2D 00 64 FD |                 ret
3a430                 | .l1
3a430     FF 7F 00 FF 
3a434     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3a438     03 70 07 F1 |                 add     htmp, #3
3a43c     B8 75 03 FB |                 rdlong  htmp2, htmp
3a440     18 8E 87 F1 |                 sub     hpar2, #24
3a444     C7 8F C3 F9 |                 decod   hpar2
3a448     01 8E 87 F1 |                 sub     hpar2, #1
3a44c     B9 75 43 F0 |                 shr     htmp2, htmp1
3a450     C7 75 03 F5 |                 and     htmp2, hpar2
3a454     18 74 67 F0 |                 shl     htmp2, #24
3a458     BA BF 42 F5 |                 or      retval, htmp2
3a45c     2D 00 64 FD |                 ret
3a460                 | 
3a460                 | '------------------------------------------------------------------------------
3a460                 | ' Normalize value to signed word (-32768 / 32767)
3a460                 | '------------------------------------------------------------------------------
3a460                 | ' On entry:
3a460                 | '   retval - value to normalize
3a460                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3a460                 | '   - or -
3a460                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3a460                 | '   hidr_size - value bits length
3a460                 | ' On exit:
3a460                 | '   retval - normalized value
3a460                 | '------------------------------------------------------------------------------
3a460                 | hpad_normalize
3a460     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3a464     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3a468     2D 00 64 AD |         if_z    ret
3a46c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3a470     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3a474     0F 72 77 F7 |                 signx   htmp1, #15      wc
3a478     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3a47c     00 BE 66 C7 |         if_c    signx   retval, #0-0
3a480     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3a484     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3a488     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3a48c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3a490     B8 71 53 F6 |                 abs     htmp            wc
3a494     1F BE 0E F4 |                 testb   retval, #31     wz
3a498     5F BF 42 F6 |                 abs     retval
3a49c     B8 BF 12 FD |                 qdiv    retval, htmp
3a4a0     18 BE 62 FD |                 getqx   retval
3a4a4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3a4a8     C0 FF 7F FF 
3a4ac     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3a4b0     2D 00 64 FD |                 ret
3a4b4                 | 
3a4b4                 | '------------------------------------------------------------------------------
3a4b4                 | ' Perform controller actions
3a4b4                 | ' On entry:
3a4b4                 | '    hidr_id        report id
3a4b4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3a4b4                 | '                      X = hidr_axis+0, #0
3a4b4                 | '                      Y = hidr_axis+0, #1
3a4b4                 | '                      Z = hidr_axis+1, #0
3a4b4                 | '                     RX = hidr_axis+1, #1
3a4b4                 | '                     RY = hidr_axis+2, #0
3a4b4                 | '                     RZ = hidr_axis+2, #1
3a4b4                 | '    hidr_buttons   buttons state (bits 0 to 31)
3a4b4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3a4b4                 | '
3a4b4                 | '                     -------3 -------2 -------1 -------0 byte
3a4b4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3a4b4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3a4b4                 | '                                zyx||| |||||||| ++++++++ n. buttons
3a4b4                 | '                                |||||| ||||++++--------- n. axes
3a4b4                 | '                                |||||| ++++------------- n. hats
3a4b4                 | '                                ++++++------------------ valid axes
3a4b4                 | '------------------------------------------------------------------------------
3a4b4                 | hpad_translate
3a4b4                 | 
3a4b4                 | 
3a4b4                 |         if HAVE_HIDPAD
3a4b4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3a4b8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3a4bc     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3a4c0     01 70 E7 F2 |                 cmpsub  htmp,#1
3a4c4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3a4c8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3a4cc     2D 00 7C 3D |         if_ae   ret     wcz
3a4d0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3a4d4     B8 F3 03 F1 |                 add     ptrb,htmp
3a4d8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3a4dc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3a4e0     28 0C 64 FD |                 setq    #7-1
3a4e4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3a4e8                 |         end
3a4e8                 | 
3a4e8                 | 
3a4e8                 |         if EMUPAD_MAX_PLAYER > 0
3a4e8                 | .emupad_no_hat
3a4e8                 |         if EMUPAD_BT0_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT1_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT2_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT3_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT4_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT5_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT6_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT7_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT8_BIT >= 0
3a4e8                 |         end
3a4e8                 |         if EMUPAD_BT9_BIT >= 0
3a4e8                 |         end
3a4e8                 | .emupad_slot_over
3a4e8                 |         end
3a4e8                 | 
3a4e8                 |         if 0
3a4e8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3a4e8                 | 
3a4e8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3a4e8                 | 
3a4e8                 |         end
3a4e8     2D 00 64 FD |                 ret
3a4ec                 | end
3a4ec                 | 
3a4ec                 | if EMUPAD_MAX_PLAYER > 0
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | ' Clear EmuPad state
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | emupad_reset
3a4ec                 | 
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | ' Get EmuPad Player number for current device (into retval)
3a4ec                 | ' Z flag is also set if current device is valid
3a4ec                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | emupad_getnum
3a4ec                 | .loop
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | emupad_discon
3a4ec                 | .loop         
3a4ec                 |         
3a4ec                 |         ' FALL THROUGH!!!
3a4ec                 | 
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | ' Update EmuPad reports (all of them...)
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | emupad_write_reports
3a4ec                 | .devloop
3a4ec                 | 
3a4ec                 | end
3a4ec                 | 
3a4ec                 | 
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | ' On entry:
3a4ec                 | ' On exit:
3a4ec                 | '------------------------------------------------------------------------------
3a4ec                 | hget_hub_status
3a4ec     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3a4f0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a4f4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3a4f8     01 90 2F F9 |                 setword hpar3, #1, #1
3a4fc     CF 02 A0 FD |                 call    #do_int_in
3a500     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a504     0C 00 90 AD |         if_z    jmp     #.data
3a508     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3a50c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3a510     2D 00 64 FD |                 ret
3a514                 | .data
3a514     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a518     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a51c                 | 
3a51c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3a520     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3a524     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3a528     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3a52c                 |                 debug(ubin_long(hub_status_chg))
3a52c                 | 
3a52c     01 5A 06 F6 |                 mov     hdev_port, #1
3a530                 | .loop
3a530     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3a534     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3a538     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3a53c     F0 FF 9F 3D |         if_nc   jmp     #.loop
3a540     2D 00 64 FD |                 ret
3a544                 | 
3a544                 | hub_port_handler
3a544     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3a548     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a54c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a550     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a554     55 02 A0 FD |                 call    #control_read
3a558     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3a55c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3a55c                 | 
3a55c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3a560     50 01 90 5D |         if_x0   jmp     #.other
3a564     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3a568     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3a56c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a570     A0 02 A0 FD |                 call    #control_write
3a574     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3a578     7C 01 90 5D |         if_x0   jmp     #.disconnect
3a57c     B0 99 02 F6 |                 mov     hctwait, _100ms_
3a580     EF 02 A0 FD |                 call    #poll_waitx
3a584                 | 
3a584     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3a588     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3a58c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a590     A0 02 A0 FD |                 call    #control_write
3a594                 | 
3a594     02 76 07 F6 |                 mov     htmp3, #2
3a598                 | .wait_reset
3a598     AC 99 02 F6 |                 mov     hctwait, _8ms_
3a59c     EF 02 A0 FD |                 call    #poll_waitx
3a5a0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a5a4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a5a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a5ac     55 02 A0 FD |                 call    #control_read
3a5b0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3a5b4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3a5b8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3a5bc                 | 
3a5bc     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3a5c0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3a5c4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a5c8     A0 02 A0 FD |                 call    #control_write
3a5cc                 | 
3a5cc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3a5d0                 | .wait_recover
3a5d0     A7 99 02 F6 |                 mov     hctwait, _1ms_
3a5d4     EF 02 A0 FD |                 call    #poll_waitx
3a5d8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3a5dc                 | 
3a5dc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a5e0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3a5e4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3a5e8                 | 
3a5e8     00 08 00 FF 
3a5ec     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3a5f0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3a5f4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3a5f8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3a5fc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3a600     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a604     48 01 90 5D |         if_nz   jmp     #.done
3a608                 | .get_dev_desc
3a608     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3a60c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3a610     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3a614     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3a618     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3a61c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3a620     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3a624     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a628     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3a62c     AC 99 02 F6 |                 mov     hctwait, _8ms_
3a630     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3a634     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3a638     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3a63c     BE 00 A0 FD |                 call    #calc_crc5
3a640     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3a644     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3a648     F7 AD C2 FA |                 rdbyte  total_data, pb
3a64c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3a650     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3a654     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a658     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3a65c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3a660     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3a664                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3a664     9F 99 02 F6 |                 mov     hctwait, _500us_
3a668     EF 02 A0 FD |                 call    #poll_waitx
3a66c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3a670     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3a674     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3a678     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3a67c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a680     CC 00 90 5D |         if_nz   jmp     #.done
3a684     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3a688     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3a68c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3a690     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3a694     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3a698     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3a69c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3a6a0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3a6a4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3a6a8     A4 00 90 CD |         if_b    jmp     #.done
3a6ac     6C F0 BF FD |                 call    #hparse_con_desc
3a6b0     9C 00 90 FD |                 jmp     #.done
3a6b4                 | 
3a6b4                 | .other
3a6b4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3a6b8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3a6bc     28 00 90 AD |         if_x1   jmp     #.reset_feature
3a6c0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3a6c4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3a6c8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3a6cc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3a6d0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3a6d4     10 00 90 AD |         if_x1   jmp     #.reset_feature
3a6d8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3a6dc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3a6e0     04 00 90 AD |         if_x1   jmp     #.reset_feature
3a6e4     68 00 90 FD |                 jmp     #.done
3a6e8                 | .reset_feature
3a6e8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3a6ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a6f0     A0 02 A0 FD |                 call    #control_write
3a6f4     58 00 90 FD |                 jmp     #.done
3a6f8                 | .disconnect
3a6f8                 | 
3a6f8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a6fc     00 70 E3 F8 |                 getbyte htmp
3a700     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3a704     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3a708     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3a70c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3a710     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3a714     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3a718                 |         if EMUPAD_MAX_PLAYER > 0
3a718                 |         end
3a718                 |         if HAVE_MOUSE
3a718     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3a71c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3a720     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3a724                 |         end
3a724                 |         if HAVE_HIDPAD
3a724     14 0A F0 FE |                 loc ptrb,#hidpad_report
3a728     2D 71 03 F6 |                 mov htmp,hdev_port
3a72c     01 70 E7 F2 |                 cmpsub htmp,#1
3a730     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3a734     B8 F3 03 F1 |                 add ptrb,htmp
3a738     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3a73c     80 01 6C FC |                 wrlong #0,ptrb
3a740                 |         end
3a740                 | 
3a740     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3a744     00 00 C4 F8 |                 setbyte #0
3a748     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a74c     00 00 04 F6 |                 mov     0-0, #0
3a750                 | 
3a750                 | .done
3a750     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3a754     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3a758     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3a75c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3a760     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3a764     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3a768                 | 
3a768     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a76c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a770     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a774     55 02 A0 FD |                 call    #control_read
3a778     00 69 06 FB |                 rdlong  hub_port_status, ptra
3a77c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3a77c     2D 00 64 FD |                 ret
3a780                 | 
3a780                 | '------------------------------------------------------------------------------
3a780                 | ' Partially populated SETUP packets
3a780                 | '------------------------------------------------------------------------------
3a780     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3a781     06          |                 byte    REQ_GET_DESC
3a782     00 01       |                 word    TYPE_DEVICE << 8
3a784     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a786     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a788     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3a789     06          |                 byte    REQ_GET_DESC
3a78a     00 02       |                 word    TYPE_CONFIG << 8
3a78c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a78e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a790     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3a791     09          |                 byte    REQ_SET_CONFIG
3a792     00 00       |                 word    0       ' Configuration value
3a794     00 00       |                 word    0       ' Zero
3a796     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3a798     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3a799     05          |                 byte    REQ_SET_ADDR
3a79a     00 00       |                 word    0       ' Zero
3a79c     00 00       |                 word    0       ' Zero
3a79e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3a7a0                 | '------------------------------------------------------------------------------
3a7a0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3a7a0                 | ' wValue field dictates which protocol should be used.
3a7a0                 | '
3a7a0                 | ' When initialized, all devices default to report protocol. However the host
3a7a0                 | ' should not make any assumptions about the device state and should set the
3a7a0                 | ' desired protocol whenever initializing a device.
3a7a0                 | '------------------------------------------------------------------------------
3a7a0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a7a1     0B          |                 byte    HID_SET_PROTO
3a7a2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3a7a4                 |                                                 ' (HID 1.11 Section 7.2.6).
3a7a4     00 00       |                 word    0               ' Interface index number.
3a7a6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3a7a8                 | '------------------------------------------------------------------------------
3a7a8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a7a9     0A          |                 byte    HID_SET_IDLE
3a7aa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3a7ac                 |                                         ' reporting until a change is detected in the report data
3a7ac                 | 
3a7ac                 |                                         ' (HID 1.11 Section 7.2.4).
3a7ac     00 00       |                 word    0       ' Interface index number.
3a7ae     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3a7b0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a7b1     09          |                 byte    HID_SET_REPORT
3a7b2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3a7b4                 |                                         ' (HID 1.11 Section 7.2.2).
3a7b4     00 00       |                 word    0       ' Interface index number.
3a7b6     00 00       |                 word    0       ' Size of the report, in bytes.
3a7b8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3a7b9     06          |                 byte    REQ_GET_DESC
3a7ba     00 22       |                 word    TYPE_REPORT << 8
3a7bc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a7be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a7c0                 | '------------------------------------------------------------------------------
3a7c0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3a7c1     06          |                 byte    REQ_GET_DESC
3a7c2     00 29       |                 word    TYPE_HUB << 8
3a7c4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a7c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a7c8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3a7c9     03          |                 byte    REQ_SET_FEATURE
3a7ca     00 00       |                 word    0       ' port power
3a7cc     01 00       |                 word    1       ' Port index number (1+)
3a7ce     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a7d0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3a7d1     01          |                 byte    REQ_CLEAR_FEATURE
3a7d2     00 00       |                 word    0       ' port power
3a7d4     01 00       |                 word    1       ' Port index number (1+)
3a7d6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a7d8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3a7d9     00          |                 byte    REQ_GET_STATUS
3a7da     00 00       |                 word    0
3a7dc     01 00       |                 word    1       ' Port index number (1+)
3a7de     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3a7e0                 | '------------------------------------------------------------------------------
3a7e0                 | if _HAVE_GAMEPAD
3a7e0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3a7e4                 | ps3_command_buff
3a7e4     00 00 00 00 
3a7e8     00          |                 byte    $00, $00, $00, $00, $00
3a7e9     00 00 00 00 
3a7ed     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3a7ee     FF 27 10 00 
3a7f2     32          |                 byte    $FF, $27, $10, $00, $32
3a7f3     FF 27 10 00 
3a7f7     32          |                 byte    $FF, $27, $10, $00, $32
3a7f8     FF 27 10 00 
3a7fc     32          |                 byte    $FF, $27, $10, $00, $32
3a7fd     FF 27 10 00 
3a801     32          |                 byte    $FF, $27, $10, $00, $32
3a802     00 00 00 00 
3a806     00          |                 byte    $00, $00, $00, $00, $00
3a807     00 00 00 00 
3a80b     00          |                 byte    $00, $00, $00, $00, $00
3a80c     00 00 00 00 
3a810     00          |                 byte    $00, $00, $00, $00, $00
3a811     00 00 00    |                 byte    $00, $00, $00
3a814                 | '------------------------------------------------------------------------------
3a814     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3a817                 |                                         ' 0x01 All blinking
3a817                 |                                         ' 0x02 1 flashes, then on
3a817                 |                                         ' 0x03 2 flashes, then on
3a817                 |                                         ' 0x04 3 flashes, then on
3a817                 |                                         ' 0x05 4 flashes, then on
3a817                 |                                         ' 0x06 1 on
3a817                 |                                         ' 0x07 2 on
3a817                 |                                         ' 0x08 3 on
3a817                 |                                         ' 0x09 4 on
3a817                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3a817                 |                                         ' 0x0B Blinking*
3a817                 |                                         ' 0x0C Slow blinking*
3a817                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3a817     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3a81a     00          |                 byte    $00             ' Left rumble
3a81b     00          |                 byte    $00             ' Right rumble
3a81c     00 00 00    |                 byte    $00, $00, $00
3a81f     00          | end
3a820                 | alignl
3a820                 | 
3a820                 | if HAVE_MOUSE
3a820     00 00 00 00 
3a824     00 00 00 00 | mouse_limits long 0[2]
3a828     00 00 00 00 | mouse_outptr long 0
3a82c                 | end
3a82c                 | 
3a82c                 | if KEYQUEUE_SIZE > 0
3a82c     00          | keyq_head byte 0
3a82d     00          | keyq_tail byte 0
3a82e     00 00 00 00 
      ...             
3aa2a     00 00 00 00 
3aa2e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3aa30                 | alignl
3aa30                 | end
3aa30                 | 
3aa30                 | if EMUPAD_MAX_PLAYER > 0
3aa30                 | emupad_rule_buffer
3aa30                 | if EMUPAD_BUILTIN_RULES
3aa30                 | file "padmap_builtin.dat"
3aa30                 | end
3aa30                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3aa30                 | '' Default rule directly follows!
3aa30                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3aa30                 | end
3aa30                 | 
3aa30                 | '------------------------------------------------------------------------------
3aa30                 | ' The USB data cache area gets zero-filled at every device disconnect
3aa30                 | '------------------------------------------------------------------------------
3aa30                 | usb_cache_start
3aa30                 | 
3aa30                 | ' HID descriptor and report buffers
3aa30                 | if !!OVERLAP_MEMORY
3aa30     00 00 00 00 
      ...             
3b128     00 00 00 00 
3b12c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3b130                 | end
3b130     00 00 00 00 
3b134     00 00 00 00 | hkbd_report     byte    0[8]
3b138     00 00 00 00 | hkbd_led_rep    byte    0
3b13c                 | alignl
3b13c                 | 
3b13c                 | if HAVE_HIDPAD
3b13c     00 00 00 00 
      ...             
3b1f8     00 00 00 00 
3b1fc     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3b200                 | end
3b200                 | 
3b200                 | ' HUB descriptor
3b200     00          | hub_descr       byte    0   ' bDescLength
3b201     00          |                 byte    0   ' bDescriptorType
3b202     00          |                 byte    0   ' bNbrPorts
3b203     00 00       |                 word    0   ' wHubCharacteristics
3b205     00          |                 byte    0   ' bPwrOn2PwrGood
3b206     00          |                 byte    0   ' bHubContrCurrent
3b207     00          |                 byte    0   ' DeviceRemoveable
3b208     00          |                 byte    0   ' PortPwrCtrlMask
3b209                 | 
3b209                 | usb_cache_end
3b209                 | 
3b209                 | if HAVE_MOUSE
3b209     00 00 00 00 | mouse_xacc      long 0
3b20d     00 00 00 00 | mouse_yacc      long 0
3b211     00 00 00 00 | mouse_zacc      long 0
3b215     00          | mouse_bstate    byte 0
3b216     00          | mouse_lpending  byte 0
3b217     00          | mouse_rpending  byte 0
3b218     00          | mouse_mpending  byte 0
3b219     00          | mouse_lock      byte 0
3b21a     00 00 00    |                 byte 0[3] ' padding
3b21d                 | end
3b21d                 | 
3b21d     00 00 00 00 
      ...             
3b295     00 00 00 00 
3b299     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3b29d     00 00 00 00 
3b2a1     00 00 00 00 
3b2a5     00 00 00 00 
3b2a9     00 00 00 00 
3b2ad     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3b2af     00 00 00 00 
      ...             
3b3a7     00 00 00 00 
3b3ab     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3b3af                 | 
3b3af     00          | driver_cog      byte    0                       ' Current driver cog + 1
3b3b0                 | 	alignl
3b3b0                 | _audio096_spin2_dat_
3b3b0                 | 
3b3b0                 | audio       org     0
3b3b0                 | 
3b3b0     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3b3b4     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3b3b8     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3b3bc                 |  
3b3bc     01 EC 63 FD |             cogid   pa                   ' compute cogid
3b3c0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3b3c4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3b3c8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3b3cc                 | 
3b3cc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3b3d0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3b3d4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3b3d8     0F 24 06 FC |             wrpin   dac2,#right
3b3dc     0F 00 1E FC |             wxpin   #256,#right    
3b3e0     41 9C 64 FD |             dirh    #left addpins 1
3b3e4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3b3e8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3b3ec     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3b3f0                 |             
3b3f0                 | '---------------------------------------------------------------------------------        
3b3f0                 | '----------------- The main loop -------------------------------------------------
3b3f0                 | '---------------------------------------------------------------------------------
3b3f0                 | 
3b3f0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3b3f4     10 00 90 CD |       if_c  jmp     #loop1
3b3f8                 |   
3b3f8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3b3fc     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3b400     D5 00 80 F1 |             sub     0-0,a40000000
3b404     FD 01 6E FB |             djnz    cn,#p402
3b408                 |     
3b408     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3b40c     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3b410     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3b414     01 00 06 C6 |     if_c    mov     cn,#1
3b418     DA 02 3A F3 |             fle     ct,time3 wcz
3b41c     02 00 06 C6 |     if_c    mov     cn,#2     
3b420     DB 02 3A F3 |             fle     ct,time4 wcz
3b424     03 00 06 C6 |     if_c    mov     cn,#3
3b428     DC 02 3A F3 |             fle     ct,time5 wcz
3b42c     04 00 06 C6 |     if_c    mov     cn,#4
3b430     DD 02 3A F3 |             fle     ct,time6 wcz
3b434     05 00 06 C6 |     if_c    mov     cn,#5
3b438     DE 02 3A F3 |             fle     ct,time7 wcz
3b43c     06 00 06 C6 |     if_c    mov     cn,#6
3b440     DF 02 3A F3 |             fle     ct,time8 wcz
3b444     07 00 06 C6 |     if_c    mov     cn,#7
3b448                 | 
3b448                 | 
3b448                 | '----------------------------------------------------------------------------------
3b448                 | '------------- Compute channel samples --------------------------------------------
3b448                 | '----------------------------------------------------------------------------------
3b448                 | 
3b448                 | 
3b448     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3b44c     06 C0 65 F0 |             shl     channeladd,#6
3b450     E0 F0 03 F1 |             add     ptra,channeladd
3b454                 | 
3b454     28 16 64 FD |             setq    #11                        	' read parameters
3b458     00 D7 05 FB |             rdlong  pointer0,ptra
3b45c                 |     	    
3b45c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3b460     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3b464     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3b468     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3b46c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3b470     00 C4 0D F2 |             cmp     qq,#0 wz                         
3b474     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3b478     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3b47c                 |             
3b47c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3b480     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3b484     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3b488                 | 
3b488     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3b48c     EC 08 3A F9 |             getword oldrs,sample0,#1
3b490     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3b494     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3b498     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3b49c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3b4a0                 | 
3b4a0     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3b4a4     00 04 02 F6 |             mov     dt0,0-0    
3b4a8     D7 04 82 F1 |             sub     dt0,time0
3b4ac                 |             
3b4ac     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3b4b0     FB 00 00 F1 |             add     0-0,afreq0  	
3b4b4                 |             
3b4b4                 | '---- envelopes
3b4b4                 |             
3b4b4     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3b4b8     20 00 00 AF 
3b4bc     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3b4c0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3b4c4                 | 
3b4c4     FB 48 02 F6 |             mov     envs1,afreq0
3b4c8     F5 48 02 FA |             mul     envs1,envspd0
3b4cc     24 E7 01 F1 |             add     envph0,envs1 
3b4d0                 | 
3b4d0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3b4d4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3b4d8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3b4dc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3b4e0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3b4e4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3b4e8     00 46 06 36 |     if_ge   mov     envlo,#0
3b4ec     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3b4f0     16 E6 65 30 |     if_ge   shl     envph0,#22
3b4f4                 | 
3b4f4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3b4f8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3b4fc     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3b500     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3b504     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3b508     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3b50c     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3b510     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3b514     23 49 02 FA |             mul     envs1,envlo
3b518     25 49 02 F1 |             add     envs1,envs2
3b51c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3b520                 |             
3b520     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3b524     1B C6 61 AD |     if_z    getrnd  spl
3b528     58 00 90 AD |     if_z    jmp     #p406
3b52c                 |  
3b52c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3b530     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3b534     08 D6 45 F0 |             shr     pointer0,#8
3b538                 |          
3b538     1F DA 0D F4 |             testb   sstart0,#31 wz            
3b53c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3b540     1C DA 0D F4 |             testb   sstart0,#28 wz            
3b544     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3b548                 |         
3b548     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3b54c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3b550     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3b554                 |             
3b554     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3b558     ED C4 01 F1 |             add     qq,sstart0            
3b55c                 | 
3b55c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3b560     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3b564     1C 01 B0 1D |     if_gt   call    #cache_read
3b568                 |          
3b568     1F DA 0D F4 |             testb   sstart0,#31 wz 
3b56c     08 C6 65 50 |     if_nz   shl     spl,#8
3b570     08 D6 65 50 |     if_nz   shl     pointer0,#8
3b574     07 D6 65 A0 |     if_z    shl     pointer0,#7
3b578     1C DA 0D F4 |             testb   sstart0,#28 wz            
3b57c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3b580     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3b584                 | 
3b584                 | 
3b584     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3b588     00 C6 01 F6 |             mov     spl,0-0
3b58c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3b590     00 C6 01 F6 |             mov     spl,0-0
3b594                 | 
3b594     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3b598     00 0A 02 F6 |             mov     ls0,0-0
3b59c     20 00 00 FF 
3b5a0     00 C4 05 F6 |             mov     qq,##16384
3b5a4     FE C4 81 F1 |             sub     qq,apan0
3b5a8     E2 C6 31 FA |             scas    spl,qq
3b5ac     00 0C 02 F6 |             mov     rs0, 0-0
3b5b0                 | 
3b5b0     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3b5b4     06 11 02 F1 |             add     rs,rs0
3b5b8     03 0F 82 F1 |             sub     ls,oldls
3b5bc     05 0F 02 F1 |             add     ls,ls0
3b5c0                 |    
3b5c0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3b5c4     05 D9 21 F9 |             setword sample0,ls0,#0
3b5c8                 |             
3b5c8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3b5cc     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3b5d0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3b5d4                 |   '  if_z    mov     sample0,#0
3b5d4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3b5d8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3b5dc     04 00 00 AF 
3b5e0     00 B0 05 A1 |     if_z    add     time1,##2048
3b5e4     D8 B2 01 A6 |     if_z    mov     time2,time1
3b5e8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3b5ec                 | 
3b5ec     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3b5f0     00 D7 65 FC |             wrlong  pointer0,ptra
3b5f4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3b5f8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3b5fc                 |                       
3b5fc     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3b600     FF C3 25 A7 |     if_z    decmod  front, #511          
3b604                 |          
3b604     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3b608     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3b60c     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3b610     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3b614                 | 	    
3b614                 | 		    
3b614     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3b618     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3b61c     04 15 02 F6 |             mov     newsample, oldrs       
3b620                 | 
3b620     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3b624     02 AF 01 F1 |             add     time0,dt0    
3b628                 |                                      
3b628     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3b62c     D8 FD 9F AD |     if_z    jmp     #loop1
3b630     02 C5 01 F6 |             mov     qq,dt0
3b634                 | 
3b634                 |     
3b634                 |             
3b634     01 4E 36 F0 | p301        rol     dropper,#1 wc
3b638     40 00 90 3D |     if_nc   jmp     #p399
3b63c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3b640     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3b644     F4 FF 9F AD |     if_e    jmp     #p398   
3b648                 | 		
3b648     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3b64c     20 00 90 AD |     if_z    jmp     #p302	   
3b650                 |   
3b650     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3b654     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3b658     02 1E 66 C0 |     if_c    shl     scptr2,#2
3b65c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3b660     60 1E 66 FC |             wrlong  scptr2,#$60
3b664     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3b668     01 00 00 CF 
3b66c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3b670                 | 			    
3b670     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3b674     00 00 00 FF 
3b678     FF C3 05 F7 |             incmod  front, ##511
3b67c     ED C5 6D FB | p399        djnz    qq,#p301
3b680                 |             
3b680     6C FD 9F FD |             jmp     #loop            'loop
3b684                 | 
3b684                 | '----------------------------------------------------------------------------------
3b684                 | '------------- This is the end of the main loop -----------------------------------
3b684                 | '----------------------------------------------------------------------------------
3b684                 | 
3b684                 | '----------------------------------------------------------------------------------
3b684                 | '------------- PSRAM cache ----------- --------------------------------------------
3b684                 | '----------------------------------------------------------------------------------
3b684                 | 
3b684                 | ' There are 8 cache pointers for 8 channels
3b684                 | ' if 24 higher bits of address=cache, then get a word from the cache
3b684                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3b684                 | 
3b684                 | 
3b684     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3b688                 |             
3b688     E2 40 02 F6 | 	    mov     addrhi,qq		
3b68c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3b690     14 01 96 F9 | 	    alts    cn,#cache1            
3b694     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3b698     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3b69c                 | 	
3b69c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3b6a0     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3b6a4     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3b6a8     08 38 66 F0 | 	    shl     cmd,#8
3b6ac     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3b6b0     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3b6b4     08 3A 66 F0 |             shl     hubaddr,#8                  '
3b6b8     13 3B 02 F1 |             add     hubaddr,hubptr 
3b6bc     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3b6c0     28 04 64 FD |             setq    #2                          ' write 3 longs
3b6c4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3b6c8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3b6cc     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3b6d0                 |             
3b6d0                 | 	
3b6d0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3b6d4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3b6d8     13 C5 01 F1 | 	    add     qq,hubptr
3b6dc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3b6e0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3b6e4                 |           
3b6e4                 | 
3b6e4                 | '--------------------------------------------------------------------------
3b6e4                 | '------ Interrupt service -------------------------------------------------
3b6e4                 | '------ Output the sample, get the next one if exists ---------------------
3b6e4                 | '--------------------------------------------------------------------------
3b6e4                 | 
3b6e4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3b6e8     0F D0 25 FC |             wypin   rsample,#right       '4
3b6ec     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3b6f0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3b6f4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3b6f8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3b6fc     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3b700                 |     
3b700     F5 FF 3B FB |             reti1                        '17/19 
3b704                 |           
3b704                 | '---------------------------------------------------------------------------
3b704                 | '-------- End of interrupt -------------------------------------------------
3b704                 | '---------------------------------------------------------------------------    
3b704                 | 
3b704                 | 
3b704                 | '---------------------------------------------------------------------------
3b704                 | '------- Variables ---------------------------------------------------------
3b704                 | '---------------------------------------------------------------------------
3b704                 | 
3b704                 | ' constants
3b704                 | 
3b704     00 00 00 40 | a40000000   long $40000000
3b708     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3b70c                 | 
3b70c                 | ' Time variables
3b70c                 | 
3b70c     00 00 00 00 | time0       long 0    ' Global sample computing time
3b710     01 00 00 00 | time1       long 1    ' Local channels time
3b714     02 00 00 00 | time2       long 2
3b718     03 00 00 00 | time3       long 3
3b71c     04 00 00 00 | time4       long 4
3b720     05 00 00 00 | time5       long 5
3b724     06 00 00 00 | time6       long 6
3b728     07 00 00 00 | time7       long 7
3b72c     08 00 00 00 | time8       long 8
3b730                 | 
3b730     00 00 00 00 | channeladd long 0
3b734                 | 
3b734     00 00 00 00 | front       long 0
3b738                 | 
3b738                 | ' temporary variables 
3b738     00 00 00 00 | qq          long 0
3b73c     00 00 00 00 | spl         long 0
3b740     00 00 00 00 | zero        long 0
3b744     00 00 00 00 | mailbox     long 0
3b748     00 00 00 00 | mailbox2 long 0
3b74c                 | 
3b74c                 | ' Interrupt ISR variables
3b74c                 | 
3b74c     00 00 00 00 | lsample     long 0
3b750     00 00 00 00 | rsample     long 0
3b754     00 00 00 00 | lsnext      long 0
3b758     00 00 00 00 | rsnext      long 0 
3b75c                 | 
3b75c                 | ' channel parameter block
3b75c                 | 
3b75c     00 00 00 00 | pointer0    long 0     
3b760     00 00 00 00 | sample0     long 0
3b764     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3b768     00 00 00 00 | lstart0     long 0
3b76c     00 00 00 00 | lend0       long 0
3b770     00 00 00 00 | volpan0     long 0
3b774     00 00 00 00 | freqskip0   long 0
3b778     00 00 00 00 | command0    long 0
3b77c     00 00 00 00 | envph0	    long 0
3b780     00 00 00 00 | envptr0	    long 0
3b784     00 00 00 00 | envspd0	    long 0
3b788     00 00 00 00 | envlen0	    long 0
3b78c     00 00 00 00 | res5	    long 0
3b790     00 00 00 00 | res6	    long 0
3b794     00 00 00 00 | res7	    long 0
3b798     00 00 00 00 | res8	    long 0
3b79c                 | 
3b79c     00 00 00 00 | afreq0      long 0
3b7a0     00 00 00 00 | askip0      long 0
3b7a4     00 00 00 00 | avol0       long 0
3b7a8     00 00 00 00 | apan0       long 0
3b7ac                 | 
3b7ac     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3b7b0     00 00 00 00 | cn          long 0
3b7b4     00 00 00 00 | ct          long 0
3b7b8     00 00 00 00 | dt0         long 0
3b7bc                 | 
3b7bc                 | ' Samples
3b7bc     00 00 00 00 | oldls       long 0
3b7c0     00 00 00 00 | oldrs       long 0
3b7c4                 | 
3b7c4     00 00 00 00 | ls0         long 0
3b7c8     00 00 00 00 | rs0         long 0
3b7cc                 | 
3b7cc     00 00 00 00 | ls          long 0    
3b7d0     00 00 00 00 | rs          long 0
3b7d4                 | 
3b7d4     00 00 00 00 | oldsample   long 0
3b7d8     00 00 00 00 | newsample   long 0
3b7dc                 | 
3b7dc     00 00 00 00 | nrsample    long 0
3b7e0     00 00 00 00 | nlsample    long 0
3b7e4                 | 
3b7e4     00 00 00 00 | scbase long 0
3b7e8     00 00 00 00 | scptr long 0
3b7ec     00 00 00 00 | scptr2 long 0
3b7f0     00 00 00 00 | scope long 0
3b7f4                 | 
3b7f4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3b7f8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3b7fc                 | 
3b7fc     00 18 07 00 | hubptr      long $71800
3b800     00 00 00 00 | cache1      long 0
3b804     00 00 00 00 | cache2      long 0
3b808     00 00 00 00 | cache3      long 0
3b80c     00 00 00 00 | cache4      long 0
3b810     00 00 00 00 | cache5      long 0
3b814     00 00 00 00 | cache6      long 0
3b818     00 00 00 00 | cache7      long 0
3b81c     00 00 00 00 | cache8      long 0
3b820                 | 
3b820                 | 
3b820     00 00 00 00 | cmd         long 0
3b824     00 00 00 00 | hubaddr     long 0
3b828     00 01 00 00 | count       long 256
3b82c     00 00 00 00 | addrlo long 0
3b830     00 00 00 00 | addrhi long 0
3b834     00 00 00 00 | pointer00 long 0
3b838     00 00 00 00 | envhi long 0
3b83c     00 00 00 00 | envlo long 0
3b840     00 00 00 00 | envs1 long 0
3b844     00 00 00 00 | envs2 long 0
3b848     00 00 00 00 | noise0 long 0
3b84c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3b850     00 00 00 00 
3b854     00 00 00 00 | null  			long 	0,0           ' for channel reset
3b858                 | 	alignl
3b858                 | __system__dat_
3b858     00 00 00 00 
3b85c     00 00 00 00 | 	byte	$00[8]
3b860     03 00 00 00 
3b864     00 00 00 00 
3b868     00 00 00 00 
3b86c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b870     00 00 00 00 
      ...             
3bafc     00 00 00 00 
3bb00     00 00 00 00 | 	byte	$00[660]
3bb04     00 00 80 09 | 	long	(152 {__system____root_opendir})<<20
3bb08     00 00 90 09 | 	long	(153 {__system____root_closedir})<<20
3bb0c     00 00 A0 09 | 	long	(154 {__system____root_readdir})<<20
3bb10     00 00 B0 09 | 	long	(155 {__system____root_stat})<<20
3bb14     00 00 00 00 
3bb18     00 00 00 00 
3bb1c     00 00 00 00 
3bb20     00 00 00 00 
3bb24     00 00 00 00 
3bb28     00 00 00 00 
3bb2c     00 00 00 00 | 	byte	$00[28]
3bb30     98 BB 03 00 | 	long	@@@__system__dat_ + 832
3bb34     9B BB 03 00 | 	long	@@@__system__dat_ + 835
3bb38     BC BB 03 00 | 	long	@@@__system__dat_ + 868
3bb3c     D5 BB 03 00 | 	long	@@@__system__dat_ + 893
3bb40     F0 BB 03 00 | 	long	@@@__system__dat_ + 920
3bb44     0A BC 03 00 | 	long	@@@__system__dat_ + 946
3bb48     1A BC 03 00 | 	long	@@@__system__dat_ + 962
3bb4c     2C BC 03 00 | 	long	@@@__system__dat_ + 980
3bb50     3E BC 03 00 | 	long	@@@__system__dat_ + 998
3bb54     50 BC 03 00 | 	long	@@@__system__dat_ + 1016
3bb58     5C BC 03 00 | 	long	@@@__system__dat_ + 1028
3bb5c     6D BC 03 00 | 	long	@@@__system__dat_ + 1045
3bb60     81 BC 03 00 | 	long	@@@__system__dat_ + 1065
3bb64     8B BC 03 00 | 	long	@@@__system__dat_ + 1075
3bb68     9B BC 03 00 | 	long	@@@__system__dat_ + 1091
3bb6c     AA BC 03 00 | 	long	@@@__system__dat_ + 1106
3bb70     C0 BC 03 00 | 	long	@@@__system__dat_ + 1128
3bb74     D9 BC 03 00 | 	long	@@@__system__dat_ + 1153
3bb78     ED BC 03 00 | 	long	@@@__system__dat_ + 1173
3bb7c     FB BC 03 00 | 	long	@@@__system__dat_ + 1187
3bb80     0F BD 03 00 | 	long	@@@__system__dat_ + 1207
3bb84     1B BD 03 00 | 	long	@@@__system__dat_ + 1219
3bb88     2D BD 03 00 | 	long	@@@__system__dat_ + 1237
3bb8c     45 BD 03 00 | 	long	@@@__system__dat_ + 1261
3bb90     57 BD 03 00 | 	long	@@@__system__dat_ + 1279
3bb94     6A BD 03 00 | 	long	@@@__system__dat_ + 1298
3bb98     4F 4B 00 4E 
3bb9c     75 6D 65 72 
3bba0     69 63 61 6C 
3bba4     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3bba8     75 6D 65 6E 
3bbac     74 20 6F 75 
3bbb0     74 20 6F 66 
3bbb4     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3bbb8     61 69 6E 00 
3bbbc     52 65 73 75 
3bbc0     6C 74 20 6E 
3bbc4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3bbc8     65 70 72 65 
3bbcc     73 65 6E 74 
3bbd0     61 62 6C 65 
3bbd4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3bbd8     65 67 61 6C 
3bbdc     20 6D 75 6C 
3bbe0     74 69 62 79 
3bbe4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3bbe8     65 71 75 65 
3bbec     6E 63 65 00 
3bbf0     4E 6F 20 73 
3bbf4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3bbf8     66 69 6C 65 
3bbfc     20 6F 72 20 
3bc00     64 69 72 65 
3bc04     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3bc08     79 00 42 61 
3bc0c     64 20 66 69 
3bc10     6C 65 20 6E 
3bc14     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3bc18     72 00 50 65 
3bc1c     72 6D 69 73 
3bc20     73 69 6F 6E 
3bc24     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3bc28     69 65 64 00 
3bc2c     4E 6F 74 20 
3bc30     65 6E 6F 75 
3bc34     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3bc38     65 6D 6F 72 
3bc3c     79 00 54 65 
3bc40     6D 70 6F 72 
3bc44     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3bc48     66 61 69 6C 
3bc4c     75 72 65 00 
3bc50     46 69 6C 65 
3bc54     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3bc58     73 74 73 00 
3bc5c     49 6E 76 61 
3bc60     6C 69 64 20 
3bc64     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3bc68     6D 65 6E 74 
3bc6c     00 54 6F 6F 
3bc70     20 6D 61 6E 
3bc74     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3bc78     65 6E 20 66 
3bc7c     69 6C 65 73 
3bc80     00 49 2F 4F 
3bc84     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3bc88     6F 72 00 4E 
3bc8c     6F 74 20 61 
3bc90     20 64 69 72 
3bc94     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3bc98     72 79 00 49 
3bc9c     73 20 61 20 
3bca0     64 69 72 65 
3bca4     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3bca8     79 00 52 65 
3bcac     61 64 20 6F 
3bcb0     6E 6C 79 20 
3bcb4     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3bcb8     20 73 79 73 
3bcbc     74 65 6D 00 
3bcc0     46 75 6E 63 
3bcc4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3bcc8     20 6E 6F 74 
3bccc     20 69 6D 70 
3bcd0     6C 65 6D 65 
3bcd4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3bcd8     00 44 69 72 
3bcdc     65 63 74 6F 
3bce0     72 79 20 6E 
3bce4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3bce8     6D 70 74 79 
3bcec     00 4E 61 6D 
3bcf0     65 20 74 6F 
3bcf4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3bcf8     6E 67 00 44 
3bcfc     65 76 69 63 
3bd00     65 20 6E 6F 
3bd04     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3bd08     65 6B 61 62 
3bd0c     6C 65 00 42 
3bd10     61 64 20 61 
3bd14     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3bd18     73 73 00 42 
3bd1c     72 6F 6B 65 
3bd20     6E 20 63 6F 
3bd24     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3bd28     74 69 6F 6E 
3bd2c     00 44 65 76 
3bd30     69 63 65 20 
3bd34     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3bd38     65 73 6F 75 
3bd3c     72 63 65 20 
3bd40     62 75 73 79 
3bd44     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3bd48     73 73 20 64 
3bd4c     65 76 69 63 
3bd50     65 20 6C 69 
3bd54     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3bd58     6F 20 73 70 
3bd5c     61 63 65 20 
3bd60     6F 6E 20 64 
3bd64     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3bd68     65 00 55 6E 
3bd6c     6B 6E 6F 77 
3bd70     6E 20 65 72 
3bd74     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3bd78     00 00 00 00 
3bd7c     00 00 00 00 
3bd80     00 00 00 00 | 	byte	$00[12]
3bd84     05 00 00 00 
3bd88     00 00 00 00 
3bd8c     00 00 00 00 
3bd90     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd94     00 00 00 00 | 	byte	$00, $00, $00, $00
3bd98     00 00 00 0B | 	long	(176 {__system___tx})<<20
3bd9c     00 00 10 0B | 	long	(177 {__system___rx})<<20
3bda0     00 00 00 00 | 	byte	$00, $00, $00, $00
3bda4     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0727})<<20
3bda8     00 00 30 0B | 	long	(179 {__system____dummy_flush_0728})<<20
3bdac     00 00 00 00 
3bdb0     00 00 00 00 | 	byte	$00[8]
3bdb4     01 00 00 00 
3bdb8     06 00 00 00 
3bdbc     00 00 00 00 
3bdc0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bdc4     00 00 00 00 
3bdc8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3bdcc     00 00 00 0B | 	long	(176 {__system___tx})<<20
3bdd0     00 00 10 0B | 	long	(177 {__system___rx})<<20
3bdd4     00 00 00 00 | 	byte	$00, $00, $00, $00
3bdd8     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0727})<<20
3bddc     00 00 30 0B | 	long	(179 {__system____dummy_flush_0728})<<20
3bde0     00 00 00 00 
3bde4     00 00 00 00 | 	byte	$00[8]
3bde8     01 00 00 00 
3bdec     06 00 00 00 
3bdf0     00 00 00 00 
3bdf4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bdf8     00 00 00 00 
3bdfc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3be00     00 00 00 0B | 	long	(176 {__system___tx})<<20
3be04     00 00 10 0B | 	long	(177 {__system___rx})<<20
3be08     00 00 00 00 | 	byte	$00, $00, $00, $00
3be0c     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0727})<<20
3be10     00 00 30 0B | 	long	(179 {__system____dummy_flush_0728})<<20
3be14     00 00 00 00 
      ...             
3bf84     00 00 00 00 
3bf88     00 00 00 00 | 	byte	$00[376]
3bf8c     90 BF 03 00 | 	long	@@@__system__dat_ + 1848
3bf90     00 00 00 00 
3bf94     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3bf98                 | 	alignl
3bf98                 | _fatfs_cc_dat_
3bf98     C7 00 FC 00 
3bf9c     E9 00 E2 00 
3bfa0     E4 00 E0 00 
3bfa4     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3bfa8     EA 00 EB 00 
3bfac     E8 00 EF 00 
3bfb0     EE 00 EC 00 
3bfb4     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3bfb8     C9 00 E6 00 
3bfbc     C6 00 F4 00 
3bfc0     F6 00 F2 00 
3bfc4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3bfc8     FF 00 D6 00 
3bfcc     DC 00 F8 00 
3bfd0     A3 00 D8 00 
3bfd4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3bfd8     E1 00 ED 00 
3bfdc     F3 00 FA 00 
3bfe0     F1 00 D1 00 
3bfe4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3bfe8     BF 00 AE 00 
3bfec     AC 00 BD 00 
3bff0     BC 00 A1 00 
3bff4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3bff8     91 25 92 25 
3bffc     93 25 02 25 
3c000     24 25 C1 00 
3c004     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3c008     A9 00 63 25 
3c00c     51 25 57 25 
3c010     5D 25 A2 00 
3c014     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3c018     14 25 34 25 
3c01c     2C 25 1C 25 
3c020     00 25 3C 25 
3c024     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3c028     5A 25 54 25 
3c02c     69 25 66 25 
3c030     60 25 50 25 
3c034     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3c038     F0 00 D0 00 
3c03c     CA 00 CB 00 
3c040     C8 00 31 01 
3c044     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3c048     CF 00 18 25 
3c04c     0C 25 88 25 
3c050     84 25 A6 00 
3c054     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3c058     D3 00 DF 00 
3c05c     D4 00 D2 00 
3c060     F5 00 D5 00 
3c064     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3c068     DE 00 DA 00 
3c06c     DB 00 D9 00 
3c070     FD 00 DD 00 
3c074     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3c078     AD 00 B1 00 
3c07c     17 20 BE 00 
3c080     B6 00 A7 00 
3c084     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3c088     B0 00 A8 00 
3c08c     B7 00 B9 00 
3c090     B3 00 B2 00 
3c094     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3c098     61 00 1A 03 
3c09c     E0 00 17 03 
3c0a0     F8 00 07 03 
3c0a4     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3c0a8     78 01 00 01 
3c0ac     30 01 32 01 
3c0b0     06 01 39 01 
3c0b4     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3c0b8     2E 01 79 01 
3c0bc     06 01 80 01 
3c0c0     4D 00 43 02 
3c0c4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3c0c8     82 01 84 01 
3c0cc     84 01 86 01 
3c0d0     87 01 87 01 
3c0d4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3c0d8     8B 01 8B 01 
3c0dc     8D 01 8E 01 
3c0e0     8F 01 90 01 
3c0e4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3c0e8     93 01 94 01 
3c0ec     F6 01 96 01 
3c0f0     97 01 98 01 
3c0f4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3c0f8     9B 01 9C 01 
3c0fc     9D 01 20 02 
3c100     9F 01 A0 01 
3c104     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3c108     A2 01 A4 01 
3c10c     A4 01 A6 01 
3c110     A7 01 A7 01 
3c114     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3c118     AB 01 AC 01 
3c11c     AC 01 AE 01 
3c120     AF 01 AF 01 
3c124     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3c128     B3 01 B3 01 
3c12c     B5 01 B5 01 
3c130     B7 01 B8 01 
3c134     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3c138     BB 01 BC 01 
3c13c     BC 01 BE 01 
3c140     F7 01 C0 01 
3c144     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3c148     C3 01 C4 01 
3c14c     C5 01 C4 01 
3c150     C7 01 C8 01 
3c154     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3c158     CB 01 CA 01 
3c15c     CD 01 10 01 
3c160     DD 01 01 00 
3c164     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3c168     12 01 F3 01 
3c16c     03 00 F1 01 
3c170     F4 01 F4 01 
3c174     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3c178     22 02 12 01 
3c17c     3A 02 09 00 
3c180     65 2C 3B 02 
3c184     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3c188     66 2C 3F 02 
3c18c     40 02 41 02 
3c190     41 02 46 02 
3c194     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3c198     40 00 81 01 
3c19c     86 01 55 02 
3c1a0     89 01 8A 01 
3c1a4     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3c1a8     5A 02 90 01 
3c1ac     5C 02 5D 02 
3c1b0     5E 02 5F 02 
3c1b4     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3c1b8     62 02 94 01 
3c1bc     64 02 65 02 
3c1c0     66 02 67 02 
3c1c4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3c1c8     6A 02 62 2C 
3c1cc     6C 02 6D 02 
3c1d0     6E 02 9C 01 
3c1d4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3c1d8     9D 01 73 02 
3c1dc     74 02 9F 01 
3c1e0     76 02 77 02 
3c1e4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3c1e8     7A 02 7B 02 
3c1ec     7C 02 64 2C 
3c1f0     7E 02 7F 02 
3c1f4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3c1f8     82 02 A9 01 
3c1fc     84 02 85 02 
3c200     86 02 87 02 
3c204     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3c208     B1 01 B2 01 
3c20c     45 02 8D 02 
3c210     8E 02 8F 02 
3c214     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3c218     B7 01 7B 03 
3c21c     03 00 FD 03 
3c220     FE 03 FF 03 
3c224     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3c228     86 03 88 03 
3c22c     89 03 8A 03 
3c230     B1 03 11 03 
3c234     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3c238     A3 03 A3 03 
3c23c     C4 03 08 03 
3c240     CC 03 03 00 
3c244     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3c248     8F 03 D8 03 
3c24c     18 01 F2 03 
3c250     0A 00 F9 03 
3c254     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3c258     F5 03 F6 03 
3c25c     F7 03 F7 03 
3c260     F9 03 FA 03 
3c264     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3c268     20 03 50 04 
3c26c     10 07 60 04 
3c270     22 01 8A 04 
3c274     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3c278     0E 01 CF 04 
3c27c     01 00 C0 04 
3c280     D0 04 44 01 
3c284     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3c288     00 00 7D 1D 
3c28c     01 00 63 2C 
3c290     00 1E 96 01 
3c294     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3c298     00 1F 08 06 
3c29c     10 1F 06 06 
3c2a0     20 1F 08 06 
3c2a4     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3c2a8     40 1F 06 06 
3c2ac     51 1F 07 00 
3c2b0     59 1F 52 1F 
3c2b4     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3c2b8     5D 1F 56 1F 
3c2bc     5F 1F 60 1F 
3c2c0     08 06 70 1F 
3c2c4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3c2c8     BB 1F C8 1F 
3c2cc     C9 1F CA 1F 
3c2d0     CB 1F DA 1F 
3c2d4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3c2d8     F9 1F EA 1F 
3c2dc     EB 1F FA 1F 
3c2e0     FB 1F 80 1F 
3c2e4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3c2e8     08 06 A0 1F 
3c2ec     08 06 B0 1F 
3c2f0     04 00 B8 1F 
3c2f4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3c2f8     BC 1F CC 1F 
3c2fc     01 00 C3 1F 
3c300     D0 1F 02 06 
3c304     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3c308     E5 1F 01 00 
3c30c     EC 1F F3 1F 
3c310     01 00 FC 1F 
3c314     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3c318     32 21 70 21 
3c31c     10 02 84 21 
3c320     01 00 83 21 
3c324     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3c328     30 2C 2F 04 
3c32c     60 2C 02 01 
3c330     67 2C 06 01 
3c334     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3c338     80 2C 64 01 
3c33c     00 2D 26 08 
3c340     41 FF 1A 03 
3c344     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3c348     05 07 09 0E 
3c34c     10 12 14 16 
3c350     18 1C 1E 43 
3c354     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3c358     41 41 43 45 
3c35c     45 45 49 49 
3c360     49 41 41 45 
3c364     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3c368     4F 55 55 59 
3c36c     4F 55 4F 9C 
3c370     4F 9E 9F 41 
3c374     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3c378     A5 A6 A7 A8 
3c37c     A9 AA AB AC 
3c380     AD AE AF B0 
3c384     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3c388     41 41 41 B8 
3c38c     B9 BA BB BC 
3c390     BD BE BF C0 
3c394     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3c398     C5 41 41 C8 
3c39c     C9 CA CB CC 
3c3a0     CD CE CF D1 
3c3a4     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3c3a8     49 49 49 49 
3c3ac     D9 DA DB DC 
3c3b0     DD 49 DF 4F 
3c3b4     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3c3b8     4F E6 E8 E8 
3c3bc     55 55 55 59 
3c3c0     59 EE EF F0 
3c3c4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3c3c8     F5 F6 F7 F8 
3c3cc     F9 FA FB FC 
3c3d0     FD FE FF 00 
3c3d4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3c3d8     00 00 00 00 | 	byte	$00, $00, $00, $00
3c3dc     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_close})<<20
3c3e0     00 00 00 0A | 	long	(160 {_fatfs_cc_v_read})<<20
3c3e4     00 00 10 0A | 	long	(161 {_fatfs_cc_v_write})<<20
3c3e8     00 00 20 0A | 	long	(162 {_fatfs_cc_v_lseek})<<20
3c3ec     00 00 30 0A | 	long	(163 {_fatfs_cc_v_ioctl})<<20
3c3f0     00 00 40 0B | 	long	(180 {_fatfs_cc_v_flush})<<20
3c3f4     00 00 00 00 
3c3f8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c3fc     00 00 40 0A | 	long	(164 {_fatfs_cc_v_open})<<20
3c400     00 00 50 0A | 	long	(165 {_fatfs_cc_v_creat})<<20
3c404     00 00 60 0A | 	long	(166 {_fatfs_cc_v_opendir})<<20
3c408     00 00 70 0A | 	long	(167 {_fatfs_cc_v_closedir})<<20
3c40c     00 00 80 0A | 	long	(168 {_fatfs_cc_v_readdir})<<20
3c410     00 00 90 0A | 	long	(169 {_fatfs_cc_v_stat})<<20
3c414     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_mkdir})<<20
3c418     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rmdir})<<20
3c41c     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_remove})<<20
3c420     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_rename})<<20
3c424     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_init})<<20
3c428     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_deinit})<<20
3c42c     FF FF FF FF 
3c430     1F 00 00 00 
3c434     1C 00 00 00 
3c438     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3c43c     1E 00 00 00 
3c440     1F 00 00 00 
3c444     1E 00 00 00 
3c448     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3c44c     1F 00 00 00 
3c450     1E 00 00 00 
3c454     1F 00 00 00 
3c458     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3c45c     1F 00 00 00 
3c460     00 00 00 00 
3c464     1F 00 00 00 
3c468     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3c46c     5A 00 00 00 
3c470     78 00 00 00 
3c474     97 00 00 00 
3c478     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3c47c     D4 00 00 00 
3c480     F3 00 00 00 
3c484     11 01 00 00 
3c488     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3c48c     4E 01 00 00 
3c490     6D 01 00 00 
3c494     FF FF FF FF 
3c498     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3c49c     00 00 00 00 
      ...             
3c4b4     00 00 00 00 
3c4b8     00 00 00 00 | 	byte	$00[32]
3c4bc     DA C4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3c4c0     DE C4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3c4c4     00 00 00 00 
3c4c8     00 00 00 00 
3c4cc     00 00 00 00 
3c4d0     00 00 00 00 
3c4d4     00 00       | 	byte	$00[18]
3c4d6     3F 3F 3F 00 
3c4da     55 43 54 00 
3c4de     55 43 54 00 
3c4e2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3c4e6     00 00 00 00 
3c4ea     00 00 00    | 	byte	$00[7]
3c4ed     CA 9A 3B 00 
3c4f1     00 00 00 01 
3c4f5     01 01 01 01 
3c4f9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3c4fd     91 11 11 11 
3c501     11 01 01 01 
3c505     01 01 01 01 
3c509     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3c50d     01 01 01 01 
3c511     01 01 01    | 	byte	$01[7]
3c514     90 20 20 20 
3c518     20 20 20 20 
3c51c     20 20 20 20 
3c520     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3c524     42 42 42 42 
3c528     42 42 42 42 
3c52c     42 42       | 	byte	$42[10]
3c52e     20 20 20 20 
3c532     20 20 20    | 	byte	$20[7]
3c535     44 44 44 44 
3c539     44 44       | 	byte	$44[6]
3c53b     04 04 04 04 
3c53f     04 04 04 04 
3c543     04 04 04 04 
3c547     04 04 04 04 
3c54b     04 04 04 04 | 	byte	$04[20]
3c54f     20 20 20 20 
3c553     20 20       | 	byte	$20[6]
3c555     48 48 48 48 
3c559     48 48       | 	byte	$48[6]
3c55b     08 08 08 08 
3c55f     08 08 08 08 
3c563     08 08 08 08 
3c567     08 08 08 08 
3c56b     08 08 08 08 | 	byte	$08[20]
3c56f     20 20 20 20 
3c573     01 00 00 00 
3c577     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3c578                 | __methodtable__
3c578     44 39 01 00 | 	long	@_do_no_command
3c57c     D8 B7 01 00 | 	long	@_do_plus
3c580     FC A7 01 00 | 	long	@_do_minus
3c584     C0 B6 01 00 | 	long	@_do_or
3c588     7C AE 01 00 | 	long	@_do_mul
3c58c     E4 92 01 00 | 	long	@_do_fdiv
3c590     D4 8A 01 00 | 	long	@_do_and
3c594     EC 8B 01 00 | 	long	@_do_div
3c598     5C AC 01 00 | 	long	@_do_mod
3c59c     8C BE 01 00 | 	long	@_do_shl
3c5a0     A4 BF 01 00 | 	long	@_do_shr
3c5a4     C4 BC 01 00 | 	long	@_do_power
3c5a8     2C 81 01 00 | 	long	@_do_getvar
3c5ac     BC 54 01 00 | 	long	@_do_push
3c5b0     24 7B 01 00 | 	long	@_do_assign
3c5b4     68 DE 00 00 | 	long	@_do_cls
3c5b8     5C 33 01 00 | 	long	@_do_new
3c5bc     00 4D 01 00 | 	long	@_do_plot
3c5c0     68 00 01 00 | 	long	@_do_draw
3c5c4     68 4F 01 00 | 	long	@_do_print
3c5c8     48 DC 00 00 | 	long	@_do_circle
3c5cc     9C 02 01 00 | 	long	@_do_fcircle
3c5d0     3C CB 00 00 | 	long	@_do_box
3c5d4     80 07 01 00 | 	long	@_do_frame
3c5d8     A8 DE 00 00 | 	long	@_do_color
3c5dc     10 05 01 00 | 	long	@_do_for
3c5e0     7C 35 01 00 | 	long	@_do_next
3c5e4     88 21 01 00 | 	long	@_do_list
3c5e8     14 61 01 00 | 	long	@_do_run
3c5ec     C4 01 01 00 | 	long	@_do_error
3c5f0     98 13 01 00 | 	long	@_do_fast_goto
3c5f4     88 14 01 00 | 	long	@_do_find_goto
3c5f8     9C 16 01 00 | 	long	@_do_slow_goto
3c5fc     54 39 01 00 | 	long	@_do_nothing
3c600     44 C0 00 00 | 	long	@_test_csave
3c604     C8 64 01 00 | 	long	@_do_save
3c608     24 24 01 00 | 	long	@_do_load
3c60c     3C 40 01 00 | 	long	@_do_pinwrite
3c610     64 78 01 00 | 	long	@_do_waitms
3c614     98 79 01 00 | 	long	@_do_waitvbl
3c618     90 19 01 00 | 	long	@_do_if
3c61c     5C 01 01 00 | 	long	@_do_else
3c620     0C 8E 01 00 | 	long	@_do_eq
3c624     AC 94 01 00 | 	long	@_do_ge
3c628     5C 9E 01 00 | 	long	@_do_le
3c62c     84 99 01 00 | 	long	@_do_gt
3c630     34 A3 01 00 | 	long	@_do_lt
3c634     E8 B1 01 00 | 	long	@_do_ne
3c638     7C 5E 01 00 | 	long	@_do_rnd
3c63c     24 CD 00 00 | 	long	@_do_brun
3c640     C4 C8 00 00 | 	long	@_do_beep
3c644     F8 F8 00 00 | 	long	@_do_dir
3c648     70 3C 01 00 | 	long	@_do_paper
3c64c     4C 1D 01 00 | 	long	@_do_ink
3c650     94 04 01 00 | 	long	@_do_font
3c654     6C 2E 01 00 | 	long	@_do_mode
3c658     18 32 01 00 | 	long	@_do_mouse
3c65c     18 12 01 00 | 	long	@_do_gettime
3c660     04 E0 00 00 | 	long	@_do_cursor
3c664     C0 DD 00 00 | 	long	@_do_click
3c668     D4 32 01 00 | 	long	@_do_mousex
3c66c     18 33 01 00 | 	long	@_do_mousey
3c670     4C 32 01 00 | 	long	@_do_mousek
3c674     90 32 01 00 | 	long	@_do_mousew
3c678     14 6E 01 00 | 	long	@_do_sin
3c67c     04 71 01 00 | 	long	@_do_stick
3c680     94 72 01 00 | 	long	@_do_strig
3c684     24 6F 01 00 | 	long	@_do_sprite
3c688     20 F4 00 00 | 	long	@_do_defsprite
3c68c     C4 10 01 00 | 	long	@_do_getpixel
3c690     40 78 01 00 | 	long	@_do_waitclock
3c694     AC AB 01 00 | 	long	@_do_negative
3c698     40 5B 01 00 | 	long	@_do_rdpin
3c69c     A0 60 01 00 | 	long	@_do_rqpin
3c6a0     68 3E 01 00 | 	long	@_do_pinread
3c6a4     A4 79 01 00 | 	long	@_do_wrpin
3c6a8     24 7A 01 00 | 	long	@_do_wxpin
3c6ac     A4 7A 01 00 | 	long	@_do_wypin
3c6b0     A8 3D 01 00 | 	long	@_do_pinfloat
3c6b4     28 3E 01 00 | 	long	@_do_pinlo
3c6b8     E8 3D 01 00 | 	long	@_do_pinhi
3c6bc     EC 3E 01 00 | 	long	@_do_pinstart
3c6c0     FC 3F 01 00 | 	long	@_do_pintoggle
3c6c4     E0 4E 01 00 | 	long	@_do_position
3c6c8     E0 DE 00 00 | 	long	@_do_cos
3c6cc     24 74 01 00 | 	long	@_do_tan
3c6d0     AC C7 00 00 | 	long	@_do_atn
3c6d4     9C C6 00 00 | 	long	@_do_asin
3c6d8     2C C4 00 00 | 	long	@_do_acos
3c6dc     10 70 01 00 | 	long	@_do_sqr
3c6e0     80 03 01 00 | 	long	@_do_fill
3c6e4     34 EB 00 00 | 	long	@_do_defsnd
3c6e8     38 E0 00 00 | 	long	@_do_defenv
3c6ec     18 5B 01 00 | 	long	@_do_rad
3c6f0     94 F7 00 00 | 	long	@_do_deg
3c6f4     CC 1D 01 00 | 	long	@_do_int
3c6f8     C4 40 01 00 | 	long	@_do_play
3c6fc     6C 68 01 00 | 	long	@_do_setdelay
3c700     14 69 01 00 | 	long	@_do_setenv
3c704     BC 69 01 00 | 	long	@_do_setlen
3c708     64 6A 01 00 | 	long	@_do_setpan
3c70c     B4 6B 01 00 | 	long	@_do_setvol
3c710     5C 6C 01 00 | 	long	@_do_setwave
3c714     0C 6B 01 00 | 	long	@_do_setsustain
3c718     AC 5B 01 00 | 	long	@_do_release
3c71c     B0 0E 01 00 | 	long	@_do_getenvsustain
3c720     D0 4D 01 00 | 	long	@_do_poke
3c724     90 FF 00 00 | 	long	@_do_dpoke
3c728     FC 2A 01 00 | 	long	@_do_lpoke
3c72c     F8 3C 01 00 | 	long	@_do_peek
3c730     E4 FE 00 00 | 	long	@_do_dpeek
3c734     50 2A 01 00 | 	long	@_do_lpeek
3c738     A8 08 01 00 | 	long	@_do_fre
3c73c     C0 0F 01 00 | 	long	@_do_getnotevalue
3c740     E4 86 01 00 | 	long	@_do_getaddr
3c744     74 1A 01 00 | 	long	@_do_inkey
3c748     AC C3 00 00 | 	long	@_do_abs
3c74c     2C 18 01 00 | 	long	@_do_hex
3c750     D8 C9 00 00 | 	long	@_do_bin
3c754     34 75 01 00 | 	long	@_do_val
3c758     48 DB 00 00 | 	long	@_do_chr
3c75c     3C C5 00 00 | 	long	@_do_asc
3c760     88 1E 01 00 | 	long	@_do_left
3c764     F0 5C 01 00 | 	long	@_do_right
3c768     D4 2B 01 00 | 	long	@_do_mid
3c76c     14 20 01 00 | 	long	@_do_len
3c770     80 12 01 00 | 	long	@_do_gosub
3c774     44 5C 01 00 | 	long	@_do_return
3c778     80 01 01 00 | 	long	@_do_end
3c77c     A8 4E 01 00 | 	long	@_do_pop
3c780     D4 28 01 00 | 	long	@_do_log
3c784     3C D9 00 00 | 	long	@_do_changevol
3c788     1C DA 00 00 | 	long	@_do_changewav
3c78c     2C D8 00 00 | 	long	@_do_changepan
3c790     10 D5 00 00 | 	long	@_do_changefreq
3c794     04 6D 01 00 | 	long	@_do_shutup
3c798     4C 60 01 00 | 	long	@_do_round
3c79c     B4 01 01 00 | 	long	@_do_enter
3c7a0     58 39 01 00 | 	long	@_do_open
3c7a4     EC DD 00 00 | 	long	@_do_close
3c7a8     0C 09 01 00 | 	long	@_do_get
3c7ac     D8 55 01 00 | 	long	@_do_put
3c7b0     5C CF 00 00 | 	long	@_do_cd
3c7b4     BC F7 00 00 | 	long	@_do_delete
3c7b8     A0 2D 01 00 | 	long	@_do_mkdir
3c7bc     7C FD 01 00 | 	long	@_hg010b_spin2_putchar
3c7c0     C0 0F 03 00 | 	long	@__struct___bas_wrap_sender_tx
3c7c4     04 10 03 00 | 	long	@__struct___bas_wrap_sender_rx
3c7c8     4C 10 03 00 | 	long	@__struct___bas_wrap_sender_close
3c7cc     F0 0E 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3c7d0     60 0F 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3c7d4     A8 0E 03 00 | 	long	@___strs_cl_pfunc
3c7d8     3C 6C 02 00 | 	long	@__system____root_opendir
3c7dc     D8 6C 02 00 | 	long	@__system____root_closedir
3c7e0     54 6C 02 00 | 	long	@__system____root_readdir
3c7e4     E0 6C 02 00 | 	long	@__system____root_stat
3c7e8     6C 64 02 00 | 	long	@__system____default_putc
3c7ec     F0 63 02 00 | 	long	@__system____default_getc
3c7f0     14 65 02 00 | 	long	@__system____default_flush
3c7f4     AC F9 02 00 | 	long	@_fatfs_cc_v_close
3c7f8     C8 FD 02 00 | 	long	@_fatfs_cc_v_read
3c7fc     DC FE 02 00 | 	long	@_fatfs_cc_v_write
3c800     BC FF 02 00 | 	long	@_fatfs_cc_v_lseek
3c804     44 00 03 00 | 	long	@_fatfs_cc_v_ioctl
3c808     98 00 03 00 | 	long	@_fatfs_cc_v_open
3c80c     10 F9 02 00 | 	long	@_fatfs_cc_v_creat
3c810     F0 F9 02 00 | 	long	@_fatfs_cc_v_opendir
3c814     64 FA 02 00 | 	long	@_fatfs_cc_v_closedir
3c818     A4 FA 02 00 | 	long	@_fatfs_cc_v_readdir
3c81c     D8 FB 02 00 | 	long	@_fatfs_cc_v_stat
3c820     58 00 03 00 | 	long	@_fatfs_cc_v_mkdir
3c824     78 00 03 00 | 	long	@_fatfs_cc_v_rmdir
3c828     68 00 03 00 | 	long	@_fatfs_cc_v_remove
3c82c     88 00 03 00 | 	long	@_fatfs_cc_v_rename
3c830     A8 01 03 00 | 	long	@_fatfs_cc_v_init
3c834     B0 01 03 00 | 	long	@_fatfs_cc_v_deinit
3c838     7C 16 02 00 | 	long	@__system___tx
3c83c     BC 16 02 00 | 	long	@__system___rx
3c840     4C 78 02 00 | 	long	@__system___rxtxioctl_0727
3c844     A4 78 02 00 | 	long	@__system____dummy_flush_0728
3c848     78 01 03 00 | 	long	@_fatfs_cc_v_flush
3c84c                 | __heap_base
3c84c     00 00 00 00 
      ...             
6b64c     00 00 00 00 
6b650     00 00 00 00 | 	long	0[48002]
6b654                 | objmem
6b654     00 00 00 00 
      ...             
75a78     00 00 00 00 
75a7c     00 00 00 00 | 	long	0[10507]
75a80                 | stackspace
75a80     00 00 00 00 | 	long	0[1]
75a84 100             | 	org	COG_BSS_START
75a84 100             | _var01
75a84 100             | 	res	1
75a84 101             | _var02
75a84 101             | 	res	1
75a84 102             | _var03
75a84 102             | 	res	1
75a84 103             | _var04
75a84 103             | 	res	1
75a84 104             | _var05
75a84 104             | 	res	1
75a84 105             | _var06
75a84 105             | 	res	1
75a84 106             | _var07
75a84 106             | 	res	1
75a84 107             | _var08
75a84 107             | 	res	1
75a84 108             | _var09
75a84 108             | 	res	1
75a84 109             | arg01
75a84 109             | 	res	1
75a84 10a             | arg02
75a84 10a             | 	res	1
75a84 10b             | arg03
75a84 10b             | 	res	1
75a84 10c             | arg04
75a84 10c             | 	res	1
75a84 10d             | arg05
75a84 10d             | 	res	1
75a84 10e             | arg06
75a84 10e             | 	res	1
75a84 10f             | local01
75a84 10f             | 	res	1
75a84 110             | local02
75a84 110             | 	res	1
75a84 111             | local03
75a84 111             | 	res	1
75a84 112             | local04
75a84 112             | 	res	1
75a84 113             | local05
75a84 113             | 	res	1
75a84 114             | local06
75a84 114             | 	res	1
75a84 115             | local07
75a84 115             | 	res	1
75a84 116             | local08
75a84 116             | 	res	1
75a84 117             | local09
75a84 117             | 	res	1
75a84 118             | local10
75a84 118             | 	res	1
75a84 119             | local11
75a84 119             | 	res	1
75a84 11a             | local12
75a84 11a             | 	res	1
75a84 11b             | local13
75a84 11b             | 	res	1
75a84 11c             | local14
75a84 11c             | 	res	1
75a84 11d             | local15
75a84 11d             | 	res	1
75a84 11e             | local16
75a84 11e             | 	res	1
75a84 11f             | local17
75a84 11f             | 	res	1
75a84 120             | local18
75a84 120             | 	res	1
75a84 121             | local19
75a84 121             | 	res	1
75a84 122             | local20
75a84 122             | 	res	1
75a84 123             | local21
75a84 123             | 	res	1
75a84 124             | local22
75a84 124             | 	res	1
75a84 125             | local23
75a84 125             | 	res	1
75a84 126             | local24
75a84 126             | 	res	1
75a84 127             | local25
75a84 127             | 	res	1
75a84 128             | local26
75a84 128             | 	res	1
75a84 129             | local27
75a84 129             | 	res	1
75a84 12a             | local28
75a84 12a             | 	res	1
75a84 12b             | local29
75a84 12b             | 	res	1
75a84 12c             | local30
75a84 12c             | 	res	1
75a84 12d             | local31
75a84 12d             | 	res	1
75a84 12e             | local32
75a84 12e             | 	res	1
75a84 12f             | local33
75a84 12f             | 	res	1
75a84 130             | local34
75a84 130             | 	res	1
75a84 131             | local35
75a84 131             | 	res	1
75a84 132             | local36
75a84 132             | 	res	1
75a84 133             | local37
75a84 133             | 	res	1
75a84 134             | local38
75a84 134             | 	res	1
75a84 135             | local39
75a84 135             | 	res	1
75a84 136             | local40
75a84 136             | 	res	1
75a84 137             | local41
75a84 137             | 	res	1
75a84 138             | local42
75a84 138             | 	res	1
75a84 139             | local43
75a84 139             | 	res	1
75a84 13a             | local44
75a84 13a             | 	res	1
75a84 13b             | local45
75a84 13b             | 	res	1
75a84 13c             | local46
75a84 13c             | 	res	1
75a84 13d             | local47
75a84 13d             | 	res	1
75a84 13e             | local48
75a84 13e             | 	res	1
75a84 13f             | local49
75a84 13f             | 	res	1
75a84 140             | muldiva_
75a84 140             | 	res	1
75a84 141             | muldivb_
75a84 141             | 	res	1
75a84 142             | 	fit	480
75a84 142             | 
