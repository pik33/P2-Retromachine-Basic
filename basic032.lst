00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 50 19 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 7C 02 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 8C FF 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 84 79 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 6C F2 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 C4 ED 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 D0 5A 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 AC F9 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 38 8C 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 E8 B3 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa A0 B1 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 78 C3 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc E0 1D 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     04 2A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     98 3E B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     52 00 00 FF 
00844     1C E4 05 F1 | 	add	objptr, ##42012
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     1C E4 85 F1 | 	sub	objptr, ##42012
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     90 41 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     E4 48 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     DC 42 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##41952
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     10 E5 85 F1 | 	sub	objptr, ##36112
009c0     A0 40 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     D8 0E B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     1C E4 05 F1 | 	add	objptr, ##42012
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     1C E4 85 F1 | 	sub	objptr, ##42012
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     04 E4 05 F1 | 	add	objptr, ##41988
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     04 E4 85 F1 | 	sub	objptr, ##41988
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     D0 0C B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     70 0C B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     24 E4 05 F1 | 	add	objptr, ##42020
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     E6 E5 85 F1 | 	sub	objptr, ##41958
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     E8 E5 05 F1 | 	add	objptr, ##41960
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     E6 E5 85 F1 | 	sub	objptr, ##41958
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     00 0C B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     4C 24 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     24 E4 05 F1 | 	add	objptr, ##42020
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     24 E4 85 F1 | 	sub	objptr, ##42020
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     68 27 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     CC 3D B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     20 45 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     1C 3F B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     A5 01 00 FF 
00ccc     76 50 06 F6 | 	mov	local22, ##@LR__5337
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     94 0A B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     00 64 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     0C 42 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     04 E4 05 F1 | 	add	objptr, ##41988
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     04 E4 85 F1 | 	sub	objptr, ##41988
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     B8 2B B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     E8 2D B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     58 3C B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     AC 43 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     A8 3D B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     30 09 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     28 23 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     1C 23 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     AC 22 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     78 22 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     98 22 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     88 22 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     D4 07 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     80 07 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     50 07 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     24 E4 05 F1 | 	add	objptr, ##42020
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     E6 E5 85 F1 | 	sub	objptr, ##41958
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     E8 E5 05 F1 | 	add	objptr, ##41960
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     E6 E5 85 F1 | 	sub	objptr, ##41958
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     E8 06 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     34 1F B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     24 E4 05 F1 | 	add	objptr, ##42020
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     24 E4 85 F1 | 	sub	objptr, ##42020
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     10 20 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     D0 05 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     7C 05 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     4C 05 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     24 E4 05 F1 | 	add	objptr, ##42020
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     E6 E5 85 F1 | 	sub	objptr, ##41958
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     E8 E5 05 F1 | 	add	objptr, ##41960
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     E6 E5 85 F1 | 	sub	objptr, ##41958
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     E4 04 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     30 1D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     24 E4 05 F1 | 	add	objptr, ##42020
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     24 E4 85 F1 | 	sub	objptr, ##42020
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     A5 01 00 FF 
01328     77 50 06 F6 | 	mov	local22, ##@LR__5338
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     CA E5 05 F1 | 	add	objptr, ##41930
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     08 E4 85 F1 | 	sub	objptr, ##41992
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     08 E4 05 C1 |  if_b	add	objptr, ##41992
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     08 E4 85 C1 |  if_b	sub	objptr, ##41992
0137c     52 00 00 FF 
01380     08 E4 05 F1 | 	add	objptr, ##41992
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     08 E4 85 F1 | 	sub	objptr, ##41992
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     58 1E B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     CA E5 05 F1 | 	add	objptr, ##41930
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     08 E4 85 F1 | 	sub	objptr, ##41992
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     08 E4 05 31 |  if_ae	add	objptr, ##41992
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     08 E4 85 31 |  if_ae	sub	objptr, ##41992
013dc     52 00 00 FF 
013e0     08 E4 05 F1 | 	add	objptr, ##41992
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     08 E4 85 F1 | 	sub	objptr, ##41992
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     F8 1D B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     D0 E5 05 F1 | 	add	objptr, ##41936
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     D8 E5 85 F1 | 	sub	objptr, ##13784
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     D8 E5 05 C1 |  if_b	add	objptr, ##13784
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     0C E4 85 C1 |  if_b	sub	objptr, ##41996
01458     52 00 00 FF 
0145c     0C E4 05 F1 | 	add	objptr, ##41996
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     0C E4 85 F1 | 	sub	objptr, ##41996
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     4C 1D B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     D0 E5 05 F1 | 	add	objptr, ##41936
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     0C E4 85 F1 | 	sub	objptr, ##41996
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     0C E4 05 31 |  if_ae	add	objptr, ##41996
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     0C E4 85 31 |  if_ae	sub	objptr, ##41996
014b8     52 00 00 FF 
014bc     0C E4 05 F1 | 	add	objptr, ##41996
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     0C E4 85 F1 | 	sub	objptr, ##41996
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     F0 1C B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     04 E4 05 F1 | 	add	objptr, ##41988
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     04 E4 85 F1 | 	sub	objptr, ##41988
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     3C 0B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     2C 0B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     87 E5 05 F1 | 	add	objptr, ##41863
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     D0 E5 85 F1 | 	sub	objptr, ##41936
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     60 3C B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     D0 E5 05 F1 | 	add	objptr, ##41936
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     D0 E5 85 F1 | 	sub	objptr, ##41936
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     38 3C B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     D0 E5 05 F1 | 	add	objptr, ##41936
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     D0 E5 85 F1 | 	sub	objptr, ##41936
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     10 3C B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     D0 E5 05 F1 | 	add	objptr, ##41936
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     D0 E5 85 F1 | 	sub	objptr, ##41936
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     68 31 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     B8 31 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     A8 31 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     58 E5 05 F1 | 	add	objptr, ##41816
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     74 E5 85 F1 | 	sub	objptr, ##41844
016dc     0C 31 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     58 E5 05 F1 | 	add	objptr, ##41816
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     74 E5 85 F1 | 	sub	objptr, ##41844
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     74 5C B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     AC 5B B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     C8 E5 05 F1 | 	add	objptr, ##13768
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     70 E5 85 F1 | 	sub	objptr, ##3952
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     A5 01 00 FF 
01800     78 16 06 F6 | 	mov	arg03, ##@LR__5339
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     9C 5B B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     D4 5A B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     A5 01 00 FF 
01860     79 2C 06 F6 | 	mov	local04, ##@LR__5340
01864     1B 00 00 FF 
01868     0C E4 05 F1 | 	add	objptr, ##13836
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1B 00 00 FF 
01874     0C E4 85 F1 | 	sub	objptr, ##13836
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     2C E4 05 F1 | 	add	objptr, ##42028
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     2C E4 85 F1 | 	sub	objptr, ##42028
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     54 57 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     A5 01 00 FF 
01920     7A 14 06 F6 | 	mov	arg02, ##@LR__5341
01924     D4 35 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     14 57 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     A5 01 00 FF 
01960     7C 14 06 F6 | 	mov	arg02, ##@LR__5342
01964     94 35 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     A4 56 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     A5 01 00 FF 
019d0     7E 38 06 F6 | 	mov	local10, ##@LR__5343
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     20 35 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     2C E4 05 F1 | 	add	objptr, ##42028
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     2C E4 85 F1 | 	sub	objptr, ##42028
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     2C E4 05 F1 | 	add	objptr, ##42028
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     2C E4 85 F1 | 	sub	objptr, ##42028
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     40 55 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     40 59 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     78 58 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     30 E4 05 F1 | 	add	objptr, ##42032
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1B 00 00 FF 
01abc     14 E4 85 F1 | 	sub	objptr, ##13844
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     7C 54 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     04 59 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     3C 58 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     A5 01 00 FF 
01b04     80 2C 06 F6 | 	mov	local04, ##@LR__5344
01b08     52 00 00 FF 
01b0c     30 E4 05 F1 | 	add	objptr, ##42032
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     30 E4 85 F1 | 	sub	objptr, ##42032
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     30 E4 05 F1 | 	add	objptr, ##42032
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     30 E4 85 F1 | 	sub	objptr, ##42032
01b50     A5 01 00 FF 
01b54     81 30 06 F6 | 	mov	local06, ##@LR__5345
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     9C 33 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     30 E4 05 F1 | 	add	objptr, ##42032
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     30 E4 85 F1 | 	sub	objptr, ##42032
01bb0     A5 01 00 FF 
01bb4     82 14 06 F6 | 	mov	arg02, ##@LR__5346
01bb8     40 33 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     30 E4 05 F1 | 	add	objptr, ##42032
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     30 E4 85 F1 | 	sub	objptr, ##42032
01c08     A5 01 00 FF 
01c0c     83 14 06 F6 | 	mov	arg02, ##@LR__5347
01c10     E8 32 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     30 E4 05 F1 | 	add	objptr, ##42032
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     30 E4 85 F1 | 	sub	objptr, ##42032
01c60     A5 01 00 FF 
01c64     84 14 06 F6 | 	mov	arg02, ##@LR__5348
01c68     90 32 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     B0 53 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     2C E4 05 F1 | 	add	objptr, ##42028
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     2C E4 85 F1 | 	sub	objptr, ##42028
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     38 E4 05 F1 | 	add	objptr, ##42040
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     38 E4 85 F1 | 	sub	objptr, ##42040
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1B 00 00 FF 
01da4     1C E4 05 F1 | 	add	objptr, ##13852
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     38 E4 85 F1 | 	sub	objptr, ##42040
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     B0 52 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     A5 01 00 FF 
01dc4     85 14 06 F6 | 	mov	arg02, ##@LR__5349
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     2C 31 B2 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1B 00 00 FF 
01e0c     1C E4 05 F1 | 	add	objptr, ##13852
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     38 E4 85 F1 | 	sub	objptr, ##42040
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     2C 52 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     A5 01 00 FF 
01e48     86 14 06 F6 | 	mov	arg02, ##@LR__5350
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     A8 30 B2 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     64 4B B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     A5 01 00 FF 
01f5c     87 2C 06 F6 | 	mov	local04, ##@LR__5351
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     A5 01 00 FF 
01f90     89 14 06 F6 | 	mov	arg02, ##@LR__5352
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     5C 2F B2 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     30 2F B2 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     A5 01 00 FF 
02098     8B 14 06 F6 | 	mov	arg02, ##@LR__5353
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     58 2E B2 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     A5 01 00 FF 
020b4     8D 14 06 F6 | 	mov	arg02, ##@LR__5354
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     3C 2E B2 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     D8 4E B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     A5 01 00 FF 
0210c     8F 14 06 F6 | 	mov	arg02, ##@LR__5355
02110     E8 2D B2 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     08 4E B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     A5 01 00 FF 
02154     91 14 06 F6 | 	mov	arg02, ##@LR__5356
02158     A0 2D B2 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     F0 4D B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     34 2D B2 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     A5 01 00 FF 
022d8     93 14 06 F6 | 	mov	arg02, ##@LR__5357
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     10 2C B2 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     A5 01 00 FF 
022f8     95 14 06 F6 | 	mov	arg02, ##@LR__5358
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     F8 2B B2 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     A5 01 00 FF 
02310     97 30 06 F6 | 	mov	local06, ##@LR__5359
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     DC 2B B2 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     A5 01 00 FF 
0232c     99 3C 06 F6 | 	mov	local12, ##@LR__5360
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     C0 2B B2 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     A5 01 00 FF 
02348     9B 3A 06 F6 | 	mov	local11, ##@LR__5361
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     A0 2B B2 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     A5 01 00 FF 
02368     9D 3A 06 F6 | 	mov	local11, ##@LR__5362
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     84 2B B2 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     A5 01 00 FF 
02384     9F 40 06 F6 | 	mov	local14, ##@LR__5363
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     68 2B B2 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     A5 01 00 FF 
023a0     A1 5C 06 F6 | 	mov	local28, ##@LR__5364
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     48 2B B2 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     A5 01 00 FF 
023c0     A3 5C 06 F6 | 	mov	local28, ##@LR__5365
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     2C 2B B2 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     A5 01 00 FF 
023dc     A5 52 06 F6 | 	mov	local23, ##@LR__5366
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     0C 2B B2 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     A5 01 00 FF 
023fc     A7 52 06 F6 | 	mov	local23, ##@LR__5367
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     F0 2A B2 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     A5 01 00 FF 
02418     A9 5E 06 F6 | 	mov	local29, ##@LR__5368
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     D0 2A B2 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     A5 01 00 FF 
02438     AB 60 06 F6 | 	mov	local30, ##@LR__5369
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     B0 2A B2 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     A5 01 00 FF 
02458     AD 62 06 F6 | 	mov	local31, ##@LR__5370
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     90 2A B2 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     90 2A B2 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     44 4E B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     7C 4D B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     50 48 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     A5 01 00 FF 
0270c     AF 14 06 F6 | 	mov	arg02, ##@LR__5371
02710     E8 27 B2 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     94 48 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     A5 01 00 FF 
02750     B1 14 06 F6 | 	mov	arg02, ##@LR__5372
02754     A4 27 B2 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     CC 4A B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     34 42 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     A5 01 00 FF 
02828     B3 14 06 F6 | 	mov	arg02, ##@LR__5373
0282c     CC 26 B2 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     A5 01 00 FF 
02858     B8 14 06 F6 | 	mov	arg02, ##@LR__5374
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     94 26 B2 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     A5 01 00 FF 
028a8     BD 16 06 F6 | 	mov	arg03, ##@LR__5375
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     E0 4B B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     F4 45 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     28 45 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     FC 44 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     A5 01 00 FF 
02a60     BF 14 06 F6 | 	mov	arg02, ##@LR__5376
02a64     94 24 B2 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     38 44 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     A5 01 00 FF 
02bc0     C1 30 06 F6 | 	mov	local06, ##@LR__5377
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     A5 01 00 FF 
02bec     C3 14 06 F6 | 	mov	arg02, ##@LR__5378
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     FC 22 B2 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     A5 01 00 FF 
02c0c     C9 14 06 F6 | 	mov	arg02, ##@LR__5379
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     E4 22 B2 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     A5 01 00 FF 
02c24     D0 14 06 F6 | 	mov	arg02, ##@LR__5380
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     CC 22 B2 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     A5 01 00 FF 
02c58     D6 14 06 F6 | 	mov	arg02, ##@LR__5381
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     94 22 B2 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     A5 01 00 FF 
02c8c     D9 30 06 F6 | 	mov	local06, ##@LR__5382
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     A5 01 00 FF 
02cc8     DB 14 06 F6 | 	mov	arg02, ##@LR__5383
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     24 22 B2 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     A5 01 00 FF 
02cfc     DF 30 06 F6 | 	mov	local06, ##@LR__5384
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     A5 01 00 FF 
02d1c     E1 14 06 F6 | 	mov	arg02, ##@LR__5385
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     D4 21 B2 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     A5 01 00 FF 
02d34     E6 14 06 F6 | 	mov	arg02, ##@LR__5386
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     BC 21 B2 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     A5 01 00 FF 
02d68     E9 14 06 F6 | 	mov	arg02, ##@LR__5387
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     84 21 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     A5 01 00 FF 
02d9c     EF 30 06 F6 | 	mov	local06, ##@LR__5388
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     A5 01 00 FF 
02dcc     F1 14 06 F6 | 	mov	arg02, ##@LR__5389
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     20 21 B2 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     A5 01 00 FF 
02e00     FA 30 06 F6 | 	mov	local06, ##@LR__5390
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     A5 01 00 FF 
02e30     FC 14 06 F6 | 	mov	arg02, ##@LR__5391
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     BC 20 B2 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     A5 01 00 FF 
02e64     05 31 06 F6 | 	mov	local06, ##@LR__5392
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     A5 01 00 FF 
02e94     07 15 06 F6 | 	mov	arg02, ##@LR__5393
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     58 20 B2 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     A5 01 00 FF 
02ec8     10 31 06 F6 | 	mov	local06, ##@LR__5394
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     A5 01 00 FF 
02ef8     12 15 06 F6 | 	mov	arg02, ##@LR__5395
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     F4 1F B2 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     A5 01 00 FF 
02f2c     15 31 06 F6 | 	mov	local06, ##@LR__5396
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     A6 01 00 FF 
03064     08 14 06 F6 | 	mov	arg02, ##@LR__5481
03068     90 1E B2 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     F8 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     30 39 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     F8 3E B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     AC 3C B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     2C 45 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     20 3D B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     20 2F B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     E4 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     60 35 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     20 35 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     EC 39 B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     84 2A B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     A5 01 00 FF 
0371c     17 31 06 F6 | 	mov	local06, ##@LR__5397
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     A5 01 00 FF 
0373c     18 15 06 F6 | 	mov	arg02, ##@LR__5398
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     B4 17 B2 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     A5 01 00 FF 
03754     1D 15 06 F6 | 	mov	arg02, ##@LR__5399
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     9C 17 B2 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     A5 01 00 FF 
0376c     22 31 06 F6 | 	mov	local06, ##@LR__5400
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     80 17 B2 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     A5 01 00 FF 
03788     27 3D 06 F6 | 	mov	local12, ##@LR__5401
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     60 17 B2 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     A5 01 00 FF 
037a8     2B 3B 06 F6 | 	mov	local11, ##@LR__5402
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     40 17 B2 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     A5 01 00 FF 
037c8     2F 41 06 F6 | 	mov	local14, ##@LR__5403
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     20 17 B2 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     A5 01 00 FF 
037e8     32 3F 06 F6 | 	mov	local13, ##@LR__5404
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     00 17 B2 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     A5 01 00 FF 
03808     36 3F 06 F6 | 	mov	local13, ##@LR__5405
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     E4 16 B2 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     A5 01 00 FF 
03824     3C 51 06 F6 | 	mov	local22, ##@LR__5406
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     C4 16 B2 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     A5 01 00 FF 
038c0     3F 15 06 F6 | 	mov	arg02, ##@LR__5407
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     30 16 B2 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     A5 01 00 FF 
038d8     46 2F 06 F6 | 	mov	local05, ##@LR__5408
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     14 16 B2 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     A5 01 00 FF 
03970     4C 15 06 F6 | 	mov	arg02, ##@LR__5409
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     80 15 B2 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     A5 01 00 FF 
039c0     4F 15 06 F6 | 	mov	arg02, ##@LR__5410
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     30 15 B2 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     A5 01 00 FF 
039f8     53 2F 06 F6 | 	mov	local05, ##@LR__5411
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     F0 14 B2 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     A5 01 00 FF 
03a4c     55 31 06 F6 | 	mov	local06, ##@LR__5412
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     A5 01 00 FF 
03a7c     58 39 06 F6 | 	mov	local10, ##@LR__5413
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     70 14 B2 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     A5 01 00 FF 
03ab8     5B 2F 06 F6 | 	mov	local05, ##@LR__5414
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     2C 14 B2 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     A8 13 B2 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     88 2E B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     F4 47 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     EC E5 05 F1 | 	add	objptr, ##41964
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     EC E5 85 F1 | 	sub	objptr, ##41964
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     EC E5 05 F1 | 	add	objptr, ##41964
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     EC E5 85 F1 | 	sub	objptr, ##41964
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     EC E5 05 F1 | 	add	objptr, ##41964
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     EC E5 85 F1 | 	sub	objptr, ##41964
03c3c     A4 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     EC E5 05 F1 | 	add	objptr, ##41964
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     C8 E5 85 F1 | 	sub	objptr, ##13768
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     74 43 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     EC E5 05 F1 | 	add	objptr, ##41964
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     EC E5 85 F1 | 	sub	objptr, ##41964
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     48 D8 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     30 E4 05 F1 | 	add	objptr, ##42032
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     30 E4 85 F1 | 	sub	objptr, ##42032
03cfc     A5 01 00 FF 
03d00     5D 15 06 F6 | 	mov	arg02, ##@LR__5415
03d04     F4 11 B2 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     30 E4 05 F1 | 	add	objptr, ##42032
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1B 00 00 FF 
03d20     14 E4 85 F1 | 	sub	objptr, ##13844
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     EC E5 05 F1 | 	add	objptr, ##41964
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     C8 E5 85 F1 | 	sub	objptr, ##13768
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     80 42 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     EC E5 05 F1 | 	add	objptr, ##41964
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     EC E5 85 F1 | 	sub	objptr, ##41964
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     54 D7 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     30 E4 05 F1 | 	add	objptr, ##42032
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     30 E4 85 F1 | 	sub	objptr, ##42032
03df0     A5 01 00 FF 
03df4     5E 15 06 F6 | 	mov	arg02, ##@LR__5416
03df8     00 11 B2 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     30 E4 05 F1 | 	add	objptr, ##42032
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1B 00 00 FF 
03e14     14 E4 85 F1 | 	sub	objptr, ##13844
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     EC E5 05 F1 | 	add	objptr, ##41964
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     C8 E5 85 F1 | 	sub	objptr, ##13768
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     5C 42 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     EC E5 05 F1 | 	add	objptr, ##41964
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     EC E5 85 F1 | 	sub	objptr, ##41964
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     68 D6 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     30 E4 05 F1 | 	add	objptr, ##42032
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     30 E4 85 F1 | 	sub	objptr, ##42032
03edc     A5 01 00 FF 
03ee0     5F 15 06 F6 | 	mov	arg02, ##@LR__5417
03ee4     14 10 B2 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     30 E4 05 F1 | 	add	objptr, ##42032
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1B 00 00 FF 
03f00     14 E4 85 F1 | 	sub	objptr, ##13844
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     EC E5 05 F1 | 	add	objptr, ##41964
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     C8 E5 85 F1 | 	sub	objptr, ##13768
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     6C 41 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     EC E5 05 F1 | 	add	objptr, ##41964
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     EC E5 85 F1 | 	sub	objptr, ##41964
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     78 D5 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     30 E4 05 F1 | 	add	objptr, ##42032
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     30 E4 85 F1 | 	sub	objptr, ##42032
03fcc     A5 01 00 FF 
03fd0     60 15 06 F6 | 	mov	arg02, ##@LR__5418
03fd4     24 0F B2 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     30 E4 05 F1 | 	add	objptr, ##42032
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1B 00 00 FF 
03ff0     14 E4 85 F1 | 	sub	objptr, ##13844
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     EC E5 05 F1 | 	add	objptr, ##41964
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     EC E5 85 F1 | 	sub	objptr, ##41964
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     5C 8A B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     52 00 00 FF 
04030     10 E4 05 F1 | 	add	objptr, ##42000
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     52 00 00 FF 
0403c     10 E4 85 F1 | 	sub	objptr, ##42000
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     A5 01 00 FF 
04048     61 13 06 F6 | 	mov	arg01, ##@LR__5419
0404c                 | ' 
0404c                 | ' write(text)
0404c     08 F6 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     04 FB B1 FD | 	call	#_hg010b_spin2_crlf
04054     A5 01 00 FF 
04058     62 13 06 F6 | 	mov	arg01, ##@LR__5420
0405c                 | ' 
0405c                 | ' write(text)
0405c     F8 F5 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     F4 FA B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     52 00 00 FF 
04068     10 E4 05 F1 | 	add	objptr, ##42000
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     52 00 00 FF 
04074     10 E4 85 F1 | 	sub	objptr, ##42000
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     E8 6A B2 FD | 	call	#__system___getiolock_0593
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     3C 0E B2 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     14 1B B2 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     AC 1A B2 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     A8 6A B2 FD | 	call	#__system___getiolock_0593
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     A5 01 00 FF 
040f0     68 15 06 F6 | 	mov	arg02, ##@LR__5421
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     00 0E B2 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     A5 01 00 FF 
04108     6A 15 06 F6 | 	mov	arg02, ##@LR__5422
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     E8 0D B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     A5 01 00 FF 
04120     6C 15 06 F6 | 	mov	arg02, ##@LR__5423
04124     13 13 02 F6 | 	mov	arg01, local01
04128     D0 0D B2 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     A5 01 00 FF 
04138     6F 15 06 F6 | 	mov	arg02, ##@LR__5424
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     B8 0D B2 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     A5 01 00 FF 
04150     73 15 06 F6 | 	mov	arg02, ##@LR__5425
04154     13 13 02 F6 | 	mov	arg01, local01
04158     A0 0D B2 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     A5 01 00 FF 
04168     75 15 06 F6 | 	mov	arg02, ##@LR__5426
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     88 0D B2 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     A5 01 00 FF 
04180     77 15 06 F6 | 	mov	arg02, ##@LR__5427
04184     13 13 02 F6 | 	mov	arg01, local01
04188     70 0D B2 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     A5 01 00 FF 
04198     7B 15 06 F6 | 	mov	arg02, ##@LR__5428
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     58 0D B2 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     A5 01 00 FF 
041b0     7F 15 06 F6 | 	mov	arg02, ##@LR__5429
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     40 0D B2 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     A5 01 00 FF 
041c8     83 15 06 F6 | 	mov	arg02, ##@LR__5430
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     28 0D B2 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     A5 01 00 FF 
041e0     87 15 06 F6 | 	mov	arg02, ##@LR__5431
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     10 0D B2 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     A5 01 00 FF 
041f8     8B 15 06 F6 | 	mov	arg02, ##@LR__5432
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     F8 0C B2 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     A5 01 00 FF 
04210     8D 15 06 F6 | 	mov	arg02, ##@LR__5433
04214     13 13 02 F6 | 	mov	arg01, local01
04218     E0 0C B2 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     A5 01 00 FF 
04228     91 15 06 F6 | 	mov	arg02, ##@LR__5434
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     C8 0C B2 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     A5 01 00 FF 
04240     93 15 06 F6 | 	mov	arg02, ##@LR__5435
04244     13 13 02 F6 | 	mov	arg01, local01
04248     B0 0C B2 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     A5 01 00 FF 
04258     95 15 06 F6 | 	mov	arg02, ##@LR__5436
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     98 0C B2 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     A5 01 00 FF 
04270     98 15 06 F6 | 	mov	arg02, ##@LR__5437
04274     13 13 02 F6 | 	mov	arg01, local01
04278     80 0C B2 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     A5 01 00 FF 
04288     9B 15 06 F6 | 	mov	arg02, ##@LR__5438
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     68 0C B2 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     A5 01 00 FF 
042a0     9D 15 06 F6 | 	mov	arg02, ##@LR__5439
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     50 0C B2 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     A5 01 00 FF 
042b8     9F 15 06 F6 | 	mov	arg02, ##@LR__5440
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     38 0C B2 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     A5 01 00 FF 
042d0     A2 15 06 F6 | 	mov	arg02, ##@LR__5441
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     20 0C B2 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     A5 01 00 FF 
042e8     A5 15 06 F6 | 	mov	arg02, ##@LR__5442
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     08 0C B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     80 2B B2 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     A5 01 00 FF 
043dc     A8 15 06 F6 | 	mov	arg02, ##@LR__5443
043e0     18 0B B2 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     B4 2B B2 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     A5 01 00 FF 
04430     AA 15 06 F6 | 	mov	arg02, ##@LR__5444
04434     C4 0A B2 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     90 2B B2 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     A5 01 00 FF 
04454     AC 15 06 F6 | 	mov	arg02, ##@LR__5445
04458     A0 0A B2 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     64 2B B2 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     DC 40 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     F0 34 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     7C 3D B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     A5 01 00 FF 
044b8     AE 15 06 F6 | 	mov	arg02, ##@LR__5446
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     38 0A B2 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     A5 01 00 FF 
044d0     B4 15 06 F6 | 	mov	arg02, ##@LR__5447
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     20 0A B2 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     A5 01 00 FF 
044e8     BB 15 06 F6 | 	mov	arg02, ##@LR__5448
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     08 0A B2 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     18 2A B2 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     A5 01 00 FF 
04544     C3 15 06 F6 | 	mov	arg02, ##@LR__5449
04548     B0 09 B2 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     04 2B B2 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     A5 01 00 FF 
04570     C5 15 06 F6 | 	mov	arg02, ##@LR__5450
04574     84 09 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     DC 2A B2 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     C4 2A B2 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     90 2A B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     A5 01 00 FF 
045e4     C7 15 06 F6 | 	mov	arg02, ##@LR__5451
045e8     10 09 B2 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     DC 29 B2 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     54 3F B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     04 3C B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     B4 29 B2 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     2C 3F B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     10 37 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     CC 3B B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     78 29 B2 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     A5 01 00 FF 
0466c     C9 15 06 F6 | 	mov	arg02, ##@LR__5452
04670     88 08 B2 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     A5 01 00 FF 
04684     CB 15 06 F6 | 	mov	arg02, ##@LR__5453
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     6C 08 B2 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     A5 01 00 FF 
0469c     CD 15 06 F6 | 	mov	arg02, ##@LR__5454
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     54 08 B2 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     A5 01 00 FF 
046b4     D0 15 06 F6 | 	mov	arg02, ##@LR__5455
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     3C 08 B2 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     A5 01 00 FF 
046cc     D2 15 06 F6 | 	mov	arg02, ##@LR__5456
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     24 08 B2 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     A5 01 00 FF 
046e4     D5 15 06 F6 | 	mov	arg02, ##@LR__5457
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     0C 08 B2 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     A5 01 00 FF 
046fc     D7 15 06 F6 | 	mov	arg02, ##@LR__5458
04700     17 13 02 F6 | 	mov	arg01, local05
04704     F4 07 B2 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     A5 01 00 FF 
04714     D9 15 06 F6 | 	mov	arg02, ##@LR__5459
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     DC 07 B2 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     A5 01 00 FF 
0472c     DC 15 06 F6 | 	mov	arg02, ##@LR__5460
04730     17 13 02 F6 | 	mov	arg01, local05
04734     C4 07 B2 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     A5 01 00 FF 
04744     DE 15 06 F6 | 	mov	arg02, ##@LR__5461
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     AC 07 B2 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     A5 01 00 FF 
0475c     E1 15 06 F6 | 	mov	arg02, ##@LR__5462
04760     17 13 02 F6 | 	mov	arg01, local05
04764     94 07 B2 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     A5 01 00 FF 
04774     E3 15 06 F6 | 	mov	arg02, ##@LR__5463
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     7C 07 B2 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     A5 01 00 FF 
0478c     E6 15 06 F6 | 	mov	arg02, ##@LR__5464
04790     17 13 02 F6 | 	mov	arg01, local05
04794     64 07 B2 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     A5 01 00 FF 
047a4     E8 15 06 F6 | 	mov	arg02, ##@LR__5465
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     4C 07 B2 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     A5 01 00 FF 
048a4     EA 15 06 F6 | 	mov	arg02, ##@LR__5466
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     4C 06 B2 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     A5 01 00 FF 
048bc     EC 15 06 F6 | 	mov	arg02, ##@LR__5467
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     34 06 B2 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     A5 01 00 FF 
048d4     EE 15 06 F6 | 	mov	arg02, ##@LR__5468
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     1C 06 B2 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     A5 01 00 FF 
048ec     F0 15 06 F6 | 	mov	arg02, ##@LR__5469
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     04 06 B2 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     A5 01 00 FF 
04904     F2 15 06 F6 | 	mov	arg02, ##@LR__5470
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     EC 05 B2 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     A5 01 00 FF 
0491c     F4 15 06 F6 | 	mov	arg02, ##@LR__5471
04920     13 13 02 F6 | 	mov	arg01, local01
04924     D4 05 B2 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     A5 01 00 FF 
04934     F6 15 06 F6 | 	mov	arg02, ##@LR__5472
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     BC 05 B2 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     A5 01 00 FF 
0494c     F8 15 06 F6 | 	mov	arg02, ##@LR__5473
04950     13 13 02 F6 | 	mov	arg01, local01
04954     A4 05 B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     A5 01 00 FF 
04964     FA 15 06 F6 | 	mov	arg02, ##@LR__5474
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     8C 05 B2 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     A5 01 00 FF 
0497c     FC 15 06 F6 | 	mov	arg02, ##@LR__5475
04980     13 13 02 F6 | 	mov	arg01, local01
04984     74 05 B2 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     A5 01 00 FF 
04994     FE 15 06 F6 | 	mov	arg02, ##@LR__5476
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     5C 05 B2 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     A6 01 00 FF 
049ac     00 14 06 F6 | 	mov	arg02, ##@LR__5477
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     44 05 B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     A6 01 00 FF 
049c4     02 14 06 F6 | 	mov	arg02, ##@LR__5478
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     2C 05 B2 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     A6 01 00 FF 
049dc     04 14 06 F6 | 	mov	arg02, ##@LR__5479
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     14 05 B2 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     A6 01 00 FF 
049f4     06 14 06 F6 | 	mov	arg02, ##@LR__5480
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     FC 04 B2 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     A6 01 00 FF 
04aa4     0A 14 06 F6 | 	mov	arg02, ##@LR__5482
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     4C 04 B2 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     64 0C 90 AD |  if_e	jmp	#LR__0310
04ab8     A6 01 00 FF 
04abc     0F 14 06 F6 | 	mov	arg02, ##@LR__5483
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     34 04 B2 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     54 0C 90 AD |  if_e	jmp	#LR__0311
04ad0     A6 01 00 FF 
04ad4     12 14 06 F6 | 	mov	arg02, ##@LR__5484
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     1C 04 B2 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     44 0C 90 AD |  if_e	jmp	#LR__0312
04ae8     A6 01 00 FF 
04aec     17 14 06 F6 | 	mov	arg02, ##@LR__5485
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     04 04 B2 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     34 0C 90 AD |  if_e	jmp	#LR__0313
04b00     A6 01 00 FF 
04b04     1B 14 06 F6 | 	mov	arg02, ##@LR__5486
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     EC 03 B2 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     24 0C 90 AD |  if_e	jmp	#LR__0314
04b18     A6 01 00 FF 
04b1c     20 14 06 F6 | 	mov	arg02, ##@LR__5487
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     D4 03 B2 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     14 0C 90 AD |  if_e	jmp	#LR__0315
04b30     A6 01 00 FF 
04b34     24 14 06 F6 | 	mov	arg02, ##@LR__5488
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     BC 03 B2 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     04 0C 90 AD |  if_e	jmp	#LR__0316
04b48     A6 01 00 FF 
04b4c     27 14 06 F6 | 	mov	arg02, ##@LR__5489
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     A4 03 B2 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     F4 0B 90 AD |  if_e	jmp	#LR__0317
04b60     A6 01 00 FF 
04b64     32 14 06 F6 | 	mov	arg02, ##@LR__5490
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     8C 03 B2 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     E4 0B 90 AD |  if_e	jmp	#LR__0318
04b78     A6 01 00 FF 
04b7c     36 14 06 F6 | 	mov	arg02, ##@LR__5491
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     74 03 B2 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     D4 0B 90 AD |  if_e	jmp	#LR__0319
04b90     A6 01 00 FF 
04b94     40 14 06 F6 | 	mov	arg02, ##@LR__5492
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     5C 03 B2 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     C4 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     A6 01 00 FF 
04bac     44 14 06 F6 | 	mov	arg02, ##@LR__5493
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     44 03 B2 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     B4 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     A6 01 00 FF 
04bc4     4E 14 06 F6 | 	mov	arg02, ##@LR__5494
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     2C 03 B2 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     A4 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     A6 01 00 FF 
04bdc     52 14 06 F6 | 	mov	arg02, ##@LR__5495
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     14 03 B2 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     94 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     A6 01 00 FF 
04bf4     5D 14 06 F6 | 	mov	arg02, ##@LR__5496
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     FC 02 B2 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     84 0B 90 AD |  if_e	jmp	#LR__0324
04c08     A6 01 00 FF 
04c0c     61 14 06 F6 | 	mov	arg02, ##@LR__5497
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     E4 02 B2 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     74 0B 90 AD |  if_e	jmp	#LR__0325
04c20     A6 01 00 FF 
04c24     68 14 06 F6 | 	mov	arg02, ##@LR__5498
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     CC 02 B2 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     64 0B 90 AD |  if_e	jmp	#LR__0326
04c38     A6 01 00 FF 
04c3c     6C 14 06 F6 | 	mov	arg02, ##@LR__5499
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     B4 02 B2 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     54 0B 90 AD |  if_e	jmp	#LR__0327
04c50     A6 01 00 FF 
04c54     72 14 06 F6 | 	mov	arg02, ##@LR__5500
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     9C 02 B2 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     44 0B 90 AD |  if_e	jmp	#LR__0328
04c68     A6 01 00 FF 
04c6c     78 14 06 F6 | 	mov	arg02, ##@LR__5501
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     84 02 B2 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     34 0B 90 AD |  if_e	jmp	#LR__0329
04c80     A6 01 00 FF 
04c84     7C 14 06 F6 | 	mov	arg02, ##@LR__5502
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     6C 02 B2 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     24 0B 90 AD |  if_e	jmp	#LR__0330
04c98     A6 01 00 FF 
04c9c     82 14 06 F6 | 	mov	arg02, ##@LR__5503
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     54 02 B2 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     14 0B 90 AD |  if_e	jmp	#LR__0331
04cb0     A6 01 00 FF 
04cb4     85 14 06 F6 | 	mov	arg02, ##@LR__5504
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     3C 02 B2 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     04 0B 90 AD |  if_e	jmp	#LR__0332
04cc8     A6 01 00 FF 
04ccc     8B 14 06 F6 | 	mov	arg02, ##@LR__5505
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     24 02 B2 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     F4 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     A6 01 00 FF 
04ce4     8F 14 06 F6 | 	mov	arg02, ##@LR__5506
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     0C 02 B2 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     E4 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     A6 01 00 FF 
04cfc     96 14 06 F6 | 	mov	arg02, ##@LR__5507
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     F4 01 B2 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     D4 0A 90 AD |  if_e	jmp	#LR__0335
04d10     A6 01 00 FF 
04d14     9B 14 06 F6 | 	mov	arg02, ##@LR__5508
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     DC 01 B2 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     C4 0A 90 AD |  if_e	jmp	#LR__0336
04d28     A6 01 00 FF 
04d2c     A2 14 06 F6 | 	mov	arg02, ##@LR__5509
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     C4 01 B2 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     B4 0A 90 AD |  if_e	jmp	#LR__0337
04d40     A6 01 00 FF 
04d44     A9 14 06 F6 | 	mov	arg02, ##@LR__5510
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     AC 01 B2 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     A4 0A 90 AD |  if_e	jmp	#LR__0338
04d58     A6 01 00 FF 
04d5c     B3 14 06 F6 | 	mov	arg02, ##@LR__5511
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     94 01 B2 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     94 0A 90 AD |  if_e	jmp	#LR__0339
04d70     A6 01 00 FF 
04d74     B7 14 06 F6 | 	mov	arg02, ##@LR__5512
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     7C 01 B2 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     84 0A 90 AD |  if_e	jmp	#LR__0340
04d88     A6 01 00 FF 
04d8c     BB 14 06 F6 | 	mov	arg02, ##@LR__5513
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     64 01 B2 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     74 0A 90 AD |  if_e	jmp	#LR__0341
04da0     A6 01 00 FF 
04da4     C2 14 06 F6 | 	mov	arg02, ##@LR__5514
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     4C 01 B2 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     64 0A 90 AD |  if_e	jmp	#LR__0342
04db8     A6 01 00 FF 
04dbc     C6 14 06 F6 | 	mov	arg02, ##@LR__5515
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     34 01 B2 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     54 0A 90 AD |  if_e	jmp	#LR__0343
04dd0     A6 01 00 FF 
04dd4     CA 14 06 F6 | 	mov	arg02, ##@LR__5516
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     1C 01 B2 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     44 0A 90 AD |  if_e	jmp	#LR__0344
04de8     A6 01 00 FF 
04dec     D0 14 06 F6 | 	mov	arg02, ##@LR__5517
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     04 01 B2 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     34 0A 90 AD |  if_e	jmp	#LR__0345
04e00     A6 01 00 FF 
04e04     D5 14 06 F6 | 	mov	arg02, ##@LR__5518
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     EC 00 B2 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     24 0A 90 AD |  if_e	jmp	#LR__0346
04e18     A6 01 00 FF 
04e1c     DC 14 06 F6 | 	mov	arg02, ##@LR__5519
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     D4 00 B2 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     14 0A 90 AD |  if_e	jmp	#LR__0347
04e30     A6 01 00 FF 
04e34     E0 14 06 F6 | 	mov	arg02, ##@LR__5520
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     BC 00 B2 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     04 0A 90 AD |  if_e	jmp	#LR__0348
04e48     A6 01 00 FF 
04e4c     E5 14 06 F6 | 	mov	arg02, ##@LR__5521
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     A4 00 B2 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     F4 09 90 AD |  if_e	jmp	#LR__0349
04e60     A6 01 00 FF 
04e64     E9 14 06 F6 | 	mov	arg02, ##@LR__5522
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     8C 00 B2 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     E4 09 90 AD |  if_e	jmp	#LR__0350
04e78     A6 01 00 FF 
04e7c     EF 14 06 F6 | 	mov	arg02, ##@LR__5523
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     74 00 B2 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     D4 09 90 AD |  if_e	jmp	#LR__0351
04e90     A6 01 00 FF 
04e94     F2 14 06 F6 | 	mov	arg02, ##@LR__5524
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     5C 00 B2 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     C4 09 90 AD |  if_e	jmp	#LR__0352
04ea8     A6 01 00 FF 
04eac     FA 14 06 F6 | 	mov	arg02, ##@LR__5525
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     44 00 B2 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     B4 09 90 AD |  if_e	jmp	#LR__0353
04ec0     A6 01 00 FF 
04ec4     FE 14 06 F6 | 	mov	arg02, ##@LR__5526
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     2C 00 B2 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     A4 09 90 AD |  if_e	jmp	#LR__0354
04ed8     A6 01 00 FF 
04edc     03 15 06 F6 | 	mov	arg02, ##@LR__5527
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     14 00 B2 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     94 09 90 AD |  if_e	jmp	#LR__0355
04ef0     A6 01 00 FF 
04ef4     07 15 06 F6 | 	mov	arg02, ##@LR__5528
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     FC FF B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     84 09 90 AD |  if_e	jmp	#LR__0356
04f08     A6 01 00 FF 
04f0c     0C 15 06 F6 | 	mov	arg02, ##@LR__5529
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     E4 FF B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     74 09 90 AD |  if_e	jmp	#LR__0357
04f20     A6 01 00 FF 
04f24     10 15 06 F6 | 	mov	arg02, ##@LR__5530
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     CC FF B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     64 09 90 AD |  if_e	jmp	#LR__0358
04f38     A6 01 00 FF 
04f3c     13 15 06 F6 | 	mov	arg02, ##@LR__5531
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     B4 FF B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     54 09 90 AD |  if_e	jmp	#LR__0359
04f50     A6 01 00 FF 
04f54     19 15 06 F6 | 	mov	arg02, ##@LR__5532
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     9C FF B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     44 09 90 AD |  if_e	jmp	#LR__0360
04f68     A6 01 00 FF 
04f6c     1D 15 06 F6 | 	mov	arg02, ##@LR__5533
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     84 FF B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     34 09 90 AD |  if_e	jmp	#LR__0361
04f80     A6 01 00 FF 
04f84     21 15 06 F6 | 	mov	arg02, ##@LR__5534
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     6C FF B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     24 09 90 AD |  if_e	jmp	#LR__0362
04f98     A6 01 00 FF 
04f9c     27 15 06 F6 | 	mov	arg02, ##@LR__5535
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     54 FF B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     14 09 90 AD |  if_e	jmp	#LR__0363
04fb0     A6 01 00 FF 
04fb4     2C 15 06 F6 | 	mov	arg02, ##@LR__5536
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     3C FF B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     04 09 90 AD |  if_e	jmp	#LR__0364
04fc8     A6 01 00 FF 
04fcc     2F 15 06 F6 | 	mov	arg02, ##@LR__5537
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     24 FF B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     F4 08 90 AD |  if_e	jmp	#LR__0365
04fe0     A6 01 00 FF 
04fe4     32 15 06 F6 | 	mov	arg02, ##@LR__5538
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     0C FF B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     E4 08 90 AD |  if_e	jmp	#LR__0366
04ff8     A6 01 00 FF 
04ffc     36 15 06 F6 | 	mov	arg02, ##@LR__5539
05000     13 13 02 F6 | 	mov	arg01, local01
05004     F4 FE B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     D4 08 90 AD |  if_e	jmp	#LR__0367
05010     A6 01 00 FF 
05014     39 15 06 F6 | 	mov	arg02, ##@LR__5540
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     DC FE B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     C4 08 90 AD |  if_e	jmp	#LR__0368
05028     A6 01 00 FF 
0502c     3F 15 06 F6 | 	mov	arg02, ##@LR__5541
05030     13 13 02 F6 | 	mov	arg01, local01
05034     C4 FE B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     B4 08 90 AD |  if_e	jmp	#LR__0369
05040     A6 01 00 FF 
05044     44 15 06 F6 | 	mov	arg02, ##@LR__5542
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     AC FE B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     A4 08 90 AD |  if_e	jmp	#LR__0370
05058     A6 01 00 FF 
0505c     47 15 06 F6 | 	mov	arg02, ##@LR__5543
05060     13 13 02 F6 | 	mov	arg01, local01
05064     94 FE B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     94 08 90 AD |  if_e	jmp	#LR__0371
05070     A6 01 00 FF 
05074     4C 15 06 F6 | 	mov	arg02, ##@LR__5544
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     7C FE B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     84 08 90 AD |  if_e	jmp	#LR__0372
05088     A6 01 00 FF 
0508c     50 15 06 F6 | 	mov	arg02, ##@LR__5545
05090     13 13 02 F6 | 	mov	arg01, local01
05094     64 FE B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     74 08 90 AD |  if_e	jmp	#LR__0373
050a0     A6 01 00 FF 
050a4     56 15 06 F6 | 	mov	arg02, ##@LR__5546
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     4C FE B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     64 08 90 AD |  if_e	jmp	#LR__0374
050b8     A6 01 00 FF 
050bc     5C 15 06 F6 | 	mov	arg02, ##@LR__5547
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     34 FE B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     54 08 90 AD |  if_e	jmp	#LR__0375
050d0     A6 01 00 FF 
050d4     61 15 06 F6 | 	mov	arg02, ##@LR__5548
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     1C FE B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     44 08 90 AD |  if_e	jmp	#LR__0376
050e8     A6 01 00 FF 
050ec     64 15 06 F6 | 	mov	arg02, ##@LR__5549
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     04 FE B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     34 08 90 AD |  if_e	jmp	#LR__0377
05100     A6 01 00 FF 
05104     6A 15 06 F6 | 	mov	arg02, ##@LR__5550
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     EC FD B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     24 08 90 AD |  if_e	jmp	#LR__0378
05118     A6 01 00 FF 
0511c     6E 15 06 F6 | 	mov	arg02, ##@LR__5551
05120     13 13 02 F6 | 	mov	arg01, local01
05124     D4 FD B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     14 08 90 AD |  if_e	jmp	#LR__0379
05130     A6 01 00 FF 
05134     73 15 06 F6 | 	mov	arg02, ##@LR__5552
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     BC FD B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     04 08 90 AD |  if_e	jmp	#LR__0380
05148     A6 01 00 FF 
0514c     76 15 06 F6 | 	mov	arg02, ##@LR__5553
05150     13 13 02 F6 | 	mov	arg01, local01
05154     A4 FD B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     F4 07 90 AD |  if_e	jmp	#LR__0381
05160     A6 01 00 FF 
05164     79 15 06 F6 | 	mov	arg02, ##@LR__5554
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     8C FD B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     E4 07 90 AD |  if_e	jmp	#LR__0382
05178     A6 01 00 FF 
0517c     7E 15 06 F6 | 	mov	arg02, ##@LR__5555
05180     13 13 02 F6 | 	mov	arg01, local01
05184     74 FD B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     D4 07 90 AD |  if_e	jmp	#LR__0383
05190     A6 01 00 FF 
05194     84 15 06 F6 | 	mov	arg02, ##@LR__5556
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     5C FD B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     C4 07 90 AD |  if_e	jmp	#LR__0384
051a8     A6 01 00 FF 
051ac     88 15 06 F6 | 	mov	arg02, ##@LR__5557
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     44 FD B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     B4 07 90 AD |  if_e	jmp	#LR__0385
051c0     A6 01 00 FF 
051c4     91 15 06 F6 | 	mov	arg02, ##@LR__5558
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     2C FD B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     A4 07 90 AD |  if_e	jmp	#LR__0386
051d8     A6 01 00 FF 
051dc     97 15 06 F6 | 	mov	arg02, ##@LR__5559
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     14 FD B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     94 07 90 AD |  if_e	jmp	#LR__0387
051f0     A6 01 00 FF 
051f4     9D 15 06 F6 | 	mov	arg02, ##@LR__5560
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     FC FC B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     84 07 90 AD |  if_e	jmp	#LR__0388
05208     A6 01 00 FF 
0520c     A6 15 06 F6 | 	mov	arg02, ##@LR__5561
05210     13 13 02 F6 | 	mov	arg01, local01
05214     E4 FC B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     74 07 90 AD |  if_e	jmp	#LR__0389
05220     A6 01 00 FF 
05224     B0 15 06 F6 | 	mov	arg02, ##@LR__5562
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     CC FC B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     64 07 90 AD |  if_e	jmp	#LR__0390
05238     A6 01 00 FF 
0523c     B9 15 06 F6 | 	mov	arg02, ##@LR__5563
05240     13 13 02 F6 | 	mov	arg01, local01
05244     B4 FC B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     54 07 90 AD |  if_e	jmp	#LR__0391
05250     A6 01 00 FF 
05254     BE 15 06 F6 | 	mov	arg02, ##@LR__5564
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     9C FC B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     44 07 90 AD |  if_e	jmp	#LR__0392
05268     A6 01 00 FF 
0526c     C1 15 06 F6 | 	mov	arg02, ##@LR__5565
05270     13 13 02 F6 | 	mov	arg01, local01
05274     84 FC B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     34 07 90 AD |  if_e	jmp	#LR__0393
05280     A6 01 00 FF 
05284     C6 15 06 F6 | 	mov	arg02, ##@LR__5566
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     6C FC B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     24 07 90 AD |  if_e	jmp	#LR__0394
05298     A6 01 00 FF 
0529c     CA 15 06 F6 | 	mov	arg02, ##@LR__5567
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     54 FC B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     14 07 90 AD |  if_e	jmp	#LR__0395
052b0     A6 01 00 FF 
052b4     CF 15 06 F6 | 	mov	arg02, ##@LR__5568
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     3C FC B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     04 07 90 AD |  if_e	jmp	#LR__0396
052c8     A6 01 00 FF 
052cc     D3 15 06 F6 | 	mov	arg02, ##@LR__5569
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     24 FC B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     F4 06 90 AD |  if_e	jmp	#LR__0397
052e0     A6 01 00 FF 
052e4     DC 15 06 F6 | 	mov	arg02, ##@LR__5570
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     0C FC B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     E4 06 90 AD |  if_e	jmp	#LR__0398
052f8     A6 01 00 FF 
052fc     E1 15 06 F6 | 	mov	arg02, ##@LR__5571
05300     13 13 02 F6 | 	mov	arg01, local01
05304     F4 FB B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     D4 06 90 AD |  if_e	jmp	#LR__0399
05310     A6 01 00 FF 
05314     E7 15 06 F6 | 	mov	arg02, ##@LR__5572
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     DC FB B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     C4 06 90 AD |  if_e	jmp	#LR__0400
05328     A6 01 00 FF 
0532c     E9 15 06 F6 | 	mov	arg02, ##@LR__5573
05330     13 13 02 F6 | 	mov	arg01, local01
05334     C4 FB B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     B4 06 90 AD |  if_e	jmp	#LR__0401
05340     A6 01 00 FF 
05344     ED 15 06 F6 | 	mov	arg02, ##@LR__5574
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     AC FB B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     A4 06 90 AD |  if_e	jmp	#LR__0402
05358     A6 01 00 FF 
0535c     F1 15 06 F6 | 	mov	arg02, ##@LR__5575
05360     13 13 02 F6 | 	mov	arg01, local01
05364     94 FB B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     94 06 90 AD |  if_e	jmp	#LR__0403
05370     A6 01 00 FF 
05374     F6 15 06 F6 | 	mov	arg02, ##@LR__5576
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     7C FB B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     84 06 90 AD |  if_e	jmp	#LR__0404
05388     A6 01 00 FF 
0538c     FE 15 06 F6 | 	mov	arg02, ##@LR__5577
05390     13 13 02 F6 | 	mov	arg01, local01
05394     64 FB B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     74 06 90 AD |  if_e	jmp	#LR__0405
053a0     A7 01 00 FF 
053a4     02 14 06 F6 | 	mov	arg02, ##@LR__5578
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     4C FB B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     64 06 90 AD |  if_e	jmp	#LR__0406
053b8     A7 01 00 FF 
053bc     04 14 06 F6 | 	mov	arg02, ##@LR__5579
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     34 FB B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     54 06 90 AD |  if_e	jmp	#LR__0407
053d0     A7 01 00 FF 
053d4     0C 14 06 F6 | 	mov	arg02, ##@LR__5580
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     1C FB B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     44 06 90 AD |  if_e	jmp	#LR__0408
053e8     A7 01 00 FF 
053ec     13 14 06 F6 | 	mov	arg02, ##@LR__5581
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     04 FB B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     34 06 90 AD |  if_e	jmp	#LR__0409
05400     A7 01 00 FF 
05404     17 14 06 F6 | 	mov	arg02, ##@LR__5582
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     EC FA B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     24 06 90 AD |  if_e	jmp	#LR__0410
05418     A7 01 00 FF 
0541c     1C 14 06 F6 | 	mov	arg02, ##@LR__5583
05420     13 13 02 F6 | 	mov	arg01, local01
05424     D4 FA B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     14 06 90 AD |  if_e	jmp	#LR__0411
05430     A7 01 00 FF 
05434     1F 14 06 F6 | 	mov	arg02, ##@LR__5584
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     BC FA B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     04 06 90 AD |  if_e	jmp	#LR__0412
05448     A7 01 00 FF 
0544c     28 14 06 F6 | 	mov	arg02, ##@LR__5585
05450     13 13 02 F6 | 	mov	arg01, local01
05454     A4 FA B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     F4 05 90 AD |  if_e	jmp	#LR__0413
05460     A7 01 00 FF 
05464     2C 14 06 F6 | 	mov	arg02, ##@LR__5586
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     8C FA B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     E4 05 90 AD |  if_e	jmp	#LR__0414
05478     A7 01 00 FF 
0547c     33 14 06 F6 | 	mov	arg02, ##@LR__5587
05480     13 13 02 F6 | 	mov	arg01, local01
05484     74 FA B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     D4 05 90 AD |  if_e	jmp	#LR__0415
05490     A7 01 00 FF 
05494     37 14 06 F6 | 	mov	arg02, ##@LR__5588
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     5C FA B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     C4 05 90 AD |  if_e	jmp	#LR__0416
054a8     A7 01 00 FF 
054ac     3E 14 06 F6 | 	mov	arg02, ##@LR__5589
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     44 FA B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     B4 05 90 AD |  if_e	jmp	#LR__0417
054c0     A7 01 00 FF 
054c4     42 14 06 F6 | 	mov	arg02, ##@LR__5590
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     2C FA B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     A4 05 90 AD |  if_e	jmp	#LR__0418
054d8     A7 01 00 FF 
054dc     49 14 06 F6 | 	mov	arg02, ##@LR__5591
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     14 FA B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     94 05 90 AD |  if_e	jmp	#LR__0419
054f0     A7 01 00 FF 
054f4     4D 14 06 F6 | 	mov	arg02, ##@LR__5592
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     FC F9 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     84 05 90 AD |  if_e	jmp	#LR__0420
05508     A7 01 00 FF 
0550c     58 14 06 F6 | 	mov	arg02, ##@LR__5593
05510     13 13 02 F6 | 	mov	arg01, local01
05514     E4 F9 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     74 05 90 AD |  if_e	jmp	#LR__0421
05520     A7 01 00 FF 
05524     5C 14 06 F6 | 	mov	arg02, ##@LR__5594
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     CC F9 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     64 05 90 AD |  if_e	jmp	#LR__0422
05538     A7 01 00 FF 
0553c     63 14 06 F6 | 	mov	arg02, ##@LR__5595
05540     13 13 02 F6 | 	mov	arg01, local01
05544     B4 F9 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     54 05 90 AD |  if_e	jmp	#LR__0423
05550     A7 01 00 FF 
05554     67 14 06 F6 | 	mov	arg02, ##@LR__5596
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     9C F9 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     44 05 90 AD |  if_e	jmp	#LR__0424
05568     A7 01 00 FF 
0556c     6F 14 06 F6 | 	mov	arg02, ##@LR__5597
05570     13 13 02 F6 | 	mov	arg01, local01
05574     84 F9 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     34 05 90 AD |  if_e	jmp	#LR__0425
05580     A7 01 00 FF 
05584     73 14 06 F6 | 	mov	arg02, ##@LR__5598
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     6C F9 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     24 05 90 AD |  if_e	jmp	#LR__0426
05598     A7 01 00 FF 
0559c     7A 14 06 F6 | 	mov	arg02, ##@LR__5599
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     54 F9 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     14 05 90 AD |  if_e	jmp	#LR__0427
055b0     A7 01 00 FF 
055b4     81 14 06 F6 | 	mov	arg02, ##@LR__5600
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     3C F9 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     04 05 90 AD |  if_e	jmp	#LR__0428
055c8     A7 01 00 FF 
055cc     85 14 06 F6 | 	mov	arg02, ##@LR__5601
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     24 F9 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     F4 04 90 AD |  if_e	jmp	#LR__0429
055e0     A7 01 00 FF 
055e4     8B 14 06 F6 | 	mov	arg02, ##@LR__5602
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     0C F9 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     E4 04 90 AD |  if_e	jmp	#LR__0430
055f8     A7 01 00 FF 
055fc     8F 14 06 F6 | 	mov	arg02, ##@LR__5603
05600     13 13 02 F6 | 	mov	arg01, local01
05604     F4 F8 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     D4 04 90 AD |  if_e	jmp	#LR__0431
05610     A7 01 00 FF 
05614     96 14 06 F6 | 	mov	arg02, ##@LR__5604
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     DC F8 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     C4 04 90 AD |  if_e	jmp	#LR__0432
05628     A7 01 00 FF 
0562c     9B 14 06 F6 | 	mov	arg02, ##@LR__5605
05630     13 13 02 F6 | 	mov	arg01, local01
05634     C4 F8 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     B4 04 90 AD |  if_e	jmp	#LR__0433
05640     A7 01 00 FF 
05644     A0 14 06 F6 | 	mov	arg02, ##@LR__5606
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     AC F8 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     A4 04 90 AD |  if_e	jmp	#LR__0434
05658     A7 01 00 FF 
0565c     A7 14 06 F6 | 	mov	arg02, ##@LR__5607
05660     13 13 02 F6 | 	mov	arg01, local01
05664     94 F8 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     94 04 90 AD |  if_e	jmp	#LR__0435
05670     A7 01 00 FF 
05674     AA 14 06 F6 | 	mov	arg02, ##@LR__5608
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     7C F8 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     84 04 90 AD |  if_e	jmp	#LR__0436
05688     A7 01 00 FF 
0568c     B4 14 06 F6 | 	mov	arg02, ##@LR__5609
05690     13 13 02 F6 | 	mov	arg01, local01
05694     64 F8 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     74 04 90 AD |  if_e	jmp	#LR__0437
056a0     A7 01 00 FF 
056a4     B8 14 06 F6 | 	mov	arg02, ##@LR__5610
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     4C F8 B1 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     64 04 90 AD |  if_e	jmp	#LR__0438
056b8     A7 01 00 FF 
056bc     C0 14 06 F6 | 	mov	arg02, ##@LR__5611
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     34 F8 B1 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     54 04 90 AD |  if_e	jmp	#LR__0439
056d0     A7 01 00 FF 
056d4     C4 14 06 F6 | 	mov	arg02, ##@LR__5612
056d8     13 13 02 F6 | 	mov	arg01, local01
056dc     1C F8 B1 FD | 	call	#__system___string_cmp
056e0     00 FA 0D F2 | 	cmp	result1, #0 wz
056e4     44 04 90 AD |  if_e	jmp	#LR__0440
056e8     A7 01 00 FF 
056ec     CA 14 06 F6 | 	mov	arg02, ##@LR__5613
056f0     13 13 02 F6 | 	mov	arg01, local01
056f4     04 F8 B1 FD | 	call	#__system___string_cmp
056f8     00 FA 0D F2 | 	cmp	result1, #0 wz
056fc     34 04 90 AD |  if_e	jmp	#LR__0441
05700     A7 01 00 FF 
05704     D0 14 06 F6 | 	mov	arg02, ##@LR__5614
05708     13 13 02 F6 | 	mov	arg01, local01
0570c     EC F7 B1 FD | 	call	#__system___string_cmp
05710     00 FA 0D F2 | 	cmp	result1, #0 wz
05714     24 04 90 AD |  if_e	jmp	#LR__0442
05718     28 04 90 FD | 	jmp	#LR__0443
0571c                 | LR__0310
0571c     5C FA 05 F6 | 	mov	result1, #92
05720     24 04 90 FD | 	jmp	#LR__0444
05724                 | LR__0311
05724     5C FA 05 F6 | 	mov	result1, #92
05728     1C 04 90 FD | 	jmp	#LR__0444
0572c                 | LR__0312
0572c     B9 FA 05 F6 | 	mov	result1, #185
05730     14 04 90 FD | 	jmp	#LR__0444
05734                 | LR__0313
05734     47 FA 05 F6 | 	mov	result1, #71
05738     0C 04 90 FD | 	jmp	#LR__0444
0573c                 | LR__0314
0573c     59 FA 05 F6 | 	mov	result1, #89
05740     04 04 90 FD | 	jmp	#LR__0444
05744                 | LR__0315
05744     59 FA 05 F6 | 	mov	result1, #89
05748     FC 03 90 FD | 	jmp	#LR__0444
0574c                 | LR__0316
0574c     C3 FA 05 F6 | 	mov	result1, #195
05750     F4 03 90 FD | 	jmp	#LR__0444
05754                 | LR__0317
05754     AE FA 05 F6 | 	mov	result1, #174
05758     EC 03 90 FD | 	jmp	#LR__0444
0575c                 | LR__0318
0575c     AE FA 05 F6 | 	mov	result1, #174
05760     E4 03 90 FD | 	jmp	#LR__0444
05764                 | LR__0319
05764     B1 FA 05 F6 | 	mov	result1, #177
05768     DC 03 90 FD | 	jmp	#LR__0444
0576c                 | LR__0320
0576c     B1 FA 05 F6 | 	mov	result1, #177
05770     D4 03 90 FD | 	jmp	#LR__0444
05774                 | LR__0321
05774     AF FA 05 F6 | 	mov	result1, #175
05778     CC 03 90 FD | 	jmp	#LR__0444
0577c                 | LR__0322
0577c     AF FA 05 F6 | 	mov	result1, #175
05780     C4 03 90 FD | 	jmp	#LR__0444
05784                 | LR__0323
05784     B0 FA 05 F6 | 	mov	result1, #176
05788     BC 03 90 FD | 	jmp	#LR__0444
0578c                 | LR__0324
0578c     B0 FA 05 F6 | 	mov	result1, #176
05790     B4 03 90 FD | 	jmp	#LR__0444
05794                 | LR__0325
05794     45 FA 05 F6 | 	mov	result1, #69
05798     AC 03 90 FD | 	jmp	#LR__0444
0579c                 | LR__0326
0579c     45 FA 05 F6 | 	mov	result1, #69
057a0     A4 03 90 FD | 	jmp	#LR__0444
057a4                 | LR__0327
057a4     69 FA 05 F6 | 	mov	result1, #105
057a8     9C 03 90 FD | 	jmp	#LR__0444
057ac                 | LR__0328
057ac     B4 FA 05 F6 | 	mov	result1, #180
057b0     94 03 90 FD | 	jmp	#LR__0444
057b4                 | LR__0329
057b4     40 FA 05 F6 | 	mov	result1, #64
057b8     8C 03 90 FD | 	jmp	#LR__0444
057bc                 | LR__0330
057bc     49 FA 05 F6 | 	mov	result1, #73
057c0     84 03 90 FD | 	jmp	#LR__0444
057c4                 | LR__0331
057c4     49 FA 05 F6 | 	mov	result1, #73
057c8     7C 03 90 FD | 	jmp	#LR__0444
057cc                 | LR__0332
057cc     50 FA 05 F6 | 	mov	result1, #80
057d0     74 03 90 FD | 	jmp	#LR__0444
057d4                 | LR__0333
057d4     50 FA 05 F6 | 	mov	result1, #80
057d8     6C 03 90 FD | 	jmp	#LR__0444
057dc                 | LR__0334
057dc     68 FA 05 F6 | 	mov	result1, #104
057e0     64 03 90 FD | 	jmp	#LR__0444
057e4                 | LR__0335
057e4     B7 FA 05 F6 | 	mov	result1, #183
057e8     5C 03 90 FD | 	jmp	#LR__0444
057ec                 | LR__0336
057ec     73 FA 05 F6 | 	mov	result1, #115
057f0     54 03 90 FD | 	jmp	#LR__0444
057f4                 | LR__0337
057f4     74 FA 05 F6 | 	mov	result1, #116
057f8     4C 03 90 FD | 	jmp	#LR__0444
057fc                 | LR__0338
057fc     6C FA 05 F6 | 	mov	result1, #108
05800     44 03 90 FD | 	jmp	#LR__0444
05804                 | LR__0339
05804     6C FA 05 F6 | 	mov	result1, #108
05808     3C 03 90 FD | 	jmp	#LR__0444
0580c                 | LR__0340
0580c     89 FA 05 F6 | 	mov	result1, #137
05810     34 03 90 FD | 	jmp	#LR__0444
05814                 | LR__0341
05814     C2 FA 05 F6 | 	mov	result1, #194
05818     2C 03 90 FD | 	jmp	#LR__0444
0581c                 | LR__0342
0581c     72 FA 05 F6 | 	mov	result1, #114
05820     24 03 90 FD | 	jmp	#LR__0444
05824                 | LR__0343
05824     5D FA 05 F6 | 	mov	result1, #93
05828     1C 03 90 FD | 	jmp	#LR__0444
0582c                 | LR__0344
0582c     96 FA 05 F6 | 	mov	result1, #150
05830     14 03 90 FD | 	jmp	#LR__0444
05834                 | LR__0345
05834     43 FA 05 F6 | 	mov	result1, #67
05838     0C 03 90 FD | 	jmp	#LR__0444
0583c                 | LR__0346
0583c     43 FA 05 F6 | 	mov	result1, #67
05840     04 03 90 FD | 	jmp	#LR__0444
05844                 | LR__0347
05844     43 FA 05 F6 | 	mov	result1, #67
05848     FC 02 90 FD | 	jmp	#LR__0444
0584c                 | LR__0348
0584c     5A FA 05 F6 | 	mov	result1, #90
05850     F4 02 90 FD | 	jmp	#LR__0444
05854                 | LR__0349
05854     AB FA 05 F6 | 	mov	result1, #171
05858     EC 02 90 FD | 	jmp	#LR__0444
0585c                 | LR__0350
0585c     BD FA 05 F6 | 	mov	result1, #189
05860     E4 02 90 FD | 	jmp	#LR__0444
05864                 | LR__0351
05864     BD FA 05 F6 | 	mov	result1, #189
05868     DC 02 90 FD | 	jmp	#LR__0444
0586c                 | LR__0352
0586c     46 FA 05 F6 | 	mov	result1, #70
05870     D4 02 90 FD | 	jmp	#LR__0444
05874                 | LR__0353
05874     46 FA 05 F6 | 	mov	result1, #70
05878     CC 02 90 FD | 	jmp	#LR__0444
0587c                 | LR__0354
0587c     71 FA 05 F6 | 	mov	result1, #113
05880     C4 02 90 FD | 	jmp	#LR__0444
05884                 | LR__0355
05884     71 FA 05 F6 | 	mov	result1, #113
05888     BC 02 90 FD | 	jmp	#LR__0444
0588c                 | LR__0356
0588c     60 FA 05 F6 | 	mov	result1, #96
05890     B4 02 90 FD | 	jmp	#LR__0444
05894                 | LR__0357
05894     4A FA 05 F6 | 	mov	result1, #74
05898     AC 02 90 FD | 	jmp	#LR__0444
0589c                 | LR__0358
0589c     4A FA 05 F6 | 	mov	result1, #74
058a0     A4 02 90 FD | 	jmp	#LR__0444
058a4                 | LR__0359
058a4     48 FA 05 F6 | 	mov	result1, #72
058a8     9C 02 90 FD | 	jmp	#LR__0444
058ac                 | LR__0360
058ac     48 FA 05 F6 | 	mov	result1, #72
058b0     94 02 90 FD | 	jmp	#LR__0444
058b4                 | LR__0361
058b4     BB FA 05 F6 | 	mov	result1, #187
058b8     8C 02 90 FD | 	jmp	#LR__0444
058bc                 | LR__0362
058bc     A9 FA 05 F6 | 	mov	result1, #169
058c0     84 02 90 FD | 	jmp	#LR__0444
058c4                 | LR__0363
058c4     4E FA 05 F6 | 	mov	result1, #78
058c8     7C 02 90 FD | 	jmp	#LR__0444
058cc                 | LR__0364
058cc     4E FA 05 F6 | 	mov	result1, #78
058d0     74 02 90 FD | 	jmp	#LR__0444
058d4                 | LR__0365
058d4     58 FA 05 F6 | 	mov	result1, #88
058d8     6C 02 90 FD | 	jmp	#LR__0444
058dc                 | LR__0366
058dc     5F FA 05 F6 | 	mov	result1, #95
058e0     64 02 90 FD | 	jmp	#LR__0444
058e4                 | LR__0367
058e4     5F FA 05 F6 | 	mov	result1, #95
058e8     5C 02 90 FD | 	jmp	#LR__0444
058ec                 | LR__0368
058ec     B5 FA 05 F6 | 	mov	result1, #181
058f0     54 02 90 FD | 	jmp	#LR__0444
058f4                 | LR__0369
058f4     4C FA 05 F6 | 	mov	result1, #76
058f8     4C 02 90 FD | 	jmp	#LR__0444
058fc                 | LR__0370
058fc     4C FA 05 F6 | 	mov	result1, #76
05900     44 02 90 FD | 	jmp	#LR__0444
05904                 | LR__0371
05904     52 FA 05 F6 | 	mov	result1, #82
05908     3C 02 90 FD | 	jmp	#LR__0444
0590c                 | LR__0372
0590c     52 FA 05 F6 | 	mov	result1, #82
05910     34 02 90 FD | 	jmp	#LR__0444
05914                 | LR__0373
05914     97 FA 05 F6 | 	mov	result1, #151
05918     2C 02 90 FD | 	jmp	#LR__0444
0591c                 | LR__0374
0591c     C6 FA 05 F6 | 	mov	result1, #198
05920     24 02 90 FD | 	jmp	#LR__0444
05924                 | LR__0375
05924     61 FA 05 F6 | 	mov	result1, #97
05928     1C 02 90 FD | 	jmp	#LR__0444
0592c                 | LR__0376
0592c     61 FA 05 F6 | 	mov	result1, #97
05930     14 02 90 FD | 	jmp	#LR__0444
05934                 | LR__0377
05934     63 FA 05 F6 | 	mov	result1, #99
05938     0C 02 90 FD | 	jmp	#LR__0444
0593c                 | LR__0378
0593c     41 FA 05 F6 | 	mov	result1, #65
05940     04 02 90 FD | 	jmp	#LR__0444
05944                 | LR__0379
05944     4B FA 05 F6 | 	mov	result1, #75
05948     FC 01 90 FD | 	jmp	#LR__0444
0594c                 | LR__0380
0594c     4B FA 05 F6 | 	mov	result1, #75
05950     F4 01 90 FD | 	jmp	#LR__0444
05954                 | LR__0381
05954     C1 FA 05 F6 | 	mov	result1, #193
05958     EC 01 90 FD | 	jmp	#LR__0444
0595c                 | LR__0382
0595c     B3 FA 05 F6 | 	mov	result1, #179
05960     E4 01 90 FD | 	jmp	#LR__0444
05964                 | LR__0383
05964     5E FA 05 F6 | 	mov	result1, #94
05968     DC 01 90 FD | 	jmp	#LR__0444
0596c                 | LR__0384
0596c     5E FA 05 F6 | 	mov	result1, #94
05970     D4 01 90 FD | 	jmp	#LR__0444
05974                 | LR__0385
05974     7C FA 05 F6 | 	mov	result1, #124
05978     CC 01 90 FD | 	jmp	#LR__0444
0597c                 | LR__0386
0597c     7E FA 05 F6 | 	mov	result1, #126
05980     C4 01 90 FD | 	jmp	#LR__0444
05984                 | LR__0387
05984     7D FA 05 F6 | 	mov	result1, #125
05988     BC 01 90 FD | 	jmp	#LR__0444
0598c                 | LR__0388
0598c     7F FA 05 F6 | 	mov	result1, #127
05990     B4 01 90 FD | 	jmp	#LR__0444
05994                 | LR__0389
05994     80 FA 05 F6 | 	mov	result1, #128
05998     AC 01 90 FD | 	jmp	#LR__0444
0599c                 | LR__0390
0599c     55 FA 05 F6 | 	mov	result1, #85
059a0     A4 01 90 FD | 	jmp	#LR__0444
059a4                 | LR__0391
059a4     75 FA 05 F6 | 	mov	result1, #117
059a8     9C 01 90 FD | 	jmp	#LR__0444
059ac                 | LR__0392
059ac     75 FA 05 F6 | 	mov	result1, #117
059b0     94 01 90 FD | 	jmp	#LR__0444
059b4                 | LR__0393
059b4     42 FA 05 F6 | 	mov	result1, #66
059b8     8C 01 90 FD | 	jmp	#LR__0444
059bc                 | LR__0394
059bc     42 FA 05 F6 | 	mov	result1, #66
059c0     84 01 90 FD | 	jmp	#LR__0444
059c4                 | LR__0395
059c4     95 FA 05 F6 | 	mov	result1, #149
059c8     7C 01 90 FD | 	jmp	#LR__0444
059cc                 | LR__0396
059cc     AC FA 05 F6 | 	mov	result1, #172
059d0     74 01 90 FD | 	jmp	#LR__0444
059d4                 | LR__0397
059d4     81 FA 05 F6 | 	mov	result1, #129
059d8     6C 01 90 FD | 	jmp	#LR__0444
059dc                 | LR__0398
059dc     81 FA 05 F6 | 	mov	result1, #129
059e0     64 01 90 FD | 	jmp	#LR__0444
059e4                 | LR__0399
059e4     44 FA 05 F6 | 	mov	result1, #68
059e8     5C 01 90 FD | 	jmp	#LR__0444
059ec                 | LR__0400
059ec     44 FA 05 F6 | 	mov	result1, #68
059f0     54 01 90 FD | 	jmp	#LR__0444
059f4                 | LR__0401
059f4     BC FA 05 F6 | 	mov	result1, #188
059f8     4C 01 90 FD | 	jmp	#LR__0444
059fc                 | LR__0402
059fc     88 FA 05 F6 | 	mov	result1, #136
05a00     44 01 90 FD | 	jmp	#LR__0444
05a04                 | LR__0403
05a04     B6 FA 05 F6 | 	mov	result1, #182
05a08     3C 01 90 FD | 	jmp	#LR__0444
05a0c                 | LR__0404
05a0c     92 FA 05 F6 | 	mov	result1, #146
05a10     34 01 90 FD | 	jmp	#LR__0444
05a14                 | LR__0405
05a14     BE FA 05 F6 | 	mov	result1, #190
05a18     2C 01 90 FD | 	jmp	#LR__0444
05a1c                 | LR__0406
05a1c     BE FA 05 F6 | 	mov	result1, #190
05a20     24 01 90 FD | 	jmp	#LR__0444
05a24                 | LR__0407
05a24     C7 FA 05 F6 | 	mov	result1, #199
05a28     1C 01 90 FD | 	jmp	#LR__0444
05a2c                 | LR__0408
05a2c     AA FA 05 F6 | 	mov	result1, #170
05a30     14 01 90 FD | 	jmp	#LR__0444
05a34                 | LR__0409
05a34     4D FA 05 F6 | 	mov	result1, #77
05a38     0C 01 90 FD | 	jmp	#LR__0444
05a3c                 | LR__0410
05a3c     51 FA 05 F6 | 	mov	result1, #81
05a40     04 01 90 FD | 	jmp	#LR__0444
05a44                 | LR__0411
05a44     51 FA 05 F6 | 	mov	result1, #81
05a48     FC 00 90 FD | 	jmp	#LR__0444
05a4c                 | LR__0412
05a4c     8E FA 05 F6 | 	mov	result1, #142
05a50     F4 00 90 FD | 	jmp	#LR__0444
05a54                 | LR__0413
05a54     8E FA 05 F6 | 	mov	result1, #142
05a58     EC 00 90 FD | 	jmp	#LR__0444
05a5c                 | LR__0414
05a5c     90 FA 05 F6 | 	mov	result1, #144
05a60     E4 00 90 FD | 	jmp	#LR__0444
05a64                 | LR__0415
05a64     90 FA 05 F6 | 	mov	result1, #144
05a68     DC 00 90 FD | 	jmp	#LR__0444
05a6c                 | LR__0416
05a6c     8D FA 05 F6 | 	mov	result1, #141
05a70     D4 00 90 FD | 	jmp	#LR__0444
05a74                 | LR__0417
05a74     8D FA 05 F6 | 	mov	result1, #141
05a78     CC 00 90 FD | 	jmp	#LR__0444
05a7c                 | LR__0418
05a7c     8C FA 05 F6 | 	mov	result1, #140
05a80     C4 00 90 FD | 	jmp	#LR__0444
05a84                 | LR__0419
05a84     8C FA 05 F6 | 	mov	result1, #140
05a88     BC 00 90 FD | 	jmp	#LR__0444
05a8c                 | LR__0420
05a8c     91 FA 05 F6 | 	mov	result1, #145
05a90     B4 00 90 FD | 	jmp	#LR__0444
05a94                 | LR__0421
05a94     91 FA 05 F6 | 	mov	result1, #145
05a98     AC 00 90 FD | 	jmp	#LR__0444
05a9c                 | LR__0422
05a9c     8B FA 05 F6 | 	mov	result1, #139
05aa0     A4 00 90 FD | 	jmp	#LR__0444
05aa4                 | LR__0423
05aa4     8B FA 05 F6 | 	mov	result1, #139
05aa8     9C 00 90 FD | 	jmp	#LR__0444
05aac                 | LR__0424
05aac     8F FA 05 F6 | 	mov	result1, #143
05ab0     94 00 90 FD | 	jmp	#LR__0444
05ab4                 | LR__0425
05ab4     8F FA 05 F6 | 	mov	result1, #143
05ab8     8C 00 90 FD | 	jmp	#LR__0444
05abc                 | LR__0426
05abc     8F FA 05 F6 | 	mov	result1, #143
05ac0     84 00 90 FD | 	jmp	#LR__0444
05ac4                 | LR__0427
05ac4     B2 FA 05 F6 | 	mov	result1, #178
05ac8     7C 00 90 FD | 	jmp	#LR__0444
05acc                 | LR__0428
05acc     B2 FA 05 F6 | 	mov	result1, #178
05ad0     74 00 90 FD | 	jmp	#LR__0444
05ad4                 | LR__0429
05ad4     75 FA 05 F6 | 	mov	result1, #117
05ad8     6C 00 90 FD | 	jmp	#LR__0444
05adc                 | LR__0430
05adc     75 FA 05 F6 | 	mov	result1, #117
05ae0     64 00 90 FD | 	jmp	#LR__0444
05ae4                 | LR__0431
05ae4     6D FA 05 F6 | 	mov	result1, #109
05ae8     5C 00 90 FD | 	jmp	#LR__0444
05aec                 | LR__0432
05aec     6D FA 05 F6 | 	mov	result1, #109
05af0     54 00 90 FD | 	jmp	#LR__0444
05af4                 | LR__0433
05af4     5B FA 05 F6 | 	mov	result1, #91
05af8     4C 00 90 FD | 	jmp	#LR__0444
05afc                 | LR__0434
05afc     56 FA 05 F6 | 	mov	result1, #86
05b00     44 00 90 FD | 	jmp	#LR__0444
05b04                 | LR__0435
05b04     56 FA 05 F6 | 	mov	result1, #86
05b08     3C 00 90 FD | 	jmp	#LR__0444
05b0c                 | LR__0436
05b0c     70 FA 05 F6 | 	mov	result1, #112
05b10     34 00 90 FD | 	jmp	#LR__0444
05b14                 | LR__0437
05b14     70 FA 05 F6 | 	mov	result1, #112
05b18     2C 00 90 FD | 	jmp	#LR__0444
05b1c                 | LR__0438
05b1c     57 FA 05 F6 | 	mov	result1, #87
05b20     24 00 90 FD | 	jmp	#LR__0444
05b24                 | LR__0439
05b24     57 FA 05 F6 | 	mov	result1, #87
05b28     1C 00 90 FD | 	jmp	#LR__0444
05b2c                 | LR__0440
05b2c     79 FA 05 F6 | 	mov	result1, #121
05b30     14 00 90 FD | 	jmp	#LR__0444
05b34                 | LR__0441
05b34     77 FA 05 F6 | 	mov	result1, #119
05b38     0C 00 90 FD | 	jmp	#LR__0444
05b3c                 | LR__0442
05b3c     78 FA 05 F6 | 	mov	result1, #120
05b40     04 00 90 FD | 	jmp	#LR__0444
05b44                 | LR__0443
05b44     00 FA 05 F6 | 	mov	result1, #0
05b48                 | LR__0444
05b48     A7 F0 03 F6 | 	mov	ptra, fp
05b4c     B2 00 A0 FD | 	call	#popregs_
05b50                 | _iscommand_ret
05b50     2D 00 64 FD | 	ret
05b54                 | 
05b54                 | ' 
05b54                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05b54                 | ' 
05b54                 | ' function isfunction(s as string) as ubyte
05b54                 | _isfunction
05b54     01 4A 05 F6 | 	mov	COUNT_, #1
05b58     A8 00 A0 FD | 	call	#pushregs_
05b5c                 | ' 
05b5c                 | ' select case s
05b5c     09 27 02 F6 | 	mov	local01, arg01
05b60     A7 01 00 FF 
05b64     D6 14 06 F6 | 	mov	arg02, ##@LR__5615
05b68     13 13 02 F6 | 	mov	arg01, local01
05b6c     8C F3 B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     3C 04 90 AD |  if_e	jmp	#LR__0450
05b78     A7 01 00 FF 
05b7c     DA 14 06 F6 | 	mov	arg02, ##@LR__5616
05b80     13 13 02 F6 | 	mov	arg01, local01
05b84     74 F3 B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     2C 04 90 AD |  if_e	jmp	#LR__0451
05b90     A7 01 00 FF 
05b94     DF 14 06 F6 | 	mov	arg02, ##@LR__5617
05b98     13 13 02 F6 | 	mov	arg01, local01
05b9c     5C F3 B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     1C 04 90 AD |  if_e	jmp	#LR__0452
05ba8     A7 01 00 FF 
05bac     E3 14 06 F6 | 	mov	arg02, ##@LR__5618
05bb0     13 13 02 F6 | 	mov	arg01, local01
05bb4     44 F3 B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     0C 04 90 AD |  if_e	jmp	#LR__0453
05bc0     A7 01 00 FF 
05bc4     E8 14 06 F6 | 	mov	arg02, ##@LR__5619
05bc8     13 13 02 F6 | 	mov	arg01, local01
05bcc     2C F3 B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     FC 03 90 AD |  if_e	jmp	#LR__0454
05bd8     A7 01 00 FF 
05bdc     EC 14 06 F6 | 	mov	arg02, ##@LR__5620
05be0     13 13 02 F6 | 	mov	arg01, local01
05be4     14 F3 B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     EC 03 90 AD |  if_e	jmp	#LR__0455
05bf0     A7 01 00 FF 
05bf4     F1 14 06 F6 | 	mov	arg02, ##@LR__5621
05bf8     13 13 02 F6 | 	mov	arg01, local01
05bfc     FC F2 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     DC 03 90 AD |  if_e	jmp	#LR__0456
05c08     A7 01 00 FF 
05c0c     F5 14 06 F6 | 	mov	arg02, ##@LR__5622
05c10     13 13 02 F6 | 	mov	arg01, local01
05c14     E4 F2 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     CC 03 90 AD |  if_e	jmp	#LR__0457
05c20     A7 01 00 FF 
05c24     FA 14 06 F6 | 	mov	arg02, ##@LR__5623
05c28     13 13 02 F6 | 	mov	arg01, local01
05c2c     CC F2 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     BC 03 90 AD |  if_e	jmp	#LR__0458
05c38     A7 01 00 FF 
05c3c     FF 14 06 F6 | 	mov	arg02, ##@LR__5624
05c40     13 13 02 F6 | 	mov	arg01, local01
05c44     B4 F2 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     AC 03 90 AD |  if_e	jmp	#LR__0459
05c50     A7 01 00 FF 
05c54     03 15 06 F6 | 	mov	arg02, ##@LR__5625
05c58     13 13 02 F6 | 	mov	arg01, local01
05c5c     9C F2 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     9C 03 90 AD |  if_e	jmp	#LR__0460
05c68     A7 01 00 FF 
05c6c     09 15 06 F6 | 	mov	arg02, ##@LR__5626
05c70     13 13 02 F6 | 	mov	arg01, local01
05c74     84 F2 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     8C 03 90 AD |  if_e	jmp	#LR__0461
05c80     A7 01 00 FF 
05c84     12 15 06 F6 | 	mov	arg02, ##@LR__5627
05c88     13 13 02 F6 | 	mov	arg01, local01
05c8c     6C F2 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     7C 03 90 AD |  if_e	jmp	#LR__0462
05c98     A7 01 00 FF 
05c9c     16 15 06 F6 | 	mov	arg02, ##@LR__5628
05ca0     13 13 02 F6 | 	mov	arg01, local01
05ca4     54 F2 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     6C 03 90 AD |  if_e	jmp	#LR__0463
05cb0     A7 01 00 FF 
05cb4     1A 15 06 F6 | 	mov	arg02, ##@LR__5629
05cb8     13 13 02 F6 | 	mov	arg01, local01
05cbc     3C F2 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     5C 03 90 AD |  if_e	jmp	#LR__0464
05cc8     A7 01 00 FF 
05ccc     23 15 06 F6 | 	mov	arg02, ##@LR__5630
05cd0     13 13 02 F6 | 	mov	arg01, local01
05cd4     24 F2 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     4C 03 90 AD |  if_e	jmp	#LR__0465
05ce0     A7 01 00 FF 
05ce4     27 15 06 F6 | 	mov	arg02, ##@LR__5631
05ce8     13 13 02 F6 | 	mov	arg01, local01
05cec     0C F2 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     3C 03 90 AD |  if_e	jmp	#LR__0466
05cf8     A7 01 00 FF 
05cfc     35 15 06 F6 | 	mov	arg02, ##@LR__5632
05d00     13 13 02 F6 | 	mov	arg01, local01
05d04     F4 F1 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     2C 03 90 AD |  if_e	jmp	#LR__0467
05d10     A7 01 00 FF 
05d14     42 15 06 F6 | 	mov	arg02, ##@LR__5633
05d18     13 13 02 F6 | 	mov	arg01, local01
05d1c     DC F1 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     1C 03 90 AD |  if_e	jmp	#LR__0468
05d28     A7 01 00 FF 
05d2c     4A 15 06 F6 | 	mov	arg02, ##@LR__5634
05d30     13 13 02 F6 | 	mov	arg01, local01
05d34     C4 F1 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     0C 03 90 AD |  if_e	jmp	#LR__0469
05d40     A7 01 00 FF 
05d44     4F 15 06 F6 | 	mov	arg02, ##@LR__5635
05d48     13 13 02 F6 | 	mov	arg01, local01
05d4c     AC F1 B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     FC 02 90 AD |  if_e	jmp	#LR__0470
05d58     A7 01 00 FF 
05d5c     56 15 06 F6 | 	mov	arg02, ##@LR__5636
05d60     13 13 02 F6 | 	mov	arg01, local01
05d64     94 F1 B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     EC 02 90 AD |  if_e	jmp	#LR__0471
05d70     A7 01 00 FF 
05d74     5A 15 06 F6 | 	mov	arg02, ##@LR__5637
05d78     13 13 02 F6 | 	mov	arg01, local01
05d7c     7C F1 B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     DC 02 90 AD |  if_e	jmp	#LR__0472
05d88     A7 01 00 FF 
05d8c     60 15 06 F6 | 	mov	arg02, ##@LR__5638
05d90     13 13 02 F6 | 	mov	arg01, local01
05d94     64 F1 B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     CC 02 90 AD |  if_e	jmp	#LR__0473
05da0     A7 01 00 FF 
05da4     64 15 06 F6 | 	mov	arg02, ##@LR__5639
05da8     13 13 02 F6 | 	mov	arg01, local01
05dac     4C F1 B1 FD | 	call	#__system___string_cmp
05db0     00 FA 0D F2 | 	cmp	result1, #0 wz
05db4     BC 02 90 AD |  if_e	jmp	#LR__0474
05db8     A7 01 00 FF 
05dbc     68 15 06 F6 | 	mov	arg02, ##@LR__5640
05dc0     13 13 02 F6 | 	mov	arg01, local01
05dc4     34 F1 B1 FD | 	call	#__system___string_cmp
05dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dcc     AC 02 90 AD |  if_e	jmp	#LR__0475
05dd0     A7 01 00 FF 
05dd4     6E 15 06 F6 | 	mov	arg02, ##@LR__5641
05dd8     13 13 02 F6 | 	mov	arg01, local01
05ddc     1C F1 B1 FD | 	call	#__system___string_cmp
05de0     00 FA 0D F2 | 	cmp	result1, #0 wz
05de4     9C 02 90 AD |  if_e	jmp	#LR__0476
05de8     A7 01 00 FF 
05dec     73 15 06 F6 | 	mov	arg02, ##@LR__5642
05df0     13 13 02 F6 | 	mov	arg01, local01
05df4     04 F1 B1 FD | 	call	#__system___string_cmp
05df8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dfc     8C 02 90 AD |  if_e	jmp	#LR__0477
05e00     A7 01 00 FF 
05e04     7A 15 06 F6 | 	mov	arg02, ##@LR__5643
05e08     13 13 02 F6 | 	mov	arg01, local01
05e0c     EC F0 B1 FD | 	call	#__system___string_cmp
05e10     00 FA 0D F2 | 	cmp	result1, #0 wz
05e14     7C 02 90 AD |  if_e	jmp	#LR__0478
05e18     A7 01 00 FF 
05e1c     81 15 06 F6 | 	mov	arg02, ##@LR__5644
05e20     13 13 02 F6 | 	mov	arg01, local01
05e24     D4 F0 B1 FD | 	call	#__system___string_cmp
05e28     00 FA 0D F2 | 	cmp	result1, #0 wz
05e2c     6C 02 90 AD |  if_e	jmp	#LR__0479
05e30     A7 01 00 FF 
05e34     88 15 06 F6 | 	mov	arg02, ##@LR__5645
05e38     13 13 02 F6 | 	mov	arg01, local01
05e3c     BC F0 B1 FD | 	call	#__system___string_cmp
05e40     00 FA 0D F2 | 	cmp	result1, #0 wz
05e44     5C 02 90 AD |  if_e	jmp	#LR__0480
05e48     A7 01 00 FF 
05e4c     8F 15 06 F6 | 	mov	arg02, ##@LR__5646
05e50     13 13 02 F6 | 	mov	arg01, local01
05e54     A4 F0 B1 FD | 	call	#__system___string_cmp
05e58     00 FA 0D F2 | 	cmp	result1, #0 wz
05e5c     4C 02 90 AD |  if_e	jmp	#LR__0481
05e60     A7 01 00 FF 
05e64     94 15 06 F6 | 	mov	arg02, ##@LR__5647
05e68     13 13 02 F6 | 	mov	arg01, local01
05e6c     8C F0 B1 FD | 	call	#__system___string_cmp
05e70     00 FA 0D F2 | 	cmp	result1, #0 wz
05e74     3C 02 90 AD |  if_e	jmp	#LR__0482
05e78     A7 01 00 FF 
05e7c     9C 15 06 F6 | 	mov	arg02, ##@LR__5648
05e80     13 13 02 F6 | 	mov	arg01, local01
05e84     74 F0 B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     2C 02 90 AD |  if_e	jmp	#LR__0483
05e90     A7 01 00 FF 
05e94     A2 15 06 F6 | 	mov	arg02, ##@LR__5649
05e98     13 13 02 F6 | 	mov	arg01, local01
05e9c     5C F0 B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     1C 02 90 AD |  if_e	jmp	#LR__0484
05ea8     A7 01 00 FF 
05eac     A9 15 06 F6 | 	mov	arg02, ##@LR__5650
05eb0     13 13 02 F6 | 	mov	arg01, local01
05eb4     44 F0 B1 FD | 	call	#__system___string_cmp
05eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ebc     0C 02 90 AD |  if_e	jmp	#LR__0485
05ec0     A7 01 00 FF 
05ec4     AF 15 06 F6 | 	mov	arg02, ##@LR__5651
05ec8     13 13 02 F6 | 	mov	arg01, local01
05ecc     2C F0 B1 FD | 	call	#__system___string_cmp
05ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed4     FC 01 90 AD |  if_e	jmp	#LR__0486
05ed8     A7 01 00 FF 
05edc     B5 15 06 F6 | 	mov	arg02, ##@LR__5652
05ee0     13 13 02 F6 | 	mov	arg01, local01
05ee4     14 F0 B1 FD | 	call	#__system___string_cmp
05ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eec     EC 01 90 AD |  if_e	jmp	#LR__0487
05ef0     A7 01 00 FF 
05ef4     B9 15 06 F6 | 	mov	arg02, ##@LR__5653
05ef8     13 13 02 F6 | 	mov	arg01, local01
05efc     FC EF B1 FD | 	call	#__system___string_cmp
05f00     00 FA 0D F2 | 	cmp	result1, #0 wz
05f04     DC 01 90 AD |  if_e	jmp	#LR__0488
05f08     A7 01 00 FF 
05f0c     BD 15 06 F6 | 	mov	arg02, ##@LR__5654
05f10     13 13 02 F6 | 	mov	arg01, local01
05f14     E4 EF B1 FD | 	call	#__system___string_cmp
05f18     00 FA 0D F2 | 	cmp	result1, #0 wz
05f1c     CC 01 90 AD |  if_e	jmp	#LR__0489
05f20     A7 01 00 FF 
05f24     C1 15 06 F6 | 	mov	arg02, ##@LR__5655
05f28     13 13 02 F6 | 	mov	arg01, local01
05f2c     CC EF B1 FD | 	call	#__system___string_cmp
05f30     00 FA 0D F2 | 	cmp	result1, #0 wz
05f34     BC 01 90 AD |  if_e	jmp	#LR__0490
05f38     A7 01 00 FF 
05f3c     C7 15 06 F6 | 	mov	arg02, ##@LR__5656
05f40     13 13 02 F6 | 	mov	arg01, local01
05f44     B4 EF B1 FD | 	call	#__system___string_cmp
05f48     00 FA 0D F2 | 	cmp	result1, #0 wz
05f4c     AC 01 90 AD |  if_e	jmp	#LR__0491
05f50     A7 01 00 FF 
05f54     CD 15 06 F6 | 	mov	arg02, ##@LR__5657
05f58     13 13 02 F6 | 	mov	arg01, local01
05f5c     9C EF B1 FD | 	call	#__system___string_cmp
05f60     00 FA 0D F2 | 	cmp	result1, #0 wz
05f64     9C 01 90 AD |  if_e	jmp	#LR__0492
05f68     A7 01 00 FF 
05f6c     D2 15 06 F6 | 	mov	arg02, ##@LR__5658
05f70     13 13 02 F6 | 	mov	arg01, local01
05f74     84 EF B1 FD | 	call	#__system___string_cmp
05f78     00 FA 0D F2 | 	cmp	result1, #0 wz
05f7c     8C 01 90 AD |  if_e	jmp	#LR__0493
05f80     A7 01 00 FF 
05f84     D6 15 06 F6 | 	mov	arg02, ##@LR__5659
05f88     13 13 02 F6 | 	mov	arg01, local01
05f8c     6C EF B1 FD | 	call	#__system___string_cmp
05f90     00 FA 0D F2 | 	cmp	result1, #0 wz
05f94     7C 01 90 AD |  if_e	jmp	#LR__0494
05f98     A7 01 00 FF 
05f9c     DA 15 06 F6 | 	mov	arg02, ##@LR__5660
05fa0     13 13 02 F6 | 	mov	arg01, local01
05fa4     54 EF B1 FD | 	call	#__system___string_cmp
05fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fac     6C 01 90 AD |  if_e	jmp	#LR__0495
05fb0     70 01 90 FD | 	jmp	#LR__0496
05fb4                 | LR__0450
05fb4     9E FA 05 F6 | 	mov	result1, #158
05fb8     6C 01 90 FD | 	jmp	#LR__0497
05fbc                 | LR__0451
05fbc     85 FA 05 F6 | 	mov	result1, #133
05fc0     64 01 90 FD | 	jmp	#LR__0497
05fc4                 | LR__0452
05fc4     9B FA 05 F6 | 	mov	result1, #155
05fc8     5C 01 90 FD | 	jmp	#LR__0497
05fcc                 | LR__0453
05fcc     9B FA 05 F6 | 	mov	result1, #155
05fd0     54 01 90 FD | 	jmp	#LR__0497
05fd4                 | LR__0454
05fd4     A7 FA 05 F6 | 	mov	result1, #167
05fd8     4C 01 90 FD | 	jmp	#LR__0497
05fdc                 | LR__0455
05fdc     84 FA 05 F6 | 	mov	result1, #132
05fe0     44 01 90 FD | 	jmp	#LR__0497
05fe4                 | LR__0456
05fe4     86 FA 05 F6 | 	mov	result1, #134
05fe8     3C 01 90 FD | 	jmp	#LR__0497
05fec                 | LR__0457
05fec     A2 FA 05 F6 | 	mov	result1, #162
05ff0     34 01 90 FD | 	jmp	#LR__0497
05ff4                 | LR__0458
05ff4     9F FA 05 F6 | 	mov	result1, #159
05ff8     2C 01 90 FD | 	jmp	#LR__0497
05ffc                 | LR__0459
05ffc     82 FA 05 F6 | 	mov	result1, #130
06000     24 01 90 FD | 	jmp	#LR__0497
06004                 | LR__0460
06004     99 FA 05 F6 | 	mov	result1, #153
06008     1C 01 90 FD | 	jmp	#LR__0497
0600c                 | LR__0461
0600c     C5 FA 05 F6 | 	mov	result1, #197
06010     14 01 90 FD | 	jmp	#LR__0497
06014                 | LR__0462
06014     C5 FA 05 F6 | 	mov	result1, #197
06018     0C 01 90 FD | 	jmp	#LR__0497
0601c                 | LR__0463
0601c     9C FA 05 F6 | 	mov	result1, #156
06020     04 01 90 FD | 	jmp	#LR__0497
06024                 | LR__0464
06024     6F FA 05 F6 | 	mov	result1, #111
06028     FC 00 90 FD | 	jmp	#LR__0497
0602c                 | LR__0465
0602c     6F FA 05 F6 | 	mov	result1, #111
06030     F4 00 90 FD | 	jmp	#LR__0497
06034                 | LR__0466
06034     93 FA 05 F6 | 	mov	result1, #147
06038     EC 00 90 FD | 	jmp	#LR__0497
0603c                 | LR__0467
0603c     94 FA 05 F6 | 	mov	result1, #148
06040     E4 00 90 FD | 	jmp	#LR__0497
06044                 | LR__0468
06044     62 FA 05 F6 | 	mov	result1, #98
06048     DC 00 90 FD | 	jmp	#LR__0497
0604c                 | LR__0469
0604c     A3 FA 05 F6 | 	mov	result1, #163
06050     D4 00 90 FD | 	jmp	#LR__0497
06054                 | LR__0470
06054     9D FA 05 F6 | 	mov	result1, #157
06058     CC 00 90 FD | 	jmp	#LR__0497
0605c                 | LR__0471
0605c     8A FA 05 F6 | 	mov	result1, #138
06060     C4 00 90 FD | 	jmp	#LR__0497
06064                 | LR__0472
06064     A4 FA 05 F6 | 	mov	result1, #164
06068     BC 00 90 FD | 	jmp	#LR__0497
0606c                 | LR__0473
0606c     A8 FA 05 F6 | 	mov	result1, #168
06070     B4 00 90 FD | 	jmp	#LR__0497
06074                 | LR__0474
06074     AD FA 05 F6 | 	mov	result1, #173
06078     AC 00 90 FD | 	jmp	#LR__0497
0607c                 | LR__0475
0607c     9A FA 05 F6 | 	mov	result1, #154
06080     A4 00 90 FD | 	jmp	#LR__0497
06084                 | LR__0476
06084     A6 FA 05 F6 | 	mov	result1, #166
06088     9C 00 90 FD | 	jmp	#LR__0497
0608c                 | LR__0477
0608c     66 FA 05 F6 | 	mov	result1, #102
06090     94 00 90 FD | 	jmp	#LR__0497
06094                 | LR__0478
06094     67 FA 05 F6 | 	mov	result1, #103
06098     8C 00 90 FD | 	jmp	#LR__0497
0609c                 | LR__0479
0609c     64 FA 05 F6 | 	mov	result1, #100
060a0     84 00 90 FD | 	jmp	#LR__0497
060a4                 | LR__0480
060a4     65 FA 05 F6 | 	mov	result1, #101
060a8     7C 00 90 FD | 	jmp	#LR__0497
060ac                 | LR__0481
060ac     98 FA 05 F6 | 	mov	result1, #152
060b0     74 00 90 FD | 	jmp	#LR__0497
060b4                 | LR__0482
060b4     7B FA 05 F6 | 	mov	result1, #123
060b8     6C 00 90 FD | 	jmp	#LR__0497
060bc                 | LR__0483
060bc     76 FA 05 F6 | 	mov	result1, #118
060c0     64 00 90 FD | 	jmp	#LR__0497
060c4                 | LR__0484
060c4     A5 FA 05 F6 | 	mov	result1, #165
060c8     5C 00 90 FD | 	jmp	#LR__0497
060cc                 | LR__0485
060cc     7A FA 05 F6 | 	mov	result1, #122
060d0     54 00 90 FD | 	jmp	#LR__0497
060d4                 | LR__0486
060d4     BF FA 05 F6 | 	mov	result1, #191
060d8     4C 00 90 FD | 	jmp	#LR__0497
060dc                 | LR__0487
060dc     54 FA 05 F6 | 	mov	result1, #84
060e0     44 00 90 FD | 	jmp	#LR__0497
060e4                 | LR__0488
060e4     6B FA 05 F6 | 	mov	result1, #107
060e8     3C 00 90 FD | 	jmp	#LR__0497
060ec                 | LR__0489
060ec     87 FA 05 F6 | 	mov	result1, #135
060f0     34 00 90 FD | 	jmp	#LR__0497
060f4                 | LR__0490
060f4     6A FA 05 F6 | 	mov	result1, #106
060f8     2C 00 90 FD | 	jmp	#LR__0497
060fc                 | LR__0491
060fc     6E FA 05 F6 | 	mov	result1, #110
06100     24 00 90 FD | 	jmp	#LR__0497
06104                 | LR__0492
06104     A1 FA 05 F6 | 	mov	result1, #161
06108     1C 00 90 FD | 	jmp	#LR__0497
0610c                 | LR__0493
0610c     83 FA 05 F6 | 	mov	result1, #131
06110     14 00 90 FD | 	jmp	#LR__0497
06114                 | LR__0494
06114     A0 FA 05 F6 | 	mov	result1, #160
06118     0C 00 90 FD | 	jmp	#LR__0497
0611c                 | LR__0495
0611c     9B FA 05 F6 | 	mov	result1, #155
06120     04 00 90 FD | 	jmp	#LR__0497
06124                 | LR__0496
06124     00 FA 05 F6 | 	mov	result1, #0
06128                 | LR__0497
06128     A7 F0 03 F6 | 	mov	ptra, fp
0612c     B2 00 A0 FD | 	call	#popregs_
06130                 | _isfunction_ret
06130     2D 00 64 FD | 	ret
06134                 | 
06134                 | ' 
06134                 | ' ' Check if the part is a name
06134                 | ' 
06134                 | ' function isname(s as string) as boolean
06134                 | _isname
06134     0D 4A 05 F6 | 	mov	COUNT_, #13
06138     A8 00 A0 FD | 	call	#pushregs_
0613c     09 27 02 F6 | 	mov	local01, arg01
06140     09 29 02 F6 | 	mov	local02, arg01
06144     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
06148                 | LR__0500
06148     14 FB C9 FA | 	rdbyte	result1, local02 wz
0614c     01 28 06 51 |  if_ne	add	local02, #1
06150     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
06154                 | LR__0501
06154     09 29 82 F1 | 	sub	local02, arg01
06158     14 FB 01 F6 | 	mov	result1, local02
0615c     FD 2A 0A F6 | 	mov	local03, result1 wz
06160     00 FA 05 A6 |  if_e	mov	result1, #0
06164     34 02 90 AD |  if_e	jmp	#LR__0513
06168     13 13 02 F6 | 	mov	arg01, local01
0616c     01 14 06 F6 | 	mov	arg02, #1
06170     01 16 06 F6 | 	mov	arg03, #1
06174     F4 0E B2 FD | 	call	#__system__Mid_S
06178     FD 2C 02 F6 | 	mov	local04, result1
0617c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0617c     A7 01 00 FF 
06180     E1 15 06 F6 | 	mov	arg02, ##@LR__5661
06184     16 13 02 F6 | 	mov	arg01, local04
06188     70 ED B1 FD | 	call	#__system___string_cmp
0618c     00 FA 55 F2 | 	cmps	result1, #0 wc
06190     18 00 90 CD |  if_b	jmp	#LR__0502
06194     A7 01 00 FF 
06198     E3 15 06 F6 | 	mov	arg02, ##@LR__5662
0619c     16 13 02 F6 | 	mov	arg01, local04
061a0     58 ED B1 FD | 	call	#__system___string_cmp
061a4     01 FA 55 F2 | 	cmps	result1, #1 wc
061a8     1C 00 90 CD |  if_b	jmp	#LR__0503
061ac                 | LR__0502
061ac     A7 01 00 FF 
061b0     E5 15 06 F6 | 	mov	arg02, ##@LR__5663
061b4     16 13 02 F6 | 	mov	arg01, local04
061b8     40 ED B1 FD | 	call	#__system___string_cmp
061bc     00 FA 0D F2 | 	cmp	result1, #0 wz
061c0     00 FA 05 56 |  if_ne	mov	result1, #0
061c4     D4 01 90 5D |  if_ne	jmp	#LR__0513
061c8                 | LR__0503
061c8                 | ' if l>2 then 
061c8     03 2A 56 F2 | 	cmps	local03, #3 wc
061cc     C8 01 90 CD |  if_b	jmp	#LR__0512
061d0                 | '   for i=2 to l
061d0     02 2E 06 F6 | 	mov	local05, #2
061d4     15 31 02 F6 | 	mov	local06, local03
061d8     01 30 06 F1 | 	add	local06, #1
061dc                 | LR__0504
061dc     18 2F 52 F2 | 	cmps	local05, local06 wc
061e0     B4 01 90 3D |  if_ae	jmp	#LR__0511
061e4     13 13 02 F6 | 	mov	arg01, local01
061e8     17 15 02 F6 | 	mov	arg02, local05
061ec     01 16 06 F6 | 	mov	arg03, #1
061f0     78 0E B2 FD | 	call	#__system__Mid_S
061f4     FD 2C 02 F6 | 	mov	local04, result1
061f8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
061f8     15 2F 52 F2 | 	cmps	local05, local03 wc
061fc     9C 00 90 3D |  if_ae	jmp	#LR__0507
06200     A7 01 00 FF 
06204     E7 15 06 F6 | 	mov	arg02, ##@LR__5664
06208     16 13 02 F6 | 	mov	arg01, local04
0620c     EC EC B1 FD | 	call	#__system___string_cmp
06210     00 FA 55 F2 | 	cmps	result1, #0 wc
06214     18 00 90 CD |  if_b	jmp	#LR__0505
06218     A7 01 00 FF 
0621c     E9 15 06 F6 | 	mov	arg02, ##@LR__5665
06220     16 13 02 F6 | 	mov	arg01, local04
06224     D4 EC B1 FD | 	call	#__system___string_cmp
06228     01 FA 55 F2 | 	cmps	result1, #1 wc
0622c     6C 00 90 CD |  if_b	jmp	#LR__0507
06230                 | LR__0505
06230     A7 01 00 FF 
06234     EB 15 06 F6 | 	mov	arg02, ##@LR__5666
06238     16 13 02 F6 | 	mov	arg01, local04
0623c     BC EC B1 FD | 	call	#__system___string_cmp
06240     00 FA 55 F2 | 	cmps	result1, #0 wc
06244     18 00 90 CD |  if_b	jmp	#LR__0506
06248     A7 01 00 FF 
0624c     ED 15 06 F6 | 	mov	arg02, ##@LR__5667
06250     16 13 02 F6 | 	mov	arg01, local04
06254     A4 EC B1 FD | 	call	#__system___string_cmp
06258     01 FA 55 F2 | 	cmps	result1, #1 wc
0625c     3C 00 90 CD |  if_b	jmp	#LR__0507
06260                 | LR__0506
06260     A7 01 00 FF 
06264     EF 33 06 F6 | 	mov	local07, ##@LR__5668
06268     16 13 02 F6 | 	mov	arg01, local04
0626c     19 15 02 F6 | 	mov	arg02, local07
06270     88 EC B1 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     20 00 90 AD |  if_e	jmp	#LR__0507
0627c     A7 01 00 FF 
06280     F1 35 06 F6 | 	mov	local08, ##@LR__5669
06284     16 13 02 F6 | 	mov	arg01, local04
06288     1A 15 02 F6 | 	mov	arg02, local08
0628c     6C EC B1 FD | 	call	#__system___string_cmp
06290     FD 36 0A F6 | 	mov	local09, result1 wz
06294     00 FA 05 56 |  if_ne	mov	result1, #0
06298     00 01 90 5D |  if_ne	jmp	#LR__0513
0629c                 | LR__0507
0629c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0629c     15 2F 0A F2 | 	cmp	local05, local03 wz
062a0     EC 00 90 5D |  if_ne	jmp	#LR__0510
062a4     A7 01 00 FF 
062a8     F3 39 06 F6 | 	mov	local10, ##@LR__5670
062ac     16 13 02 F6 | 	mov	arg01, local04
062b0     1C 15 02 F6 | 	mov	arg02, local10
062b4     44 EC B1 FD | 	call	#__system___string_cmp
062b8     FD 3A 02 F6 | 	mov	local11, result1
062bc     00 3A 56 F2 | 	cmps	local11, #0 wc
062c0     1C 00 90 CD |  if_b	jmp	#LR__0508
062c4     A7 01 00 FF 
062c8     F5 15 06 F6 | 	mov	arg02, ##@LR__5671
062cc     16 13 02 F6 | 	mov	arg01, local04
062d0     28 EC B1 FD | 	call	#__system___string_cmp
062d4     FD 38 02 F6 | 	mov	local10, result1
062d8     01 38 56 F2 | 	cmps	local10, #1 wc
062dc     B0 00 90 CD |  if_b	jmp	#LR__0510
062e0                 | LR__0508
062e0     A7 01 00 FF 
062e4     F7 15 06 F6 | 	mov	arg02, ##@LR__5672
062e8     16 13 02 F6 | 	mov	arg01, local04
062ec     0C EC B1 FD | 	call	#__system___string_cmp
062f0     00 FA 55 F2 | 	cmps	result1, #0 wc
062f4     1C 00 90 CD |  if_b	jmp	#LR__0509
062f8     A7 01 00 FF 
062fc     F9 37 06 F6 | 	mov	local09, ##@LR__5673
06300     16 13 02 F6 | 	mov	arg01, local04
06304     1B 15 02 F6 | 	mov	arg02, local09
06308     F0 EB B1 FD | 	call	#__system___string_cmp
0630c     01 FA 55 F2 | 	cmps	result1, #1 wc
06310     7C 00 90 CD |  if_b	jmp	#LR__0510
06314                 | LR__0509
06314     A7 01 00 FF 
06318     FB 37 06 F6 | 	mov	local09, ##@LR__5674
0631c     16 13 02 F6 | 	mov	arg01, local04
06320     1B 15 02 F6 | 	mov	arg02, local09
06324     D4 EB B1 FD | 	call	#__system___string_cmp
06328     00 FA 4D F2 | 	cmps	result1, #0 wz
0632c     60 00 90 AD |  if_e	jmp	#LR__0510
06330     A7 01 00 FF 
06334     FD 35 06 F6 | 	mov	local08, ##@LR__5675
06338     16 13 02 F6 | 	mov	arg01, local04
0633c     1A 15 02 F6 | 	mov	arg02, local08
06340     B8 EB B1 FD | 	call	#__system___string_cmp
06344     FD 36 0A F6 | 	mov	local09, result1 wz
06348     44 00 90 AD |  if_e	jmp	#LR__0510
0634c     A7 01 00 FF 
06350     FF 3D 06 F6 | 	mov	local12, ##@LR__5676
06354     1E 35 02 F6 | 	mov	local08, local12
06358     16 13 02 F6 | 	mov	arg01, local04
0635c     1A 15 02 F6 | 	mov	arg02, local08
06360     98 EB B1 FD | 	call	#__system___string_cmp
06364     FD 32 0A F6 | 	mov	local07, result1 wz
06368     24 00 90 AD |  if_e	jmp	#LR__0510
0636c     A8 01 00 FF 
06370     01 3E 06 F6 | 	mov	local13, ##@LR__5677
06374     1F 3D 02 F6 | 	mov	local12, local13
06378     16 13 02 F6 | 	mov	arg01, local04
0637c     1E 15 02 F6 | 	mov	arg02, local12
06380     78 EB B1 FD | 	call	#__system___string_cmp
06384     FD 34 0A F6 | 	mov	local08, result1 wz
06388     00 FA 05 56 |  if_ne	mov	result1, #0
0638c     0C 00 90 5D |  if_ne	jmp	#LR__0513
06390                 | LR__0510
06390     01 2E 06 F1 | 	add	local05, #1
06394     44 FE 9F FD | 	jmp	#LR__0504
06398                 | LR__0511
06398                 | LR__0512
06398                 | ' return true
06398     01 FA 65 F6 | 	neg	result1, #1
0639c                 | LR__0513
0639c     A7 F0 03 F6 | 	mov	ptra, fp
063a0     B2 00 A0 FD | 	call	#popregs_
063a4                 | _isname_ret
063a4     2D 00 64 FD | 	ret
063a8                 | 
063a8                 | ' 
063a8                 | ' ' Check if the part is a number.  
063a8                 | ' 
063a8                 | ' function isnum(s as string) as boolean 
063a8                 | _isnum
063a8     13 4A 05 F6 | 	mov	COUNT_, #19
063ac     A8 00 A0 FD | 	call	#pushregs_
063b0     09 27 02 F6 | 	mov	local01, arg01
063b4     00 28 06 F6 | 	mov	local02, #0
063b8     00 2A 06 F6 | 	mov	local03, #0
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     09 2D 02 F6 | 	mov	local04, arg01
063c4     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
063c8                 | LR__0520
063c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
063cc     01 2C 06 51 |  if_ne	add	local04, #1
063d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
063d4                 | LR__0521
063d4     09 2D 82 F1 | 	sub	local04, arg01
063d8     16 FB 01 F6 | 	mov	result1, local04
063dc     FD 2E 0A F6 | 	mov	local05, result1 wz
063e0     00 FA 05 A6 |  if_e	mov	result1, #0
063e4     A0 03 90 AD |  if_e	jmp	#LR__0536
063e8     13 13 02 F6 | 	mov	arg01, local01
063ec     01 14 06 F6 | 	mov	arg02, #1
063f0     01 16 06 F6 | 	mov	arg03, #1
063f4     74 0C B2 FD | 	call	#__system__Mid_S
063f8     FD 30 02 F6 | 	mov	local06, result1
063fc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
063fc     A8 01 00 FF 
06400     03 14 06 F6 | 	mov	arg02, ##@LR__5678
06404     18 13 02 F6 | 	mov	arg01, local06
06408     F0 EA B1 FD | 	call	#__system___string_cmp
0640c     00 FA 55 F2 | 	cmps	result1, #0 wc
06410     1C 00 90 CD |  if_b	jmp	#LR__0522
06414     A8 01 00 FF 
06418     05 32 06 F6 | 	mov	local07, ##@LR__5679
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     19 15 02 F6 | 	mov	arg02, local07
06424     D4 EA B1 FD | 	call	#__system___string_cmp
06428     01 FA 55 F2 | 	cmps	result1, #1 wc
0642c     84 00 90 CD |  if_b	jmp	#LR__0523
06430                 | LR__0522
06430     A8 01 00 FF 
06434     07 34 06 F6 | 	mov	local08, ##@LR__5680
06438     1A 33 02 F6 | 	mov	local07, local08
0643c     18 13 02 F6 | 	mov	arg01, local06
06440     19 15 02 F6 | 	mov	arg02, local07
06444     B4 EA B1 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     64 00 90 AD |  if_e	jmp	#LR__0523
06450     A8 01 00 FF 
06454     09 36 06 F6 | 	mov	local09, ##@LR__5681
06458     1B 35 02 F6 | 	mov	local08, local09
0645c     18 13 02 F6 | 	mov	arg01, local06
06460     1A 15 02 F6 | 	mov	arg02, local08
06464     94 EA B1 FD | 	call	#__system___string_cmp
06468     FD 32 0A F6 | 	mov	local07, result1 wz
0646c     44 00 90 AD |  if_e	jmp	#LR__0523
06470     A8 01 00 FF 
06474     0B 38 06 F6 | 	mov	local10, ##@LR__5682
06478     1C 37 02 F6 | 	mov	local09, local10
0647c     18 13 02 F6 | 	mov	arg01, local06
06480     1B 15 02 F6 | 	mov	arg02, local09
06484     74 EA B1 FD | 	call	#__system___string_cmp
06488     FD 34 0A F6 | 	mov	local08, result1 wz
0648c     24 00 90 AD |  if_e	jmp	#LR__0523
06490     A8 01 00 FF 
06494     0D 3A 06 F6 | 	mov	local11, ##@LR__5683
06498     1D 39 02 F6 | 	mov	local10, local11
0649c     18 13 02 F6 | 	mov	arg01, local06
064a0     1C 15 02 F6 | 	mov	arg02, local10
064a4     54 EA B1 FD | 	call	#__system___string_cmp
064a8     FD 36 0A F6 | 	mov	local09, result1 wz
064ac     00 FA 05 56 |  if_ne	mov	result1, #0
064b0     D4 02 90 5D |  if_ne	jmp	#LR__0536
064b4                 | LR__0523
064b4                 | ' if m$="." then ds=1
064b4     A8 01 00 FF 
064b8     0F 14 06 F6 | 	mov	arg02, ##@LR__5684
064bc     18 13 02 F6 | 	mov	arg01, local06
064c0     38 EA B1 FD | 	call	#__system___string_cmp
064c4     00 FA 0D F2 | 	cmp	result1, #0 wz
064c8     01 28 06 A6 |  if_e	mov	local02, #1
064cc                 | ' if m$="$" then hex=1 else hex=0
064cc     A8 01 00 FF 
064d0     11 14 06 F6 | 	mov	arg02, ##@LR__5685
064d4     18 13 02 F6 | 	mov	arg01, local06
064d8     20 EA B1 FD | 	call	#__system___string_cmp
064dc     00 FA 0D F2 | 	cmp	result1, #0 wz
064e0     01 3C 06 A6 |  if_e	mov	local12, #1
064e4     00 3C 06 56 |  if_ne	mov	local12, #0
064e8                 | ' if m$="%" then bin=1 else bin=0
064e8     A8 01 00 FF 
064ec     13 14 06 F6 | 	mov	arg02, ##@LR__5686
064f0     18 13 02 F6 | 	mov	arg01, local06
064f4     04 EA B1 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     01 3E 06 A6 |  if_e	mov	local13, #1
06500     00 3E 06 56 |  if_ne	mov	local13, #0
06504                 | ' if l>1 then 
06504     02 2E 56 F2 | 	cmps	local05, #2 wc
06508     78 02 90 CD |  if_b	jmp	#LR__0535
0650c                 | '   for i=2 to l
0650c     02 40 06 F6 | 	mov	local14, #2
06510     17 43 02 F6 | 	mov	local15, local05
06514     01 42 06 F1 | 	add	local15, #1
06518                 | LR__0524
06518     21 41 52 F2 | 	cmps	local14, local15 wc
0651c     64 02 90 3D |  if_ae	jmp	#LR__0534
06520     13 13 02 F6 | 	mov	arg01, local01
06524     20 15 02 F6 | 	mov	arg02, local14
06528     01 16 06 F6 | 	mov	arg03, #1
0652c     3C 0B B2 FD | 	call	#__system__Mid_S
06530     FD 30 02 F6 | 	mov	local06, result1
06534     00 44 06 F6 | 	mov	local16, #0
06538                 | '     m$=mid$(s,i,1) : b=false
06538                 | '     if m$>="0" andalso m$<="9" then b=true  
06538     A8 01 00 FF 
0653c     15 14 06 F6 | 	mov	arg02, ##@LR__5687
06540     18 13 02 F6 | 	mov	arg01, local06
06544     B4 E9 B1 FD | 	call	#__system___string_cmp
06548     00 FA 55 F2 | 	cmps	result1, #0 wc
0654c     1C 00 90 CD |  if_b	jmp	#LR__0525
06550     A8 01 00 FF 
06554     17 32 06 F6 | 	mov	local07, ##@LR__5688
06558     18 13 02 F6 | 	mov	arg01, local06
0655c     19 15 02 F6 | 	mov	arg02, local07
06560     98 E9 B1 FD | 	call	#__system___string_cmp
06564     01 FA 55 F2 | 	cmps	result1, #1 wc
06568     01 44 66 C6 |  if_b	neg	local16, #1
0656c                 | LR__0525
0656c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0656c     A8 01 00 FF 
06570     19 14 06 F6 | 	mov	arg02, ##@LR__5689
06574     18 13 02 F6 | 	mov	arg01, local06
06578     80 E9 B1 FD | 	call	#__system___string_cmp
0657c     00 FA 0D F2 | 	cmp	result1, #0 wz
06580     7C 00 90 AD |  if_e	jmp	#LR__0526
06584     A8 01 00 FF 
06588     1B 32 06 F6 | 	mov	local07, ##@LR__5690
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     19 15 02 F6 | 	mov	arg02, local07
06594     64 E9 B1 FD | 	call	#__system___string_cmp
06598     00 FA 0D F2 | 	cmp	result1, #0 wz
0659c     60 00 90 AD |  if_e	jmp	#LR__0526
065a0     A8 01 00 FF 
065a4     1D 34 06 F6 | 	mov	local08, ##@LR__5691
065a8     1A 33 02 F6 | 	mov	local07, local08
065ac     18 13 02 F6 | 	mov	arg01, local06
065b0     19 15 02 F6 | 	mov	arg02, local07
065b4     44 E9 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     40 00 90 AD |  if_e	jmp	#LR__0526
065c0     A8 01 00 FF 
065c4     1F 36 06 F6 | 	mov	local09, ##@LR__5692
065c8     1B 35 02 F6 | 	mov	local08, local09
065cc     18 13 02 F6 | 	mov	arg01, local06
065d0     1A 15 02 F6 | 	mov	arg02, local08
065d4     24 E9 B1 FD | 	call	#__system___string_cmp
065d8     FD 32 0A F6 | 	mov	local07, result1 wz
065dc     20 00 90 AD |  if_e	jmp	#LR__0526
065e0     A8 01 00 FF 
065e4     21 38 06 F6 | 	mov	local10, ##@LR__5693
065e8     1C 37 02 F6 | 	mov	local09, local10
065ec     18 13 02 F6 | 	mov	arg01, local06
065f0     1B 15 02 F6 | 	mov	arg02, local09
065f4     04 E9 B1 FD | 	call	#__system___string_cmp
065f8     FD 34 0A F6 | 	mov	local08, result1 wz
065fc     04 00 90 5D |  if_ne	jmp	#LR__0527
06600                 | LR__0526
06600     01 44 66 F6 | 	neg	local16, #1
06604                 | LR__0527
06604                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06604     01 3C 0E F2 | 	cmp	local12, #1 wz
06608     34 00 90 5D |  if_ne	jmp	#LR__0528
0660c     A8 01 00 FF 
06610     23 14 06 F6 | 	mov	arg02, ##@LR__5694
06614     18 13 02 F6 | 	mov	arg01, local06
06618     E0 E8 B1 FD | 	call	#__system___string_cmp
0661c     00 FA 55 F2 | 	cmps	result1, #0 wc
06620     1C 00 90 CD |  if_b	jmp	#LR__0528
06624     A8 01 00 FF 
06628     25 32 06 F6 | 	mov	local07, ##@LR__5695
0662c     18 13 02 F6 | 	mov	arg01, local06
06630     19 15 02 F6 | 	mov	arg02, local07
06634     C4 E8 B1 FD | 	call	#__system___string_cmp
06638     01 FA 55 F2 | 	cmps	result1, #1 wc
0663c     01 44 66 C6 |  if_b	neg	local16, #1
06640                 | LR__0528
06640                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06640     01 3E 0E F2 | 	cmp	local13, #1 wz
06644     58 00 90 5D |  if_ne	jmp	#LR__0530
06648     A8 01 00 FF 
0664c     27 14 06 F6 | 	mov	arg02, ##@LR__5696
06650     18 13 02 F6 | 	mov	arg01, local06
06654     A4 E8 B1 FD | 	call	#__system___string_cmp
06658     00 FA 55 F2 | 	cmps	result1, #0 wc
0665c     1C 00 90 CD |  if_b	jmp	#LR__0529
06660     A8 01 00 FF 
06664     29 32 06 F6 | 	mov	local07, ##@LR__5697
06668     18 13 02 F6 | 	mov	arg01, local06
0666c     19 15 02 F6 | 	mov	arg02, local07
06670     88 E8 B1 FD | 	call	#__system___string_cmp
06674     01 FA 55 F2 | 	cmps	result1, #1 wc
06678     24 00 90 CD |  if_b	jmp	#LR__0530
0667c                 | LR__0529
0667c     A8 01 00 FF 
06680     2B 34 06 F6 | 	mov	local08, ##@LR__5698
06684     1A 33 02 F6 | 	mov	local07, local08
06688     18 13 02 F6 | 	mov	arg01, local06
0668c     19 15 02 F6 | 	mov	arg02, local07
06690     68 E8 B1 FD | 	call	#__system___string_cmp
06694     00 FA 0D F2 | 	cmp	result1, #0 wz
06698     00 FA 05 56 |  if_ne	mov	result1, #0
0669c     E8 00 90 5D |  if_ne	jmp	#LR__0536
066a0                 | LR__0530
066a0                 | '     if not b then return false
066a0     22 45 22 F6 | 	not	local16, local16
066a4     00 44 0E F2 | 	cmp	local16, #0 wz
066a8     00 FA 05 56 |  if_ne	mov	result1, #0
066ac     D8 00 90 5D |  if_ne	jmp	#LR__0536
066b0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
066b0     A8 01 00 FF 
066b4     2D 14 06 F6 | 	mov	arg02, ##@LR__5699
066b8     18 13 02 F6 | 	mov	arg01, local06
066bc     3C E8 B1 FD | 	call	#__system___string_cmp
066c0     00 FA 0D F2 | 	cmp	result1, #0 wz
066c4     3C 00 90 5D |  if_ne	jmp	#LR__0531
066c8     20 15 02 F6 | 	mov	arg02, local14
066cc     01 14 86 F1 | 	sub	arg02, #1
066d0     13 13 02 F6 | 	mov	arg01, local01
066d4     01 16 06 F6 | 	mov	arg03, #1
066d8     90 09 B2 FD | 	call	#__system__Mid_S
066dc     FD 12 02 F6 | 	mov	arg01, result1
066e0     80 0B B2 FD | 	call	#__system__LCase_S
066e4     FD 12 02 F6 | 	mov	arg01, result1
066e8     A8 01 00 FF 
066ec     2F 32 06 F6 | 	mov	local07, ##@LR__5700
066f0     19 15 02 F6 | 	mov	arg02, local07
066f4     04 E8 B1 FD | 	call	#__system___string_cmp
066f8     00 FA 0D F2 | 	cmp	result1, #0 wz
066fc     00 FA 05 56 |  if_ne	mov	result1, #0
06700     84 00 90 5D |  if_ne	jmp	#LR__0536
06704                 | LR__0531
06704                 | '     if m$="." then ds+=1: if ds>1 then return false
06704     A8 01 00 FF 
06708     31 14 06 F6 | 	mov	arg02, ##@LR__5701
0670c     18 13 02 F6 | 	mov	arg01, local06
06710     E8 E7 B1 FD | 	call	#__system___string_cmp
06714     00 FA 0D F2 | 	cmp	result1, #0 wz
06718     01 28 06 A1 |  if_e	add	local02, #1
0671c     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06720     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06724     60 00 90 2D |  if_nc_and_z	jmp	#LR__0536
06728                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06728     A8 01 00 FF 
0672c     33 46 06 F6 | 	mov	local17, ##@LR__5702
06730     23 49 02 F6 | 	mov	local18, local17
06734     18 13 02 F6 | 	mov	arg01, local06
06738     24 15 02 F6 | 	mov	arg02, local18
0673c     BC E7 B1 FD | 	call	#__system___string_cmp
06740     FD 4A 0A F6 | 	mov	local19, result1 wz
06744     20 00 90 AD |  if_e	jmp	#LR__0532
06748     A8 01 00 FF 
0674c     35 32 06 F6 | 	mov	local07, ##@LR__5703
06750     19 47 02 F6 | 	mov	local17, local07
06754     18 13 02 F6 | 	mov	arg01, local06
06758     23 15 02 F6 | 	mov	arg02, local17
0675c     9C E7 B1 FD | 	call	#__system___string_cmp
06760     FD 48 0A F6 | 	mov	local18, result1 wz
06764     14 00 90 5D |  if_ne	jmp	#LR__0533
06768                 | LR__0532
06768     01 2A 06 F1 | 	add	local03, #1
0676c     00 3C 0E F2 | 	cmp	local12, #0 wz
06770     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06774     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06778     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0536
0677c                 | LR__0533
0677c     01 40 06 F1 | 	add	local14, #1
06780     94 FD 9F FD | 	jmp	#LR__0524
06784                 | LR__0534
06784                 | LR__0535
06784                 | ' return true
06784     01 FA 65 F6 | 	neg	result1, #1
06788                 | LR__0536
06788     A7 F0 03 F6 | 	mov	ptra, fp
0678c     B2 00 A0 FD | 	call	#popregs_
06790                 | _isnum_ret
06790     2D 00 64 FD | 	ret
06794                 | 
06794                 | '   
06794                 | ' ' Check if the part is an integer number.    
06794                 | '   
06794                 | ' function isint(s as string) as boolean
06794                 | _isint
06794     0E 4A 05 F6 | 	mov	COUNT_, #14
06798     A8 00 A0 FD | 	call	#pushregs_
0679c     09 27 02 F6 | 	mov	local01, arg01
067a0     09 29 02 F6 | 	mov	local02, arg01
067a4     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067a8                 | LR__0540
067a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
067ac     01 28 06 51 |  if_ne	add	local02, #1
067b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
067b4                 | LR__0541
067b4     09 29 82 F1 | 	sub	local02, arg01
067b8     14 FB 01 F6 | 	mov	result1, local02
067bc     FD 2A 0A F6 | 	mov	local03, result1 wz
067c0     00 FA 05 A6 |  if_e	mov	result1, #0
067c4     64 02 90 AD |  if_e	jmp	#LR__0554
067c8     13 13 02 F6 | 	mov	arg01, local01
067cc     01 14 06 F6 | 	mov	arg02, #1
067d0     01 16 06 F6 | 	mov	arg03, #1
067d4     94 08 B2 FD | 	call	#__system__Mid_S
067d8     FD 2C 02 F6 | 	mov	local04, result1
067dc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
067dc     A8 01 00 FF 
067e0     37 14 06 F6 | 	mov	arg02, ##@LR__5704
067e4     16 13 02 F6 | 	mov	arg01, local04
067e8     10 E7 B1 FD | 	call	#__system___string_cmp
067ec     00 FA 55 F2 | 	cmps	result1, #0 wc
067f0     1C 00 90 CD |  if_b	jmp	#LR__0542
067f4     A8 01 00 FF 
067f8     39 2E 06 F6 | 	mov	local05, ##@LR__5705
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     17 15 02 F6 | 	mov	arg02, local05
06804     F4 E6 B1 FD | 	call	#__system___string_cmp
06808     01 FA 55 F2 | 	cmps	result1, #1 wc
0680c     64 00 90 CD |  if_b	jmp	#LR__0543
06810                 | LR__0542
06810     A8 01 00 FF 
06814     3B 30 06 F6 | 	mov	local06, ##@LR__5706
06818     18 2F 02 F6 | 	mov	local05, local06
0681c     16 13 02 F6 | 	mov	arg01, local04
06820     17 15 02 F6 | 	mov	arg02, local05
06824     D4 E6 B1 FD | 	call	#__system___string_cmp
06828     00 FA 0D F2 | 	cmp	result1, #0 wz
0682c     44 00 90 AD |  if_e	jmp	#LR__0543
06830     A8 01 00 FF 
06834     3D 32 06 F6 | 	mov	local07, ##@LR__5707
06838     19 31 02 F6 | 	mov	local06, local07
0683c     16 13 02 F6 | 	mov	arg01, local04
06840     18 15 02 F6 | 	mov	arg02, local06
06844     B4 E6 B1 FD | 	call	#__system___string_cmp
06848     FD 2E 0A F6 | 	mov	local05, result1 wz
0684c     24 00 90 AD |  if_e	jmp	#LR__0543
06850     A8 01 00 FF 
06854     3F 34 06 F6 | 	mov	local08, ##@LR__5708
06858     1A 33 02 F6 | 	mov	local07, local08
0685c     16 13 02 F6 | 	mov	arg01, local04
06860     19 15 02 F6 | 	mov	arg02, local07
06864     94 E6 B1 FD | 	call	#__system___string_cmp
06868     FD 30 0A F6 | 	mov	local06, result1 wz
0686c     00 FA 05 56 |  if_ne	mov	result1, #0
06870     B8 01 90 5D |  if_ne	jmp	#LR__0554
06874                 | LR__0543
06874                 | ' if m$="$" then hex=1 else hex=0
06874     A8 01 00 FF 
06878     41 14 06 F6 | 	mov	arg02, ##@LR__5709
0687c     16 13 02 F6 | 	mov	arg01, local04
06880     78 E6 B1 FD | 	call	#__system___string_cmp
06884     00 FA 0D F2 | 	cmp	result1, #0 wz
06888     01 36 06 A6 |  if_e	mov	local09, #1
0688c     00 36 06 56 |  if_ne	mov	local09, #0
06890                 | ' if m$="%" then bin=1 else bin=0
06890     A8 01 00 FF 
06894     43 14 06 F6 | 	mov	arg02, ##@LR__5710
06898     16 13 02 F6 | 	mov	arg01, local04
0689c     5C E6 B1 FD | 	call	#__system___string_cmp
068a0     00 FA 0D F2 | 	cmp	result1, #0 wz
068a4     01 38 06 A6 |  if_e	mov	local10, #1
068a8     00 38 06 56 |  if_ne	mov	local10, #0
068ac                 | ' if l>1 then 
068ac     02 2A 56 F2 | 	cmps	local03, #2 wc
068b0     74 01 90 CD |  if_b	jmp	#LR__0553
068b4                 | '   for i=2 to l
068b4     02 3A 06 F6 | 	mov	local11, #2
068b8     15 3D 02 F6 | 	mov	local12, local03
068bc     01 3C 06 F1 | 	add	local12, #1
068c0                 | LR__0544
068c0     1E 3B 52 F2 | 	cmps	local11, local12 wc
068c4     60 01 90 3D |  if_ae	jmp	#LR__0552
068c8     13 13 02 F6 | 	mov	arg01, local01
068cc     1D 15 02 F6 | 	mov	arg02, local11
068d0     01 16 06 F6 | 	mov	arg03, #1
068d4     94 07 B2 FD | 	call	#__system__Mid_S
068d8     FD 2C 02 F6 | 	mov	local04, result1
068dc                 | '     m$=mid$(s,i,1) 
068dc                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
068dc     00 36 0E F2 | 	cmp	local09, #0 wz
068e0     50 00 90 5D |  if_ne	jmp	#LR__0546
068e4     A8 01 00 FF 
068e8     45 14 06 F6 | 	mov	arg02, ##@LR__5711
068ec     16 13 02 F6 | 	mov	arg01, local04
068f0     08 E6 B1 FD | 	call	#__system___string_cmp
068f4     00 FA 55 F2 | 	cmps	result1, #0 wc
068f8     18 00 90 CD |  if_b	jmp	#LR__0545
068fc     A8 01 00 FF 
06900     47 14 06 F6 | 	mov	arg02, ##@LR__5712
06904     16 13 02 F6 | 	mov	arg01, local04
06908     F0 E5 B1 FD | 	call	#__system___string_cmp
0690c     01 FA 55 F2 | 	cmps	result1, #1 wc
06910     20 00 90 CD |  if_b	jmp	#LR__0546
06914                 | LR__0545
06914     A8 01 00 FF 
06918     49 30 06 F6 | 	mov	local06, ##@LR__5713
0691c     16 13 02 F6 | 	mov	arg01, local04
06920     18 15 02 F6 | 	mov	arg02, local06
06924     D4 E5 B1 FD | 	call	#__system___string_cmp
06928     00 FA 0D F2 | 	cmp	result1, #0 wz
0692c     00 FA 05 56 |  if_ne	mov	result1, #0
06930     F8 00 90 5D |  if_ne	jmp	#LR__0554
06934                 | LR__0546
06934                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06934     01 36 0E F2 | 	cmp	local09, #1 wz
06938     90 00 90 5D |  if_ne	jmp	#LR__0549
0693c     A8 01 00 FF 
06940     4B 14 06 F6 | 	mov	arg02, ##@LR__5714
06944     16 13 02 F6 | 	mov	arg01, local04
06948     B0 E5 B1 FD | 	call	#__system___string_cmp
0694c     00 FA 55 F2 | 	cmps	result1, #0 wc
06950     1C 00 90 CD |  if_b	jmp	#LR__0547
06954     A8 01 00 FF 
06958     4D 14 06 F6 | 	mov	arg02, ##@LR__5715
0695c     16 13 02 F6 | 	mov	arg01, local04
06960     98 E5 B1 FD | 	call	#__system___string_cmp
06964     FD 3E 02 F6 | 	mov	local13, result1
06968     01 3E 56 F2 | 	cmps	local13, #1 wc
0696c     5C 00 90 CD |  if_b	jmp	#LR__0549
06970                 | LR__0547
06970     A8 01 00 FF 
06974     4F 2E 06 F6 | 	mov	local05, ##@LR__5716
06978     16 13 02 F6 | 	mov	arg01, local04
0697c     17 15 02 F6 | 	mov	arg02, local05
06980     78 E5 B1 FD | 	call	#__system___string_cmp
06984     FD 40 02 F6 | 	mov	local14, result1
06988     00 40 56 F2 | 	cmps	local14, #0 wc
0698c     1C 00 90 CD |  if_b	jmp	#LR__0548
06990     A8 01 00 FF 
06994     51 32 06 F6 | 	mov	local07, ##@LR__5717
06998     16 13 02 F6 | 	mov	arg01, local04
0699c     19 15 02 F6 | 	mov	arg02, local07
069a0     58 E5 B1 FD | 	call	#__system___string_cmp
069a4     01 FA 55 F2 | 	cmps	result1, #1 wc
069a8     20 00 90 CD |  if_b	jmp	#LR__0549
069ac                 | LR__0548
069ac     A8 01 00 FF 
069b0     53 34 06 F6 | 	mov	local08, ##@LR__5718
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     1A 15 02 F6 | 	mov	arg02, local08
069bc     3C E5 B1 FD | 	call	#__system___string_cmp
069c0     00 FA 0D F2 | 	cmp	result1, #0 wz
069c4     00 FA 05 56 |  if_ne	mov	result1, #0
069c8     60 00 90 5D |  if_ne	jmp	#LR__0554
069cc                 | LR__0549
069cc                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
069cc     01 38 0E F2 | 	cmp	local10, #1 wz
069d0     4C 00 90 5D |  if_ne	jmp	#LR__0551
069d4     A8 01 00 FF 
069d8     55 14 06 F6 | 	mov	arg02, ##@LR__5719
069dc     16 13 02 F6 | 	mov	arg01, local04
069e0     18 E5 B1 FD | 	call	#__system___string_cmp
069e4     00 FA 55 F2 | 	cmps	result1, #0 wc
069e8     18 00 90 CD |  if_b	jmp	#LR__0550
069ec     A8 01 00 FF 
069f0     57 14 06 F6 | 	mov	arg02, ##@LR__5720
069f4     16 13 02 F6 | 	mov	arg01, local04
069f8     00 E5 B1 FD | 	call	#__system___string_cmp
069fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06a00     1C 00 90 CD |  if_b	jmp	#LR__0551
06a04                 | LR__0550
06a04     A8 01 00 FF 
06a08     59 14 06 F6 | 	mov	arg02, ##@LR__5721
06a0c     16 13 02 F6 | 	mov	arg01, local04
06a10     E8 E4 B1 FD | 	call	#__system___string_cmp
06a14     00 FA 0D F2 | 	cmp	result1, #0 wz
06a18     00 FA 05 56 |  if_ne	mov	result1, #0
06a1c     0C 00 90 5D |  if_ne	jmp	#LR__0554
06a20                 | LR__0551
06a20     01 3A 06 F1 | 	add	local11, #1
06a24     98 FE 9F FD | 	jmp	#LR__0544
06a28                 | LR__0552
06a28                 | LR__0553
06a28                 | ' return true
06a28     01 FA 65 F6 | 	neg	result1, #1
06a2c                 | LR__0554
06a2c     A7 F0 03 F6 | 	mov	ptra, fp
06a30     B2 00 A0 FD | 	call	#popregs_
06a34                 | _isint_ret
06a34     2D 00 64 FD | 	ret
06a38                 | 
06a38                 | ' 
06a38                 | ' ' Check if the part is a positive decimal number.  
06a38                 | ' 
06a38                 | ' function isdec(s as string) as boolean
06a38                 | _isdec
06a38     05 4A 05 F6 | 	mov	COUNT_, #5
06a3c     A8 00 A0 FD | 	call	#pushregs_
06a40     09 27 02 F6 | 	mov	local01, arg01
06a44     09 29 02 F6 | 	mov	local02, arg01
06a48     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a4c                 | LR__0560
06a4c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06a50     01 28 06 51 |  if_ne	add	local02, #1
06a54     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a58                 | LR__0561
06a58     09 29 82 F1 | 	sub	local02, arg01
06a5c     14 FB 01 F6 | 	mov	result1, local02
06a60     FD 28 0A F6 | 	mov	local02, result1 wz
06a64     00 FA 05 A6 |  if_e	mov	result1, #0
06a68     80 00 90 AD |  if_e	jmp	#LR__0566
06a6c                 | ' for i=1 to l
06a6c     01 2A 06 F6 | 	mov	local03, #1
06a70     14 2D 02 F6 | 	mov	local04, local02
06a74     01 2C 06 F1 | 	add	local04, #1
06a78                 | LR__0562
06a78     16 2B 52 F2 | 	cmps	local03, local04 wc
06a7c     68 00 90 3D |  if_ae	jmp	#LR__0565
06a80     13 13 02 F6 | 	mov	arg01, local01
06a84     15 15 02 F6 | 	mov	arg02, local03
06a88     01 16 06 F6 | 	mov	arg03, #1
06a8c     DC 05 B2 FD | 	call	#__system__Mid_S
06a90     FD 2E 02 F6 | 	mov	local05, result1
06a94                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06a94     A8 01 00 FF 
06a98     5B 14 06 F6 | 	mov	arg02, ##@LR__5722
06a9c     17 13 02 F6 | 	mov	arg01, local05
06aa0     58 E4 B1 FD | 	call	#__system___string_cmp
06aa4     00 FA 55 F2 | 	cmps	result1, #0 wc
06aa8     18 00 90 CD |  if_b	jmp	#LR__0563
06aac     A8 01 00 FF 
06ab0     5D 14 06 F6 | 	mov	arg02, ##@LR__5723
06ab4     17 13 02 F6 | 	mov	arg01, local05
06ab8     40 E4 B1 FD | 	call	#__system___string_cmp
06abc     01 FA 55 F2 | 	cmps	result1, #1 wc
06ac0     1C 00 90 CD |  if_b	jmp	#LR__0564
06ac4                 | LR__0563
06ac4     A8 01 00 FF 
06ac8     5F 14 06 F6 | 	mov	arg02, ##@LR__5724
06acc     17 13 02 F6 | 	mov	arg01, local05
06ad0     28 E4 B1 FD | 	call	#__system___string_cmp
06ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ad8     00 FA 05 56 |  if_ne	mov	result1, #0
06adc     0C 00 90 5D |  if_ne	jmp	#LR__0566
06ae0                 | LR__0564
06ae0     01 2A 06 F1 | 	add	local03, #1
06ae4     90 FF 9F FD | 	jmp	#LR__0562
06ae8                 | LR__0565
06ae8                 | ' return true
06ae8     01 FA 65 F6 | 	neg	result1, #1
06aec                 | LR__0566
06aec     A7 F0 03 F6 | 	mov	ptra, fp
06af0     B2 00 A0 FD | 	call	#popregs_
06af4                 | _isdec_ret
06af4     2D 00 64 FD | 	ret
06af8                 | 
06af8                 | ' 
06af8                 | ' ' Check if the part is a string.  
06af8                 | ' 
06af8                 | ' function isstring(s as string) as boolean
06af8                 | _isstring
06af8     01 4A 05 F6 | 	mov	COUNT_, #1
06afc     A8 00 A0 FD | 	call	#pushregs_
06b00                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06b00     09 27 02 F6 | 	mov	local01, arg01
06b04     01 14 06 F6 | 	mov	arg02, #1
06b08     48 04 B2 FD | 	call	#__system__Left_S
06b0c     FD 12 02 F6 | 	mov	arg01, result1
06b10     A8 01 00 FF 
06b14     61 14 06 F6 | 	mov	arg02, ##@LR__5725
06b18     E0 E3 B1 FD | 	call	#__system___string_cmp
06b1c     00 FA 4D F2 | 	cmps	result1, #0 wz
06b20     28 00 90 5D |  if_ne	jmp	#LR__0570
06b24     13 13 02 F6 | 	mov	arg01, local01
06b28     01 14 06 F6 | 	mov	arg02, #1
06b2c     AC 04 B2 FD | 	call	#__system__Right_S
06b30     FD 12 02 F6 | 	mov	arg01, result1
06b34     A8 01 00 FF 
06b38     63 14 06 F6 | 	mov	arg02, ##@LR__5726
06b3c     BC E3 B1 FD | 	call	#__system___string_cmp
06b40     00 FA 4D F2 | 	cmps	result1, #0 wz
06b44     01 FA 65 A6 |  if_e	neg	result1, #1
06b48     04 00 90 AD |  if_e	jmp	#LR__0571
06b4c                 | LR__0570
06b4c     00 FA 05 F6 | 	mov	result1, #0
06b50                 | LR__0571
06b50     A7 F0 03 F6 | 	mov	ptra, fp
06b54     B2 00 A0 FD | 	call	#popregs_
06b58                 | _isstring_ret
06b58     2D 00 64 FD | 	ret
06b5c                 | 
06b5c                 | ' 
06b5c                 | ' ' getnoteval. Returns the frequency of note token
06b5c                 | ' 
06b5c                 | ' function getnoteval(token) as single
06b5c                 | _getnoteval
06b5c     02 4A 05 F6 | 	mov	COUNT_, #2
06b60     A8 00 A0 FD | 	call	#pushregs_
06b64     01 00 00 FF 
06b68     00 13 86 F1 | 	sub	arg01, ##768
06b6c     09 15 52 F6 | 	abs	arg02, arg01 wc
06b70     0C 14 16 FD | 	qdiv	arg02, #12
06b74     14 00 00 FF 
06b78     D8 E4 05 F1 | 	add	objptr, ##10456
06b7c     19 14 62 FD | 	getqy	arg02
06b80     0A 15 82 F6 | 	negc	arg02, arg02
06b84     02 14 66 F0 | 	shl	arg02, #2
06b88     F2 14 02 F1 | 	add	arg02, objptr
06b8c     0A 27 02 FB | 	rdlong	local01, arg02
06b90     09 15 52 F6 | 	abs	arg02, arg01 wc
06b94     0C 14 16 FD | 	qdiv	arg02, #12
06b98     14 00 00 FF 
06b9c     D8 E4 85 F1 | 	sub	objptr, ##10456
06ba0     01 12 06 F6 | 	mov	arg01, #1
06ba4                 | ' noteexp=1+(note/12) 
06ba4                 | ' return (2.0^noteexp)*notebase
06ba4     18 14 62 FD | 	getqx	arg02
06ba8     0A 13 82 F3 | 	sumc	arg01, arg02
06bac     09 13 52 F6 | 	abs	arg01, arg01 wc
06bb0     1F 28 C6 C9 |  if_b	decod	local02, #31
06bb4     00 28 06 36 |  if_ae	mov	local02, #0
06bb8     90 0D B2 FD | 	call	#__system___float_fromuns
06bbc     14 FB 61 F5 | 	xor	result1, local02
06bc0     FD 14 02 F6 | 	mov	arg02, result1
06bc4     1E 12 C6 F9 | 	decod	arg01, #30
06bc8     8C 20 B2 FD | 	call	#__system____builtin_powf
06bcc     FD 12 02 F6 | 	mov	arg01, result1
06bd0     13 15 02 F6 | 	mov	arg02, local01
06bd4     78 11 B2 FD | 	call	#__system___float_mul
06bd8     A7 F0 03 F6 | 	mov	ptra, fp
06bdc     B2 00 A0 FD | 	call	#popregs_
06be0                 | _getnoteval_ret
06be0     2D 00 64 FD | 	ret
06be4                 | 
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' '
06be4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06be4                 | ' '
06be4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06be4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06be4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06be4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06be4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06be4                 | ' ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' ' Helper functions to manage program lines
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '----- delete a line from a program
06be4                 | ' 
06be4                 | ' function deleteline(aline as ulong) as integer
06be4                 | _deleteline
06be4     02 4A 05 F6 | 	mov	COUNT_, #2
06be8     A8 00 A0 FD | 	call	#pushregs_
06bec     2C F0 07 F1 | 	add	ptra, #44
06bf0     04 4E 05 F1 | 	add	fp, #4
06bf4     A7 12 62 FC | 	wrlong	arg01, fp
06bf8     4A 00 00 FF 
06bfc     88 E4 05 F1 | 	add	objptr, ##38024
06c00     F2 26 02 FB | 	rdlong	local01, objptr
06c04     0C 4E 05 F1 | 	add	fp, #12
06c08     A7 26 62 FC | 	wrlong	local01, fp
06c0c     10 4E 85 F1 | 	sub	fp, #16
06c10                 | ' 
06c10                 | ' searchptr=programstart
06c10                 | ' do
06c10     3E 00 00 FF 
06c14     BC E5 85 F1 | 	sub	objptr, ##32188
06c18                 | LR__0580
06c18     14 4E 05 F1 | 	add	fp, #20
06c1c     A7 12 02 F6 | 	mov	arg01, fp
06c20     04 4E 85 F1 | 	sub	fp, #4
06c24     A7 14 02 FB | 	rdlong	arg02, fp
06c28     10 4E 85 F1 | 	sub	fp, #16
06c2c     18 16 06 F6 | 	mov	arg03, #24
06c30     60 D6 B1 FD | 	call	#_psram_spin2_read1
06c34     10 4E 05 F1 | 	add	fp, #16
06c38     A7 26 02 FB | 	rdlong	local01, fp
06c3c     08 4E 85 F1 | 	sub	fp, #8
06c40     A7 26 62 FC | 	wrlong	local01, fp
06c44     20 4E 05 F1 | 	add	fp, #32
06c48     A7 26 02 FB | 	rdlong	local01, fp
06c4c     18 4E 85 F1 | 	sub	fp, #24
06c50     A7 26 62 FC | 	wrlong	local01, fp
06c54     04 4E 05 F1 | 	add	fp, #4
06c58     A7 26 02 FB | 	rdlong	local01, fp
06c5c     10 4E 85 F1 | 	sub	fp, #16
06c60     A7 16 02 FB | 	rdlong	arg03, fp
06c64     04 4E 85 F1 | 	sub	fp, #4
06c68     0B 27 12 F2 | 	cmp	local01, arg03 wc
06c6c     28 4E 05 C1 |  if_b	add	fp, #40
06c70     A7 28 02 CB |  if_b	rdlong	local02, fp
06c74     28 4E 85 C1 |  if_b	sub	fp, #40
06c78     FF FF 3F CF 
06c7c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06c80     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06c84     0B 00 00 FF 
06c88     CC E4 85 F1 | 	sub	objptr, ##5836
06c8c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06c8c     14 4E 05 F1 | 	add	fp, #20
06c90     A7 26 02 FB | 	rdlong	local01, fp
06c94     10 4E 85 F1 | 	sub	fp, #16
06c98     A7 28 02 FB | 	rdlong	local02, fp
06c9c     04 4E 85 F1 | 	sub	fp, #4
06ca0     14 27 0A F2 | 	cmp	local01, local02 wz
06ca4     01 FA 65 56 |  if_ne	neg	result1, #1
06ca8     34 02 90 5D |  if_ne	jmp	#LR__0585
06cac     08 4E 05 F1 | 	add	fp, #8
06cb0     A7 12 02 FB | 	rdlong	arg01, fp
06cb4     08 4E 85 F1 | 	sub	fp, #8
06cb8     01 14 66 F6 | 	neg	arg02, #1
06cbc     0C AA B1 FD | 	call	#_pslpoke
06cc0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06cc0                 | ' 
06cc0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06cc0     28 4E 05 F1 | 	add	fp, #40
06cc4     A7 26 02 FB | 	rdlong	local01, fp
06cc8     28 4E 85 F1 | 	sub	fp, #40
06ccc     FF FF 3F FF 
06cd0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06cd4     24 4E 05 A1 |  if_e	add	fp, #36
06cd8     A7 28 02 AB |  if_e	rdlong	local02, fp
06cdc     24 4E 85 A1 |  if_e	sub	fp, #36
06ce0     FF FF 7F AF 
06ce4     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ce8     88 00 90 5D |  if_ne	jmp	#LR__0581
06cec     4A 00 00 FF 
06cf0     88 E4 05 F1 | 	add	objptr, ##38024
06cf4     00 04 80 FF 
06cf8     F2 00 68 FC | 	wrlong	##524288, objptr
06cfc     07 00 00 FF 
06d00     2C E4 85 F1 | 	sub	objptr, ##3628
06d04     00 04 80 FF 
06d08     F2 00 68 FC | 	wrlong	##524288, objptr
06d0c     07 00 00 FF 
06d10     30 E4 05 F1 | 	add	objptr, ##3632
06d14     F2 00 68 FC | 	wrlong	#0, objptr
06d18     04 E4 05 F1 | 	add	objptr, #4
06d1c     FF FF FF FF 
06d20     F2 FE 6B FC | 	wrlong	##-1, objptr
06d24     4A 00 00 FF 
06d28     90 E4 85 F1 | 	sub	objptr, ##38032
06d2c     00 12 06 F6 | 	mov	arg01, #0
06d30     01 14 66 F6 | 	neg	arg02, #1
06d34     94 A9 B1 FD | 	call	#_pslpoke
06d38     10 12 06 F6 | 	mov	arg01, #16
06d3c     01 14 66 F6 | 	neg	arg02, #1
06d40     88 A9 B1 FD | 	call	#_pslpoke
06d44     14 12 06 F6 | 	mov	arg01, #20
06d48     1E 14 CE F9 | 	bmask	arg02, #30
06d4c     7C A9 B1 FD | 	call	#_pslpoke
06d50     50 00 00 FF 
06d54     B8 E4 05 F1 | 	add	objptr, ##41144
06d58     00 04 80 FF 
06d5c     F2 00 68 FC | 	wrlong	##524288, objptr
06d60     04 E4 05 F1 | 	add	objptr, #4
06d64     00 04 80 FF 
06d68     F2 00 68 FC | 	wrlong	##524288, objptr
06d6c     50 00 00 FF 
06d70     BC E4 85 F1 | 	sub	objptr, ##41148
06d74                 | LR__0581
06d74                 | ' 
06d74                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06d74     28 4E 05 F1 | 	add	fp, #40
06d78     A7 26 02 FB | 	rdlong	local01, fp
06d7c     28 4E 85 F1 | 	sub	fp, #40
06d80     FF FF 3F FF 
06d84     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d88     74 00 90 5D |  if_ne	jmp	#LR__0582
06d8c     24 4E 05 F1 | 	add	fp, #36
06d90     A7 28 02 FB | 	rdlong	local02, fp
06d94     24 4E 85 F1 | 	sub	fp, #36
06d98     FF FF 7F FF 
06d9c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06da0     5C 00 90 AD |  if_e	jmp	#LR__0582
06da4     24 4E 05 F1 | 	add	fp, #36
06da8     A7 12 02 FB | 	rdlong	arg01, fp
06dac     24 4E 85 F1 | 	sub	fp, #36
06db0     14 12 06 F1 | 	add	arg01, #20
06db4     1E 14 CE F9 | 	bmask	arg02, #30
06db8     10 A9 B1 FD | 	call	#_pslpoke
06dbc     24 4E 05 F1 | 	add	fp, #36
06dc0     A7 26 02 FB | 	rdlong	local01, fp
06dc4     4A 00 00 FF 
06dc8     90 E4 05 F1 | 	add	objptr, ##38032
06dcc     F2 26 62 FC | 	wrlong	local01, objptr
06dd0     4A 00 00 FF 
06dd4     90 E4 85 F1 | 	sub	objptr, ##38032
06dd8     A7 12 02 FB | 	rdlong	arg01, fp
06ddc     24 4E 85 F1 | 	sub	fp, #36
06de0     18 AA B1 FD | 	call	#_pslpeek
06de4     4A 00 00 FF 
06de8     8C E4 05 F1 | 	add	objptr, ##38028
06dec     F2 FA 61 FC | 	wrlong	result1, objptr
06df0     4A 00 00 FF 
06df4     8C E4 85 F1 | 	sub	objptr, ##38028
06df8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06df8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06df8                 | '   lastline=pslpeek(header(4))
06df8                 | '   return 0
06df8     00 FA 05 F6 | 	mov	result1, #0
06dfc     E0 00 90 FD | 	jmp	#LR__0585
06e00                 | LR__0582
06e00                 | ' 
06e00                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06e00     28 4E 05 F1 | 	add	fp, #40
06e04     A7 26 02 FB | 	rdlong	local01, fp
06e08     28 4E 85 F1 | 	sub	fp, #40
06e0c     FF FF 3F FF 
06e10     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e14     58 00 90 AD |  if_e	jmp	#LR__0583
06e18     24 4E 05 F1 | 	add	fp, #36
06e1c     A7 28 02 FB | 	rdlong	local02, fp
06e20     24 4E 85 F1 | 	sub	fp, #36
06e24     FF FF 7F FF 
06e28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06e2c     40 00 90 5D |  if_ne	jmp	#LR__0583
06e30     28 4E 05 F1 | 	add	fp, #40
06e34     A7 12 02 FB | 	rdlong	arg01, fp
06e38     28 4E 85 F1 | 	sub	fp, #40
06e3c     10 12 06 F1 | 	add	arg01, #16
06e40     01 14 66 F6 | 	neg	arg02, #1
06e44     84 A8 B1 FD | 	call	#_pslpoke
06e48     28 4E 05 F1 | 	add	fp, #40
06e4c     A7 26 02 FB | 	rdlong	local01, fp
06e50     28 4E 85 F1 | 	sub	fp, #40
06e54     4A 00 00 FF 
06e58     88 E4 05 F1 | 	add	objptr, ##38024
06e5c     F2 26 62 FC | 	wrlong	local01, objptr
06e60     4A 00 00 FF 
06e64     88 E4 85 F1 | 	sub	objptr, ##38024
06e68                 | ' '   print "deleted first line"
06e68                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06e68                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06e68                 | '   return 0
06e68     00 FA 05 F6 | 	mov	result1, #0
06e6c     70 00 90 FD | 	jmp	#LR__0585
06e70                 | LR__0583
06e70                 | ' 
06e70                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06e70     28 4E 05 F1 | 	add	fp, #40
06e74     A7 26 02 FB | 	rdlong	local01, fp
06e78     28 4E 85 F1 | 	sub	fp, #40
06e7c     FF FF 3F FF 
06e80     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e84     24 4E 05 51 |  if_ne	add	fp, #36
06e88     A7 28 02 5B |  if_ne	rdlong	local02, fp
06e8c     24 4E 85 51 |  if_ne	sub	fp, #36
06e90     FF FF 7F 5F 
06e94     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06e98     40 00 90 AD |  if_e	jmp	#LR__0584
06e9c     28 4E 05 F1 | 	add	fp, #40
06ea0     A7 12 02 FB | 	rdlong	arg01, fp
06ea4     10 12 06 F1 | 	add	arg01, #16
06ea8     04 4E 85 F1 | 	sub	fp, #4
06eac     A7 14 02 FB | 	rdlong	arg02, fp
06eb0     24 4E 85 F1 | 	sub	fp, #36
06eb4     14 A8 B1 FD | 	call	#_pslpoke
06eb8     24 4E 05 F1 | 	add	fp, #36
06ebc     A7 12 02 FB | 	rdlong	arg01, fp
06ec0     14 12 06 F1 | 	add	arg01, #20
06ec4     04 4E 05 F1 | 	add	fp, #4
06ec8     A7 14 02 FB | 	rdlong	arg02, fp
06ecc     28 4E 85 F1 | 	sub	fp, #40
06ed0     F8 A7 B1 FD | 	call	#_pslpoke
06ed4                 | '    pslpoke(header(5)+16,header(4))  
06ed4                 | '    pslpoke(header(4)+20, header(5))
06ed4                 | '    return 0
06ed4     00 FA 05 F6 | 	mov	result1, #0
06ed8     04 00 90 FD | 	jmp	#LR__0585
06edc                 | LR__0584
06edc     00 FA 05 F6 | 	mov	result1, #0
06ee0                 | LR__0585
06ee0     A7 F0 03 F6 | 	mov	ptra, fp
06ee4     B2 00 A0 FD | 	call	#popregs_
06ee8                 | _deleteline_ret
06ee8     2D 00 64 FD | 	ret
06eec                 | 
06eec                 | ' 
06eec                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06eec                 | ' 
06eec                 | ' sub save_line
06eec                 | _save_line
06eec     03 4A 05 F6 | 	mov	COUNT_, #3
06ef0     A8 00 A0 FD | 	call	#pushregs_
06ef4     4A 00 00 FF 
06ef8     7C E4 05 F1 | 	add	objptr, ##38012
06efc     F2 16 02 FB | 	rdlong	arg03, objptr
06f00     01 16 06 F1 | 	add	arg03, #1
06f04     05 00 00 FF 
06f08     18 E4 85 F1 | 	sub	objptr, ##2584
06f0c     F2 14 02 FB | 	rdlong	arg02, objptr
06f10     0B 15 02 FD | 	qmul	arg02, arg03
06f14     0E 00 00 FF 
06f18     44 E4 85 F1 | 	sub	objptr, ##7236
06f1c     F2 12 02 FB | 	rdlong	arg01, objptr
06f20     37 00 00 FF 
06f24     20 E4 85 F1 | 	sub	objptr, ##28192
06f28     09 27 02 F6 | 	mov	local01, arg01
06f2c     18 28 62 FD | 	getqx	local02
06f30     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06f34                 | LR__0590
06f34     13 FB C9 FA | 	rdbyte	result1, local01 wz
06f38     01 26 06 51 |  if_ne	add	local01, #1
06f3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06f40                 | LR__0591
06f40     09 27 82 F1 | 	sub	local01, arg01
06f44     03 26 CE F7 | 	test	local01, #3 wz
06f48     02 26 46 50 |  if_ne	shr	local01, #2
06f4c     01 26 06 51 |  if_ne	add	local01, #1
06f50     02 26 66 50 |  if_ne	shl	local01, #2
06f54     14 2B 02 F6 | 	mov	local03, local02
06f58     13 2B 02 F1 | 	add	local03, local01
06f5c     43 00 00 FF 
06f60     5C E4 05 F1 | 	add	objptr, ##34396
06f64     F2 16 02 FB | 	rdlong	arg03, objptr
06f68     14 17 02 F1 | 	add	arg03, local02
06f6c     04 00 00 FF 
06f70     28 E4 05 F1 | 	add	objptr, ##2088
06f74     F2 16 62 FC | 	wrlong	arg03, objptr
06f78     04 E4 05 F1 | 	add	objptr, #4
06f7c     F2 26 62 FC | 	wrlong	local01, objptr
06f80     0C E4 85 F1 | 	sub	objptr, #12
06f84     F2 12 02 F6 | 	mov	arg01, objptr
06f88     04 00 00 FF 
06f8c     20 E4 85 F1 | 	sub	objptr, ##2080
06f90     F2 14 02 FB | 	rdlong	arg02, objptr
06f94     14 17 02 F6 | 	mov	arg03, local02
06f98     37 00 00 FF 
06f9c     90 E5 85 F1 | 	sub	objptr, ##28560
06fa0     8C D3 B1 FD | 	call	#_psram_spin2_write
06fa4     2B 00 00 FF 
06fa8     54 E5 05 F1 | 	add	objptr, ##22356
06fac     F2 12 02 FB | 	rdlong	arg01, objptr
06fb0     0C 00 00 FF 
06fb4     3C E4 05 F1 | 	add	objptr, ##6204
06fb8     F2 14 02 FB | 	rdlong	arg02, objptr
06fbc     14 15 02 F1 | 	add	arg02, local02
06fc0     13 17 02 F6 | 	mov	arg03, local01
06fc4     37 00 00 FF 
06fc8     90 E5 85 F1 | 	sub	objptr, ##28560
06fcc     60 D3 B1 FD | 	call	#_psram_spin2_write
06fd0     37 00 00 FF 
06fd4     90 E5 05 F1 | 	add	objptr, ##28560
06fd8     F2 26 02 FB | 	rdlong	local01, objptr
06fdc     15 27 02 F1 | 	add	local01, local03
06fe0     F2 26 62 FC | 	wrlong	local01, objptr
06fe4     43 00 00 FF 
06fe8     5C E4 85 F1 | 	sub	objptr, ##34396
06fec     A7 F0 03 F6 | 	mov	ptra, fp
06ff0     B2 00 A0 FD | 	call	#popregs_
06ff4                 | _save_line_ret
06ff4     2D 00 64 FD | 	ret
06ff8                 | 
06ff8                 | ' 
06ff8                 | ' '----- Insert a new line into the middle of the program
06ff8                 | ' 
06ff8                 | ' function insertline(aline as ulong) as integer
06ff8                 | _insertline
06ff8     02 4A 05 F6 | 	mov	COUNT_, #2
06ffc     A8 00 A0 FD | 	call	#pushregs_
07000     28 F0 07 F1 | 	add	ptra, #40
07004     04 4E 05 F1 | 	add	fp, #4
07008     A7 12 62 FC | 	wrlong	arg01, fp
0700c     4A 00 00 FF 
07010     88 E4 05 F1 | 	add	objptr, ##38024
07014     F2 26 02 FB | 	rdlong	local01, objptr
07018     04 4E 05 F1 | 	add	fp, #4
0701c     A7 26 62 FC | 	wrlong	local01, fp
07020     08 4E 85 F1 | 	sub	fp, #8
07024                 | ' 
07024                 | ' do
07024     3E 00 00 FF 
07028     BC E5 85 F1 | 	sub	objptr, ##32188
0702c                 | LR__0600
0702c     10 4E 05 F1 | 	add	fp, #16
07030     A7 12 02 F6 | 	mov	arg01, fp
07034     08 4E 85 F1 | 	sub	fp, #8
07038     A7 14 02 FB | 	rdlong	arg02, fp
0703c     08 4E 85 F1 | 	sub	fp, #8
07040     18 16 06 F6 | 	mov	arg03, #24
07044     4C D2 B1 FD | 	call	#_psram_spin2_read1
07048     08 4E 05 F1 | 	add	fp, #8
0704c     A7 26 02 FB | 	rdlong	local01, fp
07050     04 4E 05 F1 | 	add	fp, #4
07054     A7 26 62 FC | 	wrlong	local01, fp
07058     18 4E 05 F1 | 	add	fp, #24
0705c     A7 26 02 FB | 	rdlong	local01, fp
07060     1C 4E 85 F1 | 	sub	fp, #28
07064     A7 26 62 FC | 	wrlong	local01, fp
07068     08 4E 05 F1 | 	add	fp, #8
0706c     A7 26 02 FB | 	rdlong	local01, fp
07070     0C 4E 85 F1 | 	sub	fp, #12
07074     A7 16 02 FB | 	rdlong	arg03, fp
07078     04 4E 85 F1 | 	sub	fp, #4
0707c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07080     24 4E 05 C1 |  if_b	add	fp, #36
07084     A7 28 02 CB |  if_b	rdlong	local02, fp
07088     24 4E 85 C1 |  if_b	sub	fp, #36
0708c     FF FF 3F CF 
07090     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07094     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07098     0B 00 00 FF 
0709c     CC E4 85 F1 | 	sub	objptr, ##5836
070a0                 | ' 
070a0                 | ' if header(0)=aline then return -1 				' delete it first
070a0     10 4E 05 F1 | 	add	fp, #16
070a4     A7 26 02 FB | 	rdlong	local01, fp
070a8     0C 4E 85 F1 | 	sub	fp, #12
070ac     A7 28 02 FB | 	rdlong	local02, fp
070b0     04 4E 85 F1 | 	sub	fp, #4
070b4     14 27 0A F2 | 	cmp	local01, local02 wz
070b8     01 FA 65 A6 |  if_e	neg	result1, #1
070bc     48 01 90 AD |  if_e	jmp	#LR__0603
070c0                 | ' if header(0)<aline then return -2 				' end of program reached
070c0     10 4E 05 F1 | 	add	fp, #16
070c4     A7 26 02 FB | 	rdlong	local01, fp
070c8     0C 4E 85 F1 | 	sub	fp, #12
070cc     A7 16 02 FB | 	rdlong	arg03, fp
070d0     04 4E 85 F1 | 	sub	fp, #4
070d4     0B 27 12 F2 | 	cmp	local01, arg03 wc
070d8     02 FA 65 C6 |  if_b	neg	result1, #2
070dc     28 01 90 CD |  if_b	jmp	#LR__0603
070e0                 | ' 
070e0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
070e0     20 4E 05 F1 | 	add	fp, #32
070e4     A7 26 02 FB | 	rdlong	local01, fp
070e8     20 4E 85 F1 | 	sub	fp, #32
070ec     FF FF 7F FF 
070f0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
070f4     78 00 90 5D |  if_ne	jmp	#LR__0601
070f8     43 00 00 FF 
070fc     5C E4 05 F1 | 	add	objptr, ##34396
07100     F2 26 02 FB | 	rdlong	local01, objptr
07104     07 00 00 FF 
07108     2C E4 05 F1 | 	add	objptr, ##3628
0710c     F2 26 62 FC | 	wrlong	local01, objptr
07110     0C 4E 05 F1 | 	add	fp, #12
07114     A7 12 02 FB | 	rdlong	arg01, fp
07118     0C 4E 85 F1 | 	sub	fp, #12
0711c     10 12 06 F1 | 	add	arg01, #16
07120     07 00 00 FF 
07124     2C E4 85 F1 | 	sub	objptr, ##3628
07128     F2 14 02 FB | 	rdlong	arg02, objptr
0712c     43 00 00 FF 
07130     5C E4 85 F1 | 	sub	objptr, ##34396
07134     94 A5 B1 FD | 	call	#_pslpoke
07138     47 00 00 FF 
0713c     8C E4 05 F1 | 	add	objptr, ##36492
07140     FF FF FF FF 
07144     F2 FE 6B FC | 	wrlong	##-1, objptr
07148     0C 4E 05 F1 | 	add	fp, #12
0714c     A7 26 02 FB | 	rdlong	local01, fp
07150     0C 4E 85 F1 | 	sub	fp, #12
07154     04 E4 05 F1 | 	add	objptr, #4
07158     F2 26 62 FC | 	wrlong	local01, objptr
0715c     47 00 00 FF 
07160     90 E4 85 F1 | 	sub	objptr, ##36496
07164     84 FD BF FD | 	call	#_save_line
07168                 | '   programstart=programptr
07168                 | '   pslpoke(lineptr2+16,programptr)
07168                 | '   ucompiledline(4)=$FFFF_FFFF
07168                 | '   ucompiledline(5)=lineptr2
07168                 | '   save_line
07168                 | '   return 0
07168     00 FA 05 F6 | 	mov	result1, #0
0716c     98 00 90 FD | 	jmp	#LR__0603
07170                 | LR__0601
07170                 | ' 
07170                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07170     20 4E 05 F1 | 	add	fp, #32
07174     A7 26 02 FB | 	rdlong	local01, fp
07178     20 4E 85 F1 | 	sub	fp, #32
0717c     FF FF 7F FF 
07180     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07184     7C 00 90 AD |  if_e	jmp	#LR__0602
07188     20 4E 05 F1 | 	add	fp, #32
0718c     A7 26 02 FB | 	rdlong	local01, fp
07190     47 00 00 FF 
07194     8C E4 05 F1 | 	add	objptr, ##36492
07198     F2 26 62 FC | 	wrlong	local01, objptr
0719c     14 4E 85 F1 | 	sub	fp, #20
071a0     A7 26 02 FB | 	rdlong	local01, fp
071a4     04 E4 05 F1 | 	add	objptr, #4
071a8     F2 26 62 FC | 	wrlong	local01, objptr
071ac     A7 12 02 FB | 	rdlong	arg01, fp
071b0     0C 4E 85 F1 | 	sub	fp, #12
071b4     10 12 06 F1 | 	add	arg01, #16
071b8     04 00 00 FF 
071bc     34 E4 85 F1 | 	sub	objptr, ##2100
071c0     F2 14 02 FB | 	rdlong	arg02, objptr
071c4     43 00 00 FF 
071c8     5C E4 85 F1 | 	sub	objptr, ##34396
071cc     FC A4 B1 FD | 	call	#_pslpoke
071d0     20 4E 05 F1 | 	add	fp, #32
071d4     A7 12 02 FB | 	rdlong	arg01, fp
071d8     20 4E 85 F1 | 	sub	fp, #32
071dc     14 12 06 F1 | 	add	arg01, #20
071e0     43 00 00 FF 
071e4     5C E4 05 F1 | 	add	objptr, ##34396
071e8     F2 14 02 FB | 	rdlong	arg02, objptr
071ec     43 00 00 FF 
071f0     5C E4 85 F1 | 	sub	objptr, ##34396
071f4     D4 A4 B1 FD | 	call	#_pslpoke
071f8     F0 FC BF FD | 	call	#_save_line
071fc                 | '   ucompiledline(4)=header(4)
071fc                 | '   ucompiledline(5)=lineptr2
071fc                 | '   pslpoke(lineptr2+16,programptr)
071fc                 | '   pslpoke(header(4)+20,programptr)
071fc                 | '   save_line
071fc                 | '   return 0
071fc     00 FA 05 F6 | 	mov	result1, #0
07200     04 00 90 FD | 	jmp	#LR__0603
07204                 | LR__0602
07204     00 FA 05 F6 | 	mov	result1, #0
07208                 | LR__0603
07208     A7 F0 03 F6 | 	mov	ptra, fp
0720c     B2 00 A0 FD | 	call	#popregs_
07210                 | _insertline_ret
07210     2D 00 64 FD | 	ret
07214                 | 
07214                 | ' 
07214                 | ' '----- Adds a new line at the end of the program
07214                 | ' 
07214                 | ' sub add_line_at_end(aline) 
07214                 | _add_line_at_end
07214     4A 00 00 FF 
07218     8C E4 05 F1 | 	add	objptr, ##38028
0721c     F2 12 62 FC | 	wrlong	arg01, objptr
07220     04 E4 05 F1 | 	add	objptr, #4
07224     F2 14 02 FB | 	rdlong	arg02, objptr
07228     03 00 00 FF 
0722c     04 E4 85 F1 | 	sub	objptr, ##1540
07230     F2 14 62 FC | 	wrlong	arg02, objptr
07234     03 00 00 FF 
07238     04 E4 05 F1 | 	add	objptr, ##1540
0723c     F2 12 02 FB | 	rdlong	arg01, objptr
07240     14 12 06 F1 | 	add	arg01, #20
07244     07 00 00 FF 
07248     34 E4 85 F1 | 	sub	objptr, ##3636
0724c     F2 14 02 FB | 	rdlong	arg02, objptr
07250     43 00 00 FF 
07254     5C E4 85 F1 | 	sub	objptr, ##34396
07258     70 A4 B1 FD | 	call	#_pslpoke
0725c     43 00 00 FF 
07260     5C E4 05 F1 | 	add	objptr, ##34396
07264     F2 14 02 FB | 	rdlong	arg02, objptr
07268     07 00 00 FF 
0726c     34 E4 05 F1 | 	add	objptr, ##3636
07270     F2 14 62 FC | 	wrlong	arg02, objptr
07274     03 00 00 FF 
07278     00 E4 85 F1 | 	sub	objptr, ##1536
0727c     FF FF BF FF 
07280     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07284                 | ' 
07284                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07284                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07284     04 00 00 FF 
07288     34 E4 85 F1 | 	sub	objptr, ##2100
0728c     F2 14 02 FB | 	rdlong	arg02, objptr
07290     43 00 00 FF 
07294     5C E4 85 F1 | 	sub	objptr, ##34396
07298     00 04 00 FF 
0729c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
072a0     47 00 00 AF 
072a4     8C E4 05 A1 |  if_e	add	objptr, ##36492
072a8     FF FF FF AF 
072ac     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
072b0     47 00 00 AF 
072b4     8C E4 85 A1 |  if_e	sub	objptr, ##36492
072b8     30 FC BF FD | 	call	#_save_line
072bc     43 00 00 FF 
072c0     5C E4 05 F1 | 	add	objptr, ##34396
072c4     F2 12 02 FB | 	rdlong	arg01, objptr
072c8     43 00 00 FF 
072cc     5C E4 85 F1 | 	sub	objptr, ##34396
072d0     01 14 66 F6 | 	neg	arg02, #1
072d4     F4 A3 B1 FD | 	call	#_pslpoke
072d8                 | _add_line_at_end_ret
072d8     2D 00 64 FD | 	ret
072dc                 | 
072dc                 | ' 
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' 
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' 
072dc                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
072dc                 | ' 
072dc                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
072dc                 | _compile_immediate
072dc     0A 4A 05 F6 | 	mov	COUNT_, #10
072e0     A8 00 A0 FD | 	call	#pushregs_
072e4                 | _compile_immediate_enter
072e4     09 2D 02 F6 | 	mov	local04, arg01
072e8     0A 2F 02 F6 | 	mov	local05, arg02
072ec     00 30 06 F6 | 	mov	local06, #0
072f0     00 32 06 F6 | 	mov	local07, #0
072f4     00 34 06 F6 | 	mov	local08, #0
072f8                 | ' 
072f8                 | ' ' linetype=cont+1
072f8                 | ' ' 1 : this is the first part of the line that will continue
072f8                 | ' ' 2 - this is the continuation of the line
072f8                 | ' ' 3 - this is the last continued line
072f8                 | ' ' 4 - this is the one and only part
072f8                 | ' ' 5 - continued after if/else
072f8                 | ' 
072f8                 | ' err=0
072f8                 | ' cmd=0
072f8                 | ' vars=0
072f8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
072f8     02 2C 0E F2 | 	cmp	local04, #2 wz
072fc     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07300     24 00 90 5D |  if_ne	jmp	#LR__0610
07304     35 00 00 FF 
07308     10 E4 05 F1 | 	add	objptr, ##27152
0730c     F2 32 02 FB | 	rdlong	local07, objptr
07310     01 36 06 F6 | 	mov	local09, #1
07314     02 00 00 FF 
07318     34 E4 05 F1 | 	add	objptr, ##1076
0731c     F2 02 68 FC | 	wrlong	#1, objptr
07320     37 00 00 FF 
07324     44 E4 85 F1 | 	sub	objptr, ##28228
07328                 | LR__0610
07328                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07328     04 2C 0E F2 | 	cmp	local04, #4 wz
0732c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07330     30 00 90 5D |  if_ne	jmp	#LR__0611
07334     35 00 00 FF 
07338     18 E4 05 F1 | 	add	objptr, ##27160
0733c     F2 32 02 FB | 	rdlong	local07, objptr
07340     02 36 06 F6 | 	mov	local09, #2
07344     02 00 00 FF 
07348     2C E4 05 F1 | 	add	objptr, ##1068
0734c     F2 04 68 FC | 	wrlong	#2, objptr
07350     13 00 00 FF 
07354     38 E4 05 F1 | 	add	objptr, ##9784
07358     F2 04 68 FC | 	wrlong	#2, objptr
0735c     4A 00 00 FF 
07360     7C E4 85 F1 | 	sub	objptr, ##38012
07364                 | LR__0611
07364                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07364     05 2C 0E F2 | 	cmp	local04, #5 wz
07368     40 00 90 5D |  if_ne	jmp	#LR__0612
0736c     37 00 00 FF 
07370     44 E4 05 F1 | 	add	objptr, ##28228
07374     F2 FC 01 FB | 	rdlong	result2, objptr
07378     FE 36 02 F6 | 	mov	local09, result2
0737c     03 36 66 F0 | 	shl	local09, #3
07380     02 00 00 FF 
07384     38 E4 85 F1 | 	sub	objptr, ##1080
07388     F2 36 02 F1 | 	add	local09, objptr
0738c     04 36 06 F1 | 	add	local09, #4
07390     1B 33 02 FB | 	rdlong	local07, local09
07394     01 FC 05 F1 | 	add	result2, #1
07398     02 00 00 FF 
0739c     38 E4 05 F1 | 	add	objptr, ##1080
073a0     F2 FC 61 FC | 	wrlong	result2, objptr
073a4     37 00 00 FF 
073a8     44 E4 85 F1 | 	sub	objptr, ##28228
073ac                 | LR__0612
073ac                 | ' 
073ac                 | ' 'print  "In compile_immediate cmd=:", cmd
073ac                 | ' 451 select case cmd
073ac     5C 32 0E F2 | 	cmp	local07, #92 wz
073b0     C4 02 90 AD |  if_e	jmp	#LR__0613
073b4     B9 32 0E F2 | 	cmp	local07, #185 wz
073b8     C8 02 90 AD |  if_e	jmp	#LR__0614
073bc     47 32 0E F2 | 	cmp	local07, #71 wz
073c0     D0 02 90 AD |  if_e	jmp	#LR__0615
073c4     59 32 0E F2 | 	cmp	local07, #89 wz
073c8     D8 02 90 AD |  if_e	jmp	#LR__0616
073cc     C3 32 0E F2 | 	cmp	local07, #195 wz
073d0     E0 02 90 AD |  if_e	jmp	#LR__0617
073d4     45 32 0E F2 | 	cmp	local07, #69 wz
073d8     E4 02 90 AD |  if_e	jmp	#LR__0618
073dc     69 32 0E F2 | 	cmp	local07, #105 wz
073e0     EC 02 90 AD |  if_e	jmp	#LR__0619
073e4     40 32 0E F2 | 	cmp	local07, #64 wz
073e8     C4 06 90 AD |  if_e	jmp	#LR__0692
073ec     B4 32 0E F2 | 	cmp	local07, #180 wz
073f0     E8 02 90 AD |  if_e	jmp	#LR__0620
073f4     49 32 0E F2 | 	cmp	local07, #73 wz
073f8     EC 02 90 AD |  if_e	jmp	#LR__0621
073fc     50 32 0E F2 | 	cmp	local07, #80 wz
07400     F0 02 90 AD |  if_e	jmp	#LR__0622
07404     AE 32 0E F2 | 	cmp	local07, #174 wz
07408     F8 02 90 AD |  if_e	jmp	#LR__0623
0740c     B0 32 0E F2 | 	cmp	local07, #176 wz
07410     FC 02 90 AD |  if_e	jmp	#LR__0624
07414     AF 32 0E F2 | 	cmp	local07, #175 wz
07418     00 03 90 AD |  if_e	jmp	#LR__0625
0741c     B1 32 0E F2 | 	cmp	local07, #177 wz
07420     04 03 90 AD |  if_e	jmp	#LR__0626
07424     68 32 0E F2 | 	cmp	local07, #104 wz
07428     08 03 90 AD |  if_e	jmp	#LR__0627
0742c     B7 32 0E F2 | 	cmp	local07, #183 wz
07430     7C 06 90 AD |  if_e	jmp	#LR__0692
07434     74 32 0E F2 | 	cmp	local07, #116 wz
07438     04 03 90 AD |  if_e	jmp	#LR__0628
0743c     73 32 0E F2 | 	cmp	local07, #115 wz
07440     0C 03 90 AD |  if_e	jmp	#LR__0629
07444     6C 32 0E F2 | 	cmp	local07, #108 wz
07448     14 03 90 AD |  if_e	jmp	#LR__0630
0744c     89 32 0E F2 | 	cmp	local07, #137 wz
07450     5C 06 90 AD |  if_e	jmp	#LR__0692
07454     C2 32 0E F2 | 	cmp	local07, #194 wz
07458     14 03 90 AD |  if_e	jmp	#LR__0631
0745c     72 32 0E F2 | 	cmp	local07, #114 wz
07460     18 03 90 AD |  if_e	jmp	#LR__0632
07464     5D 32 0E F2 | 	cmp	local07, #93 wz
07468     1C 03 90 AD |  if_e	jmp	#LR__0633
0746c     96 32 0E F2 | 	cmp	local07, #150 wz
07470     24 03 90 AD |  if_e	jmp	#LR__0634
07474     43 32 0E F2 | 	cmp	local07, #67 wz
07478     28 03 90 AD |  if_e	jmp	#LR__0635
0747c     5A 32 0E F2 | 	cmp	local07, #90 wz
07480     30 03 90 AD |  if_e	jmp	#LR__0636
07484     AB 32 0E F2 | 	cmp	local07, #171 wz
07488     24 06 90 AD |  if_e	jmp	#LR__0692
0748c     BD 32 0E F2 | 	cmp	local07, #189 wz
07490     30 03 90 AD |  if_e	jmp	#LR__0637
07494     BB 32 0E F2 | 	cmp	local07, #187 wz
07498     38 03 90 AD |  if_e	jmp	#LR__0638
0749c     4E 32 0E F2 | 	cmp	local07, #78 wz
074a0     40 03 90 AD |  if_e	jmp	#LR__0639
074a4     A9 32 0E F2 | 	cmp	local07, #169 wz
074a8     58 03 90 AD |  if_e	jmp	#LR__0641
074ac     46 32 0E F2 | 	cmp	local07, #70 wz
074b0     70 03 90 AD |  if_e	jmp	#LR__0643
074b4     71 32 0E F2 | 	cmp	local07, #113 wz
074b8     78 03 90 AD |  if_e	jmp	#LR__0644
074bc     60 32 0E F2 | 	cmp	local07, #96 wz
074c0     7C 03 90 AD |  if_e	jmp	#LR__0645
074c4     4A 32 0E F2 | 	cmp	local07, #74 wz
074c8     80 03 90 AD |  if_e	jmp	#LR__0646
074cc     48 32 0E F2 | 	cmp	local07, #72 wz
074d0     84 03 90 AD |  if_e	jmp	#LR__0647
074d4     58 32 0E F2 | 	cmp	local07, #88 wz
074d8     8C 03 90 AD |  if_e	jmp	#LR__0648
074dc     5F 32 0E F2 | 	cmp	local07, #95 wz
074e0     94 03 90 AD |  if_e	jmp	#LR__0649
074e4     B5 32 0E F2 | 	cmp	local07, #181 wz
074e8     98 03 90 AD |  if_e	jmp	#LR__0650
074ec     8A 32 0E F2 | 	cmp	local07, #138 wz
074f0     A0 03 90 AD |  if_e	jmp	#LR__0651
074f4     4C 32 0E F2 | 	cmp	local07, #76 wz
074f8     A4 03 90 AD |  if_e	jmp	#LR__0652
074fc     52 32 0E F2 | 	cmp	local07, #82 wz
07500     AC 03 90 AD |  if_e	jmp	#LR__0653
07504     97 32 0E F2 | 	cmp	local07, #151 wz
07508     B4 03 90 AD |  if_e	jmp	#LR__0654
0750c     C6 32 0E F2 | 	cmp	local07, #198 wz
07510     B8 03 90 AD |  if_e	jmp	#LR__0655
07514     61 32 0E F2 | 	cmp	local07, #97 wz
07518     BC 03 90 AD |  if_e	jmp	#LR__0656
0751c     63 32 0E F2 | 	cmp	local07, #99 wz
07520     C0 03 90 AD |  if_e	jmp	#LR__0657
07524     41 32 0E F2 | 	cmp	local07, #65 wz
07528     84 05 90 AD |  if_e	jmp	#LR__0692
0752c     4B 32 0E F2 | 	cmp	local07, #75 wz
07530     BC 03 90 AD |  if_e	jmp	#LR__0658
07534     C1 32 0E F2 | 	cmp	local07, #193 wz
07538     C0 03 90 AD |  if_e	jmp	#LR__0659
0753c     B3 32 0E F2 | 	cmp	local07, #179 wz
07540     C4 03 90 AD |  if_e	jmp	#LR__0660
07544     5E 32 0E F2 | 	cmp	local07, #94 wz
07548     C8 03 90 AD |  if_e	jmp	#LR__0661
0754c     7C 32 0E F2 | 	cmp	local07, #124 wz
07550     CC 03 90 AD |  if_e	jmp	#LR__0662
07554     7D 32 0E F2 | 	cmp	local07, #125 wz
07558     D0 03 90 AD |  if_e	jmp	#LR__0663
0755c     7E 32 0E F2 | 	cmp	local07, #126 wz
07560     D4 03 90 AD |  if_e	jmp	#LR__0664
07564     7F 32 0E F2 | 	cmp	local07, #127 wz
07568     D8 03 90 AD |  if_e	jmp	#LR__0665
0756c     80 32 0E F2 | 	cmp	local07, #128 wz
07570     DC 03 90 AD |  if_e	jmp	#LR__0666
07574     55 32 0E F2 | 	cmp	local07, #85 wz
07578     E0 03 90 AD |  if_e	jmp	#LR__0667
0757c     75 32 0E F2 | 	cmp	local07, #117 wz
07580     E4 03 90 AD |  if_e	jmp	#LR__0668
07584     42 32 0E F2 | 	cmp	local07, #66 wz
07588     EC 03 90 AD |  if_e	jmp	#LR__0669
0758c     95 32 0E F2 | 	cmp	local07, #149 wz
07590     F4 03 90 AD |  if_e	jmp	#LR__0670
07594     AC 32 0E F2 | 	cmp	local07, #172 wz
07598     14 05 90 AD |  if_e	jmp	#LR__0692
0759c     81 32 0E F2 | 	cmp	local07, #129 wz
075a0     F0 03 90 AD |  if_e	jmp	#LR__0671
075a4     44 32 0E F2 | 	cmp	local07, #68 wz
075a8     F4 03 90 AD |  if_e	jmp	#LR__0672
075ac     BC 32 0E F2 | 	cmp	local07, #188 wz
075b0     F8 03 90 AD |  if_e	jmp	#LR__0673
075b4     88 32 0E F2 | 	cmp	local07, #136 wz
075b8     F4 04 90 AD |  if_e	jmp	#LR__0692
075bc     B6 32 0E F2 | 	cmp	local07, #182 wz
075c0     F8 03 90 AD |  if_e	jmp	#LR__0674
075c4     92 32 0E F2 | 	cmp	local07, #146 wz
075c8     00 04 90 AD |  if_e	jmp	#LR__0675
075cc     BE 32 0E F2 | 	cmp	local07, #190 wz
075d0     98 05 90 AD |  if_e	jmp	#LR__0693
075d4     C7 32 0E F2 | 	cmp	local07, #199 wz
075d8     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
075dc     D0 04 90 AD |  if_e	jmp	#LR__0692
075e0     4D 32 0E F2 | 	cmp	local07, #77 wz
075e4     F0 03 90 AD |  if_e	jmp	#LR__0676
075e8     51 32 0E F2 | 	cmp	local07, #81 wz
075ec     F8 03 90 AD |  if_e	jmp	#LR__0677
075f0     8E 32 0E F2 | 	cmp	local07, #142 wz
075f4     00 04 90 AD |  if_e	jmp	#LR__0678
075f8     90 32 0E F2 | 	cmp	local07, #144 wz
075fc     04 04 90 AD |  if_e	jmp	#LR__0679
07600     8D 32 0E F2 | 	cmp	local07, #141 wz
07604     08 04 90 AD |  if_e	jmp	#LR__0680
07608     8C 32 0E F2 | 	cmp	local07, #140 wz
0760c     0C 04 90 AD |  if_e	jmp	#LR__0681
07610     91 32 0E F2 | 	cmp	local07, #145 wz
07614     10 04 90 AD |  if_e	jmp	#LR__0682
07618     8B 32 0E F2 | 	cmp	local07, #139 wz
0761c     14 04 90 AD |  if_e	jmp	#LR__0683
07620     8F 32 0E F2 | 	cmp	local07, #143 wz
07624     18 04 90 AD |  if_e	jmp	#LR__0684
07628     B2 32 0E F2 | 	cmp	local07, #178 wz
0762c     1C 04 90 AD |  if_e	jmp	#LR__0685
07630     6D 32 0E F2 | 	cmp	local07, #109 wz
07634     24 04 90 AD |  if_e	jmp	#LR__0686
07638     70 32 0E F2 | 	cmp	local07, #112 wz
0763c     70 04 90 AD |  if_e	jmp	#LR__0692
07640     56 32 0E F2 | 	cmp	local07, #86 wz
07644     20 04 90 AD |  if_e	jmp	#LR__0687
07648     57 32 0E F2 | 	cmp	local07, #87 wz
0764c     60 04 90 AD |  if_e	jmp	#LR__0692
07650     79 32 0E F2 | 	cmp	local07, #121 wz
07654     1C 04 90 AD |  if_e	jmp	#LR__0688
07658     77 32 0E F2 | 	cmp	local07, #119 wz
0765c     20 04 90 AD |  if_e	jmp	#LR__0689
07660     78 32 0E F2 | 	cmp	local07, #120 wz
07664     24 04 90 AD |  if_e	jmp	#LR__0690
07668     01 00 00 FF 
0766c     04 32 0E F2 | 	cmp	local07, ##516 wz
07670     24 04 90 AD |  if_e	jmp	#LR__0691
07674     F4 04 90 FD | 	jmp	#LR__0693
07678                 | LR__0613
07678     40 0B B0 FD | 	call	#_compile_fun_2p
0767c     FD 30 02 F6 | 	mov	local06, result1
07680     2C 04 90 FD | 	jmp	#LR__0692
07684                 | LR__0614
07684     04 0E B0 FD | 	call	#_compile_fun_varp
07688     FD 34 02 F6 | 	mov	local08, result1
0768c     FE 30 02 F6 | 	mov	local06, result2
07690     1C 04 90 FD | 	jmp	#LR__0692
07694                 | LR__0615
07694     F4 0D B0 FD | 	call	#_compile_fun_varp
07698     FD 34 02 F6 | 	mov	local08, result1
0769c     FE 30 02 F6 | 	mov	local06, result2
076a0     0C 04 90 FD | 	jmp	#LR__0692
076a4                 | LR__0616
076a4     E4 0D B0 FD | 	call	#_compile_fun_varp
076a8     FD 34 02 F6 | 	mov	local08, result1
076ac     FE 30 02 F6 | 	mov	local06, result2
076b0     FC 03 90 FD | 	jmp	#LR__0692
076b4                 | LR__0617
076b4                 | ' return expr()
076b4     B8 3C B0 FD | 	call	#_expr
076b8     FD 30 02 F6 | 	mov	local06, result1
076bc     F0 03 90 FD | 	jmp	#LR__0692
076c0                 | LR__0618
076c0     C8 0D B0 FD | 	call	#_compile_fun_varp
076c4     FD 34 02 F6 | 	mov	local08, result1
076c8     FE 30 02 F6 | 	mov	local06, result2
076cc     E0 03 90 FD | 	jmp	#LR__0692
076d0                 | LR__0619
076d0                 | ' return expr()
076d0     9C 3C B0 FD | 	call	#_expr
076d4     FD 30 02 F6 | 	mov	local06, result1
076d8     D4 03 90 FD | 	jmp	#LR__0692
076dc                 | LR__0620
076dc                 | ' return expr()
076dc     90 3C B0 FD | 	call	#_expr
076e0     FD 30 02 F6 | 	mov	local06, result1
076e4     C8 03 90 FD | 	jmp	#LR__0692
076e8                 | LR__0621
076e8                 | ' return expr()
076e8     84 3C B0 FD | 	call	#_expr
076ec     FD 30 02 F6 | 	mov	local06, result1
076f0     BC 03 90 FD | 	jmp	#LR__0692
076f4                 | LR__0622
076f4     94 0D B0 FD | 	call	#_compile_fun_varp
076f8     FD 34 02 F6 | 	mov	local08, result1
076fc     FE 30 02 F6 | 	mov	local06, result2
07700     AC 03 90 FD | 	jmp	#LR__0692
07704                 | LR__0623
07704     B4 0A B0 FD | 	call	#_compile_fun_2p
07708     FD 30 02 F6 | 	mov	local06, result1
0770c     A0 03 90 FD | 	jmp	#LR__0692
07710                 | LR__0624
07710     A8 0A B0 FD | 	call	#_compile_fun_2p
07714     FD 30 02 F6 | 	mov	local06, result1
07718     94 03 90 FD | 	jmp	#LR__0692
0771c                 | LR__0625
0771c     9C 0A B0 FD | 	call	#_compile_fun_2p
07720     FD 30 02 F6 | 	mov	local06, result1
07724     88 03 90 FD | 	jmp	#LR__0692
07728                 | LR__0626
07728     90 0A B0 FD | 	call	#_compile_fun_2p
0772c     FD 30 02 F6 | 	mov	local06, result1
07730     7C 03 90 FD | 	jmp	#LR__0692
07734                 | LR__0627
07734                 | ' return expr()
07734     38 3C B0 FD | 	call	#_expr
07738     FD 30 02 F6 | 	mov	local06, result1
0773c     70 03 90 FD | 	jmp	#LR__0692
07740                 | LR__0628
07740     48 0D B0 FD | 	call	#_compile_fun_varp
07744     FD 34 02 F6 | 	mov	local08, result1
07748     FE 30 02 F6 | 	mov	local06, result2
0774c     60 03 90 FD | 	jmp	#LR__0692
07750                 | LR__0629
07750     38 0D B0 FD | 	call	#_compile_fun_varp
07754     FD 34 02 F6 | 	mov	local08, result1
07758     FE 30 02 F6 | 	mov	local06, result2
0775c     50 03 90 FD | 	jmp	#LR__0692
07760                 | LR__0630
07760     28 0D B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     40 03 90 FD | 	jmp	#LR__0692
07770                 | LR__0631
07770                 | ' return expr()
07770     FC 3B B0 FD | 	call	#_expr
07774     FD 30 02 F6 | 	mov	local06, result1
07778     34 03 90 FD | 	jmp	#LR__0692
0777c                 | LR__0632
0777c     30 22 B0 FD | 	call	#_compile_dim
07780     FD 30 02 F6 | 	mov	local06, result1
07784     E4 03 90 FD | 	jmp	#LR__0693
07788                 | LR__0633
07788     00 0D B0 FD | 	call	#_compile_fun_varp
0778c     FD 34 02 F6 | 	mov	local08, result1
07790     FE 30 02 F6 | 	mov	local06, result2
07794     18 03 90 FD | 	jmp	#LR__0692
07798                 | LR__0634
07798     20 0A B0 FD | 	call	#_compile_fun_2p
0779c     FD 30 02 F6 | 	mov	local06, result1
077a0     0C 03 90 FD | 	jmp	#LR__0692
077a4                 | LR__0635
077a4     E4 0C B0 FD | 	call	#_compile_fun_varp
077a8     FD 34 02 F6 | 	mov	local08, result1
077ac     FE 30 02 F6 | 	mov	local06, result2
077b0     FC 02 90 FD | 	jmp	#LR__0692
077b4                 | LR__0636
077b4     17 13 02 F6 | 	mov	arg01, local05
077b8     BC 20 B0 FD | 	call	#_compile_else
077bc     FD 30 02 F6 | 	mov	local06, result1
077c0     A8 03 90 FD | 	jmp	#LR__0693
077c4                 | LR__0637
077c4     C4 0C B0 FD | 	call	#_compile_fun_varp
077c8     FD 34 02 F6 | 	mov	local08, result1
077cc     FE 30 02 F6 | 	mov	local06, result2
077d0     DC 02 90 FD | 	jmp	#LR__0692
077d4                 | LR__0638
077d4     B4 0C B0 FD | 	call	#_compile_fun_varp
077d8     FD 34 02 F6 | 	mov	local08, result1
077dc     FE 30 02 F6 | 	mov	local06, result2
077e0     CC 02 90 FD | 	jmp	#LR__0692
077e4                 | LR__0639
077e4     01 2E 16 F2 | 	cmp	local05, #1 wc
077e8     08 00 90 CD |  if_b	jmp	#LR__0640
077ec     D4 2D B0 FD | 	call	#_compile_goto
077f0     78 03 90 FD | 	jmp	#LR__0693
077f4                 | LR__0640
077f4     19 12 06 F6 | 	mov	arg01, #25
077f8     00 14 06 F6 | 	mov	arg02, #0
077fc     2C 9D B1 FD | 	call	#_printerror
07800     68 03 90 FD | 	jmp	#LR__0693
07804                 | LR__0641
07804     01 2E 16 F2 | 	cmp	local05, #1 wc
07808     08 00 90 CD |  if_b	jmp	#LR__0642
0780c     50 2D B0 FD | 	call	#_compile_gosub
07810     58 03 90 FD | 	jmp	#LR__0693
07814                 | LR__0642
07814     19 12 06 F6 | 	mov	arg01, #25
07818     00 14 06 F6 | 	mov	arg02, #0
0781c     0C 9D B1 FD | 	call	#_printerror
07820     48 03 90 FD | 	jmp	#LR__0693
07824                 | LR__0643
07824     64 0C B0 FD | 	call	#_compile_fun_varp
07828     FD 34 02 F6 | 	mov	local08, result1
0782c     FE 30 02 F6 | 	mov	local06, result2
07830     7C 02 90 FD | 	jmp	#LR__0692
07834                 | LR__0644
07834     FC 0A B0 FD | 	call	#_compile_fun_4p
07838     FD 30 02 F6 | 	mov	local06, result1
0783c     70 02 90 FD | 	jmp	#LR__0692
07840                 | LR__0645
07840                 | ' return expr()
07840     2C 3B B0 FD | 	call	#_expr
07844     FD 30 02 F6 | 	mov	local06, result1
07848     64 02 90 FD | 	jmp	#LR__0692
0784c                 | LR__0646
0784c     34 28 B0 FD | 	call	#_compile_for
07850     FD 30 02 F6 | 	mov	local06, result1
07854     14 03 90 FD | 	jmp	#LR__0693
07858                 | LR__0647
07858     30 0C B0 FD | 	call	#_compile_fun_varp
0785c     FD 34 02 F6 | 	mov	local08, result1
07860     FE 30 02 F6 | 	mov	local06, result2
07864     48 02 90 FD | 	jmp	#LR__0692
07868                 | LR__0648
07868     17 13 02 F6 | 	mov	arg01, local05
0786c     80 1E B0 FD | 	call	#_compile_if
07870     FD 30 02 F6 | 	mov	local06, result1
07874     F4 02 90 FD | 	jmp	#LR__0693
07878                 | LR__0649
07878                 | ' return expr()
07878     F4 3A B0 FD | 	call	#_expr
0787c     FD 30 02 F6 | 	mov	local06, result1
07880     2C 02 90 FD | 	jmp	#LR__0692
07884                 | LR__0650
07884     D0 0D B0 FD | 	call	#_compile_input
07888     FD 34 02 F6 | 	mov	local08, result1
0788c     FE 30 02 F6 | 	mov	local06, result2
07890     1C 02 90 FD | 	jmp	#LR__0692
07894                 | LR__0651
07894                 | ' return expr()
07894     D8 3A B0 FD | 	call	#_expr
07898     FD 30 02 F6 | 	mov	local06, result1
0789c     10 02 90 FD | 	jmp	#LR__0692
078a0                 | LR__0652
078a0     E8 0B B0 FD | 	call	#_compile_fun_varp
078a4     FD 34 02 F6 | 	mov	local08, result1
078a8     FE 30 02 F6 | 	mov	local06, result2
078ac     00 02 90 FD | 	jmp	#LR__0692
078b0                 | LR__0653
078b0     D8 0B B0 FD | 	call	#_compile_fun_varp
078b4     FD 34 02 F6 | 	mov	local08, result1
078b8     FE 30 02 F6 | 	mov	local06, result2
078bc     F0 01 90 FD | 	jmp	#LR__0692
078c0                 | LR__0654
078c0     F8 08 B0 FD | 	call	#_compile_fun_2p
078c4     FD 30 02 F6 | 	mov	local06, result1
078c8     E4 01 90 FD | 	jmp	#LR__0692
078cc                 | LR__0655
078cc                 | ' return expr()
078cc     A0 3A B0 FD | 	call	#_expr
078d0     FD 30 02 F6 | 	mov	local06, result1
078d4     D8 01 90 FD | 	jmp	#LR__0692
078d8                 | LR__0656
078d8                 | ' return expr()
078d8     94 3A B0 FD | 	call	#_expr
078dc     FD 30 02 F6 | 	mov	local06, result1
078e0     CC 01 90 FD | 	jmp	#LR__0692
078e4                 | LR__0657
078e4                 | ' return expr()
078e4     88 3A B0 FD | 	call	#_expr
078e8     FD 30 02 F6 | 	mov	local06, result1
078ec     C0 01 90 FD | 	jmp	#LR__0692
078f0                 | LR__0658
078f0     D4 2A B0 FD | 	call	#_compile_next
078f4     FD 30 02 F6 | 	mov	local06, result1
078f8     70 02 90 FD | 	jmp	#LR__0693
078fc                 | LR__0659
078fc     B4 30 B0 FD | 	call	#_compile_on
07900     FD 30 02 F6 | 	mov	local06, result1
07904     64 02 90 FD | 	jmp	#LR__0693
07908                 | LR__0660
07908     38 09 B0 FD | 	call	#_compile_fun_3p
0790c     FD 30 02 F6 | 	mov	local06, result1
07910     9C 01 90 FD | 	jmp	#LR__0692
07914                 | LR__0661
07914                 | ' return expr()
07914     58 3A B0 FD | 	call	#_expr
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     90 01 90 FD | 	jmp	#LR__0692
07920                 | LR__0662
07920                 | ' return expr()
07920     4C 3A B0 FD | 	call	#_expr
07924     FD 30 02 F6 | 	mov	local06, result1
07928     84 01 90 FD | 	jmp	#LR__0692
0792c                 | LR__0663
0792c                 | ' return expr()
0792c     40 3A B0 FD | 	call	#_expr
07930     FD 30 02 F6 | 	mov	local06, result1
07934     78 01 90 FD | 	jmp	#LR__0692
07938                 | LR__0664
07938                 | ' return expr()
07938     34 3A B0 FD | 	call	#_expr
0793c     FD 30 02 F6 | 	mov	local06, result1
07940     6C 01 90 FD | 	jmp	#LR__0692
07944                 | LR__0665
07944     EC 09 B0 FD | 	call	#_compile_fun_4p
07948     FD 30 02 F6 | 	mov	local06, result1
0794c     60 01 90 FD | 	jmp	#LR__0692
07950                 | LR__0666
07950                 | ' return expr()
07950     1C 3A B0 FD | 	call	#_expr
07954     FD 30 02 F6 | 	mov	local06, result1
07958     54 01 90 FD | 	jmp	#LR__0692
0795c                 | LR__0667
0795c     5C 08 B0 FD | 	call	#_compile_fun_2p
07960     FD 30 02 F6 | 	mov	local06, result1
07964     48 01 90 FD | 	jmp	#LR__0692
07968                 | LR__0668
07968     20 0B B0 FD | 	call	#_compile_fun_varp
0796c     FD 34 02 F6 | 	mov	local08, result1
07970     FE 30 02 F6 | 	mov	local06, result2
07974     38 01 90 FD | 	jmp	#LR__0692
07978                 | LR__0669
07978     10 0B B0 FD | 	call	#_compile_fun_varp
0797c     FD 34 02 F6 | 	mov	local08, result1
07980     FE 30 02 F6 | 	mov	local06, result2
07984     28 01 90 FD | 	jmp	#LR__0692
07988                 | LR__0670
07988     30 08 B0 FD | 	call	#_compile_fun_2p
0798c     FD 30 02 F6 | 	mov	local06, result1
07990     1C 01 90 FD | 	jmp	#LR__0692
07994                 | LR__0671
07994     24 08 B0 FD | 	call	#_compile_fun_2p
07998     FD 30 02 F6 | 	mov	local06, result1
0799c     10 01 90 FD | 	jmp	#LR__0692
079a0                 | LR__0672
079a0     74 16 B0 FD | 	call	#_compile_print
079a4     FD 30 02 F6 | 	mov	local06, result1
079a8     C0 01 90 FD | 	jmp	#LR__0693
079ac                 | LR__0673
079ac     DC 0A B0 FD | 	call	#_compile_fun_varp
079b0     FD 34 02 F6 | 	mov	local08, result1
079b4     FE 30 02 F6 | 	mov	local06, result2
079b8     F4 00 90 FD | 	jmp	#LR__0692
079bc                 | LR__0674
079bc     A8 0B B0 FD | 	call	#_compile_read
079c0     FD 34 02 F6 | 	mov	local08, result1
079c4     FE 30 02 F6 | 	mov	local06, result2
079c8     E4 00 90 FD | 	jmp	#LR__0692
079cc                 | LR__0675
079cc                 | ' return expr()
079cc     A0 39 B0 FD | 	call	#_expr
079d0     FD 30 02 F6 | 	mov	local06, result1
079d4     D8 00 90 FD | 	jmp	#LR__0692
079d8                 | LR__0676
079d8     B0 0A B0 FD | 	call	#_compile_fun_varp
079dc     FD 34 02 F6 | 	mov	local08, result1
079e0     FE 30 02 F6 | 	mov	local06, result2
079e4     C8 00 90 FD | 	jmp	#LR__0692
079e8                 | LR__0677
079e8     A0 0A B0 FD | 	call	#_compile_fun_varp
079ec     FD 34 02 F6 | 	mov	local08, result1
079f0     FE 30 02 F6 | 	mov	local06, result2
079f4     B8 00 90 FD | 	jmp	#LR__0692
079f8                 | LR__0678
079f8     C0 07 B0 FD | 	call	#_compile_fun_2p
079fc     FD 30 02 F6 | 	mov	local06, result1
07a00     AC 00 90 FD | 	jmp	#LR__0692
07a04                 | LR__0679
07a04     B4 07 B0 FD | 	call	#_compile_fun_2p
07a08     FD 30 02 F6 | 	mov	local06, result1
07a0c     A0 00 90 FD | 	jmp	#LR__0692
07a10                 | LR__0680
07a10     A8 07 B0 FD | 	call	#_compile_fun_2p
07a14     FD 30 02 F6 | 	mov	local06, result1
07a18     94 00 90 FD | 	jmp	#LR__0692
07a1c                 | LR__0681
07a1c     9C 07 B0 FD | 	call	#_compile_fun_2p
07a20     FD 30 02 F6 | 	mov	local06, result1
07a24     88 00 90 FD | 	jmp	#LR__0692
07a28                 | LR__0682
07a28     90 07 B0 FD | 	call	#_compile_fun_2p
07a2c     FD 30 02 F6 | 	mov	local06, result1
07a30     7C 00 90 FD | 	jmp	#LR__0692
07a34                 | LR__0683
07a34     84 07 B0 FD | 	call	#_compile_fun_2p
07a38     FD 30 02 F6 | 	mov	local06, result1
07a3c     70 00 90 FD | 	jmp	#LR__0692
07a40                 | LR__0684
07a40     78 07 B0 FD | 	call	#_compile_fun_2p
07a44     FD 30 02 F6 | 	mov	local06, result1
07a48     64 00 90 FD | 	jmp	#LR__0692
07a4c                 | LR__0685
07a4c     3C 0A B0 FD | 	call	#_compile_fun_varp
07a50     FD 34 02 F6 | 	mov	local08, result1
07a54     FE 30 02 F6 | 	mov	local06, result2
07a58     54 00 90 FD | 	jmp	#LR__0692
07a5c                 | LR__0686
07a5c     E4 07 B0 FD | 	call	#_compile_fun_3p
07a60     FD 30 02 F6 | 	mov	local06, result1
07a64     48 00 90 FD | 	jmp	#LR__0692
07a68                 | LR__0687
07a68                 | ' return expr()
07a68     04 39 B0 FD | 	call	#_expr
07a6c     FD 30 02 F6 | 	mov	local06, result1
07a70     3C 00 90 FD | 	jmp	#LR__0692
07a74                 | LR__0688
07a74     44 07 B0 FD | 	call	#_compile_fun_2p
07a78     FD 30 02 F6 | 	mov	local06, result1
07a7c     30 00 90 FD | 	jmp	#LR__0692
07a80                 | LR__0689
07a80     38 07 B0 FD | 	call	#_compile_fun_2p
07a84     FD 30 02 F6 | 	mov	local06, result1
07a88     24 00 90 FD | 	jmp	#LR__0692
07a8c                 | LR__0690
07a8c     2C 07 B0 FD | 	call	#_compile_fun_2p
07a90     FD 30 02 F6 | 	mov	local06, result1
07a94     18 00 90 FD | 	jmp	#LR__0692
07a98                 | LR__0691
07a98     1C 13 B0 FD | 	call	#_compile_array_assign
07a9c     FD 30 02 F6 | 	mov	local06, result1
07aa0     0E 30 0E F2 | 	cmp	local06, #14 wz
07aa4     C4 00 90 5D |  if_ne	jmp	#LR__0693
07aa8                 | ' return 23
07aa8     17 30 06 F6 | 	mov	local06, #23
07aac     BC 00 90 FD | 	jmp	#LR__0693
07ab0                 | ' return 23
07ab0                 | LR__0692
07ab0     19 2B 02 F6 | 	mov	local03, local07
07ab4     1A 27 02 F6 | 	mov	local01, local08
07ab8     13 37 02 F6 | 	mov	local09, local01
07abc     14 39 02 F6 | 	mov	local10, local02
07ac0     15 33 02 F6 | 	mov	local07, local03
07ac4     4A 00 00 FF 
07ac8     7C E4 05 F1 | 	add	objptr, ##38012
07acc     F2 26 02 FB | 	rdlong	local01, objptr
07ad0     13 35 02 F6 | 	mov	local08, local01
07ad4     01 34 66 F0 | 	shl	local08, #1
07ad8     13 35 02 F1 | 	add	local08, local01
07adc     02 34 66 F0 | 	shl	local08, #2
07ae0     03 00 00 FF 
07ae4     00 E4 85 F1 | 	sub	objptr, ##1536
07ae8     F2 34 02 F1 | 	add	local08, objptr
07aec     1A 37 62 FC | 	wrlong	local09, local08
07af0     03 00 00 FF 
07af4     00 E4 05 F1 | 	add	objptr, ##1536
07af8     F2 26 02 FB | 	rdlong	local01, objptr
07afc     13 37 02 F6 | 	mov	local09, local01
07b00     01 36 66 F0 | 	shl	local09, #1
07b04     13 37 02 F1 | 	add	local09, local01
07b08     02 36 66 F0 | 	shl	local09, #2
07b0c     03 00 00 FF 
07b10     00 E4 85 F1 | 	sub	objptr, ##1536
07b14     F2 36 02 F1 | 	add	local09, objptr
07b18     04 36 06 F1 | 	add	local09, #4
07b1c     1B 39 62 FC | 	wrlong	local10, local09
07b20     03 00 00 FF 
07b24     00 E4 05 F1 | 	add	objptr, ##1536
07b28     F2 26 02 FB | 	rdlong	local01, objptr
07b2c     13 39 02 F6 | 	mov	local10, local01
07b30     01 38 66 F0 | 	shl	local10, #1
07b34     13 39 02 F1 | 	add	local10, local01
07b38     02 38 66 F0 | 	shl	local10, #2
07b3c     03 00 00 FF 
07b40     00 E4 85 F1 | 	sub	objptr, ##1536
07b44     F2 38 02 F1 | 	add	local10, objptr
07b48     08 38 06 F1 | 	add	local10, #8
07b4c     1C 33 62 FC | 	wrlong	local07, local10
07b50     03 00 00 FF 
07b54     00 E4 05 F1 | 	add	objptr, ##1536
07b58     F2 36 02 FB | 	rdlong	local09, objptr
07b5c     01 36 06 F1 | 	add	local09, #1
07b60     F2 36 62 FC | 	wrlong	local09, objptr
07b64     4A 00 00 FF 
07b68     7C E4 85 F1 | 	sub	objptr, ##38012
07b6c                 | LR__0693
07b6c                 | ' 
07b6c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07b6c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07b6c     03 2C 0E F2 | 	cmp	local04, #3 wz
07b70     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07b74     38 00 90 5D |  if_ne	jmp	#LR__0694
07b78     4A 00 00 FF 
07b7c     7C E4 05 F1 | 	add	objptr, ##38012
07b80     F2 38 02 FB | 	rdlong	local10, objptr
07b84     1C 27 02 F6 | 	mov	local01, local10
07b88     01 26 66 F0 | 	shl	local01, #1
07b8c     1C 27 02 F1 | 	add	local01, local10
07b90     02 26 66 F0 | 	shl	local01, #2
07b94     03 00 00 FF 
07b98     00 E4 85 F1 | 	sub	objptr, ##1536
07b9c     F2 26 02 F1 | 	add	local01, objptr
07ba0     08 26 06 F1 | 	add	local01, #8
07ba4     13 FD 6B FC | 	wrlong	#510, local01
07ba8     47 00 00 FF 
07bac     7C E4 85 F1 | 	sub	objptr, ##36476
07bb0                 | LR__0694
07bb0                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07bb0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07bb0     4A 00 00 FF 
07bb4     7C E4 05 F1 | 	add	objptr, ##38012
07bb8     F2 26 02 FB | 	rdlong	local01, objptr
07bbc     4A 00 00 FF 
07bc0     7C E4 85 F1 | 	sub	objptr, ##38012
07bc4     97 58 48 FB | 	callpa	#(@LR__0697-@LR__0695)>>2,fcache_load_ptr_
07bc8                 | LR__0695
07bc8     13 39 02 F6 | 	mov	local10, local01
07bcc     01 38 66 F0 | 	shl	local10, #1
07bd0     13 39 02 F1 | 	add	local10, local01
07bd4     02 38 66 F0 | 	shl	local10, #2
07bd8     47 00 00 FF 
07bdc     7C E4 05 F1 | 	add	objptr, ##36476
07be0     F2 38 02 F1 | 	add	local10, objptr
07be4     08 38 06 F1 | 	add	local10, #8
07be8     1C 39 02 FB | 	rdlong	local10, local10
07bec     9B 38 0E F2 | 	cmp	local10, #155 wz
07bf0     47 00 00 FF 
07bf4     7C E4 85 F1 | 	sub	objptr, ##36476
07bf8     70 00 90 5D |  if_ne	jmp	#LR__0696
07bfc     13 37 02 F6 | 	mov	local09, local01
07c00     01 36 86 F1 | 	sub	local09, #1
07c04     1B 39 02 F6 | 	mov	local10, local09
07c08     01 38 66 F0 | 	shl	local10, #1
07c0c     1B 39 02 F1 | 	add	local10, local09
07c10     02 38 66 F0 | 	shl	local10, #2
07c14     47 00 00 FF 
07c18     7C E4 05 F1 | 	add	objptr, ##36476
07c1c     F2 38 02 F1 | 	add	local10, objptr
07c20     08 38 06 F1 | 	add	local10, #8
07c24     1C 39 02 FB | 	rdlong	local10, local10
07c28     11 38 0E F2 | 	cmp	local10, #17 wz
07c2c     47 00 00 FF 
07c30     7C E4 85 F1 | 	sub	objptr, ##36476
07c34     34 00 90 5D |  if_ne	jmp	#LR__0696
07c38     13 37 02 F6 | 	mov	local09, local01
07c3c     01 36 86 F1 | 	sub	local09, #1
07c40     1B 39 02 F6 | 	mov	local10, local09
07c44     01 38 66 F0 | 	shl	local10, #1
07c48     1B 39 02 F1 | 	add	local10, local09
07c4c     02 38 66 F0 | 	shl	local10, #2
07c50     47 00 00 FF 
07c54     7C E4 05 F1 | 	add	objptr, ##36476
07c58     F2 38 02 F1 | 	add	local10, objptr
07c5c     08 38 06 F1 | 	add	local10, #8
07c60     1C 25 68 FC | 	wrlong	#18, local10
07c64     47 00 00 FF 
07c68     7C E4 85 F1 | 	sub	objptr, ##36476
07c6c                 | LR__0696
07c6c     01 26 86 F1 | 	sub	local01, #1
07c70     01 26 56 F2 | 	cmps	local01, #1 wc
07c74     50 FF 9F 3D |  if_ae	jmp	#LR__0695
07c78                 | LR__0697
07c78                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07c78                 | ' return err
07c78     18 FB 01 F6 | 	mov	result1, local06
07c7c     A7 F0 03 F6 | 	mov	ptra, fp
07c80     B2 00 A0 FD | 	call	#popregs_
07c84                 | _compile_immediate_ret
07c84     2D 00 64 FD | 	ret
07c88                 | 
07c88                 | ' 
07c88                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07c88                 | ' 
07c88                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07c88                 | _compile_immediate_assign
07c88     0C 4A 05 F6 | 	mov	COUNT_, #12
07c8c     A8 00 A0 FD | 	call	#pushregs_
07c90     09 2D 02 F6 | 	mov	local04, arg01
07c94     FF 2A 06 F6 | 	mov	local03, #255
07c98     01 2E 66 F6 | 	neg	local05, #1
07c9c     00 30 06 F6 | 	mov	local06, #0
07ca0                 | ' 
07ca0                 | ' t1.result_type=result_error : t1.result.uresult=0
07ca0                 | ' i=-1: j=-1 : err=0
07ca0                 | ' 
07ca0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07ca0     02 2C 0E F2 | 	cmp	local04, #2 wz
07ca4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07ca8     35 00 00 AF 
07cac     0C E4 05 A1 |  if_e	add	objptr, ##27148
07cb0     F2 32 02 AB |  if_e	rdlong	local07, objptr
07cb4     02 00 00 AF 
07cb8     38 E4 05 A1 |  if_e	add	objptr, ##1080
07cbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
07cc0     37 00 00 AF 
07cc4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07cc8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07cc8     04 2C 0E F2 | 	cmp	local04, #4 wz
07ccc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07cd0     2C 00 90 5D |  if_ne	jmp	#LR__0700
07cd4     35 00 00 FF 
07cd8     14 E4 05 F1 | 	add	objptr, ##27156
07cdc     F2 32 02 FB | 	rdlong	local07, objptr
07ce0     02 00 00 FF 
07ce4     30 E4 05 F1 | 	add	objptr, ##1072
07ce8     F2 06 68 FC | 	wrlong	#3, objptr
07cec     13 00 00 FF 
07cf0     38 E4 05 F1 | 	add	objptr, ##9784
07cf4     F2 04 68 FC | 	wrlong	#2, objptr
07cf8     4A 00 00 FF 
07cfc     7C E4 85 F1 | 	sub	objptr, ##38012
07d00                 | LR__0700
07d00                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07d00     05 2C 0E F2 | 	cmp	local04, #5 wz
07d04     3C 00 90 5D |  if_ne	jmp	#LR__0701
07d08     37 00 00 FF 
07d0c     44 E4 05 F1 | 	add	objptr, ##28228
07d10     F2 FA 01 FB | 	rdlong	result1, objptr
07d14     FD 32 02 F6 | 	mov	local07, result1
07d18     03 32 66 F0 | 	shl	local07, #3
07d1c     02 00 00 FF 
07d20     38 E4 85 F1 | 	sub	objptr, ##1080
07d24     F2 32 02 F1 | 	add	local07, objptr
07d28     19 33 02 FB | 	rdlong	local07, local07
07d2c     02 FA 05 F1 | 	add	result1, #2
07d30     02 00 00 FF 
07d34     38 E4 05 F1 | 	add	objptr, ##1080
07d38     F2 FA 61 FC | 	wrlong	result1, objptr
07d3c     37 00 00 FF 
07d40     44 E4 85 F1 | 	sub	objptr, ##28228
07d44                 | LR__0701
07d44     19 13 02 F6 | 	mov	arg01, local07
07d48     01 14 06 F6 | 	mov	arg02, #1
07d4c     8C F2 B1 FD | 	call	#__system__Right_S
07d50     FD 34 02 F6 | 	mov	local08, result1
07d54     18 36 B0 FD | 	call	#_expr
07d58                 | ' 
07d58                 | ' suffix2$=right$(varname2$,1)
07d58                 | ' expr()
07d58                 | ' if varnum>0 then					' try to find a variable
07d58     35 00 00 FF 
07d5c     08 E4 05 F1 | 	add	objptr, ##27144
07d60     F2 36 02 FB | 	rdlong	local09, objptr
07d64     35 00 00 FF 
07d68     08 E4 85 F1 | 	sub	objptr, ##27144
07d6c     01 36 56 F2 | 	cmps	local09, #1 wc
07d70     58 00 90 CD |  if_b	jmp	#LR__0704
07d74                 | '   for i=0 to varnum-1
07d74     00 38 06 F6 | 	mov	local10, #0
07d78     35 00 00 FF 
07d7c     08 E4 05 F1 | 	add	objptr, ##27144
07d80     F2 3A 02 FB | 	rdlong	local11, objptr
07d84     35 00 00 FF 
07d88     08 E4 85 F1 | 	sub	objptr, ##27144
07d8c                 | LR__0702
07d8c     1D 39 52 F2 | 	cmps	local10, local11 wc
07d90     38 00 90 3D |  if_ae	jmp	#LR__0703
07d94                 | '     if variables(i).name=varname2$ then j=i : exit
07d94     1C 37 02 F6 | 	mov	local09, local10
07d98     04 36 66 F0 | 	shl	local09, #4
07d9c     14 00 00 FF 
07da0     F8 E5 05 F1 | 	add	objptr, ##10744
07da4     F2 36 02 F1 | 	add	local09, objptr
07da8     1B 13 02 FB | 	rdlong	arg01, local09
07dac     19 15 02 F6 | 	mov	arg02, local07
07db0     14 00 00 FF 
07db4     F8 E5 85 F1 | 	sub	objptr, ##10744
07db8     40 D1 B1 FD | 	call	#__system___string_cmp
07dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
07dc0     1C 2F 02 A6 |  if_e	mov	local05, local10
07dc4     01 38 06 51 |  if_ne	add	local10, #1
07dc8     C0 FF 9F 5D |  if_ne	jmp	#LR__0702
07dcc                 | LR__0703
07dcc                 | LR__0704
07dcc                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07dcc     FF FF 7F FF 
07dd0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07dd4     60 00 90 5D |  if_ne	jmp	#LR__0705
07dd8     35 00 00 FF 
07ddc     08 E4 05 F1 | 	add	objptr, ##27144
07de0     F2 36 02 FB | 	rdlong	local09, objptr
07de4     35 00 00 FF 
07de8     08 E4 85 F1 | 	sub	objptr, ##27144
07dec     02 00 00 FF 
07df0     00 36 56 F2 | 	cmps	local09, ##1024 wc
07df4     40 00 90 3D |  if_ae	jmp	#LR__0705
07df8     35 00 00 FF 
07dfc     08 E4 05 F1 | 	add	objptr, ##27144
07e00     F2 3A 02 FB | 	rdlong	local11, objptr
07e04     04 3A 66 F0 | 	shl	local11, #4
07e08     20 00 00 FF 
07e0c     10 E4 85 F1 | 	sub	objptr, ##16400
07e10     F2 3A 02 F1 | 	add	local11, objptr
07e14     1D 33 62 FC | 	wrlong	local07, local11
07e18     20 00 00 FF 
07e1c     10 E4 05 F1 | 	add	objptr, ##16400
07e20     F2 36 02 FB | 	rdlong	local09, objptr
07e24     1B 2F 02 F6 | 	mov	local05, local09
07e28     01 36 06 F1 | 	add	local09, #1
07e2c     F2 36 62 FC | 	wrlong	local09, objptr
07e30     35 00 00 FF 
07e34     08 E4 85 F1 | 	sub	objptr, ##27144
07e38                 | LR__0705
07e38                 | ' if varnum>=maxvars then
07e38     35 00 00 FF 
07e3c     08 E4 05 F1 | 	add	objptr, ##27144
07e40     F2 36 02 FB | 	rdlong	local09, objptr
07e44     35 00 00 FF 
07e48     08 E4 85 F1 | 	sub	objptr, ##27144
07e4c     02 00 00 FF 
07e50     00 36 56 F2 | 	cmps	local09, ##1024 wc
07e54     2D 30 06 36 |  if_ae	mov	local06, #45
07e58     C8 01 90 3D |  if_ae	jmp	#LR__0710
07e5c     17 27 02 F6 | 	mov	local01, local05
07e60     17 2A 06 F6 | 	mov	local03, #23
07e64     13 37 02 F6 | 	mov	local09, local01
07e68     14 3D 02 F6 | 	mov	local12, local02
07e6c     15 27 02 F6 | 	mov	local01, local03
07e70     4A 00 00 FF 
07e74     7C E4 05 F1 | 	add	objptr, ##38012
07e78     F2 3A 02 FB | 	rdlong	local11, objptr
07e7c     1D 39 02 F6 | 	mov	local10, local11
07e80     01 38 66 F0 | 	shl	local10, #1
07e84     1D 39 02 F1 | 	add	local10, local11
07e88     02 38 66 F0 | 	shl	local10, #2
07e8c     03 00 00 FF 
07e90     00 E4 85 F1 | 	sub	objptr, ##1536
07e94     F2 38 02 F1 | 	add	local10, objptr
07e98     1C 37 62 FC | 	wrlong	local09, local10
07e9c     03 00 00 FF 
07ea0     00 E4 05 F1 | 	add	objptr, ##1536
07ea4     F2 36 02 FB | 	rdlong	local09, objptr
07ea8     1B 3B 02 F6 | 	mov	local11, local09
07eac     01 3A 66 F0 | 	shl	local11, #1
07eb0     1B 3B 02 F1 | 	add	local11, local09
07eb4     02 3A 66 F0 | 	shl	local11, #2
07eb8     03 00 00 FF 
07ebc     00 E4 85 F1 | 	sub	objptr, ##1536
07ec0     F2 3A 02 F1 | 	add	local11, objptr
07ec4     04 3A 06 F1 | 	add	local11, #4
07ec8     1D 3D 62 FC | 	wrlong	local12, local11
07ecc     03 00 00 FF 
07ed0     00 E4 05 F1 | 	add	objptr, ##1536
07ed4     F2 36 02 FB | 	rdlong	local09, objptr
07ed8     1B 3D 02 F6 | 	mov	local12, local09
07edc     01 3C 66 F0 | 	shl	local12, #1
07ee0     1B 3D 02 F1 | 	add	local12, local09
07ee4     02 3C 66 F0 | 	shl	local12, #2
07ee8     03 00 00 FF 
07eec     00 E4 85 F1 | 	sub	objptr, ##1536
07ef0     F2 3C 02 F1 | 	add	local12, objptr
07ef4     08 3C 06 F1 | 	add	local12, #8
07ef8     1E 27 62 FC | 	wrlong	local01, local12
07efc     03 00 00 FF 
07f00     00 E4 05 F1 | 	add	objptr, ##1536
07f04     F2 36 02 FB | 	rdlong	local09, objptr
07f08     01 36 06 F1 | 	add	local09, #1
07f0c     F2 36 62 FC | 	wrlong	local09, objptr
07f10     4A 00 00 FF 
07f14     7C E4 85 F1 | 	sub	objptr, ##38012
07f18                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07f18                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07f18                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07f18     03 2C 0E F2 | 	cmp	local04, #3 wz
07f1c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07f20     38 00 90 5D |  if_ne	jmp	#LR__0706
07f24     4A 00 00 FF 
07f28     7C E4 05 F1 | 	add	objptr, ##38012
07f2c     F2 3C 02 FB | 	rdlong	local12, objptr
07f30     1E 27 02 F6 | 	mov	local01, local12
07f34     01 26 66 F0 | 	shl	local01, #1
07f38     1E 27 02 F1 | 	add	local01, local12
07f3c     02 26 66 F0 | 	shl	local01, #2
07f40     03 00 00 FF 
07f44     00 E4 85 F1 | 	sub	objptr, ##1536
07f48     F2 26 02 F1 | 	add	local01, objptr
07f4c     08 26 06 F1 | 	add	local01, #8
07f50     13 FD 6B FC | 	wrlong	#510, local01
07f54     47 00 00 FF 
07f58     7C E4 85 F1 | 	sub	objptr, ##36476
07f5c                 | LR__0706
07f5c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07f5c     4A 00 00 FF 
07f60     7C E4 05 F1 | 	add	objptr, ##38012
07f64     F2 38 02 FB | 	rdlong	local10, objptr
07f68     4A 00 00 FF 
07f6c     7C E4 85 F1 | 	sub	objptr, ##38012
07f70     97 58 48 FB | 	callpa	#(@LR__0709-@LR__0707)>>2,fcache_load_ptr_
07f74                 | LR__0707
07f74     1C 3D 02 F6 | 	mov	local12, local10
07f78     01 3C 66 F0 | 	shl	local12, #1
07f7c     1C 3D 02 F1 | 	add	local12, local10
07f80     02 3C 66 F0 | 	shl	local12, #2
07f84     47 00 00 FF 
07f88     7C E4 05 F1 | 	add	objptr, ##36476
07f8c     F2 3C 02 F1 | 	add	local12, objptr
07f90     08 3C 06 F1 | 	add	local12, #8
07f94     1E 3D 02 FB | 	rdlong	local12, local12
07f98     9B 3C 0E F2 | 	cmp	local12, #155 wz
07f9c     47 00 00 FF 
07fa0     7C E4 85 F1 | 	sub	objptr, ##36476
07fa4     70 00 90 5D |  if_ne	jmp	#LR__0708
07fa8     1C 3D 02 F6 | 	mov	local12, local10
07fac     01 3C 86 F1 | 	sub	local12, #1
07fb0     1E 27 02 F6 | 	mov	local01, local12
07fb4     01 26 66 F0 | 	shl	local01, #1
07fb8     1E 27 02 F1 | 	add	local01, local12
07fbc     02 26 66 F0 | 	shl	local01, #2
07fc0     47 00 00 FF 
07fc4     7C E4 05 F1 | 	add	objptr, ##36476
07fc8     F2 26 02 F1 | 	add	local01, objptr
07fcc     08 26 06 F1 | 	add	local01, #8
07fd0     13 27 02 FB | 	rdlong	local01, local01
07fd4     11 26 0E F2 | 	cmp	local01, #17 wz
07fd8     47 00 00 FF 
07fdc     7C E4 85 F1 | 	sub	objptr, ##36476
07fe0     34 00 90 5D |  if_ne	jmp	#LR__0708
07fe4     1C 3D 02 F6 | 	mov	local12, local10
07fe8     01 3C 86 F1 | 	sub	local12, #1
07fec     1E 27 02 F6 | 	mov	local01, local12
07ff0     01 26 66 F0 | 	shl	local01, #1
07ff4     1E 27 02 F1 | 	add	local01, local12
07ff8     02 26 66 F0 | 	shl	local01, #2
07ffc     47 00 00 FF 
08000     7C E4 05 F1 | 	add	objptr, ##36476
08004     F2 26 02 F1 | 	add	local01, objptr
08008     08 26 06 F1 | 	add	local01, #8
0800c     13 25 68 FC | 	wrlong	#18, local01
08010     47 00 00 FF 
08014     7C E4 85 F1 | 	sub	objptr, ##36476
08018                 | LR__0708
08018     01 38 86 F1 | 	sub	local10, #1
0801c     01 38 56 F2 | 	cmps	local10, #1 wc
08020     50 FF 9F 3D |  if_ae	jmp	#LR__0707
08024                 | LR__0709
08024                 | LR__0710
08024                 | ' return err
08024     18 FB 01 F6 | 	mov	result1, local06
08028     A7 F0 03 F6 | 	mov	ptra, fp
0802c     B2 00 A0 FD | 	call	#popregs_
08030                 | _compile_immediate_assign_ret
08030     2D 00 64 FD | 	ret
08034                 | 
08034                 | ' 
08034                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08034                 | ' 
08034                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08034                 | _compile
08034     03 4A 05 F6 | 	mov	COUNT_, #3
08038     A8 00 A0 FD | 	call	#pushregs_
0803c     09 27 02 F6 | 	mov	local01, arg01
08040     0B 29 02 F6 | 	mov	local02, arg03
08044     47 00 00 FF 
08048     7C E4 05 F1 | 	add	objptr, ##36476
0804c     F2 26 62 FC | 	wrlong	local01, objptr
08050     04 E4 05 F1 | 	add	objptr, #4
08054     F2 14 62 FC | 	wrlong	arg02, objptr
08058     47 00 00 FF 
0805c     80 E4 85 F1 | 	sub	objptr, ##36480
08060     14 13 02 F6 | 	mov	arg01, local02
08064     01 12 06 F1 | 	add	arg01, #1
08068     13 15 02 F6 | 	mov	arg02, local01
0806c     6C F2 BF FD | 	call	#_compile_immediate
08070     FD 2A 0A F6 | 	mov	local03, result1 wz
08074                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08074                 | ' ucompiledline(0)=alinemajor
08074                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08074                 | ' 
08074                 | ' ' cont: 
08074                 | ' ' 0 - this is the first part of the line that will continue
08074                 | ' ' 1 - this is the continuation of the line
08074                 | ' ' 2 - this is the last continued line
08074                 | ' ' 3 - this is the one and only part
08074                 | ' 
08074                 | ' err=compile_immediate(cont+1,alinemajor) 
08074                 | ' if err=0 andalso alinemajor>0 then
08074     74 00 90 5D |  if_ne	jmp	#LR__0725
08078     01 26 16 F2 | 	cmp	local01, #1 wc
0807c     6C 00 90 CD |  if_b	jmp	#LR__0725
08080                 | '   if cont=3 orelse cont=2 then 
08080     03 28 0E F2 | 	cmp	local02, #3 wz
08084     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08088     60 00 90 5D |  if_ne	jmp	#LR__0724
0808c                 | '     if alinemajor >lastline then 
0808c     4A 00 00 FF 
08090     8C E4 05 F1 | 	add	objptr, ##38028
08094     F2 14 02 FB | 	rdlong	arg02, objptr
08098     4A 00 00 FF 
0809c     8C E4 85 F1 | 	sub	objptr, ##38028
080a0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080a4     0C 00 90 ED |  if_be	jmp	#LR__0720
080a8     13 13 02 F6 | 	mov	arg01, local01
080ac     64 F1 BF FD | 	call	#_add_line_at_end
080b0     38 00 90 FD | 	jmp	#LR__0723
080b4                 | LR__0720
080b4     13 13 02 F6 | 	mov	arg01, local01
080b8     28 EB BF FD | 	call	#_deleteline
080bc                 | '       deleteline(alinemajor)  
080bc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
080bc     4A 00 00 FF 
080c0     8C E4 05 F1 | 	add	objptr, ##38028
080c4     F2 14 02 FB | 	rdlong	arg02, objptr
080c8     4A 00 00 FF 
080cc     8C E4 85 F1 | 	sub	objptr, ##38028
080d0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080d4     0C 00 90 ED |  if_be	jmp	#LR__0721
080d8     13 13 02 F6 | 	mov	arg01, local01
080dc     34 F1 BF FD | 	call	#_add_line_at_end
080e0     08 00 90 FD | 	jmp	#LR__0722
080e4                 | LR__0721
080e4     13 13 02 F6 | 	mov	arg01, local01
080e8     0C EF BF FD | 	call	#_insertline
080ec                 | LR__0722
080ec                 | LR__0723
080ec                 | LR__0724
080ec                 | LR__0725
080ec                 | ' return err
080ec     15 FB 01 F6 | 	mov	result1, local03
080f0     A7 F0 03 F6 | 	mov	ptra, fp
080f4     B2 00 A0 FD | 	call	#popregs_
080f8                 | _compile_ret
080f8     2D 00 64 FD | 	ret
080fc                 | 
080fc                 | ' 
080fc                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
080fc                 | ' 
080fc                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
080fc                 | _compile_assign
080fc     03 4A 05 F6 | 	mov	COUNT_, #3
08100     A8 00 A0 FD | 	call	#pushregs_
08104     09 27 02 F6 | 	mov	local01, arg01
08108     0B 29 02 F6 | 	mov	local02, arg03
0810c     47 00 00 FF 
08110     7C E4 05 F1 | 	add	objptr, ##36476
08114     F2 26 62 FC | 	wrlong	local01, objptr
08118     04 E4 05 F1 | 	add	objptr, #4
0811c     F2 14 62 FC | 	wrlong	arg02, objptr
08120     47 00 00 FF 
08124     80 E4 85 F1 | 	sub	objptr, ##36480
08128     14 13 02 F6 | 	mov	arg01, local02
0812c     01 12 06 F1 | 	add	arg01, #1
08130     54 FB BF FD | 	call	#_compile_immediate_assign
08134     FD 2A 02 F6 | 	mov	local03, result1
08138                 | ' 
08138                 | ' ucompiledline(0)=alinemajor
08138                 | ' ucompiledline(1)=alineminor
08138                 | ' 
08138                 | ' err=compile_immediate_assign(cont+1) 
08138                 | ' if alinemajor>0 then
08138     01 26 16 F2 | 	cmp	local01, #1 wc
0813c     6C 00 90 CD |  if_b	jmp	#LR__0735
08140                 | '   if cont=3 orelse cont=2 then 
08140     03 28 0E F2 | 	cmp	local02, #3 wz
08144     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08148     60 00 90 5D |  if_ne	jmp	#LR__0734
0814c                 | '     if alinemajor >lastline then 
0814c     4A 00 00 FF 
08150     8C E4 05 F1 | 	add	objptr, ##38028
08154     F2 14 02 FB | 	rdlong	arg02, objptr
08158     4A 00 00 FF 
0815c     8C E4 85 F1 | 	sub	objptr, ##38028
08160     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08164     0C 00 90 ED |  if_be	jmp	#LR__0730
08168     13 13 02 F6 | 	mov	arg01, local01
0816c     A4 F0 BF FD | 	call	#_add_line_at_end
08170     38 00 90 FD | 	jmp	#LR__0733
08174                 | LR__0730
08174     13 13 02 F6 | 	mov	arg01, local01
08178     68 EA BF FD | 	call	#_deleteline
0817c                 | '       deleteline(alinemajor)  
0817c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0817c     4A 00 00 FF 
08180     8C E4 05 F1 | 	add	objptr, ##38028
08184     F2 14 02 FB | 	rdlong	arg02, objptr
08188     4A 00 00 FF 
0818c     8C E4 85 F1 | 	sub	objptr, ##38028
08190     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08194     0C 00 90 ED |  if_be	jmp	#LR__0731
08198     13 13 02 F6 | 	mov	arg01, local01
0819c     74 F0 BF FD | 	call	#_add_line_at_end
081a0     08 00 90 FD | 	jmp	#LR__0732
081a4                 | LR__0731
081a4     13 13 02 F6 | 	mov	arg01, local01
081a8     4C EE BF FD | 	call	#_insertline
081ac                 | LR__0732
081ac                 | LR__0733
081ac                 | LR__0734
081ac                 | LR__0735
081ac                 | ' return err
081ac     15 FB 01 F6 | 	mov	result1, local03
081b0     A7 F0 03 F6 | 	mov	ptra, fp
081b4     B2 00 A0 FD | 	call	#popregs_
081b8                 | _compile_assign_ret
081b8     2D 00 64 FD | 	ret
081bc                 | 
081bc                 | ' 
081bc                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
081bc                 | ' 
081bc                 | ' function compile_fun_2p() as ulong
081bc                 | _compile_fun_2p
081bc     01 4A 05 F6 | 	mov	COUNT_, #1
081c0     A8 00 A0 FD | 	call	#pushregs_
081c4     A8 31 B0 FD | 	call	#_expr
081c8     FD 26 02 F6 | 	mov	local01, result1
081cc                 | ' err=expr() : if err>0 then return err
081cc     01 26 16 F2 | 	cmp	local01, #1 wc
081d0     13 FB 01 36 |  if_ae	mov	result1, local01
081d4     60 00 90 3D |  if_ae	jmp	#LR__0740
081d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081d8     37 00 00 FF 
081dc     44 E4 05 F1 | 	add	objptr, ##28228
081e0     F2 26 02 FB | 	rdlong	local01, objptr
081e4     03 26 66 F0 | 	shl	local01, #3
081e8     02 00 00 FF 
081ec     38 E4 85 F1 | 	sub	objptr, ##1080
081f0     F2 26 02 F1 | 	add	local01, objptr
081f4     04 26 06 F1 | 	add	local01, #4
081f8     13 27 02 FB | 	rdlong	local01, local01
081fc     11 26 0E F2 | 	cmp	local01, #17 wz
08200     35 00 00 FF 
08204     0C E4 85 F1 | 	sub	objptr, ##27148
08208     15 FA 05 56 |  if_ne	mov	result1, #21
0820c     28 00 90 5D |  if_ne	jmp	#LR__0740
08210     37 00 00 FF 
08214     44 E4 05 F1 | 	add	objptr, ##28228
08218     F2 26 02 FB | 	rdlong	local01, objptr
0821c     01 26 06 F1 | 	add	local01, #1
08220     F2 26 62 FC | 	wrlong	local01, objptr
08224     37 00 00 FF 
08228     44 E4 85 F1 | 	sub	objptr, ##28228
0822c     40 31 B0 FD | 	call	#_expr
08230                 | ' err=expr() : if err>0 then return err
08230     01 FA 15 F2 | 	cmp	result1, #1 wc
08234                 | ' return 0
08234     00 FA 05 C6 |  if_b	mov	result1, #0
08238                 | LR__0740
08238     A7 F0 03 F6 | 	mov	ptra, fp
0823c     B2 00 A0 FD | 	call	#popregs_
08240                 | _compile_fun_2p_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | ' 
08244                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08244                 | ' 
08244                 | ' function compile_fun_3p() as ulong
08244                 | _compile_fun_3p
08244     01 4A 05 F6 | 	mov	COUNT_, #1
08248     A8 00 A0 FD | 	call	#pushregs_
0824c     20 31 B0 FD | 	call	#_expr
08250     FD 26 02 F6 | 	mov	local01, result1
08254                 | ' err=expr() : if err>0 then return err
08254     01 26 16 F2 | 	cmp	local01, #1 wc
08258     13 FB 01 36 |  if_ae	mov	result1, local01
0825c     C8 00 90 3D |  if_ae	jmp	#LR__0750
08260                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08260     37 00 00 FF 
08264     44 E4 05 F1 | 	add	objptr, ##28228
08268     F2 26 02 FB | 	rdlong	local01, objptr
0826c     03 26 66 F0 | 	shl	local01, #3
08270     02 00 00 FF 
08274     38 E4 85 F1 | 	sub	objptr, ##1080
08278     F2 26 02 F1 | 	add	local01, objptr
0827c     04 26 06 F1 | 	add	local01, #4
08280     13 27 02 FB | 	rdlong	local01, local01
08284     11 26 0E F2 | 	cmp	local01, #17 wz
08288     35 00 00 FF 
0828c     0C E4 85 F1 | 	sub	objptr, ##27148
08290     15 FA 05 56 |  if_ne	mov	result1, #21
08294     90 00 90 5D |  if_ne	jmp	#LR__0750
08298     37 00 00 FF 
0829c     44 E4 05 F1 | 	add	objptr, ##28228
082a0     F2 26 02 FB | 	rdlong	local01, objptr
082a4     01 26 06 F1 | 	add	local01, #1
082a8     F2 26 62 FC | 	wrlong	local01, objptr
082ac     37 00 00 FF 
082b0     44 E4 85 F1 | 	sub	objptr, ##28228
082b4     B8 30 B0 FD | 	call	#_expr
082b8     FD 26 02 F6 | 	mov	local01, result1
082bc                 | ' err=expr() : if err>0 then return err
082bc     01 26 16 F2 | 	cmp	local01, #1 wc
082c0     13 FB 01 36 |  if_ae	mov	result1, local01
082c4     60 00 90 3D |  if_ae	jmp	#LR__0750
082c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
082c8     37 00 00 FF 
082cc     44 E4 05 F1 | 	add	objptr, ##28228
082d0     F2 26 02 FB | 	rdlong	local01, objptr
082d4     03 26 66 F0 | 	shl	local01, #3
082d8     02 00 00 FF 
082dc     38 E4 85 F1 | 	sub	objptr, ##1080
082e0     F2 26 02 F1 | 	add	local01, objptr
082e4     04 26 06 F1 | 	add	local01, #4
082e8     13 27 02 FB | 	rdlong	local01, local01
082ec     11 26 0E F2 | 	cmp	local01, #17 wz
082f0     35 00 00 FF 
082f4     0C E4 85 F1 | 	sub	objptr, ##27148
082f8     15 FA 05 56 |  if_ne	mov	result1, #21
082fc     28 00 90 5D |  if_ne	jmp	#LR__0750
08300     37 00 00 FF 
08304     44 E4 05 F1 | 	add	objptr, ##28228
08308     F2 26 02 FB | 	rdlong	local01, objptr
0830c     01 26 06 F1 | 	add	local01, #1
08310     F2 26 62 FC | 	wrlong	local01, objptr
08314     37 00 00 FF 
08318     44 E4 85 F1 | 	sub	objptr, ##28228
0831c     50 30 B0 FD | 	call	#_expr
08320                 | ' err=expr() : if err>0 then return err
08320     01 FA 15 F2 | 	cmp	result1, #1 wc
08324                 | ' return 0
08324     00 FA 05 C6 |  if_b	mov	result1, #0
08328                 | LR__0750
08328     A7 F0 03 F6 | 	mov	ptra, fp
0832c     B2 00 A0 FD | 	call	#popregs_
08330                 | _compile_fun_3p_ret
08330     2D 00 64 FD | 	ret
08334                 | 
08334                 | ' 
08334                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08334                 | ' 
08334                 | ' function compile_fun_4p() as ulong
08334                 | _compile_fun_4p
08334     01 4A 05 F6 | 	mov	COUNT_, #1
08338     A8 00 A0 FD | 	call	#pushregs_
0833c     30 30 B0 FD | 	call	#_expr
08340     FD 26 02 F6 | 	mov	local01, result1
08344                 | ' err=expr() : if err>0 then return err
08344     01 26 16 F2 | 	cmp	local01, #1 wc
08348     13 FB 01 36 |  if_ae	mov	result1, local01
0834c     30 01 90 3D |  if_ae	jmp	#LR__0760
08350                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08350     37 00 00 FF 
08354     44 E4 05 F1 | 	add	objptr, ##28228
08358     F2 26 02 FB | 	rdlong	local01, objptr
0835c     03 26 66 F0 | 	shl	local01, #3
08360     02 00 00 FF 
08364     38 E4 85 F1 | 	sub	objptr, ##1080
08368     F2 26 02 F1 | 	add	local01, objptr
0836c     04 26 06 F1 | 	add	local01, #4
08370     13 27 02 FB | 	rdlong	local01, local01
08374     11 26 0E F2 | 	cmp	local01, #17 wz
08378     35 00 00 FF 
0837c     0C E4 85 F1 | 	sub	objptr, ##27148
08380     15 FA 05 56 |  if_ne	mov	result1, #21
08384     F8 00 90 5D |  if_ne	jmp	#LR__0760
08388     37 00 00 FF 
0838c     44 E4 05 F1 | 	add	objptr, ##28228
08390     F2 26 02 FB | 	rdlong	local01, objptr
08394     01 26 06 F1 | 	add	local01, #1
08398     F2 26 62 FC | 	wrlong	local01, objptr
0839c     37 00 00 FF 
083a0     44 E4 85 F1 | 	sub	objptr, ##28228
083a4     C8 2F B0 FD | 	call	#_expr
083a8     FD 26 02 F6 | 	mov	local01, result1
083ac                 | ' err=expr() : if err>0 then return err
083ac     01 26 16 F2 | 	cmp	local01, #1 wc
083b0     13 FB 01 36 |  if_ae	mov	result1, local01
083b4     C8 00 90 3D |  if_ae	jmp	#LR__0760
083b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
083b8     37 00 00 FF 
083bc     44 E4 05 F1 | 	add	objptr, ##28228
083c0     F2 26 02 FB | 	rdlong	local01, objptr
083c4     03 26 66 F0 | 	shl	local01, #3
083c8     02 00 00 FF 
083cc     38 E4 85 F1 | 	sub	objptr, ##1080
083d0     F2 26 02 F1 | 	add	local01, objptr
083d4     04 26 06 F1 | 	add	local01, #4
083d8     13 27 02 FB | 	rdlong	local01, local01
083dc     11 26 0E F2 | 	cmp	local01, #17 wz
083e0     35 00 00 FF 
083e4     0C E4 85 F1 | 	sub	objptr, ##27148
083e8     15 FA 05 56 |  if_ne	mov	result1, #21
083ec     90 00 90 5D |  if_ne	jmp	#LR__0760
083f0     37 00 00 FF 
083f4     44 E4 05 F1 | 	add	objptr, ##28228
083f8     F2 26 02 FB | 	rdlong	local01, objptr
083fc     01 26 06 F1 | 	add	local01, #1
08400     F2 26 62 FC | 	wrlong	local01, objptr
08404     37 00 00 FF 
08408     44 E4 85 F1 | 	sub	objptr, ##28228
0840c     60 2F B0 FD | 	call	#_expr
08410     FD 26 02 F6 | 	mov	local01, result1
08414                 | ' err=expr() : if err>0 then return err
08414     01 26 16 F2 | 	cmp	local01, #1 wc
08418     13 FB 01 36 |  if_ae	mov	result1, local01
0841c     60 00 90 3D |  if_ae	jmp	#LR__0760
08420                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08420     37 00 00 FF 
08424     44 E4 05 F1 | 	add	objptr, ##28228
08428     F2 26 02 FB | 	rdlong	local01, objptr
0842c     03 26 66 F0 | 	shl	local01, #3
08430     02 00 00 FF 
08434     38 E4 85 F1 | 	sub	objptr, ##1080
08438     F2 26 02 F1 | 	add	local01, objptr
0843c     04 26 06 F1 | 	add	local01, #4
08440     13 27 02 FB | 	rdlong	local01, local01
08444     11 26 0E F2 | 	cmp	local01, #17 wz
08448     35 00 00 FF 
0844c     0C E4 85 F1 | 	sub	objptr, ##27148
08450     15 FA 05 56 |  if_ne	mov	result1, #21
08454     28 00 90 5D |  if_ne	jmp	#LR__0760
08458     37 00 00 FF 
0845c     44 E4 05 F1 | 	add	objptr, ##28228
08460     F2 26 02 FB | 	rdlong	local01, objptr
08464     01 26 06 F1 | 	add	local01, #1
08468     F2 26 62 FC | 	wrlong	local01, objptr
0846c     37 00 00 FF 
08470     44 E4 85 F1 | 	sub	objptr, ##28228
08474     F8 2E B0 FD | 	call	#_expr
08478                 | ' err=expr() : if err>0 then return err
08478     01 FA 15 F2 | 	cmp	result1, #1 wc
0847c                 | ' return 0
0847c     00 FA 05 C6 |  if_b	mov	result1, #0
08480                 | LR__0760
08480     A7 F0 03 F6 | 	mov	ptra, fp
08484     B2 00 A0 FD | 	call	#popregs_
08488                 | _compile_fun_4p_ret
08488     2D 00 64 FD | 	ret
0848c                 | 
0848c                 | ' 
0848c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
0848c                 | ' 
0848c                 | ' function compile_fun_varp() as ulong,ulong 
0848c                 | _compile_fun_varp
0848c     03 4A 05 F6 | 	mov	COUNT_, #3
08490     A8 00 A0 FD | 	call	#pushregs_
08494     00 26 06 F6 | 	mov	local01, #0
08498                 | ' 
08498                 | ' i=0 : err=0
08498                 | ' if lparts(ct).token<>token_end then
08498     37 00 00 FF 
0849c     44 E4 05 F1 | 	add	objptr, ##28228
084a0     F2 28 02 FB | 	rdlong	local02, objptr
084a4     03 28 66 F0 | 	shl	local02, #3
084a8     02 00 00 FF 
084ac     38 E4 85 F1 | 	sub	objptr, ##1080
084b0     F2 28 02 F1 | 	add	local02, objptr
084b4     04 28 06 F1 | 	add	local02, #4
084b8     14 29 02 FB | 	rdlong	local02, local02
084bc     FE 29 0E F2 | 	cmp	local02, #510 wz
084c0     35 00 00 FF 
084c4     0C E4 85 F1 | 	sub	objptr, ##27148
084c8     88 00 90 AD |  if_e	jmp	#LR__0771
084cc                 | '   do
084cc                 | LR__0770
084cc     A0 2E B0 FD | 	call	#_expr
084d0     01 26 06 F1 | 	add	local01, #1
084d4                 | '     expr()
084d4                 | '     i+=1
084d4                 | '     if lparts(ct).token=token_comma then ct+=1
084d4     37 00 00 FF 
084d8     44 E4 05 F1 | 	add	objptr, ##28228
084dc     F2 28 02 FB | 	rdlong	local02, objptr
084e0     03 28 66 F0 | 	shl	local02, #3
084e4     02 00 00 FF 
084e8     38 E4 85 F1 | 	sub	objptr, ##1080
084ec     F2 28 02 F1 | 	add	local02, objptr
084f0     04 28 06 F1 | 	add	local02, #4
084f4     14 29 02 FB | 	rdlong	local02, local02
084f8     11 28 0E F2 | 	cmp	local02, #17 wz
084fc     35 00 00 FF 
08500     0C E4 85 F1 | 	sub	objptr, ##27148
08504     37 00 00 AF 
08508     44 E4 05 A1 |  if_e	add	objptr, ##28228
0850c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08510     01 2A 06 A1 |  if_e	add	local03, #1
08514     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08518     37 00 00 AF 
0851c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08520                 | '     if lparts(ct).token=token_end then exit loop
08520     37 00 00 FF 
08524     44 E4 05 F1 | 	add	objptr, ##28228
08528     F2 28 02 FB | 	rdlong	local02, objptr
0852c     03 28 66 F0 | 	shl	local02, #3
08530     02 00 00 FF 
08534     38 E4 85 F1 | 	sub	objptr, ##1080
08538     F2 28 02 F1 | 	add	local02, objptr
0853c     04 28 06 F1 | 	add	local02, #4
08540     14 29 02 FB | 	rdlong	local02, local02
08544     FE 29 0E F2 | 	cmp	local02, #510 wz
08548     35 00 00 FF 
0854c     0C E4 85 F1 | 	sub	objptr, ##27148
08550     78 FF 9F 5D |  if_ne	jmp	#LR__0770
08554                 | LR__0771
08554                 | ' return i,err
08554     13 FB 01 F6 | 	mov	result1, local01
08558     00 FC 05 F6 | 	mov	result2, #0
0855c     A7 F0 03 F6 | 	mov	ptra, fp
08560     B2 00 A0 FD | 	call	#popregs_
08564                 | _compile_fun_varp_ret
08564     2D 00 64 FD | 	ret
08568                 | 
08568                 | ' 
08568                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08568                 | ' 
08568                 | ' function compile_read() as ulong,ulong 
08568                 | _compile_read
08568     04 4A 05 F6 | 	mov	COUNT_, #4
0856c     A8 00 A0 FD | 	call	#pushregs_
08570     00 26 06 F6 | 	mov	local01, #0
08574                 | ' 
08574                 | ' i=0 : err=0
08574                 | ' if lparts(ct).token<>token_end then
08574     37 00 00 FF 
08578     44 E4 05 F1 | 	add	objptr, ##28228
0857c     F2 28 02 FB | 	rdlong	local02, objptr
08580     03 28 66 F0 | 	shl	local02, #3
08584     02 00 00 FF 
08588     38 E4 85 F1 | 	sub	objptr, ##1080
0858c     F2 28 02 F1 | 	add	local02, objptr
08590     04 28 06 F1 | 	add	local02, #4
08594     14 29 02 FB | 	rdlong	local02, local02
08598     FE 29 0E F2 | 	cmp	local02, #510 wz
0859c     35 00 00 FF 
085a0     0C E4 85 F1 | 	sub	objptr, ##27148
085a4     98 00 90 AD |  if_e	jmp	#LR__0781
085a8                 | '   do
085a8                 | LR__0780
085a8     30 2A B0 FD | 	call	#_getaddr
085ac     FD 2A 02 F6 | 	mov	local03, result1
085b0     37 00 00 FF 
085b4     44 E4 05 F1 | 	add	objptr, ##28228
085b8     F2 28 02 FB | 	rdlong	local02, objptr
085bc     01 28 06 F1 | 	add	local02, #1
085c0     F2 28 62 FC | 	wrlong	local02, objptr
085c4     01 26 06 F1 | 	add	local01, #1
085c8                 | '     err=getaddr() :ct+=1
085c8                 | '     i+=1 
085c8                 | '     if lparts(ct).token=token_comma then ct+=1 
085c8     03 28 66 F0 | 	shl	local02, #3
085cc     02 00 00 FF 
085d0     38 E4 85 F1 | 	sub	objptr, ##1080
085d4     F2 28 02 F1 | 	add	local02, objptr
085d8     04 28 06 F1 | 	add	local02, #4
085dc     14 29 02 FB | 	rdlong	local02, local02
085e0     11 28 0E F2 | 	cmp	local02, #17 wz
085e4     35 00 00 FF 
085e8     0C E4 85 F1 | 	sub	objptr, ##27148
085ec     37 00 00 AF 
085f0     44 E4 05 A1 |  if_e	add	objptr, ##28228
085f4     F2 2C 02 AB |  if_e	rdlong	local04, objptr
085f8     01 2C 06 A1 |  if_e	add	local04, #1
085fc     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08600     37 00 00 AF 
08604     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08608                 | '     if lparts(ct).token=token_end then exit loop
08608     37 00 00 FF 
0860c     44 E4 05 F1 | 	add	objptr, ##28228
08610     F2 28 02 FB | 	rdlong	local02, objptr
08614     03 28 66 F0 | 	shl	local02, #3
08618     02 00 00 FF 
0861c     38 E4 85 F1 | 	sub	objptr, ##1080
08620     F2 28 02 F1 | 	add	local02, objptr
08624     04 28 06 F1 | 	add	local02, #4
08628     14 29 02 FB | 	rdlong	local02, local02
0862c     FE 29 0E F2 | 	cmp	local02, #510 wz
08630     35 00 00 FF 
08634     0C E4 85 F1 | 	sub	objptr, ##27148
08638     08 00 90 AD |  if_e	jmp	#LR__0782
0863c     68 FF 9F FD | 	jmp	#LR__0780
08640                 | LR__0781
08640     36 2A 06 F6 | 	mov	local03, #54
08644                 | LR__0782
08644                 | ' return i,err
08644     13 FB 01 F6 | 	mov	result1, local01
08648     15 FD 01 F6 | 	mov	result2, local03
0864c     A7 F0 03 F6 | 	mov	ptra, fp
08650     B2 00 A0 FD | 	call	#popregs_
08654                 | _compile_read_ret
08654     2D 00 64 FD | 	ret
08658                 | 
08658                 | ' 
08658                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08658                 | ' 
08658                 | ' function compile_input() as ulong,ulong 
08658                 | _compile_input
08658     0F 4A 05 F6 | 	mov	COUNT_, #15
0865c     A8 00 A0 FD | 	call	#pushregs_
08660                 | ' 
08660                 | ' if lparts(ct).token=token_string then
08660     37 00 00 FF 
08664     44 E4 05 F1 | 	add	objptr, ##28228
08668     F2 16 02 FB | 	rdlong	arg03, objptr
0866c     03 16 66 F0 | 	shl	arg03, #3
08670     02 00 00 FF 
08674     38 E4 85 F1 | 	sub	objptr, ##1080
08678     F2 16 02 F1 | 	add	arg03, objptr
0867c     04 16 06 F1 | 	add	arg03, #4
08680     0B FD 01 FB | 	rdlong	result2, arg03
08684     01 00 00 FF 
08688     03 FC 0D F2 | 	cmp	result2, ##515 wz
0868c     35 00 00 FF 
08690     0C E4 85 F1 | 	sub	objptr, ##27148
08694     38 06 90 5D |  if_ne	jmp	#LR__0797
08698     37 00 00 FF 
0869c     44 E4 05 F1 | 	add	objptr, ##28228
086a0     F2 14 02 FB | 	rdlong	arg02, objptr
086a4     03 14 66 F0 | 	shl	arg02, #3
086a8     02 00 00 FF 
086ac     38 E4 85 F1 | 	sub	objptr, ##1080
086b0     F2 14 02 F1 | 	add	arg02, objptr
086b4     0A 13 02 FB | 	rdlong	arg01, arg02
086b8     35 00 00 FF 
086bc     0C E4 85 F1 | 	sub	objptr, ##27148
086c0     09 2D 02 F6 | 	mov	local04, arg01
086c4     97 06 48 FB | 	callpa	#(@LR__0791-@LR__0790)>>2,fcache_load_ptr_
086c8                 | LR__0790
086c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
086cc     01 2C 06 51 |  if_ne	add	local04, #1
086d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0790
086d4                 | LR__0791
086d4     09 2D 82 F1 | 	sub	local04, arg01
086d8     16 FB 01 F6 | 	mov	result1, local04
086dc     52 00 00 FF 
086e0     2C E4 05 F1 | 	add	objptr, ##42028
086e4     F2 FA 61 FC | 	wrlong	result1, objptr
086e8     58 E4 85 F1 | 	sub	objptr, #88
086ec     F2 12 02 FB | 	rdlong	arg01, objptr
086f0     FD 12 82 F1 | 	sub	arg01, result1
086f4     04 12 86 F1 | 	sub	arg01, #4
086f8     03 12 26 F5 | 	andn	arg01, #3
086fc     F2 12 62 FC | 	wrlong	arg01, objptr
08700     58 E4 05 F1 | 	add	objptr, #88
08704     F2 14 02 FB | 	rdlong	arg02, objptr
08708     52 00 00 FF 
0870c     2C E4 85 F1 | 	sub	objptr, ##42028
08710     B8 8F B1 FD | 	call	#_pslpoke
08714                 | '   pslpoke memtop,l
08714                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08714     01 2E 06 F6 | 	mov	local05, #1
08718     52 00 00 FF 
0871c     2C E4 05 F1 | 	add	objptr, ##42028
08720     F2 30 02 FB | 	rdlong	local06, objptr
08724     52 00 00 FF 
08728     2C E4 85 F1 | 	sub	objptr, ##42028
0872c     01 30 06 F1 | 	add	local06, #1
08730                 | LR__0792
08730     18 2F 52 F2 | 	cmps	local05, local06 wc
08734     5C 00 90 3D |  if_ae	jmp	#LR__0793
08738     51 00 00 FF 
0873c     D4 E5 05 F1 | 	add	objptr, ##41940
08740     F2 32 02 FB | 	rdlong	local07, objptr
08744     03 32 06 F1 | 	add	local07, #3
08748     17 33 02 F1 | 	add	local07, local05
0874c     1A 00 00 FF 
08750     90 E5 85 F1 | 	sub	objptr, ##13712
08754     F2 14 02 FB | 	rdlong	arg02, objptr
08758     03 14 66 F0 | 	shl	arg02, #3
0875c     02 00 00 FF 
08760     38 E4 85 F1 | 	sub	objptr, ##1080
08764     F2 14 02 F1 | 	add	arg02, objptr
08768     0A 13 02 FB | 	rdlong	arg01, arg02
0876c     17 15 02 F6 | 	mov	arg02, local05
08770     01 16 06 F6 | 	mov	arg03, #1
08774     35 00 00 FF 
08778     0C E4 85 F1 | 	sub	objptr, ##27148
0877c     EC E8 B1 FD | 	call	#__system__Mid_S
08780     FD 14 C2 FA | 	rdbyte	arg02, result1
08784     19 13 02 F6 | 	mov	arg01, local07
08788     D0 8F B1 FD | 	call	#_pspoke
0878c     01 2E 06 F1 | 	add	local05, #1
08790     9C FF 9F FD | 	jmp	#LR__0792
08794                 | LR__0793
08794     51 00 00 FF 
08798     D4 E5 05 F1 | 	add	objptr, ##41940
0879c     F2 26 02 FB | 	rdlong	local01, objptr
087a0     2B 2A 06 F6 | 	mov	local03, #43
087a4     13 35 02 F6 | 	mov	local08, local01
087a8     14 33 02 F6 | 	mov	local07, local02
087ac     15 37 02 F6 | 	mov	local09, local03
087b0     07 00 00 FF 
087b4     58 E5 85 F1 | 	sub	objptr, ##3928
087b8     F2 30 02 FB | 	rdlong	local06, objptr
087bc     18 2F 02 F6 | 	mov	local05, local06
087c0     01 2E 66 F0 | 	shl	local05, #1
087c4     18 2F 02 F1 | 	add	local05, local06
087c8     02 2E 66 F0 | 	shl	local05, #2
087cc     03 00 00 FF 
087d0     00 E4 85 F1 | 	sub	objptr, ##1536
087d4     F2 2E 02 F1 | 	add	local05, objptr
087d8     17 35 62 FC | 	wrlong	local08, local05
087dc     03 00 00 FF 
087e0     00 E4 05 F1 | 	add	objptr, ##1536
087e4     F2 34 02 FB | 	rdlong	local08, objptr
087e8     1A 31 02 F6 | 	mov	local06, local08
087ec     01 30 66 F0 | 	shl	local06, #1
087f0     1A 31 02 F1 | 	add	local06, local08
087f4     02 30 66 F0 | 	shl	local06, #2
087f8     03 00 00 FF 
087fc     00 E4 85 F1 | 	sub	objptr, ##1536
08800     F2 30 02 F1 | 	add	local06, objptr
08804     04 30 06 F1 | 	add	local06, #4
08808     18 33 62 FC | 	wrlong	local07, local06
0880c     03 00 00 FF 
08810     00 E4 05 F1 | 	add	objptr, ##1536
08814     F2 34 02 FB | 	rdlong	local08, objptr
08818     1A 33 02 F6 | 	mov	local07, local08
0881c     01 32 66 F0 | 	shl	local07, #1
08820     1A 33 02 F1 | 	add	local07, local08
08824     02 32 66 F0 | 	shl	local07, #2
08828     03 00 00 FF 
0882c     00 E4 85 F1 | 	sub	objptr, ##1536
08830     F2 32 02 F1 | 	add	local07, objptr
08834     08 32 06 F1 | 	add	local07, #8
08838     19 37 62 FC | 	wrlong	local09, local07
0883c     03 00 00 FF 
08840     00 E4 05 F1 | 	add	objptr, ##1536
08844     F2 34 02 FB | 	rdlong	local08, objptr
08848     01 34 06 F1 | 	add	local08, #1
0884c     F2 34 62 FC | 	wrlong	local08, objptr
08850     13 00 00 FF 
08854     38 E4 85 F1 | 	sub	objptr, ##9784
08858     F2 34 02 FB | 	rdlong	local08, objptr
0885c     01 34 06 F1 | 	add	local08, #1
08860     F2 34 62 FC | 	wrlong	local08, objptr
08864                 | '   t1.result.uresult=memtop
08864                 | '   t1.result_type=result_string2  
08864                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08864                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08864     03 34 66 F0 | 	shl	local08, #3
08868     02 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##1080
08870     F2 34 02 F1 | 	add	local08, objptr
08874     04 34 06 F1 | 	add	local08, #4
08878     1A 35 02 FB | 	rdlong	local08, local08
0887c     11 34 0E F2 | 	cmp	local08, #17 wz
08880     35 00 00 FF 
08884     0C E4 85 F1 | 	sub	objptr, ##27148
08888     60 01 90 5D |  if_ne	jmp	#LR__0794
0888c     21 2A 06 F6 | 	mov	local03, #33
08890     13 35 02 F6 | 	mov	local08, local01
08894     14 33 02 F6 | 	mov	local07, local02
08898     15 39 02 F6 | 	mov	local10, local03
0889c     4A 00 00 FF 
088a0     7C E4 05 F1 | 	add	objptr, ##38012
088a4     F2 3A 02 FB | 	rdlong	local11, objptr
088a8     1D 3D 02 F6 | 	mov	local12, local11
088ac     01 3C 66 F0 | 	shl	local12, #1
088b0     1D 3D 02 F1 | 	add	local12, local11
088b4     02 3C 66 F0 | 	shl	local12, #2
088b8     03 00 00 FF 
088bc     00 E4 85 F1 | 	sub	objptr, ##1536
088c0     F2 3C 02 F1 | 	add	local12, objptr
088c4     1E 35 62 FC | 	wrlong	local08, local12
088c8     03 00 00 FF 
088cc     00 E4 05 F1 | 	add	objptr, ##1536
088d0     F2 3E 02 FB | 	rdlong	local13, objptr
088d4     1F 35 02 F6 | 	mov	local08, local13
088d8     01 34 66 F0 | 	shl	local08, #1
088dc     1F 35 02 F1 | 	add	local08, local13
088e0     02 34 66 F0 | 	shl	local08, #2
088e4     03 00 00 FF 
088e8     00 E4 85 F1 | 	sub	objptr, ##1536
088ec     F2 34 02 F1 | 	add	local08, objptr
088f0     04 34 06 F1 | 	add	local08, #4
088f4     1A 33 62 FC | 	wrlong	local07, local08
088f8     03 00 00 FF 
088fc     00 E4 05 F1 | 	add	objptr, ##1536
08900     F2 34 02 FB | 	rdlong	local08, objptr
08904     1A 41 02 F6 | 	mov	local14, local08
08908     01 40 66 F0 | 	shl	local14, #1
0890c     1A 41 02 F1 | 	add	local14, local08
08910     02 40 66 F0 | 	shl	local14, #2
08914     03 00 00 FF 
08918     00 E4 85 F1 | 	sub	objptr, ##1536
0891c     F2 40 02 F1 | 	add	local14, objptr
08920     08 40 06 F1 | 	add	local14, #8
08924     20 39 62 FC | 	wrlong	local10, local14
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 34 02 FB | 	rdlong	local08, objptr
08934     01 34 06 F1 | 	add	local08, #1
08938     F2 34 62 FC | 	wrlong	local08, objptr
0893c     44 2A 06 F6 | 	mov	local03, #68
08940     13 35 02 F6 | 	mov	local08, local01
08944     14 33 02 F6 | 	mov	local07, local02
08948     15 39 02 F6 | 	mov	local10, local03
0894c     F2 40 02 FB | 	rdlong	local14, objptr
08950     20 3F 02 F6 | 	mov	local13, local14
08954     01 3E 66 F0 | 	shl	local13, #1
08958     20 3F 02 F1 | 	add	local13, local14
0895c     02 3E 66 F0 | 	shl	local13, #2
08960     03 00 00 FF 
08964     00 E4 85 F1 | 	sub	objptr, ##1536
08968     F2 3E 02 F1 | 	add	local13, objptr
0896c     1F 35 62 FC | 	wrlong	local08, local13
08970     03 00 00 FF 
08974     00 E4 05 F1 | 	add	objptr, ##1536
08978     F2 40 02 FB | 	rdlong	local14, objptr
0897c     20 3F 02 F6 | 	mov	local13, local14
08980     01 3E 66 F0 | 	shl	local13, #1
08984     20 3F 02 F1 | 	add	local13, local14
08988     02 3E 66 F0 | 	shl	local13, #2
0898c     03 00 00 FF 
08990     00 E4 85 F1 | 	sub	objptr, ##1536
08994     F2 3E 02 F1 | 	add	local13, objptr
08998     04 3E 06 F1 | 	add	local13, #4
0899c     1F 33 62 FC | 	wrlong	local07, local13
089a0     03 00 00 FF 
089a4     00 E4 05 F1 | 	add	objptr, ##1536
089a8     F2 3E 02 FB | 	rdlong	local13, objptr
089ac     1F 41 02 F6 | 	mov	local14, local13
089b0     01 40 66 F0 | 	shl	local14, #1
089b4     1F 41 02 F1 | 	add	local14, local13
089b8     02 40 66 F0 | 	shl	local14, #2
089bc     03 00 00 FF 
089c0     00 E4 85 F1 | 	sub	objptr, ##1536
089c4     F2 40 02 F1 | 	add	local14, objptr
089c8     08 40 06 F1 | 	add	local14, #8
089cc     20 39 62 FC | 	wrlong	local10, local14
089d0     03 00 00 FF 
089d4     00 E4 05 F1 | 	add	objptr, ##1536
089d8     F2 34 02 FB | 	rdlong	local08, objptr
089dc     01 34 06 F1 | 	add	local08, #1
089e0     F2 34 62 FC | 	wrlong	local08, objptr
089e4     4A 00 00 FF 
089e8     7C E4 85 F1 | 	sub	objptr, ##38012
089ec                 | LR__0794
089ec                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
089ec     37 00 00 FF 
089f0     44 E4 05 F1 | 	add	objptr, ##28228
089f4     F2 34 02 FB | 	rdlong	local08, objptr
089f8     03 34 66 F0 | 	shl	local08, #3
089fc     02 00 00 FF 
08a00     38 E4 85 F1 | 	sub	objptr, ##1080
08a04     F2 34 02 F1 | 	add	local08, objptr
08a08     04 34 06 F1 | 	add	local08, #4
08a0c     1A 41 02 FB | 	rdlong	local14, local08
08a10     12 40 0E F2 | 	cmp	local14, #18 wz
08a14     35 00 00 FF 
08a18     0C E4 85 F1 | 	sub	objptr, ##27148
08a1c     60 01 90 5D |  if_ne	jmp	#LR__0795
08a20     22 2A 06 F6 | 	mov	local03, #34
08a24     13 35 02 F6 | 	mov	local08, local01
08a28     14 33 02 F6 | 	mov	local07, local02
08a2c     15 39 02 F6 | 	mov	local10, local03
08a30     4A 00 00 FF 
08a34     7C E4 05 F1 | 	add	objptr, ##38012
08a38     F2 40 02 FB | 	rdlong	local14, objptr
08a3c     20 3F 02 F6 | 	mov	local13, local14
08a40     01 3E 66 F0 | 	shl	local13, #1
08a44     20 3F 02 F1 | 	add	local13, local14
08a48     02 3E 66 F0 | 	shl	local13, #2
08a4c     03 00 00 FF 
08a50     00 E4 85 F1 | 	sub	objptr, ##1536
08a54     F2 3E 02 F1 | 	add	local13, objptr
08a58     1F 35 62 FC | 	wrlong	local08, local13
08a5c     03 00 00 FF 
08a60     00 E4 05 F1 | 	add	objptr, ##1536
08a64     F2 40 02 FB | 	rdlong	local14, objptr
08a68     20 35 02 F6 | 	mov	local08, local14
08a6c     01 34 66 F0 | 	shl	local08, #1
08a70     20 35 02 F1 | 	add	local08, local14
08a74     02 34 66 F0 | 	shl	local08, #2
08a78     03 00 00 FF 
08a7c     00 E4 85 F1 | 	sub	objptr, ##1536
08a80     F2 34 02 F1 | 	add	local08, objptr
08a84     04 34 06 F1 | 	add	local08, #4
08a88     1A 33 62 FC | 	wrlong	local07, local08
08a8c     03 00 00 FF 
08a90     00 E4 05 F1 | 	add	objptr, ##1536
08a94     F2 34 02 FB | 	rdlong	local08, objptr
08a98     1A 41 02 F6 | 	mov	local14, local08
08a9c     01 40 66 F0 | 	shl	local14, #1
08aa0     1A 41 02 F1 | 	add	local14, local08
08aa4     02 40 66 F0 | 	shl	local14, #2
08aa8     03 00 00 FF 
08aac     00 E4 85 F1 | 	sub	objptr, ##1536
08ab0     F2 40 02 F1 | 	add	local14, objptr
08ab4     08 40 06 F1 | 	add	local14, #8
08ab8     20 39 62 FC | 	wrlong	local10, local14
08abc     03 00 00 FF 
08ac0     00 E4 05 F1 | 	add	objptr, ##1536
08ac4     F2 34 02 FB | 	rdlong	local08, objptr
08ac8     01 34 06 F1 | 	add	local08, #1
08acc     F2 34 62 FC | 	wrlong	local08, objptr
08ad0     44 2A 06 F6 | 	mov	local03, #68
08ad4     13 35 02 F6 | 	mov	local08, local01
08ad8     14 33 02 F6 | 	mov	local07, local02
08adc     15 39 02 F6 | 	mov	local10, local03
08ae0     F2 40 02 FB | 	rdlong	local14, objptr
08ae4     20 3F 02 F6 | 	mov	local13, local14
08ae8     01 3E 66 F0 | 	shl	local13, #1
08aec     20 3F 02 F1 | 	add	local13, local14
08af0     02 3E 66 F0 | 	shl	local13, #2
08af4     03 00 00 FF 
08af8     00 E4 85 F1 | 	sub	objptr, ##1536
08afc     F2 3E 02 F1 | 	add	local13, objptr
08b00     1F 35 62 FC | 	wrlong	local08, local13
08b04     03 00 00 FF 
08b08     00 E4 05 F1 | 	add	objptr, ##1536
08b0c     F2 40 02 FB | 	rdlong	local14, objptr
08b10     20 3F 02 F6 | 	mov	local13, local14
08b14     01 3E 66 F0 | 	shl	local13, #1
08b18     20 3F 02 F1 | 	add	local13, local14
08b1c     02 3E 66 F0 | 	shl	local13, #2
08b20     03 00 00 FF 
08b24     00 E4 85 F1 | 	sub	objptr, ##1536
08b28     F2 3E 02 F1 | 	add	local13, objptr
08b2c     04 3E 06 F1 | 	add	local13, #4
08b30     1F 33 62 FC | 	wrlong	local07, local13
08b34     03 00 00 FF 
08b38     00 E4 05 F1 | 	add	objptr, ##1536
08b3c     F2 3E 02 FB | 	rdlong	local13, objptr
08b40     1F 41 02 F6 | 	mov	local14, local13
08b44     01 40 66 F0 | 	shl	local14, #1
08b48     1F 41 02 F1 | 	add	local14, local13
08b4c     02 40 66 F0 | 	shl	local14, #2
08b50     03 00 00 FF 
08b54     00 E4 85 F1 | 	sub	objptr, ##1536
08b58     F2 40 02 F1 | 	add	local14, objptr
08b5c     08 40 06 F1 | 	add	local14, #8
08b60     20 39 62 FC | 	wrlong	local10, local14
08b64     03 00 00 FF 
08b68     00 E4 05 F1 | 	add	objptr, ##1536
08b6c     F2 34 02 FB | 	rdlong	local08, objptr
08b70     01 34 06 F1 | 	add	local08, #1
08b74     F2 34 62 FC | 	wrlong	local08, objptr
08b78     4A 00 00 FF 
08b7c     7C E4 85 F1 | 	sub	objptr, ##38012
08b80                 | LR__0795
08b80                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08b80     37 00 00 FF 
08b84     44 E4 05 F1 | 	add	objptr, ##28228
08b88     F2 34 02 FB | 	rdlong	local08, objptr
08b8c     03 34 66 F0 | 	shl	local08, #3
08b90     02 00 00 FF 
08b94     38 E4 85 F1 | 	sub	objptr, ##1080
08b98     F2 34 02 F1 | 	add	local08, objptr
08b9c     04 34 06 F1 | 	add	local08, #4
08ba0     1A 41 02 FB | 	rdlong	local14, local08
08ba4     12 40 0E F2 | 	cmp	local14, #18 wz
08ba8     35 00 00 FF 
08bac     0C E4 85 F1 | 	sub	objptr, ##27148
08bb0     00 01 90 AD |  if_e	jmp	#LR__0796
08bb4     37 00 00 FF 
08bb8     44 E4 05 F1 | 	add	objptr, ##28228
08bbc     F2 34 02 FB | 	rdlong	local08, objptr
08bc0     03 34 66 F0 | 	shl	local08, #3
08bc4     02 00 00 FF 
08bc8     38 E4 85 F1 | 	sub	objptr, ##1080
08bcc     F2 34 02 F1 | 	add	local08, objptr
08bd0     04 34 06 F1 | 	add	local08, #4
08bd4     1A 41 02 FB | 	rdlong	local14, local08
08bd8     11 40 0E F2 | 	cmp	local14, #17 wz
08bdc     35 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##27148
08be4     CC 00 90 AD |  if_e	jmp	#LR__0796
08be8     44 2A 06 F6 | 	mov	local03, #68
08bec     13 35 02 F6 | 	mov	local08, local01
08bf0     14 33 02 F6 | 	mov	local07, local02
08bf4     15 39 02 F6 | 	mov	local10, local03
08bf8     4A 00 00 FF 
08bfc     7C E4 05 F1 | 	add	objptr, ##38012
08c00     F2 40 02 FB | 	rdlong	local14, objptr
08c04     20 3F 02 F6 | 	mov	local13, local14
08c08     01 3E 66 F0 | 	shl	local13, #1
08c0c     20 3F 02 F1 | 	add	local13, local14
08c10     02 3E 66 F0 | 	shl	local13, #2
08c14     03 00 00 FF 
08c18     00 E4 85 F1 | 	sub	objptr, ##1536
08c1c     F2 3E 02 F1 | 	add	local13, objptr
08c20     1F 35 62 FC | 	wrlong	local08, local13
08c24     03 00 00 FF 
08c28     00 E4 05 F1 | 	add	objptr, ##1536
08c2c     F2 40 02 FB | 	rdlong	local14, objptr
08c30     20 3F 02 F6 | 	mov	local13, local14
08c34     01 3E 66 F0 | 	shl	local13, #1
08c38     20 3F 02 F1 | 	add	local13, local14
08c3c     02 3E 66 F0 | 	shl	local13, #2
08c40     03 00 00 FF 
08c44     00 E4 85 F1 | 	sub	objptr, ##1536
08c48     F2 3E 02 F1 | 	add	local13, objptr
08c4c     04 3E 06 F1 | 	add	local13, #4
08c50     1F 33 62 FC | 	wrlong	local07, local13
08c54     03 00 00 FF 
08c58     00 E4 05 F1 | 	add	objptr, ##1536
08c5c     F2 3E 02 FB | 	rdlong	local13, objptr
08c60     1F 41 02 F6 | 	mov	local14, local13
08c64     01 40 66 F0 | 	shl	local14, #1
08c68     1F 41 02 F1 | 	add	local14, local13
08c6c     02 40 66 F0 | 	shl	local14, #2
08c70     03 00 00 FF 
08c74     00 E4 85 F1 | 	sub	objptr, ##1536
08c78     F2 40 02 F1 | 	add	local14, objptr
08c7c     08 40 06 F1 | 	add	local14, #8
08c80     20 39 62 FC | 	wrlong	local10, local14
08c84     03 00 00 FF 
08c88     00 E4 05 F1 | 	add	objptr, ##1536
08c8c     F2 34 02 FB | 	rdlong	local08, objptr
08c90     01 34 06 F1 | 	add	local08, #1
08c94     F2 34 62 FC | 	wrlong	local08, objptr
08c98     13 00 00 FF 
08c9c     38 E4 85 F1 | 	sub	objptr, ##9784
08ca0     F2 34 02 FB | 	rdlong	local08, objptr
08ca4     01 34 86 F1 | 	sub	local08, #1
08ca8     F2 34 62 FC | 	wrlong	local08, objptr
08cac     37 00 00 FF 
08cb0     44 E4 85 F1 | 	sub	objptr, ##28228
08cb4                 | LR__0796
08cb4     37 00 00 FF 
08cb8     44 E4 05 F1 | 	add	objptr, ##28228
08cbc     F2 34 02 FB | 	rdlong	local08, objptr
08cc0     01 34 06 F1 | 	add	local08, #1
08cc4     F2 34 62 FC | 	wrlong	local08, objptr
08cc8     37 00 00 FF 
08ccc     44 E4 85 F1 | 	sub	objptr, ##28228
08cd0                 | LR__0797
08cd0     00 2E 06 F6 | 	mov	local05, #0
08cd4                 | ' i=0 : err=0
08cd4                 | ' if lparts(ct).token<>token_end then
08cd4     37 00 00 FF 
08cd8     44 E4 05 F1 | 	add	objptr, ##28228
08cdc     F2 40 02 FB | 	rdlong	local14, objptr
08ce0     03 40 66 F0 | 	shl	local14, #3
08ce4     02 00 00 FF 
08ce8     38 E4 85 F1 | 	sub	objptr, ##1080
08cec     F2 40 02 F1 | 	add	local14, objptr
08cf0     04 40 06 F1 | 	add	local14, #4
08cf4     20 41 02 FB | 	rdlong	local14, local14
08cf8     FE 41 0E F2 | 	cmp	local14, #510 wz
08cfc     35 00 00 FF 
08d00     0C E4 85 F1 | 	sub	objptr, ##27148
08d04     98 00 90 AD |  if_e	jmp	#LR__0799
08d08                 | '   do
08d08                 | LR__0798
08d08     D0 22 B0 FD | 	call	#_getaddr
08d0c     FD 42 02 F6 | 	mov	local15, result1
08d10     37 00 00 FF 
08d14     44 E4 05 F1 | 	add	objptr, ##28228
08d18     F2 40 02 FB | 	rdlong	local14, objptr
08d1c     01 40 06 F1 | 	add	local14, #1
08d20     F2 40 62 FC | 	wrlong	local14, objptr
08d24     01 2E 06 F1 | 	add	local05, #1
08d28                 | '     err=getaddr() :ct+=1
08d28                 | '     i+=1 
08d28                 | '     if lparts(ct).token=token_comma then ct+=1 
08d28     03 40 66 F0 | 	shl	local14, #3
08d2c     02 00 00 FF 
08d30     38 E4 85 F1 | 	sub	objptr, ##1080
08d34     F2 40 02 F1 | 	add	local14, objptr
08d38     04 40 06 F1 | 	add	local14, #4
08d3c     20 41 02 FB | 	rdlong	local14, local14
08d40     11 40 0E F2 | 	cmp	local14, #17 wz
08d44     35 00 00 FF 
08d48     0C E4 85 F1 | 	sub	objptr, ##27148
08d4c     37 00 00 AF 
08d50     44 E4 05 A1 |  if_e	add	objptr, ##28228
08d54     F2 34 02 AB |  if_e	rdlong	local08, objptr
08d58     01 34 06 A1 |  if_e	add	local08, #1
08d5c     F2 34 62 AC |  if_e	wrlong	local08, objptr
08d60     37 00 00 AF 
08d64     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08d68                 | '     if lparts(ct).token=token_end then exit loop
08d68     37 00 00 FF 
08d6c     44 E4 05 F1 | 	add	objptr, ##28228
08d70     F2 40 02 FB | 	rdlong	local14, objptr
08d74     03 40 66 F0 | 	shl	local14, #3
08d78     02 00 00 FF 
08d7c     38 E4 85 F1 | 	sub	objptr, ##1080
08d80     F2 40 02 F1 | 	add	local14, objptr
08d84     04 40 06 F1 | 	add	local14, #4
08d88     20 41 02 FB | 	rdlong	local14, local14
08d8c     FE 41 0E F2 | 	cmp	local14, #510 wz
08d90     35 00 00 FF 
08d94     0C E4 85 F1 | 	sub	objptr, ##27148
08d98     08 00 90 AD |  if_e	jmp	#LR__0800
08d9c     68 FF 9F FD | 	jmp	#LR__0798
08da0                 | LR__0799
08da0     36 42 06 F6 | 	mov	local15, #54
08da4                 | LR__0800
08da4                 | ' return i,err
08da4     17 FB 01 F6 | 	mov	result1, local05
08da8     21 FD 01 F6 | 	mov	result2, local15
08dac     A7 F0 03 F6 | 	mov	ptra, fp
08db0     B2 00 A0 FD | 	call	#popregs_
08db4                 | _compile_input_ret
08db4     2D 00 64 FD | 	ret
08db8                 | 
08db8                 | ' 
08db8                 | ' '----- compile assign to an array element
08db8                 | ' 
08db8                 | ' function compile_array_assign() as ulong 
08db8                 | _compile_array_assign
08db8     0B 4A 05 F6 | 	mov	COUNT_, #11
08dbc     A8 00 A0 FD | 	call	#pushregs_
08dc0     00 2C 06 F6 | 	mov	local04, #0
08dc4     00 2E 06 F6 | 	mov	local05, #0
08dc8     37 00 00 FF 
08dcc     44 E4 05 F1 | 	add	objptr, ##28228
08dd0     F2 30 02 FB | 	rdlong	local06, objptr
08dd4     18 FB 01 F6 | 	mov	result1, local06
08dd8     01 FA 85 F1 | 	sub	result1, #1
08ddc     03 FA 65 F0 | 	shl	result1, #3
08de0     02 00 00 FF 
08de4     38 E4 85 F1 | 	sub	objptr, ##1080
08de8     F2 FA 01 F1 | 	add	result1, objptr
08dec     FD 32 02 FB | 	rdlong	local07, result1
08df0                 | ' numpar=0 : err=0
08df0                 | ' varname$=lparts(ct-1).part$
08df0                 | ' if lparts(ct).token=token_lpar then
08df0     03 30 66 F0 | 	shl	local06, #3
08df4     F2 30 02 F1 | 	add	local06, objptr
08df8     04 30 06 F1 | 	add	local06, #4
08dfc     18 31 02 FB | 	rdlong	local06, local06
08e00     15 30 0E F2 | 	cmp	local06, #21 wz
08e04     35 00 00 FF 
08e08     0C E4 85 F1 | 	sub	objptr, ##27148
08e0c     F4 01 90 5D |  if_ne	jmp	#LR__0814
08e10     37 00 00 FF 
08e14     44 E4 05 F1 | 	add	objptr, ##28228
08e18     F2 34 02 FB | 	rdlong	local08, objptr
08e1c     01 34 06 F1 | 	add	local08, #1
08e20     F2 34 62 FC | 	wrlong	local08, objptr
08e24     37 00 00 FF 
08e28     44 E4 85 F1 | 	sub	objptr, ##28228
08e2c                 | '   ct+=1 											' omit this lpar, this is for expr list
08e2c                 | '   do
08e2c                 | LR__0810
08e2c     40 25 B0 FD | 	call	#_expr
08e30     37 00 00 FF 
08e34     44 E4 05 F1 | 	add	objptr, ##28228
08e38     F2 30 02 FB | 	rdlong	local06, objptr
08e3c     01 30 06 F1 | 	add	local06, #1
08e40     F2 30 62 FC | 	wrlong	local06, objptr
08e44     01 2C 06 F1 | 	add	local04, #1
08e48     01 30 86 F1 | 	sub	local06, #1
08e4c     03 30 66 F0 | 	shl	local06, #3
08e50     02 00 00 FF 
08e54     38 E4 85 F1 | 	sub	objptr, ##1080
08e58     F2 30 02 F1 | 	add	local06, objptr
08e5c     04 30 06 F1 | 	add	local06, #4
08e60     18 35 02 FB | 	rdlong	local08, local06
08e64     14 34 0E F2 | 	cmp	local08, #20 wz
08e68     35 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##27148
08e70     34 00 90 AD |  if_e	jmp	#LR__0811
08e74     37 00 00 FF 
08e78     44 E4 05 F1 | 	add	objptr, ##28228
08e7c     F2 34 02 FB | 	rdlong	local08, objptr
08e80     03 34 66 F0 | 	shl	local08, #3
08e84     02 00 00 FF 
08e88     38 E4 85 F1 | 	sub	objptr, ##1080
08e8c     F2 34 02 F1 | 	add	local08, objptr
08e90     04 34 06 F1 | 	add	local08, #4
08e94     1A 35 02 FB | 	rdlong	local08, local08
08e98     FE 35 0E F2 | 	cmp	local08, #510 wz
08e9c     35 00 00 FF 
08ea0     0C E4 85 F1 | 	sub	objptr, ##27148
08ea4     84 FF 9F 5D |  if_ne	jmp	#LR__0810
08ea8                 | LR__0811
08ea8     37 00 00 FF 
08eac     44 E4 05 F1 | 	add	objptr, ##28228
08eb0     F2 34 02 FB | 	rdlong	local08, objptr
08eb4     01 34 06 F1 | 	add	local08, #1
08eb8     F2 34 62 FC | 	wrlong	local08, objptr
08ebc     37 00 00 FF 
08ec0     44 E4 85 F1 | 	sub	objptr, ##28228
08ec4     A8 24 B0 FD | 	call	#_expr
08ec8     01 36 66 F6 | 	neg	local09, #1
08ecc     00 38 06 F6 | 	mov	local10, #0
08ed0                 | '   ct+=1 : expr()
08ed0                 | '   j=-1 : i=0 
08ed0                 | '   do 
08ed0                 | LR__0812
08ed0                 | '     if variables(i).name=varname$ then j=i: exit loop
08ed0     1C 31 02 F6 | 	mov	local06, local10
08ed4     04 30 66 F0 | 	shl	local06, #4
08ed8     14 00 00 FF 
08edc     F8 E5 05 F1 | 	add	objptr, ##10744
08ee0     F2 30 02 F1 | 	add	local06, objptr
08ee4     18 13 02 FB | 	rdlong	arg01, local06
08ee8     19 15 02 F6 | 	mov	arg02, local07
08eec     14 00 00 FF 
08ef0     F8 E5 85 F1 | 	sub	objptr, ##10744
08ef4     04 C0 B1 FD | 	call	#__system___string_cmp
08ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
08efc     1C 37 02 A6 |  if_e	mov	local09, local10
08f00     20 00 90 AD |  if_e	jmp	#LR__0813
08f04     01 38 06 F1 | 	add	local10, #1
08f08     35 00 00 FF 
08f0c     08 E4 05 F1 | 	add	objptr, ##27144
08f10     F2 34 02 FB | 	rdlong	local08, objptr
08f14     35 00 00 FF 
08f18     08 E4 85 F1 | 	sub	objptr, ##27144
08f1c     1A 39 5A F2 | 	cmps	local10, local08 wcz
08f20     AC FF 9F ED |  if_be	jmp	#LR__0812
08f24                 | LR__0813
08f24     1B 27 02 F6 | 	mov	local01, local09
08f28     16 29 02 F6 | 	mov	local02, local04
08f2c     17 2A 06 F6 | 	mov	local03, #23
08f30     13 35 02 F6 | 	mov	local08, local01
08f34     14 3B 02 F6 | 	mov	local11, local02
08f38     15 33 02 F6 | 	mov	local07, local03
08f3c     4A 00 00 FF 
08f40     7C E4 05 F1 | 	add	objptr, ##38012
08f44     F2 26 02 FB | 	rdlong	local01, objptr
08f48     13 37 02 F6 | 	mov	local09, local01
08f4c     01 36 66 F0 | 	shl	local09, #1
08f50     13 37 02 F1 | 	add	local09, local01
08f54     02 36 66 F0 | 	shl	local09, #2
08f58     03 00 00 FF 
08f5c     00 E4 85 F1 | 	sub	objptr, ##1536
08f60     F2 36 02 F1 | 	add	local09, objptr
08f64     1B 35 62 FC | 	wrlong	local08, local09
08f68     03 00 00 FF 
08f6c     00 E4 05 F1 | 	add	objptr, ##1536
08f70     F2 26 02 FB | 	rdlong	local01, objptr
08f74     13 37 02 F6 | 	mov	local09, local01
08f78     01 36 66 F0 | 	shl	local09, #1
08f7c     13 37 02 F1 | 	add	local09, local01
08f80     02 36 66 F0 | 	shl	local09, #2
08f84     03 00 00 FF 
08f88     00 E4 85 F1 | 	sub	objptr, ##1536
08f8c     F2 36 02 F1 | 	add	local09, objptr
08f90     04 36 06 F1 | 	add	local09, #4
08f94     1B 3B 62 FC | 	wrlong	local11, local09
08f98     03 00 00 FF 
08f9c     00 E4 05 F1 | 	add	objptr, ##1536
08fa0     F2 3A 02 FB | 	rdlong	local11, objptr
08fa4     1D 27 02 F6 | 	mov	local01, local11
08fa8     01 26 66 F0 | 	shl	local01, #1
08fac     1D 27 02 F1 | 	add	local01, local11
08fb0     02 26 66 F0 | 	shl	local01, #2
08fb4     03 00 00 FF 
08fb8     00 E4 85 F1 | 	sub	objptr, ##1536
08fbc     F2 26 02 F1 | 	add	local01, objptr
08fc0     08 26 06 F1 | 	add	local01, #8
08fc4     13 33 62 FC | 	wrlong	local07, local01
08fc8     03 00 00 FF 
08fcc     00 E4 05 F1 | 	add	objptr, ##1536
08fd0     F2 34 02 FB | 	rdlong	local08, objptr
08fd4     01 34 06 F1 | 	add	local08, #1
08fd8     F2 34 62 FC | 	wrlong	local08, objptr
08fdc                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08fdc                 | '   if numpar>3 then err=45
08fdc     04 2C 16 F2 | 	cmp	local04, #4 wc
08fe0     2D 2E 06 36 |  if_ae	mov	local05, #45
08fe4                 | '   if i>varnum then err=20
08fe4     15 00 00 FF 
08fe8     74 E4 85 F1 | 	sub	objptr, ##10868
08fec     F2 34 02 FB | 	rdlong	local08, objptr
08ff0     35 00 00 FF 
08ff4     08 E4 85 F1 | 	sub	objptr, ##27144
08ff8     1A 39 5A F2 | 	cmps	local10, local08 wcz
08ffc     14 2E 06 16 |  if_a	mov	local05, #20
09000     04 00 90 FD | 	jmp	#LR__0815
09004                 | LR__0814
09004     0E 2E 06 F6 | 	mov	local05, #14
09008                 | LR__0815
09008                 | ' return err
09008     17 FB 01 F6 | 	mov	result1, local05
0900c     A7 F0 03 F6 | 	mov	ptra, fp
09010     B2 00 A0 FD | 	call	#popregs_
09014                 | _compile_array_assign_ret
09014     2D 00 64 FD | 	ret
09018                 | 
09018                 | ' 
09018                 | ' '----- compile print command with its ";" and "," modifiers
09018                 | ' 
09018                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09018                 | _compile_print
09018     0B 4A 05 F6 | 	mov	COUNT_, #11
0901c     A8 00 A0 FD | 	call	#pushregs_
09020     00 26 06 F6 | 	mov	local01, #0
09024     1D 2A 06 F6 | 	mov	local03, #29
09028                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09028                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09028     37 00 00 FF 
0902c     44 E4 05 F1 | 	add	objptr, ##28228
09030     F2 2C 02 FB | 	rdlong	local04, objptr
09034     03 2C 66 F0 | 	shl	local04, #3
09038     02 00 00 FF 
0903c     38 E4 85 F1 | 	sub	objptr, ##1080
09040     F2 2C 02 F1 | 	add	local04, objptr
09044     04 2C 06 F1 | 	add	local04, #4
09048     16 2D 02 FB | 	rdlong	local04, local04
0904c     FE 2D 0E F2 | 	cmp	local04, #510 wz
09050     35 00 00 FF 
09054     0C E4 85 F1 | 	sub	objptr, ##27148
09058     68 01 90 5D |  if_ne	jmp	#LR__0820
0905c     20 2A 06 F6 | 	mov	local03, #32
09060     13 2F 02 F6 | 	mov	local05, local01
09064     14 31 02 F6 | 	mov	local06, local02
09068     15 33 02 F6 | 	mov	local07, local03
0906c     4A 00 00 FF 
09070     7C E4 05 F1 | 	add	objptr, ##38012
09074     F2 34 02 FB | 	rdlong	local08, objptr
09078     1A 37 02 F6 | 	mov	local09, local08
0907c     01 36 66 F0 | 	shl	local09, #1
09080     1A 37 02 F1 | 	add	local09, local08
09084     02 36 66 F0 | 	shl	local09, #2
09088     03 00 00 FF 
0908c     00 E4 85 F1 | 	sub	objptr, ##1536
09090     F2 36 02 F1 | 	add	local09, objptr
09094     1B 2F 62 FC | 	wrlong	local05, local09
09098     03 00 00 FF 
0909c     00 E4 05 F1 | 	add	objptr, ##1536
090a0     F2 2E 02 FB | 	rdlong	local05, objptr
090a4     17 39 02 F6 | 	mov	local10, local05
090a8     01 38 66 F0 | 	shl	local10, #1
090ac     17 39 02 F1 | 	add	local10, local05
090b0     02 38 66 F0 | 	shl	local10, #2
090b4     03 00 00 FF 
090b8     00 E4 85 F1 | 	sub	objptr, ##1536
090bc     F2 38 02 F1 | 	add	local10, objptr
090c0     04 38 06 F1 | 	add	local10, #4
090c4     1C 31 62 FC | 	wrlong	local06, local10
090c8     03 00 00 FF 
090cc     00 E4 05 F1 | 	add	objptr, ##1536
090d0     F2 2E 02 FB | 	rdlong	local05, objptr
090d4     17 3B 02 F6 | 	mov	local11, local05
090d8     01 3A 66 F0 | 	shl	local11, #1
090dc     17 3B 02 F1 | 	add	local11, local05
090e0     02 3A 66 F0 | 	shl	local11, #2
090e4     03 00 00 FF 
090e8     00 E4 85 F1 | 	sub	objptr, ##1536
090ec     F2 3A 02 F1 | 	add	local11, objptr
090f0     08 3A 06 F1 | 	add	local11, #8
090f4     1D 33 62 FC | 	wrlong	local07, local11
090f8     03 00 00 FF 
090fc     00 E4 05 F1 | 	add	objptr, ##1536
09100     F2 2E 02 FB | 	rdlong	local05, objptr
09104     01 2E 06 F1 | 	add	local05, #1
09108     F2 2E 62 FC | 	wrlong	local05, objptr
0910c     44 2A 06 F6 | 	mov	local03, #68
09110     13 2F 02 F6 | 	mov	local05, local01
09114     14 31 02 F6 | 	mov	local06, local02
09118     15 33 02 F6 | 	mov	local07, local03
0911c     F2 34 02 FB | 	rdlong	local08, objptr
09120     1A 37 02 F6 | 	mov	local09, local08
09124     01 36 66 F0 | 	shl	local09, #1
09128     1A 37 02 F1 | 	add	local09, local08
0912c     02 36 66 F0 | 	shl	local09, #2
09130     03 00 00 FF 
09134     00 E4 85 F1 | 	sub	objptr, ##1536
09138     F2 36 02 F1 | 	add	local09, objptr
0913c     1B 2F 62 FC | 	wrlong	local05, local09
09140     03 00 00 FF 
09144     00 E4 05 F1 | 	add	objptr, ##1536
09148     F2 3A 02 FB | 	rdlong	local11, objptr
0914c     1D 39 02 F6 | 	mov	local10, local11
09150     01 38 66 F0 | 	shl	local10, #1
09154     1D 39 02 F1 | 	add	local10, local11
09158     02 38 66 F0 | 	shl	local10, #2
0915c     03 00 00 FF 
09160     00 E4 85 F1 | 	sub	objptr, ##1536
09164     F2 38 02 F1 | 	add	local10, objptr
09168     04 38 06 F1 | 	add	local10, #4
0916c     1C 31 62 FC | 	wrlong	local06, local10
09170     03 00 00 FF 
09174     00 E4 05 F1 | 	add	objptr, ##1536
09178     F2 38 02 FB | 	rdlong	local10, objptr
0917c     1C 3B 02 F6 | 	mov	local11, local10
09180     01 3A 66 F0 | 	shl	local11, #1
09184     1C 3B 02 F1 | 	add	local11, local10
09188     02 3A 66 F0 | 	shl	local11, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 3A 02 F1 | 	add	local11, objptr
09198     08 3A 06 F1 | 	add	local11, #8
0919c     1D 33 62 FC | 	wrlong	local07, local11
091a0     03 00 00 FF 
091a4     00 E4 05 F1 | 	add	objptr, ##1536
091a8     F2 2E 02 FB | 	rdlong	local05, objptr
091ac     01 2E 06 F1 | 	add	local05, #1
091b0     F2 2E 62 FC | 	wrlong	local05, objptr
091b4     4A 00 00 FF 
091b8     7C E4 85 F1 | 	sub	objptr, ##38012
091bc     00 FA 05 F6 | 	mov	result1, #0
091c0     20 05 90 FD | 	jmp	#LR__0827
091c4                 | LR__0820
091c4                 | ' do
091c4                 | LR__0821
091c4     A8 21 B0 FD | 	call	#_expr
091c8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
091c8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
091c8     37 00 00 FF 
091cc     44 E4 05 F1 | 	add	objptr, ##28228
091d0     F2 2C 02 FB | 	rdlong	local04, objptr
091d4     03 2C 66 F0 | 	shl	local04, #3
091d8     02 00 00 FF 
091dc     38 E4 85 F1 | 	sub	objptr, ##1080
091e0     F2 2C 02 F1 | 	add	local04, objptr
091e4     04 2C 06 F1 | 	add	local04, #4
091e8     16 35 02 FB | 	rdlong	local08, local04
091ec     11 34 0E F2 | 	cmp	local08, #17 wz
091f0     35 00 00 FF 
091f4     0C E4 85 F1 | 	sub	objptr, ##27148
091f8     60 01 90 5D |  if_ne	jmp	#LR__0822
091fc     21 2A 06 F6 | 	mov	local03, #33
09200     13 2F 02 F6 | 	mov	local05, local01
09204     14 31 02 F6 | 	mov	local06, local02
09208     15 33 02 F6 | 	mov	local07, local03
0920c     4A 00 00 FF 
09210     7C E4 05 F1 | 	add	objptr, ##38012
09214     F2 34 02 FB | 	rdlong	local08, objptr
09218     1A 37 02 F6 | 	mov	local09, local08
0921c     01 36 66 F0 | 	shl	local09, #1
09220     1A 37 02 F1 | 	add	local09, local08
09224     02 36 66 F0 | 	shl	local09, #2
09228     03 00 00 FF 
0922c     00 E4 85 F1 | 	sub	objptr, ##1536
09230     F2 36 02 F1 | 	add	local09, objptr
09234     1B 2F 62 FC | 	wrlong	local05, local09
09238     03 00 00 FF 
0923c     00 E4 05 F1 | 	add	objptr, ##1536
09240     F2 3A 02 FB | 	rdlong	local11, objptr
09244     1D 39 02 F6 | 	mov	local10, local11
09248     01 38 66 F0 | 	shl	local10, #1
0924c     1D 39 02 F1 | 	add	local10, local11
09250     02 38 66 F0 | 	shl	local10, #2
09254     03 00 00 FF 
09258     00 E4 85 F1 | 	sub	objptr, ##1536
0925c     F2 38 02 F1 | 	add	local10, objptr
09260     04 38 06 F1 | 	add	local10, #4
09264     1C 31 62 FC | 	wrlong	local06, local10
09268     03 00 00 FF 
0926c     00 E4 05 F1 | 	add	objptr, ##1536
09270     F2 2E 02 FB | 	rdlong	local05, objptr
09274     17 3B 02 F6 | 	mov	local11, local05
09278     01 3A 66 F0 | 	shl	local11, #1
0927c     17 3B 02 F1 | 	add	local11, local05
09280     02 3A 66 F0 | 	shl	local11, #2
09284     03 00 00 FF 
09288     00 E4 85 F1 | 	sub	objptr, ##1536
0928c     F2 3A 02 F1 | 	add	local11, objptr
09290     08 3A 06 F1 | 	add	local11, #8
09294     1D 33 62 FC | 	wrlong	local07, local11
09298     03 00 00 FF 
0929c     00 E4 05 F1 | 	add	objptr, ##1536
092a0     F2 2E 02 FB | 	rdlong	local05, objptr
092a4     01 2E 06 F1 | 	add	local05, #1
092a8     F2 2E 62 FC | 	wrlong	local05, objptr
092ac     44 2A 06 F6 | 	mov	local03, #68
092b0     13 2F 02 F6 | 	mov	local05, local01
092b4     14 31 02 F6 | 	mov	local06, local02
092b8     15 33 02 F6 | 	mov	local07, local03
092bc     F2 34 02 FB | 	rdlong	local08, objptr
092c0     1A 37 02 F6 | 	mov	local09, local08
092c4     01 36 66 F0 | 	shl	local09, #1
092c8     1A 37 02 F1 | 	add	local09, local08
092cc     02 36 66 F0 | 	shl	local09, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 36 02 F1 | 	add	local09, objptr
092dc     1B 2F 62 FC | 	wrlong	local05, local09
092e0     03 00 00 FF 
092e4     00 E4 05 F1 | 	add	objptr, ##1536
092e8     F2 3A 02 FB | 	rdlong	local11, objptr
092ec     1D 39 02 F6 | 	mov	local10, local11
092f0     01 38 66 F0 | 	shl	local10, #1
092f4     1D 39 02 F1 | 	add	local10, local11
092f8     02 38 66 F0 | 	shl	local10, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 38 02 F1 | 	add	local10, objptr
09308     04 38 06 F1 | 	add	local10, #4
0930c     1C 31 62 FC | 	wrlong	local06, local10
09310     03 00 00 FF 
09314     00 E4 05 F1 | 	add	objptr, ##1536
09318     F2 38 02 FB | 	rdlong	local10, objptr
0931c     1C 3B 02 F6 | 	mov	local11, local10
09320     01 3A 66 F0 | 	shl	local11, #1
09324     1C 3B 02 F1 | 	add	local11, local10
09328     02 3A 66 F0 | 	shl	local11, #2
0932c     03 00 00 FF 
09330     00 E4 85 F1 | 	sub	objptr, ##1536
09334     F2 3A 02 F1 | 	add	local11, objptr
09338     08 3A 06 F1 | 	add	local11, #8
0933c     1D 33 62 FC | 	wrlong	local07, local11
09340     03 00 00 FF 
09344     00 E4 05 F1 | 	add	objptr, ##1536
09348     F2 2E 02 FB | 	rdlong	local05, objptr
0934c     01 2E 06 F1 | 	add	local05, #1
09350     F2 2E 62 FC | 	wrlong	local05, objptr
09354     4A 00 00 FF 
09358     7C E4 85 F1 | 	sub	objptr, ##38012
0935c                 | LR__0822
0935c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0935c     37 00 00 FF 
09360     44 E4 05 F1 | 	add	objptr, ##28228
09364     F2 2C 02 FB | 	rdlong	local04, objptr
09368     03 2C 66 F0 | 	shl	local04, #3
0936c     02 00 00 FF 
09370     38 E4 85 F1 | 	sub	objptr, ##1080
09374     F2 2C 02 F1 | 	add	local04, objptr
09378     04 2C 06 F1 | 	add	local04, #4
0937c     16 35 02 FB | 	rdlong	local08, local04
09380     12 34 0E F2 | 	cmp	local08, #18 wz
09384     35 00 00 FF 
09388     0C E4 85 F1 | 	sub	objptr, ##27148
0938c     60 01 90 5D |  if_ne	jmp	#LR__0823
09390     22 2A 06 F6 | 	mov	local03, #34
09394     13 2F 02 F6 | 	mov	local05, local01
09398     14 31 02 F6 | 	mov	local06, local02
0939c     15 33 02 F6 | 	mov	local07, local03
093a0     4A 00 00 FF 
093a4     7C E4 05 F1 | 	add	objptr, ##38012
093a8     F2 34 02 FB | 	rdlong	local08, objptr
093ac     1A 37 02 F6 | 	mov	local09, local08
093b0     01 36 66 F0 | 	shl	local09, #1
093b4     1A 37 02 F1 | 	add	local09, local08
093b8     02 36 66 F0 | 	shl	local09, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 36 02 F1 | 	add	local09, objptr
093c8     1B 2F 62 FC | 	wrlong	local05, local09
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 3A 02 FB | 	rdlong	local11, objptr
093d8     1D 39 02 F6 | 	mov	local10, local11
093dc     01 38 66 F0 | 	shl	local10, #1
093e0     1D 39 02 F1 | 	add	local10, local11
093e4     02 38 66 F0 | 	shl	local10, #2
093e8     03 00 00 FF 
093ec     00 E4 85 F1 | 	sub	objptr, ##1536
093f0     F2 38 02 F1 | 	add	local10, objptr
093f4     04 38 06 F1 | 	add	local10, #4
093f8     1C 31 62 FC | 	wrlong	local06, local10
093fc     03 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##1536
09404     F2 2E 02 FB | 	rdlong	local05, objptr
09408     17 3B 02 F6 | 	mov	local11, local05
0940c     01 3A 66 F0 | 	shl	local11, #1
09410     17 3B 02 F1 | 	add	local11, local05
09414     02 3A 66 F0 | 	shl	local11, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 3A 02 F1 | 	add	local11, objptr
09424     08 3A 06 F1 | 	add	local11, #8
09428     1D 33 62 FC | 	wrlong	local07, local11
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 2E 02 FB | 	rdlong	local05, objptr
09438     01 2E 06 F1 | 	add	local05, #1
0943c     F2 2E 62 FC | 	wrlong	local05, objptr
09440     44 2A 06 F6 | 	mov	local03, #68
09444     13 2F 02 F6 | 	mov	local05, local01
09448     14 31 02 F6 | 	mov	local06, local02
0944c     15 33 02 F6 | 	mov	local07, local03
09450     F2 34 02 FB | 	rdlong	local08, objptr
09454     1A 37 02 F6 | 	mov	local09, local08
09458     01 36 66 F0 | 	shl	local09, #1
0945c     1A 37 02 F1 | 	add	local09, local08
09460     02 36 66 F0 | 	shl	local09, #2
09464     03 00 00 FF 
09468     00 E4 85 F1 | 	sub	objptr, ##1536
0946c     F2 36 02 F1 | 	add	local09, objptr
09470     1B 2F 62 FC | 	wrlong	local05, local09
09474     03 00 00 FF 
09478     00 E4 05 F1 | 	add	objptr, ##1536
0947c     F2 3A 02 FB | 	rdlong	local11, objptr
09480     1D 39 02 F6 | 	mov	local10, local11
09484     01 38 66 F0 | 	shl	local10, #1
09488     1D 39 02 F1 | 	add	local10, local11
0948c     02 38 66 F0 | 	shl	local10, #2
09490     03 00 00 FF 
09494     00 E4 85 F1 | 	sub	objptr, ##1536
09498     F2 38 02 F1 | 	add	local10, objptr
0949c     04 38 06 F1 | 	add	local10, #4
094a0     1C 31 62 FC | 	wrlong	local06, local10
094a4     03 00 00 FF 
094a8     00 E4 05 F1 | 	add	objptr, ##1536
094ac     F2 38 02 FB | 	rdlong	local10, objptr
094b0     1C 3B 02 F6 | 	mov	local11, local10
094b4     01 3A 66 F0 | 	shl	local11, #1
094b8     1C 3B 02 F1 | 	add	local11, local10
094bc     02 3A 66 F0 | 	shl	local11, #2
094c0     03 00 00 FF 
094c4     00 E4 85 F1 | 	sub	objptr, ##1536
094c8     F2 3A 02 F1 | 	add	local11, objptr
094cc     08 3A 06 F1 | 	add	local11, #8
094d0     1D 33 62 FC | 	wrlong	local07, local11
094d4     03 00 00 FF 
094d8     00 E4 05 F1 | 	add	objptr, ##1536
094dc     F2 2E 02 FB | 	rdlong	local05, objptr
094e0     01 2E 06 F1 | 	add	local05, #1
094e4     F2 2E 62 FC | 	wrlong	local05, objptr
094e8     4A 00 00 FF 
094ec     7C E4 85 F1 | 	sub	objptr, ##38012
094f0                 | LR__0823
094f0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
094f0     37 00 00 FF 
094f4     44 E4 05 F1 | 	add	objptr, ##28228
094f8     F2 2C 02 FB | 	rdlong	local04, objptr
094fc     03 2C 66 F0 | 	shl	local04, #3
09500     02 00 00 FF 
09504     38 E4 85 F1 | 	sub	objptr, ##1080
09508     F2 2C 02 F1 | 	add	local04, objptr
0950c     04 2C 06 F1 | 	add	local04, #4
09510     16 35 02 FB | 	rdlong	local08, local04
09514     FE 35 0E F2 | 	cmp	local08, #510 wz
09518     35 00 00 FF 
0951c     0C E4 85 F1 | 	sub	objptr, ##27148
09520     B8 00 90 5D |  if_ne	jmp	#LR__0824
09524     44 2A 06 F6 | 	mov	local03, #68
09528     13 2F 02 F6 | 	mov	local05, local01
0952c     14 31 02 F6 | 	mov	local06, local02
09530     15 33 02 F6 | 	mov	local07, local03
09534     4A 00 00 FF 
09538     7C E4 05 F1 | 	add	objptr, ##38012
0953c     F2 34 02 FB | 	rdlong	local08, objptr
09540     1A 37 02 F6 | 	mov	local09, local08
09544     01 36 66 F0 | 	shl	local09, #1
09548     1A 37 02 F1 | 	add	local09, local08
0954c     02 36 66 F0 | 	shl	local09, #2
09550     03 00 00 FF 
09554     00 E4 85 F1 | 	sub	objptr, ##1536
09558     F2 36 02 F1 | 	add	local09, objptr
0955c     1B 2F 62 FC | 	wrlong	local05, local09
09560     03 00 00 FF 
09564     00 E4 05 F1 | 	add	objptr, ##1536
09568     F2 3A 02 FB | 	rdlong	local11, objptr
0956c     1D 39 02 F6 | 	mov	local10, local11
09570     01 38 66 F0 | 	shl	local10, #1
09574     1D 39 02 F1 | 	add	local10, local11
09578     02 38 66 F0 | 	shl	local10, #2
0957c     03 00 00 FF 
09580     00 E4 85 F1 | 	sub	objptr, ##1536
09584     F2 38 02 F1 | 	add	local10, objptr
09588     04 38 06 F1 | 	add	local10, #4
0958c     1C 31 62 FC | 	wrlong	local06, local10
09590     03 00 00 FF 
09594     00 E4 05 F1 | 	add	objptr, ##1536
09598     F2 38 02 FB | 	rdlong	local10, objptr
0959c     1C 3B 02 F6 | 	mov	local11, local10
095a0     01 3A 66 F0 | 	shl	local11, #1
095a4     1C 3B 02 F1 | 	add	local11, local10
095a8     02 3A 66 F0 | 	shl	local11, #2
095ac     03 00 00 FF 
095b0     00 E4 85 F1 | 	sub	objptr, ##1536
095b4     F2 3A 02 F1 | 	add	local11, objptr
095b8     08 3A 06 F1 | 	add	local11, #8
095bc     1D 33 62 FC | 	wrlong	local07, local11
095c0     03 00 00 FF 
095c4     00 E4 05 F1 | 	add	objptr, ##1536
095c8     F2 2E 02 FB | 	rdlong	local05, objptr
095cc     01 2E 06 F1 | 	add	local05, #1
095d0     F2 2E 62 FC | 	wrlong	local05, objptr
095d4     4A 00 00 FF 
095d8     7C E4 85 F1 | 	sub	objptr, ##38012
095dc                 | LR__0824
095dc                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
095dc     37 00 00 FF 
095e0     44 E4 05 F1 | 	add	objptr, ##28228
095e4     F2 2C 02 FB | 	rdlong	local04, objptr
095e8     03 2C 66 F0 | 	shl	local04, #3
095ec     02 00 00 FF 
095f0     38 E4 85 F1 | 	sub	objptr, ##1080
095f4     F2 2C 02 F1 | 	add	local04, objptr
095f8     04 2C 06 F1 | 	add	local04, #4
095fc     16 35 02 FB | 	rdlong	local08, local04
09600     11 34 0E F2 | 	cmp	local08, #17 wz
09604     35 00 00 FF 
09608     0C E4 85 F1 | 	sub	objptr, ##27148
0960c     6C 00 90 AD |  if_e	jmp	#LR__0825
09610     37 00 00 FF 
09614     44 E4 05 F1 | 	add	objptr, ##28228
09618     F2 34 02 FB | 	rdlong	local08, objptr
0961c     03 34 66 F0 | 	shl	local08, #3
09620     02 00 00 FF 
09624     38 E4 85 F1 | 	sub	objptr, ##1080
09628     F2 34 02 F1 | 	add	local08, objptr
0962c     04 34 06 F1 | 	add	local08, #4
09630     1A 35 02 FB | 	rdlong	local08, local08
09634     12 34 0E F2 | 	cmp	local08, #18 wz
09638     35 00 00 FF 
0963c     0C E4 85 F1 | 	sub	objptr, ##27148
09640     38 00 90 AD |  if_e	jmp	#LR__0825
09644     37 00 00 FF 
09648     44 E4 05 F1 | 	add	objptr, ##28228
0964c     F2 3A 02 FB | 	rdlong	local11, objptr
09650     03 3A 66 F0 | 	shl	local11, #3
09654     02 00 00 FF 
09658     38 E4 85 F1 | 	sub	objptr, ##1080
0965c     F2 3A 02 F1 | 	add	local11, objptr
09660     04 3A 06 F1 | 	add	local11, #4
09664     1D 3B 02 FB | 	rdlong	local11, local11
09668     FE 3B 0E F2 | 	cmp	local11, #510 wz
0966c     35 00 00 FF 
09670     0C E4 85 F1 | 	sub	objptr, ##27148
09674     16 FA 05 56 |  if_ne	mov	result1, #22
09678     68 00 90 5D |  if_ne	jmp	#LR__0827
0967c                 | LR__0825
0967c     37 00 00 FF 
09680     44 E4 05 F1 | 	add	objptr, ##28228
09684     F2 2C 02 FB | 	rdlong	local04, objptr
09688     01 2C 06 F1 | 	add	local04, #1
0968c     F2 2C 62 FC | 	wrlong	local04, objptr
09690     03 2C 66 F0 | 	shl	local04, #3
09694     02 00 00 FF 
09698     38 E4 85 F1 | 	sub	objptr, ##1080
0969c     F2 2C 02 F1 | 	add	local04, objptr
096a0     04 2C 06 F1 | 	add	local04, #4
096a4     16 35 02 FB | 	rdlong	local08, local04
096a8     FE 35 0E F2 | 	cmp	local08, #510 wz
096ac     35 00 00 FF 
096b0     0C E4 85 F1 | 	sub	objptr, ##27148
096b4     28 00 90 AD |  if_e	jmp	#LR__0826
096b8     37 00 00 FF 
096bc     44 E4 05 F1 | 	add	objptr, ##28228
096c0     F2 3A 02 FB | 	rdlong	local11, objptr
096c4     0E 00 00 FF 
096c8     1C E4 05 F1 | 	add	objptr, ##7196
096cc     F2 38 02 FB | 	rdlong	local10, objptr
096d0     45 00 00 FF 
096d4     60 E4 85 F1 | 	sub	objptr, ##35424
096d8     1C 3B 52 F2 | 	cmps	local11, local10 wc
096dc     E4 FA 9F CD |  if_b	jmp	#LR__0821
096e0                 | LR__0826
096e0                 | ' return 0
096e0     00 FA 05 F6 | 	mov	result1, #0
096e4                 | LR__0827
096e4     A7 F0 03 F6 | 	mov	ptra, fp
096e8     B2 00 A0 FD | 	call	#popregs_
096ec                 | _compile_print_ret
096ec     2D 00 64 FD | 	ret
096f0                 | 
096f0                 | ' 
096f0                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
096f0                 | ' 
096f0                 | ' function compile_if(aline as ulong) as ulong  
096f0                 | _compile_if
096f0     09 4A 05 F6 | 	mov	COUNT_, #9
096f4     A8 00 A0 FD | 	call	#pushregs_
096f8                 | _compile_if_enter
096f8     09 2D 02 F6 | 	mov	local04, arg01
096fc                 | ' return expr()
096fc     70 1C B0 FD | 	call	#_expr
09700     37 00 00 FF 
09704     44 E4 05 F1 | 	add	objptr, ##28228
09708     F2 14 02 FB | 	rdlong	arg02, objptr
0970c     0A 2F 02 F6 | 	mov	local05, arg02
09710     03 2E 66 F0 | 	shl	local05, #3
09714     02 00 00 FF 
09718     38 E4 85 F1 | 	sub	objptr, ##1080
0971c     F2 2E 02 F1 | 	add	local05, objptr
09720     04 2E 06 F1 | 	add	local05, #4
09724     17 2F 02 FB | 	rdlong	local05, local05
09728     01 14 06 F1 | 	add	arg02, #1
0972c     02 00 00 FF 
09730     38 E4 05 F1 | 	add	objptr, ##1080
09734     F2 14 62 FC | 	wrlong	arg02, objptr
09738     37 00 00 FF 
0973c     44 E4 85 F1 | 	sub	objptr, ##28228
09740                 | ' 
09740                 | ' err=compile_fun_1p()
09740                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09740     5B 2E 0E F2 | 	cmp	local05, #91 wz
09744     34 FA 05 56 |  if_ne	mov	result1, #52
09748     20 01 90 5D |  if_ne	jmp	#LR__0832
0974c     58 2A 06 F6 | 	mov	local03, #88
09750     13 31 02 F6 | 	mov	local06, local01
09754     14 33 02 F6 | 	mov	local07, local02
09758     15 15 02 F6 | 	mov	arg02, local03
0975c     4A 00 00 FF 
09760     7C E4 05 F1 | 	add	objptr, ##38012
09764     F2 12 02 FB | 	rdlong	arg01, objptr
09768     09 35 02 F6 | 	mov	local08, arg01
0976c     01 34 66 F0 | 	shl	local08, #1
09770     09 35 02 F1 | 	add	local08, arg01
09774     02 34 66 F0 | 	shl	local08, #2
09778     03 00 00 FF 
0977c     00 E4 85 F1 | 	sub	objptr, ##1536
09780     F2 34 02 F1 | 	add	local08, objptr
09784     1A 31 62 FC | 	wrlong	local06, local08
09788     03 00 00 FF 
0978c     00 E4 05 F1 | 	add	objptr, ##1536
09790     F2 30 02 FB | 	rdlong	local06, objptr
09794     18 13 02 F6 | 	mov	arg01, local06
09798     01 12 66 F0 | 	shl	arg01, #1
0979c     18 13 02 F1 | 	add	arg01, local06
097a0     02 12 66 F0 | 	shl	arg01, #2
097a4     03 00 00 FF 
097a8     00 E4 85 F1 | 	sub	objptr, ##1536
097ac     F2 12 02 F1 | 	add	arg01, objptr
097b0     04 12 06 F1 | 	add	arg01, #4
097b4     09 33 62 FC | 	wrlong	local07, arg01
097b8     03 00 00 FF 
097bc     00 E4 05 F1 | 	add	objptr, ##1536
097c0     F2 30 02 FB | 	rdlong	local06, objptr
097c4     18 13 02 F6 | 	mov	arg01, local06
097c8     01 12 66 F0 | 	shl	arg01, #1
097cc     18 13 02 F1 | 	add	arg01, local06
097d0     02 12 66 F0 | 	shl	arg01, #2
097d4     03 00 00 FF 
097d8     00 E4 85 F1 | 	sub	objptr, ##1536
097dc     F2 12 02 F1 | 	add	arg01, objptr
097e0     08 12 06 F1 | 	add	arg01, #8
097e4     09 15 62 FC | 	wrlong	arg02, arg01
097e8     03 00 00 FF 
097ec     00 E4 05 F1 | 	add	objptr, ##1536
097f0     F2 30 02 FB | 	rdlong	local06, objptr
097f4     01 30 06 F1 | 	add	local06, #1
097f8     F2 30 62 FC | 	wrlong	local06, objptr
097fc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
097fc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
097fc     13 00 00 FF 
09800     38 E4 85 F1 | 	sub	objptr, ##9784
09804     F2 14 02 FB | 	rdlong	arg02, objptr
09808     01 14 06 F1 | 	add	arg02, #1
0980c     03 14 66 F0 | 	shl	arg02, #3
09810     02 00 00 FF 
09814     38 E4 85 F1 | 	sub	objptr, ##1080
09818     F2 14 02 F1 | 	add	arg02, objptr
0981c     0A 13 02 FB | 	rdlong	arg01, arg02
09820     35 00 00 FF 
09824     0C E4 85 F1 | 	sub	objptr, ##27148
09828                 | ' 
09828                 | ' select case s
09828     A6 01 00 FF 
0982c     08 14 06 F6 | 	mov	arg02, ##@LR__5481
09830     C8 B6 B1 FD | 	call	#__system___string_cmp
09834     00 FA 0D F2 | 	cmp	result1, #0 wz
09838     1B FA 05 A6 |  if_e	mov	result1, #27
0983c     00 FA 05 56 |  if_ne	mov	result1, #0
09840     00 FA 0D F2 | 	cmp	result1, #0 wz
09844     10 00 90 AD |  if_e	jmp	#LR__0830
09848     05 12 06 F6 | 	mov	arg01, #5
0984c     38 E4 BF FD | 	call	#_compile_immediate_assign
09850     FD 36 02 F6 | 	mov	local09, result1
09854     10 00 90 FD | 	jmp	#LR__0831
09858                 | LR__0830
09858     05 12 06 F6 | 	mov	arg01, #5
0985c     16 15 02 F6 | 	mov	arg02, local04
09860     78 DA BF FD | 	call	#_compile_immediate
09864     FD 36 02 F6 | 	mov	local09, result1
09868                 | LR__0831
09868                 | ' return err
09868     1B FB 01 F6 | 	mov	result1, local09
0986c                 | LR__0832
0986c     A7 F0 03 F6 | 	mov	ptra, fp
09870     B2 00 A0 FD | 	call	#popregs_
09874                 | _compile_if_ret
09874     2D 00 64 FD | 	ret
09878                 | 
09878                 | ' 
09878                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09878                 | ' 
09878                 | ' function compile_else(aline as ulong) as ulong  
09878                 | _compile_else
09878     07 4A 05 F6 | 	mov	COUNT_, #7
0987c     A8 00 A0 FD | 	call	#pushregs_
09880                 | _compile_else_enter
09880     09 2D 02 F6 | 	mov	local04, arg01
09884     5A 2A 06 F6 | 	mov	local03, #90
09888     13 2F 02 F6 | 	mov	local05, local01
0988c     14 31 02 F6 | 	mov	local06, local02
09890     15 27 02 F6 | 	mov	local01, local03
09894     4A 00 00 FF 
09898     7C E4 05 F1 | 	add	objptr, ##38012
0989c     F2 14 02 FB | 	rdlong	arg02, objptr
098a0     0A 13 02 F6 | 	mov	arg01, arg02
098a4     01 12 66 F0 | 	shl	arg01, #1
098a8     0A 13 02 F1 | 	add	arg01, arg02
098ac     02 12 66 F0 | 	shl	arg01, #2
098b0     03 00 00 FF 
098b4     00 E4 85 F1 | 	sub	objptr, ##1536
098b8     F2 12 02 F1 | 	add	arg01, objptr
098bc     09 2F 62 FC | 	wrlong	local05, arg01
098c0     03 00 00 FF 
098c4     00 E4 05 F1 | 	add	objptr, ##1536
098c8     F2 2E 02 FB | 	rdlong	local05, objptr
098cc     17 15 02 F6 | 	mov	arg02, local05
098d0     01 14 66 F0 | 	shl	arg02, #1
098d4     17 15 02 F1 | 	add	arg02, local05
098d8     02 14 66 F0 | 	shl	arg02, #2
098dc     03 00 00 FF 
098e0     00 E4 85 F1 | 	sub	objptr, ##1536
098e4     F2 14 02 F1 | 	add	arg02, objptr
098e8     04 14 06 F1 | 	add	arg02, #4
098ec     0A 31 62 FC | 	wrlong	local06, arg02
098f0     03 00 00 FF 
098f4     00 E4 05 F1 | 	add	objptr, ##1536
098f8     F2 30 02 FB | 	rdlong	local06, objptr
098fc     18 2F 02 F6 | 	mov	local05, local06
09900     01 2E 66 F0 | 	shl	local05, #1
09904     18 2F 02 F1 | 	add	local05, local06
09908     02 2E 66 F0 | 	shl	local05, #2
0990c     03 00 00 FF 
09910     00 E4 85 F1 | 	sub	objptr, ##1536
09914     F2 2E 02 F1 | 	add	local05, objptr
09918     08 2E 06 F1 | 	add	local05, #8
0991c     17 27 62 FC | 	wrlong	local01, local05
09920     03 00 00 FF 
09924     00 E4 05 F1 | 	add	objptr, ##1536
09928     F2 2E 02 FB | 	rdlong	local05, objptr
0992c     01 2E 06 F1 | 	add	local05, #1
09930     F2 2E 62 FC | 	wrlong	local05, objptr
09934                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09934                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09934     13 00 00 FF 
09938     38 E4 85 F1 | 	sub	objptr, ##9784
0993c     F2 30 02 FB | 	rdlong	local06, objptr
09940     01 30 06 F1 | 	add	local06, #1
09944     03 30 66 F0 | 	shl	local06, #3
09948     02 00 00 FF 
0994c     38 E4 85 F1 | 	sub	objptr, ##1080
09950     F2 30 02 F1 | 	add	local06, objptr
09954     18 13 02 FB | 	rdlong	arg01, local06
09958     35 00 00 FF 
0995c     0C E4 85 F1 | 	sub	objptr, ##27148
09960                 | ' 
09960                 | ' select case s
09960     A6 01 00 FF 
09964     08 14 06 F6 | 	mov	arg02, ##@LR__5481
09968     90 B5 B1 FD | 	call	#__system___string_cmp
0996c     00 FA 0D F2 | 	cmp	result1, #0 wz
09970     1B FA 05 A6 |  if_e	mov	result1, #27
09974     00 FA 05 56 |  if_ne	mov	result1, #0
09978     00 FA 0D F2 | 	cmp	result1, #0 wz
0997c     10 00 90 AD |  if_e	jmp	#LR__0840
09980     05 12 06 F6 | 	mov	arg01, #5
09984     00 E3 BF FD | 	call	#_compile_immediate_assign
09988     FD 32 02 F6 | 	mov	local07, result1
0998c     10 00 90 FD | 	jmp	#LR__0841
09990                 | LR__0840
09990     05 12 06 F6 | 	mov	arg01, #5
09994     16 15 02 F6 | 	mov	arg02, local04
09998     40 D9 BF FD | 	call	#_compile_immediate
0999c     FD 32 02 F6 | 	mov	local07, result1
099a0                 | LR__0841
099a0                 | ' return err
099a0     19 FB 01 F6 | 	mov	result1, local07
099a4     A7 F0 03 F6 | 	mov	ptra, fp
099a8     B2 00 A0 FD | 	call	#popregs_
099ac                 | _compile_else_ret
099ac     2D 00 64 FD | 	ret
099b0                 | 
099b0                 | ' 
099b0                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
099b0                 | ' 
099b0                 | ' function compile_dim() as ulong  
099b0                 | _compile_dim
099b0     11 4A 05 F6 | 	mov	COUNT_, #17
099b4     A8 00 A0 FD | 	call	#pushregs_
099b8     01 26 06 F6 | 	mov	local01, #1
099bc     01 28 06 F6 | 	mov	local02, #1
099c0     01 2A 06 F6 | 	mov	local03, #1
099c4                 | ' 
099c4                 | ' dims(0)=1: dims(1)=1: dims(2)=1
099c4                 | ' if isname(lparts(ct).part$) then 
099c4     37 00 00 FF 
099c8     44 E4 05 F1 | 	add	objptr, ##28228
099cc     F2 18 02 FB | 	rdlong	arg04, objptr
099d0     03 18 66 F0 | 	shl	arg04, #3
099d4     02 00 00 FF 
099d8     38 E4 85 F1 | 	sub	objptr, ##1080
099dc     F2 18 02 F1 | 	add	arg04, objptr
099e0     0C 13 02 FB | 	rdlong	arg01, arg04
099e4     35 00 00 FF 
099e8     0C E4 85 F1 | 	sub	objptr, ##27148
099ec     44 C7 BF FD | 	call	#_isname
099f0     00 FA 0D F2 | 	cmp	result1, #0 wz
099f4     78 05 90 AD |  if_e	jmp	#LR__0873
099f8     37 00 00 FF 
099fc     44 E4 05 F1 | 	add	objptr, ##28228
09a00     F2 2C 02 FB | 	rdlong	local04, objptr
09a04     03 2C 66 F0 | 	shl	local04, #3
09a08     02 00 00 FF 
09a0c     38 E4 85 F1 | 	sub	objptr, ##1080
09a10     F2 2C 02 F1 | 	add	local04, objptr
09a14     16 2F 02 FB | 	rdlong	local05, local04
09a18     01 30 66 F6 | 	neg	local06, #1
09a1c                 | '   varname2$=lparts(ct).part$ 
09a1c                 | '   j=-1
09a1c                 | '   if varnum>0 then
09a1c     04 E4 85 F1 | 	sub	objptr, #4
09a20     F2 32 02 FB | 	rdlong	local07, objptr
09a24     35 00 00 FF 
09a28     08 E4 85 F1 | 	sub	objptr, ##27144
09a2c     01 32 56 F2 | 	cmps	local07, #1 wc
09a30     58 00 90 CD |  if_b	jmp	#LR__0852
09a34                 | '     for i=0 to varnum-1
09a34     00 34 06 F6 | 	mov	local08, #0
09a38     35 00 00 FF 
09a3c     08 E4 05 F1 | 	add	objptr, ##27144
09a40     F2 36 02 FB | 	rdlong	local09, objptr
09a44     35 00 00 FF 
09a48     08 E4 85 F1 | 	sub	objptr, ##27144
09a4c                 | LR__0850
09a4c     1B 35 52 F2 | 	cmps	local08, local09 wc
09a50     38 00 90 3D |  if_ae	jmp	#LR__0851
09a54                 | '       if variables(i).name=varname2$ then j=i : exit
09a54     1A 2D 02 F6 | 	mov	local04, local08
09a58     04 2C 66 F0 | 	shl	local04, #4
09a5c     14 00 00 FF 
09a60     F8 E5 05 F1 | 	add	objptr, ##10744
09a64     F2 2C 02 F1 | 	add	local04, objptr
09a68     16 13 02 FB | 	rdlong	arg01, local04
09a6c     17 15 02 F6 | 	mov	arg02, local05
09a70     14 00 00 FF 
09a74     F8 E5 85 F1 | 	sub	objptr, ##10744
09a78     80 B4 B1 FD | 	call	#__system___string_cmp
09a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a80     1A 31 02 A6 |  if_e	mov	local06, local08
09a84     01 34 06 51 |  if_ne	add	local08, #1
09a88     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09a8c                 | LR__0851
09a8c                 | LR__0852
09a8c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09a8c     FF FF 7F FF 
09a90     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09a94     35 00 00 AF 
09a98     08 E4 05 A1 |  if_e	add	objptr, ##27144
09a9c     F2 30 02 AB |  if_e	rdlong	local06, objptr
09aa0     35 00 00 AF 
09aa4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09aa8     78 00 90 AD |  if_e	jmp	#LR__0853
09aac     00 12 06 F6 | 	mov	arg01, #0
09ab0     C4 10 B2 FD | 	call	#__system___getiolock_0593
09ab4     FD 12 02 F6 | 	mov	arg01, result1
09ab8     18 B4 B1 FD | 	call	#__system___lockmem
09abc     A8 01 00 FF 
09ac0     65 14 06 F6 | 	mov	arg02, ##@LR__5727
09ac4     00 12 06 F6 | 	mov	arg01, #0
09ac8     00 16 06 F6 | 	mov	arg03, #0
09acc     FC C0 B1 FD | 	call	#__system___basic_print_string
09ad0     51 00 00 FF 
09ad4     EC E5 05 F1 | 	add	objptr, ##41964
09ad8     F2 14 02 FB | 	rdlong	arg02, objptr
09adc     51 00 00 FF 
09ae0     EC E5 85 F1 | 	sub	objptr, ##41964
09ae4     00 12 06 F6 | 	mov	arg01, #0
09ae8     00 16 06 F6 | 	mov	arg03, #0
09aec     0A 18 06 F6 | 	mov	arg04, #10
09af0     5C C1 B1 FD | 	call	#__system___basic_print_unsigned
09af4     A8 01 00 FF 
09af8     73 14 06 F6 | 	mov	arg02, ##@LR__5728
09afc     00 12 06 F6 | 	mov	arg01, #0
09b00     00 16 06 F6 | 	mov	arg03, #0
09b04     C4 C0 B1 FD | 	call	#__system___basic_print_string
09b08     00 12 06 F6 | 	mov	arg01, #0
09b0c     0A 14 06 F6 | 	mov	arg02, #10
09b10     00 16 06 F6 | 	mov	arg03, #0
09b14     5C C0 B1 FD | 	call	#__system___basic_print_char
09b18     00 12 06 F6 | 	mov	arg01, #0
09b1c     58 10 B2 FD | 	call	#__system___getiolock_0593
09b20     FD 00 68 FC | 	wrlong	#0, result1
09b24                 | LR__0853
09b24                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09b24     37 00 00 FF 
09b28     44 E4 05 F1 | 	add	objptr, ##28228
09b2c     F2 14 02 FB | 	rdlong	arg02, objptr
09b30     01 14 06 F1 | 	add	arg02, #1
09b34     03 14 66 F0 | 	shl	arg02, #3
09b38     02 00 00 FF 
09b3c     38 E4 85 F1 | 	sub	objptr, ##1080
09b40     F2 14 02 F1 | 	add	arg02, objptr
09b44     0A 13 02 FB | 	rdlong	arg01, arg02
09b48     A8 01 00 FF 
09b4c     94 14 06 F6 | 	mov	arg02, ##@LR__5729
09b50     35 00 00 FF 
09b54     0C E4 85 F1 | 	sub	objptr, ##27148
09b58     A0 B3 B1 FD | 	call	#__system___string_cmp
09b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
09b60     44 00 90 AD |  if_e	jmp	#LR__0854
09b64     37 00 00 FF 
09b68     44 E4 05 F1 | 	add	objptr, ##28228
09b6c     F2 36 02 FB | 	rdlong	local09, objptr
09b70     01 36 06 F1 | 	add	local09, #1
09b74     03 36 66 F0 | 	shl	local09, #3
09b78     02 00 00 FF 
09b7c     38 E4 85 F1 | 	sub	objptr, ##1080
09b80     F2 36 02 F1 | 	add	local09, objptr
09b84     1B 13 02 FB | 	rdlong	arg01, local09
09b88     A8 01 00 FF 
09b8c     96 14 06 F6 | 	mov	arg02, ##@LR__5730
09b90     35 00 00 FF 
09b94     0C E4 85 F1 | 	sub	objptr, ##27148
09b98     60 B3 B1 FD | 	call	#__system___string_cmp
09b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09ba0     2B FA 05 56 |  if_ne	mov	result1, #43
09ba4     D0 04 90 5D |  if_ne	jmp	#LR__0875
09ba8                 | LR__0854
09ba8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09ba8     37 00 00 FF 
09bac     44 E4 05 F1 | 	add	objptr, ##28228
09bb0     F2 14 02 FB | 	rdlong	arg02, objptr
09bb4     01 14 06 F1 | 	add	arg02, #1
09bb8     03 14 66 F0 | 	shl	arg02, #3
09bbc     02 00 00 FF 
09bc0     38 E4 85 F1 | 	sub	objptr, ##1080
09bc4     F2 14 02 F1 | 	add	arg02, objptr
09bc8     0A 13 02 FB | 	rdlong	arg01, arg02
09bcc     A8 01 00 FF 
09bd0     99 14 06 F6 | 	mov	arg02, ##@LR__5731
09bd4     35 00 00 FF 
09bd8     0C E4 85 F1 | 	sub	objptr, ##27148
09bdc     1C B3 B1 FD | 	call	#__system___string_cmp
09be0     00 FA 0D F2 | 	cmp	result1, #0 wz
09be4     37 00 00 AF 
09be8     44 E4 05 A1 |  if_e	add	objptr, ##28228
09bec     F2 38 02 AB |  if_e	rdlong	local10, objptr
09bf0     37 00 00 AF 
09bf4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09bf8     01 38 06 A1 |  if_e	add	local10, #1
09bfc     5C 01 90 AD |  if_e	jmp	#LR__0859
09c00     37 00 00 FF 
09c04     44 E4 05 F1 | 	add	objptr, ##28228
09c08     F2 38 02 FB | 	rdlong	local10, objptr
09c0c     37 00 00 FF 
09c10     44 E4 85 F1 | 	sub	objptr, ##28228
09c14     02 38 06 F1 | 	add	local10, #2
09c18     00 3A 06 F6 | 	mov	local11, #0
09c1c                 | '   l=ct+2 : m=0 : do
09c1c                 | LR__0855
09c1c                 | '   if isdec(lparts(l).part$) then 
09c1c     1C 2D 02 F6 | 	mov	local04, local10
09c20     03 2C 66 F0 | 	shl	local04, #3
09c24     35 00 00 FF 
09c28     0C E4 05 F1 | 	add	objptr, ##27148
09c2c     F2 2C 02 F1 | 	add	local04, objptr
09c30     16 13 02 FB | 	rdlong	arg01, local04
09c34     35 00 00 FF 
09c38     0C E4 85 F1 | 	sub	objptr, ##27148
09c3c     F8 CD BF FD | 	call	#_isdec
09c40     00 FA 0D F2 | 	cmp	result1, #0 wz
09c44     44 00 90 AD |  if_e	jmp	#LR__0856
09c48     1D 3D 02 F6 | 	mov	local12, local11
09c4c     13 3D 06 F1 | 	add	local12, #local01
09c50     1C 37 02 F6 | 	mov	local09, local10
09c54     03 36 66 F0 | 	shl	local09, #3
09c58     35 00 00 FF 
09c5c     0C E4 05 F1 | 	add	objptr, ##27148
09c60     F2 36 02 F1 | 	add	local09, objptr
09c64     1B 13 02 FB | 	rdlong	arg01, local09
09c68     00 14 06 F6 | 	mov	arg02, #0
09c6c     35 00 00 FF 
09c70     0C E4 85 F1 | 	sub	objptr, ##27148
09c74     50 E7 B1 FD | 	call	#__system____builtin_atoi
09c78     FD 3E 02 F6 | 	mov	local13, result1
09c7c                 | 	'.live	local13
09c7c                 | 	'.live	local12
09c7c     00 3C 8E F9 | 	altd	local12, #0
09c80     1F 3D 02 F6 | 	mov	local12, local13
09c84     01 3A 06 F1 | 	add	local11, #1
09c88     08 00 90 FD | 	jmp	#LR__0857
09c8c                 | LR__0856
09c8c                 | '     return(17)
09c8c     11 FA 05 F6 | 	mov	result1, #17
09c90     E4 03 90 FD | 	jmp	#LR__0875
09c94                 | LR__0857
09c94                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09c94     1C 2D 02 F6 | 	mov	local04, local10
09c98     01 2C 06 F1 | 	add	local04, #1
09c9c     03 2C 66 F0 | 	shl	local04, #3
09ca0     35 00 00 FF 
09ca4     0C E4 05 F1 | 	add	objptr, ##27148
09ca8     F2 2C 02 F1 | 	add	local04, objptr
09cac     16 13 02 FB | 	rdlong	arg01, local04
09cb0     A8 01 00 FF 
09cb4     9C 14 06 F6 | 	mov	arg02, ##@LR__5732
09cb8     35 00 00 FF 
09cbc     0C E4 85 F1 | 	sub	objptr, ##27148
09cc0     38 B2 B1 FD | 	call	#__system___string_cmp
09cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cc8     3C 00 90 AD |  if_e	jmp	#LR__0858
09ccc     1C 3F 02 F6 | 	mov	local13, local10
09cd0     01 3E 06 F1 | 	add	local13, #1
09cd4     03 3E 66 F0 | 	shl	local13, #3
09cd8     35 00 00 FF 
09cdc     0C E4 05 F1 | 	add	objptr, ##27148
09ce0     F2 3E 02 F1 | 	add	local13, objptr
09ce4     1F 13 02 FB | 	rdlong	arg01, local13
09ce8     A8 01 00 FF 
09cec     9E 14 06 F6 | 	mov	arg02, ##@LR__5733
09cf0     35 00 00 FF 
09cf4     0C E4 85 F1 | 	sub	objptr, ##27148
09cf8     00 B2 B1 FD | 	call	#__system___string_cmp
09cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
09d00     2C FA 05 56 |  if_ne	mov	result1, #44
09d04     70 03 90 5D |  if_ne	jmp	#LR__0875
09d08                 | LR__0858
09d08     02 38 06 F1 | 	add	local10, #2
09d0c     1C 2D 02 F6 | 	mov	local04, local10
09d10     01 2C 86 F1 | 	sub	local04, #1
09d14     03 2C 66 F0 | 	shl	local04, #3
09d18     35 00 00 FF 
09d1c     0C E4 05 F1 | 	add	objptr, ##27148
09d20     F2 2C 02 F1 | 	add	local04, objptr
09d24     16 13 02 FB | 	rdlong	arg01, local04
09d28     A8 01 00 FF 
09d2c     A0 14 06 F6 | 	mov	arg02, ##@LR__5734
09d30     35 00 00 FF 
09d34     0C E4 85 F1 | 	sub	objptr, ##27148
09d38     C0 B1 B1 FD | 	call	#__system___string_cmp
09d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
09d40     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09d44     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0855
09d48                 | '   if m>3 then return 45
09d48     04 3A 56 F2 | 	cmps	local11, #4 wc
09d4c     2D FA 05 36 |  if_ae	mov	result1, #45
09d50     24 03 90 3D |  if_ae	jmp	#LR__0875
09d54     00 41 06 F6 | 	mov	local14, #256
09d58     0C 42 06 F6 | 	mov	local15, #12
09d5c                 | LR__0859
09d5c                 | '   arraytype=array_no_type : esize=12
09d5c                 | ' 1350 
09d5c                 | '   if lparts(l).part$="as" then
09d5c     1C 2D 02 F6 | 	mov	local04, local10
09d60     03 2C 66 F0 | 	shl	local04, #3
09d64     35 00 00 FF 
09d68     0C E4 05 F1 | 	add	objptr, ##27148
09d6c     F2 2C 02 F1 | 	add	local04, objptr
09d70     16 13 02 FB | 	rdlong	arg01, local04
09d74     A8 01 00 FF 
09d78     A2 14 06 F6 | 	mov	arg02, ##@LR__5735
09d7c     35 00 00 FF 
09d80     0C E4 85 F1 | 	sub	objptr, ##27148
09d84     74 B1 B1 FD | 	call	#__system___string_cmp
09d88     00 FA 0D F2 | 	cmp	result1, #0 wz
09d8c     E8 01 90 5D |  if_ne	jmp	#LR__0874
09d90                 | '     select case lparts(l+1).part$
09d90     1C 3D 02 F6 | 	mov	local12, local10
09d94     01 3C 06 F1 | 	add	local12, #1
09d98     03 3C 66 F0 | 	shl	local12, #3
09d9c     35 00 00 FF 
09da0     0C E4 05 F1 | 	add	objptr, ##27148
09da4     F2 3C 02 F1 | 	add	local12, objptr
09da8     1E 45 02 FB | 	rdlong	local16, local12
09dac     A8 01 00 FF 
09db0     A5 14 06 F6 | 	mov	arg02, ##@LR__5736
09db4     22 13 02 F6 | 	mov	arg01, local16
09db8     35 00 00 FF 
09dbc     0C E4 85 F1 | 	sub	objptr, ##27148
09dc0     38 B1 B1 FD | 	call	#__system___string_cmp
09dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09dc8     0C 01 90 AD |  if_e	jmp	#LR__0860
09dcc     A8 01 00 FF 
09dd0     AA 14 06 F6 | 	mov	arg02, ##@LR__5737
09dd4     22 13 02 F6 | 	mov	arg01, local16
09dd8     20 B1 B1 FD | 	call	#__system___string_cmp
09ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
09de0     00 01 90 AD |  if_e	jmp	#LR__0861
09de4     A8 01 00 FF 
09de8     B0 14 06 F6 | 	mov	arg02, ##@LR__5738
09dec     22 13 02 F6 | 	mov	arg01, local16
09df0     08 B1 B1 FD | 	call	#__system___string_cmp
09df4     00 FA 0D F2 | 	cmp	result1, #0 wz
09df8     F4 00 90 AD |  if_e	jmp	#LR__0862
09dfc     A8 01 00 FF 
09e00     B6 14 06 F6 | 	mov	arg02, ##@LR__5739
09e04     22 13 02 F6 | 	mov	arg01, local16
09e08     F0 B0 B1 FD | 	call	#__system___string_cmp
09e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e10     E8 00 90 AD |  if_e	jmp	#LR__0863
09e14     A8 01 00 FF 
09e18     BD 14 06 F6 | 	mov	arg02, ##@LR__5740
09e1c     22 13 02 F6 | 	mov	arg01, local16
09e20     D8 B0 B1 FD | 	call	#__system___string_cmp
09e24     00 FA 0D F2 | 	cmp	result1, #0 wz
09e28     DC 00 90 AD |  if_e	jmp	#LR__0864
09e2c     A8 01 00 FF 
09e30     C2 14 06 F6 | 	mov	arg02, ##@LR__5741
09e34     22 13 02 F6 | 	mov	arg01, local16
09e38     C0 B0 B1 FD | 	call	#__system___string_cmp
09e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e40     D0 00 90 AD |  if_e	jmp	#LR__0865
09e44     A8 01 00 FF 
09e48     CA 14 06 F6 | 	mov	arg02, ##@LR__5742
09e4c     22 13 02 F6 | 	mov	arg01, local16
09e50     A8 B0 B1 FD | 	call	#__system___string_cmp
09e54     00 FA 0D F2 | 	cmp	result1, #0 wz
09e58     C4 00 90 AD |  if_e	jmp	#LR__0866
09e5c     A8 01 00 FF 
09e60     D0 14 06 F6 | 	mov	arg02, ##@LR__5743
09e64     22 13 02 F6 | 	mov	arg01, local16
09e68     90 B0 B1 FD | 	call	#__system___string_cmp
09e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e70     B8 00 90 AD |  if_e	jmp	#LR__0867
09e74     A8 01 00 FF 
09e78     D6 14 06 F6 | 	mov	arg02, ##@LR__5744
09e7c     22 13 02 F6 | 	mov	arg01, local16
09e80     78 B0 B1 FD | 	call	#__system___string_cmp
09e84     00 FA 0D F2 | 	cmp	result1, #0 wz
09e88     AC 00 90 AD |  if_e	jmp	#LR__0868
09e8c     A8 01 00 FF 
09e90     DD 14 06 F6 | 	mov	arg02, ##@LR__5745
09e94     22 13 02 F6 | 	mov	arg01, local16
09e98     60 B0 B1 FD | 	call	#__system___string_cmp
09e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09ea0     A0 00 90 AD |  if_e	jmp	#LR__0869
09ea4     A8 01 00 FF 
09ea8     E4 14 06 F6 | 	mov	arg02, ##@LR__5746
09eac     22 13 02 F6 | 	mov	arg01, local16
09eb0     48 B0 B1 FD | 	call	#__system___string_cmp
09eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
09eb8     94 00 90 AD |  if_e	jmp	#LR__0870
09ebc     A8 01 00 FF 
09ec0     EB 14 06 F6 | 	mov	arg02, ##@LR__5747
09ec4     22 13 02 F6 | 	mov	arg01, local16
09ec8     30 B0 B1 FD | 	call	#__system___string_cmp
09ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed0     88 00 90 AD |  if_e	jmp	#LR__0871
09ed4     90 00 90 FD | 	jmp	#LR__0872
09ed8                 | LR__0860
09ed8     01 41 06 F6 | 	mov	local14, #257
09edc     01 42 06 F6 | 	mov	local15, #1
09ee0     94 00 90 FD | 	jmp	#LR__0874
09ee4                 | LR__0861
09ee4     02 41 06 F6 | 	mov	local14, #258
09ee8     01 42 06 F6 | 	mov	local15, #1
09eec     88 00 90 FD | 	jmp	#LR__0874
09ef0                 | LR__0862
09ef0     03 41 06 F6 | 	mov	local14, #259
09ef4     02 42 06 F6 | 	mov	local15, #2
09ef8     7C 00 90 FD | 	jmp	#LR__0874
09efc                 | LR__0863
09efc     04 41 06 F6 | 	mov	local14, #260
09f00     02 42 06 F6 | 	mov	local15, #2
09f04     70 00 90 FD | 	jmp	#LR__0874
09f08                 | LR__0864
09f08     05 41 06 F6 | 	mov	local14, #261
09f0c     04 42 06 F6 | 	mov	local15, #4
09f10     64 00 90 FD | 	jmp	#LR__0874
09f14                 | LR__0865
09f14     05 41 06 F6 | 	mov	local14, #261
09f18     04 42 06 F6 | 	mov	local15, #4
09f1c     58 00 90 FD | 	jmp	#LR__0874
09f20                 | LR__0866
09f20     06 41 06 F6 | 	mov	local14, #262
09f24     04 42 06 F6 | 	mov	local15, #4
09f28     4C 00 90 FD | 	jmp	#LR__0874
09f2c                 | LR__0867
09f2c     07 41 06 F6 | 	mov	local14, #263
09f30     08 42 06 F6 | 	mov	local15, #8
09f34     40 00 90 FD | 	jmp	#LR__0874
09f38                 | LR__0868
09f38     08 41 06 F6 | 	mov	local14, #264
09f3c     08 42 06 F6 | 	mov	local15, #8
09f40     34 00 90 FD | 	jmp	#LR__0874
09f44                 | LR__0869
09f44     09 41 06 F6 | 	mov	local14, #265
09f48     04 42 06 F6 | 	mov	local15, #4
09f4c     28 00 90 FD | 	jmp	#LR__0874
09f50                 | LR__0870
09f50     0A 41 06 F6 | 	mov	local14, #266
09f54     08 42 06 F6 | 	mov	local15, #8
09f58     1C 00 90 FD | 	jmp	#LR__0874
09f5c                 | LR__0871
09f5c     0B 41 06 F6 | 	mov	local14, #267
09f60     04 42 06 F6 | 	mov	local15, #4
09f64     10 00 90 FD | 	jmp	#LR__0874
09f68                 | LR__0872
09f68     2F FA 05 F6 | 	mov	result1, #47
09f6c     08 01 90 FD | 	jmp	#LR__0875
09f70                 | LR__0873
09f70                 | '   return 46
09f70     2E FA 05 F6 | 	mov	result1, #46
09f74     00 01 90 FD | 	jmp	#LR__0875
09f78                 | LR__0874
09f78     13 43 02 FD | 	qmul	local15, local01
09f7c     18 32 62 FD | 	getqx	local07
09f80     14 33 02 FD | 	qmul	local07, local02
09f84     18 44 62 FD | 	getqx	local16
09f88     15 45 02 FD | 	qmul	local16, local03
09f8c     51 00 00 FF 
09f90     D4 E5 05 F1 | 	add	objptr, ##41940
09f94     F2 46 02 FB | 	rdlong	local17, objptr
09f98     20 15 02 F6 | 	mov	arg02, local14
09f9c     18 44 62 FD | 	getqx	local16
09fa0     22 47 82 F1 | 	sub	local17, local16
09fa4     10 46 86 F1 | 	sub	local17, #16
09fa8     0F 46 26 F5 | 	andn	local17, #15
09fac     F2 46 62 FC | 	wrlong	local17, objptr
09fb0     51 00 00 FF 
09fb4     D4 E5 85 F1 | 	sub	objptr, ##41940
09fb8     23 13 02 F6 | 	mov	arg01, local17
09fbc     54 77 B1 FD | 	call	#_psdpoke
09fc0     23 13 02 F6 | 	mov	arg01, local17
09fc4     02 12 06 F1 | 	add	arg01, #2
09fc8     21 15 02 F6 | 	mov	arg02, local15
09fcc     44 77 B1 FD | 	call	#_psdpoke
09fd0     23 13 02 F6 | 	mov	arg01, local17
09fd4     04 12 06 F1 | 	add	arg01, #4
09fd8     13 15 02 F6 | 	mov	arg02, local01
09fdc     EC 76 B1 FD | 	call	#_pslpoke
09fe0     23 13 02 F6 | 	mov	arg01, local17
09fe4     08 12 06 F1 | 	add	arg01, #8
09fe8     14 15 02 F6 | 	mov	arg02, local02
09fec     DC 76 B1 FD | 	call	#_pslpoke
09ff0     23 13 02 F6 | 	mov	arg01, local17
09ff4     0C 12 06 F1 | 	add	arg01, #12
09ff8     15 15 02 F6 | 	mov	arg02, local03
09ffc     CC 76 B1 FD | 	call	#_pslpoke
0a000     18 3D 02 F6 | 	mov	local12, local06
0a004     04 3C 66 F0 | 	shl	local12, #4
0a008     14 00 00 FF 
0a00c     F8 E5 05 F1 | 	add	objptr, ##10744
0a010     F2 3C 02 F1 | 	add	local12, objptr
0a014     1E 2F 62 FC | 	wrlong	local05, local12
0a018     18 3D 02 F6 | 	mov	local12, local06
0a01c     04 3C 66 F0 | 	shl	local12, #4
0a020     F2 3C 02 F1 | 	add	local12, objptr
0a024     04 3C 06 F1 | 	add	local12, #4
0a028     1E 47 62 FC | 	wrlong	local17, local12
0a02c     18 3D 02 F6 | 	mov	local12, local06
0a030     04 3C 66 F0 | 	shl	local12, #4
0a034     F2 3C 02 F1 | 	add	local12, objptr
0a038     0C 3C 06 F1 | 	add	local12, #12
0a03c     1E 41 62 FC | 	wrlong	local14, local12
0a040                 | ' memtop=arrayptr
0a040                 | ' psdpoke arrayptr,arraytype 
0a040                 | ' psdpoke arrayptr+2,esize 
0a040                 | ' pslpoke arrayptr+4,dims(0)
0a040                 | ' pslpoke arrayptr+8,dims(1)
0a040                 | ' pslpoke arrayptr+12,dims(2)
0a040                 | ' variables(j).name=varname2$
0a040                 | ' variables(j).value.uresult=arrayptr
0a040                 | ' variables(j).vartype=arraytype
0a040                 | ' if j=varnum then varnum+=1
0a040     20 00 00 FF 
0a044     10 E4 05 F1 | 	add	objptr, ##16400
0a048     F2 32 02 FB | 	rdlong	local07, objptr
0a04c     35 00 00 FF 
0a050     08 E4 85 F1 | 	sub	objptr, ##27144
0a054     19 31 0A F2 | 	cmp	local06, local07 wz
0a058     35 00 00 AF 
0a05c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a060     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a064     01 32 06 A1 |  if_e	add	local07, #1
0a068     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a06c     35 00 00 AF 
0a070     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a074                 | ' return 0
0a074     00 FA 05 F6 | 	mov	result1, #0
0a078                 | LR__0875
0a078     A7 F0 03 F6 | 	mov	ptra, fp
0a07c     B2 00 A0 FD | 	call	#popregs_
0a080                 | _compile_dim_ret
0a080     2D 00 64 FD | 	ret
0a084                 | 
0a084                 | ' 
0a084                 | ' '----- compile 'for' command. 
0a084                 | ' 
0a084                 | ' function compile_for() as ulong  
0a084                 | _compile_for
0a084     05 4A 05 F6 | 	mov	COUNT_, #5
0a088     A8 00 A0 FD | 	call	#pushregs_
0a08c                 | ' 
0a08c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a08c     37 00 00 FF 
0a090     44 E4 05 F1 | 	add	objptr, ##28228
0a094     F2 14 02 FB | 	rdlong	arg02, objptr
0a098     01 14 06 F1 | 	add	arg02, #1
0a09c     03 14 66 F0 | 	shl	arg02, #3
0a0a0     02 00 00 FF 
0a0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0a8     F2 14 02 F1 | 	add	arg02, objptr
0a0ac     0A 13 02 FB | 	rdlong	arg01, arg02
0a0b0     35 00 00 FF 
0a0b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b8                 | ' 
0a0b8                 | ' select case s
0a0b8     A6 01 00 FF 
0a0bc     08 14 06 F6 | 	mov	arg02, ##@LR__5481
0a0c0     38 AE B1 FD | 	call	#__system___string_cmp
0a0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0c8     1B FA 05 A6 |  if_e	mov	result1, #27
0a0cc     00 FA 05 56 |  if_ne	mov	result1, #0
0a0d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0d4     0C 00 90 AD |  if_e	jmp	#LR__0880
0a0d8     05 12 06 F6 | 	mov	arg01, #5
0a0dc     A8 DB BF FD | 	call	#_compile_immediate_assign
0a0e0     08 00 90 FD | 	jmp	#LR__0881
0a0e4                 | LR__0880
0a0e4     20 FA 05 F6 | 	mov	result1, #32
0a0e8     D0 02 90 FD | 	jmp	#LR__0885
0a0ec                 | LR__0881
0a0ec     4A 00 00 FF 
0a0f0     7C E4 05 F1 | 	add	objptr, ##38012
0a0f4     F2 14 02 FB | 	rdlong	arg02, objptr
0a0f8     0A 13 02 F6 | 	mov	arg01, arg02
0a0fc     01 12 86 F1 | 	sub	arg01, #1
0a100     09 2D 02 F6 | 	mov	local04, arg01
0a104     01 2C 66 F0 | 	shl	local04, #1
0a108     09 2D 02 F1 | 	add	local04, arg01
0a10c     02 2C 66 F0 | 	shl	local04, #2
0a110     03 00 00 FF 
0a114     00 E4 85 F1 | 	sub	objptr, ##1536
0a118     F2 2C 02 F1 | 	add	local04, objptr
0a11c     16 27 02 FB | 	rdlong	local01, local04
0a120     04 2C 06 F1 | 	add	local04, #4
0a124     16 2D 02 FB | 	rdlong	local04, local04
0a128     01 14 86 F1 | 	sub	arg02, #1
0a12c     0A 13 02 F6 | 	mov	arg01, arg02
0a130     01 12 66 F0 | 	shl	arg01, #1
0a134     0A 13 02 F1 | 	add	arg01, arg02
0a138     02 12 66 F0 | 	shl	arg01, #2
0a13c     F2 12 02 F1 | 	add	arg01, objptr
0a140     08 12 06 F1 | 	add	arg01, #8
0a144     09 15 02 FB | 	rdlong	arg02, arg01
0a148     16 29 02 F6 | 	mov	local02, local04
0a14c     0A 2B 02 F6 | 	mov	local03, arg02
0a150                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a150     17 2A 0E F2 | 	cmp	local03, #23 wz
0a154     47 00 00 FF 
0a158     7C E4 85 F1 | 	sub	objptr, ##36476
0a15c     22 FA 05 56 |  if_ne	mov	result1, #34
0a160     58 02 90 5D |  if_ne	jmp	#LR__0885
0a164     13 2F 02 F6 | 	mov	local05, local01
0a168                 | ' varnum=t1.result.uresult
0a168                 | ' if lparts(ct).part$<>"to" then return 33
0a168     37 00 00 FF 
0a16c     44 E4 05 F1 | 	add	objptr, ##28228
0a170     F2 26 02 FB | 	rdlong	local01, objptr
0a174     03 26 66 F0 | 	shl	local01, #3
0a178     02 00 00 FF 
0a17c     38 E4 85 F1 | 	sub	objptr, ##1080
0a180     F2 26 02 F1 | 	add	local01, objptr
0a184     13 13 02 FB | 	rdlong	arg01, local01
0a188     A8 01 00 FF 
0a18c     F2 14 06 F6 | 	mov	arg02, ##@LR__5748
0a190     35 00 00 FF 
0a194     0C E4 85 F1 | 	sub	objptr, ##27148
0a198     60 AD B1 FD | 	call	#__system___string_cmp
0a19c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1a0     21 FA 05 56 |  if_ne	mov	result1, #33
0a1a4     14 02 90 5D |  if_ne	jmp	#LR__0885
0a1a8     37 00 00 FF 
0a1ac     44 E4 05 F1 | 	add	objptr, ##28228
0a1b0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1b4     01 2C 06 F1 | 	add	local04, #1
0a1b8     F2 2C 62 FC | 	wrlong	local04, objptr
0a1bc     37 00 00 FF 
0a1c0     44 E4 85 F1 | 	sub	objptr, ##28228
0a1c4     A8 11 B0 FD | 	call	#_expr
0a1c8                 | ' ct+=1
0a1c8                 | ' expr()  										' there is "to" value pushed on the stack
0a1c8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0a1c8     37 00 00 FF 
0a1cc     44 E4 05 F1 | 	add	objptr, ##28228
0a1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1d4     03 2C 66 F0 | 	shl	local04, #3
0a1d8     02 00 00 FF 
0a1dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a1e0     F2 2C 02 F1 | 	add	local04, objptr
0a1e4     16 13 02 FB | 	rdlong	arg01, local04
0a1e8     A8 01 00 FF 
0a1ec     F5 14 06 F6 | 	mov	arg02, ##@LR__5749
0a1f0     35 00 00 FF 
0a1f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1f8     00 AD B1 FD | 	call	#__system___string_cmp
0a1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a200     3C 00 90 AD |  if_e	jmp	#LR__0882
0a204     37 00 00 FF 
0a208     44 E4 05 F1 | 	add	objptr, ##28228
0a20c     F2 2C 02 FB | 	rdlong	local04, objptr
0a210     03 2C 66 F0 | 	shl	local04, #3
0a214     02 00 00 FF 
0a218     38 E4 85 F1 | 	sub	objptr, ##1080
0a21c     F2 2C 02 F1 | 	add	local04, objptr
0a220     16 13 02 FB | 	rdlong	arg01, local04
0a224     A8 01 00 FF 
0a228     FA 14 06 F6 | 	mov	arg02, ##@LR__5750
0a22c     35 00 00 FF 
0a230     0C E4 85 F1 | 	sub	objptr, ##27148
0a234     C4 AC B1 FD | 	call	#__system___string_cmp
0a238     00 FA 0D F2 | 	cmp	result1, #0 wz
0a23c     24 00 90 5D |  if_ne	jmp	#LR__0883
0a240                 | LR__0882
0a240     37 00 00 FF 
0a244     44 E4 05 F1 | 	add	objptr, ##28228
0a248     F2 26 02 FB | 	rdlong	local01, objptr
0a24c     01 26 06 F1 | 	add	local01, #1
0a250     F2 26 62 FC | 	wrlong	local01, objptr
0a254     37 00 00 FF 
0a258     44 E4 85 F1 | 	sub	objptr, ##28228
0a25c     10 11 B0 FD | 	call	#_expr
0a260     78 00 90 FD | 	jmp	#LR__0884
0a264                 | LR__0883
0a264     4A 00 00 FF 
0a268     7C E4 05 F1 | 	add	objptr, ##38012
0a26c     F2 26 02 FB | 	rdlong	local01, objptr
0a270     13 2D 02 F6 | 	mov	local04, local01
0a274     01 2C 66 F0 | 	shl	local04, #1
0a278     13 2D 02 F1 | 	add	local04, local01
0a27c     02 2C 66 F0 | 	shl	local04, #2
0a280     03 00 00 FF 
0a284     00 E4 85 F1 | 	sub	objptr, ##1536
0a288     F2 2C 02 F1 | 	add	local04, objptr
0a28c     08 2C 06 F1 | 	add	local04, #8
0a290     16 39 68 FC | 	wrlong	#28, local04
0a294     03 00 00 FF 
0a298     00 E4 05 F1 | 	add	objptr, ##1536
0a29c     F2 26 02 FB | 	rdlong	local01, objptr
0a2a0     13 2D 02 F6 | 	mov	local04, local01
0a2a4     01 2C 66 F0 | 	shl	local04, #1
0a2a8     13 2D 02 F1 | 	add	local04, local01
0a2ac     02 2C 66 F0 | 	shl	local04, #2
0a2b0     03 00 00 FF 
0a2b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2b8     F2 2C 02 F1 | 	add	local04, objptr
0a2bc     16 03 68 FC | 	wrlong	#1, local04
0a2c0     03 00 00 FF 
0a2c4     00 E4 05 F1 | 	add	objptr, ##1536
0a2c8     F2 26 02 FB | 	rdlong	local01, objptr
0a2cc     01 26 06 F1 | 	add	local01, #1
0a2d0     F2 26 62 FC | 	wrlong	local01, objptr
0a2d4     4A 00 00 FF 
0a2d8     7C E4 85 F1 | 	sub	objptr, ##38012
0a2dc                 | LR__0884
0a2dc     4A 00 00 FF 
0a2e0     7C E4 05 F1 | 	add	objptr, ##38012
0a2e4     F2 26 02 FB | 	rdlong	local01, objptr
0a2e8     13 2D 02 F6 | 	mov	local04, local01
0a2ec     01 2C 66 F0 | 	shl	local04, #1
0a2f0     13 2D 02 F1 | 	add	local04, local01
0a2f4     02 2C 66 F0 | 	shl	local04, #2
0a2f8     03 00 00 FF 
0a2fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a300     F2 2C 02 F1 | 	add	local04, objptr
0a304     08 2C 06 F1 | 	add	local04, #8
0a308     16 39 68 FC | 	wrlong	#28, local04
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 26 02 FB | 	rdlong	local01, objptr
0a318     13 2D 02 F6 | 	mov	local04, local01
0a31c     01 2C 66 F0 | 	shl	local04, #1
0a320     13 2D 02 F1 | 	add	local04, local01
0a324     02 2C 66 F0 | 	shl	local04, #2
0a328     03 00 00 FF 
0a32c     00 E4 85 F1 | 	sub	objptr, ##1536
0a330     F2 2C 02 F1 | 	add	local04, objptr
0a334     16 2F 62 FC | 	wrlong	local05, local04
0a338     03 00 00 FF 
0a33c     00 E4 05 F1 | 	add	objptr, ##1536
0a340     F2 2E 02 FB | 	rdlong	local05, objptr
0a344     01 2E 06 F1 | 	add	local05, #1
0a348     F2 2E 62 FC | 	wrlong	local05, objptr
0a34c     17 27 02 F6 | 	mov	local01, local05
0a350     01 26 66 F0 | 	shl	local01, #1
0a354     17 27 02 F1 | 	add	local01, local05
0a358     02 26 66 F0 | 	shl	local01, #2
0a35c     03 00 00 FF 
0a360     00 E4 85 F1 | 	sub	objptr, ##1536
0a364     F2 26 02 F1 | 	add	local01, objptr
0a368     08 26 06 F1 | 	add	local01, #8
0a36c     13 95 68 FC | 	wrlong	#74, local01
0a370     03 00 00 FF 
0a374     00 E4 05 F1 | 	add	objptr, ##1536
0a378     F2 2E 02 FB | 	rdlong	local05, objptr
0a37c     17 27 02 F6 | 	mov	local01, local05
0a380     01 26 66 F0 | 	shl	local01, #1
0a384     17 27 02 F1 | 	add	local01, local05
0a388     02 26 66 F0 | 	shl	local01, #2
0a38c     03 00 00 FF 
0a390     00 E4 85 F1 | 	sub	objptr, ##1536
0a394     F2 26 02 F1 | 	add	local01, objptr
0a398     13 01 68 FC | 	wrlong	#0, local01
0a39c     03 00 00 FF 
0a3a0     00 E4 05 F1 | 	add	objptr, ##1536
0a3a4     F2 2E 02 FB | 	rdlong	local05, objptr
0a3a8     01 2E 06 F1 | 	add	local05, #1
0a3ac     F2 2E 62 FC | 	wrlong	local05, objptr
0a3b0     4A 00 00 FF 
0a3b4     7C E4 85 F1 | 	sub	objptr, ##38012
0a3b8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a3b8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a3b8                 | ' return 0
0a3b8     00 FA 05 F6 | 	mov	result1, #0
0a3bc                 | LR__0885
0a3bc     A7 F0 03 F6 | 	mov	ptra, fp
0a3c0     B2 00 A0 FD | 	call	#popregs_
0a3c4                 | _compile_for_ret
0a3c4     2D 00 64 FD | 	ret
0a3c8                 | 
0a3c8                 | ' 
0a3c8                 | ' '----- compile 'next' command. 
0a3c8                 | ' 
0a3c8                 | ' function compile_next() as ulong
0a3c8                 | _compile_next
0a3c8     04 4A 05 F6 | 	mov	COUNT_, #4
0a3cc     A8 00 A0 FD | 	call	#pushregs_
0a3d0     37 00 00 FF 
0a3d4     44 E4 05 F1 | 	add	objptr, ##28228
0a3d8     F2 14 02 FB | 	rdlong	arg02, objptr
0a3dc     03 14 66 F0 | 	shl	arg02, #3
0a3e0     02 00 00 FF 
0a3e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3e8     F2 14 02 F1 | 	add	arg02, objptr
0a3ec     0A 27 02 FB | 	rdlong	local01, arg02
0a3f0                 | ' 
0a3f0                 | ' varname$=lparts(ct).part$ 
0a3f0                 | ' if varnum=0 then return 35
0a3f0     04 E4 85 F1 | 	sub	objptr, #4
0a3f4     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a3f8     35 00 00 FF 
0a3fc     08 E4 85 F1 | 	sub	objptr, ##27144
0a400     23 FA 05 A6 |  if_e	mov	result1, #35
0a404     4C 01 90 AD |  if_e	jmp	#LR__0892
0a408     01 28 66 F6 | 	neg	local02, #1
0a40c                 | ' j=-1
0a40c                 | ' for i=0 to varnum-1
0a40c     00 2A 06 F6 | 	mov	local03, #0
0a410     35 00 00 FF 
0a414     08 E4 05 F1 | 	add	objptr, ##27144
0a418     F2 2C 02 FB | 	rdlong	local04, objptr
0a41c     35 00 00 FF 
0a420     08 E4 85 F1 | 	sub	objptr, ##27144
0a424                 | LR__0890
0a424     16 2B 12 F2 | 	cmp	local03, local04 wc
0a428     38 00 90 3D |  if_ae	jmp	#LR__0891
0a42c                 | '   if variables(i).name=varname$ then j=i : exit
0a42c     15 15 02 F6 | 	mov	arg02, local03
0a430     04 14 66 F0 | 	shl	arg02, #4
0a434     14 00 00 FF 
0a438     F8 E5 05 F1 | 	add	objptr, ##10744
0a43c     F2 14 02 F1 | 	add	arg02, objptr
0a440     0A 13 02 FB | 	rdlong	arg01, arg02
0a444     13 15 02 F6 | 	mov	arg02, local01
0a448     14 00 00 FF 
0a44c     F8 E5 85 F1 | 	sub	objptr, ##10744
0a450     A8 AA B1 FD | 	call	#__system___string_cmp
0a454     00 FA 0D F2 | 	cmp	result1, #0 wz
0a458     15 29 02 A6 |  if_e	mov	local02, local03
0a45c     01 2A 06 51 |  if_ne	add	local03, #1
0a460     C0 FF 9F 5D |  if_ne	jmp	#LR__0890
0a464                 | LR__0891
0a464                 | ' if j=-1 then return 35
0a464     FF FF 7F FF 
0a468     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a46c     23 FA 05 A6 |  if_e	mov	result1, #35
0a470     E0 00 90 AD |  if_e	jmp	#LR__0892
0a474     4A 00 00 FF 
0a478     7C E4 05 F1 | 	add	objptr, ##38012
0a47c     F2 2C 02 FB | 	rdlong	local04, objptr
0a480     16 2B 02 F6 | 	mov	local03, local04
0a484     01 2A 66 F0 | 	shl	local03, #1
0a488     16 2B 02 F1 | 	add	local03, local04
0a48c     02 2A 66 F0 | 	shl	local03, #2
0a490     03 00 00 FF 
0a494     00 E4 85 F1 | 	sub	objptr, ##1536
0a498     F2 2A 02 F1 | 	add	local03, objptr
0a49c     08 2A 06 F1 | 	add	local03, #8
0a4a0     15 39 68 FC | 	wrlong	#28, local03
0a4a4     03 00 00 FF 
0a4a8     00 E4 05 F1 | 	add	objptr, ##1536
0a4ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a4b0     16 2B 02 F6 | 	mov	local03, local04
0a4b4     01 2A 66 F0 | 	shl	local03, #1
0a4b8     16 2B 02 F1 | 	add	local03, local04
0a4bc     02 2A 66 F0 | 	shl	local03, #2
0a4c0     03 00 00 FF 
0a4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4c8     F2 2A 02 F1 | 	add	local03, objptr
0a4cc     15 29 62 FC | 	wrlong	local02, local03
0a4d0     03 00 00 FF 
0a4d4     00 E4 05 F1 | 	add	objptr, ##1536
0a4d8     F2 2C 02 FB | 	rdlong	local04, objptr
0a4dc     01 2C 06 F1 | 	add	local04, #1
0a4e0     F2 2C 62 FC | 	wrlong	local04, objptr
0a4e4     16 2B 02 F6 | 	mov	local03, local04
0a4e8     01 2A 66 F0 | 	shl	local03, #1
0a4ec     16 2B 02 F1 | 	add	local03, local04
0a4f0     02 2A 66 F0 | 	shl	local03, #2
0a4f4     03 00 00 FF 
0a4f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4fc     F2 2A 02 F1 | 	add	local03, objptr
0a500     08 2A 06 F1 | 	add	local03, #8
0a504     15 97 68 FC | 	wrlong	#75, local03
0a508     03 00 00 FF 
0a50c     00 E4 05 F1 | 	add	objptr, ##1536
0a510     F2 2C 02 FB | 	rdlong	local04, objptr
0a514     16 2B 02 F6 | 	mov	local03, local04
0a518     01 2A 66 F0 | 	shl	local03, #1
0a51c     16 2B 02 F1 | 	add	local03, local04
0a520     02 2A 66 F0 | 	shl	local03, #2
0a524     03 00 00 FF 
0a528     00 E4 85 F1 | 	sub	objptr, ##1536
0a52c     F2 2A 02 F1 | 	add	local03, objptr
0a530     15 01 68 FC | 	wrlong	#0, local03
0a534     03 00 00 FF 
0a538     00 E4 05 F1 | 	add	objptr, ##1536
0a53c     F2 2C 02 FB | 	rdlong	local04, objptr
0a540     01 2C 06 F1 | 	add	local04, #1
0a544     F2 2C 62 FC | 	wrlong	local04, objptr
0a548     4A 00 00 FF 
0a54c     7C E4 85 F1 | 	sub	objptr, ##38012
0a550                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a550                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a550                 | ' return 0
0a550     00 FA 05 F6 | 	mov	result1, #0
0a554                 | LR__0892
0a554     A7 F0 03 F6 | 	mov	ptra, fp
0a558     B2 00 A0 FD | 	call	#popregs_
0a55c                 | _compile_next_ret
0a55c     2D 00 64 FD | 	ret
0a560                 | 
0a560                 | ' 
0a560                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a560                 | ' 
0a560                 | ' function compile_gosub() as ulong
0a560                 | _compile_gosub
0a560     02 4A 05 F6 | 	mov	COUNT_, #2
0a564     A8 00 A0 FD | 	call	#pushregs_
0a568     4A 00 00 FF 
0a56c     7C E4 05 F1 | 	add	objptr, ##38012
0a570     F2 26 02 FB | 	rdlong	local01, objptr
0a574     13 29 02 F6 | 	mov	local02, local01
0a578     01 28 66 F0 | 	shl	local02, #1
0a57c     13 29 02 F1 | 	add	local02, local01
0a580     02 28 66 F0 | 	shl	local02, #2
0a584     03 00 00 FF 
0a588     00 E4 85 F1 | 	sub	objptr, ##1536
0a58c     F2 28 02 F1 | 	add	local02, objptr
0a590     08 28 06 F1 | 	add	local02, #8
0a594     14 53 69 FC | 	wrlong	#169, local02
0a598     03 00 00 FF 
0a59c     00 E4 05 F1 | 	add	objptr, ##1536
0a5a0     F2 28 02 FB | 	rdlong	local02, objptr
0a5a4     01 28 06 F1 | 	add	local02, #1
0a5a8     F2 28 62 FC | 	wrlong	local02, objptr
0a5ac     4A 00 00 FF 
0a5b0     7C E4 85 F1 | 	sub	objptr, ##38012
0a5b4     0C 00 B0 FD | 	call	#_compile_goto
0a5b8                 | ' compiledline(lineptr).result_type=token_gosub
0a5b8                 | ' lineptr+=1
0a5b8                 | ' err=compile_goto()
0a5b8                 | ' return err
0a5b8     A7 F0 03 F6 | 	mov	ptra, fp
0a5bc     B2 00 A0 FD | 	call	#popregs_
0a5c0                 | _compile_gosub_ret
0a5c0     2D 00 64 FD | 	ret
0a5c4                 | 
0a5c4                 | ' 
0a5c4                 | ' '----- compile 'goto' 
0a5c4                 | ' 
0a5c4                 | ' function compile_goto() as ulong
0a5c4                 | _compile_goto
0a5c4     03 4A 05 F6 | 	mov	COUNT_, #3
0a5c8     A8 00 A0 FD | 	call	#pushregs_
0a5cc     34 F0 07 F1 | 	add	ptra, #52
0a5d0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a5d0     37 00 00 FF 
0a5d4     44 E4 05 F1 | 	add	objptr, ##28228
0a5d8     F2 16 02 FB | 	rdlong	arg03, objptr
0a5dc     03 16 66 F0 | 	shl	arg03, #3
0a5e0     02 00 00 FF 
0a5e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5e8     F2 16 02 F1 | 	add	arg03, objptr
0a5ec     04 16 06 F1 | 	add	arg03, #4
0a5f0     0B 17 02 FB | 	rdlong	arg03, arg03
0a5f4     01 00 00 FF 
0a5f8     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a5fc     35 00 00 FF 
0a600     0C E4 85 F1 | 	sub	objptr, ##27148
0a604     CC 02 90 5D |  if_ne	jmp	#LR__0905
0a608     37 00 00 FF 
0a60c     44 E4 05 F1 | 	add	objptr, ##28228
0a610     F2 16 02 FB | 	rdlong	arg03, objptr
0a614     01 16 06 F1 | 	add	arg03, #1
0a618     03 16 66 F0 | 	shl	arg03, #3
0a61c     02 00 00 FF 
0a620     38 E4 85 F1 | 	sub	objptr, ##1080
0a624     F2 16 02 F1 | 	add	arg03, objptr
0a628     04 16 06 F1 | 	add	arg03, #4
0a62c     0B 17 02 FB | 	rdlong	arg03, arg03
0a630     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a634     35 00 00 FF 
0a638     0C E4 85 F1 | 	sub	objptr, ##27148
0a63c     94 02 90 5D |  if_ne	jmp	#LR__0905
0a640     37 00 00 FF 
0a644     44 E4 05 F1 | 	add	objptr, ##28228
0a648     F2 16 02 FB | 	rdlong	arg03, objptr
0a64c     03 16 66 F0 | 	shl	arg03, #3
0a650     02 00 00 FF 
0a654     38 E4 85 F1 | 	sub	objptr, ##1080
0a658     F2 16 02 F1 | 	add	arg03, objptr
0a65c     0B 13 02 FB | 	rdlong	arg01, arg03
0a660     00 14 06 F6 | 	mov	arg02, #0
0a664     35 00 00 FF 
0a668     0C E4 85 F1 | 	sub	objptr, ##27148
0a66c     58 DD B1 FD | 	call	#__system____builtin_atoi
0a670     04 4E 05 F1 | 	add	fp, #4
0a674     A7 FA 61 FC | 	wrlong	result1, fp
0a678     4A 00 00 FF 
0a67c     7C E4 05 F1 | 	add	objptr, ##38012
0a680     F2 26 02 FB | 	rdlong	local01, objptr
0a684     13 29 02 F6 | 	mov	local02, local01
0a688     01 28 66 F0 | 	shl	local02, #1
0a68c     13 29 02 F1 | 	add	local02, local01
0a690     02 28 66 F0 | 	shl	local02, #2
0a694     03 00 00 FF 
0a698     00 E4 85 F1 | 	sub	objptr, ##1536
0a69c     F2 28 02 F1 | 	add	local02, objptr
0a6a0     08 28 06 F1 | 	add	local02, #8
0a6a4     14 9D 68 FC | 	wrlong	#78, local02
0a6a8     03 00 00 FF 
0a6ac     0C E4 05 F1 | 	add	objptr, ##1548
0a6b0     F2 2A 02 FB | 	rdlong	local03, objptr
0a6b4     4A 00 00 FF 
0a6b8     88 E4 85 F1 | 	sub	objptr, ##38024
0a6bc     04 4E 05 F1 | 	add	fp, #4
0a6c0     A7 2A 62 FC | 	wrlong	local03, fp
0a6c4     08 4E 85 F1 | 	sub	fp, #8
0a6c8                 | '   gotoline=val%(lparts(ct).part$) 
0a6c8                 | '   compiledline(lineptr).result_type=token_fast_goto
0a6c8                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a6c8                 | '   do
0a6c8                 | LR__0900
0a6c8     10 4E 05 F1 | 	add	fp, #16
0a6cc     A7 12 02 F6 | 	mov	arg01, fp
0a6d0     08 4E 85 F1 | 	sub	fp, #8
0a6d4     A7 14 02 FB | 	rdlong	arg02, fp
0a6d8     08 4E 85 F1 | 	sub	fp, #8
0a6dc     18 16 06 F6 | 	mov	arg03, #24
0a6e0     0B 00 00 FF 
0a6e4     CC E4 05 F1 | 	add	objptr, ##5836
0a6e8     A8 9B B1 FD | 	call	#_psram_spin2_read1
0a6ec     0B 00 00 FF 
0a6f0     CC E4 85 F1 | 	sub	objptr, ##5836
0a6f4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a6f4                 | '     if gotoheader(0)<>$FFFFFFFF then
0a6f4     10 4E 05 F1 | 	add	fp, #16
0a6f8     A7 2A 02 FB | 	rdlong	local03, fp
0a6fc     10 4E 85 F1 | 	sub	fp, #16
0a700     FF FF 7F FF 
0a704     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a708     24 00 90 AD |  if_e	jmp	#LR__0901
0a70c     08 4E 05 F1 | 	add	fp, #8
0a710     A7 2A 02 FB | 	rdlong	local03, fp
0a714     04 4E 05 F1 | 	add	fp, #4
0a718     A7 2A 62 FC | 	wrlong	local03, fp
0a71c     18 4E 05 F1 | 	add	fp, #24
0a720     A7 2A 02 FB | 	rdlong	local03, fp
0a724     1C 4E 85 F1 | 	sub	fp, #28
0a728     A7 2A 62 FC | 	wrlong	local03, fp
0a72c     08 4E 85 F1 | 	sub	fp, #8
0a730                 | LR__0901
0a730     24 4E 05 F1 | 	add	fp, #36
0a734     A7 2A 02 FB | 	rdlong	local03, fp
0a738     24 4E 85 F1 | 	sub	fp, #36
0a73c     FF FF 3F FF 
0a740     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a744     10 4E 05 51 |  if_ne	add	fp, #16
0a748     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a74c     10 4E 85 51 |  if_ne	sub	fp, #16
0a750     FF FF 7F 5F 
0a754     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a758     1C 00 90 AD |  if_e	jmp	#LR__0902
0a75c     10 4E 05 F1 | 	add	fp, #16
0a760     A7 2A 02 FB | 	rdlong	local03, fp
0a764     0C 4E 85 F1 | 	sub	fp, #12
0a768     A7 28 02 FB | 	rdlong	local02, fp
0a76c     04 4E 85 F1 | 	sub	fp, #4
0a770     14 2B 0A F2 | 	cmp	local03, local02 wz
0a774     50 FF 9F 5D |  if_ne	jmp	#LR__0900
0a778                 | LR__0902
0a778                 | '   if gotoheader(0)=gotoline then
0a778     10 4E 05 F1 | 	add	fp, #16
0a77c     A7 2A 02 FB | 	rdlong	local03, fp
0a780     0C 4E 85 F1 | 	sub	fp, #12
0a784     A7 26 02 FB | 	rdlong	local01, fp
0a788     04 4E 85 F1 | 	sub	fp, #4
0a78c     13 2B 0A F2 | 	cmp	local03, local01 wz
0a790     7C 00 90 5D |  if_ne	jmp	#LR__0903
0a794     4A 00 00 FF 
0a798     7C E4 05 F1 | 	add	objptr, ##38012
0a79c     F2 26 02 FB | 	rdlong	local01, objptr
0a7a0     13 29 02 F6 | 	mov	local02, local01
0a7a4     01 28 66 F0 | 	shl	local02, #1
0a7a8     13 29 02 F1 | 	add	local02, local01
0a7ac     02 28 66 F0 | 	shl	local02, #2
0a7b0     03 00 00 FF 
0a7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7b8     F2 28 02 F1 | 	add	local02, objptr
0a7bc     0C 4E 05 F1 | 	add	fp, #12
0a7c0     A7 2A 02 FB | 	rdlong	local03, fp
0a7c4     14 2B 62 FC | 	wrlong	local03, local02
0a7c8     03 00 00 FF 
0a7cc     00 E4 05 F1 | 	add	objptr, ##1536
0a7d0     F2 26 02 FB | 	rdlong	local01, objptr
0a7d4     13 29 02 F6 | 	mov	local02, local01
0a7d8     01 28 66 F0 | 	shl	local02, #1
0a7dc     13 29 02 F1 | 	add	local02, local01
0a7e0     02 28 66 F0 | 	shl	local02, #2
0a7e4     03 00 00 FF 
0a7e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7ec     F2 28 02 F1 | 	add	local02, objptr
0a7f0     08 4E 85 F1 | 	sub	fp, #8
0a7f4     A7 2A 02 FB | 	rdlong	local03, fp
0a7f8     04 4E 85 F1 | 	sub	fp, #4
0a7fc     04 28 06 F1 | 	add	local02, #4
0a800     14 2B 62 FC | 	wrlong	local03, local02
0a804     47 00 00 FF 
0a808     7C E4 85 F1 | 	sub	objptr, ##36476
0a80c     A4 00 90 FD | 	jmp	#LR__0904
0a810                 | LR__0903
0a810     4A 00 00 FF 
0a814     7C E4 05 F1 | 	add	objptr, ##38012
0a818     F2 26 02 FB | 	rdlong	local01, objptr
0a81c     13 29 02 F6 | 	mov	local02, local01
0a820     01 28 66 F0 | 	shl	local02, #1
0a824     13 29 02 F1 | 	add	local02, local01
0a828     02 28 66 F0 | 	shl	local02, #2
0a82c     03 00 00 FF 
0a830     00 E4 85 F1 | 	sub	objptr, ##1536
0a834     F2 28 02 F1 | 	add	local02, objptr
0a838     00 00 C0 FF 
0a83c     14 01 68 FC | 	wrlong	##-2147483648, local02
0a840     03 00 00 FF 
0a844     00 E4 05 F1 | 	add	objptr, ##1536
0a848     F2 26 02 FB | 	rdlong	local01, objptr
0a84c     13 29 02 F6 | 	mov	local02, local01
0a850     01 28 66 F0 | 	shl	local02, #1
0a854     13 29 02 F1 | 	add	local02, local01
0a858     02 28 66 F0 | 	shl	local02, #2
0a85c     03 00 00 FF 
0a860     00 E4 85 F1 | 	sub	objptr, ##1536
0a864     F2 28 02 F1 | 	add	local02, objptr
0a868     04 4E 05 F1 | 	add	fp, #4
0a86c     A7 2A 02 FB | 	rdlong	local03, fp
0a870     04 4E 85 F1 | 	sub	fp, #4
0a874     04 28 06 F1 | 	add	local02, #4
0a878     14 2B 62 FC | 	wrlong	local03, local02
0a87c     03 00 00 FF 
0a880     00 E4 05 F1 | 	add	objptr, ##1536
0a884     F2 26 02 FB | 	rdlong	local01, objptr
0a888     13 29 02 F6 | 	mov	local02, local01
0a88c     01 28 66 F0 | 	shl	local02, #1
0a890     13 29 02 F1 | 	add	local02, local01
0a894     02 28 66 F0 | 	shl	local02, #2
0a898     03 00 00 FF 
0a89c     00 E4 85 F1 | 	sub	objptr, ##1536
0a8a0     F2 28 02 F1 | 	add	local02, objptr
0a8a4     08 28 06 F1 | 	add	local02, #8
0a8a8     14 A7 68 FC | 	wrlong	#83, local02
0a8ac     47 00 00 FF 
0a8b0     7C E4 85 F1 | 	sub	objptr, ##36476
0a8b4                 | LR__0904
0a8b4     4A 00 00 FF 
0a8b8     7C E4 05 F1 | 	add	objptr, ##38012
0a8bc     F2 2A 02 FB | 	rdlong	local03, objptr
0a8c0     01 2A 06 F1 | 	add	local03, #1
0a8c4     F2 2A 62 FC | 	wrlong	local03, objptr
0a8c8     4A 00 00 FF 
0a8cc     7C E4 85 F1 | 	sub	objptr, ##38012
0a8d0     D0 00 90 FD | 	jmp	#LR__0906
0a8d4                 | LR__0905
0a8d4     98 0A B0 FD | 	call	#_expr
0a8d8     30 4E 05 F1 | 	add	fp, #48
0a8dc     A7 9E 68 FC | 	wrlong	#79, fp
0a8e0     08 4E 85 F1 | 	sub	fp, #8
0a8e4     A7 00 68 FC | 	wrlong	#0, fp
0a8e8     04 4E 05 F1 | 	add	fp, #4
0a8ec     A7 2A 02 FB | 	rdlong	local03, fp
0a8f0     04 4E 05 F1 | 	add	fp, #4
0a8f4     A7 26 02 FB | 	rdlong	local01, fp
0a8f8     30 4E 85 F1 | 	sub	fp, #48
0a8fc     4A 00 00 FF 
0a900     7C E4 05 F1 | 	add	objptr, ##38012
0a904     F2 28 02 FB | 	rdlong	local02, objptr
0a908     14 17 02 F6 | 	mov	arg03, local02
0a90c     01 16 66 F0 | 	shl	arg03, #1
0a910     14 17 02 F1 | 	add	arg03, local02
0a914     02 16 66 F0 | 	shl	arg03, #2
0a918     03 00 00 FF 
0a91c     00 E4 85 F1 | 	sub	objptr, ##1536
0a920     F2 16 02 F1 | 	add	arg03, objptr
0a924     0B 01 68 FC | 	wrlong	#0, arg03
0a928     03 00 00 FF 
0a92c     00 E4 05 F1 | 	add	objptr, ##1536
0a930     F2 28 02 FB | 	rdlong	local02, objptr
0a934     14 17 02 F6 | 	mov	arg03, local02
0a938     01 16 66 F0 | 	shl	arg03, #1
0a93c     14 17 02 F1 | 	add	arg03, local02
0a940     02 16 66 F0 | 	shl	arg03, #2
0a944     03 00 00 FF 
0a948     00 E4 85 F1 | 	sub	objptr, ##1536
0a94c     F2 16 02 F1 | 	add	arg03, objptr
0a950     04 16 06 F1 | 	add	arg03, #4
0a954     0B 2B 62 FC | 	wrlong	local03, arg03
0a958     03 00 00 FF 
0a95c     00 E4 05 F1 | 	add	objptr, ##1536
0a960     F2 2A 02 FB | 	rdlong	local03, objptr
0a964     15 29 02 F6 | 	mov	local02, local03
0a968     01 28 66 F0 | 	shl	local02, #1
0a96c     15 29 02 F1 | 	add	local02, local03
0a970     02 28 66 F0 | 	shl	local02, #2
0a974     03 00 00 FF 
0a978     00 E4 85 F1 | 	sub	objptr, ##1536
0a97c     F2 28 02 F1 | 	add	local02, objptr
0a980     08 28 06 F1 | 	add	local02, #8
0a984     14 27 62 FC | 	wrlong	local01, local02
0a988     03 00 00 FF 
0a98c     00 E4 05 F1 | 	add	objptr, ##1536
0a990     F2 2A 02 FB | 	rdlong	local03, objptr
0a994     01 2A 06 F1 | 	add	local03, #1
0a998     F2 2A 62 FC | 	wrlong	local03, objptr
0a99c     4A 00 00 FF 
0a9a0     7C E4 85 F1 | 	sub	objptr, ##38012
0a9a4                 | LR__0906
0a9a4                 | ' return 0
0a9a4     00 FA 05 F6 | 	mov	result1, #0
0a9a8     A7 F0 03 F6 | 	mov	ptra, fp
0a9ac     B2 00 A0 FD | 	call	#popregs_
0a9b0                 | _compile_goto_ret
0a9b0     2D 00 64 FD | 	ret
0a9b4                 | 
0a9b4                 | ' 
0a9b4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0a9b4                 | ' 
0a9b4                 | ' function compile_on() as ulong
0a9b4                 | _compile_on
0a9b4     04 4A 05 F6 | 	mov	COUNT_, #4
0a9b8     A8 00 A0 FD | 	call	#pushregs_
0a9bc     B0 09 B0 FD | 	call	#_expr
0a9c0     00 26 06 F6 | 	mov	local01, #0
0a9c4     4A 00 00 FF 
0a9c8     7C E4 05 F1 | 	add	objptr, ##38012
0a9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a9d0     0A 13 02 F6 | 	mov	arg01, arg02
0a9d4     01 12 66 F0 | 	shl	arg01, #1
0a9d8     0A 13 02 F1 | 	add	arg01, arg02
0a9dc     02 12 66 F0 | 	shl	arg01, #2
0a9e0     03 00 00 FF 
0a9e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a9e8     F2 12 02 F1 | 	add	arg01, objptr
0a9ec     08 12 06 F1 | 	add	arg01, #8
0a9f0     09 83 69 FC | 	wrlong	#193, arg01
0a9f4     03 00 00 FF 
0a9f8     00 E4 05 F1 | 	add	objptr, ##1536
0a9fc     F2 14 02 FB | 	rdlong	arg02, objptr
0aa00     0A 29 02 F6 | 	mov	local02, arg02
0aa04     01 14 06 F1 | 	add	arg02, #1
0aa08     F2 14 62 FC | 	wrlong	arg02, objptr
0aa0c                 | ' expr()
0aa0c                 | ' 'print lparts(ct).part$ 'ok
0aa0c                 | ' numpar=0
0aa0c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0aa0c                 | ' if lparts(ct).part$="goto" then
0aa0c     13 00 00 FF 
0aa10     38 E4 85 F1 | 	sub	objptr, ##9784
0aa14     F2 14 02 FB | 	rdlong	arg02, objptr
0aa18     03 14 66 F0 | 	shl	arg02, #3
0aa1c     02 00 00 FF 
0aa20     38 E4 85 F1 | 	sub	objptr, ##1080
0aa24     F2 14 02 F1 | 	add	arg02, objptr
0aa28     0A 13 02 FB | 	rdlong	arg01, arg02
0aa2c     A8 01 00 FF 
0aa30     FD 14 06 F6 | 	mov	arg02, ##@LR__5751
0aa34     35 00 00 FF 
0aa38     0C E4 85 F1 | 	sub	objptr, ##27148
0aa3c     BC A4 B1 FD | 	call	#__system___string_cmp
0aa40     00 FA 0D F2 | 	cmp	result1, #0 wz
0aa44     14 02 90 5D |  if_ne	jmp	#LR__0915
0aa48     37 00 00 FF 
0aa4c     44 E4 05 F1 | 	add	objptr, ##28228
0aa50     F2 2A 02 FB | 	rdlong	local03, objptr
0aa54     37 00 00 FF 
0aa58     44 E4 85 F1 | 	sub	objptr, ##28228
0aa5c     01 2A 06 F1 | 	add	local03, #1
0aa60                 | '   i=ct+1
0aa60                 | '   do
0aa60                 | LR__0910
0aa60                 | '     if lparts(i).token=token_decimal then
0aa60     15 FB 01 F6 | 	mov	result1, local03
0aa64     03 FA 65 F0 | 	shl	result1, #3
0aa68     35 00 00 FF 
0aa6c     0C E4 05 F1 | 	add	objptr, ##27148
0aa70     F2 FA 01 F1 | 	add	result1, objptr
0aa74     04 FA 05 F1 | 	add	result1, #4
0aa78     FD FA 01 FB | 	rdlong	result1, result1
0aa7c     01 00 00 FF 
0aa80     00 FA 0D F2 | 	cmp	result1, ##512 wz
0aa84     35 00 00 FF 
0aa88     0C E4 85 F1 | 	sub	objptr, ##27148
0aa8c     DC 00 90 5D |  if_ne	jmp	#LR__0911
0aa90     4A 00 00 FF 
0aa94     7C E4 05 F1 | 	add	objptr, ##38012
0aa98     F2 FA 01 FB | 	rdlong	result1, objptr
0aa9c     FD 14 02 F6 | 	mov	arg02, result1
0aaa0     01 14 66 F0 | 	shl	arg02, #1
0aaa4     FD 14 02 F1 | 	add	arg02, result1
0aaa8     02 14 66 F0 | 	shl	arg02, #2
0aaac     03 00 00 FF 
0aab0     00 E4 85 F1 | 	sub	objptr, ##1536
0aab4     F2 14 02 F1 | 	add	arg02, objptr
0aab8     00 00 C0 FF 
0aabc     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0aac0     03 00 00 FF 
0aac4     00 E4 05 F1 | 	add	objptr, ##1536
0aac8     F2 14 02 FB | 	rdlong	arg02, objptr
0aacc     0A 2D 02 F6 | 	mov	local04, arg02
0aad0     01 2C 66 F0 | 	shl	local04, #1
0aad4     0A 2D 02 F1 | 	add	local04, arg02
0aad8     02 2C 66 F0 | 	shl	local04, #2
0aadc     03 00 00 FF 
0aae0     00 E4 85 F1 | 	sub	objptr, ##1536
0aae4     F2 2C 02 F1 | 	add	local04, objptr
0aae8     15 15 02 F6 | 	mov	arg02, local03
0aaec     03 14 66 F0 | 	shl	arg02, #3
0aaf0     12 00 00 FF 
0aaf4     70 E4 85 F1 | 	sub	objptr, ##9328
0aaf8     F2 14 02 F1 | 	add	arg02, objptr
0aafc     0A 13 02 FB | 	rdlong	arg01, arg02
0ab00     00 14 06 F6 | 	mov	arg02, #0
0ab04     35 00 00 FF 
0ab08     0C E4 85 F1 | 	sub	objptr, ##27148
0ab0c     B8 D8 B1 FD | 	call	#__system____builtin_atoi
0ab10     04 2C 06 F1 | 	add	local04, #4
0ab14     16 FB 61 FC | 	wrlong	result1, local04
0ab18     4A 00 00 FF 
0ab1c     7C E4 05 F1 | 	add	objptr, ##38012
0ab20     F2 14 02 FB | 	rdlong	arg02, objptr
0ab24     0A 2D 02 F6 | 	mov	local04, arg02
0ab28     01 2C 66 F0 | 	shl	local04, #1
0ab2c     0A 2D 02 F1 | 	add	local04, arg02
0ab30     02 2C 66 F0 | 	shl	local04, #2
0ab34     03 00 00 FF 
0ab38     00 E4 85 F1 | 	sub	objptr, ##1536
0ab3c     F2 2C 02 F1 | 	add	local04, objptr
0ab40     08 2C 06 F1 | 	add	local04, #8
0ab44     16 A7 68 FC | 	wrlong	#83, local04
0ab48     03 00 00 FF 
0ab4c     00 E4 05 F1 | 	add	objptr, ##1536
0ab50     F2 2C 02 FB | 	rdlong	local04, objptr
0ab54     01 2C 06 F1 | 	add	local04, #1
0ab58     F2 2C 62 FC | 	wrlong	local04, objptr
0ab5c     4A 00 00 FF 
0ab60     7C E4 85 F1 | 	sub	objptr, ##38012
0ab64     01 26 06 F1 | 	add	local01, #1
0ab68     08 00 90 FD | 	jmp	#LR__0912
0ab6c                 | LR__0911
0ab6c                 | '       return 17
0ab6c     11 FA 05 F6 | 	mov	result1, #17
0ab70     5C 04 90 FD | 	jmp	#LR__0925
0ab74                 | LR__0912
0ab74     01 2A 06 F1 | 	add	local03, #1
0ab78                 | '     i+=1
0ab78                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ab78     15 2D 02 F6 | 	mov	local04, local03
0ab7c     03 2C 66 F0 | 	shl	local04, #3
0ab80     35 00 00 FF 
0ab84     0C E4 05 F1 | 	add	objptr, ##27148
0ab88     F2 2C 02 F1 | 	add	local04, objptr
0ab8c     04 2C 06 F1 | 	add	local04, #4
0ab90     16 2D 02 FB | 	rdlong	local04, local04
0ab94     11 2C 0E F2 | 	cmp	local04, #17 wz
0ab98     35 00 00 FF 
0ab9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aba0     30 00 90 AD |  if_e	jmp	#LR__0913
0aba4     15 2D 02 F6 | 	mov	local04, local03
0aba8     03 2C 66 F0 | 	shl	local04, #3
0abac     35 00 00 FF 
0abb0     0C E4 05 F1 | 	add	objptr, ##27148
0abb4     F2 2C 02 F1 | 	add	local04, objptr
0abb8     04 2C 06 F1 | 	add	local04, #4
0abbc     16 2D 02 FB | 	rdlong	local04, local04
0abc0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abc4     35 00 00 FF 
0abc8     0C E4 85 F1 | 	sub	objptr, ##27148
0abcc     15 FA 05 56 |  if_ne	mov	result1, #21
0abd0     FC 03 90 5D |  if_ne	jmp	#LR__0925
0abd4                 | LR__0913
0abd4                 | '     if lparts(i).token=token_end then exit loop
0abd4     15 2D 02 F6 | 	mov	local04, local03
0abd8     03 2C 66 F0 | 	shl	local04, #3
0abdc     35 00 00 FF 
0abe0     0C E4 05 F1 | 	add	objptr, ##27148
0abe4     F2 2C 02 F1 | 	add	local04, objptr
0abe8     04 2C 06 F1 | 	add	local04, #4
0abec     16 2D 02 FB | 	rdlong	local04, local04
0abf0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abf4     35 00 00 FF 
0abf8     0C E4 85 F1 | 	sub	objptr, ##27148
0abfc     30 00 90 AD |  if_e	jmp	#LR__0914
0ac00     01 2A 06 F1 | 	add	local03, #1
0ac04     15 2D 02 F6 | 	mov	local04, local03
0ac08     03 2C 66 F0 | 	shl	local04, #3
0ac0c     35 00 00 FF 
0ac10     0C E4 05 F1 | 	add	objptr, ##27148
0ac14     F2 2C 02 F1 | 	add	local04, objptr
0ac18     04 2C 06 F1 | 	add	local04, #4
0ac1c     16 2D 02 FB | 	rdlong	local04, local04
0ac20     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ac24     35 00 00 FF 
0ac28     0C E4 85 F1 | 	sub	objptr, ##27148
0ac2c     30 FE 9F 5D |  if_ne	jmp	#LR__0910
0ac30                 | LR__0914
0ac30     14 2D 02 F6 | 	mov	local04, local02
0ac34     01 2C 66 F0 | 	shl	local04, #1
0ac38     14 2D 02 F1 | 	add	local04, local02
0ac3c     02 2C 66 F0 | 	shl	local04, #2
0ac40     47 00 00 FF 
0ac44     7C E4 05 F1 | 	add	objptr, ##36476
0ac48     F2 2C 02 F1 | 	add	local04, objptr
0ac4c     04 2C 06 F1 | 	add	local04, #4
0ac50     16 03 68 FC | 	wrlong	#1, local04
0ac54     47 00 00 FF 
0ac58     7C E4 85 F1 | 	sub	objptr, ##36476
0ac5c                 | LR__0915
0ac5c                 | ' 
0ac5c                 | ' if lparts(ct).part$="gosub" then
0ac5c     37 00 00 FF 
0ac60     44 E4 05 F1 | 	add	objptr, ##28228
0ac64     F2 2A 02 FB | 	rdlong	local03, objptr
0ac68     03 2A 66 F0 | 	shl	local03, #3
0ac6c     02 00 00 FF 
0ac70     38 E4 85 F1 | 	sub	objptr, ##1080
0ac74     F2 2A 02 F1 | 	add	local03, objptr
0ac78     15 13 02 FB | 	rdlong	arg01, local03
0ac7c     A8 01 00 FF 
0ac80     02 15 06 F6 | 	mov	arg02, ##@LR__5752
0ac84     35 00 00 FF 
0ac88     0C E4 85 F1 | 	sub	objptr, ##27148
0ac8c     6C A2 B1 FD | 	call	#__system___string_cmp
0ac90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac94     84 02 90 5D |  if_ne	jmp	#LR__0921
0ac98     37 00 00 FF 
0ac9c     44 E4 05 F1 | 	add	objptr, ##28228
0aca0     F2 2A 02 FB | 	rdlong	local03, objptr
0aca4     37 00 00 FF 
0aca8     44 E4 85 F1 | 	sub	objptr, ##28228
0acac     01 2A 06 F1 | 	add	local03, #1
0acb0                 | '   i=ct+1
0acb0                 | '   do
0acb0                 | LR__0916
0acb0                 | '     if lparts(i).token=token_decimal then
0acb0     15 2D 02 F6 | 	mov	local04, local03
0acb4     03 2C 66 F0 | 	shl	local04, #3
0acb8     35 00 00 FF 
0acbc     0C E4 05 F1 | 	add	objptr, ##27148
0acc0     F2 2C 02 F1 | 	add	local04, objptr
0acc4     04 2C 06 F1 | 	add	local04, #4
0acc8     16 2D 02 FB | 	rdlong	local04, local04
0accc     01 00 00 FF 
0acd0     00 2C 0E F2 | 	cmp	local04, ##512 wz
0acd4     35 00 00 FF 
0acd8     0C E4 85 F1 | 	sub	objptr, ##27148
0acdc     4C 01 90 5D |  if_ne	jmp	#LR__0917
0ace0     4A 00 00 FF 
0ace4     7C E4 05 F1 | 	add	objptr, ##38012
0ace8     F2 FA 01 FB | 	rdlong	result1, objptr
0acec     FD 2C 02 F6 | 	mov	local04, result1
0acf0     01 2C 66 F0 | 	shl	local04, #1
0acf4     FD 2C 02 F1 | 	add	local04, result1
0acf8     02 2C 66 F0 | 	shl	local04, #2
0acfc     03 00 00 FF 
0ad00     00 E4 85 F1 | 	sub	objptr, ##1536
0ad04     F2 2C 02 F1 | 	add	local04, objptr
0ad08     08 2C 06 F1 | 	add	local04, #8
0ad0c     16 53 69 FC | 	wrlong	#169, local04
0ad10     03 00 00 FF 
0ad14     00 E4 05 F1 | 	add	objptr, ##1536
0ad18     F2 FA 01 FB | 	rdlong	result1, objptr
0ad1c     01 FA 05 F1 | 	add	result1, #1
0ad20     F2 FA 61 FC | 	wrlong	result1, objptr
0ad24     FD 2C 02 F6 | 	mov	local04, result1
0ad28     01 2C 66 F0 | 	shl	local04, #1
0ad2c     FD 2C 02 F1 | 	add	local04, result1
0ad30     02 2C 66 F0 | 	shl	local04, #2
0ad34     03 00 00 FF 
0ad38     00 E4 85 F1 | 	sub	objptr, ##1536
0ad3c     F2 2C 02 F1 | 	add	local04, objptr
0ad40     00 00 C0 FF 
0ad44     16 01 68 FC | 	wrlong	##-2147483648, local04
0ad48     03 00 00 FF 
0ad4c     00 E4 05 F1 | 	add	objptr, ##1536
0ad50     F2 FA 01 FB | 	rdlong	result1, objptr
0ad54     FD 2C 02 F6 | 	mov	local04, result1
0ad58     01 2C 66 F0 | 	shl	local04, #1
0ad5c     FD 2C 02 F1 | 	add	local04, result1
0ad60     02 2C 66 F0 | 	shl	local04, #2
0ad64     03 00 00 FF 
0ad68     00 E4 85 F1 | 	sub	objptr, ##1536
0ad6c     F2 2C 02 F1 | 	add	local04, objptr
0ad70     15 13 02 F6 | 	mov	arg01, local03
0ad74     03 12 66 F0 | 	shl	arg01, #3
0ad78     12 00 00 FF 
0ad7c     70 E4 85 F1 | 	sub	objptr, ##9328
0ad80     F2 12 02 F1 | 	add	arg01, objptr
0ad84     09 13 02 FB | 	rdlong	arg01, arg01
0ad88     00 14 06 F6 | 	mov	arg02, #0
0ad8c     35 00 00 FF 
0ad90     0C E4 85 F1 | 	sub	objptr, ##27148
0ad94     30 D6 B1 FD | 	call	#__system____builtin_atoi
0ad98     04 2C 06 F1 | 	add	local04, #4
0ad9c     16 FB 61 FC | 	wrlong	result1, local04
0ada0     4A 00 00 FF 
0ada4     7C E4 05 F1 | 	add	objptr, ##38012
0ada8     F2 12 02 FB | 	rdlong	arg01, objptr
0adac     09 2D 02 F6 | 	mov	local04, arg01
0adb0     01 2C 66 F0 | 	shl	local04, #1
0adb4     09 2D 02 F1 | 	add	local04, arg01
0adb8     02 2C 66 F0 | 	shl	local04, #2
0adbc     03 00 00 FF 
0adc0     00 E4 85 F1 | 	sub	objptr, ##1536
0adc4     F2 2C 02 F1 | 	add	local04, objptr
0adc8     08 2C 06 F1 | 	add	local04, #8
0adcc     16 A7 68 FC | 	wrlong	#83, local04
0add0     03 00 00 FF 
0add4     00 E4 05 F1 | 	add	objptr, ##1536
0add8     F2 12 02 FB | 	rdlong	arg01, objptr
0addc     01 12 06 F1 | 	add	arg01, #1
0ade0     F2 12 62 FC | 	wrlong	arg01, objptr
0ade4     01 26 06 F1 | 	add	local01, #1
0ade8     09 2D 02 F6 | 	mov	local04, arg01
0adec     01 2C 66 F0 | 	shl	local04, #1
0adf0     09 2D 02 F1 | 	add	local04, arg01
0adf4     02 2C 66 F0 | 	shl	local04, #2
0adf8     03 00 00 FF 
0adfc     00 E4 85 F1 | 	sub	objptr, ##1536
0ae00     F2 2C 02 F1 | 	add	local04, objptr
0ae04     08 2C 06 F1 | 	add	local04, #8
0ae08     16 5B 68 FC | 	wrlong	#45, local04
0ae0c     03 00 00 FF 
0ae10     00 E4 05 F1 | 	add	objptr, ##1536
0ae14     F2 2C 02 FB | 	rdlong	local04, objptr
0ae18     01 2C 06 F1 | 	add	local04, #1
0ae1c     F2 2C 62 FC | 	wrlong	local04, objptr
0ae20     4A 00 00 FF 
0ae24     7C E4 85 F1 | 	sub	objptr, ##38012
0ae28     08 00 90 FD | 	jmp	#LR__0918
0ae2c                 | LR__0917
0ae2c                 | '       return 17
0ae2c     11 FA 05 F6 | 	mov	result1, #17
0ae30     9C 01 90 FD | 	jmp	#LR__0925
0ae34                 | LR__0918
0ae34     01 2A 06 F1 | 	add	local03, #1
0ae38                 | '     i+=1
0ae38                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ae38     15 2D 02 F6 | 	mov	local04, local03
0ae3c     03 2C 66 F0 | 	shl	local04, #3
0ae40     35 00 00 FF 
0ae44     0C E4 05 F1 | 	add	objptr, ##27148
0ae48     F2 2C 02 F1 | 	add	local04, objptr
0ae4c     04 2C 06 F1 | 	add	local04, #4
0ae50     16 2D 02 FB | 	rdlong	local04, local04
0ae54     11 2C 0E F2 | 	cmp	local04, #17 wz
0ae58     35 00 00 FF 
0ae5c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae60     30 00 90 AD |  if_e	jmp	#LR__0919
0ae64     15 2D 02 F6 | 	mov	local04, local03
0ae68     03 2C 66 F0 | 	shl	local04, #3
0ae6c     35 00 00 FF 
0ae70     0C E4 05 F1 | 	add	objptr, ##27148
0ae74     F2 2C 02 F1 | 	add	local04, objptr
0ae78     04 2C 06 F1 | 	add	local04, #4
0ae7c     16 2D 02 FB | 	rdlong	local04, local04
0ae80     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ae84     35 00 00 FF 
0ae88     0C E4 85 F1 | 	sub	objptr, ##27148
0ae8c     15 FA 05 56 |  if_ne	mov	result1, #21
0ae90     3C 01 90 5D |  if_ne	jmp	#LR__0925
0ae94                 | LR__0919
0ae94                 | '     if lparts(i).token=token_end then exit loop
0ae94     15 2D 02 F6 | 	mov	local04, local03
0ae98     03 2C 66 F0 | 	shl	local04, #3
0ae9c     35 00 00 FF 
0aea0     0C E4 05 F1 | 	add	objptr, ##27148
0aea4     F2 2C 02 F1 | 	add	local04, objptr
0aea8     04 2C 06 F1 | 	add	local04, #4
0aeac     16 2D 02 FB | 	rdlong	local04, local04
0aeb0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aeb4     35 00 00 FF 
0aeb8     0C E4 85 F1 | 	sub	objptr, ##27148
0aebc     30 00 90 AD |  if_e	jmp	#LR__0920
0aec0     01 2A 06 F1 | 	add	local03, #1
0aec4     15 2D 02 F6 | 	mov	local04, local03
0aec8     03 2C 66 F0 | 	shl	local04, #3
0aecc     35 00 00 FF 
0aed0     0C E4 05 F1 | 	add	objptr, ##27148
0aed4     F2 2C 02 F1 | 	add	local04, objptr
0aed8     04 2C 06 F1 | 	add	local04, #4
0aedc     16 2D 02 FB | 	rdlong	local04, local04
0aee0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aee4     35 00 00 FF 
0aee8     0C E4 85 F1 | 	sub	objptr, ##27148
0aeec     C0 FD 9F 5D |  if_ne	jmp	#LR__0916
0aef0                 | LR__0920
0aef0     14 2D 02 F6 | 	mov	local04, local02
0aef4     01 2C 66 F0 | 	shl	local04, #1
0aef8     14 2D 02 F1 | 	add	local04, local02
0aefc     02 2C 66 F0 | 	shl	local04, #2
0af00     47 00 00 FF 
0af04     7C E4 05 F1 | 	add	objptr, ##36476
0af08     F2 2C 02 F1 | 	add	local04, objptr
0af0c     04 2C 06 F1 | 	add	local04, #4
0af10     16 07 68 FC | 	wrlong	#3, local04
0af14     47 00 00 FF 
0af18     7C E4 85 F1 | 	sub	objptr, ##36476
0af1c                 | LR__0921
0af1c     14 2B 02 F6 | 	mov	local03, local02
0af20     01 2A 66 F0 | 	shl	local03, #1
0af24     14 2B 02 F1 | 	add	local03, local02
0af28     02 2A 66 F0 | 	shl	local03, #2
0af2c     47 00 00 FF 
0af30     7C E4 05 F1 | 	add	objptr, ##36476
0af34     F2 2A 02 F1 | 	add	local03, objptr
0af38     15 27 62 FC | 	wrlong	local01, local03
0af3c                 | ' compiledline(onlineptr).result.uresult=numpar
0af3c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0af3c     03 00 00 FF 
0af40     00 E4 05 F1 | 	add	objptr, ##1536
0af44     F2 2A 02 FB | 	rdlong	local03, objptr
0af48     4A 00 00 FF 
0af4c     7C E4 85 F1 | 	sub	objptr, ##38012
0af50     97 3C 48 FB | 	callpa	#(@LR__0924-@LR__0922)>>2,fcache_load_ptr_
0af54                 | LR__0922
0af54     15 2D 02 F6 | 	mov	local04, local03
0af58     01 2C 66 F0 | 	shl	local04, #1
0af5c     15 2D 02 F1 | 	add	local04, local03
0af60     02 2C 66 F0 | 	shl	local04, #2
0af64     47 00 00 FF 
0af68     7C E4 05 F1 | 	add	objptr, ##36476
0af6c     F2 2C 02 F1 | 	add	local04, objptr
0af70     08 2C 06 F1 | 	add	local04, #8
0af74     16 2D 02 FB | 	rdlong	local04, local04
0af78     2D 2C 0E F2 | 	cmp	local04, #45 wz
0af7c     47 00 00 FF 
0af80     7C E4 85 F1 | 	sub	objptr, ##36476
0af84     38 00 90 5D |  if_ne	jmp	#LR__0923
0af88     15 2D 02 F6 | 	mov	local04, local03
0af8c     01 2C 66 F0 | 	shl	local04, #1
0af90     15 2D 02 F1 | 	add	local04, local03
0af94     02 2C 66 F0 | 	shl	local04, #2
0af98     47 00 00 FF 
0af9c     7C E4 05 F1 | 	add	objptr, ##36476
0afa0     F2 2C 02 F1 | 	add	local04, objptr
0afa4     03 00 00 FF 
0afa8     00 E4 05 F1 | 	add	objptr, ##1536
0afac     F2 26 02 FB | 	rdlong	local01, objptr
0afb0     4A 00 00 FF 
0afb4     7C E4 85 F1 | 	sub	objptr, ##38012
0afb8     02 26 86 F1 | 	sub	local01, #2
0afbc     16 27 62 FC | 	wrlong	local01, local04
0afc0                 | LR__0923
0afc0     01 2A 86 F1 | 	sub	local03, #1
0afc4     14 2B 52 F2 | 	cmps	local03, local02 wc
0afc8     88 FF 9F 3D |  if_ae	jmp	#LR__0922
0afcc                 | LR__0924
0afcc                 | ' return 0
0afcc     00 FA 05 F6 | 	mov	result1, #0
0afd0                 | LR__0925
0afd0     A7 F0 03 F6 | 	mov	ptra, fp
0afd4     B2 00 A0 FD | 	call	#popregs_
0afd8                 | _compile_on_ret
0afd8     2D 00 64 FD | 	ret
0afdc                 | 
0afdc                 | ' 
0afdc                 | ' '----- A helper for compile_input and compile_read
0afdc                 | '  
0afdc                 | ' function getaddr() as ulong
0afdc                 | _getaddr
0afdc     0B 4A 05 F6 | 	mov	COUNT_, #11
0afe0     A8 00 A0 FD | 	call	#pushregs_
0afe4     37 00 00 FF 
0afe8     44 E4 05 F1 | 	add	objptr, ##28228
0afec     F2 2C 02 FB | 	rdlong	local04, objptr
0aff0     03 2C 66 F0 | 	shl	local04, #3
0aff4     02 00 00 FF 
0aff8     38 E4 85 F1 | 	sub	objptr, ##1080
0affc     F2 2C 02 F1 | 	add	local04, objptr
0b000     16 2F 02 FB | 	rdlong	local05, local04
0b004     01 30 66 F6 | 	neg	local06, #1
0b008                 | ' 
0b008                 | ' varname$=lparts(ct).part$
0b008                 | ' j=-1
0b008                 | ' 
0b008                 | ' for i=0 to varnum-1
0b008     00 32 06 F6 | 	mov	local07, #0
0b00c     04 E4 85 F1 | 	sub	objptr, #4
0b010     F2 34 02 FB | 	rdlong	local08, objptr
0b014     35 00 00 FF 
0b018     08 E4 85 F1 | 	sub	objptr, ##27144
0b01c                 | LR__0930
0b01c     1A 33 52 F2 | 	cmps	local07, local08 wc
0b020     38 00 90 3D |  if_ae	jmp	#LR__0931
0b024                 | '   if variables(i).name=varname$ then j=i : exit
0b024     19 2D 02 F6 | 	mov	local04, local07
0b028     04 2C 66 F0 | 	shl	local04, #4
0b02c     14 00 00 FF 
0b030     F8 E5 05 F1 | 	add	objptr, ##10744
0b034     F2 2C 02 F1 | 	add	local04, objptr
0b038     16 13 02 FB | 	rdlong	arg01, local04
0b03c     17 15 02 F6 | 	mov	arg02, local05
0b040     14 00 00 FF 
0b044     F8 E5 85 F1 | 	sub	objptr, ##10744
0b048     B0 9E B1 FD | 	call	#__system___string_cmp
0b04c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b050     19 31 02 A6 |  if_e	mov	local06, local07
0b054     01 32 06 51 |  if_ne	add	local07, #1
0b058     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0b05c                 | LR__0931
0b05c                 | ' if  j=-1 andalso varnum<maxvars then   
0b05c     FF FF 7F FF 
0b060     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b064     A8 00 90 5D |  if_ne	jmp	#LR__0932
0b068     35 00 00 FF 
0b06c     08 E4 05 F1 | 	add	objptr, ##27144
0b070     F2 34 02 FB | 	rdlong	local08, objptr
0b074     35 00 00 FF 
0b078     08 E4 85 F1 | 	sub	objptr, ##27144
0b07c     02 00 00 FF 
0b080     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b084     88 00 90 3D |  if_ae	jmp	#LR__0932
0b088     35 00 00 FF 
0b08c     08 E4 05 F1 | 	add	objptr, ##27144
0b090     F2 2C 02 FB | 	rdlong	local04, objptr
0b094     04 2C 66 F0 | 	shl	local04, #4
0b098     20 00 00 FF 
0b09c     10 E4 85 F1 | 	sub	objptr, ##16400
0b0a0     F2 2C 02 F1 | 	add	local04, objptr
0b0a4     16 2F 62 FC | 	wrlong	local05, local04
0b0a8     20 00 00 FF 
0b0ac     10 E4 05 F1 | 	add	objptr, ##16400
0b0b0     F2 2C 02 FB | 	rdlong	local04, objptr
0b0b4     04 2C 66 F0 | 	shl	local04, #4
0b0b8     20 00 00 FF 
0b0bc     10 E4 85 F1 | 	sub	objptr, ##16400
0b0c0     F2 2C 02 F1 | 	add	local04, objptr
0b0c4     04 2C 06 F1 | 	add	local04, #4
0b0c8     16 01 68 FC | 	wrlong	#0, local04
0b0cc     20 00 00 FF 
0b0d0     10 E4 05 F1 | 	add	objptr, ##16400
0b0d4     F2 2C 02 FB | 	rdlong	local04, objptr
0b0d8     04 2C 66 F0 | 	shl	local04, #4
0b0dc     20 00 00 FF 
0b0e0     10 E4 85 F1 | 	sub	objptr, ##16400
0b0e4     F2 2C 02 F1 | 	add	local04, objptr
0b0e8     0C 2C 06 F1 | 	add	local04, #12
0b0ec     16 39 68 FC | 	wrlong	#28, local04
0b0f0     20 00 00 FF 
0b0f4     10 E4 05 F1 | 	add	objptr, ##16400
0b0f8     F2 34 02 FB | 	rdlong	local08, objptr
0b0fc     1A 31 02 F6 | 	mov	local06, local08
0b100     01 34 06 F1 | 	add	local08, #1
0b104     F2 34 62 FC | 	wrlong	local08, objptr
0b108     35 00 00 FF 
0b10c     08 E4 85 F1 | 	sub	objptr, ##27144
0b110                 | LR__0932
0b110     00 34 06 F6 | 	mov	local08, #0
0b114                 | ' numpar=0
0b114                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b114     37 00 00 FF 
0b118     44 E4 05 F1 | 	add	objptr, ##28228
0b11c     F2 2C 02 FB | 	rdlong	local04, objptr
0b120     01 2C 06 F1 | 	add	local04, #1
0b124     03 2C 66 F0 | 	shl	local04, #3
0b128     02 00 00 FF 
0b12c     38 E4 85 F1 | 	sub	objptr, ##1080
0b130     F2 2C 02 F1 | 	add	local04, objptr
0b134     04 2C 06 F1 | 	add	local04, #4
0b138     16 33 02 FB | 	rdlong	local07, local04
0b13c     15 32 0E F2 | 	cmp	local07, #21 wz
0b140     35 00 00 FF 
0b144     0C E4 85 F1 | 	sub	objptr, ##27148
0b148     54 01 90 5D |  if_ne	jmp	#LR__0937
0b14c     37 00 00 FF 
0b150     44 E4 05 F1 | 	add	objptr, ##28228
0b154     F2 36 02 FB | 	rdlong	local09, objptr
0b158     01 36 06 F1 | 	add	local09, #1
0b15c     F2 36 62 FC | 	wrlong	local09, objptr
0b160     37 00 00 FF 
0b164     44 E4 85 F1 | 	sub	objptr, ##28228
0b168                 | '   ct+=1 											' omit this lpar, this is for expr list
0b168                 | '   do
0b168                 | LR__0933
0b168     37 00 00 FF 
0b16c     44 E4 05 F1 | 	add	objptr, ##28228
0b170     F2 2C 02 FB | 	rdlong	local04, objptr
0b174     01 2C 06 F1 | 	add	local04, #1
0b178     F2 2C 62 FC | 	wrlong	local04, objptr
0b17c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b17c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b17c     03 2C 66 F0 | 	shl	local04, #3
0b180     02 00 00 FF 
0b184     38 E4 85 F1 | 	sub	objptr, ##1080
0b188     F2 2C 02 F1 | 	add	local04, objptr
0b18c     04 2C 06 F1 | 	add	local04, #4
0b190     16 37 02 FB | 	rdlong	local09, local04
0b194     15 36 0E F2 | 	cmp	local09, #21 wz
0b198     35 00 00 FF 
0b19c     0C E4 85 F1 | 	sub	objptr, ##27148
0b1a0     44 00 90 5D |  if_ne	jmp	#LR__0934
0b1a4     37 00 00 FF 
0b1a8     44 E4 05 F1 | 	add	objptr, ##28228
0b1ac     F2 36 02 FB | 	rdlong	local09, objptr
0b1b0     01 36 06 F1 | 	add	local09, #1
0b1b4     F2 36 62 FC | 	wrlong	local09, objptr
0b1b8     37 00 00 FF 
0b1bc     44 E4 85 F1 | 	sub	objptr, ##28228
0b1c0     AC 01 B0 FD | 	call	#_expr
0b1c4     FD 38 02 F6 | 	mov	local10, result1
0b1c8     37 00 00 FF 
0b1cc     44 E4 05 F1 | 	add	objptr, ##28228
0b1d0     F2 36 02 FB | 	rdlong	local09, objptr
0b1d4     01 36 06 F1 | 	add	local09, #1
0b1d8     F2 36 62 FC | 	wrlong	local09, objptr
0b1dc     37 00 00 FF 
0b1e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b1e4     08 00 90 FD | 	jmp	#LR__0935
0b1e8                 | LR__0934
0b1e8     84 01 B0 FD | 	call	#_expr
0b1ec     FD 38 02 F6 | 	mov	local10, result1
0b1f0                 | LR__0935
0b1f0                 | '     if err>0 then return err
0b1f0     01 38 56 F2 | 	cmps	local10, #1 wc
0b1f4     1C FB 01 36 |  if_ae	mov	result1, local10
0b1f8     68 01 90 3D |  if_ae	jmp	#LR__0938
0b1fc     01 34 06 F1 | 	add	local08, #1
0b200     37 00 00 FF 
0b204     44 E4 05 F1 | 	add	objptr, ##28228
0b208     F2 2C 02 FB | 	rdlong	local04, objptr
0b20c     03 2C 66 F0 | 	shl	local04, #3
0b210     02 00 00 FF 
0b214     38 E4 85 F1 | 	sub	objptr, ##1080
0b218     F2 2C 02 F1 | 	add	local04, objptr
0b21c     04 2C 06 F1 | 	add	local04, #4
0b220     16 39 02 FB | 	rdlong	local10, local04
0b224     14 38 0E F2 | 	cmp	local10, #20 wz
0b228     35 00 00 FF 
0b22c     0C E4 85 F1 | 	sub	objptr, ##27148
0b230     34 00 90 AD |  if_e	jmp	#LR__0936
0b234     37 00 00 FF 
0b238     44 E4 05 F1 | 	add	objptr, ##28228
0b23c     F2 38 02 FB | 	rdlong	local10, objptr
0b240     03 38 66 F0 | 	shl	local10, #3
0b244     02 00 00 FF 
0b248     38 E4 85 F1 | 	sub	objptr, ##1080
0b24c     F2 38 02 F1 | 	add	local10, objptr
0b250     04 38 06 F1 | 	add	local10, #4
0b254     1C 39 02 FB | 	rdlong	local10, local10
0b258     FE 39 0E F2 | 	cmp	local10, #510 wz
0b25c     35 00 00 FF 
0b260     0C E4 85 F1 | 	sub	objptr, ##27148
0b264     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0b268                 | LR__0936
0b268                 | '     if lparts(ct).token=token_end then return 14
0b268     37 00 00 FF 
0b26c     44 E4 05 F1 | 	add	objptr, ##28228
0b270     F2 2C 02 FB | 	rdlong	local04, objptr
0b274     03 2C 66 F0 | 	shl	local04, #3
0b278     02 00 00 FF 
0b27c     38 E4 85 F1 | 	sub	objptr, ##1080
0b280     F2 2C 02 F1 | 	add	local04, objptr
0b284     04 2C 06 F1 | 	add	local04, #4
0b288     16 39 02 FB | 	rdlong	local10, local04
0b28c     FE 39 0E F2 | 	cmp	local10, #510 wz
0b290     35 00 00 FF 
0b294     0C E4 85 F1 | 	sub	objptr, ##27148
0b298     0E FA 05 A6 |  if_e	mov	result1, #14
0b29c     C4 00 90 AD |  if_e	jmp	#LR__0938
0b2a0                 | LR__0937
0b2a0     1A 29 02 F6 | 	mov	local02, local08
0b2a4     12 2A 06 F6 | 	mov	local03, #18
0b2a8     18 27 02 F6 | 	mov	local01, local06
0b2ac     13 37 02 F6 | 	mov	local09, local01
0b2b0     14 3B 02 F6 | 	mov	local11, local02
0b2b4     15 27 02 F6 | 	mov	local01, local03
0b2b8     4A 00 00 FF 
0b2bc     7C E4 05 F1 | 	add	objptr, ##38012
0b2c0     F2 38 02 FB | 	rdlong	local10, objptr
0b2c4     1C 35 02 F6 | 	mov	local08, local10
0b2c8     01 34 66 F0 | 	shl	local08, #1
0b2cc     1C 35 02 F1 | 	add	local08, local10
0b2d0     02 34 66 F0 | 	shl	local08, #2
0b2d4     03 00 00 FF 
0b2d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2dc     F2 34 02 F1 | 	add	local08, objptr
0b2e0     1A 37 62 FC | 	wrlong	local09, local08
0b2e4     03 00 00 FF 
0b2e8     00 E4 05 F1 | 	add	objptr, ##1536
0b2ec     F2 38 02 FB | 	rdlong	local10, objptr
0b2f0     1C 37 02 F6 | 	mov	local09, local10
0b2f4     01 36 66 F0 | 	shl	local09, #1
0b2f8     1C 37 02 F1 | 	add	local09, local10
0b2fc     02 36 66 F0 | 	shl	local09, #2
0b300     03 00 00 FF 
0b304     00 E4 85 F1 | 	sub	objptr, ##1536
0b308     F2 36 02 F1 | 	add	local09, objptr
0b30c     04 36 06 F1 | 	add	local09, #4
0b310     1B 3B 62 FC | 	wrlong	local11, local09
0b314     03 00 00 FF 
0b318     00 E4 05 F1 | 	add	objptr, ##1536
0b31c     F2 3A 02 FB | 	rdlong	local11, objptr
0b320     1D 39 02 F6 | 	mov	local10, local11
0b324     01 38 66 F0 | 	shl	local10, #1
0b328     1D 39 02 F1 | 	add	local10, local11
0b32c     02 38 66 F0 | 	shl	local10, #2
0b330     03 00 00 FF 
0b334     00 E4 85 F1 | 	sub	objptr, ##1536
0b338     F2 38 02 F1 | 	add	local10, objptr
0b33c     08 38 06 F1 | 	add	local10, #8
0b340     1C 27 62 FC | 	wrlong	local01, local10
0b344     03 00 00 FF 
0b348     00 E4 05 F1 | 	add	objptr, ##1536
0b34c     F2 36 02 FB | 	rdlong	local09, objptr
0b350     01 36 06 F1 | 	add	local09, #1
0b354     F2 36 62 FC | 	wrlong	local09, objptr
0b358     4A 00 00 FF 
0b35c     7C E4 85 F1 | 	sub	objptr, ##38012
0b360                 | ' t2.result.twowords(1)=numpar
0b360                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b360                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b360                 | ' return 0
0b360     00 FA 05 F6 | 	mov	result1, #0
0b364                 | LR__0938
0b364     A7 F0 03 F6 | 	mov	ptra, fp
0b368     B2 00 A0 FD | 	call	#popregs_
0b36c                 | _getaddr_ret
0b36c     2D 00 64 FD | 	ret
0b370                 | 
0b370                 | ' 
0b370                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '--------------------------------------------- 
0b370                 | ' 
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' 
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '
0b370                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b370                 | ' '
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' 
0b370                 | ' function expr() as ulong 
0b370                 | _expr
0b370     07 4A 05 F6 | 	mov	COUNT_, #7
0b374     A8 00 A0 FD | 	call	#pushregs_
0b378                 | _expr_enter
0b378     37 00 00 FF 
0b37c     44 E4 05 F1 | 	add	objptr, ##28228
0b380     F2 2C 02 FB | 	rdlong	local04, objptr
0b384     03 2C 66 F0 | 	shl	local04, #3
0b388     02 00 00 FF 
0b38c     38 E4 85 F1 | 	sub	objptr, ##1080
0b390     F2 2C 02 F1 | 	add	local04, objptr
0b394     04 2C 06 F1 | 	add	local04, #4
0b398     16 2F 02 FB | 	rdlong	local05, local04
0b39c                 | ' 
0b39c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b39c     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b3a0     35 00 00 FF 
0b3a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b3a8     C4 00 90 5D |  if_ne	jmp	#LR__0940
0b3ac     1D 26 06 F6 | 	mov	local01, #29
0b3b0     FF 2A 06 F6 | 	mov	local03, #255
0b3b4     13 31 02 F6 | 	mov	local06, local01
0b3b8     14 33 02 F6 | 	mov	local07, local02
0b3bc     15 27 02 F6 | 	mov	local01, local03
0b3c0     4A 00 00 FF 
0b3c4     7C E4 05 F1 | 	add	objptr, ##38012
0b3c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b3cc     17 2D 02 F6 | 	mov	local04, local05
0b3d0     01 2C 66 F0 | 	shl	local04, #1
0b3d4     17 2D 02 F1 | 	add	local04, local05
0b3d8     02 2C 66 F0 | 	shl	local04, #2
0b3dc     03 00 00 FF 
0b3e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e4     F2 2C 02 F1 | 	add	local04, objptr
0b3e8     16 31 62 FC | 	wrlong	local06, local04
0b3ec     03 00 00 FF 
0b3f0     00 E4 05 F1 | 	add	objptr, ##1536
0b3f4     F2 30 02 FB | 	rdlong	local06, objptr
0b3f8     18 2F 02 F6 | 	mov	local05, local06
0b3fc     01 2E 66 F0 | 	shl	local05, #1
0b400     18 2F 02 F1 | 	add	local05, local06
0b404     02 2E 66 F0 | 	shl	local05, #2
0b408     03 00 00 FF 
0b40c     00 E4 85 F1 | 	sub	objptr, ##1536
0b410     F2 2E 02 F1 | 	add	local05, objptr
0b414     04 2E 06 F1 | 	add	local05, #4
0b418     17 33 62 FC | 	wrlong	local07, local05
0b41c     03 00 00 FF 
0b420     00 E4 05 F1 | 	add	objptr, ##1536
0b424     F2 32 02 FB | 	rdlong	local07, objptr
0b428     19 31 02 F6 | 	mov	local06, local07
0b42c     01 30 66 F0 | 	shl	local06, #1
0b430     19 31 02 F1 | 	add	local06, local07
0b434     02 30 66 F0 | 	shl	local06, #2
0b438     03 00 00 FF 
0b43c     00 E4 85 F1 | 	sub	objptr, ##1536
0b440     F2 30 02 F1 | 	add	local06, objptr
0b444     08 30 06 F1 | 	add	local06, #8
0b448     18 27 62 FC | 	wrlong	local01, local06
0b44c     03 00 00 FF 
0b450     00 E4 05 F1 | 	add	objptr, ##1536
0b454     F2 30 02 FB | 	rdlong	local06, objptr
0b458     01 30 06 F1 | 	add	local06, #1
0b45c     F2 30 62 FC | 	wrlong	local06, objptr
0b460     4A 00 00 FF 
0b464     7C E4 85 F1 | 	sub	objptr, ##38012
0b468     1D FA 05 F6 | 	mov	result1, #29
0b46c     64 01 90 FD | 	jmp	#LR__0943
0b470                 | LR__0940
0b470     00 26 06 F6 | 	mov	local01, #0
0b474     68 01 B0 FD | 	call	#_addsub
0b478                 | ' t3.result.uresult=0
0b478                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b478                 | ' if err>0 then return err
0b478     01 FA 15 F2 | 	cmp	result1, #1 wc
0b47c     54 01 90 3D |  if_ae	jmp	#LR__0943
0b480     37 00 00 FF 
0b484     44 E4 05 F1 | 	add	objptr, ##28228
0b488     F2 2C 02 FB | 	rdlong	local04, objptr
0b48c     03 2C 66 F0 | 	shl	local04, #3
0b490     02 00 00 FF 
0b494     38 E4 85 F1 | 	sub	objptr, ##1080
0b498     F2 2C 02 F1 | 	add	local04, objptr
0b49c     04 2C 06 F1 | 	add	local04, #4
0b4a0     16 2F 02 FB | 	rdlong	local05, local04
0b4a4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b4a4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b4a4     35 00 00 FF 
0b4a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b4ac                 | LR__0941
0b4ac     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b4b0     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b4b4     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b4b8     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b4bc     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b4c0     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b4c4     08 01 90 5D |  if_ne	jmp	#LR__0942
0b4c8     37 00 00 FF 
0b4cc     44 E4 05 F1 | 	add	objptr, ##28228
0b4d0     F2 30 02 FB | 	rdlong	local06, objptr
0b4d4     01 30 06 F1 | 	add	local06, #1
0b4d8     F2 30 62 FC | 	wrlong	local06, objptr
0b4dc     37 00 00 FF 
0b4e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b4e4     F8 00 B0 FD | 	call	#_addsub
0b4e8                 | '   ct+=1
0b4e8                 | '   err=addsub() : if err>0 then return err
0b4e8     01 FA 15 F2 | 	cmp	result1, #1 wc
0b4ec     E4 00 90 3D |  if_ae	jmp	#LR__0943
0b4f0     17 2B 02 F6 | 	mov	local03, local05
0b4f4     13 31 02 F6 | 	mov	local06, local01
0b4f8     14 33 02 F6 | 	mov	local07, local02
0b4fc     15 2F 02 F6 | 	mov	local05, local03
0b500     4A 00 00 FF 
0b504     7C E4 05 F1 | 	add	objptr, ##38012
0b508     F2 2C 02 FB | 	rdlong	local04, objptr
0b50c     16 FB 01 F6 | 	mov	result1, local04
0b510     01 FA 65 F0 | 	shl	result1, #1
0b514     16 FB 01 F1 | 	add	result1, local04
0b518     02 FA 65 F0 | 	shl	result1, #2
0b51c     03 00 00 FF 
0b520     00 E4 85 F1 | 	sub	objptr, ##1536
0b524     F2 FA 01 F1 | 	add	result1, objptr
0b528     FD 30 62 FC | 	wrlong	local06, result1
0b52c     03 00 00 FF 
0b530     00 E4 05 F1 | 	add	objptr, ##1536
0b534     F2 30 02 FB | 	rdlong	local06, objptr
0b538     18 2D 02 F6 | 	mov	local04, local06
0b53c     01 2C 66 F0 | 	shl	local04, #1
0b540     18 2D 02 F1 | 	add	local04, local06
0b544     02 2C 66 F0 | 	shl	local04, #2
0b548     03 00 00 FF 
0b54c     00 E4 85 F1 | 	sub	objptr, ##1536
0b550     F2 2C 02 F1 | 	add	local04, objptr
0b554     04 2C 06 F1 | 	add	local04, #4
0b558     16 33 62 FC | 	wrlong	local07, local04
0b55c     03 00 00 FF 
0b560     00 E4 05 F1 | 	add	objptr, ##1536
0b564     F2 32 02 FB | 	rdlong	local07, objptr
0b568     19 31 02 F6 | 	mov	local06, local07
0b56c     01 30 66 F0 | 	shl	local06, #1
0b570     19 31 02 F1 | 	add	local06, local07
0b574     02 30 66 F0 | 	shl	local06, #2
0b578     03 00 00 FF 
0b57c     00 E4 85 F1 | 	sub	objptr, ##1536
0b580     F2 30 02 F1 | 	add	local06, objptr
0b584     08 30 06 F1 | 	add	local06, #8
0b588     18 2F 62 FC | 	wrlong	local05, local06
0b58c     03 00 00 FF 
0b590     00 E4 05 F1 | 	add	objptr, ##1536
0b594     F2 30 02 FB | 	rdlong	local06, objptr
0b598     01 30 06 F1 | 	add	local06, #1
0b59c     F2 30 62 FC | 	wrlong	local06, objptr
0b5a0     13 00 00 FF 
0b5a4     38 E4 85 F1 | 	sub	objptr, ##9784
0b5a8     F2 2C 02 FB | 	rdlong	local04, objptr
0b5ac     03 2C 66 F0 | 	shl	local04, #3
0b5b0     02 00 00 FF 
0b5b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b5b8     F2 2C 02 F1 | 	add	local04, objptr
0b5bc     04 2C 06 F1 | 	add	local04, #4
0b5c0     16 2F 02 FB | 	rdlong	local05, local04
0b5c4     35 00 00 FF 
0b5c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b5cc     DC FE 9F FD | 	jmp	#LR__0941
0b5d0                 | LR__0942
0b5d0                 | ' return 0  
0b5d0     00 FA 05 F6 | 	mov	result1, #0
0b5d4                 | LR__0943
0b5d4     A7 F0 03 F6 | 	mov	ptra, fp
0b5d8     B2 00 A0 FD | 	call	#popregs_
0b5dc                 | _expr_ret
0b5dc     2D 00 64 FD | 	ret
0b5e0                 | 
0b5e0                 | ' 
0b5e0                 | ' ' Second level operators : add, sub, logic
0b5e0                 | ' 
0b5e0                 | ' function addsub() as ulong
0b5e0                 | _addsub
0b5e0     07 4A 05 F6 | 	mov	COUNT_, #7
0b5e4     A8 00 A0 FD | 	call	#pushregs_
0b5e8                 | _addsub_enter
0b5e8     00 26 06 F6 | 	mov	local01, #0
0b5ec     60 01 B0 FD | 	call	#_muldiv
0b5f0                 | ' 
0b5f0                 | ' t3.result.uresult=0
0b5f0                 | ' err=muldiv() : if err>0 then return err           			 
0b5f0     01 FA 15 F2 | 	cmp	result1, #1 wc
0b5f4     4C 01 90 3D |  if_ae	jmp	#LR__0952
0b5f8     37 00 00 FF 
0b5fc     44 E4 05 F1 | 	add	objptr, ##28228
0b600     F2 2C 02 FB | 	rdlong	local04, objptr
0b604     03 2C 66 F0 | 	shl	local04, #3
0b608     02 00 00 FF 
0b60c     38 E4 85 F1 | 	sub	objptr, ##1080
0b610     F2 2C 02 F1 | 	add	local04, objptr
0b614     04 2C 06 F1 | 	add	local04, #4
0b618     16 2F 02 FB | 	rdlong	local05, local04
0b61c                 | ' op = lparts(ct).token				 
0b61c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b61c     35 00 00 FF 
0b620     0C E4 85 F1 | 	sub	objptr, ##27148
0b624                 | LR__0950
0b624     01 2E 0E F2 | 	cmp	local05, #1 wz
0b628     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b62c     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b630     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b634     08 01 90 5D |  if_ne	jmp	#LR__0951
0b638     37 00 00 FF 
0b63c     44 E4 05 F1 | 	add	objptr, ##28228
0b640     F2 2C 02 FB | 	rdlong	local04, objptr
0b644     01 2C 06 F1 | 	add	local04, #1
0b648     F2 2C 62 FC | 	wrlong	local04, objptr
0b64c     37 00 00 FF 
0b650     44 E4 85 F1 | 	sub	objptr, ##28228
0b654     F8 00 B0 FD | 	call	#_muldiv
0b658                 | '   ct+=1
0b658                 | '   err=muldiv() : if err>0 then return err   
0b658     01 FA 15 F2 | 	cmp	result1, #1 wc
0b65c     E4 00 90 3D |  if_ae	jmp	#LR__0952
0b660     17 2B 02 F6 | 	mov	local03, local05
0b664     13 31 02 F6 | 	mov	local06, local01
0b668     14 33 02 F6 | 	mov	local07, local02
0b66c     15 2F 02 F6 | 	mov	local05, local03
0b670     4A 00 00 FF 
0b674     7C E4 05 F1 | 	add	objptr, ##38012
0b678     F2 2C 02 FB | 	rdlong	local04, objptr
0b67c     16 FB 01 F6 | 	mov	result1, local04
0b680     01 FA 65 F0 | 	shl	result1, #1
0b684     16 FB 01 F1 | 	add	result1, local04
0b688     02 FA 65 F0 | 	shl	result1, #2
0b68c     03 00 00 FF 
0b690     00 E4 85 F1 | 	sub	objptr, ##1536
0b694     F2 FA 01 F1 | 	add	result1, objptr
0b698     FD 30 62 FC | 	wrlong	local06, result1
0b69c     03 00 00 FF 
0b6a0     00 E4 05 F1 | 	add	objptr, ##1536
0b6a4     F2 30 02 FB | 	rdlong	local06, objptr
0b6a8     18 2D 02 F6 | 	mov	local04, local06
0b6ac     01 2C 66 F0 | 	shl	local04, #1
0b6b0     18 2D 02 F1 | 	add	local04, local06
0b6b4     02 2C 66 F0 | 	shl	local04, #2
0b6b8     03 00 00 FF 
0b6bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b6c0     F2 2C 02 F1 | 	add	local04, objptr
0b6c4     04 2C 06 F1 | 	add	local04, #4
0b6c8     16 33 62 FC | 	wrlong	local07, local04
0b6cc     03 00 00 FF 
0b6d0     00 E4 05 F1 | 	add	objptr, ##1536
0b6d4     F2 32 02 FB | 	rdlong	local07, objptr
0b6d8     19 31 02 F6 | 	mov	local06, local07
0b6dc     01 30 66 F0 | 	shl	local06, #1
0b6e0     19 31 02 F1 | 	add	local06, local07
0b6e4     02 30 66 F0 | 	shl	local06, #2
0b6e8     03 00 00 FF 
0b6ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b6f0     F2 30 02 F1 | 	add	local06, objptr
0b6f4     08 30 06 F1 | 	add	local06, #8
0b6f8     18 2F 62 FC | 	wrlong	local05, local06
0b6fc     03 00 00 FF 
0b700     00 E4 05 F1 | 	add	objptr, ##1536
0b704     F2 30 02 FB | 	rdlong	local06, objptr
0b708     01 30 06 F1 | 	add	local06, #1
0b70c     F2 30 62 FC | 	wrlong	local06, objptr
0b710     13 00 00 FF 
0b714     38 E4 85 F1 | 	sub	objptr, ##9784
0b718     F2 2C 02 FB | 	rdlong	local04, objptr
0b71c     03 2C 66 F0 | 	shl	local04, #3
0b720     02 00 00 FF 
0b724     38 E4 85 F1 | 	sub	objptr, ##1080
0b728     F2 2C 02 F1 | 	add	local04, objptr
0b72c     04 2C 06 F1 | 	add	local04, #4
0b730     16 2F 02 FB | 	rdlong	local05, local04
0b734     35 00 00 FF 
0b738     0C E4 85 F1 | 	sub	objptr, ##27148
0b73c     E4 FE 9F FD | 	jmp	#LR__0950
0b740                 | LR__0951
0b740                 | ' return 0
0b740     00 FA 05 F6 | 	mov	result1, #0
0b744                 | LR__0952
0b744     A7 F0 03 F6 | 	mov	ptra, fp
0b748     B2 00 A0 FD | 	call	#popregs_
0b74c                 | _addsub_ret
0b74c     2D 00 64 FD | 	ret
0b750                 | 
0b750                 | ' 
0b750                 | ' ' Third level operators : mul,div,shift,power
0b750                 | ' 
0b750                 | ' function muldiv() as ulong
0b750                 | _muldiv
0b750     07 4A 05 F6 | 	mov	COUNT_, #7
0b754     A8 00 A0 FD | 	call	#pushregs_
0b758                 | _muldiv_enter
0b758     00 26 06 F6 | 	mov	local01, #0
0b75c     6C 01 B0 FD | 	call	#_getvalue
0b760                 | ' 
0b760                 | ' t3.result.uresult=0
0b760                 | ' err=getvalue() : if err>0 then return err     
0b760     01 FA 15 F2 | 	cmp	result1, #1 wc
0b764     58 01 90 3D |  if_ae	jmp	#LR__0962
0b768     37 00 00 FF 
0b76c     44 E4 05 F1 | 	add	objptr, ##28228
0b770     F2 2C 02 FB | 	rdlong	local04, objptr
0b774     03 2C 66 F0 | 	shl	local04, #3
0b778     02 00 00 FF 
0b77c     38 E4 85 F1 | 	sub	objptr, ##1080
0b780     F2 2C 02 F1 | 	add	local04, objptr
0b784     04 2C 06 F1 | 	add	local04, #4
0b788     16 2F 02 FB | 	rdlong	local05, local04
0b78c                 | ' op = lparts(ct).token
0b78c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b78c     35 00 00 FF 
0b790     0C E4 85 F1 | 	sub	objptr, ##27148
0b794                 | LR__0960
0b794     05 2E 0E F2 | 	cmp	local05, #5 wz
0b798     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b79c     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b7a0     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b7a4     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b7a8     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b7ac     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b7b0     08 01 90 5D |  if_ne	jmp	#LR__0961
0b7b4     37 00 00 FF 
0b7b8     44 E4 05 F1 | 	add	objptr, ##28228
0b7bc     F2 2C 02 FB | 	rdlong	local04, objptr
0b7c0     01 2C 06 F1 | 	add	local04, #1
0b7c4     F2 2C 62 FC | 	wrlong	local04, objptr
0b7c8     37 00 00 FF 
0b7cc     44 E4 85 F1 | 	sub	objptr, ##28228
0b7d0     F8 00 B0 FD | 	call	#_getvalue
0b7d4                 | '   ct+=1
0b7d4                 | '   err=getvalue() :if err>0 then return err   
0b7d4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b7d8     E4 00 90 3D |  if_ae	jmp	#LR__0962
0b7dc     17 2B 02 F6 | 	mov	local03, local05
0b7e0     13 31 02 F6 | 	mov	local06, local01
0b7e4     14 33 02 F6 | 	mov	local07, local02
0b7e8     15 2F 02 F6 | 	mov	local05, local03
0b7ec     4A 00 00 FF 
0b7f0     7C E4 05 F1 | 	add	objptr, ##38012
0b7f4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7f8     16 FB 01 F6 | 	mov	result1, local04
0b7fc     01 FA 65 F0 | 	shl	result1, #1
0b800     16 FB 01 F1 | 	add	result1, local04
0b804     02 FA 65 F0 | 	shl	result1, #2
0b808     03 00 00 FF 
0b80c     00 E4 85 F1 | 	sub	objptr, ##1536
0b810     F2 FA 01 F1 | 	add	result1, objptr
0b814     FD 30 62 FC | 	wrlong	local06, result1
0b818     03 00 00 FF 
0b81c     00 E4 05 F1 | 	add	objptr, ##1536
0b820     F2 30 02 FB | 	rdlong	local06, objptr
0b824     18 2D 02 F6 | 	mov	local04, local06
0b828     01 2C 66 F0 | 	shl	local04, #1
0b82c     18 2D 02 F1 | 	add	local04, local06
0b830     02 2C 66 F0 | 	shl	local04, #2
0b834     03 00 00 FF 
0b838     00 E4 85 F1 | 	sub	objptr, ##1536
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     04 2C 06 F1 | 	add	local04, #4
0b844     16 33 62 FC | 	wrlong	local07, local04
0b848     03 00 00 FF 
0b84c     00 E4 05 F1 | 	add	objptr, ##1536
0b850     F2 32 02 FB | 	rdlong	local07, objptr
0b854     19 31 02 F6 | 	mov	local06, local07
0b858     01 30 66 F0 | 	shl	local06, #1
0b85c     19 31 02 F1 | 	add	local06, local07
0b860     02 30 66 F0 | 	shl	local06, #2
0b864     03 00 00 FF 
0b868     00 E4 85 F1 | 	sub	objptr, ##1536
0b86c     F2 30 02 F1 | 	add	local06, objptr
0b870     08 30 06 F1 | 	add	local06, #8
0b874     18 2F 62 FC | 	wrlong	local05, local06
0b878     03 00 00 FF 
0b87c     00 E4 05 F1 | 	add	objptr, ##1536
0b880     F2 30 02 FB | 	rdlong	local06, objptr
0b884     01 30 06 F1 | 	add	local06, #1
0b888     F2 30 62 FC | 	wrlong	local06, objptr
0b88c     13 00 00 FF 
0b890     38 E4 85 F1 | 	sub	objptr, ##9784
0b894     F2 2C 02 FB | 	rdlong	local04, objptr
0b898     03 2C 66 F0 | 	shl	local04, #3
0b89c     02 00 00 FF 
0b8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0b8a4     F2 2C 02 F1 | 	add	local04, objptr
0b8a8     04 2C 06 F1 | 	add	local04, #4
0b8ac     16 2F 02 FB | 	rdlong	local05, local04
0b8b0     35 00 00 FF 
0b8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b8b8     D8 FE 9F FD | 	jmp	#LR__0960
0b8bc                 | LR__0961
0b8bc                 | ' return 0
0b8bc     00 FA 05 F6 | 	mov	result1, #0
0b8c0                 | LR__0962
0b8c0     A7 F0 03 F6 | 	mov	ptra, fp
0b8c4     B2 00 A0 FD | 	call	#popregs_
0b8c8                 | _muldiv_ret
0b8c8     2D 00 64 FD | 	ret
0b8cc                 | 
0b8cc                 | ' 
0b8cc                 | ' ' Get a value for operations
0b8cc                 | ' 
0b8cc                 | ' function getvalue()  as ulong
0b8cc                 | _getvalue
0b8cc     0B 4A 05 F6 | 	mov	COUNT_, #11
0b8d0     A8 00 A0 FD | 	call	#pushregs_
0b8d4                 | _getvalue_enter
0b8d4     01 2C 06 F6 | 	mov	local04, #1
0b8d8     00 26 06 F6 | 	mov	local01, #0
0b8dc     1D 2A 06 F6 | 	mov	local03, #29
0b8e0     37 00 00 FF 
0b8e4     44 E4 05 F1 | 	add	objptr, ##28228
0b8e8     F2 16 02 FB | 	rdlong	arg03, objptr
0b8ec     03 16 66 F0 | 	shl	arg03, #3
0b8f0     02 00 00 FF 
0b8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b8f8     F2 16 02 F1 | 	add	arg03, objptr
0b8fc     04 16 06 F1 | 	add	arg03, #4
0b900     0B 2F 02 FB | 	rdlong	local05, arg03
0b904                 | ' 
0b904                 | ' m=1											' for negative numbers
0b904                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b904                 | ' op=lparts(ct).token
0b904                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b904     02 2E 0E F2 | 	cmp	local05, #2 wz
0b908     35 00 00 FF 
0b90c     0C E4 85 F1 | 	sub	objptr, ##27148
0b910     38 00 90 5D |  if_ne	jmp	#LR__0970
0b914     01 2C 66 F6 | 	neg	local04, #1
0b918     37 00 00 FF 
0b91c     44 E4 05 F1 | 	add	objptr, ##28228
0b920     F2 2E 02 FB | 	rdlong	local05, objptr
0b924     01 2E 06 F1 | 	add	local05, #1
0b928     F2 2E 62 FC | 	wrlong	local05, objptr
0b92c     03 2E 66 F0 | 	shl	local05, #3
0b930     02 00 00 FF 
0b934     38 E4 85 F1 | 	sub	objptr, ##1080
0b938     F2 2E 02 F1 | 	add	local05, objptr
0b93c     04 2E 06 F1 | 	add	local05, #4
0b940     17 2F 02 FB | 	rdlong	local05, local05
0b944     35 00 00 FF 
0b948     0C E4 85 F1 | 	sub	objptr, ##27148
0b94c                 | LR__0970
0b94c                 | ' select case op
0b94c     01 00 00 FF 
0b950     00 2E 0E F2 | 	cmp	local05, ##512 wz
0b954     44 00 90 AD |  if_e	jmp	#LR__0971
0b958     01 00 00 FF 
0b95c     01 2E 0E F2 | 	cmp	local05, ##513 wz
0b960     90 01 90 AD |  if_e	jmp	#LR__0974
0b964     01 00 00 FF 
0b968     02 2E 0E F2 | 	cmp	local05, ##514 wz
0b96c     44 04 90 AD |  if_e	jmp	#LR__0981
0b970     01 00 00 FF 
0b974     03 2E 0E F2 | 	cmp	local05, ##515 wz
0b978     A8 05 90 AD |  if_e	jmp	#LR__0984
0b97c     2C 2E 0E F2 | 	cmp	local05, #44 wz
0b980     78 07 90 AD |  if_e	jmp	#LR__0989
0b984     01 00 00 FF 
0b988     04 2E 0E F2 | 	cmp	local05, ##516 wz
0b98c     70 08 90 AD |  if_e	jmp	#LR__0990
0b990     15 2E 0E F2 | 	cmp	local05, #21 wz
0b994     98 08 90 AD |  if_e	jmp	#LR__0991
0b998     10 09 90 FD | 	jmp	#LR__0992
0b99c                 | LR__0971
0b99c                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0b99c     01 2C 0E F2 | 	cmp	local04, #1 wz
0b9a0     3C 00 90 5D |  if_ne	jmp	#LR__0972
0b9a4     37 00 00 FF 
0b9a8     44 E4 05 F1 | 	add	objptr, ##28228
0b9ac     F2 2E 02 FB | 	rdlong	local05, objptr
0b9b0     03 2E 66 F0 | 	shl	local05, #3
0b9b4     02 00 00 FF 
0b9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0b9bc     F2 2E 02 F1 | 	add	local05, objptr
0b9c0     17 13 02 FB | 	rdlong	arg01, local05
0b9c4     00 14 06 F6 | 	mov	arg02, #0
0b9c8     35 00 00 FF 
0b9cc     0C E4 85 F1 | 	sub	objptr, ##27148
0b9d0     F4 C9 B1 FD | 	call	#__system____builtin_atoi
0b9d4     FD 2C 02 FD | 	qmul	local04, result1
0b9d8     18 26 62 FD | 	getqx	local01
0b9dc     1C 2A 06 F6 | 	mov	local03, #28
0b9e0                 | LR__0972
0b9e0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0b9e0     FF FF 7F FF 
0b9e4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b9e8     3C 00 90 5D |  if_ne	jmp	#LR__0973
0b9ec     37 00 00 FF 
0b9f0     44 E4 05 F1 | 	add	objptr, ##28228
0b9f4     F2 2E 02 FB | 	rdlong	local05, objptr
0b9f8     03 2E 66 F0 | 	shl	local05, #3
0b9fc     02 00 00 FF 
0ba00     38 E4 85 F1 | 	sub	objptr, ##1080
0ba04     F2 2E 02 F1 | 	add	local05, objptr
0ba08     17 13 02 FB | 	rdlong	arg01, local05
0ba0c     00 14 06 F6 | 	mov	arg02, #0
0ba10     35 00 00 FF 
0ba14     0C E4 85 F1 | 	sub	objptr, ##27148
0ba18     AC C9 B1 FD | 	call	#__system____builtin_atoi
0ba1c     FD 2C 02 FD | 	qmul	local04, result1
0ba20     18 26 62 FD | 	getqx	local01
0ba24     1C 2A 06 F6 | 	mov	local03, #28
0ba28                 | LR__0973
0ba28     13 31 02 F6 | 	mov	local06, local01
0ba2c     14 33 02 F6 | 	mov	local07, local02
0ba30     15 2F 02 F6 | 	mov	local05, local03
0ba34     4A 00 00 FF 
0ba38     7C E4 05 F1 | 	add	objptr, ##38012
0ba3c     F2 26 02 FB | 	rdlong	local01, objptr
0ba40     13 2D 02 F6 | 	mov	local04, local01
0ba44     01 2C 66 F0 | 	shl	local04, #1
0ba48     13 2D 02 F1 | 	add	local04, local01
0ba4c     02 2C 66 F0 | 	shl	local04, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 2C 02 F1 | 	add	local04, objptr
0ba5c     16 31 62 FC | 	wrlong	local06, local04
0ba60     03 00 00 FF 
0ba64     00 E4 05 F1 | 	add	objptr, ##1536
0ba68     F2 30 02 FB | 	rdlong	local06, objptr
0ba6c     18 27 02 F6 | 	mov	local01, local06
0ba70     01 26 66 F0 | 	shl	local01, #1
0ba74     18 27 02 F1 | 	add	local01, local06
0ba78     02 26 66 F0 | 	shl	local01, #2
0ba7c     03 00 00 FF 
0ba80     00 E4 85 F1 | 	sub	objptr, ##1536
0ba84     F2 26 02 F1 | 	add	local01, objptr
0ba88     04 26 06 F1 | 	add	local01, #4
0ba8c     13 33 62 FC | 	wrlong	local07, local01
0ba90     03 00 00 FF 
0ba94     00 E4 05 F1 | 	add	objptr, ##1536
0ba98     F2 32 02 FB | 	rdlong	local07, objptr
0ba9c     19 31 02 F6 | 	mov	local06, local07
0baa0     01 30 66 F0 | 	shl	local06, #1
0baa4     19 31 02 F1 | 	add	local06, local07
0baa8     02 30 66 F0 | 	shl	local06, #2
0baac     03 00 00 FF 
0bab0     00 E4 85 F1 | 	sub	objptr, ##1536
0bab4     F2 30 02 F1 | 	add	local06, objptr
0bab8     08 30 06 F1 | 	add	local06, #8
0babc     18 2F 62 FC | 	wrlong	local05, local06
0bac0     03 00 00 FF 
0bac4     00 E4 05 F1 | 	add	objptr, ##1536
0bac8     F2 30 02 FB | 	rdlong	local06, objptr
0bacc     01 30 06 F1 | 	add	local06, #1
0bad0     F2 30 62 FC | 	wrlong	local06, objptr
0bad4     13 00 00 FF 
0bad8     38 E4 85 F1 | 	sub	objptr, ##9784
0badc     F2 30 02 FB | 	rdlong	local06, objptr
0bae0     01 30 06 F1 | 	add	local06, #1
0bae4     F2 30 62 FC | 	wrlong	local06, objptr
0bae8     37 00 00 FF 
0baec     44 E4 85 F1 | 	sub	objptr, ##28228
0baf0     E4 07 90 FD | 	jmp	#LR__0993
0baf4                 | LR__0974
0baf4                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0baf4     37 00 00 FF 
0baf8     44 E4 05 F1 | 	add	objptr, ##28228
0bafc     F2 16 02 FB | 	rdlong	arg03, objptr
0bb00     03 16 66 F0 | 	shl	arg03, #3
0bb04     02 00 00 FF 
0bb08     38 E4 85 F1 | 	sub	objptr, ##1080
0bb0c     F2 16 02 F1 | 	add	arg03, objptr
0bb10     0B 13 02 FB | 	rdlong	arg01, arg03
0bb14     01 14 06 F6 | 	mov	arg02, #1
0bb18     35 00 00 FF 
0bb1c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb20     30 B4 B1 FD | 	call	#__system__Left_S
0bb24     FD 12 02 F6 | 	mov	arg01, result1
0bb28     A8 01 00 FF 
0bb2c     08 15 06 F6 | 	mov	arg02, ##@LR__5753
0bb30     C8 93 B1 FD | 	call	#__system___string_cmp
0bb34     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb38     94 00 90 5D |  if_ne	jmp	#LR__0977
0bb3c     37 00 00 FF 
0bb40     44 E4 05 F1 | 	add	objptr, ##28228
0bb44     F2 32 02 FB | 	rdlong	local07, objptr
0bb48     19 31 02 F6 | 	mov	local06, local07
0bb4c     03 30 66 F0 | 	shl	local06, #3
0bb50     02 00 00 FF 
0bb54     38 E4 85 F1 | 	sub	objptr, ##1080
0bb58     F2 30 02 F1 | 	add	local06, objptr
0bb5c     A8 01 00 FF 
0bb60     0A 2F 06 F6 | 	mov	local05, ##@LR__5754
0bb64     03 32 66 F0 | 	shl	local07, #3
0bb68     F2 32 02 F1 | 	add	local07, objptr
0bb6c     19 33 02 FB | 	rdlong	local07, local07
0bb70     02 00 00 FF 
0bb74     38 E4 05 F1 | 	add	objptr, ##1080
0bb78     F2 26 02 FB | 	rdlong	local01, objptr
0bb7c     03 26 66 F0 | 	shl	local01, #3
0bb80     02 00 00 FF 
0bb84     38 E4 85 F1 | 	sub	objptr, ##1080
0bb88     F2 26 02 F1 | 	add	local01, objptr
0bb8c     13 13 02 FB | 	rdlong	arg01, local01
0bb90     35 00 00 FF 
0bb94     0C E4 85 F1 | 	sub	objptr, ##27148
0bb98     09 35 02 F6 | 	mov	local08, arg01
0bb9c     97 06 48 FB | 	callpa	#(@LR__0976-@LR__0975)>>2,fcache_load_ptr_
0bba0                 | LR__0975
0bba0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bba4     01 34 06 51 |  if_ne	add	local08, #1
0bba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0975
0bbac                 | LR__0976
0bbac     09 35 82 F1 | 	sub	local08, arg01
0bbb0     1A 15 02 F6 | 	mov	arg02, local08
0bbb4     01 14 86 F1 | 	sub	arg02, #1
0bbb8     19 13 02 F6 | 	mov	arg01, local07
0bbbc     1C B4 B1 FD | 	call	#__system__Right_S
0bbc0     FD 14 02 F6 | 	mov	arg02, result1
0bbc4     17 13 02 F6 | 	mov	arg01, local05
0bbc8     64 93 B1 FD | 	call	#__system___string_concat
0bbcc     18 FB 61 FC | 	wrlong	result1, local06
0bbd0                 | LR__0977
0bbd0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bbd0     37 00 00 FF 
0bbd4     44 E4 05 F1 | 	add	objptr, ##28228
0bbd8     F2 16 02 FB | 	rdlong	arg03, objptr
0bbdc     03 16 66 F0 | 	shl	arg03, #3
0bbe0     02 00 00 FF 
0bbe4     38 E4 85 F1 | 	sub	objptr, ##1080
0bbe8     F2 16 02 F1 | 	add	arg03, objptr
0bbec     0B 13 02 FB | 	rdlong	arg01, arg03
0bbf0     01 14 06 F6 | 	mov	arg02, #1
0bbf4     35 00 00 FF 
0bbf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bbfc     54 B3 B1 FD | 	call	#__system__Left_S
0bc00     FD 12 02 F6 | 	mov	arg01, result1
0bc04     A8 01 00 FF 
0bc08     0D 15 06 F6 | 	mov	arg02, ##@LR__5755
0bc0c     EC 92 B1 FD | 	call	#__system___string_cmp
0bc10     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc14     94 00 90 5D |  if_ne	jmp	#LR__0980
0bc18     37 00 00 FF 
0bc1c     44 E4 05 F1 | 	add	objptr, ##28228
0bc20     F2 32 02 FB | 	rdlong	local07, objptr
0bc24     19 31 02 F6 | 	mov	local06, local07
0bc28     03 30 66 F0 | 	shl	local06, #3
0bc2c     02 00 00 FF 
0bc30     38 E4 85 F1 | 	sub	objptr, ##1080
0bc34     F2 30 02 F1 | 	add	local06, objptr
0bc38     A8 01 00 FF 
0bc3c     0F 2F 06 F6 | 	mov	local05, ##@LR__5756
0bc40     03 32 66 F0 | 	shl	local07, #3
0bc44     F2 32 02 F1 | 	add	local07, objptr
0bc48     19 33 02 FB | 	rdlong	local07, local07
0bc4c     02 00 00 FF 
0bc50     38 E4 05 F1 | 	add	objptr, ##1080
0bc54     F2 26 02 FB | 	rdlong	local01, objptr
0bc58     03 26 66 F0 | 	shl	local01, #3
0bc5c     02 00 00 FF 
0bc60     38 E4 85 F1 | 	sub	objptr, ##1080
0bc64     F2 26 02 F1 | 	add	local01, objptr
0bc68     13 13 02 FB | 	rdlong	arg01, local01
0bc6c     35 00 00 FF 
0bc70     0C E4 85 F1 | 	sub	objptr, ##27148
0bc74     09 35 02 F6 | 	mov	local08, arg01
0bc78     97 06 48 FB | 	callpa	#(@LR__0979-@LR__0978)>>2,fcache_load_ptr_
0bc7c                 | LR__0978
0bc7c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bc80     01 34 06 51 |  if_ne	add	local08, #1
0bc84     F4 FF 9F 5D |  if_ne	jmp	#LR__0978
0bc88                 | LR__0979
0bc88     09 35 82 F1 | 	sub	local08, arg01
0bc8c     1A 15 02 F6 | 	mov	arg02, local08
0bc90     01 14 86 F1 | 	sub	arg02, #1
0bc94     19 13 02 F6 | 	mov	arg01, local07
0bc98     40 B3 B1 FD | 	call	#__system__Right_S
0bc9c     FD 14 02 F6 | 	mov	arg02, result1
0bca0     17 13 02 F6 | 	mov	arg01, local05
0bca4     88 92 B1 FD | 	call	#__system___string_concat
0bca8     18 FB 61 FC | 	wrlong	result1, local06
0bcac                 | LR__0980
0bcac     37 00 00 FF 
0bcb0     44 E4 05 F1 | 	add	objptr, ##28228
0bcb4     F2 30 02 FB | 	rdlong	local06, objptr
0bcb8     03 30 66 F0 | 	shl	local06, #3
0bcbc     02 00 00 FF 
0bcc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bcc4     F2 30 02 F1 | 	add	local06, objptr
0bcc8     18 13 02 FB | 	rdlong	arg01, local06
0bccc     00 14 06 F6 | 	mov	arg02, #0
0bcd0     35 00 00 FF 
0bcd4     0C E4 85 F1 | 	sub	objptr, ##27148
0bcd8     EC C6 B1 FD | 	call	#__system____builtin_atoi
0bcdc     FD 2C 02 FD | 	qmul	local04, result1
0bce0     4A 00 00 FF 
0bce4     7C E4 05 F1 | 	add	objptr, ##38012
0bce8     F2 30 02 FB | 	rdlong	local06, objptr
0bcec     18 37 02 F6 | 	mov	local09, local06
0bcf0     01 36 66 F0 | 	shl	local09, #1
0bcf4     18 37 02 F1 | 	add	local09, local06
0bcf8     02 36 66 F0 | 	shl	local09, #2
0bcfc     03 00 00 FF 
0bd00     00 E4 85 F1 | 	sub	objptr, ##1536
0bd04     F2 36 02 F1 | 	add	local09, objptr
0bd08     03 00 00 FF 
0bd0c     00 E4 05 F1 | 	add	objptr, ##1536
0bd10     18 26 62 FD | 	getqx	local01
0bd14     1C 2A 06 F6 | 	mov	local03, #28
0bd18     13 31 02 F6 | 	mov	local06, local01
0bd1c     14 33 02 F6 | 	mov	local07, local02
0bd20     1B 31 62 FC | 	wrlong	local06, local09
0bd24     15 37 02 F6 | 	mov	local09, local03
0bd28     F2 30 02 FB | 	rdlong	local06, objptr
0bd2c     18 2F 02 F6 | 	mov	local05, local06
0bd30     01 2E 66 F0 | 	shl	local05, #1
0bd34     18 2F 02 F1 | 	add	local05, local06
0bd38     02 2E 66 F0 | 	shl	local05, #2
0bd3c     03 00 00 FF 
0bd40     00 E4 85 F1 | 	sub	objptr, ##1536
0bd44     F2 2E 02 F1 | 	add	local05, objptr
0bd48     04 2E 06 F1 | 	add	local05, #4
0bd4c     17 33 62 FC | 	wrlong	local07, local05
0bd50     03 00 00 FF 
0bd54     00 E4 05 F1 | 	add	objptr, ##1536
0bd58     F2 32 02 FB | 	rdlong	local07, objptr
0bd5c     19 31 02 F6 | 	mov	local06, local07
0bd60     01 30 66 F0 | 	shl	local06, #1
0bd64     19 31 02 F1 | 	add	local06, local07
0bd68     02 30 66 F0 | 	shl	local06, #2
0bd6c     03 00 00 FF 
0bd70     00 E4 85 F1 | 	sub	objptr, ##1536
0bd74     F2 30 02 F1 | 	add	local06, objptr
0bd78     08 30 06 F1 | 	add	local06, #8
0bd7c     18 37 62 FC | 	wrlong	local09, local06
0bd80     03 00 00 FF 
0bd84     00 E4 05 F1 | 	add	objptr, ##1536
0bd88     F2 30 02 FB | 	rdlong	local06, objptr
0bd8c     01 30 06 F1 | 	add	local06, #1
0bd90     F2 30 62 FC | 	wrlong	local06, objptr
0bd94     13 00 00 FF 
0bd98     38 E4 85 F1 | 	sub	objptr, ##9784
0bd9c     F2 30 02 FB | 	rdlong	local06, objptr
0bda0     01 30 06 F1 | 	add	local06, #1
0bda4     F2 30 62 FC | 	wrlong	local06, objptr
0bda8     37 00 00 FF 
0bdac     44 E4 85 F1 | 	sub	objptr, ##28228
0bdb0     24 05 90 FD | 	jmp	#LR__0993
0bdb4                 | LR__0981
0bdb4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bdb4     01 2C 0E F2 | 	cmp	local04, #1 wz
0bdb8     48 00 90 5D |  if_ne	jmp	#LR__0982
0bdbc     00 C0 1F FF 
0bdc0     00 30 06 F6 | 	mov	local06, ##1065353216
0bdc4     37 00 00 FF 
0bdc8     44 E4 05 F1 | 	add	objptr, ##28228
0bdcc     F2 36 02 FB | 	rdlong	local09, objptr
0bdd0     03 36 66 F0 | 	shl	local09, #3
0bdd4     02 00 00 FF 
0bdd8     38 E4 85 F1 | 	sub	objptr, ##1080
0bddc     F2 36 02 F1 | 	add	local09, objptr
0bde0     1B 13 02 FB | 	rdlong	arg01, local09
0bde4     35 00 00 FF 
0bde8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdec     6C C7 B1 FD | 	call	#__system____builtin_atof
0bdf0     FD 14 02 F6 | 	mov	arg02, result1
0bdf4     18 13 02 F6 | 	mov	arg01, local06
0bdf8     54 BF B1 FD | 	call	#__system___float_mul
0bdfc     FD 26 02 F6 | 	mov	local01, result1
0be00     1E 2A 06 F6 | 	mov	local03, #30
0be04                 | LR__0982
0be04                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0be04     FF FF 7F FF 
0be08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0be0c     48 00 90 5D |  if_ne	jmp	#LR__0983
0be10     00 C0 5F FF 
0be14     00 30 06 F6 | 	mov	local06, ##-1082130432
0be18     37 00 00 FF 
0be1c     44 E4 05 F1 | 	add	objptr, ##28228
0be20     F2 36 02 FB | 	rdlong	local09, objptr
0be24     03 36 66 F0 | 	shl	local09, #3
0be28     02 00 00 FF 
0be2c     38 E4 85 F1 | 	sub	objptr, ##1080
0be30     F2 36 02 F1 | 	add	local09, objptr
0be34     1B 13 02 FB | 	rdlong	arg01, local09
0be38     35 00 00 FF 
0be3c     0C E4 85 F1 | 	sub	objptr, ##27148
0be40     18 C7 B1 FD | 	call	#__system____builtin_atof
0be44     FD 14 02 F6 | 	mov	arg02, result1
0be48     18 13 02 F6 | 	mov	arg01, local06
0be4c     00 BF B1 FD | 	call	#__system___float_mul
0be50     FD 26 02 F6 | 	mov	local01, result1
0be54     1E 2A 06 F6 | 	mov	local03, #30
0be58                 | LR__0983
0be58     13 31 02 F6 | 	mov	local06, local01
0be5c     14 33 02 F6 | 	mov	local07, local02
0be60     15 2F 02 F6 | 	mov	local05, local03
0be64     4A 00 00 FF 
0be68     7C E4 05 F1 | 	add	objptr, ##38012
0be6c     F2 26 02 FB | 	rdlong	local01, objptr
0be70     13 37 02 F6 | 	mov	local09, local01
0be74     01 36 66 F0 | 	shl	local09, #1
0be78     13 37 02 F1 | 	add	local09, local01
0be7c     02 36 66 F0 | 	shl	local09, #2
0be80     03 00 00 FF 
0be84     00 E4 85 F1 | 	sub	objptr, ##1536
0be88     F2 36 02 F1 | 	add	local09, objptr
0be8c     1B 31 62 FC | 	wrlong	local06, local09
0be90     03 00 00 FF 
0be94     00 E4 05 F1 | 	add	objptr, ##1536
0be98     F2 36 02 FB | 	rdlong	local09, objptr
0be9c     1B 31 02 F6 | 	mov	local06, local09
0bea0     01 30 66 F0 | 	shl	local06, #1
0bea4     1B 31 02 F1 | 	add	local06, local09
0bea8     02 30 66 F0 | 	shl	local06, #2
0beac     03 00 00 FF 
0beb0     00 E4 85 F1 | 	sub	objptr, ##1536
0beb4     F2 30 02 F1 | 	add	local06, objptr
0beb8     04 30 06 F1 | 	add	local06, #4
0bebc     18 33 62 FC | 	wrlong	local07, local06
0bec0     03 00 00 FF 
0bec4     00 E4 05 F1 | 	add	objptr, ##1536
0bec8     F2 36 02 FB | 	rdlong	local09, objptr
0becc     1B 33 02 F6 | 	mov	local07, local09
0bed0     01 32 66 F0 | 	shl	local07, #1
0bed4     1B 33 02 F1 | 	add	local07, local09
0bed8     02 32 66 F0 | 	shl	local07, #2
0bedc     03 00 00 FF 
0bee0     00 E4 85 F1 | 	sub	objptr, ##1536
0bee4     F2 32 02 F1 | 	add	local07, objptr
0bee8     08 32 06 F1 | 	add	local07, #8
0beec     19 2F 62 FC | 	wrlong	local05, local07
0bef0     03 00 00 FF 
0bef4     00 E4 05 F1 | 	add	objptr, ##1536
0bef8     F2 30 02 FB | 	rdlong	local06, objptr
0befc     01 30 06 F1 | 	add	local06, #1
0bf00     F2 30 62 FC | 	wrlong	local06, objptr
0bf04     13 00 00 FF 
0bf08     38 E4 85 F1 | 	sub	objptr, ##9784
0bf0c     F2 30 02 FB | 	rdlong	local06, objptr
0bf10     01 30 06 F1 | 	add	local06, #1
0bf14     F2 30 62 FC | 	wrlong	local06, objptr
0bf18     37 00 00 FF 
0bf1c     44 E4 85 F1 | 	sub	objptr, ##28228
0bf20     B4 03 90 FD | 	jmp	#LR__0993
0bf24                 | LR__0984
0bf24     37 00 00 FF 
0bf28     44 E4 05 F1 | 	add	objptr, ##28228
0bf2c     F2 16 02 FB | 	rdlong	arg03, objptr
0bf30     03 16 66 F0 | 	shl	arg03, #3
0bf34     02 00 00 FF 
0bf38     38 E4 85 F1 | 	sub	objptr, ##1080
0bf3c     F2 16 02 F1 | 	add	arg03, objptr
0bf40     0B 13 02 FB | 	rdlong	arg01, arg03
0bf44     35 00 00 FF 
0bf48     0C E4 85 F1 | 	sub	objptr, ##27148
0bf4c     09 35 02 F6 | 	mov	local08, arg01
0bf50     97 06 48 FB | 	callpa	#(@LR__0986-@LR__0985)>>2,fcache_load_ptr_
0bf54                 | LR__0985
0bf54     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bf58     01 34 06 51 |  if_ne	add	local08, #1
0bf5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0985
0bf60                 | LR__0986
0bf60     09 35 82 F1 | 	sub	local08, arg01
0bf64     1A FB 01 F6 | 	mov	result1, local08
0bf68     52 00 00 FF 
0bf6c     2C E4 05 F1 | 	add	objptr, ##42028
0bf70     F2 FA 61 FC | 	wrlong	result1, objptr
0bf74     58 E4 85 F1 | 	sub	objptr, #88
0bf78     F2 12 02 FB | 	rdlong	arg01, objptr
0bf7c     FD 12 82 F1 | 	sub	arg01, result1
0bf80     04 12 86 F1 | 	sub	arg01, #4
0bf84     03 12 26 F5 | 	andn	arg01, #3
0bf88     F2 12 62 FC | 	wrlong	arg01, objptr
0bf8c     58 E4 05 F1 | 	add	objptr, #88
0bf90     F2 14 02 FB | 	rdlong	arg02, objptr
0bf94     52 00 00 FF 
0bf98     2C E4 85 F1 | 	sub	objptr, ##42028
0bf9c     2C 57 B1 FD | 	call	#_pslpoke
0bfa0                 | '     pslpoke memtop,l
0bfa0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0bfa0     01 38 06 F6 | 	mov	local10, #1
0bfa4     52 00 00 FF 
0bfa8     2C E4 05 F1 | 	add	objptr, ##42028
0bfac     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb0     52 00 00 FF 
0bfb4     2C E4 85 F1 | 	sub	objptr, ##42028
0bfb8     01 3A 06 F1 | 	add	local11, #1
0bfbc                 | LR__0987
0bfbc     1D 39 52 F2 | 	cmps	local10, local11 wc
0bfc0     5C 00 90 3D |  if_ae	jmp	#LR__0988
0bfc4     51 00 00 FF 
0bfc8     D4 E5 05 F1 | 	add	objptr, ##41940
0bfcc     F2 32 02 FB | 	rdlong	local07, objptr
0bfd0     03 32 06 F1 | 	add	local07, #3
0bfd4     1C 33 02 F1 | 	add	local07, local10
0bfd8     1A 00 00 FF 
0bfdc     90 E5 85 F1 | 	sub	objptr, ##13712
0bfe0     F2 36 02 FB | 	rdlong	local09, objptr
0bfe4     03 36 66 F0 | 	shl	local09, #3
0bfe8     02 00 00 FF 
0bfec     38 E4 85 F1 | 	sub	objptr, ##1080
0bff0     F2 36 02 F1 | 	add	local09, objptr
0bff4     1B 13 02 FB | 	rdlong	arg01, local09
0bff8     1C 15 02 F6 | 	mov	arg02, local10
0bffc     01 16 06 F6 | 	mov	arg03, #1
0c000     35 00 00 FF 
0c004     0C E4 85 F1 | 	sub	objptr, ##27148
0c008     60 B0 B1 FD | 	call	#__system__Mid_S
0c00c     FD 14 C2 FA | 	rdbyte	arg02, result1
0c010     19 13 02 F6 | 	mov	arg01, local07
0c014     44 57 B1 FD | 	call	#_pspoke
0c018     01 38 06 F1 | 	add	local10, #1
0c01c     9C FF 9F FD | 	jmp	#LR__0987
0c020                 | LR__0988
0c020     51 00 00 FF 
0c024     D4 E5 05 F1 | 	add	objptr, ##41940
0c028     F2 26 02 FB | 	rdlong	local01, objptr
0c02c     2B 2A 06 F6 | 	mov	local03, #43
0c030     13 31 02 F6 | 	mov	local06, local01
0c034     14 33 02 F6 | 	mov	local07, local02
0c038     15 3B 02 F6 | 	mov	local11, local03
0c03c     07 00 00 FF 
0c040     58 E5 85 F1 | 	sub	objptr, ##3928
0c044     F2 38 02 FB | 	rdlong	local10, objptr
0c048     1C 37 02 F6 | 	mov	local09, local10
0c04c     01 36 66 F0 | 	shl	local09, #1
0c050     1C 37 02 F1 | 	add	local09, local10
0c054     02 36 66 F0 | 	shl	local09, #2
0c058     03 00 00 FF 
0c05c     00 E4 85 F1 | 	sub	objptr, ##1536
0c060     F2 36 02 F1 | 	add	local09, objptr
0c064     1B 31 62 FC | 	wrlong	local06, local09
0c068     03 00 00 FF 
0c06c     00 E4 05 F1 | 	add	objptr, ##1536
0c070     F2 38 02 FB | 	rdlong	local10, objptr
0c074     1C 37 02 F6 | 	mov	local09, local10
0c078     01 36 66 F0 | 	shl	local09, #1
0c07c     1C 37 02 F1 | 	add	local09, local10
0c080     02 36 66 F0 | 	shl	local09, #2
0c084     03 00 00 FF 
0c088     00 E4 85 F1 | 	sub	objptr, ##1536
0c08c     F2 36 02 F1 | 	add	local09, objptr
0c090     04 36 06 F1 | 	add	local09, #4
0c094     1B 33 62 FC | 	wrlong	local07, local09
0c098     03 00 00 FF 
0c09c     00 E4 05 F1 | 	add	objptr, ##1536
0c0a0     F2 38 02 FB | 	rdlong	local10, objptr
0c0a4     1C 37 02 F6 | 	mov	local09, local10
0c0a8     01 36 66 F0 | 	shl	local09, #1
0c0ac     1C 37 02 F1 | 	add	local09, local10
0c0b0     02 36 66 F0 | 	shl	local09, #2
0c0b4     03 00 00 FF 
0c0b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0bc     F2 36 02 F1 | 	add	local09, objptr
0c0c0     08 36 06 F1 | 	add	local09, #8
0c0c4     1B 3B 62 FC | 	wrlong	local11, local09
0c0c8     03 00 00 FF 
0c0cc     00 E4 05 F1 | 	add	objptr, ##1536
0c0d0     F2 30 02 FB | 	rdlong	local06, objptr
0c0d4     01 30 06 F1 | 	add	local06, #1
0c0d8     F2 30 62 FC | 	wrlong	local06, objptr
0c0dc     13 00 00 FF 
0c0e0     38 E4 85 F1 | 	sub	objptr, ##9784
0c0e4     F2 30 02 FB | 	rdlong	local06, objptr
0c0e8     01 30 06 F1 | 	add	local06, #1
0c0ec     F2 30 62 FC | 	wrlong	local06, objptr
0c0f0     37 00 00 FF 
0c0f4     44 E4 85 F1 | 	sub	objptr, ##28228
0c0f8     DC 01 90 FD | 	jmp	#LR__0993
0c0fc                 | LR__0989
0c0fc     2C 2A 06 F6 | 	mov	local03, #44
0c100     37 00 00 FF 
0c104     44 E4 05 F1 | 	add	objptr, ##28228
0c108     F2 30 02 FB | 	rdlong	local06, objptr
0c10c     03 30 66 F0 | 	shl	local06, #3
0c110     02 00 00 FF 
0c114     38 E4 85 F1 | 	sub	objptr, ##1080
0c118     F2 30 02 F1 | 	add	local06, objptr
0c11c     18 13 02 FB | 	rdlong	arg01, local06
0c120     00 14 06 F6 | 	mov	arg02, #0
0c124     35 00 00 FF 
0c128     0C E4 85 F1 | 	sub	objptr, ##27148
0c12c     98 C2 B1 FD | 	call	#__system____builtin_atoi
0c130     FD 26 02 F6 | 	mov	local01, result1
0c134     13 31 02 F6 | 	mov	local06, local01
0c138     14 33 02 F6 | 	mov	local07, local02
0c13c     15 3B 02 F6 | 	mov	local11, local03
0c140     4A 00 00 FF 
0c144     7C E4 05 F1 | 	add	objptr, ##38012
0c148     F2 38 02 FB | 	rdlong	local10, objptr
0c14c     1C 37 02 F6 | 	mov	local09, local10
0c150     01 36 66 F0 | 	shl	local09, #1
0c154     1C 37 02 F1 | 	add	local09, local10
0c158     02 36 66 F0 | 	shl	local09, #2
0c15c     03 00 00 FF 
0c160     00 E4 85 F1 | 	sub	objptr, ##1536
0c164     F2 36 02 F1 | 	add	local09, objptr
0c168     1B 31 62 FC | 	wrlong	local06, local09
0c16c     03 00 00 FF 
0c170     00 E4 05 F1 | 	add	objptr, ##1536
0c174     F2 38 02 FB | 	rdlong	local10, objptr
0c178     1C 37 02 F6 | 	mov	local09, local10
0c17c     01 36 66 F0 | 	shl	local09, #1
0c180     1C 37 02 F1 | 	add	local09, local10
0c184     02 36 66 F0 | 	shl	local09, #2
0c188     03 00 00 FF 
0c18c     00 E4 85 F1 | 	sub	objptr, ##1536
0c190     F2 36 02 F1 | 	add	local09, objptr
0c194     04 36 06 F1 | 	add	local09, #4
0c198     1B 33 62 FC | 	wrlong	local07, local09
0c19c     03 00 00 FF 
0c1a0     00 E4 05 F1 | 	add	objptr, ##1536
0c1a4     F2 38 02 FB | 	rdlong	local10, objptr
0c1a8     1C 37 02 F6 | 	mov	local09, local10
0c1ac     01 36 66 F0 | 	shl	local09, #1
0c1b0     1C 37 02 F1 | 	add	local09, local10
0c1b4     02 36 66 F0 | 	shl	local09, #2
0c1b8     03 00 00 FF 
0c1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c1c0     F2 36 02 F1 | 	add	local09, objptr
0c1c4     08 36 06 F1 | 	add	local09, #8
0c1c8     1B 3B 62 FC | 	wrlong	local11, local09
0c1cc     03 00 00 FF 
0c1d0     00 E4 05 F1 | 	add	objptr, ##1536
0c1d4     F2 30 02 FB | 	rdlong	local06, objptr
0c1d8     01 30 06 F1 | 	add	local06, #1
0c1dc     F2 30 62 FC | 	wrlong	local06, objptr
0c1e0     13 00 00 FF 
0c1e4     38 E4 85 F1 | 	sub	objptr, ##9784
0c1e8     F2 30 02 FB | 	rdlong	local06, objptr
0c1ec     01 30 06 F1 | 	add	local06, #1
0c1f0     F2 30 62 FC | 	wrlong	local06, objptr
0c1f4     37 00 00 FF 
0c1f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1fc     D8 00 90 FD | 	jmp	#LR__0993
0c200                 | LR__0990
0c200     16 13 02 F6 | 	mov	arg01, local04
0c204     24 04 B0 FD | 	call	#_getvar
0c208     37 00 00 FF 
0c20c     44 E4 05 F1 | 	add	objptr, ##28228
0c210     F2 30 02 FB | 	rdlong	local06, objptr
0c214     01 30 06 F1 | 	add	local06, #1
0c218     F2 30 62 FC | 	wrlong	local06, objptr
0c21c     37 00 00 FF 
0c220     44 E4 85 F1 | 	sub	objptr, ##28228
0c224                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c224     01 FA 55 F2 | 	cmps	result1, #1 wc
0c228     B0 00 90 3D |  if_ae	jmp	#LR__0994
0c22c     A8 00 90 FD | 	jmp	#LR__0993
0c230                 | LR__0991
0c230     37 00 00 FF 
0c234     44 E4 05 F1 | 	add	objptr, ##28228
0c238     F2 30 02 FB | 	rdlong	local06, objptr
0c23c     01 30 06 F1 | 	add	local06, #1
0c240     F2 30 62 FC | 	wrlong	local06, objptr
0c244     37 00 00 FF 
0c248     44 E4 85 F1 | 	sub	objptr, ##28228
0c24c     20 F1 BF FD | 	call	#_expr
0c250                 | '     ct+=1
0c250                 | '     err=expr() : if err>0 then return err 
0c250     01 FA 55 F2 | 	cmps	result1, #1 wc
0c254     84 00 90 3D |  if_ae	jmp	#LR__0994
0c258                 | '     if lparts(ct).token=token_rpar then ct+=1
0c258     37 00 00 FF 
0c25c     44 E4 05 F1 | 	add	objptr, ##28228
0c260     F2 3A 02 FB | 	rdlong	local11, objptr
0c264     03 3A 66 F0 | 	shl	local11, #3
0c268     02 00 00 FF 
0c26c     38 E4 85 F1 | 	sub	objptr, ##1080
0c270     F2 3A 02 F1 | 	add	local11, objptr
0c274     04 3A 06 F1 | 	add	local11, #4
0c278     1D 3B 02 FB | 	rdlong	local11, local11
0c27c     14 3A 0E F2 | 	cmp	local11, #20 wz
0c280     35 00 00 FF 
0c284     0C E4 85 F1 | 	sub	objptr, ##27148
0c288     4C 00 90 5D |  if_ne	jmp	#LR__0993
0c28c     37 00 00 FF 
0c290     44 E4 05 F1 | 	add	objptr, ##28228
0c294     F2 30 02 FB | 	rdlong	local06, objptr
0c298     01 30 06 F1 | 	add	local06, #1
0c29c     F2 30 62 FC | 	wrlong	local06, objptr
0c2a0     37 00 00 FF 
0c2a4     44 E4 85 F1 | 	sub	objptr, ##28228
0c2a8     2C 00 90 FD | 	jmp	#LR__0993
0c2ac                 | LR__0992
0c2ac     16 13 02 F6 | 	mov	arg01, local04
0c2b0     34 00 B0 FD | 	call	#_getfun
0c2b4     37 00 00 FF 
0c2b8     44 E4 05 F1 | 	add	objptr, ##28228
0c2bc     F2 30 02 FB | 	rdlong	local06, objptr
0c2c0     01 30 06 F1 | 	add	local06, #1
0c2c4     F2 30 62 FC | 	wrlong	local06, objptr
0c2c8     37 00 00 FF 
0c2cc     44 E4 85 F1 | 	sub	objptr, ##28228
0c2d0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c2d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c2d4     04 00 90 3D |  if_ae	jmp	#LR__0994
0c2d8                 | LR__0993
0c2d8                 | ' return 0  
0c2d8     00 FA 05 F6 | 	mov	result1, #0
0c2dc                 | LR__0994
0c2dc     A7 F0 03 F6 | 	mov	ptra, fp
0c2e0     B2 00 A0 FD | 	call	#popregs_
0c2e4                 | _getvalue_ret
0c2e4     2D 00 64 FD | 	ret
0c2e8                 | 
0c2e8                 | ' 
0c2e8                 | ' ' Get a function result 
0c2e8                 | ' 
0c2e8                 | ' function getfun(m as integer) as ulong
0c2e8                 | _getfun
0c2e8     0F 4A 05 F6 | 	mov	COUNT_, #15
0c2ec     A8 00 A0 FD | 	call	#pushregs_
0c2f0                 | _getfun_enter
0c2f0     09 2D 02 F6 | 	mov	local04, arg01
0c2f4     37 00 00 FF 
0c2f8     44 E4 05 F1 | 	add	objptr, ##28228
0c2fc     F2 2E 02 FB | 	rdlong	local05, objptr
0c300     17 31 02 F6 | 	mov	local06, local05
0c304     00 32 06 F6 | 	mov	local07, #0
0c308                 | ' oldct=ct
0c308                 | ' numpar=0
0c308                 | ' if lparts(ct+1).token=token_lpar then
0c308     01 2E 06 F1 | 	add	local05, #1
0c30c     03 2E 66 F0 | 	shl	local05, #3
0c310     02 00 00 FF 
0c314     38 E4 85 F1 | 	sub	objptr, ##1080
0c318     F2 2E 02 F1 | 	add	local05, objptr
0c31c     04 2E 06 F1 | 	add	local05, #4
0c320     17 2F 02 FB | 	rdlong	local05, local05
0c324     15 2E 0E F2 | 	cmp	local05, #21 wz
0c328     35 00 00 FF 
0c32c     0C E4 85 F1 | 	sub	objptr, ##27148
0c330     54 01 90 5D |  if_ne	jmp	#LR__1004
0c334     37 00 00 FF 
0c338     44 E4 05 F1 | 	add	objptr, ##28228
0c33c     F2 34 02 FB | 	rdlong	local08, objptr
0c340     01 34 06 F1 | 	add	local08, #1
0c344     F2 34 62 FC | 	wrlong	local08, objptr
0c348     37 00 00 FF 
0c34c     44 E4 85 F1 | 	sub	objptr, ##28228
0c350                 | '   ct+=1 											' omit this lpar, this is for expr list
0c350                 | '   do
0c350                 | LR__1000
0c350     37 00 00 FF 
0c354     44 E4 05 F1 | 	add	objptr, ##28228
0c358     F2 2E 02 FB | 	rdlong	local05, objptr
0c35c     01 2E 06 F1 | 	add	local05, #1
0c360     F2 2E 62 FC | 	wrlong	local05, objptr
0c364                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c364                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c364     03 2E 66 F0 | 	shl	local05, #3
0c368     02 00 00 FF 
0c36c     38 E4 85 F1 | 	sub	objptr, ##1080
0c370     F2 2E 02 F1 | 	add	local05, objptr
0c374     04 2E 06 F1 | 	add	local05, #4
0c378     17 35 02 FB | 	rdlong	local08, local05
0c37c     15 34 0E F2 | 	cmp	local08, #21 wz
0c380     35 00 00 FF 
0c384     0C E4 85 F1 | 	sub	objptr, ##27148
0c388     44 00 90 5D |  if_ne	jmp	#LR__1001
0c38c     37 00 00 FF 
0c390     44 E4 05 F1 | 	add	objptr, ##28228
0c394     F2 34 02 FB | 	rdlong	local08, objptr
0c398     01 34 06 F1 | 	add	local08, #1
0c39c     F2 34 62 FC | 	wrlong	local08, objptr
0c3a0     37 00 00 FF 
0c3a4     44 E4 85 F1 | 	sub	objptr, ##28228
0c3a8     C4 EF BF FD | 	call	#_expr
0c3ac     FD 36 02 F6 | 	mov	local09, result1
0c3b0     37 00 00 FF 
0c3b4     44 E4 05 F1 | 	add	objptr, ##28228
0c3b8     F2 34 02 FB | 	rdlong	local08, objptr
0c3bc     01 34 06 F1 | 	add	local08, #1
0c3c0     F2 34 62 FC | 	wrlong	local08, objptr
0c3c4     37 00 00 FF 
0c3c8     44 E4 85 F1 | 	sub	objptr, ##28228
0c3cc     08 00 90 FD | 	jmp	#LR__1002
0c3d0                 | LR__1001
0c3d0     9C EF BF FD | 	call	#_expr
0c3d4     FD 36 02 F6 | 	mov	local09, result1
0c3d8                 | LR__1002
0c3d8                 | '     if err>0 then return err
0c3d8     01 36 16 F2 | 	cmp	local09, #1 wc
0c3dc     1B FB 01 36 |  if_ae	mov	result1, local09
0c3e0     3C 02 90 3D |  if_ae	jmp	#LR__1006
0c3e4     01 32 06 F1 | 	add	local07, #1
0c3e8     37 00 00 FF 
0c3ec     44 E4 05 F1 | 	add	objptr, ##28228
0c3f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3f4     03 2E 66 F0 | 	shl	local05, #3
0c3f8     02 00 00 FF 
0c3fc     38 E4 85 F1 | 	sub	objptr, ##1080
0c400     F2 2E 02 F1 | 	add	local05, objptr
0c404     04 2E 06 F1 | 	add	local05, #4
0c408     17 37 02 FB | 	rdlong	local09, local05
0c40c     14 36 0E F2 | 	cmp	local09, #20 wz
0c410     35 00 00 FF 
0c414     0C E4 85 F1 | 	sub	objptr, ##27148
0c418     34 00 90 AD |  if_e	jmp	#LR__1003
0c41c     37 00 00 FF 
0c420     44 E4 05 F1 | 	add	objptr, ##28228
0c424     F2 36 02 FB | 	rdlong	local09, objptr
0c428     03 36 66 F0 | 	shl	local09, #3
0c42c     02 00 00 FF 
0c430     38 E4 85 F1 | 	sub	objptr, ##1080
0c434     F2 36 02 F1 | 	add	local09, objptr
0c438     04 36 06 F1 | 	add	local09, #4
0c43c     1B 37 02 FB | 	rdlong	local09, local09
0c440     FE 37 0E F2 | 	cmp	local09, #510 wz
0c444     35 00 00 FF 
0c448     0C E4 85 F1 | 	sub	objptr, ##27148
0c44c     00 FF 9F 5D |  if_ne	jmp	#LR__1000
0c450                 | LR__1003
0c450                 | '   if lparts(ct).token=token_end then return 14
0c450     37 00 00 FF 
0c454     44 E4 05 F1 | 	add	objptr, ##28228
0c458     F2 2E 02 FB | 	rdlong	local05, objptr
0c45c     03 2E 66 F0 | 	shl	local05, #3
0c460     02 00 00 FF 
0c464     38 E4 85 F1 | 	sub	objptr, ##1080
0c468     F2 2E 02 F1 | 	add	local05, objptr
0c46c     04 2E 06 F1 | 	add	local05, #4
0c470     17 37 02 FB | 	rdlong	local09, local05
0c474     FE 37 0E F2 | 	cmp	local09, #510 wz
0c478     35 00 00 FF 
0c47c     0C E4 85 F1 | 	sub	objptr, ##27148
0c480     0E FA 05 A6 |  if_e	mov	result1, #14
0c484     98 01 90 AD |  if_e	jmp	#LR__1006
0c488                 | LR__1004
0c488     19 27 02 F6 | 	mov	local01, local07
0c48c     03 30 66 F0 | 	shl	local06, #3
0c490     35 00 00 FF 
0c494     0C E4 05 F1 | 	add	objptr, ##27148
0c498     F2 30 02 F1 | 	add	local06, objptr
0c49c     04 30 06 F1 | 	add	local06, #4
0c4a0     18 2B 02 FB | 	rdlong	local03, local06
0c4a4     13 35 02 F6 | 	mov	local08, local01
0c4a8     14 39 02 F6 | 	mov	local10, local02
0c4ac     15 3B 02 F6 | 	mov	local11, local03
0c4b0     15 00 00 FF 
0c4b4     70 E4 05 F1 | 	add	objptr, ##10864
0c4b8     F2 3C 02 FB | 	rdlong	local12, objptr
0c4bc     1E 3F 02 F6 | 	mov	local13, local12
0c4c0     01 3E 66 F0 | 	shl	local13, #1
0c4c4     1E 3F 02 F1 | 	add	local13, local12
0c4c8     02 3E 66 F0 | 	shl	local13, #2
0c4cc     03 00 00 FF 
0c4d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d4     F2 3E 02 F1 | 	add	local13, objptr
0c4d8     1F 35 62 FC | 	wrlong	local08, local13
0c4dc     03 00 00 FF 
0c4e0     00 E4 05 F1 | 	add	objptr, ##1536
0c4e4     F2 34 02 FB | 	rdlong	local08, objptr
0c4e8     1A 41 02 F6 | 	mov	local14, local08
0c4ec     01 40 66 F0 | 	shl	local14, #1
0c4f0     1A 41 02 F1 | 	add	local14, local08
0c4f4     02 40 66 F0 | 	shl	local14, #2
0c4f8     03 00 00 FF 
0c4fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c500     F2 40 02 F1 | 	add	local14, objptr
0c504     04 40 06 F1 | 	add	local14, #4
0c508     20 39 62 FC | 	wrlong	local10, local14
0c50c     03 00 00 FF 
0c510     00 E4 05 F1 | 	add	objptr, ##1536
0c514     F2 34 02 FB | 	rdlong	local08, objptr
0c518     1A 43 02 F6 | 	mov	local15, local08
0c51c     01 42 66 F0 | 	shl	local15, #1
0c520     1A 43 02 F1 | 	add	local15, local08
0c524     02 42 66 F0 | 	shl	local15, #2
0c528     03 00 00 FF 
0c52c     00 E4 85 F1 | 	sub	objptr, ##1536
0c530     F2 42 02 F1 | 	add	local15, objptr
0c534     08 42 06 F1 | 	add	local15, #8
0c538     21 3B 62 FC | 	wrlong	local11, local15
0c53c     03 00 00 FF 
0c540     00 E4 05 F1 | 	add	objptr, ##1536
0c544     F2 34 02 FB | 	rdlong	local08, objptr
0c548     01 34 06 F1 | 	add	local08, #1
0c54c     F2 34 62 FC | 	wrlong	local08, objptr
0c550     4A 00 00 FF 
0c554     7C E4 85 F1 | 	sub	objptr, ##38012
0c558                 | ' t2.result.uresult=numpar
0c558                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c558                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c558                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c558     FF FF 7F FF 
0c55c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c560     B8 00 90 5D |  if_ne	jmp	#LR__1005
0c564     15 2A 06 F6 | 	mov	local03, #21
0c568     13 35 02 F6 | 	mov	local08, local01
0c56c     14 39 02 F6 | 	mov	local10, local02
0c570     15 3B 02 F6 | 	mov	local11, local03
0c574     4A 00 00 FF 
0c578     7C E4 05 F1 | 	add	objptr, ##38012
0c57c     F2 3C 02 FB | 	rdlong	local12, objptr
0c580     1E 3F 02 F6 | 	mov	local13, local12
0c584     01 3E 66 F0 | 	shl	local13, #1
0c588     1E 3F 02 F1 | 	add	local13, local12
0c58c     02 3E 66 F0 | 	shl	local13, #2
0c590     03 00 00 FF 
0c594     00 E4 85 F1 | 	sub	objptr, ##1536
0c598     F2 3E 02 F1 | 	add	local13, objptr
0c59c     1F 35 62 FC | 	wrlong	local08, local13
0c5a0     03 00 00 FF 
0c5a4     00 E4 05 F1 | 	add	objptr, ##1536
0c5a8     F2 42 02 FB | 	rdlong	local15, objptr
0c5ac     21 41 02 F6 | 	mov	local14, local15
0c5b0     01 40 66 F0 | 	shl	local14, #1
0c5b4     21 41 02 F1 | 	add	local14, local15
0c5b8     02 40 66 F0 | 	shl	local14, #2
0c5bc     03 00 00 FF 
0c5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5c4     F2 40 02 F1 | 	add	local14, objptr
0c5c8     04 40 06 F1 | 	add	local14, #4
0c5cc     20 39 62 FC | 	wrlong	local10, local14
0c5d0     03 00 00 FF 
0c5d4     00 E4 05 F1 | 	add	objptr, ##1536
0c5d8     F2 40 02 FB | 	rdlong	local14, objptr
0c5dc     20 43 02 F6 | 	mov	local15, local14
0c5e0     01 42 66 F0 | 	shl	local15, #1
0c5e4     20 43 02 F1 | 	add	local15, local14
0c5e8     02 42 66 F0 | 	shl	local15, #2
0c5ec     03 00 00 FF 
0c5f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5f4     F2 42 02 F1 | 	add	local15, objptr
0c5f8     08 42 06 F1 | 	add	local15, #8
0c5fc     21 3B 62 FC | 	wrlong	local11, local15
0c600     03 00 00 FF 
0c604     00 E4 05 F1 | 	add	objptr, ##1536
0c608     F2 34 02 FB | 	rdlong	local08, objptr
0c60c     01 34 06 F1 | 	add	local08, #1
0c610     F2 34 62 FC | 	wrlong	local08, objptr
0c614     4A 00 00 FF 
0c618     7C E4 85 F1 | 	sub	objptr, ##38012
0c61c                 | LR__1005
0c61c                 | ' return 0
0c61c     00 FA 05 F6 | 	mov	result1, #0
0c620                 | LR__1006
0c620     A7 F0 03 F6 | 	mov	ptra, fp
0c624     B2 00 A0 FD | 	call	#popregs_
0c628                 | _getfun_ret
0c628     2D 00 64 FD | 	ret
0c62c                 | 
0c62c                 | '   
0c62c                 | '   
0c62c                 | ' function getvar(m as integer) as ulong
0c62c                 | _getvar
0c62c     11 4A 05 F6 | 	mov	COUNT_, #17
0c630     A8 00 A0 FD | 	call	#pushregs_
0c634                 | _getvar_enter
0c634     09 2D 02 F6 | 	mov	local04, arg01
0c638     37 00 00 FF 
0c63c     44 E4 05 F1 | 	add	objptr, ##28228
0c640     F2 2E 02 FB | 	rdlong	local05, objptr
0c644     03 2E 66 F0 | 	shl	local05, #3
0c648     02 00 00 FF 
0c64c     38 E4 85 F1 | 	sub	objptr, ##1080
0c650     F2 2E 02 F1 | 	add	local05, objptr
0c654     17 31 02 FB | 	rdlong	local06, local05
0c658     01 32 66 F6 | 	neg	local07, #1
0c65c                 | ' 
0c65c                 | ' varname$=lparts(ct).part$
0c65c                 | ' j=-1
0c65c                 | ' 
0c65c                 | ' for i=0 to varnum-1
0c65c     00 34 06 F6 | 	mov	local08, #0
0c660     04 E4 85 F1 | 	sub	objptr, #4
0c664     F2 36 02 FB | 	rdlong	local09, objptr
0c668     35 00 00 FF 
0c66c     08 E4 85 F1 | 	sub	objptr, ##27144
0c670                 | LR__1010
0c670     1B 35 52 F2 | 	cmps	local08, local09 wc
0c674     38 00 90 3D |  if_ae	jmp	#LR__1011
0c678                 | '   if variables(i).name=varname$ then j=i : exit
0c678     1A 2F 02 F6 | 	mov	local05, local08
0c67c     04 2E 66 F0 | 	shl	local05, #4
0c680     14 00 00 FF 
0c684     F8 E5 05 F1 | 	add	objptr, ##10744
0c688     F2 2E 02 F1 | 	add	local05, objptr
0c68c     17 13 02 FB | 	rdlong	arg01, local05
0c690     18 15 02 F6 | 	mov	arg02, local06
0c694     14 00 00 FF 
0c698     F8 E5 85 F1 | 	sub	objptr, ##10744
0c69c     5C 88 B1 FD | 	call	#__system___string_cmp
0c6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6a4     1A 33 02 A6 |  if_e	mov	local07, local08
0c6a8     01 34 06 51 |  if_ne	add	local08, #1
0c6ac     C0 FF 9F 5D |  if_ne	jmp	#LR__1010
0c6b0                 | LR__1011
0c6b0                 | ' if  j=-1 andalso varnum<maxvars then   
0c6b0     FF FF 7F FF 
0c6b4     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c6b8     A8 00 90 5D |  if_ne	jmp	#LR__1012
0c6bc     35 00 00 FF 
0c6c0     08 E4 05 F1 | 	add	objptr, ##27144
0c6c4     F2 36 02 FB | 	rdlong	local09, objptr
0c6c8     35 00 00 FF 
0c6cc     08 E4 85 F1 | 	sub	objptr, ##27144
0c6d0     02 00 00 FF 
0c6d4     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c6d8     88 00 90 3D |  if_ae	jmp	#LR__1012
0c6dc     35 00 00 FF 
0c6e0     08 E4 05 F1 | 	add	objptr, ##27144
0c6e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c6e8     04 2E 66 F0 | 	shl	local05, #4
0c6ec     20 00 00 FF 
0c6f0     10 E4 85 F1 | 	sub	objptr, ##16400
0c6f4     F2 2E 02 F1 | 	add	local05, objptr
0c6f8     17 31 62 FC | 	wrlong	local06, local05
0c6fc     20 00 00 FF 
0c700     10 E4 05 F1 | 	add	objptr, ##16400
0c704     F2 2E 02 FB | 	rdlong	local05, objptr
0c708     04 2E 66 F0 | 	shl	local05, #4
0c70c     20 00 00 FF 
0c710     10 E4 85 F1 | 	sub	objptr, ##16400
0c714     F2 2E 02 F1 | 	add	local05, objptr
0c718     04 2E 06 F1 | 	add	local05, #4
0c71c     17 01 68 FC | 	wrlong	#0, local05
0c720     20 00 00 FF 
0c724     10 E4 05 F1 | 	add	objptr, ##16400
0c728     F2 2E 02 FB | 	rdlong	local05, objptr
0c72c     04 2E 66 F0 | 	shl	local05, #4
0c730     20 00 00 FF 
0c734     10 E4 85 F1 | 	sub	objptr, ##16400
0c738     F2 2E 02 F1 | 	add	local05, objptr
0c73c     0C 2E 06 F1 | 	add	local05, #12
0c740     17 39 68 FC | 	wrlong	#28, local05
0c744     20 00 00 FF 
0c748     10 E4 05 F1 | 	add	objptr, ##16400
0c74c     F2 36 02 FB | 	rdlong	local09, objptr
0c750     1B 33 02 F6 | 	mov	local07, local09
0c754     01 36 06 F1 | 	add	local09, #1
0c758     F2 36 62 FC | 	wrlong	local09, objptr
0c75c     35 00 00 FF 
0c760     08 E4 85 F1 | 	sub	objptr, ##27144
0c764                 | LR__1012
0c764     00 36 06 F6 | 	mov	local09, #0
0c768                 | ' numpar=0
0c768                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c768     37 00 00 FF 
0c76c     44 E4 05 F1 | 	add	objptr, ##28228
0c770     F2 2E 02 FB | 	rdlong	local05, objptr
0c774     01 2E 06 F1 | 	add	local05, #1
0c778     03 2E 66 F0 | 	shl	local05, #3
0c77c     02 00 00 FF 
0c780     38 E4 85 F1 | 	sub	objptr, ##1080
0c784     F2 2E 02 F1 | 	add	local05, objptr
0c788     04 2E 06 F1 | 	add	local05, #4
0c78c     17 35 02 FB | 	rdlong	local08, local05
0c790     15 34 0E F2 | 	cmp	local08, #21 wz
0c794     35 00 00 FF 
0c798     0C E4 85 F1 | 	sub	objptr, ##27148
0c79c     54 01 90 5D |  if_ne	jmp	#LR__1017
0c7a0     37 00 00 FF 
0c7a4     44 E4 05 F1 | 	add	objptr, ##28228
0c7a8     F2 38 02 FB | 	rdlong	local10, objptr
0c7ac     01 38 06 F1 | 	add	local10, #1
0c7b0     F2 38 62 FC | 	wrlong	local10, objptr
0c7b4     37 00 00 FF 
0c7b8     44 E4 85 F1 | 	sub	objptr, ##28228
0c7bc                 | '   ct+=1 											' omit this lpar, this is for expr list
0c7bc                 | '   do
0c7bc                 | LR__1013
0c7bc     37 00 00 FF 
0c7c0     44 E4 05 F1 | 	add	objptr, ##28228
0c7c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c7c8     01 2E 06 F1 | 	add	local05, #1
0c7cc     F2 2E 62 FC | 	wrlong	local05, objptr
0c7d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c7d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c7d0     03 2E 66 F0 | 	shl	local05, #3
0c7d4     02 00 00 FF 
0c7d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7dc     F2 2E 02 F1 | 	add	local05, objptr
0c7e0     04 2E 06 F1 | 	add	local05, #4
0c7e4     17 39 02 FB | 	rdlong	local10, local05
0c7e8     15 38 0E F2 | 	cmp	local10, #21 wz
0c7ec     35 00 00 FF 
0c7f0     0C E4 85 F1 | 	sub	objptr, ##27148
0c7f4     44 00 90 5D |  if_ne	jmp	#LR__1014
0c7f8     37 00 00 FF 
0c7fc     44 E4 05 F1 | 	add	objptr, ##28228
0c800     F2 38 02 FB | 	rdlong	local10, objptr
0c804     01 38 06 F1 | 	add	local10, #1
0c808     F2 38 62 FC | 	wrlong	local10, objptr
0c80c     37 00 00 FF 
0c810     44 E4 85 F1 | 	sub	objptr, ##28228
0c814     58 EB BF FD | 	call	#_expr
0c818     FD 3A 02 F6 | 	mov	local11, result1
0c81c     37 00 00 FF 
0c820     44 E4 05 F1 | 	add	objptr, ##28228
0c824     F2 38 02 FB | 	rdlong	local10, objptr
0c828     01 38 06 F1 | 	add	local10, #1
0c82c     F2 38 62 FC | 	wrlong	local10, objptr
0c830     37 00 00 FF 
0c834     44 E4 85 F1 | 	sub	objptr, ##28228
0c838     08 00 90 FD | 	jmp	#LR__1015
0c83c                 | LR__1014
0c83c     30 EB BF FD | 	call	#_expr
0c840     FD 3A 02 F6 | 	mov	local11, result1
0c844                 | LR__1015
0c844                 | '     if err>0 then return err
0c844     01 3A 56 F2 | 	cmps	local11, #1 wc
0c848     1D FB 01 36 |  if_ae	mov	result1, local11
0c84c     2C 02 90 3D |  if_ae	jmp	#LR__1019
0c850     01 36 06 F1 | 	add	local09, #1
0c854     37 00 00 FF 
0c858     44 E4 05 F1 | 	add	objptr, ##28228
0c85c     F2 2E 02 FB | 	rdlong	local05, objptr
0c860     03 2E 66 F0 | 	shl	local05, #3
0c864     02 00 00 FF 
0c868     38 E4 85 F1 | 	sub	objptr, ##1080
0c86c     F2 2E 02 F1 | 	add	local05, objptr
0c870     04 2E 06 F1 | 	add	local05, #4
0c874     17 3B 02 FB | 	rdlong	local11, local05
0c878     14 3A 0E F2 | 	cmp	local11, #20 wz
0c87c     35 00 00 FF 
0c880     0C E4 85 F1 | 	sub	objptr, ##27148
0c884     34 00 90 AD |  if_e	jmp	#LR__1016
0c888     37 00 00 FF 
0c88c     44 E4 05 F1 | 	add	objptr, ##28228
0c890     F2 3A 02 FB | 	rdlong	local11, objptr
0c894     03 3A 66 F0 | 	shl	local11, #3
0c898     02 00 00 FF 
0c89c     38 E4 85 F1 | 	sub	objptr, ##1080
0c8a0     F2 3A 02 F1 | 	add	local11, objptr
0c8a4     04 3A 06 F1 | 	add	local11, #4
0c8a8     1D 3B 02 FB | 	rdlong	local11, local11
0c8ac     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c8b0     35 00 00 FF 
0c8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c8b8     00 FF 9F 5D |  if_ne	jmp	#LR__1013
0c8bc                 | LR__1016
0c8bc                 | '     if lparts(ct).token=token_end then return 14
0c8bc     37 00 00 FF 
0c8c0     44 E4 05 F1 | 	add	objptr, ##28228
0c8c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c8c8     03 2E 66 F0 | 	shl	local05, #3
0c8cc     02 00 00 FF 
0c8d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c8d4     F2 2E 02 F1 | 	add	local05, objptr
0c8d8     04 2E 06 F1 | 	add	local05, #4
0c8dc     17 3B 02 FB | 	rdlong	local11, local05
0c8e0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c8e4     35 00 00 FF 
0c8e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c8ec     0E FA 05 A6 |  if_e	mov	result1, #14
0c8f0     88 01 90 AD |  if_e	jmp	#LR__1019
0c8f4                 | LR__1017
0c8f4     1B 29 02 F6 | 	mov	local02, local09
0c8f8     11 2A 06 F6 | 	mov	local03, #17
0c8fc     19 27 02 F6 | 	mov	local01, local07
0c900     13 39 02 F6 | 	mov	local10, local01
0c904     14 3D 02 F6 | 	mov	local12, local02
0c908     15 3F 02 F6 | 	mov	local13, local03
0c90c     4A 00 00 FF 
0c910     7C E4 05 F1 | 	add	objptr, ##38012
0c914     F2 40 02 FB | 	rdlong	local14, objptr
0c918     20 43 02 F6 | 	mov	local15, local14
0c91c     01 42 66 F0 | 	shl	local15, #1
0c920     20 43 02 F1 | 	add	local15, local14
0c924     02 42 66 F0 | 	shl	local15, #2
0c928     03 00 00 FF 
0c92c     00 E4 85 F1 | 	sub	objptr, ##1536
0c930     F2 42 02 F1 | 	add	local15, objptr
0c934     21 39 62 FC | 	wrlong	local10, local15
0c938     03 00 00 FF 
0c93c     00 E4 05 F1 | 	add	objptr, ##1536
0c940     F2 38 02 FB | 	rdlong	local10, objptr
0c944     1C 45 02 F6 | 	mov	local16, local10
0c948     01 44 66 F0 | 	shl	local16, #1
0c94c     1C 45 02 F1 | 	add	local16, local10
0c950     02 44 66 F0 | 	shl	local16, #2
0c954     03 00 00 FF 
0c958     00 E4 85 F1 | 	sub	objptr, ##1536
0c95c     F2 44 02 F1 | 	add	local16, objptr
0c960     04 44 06 F1 | 	add	local16, #4
0c964     22 3D 62 FC | 	wrlong	local12, local16
0c968     03 00 00 FF 
0c96c     00 E4 05 F1 | 	add	objptr, ##1536
0c970     F2 38 02 FB | 	rdlong	local10, objptr
0c974     1C 47 02 F6 | 	mov	local17, local10
0c978     01 46 66 F0 | 	shl	local17, #1
0c97c     1C 47 02 F1 | 	add	local17, local10
0c980     02 46 66 F0 | 	shl	local17, #2
0c984     03 00 00 FF 
0c988     00 E4 85 F1 | 	sub	objptr, ##1536
0c98c     F2 46 02 F1 | 	add	local17, objptr
0c990     08 46 06 F1 | 	add	local17, #8
0c994     23 3F 62 FC | 	wrlong	local13, local17
0c998     03 00 00 FF 
0c99c     00 E4 05 F1 | 	add	objptr, ##1536
0c9a0     F2 38 02 FB | 	rdlong	local10, objptr
0c9a4     01 38 06 F1 | 	add	local10, #1
0c9a8     F2 38 62 FC | 	wrlong	local10, objptr
0c9ac     4A 00 00 FF 
0c9b0     7C E4 85 F1 | 	sub	objptr, ##38012
0c9b4                 | ' t2.result.twowords(1)=numpar
0c9b4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0c9b4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c9b4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c9b4     FF FF 7F FF 
0c9b8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c9bc     B8 00 90 5D |  if_ne	jmp	#LR__1018
0c9c0     15 2A 06 F6 | 	mov	local03, #21
0c9c4     13 39 02 F6 | 	mov	local10, local01
0c9c8     14 3D 02 F6 | 	mov	local12, local02
0c9cc     15 3F 02 F6 | 	mov	local13, local03
0c9d0     4A 00 00 FF 
0c9d4     7C E4 05 F1 | 	add	objptr, ##38012
0c9d8     F2 40 02 FB | 	rdlong	local14, objptr
0c9dc     20 43 02 F6 | 	mov	local15, local14
0c9e0     01 42 66 F0 | 	shl	local15, #1
0c9e4     20 43 02 F1 | 	add	local15, local14
0c9e8     02 42 66 F0 | 	shl	local15, #2
0c9ec     03 00 00 FF 
0c9f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c9f4     F2 42 02 F1 | 	add	local15, objptr
0c9f8     21 39 62 FC | 	wrlong	local10, local15
0c9fc     03 00 00 FF 
0ca00     00 E4 05 F1 | 	add	objptr, ##1536
0ca04     F2 46 02 FB | 	rdlong	local17, objptr
0ca08     23 45 02 F6 | 	mov	local16, local17
0ca0c     01 44 66 F0 | 	shl	local16, #1
0ca10     23 45 02 F1 | 	add	local16, local17
0ca14     02 44 66 F0 | 	shl	local16, #2
0ca18     03 00 00 FF 
0ca1c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca20     F2 44 02 F1 | 	add	local16, objptr
0ca24     04 44 06 F1 | 	add	local16, #4
0ca28     22 3D 62 FC | 	wrlong	local12, local16
0ca2c     03 00 00 FF 
0ca30     00 E4 05 F1 | 	add	objptr, ##1536
0ca34     F2 44 02 FB | 	rdlong	local16, objptr
0ca38     22 47 02 F6 | 	mov	local17, local16
0ca3c     01 46 66 F0 | 	shl	local17, #1
0ca40     22 47 02 F1 | 	add	local17, local16
0ca44     02 46 66 F0 | 	shl	local17, #2
0ca48     03 00 00 FF 
0ca4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca50     F2 46 02 F1 | 	add	local17, objptr
0ca54     08 46 06 F1 | 	add	local17, #8
0ca58     23 3F 62 FC | 	wrlong	local13, local17
0ca5c     03 00 00 FF 
0ca60     00 E4 05 F1 | 	add	objptr, ##1536
0ca64     F2 38 02 FB | 	rdlong	local10, objptr
0ca68     01 38 06 F1 | 	add	local10, #1
0ca6c     F2 38 62 FC | 	wrlong	local10, objptr
0ca70     4A 00 00 FF 
0ca74     7C E4 85 F1 | 	sub	objptr, ##38012
0ca78                 | LR__1018
0ca78                 | ' return 0
0ca78     00 FA 05 F6 | 	mov	result1, #0
0ca7c                 | LR__1019
0ca7c     A7 F0 03 F6 | 	mov	ptra, fp
0ca80     B2 00 A0 FD | 	call	#popregs_
0ca84                 | _getvar_ret
0ca84     2D 00 64 FD | 	ret
0ca88                 | 
0ca88                 | ' 
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' 
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '                                                                                                                                       -
0ca88                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0ca88                 | ' '                                                                                                                                       -
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0ca88                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' function execute_line (astart=0 as integer) as integer
0ca88                 | _execute_line
0ca88     04 4A 05 F6 | 	mov	COUNT_, #4
0ca8c     A8 00 A0 FD | 	call	#pushregs_
0ca90     50 00 00 FF 
0ca94     BC E4 05 F1 | 	add	objptr, ##41148
0ca98     F2 00 68 FC | 	wrlong	#0, objptr
0ca9c                 | ' 
0ca9c                 | ' runptr2=0
0ca9c                 | ' for lineptr_e=astart to lineptr-1
0ca9c     06 00 00 FF 
0caa0     3C E4 85 F1 | 	sub	objptr, ##3132
0caa4     F2 12 62 FC | 	wrlong	arg01, objptr
0caa8     04 E4 85 F1 | 	sub	objptr, #4
0caac     F2 26 02 FB | 	rdlong	local01, objptr
0cab0     4A 00 00 FF 
0cab4     7C E4 85 F1 | 	sub	objptr, ##38012
0cab8                 | LR__1020
0cab8     4A 00 00 FF 
0cabc     80 E4 05 F1 | 	add	objptr, ##38016
0cac0     F2 FA 01 FB | 	rdlong	result1, objptr
0cac4     4A 00 00 FF 
0cac8     80 E4 85 F1 | 	sub	objptr, ##38016
0cacc     13 FB 51 F2 | 	cmps	result1, local01 wc
0cad0     98 00 90 3D |  if_ae	jmp	#LR__1021
0cad4     4A 00 00 FF 
0cad8     80 E4 05 F1 | 	add	objptr, ##38016
0cadc     F2 FA 01 FB | 	rdlong	result1, objptr
0cae0     FD 28 02 F6 | 	mov	local02, result1
0cae4     01 28 66 F0 | 	shl	local02, #1
0cae8     FD 28 02 F1 | 	add	local02, result1
0caec     02 28 66 F0 | 	shl	local02, #2
0caf0     03 00 00 FF 
0caf4     04 E4 85 F1 | 	sub	objptr, ##1540
0caf8     F2 28 02 F1 | 	add	local02, objptr
0cafc     08 28 06 F1 | 	add	local02, #8
0cb00     14 29 02 FB | 	rdlong	local02, local02
0cb04     14 29 E2 F8 | 	getbyte	local02, local02, #0
0cb08     02 28 66 F0 | 	shl	local02, #2
0cb0c     04 00 00 FF 
0cb10     1C E4 85 F1 | 	sub	objptr, ##2076
0cb14     F2 28 02 F1 | 	add	local02, objptr
0cb18     14 29 02 FB | 	rdlong	local02, local02
0cb1c     14 2B 02 F6 | 	mov	local03, local02
0cb20     13 28 46 F7 | 	zerox	local02, #19
0cb24     14 2A 46 F0 | 	shr	local03, #20
0cb28     02 2A 66 F0 | 	shl	local03, #2
0cb2c     ED 2A 02 F1 | 	add	local03, __methods__
0cb30     15 2B 02 FB | 	rdlong	local03, local03
0cb34     43 00 00 FF 
0cb38     60 E4 85 F1 | 	sub	objptr, ##34400
0cb3c     F2 2C 02 F6 | 	mov	local04, objptr
0cb40     14 E5 01 F6 | 	mov	objptr, local02
0cb44     2D 2A 62 FD | 	call	local03
0cb48     16 E5 01 F6 | 	mov	objptr, local04
0cb4c     4A 00 00 FF 
0cb50     80 E4 05 F1 | 	add	objptr, ##38016
0cb54     F2 2C 02 FB | 	rdlong	local04, objptr
0cb58     01 2C 06 F1 | 	add	local04, #1
0cb5c     F2 2C 62 FC | 	wrlong	local04, objptr
0cb60     4A 00 00 FF 
0cb64     80 E4 85 F1 | 	sub	objptr, ##38016
0cb68     4C FF 9F FD | 	jmp	#LR__1020
0cb6c                 | LR__1021
0cb6c                 | ' return runptr2
0cb6c     50 00 00 FF 
0cb70     BC E4 05 F1 | 	add	objptr, ##41148
0cb74     F2 FA 01 FB | 	rdlong	result1, objptr
0cb78     50 00 00 FF 
0cb7c     BC E4 85 F1 | 	sub	objptr, ##41148
0cb80     A7 F0 03 F6 | 	mov	ptra, fp
0cb84     B2 00 A0 FD | 	call	#popregs_
0cb88                 | _execute_line_ret
0cb88     2D 00 64 FD | 	ret
0cb8c                 | 
0cb8c                 | ' 
0cb8c                 | ' 
0cb8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb8c                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0cb8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb8c                 | ' 
0cb8c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0cb8c                 | ' 
0cb8c                 | ' function pop() as expr_result
0cb8c                 | _pop
0cb8c                 | ' if stackpointer=0 then
0cb8c     43 00 00 FF 
0cb90     58 E4 05 F1 | 	add	objptr, ##34392
0cb94     F2 FA 09 FB | 	rdlong	result1, objptr wz
0cb98     43 00 00 FF 
0cb9c     58 E4 85 F1 | 	sub	objptr, ##34392
0cba0     FF 04 06 A6 |  if_e	mov	_var03, #255
0cba4     18 00 06 A6 |  if_e	mov	_var01, #24
0cba8     68 00 90 AD |  if_e	jmp	#LR__1030
0cbac     43 00 00 FF 
0cbb0     58 E4 05 F1 | 	add	objptr, ##34392
0cbb4     F2 FA 01 FB | 	rdlong	result1, objptr
0cbb8     01 FA 85 F1 | 	sub	result1, #1
0cbbc     F2 FA 61 FC | 	wrlong	result1, objptr
0cbc0     FD FE 01 F6 | 	mov	result3, result1
0cbc4     01 FE 65 F0 | 	shl	result3, #1
0cbc8     FD FE 01 F1 | 	add	result3, result1
0cbcc     02 FE 65 F0 | 	shl	result3, #2
0cbd0     0C 00 00 FF 
0cbd4     0C E4 85 F1 | 	sub	objptr, ##6156
0cbd8     F2 FE 01 F1 | 	add	result3, objptr
0cbdc     FF 00 02 FB | 	rdlong	_var01, result3
0cbe0     04 FE 05 F1 | 	add	result3, #4
0cbe4     FF FE 01 FB | 	rdlong	result3, result3
0cbe8     FD FC 01 F6 | 	mov	result2, result1
0cbec     01 FC 65 F0 | 	shl	result2, #1
0cbf0     FD FC 01 F1 | 	add	result2, result1
0cbf4     02 FC 65 F0 | 	shl	result2, #2
0cbf8     F2 FC 01 F1 | 	add	result2, objptr
0cbfc     08 FC 05 F1 | 	add	result2, #8
0cc00     FE FA 01 FB | 	rdlong	result1, result2
0cc04     FF 02 02 F6 | 	mov	_var02, result3
0cc08     FD 04 02 F6 | 	mov	_var03, result1
0cc0c     37 00 00 FF 
0cc10     4C E4 85 F1 | 	sub	objptr, ##28236
0cc14                 | LR__1030
0cc14                 | ' return t1
0cc14     01 FD 01 F6 | 	mov	result2, _var02
0cc18     02 FF 01 F6 | 	mov	result3, _var03
0cc1c     00 FB 01 F6 | 	mov	result1, _var01
0cc20                 | _pop_ret
0cc20     2D 00 64 FD | 	ret
0cc24                 | 
0cc24                 | ' 
0cc24                 | ' sub push(t1 as expr_result )
0cc24                 | _push
0cc24                 | ' if stackpointer<maxstack then 
0cc24     43 00 00 FF 
0cc28     58 E4 05 F1 | 	add	objptr, ##34392
0cc2c     F2 00 02 FB | 	rdlong	_var01, objptr
0cc30     43 00 00 FF 
0cc34     58 E4 85 F1 | 	sub	objptr, ##34392
0cc38     01 00 00 FF 
0cc3c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0cc40     BC 00 90 3D |  if_ae	jmp	#LR__1040
0cc44     09 01 02 FB | 	rdlong	_var01, arg01
0cc48     04 12 06 F1 | 	add	arg01, #4
0cc4c     09 03 02 FB | 	rdlong	_var02, arg01
0cc50     04 12 06 F1 | 	add	arg01, #4
0cc54     09 13 02 FB | 	rdlong	arg01, arg01
0cc58     43 00 00 FF 
0cc5c     58 E4 05 F1 | 	add	objptr, ##34392
0cc60     F2 04 02 FB | 	rdlong	_var03, objptr
0cc64     02 07 02 F6 | 	mov	_var04, _var03
0cc68     01 06 66 F0 | 	shl	_var04, #1
0cc6c     02 07 02 F1 | 	add	_var04, _var03
0cc70     02 06 66 F0 | 	shl	_var04, #2
0cc74     0C 00 00 FF 
0cc78     0C E4 85 F1 | 	sub	objptr, ##6156
0cc7c     F2 06 02 F1 | 	add	_var04, objptr
0cc80     03 01 62 FC | 	wrlong	_var01, _var04
0cc84     0C 00 00 FF 
0cc88     0C E4 05 F1 | 	add	objptr, ##6156
0cc8c     F2 06 02 FB | 	rdlong	_var04, objptr
0cc90     03 05 02 F6 | 	mov	_var03, _var04
0cc94     01 04 66 F0 | 	shl	_var03, #1
0cc98     03 05 02 F1 | 	add	_var03, _var04
0cc9c     02 04 66 F0 | 	shl	_var03, #2
0cca0     0C 00 00 FF 
0cca4     0C E4 85 F1 | 	sub	objptr, ##6156
0cca8     F2 04 02 F1 | 	add	_var03, objptr
0ccac     04 04 06 F1 | 	add	_var03, #4
0ccb0     02 03 62 FC | 	wrlong	_var02, _var03
0ccb4     0C 00 00 FF 
0ccb8     0C E4 05 F1 | 	add	objptr, ##6156
0ccbc     F2 06 02 FB | 	rdlong	_var04, objptr
0ccc0     03 05 02 F6 | 	mov	_var03, _var04
0ccc4     01 04 66 F0 | 	shl	_var03, #1
0ccc8     03 05 02 F1 | 	add	_var03, _var04
0cccc     02 04 66 F0 | 	shl	_var03, #2
0ccd0     0C 00 00 FF 
0ccd4     0C E4 85 F1 | 	sub	objptr, ##6156
0ccd8     F2 04 02 F1 | 	add	_var03, objptr
0ccdc     08 04 06 F1 | 	add	_var03, #8
0cce0     02 13 62 FC | 	wrlong	arg01, _var03
0cce4     0C 00 00 FF 
0cce8     0C E4 05 F1 | 	add	objptr, ##6156
0ccec     F2 00 02 FB | 	rdlong	_var01, objptr
0ccf0     01 00 06 F1 | 	add	_var01, #1
0ccf4     F2 00 62 FC | 	wrlong	_var01, objptr
0ccf8     43 00 00 FF 
0ccfc     58 E4 85 F1 | 	sub	objptr, ##34392
0cd00                 | LR__1040
0cd00                 | _push_ret
0cd00     2D 00 64 FD | 	ret
0cd04                 | 
0cd04                 | ' 
0cd04                 | ' ' -------------------------------- Runtime converting functions
0cd04                 | ' 
0cd04                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0cd04                 | ' 
0cd04                 | ' function  convertstring(psaddr as ulong) as string
0cd04                 | _convertstring
0cd04     04 4A 05 F6 | 	mov	COUNT_, #4
0cd08     A8 00 A0 FD | 	call	#pushregs_
0cd0c     09 27 02 F6 | 	mov	local01, arg01
0cd10     E8 4A B1 FD | 	call	#_pslpeek
0cd14     FD 28 02 F6 | 	mov	local02, result1
0cd18     A8 01 00 FF 
0cd1c     12 2B 06 F6 | 	mov	local03, ##@LR__5757
0cd20                 | ' l=pslpeek(psaddr) 
0cd20                 | ' s="" 
0cd20                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0cd20     01 2C 06 F6 | 	mov	local04, #1
0cd24     01 28 06 F1 | 	add	local02, #1
0cd28                 | LR__1050
0cd28     14 2D 52 F2 | 	cmps	local04, local02 wc
0cd2c     30 00 90 3D |  if_ae	jmp	#LR__1051
0cd30     13 13 02 F6 | 	mov	arg01, local01
0cd34     03 12 06 F1 | 	add	arg01, #3
0cd38     16 13 02 F1 | 	add	arg01, local04
0cd3c     64 4A B1 FD | 	call	#_pspeek
0cd40     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0cd44     D0 A3 B1 FD | 	call	#__system__Chr_S
0cd48     FD 14 02 F6 | 	mov	arg02, result1
0cd4c     15 13 02 F6 | 	mov	arg01, local03
0cd50     DC 81 B1 FD | 	call	#__system___string_concat
0cd54     FD 2A 02 F6 | 	mov	local03, result1
0cd58     01 2C 06 F1 | 	add	local04, #1
0cd5c     C8 FF 9F FD | 	jmp	#LR__1050
0cd60                 | LR__1051
0cd60                 | ' return s
0cd60     15 FB 01 F6 | 	mov	result1, local03
0cd64     A7 F0 03 F6 | 	mov	ptra, fp
0cd68     B2 00 A0 FD | 	call	#popregs_
0cd6c                 | _convertstring_ret
0cd6c     2D 00 64 FD | 	ret
0cd70                 | 
0cd70                 | ' 
0cd70                 | ' ' converts a variable to an integer
0cd70                 | ' 
0cd70                 | ' function converttoint (t1 as expr_result) as integer 
0cd70                 | _converttoint
0cd70     02 4A 05 F6 | 	mov	COUNT_, #2
0cd74     A8 00 A0 FD | 	call	#pushregs_
0cd78     09 27 02 F6 | 	mov	local01, arg01
0cd7c                 | ' 
0cd7c                 | ' select case t1.result_type
0cd7c     08 26 06 F1 | 	add	local01, #8
0cd80     13 29 02 FB | 	rdlong	local02, local01
0cd84     08 26 86 F1 | 	sub	local01, #8
0cd88     1C 28 0E F2 | 	cmp	local02, #28 wz
0cd8c     2C 00 90 AD |  if_e	jmp	#LR__1060
0cd90     1D 28 0E F2 | 	cmp	local02, #29 wz
0cd94     2C 00 90 AD |  if_e	jmp	#LR__1061
0cd98     1E 28 0E F2 | 	cmp	local02, #30 wz
0cd9c     2C 00 90 AD |  if_e	jmp	#LR__1062
0cda0     1F 28 0E F2 | 	cmp	local02, #31 wz
0cda4     34 00 90 AD |  if_e	jmp	#LR__1063
0cda8     2B 28 0E F2 | 	cmp	local02, #43 wz
0cdac     44 00 90 AD |  if_e	jmp	#LR__1064
0cdb0     2C 28 0E F2 | 	cmp	local02, #44 wz
0cdb4     5C 00 90 AD |  if_e	jmp	#LR__1065
0cdb8     60 00 90 FD | 	jmp	#LR__1066
0cdbc                 | LR__1060
0cdbc     13 FB 01 FB | 	rdlong	result1, local01
0cdc0     5C 00 90 FD | 	jmp	#LR__1067
0cdc4                 | LR__1061
0cdc4     13 FB 01 FB | 	rdlong	result1, local01
0cdc8     54 00 90 FD | 	jmp	#LR__1067
0cdcc                 | LR__1062
0cdcc     13 13 02 FB | 	rdlong	arg01, local01
0cdd0     01 14 06 F6 | 	mov	arg02, #1
0cdd4     40 B4 B1 FD | 	call	#__system___float_tointeger
0cdd8     44 00 90 FD | 	jmp	#LR__1067
0cddc                 | LR__1063
0cddc     13 13 02 FB | 	rdlong	arg01, local01
0cde0     78 B7 B1 FD | 	call	#__system____builtin_atof
0cde4     FD 12 02 F6 | 	mov	arg01, result1
0cde8     01 14 06 F6 | 	mov	arg02, #1
0cdec     28 B4 B1 FD | 	call	#__system___float_tointeger
0cdf0     2C 00 90 FD | 	jmp	#LR__1067
0cdf4                 | LR__1064
0cdf4     13 13 02 FB | 	rdlong	arg01, local01
0cdf8     08 FF BF FD | 	call	#_convertstring
0cdfc     FD 12 02 F6 | 	mov	arg01, result1
0ce00     58 B7 B1 FD | 	call	#__system____builtin_atof
0ce04     FD 12 02 F6 | 	mov	arg01, result1
0ce08     01 14 06 F6 | 	mov	arg02, #1
0ce0c     08 B4 B1 FD | 	call	#__system___float_tointeger
0ce10     0C 00 90 FD | 	jmp	#LR__1067
0ce14                 | LR__1065
0ce14     13 FB 01 FB | 	rdlong	result1, local01
0ce18     04 00 90 FD | 	jmp	#LR__1067
0ce1c                 | LR__1066
0ce1c     00 FA 05 F6 | 	mov	result1, #0
0ce20                 | LR__1067
0ce20     A7 F0 03 F6 | 	mov	ptra, fp
0ce24     B2 00 A0 FD | 	call	#popregs_
0ce28                 | _converttoint_ret
0ce28     2D 00 64 FD | 	ret
0ce2c                 | 
0ce2c                 | ' 
0ce2c                 | ' ' converts a variable to float
0ce2c                 | ' 
0ce2c                 | ' function converttofloat (t1 as expr_result) as single
0ce2c                 | _converttofloat
0ce2c     03 4A 05 F6 | 	mov	COUNT_, #3
0ce30     A8 00 A0 FD | 	call	#pushregs_
0ce34     09 27 02 F6 | 	mov	local01, arg01
0ce38                 | ' 
0ce38                 | ' select case t1.result_type
0ce38     08 26 06 F1 | 	add	local01, #8
0ce3c     13 29 02 FB | 	rdlong	local02, local01
0ce40     08 26 86 F1 | 	sub	local01, #8
0ce44     1C 28 0E F2 | 	cmp	local02, #28 wz
0ce48     24 00 90 AD |  if_e	jmp	#LR__1070
0ce4c     1D 28 0E F2 | 	cmp	local02, #29 wz
0ce50     38 00 90 AD |  if_e	jmp	#LR__1071
0ce54     1E 28 0E F2 | 	cmp	local02, #30 wz
0ce58     3C 00 90 AD |  if_e	jmp	#LR__1072
0ce5c     1F 28 0E F2 | 	cmp	local02, #31 wz
0ce60     3C 00 90 AD |  if_e	jmp	#LR__1073
0ce64     2B 28 0E F2 | 	cmp	local02, #43 wz
0ce68     40 00 90 AD |  if_e	jmp	#LR__1074
0ce6c     50 00 90 FD | 	jmp	#LR__1075
0ce70                 | LR__1070
0ce70     13 13 02 FB | 	rdlong	arg01, local01
0ce74     09 13 52 F6 | 	abs	arg01, arg01 wc
0ce78     1F 2A C6 C9 |  if_b	decod	local03, #31
0ce7c     00 2A 06 36 |  if_ae	mov	local03, #0
0ce80     C8 AA B1 FD | 	call	#__system___float_fromuns
0ce84     15 FB 61 F5 | 	xor	result1, local03
0ce88     38 00 90 FD | 	jmp	#LR__1076
0ce8c                 | LR__1071
0ce8c     13 13 02 FB | 	rdlong	arg01, local01
0ce90     B8 AA B1 FD | 	call	#__system___float_fromuns
0ce94     2C 00 90 FD | 	jmp	#LR__1076
0ce98                 | LR__1072
0ce98     13 FB 01 FB | 	rdlong	result1, local01
0ce9c     24 00 90 FD | 	jmp	#LR__1076
0cea0                 | LR__1073
0cea0     13 13 02 FB | 	rdlong	arg01, local01
0cea4     B4 B6 B1 FD | 	call	#__system____builtin_atof
0cea8     18 00 90 FD | 	jmp	#LR__1076
0ceac                 | LR__1074
0ceac     13 13 02 FB | 	rdlong	arg01, local01
0ceb0     50 FE BF FD | 	call	#_convertstring
0ceb4     FD 12 02 F6 | 	mov	arg01, result1
0ceb8     A0 B6 B1 FD | 	call	#__system____builtin_atof
0cebc     04 00 90 FD | 	jmp	#LR__1076
0cec0                 | LR__1075
0cec0     00 FA 05 F6 | 	mov	result1, #0
0cec4                 | LR__1076
0cec4     A7 F0 03 F6 | 	mov	ptra, fp
0cec8     B2 00 A0 FD | 	call	#popregs_
0cecc                 | _converttofloat_ret
0cecc     2D 00 64 FD | 	ret
0ced0                 | 
0ced0                 | ' 
0ced0                 | ' '----------------- End of converting 
0ced0                 | ' 
0ced0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ced0                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0ced0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ced0                 | ' 
0ced0                 | ' sub csave_block(address as ulong)
0ced0                 | _csave_block
0ced0     09 01 02 F6 | 	mov	_var01, arg01
0ced4                 | ' 
0ced4                 | ' for i=0 to 63 step 2
0ced4     00 02 06 F6 | 	mov	_var02, #0
0ced8                 | LR__1080
0ced8                 | '   do: loop until lpeek(base+64*7)>32768
0ced8     37 00 00 FF 
0cedc     10 E4 05 F1 | 	add	objptr, ##28176
0cee0     97 0C 48 FB | 	callpa	#(@LR__1082-@LR__1081)>>2,fcache_load_ptr_
0cee4                 | LR__1081
0cee4     F2 12 02 FB | 	rdlong	arg01, objptr
0cee8     C0 13 06 F1 | 	add	arg01, #448
0ceec     09 FB 01 FB | 	rdlong	result1, arg01
0cef0     40 00 00 FF 
0cef4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cef8     E8 FF 9F CD |  if_b	jmp	#LR__1081
0cefc                 | LR__1082
0cefc     00 13 02 F6 | 	mov	arg01, _var01
0cf00     01 05 02 F6 | 	mov	_var03, _var02
0cf04     02 04 66 F0 | 	shl	_var03, #2
0cf08     02 13 02 F1 | 	add	arg01, _var03
0cf0c     09 07 02 FB | 	rdlong	_var04, arg01
0cf10     1B 00 00 FF 
0cf14     34 E4 05 F1 | 	add	objptr, ##13876
0cf18     F2 06 62 FC | 	wrlong	_var04, objptr
0cf1c     52 00 00 FF 
0cf20     44 E4 85 F1 | 	sub	objptr, ##42052
0cf24                 | '   q=lpeek(address+4*i)
0cf24                 | '      for bit=0 to 31
0cf24     00 08 06 F6 | 	mov	_var05, #0
0cf28     97 84 48 FB | 	callpa	#(@LR__1087-@LR__1083)>>2,fcache_load_ptr_
0cf2c                 | LR__1083
0cf2c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0cf2c     52 00 00 FF 
0cf30     44 E4 05 F1 | 	add	objptr, ##42052
0cf34     F2 06 02 FB | 	rdlong	_var04, objptr
0cf38     52 00 00 FF 
0cf3c     44 E4 85 F1 | 	sub	objptr, ##42052
0cf40     04 05 C2 F9 | 	decod	_var03, _var05
0cf44     02 07 CA F7 | 	test	_var04, _var03 wz
0cf48     60 00 90 AD |  if_e	jmp	#LR__1084
0cf4c     04 05 02 F6 | 	mov	_var03, _var05
0cf50     02 04 66 F0 | 	shl	_var03, #2
0cf54     4D 00 00 FF 
0cf58     B4 E5 05 F1 | 	add	objptr, ##39860
0cf5c     F2 04 02 F1 | 	add	_var03, objptr
0cf60     02 FF 48 FC | 	wrbyte	#127, _var03
0cf64     04 05 02 F6 | 	mov	_var03, _var05
0cf68     02 04 66 F0 | 	shl	_var03, #2
0cf6c     01 04 06 F1 | 	add	_var03, #1
0cf70     F2 04 02 F1 | 	add	_var03, objptr
0cf74     02 01 49 FC | 	wrbyte	#128, _var03
0cf78     04 05 02 F6 | 	mov	_var03, _var05
0cf7c     02 04 66 F0 | 	shl	_var03, #2
0cf80     02 04 06 F1 | 	add	_var03, #2
0cf84     F2 04 02 F1 | 	add	_var03, objptr
0cf88     02 FF 48 FC | 	wrbyte	#127, _var03
0cf8c     04 05 02 F6 | 	mov	_var03, _var05
0cf90     02 04 66 F0 | 	shl	_var03, #2
0cf94     03 04 06 F1 | 	add	_var03, #3
0cf98     F2 04 02 F1 | 	add	_var03, objptr
0cf9c     02 01 49 FC | 	wrbyte	#128, _var03
0cfa0     4D 00 00 FF 
0cfa4     B4 E5 85 F1 | 	sub	objptr, ##39860
0cfa8     5C 00 90 FD | 	jmp	#LR__1085
0cfac                 | LR__1084
0cfac     04 05 02 F6 | 	mov	_var03, _var05
0cfb0     02 04 66 F0 | 	shl	_var03, #2
0cfb4     4D 00 00 FF 
0cfb8     B4 E5 05 F1 | 	add	objptr, ##39860
0cfbc     F2 04 02 F1 | 	add	_var03, objptr
0cfc0     02 01 49 FC | 	wrbyte	#128, _var03
0cfc4     04 05 02 F6 | 	mov	_var03, _var05
0cfc8     02 04 66 F0 | 	shl	_var03, #2
0cfcc     01 04 06 F1 | 	add	_var03, #1
0cfd0     F2 04 02 F1 | 	add	_var03, objptr
0cfd4     02 01 49 FC | 	wrbyte	#128, _var03
0cfd8     04 05 02 F6 | 	mov	_var03, _var05
0cfdc     02 04 66 F0 | 	shl	_var03, #2
0cfe0     02 04 06 F1 | 	add	_var03, #2
0cfe4     F2 04 02 F1 | 	add	_var03, objptr
0cfe8     02 FF 48 FC | 	wrbyte	#127, _var03
0cfec     04 05 02 F6 | 	mov	_var03, _var05
0cff0     02 04 66 F0 | 	shl	_var03, #2
0cff4     03 04 06 F1 | 	add	_var03, #3
0cff8     F2 04 02 F1 | 	add	_var03, objptr
0cffc     02 FF 48 FC | 	wrbyte	#127, _var03
0d000     4D 00 00 FF 
0d004     B4 E5 85 F1 | 	sub	objptr, ##39860
0d008                 | LR__1085
0d008     01 08 06 F1 | 	add	_var05, #1
0d00c     20 08 56 F2 | 	cmps	_var05, #32 wc
0d010     18 FF 9F CD |  if_b	jmp	#LR__1083
0d014                 | '   do: loop until lpeek(base+64*7)<32768
0d014     37 00 00 FF 
0d018     10 E4 05 F1 | 	add	objptr, ##28176
0d01c                 | LR__1086
0d01c     F2 12 02 FB | 	rdlong	arg01, objptr
0d020     C0 13 06 F1 | 	add	arg01, #448
0d024     09 FB 01 FB | 	rdlong	result1, arg01
0d028     40 00 00 FF 
0d02c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d030     E8 FF 9F 3D |  if_ae	jmp	#LR__1086
0d034                 | LR__1087
0d034     00 13 02 F6 | 	mov	arg01, _var01
0d038     04 12 06 F1 | 	add	arg01, #4
0d03c     01 05 02 F6 | 	mov	_var03, _var02
0d040     02 04 66 F0 | 	shl	_var03, #2
0d044     02 13 02 F1 | 	add	arg01, _var03
0d048     09 07 02 FB | 	rdlong	_var04, arg01
0d04c     1B 00 00 FF 
0d050     34 E4 05 F1 | 	add	objptr, ##13876
0d054     F2 06 62 FC | 	wrlong	_var04, objptr
0d058     52 00 00 FF 
0d05c     44 E4 85 F1 | 	sub	objptr, ##42052
0d060                 | '   q=lpeek(address+4+4*i)
0d060                 | '      for bit=0 to 31
0d060     00 08 06 F6 | 	mov	_var05, #0
0d064     97 94 48 FB | 	callpa	#(@LR__1091-@LR__1088)>>2,fcache_load_ptr_
0d068                 | LR__1088
0d068                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0d068     52 00 00 FF 
0d06c     44 E4 05 F1 | 	add	objptr, ##42052
0d070     F2 06 02 FB | 	rdlong	_var04, objptr
0d074     52 00 00 FF 
0d078     44 E4 85 F1 | 	sub	objptr, ##42052
0d07c     04 05 C2 F9 | 	decod	_var03, _var05
0d080     02 07 CA F7 | 	test	_var04, _var03 wz
0d084     80 00 90 AD |  if_e	jmp	#LR__1089
0d088     04 0B 02 F6 | 	mov	_var06, _var05
0d08c     02 0A 66 F0 | 	shl	_var06, #2
0d090     80 04 06 F6 | 	mov	_var03, #128
0d094     05 05 02 F1 | 	add	_var03, _var06
0d098     4D 00 00 FF 
0d09c     B4 E5 05 F1 | 	add	objptr, ##39860
0d0a0     F2 04 02 F1 | 	add	_var03, objptr
0d0a4     02 FF 48 FC | 	wrbyte	#127, _var03
0d0a8     04 0B 02 F6 | 	mov	_var06, _var05
0d0ac     02 0A 66 F0 | 	shl	_var06, #2
0d0b0     80 04 06 F6 | 	mov	_var03, #128
0d0b4     05 05 02 F1 | 	add	_var03, _var06
0d0b8     01 04 06 F1 | 	add	_var03, #1
0d0bc     F2 04 02 F1 | 	add	_var03, objptr
0d0c0     02 01 49 FC | 	wrbyte	#128, _var03
0d0c4     04 0B 02 F6 | 	mov	_var06, _var05
0d0c8     02 0A 66 F0 | 	shl	_var06, #2
0d0cc     80 04 06 F6 | 	mov	_var03, #128
0d0d0     05 05 02 F1 | 	add	_var03, _var06
0d0d4     02 04 06 F1 | 	add	_var03, #2
0d0d8     F2 04 02 F1 | 	add	_var03, objptr
0d0dc     02 FF 48 FC | 	wrbyte	#127, _var03
0d0e0     04 0B 02 F6 | 	mov	_var06, _var05
0d0e4     02 0A 66 F0 | 	shl	_var06, #2
0d0e8     80 04 06 F6 | 	mov	_var03, #128
0d0ec     05 05 02 F1 | 	add	_var03, _var06
0d0f0     03 04 06 F1 | 	add	_var03, #3
0d0f4     F2 04 02 F1 | 	add	_var03, objptr
0d0f8     02 01 49 FC | 	wrbyte	#128, _var03
0d0fc     4D 00 00 FF 
0d100     B4 E5 85 F1 | 	sub	objptr, ##39860
0d104     7C 00 90 FD | 	jmp	#LR__1090
0d108                 | LR__1089
0d108     04 0B 02 F6 | 	mov	_var06, _var05
0d10c     02 0A 66 F0 | 	shl	_var06, #2
0d110     80 04 06 F6 | 	mov	_var03, #128
0d114     05 05 02 F1 | 	add	_var03, _var06
0d118     4D 00 00 FF 
0d11c     B4 E5 05 F1 | 	add	objptr, ##39860
0d120     F2 04 02 F1 | 	add	_var03, objptr
0d124     02 01 49 FC | 	wrbyte	#128, _var03
0d128     04 0B 02 F6 | 	mov	_var06, _var05
0d12c     02 0A 66 F0 | 	shl	_var06, #2
0d130     80 04 06 F6 | 	mov	_var03, #128
0d134     05 05 02 F1 | 	add	_var03, _var06
0d138     01 04 06 F1 | 	add	_var03, #1
0d13c     F2 04 02 F1 | 	add	_var03, objptr
0d140     02 01 49 FC | 	wrbyte	#128, _var03
0d144     04 0B 02 F6 | 	mov	_var06, _var05
0d148     02 0A 66 F0 | 	shl	_var06, #2
0d14c     80 04 06 F6 | 	mov	_var03, #128
0d150     05 05 02 F1 | 	add	_var03, _var06
0d154     02 04 06 F1 | 	add	_var03, #2
0d158     F2 04 02 F1 | 	add	_var03, objptr
0d15c     02 FF 48 FC | 	wrbyte	#127, _var03
0d160     04 0B 02 F6 | 	mov	_var06, _var05
0d164     02 0A 66 F0 | 	shl	_var06, #2
0d168     80 04 06 F6 | 	mov	_var03, #128
0d16c     05 05 02 F1 | 	add	_var03, _var06
0d170     03 04 06 F1 | 	add	_var03, #3
0d174     F2 04 02 F1 | 	add	_var03, objptr
0d178     02 FF 48 FC | 	wrbyte	#127, _var03
0d17c     4D 00 00 FF 
0d180     B4 E5 85 F1 | 	sub	objptr, ##39860
0d184                 | LR__1090
0d184     01 08 06 F1 | 	add	_var05, #1
0d188     20 08 56 F2 | 	cmps	_var05, #32 wc
0d18c     D8 FE 9F CD |  if_b	jmp	#LR__1088
0d190                 | LR__1091
0d190     02 02 06 F1 | 	add	_var02, #2
0d194     40 02 56 F2 | 	cmps	_var02, #64 wc
0d198     3C FD 9F CD |  if_b	jmp	#LR__1080
0d19c                 | ' do: loop until lpeek(base+64*7)>32768
0d19c     37 00 00 FF 
0d1a0     10 E4 05 F1 | 	add	objptr, ##28176
0d1a4     97 84 48 FB | 	callpa	#(@LR__1100-@LR__1092)>>2,fcache_load_ptr_
0d1a8                 | LR__1092
0d1a8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ac     C0 13 06 F1 | 	add	arg01, #448
0d1b0     09 FB 01 FB | 	rdlong	result1, arg01
0d1b4     40 00 00 FF 
0d1b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d1bc     E8 FF 9F CD |  if_b	jmp	#LR__1092
0d1c0     37 00 00 FF 
0d1c4     10 E4 85 F1 | 	sub	objptr, ##28176
0d1c8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d1c8     00 02 06 F6 | 	mov	_var02, #0
0d1cc                 | LR__1093
0d1cc     01 07 52 F6 | 	abs	_var04, _var02 wc
0d1d0     07 06 06 F5 | 	and	_var04, #7
0d1d4     03 07 82 F6 | 	negc	_var04, _var04
0d1d8     04 06 56 F2 | 	cmps	_var04, #4 wc
0d1dc     20 00 90 3D |  if_ae	jmp	#LR__1094
0d1e0     01 0B 02 F6 | 	mov	_var06, _var02
0d1e4     4D 00 00 FF 
0d1e8     B4 E5 05 F1 | 	add	objptr, ##39860
0d1ec     F2 0A 02 F1 | 	add	_var06, objptr
0d1f0     05 FF 48 FC | 	wrbyte	#127, _var06
0d1f4     4D 00 00 FF 
0d1f8     B4 E5 85 F1 | 	sub	objptr, ##39860
0d1fc     1C 00 90 FD | 	jmp	#LR__1095
0d200                 | LR__1094
0d200     01 0B 02 F6 | 	mov	_var06, _var02
0d204     4D 00 00 FF 
0d208     B4 E5 05 F1 | 	add	objptr, ##39860
0d20c     F2 0A 02 F1 | 	add	_var06, objptr
0d210     05 01 49 FC | 	wrbyte	#128, _var06
0d214     4D 00 00 FF 
0d218     B4 E5 85 F1 | 	sub	objptr, ##39860
0d21c                 | LR__1095
0d21c     01 02 06 F1 | 	add	_var02, #1
0d220     80 02 56 F2 | 	cmps	_var02, #128 wc
0d224     A4 FF 9F CD |  if_b	jmp	#LR__1093
0d228                 | ' 
0d228                 | ' do: loop until lpeek(base+64*7)<32768
0d228     37 00 00 FF 
0d22c     10 E4 05 F1 | 	add	objptr, ##28176
0d230                 | LR__1096
0d230     F2 12 02 FB | 	rdlong	arg01, objptr
0d234     C0 13 06 F1 | 	add	arg01, #448
0d238     09 FB 01 FB | 	rdlong	result1, arg01
0d23c     40 00 00 FF 
0d240     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d244     E8 FF 9F 3D |  if_ae	jmp	#LR__1096
0d248     37 00 00 FF 
0d24c     10 E4 85 F1 | 	sub	objptr, ##28176
0d250                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d250     80 02 06 F6 | 	mov	_var02, #128
0d254                 | LR__1097
0d254     01 07 52 F6 | 	abs	_var04, _var02 wc
0d258     07 06 06 F5 | 	and	_var04, #7
0d25c     03 07 82 F6 | 	negc	_var04, _var04
0d260     04 06 56 F2 | 	cmps	_var04, #4 wc
0d264     20 00 90 3D |  if_ae	jmp	#LR__1098
0d268     01 0B 02 F6 | 	mov	_var06, _var02
0d26c     4D 00 00 FF 
0d270     B4 E5 05 F1 | 	add	objptr, ##39860
0d274     F2 0A 02 F1 | 	add	_var06, objptr
0d278     05 FF 48 FC | 	wrbyte	#127, _var06
0d27c     4D 00 00 FF 
0d280     B4 E5 85 F1 | 	sub	objptr, ##39860
0d284     1C 00 90 FD | 	jmp	#LR__1099
0d288                 | LR__1098
0d288     01 0B 02 F6 | 	mov	_var06, _var02
0d28c     4D 00 00 FF 
0d290     B4 E5 05 F1 | 	add	objptr, ##39860
0d294     F2 0A 02 F1 | 	add	_var06, objptr
0d298     05 01 49 FC | 	wrbyte	#128, _var06
0d29c     4D 00 00 FF 
0d2a0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d2a4                 | LR__1099
0d2a4     01 02 06 F1 | 	add	_var02, #1
0d2a8     00 03 16 F2 | 	cmp	_var02, #256 wc
0d2ac     A4 FF 9F CD |  if_b	jmp	#LR__1097
0d2b0                 | LR__1100
0d2b0                 | _csave_block_ret
0d2b0     2D 00 64 FD | 	ret
0d2b4                 | 
0d2b4                 | ' 
0d2b4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d2b4                 | _csave_addtoblock
0d2b4     04 4A 05 F6 | 	mov	COUNT_, #4
0d2b8     A8 00 A0 FD | 	call	#pushregs_
0d2bc     09 27 02 F6 | 	mov	local01, arg01
0d2c0                 | ' 
0d2c0                 | ' if force=0 then
0d2c0     07 14 4E F7 | 	zerox	arg02, #7 wz
0d2c4     78 00 90 5D |  if_ne	jmp	#LR__1110
0d2c8     50 00 00 FF 
0d2cc     B4 E4 05 F1 | 	add	objptr, ##41140
0d2d0     F2 14 02 FB | 	rdlong	arg02, objptr
0d2d4     02 00 00 FF 
0d2d8     00 E4 85 F1 | 	sub	objptr, ##1024
0d2dc     F2 14 02 F1 | 	add	arg02, objptr
0d2e0     0A 27 42 FC | 	wrbyte	local01, arg02
0d2e4     02 00 00 FF 
0d2e8     00 E4 05 F1 | 	add	objptr, ##1024
0d2ec     F2 26 02 FB | 	rdlong	local01, objptr
0d2f0     01 26 06 F1 | 	add	local01, #1
0d2f4     F2 26 62 FC | 	wrlong	local01, objptr
0d2f8                 | '   block(blockptr)=d
0d2f8                 | '   blockptr+=1
0d2f8                 | '   if blockptr>=255 then
0d2f8     50 00 00 FF 
0d2fc     B4 E4 85 F1 | 	sub	objptr, ##41140
0d300     FF 26 16 F2 | 	cmp	local01, #255 wc
0d304     E4 00 90 CD |  if_b	jmp	#LR__1114
0d308     4E 00 00 FF 
0d30c     B4 E4 05 F1 | 	add	objptr, ##40116
0d310     F2 12 02 F6 | 	mov	arg01, objptr
0d314     4E 00 00 FF 
0d318     B4 E4 85 F1 | 	sub	objptr, ##40116
0d31c     B0 FB BF FD | 	call	#_csave_block
0d320     50 00 00 FF 
0d324     B4 E4 05 F1 | 	add	objptr, ##41140
0d328     F2 00 68 FC | 	wrlong	#0, objptr
0d32c     50 00 00 FF 
0d330     B4 E4 85 F1 | 	sub	objptr, ##41140
0d334     2C 13 06 F6 | 	mov	arg01, #300
0d338     8C 7E B1 FD | 	call	#__system___waitms
0d33c     AC 00 90 FD | 	jmp	#LR__1114
0d340                 | LR__1110
0d340     50 00 00 FF 
0d344     B4 E4 05 F1 | 	add	objptr, ##41140
0d348     F2 28 02 FB | 	rdlong	local02, objptr
0d34c     02 00 00 FF 
0d350     00 E4 85 F1 | 	sub	objptr, ##1024
0d354     F2 28 02 F1 | 	add	local02, objptr
0d358     14 27 42 FC | 	wrbyte	local01, local02
0d35c                 | '   block(blockptr)=d
0d35c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d35c     02 00 00 FF 
0d360     00 E4 05 F1 | 	add	objptr, ##1024
0d364     F2 2A 02 FB | 	rdlong	local03, objptr
0d368     50 00 00 FF 
0d36c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d370     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d374     40 00 90 3D |  if_ae	jmp	#LR__1113
0d378     50 00 00 FF 
0d37c     B4 E4 05 F1 | 	add	objptr, ##41140
0d380     F2 2C 02 FB | 	rdlong	local04, objptr
0d384     50 00 00 FF 
0d388     B4 E4 85 F1 | 	sub	objptr, ##41140
0d38c                 | LR__1111
0d38c     00 2D 56 F2 | 	cmps	local04, #256 wc
0d390     24 00 90 3D |  if_ae	jmp	#LR__1112
0d394     16 29 02 F6 | 	mov	local02, local04
0d398     4E 00 00 FF 
0d39c     B4 E4 05 F1 | 	add	objptr, ##40116
0d3a0     F2 28 02 F1 | 	add	local02, objptr
0d3a4     14 01 48 FC | 	wrbyte	#0, local02
0d3a8     01 2C 06 F1 | 	add	local04, #1
0d3ac     4E 00 00 FF 
0d3b0     B4 E4 85 F1 | 	sub	objptr, ##40116
0d3b4     D4 FF 9F FD | 	jmp	#LR__1111
0d3b8                 | LR__1112
0d3b8                 | LR__1113
0d3b8     4E 00 00 FF 
0d3bc     B4 E4 05 F1 | 	add	objptr, ##40116
0d3c0     F2 12 02 F6 | 	mov	arg01, objptr
0d3c4     4E 00 00 FF 
0d3c8     B4 E4 85 F1 | 	sub	objptr, ##40116
0d3cc     00 FB BF FD | 	call	#_csave_block
0d3d0     50 00 00 FF 
0d3d4     B4 E4 05 F1 | 	add	objptr, ##41140
0d3d8     F2 00 68 FC | 	wrlong	#0, objptr
0d3dc     50 00 00 FF 
0d3e0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d3e4     2C 13 06 F6 | 	mov	arg01, #300
0d3e8     DC 7D B1 FD | 	call	#__system___waitms
0d3ec                 | LR__1114
0d3ec     A7 F0 03 F6 | 	mov	ptra, fp
0d3f0     B2 00 A0 FD | 	call	#popregs_
0d3f4                 | _csave_addtoblock_ret
0d3f4     2D 00 64 FD | 	ret
0d3f8                 | 
0d3f8                 | ' 
0d3f8                 | ' '----------------------- csave
0d3f8                 | ' 
0d3f8                 | ' sub test_csave
0d3f8                 | _test_csave
0d3f8     04 4A 05 F6 | 	mov	COUNT_, #4
0d3fc     A8 00 A0 FD | 	call	#pushregs_
0d400     C0 F0 07 F1 | 	add	ptra, #192
0d404                 | ' 'dim fileheader,savestart, saveptr as ulong
0d404                 | ' 
0d404                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d404     4A 00 00 FF 
0d408     88 E4 05 F1 | 	add	objptr, ##38024
0d40c     F2 12 02 FB | 	rdlong	arg01, objptr
0d410     4A 00 00 FF 
0d414     88 E4 85 F1 | 	sub	objptr, ##38024
0d418     E0 43 B1 FD | 	call	#_pslpeek
0d41c     FF FF 7F FF 
0d420     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d424     10 00 90 5D |  if_ne	jmp	#LR__1120
0d428     1B 12 06 F6 | 	mov	arg01, #27
0d42c     00 14 06 F6 | 	mov	arg02, #0
0d430     F8 40 B1 FD | 	call	#_printerror
0d434     1C 03 90 FD | 	jmp	#LR__1134
0d438                 | LR__1120
0d438     50 F7 BF FD | 	call	#_pop
0d43c     90 4E 05 F1 | 	add	fp, #144
0d440     A7 FA 61 FC | 	wrlong	result1, fp
0d444     04 4E 05 F1 | 	add	fp, #4
0d448     A7 FC 61 FC | 	wrlong	result2, fp
0d44c     04 4E 05 F1 | 	add	fp, #4
0d450     A7 FE 61 FC | 	wrlong	result3, fp
0d454                 | ' t1=pop()
0d454                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d454     98 4E 85 F1 | 	sub	fp, #152
0d458     1F FE 0D F2 | 	cmp	result3, #31 wz
0d45c     24 00 90 AD |  if_e	jmp	#LR__1121
0d460     52 00 00 FF 
0d464     00 E4 05 F1 | 	add	objptr, ##41984
0d468     F2 1C 02 FB | 	rdlong	arg06, objptr
0d46c     52 00 00 FF 
0d470     00 E4 85 F1 | 	sub	objptr, ##41984
0d474     8C 4E 05 F1 | 	add	fp, #140
0d478     A7 1C 62 FC | 	wrlong	arg06, fp
0d47c     8C 4E 85 F1 | 	sub	fp, #140
0d480     14 00 90 FD | 	jmp	#LR__1122
0d484                 | LR__1121
0d484     90 4E 05 F1 | 	add	fp, #144
0d488     A7 1C 02 FB | 	rdlong	arg06, fp
0d48c     04 4E 85 F1 | 	sub	fp, #4
0d490     A7 1C 62 FC | 	wrlong	arg06, fp
0d494     8C 4E 85 F1 | 	sub	fp, #140
0d498                 | LR__1122
0d498                 | ' 
0d498                 | ' ' prepare 1 kHz header wave
0d498                 | ' 
0d498                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d498     A7 00 68 FC | 	wrlong	#0, fp
0d49c     97 34 48 FB | 	callpa	#(@LR__1126-@LR__1123)>>2,fcache_load_ptr_
0d4a0                 | LR__1123
0d4a0     A7 1C 02 FB | 	rdlong	arg06, fp
0d4a4     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d4a8     07 1A 06 F5 | 	and	arg05, #7
0d4ac     0D 1B 82 F6 | 	negc	arg05, arg05
0d4b0     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d4b4     20 00 90 3D |  if_ae	jmp	#LR__1124
0d4b8     A7 1A 02 FB | 	rdlong	arg05, fp
0d4bc     4D 00 00 FF 
0d4c0     B4 E5 05 F1 | 	add	objptr, ##39860
0d4c4     F2 1A 02 F1 | 	add	arg05, objptr
0d4c8     0D FF 48 FC | 	wrbyte	#127, arg05
0d4cc     4D 00 00 FF 
0d4d0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d4d4     1C 00 90 FD | 	jmp	#LR__1125
0d4d8                 | LR__1124
0d4d8     A7 1A 02 FB | 	rdlong	arg05, fp
0d4dc     4D 00 00 FF 
0d4e0     B4 E5 05 F1 | 	add	objptr, ##39860
0d4e4     F2 1A 02 F1 | 	add	arg05, objptr
0d4e8     0D 01 49 FC | 	wrbyte	#128, arg05
0d4ec     4D 00 00 FF 
0d4f0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d4f4                 | LR__1125
0d4f4     A7 1A 02 FB | 	rdlong	arg05, fp
0d4f8     01 1A 06 F1 | 	add	arg05, #1
0d4fc     A7 1A 62 FC | 	wrlong	arg05, fp
0d500     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d504     98 FF 9F CD |  if_b	jmp	#LR__1123
0d508                 | LR__1126
0d508     4D 00 00 FF 
0d50c     B4 E5 05 F1 | 	add	objptr, ##39860
0d510     F2 14 02 F6 | 	mov	arg02, objptr
0d514     07 12 06 F6 | 	mov	arg01, #7
0d518     0F 00 00 FF 
0d51c     40 17 06 F6 | 	mov	arg03, ##8000
0d520     0E 18 C6 F9 | 	decod	arg04, #14
0d524     00 1B 06 F6 | 	mov	arg05, #256
0d528     00 1C 06 F6 | 	mov	arg06, #0
0d52c     42 00 00 FF 
0d530     E8 E4 85 F1 | 	sub	objptr, ##34024
0d534     F8 75 B1 FD | 	call	#_audio096_spin2_play8
0d538     0B 00 00 FF 
0d53c     CC E4 85 F1 | 	sub	objptr, ##5836
0d540     05 00 00 FF 
0d544     B8 13 06 F6 | 	mov	arg01, ##3000
0d548     7C 7C B1 FD | 	call	#__system___waitms
0d54c     50 00 00 FF 
0d550     B4 E4 05 F1 | 	add	objptr, ##41140
0d554     F2 00 68 FC | 	wrlong	#0, objptr
0d558     50 00 00 FF 
0d55c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d560     72 12 06 F6 | 	mov	arg01, #114
0d564     00 14 06 F6 | 	mov	arg02, #0
0d568     48 FD BF FD | 	call	#_csave_addtoblock
0d56c     62 12 06 F6 | 	mov	arg01, #98
0d570     00 14 06 F6 | 	mov	arg02, #0
0d574     3C FD BF FD | 	call	#_csave_addtoblock
0d578     61 12 06 F6 | 	mov	arg01, #97
0d57c     00 14 06 F6 | 	mov	arg02, #0
0d580     30 FD BF FD | 	call	#_csave_addtoblock
0d584     0D 12 06 F6 | 	mov	arg01, #13
0d588     00 14 06 F6 | 	mov	arg02, #0
0d58c     24 FD BF FD | 	call	#_csave_addtoblock
0d590                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d590                 | ' waitms 3000 
0d590                 | ' 
0d590                 | ' blockptr=0
0d590                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d590                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d590     A7 02 68 FC | 	wrlong	#1, fp
0d594     8C 4E 05 F1 | 	add	fp, #140
0d598     A7 12 02 FB | 	rdlong	arg01, fp
0d59c     8C 4E 85 F1 | 	sub	fp, #140
0d5a0     09 27 02 F6 | 	mov	local01, arg01
0d5a4     97 06 48 FB | 	callpa	#(@LR__1128-@LR__1127)>>2,fcache_load_ptr_
0d5a8                 | LR__1127
0d5a8     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d5ac     01 26 06 51 |  if_ne	add	local01, #1
0d5b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1127
0d5b4                 | LR__1128
0d5b4     09 27 82 F1 | 	sub	local01, arg01
0d5b8     13 29 02 F6 | 	mov	local02, local01
0d5bc     01 28 06 F1 | 	add	local02, #1
0d5c0                 | LR__1129
0d5c0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5c4     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d5c8     34 00 90 3D |  if_ae	jmp	#LR__1130
0d5cc     8C 4E 05 F1 | 	add	fp, #140
0d5d0     A7 12 02 FB | 	rdlong	arg01, fp
0d5d4     8C 4E 85 F1 | 	sub	fp, #140
0d5d8     A7 14 02 FB | 	rdlong	arg02, fp
0d5dc     01 16 06 F6 | 	mov	arg03, #1
0d5e0     88 9A B1 FD | 	call	#__system__Mid_S
0d5e4     FD 12 C2 FA | 	rdbyte	arg01, result1
0d5e8     00 14 06 F6 | 	mov	arg02, #0
0d5ec     C4 FC BF FD | 	call	#_csave_addtoblock
0d5f0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5f4     01 1A 06 F1 | 	add	arg05, #1
0d5f8     A7 1A 62 FC | 	wrlong	arg05, fp
0d5fc     C0 FF 9F FD | 	jmp	#LR__1129
0d600                 | LR__1130
0d600     00 12 06 F6 | 	mov	arg01, #0
0d604     00 14 06 F6 | 	mov	arg02, #0
0d608     A8 FC BF FD | 	call	#_csave_addtoblock
0d60c     72 12 06 F6 | 	mov	arg01, #114
0d610     00 14 06 F6 | 	mov	arg02, #0
0d614     9C FC BF FD | 	call	#_csave_addtoblock
0d618     62 12 06 F6 | 	mov	arg01, #98
0d61c     00 14 06 F6 | 	mov	arg02, #0
0d620     90 FC BF FD | 	call	#_csave_addtoblock
0d624     73 12 06 F6 | 	mov	arg01, #115
0d628     00 14 06 F6 | 	mov	arg02, #0
0d62c     84 FC BF FD | 	call	#_csave_addtoblock
0d630     0D 12 06 F6 | 	mov	arg01, #13
0d634     00 14 06 F6 | 	mov	arg02, #0
0d638     78 FC BF FD | 	call	#_csave_addtoblock
0d63c     4A 00 00 FF 
0d640     88 E4 05 F1 | 	add	objptr, ##38024
0d644     F2 2A 02 FB | 	rdlong	local03, objptr
0d648     4A 00 00 FF 
0d64c     88 E4 85 F1 | 	sub	objptr, ##38024
0d650     9C 4E 05 F1 | 	add	fp, #156
0d654     A7 2A 62 FC | 	wrlong	local03, fp
0d658     9C 4E 85 F1 | 	sub	fp, #156
0d65c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d65c                 | ' 
0d65c                 | ' saveptr=programstart
0d65c                 | ' do
0d65c                 | LR__1131
0d65c     A0 4E 05 F1 | 	add	fp, #160
0d660     A7 12 02 F6 | 	mov	arg01, fp
0d664     04 4E 85 F1 | 	sub	fp, #4
0d668     A7 14 02 FB | 	rdlong	arg02, fp
0d66c     9C 4E 85 F1 | 	sub	fp, #156
0d670     18 16 06 F6 | 	mov	arg03, #24
0d674     0B 00 00 FF 
0d678     CC E4 05 F1 | 	add	objptr, ##5836
0d67c     14 6C B1 FD | 	call	#_psram_spin2_read1
0d680     0C 4E 05 F1 | 	add	fp, #12
0d684     A7 12 02 F6 | 	mov	arg01, fp
0d688     9C 4E 05 F1 | 	add	fp, #156
0d68c     A7 14 02 FB | 	rdlong	arg02, fp
0d690     04 4E 05 F1 | 	add	fp, #4
0d694     A7 16 02 FB | 	rdlong	arg03, fp
0d698     AC 4E 85 F1 | 	sub	fp, #172
0d69c     F4 6B B1 FD | 	call	#_psram_spin2_read1
0d6a0     0B 00 00 FF 
0d6a4     CC E4 85 F1 | 	sub	objptr, ##5836
0d6a8     AC 4E 05 F1 | 	add	fp, #172
0d6ac     A7 12 02 FB | 	rdlong	arg01, fp
0d6b0     AC 4E 85 F1 | 	sub	fp, #172
0d6b4     00 14 06 F6 | 	mov	arg02, #0
0d6b8     F8 FB BF FD | 	call	#_csave_addtoblock
0d6bc                 | ' 
0d6bc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d6bc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d6bc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d6bc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d6bc     A7 00 68 FC | 	wrlong	#0, fp
0d6c0     AC 4E 05 F1 | 	add	fp, #172
0d6c4     A7 2C 02 FB | 	rdlong	local04, fp
0d6c8     AC 4E 85 F1 | 	sub	fp, #172
0d6cc                 | LR__1132
0d6cc     A7 2A 02 FB | 	rdlong	local03, fp
0d6d0     16 2B 52 F2 | 	cmps	local03, local04 wc
0d6d4     2C 00 90 3D |  if_ae	jmp	#LR__1133
0d6d8     A7 2A 02 FB | 	rdlong	local03, fp
0d6dc     0C 4E 05 F1 | 	add	fp, #12
0d6e0     A7 2A 02 F1 | 	add	local03, fp
0d6e4     15 13 C2 FA | 	rdbyte	arg01, local03
0d6e8     00 14 06 F6 | 	mov	arg02, #0
0d6ec     0C 4E 85 F1 | 	sub	fp, #12
0d6f0     C0 FB BF FD | 	call	#_csave_addtoblock
0d6f4     A7 2A 02 FB | 	rdlong	local03, fp
0d6f8     01 2A 06 F1 | 	add	local03, #1
0d6fc     A7 2A 62 FC | 	wrlong	local03, fp
0d700     C8 FF 9F FD | 	jmp	#LR__1132
0d704                 | LR__1133
0d704     B4 4E 05 F1 | 	add	fp, #180
0d708     A7 2A 02 FB | 	rdlong	local03, fp
0d70c     18 4E 85 F1 | 	sub	fp, #24
0d710     A7 2A 62 FC | 	wrlong	local03, fp
0d714     18 4E 05 F1 | 	add	fp, #24
0d718     A7 2A 02 FB | 	rdlong	local03, fp
0d71c     B4 4E 85 F1 | 	sub	fp, #180
0d720     FF FF 3F FF 
0d724     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d728     30 FF 9F 5D |  if_ne	jmp	#LR__1131
0d72c     00 12 06 F6 | 	mov	arg01, #0
0d730     01 14 06 F6 | 	mov	arg02, #1
0d734     7C FB BF FD | 	call	#_csave_addtoblock
0d738     37 00 00 FF 
0d73c     10 E4 05 F1 | 	add	objptr, ##28176
0d740     F2 12 02 FB | 	rdlong	arg01, objptr
0d744     37 00 00 FF 
0d748     10 E4 85 F1 | 	sub	objptr, ##28176
0d74c     D4 13 06 F1 | 	add	arg01, #468
0d750     09 01 58 FC | 	wrword	#0, arg01
0d754                 | LR__1134
0d754     A7 F0 03 F6 | 	mov	ptra, fp
0d758     B2 00 A0 FD | 	call	#popregs_
0d75c                 | _test_csave_ret
0d75c     2D 00 64 FD | 	ret
0d760                 | 
0d760                 | ' 
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' 
0d760                 | ' 
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' 
0d760                 | ' '-------------------- abs
0d760                 | ' 
0d760                 | ' sub do_abs
0d760                 | _do_abs
0d760     01 4A 05 F6 | 	mov	COUNT_, #1
0d764     A8 00 A0 FD | 	call	#pushregs_
0d768     0C F0 07 F1 | 	add	ptra, #12
0d76c     1C F4 BF FD | 	call	#_pop
0d770     FF 26 02 F6 | 	mov	local01, result3
0d774     A7 FA 61 FC | 	wrlong	result1, fp
0d778     04 4E 05 F1 | 	add	fp, #4
0d77c     A7 FC 61 FC | 	wrlong	result2, fp
0d780     04 4E 05 F1 | 	add	fp, #4
0d784     A7 26 62 FC | 	wrlong	local01, fp
0d788                 | ' 
0d788                 | ' t1=pop()
0d788                 | ' if t1.result_type=result_int then 
0d788     08 4E 85 F1 | 	sub	fp, #8
0d78c     1C 26 0E F2 | 	cmp	local01, #28 wz
0d790     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d794     09 27 42 A6 |  if_e	abs	local01, arg01
0d798     A7 26 62 AC |  if_e	wrlong	local01, fp
0d79c     2C 00 90 AD |  if_e	jmp	#LR__1140
0d7a0     08 4E 05 F1 | 	add	fp, #8
0d7a4     A7 26 02 FB | 	rdlong	local01, fp
0d7a8     08 4E 85 F1 | 	sub	fp, #8
0d7ac     1E 26 0E F2 | 	cmp	local01, #30 wz
0d7b0     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d7b4     1F FA 05 A4 |  if_e	bitl	result1, #31
0d7b8     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d7bc     08 4E 05 51 |  if_ne	add	fp, #8
0d7c0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d7c4     08 4E 85 51 |  if_ne	sub	fp, #8
0d7c8     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d7cc                 | LR__1140
0d7cc     A7 12 02 F6 | 	mov	arg01, fp
0d7d0     50 F4 BF FD | 	call	#_push
0d7d4     A7 F0 03 F6 | 	mov	ptra, fp
0d7d8     B2 00 A0 FD | 	call	#popregs_
0d7dc                 | _do_abs_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' '-------------------- acos
0d7e0                 | ' 
0d7e0                 | ' sub do_acos
0d7e0                 | _do_acos
0d7e0     01 4A 05 F6 | 	mov	COUNT_, #1
0d7e4     A8 00 A0 FD | 	call	#pushregs_
0d7e8     10 F0 07 F1 | 	add	ptra, #16
0d7ec     4A 00 00 FF 
0d7f0     80 E4 05 F1 | 	add	objptr, ##38016
0d7f4     F2 26 02 FB | 	rdlong	local01, objptr
0d7f8     13 17 02 F6 | 	mov	arg03, local01
0d7fc     01 16 66 F0 | 	shl	arg03, #1
0d800     13 17 02 F1 | 	add	arg03, local01
0d804     02 16 66 F0 | 	shl	arg03, #2
0d808     03 00 00 FF 
0d80c     04 E4 85 F1 | 	sub	objptr, ##1540
0d810     F2 16 02 F1 | 	add	arg03, objptr
0d814     0B 17 02 FB | 	rdlong	arg03, arg03
0d818     0C 4E 05 F1 | 	add	fp, #12
0d81c     A7 16 62 FC | 	wrlong	arg03, fp
0d820                 | ' 
0d820                 | ' numpar=compiledline(lineptr_e).result.uresult
0d820                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d820     0C 4E 85 F1 | 	sub	fp, #12
0d824     02 16 16 F2 | 	cmp	arg03, #2 wc
0d828     47 00 00 FF 
0d82c     7C E4 85 F1 | 	sub	objptr, ##36476
0d830     0C 4E 05 C1 |  if_b	add	fp, #12
0d834     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d838     0C 4E 85 C1 |  if_b	sub	fp, #12
0d83c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0d840     00 12 06 F6 | 	mov	arg01, #0
0d844     30 D3 B1 FD | 	call	#__system___getiolock_0593
0d848     FD 12 02 F6 | 	mov	arg01, result1
0d84c     84 76 B1 FD | 	call	#__system___lockmem
0d850     A8 01 00 FF 
0d854     13 15 06 F6 | 	mov	arg02, ##@LR__5758
0d858     00 12 06 F6 | 	mov	arg01, #0
0d85c     00 16 06 F6 | 	mov	arg03, #0
0d860     68 83 B1 FD | 	call	#__system___basic_print_string
0d864     00 12 06 F6 | 	mov	arg01, #0
0d868     0C D3 B1 FD | 	call	#__system___getiolock_0593
0d86c     FD 00 68 FC | 	wrlong	#0, result1
0d870     27 12 06 F6 | 	mov	arg01, #39
0d874     00 14 06 F6 | 	mov	arg02, #0
0d878     B0 3C B1 FD | 	call	#_printerror
0d87c     64 00 90 FD | 	jmp	#LR__1151
0d880                 | LR__1150
0d880     08 F3 BF FD | 	call	#_pop
0d884     FF 26 02 F6 | 	mov	local01, result3
0d888     A7 FA 61 FC | 	wrlong	result1, fp
0d88c     04 4E 05 F1 | 	add	fp, #4
0d890     A7 FC 61 FC | 	wrlong	result2, fp
0d894     04 4E 05 F1 | 	add	fp, #4
0d898     A7 26 62 FC | 	wrlong	local01, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     A7 12 02 F6 | 	mov	arg01, fp
0d8a4     84 F5 BF FD | 	call	#_converttofloat
0d8a8     FD 12 02 F6 | 	mov	arg01, result1
0d8ac     E0 AF B1 FD | 	call	#__system____builtin_acosf
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     51 00 00 FF 
0d8b8     E8 E5 05 F1 | 	add	objptr, ##41960
0d8bc     F2 14 02 FB | 	rdlong	arg02, objptr
0d8c0     51 00 00 FF 
0d8c4     E8 E5 85 F1 | 	sub	objptr, ##41960
0d8c8     84 A4 B1 FD | 	call	#__system___float_mul
0d8cc     A7 FA 61 FC | 	wrlong	result1, fp
0d8d0     08 4E 05 F1 | 	add	fp, #8
0d8d4     A7 3C 68 FC | 	wrlong	#30, fp
0d8d8     08 4E 85 F1 | 	sub	fp, #8
0d8dc     A7 12 02 F6 | 	mov	arg01, fp
0d8e0     40 F3 BF FD | 	call	#_push
0d8e4                 | LR__1151
0d8e4     A7 F0 03 F6 | 	mov	ptra, fp
0d8e8     B2 00 A0 FD | 	call	#popregs_
0d8ec                 | _do_acos_ret
0d8ec     2D 00 64 FD | 	ret
0d8f0                 | 
0d8f0                 | ' 
0d8f0                 | ' '-------------------- asc
0d8f0                 | ' 
0d8f0                 | ' sub do_asc
0d8f0                 | _do_asc
0d8f0     01 4A 05 F6 | 	mov	COUNT_, #1
0d8f4     A8 00 A0 FD | 	call	#pushregs_
0d8f8     14 F0 07 F1 | 	add	ptra, #20
0d8fc     4A 00 00 FF 
0d900     80 E4 05 F1 | 	add	objptr, ##38016
0d904     F2 26 02 FB | 	rdlong	local01, objptr
0d908     13 17 02 F6 | 	mov	arg03, local01
0d90c     01 16 66 F0 | 	shl	arg03, #1
0d910     13 17 02 F1 | 	add	arg03, local01
0d914     02 16 66 F0 | 	shl	arg03, #2
0d918     03 00 00 FF 
0d91c     04 E4 85 F1 | 	sub	objptr, ##1540
0d920     F2 16 02 F1 | 	add	arg03, objptr
0d924     0B 17 02 FB | 	rdlong	arg03, arg03
0d928     0C 4E 05 F1 | 	add	fp, #12
0d92c     A7 16 62 FC | 	wrlong	arg03, fp
0d930                 | ' 
0d930                 | ' numpar=compiledline(lineptr_e).result.uresult
0d930                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d930     0C 4E 85 F1 | 	sub	fp, #12
0d934     02 16 16 F2 | 	cmp	arg03, #2 wc
0d938     47 00 00 FF 
0d93c     7C E4 85 F1 | 	sub	objptr, ##36476
0d940     0C 4E 05 C1 |  if_b	add	fp, #12
0d944     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d948     0C 4E 85 C1 |  if_b	sub	fp, #12
0d94c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d950     00 12 06 F6 | 	mov	arg01, #0
0d954     20 D2 B1 FD | 	call	#__system___getiolock_0593
0d958     FD 12 02 F6 | 	mov	arg01, result1
0d95c     74 75 B1 FD | 	call	#__system___lockmem
0d960     A8 01 00 FF 
0d964     1A 15 06 F6 | 	mov	arg02, ##@LR__5759
0d968     00 12 06 F6 | 	mov	arg01, #0
0d96c     00 16 06 F6 | 	mov	arg03, #0
0d970     58 82 B1 FD | 	call	#__system___basic_print_string
0d974     00 12 06 F6 | 	mov	arg01, #0
0d978     FC D1 B1 FD | 	call	#__system___getiolock_0593
0d97c     FD 00 68 FC | 	wrlong	#0, result1
0d980     27 12 06 F6 | 	mov	arg01, #39
0d984     00 14 06 F6 | 	mov	arg02, #0
0d988     A0 3B B1 FD | 	call	#_printerror
0d98c     B4 00 90 FD | 	jmp	#LR__1163
0d990                 | LR__1160
0d990     F8 F1 BF FD | 	call	#_pop
0d994     FF 16 02 F6 | 	mov	arg03, result3
0d998     A7 FA 61 FC | 	wrlong	result1, fp
0d99c     04 4E 05 F1 | 	add	fp, #4
0d9a0     A7 FC 61 FC | 	wrlong	result2, fp
0d9a4     04 4E 05 F1 | 	add	fp, #4
0d9a8     A7 16 62 FC | 	wrlong	arg03, fp
0d9ac                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d9ac     08 4E 85 F1 | 	sub	fp, #8
0d9b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d9b4     18 00 90 5D |  if_ne	jmp	#LR__1161
0d9b8     A7 12 02 FB | 	rdlong	arg01, fp
0d9bc     44 F3 BF FD | 	call	#_convertstring
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 3E 68 FC | 	wrlong	#31, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0                 | LR__1161
0d9d0                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d9d0     08 4E 05 F1 | 	add	fp, #8
0d9d4     A7 16 02 FB | 	rdlong	arg03, fp
0d9d8     08 4E 85 F1 | 	sub	fp, #8
0d9dc     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d9e0     40 00 90 AD |  if_e	jmp	#LR__1162
0d9e4     00 12 06 F6 | 	mov	arg01, #0
0d9e8     8C D1 B1 FD | 	call	#__system___getiolock_0593
0d9ec     FD 12 02 F6 | 	mov	arg01, result1
0d9f0     E0 74 B1 FD | 	call	#__system___lockmem
0d9f4     A8 01 00 FF 
0d9f8     20 15 06 F6 | 	mov	arg02, ##@LR__5760
0d9fc     00 12 06 F6 | 	mov	arg01, #0
0da00     00 16 06 F6 | 	mov	arg03, #0
0da04     C4 81 B1 FD | 	call	#__system___basic_print_string
0da08     00 12 06 F6 | 	mov	arg01, #0
0da0c     68 D1 B1 FD | 	call	#__system___getiolock_0593
0da10     FD 00 68 FC | 	wrlong	#0, result1
0da14     0F 12 06 F6 | 	mov	arg01, #15
0da18     00 14 06 F6 | 	mov	arg02, #0
0da1c     0C 3B B1 FD | 	call	#_printerror
0da20     20 00 90 FD | 	jmp	#LR__1163
0da24                 | LR__1162
0da24     A7 26 02 FB | 	rdlong	local01, fp
0da28     13 27 C2 FA | 	rdbyte	local01, local01
0da2c     A7 26 62 FC | 	wrlong	local01, fp
0da30     08 4E 05 F1 | 	add	fp, #8
0da34     A7 38 68 FC | 	wrlong	#28, fp
0da38     08 4E 85 F1 | 	sub	fp, #8
0da3c     A7 12 02 F6 | 	mov	arg01, fp
0da40     E0 F1 BF FD | 	call	#_push
0da44                 | LR__1163
0da44     A7 F0 03 F6 | 	mov	ptra, fp
0da48     B2 00 A0 FD | 	call	#popregs_
0da4c                 | _do_asc_ret
0da4c     2D 00 64 FD | 	ret
0da50                 | 
0da50                 | ' 
0da50                 | ' '-------------------- asin
0da50                 | ' 
0da50                 | ' sub do_asin
0da50                 | _do_asin
0da50     01 4A 05 F6 | 	mov	COUNT_, #1
0da54     A8 00 A0 FD | 	call	#pushregs_
0da58     10 F0 07 F1 | 	add	ptra, #16
0da5c     4A 00 00 FF 
0da60     80 E4 05 F1 | 	add	objptr, ##38016
0da64     F2 26 02 FB | 	rdlong	local01, objptr
0da68     13 17 02 F6 | 	mov	arg03, local01
0da6c     01 16 66 F0 | 	shl	arg03, #1
0da70     13 17 02 F1 | 	add	arg03, local01
0da74     02 16 66 F0 | 	shl	arg03, #2
0da78     03 00 00 FF 
0da7c     04 E4 85 F1 | 	sub	objptr, ##1540
0da80     F2 16 02 F1 | 	add	arg03, objptr
0da84     0B 17 02 FB | 	rdlong	arg03, arg03
0da88     0C 4E 05 F1 | 	add	fp, #12
0da8c     A7 16 62 FC | 	wrlong	arg03, fp
0da90                 | ' 
0da90                 | ' numpar=compiledline(lineptr_e).result.uresult
0da90                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0da90     0C 4E 85 F1 | 	sub	fp, #12
0da94     02 16 16 F2 | 	cmp	arg03, #2 wc
0da98     47 00 00 FF 
0da9c     7C E4 85 F1 | 	sub	objptr, ##36476
0daa0     0C 4E 05 C1 |  if_b	add	fp, #12
0daa4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0daa8     0C 4E 85 C1 |  if_b	sub	fp, #12
0daac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dab0     00 12 06 F6 | 	mov	arg01, #0
0dab4     C0 D0 B1 FD | 	call	#__system___getiolock_0593
0dab8     FD 12 02 F6 | 	mov	arg01, result1
0dabc     14 74 B1 FD | 	call	#__system___lockmem
0dac0     A8 01 00 FF 
0dac4     26 15 06 F6 | 	mov	arg02, ##@LR__5761
0dac8     00 12 06 F6 | 	mov	arg01, #0
0dacc     00 16 06 F6 | 	mov	arg03, #0
0dad0     F8 80 B1 FD | 	call	#__system___basic_print_string
0dad4     00 12 06 F6 | 	mov	arg01, #0
0dad8     9C D0 B1 FD | 	call	#__system___getiolock_0593
0dadc     FD 00 68 FC | 	wrlong	#0, result1
0dae0     27 12 06 F6 | 	mov	arg01, #39
0dae4     00 14 06 F6 | 	mov	arg02, #0
0dae8     40 3A B1 FD | 	call	#_printerror
0daec     64 00 90 FD | 	jmp	#LR__1171
0daf0                 | LR__1170
0daf0     98 F0 BF FD | 	call	#_pop
0daf4     FF 26 02 F6 | 	mov	local01, result3
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 FC 61 FC | 	wrlong	result2, fp
0db04     04 4E 05 F1 | 	add	fp, #4
0db08     A7 26 62 FC | 	wrlong	local01, fp
0db0c     08 4E 85 F1 | 	sub	fp, #8
0db10     A7 12 02 F6 | 	mov	arg01, fp
0db14     14 F3 BF FD | 	call	#_converttofloat
0db18     FD 12 02 F6 | 	mov	arg01, result1
0db1c     24 AD B1 FD | 	call	#__system____builtin_asinf
0db20     FD 12 02 F6 | 	mov	arg01, result1
0db24     51 00 00 FF 
0db28     E8 E5 05 F1 | 	add	objptr, ##41960
0db2c     F2 14 02 FB | 	rdlong	arg02, objptr
0db30     51 00 00 FF 
0db34     E8 E5 85 F1 | 	sub	objptr, ##41960
0db38     14 A2 B1 FD | 	call	#__system___float_mul
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     08 4E 05 F1 | 	add	fp, #8
0db44     A7 3C 68 FC | 	wrlong	#30, fp
0db48     08 4E 85 F1 | 	sub	fp, #8
0db4c     A7 12 02 F6 | 	mov	arg01, fp
0db50     D0 F0 BF FD | 	call	#_push
0db54                 | LR__1171
0db54     A7 F0 03 F6 | 	mov	ptra, fp
0db58     B2 00 A0 FD | 	call	#popregs_
0db5c                 | _do_asin_ret
0db5c     2D 00 64 FD | 	ret
0db60                 | 
0db60                 | ' 
0db60                 | ' '-------------------- atn
0db60                 | ' 
0db60                 | ' sub do_atn
0db60                 | _do_atn
0db60     01 4A 05 F6 | 	mov	COUNT_, #1
0db64     A8 00 A0 FD | 	call	#pushregs_
0db68     10 F0 07 F1 | 	add	ptra, #16
0db6c     4A 00 00 FF 
0db70     80 E4 05 F1 | 	add	objptr, ##38016
0db74     F2 26 02 FB | 	rdlong	local01, objptr
0db78     13 17 02 F6 | 	mov	arg03, local01
0db7c     01 16 66 F0 | 	shl	arg03, #1
0db80     13 17 02 F1 | 	add	arg03, local01
0db84     02 16 66 F0 | 	shl	arg03, #2
0db88     03 00 00 FF 
0db8c     04 E4 85 F1 | 	sub	objptr, ##1540
0db90     F2 16 02 F1 | 	add	arg03, objptr
0db94     0B 17 02 FB | 	rdlong	arg03, arg03
0db98     0C 4E 05 F1 | 	add	fp, #12
0db9c     A7 16 62 FC | 	wrlong	arg03, fp
0dba0                 | ' 
0dba0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dba0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dba0     0C 4E 85 F1 | 	sub	fp, #12
0dba4     02 16 16 F2 | 	cmp	arg03, #2 wc
0dba8     47 00 00 FF 
0dbac     7C E4 85 F1 | 	sub	objptr, ##36476
0dbb0     0C 4E 05 C1 |  if_b	add	fp, #12
0dbb4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbb8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0dbc0     00 12 06 F6 | 	mov	arg01, #0
0dbc4     B0 CF B1 FD | 	call	#__system___getiolock_0593
0dbc8     FD 12 02 F6 | 	mov	arg01, result1
0dbcc     04 73 B1 FD | 	call	#__system___lockmem
0dbd0     A8 01 00 FF 
0dbd4     2D 15 06 F6 | 	mov	arg02, ##@LR__5762
0dbd8     00 12 06 F6 | 	mov	arg01, #0
0dbdc     00 16 06 F6 | 	mov	arg03, #0
0dbe0     E8 7F B1 FD | 	call	#__system___basic_print_string
0dbe4     00 12 06 F6 | 	mov	arg01, #0
0dbe8     8C CF B1 FD | 	call	#__system___getiolock_0593
0dbec     FD 00 68 FC | 	wrlong	#0, result1
0dbf0     27 12 06 F6 | 	mov	arg01, #39
0dbf4     00 14 06 F6 | 	mov	arg02, #0
0dbf8     30 39 B1 FD | 	call	#_printerror
0dbfc     6C 00 90 FD | 	jmp	#LR__1181
0dc00                 | LR__1180
0dc00     88 EF BF FD | 	call	#_pop
0dc04     FF 26 02 F6 | 	mov	local01, result3
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 FC 61 FC | 	wrlong	result2, fp
0dc14     04 4E 05 F1 | 	add	fp, #4
0dc18     A7 26 62 FC | 	wrlong	local01, fp
0dc1c     08 4E 85 F1 | 	sub	fp, #8
0dc20     A7 12 02 F6 | 	mov	arg01, fp
0dc24     04 F2 BF FD | 	call	#_converttofloat
0dc28     FD 12 02 F6 | 	mov	arg01, result1
0dc2c     00 C0 1F FF 
0dc30     00 14 06 F6 | 	mov	arg02, ##1065353216
0dc34     A4 AC B1 FD | 	call	#__system____builtin_atan2f
0dc38     FD 12 02 F6 | 	mov	arg01, result1
0dc3c     51 00 00 FF 
0dc40     E8 E5 05 F1 | 	add	objptr, ##41960
0dc44     F2 14 02 FB | 	rdlong	arg02, objptr
0dc48     51 00 00 FF 
0dc4c     E8 E5 85 F1 | 	sub	objptr, ##41960
0dc50     FC A0 B1 FD | 	call	#__system___float_mul
0dc54     A7 FA 61 FC | 	wrlong	result1, fp
0dc58     08 4E 05 F1 | 	add	fp, #8
0dc5c     A7 3C 68 FC | 	wrlong	#30, fp
0dc60     08 4E 85 F1 | 	sub	fp, #8
0dc64     A7 12 02 F6 | 	mov	arg01, fp
0dc68     B8 EF BF FD | 	call	#_push
0dc6c                 | LR__1181
0dc6c     A7 F0 03 F6 | 	mov	ptra, fp
0dc70     B2 00 A0 FD | 	call	#popregs_
0dc74                 | _do_atn_ret
0dc74     2D 00 64 FD | 	ret
0dc78                 | 
0dc78                 | ' 
0dc78                 | ' '-------------------- beep
0dc78                 | ' 
0dc78                 | ' sub do_beep
0dc78                 | _do_beep
0dc78     02 4A 05 F6 | 	mov	COUNT_, #2
0dc7c     A8 00 A0 FD | 	call	#pushregs_
0dc80     20 F0 07 F1 | 	add	ptra, #32
0dc84     04 EF BF FD | 	call	#_pop
0dc88     FD 26 02 F6 | 	mov	local01, result1
0dc8c     FE 1C 02 F6 | 	mov	arg06, result2
0dc90     FF 28 02 F6 | 	mov	local02, result3
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 26 62 FC | 	wrlong	local01, fp
0dc9c     04 4E 05 F1 | 	add	fp, #4
0dca0     A7 1C 62 FC | 	wrlong	arg06, fp
0dca4     04 4E 05 F1 | 	add	fp, #4
0dca8     A7 28 62 FC | 	wrlong	local02, fp
0dcac     14 4E 85 F1 | 	sub	fp, #20
0dcb0     D8 EE BF FD | 	call	#_pop
0dcb4     A7 FA 61 FC | 	wrlong	result1, fp
0dcb8     04 4E 05 F1 | 	add	fp, #4
0dcbc     A7 FC 61 FC | 	wrlong	result2, fp
0dcc0     04 4E 05 F1 | 	add	fp, #4
0dcc4     A7 FE 61 FC | 	wrlong	result3, fp
0dcc8                 | ' 
0dcc8                 | ' t2=pop()
0dcc8                 | ' t1=pop()
0dcc8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dcc8     08 4E 85 F1 | 	sub	fp, #8
0dccc     1C FE 0D F2 | 	cmp	result3, #28 wz
0dcd0     08 4E 05 51 |  if_ne	add	fp, #8
0dcd4     A7 28 02 5B |  if_ne	rdlong	local02, fp
0dcd8     08 4E 85 51 |  if_ne	sub	fp, #8
0dcdc     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dce0     A7 26 02 AB |  if_e	rdlong	local01, fp
0dce4     18 4E 05 A1 |  if_e	add	fp, #24
0dce8     A7 26 62 AC |  if_e	wrlong	local01, fp
0dcec     18 4E 85 A1 |  if_e	sub	fp, #24
0dcf0     14 00 90 AD |  if_e	jmp	#LR__1190
0dcf4     A7 12 02 F6 | 	mov	arg01, fp
0dcf8     74 F0 BF FD | 	call	#_converttoint
0dcfc     18 4E 05 F1 | 	add	fp, #24
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04     18 4E 85 F1 | 	sub	fp, #24
0dd08                 | LR__1190
0dd08     1C 4E 05 F1 | 	add	fp, #28
0dd0c     A7 FE 48 FC | 	wrbyte	#127, fp
0dd10     01 4E 05 F1 | 	add	fp, #1
0dd14     A7 00 49 FC | 	wrbyte	#128, fp
0dd18     01 4E 85 F1 | 	sub	fp, #1
0dd1c     A7 14 02 F6 | 	mov	arg02, fp
0dd20     04 4E 85 F1 | 	sub	fp, #4
0dd24     A7 16 02 FB | 	rdlong	arg03, fp
0dd28     18 4E 85 F1 | 	sub	fp, #24
0dd2c     01 16 66 F0 | 	shl	arg03, #1
0dd30     07 12 06 F6 | 	mov	arg01, #7
0dd34     0E 18 C6 F9 | 	decod	arg04, #14
0dd38     02 1A 06 F6 | 	mov	arg05, #2
0dd3c     00 1C 06 F6 | 	mov	arg06, #0
0dd40     0B 00 00 FF 
0dd44     CC E4 05 F1 | 	add	objptr, ##5836
0dd48     E4 6D B1 FD | 	call	#_audio096_spin2_play8
0dd4c     0B 00 00 FF 
0dd50     CC E4 85 F1 | 	sub	objptr, ##5836
0dd54     0C 4E 05 F1 | 	add	fp, #12
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     0C 4E 85 F1 | 	sub	fp, #12
0dd60     C0 EE BF FD | 	call	#_push
0dd64     78 CE B0 FD | 	call	#_do_waitms
0dd68     07 12 06 F6 | 	mov	arg01, #7
0dd6c     0B 00 00 FF 
0dd70     CC E4 05 F1 | 	add	objptr, ##5836
0dd74     5C 6E B1 FD | 	call	#_audio096_spin2_stop
0dd78     0B 00 00 FF 
0dd7c     CC E4 85 F1 | 	sub	objptr, ##5836
0dd80     A7 F0 03 F6 | 	mov	ptra, fp
0dd84     B2 00 A0 FD | 	call	#popregs_
0dd88                 | _do_beep_ret
0dd88     2D 00 64 FD | 	ret
0dd8c                 | 
0dd8c                 | ' 
0dd8c                 | ' '-------------------- blit
0dd8c                 | ' 
0dd8c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dd8c                 | ' sub do_blit
0dd8c                 | _do_blit
0dd8c     02 4A 05 F6 | 	mov	COUNT_, #2
0dd90     A8 00 A0 FD | 	call	#pushregs_
0dd94     3C F0 07 F1 | 	add	ptra, #60
0dd98     4A 00 00 FF 
0dd9c     80 E4 05 F1 | 	add	objptr, ##38016
0dda0     F2 26 02 FB | 	rdlong	local01, objptr
0dda4     13 25 02 F6 | 	mov	arg10, local01
0dda8     01 24 66 F0 | 	shl	arg10, #1
0ddac     13 25 02 F1 | 	add	arg10, local01
0ddb0     02 24 66 F0 | 	shl	arg10, #2
0ddb4     03 00 00 FF 
0ddb8     04 E4 85 F1 | 	sub	objptr, ##1540
0ddbc     F2 24 02 F1 | 	add	arg10, objptr
0ddc0     12 25 02 FB | 	rdlong	arg10, arg10
0ddc4     38 4E 05 F1 | 	add	fp, #56
0ddc8     A7 24 62 FC | 	wrlong	arg10, fp
0ddcc                 | ' 
0ddcc                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddcc                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0ddcc     38 4E 85 F1 | 	sub	fp, #56
0ddd0     0A 24 0E F2 | 	cmp	arg10, #10 wz
0ddd4     47 00 00 FF 
0ddd8     7C E4 85 F1 | 	sub	objptr, ##36476
0dddc     38 4E 05 51 |  if_ne	add	fp, #56
0dde0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dde4     38 4E 85 51 |  if_ne	sub	fp, #56
0dde8     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0ddec     50 00 90 AD |  if_e	jmp	#LR__1200
0ddf0     00 12 06 F6 | 	mov	arg01, #0
0ddf4     80 CD B1 FD | 	call	#__system___getiolock_0593
0ddf8     FD 12 02 F6 | 	mov	arg01, result1
0ddfc     D4 70 B1 FD | 	call	#__system___lockmem
0de00     A8 01 00 FF 
0de04     33 15 06 F6 | 	mov	arg02, ##@LR__5763
0de08     00 12 06 F6 | 	mov	arg01, #0
0de0c     00 16 06 F6 | 	mov	arg03, #0
0de10     B8 7D B1 FD | 	call	#__system___basic_print_string
0de14     00 12 06 F6 | 	mov	arg01, #0
0de18     5C CD B1 FD | 	call	#__system___getiolock_0593
0de1c     FD 00 68 FC | 	wrlong	#0, result1
0de20     50 00 00 FF 
0de24     F0 E4 05 F1 | 	add	objptr, ##41200
0de28     F2 14 02 FB | 	rdlong	arg02, objptr
0de2c     50 00 00 FF 
0de30     F0 E4 85 F1 | 	sub	objptr, ##41200
0de34     27 12 06 F6 | 	mov	arg01, #39
0de38     F0 36 B1 FD | 	call	#_printerror
0de3c     44 01 90 FD | 	jmp	#LR__1205
0de40                 | LR__1200
0de40                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0de40     38 4E 05 F1 | 	add	fp, #56
0de44     A7 28 02 FB | 	rdlong	local02, fp
0de48     01 28 86 F1 | 	sub	local02, #1
0de4c     04 4E 85 F1 | 	sub	fp, #4
0de50     A7 28 62 FC | 	wrlong	local02, fp
0de54     34 4E 85 F1 | 	sub	fp, #52
0de58                 | LR__1201
0de58     38 4E 05 F1 | 	add	fp, #56
0de5c     A7 26 02 FB | 	rdlong	local01, fp
0de60     01 26 86 F1 | 	sub	local01, #1
0de64     04 4E 85 F1 | 	sub	fp, #4
0de68     A7 24 02 FB | 	rdlong	arg10, fp
0de6c     34 4E 85 F1 | 	sub	fp, #52
0de70     13 25 1A F2 | 	cmp	arg10, local01 wcz
0de74     54 00 90 1D |  if_a	jmp	#LR__1202
0de78     10 ED BF FD | 	call	#_pop
0de7c     A7 FA 61 FC | 	wrlong	result1, fp
0de80     04 4E 05 F1 | 	add	fp, #4
0de84     A7 FC 61 FC | 	wrlong	result2, fp
0de88     04 4E 05 F1 | 	add	fp, #4
0de8c     A7 FE 61 FC | 	wrlong	result3, fp
0de90     2C 4E 05 F1 | 	add	fp, #44
0de94     A7 28 02 FB | 	rdlong	local02, fp
0de98     02 28 66 F0 | 	shl	local02, #2
0de9c     28 4E 85 F1 | 	sub	fp, #40
0dea0     A7 28 02 F1 | 	add	local02, fp
0dea4     0C 4E 85 F1 | 	sub	fp, #12
0dea8     A7 12 02 F6 | 	mov	arg01, fp
0deac     C0 EE BF FD | 	call	#_converttoint
0deb0     14 FB 61 FC | 	wrlong	result1, local02
0deb4     34 4E 05 F1 | 	add	fp, #52
0deb8     A7 28 02 FB | 	rdlong	local02, fp
0debc     01 28 86 F1 | 	sub	local02, #1
0dec0     A7 28 62 FC | 	wrlong	local02, fp
0dec4     34 4E 85 F1 | 	sub	fp, #52
0dec8     8C FF 9F FD | 	jmp	#LR__1201
0decc                 | LR__1202
0decc                 | ' if numpar=10 then 
0decc     38 4E 05 F1 | 	add	fp, #56
0ded0     A7 28 02 FB | 	rdlong	local02, fp
0ded4     38 4E 85 F1 | 	sub	fp, #56
0ded8     0A 28 0E F2 | 	cmp	local02, #10 wz
0dedc     5C 00 90 5D |  if_ne	jmp	#LR__1203
0dee0     0C 4E 05 F1 | 	add	fp, #12
0dee4     A7 12 02 FB | 	rdlong	arg01, fp
0dee8     04 4E 05 F1 | 	add	fp, #4
0deec     A7 14 02 FB | 	rdlong	arg02, fp
0def0     04 4E 05 F1 | 	add	fp, #4
0def4     A7 16 02 FB | 	rdlong	arg03, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 18 02 FB | 	rdlong	arg04, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 1A 02 FB | 	rdlong	arg05, fp
0df08     04 4E 05 F1 | 	add	fp, #4
0df0c     A7 1C 02 FB | 	rdlong	arg06, fp
0df10     04 4E 05 F1 | 	add	fp, #4
0df14     A7 1E 02 FB | 	rdlong	arg07, fp
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c     A7 20 02 FB | 	rdlong	arg08, fp
0df20     04 4E 05 F1 | 	add	fp, #4
0df24     A7 22 02 FB | 	rdlong	arg09, fp
0df28     04 4E 05 F1 | 	add	fp, #4
0df2c     A7 24 02 FB | 	rdlong	arg10, fp
0df30     30 4E 85 F1 | 	sub	fp, #48
0df34     D0 5D B1 FD | 	call	#_hg010b_spin2_blit
0df38     48 00 90 FD | 	jmp	#LR__1204
0df3c                 | LR__1203
0df3c     F2 1E 02 FB | 	rdlong	arg07, objptr
0df40     0C 4E 05 F1 | 	add	fp, #12
0df44     A7 14 02 FB | 	rdlong	arg02, fp
0df48     04 4E 05 F1 | 	add	fp, #4
0df4c     A7 16 02 FB | 	rdlong	arg03, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 18 02 FB | 	rdlong	arg04, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 1A 02 FB | 	rdlong	arg05, fp
0df60     04 4E 05 F1 | 	add	fp, #4
0df64     A7 20 02 FB | 	rdlong	arg08, fp
0df68     04 4E 05 F1 | 	add	fp, #4
0df6c     A7 22 02 FB | 	rdlong	arg09, fp
0df70     20 4E 85 F1 | 	sub	fp, #32
0df74     0F 13 02 F6 | 	mov	arg01, arg07
0df78     0A 1C C6 F9 | 	decod	arg06, #10
0df7c     0A 24 C6 F9 | 	decod	arg10, #10
0df80     84 5D B1 FD | 	call	#_hg010b_spin2_blit
0df84                 | LR__1204
0df84                 | LR__1205
0df84     A7 F0 03 F6 | 	mov	ptra, fp
0df88     B2 00 A0 FD | 	call	#popregs_
0df8c                 | _do_blit_ret
0df8c     2D 00 64 FD | 	ret
0df90                 | 
0df90                 | ' 
0df90                 | ' 
0df90                 | ' '-------------------- bin$
0df90                 | ' 
0df90                 | ' sub do_bin
0df90                 | _do_bin
0df90     01 4A 05 F6 | 	mov	COUNT_, #1
0df94     A8 00 A0 FD | 	call	#pushregs_
0df98     18 F0 07 F1 | 	add	ptra, #24
0df9c     4A 00 00 FF 
0dfa0     80 E4 05 F1 | 	add	objptr, ##38016
0dfa4     F2 26 02 FB | 	rdlong	local01, objptr
0dfa8     13 17 02 F6 | 	mov	arg03, local01
0dfac     01 16 66 F0 | 	shl	arg03, #1
0dfb0     13 17 02 F1 | 	add	arg03, local01
0dfb4     02 16 66 F0 | 	shl	arg03, #2
0dfb8     03 00 00 FF 
0dfbc     04 E4 85 F1 | 	sub	objptr, ##1540
0dfc0     F2 16 02 F1 | 	add	arg03, objptr
0dfc4     0B 17 02 FB | 	rdlong	arg03, arg03
0dfc8     0C 4E 05 F1 | 	add	fp, #12
0dfcc     A7 16 62 FC | 	wrlong	arg03, fp
0dfd0                 | ' 
0dfd0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfd0                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0dfd0     0C 4E 85 F1 | 	sub	fp, #12
0dfd4     03 16 16 F2 | 	cmp	arg03, #3 wc
0dfd8     47 00 00 FF 
0dfdc     7C E4 85 F1 | 	sub	objptr, ##36476
0dfe0     0C 4E 05 C1 |  if_b	add	fp, #12
0dfe4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dfe8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0dff0     00 12 06 F6 | 	mov	arg01, #0
0dff4     80 CB B1 FD | 	call	#__system___getiolock_0593
0dff8     FD 12 02 F6 | 	mov	arg01, result1
0dffc     D4 6E B1 FD | 	call	#__system___lockmem
0e000     A8 01 00 FF 
0e004     3A 15 06 F6 | 	mov	arg02, ##@LR__5764
0e008     00 12 06 F6 | 	mov	arg01, #0
0e00c     00 16 06 F6 | 	mov	arg03, #0
0e010     B8 7B B1 FD | 	call	#__system___basic_print_string
0e014     00 12 06 F6 | 	mov	arg01, #0
0e018     5C CB B1 FD | 	call	#__system___getiolock_0593
0e01c     FD 00 68 FC | 	wrlong	#0, result1
0e020     27 12 06 F6 | 	mov	arg01, #39
0e024     00 14 06 F6 | 	mov	arg02, #0
0e028     00 35 B1 FD | 	call	#_printerror
0e02c     B8 00 90 FD | 	jmp	#LR__1213
0e030                 | LR__1210
0e030                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e030     0C 4E 05 F1 | 	add	fp, #12
0e034     A7 26 02 FB | 	rdlong	local01, fp
0e038     0C 4E 85 F1 | 	sub	fp, #12
0e03c     02 26 0E F2 | 	cmp	local01, #2 wz
0e040     38 00 90 5D |  if_ne	jmp	#LR__1211
0e044     44 EB BF FD | 	call	#_pop
0e048     FF 26 02 F6 | 	mov	local01, result3
0e04c     A7 FA 61 FC | 	wrlong	result1, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 FC 61 FC | 	wrlong	result2, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 26 62 FC | 	wrlong	local01, fp
0e060     08 4E 85 F1 | 	sub	fp, #8
0e064     A7 12 02 F6 | 	mov	arg01, fp
0e068     04 ED BF FD | 	call	#_converttoint
0e06c     14 4E 05 F1 | 	add	fp, #20
0e070     A7 FA 61 FC | 	wrlong	result1, fp
0e074     14 4E 85 F1 | 	sub	fp, #20
0e078     0C 00 90 FD | 	jmp	#LR__1212
0e07c                 | LR__1211
0e07c     14 4E 05 F1 | 	add	fp, #20
0e080     A7 00 68 FC | 	wrlong	#0, fp
0e084     14 4E 85 F1 | 	sub	fp, #20
0e088                 | LR__1212
0e088     00 EB BF FD | 	call	#_pop
0e08c     FF 26 02 F6 | 	mov	local01, result3
0e090     A7 FA 61 FC | 	wrlong	result1, fp
0e094     04 4E 05 F1 | 	add	fp, #4
0e098     A7 FC 61 FC | 	wrlong	result2, fp
0e09c     04 4E 05 F1 | 	add	fp, #4
0e0a0     A7 26 62 FC | 	wrlong	local01, fp
0e0a4     08 4E 85 F1 | 	sub	fp, #8
0e0a8     A7 12 02 F6 | 	mov	arg01, fp
0e0ac     C0 EC BF FD | 	call	#_converttoint
0e0b0     10 4E 05 F1 | 	add	fp, #16
0e0b4     A7 FA 61 FC | 	wrlong	result1, fp
0e0b8     FD 12 02 F6 | 	mov	arg01, result1
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 14 02 FB | 	rdlong	arg02, fp
0e0c4     14 4E 85 F1 | 	sub	fp, #20
0e0c8     02 16 06 F6 | 	mov	arg03, #2
0e0cc     D8 90 B1 FD | 	call	#__system__Number_S
0e0d0     A7 FA 61 FC | 	wrlong	result1, fp
0e0d4     08 4E 05 F1 | 	add	fp, #8
0e0d8     A7 3E 68 FC | 	wrlong	#31, fp
0e0dc     08 4E 85 F1 | 	sub	fp, #8
0e0e0     A7 12 02 F6 | 	mov	arg01, fp
0e0e4     3C EB BF FD | 	call	#_push
0e0e8                 | LR__1213
0e0e8     A7 F0 03 F6 | 	mov	ptra, fp
0e0ec     B2 00 A0 FD | 	call	#popregs_
0e0f0                 | _do_bin_ret
0e0f0     2D 00 64 FD | 	ret
0e0f4                 | 
0e0f4                 | ' 
0e0f4                 | ' '-------------------- box
0e0f4                 | ' 
0e0f4                 | ' sub do_box
0e0f4                 | _do_box
0e0f4     03 4A 05 F6 | 	mov	COUNT_, #3
0e0f8     A8 00 A0 FD | 	call	#pushregs_
0e0fc     30 F0 07 F1 | 	add	ptra, #48
0e100     88 EA BF FD | 	call	#_pop
0e104     FD 1A 02 F6 | 	mov	arg05, result1
0e108     FE 18 02 F6 | 	mov	arg04, result2
0e10c     FF 16 02 F6 | 	mov	arg03, result3
0e110     24 4E 05 F1 | 	add	fp, #36
0e114     A7 1A 62 FC | 	wrlong	arg05, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 18 62 FC | 	wrlong	arg04, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 16 62 FC | 	wrlong	arg03, fp
0e128     2C 4E 85 F1 | 	sub	fp, #44
0e12c     5C EA BF FD | 	call	#_pop
0e130     FD 1A 02 F6 | 	mov	arg05, result1
0e134     FE 18 02 F6 | 	mov	arg04, result2
0e138     FF 16 02 F6 | 	mov	arg03, result3
0e13c     18 4E 05 F1 | 	add	fp, #24
0e140     A7 1A 62 FC | 	wrlong	arg05, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 18 62 FC | 	wrlong	arg04, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 16 62 FC | 	wrlong	arg03, fp
0e154     20 4E 85 F1 | 	sub	fp, #32
0e158     30 EA BF FD | 	call	#_pop
0e15c     FD 1A 02 F6 | 	mov	arg05, result1
0e160     FE 18 02 F6 | 	mov	arg04, result2
0e164     FF 26 02 F6 | 	mov	local01, result3
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 1A 62 FC | 	wrlong	arg05, fp
0e170     04 4E 05 F1 | 	add	fp, #4
0e174     A7 18 62 FC | 	wrlong	arg04, fp
0e178     04 4E 05 F1 | 	add	fp, #4
0e17c     A7 26 62 FC | 	wrlong	local01, fp
0e180     14 4E 85 F1 | 	sub	fp, #20
0e184     04 EA BF FD | 	call	#_pop
0e188     A7 FA 61 FC | 	wrlong	result1, fp
0e18c     04 4E 05 F1 | 	add	fp, #4
0e190     A7 FC 61 FC | 	wrlong	result2, fp
0e194     04 4E 05 F1 | 	add	fp, #4
0e198     A7 FE 61 FC | 	wrlong	result3, fp
0e19c                 | ' 
0e19c                 | ' t4=pop()
0e19c                 | ' t3=pop()
0e19c                 | ' t2=pop()
0e19c                 | ' t1=pop()
0e19c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e19c     FF 1A 02 F6 | 	mov	arg05, result3
0e1a0     08 4E 85 F1 | 	sub	fp, #8
0e1a4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e1a8     08 4E 05 51 |  if_ne	add	fp, #8
0e1ac     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e1b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e1b4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e1b8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e1bc     14 4E 05 F1 | 	add	fp, #20
0e1c0     A7 26 02 FB | 	rdlong	local01, fp
0e1c4     14 4E 85 F1 | 	sub	fp, #20
0e1c8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e1cc     14 4E 05 51 |  if_ne	add	fp, #20
0e1d0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1d4     14 4E 85 51 |  if_ne	sub	fp, #20
0e1d8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1dc     84 00 90 5D |  if_ne	jmp	#LR__1220
0e1e0     20 4E 05 F1 | 	add	fp, #32
0e1e4     A7 26 02 FB | 	rdlong	local01, fp
0e1e8     20 4E 85 F1 | 	sub	fp, #32
0e1ec     1C 26 0E F2 | 	cmp	local01, #28 wz
0e1f0     20 4E 05 51 |  if_ne	add	fp, #32
0e1f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1f8     20 4E 85 51 |  if_ne	sub	fp, #32
0e1fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e200     60 00 90 5D |  if_ne	jmp	#LR__1220
0e204     2C 4E 05 F1 | 	add	fp, #44
0e208     A7 26 02 FB | 	rdlong	local01, fp
0e20c     2C 4E 85 F1 | 	sub	fp, #44
0e210     1C 26 0E F2 | 	cmp	local01, #28 wz
0e214     2C 4E 05 51 |  if_ne	add	fp, #44
0e218     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e21c     2C 4E 85 51 |  if_ne	sub	fp, #44
0e220     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e224     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e228     A7 12 02 FB | 	rdlong	arg01, fp
0e22c     0C 4E 05 F1 | 	add	fp, #12
0e230     A7 14 02 FB | 	rdlong	arg02, fp
0e234     0C 4E 05 F1 | 	add	fp, #12
0e238     A7 16 02 FB | 	rdlong	arg03, fp
0e23c     0C 4E 05 F1 | 	add	fp, #12
0e240     A7 18 02 FB | 	rdlong	arg04, fp
0e244     24 4E 85 F1 | 	sub	fp, #36
0e248     37 00 00 FF 
0e24c     28 E4 05 F1 | 	add	objptr, ##28200
0e250     F2 1A 02 FB | 	rdlong	arg05, objptr
0e254     37 00 00 FF 
0e258     28 E4 85 F1 | 	sub	objptr, ##28200
0e25c     70 4D B1 FD | 	call	#_hg010b_spin2_box
0e260                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e260     6C 00 90 FD | 	jmp	#LR__1221
0e264                 | LR__1220
0e264     A7 12 02 F6 | 	mov	arg01, fp
0e268     04 EB BF FD | 	call	#_converttoint
0e26c     FD 28 02 F6 | 	mov	local02, result1
0e270     0C 4E 05 F1 | 	add	fp, #12
0e274     A7 12 02 F6 | 	mov	arg01, fp
0e278     0C 4E 85 F1 | 	sub	fp, #12
0e27c     F0 EA BF FD | 	call	#_converttoint
0e280     FD 2A 02 F6 | 	mov	local03, result1
0e284     18 4E 05 F1 | 	add	fp, #24
0e288     A7 12 02 F6 | 	mov	arg01, fp
0e28c     18 4E 85 F1 | 	sub	fp, #24
0e290     DC EA BF FD | 	call	#_converttoint
0e294     FD 26 02 F6 | 	mov	local01, result1
0e298     24 4E 05 F1 | 	add	fp, #36
0e29c     A7 12 02 F6 | 	mov	arg01, fp
0e2a0     24 4E 85 F1 | 	sub	fp, #36
0e2a4     C8 EA BF FD | 	call	#_converttoint
0e2a8     FD 18 02 F6 | 	mov	arg04, result1
0e2ac     37 00 00 FF 
0e2b0     28 E4 05 F1 | 	add	objptr, ##28200
0e2b4     F2 1A 02 FB | 	rdlong	arg05, objptr
0e2b8     37 00 00 FF 
0e2bc     28 E4 85 F1 | 	sub	objptr, ##28200
0e2c0     14 13 02 F6 | 	mov	arg01, local02
0e2c4     15 15 02 F6 | 	mov	arg02, local03
0e2c8     13 17 02 F6 | 	mov	arg03, local01
0e2cc     00 4D B1 FD | 	call	#_hg010b_spin2_box
0e2d0                 | LR__1221
0e2d0     A7 F0 03 F6 | 	mov	ptra, fp
0e2d4     B2 00 A0 FD | 	call	#popregs_
0e2d8                 | _do_box_ret
0e2d8     2D 00 64 FD | 	ret
0e2dc                 | 
0e2dc                 | ' 
0e2dc                 | ' '-------------------- brun
0e2dc                 | ' 
0e2dc                 | ' sub do_brun
0e2dc                 | _do_brun
0e2dc     08 4A 05 F6 | 	mov	COUNT_, #8
0e2e0     A8 00 A0 FD | 	call	#pushregs_
0e2e4     A4 E8 BF FD | 	call	#_pop
0e2e8     FE 1A 02 F6 | 	mov	arg05, result2
0e2ec     FF 18 02 F6 | 	mov	arg04, result3
0e2f0     FD 26 02 F6 | 	mov	local01, result1
0e2f4     0D 29 02 F6 | 	mov	local02, arg05
0e2f8     0C 2B 02 F6 | 	mov	local03, arg04
0e2fc                 | ' 
0e2fc                 | ' t1=pop() 
0e2fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e2fc     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e300     10 00 90 5D |  if_ne	jmp	#LR__1230
0e304     13 13 02 F6 | 	mov	arg01, local01
0e308     F8 E9 BF FD | 	call	#_convertstring
0e30c     FD 26 02 F6 | 	mov	local01, result1
0e310     1F 2A 06 F6 | 	mov	local03, #31
0e314                 | LR__1230
0e314                 | ' if t1.result_type=result_string then
0e314     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e318     F0 01 90 5D |  if_ne	jmp	#LR__1234
0e31c     13 2D 02 F6 | 	mov	local04, local01
0e320                 | '   filename=t1.result.sresult
0e320                 | '   if left$(filename,1)="/" then 
0e320     16 13 02 F6 | 	mov	arg01, local04
0e324     01 14 06 F6 | 	mov	arg02, #1
0e328     28 8C B1 FD | 	call	#__system__Left_S
0e32c     FD 12 02 F6 | 	mov	arg01, result1
0e330     A8 01 00 FF 
0e334     41 15 06 F6 | 	mov	arg02, ##@LR__5765
0e338     C0 6B B1 FD | 	call	#__system___string_cmp
0e33c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e340     16 2F 02 A6 |  if_e	mov	local05, local04
0e344     14 00 90 AD |  if_e	jmp	#LR__1231
0e348     A8 01 00 FF 
0e34c     43 13 06 F6 | 	mov	arg01, ##@LR__5766
0e350     16 15 02 F6 | 	mov	arg02, local04
0e354     D8 6B B1 FD | 	call	#__system___string_concat
0e358     FD 2E 02 F6 | 	mov	local05, result1
0e35c                 | LR__1231
0e35c                 | '   open fullfilename for input as #9
0e35c     09 12 06 F6 | 	mov	arg01, #9
0e360     17 15 02 F6 | 	mov	arg02, local05
0e364     00 16 06 F6 | 	mov	arg03, #0
0e368     6C 77 B1 FD | 	call	#__system___basic_open_string
0e36c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e370     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e374     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e378     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e37c     FD 30 0A F6 | 	mov	local06, result1 wz
0e380                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e380     8C 00 90 AD |  if_e	jmp	#LR__1232
0e384     00 12 06 F6 | 	mov	arg01, #0
0e388     EC C7 B1 FD | 	call	#__system___getiolock_0593
0e38c     FD 12 02 F6 | 	mov	arg01, result1
0e390     40 6B B1 FD | 	call	#__system___lockmem
0e394     A8 01 00 FF 
0e398     4C 15 06 F6 | 	mov	arg02, ##@LR__5767
0e39c     00 12 06 F6 | 	mov	arg01, #0
0e3a0     00 16 06 F6 | 	mov	arg03, #0
0e3a4     24 78 B1 FD | 	call	#__system___basic_print_string
0e3a8     00 12 06 F6 | 	mov	arg01, #0
0e3ac     18 15 02 F6 | 	mov	arg02, local06
0e3b0     00 16 06 F6 | 	mov	arg03, #0
0e3b4     0A 18 06 F6 | 	mov	arg04, #10
0e3b8     54 78 B1 FD | 	call	#__system___basic_print_integer
0e3bc     A8 01 00 FF 
0e3c0     5A 15 06 F6 | 	mov	arg02, ##@LR__5768
0e3c4     00 12 06 F6 | 	mov	arg01, #0
0e3c8     00 16 06 F6 | 	mov	arg03, #0
0e3cc     FC 77 B1 FD | 	call	#__system___basic_print_string
0e3d0     18 13 02 F6 | 	mov	arg01, local06
0e3d4     8C 94 B1 FD | 	call	#__system___strerror
0e3d8     FD 14 02 F6 | 	mov	arg02, result1
0e3dc     00 12 06 F6 | 	mov	arg01, #0
0e3e0     00 16 06 F6 | 	mov	arg03, #0
0e3e4     E4 77 B1 FD | 	call	#__system___basic_print_string
0e3e8     00 12 06 F6 | 	mov	arg01, #0
0e3ec     0A 14 06 F6 | 	mov	arg02, #10
0e3f0     00 16 06 F6 | 	mov	arg03, #0
0e3f4     7C 77 B1 FD | 	call	#__system___basic_print_char
0e3f8     00 12 06 F6 | 	mov	arg01, #0
0e3fc     78 C7 B1 FD | 	call	#__system___getiolock_0593
0e400     FD 00 68 FC | 	wrlong	#0, result1
0e404     09 12 06 F6 | 	mov	arg01, #9
0e408     24 BE B1 FD | 	call	#__system__close
0e40c     FC 00 90 FD | 	jmp	#LR__1235
0e410                 | LR__1232
0e410     01 32 06 F6 | 	mov	local07, #1
0e414     00 34 06 F6 | 	mov	local08, #0
0e418                 | '   do
0e418                 | LR__1233
0e418                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e418     4E 00 00 FF 
0e41c     B4 E4 05 F1 | 	add	objptr, ##40116
0e420     F2 16 02 F6 | 	mov	arg03, objptr
0e424     4E 00 00 FF 
0e428     B4 E4 85 F1 | 	sub	objptr, ##40116
0e42c     09 12 06 F6 | 	mov	arg01, #9
0e430     19 15 02 F6 | 	mov	arg02, local07
0e434     0A 18 C6 F9 | 	decod	arg04, #10
0e438     01 1A 06 F6 | 	mov	arg05, #1
0e43c     08 79 B1 FD | 	call	#__system___basic_get
0e440     FD 30 02 F6 | 	mov	local06, result1
0e444     FD 32 02 F1 | 	add	local07, result1
0e448     4E 00 00 FF 
0e44c     B4 E4 05 F1 | 	add	objptr, ##40116
0e450     F2 12 02 F6 | 	mov	arg01, objptr
0e454     1A 15 02 F6 | 	mov	arg02, local08
0e458     0A 16 C6 F9 | 	decod	arg03, #10
0e45c     42 00 00 FF 
0e460     E8 E5 85 F1 | 	sub	objptr, ##34280
0e464     C8 5E B1 FD | 	call	#_psram_spin2_write
0e468     0B 00 00 FF 
0e46c     CC E4 85 F1 | 	sub	objptr, ##5836
0e470     18 35 02 F1 | 	add	local08, local06
0e474     02 00 00 FF 
0e478     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e47c     E0 03 00 AF 
0e480     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e484     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e488     36 00 00 FF 
0e48c     FC E5 05 F1 | 	add	objptr, ##28156
0e490     F2 12 02 FB | 	rdlong	arg01, objptr
0e494     03 12 62 FD | 	cogstop	arg01
0e498     04 E4 05 F1 | 	add	objptr, #4
0e49c     F2 12 02 FB | 	rdlong	arg01, objptr
0e4a0     03 12 62 FD | 	cogstop	arg01
0e4a4     04 E4 05 F1 | 	add	objptr, #4
0e4a8     F2 12 02 FB | 	rdlong	arg01, objptr
0e4ac     03 12 62 FD | 	cogstop	arg01
0e4b0     19 00 00 FF 
0e4b4     3C E5 05 F1 | 	add	objptr, ##13116
0e4b8     F2 12 02 FB | 	rdlong	arg01, objptr
0e4bc     03 12 62 FD | 	cogstop	arg01
0e4c0     18 00 00 FF 
0e4c4     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e4c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e4cc     18 00 00 FF 
0e4d0     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e4d4     19 00 00 FF 
0e4d8     34 E5 85 F1 | 	sub	objptr, ##13108
0e4dc     1E 34 06 F6 | 	mov	local08, #30
0e4e0     28 E4 61 FD | 	setq	objptr
0e4e4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e4e8     01 34 66 C6 |  if_b	neg	local08, #1
0e4ec     1B 00 00 FF 
0e4f0     48 E4 05 F1 | 	add	objptr, ##13896
0e4f4     F2 34 62 FC | 	wrlong	local08, objptr
0e4f8     52 00 00 FF 
0e4fc     54 E4 85 F1 | 	sub	objptr, ##42068
0e500     00 12 06 F6 | 	mov	arg01, #0
0e504     01 12 62 FD | 	cogid	arg01
0e508     03 12 62 FD | 	cogstop	arg01
0e50c                 | LR__1234
0e50c                 | LR__1235
0e50c     A7 F0 03 F6 | 	mov	ptra, fp
0e510     B2 00 A0 FD | 	call	#popregs_
0e514                 | _do_brun_ret
0e514     2D 00 64 FD | 	ret
0e518                 | 
0e518                 | ' 
0e518                 | ' '-------------------- cd
0e518                 | ' 
0e518                 | ' sub do_cd
0e518                 | _do_cd
0e518     06 4A 05 F6 | 	mov	COUNT_, #6
0e51c     A8 00 A0 FD | 	call	#pushregs_
0e520     A8 01 00 FF 
0e524     5D 13 06 F6 | 	mov	arg01, ##@LR__5769
0e528     31 14 06 F6 | 	mov	arg02, #49
0e52c     08 C8 B1 FD | 	call	#__system___basic_dir
0e530     58 E6 BF FD | 	call	#_pop
0e534     FE 18 02 F6 | 	mov	arg04, result2
0e538     FF 16 02 F6 | 	mov	arg03, result3
0e53c     FD 26 02 F6 | 	mov	local01, result1
0e540     0C 29 02 F6 | 	mov	local02, arg04
0e544     0B 2B 02 F6 | 	mov	local03, arg03
0e548                 | ' t1=pop()
0e548                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e548     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e54c     10 00 90 5D |  if_ne	jmp	#LR__1240
0e550     13 13 02 F6 | 	mov	arg01, local01
0e554     AC E7 BF FD | 	call	#_convertstring
0e558     FD 26 02 F6 | 	mov	local01, result1
0e55c     1F 2A 06 F6 | 	mov	local03, #31
0e560                 | LR__1240
0e560                 | ' if t1.result_type<>result_string then printerror(15): return
0e560     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e564     10 00 90 AD |  if_e	jmp	#LR__1241
0e568     0F 12 06 F6 | 	mov	arg01, #15
0e56c     00 14 06 F6 | 	mov	arg02, #0
0e570     B8 2F B1 FD | 	call	#_printerror
0e574     54 05 90 FD | 	jmp	#LR__1259
0e578                 | LR__1241
0e578     13 2D 02 F6 | 	mov	local04, local01
0e57c                 | ' newdir$=t1.result.sresult
0e57c                 | ' if newdir$=".." then 
0e57c     A8 01 00 FF 
0e580     5F 15 06 F6 | 	mov	arg02, ##@LR__5770
0e584     16 13 02 F6 | 	mov	arg01, local04
0e588     70 69 B1 FD | 	call	#__system___string_cmp
0e58c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e590     C8 01 90 5D |  if_ne	jmp	#LR__1248
0e594     4A 00 00 FF 
0e598     94 E4 05 F1 | 	add	objptr, ##38036
0e59c     F2 12 02 FB | 	rdlong	arg01, objptr
0e5a0     4A 00 00 FF 
0e5a4     94 E4 85 F1 | 	sub	objptr, ##38036
0e5a8     09 2F 02 F6 | 	mov	local05, arg01
0e5ac     97 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e5b0                 | LR__1242
0e5b0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e5b4     01 2E 06 51 |  if_ne	add	local05, #1
0e5b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e5bc                 | LR__1243
0e5bc     17 13 C2 F2 | 	subr	arg01, local05
0e5c0     4A 00 00 FF 
0e5c4     94 E4 05 F1 | 	add	objptr, ##38036
0e5c8     F2 14 02 FB | 	rdlong	arg02, objptr
0e5cc     4A 00 00 FF 
0e5d0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5d4     A8 01 00 FF 
0e5d8     62 17 06 F6 | 	mov	arg03, ##@LR__5771
0e5dc     C0 8F B1 FD | 	call	#__system__InstrRev
0e5e0     FD 2C 02 F6 | 	mov	local04, result1
0e5e4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e5e4     02 2C 56 F2 | 	cmps	local04, #2 wc
0e5e8     28 00 90 CD |  if_b	jmp	#LR__1244
0e5ec     4A 00 00 FF 
0e5f0     94 E4 05 F1 | 	add	objptr, ##38036
0e5f4     F2 12 02 FB | 	rdlong	arg01, objptr
0e5f8     4A 00 00 FF 
0e5fc     94 E4 85 F1 | 	sub	objptr, ##38036
0e600     01 2C 86 F1 | 	sub	local04, #1
0e604     16 15 02 F6 | 	mov	arg02, local04
0e608     48 89 B1 FD | 	call	#__system__Left_S
0e60c     FD 2C 02 F6 | 	mov	local04, result1
0e610     08 00 90 FD | 	jmp	#LR__1245
0e614                 | LR__1244
0e614     A8 01 00 FF 
0e618     64 2D 06 F6 | 	mov	local04, ##@LR__5772
0e61c                 | LR__1245
0e61c     16 13 02 F6 | 	mov	arg01, local04
0e620     3C 6F B1 FD | 	call	#__system___chdir
0e624     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e628     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e62c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e630     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e634     FD 30 0A F6 | 	mov	local06, result1 wz
0e638                 | '   chdir newdir$
0e638                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e638     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e63c     A4 00 90 AD |  if_e	jmp	#LR__1246
0e640     00 12 06 F6 | 	mov	arg01, #0
0e644     30 C5 B1 FD | 	call	#__system___getiolock_0593
0e648     FD 12 02 F6 | 	mov	arg01, result1
0e64c     84 68 B1 FD | 	call	#__system___lockmem
0e650     A8 01 00 FF 
0e654     66 15 06 F6 | 	mov	arg02, ##@LR__5773
0e658     00 12 06 F6 | 	mov	arg01, #0
0e65c     00 16 06 F6 | 	mov	arg03, #0
0e660     68 75 B1 FD | 	call	#__system___basic_print_string
0e664     00 12 06 F6 | 	mov	arg01, #0
0e668     18 15 02 F6 | 	mov	arg02, local06
0e66c     00 16 06 F6 | 	mov	arg03, #0
0e670     0A 18 06 F6 | 	mov	arg04, #10
0e674     98 75 B1 FD | 	call	#__system___basic_print_integer
0e678     A8 01 00 FF 
0e67c     74 15 06 F6 | 	mov	arg02, ##@LR__5774
0e680     00 12 06 F6 | 	mov	arg01, #0
0e684     00 16 06 F6 | 	mov	arg03, #0
0e688     40 75 B1 FD | 	call	#__system___basic_print_string
0e68c     45 00 00 FF 
0e690     50 E5 05 F1 | 	add	objptr, ##35664
0e694     F2 14 02 FB | 	rdlong	arg02, objptr
0e698     45 00 00 FF 
0e69c     50 E5 85 F1 | 	sub	objptr, ##35664
0e6a0     00 12 06 F6 | 	mov	arg01, #0
0e6a4     00 16 06 F6 | 	mov	arg03, #0
0e6a8     20 75 B1 FD | 	call	#__system___basic_print_string
0e6ac     00 12 06 F6 | 	mov	arg01, #0
0e6b0     0A 14 06 F6 | 	mov	arg02, #10
0e6b4     00 16 06 F6 | 	mov	arg03, #0
0e6b8     B8 74 B1 FD | 	call	#__system___basic_print_char
0e6bc     00 12 06 F6 | 	mov	arg01, #0
0e6c0     B4 C4 B1 FD | 	call	#__system___getiolock_0593
0e6c4     FD 00 68 FC | 	wrlong	#0, result1
0e6c8     4A 00 00 FF 
0e6cc     94 E4 05 F1 | 	add	objptr, ##38036
0e6d0     F2 12 02 FB | 	rdlong	arg01, objptr
0e6d4     4A 00 00 FF 
0e6d8     94 E4 85 F1 | 	sub	objptr, ##38036
0e6dc     80 6E B1 FD | 	call	#__system___chdir
0e6e0     14 00 90 FD | 	jmp	#LR__1247
0e6e4                 | LR__1246
0e6e4     4A 00 00 FF 
0e6e8     94 E4 05 F1 | 	add	objptr, ##38036
0e6ec     F2 2C 62 FC | 	wrlong	local04, objptr
0e6f0     4A 00 00 FF 
0e6f4     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f8                 | LR__1247
0e6f8                 | '   print "Current directory: ";currentdir$
0e6f8     00 12 06 F6 | 	mov	arg01, #0
0e6fc     78 C4 B1 FD | 	call	#__system___getiolock_0593
0e700     FD 12 02 F6 | 	mov	arg01, result1
0e704     CC 67 B1 FD | 	call	#__system___lockmem
0e708     A8 01 00 FF 
0e70c     77 15 06 F6 | 	mov	arg02, ##@LR__5775
0e710     00 12 06 F6 | 	mov	arg01, #0
0e714     00 16 06 F6 | 	mov	arg03, #0
0e718     B0 74 B1 FD | 	call	#__system___basic_print_string
0e71c     4A 00 00 FF 
0e720     94 E4 05 F1 | 	add	objptr, ##38036
0e724     F2 14 02 FB | 	rdlong	arg02, objptr
0e728     4A 00 00 FF 
0e72c     94 E4 85 F1 | 	sub	objptr, ##38036
0e730     00 12 06 F6 | 	mov	arg01, #0
0e734     00 16 06 F6 | 	mov	arg03, #0
0e738     90 74 B1 FD | 	call	#__system___basic_print_string
0e73c     00 12 06 F6 | 	mov	arg01, #0
0e740     0A 14 06 F6 | 	mov	arg02, #10
0e744     00 16 06 F6 | 	mov	arg03, #0
0e748     28 74 B1 FD | 	call	#__system___basic_print_char
0e74c     00 12 06 F6 | 	mov	arg01, #0
0e750     24 C4 B1 FD | 	call	#__system___getiolock_0593
0e754     FD 00 68 FC | 	wrlong	#0, result1
0e758                 | '   return
0e758     70 03 90 FD | 	jmp	#LR__1259
0e75c                 | LR__1248
0e75c                 | ' if left$(newdir$,1)="/" then 
0e75c     16 13 02 F6 | 	mov	arg01, local04
0e760     01 14 06 F6 | 	mov	arg02, #1
0e764     EC 87 B1 FD | 	call	#__system__Left_S
0e768     FD 12 02 F6 | 	mov	arg01, result1
0e76c     A8 01 00 FF 
0e770     8B 15 06 F6 | 	mov	arg02, ##@LR__5776
0e774     84 67 B1 FD | 	call	#__system___string_cmp
0e778     00 FA 0D F2 | 	cmp	result1, #0 wz
0e77c     40 01 90 5D |  if_ne	jmp	#LR__1251
0e780     16 13 02 F6 | 	mov	arg01, local04
0e784     D8 6D B1 FD | 	call	#__system___chdir
0e788     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e78c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e790     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e794     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e798     FD 30 0A F6 | 	mov	local06, result1 wz
0e79c                 | '   chdir(newdir$)
0e79c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e79c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e7a0     A4 00 90 AD |  if_e	jmp	#LR__1249
0e7a4     00 12 06 F6 | 	mov	arg01, #0
0e7a8     CC C3 B1 FD | 	call	#__system___getiolock_0593
0e7ac     FD 12 02 F6 | 	mov	arg01, result1
0e7b0     20 67 B1 FD | 	call	#__system___lockmem
0e7b4     A8 01 00 FF 
0e7b8     8D 15 06 F6 | 	mov	arg02, ##@LR__5777
0e7bc     00 12 06 F6 | 	mov	arg01, #0
0e7c0     00 16 06 F6 | 	mov	arg03, #0
0e7c4     04 74 B1 FD | 	call	#__system___basic_print_string
0e7c8     00 12 06 F6 | 	mov	arg01, #0
0e7cc     18 15 02 F6 | 	mov	arg02, local06
0e7d0     00 16 06 F6 | 	mov	arg03, #0
0e7d4     0A 18 06 F6 | 	mov	arg04, #10
0e7d8     34 74 B1 FD | 	call	#__system___basic_print_integer
0e7dc     A8 01 00 FF 
0e7e0     9B 15 06 F6 | 	mov	arg02, ##@LR__5778
0e7e4     00 12 06 F6 | 	mov	arg01, #0
0e7e8     00 16 06 F6 | 	mov	arg03, #0
0e7ec     DC 73 B1 FD | 	call	#__system___basic_print_string
0e7f0     45 00 00 FF 
0e7f4     50 E5 05 F1 | 	add	objptr, ##35664
0e7f8     F2 14 02 FB | 	rdlong	arg02, objptr
0e7fc     45 00 00 FF 
0e800     50 E5 85 F1 | 	sub	objptr, ##35664
0e804     00 12 06 F6 | 	mov	arg01, #0
0e808     00 16 06 F6 | 	mov	arg03, #0
0e80c     BC 73 B1 FD | 	call	#__system___basic_print_string
0e810     00 12 06 F6 | 	mov	arg01, #0
0e814     0A 14 06 F6 | 	mov	arg02, #10
0e818     00 16 06 F6 | 	mov	arg03, #0
0e81c     54 73 B1 FD | 	call	#__system___basic_print_char
0e820     00 12 06 F6 | 	mov	arg01, #0
0e824     50 C3 B1 FD | 	call	#__system___getiolock_0593
0e828     FD 00 68 FC | 	wrlong	#0, result1
0e82c     4A 00 00 FF 
0e830     94 E4 05 F1 | 	add	objptr, ##38036
0e834     F2 12 02 FB | 	rdlong	arg01, objptr
0e838     4A 00 00 FF 
0e83c     94 E4 85 F1 | 	sub	objptr, ##38036
0e840     1C 6D B1 FD | 	call	#__system___chdir
0e844     14 00 90 FD | 	jmp	#LR__1250
0e848                 | LR__1249
0e848     4A 00 00 FF 
0e84c     94 E4 05 F1 | 	add	objptr, ##38036
0e850     F2 2C 62 FC | 	wrlong	local04, objptr
0e854     4A 00 00 FF 
0e858     94 E4 85 F1 | 	sub	objptr, ##38036
0e85c                 | LR__1250
0e85c                 | '   print "Current directory: ";currentdir$
0e85c     00 12 06 F6 | 	mov	arg01, #0
0e860     14 C3 B1 FD | 	call	#__system___getiolock_0593
0e864     FD 12 02 F6 | 	mov	arg01, result1
0e868     68 66 B1 FD | 	call	#__system___lockmem
0e86c     A8 01 00 FF 
0e870     9E 15 06 F6 | 	mov	arg02, ##@LR__5779
0e874     00 12 06 F6 | 	mov	arg01, #0
0e878     00 16 06 F6 | 	mov	arg03, #0
0e87c     4C 73 B1 FD | 	call	#__system___basic_print_string
0e880     4A 00 00 FF 
0e884     94 E4 05 F1 | 	add	objptr, ##38036
0e888     F2 14 02 FB | 	rdlong	arg02, objptr
0e88c     4A 00 00 FF 
0e890     94 E4 85 F1 | 	sub	objptr, ##38036
0e894     00 12 06 F6 | 	mov	arg01, #0
0e898     00 16 06 F6 | 	mov	arg03, #0
0e89c     2C 73 B1 FD | 	call	#__system___basic_print_string
0e8a0     00 12 06 F6 | 	mov	arg01, #0
0e8a4     0A 14 06 F6 | 	mov	arg02, #10
0e8a8     00 16 06 F6 | 	mov	arg03, #0
0e8ac     C4 72 B1 FD | 	call	#__system___basic_print_char
0e8b0     00 12 06 F6 | 	mov	arg01, #0
0e8b4     C0 C2 B1 FD | 	call	#__system___getiolock_0593
0e8b8     FD 00 68 FC | 	wrlong	#0, result1
0e8bc                 | '   return
0e8bc     0C 02 90 FD | 	jmp	#LR__1259
0e8c0                 | LR__1251
0e8c0                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e8c0     4A 00 00 FF 
0e8c4     94 E4 05 F1 | 	add	objptr, ##38036
0e8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0e8cc     4A 00 00 FF 
0e8d0     94 E4 85 F1 | 	sub	objptr, ##38036
0e8d4     A8 01 00 FF 
0e8d8     B2 15 06 F6 | 	mov	arg02, ##@LR__5780
0e8dc     1C 66 B1 FD | 	call	#__system___string_cmp
0e8e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8e4     34 00 90 AD |  if_e	jmp	#LR__1252
0e8e8     4A 00 00 FF 
0e8ec     94 E4 05 F1 | 	add	objptr, ##38036
0e8f0     F2 12 02 FB | 	rdlong	arg01, objptr
0e8f4     4A 00 00 FF 
0e8f8     94 E4 85 F1 | 	sub	objptr, ##38036
0e8fc     A8 01 00 FF 
0e900     B4 15 06 F6 | 	mov	arg02, ##@LR__5781
0e904     28 66 B1 FD | 	call	#__system___string_concat
0e908     FD 12 02 F6 | 	mov	arg01, result1
0e90c     16 15 02 F6 | 	mov	arg02, local04
0e910     1C 66 B1 FD | 	call	#__system___string_concat
0e914     FD 2C 02 F6 | 	mov	local04, result1
0e918     20 00 90 FD | 	jmp	#LR__1253
0e91c                 | LR__1252
0e91c     4A 00 00 FF 
0e920     94 E4 05 F1 | 	add	objptr, ##38036
0e924     F2 12 02 FB | 	rdlong	arg01, objptr
0e928     4A 00 00 FF 
0e92c     94 E4 85 F1 | 	sub	objptr, ##38036
0e930     16 15 02 F6 | 	mov	arg02, local04
0e934     F8 65 B1 FD | 	call	#__system___string_concat
0e938     FD 2C 02 F6 | 	mov	local04, result1
0e93c                 | LR__1253
0e93c                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e93c     16 13 02 F6 | 	mov	arg01, local04
0e940     01 14 06 F6 | 	mov	arg02, #1
0e944     94 86 B1 FD | 	call	#__system__Right_S
0e948     FD 12 02 F6 | 	mov	arg01, result1
0e94c     A8 01 00 FF 
0e950     B6 15 06 F6 | 	mov	arg02, ##@LR__5782
0e954     A4 65 B1 FD | 	call	#__system___string_cmp
0e958     00 FA 0D F2 | 	cmp	result1, #0 wz
0e95c     30 00 90 5D |  if_ne	jmp	#LR__1256
0e960     16 13 02 F6 | 	mov	arg01, local04
0e964     09 2F 02 F6 | 	mov	local05, arg01
0e968     97 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0e96c                 | LR__1254
0e96c     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e970     01 2E 06 51 |  if_ne	add	local05, #1
0e974     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0e978                 | LR__1255
0e978     09 2F 82 F1 | 	sub	local05, arg01
0e97c     17 15 02 F6 | 	mov	arg02, local05
0e980     01 14 86 F1 | 	sub	arg02, #1
0e984     16 13 02 F6 | 	mov	arg01, local04
0e988     C8 85 B1 FD | 	call	#__system__Left_S
0e98c     FD 2C 02 F6 | 	mov	local04, result1
0e990                 | LR__1256
0e990     16 13 02 F6 | 	mov	arg01, local04
0e994     C8 6B B1 FD | 	call	#__system___chdir
0e998     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e99c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e9a0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e9a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e9a8     FD 30 0A F6 | 	mov	local06, result1 wz
0e9ac                 | '   chdir(newdir$)
0e9ac                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e9ac     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e9b0     A4 00 90 AD |  if_e	jmp	#LR__1257
0e9b4     00 12 06 F6 | 	mov	arg01, #0
0e9b8     BC C1 B1 FD | 	call	#__system___getiolock_0593
0e9bc     FD 12 02 F6 | 	mov	arg01, result1
0e9c0     10 65 B1 FD | 	call	#__system___lockmem
0e9c4     A8 01 00 FF 
0e9c8     B8 15 06 F6 | 	mov	arg02, ##@LR__5783
0e9cc     00 12 06 F6 | 	mov	arg01, #0
0e9d0     00 16 06 F6 | 	mov	arg03, #0
0e9d4     F4 71 B1 FD | 	call	#__system___basic_print_string
0e9d8     00 12 06 F6 | 	mov	arg01, #0
0e9dc     18 15 02 F6 | 	mov	arg02, local06
0e9e0     00 16 06 F6 | 	mov	arg03, #0
0e9e4     0A 18 06 F6 | 	mov	arg04, #10
0e9e8     24 72 B1 FD | 	call	#__system___basic_print_integer
0e9ec     A8 01 00 FF 
0e9f0     C6 15 06 F6 | 	mov	arg02, ##@LR__5784
0e9f4     00 12 06 F6 | 	mov	arg01, #0
0e9f8     00 16 06 F6 | 	mov	arg03, #0
0e9fc     CC 71 B1 FD | 	call	#__system___basic_print_string
0ea00     45 00 00 FF 
0ea04     50 E5 05 F1 | 	add	objptr, ##35664
0ea08     F2 14 02 FB | 	rdlong	arg02, objptr
0ea0c     45 00 00 FF 
0ea10     50 E5 85 F1 | 	sub	objptr, ##35664
0ea14     00 12 06 F6 | 	mov	arg01, #0
0ea18     00 16 06 F6 | 	mov	arg03, #0
0ea1c     AC 71 B1 FD | 	call	#__system___basic_print_string
0ea20     00 12 06 F6 | 	mov	arg01, #0
0ea24     0A 14 06 F6 | 	mov	arg02, #10
0ea28     00 16 06 F6 | 	mov	arg03, #0
0ea2c     44 71 B1 FD | 	call	#__system___basic_print_char
0ea30     00 12 06 F6 | 	mov	arg01, #0
0ea34     40 C1 B1 FD | 	call	#__system___getiolock_0593
0ea38     FD 00 68 FC | 	wrlong	#0, result1
0ea3c     4A 00 00 FF 
0ea40     94 E4 05 F1 | 	add	objptr, ##38036
0ea44     F2 12 02 FB | 	rdlong	arg01, objptr
0ea48     4A 00 00 FF 
0ea4c     94 E4 85 F1 | 	sub	objptr, ##38036
0ea50     0C 6B B1 FD | 	call	#__system___chdir
0ea54     14 00 90 FD | 	jmp	#LR__1258
0ea58                 | LR__1257
0ea58     4A 00 00 FF 
0ea5c     94 E4 05 F1 | 	add	objptr, ##38036
0ea60     F2 2C 62 FC | 	wrlong	local04, objptr
0ea64     4A 00 00 FF 
0ea68     94 E4 85 F1 | 	sub	objptr, ##38036
0ea6c                 | LR__1258
0ea6c                 | '   print "Current directory: ";currentdir$
0ea6c     00 12 06 F6 | 	mov	arg01, #0
0ea70     04 C1 B1 FD | 	call	#__system___getiolock_0593
0ea74     FD 12 02 F6 | 	mov	arg01, result1
0ea78     58 64 B1 FD | 	call	#__system___lockmem
0ea7c     A8 01 00 FF 
0ea80     C9 15 06 F6 | 	mov	arg02, ##@LR__5785
0ea84     00 12 06 F6 | 	mov	arg01, #0
0ea88     00 16 06 F6 | 	mov	arg03, #0
0ea8c     3C 71 B1 FD | 	call	#__system___basic_print_string
0ea90     4A 00 00 FF 
0ea94     94 E4 05 F1 | 	add	objptr, ##38036
0ea98     F2 14 02 FB | 	rdlong	arg02, objptr
0ea9c     4A 00 00 FF 
0eaa0     94 E4 85 F1 | 	sub	objptr, ##38036
0eaa4     00 12 06 F6 | 	mov	arg01, #0
0eaa8     00 16 06 F6 | 	mov	arg03, #0
0eaac     1C 71 B1 FD | 	call	#__system___basic_print_string
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     0A 14 06 F6 | 	mov	arg02, #10
0eab8     00 16 06 F6 | 	mov	arg03, #0
0eabc     B4 70 B1 FD | 	call	#__system___basic_print_char
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     B0 C0 B1 FD | 	call	#__system___getiolock_0593
0eac8     FD 00 68 FC | 	wrlong	#0, result1
0eacc                 | LR__1259
0eacc     A7 F0 03 F6 | 	mov	ptra, fp
0ead0     B2 00 A0 FD | 	call	#popregs_
0ead4                 | _do_cd_ret
0ead4     2D 00 64 FD | 	ret
0ead8                 | 
0ead8                 | ' 
0ead8                 | ' '-------------------- changefreq
0ead8                 | ' 
0ead8                 | ' sub do_changefreq
0ead8                 | _do_changefreq
0ead8     04 4A 05 F6 | 	mov	COUNT_, #4
0eadc     A8 00 A0 FD | 	call	#pushregs_
0eae0     28 F0 07 F1 | 	add	ptra, #40
0eae4     A4 E0 BF FD | 	call	#_pop
0eae8     FF 14 02 F6 | 	mov	arg02, result3
0eaec     A7 FA 61 FC | 	wrlong	result1, fp
0eaf0     04 4E 05 F1 | 	add	fp, #4
0eaf4     A7 FC 61 FC | 	wrlong	result2, fp
0eaf8     04 4E 05 F1 | 	add	fp, #4
0eafc     A7 14 62 FC | 	wrlong	arg02, fp
0eb00     08 4E 85 F1 | 	sub	fp, #8
0eb04     A7 12 02 F6 | 	mov	arg01, fp
0eb08     20 E3 BF FD | 	call	#_converttofloat
0eb0c     24 4E 05 F1 | 	add	fp, #36
0eb10     A7 FA 61 FC | 	wrlong	result1, fp
0eb14     24 4E 85 F1 | 	sub	fp, #36
0eb18     FD 14 02 F6 | 	mov	arg02, result1
0eb1c     FC 16 20 FF 
0eb20     54 12 06 F6 | 	mov	arg01, ##1076754516
0eb24     F8 A1 B1 FD | 	call	#__system____builtin_logbase
0eb28     FD 26 02 F6 | 	mov	local01, result1
0eb2c     1E 14 C6 F9 | 	decod	arg02, #30
0eb30     FC 16 20 FF 
0eb34     54 12 06 F6 | 	mov	arg01, ##1076754516
0eb38     E4 A1 B1 FD | 	call	#__system____builtin_logbase
0eb3c     FD 14 02 F6 | 	mov	arg02, result1
0eb40     13 13 02 F6 | 	mov	arg01, local01
0eb44     0C 94 B1 FD | 	call	#__system___float_div
0eb48     FD 12 02 F6 | 	mov	arg01, result1
0eb4c     00 14 06 F6 | 	mov	arg02, #0
0eb50     C4 96 B1 FD | 	call	#__system___float_tointeger
0eb54     10 4E 05 F1 | 	add	fp, #16
0eb58     A7 FA 61 FC | 	wrlong	result1, fp
0eb5c     1E 26 C6 F9 | 	decod	local01, #30
0eb60     FD 12 02 F6 | 	mov	arg01, result1
0eb64     10 4E 85 F1 | 	sub	fp, #16
0eb68     05 12 06 F1 | 	add	arg01, #5
0eb6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb70     1F 28 C6 C9 |  if_b	decod	local02, #31
0eb74     00 28 06 36 |  if_ae	mov	local02, #0
0eb78     D0 8D B1 FD | 	call	#__system___float_fromuns
0eb7c     14 FB 61 F5 | 	xor	result1, local02
0eb80     FD 14 02 F6 | 	mov	arg02, result1
0eb84     13 13 02 F6 | 	mov	arg01, local01
0eb88     CC A0 B1 FD | 	call	#__system____builtin_powf
0eb8c     FD 12 02 F6 | 	mov	arg01, result1
0eb90     01 14 06 F6 | 	mov	arg02, #1
0eb94     80 96 B1 FD | 	call	#__system___float_tointeger
0eb98     14 4E 05 F1 | 	add	fp, #20
0eb9c     A7 FA 61 FC | 	wrlong	result1, fp
0eba0                 | ' skip=round(2^(lfreq+5))
0eba0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0eba0     14 4E 85 F1 | 	sub	fp, #20
0eba4     40 00 00 FF 
0eba8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ebac     30 00 90 CD |  if_b	jmp	#LR__1260
0ebb0     14 4E 05 F1 | 	add	fp, #20
0ebb4     A7 26 02 FB | 	rdlong	local01, fp
0ebb8     13 27 52 F6 | 	abs	local01, local01 wc
0ebbc     0F 26 46 F0 | 	shr	local01, #15
0ebc0     13 27 82 F6 | 	negc	local01, local01
0ebc4     04 4E 05 F1 | 	add	fp, #4
0ebc8     A7 26 62 FC | 	wrlong	local01, fp
0ebcc     04 4E 85 F1 | 	sub	fp, #4
0ebd0     40 00 80 FF 
0ebd4     A7 00 68 FC | 	wrlong	##32768, fp
0ebd8     14 4E 85 F1 | 	sub	fp, #20
0ebdc     0C 00 90 FD | 	jmp	#LR__1261
0ebe0                 | LR__1260
0ebe0     18 4E 05 F1 | 	add	fp, #24
0ebe4     A7 02 68 FC | 	wrlong	#1, fp
0ebe8     18 4E 85 F1 | 	sub	fp, #24
0ebec                 | LR__1261
0ebec     24 4E 05 F1 | 	add	fp, #36
0ebf0     A7 14 02 FB | 	rdlong	arg02, fp
0ebf4     24 4E 85 F1 | 	sub	fp, #36
0ebf8     3E 2C 25 FF 
0ebfc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ec00     50 93 B1 FD | 	call	#__system___float_div
0ec04     FD 26 02 F6 | 	mov	local01, result1
0ec08     18 4E 05 F1 | 	add	fp, #24
0ec0c     A7 12 02 FB | 	rdlong	arg01, fp
0ec10     18 4E 85 F1 | 	sub	fp, #24
0ec14     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec18     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec1c     00 28 06 36 |  if_ae	mov	local02, #0
0ec20     28 8D B1 FD | 	call	#__system___float_fromuns
0ec24     14 FB 61 F5 | 	xor	result1, local02
0ec28     FD 2A 02 F6 | 	mov	local03, result1
0ec2c     1E 2C C6 F9 | 	decod	local04, #30
0ec30     0D 12 06 F6 | 	mov	arg01, #13
0ec34     10 4E 05 F1 | 	add	fp, #16
0ec38     A7 14 02 FB | 	rdlong	arg02, fp
0ec3c     10 4E 85 F1 | 	sub	fp, #16
0ec40     0A 13 82 F1 | 	sub	arg01, arg02
0ec44     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec48     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec4c     00 28 06 36 |  if_ae	mov	local02, #0
0ec50     F8 8C B1 FD | 	call	#__system___float_fromuns
0ec54     14 FB 61 F5 | 	xor	result1, local02
0ec58     FD 14 02 F6 | 	mov	arg02, result1
0ec5c     16 13 02 F6 | 	mov	arg01, local04
0ec60     F4 9F B1 FD | 	call	#__system____builtin_powf
0ec64     FD 14 02 F6 | 	mov	arg02, result1
0ec68     15 13 02 F6 | 	mov	arg01, local03
0ec6c     E0 90 B1 FD | 	call	#__system___float_mul
0ec70     FD 14 02 F6 | 	mov	arg02, result1
0ec74     13 13 02 F6 | 	mov	arg01, local01
0ec78     D8 92 B1 FD | 	call	#__system___float_div
0ec7c     FD 12 02 F6 | 	mov	arg01, result1
0ec80     01 14 06 F6 | 	mov	arg02, #1
0ec84     90 95 B1 FD | 	call	#__system___float_tointeger
0ec88     FD 26 02 F6 | 	mov	local01, result1
0ec8c     1C 4E 05 F1 | 	add	fp, #28
0ec90     A7 26 62 FC | 	wrlong	local01, fp
0ec94     1C 4E 85 F1 | 	sub	fp, #28
0ec98     F0 DE BF FD | 	call	#_pop
0ec9c     FF 2C 02 F6 | 	mov	local04, result3
0eca0     A7 FA 61 FC | 	wrlong	result1, fp
0eca4     04 4E 05 F1 | 	add	fp, #4
0eca8     A7 FC 61 FC | 	wrlong	result2, fp
0ecac     04 4E 05 F1 | 	add	fp, #4
0ecb0     A7 2C 62 FC | 	wrlong	local04, fp
0ecb4     08 4E 85 F1 | 	sub	fp, #8
0ecb8     A7 12 02 F6 | 	mov	arg01, fp
0ecbc     B0 E0 BF FD | 	call	#_converttoint
0ecc0     FD 2A 52 F6 | 	abs	local03, result1 wc
0ecc4     07 2A 06 F5 | 	and	local03, #7
0ecc8     15 2B 82 F6 | 	negc	local03, local03
0eccc     0C 4E 05 F1 | 	add	fp, #12
0ecd0     A7 2A 62 FC | 	wrlong	local03, fp
0ecd4     08 4E 05 F1 | 	add	fp, #8
0ecd8     A7 26 02 FB | 	rdlong	local01, fp
0ecdc     10 26 66 F0 | 	shl	local01, #16
0ece0     08 4E 05 F1 | 	add	fp, #8
0ece4     A7 2C 02 FB | 	rdlong	local04, fp
0ece8     16 27 02 F1 | 	add	local01, local04
0ecec     04 4E 05 F1 | 	add	fp, #4
0ecf0     A7 26 62 FC | 	wrlong	local01, fp
0ecf4                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ecf4     37 00 00 FF 
0ecf8     10 E4 05 F1 | 	add	objptr, ##28176
0ecfc     F2 12 02 FB | 	rdlong	arg01, objptr
0ed00     37 00 00 FF 
0ed04     10 E4 85 F1 | 	sub	objptr, ##28176
0ed08     14 4E 85 F1 | 	sub	fp, #20
0ed0c     A7 2C 02 FB | 	rdlong	local04, fp
0ed10     0C 4E 85 F1 | 	sub	fp, #12
0ed14     06 2C 66 F0 | 	shl	local04, #6
0ed18     16 13 02 F1 | 	add	arg01, local04
0ed1c     08 12 06 F1 | 	add	arg01, #8
0ed20     09 FB 01 FB | 	rdlong	result1, arg01
0ed24     1B FA 2D F4 | 	testbn	result1, #27 wz
0ed28     3C 00 90 5D |  if_ne	jmp	#LR__1262
0ed2c     37 00 00 FF 
0ed30     10 E4 05 F1 | 	add	objptr, ##28176
0ed34     F2 12 02 FB | 	rdlong	arg01, objptr
0ed38     37 00 00 FF 
0ed3c     10 E4 85 F1 | 	sub	objptr, ##28176
0ed40     0C 4E 05 F1 | 	add	fp, #12
0ed44     A7 2C 02 FB | 	rdlong	local04, fp
0ed48     06 2C 66 F0 | 	shl	local04, #6
0ed4c     16 13 02 F1 | 	add	arg01, local04
0ed50     18 12 06 F1 | 	add	arg01, #24
0ed54     14 4E 05 F1 | 	add	fp, #20
0ed58     A7 14 02 FB | 	rdlong	arg02, fp
0ed5c     20 4E 85 F1 | 	sub	fp, #32
0ed60     09 15 62 FC | 	wrlong	arg02, arg01
0ed64     80 00 90 FD | 	jmp	#LR__1263
0ed68                 | LR__1262
0ed68     37 00 00 FF 
0ed6c     10 E4 05 F1 | 	add	objptr, ##28176
0ed70     F2 26 02 FB | 	rdlong	local01, objptr
0ed74     37 00 00 FF 
0ed78     10 E4 85 F1 | 	sub	objptr, ##28176
0ed7c     0C 4E 05 F1 | 	add	fp, #12
0ed80     A7 2C 02 FB | 	rdlong	local04, fp
0ed84     06 2C 66 F0 | 	shl	local04, #6
0ed88     16 27 02 F1 | 	add	local01, local04
0ed8c     18 26 06 F1 | 	add	local01, #24
0ed90     18 4E 05 F1 | 	add	fp, #24
0ed94     A7 14 02 FB | 	rdlong	arg02, fp
0ed98     24 4E 85 F1 | 	sub	fp, #36
0ed9c     3E 2C 25 FF 
0eda0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eda4     AC 91 B1 FD | 	call	#__system___float_div
0eda8     FD 12 02 F6 | 	mov	arg01, result1
0edac     01 14 06 F6 | 	mov	arg02, #1
0edb0     64 94 B1 FD | 	call	#__system___float_tointeger
0edb4     13 FB 51 FC | 	wrword	result1, local01
0edb8     37 00 00 FF 
0edbc     10 E4 05 F1 | 	add	objptr, ##28176
0edc0     F2 12 02 FB | 	rdlong	arg01, objptr
0edc4     37 00 00 FF 
0edc8     10 E4 85 F1 | 	sub	objptr, ##28176
0edcc     0C 4E 05 F1 | 	add	fp, #12
0edd0     A7 2C 02 FB | 	rdlong	local04, fp
0edd4     0C 4E 85 F1 | 	sub	fp, #12
0edd8     06 2C 66 F0 | 	shl	local04, #6
0eddc     16 13 02 F1 | 	add	arg01, local04
0ede0     1A 12 06 F1 | 	add	arg01, #26
0ede4     09 01 5A FC | 	wrword	#256, arg01
0ede8                 | LR__1263
0ede8     A7 F0 03 F6 | 	mov	ptra, fp
0edec     B2 00 A0 FD | 	call	#popregs_
0edf0                 | _do_changefreq_ret
0edf0     2D 00 64 FD | 	ret
0edf4                 | 
0edf4                 | ' 
0edf4                 | ' '-------------------- changepan
0edf4                 | ' 
0edf4                 | ' sub do_changepan
0edf4                 | _do_changepan
0edf4     01 4A 05 F6 | 	mov	COUNT_, #1
0edf8     A8 00 A0 FD | 	call	#pushregs_
0edfc     14 F0 07 F1 | 	add	ptra, #20
0ee00     88 DD BF FD | 	call	#_pop
0ee04     A7 FA 61 FC | 	wrlong	result1, fp
0ee08     04 4E 05 F1 | 	add	fp, #4
0ee0c     A7 FC 61 FC | 	wrlong	result2, fp
0ee10     04 4E 05 F1 | 	add	fp, #4
0ee14     A7 FE 61 FC | 	wrlong	result3, fp
0ee18     08 4E 85 F1 | 	sub	fp, #8
0ee1c     00 00 23 FF 
0ee20     00 26 06 F6 | 	mov	local01, ##1174405120
0ee24     A7 12 02 F6 | 	mov	arg01, fp
0ee28     00 E0 BF FD | 	call	#_converttofloat
0ee2c     FD 14 02 F6 | 	mov	arg02, result1
0ee30     13 13 02 F6 | 	mov	arg01, local01
0ee34     18 8F B1 FD | 	call	#__system___float_mul
0ee38     FD 12 02 F6 | 	mov	arg01, result1
0ee3c     01 14 06 F6 | 	mov	arg02, #1
0ee40     D4 93 B1 FD | 	call	#__system___float_tointeger
0ee44     0D 26 C6 F9 | 	decod	local01, #13
0ee48     FD 26 02 F1 | 	add	local01, result1
0ee4c     10 4E 05 F1 | 	add	fp, #16
0ee50     A7 26 62 FC | 	wrlong	local01, fp
0ee54                 | ' 
0ee54                 | ' t1=pop()
0ee54                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ee54                 | ' if pan<0 then pan=0
0ee54     10 4E 85 F1 | 	sub	fp, #16
0ee58     00 26 56 F2 | 	cmps	local01, #0 wc
0ee5c     10 4E 05 C1 |  if_b	add	fp, #16
0ee60     A7 00 68 CC |  if_b	wrlong	#0, fp
0ee64     10 4E 85 C1 |  if_b	sub	fp, #16
0ee68                 | ' if pan>16384 then pan=16384
0ee68     10 4E 05 F1 | 	add	fp, #16
0ee6c     A7 26 02 FB | 	rdlong	local01, fp
0ee70     10 4E 85 F1 | 	sub	fp, #16
0ee74     20 00 00 FF 
0ee78     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ee7c     10 4E 05 31 |  if_ae	add	fp, #16
0ee80     20 00 80 3F 
0ee84     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ee88     10 4E 85 31 |  if_ae	sub	fp, #16
0ee8c     FC DC BF FD | 	call	#_pop
0ee90     FF 26 02 F6 | 	mov	local01, result3
0ee94     A7 FA 61 FC | 	wrlong	result1, fp
0ee98     04 4E 05 F1 | 	add	fp, #4
0ee9c     A7 FC 61 FC | 	wrlong	result2, fp
0eea0     04 4E 05 F1 | 	add	fp, #4
0eea4     A7 26 62 FC | 	wrlong	local01, fp
0eea8     08 4E 85 F1 | 	sub	fp, #8
0eeac     A7 12 02 F6 | 	mov	arg01, fp
0eeb0     BC DE BF FD | 	call	#_converttoint
0eeb4     FD 26 52 F6 | 	abs	local01, result1 wc
0eeb8     07 26 06 F5 | 	and	local01, #7
0eebc     13 27 82 F6 | 	negc	local01, local01
0eec0     0C 4E 05 F1 | 	add	fp, #12
0eec4     A7 26 62 FC | 	wrlong	local01, fp
0eec8     37 00 00 FF 
0eecc     10 E4 05 F1 | 	add	objptr, ##28176
0eed0     F2 12 02 FB | 	rdlong	arg01, objptr
0eed4     37 00 00 FF 
0eed8     10 E4 85 F1 | 	sub	objptr, ##28176
0eedc     06 26 66 F0 | 	shl	local01, #6
0eee0     13 13 02 F1 | 	add	arg01, local01
0eee4     16 12 06 F1 | 	add	arg01, #22
0eee8     04 4E 05 F1 | 	add	fp, #4
0eeec     A7 14 02 FB | 	rdlong	arg02, fp
0eef0     10 4E 85 F1 | 	sub	fp, #16
0eef4     09 15 52 FC | 	wrword	arg02, arg01
0eef8     A7 F0 03 F6 | 	mov	ptra, fp
0eefc     B2 00 A0 FD | 	call	#popregs_
0ef00                 | _do_changepan_ret
0ef00     2D 00 64 FD | 	ret
0ef04                 | 
0ef04                 | ' 
0ef04                 | ' '-------------------- changevol
0ef04                 | ' 
0ef04                 | ' sub do_changevol
0ef04                 | _do_changevol
0ef04     00 4A 05 F6 | 	mov	COUNT_, #0
0ef08     A8 00 A0 FD | 	call	#pushregs_
0ef0c     14 F0 07 F1 | 	add	ptra, #20
0ef10     78 DC BF FD | 	call	#_pop
0ef14     FF 14 02 F6 | 	mov	arg02, result3
0ef18     A7 FA 61 FC | 	wrlong	result1, fp
0ef1c     04 4E 05 F1 | 	add	fp, #4
0ef20     A7 FC 61 FC | 	wrlong	result2, fp
0ef24     04 4E 05 F1 | 	add	fp, #4
0ef28     A7 14 62 FC | 	wrlong	arg02, fp
0ef2c     08 4E 85 F1 | 	sub	fp, #8
0ef30     A7 12 02 F6 | 	mov	arg01, fp
0ef34     F4 DE BF FD | 	call	#_converttofloat
0ef38     FD 12 02 F6 | 	mov	arg01, result1
0ef3c     00 3D 22 FF 
0ef40     00 14 06 F6 | 	mov	arg02, ##1148846080
0ef44     08 8E B1 FD | 	call	#__system___float_mul
0ef48     FD 12 02 F6 | 	mov	arg01, result1
0ef4c     01 14 06 F6 | 	mov	arg02, #1
0ef50     C4 92 B1 FD | 	call	#__system___float_tointeger
0ef54     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef58     0D 14 46 F7 | 	zerox	arg02, #13
0ef5c     0A 15 82 F6 | 	negc	arg02, arg02
0ef60     10 4E 05 F1 | 	add	fp, #16
0ef64     A7 14 62 FC | 	wrlong	arg02, fp
0ef68     10 4E 85 F1 | 	sub	fp, #16
0ef6c     1C DC BF FD | 	call	#_pop
0ef70     FF 14 02 F6 | 	mov	arg02, result3
0ef74     A7 FA 61 FC | 	wrlong	result1, fp
0ef78     04 4E 05 F1 | 	add	fp, #4
0ef7c     A7 FC 61 FC | 	wrlong	result2, fp
0ef80     04 4E 05 F1 | 	add	fp, #4
0ef84     A7 14 62 FC | 	wrlong	arg02, fp
0ef88     08 4E 85 F1 | 	sub	fp, #8
0ef8c     A7 12 02 F6 | 	mov	arg01, fp
0ef90     DC DD BF FD | 	call	#_converttoint
0ef94     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef98     07 14 06 F5 | 	and	arg02, #7
0ef9c     0A 15 82 F6 | 	negc	arg02, arg02
0efa0     0C 4E 05 F1 | 	add	fp, #12
0efa4     A7 14 62 FC | 	wrlong	arg02, fp
0efa8     37 00 00 FF 
0efac     10 E4 05 F1 | 	add	objptr, ##28176
0efb0     F2 12 02 FB | 	rdlong	arg01, objptr
0efb4     37 00 00 FF 
0efb8     10 E4 85 F1 | 	sub	objptr, ##28176
0efbc     06 14 66 F0 | 	shl	arg02, #6
0efc0     0A 13 02 F1 | 	add	arg01, arg02
0efc4     14 12 06 F1 | 	add	arg01, #20
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 14 02 FB | 	rdlong	arg02, fp
0efd0     10 4E 85 F1 | 	sub	fp, #16
0efd4     09 15 52 FC | 	wrword	arg02, arg01
0efd8     A7 F0 03 F6 | 	mov	ptra, fp
0efdc     B2 00 A0 FD | 	call	#popregs_
0efe0                 | _do_changevol_ret
0efe0     2D 00 64 FD | 	ret
0efe4                 | 
0efe4                 | ' 
0efe4                 | ' '-------------------- changewav
0efe4                 | ' 
0efe4                 | ' sub do_changewav
0efe4                 | _do_changewav
0efe4     00 4A 05 F6 | 	mov	COUNT_, #0
0efe8     A8 00 A0 FD | 	call	#pushregs_
0efec     14 F0 07 F1 | 	add	ptra, #20
0eff0     98 DB BF FD | 	call	#_pop
0eff4     FF 14 02 F6 | 	mov	arg02, result3
0eff8     A7 FA 61 FC | 	wrlong	result1, fp
0effc     04 4E 05 F1 | 	add	fp, #4
0f000     A7 FC 61 FC | 	wrlong	result2, fp
0f004     04 4E 05 F1 | 	add	fp, #4
0f008     A7 14 62 FC | 	wrlong	arg02, fp
0f00c     08 4E 85 F1 | 	sub	fp, #8
0f010     A7 12 02 F6 | 	mov	arg01, fp
0f014     58 DD BF FD | 	call	#_converttoint
0f018     10 4E 05 F1 | 	add	fp, #16
0f01c     A7 FA 61 FC | 	wrlong	result1, fp
0f020                 | ' 
0f020                 | ' t1=pop()
0f020                 | ' wave=converttoint(t1)
0f020                 | ' if wave<0 then wave=0
0f020     FD 14 02 F6 | 	mov	arg02, result1
0f024     10 4E 85 F1 | 	sub	fp, #16
0f028     00 14 56 F2 | 	cmps	arg02, #0 wc
0f02c     10 4E 05 C1 |  if_b	add	fp, #16
0f030     A7 00 68 CC |  if_b	wrlong	#0, fp
0f034     10 4E 85 C1 |  if_b	sub	fp, #16
0f038     50 DB BF FD | 	call	#_pop
0f03c     FF 14 02 F6 | 	mov	arg02, result3
0f040     A7 FA 61 FC | 	wrlong	result1, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 FC 61 FC | 	wrlong	result2, fp
0f04c     04 4E 05 F1 | 	add	fp, #4
0f050     A7 14 62 FC | 	wrlong	arg02, fp
0f054     08 4E 85 F1 | 	sub	fp, #8
0f058     A7 12 02 F6 | 	mov	arg01, fp
0f05c     10 DD BF FD | 	call	#_converttoint
0f060     FD 14 52 F6 | 	abs	arg02, result1 wc
0f064     07 14 06 F5 | 	and	arg02, #7
0f068     0A 15 82 F6 | 	negc	arg02, arg02
0f06c     0C 4E 05 F1 | 	add	fp, #12
0f070     A7 14 62 FC | 	wrlong	arg02, fp
0f074                 | ' if wave <32 then 
0f074     04 4E 05 F1 | 	add	fp, #4
0f078     A7 14 02 FB | 	rdlong	arg02, fp
0f07c     10 4E 85 F1 | 	sub	fp, #16
0f080     20 14 56 F2 | 	cmps	arg02, #32 wc
0f084     48 00 90 3D |  if_ae	jmp	#LR__1270
0f088     37 00 00 FF 
0f08c     10 E4 05 F1 | 	add	objptr, ##28176
0f090     F2 12 02 FB | 	rdlong	arg01, objptr
0f094     37 00 00 FF 
0f098     10 E4 85 F1 | 	sub	objptr, ##28176
0f09c     0C 4E 05 F1 | 	add	fp, #12
0f0a0     A7 14 02 FB | 	rdlong	arg02, fp
0f0a4     06 14 66 F0 | 	shl	arg02, #6
0f0a8     0A 13 02 F1 | 	add	arg01, arg02
0f0ac     08 12 06 F1 | 	add	arg01, #8
0f0b0     04 4E 05 F1 | 	add	fp, #4
0f0b4     A7 14 02 FB | 	rdlong	arg02, fp
0f0b8     10 4E 85 F1 | 	sub	fp, #16
0f0bc     0B 14 66 F0 | 	shl	arg02, #11
0f0c0     00 00 40 FF 
0f0c4     00 14 06 F1 | 	add	arg02, ##-2147483648
0f0c8     09 15 62 FC | 	wrlong	arg02, arg01
0f0cc     34 00 90 FD | 	jmp	#LR__1271
0f0d0                 | LR__1270
0f0d0     37 00 00 FF 
0f0d4     10 E4 05 F1 | 	add	objptr, ##28176
0f0d8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0dc     37 00 00 FF 
0f0e0     10 E4 85 F1 | 	sub	objptr, ##28176
0f0e4     0C 4E 05 F1 | 	add	fp, #12
0f0e8     A7 14 02 FB | 	rdlong	arg02, fp
0f0ec     0C 4E 85 F1 | 	sub	fp, #12
0f0f0     06 14 66 F0 | 	shl	arg02, #6
0f0f4     0A 13 02 F1 | 	add	arg01, arg02
0f0f8     08 12 06 F1 | 	add	arg01, #8
0f0fc     00 00 C4 FF 
0f100     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f104                 | LR__1271
0f104     A7 F0 03 F6 | 	mov	ptra, fp
0f108     B2 00 A0 FD | 	call	#popregs_
0f10c                 | _do_changewav_ret
0f10c     2D 00 64 FD | 	ret
0f110                 | 
0f110                 | ' 
0f110                 | ' '-------------------- chr$
0f110                 | ' 
0f110                 | ' sub do_chr
0f110                 | _do_chr
0f110     01 4A 05 F6 | 	mov	COUNT_, #1
0f114     A8 00 A0 FD | 	call	#pushregs_
0f118     14 F0 07 F1 | 	add	ptra, #20
0f11c     4A 00 00 FF 
0f120     80 E4 05 F1 | 	add	objptr, ##38016
0f124     F2 26 02 FB | 	rdlong	local01, objptr
0f128     13 17 02 F6 | 	mov	arg03, local01
0f12c     01 16 66 F0 | 	shl	arg03, #1
0f130     13 17 02 F1 | 	add	arg03, local01
0f134     02 16 66 F0 | 	shl	arg03, #2
0f138     03 00 00 FF 
0f13c     04 E4 85 F1 | 	sub	objptr, ##1540
0f140     F2 16 02 F1 | 	add	arg03, objptr
0f144     0B 17 02 FB | 	rdlong	arg03, arg03
0f148     0C 4E 05 F1 | 	add	fp, #12
0f14c     A7 16 62 FC | 	wrlong	arg03, fp
0f150                 | ' 
0f150                 | ' numpar=compiledline(lineptr_e).result.uresult
0f150                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f150     0C 4E 85 F1 | 	sub	fp, #12
0f154     02 16 16 F2 | 	cmp	arg03, #2 wc
0f158     47 00 00 FF 
0f15c     7C E4 85 F1 | 	sub	objptr, ##36476
0f160     0C 4E 05 C1 |  if_b	add	fp, #12
0f164     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f168     0C 4E 85 C1 |  if_b	sub	fp, #12
0f16c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f170     00 12 06 F6 | 	mov	arg01, #0
0f174     00 BA B1 FD | 	call	#__system___getiolock_0593
0f178     FD 12 02 F6 | 	mov	arg01, result1
0f17c     54 5D B1 FD | 	call	#__system___lockmem
0f180     A8 01 00 FF 
0f184     DD 15 06 F6 | 	mov	arg02, ##@LR__5786
0f188     00 12 06 F6 | 	mov	arg01, #0
0f18c     00 16 06 F6 | 	mov	arg03, #0
0f190     38 6A B1 FD | 	call	#__system___basic_print_string
0f194     00 12 06 F6 | 	mov	arg01, #0
0f198     DC B9 B1 FD | 	call	#__system___getiolock_0593
0f19c     FD 00 68 FC | 	wrlong	#0, result1
0f1a0     27 12 06 F6 | 	mov	arg01, #39
0f1a4     00 14 06 F6 | 	mov	arg02, #0
0f1a8     80 23 B1 FD | 	call	#_printerror
0f1ac     54 00 90 FD | 	jmp	#LR__1281
0f1b0                 | LR__1280
0f1b0     D8 D9 BF FD | 	call	#_pop
0f1b4     FF 26 02 F6 | 	mov	local01, result3
0f1b8     A7 FA 61 FC | 	wrlong	result1, fp
0f1bc     04 4E 05 F1 | 	add	fp, #4
0f1c0     A7 FC 61 FC | 	wrlong	result2, fp
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 26 62 FC | 	wrlong	local01, fp
0f1cc     08 4E 85 F1 | 	sub	fp, #8
0f1d0     A7 12 02 F6 | 	mov	arg01, fp
0f1d4     98 DB BF FD | 	call	#_converttoint
0f1d8     10 4E 05 F1 | 	add	fp, #16
0f1dc     A7 FA 61 FC | 	wrlong	result1, fp
0f1e0     FD 12 02 F6 | 	mov	arg01, result1
0f1e4     10 4E 85 F1 | 	sub	fp, #16
0f1e8     2C 7F B1 FD | 	call	#__system__Chr_S
0f1ec     A7 FA 61 FC | 	wrlong	result1, fp
0f1f0     08 4E 05 F1 | 	add	fp, #8
0f1f4     A7 3E 68 FC | 	wrlong	#31, fp
0f1f8     08 4E 85 F1 | 	sub	fp, #8
0f1fc     A7 12 02 F6 | 	mov	arg01, fp
0f200     20 DA BF FD | 	call	#_push
0f204                 | LR__1281
0f204     A7 F0 03 F6 | 	mov	ptra, fp
0f208     B2 00 A0 FD | 	call	#popregs_
0f20c                 | _do_chr_ret
0f20c     2D 00 64 FD | 	ret
0f210                 | 
0f210                 | ' 
0f210                 | ' '-------------------- circle
0f210                 | ' 
0f210                 | ' sub do_circle
0f210                 | _do_circle
0f210     02 4A 05 F6 | 	mov	COUNT_, #2
0f214     A8 00 A0 FD | 	call	#pushregs_
0f218     24 F0 07 F1 | 	add	ptra, #36
0f21c     6C D9 BF FD | 	call	#_pop
0f220     FD 18 02 F6 | 	mov	arg04, result1
0f224     FE 16 02 F6 | 	mov	arg03, result2
0f228     FF 14 02 F6 | 	mov	arg02, result3
0f22c     18 4E 05 F1 | 	add	fp, #24
0f230     A7 18 62 FC | 	wrlong	arg04, fp
0f234     04 4E 05 F1 | 	add	fp, #4
0f238     A7 16 62 FC | 	wrlong	arg03, fp
0f23c     04 4E 05 F1 | 	add	fp, #4
0f240     A7 14 62 FC | 	wrlong	arg02, fp
0f244     20 4E 85 F1 | 	sub	fp, #32
0f248     40 D9 BF FD | 	call	#_pop
0f24c     FD 18 02 F6 | 	mov	arg04, result1
0f250     FE 16 02 F6 | 	mov	arg03, result2
0f254     FF 26 02 F6 | 	mov	local01, result3
0f258     0C 4E 05 F1 | 	add	fp, #12
0f25c     A7 18 62 FC | 	wrlong	arg04, fp
0f260     04 4E 05 F1 | 	add	fp, #4
0f264     A7 16 62 FC | 	wrlong	arg03, fp
0f268     04 4E 05 F1 | 	add	fp, #4
0f26c     A7 26 62 FC | 	wrlong	local01, fp
0f270     14 4E 85 F1 | 	sub	fp, #20
0f274     14 D9 BF FD | 	call	#_pop
0f278     A7 FA 61 FC | 	wrlong	result1, fp
0f27c     04 4E 05 F1 | 	add	fp, #4
0f280     A7 FC 61 FC | 	wrlong	result2, fp
0f284     04 4E 05 F1 | 	add	fp, #4
0f288     A7 FE 61 FC | 	wrlong	result3, fp
0f28c                 | ' 
0f28c                 | ' t3=pop()
0f28c                 | ' t2=pop()
0f28c                 | ' t1=pop()
0f28c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f28c     FF 18 02 F6 | 	mov	arg04, result3
0f290     08 4E 85 F1 | 	sub	fp, #8
0f294     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f298     08 4E 05 51 |  if_ne	add	fp, #8
0f29c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f2a0     08 4E 85 51 |  if_ne	sub	fp, #8
0f2a4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f2a8     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f2ac     14 4E 05 F1 | 	add	fp, #20
0f2b0     A7 26 02 FB | 	rdlong	local01, fp
0f2b4     14 4E 85 F1 | 	sub	fp, #20
0f2b8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f2bc     14 4E 05 51 |  if_ne	add	fp, #20
0f2c0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2c4     14 4E 85 51 |  if_ne	sub	fp, #20
0f2c8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2cc     58 00 90 5D |  if_ne	jmp	#LR__1290
0f2d0     20 4E 05 F1 | 	add	fp, #32
0f2d4     A7 26 02 FB | 	rdlong	local01, fp
0f2d8     20 4E 85 F1 | 	sub	fp, #32
0f2dc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f2e0     20 4E 05 51 |  if_ne	add	fp, #32
0f2e4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2e8     20 4E 85 51 |  if_ne	sub	fp, #32
0f2ec     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2f0     34 00 90 5D |  if_ne	jmp	#LR__1290
0f2f4     A7 12 02 FB | 	rdlong	arg01, fp
0f2f8     0C 4E 05 F1 | 	add	fp, #12
0f2fc     A7 14 02 FB | 	rdlong	arg02, fp
0f300     0C 4E 05 F1 | 	add	fp, #12
0f304     A7 16 02 FB | 	rdlong	arg03, fp
0f308     18 4E 85 F1 | 	sub	fp, #24
0f30c     37 00 00 FF 
0f310     28 E4 05 F1 | 	add	objptr, ##28200
0f314     F2 18 02 FB | 	rdlong	arg04, objptr
0f318     37 00 00 FF 
0f31c     28 E4 85 F1 | 	sub	objptr, ##28200
0f320     E0 3A B1 FD | 	call	#_hg010b_spin2_circle
0f324                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f324     54 00 90 FD | 	jmp	#LR__1291
0f328                 | LR__1290
0f328     A7 12 02 F6 | 	mov	arg01, fp
0f32c     40 DA BF FD | 	call	#_converttoint
0f330     FD 26 02 F6 | 	mov	local01, result1
0f334     0C 4E 05 F1 | 	add	fp, #12
0f338     A7 12 02 F6 | 	mov	arg01, fp
0f33c     0C 4E 85 F1 | 	sub	fp, #12
0f340     2C DA BF FD | 	call	#_converttoint
0f344     FD 28 02 F6 | 	mov	local02, result1
0f348     18 4E 05 F1 | 	add	fp, #24
0f34c     A7 12 02 F6 | 	mov	arg01, fp
0f350     18 4E 85 F1 | 	sub	fp, #24
0f354     18 DA BF FD | 	call	#_converttoint
0f358     FD 16 02 F6 | 	mov	arg03, result1
0f35c     37 00 00 FF 
0f360     28 E4 05 F1 | 	add	objptr, ##28200
0f364     F2 18 02 FB | 	rdlong	arg04, objptr
0f368     37 00 00 FF 
0f36c     28 E4 85 F1 | 	sub	objptr, ##28200
0f370     13 13 02 F6 | 	mov	arg01, local01
0f374     14 15 02 F6 | 	mov	arg02, local02
0f378     88 3A B1 FD | 	call	#_hg010b_spin2_circle
0f37c                 | LR__1291
0f37c     A7 F0 03 F6 | 	mov	ptra, fp
0f380     B2 00 A0 FD | 	call	#popregs_
0f384                 | _do_circle_ret
0f384     2D 00 64 FD | 	ret
0f388                 | 
0f388                 | ' 
0f388                 | ' '-------------------- click
0f388                 | ' 
0f388                 | ' sub do_click
0f388                 | _do_click
0f388     00 D8 BF FD | 	call	#_pop
0f38c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f390                 | ' 
0f390                 | ' t1=pop()
0f390                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f390     50 00 00 AF 
0f394     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f398     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f39c     50 00 00 FF 
0f3a0     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f3a4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f3a8     50 00 00 5F 
0f3ac     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f3b0                 | _do_click_ret
0f3b0     2D 00 64 FD | 	ret
0f3b4                 | 
0f3b4                 | ' 
0f3b4                 | ' '-------------------- close
0f3b4                 | ' 
0f3b4                 | ' sub do_close
0f3b4                 | _do_close
0f3b4     03 4A 05 F6 | 	mov	COUNT_, #3
0f3b8     A8 00 A0 FD | 	call	#pushregs_
0f3bc     CC D7 BF FD | 	call	#_pop
0f3c0     FD 26 02 F6 | 	mov	local01, result1
0f3c4     FF 16 02 F6 | 	mov	arg03, result3
0f3c8     FE 28 02 F6 | 	mov	local02, result2
0f3cc     0B 2B 02 F6 | 	mov	local03, arg03
0f3d0                 | ' 
0f3d0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f3d0                 | ' t1=pop()
0f3d0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f3d0     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f3d4     44 00 90 AD |  if_e	jmp	#LR__1300
0f3d8     00 12 06 F6 | 	mov	arg01, #0
0f3dc     98 B7 B1 FD | 	call	#__system___getiolock_0593
0f3e0     FD 12 02 F6 | 	mov	arg01, result1
0f3e4     EC 5A B1 FD | 	call	#__system___lockmem
0f3e8     A8 01 00 FF 
0f3ec     E4 15 06 F6 | 	mov	arg02, ##@LR__5787
0f3f0     00 12 06 F6 | 	mov	arg01, #0
0f3f4     00 16 06 F6 | 	mov	arg03, #0
0f3f8     D0 67 B1 FD | 	call	#__system___basic_print_string
0f3fc     00 12 06 F6 | 	mov	arg01, #0
0f400     0A 14 06 F6 | 	mov	arg02, #10
0f404     00 16 06 F6 | 	mov	arg03, #0
0f408     68 67 B1 FD | 	call	#__system___basic_print_char
0f40c     00 12 06 F6 | 	mov	arg01, #0
0f410     64 B7 B1 FD | 	call	#__system___getiolock_0593
0f414     FD 00 68 FC | 	wrlong	#0, result1
0f418     08 00 90 FD | 	jmp	#LR__1301
0f41c                 | LR__1300
0f41c                 | ' channel  = t1.result.iresult
0f41c                 | ' close #channel
0f41c     13 13 02 F6 | 	mov	arg01, local01
0f420     0C AE B1 FD | 	call	#__system__close
0f424                 | LR__1301
0f424     A7 F0 03 F6 | 	mov	ptra, fp
0f428     B2 00 A0 FD | 	call	#popregs_
0f42c                 | _do_close_ret
0f42c     2D 00 64 FD | 	ret
0f430                 | 
0f430                 | ' 
0f430                 | ' '-------------------- cls
0f430                 | ' 
0f430                 | ' sub do_cls
0f430                 | _do_cls
0f430     37 00 00 FF 
0f434     3C E4 05 F1 | 	add	objptr, ##28220
0f438     F2 12 02 FB | 	rdlong	arg01, objptr
0f43c     04 E4 85 F1 | 	sub	objptr, #4
0f440     F2 14 02 FB | 	rdlong	arg02, objptr
0f444     37 00 00 FF 
0f448     38 E4 85 F1 | 	sub	objptr, ##28216
0f44c     48 3E B1 FD | 	call	#_hg010b_spin2_cls
0f450     37 00 00 FF 
0f454     3C E4 05 F1 | 	add	objptr, ##28220
0f458     F2 14 02 FB | 	rdlong	arg02, objptr
0f45c     14 E4 85 F1 | 	sub	objptr, #20
0f460     F2 14 62 FC | 	wrlong	arg02, objptr
0f464     37 00 00 FF 
0f468     28 E4 85 F1 | 	sub	objptr, ##28200
0f46c                 | _do_cls_ret
0f46c     2D 00 64 FD | 	ret
0f470                 | 
0f470                 | ' 
0f470                 | ' '-------------------- color
0f470                 | ' 
0f470                 | ' sub do_color
0f470                 | _do_color
0f470     03 4A 05 F6 | 	mov	COUNT_, #3
0f474     A8 00 A0 FD | 	call	#pushregs_
0f478     10 D7 BF FD | 	call	#_pop
0f47c     FD 26 02 F6 | 	mov	local01, result1
0f480     FE 28 02 F6 | 	mov	local02, result2
0f484     FF 2A 02 F6 | 	mov	local03, result3
0f488     37 00 00 FF 
0f48c     28 E4 05 F1 | 	add	objptr, ##28200
0f490     F2 26 62 FC | 	wrlong	local01, objptr
0f494     37 00 00 FF 
0f498     28 E4 85 F1 | 	sub	objptr, ##28200
0f49c     A7 F0 03 F6 | 	mov	ptra, fp
0f4a0     B2 00 A0 FD | 	call	#popregs_
0f4a4                 | _do_color_ret
0f4a4     2D 00 64 FD | 	ret
0f4a8                 | 
0f4a8                 | ' 
0f4a8                 | ' '-------------------- cos
0f4a8                 | ' 
0f4a8                 | ' sub do_cos
0f4a8                 | _do_cos
0f4a8     01 4A 05 F6 | 	mov	COUNT_, #1
0f4ac     A8 00 A0 FD | 	call	#pushregs_
0f4b0     10 F0 07 F1 | 	add	ptra, #16
0f4b4     4A 00 00 FF 
0f4b8     80 E4 05 F1 | 	add	objptr, ##38016
0f4bc     F2 26 02 FB | 	rdlong	local01, objptr
0f4c0     13 17 02 F6 | 	mov	arg03, local01
0f4c4     01 16 66 F0 | 	shl	arg03, #1
0f4c8     13 17 02 F1 | 	add	arg03, local01
0f4cc     02 16 66 F0 | 	shl	arg03, #2
0f4d0     03 00 00 FF 
0f4d4     04 E4 85 F1 | 	sub	objptr, ##1540
0f4d8     F2 16 02 F1 | 	add	arg03, objptr
0f4dc     0B 17 02 FB | 	rdlong	arg03, arg03
0f4e0     0C 4E 05 F1 | 	add	fp, #12
0f4e4     A7 16 62 FC | 	wrlong	arg03, fp
0f4e8                 | ' 
0f4e8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4e8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f4e8     0C 4E 85 F1 | 	sub	fp, #12
0f4ec     02 16 16 F2 | 	cmp	arg03, #2 wc
0f4f0     47 00 00 FF 
0f4f4     7C E4 85 F1 | 	sub	objptr, ##36476
0f4f8     0C 4E 05 C1 |  if_b	add	fp, #12
0f4fc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f500     0C 4E 85 C1 |  if_b	sub	fp, #12
0f504     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0f508     00 12 06 F6 | 	mov	arg01, #0
0f50c     68 B6 B1 FD | 	call	#__system___getiolock_0593
0f510     FD 12 02 F6 | 	mov	arg01, result1
0f514     BC 59 B1 FD | 	call	#__system___lockmem
0f518     A8 01 00 FF 
0f51c     F6 15 06 F6 | 	mov	arg02, ##@LR__5788
0f520     00 12 06 F6 | 	mov	arg01, #0
0f524     00 16 06 F6 | 	mov	arg03, #0
0f528     A0 66 B1 FD | 	call	#__system___basic_print_string
0f52c     00 12 06 F6 | 	mov	arg01, #0
0f530     44 B6 B1 FD | 	call	#__system___getiolock_0593
0f534     FD 00 68 FC | 	wrlong	#0, result1
0f538     27 12 06 F6 | 	mov	arg01, #39
0f53c     00 14 06 F6 | 	mov	arg02, #0
0f540     E8 1F B1 FD | 	call	#_printerror
0f544     78 00 90 FD | 	jmp	#LR__1311
0f548                 | LR__1310
0f548     40 D6 BF FD | 	call	#_pop
0f54c     A7 FA 61 FC | 	wrlong	result1, fp
0f550     04 4E 05 F1 | 	add	fp, #4
0f554     A7 FC 61 FC | 	wrlong	result2, fp
0f558     04 4E 05 F1 | 	add	fp, #4
0f55c     A7 FE 61 FC | 	wrlong	result3, fp
0f560     08 4E 85 F1 | 	sub	fp, #8
0f564     51 00 00 FF 
0f568     E4 E5 05 F1 | 	add	objptr, ##41956
0f56c     F2 26 02 FB | 	rdlong	local01, objptr
0f570     51 00 00 FF 
0f574     E4 E5 85 F1 | 	sub	objptr, ##41956
0f578     A7 12 02 F6 | 	mov	arg01, fp
0f57c     AC D8 BF FD | 	call	#_converttofloat
0f580     FD 14 02 F6 | 	mov	arg02, result1
0f584     13 13 02 F6 | 	mov	arg01, local01
0f588     C4 87 B1 FD | 	call	#__system___float_mul
0f58c     FD 14 02 F6 | 	mov	arg02, result1
0f590     87 E4 1F FF 
0f594     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f598     1F 14 E6 F4 | 	bitnot	arg02, #31
0f59c     E0 83 B1 FD | 	call	#__system___float_add
0f5a0     FD 12 02 F6 | 	mov	arg01, result1
0f5a4     08 91 B1 FD | 	call	#__system____builtin_sinf
0f5a8     A7 FA 61 FC | 	wrlong	result1, fp
0f5ac     08 4E 05 F1 | 	add	fp, #8
0f5b0     A7 3C 68 FC | 	wrlong	#30, fp
0f5b4     08 4E 85 F1 | 	sub	fp, #8
0f5b8     A7 12 02 F6 | 	mov	arg01, fp
0f5bc     64 D6 BF FD | 	call	#_push
0f5c0                 | LR__1311
0f5c0     A7 F0 03 F6 | 	mov	ptra, fp
0f5c4     B2 00 A0 FD | 	call	#popregs_
0f5c8                 | _do_cos_ret
0f5c8     2D 00 64 FD | 	ret
0f5cc                 | 
0f5cc                 | ' 
0f5cc                 | ' '-------------------- cursor
0f5cc                 | ' 
0f5cc                 | ' sub do_cursor
0f5cc                 | _do_cursor
0f5cc     BC D5 BF FD | 	call	#_pop
0f5d0     00 FA 4D F2 | 	cmps	result1, #0 wz
0f5d4                 | ' t1=pop()
0f5d4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f5d4     14 00 90 5D |  if_ne	jmp	#LR__1320
0f5d8     11 12 06 F6 | 	mov	arg01, #17
0f5dc     00 14 06 F6 | 	mov	arg02, #0
0f5e0     00 16 06 F6 | 	mov	arg03, #0
0f5e4     90 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f5e8     10 00 90 FD | 	jmp	#LR__1321
0f5ec                 | LR__1320
0f5ec     11 12 06 F6 | 	mov	arg01, #17
0f5f0     08 14 06 F6 | 	mov	arg02, #8
0f5f4     10 16 06 F6 | 	mov	arg03, #16
0f5f8     7C 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f5fc                 | LR__1321
0f5fc                 | _do_cursor_ret
0f5fc     2D 00 64 FD | 	ret
0f600                 | 
0f600                 | ' 
0f600                 | ' '-------------------- defenv
0f600                 | ' 
0f600                 | ' sub do_defenv
0f600                 | _do_defenv
0f600     08 4A 05 F6 | 	mov	COUNT_, #8
0f604     A8 00 A0 FD | 	call	#pushregs_
0f608     58 F0 07 F1 | 	add	ptra, #88
0f60c     4A 00 00 FF 
0f610     80 E4 05 F1 | 	add	objptr, ##38016
0f614     F2 26 02 FB | 	rdlong	local01, objptr
0f618     13 1B 02 F6 | 	mov	arg05, local01
0f61c     01 1A 66 F0 | 	shl	arg05, #1
0f620     13 1B 02 F1 | 	add	arg05, local01
0f624     02 1A 66 F0 | 	shl	arg05, #2
0f628     03 00 00 FF 
0f62c     04 E4 85 F1 | 	sub	objptr, ##1540
0f630     F2 1A 02 F1 | 	add	arg05, objptr
0f634     0D 1B 02 FB | 	rdlong	arg05, arg05
0f638     10 4E 05 F1 | 	add	fp, #16
0f63c     A7 1A 62 FC | 	wrlong	arg05, fp
0f640                 | ' 
0f640                 | ' numpar=compiledline(lineptr_e).result.uresult
0f640                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f640     10 4E 85 F1 | 	sub	fp, #16
0f644     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f648     47 00 00 FF 
0f64c     7C E4 85 F1 | 	sub	objptr, ##36476
0f650     10 4E 05 51 |  if_ne	add	fp, #16
0f654     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f658     10 4E 85 51 |  if_ne	sub	fp, #16
0f65c     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f660     90 0A 90 5D |  if_ne	jmp	#LR__1351
0f664                 | ' 
0f664                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f664     10 4E 05 F1 | 	add	fp, #16
0f668     A7 26 02 FB | 	rdlong	local01, fp
0f66c     10 4E 85 F1 | 	sub	fp, #16
0f670     02 26 0E F2 | 	cmp	local01, #2 wz
0f674     28 04 90 5D |  if_ne	jmp	#LR__1343
0f678     10 D5 BF FD | 	call	#_pop
0f67c     FF 1A 02 F6 | 	mov	arg05, result3
0f680     40 4E 05 F1 | 	add	fp, #64
0f684     A7 FA 61 FC | 	wrlong	result1, fp
0f688     04 4E 05 F1 | 	add	fp, #4
0f68c     A7 FC 61 FC | 	wrlong	result2, fp
0f690     04 4E 05 F1 | 	add	fp, #4
0f694     A7 1A 62 FC | 	wrlong	arg05, fp
0f698                 | '   t1=pop()
0f698                 | '   if t1.result_type=result_string2 then 
0f698     48 4E 85 F1 | 	sub	fp, #72
0f69c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f6a0     20 00 90 5D |  if_ne	jmp	#LR__1330
0f6a4     40 4E 05 F1 | 	add	fp, #64
0f6a8     A7 12 02 FB | 	rdlong	arg01, fp
0f6ac     40 4E 85 F1 | 	sub	fp, #64
0f6b0     50 D6 BF FD | 	call	#_convertstring
0f6b4     4C 4E 05 F1 | 	add	fp, #76
0f6b8     A7 FA 61 FC | 	wrlong	result1, fp
0f6bc     4C 4E 85 F1 | 	sub	fp, #76
0f6c0     58 00 90 FD | 	jmp	#LR__1333
0f6c4                 | LR__1330
0f6c4     48 4E 05 F1 | 	add	fp, #72
0f6c8     A7 26 02 FB | 	rdlong	local01, fp
0f6cc     48 4E 85 F1 | 	sub	fp, #72
0f6d0     1F 26 0E F2 | 	cmp	local01, #31 wz
0f6d4     18 00 90 5D |  if_ne	jmp	#LR__1331
0f6d8     40 4E 05 F1 | 	add	fp, #64
0f6dc     A7 26 02 FB | 	rdlong	local01, fp
0f6e0     0C 4E 05 F1 | 	add	fp, #12
0f6e4     A7 26 62 FC | 	wrlong	local01, fp
0f6e8     4C 4E 85 F1 | 	sub	fp, #76
0f6ec     2C 00 90 FD | 	jmp	#LR__1332
0f6f0                 | LR__1331
0f6f0     A8 01 00 FF 
0f6f4     FC 27 06 F6 | 	mov	local01, ##@LR__5789
0f6f8     4C 4E 05 F1 | 	add	fp, #76
0f6fc     A7 26 62 FC | 	wrlong	local01, fp
0f700     0C 4E 85 F1 | 	sub	fp, #12
0f704     A7 12 02 F6 | 	mov	arg01, fp
0f708     40 4E 85 F1 | 	sub	fp, #64
0f70c     60 D6 BF FD | 	call	#_converttoint
0f710     1C 4E 05 F1 | 	add	fp, #28
0f714     A7 FA 61 FC | 	wrlong	result1, fp
0f718     1C 4E 85 F1 | 	sub	fp, #28
0f71c                 | LR__1332
0f71c                 | LR__1333
0f71c                 | '   if s1<>"" then 
0f71c     4C 4E 05 F1 | 	add	fp, #76
0f720     A7 12 02 FB | 	rdlong	arg01, fp
0f724     4C 4E 85 F1 | 	sub	fp, #76
0f728     A8 01 00 FF 
0f72c     FD 15 06 F6 | 	mov	arg02, ##@LR__5790
0f730     C8 57 B1 FD | 	call	#__system___string_cmp
0f734     00 FA 0D F2 | 	cmp	result1, #0 wz
0f738     28 02 90 AD |  if_e	jmp	#LR__1337
0f73c     4C D4 BF FD | 	call	#_pop
0f740     FF 26 02 F6 | 	mov	local01, result3
0f744     40 4E 05 F1 | 	add	fp, #64
0f748     A7 FA 61 FC | 	wrlong	result1, fp
0f74c     04 4E 05 F1 | 	add	fp, #4
0f750     A7 FC 61 FC | 	wrlong	result2, fp
0f754     04 4E 05 F1 | 	add	fp, #4
0f758     A7 26 62 FC | 	wrlong	local01, fp
0f75c     08 4E 85 F1 | 	sub	fp, #8
0f760     A7 12 02 F6 | 	mov	arg01, fp
0f764     40 4E 85 F1 | 	sub	fp, #64
0f768     04 D6 BF FD | 	call	#_converttoint
0f76c     18 4E 05 F1 | 	add	fp, #24
0f770     A7 FA 61 FC | 	wrlong	result1, fp
0f774     18 4E 85 F1 | 	sub	fp, #24
0f778                 | '     t1=pop()
0f778                 | '     channel=converttoint(t1) 
0f778                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f778     09 12 06 F6 | 	mov	arg01, #9
0f77c     B0 AA B1 FD | 	call	#__system__close
0f780     09 26 06 F6 | 	mov	local01, #9
0f784     A8 01 00 FF 
0f788     FE 13 06 F6 | 	mov	arg01, ##@LR__5791
0f78c     4C 4E 05 F1 | 	add	fp, #76
0f790     A7 14 02 FB | 	rdlong	arg02, fp
0f794     4C 4E 85 F1 | 	sub	fp, #76
0f798     94 57 B1 FD | 	call	#__system___string_concat
0f79c     FD 14 02 F6 | 	mov	arg02, result1
0f7a0     13 13 02 F6 | 	mov	arg01, local01
0f7a4     00 16 06 F6 | 	mov	arg03, #0
0f7a8     2C 63 B1 FD | 	call	#__system___basic_open_string
0f7ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f7b0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f7b4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0f7b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f7bc     0C 4E 05 F1 | 	add	fp, #12
0f7c0     A7 FA 61 FC | 	wrlong	result1, fp
0f7c4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f7c4     0C 4E 85 F1 | 	sub	fp, #12
0f7c8     A0 00 90 AD |  if_e	jmp	#LR__1334
0f7cc     00 12 06 F6 | 	mov	arg01, #0
0f7d0     A4 B3 B1 FD | 	call	#__system___getiolock_0593
0f7d4     FD 12 02 F6 | 	mov	arg01, result1
0f7d8     F8 56 B1 FD | 	call	#__system___lockmem
0f7dc     A9 01 00 FF 
0f7e0     0B 14 06 F6 | 	mov	arg02, ##@LR__5792
0f7e4     00 12 06 F6 | 	mov	arg01, #0
0f7e8     00 16 06 F6 | 	mov	arg03, #0
0f7ec     DC 63 B1 FD | 	call	#__system___basic_print_string
0f7f0     0C 4E 05 F1 | 	add	fp, #12
0f7f4     A7 14 02 FB | 	rdlong	arg02, fp
0f7f8     0C 4E 85 F1 | 	sub	fp, #12
0f7fc     00 12 06 F6 | 	mov	arg01, #0
0f800     00 16 06 F6 | 	mov	arg03, #0
0f804     0A 18 06 F6 | 	mov	arg04, #10
0f808     04 64 B1 FD | 	call	#__system___basic_print_integer
0f80c     A9 01 00 FF 
0f810     19 14 06 F6 | 	mov	arg02, ##@LR__5793
0f814     00 12 06 F6 | 	mov	arg01, #0
0f818     00 16 06 F6 | 	mov	arg03, #0
0f81c     AC 63 B1 FD | 	call	#__system___basic_print_string
0f820     00 26 06 F6 | 	mov	local01, #0
0f824     0C 4E 05 F1 | 	add	fp, #12
0f828     A7 12 02 FB | 	rdlong	arg01, fp
0f82c     0C 4E 85 F1 | 	sub	fp, #12
0f830     30 80 B1 FD | 	call	#__system___strerror
0f834     FD 14 02 F6 | 	mov	arg02, result1
0f838     13 13 02 F6 | 	mov	arg01, local01
0f83c     00 16 06 F6 | 	mov	arg03, #0
0f840     88 63 B1 FD | 	call	#__system___basic_print_string
0f844     00 12 06 F6 | 	mov	arg01, #0
0f848     0A 14 06 F6 | 	mov	arg02, #10
0f84c     00 16 06 F6 | 	mov	arg03, #0
0f850     20 63 B1 FD | 	call	#__system___basic_print_char
0f854     00 12 06 F6 | 	mov	arg01, #0
0f858     1C B3 B1 FD | 	call	#__system___getiolock_0593
0f85c     FD 00 68 FC | 	wrlong	#0, result1
0f860     09 12 06 F6 | 	mov	arg01, #9
0f864     C8 A9 B1 FD | 	call	#__system__close
0f868     88 08 90 FD | 	jmp	#LR__1351
0f86c                 | LR__1334
0f86c                 | '     get #9,17,envbuf8(channel,0),256
0f86c     18 4E 05 F1 | 	add	fp, #24
0f870     A7 1A 02 FB | 	rdlong	arg05, fp
0f874     18 4E 85 F1 | 	sub	fp, #24
0f878     0D 17 02 F6 | 	mov	arg03, arg05
0f87c     09 16 66 F0 | 	shl	arg03, #9
0f880     0D 17 02 F1 | 	add	arg03, arg05
0f884     0C 00 00 FF 
0f888     D8 E4 05 F1 | 	add	objptr, ##6360
0f88c     F2 16 02 F1 | 	add	arg03, objptr
0f890     09 12 06 F6 | 	mov	arg01, #9
0f894     11 14 06 F6 | 	mov	arg02, #17
0f898     00 19 06 F6 | 	mov	arg04, #256
0f89c     01 1A 06 F6 | 	mov	arg05, #1
0f8a0     0C 00 00 FF 
0f8a4     D8 E4 85 F1 | 	sub	objptr, ##6360
0f8a8     9C 64 B1 FD | 	call	#__system___basic_get
0f8ac                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f8ac     14 4E 05 F1 | 	add	fp, #20
0f8b0     A7 FE 69 FC | 	wrlong	#255, fp
0f8b4     14 4E 85 F1 | 	sub	fp, #20
0f8b8     0C 00 00 FF 
0f8bc     D8 E4 05 F1 | 	add	objptr, ##6360
0f8c0     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
0f8c4                 | LR__1335
0f8c4     18 4E 05 F1 | 	add	fp, #24
0f8c8     A7 16 02 FB | 	rdlong	arg03, fp
0f8cc     0B 27 02 F6 | 	mov	local01, arg03
0f8d0     09 26 66 F0 | 	shl	local01, #9
0f8d4     F2 26 02 F1 | 	add	local01, objptr
0f8d8     04 4E 85 F1 | 	sub	fp, #4
0f8dc     A7 1A 02 FB | 	rdlong	arg05, fp
0f8e0     0D 19 02 F6 | 	mov	arg04, arg05
0f8e4     01 18 66 F0 | 	shl	arg04, #1
0f8e8     13 19 02 F1 | 	add	arg04, local01
0f8ec     0B 27 02 F6 | 	mov	local01, arg03
0f8f0     09 26 66 F0 | 	shl	local01, #9
0f8f4     0B 27 02 F1 | 	add	local01, arg03
0f8f8     F2 26 02 F1 | 	add	local01, objptr
0f8fc     13 1B 02 F1 | 	add	arg05, local01
0f900     0D 27 C2 FA | 	rdbyte	local01, arg05
0f904     00 27 06 FA | 	mul	local01, #256
0f908     0C 27 52 FC | 	wrword	local01, arg04
0f90c     A7 26 02 FB | 	rdlong	local01, fp
0f910     01 26 86 F1 | 	sub	local01, #1
0f914     A7 26 62 FC | 	wrlong	local01, fp
0f918     14 4E 85 F1 | 	sub	fp, #20
0f91c     00 26 56 F2 | 	cmps	local01, #0 wc
0f920     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
0f924                 | LR__1336
0f924     0C 00 00 FF 
0f928     D8 E4 85 F1 | 	sub	objptr, ##6360
0f92c                 | '     close #9
0f92c     09 12 06 F6 | 	mov	arg01, #9
0f930     FC A8 B1 FD | 	call	#__system__close
0f934     18 4E 05 F1 | 	add	fp, #24
0f938     A7 26 02 FB | 	rdlong	local01, fp
0f93c     18 4E 85 F1 | 	sub	fp, #24
0f940     09 26 66 F0 | 	shl	local01, #9
0f944     0C 00 00 FF 
0f948     D8 E4 05 F1 | 	add	objptr, ##6360
0f94c     F2 26 02 F1 | 	add	local01, objptr
0f950     FE 27 06 F1 | 	add	local01, #510
0f954     13 01 58 FC | 	wrword	#0, local01
0f958                 | '     envbuf(channel,255)=0                                                              
0f958                 | '     return
0f958     0C 00 00 FF 
0f95c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f960     90 07 90 FD | 	jmp	#LR__1351
0f964                 | LR__1337
0f964                 | '     if wptr < $80000 then 
0f964     1C 4E 05 F1 | 	add	fp, #28
0f968     A7 28 02 FB | 	rdlong	local02, fp
0f96c     1C 4E 85 F1 | 	sub	fp, #28
0f970     00 04 00 FF 
0f974     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f978     7C 00 90 3D |  if_ae	jmp	#LR__1340
0f97c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f97c     14 4E 05 F1 | 	add	fp, #20
0f980     A7 00 68 FC | 	wrlong	#0, fp
0f984     14 4E 85 F1 | 	sub	fp, #20
0f988     0C 00 00 FF 
0f98c     D8 E4 05 F1 | 	add	objptr, ##6360
0f990     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
0f994                 | LR__1338
0f994     18 4E 05 F1 | 	add	fp, #24
0f998     A7 28 02 FB | 	rdlong	local02, fp
0f99c     09 28 66 F0 | 	shl	local02, #9
0f9a0     F2 28 02 F1 | 	add	local02, objptr
0f9a4     04 4E 85 F1 | 	sub	fp, #4
0f9a8     A7 26 02 FB | 	rdlong	local01, fp
0f9ac     13 1B 02 F6 | 	mov	arg05, local01
0f9b0     01 1A 66 F0 | 	shl	arg05, #1
0f9b4     14 1B 02 F1 | 	add	arg05, local02
0f9b8     08 4E 05 F1 | 	add	fp, #8
0f9bc     A7 12 02 FB | 	rdlong	arg01, fp
0f9c0     01 26 66 F0 | 	shl	local01, #1
0f9c4     13 13 02 F1 | 	add	arg01, local01
0f9c8     09 FB E1 FA | 	rdword	result1, arg01
0f9cc     0D FB 51 FC | 	wrword	result1, arg05
0f9d0     08 4E 85 F1 | 	sub	fp, #8
0f9d4     A7 28 02 FB | 	rdlong	local02, fp
0f9d8     01 28 06 F1 | 	add	local02, #1
0f9dc     A7 28 62 FC | 	wrlong	local02, fp
0f9e0     14 4E 85 F1 | 	sub	fp, #20
0f9e4     00 29 56 F2 | 	cmps	local02, #256 wc
0f9e8     A8 FF 9F CD |  if_b	jmp	#LR__1338
0f9ec                 | LR__1339
0f9ec     0C 00 00 FF 
0f9f0     D8 E4 85 F1 | 	sub	objptr, ##6360
0f9f4     78 00 90 FD | 	jmp	#LR__1342
0f9f8                 | LR__1340
0f9f8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f9f8     14 4E 05 F1 | 	add	fp, #20
0f9fc     A7 00 68 FC | 	wrlong	#0, fp
0fa00     14 4E 85 F1 | 	sub	fp, #20
0fa04                 | LR__1341
0fa04     18 4E 05 F1 | 	add	fp, #24
0fa08     A7 28 02 FB | 	rdlong	local02, fp
0fa0c     09 28 66 F0 | 	shl	local02, #9
0fa10     0C 00 00 FF 
0fa14     D8 E4 05 F1 | 	add	objptr, ##6360
0fa18     F2 28 02 F1 | 	add	local02, objptr
0fa1c     04 4E 85 F1 | 	sub	fp, #4
0fa20     A7 26 02 FB | 	rdlong	local01, fp
0fa24     13 2B 02 F6 | 	mov	local03, local01
0fa28     01 2A 66 F0 | 	shl	local03, #1
0fa2c     14 2B 02 F1 | 	add	local03, local02
0fa30     08 4E 05 F1 | 	add	fp, #8
0fa34     A7 12 02 FB | 	rdlong	arg01, fp
0fa38     1C 4E 85 F1 | 	sub	fp, #28
0fa3c     01 26 66 F0 | 	shl	local01, #1
0fa40     13 13 02 F1 | 	add	arg01, local01
0fa44     0C 00 00 FF 
0fa48     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa4c     04 1E B1 FD | 	call	#_psdpeek
0fa50     15 FB 51 FC | 	wrword	result1, local03
0fa54     14 4E 05 F1 | 	add	fp, #20
0fa58     A7 2A 02 FB | 	rdlong	local03, fp
0fa5c     01 2A 06 F1 | 	add	local03, #1
0fa60     A7 2A 62 FC | 	wrlong	local03, fp
0fa64     14 4E 85 F1 | 	sub	fp, #20
0fa68     00 2B 56 F2 | 	cmps	local03, #256 wc
0fa6c     94 FF 9F CD |  if_b	jmp	#LR__1341
0fa70                 | LR__1342
0fa70     18 4E 05 F1 | 	add	fp, #24
0fa74     A7 2A 02 FB | 	rdlong	local03, fp
0fa78     18 4E 85 F1 | 	sub	fp, #24
0fa7c     09 2A 66 F0 | 	shl	local03, #9
0fa80     0C 00 00 FF 
0fa84     D8 E4 05 F1 | 	add	objptr, ##6360
0fa88     F2 2A 02 F1 | 	add	local03, objptr
0fa8c     FE 2B 06 F1 | 	add	local03, #510
0fa90     15 01 58 FC | 	wrword	#0, local03
0fa94                 | '     envbuf(channel,255)=0
0fa94                 | '     return   
0fa94     0C 00 00 FF 
0fa98     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa9c     54 06 90 FD | 	jmp	#LR__1351
0faa0                 | LR__1343
0faa0                 | ' 
0faa0                 | ' if numpar=5 then   						 'simple adsr
0faa0     10 4E 05 F1 | 	add	fp, #16
0faa4     A7 28 02 FB | 	rdlong	local02, fp
0faa8     10 4E 85 F1 | 	sub	fp, #16
0faac     05 28 0E F2 | 	cmp	local02, #5 wz
0fab0     14 06 90 5D |  if_ne	jmp	#LR__1350
0fab4     D4 D0 BF FD | 	call	#_pop
0fab8     FF 26 02 F6 | 	mov	local01, result3
0fabc     40 4E 05 F1 | 	add	fp, #64
0fac0     A7 FA 61 FC | 	wrlong	result1, fp
0fac4     04 4E 05 F1 | 	add	fp, #4
0fac8     A7 FC 61 FC | 	wrlong	result2, fp
0facc     04 4E 05 F1 | 	add	fp, #4
0fad0     A7 26 62 FC | 	wrlong	local01, fp
0fad4     08 4E 85 F1 | 	sub	fp, #8
0fad8     A7 12 02 F6 | 	mov	arg01, fp
0fadc     40 4E 85 F1 | 	sub	fp, #64
0fae0     48 D3 BF FD | 	call	#_converttofloat
0fae4     FD 28 02 F6 | 	mov	local02, result1
0fae8     2C 4E 05 F1 | 	add	fp, #44
0faec     A7 28 62 FC | 	wrlong	local02, fp
0faf0     2C 4E 85 F1 | 	sub	fp, #44
0faf4     94 D0 BF FD | 	call	#_pop
0faf8     FF 26 02 F6 | 	mov	local01, result3
0fafc     40 4E 05 F1 | 	add	fp, #64
0fb00     A7 FA 61 FC | 	wrlong	result1, fp
0fb04     04 4E 05 F1 | 	add	fp, #4
0fb08     A7 FC 61 FC | 	wrlong	result2, fp
0fb0c     04 4E 05 F1 | 	add	fp, #4
0fb10     A7 26 62 FC | 	wrlong	local01, fp
0fb14     08 4E 85 F1 | 	sub	fp, #8
0fb18     A7 12 02 F6 | 	mov	arg01, fp
0fb1c     40 4E 85 F1 | 	sub	fp, #64
0fb20     08 D3 BF FD | 	call	#_converttofloat
0fb24     FD 28 02 F6 | 	mov	local02, result1
0fb28     28 4E 05 F1 | 	add	fp, #40
0fb2c     A7 28 62 FC | 	wrlong	local02, fp
0fb30     28 4E 85 F1 | 	sub	fp, #40
0fb34     54 D0 BF FD | 	call	#_pop
0fb38     FF 26 02 F6 | 	mov	local01, result3
0fb3c     40 4E 05 F1 | 	add	fp, #64
0fb40     A7 FA 61 FC | 	wrlong	result1, fp
0fb44     04 4E 05 F1 | 	add	fp, #4
0fb48     A7 FC 61 FC | 	wrlong	result2, fp
0fb4c     04 4E 05 F1 | 	add	fp, #4
0fb50     A7 26 62 FC | 	wrlong	local01, fp
0fb54     08 4E 85 F1 | 	sub	fp, #8
0fb58     A7 12 02 F6 | 	mov	arg01, fp
0fb5c     40 4E 85 F1 | 	sub	fp, #64
0fb60     C8 D2 BF FD | 	call	#_converttofloat
0fb64     FD 28 02 F6 | 	mov	local02, result1
0fb68     24 4E 05 F1 | 	add	fp, #36
0fb6c     A7 28 62 FC | 	wrlong	local02, fp
0fb70     24 4E 85 F1 | 	sub	fp, #36
0fb74     14 D0 BF FD | 	call	#_pop
0fb78     FF 26 02 F6 | 	mov	local01, result3
0fb7c     40 4E 05 F1 | 	add	fp, #64
0fb80     A7 FA 61 FC | 	wrlong	result1, fp
0fb84     04 4E 05 F1 | 	add	fp, #4
0fb88     A7 FC 61 FC | 	wrlong	result2, fp
0fb8c     04 4E 05 F1 | 	add	fp, #4
0fb90     A7 26 62 FC | 	wrlong	local01, fp
0fb94     08 4E 85 F1 | 	sub	fp, #8
0fb98     A7 12 02 F6 | 	mov	arg01, fp
0fb9c     40 4E 85 F1 | 	sub	fp, #64
0fba0     88 D2 BF FD | 	call	#_converttofloat
0fba4     FD 28 02 F6 | 	mov	local02, result1
0fba8     20 4E 05 F1 | 	add	fp, #32
0fbac     A7 28 62 FC | 	wrlong	local02, fp
0fbb0     20 4E 85 F1 | 	sub	fp, #32
0fbb4     D4 CF BF FD | 	call	#_pop
0fbb8     FF 26 02 F6 | 	mov	local01, result3
0fbbc     40 4E 05 F1 | 	add	fp, #64
0fbc0     A7 FA 61 FC | 	wrlong	result1, fp
0fbc4     04 4E 05 F1 | 	add	fp, #4
0fbc8     A7 FC 61 FC | 	wrlong	result2, fp
0fbcc     04 4E 05 F1 | 	add	fp, #4
0fbd0     A7 26 62 FC | 	wrlong	local01, fp
0fbd4     08 4E 85 F1 | 	sub	fp, #8
0fbd8     A7 12 02 F6 | 	mov	arg01, fp
0fbdc     40 4E 85 F1 | 	sub	fp, #64
0fbe0     8C D1 BF FD | 	call	#_converttoint
0fbe4     18 4E 05 F1 | 	add	fp, #24
0fbe8     A7 FA 61 FC | 	wrlong	result1, fp
0fbec                 | '   t1=pop() : rr=converttofloat(t1)
0fbec                 | '   t1=pop() : ss=converttofloat(t1) 
0fbec                 | '   t1=pop() : dd=converttofloat(t1)
0fbec                 | '   t1=pop() : aa=converttofloat(t1)
0fbec                 | '   t1=pop() : channel=converttoint(t1)
0fbec                 | '   if ss<0.0 then ss=0.0 
0fbec     10 4E 05 F1 | 	add	fp, #16
0fbf0     A7 12 02 FB | 	rdlong	arg01, fp
0fbf4     28 4E 85 F1 | 	sub	fp, #40
0fbf8     00 14 06 F6 | 	mov	arg02, #0
0fbfc     01 16 06 F6 | 	mov	arg03, #1
0fc00     80 85 B1 FD | 	call	#__system___float_cmp
0fc04     00 FA 55 F2 | 	cmps	result1, #0 wc
0fc08     28 4E 05 C1 |  if_b	add	fp, #40
0fc0c     A7 00 68 CC |  if_b	wrlong	#0, fp
0fc10     28 4E 85 C1 |  if_b	sub	fp, #40
0fc14                 | '   if ss>1.0 then ss=1.0
0fc14     28 4E 05 F1 | 	add	fp, #40
0fc18     A7 12 02 FB | 	rdlong	arg01, fp
0fc1c     28 4E 85 F1 | 	sub	fp, #40
0fc20     00 C0 1F FF 
0fc24     00 14 06 F6 | 	mov	arg02, ##1065353216
0fc28     01 16 66 F6 | 	neg	arg03, #1
0fc2c     54 85 B1 FD | 	call	#__system___float_cmp
0fc30     01 FA 55 F2 | 	cmps	result1, #1 wc
0fc34     28 4E 05 31 |  if_ae	add	fp, #40
0fc38     00 C0 9F 3F 
0fc3c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fc40     28 4E 85 31 |  if_ae	sub	fp, #40
0fc44     20 4E 05 F1 | 	add	fp, #32
0fc48     A7 12 02 FB | 	rdlong	arg01, fp
0fc4c     04 4E 05 F1 | 	add	fp, #4
0fc50     A7 14 02 FB | 	rdlong	arg02, fp
0fc54     24 4E 85 F1 | 	sub	fp, #36
0fc58     24 7D B1 FD | 	call	#__system___float_add
0fc5c     FD 12 02 F6 | 	mov	arg01, result1
0fc60     2C 4E 05 F1 | 	add	fp, #44
0fc64     A7 14 02 FB | 	rdlong	arg02, fp
0fc68     2C 4E 85 F1 | 	sub	fp, #44
0fc6c     10 7D B1 FD | 	call	#__system___float_add
0fc70     30 4E 05 F1 | 	add	fp, #48
0fc74     A7 FA 61 FC | 	wrlong	result1, fp
0fc78     FD 14 02 F6 | 	mov	arg02, result1
0fc7c     30 4E 85 F1 | 	sub	fp, #48
0fc80     00 C0 21 FF 
0fc84     00 12 06 F6 | 	mov	arg01, ##1132462080
0fc88     C8 82 B1 FD | 	call	#__system___float_div
0fc8c     34 4E 05 F1 | 	add	fp, #52
0fc90     A7 FA 61 FC | 	wrlong	result1, fp
0fc94     14 4E 85 F1 | 	sub	fp, #20
0fc98     A7 12 02 FB | 	rdlong	arg01, fp
0fc9c     FD 14 02 F6 | 	mov	arg02, result1
0fca0     20 4E 85 F1 | 	sub	fp, #32
0fca4     A8 80 B1 FD | 	call	#__system___float_mul
0fca8     FD 12 02 F6 | 	mov	arg01, result1
0fcac     01 14 06 F6 | 	mov	arg02, #1
0fcb0     64 85 B1 FD | 	call	#__system___float_tointeger
0fcb4     A7 FA 61 FC | 	wrlong	result1, fp
0fcb8     24 4E 05 F1 | 	add	fp, #36
0fcbc     A7 12 02 FB | 	rdlong	arg01, fp
0fcc0     10 4E 05 F1 | 	add	fp, #16
0fcc4     A7 14 02 FB | 	rdlong	arg02, fp
0fcc8     34 4E 85 F1 | 	sub	fp, #52
0fccc     80 80 B1 FD | 	call	#__system___float_mul
0fcd0     FD 12 02 F6 | 	mov	arg01, result1
0fcd4     01 14 06 F6 | 	mov	arg02, #1
0fcd8     3C 85 B1 FD | 	call	#__system___float_tointeger
0fcdc     04 4E 05 F1 | 	add	fp, #4
0fce0     A7 FA 61 FC | 	wrlong	result1, fp
0fce4     28 4E 05 F1 | 	add	fp, #40
0fce8     A7 12 02 FB | 	rdlong	arg01, fp
0fcec     08 4E 05 F1 | 	add	fp, #8
0fcf0     A7 14 02 FB | 	rdlong	arg02, fp
0fcf4     34 4E 85 F1 | 	sub	fp, #52
0fcf8     54 80 B1 FD | 	call	#__system___float_mul
0fcfc     FD 12 02 F6 | 	mov	arg01, result1
0fd00     01 14 06 F6 | 	mov	arg02, #1
0fd04     10 85 B1 FD | 	call	#__system___float_tointeger
0fd08     0C 4E 05 F1 | 	add	fp, #12
0fd0c     A7 FA 61 FC | 	wrlong	result1, fp
0fd10     0C 4E 85 F1 | 	sub	fp, #12
0fd14     F8 BF 23 FF 
0fd18     00 28 06 F6 | 	mov	local02, ##1199566848
0fd1c     A7 12 02 FB | 	rdlong	arg01, fp
0fd20     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd24     1F 2C C6 C9 |  if_b	decod	local04, #31
0fd28     00 2C 06 36 |  if_ae	mov	local04, #0
0fd2c     1C 7C B1 FD | 	call	#__system___float_fromuns
0fd30     16 FB 61 F5 | 	xor	result1, local04
0fd34     FD 14 02 F6 | 	mov	arg02, result1
0fd38     14 13 02 F6 | 	mov	arg01, local02
0fd3c     14 82 B1 FD | 	call	#__system___float_div
0fd40     38 4E 05 F1 | 	add	fp, #56
0fd44     A7 FA 61 FC | 	wrlong	result1, fp
0fd48     F8 BF 23 FF 
0fd4c     00 28 06 F6 | 	mov	local02, ##1199566848
0fd50     10 4E 85 F1 | 	sub	fp, #16
0fd54     A7 14 02 FB | 	rdlong	arg02, fp
0fd58     28 4E 85 F1 | 	sub	fp, #40
0fd5c     F8 BF 23 FF 
0fd60     00 12 06 F6 | 	mov	arg01, ##1199566848
0fd64     E8 7F B1 FD | 	call	#__system___float_mul
0fd68     FD 14 02 F6 | 	mov	arg02, result1
0fd6c     14 13 02 F6 | 	mov	arg01, local02
0fd70     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd74     08 7C B1 FD | 	call	#__system___float_add
0fd78     FD 28 02 F6 | 	mov	local02, result1
0fd7c     04 4E 05 F1 | 	add	fp, #4
0fd80     A7 12 02 FB | 	rdlong	arg01, fp
0fd84     04 4E 85 F1 | 	sub	fp, #4
0fd88     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd8c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fd90     00 2C 06 36 |  if_ae	mov	local04, #0
0fd94     B4 7B B1 FD | 	call	#__system___float_fromuns
0fd98     16 FB 61 F5 | 	xor	result1, local04
0fd9c     FD 14 02 F6 | 	mov	arg02, result1
0fda0     14 13 02 F6 | 	mov	arg01, local02
0fda4     AC 81 B1 FD | 	call	#__system___float_div
0fda8     24 4E 05 F1 | 	add	fp, #36
0fdac     A7 FA 61 FC | 	wrlong	result1, fp
0fdb0     04 4E 05 F1 | 	add	fp, #4
0fdb4     A7 14 02 FB | 	rdlong	arg02, fp
0fdb8     28 4E 85 F1 | 	sub	fp, #40
0fdbc     F8 BF 23 FF 
0fdc0     00 12 06 F6 | 	mov	arg01, ##1199566848
0fdc4     88 7F B1 FD | 	call	#__system___float_mul
0fdc8     FD 28 02 F6 | 	mov	local02, result1
0fdcc     0C 4E 05 F1 | 	add	fp, #12
0fdd0     A7 12 02 FB | 	rdlong	arg01, fp
0fdd4     0C 4E 85 F1 | 	sub	fp, #12
0fdd8     09 13 52 F6 | 	abs	arg01, arg01 wc
0fddc     1F 2C C6 C9 |  if_b	decod	local04, #31
0fde0     00 2C 06 36 |  if_ae	mov	local04, #0
0fde4     64 7B B1 FD | 	call	#__system___float_fromuns
0fde8     16 FB 61 F5 | 	xor	result1, local04
0fdec     FD 14 02 F6 | 	mov	arg02, result1
0fdf0     14 13 02 F6 | 	mov	arg01, local02
0fdf4     5C 81 B1 FD | 	call	#__system___float_div
0fdf8     3C 4E 05 F1 | 	add	fp, #60
0fdfc     A7 FA 61 FC | 	wrlong	result1, fp
0fe00     24 4E 85 F1 | 	sub	fp, #36
0fe04     A7 2E 02 FB | 	rdlong	local05, fp
0fe08     18 4E 85 F1 | 	sub	fp, #24
0fe0c     01 2E 66 F0 | 	shl	local05, #1
0fe10     51 00 00 FF 
0fe14     F0 E5 05 F1 | 	add	objptr, ##41968
0fe18     F2 2E 02 F1 | 	add	local05, objptr
0fe1c     A7 30 02 FB | 	rdlong	local06, fp
0fe20     04 4E 05 F1 | 	add	fp, #4
0fe24     A7 2A 02 FB | 	rdlong	local03, fp
0fe28     15 31 02 F1 | 	add	local06, local03
0fe2c     17 31 52 FC | 	wrword	local06, local05
0fe30     1C 4E 05 F1 | 	add	fp, #28
0fe34     A7 00 68 FC | 	wrlong	#0, fp
0fe38                 | '   fulltime=aa+dd+rr
0fe38                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fe38                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fe38                 | '   suspoints(channel)=a+d
0fe38                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fe38     0C 4E 85 F1 | 	sub	fp, #12
0fe3c     A7 00 68 FC | 	wrlong	#0, fp
0fe40     14 4E 85 F1 | 	sub	fp, #20
0fe44     A7 32 02 FB | 	rdlong	local07, fp
0fe48     51 00 00 FF 
0fe4c     F0 E5 85 F1 | 	sub	objptr, ##41968
0fe50                 | LR__1344
0fe50     14 4E 05 F1 | 	add	fp, #20
0fe54     A7 28 02 FB | 	rdlong	local02, fp
0fe58     14 4E 85 F1 | 	sub	fp, #20
0fe5c     19 29 52 F2 | 	cmps	local02, local07 wc
0fe60     80 00 90 3D |  if_ae	jmp	#LR__1345
0fe64     18 4E 05 F1 | 	add	fp, #24
0fe68     A7 30 02 FB | 	rdlong	local06, fp
0fe6c     09 30 66 F0 | 	shl	local06, #9
0fe70     0C 00 00 FF 
0fe74     D8 E4 05 F1 | 	add	objptr, ##6360
0fe78     F2 30 02 F1 | 	add	local06, objptr
0fe7c     04 4E 85 F1 | 	sub	fp, #4
0fe80     A7 2E 02 FB | 	rdlong	local05, fp
0fe84     01 2E 66 F0 | 	shl	local05, #1
0fe88     18 2F 02 F1 | 	add	local05, local06
0fe8c     0C 4E 05 F1 | 	add	fp, #12
0fe90     A7 12 02 FB | 	rdlong	arg01, fp
0fe94     20 4E 85 F1 | 	sub	fp, #32
0fe98     0C 00 00 FF 
0fe9c     D8 E4 85 F1 | 	sub	objptr, ##6360
0fea0     01 14 06 F6 | 	mov	arg02, #1
0fea4     70 83 B1 FD | 	call	#__system___float_tointeger
0fea8     17 FB 51 FC | 	wrword	result1, local05
0feac     20 4E 05 F1 | 	add	fp, #32
0feb0     A7 12 02 FB | 	rdlong	arg01, fp
0feb4     18 4E 05 F1 | 	add	fp, #24
0feb8     A7 14 02 FB | 	rdlong	arg02, fp
0febc     38 4E 85 F1 | 	sub	fp, #56
0fec0     BC 7A B1 FD | 	call	#__system___float_add
0fec4     20 4E 05 F1 | 	add	fp, #32
0fec8     A7 FA 61 FC | 	wrlong	result1, fp
0fecc     0C 4E 85 F1 | 	sub	fp, #12
0fed0     A7 30 02 FB | 	rdlong	local06, fp
0fed4     01 30 06 F1 | 	add	local06, #1
0fed8     A7 30 62 FC | 	wrlong	local06, fp
0fedc     14 4E 85 F1 | 	sub	fp, #20
0fee0     6C FF 9F FD | 	jmp	#LR__1344
0fee4                 | LR__1345
0fee4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fee4     A7 28 02 FB | 	rdlong	local02, fp
0fee8     14 4E 05 F1 | 	add	fp, #20
0feec     A7 28 62 FC | 	wrlong	local02, fp
0fef0     14 4E 85 F1 | 	sub	fp, #20
0fef4     A7 34 02 FB | 	rdlong	local08, fp
0fef8     04 4E 05 F1 | 	add	fp, #4
0fefc     A7 28 02 FB | 	rdlong	local02, fp
0ff00     04 4E 85 F1 | 	sub	fp, #4
0ff04     14 35 02 F1 | 	add	local08, local02
0ff08                 | LR__1346
0ff08     14 4E 05 F1 | 	add	fp, #20
0ff0c     A7 28 02 FB | 	rdlong	local02, fp
0ff10     14 4E 85 F1 | 	sub	fp, #20
0ff14     1A 29 52 F2 | 	cmps	local02, local08 wc
0ff18     A8 00 90 3D |  if_ae	jmp	#LR__1347
0ff1c     18 4E 05 F1 | 	add	fp, #24
0ff20     A7 32 02 FB | 	rdlong	local07, fp
0ff24     09 32 66 F0 | 	shl	local07, #9
0ff28     0C 00 00 FF 
0ff2c     D8 E4 05 F1 | 	add	objptr, ##6360
0ff30     F2 32 02 F1 | 	add	local07, objptr
0ff34     04 4E 85 F1 | 	sub	fp, #4
0ff38     A7 30 02 FB | 	rdlong	local06, fp
0ff3c     01 30 66 F0 | 	shl	local06, #1
0ff40     19 31 02 F1 | 	add	local06, local07
0ff44     0C 4E 05 F1 | 	add	fp, #12
0ff48     A7 12 02 FB | 	rdlong	arg01, fp
0ff4c     20 4E 85 F1 | 	sub	fp, #32
0ff50     0C 00 00 FF 
0ff54     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff58     01 14 06 F6 | 	mov	arg02, #1
0ff5c     B8 82 B1 FD | 	call	#__system___float_tointeger
0ff60     18 FB 51 FC | 	wrword	result1, local06
0ff64     20 4E 05 F1 | 	add	fp, #32
0ff68     A7 12 02 FB | 	rdlong	arg01, fp
0ff6c     04 4E 05 F1 | 	add	fp, #4
0ff70     A7 14 02 FB | 	rdlong	arg02, fp
0ff74     24 4E 85 F1 | 	sub	fp, #36
0ff78     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff7c     00 7A B1 FD | 	call	#__system___float_add
0ff80     20 4E 05 F1 | 	add	fp, #32
0ff84     A7 FA 61 FC | 	wrlong	result1, fp
0ff88     20 4E 85 F1 | 	sub	fp, #32
0ff8c     FD 12 02 F6 | 	mov	arg01, result1
0ff90     00 14 06 F6 | 	mov	arg02, #0
0ff94     01 16 06 F6 | 	mov	arg03, #1
0ff98     E8 81 B1 FD | 	call	#__system___float_cmp
0ff9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ffa0     20 4E 05 C1 |  if_b	add	fp, #32
0ffa4     A7 00 68 CC |  if_b	wrlong	#0, fp
0ffa8     20 4E 85 C1 |  if_b	sub	fp, #32
0ffac     14 4E 05 F1 | 	add	fp, #20
0ffb0     A7 32 02 FB | 	rdlong	local07, fp
0ffb4     01 32 06 F1 | 	add	local07, #1
0ffb8     A7 32 62 FC | 	wrlong	local07, fp
0ffbc     14 4E 85 F1 | 	sub	fp, #20
0ffc0     44 FF 9F FD | 	jmp	#LR__1346
0ffc4                 | LR__1347
0ffc4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0ffc4     A7 28 02 FB | 	rdlong	local02, fp
0ffc8     04 4E 05 F1 | 	add	fp, #4
0ffcc     A7 34 02 FB | 	rdlong	local08, fp
0ffd0     1A 29 02 F1 | 	add	local02, local08
0ffd4     10 4E 05 F1 | 	add	fp, #16
0ffd8     A7 28 62 FC | 	wrlong	local02, fp
0ffdc     14 4E 85 F1 | 	sub	fp, #20
0ffe0                 | LR__1348
0ffe0     14 4E 05 F1 | 	add	fp, #20
0ffe4     A7 2E 02 FB | 	rdlong	local05, fp
0ffe8     14 4E 85 F1 | 	sub	fp, #20
0ffec     00 2F 56 F2 | 	cmps	local05, #256 wc
0fff0     A8 00 90 3D |  if_ae	jmp	#LR__1349
0fff4     18 4E 05 F1 | 	add	fp, #24
0fff8     A7 34 02 FB | 	rdlong	local08, fp
0fffc     09 34 66 F0 | 	shl	local08, #9
10000     0C 00 00 FF 
10004     D8 E4 05 F1 | 	add	objptr, ##6360
10008     F2 34 02 F1 | 	add	local08, objptr
1000c     04 4E 85 F1 | 	sub	fp, #4
10010     A7 32 02 FB | 	rdlong	local07, fp
10014     01 32 66 F0 | 	shl	local07, #1
10018     1A 33 02 F1 | 	add	local07, local08
1001c     0C 4E 05 F1 | 	add	fp, #12
10020     A7 12 02 FB | 	rdlong	arg01, fp
10024     20 4E 85 F1 | 	sub	fp, #32
10028     0C 00 00 FF 
1002c     D8 E4 85 F1 | 	sub	objptr, ##6360
10030     01 14 06 F6 | 	mov	arg02, #1
10034     E0 81 B1 FD | 	call	#__system___float_tointeger
10038     19 FB 51 FC | 	wrword	result1, local07
1003c     20 4E 05 F1 | 	add	fp, #32
10040     A7 12 02 FB | 	rdlong	arg01, fp
10044     1C 4E 05 F1 | 	add	fp, #28
10048     A7 14 02 FB | 	rdlong	arg02, fp
1004c     3C 4E 85 F1 | 	sub	fp, #60
10050     1F 14 E6 F4 | 	bitnot	arg02, #31
10054     28 79 B1 FD | 	call	#__system___float_add
10058     20 4E 05 F1 | 	add	fp, #32
1005c     A7 FA 61 FC | 	wrlong	result1, fp
10060     20 4E 85 F1 | 	sub	fp, #32
10064     FD 12 02 F6 | 	mov	arg01, result1
10068     00 14 06 F6 | 	mov	arg02, #0
1006c     01 16 06 F6 | 	mov	arg03, #1
10070     10 81 B1 FD | 	call	#__system___float_cmp
10074     00 FA 55 F2 | 	cmps	result1, #0 wc
10078     20 4E 05 C1 |  if_b	add	fp, #32
1007c     A7 00 68 CC |  if_b	wrlong	#0, fp
10080     20 4E 85 C1 |  if_b	sub	fp, #32
10084     14 4E 05 F1 | 	add	fp, #20
10088     A7 34 02 FB | 	rdlong	local08, fp
1008c     01 34 06 F1 | 	add	local08, #1
10090     A7 34 62 FC | 	wrlong	local08, fp
10094     14 4E 85 F1 | 	sub	fp, #20
10098     44 FF 9F FD | 	jmp	#LR__1348
1009c                 | LR__1349
1009c     18 4E 05 F1 | 	add	fp, #24
100a0     A7 2E 02 FB | 	rdlong	local05, fp
100a4     18 4E 85 F1 | 	sub	fp, #24
100a8     09 2E 66 F0 | 	shl	local05, #9
100ac     0C 00 00 FF 
100b0     D8 E4 05 F1 | 	add	objptr, ##6360
100b4     F2 2E 02 F1 | 	add	local05, objptr
100b8     FE 2F 06 F1 | 	add	local05, #510
100bc     17 01 58 FC | 	wrword	#0, local05
100c0     0C 00 00 FF 
100c4     D8 E4 85 F1 | 	sub	objptr, ##6360
100c8                 | LR__1350
100c8     18 4E 05 F1 | 	add	fp, #24
100cc     A7 2E 02 FB | 	rdlong	local05, fp
100d0     18 4E 85 F1 | 	sub	fp, #24
100d4     09 2E 66 F0 | 	shl	local05, #9
100d8     0C 00 00 FF 
100dc     D8 E4 05 F1 | 	add	objptr, ##6360
100e0     F2 2E 02 F1 | 	add	local05, objptr
100e4     FE 2F 06 F1 | 	add	local05, #510
100e8     17 01 58 FC | 	wrword	#0, local05
100ec     0C 00 00 FF 
100f0     D8 E4 85 F1 | 	sub	objptr, ##6360
100f4                 | LR__1351
100f4     A7 F0 03 F6 | 	mov	ptra, fp
100f8     B2 00 A0 FD | 	call	#popregs_
100fc                 | _do_defenv_ret
100fc     2D 00 64 FD | 	ret
10100                 | 
10100                 | ' 
10100                 | ' '-------------------- defsnd
10100                 | ' 
10100                 | ' sub do_defsnd
10100                 | _do_defsnd
10100     04 4A 05 F6 | 	mov	COUNT_, #4
10104     A8 00 A0 FD | 	call	#pushregs_
10108     88 F0 07 F1 | 	add	ptra, #136
1010c     4A 00 00 FF 
10110     80 E4 05 F1 | 	add	objptr, ##38016
10114     F2 1A 02 FB | 	rdlong	arg05, objptr
10118     0D 19 02 F6 | 	mov	arg04, arg05
1011c     01 18 66 F0 | 	shl	arg04, #1
10120     0D 19 02 F1 | 	add	arg04, arg05
10124     02 18 66 F0 | 	shl	arg04, #2
10128     03 00 00 FF 
1012c     04 E4 85 F1 | 	sub	objptr, ##1540
10130     F2 18 02 F1 | 	add	arg04, objptr
10134     0C 1B 02 FB | 	rdlong	arg05, arg04
10138     A7 1A 62 FC | 	wrlong	arg05, fp
1013c                 | ' 
1013c                 | ' numpar=compiledline(lineptr_e).result.uresult
1013c                 | ' 
1013c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
1013c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
1013c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
1013c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
1013c                 | ' 
1013c                 | ' if numpar<2 then return
1013c     02 1A 56 F2 | 	cmps	arg05, #2 wc
10140     47 00 00 FF 
10144     7C E4 85 F1 | 	sub	objptr, ##36476
10148     98 08 90 CD |  if_b	jmp	#LR__1383
1014c                 | '  
1014c                 | ' if numpar=2 then
1014c     A7 1A 02 FB | 	rdlong	arg05, fp
10150     02 1A 0E F2 | 	cmp	arg05, #2 wz
10154     A4 03 90 5D |  if_ne	jmp	#LR__1370
10158     30 CA BF FD | 	call	#_pop
1015c     FF 1A 02 F6 | 	mov	arg05, result3
10160     2C 4E 05 F1 | 	add	fp, #44
10164     A7 FA 61 FC | 	wrlong	result1, fp
10168     04 4E 05 F1 | 	add	fp, #4
1016c     A7 FC 61 FC | 	wrlong	result2, fp
10170     04 4E 05 F1 | 	add	fp, #4
10174     A7 1A 62 FC | 	wrlong	arg05, fp
10178                 | '   t1=pop()
10178                 | '   if t1.result_type=result_string2 then 
10178     34 4E 85 F1 | 	sub	fp, #52
1017c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10180     20 00 90 5D |  if_ne	jmp	#LR__1360
10184     2C 4E 05 F1 | 	add	fp, #44
10188     A7 12 02 FB | 	rdlong	arg01, fp
1018c     2C 4E 85 F1 | 	sub	fp, #44
10190     70 CB BF FD | 	call	#_convertstring
10194     38 4E 05 F1 | 	add	fp, #56
10198     A7 FA 61 FC | 	wrlong	result1, fp
1019c     38 4E 85 F1 | 	sub	fp, #56
101a0     58 00 90 FD | 	jmp	#LR__1363
101a4                 | LR__1360
101a4     34 4E 05 F1 | 	add	fp, #52
101a8     A7 1A 02 FB | 	rdlong	arg05, fp
101ac     34 4E 85 F1 | 	sub	fp, #52
101b0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
101b4     18 00 90 5D |  if_ne	jmp	#LR__1361
101b8     2C 4E 05 F1 | 	add	fp, #44
101bc     A7 1A 02 FB | 	rdlong	arg05, fp
101c0     0C 4E 05 F1 | 	add	fp, #12
101c4     A7 1A 62 FC | 	wrlong	arg05, fp
101c8     38 4E 85 F1 | 	sub	fp, #56
101cc     2C 00 90 FD | 	jmp	#LR__1362
101d0                 | LR__1361
101d0     A9 01 00 FF 
101d4     1C 1A 06 F6 | 	mov	arg05, ##@LR__5794
101d8     38 4E 05 F1 | 	add	fp, #56
101dc     A7 1A 62 FC | 	wrlong	arg05, fp
101e0     0C 4E 85 F1 | 	sub	fp, #12
101e4     A7 12 02 F6 | 	mov	arg01, fp
101e8     2C 4E 85 F1 | 	sub	fp, #44
101ec     80 CB BF FD | 	call	#_converttoint
101f0     14 4E 05 F1 | 	add	fp, #20
101f4     A7 FA 61 FC | 	wrlong	result1, fp
101f8     14 4E 85 F1 | 	sub	fp, #20
101fc                 | LR__1362
101fc                 | LR__1363
101fc                 | '   if s<>"" then 
101fc     38 4E 05 F1 | 	add	fp, #56
10200     A7 12 02 FB | 	rdlong	arg01, fp
10204     38 4E 85 F1 | 	sub	fp, #56
10208     A9 01 00 FF 
1020c     1D 14 06 F6 | 	mov	arg02, ##@LR__5795
10210     E8 4C B1 FD | 	call	#__system___string_cmp
10214     00 FA 0D F2 | 	cmp	result1, #0 wz
10218     E4 01 90 AD |  if_e	jmp	#LR__1366
1021c     6C C9 BF FD | 	call	#_pop
10220     FF 1A 02 F6 | 	mov	arg05, result3
10224     2C 4E 05 F1 | 	add	fp, #44
10228     A7 FA 61 FC | 	wrlong	result1, fp
1022c     04 4E 05 F1 | 	add	fp, #4
10230     A7 FC 61 FC | 	wrlong	result2, fp
10234     04 4E 05 F1 | 	add	fp, #4
10238     A7 1A 62 FC | 	wrlong	arg05, fp
1023c     08 4E 85 F1 | 	sub	fp, #8
10240     A7 12 02 F6 | 	mov	arg01, fp
10244     2C 4E 85 F1 | 	sub	fp, #44
10248     24 CB BF FD | 	call	#_converttoint
1024c     10 4E 05 F1 | 	add	fp, #16
10250     A7 FA 61 FC | 	wrlong	result1, fp
10254                 | '     t1=pop()
10254                 | '     channel=converttoint(t1) : if channel>31 then return
10254     FD 1A 02 F6 | 	mov	arg05, result1
10258     10 4E 85 F1 | 	sub	fp, #16
1025c     20 1A 56 F2 | 	cmps	arg05, #32 wc
10260     80 07 90 3D |  if_ae	jmp	#LR__1383
10264                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10264     09 12 06 F6 | 	mov	arg01, #9
10268     C4 9F B1 FD | 	call	#__system__close
1026c     09 26 06 F6 | 	mov	local01, #9
10270     A9 01 00 FF 
10274     1E 12 06 F6 | 	mov	arg01, ##@LR__5796
10278     38 4E 05 F1 | 	add	fp, #56
1027c     A7 14 02 FB | 	rdlong	arg02, fp
10280     38 4E 85 F1 | 	sub	fp, #56
10284     A8 4C B1 FD | 	call	#__system___string_concat
10288     FD 14 02 F6 | 	mov	arg02, result1
1028c     13 13 02 F6 | 	mov	arg01, local01
10290     00 16 06 F6 | 	mov	arg03, #0
10294     40 58 B1 FD | 	call	#__system___basic_open_string
10298     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1029c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
102a0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
102a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
102a8     52 00 00 FF 
102ac     4C E4 05 F1 | 	add	objptr, ##42060
102b0     F2 FA 61 FC | 	wrlong	result1, objptr
102b4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
102b4     52 00 00 FF 
102b8     4C E4 85 F1 | 	sub	objptr, ##42060
102bc     B0 00 90 AD |  if_e	jmp	#LR__1364
102c0     00 12 06 F6 | 	mov	arg01, #0
102c4     B0 A8 B1 FD | 	call	#__system___getiolock_0593
102c8     FD 12 02 F6 | 	mov	arg01, result1
102cc     04 4C B1 FD | 	call	#__system___lockmem
102d0     A9 01 00 FF 
102d4     2B 14 06 F6 | 	mov	arg02, ##@LR__5797
102d8     00 12 06 F6 | 	mov	arg01, #0
102dc     00 16 06 F6 | 	mov	arg03, #0
102e0     E8 58 B1 FD | 	call	#__system___basic_print_string
102e4     52 00 00 FF 
102e8     4C E4 05 F1 | 	add	objptr, ##42060
102ec     F2 14 02 FB | 	rdlong	arg02, objptr
102f0     52 00 00 FF 
102f4     4C E4 85 F1 | 	sub	objptr, ##42060
102f8     00 12 06 F6 | 	mov	arg01, #0
102fc     00 16 06 F6 | 	mov	arg03, #0
10300     0A 18 06 F6 | 	mov	arg04, #10
10304     08 59 B1 FD | 	call	#__system___basic_print_integer
10308     A9 01 00 FF 
1030c     39 14 06 F6 | 	mov	arg02, ##@LR__5798
10310     00 12 06 F6 | 	mov	arg01, #0
10314     00 16 06 F6 | 	mov	arg03, #0
10318     B0 58 B1 FD | 	call	#__system___basic_print_string
1031c     00 26 06 F6 | 	mov	local01, #0
10320     52 00 00 FF 
10324     4C E4 05 F1 | 	add	objptr, ##42060
10328     F2 12 02 FB | 	rdlong	arg01, objptr
1032c     52 00 00 FF 
10330     4C E4 85 F1 | 	sub	objptr, ##42060
10334     2C 75 B1 FD | 	call	#__system___strerror
10338     FD 14 02 F6 | 	mov	arg02, result1
1033c     13 13 02 F6 | 	mov	arg01, local01
10340     00 16 06 F6 | 	mov	arg03, #0
10344     84 58 B1 FD | 	call	#__system___basic_print_string
10348     00 12 06 F6 | 	mov	arg01, #0
1034c     0A 14 06 F6 | 	mov	arg02, #10
10350     00 16 06 F6 | 	mov	arg03, #0
10354     1C 58 B1 FD | 	call	#__system___basic_print_char
10358     00 12 06 F6 | 	mov	arg01, #0
1035c     18 A8 B1 FD | 	call	#__system___getiolock_0593
10360     FD 00 68 FC | 	wrlong	#0, result1
10364     09 12 06 F6 | 	mov	arg01, #9
10368     C4 9E B1 FD | 	call	#__system__close
1036c     74 06 90 FD | 	jmp	#LR__1383
10370                 | LR__1364
10370                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 00 68 FC | 	wrlong	#0, fp
10378                 | LR__1365
10378     A7 26 02 FB | 	rdlong	local01, fp
1037c     01 26 66 F0 | 	shl	local01, #1
10380     11 14 06 F6 | 	mov	arg02, #17
10384     13 15 02 F1 | 	add	arg02, local01
10388     78 4E 05 F1 | 	add	fp, #120
1038c     A7 16 02 F6 | 	mov	arg03, fp
10390     7C 4E 85 F1 | 	sub	fp, #124
10394     09 12 06 F6 | 	mov	arg01, #9
10398     01 18 06 F6 | 	mov	arg04, #1
1039c     02 1A 06 F6 | 	mov	arg05, #2
103a0     A4 59 B1 FD | 	call	#__system___basic_get
103a4     10 4E 05 F1 | 	add	fp, #16
103a8     A7 12 02 FB | 	rdlong	arg01, fp
103ac     0B 12 66 F0 | 	shl	arg01, #11
103b0     0C 4E 85 F1 | 	sub	fp, #12
103b4     A7 26 02 FB | 	rdlong	local01, fp
103b8     01 26 66 F0 | 	shl	local01, #1
103bc     13 13 02 F1 | 	add	arg01, local01
103c0     78 4E 05 F1 | 	add	fp, #120
103c4     A7 14 E2 FA | 	rdword	arg02, fp
103c8     7C 4E 85 F1 | 	sub	fp, #124
103cc     0F 14 66 F7 | 	signx	arg02, #15
103d0     40 13 B1 FD | 	call	#_psdpoke
103d4     04 4E 05 F1 | 	add	fp, #4
103d8     A7 26 02 FB | 	rdlong	local01, fp
103dc     01 26 06 F1 | 	add	local01, #1
103e0     A7 26 62 FC | 	wrlong	local01, fp
103e4     02 00 00 FF 
103e8     01 26 56 F2 | 	cmps	local01, ##1025 wc
103ec     88 FF 9F CD |  if_b	jmp	#LR__1365
103f0     04 4E 85 F1 | 	sub	fp, #4
103f4                 | '     close #9
103f4     09 12 06 F6 | 	mov	arg01, #9
103f8     34 9E B1 FD | 	call	#__system__close
103fc                 | '     return
103fc     E4 05 90 FD | 	jmp	#LR__1383
10400                 | LR__1366
10400                 | '     if wptr < ($80000 - 2048) then 
10400     14 4E 05 F1 | 	add	fp, #20
10404     A7 26 02 FB | 	rdlong	local01, fp
10408     14 4E 85 F1 | 	sub	fp, #20
1040c     FC 03 00 FF 
10410     00 26 56 F2 | 	cmps	local01, ##522240 wc
10414     70 00 90 3D |  if_ae	jmp	#LR__1368
10418                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10418     04 4E 05 F1 | 	add	fp, #4
1041c     A7 00 68 FC | 	wrlong	#0, fp
10420     04 4E 85 F1 | 	sub	fp, #4
10424                 | LR__1367
10424     10 4E 05 F1 | 	add	fp, #16
10428     A7 26 02 FB | 	rdlong	local01, fp
1042c     0B 26 66 F0 | 	shl	local01, #11
10430     0C 4E 85 F1 | 	sub	fp, #12
10434     A7 1A 02 FB | 	rdlong	arg05, fp
10438     0D 19 02 F6 | 	mov	arg04, arg05
1043c     01 18 66 F0 | 	shl	arg04, #1
10440     0C 27 02 F1 | 	add	local01, arg04
10444     10 4E 05 F1 | 	add	fp, #16
10448     A7 12 02 FB | 	rdlong	arg01, fp
1044c     14 4E 85 F1 | 	sub	fp, #20
10450     01 1A 66 F0 | 	shl	arg05, #1
10454     0D 13 02 F1 | 	add	arg01, arg05
10458     09 15 E2 FA | 	rdword	arg02, arg01
1045c     13 13 02 F6 | 	mov	arg01, local01
10460     B0 12 B1 FD | 	call	#_psdpoke
10464     04 4E 05 F1 | 	add	fp, #4
10468     A7 26 02 FB | 	rdlong	local01, fp
1046c     01 26 06 F1 | 	add	local01, #1
10470     A7 26 62 FC | 	wrlong	local01, fp
10474     04 4E 85 F1 | 	sub	fp, #4
10478     02 00 00 FF 
1047c     00 26 56 F2 | 	cmps	local01, ##1024 wc
10480     A0 FF 9F CD |  if_b	jmp	#LR__1367
10484     5C 05 90 FD | 	jmp	#LR__1383
10488                 | LR__1368
10488                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10488     04 4E 05 F1 | 	add	fp, #4
1048c     A7 00 68 FC | 	wrlong	#0, fp
10490     04 4E 85 F1 | 	sub	fp, #4
10494                 | LR__1369
10494     10 4E 05 F1 | 	add	fp, #16
10498     A7 26 02 FB | 	rdlong	local01, fp
1049c     0B 26 66 F0 | 	shl	local01, #11
104a0     0C 4E 85 F1 | 	sub	fp, #12
104a4     A7 1A 02 FB | 	rdlong	arg05, fp
104a8     0D 19 02 F6 | 	mov	arg04, arg05
104ac     01 18 66 F0 | 	shl	arg04, #1
104b0     0C 27 02 F1 | 	add	local01, arg04
104b4     10 4E 05 F1 | 	add	fp, #16
104b8     A7 12 02 FB | 	rdlong	arg01, fp
104bc     14 4E 85 F1 | 	sub	fp, #20
104c0     01 1A 66 F0 | 	shl	arg05, #1
104c4     0D 13 02 F1 | 	add	arg01, arg05
104c8     88 13 B1 FD | 	call	#_psdpeek
104cc     FD 14 02 F6 | 	mov	arg02, result1
104d0     13 13 02 F6 | 	mov	arg01, local01
104d4     3C 12 B1 FD | 	call	#_psdpoke
104d8     04 4E 05 F1 | 	add	fp, #4
104dc     A7 26 02 FB | 	rdlong	local01, fp
104e0     01 26 06 F1 | 	add	local01, #1
104e4     A7 26 62 FC | 	wrlong	local01, fp
104e8     04 4E 85 F1 | 	sub	fp, #4
104ec     02 00 00 FF 
104f0     00 26 56 F2 | 	cmps	local01, ##1024 wc
104f4     9C FF 9F CD |  if_b	jmp	#LR__1369
104f8                 | '     return 
104f8     E8 04 90 FD | 	jmp	#LR__1383
104fc                 | '   return
104fc                 | LR__1370
104fc                 | ' for i=0 to 15 : harm(i)=0: next i  
104fc     04 4E 05 F1 | 	add	fp, #4
10500     A7 00 68 FC | 	wrlong	#0, fp
10504     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
10508                 | LR__1371
10508     A7 26 02 FB | 	rdlong	local01, fp
1050c     02 26 66 F0 | 	shl	local01, #2
10510     38 4E 05 F1 | 	add	fp, #56
10514     A7 26 02 F1 | 	add	local01, fp
10518     13 01 68 FC | 	wrlong	#0, local01
1051c     38 4E 85 F1 | 	sub	fp, #56
10520     A7 26 02 FB | 	rdlong	local01, fp
10524     01 26 06 F1 | 	add	local01, #1
10528     A7 26 62 FC | 	wrlong	local01, fp
1052c     10 26 56 F2 | 	cmps	local01, #16 wc
10530     D4 FF 9F CD |  if_b	jmp	#LR__1371
10534                 | LR__1372
10534     04 4E 85 F1 | 	sub	fp, #4
10538                 | ' for i=numpar to 2 step -1 
10538     A7 26 02 FB | 	rdlong	local01, fp
1053c     04 4E 05 F1 | 	add	fp, #4
10540     A7 26 62 FC | 	wrlong	local01, fp
10544     04 4E 85 F1 | 	sub	fp, #4
10548                 | LR__1373
10548     40 C6 BF FD | 	call	#_pop
1054c     2C 4E 05 F1 | 	add	fp, #44
10550     A7 FA 61 FC | 	wrlong	result1, fp
10554     04 4E 05 F1 | 	add	fp, #4
10558     A7 FC 61 FC | 	wrlong	result2, fp
1055c     04 4E 05 F1 | 	add	fp, #4
10560     A7 FE 61 FC | 	wrlong	result3, fp
10564     30 4E 85 F1 | 	sub	fp, #48
10568     A7 26 02 FB | 	rdlong	local01, fp
1056c     02 26 86 F1 | 	sub	local01, #2
10570     02 26 66 F0 | 	shl	local01, #2
10574     38 4E 05 F1 | 	add	fp, #56
10578     A7 26 02 F1 | 	add	local01, fp
1057c     10 4E 85 F1 | 	sub	fp, #16
10580     A7 12 02 F6 | 	mov	arg01, fp
10584     2C 4E 85 F1 | 	sub	fp, #44
10588     A0 C8 BF FD | 	call	#_converttofloat
1058c     13 FB 61 FC | 	wrlong	result1, local01
10590     04 4E 05 F1 | 	add	fp, #4
10594     A7 26 02 FB | 	rdlong	local01, fp
10598     01 26 86 F1 | 	sub	local01, #1
1059c     A7 26 62 FC | 	wrlong	local01, fp
105a0     04 4E 85 F1 | 	sub	fp, #4
105a4     02 26 56 F2 | 	cmps	local01, #2 wc
105a8     9C FF 9F 3D |  if_ae	jmp	#LR__1373
105ac     DC C5 BF FD | 	call	#_pop
105b0     FF 26 02 F6 | 	mov	local01, result3
105b4     2C 4E 05 F1 | 	add	fp, #44
105b8     A7 FA 61 FC | 	wrlong	result1, fp
105bc     04 4E 05 F1 | 	add	fp, #4
105c0     A7 FC 61 FC | 	wrlong	result2, fp
105c4     04 4E 05 F1 | 	add	fp, #4
105c8     A7 26 62 FC | 	wrlong	local01, fp
105cc     08 4E 85 F1 | 	sub	fp, #8
105d0     A7 12 02 F6 | 	mov	arg01, fp
105d4     2C 4E 85 F1 | 	sub	fp, #44
105d8     94 C7 BF FD | 	call	#_converttoint
105dc     10 4E 05 F1 | 	add	fp, #16
105e0     A7 FA 61 FC | 	wrlong	result1, fp
105e4                 | ' t1=pop()
105e4                 | ' channel=converttoint(t1) : : if channel>31 then return
105e4     FD 26 02 F6 | 	mov	local01, result1
105e8     10 4E 85 F1 | 	sub	fp, #16
105ec     20 26 56 F2 | 	cmps	local01, #32 wc
105f0     F0 03 90 3D |  if_ae	jmp	#LR__1383
105f4     20 4E 05 F1 | 	add	fp, #32
105f8     A7 00 68 FC | 	wrlong	#0, fp
105fc                 | ' max=0
105fc                 | ' if harm(0)<0 then
105fc     1C 4E 05 F1 | 	add	fp, #28
10600     A7 12 02 FB | 	rdlong	arg01, fp
10604     3C 4E 85 F1 | 	sub	fp, #60
10608     00 14 06 F6 | 	mov	arg02, #0
1060c     01 16 06 F6 | 	mov	arg03, #1
10610     70 7B B1 FD | 	call	#__system___float_cmp
10614     00 FA 55 F2 | 	cmps	result1, #0 wc
10618     04 01 90 3D |  if_ae	jmp	#LR__1376
1061c     3C 4E 05 F1 | 	add	fp, #60
10620     A7 FA 01 FB | 	rdlong	result1, fp
10624     1F FA 05 F4 | 	bitl	result1, #31
10628     24 4E 85 F1 | 	sub	fp, #36
1062c     A7 FA 61 FC | 	wrlong	result1, fp
10630     28 4E 05 F1 | 	add	fp, #40
10634     A7 FA 01 FB | 	rdlong	result1, fp
10638     1F FA 05 F4 | 	bitl	result1, #31
1063c     24 4E 85 F1 | 	sub	fp, #36
10640     A7 FA 61 FC | 	wrlong	result1, fp
10644     20 4E 05 F1 | 	add	fp, #32
10648     00 C0 9F FF 
1064c     A7 00 68 FC | 	wrlong	##1065353216, fp
10650     24 4E 85 F1 | 	sub	fp, #36
10654     A7 26 02 FB | 	rdlong	local01, fp
10658     28 4E 05 F1 | 	add	fp, #40
1065c     A7 26 62 FC | 	wrlong	local01, fp
10660     24 4E 85 F1 | 	sub	fp, #36
10664     A7 26 02 FB | 	rdlong	local01, fp
10668     28 4E 05 F1 | 	add	fp, #40
1066c     A7 26 62 FC | 	wrlong	local01, fp
10670                 | '   harm(0)=1
10670                 | '   harm(1)=even
10670                 | '   harm(2)=odd
10670                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10670     40 4E 85 F1 | 	sub	fp, #64
10674     A7 06 68 FC | 	wrlong	#3, fp
10678                 | LR__1374
10678     A7 1A 02 FB | 	rdlong	arg05, fp
1067c     0D 29 02 F6 | 	mov	local02, arg05
10680     02 28 66 F0 | 	shl	local02, #2
10684     38 4E 05 F1 | 	add	fp, #56
10688     A7 28 02 F1 | 	add	local02, fp
1068c     02 1A 86 F1 | 	sub	arg05, #2
10690     02 1A 66 F0 | 	shl	arg05, #2
10694     A7 1A 02 F1 | 	add	arg05, fp
10698     0D 13 02 FB | 	rdlong	arg01, arg05
1069c     24 4E 85 F1 | 	sub	fp, #36
106a0     A7 14 02 FB | 	rdlong	arg02, fp
106a4     18 4E 85 F1 | 	sub	fp, #24
106a8     A4 76 B1 FD | 	call	#__system___float_mul
106ac     14 FB 61 FC | 	wrlong	result1, local02
106b0     04 4E 05 F1 | 	add	fp, #4
106b4     A7 2A 02 FB | 	rdlong	local03, fp
106b8     02 2A 06 F1 | 	add	local03, #2
106bc     A7 2A 62 FC | 	wrlong	local03, fp
106c0     10 2A 56 F2 | 	cmps	local03, #16 wc
106c4     B0 FF 9F CD |  if_b	jmp	#LR__1374
106c8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
106c8     A7 08 68 FC | 	wrlong	#4, fp
106cc                 | LR__1375
106cc     A7 2A 02 FB | 	rdlong	local03, fp
106d0     15 29 02 F6 | 	mov	local02, local03
106d4     02 28 66 F0 | 	shl	local02, #2
106d8     38 4E 05 F1 | 	add	fp, #56
106dc     A7 28 02 F1 | 	add	local02, fp
106e0     02 2A 86 F1 | 	sub	local03, #2
106e4     02 2A 66 F0 | 	shl	local03, #2
106e8     A7 2A 02 F1 | 	add	local03, fp
106ec     15 13 02 FB | 	rdlong	arg01, local03
106f0     20 4E 85 F1 | 	sub	fp, #32
106f4     A7 14 02 FB | 	rdlong	arg02, fp
106f8     1C 4E 85 F1 | 	sub	fp, #28
106fc     50 76 B1 FD | 	call	#__system___float_mul
10700     14 FB 61 FC | 	wrlong	result1, local02
10704     04 4E 05 F1 | 	add	fp, #4
10708     A7 2A 02 FB | 	rdlong	local03, fp
1070c     02 2A 06 F1 | 	add	local03, #2
10710     A7 2A 62 FC | 	wrlong	local03, fp
10714     0F 2A 56 F2 | 	cmps	local03, #15 wc
10718     B0 FF 9F CD |  if_b	jmp	#LR__1375
1071c     04 4E 85 F1 | 	sub	fp, #4
10720                 | LR__1376
10720                 | ' if harm(0)>=0 then ' synthesize with harmonics
10720     3C 4E 05 F1 | 	add	fp, #60
10724     A7 12 02 FB | 	rdlong	arg01, fp
10728     3C 4E 85 F1 | 	sub	fp, #60
1072c     00 14 06 F6 | 	mov	arg02, #0
10730     01 16 66 F6 | 	neg	arg03, #1
10734     4C 7A B1 FD | 	call	#__system___float_cmp
10738     00 FA 55 F2 | 	cmps	result1, #0 wc
1073c     A4 02 90 CD |  if_b	jmp	#LR__1382
10740                 | '   for i=0 to 1023
10740     04 4E 05 F1 | 	add	fp, #4
10744     A7 00 68 FC | 	wrlong	#0, fp
10748     04 4E 85 F1 | 	sub	fp, #4
1074c                 | LR__1377
1074c     24 4E 05 F1 | 	add	fp, #36
10750     A7 00 68 FC | 	wrlong	#0, fp
10754                 | '     spl=0
10754                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10754     1C 4E 85 F1 | 	sub	fp, #28
10758     A7 00 68 FC | 	wrlong	#0, fp
1075c                 | LR__1378
1075c     A7 28 02 FB | 	rdlong	local02, fp
10760     02 28 66 F0 | 	shl	local02, #2
10764     34 4E 05 F1 | 	add	fp, #52
10768     A7 28 02 F1 | 	add	local02, fp
1076c     14 2B 02 FB | 	rdlong	local03, local02
10770     87 E4 1D FF 
10774     DB 29 06 F6 | 	mov	local02, ##1003032539
10778     38 4E 85 F1 | 	sub	fp, #56
1077c     A7 12 02 FB | 	rdlong	arg01, fp
10780     04 4E 85 F1 | 	sub	fp, #4
10784     09 13 52 F6 | 	abs	arg01, arg01 wc
10788     1F 2C C6 C9 |  if_b	decod	local04, #31
1078c     00 2C 06 36 |  if_ae	mov	local04, #0
10790     B8 71 B1 FD | 	call	#__system___float_fromuns
10794     16 FB 61 F5 | 	xor	result1, local04
10798     FD 14 02 F6 | 	mov	arg02, result1
1079c     14 13 02 F6 | 	mov	arg01, local02
107a0     AC 75 B1 FD | 	call	#__system___float_mul
107a4     FD 28 02 F6 | 	mov	local02, result1
107a8     08 4E 05 F1 | 	add	fp, #8
107ac     A7 12 02 FB | 	rdlong	arg01, fp
107b0     08 4E 85 F1 | 	sub	fp, #8
107b4     01 12 06 F1 | 	add	arg01, #1
107b8     09 13 52 F6 | 	abs	arg01, arg01 wc
107bc     1F 2C C6 C9 |  if_b	decod	local04, #31
107c0     00 2C 06 36 |  if_ae	mov	local04, #0
107c4     84 71 B1 FD | 	call	#__system___float_fromuns
107c8     16 FB 61 F5 | 	xor	result1, local04
107cc     FD 14 02 F6 | 	mov	arg02, result1
107d0     14 13 02 F6 | 	mov	arg01, local02
107d4     78 75 B1 FD | 	call	#__system___float_mul
107d8     FD 12 02 F6 | 	mov	arg01, result1
107dc     D0 7E B1 FD | 	call	#__system____builtin_sinf
107e0     FD 14 02 F6 | 	mov	arg02, result1
107e4     15 13 02 F6 | 	mov	arg01, local03
107e8     64 75 B1 FD | 	call	#__system___float_mul
107ec     FD 14 02 F6 | 	mov	arg02, result1
107f0     24 4E 05 F1 | 	add	fp, #36
107f4     A7 12 02 FB | 	rdlong	arg01, fp
107f8     24 4E 85 F1 | 	sub	fp, #36
107fc     80 71 B1 FD | 	call	#__system___float_add
10800     24 4E 05 F1 | 	add	fp, #36
10804     A7 FA 61 FC | 	wrlong	result1, fp
10808     1C 4E 85 F1 | 	sub	fp, #28
1080c     A7 16 02 FB | 	rdlong	arg03, fp
10810     01 16 06 F1 | 	add	arg03, #1
10814     A7 16 62 FC | 	wrlong	arg03, fp
10818     10 16 56 F2 | 	cmps	arg03, #16 wc
1081c     3C FF 9F CD |  if_b	jmp	#LR__1378
10820                 | '     if abs(spl)>max then max=abs(spl)  
10820     1C 4E 05 F1 | 	add	fp, #28
10824     A7 12 02 FB | 	rdlong	arg01, fp
10828     1F 12 06 F4 | 	bitl	arg01, #31
1082c     04 4E 85 F1 | 	sub	fp, #4
10830     A7 14 02 FB | 	rdlong	arg02, fp
10834     20 4E 85 F1 | 	sub	fp, #32
10838     01 16 66 F6 | 	neg	arg03, #1
1083c     44 79 B1 FD | 	call	#__system___float_cmp
10840     01 FA 55 F2 | 	cmps	result1, #1 wc
10844     18 00 90 CD |  if_b	jmp	#LR__1379
10848     24 4E 05 F1 | 	add	fp, #36
1084c     A7 FA 01 FB | 	rdlong	result1, fp
10850     1F FA 05 F4 | 	bitl	result1, #31
10854     04 4E 85 F1 | 	sub	fp, #4
10858     A7 FA 61 FC | 	wrlong	result1, fp
1085c     20 4E 85 F1 | 	sub	fp, #32
10860                 | LR__1379
10860     04 4E 05 F1 | 	add	fp, #4
10864     A7 2A 02 FB | 	rdlong	local03, fp
10868     01 2A 06 F1 | 	add	local03, #1
1086c     A7 2A 62 FC | 	wrlong	local03, fp
10870     04 4E 85 F1 | 	sub	fp, #4
10874     02 00 00 FF 
10878     00 2A 56 F2 | 	cmps	local03, ##1024 wc
1087c     CC FE 9F CD |  if_b	jmp	#LR__1377
10880                 | '   for i=0 to 1023
10880     04 4E 05 F1 | 	add	fp, #4
10884     A7 00 68 FC | 	wrlong	#0, fp
10888     04 4E 85 F1 | 	sub	fp, #4
1088c                 | LR__1380
1088c     24 4E 05 F1 | 	add	fp, #36
10890     A7 00 68 FC | 	wrlong	#0, fp
10894                 | '     spl=0
10894                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10894     1C 4E 85 F1 | 	sub	fp, #28
10898     A7 00 68 FC | 	wrlong	#0, fp
1089c                 | LR__1381
1089c     A7 2A 02 FB | 	rdlong	local03, fp
108a0     02 2A 66 F0 | 	shl	local03, #2
108a4     34 4E 05 F1 | 	add	fp, #52
108a8     A7 2A 02 F1 | 	add	local03, fp
108ac     15 2B 02 FB | 	rdlong	local03, local03
108b0     1C 4E 85 F1 | 	sub	fp, #28
108b4     A7 14 02 FB | 	rdlong	arg02, fp
108b8     20 4E 85 F1 | 	sub	fp, #32
108bc     58 7F 23 FF 
108c0     00 12 06 F6 | 	mov	arg01, ##1191096320
108c4     8C 76 B1 FD | 	call	#__system___float_div
108c8     FD 14 02 F6 | 	mov	arg02, result1
108cc     15 13 02 F6 | 	mov	arg01, local03
108d0     7C 74 B1 FD | 	call	#__system___float_mul
108d4     FD 2A 02 F6 | 	mov	local03, result1
108d8     87 E4 1D FF 
108dc     DB 29 06 F6 | 	mov	local02, ##1003032539
108e0     04 4E 05 F1 | 	add	fp, #4
108e4     A7 12 02 FB | 	rdlong	arg01, fp
108e8     04 4E 85 F1 | 	sub	fp, #4
108ec     09 13 52 F6 | 	abs	arg01, arg01 wc
108f0     1F 2C C6 C9 |  if_b	decod	local04, #31
108f4     00 2C 06 36 |  if_ae	mov	local04, #0
108f8     50 70 B1 FD | 	call	#__system___float_fromuns
108fc     16 FB 61 F5 | 	xor	result1, local04
10900     FD 14 02 F6 | 	mov	arg02, result1
10904     14 13 02 F6 | 	mov	arg01, local02
10908     44 74 B1 FD | 	call	#__system___float_mul
1090c     FD 28 02 F6 | 	mov	local02, result1
10910     08 4E 05 F1 | 	add	fp, #8
10914     A7 12 02 FB | 	rdlong	arg01, fp
10918     08 4E 85 F1 | 	sub	fp, #8
1091c     01 12 06 F1 | 	add	arg01, #1
10920     09 13 52 F6 | 	abs	arg01, arg01 wc
10924     1F 2C C6 C9 |  if_b	decod	local04, #31
10928     00 2C 06 36 |  if_ae	mov	local04, #0
1092c     1C 70 B1 FD | 	call	#__system___float_fromuns
10930     16 FB 61 F5 | 	xor	result1, local04
10934     FD 14 02 F6 | 	mov	arg02, result1
10938     14 13 02 F6 | 	mov	arg01, local02
1093c     10 74 B1 FD | 	call	#__system___float_mul
10940     FD 12 02 F6 | 	mov	arg01, result1
10944     68 7D B1 FD | 	call	#__system____builtin_sinf
10948     FD 14 02 F6 | 	mov	arg02, result1
1094c     15 13 02 F6 | 	mov	arg01, local03
10950     FC 73 B1 FD | 	call	#__system___float_mul
10954     FD 14 02 F6 | 	mov	arg02, result1
10958     24 4E 05 F1 | 	add	fp, #36
1095c     A7 12 02 FB | 	rdlong	arg01, fp
10960     24 4E 85 F1 | 	sub	fp, #36
10964     18 70 B1 FD | 	call	#__system___float_add
10968     24 4E 05 F1 | 	add	fp, #36
1096c     A7 FA 61 FC | 	wrlong	result1, fp
10970     1C 4E 85 F1 | 	sub	fp, #28
10974     A7 2A 02 FB | 	rdlong	local03, fp
10978     01 2A 06 F1 | 	add	local03, #1
1097c     A7 2A 62 FC | 	wrlong	local03, fp
10980     10 2A 56 F2 | 	cmps	local03, #16 wc
10984     14 FF 9F CD |  if_b	jmp	#LR__1381
10988     08 4E 05 F1 | 	add	fp, #8
1098c     A7 2A 02 FB | 	rdlong	local03, fp
10990     0B 2A 66 F0 | 	shl	local03, #11
10994     0C 4E 85 F1 | 	sub	fp, #12
10998     A7 28 02 FB | 	rdlong	local02, fp
1099c     01 28 66 F0 | 	shl	local02, #1
109a0     14 2B 02 F1 | 	add	local03, local02
109a4     20 4E 05 F1 | 	add	fp, #32
109a8     A7 12 02 FB | 	rdlong	arg01, fp
109ac     24 4E 85 F1 | 	sub	fp, #36
109b0     01 14 06 F6 | 	mov	arg02, #1
109b4     60 78 B1 FD | 	call	#__system___float_tointeger
109b8     FD 14 02 F6 | 	mov	arg02, result1
109bc     15 13 02 F6 | 	mov	arg01, local03
109c0     50 0D B1 FD | 	call	#_psdpoke
109c4     04 4E 05 F1 | 	add	fp, #4
109c8     A7 2A 02 FB | 	rdlong	local03, fp
109cc     01 2A 06 F1 | 	add	local03, #1
109d0     A7 2A 62 FC | 	wrlong	local03, fp
109d4     04 4E 85 F1 | 	sub	fp, #4
109d8     02 00 00 FF 
109dc     00 2A 56 F2 | 	cmps	local03, ##1024 wc
109e0     A8 FE 9F CD |  if_b	jmp	#LR__1380
109e4                 | LR__1382
109e4                 | LR__1383
109e4     A7 F0 03 F6 | 	mov	ptra, fp
109e8     B2 00 A0 FD | 	call	#popregs_
109ec                 | _do_defsnd_ret
109ec     2D 00 64 FD | 	ret
109f0                 | 
109f0                 | ' 
109f0                 | ' '-------------------- defsprite
109f0                 | ' 
109f0                 | ' sub do_defsprite
109f0                 | _do_defsprite
109f0     07 4A 05 F6 | 	mov	COUNT_, #7
109f4     A8 00 A0 FD | 	call	#pushregs_
109f8     60 F0 07 F1 | 	add	ptra, #96
109fc     8C C1 BF FD | 	call	#_pop
10a00     FD 16 02 F6 | 	mov	arg03, result1
10a04     FE 14 02 F6 | 	mov	arg02, result2
10a08     FF 12 02 F6 | 	mov	arg01, result3
10a0c     30 4E 05 F1 | 	add	fp, #48
10a10     A7 16 62 FC | 	wrlong	arg03, fp
10a14     04 4E 05 F1 | 	add	fp, #4
10a18     A7 14 62 FC | 	wrlong	arg02, fp
10a1c     04 4E 05 F1 | 	add	fp, #4
10a20     A7 12 62 FC | 	wrlong	arg01, fp
10a24     38 4E 85 F1 | 	sub	fp, #56
10a28     60 C1 BF FD | 	call	#_pop
10a2c     FD 16 02 F6 | 	mov	arg03, result1
10a30     FE 14 02 F6 | 	mov	arg02, result2
10a34     FF 12 02 F6 | 	mov	arg01, result3
10a38     24 4E 05 F1 | 	add	fp, #36
10a3c     A7 16 62 FC | 	wrlong	arg03, fp
10a40     04 4E 05 F1 | 	add	fp, #4
10a44     A7 14 62 FC | 	wrlong	arg02, fp
10a48     04 4E 05 F1 | 	add	fp, #4
10a4c     A7 12 62 FC | 	wrlong	arg01, fp
10a50     2C 4E 85 F1 | 	sub	fp, #44
10a54     34 C1 BF FD | 	call	#_pop
10a58     FD 16 02 F6 | 	mov	arg03, result1
10a5c     FE 14 02 F6 | 	mov	arg02, result2
10a60     FF 12 02 F6 | 	mov	arg01, result3
10a64     18 4E 05 F1 | 	add	fp, #24
10a68     A7 16 62 FC | 	wrlong	arg03, fp
10a6c     04 4E 05 F1 | 	add	fp, #4
10a70     A7 14 62 FC | 	wrlong	arg02, fp
10a74     04 4E 05 F1 | 	add	fp, #4
10a78     A7 12 62 FC | 	wrlong	arg01, fp
10a7c     20 4E 85 F1 | 	sub	fp, #32
10a80     08 C1 BF FD | 	call	#_pop
10a84     FD 16 02 F6 | 	mov	arg03, result1
10a88     FE 14 02 F6 | 	mov	arg02, result2
10a8c     FF 12 02 F6 | 	mov	arg01, result3
10a90     0C 4E 05 F1 | 	add	fp, #12
10a94     A7 16 62 FC | 	wrlong	arg03, fp
10a98     04 4E 05 F1 | 	add	fp, #4
10a9c     A7 14 62 FC | 	wrlong	arg02, fp
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 12 62 FC | 	wrlong	arg01, fp
10aa8     14 4E 85 F1 | 	sub	fp, #20
10aac     DC C0 BF FD | 	call	#_pop
10ab0     FF 16 02 F6 | 	mov	arg03, result3
10ab4     A7 FA 61 FC | 	wrlong	result1, fp
10ab8     04 4E 05 F1 | 	add	fp, #4
10abc     A7 FC 61 FC | 	wrlong	result2, fp
10ac0     04 4E 05 F1 | 	add	fp, #4
10ac4     A7 16 62 FC | 	wrlong	arg03, fp
10ac8     08 4E 85 F1 | 	sub	fp, #8
10acc     A7 12 02 F6 | 	mov	arg01, fp
10ad0     9C C2 BF FD | 	call	#_converttoint
10ad4     3C 4E 05 F1 | 	add	fp, #60
10ad8     A7 FA 61 FC | 	wrlong	result1, fp
10adc     30 4E 85 F1 | 	sub	fp, #48
10ae0     A7 12 02 F6 | 	mov	arg01, fp
10ae4     0C 4E 85 F1 | 	sub	fp, #12
10ae8     84 C2 BF FD | 	call	#_converttoint
10aec     40 4E 05 F1 | 	add	fp, #64
10af0     A7 FA 61 FC | 	wrlong	result1, fp
10af4     28 4E 85 F1 | 	sub	fp, #40
10af8     A7 12 02 F6 | 	mov	arg01, fp
10afc     18 4E 85 F1 | 	sub	fp, #24
10b00     6C C2 BF FD | 	call	#_converttoint
10b04     44 4E 05 F1 | 	add	fp, #68
10b08     A7 FA 61 FC | 	wrlong	result1, fp
10b0c     20 4E 85 F1 | 	sub	fp, #32
10b10     A7 12 02 F6 | 	mov	arg01, fp
10b14     24 4E 85 F1 | 	sub	fp, #36
10b18     54 C2 BF FD | 	call	#_converttoint
10b1c     48 4E 05 F1 | 	add	fp, #72
10b20     A7 FA 61 FC | 	wrlong	result1, fp
10b24     18 4E 85 F1 | 	sub	fp, #24
10b28     A7 12 02 F6 | 	mov	arg01, fp
10b2c     30 4E 85 F1 | 	sub	fp, #48
10b30     3C C2 BF FD | 	call	#_converttoint
10b34     4C 4E 05 F1 | 	add	fp, #76
10b38     A7 FA 61 FC | 	wrlong	result1, fp
10b3c                 | ' 
10b3c                 | ' t5=pop()
10b3c                 | ' t4=pop()
10b3c                 | ' t3=pop()
10b3c                 | ' t2=pop()
10b3c                 | ' t1=pop()
10b3c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10b3c                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10b3c     10 4E 85 F1 | 	sub	fp, #16
10b40     A7 16 02 FB | 	rdlong	arg03, fp
10b44     3C 4E 85 F1 | 	sub	fp, #60
10b48     02 16 66 F0 | 	shl	arg03, #2
10b4c     51 00 00 FF 
10b50     90 E5 05 F1 | 	add	objptr, ##41872
10b54     F2 16 02 F1 | 	add	arg03, objptr
10b58     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10b5c     51 00 00 FF 
10b60     90 E5 85 F1 | 	sub	objptr, ##41872
10b64     2C 00 90 AD |  if_e	jmp	#LR__1390
10b68     3C 4E 05 F1 | 	add	fp, #60
10b6c     A7 16 02 FB | 	rdlong	arg03, fp
10b70     3C 4E 85 F1 | 	sub	fp, #60
10b74     02 16 66 F0 | 	shl	arg03, #2
10b78     51 00 00 FF 
10b7c     90 E5 05 F1 | 	add	objptr, ##41872
10b80     F2 16 02 F1 | 	add	arg03, objptr
10b84     0B 13 02 FB | 	rdlong	arg01, arg03
10b88     51 00 00 FF 
10b8c     90 E5 85 F1 | 	sub	objptr, ##41872
10b90     20 86 B1 FD | 	call	#__system___gc_free
10b94                 | LR__1390
10b94     3C 4E 05 F1 | 	add	fp, #60
10b98     A7 26 02 FB | 	rdlong	local01, fp
10b9c     0C 4E 05 F1 | 	add	fp, #12
10ba0     A7 16 02 FB | 	rdlong	arg03, fp
10ba4     04 4E 05 F1 | 	add	fp, #4
10ba8     A7 14 02 FB | 	rdlong	arg02, fp
10bac     0A 17 02 FD | 	qmul	arg03, arg02
10bb0     02 26 66 F0 | 	shl	local01, #2
10bb4     51 00 00 FF 
10bb8     90 E5 05 F1 | 	add	objptr, ##41872
10bbc     F2 26 02 F1 | 	add	local01, objptr
10bc0     4C 4E 85 F1 | 	sub	fp, #76
10bc4     51 00 00 FF 
10bc8     90 E5 85 F1 | 	sub	objptr, ##41872
10bcc     18 12 62 FD | 	getqx	arg01
10bd0     A4 84 B1 FD | 	call	#__system___gc_alloc_managed
10bd4     13 FB 61 FC | 	wrlong	result1, local01
10bd8                 | ' for y=a3 to a3+a5-1
10bd8     44 4E 05 F1 | 	add	fp, #68
10bdc     A7 28 02 FB | 	rdlong	local02, fp
10be0     0C 4E 05 F1 | 	add	fp, #12
10be4     A7 28 62 FC | 	wrlong	local02, fp
10be8     0C 4E 85 F1 | 	sub	fp, #12
10bec     A7 2A 02 FB | 	rdlong	local03, fp
10bf0     08 4E 05 F1 | 	add	fp, #8
10bf4     A7 2C 02 FB | 	rdlong	local04, fp
10bf8     4C 4E 85 F1 | 	sub	fp, #76
10bfc     16 2B 02 F1 | 	add	local03, local04
10c00                 | LR__1391
10c00     50 4E 05 F1 | 	add	fp, #80
10c04     A7 28 02 FB | 	rdlong	local02, fp
10c08     50 4E 85 F1 | 	sub	fp, #80
10c0c     15 29 52 F2 | 	cmps	local02, local03 wc
10c10     F4 00 90 3D |  if_ae	jmp	#LR__1394
10c14                 | '   for x=a2 to a4+a2-1
10c14     40 4E 05 F1 | 	add	fp, #64
10c18     A7 26 02 FB | 	rdlong	local01, fp
10c1c     14 4E 05 F1 | 	add	fp, #20
10c20     A7 26 62 FC | 	wrlong	local01, fp
10c24     0C 4E 85 F1 | 	sub	fp, #12
10c28     A7 2E 02 FB | 	rdlong	local05, fp
10c2c     08 4E 85 F1 | 	sub	fp, #8
10c30     A7 30 02 FB | 	rdlong	local06, fp
10c34     40 4E 85 F1 | 	sub	fp, #64
10c38     18 2F 02 F1 | 	add	local05, local06
10c3c                 | LR__1392
10c3c     54 4E 05 F1 | 	add	fp, #84
10c40     A7 26 02 FB | 	rdlong	local01, fp
10c44     54 4E 85 F1 | 	sub	fp, #84
10c48     17 27 52 F2 | 	cmps	local01, local05 wc
10c4c     A0 00 90 3D |  if_ae	jmp	#LR__1393
10c50     3C 4E 05 F1 | 	add	fp, #60
10c54     A7 30 02 FB | 	rdlong	local06, fp
10c58     18 4E 05 F1 | 	add	fp, #24
10c5c     A7 2C 02 FB | 	rdlong	local04, fp
10c60     14 4E 85 F1 | 	sub	fp, #20
10c64     A7 28 02 FB | 	rdlong	local02, fp
10c68     10 4E 05 F1 | 	add	fp, #16
10c6c     A7 26 02 FB | 	rdlong	local01, fp
10c70     13 17 02 F6 | 	mov	arg03, local01
10c74     0C 4E 85 F1 | 	sub	fp, #12
10c78     A7 14 02 FB | 	rdlong	arg02, fp
10c7c     0A 17 82 F1 | 	sub	arg03, arg02
10c80     04 4E 05 F1 | 	add	fp, #4
10c84     A7 14 02 FB | 	rdlong	arg02, fp
10c88     0A 17 02 FD | 	qmul	arg03, arg02
10c8c     02 30 66 F0 | 	shl	local06, #2
10c90     51 00 00 FF 
10c94     90 E5 05 F1 | 	add	objptr, ##41872
10c98     F2 30 02 F1 | 	add	local06, objptr
10c9c     18 31 02 FB | 	rdlong	local06, local06
10ca0     16 33 02 F6 | 	mov	local07, local04
10ca4     14 33 82 F1 | 	sub	local07, local02
10ca8     51 00 00 FF 
10cac     90 E5 85 F1 | 	sub	objptr, ##41872
10cb0     F2 12 02 FB | 	rdlong	arg01, objptr
10cb4     16 13 02 F1 | 	add	arg01, local04
10cb8     48 4E 85 F1 | 	sub	fp, #72
10cbc     0A 26 66 F0 | 	shl	local01, #10
10cc0     13 13 02 F1 | 	add	arg01, local01
10cc4     18 2C 62 FD | 	getqx	local04
10cc8     16 33 02 F1 | 	add	local07, local04
10ccc     18 33 02 F1 | 	add	local07, local06
10cd0     D0 0A B1 FD | 	call	#_pspeek
10cd4     19 FB 41 FC | 	wrbyte	result1, local07
10cd8     54 4E 05 F1 | 	add	fp, #84
10cdc     A7 32 02 FB | 	rdlong	local07, fp
10ce0     01 32 06 F1 | 	add	local07, #1
10ce4     A7 32 62 FC | 	wrlong	local07, fp
10ce8     54 4E 85 F1 | 	sub	fp, #84
10cec     4C FF 9F FD | 	jmp	#LR__1392
10cf0                 | LR__1393
10cf0     50 4E 05 F1 | 	add	fp, #80
10cf4     A7 32 02 FB | 	rdlong	local07, fp
10cf8     01 32 06 F1 | 	add	local07, #1
10cfc     A7 32 62 FC | 	wrlong	local07, fp
10d00     50 4E 85 F1 | 	sub	fp, #80
10d04     F8 FE 9F FD | 	jmp	#LR__1391
10d08                 | LR__1394
10d08     3C 4E 05 F1 | 	add	fp, #60
10d0c     A7 32 02 FB | 	rdlong	local07, fp
10d10     19 13 02 F6 | 	mov	arg01, local07
10d14     3C 4E 85 F1 | 	sub	fp, #60
10d18     02 32 66 F0 | 	shl	local07, #2
10d1c     51 00 00 FF 
10d20     90 E5 05 F1 | 	add	objptr, ##41872
10d24     F2 32 02 F1 | 	add	local07, objptr
10d28     19 15 02 FB | 	rdlong	arg02, local07
10d2c     51 00 00 FF 
10d30     90 E5 85 F1 | 	sub	objptr, ##41872
10d34     B0 17 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10d38     3C 4E 05 F1 | 	add	fp, #60
10d3c     A7 12 02 FB | 	rdlong	arg01, fp
10d40     0C 4E 05 F1 | 	add	fp, #12
10d44     A7 14 02 FB | 	rdlong	arg02, fp
10d48     04 4E 05 F1 | 	add	fp, #4
10d4c     A7 16 02 FB | 	rdlong	arg03, fp
10d50     4C 4E 85 F1 | 	sub	fp, #76
10d54     20 18 B1 FD | 	call	#_hg010b_spin2_setspritesize
10d58     A7 F0 03 F6 | 	mov	ptra, fp
10d5c     B2 00 A0 FD | 	call	#popregs_
10d60                 | _do_defsprite_ret
10d60     2D 00 64 FD | 	ret
10d64                 | 
10d64                 | ' 
10d64                 | ' '-------------------- deg
10d64                 | ' 
10d64                 | ' sub do_deg
10d64                 | _do_deg
10d64     51 00 00 FF 
10d68     E4 E5 05 F1 | 	add	objptr, ##41956
10d6c     7D 47 9E FF 
10d70     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10d74     04 E4 05 F1 | 	add	objptr, #4
10d78     97 32 A1 FF 
10d7c     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10d80     51 00 00 FF 
10d84     E8 E5 85 F1 | 	sub	objptr, ##41960
10d88                 | _do_deg_ret
10d88     2D 00 64 FD | 	ret
10d8c                 | 
10d8c                 | ' 
10d8c                 | ' '-------------------- delete
10d8c                 | ' 
10d8c                 | ' sub do_delete
10d8c                 | _do_delete
10d8c     05 4A 05 F6 | 	mov	COUNT_, #5
10d90     A8 00 A0 FD | 	call	#pushregs_
10d94     F4 BD BF FD | 	call	#_pop
10d98     FE 18 02 F6 | 	mov	arg04, result2
10d9c     FF 16 02 F6 | 	mov	arg03, result3
10da0     FD 26 02 F6 | 	mov	local01, result1
10da4     0C 29 02 F6 | 	mov	local02, arg04
10da8     0B 2B 02 F6 | 	mov	local03, arg03
10dac                 | ' 
10dac                 | ' t1=pop()
10dac                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10dac     2B 2A 0E F2 | 	cmp	local03, #43 wz
10db0     10 00 90 5D |  if_ne	jmp	#LR__1400
10db4     13 13 02 F6 | 	mov	arg01, local01
10db8     48 BF BF FD | 	call	#_convertstring
10dbc     FD 26 02 F6 | 	mov	local01, result1
10dc0     1F 2A 06 F6 | 	mov	local03, #31
10dc4                 | LR__1400
10dc4                 | ' if t1.result_type<>result_string then printerror(15): return
10dc4     1F 2A 0E F2 | 	cmp	local03, #31 wz
10dc8     10 00 90 AD |  if_e	jmp	#LR__1401
10dcc     0F 12 06 F6 | 	mov	arg01, #15
10dd0     00 14 06 F6 | 	mov	arg02, #0
10dd4     54 07 B1 FD | 	call	#_printerror
10dd8     E4 00 90 FD | 	jmp	#LR__1405
10ddc                 | LR__1401
10ddc                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10ddc     4A 00 00 FF 
10de0     94 E4 05 F1 | 	add	objptr, ##38036
10de4     F2 12 02 FB | 	rdlong	arg01, objptr
10de8     4A 00 00 FF 
10dec     94 E4 85 F1 | 	sub	objptr, ##38036
10df0     A9 01 00 FF 
10df4     3C 14 06 F6 | 	mov	arg02, ##@LR__5799
10df8     00 41 B1 FD | 	call	#__system___string_cmp
10dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
10e00     34 00 90 AD |  if_e	jmp	#LR__1402
10e04     4A 00 00 FF 
10e08     94 E4 05 F1 | 	add	objptr, ##38036
10e0c     F2 12 02 FB | 	rdlong	arg01, objptr
10e10     4A 00 00 FF 
10e14     94 E4 85 F1 | 	sub	objptr, ##38036
10e18     A9 01 00 FF 
10e1c     3E 14 06 F6 | 	mov	arg02, ##@LR__5800
10e20     0C 41 B1 FD | 	call	#__system___string_concat
10e24     FD 12 02 F6 | 	mov	arg01, result1
10e28     13 15 02 F6 | 	mov	arg02, local01
10e2c     00 41 B1 FD | 	call	#__system___string_concat
10e30     FD 2C 02 F6 | 	mov	local04, result1
10e34     14 00 90 FD | 	jmp	#LR__1403
10e38                 | LR__1402
10e38     A9 01 00 FF 
10e3c     40 12 06 F6 | 	mov	arg01, ##@LR__5801
10e40     13 15 02 F6 | 	mov	arg02, local01
10e44     E8 40 B1 FD | 	call	#__system___string_concat
10e48     FD 2C 02 F6 | 	mov	local04, result1
10e4c                 | LR__1403
10e4c     16 13 02 F6 | 	mov	arg01, local04
10e50     50 68 B1 FD | 	call	#__system___remove
10e54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10e58     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10e5c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10e60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10e64     FD 2E 0A F6 | 	mov	local05, result1 wz
10e68                 | ' kill filename$
10e68                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10e68     54 00 90 AD |  if_e	jmp	#LR__1404
10e6c     00 12 06 F6 | 	mov	arg01, #0
10e70     04 9D B1 FD | 	call	#__system___getiolock_0593
10e74     FD 12 02 F6 | 	mov	arg01, result1
10e78     58 40 B1 FD | 	call	#__system___lockmem
10e7c     A9 01 00 FF 
10e80     42 14 06 F6 | 	mov	arg02, ##@LR__5802
10e84     00 12 06 F6 | 	mov	arg01, #0
10e88     00 16 06 F6 | 	mov	arg03, #0
10e8c     3C 4D B1 FD | 	call	#__system___basic_print_string
10e90     00 12 06 F6 | 	mov	arg01, #0
10e94     17 15 02 F6 | 	mov	arg02, local05
10e98     00 16 06 F6 | 	mov	arg03, #0
10e9c     0A 18 06 F6 | 	mov	arg04, #10
10ea0     6C 4D B1 FD | 	call	#__system___basic_print_integer
10ea4     00 12 06 F6 | 	mov	arg01, #0
10ea8     0A 14 06 F6 | 	mov	arg02, #10
10eac     00 16 06 F6 | 	mov	arg03, #0
10eb0     C0 4C B1 FD | 	call	#__system___basic_print_char
10eb4     00 12 06 F6 | 	mov	arg01, #0
10eb8     BC 9C B1 FD | 	call	#__system___getiolock_0593
10ebc     FD 00 68 FC | 	wrlong	#0, result1
10ec0                 | LR__1404
10ec0                 | LR__1405
10ec0     A7 F0 03 F6 | 	mov	ptra, fp
10ec4     B2 00 A0 FD | 	call	#popregs_
10ec8                 | _do_delete_ret
10ec8     2D 00 64 FD | 	ret
10ecc                 | 
10ecc                 | ' 
10ecc                 | ' '-------------------- dir
10ecc                 | ' 
10ecc                 | ' sub do_dir
10ecc                 | _do_dir
10ecc     13 4A 05 F6 | 	mov	COUNT_, #19
10ed0     A8 00 A0 FD | 	call	#pushregs_
10ed4     01 00 00 FF 
10ed8     38 F0 07 F1 | 	add	ptra, ##568
10edc                 | ' 
10edc                 | ' print "Current directory: "; currentdir$ 
10edc     00 12 06 F6 | 	mov	arg01, #0
10ee0     94 9C B1 FD | 	call	#__system___getiolock_0593
10ee4     FD 12 02 F6 | 	mov	arg01, result1
10ee8     E8 3F B1 FD | 	call	#__system___lockmem
10eec     A9 01 00 FF 
10ef0     7A 14 06 F6 | 	mov	arg02, ##@LR__5803
10ef4     00 12 06 F6 | 	mov	arg01, #0
10ef8     00 16 06 F6 | 	mov	arg03, #0
10efc     CC 4C B1 FD | 	call	#__system___basic_print_string
10f00     4A 00 00 FF 
10f04     94 E4 05 F1 | 	add	objptr, ##38036
10f08     F2 14 02 FB | 	rdlong	arg02, objptr
10f0c     4A 00 00 FF 
10f10     94 E4 85 F1 | 	sub	objptr, ##38036
10f14     00 12 06 F6 | 	mov	arg01, #0
10f18     00 16 06 F6 | 	mov	arg03, #0
10f1c     AC 4C B1 FD | 	call	#__system___basic_print_string
10f20     00 12 06 F6 | 	mov	arg01, #0
10f24     0A 14 06 F6 | 	mov	arg02, #10
10f28     00 16 06 F6 | 	mov	arg03, #0
10f2c     44 4C B1 FD | 	call	#__system___basic_print_char
10f30     01 26 06 F6 | 	mov	local01, #1
10f34     00 12 06 F6 | 	mov	arg01, #0
10f38     3C 9C B1 FD | 	call	#__system___getiolock_0593
10f3c     FD 00 68 FC | 	wrlong	#0, result1
10f40     00 28 06 F6 | 	mov	local02, #0
10f44     00 2A 06 F6 | 	mov	local03, #0
10f48                 | ' px=0
10f48                 | ' for i=0 to 127: filelist(i)="" : next i
10f48     00 2C 06 F6 | 	mov	local04, #0
10f4c     1C 4E 05 F1 | 	add	fp, #28
10f50     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
10f54                 | LR__1410
10f54     16 2F 02 F6 | 	mov	local05, local04
10f58     02 2E 66 F0 | 	shl	local05, #2
10f5c     A7 2E 02 F1 | 	add	local05, fp
10f60     A9 01 00 FF 
10f64     8E 30 06 F6 | 	mov	local06, ##@LR__5804
10f68     17 31 62 FC | 	wrlong	local06, local05
10f6c     01 2C 06 F1 | 	add	local04, #1
10f70     80 2C 56 F2 | 	cmps	local04, #128 wc
10f74     DC FF 9F CD |  if_b	jmp	#LR__1410
10f78                 | LR__1411
10f78     1C 4E 85 F1 | 	sub	fp, #28
10f7c     A9 01 00 FF 
10f80     8F 12 06 F6 | 	mov	arg01, ##@LR__5805
10f84     10 14 06 F6 | 	mov	arg02, #16
10f88     AC 9D B1 FD | 	call	#__system___basic_dir
10f8c     FD 32 02 F6 | 	mov	local07, result1
10f90     00 34 06 F6 | 	mov	local08, #0
10f94                 | ' filename=dir$("*", fbDirectory)
10f94                 | ' n=0
10f94                 | ' while filename <> "" andalso filename <> nil andalso n<128
10f94                 | LR__1412
10f94     A9 01 00 FF 
10f98     91 36 06 F6 | 	mov	local09, ##@LR__5806
10f9c     19 13 02 F6 | 	mov	arg01, local07
10fa0     1B 15 02 F6 | 	mov	arg02, local09
10fa4     54 3F B1 FD | 	call	#__system___string_cmp
10fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
10fac     68 00 90 AD |  if_e	jmp	#LR__1413
10fb0     00 36 06 F6 | 	mov	local09, #0
10fb4     19 13 02 F6 | 	mov	arg01, local07
10fb8     00 14 06 F6 | 	mov	arg02, #0
10fbc     3C 3F B1 FD | 	call	#__system___string_cmp
10fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
10fc4     50 00 90 AD |  if_e	jmp	#LR__1413
10fc8     80 34 56 F2 | 	cmps	local08, #128 wc
10fcc     48 00 90 3D |  if_ae	jmp	#LR__1413
10fd0     A9 01 00 FF 
10fd4     92 12 06 F6 | 	mov	arg01, ##@LR__5807
10fd8     19 15 02 F6 | 	mov	arg02, local07
10fdc     50 3F B1 FD | 	call	#__system___string_concat
10fe0     FD 32 02 F6 | 	mov	local07, result1
10fe4     1A 2F 02 F6 | 	mov	local05, local08
10fe8     02 2E 66 F0 | 	shl	local05, #2
10fec     1C 4E 05 F1 | 	add	fp, #28
10ff0     A7 2E 02 F1 | 	add	local05, fp
10ff4     17 33 62 FC | 	wrlong	local07, local05
10ff8     01 34 06 F1 | 	add	local08, #1
10ffc     00 2E 06 F6 | 	mov	local05, #0
11000     00 12 06 F6 | 	mov	arg01, #0
11004     00 14 06 F6 | 	mov	arg02, #0
11008     1C 4E 85 F1 | 	sub	fp, #28
1100c     28 9D B1 FD | 	call	#__system___basic_dir
11010     FD 32 02 F6 | 	mov	local07, result1
11014     7C FF 9F FD | 	jmp	#LR__1412
11018                 | LR__1413
11018                 | ' for i=0 to n-1			' now sort this
11018     00 2C 06 F6 | 	mov	local04, #0
1101c     1A 39 02 F6 | 	mov	local10, local08
11020                 | LR__1414
11020     1C 2D 52 F2 | 	cmps	local04, local10 wc
11024     DC 00 90 3D |  if_ae	jmp	#LR__1418
11028     00 3A 06 F6 | 	mov	local11, #0
1102c                 | '   swapped=false
1102c                 | '   for j=0 to n-i-2
1102c     00 3C 06 F6 | 	mov	local12, #0
11030     1A 3F 02 F6 | 	mov	local13, local08
11034     16 3F 82 F1 | 	sub	local13, local04
11038     01 3E 86 F1 | 	sub	local13, #1
1103c                 | LR__1415
1103c     1F 3D 52 F2 | 	cmps	local12, local13 wc
11040     B0 00 90 3D |  if_ae	jmp	#LR__1417
11044                 | '     if filelist(j) > filelist(j+1) then
11044     1E 37 02 F6 | 	mov	local09, local12
11048     02 36 66 F0 | 	shl	local09, #2
1104c     1C 4E 05 F1 | 	add	fp, #28
11050     A7 36 02 F1 | 	add	local09, fp
11054     1B 13 02 FB | 	rdlong	arg01, local09
11058     1E 37 02 F6 | 	mov	local09, local12
1105c     01 36 06 F1 | 	add	local09, #1
11060     1B 31 02 F6 | 	mov	local06, local09
11064     02 30 66 F0 | 	shl	local06, #2
11068     A7 26 02 F6 | 	mov	local01, fp
1106c     A7 30 02 F1 | 	add	local06, fp
11070     18 2F 02 FB | 	rdlong	local05, local06
11074     17 15 02 F6 | 	mov	arg02, local05
11078     1C 4E 85 F1 | 	sub	fp, #28
1107c     7C 3E B1 FD | 	call	#__system___string_cmp
11080     01 FA 55 F2 | 	cmps	result1, #1 wc
11084     64 00 90 CD |  if_b	jmp	#LR__1416
11088     1E 37 02 F6 | 	mov	local09, local12
1108c     01 36 06 F1 | 	add	local09, #1
11090     02 36 66 F0 | 	shl	local09, #2
11094     1C 4E 05 F1 | 	add	fp, #28
11098     A7 36 02 F1 | 	add	local09, fp
1109c     1B 3B 02 FB | 	rdlong	local11, local09
110a0     1E 31 02 F6 | 	mov	local06, local12
110a4     02 30 66 F0 | 	shl	local06, #2
110a8     A7 30 02 F1 | 	add	local06, fp
110ac     18 2F 02 FB | 	rdlong	local05, local06
110b0     1E 37 02 F6 | 	mov	local09, local12
110b4     1B 31 02 F6 | 	mov	local06, local09
110b8     02 30 66 F0 | 	shl	local06, #2
110bc     A7 26 02 F6 | 	mov	local01, fp
110c0     A7 30 02 F1 | 	add	local06, fp
110c4     18 3B 62 FC | 	wrlong	local11, local06
110c8     1E 29 02 F6 | 	mov	local02, local12
110cc     01 28 06 F1 | 	add	local02, #1
110d0     14 41 02 F6 | 	mov	local14, local02
110d4     02 40 66 F0 | 	shl	local14, #2
110d8     A7 42 02 F6 | 	mov	local15, fp
110dc     A7 40 02 F1 | 	add	local14, fp
110e0     20 2F 62 FC | 	wrlong	local05, local14
110e4     01 3A 66 F6 | 	neg	local11, #1
110e8     1C 4E 85 F1 | 	sub	fp, #28
110ec                 | LR__1416
110ec     01 3C 06 F1 | 	add	local12, #1
110f0     48 FF 9F FD | 	jmp	#LR__1415
110f4                 | LR__1417
110f4                 | ' if not swapped then exit for
110f4     1D 45 22 F6 | 	not	local16, local11
110f8     00 44 0E F2 | 	cmp	local16, #0 wz
110fc     01 2C 06 A1 |  if_e	add	local04, #1
11100     1C FF 9F AD |  if_e	jmp	#LR__1414
11104                 | LR__1418
11104                 | ' for i=0 to n-1
11104     00 2C 06 F6 | 	mov	local04, #0
11108     1A 47 02 F6 | 	mov	local17, local08
1110c                 | LR__1419
1110c     23 2D 52 F2 | 	cmps	local04, local17 wc
11110     94 00 90 3D |  if_ae	jmp	#LR__1421
11114                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11114     00 12 06 F6 | 	mov	arg01, #0
11118     5C 9A B1 FD | 	call	#__system___getiolock_0593
1111c     FD 12 02 F6 | 	mov	arg01, result1
11120     B0 3D B1 FD | 	call	#__system___lockmem
11124     16 29 02 F6 | 	mov	local02, local04
11128     02 28 66 F0 | 	shl	local02, #2
1112c     1C 4E 05 F1 | 	add	fp, #28
11130     A7 40 02 F6 | 	mov	local14, fp
11134     A7 28 02 F1 | 	add	local02, fp
11138     14 15 02 FB | 	rdlong	arg02, local02
1113c     00 26 06 F6 | 	mov	local01, #0
11140     00 12 06 F6 | 	mov	arg01, #0
11144     00 16 06 F6 | 	mov	arg03, #0
11148     1C 4E 85 F1 | 	sub	fp, #28
1114c     7C 4A B1 FD | 	call	#__system___basic_print_string
11150     00 12 06 F6 | 	mov	arg01, #0
11154     20 9A B1 FD | 	call	#__system___getiolock_0593
11158     FD 00 68 FC | 	wrlong	#0, result1
1115c     40 2A 06 F1 | 	add	local03, #64
11160     15 13 02 F6 | 	mov	arg01, local03
11164     5C 20 B1 FD | 	call	#_hg010b_spin2_setcursorx
11168     00 2B 56 F2 | 	cmps	local03, #256 wc
1116c     30 00 90 CD |  if_b	jmp	#LR__1420
11170     00 2A 06 F6 | 	mov	local03, #0
11174     00 12 06 F6 | 	mov	arg01, #0
11178     FC 99 B1 FD | 	call	#__system___getiolock_0593
1117c     FD 12 02 F6 | 	mov	arg01, result1
11180     50 3D B1 FD | 	call	#__system___lockmem
11184     00 12 06 F6 | 	mov	arg01, #0
11188     0A 14 06 F6 | 	mov	arg02, #10
1118c     00 16 06 F6 | 	mov	arg03, #0
11190     E0 49 B1 FD | 	call	#__system___basic_print_char
11194     00 12 06 F6 | 	mov	arg01, #0
11198     DC 99 B1 FD | 	call	#__system___getiolock_0593
1119c     FD 00 68 FC | 	wrlong	#0, result1
111a0                 | LR__1420
111a0     01 2C 06 F1 | 	add	local04, #1
111a4     64 FF 9F FD | 	jmp	#LR__1419
111a8                 | LR__1421
111a8                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
111a8     80 34 56 F2 | 	cmps	local08, #128 wc
111ac     44 00 90 CD |  if_b	jmp	#LR__1422
111b0     00 12 06 F6 | 	mov	arg01, #0
111b4     C0 99 B1 FD | 	call	#__system___getiolock_0593
111b8     FD 12 02 F6 | 	mov	arg01, result1
111bc     14 3D B1 FD | 	call	#__system___lockmem
111c0     A9 01 00 FF 
111c4     99 14 06 F6 | 	mov	arg02, ##@LR__5808
111c8     00 12 06 F6 | 	mov	arg01, #0
111cc     00 16 06 F6 | 	mov	arg03, #0
111d0     F8 49 B1 FD | 	call	#__system___basic_print_string
111d4     00 12 06 F6 | 	mov	arg01, #0
111d8     0A 14 06 F6 | 	mov	arg02, #10
111dc     00 16 06 F6 | 	mov	arg03, #0
111e0     90 49 B1 FD | 	call	#__system___basic_print_char
111e4     00 12 06 F6 | 	mov	arg01, #0
111e8     8C 99 B1 FD | 	call	#__system___getiolock_0593
111ec     FD 00 68 FC | 	wrlong	#0, result1
111f0     00 26 06 F6 | 	mov	local01, #0
111f4                 | LR__1422
111f4                 | ' print
111f4     00 12 06 F6 | 	mov	arg01, #0
111f8     7C 99 B1 FD | 	call	#__system___getiolock_0593
111fc     FD 12 02 F6 | 	mov	arg01, result1
11200     D0 3C B1 FD | 	call	#__system___lockmem
11204     00 12 06 F6 | 	mov	arg01, #0
11208     0A 14 06 F6 | 	mov	arg02, #10
1120c     00 16 06 F6 | 	mov	arg03, #0
11210     60 49 B1 FD | 	call	#__system___basic_print_char
11214     00 12 06 F6 | 	mov	arg01, #0
11218     5C 99 B1 FD | 	call	#__system___getiolock_0593
1121c     FD 00 68 FC | 	wrlong	#0, result1
11220     00 30 06 F6 | 	mov	local06, #0
11224     00 34 06 F6 | 	mov	local08, #0
11228     00 2A 06 F6 | 	mov	local03, #0
1122c                 | ' return cursor_y
1122c     3E E4 05 F1 | 	add	objptr, #62
11230     F2 48 C2 FA | 	rdbyte	local18, objptr
11234     3E E4 85 F1 | 	sub	objptr, #62
11238     A9 01 00 FF 
1123c     CB 12 06 F6 | 	mov	arg01, ##@LR__5809
11240     21 14 06 F6 | 	mov	arg02, #33
11244     F0 9A B1 FD | 	call	#__system___basic_dir
11248     FD 32 02 F6 | 	mov	local07, result1
1124c                 | ' n=0
1124c                 | ' px=0: py=v.getcursory()
1124c                 | ' filename = dir$("*", fbNormal )   
1124c                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1124c                 | LR__1423
1124c     A9 01 00 FF 
11250     CD 36 06 F6 | 	mov	local09, ##@LR__5810
11254     19 13 02 F6 | 	mov	arg01, local07
11258     1B 15 02 F6 | 	mov	arg02, local09
1125c     9C 3C B1 FD | 	call	#__system___string_cmp
11260     00 FA 0D F2 | 	cmp	result1, #0 wz
11264     54 00 90 AD |  if_e	jmp	#LR__1424
11268     00 36 06 F6 | 	mov	local09, #0
1126c     19 13 02 F6 | 	mov	arg01, local07
11270     00 14 06 F6 | 	mov	arg02, #0
11274     84 3C B1 FD | 	call	#__system___string_cmp
11278     00 FA 0D F2 | 	cmp	result1, #0 wz
1127c     3C 00 90 AD |  if_e	jmp	#LR__1424
11280     80 34 56 F2 | 	cmps	local08, #128 wc
11284     34 00 90 3D |  if_ae	jmp	#LR__1424
11288     1A 2F 02 F6 | 	mov	local05, local08
1128c     02 2E 66 F0 | 	shl	local05, #2
11290     1C 4E 05 F1 | 	add	fp, #28
11294     A7 2E 02 F1 | 	add	local05, fp
11298     17 33 62 FC | 	wrlong	local07, local05
1129c     01 34 06 F1 | 	add	local08, #1
112a0     00 2E 06 F6 | 	mov	local05, #0
112a4     00 12 06 F6 | 	mov	arg01, #0
112a8     00 14 06 F6 | 	mov	arg02, #0
112ac     1C 4E 85 F1 | 	sub	fp, #28
112b0     84 9A B1 FD | 	call	#__system___basic_dir
112b4     FD 32 02 F6 | 	mov	local07, result1
112b8     90 FF 9F FD | 	jmp	#LR__1423
112bc                 | LR__1424
112bc                 | ' for i =0 to n-1
112bc     00 2C 06 F6 | 	mov	local04, #0
112c0                 | LR__1425
112c0     1A 2D 52 F2 | 	cmps	local04, local08 wc
112c4     D8 00 90 3D |  if_ae	jmp	#LR__1429
112c8     00 3A 06 F6 | 	mov	local11, #0
112cc                 | '   swapped=false
112cc                 | '   for j=0 to n-i-2
112cc     00 3C 06 F6 | 	mov	local12, #0
112d0     1A 4B 02 F6 | 	mov	local19, local08
112d4     16 4B 82 F1 | 	sub	local19, local04
112d8     01 4A 86 F1 | 	sub	local19, #1
112dc                 | LR__1426
112dc     25 3D 52 F2 | 	cmps	local12, local19 wc
112e0     AC 00 90 3D |  if_ae	jmp	#LR__1428
112e4                 | '     if filelist(j) > filelist(j+1) then
112e4     1E 37 02 F6 | 	mov	local09, local12
112e8     02 36 66 F0 | 	shl	local09, #2
112ec     1C 4E 05 F1 | 	add	fp, #28
112f0     A7 36 02 F1 | 	add	local09, fp
112f4     1B 13 02 FB | 	rdlong	arg01, local09
112f8     1E 37 02 F6 | 	mov	local09, local12
112fc     01 36 06 F1 | 	add	local09, #1
11300     1B 31 02 F6 | 	mov	local06, local09
11304     02 30 66 F0 | 	shl	local06, #2
11308     A7 26 02 F6 | 	mov	local01, fp
1130c     A7 30 02 F1 | 	add	local06, fp
11310     18 2F 02 FB | 	rdlong	local05, local06
11314     17 15 02 F6 | 	mov	arg02, local05
11318     1C 4E 85 F1 | 	sub	fp, #28
1131c     DC 3B B1 FD | 	call	#__system___string_cmp
11320     01 FA 55 F2 | 	cmps	result1, #1 wc
11324     60 00 90 CD |  if_b	jmp	#LR__1427
11328     1E 37 02 F6 | 	mov	local09, local12
1132c     01 36 06 F1 | 	add	local09, #1
11330     02 36 66 F0 | 	shl	local09, #2
11334     1C 4E 05 F1 | 	add	fp, #28
11338     A7 36 02 F1 | 	add	local09, fp
1133c     1B 45 02 FB | 	rdlong	local16, local09
11340     1E 31 02 F6 | 	mov	local06, local12
11344     02 30 66 F0 | 	shl	local06, #2
11348     A7 30 02 F1 | 	add	local06, fp
1134c     18 2F 02 FB | 	rdlong	local05, local06
11350     1E 37 02 F6 | 	mov	local09, local12
11354     1B 31 02 F6 | 	mov	local06, local09
11358     02 30 66 F0 | 	shl	local06, #2
1135c     A7 26 02 F6 | 	mov	local01, fp
11360     A7 30 02 F1 | 	add	local06, fp
11364     18 45 62 FC | 	wrlong	local16, local06
11368     1E 41 02 F6 | 	mov	local14, local12
1136c     01 40 06 F1 | 	add	local14, #1
11370     02 40 66 F0 | 	shl	local14, #2
11374     A7 42 02 F6 | 	mov	local15, fp
11378     A7 40 02 F1 | 	add	local14, fp
1137c     20 2F 62 FC | 	wrlong	local05, local14
11380     01 3A 66 F6 | 	neg	local11, #1
11384     1C 4E 85 F1 | 	sub	fp, #28
11388                 | LR__1427
11388     01 3C 06 F1 | 	add	local12, #1
1138c     4C FF 9F FD | 	jmp	#LR__1426
11390                 | LR__1428
11390                 | ' if not swapped then exit for
11390     1D 45 22 F6 | 	not	local16, local11
11394     00 44 0E F2 | 	cmp	local16, #0 wz
11398     01 2C 06 A1 |  if_e	add	local04, #1
1139c     20 FF 9F AD |  if_e	jmp	#LR__1425
113a0                 | LR__1429
113a0                 | ' for i=0 to n-1
113a0     00 2C 06 F6 | 	mov	local04, #0
113a4                 | LR__1430
113a4     1A 2D 52 F2 | 	cmps	local04, local08 wc
113a8     8C 00 90 3D |  if_ae	jmp	#LR__1432
113ac                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
113ac     00 12 06 F6 | 	mov	arg01, #0
113b0     C4 97 B1 FD | 	call	#__system___getiolock_0593
113b4     FD 12 02 F6 | 	mov	arg01, result1
113b8     18 3B B1 FD | 	call	#__system___lockmem
113bc     16 29 02 F6 | 	mov	local02, local04
113c0     02 28 66 F0 | 	shl	local02, #2
113c4     1C 4E 05 F1 | 	add	fp, #28
113c8     A7 28 02 F1 | 	add	local02, fp
113cc     14 15 02 FB | 	rdlong	arg02, local02
113d0     00 12 06 F6 | 	mov	arg01, #0
113d4     00 16 06 F6 | 	mov	arg03, #0
113d8     1C 4E 85 F1 | 	sub	fp, #28
113dc     EC 47 B1 FD | 	call	#__system___basic_print_string
113e0     00 12 06 F6 | 	mov	arg01, #0
113e4     90 97 B1 FD | 	call	#__system___getiolock_0593
113e8     FD 00 68 FC | 	wrlong	#0, result1
113ec     40 2A 06 F1 | 	add	local03, #64
113f0     15 13 02 F6 | 	mov	arg01, local03
113f4     CC 1D B1 FD | 	call	#_hg010b_spin2_setcursorx
113f8     00 2B 56 F2 | 	cmps	local03, #256 wc
113fc     30 00 90 CD |  if_b	jmp	#LR__1431
11400     00 2A 06 F6 | 	mov	local03, #0
11404     00 12 06 F6 | 	mov	arg01, #0
11408     6C 97 B1 FD | 	call	#__system___getiolock_0593
1140c     FD 12 02 F6 | 	mov	arg01, result1
11410     C0 3A B1 FD | 	call	#__system___lockmem
11414     00 12 06 F6 | 	mov	arg01, #0
11418     0A 14 06 F6 | 	mov	arg02, #10
1141c     00 16 06 F6 | 	mov	arg03, #0
11420     50 47 B1 FD | 	call	#__system___basic_print_char
11424     00 12 06 F6 | 	mov	arg01, #0
11428     4C 97 B1 FD | 	call	#__system___getiolock_0593
1142c     FD 00 68 FC | 	wrlong	#0, result1
11430                 | LR__1431
11430     01 2C 06 F1 | 	add	local04, #1
11434     6C FF 9F FD | 	jmp	#LR__1430
11438                 | LR__1432
11438                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11438     80 34 56 F2 | 	cmps	local08, #128 wc
1143c     40 00 90 CD |  if_b	jmp	#LR__1433
11440     00 12 06 F6 | 	mov	arg01, #0
11444     30 97 B1 FD | 	call	#__system___getiolock_0593
11448     FD 12 02 F6 | 	mov	arg01, result1
1144c     84 3A B1 FD | 	call	#__system___lockmem
11450     A9 01 00 FF 
11454     CE 14 06 F6 | 	mov	arg02, ##@LR__5811
11458     00 12 06 F6 | 	mov	arg01, #0
1145c     00 16 06 F6 | 	mov	arg03, #0
11460     68 47 B1 FD | 	call	#__system___basic_print_string
11464     00 12 06 F6 | 	mov	arg01, #0
11468     0A 14 06 F6 | 	mov	arg02, #10
1146c     00 16 06 F6 | 	mov	arg03, #0
11470     00 47 B1 FD | 	call	#__system___basic_print_char
11474     00 12 06 F6 | 	mov	arg01, #0
11478     FC 96 B1 FD | 	call	#__system___getiolock_0593
1147c     FD 00 68 FC | 	wrlong	#0, result1
11480                 | LR__1433
11480                 | ' print
11480     00 12 06 F6 | 	mov	arg01, #0
11484     F0 96 B1 FD | 	call	#__system___getiolock_0593
11488     FD 12 02 F6 | 	mov	arg01, result1
1148c     44 3A B1 FD | 	call	#__system___lockmem
11490     00 12 06 F6 | 	mov	arg01, #0
11494     0A 14 06 F6 | 	mov	arg02, #10
11498     00 16 06 F6 | 	mov	arg03, #0
1149c     D4 46 B1 FD | 	call	#__system___basic_print_char
114a0     00 12 06 F6 | 	mov	arg01, #0
114a4     D0 96 B1 FD | 	call	#__system___getiolock_0593
114a8     FD 00 68 FC | 	wrlong	#0, result1
114ac     A7 F0 03 F6 | 	mov	ptra, fp
114b0     B2 00 A0 FD | 	call	#popregs_
114b4                 | _do_dir_ret
114b4     2D 00 64 FD | 	ret
114b8                 | 
114b8                 | ' 
114b8                 | ' '-------------------- dpeek
114b8                 | ' 
114b8                 | ' sub do_dpeek
114b8                 | _do_dpeek
114b8     00 4A 05 F6 | 	mov	COUNT_, #0
114bc     A8 00 A0 FD | 	call	#pushregs_
114c0     14 F0 07 F1 | 	add	ptra, #20
114c4     C4 B6 BF FD | 	call	#_pop
114c8     A7 FA 61 FC | 	wrlong	result1, fp
114cc     04 4E 05 F1 | 	add	fp, #4
114d0     A7 FC 61 FC | 	wrlong	result2, fp
114d4     04 4E 05 F1 | 	add	fp, #4
114d8     A7 FE 61 FC | 	wrlong	result3, fp
114dc     08 4E 85 F1 | 	sub	fp, #8
114e0     A7 12 02 F6 | 	mov	arg01, fp
114e4     88 B8 BF FD | 	call	#_converttoint
114e8     0C 4E 05 F1 | 	add	fp, #12
114ec     A7 FA 61 FC | 	wrlong	result1, fp
114f0                 | ' 
114f0                 | ' t1=pop()
114f0                 | ' a=converttoint(t1)
114f0                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
114f0     0C 4E 85 F1 | 	sub	fp, #12
114f4     00 04 00 FF 
114f8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
114fc     1C 00 90 3D |  if_ae	jmp	#LR__1440
11500     0C 4E 05 F1 | 	add	fp, #12
11504     A7 12 02 FB | 	rdlong	arg01, fp
11508     09 FB E1 FA | 	rdword	result1, arg01
1150c     04 4E 05 F1 | 	add	fp, #4
11510     A7 FA 61 FC | 	wrlong	result1, fp
11514     10 4E 85 F1 | 	sub	fp, #16
11518     1C 00 90 FD | 	jmp	#LR__1441
1151c                 | LR__1440
1151c     0C 4E 05 F1 | 	add	fp, #12
11520     A7 12 02 FB | 	rdlong	arg01, fp
11524     0C 4E 85 F1 | 	sub	fp, #12
11528     28 03 B1 FD | 	call	#_psdpeek
1152c     10 4E 05 F1 | 	add	fp, #16
11530     A7 FA 61 FC | 	wrlong	result1, fp
11534     10 4E 85 F1 | 	sub	fp, #16
11538                 | LR__1441
11538     08 4E 05 F1 | 	add	fp, #8
1153c     A7 3A 68 FC | 	wrlong	#29, fp
11540     08 4E 05 F1 | 	add	fp, #8
11544     A7 12 02 FB | 	rdlong	arg01, fp
11548     10 4E 85 F1 | 	sub	fp, #16
1154c     A7 12 62 FC | 	wrlong	arg01, fp
11550     A7 12 02 F6 | 	mov	arg01, fp
11554     CC B6 BF FD | 	call	#_push
11558     A7 F0 03 F6 | 	mov	ptra, fp
1155c     B2 00 A0 FD | 	call	#popregs_
11560                 | _do_dpeek_ret
11560     2D 00 64 FD | 	ret
11564                 | 
11564                 | ' 
11564                 | ' '-------------------- dpoke
11564                 | ' 
11564                 | ' sub do_dpoke
11564                 | _do_dpoke
11564     01 4A 05 F6 | 	mov	COUNT_, #1
11568     A8 00 A0 FD | 	call	#pushregs_
1156c     20 F0 07 F1 | 	add	ptra, #32
11570     18 B6 BF FD | 	call	#_pop
11574     FD 14 02 F6 | 	mov	arg02, result1
11578     FE 12 02 F6 | 	mov	arg01, result2
1157c     FF 26 02 F6 | 	mov	local01, result3
11580     A7 14 62 FC | 	wrlong	arg02, fp
11584     04 4E 05 F1 | 	add	fp, #4
11588     A7 12 62 FC | 	wrlong	arg01, fp
1158c     04 4E 05 F1 | 	add	fp, #4
11590     A7 26 62 FC | 	wrlong	local01, fp
11594     08 4E 85 F1 | 	sub	fp, #8
11598     F0 B5 BF FD | 	call	#_pop
1159c     FF 26 02 F6 | 	mov	local01, result3
115a0     0C 4E 05 F1 | 	add	fp, #12
115a4     A7 FA 61 FC | 	wrlong	result1, fp
115a8     04 4E 05 F1 | 	add	fp, #4
115ac     A7 FC 61 FC | 	wrlong	result2, fp
115b0     04 4E 05 F1 | 	add	fp, #4
115b4     A7 26 62 FC | 	wrlong	local01, fp
115b8     08 4E 85 F1 | 	sub	fp, #8
115bc     A7 12 02 F6 | 	mov	arg01, fp
115c0     0C 4E 85 F1 | 	sub	fp, #12
115c4     A8 B7 BF FD | 	call	#_converttoint
115c8     18 4E 05 F1 | 	add	fp, #24
115cc     A7 FA 61 FC | 	wrlong	result1, fp
115d0     18 4E 85 F1 | 	sub	fp, #24
115d4     A7 12 02 F6 | 	mov	arg01, fp
115d8     94 B7 BF FD | 	call	#_converttoint
115dc     1C 4E 05 F1 | 	add	fp, #28
115e0     A7 FA 61 FC | 	wrlong	result1, fp
115e4                 | ' 
115e4                 | ' t1=pop() 'value
115e4                 | ' t2=pop() 
115e4                 | ' a=converttoint(t2) : v=converttoint(t1)
115e4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
115e4     04 4E 85 F1 | 	sub	fp, #4
115e8     A7 26 02 FB | 	rdlong	local01, fp
115ec     18 4E 85 F1 | 	sub	fp, #24
115f0     00 04 00 FF 
115f4     00 26 16 F2 | 	cmp	local01, ##524288 wc
115f8     1C 00 90 3D |  if_ae	jmp	#LR__1450
115fc     18 4E 05 F1 | 	add	fp, #24
11600     A7 12 02 FB | 	rdlong	arg01, fp
11604     04 4E 05 F1 | 	add	fp, #4
11608     A7 14 02 FB | 	rdlong	arg02, fp
1160c     1C 4E 85 F1 | 	sub	fp, #28
11610     09 15 52 FC | 	wrword	arg02, arg01
11614     18 00 90 FD | 	jmp	#LR__1451
11618                 | LR__1450
11618     18 4E 05 F1 | 	add	fp, #24
1161c     A7 12 02 FB | 	rdlong	arg01, fp
11620     04 4E 05 F1 | 	add	fp, #4
11624     A7 14 02 FB | 	rdlong	arg02, fp
11628     1C 4E 85 F1 | 	sub	fp, #28
1162c     E4 00 B1 FD | 	call	#_psdpoke
11630                 | LR__1451
11630     A7 F0 03 F6 | 	mov	ptra, fp
11634     B2 00 A0 FD | 	call	#popregs_
11638                 | _do_dpoke_ret
11638     2D 00 64 FD | 	ret
1163c                 | 
1163c                 | ' '-------------------- draw
1163c                 | ' 
1163c                 | ' sub do_draw
1163c                 | _do_draw
1163c     00 4A 05 F6 | 	mov	COUNT_, #0
11640     A8 00 A0 FD | 	call	#pushregs_
11644     20 F0 07 F1 | 	add	ptra, #32
11648     40 B5 BF FD | 	call	#_pop
1164c     FD 1A 02 F6 | 	mov	arg05, result1
11650     FE 18 02 F6 | 	mov	arg04, result2
11654     FF 16 02 F6 | 	mov	arg03, result3
11658     0C 4E 05 F1 | 	add	fp, #12
1165c     A7 1A 62 FC | 	wrlong	arg05, fp
11660     04 4E 05 F1 | 	add	fp, #4
11664     A7 18 62 FC | 	wrlong	arg04, fp
11668     04 4E 05 F1 | 	add	fp, #4
1166c     A7 16 62 FC | 	wrlong	arg03, fp
11670     14 4E 85 F1 | 	sub	fp, #20
11674     14 B5 BF FD | 	call	#_pop
11678     FF 1A 02 F6 | 	mov	arg05, result3
1167c     A7 FA 61 FC | 	wrlong	result1, fp
11680     04 4E 05 F1 | 	add	fp, #4
11684     A7 FC 61 FC | 	wrlong	result2, fp
11688     04 4E 05 F1 | 	add	fp, #4
1168c     A7 1A 62 FC | 	wrlong	arg05, fp
11690     08 4E 85 F1 | 	sub	fp, #8
11694     A7 12 02 F6 | 	mov	arg01, fp
11698     D4 B6 BF FD | 	call	#_converttoint
1169c     18 4E 05 F1 | 	add	fp, #24
116a0     A7 FA 61 FC | 	wrlong	result1, fp
116a4     0C 4E 85 F1 | 	sub	fp, #12
116a8     A7 12 02 F6 | 	mov	arg01, fp
116ac     0C 4E 85 F1 | 	sub	fp, #12
116b0     BC B6 BF FD | 	call	#_converttoint
116b4     1C 4E 05 F1 | 	add	fp, #28
116b8     A7 FA 61 FC | 	wrlong	result1, fp
116bc     37 00 00 FF 
116c0     2C E4 05 F1 | 	add	objptr, ##28204
116c4     F2 12 02 FB | 	rdlong	arg01, objptr
116c8     04 E4 05 F1 | 	add	objptr, #4
116cc     F2 14 02 FB | 	rdlong	arg02, objptr
116d0     04 4E 85 F1 | 	sub	fp, #4
116d4     A7 16 02 FB | 	rdlong	arg03, fp
116d8     FD 18 02 F6 | 	mov	arg04, result1
116dc     18 4E 85 F1 | 	sub	fp, #24
116e0     08 E4 85 F1 | 	sub	objptr, #8
116e4     F2 1A 02 FB | 	rdlong	arg05, objptr
116e8     37 00 00 FF 
116ec     28 E4 85 F1 | 	sub	objptr, ##28200
116f0     80 11 B1 FD | 	call	#_hg010b_spin2_draw
116f4     18 4E 05 F1 | 	add	fp, #24
116f8     A7 1A 02 FB | 	rdlong	arg05, fp
116fc     37 00 00 FF 
11700     2C E4 05 F1 | 	add	objptr, ##28204
11704     F2 1A 62 FC | 	wrlong	arg05, objptr
11708     04 4E 05 F1 | 	add	fp, #4
1170c     A7 1A 02 FB | 	rdlong	arg05, fp
11710     1C 4E 85 F1 | 	sub	fp, #28
11714     04 E4 05 F1 | 	add	objptr, #4
11718     F2 1A 62 FC | 	wrlong	arg05, objptr
1171c     37 00 00 FF 
11720     30 E4 85 F1 | 	sub	objptr, ##28208
11724     A7 F0 03 F6 | 	mov	ptra, fp
11728     B2 00 A0 FD | 	call	#popregs_
1172c                 | _do_draw_ret
1172c     2D 00 64 FD | 	ret
11730                 | 
11730                 | ' 
11730                 | ' '-------------------- else
11730                 | ' 
11730                 | ' sub do_else
11730                 | _do_else
11730     4A 00 00 FF 
11734     7C E4 05 F1 | 	add	objptr, ##38012
11738     F2 00 02 FB | 	rdlong	_var01, objptr
1173c     01 00 86 F1 | 	sub	_var01, #1
11740     04 E4 05 F1 | 	add	objptr, #4
11744     F2 00 62 FC | 	wrlong	_var01, objptr
11748     4A 00 00 FF 
1174c     80 E4 85 F1 | 	sub	objptr, ##38016
11750                 | _do_else_ret
11750     2D 00 64 FD | 	ret
11754                 | 
11754                 | ' 
11754                 | ' '-------------------- end
11754                 | ' 
11754                 | ' sub do_end
11754                 | _do_end
11754     4A 00 00 FF 
11758     7C E4 05 F1 | 	add	objptr, ##38012
1175c     F2 00 02 FB | 	rdlong	_var01, objptr
11760     01 00 86 F1 | 	sub	_var01, #1
11764     04 E4 05 F1 | 	add	objptr, #4
11768     F2 00 62 FC | 	wrlong	_var01, objptr
1176c     06 00 00 FF 
11770     38 E4 05 F1 | 	add	objptr, ##3128
11774     FF FF BF FF 
11778     F2 FE 6B FC | 	wrlong	##2147483647, objptr
1177c     50 00 00 FF 
11780     B8 E4 85 F1 | 	sub	objptr, ##41144
11784                 | _do_end_ret
11784     2D 00 64 FD | 	ret
11788                 | 
11788                 | ' 
11788                 | ' '-------------------- enter
11788                 | ' 
11788                 | ' sub do_enter
11788                 | _do_enter
11788     02 00 00 FF 
1178c     D2 12 06 F6 | 	mov	arg01, ##1234
11790     A0 2E B0 FD | 	call	#_do_load
11794                 | _do_enter_ret
11794     2D 00 64 FD | 	ret
11798                 | 
11798                 | ' 
11798                 | ' '------------------- error processing
11798                 | ' 
11798                 | ' sub do_error
11798                 | _do_error
11798     01 4A 05 F6 | 	mov	COUNT_, #1
1179c     A8 00 A0 FD | 	call	#pushregs_
117a0     4A 00 00 FF 
117a4     80 E4 05 F1 | 	add	objptr, ##38016
117a8     F2 18 02 FB | 	rdlong	arg04, objptr
117ac     0C 17 02 F6 | 	mov	arg03, arg04
117b0     01 16 66 F0 | 	shl	arg03, #1
117b4     0C 17 02 F1 | 	add	arg03, arg04
117b8     02 16 66 F0 | 	shl	arg03, #2
117bc     03 00 00 FF 
117c0     04 E4 85 F1 | 	sub	objptr, ##1540
117c4     F2 16 02 F1 | 	add	arg03, objptr
117c8     0B 27 02 FB | 	rdlong	local01, arg03
117cc                 | ' r=compiledline(lineptr_e).result.uresult
117cc                 | ' print "Error ";r;": ";errors$(r)
117cc     00 12 06 F6 | 	mov	arg01, #0
117d0     47 00 00 FF 
117d4     7C E4 85 F1 | 	sub	objptr, ##36476
117d8     9C 93 B1 FD | 	call	#__system___getiolock_0593
117dc     FD 12 02 F6 | 	mov	arg01, result1
117e0     F0 36 B1 FD | 	call	#__system___lockmem
117e4     A9 01 00 FF 
117e8     00 15 06 F6 | 	mov	arg02, ##@LR__5812
117ec     00 12 06 F6 | 	mov	arg01, #0
117f0     00 16 06 F6 | 	mov	arg03, #0
117f4     D4 43 B1 FD | 	call	#__system___basic_print_string
117f8     00 12 06 F6 | 	mov	arg01, #0
117fc     13 15 02 F6 | 	mov	arg02, local01
11800     00 16 06 F6 | 	mov	arg03, #0
11804     0A 18 06 F6 | 	mov	arg04, #10
11808     44 44 B1 FD | 	call	#__system___basic_print_unsigned
1180c     A9 01 00 FF 
11810     07 15 06 F6 | 	mov	arg02, ##@LR__5813
11814     00 12 06 F6 | 	mov	arg01, #0
11818     00 16 06 F6 | 	mov	arg03, #0
1181c     AC 43 B1 FD | 	call	#__system___basic_print_string
11820     02 26 66 F0 | 	shl	local01, #2
11824     45 00 00 FF 
11828     7C E4 05 F1 | 	add	objptr, ##35452
1182c     F2 26 02 F1 | 	add	local01, objptr
11830     13 15 02 FB | 	rdlong	arg02, local01
11834     00 12 06 F6 | 	mov	arg01, #0
11838     00 16 06 F6 | 	mov	arg03, #0
1183c     45 00 00 FF 
11840     7C E4 85 F1 | 	sub	objptr, ##35452
11844     84 43 B1 FD | 	call	#__system___basic_print_string
11848     00 12 06 F6 | 	mov	arg01, #0
1184c     0A 14 06 F6 | 	mov	arg02, #10
11850     00 16 06 F6 | 	mov	arg03, #0
11854     1C 43 B1 FD | 	call	#__system___basic_print_char
11858     00 12 06 F6 | 	mov	arg01, #0
1185c     18 93 B1 FD | 	call	#__system___getiolock_0593
11860     FD 00 68 FC | 	wrlong	#0, result1
11864     A7 F0 03 F6 | 	mov	ptra, fp
11868     B2 00 A0 FD | 	call	#popregs_
1186c                 | _do_error_ret
1186c     2D 00 64 FD | 	ret
11870                 | 
11870                 | ' 
11870                 | ' '-------------------- fcircle
11870                 | ' 
11870                 | ' sub do_fcircle
11870                 | _do_fcircle
11870     02 4A 05 F6 | 	mov	COUNT_, #2
11874     A8 00 A0 FD | 	call	#pushregs_
11878     24 F0 07 F1 | 	add	ptra, #36
1187c     0C B3 BF FD | 	call	#_pop
11880     FD 14 02 F6 | 	mov	arg02, result1
11884     FE 18 02 F6 | 	mov	arg04, result2
11888     FF 16 02 F6 | 	mov	arg03, result3
1188c     18 4E 05 F1 | 	add	fp, #24
11890     A7 14 62 FC | 	wrlong	arg02, fp
11894     04 4E 05 F1 | 	add	fp, #4
11898     A7 18 62 FC | 	wrlong	arg04, fp
1189c     04 4E 05 F1 | 	add	fp, #4
118a0     A7 16 62 FC | 	wrlong	arg03, fp
118a4     20 4E 85 F1 | 	sub	fp, #32
118a8     E0 B2 BF FD | 	call	#_pop
118ac     FD 14 02 F6 | 	mov	arg02, result1
118b0     FE 18 02 F6 | 	mov	arg04, result2
118b4     FF 16 02 F6 | 	mov	arg03, result3
118b8     0C 4E 05 F1 | 	add	fp, #12
118bc     A7 14 62 FC | 	wrlong	arg02, fp
118c0     04 4E 05 F1 | 	add	fp, #4
118c4     A7 18 62 FC | 	wrlong	arg04, fp
118c8     04 4E 05 F1 | 	add	fp, #4
118cc     A7 16 62 FC | 	wrlong	arg03, fp
118d0     14 4E 85 F1 | 	sub	fp, #20
118d4     B4 B2 BF FD | 	call	#_pop
118d8     FF 14 02 F6 | 	mov	arg02, result3
118dc     A7 FA 61 FC | 	wrlong	result1, fp
118e0     04 4E 05 F1 | 	add	fp, #4
118e4     A7 FC 61 FC | 	wrlong	result2, fp
118e8     04 4E 05 F1 | 	add	fp, #4
118ec     A7 14 62 FC | 	wrlong	arg02, fp
118f0     08 4E 85 F1 | 	sub	fp, #8
118f4     A7 12 02 F6 | 	mov	arg01, fp
118f8     74 B4 BF FD | 	call	#_converttoint
118fc     FD 26 02 F6 | 	mov	local01, result1
11900     0C 4E 05 F1 | 	add	fp, #12
11904     A7 12 02 F6 | 	mov	arg01, fp
11908     0C 4E 85 F1 | 	sub	fp, #12
1190c     60 B4 BF FD | 	call	#_converttoint
11910     FD 28 02 F6 | 	mov	local02, result1
11914     18 4E 05 F1 | 	add	fp, #24
11918     A7 12 02 F6 | 	mov	arg01, fp
1191c     18 4E 85 F1 | 	sub	fp, #24
11920     4C B4 BF FD | 	call	#_converttoint
11924     FD 16 02 F6 | 	mov	arg03, result1
11928     37 00 00 FF 
1192c     28 E4 05 F1 | 	add	objptr, ##28200
11930     F2 18 02 FB | 	rdlong	arg04, objptr
11934     37 00 00 FF 
11938     28 E4 85 F1 | 	sub	objptr, ##28200
1193c     13 13 02 F6 | 	mov	arg01, local01
11940     14 15 02 F6 | 	mov	arg02, local02
11944     B0 13 B1 FD | 	call	#_hg010b_spin2_fcircle
11948     A7 F0 03 F6 | 	mov	ptra, fp
1194c     B2 00 A0 FD | 	call	#popregs_
11950                 | _do_fcircle_ret
11950     2D 00 64 FD | 	ret
11954                 | 
11954                 | ' 
11954                 | ' '-------------------- fill
11954                 | ' 
11954                 | ' sub do_fill
11954                 | _do_fill
11954     03 4A 05 F6 | 	mov	COUNT_, #3
11958     A8 00 A0 FD | 	call	#pushregs_
1195c     30 F0 07 F1 | 	add	ptra, #48
11960     28 B2 BF FD | 	call	#_pop
11964     FD 16 02 F6 | 	mov	arg03, result1
11968     FE 14 02 F6 | 	mov	arg02, result2
1196c     FF 18 02 F6 | 	mov	arg04, result3
11970     24 4E 05 F1 | 	add	fp, #36
11974     A7 16 62 FC | 	wrlong	arg03, fp
11978     04 4E 05 F1 | 	add	fp, #4
1197c     A7 14 62 FC | 	wrlong	arg02, fp
11980     04 4E 05 F1 | 	add	fp, #4
11984     A7 18 62 FC | 	wrlong	arg04, fp
11988     2C 4E 85 F1 | 	sub	fp, #44
1198c     FC B1 BF FD | 	call	#_pop
11990     FD 16 02 F6 | 	mov	arg03, result1
11994     FE 14 02 F6 | 	mov	arg02, result2
11998     FF 18 02 F6 | 	mov	arg04, result3
1199c     18 4E 05 F1 | 	add	fp, #24
119a0     A7 16 62 FC | 	wrlong	arg03, fp
119a4     04 4E 05 F1 | 	add	fp, #4
119a8     A7 14 62 FC | 	wrlong	arg02, fp
119ac     04 4E 05 F1 | 	add	fp, #4
119b0     A7 18 62 FC | 	wrlong	arg04, fp
119b4     20 4E 85 F1 | 	sub	fp, #32
119b8     D0 B1 BF FD | 	call	#_pop
119bc     FD 16 02 F6 | 	mov	arg03, result1
119c0     FE 14 02 F6 | 	mov	arg02, result2
119c4     FF 18 02 F6 | 	mov	arg04, result3
119c8     0C 4E 05 F1 | 	add	fp, #12
119cc     A7 16 62 FC | 	wrlong	arg03, fp
119d0     04 4E 05 F1 | 	add	fp, #4
119d4     A7 14 62 FC | 	wrlong	arg02, fp
119d8     04 4E 05 F1 | 	add	fp, #4
119dc     A7 18 62 FC | 	wrlong	arg04, fp
119e0     14 4E 85 F1 | 	sub	fp, #20
119e4     A4 B1 BF FD | 	call	#_pop
119e8     FF 16 02 F6 | 	mov	arg03, result3
119ec     A7 FA 61 FC | 	wrlong	result1, fp
119f0     04 4E 05 F1 | 	add	fp, #4
119f4     A7 FC 61 FC | 	wrlong	result2, fp
119f8     04 4E 05 F1 | 	add	fp, #4
119fc     A7 16 62 FC | 	wrlong	arg03, fp
11a00     08 4E 85 F1 | 	sub	fp, #8
11a04     A7 12 02 F6 | 	mov	arg01, fp
11a08     64 B3 BF FD | 	call	#_converttoint
11a0c     FD 26 02 F6 | 	mov	local01, result1
11a10     0C 4E 05 F1 | 	add	fp, #12
11a14     A7 12 02 F6 | 	mov	arg01, fp
11a18     0C 4E 85 F1 | 	sub	fp, #12
11a1c     50 B3 BF FD | 	call	#_converttoint
11a20     FD 28 02 F6 | 	mov	local02, result1
11a24     18 4E 05 F1 | 	add	fp, #24
11a28     A7 12 02 F6 | 	mov	arg01, fp
11a2c     18 4E 85 F1 | 	sub	fp, #24
11a30     3C B3 BF FD | 	call	#_converttoint
11a34     FD 2A 02 F6 | 	mov	local03, result1
11a38     24 4E 05 F1 | 	add	fp, #36
11a3c     A7 12 02 F6 | 	mov	arg01, fp
11a40     24 4E 85 F1 | 	sub	fp, #36
11a44     28 B3 BF FD | 	call	#_converttoint
11a48     FD 18 02 F6 | 	mov	arg04, result1
11a4c     13 13 02 F6 | 	mov	arg01, local01
11a50     14 15 02 F6 | 	mov	arg02, local02
11a54     15 17 02 F6 | 	mov	arg03, local03
11a58     08 10 B1 FD | 	call	#_hg010b_spin2_fill
11a5c     A7 F0 03 F6 | 	mov	ptra, fp
11a60     B2 00 A0 FD | 	call	#popregs_
11a64                 | _do_fill_ret
11a64     2D 00 64 FD | 	ret
11a68                 | 
11a68                 | ' 
11a68                 | ' '-------------------- font
11a68                 | ' 
11a68                 | ' sub do_font
11a68                 | _do_font
11a68     03 4A 05 F6 | 	mov	COUNT_, #3
11a6c     A8 00 A0 FD | 	call	#pushregs_
11a70     18 B1 BF FD | 	call	#_pop
11a74     FD 26 02 F6 | 	mov	local01, result1
11a78     FE 28 02 F6 | 	mov	local02, result2
11a7c     FF 2A 02 F6 | 	mov	local03, result3
11a80                 | ' 
11a80                 | ' t1=pop() 
11a80                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11a80     1E 2A 0E F2 | 	cmp	local03, #30 wz
11a84     10 00 90 5D |  if_ne	jmp	#LR__1460
11a88     13 13 02 F6 | 	mov	arg01, local01
11a8c     00 14 06 F6 | 	mov	arg02, #0
11a90     84 67 B1 FD | 	call	#__system___float_tointeger
11a94     FD 26 02 F6 | 	mov	local01, result1
11a98                 | LR__1460
11a98                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11a98     1F 2A 0E F2 | 	cmp	local03, #31 wz
11a9c     18 00 90 5D |  if_ne	jmp	#LR__1461
11aa0     13 13 02 F6 | 	mov	arg01, local01
11aa4     B4 6A B1 FD | 	call	#__system____builtin_atof
11aa8     FD 12 02 F6 | 	mov	arg01, result1
11aac     00 14 06 F6 | 	mov	arg02, #0
11ab0     64 67 B1 FD | 	call	#__system___float_tointeger
11ab4     FD 26 02 F6 | 	mov	local01, result1
11ab8                 | LR__1461
11ab8     37 00 00 FF 
11abc     40 E4 05 F1 | 	add	objptr, ##28224
11ac0     F2 26 62 FC | 	wrlong	local01, objptr
11ac4     37 00 00 FF 
11ac8     40 E4 85 F1 | 	sub	objptr, ##28224
11acc     02 26 66 F0 | 	shl	local01, #2
11ad0     13 13 02 F6 | 	mov	arg01, local01
11ad4     70 16 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11ad8     A7 F0 03 F6 | 	mov	ptra, fp
11adc     B2 00 A0 FD | 	call	#popregs_
11ae0                 | _do_font_ret
11ae0     2D 00 64 FD | 	ret
11ae4                 | 
11ae4                 | ' 
11ae4                 | ' '-------------------- for
11ae4                 | ' 
11ae4                 | ' sub do_for()
11ae4                 | _do_for
11ae4     01 4A 05 F6 | 	mov	COUNT_, #1
11ae8     A8 00 A0 FD | 	call	#pushregs_
11aec     10 F0 07 F1 | 	add	ptra, #16
11af0     50 00 00 FF 
11af4     30 E5 05 F1 | 	add	objptr, ##41264
11af8     F2 12 02 FB | 	rdlong	arg01, objptr
11afc     01 12 06 F1 | 	add	arg01, #1
11b00     F2 12 62 FC | 	wrlong	arg01, objptr
11b04     50 00 00 FF 
11b08     30 E5 85 F1 | 	sub	objptr, ##41264
11b0c     7C B0 BF FD | 	call	#_pop
11b10     A7 FA 61 FC | 	wrlong	result1, fp
11b14     04 4E 05 F1 | 	add	fp, #4
11b18     A7 FC 61 FC | 	wrlong	result2, fp
11b1c     04 4E 05 F1 | 	add	fp, #4
11b20     A7 FE 61 FC | 	wrlong	result3, fp
11b24     08 4E 85 F1 | 	sub	fp, #8
11b28     50 00 00 FF 
11b2c     30 E5 05 F1 | 	add	objptr, ##41264
11b30     F2 12 02 FB | 	rdlong	arg01, objptr
11b34     09 27 02 F6 | 	mov	local01, arg01
11b38     02 26 66 F0 | 	shl	local01, #2
11b3c     09 27 02 F1 | 	add	local01, arg01
11b40     02 26 66 F0 | 	shl	local01, #2
11b44     06 00 00 FF 
11b48     98 E4 85 F1 | 	sub	objptr, ##3224
11b4c     F2 26 02 F1 | 	add	local01, objptr
11b50     A7 12 02 FB | 	rdlong	arg01, fp
11b54     08 26 06 F1 | 	add	local01, #8
11b58     13 13 62 FC | 	wrlong	arg01, local01
11b5c     4A 00 00 FF 
11b60     98 E4 85 F1 | 	sub	objptr, ##38040
11b64     24 B0 BF FD | 	call	#_pop
11b68     A7 FA 61 FC | 	wrlong	result1, fp
11b6c     04 4E 05 F1 | 	add	fp, #4
11b70     A7 FC 61 FC | 	wrlong	result2, fp
11b74     04 4E 05 F1 | 	add	fp, #4
11b78     A7 FE 61 FC | 	wrlong	result3, fp
11b7c     08 4E 85 F1 | 	sub	fp, #8
11b80     50 00 00 FF 
11b84     30 E5 05 F1 | 	add	objptr, ##41264
11b88     F2 12 02 FB | 	rdlong	arg01, objptr
11b8c     09 27 02 F6 | 	mov	local01, arg01
11b90     02 26 66 F0 | 	shl	local01, #2
11b94     09 27 02 F1 | 	add	local01, arg01
11b98     02 26 66 F0 | 	shl	local01, #2
11b9c     06 00 00 FF 
11ba0     98 E4 85 F1 | 	sub	objptr, ##3224
11ba4     F2 26 02 F1 | 	add	local01, objptr
11ba8     A7 12 02 F6 | 	mov	arg01, fp
11bac     4A 00 00 FF 
11bb0     98 E4 85 F1 | 	sub	objptr, ##38040
11bb4     B8 B1 BF FD | 	call	#_converttoint
11bb8     FD 12 02 F6 | 	mov	arg01, result1
11bbc     0C 26 06 F1 | 	add	local01, #12
11bc0     13 13 62 FC | 	wrlong	arg01, local01
11bc4     C4 AF BF FD | 	call	#_pop
11bc8     A7 FA 61 FC | 	wrlong	result1, fp
11bcc     04 4E 05 F1 | 	add	fp, #4
11bd0     A7 FC 61 FC | 	wrlong	result2, fp
11bd4     04 4E 05 F1 | 	add	fp, #4
11bd8     A7 FE 61 FC | 	wrlong	result3, fp
11bdc     08 4E 85 F1 | 	sub	fp, #8
11be0     50 00 00 FF 
11be4     30 E5 05 F1 | 	add	objptr, ##41264
11be8     F2 12 02 FB | 	rdlong	arg01, objptr
11bec     09 27 02 F6 | 	mov	local01, arg01
11bf0     02 26 66 F0 | 	shl	local01, #2
11bf4     09 27 02 F1 | 	add	local01, arg01
11bf8     02 26 66 F0 | 	shl	local01, #2
11bfc     06 00 00 FF 
11c00     98 E4 85 F1 | 	sub	objptr, ##3224
11c04     F2 26 02 F1 | 	add	local01, objptr
11c08     A7 12 02 F6 | 	mov	arg01, fp
11c0c     4A 00 00 FF 
11c10     98 E4 85 F1 | 	sub	objptr, ##38040
11c14     58 B1 BF FD | 	call	#_converttoint
11c18     10 26 06 F1 | 	add	local01, #16
11c1c     13 FB 61 FC | 	wrlong	result1, local01
11c20                 | ' fortop+=1
11c20                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11c20                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11c20                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11c20                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11c20     4A 00 00 FF 
11c24     80 E4 05 F1 | 	add	objptr, ##38016
11c28     F2 12 02 FB | 	rdlong	arg01, objptr
11c2c     09 27 02 F6 | 	mov	local01, arg01
11c30     01 26 66 F0 | 	shl	local01, #1
11c34     09 27 02 F1 | 	add	local01, arg01
11c38     02 26 66 F0 | 	shl	local01, #2
11c3c     03 00 00 FF 
11c40     04 E4 85 F1 | 	sub	objptr, ##1540
11c44     F2 26 02 F1 | 	add	local01, objptr
11c48     08 26 06 F1 | 	add	local01, #8
11c4c     13 27 02 FB | 	rdlong	local01, local01
11c50     FE 27 0E F2 | 	cmp	local01, #510 wz
11c54     47 00 00 FF 
11c58     7C E4 85 F1 | 	sub	objptr, ##36476
11c5c     70 00 90 5D |  if_ne	jmp	#LR__1470
11c60     50 00 00 FF 
11c64     30 E5 05 F1 | 	add	objptr, ##41264
11c68     F2 12 02 FB | 	rdlong	arg01, objptr
11c6c     09 27 02 F6 | 	mov	local01, arg01
11c70     02 26 66 F0 | 	shl	local01, #2
11c74     09 27 02 F1 | 	add	local01, arg01
11c78     02 26 66 F0 | 	shl	local01, #2
11c7c     06 00 00 FF 
11c80     98 E4 85 F1 | 	sub	objptr, ##3224
11c84     F2 26 02 F1 | 	add	local01, objptr
11c88     06 00 00 FF 
11c8c     20 E4 05 F1 | 	add	objptr, ##3104
11c90     F2 12 02 FB | 	rdlong	arg01, objptr
11c94     13 13 62 FC | 	wrlong	arg01, local01
11c98     78 E4 05 F1 | 	add	objptr, #120
11c9c     F2 12 02 FB | 	rdlong	arg01, objptr
11ca0     09 27 02 F6 | 	mov	local01, arg01
11ca4     02 26 66 F0 | 	shl	local01, #2
11ca8     09 27 02 F1 | 	add	local01, arg01
11cac     02 26 66 F0 | 	shl	local01, #2
11cb0     06 00 00 FF 
11cb4     98 E4 85 F1 | 	sub	objptr, ##3224
11cb8     F2 26 02 F1 | 	add	local01, objptr
11cbc     04 26 06 F1 | 	add	local01, #4
11cc0     13 01 68 FC | 	wrlong	#0, local01
11cc4     4A 00 00 FF 
11cc8     98 E4 85 F1 | 	sub	objptr, ##38040
11ccc     78 00 90 FD | 	jmp	#LR__1471
11cd0                 | LR__1470
11cd0     50 00 00 FF 
11cd4     30 E5 05 F1 | 	add	objptr, ##41264
11cd8     F2 12 02 FB | 	rdlong	arg01, objptr
11cdc     09 27 02 F6 | 	mov	local01, arg01
11ce0     02 26 66 F0 | 	shl	local01, #2
11ce4     09 27 02 F1 | 	add	local01, arg01
11ce8     02 26 66 F0 | 	shl	local01, #2
11cec     06 00 00 FF 
11cf0     98 E4 85 F1 | 	sub	objptr, ##3224
11cf4     F2 26 02 F1 | 	add	local01, objptr
11cf8     06 00 00 FF 
11cfc     28 E4 05 F1 | 	add	objptr, ##3112
11d00     F2 12 02 FB | 	rdlong	arg01, objptr
11d04     13 13 62 FC | 	wrlong	arg01, local01
11d08     70 E4 05 F1 | 	add	objptr, #112
11d0c     F2 12 02 FB | 	rdlong	arg01, objptr
11d10     09 27 02 F6 | 	mov	local01, arg01
11d14     02 26 66 F0 | 	shl	local01, #2
11d18     09 27 02 F1 | 	add	local01, arg01
11d1c     02 26 66 F0 | 	shl	local01, #2
11d20     06 00 00 FF 
11d24     98 E4 85 F1 | 	sub	objptr, ##3224
11d28     F2 26 02 F1 | 	add	local01, objptr
11d2c     18 E4 85 F1 | 	sub	objptr, #24
11d30     F2 12 02 FB | 	rdlong	arg01, objptr
11d34     4A 00 00 FF 
11d38     80 E4 85 F1 | 	sub	objptr, ##38016
11d3c     01 12 06 F1 | 	add	arg01, #1
11d40     04 26 06 F1 | 	add	local01, #4
11d44     13 13 62 FC | 	wrlong	arg01, local01
11d48                 | LR__1471
11d48     A7 F0 03 F6 | 	mov	ptra, fp
11d4c     B2 00 A0 FD | 	call	#popregs_
11d50                 | _do_for_ret
11d50     2D 00 64 FD | 	ret
11d54                 | 
11d54                 | ' 
11d54                 | ' '-------------------- frame
11d54                 | ' 
11d54                 | ' sub do_frame
11d54                 | _do_frame
11d54     03 4A 05 F6 | 	mov	COUNT_, #3
11d58     A8 00 A0 FD | 	call	#pushregs_
11d5c     30 F0 07 F1 | 	add	ptra, #48
11d60     28 AE BF FD | 	call	#_pop
11d64     FD 16 02 F6 | 	mov	arg03, result1
11d68     FE 14 02 F6 | 	mov	arg02, result2
11d6c     FF 1A 02 F6 | 	mov	arg05, result3
11d70     24 4E 05 F1 | 	add	fp, #36
11d74     A7 16 62 FC | 	wrlong	arg03, fp
11d78     04 4E 05 F1 | 	add	fp, #4
11d7c     A7 14 62 FC | 	wrlong	arg02, fp
11d80     04 4E 05 F1 | 	add	fp, #4
11d84     A7 1A 62 FC | 	wrlong	arg05, fp
11d88     2C 4E 85 F1 | 	sub	fp, #44
11d8c     FC AD BF FD | 	call	#_pop
11d90     FD 16 02 F6 | 	mov	arg03, result1
11d94     FE 14 02 F6 | 	mov	arg02, result2
11d98     FF 1A 02 F6 | 	mov	arg05, result3
11d9c     18 4E 05 F1 | 	add	fp, #24
11da0     A7 16 62 FC | 	wrlong	arg03, fp
11da4     04 4E 05 F1 | 	add	fp, #4
11da8     A7 14 62 FC | 	wrlong	arg02, fp
11dac     04 4E 05 F1 | 	add	fp, #4
11db0     A7 1A 62 FC | 	wrlong	arg05, fp
11db4     20 4E 85 F1 | 	sub	fp, #32
11db8     D0 AD BF FD | 	call	#_pop
11dbc     FD 16 02 F6 | 	mov	arg03, result1
11dc0     FE 14 02 F6 | 	mov	arg02, result2
11dc4     FF 1A 02 F6 | 	mov	arg05, result3
11dc8     0C 4E 05 F1 | 	add	fp, #12
11dcc     A7 16 62 FC | 	wrlong	arg03, fp
11dd0     04 4E 05 F1 | 	add	fp, #4
11dd4     A7 14 62 FC | 	wrlong	arg02, fp
11dd8     04 4E 05 F1 | 	add	fp, #4
11ddc     A7 1A 62 FC | 	wrlong	arg05, fp
11de0     14 4E 85 F1 | 	sub	fp, #20
11de4     A4 AD BF FD | 	call	#_pop
11de8     FF 16 02 F6 | 	mov	arg03, result3
11dec     A7 FA 61 FC | 	wrlong	result1, fp
11df0     04 4E 05 F1 | 	add	fp, #4
11df4     A7 FC 61 FC | 	wrlong	result2, fp
11df8     04 4E 05 F1 | 	add	fp, #4
11dfc     A7 16 62 FC | 	wrlong	arg03, fp
11e00     08 4E 85 F1 | 	sub	fp, #8
11e04     A7 12 02 F6 | 	mov	arg01, fp
11e08     64 AF BF FD | 	call	#_converttoint
11e0c     FD 26 02 F6 | 	mov	local01, result1
11e10     0C 4E 05 F1 | 	add	fp, #12
11e14     A7 12 02 F6 | 	mov	arg01, fp
11e18     0C 4E 85 F1 | 	sub	fp, #12
11e1c     50 AF BF FD | 	call	#_converttoint
11e20     FD 28 02 F6 | 	mov	local02, result1
11e24     18 4E 05 F1 | 	add	fp, #24
11e28     A7 12 02 F6 | 	mov	arg01, fp
11e2c     18 4E 85 F1 | 	sub	fp, #24
11e30     3C AF BF FD | 	call	#_converttoint
11e34     FD 2A 02 F6 | 	mov	local03, result1
11e38     24 4E 05 F1 | 	add	fp, #36
11e3c     A7 12 02 F6 | 	mov	arg01, fp
11e40     24 4E 85 F1 | 	sub	fp, #36
11e44     28 AF BF FD | 	call	#_converttoint
11e48     FD 18 02 F6 | 	mov	arg04, result1
11e4c     37 00 00 FF 
11e50     28 E4 05 F1 | 	add	objptr, ##28200
11e54     F2 1A 02 FB | 	rdlong	arg05, objptr
11e58     37 00 00 FF 
11e5c     28 E4 85 F1 | 	sub	objptr, ##28200
11e60     13 13 02 F6 | 	mov	arg01, local01
11e64     14 15 02 F6 | 	mov	arg02, local02
11e68     15 17 02 F6 | 	mov	arg03, local03
11e6c     E0 10 B1 FD | 	call	#_hg010b_spin2_frame
11e70     A7 F0 03 F6 | 	mov	ptra, fp
11e74     B2 00 A0 FD | 	call	#popregs_
11e78                 | _do_frame_ret
11e78     2D 00 64 FD | 	ret
11e7c                 | 
11e7c                 | ' 
11e7c                 | ' '-------------------- framebuf
11e7c                 | ' 
11e7c                 | ' sub do_framebuf
11e7c                 | _do_framebuf
11e7c     00 4A 05 F6 | 	mov	COUNT_, #0
11e80     A8 00 A0 FD | 	call	#pushregs_
11e84     0C F0 07 F1 | 	add	ptra, #12
11e88     08 4E 05 F1 | 	add	fp, #8
11e8c     A7 3A 68 FC | 	wrlong	#29, fp
11e90     F2 12 02 FB | 	rdlong	arg01, objptr
11e94     08 4E 85 F1 | 	sub	fp, #8
11e98     A7 12 62 FC | 	wrlong	arg01, fp
11e9c     A7 12 02 F6 | 	mov	arg01, fp
11ea0     80 AD BF FD | 	call	#_push
11ea4     A7 F0 03 F6 | 	mov	ptra, fp
11ea8     B2 00 A0 FD | 	call	#popregs_
11eac                 | _do_framebuf_ret
11eac     2D 00 64 FD | 	ret
11eb0                 | 
11eb0                 | ' '-------------------- fre
11eb0                 | ' 
11eb0                 | ' sub do_fre
11eb0                 | _do_fre
11eb0     01 4A 05 F6 | 	mov	COUNT_, #1
11eb4     A8 00 A0 FD | 	call	#pushregs_
11eb8     0C F0 07 F1 | 	add	ptra, #12
11ebc     51 00 00 FF 
11ec0     D4 E5 05 F1 | 	add	objptr, ##41940
11ec4     F2 12 02 FB | 	rdlong	arg01, objptr
11ec8     0E 00 00 FF 
11ecc     78 E5 85 F1 | 	sub	objptr, ##7544
11ed0     F2 26 02 FB | 	rdlong	local01, objptr
11ed4     13 13 82 F1 | 	sub	arg01, local01
11ed8     0E 00 00 FF 
11edc     F0 E5 05 F1 | 	add	objptr, ##7664
11ee0     F2 12 62 FC | 	wrlong	arg01, objptr
11ee4     08 4E 05 F1 | 	add	fp, #8
11ee8     A7 3A 68 FC | 	wrlong	#29, fp
11eec     08 4E 85 F1 | 	sub	fp, #8
11ef0     F2 26 02 FB | 	rdlong	local01, objptr
11ef4     52 00 00 FF 
11ef8     4C E4 85 F1 | 	sub	objptr, ##42060
11efc     A7 26 62 FC | 	wrlong	local01, fp
11f00     A7 12 02 F6 | 	mov	arg01, fp
11f04     1C AD BF FD | 	call	#_push
11f08     A7 F0 03 F6 | 	mov	ptra, fp
11f0c     B2 00 A0 FD | 	call	#popregs_
11f10                 | _do_fre_ret
11f10     2D 00 64 FD | 	ret
11f14                 | 
11f14                 | ' 
11f14                 | ' '-------------------- get
11f14                 | ' 
11f14                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11f14                 | _do_get
11f14     09 4A 05 F6 | 	mov	COUNT_, #9
11f18     A8 00 A0 FD | 	call	#pushregs_
11f1c     40 F0 07 F1 | 	add	ptra, #64
11f20     4A 00 00 FF 
11f24     80 E4 05 F1 | 	add	objptr, ##38016
11f28     F2 1A 02 FB | 	rdlong	arg05, objptr
11f2c     0D 19 02 F6 | 	mov	arg04, arg05
11f30     01 18 66 F0 | 	shl	arg04, #1
11f34     0D 19 02 F1 | 	add	arg04, arg05
11f38     02 18 66 F0 | 	shl	arg04, #2
11f3c     03 00 00 FF 
11f40     04 E4 85 F1 | 	sub	objptr, ##1540
11f44     F2 18 02 F1 | 	add	arg04, objptr
11f48     0C 1B 02 FB | 	rdlong	arg05, arg04
11f4c     A7 1A 62 FC | 	wrlong	arg05, fp
11f50                 | ' 
11f50                 | ' numpar=compiledline(lineptr_e).result.uresult
11f50                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11f50     04 1A 0E F2 | 	cmp	arg05, #4 wz
11f54     47 00 00 FF 
11f58     7C E4 85 F1 | 	sub	objptr, ##36476
11f5c     48 00 90 5D |  if_ne	jmp	#LR__1480
11f60     28 AC BF FD | 	call	#_pop
11f64     FF 1A 02 F6 | 	mov	arg05, result3
11f68     1C 4E 05 F1 | 	add	fp, #28
11f6c     A7 FA 61 FC | 	wrlong	result1, fp
11f70     04 4E 05 F1 | 	add	fp, #4
11f74     A7 FC 61 FC | 	wrlong	result2, fp
11f78     04 4E 05 F1 | 	add	fp, #4
11f7c     A7 1A 62 FC | 	wrlong	arg05, fp
11f80     08 4E 85 F1 | 	sub	fp, #8
11f84     A7 12 02 F6 | 	mov	arg01, fp
11f88     1C 4E 85 F1 | 	sub	fp, #28
11f8c     E0 AD BF FD | 	call	#_converttoint
11f90     52 00 00 FF 
11f94     48 E4 05 F1 | 	add	objptr, ##42056
11f98     F2 FA 61 FC | 	wrlong	result1, objptr
11f9c     52 00 00 FF 
11fa0     48 E4 85 F1 | 	sub	objptr, ##42056
11fa4     18 00 90 FD | 	jmp	#LR__1481
11fa8                 | LR__1480
11fa8     52 00 00 FF 
11fac     48 E4 05 F1 | 	add	objptr, ##42056
11fb0     FF FF FF FF 
11fb4     F2 FE 6B FC | 	wrlong	##-1, objptr
11fb8     52 00 00 FF 
11fbc     48 E4 85 F1 | 	sub	objptr, ##42056
11fc0                 | LR__1481
11fc0                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11fc0     A7 16 02 FB | 	rdlong	arg03, fp
11fc4     03 16 56 F2 | 	cmps	arg03, #3 wc
11fc8     40 00 90 CD |  if_b	jmp	#LR__1482
11fcc     BC AB BF FD | 	call	#_pop
11fd0     FF 16 02 F6 | 	mov	arg03, result3
11fd4     1C 4E 05 F1 | 	add	fp, #28
11fd8     A7 FA 61 FC | 	wrlong	result1, fp
11fdc     04 4E 05 F1 | 	add	fp, #4
11fe0     A7 FC 61 FC | 	wrlong	result2, fp
11fe4     04 4E 05 F1 | 	add	fp, #4
11fe8     A7 16 62 FC | 	wrlong	arg03, fp
11fec     08 4E 85 F1 | 	sub	fp, #8
11ff0     A7 12 02 F6 | 	mov	arg01, fp
11ff4     1C 4E 85 F1 | 	sub	fp, #28
11ff8     74 AD BF FD | 	call	#_converttoint
11ffc     08 4E 05 F1 | 	add	fp, #8
12000     A7 FA 61 FC | 	wrlong	result1, fp
12004     08 4E 85 F1 | 	sub	fp, #8
12008     0C 00 90 FD | 	jmp	#LR__1483
1200c                 | LR__1482
1200c     08 4E 05 F1 | 	add	fp, #8
12010     A7 02 68 FC | 	wrlong	#1, fp
12014     08 4E 85 F1 | 	sub	fp, #8
12018                 | LR__1483
12018                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12018     A7 16 02 FB | 	rdlong	arg03, fp
1201c     02 16 56 F2 | 	cmps	arg03, #2 wc
12020     3C 00 90 CD |  if_b	jmp	#LR__1484
12024     64 AB BF FD | 	call	#_pop
12028     FF 16 02 F6 | 	mov	arg03, result3
1202c     1C 4E 05 F1 | 	add	fp, #28
12030     A7 FA 61 FC | 	wrlong	result1, fp
12034     04 4E 05 F1 | 	add	fp, #4
12038     A7 FC 61 FC | 	wrlong	result2, fp
1203c     04 4E 05 F1 | 	add	fp, #4
12040     A7 16 62 FC | 	wrlong	arg03, fp
12044     08 4E 85 F1 | 	sub	fp, #8
12048     A7 12 02 F6 | 	mov	arg01, fp
1204c     1C 4E 85 F1 | 	sub	fp, #28
12050     1C AD BF FD | 	call	#_converttoint
12054     0C 4E 05 F1 | 	add	fp, #12
12058     A7 FA 61 FC | 	wrlong	result1, fp
1205c     0C 4E 85 F1 | 	sub	fp, #12
12060                 | LR__1484
12060     28 AB BF FD | 	call	#_pop
12064     FF 16 02 F6 | 	mov	arg03, result3
12068     1C 4E 05 F1 | 	add	fp, #28
1206c     A7 FA 61 FC | 	wrlong	result1, fp
12070     04 4E 05 F1 | 	add	fp, #4
12074     A7 FC 61 FC | 	wrlong	result2, fp
12078     04 4E 05 F1 | 	add	fp, #4
1207c     A7 16 62 FC | 	wrlong	arg03, fp
12080     08 4E 85 F1 | 	sub	fp, #8
12084     A7 12 02 F6 | 	mov	arg01, fp
12088     1C 4E 85 F1 | 	sub	fp, #28
1208c     E0 AC BF FD | 	call	#_converttoint
12090     04 4E 05 F1 | 	add	fp, #4
12094     A7 FA 61 FC | 	wrlong	result1, fp
12098     10 4E 05 F1 | 	add	fp, #16
1209c     A7 16 02 FB | 	rdlong	arg03, fp
120a0     14 4E 85 F1 | 	sub	fp, #20
120a4     02 16 66 F0 | 	shl	arg03, #2
120a8     50 00 00 FF 
120ac     C4 E4 05 F1 | 	add	objptr, ##41156
120b0     F2 26 02 F6 | 	mov	local01, objptr
120b4     F2 16 02 F1 | 	add	arg03, objptr
120b8     0B 01 68 FC | 	wrlong	#0, arg03
120bc                 | ' t1=pop() : channel=converttoint(t1)
120bc                 | ' getres(j)=0
120bc                 | ' if pos>=0 then
120bc     01 00 00 FF 
120c0     84 E5 05 F1 | 	add	objptr, ##900
120c4     F2 28 02 FB | 	rdlong	local02, objptr
120c8     52 00 00 FF 
120cc     48 E4 85 F1 | 	sub	objptr, ##42056
120d0     00 28 56 F2 | 	cmps	local02, #0 wc
120d4     F0 01 90 CD |  if_b	jmp	#LR__1491
120d8                 | '   for i=0 to  amount/1024
120d8     10 4E 05 F1 | 	add	fp, #16
120dc     A7 00 68 FC | 	wrlong	#0, fp
120e0     08 4E 85 F1 | 	sub	fp, #8
120e4     A7 2A 02 FB | 	rdlong	local03, fp
120e8     08 4E 85 F1 | 	sub	fp, #8
120ec     15 2D 52 F6 | 	abs	local04, local03 wc
120f0     0A 2C 46 F0 | 	shr	local04, #10
120f4     16 2D 82 F6 | 	negc	local04, local04
120f8     01 2C 06 F1 | 	add	local04, #1
120fc                 | LR__1485
120fc     10 4E 05 F1 | 	add	fp, #16
12100     A7 2A 02 FB | 	rdlong	local03, fp
12104     10 4E 85 F1 | 	sub	fp, #16
12108     16 2B 52 F2 | 	cmps	local03, local04 wc
1210c     9C 03 90 3D |  if_ae	jmp	#LR__1499
12110                 | '     get #channel,pos+1,block(0),amount,r
12110     04 4E 05 F1 | 	add	fp, #4
12114     A7 12 02 FB | 	rdlong	arg01, fp
12118     52 00 00 FF 
1211c     48 E4 05 F1 | 	add	objptr, ##42056
12120     F2 14 02 FB | 	rdlong	arg02, objptr
12124     01 14 06 F1 | 	add	arg02, #1
12128     03 00 00 FF 
1212c     94 E5 85 F1 | 	sub	objptr, ##1940
12130     F2 16 02 F6 | 	mov	arg03, objptr
12134     4E 00 00 FF 
12138     B4 E4 85 F1 | 	sub	objptr, ##40116
1213c     04 4E 05 F1 | 	add	fp, #4
12140     A7 18 02 FB | 	rdlong	arg04, fp
12144     08 4E 85 F1 | 	sub	fp, #8
12148     01 1A 06 F6 | 	mov	arg05, #1
1214c     F8 3B B1 FD | 	call	#__system___basic_get
12150     18 4E 05 F1 | 	add	fp, #24
12154     A7 FA 61 FC | 	wrlong	result1, fp
12158                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12158     0C 4E 85 F1 | 	sub	fp, #12
1215c     A7 28 02 FB | 	rdlong	local02, fp
12160     0C 4E 85 F1 | 	sub	fp, #12
12164     00 04 00 FF 
12168     00 28 56 F2 | 	cmps	local02, ##524288 wc
1216c     7C 00 90 3D |  if_ae	jmp	#LR__1487
12170     14 4E 05 F1 | 	add	fp, #20
12174     A7 00 68 FC | 	wrlong	#0, fp
12178     04 4E 05 F1 | 	add	fp, #4
1217c     A7 2E 02 FB | 	rdlong	local05, fp
12180     18 4E 85 F1 | 	sub	fp, #24
12184                 | LR__1486
12184     14 4E 05 F1 | 	add	fp, #20
12188     A7 28 02 FB | 	rdlong	local02, fp
1218c     14 4E 85 F1 | 	sub	fp, #20
12190     17 29 52 F2 | 	cmps	local02, local05 wc
12194     D8 00 90 3D |  if_ae	jmp	#LR__1490
12198     0C 4E 05 F1 | 	add	fp, #12
1219c     A7 12 02 FB | 	rdlong	arg01, fp
121a0     04 4E 05 F1 | 	add	fp, #4
121a4     A7 2A 02 FB | 	rdlong	local03, fp
121a8     0A 2A 66 F0 | 	shl	local03, #10
121ac     15 13 02 F1 | 	add	arg01, local03
121b0     04 4E 05 F1 | 	add	fp, #4
121b4     A7 2A 02 FB | 	rdlong	local03, fp
121b8     15 13 02 F1 | 	add	arg01, local03
121bc     4E 00 00 FF 
121c0     B4 E4 05 F1 | 	add	objptr, ##40116
121c4     F2 2A 02 F1 | 	add	local03, objptr
121c8     15 15 C2 FA | 	rdbyte	arg02, local03
121cc     09 15 42 FC | 	wrbyte	arg02, arg01
121d0     4E 00 00 FF 
121d4     B4 E4 85 F1 | 	sub	objptr, ##40116
121d8     A7 2A 02 FB | 	rdlong	local03, fp
121dc     01 2A 06 F1 | 	add	local03, #1
121e0     A7 2A 62 FC | 	wrlong	local03, fp
121e4     14 4E 85 F1 | 	sub	fp, #20
121e8     98 FF 9F FD | 	jmp	#LR__1486
121ec                 | LR__1487
121ec     14 4E 05 F1 | 	add	fp, #20
121f0     A7 00 68 FC | 	wrlong	#0, fp
121f4     04 4E 05 F1 | 	add	fp, #4
121f8     A7 30 02 FB | 	rdlong	local06, fp
121fc     18 4E 85 F1 | 	sub	fp, #24
12200                 | LR__1488
12200     14 4E 05 F1 | 	add	fp, #20
12204     A7 28 02 FB | 	rdlong	local02, fp
12208     14 4E 85 F1 | 	sub	fp, #20
1220c     18 29 52 F2 | 	cmps	local02, local06 wc
12210     5C 00 90 3D |  if_ae	jmp	#LR__1489
12214     0C 4E 05 F1 | 	add	fp, #12
12218     A7 12 02 FB | 	rdlong	arg01, fp
1221c     04 4E 05 F1 | 	add	fp, #4
12220     A7 2E 02 FB | 	rdlong	local05, fp
12224     0A 2E 66 F0 | 	shl	local05, #10
12228     17 13 02 F1 | 	add	arg01, local05
1222c     04 4E 05 F1 | 	add	fp, #4
12230     A7 2E 02 FB | 	rdlong	local05, fp
12234     17 13 02 F1 | 	add	arg01, local05
12238     14 4E 85 F1 | 	sub	fp, #20
1223c     4E 00 00 FF 
12240     B4 E4 05 F1 | 	add	objptr, ##40116
12244     F2 2E 02 F1 | 	add	local05, objptr
12248     17 15 C2 FA | 	rdbyte	arg02, local05
1224c     4E 00 00 FF 
12250     B4 E4 85 F1 | 	sub	objptr, ##40116
12254     04 F5 B0 FD | 	call	#_pspoke
12258     14 4E 05 F1 | 	add	fp, #20
1225c     A7 2E 02 FB | 	rdlong	local05, fp
12260     01 2E 06 F1 | 	add	local05, #1
12264     A7 2E 62 FC | 	wrlong	local05, fp
12268     14 4E 85 F1 | 	sub	fp, #20
1226c     90 FF 9F FD | 	jmp	#LR__1488
12270                 | LR__1489
12270                 | LR__1490
12270     14 4E 05 F1 | 	add	fp, #20
12274     A7 30 02 FB | 	rdlong	local06, fp
12278     18 2B 02 F6 | 	mov	local03, local06
1227c     02 2A 66 F0 | 	shl	local03, #2
12280     50 00 00 FF 
12284     C4 E4 05 F1 | 	add	objptr, ##41156
12288     F2 2A 02 F1 | 	add	local03, objptr
1228c     02 30 66 F0 | 	shl	local06, #2
12290     F2 30 02 F1 | 	add	local06, objptr
12294     18 31 02 FB | 	rdlong	local06, local06
12298     04 4E 05 F1 | 	add	fp, #4
1229c     A7 2E 02 FB | 	rdlong	local05, fp
122a0     17 31 02 F1 | 	add	local06, local05
122a4     15 31 62 FC | 	wrlong	local06, local03
122a8     08 4E 85 F1 | 	sub	fp, #8
122ac     A7 30 02 FB | 	rdlong	local06, fp
122b0     01 30 06 F1 | 	add	local06, #1
122b4     A7 30 62 FC | 	wrlong	local06, fp
122b8     10 4E 85 F1 | 	sub	fp, #16
122bc     50 00 00 FF 
122c0     C4 E4 85 F1 | 	sub	objptr, ##41156
122c4     34 FE 9F FD | 	jmp	#LR__1485
122c8                 | LR__1491
122c8                 | '   for i=0 to  amount/1024
122c8     10 4E 05 F1 | 	add	fp, #16
122cc     A7 00 68 FC | 	wrlong	#0, fp
122d0     08 4E 85 F1 | 	sub	fp, #8
122d4     A7 2A 02 FB | 	rdlong	local03, fp
122d8     08 4E 85 F1 | 	sub	fp, #8
122dc     15 33 52 F6 | 	abs	local07, local03 wc
122e0     0A 32 46 F0 | 	shr	local07, #10
122e4     19 33 82 F6 | 	negc	local07, local07
122e8     01 32 06 F1 | 	add	local07, #1
122ec                 | LR__1492
122ec     10 4E 05 F1 | 	add	fp, #16
122f0     A7 2A 02 FB | 	rdlong	local03, fp
122f4     10 4E 85 F1 | 	sub	fp, #16
122f8     19 2B 52 F2 | 	cmps	local03, local07 wc
122fc     AC 01 90 3D |  if_ae	jmp	#LR__1498
12300                 | '     get #channel,,block(0),amount,r
12300     04 4E 05 F1 | 	add	fp, #4
12304     A7 12 02 FB | 	rdlong	arg01, fp
12308     4E 00 00 FF 
1230c     B4 E4 05 F1 | 	add	objptr, ##40116
12310     F2 16 02 F6 | 	mov	arg03, objptr
12314     4E 00 00 FF 
12318     B4 E4 85 F1 | 	sub	objptr, ##40116
1231c     04 4E 05 F1 | 	add	fp, #4
12320     A7 18 02 FB | 	rdlong	arg04, fp
12324     08 4E 85 F1 | 	sub	fp, #8
12328     00 14 06 F6 | 	mov	arg02, #0
1232c     01 1A 06 F6 | 	mov	arg05, #1
12330     14 3A B1 FD | 	call	#__system___basic_get
12334     18 4E 05 F1 | 	add	fp, #24
12338     A7 FA 61 FC | 	wrlong	result1, fp
1233c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1233c     0C 4E 85 F1 | 	sub	fp, #12
12340     A7 28 02 FB | 	rdlong	local02, fp
12344     0C 4E 85 F1 | 	sub	fp, #12
12348     00 04 00 FF 
1234c     00 28 56 F2 | 	cmps	local02, ##524288 wc
12350     7C 00 90 3D |  if_ae	jmp	#LR__1494
12354     14 4E 05 F1 | 	add	fp, #20
12358     A7 00 68 FC | 	wrlong	#0, fp
1235c     04 4E 05 F1 | 	add	fp, #4
12360     A7 34 02 FB | 	rdlong	local08, fp
12364     18 4E 85 F1 | 	sub	fp, #24
12368                 | LR__1493
12368     14 4E 05 F1 | 	add	fp, #20
1236c     A7 28 02 FB | 	rdlong	local02, fp
12370     14 4E 85 F1 | 	sub	fp, #20
12374     1A 29 52 F2 | 	cmps	local02, local08 wc
12378     D8 00 90 3D |  if_ae	jmp	#LR__1497
1237c     0C 4E 05 F1 | 	add	fp, #12
12380     A7 12 02 FB | 	rdlong	arg01, fp
12384     04 4E 05 F1 | 	add	fp, #4
12388     A7 30 02 FB | 	rdlong	local06, fp
1238c     0A 30 66 F0 | 	shl	local06, #10
12390     18 13 02 F1 | 	add	arg01, local06
12394     04 4E 05 F1 | 	add	fp, #4
12398     A7 30 02 FB | 	rdlong	local06, fp
1239c     18 13 02 F1 | 	add	arg01, local06
123a0     4E 00 00 FF 
123a4     B4 E4 05 F1 | 	add	objptr, ##40116
123a8     F2 30 02 F1 | 	add	local06, objptr
123ac     18 15 C2 FA | 	rdbyte	arg02, local06
123b0     09 15 42 FC | 	wrbyte	arg02, arg01
123b4     4E 00 00 FF 
123b8     B4 E4 85 F1 | 	sub	objptr, ##40116
123bc     A7 30 02 FB | 	rdlong	local06, fp
123c0     01 30 06 F1 | 	add	local06, #1
123c4     A7 30 62 FC | 	wrlong	local06, fp
123c8     14 4E 85 F1 | 	sub	fp, #20
123cc     98 FF 9F FD | 	jmp	#LR__1493
123d0                 | LR__1494
123d0     14 4E 05 F1 | 	add	fp, #20
123d4     A7 00 68 FC | 	wrlong	#0, fp
123d8     04 4E 05 F1 | 	add	fp, #4
123dc     A7 36 02 FB | 	rdlong	local09, fp
123e0     18 4E 85 F1 | 	sub	fp, #24
123e4                 | LR__1495
123e4     14 4E 05 F1 | 	add	fp, #20
123e8     A7 28 02 FB | 	rdlong	local02, fp
123ec     14 4E 85 F1 | 	sub	fp, #20
123f0     1B 29 52 F2 | 	cmps	local02, local09 wc
123f4     5C 00 90 3D |  if_ae	jmp	#LR__1496
123f8     0C 4E 05 F1 | 	add	fp, #12
123fc     A7 12 02 FB | 	rdlong	arg01, fp
12400     04 4E 05 F1 | 	add	fp, #4
12404     A7 34 02 FB | 	rdlong	local08, fp
12408     0A 34 66 F0 | 	shl	local08, #10
1240c     1A 13 02 F1 | 	add	arg01, local08
12410     04 4E 05 F1 | 	add	fp, #4
12414     A7 34 02 FB | 	rdlong	local08, fp
12418     1A 13 02 F1 | 	add	arg01, local08
1241c     14 4E 85 F1 | 	sub	fp, #20
12420     4E 00 00 FF 
12424     B4 E4 05 F1 | 	add	objptr, ##40116
12428     F2 34 02 F1 | 	add	local08, objptr
1242c     1A 15 C2 FA | 	rdbyte	arg02, local08
12430     4E 00 00 FF 
12434     B4 E4 85 F1 | 	sub	objptr, ##40116
12438     20 F3 B0 FD | 	call	#_pspoke
1243c     14 4E 05 F1 | 	add	fp, #20
12440     A7 34 02 FB | 	rdlong	local08, fp
12444     01 34 06 F1 | 	add	local08, #1
12448     A7 34 62 FC | 	wrlong	local08, fp
1244c     14 4E 85 F1 | 	sub	fp, #20
12450     90 FF 9F FD | 	jmp	#LR__1495
12454                 | LR__1496
12454                 | LR__1497
12454     14 4E 05 F1 | 	add	fp, #20
12458     A7 36 02 FB | 	rdlong	local09, fp
1245c     1B 31 02 F6 | 	mov	local06, local09
12460     02 30 66 F0 | 	shl	local06, #2
12464     50 00 00 FF 
12468     C4 E4 05 F1 | 	add	objptr, ##41156
1246c     F2 30 02 F1 | 	add	local06, objptr
12470     02 36 66 F0 | 	shl	local09, #2
12474     F2 36 02 F1 | 	add	local09, objptr
12478     1B 37 02 FB | 	rdlong	local09, local09
1247c     04 4E 05 F1 | 	add	fp, #4
12480     A7 34 02 FB | 	rdlong	local08, fp
12484     1A 37 02 F1 | 	add	local09, local08
12488     18 37 62 FC | 	wrlong	local09, local06
1248c     08 4E 85 F1 | 	sub	fp, #8
12490     A7 36 02 FB | 	rdlong	local09, fp
12494     01 36 06 F1 | 	add	local09, #1
12498     A7 36 62 FC | 	wrlong	local09, fp
1249c     10 4E 85 F1 | 	sub	fp, #16
124a0     50 00 00 FF 
124a4     C4 E4 85 F1 | 	sub	objptr, ##41156
124a8     40 FE 9F FD | 	jmp	#LR__1492
124ac                 | LR__1498
124ac                 | LR__1499
124ac     A7 F0 03 F6 | 	mov	ptra, fp
124b0     B2 00 A0 FD | 	call	#popregs_
124b4                 | _do_get_ret
124b4     2D 00 64 FD | 	ret
124b8                 | 
124b8                 | ' 
124b8                 | ' '-------------------- getenvsustain
124b8                 | ' 
124b8                 | ' sub do_getenvsustain
124b8                 | _do_getenvsustain
124b8     01 4A 05 F6 | 	mov	COUNT_, #1
124bc     A8 00 A0 FD | 	call	#pushregs_
124c0     10 F0 07 F1 | 	add	ptra, #16
124c4     4A 00 00 FF 
124c8     80 E4 05 F1 | 	add	objptr, ##38016
124cc     F2 26 02 FB | 	rdlong	local01, objptr
124d0     13 17 02 F6 | 	mov	arg03, local01
124d4     01 16 66 F0 | 	shl	arg03, #1
124d8     13 17 02 F1 | 	add	arg03, local01
124dc     02 16 66 F0 | 	shl	arg03, #2
124e0     03 00 00 FF 
124e4     04 E4 85 F1 | 	sub	objptr, ##1540
124e8     F2 16 02 F1 | 	add	arg03, objptr
124ec     0B 17 02 FB | 	rdlong	arg03, arg03
124f0     0C 4E 05 F1 | 	add	fp, #12
124f4     A7 16 62 FC | 	wrlong	arg03, fp
124f8                 | ' 
124f8                 | ' numpar=compiledline(lineptr_e).result.uresult
124f8                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
124f8     0C 4E 85 F1 | 	sub	fp, #12
124fc     02 16 16 F2 | 	cmp	arg03, #2 wc
12500     47 00 00 FF 
12504     7C E4 85 F1 | 	sub	objptr, ##36476
12508     0C 4E 05 C1 |  if_b	add	fp, #12
1250c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12510     0C 4E 85 C1 |  if_b	sub	fp, #12
12514     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12518     00 12 06 F6 | 	mov	arg01, #0
1251c     58 86 B1 FD | 	call	#__system___getiolock_0593
12520     FD 12 02 F6 | 	mov	arg01, result1
12524     AC 29 B1 FD | 	call	#__system___lockmem
12528     A9 01 00 FF 
1252c     0A 15 06 F6 | 	mov	arg02, ##@LR__5814
12530     00 12 06 F6 | 	mov	arg01, #0
12534     00 16 06 F6 | 	mov	arg03, #0
12538     90 36 B1 FD | 	call	#__system___basic_print_string
1253c     00 12 06 F6 | 	mov	arg01, #0
12540     34 86 B1 FD | 	call	#__system___getiolock_0593
12544     FD 00 68 FC | 	wrlong	#0, result1
12548     27 12 06 F6 | 	mov	arg01, #39
1254c     00 14 06 F6 | 	mov	arg02, #0
12550     D8 EF B0 FD | 	call	#_printerror
12554     64 00 90 FD | 	jmp	#LR__1501
12558                 | LR__1500
12558     30 A6 BF FD | 	call	#_pop
1255c     FD 26 02 F6 | 	mov	local01, result1
12560     FE 16 02 F6 | 	mov	arg03, result2
12564     A7 26 62 FC | 	wrlong	local01, fp
12568     04 4E 05 F1 | 	add	fp, #4
1256c     A7 16 62 FC | 	wrlong	arg03, fp
12570     04 4E 05 F1 | 	add	fp, #4
12574     A7 FE 61 FC | 	wrlong	result3, fp
12578     08 4E 85 F1 | 	sub	fp, #8
1257c     A7 12 02 F6 | 	mov	arg01, fp
12580     EC A7 BF FD | 	call	#_converttoint
12584     FD 26 02 F6 | 	mov	local01, result1
12588     01 26 66 F0 | 	shl	local01, #1
1258c     51 00 00 FF 
12590     F0 E5 05 F1 | 	add	objptr, ##41968
12594     F2 26 02 F1 | 	add	local01, objptr
12598     13 27 E2 FA | 	rdword	local01, local01
1259c     A7 26 62 FC | 	wrlong	local01, fp
125a0     08 4E 05 F1 | 	add	fp, #8
125a4     A7 38 68 FC | 	wrlong	#28, fp
125a8     08 4E 85 F1 | 	sub	fp, #8
125ac     A7 12 02 F6 | 	mov	arg01, fp
125b0     51 00 00 FF 
125b4     F0 E5 85 F1 | 	sub	objptr, ##41968
125b8     68 A6 BF FD | 	call	#_push
125bc                 | LR__1501
125bc     A7 F0 03 F6 | 	mov	ptra, fp
125c0     B2 00 A0 FD | 	call	#popregs_
125c4                 | _do_getenvsustain_ret
125c4     2D 00 64 FD | 	ret
125c8                 | 
125c8                 | ' 
125c8                 | ' '-------------------- getnotevalue
125c8                 | ' 
125c8                 | ' sub do_getnotevalue
125c8                 | _do_getnotevalue
125c8     01 4A 05 F6 | 	mov	COUNT_, #1
125cc     A8 00 A0 FD | 	call	#pushregs_
125d0     1C F0 07 F1 | 	add	ptra, #28
125d4     B4 A5 BF FD | 	call	#_pop
125d8     FF 14 02 F6 | 	mov	arg02, result3
125dc     10 4E 05 F1 | 	add	fp, #16
125e0     A7 FA 61 FC | 	wrlong	result1, fp
125e4     04 4E 05 F1 | 	add	fp, #4
125e8     A7 FC 61 FC | 	wrlong	result2, fp
125ec     04 4E 05 F1 | 	add	fp, #4
125f0     A7 14 62 FC | 	wrlong	arg02, fp
125f4     08 4E 85 F1 | 	sub	fp, #8
125f8     A7 12 02 F6 | 	mov	arg01, fp
125fc     10 4E 85 F1 | 	sub	fp, #16
12600     6C A7 BF FD | 	call	#_converttoint
12604     FD 14 52 F6 | 	abs	arg02, result1 wc
12608     0C 14 16 FD | 	qdiv	arg02, #12
1260c     0C 4E 05 F1 | 	add	fp, #12
12610     A7 FA 61 FC | 	wrlong	result1, fp
12614     14 00 00 FF 
12618     D8 E4 05 F1 | 	add	objptr, ##10456
1261c     08 4E 85 F1 | 	sub	fp, #8
12620     19 14 62 FD | 	getqy	arg02
12624     0A 15 82 F6 | 	negc	arg02, arg02
12628     02 14 66 F0 | 	shl	arg02, #2
1262c     F2 14 02 F1 | 	add	arg02, objptr
12630     0A 15 02 FB | 	rdlong	arg02, arg02
12634     A7 14 62 FC | 	wrlong	arg02, fp
12638     08 4E 05 F1 | 	add	fp, #8
1263c     A7 14 02 FB | 	rdlong	arg02, fp
12640     0A 15 52 F6 | 	abs	arg02, arg02 wc
12644     0C 14 16 FD | 	qdiv	arg02, #12
12648     0C 4E 85 F1 | 	sub	fp, #12
1264c     14 00 00 FF 
12650     D8 E4 85 F1 | 	sub	objptr, ##10456
12654     18 14 62 FD | 	getqx	arg02
12658     0A 13 82 F6 | 	negc	arg01, arg02
1265c     09 13 52 F6 | 	abs	arg01, arg01 wc
12660     1F 26 C6 C9 |  if_b	decod	local01, #31
12664     00 26 06 36 |  if_ae	mov	local01, #0
12668     E0 52 B1 FD | 	call	#__system___float_fromuns
1266c     13 FB 61 F5 | 	xor	result1, local01
12670     08 4E 05 F1 | 	add	fp, #8
12674     A7 FA 61 FC | 	wrlong	result1, fp
12678     FD 14 02 F6 | 	mov	arg02, result1
1267c     08 4E 85 F1 | 	sub	fp, #8
12680     1E 12 C6 F9 | 	decod	arg01, #30
12684     D0 65 B1 FD | 	call	#__system____builtin_powf
12688     FD 12 02 F6 | 	mov	arg01, result1
1268c     04 4E 05 F1 | 	add	fp, #4
12690     A7 14 02 FB | 	rdlong	arg02, fp
12694     04 4E 85 F1 | 	sub	fp, #4
12698     B4 56 B1 FD | 	call	#__system___float_mul
1269c     A7 FA 61 FC | 	wrlong	result1, fp
126a0     10 4E 05 F1 | 	add	fp, #16
126a4     A7 FA 61 FC | 	wrlong	result1, fp
126a8     08 4E 05 F1 | 	add	fp, #8
126ac     A7 3C 68 FC | 	wrlong	#30, fp
126b0     08 4E 85 F1 | 	sub	fp, #8
126b4     A7 12 02 F6 | 	mov	arg01, fp
126b8     10 4E 85 F1 | 	sub	fp, #16
126bc     64 A5 BF FD | 	call	#_push
126c0     A7 F0 03 F6 | 	mov	ptra, fp
126c4     B2 00 A0 FD | 	call	#popregs_
126c8                 | _do_getnotevalue_ret
126c8     2D 00 64 FD | 	ret
126cc                 | 
126cc                 | ' 
126cc                 | ' '-------------------- getpixel
126cc                 | ' 
126cc                 | ' sub do_getpixel
126cc                 | _do_getpixel
126cc     00 4A 05 F6 | 	mov	COUNT_, #0
126d0     A8 00 A0 FD | 	call	#pushregs_
126d4     24 F0 07 F1 | 	add	ptra, #36
126d8     4A 00 00 FF 
126dc     80 E4 05 F1 | 	add	objptr, ##38016
126e0     F2 16 02 FB | 	rdlong	arg03, objptr
126e4     0B 15 02 F6 | 	mov	arg02, arg03
126e8     01 14 66 F0 | 	shl	arg02, #1
126ec     0B 15 02 F1 | 	add	arg02, arg03
126f0     02 14 66 F0 | 	shl	arg02, #2
126f4     03 00 00 FF 
126f8     04 E4 85 F1 | 	sub	objptr, ##1540
126fc     F2 14 02 F1 | 	add	arg02, objptr
12700     0A 17 02 FB | 	rdlong	arg03, arg02
12704     18 4E 05 F1 | 	add	fp, #24
12708     A7 16 62 FC | 	wrlong	arg03, fp
1270c                 | ' 
1270c                 | ' numpar=compiledline(lineptr_e).result.uresult
1270c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
1270c     18 4E 85 F1 | 	sub	fp, #24
12710     02 16 0E F2 | 	cmp	arg03, #2 wz
12714     47 00 00 FF 
12718     7C E4 85 F1 | 	sub	objptr, ##36476
1271c     40 00 90 AD |  if_e	jmp	#LR__1510
12720     00 12 06 F6 | 	mov	arg01, #0
12724     50 84 B1 FD | 	call	#__system___getiolock_0593
12728     FD 12 02 F6 | 	mov	arg01, result1
1272c     A4 27 B1 FD | 	call	#__system___lockmem
12730     A9 01 00 FF 
12734     1A 15 06 F6 | 	mov	arg02, ##@LR__5815
12738     00 12 06 F6 | 	mov	arg01, #0
1273c     00 16 06 F6 | 	mov	arg03, #0
12740     88 34 B1 FD | 	call	#__system___basic_print_string
12744     00 12 06 F6 | 	mov	arg01, #0
12748     2C 84 B1 FD | 	call	#__system___getiolock_0593
1274c     FD 00 68 FC | 	wrlong	#0, result1
12750     27 12 06 F6 | 	mov	arg01, #39
12754     00 14 06 F6 | 	mov	arg02, #0
12758     D0 ED B0 FD | 	call	#_printerror
1275c     B4 00 90 FD | 	jmp	#LR__1511
12760                 | LR__1510
12760     28 A4 BF FD | 	call	#_pop
12764     FD 16 02 F6 | 	mov	arg03, result1
12768     FE 14 02 F6 | 	mov	arg02, result2
1276c     FF 12 02 F6 | 	mov	arg01, result3
12770     0C 4E 05 F1 | 	add	fp, #12
12774     A7 16 62 FC | 	wrlong	arg03, fp
12778     04 4E 05 F1 | 	add	fp, #4
1277c     A7 14 62 FC | 	wrlong	arg02, fp
12780     04 4E 05 F1 | 	add	fp, #4
12784     A7 12 62 FC | 	wrlong	arg01, fp
12788     14 4E 85 F1 | 	sub	fp, #20
1278c     FC A3 BF FD | 	call	#_pop
12790     FF 16 02 F6 | 	mov	arg03, result3
12794     A7 FA 61 FC | 	wrlong	result1, fp
12798     04 4E 05 F1 | 	add	fp, #4
1279c     A7 FC 61 FC | 	wrlong	result2, fp
127a0     04 4E 05 F1 | 	add	fp, #4
127a4     A7 16 62 FC | 	wrlong	arg03, fp
127a8     08 4E 85 F1 | 	sub	fp, #8
127ac     A7 12 02 F6 | 	mov	arg01, fp
127b0     BC A5 BF FD | 	call	#_converttoint
127b4     1C 4E 05 F1 | 	add	fp, #28
127b8     A7 FA 61 FC | 	wrlong	result1, fp
127bc     10 4E 85 F1 | 	sub	fp, #16
127c0     A7 12 02 F6 | 	mov	arg01, fp
127c4     0C 4E 85 F1 | 	sub	fp, #12
127c8     A4 A5 BF FD | 	call	#_converttoint
127cc     FD 16 02 F6 | 	mov	arg03, result1
127d0     20 4E 05 F1 | 	add	fp, #32
127d4     A7 16 62 FC | 	wrlong	arg03, fp
127d8     F2 12 02 FB | 	rdlong	arg01, objptr
127dc     04 4E 85 F1 | 	sub	fp, #4
127e0     A7 FE 01 FB | 	rdlong	result3, fp
127e4     FF 12 02 F1 | 	add	arg01, result3
127e8     1C 4E 85 F1 | 	sub	fp, #28
127ec     0A 16 66 F0 | 	shl	arg03, #10
127f0     0B 13 02 F1 | 	add	arg01, arg03
127f4     AC EF B0 FD | 	call	#_pspeek
127f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
127fc     A7 FA 61 FC | 	wrlong	result1, fp
12800     08 4E 05 F1 | 	add	fp, #8
12804     A7 3A 68 FC | 	wrlong	#29, fp
12808     08 4E 85 F1 | 	sub	fp, #8
1280c     A7 12 02 F6 | 	mov	arg01, fp
12810     10 A4 BF FD | 	call	#_push
12814                 | LR__1511
12814     A7 F0 03 F6 | 	mov	ptra, fp
12818     B2 00 A0 FD | 	call	#popregs_
1281c                 | _do_getpixel_ret
1281c     2D 00 64 FD | 	ret
12820                 | 
12820                 | ' 
12820                 | ' '-------------------- gettime
12820                 | ' 
12820                 | ' sub do_gettime
12820                 | _do_gettime
12820     02 4A 05 F6 | 	mov	COUNT_, #2
12824     A8 00 A0 FD | 	call	#pushregs_
12828     14 F0 07 F1 | 	add	ptra, #20
1282c                 | ' 
1282c                 | ' const asm 
1282c     1A 26 72 FD | 	getct	local01 wc
12830     1A 28 62 FD | 	getct	local02
12834                 | ' return hi1, lo1
12834     14 FD 01 F6 | 	mov	result2, local02
12838     A7 26 62 FC | 	wrlong	local01, fp
1283c     04 4E 05 F1 | 	add	fp, #4
12840     A7 FC 61 FC | 	wrlong	result2, fp
12844     0C 4E 05 F1 | 	add	fp, #12
12848     A7 3A 68 FC | 	wrlong	#29, fp
1284c     0C 4E 85 F1 | 	sub	fp, #12
12850     A7 12 02 FB | 	rdlong	arg01, fp
12854     04 4E 05 F1 | 	add	fp, #4
12858     A7 12 62 FC | 	wrlong	arg01, fp
1285c     08 4E 85 F1 | 	sub	fp, #8
12860     A7 12 02 FB | 	rdlong	arg01, fp
12864     0C 4E 05 F1 | 	add	fp, #12
12868     A7 12 62 FC | 	wrlong	arg01, fp
1286c     04 4E 85 F1 | 	sub	fp, #4
12870     A7 12 02 F6 | 	mov	arg01, fp
12874     08 4E 85 F1 | 	sub	fp, #8
12878     A8 A3 BF FD | 	call	#_push
1287c     A7 F0 03 F6 | 	mov	ptra, fp
12880     B2 00 A0 FD | 	call	#popregs_
12884                 | _do_gettime_ret
12884     2D 00 64 FD | 	ret
12888                 | 
12888                 | ' 
12888                 | ' '-------------------- gosub
12888                 | ' 
12888                 | ' sub do_gosub()
12888                 | _do_gosub
12888     50 00 00 FF 
1288c     34 E5 05 F1 | 	add	objptr, ##41268
12890     F2 00 02 FB | 	rdlong	_var01, objptr
12894     01 00 06 F1 | 	add	_var01, #1
12898     F2 00 62 FC | 	wrlong	_var01, objptr
1289c                 | ' gosubtop+=1
1289c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
1289c     06 00 00 FF 
128a0     B4 E4 85 F1 | 	sub	objptr, ##3252
128a4     F2 00 02 FB | 	rdlong	_var01, objptr
128a8     01 00 06 F1 | 	add	_var01, #1
128ac     00 03 02 F6 | 	mov	_var02, _var01
128b0     01 02 66 F0 | 	shl	_var02, #1
128b4     00 03 02 F1 | 	add	_var02, _var01
128b8     02 02 66 F0 | 	shl	_var02, #2
128bc     03 00 00 FF 
128c0     04 E4 85 F1 | 	sub	objptr, ##1540
128c4     F2 02 02 F1 | 	add	_var02, objptr
128c8     08 02 06 F1 | 	add	_var02, #8
128cc     01 03 02 FB | 	rdlong	_var02, _var02
128d0     FE 03 0E F2 | 	cmp	_var02, #510 wz
128d4     47 00 00 FF 
128d8     7C E4 85 F1 | 	sub	objptr, ##36476
128dc     58 00 90 5D |  if_ne	jmp	#LR__1520
128e0     50 00 00 FF 
128e4     34 E5 05 F1 | 	add	objptr, ##41268
128e8     F2 02 02 FB | 	rdlong	_var02, objptr
128ec     03 02 66 F0 | 	shl	_var02, #3
128f0     03 00 00 FF 
128f4     88 E5 85 F1 | 	sub	objptr, ##1928
128f8     F2 02 02 F1 | 	add	_var02, objptr
128fc     03 00 00 FF 
12900     0C E5 05 F1 | 	add	objptr, ##1804
12904     F2 00 02 FB | 	rdlong	_var01, objptr
12908     01 01 62 FC | 	wrlong	_var01, _var02
1290c     7C E4 05 F1 | 	add	objptr, #124
12910     F2 02 02 FB | 	rdlong	_var02, objptr
12914     03 02 66 F0 | 	shl	_var02, #3
12918     03 00 00 FF 
1291c     88 E5 85 F1 | 	sub	objptr, ##1928
12920     F2 02 02 F1 | 	add	_var02, objptr
12924     04 02 06 F1 | 	add	_var02, #4
12928     01 01 68 FC | 	wrlong	#0, _var02
1292c     4C 00 00 FF 
12930     AC E5 85 F1 | 	sub	objptr, ##39340
12934     64 00 90 FD | 	jmp	#LR__1521
12938                 | LR__1520
12938     50 00 00 FF 
1293c     34 E5 05 F1 | 	add	objptr, ##41268
12940     F2 02 02 FB | 	rdlong	_var02, objptr
12944     03 02 66 F0 | 	shl	_var02, #3
12948     03 00 00 FF 
1294c     88 E5 85 F1 | 	sub	objptr, ##1928
12950     F2 02 02 F1 | 	add	_var02, objptr
12954     03 00 00 FF 
12958     14 E5 05 F1 | 	add	objptr, ##1812
1295c     F2 00 02 FB | 	rdlong	_var01, objptr
12960     01 01 62 FC | 	wrlong	_var01, _var02
12964     74 E4 05 F1 | 	add	objptr, #116
12968     F2 02 02 FB | 	rdlong	_var02, objptr
1296c     03 02 66 F0 | 	shl	_var02, #3
12970     03 00 00 FF 
12974     88 E5 85 F1 | 	sub	objptr, ##1928
12978     F2 02 02 F1 | 	add	_var02, objptr
1297c     02 00 00 FF 
12980     2C E5 85 F1 | 	sub	objptr, ##1324
12984     F2 00 02 FB | 	rdlong	_var01, objptr
12988     4A 00 00 FF 
1298c     80 E4 85 F1 | 	sub	objptr, ##38016
12990     02 00 06 F1 | 	add	_var01, #2
12994     04 02 06 F1 | 	add	_var02, #4
12998     01 01 62 FC | 	wrlong	_var01, _var02
1299c                 | LR__1521
1299c                 | _do_gosub_ret
1299c     2D 00 64 FD | 	ret
129a0                 | 
129a0                 | ' 
129a0                 | ' '--------------------- goto
129a0                 | ' 
129a0                 | ' '------- fast goto
129a0                 | ' 
129a0                 | ' sub do_fast_goto
129a0                 | _do_fast_goto
129a0     02 4A 05 F6 | 	mov	COUNT_, #2
129a4     A8 00 A0 FD | 	call	#pushregs_
129a8                 | _do_fast_goto_enter
129a8     4A 00 00 FF 
129ac     80 E4 05 F1 | 	add	objptr, ##38016
129b0     F2 12 02 FB | 	rdlong	arg01, objptr
129b4     09 27 02 F6 | 	mov	local01, arg01
129b8     01 26 66 F0 | 	shl	local01, #1
129bc     09 27 02 F1 | 	add	local01, arg01
129c0     02 26 66 F0 | 	shl	local01, #2
129c4     03 00 00 FF 
129c8     04 E4 85 F1 | 	sub	objptr, ##1540
129cc     F2 26 02 F1 | 	add	local01, objptr
129d0     13 29 02 FB | 	rdlong	local02, local01
129d4     14 13 02 F6 | 	mov	arg01, local02
129d8     47 00 00 FF 
129dc     7C E4 85 F1 | 	sub	objptr, ##36476
129e0     18 EE B0 FD | 	call	#_pslpeek
129e4     FD 12 02 F6 | 	mov	arg01, result1
129e8                 | ' 
129e8                 | ' testptr=compiledline(lineptr_e).result.uresult
129e8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
129e8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
129e8     4A 00 00 FF 
129ec     80 E4 05 F1 | 	add	objptr, ##38016
129f0     F2 FA 01 FB | 	rdlong	result1, objptr
129f4     FD 26 02 F6 | 	mov	local01, result1
129f8     01 26 66 F0 | 	shl	local01, #1
129fc     FD 26 02 F1 | 	add	local01, result1
12a00     02 26 66 F0 | 	shl	local01, #2
12a04     03 00 00 FF 
12a08     04 E4 85 F1 | 	sub	objptr, ##1540
12a0c     F2 26 02 F1 | 	add	local01, objptr
12a10     04 26 06 F1 | 	add	local01, #4
12a14     13 27 02 FB | 	rdlong	local01, local01
12a18     13 13 0A F2 | 	cmp	arg01, local01 wz
12a1c     47 00 00 FF 
12a20     7C E4 85 F1 | 	sub	objptr, ##36476
12a24     58 00 90 5D |  if_ne	jmp	#LR__1530
12a28     50 00 00 FF 
12a2c     B8 E4 05 F1 | 	add	objptr, ##41144
12a30     F2 28 62 FC | 	wrlong	local02, objptr
12a34     06 00 00 FF 
12a38     3C E4 85 F1 | 	sub	objptr, ##3132
12a3c     F2 28 02 FB | 	rdlong	local02, objptr
12a40     01 28 86 F1 | 	sub	local02, #1
12a44     04 E4 05 F1 | 	add	objptr, #4
12a48     F2 28 62 FC | 	wrlong	local02, objptr
12a4c                 | '   runptr=testptr
12a4c                 | '   lineptr_e=lineptr-1
12a4c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12a4c     06 00 00 FF 
12a50     84 E4 05 F1 | 	add	objptr, ##3204
12a54     F2 28 02 FB | 	rdlong	local02, objptr
12a58     50 00 00 FF 
12a5c     04 E5 85 F1 | 	sub	objptr, ##41220
12a60     FF FF 3F FF 
12a64     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12a68     50 00 00 AF 
12a6c     04 E5 05 A1 |  if_e	add	objptr, ##41220
12a70     F2 00 68 AC |  if_e	wrlong	#0, objptr
12a74     50 00 00 AF 
12a78     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12a7c     04 00 90 FD | 	jmp	#LR__1531
12a80                 | LR__1530
12a80     0C 00 B0 FD | 	call	#_do_find_goto
12a84                 | LR__1531
12a84     A7 F0 03 F6 | 	mov	ptra, fp
12a88     B2 00 A0 FD | 	call	#popregs_
12a8c                 | _do_fast_goto_ret
12a8c     2D 00 64 FD | 	ret
12a90                 | 
12a90                 | ' 
12a90                 | ' '------- find goto  
12a90                 | ' 
12a90                 | ' sub do_find_goto
12a90                 | _do_find_goto
12a90     03 4A 05 F6 | 	mov	COUNT_, #3
12a94     A8 00 A0 FD | 	call	#pushregs_
12a98     24 F0 07 F1 | 	add	ptra, #36
12a9c                 | _do_find_goto_enter
12a9c     4A 00 00 FF 
12aa0     80 E4 05 F1 | 	add	objptr, ##38016
12aa4     F2 26 02 FB | 	rdlong	local01, objptr
12aa8     13 29 02 F6 | 	mov	local02, local01
12aac     01 28 66 F0 | 	shl	local02, #1
12ab0     13 29 02 F1 | 	add	local02, local01
12ab4     02 28 66 F0 | 	shl	local02, #2
12ab8     03 00 00 FF 
12abc     04 E4 85 F1 | 	sub	objptr, ##1540
12ac0     F2 28 02 F1 | 	add	local02, objptr
12ac4     04 28 06 F1 | 	add	local02, #4
12ac8     14 29 02 FB | 	rdlong	local02, local02
12acc     A7 28 62 FC | 	wrlong	local02, fp
12ad0     03 00 00 FF 
12ad4     0C E4 05 F1 | 	add	objptr, ##1548
12ad8     F2 2A 02 FB | 	rdlong	local03, objptr
12adc     4A 00 00 FF 
12ae0     88 E4 85 F1 | 	sub	objptr, ##38024
12ae4     04 4E 05 F1 | 	add	fp, #4
12ae8     A7 2A 62 FC | 	wrlong	local03, fp
12aec     04 4E 85 F1 | 	sub	fp, #4
12af0                 | ' 
12af0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12af0                 | ' gotoptr=programstart
12af0                 | ' do
12af0                 | LR__1540
12af0     0C 4E 05 F1 | 	add	fp, #12
12af4     A7 12 02 F6 | 	mov	arg01, fp
12af8     08 4E 85 F1 | 	sub	fp, #8
12afc     A7 14 02 FB | 	rdlong	arg02, fp
12b00     04 4E 85 F1 | 	sub	fp, #4
12b04     18 16 06 F6 | 	mov	arg03, #24
12b08     0B 00 00 FF 
12b0c     CC E4 05 F1 | 	add	objptr, ##5836
12b10     80 17 B1 FD | 	call	#_psram_spin2_read1
12b14     0B 00 00 FF 
12b18     CC E4 85 F1 | 	sub	objptr, ##5836
12b1c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12b1c                 | '   if gotoheader(0)<>$FFFFFFFF then
12b1c     0C 4E 05 F1 | 	add	fp, #12
12b20     A7 2A 02 FB | 	rdlong	local03, fp
12b24     0C 4E 85 F1 | 	sub	fp, #12
12b28     FF FF 7F FF 
12b2c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
12b30     24 00 90 AD |  if_e	jmp	#LR__1541
12b34     04 4E 05 F1 | 	add	fp, #4
12b38     A7 2A 02 FB | 	rdlong	local03, fp
12b3c     04 4E 05 F1 | 	add	fp, #4
12b40     A7 2A 62 FC | 	wrlong	local03, fp
12b44     18 4E 05 F1 | 	add	fp, #24
12b48     A7 2A 02 FB | 	rdlong	local03, fp
12b4c     1C 4E 85 F1 | 	sub	fp, #28
12b50     A7 2A 62 FC | 	wrlong	local03, fp
12b54     04 4E 85 F1 | 	sub	fp, #4
12b58                 | LR__1541
12b58     20 4E 05 F1 | 	add	fp, #32
12b5c     A7 2A 02 FB | 	rdlong	local03, fp
12b60     20 4E 85 F1 | 	sub	fp, #32
12b64     FF FF 3F FF 
12b68     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12b6c     0C 4E 05 51 |  if_ne	add	fp, #12
12b70     A7 26 02 5B |  if_ne	rdlong	local01, fp
12b74     0C 4E 85 51 |  if_ne	sub	fp, #12
12b78     FF FF 7F 5F 
12b7c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12b80     18 00 90 AD |  if_e	jmp	#LR__1542
12b84     0C 4E 05 F1 | 	add	fp, #12
12b88     A7 2A 02 FB | 	rdlong	local03, fp
12b8c     0C 4E 85 F1 | 	sub	fp, #12
12b90     A7 28 02 FB | 	rdlong	local02, fp
12b94     14 2B 0A F2 | 	cmp	local03, local02 wz
12b98     54 FF 9F 5D |  if_ne	jmp	#LR__1540
12b9c                 | LR__1542
12b9c                 | ' 
12b9c                 | ' if gotoheader(0)=gotoline then
12b9c     0C 4E 05 F1 | 	add	fp, #12
12ba0     A7 2A 02 FB | 	rdlong	local03, fp
12ba4     0C 4E 85 F1 | 	sub	fp, #12
12ba8     A7 26 02 FB | 	rdlong	local01, fp
12bac     13 2B 0A F2 | 	cmp	local03, local01 wz
12bb0     D8 00 90 5D |  if_ne	jmp	#LR__1543
12bb4     4A 00 00 FF 
12bb8     80 E4 05 F1 | 	add	objptr, ##38016
12bbc     F2 26 02 FB | 	rdlong	local01, objptr
12bc0     13 29 02 F6 | 	mov	local02, local01
12bc4     01 28 66 F0 | 	shl	local02, #1
12bc8     13 29 02 F1 | 	add	local02, local01
12bcc     02 28 66 F0 | 	shl	local02, #2
12bd0     03 00 00 FF 
12bd4     04 E4 85 F1 | 	sub	objptr, ##1540
12bd8     F2 28 02 F1 | 	add	local02, objptr
12bdc     08 4E 05 F1 | 	add	fp, #8
12be0     A7 2A 02 FB | 	rdlong	local03, fp
12be4     14 2B 62 FC | 	wrlong	local03, local02
12be8     03 00 00 FF 
12bec     04 E4 05 F1 | 	add	objptr, ##1540
12bf0     F2 26 02 FB | 	rdlong	local01, objptr
12bf4     13 29 02 F6 | 	mov	local02, local01
12bf8     01 28 66 F0 | 	shl	local02, #1
12bfc     13 29 02 F1 | 	add	local02, local01
12c00     02 28 66 F0 | 	shl	local02, #2
12c04     03 00 00 FF 
12c08     04 E4 85 F1 | 	sub	objptr, ##1540
12c0c     F2 28 02 F1 | 	add	local02, objptr
12c10     08 28 06 F1 | 	add	local02, #8
12c14     14 9D 68 FC | 	wrlong	#78, local02
12c18     03 00 00 FF 
12c1c     04 E4 05 F1 | 	add	objptr, ##1540
12c20     F2 28 02 FB | 	rdlong	local02, objptr
12c24     14 13 02 F6 | 	mov	arg01, local02
12c28     01 12 66 F0 | 	shl	arg01, #1
12c2c     14 13 02 F1 | 	add	arg01, local02
12c30     02 12 66 F0 | 	shl	arg01, #2
12c34     03 00 00 FF 
12c38     04 E4 85 F1 | 	sub	objptr, ##1540
12c3c     F2 12 02 F1 | 	add	arg01, objptr
12c40     09 00 00 FF 
12c44     44 E4 05 F1 | 	add	objptr, ##4676
12c48     F2 14 02 FB | 	rdlong	arg02, objptr
12c4c     02 2A 06 F6 | 	mov	local03, #2
12c50     14 2B 02 F1 | 	add	local03, local02
12c54     0B 00 00 FF 
12c58     5C E4 85 F1 | 	sub	objptr, ##5724
12c5c     F2 16 02 FB | 	rdlong	arg03, objptr
12c60     0B 2B 02 FD | 	qmul	local03, arg03
12c64     08 4E 85 F1 | 	sub	fp, #8
12c68     39 00 00 FF 
12c6c     98 E5 85 F1 | 	sub	objptr, ##29592
12c70     18 2A 62 FD | 	getqx	local03
12c74     15 15 02 F1 | 	add	arg02, local03
12c78     B4 16 B1 FD | 	call	#_psram_spin2_write
12c7c     0B 00 00 FF 
12c80     CC E4 85 F1 | 	sub	objptr, ##5836
12c84     18 FD BF FD | 	call	#_do_fast_goto
12c88     0C 00 90 FD | 	jmp	#LR__1544
12c8c                 | LR__1543
12c8c     26 12 06 F6 | 	mov	arg01, #38
12c90     00 14 06 F6 | 	mov	arg02, #0
12c94     94 E8 B0 FD | 	call	#_printerror
12c98                 | LR__1544
12c98     A7 F0 03 F6 | 	mov	ptra, fp
12c9c     B2 00 A0 FD | 	call	#popregs_
12ca0                 | _do_find_goto_ret
12ca0     2D 00 64 FD | 	ret
12ca4                 | 
12ca4                 | ' 
12ca4                 | ' '------- slow goto  
12ca4                 | ' 
12ca4                 | ' sub do_slow_goto
12ca4                 | _do_slow_goto
12ca4     02 4A 05 F6 | 	mov	COUNT_, #2
12ca8     A8 00 A0 FD | 	call	#pushregs_
12cac     30 F0 07 F1 | 	add	ptra, #48
12cb0     D8 9E BF FD | 	call	#_pop
12cb4     FF 26 02 F6 | 	mov	local01, result3
12cb8     24 4E 05 F1 | 	add	fp, #36
12cbc     A7 FA 61 FC | 	wrlong	result1, fp
12cc0     04 4E 05 F1 | 	add	fp, #4
12cc4     A7 FC 61 FC | 	wrlong	result2, fp
12cc8     04 4E 05 F1 | 	add	fp, #4
12ccc     A7 26 62 FC | 	wrlong	local01, fp
12cd0     08 4E 85 F1 | 	sub	fp, #8
12cd4     A7 12 02 F6 | 	mov	arg01, fp
12cd8     24 4E 85 F1 | 	sub	fp, #36
12cdc     90 A0 BF FD | 	call	#_converttoint
12ce0     A7 FA 61 FC | 	wrlong	result1, fp
12ce4     4A 00 00 FF 
12ce8     88 E4 05 F1 | 	add	objptr, ##38024
12cec     F2 28 02 FB | 	rdlong	local02, objptr
12cf0     4A 00 00 FF 
12cf4     88 E4 85 F1 | 	sub	objptr, ##38024
12cf8     04 4E 05 F1 | 	add	fp, #4
12cfc     A7 28 62 FC | 	wrlong	local02, fp
12d00     04 4E 85 F1 | 	sub	fp, #4
12d04                 | ' 
12d04                 | ' t1=pop() : gotoline=converttoint(t1)
12d04                 | ' gotoptr=programstart
12d04                 | ' do
12d04                 | LR__1550
12d04     0C 4E 05 F1 | 	add	fp, #12
12d08     A7 12 02 F6 | 	mov	arg01, fp
12d0c     08 4E 85 F1 | 	sub	fp, #8
12d10     A7 14 02 FB | 	rdlong	arg02, fp
12d14     04 4E 85 F1 | 	sub	fp, #4
12d18     18 16 06 F6 | 	mov	arg03, #24
12d1c     0B 00 00 FF 
12d20     CC E4 05 F1 | 	add	objptr, ##5836
12d24     6C 15 B1 FD | 	call	#_psram_spin2_read1
12d28     0B 00 00 FF 
12d2c     CC E4 85 F1 | 	sub	objptr, ##5836
12d30                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12d30                 | '   if gotoheader(0)<>$FFFFFFFF then
12d30     0C 4E 05 F1 | 	add	fp, #12
12d34     A7 28 02 FB | 	rdlong	local02, fp
12d38     0C 4E 85 F1 | 	sub	fp, #12
12d3c     FF FF 7F FF 
12d40     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12d44     24 00 90 AD |  if_e	jmp	#LR__1551
12d48     04 4E 05 F1 | 	add	fp, #4
12d4c     A7 28 02 FB | 	rdlong	local02, fp
12d50     04 4E 05 F1 | 	add	fp, #4
12d54     A7 28 62 FC | 	wrlong	local02, fp
12d58     18 4E 05 F1 | 	add	fp, #24
12d5c     A7 28 02 FB | 	rdlong	local02, fp
12d60     1C 4E 85 F1 | 	sub	fp, #28
12d64     A7 28 62 FC | 	wrlong	local02, fp
12d68     04 4E 85 F1 | 	sub	fp, #4
12d6c                 | LR__1551
12d6c     20 4E 05 F1 | 	add	fp, #32
12d70     A7 28 02 FB | 	rdlong	local02, fp
12d74     20 4E 85 F1 | 	sub	fp, #32
12d78     FF FF 3F FF 
12d7c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12d80     0C 4E 05 51 |  if_ne	add	fp, #12
12d84     A7 26 02 5B |  if_ne	rdlong	local01, fp
12d88     0C 4E 85 51 |  if_ne	sub	fp, #12
12d8c     FF FF 7F 5F 
12d90     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12d94     18 00 90 AD |  if_e	jmp	#LR__1552
12d98     0C 4E 05 F1 | 	add	fp, #12
12d9c     A7 28 02 FB | 	rdlong	local02, fp
12da0     0C 4E 85 F1 | 	sub	fp, #12
12da4     A7 16 02 FB | 	rdlong	arg03, fp
12da8     0B 29 0A F2 | 	cmp	local02, arg03 wz
12dac     54 FF 9F 5D |  if_ne	jmp	#LR__1550
12db0                 | LR__1552
12db0                 | ' if gotoheader(0)=gotoline then  
12db0     0C 4E 05 F1 | 	add	fp, #12
12db4     A7 28 02 FB | 	rdlong	local02, fp
12db8     0C 4E 85 F1 | 	sub	fp, #12
12dbc     A7 26 02 FB | 	rdlong	local01, fp
12dc0     13 29 0A F2 | 	cmp	local02, local01 wz
12dc4     60 00 90 5D |  if_ne	jmp	#LR__1553
12dc8     08 4E 05 F1 | 	add	fp, #8
12dcc     A7 28 02 FB | 	rdlong	local02, fp
12dd0     08 4E 85 F1 | 	sub	fp, #8
12dd4     50 00 00 FF 
12dd8     B8 E4 05 F1 | 	add	objptr, ##41144
12ddc     F2 28 62 FC | 	wrlong	local02, objptr
12de0     06 00 00 FF 
12de4     3C E4 85 F1 | 	sub	objptr, ##3132
12de8     F2 28 02 FB | 	rdlong	local02, objptr
12dec     01 28 86 F1 | 	sub	local02, #1
12df0     04 E4 05 F1 | 	add	objptr, #4
12df4     F2 28 62 FC | 	wrlong	local02, objptr
12df8                 | '    runptr=oldgotoptr
12df8                 | '    lineptr_e=lineptr-1
12df8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12df8     06 00 00 FF 
12dfc     84 E4 05 F1 | 	add	objptr, ##3204
12e00     F2 28 02 FB | 	rdlong	local02, objptr
12e04     50 00 00 FF 
12e08     04 E5 85 F1 | 	sub	objptr, ##41220
12e0c     FF FF 3F FF 
12e10     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12e14     50 00 00 AF 
12e18     04 E5 05 A1 |  if_e	add	objptr, ##41220
12e1c     F2 00 68 AC |  if_e	wrlong	#0, objptr
12e20     50 00 00 AF 
12e24     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12e28                 | LR__1553
12e28     A7 F0 03 F6 | 	mov	ptra, fp
12e2c     B2 00 A0 FD | 	call	#popregs_
12e30                 | _do_slow_goto_ret
12e30     2D 00 64 FD | 	ret
12e34                 | 
12e34                 | ' 
12e34                 | ' ' ----------------  hex$
12e34                 | ' 
12e34                 | ' sub do_hex
12e34                 | _do_hex
12e34     01 4A 05 F6 | 	mov	COUNT_, #1
12e38     A8 00 A0 FD | 	call	#pushregs_
12e3c     18 F0 07 F1 | 	add	ptra, #24
12e40     4A 00 00 FF 
12e44     80 E4 05 F1 | 	add	objptr, ##38016
12e48     F2 26 02 FB | 	rdlong	local01, objptr
12e4c     13 17 02 F6 | 	mov	arg03, local01
12e50     01 16 66 F0 | 	shl	arg03, #1
12e54     13 17 02 F1 | 	add	arg03, local01
12e58     02 16 66 F0 | 	shl	arg03, #2
12e5c     03 00 00 FF 
12e60     04 E4 85 F1 | 	sub	objptr, ##1540
12e64     F2 16 02 F1 | 	add	arg03, objptr
12e68     0B 17 02 FB | 	rdlong	arg03, arg03
12e6c     0C 4E 05 F1 | 	add	fp, #12
12e70     A7 16 62 FC | 	wrlong	arg03, fp
12e74                 | ' 
12e74                 | ' numpar=compiledline(lineptr_e).result.uresult
12e74                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12e74     0C 4E 85 F1 | 	sub	fp, #12
12e78     03 16 16 F2 | 	cmp	arg03, #3 wc
12e7c     47 00 00 FF 
12e80     7C E4 85 F1 | 	sub	objptr, ##36476
12e84     0C 4E 05 C1 |  if_b	add	fp, #12
12e88     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12e8c     0C 4E 85 C1 |  if_b	sub	fp, #12
12e90     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
12e94     00 12 06 F6 | 	mov	arg01, #0
12e98     DC 7C B1 FD | 	call	#__system___getiolock_0593
12e9c     FD 12 02 F6 | 	mov	arg01, result1
12ea0     30 20 B1 FD | 	call	#__system___lockmem
12ea4     A9 01 00 FF 
12ea8     25 15 06 F6 | 	mov	arg02, ##@LR__5816
12eac     00 12 06 F6 | 	mov	arg01, #0
12eb0     00 16 06 F6 | 	mov	arg03, #0
12eb4     14 2D B1 FD | 	call	#__system___basic_print_string
12eb8     00 12 06 F6 | 	mov	arg01, #0
12ebc     B8 7C B1 FD | 	call	#__system___getiolock_0593
12ec0     FD 00 68 FC | 	wrlong	#0, result1
12ec4     27 12 06 F6 | 	mov	arg01, #39
12ec8     00 14 06 F6 | 	mov	arg02, #0
12ecc     5C E6 B0 FD | 	call	#_printerror
12ed0     B8 00 90 FD | 	jmp	#LR__1563
12ed4                 | LR__1560
12ed4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12ed4     0C 4E 05 F1 | 	add	fp, #12
12ed8     A7 26 02 FB | 	rdlong	local01, fp
12edc     0C 4E 85 F1 | 	sub	fp, #12
12ee0     02 26 0E F2 | 	cmp	local01, #2 wz
12ee4     38 00 90 5D |  if_ne	jmp	#LR__1561
12ee8     A0 9C BF FD | 	call	#_pop
12eec     FF 26 02 F6 | 	mov	local01, result3
12ef0     A7 FA 61 FC | 	wrlong	result1, fp
12ef4     04 4E 05 F1 | 	add	fp, #4
12ef8     A7 FC 61 FC | 	wrlong	result2, fp
12efc     04 4E 05 F1 | 	add	fp, #4
12f00     A7 26 62 FC | 	wrlong	local01, fp
12f04     08 4E 85 F1 | 	sub	fp, #8
12f08     A7 12 02 F6 | 	mov	arg01, fp
12f0c     60 9E BF FD | 	call	#_converttoint
12f10     14 4E 05 F1 | 	add	fp, #20
12f14     A7 FA 61 FC | 	wrlong	result1, fp
12f18     14 4E 85 F1 | 	sub	fp, #20
12f1c     0C 00 90 FD | 	jmp	#LR__1562
12f20                 | LR__1561
12f20     14 4E 05 F1 | 	add	fp, #20
12f24     A7 10 68 FC | 	wrlong	#8, fp
12f28     14 4E 85 F1 | 	sub	fp, #20
12f2c                 | LR__1562
12f2c     5C 9C BF FD | 	call	#_pop
12f30     FF 26 02 F6 | 	mov	local01, result3
12f34     A7 FA 61 FC | 	wrlong	result1, fp
12f38     04 4E 05 F1 | 	add	fp, #4
12f3c     A7 FC 61 FC | 	wrlong	result2, fp
12f40     04 4E 05 F1 | 	add	fp, #4
12f44     A7 26 62 FC | 	wrlong	local01, fp
12f48     08 4E 85 F1 | 	sub	fp, #8
12f4c     A7 12 02 F6 | 	mov	arg01, fp
12f50     1C 9E BF FD | 	call	#_converttoint
12f54     10 4E 05 F1 | 	add	fp, #16
12f58     A7 FA 61 FC | 	wrlong	result1, fp
12f5c     FD 12 02 F6 | 	mov	arg01, result1
12f60     04 4E 05 F1 | 	add	fp, #4
12f64     A7 14 02 FB | 	rdlong	arg02, fp
12f68     14 4E 85 F1 | 	sub	fp, #20
12f6c     10 16 06 F6 | 	mov	arg03, #16
12f70     34 42 B1 FD | 	call	#__system__Number_S
12f74     A7 FA 61 FC | 	wrlong	result1, fp
12f78     08 4E 05 F1 | 	add	fp, #8
12f7c     A7 3E 68 FC | 	wrlong	#31, fp
12f80     08 4E 85 F1 | 	sub	fp, #8
12f84     A7 12 02 F6 | 	mov	arg01, fp
12f88     98 9C BF FD | 	call	#_push
12f8c                 | LR__1563
12f8c     A7 F0 03 F6 | 	mov	ptra, fp
12f90     B2 00 A0 FD | 	call	#popregs_
12f94                 | _do_hex_ret
12f94     2D 00 64 FD | 	ret
12f98                 | 
12f98                 | ' 
12f98                 | ' ' ----------------  if
12f98                 | ' 
12f98                 | ' sub do_if
12f98                 | _do_if
12f98     05 4A 05 F6 | 	mov	COUNT_, #5
12f9c     A8 00 A0 FD | 	call	#pushregs_
12fa0     E8 9B BF FD | 	call	#_pop
12fa4     FD 26 0A F6 | 	mov	local01, result1 wz
12fa8     FE 28 02 F6 | 	mov	local02, result2
12fac     FF 2A 02 F6 | 	mov	local03, result3
12fb0                 | ' t1=pop()
12fb0                 | ' ' if uresult=0, jump over else
12fb0                 | ' if t1.result.uresult = 0 then 
12fb0     BC 00 90 5D |  if_ne	jmp	#LR__1572
12fb4                 | '   for i=lineptr_e to lineptr-1
12fb4     4A 00 00 FF 
12fb8     80 E4 05 F1 | 	add	objptr, ##38016
12fbc     F2 2C 02 FB | 	rdlong	local04, objptr
12fc0     04 E4 85 F1 | 	sub	objptr, #4
12fc4     F2 2E 02 FB | 	rdlong	local05, objptr
12fc8     4A 00 00 FF 
12fcc     7C E4 85 F1 | 	sub	objptr, ##38012
12fd0                 | LR__1570
12fd0     17 2D 52 F2 | 	cmps	local04, local05 wc
12fd4     78 00 90 3D |  if_ae	jmp	#LR__1571
12fd8     16 FF 01 F6 | 	mov	result3, local04
12fdc     01 FE 65 F0 | 	shl	result3, #1
12fe0     16 FF 01 F1 | 	add	result3, local04
12fe4     02 FE 65 F0 | 	shl	result3, #2
12fe8     47 00 00 FF 
12fec     7C E4 05 F1 | 	add	objptr, ##36476
12ff0     F2 FE 01 F1 | 	add	result3, objptr
12ff4     FF 26 02 FB | 	rdlong	local01, result3
12ff8     04 FE 05 F1 | 	add	result3, #4
12ffc     FF FC 01 FB | 	rdlong	result2, result3
13000     16 FF 01 F6 | 	mov	result3, local04
13004     01 FE 65 F0 | 	shl	result3, #1
13008     16 FF 01 F1 | 	add	result3, local04
1300c     02 FE 65 F0 | 	shl	result3, #2
13010     F2 FE 01 F1 | 	add	result3, objptr
13014     08 FE 05 F1 | 	add	result3, #8
13018     FF FE 01 FB | 	rdlong	result3, result3
1301c     FE 28 02 F6 | 	mov	local02, result2
13020     FF 2A 02 F6 | 	mov	local03, result3
13024                 | '     t1=compiledline(i)
13024                 | '     if t1.result_type=token_else then lineptr_e=i : return
13024     5A 2A 0E F2 | 	cmp	local03, #90 wz
13028     47 00 00 FF 
1302c     7C E4 85 F1 | 	sub	objptr, ##36476
13030     4A 00 00 AF 
13034     80 E4 05 A1 |  if_e	add	objptr, ##38016
13038     F2 2C 62 AC |  if_e	wrlong	local04, objptr
1303c     4A 00 00 AF 
13040     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13044     28 00 90 AD |  if_e	jmp	#LR__1573
13048     01 2C 06 F1 | 	add	local04, #1
1304c     80 FF 9F FD | 	jmp	#LR__1570
13050                 | LR__1571
13050     4A 00 00 FF 
13054     7C E4 05 F1 | 	add	objptr, ##38012
13058     F2 2E 02 FB | 	rdlong	local05, objptr
1305c     01 2E 86 F1 | 	sub	local05, #1
13060     04 E4 05 F1 | 	add	objptr, #4
13064     F2 2E 62 FC | 	wrlong	local05, objptr
13068     4A 00 00 FF 
1306c     80 E4 85 F1 | 	sub	objptr, ##38016
13070                 | LR__1572
13070                 | LR__1573
13070     A7 F0 03 F6 | 	mov	ptra, fp
13074     B2 00 A0 FD | 	call	#popregs_
13078                 | _do_if_ret
13078     2D 00 64 FD | 	ret
1307c                 | 
1307c                 | ' 
1307c                 | ' ' ----------------  inkey$
1307c                 | ' 
1307c                 | ' sub do_inkey
1307c                 | _do_inkey
1307c     02 4A 05 F6 | 	mov	COUNT_, #2
13080     A8 00 A0 FD | 	call	#pushregs_
13084     0C F0 07 F1 | 	add	ptra, #12
13088     34 16 B1 FD | 	call	#_usbnew_spin2_get_key
1308c     45 00 00 FF 
13090     74 E4 05 F1 | 	add	objptr, ##35444
13094     F2 FA 61 FC | 	wrlong	result1, objptr
13098                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13098     45 00 00 FF 
1309c     74 E4 85 F1 | 	sub	objptr, ##35444
130a0     00 FA 0D F2 | 	cmp	result1, #0 wz
130a4     94 00 90 AD |  if_e	jmp	#LR__1581
130a8     45 00 00 FF 
130ac     74 E4 05 F1 | 	add	objptr, ##35444
130b0     F2 1C 02 FB | 	rdlong	arg06, objptr
130b4     45 00 00 FF 
130b8     74 E4 85 F1 | 	sub	objptr, ##35444
130bc     00 00 40 FF 
130c0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
130c4     45 00 00 CF 
130c8     74 E4 05 C1 |  if_b	add	objptr, ##35444
130cc     F2 26 02 CB |  if_b	rdlong	local01, objptr
130d0     45 00 00 CF 
130d4     74 E4 85 C1 |  if_b	sub	objptr, ##35444
130d8     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
130dc     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
130e0     58 00 90 3D |  if_ae	jmp	#LR__1581
130e4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
130e4     50 00 00 FF 
130e8     3C E5 05 F1 | 	add	objptr, ##41276
130ec     F2 1C 02 FB | 	rdlong	arg06, objptr
130f0     50 00 00 FF 
130f4     3C E5 85 F1 | 	sub	objptr, ##41276
130f8     01 1C 0E F2 | 	cmp	arg06, #1 wz
130fc     3C 00 90 5D |  if_ne	jmp	#LR__1580
13100     51 00 00 FF 
13104     E0 E5 05 F1 | 	add	objptr, ##41952
13108     F2 14 02 FB | 	rdlong	arg02, objptr
1310c     04 E4 85 F1 | 	sub	objptr, #4
13110     F2 1A 02 FB | 	rdlong	arg05, objptr
13114     07 12 06 F6 | 	mov	arg01, #7
13118     56 00 00 FF 
1311c     44 16 06 F6 | 	mov	arg03, ##44100
13120     0C 18 C6 F9 | 	decod	arg04, #12
13124     01 1C 66 F6 | 	neg	arg06, #1
13128     46 00 00 FF 
1312c     10 E5 85 F1 | 	sub	objptr, ##36112
13130     30 19 B1 FD | 	call	#_audio096_spin2_play
13134     0B 00 00 FF 
13138     CC E4 85 F1 | 	sub	objptr, ##5836
1313c                 | LR__1580
1313c                 | LR__1581
1313c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
1313c     45 00 00 FF 
13140     74 E4 05 F1 | 	add	objptr, ##35444
13144     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13148     45 00 00 FF 
1314c     74 E4 85 F1 | 	sub	objptr, ##35444
13150     D4 01 90 AD |  if_e	jmp	#LR__1590
13154     45 00 00 FF 
13158     74 E4 05 F1 | 	add	objptr, ##35444
1315c     F2 1C 02 FB | 	rdlong	arg06, objptr
13160     45 00 00 FF 
13164     74 E4 85 F1 | 	sub	objptr, ##35444
13168     00 00 40 FF 
1316c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13170     45 00 00 CF 
13174     74 E4 05 C1 |  if_b	add	objptr, ##35444
13178     F2 26 02 CB |  if_b	rdlong	local01, objptr
1317c     45 00 00 CF 
13180     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13184     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13188     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
1318c     98 01 90 3D |  if_ae	jmp	#LR__1590
13190                 | '   if leds and 2 = 2 then 
13190     52 00 00 FF 
13194     1C E4 05 F1 | 	add	objptr, ##42012
13198     F2 26 0A FB | 	rdlong	local01, objptr wz
1319c     52 00 00 FF 
131a0     1C E4 85 F1 | 	sub	objptr, ##42012
131a4     58 01 90 AD |  if_e	jmp	#LR__1589
131a8                 | '     if key>96 andalso key<123 then
131a8     45 00 00 FF 
131ac     74 E4 05 F1 | 	add	objptr, ##35444
131b0     F2 26 02 FB | 	rdlong	local01, objptr
131b4     45 00 00 FF 
131b8     74 E4 85 F1 | 	sub	objptr, ##35444
131bc     61 26 16 F2 | 	cmp	local01, #97 wc
131c0     3C 00 90 CD |  if_b	jmp	#LR__1582
131c4     45 00 00 FF 
131c8     74 E4 05 F1 | 	add	objptr, ##35444
131cc     F2 26 02 FB | 	rdlong	local01, objptr
131d0     45 00 00 FF 
131d4     74 E4 85 F1 | 	sub	objptr, ##35444
131d8     7B 26 16 F2 | 	cmp	local01, #123 wc
131dc     20 00 90 3D |  if_ae	jmp	#LR__1582
131e0     45 00 00 FF 
131e4     74 E4 05 F1 | 	add	objptr, ##35444
131e8     F2 26 02 FB | 	rdlong	local01, objptr
131ec     20 26 86 F1 | 	sub	local01, #32
131f0     F2 26 62 FC | 	wrlong	local01, objptr
131f4     45 00 00 FF 
131f8     74 E4 85 F1 | 	sub	objptr, ##35444
131fc     00 01 90 FD | 	jmp	#LR__1588
13200                 | LR__1582
13200     45 00 00 FF 
13204     74 E4 05 F1 | 	add	objptr, ##35444
13208     F2 26 02 FB | 	rdlong	local01, objptr
1320c     45 00 00 FF 
13210     74 E4 85 F1 | 	sub	objptr, ##35444
13214     41 26 16 F2 | 	cmp	local01, #65 wc
13218     3C 00 90 CD |  if_b	jmp	#LR__1583
1321c     45 00 00 FF 
13220     74 E4 05 F1 | 	add	objptr, ##35444
13224     F2 26 02 FB | 	rdlong	local01, objptr
13228     45 00 00 FF 
1322c     74 E4 85 F1 | 	sub	objptr, ##35444
13230     5B 26 16 F2 | 	cmp	local01, #91 wc
13234     20 00 90 3D |  if_ae	jmp	#LR__1583
13238     45 00 00 FF 
1323c     74 E4 05 F1 | 	add	objptr, ##35444
13240     F2 26 02 FB | 	rdlong	local01, objptr
13244     20 26 06 F1 | 	add	local01, #32
13248     F2 26 62 FC | 	wrlong	local01, objptr
1324c     45 00 00 FF 
13250     74 E4 85 F1 | 	sub	objptr, ##35444
13254     A8 00 90 FD | 	jmp	#LR__1587
13258                 | LR__1583
13258     45 00 00 FF 
1325c     74 E4 05 F1 | 	add	objptr, ##35444
13260     F2 26 02 FB | 	rdlong	local01, objptr
13264     45 00 00 FF 
13268     74 E4 85 F1 | 	sub	objptr, ##35444
1326c     17 26 16 F2 | 	cmp	local01, #23 wc
13270     3C 00 90 CD |  if_b	jmp	#LR__1584
13274     45 00 00 FF 
13278     74 E4 05 F1 | 	add	objptr, ##35444
1327c     F2 26 02 FB | 	rdlong	local01, objptr
13280     45 00 00 FF 
13284     74 E4 85 F1 | 	sub	objptr, ##35444
13288     20 26 16 F2 | 	cmp	local01, #32 wc
1328c     20 00 90 3D |  if_ae	jmp	#LR__1584
13290     45 00 00 FF 
13294     74 E4 05 F1 | 	add	objptr, ##35444
13298     F2 26 02 FB | 	rdlong	local01, objptr
1329c     09 26 86 F1 | 	sub	local01, #9
132a0     F2 26 62 FC | 	wrlong	local01, objptr
132a4     45 00 00 FF 
132a8     74 E4 85 F1 | 	sub	objptr, ##35444
132ac     50 00 90 FD | 	jmp	#LR__1586
132b0                 | LR__1584
132b0     45 00 00 FF 
132b4     74 E4 05 F1 | 	add	objptr, ##35444
132b8     F2 28 02 FB | 	rdlong	local02, objptr
132bc     45 00 00 FF 
132c0     74 E4 85 F1 | 	sub	objptr, ##35444
132c4     0E 28 16 F2 | 	cmp	local02, #14 wc
132c8     34 00 90 CD |  if_b	jmp	#LR__1585
132cc     45 00 00 FF 
132d0     74 E4 05 F1 | 	add	objptr, ##35444
132d4     F2 26 02 FB | 	rdlong	local01, objptr
132d8     45 00 00 FF 
132dc     74 E4 85 F1 | 	sub	objptr, ##35444
132e0     17 26 16 F2 | 	cmp	local01, #23 wc
132e4     52 00 00 CF 
132e8     20 E4 05 C1 |  if_b	add	objptr, ##42016
132ec     F2 28 02 CB |  if_b	rdlong	local02, objptr
132f0     27 28 06 C1 |  if_b	add	local02, #39
132f4     F2 28 62 CC |  if_b	wrlong	local02, objptr
132f8     52 00 00 CF 
132fc     20 E4 85 C1 |  if_b	sub	objptr, ##42016
13300                 | LR__1585
13300                 | LR__1586
13300                 | LR__1587
13300                 | LR__1588
13300                 | LR__1589
13300     45 00 00 FF 
13304     74 E4 05 F1 | 	add	objptr, ##35444
13308     F2 12 02 FB | 	rdlong	arg01, objptr
1330c     45 00 00 FF 
13310     74 E4 85 F1 | 	sub	objptr, ##35444
13314     94 E5 B0 FD | 	call	#_scantochar
13318     FD 12 02 F6 | 	mov	arg01, result1
1331c     F8 3D B1 FD | 	call	#__system__Chr_S
13320     A7 FA 61 FC | 	wrlong	result1, fp
13324     0C 00 90 FD | 	jmp	#LR__1591
13328                 | LR__1590
13328     A9 01 00 FF 
1332c     2C 29 06 F6 | 	mov	local02, ##@LR__5817
13330     A7 28 62 FC | 	wrlong	local02, fp
13334                 | LR__1591
13334     08 4E 05 F1 | 	add	fp, #8
13338     A7 3E 68 FC | 	wrlong	#31, fp
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     A7 12 02 F6 | 	mov	arg01, fp
13344     DC 98 BF FD | 	call	#_push
13348     A7 F0 03 F6 | 	mov	ptra, fp
1334c     B2 00 A0 FD | 	call	#popregs_
13350                 | _do_inkey_ret
13350     2D 00 64 FD | 	ret
13354                 | 
13354                 | ' 
13354                 | ' ' ----------------  ink
13354                 | ' 
13354                 | ' sub do_ink
13354                 | _do_ink
13354     00 4A 05 F6 | 	mov	COUNT_, #0
13358     A8 00 A0 FD | 	call	#pushregs_
1335c     0C F0 07 F1 | 	add	ptra, #12
13360     28 98 BF FD | 	call	#_pop
13364     FF 14 02 F6 | 	mov	arg02, result3
13368     A7 FA 61 FC | 	wrlong	result1, fp
1336c     04 4E 05 F1 | 	add	fp, #4
13370     A7 FC 61 FC | 	wrlong	result2, fp
13374     04 4E 05 F1 | 	add	fp, #4
13378     A7 14 62 FC | 	wrlong	arg02, fp
1337c     08 4E 85 F1 | 	sub	fp, #8
13380     A7 12 02 F6 | 	mov	arg01, fp
13384     E8 99 BF FD | 	call	#_converttoint
13388     37 00 00 FF 
1338c     3C E4 05 F1 | 	add	objptr, ##28220
13390     F2 FA 61 FC | 	wrlong	result1, objptr
13394     04 E4 85 F1 | 	sub	objptr, #4
13398     F2 14 02 FB | 	rdlong	arg02, objptr
1339c                 | ' 
1339c                 | ' write_color:=ff
1339c     36 00 00 FF 
133a0     F7 E5 85 F1 | 	sub	objptr, ##28151
133a4     F2 FA 61 FC | 	wrlong	result1, objptr
133a8                 | ' write_background:=bb
133a8     04 E4 05 F1 | 	add	objptr, #4
133ac     F2 14 62 FC | 	wrlong	arg02, objptr
133b0     36 00 00 FF 
133b4     F7 E5 05 F1 | 	add	objptr, ##28151
133b8     F2 12 02 FB | 	rdlong	arg01, objptr
133bc     37 00 00 FF 
133c0     3C E4 85 F1 | 	sub	objptr, ##28220
133c4     3C ED B0 FD | 	call	#_hg010b_spin2_setcursorcolor
133c8     A7 F0 03 F6 | 	mov	ptra, fp
133cc     B2 00 A0 FD | 	call	#popregs_
133d0                 | _do_ink_ret
133d0     2D 00 64 FD | 	ret
133d4                 | 
133d4                 | ' 
133d4                 | ' ' ----------------  int
133d4                 | ' 
133d4                 | ' sub do_int
133d4                 | _do_int
133d4     02 4A 05 F6 | 	mov	COUNT_, #2
133d8     A8 00 A0 FD | 	call	#pushregs_
133dc     10 F0 07 F1 | 	add	ptra, #16
133e0     A8 97 BF FD | 	call	#_pop
133e4     FE 26 02 F6 | 	mov	local01, result2
133e8     FF 28 02 F6 | 	mov	local02, result3
133ec     A7 FA 61 FC | 	wrlong	result1, fp
133f0     04 4E 05 F1 | 	add	fp, #4
133f4     A7 26 62 FC | 	wrlong	local01, fp
133f8     04 4E 05 F1 | 	add	fp, #4
133fc     A7 28 62 FC | 	wrlong	local02, fp
13400                 | ' 
13400                 | ' t1=pop()
13400                 | ' select case t1.result_type
13400     08 4E 85 F1 | 	sub	fp, #8
13404     1E 28 0E F2 | 	cmp	local02, #30 wz
13408     14 00 90 AD |  if_e	jmp	#LR__1600
1340c     1F 28 0E F2 | 	cmp	local02, #31 wz
13410     20 00 90 AD |  if_e	jmp	#LR__1601
13414     2B 28 0E F2 | 	cmp	local02, #43 wz
13418     34 00 90 AD |  if_e	jmp	#LR__1602
1341c     50 00 90 FD | 	jmp	#LR__1603
13420                 | LR__1600
13420     A7 12 02 FB | 	rdlong	arg01, fp
13424     00 14 06 F6 | 	mov	arg02, #0
13428     EC 4D B1 FD | 	call	#__system___float_tointeger
1342c     A7 FA 61 FC | 	wrlong	result1, fp
13430     3C 00 90 FD | 	jmp	#LR__1603
13434                 | LR__1601
13434     A7 12 02 FB | 	rdlong	arg01, fp
13438     20 51 B1 FD | 	call	#__system____builtin_atof
1343c     FD 12 02 F6 | 	mov	arg01, result1
13440     00 14 06 F6 | 	mov	arg02, #0
13444     D0 4D B1 FD | 	call	#__system___float_tointeger
13448     A7 FA 61 FC | 	wrlong	result1, fp
1344c     20 00 90 FD | 	jmp	#LR__1603
13450                 | LR__1602
13450     A7 12 02 FB | 	rdlong	arg01, fp
13454     AC 98 BF FD | 	call	#_convertstring
13458     FD 12 02 F6 | 	mov	arg01, result1
1345c     FC 50 B1 FD | 	call	#__system____builtin_atof
13460     FD 12 02 F6 | 	mov	arg01, result1
13464     00 14 06 F6 | 	mov	arg02, #0
13468     AC 4D B1 FD | 	call	#__system___float_tointeger
1346c     A7 FA 61 FC | 	wrlong	result1, fp
13470                 | LR__1603
13470     08 4E 05 F1 | 	add	fp, #8
13474     A7 38 68 FC | 	wrlong	#28, fp
13478     08 4E 85 F1 | 	sub	fp, #8
1347c     A7 12 02 F6 | 	mov	arg01, fp
13480     A0 97 BF FD | 	call	#_push
13484     A7 F0 03 F6 | 	mov	ptra, fp
13488     B2 00 A0 FD | 	call	#popregs_
1348c                 | _do_int_ret
1348c     2D 00 64 FD | 	ret
13490                 | 
13490                 | ' 
13490                 | ' ' ----------------  input
13490                 | ' 
13490                 | ' sub do_input
13490                 | _do_input
13490     11 4A 05 F6 | 	mov	COUNT_, #17
13494     A8 00 A0 FD | 	call	#pushregs_
13498     50 F1 07 F1 | 	add	ptra, #336
1349c     4A 00 00 FF 
134a0     80 E4 05 F1 | 	add	objptr, ##38016
134a4     F2 FE 01 FB | 	rdlong	result3, objptr
134a8     FF FC 01 F6 | 	mov	result2, result3
134ac     01 FC 65 F0 | 	shl	result2, #1
134b0     FF FC 01 F1 | 	add	result2, result3
134b4     02 FC 65 F0 | 	shl	result2, #2
134b8     03 00 00 FF 
134bc     04 E4 85 F1 | 	sub	objptr, ##1540
134c0     F2 FC 01 F1 | 	add	result2, objptr
134c4     FE FC 01 FB | 	rdlong	result2, result2
134c8     08 4E 05 F1 | 	add	fp, #8
134cc     A7 FC 61 FC | 	wrlong	result2, fp
134d0                 | ' 
134d0                 | ' numpar=compiledline(lineptr_e).result.uresult
134d0                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
134d0     08 4E 85 F1 | 	sub	fp, #8
134d4     01 FC 15 F2 | 	cmp	result2, #1 wc
134d8     47 00 00 FF 
134dc     7C E4 85 F1 | 	sub	objptr, ##36476
134e0     14 00 90 CD |  if_b	jmp	#LR__1610
134e4     08 4E 05 F1 | 	add	fp, #8
134e8     A7 FC 01 FB | 	rdlong	result2, fp
134ec     08 4E 85 F1 | 	sub	fp, #8
134f0     41 FC 15 F2 | 	cmp	result2, #65 wc
134f4     50 00 90 CD |  if_b	jmp	#LR__1611
134f8                 | LR__1610
134f8     00 12 06 F6 | 	mov	arg01, #0
134fc     78 76 B1 FD | 	call	#__system___getiolock_0593
13500     FD 12 02 F6 | 	mov	arg01, result1
13504     CC 19 B1 FD | 	call	#__system___lockmem
13508     A9 01 00 FF 
1350c     2D 15 06 F6 | 	mov	arg02, ##@LR__5818
13510     00 12 06 F6 | 	mov	arg01, #0
13514     00 16 06 F6 | 	mov	arg03, #0
13518     B0 26 B1 FD | 	call	#__system___basic_print_string
1351c     00 12 06 F6 | 	mov	arg01, #0
13520     54 76 B1 FD | 	call	#__system___getiolock_0593
13524     FD 00 68 FC | 	wrlong	#0, result1
13528     50 00 00 FF 
1352c     F0 E4 05 F1 | 	add	objptr, ##41200
13530     F2 14 02 FB | 	rdlong	arg02, objptr
13534     50 00 00 FF 
13538     F0 E4 85 F1 | 	sub	objptr, ##41200
1353c     27 12 06 F6 | 	mov	arg01, #39
13540     E8 DF B0 FD | 	call	#_printerror
13544     44 0B 90 FD | 	jmp	#LR__1660
13548                 | LR__1611
13548     08 4E 05 F1 | 	add	fp, #8
1354c     A7 FC 01 FB | 	rdlong	result2, fp
13550     01 FC 85 F1 | 	sub	result2, #1
13554     28 4F 05 F1 | 	add	fp, #296
13558     A7 FC 61 FC | 	wrlong	result2, fp
1355c     3C E4 05 F1 | 	add	objptr, #60
13560     F2 FC E1 FA | 	rdword	result2, objptr
13564     FE FC 51 F6 | 	abs	result2, result2 wc
13568     01 FC 45 F0 | 	shr	result2, #1
1356c     FE FC 81 F6 | 	negc	result2, result2
13570     0C 4E 05 F1 | 	add	fp, #12
13574     A7 FC 61 FC | 	wrlong	result2, fp
13578     02 E4 05 F1 | 	add	objptr, #2
1357c     F2 26 C2 FA | 	rdbyte	local01, objptr
13580     3E E4 85 F1 | 	sub	objptr, #62
13584     04 4E 05 F1 | 	add	fp, #4
13588     A7 26 62 FC | 	wrlong	local01, fp
1358c     40 4F 85 F1 | 	sub	fp, #320
13590                 | ' i=numpar-1
13590                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13590                 | ' do
13590                 | LR__1612
13590     70 D2 BE FD | 	call	#_edit
13594     A7 FA 61 FC | 	wrlong	result1, fp
13598                 | ' 
13598                 | '   line$=edit()
13598                 | ' 
13598                 | '   if v.cursor_y=cpy+1 then
13598     3E E4 05 F1 | 	add	objptr, #62
1359c     F2 26 C2 FA | 	rdbyte	local01, objptr
135a0     3E E4 85 F1 | 	sub	objptr, #62
135a4     40 4F 05 F1 | 	add	fp, #320
135a8     A7 16 02 FB | 	rdlong	arg03, fp
135ac     40 4F 85 F1 | 	sub	fp, #320
135b0     01 16 06 F1 | 	add	arg03, #1
135b4     0B 27 0A F2 | 	cmp	local01, arg03 wz
135b8     6C 00 90 5D |  if_ne	jmp	#LR__1615
135bc     A7 26 02 FB | 	rdlong	local01, fp
135c0     13 13 02 F6 | 	mov	arg01, local01
135c4     09 29 02 F6 | 	mov	local02, arg01
135c8     97 06 48 FB | 	callpa	#(@LR__1614-@LR__1613)>>2,fcache_load_ptr_
135cc                 | LR__1613
135cc     14 FB C9 FA | 	rdbyte	result1, local02 wz
135d0     01 28 06 51 |  if_ne	add	local02, #1
135d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1613
135d8                 | LR__1614
135d8     09 29 82 F1 | 	sub	local02, arg01
135dc     14 15 02 F6 | 	mov	arg02, local02
135e0     3C 4F 05 F1 | 	add	fp, #316
135e4     A7 16 02 FB | 	rdlong	arg03, fp
135e8     3C 4F 85 F1 | 	sub	fp, #316
135ec     0B 15 82 F1 | 	sub	arg02, arg03
135f0     37 00 00 FF 
135f4     34 E4 05 F1 | 	add	objptr, ##28212
135f8     F2 16 02 FB | 	rdlong	arg03, objptr
135fc     37 00 00 FF 
13600     34 E4 85 F1 | 	sub	objptr, ##28212
13604     0B 15 02 F1 | 	add	arg02, arg03
13608     13 13 02 F6 | 	mov	arg01, local01
1360c     CC 39 B1 FD | 	call	#__system__Right_S
13610     FD 12 02 F6 | 	mov	arg01, result1
13614     CC 3D B1 FD | 	call	#__system__RTrim_S
13618     FD 12 02 F6 | 	mov	arg01, result1
1361c     04 3D B1 FD | 	call	#__system__LTrim_S
13620     A7 FA 61 FC | 	wrlong	result1, fp
13624     14 00 90 FD | 	jmp	#LR__1616
13628                 | LR__1615
13628     A7 12 02 FB | 	rdlong	arg01, fp
1362c     B4 3D B1 FD | 	call	#__system__RTrim_S
13630     FD 12 02 F6 | 	mov	arg01, result1
13634     EC 3C B1 FD | 	call	#__system__LTrim_S
13638     A7 FA 61 FC | 	wrlong	result1, fp
1363c                 | LR__1616
1363c                 | '   do
1363c                 | LR__1617
1363c     A7 14 02 FB | 	rdlong	arg02, fp
13640     A9 01 00 FF 
13644     38 17 06 F6 | 	mov	arg03, ##@LR__5819
13648     01 12 06 F6 | 	mov	arg01, #1
1364c     4C 3E B1 FD | 	call	#__system__Instr
13650     0C 4E 05 F1 | 	add	fp, #12
13654     A7 FA 61 FC | 	wrlong	result1, fp
13658                 | '    comma=instr(1,line$,",")  
13658                 | '    if comma>0  then 
13658     0C 4E 85 F1 | 	sub	fp, #12
1365c     01 FA 15 F2 | 	cmp	result1, #1 wc
13660     68 00 90 CD |  if_b	jmp	#LR__1620
13664     A7 12 02 FB | 	rdlong	arg01, fp
13668     0C 4E 05 F1 | 	add	fp, #12
1366c     A7 14 02 FB | 	rdlong	arg02, fp
13670     0C 4E 85 F1 | 	sub	fp, #12
13674     01 14 86 F1 | 	sub	arg02, #1
13678     D8 38 B1 FD | 	call	#__system__Left_S
1367c     04 4E 05 F1 | 	add	fp, #4
13680     A7 FA 61 FC | 	wrlong	result1, fp
13684     04 4E 85 F1 | 	sub	fp, #4
13688     A7 26 02 FB | 	rdlong	local01, fp
1368c     13 13 02 F6 | 	mov	arg01, local01
13690     09 29 02 F6 | 	mov	local02, arg01
13694     97 06 48 FB | 	callpa	#(@LR__1619-@LR__1618)>>2,fcache_load_ptr_
13698                 | LR__1618
13698     14 FB C9 FA | 	rdbyte	result1, local02 wz
1369c     01 28 06 51 |  if_ne	add	local02, #1
136a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1618
136a4                 | LR__1619
136a4     09 29 82 F1 | 	sub	local02, arg01
136a8     14 15 02 F6 | 	mov	arg02, local02
136ac     0C 4E 05 F1 | 	add	fp, #12
136b0     A7 16 02 FB | 	rdlong	arg03, fp
136b4     0C 4E 85 F1 | 	sub	fp, #12
136b8     0B 15 82 F1 | 	sub	arg02, arg03
136bc     13 13 02 F6 | 	mov	arg01, local01
136c0     18 39 B1 FD | 	call	#__system__Right_S
136c4     A7 FA 61 FC | 	wrlong	result1, fp
136c8     28 00 90 FD | 	jmp	#LR__1621
136cc                 | LR__1620
136cc     A7 12 02 FB | 	rdlong	arg01, fp
136d0     10 3D B1 FD | 	call	#__system__RTrim_S
136d4     FD 12 02 F6 | 	mov	arg01, result1
136d8     48 3C B1 FD | 	call	#__system__LTrim_S
136dc     04 4E 05 F1 | 	add	fp, #4
136e0     A7 FA 61 FC | 	wrlong	result1, fp
136e4     04 4E 85 F1 | 	sub	fp, #4
136e8     A9 01 00 FF 
136ec     3A 27 06 F6 | 	mov	local01, ##@LR__5820
136f0     A7 26 62 FC | 	wrlong	local01, fp
136f4                 | LR__1621
136f4     30 4F 05 F1 | 	add	fp, #304
136f8     A7 26 02 FB | 	rdlong	local01, fp
136fc     02 26 66 F0 | 	shl	local01, #2
13700     04 4F 85 F1 | 	sub	fp, #260
13704     A7 26 02 F1 | 	add	local01, fp
13708     28 4E 85 F1 | 	sub	fp, #40
1370c     A7 FA 01 FB | 	rdlong	result1, fp
13710     13 FB 61 FC | 	wrlong	result1, local01
13714     2C 4F 05 F1 | 	add	fp, #300
13718     A7 26 02 FB | 	rdlong	local01, fp
1371c     01 26 86 F1 | 	sub	local01, #1
13720     A7 26 62 FC | 	wrlong	local01, fp
13724     30 4F 85 F1 | 	sub	fp, #304
13728     00 26 56 F2 | 	cmps	local01, #0 wc
1372c     18 00 90 CD |  if_b	jmp	#LR__1622
13730     A7 12 02 FB | 	rdlong	arg01, fp
13734     A9 01 00 FF 
13738     3B 15 06 F6 | 	mov	arg02, ##@LR__5821
1373c     BC 17 B1 FD | 	call	#__system___string_cmp
13740     00 FA 0D F2 | 	cmp	result1, #0 wz
13744     F4 FE 9F 5D |  if_ne	jmp	#LR__1617
13748                 | LR__1622
13748     30 4F 05 F1 | 	add	fp, #304
1374c     A7 26 02 FB | 	rdlong	local01, fp
13750     30 4F 85 F1 | 	sub	fp, #304
13754     00 26 56 F2 | 	cmps	local01, #0 wc
13758     34 FE 9F 3D |  if_ae	jmp	#LR__1612
1375c                 | ' 
1375c                 | ' for i=0 to numpar-1
1375c     30 4F 05 F1 | 	add	fp, #304
13760     A7 00 68 FC | 	wrlong	#0, fp
13764     28 4F 85 F1 | 	sub	fp, #296
13768     A7 2A 02 FB | 	rdlong	local03, fp
1376c     08 4E 85 F1 | 	sub	fp, #8
13770                 | LR__1623
13770     30 4F 05 F1 | 	add	fp, #304
13774     A7 2C 02 FB | 	rdlong	local04, fp
13778     30 4F 85 F1 | 	sub	fp, #304
1377c     16 27 02 F6 | 	mov	local01, local04
13780     15 27 52 F2 | 	cmps	local01, local03 wc
13784     04 09 90 3D |  if_ae	jmp	#LR__1659
13788                 | ' 
13788                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13788     30 4F 05 F1 | 	add	fp, #304
1378c     A7 16 02 FB | 	rdlong	arg03, fp
13790     02 16 66 F0 | 	shl	arg03, #2
13794     04 4F 85 F1 | 	sub	fp, #260
13798     A7 16 02 F1 | 	add	arg03, fp
1379c     0B 13 02 FB | 	rdlong	arg01, arg03
137a0     2C 4E 85 F1 | 	sub	fp, #44
137a4     00 2C BF FD | 	call	#_isnum
137a8     FD 2E 02 F6 | 	mov	local05, result1
137ac     30 4F 05 F1 | 	add	fp, #304
137b0     A7 16 02 FB | 	rdlong	arg03, fp
137b4     02 16 66 F0 | 	shl	arg03, #2
137b8     04 4F 85 F1 | 	sub	fp, #260
137bc     A7 30 02 F6 | 	mov	local06, fp
137c0     A7 16 02 F1 | 	add	arg03, fp
137c4     0B 13 02 FB | 	rdlong	arg01, arg03
137c8     2C 4E 85 F1 | 	sub	fp, #44
137cc     C4 2F BF FD | 	call	#_isint
137d0     FD 2E 2A F5 | 	andn	local05, result1 wz
137d4     52 00 00 5F 
137d8     4C E4 05 51 |  if_ne	add	objptr, ##42060
137dc     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
137e0     52 00 00 5F 
137e4     4C E4 85 51 |  if_ne	sub	objptr, ##42060
137e8                 | '   if isint(args(i)) then r=result_int 
137e8     30 4F 05 F1 | 	add	fp, #304
137ec     A7 2E 02 FB | 	rdlong	local05, fp
137f0     02 2E 66 F0 | 	shl	local05, #2
137f4     04 4F 85 F1 | 	sub	fp, #260
137f8     A7 2E 02 F1 | 	add	local05, fp
137fc     17 13 02 FB | 	rdlong	arg01, local05
13800     2C 4E 85 F1 | 	sub	fp, #44
13804     8C 2F BF FD | 	call	#_isint
13808     00 FA 0D F2 | 	cmp	result1, #0 wz
1380c     52 00 00 5F 
13810     4C E4 05 51 |  if_ne	add	objptr, ##42060
13814     F2 38 68 5C |  if_ne	wrlong	#28, objptr
13818     52 00 00 5F 
1381c     4C E4 85 51 |  if_ne	sub	objptr, ##42060
13820                 | '   if isdec(args(i)) then r=result_uint 
13820     30 4F 05 F1 | 	add	fp, #304
13824     A7 2E 02 FB | 	rdlong	local05, fp
13828     02 2E 66 F0 | 	shl	local05, #2
1382c     04 4F 85 F1 | 	sub	fp, #260
13830     A7 2E 02 F1 | 	add	local05, fp
13834     17 13 02 FB | 	rdlong	arg01, local05
13838     2C 4E 85 F1 | 	sub	fp, #44
1383c     F8 31 BF FD | 	call	#_isdec
13840     00 FA 0D F2 | 	cmp	result1, #0 wz
13844     52 00 00 5F 
13848     4C E4 05 51 |  if_ne	add	objptr, ##42060
1384c     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13850     52 00 00 5F 
13854     4C E4 85 51 |  if_ne	sub	objptr, ##42060
13858                 | '   if not isnum(args(i)) then 
13858     30 4F 05 F1 | 	add	fp, #304
1385c     A7 32 02 FB | 	rdlong	local07, fp
13860     19 35 02 F6 | 	mov	local08, local07
13864     02 34 66 F0 | 	shl	local08, #2
13868     04 4F 85 F1 | 	sub	fp, #260
1386c     A7 36 02 F6 | 	mov	local09, fp
13870     A7 34 02 F1 | 	add	local08, fp
13874     1A 13 02 FB | 	rdlong	arg01, local08
13878     2C 4E 85 F1 | 	sub	fp, #44
1387c     28 2B BF FD | 	call	#_isnum
13880     FD 2E 22 F6 | 	not	local05, result1
13884     00 2E 0E F2 | 	cmp	local05, #0 wz
13888     44 01 90 AD |  if_e	jmp	#LR__1628
1388c     52 00 00 FF 
13890     4C E4 05 F1 | 	add	objptr, ##42060
13894     F2 56 68 FC | 	wrlong	#43, objptr
13898     52 00 00 FF 
1389c     4C E4 85 F1 | 	sub	objptr, ##42060
138a0     04 4E 05 F1 | 	add	fp, #4
138a4     A7 12 02 FB | 	rdlong	arg01, fp
138a8     04 4E 85 F1 | 	sub	fp, #4
138ac     09 29 02 F6 | 	mov	local02, arg01
138b0     97 06 48 FB | 	callpa	#(@LR__1625-@LR__1624)>>2,fcache_load_ptr_
138b4                 | LR__1624
138b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
138b8     01 28 06 51 |  if_ne	add	local02, #1
138bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1624
138c0                 | LR__1625
138c0     09 29 82 F1 | 	sub	local02, arg01
138c4     14 33 02 F6 | 	mov	local07, local02
138c8     38 4F 05 F1 | 	add	fp, #312
138cc     A7 32 62 FC | 	wrlong	local07, fp
138d0     51 00 00 FF 
138d4     D4 E5 05 F1 | 	add	objptr, ##41940
138d8     F2 12 02 FB | 	rdlong	arg01, objptr
138dc     19 13 82 F1 | 	sub	arg01, local07
138e0     04 12 86 F1 | 	sub	arg01, #4
138e4     03 12 26 F5 | 	andn	arg01, #3
138e8     F2 12 62 FC | 	wrlong	arg01, objptr
138ec     51 00 00 FF 
138f0     D4 E5 85 F1 | 	sub	objptr, ##41940
138f4     A7 14 02 FB | 	rdlong	arg02, fp
138f8     38 4F 85 F1 | 	sub	fp, #312
138fc     CC DD B0 FD | 	call	#_pslpoke
13900                 | '     pslpoke memtop,l
13900                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13900     34 4F 05 F1 | 	add	fp, #308
13904     A7 02 68 FC | 	wrlong	#1, fp
13908     04 4E 05 F1 | 	add	fp, #4
1390c     A7 38 02 FB | 	rdlong	local10, fp
13910     38 4F 85 F1 | 	sub	fp, #312
13914     01 38 06 F1 | 	add	local10, #1
13918                 | LR__1626
13918     34 4F 05 F1 | 	add	fp, #308
1391c     A7 2E 02 FB | 	rdlong	local05, fp
13920     34 4F 85 F1 | 	sub	fp, #308
13924     1C 2F 52 F2 | 	cmps	local05, local10 wc
13928     84 00 90 3D |  if_ae	jmp	#LR__1627
1392c     51 00 00 FF 
13930     D4 E5 05 F1 | 	add	objptr, ##41940
13934     F2 32 02 FB | 	rdlong	local07, objptr
13938     51 00 00 FF 
1393c     D4 E5 85 F1 | 	sub	objptr, ##41940
13940     03 32 06 F1 | 	add	local07, #3
13944     34 4F 05 F1 | 	add	fp, #308
13948     A7 3A 02 FB | 	rdlong	local11, fp
1394c     1D 33 02 F1 | 	add	local07, local11
13950     04 4E 85 F1 | 	sub	fp, #4
13954     A7 3C 02 FB | 	rdlong	local12, fp
13958     02 3C 66 F0 | 	shl	local12, #2
1395c     04 4F 85 F1 | 	sub	fp, #260
13960     A7 3E 02 F6 | 	mov	local13, fp
13964     A7 3C 02 F1 | 	add	local12, fp
13968     1E 13 02 FB | 	rdlong	arg01, local12
1396c     2C 4E 85 F1 | 	sub	fp, #44
13970     01 40 06 F6 | 	mov	local14, #1
13974     1D 15 02 F6 | 	mov	arg02, local11
13978     01 16 06 F6 | 	mov	arg03, #1
1397c     EC 36 B1 FD | 	call	#__system__Mid_S
13980     FD 14 C2 FA | 	rdbyte	arg02, result1
13984     19 13 02 F6 | 	mov	arg01, local07
13988     D0 DD B0 FD | 	call	#_pspoke
1398c     34 4F 05 F1 | 	add	fp, #308
13990     A7 34 02 FB | 	rdlong	local08, fp
13994     1A 33 02 F6 | 	mov	local07, local08
13998     1A 31 02 F6 | 	mov	local06, local08
1399c     18 37 02 F6 | 	mov	local09, local06
139a0     01 36 06 F1 | 	add	local09, #1
139a4     A7 36 62 FC | 	wrlong	local09, fp
139a8     34 4F 85 F1 | 	sub	fp, #308
139ac     68 FF 9F FD | 	jmp	#LR__1626
139b0                 | LR__1627
139b0     51 00 00 FF 
139b4     D4 E5 05 F1 | 	add	objptr, ##41940
139b8     F2 2E 02 FB | 	rdlong	local05, objptr
139bc     51 00 00 FF 
139c0     D4 E5 85 F1 | 	sub	objptr, ##41940
139c4     10 4E 05 F1 | 	add	fp, #16
139c8     A7 2E 62 FC | 	wrlong	local05, fp
139cc     10 4E 85 F1 | 	sub	fp, #16
139d0                 | LR__1628
139d0     B8 91 BF FD | 	call	#_pop
139d4     FE 2E 02 F6 | 	mov	local05, result2
139d8     FF 42 02 F6 | 	mov	local15, result3
139dc     1C 4E 05 F1 | 	add	fp, #28
139e0     A7 FA 61 FC | 	wrlong	result1, fp
139e4     04 4E 05 F1 | 	add	fp, #4
139e8     A7 2E 62 FC | 	wrlong	local05, fp
139ec     04 4E 05 F1 | 	add	fp, #4
139f0     A7 42 62 FC | 	wrlong	local15, fp
139f4     04 4E 85 F1 | 	sub	fp, #4
139f8     A7 44 02 FB | 	rdlong	local16, fp
139fc     0C 4E 85 F1 | 	sub	fp, #12
13a00     A7 44 62 FC | 	wrlong	local16, fp
13a04                 | '   t1=pop() : vartype=t1.result.twowords(1)
13a04                 | '   select case vartype
13a04     14 4E 85 F1 | 	sub	fp, #20
13a08     22 47 0A F6 | 	mov	local17, local16 wz
13a0c     64 00 90 AD |  if_e	jmp	#LR__1629
13a10     00 47 0E F2 | 	cmp	local17, #256 wz
13a14     6C 00 90 AD |  if_e	jmp	#LR__1630
13a18     01 47 0E F2 | 	cmp	local17, #257 wz
13a1c     74 00 90 AD |  if_e	jmp	#LR__1631
13a20     02 47 0E F2 | 	cmp	local17, #258 wz
13a24     7C 00 90 AD |  if_e	jmp	#LR__1632
13a28     03 47 0E F2 | 	cmp	local17, #259 wz
13a2c     84 00 90 AD |  if_e	jmp	#LR__1633
13a30     04 47 0E F2 | 	cmp	local17, #260 wz
13a34     8C 00 90 AD |  if_e	jmp	#LR__1634
13a38     05 47 0E F2 | 	cmp	local17, #261 wz
13a3c     94 00 90 AD |  if_e	jmp	#LR__1635
13a40     06 47 0E F2 | 	cmp	local17, #262 wz
13a44     9C 00 90 AD |  if_e	jmp	#LR__1636
13a48     07 47 0E F2 | 	cmp	local17, #263 wz
13a4c     A4 00 90 AD |  if_e	jmp	#LR__1637
13a50     08 47 0E F2 | 	cmp	local17, #264 wz
13a54     AC 00 90 AD |  if_e	jmp	#LR__1638
13a58     09 47 0E F2 | 	cmp	local17, #265 wz
13a5c     B4 00 90 AD |  if_e	jmp	#LR__1639
13a60     0A 47 0E F2 | 	cmp	local17, #266 wz
13a64     BC 00 90 AD |  if_e	jmp	#LR__1640
13a68     0B 47 0E F2 | 	cmp	local17, #267 wz
13a6c     C4 00 90 AD |  if_e	jmp	#LR__1641
13a70     D0 00 90 FD | 	jmp	#LR__1642
13a74                 | LR__1629
13a74     18 4E 05 F1 | 	add	fp, #24
13a78     A7 18 68 FC | 	wrlong	#12, fp
13a7c     18 4E 85 F1 | 	sub	fp, #24
13a80     CC 00 90 FD | 	jmp	#LR__1643
13a84                 | LR__1630
13a84     18 4E 05 F1 | 	add	fp, #24
13a88     A7 18 68 FC | 	wrlong	#12, fp
13a8c     18 4E 85 F1 | 	sub	fp, #24
13a90     BC 00 90 FD | 	jmp	#LR__1643
13a94                 | LR__1631
13a94     18 4E 05 F1 | 	add	fp, #24
13a98     A7 02 68 FC | 	wrlong	#1, fp
13a9c     18 4E 85 F1 | 	sub	fp, #24
13aa0     AC 00 90 FD | 	jmp	#LR__1643
13aa4                 | LR__1632
13aa4     18 4E 05 F1 | 	add	fp, #24
13aa8     A7 02 68 FC | 	wrlong	#1, fp
13aac     18 4E 85 F1 | 	sub	fp, #24
13ab0     9C 00 90 FD | 	jmp	#LR__1643
13ab4                 | LR__1633
13ab4     18 4E 05 F1 | 	add	fp, #24
13ab8     A7 04 68 FC | 	wrlong	#2, fp
13abc     18 4E 85 F1 | 	sub	fp, #24
13ac0     8C 00 90 FD | 	jmp	#LR__1643
13ac4                 | LR__1634
13ac4     18 4E 05 F1 | 	add	fp, #24
13ac8     A7 04 68 FC | 	wrlong	#2, fp
13acc     18 4E 85 F1 | 	sub	fp, #24
13ad0     7C 00 90 FD | 	jmp	#LR__1643
13ad4                 | LR__1635
13ad4     18 4E 05 F1 | 	add	fp, #24
13ad8     A7 08 68 FC | 	wrlong	#4, fp
13adc     18 4E 85 F1 | 	sub	fp, #24
13ae0     6C 00 90 FD | 	jmp	#LR__1643
13ae4                 | LR__1636
13ae4     18 4E 05 F1 | 	add	fp, #24
13ae8     A7 08 68 FC | 	wrlong	#4, fp
13aec     18 4E 85 F1 | 	sub	fp, #24
13af0     5C 00 90 FD | 	jmp	#LR__1643
13af4                 | LR__1637
13af4     18 4E 05 F1 | 	add	fp, #24
13af8     A7 10 68 FC | 	wrlong	#8, fp
13afc     18 4E 85 F1 | 	sub	fp, #24
13b00     4C 00 90 FD | 	jmp	#LR__1643
13b04                 | LR__1638
13b04     18 4E 05 F1 | 	add	fp, #24
13b08     A7 10 68 FC | 	wrlong	#8, fp
13b0c     18 4E 85 F1 | 	sub	fp, #24
13b10     3C 00 90 FD | 	jmp	#LR__1643
13b14                 | LR__1639
13b14     18 4E 05 F1 | 	add	fp, #24
13b18     A7 0C 68 FC | 	wrlong	#6, fp
13b1c     18 4E 85 F1 | 	sub	fp, #24
13b20     2C 00 90 FD | 	jmp	#LR__1643
13b24                 | LR__1640
13b24     18 4E 05 F1 | 	add	fp, #24
13b28     A7 10 68 FC | 	wrlong	#8, fp
13b2c     18 4E 85 F1 | 	sub	fp, #24
13b30     1C 00 90 FD | 	jmp	#LR__1643
13b34                 | LR__1641
13b34     18 4E 05 F1 | 	add	fp, #24
13b38     A7 0A 68 FC | 	wrlong	#5, fp
13b3c     18 4E 85 F1 | 	sub	fp, #24
13b40     0C 00 90 FD | 	jmp	#LR__1643
13b44                 | LR__1642
13b44     18 4E 05 F1 | 	add	fp, #24
13b48     A7 18 68 FC | 	wrlong	#12, fp
13b4c     18 4E 85 F1 | 	sub	fp, #24
13b50                 | LR__1643
13b50                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13b50     18 4E 05 F1 | 	add	fp, #24
13b54     A7 44 02 FB | 	rdlong	local16, fp
13b58     18 4E 85 F1 | 	sub	fp, #24
13b5c     0C 44 0E F2 | 	cmp	local16, #12 wz
13b60     74 01 90 5D |  if_ne	jmp	#LR__1648
13b64     1C 4E 05 F1 | 	add	fp, #28
13b68     A7 32 02 FB | 	rdlong	local07, fp
13b6c     1C 4E 85 F1 | 	sub	fp, #28
13b70     00 04 00 FF 
13b74     00 32 16 F2 | 	cmp	local07, ##524288 wc
13b78     5C 01 90 3D |  if_ae	jmp	#LR__1648
13b7c                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13b7c     52 00 00 FF 
13b80     4C E4 05 F1 | 	add	objptr, ##42060
13b84     F2 44 02 FB | 	rdlong	local16, objptr
13b88     52 00 00 FF 
13b8c     4C E4 85 F1 | 	sub	objptr, ##42060
13b90     1C 44 0E F2 | 	cmp	local16, #28 wz
13b94     38 00 90 5D |  if_ne	jmp	#LR__1644
13b98     1C 4E 05 F1 | 	add	fp, #28
13b9c     A7 44 02 FB | 	rdlong	local16, fp
13ba0     14 4F 05 F1 | 	add	fp, #276
13ba4     A7 32 02 FB | 	rdlong	local07, fp
13ba8     19 35 02 F6 | 	mov	local08, local07
13bac     02 34 66 F0 | 	shl	local08, #2
13bb0     04 4F 85 F1 | 	sub	fp, #260
13bb4     A7 36 02 F6 | 	mov	local09, fp
13bb8     A7 34 02 F1 | 	add	local08, fp
13bbc     1A 13 02 FB | 	rdlong	arg01, local08
13bc0     00 14 06 F6 | 	mov	arg02, #0
13bc4     2C 4E 85 F1 | 	sub	fp, #44
13bc8     FC 47 B1 FD | 	call	#__system____builtin_atoi
13bcc     22 FB 61 FC | 	wrlong	result1, local16
13bd0                 | LR__1644
13bd0                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13bd0     52 00 00 FF 
13bd4     4C E4 05 F1 | 	add	objptr, ##42060
13bd8     F2 44 02 FB | 	rdlong	local16, objptr
13bdc     52 00 00 FF 
13be0     4C E4 85 F1 | 	sub	objptr, ##42060
13be4     1D 44 0E F2 | 	cmp	local16, #29 wz
13be8     38 00 90 5D |  if_ne	jmp	#LR__1645
13bec     1C 4E 05 F1 | 	add	fp, #28
13bf0     A7 44 02 FB | 	rdlong	local16, fp
13bf4     14 4F 05 F1 | 	add	fp, #276
13bf8     A7 32 02 FB | 	rdlong	local07, fp
13bfc     19 35 02 F6 | 	mov	local08, local07
13c00     02 34 66 F0 | 	shl	local08, #2
13c04     04 4F 85 F1 | 	sub	fp, #260
13c08     A7 36 02 F6 | 	mov	local09, fp
13c0c     A7 34 02 F1 | 	add	local08, fp
13c10     1A 13 02 FB | 	rdlong	arg01, local08
13c14     00 14 06 F6 | 	mov	arg02, #0
13c18     2C 4E 85 F1 | 	sub	fp, #44
13c1c     A8 47 B1 FD | 	call	#__system____builtin_atoi
13c20     22 FB 61 FC | 	wrlong	result1, local16
13c24                 | LR__1645
13c24                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13c24     52 00 00 FF 
13c28     4C E4 05 F1 | 	add	objptr, ##42060
13c2c     F2 44 02 FB | 	rdlong	local16, objptr
13c30     52 00 00 FF 
13c34     4C E4 85 F1 | 	sub	objptr, ##42060
13c38     1E 44 0E F2 | 	cmp	local16, #30 wz
13c3c     3C 00 90 5D |  if_ne	jmp	#LR__1646
13c40     30 4F 05 F1 | 	add	fp, #304
13c44     A7 32 02 FB | 	rdlong	local07, fp
13c48     02 32 66 F0 | 	shl	local07, #2
13c4c     04 4F 85 F1 | 	sub	fp, #260
13c50     A7 34 02 F6 | 	mov	local08, fp
13c54     A7 32 02 F1 | 	add	local07, fp
13c58     19 13 02 FB | 	rdlong	arg01, local07
13c5c     2C 4E 85 F1 | 	sub	fp, #44
13c60     F8 48 B1 FD | 	call	#__system____builtin_atof
13c64     28 4E 05 F1 | 	add	fp, #40
13c68     A7 FA 61 FC | 	wrlong	result1, fp
13c6c     0C 4E 85 F1 | 	sub	fp, #12
13c70     A7 44 02 FB | 	rdlong	local16, fp
13c74     1C 4E 85 F1 | 	sub	fp, #28
13c78     22 FB 61 FC | 	wrlong	result1, local16
13c7c                 | LR__1646
13c7c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13c7c     52 00 00 FF 
13c80     4C E4 05 F1 | 	add	objptr, ##42060
13c84     F2 44 02 FB | 	rdlong	local16, objptr
13c88     52 00 00 FF 
13c8c     4C E4 85 F1 | 	sub	objptr, ##42060
13c90     2B 44 0E F2 | 	cmp	local16, #43 wz
13c94     18 00 90 5D |  if_ne	jmp	#LR__1647
13c98     1C 4E 05 F1 | 	add	fp, #28
13c9c     A7 12 02 FB | 	rdlong	arg01, fp
13ca0     0C 4E 85 F1 | 	sub	fp, #12
13ca4     A7 14 02 FB | 	rdlong	arg02, fp
13ca8     10 4E 85 F1 | 	sub	fp, #16
13cac     09 15 62 FC | 	wrlong	arg02, arg01
13cb0                 | LR__1647
13cb0     1C 4E 05 F1 | 	add	fp, #28
13cb4     A7 12 02 FB | 	rdlong	arg01, fp
13cb8     1C 4E 85 F1 | 	sub	fp, #28
13cbc     08 12 06 F1 | 	add	arg01, #8
13cc0     52 00 00 FF 
13cc4     4C E4 05 F1 | 	add	objptr, ##42060
13cc8     F2 14 02 FB | 	rdlong	arg02, objptr
13ccc     52 00 00 FF 
13cd0     4C E4 85 F1 | 	sub	objptr, ##42060
13cd4     09 15 62 FC | 	wrlong	arg02, arg01
13cd8                 | LR__1648
13cd8                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13cd8     18 4E 05 F1 | 	add	fp, #24
13cdc     A7 44 02 FB | 	rdlong	local16, fp
13ce0     18 4E 85 F1 | 	sub	fp, #24
13ce4     0C 44 0E F2 | 	cmp	local16, #12 wz
13ce8     94 01 90 5D |  if_ne	jmp	#LR__1653
13cec     1C 4E 05 F1 | 	add	fp, #28
13cf0     A7 32 02 FB | 	rdlong	local07, fp
13cf4     1C 4E 85 F1 | 	sub	fp, #28
13cf8     00 04 00 FF 
13cfc     00 32 16 F2 | 	cmp	local07, ##524288 wc
13d00     7C 01 90 CD |  if_b	jmp	#LR__1653
13d04                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13d04     52 00 00 FF 
13d08     4C E4 05 F1 | 	add	objptr, ##42060
13d0c     F2 44 02 FB | 	rdlong	local16, objptr
13d10     52 00 00 FF 
13d14     4C E4 85 F1 | 	sub	objptr, ##42060
13d18     1C 44 0E F2 | 	cmp	local16, #28 wz
13d1c     40 00 90 5D |  if_ne	jmp	#LR__1649
13d20     1C 4E 05 F1 | 	add	fp, #28
13d24     A7 44 02 FB | 	rdlong	local16, fp
13d28     14 4F 05 F1 | 	add	fp, #276
13d2c     A7 32 02 FB | 	rdlong	local07, fp
13d30     19 35 02 F6 | 	mov	local08, local07
13d34     02 34 66 F0 | 	shl	local08, #2
13d38     04 4F 85 F1 | 	sub	fp, #260
13d3c     A7 36 02 F6 | 	mov	local09, fp
13d40     A7 34 02 F1 | 	add	local08, fp
13d44     1A 13 02 FB | 	rdlong	arg01, local08
13d48     00 14 06 F6 | 	mov	arg02, #0
13d4c     2C 4E 85 F1 | 	sub	fp, #44
13d50     74 46 B1 FD | 	call	#__system____builtin_atoi
13d54     FD 14 02 F6 | 	mov	arg02, result1
13d58     22 13 02 F6 | 	mov	arg01, local16
13d5c     6C D9 B0 FD | 	call	#_pslpoke
13d60                 | LR__1649
13d60                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13d60     52 00 00 FF 
13d64     4C E4 05 F1 | 	add	objptr, ##42060
13d68     F2 44 02 FB | 	rdlong	local16, objptr
13d6c     52 00 00 FF 
13d70     4C E4 85 F1 | 	sub	objptr, ##42060
13d74     1D 44 0E F2 | 	cmp	local16, #29 wz
13d78     40 00 90 5D |  if_ne	jmp	#LR__1650
13d7c     1C 4E 05 F1 | 	add	fp, #28
13d80     A7 44 02 FB | 	rdlong	local16, fp
13d84     14 4F 05 F1 | 	add	fp, #276
13d88     A7 32 02 FB | 	rdlong	local07, fp
13d8c     19 35 02 F6 | 	mov	local08, local07
13d90     02 34 66 F0 | 	shl	local08, #2
13d94     04 4F 85 F1 | 	sub	fp, #260
13d98     A7 36 02 F6 | 	mov	local09, fp
13d9c     A7 34 02 F1 | 	add	local08, fp
13da0     1A 13 02 FB | 	rdlong	arg01, local08
13da4     00 14 06 F6 | 	mov	arg02, #0
13da8     2C 4E 85 F1 | 	sub	fp, #44
13dac     18 46 B1 FD | 	call	#__system____builtin_atoi
13db0     FD 14 02 F6 | 	mov	arg02, result1
13db4     22 13 02 F6 | 	mov	arg01, local16
13db8     10 D9 B0 FD | 	call	#_pslpoke
13dbc                 | LR__1650
13dbc                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13dbc     52 00 00 FF 
13dc0     4C E4 05 F1 | 	add	objptr, ##42060
13dc4     F2 44 02 FB | 	rdlong	local16, objptr
13dc8     52 00 00 FF 
13dcc     4C E4 85 F1 | 	sub	objptr, ##42060
13dd0     1E 44 0E F2 | 	cmp	local16, #30 wz
13dd4     4C 00 90 5D |  if_ne	jmp	#LR__1651
13dd8     30 4F 05 F1 | 	add	fp, #304
13ddc     A7 32 02 FB | 	rdlong	local07, fp
13de0     02 32 66 F0 | 	shl	local07, #2
13de4     04 4F 85 F1 | 	sub	fp, #260
13de8     A7 34 02 F6 | 	mov	local08, fp
13dec     A7 32 02 F1 | 	add	local07, fp
13df0     19 13 02 FB | 	rdlong	arg01, local07
13df4     2C 4E 85 F1 | 	sub	fp, #44
13df8     60 47 B1 FD | 	call	#__system____builtin_atof
13dfc     28 4E 05 F1 | 	add	fp, #40
13e00     A7 FA 61 FC | 	wrlong	result1, fp
13e04     0C 4E 85 F1 | 	sub	fp, #12
13e08     A7 44 02 FB | 	rdlong	local16, fp
13e0c     0C 4E 05 F1 | 	add	fp, #12
13e10     A7 12 02 F6 | 	mov	arg01, fp
13e14     28 4E 85 F1 | 	sub	fp, #40
13e18     09 15 02 FB | 	rdlong	arg02, arg01
13e1c     22 13 02 F6 | 	mov	arg01, local16
13e20     A8 D8 B0 FD | 	call	#_pslpoke
13e24                 | LR__1651
13e24                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13e24     52 00 00 FF 
13e28     4C E4 05 F1 | 	add	objptr, ##42060
13e2c     F2 44 02 FB | 	rdlong	local16, objptr
13e30     52 00 00 FF 
13e34     4C E4 85 F1 | 	sub	objptr, ##42060
13e38     2B 44 0E F2 | 	cmp	local16, #43 wz
13e3c     18 00 90 5D |  if_ne	jmp	#LR__1652
13e40     1C 4E 05 F1 | 	add	fp, #28
13e44     A7 12 02 FB | 	rdlong	arg01, fp
13e48     0C 4E 85 F1 | 	sub	fp, #12
13e4c     A7 14 02 FB | 	rdlong	arg02, fp
13e50     10 4E 85 F1 | 	sub	fp, #16
13e54     74 D8 B0 FD | 	call	#_pslpoke
13e58                 | LR__1652
13e58     1C 4E 05 F1 | 	add	fp, #28
13e5c     A7 12 02 FB | 	rdlong	arg01, fp
13e60     1C 4E 85 F1 | 	sub	fp, #28
13e64     08 12 06 F1 | 	add	arg01, #8
13e68     52 00 00 FF 
13e6c     4C E4 05 F1 | 	add	objptr, ##42060
13e70     F2 14 02 FB | 	rdlong	arg02, objptr
13e74     52 00 00 FF 
13e78     4C E4 85 F1 | 	sub	objptr, ##42060
13e7c     4C D8 B0 FD | 	call	#_pslpoke
13e80                 | LR__1653
13e80                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13e80     18 4E 05 F1 | 	add	fp, #24
13e84     A7 44 02 FB | 	rdlong	local16, fp
13e88     18 4E 85 F1 | 	sub	fp, #24
13e8c     05 44 0E F2 | 	cmp	local16, #5 wz
13e90     52 00 00 AF 
13e94     4C E4 05 A1 |  if_e	add	objptr, ##42060
13e98     F2 42 02 AB |  if_e	rdlong	local15, objptr
13e9c     52 00 00 AF 
13ea0     4C E4 85 A1 |  if_e	sub	objptr, ##42060
13ea4     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13ea8     18 00 90 5D |  if_ne	jmp	#LR__1654
13eac     1C 4E 05 F1 | 	add	fp, #28
13eb0     A7 12 02 FB | 	rdlong	arg01, fp
13eb4     0C 4E 85 F1 | 	sub	fp, #12
13eb8     A7 14 02 FB | 	rdlong	arg02, fp
13ebc     10 4E 85 F1 | 	sub	fp, #16
13ec0     08 D8 B0 FD | 	call	#_pslpoke
13ec4                 | LR__1654
13ec4                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13ec4     18 4E 05 F1 | 	add	fp, #24
13ec8     A7 44 02 FB | 	rdlong	local16, fp
13ecc     18 4E 85 F1 | 	sub	fp, #24
13ed0     04 44 0E F2 | 	cmp	local16, #4 wz
13ed4     54 00 90 5D |  if_ne	jmp	#LR__1655
13ed8     52 00 00 FF 
13edc     4C E4 05 F1 | 	add	objptr, ##42060
13ee0     F2 42 02 FB | 	rdlong	local15, objptr
13ee4     52 00 00 FF 
13ee8     4C E4 85 F1 | 	sub	objptr, ##42060
13eec     2B 42 0E F2 | 	cmp	local15, #43 wz
13ef0     38 00 90 AD |  if_e	jmp	#LR__1655
13ef4     1C 4E 05 F1 | 	add	fp, #28
13ef8     A7 44 02 FB | 	rdlong	local16, fp
13efc     14 4F 05 F1 | 	add	fp, #276
13f00     A7 34 02 FB | 	rdlong	local08, fp
13f04     02 34 66 F0 | 	shl	local08, #2
13f08     04 4F 85 F1 | 	sub	fp, #260
13f0c     A7 34 02 F1 | 	add	local08, fp
13f10     1A 13 02 FB | 	rdlong	arg01, local08
13f14     00 14 06 F6 | 	mov	arg02, #0
13f18     2C 4E 85 F1 | 	sub	fp, #44
13f1c     A8 44 B1 FD | 	call	#__system____builtin_atoi
13f20     FD 14 02 F6 | 	mov	arg02, result1
13f24     22 13 02 F6 | 	mov	arg01, local16
13f28     A0 D7 B0 FD | 	call	#_pslpoke
13f2c                 | LR__1655
13f2c                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13f2c     18 4E 05 F1 | 	add	fp, #24
13f30     A7 44 02 FB | 	rdlong	local16, fp
13f34     18 4E 85 F1 | 	sub	fp, #24
13f38     02 44 0E F2 | 	cmp	local16, #2 wz
13f3c     54 00 90 5D |  if_ne	jmp	#LR__1656
13f40     52 00 00 FF 
13f44     4C E4 05 F1 | 	add	objptr, ##42060
13f48     F2 42 02 FB | 	rdlong	local15, objptr
13f4c     52 00 00 FF 
13f50     4C E4 85 F1 | 	sub	objptr, ##42060
13f54     2B 42 0E F2 | 	cmp	local15, #43 wz
13f58     38 00 90 AD |  if_e	jmp	#LR__1656
13f5c     1C 4E 05 F1 | 	add	fp, #28
13f60     A7 44 02 FB | 	rdlong	local16, fp
13f64     14 4F 05 F1 | 	add	fp, #276
13f68     A7 34 02 FB | 	rdlong	local08, fp
13f6c     02 34 66 F0 | 	shl	local08, #2
13f70     04 4F 85 F1 | 	sub	fp, #260
13f74     A7 34 02 F1 | 	add	local08, fp
13f78     1A 13 02 FB | 	rdlong	arg01, local08
13f7c     00 14 06 F6 | 	mov	arg02, #0
13f80     2C 4E 85 F1 | 	sub	fp, #44
13f84     40 44 B1 FD | 	call	#__system____builtin_atoi
13f88     FD 14 02 F6 | 	mov	arg02, result1
13f8c     22 13 02 F6 | 	mov	arg01, local16
13f90     80 D7 B0 FD | 	call	#_psdpoke
13f94                 | LR__1656
13f94                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13f94     18 4E 05 F1 | 	add	fp, #24
13f98     A7 44 02 FB | 	rdlong	local16, fp
13f9c     18 4E 85 F1 | 	sub	fp, #24
13fa0     01 44 0E F2 | 	cmp	local16, #1 wz
13fa4     54 00 90 5D |  if_ne	jmp	#LR__1657
13fa8     52 00 00 FF 
13fac     4C E4 05 F1 | 	add	objptr, ##42060
13fb0     F2 42 02 FB | 	rdlong	local15, objptr
13fb4     52 00 00 FF 
13fb8     4C E4 85 F1 | 	sub	objptr, ##42060
13fbc     2B 42 0E F2 | 	cmp	local15, #43 wz
13fc0     38 00 90 AD |  if_e	jmp	#LR__1657
13fc4     1C 4E 05 F1 | 	add	fp, #28
13fc8     A7 44 02 FB | 	rdlong	local16, fp
13fcc     14 4F 05 F1 | 	add	fp, #276
13fd0     A7 34 02 FB | 	rdlong	local08, fp
13fd4     02 34 66 F0 | 	shl	local08, #2
13fd8     04 4F 85 F1 | 	sub	fp, #260
13fdc     A7 34 02 F1 | 	add	local08, fp
13fe0     1A 13 02 FB | 	rdlong	arg01, local08
13fe4     00 14 06 F6 | 	mov	arg02, #0
13fe8     2C 4E 85 F1 | 	sub	fp, #44
13fec     D8 43 B1 FD | 	call	#__system____builtin_atoi
13ff0     FD 14 02 F6 | 	mov	arg02, result1
13ff4     22 13 02 F6 | 	mov	arg01, local16
13ff8     60 D7 B0 FD | 	call	#_pspoke
13ffc                 | LR__1657
13ffc                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13ffc     18 4E 05 F1 | 	add	fp, #24
14000     A7 44 02 FB | 	rdlong	local16, fp
14004     18 4E 85 F1 | 	sub	fp, #24
14008     06 44 0E F2 | 	cmp	local16, #6 wz
1400c     64 00 90 5D |  if_ne	jmp	#LR__1658
14010     52 00 00 FF 
14014     4C E4 05 F1 | 	add	objptr, ##42060
14018     F2 42 02 FB | 	rdlong	local15, objptr
1401c     52 00 00 FF 
14020     4C E4 85 F1 | 	sub	objptr, ##42060
14024     2B 42 0E F2 | 	cmp	local15, #43 wz
14028     48 00 90 AD |  if_e	jmp	#LR__1658
1402c     30 4F 05 F1 | 	add	fp, #304
14030     A7 32 02 FB | 	rdlong	local07, fp
14034     02 32 66 F0 | 	shl	local07, #2
14038     04 4F 85 F1 | 	sub	fp, #260
1403c     A7 32 02 F1 | 	add	local07, fp
14040     19 13 02 FB | 	rdlong	arg01, local07
14044     2C 4E 85 F1 | 	sub	fp, #44
14048     10 45 B1 FD | 	call	#__system____builtin_atof
1404c     28 4E 05 F1 | 	add	fp, #40
14050     A7 FA 61 FC | 	wrlong	result1, fp
14054     0C 4E 85 F1 | 	sub	fp, #12
14058     A7 44 02 FB | 	rdlong	local16, fp
1405c     0C 4E 05 F1 | 	add	fp, #12
14060     A7 12 02 F6 | 	mov	arg01, fp
14064     28 4E 85 F1 | 	sub	fp, #40
14068     09 15 02 FB | 	rdlong	arg02, arg01
1406c     22 13 02 F6 | 	mov	arg01, local16
14070     58 D6 B0 FD | 	call	#_pslpoke
14074                 | LR__1658
14074     30 4F 05 F1 | 	add	fp, #304
14078     A7 42 02 FB | 	rdlong	local15, fp
1407c     01 42 06 F1 | 	add	local15, #1
14080     A7 42 62 FC | 	wrlong	local15, fp
14084     30 4F 85 F1 | 	sub	fp, #304
14088     E4 F6 9F FD | 	jmp	#LR__1623
1408c                 | LR__1659
1408c                 | LR__1660
1408c     A7 F0 03 F6 | 	mov	ptra, fp
14090     B2 00 A0 FD | 	call	#popregs_
14094                 | _do_input_ret
14094     2D 00 64 FD | 	ret
14098                 | 
14098                 | ' 
14098                 | ' ' ----------------  left$
14098                 | ' 
14098                 | ' sub do_left
14098                 | _do_left
14098     00 4A 05 F6 | 	mov	COUNT_, #0
1409c     A8 00 A0 FD | 	call	#pushregs_
140a0     14 F0 07 F1 | 	add	ptra, #20
140a4     4A 00 00 FF 
140a8     80 E4 05 F1 | 	add	objptr, ##38016
140ac     F2 16 02 FB | 	rdlong	arg03, objptr
140b0     0B 15 02 F6 | 	mov	arg02, arg03
140b4     01 14 66 F0 | 	shl	arg02, #1
140b8     0B 15 02 F1 | 	add	arg02, arg03
140bc     02 14 66 F0 | 	shl	arg02, #2
140c0     03 00 00 FF 
140c4     04 E4 85 F1 | 	sub	objptr, ##1540
140c8     F2 14 02 F1 | 	add	arg02, objptr
140cc     0A 17 02 FB | 	rdlong	arg03, arg02
140d0     0C 4E 05 F1 | 	add	fp, #12
140d4     A7 16 62 FC | 	wrlong	arg03, fp
140d8                 | ' 
140d8                 | ' numpar=compiledline(lineptr_e).result.uresult
140d8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140d8     0C 4E 85 F1 | 	sub	fp, #12
140dc     02 16 0E F2 | 	cmp	arg03, #2 wz
140e0     47 00 00 FF 
140e4     7C E4 85 F1 | 	sub	objptr, ##36476
140e8     40 00 90 AD |  if_e	jmp	#LR__1670
140ec     00 12 06 F6 | 	mov	arg01, #0
140f0     84 6A B1 FD | 	call	#__system___getiolock_0593
140f4     FD 12 02 F6 | 	mov	arg01, result1
140f8     D8 0D B1 FD | 	call	#__system___lockmem
140fc     A9 01 00 FF 
14100     3C 15 06 F6 | 	mov	arg02, ##@LR__5822
14104     00 12 06 F6 | 	mov	arg01, #0
14108     00 16 06 F6 | 	mov	arg03, #0
1410c     BC 1A B1 FD | 	call	#__system___basic_print_string
14110     00 12 06 F6 | 	mov	arg01, #0
14114     60 6A B1 FD | 	call	#__system___getiolock_0593
14118     FD 00 68 FC | 	wrlong	#0, result1
1411c     27 12 06 F6 | 	mov	arg01, #39
14120     00 14 06 F6 | 	mov	arg02, #0
14124     04 D4 B0 FD | 	call	#_printerror
14128     EC 00 90 FD | 	jmp	#LR__1673
1412c                 | LR__1670
1412c     5C 8A BF FD | 	call	#_pop
14130     FF 16 02 F6 | 	mov	arg03, result3
14134     A7 FA 61 FC | 	wrlong	result1, fp
14138     04 4E 05 F1 | 	add	fp, #4
1413c     A7 FC 61 FC | 	wrlong	result2, fp
14140     04 4E 05 F1 | 	add	fp, #4
14144     A7 16 62 FC | 	wrlong	arg03, fp
14148     08 4E 85 F1 | 	sub	fp, #8
1414c     A7 12 02 F6 | 	mov	arg01, fp
14150     1C 8C BF FD | 	call	#_converttoint
14154     FD 16 02 F6 | 	mov	arg03, result1
14158     10 4E 05 F1 | 	add	fp, #16
1415c     A7 16 62 FC | 	wrlong	arg03, fp
14160     10 4E 85 F1 | 	sub	fp, #16
14164     24 8A BF FD | 	call	#_pop
14168     FF 16 02 F6 | 	mov	arg03, result3
1416c     A7 FA 61 FC | 	wrlong	result1, fp
14170     04 4E 05 F1 | 	add	fp, #4
14174     A7 FC 61 FC | 	wrlong	result2, fp
14178     04 4E 05 F1 | 	add	fp, #4
1417c     A7 16 62 FC | 	wrlong	arg03, fp
14180                 | ' t1=pop() : arg=converttoint(t1)
14180                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14180     08 4E 85 F1 | 	sub	fp, #8
14184     2B 16 0E F2 | 	cmp	arg03, #43 wz
14188     18 00 90 5D |  if_ne	jmp	#LR__1671
1418c     A7 12 02 FB | 	rdlong	arg01, fp
14190     70 8B BF FD | 	call	#_convertstring
14194     A7 FA 61 FC | 	wrlong	result1, fp
14198     08 4E 05 F1 | 	add	fp, #8
1419c     A7 3E 68 FC | 	wrlong	#31, fp
141a0     08 4E 85 F1 | 	sub	fp, #8
141a4                 | LR__1671
141a4                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
141a4     08 4E 05 F1 | 	add	fp, #8
141a8     A7 16 02 FB | 	rdlong	arg03, fp
141ac     08 4E 85 F1 | 	sub	fp, #8
141b0     1F 16 0E F2 | 	cmp	arg03, #31 wz
141b4     40 00 90 AD |  if_e	jmp	#LR__1672
141b8     00 12 06 F6 | 	mov	arg01, #0
141bc     B8 69 B1 FD | 	call	#__system___getiolock_0593
141c0     FD 12 02 F6 | 	mov	arg01, result1
141c4     0C 0D B1 FD | 	call	#__system___lockmem
141c8     A9 01 00 FF 
141cc     44 15 06 F6 | 	mov	arg02, ##@LR__5823
141d0     00 12 06 F6 | 	mov	arg01, #0
141d4     00 16 06 F6 | 	mov	arg03, #0
141d8     F0 19 B1 FD | 	call	#__system___basic_print_string
141dc     00 12 06 F6 | 	mov	arg01, #0
141e0     94 69 B1 FD | 	call	#__system___getiolock_0593
141e4     FD 00 68 FC | 	wrlong	#0, result1
141e8     0F 12 06 F6 | 	mov	arg01, #15
141ec     00 14 06 F6 | 	mov	arg02, #0
141f0     38 D3 B0 FD | 	call	#_printerror
141f4     20 00 90 FD | 	jmp	#LR__1673
141f8                 | LR__1672
141f8     A7 12 02 FB | 	rdlong	arg01, fp
141fc     10 4E 05 F1 | 	add	fp, #16
14200     A7 14 02 FB | 	rdlong	arg02, fp
14204     10 4E 85 F1 | 	sub	fp, #16
14208     48 2D B1 FD | 	call	#__system__Left_S
1420c     A7 FA 61 FC | 	wrlong	result1, fp
14210     A7 12 02 F6 | 	mov	arg01, fp
14214     0C 8A BF FD | 	call	#_push
14218                 | LR__1673
14218     A7 F0 03 F6 | 	mov	ptra, fp
1421c     B2 00 A0 FD | 	call	#popregs_
14220                 | _do_left_ret
14220     2D 00 64 FD | 	ret
14224                 | 
14224                 | ' 
14224                 | ' ' ----------------  len
14224                 | ' 
14224                 | ' sub do_len
14224                 | _do_len
14224     02 4A 05 F6 | 	mov	COUNT_, #2
14228     A8 00 A0 FD | 	call	#pushregs_
1422c     14 F0 07 F1 | 	add	ptra, #20
14230     4A 00 00 FF 
14234     80 E4 05 F1 | 	add	objptr, ##38016
14238     F2 26 02 FB | 	rdlong	local01, objptr
1423c     13 17 02 F6 | 	mov	arg03, local01
14240     01 16 66 F0 | 	shl	arg03, #1
14244     13 17 02 F1 | 	add	arg03, local01
14248     02 16 66 F0 | 	shl	arg03, #2
1424c     03 00 00 FF 
14250     04 E4 85 F1 | 	sub	objptr, ##1540
14254     F2 16 02 F1 | 	add	arg03, objptr
14258     0B 17 02 FB | 	rdlong	arg03, arg03
1425c     0C 4E 05 F1 | 	add	fp, #12
14260     A7 16 62 FC | 	wrlong	arg03, fp
14264                 | ' 
14264                 | ' numpar=compiledline(lineptr_e).result.uresult
14264                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14264     0C 4E 85 F1 | 	sub	fp, #12
14268     02 16 16 F2 | 	cmp	arg03, #2 wc
1426c     47 00 00 FF 
14270     7C E4 85 F1 | 	sub	objptr, ##36476
14274     0C 4E 05 C1 |  if_b	add	fp, #12
14278     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1427c     0C 4E 85 C1 |  if_b	sub	fp, #12
14280     40 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14284     00 12 06 F6 | 	mov	arg01, #0
14288     EC 68 B1 FD | 	call	#__system___getiolock_0593
1428c     FD 12 02 F6 | 	mov	arg01, result1
14290     40 0C B1 FD | 	call	#__system___lockmem
14294     A9 01 00 FF 
14298     4C 15 06 F6 | 	mov	arg02, ##@LR__5824
1429c     00 12 06 F6 | 	mov	arg01, #0
142a0     00 16 06 F6 | 	mov	arg03, #0
142a4     24 19 B1 FD | 	call	#__system___basic_print_string
142a8     00 12 06 F6 | 	mov	arg01, #0
142ac     C8 68 B1 FD | 	call	#__system___getiolock_0593
142b0     FD 00 68 FC | 	wrlong	#0, result1
142b4     27 12 06 F6 | 	mov	arg01, #39
142b8     00 14 06 F6 | 	mov	arg02, #0
142bc     6C D2 B0 FD | 	call	#_printerror
142c0     C8 00 90 FD | 	jmp	#LR__1685
142c4                 | LR__1680
142c4     C4 88 BF FD | 	call	#_pop
142c8     FF 16 02 F6 | 	mov	arg03, result3
142cc     A7 FA 61 FC | 	wrlong	result1, fp
142d0     04 4E 05 F1 | 	add	fp, #4
142d4     A7 FC 61 FC | 	wrlong	result2, fp
142d8     04 4E 05 F1 | 	add	fp, #4
142dc     A7 16 62 FC | 	wrlong	arg03, fp
142e0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142e0     08 4E 85 F1 | 	sub	fp, #8
142e4     2B 16 0E F2 | 	cmp	arg03, #43 wz
142e8     18 00 90 5D |  if_ne	jmp	#LR__1681
142ec     A7 12 02 FB | 	rdlong	arg01, fp
142f0     10 8A BF FD | 	call	#_convertstring
142f4     A7 FA 61 FC | 	wrlong	result1, fp
142f8     08 4E 05 F1 | 	add	fp, #8
142fc     A7 3E 68 FC | 	wrlong	#31, fp
14300     08 4E 85 F1 | 	sub	fp, #8
14304                 | LR__1681
14304                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14304     08 4E 05 F1 | 	add	fp, #8
14308     A7 16 02 FB | 	rdlong	arg03, fp
1430c     08 4E 85 F1 | 	sub	fp, #8
14310     1F 16 0E F2 | 	cmp	arg03, #31 wz
14314     40 00 90 AD |  if_e	jmp	#LR__1682
14318     00 12 06 F6 | 	mov	arg01, #0
1431c     58 68 B1 FD | 	call	#__system___getiolock_0593
14320     FD 12 02 F6 | 	mov	arg01, result1
14324     AC 0B B1 FD | 	call	#__system___lockmem
14328     A9 01 00 FF 
1432c     52 15 06 F6 | 	mov	arg02, ##@LR__5825
14330     00 12 06 F6 | 	mov	arg01, #0
14334     00 16 06 F6 | 	mov	arg03, #0
14338     90 18 B1 FD | 	call	#__system___basic_print_string
1433c     00 12 06 F6 | 	mov	arg01, #0
14340     34 68 B1 FD | 	call	#__system___getiolock_0593
14344     FD 00 68 FC | 	wrlong	#0, result1
14348     0F 12 06 F6 | 	mov	arg01, #15
1434c     00 14 06 F6 | 	mov	arg02, #0
14350     D8 D1 B0 FD | 	call	#_printerror
14354     34 00 90 FD | 	jmp	#LR__1685
14358                 | LR__1682
14358     A7 12 02 FB | 	rdlong	arg01, fp
1435c     09 29 02 F6 | 	mov	local02, arg01
14360     97 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
14364                 | LR__1683
14364     14 FB C9 FA | 	rdbyte	result1, local02 wz
14368     01 28 06 51 |  if_ne	add	local02, #1
1436c     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
14370                 | LR__1684
14370     09 29 82 F1 | 	sub	local02, arg01
14374     A7 28 62 FC | 	wrlong	local02, fp
14378     08 4E 05 F1 | 	add	fp, #8
1437c     A7 38 68 FC | 	wrlong	#28, fp
14380     08 4E 85 F1 | 	sub	fp, #8
14384     A7 12 02 F6 | 	mov	arg01, fp
14388     98 88 BF FD | 	call	#_push
1438c                 | LR__1685
1438c     A7 F0 03 F6 | 	mov	ptra, fp
14390     B2 00 A0 FD | 	call	#popregs_
14394                 | _do_len_ret
14394     2D 00 64 FD | 	ret
14398                 | 
14398                 | ' 
14398                 | ' ' ----------------  list
14398                 | ' 
14398                 | ' sub do_list
14398                 | _do_list
14398     02 4A 05 F6 | 	mov	COUNT_, #2
1439c     A8 00 A0 FD | 	call	#pushregs_
143a0     B8 F0 07 F1 | 	add	ptra, #184
143a4     04 4E 05 F1 | 	add	fp, #4
143a8     A7 00 68 FC | 	wrlong	#0, fp
143ac     04 4E 05 F1 | 	add	fp, #4
143b0     FF FF BF FF 
143b4     A7 FE 6B FC | 	wrlong	##2147483647, fp
143b8     08 4E 85 F1 | 	sub	fp, #8
143bc     4A 00 00 FF 
143c0     80 E4 05 F1 | 	add	objptr, ##38016
143c4     F2 26 02 FB | 	rdlong	local01, objptr
143c8     13 17 02 F6 | 	mov	arg03, local01
143cc     01 16 66 F0 | 	shl	arg03, #1
143d0     13 17 02 F1 | 	add	arg03, local01
143d4     02 16 66 F0 | 	shl	arg03, #2
143d8     03 00 00 FF 
143dc     04 E4 85 F1 | 	sub	objptr, ##1540
143e0     F2 16 02 F1 | 	add	arg03, objptr
143e4     0B 17 02 FB | 	rdlong	arg03, arg03
143e8     A7 16 62 FC | 	wrlong	arg03, fp
143ec                 | ' 
143ec                 | ' startline=0 : endline=$7FFFFFFF
143ec                 | ' numpar=compiledline(lineptr_e).result.uresult
143ec                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143ec     01 16 0E F2 | 	cmp	arg03, #1 wz
143f0     47 00 00 FF 
143f4     7C E4 85 F1 | 	sub	objptr, ##36476
143f8     3C 00 90 5D |  if_ne	jmp	#LR__1690
143fc     8C 87 BF FD | 	call	#_pop
14400     FF 26 02 F6 | 	mov	local01, result3
14404     0C 4E 05 F1 | 	add	fp, #12
14408     A7 FA 61 FC | 	wrlong	result1, fp
1440c     04 4E 05 F1 | 	add	fp, #4
14410     A7 FC 61 FC | 	wrlong	result2, fp
14414     04 4E 05 F1 | 	add	fp, #4
14418     A7 26 62 FC | 	wrlong	local01, fp
1441c     08 4E 85 F1 | 	sub	fp, #8
14420     A7 12 02 F6 | 	mov	arg01, fp
14424     0C 4E 85 F1 | 	sub	fp, #12
14428     44 89 BF FD | 	call	#_converttoint
1442c     04 4E 05 F1 | 	add	fp, #4
14430     A7 FA 61 FC | 	wrlong	result1, fp
14434     04 4E 85 F1 | 	sub	fp, #4
14438                 | LR__1690
14438                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14438     A7 16 02 FB | 	rdlong	arg03, fp
1443c     02 16 0E F2 | 	cmp	arg03, #2 wz
14440     7C 00 90 5D |  if_ne	jmp	#LR__1691
14444     44 87 BF FD | 	call	#_pop
14448     FF 26 02 F6 | 	mov	local01, result3
1444c     0C 4E 05 F1 | 	add	fp, #12
14450     A7 FA 61 FC | 	wrlong	result1, fp
14454     04 4E 05 F1 | 	add	fp, #4
14458     A7 FC 61 FC | 	wrlong	result2, fp
1445c     04 4E 05 F1 | 	add	fp, #4
14460     A7 26 62 FC | 	wrlong	local01, fp
14464     08 4E 85 F1 | 	sub	fp, #8
14468     A7 12 02 F6 | 	mov	arg01, fp
1446c     0C 4E 85 F1 | 	sub	fp, #12
14470     FC 88 BF FD | 	call	#_converttoint
14474     FD 26 02 F6 | 	mov	local01, result1
14478     08 4E 05 F1 | 	add	fp, #8
1447c     A7 26 62 FC | 	wrlong	local01, fp
14480     08 4E 85 F1 | 	sub	fp, #8
14484     04 87 BF FD | 	call	#_pop
14488     FF 26 02 F6 | 	mov	local01, result3
1448c     0C 4E 05 F1 | 	add	fp, #12
14490     A7 FA 61 FC | 	wrlong	result1, fp
14494     04 4E 05 F1 | 	add	fp, #4
14498     A7 FC 61 FC | 	wrlong	result2, fp
1449c     04 4E 05 F1 | 	add	fp, #4
144a0     A7 26 62 FC | 	wrlong	local01, fp
144a4     08 4E 85 F1 | 	sub	fp, #8
144a8     A7 12 02 F6 | 	mov	arg01, fp
144ac     0C 4E 85 F1 | 	sub	fp, #12
144b0     BC 88 BF FD | 	call	#_converttoint
144b4     04 4E 05 F1 | 	add	fp, #4
144b8     A7 FA 61 FC | 	wrlong	result1, fp
144bc     04 4E 85 F1 | 	sub	fp, #4
144c0                 | LR__1691
144c0                 | ' 
144c0                 | ' 
144c0                 | ' print
144c0     00 12 06 F6 | 	mov	arg01, #0
144c4     B0 66 B1 FD | 	call	#__system___getiolock_0593
144c8     FD 12 02 F6 | 	mov	arg01, result1
144cc     04 0A B1 FD | 	call	#__system___lockmem
144d0     00 12 06 F6 | 	mov	arg01, #0
144d4     0A 14 06 F6 | 	mov	arg02, #10
144d8     00 16 06 F6 | 	mov	arg03, #0
144dc     94 16 B1 FD | 	call	#__system___basic_print_char
144e0     00 12 06 F6 | 	mov	arg01, #0
144e4     90 66 B1 FD | 	call	#__system___getiolock_0593
144e8     FD 00 68 FC | 	wrlong	#0, result1
144ec     4A 00 00 FF 
144f0     88 E4 05 F1 | 	add	objptr, ##38024
144f4     F2 28 02 FB | 	rdlong	local02, objptr
144f8     07 00 00 FF 
144fc     D0 E5 05 F1 | 	add	objptr, ##4048
14500     F2 28 62 FC | 	wrlong	local02, objptr
14504     52 00 00 FF 
14508     58 E4 85 F1 | 	sub	objptr, ##42072
1450c                 | ' do 
1450c                 | LR__1692
1450c     20 4E 05 F1 | 	add	fp, #32
14510     A7 12 02 F6 | 	mov	arg01, fp
14514     20 4E 85 F1 | 	sub	fp, #32
14518     52 00 00 FF 
1451c     58 E4 05 F1 | 	add	objptr, ##42072
14520     F2 14 02 FB | 	rdlong	arg02, objptr
14524     18 16 06 F6 | 	mov	arg03, #24
14528     46 00 00 FF 
1452c     8C E5 85 F1 | 	sub	objptr, ##36236
14530     60 FD B0 FD | 	call	#_psram_spin2_read1
14534     0B 00 00 FF 
14538     CC E4 85 F1 | 	sub	objptr, ##5836
1453c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
1453c                 | '   
1453c                 | '   if header(0)<> $FFFFFFFF then
1453c     20 4E 05 F1 | 	add	fp, #32
14540     A7 28 02 FB | 	rdlong	local02, fp
14544     20 4E 85 F1 | 	sub	fp, #32
14548     FF FF 7F FF 
1454c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14550     A8 00 90 AD |  if_e	jmp	#LR__1694
14554     38 4E 05 F1 | 	add	fp, #56
14558     3F 16 06 F6 | 	mov	arg03, #63
1455c     28 16 62 FD | 	setq	arg03
14560     A7 00 68 FC | 	wrlong	#0, fp
14564     A7 12 02 F6 | 	mov	arg01, fp
14568     10 4E 85 F1 | 	sub	fp, #16
1456c     A7 14 02 FB | 	rdlong	arg02, fp
14570     04 4E 05 F1 | 	add	fp, #4
14574     A7 16 02 FB | 	rdlong	arg03, fp
14578     2C 4E 85 F1 | 	sub	fp, #44
1457c     0B 00 00 FF 
14580     CC E4 05 F1 | 	add	objptr, ##5836
14584     0C FD B0 FD | 	call	#_psram_spin2_read1
14588     0B 00 00 FF 
1458c     CC E4 85 F1 | 	sub	objptr, ##5836
14590                 | '     longfill(linebuf,0,64)
14590                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14590                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14590     20 4E 05 F1 | 	add	fp, #32
14594     A7 28 02 FB | 	rdlong	local02, fp
14598     1C 4E 85 F1 | 	sub	fp, #28
1459c     A7 26 02 FB | 	rdlong	local01, fp
145a0     04 4E 85 F1 | 	sub	fp, #4
145a4     13 29 52 F2 | 	cmps	local02, local01 wc
145a8     30 00 90 CD |  if_b	jmp	#LR__1693
145ac     20 4E 05 F1 | 	add	fp, #32
145b0     A7 28 02 FB | 	rdlong	local02, fp
145b4     18 4E 85 F1 | 	sub	fp, #24
145b8     A7 16 02 FB | 	rdlong	arg03, fp
145bc     08 4E 85 F1 | 	sub	fp, #8
145c0     0B 29 5A F2 | 	cmps	local02, arg03 wcz
145c4     14 00 90 1D |  if_a	jmp	#LR__1693
145c8     38 4E 05 F1 | 	add	fp, #56
145cc     A7 12 02 F6 | 	mov	arg01, fp
145d0     38 4E 85 F1 | 	sub	fp, #56
145d4                 | ' 
145d4                 | ' write(text)
145d4     80 F0 B0 FD | 	call	#_hg010b_spin2_write
145d8                 | ' crlf
145d8     7C F5 B0 FD | 	call	#_hg010b_spin2_crlf
145dc                 | LR__1693
145dc     34 4E 05 F1 | 	add	fp, #52
145e0     A7 28 02 FB | 	rdlong	local02, fp
145e4     34 4E 85 F1 | 	sub	fp, #52
145e8     52 00 00 FF 
145ec     58 E4 05 F1 | 	add	objptr, ##42072
145f0     F2 28 62 FC | 	wrlong	local02, objptr
145f4     52 00 00 FF 
145f8     58 E4 85 F1 | 	sub	objptr, ##42072
145fc                 | LR__1694
145fc     34 4E 05 F1 | 	add	fp, #52
14600     A7 28 02 FB | 	rdlong	local02, fp
14604     34 4E 85 F1 | 	sub	fp, #52
14608     FF FF 3F FF 
1460c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14610     20 4E 05 51 |  if_ne	add	fp, #32
14614     A7 26 02 5B |  if_ne	rdlong	local01, fp
14618     20 4E 85 51 |  if_ne	sub	fp, #32
1461c     FF FF 7F 5F 
14620     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14624     E4 FE 9F 5D |  if_ne	jmp	#LR__1692
14628     A7 F0 03 F6 | 	mov	ptra, fp
1462c     B2 00 A0 FD | 	call	#popregs_
14630                 | _do_list_ret
14630     2D 00 64 FD | 	ret
14634                 | 
14634                 | ' 
14634                 | ' '-------------------- load
14634                 | ' 
14634                 | ' sub do_load(amode=0 as integer)  
14634                 | _do_load
14634     01 4A 05 F6 | 	mov	COUNT_, #1
14638     A8 00 A0 FD | 	call	#pushregs_
1463c     AC F0 07 F1 | 	add	ptra, #172
14640     A7 12 62 FC | 	wrlong	arg01, fp
14644     52 00 00 FF 
14648     10 E4 05 F1 | 	add	objptr, ##42000
1464c     F2 02 68 FC | 	wrlong	#1, objptr
14650     07 00 00 FF 
14654     90 E5 85 F1 | 	sub	objptr, ##3984
14658     F2 14 02 FB | 	rdlong	arg02, objptr
1465c     0A 13 02 F6 | 	mov	arg01, arg02
14660     01 12 66 F0 | 	shl	arg01, #1
14664     0A 13 02 F1 | 	add	arg01, arg02
14668     02 12 66 F0 | 	shl	arg01, #2
1466c     03 00 00 FF 
14670     04 E4 85 F1 | 	sub	objptr, ##1540
14674     F2 12 02 F1 | 	add	arg01, objptr
14678     09 15 02 FB | 	rdlong	arg02, arg01
1467c     1C 4E 05 F1 | 	add	fp, #28
14680     A7 14 62 FC | 	wrlong	arg02, fp
14684     8C 4E 05 F1 | 	add	fp, #140
14688     A7 12 02 F6 | 	mov	arg01, fp
1468c     47 00 00 FF 
14690     7C E4 85 F1 | 	sub	objptr, ##36476
14694     80 4E 85 F1 | 	sub	fp, #128
14698     09 4F 61 FC | 	wrlong	fp, arg01
1469c                 | ' 
1469c                 | ' inload=1
1469c                 | ' numpar=compiledline(lineptr_e).result.uresult
1469c                 | ' lpoke varptr(line2$),varptr(line2)
1469c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1469c     0C 4E 85 F1 | 	sub	fp, #12
146a0     A7 26 02 FB | 	rdlong	local01, fp
146a4     1C 4E 85 F1 | 	sub	fp, #28
146a8     01 26 56 F2 | 	cmps	local01, #1 wc
146ac     24 00 90 CD |  if_b	jmp	#LR__1700
146b0     D8 84 BF FD | 	call	#_pop
146b4     04 4E 05 F1 | 	add	fp, #4
146b8     A7 FA 61 FC | 	wrlong	result1, fp
146bc     04 4E 05 F1 | 	add	fp, #4
146c0     A7 FC 61 FC | 	wrlong	result2, fp
146c4     04 4E 05 F1 | 	add	fp, #4
146c8     A7 FE 61 FC | 	wrlong	result3, fp
146cc     0C 4E 85 F1 | 	sub	fp, #12
146d0     28 00 90 FD | 	jmp	#LR__1701
146d4                 | LR__1700
146d4     52 00 00 FF 
146d8     00 E4 05 F1 | 	add	objptr, ##41984
146dc     F2 26 02 FB | 	rdlong	local01, objptr
146e0     52 00 00 FF 
146e4     00 E4 85 F1 | 	sub	objptr, ##41984
146e8     04 4E 05 F1 | 	add	fp, #4
146ec     A7 26 62 FC | 	wrlong	local01, fp
146f0     08 4E 05 F1 | 	add	fp, #8
146f4     A7 3E 68 FC | 	wrlong	#31, fp
146f8     0C 4E 85 F1 | 	sub	fp, #12
146fc                 | LR__1701
146fc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
146fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
146fc     0C 4E 05 F1 | 	add	fp, #12
14700     A7 26 02 FB | 	rdlong	local01, fp
14704     0C 4E 85 F1 | 	sub	fp, #12
14708     2B 26 0E F2 | 	cmp	local01, #43 wz
1470c     24 00 90 5D |  if_ne	jmp	#LR__1702
14710     04 4E 05 F1 | 	add	fp, #4
14714     A7 12 02 FB | 	rdlong	arg01, fp
14718     04 4E 85 F1 | 	sub	fp, #4
1471c     E4 85 BF FD | 	call	#_convertstring
14720     04 4E 05 F1 | 	add	fp, #4
14724     A7 FA 61 FC | 	wrlong	result1, fp
14728     08 4E 05 F1 | 	add	fp, #8
1472c     A7 3E 68 FC | 	wrlong	#31, fp
14730     0C 4E 85 F1 | 	sub	fp, #12
14734                 | LR__1702
14734                 | ' if t1.result_type=result_string then
14734     0C 4E 05 F1 | 	add	fp, #12
14738     A7 26 02 FB | 	rdlong	local01, fp
1473c     0C 4E 85 F1 | 	sub	fp, #12
14740     1F 26 0E F2 | 	cmp	local01, #31 wz
14744     E8 02 90 5D |  if_ne	jmp	#LR__1708
14748                 | '   if amode<>1234 then do_new
14748     A7 26 02 FB | 	rdlong	local01, fp
1474c     02 00 00 FF 
14750     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14754     10 0E B0 5D |  if_ne	call	#_do_new
14758                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14758     04 4E 05 F1 | 	add	fp, #4
1475c     A7 12 02 FB | 	rdlong	arg01, fp
14760     04 4E 85 F1 | 	sub	fp, #4
14764     A9 01 00 FF 
14768     58 15 06 F6 | 	mov	arg02, ##@LR__5826
1476c     8C 07 B1 FD | 	call	#__system___string_cmp
14770     00 FA 0D F2 | 	cmp	result1, #0 wz
14774     24 00 90 5D |  if_ne	jmp	#LR__1703
14778     52 00 00 FF 
1477c     00 E4 05 F1 | 	add	objptr, ##41984
14780     F2 26 02 FB | 	rdlong	local01, objptr
14784     52 00 00 FF 
14788     00 E4 85 F1 | 	sub	objptr, ##41984
1478c     04 4E 05 F1 | 	add	fp, #4
14790     A7 26 62 FC | 	wrlong	local01, fp
14794     04 4E 85 F1 | 	sub	fp, #4
14798     20 00 90 FD | 	jmp	#LR__1704
1479c                 | LR__1703
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 26 02 FB | 	rdlong	local01, fp
147a4     04 4E 85 F1 | 	sub	fp, #4
147a8     52 00 00 FF 
147ac     00 E4 05 F1 | 	add	objptr, ##41984
147b0     F2 26 62 FC | 	wrlong	local01, objptr
147b4     52 00 00 FF 
147b8     00 E4 85 F1 | 	sub	objptr, ##41984
147bc                 | LR__1704
147bc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
147bc     09 12 06 F6 | 	mov	arg01, #9
147c0     6C 5A B1 FD | 	call	#__system__close
147c4     09 26 06 F6 | 	mov	local01, #9
147c8     4A 00 00 FF 
147cc     94 E4 05 F1 | 	add	objptr, ##38036
147d0     F2 12 02 FB | 	rdlong	arg01, objptr
147d4     4A 00 00 FF 
147d8     94 E4 85 F1 | 	sub	objptr, ##38036
147dc     A9 01 00 FF 
147e0     59 15 06 F6 | 	mov	arg02, ##@LR__5827
147e4     48 07 B1 FD | 	call	#__system___string_concat
147e8     FD 12 02 F6 | 	mov	arg01, result1
147ec     04 4E 05 F1 | 	add	fp, #4
147f0     A7 14 02 FB | 	rdlong	arg02, fp
147f4     04 4E 85 F1 | 	sub	fp, #4
147f8     34 07 B1 FD | 	call	#__system___string_concat
147fc     FD 14 02 F6 | 	mov	arg02, result1
14800     13 13 02 F6 | 	mov	arg01, local01
14804     00 16 06 F6 | 	mov	arg03, #0
14808     CC 12 B1 FD | 	call	#__system___basic_open_string
1480c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14810     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14814     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
14818     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1481c     14 4E 05 F1 | 	add	fp, #20
14820     A7 FA 61 FC | 	wrlong	result1, fp
14824                 | '   r=geterr() 
14824                 | '   if r then 
14824     14 4E 85 F1 | 	sub	fp, #20
14828     54 01 90 AD |  if_e	jmp	#LR__1706
1482c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
1482c     09 12 06 F6 | 	mov	arg01, #9
14830     FC 59 B1 FD | 	call	#__system__close
14834     09 26 06 F6 | 	mov	local01, #9
14838     4A 00 00 FF 
1483c     94 E4 05 F1 | 	add	objptr, ##38036
14840     F2 12 02 FB | 	rdlong	arg01, objptr
14844     4A 00 00 FF 
14848     94 E4 85 F1 | 	sub	objptr, ##38036
1484c     A9 01 00 FF 
14850     5B 15 06 F6 | 	mov	arg02, ##@LR__5828
14854     D8 06 B1 FD | 	call	#__system___string_concat
14858     FD 12 02 F6 | 	mov	arg01, result1
1485c     04 4E 05 F1 | 	add	fp, #4
14860     A7 14 02 FB | 	rdlong	arg02, fp
14864     04 4E 85 F1 | 	sub	fp, #4
14868     C4 06 B1 FD | 	call	#__system___string_concat
1486c     FD 12 02 F6 | 	mov	arg01, result1
14870     A9 01 00 FF 
14874     5D 15 06 F6 | 	mov	arg02, ##@LR__5829
14878     B4 06 B1 FD | 	call	#__system___string_concat
1487c     FD 14 02 F6 | 	mov	arg02, result1
14880     13 13 02 F6 | 	mov	arg01, local01
14884     00 16 06 F6 | 	mov	arg03, #0
14888     4C 12 B1 FD | 	call	#__system___basic_open_string
1488c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14890     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14894     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
14898     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1489c     14 4E 05 F1 | 	add	fp, #20
148a0     A7 FA 61 FC | 	wrlong	result1, fp
148a4                 | '     r=geterr() 
148a4                 | '     if r then 
148a4     14 4E 85 F1 | 	sub	fp, #20
148a8     A0 00 90 AD |  if_e	jmp	#LR__1705
148ac                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
148ac     00 12 06 F6 | 	mov	arg01, #0
148b0     C4 62 B1 FD | 	call	#__system___getiolock_0593
148b4     FD 12 02 F6 | 	mov	arg01, result1
148b8     18 06 B1 FD | 	call	#__system___lockmem
148bc     A9 01 00 FF 
148c0     62 15 06 F6 | 	mov	arg02, ##@LR__5830
148c4     00 12 06 F6 | 	mov	arg01, #0
148c8     00 16 06 F6 | 	mov	arg03, #0
148cc     FC 12 B1 FD | 	call	#__system___basic_print_string
148d0     14 4E 05 F1 | 	add	fp, #20
148d4     A7 14 02 FB | 	rdlong	arg02, fp
148d8     14 4E 85 F1 | 	sub	fp, #20
148dc     00 12 06 F6 | 	mov	arg01, #0
148e0     00 16 06 F6 | 	mov	arg03, #0
148e4     0A 18 06 F6 | 	mov	arg04, #10
148e8     24 13 B1 FD | 	call	#__system___basic_print_integer
148ec     A9 01 00 FF 
148f0     70 15 06 F6 | 	mov	arg02, ##@LR__5831
148f4     00 12 06 F6 | 	mov	arg01, #0
148f8     00 16 06 F6 | 	mov	arg03, #0
148fc     CC 12 B1 FD | 	call	#__system___basic_print_string
14900     00 26 06 F6 | 	mov	local01, #0
14904     14 4E 05 F1 | 	add	fp, #20
14908     A7 12 02 FB | 	rdlong	arg01, fp
1490c     14 4E 85 F1 | 	sub	fp, #20
14910     50 2F B1 FD | 	call	#__system___strerror
14914     FD 14 02 F6 | 	mov	arg02, result1
14918     13 13 02 F6 | 	mov	arg01, local01
1491c     00 16 06 F6 | 	mov	arg03, #0
14920     A8 12 B1 FD | 	call	#__system___basic_print_string
14924     00 12 06 F6 | 	mov	arg01, #0
14928     0A 14 06 F6 | 	mov	arg02, #10
1492c     00 16 06 F6 | 	mov	arg03, #0
14930     40 12 B1 FD | 	call	#__system___basic_print_char
14934     00 12 06 F6 | 	mov	arg01, #0
14938     3C 62 B1 FD | 	call	#__system___getiolock_0593
1493c     FD 00 68 FC | 	wrlong	#0, result1
14940     09 12 06 F6 | 	mov	arg01, #9
14944     E8 58 B1 FD | 	call	#__system__close
14948     94 01 90 FD | 	jmp	#LR__1710
1494c                 | LR__1705
1494c     52 00 00 FF 
14950     00 E4 05 F1 | 	add	objptr, ##41984
14954     F2 12 02 FB | 	rdlong	arg01, objptr
14958     52 00 00 FF 
1495c     00 E4 85 F1 | 	sub	objptr, ##41984
14960     A9 01 00 FF 
14964     73 15 06 F6 | 	mov	arg02, ##@LR__5832
14968     C4 05 B1 FD | 	call	#__system___string_concat
1496c     52 00 00 FF 
14970     00 E4 05 F1 | 	add	objptr, ##41984
14974     F2 FA 61 FC | 	wrlong	result1, objptr
14978     52 00 00 FF 
1497c     00 E4 85 F1 | 	sub	objptr, ##41984
14980                 | LR__1706
14980                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14980     09 12 06 F6 | 	mov	arg01, #9
14984     A8 58 B1 FD | 	call	#__system__close
14988     09 26 06 F6 | 	mov	local01, #9
1498c     4A 00 00 FF 
14990     94 E4 05 F1 | 	add	objptr, ##38036
14994     F2 12 02 FB | 	rdlong	arg01, objptr
14998     4A 00 00 FF 
1499c     94 E4 85 F1 | 	sub	objptr, ##38036
149a0     A9 01 00 FF 
149a4     78 15 06 F6 | 	mov	arg02, ##@LR__5833
149a8     84 05 B1 FD | 	call	#__system___string_concat
149ac     FD 12 02 F6 | 	mov	arg01, result1
149b0     52 00 00 FF 
149b4     00 E4 05 F1 | 	add	objptr, ##41984
149b8     F2 14 02 FB | 	rdlong	arg02, objptr
149bc     52 00 00 FF 
149c0     00 E4 85 F1 | 	sub	objptr, ##41984
149c4     68 05 B1 FD | 	call	#__system___string_concat
149c8     FD 14 02 F6 | 	mov	arg02, result1
149cc     13 13 02 F6 | 	mov	arg01, local01
149d0     00 16 06 F6 | 	mov	arg03, #0
149d4     00 11 B1 FD | 	call	#__system___basic_open_string
149d8                 | '   do
149d8                 | LR__1707
149d8     09 12 06 F6 | 	mov	arg01, #9
149dc     00 07 B1 FD | 	call	#__system___basic_read_line
149e0     FD 26 02 F6 | 	mov	local01, result1
149e4     37 00 00 FF 
149e8     1C E4 05 F1 | 	add	objptr, ##28188
149ec     F2 26 62 FC | 	wrlong	local01, objptr
149f0     37 00 00 FF 
149f4     1C E4 85 F1 | 	sub	objptr, ##28188
149f8     4C CD BE FD | 	call	#_interpret
149fc     37 00 00 FF 
14a00     1C E4 05 F1 | 	add	objptr, ##28188
14a04     F2 12 02 FB | 	rdlong	arg01, objptr
14a08     37 00 00 FF 
14a0c     1C E4 85 F1 | 	sub	objptr, ##28188
14a10     A9 01 00 FF 
14a14     7A 15 06 F6 | 	mov	arg02, ##@LR__5834
14a18     E0 04 B1 FD | 	call	#__system___string_cmp
14a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
14a20     B4 FF 9F 5D |  if_ne	jmp	#LR__1707
14a24                 | '   close #9   
14a24     09 12 06 F6 | 	mov	arg01, #9
14a28     04 58 B1 FD | 	call	#__system__close
14a2c     0C 00 90 FD | 	jmp	#LR__1709
14a30                 | LR__1708
14a30     1E 12 06 F6 | 	mov	arg01, #30
14a34     00 14 06 F6 | 	mov	arg02, #0
14a38     F0 CA B0 FD | 	call	#_printerror
14a3c                 | LR__1709
14a3c                 | ' print "Loaded ";currentdir$+"/"+loadname
14a3c     00 12 06 F6 | 	mov	arg01, #0
14a40     34 61 B1 FD | 	call	#__system___getiolock_0593
14a44     FD 12 02 F6 | 	mov	arg01, result1
14a48     88 04 B1 FD | 	call	#__system___lockmem
14a4c     A9 01 00 FF 
14a50     7B 15 06 F6 | 	mov	arg02, ##@LR__5835
14a54     00 12 06 F6 | 	mov	arg01, #0
14a58     00 16 06 F6 | 	mov	arg03, #0
14a5c     6C 11 B1 FD | 	call	#__system___basic_print_string
14a60     00 26 06 F6 | 	mov	local01, #0
14a64     4A 00 00 FF 
14a68     94 E4 05 F1 | 	add	objptr, ##38036
14a6c     F2 12 02 FB | 	rdlong	arg01, objptr
14a70     4A 00 00 FF 
14a74     94 E4 85 F1 | 	sub	objptr, ##38036
14a78     A9 01 00 FF 
14a7c     83 15 06 F6 | 	mov	arg02, ##@LR__5836
14a80     AC 04 B1 FD | 	call	#__system___string_concat
14a84     FD 12 02 F6 | 	mov	arg01, result1
14a88     52 00 00 FF 
14a8c     00 E4 05 F1 | 	add	objptr, ##41984
14a90     F2 14 02 FB | 	rdlong	arg02, objptr
14a94     52 00 00 FF 
14a98     00 E4 85 F1 | 	sub	objptr, ##41984
14a9c     90 04 B1 FD | 	call	#__system___string_concat
14aa0     FD 14 02 F6 | 	mov	arg02, result1
14aa4     13 13 02 F6 | 	mov	arg01, local01
14aa8     00 16 06 F6 | 	mov	arg03, #0
14aac     1C 11 B1 FD | 	call	#__system___basic_print_string
14ab0     00 12 06 F6 | 	mov	arg01, #0
14ab4     0A 14 06 F6 | 	mov	arg02, #10
14ab8     00 16 06 F6 | 	mov	arg03, #0
14abc     B4 10 B1 FD | 	call	#__system___basic_print_char
14ac0     00 12 06 F6 | 	mov	arg01, #0
14ac4     B0 60 B1 FD | 	call	#__system___getiolock_0593
14ac8     FD 00 68 FC | 	wrlong	#0, result1
14acc     52 00 00 FF 
14ad0     10 E4 05 F1 | 	add	objptr, ##42000
14ad4     F2 00 68 FC | 	wrlong	#0, objptr
14ad8     52 00 00 FF 
14adc     10 E4 85 F1 | 	sub	objptr, ##42000
14ae0                 | LR__1710
14ae0     A7 F0 03 F6 | 	mov	ptra, fp
14ae4     B2 00 A0 FD | 	call	#popregs_
14ae8                 | _do_load_ret
14ae8     2D 00 64 FD | 	ret
14aec                 | 
14aec                 | ' 
14aec                 | ' '-------------------- log
14aec                 | ' 
14aec                 | ' sub do_log
14aec                 | _do_log
14aec     01 4A 05 F6 | 	mov	COUNT_, #1
14af0     A8 00 A0 FD | 	call	#pushregs_
14af4     14 F0 07 F1 | 	add	ptra, #20
14af8     4A 00 00 FF 
14afc     80 E4 05 F1 | 	add	objptr, ##38016
14b00     F2 26 02 FB | 	rdlong	local01, objptr
14b04     13 17 02 F6 | 	mov	arg03, local01
14b08     01 16 66 F0 | 	shl	arg03, #1
14b0c     13 17 02 F1 | 	add	arg03, local01
14b10     02 16 66 F0 | 	shl	arg03, #2
14b14     03 00 00 FF 
14b18     04 E4 85 F1 | 	sub	objptr, ##1540
14b1c     F2 16 02 F1 | 	add	arg03, objptr
14b20     0B 17 0A FB | 	rdlong	arg03, arg03 wz
14b24     0C 4E 05 F1 | 	add	fp, #12
14b28     A7 16 62 FC | 	wrlong	arg03, fp
14b2c                 | ' 
14b2c                 | ' numpar=compiledline(lineptr_e).result.uresult
14b2c                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14b2c     0C 4E 85 F1 | 	sub	fp, #12
14b30     47 00 00 FF 
14b34     7C E4 85 F1 | 	sub	objptr, ##36476
14b38     0C 4E 05 51 |  if_ne	add	fp, #12
14b3c     A7 26 02 5B |  if_ne	rdlong	local01, fp
14b40     0C 4E 85 51 |  if_ne	sub	fp, #12
14b44     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14b48     40 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14b4c     00 12 06 F6 | 	mov	arg01, #0
14b50     24 60 B1 FD | 	call	#__system___getiolock_0593
14b54     FD 12 02 F6 | 	mov	arg01, result1
14b58     78 03 B1 FD | 	call	#__system___lockmem
14b5c     A9 01 00 FF 
14b60     85 15 06 F6 | 	mov	arg02, ##@LR__5837
14b64     00 12 06 F6 | 	mov	arg01, #0
14b68     00 16 06 F6 | 	mov	arg03, #0
14b6c     5C 10 B1 FD | 	call	#__system___basic_print_string
14b70     00 12 06 F6 | 	mov	arg01, #0
14b74     00 60 B1 FD | 	call	#__system___getiolock_0593
14b78     FD 00 68 FC | 	wrlong	#0, result1
14b7c     27 12 06 F6 | 	mov	arg01, #39
14b80     00 14 06 F6 | 	mov	arg02, #0
14b84     A4 C9 B0 FD | 	call	#_printerror
14b88     D0 00 90 FD | 	jmp	#LR__1723
14b8c                 | LR__1720
14b8c                 | ' if numpar=2 then 
14b8c     0C 4E 05 F1 | 	add	fp, #12
14b90     A7 26 02 FB | 	rdlong	local01, fp
14b94     0C 4E 85 F1 | 	sub	fp, #12
14b98     02 26 0E F2 | 	cmp	local01, #2 wz
14b9c     48 00 90 5D |  if_ne	jmp	#LR__1721
14ba0     E8 7F BF FD | 	call	#_pop
14ba4     FF 26 02 F6 | 	mov	local01, result3
14ba8     A7 FA 61 FC | 	wrlong	result1, fp
14bac     04 4E 05 F1 | 	add	fp, #4
14bb0     A7 FC 61 FC | 	wrlong	result2, fp
14bb4     04 4E 05 F1 | 	add	fp, #4
14bb8     A7 26 62 FC | 	wrlong	local01, fp
14bbc     08 4E 85 F1 | 	sub	fp, #8
14bc0     A7 12 02 F6 | 	mov	arg01, fp
14bc4     64 82 BF FD | 	call	#_converttofloat
14bc8     FD 14 02 F6 | 	mov	arg02, result1
14bcc     FC 16 20 FF 
14bd0     54 12 06 F6 | 	mov	arg01, ##1076754516
14bd4     48 41 B1 FD | 	call	#__system____builtin_logbase
14bd8     10 4E 05 F1 | 	add	fp, #16
14bdc     A7 FA 61 FC | 	wrlong	result1, fp
14be0     10 4E 85 F1 | 	sub	fp, #16
14be4     10 00 90 FD | 	jmp	#LR__1722
14be8                 | LR__1721
14be8     10 4E 05 F1 | 	add	fp, #16
14bec     00 C0 9F FF 
14bf0     A7 00 68 FC | 	wrlong	##1065353216, fp
14bf4     10 4E 85 F1 | 	sub	fp, #16
14bf8                 | LR__1722
14bf8     90 7F BF FD | 	call	#_pop
14bfc     FF 26 02 F6 | 	mov	local01, result3
14c00     A7 FA 61 FC | 	wrlong	result1, fp
14c04     04 4E 05 F1 | 	add	fp, #4
14c08     A7 FC 61 FC | 	wrlong	result2, fp
14c0c     04 4E 05 F1 | 	add	fp, #4
14c10     A7 26 62 FC | 	wrlong	local01, fp
14c14     08 4E 85 F1 | 	sub	fp, #8
14c18     A7 12 02 F6 | 	mov	arg01, fp
14c1c     0C 82 BF FD | 	call	#_converttofloat
14c20     FD 14 02 F6 | 	mov	arg02, result1
14c24     FC 16 20 FF 
14c28     54 12 06 F6 | 	mov	arg01, ##1076754516
14c2c     F0 40 B1 FD | 	call	#__system____builtin_logbase
14c30     FD 12 02 F6 | 	mov	arg01, result1
14c34     10 4E 05 F1 | 	add	fp, #16
14c38     A7 14 02 FB | 	rdlong	arg02, fp
14c3c     10 4E 85 F1 | 	sub	fp, #16
14c40     10 33 B1 FD | 	call	#__system___float_div
14c44     A7 FA 61 FC | 	wrlong	result1, fp
14c48     08 4E 05 F1 | 	add	fp, #8
14c4c     A7 3C 68 FC | 	wrlong	#30, fp
14c50     08 4E 85 F1 | 	sub	fp, #8
14c54     A7 12 02 F6 | 	mov	arg01, fp
14c58     C8 7F BF FD | 	call	#_push
14c5c                 | LR__1723
14c5c     A7 F0 03 F6 | 	mov	ptra, fp
14c60     B2 00 A0 FD | 	call	#popregs_
14c64                 | _do_log_ret
14c64     2D 00 64 FD | 	ret
14c68                 | 
14c68                 | ' 
14c68                 | ' '-------------------- lpeek
14c68                 | ' 
14c68                 | ' sub do_lpeek
14c68                 | _do_lpeek
14c68     00 4A 05 F6 | 	mov	COUNT_, #0
14c6c     A8 00 A0 FD | 	call	#pushregs_
14c70     14 F0 07 F1 | 	add	ptra, #20
14c74     14 7F BF FD | 	call	#_pop
14c78     A7 FA 61 FC | 	wrlong	result1, fp
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 FC 61 FC | 	wrlong	result2, fp
14c84     04 4E 05 F1 | 	add	fp, #4
14c88     A7 FE 61 FC | 	wrlong	result3, fp
14c8c     08 4E 85 F1 | 	sub	fp, #8
14c90     A7 12 02 F6 | 	mov	arg01, fp
14c94     D8 80 BF FD | 	call	#_converttoint
14c98     0C 4E 05 F1 | 	add	fp, #12
14c9c     A7 FA 61 FC | 	wrlong	result1, fp
14ca0                 | ' 
14ca0                 | ' t1=pop()
14ca0                 | ' a=converttoint(t1)
14ca0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14ca0     0C 4E 85 F1 | 	sub	fp, #12
14ca4     00 04 00 FF 
14ca8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14cac     1C 00 90 3D |  if_ae	jmp	#LR__1730
14cb0     0C 4E 05 F1 | 	add	fp, #12
14cb4     A7 12 02 FB | 	rdlong	arg01, fp
14cb8     09 FB 01 FB | 	rdlong	result1, arg01
14cbc     04 4E 05 F1 | 	add	fp, #4
14cc0     A7 FA 61 FC | 	wrlong	result1, fp
14cc4     10 4E 85 F1 | 	sub	fp, #16
14cc8     1C 00 90 FD | 	jmp	#LR__1731
14ccc                 | LR__1730
14ccc     0C 4E 05 F1 | 	add	fp, #12
14cd0     A7 12 02 FB | 	rdlong	arg01, fp
14cd4     0C 4E 85 F1 | 	sub	fp, #12
14cd8     20 CB B0 FD | 	call	#_pslpeek
14cdc     10 4E 05 F1 | 	add	fp, #16
14ce0     A7 FA 61 FC | 	wrlong	result1, fp
14ce4     10 4E 85 F1 | 	sub	fp, #16
14ce8                 | LR__1731
14ce8     08 4E 05 F1 | 	add	fp, #8
14cec     A7 3A 68 FC | 	wrlong	#29, fp
14cf0     08 4E 05 F1 | 	add	fp, #8
14cf4     A7 12 02 FB | 	rdlong	arg01, fp
14cf8     10 4E 85 F1 | 	sub	fp, #16
14cfc     A7 12 62 FC | 	wrlong	arg01, fp
14d00     A7 12 02 F6 | 	mov	arg01, fp
14d04     1C 7F BF FD | 	call	#_push
14d08     A7 F0 03 F6 | 	mov	ptra, fp
14d0c     B2 00 A0 FD | 	call	#popregs_
14d10                 | _do_lpeek_ret
14d10     2D 00 64 FD | 	ret
14d14                 | 
14d14                 | ' 
14d14                 | ' '-------------------- lpoke
14d14                 | ' 
14d14                 | ' sub do_lpoke
14d14                 | _do_lpoke
14d14     01 4A 05 F6 | 	mov	COUNT_, #1
14d18     A8 00 A0 FD | 	call	#pushregs_
14d1c     20 F0 07 F1 | 	add	ptra, #32
14d20     68 7E BF FD | 	call	#_pop
14d24     FD 14 02 F6 | 	mov	arg02, result1
14d28     FE 12 02 F6 | 	mov	arg01, result2
14d2c     FF 26 02 F6 | 	mov	local01, result3
14d30     A7 14 62 FC | 	wrlong	arg02, fp
14d34     04 4E 05 F1 | 	add	fp, #4
14d38     A7 12 62 FC | 	wrlong	arg01, fp
14d3c     04 4E 05 F1 | 	add	fp, #4
14d40     A7 26 62 FC | 	wrlong	local01, fp
14d44     08 4E 85 F1 | 	sub	fp, #8
14d48     40 7E BF FD | 	call	#_pop
14d4c     FF 26 02 F6 | 	mov	local01, result3
14d50     0C 4E 05 F1 | 	add	fp, #12
14d54     A7 FA 61 FC | 	wrlong	result1, fp
14d58     04 4E 05 F1 | 	add	fp, #4
14d5c     A7 FC 61 FC | 	wrlong	result2, fp
14d60     04 4E 05 F1 | 	add	fp, #4
14d64     A7 26 62 FC | 	wrlong	local01, fp
14d68     08 4E 85 F1 | 	sub	fp, #8
14d6c     A7 12 02 F6 | 	mov	arg01, fp
14d70     0C 4E 85 F1 | 	sub	fp, #12
14d74     F8 7F BF FD | 	call	#_converttoint
14d78     18 4E 05 F1 | 	add	fp, #24
14d7c     A7 FA 61 FC | 	wrlong	result1, fp
14d80     18 4E 85 F1 | 	sub	fp, #24
14d84     A7 12 02 F6 | 	mov	arg01, fp
14d88     E4 7F BF FD | 	call	#_converttoint
14d8c     1C 4E 05 F1 | 	add	fp, #28
14d90     A7 FA 61 FC | 	wrlong	result1, fp
14d94                 | ' 
14d94                 | ' t1=pop() 'value
14d94                 | ' t2=pop() 
14d94                 | ' a=converttoint(t2) : v=converttoint(t1)
14d94                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14d94     04 4E 85 F1 | 	sub	fp, #4
14d98     A7 26 02 FB | 	rdlong	local01, fp
14d9c     18 4E 85 F1 | 	sub	fp, #24
14da0     00 04 00 FF 
14da4     00 26 16 F2 | 	cmp	local01, ##524288 wc
14da8     1C 00 90 3D |  if_ae	jmp	#LR__1740
14dac     18 4E 05 F1 | 	add	fp, #24
14db0     A7 12 02 FB | 	rdlong	arg01, fp
14db4     04 4E 05 F1 | 	add	fp, #4
14db8     A7 14 02 FB | 	rdlong	arg02, fp
14dbc     1C 4E 85 F1 | 	sub	fp, #28
14dc0     09 15 62 FC | 	wrlong	arg02, arg01
14dc4     18 00 90 FD | 	jmp	#LR__1741
14dc8                 | LR__1740
14dc8     18 4E 05 F1 | 	add	fp, #24
14dcc     A7 12 02 FB | 	rdlong	arg01, fp
14dd0     04 4E 05 F1 | 	add	fp, #4
14dd4     A7 14 02 FB | 	rdlong	arg02, fp
14dd8     1C 4E 85 F1 | 	sub	fp, #28
14ddc     EC C8 B0 FD | 	call	#_pslpoke
14de0                 | LR__1741
14de0     A7 F0 03 F6 | 	mov	ptra, fp
14de4     B2 00 A0 FD | 	call	#popregs_
14de8                 | _do_lpoke_ret
14de8     2D 00 64 FD | 	ret
14dec                 | 
14dec                 | ' 
14dec                 | ' '-------------------- mid$
14dec                 | ' 
14dec                 | ' sub do_mid
14dec                 | _do_mid
14dec     00 4A 05 F6 | 	mov	COUNT_, #0
14df0     A8 00 A0 FD | 	call	#pushregs_
14df4     18 F0 07 F1 | 	add	ptra, #24
14df8     4A 00 00 FF 
14dfc     80 E4 05 F1 | 	add	objptr, ##38016
14e00     F2 16 02 FB | 	rdlong	arg03, objptr
14e04     0B 15 02 F6 | 	mov	arg02, arg03
14e08     01 14 66 F0 | 	shl	arg02, #1
14e0c     0B 15 02 F1 | 	add	arg02, arg03
14e10     02 14 66 F0 | 	shl	arg02, #2
14e14     03 00 00 FF 
14e18     04 E4 85 F1 | 	sub	objptr, ##1540
14e1c     F2 14 02 F1 | 	add	arg02, objptr
14e20     0A 17 02 FB | 	rdlong	arg03, arg02
14e24     0C 4E 05 F1 | 	add	fp, #12
14e28     A7 16 62 FC | 	wrlong	arg03, fp
14e2c                 | ' 
14e2c                 | ' numpar=compiledline(lineptr_e).result.uresult
14e2c                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14e2c     0C 4E 85 F1 | 	sub	fp, #12
14e30     03 16 0E F2 | 	cmp	arg03, #3 wz
14e34     47 00 00 FF 
14e38     7C E4 85 F1 | 	sub	objptr, ##36476
14e3c     40 00 90 AD |  if_e	jmp	#LR__1750
14e40     00 12 06 F6 | 	mov	arg01, #0
14e44     30 5D B1 FD | 	call	#__system___getiolock_0593
14e48     FD 12 02 F6 | 	mov	arg01, result1
14e4c     84 00 B1 FD | 	call	#__system___lockmem
14e50     A9 01 00 FF 
14e54     8B 15 06 F6 | 	mov	arg02, ##@LR__5838
14e58     00 12 06 F6 | 	mov	arg01, #0
14e5c     00 16 06 F6 | 	mov	arg03, #0
14e60     68 0D B1 FD | 	call	#__system___basic_print_string
14e64     00 12 06 F6 | 	mov	arg01, #0
14e68     0C 5D B1 FD | 	call	#__system___getiolock_0593
14e6c     FD 00 68 FC | 	wrlong	#0, result1
14e70     27 12 06 F6 | 	mov	arg01, #39
14e74     00 14 06 F6 | 	mov	arg02, #0
14e78     B0 C6 B0 FD | 	call	#_printerror
14e7c     2C 01 90 FD | 	jmp	#LR__1753
14e80                 | LR__1750
14e80     08 7D BF FD | 	call	#_pop
14e84     FF 16 02 F6 | 	mov	arg03, result3
14e88     A7 FA 61 FC | 	wrlong	result1, fp
14e8c     04 4E 05 F1 | 	add	fp, #4
14e90     A7 FC 61 FC | 	wrlong	result2, fp
14e94     04 4E 05 F1 | 	add	fp, #4
14e98     A7 16 62 FC | 	wrlong	arg03, fp
14e9c     08 4E 85 F1 | 	sub	fp, #8
14ea0     A7 12 02 F6 | 	mov	arg01, fp
14ea4     C8 7E BF FD | 	call	#_converttoint
14ea8     FD 16 02 F6 | 	mov	arg03, result1
14eac     14 4E 05 F1 | 	add	fp, #20
14eb0     A7 16 62 FC | 	wrlong	arg03, fp
14eb4     14 4E 85 F1 | 	sub	fp, #20
14eb8     D0 7C BF FD | 	call	#_pop
14ebc     FF 16 02 F6 | 	mov	arg03, result3
14ec0     A7 FA 61 FC | 	wrlong	result1, fp
14ec4     04 4E 05 F1 | 	add	fp, #4
14ec8     A7 FC 61 FC | 	wrlong	result2, fp
14ecc     04 4E 05 F1 | 	add	fp, #4
14ed0     A7 16 62 FC | 	wrlong	arg03, fp
14ed4     08 4E 85 F1 | 	sub	fp, #8
14ed8     A7 12 02 F6 | 	mov	arg01, fp
14edc     90 7E BF FD | 	call	#_converttoint
14ee0     FD 16 02 F6 | 	mov	arg03, result1
14ee4     10 4E 05 F1 | 	add	fp, #16
14ee8     A7 16 62 FC | 	wrlong	arg03, fp
14eec     10 4E 85 F1 | 	sub	fp, #16
14ef0     98 7C BF FD | 	call	#_pop
14ef4     FF 16 02 F6 | 	mov	arg03, result3
14ef8     A7 FA 61 FC | 	wrlong	result1, fp
14efc     04 4E 05 F1 | 	add	fp, #4
14f00     A7 FC 61 FC | 	wrlong	result2, fp
14f04     04 4E 05 F1 | 	add	fp, #4
14f08     A7 16 62 FC | 	wrlong	arg03, fp
14f0c                 | ' t1=pop() : arg2=converttoint(t1)
14f0c                 | ' t1=pop() : arg1=converttoint(t1)
14f0c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14f0c     08 4E 85 F1 | 	sub	fp, #8
14f10     2B 16 0E F2 | 	cmp	arg03, #43 wz
14f14     18 00 90 5D |  if_ne	jmp	#LR__1751
14f18     A7 12 02 FB | 	rdlong	arg01, fp
14f1c     E4 7D BF FD | 	call	#_convertstring
14f20     A7 FA 61 FC | 	wrlong	result1, fp
14f24     08 4E 05 F1 | 	add	fp, #8
14f28     A7 3E 68 FC | 	wrlong	#31, fp
14f2c     08 4E 85 F1 | 	sub	fp, #8
14f30                 | LR__1751
14f30                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14f30     08 4E 05 F1 | 	add	fp, #8
14f34     A7 16 02 FB | 	rdlong	arg03, fp
14f38     08 4E 85 F1 | 	sub	fp, #8
14f3c     1F 16 0E F2 | 	cmp	arg03, #31 wz
14f40     40 00 90 AD |  if_e	jmp	#LR__1752
14f44     00 12 06 F6 | 	mov	arg01, #0
14f48     2C 5C B1 FD | 	call	#__system___getiolock_0593
14f4c     FD 12 02 F6 | 	mov	arg01, result1
14f50     80 FF B0 FD | 	call	#__system___lockmem
14f54     A9 01 00 FF 
14f58     92 15 06 F6 | 	mov	arg02, ##@LR__5839
14f5c     00 12 06 F6 | 	mov	arg01, #0
14f60     00 16 06 F6 | 	mov	arg03, #0
14f64     64 0C B1 FD | 	call	#__system___basic_print_string
14f68     00 12 06 F6 | 	mov	arg01, #0
14f6c     08 5C B1 FD | 	call	#__system___getiolock_0593
14f70     FD 00 68 FC | 	wrlong	#0, result1
14f74     0F 12 06 F6 | 	mov	arg01, #15
14f78     00 14 06 F6 | 	mov	arg02, #0
14f7c     AC C5 B0 FD | 	call	#_printerror
14f80     28 00 90 FD | 	jmp	#LR__1753
14f84                 | LR__1752
14f84     A7 12 02 FB | 	rdlong	arg01, fp
14f88     10 4E 05 F1 | 	add	fp, #16
14f8c     A7 14 02 FB | 	rdlong	arg02, fp
14f90     04 4E 05 F1 | 	add	fp, #4
14f94     A7 16 02 FB | 	rdlong	arg03, fp
14f98     14 4E 85 F1 | 	sub	fp, #20
14f9c     CC 20 B1 FD | 	call	#__system__Mid_S
14fa0     A7 FA 61 FC | 	wrlong	result1, fp
14fa4     A7 12 02 F6 | 	mov	arg01, fp
14fa8     78 7C BF FD | 	call	#_push
14fac                 | LR__1753
14fac     A7 F0 03 F6 | 	mov	ptra, fp
14fb0     B2 00 A0 FD | 	call	#popregs_
14fb4                 | _do_mid_ret
14fb4     2D 00 64 FD | 	ret
14fb8                 | 
14fb8                 | ' 
14fb8                 | ' '-------------------- mkdir
14fb8                 | ' 
14fb8                 | ' sub do_mkdir
14fb8                 | _do_mkdir
14fb8     04 4A 05 F6 | 	mov	COUNT_, #4
14fbc     A8 00 A0 FD | 	call	#pushregs_
14fc0     C8 7B BF FD | 	call	#_pop
14fc4     FE 18 02 F6 | 	mov	arg04, result2
14fc8     FF 16 02 F6 | 	mov	arg03, result3
14fcc     FD 26 02 F6 | 	mov	local01, result1
14fd0     0C 29 02 F6 | 	mov	local02, arg04
14fd4     0B 2B 02 F6 | 	mov	local03, arg03
14fd8                 | ' 
14fd8                 | ' t1=pop()
14fd8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14fd8     2B 2A 0E F2 | 	cmp	local03, #43 wz
14fdc     10 00 90 5D |  if_ne	jmp	#LR__1760
14fe0     13 13 02 F6 | 	mov	arg01, local01
14fe4     1C 7D BF FD | 	call	#_convertstring
14fe8     FD 26 02 F6 | 	mov	local01, result1
14fec     1F 2A 06 F6 | 	mov	local03, #31
14ff0                 | LR__1760
14ff0                 | ' if t1.result_type<>result_string then printerror(15): return
14ff0     1F 2A 0E F2 | 	cmp	local03, #31 wz
14ff4     10 00 90 AD |  if_e	jmp	#LR__1761
14ff8     0F 12 06 F6 | 	mov	arg01, #15
14ffc     00 14 06 F6 | 	mov	arg02, #0
15000     28 C5 B0 FD | 	call	#_printerror
15004     64 00 90 FD | 	jmp	#LR__1763
15008                 | LR__1761
15008     13 13 02 F6 | 	mov	arg01, local01
1500c     98 27 B1 FD | 	call	#__system___mkdir
15010     FD 2C 0A F6 | 	mov	local04, result1 wz
15014                 | ' filename$=t1.result.sresult
15014                 | ' err=mkdir(filename$)
15014                 | ' 'err=geterr() : 
15014                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15014     54 00 90 AD |  if_e	jmp	#LR__1762
15018     00 12 06 F6 | 	mov	arg01, #0
1501c     58 5B B1 FD | 	call	#__system___getiolock_0593
15020     FD 12 02 F6 | 	mov	arg01, result1
15024     AC FE B0 FD | 	call	#__system___lockmem
15028     A9 01 00 FF 
1502c     99 15 06 F6 | 	mov	arg02, ##@LR__5840
15030     00 12 06 F6 | 	mov	arg01, #0
15034     00 16 06 F6 | 	mov	arg03, #0
15038     90 0B B1 FD | 	call	#__system___basic_print_string
1503c     00 12 06 F6 | 	mov	arg01, #0
15040     16 15 02 F6 | 	mov	arg02, local04
15044     00 16 06 F6 | 	mov	arg03, #0
15048     0A 18 06 F6 | 	mov	arg04, #10
1504c     C0 0B B1 FD | 	call	#__system___basic_print_integer
15050     00 12 06 F6 | 	mov	arg01, #0
15054     0A 14 06 F6 | 	mov	arg02, #10
15058     00 16 06 F6 | 	mov	arg03, #0
1505c     14 0B B1 FD | 	call	#__system___basic_print_char
15060     00 12 06 F6 | 	mov	arg01, #0
15064     10 5B B1 FD | 	call	#__system___getiolock_0593
15068     FD 00 68 FC | 	wrlong	#0, result1
1506c                 | LR__1762
1506c                 | LR__1763
1506c     A7 F0 03 F6 | 	mov	ptra, fp
15070     B2 00 A0 FD | 	call	#popregs_
15074                 | _do_mkdir_ret
15074     2D 00 64 FD | 	ret
15078                 | 
15078                 | ' 
15078                 | ' '-------------------- mode
15078                 | ' 
15078                 | ' sub do_mode
15078                 | _do_mode
15078     05 4A 05 F6 | 	mov	COUNT_, #5
1507c     A8 00 A0 FD | 	call	#pushregs_
15080     08 7B BF FD | 	call	#_pop
15084     FD 26 02 F6 | 	mov	local01, result1
15088     FE 28 02 F6 | 	mov	local02, result2
1508c     FF 2A 02 F6 | 	mov	local03, result3
15090                 | ' t1=pop() 
15090                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15090     1E 2A 0E F2 | 	cmp	local03, #30 wz
15094     10 00 90 5D |  if_ne	jmp	#LR__1770
15098     13 13 02 F6 | 	mov	arg01, local01
1509c     00 14 06 F6 | 	mov	arg02, #0
150a0     74 31 B1 FD | 	call	#__system___float_tointeger
150a4     FD 26 02 F6 | 	mov	local01, result1
150a8                 | LR__1770
150a8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
150a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
150ac     18 00 90 5D |  if_ne	jmp	#LR__1771
150b0     13 13 02 F6 | 	mov	arg01, local01
150b4     A4 34 B1 FD | 	call	#__system____builtin_atof
150b8     FD 12 02 F6 | 	mov	arg01, result1
150bc     00 14 06 F6 | 	mov	arg02, #0
150c0     54 31 B1 FD | 	call	#__system___float_tointeger
150c4     FD 26 02 F6 | 	mov	local01, result1
150c8                 | LR__1771
150c8                 | ' select case t1.result.iresult
150c8     13 2D 02 F6 | 	mov	local04, local01
150cc     05 2C 26 F3 | 	fle	local04, #5
150d0     30 2C 62 FD | 	jmprel	local04
150d4                 | LR__1772
150d4     14 00 90 FD | 	jmp	#LR__1773
150d8     A8 00 90 FD | 	jmp	#LR__1774
150dc     10 01 90 FD | 	jmp	#LR__1775
150e0     78 01 90 FD | 	jmp	#LR__1776
150e4     E0 01 90 FD | 	jmp	#LR__1777
150e8     70 02 90 FD | 	jmp	#LR__1778
150ec                 | LR__1773
150ec     37 00 00 FF 
150f0     40 E4 05 F1 | 	add	objptr, ##28224
150f4     F2 02 68 FC | 	wrlong	#1, objptr
150f8     04 E4 85 F1 | 	sub	objptr, #4
150fc     F2 34 69 FC | 	wrlong	#154, objptr
15100     19 00 00 FF 
15104     00 E5 05 F1 | 	add	objptr, ##13056
15108     F2 02 68 FC | 	wrlong	#1, objptr
1510c     19 00 00 FF 
15110     04 E5 85 F1 | 	sub	objptr, ##13060
15114     F2 26 69 FC | 	wrlong	#147, objptr
15118     37 00 00 FF 
1511c     38 E4 85 F1 | 	sub	objptr, ##28216
15120     04 12 06 F6 | 	mov	arg01, #4
15124     20 E0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15128     37 00 00 FF 
1512c     3C E4 05 F1 | 	add	objptr, ##28220
15130     F2 12 02 FB | 	rdlong	arg01, objptr
15134     04 E4 85 F1 | 	sub	objptr, #4
15138     F2 14 02 FB | 	rdlong	arg02, objptr
1513c                 | ' 
1513c                 | ' write_color:=ff
1513c     36 00 00 FF 
15140     F7 E5 85 F1 | 	sub	objptr, ##28151
15144     F2 12 62 FC | 	wrlong	arg01, objptr
15148                 | ' write_background:=bb
15148     04 E4 05 F1 | 	add	objptr, #4
1514c     F2 14 62 FC | 	wrlong	arg02, objptr
15150     01 00 00 FF 
15154     00 EA 05 F1 | 	add	ptr__dat__, ##512
15158     51 00 00 FF 
1515c     9B E5 05 F1 | 	add	objptr, ##41883
15160     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15164     04 E4 85 F1 | 	sub	objptr, #4
15168     03 00 80 FF 
1516c     F2 30 69 FC | 	wrlong	##1688, objptr
15170     51 00 00 FF 
15174     DC E5 85 F1 | 	sub	objptr, ##41948
15178     01 00 00 FF 
1517c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15180     D8 01 90 FD | 	jmp	#LR__1778
15184                 | LR__1774
15184     37 00 00 FF 
15188     40 E4 05 F1 | 	add	objptr, ##28224
1518c     F2 00 68 FC | 	wrlong	#0, objptr
15190     04 E4 85 F1 | 	sub	objptr, #4
15194     F2 2E 68 FC | 	wrlong	#23, objptr
15198     19 00 00 FF 
1519c     00 E5 05 F1 | 	add	objptr, ##13056
151a0     F2 00 68 FC | 	wrlong	#0, objptr
151a4     19 00 00 FF 
151a8     04 E5 85 F1 | 	sub	objptr, ##13060
151ac     F2 00 68 FC | 	wrlong	#0, objptr
151b0     37 00 00 FF 
151b4     38 E4 85 F1 | 	sub	objptr, ##28216
151b8     00 12 06 F6 | 	mov	arg01, #0
151bc     88 DF B0 FD | 	call	#_hg010b_spin2_setfontfamily
151c0     37 00 00 FF 
151c4     3C E4 05 F1 | 	add	objptr, ##28220
151c8     F2 12 02 FB | 	rdlong	arg01, objptr
151cc     04 E4 85 F1 | 	sub	objptr, #4
151d0     F2 14 02 FB | 	rdlong	arg02, objptr
151d4                 | ' 
151d4                 | ' write_color:=ff
151d4     36 00 00 FF 
151d8     F7 E5 85 F1 | 	sub	objptr, ##28151
151dc     F2 12 62 FC | 	wrlong	arg01, objptr
151e0                 | ' write_background:=bb
151e0     04 E4 05 F1 | 	add	objptr, #4
151e4     F2 14 62 FC | 	wrlong	arg02, objptr
151e8     45 E4 85 F1 | 	sub	objptr, #69
151ec     6C 01 90 FD | 	jmp	#LR__1778
151f0                 | LR__1775
151f0     37 00 00 FF 
151f4     40 E4 05 F1 | 	add	objptr, ##28224
151f8     F2 00 68 FC | 	wrlong	#0, objptr
151fc     04 E4 85 F1 | 	sub	objptr, #4
15200     F2 6A 69 FC | 	wrlong	#181, objptr
15204     19 00 00 FF 
15208     00 E5 05 F1 | 	add	objptr, ##13056
1520c     F2 00 68 FC | 	wrlong	#0, objptr
15210     19 00 00 FF 
15214     04 E5 85 F1 | 	sub	objptr, ##13060
15218     F2 00 68 FC | 	wrlong	#0, objptr
1521c     37 00 00 FF 
15220     38 E4 85 F1 | 	sub	objptr, ##28216
15224     00 12 06 F6 | 	mov	arg01, #0
15228     1C DF B0 FD | 	call	#_hg010b_spin2_setfontfamily
1522c     37 00 00 FF 
15230     3C E4 05 F1 | 	add	objptr, ##28220
15234     F2 12 02 FB | 	rdlong	arg01, objptr
15238     04 E4 85 F1 | 	sub	objptr, #4
1523c     F2 14 02 FB | 	rdlong	arg02, objptr
15240                 | ' 
15240                 | ' write_color:=ff
15240     36 00 00 FF 
15244     F7 E5 85 F1 | 	sub	objptr, ##28151
15248     F2 12 62 FC | 	wrlong	arg01, objptr
1524c                 | ' write_background:=bb
1524c     04 E4 05 F1 | 	add	objptr, #4
15250     F2 14 62 FC | 	wrlong	arg02, objptr
15254     45 E4 85 F1 | 	sub	objptr, #69
15258     00 01 90 FD | 	jmp	#LR__1778
1525c                 | LR__1776
1525c     37 00 00 FF 
15260     40 E4 05 F1 | 	add	objptr, ##28224
15264     F2 00 68 FC | 	wrlong	#0, objptr
15268     04 E4 85 F1 | 	sub	objptr, #4
1526c     F2 1E 68 FC | 	wrlong	#15, objptr
15270     19 00 00 FF 
15274     00 E5 05 F1 | 	add	objptr, ##13056
15278     F2 00 68 FC | 	wrlong	#0, objptr
1527c     19 00 00 FF 
15280     04 E5 85 F1 | 	sub	objptr, ##13060
15284     F2 00 68 FC | 	wrlong	#0, objptr
15288     37 00 00 FF 
1528c     38 E4 85 F1 | 	sub	objptr, ##28216
15290     00 12 06 F6 | 	mov	arg01, #0
15294     B0 DE B0 FD | 	call	#_hg010b_spin2_setfontfamily
15298     37 00 00 FF 
1529c     3C E4 05 F1 | 	add	objptr, ##28220
152a0     F2 12 02 FB | 	rdlong	arg01, objptr
152a4     04 E4 85 F1 | 	sub	objptr, #4
152a8     F2 14 02 FB | 	rdlong	arg02, objptr
152ac                 | ' 
152ac                 | ' write_color:=ff
152ac     36 00 00 FF 
152b0     F7 E5 85 F1 | 	sub	objptr, ##28151
152b4     F2 12 62 FC | 	wrlong	arg01, objptr
152b8                 | ' write_background:=bb
152b8     04 E4 05 F1 | 	add	objptr, #4
152bc     F2 14 62 FC | 	wrlong	arg02, objptr
152c0     45 E4 85 F1 | 	sub	objptr, #69
152c4     94 00 90 FD | 	jmp	#LR__1778
152c8                 | LR__1777
152c8     37 00 00 FF 
152cc     40 E4 05 F1 | 	add	objptr, ##28224
152d0     F2 02 68 FC | 	wrlong	#1, objptr
152d4     04 E4 85 F1 | 	sub	objptr, #4
152d8     F2 02 68 FC | 	wrlong	#1, objptr
152dc     19 00 00 FF 
152e0     00 E5 05 F1 | 	add	objptr, ##13056
152e4     F2 02 68 FC | 	wrlong	#1, objptr
152e8     19 00 00 FF 
152ec     04 E5 85 F1 | 	sub	objptr, ##13060
152f0     F2 1C 68 FC | 	wrlong	#14, objptr
152f4     37 00 00 FF 
152f8     38 E4 85 F1 | 	sub	objptr, ##28216
152fc     04 12 06 F6 | 	mov	arg01, #4
15300     44 DE B0 FD | 	call	#_hg010b_spin2_setfontfamily
15304     37 00 00 FF 
15308     3C E4 05 F1 | 	add	objptr, ##28220
1530c     F2 12 02 FB | 	rdlong	arg01, objptr
15310     04 E4 85 F1 | 	sub	objptr, #4
15314     F2 14 02 FB | 	rdlong	arg02, objptr
15318                 | ' 
15318                 | ' write_color:=ff
15318     36 00 00 FF 
1531c     F7 E5 85 F1 | 	sub	objptr, ##28151
15320     F2 12 62 FC | 	wrlong	arg01, objptr
15324                 | ' write_background:=bb
15324     04 E4 05 F1 | 	add	objptr, #4
15328     F2 14 62 FC | 	wrlong	arg02, objptr
1532c     07 00 00 FF 
15330     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15334     51 00 00 FF 
15338     9B E5 05 F1 | 	add	objptr, ##41883
1533c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15340     04 E4 85 F1 | 	sub	objptr, #4
15344     03 00 80 FF 
15348     F2 30 69 FC | 	wrlong	##1688, objptr
1534c     51 00 00 FF 
15350     DC E5 85 F1 | 	sub	objptr, ##41948
15354     07 00 00 FF 
15358     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
1535c                 | LR__1778
1535c     51 00 00 FF 
15360     D8 E5 05 F1 | 	add	objptr, ##41944
15364     F2 26 62 FC | 	wrlong	local01, objptr
15368     04 E4 85 F1 | 	sub	objptr, #4
1536c     F2 12 02 FB | 	rdlong	arg01, objptr
15370     0E 00 00 FF 
15374     78 E5 85 F1 | 	sub	objptr, ##7544
15378     F2 2E 02 FB | 	rdlong	local05, objptr
1537c     43 00 00 FF 
15380     5C E4 85 F1 | 	sub	objptr, ##34396
15384     17 13 82 F1 | 	sub	arg01, local05
15388     00 14 06 F6 | 	mov	arg02, #0
1538c     0A 16 06 F6 | 	mov	arg03, #10
15390     14 1E B1 FD | 	call	#__system__Number_S
15394     FD 12 02 F6 | 	mov	arg01, result1
15398     A9 01 00 FF 
1539c     C2 15 06 F6 | 	mov	arg02, ##@LR__5841
153a0     8C FB B0 FD | 	call	#__system___string_concat
153a4     50 00 00 FF 
153a8     38 E5 05 F1 | 	add	objptr, ##41272
153ac     F2 FA 61 FC | 	wrlong	result1, objptr
153b0     19 00 00 FF 
153b4     FC E4 85 F1 | 	sub	objptr, ##13052
153b8     F2 12 02 FB | 	rdlong	arg01, objptr
153bc     04 E4 85 F1 | 	sub	objptr, #4
153c0     F2 14 02 FB | 	rdlong	arg02, objptr
153c4     37 00 00 FF 
153c8     38 E4 85 F1 | 	sub	objptr, ##28216
153cc     C8 DE B0 FD | 	call	#_hg010b_spin2_cls
153d0     A9 01 00 FF 
153d4     D4 13 06 F6 | 	mov	arg01, ##@LR__5842
153d8                 | ' 
153d8                 | ' write(text)
153d8     7C E2 B0 FD | 	call	#_hg010b_spin2_write
153dc                 | ' crlf
153dc     78 E7 B0 FD | 	call	#_hg010b_spin2_crlf
153e0     18 00 00 FF 
153e4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
153e8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
153ec     18 00 00 FF 
153f0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
153f4                 | ' 
153f4                 | ' write(text)
153f4     60 E2 B0 FD | 	call	#_hg010b_spin2_write
153f8                 | ' crlf
153f8     5C E7 B0 FD | 	call	#_hg010b_spin2_crlf
153fc     50 00 00 FF 
15400     38 E5 05 F1 | 	add	objptr, ##41272
15404     F2 12 02 FB | 	rdlong	arg01, objptr
15408     50 00 00 FF 
1540c     38 E5 85 F1 | 	sub	objptr, ##41272
15410                 | ' 
15410                 | ' write(text)
15410     44 E2 B0 FD | 	call	#_hg010b_spin2_write
15414                 | ' crlf
15414     40 E7 B0 FD | 	call	#_hg010b_spin2_crlf
15418     A7 F0 03 F6 | 	mov	ptra, fp
1541c     B2 00 A0 FD | 	call	#popregs_
15420                 | _do_mode_ret
15420     2D 00 64 FD | 	ret
15424                 | 
15424                 | ' 
15424                 | ' '-------------------- mouse
15424                 | ' 
15424                 | ' sub do_mouse
15424                 | _do_mouse
15424     64 77 BF FD | 	call	#_pop
15428     00 FA 4D F2 | 	cmps	result1, #0 wz
1542c                 | ' 
1542c                 | ' t1=pop()
1542c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1542c     14 00 90 5D |  if_ne	jmp	#LR__1780
15430     10 12 06 F6 | 	mov	arg01, #16
15434     00 14 06 F6 | 	mov	arg02, #0
15438     00 16 06 F6 | 	mov	arg03, #0
1543c     38 D1 B0 FD | 	call	#_hg010b_spin2_setspritesize
15440     10 00 90 FD | 	jmp	#LR__1781
15444                 | LR__1780
15444     10 12 06 F6 | 	mov	arg01, #16
15448     20 14 06 F6 | 	mov	arg02, #32
1544c     20 16 06 F6 | 	mov	arg03, #32
15450     24 D1 B0 FD | 	call	#_hg010b_spin2_setspritesize
15454                 | LR__1781
15454                 | _do_mouse_ret
15454     2D 00 64 FD | 	ret
15458                 | 
15458                 | ' 
15458                 | ' '-------------------- mousek
15458                 | ' 
15458                 | ' sub do_mousek
15458                 | _do_mousek
15458     00 4A 05 F6 | 	mov	COUNT_, #0
1545c     A8 00 A0 FD | 	call	#pushregs_
15460     0C F0 07 F1 | 	add	ptra, #12
15464     08 4E 05 F1 | 	add	fp, #8
15468     A7 3A 68 FC | 	wrlong	#29, fp
1546c     08 4E 85 F1 | 	sub	fp, #8
15470     51 00 00 FF 
15474     50 E5 05 F1 | 	add	objptr, ##41808
15478     F2 12 02 FB | 	rdlong	arg01, objptr
1547c     51 00 00 FF 
15480     50 E5 85 F1 | 	sub	objptr, ##41808
15484     A7 12 62 FC | 	wrlong	arg01, fp
15488     A7 12 02 F6 | 	mov	arg01, fp
1548c     94 77 BF FD | 	call	#_push
15490     A7 F0 03 F6 | 	mov	ptra, fp
15494     B2 00 A0 FD | 	call	#popregs_
15498                 | _do_mousek_ret
15498     2D 00 64 FD | 	ret
1549c                 | 
1549c                 | ' 
1549c                 | ' '-------------------- mousew
1549c                 | ' 
1549c                 | ' sub do_mousew
1549c                 | _do_mousew
1549c     00 4A 05 F6 | 	mov	COUNT_, #0
154a0     A8 00 A0 FD | 	call	#pushregs_
154a4     0C F0 07 F1 | 	add	ptra, #12
154a8     08 4E 05 F1 | 	add	fp, #8
154ac     A7 38 68 FC | 	wrlong	#28, fp
154b0     08 4E 85 F1 | 	sub	fp, #8
154b4     51 00 00 FF 
154b8     54 E5 05 F1 | 	add	objptr, ##41812
154bc     F2 12 02 FB | 	rdlong	arg01, objptr
154c0     51 00 00 FF 
154c4     54 E5 85 F1 | 	sub	objptr, ##41812
154c8     A7 12 62 FC | 	wrlong	arg01, fp
154cc     A7 12 02 F6 | 	mov	arg01, fp
154d0     50 77 BF FD | 	call	#_push
154d4     A7 F0 03 F6 | 	mov	ptra, fp
154d8     B2 00 A0 FD | 	call	#popregs_
154dc                 | _do_mousew_ret
154dc     2D 00 64 FD | 	ret
154e0                 | 
154e0                 | ' 
154e0                 | ' '-------------------- mousex
154e0                 | ' 
154e0                 | ' sub do_mousex
154e0                 | _do_mousex
154e0     00 4A 05 F6 | 	mov	COUNT_, #0
154e4     A8 00 A0 FD | 	call	#pushregs_
154e8     0C F0 07 F1 | 	add	ptra, #12
154ec     08 4E 05 F1 | 	add	fp, #8
154f0     A7 3A 68 FC | 	wrlong	#29, fp
154f4     08 4E 85 F1 | 	sub	fp, #8
154f8     51 00 00 FF 
154fc     48 E5 05 F1 | 	add	objptr, ##41800
15500     F2 12 02 FB | 	rdlong	arg01, objptr
15504     51 00 00 FF 
15508     48 E5 85 F1 | 	sub	objptr, ##41800
1550c     A7 12 62 FC | 	wrlong	arg01, fp
15510     A7 12 02 F6 | 	mov	arg01, fp
15514     0C 77 BF FD | 	call	#_push
15518     A7 F0 03 F6 | 	mov	ptra, fp
1551c     B2 00 A0 FD | 	call	#popregs_
15520                 | _do_mousex_ret
15520     2D 00 64 FD | 	ret
15524                 | 
15524                 | ' 
15524                 | ' '-------------------- mousey
15524                 | ' 
15524                 | ' sub do_mousey
15524                 | _do_mousey
15524     00 4A 05 F6 | 	mov	COUNT_, #0
15528     A8 00 A0 FD | 	call	#pushregs_
1552c     0C F0 07 F1 | 	add	ptra, #12
15530     08 4E 05 F1 | 	add	fp, #8
15534     A7 3A 68 FC | 	wrlong	#29, fp
15538     08 4E 85 F1 | 	sub	fp, #8
1553c     51 00 00 FF 
15540     4C E5 05 F1 | 	add	objptr, ##41804
15544     F2 12 02 FB | 	rdlong	arg01, objptr
15548     51 00 00 FF 
1554c     4C E5 85 F1 | 	sub	objptr, ##41804
15550     A7 12 62 FC | 	wrlong	arg01, fp
15554     A7 12 02 F6 | 	mov	arg01, fp
15558     C8 76 BF FD | 	call	#_push
1555c     A7 F0 03 F6 | 	mov	ptra, fp
15560     B2 00 A0 FD | 	call	#popregs_
15564                 | _do_mousey_ret
15564     2D 00 64 FD | 	ret
15568                 | 
15568                 | ' 
15568                 | ' '------------------ new
15568                 | ' 
15568                 | ' sub do_new
15568                 | _do_new
15568     03 4A 05 F6 | 	mov	COUNT_, #3
1556c     A8 00 A0 FD | 	call	#pushregs_
15570                 | ' 
15570                 | ' if inrun=1 then inrun=2
15570     50 00 00 FF 
15574     EC E4 05 F1 | 	add	objptr, ##41196
15578     F2 16 02 FB | 	rdlong	arg03, objptr
1557c     50 00 00 FF 
15580     EC E4 85 F1 | 	sub	objptr, ##41196
15584     01 16 0E F2 | 	cmp	arg03, #1 wz
15588     50 00 00 AF 
1558c     EC E4 05 A1 |  if_e	add	objptr, ##41196
15590     F2 04 68 AC |  if_e	wrlong	#2, objptr
15594     50 00 00 AF 
15598     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1559c     13 12 C6 F9 | 	decod	arg01, #19
155a0     01 14 66 F6 | 	neg	arg02, #1
155a4     24 C1 B0 FD | 	call	#_pslpoke
155a8     35 00 00 FF 
155ac     08 E4 05 F1 | 	add	objptr, ##27144
155b0     F2 00 68 FC | 	wrlong	#0, objptr
155b4                 | ' pslpoke(memlo,$FFFFFFFF)
155b4                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
155b4     00 26 06 F6 | 	mov	local01, #0
155b8     20 00 00 FF 
155bc     10 E4 85 F1 | 	sub	objptr, ##16400
155c0     97 1E 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
155c4                 | LR__1790
155c4     13 17 02 F6 | 	mov	arg03, local01
155c8     04 16 66 F0 | 	shl	arg03, #4
155cc     F2 16 02 F1 | 	add	arg03, objptr
155d0     A9 01 00 FF 
155d4     D5 15 06 F6 | 	mov	arg02, ##@LR__5843
155d8     0B 15 62 FC | 	wrlong	arg02, arg03
155dc     13 29 02 F6 | 	mov	local02, local01
155e0     04 28 66 F0 | 	shl	local02, #4
155e4     F2 28 02 F1 | 	add	local02, objptr
155e8     0C 28 06 F1 | 	add	local02, #12
155ec     14 01 68 FC | 	wrlong	#0, local02
155f0     01 26 06 F1 | 	add	local01, #1
155f4     02 00 00 FF 
155f8     01 26 56 F2 | 	cmps	local01, ##1025 wc
155fc     C4 FF 9F CD |  if_b	jmp	#LR__1790
15600                 | LR__1791
15600     35 00 00 FF 
15604     90 E4 05 F1 | 	add	objptr, ##27280
15608     00 04 80 FF 
1560c     F2 00 68 FC | 	wrlong	##524288, objptr
15610     06 00 00 FF 
15614     30 E4 05 F1 | 	add	objptr, ##3120
15618     00 04 80 FF 
1561c     F2 00 68 FC | 	wrlong	##524288, objptr
15620     04 E4 05 F1 | 	add	objptr, #4
15624     00 04 80 FF 
15628     F2 00 68 FC | 	wrlong	##524288, objptr
1562c     0D 00 00 FF 
15630     64 E4 85 F1 | 	sub	objptr, ##6756
15634     F2 00 68 FC | 	wrlong	#0, objptr
15638     07 00 00 FF 
1563c     24 E4 05 F1 | 	add	objptr, ##3620
15640     F2 00 68 FC | 	wrlong	#0, objptr
15644     07 00 00 FF 
15648     20 E4 85 F1 | 	sub	objptr, ##3616
1564c     00 04 80 FF 
15650     F2 00 68 FC | 	wrlong	##524288, objptr
15654     0D 00 00 FF 
15658     D0 E4 05 F1 | 	add	objptr, ##6864
1565c     F2 00 68 FC | 	wrlong	#0, objptr
15660     A9 01 00 FF 
15664     D6 2B 06 F6 | 	mov	local03, ##@LR__5844
15668     01 00 00 FF 
1566c     EC E4 05 F1 | 	add	objptr, ##748
15670     F2 2A 62 FC | 	wrlong	local03, objptr
15674     07 00 00 FF 
15678     8C E5 85 F1 | 	sub	objptr, ##3980
1567c     F2 00 68 FC | 	wrlong	#0, objptr
15680     04 E4 05 F1 | 	add	objptr, #4
15684     FF FF FF FF 
15688     F2 FE 6B FC | 	wrlong	##-1, objptr
1568c     06 00 00 FF 
15690     A0 E4 05 F1 | 	add	objptr, ##3232
15694     F2 00 68 FC | 	wrlong	#0, objptr
15698     04 E4 05 F1 | 	add	objptr, #4
1569c     F2 00 68 FC | 	wrlong	#0, objptr
156a0                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
156a0                 | ' stackpointer=0
156a0                 | ' lineptr=0 
156a0                 | ' programptr=memlo ': stringptr=0
156a0                 | ' dataptr=0 : readline=""
156a0                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
156a0                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
156a0     00 26 06 F6 | 	mov	local01, #0
156a4     06 00 00 FF 
156a8     9C E4 85 F1 | 	sub	objptr, ##3228
156ac     97 16 48 FB | 	callpa	#(@LR__1793-@LR__1792)>>2,fcache_load_ptr_
156b0                 | LR__1792
156b0     13 29 02 F6 | 	mov	local02, local01
156b4     02 28 66 F0 | 	shl	local02, #2
156b8     13 29 02 F1 | 	add	local02, local01
156bc     02 28 66 F0 | 	shl	local02, #2
156c0     F2 28 02 F1 | 	add	local02, objptr
156c4     08 28 06 F1 | 	add	local02, #8
156c8     FF FF FF FF 
156cc     14 FF 6B FC | 	wrlong	##-1, local02
156d0     01 26 06 F1 | 	add	local01, #1
156d4     41 26 56 F2 | 	cmps	local01, #65 wc
156d8     D4 FF 9F CD |  if_b	jmp	#LR__1792
156dc                 | LR__1793
156dc     4A 00 00 FF 
156e0     98 E4 85 F1 | 	sub	objptr, ##38040
156e4                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
156e4     00 26 06 F6 | 	mov	local01, #0
156e8                 | LR__1794
156e8     13 29 02 F6 | 	mov	local02, local01
156ec     02 28 66 F0 | 	shl	local02, #2
156f0     51 00 00 FF 
156f4     90 E5 05 F1 | 	add	objptr, ##41872
156f8     F2 28 02 F1 | 	add	local02, objptr
156fc     14 2B 0A FB | 	rdlong	local03, local02 wz
15700     51 00 00 FF 
15704     90 E5 85 F1 | 	sub	objptr, ##41872
15708     34 00 90 AD |  if_e	jmp	#LR__1795
1570c     13 13 02 F6 | 	mov	arg01, local01
15710     00 14 06 F6 | 	mov	arg02, #0
15714     00 16 06 F6 | 	mov	arg03, #0
15718     5C CE B0 FD | 	call	#_hg010b_spin2_setspritesize
1571c     13 29 02 F6 | 	mov	local02, local01
15720     02 28 66 F0 | 	shl	local02, #2
15724     51 00 00 FF 
15728     90 E5 05 F1 | 	add	objptr, ##41872
1572c     F2 28 02 F1 | 	add	local02, objptr
15730     14 13 02 FB | 	rdlong	arg01, local02
15734     51 00 00 FF 
15738     90 E5 85 F1 | 	sub	objptr, ##41872
1573c     74 3A B1 FD | 	call	#__system___gc_free
15740                 | LR__1795
15740     01 26 06 F1 | 	add	local01, #1
15744     10 26 56 F2 | 	cmps	local01, #16 wc
15748     9C FF 9F CD |  if_b	jmp	#LR__1794
1574c     51 00 00 FF 
15750     E4 E5 05 F1 | 	add	objptr, ##41956
15754     00 C0 9F FF 
15758     F2 00 68 FC | 	wrlong	##1065353216, objptr
1575c     04 E4 05 F1 | 	add	objptr, #4
15760     00 C0 9F FF 
15764     F2 00 68 FC | 	wrlong	##1065353216, objptr
15768     51 00 00 FF 
1576c     E4 E5 85 F1 | 	sub	objptr, ##41956
15770     F2 2A 02 FB | 	rdlong	local03, objptr
15774     51 00 00 FF 
15778     D0 E5 05 F1 | 	add	objptr, ##41936
1577c     F2 2A 62 FC | 	wrlong	local03, objptr
15780     51 00 00 FF 
15784     D4 E5 85 F1 | 	sub	objptr, ##41940
15788     11 12 06 F6 | 	mov	arg01, #17
1578c     08 14 06 F6 | 	mov	arg02, #8
15790     10 16 06 F6 | 	mov	arg03, #16
15794     E0 CD B0 FD | 	call	#_hg010b_spin2_setspritesize
15798     10 12 06 F6 | 	mov	arg01, #16
1579c     20 14 06 F6 | 	mov	arg02, #32
157a0     20 16 06 F6 | 	mov	arg03, #32
157a4     D0 CD B0 FD | 	call	#_hg010b_spin2_setspritesize
157a8     A9 01 00 FF 
157ac     D7 2B 06 F6 | 	mov	local03, ##@LR__5845
157b0     52 00 00 FF 
157b4     00 E4 05 F1 | 	add	objptr, ##41984
157b8     F2 2A 62 FC | 	wrlong	local03, objptr
157bc     52 00 00 FF 
157c0     00 E4 85 F1 | 	sub	objptr, ##41984
157c4     5C B1 B0 FD | 	call	#_init_audio
157c8     A7 F0 03 F6 | 	mov	ptra, fp
157cc     B2 00 A0 FD | 	call	#popregs_
157d0                 | _do_new_ret
157d0     2D 00 64 FD | 	ret
157d4                 | 
157d4                 | ' 
157d4                 | ' '-------------------- next
157d4                 | ' 
157d4                 | ' sub do_next()
157d4                 | _do_next
157d4     04 4A 05 F6 | 	mov	COUNT_, #4
157d8     A8 00 A0 FD | 	call	#pushregs_
157dc     AC 73 BF FD | 	call	#_pop
157e0     FD 26 02 F6 | 	mov	local01, result1
157e4     FE 28 02 F6 | 	mov	local02, result2
157e8     FF 2A 02 F6 | 	mov	local03, result3
157ec                 | ' t1=pop() :varnum=t1.result.uresult
157ec                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
157ec     50 00 00 FF 
157f0     30 E5 05 F1 | 	add	objptr, ##41264
157f4     F2 14 02 FB | 	rdlong	arg02, objptr
157f8     0A 13 02 F6 | 	mov	arg01, arg02
157fc     02 12 66 F0 | 	shl	arg01, #2
15800     0A 13 02 F1 | 	add	arg01, arg02
15804     02 12 66 F0 | 	shl	arg01, #2
15808     06 00 00 FF 
1580c     98 E4 85 F1 | 	sub	objptr, ##3224
15810     F2 12 02 F1 | 	add	arg01, objptr
15814     08 12 06 F1 | 	add	arg01, #8
15818     09 15 02 FB | 	rdlong	arg02, arg01
1581c     13 15 0A F2 | 	cmp	arg02, local01 wz
15820     4A 00 00 FF 
15824     98 E4 85 F1 | 	sub	objptr, ##38040
15828     10 00 90 AD |  if_e	jmp	#LR__1800
1582c     25 12 06 F6 | 	mov	arg01, #37
15830     00 14 06 F6 | 	mov	arg02, #0
15834     F4 BC B0 FD | 	call	#_printerror
15838     54 03 90 FD | 	jmp	#LR__1807
1583c                 | LR__1800
1583c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
1583c     13 15 02 F6 | 	mov	arg02, local01
15840     04 14 66 F0 | 	shl	arg02, #4
15844     14 00 00 FF 
15848     F8 E5 05 F1 | 	add	objptr, ##10744
1584c     F2 14 02 F1 | 	add	arg02, objptr
15850     0C 14 06 F1 | 	add	arg02, #12
15854     0A 15 02 FB | 	rdlong	arg02, arg02
15858     1E 14 0E F2 | 	cmp	arg02, #30 wz
1585c     14 00 00 FF 
15860     F8 E5 85 F1 | 	sub	objptr, ##10744
15864     54 00 90 5D |  if_ne	jmp	#LR__1801
15868     13 15 02 F6 | 	mov	arg02, local01
1586c     04 14 66 F0 | 	shl	arg02, #4
15870     14 00 00 FF 
15874     F8 E5 05 F1 | 	add	objptr, ##10744
15878     F2 14 02 F1 | 	add	arg02, objptr
1587c     0C 14 06 F1 | 	add	arg02, #12
15880     0A 39 68 FC | 	wrlong	#28, arg02
15884     13 2D 02 F6 | 	mov	local04, local01
15888     04 2C 66 F0 | 	shl	local04, #4
1588c     F2 2C 02 F1 | 	add	local04, objptr
15890     13 15 02 F6 | 	mov	arg02, local01
15894     04 14 66 F0 | 	shl	arg02, #4
15898     F2 14 02 F1 | 	add	arg02, objptr
1589c     04 14 06 F1 | 	add	arg02, #4
158a0     0A 13 02 FB | 	rdlong	arg01, arg02
158a4     14 00 00 FF 
158a8     F8 E5 85 F1 | 	sub	objptr, ##10744
158ac     01 14 06 F6 | 	mov	arg02, #1
158b0     64 29 B1 FD | 	call	#__system___float_tointeger
158b4     04 2C 06 F1 | 	add	local04, #4
158b8     16 FB 61 FC | 	wrlong	result1, local04
158bc                 | LR__1801
158bc     50 00 00 FF 
158c0     30 E5 05 F1 | 	add	objptr, ##41264
158c4     F2 2C 02 FB | 	rdlong	local04, objptr
158c8     16 15 02 F6 | 	mov	arg02, local04
158cc     02 14 66 F0 | 	shl	arg02, #2
158d0     16 15 02 F1 | 	add	arg02, local04
158d4     02 14 66 F0 | 	shl	arg02, #2
158d8     06 00 00 FF 
158dc     98 E4 85 F1 | 	sub	objptr, ##3224
158e0     F2 14 02 F1 | 	add	arg02, objptr
158e4     0C 14 06 F1 | 	add	arg02, #12
158e8     0A FF 01 FB | 	rdlong	result3, arg02
158ec     13 2D 02 F6 | 	mov	local04, local01
158f0     04 2C 66 F0 | 	shl	local04, #4
158f4     35 00 00 FF 
158f8     A0 E4 85 F1 | 	sub	objptr, ##27296
158fc     F2 2C 02 F1 | 	add	local04, objptr
15900     13 15 02 F6 | 	mov	arg02, local01
15904     04 14 66 F0 | 	shl	arg02, #4
15908     F2 14 02 F1 | 	add	arg02, objptr
1590c     04 14 06 F1 | 	add	arg02, #4
15910     0A 13 02 FB | 	rdlong	arg01, arg02
15914     FF 12 02 F1 | 	add	arg01, result3
15918     04 2C 06 F1 | 	add	local04, #4
1591c     16 13 62 FC | 	wrlong	arg01, local04
15920                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15920                 | ' if fortable(fortop).stepval>=0 then
15920     3B 00 00 FF 
15924     38 E5 05 F1 | 	add	objptr, ##30520
15928     F2 2C 02 FB | 	rdlong	local04, objptr
1592c     16 13 02 F6 | 	mov	arg01, local04
15930     02 12 66 F0 | 	shl	arg01, #2
15934     16 13 02 F1 | 	add	arg01, local04
15938     02 12 66 F0 | 	shl	arg01, #2
1593c     06 00 00 FF 
15940     98 E4 85 F1 | 	sub	objptr, ##3224
15944     F2 12 02 F1 | 	add	arg01, objptr
15948     0C 12 06 F1 | 	add	arg01, #12
1594c     09 13 02 FB | 	rdlong	arg01, arg01
15950     00 12 56 F2 | 	cmps	arg01, #0 wc
15954     4A 00 00 FF 
15958     98 E4 85 F1 | 	sub	objptr, ##38040
1595c     78 00 90 CD |  if_b	jmp	#LR__1802
15960                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15960     04 26 66 F0 | 	shl	local01, #4
15964     14 00 00 FF 
15968     F8 E5 05 F1 | 	add	objptr, ##10744
1596c     F2 26 02 F1 | 	add	local01, objptr
15970     3B 00 00 FF 
15974     38 E5 05 F1 | 	add	objptr, ##30520
15978     F2 12 02 FB | 	rdlong	arg01, objptr
1597c     09 2D 02 F6 | 	mov	local04, arg01
15980     02 2C 66 F0 | 	shl	local04, #2
15984     09 2D 02 F1 | 	add	local04, arg01
15988     02 2C 66 F0 | 	shl	local04, #2
1598c     06 00 00 FF 
15990     98 E4 85 F1 | 	sub	objptr, ##3224
15994     F2 2C 02 F1 | 	add	local04, objptr
15998     04 26 06 F1 | 	add	local01, #4
1599c     13 27 02 FB | 	rdlong	local01, local01
159a0     10 2C 06 F1 | 	add	local04, #16
159a4     16 2D 02 FB | 	rdlong	local04, local04
159a8     16 27 5A F2 | 	cmps	local01, local04 wcz
159ac     4A 00 00 FF 
159b0     98 E4 85 F1 | 	sub	objptr, ##38040
159b4     9C 00 90 ED |  if_be	jmp	#LR__1804
159b8     50 00 00 FF 
159bc     30 E5 05 F1 | 	add	objptr, ##41264
159c0     F2 2C 02 FB | 	rdlong	local04, objptr
159c4     01 2C 86 F1 | 	sub	local04, #1
159c8     F2 2C 62 FC | 	wrlong	local04, objptr
159cc     50 00 00 FF 
159d0     30 E5 85 F1 | 	sub	objptr, ##41264
159d4     B8 01 90 FD | 	jmp	#LR__1807
159d8                 | LR__1802
159d8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
159d8     13 2D 02 F6 | 	mov	local04, local01
159dc     04 2C 66 F0 | 	shl	local04, #4
159e0     14 00 00 FF 
159e4     F8 E5 05 F1 | 	add	objptr, ##10744
159e8     F2 2C 02 F1 | 	add	local04, objptr
159ec     3B 00 00 FF 
159f0     38 E5 05 F1 | 	add	objptr, ##30520
159f4     F2 26 02 FB | 	rdlong	local01, objptr
159f8     13 13 02 F6 | 	mov	arg01, local01
159fc     02 12 66 F0 | 	shl	arg01, #2
15a00     13 13 02 F1 | 	add	arg01, local01
15a04     02 12 66 F0 | 	shl	arg01, #2
15a08     06 00 00 FF 
15a0c     98 E4 85 F1 | 	sub	objptr, ##3224
15a10     F2 12 02 F1 | 	add	arg01, objptr
15a14     04 2C 06 F1 | 	add	local04, #4
15a18     16 2D 02 FB | 	rdlong	local04, local04
15a1c     10 12 06 F1 | 	add	arg01, #16
15a20     09 13 02 FB | 	rdlong	arg01, arg01
15a24     09 2D 52 F2 | 	cmps	local04, arg01 wc
15a28     4A 00 00 FF 
15a2c     98 E4 85 F1 | 	sub	objptr, ##38040
15a30     20 00 90 3D |  if_ae	jmp	#LR__1803
15a34     50 00 00 FF 
15a38     30 E5 05 F1 | 	add	objptr, ##41264
15a3c     F2 2C 02 FB | 	rdlong	local04, objptr
15a40     01 2C 86 F1 | 	sub	local04, #1
15a44     F2 2C 62 FC | 	wrlong	local04, objptr
15a48     50 00 00 FF 
15a4c     30 E5 85 F1 | 	sub	objptr, ##41264
15a50     3C 01 90 FD | 	jmp	#LR__1807
15a54                 | LR__1803
15a54                 | LR__1804
15a54                 | ' ' if not returned, goto pointer 
15a54                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15a54     50 00 00 FF 
15a58     EC E4 05 F1 | 	add	objptr, ##41196
15a5c     F2 2C 02 FB | 	rdlong	local04, objptr
15a60     50 00 00 FF 
15a64     EC E4 85 F1 | 	sub	objptr, ##41196
15a68     01 2C 16 F2 | 	cmp	local04, #1 wc
15a6c     DC 00 90 CD |  if_b	jmp	#LR__1805
15a70     50 00 00 FF 
15a74     30 E5 05 F1 | 	add	objptr, ##41264
15a78     F2 2C 02 FB | 	rdlong	local04, objptr
15a7c     16 27 02 F6 | 	mov	local01, local04
15a80     02 26 66 F0 | 	shl	local01, #2
15a84     16 27 02 F1 | 	add	local01, local04
15a88     02 26 66 F0 | 	shl	local01, #2
15a8c     06 00 00 FF 
15a90     98 E4 85 F1 | 	sub	objptr, ##3224
15a94     F2 26 02 F1 | 	add	local01, objptr
15a98     06 00 00 FF 
15a9c     20 E4 05 F1 | 	add	objptr, ##3104
15aa0     F2 2C 02 FB | 	rdlong	local04, objptr
15aa4     50 00 00 FF 
15aa8     B8 E4 85 F1 | 	sub	objptr, ##41144
15aac     13 27 02 FB | 	rdlong	local01, local01
15ab0     13 2D 0A F2 | 	cmp	local04, local01 wz
15ab4     94 00 90 AD |  if_e	jmp	#LR__1805
15ab8     50 00 00 FF 
15abc     30 E5 05 F1 | 	add	objptr, ##41264
15ac0     F2 2C 02 FB | 	rdlong	local04, objptr
15ac4     16 27 02 F6 | 	mov	local01, local04
15ac8     02 26 66 F0 | 	shl	local01, #2
15acc     16 27 02 F1 | 	add	local01, local04
15ad0     02 26 66 F0 | 	shl	local01, #2
15ad4     06 00 00 FF 
15ad8     98 E4 85 F1 | 	sub	objptr, ##3224
15adc     F2 26 02 F1 | 	add	local01, objptr
15ae0     13 27 02 FB | 	rdlong	local01, local01
15ae4     06 00 00 FF 
15ae8     20 E4 05 F1 | 	add	objptr, ##3104
15aec     F2 26 62 FC | 	wrlong	local01, objptr
15af0     78 E4 05 F1 | 	add	objptr, #120
15af4     F2 2C 02 FB | 	rdlong	local04, objptr
15af8     16 27 02 F6 | 	mov	local01, local04
15afc     02 26 66 F0 | 	shl	local01, #2
15b00     16 27 02 F1 | 	add	local01, local04
15b04     02 26 66 F0 | 	shl	local01, #2
15b08     06 00 00 FF 
15b0c     98 E4 85 F1 | 	sub	objptr, ##3224
15b10     F2 26 02 F1 | 	add	local01, objptr
15b14     04 26 06 F1 | 	add	local01, #4
15b18     13 27 02 FB | 	rdlong	local01, local01
15b1c     06 00 00 FF 
15b20     24 E4 05 F1 | 	add	objptr, ##3108
15b24     F2 26 62 FC | 	wrlong	local01, objptr
15b28     06 00 00 FF 
15b2c     40 E4 85 F1 | 	sub	objptr, ##3136
15b30     F2 2C 02 FB | 	rdlong	local04, objptr
15b34     01 2C 86 F1 | 	sub	local04, #1
15b38     04 E4 05 F1 | 	add	objptr, #4
15b3c     F2 2C 62 FC | 	wrlong	local04, objptr
15b40     4A 00 00 FF 
15b44     80 E4 85 F1 | 	sub	objptr, ##38016
15b48     44 00 90 FD | 	jmp	#LR__1806
15b4c                 | LR__1805
15b4c     50 00 00 FF 
15b50     30 E5 05 F1 | 	add	objptr, ##41264
15b54     F2 2C 02 FB | 	rdlong	local04, objptr
15b58     16 27 02 F6 | 	mov	local01, local04
15b5c     02 26 66 F0 | 	shl	local01, #2
15b60     16 27 02 F1 | 	add	local01, local04
15b64     02 26 66 F0 | 	shl	local01, #2
15b68     06 00 00 FF 
15b6c     98 E4 85 F1 | 	sub	objptr, ##3224
15b70     F2 26 02 F1 | 	add	local01, objptr
15b74     04 26 06 F1 | 	add	local01, #4
15b78     13 27 02 FB | 	rdlong	local01, local01
15b7c     01 26 86 F1 | 	sub	local01, #1
15b80     18 E4 85 F1 | 	sub	objptr, #24
15b84     F2 26 62 FC | 	wrlong	local01, objptr
15b88     4A 00 00 FF 
15b8c     80 E4 85 F1 | 	sub	objptr, ##38016
15b90                 | LR__1806
15b90                 | LR__1807
15b90     A7 F0 03 F6 | 	mov	ptra, fp
15b94     B2 00 A0 FD | 	call	#popregs_
15b98                 | _do_next_ret
15b98     2D 00 64 FD | 	ret
15b9c                 | 
15b9c                 | ' 
15b9c                 | ' '-------------------- no command (print "Unknown command")
15b9c                 | ' 
15b9c                 | ' sub do_no_command
15b9c                 | _do_no_command
15b9c     50 00 00 FF 
15ba0     F0 E4 05 F1 | 	add	objptr, ##41200
15ba4     F2 14 02 FB | 	rdlong	arg02, objptr
15ba8     50 00 00 FF 
15bac     F0 E4 85 F1 | 	sub	objptr, ##41200
15bb0     17 12 06 F6 | 	mov	arg01, #23
15bb4     74 B9 B0 FD | 	call	#_printerror
15bb8                 | _do_no_command_ret
15bb8     2D 00 64 FD | 	ret
15bbc                 | 
15bbc                 | ' 
15bbc                 | ' '-------------------- nothing
15bbc                 | ' 
15bbc                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15bbc                 | _do_nothing
15bbc                 | _do_nothing_ret
15bbc     2D 00 64 FD | 	ret
15bc0                 | 
15bc0                 | ' 
15bc0                 | ' '-------------------- on
15bc0                 | ' 
15bc0                 | ' sub do_on
15bc0                 | _do_on
15bc0     01 4A 05 F6 | 	mov	COUNT_, #1
15bc4     A8 00 A0 FD | 	call	#pushregs_
15bc8     18 F0 07 F1 | 	add	ptra, #24
15bcc     4A 00 00 FF 
15bd0     80 E4 05 F1 | 	add	objptr, ##38016
15bd4     F2 12 02 FB | 	rdlong	arg01, objptr
15bd8     09 FD 01 F6 | 	mov	result2, arg01
15bdc     01 FC 65 F0 | 	shl	result2, #1
15be0     09 FD 01 F1 | 	add	result2, arg01
15be4     02 FC 65 F0 | 	shl	result2, #2
15be8     03 00 00 FF 
15bec     04 E4 85 F1 | 	sub	objptr, ##1540
15bf0     F2 FC 01 F1 | 	add	result2, objptr
15bf4     FE 12 02 FB | 	rdlong	arg01, result2
15bf8     14 4E 05 F1 | 	add	fp, #20
15bfc     A7 12 62 FC | 	wrlong	arg01, fp
15c00     03 00 00 FF 
15c04     04 E4 05 F1 | 	add	objptr, ##1540
15c08     F2 12 02 FB | 	rdlong	arg01, objptr
15c0c     09 27 02 F6 | 	mov	local01, arg01
15c10     01 26 66 F0 | 	shl	local01, #1
15c14     09 27 02 F1 | 	add	local01, arg01
15c18     02 26 66 F0 | 	shl	local01, #2
15c1c     03 00 00 FF 
15c20     04 E4 85 F1 | 	sub	objptr, ##1540
15c24     F2 26 02 F1 | 	add	local01, objptr
15c28     04 26 06 F1 | 	add	local01, #4
15c2c     13 27 02 FB | 	rdlong	local01, local01
15c30     08 4E 85 F1 | 	sub	fp, #8
15c34     A7 26 62 FC | 	wrlong	local01, fp
15c38     0C 4E 85 F1 | 	sub	fp, #12
15c3c     47 00 00 FF 
15c40     7C E4 85 F1 | 	sub	objptr, ##36476
15c44     44 6F BF FD | 	call	#_pop
15c48     FF 26 02 F6 | 	mov	local01, result3
15c4c     A7 FA 61 FC | 	wrlong	result1, fp
15c50     04 4E 05 F1 | 	add	fp, #4
15c54     A7 FC 61 FC | 	wrlong	result2, fp
15c58     04 4E 05 F1 | 	add	fp, #4
15c5c     A7 26 62 FC | 	wrlong	local01, fp
15c60     08 4E 85 F1 | 	sub	fp, #8
15c64     A7 12 02 F6 | 	mov	arg01, fp
15c68     04 71 BF FD | 	call	#_converttoint
15c6c     10 4E 05 F1 | 	add	fp, #16
15c70     A7 FA 61 FC | 	wrlong	result1, fp
15c74                 | ' 
15c74                 | ' numpar=compiledline(lineptr_e).result.uresult
15c74                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15c74                 | ' t1=pop()
15c74                 | ' t=converttoint(t1)
15c74                 | ' if t<1 orelse t>numpar then return
15c74     10 4E 85 F1 | 	sub	fp, #16
15c78     01 FA 55 F2 | 	cmps	result1, #1 wc
15c7c     58 00 90 CD |  if_b	jmp	#LR__1810
15c80     10 4E 05 F1 | 	add	fp, #16
15c84     A7 26 02 FB | 	rdlong	local01, fp
15c88     04 4E 05 F1 | 	add	fp, #4
15c8c     A7 12 02 FB | 	rdlong	arg01, fp
15c90     14 4E 85 F1 | 	sub	fp, #20
15c94     09 27 5A F2 | 	cmps	local01, arg01 wcz
15c98     3C 00 90 1D |  if_a	jmp	#LR__1810
15c9c     10 4E 05 F1 | 	add	fp, #16
15ca0     A7 26 02 FB | 	rdlong	local01, fp
15ca4     01 26 86 F1 | 	sub	local01, #1
15ca8     04 4E 85 F1 | 	sub	fp, #4
15cac     A7 12 02 FB | 	rdlong	arg01, fp
15cb0     13 13 02 FD | 	qmul	arg01, local01
15cb4     4A 00 00 FF 
15cb8     80 E4 05 F1 | 	add	objptr, ##38016
15cbc     F2 26 02 FB | 	rdlong	local01, objptr
15cc0     0C 4E 85 F1 | 	sub	fp, #12
15cc4     18 12 62 FD | 	getqx	arg01
15cc8     09 27 02 F1 | 	add	local01, arg01
15ccc     F2 26 62 FC | 	wrlong	local01, objptr
15cd0     4A 00 00 FF 
15cd4     80 E4 85 F1 | 	sub	objptr, ##38016
15cd8                 | LR__1810
15cd8     A7 F0 03 F6 | 	mov	ptra, fp
15cdc     B2 00 A0 FD | 	call	#popregs_
15ce0                 | _do_on_ret
15ce0     2D 00 64 FD | 	ret
15ce4                 | 
15ce4                 | ' 
15ce4                 | ' '-------------------- open
15ce4                 | ' 
15ce4                 | ' sub do_open
15ce4                 | _do_open
15ce4     02 4A 05 F6 | 	mov	COUNT_, #2
15ce8     A8 00 A0 FD | 	call	#pushregs_
15cec     20 F0 07 F1 | 	add	ptra, #32
15cf0     4A 00 00 FF 
15cf4     80 E4 05 F1 | 	add	objptr, ##38016
15cf8     F2 16 02 FB | 	rdlong	arg03, objptr
15cfc     0B 15 02 F6 | 	mov	arg02, arg03
15d00     01 14 66 F0 | 	shl	arg02, #1
15d04     0B 15 02 F1 | 	add	arg02, arg03
15d08     02 14 66 F0 | 	shl	arg02, #2
15d0c     03 00 00 FF 
15d10     04 E4 85 F1 | 	sub	objptr, ##1540
15d14     F2 14 02 F1 | 	add	arg02, objptr
15d18     0A 17 02 FB | 	rdlong	arg03, arg02
15d1c     10 4E 05 F1 | 	add	fp, #16
15d20     A7 16 62 FC | 	wrlong	arg03, fp
15d24     10 4E 85 F1 | 	sub	fp, #16
15d28     47 00 00 FF 
15d2c     7C E4 85 F1 | 	sub	objptr, ##36476
15d30     58 6E BF FD | 	call	#_pop
15d34     FF 16 02 F6 | 	mov	arg03, result3
15d38     A7 FA 61 FC | 	wrlong	result1, fp
15d3c     04 4E 05 F1 | 	add	fp, #4
15d40     A7 FC 61 FC | 	wrlong	result2, fp
15d44     04 4E 05 F1 | 	add	fp, #4
15d48     A7 16 62 FC | 	wrlong	arg03, fp
15d4c                 | ' 
15d4c                 | ' numpar=compiledline(lineptr_e).result.uresult
15d4c                 | ' 
15d4c                 | ' t1=pop()
15d4c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15d4c     08 4E 85 F1 | 	sub	fp, #8
15d50     2B 16 0E F2 | 	cmp	arg03, #43 wz
15d54     18 00 90 5D |  if_ne	jmp	#LR__1820
15d58     A7 12 02 FB | 	rdlong	arg01, fp
15d5c     A4 6F BF FD | 	call	#_convertstring
15d60     A7 FA 61 FC | 	wrlong	result1, fp
15d64     08 4E 05 F1 | 	add	fp, #8
15d68     A7 3E 68 FC | 	wrlong	#31, fp
15d6c     08 4E 85 F1 | 	sub	fp, #8
15d70                 | LR__1820
15d70                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15d70     08 4E 05 F1 | 	add	fp, #8
15d74     A7 16 02 FB | 	rdlong	arg03, fp
15d78     08 4E 85 F1 | 	sub	fp, #8
15d7c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15d80     44 00 90 AD |  if_e	jmp	#LR__1821
15d84     00 12 06 F6 | 	mov	arg01, #0
15d88     EC 4D B1 FD | 	call	#__system___getiolock_0593
15d8c     FD 12 02 F6 | 	mov	arg01, result1
15d90     40 F1 B0 FD | 	call	#__system___lockmem
15d94     A9 01 00 FF 
15d98     E2 15 06 F6 | 	mov	arg02, ##@LR__5846
15d9c     00 12 06 F6 | 	mov	arg01, #0
15da0     00 16 06 F6 | 	mov	arg03, #0
15da4     24 FE B0 FD | 	call	#__system___basic_print_string
15da8     00 12 06 F6 | 	mov	arg01, #0
15dac     0A 14 06 F6 | 	mov	arg02, #10
15db0     00 16 06 F6 | 	mov	arg03, #0
15db4     BC FD B0 FD | 	call	#__system___basic_print_char
15db8     00 12 06 F6 | 	mov	arg01, #0
15dbc     B8 4D B1 FD | 	call	#__system___getiolock_0593
15dc0     FD 00 68 FC | 	wrlong	#0, result1
15dc4     28 02 90 FD | 	jmp	#LR__1832
15dc8                 | LR__1821
15dc8     A7 16 02 FB | 	rdlong	arg03, fp
15dcc     0C 4E 05 F1 | 	add	fp, #12
15dd0     A7 16 62 FC | 	wrlong	arg03, fp
15dd4     0C 4E 85 F1 | 	sub	fp, #12
15dd8     B0 6D BF FD | 	call	#_pop
15ddc     FF 16 02 F6 | 	mov	arg03, result3
15de0     A7 FA 61 FC | 	wrlong	result1, fp
15de4     04 4E 05 F1 | 	add	fp, #4
15de8     A7 FC 61 FC | 	wrlong	result2, fp
15dec     04 4E 05 F1 | 	add	fp, #4
15df0     A7 16 62 FC | 	wrlong	arg03, fp
15df4                 | ' filename=t1.result.sresult
15df4                 | ' t1=pop()
15df4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15df4     08 4E 85 F1 | 	sub	fp, #8
15df8     2B 16 0E F2 | 	cmp	arg03, #43 wz
15dfc     18 00 90 5D |  if_ne	jmp	#LR__1822
15e00     A7 12 02 FB | 	rdlong	arg01, fp
15e04     FC 6E BF FD | 	call	#_convertstring
15e08     A7 FA 61 FC | 	wrlong	result1, fp
15e0c     08 4E 05 F1 | 	add	fp, #8
15e10     A7 3E 68 FC | 	wrlong	#31, fp
15e14     08 4E 85 F1 | 	sub	fp, #8
15e18                 | LR__1822
15e18     14 4E 05 F1 | 	add	fp, #20
15e1c     A7 00 68 FC | 	wrlong	#0, fp
15e20                 | ' mode=0
15e20                 | ' if t1.result_type=result_string then
15e20     0C 4E 85 F1 | 	sub	fp, #12
15e24     A7 14 02 FB | 	rdlong	arg02, fp
15e28     08 4E 85 F1 | 	sub	fp, #8
15e2c     1F 14 0E F2 | 	cmp	arg02, #31 wz
15e30     64 00 90 5D |  if_ne	jmp	#LR__1823
15e34                 | '   if t1.result.sresult="read" then mode=1
15e34     A7 12 02 FB | 	rdlong	arg01, fp
15e38     A9 01 00 FF 
15e3c     F4 15 06 F6 | 	mov	arg02, ##@LR__5847
15e40     B8 F0 B0 FD | 	call	#__system___string_cmp
15e44     00 FA 0D F2 | 	cmp	result1, #0 wz
15e48     14 4E 05 A1 |  if_e	add	fp, #20
15e4c     A7 02 68 AC |  if_e	wrlong	#1, fp
15e50     14 4E 85 A1 |  if_e	sub	fp, #20
15e54                 | '   if t1.result.sresult="write" then mode=2
15e54     A7 12 02 FB | 	rdlong	arg01, fp
15e58     A9 01 00 FF 
15e5c     F9 15 06 F6 | 	mov	arg02, ##@LR__5848
15e60     98 F0 B0 FD | 	call	#__system___string_cmp
15e64     00 FA 0D F2 | 	cmp	result1, #0 wz
15e68     14 4E 05 A1 |  if_e	add	fp, #20
15e6c     A7 04 68 AC |  if_e	wrlong	#2, fp
15e70     14 4E 85 A1 |  if_e	sub	fp, #20
15e74                 | '   if t1.result.sresult="append" then mode=4
15e74     A7 12 02 FB | 	rdlong	arg01, fp
15e78     A9 01 00 FF 
15e7c     FF 15 06 F6 | 	mov	arg02, ##@LR__5849
15e80     78 F0 B0 FD | 	call	#__system___string_cmp
15e84     00 FA 0D F2 | 	cmp	result1, #0 wz
15e88     14 4E 05 A1 |  if_e	add	fp, #20
15e8c     A7 08 68 AC |  if_e	wrlong	#4, fp
15e90     14 4E 85 A1 |  if_e	sub	fp, #20
15e94     14 00 90 FD | 	jmp	#LR__1824
15e98                 | LR__1823
15e98     A7 12 02 F6 | 	mov	arg01, fp
15e9c     D0 6E BF FD | 	call	#_converttoint
15ea0     14 4E 05 F1 | 	add	fp, #20
15ea4     A7 FA 61 FC | 	wrlong	result1, fp
15ea8     14 4E 85 F1 | 	sub	fp, #20
15eac                 | LR__1824
15eac     DC 6C BF FD | 	call	#_pop
15eb0     FF 16 02 F6 | 	mov	arg03, result3
15eb4     A7 FA 61 FC | 	wrlong	result1, fp
15eb8     04 4E 05 F1 | 	add	fp, #4
15ebc     A7 FC 61 FC | 	wrlong	result2, fp
15ec0     04 4E 05 F1 | 	add	fp, #4
15ec4     A7 16 62 FC | 	wrlong	arg03, fp
15ec8                 | ' t1=pop()
15ec8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15ec8     08 4E 85 F1 | 	sub	fp, #8
15ecc     2C 16 0E F2 | 	cmp	arg03, #44 wz
15ed0     44 00 90 AD |  if_e	jmp	#LR__1825
15ed4     00 12 06 F6 | 	mov	arg01, #0
15ed8     9C 4C B1 FD | 	call	#__system___getiolock_0593
15edc     FD 12 02 F6 | 	mov	arg01, result1
15ee0     F0 EF B0 FD | 	call	#__system___lockmem
15ee4     AA 01 00 FF 
15ee8     06 14 06 F6 | 	mov	arg02, ##@LR__5850
15eec     00 12 06 F6 | 	mov	arg01, #0
15ef0     00 16 06 F6 | 	mov	arg03, #0
15ef4     D4 FC B0 FD | 	call	#__system___basic_print_string
15ef8     00 12 06 F6 | 	mov	arg01, #0
15efc     0A 14 06 F6 | 	mov	arg02, #10
15f00     00 16 06 F6 | 	mov	arg03, #0
15f04     6C FC B0 FD | 	call	#__system___basic_print_char
15f08     00 12 06 F6 | 	mov	arg01, #0
15f0c     68 4C B1 FD | 	call	#__system___getiolock_0593
15f10     FD 00 68 FC | 	wrlong	#0, result1
15f14     D8 00 90 FD | 	jmp	#LR__1832
15f18                 | LR__1825
15f18     A7 26 02 FB | 	rdlong	local01, fp
15f1c     18 4E 05 F1 | 	add	fp, #24
15f20     A7 26 62 FC | 	wrlong	local01, fp
15f24                 | ' channel  = t1.result.iresult
15f24                 | ' select case  mode
15f24     04 4E 85 F1 | 	sub	fp, #4
15f28     A7 28 02 FB | 	rdlong	local02, fp
15f2c     14 4E 85 F1 | 	sub	fp, #20
15f30     01 28 86 F1 | 	sub	local02, #1
15f34     04 28 26 F3 | 	fle	local02, #4
15f38     30 28 62 FD | 	jmprel	local02
15f3c                 | LR__1826
15f3c     10 00 90 FD | 	jmp	#LR__1827
15f40     2C 00 90 FD | 	jmp	#LR__1828
15f44     68 00 90 FD | 	jmp	#LR__1830
15f48     44 00 90 FD | 	jmp	#LR__1829
15f4c     60 00 90 FD | 	jmp	#LR__1830
15f50                 | LR__1827
15f50     18 4E 05 F1 | 	add	fp, #24
15f54     A7 12 02 FB | 	rdlong	arg01, fp
15f58     0C 4E 85 F1 | 	sub	fp, #12
15f5c     A7 14 02 FB | 	rdlong	arg02, fp
15f60     0C 4E 85 F1 | 	sub	fp, #12
15f64     00 16 06 F6 | 	mov	arg03, #0
15f68     6C FB B0 FD | 	call	#__system___basic_open_string
15f6c     80 00 90 FD | 	jmp	#LR__1831
15f70                 | LR__1828
15f70     18 4E 05 F1 | 	add	fp, #24
15f74     A7 12 02 FB | 	rdlong	arg01, fp
15f78     0C 4E 85 F1 | 	sub	fp, #12
15f7c     A7 14 02 FB | 	rdlong	arg02, fp
15f80     0C 4E 85 F1 | 	sub	fp, #12
15f84     0D 16 06 F6 | 	mov	arg03, #13
15f88     4C FB B0 FD | 	call	#__system___basic_open_string
15f8c     60 00 90 FD | 	jmp	#LR__1831
15f90                 | LR__1829
15f90     18 4E 05 F1 | 	add	fp, #24
15f94     A7 12 02 FB | 	rdlong	arg01, fp
15f98     0C 4E 85 F1 | 	sub	fp, #12
15f9c     A7 14 02 FB | 	rdlong	arg02, fp
15fa0     0C 4E 85 F1 | 	sub	fp, #12
15fa4     25 16 06 F6 | 	mov	arg03, #37
15fa8     2C FB B0 FD | 	call	#__system___basic_open_string
15fac     40 00 90 FD | 	jmp	#LR__1831
15fb0                 | LR__1830
15fb0     00 12 06 F6 | 	mov	arg01, #0
15fb4     C0 4B B1 FD | 	call	#__system___getiolock_0593
15fb8     FD 12 02 F6 | 	mov	arg01, result1
15fbc     14 EF B0 FD | 	call	#__system___lockmem
15fc0     AA 01 00 FF 
15fc4     18 14 06 F6 | 	mov	arg02, ##@LR__5851
15fc8     00 12 06 F6 | 	mov	arg01, #0
15fcc     00 16 06 F6 | 	mov	arg03, #0
15fd0     F8 FB B0 FD | 	call	#__system___basic_print_string
15fd4     00 12 06 F6 | 	mov	arg01, #0
15fd8     0A 14 06 F6 | 	mov	arg02, #10
15fdc     00 16 06 F6 | 	mov	arg03, #0
15fe0     90 FB B0 FD | 	call	#__system___basic_print_char
15fe4     00 12 06 F6 | 	mov	arg01, #0
15fe8     8C 4B B1 FD | 	call	#__system___getiolock_0593
15fec     FD 00 68 FC | 	wrlong	#0, result1
15ff0                 | LR__1831
15ff0                 | LR__1832
15ff0     A7 F0 03 F6 | 	mov	ptra, fp
15ff4     B2 00 A0 FD | 	call	#popregs_
15ff8                 | _do_open_ret
15ff8     2D 00 64 FD | 	ret
15ffc                 | 
15ffc                 | ' 
15ffc                 | ' '-------------------- paper
15ffc                 | ' 
15ffc                 | ' sub do_paper
15ffc                 | _do_paper
15ffc     03 4A 05 F6 | 	mov	COUNT_, #3
16000     A8 00 A0 FD | 	call	#pushregs_
16004     84 6B BF FD | 	call	#_pop
16008     FD 26 02 F6 | 	mov	local01, result1
1600c     FE 28 02 F6 | 	mov	local02, result2
16010     FF 2A 02 F6 | 	mov	local03, result3
16014                 | ' t1=pop() 
16014                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16014     1E 2A 0E F2 | 	cmp	local03, #30 wz
16018     10 00 90 5D |  if_ne	jmp	#LR__1840
1601c     13 13 02 F6 | 	mov	arg01, local01
16020     00 14 06 F6 | 	mov	arg02, #0
16024     F0 21 B1 FD | 	call	#__system___float_tointeger
16028     FD 26 02 F6 | 	mov	local01, result1
1602c                 | LR__1840
1602c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1602c     1F 2A 0E F2 | 	cmp	local03, #31 wz
16030     18 00 90 5D |  if_ne	jmp	#LR__1841
16034     13 13 02 F6 | 	mov	arg01, local01
16038     20 25 B1 FD | 	call	#__system____builtin_atof
1603c     FD 12 02 F6 | 	mov	arg01, result1
16040     00 14 06 F6 | 	mov	arg02, #0
16044     D0 21 B1 FD | 	call	#__system___float_tointeger
16048     FD 26 02 F6 | 	mov	local01, result1
1604c                 | LR__1841
1604c     37 00 00 FF 
16050     38 E4 05 F1 | 	add	objptr, ##28216
16054     F2 26 62 FC | 	wrlong	local01, objptr
16058     04 E4 05 F1 | 	add	objptr, #4
1605c     F2 12 02 FB | 	rdlong	arg01, objptr
16060                 | ' 
16060                 | ' write_color:=ff
16060     36 00 00 FF 
16064     FB E5 85 F1 | 	sub	objptr, ##28155
16068     F2 12 62 FC | 	wrlong	arg01, objptr
1606c                 | ' write_background:=bb
1606c     04 E4 05 F1 | 	add	objptr, #4
16070     F2 26 62 FC | 	wrlong	local01, objptr
16074     45 E4 85 F1 | 	sub	objptr, #69
16078     A7 F0 03 F6 | 	mov	ptra, fp
1607c     B2 00 A0 FD | 	call	#popregs_
16080                 | _do_paper_ret
16080     2D 00 64 FD | 	ret
16084                 | 
16084                 | ' 
16084                 | ' '-------------------- peek
16084                 | ' 
16084                 | ' sub do_peek
16084                 | _do_peek
16084     00 4A 05 F6 | 	mov	COUNT_, #0
16088     A8 00 A0 FD | 	call	#pushregs_
1608c     14 F0 07 F1 | 	add	ptra, #20
16090     F8 6A BF FD | 	call	#_pop
16094     A7 FA 61 FC | 	wrlong	result1, fp
16098     04 4E 05 F1 | 	add	fp, #4
1609c     A7 FC 61 FC | 	wrlong	result2, fp
160a0     04 4E 05 F1 | 	add	fp, #4
160a4     A7 FE 61 FC | 	wrlong	result3, fp
160a8     08 4E 85 F1 | 	sub	fp, #8
160ac     A7 12 02 F6 | 	mov	arg01, fp
160b0     BC 6C BF FD | 	call	#_converttoint
160b4     0C 4E 05 F1 | 	add	fp, #12
160b8     A7 FA 61 FC | 	wrlong	result1, fp
160bc                 | ' 
160bc                 | ' t1=pop()
160bc                 | ' a=converttoint(t1)
160bc                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
160bc     0C 4E 85 F1 | 	sub	fp, #12
160c0     00 04 00 FF 
160c4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
160c8     1C 00 90 3D |  if_ae	jmp	#LR__1850
160cc     0C 4E 05 F1 | 	add	fp, #12
160d0     A7 12 02 FB | 	rdlong	arg01, fp
160d4     09 FB C1 FA | 	rdbyte	result1, arg01
160d8     04 4E 05 F1 | 	add	fp, #4
160dc     A7 FA 61 FC | 	wrlong	result1, fp
160e0     10 4E 85 F1 | 	sub	fp, #16
160e4     20 00 90 FD | 	jmp	#LR__1851
160e8                 | LR__1850
160e8     0C 4E 05 F1 | 	add	fp, #12
160ec     A7 12 02 FB | 	rdlong	arg01, fp
160f0     0C 4E 85 F1 | 	sub	fp, #12
160f4     AC B6 B0 FD | 	call	#_pspeek
160f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
160fc     10 4E 05 F1 | 	add	fp, #16
16100     A7 FA 61 FC | 	wrlong	result1, fp
16104     10 4E 85 F1 | 	sub	fp, #16
16108                 | LR__1851
16108     08 4E 05 F1 | 	add	fp, #8
1610c     A7 3A 68 FC | 	wrlong	#29, fp
16110     08 4E 05 F1 | 	add	fp, #8
16114     A7 12 02 FB | 	rdlong	arg01, fp
16118     10 4E 85 F1 | 	sub	fp, #16
1611c     A7 12 62 FC | 	wrlong	arg01, fp
16120     A7 12 02 F6 | 	mov	arg01, fp
16124     FC 6A BF FD | 	call	#_push
16128     A7 F0 03 F6 | 	mov	ptra, fp
1612c     B2 00 A0 FD | 	call	#popregs_
16130                 | _do_peek_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | ' 
16134                 | ' '-------------------- pinfloat
16134                 | ' 
16134                 | ' sub do_pinfloat
16134                 | _do_pinfloat
16134     00 4A 05 F6 | 	mov	COUNT_, #0
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     0C F0 07 F1 | 	add	ptra, #12
16140     48 6A BF FD | 	call	#_pop
16144     A7 FA 61 FC | 	wrlong	result1, fp
16148     04 4E 05 F1 | 	add	fp, #4
1614c     A7 FC 61 FC | 	wrlong	result2, fp
16150     04 4E 05 F1 | 	add	fp, #4
16154     A7 FE 61 FC | 	wrlong	result3, fp
16158     08 4E 85 F1 | 	sub	fp, #8
1615c     A7 12 02 F6 | 	mov	arg01, fp
16160     0C 6C BF FD | 	call	#_converttoint
16164     50 FA 61 FD | 	fltl	result1
16168     A7 F0 03 F6 | 	mov	ptra, fp
1616c     B2 00 A0 FD | 	call	#popregs_
16170                 | _do_pinfloat_ret
16170     2D 00 64 FD | 	ret
16174                 | 
16174                 | ' 
16174                 | ' '-------------------- pinhi
16174                 | ' 
16174                 | ' sub do_pinhi
16174                 | _do_pinhi
16174     00 4A 05 F6 | 	mov	COUNT_, #0
16178     A8 00 A0 FD | 	call	#pushregs_
1617c     0C F0 07 F1 | 	add	ptra, #12
16180     08 6A BF FD | 	call	#_pop
16184     A7 FA 61 FC | 	wrlong	result1, fp
16188     04 4E 05 F1 | 	add	fp, #4
1618c     A7 FC 61 FC | 	wrlong	result2, fp
16190     04 4E 05 F1 | 	add	fp, #4
16194     A7 FE 61 FC | 	wrlong	result3, fp
16198     08 4E 85 F1 | 	sub	fp, #8
1619c     A7 12 02 F6 | 	mov	arg01, fp
161a0     CC 6B BF FD | 	call	#_converttoint
161a4     59 FA 61 FD | 	drvh	result1
161a8     A7 F0 03 F6 | 	mov	ptra, fp
161ac     B2 00 A0 FD | 	call	#popregs_
161b0                 | _do_pinhi_ret
161b0     2D 00 64 FD | 	ret
161b4                 | 
161b4                 | ' 
161b4                 | ' '-------------------- pinlo
161b4                 | ' 
161b4                 | ' sub do_pinlo
161b4                 | _do_pinlo
161b4     00 4A 05 F6 | 	mov	COUNT_, #0
161b8     A8 00 A0 FD | 	call	#pushregs_
161bc     0C F0 07 F1 | 	add	ptra, #12
161c0     C8 69 BF FD | 	call	#_pop
161c4     A7 FA 61 FC | 	wrlong	result1, fp
161c8     04 4E 05 F1 | 	add	fp, #4
161cc     A7 FC 61 FC | 	wrlong	result2, fp
161d0     04 4E 05 F1 | 	add	fp, #4
161d4     A7 FE 61 FC | 	wrlong	result3, fp
161d8     08 4E 85 F1 | 	sub	fp, #8
161dc     A7 12 02 F6 | 	mov	arg01, fp
161e0     8C 6B BF FD | 	call	#_converttoint
161e4     58 FA 61 FD | 	drvl	result1
161e8     A7 F0 03 F6 | 	mov	ptra, fp
161ec     B2 00 A0 FD | 	call	#popregs_
161f0                 | _do_pinlo_ret
161f0     2D 00 64 FD | 	ret
161f4                 | 
161f4                 | ' 
161f4                 | ' '-------------------- pinread
161f4                 | ' 
161f4                 | ' sub do_pinread
161f4                 | _do_pinread
161f4     00 4A 05 F6 | 	mov	COUNT_, #0
161f8     A8 00 A0 FD | 	call	#pushregs_
161fc     0C F0 07 F1 | 	add	ptra, #12
16200     88 69 BF FD | 	call	#_pop
16204     A7 FA 61 FC | 	wrlong	result1, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 FC 61 FC | 	wrlong	result2, fp
16210     04 4E 05 F1 | 	add	fp, #4
16214     A7 FE 61 FC | 	wrlong	result3, fp
16218     08 4E 85 F1 | 	sub	fp, #8
1621c     A7 12 02 F6 | 	mov	arg01, fp
16220     4C 6B BF FD | 	call	#_converttoint
16224     FD 12 02 F6 | 	mov	arg01, result1
16228     20 12 CE F7 | 	test	arg01, #32 wz
1622c     FF FB 01 56 |  if_ne	mov	result1, inb
16230     FE FB 01 A6 |  if_e	mov	result1, ina
16234     09 FB 41 F0 | 	shr	result1, arg01
16238     06 12 46 F0 | 	shr	arg01, #6
1623c     09 FB 41 F7 | 	zerox	result1, arg01
16240     52 00 00 FF 
16244     4C E4 05 F1 | 	add	objptr, ##42060
16248     F2 FA 61 FC | 	wrlong	result1, objptr
1624c     52 00 00 FF 
16250     4C E4 85 F1 | 	sub	objptr, ##42060
16254     08 4E 05 F1 | 	add	fp, #8
16258     A7 3A 68 FC | 	wrlong	#29, fp
1625c     08 4E 85 F1 | 	sub	fp, #8
16260     A7 08 68 FC | 	wrlong	#4, fp
16264     A7 12 02 F6 | 	mov	arg01, fp
16268     B8 69 BF FD | 	call	#_push
1626c     A7 F0 03 F6 | 	mov	ptra, fp
16270     B2 00 A0 FD | 	call	#popregs_
16274                 | _do_pinread_ret
16274     2D 00 64 FD | 	ret
16278                 | 
16278                 | ' 
16278                 | ' '-------------------- pinstart
16278                 | ' 
16278                 | ' sub do_pinstart
16278                 | _do_pinstart
16278     03 4A 05 F6 | 	mov	COUNT_, #3
1627c     A8 00 A0 FD | 	call	#pushregs_
16280     30 F0 07 F1 | 	add	ptra, #48
16284     04 69 BF FD | 	call	#_pop
16288     FD 16 02 F6 | 	mov	arg03, result1
1628c     FE 14 02 F6 | 	mov	arg02, result2
16290     FF 18 02 F6 | 	mov	arg04, result3
16294     A7 16 62 FC | 	wrlong	arg03, fp
16298     04 4E 05 F1 | 	add	fp, #4
1629c     A7 14 62 FC | 	wrlong	arg02, fp
162a0     04 4E 05 F1 | 	add	fp, #4
162a4     A7 18 62 FC | 	wrlong	arg04, fp
162a8     08 4E 85 F1 | 	sub	fp, #8
162ac     DC 68 BF FD | 	call	#_pop
162b0     FD 16 02 F6 | 	mov	arg03, result1
162b4     FE 14 02 F6 | 	mov	arg02, result2
162b8     FF 18 02 F6 | 	mov	arg04, result3
162bc     0C 4E 05 F1 | 	add	fp, #12
162c0     A7 16 62 FC | 	wrlong	arg03, fp
162c4     04 4E 05 F1 | 	add	fp, #4
162c8     A7 14 62 FC | 	wrlong	arg02, fp
162cc     04 4E 05 F1 | 	add	fp, #4
162d0     A7 18 62 FC | 	wrlong	arg04, fp
162d4     14 4E 85 F1 | 	sub	fp, #20
162d8     B0 68 BF FD | 	call	#_pop
162dc     FD 16 02 F6 | 	mov	arg03, result1
162e0     FE 14 02 F6 | 	mov	arg02, result2
162e4     FF 18 02 F6 | 	mov	arg04, result3
162e8     18 4E 05 F1 | 	add	fp, #24
162ec     A7 16 62 FC | 	wrlong	arg03, fp
162f0     04 4E 05 F1 | 	add	fp, #4
162f4     A7 14 62 FC | 	wrlong	arg02, fp
162f8     04 4E 05 F1 | 	add	fp, #4
162fc     A7 18 62 FC | 	wrlong	arg04, fp
16300     20 4E 85 F1 | 	sub	fp, #32
16304     84 68 BF FD | 	call	#_pop
16308     FF 16 02 F6 | 	mov	arg03, result3
1630c     24 4E 05 F1 | 	add	fp, #36
16310     A7 FA 61 FC | 	wrlong	result1, fp
16314     04 4E 05 F1 | 	add	fp, #4
16318     A7 FC 61 FC | 	wrlong	result2, fp
1631c     04 4E 05 F1 | 	add	fp, #4
16320     A7 16 62 FC | 	wrlong	arg03, fp
16324     08 4E 85 F1 | 	sub	fp, #8
16328     A7 12 02 F6 | 	mov	arg01, fp
1632c     24 4E 85 F1 | 	sub	fp, #36
16330     3C 6A BF FD | 	call	#_converttoint
16334     FD 26 02 F6 | 	mov	local01, result1
16338     18 4E 05 F1 | 	add	fp, #24
1633c     A7 12 02 F6 | 	mov	arg01, fp
16340     18 4E 85 F1 | 	sub	fp, #24
16344     28 6A BF FD | 	call	#_converttoint
16348     FD 28 02 F6 | 	mov	local02, result1
1634c     0C 4E 05 F1 | 	add	fp, #12
16350     A7 12 02 F6 | 	mov	arg01, fp
16354     0C 4E 85 F1 | 	sub	fp, #12
16358     14 6A BF FD | 	call	#_converttoint
1635c     FD 2A 02 F6 | 	mov	local03, result1
16360     A7 12 02 F6 | 	mov	arg01, fp
16364     08 6A BF FD | 	call	#_converttoint
16368     40 26 62 FD | 	dirl	local01
1636c     13 29 02 FC | 	wrpin	local02, local01
16370     13 2B 12 FC | 	wxpin	local03, local01
16374     13 FB 21 FC | 	wypin	result1, local01
16378     41 26 62 FD | 	dirh	local01
1637c     A7 F0 03 F6 | 	mov	ptra, fp
16380     B2 00 A0 FD | 	call	#popregs_
16384                 | _do_pinstart_ret
16384     2D 00 64 FD | 	ret
16388                 | 
16388                 | ' 
16388                 | ' '-------------------- pintoggle
16388                 | ' 
16388                 | ' sub do_pintoggle
16388                 | _do_pintoggle
16388     00 4A 05 F6 | 	mov	COUNT_, #0
1638c     A8 00 A0 FD | 	call	#pushregs_
16390     0C F0 07 F1 | 	add	ptra, #12
16394     F4 67 BF FD | 	call	#_pop
16398     A7 FA 61 FC | 	wrlong	result1, fp
1639c     04 4E 05 F1 | 	add	fp, #4
163a0     A7 FC 61 FC | 	wrlong	result2, fp
163a4     04 4E 05 F1 | 	add	fp, #4
163a8     A7 FE 61 FC | 	wrlong	result3, fp
163ac     08 4E 85 F1 | 	sub	fp, #8
163b0     A7 12 02 F6 | 	mov	arg01, fp
163b4     B8 69 BF FD | 	call	#_converttoint
163b8     5F FA 61 FD | 	drvnot	result1
163bc     A7 F0 03 F6 | 	mov	ptra, fp
163c0     B2 00 A0 FD | 	call	#popregs_
163c4                 | _do_pintoggle_ret
163c4     2D 00 64 FD | 	ret
163c8                 | 
163c8                 | ' 
163c8                 | ' '-------------------- pinwrite
163c8                 | ' 
163c8                 | ' sub do_pinwrite
163c8                 | _do_pinwrite
163c8     01 4A 05 F6 | 	mov	COUNT_, #1
163cc     A8 00 A0 FD | 	call	#pushregs_
163d0     18 F0 07 F1 | 	add	ptra, #24
163d4     B4 67 BF FD | 	call	#_pop
163d8     FD 14 02 F6 | 	mov	arg02, result1
163dc     FE 12 02 F6 | 	mov	arg01, result2
163e0     FF 26 02 F6 | 	mov	local01, result3
163e4     A7 14 62 FC | 	wrlong	arg02, fp
163e8     04 4E 05 F1 | 	add	fp, #4
163ec     A7 12 62 FC | 	wrlong	arg01, fp
163f0     04 4E 05 F1 | 	add	fp, #4
163f4     A7 26 62 FC | 	wrlong	local01, fp
163f8     08 4E 85 F1 | 	sub	fp, #8
163fc     8C 67 BF FD | 	call	#_pop
16400     FF 26 02 F6 | 	mov	local01, result3
16404     0C 4E 05 F1 | 	add	fp, #12
16408     A7 FA 61 FC | 	wrlong	result1, fp
1640c     04 4E 05 F1 | 	add	fp, #4
16410     A7 FC 61 FC | 	wrlong	result2, fp
16414     04 4E 05 F1 | 	add	fp, #4
16418     A7 26 62 FC | 	wrlong	local01, fp
1641c     08 4E 85 F1 | 	sub	fp, #8
16420     A7 12 02 F6 | 	mov	arg01, fp
16424     0C 4E 85 F1 | 	sub	fp, #12
16428     44 69 BF FD | 	call	#_converttoint
1642c     FD 26 02 F6 | 	mov	local01, result1
16430     A7 12 02 F6 | 	mov	arg01, fp
16434     38 69 BF FD | 	call	#_converttoint
16438     FD 14 02 F6 | 	mov	arg02, result1
1643c     13 13 02 F6 | 	mov	arg01, local01
16440     44 EC B0 FD | 	call	#__system___pinwrite
16444     A7 F0 03 F6 | 	mov	ptra, fp
16448     B2 00 A0 FD | 	call	#popregs_
1644c                 | _do_pinwrite_ret
1644c     2D 00 64 FD | 	ret
16450                 | 
16450                 | ' 
16450                 | ' '-------------------- play
16450                 | ' 
16450                 | ' sub do_play
16450                 | _do_play
16450     08 4A 05 F6 | 	mov	COUNT_, #8
16454     A8 00 A0 FD | 	call	#pushregs_
16458     7C F0 07 F1 | 	add	ptra, #124
1645c     68 4E 05 F1 | 	add	fp, #104
16460     77 CC A1 FF 
16464     A7 7C 6B FC | 	wrlong	##1134096318, fp
16468                 | ' speed_coeff=305.873
16468                 | ' 
16468                 | ' for i=0 to 8 : params(i)=-2.0 : next i
16468     64 4E 85 F1 | 	sub	fp, #100
1646c     A7 00 68 FC | 	wrlong	#0, fp
16470     97 18 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
16474                 | LR__1860
16474     A7 16 02 FB | 	rdlong	arg03, fp
16478     02 16 66 F0 | 	shl	arg03, #2
1647c     34 4E 05 F1 | 	add	fp, #52
16480     A7 16 02 F1 | 	add	arg03, fp
16484     00 00 E0 FF 
16488     0B 01 68 FC | 	wrlong	##-1073741824, arg03
1648c     34 4E 85 F1 | 	sub	fp, #52
16490     A7 26 02 FB | 	rdlong	local01, fp
16494     01 26 06 F1 | 	add	local01, #1
16498     A7 26 62 FC | 	wrlong	local01, fp
1649c     09 26 56 F2 | 	cmps	local01, #9 wc
164a0     D0 FF 9F CD |  if_b	jmp	#LR__1860
164a4                 | LR__1861
164a4     04 4E 85 F1 | 	sub	fp, #4
164a8     4A 00 00 FF 
164ac     80 E4 05 F1 | 	add	objptr, ##38016
164b0     F2 28 02 FB | 	rdlong	local02, objptr
164b4     14 2B 02 F6 | 	mov	local03, local02
164b8     01 2A 66 F0 | 	shl	local03, #1
164bc     14 2B 02 F1 | 	add	local03, local02
164c0     02 2A 66 F0 | 	shl	local03, #2
164c4     03 00 00 FF 
164c8     04 E4 85 F1 | 	sub	objptr, ##1540
164cc     F2 2A 02 F1 | 	add	local03, objptr
164d0     15 2D 02 FB | 	rdlong	local04, local03
164d4     A7 2C 62 FC | 	wrlong	local04, fp
164d8                 | ' numpar=compiledline(lineptr_e).result.uresult
164d8                 | ' for i=numpar to 1 step -1 
164d8     04 4E 05 F1 | 	add	fp, #4
164dc     A7 2C 62 FC | 	wrlong	local04, fp
164e0     04 4E 85 F1 | 	sub	fp, #4
164e4     47 00 00 FF 
164e8     7C E4 85 F1 | 	sub	objptr, ##36476
164ec                 | LR__1862
164ec     9C 66 BF FD | 	call	#_pop
164f0     5C 4E 05 F1 | 	add	fp, #92
164f4     A7 FA 61 FC | 	wrlong	result1, fp
164f8     04 4E 05 F1 | 	add	fp, #4
164fc     A7 FC 61 FC | 	wrlong	result2, fp
16500     04 4E 05 F1 | 	add	fp, #4
16504     A7 FE 61 FC | 	wrlong	result3, fp
16508     60 4E 85 F1 | 	sub	fp, #96
1650c     A7 2A 02 FB | 	rdlong	local03, fp
16510     01 2A 86 F1 | 	sub	local03, #1
16514     02 2A 66 F0 | 	shl	local03, #2
16518     34 4E 05 F1 | 	add	fp, #52
1651c     A7 2A 02 F1 | 	add	local03, fp
16520     24 4E 05 F1 | 	add	fp, #36
16524     A7 2E 02 F6 | 	mov	local05, fp
16528     17 13 02 F6 | 	mov	arg01, local05
1652c     5C 4E 85 F1 | 	sub	fp, #92
16530     F8 68 BF FD | 	call	#_converttofloat
16534     15 FB 61 FC | 	wrlong	result1, local03
16538     04 4E 05 F1 | 	add	fp, #4
1653c     A7 26 02 FB | 	rdlong	local01, fp
16540     01 26 86 F1 | 	sub	local01, #1
16544     A7 26 62 FC | 	wrlong	local01, fp
16548     04 4E 85 F1 | 	sub	fp, #4
1654c     01 26 56 F2 | 	cmps	local01, #1 wc
16550     98 FF 9F 3D |  if_ae	jmp	#LR__1862
16554                 | ' 
16554                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
16554     38 4E 05 F1 | 	add	fp, #56
16558     A7 12 02 FB | 	rdlong	arg01, fp
1655c     38 4E 85 F1 | 	sub	fp, #56
16560     00 14 06 F6 | 	mov	arg02, #0
16564     01 16 06 F6 | 	mov	arg03, #1
16568     18 1C B1 FD | 	call	#__system___float_cmp
1656c     00 FA 55 F2 | 	cmps	result1, #0 wc
16570     0C 4E 05 C1 |  if_b	add	fp, #12
16574     A7 00 68 CC |  if_b	wrlong	#0, fp
16578     0C 4E 85 C1 |  if_b	sub	fp, #12
1657c     2C 00 90 CD |  if_b	jmp	#LR__1863
16580     38 4E 05 F1 | 	add	fp, #56
16584     A7 12 02 FB | 	rdlong	arg01, fp
16588     38 4E 85 F1 | 	sub	fp, #56
1658c     01 14 06 F6 | 	mov	arg02, #1
16590     84 1C B1 FD | 	call	#__system___float_tointeger
16594     FD 26 52 F6 | 	abs	local01, result1 wc
16598     07 26 06 F5 | 	and	local01, #7
1659c     13 27 82 F6 | 	negc	local01, local01
165a0     0C 4E 05 F1 | 	add	fp, #12
165a4     A7 26 62 FC | 	wrlong	local01, fp
165a8     0C 4E 85 F1 | 	sub	fp, #12
165ac                 | LR__1863
165ac                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
165ac     3C 4E 05 F1 | 	add	fp, #60
165b0     A7 12 02 FB | 	rdlong	arg01, fp
165b4     3C 4E 85 F1 | 	sub	fp, #60
165b8     00 14 06 F6 | 	mov	arg02, #0
165bc     01 16 06 F6 | 	mov	arg03, #1
165c0     C0 1B B1 FD | 	call	#__system___float_cmp
165c4     00 FA 55 F2 | 	cmps	result1, #0 wc
165c8     40 00 90 3D |  if_ae	jmp	#LR__1864
165cc     0C 4E 05 F1 | 	add	fp, #12
165d0     A7 28 02 FB | 	rdlong	local02, fp
165d4     14 2B 02 F6 | 	mov	local03, local02
165d8     01 2A 66 F0 | 	shl	local03, #1
165dc     14 2B 02 F1 | 	add	local03, local02
165e0     03 2A 66 F0 | 	shl	local03, #3
165e4     14 00 00 FF 
165e8     38 E5 05 F1 | 	add	objptr, ##10552
165ec     F2 2A 02 F1 | 	add	local03, objptr
165f0     15 31 02 FB | 	rdlong	local06, local03
165f4     60 4E 05 F1 | 	add	fp, #96
165f8     A7 30 62 FC | 	wrlong	local06, fp
165fc     6C 4E 85 F1 | 	sub	fp, #108
16600     14 00 00 FF 
16604     38 E5 85 F1 | 	sub	objptr, ##10552
16608     44 00 90 FD | 	jmp	#LR__1865
1660c                 | LR__1864
1660c     3C 4E 05 F1 | 	add	fp, #60
16610     A7 2C 02 FB | 	rdlong	local04, fp
16614     30 4E 05 F1 | 	add	fp, #48
16618     A7 2C 62 FC | 	wrlong	local04, fp
1661c     60 4E 85 F1 | 	sub	fp, #96
16620     A7 28 02 FB | 	rdlong	local02, fp
16624     14 2B 02 F6 | 	mov	local03, local02
16628     01 2A 66 F0 | 	shl	local03, #1
1662c     14 2B 02 F1 | 	add	local03, local02
16630     03 2A 66 F0 | 	shl	local03, #3
16634     14 00 00 FF 
16638     38 E5 05 F1 | 	add	objptr, ##10552
1663c     F2 2A 02 F1 | 	add	local03, objptr
16640     0C 4E 85 F1 | 	sub	fp, #12
16644     15 2D 62 FC | 	wrlong	local04, local03
16648     14 00 00 FF 
1664c     38 E5 85 F1 | 	sub	objptr, ##10552
16650                 | LR__1865
16650                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
16650     40 4E 05 F1 | 	add	fp, #64
16654     A7 12 02 FB | 	rdlong	arg01, fp
16658     40 4E 85 F1 | 	sub	fp, #64
1665c     00 14 06 F6 | 	mov	arg02, #0
16660     01 16 06 F6 | 	mov	arg03, #1
16664     1C 1B B1 FD | 	call	#__system___float_cmp
16668     00 FA 55 F2 | 	cmps	result1, #0 wc
1666c     24 00 90 CD |  if_b	jmp	#LR__1866
16670     40 4E 05 F1 | 	add	fp, #64
16674     A7 12 02 FB | 	rdlong	arg01, fp
16678     40 4E 85 F1 | 	sub	fp, #64
1667c     20 0E 23 FF 
16680     00 14 06 F6 | 	mov	arg02, ##1176256512
16684     01 16 66 F6 | 	neg	arg03, #1
16688     F8 1A B1 FD | 	call	#__system___float_cmp
1668c     01 FA 55 F2 | 	cmps	result1, #1 wc
16690     48 00 90 CD |  if_b	jmp	#LR__1867
16694                 | LR__1866
16694     0C 4E 05 F1 | 	add	fp, #12
16698     A7 2A 02 FB | 	rdlong	local03, fp
1669c     15 33 02 F6 | 	mov	local07, local03
166a0     01 32 66 F0 | 	shl	local07, #1
166a4     15 33 02 F1 | 	add	local07, local03
166a8     03 32 66 F0 | 	shl	local07, #3
166ac     14 00 00 FF 
166b0     38 E5 05 F1 | 	add	objptr, ##10552
166b4     F2 32 02 F1 | 	add	local07, objptr
166b8     06 32 06 F1 | 	add	local07, #6
166bc     19 2F E2 FA | 	rdword	local05, local07
166c0     17 2D 32 F9 | 	getword	local04, local05, #0
166c4     1C 4E 05 F1 | 	add	fp, #28
166c8     A7 2C 62 FC | 	wrlong	local04, fp
166cc     28 4E 85 F1 | 	sub	fp, #40
166d0     14 00 00 FF 
166d4     38 E5 85 F1 | 	sub	objptr, ##10552
166d8     54 00 90 FD | 	jmp	#LR__1868
166dc                 | LR__1867
166dc     40 4E 05 F1 | 	add	fp, #64
166e0     A7 12 02 FB | 	rdlong	arg01, fp
166e4     40 4E 85 F1 | 	sub	fp, #64
166e8     01 14 06 F6 | 	mov	arg02, #1
166ec     28 1B B1 FD | 	call	#__system___float_tointeger
166f0     28 4E 05 F1 | 	add	fp, #40
166f4     A7 FA 61 FC | 	wrlong	result1, fp
166f8     1C 4E 85 F1 | 	sub	fp, #28
166fc     A7 28 02 FB | 	rdlong	local02, fp
16700     14 2B 02 F6 | 	mov	local03, local02
16704     01 2A 66 F0 | 	shl	local03, #1
16708     14 2B 02 F1 | 	add	local03, local02
1670c     03 2A 66 F0 | 	shl	local03, #3
16710     14 00 00 FF 
16714     38 E5 05 F1 | 	add	objptr, ##10552
16718     F2 2A 02 F1 | 	add	local03, objptr
1671c     0C 4E 85 F1 | 	sub	fp, #12
16720     06 2A 06 F1 | 	add	local03, #6
16724     15 FB 51 FC | 	wrword	result1, local03
16728     14 00 00 FF 
1672c     38 E5 85 F1 | 	sub	objptr, ##10552
16730                 | LR__1868
16730                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
16730     44 4E 05 F1 | 	add	fp, #68
16734     A7 12 02 FB | 	rdlong	arg01, fp
16738     44 4E 85 F1 | 	sub	fp, #68
1673c     00 14 06 F6 | 	mov	arg02, #0
16740     01 16 06 F6 | 	mov	arg03, #1
16744     3C 1A B1 FD | 	call	#__system___float_cmp
16748     00 FA 55 F2 | 	cmps	result1, #0 wc
1674c     24 00 90 CD |  if_b	jmp	#LR__1869
16750     44 4E 05 F1 | 	add	fp, #68
16754     A7 12 02 FB | 	rdlong	arg01, fp
16758     44 4E 85 F1 | 	sub	fp, #68
1675c     89 C1 20 FF 
16760     6F 14 06 F6 | 	mov	arg02, ##1099108975
16764     01 16 66 F6 | 	neg	arg03, #1
16768     18 1A B1 FD | 	call	#__system___float_cmp
1676c     01 FA 55 F2 | 	cmps	result1, #1 wc
16770     44 00 90 CD |  if_b	jmp	#LR__1870
16774                 | LR__1869
16774     0C 4E 05 F1 | 	add	fp, #12
16778     A7 28 02 FB | 	rdlong	local02, fp
1677c     14 2B 02 F6 | 	mov	local03, local02
16780     01 2A 66 F0 | 	shl	local03, #1
16784     14 2B 02 F1 | 	add	local03, local02
16788     03 2A 66 F0 | 	shl	local03, #3
1678c     14 00 00 FF 
16790     38 E5 05 F1 | 	add	objptr, ##10552
16794     F2 2A 02 F1 | 	add	local03, objptr
16798     0C 2A 06 F1 | 	add	local03, #12
1679c     15 31 02 FB | 	rdlong	local06, local03
167a0     68 4E 05 F1 | 	add	fp, #104
167a4     A7 30 62 FC | 	wrlong	local06, fp
167a8     74 4E 85 F1 | 	sub	fp, #116
167ac     14 00 00 FF 
167b0     38 E5 85 F1 | 	sub	objptr, ##10552
167b4     48 00 90 FD | 	jmp	#LR__1871
167b8                 | LR__1870
167b8     44 4E 05 F1 | 	add	fp, #68
167bc     A7 2C 02 FB | 	rdlong	local04, fp
167c0     30 4E 05 F1 | 	add	fp, #48
167c4     A7 2C 62 FC | 	wrlong	local04, fp
167c8     68 4E 85 F1 | 	sub	fp, #104
167cc     A7 28 02 FB | 	rdlong	local02, fp
167d0     14 2B 02 F6 | 	mov	local03, local02
167d4     01 2A 66 F0 | 	shl	local03, #1
167d8     14 2B 02 F1 | 	add	local03, local02
167dc     03 2A 66 F0 | 	shl	local03, #3
167e0     14 00 00 FF 
167e4     38 E5 05 F1 | 	add	objptr, ##10552
167e8     F2 2A 02 F1 | 	add	local03, objptr
167ec     0C 4E 85 F1 | 	sub	fp, #12
167f0     0C 2A 06 F1 | 	add	local03, #12
167f4     15 2D 62 FC | 	wrlong	local04, local03
167f8     14 00 00 FF 
167fc     38 E5 85 F1 | 	sub	objptr, ##10552
16800                 | LR__1871
16800                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
16800     48 4E 05 F1 | 	add	fp, #72
16804     A7 12 02 FB | 	rdlong	arg01, fp
16808     48 4E 85 F1 | 	sub	fp, #72
1680c     00 14 06 F6 | 	mov	arg02, #0
16810     01 16 06 F6 | 	mov	arg03, #1
16814     6C 19 B1 FD | 	call	#__system___float_cmp
16818     00 FA 55 F2 | 	cmps	result1, #0 wc
1681c     24 00 90 CD |  if_b	jmp	#LR__1872
16820     48 4E 05 F1 | 	add	fp, #72
16824     A7 12 02 FB | 	rdlong	arg01, fp
16828     48 4E 85 F1 | 	sub	fp, #72
1682c     00 00 21 FF 
16830     00 14 06 F6 | 	mov	arg02, ##1107296256
16834     01 16 66 F6 | 	neg	arg03, #1
16838     48 19 B1 FD | 	call	#__system___float_cmp
1683c     01 FA 55 F2 | 	cmps	result1, #1 wc
16840     48 00 90 CD |  if_b	jmp	#LR__1873
16844                 | LR__1872
16844     0C 4E 05 F1 | 	add	fp, #12
16848     A7 2A 02 FB | 	rdlong	local03, fp
1684c     15 33 02 F6 | 	mov	local07, local03
16850     01 32 66 F0 | 	shl	local07, #1
16854     15 33 02 F1 | 	add	local07, local03
16858     03 32 66 F0 | 	shl	local07, #3
1685c     14 00 00 FF 
16860     38 E5 05 F1 | 	add	objptr, ##10552
16864     F2 32 02 F1 | 	add	local07, objptr
16868     04 32 06 F1 | 	add	local07, #4
1686c     19 2F C2 FA | 	rdbyte	local05, local07
16870     17 2D E2 F8 | 	getbyte	local04, local05, #0
16874     14 4E 05 F1 | 	add	fp, #20
16878     A7 2C 62 FC | 	wrlong	local04, fp
1687c     20 4E 85 F1 | 	sub	fp, #32
16880     14 00 00 FF 
16884     38 E5 85 F1 | 	sub	objptr, ##10552
16888     54 00 90 FD | 	jmp	#LR__1874
1688c                 | LR__1873
1688c     48 4E 05 F1 | 	add	fp, #72
16890     A7 12 02 FB | 	rdlong	arg01, fp
16894     48 4E 85 F1 | 	sub	fp, #72
16898     01 14 06 F6 | 	mov	arg02, #1
1689c     78 19 B1 FD | 	call	#__system___float_tointeger
168a0     20 4E 05 F1 | 	add	fp, #32
168a4     A7 FA 61 FC | 	wrlong	result1, fp
168a8     14 4E 85 F1 | 	sub	fp, #20
168ac     A7 28 02 FB | 	rdlong	local02, fp
168b0     14 2B 02 F6 | 	mov	local03, local02
168b4     01 2A 66 F0 | 	shl	local03, #1
168b8     14 2B 02 F1 | 	add	local03, local02
168bc     03 2A 66 F0 | 	shl	local03, #3
168c0     14 00 00 FF 
168c4     38 E5 05 F1 | 	add	objptr, ##10552
168c8     F2 2A 02 F1 | 	add	local03, objptr
168cc     0C 4E 85 F1 | 	sub	fp, #12
168d0     04 2A 06 F1 | 	add	local03, #4
168d4     15 FB 41 FC | 	wrbyte	result1, local03
168d8     14 00 00 FF 
168dc     38 E5 85 F1 | 	sub	objptr, ##10552
168e0                 | LR__1874
168e0                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
168e0     4C 4E 05 F1 | 	add	fp, #76
168e4     A7 12 02 FB | 	rdlong	arg01, fp
168e8     4C 4E 85 F1 | 	sub	fp, #76
168ec     00 14 06 F6 | 	mov	arg02, #0
168f0     01 16 06 F6 | 	mov	arg03, #1
168f4     8C 18 B1 FD | 	call	#__system___float_cmp
168f8     00 FA 55 F2 | 	cmps	result1, #0 wc
168fc     24 00 90 CD |  if_b	jmp	#LR__1875
16900     4C 4E 05 F1 | 	add	fp, #76
16904     A7 12 02 FB | 	rdlong	arg01, fp
16908     4C 4E 85 F1 | 	sub	fp, #76
1690c     00 80 20 FF 
16910     00 14 06 F6 | 	mov	arg02, ##1090519040
16914     01 16 66 F6 | 	neg	arg03, #1
16918     68 18 B1 FD | 	call	#__system___float_cmp
1691c     01 FA 55 F2 | 	cmps	result1, #1 wc
16920     48 00 90 CD |  if_b	jmp	#LR__1876
16924                 | LR__1875
16924     0C 4E 05 F1 | 	add	fp, #12
16928     A7 2A 02 FB | 	rdlong	local03, fp
1692c     15 33 02 F6 | 	mov	local07, local03
16930     01 32 66 F0 | 	shl	local07, #1
16934     15 33 02 F1 | 	add	local07, local03
16938     03 32 66 F0 | 	shl	local07, #3
1693c     14 00 00 FF 
16940     38 E5 05 F1 | 	add	objptr, ##10552
16944     F2 32 02 F1 | 	add	local07, objptr
16948     05 32 06 F1 | 	add	local07, #5
1694c     19 2F C2 FA | 	rdbyte	local05, local07
16950     17 2D E2 F8 | 	getbyte	local04, local05, #0
16954     18 4E 05 F1 | 	add	fp, #24
16958     A7 2C 62 FC | 	wrlong	local04, fp
1695c     24 4E 85 F1 | 	sub	fp, #36
16960     14 00 00 FF 
16964     38 E5 85 F1 | 	sub	objptr, ##10552
16968     54 00 90 FD | 	jmp	#LR__1877
1696c                 | LR__1876
1696c     4C 4E 05 F1 | 	add	fp, #76
16970     A7 12 02 FB | 	rdlong	arg01, fp
16974     4C 4E 85 F1 | 	sub	fp, #76
16978     01 14 06 F6 | 	mov	arg02, #1
1697c     98 18 B1 FD | 	call	#__system___float_tointeger
16980     24 4E 05 F1 | 	add	fp, #36
16984     A7 FA 61 FC | 	wrlong	result1, fp
16988     18 4E 85 F1 | 	sub	fp, #24
1698c     A7 28 02 FB | 	rdlong	local02, fp
16990     14 2B 02 F6 | 	mov	local03, local02
16994     01 2A 66 F0 | 	shl	local03, #1
16998     14 2B 02 F1 | 	add	local03, local02
1699c     03 2A 66 F0 | 	shl	local03, #3
169a0     14 00 00 FF 
169a4     38 E5 05 F1 | 	add	objptr, ##10552
169a8     F2 2A 02 F1 | 	add	local03, objptr
169ac     0C 4E 85 F1 | 	sub	fp, #12
169b0     05 2A 06 F1 | 	add	local03, #5
169b4     15 FB 41 FC | 	wrbyte	result1, local03
169b8     14 00 00 FF 
169bc     38 E5 85 F1 | 	sub	objptr, ##10552
169c0                 | LR__1877
169c0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
169c0     50 4E 05 F1 | 	add	fp, #80
169c4     A7 12 02 FB | 	rdlong	arg01, fp
169c8     50 4E 85 F1 | 	sub	fp, #80
169cc     00 14 06 F6 | 	mov	arg02, #0
169d0     01 16 06 F6 | 	mov	arg03, #1
169d4     AC 17 B1 FD | 	call	#__system___float_cmp
169d8     00 FA 55 F2 | 	cmps	result1, #0 wc
169dc     24 00 90 CD |  if_b	jmp	#LR__1878
169e0     50 4E 05 F1 | 	add	fp, #80
169e4     A7 12 02 FB | 	rdlong	arg01, fp
169e8     50 4E 85 F1 | 	sub	fp, #80
169ec     00 3D 22 FF 
169f0     00 14 06 F6 | 	mov	arg02, ##1148846080
169f4     01 16 66 F6 | 	neg	arg03, #1
169f8     88 17 B1 FD | 	call	#__system___float_cmp
169fc     01 FA 55 F2 | 	cmps	result1, #1 wc
16a00     44 00 90 CD |  if_b	jmp	#LR__1879
16a04                 | LR__1878
16a04     0C 4E 05 F1 | 	add	fp, #12
16a08     A7 28 02 FB | 	rdlong	local02, fp
16a0c     14 2B 02 F6 | 	mov	local03, local02
16a10     01 2A 66 F0 | 	shl	local03, #1
16a14     14 2B 02 F1 | 	add	local03, local02
16a18     03 2A 66 F0 | 	shl	local03, #3
16a1c     14 00 00 FF 
16a20     38 E5 05 F1 | 	add	objptr, ##10552
16a24     F2 2A 02 F1 | 	add	local03, objptr
16a28     08 2A 06 F1 | 	add	local03, #8
16a2c     15 31 02 FB | 	rdlong	local06, local03
16a30     6C 4E 05 F1 | 	add	fp, #108
16a34     A7 30 62 FC | 	wrlong	local06, fp
16a38     78 4E 85 F1 | 	sub	fp, #120
16a3c     14 00 00 FF 
16a40     38 E5 85 F1 | 	sub	objptr, ##10552
16a44     48 00 90 FD | 	jmp	#LR__1880
16a48                 | LR__1879
16a48     50 4E 05 F1 | 	add	fp, #80
16a4c     A7 30 02 FB | 	rdlong	local06, fp
16a50     28 4E 05 F1 | 	add	fp, #40
16a54     A7 30 62 FC | 	wrlong	local06, fp
16a58     6C 4E 85 F1 | 	sub	fp, #108
16a5c     A7 28 02 FB | 	rdlong	local02, fp
16a60     14 2B 02 F6 | 	mov	local03, local02
16a64     01 2A 66 F0 | 	shl	local03, #1
16a68     14 2B 02 F1 | 	add	local03, local02
16a6c     03 2A 66 F0 | 	shl	local03, #3
16a70     14 00 00 FF 
16a74     38 E5 05 F1 | 	add	objptr, ##10552
16a78     F2 2A 02 F1 | 	add	local03, objptr
16a7c     0C 4E 85 F1 | 	sub	fp, #12
16a80     08 2A 06 F1 | 	add	local03, #8
16a84     15 31 62 FC | 	wrlong	local06, local03
16a88     14 00 00 FF 
16a8c     38 E5 85 F1 | 	sub	objptr, ##10552
16a90                 | LR__1880
16a90                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
16a90     54 4E 05 F1 | 	add	fp, #84
16a94     A7 12 02 FB | 	rdlong	arg01, fp
16a98     54 4E 85 F1 | 	sub	fp, #84
16a9c     00 C0 5F FF 
16aa0     00 14 06 F6 | 	mov	arg02, ##-1082130432
16aa4     01 16 06 F6 | 	mov	arg03, #1
16aa8     D8 16 B1 FD | 	call	#__system___float_cmp
16aac     00 FA 55 F2 | 	cmps	result1, #0 wc
16ab0     24 00 90 CD |  if_b	jmp	#LR__1881
16ab4     54 4E 05 F1 | 	add	fp, #84
16ab8     A7 12 02 FB | 	rdlong	arg01, fp
16abc     54 4E 85 F1 | 	sub	fp, #84
16ac0     00 C0 1F FF 
16ac4     00 14 06 F6 | 	mov	arg02, ##1065353216
16ac8     01 16 66 F6 | 	neg	arg03, #1
16acc     B4 16 B1 FD | 	call	#__system___float_cmp
16ad0     01 FA 55 F2 | 	cmps	result1, #1 wc
16ad4     44 00 90 CD |  if_b	jmp	#LR__1882
16ad8                 | LR__1881
16ad8     0C 4E 05 F1 | 	add	fp, #12
16adc     A7 28 02 FB | 	rdlong	local02, fp
16ae0     14 2B 02 F6 | 	mov	local03, local02
16ae4     01 2A 66 F0 | 	shl	local03, #1
16ae8     14 2B 02 F1 | 	add	local03, local02
16aec     03 2A 66 F0 | 	shl	local03, #3
16af0     14 00 00 FF 
16af4     38 E5 05 F1 | 	add	objptr, ##10552
16af8     F2 2A 02 F1 | 	add	local03, objptr
16afc     10 2A 06 F1 | 	add	local03, #16
16b00     15 31 02 FB | 	rdlong	local06, local03
16b04     64 4E 05 F1 | 	add	fp, #100
16b08     A7 30 62 FC | 	wrlong	local06, fp
16b0c     70 4E 85 F1 | 	sub	fp, #112
16b10     14 00 00 FF 
16b14     38 E5 85 F1 | 	sub	objptr, ##10552
16b18     48 00 90 FD | 	jmp	#LR__1883
16b1c                 | LR__1882
16b1c     54 4E 05 F1 | 	add	fp, #84
16b20     A7 30 02 FB | 	rdlong	local06, fp
16b24     1C 4E 05 F1 | 	add	fp, #28
16b28     A7 30 62 FC | 	wrlong	local06, fp
16b2c     64 4E 85 F1 | 	sub	fp, #100
16b30     A7 28 02 FB | 	rdlong	local02, fp
16b34     14 2B 02 F6 | 	mov	local03, local02
16b38     01 2A 66 F0 | 	shl	local03, #1
16b3c     14 2B 02 F1 | 	add	local03, local02
16b40     03 2A 66 F0 | 	shl	local03, #3
16b44     14 00 00 FF 
16b48     38 E5 05 F1 | 	add	objptr, ##10552
16b4c     F2 2A 02 F1 | 	add	local03, objptr
16b50     0C 4E 85 F1 | 	sub	fp, #12
16b54     10 2A 06 F1 | 	add	local03, #16
16b58     15 31 62 FC | 	wrlong	local06, local03
16b5c     14 00 00 FF 
16b60     38 E5 85 F1 | 	sub	objptr, ##10552
16b64                 | LR__1883
16b64                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
16b64     58 4E 05 F1 | 	add	fp, #88
16b68     A7 12 02 FB | 	rdlong	arg01, fp
16b6c     58 4E 85 F1 | 	sub	fp, #88
16b70     00 14 06 F6 | 	mov	arg02, #0
16b74     01 16 06 F6 | 	mov	arg03, #1
16b78     08 16 B1 FD | 	call	#__system___float_cmp
16b7c     00 FA 55 F2 | 	cmps	result1, #0 wc
16b80     24 00 90 CD |  if_b	jmp	#LR__1884
16b84     58 4E 05 F1 | 	add	fp, #88
16b88     A7 12 02 FB | 	rdlong	arg01, fp
16b8c     58 4E 85 F1 | 	sub	fp, #88
16b90     80 BF 21 FF 
16b94     00 14 06 F6 | 	mov	arg02, ##1132396544
16b98     01 16 66 F6 | 	neg	arg03, #1
16b9c     E4 15 B1 FD | 	call	#__system___float_cmp
16ba0     01 FA 55 F2 | 	cmps	result1, #1 wc
16ba4     44 00 90 CD |  if_b	jmp	#LR__1885
16ba8                 | LR__1884
16ba8     0C 4E 05 F1 | 	add	fp, #12
16bac     A7 2A 02 FB | 	rdlong	local03, fp
16bb0     15 33 02 F6 | 	mov	local07, local03
16bb4     01 32 66 F0 | 	shl	local07, #1
16bb8     15 33 02 F1 | 	add	local07, local03
16bbc     03 32 66 F0 | 	shl	local07, #3
16bc0     14 00 00 FF 
16bc4     38 E5 05 F1 | 	add	objptr, ##10552
16bc8     F2 32 02 F1 | 	add	local07, objptr
16bcc     14 32 06 F1 | 	add	local07, #20
16bd0     19 2D E2 FA | 	rdword	local04, local07
16bd4     20 4E 05 F1 | 	add	fp, #32
16bd8     A7 2C 62 FC | 	wrlong	local04, fp
16bdc     2C 4E 85 F1 | 	sub	fp, #44
16be0     14 00 00 FF 
16be4     38 E5 85 F1 | 	sub	objptr, ##10552
16be8     54 00 90 FD | 	jmp	#LR__1886
16bec                 | LR__1885
16bec     58 4E 05 F1 | 	add	fp, #88
16bf0     A7 12 02 FB | 	rdlong	arg01, fp
16bf4     58 4E 85 F1 | 	sub	fp, #88
16bf8     01 14 06 F6 | 	mov	arg02, #1
16bfc     18 16 B1 FD | 	call	#__system___float_tointeger
16c00     2C 4E 05 F1 | 	add	fp, #44
16c04     A7 FA 61 FC | 	wrlong	result1, fp
16c08     20 4E 85 F1 | 	sub	fp, #32
16c0c     A7 28 02 FB | 	rdlong	local02, fp
16c10     14 2B 02 F6 | 	mov	local03, local02
16c14     01 2A 66 F0 | 	shl	local03, #1
16c18     14 2B 02 F1 | 	add	local03, local02
16c1c     03 2A 66 F0 | 	shl	local03, #3
16c20     14 00 00 FF 
16c24     38 E5 05 F1 | 	add	objptr, ##10552
16c28     F2 2A 02 F1 | 	add	local03, objptr
16c2c     0C 4E 85 F1 | 	sub	fp, #12
16c30     14 2A 06 F1 | 	add	local03, #20
16c34     15 FB 51 FC | 	wrword	result1, local03
16c38     14 00 00 FF 
16c3c     38 E5 85 F1 | 	sub	objptr, ##10552
16c40                 | LR__1886
16c40     6C 4E 05 F1 | 	add	fp, #108
16c44     A7 14 02 FB | 	rdlong	arg02, fp
16c48     6C 4E 85 F1 | 	sub	fp, #108
16c4c     FC 16 20 FF 
16c50     54 12 06 F6 | 	mov	arg01, ##1076754516
16c54     C8 20 B1 FD | 	call	#__system____builtin_logbase
16c58     FD 2C 02 F6 | 	mov	local04, result1
16c5c     1E 14 C6 F9 | 	decod	arg02, #30
16c60     FC 16 20 FF 
16c64     54 12 06 F6 | 	mov	arg01, ##1076754516
16c68     B4 20 B1 FD | 	call	#__system____builtin_logbase
16c6c     FD 14 02 F6 | 	mov	arg02, result1
16c70     16 13 02 F6 | 	mov	arg01, local04
16c74     DC 12 B1 FD | 	call	#__system___float_div
16c78     FD 12 02 F6 | 	mov	arg01, result1
16c7c     00 14 06 F6 | 	mov	arg02, #0
16c80     94 15 B1 FD | 	call	#__system___float_tointeger
16c84     30 4E 05 F1 | 	add	fp, #48
16c88     A7 FA 61 FC | 	wrlong	result1, fp
16c8c     1E 2C C6 F9 | 	decod	local04, #30
16c90     FD 12 02 F6 | 	mov	arg01, result1
16c94     30 4E 85 F1 | 	sub	fp, #48
16c98     05 12 06 F1 | 	add	arg01, #5
16c9c     09 13 52 F6 | 	abs	arg01, arg01 wc
16ca0     1F 34 C6 C9 |  if_b	decod	local08, #31
16ca4     00 34 06 36 |  if_ae	mov	local08, #0
16ca8     A0 0C B1 FD | 	call	#__system___float_fromuns
16cac     1A FB 61 F5 | 	xor	result1, local08
16cb0     FD 14 02 F6 | 	mov	arg02, result1
16cb4     16 13 02 F6 | 	mov	arg01, local04
16cb8     9C 1F B1 FD | 	call	#__system____builtin_powf
16cbc     FD 12 02 F6 | 	mov	arg01, result1
16cc0     01 14 06 F6 | 	mov	arg02, #1
16cc4     50 15 B1 FD | 	call	#__system___float_tointeger
16cc8     10 4E 05 F1 | 	add	fp, #16
16ccc     A7 FA 61 FC | 	wrlong	result1, fp
16cd0                 | ' skip=round(2^(lfreq+5))
16cd0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
16cd0     10 4E 85 F1 | 	sub	fp, #16
16cd4     40 00 00 FF 
16cd8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
16cdc     30 00 90 CD |  if_b	jmp	#LR__1887
16ce0     10 4E 05 F1 | 	add	fp, #16
16ce4     A7 26 02 FB | 	rdlong	local01, fp
16ce8     13 2D 52 F6 | 	abs	local04, local01 wc
16cec     0F 2C 46 F0 | 	shr	local04, #15
16cf0     16 2D 82 F6 | 	negc	local04, local04
16cf4     0C 4E 85 F1 | 	sub	fp, #12
16cf8     A7 2C 62 FC | 	wrlong	local04, fp
16cfc     0C 4E 05 F1 | 	add	fp, #12
16d00     40 00 80 FF 
16d04     A7 00 68 FC | 	wrlong	##32768, fp
16d08     10 4E 85 F1 | 	sub	fp, #16
16d0c     0C 00 90 FD | 	jmp	#LR__1888
16d10                 | LR__1887
16d10     04 4E 05 F1 | 	add	fp, #4
16d14     A7 02 68 FC | 	wrlong	#1, fp
16d18     04 4E 85 F1 | 	sub	fp, #4
16d1c                 | LR__1888
16d1c     6C 4E 05 F1 | 	add	fp, #108
16d20     A7 14 02 FB | 	rdlong	arg02, fp
16d24     6C 4E 85 F1 | 	sub	fp, #108
16d28     3E 2C 25 FF 
16d2c     3C 12 06 F6 | 	mov	arg01, ##1247312956
16d30     20 12 B1 FD | 	call	#__system___float_div
16d34     FD 2C 02 F6 | 	mov	local04, result1
16d38     04 4E 05 F1 | 	add	fp, #4
16d3c     A7 12 02 FB | 	rdlong	arg01, fp
16d40     04 4E 85 F1 | 	sub	fp, #4
16d44     09 13 52 F6 | 	abs	arg01, arg01 wc
16d48     1F 34 C6 C9 |  if_b	decod	local08, #31
16d4c     00 34 06 36 |  if_ae	mov	local08, #0
16d50     F8 0B B1 FD | 	call	#__system___float_fromuns
16d54     1A FB 61 F5 | 	xor	result1, local08
16d58     FD 26 02 F6 | 	mov	local01, result1
16d5c     1E 28 C6 F9 | 	decod	local02, #30
16d60     0D 12 06 F6 | 	mov	arg01, #13
16d64     30 4E 05 F1 | 	add	fp, #48
16d68     A7 30 02 FB | 	rdlong	local06, fp
16d6c     30 4E 85 F1 | 	sub	fp, #48
16d70     18 13 82 F1 | 	sub	arg01, local06
16d74     09 13 52 F6 | 	abs	arg01, arg01 wc
16d78     1F 34 C6 C9 |  if_b	decod	local08, #31
16d7c     00 34 06 36 |  if_ae	mov	local08, #0
16d80     C8 0B B1 FD | 	call	#__system___float_fromuns
16d84     1A FB 61 F5 | 	xor	result1, local08
16d88     FD 14 02 F6 | 	mov	arg02, result1
16d8c     14 13 02 F6 | 	mov	arg01, local02
16d90     C4 1E B1 FD | 	call	#__system____builtin_powf
16d94     FD 14 02 F6 | 	mov	arg02, result1
16d98     13 13 02 F6 | 	mov	arg01, local01
16d9c     B0 0F B1 FD | 	call	#__system___float_mul
16da0     FD 14 02 F6 | 	mov	arg02, result1
16da4     16 13 02 F6 | 	mov	arg01, local04
16da8     A8 11 B1 FD | 	call	#__system___float_div
16dac     FD 12 02 F6 | 	mov	arg01, result1
16db0     01 14 06 F6 | 	mov	arg02, #1
16db4     60 14 B1 FD | 	call	#__system___float_tointeger
16db8     34 4E 05 F1 | 	add	fp, #52
16dbc     A7 FA 61 FC | 	wrlong	result1, fp
16dc0     34 4E 05 F1 | 	add	fp, #52
16dc4     A7 12 02 FB | 	rdlong	arg01, fp
16dc8     10 4E 05 F1 | 	add	fp, #16
16dcc     A7 14 02 FB | 	rdlong	arg02, fp
16dd0     78 4E 85 F1 | 	sub	fp, #120
16dd4     7C 11 B1 FD | 	call	#__system___float_div
16dd8     FD 12 02 F6 | 	mov	arg01, result1
16ddc     01 14 06 F6 | 	mov	arg02, #1
16de0     34 14 B1 FD | 	call	#__system___float_tointeger
16de4     FD 2C 02 F6 | 	mov	local04, result1
16de8     14 4E 05 F1 | 	add	fp, #20
16dec     A7 2C 62 FC | 	wrlong	local04, fp
16df0     5C 4E 05 F1 | 	add	fp, #92
16df4     A7 14 02 FB | 	rdlong	arg02, fp
16df8     70 4E 85 F1 | 	sub	fp, #112
16dfc     00 00 23 FF 
16e00     00 12 06 F6 | 	mov	arg01, ##1174405120
16e04     48 0F B1 FD | 	call	#__system___float_mul
16e08     FD 12 02 F6 | 	mov	arg01, result1
16e0c     01 14 06 F6 | 	mov	arg02, #1
16e10     04 14 B1 FD | 	call	#__system___float_tointeger
16e14     0D 2C C6 F9 | 	decod	local04, #13
16e18     FD 2C 02 F1 | 	add	local04, result1
16e1c     18 4E 05 F1 | 	add	fp, #24
16e20     A7 2C 62 FC | 	wrlong	local04, fp
16e24     5C 4E 05 F1 | 	add	fp, #92
16e28     A7 14 02 FB | 	rdlong	arg02, fp
16e2c     74 4E 85 F1 | 	sub	fp, #116
16e30     00 3D 22 FF 
16e34     00 12 06 F6 | 	mov	arg01, ##1148846080
16e38     14 0F B1 FD | 	call	#__system___float_mul
16e3c     FD 12 02 F6 | 	mov	arg01, result1
16e40     01 14 06 F6 | 	mov	arg02, #1
16e44     D0 13 B1 FD | 	call	#__system___float_tointeger
16e48     1C 4E 05 F1 | 	add	fp, #28
16e4c     A7 FA 61 FC | 	wrlong	result1, fp
16e50     37 00 00 FF 
16e54     10 E4 05 F1 | 	add	objptr, ##28176
16e58     F2 2C 02 FB | 	rdlong	local04, objptr
16e5c     37 00 00 FF 
16e60     10 E4 85 F1 | 	sub	objptr, ##28176
16e64     10 4E 85 F1 | 	sub	fp, #16
16e68     A7 28 02 FB | 	rdlong	local02, fp
16e6c     06 28 66 F0 | 	shl	local02, #6
16e70     14 2D 02 F1 | 	add	local04, local02
16e74     04 4E 85 F1 | 	sub	fp, #4
16e78     A7 2C 62 FC | 	wrlong	local04, fp
16e7c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
16e7c                 | ' speed=round(speed_coeff/slen)
16e7c                 | ' ipan=8192+round(8192*pan)
16e7c                 | ' ivol=round(1000.0*vol)
16e7c                 | ' base2=base+64*channel
16e7c                 | ' if wave <32 then 
16e7c     18 4E 05 F1 | 	add	fp, #24
16e80     A7 2C 02 FB | 	rdlong	local04, fp
16e84     20 4E 85 F1 | 	sub	fp, #32
16e88     20 2C 56 F2 | 	cmps	local04, #32 wc
16e8c     2C 00 90 3D |  if_ae	jmp	#LR__1889
16e90     08 4E 05 F1 | 	add	fp, #8
16e94     A7 12 02 FB | 	rdlong	arg01, fp
16e98     08 12 06 F1 | 	add	arg01, #8
16e9c     18 4E 05 F1 | 	add	fp, #24
16ea0     A7 14 02 FB | 	rdlong	arg02, fp
16ea4     20 4E 85 F1 | 	sub	fp, #32
16ea8     0B 14 66 F0 | 	shl	arg02, #11
16eac     00 00 60 FF 
16eb0     00 14 06 F1 | 	add	arg02, ##-1073741824
16eb4     09 15 62 FC | 	wrlong	arg02, arg01
16eb8     18 00 90 FD | 	jmp	#LR__1890
16ebc                 | LR__1889
16ebc     08 4E 05 F1 | 	add	fp, #8
16ec0     A7 12 02 FB | 	rdlong	arg01, fp
16ec4     08 4E 85 F1 | 	sub	fp, #8
16ec8     08 12 06 F1 | 	add	arg01, #8
16ecc     00 00 E4 FF 
16ed0     09 01 68 FC | 	wrlong	##-939524096, arg01
16ed4                 | LR__1890
16ed4     08 4E 05 F1 | 	add	fp, #8
16ed8     A7 12 02 FB | 	rdlong	arg01, fp
16edc     10 12 06 F1 | 	add	arg01, #16
16ee0     04 00 80 FF 
16ee4     09 01 68 FC | 	wrlong	##2048, arg01
16ee8     A7 12 02 FB | 	rdlong	arg01, fp
16eec     0C 12 06 F1 | 	add	arg01, #12
16ef0     09 01 68 FC | 	wrlong	#0, arg01
16ef4     A7 12 02 FB | 	rdlong	arg01, fp
16ef8     14 12 06 F1 | 	add	arg01, #20
16efc     14 4E 05 F1 | 	add	fp, #20
16f00     A7 14 02 FB | 	rdlong	arg02, fp
16f04     09 15 52 FC | 	wrword	arg02, arg01
16f08     14 4E 85 F1 | 	sub	fp, #20
16f0c     A7 12 02 FB | 	rdlong	arg01, fp
16f10     16 12 06 F1 | 	add	arg01, #22
16f14     10 4E 05 F1 | 	add	fp, #16
16f18     A7 14 02 FB | 	rdlong	arg02, fp
16f1c     09 15 52 FC | 	wrword	arg02, arg01
16f20                 | ' lpoke base2+16,2048
16f20                 | ' lpoke base2+12,0
16f20                 | ' dpoke base2+20,ivol 
16f20                 | ' dpoke base2+22,ipan 
16f20                 | ' if wave<32 then
16f20     08 4E 05 F1 | 	add	fp, #8
16f24     A7 2C 02 FB | 	rdlong	local04, fp
16f28     20 4E 85 F1 | 	sub	fp, #32
16f2c     20 2C 56 F2 | 	cmps	local04, #32 wc
16f30     38 00 90 3D |  if_ae	jmp	#LR__1891
16f34     08 4E 05 F1 | 	add	fp, #8
16f38     A7 12 02 FB | 	rdlong	arg01, fp
16f3c     18 12 06 F1 | 	add	arg01, #24
16f40     2C 4E 05 F1 | 	add	fp, #44
16f44     A7 14 02 FB | 	rdlong	arg02, fp
16f48     09 15 52 FC | 	wrword	arg02, arg01
16f4c     2C 4E 85 F1 | 	sub	fp, #44
16f50     A7 12 02 FB | 	rdlong	arg01, fp
16f54     1A 12 06 F1 | 	add	arg01, #26
16f58     08 4E 05 F1 | 	add	fp, #8
16f5c     A7 14 02 FB | 	rdlong	arg02, fp
16f60     10 4E 85 F1 | 	sub	fp, #16
16f64     09 15 52 FC | 	wrword	arg02, arg01
16f68     48 00 90 FD | 	jmp	#LR__1892
16f6c                 | LR__1891
16f6c     08 4E 05 F1 | 	add	fp, #8
16f70     A7 2C 02 FB | 	rdlong	local04, fp
16f74     18 2C 06 F1 | 	add	local04, #24
16f78     64 4E 05 F1 | 	add	fp, #100
16f7c     A7 14 02 FB | 	rdlong	arg02, fp
16f80     6C 4E 85 F1 | 	sub	fp, #108
16f84     3E 2C 25 FF 
16f88     3C 12 06 F6 | 	mov	arg01, ##1247312956
16f8c     C4 0F B1 FD | 	call	#__system___float_div
16f90     FD 12 02 F6 | 	mov	arg01, result1
16f94     01 14 06 F6 | 	mov	arg02, #1
16f98     7C 12 B1 FD | 	call	#__system___float_tointeger
16f9c     16 FB 51 FC | 	wrword	result1, local04
16fa0     08 4E 05 F1 | 	add	fp, #8
16fa4     A7 12 02 FB | 	rdlong	arg01, fp
16fa8     08 4E 85 F1 | 	sub	fp, #8
16fac     1A 12 06 F1 | 	add	arg01, #26
16fb0     09 01 5A FC | 	wrword	#256, arg01
16fb4                 | LR__1892
16fb4     08 4E 05 F1 | 	add	fp, #8
16fb8     A7 12 02 FB | 	rdlong	arg01, fp
16fbc     1C 12 06 F1 | 	add	arg01, #28
16fc0     09 01 68 FC | 	wrlong	#0, arg01
16fc4     A7 12 02 FB | 	rdlong	arg01, fp
16fc8     20 12 06 F1 | 	add	arg01, #32
16fcc     09 01 68 FC | 	wrlong	#0, arg01
16fd0                 | ' lpoke base2+28,$0000_0000
16fd0                 | ' lpoke base2+32,0 
16fd0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
16fd0     1C 4E 05 F1 | 	add	fp, #28
16fd4     A7 2C 02 FB | 	rdlong	local04, fp
16fd8     24 4E 85 F1 | 	sub	fp, #36
16fdc     08 2C 0E F2 | 	cmp	local04, #8 wz
16fe0     18 00 90 5D |  if_ne	jmp	#LR__1893
16fe4     08 4E 05 F1 | 	add	fp, #8
16fe8     A7 12 02 FB | 	rdlong	arg01, fp
16fec     08 4E 85 F1 | 	sub	fp, #8
16ff0     24 12 06 F1 | 	add	arg01, #36
16ff4     09 01 68 FC | 	wrlong	#0, arg01
16ff8     34 00 90 FD | 	jmp	#LR__1894
16ffc                 | LR__1893
16ffc     08 4E 05 F1 | 	add	fp, #8
17000     A7 12 02 FB | 	rdlong	arg01, fp
17004     24 12 06 F1 | 	add	arg01, #36
17008     1C 4E 05 F1 | 	add	fp, #28
1700c     A7 14 02 FB | 	rdlong	arg02, fp
17010     24 4E 85 F1 | 	sub	fp, #36
17014     09 14 66 F0 | 	shl	arg02, #9
17018     0C 00 00 FF 
1701c     D8 E4 05 F1 | 	add	objptr, ##6360
17020     F2 14 02 F1 | 	add	arg02, objptr
17024     0C 00 00 FF 
17028     D8 E4 85 F1 | 	sub	objptr, ##6360
1702c     09 15 62 FC | 	wrlong	arg02, arg01
17030                 | LR__1894
17030     08 4E 05 F1 | 	add	fp, #8
17034     A7 12 02 FB | 	rdlong	arg01, fp
17038     28 12 06 F1 | 	add	arg01, #40
1703c     0C 4E 05 F1 | 	add	fp, #12
17040     A7 14 02 FB | 	rdlong	arg02, fp
17044     09 15 62 FC | 	wrlong	arg02, arg01
17048     0C 4E 85 F1 | 	sub	fp, #12
1704c     A7 12 02 FB | 	rdlong	arg01, fp
17050     2C 12 06 F1 | 	add	arg01, #44
17054     24 4E 05 F1 | 	add	fp, #36
17058     A7 14 02 FB | 	rdlong	arg02, fp
1705c     09 15 62 FC | 	wrlong	arg02, arg01
17060                 | ' lpoke base2+40,speed 
17060                 | ' lpoke base2+44,sus 
17060                 | ' if delay>0 then waitms(delay) 
17060     04 4E 85 F1 | 	sub	fp, #4
17064     A7 2C 02 FB | 	rdlong	local04, fp
17068     28 4E 85 F1 | 	sub	fp, #40
1706c     01 2C 56 F2 | 	cmps	local04, #1 wc
17070     28 4E 05 31 |  if_ae	add	fp, #40
17074     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17078     28 4E 85 31 |  if_ae	sub	fp, #40
1707c     48 E1 B0 3D |  if_ae	call	#__system___waitms
17080     A7 F0 03 F6 | 	mov	ptra, fp
17084     B2 00 A0 FD | 	call	#popregs_
17088                 | _do_play_ret
17088     2D 00 64 FD | 	ret
1708c                 | 
1708c                 | ' 
1708c                 | ' '-------------------- plot
1708c                 | ' 
1708c                 | ' sub do_plot
1708c                 | _do_plot
1708c     00 4A 05 F6 | 	mov	COUNT_, #0
17090     A8 00 A0 FD | 	call	#pushregs_
17094     20 F0 07 F1 | 	add	ptra, #32
17098     F0 5A BF FD | 	call	#_pop
1709c     FD 16 02 F6 | 	mov	arg03, result1
170a0     FE 14 02 F6 | 	mov	arg02, result2
170a4     FF 12 02 F6 | 	mov	arg01, result3
170a8     0C 4E 05 F1 | 	add	fp, #12
170ac     A7 16 62 FC | 	wrlong	arg03, fp
170b0     04 4E 05 F1 | 	add	fp, #4
170b4     A7 14 62 FC | 	wrlong	arg02, fp
170b8     04 4E 05 F1 | 	add	fp, #4
170bc     A7 12 62 FC | 	wrlong	arg01, fp
170c0     14 4E 85 F1 | 	sub	fp, #20
170c4     C4 5A BF FD | 	call	#_pop
170c8     FF 16 02 F6 | 	mov	arg03, result3
170cc     A7 FA 61 FC | 	wrlong	result1, fp
170d0     04 4E 05 F1 | 	add	fp, #4
170d4     A7 FC 61 FC | 	wrlong	result2, fp
170d8     04 4E 05 F1 | 	add	fp, #4
170dc     A7 16 62 FC | 	wrlong	arg03, fp
170e0     08 4E 85 F1 | 	sub	fp, #8
170e4     A7 12 02 F6 | 	mov	arg01, fp
170e8     84 5C BF FD | 	call	#_converttoint
170ec     18 4E 05 F1 | 	add	fp, #24
170f0     A7 FA 61 FC | 	wrlong	result1, fp
170f4     0C 4E 85 F1 | 	sub	fp, #12
170f8     A7 12 02 F6 | 	mov	arg01, fp
170fc     0C 4E 85 F1 | 	sub	fp, #12
17100     6C 5C BF FD | 	call	#_converttoint
17104     1C 4E 05 F1 | 	add	fp, #28
17108     A7 FA 61 FC | 	wrlong	result1, fp
1710c     04 4E 85 F1 | 	sub	fp, #4
17110     A7 16 02 FB | 	rdlong	arg03, fp
17114     37 00 00 FF 
17118     2C E4 05 F1 | 	add	objptr, ##28204
1711c     F2 16 62 FC | 	wrlong	arg03, objptr
17120     04 4E 05 F1 | 	add	fp, #4
17124     A7 14 02 FB | 	rdlong	arg02, fp
17128     1C 4E 85 F1 | 	sub	fp, #28
1712c     04 E4 05 F1 | 	add	objptr, #4
17130     F2 14 62 FC | 	wrlong	arg02, objptr
17134     04 E4 85 F1 | 	sub	objptr, #4
17138     F2 12 02 FB | 	rdlong	arg01, objptr
1713c     04 E4 85 F1 | 	sub	objptr, #4
17140     F2 16 02 FB | 	rdlong	arg03, objptr
17144     37 00 00 FF 
17148     28 E4 85 F1 | 	sub	objptr, ##28200
1714c     74 B4 B0 FD | 	call	#_hg010b_spin2_putpixel
17150     A7 F0 03 F6 | 	mov	ptra, fp
17154     B2 00 A0 FD | 	call	#popregs_
17158                 | _do_plot_ret
17158     2D 00 64 FD | 	ret
1715c                 | 
1715c                 | ' 
1715c                 | ' '-------------------- poke
1715c                 | ' 
1715c                 | ' sub do_poke
1715c                 | _do_poke
1715c     01 4A 05 F6 | 	mov	COUNT_, #1
17160     A8 00 A0 FD | 	call	#pushregs_
17164     20 F0 07 F1 | 	add	ptra, #32
17168     20 5A BF FD | 	call	#_pop
1716c     FD 14 02 F6 | 	mov	arg02, result1
17170     FE 12 02 F6 | 	mov	arg01, result2
17174     FF 26 02 F6 | 	mov	local01, result3
17178     A7 14 62 FC | 	wrlong	arg02, fp
1717c     04 4E 05 F1 | 	add	fp, #4
17180     A7 12 62 FC | 	wrlong	arg01, fp
17184     04 4E 05 F1 | 	add	fp, #4
17188     A7 26 62 FC | 	wrlong	local01, fp
1718c     08 4E 85 F1 | 	sub	fp, #8
17190     F8 59 BF FD | 	call	#_pop
17194     FF 26 02 F6 | 	mov	local01, result3
17198     0C 4E 05 F1 | 	add	fp, #12
1719c     A7 FA 61 FC | 	wrlong	result1, fp
171a0     04 4E 05 F1 | 	add	fp, #4
171a4     A7 FC 61 FC | 	wrlong	result2, fp
171a8     04 4E 05 F1 | 	add	fp, #4
171ac     A7 26 62 FC | 	wrlong	local01, fp
171b0     08 4E 85 F1 | 	sub	fp, #8
171b4     A7 12 02 F6 | 	mov	arg01, fp
171b8     0C 4E 85 F1 | 	sub	fp, #12
171bc     B0 5B BF FD | 	call	#_converttoint
171c0     18 4E 05 F1 | 	add	fp, #24
171c4     A7 FA 61 FC | 	wrlong	result1, fp
171c8     18 4E 85 F1 | 	sub	fp, #24
171cc     A7 12 02 F6 | 	mov	arg01, fp
171d0     9C 5B BF FD | 	call	#_converttoint
171d4     1C 4E 05 F1 | 	add	fp, #28
171d8     A7 FA 61 FC | 	wrlong	result1, fp
171dc                 | ' t1=pop() 'value
171dc                 | ' t2=pop() 
171dc                 | ' a=converttoint(t2) : v=converttoint(t1)
171dc                 | ' if a<$80000 then poke a,v else pspoke a,v
171dc     04 4E 85 F1 | 	sub	fp, #4
171e0     A7 26 02 FB | 	rdlong	local01, fp
171e4     18 4E 85 F1 | 	sub	fp, #24
171e8     00 04 00 FF 
171ec     00 26 16 F2 | 	cmp	local01, ##524288 wc
171f0     1C 00 90 3D |  if_ae	jmp	#LR__1900
171f4     18 4E 05 F1 | 	add	fp, #24
171f8     A7 12 02 FB | 	rdlong	arg01, fp
171fc     04 4E 05 F1 | 	add	fp, #4
17200     A7 14 02 FB | 	rdlong	arg02, fp
17204     1C 4E 85 F1 | 	sub	fp, #28
17208     09 15 42 FC | 	wrbyte	arg02, arg01
1720c     18 00 90 FD | 	jmp	#LR__1901
17210                 | LR__1900
17210     18 4E 05 F1 | 	add	fp, #24
17214     A7 12 02 FB | 	rdlong	arg01, fp
17218     04 4E 05 F1 | 	add	fp, #4
1721c     A7 14 02 FB | 	rdlong	arg02, fp
17220     1C 4E 85 F1 | 	sub	fp, #28
17224     34 A5 B0 FD | 	call	#_pspoke
17228                 | LR__1901
17228     A7 F0 03 F6 | 	mov	ptra, fp
1722c     B2 00 A0 FD | 	call	#popregs_
17230                 | _do_poke_ret
17230     2D 00 64 FD | 	ret
17234                 | 
17234                 | ' 
17234                 | ' '-------------------- pop
17234                 | ' 
17234                 | ' sub do_pop()
17234                 | _do_pop
17234                 | ' if gosubtop>0 then  gosubtop -=1 
17234     50 00 00 FF 
17238     34 E5 05 F1 | 	add	objptr, ##41268
1723c     F2 00 02 FB | 	rdlong	_var01, objptr
17240     50 00 00 FF 
17244     34 E5 85 F1 | 	sub	objptr, ##41268
17248     01 00 56 F2 | 	cmps	_var01, #1 wc
1724c     50 00 00 3F 
17250     34 E5 05 31 |  if_ae	add	objptr, ##41268
17254     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
17258     01 00 86 31 |  if_ae	sub	_var01, #1
1725c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
17260     50 00 00 3F 
17264     34 E5 85 31 |  if_ae	sub	objptr, ##41268
17268                 | _do_pop_ret
17268     2D 00 64 FD | 	ret
1726c                 | 
1726c                 | ' 
1726c                 | ' '-------------------- position
1726c                 | ' 
1726c                 | ' sub do_position
1726c                 | _do_position
1726c     01 4A 05 F6 | 	mov	COUNT_, #1
17270     A8 00 A0 FD | 	call	#pushregs_
17274     18 F0 07 F1 | 	add	ptra, #24
17278     10 59 BF FD | 	call	#_pop
1727c     FD 14 02 F6 | 	mov	arg02, result1
17280     FE 12 02 F6 | 	mov	arg01, result2
17284     FF 26 02 F6 | 	mov	local01, result3
17288     A7 14 62 FC | 	wrlong	arg02, fp
1728c     04 4E 05 F1 | 	add	fp, #4
17290     A7 12 62 FC | 	wrlong	arg01, fp
17294     04 4E 05 F1 | 	add	fp, #4
17298     A7 26 62 FC | 	wrlong	local01, fp
1729c     08 4E 85 F1 | 	sub	fp, #8
172a0     E8 58 BF FD | 	call	#_pop
172a4     FF 26 02 F6 | 	mov	local01, result3
172a8     0C 4E 05 F1 | 	add	fp, #12
172ac     A7 FA 61 FC | 	wrlong	result1, fp
172b0     04 4E 05 F1 | 	add	fp, #4
172b4     A7 FC 61 FC | 	wrlong	result2, fp
172b8     04 4E 05 F1 | 	add	fp, #4
172bc     A7 26 62 FC | 	wrlong	local01, fp
172c0     08 4E 85 F1 | 	sub	fp, #8
172c4     A7 12 02 F6 | 	mov	arg01, fp
172c8     0C 4E 85 F1 | 	sub	fp, #12
172cc     A0 5A BF FD | 	call	#_converttoint
172d0     FD 26 02 F6 | 	mov	local01, result1
172d4     A7 12 02 F6 | 	mov	arg01, fp
172d8     94 5A BF FD | 	call	#_converttoint
172dc     FD 14 02 F6 | 	mov	arg02, result1
172e0     13 13 02 F6 | 	mov	arg01, local01
172e4     A0 BE B0 FD | 	call	#_hg010b_spin2_setcursorpos
172e8     A7 F0 03 F6 | 	mov	ptra, fp
172ec     B2 00 A0 FD | 	call	#popregs_
172f0                 | _do_position_ret
172f0     2D 00 64 FD | 	ret
172f4                 | 
172f4                 | ' 
172f4                 | ' '-------------------- print
172f4                 | ' 
172f4                 | ' sub do_print  
172f4                 | _do_print
172f4     0B 4A 05 F6 | 	mov	COUNT_, #11
172f8     A8 00 A0 FD | 	call	#pushregs_
172fc     00 2C 06 F6 | 	mov	local04, #0
17300     88 58 BF FD | 	call	#_pop
17304     FD 2E 02 F6 | 	mov	local05, result1
17308     FE 30 02 F6 | 	mov	local06, result2
1730c     FF 32 02 F6 | 	mov	local07, result3
17310     17 27 02 F6 | 	mov	local01, local05
17314     18 29 02 F6 | 	mov	local02, local06
17318     19 2B 02 F6 | 	mov	local03, local07
1731c                 | '  
1731c                 | ' r=0
1731c                 | ' t1=pop() 
1731c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1731c     21 2A 0E F2 | 	cmp	local03, #33 wz
17320     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
17324     20 00 90 5D |  if_ne	jmp	#LR__1910
17328     15 2D 02 F6 | 	mov	local04, local03
1732c     5C 58 BF FD | 	call	#_pop
17330     FD 2E 02 F6 | 	mov	local05, result1
17334     FE 30 02 F6 | 	mov	local06, result2
17338     FF 32 02 F6 | 	mov	local07, result3
1733c     17 27 02 F6 | 	mov	local01, local05
17340     18 29 02 F6 | 	mov	local02, local06
17344     19 2B 02 F6 | 	mov	local03, local07
17348                 | LR__1910
17348                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17348     20 2A 0E F2 | 	cmp	local03, #32 wz
1734c     15 2D 02 A6 |  if_e	mov	local04, local03
17350                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17350     FF 2A 0E F2 | 	cmp	local03, #255 wz
17354     10 00 90 5D |  if_ne	jmp	#LR__1911
17358     13 13 02 F6 | 	mov	arg01, local01
1735c     00 14 06 F6 | 	mov	arg02, #0
17360     C8 A1 B0 FD | 	call	#_printerror
17364     D4 04 90 FD | 	jmp	#LR__1930
17368                 | LR__1911
17368                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17368     2B 2A 0E F2 | 	cmp	local03, #43 wz
1736c     14 00 90 5D |  if_ne	jmp	#LR__1912
17370     13 13 02 F6 | 	mov	arg01, local01
17374     8C 59 BF FD | 	call	#_convertstring
17378     FD 2E 02 F6 | 	mov	local05, result1
1737c     17 27 02 F6 | 	mov	local01, local05
17380     1F 2A 06 F6 | 	mov	local03, #31
17384                 | LR__1912
17384                 | ' 
17384                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17384     2C 2A 0E F2 | 	cmp	local03, #44 wz
17388     80 00 90 5D |  if_ne	jmp	#LR__1913
1738c     00 12 06 F6 | 	mov	arg01, #0
17390     E4 37 B1 FD | 	call	#__system___getiolock_0593
17394     FD 12 02 F6 | 	mov	arg01, result1
17398     38 DB B0 FD | 	call	#__system___lockmem
1739c     AA 01 00 FF 
173a0     2B 14 06 F6 | 	mov	arg02, ##@LR__5852
173a4     00 12 06 F6 | 	mov	arg01, #0
173a8     00 16 06 F6 | 	mov	arg03, #0
173ac     1C E8 B0 FD | 	call	#__system___basic_print_string
173b0     0A 34 06 F6 | 	mov	local08, #10
173b4     00 12 06 F6 | 	mov	arg01, #0
173b8     13 15 02 F6 | 	mov	arg02, local01
173bc     00 16 06 F6 | 	mov	arg03, #0
173c0     0A 18 06 F6 | 	mov	arg04, #10
173c4     48 E8 B0 FD | 	call	#__system___basic_print_integer
173c8     FD 36 02 F6 | 	mov	local09, result1
173cc     00 12 06 F6 | 	mov	arg01, #0
173d0     0A 14 06 F6 | 	mov	arg02, #10
173d4     00 16 06 F6 | 	mov	arg03, #0
173d8     98 E7 B0 FD | 	call	#__system___basic_print_char
173dc     01 38 06 F6 | 	mov	local10, #1
173e0     00 12 06 F6 | 	mov	arg01, #0
173e4     90 37 B1 FD | 	call	#__system___getiolock_0593
173e8     FD 00 68 FC | 	wrlong	#0, result1
173ec     00 3A 06 F6 | 	mov	local11, #0
173f0     98 57 BF FD | 	call	#_pop
173f4     FD 2E 02 F6 | 	mov	local05, result1
173f8     FE 30 02 F6 | 	mov	local06, result2
173fc     FF 32 02 F6 | 	mov	local07, result3
17400     17 27 02 F6 | 	mov	local01, local05
17404     18 29 02 F6 | 	mov	local02, local06
17408     19 2B 02 F6 | 	mov	local03, local07
1740c                 | LR__1913
1740c                 | ' 
1740c                 | ' if r=print_mod_comma  then
1740c     21 2C 0E F2 | 	cmp	local04, #33 wz
17410     AC 01 90 5D |  if_ne	jmp	#LR__1918
17414                 | '   if t1.result_type=result_int then print t1.result.iresult,
17414     1C 2A 0E F2 | 	cmp	local03, #28 wz
17418     64 00 90 5D |  if_ne	jmp	#LR__1914
1741c     00 12 06 F6 | 	mov	arg01, #0
17420     54 37 B1 FD | 	call	#__system___getiolock_0593
17424     FD 12 02 F6 | 	mov	arg01, result1
17428     A8 DA B0 FD | 	call	#__system___lockmem
1742c     00 30 06 F6 | 	mov	local06, #0
17430     00 12 06 F6 | 	mov	arg01, #0
17434     13 15 02 F6 | 	mov	arg02, local01
17438     00 16 06 F6 | 	mov	arg03, #0
1743c     0A 18 06 F6 | 	mov	arg04, #10
17440     CC E7 B0 FD | 	call	#__system___basic_print_integer
17444     FD 32 02 F6 | 	mov	local07, result1
17448     18 2F 02 F6 | 	mov	local05, local06
1744c     19 2F 02 F1 | 	add	local05, local07
17450     00 3A 06 F6 | 	mov	local11, #0
17454     00 12 06 F6 | 	mov	arg01, #0
17458     09 14 06 F6 | 	mov	arg02, #9
1745c     00 16 06 F6 | 	mov	arg03, #0
17460     10 E7 B0 FD | 	call	#__system___basic_print_char
17464     FD 36 02 F6 | 	mov	local09, result1
17468     FD 2E 02 F1 | 	add	local05, result1
1746c     00 12 06 F6 | 	mov	arg01, #0
17470     04 37 B1 FD | 	call	#__system___getiolock_0593
17474     FD 00 68 FC | 	wrlong	#0, result1
17478     00 FA 05 F6 | 	mov	result1, #0
1747c     00 38 06 F6 | 	mov	local10, #0
17480                 | LR__1914
17480                 | '   if t1.result_type=result_uint then print t1.result.uresult,
17480     1D 2A 0E F2 | 	cmp	local03, #29 wz
17484     64 00 90 5D |  if_ne	jmp	#LR__1915
17488     00 12 06 F6 | 	mov	arg01, #0
1748c     E8 36 B1 FD | 	call	#__system___getiolock_0593
17490     FD 12 02 F6 | 	mov	arg01, result1
17494     3C DA B0 FD | 	call	#__system___lockmem
17498     00 30 06 F6 | 	mov	local06, #0
1749c     00 12 06 F6 | 	mov	arg01, #0
174a0     13 15 02 F6 | 	mov	arg02, local01
174a4     00 16 06 F6 | 	mov	arg03, #0
174a8     0A 18 06 F6 | 	mov	arg04, #10
174ac     A0 E7 B0 FD | 	call	#__system___basic_print_unsigned
174b0     FD 32 02 F6 | 	mov	local07, result1
174b4     18 2F 02 F6 | 	mov	local05, local06
174b8     19 2F 02 F1 | 	add	local05, local07
174bc     00 3A 06 F6 | 	mov	local11, #0
174c0     00 12 06 F6 | 	mov	arg01, #0
174c4     09 14 06 F6 | 	mov	arg02, #9
174c8     00 16 06 F6 | 	mov	arg03, #0
174cc     A4 E6 B0 FD | 	call	#__system___basic_print_char
174d0     FD 36 02 F6 | 	mov	local09, result1
174d4     FD 2E 02 F1 | 	add	local05, result1
174d8     00 12 06 F6 | 	mov	arg01, #0
174dc     98 36 B1 FD | 	call	#__system___getiolock_0593
174e0     FD 00 68 FC | 	wrlong	#0, result1
174e4     00 FA 05 F6 | 	mov	result1, #0
174e8     00 38 06 F6 | 	mov	local10, #0
174ec                 | LR__1915
174ec                 | '   if t1.result_type=result_float then print t1.result.fresult,
174ec     1E 2A 0E F2 | 	cmp	local03, #30 wz
174f0     64 00 90 5D |  if_ne	jmp	#LR__1916
174f4     00 12 06 F6 | 	mov	arg01, #0
174f8     7C 36 B1 FD | 	call	#__system___getiolock_0593
174fc     FD 12 02 F6 | 	mov	arg01, result1
17500     D0 D9 B0 FD | 	call	#__system___lockmem
17504     00 30 06 F6 | 	mov	local06, #0
17508     00 12 06 F6 | 	mov	arg01, #0
1750c     13 15 02 F6 | 	mov	arg02, local01
17510     00 16 06 F6 | 	mov	arg03, #0
17514     23 18 06 F6 | 	mov	arg04, #35
17518     4C 0E B1 FD | 	call	#__system___basic_print_float
1751c     FD 32 02 F6 | 	mov	local07, result1
17520     18 2F 02 F6 | 	mov	local05, local06
17524     19 2F 02 F1 | 	add	local05, local07
17528     00 3A 06 F6 | 	mov	local11, #0
1752c     00 12 06 F6 | 	mov	arg01, #0
17530     09 14 06 F6 | 	mov	arg02, #9
17534     00 16 06 F6 | 	mov	arg03, #0
17538     38 E6 B0 FD | 	call	#__system___basic_print_char
1753c     FD 36 02 F6 | 	mov	local09, result1
17540     FD 2E 02 F1 | 	add	local05, result1
17544     00 12 06 F6 | 	mov	arg01, #0
17548     2C 36 B1 FD | 	call	#__system___getiolock_0593
1754c     FD 00 68 FC | 	wrlong	#0, result1
17550     00 FA 05 F6 | 	mov	result1, #0
17554     00 38 06 F6 | 	mov	local10, #0
17558                 | LR__1916
17558                 | '   if t1.result_type=result_string then print t1.result.sresult,
17558     1F 2A 0E F2 | 	cmp	local03, #31 wz
1755c     60 00 90 5D |  if_ne	jmp	#LR__1917
17560     00 12 06 F6 | 	mov	arg01, #0
17564     10 36 B1 FD | 	call	#__system___getiolock_0593
17568     FD 12 02 F6 | 	mov	arg01, result1
1756c     64 D9 B0 FD | 	call	#__system___lockmem
17570     00 30 06 F6 | 	mov	local06, #0
17574     00 12 06 F6 | 	mov	arg01, #0
17578     13 15 02 F6 | 	mov	arg02, local01
1757c     00 16 06 F6 | 	mov	arg03, #0
17580     48 E6 B0 FD | 	call	#__system___basic_print_string
17584     FD 32 02 F6 | 	mov	local07, result1
17588     18 2F 02 F6 | 	mov	local05, local06
1758c     19 2F 02 F1 | 	add	local05, local07
17590     00 3A 06 F6 | 	mov	local11, #0
17594     00 12 06 F6 | 	mov	arg01, #0
17598     09 14 06 F6 | 	mov	arg02, #9
1759c     00 16 06 F6 | 	mov	arg03, #0
175a0     D0 E5 B0 FD | 	call	#__system___basic_print_char
175a4     FD 36 02 F6 | 	mov	local09, result1
175a8     FD 2E 02 F1 | 	add	local05, result1
175ac     00 12 06 F6 | 	mov	arg01, #0
175b0     C4 35 B1 FD | 	call	#__system___getiolock_0593
175b4     FD 00 68 FC | 	wrlong	#0, result1
175b8     00 FA 05 F6 | 	mov	result1, #0
175bc     00 38 06 F6 | 	mov	local10, #0
175c0                 | LR__1917
175c0                 | LR__1918
175c0                 | ' if r=print_mod_semicolon then 
175c0     22 2C 0E F2 | 	cmp	local04, #34 wz
175c4     1C 01 90 5D |  if_ne	jmp	#LR__1923
175c8                 | '   if t1.result_type=result_int then print t1.result.iresult;
175c8     1C 2A 0E F2 | 	cmp	local03, #28 wz
175cc     50 00 90 5D |  if_ne	jmp	#LR__1919
175d0     00 12 06 F6 | 	mov	arg01, #0
175d4     A0 35 B1 FD | 	call	#__system___getiolock_0593
175d8     FD 12 02 F6 | 	mov	arg01, result1
175dc     F4 D8 B0 FD | 	call	#__system___lockmem
175e0     00 30 06 F6 | 	mov	local06, #0
175e4     00 38 06 F6 | 	mov	local10, #0
175e8     0A 3A 06 F6 | 	mov	local11, #10
175ec     00 12 06 F6 | 	mov	arg01, #0
175f0     13 15 02 F6 | 	mov	arg02, local01
175f4     00 16 06 F6 | 	mov	arg03, #0
175f8     0A 18 06 F6 | 	mov	arg04, #10
175fc     10 E6 B0 FD | 	call	#__system___basic_print_integer
17600     FD 32 02 F6 | 	mov	local07, result1
17604     18 2F 02 F6 | 	mov	local05, local06
17608     19 2F 02 F1 | 	add	local05, local07
1760c     00 12 06 F6 | 	mov	arg01, #0
17610     64 35 B1 FD | 	call	#__system___getiolock_0593
17614     FD 00 68 FC | 	wrlong	#0, result1
17618     00 FA 05 F6 | 	mov	result1, #0
1761c     00 36 06 F6 | 	mov	local09, #0
17620                 | LR__1919
17620                 | '   if t1.result_type=result_uint then print t1.result.uresult;
17620     1D 2A 0E F2 | 	cmp	local03, #29 wz
17624     50 00 90 5D |  if_ne	jmp	#LR__1920
17628     00 12 06 F6 | 	mov	arg01, #0
1762c     48 35 B1 FD | 	call	#__system___getiolock_0593
17630     FD 12 02 F6 | 	mov	arg01, result1
17634     9C D8 B0 FD | 	call	#__system___lockmem
17638     00 30 06 F6 | 	mov	local06, #0
1763c     00 38 06 F6 | 	mov	local10, #0
17640     0A 3A 06 F6 | 	mov	local11, #10
17644     00 12 06 F6 | 	mov	arg01, #0
17648     13 15 02 F6 | 	mov	arg02, local01
1764c     00 16 06 F6 | 	mov	arg03, #0
17650     0A 18 06 F6 | 	mov	arg04, #10
17654     F8 E5 B0 FD | 	call	#__system___basic_print_unsigned
17658     FD 32 02 F6 | 	mov	local07, result1
1765c     18 2F 02 F6 | 	mov	local05, local06
17660     19 2F 02 F1 | 	add	local05, local07
17664     00 12 06 F6 | 	mov	arg01, #0
17668     0C 35 B1 FD | 	call	#__system___getiolock_0593
1766c     FD 00 68 FC | 	wrlong	#0, result1
17670     00 FA 05 F6 | 	mov	result1, #0
17674     00 36 06 F6 | 	mov	local09, #0
17678                 | LR__1920
17678                 | '   if t1.result_type=result_float then print t1.result.fresult;
17678     1E 2A 0E F2 | 	cmp	local03, #30 wz
1767c     30 00 90 5D |  if_ne	jmp	#LR__1921
17680     00 12 06 F6 | 	mov	arg01, #0
17684     F0 34 B1 FD | 	call	#__system___getiolock_0593
17688     FD 12 02 F6 | 	mov	arg01, result1
1768c     44 D8 B0 FD | 	call	#__system___lockmem
17690     00 12 06 F6 | 	mov	arg01, #0
17694     13 15 02 F6 | 	mov	arg02, local01
17698     00 16 06 F6 | 	mov	arg03, #0
1769c     23 18 06 F6 | 	mov	arg04, #35
176a0     C4 0C B1 FD | 	call	#__system___basic_print_float
176a4     00 12 06 F6 | 	mov	arg01, #0
176a8     CC 34 B1 FD | 	call	#__system___getiolock_0593
176ac     FD 00 68 FC | 	wrlong	#0, result1
176b0                 | LR__1921
176b0                 | '   if t1.result_type=result_string then print t1.result.sresult;
176b0     1F 2A 0E F2 | 	cmp	local03, #31 wz
176b4     2C 00 90 5D |  if_ne	jmp	#LR__1922
176b8     00 12 06 F6 | 	mov	arg01, #0
176bc     B8 34 B1 FD | 	call	#__system___getiolock_0593
176c0     FD 12 02 F6 | 	mov	arg01, result1
176c4     0C D8 B0 FD | 	call	#__system___lockmem
176c8     00 12 06 F6 | 	mov	arg01, #0
176cc     13 15 02 F6 | 	mov	arg02, local01
176d0     00 16 06 F6 | 	mov	arg03, #0
176d4     F4 E4 B0 FD | 	call	#__system___basic_print_string
176d8     00 12 06 F6 | 	mov	arg01, #0
176dc     98 34 B1 FD | 	call	#__system___getiolock_0593
176e0     FD 00 68 FC | 	wrlong	#0, result1
176e4                 | LR__1922
176e4                 | LR__1923
176e4                 | ' if r=0 then 
176e4     00 2C 0E F2 | 	cmp	local04, #0 wz
176e8     1C 01 90 5D |  if_ne	jmp	#LR__1928
176ec                 | '   if t1.result_type=result_int then print t1.result.iresult
176ec     1C 2A 0E F2 | 	cmp	local03, #28 wz
176f0     40 00 90 5D |  if_ne	jmp	#LR__1924
176f4     00 12 06 F6 | 	mov	arg01, #0
176f8     7C 34 B1 FD | 	call	#__system___getiolock_0593
176fc     FD 12 02 F6 | 	mov	arg01, result1
17700     D0 D7 B0 FD | 	call	#__system___lockmem
17704     00 12 06 F6 | 	mov	arg01, #0
17708     13 15 02 F6 | 	mov	arg02, local01
1770c     00 16 06 F6 | 	mov	arg03, #0
17710     0A 18 06 F6 | 	mov	arg04, #10
17714     F8 E4 B0 FD | 	call	#__system___basic_print_integer
17718     00 12 06 F6 | 	mov	arg01, #0
1771c     0A 14 06 F6 | 	mov	arg02, #10
17720     00 16 06 F6 | 	mov	arg03, #0
17724     4C E4 B0 FD | 	call	#__system___basic_print_char
17728     00 12 06 F6 | 	mov	arg01, #0
1772c     48 34 B1 FD | 	call	#__system___getiolock_0593
17730     FD 00 68 FC | 	wrlong	#0, result1
17734                 | LR__1924
17734                 | '   if t1.result_type=result_uint then print t1.result.uresult
17734     1D 2A 0E F2 | 	cmp	local03, #29 wz
17738     40 00 90 5D |  if_ne	jmp	#LR__1925
1773c     00 12 06 F6 | 	mov	arg01, #0
17740     34 34 B1 FD | 	call	#__system___getiolock_0593
17744     FD 12 02 F6 | 	mov	arg01, result1
17748     88 D7 B0 FD | 	call	#__system___lockmem
1774c     00 12 06 F6 | 	mov	arg01, #0
17750     13 15 02 F6 | 	mov	arg02, local01
17754     00 16 06 F6 | 	mov	arg03, #0
17758     0A 18 06 F6 | 	mov	arg04, #10
1775c     F0 E4 B0 FD | 	call	#__system___basic_print_unsigned
17760     00 12 06 F6 | 	mov	arg01, #0
17764     0A 14 06 F6 | 	mov	arg02, #10
17768     00 16 06 F6 | 	mov	arg03, #0
1776c     04 E4 B0 FD | 	call	#__system___basic_print_char
17770     00 12 06 F6 | 	mov	arg01, #0
17774     00 34 B1 FD | 	call	#__system___getiolock_0593
17778     FD 00 68 FC | 	wrlong	#0, result1
1777c                 | LR__1925
1777c                 | '   if t1.result_type=result_float then print t1.result.fresult
1777c     1E 2A 0E F2 | 	cmp	local03, #30 wz
17780     40 00 90 5D |  if_ne	jmp	#LR__1926
17784     00 12 06 F6 | 	mov	arg01, #0
17788     EC 33 B1 FD | 	call	#__system___getiolock_0593
1778c     FD 12 02 F6 | 	mov	arg01, result1
17790     40 D7 B0 FD | 	call	#__system___lockmem
17794     00 12 06 F6 | 	mov	arg01, #0
17798     13 15 02 F6 | 	mov	arg02, local01
1779c     00 16 06 F6 | 	mov	arg03, #0
177a0     23 18 06 F6 | 	mov	arg04, #35
177a4     C0 0B B1 FD | 	call	#__system___basic_print_float
177a8     00 12 06 F6 | 	mov	arg01, #0
177ac     0A 14 06 F6 | 	mov	arg02, #10
177b0     00 16 06 F6 | 	mov	arg03, #0
177b4     BC E3 B0 FD | 	call	#__system___basic_print_char
177b8     00 12 06 F6 | 	mov	arg01, #0
177bc     B8 33 B1 FD | 	call	#__system___getiolock_0593
177c0     FD 00 68 FC | 	wrlong	#0, result1
177c4                 | LR__1926
177c4                 | '   if t1.result_type=result_string then print t1.result.sresult
177c4     1F 2A 0E F2 | 	cmp	local03, #31 wz
177c8     3C 00 90 5D |  if_ne	jmp	#LR__1927
177cc     00 12 06 F6 | 	mov	arg01, #0
177d0     A4 33 B1 FD | 	call	#__system___getiolock_0593
177d4     FD 12 02 F6 | 	mov	arg01, result1
177d8     F8 D6 B0 FD | 	call	#__system___lockmem
177dc     00 12 06 F6 | 	mov	arg01, #0
177e0     13 15 02 F6 | 	mov	arg02, local01
177e4     00 16 06 F6 | 	mov	arg03, #0
177e8     E0 E3 B0 FD | 	call	#__system___basic_print_string
177ec     00 12 06 F6 | 	mov	arg01, #0
177f0     0A 14 06 F6 | 	mov	arg02, #10
177f4     00 16 06 F6 | 	mov	arg03, #0
177f8     78 E3 B0 FD | 	call	#__system___basic_print_char
177fc     00 12 06 F6 | 	mov	arg01, #0
17800     74 33 B1 FD | 	call	#__system___getiolock_0593
17804     FD 00 68 FC | 	wrlong	#0, result1
17808                 | LR__1927
17808                 | LR__1928
17808                 | ' if r=print_mod_empty then print
17808     20 2C 0E F2 | 	cmp	local04, #32 wz
1780c     2C 00 90 5D |  if_ne	jmp	#LR__1929
17810     00 12 06 F6 | 	mov	arg01, #0
17814     60 33 B1 FD | 	call	#__system___getiolock_0593
17818     FD 12 02 F6 | 	mov	arg01, result1
1781c     B4 D6 B0 FD | 	call	#__system___lockmem
17820     00 12 06 F6 | 	mov	arg01, #0
17824     0A 14 06 F6 | 	mov	arg02, #10
17828     00 16 06 F6 | 	mov	arg03, #0
1782c     44 E3 B0 FD | 	call	#__system___basic_print_char
17830     00 12 06 F6 | 	mov	arg01, #0
17834     40 33 B1 FD | 	call	#__system___getiolock_0593
17838     FD 00 68 FC | 	wrlong	#0, result1
1783c                 | LR__1929
1783c                 | LR__1930
1783c     A7 F0 03 F6 | 	mov	ptra, fp
17840     B2 00 A0 FD | 	call	#popregs_
17844                 | _do_print_ret
17844     2D 00 64 FD | 	ret
17848                 | 
17848                 | ' 
17848                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
17848                 | ' 
17848                 | ' sub do_push
17848                 | _do_push
17848                 | ' if stackpointer<maxstack then 
17848     43 00 00 FF 
1784c     58 E4 05 F1 | 	add	objptr, ##34392
17850     F2 00 02 FB | 	rdlong	_var01, objptr
17854     43 00 00 FF 
17858     58 E4 85 F1 | 	sub	objptr, ##34392
1785c     01 00 00 FF 
17860     00 00 56 F2 | 	cmps	_var01, ##512 wc
17864     F8 00 90 3D |  if_ae	jmp	#LR__1940
17868     4A 00 00 FF 
1786c     80 E4 05 F1 | 	add	objptr, ##38016
17870     F2 02 02 FB | 	rdlong	_var02, objptr
17874     01 05 02 F6 | 	mov	_var03, _var02
17878     01 04 66 F0 | 	shl	_var03, #1
1787c     01 05 02 F1 | 	add	_var03, _var02
17880     02 04 66 F0 | 	shl	_var03, #2
17884     03 00 00 FF 
17888     04 E4 85 F1 | 	sub	objptr, ##1540
1788c     F2 04 02 F1 | 	add	_var03, objptr
17890     02 01 02 FB | 	rdlong	_var01, _var03
17894     04 04 06 F1 | 	add	_var03, #4
17898     02 07 02 FB | 	rdlong	_var04, _var03
1789c     01 05 02 F6 | 	mov	_var03, _var02
178a0     01 04 66 F0 | 	shl	_var03, #1
178a4     01 05 02 F1 | 	add	_var03, _var02
178a8     02 04 66 F0 | 	shl	_var03, #2
178ac     F2 04 02 F1 | 	add	_var03, objptr
178b0     08 04 06 F1 | 	add	_var03, #8
178b4     02 03 02 FB | 	rdlong	_var02, _var03
178b8     04 00 00 FF 
178bc     24 E4 85 F1 | 	sub	objptr, ##2084
178c0     F2 04 02 FB | 	rdlong	_var03, objptr
178c4     02 09 02 F6 | 	mov	_var05, _var03
178c8     01 08 66 F0 | 	shl	_var05, #1
178cc     02 09 02 F1 | 	add	_var05, _var03
178d0     02 08 66 F0 | 	shl	_var05, #2
178d4     0C 00 00 FF 
178d8     0C E4 85 F1 | 	sub	objptr, ##6156
178dc     F2 08 02 F1 | 	add	_var05, objptr
178e0     04 01 62 FC | 	wrlong	_var01, _var05
178e4     0C 00 00 FF 
178e8     0C E4 05 F1 | 	add	objptr, ##6156
178ec     F2 08 02 FB | 	rdlong	_var05, objptr
178f0     04 05 02 F6 | 	mov	_var03, _var05
178f4     01 04 66 F0 | 	shl	_var03, #1
178f8     04 05 02 F1 | 	add	_var03, _var05
178fc     02 04 66 F0 | 	shl	_var03, #2
17900     0C 00 00 FF 
17904     0C E4 85 F1 | 	sub	objptr, ##6156
17908     F2 04 02 F1 | 	add	_var03, objptr
1790c     04 04 06 F1 | 	add	_var03, #4
17910     02 07 62 FC | 	wrlong	_var04, _var03
17914     0C 00 00 FF 
17918     0C E4 05 F1 | 	add	objptr, ##6156
1791c     F2 08 02 FB | 	rdlong	_var05, objptr
17920     04 07 02 F6 | 	mov	_var04, _var05
17924     01 06 66 F0 | 	shl	_var04, #1
17928     04 07 02 F1 | 	add	_var04, _var05
1792c     02 06 66 F0 | 	shl	_var04, #2
17930     0C 00 00 FF 
17934     0C E4 85 F1 | 	sub	objptr, ##6156
17938     F2 06 02 F1 | 	add	_var04, objptr
1793c     08 06 06 F1 | 	add	_var04, #8
17940     03 03 62 FC | 	wrlong	_var02, _var04
17944     0C 00 00 FF 
17948     0C E4 05 F1 | 	add	objptr, ##6156
1794c     F2 00 02 FB | 	rdlong	_var01, objptr
17950     01 00 06 F1 | 	add	_var01, #1
17954     F2 00 62 FC | 	wrlong	_var01, objptr
17958     43 00 00 FF 
1795c     58 E4 85 F1 | 	sub	objptr, ##34392
17960                 | LR__1940
17960                 | _do_push_ret
17960     2D 00 64 FD | 	ret
17964                 | 
17964                 | ' 
17964                 | ' '-------------------- put
17964                 | ' 
17964                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
17964                 | _do_put
17964     03 4A 05 F6 | 	mov	COUNT_, #3
17968     A8 00 A0 FD | 	call	#pushregs_
1796c     28 F0 07 F1 | 	add	ptra, #40
17970     4A 00 00 FF 
17974     80 E4 05 F1 | 	add	objptr, ##38016
17978     F2 1A 02 FB | 	rdlong	arg05, objptr
1797c     0D 19 02 F6 | 	mov	arg04, arg05
17980     01 18 66 F0 | 	shl	arg04, #1
17984     0D 19 02 F1 | 	add	arg04, arg05
17988     02 18 66 F0 | 	shl	arg04, #2
1798c     03 00 00 FF 
17990     04 E4 85 F1 | 	sub	objptr, ##1540
17994     F2 18 02 F1 | 	add	arg04, objptr
17998     0C 1B 02 FB | 	rdlong	arg05, arg04
1799c     A7 1A 62 FC | 	wrlong	arg05, fp
179a0                 | ' 
179a0                 | ' numpar=compiledline(lineptr_e).result.uresult
179a0                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
179a0     04 1A 0E F2 | 	cmp	arg05, #4 wz
179a4     47 00 00 FF 
179a8     7C E4 85 F1 | 	sub	objptr, ##36476
179ac     48 00 90 5D |  if_ne	jmp	#LR__1950
179b0     D8 51 BF FD | 	call	#_pop
179b4     FF 1A 02 F6 | 	mov	arg05, result3
179b8     1C 4E 05 F1 | 	add	fp, #28
179bc     A7 FA 61 FC | 	wrlong	result1, fp
179c0     04 4E 05 F1 | 	add	fp, #4
179c4     A7 FC 61 FC | 	wrlong	result2, fp
179c8     04 4E 05 F1 | 	add	fp, #4
179cc     A7 1A 62 FC | 	wrlong	arg05, fp
179d0     08 4E 85 F1 | 	sub	fp, #8
179d4     A7 12 02 F6 | 	mov	arg01, fp
179d8     1C 4E 85 F1 | 	sub	fp, #28
179dc     90 53 BF FD | 	call	#_converttoint
179e0     52 00 00 FF 
179e4     48 E4 05 F1 | 	add	objptr, ##42056
179e8     F2 FA 61 FC | 	wrlong	result1, objptr
179ec     52 00 00 FF 
179f0     48 E4 85 F1 | 	sub	objptr, ##42056
179f4     18 00 90 FD | 	jmp	#LR__1951
179f8                 | LR__1950
179f8     52 00 00 FF 
179fc     48 E4 05 F1 | 	add	objptr, ##42056
17a00     FF FF FF FF 
17a04     F2 FE 6B FC | 	wrlong	##-1, objptr
17a08     52 00 00 FF 
17a0c     48 E4 85 F1 | 	sub	objptr, ##42056
17a10                 | LR__1951
17a10                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
17a10     A7 1A 02 FB | 	rdlong	arg05, fp
17a14     03 1A 56 F2 | 	cmps	arg05, #3 wc
17a18     40 00 90 CD |  if_b	jmp	#LR__1952
17a1c     6C 51 BF FD | 	call	#_pop
17a20     FF 1A 02 F6 | 	mov	arg05, result3
17a24     1C 4E 05 F1 | 	add	fp, #28
17a28     A7 FA 61 FC | 	wrlong	result1, fp
17a2c     04 4E 05 F1 | 	add	fp, #4
17a30     A7 FC 61 FC | 	wrlong	result2, fp
17a34     04 4E 05 F1 | 	add	fp, #4
17a38     A7 1A 62 FC | 	wrlong	arg05, fp
17a3c     08 4E 85 F1 | 	sub	fp, #8
17a40     A7 12 02 F6 | 	mov	arg01, fp
17a44     1C 4E 85 F1 | 	sub	fp, #28
17a48     24 53 BF FD | 	call	#_converttoint
17a4c     08 4E 05 F1 | 	add	fp, #8
17a50     A7 FA 61 FC | 	wrlong	result1, fp
17a54     08 4E 85 F1 | 	sub	fp, #8
17a58     0C 00 90 FD | 	jmp	#LR__1953
17a5c                 | LR__1952
17a5c     08 4E 05 F1 | 	add	fp, #8
17a60     A7 02 68 FC | 	wrlong	#1, fp
17a64     08 4E 85 F1 | 	sub	fp, #8
17a68                 | LR__1953
17a68                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
17a68     A7 18 02 FB | 	rdlong	arg04, fp
17a6c     02 18 56 F2 | 	cmps	arg04, #2 wc
17a70     3C 00 90 CD |  if_b	jmp	#LR__1954
17a74     14 51 BF FD | 	call	#_pop
17a78     FF 18 02 F6 | 	mov	arg04, result3
17a7c     1C 4E 05 F1 | 	add	fp, #28
17a80     A7 FA 61 FC | 	wrlong	result1, fp
17a84     04 4E 05 F1 | 	add	fp, #4
17a88     A7 FC 61 FC | 	wrlong	result2, fp
17a8c     04 4E 05 F1 | 	add	fp, #4
17a90     A7 18 62 FC | 	wrlong	arg04, fp
17a94     08 4E 85 F1 | 	sub	fp, #8
17a98     A7 12 02 F6 | 	mov	arg01, fp
17a9c     1C 4E 85 F1 | 	sub	fp, #28
17aa0     CC 52 BF FD | 	call	#_converttoint
17aa4     0C 4E 05 F1 | 	add	fp, #12
17aa8     A7 FA 61 FC | 	wrlong	result1, fp
17aac     0C 4E 85 F1 | 	sub	fp, #12
17ab0                 | LR__1954
17ab0     D8 50 BF FD | 	call	#_pop
17ab4     FF 18 02 F6 | 	mov	arg04, result3
17ab8     1C 4E 05 F1 | 	add	fp, #28
17abc     A7 FA 61 FC | 	wrlong	result1, fp
17ac0     04 4E 05 F1 | 	add	fp, #4
17ac4     A7 FC 61 FC | 	wrlong	result2, fp
17ac8     04 4E 05 F1 | 	add	fp, #4
17acc     A7 18 62 FC | 	wrlong	arg04, fp
17ad0     08 4E 85 F1 | 	sub	fp, #8
17ad4     A7 12 02 F6 | 	mov	arg01, fp
17ad8     1C 4E 85 F1 | 	sub	fp, #28
17adc     90 52 BF FD | 	call	#_converttoint
17ae0     04 4E 05 F1 | 	add	fp, #4
17ae4     A7 FA 61 FC | 	wrlong	result1, fp
17ae8     10 4E 05 F1 | 	add	fp, #16
17aec     A7 26 02 FB | 	rdlong	local01, fp
17af0     14 4E 85 F1 | 	sub	fp, #20
17af4     02 26 66 F0 | 	shl	local01, #2
17af8     50 00 00 FF 
17afc     C4 E4 05 F1 | 	add	objptr, ##41156
17b00     F2 26 02 F1 | 	add	local01, objptr
17b04     13 01 68 FC | 	wrlong	#0, local01
17b08                 | ' t1=pop() : channel=converttoint(t1)
17b08                 | ' getres(j)=0
17b08                 | ' if pos>=0 then
17b08     01 00 00 FF 
17b0c     84 E5 05 F1 | 	add	objptr, ##900
17b10     F2 28 02 FB | 	rdlong	local02, objptr
17b14     52 00 00 FF 
17b18     48 E4 85 F1 | 	sub	objptr, ##42056
17b1c     00 28 56 F2 | 	cmps	local02, #0 wc
17b20     C0 01 90 CD |  if_b	jmp	#LR__1960
17b24     10 4E 05 F1 | 	add	fp, #16
17b28     A7 00 68 FC | 	wrlong	#0, fp
17b2c     10 4E 85 F1 | 	sub	fp, #16
17b30                 | '    i=0: do
17b30                 | LR__1955
17b30     14 4E 05 F1 | 	add	fp, #20
17b34     A7 00 68 FC | 	wrlong	#0, fp
17b38     14 4E 85 F1 | 	sub	fp, #20
17b3c                 | '    j=0: do    
17b3c                 | LR__1956
17b3c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17b3c     0C 4E 05 F1 | 	add	fp, #12
17b40     A7 28 02 FB | 	rdlong	local02, fp
17b44     0C 4E 85 F1 | 	sub	fp, #12
17b48     00 04 00 FF 
17b4c     00 28 56 F2 | 	cmps	local02, ##524288 wc
17b50     4C 00 90 3D |  if_ae	jmp	#LR__1957
17b54     14 4E 05 F1 | 	add	fp, #20
17b58     A7 28 02 FB | 	rdlong	local02, fp
17b5c     14 27 02 F6 | 	mov	local01, local02
17b60     4E 00 00 FF 
17b64     B4 E4 05 F1 | 	add	objptr, ##40116
17b68     F2 26 02 F1 | 	add	local01, objptr
17b6c     08 4E 85 F1 | 	sub	fp, #8
17b70     A7 12 02 FB | 	rdlong	arg01, fp
17b74     04 4E 05 F1 | 	add	fp, #4
17b78     A7 18 02 FB | 	rdlong	arg04, fp
17b7c     0A 18 66 F0 | 	shl	arg04, #10
17b80     0C 13 02 F1 | 	add	arg01, arg04
17b84     10 4E 85 F1 | 	sub	fp, #16
17b88     14 13 02 F1 | 	add	arg01, local02
17b8c     09 FB C1 FA | 	rdbyte	result1, arg01
17b90     4E 00 00 FF 
17b94     B4 E4 85 F1 | 	sub	objptr, ##40116
17b98     13 FB 41 FC | 	wrbyte	result1, local01
17b9c     48 00 90 FD | 	jmp	#LR__1958
17ba0                 | LR__1957
17ba0     14 4E 05 F1 | 	add	fp, #20
17ba4     A7 28 02 FB | 	rdlong	local02, fp
17ba8     14 27 02 F6 | 	mov	local01, local02
17bac     4E 00 00 FF 
17bb0     B4 E4 05 F1 | 	add	objptr, ##40116
17bb4     F2 26 02 F1 | 	add	local01, objptr
17bb8     08 4E 85 F1 | 	sub	fp, #8
17bbc     A7 12 02 FB | 	rdlong	arg01, fp
17bc0     04 4E 05 F1 | 	add	fp, #4
17bc4     A7 18 02 FB | 	rdlong	arg04, fp
17bc8     0A 18 66 F0 | 	shl	arg04, #10
17bcc     0C 13 02 F1 | 	add	arg01, arg04
17bd0     10 4E 85 F1 | 	sub	fp, #16
17bd4     14 13 02 F1 | 	add	arg01, local02
17bd8     4E 00 00 FF 
17bdc     B4 E4 85 F1 | 	sub	objptr, ##40116
17be0     C0 9B B0 FD | 	call	#_pspeek
17be4     13 FB 41 FC | 	wrbyte	result1, local01
17be8                 | LR__1958
17be8     14 4E 05 F1 | 	add	fp, #20
17bec     A7 28 02 FB | 	rdlong	local02, fp
17bf0     01 28 06 F1 | 	add	local02, #1
17bf4     A7 28 62 FC | 	wrlong	local02, fp
17bf8     14 4E 85 F1 | 	sub	fp, #20
17bfc     02 00 00 FF 
17c00     00 28 56 F2 | 	cmps	local02, ##1024 wc
17c04     2C 00 90 3D |  if_ae	jmp	#LR__1959
17c08     10 4E 05 F1 | 	add	fp, #16
17c0c     A7 26 02 FB | 	rdlong	local01, fp
17c10     0A 26 66 F0 | 	shl	local01, #10
17c14     04 4E 05 F1 | 	add	fp, #4
17c18     A7 28 02 FB | 	rdlong	local02, fp
17c1c     14 27 02 F1 | 	add	local01, local02
17c20     0C 4E 85 F1 | 	sub	fp, #12
17c24     A7 28 02 FB | 	rdlong	local02, fp
17c28     08 4E 85 F1 | 	sub	fp, #8
17c2c     14 27 5A F2 | 	cmps	local01, local02 wcz
17c30     08 FF 9F ED |  if_be	jmp	#LR__1956
17c34                 | LR__1959
17c34                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
17c34     04 4E 05 F1 | 	add	fp, #4
17c38     A7 12 02 FB | 	rdlong	arg01, fp
17c3c     52 00 00 FF 
17c40     48 E4 05 F1 | 	add	objptr, ##42056
17c44     F2 14 02 FB | 	rdlong	arg02, objptr
17c48     01 14 06 F1 | 	add	arg02, #1
17c4c     03 00 00 FF 
17c50     94 E5 85 F1 | 	sub	objptr, ##1940
17c54     F2 16 02 F6 | 	mov	arg03, objptr
17c58     4E 00 00 FF 
17c5c     B4 E4 85 F1 | 	sub	objptr, ##40116
17c60     04 4E 05 F1 | 	add	fp, #4
17c64     A7 18 02 FB | 	rdlong	arg04, fp
17c68     08 4E 85 F1 | 	sub	fp, #8
17c6c     01 1A 06 F6 | 	mov	arg05, #1
17c70     68 E0 B0 FD | 	call	#__system___basic_put
17c74     18 4E 05 F1 | 	add	fp, #24
17c78     A7 FA 61 FC | 	wrlong	result1, fp
17c7c     14 4E 85 F1 | 	sub	fp, #20
17c80     A7 26 02 FB | 	rdlong	local01, fp
17c84     02 26 66 F0 | 	shl	local01, #2
17c88     50 00 00 FF 
17c8c     C4 E4 05 F1 | 	add	objptr, ##41156
17c90     F2 26 02 F1 | 	add	local01, objptr
17c94     13 FB 61 FC | 	wrlong	result1, local01
17c98                 | '    if 1024*i+j>amount then exit loop
17c98     0C 4E 05 F1 | 	add	fp, #12
17c9c     A7 28 02 FB | 	rdlong	local02, fp
17ca0     0A 28 66 F0 | 	shl	local02, #10
17ca4     04 4E 05 F1 | 	add	fp, #4
17ca8     A7 26 02 FB | 	rdlong	local01, fp
17cac     13 29 02 F1 | 	add	local02, local01
17cb0     0C 4E 85 F1 | 	sub	fp, #12
17cb4     A7 26 02 FB | 	rdlong	local01, fp
17cb8     08 4E 85 F1 | 	sub	fp, #8
17cbc     13 29 5A F2 | 	cmps	local02, local01 wcz
17cc0     50 00 00 FF 
17cc4     C4 E4 85 F1 | 	sub	objptr, ##41156
17cc8     CC 01 90 1D |  if_a	jmp	#LR__1967
17ccc     10 4E 05 F1 | 	add	fp, #16
17cd0     A7 28 02 FB | 	rdlong	local02, fp
17cd4     01 28 06 F1 | 	add	local02, #1
17cd8     A7 28 62 FC | 	wrlong	local02, fp
17cdc     10 4E 85 F1 | 	sub	fp, #16
17ce0     4C FE 9F FD | 	jmp	#LR__1955
17ce4                 | LR__1960
17ce4     10 4E 05 F1 | 	add	fp, #16
17ce8     A7 00 68 FC | 	wrlong	#0, fp
17cec     10 4E 85 F1 | 	sub	fp, #16
17cf0                 | '    i=0: do
17cf0                 | LR__1961
17cf0     14 4E 05 F1 | 	add	fp, #20
17cf4     A7 00 68 FC | 	wrlong	#0, fp
17cf8     14 4E 85 F1 | 	sub	fp, #20
17cfc                 | '    j=0: do  
17cfc                 | LR__1962
17cfc                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17cfc     0C 4E 05 F1 | 	add	fp, #12
17d00     A7 28 02 FB | 	rdlong	local02, fp
17d04     0C 4E 85 F1 | 	sub	fp, #12
17d08     00 04 00 FF 
17d0c     00 28 56 F2 | 	cmps	local02, ##524288 wc
17d10     4C 00 90 3D |  if_ae	jmp	#LR__1963
17d14     14 4E 05 F1 | 	add	fp, #20
17d18     A7 28 02 FB | 	rdlong	local02, fp
17d1c     14 27 02 F6 | 	mov	local01, local02
17d20     4E 00 00 FF 
17d24     B4 E4 05 F1 | 	add	objptr, ##40116
17d28     F2 26 02 F1 | 	add	local01, objptr
17d2c     08 4E 85 F1 | 	sub	fp, #8
17d30     A7 12 02 FB | 	rdlong	arg01, fp
17d34     04 4E 05 F1 | 	add	fp, #4
17d38     A7 18 02 FB | 	rdlong	arg04, fp
17d3c     0A 18 66 F0 | 	shl	arg04, #10
17d40     0C 13 02 F1 | 	add	arg01, arg04
17d44     10 4E 85 F1 | 	sub	fp, #16
17d48     14 13 02 F1 | 	add	arg01, local02
17d4c     09 FB C1 FA | 	rdbyte	result1, arg01
17d50     4E 00 00 FF 
17d54     B4 E4 85 F1 | 	sub	objptr, ##40116
17d58     13 FB 41 FC | 	wrbyte	result1, local01
17d5c     48 00 90 FD | 	jmp	#LR__1964
17d60                 | LR__1963
17d60     14 4E 05 F1 | 	add	fp, #20
17d64     A7 28 02 FB | 	rdlong	local02, fp
17d68     14 27 02 F6 | 	mov	local01, local02
17d6c     4E 00 00 FF 
17d70     B4 E4 05 F1 | 	add	objptr, ##40116
17d74     F2 26 02 F1 | 	add	local01, objptr
17d78     08 4E 85 F1 | 	sub	fp, #8
17d7c     A7 12 02 FB | 	rdlong	arg01, fp
17d80     04 4E 05 F1 | 	add	fp, #4
17d84     A7 18 02 FB | 	rdlong	arg04, fp
17d88     0A 18 66 F0 | 	shl	arg04, #10
17d8c     0C 13 02 F1 | 	add	arg01, arg04
17d90     10 4E 85 F1 | 	sub	fp, #16
17d94     14 13 02 F1 | 	add	arg01, local02
17d98     4E 00 00 FF 
17d9c     B4 E4 85 F1 | 	sub	objptr, ##40116
17da0     00 9A B0 FD | 	call	#_pspeek
17da4     13 FB 41 FC | 	wrbyte	result1, local01
17da8                 | LR__1964
17da8     14 4E 05 F1 | 	add	fp, #20
17dac     A7 28 02 FB | 	rdlong	local02, fp
17db0     01 28 06 F1 | 	add	local02, #1
17db4     A7 28 62 FC | 	wrlong	local02, fp
17db8     14 4E 85 F1 | 	sub	fp, #20
17dbc     02 00 00 FF 
17dc0     00 28 56 F2 | 	cmps	local02, ##1024 wc
17dc4     2C 00 90 3D |  if_ae	jmp	#LR__1965
17dc8     10 4E 05 F1 | 	add	fp, #16
17dcc     A7 26 02 FB | 	rdlong	local01, fp
17dd0     0A 26 66 F0 | 	shl	local01, #10
17dd4     04 4E 05 F1 | 	add	fp, #4
17dd8     A7 28 02 FB | 	rdlong	local02, fp
17ddc     14 27 02 F1 | 	add	local01, local02
17de0     0C 4E 85 F1 | 	sub	fp, #12
17de4     A7 28 02 FB | 	rdlong	local02, fp
17de8     08 4E 85 F1 | 	sub	fp, #8
17dec     14 27 5A F2 | 	cmps	local01, local02 wcz
17df0     08 FF 9F ED |  if_be	jmp	#LR__1962
17df4                 | LR__1965
17df4                 | '    put #channel,,block(0),amount, r : getres(channel)=r
17df4     04 4E 05 F1 | 	add	fp, #4
17df8     A7 12 02 FB | 	rdlong	arg01, fp
17dfc     4E 00 00 FF 
17e00     B4 E4 05 F1 | 	add	objptr, ##40116
17e04     F2 16 02 F6 | 	mov	arg03, objptr
17e08     4E 00 00 FF 
17e0c     B4 E4 85 F1 | 	sub	objptr, ##40116
17e10     04 4E 05 F1 | 	add	fp, #4
17e14     A7 18 02 FB | 	rdlong	arg04, fp
17e18     08 4E 85 F1 | 	sub	fp, #8
17e1c     00 14 06 F6 | 	mov	arg02, #0
17e20     01 1A 06 F6 | 	mov	arg05, #1
17e24     B4 DE B0 FD | 	call	#__system___basic_put
17e28     18 4E 05 F1 | 	add	fp, #24
17e2c     A7 FA 61 FC | 	wrlong	result1, fp
17e30     14 4E 85 F1 | 	sub	fp, #20
17e34     A7 26 02 FB | 	rdlong	local01, fp
17e38     02 26 66 F0 | 	shl	local01, #2
17e3c     50 00 00 FF 
17e40     C4 E4 05 F1 | 	add	objptr, ##41156
17e44     F2 26 02 F1 | 	add	local01, objptr
17e48     13 FB 61 FC | 	wrlong	result1, local01
17e4c                 | '    if 1024*i+j>amount then exit loop
17e4c     0C 4E 05 F1 | 	add	fp, #12
17e50     A7 28 02 FB | 	rdlong	local02, fp
17e54     0A 28 66 F0 | 	shl	local02, #10
17e58     04 4E 05 F1 | 	add	fp, #4
17e5c     A7 26 02 FB | 	rdlong	local01, fp
17e60     13 29 02 F1 | 	add	local02, local01
17e64     0C 4E 85 F1 | 	sub	fp, #12
17e68     A7 2A 02 FB | 	rdlong	local03, fp
17e6c     08 4E 85 F1 | 	sub	fp, #8
17e70     15 29 5A F2 | 	cmps	local02, local03 wcz
17e74     50 00 00 FF 
17e78     C4 E4 85 F1 | 	sub	objptr, ##41156
17e7c     18 00 90 1D |  if_a	jmp	#LR__1966
17e80     10 4E 05 F1 | 	add	fp, #16
17e84     A7 28 02 FB | 	rdlong	local02, fp
17e88     01 28 06 F1 | 	add	local02, #1
17e8c     A7 28 62 FC | 	wrlong	local02, fp
17e90     10 4E 85 F1 | 	sub	fp, #16
17e94     58 FE 9F FD | 	jmp	#LR__1961
17e98                 | LR__1966
17e98                 | LR__1967
17e98     A7 F0 03 F6 | 	mov	ptra, fp
17e9c     B2 00 A0 FD | 	call	#popregs_
17ea0                 | _do_put_ret
17ea0     2D 00 64 FD | 	ret
17ea4                 | 
17ea4                 | ' 
17ea4                 | ' '-------------------- rad
17ea4                 | ' 
17ea4                 | ' sub do_rad
17ea4                 | _do_rad
17ea4     51 00 00 FF 
17ea8     E4 E5 05 F1 | 	add	objptr, ##41956
17eac     00 C0 9F FF 
17eb0     F2 00 68 FC | 	wrlong	##1065353216, objptr
17eb4     04 E4 05 F1 | 	add	objptr, #4
17eb8     00 C0 9F FF 
17ebc     F2 00 68 FC | 	wrlong	##1065353216, objptr
17ec0     51 00 00 FF 
17ec4     E8 E5 85 F1 | 	sub	objptr, ##41960
17ec8                 | _do_rad_ret
17ec8     2D 00 64 FD | 	ret
17ecc                 | 
17ecc                 | ' 
17ecc                 | ' '-------------------- rdpin
17ecc                 | ' 
17ecc                 | ' sub do_rdpin
17ecc                 | _do_rdpin
17ecc     00 4A 05 F6 | 	mov	COUNT_, #0
17ed0     A8 00 A0 FD | 	call	#pushregs_
17ed4     0C F0 07 F1 | 	add	ptra, #12
17ed8     B0 4C BF FD | 	call	#_pop
17edc     A7 FA 61 FC | 	wrlong	result1, fp
17ee0     04 4E 05 F1 | 	add	fp, #4
17ee4     A7 FC 61 FC | 	wrlong	result2, fp
17ee8     04 4E 05 F1 | 	add	fp, #4
17eec     A7 FE 61 FC | 	wrlong	result3, fp
17ef0     08 4E 85 F1 | 	sub	fp, #8
17ef4     A7 12 02 F6 | 	mov	arg01, fp
17ef8     74 4E BF FD | 	call	#_converttoint
17efc     FD FA 89 FA | 	rdpin	result1, result1
17f00     52 00 00 FF 
17f04     4C E4 05 F1 | 	add	objptr, ##42060
17f08     F2 FA 61 FC | 	wrlong	result1, objptr
17f0c     52 00 00 FF 
17f10     4C E4 85 F1 | 	sub	objptr, ##42060
17f14     08 4E 05 F1 | 	add	fp, #8
17f18     A7 3A 68 FC | 	wrlong	#29, fp
17f1c     08 4E 85 F1 | 	sub	fp, #8
17f20     A7 08 68 FC | 	wrlong	#4, fp
17f24     A7 12 02 F6 | 	mov	arg01, fp
17f28     F8 4C BF FD | 	call	#_push
17f2c     A7 F0 03 F6 | 	mov	ptra, fp
17f30     B2 00 A0 FD | 	call	#popregs_
17f34                 | _do_rdpin_ret
17f34     2D 00 64 FD | 	ret
17f38                 | 
17f38                 | ' 
17f38                 | ' ' ----------------  read
17f38                 | ' 
17f38                 | ' function read_next_line() as string
17f38                 | _read_next_line
17f38     07 4A 05 F6 | 	mov	COUNT_, #7
17f3c     A8 00 A0 FD | 	call	#pushregs_
17f40                 | ' if dataptr=$7FFFFFFF then return("")
17f40     50 00 00 FF 
17f44     2C E5 05 F1 | 	add	objptr, ##41260
17f48     F2 26 02 FB | 	rdlong	local01, objptr
17f4c     50 00 00 FF 
17f50     2C E5 85 F1 | 	sub	objptr, ##41260
17f54     FF FF 3F FF 
17f58     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
17f5c     AA 01 00 AF 
17f60     52 FA 05 A6 |  if_e	mov	result1, ##@LR__5853
17f64     BC 01 90 AD |  if_e	jmp	#LR__1977
17f68                 | ' do
17f68                 | LR__1970
17f68     50 00 00 FF 
17f6c     08 E5 05 F1 | 	add	objptr, ##41224
17f70     F2 12 02 F6 | 	mov	arg01, objptr
17f74     24 E4 05 F1 | 	add	objptr, #36
17f78     F2 14 02 FB | 	rdlong	arg02, objptr
17f7c     24 16 06 F6 | 	mov	arg03, #36
17f80     45 00 00 FF 
17f84     60 E4 85 F1 | 	sub	objptr, ##35424
17f88     08 C3 B0 FD | 	call	#_psram_spin2_read1
17f8c                 | '  ' print dataptr
17f8c                 | '   psram.read1(varptr(dataheader),dataptr,36) 
17f8c                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
17f8c     45 00 00 FF 
17f90     3C E4 05 F1 | 	add	objptr, ##35388
17f94     F2 26 02 FB | 	rdlong	local01, objptr
17f98     50 00 00 FF 
17f9c     08 E5 85 F1 | 	sub	objptr, ##41224
17fa0     FF FF 7F FF 
17fa4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
17fa8     50 00 00 5F 
17fac     1C E5 05 51 |  if_ne	add	objptr, ##41244
17fb0     F2 26 02 5B |  if_ne	rdlong	local01, objptr
17fb4     10 E4 05 51 |  if_ne	add	objptr, #16
17fb8     F2 26 62 5C |  if_ne	wrlong	local01, objptr
17fbc     50 00 00 5F 
17fc0     2C E5 85 51 |  if_ne	sub	objptr, ##41260
17fc4     50 00 00 FF 
17fc8     1C E5 05 F1 | 	add	objptr, ##41244
17fcc     F2 26 02 FB | 	rdlong	local01, objptr
17fd0     50 00 00 FF 
17fd4     1C E5 85 F1 | 	sub	objptr, ##41244
17fd8     FF FF 3F FF 
17fdc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
17fe0     50 00 00 5F 
17fe4     08 E5 05 51 |  if_ne	add	objptr, ##41224
17fe8     F2 28 02 5B |  if_ne	rdlong	local02, objptr
17fec     50 00 00 5F 
17ff0     08 E5 85 51 |  if_ne	sub	objptr, ##41224
17ff4     FF FF 7F 5F 
17ff8     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
17ffc     50 00 00 5F 
18000     28 E5 05 51 |  if_ne	add	objptr, ##41256
18004     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
18008     50 00 00 5F 
1800c     28 E5 85 51 |  if_ne	sub	objptr, ##41256
18010     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
18014     50 FF 9F 5D |  if_ne	jmp	#LR__1970
18018                 | ' if dataheader(8)=token_data then 
18018     50 00 00 FF 
1801c     28 E5 05 F1 | 	add	objptr, ##41256
18020     F2 26 02 FB | 	rdlong	local01, objptr
18024     50 00 00 FF 
18028     28 E5 85 F1 | 	sub	objptr, ##41256
1802c     B7 26 0E F2 | 	cmp	local01, #183 wz
18030     E0 00 90 5D |  if_ne	jmp	#LR__1975
18034     50 00 00 FF 
18038     10 E5 05 F1 | 	add	objptr, ##41232
1803c     F2 26 02 FB | 	rdlong	local01, objptr
18040     01 00 00 FF 
18044     1C E5 05 F1 | 	add	objptr, ##796
18048     F2 26 62 FC | 	wrlong	local01, objptr
1804c     01 00 00 FF 
18050     18 E5 85 F1 | 	sub	objptr, ##792
18054     F2 2C 02 FB | 	rdlong	local04, objptr
18058     01 00 00 FF 
1805c     10 E5 05 F1 | 	add	objptr, ##784
18060     F2 2C 62 FC | 	wrlong	local04, objptr
18064                 | '  'print "data found at line "; dataheader(0)
18064                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18064     00 2E 06 F6 | 	mov	local05, #0
18068     52 00 00 FF 
1806c     24 E4 85 F1 | 	sub	objptr, ##42020
18070                 | LR__1971
18070     16 2F 52 F2 | 	cmps	local05, local04 wc
18074     3C 00 90 3D |  if_ae	jmp	#LR__1972
18078     52 00 00 FF 
1807c     2C E4 05 F1 | 	add	objptr, ##42028
18080     F2 12 02 FB | 	rdlong	arg01, objptr
18084     52 00 00 FF 
18088     2C E4 85 F1 | 	sub	objptr, ##42028
1808c     17 13 02 F1 | 	add	arg01, local05
18090     10 97 B0 FD | 	call	#_pspeek
18094     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
18098     7C F0 B0 FD | 	call	#__system__Chr_S
1809c     FD 14 02 F6 | 	mov	arg02, result1
180a0     18 13 02 F6 | 	mov	arg01, local06
180a4     88 CE B0 FD | 	call	#__system___string_concat
180a8     FD 30 02 F6 | 	mov	local06, result1
180ac     01 2E 06 F1 | 	add	local05, #1
180b0     BC FF 9F FD | 	jmp	#LR__1971
180b4                 | LR__1972
180b4     AA 01 00 FF 
180b8     53 16 06 F6 | 	mov	arg03, ##@LR__5854
180bc     01 12 06 F6 | 	mov	arg01, #1
180c0     18 15 02 F6 | 	mov	arg02, local06
180c4     D4 F3 B0 FD | 	call	#__system__Instr
180c8     FD 2E 02 F6 | 	mov	local05, result1
180cc     18 13 02 F6 | 	mov	arg01, local06
180d0     09 33 02 F6 | 	mov	local07, arg01
180d4     97 06 48 FB | 	callpa	#(@LR__1974-@LR__1973)>>2,fcache_load_ptr_
180d8                 | LR__1973
180d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
180dc     01 32 06 51 |  if_ne	add	local07, #1
180e0     F4 FF 9F 5D |  if_ne	jmp	#LR__1973
180e4                 | LR__1974
180e4     09 33 82 F1 | 	sub	local07, arg01
180e8     19 15 02 F6 | 	mov	arg02, local07
180ec     17 15 82 F1 | 	sub	arg02, local05
180f0     04 14 86 F1 | 	sub	arg02, #4
180f4     18 13 02 F6 | 	mov	arg01, local06
180f8     E0 EE B0 FD | 	call	#__system__Right_S
180fc     FD 12 02 F6 | 	mov	arg01, result1
18100     E0 F2 B0 FD | 	call	#__system__RTrim_S
18104     FD 12 02 F6 | 	mov	arg01, result1
18108     18 F2 B0 FD | 	call	#__system__LTrim_S
1810c     FD 30 02 F6 | 	mov	local06, result1
18110     0C 00 90 FD | 	jmp	#LR__1976
18114                 | LR__1975
18114                 | '   return ("") 'todo proper err
18114     AA 01 00 FF 
18118     58 FA 05 F6 | 	mov	result1, ##@LR__5855
1811c     04 00 90 FD | 	jmp	#LR__1977
18120                 | LR__1976
18120                 | ' return readline
18120     18 FB 01 F6 | 	mov	result1, local06
18124                 | LR__1977
18124     A7 F0 03 F6 | 	mov	ptra, fp
18128     B2 00 A0 FD | 	call	#popregs_
1812c                 | _read_next_line_ret
1812c     2D 00 64 FD | 	ret
18130                 | 
18130                 | ' 
18130                 | ' sub do_read
18130                 | _do_read
18130     11 4A 05 F6 | 	mov	COUNT_, #17
18134     A8 00 A0 FD | 	call	#pushregs_
18138     58 F1 07 F1 | 	add	ptra, #344
1813c     4A 00 00 FF 
18140     80 E4 05 F1 | 	add	objptr, ##38016
18144     F2 FE 01 FB | 	rdlong	result3, objptr
18148     FF FC 01 F6 | 	mov	result2, result3
1814c     01 FC 65 F0 | 	shl	result2, #1
18150     FF FC 01 F1 | 	add	result2, result3
18154     02 FC 65 F0 | 	shl	result2, #2
18158     03 00 00 FF 
1815c     04 E4 85 F1 | 	sub	objptr, ##1540
18160     F2 FC 01 F1 | 	add	result2, objptr
18164     FE FC 01 FB | 	rdlong	result2, result2
18168     08 4E 05 F1 | 	add	fp, #8
1816c     A7 FC 61 FC | 	wrlong	result2, fp
18170                 | ' 
18170                 | ' 
18170                 | ' numpar=compiledline(lineptr_e).result.uresult
18170                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
18170     08 4E 85 F1 | 	sub	fp, #8
18174     01 FC 15 F2 | 	cmp	result2, #1 wc
18178     47 00 00 FF 
1817c     7C E4 85 F1 | 	sub	objptr, ##36476
18180     14 00 90 CD |  if_b	jmp	#LR__1980
18184     08 4E 05 F1 | 	add	fp, #8
18188     A7 FC 01 FB | 	rdlong	result2, fp
1818c     08 4E 85 F1 | 	sub	fp, #8
18190     41 FC 15 F2 | 	cmp	result2, #65 wc
18194     50 00 90 CD |  if_b	jmp	#LR__1981
18198                 | LR__1980
18198     00 12 06 F6 | 	mov	arg01, #0
1819c     D8 29 B1 FD | 	call	#__system___getiolock_0593
181a0     FD 12 02 F6 | 	mov	arg01, result1
181a4     2C CD B0 FD | 	call	#__system___lockmem
181a8     AA 01 00 FF 
181ac     59 14 06 F6 | 	mov	arg02, ##@LR__5856
181b0     00 12 06 F6 | 	mov	arg01, #0
181b4     00 16 06 F6 | 	mov	arg03, #0
181b8     10 DA B0 FD | 	call	#__system___basic_print_string
181bc     00 12 06 F6 | 	mov	arg01, #0
181c0     B4 29 B1 FD | 	call	#__system___getiolock_0593
181c4     FD 00 68 FC | 	wrlong	#0, result1
181c8     50 00 00 FF 
181cc     F0 E4 05 F1 | 	add	objptr, ##41200
181d0     F2 14 02 FB | 	rdlong	arg02, objptr
181d4     50 00 00 FF 
181d8     F0 E4 85 F1 | 	sub	objptr, ##41200
181dc     27 12 06 F6 | 	mov	arg01, #39
181e0     48 93 B0 FD | 	call	#_printerror
181e4     4C 0C 90 FD | 	jmp	#LR__2030
181e8                 | LR__1981
181e8     08 4E 05 F1 | 	add	fp, #8
181ec     A7 16 02 FB | 	rdlong	arg03, fp
181f0     01 16 86 F1 | 	sub	arg03, #1
181f4     28 4F 05 F1 | 	add	fp, #296
181f8     A7 16 62 FC | 	wrlong	arg03, fp
181fc     30 4F 85 F1 | 	sub	fp, #304
18200                 | ' i=numpar-1
18200                 | ' if readline="" then readline=read_next_line() ': print readline
18200     52 00 00 FF 
18204     18 E4 05 F1 | 	add	objptr, ##42008
18208     F2 12 02 FB | 	rdlong	arg01, objptr
1820c     52 00 00 FF 
18210     18 E4 85 F1 | 	sub	objptr, ##42008
18214     AA 01 00 FF 
18218     63 14 06 F6 | 	mov	arg02, ##@LR__5857
1821c     DC CC B0 FD | 	call	#__system___string_cmp
18220     00 FA 0D F2 | 	cmp	result1, #0 wz
18224     18 00 90 5D |  if_ne	jmp	#LR__1982
18228     0C FD BF FD | 	call	#_read_next_line
1822c     52 00 00 FF 
18230     18 E4 05 F1 | 	add	objptr, ##42008
18234     F2 FA 61 FC | 	wrlong	result1, objptr
18238     52 00 00 FF 
1823c     18 E4 85 F1 | 	sub	objptr, ##42008
18240                 | LR__1982
18240                 | ' if readline="" then printerror(55,runheader(0)) :return
18240     52 00 00 FF 
18244     18 E4 05 F1 | 	add	objptr, ##42008
18248     F2 12 02 FB | 	rdlong	arg01, objptr
1824c     52 00 00 FF 
18250     18 E4 85 F1 | 	sub	objptr, ##42008
18254     AA 01 00 FF 
18258     64 14 06 F6 | 	mov	arg02, ##@LR__5858
1825c     9C CC B0 FD | 	call	#__system___string_cmp
18260     00 FA 0D F2 | 	cmp	result1, #0 wz
18264     20 00 90 5D |  if_ne	jmp	#LR__1983
18268     50 00 00 FF 
1826c     F0 E4 05 F1 | 	add	objptr, ##41200
18270     F2 14 02 FB | 	rdlong	arg02, objptr
18274     50 00 00 FF 
18278     F0 E4 85 F1 | 	sub	objptr, ##41200
1827c     37 12 06 F6 | 	mov	arg01, #55
18280     A8 92 B0 FD | 	call	#_printerror
18284     AC 0B 90 FD | 	jmp	#LR__2030
18288                 | LR__1983
18288     34 4F 05 F1 | 	add	fp, #308
1828c     A7 00 68 FC | 	wrlong	#0, fp
18290     2C 4F 85 F1 | 	sub	fp, #300
18294     A7 26 02 FB | 	rdlong	local01, fp
18298     01 26 86 F1 | 	sub	local01, #1
1829c     28 4F 05 F1 | 	add	fp, #296
182a0     A7 26 62 FC | 	wrlong	local01, fp
182a4     30 4F 85 F1 | 	sub	fp, #304
182a8                 | ' j=0
182a8                 | ' i=numpar-1
182a8                 | ' do
182a8                 | LR__1984
182a8                 | '   do
182a8                 | LR__1985
182a8     52 00 00 FF 
182ac     18 E4 05 F1 | 	add	objptr, ##42008
182b0     F2 14 02 FB | 	rdlong	arg02, objptr
182b4     52 00 00 FF 
182b8     18 E4 85 F1 | 	sub	objptr, ##42008
182bc     AA 01 00 FF 
182c0     65 16 06 F6 | 	mov	arg03, ##@LR__5859
182c4     01 12 06 F6 | 	mov	arg01, #1
182c8     D0 F1 B0 FD | 	call	#__system__Instr
182cc     0C 4E 05 F1 | 	add	fp, #12
182d0     A7 FA 61 FC | 	wrlong	result1, fp
182d4                 | '     comma=instr(1,readline,",")  
182d4                 | '       if comma>0  then 
182d4     0C 4E 85 F1 | 	sub	fp, #12
182d8     01 FA 15 F2 | 	cmp	result1, #1 wc
182dc     98 00 90 CD |  if_b	jmp	#LR__1988
182e0     52 00 00 FF 
182e4     18 E4 05 F1 | 	add	objptr, ##42008
182e8     F2 12 02 FB | 	rdlong	arg01, objptr
182ec     52 00 00 FF 
182f0     18 E4 85 F1 | 	sub	objptr, ##42008
182f4     0C 4E 05 F1 | 	add	fp, #12
182f8     A7 14 02 FB | 	rdlong	arg02, fp
182fc     0C 4E 85 F1 | 	sub	fp, #12
18300     01 14 86 F1 | 	sub	arg02, #1
18304     4C EC B0 FD | 	call	#__system__Left_S
18308     04 4E 05 F1 | 	add	fp, #4
1830c     A7 FA 61 FC | 	wrlong	result1, fp
18310     04 4E 85 F1 | 	sub	fp, #4
18314     52 00 00 FF 
18318     18 E4 05 F1 | 	add	objptr, ##42008
1831c     F2 12 02 FB | 	rdlong	arg01, objptr
18320     09 27 02 F6 | 	mov	local01, arg01
18324     52 00 00 FF 
18328     18 E4 85 F1 | 	sub	objptr, ##42008
1832c     09 29 02 F6 | 	mov	local02, arg01
18330     97 06 48 FB | 	callpa	#(@LR__1987-@LR__1986)>>2,fcache_load_ptr_
18334                 | LR__1986
18334     14 FB C9 FA | 	rdbyte	result1, local02 wz
18338     01 28 06 51 |  if_ne	add	local02, #1
1833c     F4 FF 9F 5D |  if_ne	jmp	#LR__1986
18340                 | LR__1987
18340     09 29 82 F1 | 	sub	local02, arg01
18344     14 15 02 F6 | 	mov	arg02, local02
18348     0C 4E 05 F1 | 	add	fp, #12
1834c     A7 16 02 FB | 	rdlong	arg03, fp
18350     0C 4E 85 F1 | 	sub	fp, #12
18354     0B 15 82 F1 | 	sub	arg02, arg03
18358     13 13 02 F6 | 	mov	arg01, local01
1835c     7C EC B0 FD | 	call	#__system__Right_S
18360     52 00 00 FF 
18364     18 E4 05 F1 | 	add	objptr, ##42008
18368     F2 FA 61 FC | 	wrlong	result1, objptr
1836c     52 00 00 FF 
18370     18 E4 85 F1 | 	sub	objptr, ##42008
18374     48 00 90 FD | 	jmp	#LR__1989
18378                 | LR__1988
18378     52 00 00 FF 
1837c     18 E4 05 F1 | 	add	objptr, ##42008
18380     F2 12 02 FB | 	rdlong	arg01, objptr
18384     52 00 00 FF 
18388     18 E4 85 F1 | 	sub	objptr, ##42008
1838c     54 F0 B0 FD | 	call	#__system__RTrim_S
18390     FD 12 02 F6 | 	mov	arg01, result1
18394     8C EF B0 FD | 	call	#__system__LTrim_S
18398     04 4E 05 F1 | 	add	fp, #4
1839c     A7 FA 61 FC | 	wrlong	result1, fp
183a0     04 4E 85 F1 | 	sub	fp, #4
183a4     AA 01 00 FF 
183a8     67 26 06 F6 | 	mov	local01, ##@LR__5860
183ac     52 00 00 FF 
183b0     18 E4 05 F1 | 	add	objptr, ##42008
183b4     F2 26 62 FC | 	wrlong	local01, objptr
183b8     52 00 00 FF 
183bc     18 E4 85 F1 | 	sub	objptr, ##42008
183c0                 | LR__1989
183c0                 | '      if part$<>"" then j=j+1
183c0     04 4E 05 F1 | 	add	fp, #4
183c4     A7 12 02 FB | 	rdlong	arg01, fp
183c8     04 4E 85 F1 | 	sub	fp, #4
183cc     AA 01 00 FF 
183d0     68 14 06 F6 | 	mov	arg02, ##@LR__5861
183d4     24 CB B0 FD | 	call	#__system___string_cmp
183d8     00 FA 0D F2 | 	cmp	result1, #0 wz
183dc     34 4F 05 51 |  if_ne	add	fp, #308
183e0     A7 26 02 5B |  if_ne	rdlong	local01, fp
183e4     01 26 06 51 |  if_ne	add	local01, #1
183e8     A7 26 62 5C |  if_ne	wrlong	local01, fp
183ec     34 4F 85 51 |  if_ne	sub	fp, #308
183f0     30 4F 05 F1 | 	add	fp, #304
183f4     A7 26 02 FB | 	rdlong	local01, fp
183f8     02 26 66 F0 | 	shl	local01, #2
183fc     04 4F 85 F1 | 	sub	fp, #260
18400     A7 26 02 F1 | 	add	local01, fp
18404     28 4E 85 F1 | 	sub	fp, #40
18408     A7 FA 01 FB | 	rdlong	result1, fp
1840c     13 FB 61 FC | 	wrlong	result1, local01
18410     2C 4F 05 F1 | 	add	fp, #300
18414     A7 26 02 FB | 	rdlong	local01, fp
18418     01 26 86 F1 | 	sub	local01, #1
1841c     A7 26 62 FC | 	wrlong	local01, fp
18420     30 4F 85 F1 | 	sub	fp, #304
18424                 | '      args(i)=part$  
18424                 | '      i=i-1
18424                 | '     if readline="" then readline=read_next_line() 
18424     52 00 00 FF 
18428     18 E4 05 F1 | 	add	objptr, ##42008
1842c     F2 12 02 FB | 	rdlong	arg01, objptr
18430     52 00 00 FF 
18434     18 E4 85 F1 | 	sub	objptr, ##42008
18438     AA 01 00 FF 
1843c     69 14 06 F6 | 	mov	arg02, ##@LR__5862
18440     B8 CA B0 FD | 	call	#__system___string_cmp
18444     00 FA 0D F2 | 	cmp	result1, #0 wz
18448     18 00 90 5D |  if_ne	jmp	#LR__1990
1844c     E8 FA BF FD | 	call	#_read_next_line
18450     52 00 00 FF 
18454     18 E4 05 F1 | 	add	objptr, ##42008
18458     F2 FA 61 FC | 	wrlong	result1, objptr
1845c     52 00 00 FF 
18460     18 E4 85 F1 | 	sub	objptr, ##42008
18464                 | LR__1990
18464     30 4F 05 F1 | 	add	fp, #304
18468     A7 26 02 FB | 	rdlong	local01, fp
1846c     30 4F 85 F1 | 	sub	fp, #304
18470     00 26 56 F2 | 	cmps	local01, #0 wc
18474     28 00 90 CD |  if_b	jmp	#LR__1991
18478     52 00 00 FF 
1847c     18 E4 05 F1 | 	add	objptr, ##42008
18480     F2 12 02 FB | 	rdlong	arg01, objptr
18484     52 00 00 FF 
18488     18 E4 85 F1 | 	sub	objptr, ##42008
1848c     AA 01 00 FF 
18490     6A 14 06 F6 | 	mov	arg02, ##@LR__5863
18494     64 CA B0 FD | 	call	#__system___string_cmp
18498     00 FA 0D F2 | 	cmp	result1, #0 wz
1849c     08 FE 9F 5D |  if_ne	jmp	#LR__1985
184a0                 | LR__1991
184a0     30 4F 05 F1 | 	add	fp, #304
184a4     A7 26 02 FB | 	rdlong	local01, fp
184a8     30 4F 85 F1 | 	sub	fp, #304
184ac     00 26 56 F2 | 	cmps	local01, #0 wc
184b0     F4 FD 9F 3D |  if_ae	jmp	#LR__1984
184b4                 | ' if j<numpar then printerror(55,runheader(0))
184b4     34 4F 05 F1 | 	add	fp, #308
184b8     A7 26 02 FB | 	rdlong	local01, fp
184bc     2C 4F 85 F1 | 	sub	fp, #300
184c0     A7 16 02 FB | 	rdlong	arg03, fp
184c4     08 4E 85 F1 | 	sub	fp, #8
184c8     0B 27 52 F2 | 	cmps	local01, arg03 wc
184cc     50 00 00 CF 
184d0     F0 E4 05 C1 |  if_b	add	objptr, ##41200
184d4     F2 14 02 CB |  if_b	rdlong	arg02, objptr
184d8     50 00 00 CF 
184dc     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
184e0     37 12 06 C6 |  if_b	mov	arg01, #55
184e4     44 90 B0 CD |  if_b	call	#_printerror
184e8                 | ' 
184e8                 | ' for i=0 to numpar-1
184e8     30 4F 05 F1 | 	add	fp, #304
184ec     A7 00 68 FC | 	wrlong	#0, fp
184f0     28 4F 85 F1 | 	sub	fp, #296
184f4     A7 2A 02 FB | 	rdlong	local03, fp
184f8     08 4E 85 F1 | 	sub	fp, #8
184fc                 | LR__1992
184fc     30 4F 05 F1 | 	add	fp, #304
18500     A7 2C 02 FB | 	rdlong	local04, fp
18504     30 4F 85 F1 | 	sub	fp, #304
18508     16 27 02 F6 | 	mov	local01, local04
1850c     15 27 52 F2 | 	cmps	local01, local03 wc
18510     20 09 90 3D |  if_ae	jmp	#LR__2029
18514                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
18514     30 4F 05 F1 | 	add	fp, #304
18518     A7 16 02 FB | 	rdlong	arg03, fp
1851c     02 16 66 F0 | 	shl	arg03, #2
18520     04 4F 85 F1 | 	sub	fp, #260
18524     A7 16 02 F1 | 	add	arg03, fp
18528     0B 13 02 FB | 	rdlong	arg01, arg03
1852c     2C 4E 85 F1 | 	sub	fp, #44
18530     74 DE BE FD | 	call	#_isnum
18534     FD 2E 02 F6 | 	mov	local05, result1
18538     30 4F 05 F1 | 	add	fp, #304
1853c     A7 16 02 FB | 	rdlong	arg03, fp
18540     02 16 66 F0 | 	shl	arg03, #2
18544     04 4F 85 F1 | 	sub	fp, #260
18548     A7 30 02 F6 | 	mov	local06, fp
1854c     A7 16 02 F1 | 	add	arg03, fp
18550     0B 13 02 FB | 	rdlong	arg01, arg03
18554     2C 4E 85 F1 | 	sub	fp, #44
18558     38 E2 BE FD | 	call	#_isint
1855c     FD 2E 2A F5 | 	andn	local05, result1 wz
18560     52 00 00 5F 
18564     4C E4 05 51 |  if_ne	add	objptr, ##42060
18568     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1856c     52 00 00 5F 
18570     4C E4 85 51 |  if_ne	sub	objptr, ##42060
18574                 | '   if isint(args(i)) then r=result_int 
18574     30 4F 05 F1 | 	add	fp, #304
18578     A7 2E 02 FB | 	rdlong	local05, fp
1857c     02 2E 66 F0 | 	shl	local05, #2
18580     04 4F 85 F1 | 	sub	fp, #260
18584     A7 2E 02 F1 | 	add	local05, fp
18588     17 13 02 FB | 	rdlong	arg01, local05
1858c     2C 4E 85 F1 | 	sub	fp, #44
18590     00 E2 BE FD | 	call	#_isint
18594     00 FA 0D F2 | 	cmp	result1, #0 wz
18598     52 00 00 5F 
1859c     4C E4 05 51 |  if_ne	add	objptr, ##42060
185a0     F2 38 68 5C |  if_ne	wrlong	#28, objptr
185a4     52 00 00 5F 
185a8     4C E4 85 51 |  if_ne	sub	objptr, ##42060
185ac                 | '   if isdec(args(i)) then r=result_uint 
185ac     30 4F 05 F1 | 	add	fp, #304
185b0     A7 2E 02 FB | 	rdlong	local05, fp
185b4     02 2E 66 F0 | 	shl	local05, #2
185b8     04 4F 85 F1 | 	sub	fp, #260
185bc     A7 2E 02 F1 | 	add	local05, fp
185c0     17 13 02 FB | 	rdlong	arg01, local05
185c4     2C 4E 85 F1 | 	sub	fp, #44
185c8     6C E4 BE FD | 	call	#_isdec
185cc     00 FA 0D F2 | 	cmp	result1, #0 wz
185d0     52 00 00 5F 
185d4     4C E4 05 51 |  if_ne	add	objptr, ##42060
185d8     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
185dc     52 00 00 5F 
185e0     4C E4 85 51 |  if_ne	sub	objptr, ##42060
185e4                 | '   if not isnum(args(i)) then 
185e4     30 4F 05 F1 | 	add	fp, #304
185e8     A7 16 02 FB | 	rdlong	arg03, fp
185ec     02 16 66 F0 | 	shl	arg03, #2
185f0     04 4F 85 F1 | 	sub	fp, #260
185f4     A7 16 02 F1 | 	add	arg03, fp
185f8     0B 13 02 FB | 	rdlong	arg01, arg03
185fc     2C 4E 85 F1 | 	sub	fp, #44
18600     A4 DD BE FD | 	call	#_isnum
18604     FD 2E 22 F6 | 	not	local05, result1
18608     00 2E 0E F2 | 	cmp	local05, #0 wz
1860c     3C 01 90 AD |  if_e	jmp	#LR__1997
18610     52 00 00 FF 
18614     4C E4 05 F1 | 	add	objptr, ##42060
18618     F2 56 68 FC | 	wrlong	#43, objptr
1861c     52 00 00 FF 
18620     4C E4 85 F1 | 	sub	objptr, ##42060
18624     04 4E 05 F1 | 	add	fp, #4
18628     A7 12 02 FB | 	rdlong	arg01, fp
1862c     04 4E 85 F1 | 	sub	fp, #4
18630     09 29 02 F6 | 	mov	local02, arg01
18634     97 06 48 FB | 	callpa	#(@LR__1994-@LR__1993)>>2,fcache_load_ptr_
18638                 | LR__1993
18638     14 FB C9 FA | 	rdbyte	result1, local02 wz
1863c     01 28 06 51 |  if_ne	add	local02, #1
18640     F4 FF 9F 5D |  if_ne	jmp	#LR__1993
18644                 | LR__1994
18644     09 29 82 F1 | 	sub	local02, arg01
18648     14 FB 01 F6 | 	mov	result1, local02
1864c     38 4F 05 F1 | 	add	fp, #312
18650     A7 FA 61 FC | 	wrlong	result1, fp
18654     51 00 00 FF 
18658     D4 E5 05 F1 | 	add	objptr, ##41940
1865c     F2 12 02 FB | 	rdlong	arg01, objptr
18660     FD 12 82 F1 | 	sub	arg01, result1
18664     04 12 86 F1 | 	sub	arg01, #4
18668     03 12 26 F5 | 	andn	arg01, #3
1866c     F2 12 62 FC | 	wrlong	arg01, objptr
18670     51 00 00 FF 
18674     D4 E5 85 F1 | 	sub	objptr, ##41940
18678     A7 14 02 FB | 	rdlong	arg02, fp
1867c     38 4F 85 F1 | 	sub	fp, #312
18680     48 90 B0 FD | 	call	#_pslpoke
18684                 | '     pslpoke memtop,l
18684                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
18684     34 4F 05 F1 | 	add	fp, #308
18688     A7 02 68 FC | 	wrlong	#1, fp
1868c     04 4E 05 F1 | 	add	fp, #4
18690     A7 32 02 FB | 	rdlong	local07, fp
18694     38 4F 85 F1 | 	sub	fp, #312
18698     01 32 06 F1 | 	add	local07, #1
1869c                 | LR__1995
1869c     34 4F 05 F1 | 	add	fp, #308
186a0     A7 2E 02 FB | 	rdlong	local05, fp
186a4     34 4F 85 F1 | 	sub	fp, #308
186a8     19 2F 52 F2 | 	cmps	local05, local07 wc
186ac     7C 00 90 3D |  if_ae	jmp	#LR__1996
186b0     51 00 00 FF 
186b4     D4 E5 05 F1 | 	add	objptr, ##41940
186b8     F2 30 02 FB | 	rdlong	local06, objptr
186bc     51 00 00 FF 
186c0     D4 E5 85 F1 | 	sub	objptr, ##41940
186c4     03 30 06 F1 | 	add	local06, #3
186c8     34 4F 05 F1 | 	add	fp, #308
186cc     A7 34 02 FB | 	rdlong	local08, fp
186d0     1A 31 02 F1 | 	add	local06, local08
186d4     04 4E 85 F1 | 	sub	fp, #4
186d8     A7 36 02 FB | 	rdlong	local09, fp
186dc     02 36 66 F0 | 	shl	local09, #2
186e0     04 4F 85 F1 | 	sub	fp, #260
186e4     A7 38 02 F6 | 	mov	local10, fp
186e8     A7 36 02 F1 | 	add	local09, fp
186ec     1B 13 02 FB | 	rdlong	arg01, local09
186f0     2C 4E 85 F1 | 	sub	fp, #44
186f4     01 3A 06 F6 | 	mov	local11, #1
186f8     1A 15 02 F6 | 	mov	arg02, local08
186fc     01 16 06 F6 | 	mov	arg03, #1
18700     68 E9 B0 FD | 	call	#__system__Mid_S
18704     FD 14 C2 FA | 	rdbyte	arg02, result1
18708     18 13 02 F6 | 	mov	arg01, local06
1870c     4C 90 B0 FD | 	call	#_pspoke
18710     34 4F 05 F1 | 	add	fp, #308
18714     A7 30 02 FB | 	rdlong	local06, fp
18718     18 2F 02 F6 | 	mov	local05, local06
1871c     01 2E 06 F1 | 	add	local05, #1
18720     A7 2E 62 FC | 	wrlong	local05, fp
18724     34 4F 85 F1 | 	sub	fp, #308
18728     70 FF 9F FD | 	jmp	#LR__1995
1872c                 | LR__1996
1872c     51 00 00 FF 
18730     D4 E5 05 F1 | 	add	objptr, ##41940
18734     F2 2E 02 FB | 	rdlong	local05, objptr
18738     51 00 00 FF 
1873c     D4 E5 85 F1 | 	sub	objptr, ##41940
18740     10 4E 05 F1 | 	add	fp, #16
18744     A7 2E 62 FC | 	wrlong	local05, fp
18748     10 4E 85 F1 | 	sub	fp, #16
1874c                 | LR__1997
1874c     3C 44 BF FD | 	call	#_pop
18750     1C 4E 05 F1 | 	add	fp, #28
18754     A7 FA 61 FC | 	wrlong	result1, fp
18758     04 4E 05 F1 | 	add	fp, #4
1875c     A7 FC 61 FC | 	wrlong	result2, fp
18760     04 4E 05 F1 | 	add	fp, #4
18764     A7 FE 61 FC | 	wrlong	result3, fp
18768                 | '   t1=pop() 
18768                 | '   if i>=numpar-j then
18768     1C 4E 85 F1 | 	sub	fp, #28
1876c     A7 2E 02 FB | 	rdlong	local05, fp
18770     17 3D 02 F6 | 	mov	local12, local05
18774     2C 4F 05 F1 | 	add	fp, #300
18778     A7 3E 02 FB | 	rdlong	local13, fp
1877c     1F 41 02 F6 | 	mov	local14, local13
18780     20 3D 82 F1 | 	sub	local12, local14
18784     04 4E 85 F1 | 	sub	fp, #4
18788     A7 42 02 FB | 	rdlong	local15, fp
1878c     30 4F 85 F1 | 	sub	fp, #304
18790     21 45 02 F6 | 	mov	local16, local15
18794     1E 45 52 F2 | 	cmps	local16, local12 wc
18798     80 06 90 CD |  if_b	jmp	#LR__2028
1879c     20 4E 05 F1 | 	add	fp, #32
187a0     A7 3C 02 FB | 	rdlong	local12, fp
187a4     0C 4E 85 F1 | 	sub	fp, #12
187a8     A7 3C 62 FC | 	wrlong	local12, fp
187ac                 | '     vartype=t1.result.twowords(1)
187ac                 | '     select case vartype
187ac     14 4E 85 F1 | 	sub	fp, #20
187b0     1E 47 0A F6 | 	mov	local17, local12 wz
187b4     64 00 90 AD |  if_e	jmp	#LR__1998
187b8     00 47 0E F2 | 	cmp	local17, #256 wz
187bc     6C 00 90 AD |  if_e	jmp	#LR__1999
187c0     01 47 0E F2 | 	cmp	local17, #257 wz
187c4     74 00 90 AD |  if_e	jmp	#LR__2000
187c8     02 47 0E F2 | 	cmp	local17, #258 wz
187cc     7C 00 90 AD |  if_e	jmp	#LR__2001
187d0     03 47 0E F2 | 	cmp	local17, #259 wz
187d4     84 00 90 AD |  if_e	jmp	#LR__2002
187d8     04 47 0E F2 | 	cmp	local17, #260 wz
187dc     8C 00 90 AD |  if_e	jmp	#LR__2003
187e0     05 47 0E F2 | 	cmp	local17, #261 wz
187e4     94 00 90 AD |  if_e	jmp	#LR__2004
187e8     06 47 0E F2 | 	cmp	local17, #262 wz
187ec     9C 00 90 AD |  if_e	jmp	#LR__2005
187f0     07 47 0E F2 | 	cmp	local17, #263 wz
187f4     A4 00 90 AD |  if_e	jmp	#LR__2006
187f8     08 47 0E F2 | 	cmp	local17, #264 wz
187fc     AC 00 90 AD |  if_e	jmp	#LR__2007
18800     09 47 0E F2 | 	cmp	local17, #265 wz
18804     B4 00 90 AD |  if_e	jmp	#LR__2008
18808     0A 47 0E F2 | 	cmp	local17, #266 wz
1880c     BC 00 90 AD |  if_e	jmp	#LR__2009
18810     0B 47 0E F2 | 	cmp	local17, #267 wz
18814     C4 00 90 AD |  if_e	jmp	#LR__2010
18818     D0 00 90 FD | 	jmp	#LR__2011
1881c                 | LR__1998
1881c     18 4E 05 F1 | 	add	fp, #24
18820     A7 18 68 FC | 	wrlong	#12, fp
18824     18 4E 85 F1 | 	sub	fp, #24
18828     CC 00 90 FD | 	jmp	#LR__2012
1882c                 | LR__1999
1882c     18 4E 05 F1 | 	add	fp, #24
18830     A7 18 68 FC | 	wrlong	#12, fp
18834     18 4E 85 F1 | 	sub	fp, #24
18838     BC 00 90 FD | 	jmp	#LR__2012
1883c                 | LR__2000
1883c     18 4E 05 F1 | 	add	fp, #24
18840     A7 02 68 FC | 	wrlong	#1, fp
18844     18 4E 85 F1 | 	sub	fp, #24
18848     AC 00 90 FD | 	jmp	#LR__2012
1884c                 | LR__2001
1884c     18 4E 05 F1 | 	add	fp, #24
18850     A7 02 68 FC | 	wrlong	#1, fp
18854     18 4E 85 F1 | 	sub	fp, #24
18858     9C 00 90 FD | 	jmp	#LR__2012
1885c                 | LR__2002
1885c     18 4E 05 F1 | 	add	fp, #24
18860     A7 04 68 FC | 	wrlong	#2, fp
18864     18 4E 85 F1 | 	sub	fp, #24
18868     8C 00 90 FD | 	jmp	#LR__2012
1886c                 | LR__2003
1886c     18 4E 05 F1 | 	add	fp, #24
18870     A7 04 68 FC | 	wrlong	#2, fp
18874     18 4E 85 F1 | 	sub	fp, #24
18878     7C 00 90 FD | 	jmp	#LR__2012
1887c                 | LR__2004
1887c     18 4E 05 F1 | 	add	fp, #24
18880     A7 08 68 FC | 	wrlong	#4, fp
18884     18 4E 85 F1 | 	sub	fp, #24
18888     6C 00 90 FD | 	jmp	#LR__2012
1888c                 | LR__2005
1888c     18 4E 05 F1 | 	add	fp, #24
18890     A7 08 68 FC | 	wrlong	#4, fp
18894     18 4E 85 F1 | 	sub	fp, #24
18898     5C 00 90 FD | 	jmp	#LR__2012
1889c                 | LR__2006
1889c     18 4E 05 F1 | 	add	fp, #24
188a0     A7 10 68 FC | 	wrlong	#8, fp
188a4     18 4E 85 F1 | 	sub	fp, #24
188a8     4C 00 90 FD | 	jmp	#LR__2012
188ac                 | LR__2007
188ac     18 4E 05 F1 | 	add	fp, #24
188b0     A7 10 68 FC | 	wrlong	#8, fp
188b4     18 4E 85 F1 | 	sub	fp, #24
188b8     3C 00 90 FD | 	jmp	#LR__2012
188bc                 | LR__2008
188bc     18 4E 05 F1 | 	add	fp, #24
188c0     A7 0C 68 FC | 	wrlong	#6, fp
188c4     18 4E 85 F1 | 	sub	fp, #24
188c8     2C 00 90 FD | 	jmp	#LR__2012
188cc                 | LR__2009
188cc     18 4E 05 F1 | 	add	fp, #24
188d0     A7 10 68 FC | 	wrlong	#8, fp
188d4     18 4E 85 F1 | 	sub	fp, #24
188d8     1C 00 90 FD | 	jmp	#LR__2012
188dc                 | LR__2010
188dc     18 4E 05 F1 | 	add	fp, #24
188e0     A7 0A 68 FC | 	wrlong	#5, fp
188e4     18 4E 85 F1 | 	sub	fp, #24
188e8     0C 00 90 FD | 	jmp	#LR__2012
188ec                 | LR__2011
188ec     18 4E 05 F1 | 	add	fp, #24
188f0     A7 18 68 FC | 	wrlong	#12, fp
188f4     18 4E 85 F1 | 	sub	fp, #24
188f8                 | LR__2012
188f8                 | '     if esize=12 andalso t1.result.uresult<$80000 then
188f8     18 4E 05 F1 | 	add	fp, #24
188fc     A7 3C 02 FB | 	rdlong	local12, fp
18900     18 4E 85 F1 | 	sub	fp, #24
18904     0C 3C 0E F2 | 	cmp	local12, #12 wz
18908     74 01 90 5D |  if_ne	jmp	#LR__2017
1890c     1C 4E 05 F1 | 	add	fp, #28
18910     A7 3E 02 FB | 	rdlong	local13, fp
18914     1C 4E 85 F1 | 	sub	fp, #28
18918     00 04 00 FF 
1891c     00 3E 16 F2 | 	cmp	local13, ##524288 wc
18920     5C 01 90 3D |  if_ae	jmp	#LR__2017
18924                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
18924     52 00 00 FF 
18928     4C E4 05 F1 | 	add	objptr, ##42060
1892c     F2 3C 02 FB | 	rdlong	local12, objptr
18930     52 00 00 FF 
18934     4C E4 85 F1 | 	sub	objptr, ##42060
18938     1C 3C 0E F2 | 	cmp	local12, #28 wz
1893c     38 00 90 5D |  if_ne	jmp	#LR__2013
18940     1C 4E 05 F1 | 	add	fp, #28
18944     A7 3C 02 FB | 	rdlong	local12, fp
18948     14 4F 05 F1 | 	add	fp, #276
1894c     A7 3E 02 FB | 	rdlong	local13, fp
18950     1F 45 02 F6 | 	mov	local16, local13
18954     02 44 66 F0 | 	shl	local16, #2
18958     04 4F 85 F1 | 	sub	fp, #260
1895c     A7 42 02 F6 | 	mov	local15, fp
18960     A7 44 02 F1 | 	add	local16, fp
18964     22 13 02 FB | 	rdlong	arg01, local16
18968     00 14 06 F6 | 	mov	arg02, #0
1896c     2C 4E 85 F1 | 	sub	fp, #44
18970     54 FA B0 FD | 	call	#__system____builtin_atoi
18974     1E FB 61 FC | 	wrlong	result1, local12
18978                 | LR__2013
18978                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
18978     52 00 00 FF 
1897c     4C E4 05 F1 | 	add	objptr, ##42060
18980     F2 3C 02 FB | 	rdlong	local12, objptr
18984     52 00 00 FF 
18988     4C E4 85 F1 | 	sub	objptr, ##42060
1898c     1D 3C 0E F2 | 	cmp	local12, #29 wz
18990     38 00 90 5D |  if_ne	jmp	#LR__2014
18994     1C 4E 05 F1 | 	add	fp, #28
18998     A7 3C 02 FB | 	rdlong	local12, fp
1899c     14 4F 05 F1 | 	add	fp, #276
189a0     A7 3E 02 FB | 	rdlong	local13, fp
189a4     1F 45 02 F6 | 	mov	local16, local13
189a8     02 44 66 F0 | 	shl	local16, #2
189ac     04 4F 85 F1 | 	sub	fp, #260
189b0     A7 42 02 F6 | 	mov	local15, fp
189b4     A7 44 02 F1 | 	add	local16, fp
189b8     22 13 02 FB | 	rdlong	arg01, local16
189bc     00 14 06 F6 | 	mov	arg02, #0
189c0     2C 4E 85 F1 | 	sub	fp, #44
189c4     00 FA B0 FD | 	call	#__system____builtin_atoi
189c8     1E FB 61 FC | 	wrlong	result1, local12
189cc                 | LR__2014
189cc                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
189cc     52 00 00 FF 
189d0     4C E4 05 F1 | 	add	objptr, ##42060
189d4     F2 3C 02 FB | 	rdlong	local12, objptr
189d8     52 00 00 FF 
189dc     4C E4 85 F1 | 	sub	objptr, ##42060
189e0     1E 3C 0E F2 | 	cmp	local12, #30 wz
189e4     3C 00 90 5D |  if_ne	jmp	#LR__2015
189e8     30 4F 05 F1 | 	add	fp, #304
189ec     A7 3E 02 FB | 	rdlong	local13, fp
189f0     02 3E 66 F0 | 	shl	local13, #2
189f4     04 4F 85 F1 | 	sub	fp, #260
189f8     A7 44 02 F6 | 	mov	local16, fp
189fc     A7 3E 02 F1 | 	add	local13, fp
18a00     1F 13 02 FB | 	rdlong	arg01, local13
18a04     2C 4E 85 F1 | 	sub	fp, #44
18a08     50 FB B0 FD | 	call	#__system____builtin_atof
18a0c     28 4E 05 F1 | 	add	fp, #40
18a10     A7 FA 61 FC | 	wrlong	result1, fp
18a14     0C 4E 85 F1 | 	sub	fp, #12
18a18     A7 3C 02 FB | 	rdlong	local12, fp
18a1c     1C 4E 85 F1 | 	sub	fp, #28
18a20     1E FB 61 FC | 	wrlong	result1, local12
18a24                 | LR__2015
18a24                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
18a24     52 00 00 FF 
18a28     4C E4 05 F1 | 	add	objptr, ##42060
18a2c     F2 3C 02 FB | 	rdlong	local12, objptr
18a30     52 00 00 FF 
18a34     4C E4 85 F1 | 	sub	objptr, ##42060
18a38     2B 3C 0E F2 | 	cmp	local12, #43 wz
18a3c     18 00 90 5D |  if_ne	jmp	#LR__2016
18a40     1C 4E 05 F1 | 	add	fp, #28
18a44     A7 12 02 FB | 	rdlong	arg01, fp
18a48     0C 4E 85 F1 | 	sub	fp, #12
18a4c     A7 14 02 FB | 	rdlong	arg02, fp
18a50     10 4E 85 F1 | 	sub	fp, #16
18a54     09 15 62 FC | 	wrlong	arg02, arg01
18a58                 | LR__2016
18a58     1C 4E 05 F1 | 	add	fp, #28
18a5c     A7 12 02 FB | 	rdlong	arg01, fp
18a60     1C 4E 85 F1 | 	sub	fp, #28
18a64     08 12 06 F1 | 	add	arg01, #8
18a68     52 00 00 FF 
18a6c     4C E4 05 F1 | 	add	objptr, ##42060
18a70     F2 14 02 FB | 	rdlong	arg02, objptr
18a74     52 00 00 FF 
18a78     4C E4 85 F1 | 	sub	objptr, ##42060
18a7c     09 15 62 FC | 	wrlong	arg02, arg01
18a80                 | LR__2017
18a80                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
18a80     18 4E 05 F1 | 	add	fp, #24
18a84     A7 3C 02 FB | 	rdlong	local12, fp
18a88     18 4E 85 F1 | 	sub	fp, #24
18a8c     0C 3C 0E F2 | 	cmp	local12, #12 wz
18a90     94 01 90 5D |  if_ne	jmp	#LR__2022
18a94     1C 4E 05 F1 | 	add	fp, #28
18a98     A7 3E 02 FB | 	rdlong	local13, fp
18a9c     1C 4E 85 F1 | 	sub	fp, #28
18aa0     00 04 00 FF 
18aa4     00 3E 16 F2 | 	cmp	local13, ##524288 wc
18aa8     7C 01 90 CD |  if_b	jmp	#LR__2022
18aac                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
18aac     52 00 00 FF 
18ab0     4C E4 05 F1 | 	add	objptr, ##42060
18ab4     F2 3C 02 FB | 	rdlong	local12, objptr
18ab8     52 00 00 FF 
18abc     4C E4 85 F1 | 	sub	objptr, ##42060
18ac0     1C 3C 0E F2 | 	cmp	local12, #28 wz
18ac4     40 00 90 5D |  if_ne	jmp	#LR__2018
18ac8     1C 4E 05 F1 | 	add	fp, #28
18acc     A7 3C 02 FB | 	rdlong	local12, fp
18ad0     14 4F 05 F1 | 	add	fp, #276
18ad4     A7 3E 02 FB | 	rdlong	local13, fp
18ad8     1F 45 02 F6 | 	mov	local16, local13
18adc     02 44 66 F0 | 	shl	local16, #2
18ae0     04 4F 85 F1 | 	sub	fp, #260
18ae4     A7 42 02 F6 | 	mov	local15, fp
18ae8     A7 44 02 F1 | 	add	local16, fp
18aec     22 13 02 FB | 	rdlong	arg01, local16
18af0     00 14 06 F6 | 	mov	arg02, #0
18af4     2C 4E 85 F1 | 	sub	fp, #44
18af8     CC F8 B0 FD | 	call	#__system____builtin_atoi
18afc     FD 14 02 F6 | 	mov	arg02, result1
18b00     1E 13 02 F6 | 	mov	arg01, local12
18b04     C4 8B B0 FD | 	call	#_pslpoke
18b08                 | LR__2018
18b08                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
18b08     52 00 00 FF 
18b0c     4C E4 05 F1 | 	add	objptr, ##42060
18b10     F2 3C 02 FB | 	rdlong	local12, objptr
18b14     52 00 00 FF 
18b18     4C E4 85 F1 | 	sub	objptr, ##42060
18b1c     1D 3C 0E F2 | 	cmp	local12, #29 wz
18b20     40 00 90 5D |  if_ne	jmp	#LR__2019
18b24     1C 4E 05 F1 | 	add	fp, #28
18b28     A7 3C 02 FB | 	rdlong	local12, fp
18b2c     14 4F 05 F1 | 	add	fp, #276
18b30     A7 3E 02 FB | 	rdlong	local13, fp
18b34     1F 45 02 F6 | 	mov	local16, local13
18b38     02 44 66 F0 | 	shl	local16, #2
18b3c     04 4F 85 F1 | 	sub	fp, #260
18b40     A7 42 02 F6 | 	mov	local15, fp
18b44     A7 44 02 F1 | 	add	local16, fp
18b48     22 13 02 FB | 	rdlong	arg01, local16
18b4c     00 14 06 F6 | 	mov	arg02, #0
18b50     2C 4E 85 F1 | 	sub	fp, #44
18b54     70 F8 B0 FD | 	call	#__system____builtin_atoi
18b58     FD 14 02 F6 | 	mov	arg02, result1
18b5c     1E 13 02 F6 | 	mov	arg01, local12
18b60     68 8B B0 FD | 	call	#_pslpoke
18b64                 | LR__2019
18b64                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
18b64     52 00 00 FF 
18b68     4C E4 05 F1 | 	add	objptr, ##42060
18b6c     F2 3C 02 FB | 	rdlong	local12, objptr
18b70     52 00 00 FF 
18b74     4C E4 85 F1 | 	sub	objptr, ##42060
18b78     1E 3C 0E F2 | 	cmp	local12, #30 wz
18b7c     4C 00 90 5D |  if_ne	jmp	#LR__2020
18b80     30 4F 05 F1 | 	add	fp, #304
18b84     A7 3E 02 FB | 	rdlong	local13, fp
18b88     02 3E 66 F0 | 	shl	local13, #2
18b8c     04 4F 85 F1 | 	sub	fp, #260
18b90     A7 44 02 F6 | 	mov	local16, fp
18b94     A7 3E 02 F1 | 	add	local13, fp
18b98     1F 13 02 FB | 	rdlong	arg01, local13
18b9c     2C 4E 85 F1 | 	sub	fp, #44
18ba0     B8 F9 B0 FD | 	call	#__system____builtin_atof
18ba4     28 4E 05 F1 | 	add	fp, #40
18ba8     A7 FA 61 FC | 	wrlong	result1, fp
18bac     0C 4E 85 F1 | 	sub	fp, #12
18bb0     A7 3C 02 FB | 	rdlong	local12, fp
18bb4     0C 4E 05 F1 | 	add	fp, #12
18bb8     A7 12 02 F6 | 	mov	arg01, fp
18bbc     28 4E 85 F1 | 	sub	fp, #40
18bc0     09 15 02 FB | 	rdlong	arg02, arg01
18bc4     1E 13 02 F6 | 	mov	arg01, local12
18bc8     00 8B B0 FD | 	call	#_pslpoke
18bcc                 | LR__2020
18bcc                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
18bcc     52 00 00 FF 
18bd0     4C E4 05 F1 | 	add	objptr, ##42060
18bd4     F2 3C 02 FB | 	rdlong	local12, objptr
18bd8     52 00 00 FF 
18bdc     4C E4 85 F1 | 	sub	objptr, ##42060
18be0     2B 3C 0E F2 | 	cmp	local12, #43 wz
18be4     18 00 90 5D |  if_ne	jmp	#LR__2021
18be8     1C 4E 05 F1 | 	add	fp, #28
18bec     A7 12 02 FB | 	rdlong	arg01, fp
18bf0     0C 4E 85 F1 | 	sub	fp, #12
18bf4     A7 14 02 FB | 	rdlong	arg02, fp
18bf8     10 4E 85 F1 | 	sub	fp, #16
18bfc     CC 8A B0 FD | 	call	#_pslpoke
18c00                 | LR__2021
18c00     1C 4E 05 F1 | 	add	fp, #28
18c04     A7 12 02 FB | 	rdlong	arg01, fp
18c08     1C 4E 85 F1 | 	sub	fp, #28
18c0c     08 12 06 F1 | 	add	arg01, #8
18c10     52 00 00 FF 
18c14     4C E4 05 F1 | 	add	objptr, ##42060
18c18     F2 14 02 FB | 	rdlong	arg02, objptr
18c1c     52 00 00 FF 
18c20     4C E4 85 F1 | 	sub	objptr, ##42060
18c24     A4 8A B0 FD | 	call	#_pslpoke
18c28                 | LR__2022
18c28                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
18c28     18 4E 05 F1 | 	add	fp, #24
18c2c     A7 3C 02 FB | 	rdlong	local12, fp
18c30     18 4E 85 F1 | 	sub	fp, #24
18c34     05 3C 0E F2 | 	cmp	local12, #5 wz
18c38     52 00 00 AF 
18c3c     4C E4 05 A1 |  if_e	add	objptr, ##42060
18c40     F2 40 02 AB |  if_e	rdlong	local14, objptr
18c44     52 00 00 AF 
18c48     4C E4 85 A1 |  if_e	sub	objptr, ##42060
18c4c     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
18c50     18 00 90 5D |  if_ne	jmp	#LR__2023
18c54     1C 4E 05 F1 | 	add	fp, #28
18c58     A7 12 02 FB | 	rdlong	arg01, fp
18c5c     0C 4E 85 F1 | 	sub	fp, #12
18c60     A7 14 02 FB | 	rdlong	arg02, fp
18c64     10 4E 85 F1 | 	sub	fp, #16
18c68     60 8A B0 FD | 	call	#_pslpoke
18c6c                 | LR__2023
18c6c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
18c6c     18 4E 05 F1 | 	add	fp, #24
18c70     A7 3C 02 FB | 	rdlong	local12, fp
18c74     18 4E 85 F1 | 	sub	fp, #24
18c78     04 3C 0E F2 | 	cmp	local12, #4 wz
18c7c     54 00 90 5D |  if_ne	jmp	#LR__2024
18c80     52 00 00 FF 
18c84     4C E4 05 F1 | 	add	objptr, ##42060
18c88     F2 40 02 FB | 	rdlong	local14, objptr
18c8c     52 00 00 FF 
18c90     4C E4 85 F1 | 	sub	objptr, ##42060
18c94     2B 40 0E F2 | 	cmp	local14, #43 wz
18c98     38 00 90 AD |  if_e	jmp	#LR__2024
18c9c     1C 4E 05 F1 | 	add	fp, #28
18ca0     A7 3C 02 FB | 	rdlong	local12, fp
18ca4     14 4F 05 F1 | 	add	fp, #276
18ca8     A7 44 02 FB | 	rdlong	local16, fp
18cac     02 44 66 F0 | 	shl	local16, #2
18cb0     04 4F 85 F1 | 	sub	fp, #260
18cb4     A7 44 02 F1 | 	add	local16, fp
18cb8     22 13 02 FB | 	rdlong	arg01, local16
18cbc     00 14 06 F6 | 	mov	arg02, #0
18cc0     2C 4E 85 F1 | 	sub	fp, #44
18cc4     00 F7 B0 FD | 	call	#__system____builtin_atoi
18cc8     FD 14 02 F6 | 	mov	arg02, result1
18ccc     1E 13 02 F6 | 	mov	arg01, local12
18cd0     F8 89 B0 FD | 	call	#_pslpoke
18cd4                 | LR__2024
18cd4                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
18cd4     18 4E 05 F1 | 	add	fp, #24
18cd8     A7 3C 02 FB | 	rdlong	local12, fp
18cdc     18 4E 85 F1 | 	sub	fp, #24
18ce0     02 3C 0E F2 | 	cmp	local12, #2 wz
18ce4     54 00 90 5D |  if_ne	jmp	#LR__2025
18ce8     52 00 00 FF 
18cec     4C E4 05 F1 | 	add	objptr, ##42060
18cf0     F2 40 02 FB | 	rdlong	local14, objptr
18cf4     52 00 00 FF 
18cf8     4C E4 85 F1 | 	sub	objptr, ##42060
18cfc     2B 40 0E F2 | 	cmp	local14, #43 wz
18d00     38 00 90 AD |  if_e	jmp	#LR__2025
18d04     1C 4E 05 F1 | 	add	fp, #28
18d08     A7 3C 02 FB | 	rdlong	local12, fp
18d0c     14 4F 05 F1 | 	add	fp, #276
18d10     A7 44 02 FB | 	rdlong	local16, fp
18d14     02 44 66 F0 | 	shl	local16, #2
18d18     04 4F 85 F1 | 	sub	fp, #260
18d1c     A7 44 02 F1 | 	add	local16, fp
18d20     22 13 02 FB | 	rdlong	arg01, local16
18d24     00 14 06 F6 | 	mov	arg02, #0
18d28     2C 4E 85 F1 | 	sub	fp, #44
18d2c     98 F6 B0 FD | 	call	#__system____builtin_atoi
18d30     FD 14 02 F6 | 	mov	arg02, result1
18d34     1E 13 02 F6 | 	mov	arg01, local12
18d38     D8 89 B0 FD | 	call	#_psdpoke
18d3c                 | LR__2025
18d3c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
18d3c     18 4E 05 F1 | 	add	fp, #24
18d40     A7 3C 02 FB | 	rdlong	local12, fp
18d44     18 4E 85 F1 | 	sub	fp, #24
18d48     01 3C 0E F2 | 	cmp	local12, #1 wz
18d4c     54 00 90 5D |  if_ne	jmp	#LR__2026
18d50     52 00 00 FF 
18d54     4C E4 05 F1 | 	add	objptr, ##42060
18d58     F2 40 02 FB | 	rdlong	local14, objptr
18d5c     52 00 00 FF 
18d60     4C E4 85 F1 | 	sub	objptr, ##42060
18d64     2B 40 0E F2 | 	cmp	local14, #43 wz
18d68     38 00 90 AD |  if_e	jmp	#LR__2026
18d6c     1C 4E 05 F1 | 	add	fp, #28
18d70     A7 3C 02 FB | 	rdlong	local12, fp
18d74     14 4F 05 F1 | 	add	fp, #276
18d78     A7 44 02 FB | 	rdlong	local16, fp
18d7c     02 44 66 F0 | 	shl	local16, #2
18d80     04 4F 85 F1 | 	sub	fp, #260
18d84     A7 44 02 F1 | 	add	local16, fp
18d88     22 13 02 FB | 	rdlong	arg01, local16
18d8c     00 14 06 F6 | 	mov	arg02, #0
18d90     2C 4E 85 F1 | 	sub	fp, #44
18d94     30 F6 B0 FD | 	call	#__system____builtin_atoi
18d98     FD 14 02 F6 | 	mov	arg02, result1
18d9c     1E 13 02 F6 | 	mov	arg01, local12
18da0     B8 89 B0 FD | 	call	#_pspoke
18da4                 | LR__2026
18da4                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
18da4     18 4E 05 F1 | 	add	fp, #24
18da8     A7 3C 02 FB | 	rdlong	local12, fp
18dac     18 4E 85 F1 | 	sub	fp, #24
18db0     06 3C 0E F2 | 	cmp	local12, #6 wz
18db4     64 00 90 5D |  if_ne	jmp	#LR__2027
18db8     52 00 00 FF 
18dbc     4C E4 05 F1 | 	add	objptr, ##42060
18dc0     F2 40 02 FB | 	rdlong	local14, objptr
18dc4     52 00 00 FF 
18dc8     4C E4 85 F1 | 	sub	objptr, ##42060
18dcc     2B 40 0E F2 | 	cmp	local14, #43 wz
18dd0     48 00 90 AD |  if_e	jmp	#LR__2027
18dd4     30 4F 05 F1 | 	add	fp, #304
18dd8     A7 3E 02 FB | 	rdlong	local13, fp
18ddc     02 3E 66 F0 | 	shl	local13, #2
18de0     04 4F 85 F1 | 	sub	fp, #260
18de4     A7 3E 02 F1 | 	add	local13, fp
18de8     1F 13 02 FB | 	rdlong	arg01, local13
18dec     2C 4E 85 F1 | 	sub	fp, #44
18df0     68 F7 B0 FD | 	call	#__system____builtin_atof
18df4     28 4E 05 F1 | 	add	fp, #40
18df8     A7 FA 61 FC | 	wrlong	result1, fp
18dfc     0C 4E 85 F1 | 	sub	fp, #12
18e00     A7 3C 02 FB | 	rdlong	local12, fp
18e04     0C 4E 05 F1 | 	add	fp, #12
18e08     A7 12 02 F6 | 	mov	arg01, fp
18e0c     28 4E 85 F1 | 	sub	fp, #40
18e10     09 15 02 FB | 	rdlong	arg02, arg01
18e14     1E 13 02 F6 | 	mov	arg01, local12
18e18     B0 88 B0 FD | 	call	#_pslpoke
18e1c                 | LR__2027
18e1c                 | LR__2028
18e1c     30 4F 05 F1 | 	add	fp, #304
18e20     A7 40 02 FB | 	rdlong	local14, fp
18e24     01 40 06 F1 | 	add	local14, #1
18e28     A7 40 62 FC | 	wrlong	local14, fp
18e2c     30 4F 85 F1 | 	sub	fp, #304
18e30     C8 F6 9F FD | 	jmp	#LR__1992
18e34                 | LR__2029
18e34                 | LR__2030
18e34     A7 F0 03 F6 | 	mov	ptra, fp
18e38     B2 00 A0 FD | 	call	#popregs_
18e3c                 | _do_read_ret
18e3c     2D 00 64 FD | 	ret
18e40                 | 
18e40                 | ' 
18e40                 | ' '------------------- release
18e40                 | ' 
18e40                 | ' sub do_release
18e40                 | _do_release
18e40     00 4A 05 F6 | 	mov	COUNT_, #0
18e44     A8 00 A0 FD | 	call	#pushregs_
18e48     10 F0 07 F1 | 	add	ptra, #16
18e4c     3C 3D BF FD | 	call	#_pop
18e50     FF 14 02 F6 | 	mov	arg02, result3
18e54     A7 FA 61 FC | 	wrlong	result1, fp
18e58     04 4E 05 F1 | 	add	fp, #4
18e5c     A7 FC 61 FC | 	wrlong	result2, fp
18e60     04 4E 05 F1 | 	add	fp, #4
18e64     A7 14 62 FC | 	wrlong	arg02, fp
18e68     08 4E 85 F1 | 	sub	fp, #8
18e6c     A7 12 02 F6 | 	mov	arg01, fp
18e70     FC 3E BF FD | 	call	#_converttoint
18e74     0C 4E 05 F1 | 	add	fp, #12
18e78     A7 FA 61 FC | 	wrlong	result1, fp
18e7c                 | ' 
18e7c                 | ' t1=pop()
18e7c                 | ' channel=converttoint(t1)
18e7c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
18e7c     0C 4E 85 F1 | 	sub	fp, #12
18e80     00 FA 55 F2 | 	cmps	result1, #0 wc
18e84     44 00 90 CD |  if_b	jmp	#LR__2040
18e88     0C 4E 05 F1 | 	add	fp, #12
18e8c     A7 14 02 FB | 	rdlong	arg02, fp
18e90     0C 4E 85 F1 | 	sub	fp, #12
18e94     08 14 56 F2 | 	cmps	arg02, #8 wc
18e98     30 00 90 3D |  if_ae	jmp	#LR__2040
18e9c     37 00 00 FF 
18ea0     10 E4 05 F1 | 	add	objptr, ##28176
18ea4     F2 12 02 FB | 	rdlong	arg01, objptr
18ea8     37 00 00 FF 
18eac     10 E4 85 F1 | 	sub	objptr, ##28176
18eb0     0C 4E 05 F1 | 	add	fp, #12
18eb4     A7 14 02 FB | 	rdlong	arg02, fp
18eb8     0C 4E 85 F1 | 	sub	fp, #12
18ebc     06 14 66 F0 | 	shl	arg02, #6
18ec0     0A 13 02 F1 | 	add	arg01, arg02
18ec4     2C 12 06 F1 | 	add	arg01, #44
18ec8     09 FF 69 FC | 	wrlong	#255, arg01
18ecc                 | LR__2040
18ecc     A7 F0 03 F6 | 	mov	ptra, fp
18ed0     B2 00 A0 FD | 	call	#popregs_
18ed4                 | _do_release_ret
18ed4     2D 00 64 FD | 	ret
18ed8                 | 
18ed8                 | ' 
18ed8                 | ' '------------------- restore
18ed8                 | ' 
18ed8                 | ' sub do_restore()
18ed8                 | _do_restore
18ed8     4A 00 00 FF 
18edc     88 E4 05 F1 | 	add	objptr, ##38024
18ee0     F2 00 02 FB | 	rdlong	_var01, objptr
18ee4     06 00 00 FF 
18ee8     A4 E4 05 F1 | 	add	objptr, ##3236
18eec     F2 00 62 FC | 	wrlong	_var01, objptr
18ef0     AA 01 00 FF 
18ef4     6B 00 06 F6 | 	mov	_var01, ##@LR__5864
18ef8     01 00 00 FF 
18efc     EC E4 05 F1 | 	add	objptr, ##748
18f00     F2 00 62 FC | 	wrlong	_var01, objptr
18f04     52 00 00 FF 
18f08     18 E4 85 F1 | 	sub	objptr, ##42008
18f0c                 | _do_restore_ret
18f0c     2D 00 64 FD | 	ret
18f10                 | 
18f10                 | ' 
18f10                 | ' '------------------- return
18f10                 | ' 
18f10                 | ' sub do_return()
18f10                 | _do_return
18f10                 | ' if gosubtop>0 then
18f10     50 00 00 FF 
18f14     34 E5 05 F1 | 	add	objptr, ##41268
18f18     F2 00 02 FB | 	rdlong	_var01, objptr
18f1c     50 00 00 FF 
18f20     34 E5 85 F1 | 	sub	objptr, ##41268
18f24     01 00 56 F2 | 	cmps	_var01, #1 wc
18f28     8C 00 90 CD |  if_b	jmp	#LR__2050
18f2c     50 00 00 FF 
18f30     34 E5 05 F1 | 	add	objptr, ##41268
18f34     F2 00 02 FB | 	rdlong	_var01, objptr
18f38     03 00 66 F0 | 	shl	_var01, #3
18f3c     03 00 00 FF 
18f40     88 E5 85 F1 | 	sub	objptr, ##1928
18f44     F2 00 02 F1 | 	add	_var01, objptr
18f48     00 01 02 FB | 	rdlong	_var01, _var01
18f4c     03 00 00 FF 
18f50     0C E5 05 F1 | 	add	objptr, ##1804
18f54     F2 00 62 FC | 	wrlong	_var01, objptr
18f58     7C E4 05 F1 | 	add	objptr, #124
18f5c     F2 00 02 FB | 	rdlong	_var01, objptr
18f60     03 00 66 F0 | 	shl	_var01, #3
18f64     03 00 00 FF 
18f68     88 E5 85 F1 | 	sub	objptr, ##1928
18f6c     F2 00 02 F1 | 	add	_var01, objptr
18f70     04 00 06 F1 | 	add	_var01, #4
18f74     00 01 02 FB | 	rdlong	_var01, _var01
18f78     03 00 00 FF 
18f7c     10 E5 05 F1 | 	add	objptr, ##1808
18f80     F2 00 62 FC | 	wrlong	_var01, objptr
18f84     06 00 00 FF 
18f88     40 E4 85 F1 | 	sub	objptr, ##3136
18f8c     F2 00 02 FB | 	rdlong	_var01, objptr
18f90     01 00 86 F1 | 	sub	_var01, #1
18f94     04 E4 05 F1 | 	add	objptr, #4
18f98     F2 00 62 FC | 	wrlong	_var01, objptr
18f9c     06 00 00 FF 
18fa0     B4 E4 05 F1 | 	add	objptr, ##3252
18fa4     F2 00 02 FB | 	rdlong	_var01, objptr
18fa8     01 00 86 F1 | 	sub	_var01, #1
18fac     F2 00 62 FC | 	wrlong	_var01, objptr
18fb0     50 00 00 FF 
18fb4     34 E5 85 F1 | 	sub	objptr, ##41268
18fb8                 | LR__2050
18fb8                 | _do_return_ret
18fb8     2D 00 64 FD | 	ret
18fbc                 | 
18fbc                 | ' 
18fbc                 | ' '------------------- right$
18fbc                 | ' 
18fbc                 | ' sub do_right
18fbc                 | _do_right
18fbc     00 4A 05 F6 | 	mov	COUNT_, #0
18fc0     A8 00 A0 FD | 	call	#pushregs_
18fc4     14 F0 07 F1 | 	add	ptra, #20
18fc8     4A 00 00 FF 
18fcc     80 E4 05 F1 | 	add	objptr, ##38016
18fd0     F2 16 02 FB | 	rdlong	arg03, objptr
18fd4     0B 15 02 F6 | 	mov	arg02, arg03
18fd8     01 14 66 F0 | 	shl	arg02, #1
18fdc     0B 15 02 F1 | 	add	arg02, arg03
18fe0     02 14 66 F0 | 	shl	arg02, #2
18fe4     03 00 00 FF 
18fe8     04 E4 85 F1 | 	sub	objptr, ##1540
18fec     F2 14 02 F1 | 	add	arg02, objptr
18ff0     0A 17 02 FB | 	rdlong	arg03, arg02
18ff4     0C 4E 05 F1 | 	add	fp, #12
18ff8     A7 16 62 FC | 	wrlong	arg03, fp
18ffc                 | ' 
18ffc                 | ' numpar=compiledline(lineptr_e).result.uresult
18ffc                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
18ffc     0C 4E 85 F1 | 	sub	fp, #12
19000     02 16 0E F2 | 	cmp	arg03, #2 wz
19004     47 00 00 FF 
19008     7C E4 85 F1 | 	sub	objptr, ##36476
1900c     40 00 90 AD |  if_e	jmp	#LR__2060
19010     00 12 06 F6 | 	mov	arg01, #0
19014     60 1B B1 FD | 	call	#__system___getiolock_0593
19018     FD 12 02 F6 | 	mov	arg01, result1
1901c     B4 BE B0 FD | 	call	#__system___lockmem
19020     AA 01 00 FF 
19024     6C 14 06 F6 | 	mov	arg02, ##@LR__5865
19028     00 12 06 F6 | 	mov	arg01, #0
1902c     00 16 06 F6 | 	mov	arg03, #0
19030     98 CB B0 FD | 	call	#__system___basic_print_string
19034     00 12 06 F6 | 	mov	arg01, #0
19038     3C 1B B1 FD | 	call	#__system___getiolock_0593
1903c     FD 00 68 FC | 	wrlong	#0, result1
19040     27 12 06 F6 | 	mov	arg01, #39
19044     00 14 06 F6 | 	mov	arg02, #0
19048     E0 84 B0 FD | 	call	#_printerror
1904c     EC 00 90 FD | 	jmp	#LR__2063
19050                 | LR__2060
19050     38 3B BF FD | 	call	#_pop
19054     FF 16 02 F6 | 	mov	arg03, result3
19058     A7 FA 61 FC | 	wrlong	result1, fp
1905c     04 4E 05 F1 | 	add	fp, #4
19060     A7 FC 61 FC | 	wrlong	result2, fp
19064     04 4E 05 F1 | 	add	fp, #4
19068     A7 16 62 FC | 	wrlong	arg03, fp
1906c     08 4E 85 F1 | 	sub	fp, #8
19070     A7 12 02 F6 | 	mov	arg01, fp
19074     F8 3C BF FD | 	call	#_converttoint
19078     FD 16 02 F6 | 	mov	arg03, result1
1907c     10 4E 05 F1 | 	add	fp, #16
19080     A7 16 62 FC | 	wrlong	arg03, fp
19084     10 4E 85 F1 | 	sub	fp, #16
19088     00 3B BF FD | 	call	#_pop
1908c     FF 16 02 F6 | 	mov	arg03, result3
19090     A7 FA 61 FC | 	wrlong	result1, fp
19094     04 4E 05 F1 | 	add	fp, #4
19098     A7 FC 61 FC | 	wrlong	result2, fp
1909c     04 4E 05 F1 | 	add	fp, #4
190a0     A7 16 62 FC | 	wrlong	arg03, fp
190a4                 | ' t1=pop() : arg=converttoint(t1)
190a4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
190a4     08 4E 85 F1 | 	sub	fp, #8
190a8     2B 16 0E F2 | 	cmp	arg03, #43 wz
190ac     18 00 90 5D |  if_ne	jmp	#LR__2061
190b0     A7 12 02 FB | 	rdlong	arg01, fp
190b4     4C 3C BF FD | 	call	#_convertstring
190b8     A7 FA 61 FC | 	wrlong	result1, fp
190bc     08 4E 05 F1 | 	add	fp, #8
190c0     A7 3E 68 FC | 	wrlong	#31, fp
190c4     08 4E 85 F1 | 	sub	fp, #8
190c8                 | LR__2061
190c8                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
190c8     08 4E 05 F1 | 	add	fp, #8
190cc     A7 16 02 FB | 	rdlong	arg03, fp
190d0     08 4E 85 F1 | 	sub	fp, #8
190d4     1F 16 0E F2 | 	cmp	arg03, #31 wz
190d8     40 00 90 AD |  if_e	jmp	#LR__2062
190dc     00 12 06 F6 | 	mov	arg01, #0
190e0     94 1A B1 FD | 	call	#__system___getiolock_0593
190e4     FD 12 02 F6 | 	mov	arg01, result1
190e8     E8 BD B0 FD | 	call	#__system___lockmem
190ec     AA 01 00 FF 
190f0     75 14 06 F6 | 	mov	arg02, ##@LR__5866
190f4     00 12 06 F6 | 	mov	arg01, #0
190f8     00 16 06 F6 | 	mov	arg03, #0
190fc     CC CA B0 FD | 	call	#__system___basic_print_string
19100     00 12 06 F6 | 	mov	arg01, #0
19104     70 1A B1 FD | 	call	#__system___getiolock_0593
19108     FD 00 68 FC | 	wrlong	#0, result1
1910c     0F 12 06 F6 | 	mov	arg01, #15
19110     00 14 06 F6 | 	mov	arg02, #0
19114     14 84 B0 FD | 	call	#_printerror
19118     20 00 90 FD | 	jmp	#LR__2063
1911c                 | LR__2062
1911c     A7 12 02 FB | 	rdlong	arg01, fp
19120     10 4E 05 F1 | 	add	fp, #16
19124     A7 14 02 FB | 	rdlong	arg02, fp
19128     10 4E 85 F1 | 	sub	fp, #16
1912c     AC DE B0 FD | 	call	#__system__Right_S
19130     A7 FA 61 FC | 	wrlong	result1, fp
19134     A7 12 02 F6 | 	mov	arg01, fp
19138     E8 3A BF FD | 	call	#_push
1913c                 | LR__2063
1913c     A7 F0 03 F6 | 	mov	ptra, fp
19140     B2 00 A0 FD | 	call	#popregs_
19144                 | _do_right_ret
19144     2D 00 64 FD | 	ret
19148                 | 
19148                 | ' 
19148                 | ' '------------------- rnd
19148                 | ' 
19148                 | ' sub do_rnd
19148                 | _do_rnd
19148     01 4A 05 F6 | 	mov	COUNT_, #1
1914c     A8 00 A0 FD | 	call	#pushregs_
19150     10 F0 07 F1 | 	add	ptra, #16
19154     4A 00 00 FF 
19158     80 E4 05 F1 | 	add	objptr, ##38016
1915c     F2 26 02 FB | 	rdlong	local01, objptr
19160     13 17 02 F6 | 	mov	arg03, local01
19164     01 16 66 F0 | 	shl	arg03, #1
19168     13 17 02 F1 | 	add	arg03, local01
1916c     02 16 66 F0 | 	shl	arg03, #2
19170     03 00 00 FF 
19174     04 E4 85 F1 | 	sub	objptr, ##1540
19178     F2 16 02 F1 | 	add	arg03, objptr
1917c     0B 17 02 FB | 	rdlong	arg03, arg03
19180     0C 4E 05 F1 | 	add	fp, #12
19184     A7 16 62 FC | 	wrlong	arg03, fp
19188                 | ' 
19188                 | ' numpar=compiledline(lineptr_e).result.uresult
19188                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
19188     0C 4E 85 F1 | 	sub	fp, #12
1918c     02 16 16 F2 | 	cmp	arg03, #2 wc
19190     47 00 00 FF 
19194     7C E4 85 F1 | 	sub	objptr, ##36476
19198     40 00 90 CD |  if_b	jmp	#LR__2070
1919c     00 12 06 F6 | 	mov	arg01, #0
191a0     D4 19 B1 FD | 	call	#__system___getiolock_0593
191a4     FD 12 02 F6 | 	mov	arg01, result1
191a8     28 BD B0 FD | 	call	#__system___lockmem
191ac     AA 01 00 FF 
191b0     7E 14 06 F6 | 	mov	arg02, ##@LR__5867
191b4     00 12 06 F6 | 	mov	arg01, #0
191b8     00 16 06 F6 | 	mov	arg03, #0
191bc     0C CA B0 FD | 	call	#__system___basic_print_string
191c0     00 12 06 F6 | 	mov	arg01, #0
191c4     B0 19 B1 FD | 	call	#__system___getiolock_0593
191c8     FD 00 68 FC | 	wrlong	#0, result1
191cc     27 12 06 F6 | 	mov	arg01, #39
191d0     00 14 06 F6 | 	mov	arg02, #0
191d4     54 83 B0 FD | 	call	#_printerror
191d8     30 01 90 FD | 	jmp	#LR__2077
191dc                 | LR__2070
191dc                 | ' if numpar=0 then
191dc     0C 4E 05 F1 | 	add	fp, #12
191e0     A7 FE 09 FB | 	rdlong	result3, fp wz
191e4     0C 4E 85 F1 | 	sub	fp, #12
191e8     20 00 90 5D |  if_ne	jmp	#LR__2071
191ec     08 4E 05 F1 | 	add	fp, #8
191f0     A7 3A 68 FC | 	wrlong	#29, fp
191f4     08 4E 85 F1 | 	sub	fp, #8
191f8     1B FA 61 FD | 	getrnd	result1
191fc     A7 FA 61 FC | 	wrlong	result1, fp
19200     A7 12 02 F6 | 	mov	arg01, fp
19204     1C 3A BF FD | 	call	#_push
19208     00 01 90 FD | 	jmp	#LR__2076
1920c                 | LR__2071
1920c     7C 39 BF FD | 	call	#_pop
19210     A7 FA 61 FC | 	wrlong	result1, fp
19214     04 4E 05 F1 | 	add	fp, #4
19218     A7 FC 61 FC | 	wrlong	result2, fp
1921c     04 4E 05 F1 | 	add	fp, #4
19220     A7 FE 61 FC | 	wrlong	result3, fp
19224                 | '   t1=pop()
19224                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
19224     08 4E 85 F1 | 	sub	fp, #8
19228     1C FE 0D F2 | 	cmp	result3, #28 wz
1922c     08 4E 05 51 |  if_ne	add	fp, #8
19230     A7 26 02 5B |  if_ne	rdlong	local01, fp
19234     08 4E 85 51 |  if_ne	sub	fp, #8
19238     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1923c     2C 00 90 5D |  if_ne	jmp	#LR__2072
19240     1B FA 61 FD | 	getrnd	result1
19244     A7 26 02 FB | 	rdlong	local01, fp
19248     13 FB 11 FD | 	qdiv	result1, local01
1924c     A7 12 02 F6 | 	mov	arg01, fp
19250     19 26 62 FD | 	getqy	local01
19254     A7 26 62 FC | 	wrlong	local01, fp
19258     08 4E 05 F1 | 	add	fp, #8
1925c     A7 3A 68 FC | 	wrlong	#29, fp
19260     08 4E 85 F1 | 	sub	fp, #8
19264     BC 39 BF FD | 	call	#_push
19268     A0 00 90 FD | 	jmp	#LR__2075
1926c                 | LR__2072
1926c     08 4E 05 F1 | 	add	fp, #8
19270     A7 26 02 FB | 	rdlong	local01, fp
19274     08 4E 85 F1 | 	sub	fp, #8
19278     1E 26 0E F2 | 	cmp	local01, #30 wz
1927c     48 00 90 5D |  if_ne	jmp	#LR__2073
19280     A7 12 02 FB | 	rdlong	arg01, fp
19284     00 C0 24 FF 
19288     00 14 06 F6 | 	mov	arg02, ##1233125376
1928c     C4 EC B0 FD | 	call	#__system___float_div
19290     FD 26 02 F6 | 	mov	local01, result1
19294     1B 12 62 FD | 	getrnd	arg01
19298     74 13 06 F4 | 	bitl	arg01, #372
1929c     AC E6 B0 FD | 	call	#__system___float_fromuns
192a0     FD 14 02 F6 | 	mov	arg02, result1
192a4     13 13 02 F6 | 	mov	arg01, local01
192a8     A4 EA B0 FD | 	call	#__system___float_mul
192ac     A7 FA 61 FC | 	wrlong	result1, fp
192b0     08 4E 05 F1 | 	add	fp, #8
192b4     A7 3C 68 FC | 	wrlong	#30, fp
192b8     08 4E 85 F1 | 	sub	fp, #8
192bc     A7 12 02 F6 | 	mov	arg01, fp
192c0     60 39 BF FD | 	call	#_push
192c4     44 00 90 FD | 	jmp	#LR__2074
192c8                 | LR__2073
192c8                 | '     print "rnd: "; : printerror(40) 
192c8     00 12 06 F6 | 	mov	arg01, #0
192cc     A8 18 B1 FD | 	call	#__system___getiolock_0593
192d0     FD 12 02 F6 | 	mov	arg01, result1
192d4     FC BB B0 FD | 	call	#__system___lockmem
192d8     AA 01 00 FF 
192dc     84 14 06 F6 | 	mov	arg02, ##@LR__5868
192e0     00 12 06 F6 | 	mov	arg01, #0
192e4     00 16 06 F6 | 	mov	arg03, #0
192e8     E0 C8 B0 FD | 	call	#__system___basic_print_string
192ec     00 12 06 F6 | 	mov	arg01, #0
192f0     84 18 B1 FD | 	call	#__system___getiolock_0593
192f4     FD 00 68 FC | 	wrlong	#0, result1
192f8     28 12 06 F6 | 	mov	arg01, #40
192fc     00 14 06 F6 | 	mov	arg02, #0
19300     28 82 B0 FD | 	call	#_printerror
19304     A7 12 02 F6 | 	mov	arg01, fp
19308     18 39 BF FD | 	call	#_push
1930c                 | LR__2074
1930c                 | LR__2075
1930c                 | LR__2076
1930c                 | LR__2077
1930c     A7 F0 03 F6 | 	mov	ptra, fp
19310     B2 00 A0 FD | 	call	#popregs_
19314                 | _do_rnd_ret
19314     2D 00 64 FD | 	ret
19318                 | 
19318                 | ' 
19318                 | ' '-------------------- round
19318                 | ' 
19318                 | ' sub do_round
19318                 | _do_round
19318     00 4A 05 F6 | 	mov	COUNT_, #0
1931c     A8 00 A0 FD | 	call	#pushregs_
19320     0C F0 07 F1 | 	add	ptra, #12
19324     64 38 BF FD | 	call	#_pop
19328     A7 FA 61 FC | 	wrlong	result1, fp
1932c     04 4E 05 F1 | 	add	fp, #4
19330     A7 FC 61 FC | 	wrlong	result2, fp
19334     04 4E 05 F1 | 	add	fp, #4
19338     A7 FE 61 FC | 	wrlong	result3, fp
1933c     08 4E 85 F1 | 	sub	fp, #8
19340     A7 12 02 F6 | 	mov	arg01, fp
19344     28 3A BF FD | 	call	#_converttoint
19348     A7 FA 61 FC | 	wrlong	result1, fp
1934c     08 4E 05 F1 | 	add	fp, #8
19350     A7 38 68 FC | 	wrlong	#28, fp
19354     08 4E 85 F1 | 	sub	fp, #8
19358     A7 12 02 F6 | 	mov	arg01, fp
1935c     C4 38 BF FD | 	call	#_push
19360     A7 F0 03 F6 | 	mov	ptra, fp
19364     B2 00 A0 FD | 	call	#popregs_
19368                 | _do_round_ret
19368     2D 00 64 FD | 	ret
1936c                 | 
1936c                 | ' 
1936c                 | ' '-------------------- rqpin
1936c                 | ' 
1936c                 | ' sub do_rqpin
1936c                 | _do_rqpin
1936c     00 4A 05 F6 | 	mov	COUNT_, #0
19370     A8 00 A0 FD | 	call	#pushregs_
19374     0C F0 07 F1 | 	add	ptra, #12
19378     10 38 BF FD | 	call	#_pop
1937c     A7 FA 61 FC | 	wrlong	result1, fp
19380     04 4E 05 F1 | 	add	fp, #4
19384     A7 FC 61 FC | 	wrlong	result2, fp
19388     04 4E 05 F1 | 	add	fp, #4
1938c     A7 FE 61 FC | 	wrlong	result3, fp
19390     08 4E 85 F1 | 	sub	fp, #8
19394     A7 12 02 F6 | 	mov	arg01, fp
19398     D4 39 BF FD | 	call	#_converttoint
1939c     FD 12 02 F6 | 	mov	arg01, result1
193a0     00 FA 05 F6 | 	mov	result1, #0
193a4     09 FB 81 FA | 	rqpin	result1, arg01
193a8     52 00 00 FF 
193ac     4C E4 05 F1 | 	add	objptr, ##42060
193b0     F2 FA 61 FC | 	wrlong	result1, objptr
193b4     52 00 00 FF 
193b8     4C E4 85 F1 | 	sub	objptr, ##42060
193bc     08 4E 05 F1 | 	add	fp, #8
193c0     A7 3A 68 FC | 	wrlong	#29, fp
193c4     08 4E 85 F1 | 	sub	fp, #8
193c8     A7 08 68 FC | 	wrlong	#4, fp
193cc     A7 12 02 F6 | 	mov	arg01, fp
193d0     50 38 BF FD | 	call	#_push
193d4     A7 F0 03 F6 | 	mov	ptra, fp
193d8     B2 00 A0 FD | 	call	#popregs_
193dc                 | _do_rqpin_ret
193dc     2D 00 64 FD | 	ret
193e0                 | 
193e0                 | ' 
193e0                 | ' ' ------------------ run
193e0                 | ' 
193e0                 | ' sub do_run
193e0                 | _do_run
193e0     04 4A 05 F6 | 	mov	COUNT_, #4
193e4     A8 00 A0 FD | 	call	#pushregs_
193e8     4A 00 00 FF 
193ec     80 E4 05 F1 | 	add	objptr, ##38016
193f0     F2 26 02 FB | 	rdlong	local01, objptr
193f4     06 00 00 FF 
193f8     38 E4 05 F1 | 	add	objptr, ##3128
193fc     F2 28 02 FB | 	rdlong	local02, objptr
19400     04 E4 05 F1 | 	add	objptr, #4
19404     F2 2A 02 FB | 	rdlong	local03, objptr
19408     13 19 02 F6 | 	mov	arg04, local01
1940c     0C 17 02 F6 | 	mov	arg03, arg04
19410     01 16 66 F0 | 	shl	arg03, #1
19414     0C 17 02 F1 | 	add	arg03, arg04
19418     02 16 66 F0 | 	shl	arg03, #2
1941c     09 00 00 FF 
19420     40 E4 85 F1 | 	sub	objptr, ##4672
19424     F2 16 02 F1 | 	add	arg03, objptr
19428     0B 15 02 FB | 	rdlong	arg02, arg03
1942c                 | ' 
1942c                 | ' r_lineptr_e=lineptr_e
1942c                 | ' r_runptr=runptr
1942c                 | ' r_runptr2=runptr2
1942c                 | ' 
1942c                 | ' numpar=compiledline(lineptr_e).result.uresult
1942c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1942c     01 14 0E F2 | 	cmp	arg02, #1 wz
19430     47 00 00 FF 
19434     7C E4 85 F1 | 	sub	objptr, ##36476
19438     00 12 06 A6 |  if_e	mov	arg01, #0
1943c     F4 B1 BF AD |  if_e	call	#_do_load
19440     4A 00 00 FF 
19444     88 E4 05 F1 | 	add	objptr, ##38024
19448     F2 18 02 FB | 	rdlong	arg04, objptr
1944c     06 00 00 FF 
19450     30 E4 05 F1 | 	add	objptr, ##3120
19454     F2 18 62 FC | 	wrlong	arg04, objptr
19458     04 E4 05 F1 | 	add	objptr, #4
1945c     F2 00 68 FC | 	wrlong	#0, objptr
19460     04 E4 05 F1 | 	add	objptr, #4
19464     FF FF FF FF 
19468     F2 FE 6B FC | 	wrlong	##-1, objptr
1946c     06 00 00 FF 
19470     38 E4 85 F1 | 	sub	objptr, ##3128
19474     F2 18 02 FB | 	rdlong	arg04, objptr
19478     06 00 00 FF 
1947c     A4 E4 05 F1 | 	add	objptr, ##3236
19480     F2 18 62 FC | 	wrlong	arg04, objptr
19484     AA 01 00 FF 
19488     8A 18 06 F6 | 	mov	arg04, ##@LR__5869
1948c     01 00 00 FF 
19490     EC E4 05 F1 | 	add	objptr, ##748
19494     F2 18 62 FC | 	wrlong	arg04, objptr
19498                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
19498                 | ' dataptr=programstart : readline="" ' reset the data pointer
19498                 | ' if inrun>0 then 
19498     01 00 00 FF 
1949c     2C E5 85 F1 | 	sub	objptr, ##812
194a0     F2 18 02 FB | 	rdlong	arg04, objptr
194a4     50 00 00 FF 
194a8     EC E4 85 F1 | 	sub	objptr, ##41196
194ac     01 18 16 F2 | 	cmp	arg04, #1 wc
194b0     30 00 90 CD |  if_b	jmp	#LR__2080
194b4     50 00 00 FF 
194b8     F0 E4 05 F1 | 	add	objptr, ##41200
194bc     F2 12 02 F6 | 	mov	arg01, objptr
194c0     38 E4 85 F1 | 	sub	objptr, #56
194c4     F2 14 02 FB | 	rdlong	arg02, objptr
194c8     18 16 06 F6 | 	mov	arg03, #24
194cc     44 00 00 FF 
194d0     EC E5 85 F1 | 	sub	objptr, ##35308
194d4     BC AD B0 FD | 	call	#_psram_spin2_read1
194d8     0B 00 00 FF 
194dc     CC E4 85 F1 | 	sub	objptr, ##5836
194e0                 | '   psram.read1(varptr(runheader),runptr,24)  
194e0                 | '   return
194e0     0C 03 90 FD | 	jmp	#LR__2087
194e4                 | LR__2080
194e4     50 00 00 FF 
194e8     EC E4 05 F1 | 	add	objptr, ##41196
194ec     F2 02 68 FC | 	wrlong	#1, objptr
194f0     04 E4 05 F1 | 	add	objptr, #4
194f4     F2 12 02 F6 | 	mov	arg01, objptr
194f8     38 E4 85 F1 | 	sub	objptr, #56
194fc     F2 14 02 FB | 	rdlong	arg02, objptr
19500     18 16 06 F6 | 	mov	arg03, #24
19504     44 00 00 FF 
19508     EC E5 85 F1 | 	sub	objptr, ##35308
1950c     84 AD B0 FD | 	call	#_psram_spin2_read1
19510                 | ' inrun=1
19510                 | ' psram.read1(varptr(runheader),runptr,24) 
19510                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
19510     45 00 00 FF 
19514     24 E4 05 F1 | 	add	objptr, ##35364
19518     F2 2C 02 FB | 	rdlong	local04, objptr
1951c     50 00 00 FF 
19520     F0 E4 85 F1 | 	sub	objptr, ##41200
19524     FF FF 7F FF 
19528     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1952c     50 00 00 AF 
19530     EC E4 05 A1 |  if_e	add	objptr, ##41196
19534     F2 00 68 AC |  if_e	wrlong	#0, objptr
19538     50 00 00 AF 
1953c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
19540     AC 02 90 AD |  if_e	jmp	#LR__2087
19544                 | ' do 
19544                 | LR__2081
19544                 | '   if runptr<>oldrunptr then
19544     50 00 00 FF 
19548     B8 E4 05 F1 | 	add	objptr, ##41144
1954c     F2 2C 02 FB | 	rdlong	local04, objptr
19550     08 E4 05 F1 | 	add	objptr, #8
19554     F2 18 02 FB | 	rdlong	arg04, objptr
19558     50 00 00 FF 
1955c     C0 E4 85 F1 | 	sub	objptr, ##41152
19560     0C 2D 0A F2 | 	cmp	local04, arg04 wz
19564     CC 00 90 AD |  if_e	jmp	#LR__2082
19568     50 00 00 FF 
1956c     F0 E4 05 F1 | 	add	objptr, ##41200
19570     F2 12 02 F6 | 	mov	arg01, objptr
19574     38 E4 85 F1 | 	sub	objptr, #56
19578     F2 14 02 FB | 	rdlong	arg02, objptr
1957c     18 16 06 F6 | 	mov	arg03, #24
19580     44 00 00 FF 
19584     EC E5 85 F1 | 	sub	objptr, ##35308
19588     08 AD B0 FD | 	call	#_psram_spin2_read1
1958c     3B 00 00 FF 
19590     B0 E5 05 F1 | 	add	objptr, ##30640
19594     F2 12 02 F6 | 	mov	arg01, objptr
19598     09 00 00 FF 
1959c     3C E4 05 F1 | 	add	objptr, ##4668
195a0     F2 14 02 FB | 	rdlong	arg02, objptr
195a4     0B 00 00 FF 
195a8     54 E4 85 F1 | 	sub	objptr, ##5716
195ac     F2 2C 02 FB | 	rdlong	local04, objptr
195b0     01 2C 66 F0 | 	shl	local04, #1
195b4     16 15 02 F1 | 	add	arg02, local04
195b8     0B 00 00 FF 
195bc     94 E4 05 F1 | 	add	objptr, ##5780
195c0     F2 16 02 FB | 	rdlong	arg03, objptr
195c4     40 E4 85 F1 | 	sub	objptr, #64
195c8     F2 2C 02 FB | 	rdlong	local04, objptr
195cc     16 17 82 F1 | 	sub	arg03, local04
195d0     44 00 00 FF 
195d4     EC E5 85 F1 | 	sub	objptr, ##35308
195d8     B8 AC B0 FD | 	call	#_psram_spin2_read1
195dc     45 00 00 FF 
195e0     2C E4 05 F1 | 	add	objptr, ##35372
195e4     F2 2C 02 FB | 	rdlong	local04, objptr
195e8     40 E4 85 F1 | 	sub	objptr, #64
195ec     F2 14 02 FB | 	rdlong	arg02, objptr
195f0     0A 2D 82 F1 | 	sub	local04, arg02
195f4     0B 00 00 FF 
195f8     54 E4 85 F1 | 	sub	objptr, ##5716
195fc     F2 14 02 FB | 	rdlong	arg02, objptr
19600     0A 2D 12 FD | 	qdiv	local04, arg02
19604     05 00 00 FF 
19608     18 E4 05 F1 | 	add	objptr, ##2584
1960c     18 2C 62 FD | 	getqx	local04
19610     03 2C 86 F1 | 	sub	local04, #3
19614     F2 2C 62 FC | 	wrlong	local04, objptr
19618     06 00 00 FF 
1961c     3C E4 05 F1 | 	add	objptr, ##3132
19620     F2 2C 02 FB | 	rdlong	local04, objptr
19624     08 E4 05 F1 | 	add	objptr, #8
19628     F2 2C 62 FC | 	wrlong	local04, objptr
1962c     50 00 00 FF 
19630     C0 E4 85 F1 | 	sub	objptr, ##41152
19634                 | LR__2082
19634     50 00 00 FF 
19638     04 E5 05 F1 | 	add	objptr, ##41220
1963c     F2 2C 02 FB | 	rdlong	local04, objptr
19640     4C E4 85 F1 | 	sub	objptr, #76
19644     F2 2C 62 FC | 	wrlong	local04, objptr
19648     04 E4 05 F1 | 	add	objptr, #4
1964c     F2 12 02 FB | 	rdlong	arg01, objptr
19650     50 00 00 FF 
19654     BC E4 85 F1 | 	sub	objptr, ##41148
19658     2C 34 BF FD | 	call	#_execute_line
1965c     50 00 00 FF 
19660     BC E4 05 F1 | 	add	objptr, ##41148
19664     F2 FA 61 FC | 	wrlong	result1, objptr
19668     04 E4 85 F1 | 	sub	objptr, #4
1966c     F2 2C 02 FB | 	rdlong	local04, objptr
19670     50 00 00 FF 
19674     B8 E4 85 F1 | 	sub	objptr, ##41144
19678     FF FF 3F FF 
1967c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
19680     4C 00 90 AD |  if_e	jmp	#LR__2085
19684     E0 12 06 F6 | 	mov	arg01, #224
19688     98 AF B0 FD | 	call	#_usbnew_spin2_keystate
1968c     00 FA 0D F2 | 	cmp	result1, #0 wz
19690     10 00 90 5D |  if_ne	jmp	#LR__2083
19694     E4 12 06 F6 | 	mov	arg01, #228
19698     88 AF B0 FD | 	call	#_usbnew_spin2_keystate
1969c     00 FA 0D F2 | 	cmp	result1, #0 wz
196a0     10 00 90 AD |  if_e	jmp	#LR__2084
196a4                 | LR__2083
196a4     06 12 06 F6 | 	mov	arg01, #6
196a8     78 AF B0 FD | 	call	#_usbnew_spin2_keystate
196ac     00 FA 0D F2 | 	cmp	result1, #0 wz
196b0     1C 00 90 5D |  if_ne	jmp	#LR__2085
196b4                 | LR__2084
196b4     50 00 00 FF 
196b8     EC E4 05 F1 | 	add	objptr, ##41196
196bc     F2 2C 02 FB | 	rdlong	local04, objptr
196c0     50 00 00 FF 
196c4     EC E4 85 F1 | 	sub	objptr, ##41196
196c8     02 2C 0E F2 | 	cmp	local04, #2 wz
196cc     74 FE 9F 5D |  if_ne	jmp	#LR__2081
196d0                 | LR__2085
196d0                 | '   ''do whatever kbm.peek_latest_key()=$106 
196d0                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
196d0     50 00 00 FF 
196d4     B8 E4 05 F1 | 	add	objptr, ##41144
196d8     F2 2C 02 FB | 	rdlong	local04, objptr
196dc     50 00 00 FF 
196e0     B8 E4 85 F1 | 	sub	objptr, ##41144
196e4     FF FF 3F FF 
196e8     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
196ec     AC 00 90 AD |  if_e	jmp	#LR__2086
196f0     50 00 00 FF 
196f4     EC E4 05 F1 | 	add	objptr, ##41196
196f8     F2 2C 02 FB | 	rdlong	local04, objptr
196fc     50 00 00 FF 
19700     EC E4 85 F1 | 	sub	objptr, ##41196
19704     01 2C 0E F2 | 	cmp	local04, #1 wz
19708     90 00 90 5D |  if_ne	jmp	#LR__2086
1970c                 | '   print: print "Stopped at line ";runheader(0) 
1970c     00 12 06 F6 | 	mov	arg01, #0
19710     64 14 B1 FD | 	call	#__system___getiolock_0593
19714     FD 12 02 F6 | 	mov	arg01, result1
19718     B8 B7 B0 FD | 	call	#__system___lockmem
1971c     00 12 06 F6 | 	mov	arg01, #0
19720     0A 14 06 F6 | 	mov	arg02, #10
19724     00 16 06 F6 | 	mov	arg03, #0
19728     48 C4 B0 FD | 	call	#__system___basic_print_char
1972c     00 12 06 F6 | 	mov	arg01, #0
19730     44 14 B1 FD | 	call	#__system___getiolock_0593
19734     FD 00 68 FC | 	wrlong	#0, result1
19738     00 12 06 F6 | 	mov	arg01, #0
1973c     38 14 B1 FD | 	call	#__system___getiolock_0593
19740     FD 12 02 F6 | 	mov	arg01, result1
19744     8C B7 B0 FD | 	call	#__system___lockmem
19748     AA 01 00 FF 
1974c     8B 14 06 F6 | 	mov	arg02, ##@LR__5870
19750     00 12 06 F6 | 	mov	arg01, #0
19754     00 16 06 F6 | 	mov	arg03, #0
19758     70 C4 B0 FD | 	call	#__system___basic_print_string
1975c     50 00 00 FF 
19760     F0 E4 05 F1 | 	add	objptr, ##41200
19764     F2 14 02 FB | 	rdlong	arg02, objptr
19768     50 00 00 FF 
1976c     F0 E4 85 F1 | 	sub	objptr, ##41200
19770     00 12 06 F6 | 	mov	arg01, #0
19774     00 16 06 F6 | 	mov	arg03, #0
19778     0A 18 06 F6 | 	mov	arg04, #10
1977c     D0 C4 B0 FD | 	call	#__system___basic_print_unsigned
19780     00 12 06 F6 | 	mov	arg01, #0
19784     0A 14 06 F6 | 	mov	arg02, #10
19788     00 16 06 F6 | 	mov	arg03, #0
1978c     E4 C3 B0 FD | 	call	#__system___basic_print_char
19790     00 12 06 F6 | 	mov	arg01, #0
19794     E0 13 B1 FD | 	call	#__system___getiolock_0593
19798     FD 00 68 FC | 	wrlong	#0, result1
1979c                 | LR__2086
1979c     50 00 00 FF 
197a0     EC E4 05 F1 | 	add	objptr, ##41196
197a4     F2 00 68 FC | 	wrlong	#0, objptr
197a8     06 00 00 FF 
197ac     6C E4 85 F1 | 	sub	objptr, ##3180
197b0     F2 26 62 FC | 	wrlong	local01, objptr
197b4     06 00 00 FF 
197b8     38 E4 05 F1 | 	add	objptr, ##3128
197bc     F2 28 62 FC | 	wrlong	local02, objptr
197c0     04 E4 05 F1 | 	add	objptr, #4
197c4     F2 2A 62 FC | 	wrlong	local03, objptr
197c8     50 00 00 FF 
197cc     BC E4 85 F1 | 	sub	objptr, ##41148
197d0     11 12 06 F6 | 	mov	arg01, #17
197d4     08 14 06 F6 | 	mov	arg02, #8
197d8     10 16 06 F6 | 	mov	arg03, #16
197dc     98 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
197e0     10 12 06 F6 | 	mov	arg01, #16
197e4     20 14 06 F6 | 	mov	arg02, #32
197e8     20 16 06 F6 | 	mov	arg03, #32
197ec     88 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
197f0                 | LR__2087
197f0     A7 F0 03 F6 | 	mov	ptra, fp
197f4     B2 00 A0 FD | 	call	#popregs_
197f8                 | _do_run_ret
197f8     2D 00 64 FD | 	ret
197fc                 | 
197fc                 | ' 
197fc                 | ' ' ------------------ save
197fc                 | ' 
197fc                 | ' sub do_save                        
197fc                 | _do_save
197fc     04 4A 05 F6 | 	mov	COUNT_, #4
19800     A8 00 A0 FD | 	call	#pushregs_
19804     B8 F0 07 F1 | 	add	ptra, #184
19808     4A 00 00 FF 
1980c     80 E4 05 F1 | 	add	objptr, ##38016
19810     F2 26 02 FB | 	rdlong	local01, objptr
19814     13 29 02 F6 | 	mov	local02, local01
19818     01 28 66 F0 | 	shl	local02, #1
1981c     13 29 02 F1 | 	add	local02, local01
19820     02 28 66 F0 | 	shl	local02, #2
19824     03 00 00 FF 
19828     04 E4 85 F1 | 	sub	objptr, ##1540
1982c     F2 28 02 F1 | 	add	local02, objptr
19830     14 2B 02 FB | 	rdlong	local03, local02
19834     10 4E 05 F1 | 	add	fp, #16
19838     A7 2A 62 FC | 	wrlong	local03, fp
1983c                 | ' 
1983c                 | ' numpar=compiledline(lineptr_e).result.uresult
1983c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1983c     10 4E 85 F1 | 	sub	fp, #16
19840     01 2A 56 F2 | 	cmps	local03, #1 wc
19844     47 00 00 FF 
19848     7C E4 85 F1 | 	sub	objptr, ##36476
1984c     20 00 90 CD |  if_b	jmp	#LR__2090
19850     38 33 BF FD | 	call	#_pop
19854     A7 FA 61 FC | 	wrlong	result1, fp
19858     04 4E 05 F1 | 	add	fp, #4
1985c     A7 FC 61 FC | 	wrlong	result2, fp
19860     04 4E 05 F1 | 	add	fp, #4
19864     A7 FE 61 FC | 	wrlong	result3, fp
19868     08 4E 85 F1 | 	sub	fp, #8
1986c     24 00 90 FD | 	jmp	#LR__2091
19870                 | LR__2090
19870     52 00 00 FF 
19874     00 E4 05 F1 | 	add	objptr, ##41984
19878     F2 2A 02 FB | 	rdlong	local03, objptr
1987c     52 00 00 FF 
19880     00 E4 85 F1 | 	sub	objptr, ##41984
19884     A7 2A 62 FC | 	wrlong	local03, fp
19888     08 4E 05 F1 | 	add	fp, #8
1988c     A7 3E 68 FC | 	wrlong	#31, fp
19890     08 4E 85 F1 | 	sub	fp, #8
19894                 | LR__2091
19894                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
19894     4A 00 00 FF 
19898     88 E4 05 F1 | 	add	objptr, ##38024
1989c     F2 12 02 FB | 	rdlong	arg01, objptr
198a0     4A 00 00 FF 
198a4     88 E4 85 F1 | 	sub	objptr, ##38024
198a8     50 7F B0 FD | 	call	#_pslpeek
198ac     FF FF 7F FF 
198b0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
198b4     10 00 90 5D |  if_ne	jmp	#LR__2092
198b8     1B 12 06 F6 | 	mov	arg01, #27
198bc     00 14 06 F6 | 	mov	arg02, #0
198c0     68 7C B0 FD | 	call	#_printerror
198c4     CC 02 90 FD | 	jmp	#LR__2098
198c8                 | LR__2092
198c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
198c8     08 4E 05 F1 | 	add	fp, #8
198cc     A7 2A 02 FB | 	rdlong	local03, fp
198d0     08 4E 85 F1 | 	sub	fp, #8
198d4     2B 2A 0E F2 | 	cmp	local03, #43 wz
198d8     18 00 90 5D |  if_ne	jmp	#LR__2093
198dc     A7 12 02 FB | 	rdlong	arg01, fp
198e0     20 34 BF FD | 	call	#_convertstring
198e4     A7 FA 61 FC | 	wrlong	result1, fp
198e8     08 4E 05 F1 | 	add	fp, #8
198ec     A7 3E 68 FC | 	wrlong	#31, fp
198f0     08 4E 85 F1 | 	sub	fp, #8
198f4                 | LR__2093
198f4                 | ' if t1.result_type=result_string then
198f4     08 4E 05 F1 | 	add	fp, #8
198f8     A7 2A 02 FB | 	rdlong	local03, fp
198fc     08 4E 85 F1 | 	sub	fp, #8
19900     1F 2A 0E F2 | 	cmp	local03, #31 wz
19904     8C 02 90 5D |  if_ne	jmp	#LR__2097
19908                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
19908     A7 12 02 FB | 	rdlong	arg01, fp
1990c     AA 01 00 FF 
19910     9C 14 06 F6 | 	mov	arg02, ##@LR__5871
19914     E4 B5 B0 FD | 	call	#__system___string_cmp
19918     00 FA 0D F2 | 	cmp	result1, #0 wz
1991c     52 00 00 AF 
19920     00 E4 05 A1 |  if_e	add	objptr, ##41984
19924     F2 2A 02 AB |  if_e	rdlong	local03, objptr
19928     A7 2A 62 AC |  if_e	wrlong	local03, fp
1992c     52 00 00 AF 
19930     00 E4 85 A1 |  if_e	sub	objptr, ##41984
19934     A7 2A 02 5B |  if_ne	rdlong	local03, fp
19938     52 00 00 5F 
1993c     00 E4 05 51 |  if_ne	add	objptr, ##41984
19940     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
19944     52 00 00 5F 
19948     00 E4 85 51 |  if_ne	sub	objptr, ##41984
1994c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1994c     09 12 06 F6 | 	mov	arg01, #9
19950     DC 08 B1 FD | 	call	#__system__close
19954     09 2A 06 F6 | 	mov	local03, #9
19958     4A 00 00 FF 
1995c     94 E4 05 F1 | 	add	objptr, ##38036
19960     F2 12 02 FB | 	rdlong	arg01, objptr
19964     4A 00 00 FF 
19968     94 E4 85 F1 | 	sub	objptr, ##38036
1996c     AA 01 00 FF 
19970     9D 14 06 F6 | 	mov	arg02, ##@LR__5872
19974     B8 B5 B0 FD | 	call	#__system___string_concat
19978     FD 12 02 F6 | 	mov	arg01, result1
1997c     A7 14 02 FB | 	rdlong	arg02, fp
19980     AC B5 B0 FD | 	call	#__system___string_concat
19984     FD 14 02 F6 | 	mov	arg02, result1
19988     15 13 02 F6 | 	mov	arg01, local03
1998c     0D 16 06 F6 | 	mov	arg03, #13
19990     44 C1 B0 FD | 	call	#__system___basic_open_string
19994     4A 00 00 FF 
19998     88 E4 05 F1 | 	add	objptr, ##38024
1999c     F2 2A 02 FB | 	rdlong	local03, objptr
199a0     4A 00 00 FF 
199a4     88 E4 85 F1 | 	sub	objptr, ##38024
199a8     B0 4E 05 F1 | 	add	fp, #176
199ac     A7 2A 62 FC | 	wrlong	local03, fp
199b0     B0 4E 85 F1 | 	sub	fp, #176
199b4                 | '   saveptr=programstart
199b4                 | '   do
199b4                 | LR__2094
199b4     14 4E 05 F1 | 	add	fp, #20
199b8     A7 12 02 F6 | 	mov	arg01, fp
199bc     9C 4E 05 F1 | 	add	fp, #156
199c0     A7 14 02 FB | 	rdlong	arg02, fp
199c4     B0 4E 85 F1 | 	sub	fp, #176
199c8     18 16 06 F6 | 	mov	arg03, #24
199cc     0B 00 00 FF 
199d0     CC E4 05 F1 | 	add	objptr, ##5836
199d4     BC A8 B0 FD | 	call	#_psram_spin2_read1
199d8     2C 4E 05 F1 | 	add	fp, #44
199dc     A7 12 02 F6 | 	mov	arg01, fp
199e0     10 4E 85 F1 | 	sub	fp, #16
199e4     A7 14 02 FB | 	rdlong	arg02, fp
199e8     04 4E 05 F1 | 	add	fp, #4
199ec     A7 16 02 FB | 	rdlong	arg03, fp
199f0     20 4E 85 F1 | 	sub	fp, #32
199f4     9C A8 B0 FD | 	call	#_psram_spin2_read1
199f8     0B 00 00 FF 
199fc     CC E4 85 F1 | 	sub	objptr, ##5836
19a00     AA 01 00 FF 
19a04     9F 2A 06 F6 | 	mov	local03, ##@LR__5873
19a08     AC 4E 05 F1 | 	add	fp, #172
19a0c     A7 2A 62 FC | 	wrlong	local03, fp
19a10                 | '     psram.read1(varptr(header(0)),saveptr,24)
19a10                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
19a10                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
19a10     A0 4E 85 F1 | 	sub	fp, #160
19a14     A7 02 68 FC | 	wrlong	#1, fp
19a18     14 4E 05 F1 | 	add	fp, #20
19a1c     A7 2C 02 FB | 	rdlong	local04, fp
19a20     20 4E 85 F1 | 	sub	fp, #32
19a24     01 2C 06 F1 | 	add	local04, #1
19a28                 | LR__2095
19a28     0C 4E 05 F1 | 	add	fp, #12
19a2c     A7 2A 02 FB | 	rdlong	local03, fp
19a30     0C 4E 85 F1 | 	sub	fp, #12
19a34     16 2B 52 F2 | 	cmps	local03, local04 wc
19a38     54 00 90 3D |  if_ae	jmp	#LR__2096
19a3c     AC 4E 05 F1 | 	add	fp, #172
19a40     A7 26 02 FB | 	rdlong	local01, fp
19a44     A0 4E 85 F1 | 	sub	fp, #160
19a48     A7 2A 02 FB | 	rdlong	local03, fp
19a4c     01 2A 86 F1 | 	sub	local03, #1
19a50     20 4E 05 F1 | 	add	fp, #32
19a54     A7 2A 02 F1 | 	add	local03, fp
19a58     15 13 C2 FA | 	rdbyte	arg01, local03
19a5c     2C 4E 85 F1 | 	sub	fp, #44
19a60     B4 D6 B0 FD | 	call	#__system__Chr_S
19a64     FD 14 02 F6 | 	mov	arg02, result1
19a68     13 13 02 F6 | 	mov	arg01, local01
19a6c     C0 B4 B0 FD | 	call	#__system___string_concat
19a70     AC 4E 05 F1 | 	add	fp, #172
19a74     A7 FA 61 FC | 	wrlong	result1, fp
19a78     A0 4E 85 F1 | 	sub	fp, #160
19a7c     A7 2A 02 FB | 	rdlong	local03, fp
19a80     01 2A 06 F1 | 	add	local03, #1
19a84     A7 2A 62 FC | 	wrlong	local03, fp
19a88     0C 4E 85 F1 | 	sub	fp, #12
19a8c     98 FF 9F FD | 	jmp	#LR__2095
19a90                 | LR__2096
19a90                 | '     print #9, saveline$
19a90     09 12 06 F6 | 	mov	arg01, #9
19a94     E0 10 B1 FD | 	call	#__system___getiolock_0593
19a98     FD 12 02 F6 | 	mov	arg01, result1
19a9c     34 B4 B0 FD | 	call	#__system___lockmem
19aa0     AC 4E 05 F1 | 	add	fp, #172
19aa4     A7 14 02 FB | 	rdlong	arg02, fp
19aa8     AC 4E 85 F1 | 	sub	fp, #172
19aac     09 12 06 F6 | 	mov	arg01, #9
19ab0     00 16 06 F6 | 	mov	arg03, #0
19ab4     14 C1 B0 FD | 	call	#__system___basic_print_string
19ab8     09 12 06 F6 | 	mov	arg01, #9
19abc     0A 14 06 F6 | 	mov	arg02, #10
19ac0     00 16 06 F6 | 	mov	arg03, #0
19ac4     AC C0 B0 FD | 	call	#__system___basic_print_char
19ac8     09 12 06 F6 | 	mov	arg01, #9
19acc     A8 10 B1 FD | 	call	#__system___getiolock_0593
19ad0     FD 00 68 FC | 	wrlong	#0, result1
19ad4     28 4E 05 F1 | 	add	fp, #40
19ad8     A7 2A 02 FB | 	rdlong	local03, fp
19adc     88 4E 05 F1 | 	add	fp, #136
19ae0     A7 2A 62 FC | 	wrlong	local03, fp
19ae4     88 4E 85 F1 | 	sub	fp, #136
19ae8     A7 2A 02 FB | 	rdlong	local03, fp
19aec     28 4E 85 F1 | 	sub	fp, #40
19af0     FF FF 3F FF 
19af4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
19af8     B8 FE 9F 5D |  if_ne	jmp	#LR__2094
19afc                 | '   close #9  
19afc     09 12 06 F6 | 	mov	arg01, #9
19b00     2C 07 B1 FD | 	call	#__system__close
19b04                 | '   print "Saved as ";currentdir$+"/"+loadname
19b04     00 12 06 F6 | 	mov	arg01, #0
19b08     6C 10 B1 FD | 	call	#__system___getiolock_0593
19b0c     FD 12 02 F6 | 	mov	arg01, result1
19b10     C0 B3 B0 FD | 	call	#__system___lockmem
19b14     AA 01 00 FF 
19b18     A0 14 06 F6 | 	mov	arg02, ##@LR__5874
19b1c     00 12 06 F6 | 	mov	arg01, #0
19b20     00 16 06 F6 | 	mov	arg03, #0
19b24     A4 C0 B0 FD | 	call	#__system___basic_print_string
19b28     00 28 06 F6 | 	mov	local02, #0
19b2c     4A 00 00 FF 
19b30     94 E4 05 F1 | 	add	objptr, ##38036
19b34     F2 12 02 FB | 	rdlong	arg01, objptr
19b38     4A 00 00 FF 
19b3c     94 E4 85 F1 | 	sub	objptr, ##38036
19b40     AA 01 00 FF 
19b44     AA 14 06 F6 | 	mov	arg02, ##@LR__5875
19b48     E4 B3 B0 FD | 	call	#__system___string_concat
19b4c     FD 12 02 F6 | 	mov	arg01, result1
19b50     52 00 00 FF 
19b54     00 E4 05 F1 | 	add	objptr, ##41984
19b58     F2 14 02 FB | 	rdlong	arg02, objptr
19b5c     52 00 00 FF 
19b60     00 E4 85 F1 | 	sub	objptr, ##41984
19b64     C8 B3 B0 FD | 	call	#__system___string_concat
19b68     FD 14 02 F6 | 	mov	arg02, result1
19b6c     14 13 02 F6 | 	mov	arg01, local02
19b70     00 16 06 F6 | 	mov	arg03, #0
19b74     54 C0 B0 FD | 	call	#__system___basic_print_string
19b78     00 12 06 F6 | 	mov	arg01, #0
19b7c     0A 14 06 F6 | 	mov	arg02, #10
19b80     00 16 06 F6 | 	mov	arg03, #0
19b84     EC BF B0 FD | 	call	#__system___basic_print_char
19b88     00 12 06 F6 | 	mov	arg01, #0
19b8c     E8 0F B1 FD | 	call	#__system___getiolock_0593
19b90     FD 00 68 FC | 	wrlong	#0, result1
19b94                 | LR__2097
19b94                 | LR__2098
19b94     A7 F0 03 F6 | 	mov	ptra, fp
19b98     B2 00 A0 FD | 	call	#popregs_
19b9c                 | _do_save_ret
19b9c     2D 00 64 FD | 	ret
19ba0                 | 
19ba0                 | ' 
19ba0                 | ' ' ------------------ setdelay
19ba0                 | ' 
19ba0                 | ' sub do_setdelay
19ba0                 | _do_setdelay
19ba0     02 4A 05 F6 | 	mov	COUNT_, #2
19ba4     A8 00 A0 FD | 	call	#pushregs_
19ba8     18 F0 07 F1 | 	add	ptra, #24
19bac     DC 2F BF FD | 	call	#_pop
19bb0     FD 12 02 F6 | 	mov	arg01, result1
19bb4     FE 26 02 F6 | 	mov	local01, result2
19bb8     FF 28 02 F6 | 	mov	local02, result3
19bbc     A7 12 62 FC | 	wrlong	arg01, fp
19bc0     04 4E 05 F1 | 	add	fp, #4
19bc4     A7 26 62 FC | 	wrlong	local01, fp
19bc8     04 4E 05 F1 | 	add	fp, #4
19bcc     A7 28 62 FC | 	wrlong	local02, fp
19bd0     08 4E 85 F1 | 	sub	fp, #8
19bd4     B4 2F BF FD | 	call	#_pop
19bd8     FD 28 02 F6 | 	mov	local02, result1
19bdc     0C 4E 05 F1 | 	add	fp, #12
19be0     A7 28 62 FC | 	wrlong	local02, fp
19be4     04 4E 05 F1 | 	add	fp, #4
19be8     A7 FC 61 FC | 	wrlong	result2, fp
19bec     04 4E 05 F1 | 	add	fp, #4
19bf0     A7 FE 61 FC | 	wrlong	result3, fp
19bf4     08 4E 85 F1 | 	sub	fp, #8
19bf8     A7 12 02 F6 | 	mov	arg01, fp
19bfc     0C 4E 85 F1 | 	sub	fp, #12
19c00     6C 31 BF FD | 	call	#_converttoint
19c04     FD 28 02 F6 | 	mov	local02, result1
19c08     14 27 02 F6 | 	mov	local01, local02
19c0c     01 26 66 F0 | 	shl	local01, #1
19c10     14 27 02 F1 | 	add	local01, local02
19c14     03 26 66 F0 | 	shl	local01, #3
19c18     14 00 00 FF 
19c1c     38 E5 05 F1 | 	add	objptr, ##10552
19c20     F2 26 02 F1 | 	add	local01, objptr
19c24     A7 12 02 F6 | 	mov	arg01, fp
19c28     14 00 00 FF 
19c2c     38 E5 85 F1 | 	sub	objptr, ##10552
19c30     3C 31 BF FD | 	call	#_converttoint
19c34     06 26 06 F1 | 	add	local01, #6
19c38     13 FB 51 FC | 	wrword	result1, local01
19c3c     A7 F0 03 F6 | 	mov	ptra, fp
19c40     B2 00 A0 FD | 	call	#popregs_
19c44                 | _do_setdelay_ret
19c44     2D 00 64 FD | 	ret
19c48                 | 
19c48                 | ' 
19c48                 | ' ' ------------------ setenv
19c48                 | ' 
19c48                 | ' sub do_setenv
19c48                 | _do_setenv
19c48     02 4A 05 F6 | 	mov	COUNT_, #2
19c4c     A8 00 A0 FD | 	call	#pushregs_
19c50     18 F0 07 F1 | 	add	ptra, #24
19c54     34 2F BF FD | 	call	#_pop
19c58     FD 12 02 F6 | 	mov	arg01, result1
19c5c     FE 26 02 F6 | 	mov	local01, result2
19c60     FF 28 02 F6 | 	mov	local02, result3
19c64     A7 12 62 FC | 	wrlong	arg01, fp
19c68     04 4E 05 F1 | 	add	fp, #4
19c6c     A7 26 62 FC | 	wrlong	local01, fp
19c70     04 4E 05 F1 | 	add	fp, #4
19c74     A7 28 62 FC | 	wrlong	local02, fp
19c78     08 4E 85 F1 | 	sub	fp, #8
19c7c     0C 2F BF FD | 	call	#_pop
19c80     FD 28 02 F6 | 	mov	local02, result1
19c84     0C 4E 05 F1 | 	add	fp, #12
19c88     A7 28 62 FC | 	wrlong	local02, fp
19c8c     04 4E 05 F1 | 	add	fp, #4
19c90     A7 FC 61 FC | 	wrlong	result2, fp
19c94     04 4E 05 F1 | 	add	fp, #4
19c98     A7 FE 61 FC | 	wrlong	result3, fp
19c9c     08 4E 85 F1 | 	sub	fp, #8
19ca0     A7 12 02 F6 | 	mov	arg01, fp
19ca4     0C 4E 85 F1 | 	sub	fp, #12
19ca8     C4 30 BF FD | 	call	#_converttoint
19cac     FD 28 02 F6 | 	mov	local02, result1
19cb0     14 27 02 F6 | 	mov	local01, local02
19cb4     01 26 66 F0 | 	shl	local01, #1
19cb8     14 27 02 F1 | 	add	local01, local02
19cbc     03 26 66 F0 | 	shl	local01, #3
19cc0     14 00 00 FF 
19cc4     38 E5 05 F1 | 	add	objptr, ##10552
19cc8     F2 26 02 F1 | 	add	local01, objptr
19ccc     A7 12 02 F6 | 	mov	arg01, fp
19cd0     14 00 00 FF 
19cd4     38 E5 85 F1 | 	sub	objptr, ##10552
19cd8     94 30 BF FD | 	call	#_converttoint
19cdc     05 26 06 F1 | 	add	local01, #5
19ce0     13 FB 41 FC | 	wrbyte	result1, local01
19ce4     A7 F0 03 F6 | 	mov	ptra, fp
19ce8     B2 00 A0 FD | 	call	#popregs_
19cec                 | _do_setenv_ret
19cec     2D 00 64 FD | 	ret
19cf0                 | 
19cf0                 | ' 
19cf0                 | ' ' ------------------ setlen
19cf0                 | ' 
19cf0                 | ' sub do_setlen
19cf0                 | _do_setlen
19cf0     02 4A 05 F6 | 	mov	COUNT_, #2
19cf4     A8 00 A0 FD | 	call	#pushregs_
19cf8     18 F0 07 F1 | 	add	ptra, #24
19cfc     8C 2E BF FD | 	call	#_pop
19d00     FD 12 02 F6 | 	mov	arg01, result1
19d04     FE 26 02 F6 | 	mov	local01, result2
19d08     FF 28 02 F6 | 	mov	local02, result3
19d0c     A7 12 62 FC | 	wrlong	arg01, fp
19d10     04 4E 05 F1 | 	add	fp, #4
19d14     A7 26 62 FC | 	wrlong	local01, fp
19d18     04 4E 05 F1 | 	add	fp, #4
19d1c     A7 28 62 FC | 	wrlong	local02, fp
19d20     08 4E 85 F1 | 	sub	fp, #8
19d24     64 2E BF FD | 	call	#_pop
19d28     FD 28 02 F6 | 	mov	local02, result1
19d2c     0C 4E 05 F1 | 	add	fp, #12
19d30     A7 28 62 FC | 	wrlong	local02, fp
19d34     04 4E 05 F1 | 	add	fp, #4
19d38     A7 FC 61 FC | 	wrlong	result2, fp
19d3c     04 4E 05 F1 | 	add	fp, #4
19d40     A7 FE 61 FC | 	wrlong	result3, fp
19d44     08 4E 85 F1 | 	sub	fp, #8
19d48     A7 12 02 F6 | 	mov	arg01, fp
19d4c     0C 4E 85 F1 | 	sub	fp, #12
19d50     1C 30 BF FD | 	call	#_converttoint
19d54     FD 28 02 F6 | 	mov	local02, result1
19d58     14 27 02 F6 | 	mov	local01, local02
19d5c     01 26 66 F0 | 	shl	local01, #1
19d60     14 27 02 F1 | 	add	local01, local02
19d64     03 26 66 F0 | 	shl	local01, #3
19d68     14 00 00 FF 
19d6c     38 E5 05 F1 | 	add	objptr, ##10552
19d70     F2 26 02 F1 | 	add	local01, objptr
19d74     A7 12 02 F6 | 	mov	arg01, fp
19d78     14 00 00 FF 
19d7c     38 E5 85 F1 | 	sub	objptr, ##10552
19d80     A8 30 BF FD | 	call	#_converttofloat
19d84     08 26 06 F1 | 	add	local01, #8
19d88     13 FB 61 FC | 	wrlong	result1, local01
19d8c     A7 F0 03 F6 | 	mov	ptra, fp
19d90     B2 00 A0 FD | 	call	#popregs_
19d94                 | _do_setlen_ret
19d94     2D 00 64 FD | 	ret
19d98                 | 
19d98                 | ' 
19d98                 | ' ' ------------------ setpan
19d98                 | ' 
19d98                 | ' sub do_setpan
19d98                 | _do_setpan
19d98     02 4A 05 F6 | 	mov	COUNT_, #2
19d9c     A8 00 A0 FD | 	call	#pushregs_
19da0     18 F0 07 F1 | 	add	ptra, #24
19da4     E4 2D BF FD | 	call	#_pop
19da8     FD 12 02 F6 | 	mov	arg01, result1
19dac     FE 26 02 F6 | 	mov	local01, result2
19db0     FF 28 02 F6 | 	mov	local02, result3
19db4     A7 12 62 FC | 	wrlong	arg01, fp
19db8     04 4E 05 F1 | 	add	fp, #4
19dbc     A7 26 62 FC | 	wrlong	local01, fp
19dc0     04 4E 05 F1 | 	add	fp, #4
19dc4     A7 28 62 FC | 	wrlong	local02, fp
19dc8     08 4E 85 F1 | 	sub	fp, #8
19dcc     BC 2D BF FD | 	call	#_pop
19dd0     FD 28 02 F6 | 	mov	local02, result1
19dd4     0C 4E 05 F1 | 	add	fp, #12
19dd8     A7 28 62 FC | 	wrlong	local02, fp
19ddc     04 4E 05 F1 | 	add	fp, #4
19de0     A7 FC 61 FC | 	wrlong	result2, fp
19de4     04 4E 05 F1 | 	add	fp, #4
19de8     A7 FE 61 FC | 	wrlong	result3, fp
19dec     08 4E 85 F1 | 	sub	fp, #8
19df0     A7 12 02 F6 | 	mov	arg01, fp
19df4     0C 4E 85 F1 | 	sub	fp, #12
19df8     74 2F BF FD | 	call	#_converttoint
19dfc     FD 28 02 F6 | 	mov	local02, result1
19e00     14 27 02 F6 | 	mov	local01, local02
19e04     01 26 66 F0 | 	shl	local01, #1
19e08     14 27 02 F1 | 	add	local01, local02
19e0c     03 26 66 F0 | 	shl	local01, #3
19e10     14 00 00 FF 
19e14     38 E5 05 F1 | 	add	objptr, ##10552
19e18     F2 26 02 F1 | 	add	local01, objptr
19e1c     A7 12 02 F6 | 	mov	arg01, fp
19e20     14 00 00 FF 
19e24     38 E5 85 F1 | 	sub	objptr, ##10552
19e28     00 30 BF FD | 	call	#_converttofloat
19e2c     10 26 06 F1 | 	add	local01, #16
19e30     13 FB 61 FC | 	wrlong	result1, local01
19e34     A7 F0 03 F6 | 	mov	ptra, fp
19e38     B2 00 A0 FD | 	call	#popregs_
19e3c                 | _do_setpan_ret
19e3c     2D 00 64 FD | 	ret
19e40                 | 
19e40                 | ' 
19e40                 | ' ' ------------------ setsustain
19e40                 | ' 
19e40                 | ' sub do_setsustain
19e40                 | _do_setsustain
19e40     02 4A 05 F6 | 	mov	COUNT_, #2
19e44     A8 00 A0 FD | 	call	#pushregs_
19e48     18 F0 07 F1 | 	add	ptra, #24
19e4c     3C 2D BF FD | 	call	#_pop
19e50     FD 12 02 F6 | 	mov	arg01, result1
19e54     FE 26 02 F6 | 	mov	local01, result2
19e58     FF 28 02 F6 | 	mov	local02, result3
19e5c     A7 12 62 FC | 	wrlong	arg01, fp
19e60     04 4E 05 F1 | 	add	fp, #4
19e64     A7 26 62 FC | 	wrlong	local01, fp
19e68     04 4E 05 F1 | 	add	fp, #4
19e6c     A7 28 62 FC | 	wrlong	local02, fp
19e70     08 4E 85 F1 | 	sub	fp, #8
19e74     14 2D BF FD | 	call	#_pop
19e78     FD 28 02 F6 | 	mov	local02, result1
19e7c     0C 4E 05 F1 | 	add	fp, #12
19e80     A7 28 62 FC | 	wrlong	local02, fp
19e84     04 4E 05 F1 | 	add	fp, #4
19e88     A7 FC 61 FC | 	wrlong	result2, fp
19e8c     04 4E 05 F1 | 	add	fp, #4
19e90     A7 FE 61 FC | 	wrlong	result3, fp
19e94     08 4E 85 F1 | 	sub	fp, #8
19e98     A7 12 02 F6 | 	mov	arg01, fp
19e9c     0C 4E 85 F1 | 	sub	fp, #12
19ea0     CC 2E BF FD | 	call	#_converttoint
19ea4     FD 28 02 F6 | 	mov	local02, result1
19ea8     14 27 02 F6 | 	mov	local01, local02
19eac     01 26 66 F0 | 	shl	local01, #1
19eb0     14 27 02 F1 | 	add	local01, local02
19eb4     03 26 66 F0 | 	shl	local01, #3
19eb8     14 00 00 FF 
19ebc     38 E5 05 F1 | 	add	objptr, ##10552
19ec0     F2 26 02 F1 | 	add	local01, objptr
19ec4     A7 12 02 F6 | 	mov	arg01, fp
19ec8     14 00 00 FF 
19ecc     38 E5 85 F1 | 	sub	objptr, ##10552
19ed0     9C 2E BF FD | 	call	#_converttoint
19ed4     14 26 06 F1 | 	add	local01, #20
19ed8     13 FB 51 FC | 	wrword	result1, local01
19edc     A7 F0 03 F6 | 	mov	ptra, fp
19ee0     B2 00 A0 FD | 	call	#popregs_
19ee4                 | _do_setsustain_ret
19ee4     2D 00 64 FD | 	ret
19ee8                 | 
19ee8                 | ' 
19ee8                 | ' ' ------------------ setvol
19ee8                 | ' 
19ee8                 | ' sub do_setvol
19ee8                 | _do_setvol
19ee8     02 4A 05 F6 | 	mov	COUNT_, #2
19eec     A8 00 A0 FD | 	call	#pushregs_
19ef0     18 F0 07 F1 | 	add	ptra, #24
19ef4     94 2C BF FD | 	call	#_pop
19ef8     FD 12 02 F6 | 	mov	arg01, result1
19efc     FE 26 02 F6 | 	mov	local01, result2
19f00     FF 28 02 F6 | 	mov	local02, result3
19f04     A7 12 62 FC | 	wrlong	arg01, fp
19f08     04 4E 05 F1 | 	add	fp, #4
19f0c     A7 26 62 FC | 	wrlong	local01, fp
19f10     04 4E 05 F1 | 	add	fp, #4
19f14     A7 28 62 FC | 	wrlong	local02, fp
19f18     08 4E 85 F1 | 	sub	fp, #8
19f1c     6C 2C BF FD | 	call	#_pop
19f20     FD 28 02 F6 | 	mov	local02, result1
19f24     0C 4E 05 F1 | 	add	fp, #12
19f28     A7 28 62 FC | 	wrlong	local02, fp
19f2c     04 4E 05 F1 | 	add	fp, #4
19f30     A7 FC 61 FC | 	wrlong	result2, fp
19f34     04 4E 05 F1 | 	add	fp, #4
19f38     A7 FE 61 FC | 	wrlong	result3, fp
19f3c     08 4E 85 F1 | 	sub	fp, #8
19f40     A7 12 02 F6 | 	mov	arg01, fp
19f44     0C 4E 85 F1 | 	sub	fp, #12
19f48     24 2E BF FD | 	call	#_converttoint
19f4c     FD 28 02 F6 | 	mov	local02, result1
19f50     14 27 02 F6 | 	mov	local01, local02
19f54     01 26 66 F0 | 	shl	local01, #1
19f58     14 27 02 F1 | 	add	local01, local02
19f5c     03 26 66 F0 | 	shl	local01, #3
19f60     14 00 00 FF 
19f64     38 E5 05 F1 | 	add	objptr, ##10552
19f68     F2 26 02 F1 | 	add	local01, objptr
19f6c     A7 12 02 F6 | 	mov	arg01, fp
19f70     14 00 00 FF 
19f74     38 E5 85 F1 | 	sub	objptr, ##10552
19f78     B0 2E BF FD | 	call	#_converttofloat
19f7c     0C 26 06 F1 | 	add	local01, #12
19f80     13 FB 61 FC | 	wrlong	result1, local01
19f84     A7 F0 03 F6 | 	mov	ptra, fp
19f88     B2 00 A0 FD | 	call	#popregs_
19f8c                 | _do_setvol_ret
19f8c     2D 00 64 FD | 	ret
19f90                 | 
19f90                 | ' 
19f90                 | ' ' ------------------ setwave
19f90                 | ' 
19f90                 | ' sub do_setwave
19f90                 | _do_setwave
19f90     02 4A 05 F6 | 	mov	COUNT_, #2
19f94     A8 00 A0 FD | 	call	#pushregs_
19f98     18 F0 07 F1 | 	add	ptra, #24
19f9c     EC 2B BF FD | 	call	#_pop
19fa0     FD 12 02 F6 | 	mov	arg01, result1
19fa4     FE 26 02 F6 | 	mov	local01, result2
19fa8     FF 28 02 F6 | 	mov	local02, result3
19fac     A7 12 62 FC | 	wrlong	arg01, fp
19fb0     04 4E 05 F1 | 	add	fp, #4
19fb4     A7 26 62 FC | 	wrlong	local01, fp
19fb8     04 4E 05 F1 | 	add	fp, #4
19fbc     A7 28 62 FC | 	wrlong	local02, fp
19fc0     08 4E 85 F1 | 	sub	fp, #8
19fc4     C4 2B BF FD | 	call	#_pop
19fc8     FD 28 02 F6 | 	mov	local02, result1
19fcc     0C 4E 05 F1 | 	add	fp, #12
19fd0     A7 28 62 FC | 	wrlong	local02, fp
19fd4     04 4E 05 F1 | 	add	fp, #4
19fd8     A7 FC 61 FC | 	wrlong	result2, fp
19fdc     04 4E 05 F1 | 	add	fp, #4
19fe0     A7 FE 61 FC | 	wrlong	result3, fp
19fe4     08 4E 85 F1 | 	sub	fp, #8
19fe8     A7 12 02 F6 | 	mov	arg01, fp
19fec     0C 4E 85 F1 | 	sub	fp, #12
19ff0     7C 2D BF FD | 	call	#_converttoint
19ff4     FD 28 02 F6 | 	mov	local02, result1
19ff8     14 27 02 F6 | 	mov	local01, local02
19ffc     01 26 66 F0 | 	shl	local01, #1
1a000     14 27 02 F1 | 	add	local01, local02
1a004     03 26 66 F0 | 	shl	local01, #3
1a008     14 00 00 FF 
1a00c     38 E5 05 F1 | 	add	objptr, ##10552
1a010     F2 26 02 F1 | 	add	local01, objptr
1a014     A7 12 02 F6 | 	mov	arg01, fp
1a018     14 00 00 FF 
1a01c     38 E5 85 F1 | 	sub	objptr, ##10552
1a020     4C 2D BF FD | 	call	#_converttoint
1a024     04 26 06 F1 | 	add	local01, #4
1a028     13 FB 41 FC | 	wrbyte	result1, local01
1a02c     A7 F0 03 F6 | 	mov	ptra, fp
1a030     B2 00 A0 FD | 	call	#popregs_
1a034                 | _do_setwave_ret
1a034     2D 00 64 FD | 	ret
1a038                 | 
1a038                 | ' 
1a038                 | ' ' ------------------ shutup
1a038                 | ' 
1a038                 | ' sub do_shutup
1a038                 | _do_shutup
1a038     03 4A 05 F6 | 	mov	COUNT_, #3
1a03c     A8 00 A0 FD | 	call	#pushregs_
1a040     18 F0 07 F1 | 	add	ptra, #24
1a044     4A 00 00 FF 
1a048     80 E4 05 F1 | 	add	objptr, ##38016
1a04c     F2 26 02 FB | 	rdlong	local01, objptr
1a050     13 29 02 F6 | 	mov	local02, local01
1a054     01 28 66 F0 | 	shl	local02, #1
1a058     13 29 02 F1 | 	add	local02, local01
1a05c     02 28 66 F0 | 	shl	local02, #2
1a060     03 00 00 FF 
1a064     04 E4 85 F1 | 	sub	objptr, ##1540
1a068     F2 28 02 F1 | 	add	local02, objptr
1a06c     14 2B 0A FB | 	rdlong	local03, local02 wz
1a070     14 4E 05 F1 | 	add	fp, #20
1a074     A7 2A 62 FC | 	wrlong	local03, fp
1a078                 | ' 
1a078                 | ' numpar=compiledline(lineptr_e).result.uresult
1a078                 | ' if numpar=0 then
1a078     14 4E 85 F1 | 	sub	fp, #20
1a07c     47 00 00 FF 
1a080     7C E4 85 F1 | 	sub	objptr, ##36476
1a084     50 00 90 5D |  if_ne	jmp	#LR__2102
1a088                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1a088     10 4E 05 F1 | 	add	fp, #16
1a08c     A7 00 68 FC | 	wrlong	#0, fp
1a090     37 00 00 FF 
1a094     10 E4 05 F1 | 	add	objptr, ##28176
1a098     97 16 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
1a09c                 | LR__2100
1a09c     F2 12 02 FB | 	rdlong	arg01, objptr
1a0a0     A7 2A 02 FB | 	rdlong	local03, fp
1a0a4     06 2A 66 F0 | 	shl	local03, #6
1a0a8     15 13 02 F1 | 	add	arg01, local03
1a0ac     14 12 06 F1 | 	add	arg01, #20
1a0b0     09 01 58 FC | 	wrword	#0, arg01
1a0b4     A7 2A 02 FB | 	rdlong	local03, fp
1a0b8     01 2A 06 F1 | 	add	local03, #1
1a0bc     A7 2A 62 FC | 	wrlong	local03, fp
1a0c0     08 2A 56 F2 | 	cmps	local03, #8 wc
1a0c4     D4 FF 9F CD |  if_b	jmp	#LR__2100
1a0c8                 | LR__2101
1a0c8     37 00 00 FF 
1a0cc     10 E4 85 F1 | 	sub	objptr, ##28176
1a0d0     10 4E 85 F1 | 	sub	fp, #16
1a0d4     64 00 90 FD | 	jmp	#LR__2103
1a0d8                 | LR__2102
1a0d8     B0 2A BF FD | 	call	#_pop
1a0dc     FF 26 02 F6 | 	mov	local01, result3
1a0e0     A7 FA 61 FC | 	wrlong	result1, fp
1a0e4     04 4E 05 F1 | 	add	fp, #4
1a0e8     A7 FC 61 FC | 	wrlong	result2, fp
1a0ec     04 4E 05 F1 | 	add	fp, #4
1a0f0     A7 26 62 FC | 	wrlong	local01, fp
1a0f4     08 4E 85 F1 | 	sub	fp, #8
1a0f8     A7 12 02 F6 | 	mov	arg01, fp
1a0fc     70 2C BF FD | 	call	#_converttoint
1a100     FD 2A 52 F6 | 	abs	local03, result1 wc
1a104     07 2A 06 F5 | 	and	local03, #7
1a108     15 29 82 F6 | 	negc	local02, local03
1a10c     0C 4E 05 F1 | 	add	fp, #12
1a110     A7 28 62 FC | 	wrlong	local02, fp
1a114     37 00 00 FF 
1a118     10 E4 05 F1 | 	add	objptr, ##28176
1a11c     F2 12 02 FB | 	rdlong	arg01, objptr
1a120     37 00 00 FF 
1a124     10 E4 85 F1 | 	sub	objptr, ##28176
1a128     0C 4E 85 F1 | 	sub	fp, #12
1a12c     06 28 66 F0 | 	shl	local02, #6
1a130     14 13 02 F1 | 	add	arg01, local02
1a134     14 12 06 F1 | 	add	arg01, #20
1a138     09 01 58 FC | 	wrword	#0, arg01
1a13c                 | LR__2103
1a13c     A7 F0 03 F6 | 	mov	ptra, fp
1a140     B2 00 A0 FD | 	call	#popregs_
1a144                 | _do_shutup_ret
1a144     2D 00 64 FD | 	ret
1a148                 | 
1a148                 | ' 
1a148                 | ' ' ------------------ sin
1a148                 | ' 
1a148                 | ' sub do_sin
1a148                 | _do_sin
1a148     01 4A 05 F6 | 	mov	COUNT_, #1
1a14c     A8 00 A0 FD | 	call	#pushregs_
1a150     10 F0 07 F1 | 	add	ptra, #16
1a154     4A 00 00 FF 
1a158     80 E4 05 F1 | 	add	objptr, ##38016
1a15c     F2 26 02 FB | 	rdlong	local01, objptr
1a160     13 17 02 F6 | 	mov	arg03, local01
1a164     01 16 66 F0 | 	shl	arg03, #1
1a168     13 17 02 F1 | 	add	arg03, local01
1a16c     02 16 66 F0 | 	shl	arg03, #2
1a170     03 00 00 FF 
1a174     04 E4 85 F1 | 	sub	objptr, ##1540
1a178     F2 16 02 F1 | 	add	arg03, objptr
1a17c     0B 17 02 FB | 	rdlong	arg03, arg03
1a180     0C 4E 05 F1 | 	add	fp, #12
1a184     A7 16 62 FC | 	wrlong	arg03, fp
1a188                 | ' 
1a188                 | ' numpar=compiledline(lineptr_e).result.uresult
1a188                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1a188     0C 4E 85 F1 | 	sub	fp, #12
1a18c     02 16 16 F2 | 	cmp	arg03, #2 wc
1a190     47 00 00 FF 
1a194     7C E4 85 F1 | 	sub	objptr, ##36476
1a198     0C 4E 05 C1 |  if_b	add	fp, #12
1a19c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a1a0     0C 4E 85 C1 |  if_b	sub	fp, #12
1a1a4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2110
1a1a8     00 12 06 F6 | 	mov	arg01, #0
1a1ac     C8 09 B1 FD | 	call	#__system___getiolock_0593
1a1b0     FD 12 02 F6 | 	mov	arg01, result1
1a1b4     1C AD B0 FD | 	call	#__system___lockmem
1a1b8     AA 01 00 FF 
1a1bc     AC 14 06 F6 | 	mov	arg02, ##@LR__5876
1a1c0     00 12 06 F6 | 	mov	arg01, #0
1a1c4     00 16 06 F6 | 	mov	arg03, #0
1a1c8     00 BA B0 FD | 	call	#__system___basic_print_string
1a1cc     00 12 06 F6 | 	mov	arg01, #0
1a1d0     A4 09 B1 FD | 	call	#__system___getiolock_0593
1a1d4     FD 00 68 FC | 	wrlong	#0, result1
1a1d8     27 12 06 F6 | 	mov	arg01, #39
1a1dc     00 14 06 F6 | 	mov	arg02, #0
1a1e0     48 73 B0 FD | 	call	#_printerror
1a1e4     64 00 90 FD | 	jmp	#LR__2111
1a1e8                 | LR__2110
1a1e8     A0 29 BF FD | 	call	#_pop
1a1ec     A7 FA 61 FC | 	wrlong	result1, fp
1a1f0     04 4E 05 F1 | 	add	fp, #4
1a1f4     A7 FC 61 FC | 	wrlong	result2, fp
1a1f8     04 4E 05 F1 | 	add	fp, #4
1a1fc     A7 FE 61 FC | 	wrlong	result3, fp
1a200     08 4E 85 F1 | 	sub	fp, #8
1a204     51 00 00 FF 
1a208     E4 E5 05 F1 | 	add	objptr, ##41956
1a20c     F2 26 02 FB | 	rdlong	local01, objptr
1a210     51 00 00 FF 
1a214     E4 E5 85 F1 | 	sub	objptr, ##41956
1a218     A7 12 02 F6 | 	mov	arg01, fp
1a21c     0C 2C BF FD | 	call	#_converttofloat
1a220     FD 14 02 F6 | 	mov	arg02, result1
1a224     13 13 02 F6 | 	mov	arg01, local01
1a228     24 DB B0 FD | 	call	#__system___float_mul
1a22c     FD 12 02 F6 | 	mov	arg01, result1
1a230     7C E4 B0 FD | 	call	#__system____builtin_sinf
1a234     A7 FA 61 FC | 	wrlong	result1, fp
1a238     08 4E 05 F1 | 	add	fp, #8
1a23c     A7 3C 68 FC | 	wrlong	#30, fp
1a240     08 4E 85 F1 | 	sub	fp, #8
1a244     A7 12 02 F6 | 	mov	arg01, fp
1a248     D8 29 BF FD | 	call	#_push
1a24c                 | LR__2111
1a24c     A7 F0 03 F6 | 	mov	ptra, fp
1a250     B2 00 A0 FD | 	call	#popregs_
1a254                 | _do_sin_ret
1a254     2D 00 64 FD | 	ret
1a258                 | 
1a258                 | ' 
1a258                 | ' ' ------------------ skip
1a258                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1a258                 | ' 
1a258                 | ' sub do_skip
1a258                 | _do_skip
1a258     4A 00 00 FF 
1a25c     80 E4 05 F1 | 	add	objptr, ##38016
1a260     F2 00 02 FB | 	rdlong	_var01, objptr
1a264     00 03 02 F6 | 	mov	_var02, _var01
1a268     01 02 66 F0 | 	shl	_var02, #1
1a26c     00 03 02 F1 | 	add	_var02, _var01
1a270     02 02 66 F0 | 	shl	_var02, #2
1a274     03 00 00 FF 
1a278     04 E4 85 F1 | 	sub	objptr, ##1540
1a27c     F2 02 02 F1 | 	add	_var02, objptr
1a280     01 03 02 FB | 	rdlong	_var02, _var02
1a284     01 02 86 F1 | 	sub	_var02, #1
1a288     03 00 00 FF 
1a28c     04 E4 05 F1 | 	add	objptr, ##1540
1a290     F2 02 62 FC | 	wrlong	_var02, objptr
1a294     4A 00 00 FF 
1a298     80 E4 85 F1 | 	sub	objptr, ##38016
1a29c                 | _do_skip_ret
1a29c     2D 00 64 FD | 	ret
1a2a0                 | 
1a2a0                 | ' 
1a2a0                 | ' ' ------------------ sprite
1a2a0                 | ' 
1a2a0                 | ' sub do_sprite
1a2a0                 | _do_sprite
1a2a0     00 4A 05 F6 | 	mov	COUNT_, #0
1a2a4     A8 00 A0 FD | 	call	#pushregs_
1a2a8     30 F0 07 F1 | 	add	ptra, #48
1a2ac     DC 28 BF FD | 	call	#_pop
1a2b0     FD 16 02 F6 | 	mov	arg03, result1
1a2b4     FE 14 02 F6 | 	mov	arg02, result2
1a2b8     FF 12 02 F6 | 	mov	arg01, result3
1a2bc     18 4E 05 F1 | 	add	fp, #24
1a2c0     A7 16 62 FC | 	wrlong	arg03, fp
1a2c4     04 4E 05 F1 | 	add	fp, #4
1a2c8     A7 14 62 FC | 	wrlong	arg02, fp
1a2cc     04 4E 05 F1 | 	add	fp, #4
1a2d0     A7 12 62 FC | 	wrlong	arg01, fp
1a2d4     20 4E 85 F1 | 	sub	fp, #32
1a2d8     B0 28 BF FD | 	call	#_pop
1a2dc     FD 16 02 F6 | 	mov	arg03, result1
1a2e0     FE 14 02 F6 | 	mov	arg02, result2
1a2e4     FF 12 02 F6 | 	mov	arg01, result3
1a2e8     0C 4E 05 F1 | 	add	fp, #12
1a2ec     A7 16 62 FC | 	wrlong	arg03, fp
1a2f0     04 4E 05 F1 | 	add	fp, #4
1a2f4     A7 14 62 FC | 	wrlong	arg02, fp
1a2f8     04 4E 05 F1 | 	add	fp, #4
1a2fc     A7 12 62 FC | 	wrlong	arg01, fp
1a300     14 4E 85 F1 | 	sub	fp, #20
1a304     84 28 BF FD | 	call	#_pop
1a308     FF 16 02 F6 | 	mov	arg03, result3
1a30c     A7 FA 61 FC | 	wrlong	result1, fp
1a310     04 4E 05 F1 | 	add	fp, #4
1a314     A7 FC 61 FC | 	wrlong	result2, fp
1a318     04 4E 05 F1 | 	add	fp, #4
1a31c     A7 16 62 FC | 	wrlong	arg03, fp
1a320     08 4E 85 F1 | 	sub	fp, #8
1a324     A7 12 02 F6 | 	mov	arg01, fp
1a328     44 2A BF FD | 	call	#_converttoint
1a32c     24 4E 05 F1 | 	add	fp, #36
1a330     A7 FA 61 FC | 	wrlong	result1, fp
1a334     18 4E 85 F1 | 	sub	fp, #24
1a338     A7 12 02 F6 | 	mov	arg01, fp
1a33c     0C 4E 85 F1 | 	sub	fp, #12
1a340     2C 2A BF FD | 	call	#_converttoint
1a344     28 4E 05 F1 | 	add	fp, #40
1a348     A7 FA 61 FC | 	wrlong	result1, fp
1a34c     10 4E 85 F1 | 	sub	fp, #16
1a350     A7 12 02 F6 | 	mov	arg01, fp
1a354     18 4E 85 F1 | 	sub	fp, #24
1a358     14 2A BF FD | 	call	#_converttoint
1a35c     2C 4E 05 F1 | 	add	fp, #44
1a360     A7 FA 61 FC | 	wrlong	result1, fp
1a364     08 4E 85 F1 | 	sub	fp, #8
1a368     A7 12 02 FB | 	rdlong	arg01, fp
1a36c     04 4E 05 F1 | 	add	fp, #4
1a370     A7 14 02 FB | 	rdlong	arg02, fp
1a374     FD 16 02 F6 | 	mov	arg03, result1
1a378     28 4E 85 F1 | 	sub	fp, #40
1a37c     90 81 B0 FD | 	call	#_hg010b_spin2_setspritepos
1a380     A7 F0 03 F6 | 	mov	ptra, fp
1a384     B2 00 A0 FD | 	call	#popregs_
1a388                 | _do_sprite_ret
1a388     2D 00 64 FD | 	ret
1a38c                 | 
1a38c                 | ' 
1a38c                 | ' ' ------------------ sqr
1a38c                 | ' 
1a38c                 | ' sub do_sqr
1a38c                 | _do_sqr
1a38c     01 4A 05 F6 | 	mov	COUNT_, #1
1a390     A8 00 A0 FD | 	call	#pushregs_
1a394     10 F0 07 F1 | 	add	ptra, #16
1a398     4A 00 00 FF 
1a39c     80 E4 05 F1 | 	add	objptr, ##38016
1a3a0     F2 26 02 FB | 	rdlong	local01, objptr
1a3a4     13 17 02 F6 | 	mov	arg03, local01
1a3a8     01 16 66 F0 | 	shl	arg03, #1
1a3ac     13 17 02 F1 | 	add	arg03, local01
1a3b0     02 16 66 F0 | 	shl	arg03, #2
1a3b4     03 00 00 FF 
1a3b8     04 E4 85 F1 | 	sub	objptr, ##1540
1a3bc     F2 16 02 F1 | 	add	arg03, objptr
1a3c0     0B 17 02 FB | 	rdlong	arg03, arg03
1a3c4     0C 4E 05 F1 | 	add	fp, #12
1a3c8     A7 16 62 FC | 	wrlong	arg03, fp
1a3cc                 | ' 
1a3cc                 | ' numpar=compiledline(lineptr_e).result.uresult
1a3cc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1a3cc     0C 4E 85 F1 | 	sub	fp, #12
1a3d0     02 16 16 F2 | 	cmp	arg03, #2 wc
1a3d4     47 00 00 FF 
1a3d8     7C E4 85 F1 | 	sub	objptr, ##36476
1a3dc     0C 4E 05 C1 |  if_b	add	fp, #12
1a3e0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a3e4     0C 4E 85 C1 |  if_b	sub	fp, #12
1a3e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2120
1a3ec     00 12 06 F6 | 	mov	arg01, #0
1a3f0     84 07 B1 FD | 	call	#__system___getiolock_0593
1a3f4     FD 12 02 F6 | 	mov	arg01, result1
1a3f8     D8 AA B0 FD | 	call	#__system___lockmem
1a3fc     AA 01 00 FF 
1a400     B2 14 06 F6 | 	mov	arg02, ##@LR__5877
1a404     00 12 06 F6 | 	mov	arg01, #0
1a408     00 16 06 F6 | 	mov	arg03, #0
1a40c     BC B7 B0 FD | 	call	#__system___basic_print_string
1a410     00 12 06 F6 | 	mov	arg01, #0
1a414     60 07 B1 FD | 	call	#__system___getiolock_0593
1a418     FD 00 68 FC | 	wrlong	#0, result1
1a41c     27 12 06 F6 | 	mov	arg01, #39
1a420     00 14 06 F6 | 	mov	arg02, #0
1a424     04 71 B0 FD | 	call	#_printerror
1a428     48 00 90 FD | 	jmp	#LR__2121
1a42c                 | LR__2120
1a42c     5C 27 BF FD | 	call	#_pop
1a430     FF 26 02 F6 | 	mov	local01, result3
1a434     A7 FA 61 FC | 	wrlong	result1, fp
1a438     04 4E 05 F1 | 	add	fp, #4
1a43c     A7 FC 61 FC | 	wrlong	result2, fp
1a440     04 4E 05 F1 | 	add	fp, #4
1a444     A7 26 62 FC | 	wrlong	local01, fp
1a448     08 4E 85 F1 | 	sub	fp, #8
1a44c     A7 12 02 F6 | 	mov	arg01, fp
1a450     D8 29 BF FD | 	call	#_converttofloat
1a454     FD 12 02 F6 | 	mov	arg01, result1
1a458     1C D8 B0 FD | 	call	#__system___float_sqrt
1a45c     A7 FA 61 FC | 	wrlong	result1, fp
1a460     08 4E 05 F1 | 	add	fp, #8
1a464     A7 3C 68 FC | 	wrlong	#30, fp
1a468     08 4E 85 F1 | 	sub	fp, #8
1a46c     A7 12 02 F6 | 	mov	arg01, fp
1a470     B0 27 BF FD | 	call	#_push
1a474                 | LR__2121
1a474     A7 F0 03 F6 | 	mov	ptra, fp
1a478     B2 00 A0 FD | 	call	#popregs_
1a47c                 | _do_sqr_ret
1a47c     2D 00 64 FD | 	ret
1a480                 | 
1a480                 | ' 
1a480                 | ' ' ------------------ stick
1a480                 | ' 
1a480                 | ' sub do_stick
1a480                 | _do_stick
1a480     01 4A 05 F6 | 	mov	COUNT_, #1
1a484     A8 00 A0 FD | 	call	#pushregs_
1a488     10 F0 07 F1 | 	add	ptra, #16
1a48c     4A 00 00 FF 
1a490     80 E4 05 F1 | 	add	objptr, ##38016
1a494     F2 26 02 FB | 	rdlong	local01, objptr
1a498     13 17 02 F6 | 	mov	arg03, local01
1a49c     01 16 66 F0 | 	shl	arg03, #1
1a4a0     13 17 02 F1 | 	add	arg03, local01
1a4a4     02 16 66 F0 | 	shl	arg03, #2
1a4a8     03 00 00 FF 
1a4ac     04 E4 85 F1 | 	sub	objptr, ##1540
1a4b0     F2 16 02 F1 | 	add	arg03, objptr
1a4b4     0B 17 02 FB | 	rdlong	arg03, arg03
1a4b8     0C 4E 05 F1 | 	add	fp, #12
1a4bc     A7 16 62 FC | 	wrlong	arg03, fp
1a4c0                 | ' 
1a4c0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a4c0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1a4c0     0C 4E 85 F1 | 	sub	fp, #12
1a4c4     02 16 16 F2 | 	cmp	arg03, #2 wc
1a4c8     47 00 00 FF 
1a4cc     7C E4 85 F1 | 	sub	objptr, ##36476
1a4d0     40 00 90 CD |  if_b	jmp	#LR__2130
1a4d4     00 12 06 F6 | 	mov	arg01, #0
1a4d8     9C 06 B1 FD | 	call	#__system___getiolock_0593
1a4dc     FD 12 02 F6 | 	mov	arg01, result1
1a4e0     F0 A9 B0 FD | 	call	#__system___lockmem
1a4e4     AA 01 00 FF 
1a4e8     B8 14 06 F6 | 	mov	arg02, ##@LR__5878
1a4ec     00 12 06 F6 | 	mov	arg01, #0
1a4f0     00 16 06 F6 | 	mov	arg03, #0
1a4f4     D4 B6 B0 FD | 	call	#__system___basic_print_string
1a4f8     00 12 06 F6 | 	mov	arg01, #0
1a4fc     78 06 B1 FD | 	call	#__system___getiolock_0593
1a500     FD 00 68 FC | 	wrlong	#0, result1
1a504     27 12 06 F6 | 	mov	arg01, #39
1a508     00 14 06 F6 | 	mov	arg02, #0
1a50c     1C 70 B0 FD | 	call	#_printerror
1a510     F0 00 90 FD | 	jmp	#LR__2134
1a514                 | LR__2130
1a514                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1a514     0C 4E 05 F1 | 	add	fp, #12
1a518     A7 FE 09 FB | 	rdlong	result3, fp wz
1a51c     0C 4E 85 F1 | 	sub	fp, #12
1a520     30 00 90 5D |  if_ne	jmp	#LR__2131
1a524     51 00 00 FF 
1a528     58 E5 05 F1 | 	add	objptr, ##41816
1a52c     F2 26 02 FB | 	rdlong	local01, objptr
1a530     51 00 00 FF 
1a534     58 E5 85 F1 | 	sub	objptr, ##41816
1a538     A7 26 62 FC | 	wrlong	local01, fp
1a53c     08 4E 05 F1 | 	add	fp, #8
1a540     A7 3A 68 FC | 	wrlong	#29, fp
1a544     08 4E 85 F1 | 	sub	fp, #8
1a548     A7 12 02 F6 | 	mov	arg01, fp
1a54c     D4 26 BF FD | 	call	#_push
1a550     B0 00 90 FD | 	jmp	#LR__2134
1a554                 | LR__2131
1a554     34 26 BF FD | 	call	#_pop
1a558     A7 FA 61 FC | 	wrlong	result1, fp
1a55c     04 4E 05 F1 | 	add	fp, #4
1a560     A7 FC 61 FC | 	wrlong	result2, fp
1a564     04 4E 05 F1 | 	add	fp, #4
1a568     A7 FE 61 FC | 	wrlong	result3, fp
1a56c                 | ' t1=pop()
1a56c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1a56c     08 4E 85 F1 | 	sub	fp, #8
1a570     1C FE 0D F2 | 	cmp	result3, #28 wz
1a574     08 4E 05 51 |  if_ne	add	fp, #8
1a578     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a57c     08 4E 85 51 |  if_ne	sub	fp, #8
1a580     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a584     70 00 90 5D |  if_ne	jmp	#LR__2133
1a588     A7 26 02 FB | 	rdlong	local01, fp
1a58c     52 00 00 FF 
1a590     44 E4 05 F1 | 	add	objptr, ##42052
1a594     F2 26 62 FC | 	wrlong	local01, objptr
1a598                 | '   q=t1.result.uresult
1a598                 | '   if q<7 then 
1a598     52 00 00 FF 
1a59c     44 E4 85 F1 | 	sub	objptr, ##42052
1a5a0     07 26 56 F2 | 	cmps	local01, #7 wc
1a5a4     40 00 90 3D |  if_ae	jmp	#LR__2132
1a5a8     52 00 00 FF 
1a5ac     44 E4 05 F1 | 	add	objptr, ##42052
1a5b0     F2 26 02 FB | 	rdlong	local01, objptr
1a5b4     02 26 66 F0 | 	shl	local01, #2
1a5b8     EC E4 85 F1 | 	sub	objptr, #236
1a5bc     F2 26 02 F1 | 	add	local01, objptr
1a5c0     13 27 02 FB | 	rdlong	local01, local01
1a5c4     A7 26 62 FC | 	wrlong	local01, fp
1a5c8     08 4E 05 F1 | 	add	fp, #8
1a5cc     A7 3A 68 FC | 	wrlong	#29, fp
1a5d0     08 4E 85 F1 | 	sub	fp, #8
1a5d4     A7 12 02 F6 | 	mov	arg01, fp
1a5d8     51 00 00 FF 
1a5dc     58 E5 85 F1 | 	sub	objptr, ##41816
1a5e0     40 26 BF FD | 	call	#_push
1a5e4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1a5e4     1C 00 90 FD | 	jmp	#LR__2134
1a5e8                 | LR__2132
1a5e8     29 12 06 F6 | 	mov	arg01, #41
1a5ec     00 14 06 F6 | 	mov	arg02, #0
1a5f0     38 6F B0 FD | 	call	#_printerror
1a5f4                 | '      printerror(41) : return
1a5f4     0C 00 90 FD | 	jmp	#LR__2134
1a5f8                 | LR__2133
1a5f8     29 12 06 F6 | 	mov	arg01, #41
1a5fc     00 14 06 F6 | 	mov	arg02, #0
1a600     28 6F B0 FD | 	call	#_printerror
1a604                 | LR__2134
1a604     A7 F0 03 F6 | 	mov	ptra, fp
1a608     B2 00 A0 FD | 	call	#popregs_
1a60c                 | _do_stick_ret
1a60c     2D 00 64 FD | 	ret
1a610                 | 
1a610                 | ' 
1a610                 | ' ' ------------------ strig
1a610                 | ' 
1a610                 | ' sub do_strig
1a610                 | _do_strig
1a610     01 4A 05 F6 | 	mov	COUNT_, #1
1a614     A8 00 A0 FD | 	call	#pushregs_
1a618     10 F0 07 F1 | 	add	ptra, #16
1a61c     4A 00 00 FF 
1a620     80 E4 05 F1 | 	add	objptr, ##38016
1a624     F2 26 02 FB | 	rdlong	local01, objptr
1a628     13 17 02 F6 | 	mov	arg03, local01
1a62c     01 16 66 F0 | 	shl	arg03, #1
1a630     13 17 02 F1 | 	add	arg03, local01
1a634     02 16 66 F0 | 	shl	arg03, #2
1a638     03 00 00 FF 
1a63c     04 E4 85 F1 | 	sub	objptr, ##1540
1a640     F2 16 02 F1 | 	add	arg03, objptr
1a644     0B 17 02 FB | 	rdlong	arg03, arg03
1a648     0C 4E 05 F1 | 	add	fp, #12
1a64c     A7 16 62 FC | 	wrlong	arg03, fp
1a650                 | ' 
1a650                 | ' numpar=compiledline(lineptr_e).result.uresult
1a650                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1a650     0C 4E 85 F1 | 	sub	fp, #12
1a654     02 16 16 F2 | 	cmp	arg03, #2 wc
1a658     47 00 00 FF 
1a65c     7C E4 85 F1 | 	sub	objptr, ##36476
1a660     40 00 90 CD |  if_b	jmp	#LR__2140
1a664     00 12 06 F6 | 	mov	arg01, #0
1a668     0C 05 B1 FD | 	call	#__system___getiolock_0593
1a66c     FD 12 02 F6 | 	mov	arg01, result1
1a670     60 A8 B0 FD | 	call	#__system___lockmem
1a674     AA 01 00 FF 
1a678     C0 14 06 F6 | 	mov	arg02, ##@LR__5879
1a67c     00 12 06 F6 | 	mov	arg01, #0
1a680     00 16 06 F6 | 	mov	arg03, #0
1a684     44 B5 B0 FD | 	call	#__system___basic_print_string
1a688     00 12 06 F6 | 	mov	arg01, #0
1a68c     E8 04 B1 FD | 	call	#__system___getiolock_0593
1a690     FD 00 68 FC | 	wrlong	#0, result1
1a694     27 12 06 F6 | 	mov	arg01, #39
1a698     00 14 06 F6 | 	mov	arg02, #0
1a69c     8C 6E B0 FD | 	call	#_printerror
1a6a0     F0 00 90 FD | 	jmp	#LR__2144
1a6a4                 | LR__2140
1a6a4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1a6a4     0C 4E 05 F1 | 	add	fp, #12
1a6a8     A7 FE 09 FB | 	rdlong	result3, fp wz
1a6ac     0C 4E 85 F1 | 	sub	fp, #12
1a6b0     30 00 90 5D |  if_ne	jmp	#LR__2141
1a6b4     51 00 00 FF 
1a6b8     74 E5 05 F1 | 	add	objptr, ##41844
1a6bc     F2 26 02 FB | 	rdlong	local01, objptr
1a6c0     51 00 00 FF 
1a6c4     74 E5 85 F1 | 	sub	objptr, ##41844
1a6c8     A7 26 62 FC | 	wrlong	local01, fp
1a6cc     08 4E 05 F1 | 	add	fp, #8
1a6d0     A7 3A 68 FC | 	wrlong	#29, fp
1a6d4     08 4E 85 F1 | 	sub	fp, #8
1a6d8     A7 12 02 F6 | 	mov	arg01, fp
1a6dc     44 25 BF FD | 	call	#_push
1a6e0     B0 00 90 FD | 	jmp	#LR__2144
1a6e4                 | LR__2141
1a6e4     A4 24 BF FD | 	call	#_pop
1a6e8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ec     04 4E 05 F1 | 	add	fp, #4
1a6f0     A7 FC 61 FC | 	wrlong	result2, fp
1a6f4     04 4E 05 F1 | 	add	fp, #4
1a6f8     A7 FE 61 FC | 	wrlong	result3, fp
1a6fc                 | ' t1=pop()
1a6fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1a6fc     08 4E 85 F1 | 	sub	fp, #8
1a700     1C FE 0D F2 | 	cmp	result3, #28 wz
1a704     08 4E 05 51 |  if_ne	add	fp, #8
1a708     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a70c     08 4E 85 51 |  if_ne	sub	fp, #8
1a710     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a714     70 00 90 5D |  if_ne	jmp	#LR__2143
1a718     A7 26 02 FB | 	rdlong	local01, fp
1a71c     52 00 00 FF 
1a720     44 E4 05 F1 | 	add	objptr, ##42052
1a724     F2 26 62 FC | 	wrlong	local01, objptr
1a728                 | '   q=t1.result.uresult
1a728                 | '   if q<7 then 
1a728     52 00 00 FF 
1a72c     44 E4 85 F1 | 	sub	objptr, ##42052
1a730     07 26 56 F2 | 	cmps	local01, #7 wc
1a734     40 00 90 3D |  if_ae	jmp	#LR__2142
1a738     52 00 00 FF 
1a73c     44 E4 05 F1 | 	add	objptr, ##42052
1a740     F2 26 02 FB | 	rdlong	local01, objptr
1a744     02 26 66 F0 | 	shl	local01, #2
1a748     D0 E4 85 F1 | 	sub	objptr, #208
1a74c     F2 26 02 F1 | 	add	local01, objptr
1a750     13 27 02 FB | 	rdlong	local01, local01
1a754     A7 26 62 FC | 	wrlong	local01, fp
1a758     08 4E 05 F1 | 	add	fp, #8
1a75c     A7 3A 68 FC | 	wrlong	#29, fp
1a760     08 4E 85 F1 | 	sub	fp, #8
1a764     A7 12 02 F6 | 	mov	arg01, fp
1a768     51 00 00 FF 
1a76c     74 E5 85 F1 | 	sub	objptr, ##41844
1a770     B0 24 BF FD | 	call	#_push
1a774                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1a774     1C 00 90 FD | 	jmp	#LR__2144
1a778                 | LR__2142
1a778     29 12 06 F6 | 	mov	arg01, #41
1a77c     00 14 06 F6 | 	mov	arg02, #0
1a780     A8 6D B0 FD | 	call	#_printerror
1a784                 | '      printerror(41) : return
1a784     0C 00 90 FD | 	jmp	#LR__2144
1a788                 | LR__2143
1a788     29 12 06 F6 | 	mov	arg01, #41
1a78c     00 14 06 F6 | 	mov	arg02, #0
1a790     98 6D B0 FD | 	call	#_printerror
1a794                 | LR__2144
1a794     A7 F0 03 F6 | 	mov	ptra, fp
1a798     B2 00 A0 FD | 	call	#popregs_
1a79c                 | _do_strig_ret
1a79c     2D 00 64 FD | 	ret
1a7a0                 | 
1a7a0                 | ' 
1a7a0                 | ' ' ------------------ tan
1a7a0                 | ' 
1a7a0                 | ' sub do_tan
1a7a0                 | _do_tan
1a7a0     01 4A 05 F6 | 	mov	COUNT_, #1
1a7a4     A8 00 A0 FD | 	call	#pushregs_
1a7a8     10 F0 07 F1 | 	add	ptra, #16
1a7ac     4A 00 00 FF 
1a7b0     80 E4 05 F1 | 	add	objptr, ##38016
1a7b4     F2 26 02 FB | 	rdlong	local01, objptr
1a7b8     13 17 02 F6 | 	mov	arg03, local01
1a7bc     01 16 66 F0 | 	shl	arg03, #1
1a7c0     13 17 02 F1 | 	add	arg03, local01
1a7c4     02 16 66 F0 | 	shl	arg03, #2
1a7c8     03 00 00 FF 
1a7cc     04 E4 85 F1 | 	sub	objptr, ##1540
1a7d0     F2 16 02 F1 | 	add	arg03, objptr
1a7d4     0B 17 02 FB | 	rdlong	arg03, arg03
1a7d8     0C 4E 05 F1 | 	add	fp, #12
1a7dc     A7 16 62 FC | 	wrlong	arg03, fp
1a7e0                 | ' 
1a7e0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a7e0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1a7e0     0C 4E 85 F1 | 	sub	fp, #12
1a7e4     02 16 16 F2 | 	cmp	arg03, #2 wc
1a7e8     47 00 00 FF 
1a7ec     7C E4 85 F1 | 	sub	objptr, ##36476
1a7f0     0C 4E 05 C1 |  if_b	add	fp, #12
1a7f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a7f8     0C 4E 85 C1 |  if_b	sub	fp, #12
1a7fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2150
1a800     00 12 06 F6 | 	mov	arg01, #0
1a804     70 03 B1 FD | 	call	#__system___getiolock_0593
1a808     FD 12 02 F6 | 	mov	arg01, result1
1a80c     C4 A6 B0 FD | 	call	#__system___lockmem
1a810     AA 01 00 FF 
1a814     C8 14 06 F6 | 	mov	arg02, ##@LR__5880
1a818     00 12 06 F6 | 	mov	arg01, #0
1a81c     00 16 06 F6 | 	mov	arg03, #0
1a820     A8 B3 B0 FD | 	call	#__system___basic_print_string
1a824     00 12 06 F6 | 	mov	arg01, #0
1a828     4C 03 B1 FD | 	call	#__system___getiolock_0593
1a82c     FD 00 68 FC | 	wrlong	#0, result1
1a830     27 12 06 F6 | 	mov	arg01, #39
1a834     00 14 06 F6 | 	mov	arg02, #0
1a838     F0 6C B0 FD | 	call	#_printerror
1a83c     64 00 90 FD | 	jmp	#LR__2151
1a840                 | LR__2150
1a840     48 23 BF FD | 	call	#_pop
1a844     A7 FA 61 FC | 	wrlong	result1, fp
1a848     04 4E 05 F1 | 	add	fp, #4
1a84c     A7 FC 61 FC | 	wrlong	result2, fp
1a850     04 4E 05 F1 | 	add	fp, #4
1a854     A7 FE 61 FC | 	wrlong	result3, fp
1a858     08 4E 85 F1 | 	sub	fp, #8
1a85c     51 00 00 FF 
1a860     E4 E5 05 F1 | 	add	objptr, ##41956
1a864     F2 26 02 FB | 	rdlong	local01, objptr
1a868     51 00 00 FF 
1a86c     E4 E5 85 F1 | 	sub	objptr, ##41956
1a870     A7 12 02 F6 | 	mov	arg01, fp
1a874     B4 25 BF FD | 	call	#_converttofloat
1a878     FD 14 02 F6 | 	mov	arg02, result1
1a87c     13 13 02 F6 | 	mov	arg01, local01
1a880     CC D4 B0 FD | 	call	#__system___float_mul
1a884     FD 12 02 F6 | 	mov	arg01, result1
1a888     70 DF B0 FD | 	call	#__system____builtin_tanf
1a88c     A7 FA 61 FC | 	wrlong	result1, fp
1a890     08 4E 05 F1 | 	add	fp, #8
1a894     A7 3C 68 FC | 	wrlong	#30, fp
1a898     08 4E 85 F1 | 	sub	fp, #8
1a89c     A7 12 02 F6 | 	mov	arg01, fp
1a8a0     80 23 BF FD | 	call	#_push
1a8a4                 | LR__2151
1a8a4     A7 F0 03 F6 | 	mov	ptra, fp
1a8a8     B2 00 A0 FD | 	call	#popregs_
1a8ac                 | _do_tan_ret
1a8ac     2D 00 64 FD | 	ret
1a8b0                 | 
1a8b0                 | ' 
1a8b0                 | ' ' ------------------ val
1a8b0                 | ' 
1a8b0                 | ' sub do_val
1a8b0                 | _do_val
1a8b0     03 4A 05 F6 | 	mov	COUNT_, #3
1a8b4     A8 00 A0 FD | 	call	#pushregs_
1a8b8     20 F0 07 F1 | 	add	ptra, #32
1a8bc     4A 00 00 FF 
1a8c0     80 E4 05 F1 | 	add	objptr, ##38016
1a8c4     F2 16 02 FB | 	rdlong	arg03, objptr
1a8c8     0B 27 02 F6 | 	mov	local01, arg03
1a8cc     01 26 66 F0 | 	shl	local01, #1
1a8d0     0B 27 02 F1 | 	add	local01, arg03
1a8d4     02 26 66 F0 | 	shl	local01, #2
1a8d8     03 00 00 FF 
1a8dc     04 E4 85 F1 | 	sub	objptr, ##1540
1a8e0     F2 26 02 F1 | 	add	local01, objptr
1a8e4     13 17 02 FB | 	rdlong	arg03, local01
1a8e8     0C 4E 05 F1 | 	add	fp, #12
1a8ec     A7 16 62 FC | 	wrlong	arg03, fp
1a8f0                 | ' 
1a8f0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8f0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1a8f0     0C 4E 85 F1 | 	sub	fp, #12
1a8f4     02 16 16 F2 | 	cmp	arg03, #2 wc
1a8f8     47 00 00 FF 
1a8fc     7C E4 85 F1 | 	sub	objptr, ##36476
1a900     0C 4E 05 C1 |  if_b	add	fp, #12
1a904     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1a908     0C 4E 85 C1 |  if_b	sub	fp, #12
1a90c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2160
1a910     00 12 06 F6 | 	mov	arg01, #0
1a914     60 02 B1 FD | 	call	#__system___getiolock_0593
1a918     FD 12 02 F6 | 	mov	arg01, result1
1a91c     B4 A5 B0 FD | 	call	#__system___lockmem
1a920     AA 01 00 FF 
1a924     CE 14 06 F6 | 	mov	arg02, ##@LR__5881
1a928     00 12 06 F6 | 	mov	arg01, #0
1a92c     00 16 06 F6 | 	mov	arg03, #0
1a930     98 B2 B0 FD | 	call	#__system___basic_print_string
1a934     00 12 06 F6 | 	mov	arg01, #0
1a938     3C 02 B1 FD | 	call	#__system___getiolock_0593
1a93c     FD 00 68 FC | 	wrlong	#0, result1
1a940     27 12 06 F6 | 	mov	arg01, #39
1a944     00 14 06 F6 | 	mov	arg02, #0
1a948     E0 6B B0 FD | 	call	#_printerror
1a94c     60 02 90 FD | 	jmp	#LR__2173
1a950                 | LR__2160
1a950     38 22 BF FD | 	call	#_pop
1a954     FF 16 02 F6 | 	mov	arg03, result3
1a958     A7 FA 61 FC | 	wrlong	result1, fp
1a95c     04 4E 05 F1 | 	add	fp, #4
1a960     A7 FC 61 FC | 	wrlong	result2, fp
1a964     04 4E 05 F1 | 	add	fp, #4
1a968     A7 16 62 FC | 	wrlong	arg03, fp
1a96c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a96c     08 4E 85 F1 | 	sub	fp, #8
1a970     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a974     18 00 90 5D |  if_ne	jmp	#LR__2161
1a978     A7 12 02 FB | 	rdlong	arg01, fp
1a97c     84 23 BF FD | 	call	#_convertstring
1a980     A7 FA 61 FC | 	wrlong	result1, fp
1a984     08 4E 05 F1 | 	add	fp, #8
1a988     A7 3E 68 FC | 	wrlong	#31, fp
1a98c     08 4E 85 F1 | 	sub	fp, #8
1a990                 | LR__2161
1a990                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1a990     08 4E 05 F1 | 	add	fp, #8
1a994     A7 16 02 FB | 	rdlong	arg03, fp
1a998     08 4E 85 F1 | 	sub	fp, #8
1a99c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a9a0     40 00 90 AD |  if_e	jmp	#LR__2162
1a9a4     00 12 06 F6 | 	mov	arg01, #0
1a9a8     CC 01 B1 FD | 	call	#__system___getiolock_0593
1a9ac     FD 12 02 F6 | 	mov	arg01, result1
1a9b0     20 A5 B0 FD | 	call	#__system___lockmem
1a9b4     AA 01 00 FF 
1a9b8     D4 14 06 F6 | 	mov	arg02, ##@LR__5882
1a9bc     00 12 06 F6 | 	mov	arg01, #0
1a9c0     00 16 06 F6 | 	mov	arg03, #0
1a9c4     04 B2 B0 FD | 	call	#__system___basic_print_string
1a9c8     00 12 06 F6 | 	mov	arg01, #0
1a9cc     A8 01 B1 FD | 	call	#__system___getiolock_0593
1a9d0     FD 00 68 FC | 	wrlong	#0, result1
1a9d4     0F 12 06 F6 | 	mov	arg01, #15
1a9d8     00 14 06 F6 | 	mov	arg02, #0
1a9dc     4C 6B B0 FD | 	call	#_printerror
1a9e0     CC 01 90 FD | 	jmp	#LR__2173
1a9e4                 | LR__2162
1a9e4                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1a9e4     A7 12 02 FB | 	rdlong	arg01, fp
1a9e8     01 14 06 F6 | 	mov	arg02, #1
1a9ec     64 C5 B0 FD | 	call	#__system__Left_S
1a9f0     FD 12 02 F6 | 	mov	arg01, result1
1a9f4     AA 01 00 FF 
1a9f8     DA 14 06 F6 | 	mov	arg02, ##@LR__5883
1a9fc     FC A4 B0 FD | 	call	#__system___string_cmp
1aa00     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa04     48 00 90 5D |  if_ne	jmp	#LR__2165
1aa08     AA 01 00 FF 
1aa0c     DC 26 06 F6 | 	mov	local01, ##@LR__5884
1aa10     A7 16 02 FB | 	rdlong	arg03, fp
1aa14     0B 13 02 F6 | 	mov	arg01, arg03
1aa18     09 29 02 F6 | 	mov	local02, arg01
1aa1c     97 06 48 FB | 	callpa	#(@LR__2164-@LR__2163)>>2,fcache_load_ptr_
1aa20                 | LR__2163
1aa20     14 FB C9 FA | 	rdbyte	result1, local02 wz
1aa24     01 28 06 51 |  if_ne	add	local02, #1
1aa28     F4 FF 9F 5D |  if_ne	jmp	#LR__2163
1aa2c                 | LR__2164
1aa2c     09 29 82 F1 | 	sub	local02, arg01
1aa30     14 15 02 F6 | 	mov	arg02, local02
1aa34     01 14 86 F1 | 	sub	arg02, #1
1aa38     0B 13 02 F6 | 	mov	arg01, arg03
1aa3c     9C C5 B0 FD | 	call	#__system__Right_S
1aa40     FD 14 02 F6 | 	mov	arg02, result1
1aa44     13 13 02 F6 | 	mov	arg01, local01
1aa48     E4 A4 B0 FD | 	call	#__system___string_concat
1aa4c     A7 FA 61 FC | 	wrlong	result1, fp
1aa50                 | LR__2165
1aa50                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1aa50     A7 12 02 FB | 	rdlong	arg01, fp
1aa54     01 14 06 F6 | 	mov	arg02, #1
1aa58     F8 C4 B0 FD | 	call	#__system__Left_S
1aa5c     FD 12 02 F6 | 	mov	arg01, result1
1aa60     AA 01 00 FF 
1aa64     DF 14 06 F6 | 	mov	arg02, ##@LR__5885
1aa68     90 A4 B0 FD | 	call	#__system___string_cmp
1aa6c     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa70     48 00 90 5D |  if_ne	jmp	#LR__2168
1aa74     AA 01 00 FF 
1aa78     E1 26 06 F6 | 	mov	local01, ##@LR__5886
1aa7c     A7 16 02 FB | 	rdlong	arg03, fp
1aa80     0B 13 02 F6 | 	mov	arg01, arg03
1aa84     09 29 02 F6 | 	mov	local02, arg01
1aa88     97 06 48 FB | 	callpa	#(@LR__2167-@LR__2166)>>2,fcache_load_ptr_
1aa8c                 | LR__2166
1aa8c     14 FB C9 FA | 	rdbyte	result1, local02 wz
1aa90     01 28 06 51 |  if_ne	add	local02, #1
1aa94     F4 FF 9F 5D |  if_ne	jmp	#LR__2166
1aa98                 | LR__2167
1aa98     09 29 82 F1 | 	sub	local02, arg01
1aa9c     14 15 02 F6 | 	mov	arg02, local02
1aaa0     01 14 86 F1 | 	sub	arg02, #1
1aaa4     0B 13 02 F6 | 	mov	arg01, arg03
1aaa8     30 C5 B0 FD | 	call	#__system__Right_S
1aaac     FD 14 02 F6 | 	mov	arg02, result1
1aab0     13 13 02 F6 | 	mov	arg01, local01
1aab4     78 A4 B0 FD | 	call	#__system___string_concat
1aab8     A7 FA 61 FC | 	wrlong	result1, fp
1aabc                 | LR__2168
1aabc     A7 12 02 FB | 	rdlong	arg01, fp
1aac0     98 DA B0 FD | 	call	#__system____builtin_atof
1aac4     1C 4E 05 F1 | 	add	fp, #28
1aac8     A7 FA 61 FC | 	wrlong	result1, fp
1aacc     1C 4E 85 F1 | 	sub	fp, #28
1aad0     A7 12 02 FB | 	rdlong	arg01, fp
1aad4     00 14 06 F6 | 	mov	arg02, #0
1aad8     EC D8 B0 FD | 	call	#__system____builtin_atoi
1aadc     18 4E 05 F1 | 	add	fp, #24
1aae0     A7 FA 61 FC | 	wrlong	result1, fp
1aae4                 | ' fval=val(t1.result.sresult)
1aae4                 | ' ival=val%(t1.result.sresult)
1aae4                 | ' if fval=ival then
1aae4     04 4E 05 F1 | 	add	fp, #4
1aae8     A7 26 02 FB | 	rdlong	local01, fp
1aaec     1C 4E 85 F1 | 	sub	fp, #28
1aaf0     FD 12 52 F6 | 	abs	arg01, result1 wc
1aaf4     1F 2A C6 C9 |  if_b	decod	local03, #31
1aaf8     00 2A 06 36 |  if_ae	mov	local03, #0
1aafc     4C CE B0 FD | 	call	#__system___float_fromuns
1ab00     15 FB 61 F5 | 	xor	result1, local03
1ab04     FD 14 02 F6 | 	mov	arg02, result1
1ab08     13 13 02 F6 | 	mov	arg01, local01
1ab0c     01 16 06 F6 | 	mov	arg03, #1
1ab10     70 D6 B0 FD | 	call	#__system___float_cmp
1ab14     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab18     20 00 90 5D |  if_ne	jmp	#LR__2169
1ab1c     18 4E 05 F1 | 	add	fp, #24
1ab20     A7 26 02 FB | 	rdlong	local01, fp
1ab24     18 4E 85 F1 | 	sub	fp, #24
1ab28     A7 26 62 FC | 	wrlong	local01, fp
1ab2c     08 4E 05 F1 | 	add	fp, #8
1ab30     A7 38 68 FC | 	wrlong	#28, fp
1ab34     08 4E 85 F1 | 	sub	fp, #8
1ab38     6C 00 90 FD | 	jmp	#LR__2172
1ab3c                 | LR__2169
1ab3c                 | '   if fval=0 andalso ival<>0 then
1ab3c     1C 4E 05 F1 | 	add	fp, #28
1ab40     A7 12 02 FB | 	rdlong	arg01, fp
1ab44     1C 4E 85 F1 | 	sub	fp, #28
1ab48     00 14 06 F6 | 	mov	arg02, #0
1ab4c     01 16 06 F6 | 	mov	arg03, #1
1ab50     30 D6 B0 FD | 	call	#__system___float_cmp
1ab54     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab58     30 00 90 5D |  if_ne	jmp	#LR__2170
1ab5c     18 4E 05 F1 | 	add	fp, #24
1ab60     A7 26 0A FB | 	rdlong	local01, fp wz
1ab64     18 4E 85 F1 | 	sub	fp, #24
1ab68     20 00 90 AD |  if_e	jmp	#LR__2170
1ab6c     18 4E 05 F1 | 	add	fp, #24
1ab70     A7 26 02 FB | 	rdlong	local01, fp
1ab74     18 4E 85 F1 | 	sub	fp, #24
1ab78     A7 26 62 FC | 	wrlong	local01, fp
1ab7c     08 4E 05 F1 | 	add	fp, #8
1ab80     A7 38 68 FC | 	wrlong	#28, fp
1ab84     08 4E 85 F1 | 	sub	fp, #8
1ab88     1C 00 90 FD | 	jmp	#LR__2171
1ab8c                 | LR__2170
1ab8c     1C 4E 05 F1 | 	add	fp, #28
1ab90     A7 26 02 FB | 	rdlong	local01, fp
1ab94     1C 4E 85 F1 | 	sub	fp, #28
1ab98     A7 26 62 FC | 	wrlong	local01, fp
1ab9c     08 4E 05 F1 | 	add	fp, #8
1aba0     A7 3C 68 FC | 	wrlong	#30, fp
1aba4     08 4E 85 F1 | 	sub	fp, #8
1aba8                 | LR__2171
1aba8                 | LR__2172
1aba8     A7 12 02 F6 | 	mov	arg01, fp
1abac     74 20 BF FD | 	call	#_push
1abb0                 | LR__2173
1abb0     A7 F0 03 F6 | 	mov	ptra, fp
1abb4     B2 00 A0 FD | 	call	#popregs_
1abb8                 | _do_val_ret
1abb8     2D 00 64 FD | 	ret
1abbc                 | 
1abbc                 | ' 
1abbc                 | ' ' ------------------ waitclock
1abbc                 | ' 
1abbc                 | ' sub do_waitclock
1abbc                 | _do_waitclock
1abbc     51 00 00 FF 
1abc0     D0 E5 05 F1 | 	add	objptr, ##41936
1abc4     F2 00 02 FB | 	rdlong	_var01, objptr
1abc8                 | ' c=hkcnt
1abc8                 | ' do: loop until hkcnt<>c
1abc8                 | LR__2180
1abc8     F2 02 02 FB | 	rdlong	_var02, objptr
1abcc     00 03 0A F2 | 	cmp	_var02, _var01 wz
1abd0     F4 FF 9F AD |  if_e	jmp	#LR__2180
1abd4     51 00 00 FF 
1abd8     D0 E5 85 F1 | 	sub	objptr, ##41936
1abdc                 | _do_waitclock_ret
1abdc     2D 00 64 FD | 	ret
1abe0                 | 
1abe0                 | ' 
1abe0                 | ' ' ------------------ waitms
1abe0                 | ' 
1abe0                 | ' sub do_waitms
1abe0                 | _do_waitms
1abe0     01 4A 05 F6 | 	mov	COUNT_, #1
1abe4     A8 00 A0 FD | 	call	#pushregs_
1abe8     18 F0 07 F1 | 	add	ptra, #24
1abec     9C 1F BF FD | 	call	#_pop
1abf0     A7 FA 61 FC | 	wrlong	result1, fp
1abf4     04 4E 05 F1 | 	add	fp, #4
1abf8     A7 FC 61 FC | 	wrlong	result2, fp
1abfc     04 4E 05 F1 | 	add	fp, #4
1ac00     A7 FE 61 FC | 	wrlong	result3, fp
1ac04     08 4E 85 F1 | 	sub	fp, #8
1ac08     A7 12 02 F6 | 	mov	arg01, fp
1ac0c     60 21 BF FD | 	call	#_converttoint
1ac10     0C 4E 05 F1 | 	add	fp, #12
1ac14     A7 FA 61 FC | 	wrlong	result1, fp
1ac18                 | ' 
1ac18                 | ' t1=pop()  
1ac18                 | ' t=converttoint(t1)
1ac18                 | ' if t<0 then return
1ac18     0C 4E 85 F1 | 	sub	fp, #12
1ac1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac20     E4 00 90 CD |  if_b	jmp	#LR__2196
1ac24                 | ' if t < 1000 then 
1ac24     0C 4E 05 F1 | 	add	fp, #12
1ac28     A7 12 02 FB | 	rdlong	arg01, fp
1ac2c     0C 4E 85 F1 | 	sub	fp, #12
1ac30     01 00 00 FF 
1ac34     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1ac38     14 00 90 3D |  if_ae	jmp	#LR__2190
1ac3c     0C 4E 05 F1 | 	add	fp, #12
1ac40     A7 12 02 FB | 	rdlong	arg01, fp
1ac44     0C 4E 85 F1 | 	sub	fp, #12
1ac48     7C A5 B0 FD | 	call	#__system___waitms
1ac4c     B8 00 90 FD | 	jmp	#LR__2195
1ac50                 | LR__2190
1ac50     10 4E 05 F1 | 	add	fp, #16
1ac54     A7 02 68 FC | 	wrlong	#1, fp
1ac58     04 4E 85 F1 | 	sub	fp, #4
1ac5c     A7 12 02 FB | 	rdlong	arg01, fp
1ac60     09 13 52 F6 | 	abs	arg01, arg01 wc
1ac64     01 00 00 FF 
1ac68     E8 13 16 FD | 	qdiv	arg01, ##1000
1ac6c                 | '   for i=1 to t/1000
1ac6c     0C 4E 85 F1 | 	sub	fp, #12
1ac70     18 26 62 FD | 	getqx	local01
1ac74     13 27 82 F6 | 	negc	local01, local01
1ac78     01 26 06 F1 | 	add	local01, #1
1ac7c                 | LR__2191
1ac7c     10 4E 05 F1 | 	add	fp, #16
1ac80     A7 12 02 FB | 	rdlong	arg01, fp
1ac84     10 4E 85 F1 | 	sub	fp, #16
1ac88     13 13 52 F2 | 	cmps	arg01, local01 wc
1ac8c     54 00 90 3D |  if_ae	jmp	#LR__2194
1ac90     01 00 00 FF 
1ac94     E8 13 06 F6 | 	mov	arg01, ##1000
1ac98     2C A5 B0 FD | 	call	#__system___waitms
1ac9c                 | '     waitms(1000)
1ac9c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1ac9c     E0 12 06 F6 | 	mov	arg01, #224
1aca0     80 99 B0 FD | 	call	#_usbnew_spin2_keystate
1aca4     00 FA 0D F2 | 	cmp	result1, #0 wz
1aca8     10 00 90 5D |  if_ne	jmp	#LR__2192
1acac     E4 12 06 F6 | 	mov	arg01, #228
1acb0     70 99 B0 FD | 	call	#_usbnew_spin2_keystate
1acb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1acb8     10 00 90 AD |  if_e	jmp	#LR__2193
1acbc                 | LR__2192
1acbc     06 12 06 F6 | 	mov	arg01, #6
1acc0     60 99 B0 FD | 	call	#_usbnew_spin2_keystate
1acc4     00 FA 0D F2 | 	cmp	result1, #0 wz
1acc8     3C 00 90 5D |  if_ne	jmp	#LR__2196
1accc                 | LR__2193
1accc     10 4E 05 F1 | 	add	fp, #16
1acd0     A7 12 02 FB | 	rdlong	arg01, fp
1acd4     01 12 06 F1 | 	add	arg01, #1
1acd8     A7 12 62 FC | 	wrlong	arg01, fp
1acdc     10 4E 85 F1 | 	sub	fp, #16
1ace0     98 FF 9F FD | 	jmp	#LR__2191
1ace4                 | LR__2194
1ace4     0C 4E 05 F1 | 	add	fp, #12
1ace8     A7 26 02 FB | 	rdlong	local01, fp
1acec     13 27 52 F6 | 	abs	local01, local01 wc
1acf0     01 00 00 FF 
1acf4     E8 27 16 FD | 	qdiv	local01, ##1000
1acf8     0C 4E 85 F1 | 	sub	fp, #12
1acfc     19 26 62 FD | 	getqy	local01
1ad00     13 13 82 F6 | 	negc	arg01, local01
1ad04     C0 A4 B0 FD | 	call	#__system___waitms
1ad08                 | LR__2195
1ad08                 | LR__2196
1ad08     A7 F0 03 F6 | 	mov	ptra, fp
1ad0c     B2 00 A0 FD | 	call	#popregs_
1ad10                 | _do_waitms_ret
1ad10     2D 00 64 FD | 	ret
1ad14                 | 
1ad14                 | ' 
1ad14                 | ' ' ------------------ waitvbl
1ad14                 | ' 
1ad14                 | ' sub do_waitvbl
1ad14                 | _do_waitvbl
1ad14     01 12 06 F6 | 	mov	arg01, #1
1ad18     0C 85 B0 FD | 	call	#_hg010b_spin2_waitvbl
1ad1c                 | _do_waitvbl_ret
1ad1c     2D 00 64 FD | 	ret
1ad20                 | 
1ad20                 | ' 
1ad20                 | ' ' ------------------ wrpin
1ad20                 | ' 
1ad20                 | ' sub do_wrpin
1ad20                 | _do_wrpin
1ad20     01 4A 05 F6 | 	mov	COUNT_, #1
1ad24     A8 00 A0 FD | 	call	#pushregs_
1ad28     18 F0 07 F1 | 	add	ptra, #24
1ad2c     5C 1E BF FD | 	call	#_pop
1ad30     FD 14 02 F6 | 	mov	arg02, result1
1ad34     FE 12 02 F6 | 	mov	arg01, result2
1ad38     FF 26 02 F6 | 	mov	local01, result3
1ad3c     A7 14 62 FC | 	wrlong	arg02, fp
1ad40     04 4E 05 F1 | 	add	fp, #4
1ad44     A7 12 62 FC | 	wrlong	arg01, fp
1ad48     04 4E 05 F1 | 	add	fp, #4
1ad4c     A7 26 62 FC | 	wrlong	local01, fp
1ad50     08 4E 85 F1 | 	sub	fp, #8
1ad54     34 1E BF FD | 	call	#_pop
1ad58     FF 26 02 F6 | 	mov	local01, result3
1ad5c     0C 4E 05 F1 | 	add	fp, #12
1ad60     A7 FA 61 FC | 	wrlong	result1, fp
1ad64     04 4E 05 F1 | 	add	fp, #4
1ad68     A7 FC 61 FC | 	wrlong	result2, fp
1ad6c     04 4E 05 F1 | 	add	fp, #4
1ad70     A7 26 62 FC | 	wrlong	local01, fp
1ad74     08 4E 85 F1 | 	sub	fp, #8
1ad78     A7 12 02 F6 | 	mov	arg01, fp
1ad7c     0C 4E 85 F1 | 	sub	fp, #12
1ad80     EC 1F BF FD | 	call	#_converttoint
1ad84     FD 26 02 F6 | 	mov	local01, result1
1ad88     A7 12 02 F6 | 	mov	arg01, fp
1ad8c     E0 1F BF FD | 	call	#_converttoint
1ad90     13 FB 01 FC | 	wrpin	result1, local01
1ad94     A7 F0 03 F6 | 	mov	ptra, fp
1ad98     B2 00 A0 FD | 	call	#popregs_
1ad9c                 | _do_wrpin_ret
1ad9c     2D 00 64 FD | 	ret
1ada0                 | 
1ada0                 | ' 
1ada0                 | ' ' ------------------ wxpin
1ada0                 | ' 
1ada0                 | ' sub do_wxpin
1ada0                 | _do_wxpin
1ada0     01 4A 05 F6 | 	mov	COUNT_, #1
1ada4     A8 00 A0 FD | 	call	#pushregs_
1ada8     18 F0 07 F1 | 	add	ptra, #24
1adac     DC 1D BF FD | 	call	#_pop
1adb0     FD 14 02 F6 | 	mov	arg02, result1
1adb4     FE 12 02 F6 | 	mov	arg01, result2
1adb8     FF 26 02 F6 | 	mov	local01, result3
1adbc     A7 14 62 FC | 	wrlong	arg02, fp
1adc0     04 4E 05 F1 | 	add	fp, #4
1adc4     A7 12 62 FC | 	wrlong	arg01, fp
1adc8     04 4E 05 F1 | 	add	fp, #4
1adcc     A7 26 62 FC | 	wrlong	local01, fp
1add0     08 4E 85 F1 | 	sub	fp, #8
1add4     B4 1D BF FD | 	call	#_pop
1add8     FF 26 02 F6 | 	mov	local01, result3
1addc     0C 4E 05 F1 | 	add	fp, #12
1ade0     A7 FA 61 FC | 	wrlong	result1, fp
1ade4     04 4E 05 F1 | 	add	fp, #4
1ade8     A7 FC 61 FC | 	wrlong	result2, fp
1adec     04 4E 05 F1 | 	add	fp, #4
1adf0     A7 26 62 FC | 	wrlong	local01, fp
1adf4     08 4E 85 F1 | 	sub	fp, #8
1adf8     A7 12 02 F6 | 	mov	arg01, fp
1adfc     0C 4E 85 F1 | 	sub	fp, #12
1ae00     6C 1F BF FD | 	call	#_converttoint
1ae04     FD 26 02 F6 | 	mov	local01, result1
1ae08     A7 12 02 F6 | 	mov	arg01, fp
1ae0c     60 1F BF FD | 	call	#_converttoint
1ae10     13 FB 11 FC | 	wxpin	result1, local01
1ae14     A7 F0 03 F6 | 	mov	ptra, fp
1ae18     B2 00 A0 FD | 	call	#popregs_
1ae1c                 | _do_wxpin_ret
1ae1c     2D 00 64 FD | 	ret
1ae20                 | 
1ae20                 | ' 
1ae20                 | ' ' ------------------ wypin
1ae20                 | ' 
1ae20                 | ' sub do_wypin
1ae20                 | _do_wypin
1ae20     01 4A 05 F6 | 	mov	COUNT_, #1
1ae24     A8 00 A0 FD | 	call	#pushregs_
1ae28     18 F0 07 F1 | 	add	ptra, #24
1ae2c     5C 1D BF FD | 	call	#_pop
1ae30     FD 14 02 F6 | 	mov	arg02, result1
1ae34     FE 12 02 F6 | 	mov	arg01, result2
1ae38     FF 26 02 F6 | 	mov	local01, result3
1ae3c     A7 14 62 FC | 	wrlong	arg02, fp
1ae40     04 4E 05 F1 | 	add	fp, #4
1ae44     A7 12 62 FC | 	wrlong	arg01, fp
1ae48     04 4E 05 F1 | 	add	fp, #4
1ae4c     A7 26 62 FC | 	wrlong	local01, fp
1ae50     08 4E 85 F1 | 	sub	fp, #8
1ae54     34 1D BF FD | 	call	#_pop
1ae58     FF 26 02 F6 | 	mov	local01, result3
1ae5c     0C 4E 05 F1 | 	add	fp, #12
1ae60     A7 FA 61 FC | 	wrlong	result1, fp
1ae64     04 4E 05 F1 | 	add	fp, #4
1ae68     A7 FC 61 FC | 	wrlong	result2, fp
1ae6c     04 4E 05 F1 | 	add	fp, #4
1ae70     A7 26 62 FC | 	wrlong	local01, fp
1ae74     08 4E 85 F1 | 	sub	fp, #8
1ae78     A7 12 02 F6 | 	mov	arg01, fp
1ae7c     0C 4E 85 F1 | 	sub	fp, #12
1ae80     EC 1E BF FD | 	call	#_converttoint
1ae84     FD 26 02 F6 | 	mov	local01, result1
1ae88     A7 12 02 F6 | 	mov	arg01, fp
1ae8c     E0 1E BF FD | 	call	#_converttoint
1ae90     13 FB 21 FC | 	wypin	result1, local01
1ae94     A7 F0 03 F6 | 	mov	ptra, fp
1ae98     B2 00 A0 FD | 	call	#popregs_
1ae9c                 | _do_wypin_ret
1ae9c     2D 00 64 FD | 	ret
1aea0                 | 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1aea0                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1aea0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1aea0                 | ' 
1aea0                 | ' 
1aea0                 | ' '------------------ Assign
1aea0                 | ' 
1aea0                 | ' sub do_assign
1aea0                 | _do_assign
1aea0     05 4A 05 F6 | 	mov	COUNT_, #5
1aea4     A8 00 A0 FD | 	call	#pushregs_
1aea8     44 F0 07 F1 | 	add	ptra, #68
1aeac     4A 00 00 FF 
1aeb0     80 E4 05 F1 | 	add	objptr, ##38016
1aeb4     F2 16 02 FB | 	rdlong	arg03, objptr
1aeb8     0B 15 02 F6 | 	mov	arg02, arg03
1aebc     01 14 66 F0 | 	shl	arg02, #1
1aec0     0B 15 02 F1 | 	add	arg02, arg03
1aec4     02 14 66 F0 | 	shl	arg02, #2
1aec8     03 00 00 FF 
1aecc     04 E4 85 F1 | 	sub	objptr, ##1540
1aed0     F2 14 02 F1 | 	add	arg02, objptr
1aed4     0A 15 02 FB | 	rdlong	arg02, arg02
1aed8     18 4E 05 F1 | 	add	fp, #24
1aedc     A7 14 62 FC | 	wrlong	arg02, fp
1aee0                 | ' 
1aee0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1aee0                 | ' if variables(varnum).vartype<array_no_type then 
1aee0     18 4E 85 F1 | 	sub	fp, #24
1aee4     04 14 66 F0 | 	shl	arg02, #4
1aee8     32 00 00 FF 
1aeec     84 E4 85 F1 | 	sub	objptr, ##25732
1aef0     F2 14 02 F1 | 	add	arg02, objptr
1aef4     0C 14 06 F1 | 	add	arg02, #12
1aef8     0A 17 02 FB | 	rdlong	arg03, arg02
1aefc     00 17 16 F2 | 	cmp	arg03, #256 wc
1af00     14 00 00 FF 
1af04     F8 E5 85 F1 | 	sub	objptr, ##10744
1af08     18 01 90 3D |  if_ae	jmp	#LR__2200
1af0c     7C 1C BF FD | 	call	#_pop
1af10     A7 FA 61 FC | 	wrlong	result1, fp
1af14     04 4E 05 F1 | 	add	fp, #4
1af18     A7 FC 61 FC | 	wrlong	result2, fp
1af1c     04 4E 05 F1 | 	add	fp, #4
1af20     A7 FE 61 FC | 	wrlong	result3, fp
1af24     08 4E 85 F1 | 	sub	fp, #8
1af28     A7 16 02 FB | 	rdlong	arg03, fp
1af2c     04 4E 05 F1 | 	add	fp, #4
1af30     A7 14 02 FB | 	rdlong	arg02, fp
1af34     14 4E 05 F1 | 	add	fp, #20
1af38     A7 12 02 FB | 	rdlong	arg01, fp
1af3c     04 12 66 F0 | 	shl	arg01, #4
1af40     14 00 00 FF 
1af44     F8 E5 05 F1 | 	add	objptr, ##10744
1af48     F2 12 02 F1 | 	add	arg01, objptr
1af4c     04 12 06 F1 | 	add	arg01, #4
1af50     09 17 62 FC | 	wrlong	arg03, arg01
1af54     A7 16 02 FB | 	rdlong	arg03, fp
1af58     04 16 66 F0 | 	shl	arg03, #4
1af5c     F2 16 02 F1 | 	add	arg03, objptr
1af60     08 16 06 F1 | 	add	arg03, #8
1af64     0B 15 62 FC | 	wrlong	arg02, arg03
1af68     A7 16 02 FB | 	rdlong	arg03, fp
1af6c     04 16 66 F0 | 	shl	arg03, #4
1af70     F2 16 02 F1 | 	add	arg03, objptr
1af74     10 4E 85 F1 | 	sub	fp, #16
1af78     A7 14 02 FB | 	rdlong	arg02, fp
1af7c     0C 16 06 F1 | 	add	arg03, #12
1af80     0B 15 62 FC | 	wrlong	arg02, arg03
1af84                 | '   t1=pop() 
1af84                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1af84                 | '   if variables(varnum).vartype<>result_string2 then return
1af84     10 4E 05 F1 | 	add	fp, #16
1af88     A7 16 02 FB | 	rdlong	arg03, fp
1af8c     18 4E 85 F1 | 	sub	fp, #24
1af90     04 16 66 F0 | 	shl	arg03, #4
1af94     F2 16 02 F1 | 	add	arg03, objptr
1af98     0C 16 06 F1 | 	add	arg03, #12
1af9c     0B 17 02 FB | 	rdlong	arg03, arg03
1afa0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1afa4     14 00 00 FF 
1afa8     F8 E5 85 F1 | 	sub	objptr, ##10744
1afac     EC 04 90 5D |  if_ne	jmp	#LR__2223
1afb0     18 4E 05 F1 | 	add	fp, #24
1afb4     A7 16 02 FB | 	rdlong	arg03, fp
1afb8     0B 27 02 F6 | 	mov	local01, arg03
1afbc     04 26 66 F0 | 	shl	local01, #4
1afc0     14 00 00 FF 
1afc4     F8 E5 05 F1 | 	add	objptr, ##10744
1afc8     F2 26 02 F1 | 	add	local01, objptr
1afcc     18 4E 85 F1 | 	sub	fp, #24
1afd0     04 16 66 F0 | 	shl	arg03, #4
1afd4     F2 16 02 F1 | 	add	arg03, objptr
1afd8     04 16 06 F1 | 	add	arg03, #4
1afdc     0B 13 02 FB | 	rdlong	arg01, arg03
1afe0     14 00 00 FF 
1afe4     F8 E5 85 F1 | 	sub	objptr, ##10744
1afe8     18 1D BF FD | 	call	#_convertstring
1afec     04 26 06 F1 | 	add	local01, #4
1aff0     13 FB 61 FC | 	wrlong	result1, local01
1aff4     18 4E 05 F1 | 	add	fp, #24
1aff8     A7 26 02 FB | 	rdlong	local01, fp
1affc     18 4E 85 F1 | 	sub	fp, #24
1b000     04 26 66 F0 | 	shl	local01, #4
1b004     14 00 00 FF 
1b008     F8 E5 05 F1 | 	add	objptr, ##10744
1b00c     F2 26 02 F1 | 	add	local01, objptr
1b010     0C 26 06 F1 | 	add	local01, #12
1b014     13 3F 68 FC | 	wrlong	#31, local01
1b018                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1b018                 | '   variables(varnum).vartype=result_string
1b018                 | '   return
1b018     14 00 00 FF 
1b01c     F8 E5 85 F1 | 	sub	objptr, ##10744
1b020     78 04 90 FD | 	jmp	#LR__2223
1b024                 | LR__2200
1b024                 | ' for i=0 to 2 : arrid(i)=0 : next i
1b024     1C 4E 05 F1 | 	add	fp, #28
1b028     A7 00 68 FC | 	wrlong	#0, fp
1b02c     97 16 48 FB | 	callpa	#(@LR__2202-@LR__2201)>>2,fcache_load_ptr_
1b030                 | LR__2201
1b030     A7 26 02 FB | 	rdlong	local01, fp
1b034     02 26 66 F0 | 	shl	local01, #2
1b038     18 4E 05 F1 | 	add	fp, #24
1b03c     A7 26 02 F1 | 	add	local01, fp
1b040     13 01 68 FC | 	wrlong	#0, local01
1b044     18 4E 85 F1 | 	sub	fp, #24
1b048     A7 26 02 FB | 	rdlong	local01, fp
1b04c     01 26 06 F1 | 	add	local01, #1
1b050     A7 26 62 FC | 	wrlong	local01, fp
1b054     03 26 16 F2 | 	cmp	local01, #3 wc
1b058     D4 FF 9F CD |  if_b	jmp	#LR__2201
1b05c                 | LR__2202
1b05c     4A 00 00 FF 
1b060     80 E4 05 F1 | 	add	objptr, ##38016
1b064     F2 16 02 FB | 	rdlong	arg03, objptr
1b068     0B 27 02 F6 | 	mov	local01, arg03
1b06c     01 26 66 F0 | 	shl	local01, #1
1b070     0B 27 02 F1 | 	add	local01, arg03
1b074     02 26 66 F0 | 	shl	local01, #2
1b078     03 00 00 FF 
1b07c     04 E4 85 F1 | 	sub	objptr, ##1540
1b080     F2 26 02 F1 | 	add	local01, objptr
1b084     04 26 06 F1 | 	add	local01, #4
1b088     13 29 02 FB | 	rdlong	local02, local01
1b08c     04 4E 05 F1 | 	add	fp, #4
1b090     A7 28 62 FC | 	wrlong	local02, fp
1b094     20 4E 85 F1 | 	sub	fp, #32
1b098     47 00 00 FF 
1b09c     7C E4 85 F1 | 	sub	objptr, ##36476
1b0a0     E8 1A BF FD | 	call	#_pop
1b0a4     A7 FA 61 FC | 	wrlong	result1, fp
1b0a8     04 4E 05 F1 | 	add	fp, #4
1b0ac     A7 FC 61 FC | 	wrlong	result2, fp
1b0b0     04 4E 05 F1 | 	add	fp, #4
1b0b4     A7 FE 61 FC | 	wrlong	result3, fp
1b0b8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1b0b8                 | ' t1=pop() ' var value
1b0b8                 | ' if numpar>0 then
1b0b8     18 4E 05 F1 | 	add	fp, #24
1b0bc     A7 2A 02 FB | 	rdlong	local03, fp
1b0c0     20 4E 85 F1 | 	sub	fp, #32
1b0c4     01 2A 16 F2 | 	cmp	local03, #1 wc
1b0c8     78 00 90 CD |  if_b	jmp	#LR__2205
1b0cc                 | '   for i=numpar to 1 step -1
1b0cc     20 4E 05 F1 | 	add	fp, #32
1b0d0     A7 2C 0A FB | 	rdlong	local04, fp wz
1b0d4     04 4E 85 F1 | 	sub	fp, #4
1b0d8     A7 2C 62 FC | 	wrlong	local04, fp
1b0dc     1C 4E 85 F1 | 	sub	fp, #28
1b0e0     60 00 90 AD |  if_e	jmp	#LR__2204
1b0e4                 | LR__2203
1b0e4     A4 1A BF FD | 	call	#_pop
1b0e8     0C 4E 05 F1 | 	add	fp, #12
1b0ec     A7 FA 61 FC | 	wrlong	result1, fp
1b0f0     04 4E 05 F1 | 	add	fp, #4
1b0f4     A7 FC 61 FC | 	wrlong	result2, fp
1b0f8     04 4E 05 F1 | 	add	fp, #4
1b0fc     A7 FE 61 FC | 	wrlong	result3, fp
1b100     08 4E 05 F1 | 	add	fp, #8
1b104     A7 2A 02 FB | 	rdlong	local03, fp
1b108     01 2A 86 F1 | 	sub	local03, #1
1b10c     02 2A 66 F0 | 	shl	local03, #2
1b110     18 4E 05 F1 | 	add	fp, #24
1b114     A7 2A 02 F1 | 	add	local03, fp
1b118     28 4E 85 F1 | 	sub	fp, #40
1b11c     A7 12 02 F6 | 	mov	arg01, fp
1b120     0C 4E 85 F1 | 	sub	fp, #12
1b124     48 1C BF FD | 	call	#_converttoint
1b128     15 FB 61 FC | 	wrlong	result1, local03
1b12c     1C 4E 05 F1 | 	add	fp, #28
1b130     A7 2C 02 FB | 	rdlong	local04, fp
1b134     01 2C 8E F1 | 	sub	local04, #1 wz
1b138     A7 2C 62 FC | 	wrlong	local04, fp
1b13c     1C 4E 85 F1 | 	sub	fp, #28
1b140     A0 FF 9F 5D |  if_ne	jmp	#LR__2203
1b144                 | LR__2204
1b144                 | LR__2205
1b144     18 4E 05 F1 | 	add	fp, #24
1b148     A7 26 02 FB | 	rdlong	local01, fp
1b14c     04 26 66 F0 | 	shl	local01, #4
1b150     14 00 00 FF 
1b154     F8 E5 05 F1 | 	add	objptr, ##10744
1b158     F2 26 02 F1 | 	add	local01, objptr
1b15c     04 26 06 F1 | 	add	local01, #4
1b160     13 13 02 FB | 	rdlong	arg01, local01
1b164     0C 4E 05 F1 | 	add	fp, #12
1b168     A7 12 62 FC | 	wrlong	arg01, fp
1b16c     24 4E 85 F1 | 	sub	fp, #36
1b170     14 00 00 FF 
1b174     F8 E5 85 F1 | 	sub	objptr, ##10744
1b178     80 66 B0 FD | 	call	#_pslpeek
1b17c     FD 2C 32 F9 | 	getword	local04, result1, #0
1b180     28 4E 05 F1 | 	add	fp, #40
1b184     A7 2C 62 FC | 	wrlong	local04, fp
1b188     04 4E 85 F1 | 	sub	fp, #4
1b18c     A7 12 02 FB | 	rdlong	arg01, fp
1b190     24 4E 85 F1 | 	sub	fp, #36
1b194     02 12 06 F1 | 	add	arg01, #2
1b198     08 66 B0 FD | 	call	#_pspeek
1b19c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b1a0     2C 4E 05 F1 | 	add	fp, #44
1b1a4     A7 FA 61 FC | 	wrlong	result1, fp
1b1a8                 | ' esize=pspeek(arrptr+2)
1b1a8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1b1a8     08 4E 85 F1 | 	sub	fp, #8
1b1ac     A7 12 02 FB | 	rdlong	arg01, fp
1b1b0     24 4E 85 F1 | 	sub	fp, #36
1b1b4     04 12 06 F1 | 	add	arg01, #4
1b1b8     40 66 B0 FD | 	call	#_pslpeek
1b1bc     FD 2C 02 F6 | 	mov	local04, result1
1b1c0     34 4E 05 F1 | 	add	fp, #52
1b1c4     A7 26 02 FB | 	rdlong	local01, fp
1b1c8     34 4E 85 F1 | 	sub	fp, #52
1b1cc     16 27 12 F2 | 	cmp	local01, local04 wc
1b1d0     54 00 90 3D |  if_ae	jmp	#LR__2206
1b1d4     24 4E 05 F1 | 	add	fp, #36
1b1d8     A7 12 02 FB | 	rdlong	arg01, fp
1b1dc     24 4E 85 F1 | 	sub	fp, #36
1b1e0     08 12 06 F1 | 	add	arg01, #8
1b1e4     14 66 B0 FD | 	call	#_pslpeek
1b1e8     FD 26 02 F6 | 	mov	local01, result1
1b1ec     38 4E 05 F1 | 	add	fp, #56
1b1f0     A7 2C 02 FB | 	rdlong	local04, fp
1b1f4     38 4E 85 F1 | 	sub	fp, #56
1b1f8     13 2D 12 F2 | 	cmp	local04, local01 wc
1b1fc     28 00 90 3D |  if_ae	jmp	#LR__2206
1b200     24 4E 05 F1 | 	add	fp, #36
1b204     A7 12 02 FB | 	rdlong	arg01, fp
1b208     24 4E 85 F1 | 	sub	fp, #36
1b20c     0C 12 06 F1 | 	add	arg01, #12
1b210     E8 65 B0 FD | 	call	#_pslpeek
1b214     3C 4E 05 F1 | 	add	fp, #60
1b218     A7 2C 02 FB | 	rdlong	local04, fp
1b21c     3C 4E 85 F1 | 	sub	fp, #60
1b220     FD 2C 12 F2 | 	cmp	local04, result1 wc
1b224     10 00 90 CD |  if_b	jmp	#LR__2207
1b228                 | LR__2206
1b228     31 12 06 F6 | 	mov	arg01, #49
1b22c     00 14 06 F6 | 	mov	arg02, #0
1b230     F8 62 B0 FD | 	call	#_printerror
1b234     64 02 90 FD | 	jmp	#LR__2223
1b238                 | LR__2207
1b238     24 4E 05 F1 | 	add	fp, #36
1b23c     A7 12 02 FB | 	rdlong	arg01, fp
1b240     09 2D 02 F6 | 	mov	local04, arg01
1b244     10 2C 06 F1 | 	add	local04, #16
1b248     24 4E 85 F1 | 	sub	fp, #36
1b24c     04 12 06 F1 | 	add	arg01, #4
1b250     A8 65 B0 FD | 	call	#_pslpeek
1b254     FD 26 02 F6 | 	mov	local01, result1
1b258     38 4E 05 F1 | 	add	fp, #56
1b25c     A7 28 02 FB | 	rdlong	local02, fp
1b260     14 27 02 FD | 	qmul	local01, local02
1b264     04 4E 85 F1 | 	sub	fp, #4
1b268     A7 2A 02 FB | 	rdlong	local03, fp
1b26c     10 4E 85 F1 | 	sub	fp, #16
1b270     A7 12 02 FB | 	rdlong	arg01, fp
1b274     24 4E 85 F1 | 	sub	fp, #36
1b278     08 12 06 F1 | 	add	arg01, #8
1b27c     18 28 62 FD | 	getqx	local02
1b280     14 2B 02 F1 | 	add	local03, local02
1b284     74 65 B0 FD | 	call	#_pslpeek
1b288     FD 28 02 F6 | 	mov	local02, result1
1b28c     24 4E 05 F1 | 	add	fp, #36
1b290     A7 12 02 FB | 	rdlong	arg01, fp
1b294     24 4E 85 F1 | 	sub	fp, #36
1b298     04 12 06 F1 | 	add	arg01, #4
1b29c     5C 65 B0 FD | 	call	#_pslpeek
1b2a0     FD 28 02 FD | 	qmul	local02, result1
1b2a4     3C 4E 05 F1 | 	add	fp, #60
1b2a8     A7 28 02 FB | 	rdlong	local02, fp
1b2ac     18 26 62 FD | 	getqx	local01
1b2b0     14 27 02 FD | 	qmul	local01, local02
1b2b4     10 4E 85 F1 | 	sub	fp, #16
1b2b8     A7 28 02 FB | 	rdlong	local02, fp
1b2bc     18 26 62 FD | 	getqx	local01
1b2c0     13 2B 02 F1 | 	add	local03, local01
1b2c4     15 29 02 FD | 	qmul	local02, local03
1b2c8     04 4E 05 F1 | 	add	fp, #4
1b2cc                 | ' 
1b2cc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1b2cc                 | ' select case arrtype
1b2cc     18 2A 62 FD | 	getqx	local03
1b2d0     15 2D 02 F1 | 	add	local04, local03
1b2d4     A7 2C 62 FC | 	wrlong	local04, fp
1b2d8     08 4E 85 F1 | 	sub	fp, #8
1b2dc     A7 2E 02 FB | 	rdlong	local05, fp
1b2e0     28 4E 85 F1 | 	sub	fp, #40
1b2e4     00 2F 86 F1 | 	sub	local05, #256
1b2e8     0C 2E 26 F3 | 	fle	local05, #12
1b2ec     30 2E 62 FD | 	jmprel	local05
1b2f0                 | LR__2208
1b2f0     30 00 90 FD | 	jmp	#LR__2209
1b2f4     58 00 90 FD | 	jmp	#LR__2210
1b2f8     6C 00 90 FD | 	jmp	#LR__2211
1b2fc     80 00 90 FD | 	jmp	#LR__2212
1b300     B0 00 90 FD | 	jmp	#LR__2213
1b304     E0 00 90 FD | 	jmp	#LR__2214
1b308     F4 00 90 FD | 	jmp	#LR__2215
1b30c     08 01 90 FD | 	jmp	#LR__2216
1b310     1C 01 90 FD | 	jmp	#LR__2217
1b314     30 01 90 FD | 	jmp	#LR__2218
1b318     44 01 90 FD | 	jmp	#LR__2219
1b31c     58 01 90 FD | 	jmp	#LR__2220
1b320     6C 01 90 FD | 	jmp	#LR__2221
1b324                 | LR__2209
1b324     A7 12 02 F6 | 	mov	arg01, fp
1b328     30 4E 05 F1 | 	add	fp, #48
1b32c     A7 14 02 FB | 	rdlong	arg02, fp
1b330     30 4E 85 F1 | 	sub	fp, #48
1b334     0C 16 06 F6 | 	mov	arg03, #12
1b338     0B 00 00 FF 
1b33c     CC E4 05 F1 | 	add	objptr, ##5836
1b340     EC 8F B0 FD | 	call	#_psram_spin2_write
1b344     0B 00 00 FF 
1b348     CC E4 85 F1 | 	sub	objptr, ##5836
1b34c     4C 01 90 FD | 	jmp	#LR__2222
1b350                 | LR__2210
1b350     30 4E 05 F1 | 	add	fp, #48
1b354     A7 12 02 FB | 	rdlong	arg01, fp
1b358     30 4E 85 F1 | 	sub	fp, #48
1b35c     A7 14 02 FB | 	rdlong	arg02, fp
1b360     F8 63 B0 FD | 	call	#_pspoke
1b364     34 01 90 FD | 	jmp	#LR__2222
1b368                 | LR__2211
1b368     30 4E 05 F1 | 	add	fp, #48
1b36c     A7 12 02 FB | 	rdlong	arg01, fp
1b370     30 4E 85 F1 | 	sub	fp, #48
1b374     A7 14 02 FB | 	rdlong	arg02, fp
1b378     E0 63 B0 FD | 	call	#_pspoke
1b37c     1C 01 90 FD | 	jmp	#LR__2222
1b380                 | LR__2212
1b380     30 4E 05 F1 | 	add	fp, #48
1b384     A7 12 02 FB | 	rdlong	arg01, fp
1b388     30 4E 85 F1 | 	sub	fp, #48
1b38c     A7 14 02 FB | 	rdlong	arg02, fp
1b390     C8 63 B0 FD | 	call	#_pspoke
1b394     30 4E 05 F1 | 	add	fp, #48
1b398     A7 12 02 FB | 	rdlong	arg01, fp
1b39c     30 4E 85 F1 | 	sub	fp, #48
1b3a0     01 12 06 F1 | 	add	arg01, #1
1b3a4     A7 14 02 FB | 	rdlong	arg02, fp
1b3a8     08 14 46 F0 | 	shr	arg02, #8
1b3ac     AC 63 B0 FD | 	call	#_pspoke
1b3b0     E8 00 90 FD | 	jmp	#LR__2222
1b3b4                 | LR__2213
1b3b4     30 4E 05 F1 | 	add	fp, #48
1b3b8     A7 12 02 FB | 	rdlong	arg01, fp
1b3bc     30 4E 85 F1 | 	sub	fp, #48
1b3c0     A7 14 02 FB | 	rdlong	arg02, fp
1b3c4     94 63 B0 FD | 	call	#_pspoke
1b3c8     30 4E 05 F1 | 	add	fp, #48
1b3cc     A7 12 02 FB | 	rdlong	arg01, fp
1b3d0     30 4E 85 F1 | 	sub	fp, #48
1b3d4     01 12 06 F1 | 	add	arg01, #1
1b3d8     A7 14 02 FB | 	rdlong	arg02, fp
1b3dc     08 14 46 F0 | 	shr	arg02, #8
1b3e0     78 63 B0 FD | 	call	#_pspoke
1b3e4     B4 00 90 FD | 	jmp	#LR__2222
1b3e8                 | LR__2214
1b3e8     30 4E 05 F1 | 	add	fp, #48
1b3ec     A7 12 02 FB | 	rdlong	arg01, fp
1b3f0     30 4E 85 F1 | 	sub	fp, #48
1b3f4     A7 14 02 FB | 	rdlong	arg02, fp
1b3f8     D0 62 B0 FD | 	call	#_pslpoke
1b3fc     9C 00 90 FD | 	jmp	#LR__2222
1b400                 | LR__2215
1b400     30 4E 05 F1 | 	add	fp, #48
1b404     A7 12 02 FB | 	rdlong	arg01, fp
1b408     30 4E 85 F1 | 	sub	fp, #48
1b40c     A7 14 02 FB | 	rdlong	arg02, fp
1b410     B8 62 B0 FD | 	call	#_pslpoke
1b414     84 00 90 FD | 	jmp	#LR__2222
1b418                 | LR__2216
1b418     30 4E 05 F1 | 	add	fp, #48
1b41c     A7 12 02 FB | 	rdlong	arg01, fp
1b420     30 4E 85 F1 | 	sub	fp, #48
1b424     A7 14 02 FB | 	rdlong	arg02, fp
1b428     A0 62 B0 FD | 	call	#_pslpoke
1b42c     6C 00 90 FD | 	jmp	#LR__2222
1b430                 | LR__2217
1b430     30 4E 05 F1 | 	add	fp, #48
1b434     A7 12 02 FB | 	rdlong	arg01, fp
1b438     30 4E 85 F1 | 	sub	fp, #48
1b43c     A7 14 02 FB | 	rdlong	arg02, fp
1b440     88 62 B0 FD | 	call	#_pslpoke
1b444     54 00 90 FD | 	jmp	#LR__2222
1b448                 | LR__2218
1b448     30 4E 05 F1 | 	add	fp, #48
1b44c     A7 12 02 FB | 	rdlong	arg01, fp
1b450     30 4E 85 F1 | 	sub	fp, #48
1b454     A7 14 02 FB | 	rdlong	arg02, fp
1b458     70 62 B0 FD | 	call	#_pslpoke
1b45c     3C 00 90 FD | 	jmp	#LR__2222
1b460                 | LR__2219
1b460     30 4E 05 F1 | 	add	fp, #48
1b464     A7 12 02 FB | 	rdlong	arg01, fp
1b468     30 4E 85 F1 | 	sub	fp, #48
1b46c     A7 14 02 FB | 	rdlong	arg02, fp
1b470     58 62 B0 FD | 	call	#_pslpoke
1b474     24 00 90 FD | 	jmp	#LR__2222
1b478                 | LR__2220
1b478     30 4E 05 F1 | 	add	fp, #48
1b47c     A7 12 02 FB | 	rdlong	arg01, fp
1b480     30 4E 85 F1 | 	sub	fp, #48
1b484     A7 14 02 FB | 	rdlong	arg02, fp
1b488     40 62 B0 FD | 	call	#_pslpoke
1b48c     0C 00 90 FD | 	jmp	#LR__2222
1b490                 | LR__2221
1b490     32 12 06 F6 | 	mov	arg01, #50
1b494     00 14 06 F6 | 	mov	arg02, #0
1b498     90 60 B0 FD | 	call	#_printerror
1b49c                 | LR__2222
1b49c                 | LR__2223
1b49c     A7 F0 03 F6 | 	mov	ptra, fp
1b4a0     B2 00 A0 FD | 	call	#popregs_
1b4a4                 | _do_assign_ret
1b4a4     2D 00 64 FD | 	ret
1b4a8                 | 
1b4a8                 | ' 
1b4a8                 | ' 
1b4a8                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1b4a8                 | ' 
1b4a8                 | ' sub do_getvar
1b4a8                 | _do_getvar
1b4a8     04 4A 05 F6 | 	mov	COUNT_, #4
1b4ac     A8 00 A0 FD | 	call	#pushregs_
1b4b0     3C F0 07 F1 | 	add	ptra, #60
1b4b4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1b4b4     4A 00 00 FF 
1b4b8     80 E4 05 F1 | 	add	objptr, ##38016
1b4bc     F2 26 02 FB | 	rdlong	local01, objptr
1b4c0     13 17 02 F6 | 	mov	arg03, local01
1b4c4     01 16 66 F0 | 	shl	arg03, #1
1b4c8     13 17 02 F1 | 	add	arg03, local01
1b4cc     02 16 66 F0 | 	shl	arg03, #2
1b4d0     03 00 00 FF 
1b4d4     04 E4 85 F1 | 	sub	objptr, ##1540
1b4d8     F2 16 02 F1 | 	add	arg03, objptr
1b4dc     04 16 06 F1 | 	add	arg03, #4
1b4e0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1b4e4     47 00 00 FF 
1b4e8     7C E4 85 F1 | 	sub	objptr, ##36476
1b4ec     C4 00 90 5D |  if_ne	jmp	#LR__2231
1b4f0     4A 00 00 FF 
1b4f4     80 E4 05 F1 | 	add	objptr, ##38016
1b4f8     F2 26 02 FB | 	rdlong	local01, objptr
1b4fc     13 13 02 F6 | 	mov	arg01, local01
1b500     01 12 66 F0 | 	shl	arg01, #1
1b504     13 13 02 F1 | 	add	arg01, local01
1b508     02 12 66 F0 | 	shl	arg01, #2
1b50c     03 00 00 FF 
1b510     04 E4 85 F1 | 	sub	objptr, ##1540
1b514     F2 12 02 F1 | 	add	arg01, objptr
1b518     09 27 02 FB | 	rdlong	local01, arg01
1b51c     04 26 66 F0 | 	shl	local01, #4
1b520     32 00 00 FF 
1b524     84 E4 85 F1 | 	sub	objptr, ##25732
1b528     F2 26 02 F1 | 	add	local01, objptr
1b52c     04 26 06 F1 | 	add	local01, #4
1b530     13 13 02 FB | 	rdlong	arg01, local01
1b534     04 26 06 F1 | 	add	local01, #4
1b538     13 27 02 FB | 	rdlong	local01, local01
1b53c     A7 12 62 FC | 	wrlong	arg01, fp
1b540     04 4E 05 F1 | 	add	fp, #4
1b544     A7 26 62 FC | 	wrlong	local01, fp
1b548     35 00 00 FF 
1b54c     88 E4 05 F1 | 	add	objptr, ##27272
1b550     F2 26 02 FB | 	rdlong	local01, objptr
1b554     13 13 02 F6 | 	mov	arg01, local01
1b558     01 12 66 F0 | 	shl	arg01, #1
1b55c     13 13 02 F1 | 	add	arg01, local01
1b560     02 12 66 F0 | 	shl	arg01, #2
1b564     03 00 00 FF 
1b568     04 E4 85 F1 | 	sub	objptr, ##1540
1b56c     F2 12 02 F1 | 	add	arg01, objptr
1b570     09 27 02 FB | 	rdlong	local01, arg01
1b574     04 26 66 F0 | 	shl	local01, #4
1b578     32 00 00 FF 
1b57c     84 E4 85 F1 | 	sub	objptr, ##25732
1b580     F2 26 02 F1 | 	add	local01, objptr
1b584     0C 26 06 F1 | 	add	local01, #12
1b588     13 27 02 FB | 	rdlong	local01, local01
1b58c     04 4E 05 F1 | 	add	fp, #4
1b590     A7 26 62 FC | 	wrlong	local01, fp
1b594                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1b594                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1b594                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1b594     08 4E 85 F1 | 	sub	fp, #8
1b598     00 27 16 F2 | 	cmp	local01, #256 wc
1b59c     14 00 00 FF 
1b5a0     F8 E5 85 F1 | 	sub	objptr, ##10744
1b5a4     0C 00 90 3D |  if_ae	jmp	#LR__2230
1b5a8     A7 12 02 F6 | 	mov	arg01, fp
1b5ac     74 16 BF FD | 	call	#_push
1b5b0     A0 04 90 FD | 	jmp	#LR__2252
1b5b4                 | LR__2230
1b5b4                 | LR__2231
1b5b4     4A 00 00 FF 
1b5b8     80 E4 05 F1 | 	add	objptr, ##38016
1b5bc     F2 16 02 FB | 	rdlong	arg03, objptr
1b5c0     0B 15 02 F6 | 	mov	arg02, arg03
1b5c4     01 14 66 F0 | 	shl	arg02, #1
1b5c8     0B 15 02 F1 | 	add	arg02, arg03
1b5cc     02 14 66 F0 | 	shl	arg02, #2
1b5d0     03 00 00 FF 
1b5d4     04 E4 85 F1 | 	sub	objptr, ##1540
1b5d8     F2 14 02 F1 | 	add	arg02, objptr
1b5dc     0A 17 02 FB | 	rdlong	arg03, arg02
1b5e0     04 16 66 F0 | 	shl	arg03, #4
1b5e4     32 00 00 FF 
1b5e8     84 E4 85 F1 | 	sub	objptr, ##25732
1b5ec     F2 16 02 F1 | 	add	arg03, objptr
1b5f0     04 16 06 F1 | 	add	arg03, #4
1b5f4     0B 13 02 FB | 	rdlong	arg01, arg03
1b5f8     0C 4E 05 F1 | 	add	fp, #12
1b5fc     A7 12 62 FC | 	wrlong	arg01, fp
1b600     0C 4E 85 F1 | 	sub	fp, #12
1b604     14 00 00 FF 
1b608     F8 E5 85 F1 | 	sub	objptr, ##10744
1b60c     EC 61 B0 FD | 	call	#_pslpeek
1b610     FD FA 31 F9 | 	getword	result1, result1, #0
1b614     10 4E 05 F1 | 	add	fp, #16
1b618     A7 FA 61 FC | 	wrlong	result1, fp
1b61c     4A 00 00 FF 
1b620     80 E4 05 F1 | 	add	objptr, ##38016
1b624     F2 16 02 FB | 	rdlong	arg03, objptr
1b628     0B 15 02 F6 | 	mov	arg02, arg03
1b62c     01 14 66 F0 | 	shl	arg02, #1
1b630     0B 15 02 F1 | 	add	arg02, arg03
1b634     02 14 66 F0 | 	shl	arg02, #2
1b638     03 00 00 FF 
1b63c     04 E4 85 F1 | 	sub	objptr, ##1540
1b640     F2 14 02 F1 | 	add	arg02, objptr
1b644     04 14 06 F1 | 	add	arg02, #4
1b648     0A 17 02 FB | 	rdlong	arg03, arg02
1b64c     04 4E 05 F1 | 	add	fp, #4
1b650     A7 16 62 FC | 	wrlong	arg03, fp
1b654     08 4E 85 F1 | 	sub	fp, #8
1b658     A7 12 02 FB | 	rdlong	arg01, fp
1b65c     0C 4E 85 F1 | 	sub	fp, #12
1b660     02 12 06 F1 | 	add	arg01, #2
1b664     47 00 00 FF 
1b668     7C E4 85 F1 | 	sub	objptr, ##36476
1b66c     34 61 B0 FD | 	call	#_pspeek
1b670     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b674     18 4E 05 F1 | 	add	fp, #24
1b678     A7 FA 61 FC | 	wrlong	result1, fp
1b67c     0C 4E 85 F1 | 	sub	fp, #12
1b680     A7 12 02 FB | 	rdlong	arg01, fp
1b684     0C 4E 85 F1 | 	sub	fp, #12
1b688     04 12 06 F1 | 	add	arg01, #4
1b68c     6C 61 B0 FD | 	call	#_pslpeek
1b690     1C 4E 05 F1 | 	add	fp, #28
1b694     A7 FA 61 FC | 	wrlong	result1, fp
1b698     10 4E 85 F1 | 	sub	fp, #16
1b69c     A7 12 02 FB | 	rdlong	arg01, fp
1b6a0     0C 4E 85 F1 | 	sub	fp, #12
1b6a4     08 12 06 F1 | 	add	arg01, #8
1b6a8     50 61 B0 FD | 	call	#_pslpeek
1b6ac     20 4E 05 F1 | 	add	fp, #32
1b6b0     A7 FA 61 FC | 	wrlong	result1, fp
1b6b4     14 4E 85 F1 | 	sub	fp, #20
1b6b8     A7 12 02 FB | 	rdlong	arg01, fp
1b6bc     0C 4E 85 F1 | 	sub	fp, #12
1b6c0     0C 12 06 F1 | 	add	arg01, #12
1b6c4     34 61 B0 FD | 	call	#_pslpeek
1b6c8     24 4E 05 F1 | 	add	fp, #36
1b6cc     A7 FA 61 FC | 	wrlong	result1, fp
1b6d0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1b6d0                 | ' esize=pspeek(arrptr+2)
1b6d0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1b6d0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1b6d0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1b6d0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1b6d0     10 4E 85 F1 | 	sub	fp, #16
1b6d4     A7 16 02 FB | 	rdlong	arg03, fp
1b6d8     14 4E 85 F1 | 	sub	fp, #20
1b6dc     03 16 16 F2 | 	cmp	arg03, #3 wc
1b6e0     38 00 90 CD |  if_b	jmp	#LR__2232
1b6e4     A4 14 BF FD | 	call	#_pop
1b6e8     FF 16 02 F6 | 	mov	arg03, result3
1b6ec     A7 FA 61 FC | 	wrlong	result1, fp
1b6f0     04 4E 05 F1 | 	add	fp, #4
1b6f4     A7 FC 61 FC | 	wrlong	result2, fp
1b6f8     04 4E 05 F1 | 	add	fp, #4
1b6fc     A7 16 62 FC | 	wrlong	arg03, fp
1b700     08 4E 85 F1 | 	sub	fp, #8
1b704     A7 12 02 F6 | 	mov	arg01, fp
1b708     64 16 BF FD | 	call	#_converttoint
1b70c     30 4E 05 F1 | 	add	fp, #48
1b710     A7 FA 61 FC | 	wrlong	result1, fp
1b714     30 4E 85 F1 | 	sub	fp, #48
1b718     0C 00 90 FD | 	jmp	#LR__2233
1b71c                 | LR__2232
1b71c     30 4E 05 F1 | 	add	fp, #48
1b720     A7 00 68 FC | 	wrlong	#0, fp
1b724     30 4E 85 F1 | 	sub	fp, #48
1b728                 | LR__2233
1b728                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1b728     14 4E 05 F1 | 	add	fp, #20
1b72c     A7 16 02 FB | 	rdlong	arg03, fp
1b730     14 4E 85 F1 | 	sub	fp, #20
1b734     02 16 16 F2 | 	cmp	arg03, #2 wc
1b738     38 00 90 CD |  if_b	jmp	#LR__2234
1b73c     4C 14 BF FD | 	call	#_pop
1b740     FF 16 02 F6 | 	mov	arg03, result3
1b744     A7 FA 61 FC | 	wrlong	result1, fp
1b748     04 4E 05 F1 | 	add	fp, #4
1b74c     A7 FC 61 FC | 	wrlong	result2, fp
1b750     04 4E 05 F1 | 	add	fp, #4
1b754     A7 16 62 FC | 	wrlong	arg03, fp
1b758     08 4E 85 F1 | 	sub	fp, #8
1b75c     A7 12 02 F6 | 	mov	arg01, fp
1b760     0C 16 BF FD | 	call	#_converttoint
1b764     2C 4E 05 F1 | 	add	fp, #44
1b768     A7 FA 61 FC | 	wrlong	result1, fp
1b76c     2C 4E 85 F1 | 	sub	fp, #44
1b770     0C 00 90 FD | 	jmp	#LR__2235
1b774                 | LR__2234
1b774     2C 4E 05 F1 | 	add	fp, #44
1b778     A7 00 68 FC | 	wrlong	#0, fp
1b77c     2C 4E 85 F1 | 	sub	fp, #44
1b780                 | LR__2235
1b780                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1b780     14 4E 05 F1 | 	add	fp, #20
1b784     A7 16 02 FB | 	rdlong	arg03, fp
1b788     14 4E 85 F1 | 	sub	fp, #20
1b78c     01 16 16 F2 | 	cmp	arg03, #1 wc
1b790     38 00 90 CD |  if_b	jmp	#LR__2236
1b794     F4 13 BF FD | 	call	#_pop
1b798     FF 16 02 F6 | 	mov	arg03, result3
1b79c     A7 FA 61 FC | 	wrlong	result1, fp
1b7a0     04 4E 05 F1 | 	add	fp, #4
1b7a4     A7 FC 61 FC | 	wrlong	result2, fp
1b7a8     04 4E 05 F1 | 	add	fp, #4
1b7ac     A7 16 62 FC | 	wrlong	arg03, fp
1b7b0     08 4E 85 F1 | 	sub	fp, #8
1b7b4     A7 12 02 F6 | 	mov	arg01, fp
1b7b8     B4 15 BF FD | 	call	#_converttoint
1b7bc     28 4E 05 F1 | 	add	fp, #40
1b7c0     A7 FA 61 FC | 	wrlong	result1, fp
1b7c4     28 4E 85 F1 | 	sub	fp, #40
1b7c8     0C 00 90 FD | 	jmp	#LR__2237
1b7cc                 | LR__2236
1b7cc     28 4E 05 F1 | 	add	fp, #40
1b7d0     A7 00 68 FC | 	wrlong	#0, fp
1b7d4     28 4E 85 F1 | 	sub	fp, #40
1b7d8                 | LR__2237
1b7d8     0C 4E 05 F1 | 	add	fp, #12
1b7dc     A7 28 02 FB | 	rdlong	local02, fp
1b7e0     1C 4E 05 F1 | 	add	fp, #28
1b7e4     A7 2A 02 FB | 	rdlong	local03, fp
1b7e8     04 4E 05 F1 | 	add	fp, #4
1b7ec     A7 FC 01 FB | 	rdlong	result2, fp
1b7f0     10 4E 85 F1 | 	sub	fp, #16
1b7f4     A7 FE 01 FB | 	rdlong	result3, fp
1b7f8     FF FC 01 FD | 	qmul	result2, result3
1b7fc     10 28 06 F1 | 	add	local02, #16
1b800     14 4E 05 F1 | 	add	fp, #20
1b804     A7 FC 01 FB | 	rdlong	result2, fp
1b808     18 FA 61 FD | 	getqx	result1
1b80c     FF FC 01 FD | 	qmul	result2, result3
1b810     FD 2A 02 F1 | 	add	local03, result1
1b814     10 4E 85 F1 | 	sub	fp, #16
1b818     A7 FE 01 FB | 	rdlong	result3, fp
1b81c     18 FC 61 FD | 	getqx	result2
1b820     FF FC 01 FD | 	qmul	result2, result3
1b824     08 4E 85 F1 | 	sub	fp, #8
1b828     A7 FE 01 FB | 	rdlong	result3, fp
1b82c     18 FC 61 FD | 	getqx	result2
1b830     FE 2A 02 F1 | 	add	local03, result2
1b834     FF 2A 02 FD | 	qmul	local03, result3
1b838     1C 4E 05 F1 | 	add	fp, #28
1b83c                 | ' 
1b83c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1b83c                 | ' 
1b83c                 | ' select case vartype
1b83c     18 FC 61 FD | 	getqx	result2
1b840     FE 28 02 F1 | 	add	local02, result2
1b844     A7 28 62 FC | 	wrlong	local02, fp
1b848     24 4E 85 F1 | 	sub	fp, #36
1b84c     A7 2C 02 FB | 	rdlong	local04, fp
1b850     10 4E 85 F1 | 	sub	fp, #16
1b854     00 2D 86 F1 | 	sub	local04, #256
1b858     0C 2C 26 F3 | 	fle	local04, #12
1b85c     30 2C 62 FD | 	jmprel	local04
1b860                 | LR__2238
1b860     30 00 90 FD | 	jmp	#LR__2239
1b864     58 00 90 FD | 	jmp	#LR__2240
1b868     8C 00 90 FD | 	jmp	#LR__2241
1b86c     AC 00 90 FD | 	jmp	#LR__2242
1b870     E8 00 90 FD | 	jmp	#LR__2243
1b874     08 01 90 FD | 	jmp	#LR__2244
1b878     24 01 90 FD | 	jmp	#LR__2245
1b87c     40 01 90 FD | 	jmp	#LR__2246
1b880     50 01 90 FD | 	jmp	#LR__2247
1b884     60 01 90 FD | 	jmp	#LR__2248
1b888     7C 01 90 FD | 	jmp	#LR__2249
1b88c     8C 01 90 FD | 	jmp	#LR__2250
1b890     B8 01 90 FD | 	jmp	#LR__2251
1b894                 | LR__2239
1b894     A7 12 02 F6 | 	mov	arg01, fp
1b898     34 4E 05 F1 | 	add	fp, #52
1b89c     A7 14 02 FB | 	rdlong	arg02, fp
1b8a0     34 4E 85 F1 | 	sub	fp, #52
1b8a4     0C 16 06 F6 | 	mov	arg03, #12
1b8a8     0B 00 00 FF 
1b8ac     CC E4 05 F1 | 	add	objptr, ##5836
1b8b0     E0 89 B0 FD | 	call	#_psram_spin2_read1
1b8b4     0B 00 00 FF 
1b8b8     CC E4 85 F1 | 	sub	objptr, ##5836
1b8bc     8C 01 90 FD | 	jmp	#LR__2251
1b8c0                 | LR__2240
1b8c0     08 4E 05 F1 | 	add	fp, #8
1b8c4     A7 38 68 FC | 	wrlong	#28, fp
1b8c8     2C 4E 05 F1 | 	add	fp, #44
1b8cc     A7 12 02 FB | 	rdlong	arg01, fp
1b8d0     34 4E 85 F1 | 	sub	fp, #52
1b8d4     CC 5E B0 FD | 	call	#_pspeek
1b8d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b8dc     A7 FA 61 FC | 	wrlong	result1, fp
1b8e0     80 FA 15 F2 | 	cmp	result1, #128 wc
1b8e4     00 27 66 36 |  if_ae	neg	local01, #256
1b8e8     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1b8ec     15 27 42 35 |  if_ae	or	local01, local03
1b8f0     A7 26 62 3C |  if_ae	wrlong	local01, fp
1b8f4     54 01 90 FD | 	jmp	#LR__2251
1b8f8                 | LR__2241
1b8f8     08 4E 05 F1 | 	add	fp, #8
1b8fc     A7 3A 68 FC | 	wrlong	#29, fp
1b900     2C 4E 05 F1 | 	add	fp, #44
1b904     A7 12 02 FB | 	rdlong	arg01, fp
1b908     34 4E 85 F1 | 	sub	fp, #52
1b90c     94 5E B0 FD | 	call	#_pspeek
1b910     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b914     A7 FA 61 FC | 	wrlong	result1, fp
1b918     30 01 90 FD | 	jmp	#LR__2251
1b91c                 | LR__2242
1b91c     08 4E 05 F1 | 	add	fp, #8
1b920     A7 38 68 FC | 	wrlong	#28, fp
1b924     2C 4E 05 F1 | 	add	fp, #44
1b928     A7 12 02 FB | 	rdlong	arg01, fp
1b92c     34 4E 85 F1 | 	sub	fp, #52
1b930     C8 5E B0 FD | 	call	#_pslpeek
1b934     FD FA 31 F9 | 	getword	result1, result1, #0
1b938     A7 FA 61 FC | 	wrlong	result1, fp
1b93c     40 00 00 FF 
1b940     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1b944     FF 7F 00 3F 
1b948     00 27 06 36 |  if_ae	mov	local01, ##16776960
1b94c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1b950     15 27 42 35 |  if_ae	or	local01, local03
1b954     A7 26 62 3C |  if_ae	wrlong	local01, fp
1b958     F0 00 90 FD | 	jmp	#LR__2251
1b95c                 | LR__2243
1b95c     08 4E 05 F1 | 	add	fp, #8
1b960     A7 3A 68 FC | 	wrlong	#29, fp
1b964     2C 4E 05 F1 | 	add	fp, #44
1b968     A7 12 02 FB | 	rdlong	arg01, fp
1b96c     34 4E 85 F1 | 	sub	fp, #52
1b970     88 5E B0 FD | 	call	#_pslpeek
1b974     FD FA 31 F9 | 	getword	result1, result1, #0
1b978     A7 FA 61 FC | 	wrlong	result1, fp
1b97c     CC 00 90 FD | 	jmp	#LR__2251
1b980                 | LR__2244
1b980     08 4E 05 F1 | 	add	fp, #8
1b984     A7 38 68 FC | 	wrlong	#28, fp
1b988     2C 4E 05 F1 | 	add	fp, #44
1b98c     A7 12 02 FB | 	rdlong	arg01, fp
1b990     34 4E 85 F1 | 	sub	fp, #52
1b994     64 5E B0 FD | 	call	#_pslpeek
1b998     A7 FA 61 FC | 	wrlong	result1, fp
1b99c     AC 00 90 FD | 	jmp	#LR__2251
1b9a0                 | LR__2245
1b9a0     08 4E 05 F1 | 	add	fp, #8
1b9a4     A7 3A 68 FC | 	wrlong	#29, fp
1b9a8     2C 4E 05 F1 | 	add	fp, #44
1b9ac     A7 12 02 FB | 	rdlong	arg01, fp
1b9b0     34 4E 85 F1 | 	sub	fp, #52
1b9b4     44 5E B0 FD | 	call	#_pslpeek
1b9b8     A7 FA 61 FC | 	wrlong	result1, fp
1b9bc     8C 00 90 FD | 	jmp	#LR__2251
1b9c0                 | LR__2246
1b9c0     08 4E 05 F1 | 	add	fp, #8
1b9c4     A7 FE 69 FC | 	wrlong	#255, fp
1b9c8     08 4E 85 F1 | 	sub	fp, #8
1b9cc     A7 60 68 FC | 	wrlong	#48, fp
1b9d0     78 00 90 FD | 	jmp	#LR__2251
1b9d4                 | LR__2247
1b9d4     08 4E 05 F1 | 	add	fp, #8
1b9d8     A7 FE 69 FC | 	wrlong	#255, fp
1b9dc     08 4E 85 F1 | 	sub	fp, #8
1b9e0     A7 60 68 FC | 	wrlong	#48, fp
1b9e4     64 00 90 FD | 	jmp	#LR__2251
1b9e8                 | LR__2248
1b9e8     08 4E 05 F1 | 	add	fp, #8
1b9ec     A7 3C 68 FC | 	wrlong	#30, fp
1b9f0     2C 4E 05 F1 | 	add	fp, #44
1b9f4     A7 12 02 FB | 	rdlong	arg01, fp
1b9f8     34 4E 85 F1 | 	sub	fp, #52
1b9fc     FC 5D B0 FD | 	call	#_pslpeek
1ba00     A7 FA 61 FC | 	wrlong	result1, fp
1ba04     44 00 90 FD | 	jmp	#LR__2251
1ba08                 | LR__2249
1ba08     08 4E 05 F1 | 	add	fp, #8
1ba0c     A7 FE 69 FC | 	wrlong	#255, fp
1ba10     08 4E 85 F1 | 	sub	fp, #8
1ba14     A7 60 68 FC | 	wrlong	#48, fp
1ba18     30 00 90 FD | 	jmp	#LR__2251
1ba1c                 | LR__2250
1ba1c     08 4E 05 F1 | 	add	fp, #8
1ba20     A7 3E 68 FC | 	wrlong	#31, fp
1ba24     2C 4E 05 F1 | 	add	fp, #44
1ba28     A7 12 02 FB | 	rdlong	arg01, fp
1ba2c     34 4E 85 F1 | 	sub	fp, #52
1ba30     C8 5D B0 FD | 	call	#_pslpeek
1ba34     A7 FA 61 FC | 	wrlong	result1, fp
1ba38     00 04 00 FF 
1ba3c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1ba40     08 4E 05 31 |  if_ae	add	fp, #8
1ba44     A7 56 68 3C |  if_ae	wrlong	#43, fp
1ba48     08 4E 85 31 |  if_ae	sub	fp, #8
1ba4c                 | LR__2251
1ba4c     A7 12 02 F6 | 	mov	arg01, fp
1ba50     D0 11 BF FD | 	call	#_push
1ba54                 | LR__2252
1ba54     A7 F0 03 F6 | 	mov	ptra, fp
1ba58     B2 00 A0 FD | 	call	#popregs_
1ba5c                 | _do_getvar_ret
1ba5c     2D 00 64 FD | 	ret
1ba60                 | 
1ba60                 | ' 
1ba60                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1ba60                 | ' 
1ba60                 | ' sub do_getaddr
1ba60                 | _do_getaddr
1ba60     01 4A 05 F6 | 	mov	COUNT_, #1
1ba64     A8 00 A0 FD | 	call	#pushregs_
1ba68     38 F0 07 F1 | 	add	ptra, #56
1ba6c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1ba6c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1ba6c     4A 00 00 FF 
1ba70     80 E4 05 F1 | 	add	objptr, ##38016
1ba74     F2 12 02 FB | 	rdlong	arg01, objptr
1ba78     09 FD 01 F6 | 	mov	result2, arg01
1ba7c     01 FC 65 F0 | 	shl	result2, #1
1ba80     09 FD 01 F1 | 	add	result2, arg01
1ba84     02 FC 65 F0 | 	shl	result2, #2
1ba88     03 00 00 FF 
1ba8c     04 E4 85 F1 | 	sub	objptr, ##1540
1ba90     F2 FC 01 F1 | 	add	result2, objptr
1ba94     04 FC 05 F1 | 	add	result2, #4
1ba98     FE FC 09 FB | 	rdlong	result2, result2 wz
1ba9c     47 00 00 FF 
1baa0     7C E4 85 F1 | 	sub	objptr, ##36476
1baa4     10 01 90 5D |  if_ne	jmp	#LR__2260
1baa8     4A 00 00 FF 
1baac     80 E4 05 F1 | 	add	objptr, ##38016
1bab0     F2 12 02 FB | 	rdlong	arg01, objptr
1bab4     09 FD 01 F6 | 	mov	result2, arg01
1bab8     01 FC 65 F0 | 	shl	result2, #1
1babc     09 FD 01 F1 | 	add	result2, arg01
1bac0     02 FC 65 F0 | 	shl	result2, #2
1bac4     03 00 00 FF 
1bac8     04 E4 85 F1 | 	sub	objptr, ##1540
1bacc     F2 FC 01 F1 | 	add	result2, objptr
1bad0     FE 12 02 FB | 	rdlong	arg01, result2
1bad4     04 12 66 F0 | 	shl	arg01, #4
1bad8     32 00 00 FF 
1badc     84 E4 85 F1 | 	sub	objptr, ##25732
1bae0     F2 12 02 F1 | 	add	arg01, objptr
1bae4     0C 12 06 F1 | 	add	arg01, #12
1bae8     09 13 02 FB | 	rdlong	arg01, arg01
1baec     08 4E 05 F1 | 	add	fp, #8
1baf0     A7 12 62 FC | 	wrlong	arg01, fp
1baf4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1baf4                 | '    if t1.result_type>=array_no_type then goto 2200
1baf4     08 4E 85 F1 | 	sub	fp, #8
1baf8     00 13 16 F2 | 	cmp	arg01, #256 wc
1bafc     14 00 00 FF 
1bb00     F8 E5 85 F1 | 	sub	objptr, ##10744
1bb04     B0 00 90 3D |  if_ae	jmp	#LR__2261
1bb08     4A 00 00 FF 
1bb0c     80 E4 05 F1 | 	add	objptr, ##38016
1bb10     F2 12 02 FB | 	rdlong	arg01, objptr
1bb14     09 FF 01 F6 | 	mov	result3, arg01
1bb18     01 FE 65 F0 | 	shl	result3, #1
1bb1c     09 FF 01 F1 | 	add	result3, arg01
1bb20     02 FE 65 F0 | 	shl	result3, #2
1bb24     03 00 00 FF 
1bb28     04 E4 85 F1 | 	sub	objptr, ##1540
1bb2c     F2 FE 01 F1 | 	add	result3, objptr
1bb30     FF FA 01 FB | 	rdlong	result1, result3
1bb34     04 FA 65 F0 | 	shl	result1, #4
1bb38     32 00 00 FF 
1bb3c     84 E4 85 F1 | 	sub	objptr, ##25732
1bb40     F2 FA 01 F1 | 	add	result1, objptr
1bb44     04 FA 05 F1 | 	add	result1, #4
1bb48     A7 FA 61 FC | 	wrlong	result1, fp
1bb4c     35 00 00 FF 
1bb50     88 E4 05 F1 | 	add	objptr, ##27272
1bb54     F2 FE 01 FB | 	rdlong	result3, objptr
1bb58     FF 12 02 F6 | 	mov	arg01, result3
1bb5c     01 12 66 F0 | 	shl	arg01, #1
1bb60     FF 12 02 F1 | 	add	arg01, result3
1bb64     02 12 66 F0 | 	shl	arg01, #2
1bb68     03 00 00 FF 
1bb6c     04 E4 85 F1 | 	sub	objptr, ##1540
1bb70     F2 12 02 F1 | 	add	arg01, objptr
1bb74     09 13 02 FB | 	rdlong	arg01, arg01
1bb78     04 12 66 F0 | 	shl	arg01, #4
1bb7c     32 00 00 FF 
1bb80     84 E4 85 F1 | 	sub	objptr, ##25732
1bb84     F2 12 02 F1 | 	add	arg01, objptr
1bb88     0C 12 06 F1 | 	add	arg01, #12
1bb8c     09 13 02 FB | 	rdlong	arg01, arg01
1bb90     04 4E 05 F1 | 	add	fp, #4
1bb94     A7 12 62 FC | 	wrlong	arg01, fp
1bb98     04 4E 05 F1 | 	add	fp, #4
1bb9c     A7 3A 68 FC | 	wrlong	#29, fp
1bba0     08 4E 85 F1 | 	sub	fp, #8
1bba4     A7 12 02 F6 | 	mov	arg01, fp
1bba8     14 00 00 FF 
1bbac     F8 E5 85 F1 | 	sub	objptr, ##10744
1bbb0     70 10 BF FD | 	call	#_push
1bbb4                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1bbb4                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1bbb4                 | '   t1.result_type=result_uint
1bbb4                 | '   push t1 : return
1bbb4     2C 03 90 FD | 	jmp	#LR__2270
1bbb8                 | LR__2260
1bbb8                 | LR__2261
1bbb8     4A 00 00 FF 
1bbbc     80 E4 05 F1 | 	add	objptr, ##38016
1bbc0     F2 FE 01 FB | 	rdlong	result3, objptr
1bbc4     FF FC 01 F6 | 	mov	result2, result3
1bbc8     01 FC 65 F0 | 	shl	result2, #1
1bbcc     FF FC 01 F1 | 	add	result2, result3
1bbd0     02 FC 65 F0 | 	shl	result2, #2
1bbd4     03 00 00 FF 
1bbd8     04 E4 85 F1 | 	sub	objptr, ##1540
1bbdc     F2 FC 01 F1 | 	add	result2, objptr
1bbe0     FE FE 01 FB | 	rdlong	result3, result2
1bbe4     04 FE 65 F0 | 	shl	result3, #4
1bbe8     32 00 00 FF 
1bbec     84 E4 85 F1 | 	sub	objptr, ##25732
1bbf0     F2 FE 01 F1 | 	add	result3, objptr
1bbf4     04 FE 05 F1 | 	add	result3, #4
1bbf8     FF FE 01 FB | 	rdlong	result3, result3
1bbfc     0C 4E 05 F1 | 	add	fp, #12
1bc00     A7 FE 61 FC | 	wrlong	result3, fp
1bc04     35 00 00 FF 
1bc08     88 E4 05 F1 | 	add	objptr, ##27272
1bc0c     F2 FE 01 FB | 	rdlong	result3, objptr
1bc10     FF 12 02 F6 | 	mov	arg01, result3
1bc14     01 12 66 F0 | 	shl	arg01, #1
1bc18     FF 12 02 F1 | 	add	arg01, result3
1bc1c     02 12 66 F0 | 	shl	arg01, #2
1bc20     03 00 00 FF 
1bc24     04 E4 85 F1 | 	sub	objptr, ##1540
1bc28     F2 12 02 F1 | 	add	arg01, objptr
1bc2c     09 13 02 FB | 	rdlong	arg01, arg01
1bc30     04 12 66 F0 | 	shl	arg01, #4
1bc34     32 00 00 FF 
1bc38     84 E4 85 F1 | 	sub	objptr, ##25732
1bc3c     F2 12 02 F1 | 	add	arg01, objptr
1bc40     0C 12 06 F1 | 	add	arg01, #12
1bc44     09 13 02 FB | 	rdlong	arg01, arg01
1bc48     08 4E 85 F1 | 	sub	fp, #8
1bc4c     A7 12 62 FC | 	wrlong	arg01, fp
1bc50     08 4E 05 F1 | 	add	fp, #8
1bc54     A7 12 02 FB | 	rdlong	arg01, fp
1bc58     0C 4E 85 F1 | 	sub	fp, #12
1bc5c     14 00 00 FF 
1bc60     F8 E5 85 F1 | 	sub	objptr, ##10744
1bc64     94 5B B0 FD | 	call	#_pslpeek
1bc68     FD FA 31 F9 | 	getword	result1, result1, #0
1bc6c     10 4E 05 F1 | 	add	fp, #16
1bc70     A7 FA 61 FC | 	wrlong	result1, fp
1bc74     4A 00 00 FF 
1bc78     80 E4 05 F1 | 	add	objptr, ##38016
1bc7c     F2 FE 01 FB | 	rdlong	result3, objptr
1bc80     FF 12 02 F6 | 	mov	arg01, result3
1bc84     01 12 66 F0 | 	shl	arg01, #1
1bc88     FF 12 02 F1 | 	add	arg01, result3
1bc8c     02 12 66 F0 | 	shl	arg01, #2
1bc90     03 00 00 FF 
1bc94     04 E4 85 F1 | 	sub	objptr, ##1540
1bc98     F2 12 02 F1 | 	add	arg01, objptr
1bc9c     04 12 06 F1 | 	add	arg01, #4
1bca0     09 13 02 FB | 	rdlong	arg01, arg01
1bca4     04 4E 05 F1 | 	add	fp, #4
1bca8     A7 12 62 FC | 	wrlong	arg01, fp
1bcac     08 4E 85 F1 | 	sub	fp, #8
1bcb0     A7 12 02 FB | 	rdlong	arg01, fp
1bcb4     0C 4E 85 F1 | 	sub	fp, #12
1bcb8     02 12 06 F1 | 	add	arg01, #2
1bcbc     47 00 00 FF 
1bcc0     7C E4 85 F1 | 	sub	objptr, ##36476
1bcc4     DC 5A B0 FD | 	call	#_pspeek
1bcc8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bccc     18 4E 05 F1 | 	add	fp, #24
1bcd0     A7 FA 61 FC | 	wrlong	result1, fp
1bcd4     0C 4E 85 F1 | 	sub	fp, #12
1bcd8     A7 12 02 FB | 	rdlong	arg01, fp
1bcdc     0C 4E 85 F1 | 	sub	fp, #12
1bce0     04 12 06 F1 | 	add	arg01, #4
1bce4     14 5B B0 FD | 	call	#_pslpeek
1bce8     1C 4E 05 F1 | 	add	fp, #28
1bcec     A7 FA 61 FC | 	wrlong	result1, fp
1bcf0     10 4E 85 F1 | 	sub	fp, #16
1bcf4     A7 12 02 FB | 	rdlong	arg01, fp
1bcf8     0C 4E 85 F1 | 	sub	fp, #12
1bcfc     08 12 06 F1 | 	add	arg01, #8
1bd00     F8 5A B0 FD | 	call	#_pslpeek
1bd04     20 4E 05 F1 | 	add	fp, #32
1bd08     A7 FA 61 FC | 	wrlong	result1, fp
1bd0c     14 4E 85 F1 | 	sub	fp, #20
1bd10     A7 12 02 FB | 	rdlong	arg01, fp
1bd14     0C 4E 85 F1 | 	sub	fp, #12
1bd18     0C 12 06 F1 | 	add	arg01, #12
1bd1c     DC 5A B0 FD | 	call	#_pslpeek
1bd20     24 4E 05 F1 | 	add	fp, #36
1bd24     A7 FA 61 FC | 	wrlong	result1, fp
1bd28                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1bd28                 | ' esize=pspeek(arrptr+2)
1bd28                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1bd28                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1bd28                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1bd28                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1bd28     10 4E 85 F1 | 	sub	fp, #16
1bd2c     A7 12 02 FB | 	rdlong	arg01, fp
1bd30     14 4E 85 F1 | 	sub	fp, #20
1bd34     03 12 16 F2 | 	cmp	arg01, #3 wc
1bd38     34 00 90 CD |  if_b	jmp	#LR__2262
1bd3c     4C 0E BF FD | 	call	#_pop
1bd40     A7 FA 61 FC | 	wrlong	result1, fp
1bd44     04 4E 05 F1 | 	add	fp, #4
1bd48     A7 FC 61 FC | 	wrlong	result2, fp
1bd4c     04 4E 05 F1 | 	add	fp, #4
1bd50     A7 FE 61 FC | 	wrlong	result3, fp
1bd54     08 4E 85 F1 | 	sub	fp, #8
1bd58     A7 12 02 F6 | 	mov	arg01, fp
1bd5c     10 10 BF FD | 	call	#_converttoint
1bd60     30 4E 05 F1 | 	add	fp, #48
1bd64     A7 FA 61 FC | 	wrlong	result1, fp
1bd68     30 4E 85 F1 | 	sub	fp, #48
1bd6c     0C 00 90 FD | 	jmp	#LR__2263
1bd70                 | LR__2262
1bd70     30 4E 05 F1 | 	add	fp, #48
1bd74     A7 00 68 FC | 	wrlong	#0, fp
1bd78     30 4E 85 F1 | 	sub	fp, #48
1bd7c                 | LR__2263
1bd7c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1bd7c     14 4E 05 F1 | 	add	fp, #20
1bd80     A7 12 02 FB | 	rdlong	arg01, fp
1bd84     14 4E 85 F1 | 	sub	fp, #20
1bd88     02 12 16 F2 | 	cmp	arg01, #2 wc
1bd8c     34 00 90 CD |  if_b	jmp	#LR__2264
1bd90     F8 0D BF FD | 	call	#_pop
1bd94     A7 FA 61 FC | 	wrlong	result1, fp
1bd98     04 4E 05 F1 | 	add	fp, #4
1bd9c     A7 FC 61 FC | 	wrlong	result2, fp
1bda0     04 4E 05 F1 | 	add	fp, #4
1bda4     A7 FE 61 FC | 	wrlong	result3, fp
1bda8     08 4E 85 F1 | 	sub	fp, #8
1bdac     A7 12 02 F6 | 	mov	arg01, fp
1bdb0     BC 0F BF FD | 	call	#_converttoint
1bdb4     2C 4E 05 F1 | 	add	fp, #44
1bdb8     A7 FA 61 FC | 	wrlong	result1, fp
1bdbc     2C 4E 85 F1 | 	sub	fp, #44
1bdc0     0C 00 90 FD | 	jmp	#LR__2265
1bdc4                 | LR__2264
1bdc4     2C 4E 05 F1 | 	add	fp, #44
1bdc8     A7 00 68 FC | 	wrlong	#0, fp
1bdcc     2C 4E 85 F1 | 	sub	fp, #44
1bdd0                 | LR__2265
1bdd0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1bdd0     14 4E 05 F1 | 	add	fp, #20
1bdd4     A7 12 02 FB | 	rdlong	arg01, fp
1bdd8     14 4E 85 F1 | 	sub	fp, #20
1bddc     01 12 16 F2 | 	cmp	arg01, #1 wc
1bde0     34 00 90 CD |  if_b	jmp	#LR__2266
1bde4     A4 0D BF FD | 	call	#_pop
1bde8     A7 FA 61 FC | 	wrlong	result1, fp
1bdec     04 4E 05 F1 | 	add	fp, #4
1bdf0     A7 FC 61 FC | 	wrlong	result2, fp
1bdf4     04 4E 05 F1 | 	add	fp, #4
1bdf8     A7 FE 61 FC | 	wrlong	result3, fp
1bdfc     08 4E 85 F1 | 	sub	fp, #8
1be00     A7 12 02 F6 | 	mov	arg01, fp
1be04     68 0F BF FD | 	call	#_converttoint
1be08     28 4E 05 F1 | 	add	fp, #40
1be0c     A7 FA 61 FC | 	wrlong	result1, fp
1be10     28 4E 85 F1 | 	sub	fp, #40
1be14     0C 00 90 FD | 	jmp	#LR__2267
1be18                 | LR__2266
1be18     28 4E 05 F1 | 	add	fp, #40
1be1c     A7 00 68 FC | 	wrlong	#0, fp
1be20     28 4E 85 F1 | 	sub	fp, #40
1be24                 | LR__2267
1be24                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1be24                 | ' if numpar>0 then
1be24     14 4E 05 F1 | 	add	fp, #20
1be28     A7 FE 01 FB | 	rdlong	result3, fp
1be2c     14 4E 85 F1 | 	sub	fp, #20
1be30     01 FE 15 F2 | 	cmp	result3, #1 wc
1be34     8C 00 90 CD |  if_b	jmp	#LR__2268
1be38     0C 4E 05 F1 | 	add	fp, #12
1be3c     A7 FC 01 FB | 	rdlong	result2, fp
1be40     1C 4E 05 F1 | 	add	fp, #28
1be44     A7 FE 01 FB | 	rdlong	result3, fp
1be48     04 4E 05 F1 | 	add	fp, #4
1be4c     A7 12 02 FB | 	rdlong	arg01, fp
1be50     10 4E 85 F1 | 	sub	fp, #16
1be54     A7 FA 01 FB | 	rdlong	result1, fp
1be58     FD 12 02 FD | 	qmul	arg01, result1
1be5c     10 FC 05 F1 | 	add	result2, #16
1be60     14 4E 05 F1 | 	add	fp, #20
1be64     A7 26 02 FB | 	rdlong	local01, fp
1be68     18 12 62 FD | 	getqx	arg01
1be6c     FD 26 02 FD | 	qmul	local01, result1
1be70     09 FF 01 F1 | 	add	result3, arg01
1be74     10 4E 85 F1 | 	sub	fp, #16
1be78     A7 26 02 FB | 	rdlong	local01, fp
1be7c     18 FA 61 FD | 	getqx	result1
1be80     13 FB 01 FD | 	qmul	result1, local01
1be84     08 4E 85 F1 | 	sub	fp, #8
1be88     A7 26 02 FB | 	rdlong	local01, fp
1be8c     18 FA 61 FD | 	getqx	result1
1be90     FD FE 01 F1 | 	add	result3, result1
1be94     13 FF 01 FD | 	qmul	result3, local01
1be98     1C 4E 05 F1 | 	add	fp, #28
1be9c     18 26 62 FD | 	getqx	local01
1bea0     13 FD 01 F1 | 	add	result2, local01
1bea4     A7 FC 61 FC | 	wrlong	result2, fp
1bea8     2C 4E 85 F1 | 	sub	fp, #44
1beac     A7 3A 68 FC | 	wrlong	#29, fp
1beb0     2C 4E 05 F1 | 	add	fp, #44
1beb4     A7 26 02 FB | 	rdlong	local01, fp
1beb8     34 4E 85 F1 | 	sub	fp, #52
1bebc     A7 26 62 FC | 	wrlong	local01, fp
1bec0     18 00 90 FD | 	jmp	#LR__2269
1bec4                 | LR__2268
1bec4     08 4E 05 F1 | 	add	fp, #8
1bec8     A7 3A 68 FC | 	wrlong	#29, fp
1becc     04 4E 05 F1 | 	add	fp, #4
1bed0     A7 26 02 FB | 	rdlong	local01, fp
1bed4     0C 4E 85 F1 | 	sub	fp, #12
1bed8     A7 26 62 FC | 	wrlong	local01, fp
1bedc                 | LR__2269
1bedc     A7 12 02 F6 | 	mov	arg01, fp
1bee0     40 0D BF FD | 	call	#_push
1bee4                 | LR__2270
1bee4     A7 F0 03 F6 | 	mov	ptra, fp
1bee8     B2 00 A0 FD | 	call	#popregs_
1beec                 | _do_getaddr_ret
1beec     2D 00 64 FD | 	ret
1bef0                 | 
1bef0                 | ' 
1bef0                 | ' 
1bef0                 | ' 
1bef0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bef0                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1bef0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1bef0                 | ' 
1bef0                 | ' '--------------------------------- AND 
1bef0                 | ' 
1bef0                 | ' sub do_and 
1bef0                 | _do_and
1bef0     03 4A 05 F6 | 	mov	COUNT_, #3
1bef4     A8 00 A0 FD | 	call	#pushregs_
1bef8     18 F0 07 F1 | 	add	ptra, #24
1befc     8C 0C BF FD | 	call	#_pop
1bf00     FD 12 02 F6 | 	mov	arg01, result1
1bf04     FE 26 02 F6 | 	mov	local01, result2
1bf08     FF 28 02 F6 | 	mov	local02, result3
1bf0c     0C 4E 05 F1 | 	add	fp, #12
1bf10     A7 12 62 FC | 	wrlong	arg01, fp
1bf14     04 4E 05 F1 | 	add	fp, #4
1bf18     A7 26 62 FC | 	wrlong	local01, fp
1bf1c     04 4E 05 F1 | 	add	fp, #4
1bf20     A7 28 62 FC | 	wrlong	local02, fp
1bf24     14 4E 85 F1 | 	sub	fp, #20
1bf28     60 0C BF FD | 	call	#_pop
1bf2c     FF 2A 02 F6 | 	mov	local03, result3
1bf30     A7 FA 61 FC | 	wrlong	result1, fp
1bf34     04 4E 05 F1 | 	add	fp, #4
1bf38     A7 FC 61 FC | 	wrlong	result2, fp
1bf3c     04 4E 05 F1 | 	add	fp, #4
1bf40     A7 2A 62 FC | 	wrlong	local03, fp
1bf44                 | ' 
1bf44                 | ' t2=pop()
1bf44                 | ' t1=pop()
1bf44                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bf44     08 4E 85 F1 | 	sub	fp, #8
1bf48     1C 2A 0E F2 | 	cmp	local03, #28 wz
1bf4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bf50     A7 2A 62 AC |  if_e	wrlong	local03, fp
1bf54     08 4E 05 A1 |  if_e	add	fp, #8
1bf58     A7 3A 68 AC |  if_e	wrlong	#29, fp
1bf5c     08 4E 85 A1 |  if_e	sub	fp, #8
1bf60                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1bf60     14 4E 05 F1 | 	add	fp, #20
1bf64     A7 2A 02 FB | 	rdlong	local03, fp
1bf68     14 4E 85 F1 | 	sub	fp, #20
1bf6c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1bf70     18 00 90 5D |  if_ne	jmp	#LR__2280
1bf74     0C 4E 05 F1 | 	add	fp, #12
1bf78     A7 2A 02 FB | 	rdlong	local03, fp
1bf7c     A7 2A 62 FC | 	wrlong	local03, fp
1bf80     08 4E 05 F1 | 	add	fp, #8
1bf84     A7 3A 68 FC | 	wrlong	#29, fp
1bf88     14 4E 85 F1 | 	sub	fp, #20
1bf8c                 | LR__2280
1bf8c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1bf8c     08 4E 05 F1 | 	add	fp, #8
1bf90     A7 2A 02 FB | 	rdlong	local03, fp
1bf94     08 4E 85 F1 | 	sub	fp, #8
1bf98     1F 2A 0E F2 | 	cmp	local03, #31 wz
1bf9c     14 4E 05 51 |  if_ne	add	fp, #20
1bfa0     A7 28 02 5B |  if_ne	rdlong	local02, fp
1bfa4     14 4E 85 51 |  if_ne	sub	fp, #20
1bfa8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1bfac     08 4E 05 51 |  if_ne	add	fp, #8
1bfb0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1bfb4     08 4E 85 51 |  if_ne	sub	fp, #8
1bfb8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1bfbc     14 4E 05 51 |  if_ne	add	fp, #20
1bfc0     14 4E 85 51 |  if_ne	sub	fp, #20
1bfc4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1bfc8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1bfcc     08 4E 05 A1 |  if_e	add	fp, #8
1bfd0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bfd4     08 4E 85 A1 |  if_e	sub	fp, #8
1bfd8     18 00 90 AD |  if_e	jmp	#LR__2281
1bfdc     A7 2A 02 FB | 	rdlong	local03, fp
1bfe0     0C 4E 05 F1 | 	add	fp, #12
1bfe4     A7 26 02 FB | 	rdlong	local01, fp
1bfe8     0C 4E 85 F1 | 	sub	fp, #12
1bfec     13 2B 02 F5 | 	and	local03, local01
1bff0     A7 2A 62 FC | 	wrlong	local03, fp
1bff4                 | LR__2281
1bff4     A7 12 02 F6 | 	mov	arg01, fp
1bff8     28 0C BF FD | 	call	#_push
1bffc     A7 F0 03 F6 | 	mov	ptra, fp
1c000     B2 00 A0 FD | 	call	#popregs_
1c004                 | _do_and_ret
1c004     2D 00 64 FD | 	ret
1c008                 | 
1c008                 | ' 
1c008                 | ' '--------------------------------- DIV (integer divide)
1c008                 | ' 
1c008                 | ' sub do_div 
1c008                 | _do_div
1c008     01 4A 05 F6 | 	mov	COUNT_, #1
1c00c     A8 00 A0 FD | 	call	#pushregs_
1c010     18 F0 07 F1 | 	add	ptra, #24
1c014     74 0B BF FD | 	call	#_pop
1c018     FD 8A 02 F6 | 	mov	muldivb_, result1
1c01c     FE 88 02 F6 | 	mov	muldiva_, result2
1c020     FF 26 02 F6 | 	mov	local01, result3
1c024     0C 4E 05 F1 | 	add	fp, #12
1c028     A7 8A 62 FC | 	wrlong	muldivb_, fp
1c02c     04 4E 05 F1 | 	add	fp, #4
1c030     A7 88 62 FC | 	wrlong	muldiva_, fp
1c034     04 4E 05 F1 | 	add	fp, #4
1c038     A7 26 62 FC | 	wrlong	local01, fp
1c03c     14 4E 85 F1 | 	sub	fp, #20
1c040     48 0B BF FD | 	call	#_pop
1c044     A7 FA 61 FC | 	wrlong	result1, fp
1c048     04 4E 05 F1 | 	add	fp, #4
1c04c     A7 FC 61 FC | 	wrlong	result2, fp
1c050     04 4E 05 F1 | 	add	fp, #4
1c054     A7 FE 61 FC | 	wrlong	result3, fp
1c058                 | ' 
1c058                 | ' t2=pop()
1c058                 | ' t1=pop()
1c058                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1c058     08 4E 85 F1 | 	sub	fp, #8
1c05c     1F FE 0D F2 | 	cmp	result3, #31 wz
1c060     14 4E 05 51 |  if_ne	add	fp, #20
1c064     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1c068     14 4E 85 51 |  if_ne	sub	fp, #20
1c06c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1c070     A7 14 68 AC |  if_e	wrlong	#10, fp
1c074     08 4E 05 A1 |  if_e	add	fp, #8
1c078     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c07c     08 4E 85 A1 |  if_e	sub	fp, #8
1c080     90 01 90 AD |  if_e	jmp	#LR__2296
1c084                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c084     08 4E 05 F1 | 	add	fp, #8
1c088     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c08c     08 4E 85 F1 | 	sub	fp, #8
1c090     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1c094     1C 00 90 5D |  if_ne	jmp	#LR__2290
1c098     08 4E 05 F1 | 	add	fp, #8
1c09c     A7 38 68 FC | 	wrlong	#28, fp
1c0a0     08 4E 85 F1 | 	sub	fp, #8
1c0a4     A7 12 02 FB | 	rdlong	arg01, fp
1c0a8     00 14 06 F6 | 	mov	arg02, #0
1c0ac     68 C1 B0 FD | 	call	#__system___float_tointeger
1c0b0     A7 FA 61 FC | 	wrlong	result1, fp
1c0b4                 | LR__2290
1c0b4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c0b4     14 4E 05 F1 | 	add	fp, #20
1c0b8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c0bc     14 4E 85 F1 | 	sub	fp, #20
1c0c0     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1c0c4     28 00 90 5D |  if_ne	jmp	#LR__2291
1c0c8     14 4E 05 F1 | 	add	fp, #20
1c0cc     A7 38 68 FC | 	wrlong	#28, fp
1c0d0     08 4E 85 F1 | 	sub	fp, #8
1c0d4     A7 12 02 FB | 	rdlong	arg01, fp
1c0d8     0C 4E 85 F1 | 	sub	fp, #12
1c0dc     00 14 06 F6 | 	mov	arg02, #0
1c0e0     34 C1 B0 FD | 	call	#__system___float_tointeger
1c0e4     0C 4E 05 F1 | 	add	fp, #12
1c0e8     A7 FA 61 FC | 	wrlong	result1, fp
1c0ec     0C 4E 85 F1 | 	sub	fp, #12
1c0f0                 | LR__2291
1c0f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1c0f0     08 4E 05 F1 | 	add	fp, #8
1c0f4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c0f8     08 4E 85 F1 | 	sub	fp, #8
1c0fc     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1c100     14 4E 05 A1 |  if_e	add	fp, #20
1c104     A7 26 02 AB |  if_e	rdlong	local01, fp
1c108     14 4E 85 A1 |  if_e	sub	fp, #20
1c10c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1c110     20 00 90 5D |  if_ne	jmp	#LR__2292
1c114     0C 4E 05 F1 | 	add	fp, #12
1c118     A7 26 02 FB | 	rdlong	local01, fp
1c11c     0C 4E 85 F1 | 	sub	fp, #12
1c120     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c124     13 8B 12 FD | 	qdiv	muldivb_, local01
1c128     18 26 62 FD | 	getqx	local01
1c12c     A7 26 62 FC | 	wrlong	local01, fp
1c130     E0 00 90 FD | 	jmp	#LR__2296
1c134                 | LR__2292
1c134                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1c134     08 4E 05 F1 | 	add	fp, #8
1c138     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c13c     08 4E 85 F1 | 	sub	fp, #8
1c140     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1c144     14 4E 05 A1 |  if_e	add	fp, #20
1c148     A7 26 02 AB |  if_e	rdlong	local01, fp
1c14c     14 4E 85 A1 |  if_e	sub	fp, #20
1c150     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1c154     2C 00 90 5D |  if_ne	jmp	#LR__2293
1c158     0C 4E 05 F1 | 	add	fp, #12
1c15c     A7 26 02 FB | 	rdlong	local01, fp
1c160     0C 4E 85 F1 | 	sub	fp, #12
1c164     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c168     13 8B 12 FD | 	qdiv	muldivb_, local01
1c16c     18 26 62 FD | 	getqx	local01
1c170     A7 26 62 FC | 	wrlong	local01, fp
1c174     08 4E 05 F1 | 	add	fp, #8
1c178     A7 38 68 FC | 	wrlong	#28, fp
1c17c     08 4E 85 F1 | 	sub	fp, #8
1c180     90 00 90 FD | 	jmp	#LR__2296
1c184                 | LR__2293
1c184                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1c184     08 4E 05 F1 | 	add	fp, #8
1c188     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c18c     08 4E 85 F1 | 	sub	fp, #8
1c190     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1c194     14 4E 05 A1 |  if_e	add	fp, #20
1c198     A7 26 02 AB |  if_e	rdlong	local01, fp
1c19c     14 4E 85 A1 |  if_e	sub	fp, #20
1c1a0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1c1a4     1C 00 90 5D |  if_ne	jmp	#LR__2294
1c1a8     A7 88 02 FB | 	rdlong	muldiva_, fp
1c1ac     0C 4E 05 F1 | 	add	fp, #12
1c1b0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c1b4     0C 4E 85 F1 | 	sub	fp, #12
1c1b8     BA 00 A0 FD | 	call	#divide_
1c1bc     A7 8A 62 FC | 	wrlong	muldivb_, fp
1c1c0     50 00 90 FD | 	jmp	#LR__2296
1c1c4                 | LR__2294
1c1c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1c1c4     08 4E 05 F1 | 	add	fp, #8
1c1c8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c1cc     08 4E 85 F1 | 	sub	fp, #8
1c1d0     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1c1d4     14 4E 05 A1 |  if_e	add	fp, #20
1c1d8     A7 26 02 AB |  if_e	rdlong	local01, fp
1c1dc     14 4E 85 A1 |  if_e	sub	fp, #20
1c1e0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1c1e4     1C 00 90 5D |  if_ne	jmp	#LR__2295
1c1e8     A7 88 02 FB | 	rdlong	muldiva_, fp
1c1ec     0C 4E 05 F1 | 	add	fp, #12
1c1f0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c1f4     0C 4E 85 F1 | 	sub	fp, #12
1c1f8     BA 00 A0 FD | 	call	#divide_
1c1fc     A7 8A 62 FC | 	wrlong	muldivb_, fp
1c200     10 00 90 FD | 	jmp	#LR__2296
1c204                 | LR__2295
1c204     A7 16 68 FC | 	wrlong	#11, fp
1c208     08 4E 05 F1 | 	add	fp, #8
1c20c     A7 FE 69 FC | 	wrlong	#255, fp
1c210     08 4E 85 F1 | 	sub	fp, #8
1c214                 | LR__2296
1c214     A7 12 02 F6 | 	mov	arg01, fp
1c218     08 0A BF FD | 	call	#_push
1c21c     A7 F0 03 F6 | 	mov	ptra, fp
1c220     B2 00 A0 FD | 	call	#popregs_
1c224                 | _do_div_ret
1c224     2D 00 64 FD | 	ret
1c228                 | 
1c228                 | ' 
1c228                 | ' '--------------------------------- equal (=)
1c228                 | ' 
1c228                 | ' sub do_eq
1c228                 | _do_eq
1c228     05 4A 05 F6 | 	mov	COUNT_, #5
1c22c     A8 00 A0 FD | 	call	#pushregs_
1c230     18 F0 07 F1 | 	add	ptra, #24
1c234     54 09 BF FD | 	call	#_pop
1c238     FD 26 02 F6 | 	mov	local01, result1
1c23c     FE 28 02 F6 | 	mov	local02, result2
1c240     FF 2A 02 F6 | 	mov	local03, result3
1c244     0C 4E 05 F1 | 	add	fp, #12
1c248     A7 26 62 FC | 	wrlong	local01, fp
1c24c     04 4E 05 F1 | 	add	fp, #4
1c250     A7 28 62 FC | 	wrlong	local02, fp
1c254     04 4E 05 F1 | 	add	fp, #4
1c258     A7 2A 62 FC | 	wrlong	local03, fp
1c25c     14 4E 85 F1 | 	sub	fp, #20
1c260     28 09 BF FD | 	call	#_pop
1c264     FF 2A 02 F6 | 	mov	local03, result3
1c268     A7 FA 61 FC | 	wrlong	result1, fp
1c26c     04 4E 05 F1 | 	add	fp, #4
1c270     A7 FC 61 FC | 	wrlong	result2, fp
1c274     04 4E 05 F1 | 	add	fp, #4
1c278     A7 2A 62 FC | 	wrlong	local03, fp
1c27c                 | ' 
1c27c                 | ' t2=pop()
1c27c                 | ' t1=pop()
1c27c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1c27c     08 4E 85 F1 | 	sub	fp, #8
1c280     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c284     14 4E 05 A1 |  if_e	add	fp, #20
1c288     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c28c     14 4E 85 A1 |  if_e	sub	fp, #20
1c290     16 2B 02 A6 |  if_e	mov	local03, local04
1c294     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c298     28 00 90 5D |  if_ne	jmp	#LR__2300
1c29c     00 26 06 F6 | 	mov	local01, #0
1c2a0     A7 12 02 FB | 	rdlong	arg01, fp
1c2a4     0C 4E 05 F1 | 	add	fp, #12
1c2a8     A7 14 02 FB | 	rdlong	arg02, fp
1c2ac     0C 4E 85 F1 | 	sub	fp, #12
1c2b0     48 8C B0 FD | 	call	#__system___string_cmp
1c2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c2b8     00 26 26 A6 |  if_e	not	local01, #0
1c2bc     A7 26 62 FC | 	wrlong	local01, fp
1c2c0     20 04 90 FD | 	jmp	#LR__2313
1c2c4                 | LR__2300
1c2c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1c2c4     08 4E 05 F1 | 	add	fp, #8
1c2c8     A7 26 02 FB | 	rdlong	local01, fp
1c2cc     08 4E 85 F1 | 	sub	fp, #8
1c2d0     1E 26 0E F2 | 	cmp	local01, #30 wz
1c2d4     14 4E 05 A1 |  if_e	add	fp, #20
1c2d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1c2e0     16 2B 02 A6 |  if_e	mov	local03, local04
1c2e4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c2e8     2C 00 90 5D |  if_ne	jmp	#LR__2301
1c2ec     00 26 06 F6 | 	mov	local01, #0
1c2f0     A7 12 02 FB | 	rdlong	arg01, fp
1c2f4     0C 4E 05 F1 | 	add	fp, #12
1c2f8     A7 14 02 FB | 	rdlong	arg02, fp
1c2fc     0C 4E 85 F1 | 	sub	fp, #12
1c300     01 16 06 F6 | 	mov	arg03, #1
1c304     7C BE B0 FD | 	call	#__system___float_cmp
1c308     00 FA 0D F2 | 	cmp	result1, #0 wz
1c30c     00 26 26 A6 |  if_e	not	local01, #0
1c310     A7 26 62 FC | 	wrlong	local01, fp
1c314     CC 03 90 FD | 	jmp	#LR__2313
1c318                 | LR__2301
1c318                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1c318     08 4E 05 F1 | 	add	fp, #8
1c31c     A7 26 02 FB | 	rdlong	local01, fp
1c320     08 4E 85 F1 | 	sub	fp, #8
1c324     1E 26 0E F2 | 	cmp	local01, #30 wz
1c328     14 4E 05 A1 |  if_e	add	fp, #20
1c32c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c330     14 4E 85 A1 |  if_e	sub	fp, #20
1c334     16 2B 02 A6 |  if_e	mov	local03, local04
1c338     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c33c     48 00 90 5D |  if_ne	jmp	#LR__2302
1c340     00 26 06 F6 | 	mov	local01, #0
1c344     A7 28 02 FB | 	rdlong	local02, fp
1c348     0C 4E 05 F1 | 	add	fp, #12
1c34c     A7 12 02 FB | 	rdlong	arg01, fp
1c350     0C 4E 85 F1 | 	sub	fp, #12
1c354     09 13 52 F6 | 	abs	arg01, arg01 wc
1c358     1F 2E C6 C9 |  if_b	decod	local05, #31
1c35c     00 2E 06 36 |  if_ae	mov	local05, #0
1c360     E8 B5 B0 FD | 	call	#__system___float_fromuns
1c364     17 FB 61 F5 | 	xor	result1, local05
1c368     FD 14 02 F6 | 	mov	arg02, result1
1c36c     14 13 02 F6 | 	mov	arg01, local02
1c370     01 16 06 F6 | 	mov	arg03, #1
1c374     0C BE B0 FD | 	call	#__system___float_cmp
1c378     00 FA 0D F2 | 	cmp	result1, #0 wz
1c37c     00 26 26 A6 |  if_e	not	local01, #0
1c380     A7 26 62 FC | 	wrlong	local01, fp
1c384     5C 03 90 FD | 	jmp	#LR__2313
1c388                 | LR__2302
1c388                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1c388     08 4E 05 F1 | 	add	fp, #8
1c38c     A7 26 02 FB | 	rdlong	local01, fp
1c390     08 4E 85 F1 | 	sub	fp, #8
1c394     1E 26 0E F2 | 	cmp	local01, #30 wz
1c398     14 4E 05 A1 |  if_e	add	fp, #20
1c39c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3a0     14 4E 85 A1 |  if_e	sub	fp, #20
1c3a4     16 2B 02 A6 |  if_e	mov	local03, local04
1c3a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c3ac     38 00 90 5D |  if_ne	jmp	#LR__2303
1c3b0     00 26 06 F6 | 	mov	local01, #0
1c3b4     A7 28 02 FB | 	rdlong	local02, fp
1c3b8     0C 4E 05 F1 | 	add	fp, #12
1c3bc     A7 12 02 FB | 	rdlong	arg01, fp
1c3c0     0C 4E 85 F1 | 	sub	fp, #12
1c3c4     84 B5 B0 FD | 	call	#__system___float_fromuns
1c3c8     FD 14 02 F6 | 	mov	arg02, result1
1c3cc     14 13 02 F6 | 	mov	arg01, local02
1c3d0     01 16 06 F6 | 	mov	arg03, #1
1c3d4     AC BD B0 FD | 	call	#__system___float_cmp
1c3d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3dc     00 26 26 A6 |  if_e	not	local01, #0
1c3e0     A7 26 62 FC | 	wrlong	local01, fp
1c3e4     FC 02 90 FD | 	jmp	#LR__2313
1c3e8                 | LR__2303
1c3e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1c3e8     08 4E 05 F1 | 	add	fp, #8
1c3ec     A7 26 02 FB | 	rdlong	local01, fp
1c3f0     08 4E 85 F1 | 	sub	fp, #8
1c3f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1c3f8     14 4E 05 A1 |  if_e	add	fp, #20
1c3fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c400     14 4E 85 A1 |  if_e	sub	fp, #20
1c404     16 2B 02 A6 |  if_e	mov	local03, local04
1c408     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c40c     44 00 90 5D |  if_ne	jmp	#LR__2304
1c410     00 26 06 F6 | 	mov	local01, #0
1c414     A7 12 02 FB | 	rdlong	arg01, fp
1c418     09 13 52 F6 | 	abs	arg01, arg01 wc
1c41c     1F 2E C6 C9 |  if_b	decod	local05, #31
1c420     00 2E 06 36 |  if_ae	mov	local05, #0
1c424     24 B5 B0 FD | 	call	#__system___float_fromuns
1c428     17 FB 61 F5 | 	xor	result1, local05
1c42c     FD 12 02 F6 | 	mov	arg01, result1
1c430     0C 4E 05 F1 | 	add	fp, #12
1c434     A7 14 02 FB | 	rdlong	arg02, fp
1c438     0C 4E 85 F1 | 	sub	fp, #12
1c43c     01 16 06 F6 | 	mov	arg03, #1
1c440     40 BD B0 FD | 	call	#__system___float_cmp
1c444     00 FA 0D F2 | 	cmp	result1, #0 wz
1c448     00 26 26 A6 |  if_e	not	local01, #0
1c44c     A7 26 62 FC | 	wrlong	local01, fp
1c450     90 02 90 FD | 	jmp	#LR__2313
1c454                 | LR__2304
1c454                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1c454     08 4E 05 F1 | 	add	fp, #8
1c458     A7 26 02 FB | 	rdlong	local01, fp
1c45c     08 4E 85 F1 | 	sub	fp, #8
1c460     1C 26 0E F2 | 	cmp	local01, #28 wz
1c464     14 4E 05 A1 |  if_e	add	fp, #20
1c468     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c46c     14 4E 85 A1 |  if_e	sub	fp, #20
1c470     16 2B 02 A6 |  if_e	mov	local03, local04
1c474     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c478     24 00 90 5D |  if_ne	jmp	#LR__2305
1c47c     00 26 06 F6 | 	mov	local01, #0
1c480     A7 28 02 FB | 	rdlong	local02, fp
1c484     0C 4E 05 F1 | 	add	fp, #12
1c488     A7 2A 02 FB | 	rdlong	local03, fp
1c48c     0C 4E 85 F1 | 	sub	fp, #12
1c490     15 29 0A F2 | 	cmp	local02, local03 wz
1c494     01 26 66 A6 |  if_e	neg	local01, #1
1c498     A7 26 62 FC | 	wrlong	local01, fp
1c49c     44 02 90 FD | 	jmp	#LR__2313
1c4a0                 | LR__2305
1c4a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1c4a0     08 4E 05 F1 | 	add	fp, #8
1c4a4     A7 26 02 FB | 	rdlong	local01, fp
1c4a8     08 4E 85 F1 | 	sub	fp, #8
1c4ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1c4b0     14 4E 05 A1 |  if_e	add	fp, #20
1c4b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1c4bc     16 2B 02 A6 |  if_e	mov	local03, local04
1c4c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c4c4     24 00 90 5D |  if_ne	jmp	#LR__2306
1c4c8     00 26 06 F6 | 	mov	local01, #0
1c4cc     A7 28 02 FB | 	rdlong	local02, fp
1c4d0     0C 4E 05 F1 | 	add	fp, #12
1c4d4     A7 2A 02 FB | 	rdlong	local03, fp
1c4d8     0C 4E 85 F1 | 	sub	fp, #12
1c4dc     15 29 0A F2 | 	cmp	local02, local03 wz
1c4e0     01 26 66 A6 |  if_e	neg	local01, #1
1c4e4     A7 26 62 FC | 	wrlong	local01, fp
1c4e8     F8 01 90 FD | 	jmp	#LR__2313
1c4ec                 | LR__2306
1c4ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1c4ec     08 4E 05 F1 | 	add	fp, #8
1c4f0     A7 26 02 FB | 	rdlong	local01, fp
1c4f4     08 4E 85 F1 | 	sub	fp, #8
1c4f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1c4fc     14 4E 05 A1 |  if_e	add	fp, #20
1c500     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c504     14 4E 85 A1 |  if_e	sub	fp, #20
1c508     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c50c     34 00 90 5D |  if_ne	jmp	#LR__2307
1c510     00 26 06 F6 | 	mov	local01, #0
1c514     A7 12 02 FB | 	rdlong	arg01, fp
1c518     30 B4 B0 FD | 	call	#__system___float_fromuns
1c51c     FD 12 02 F6 | 	mov	arg01, result1
1c520     0C 4E 05 F1 | 	add	fp, #12
1c524     A7 14 02 FB | 	rdlong	arg02, fp
1c528     0C 4E 85 F1 | 	sub	fp, #12
1c52c     01 16 06 F6 | 	mov	arg03, #1
1c530     50 BC B0 FD | 	call	#__system___float_cmp
1c534     00 FA 0D F2 | 	cmp	result1, #0 wz
1c538     00 26 26 A6 |  if_e	not	local01, #0
1c53c     A7 26 62 FC | 	wrlong	local01, fp
1c540     A0 01 90 FD | 	jmp	#LR__2313
1c544                 | LR__2307
1c544                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1c544     08 4E 05 F1 | 	add	fp, #8
1c548     A7 26 02 FB | 	rdlong	local01, fp
1c54c     08 4E 85 F1 | 	sub	fp, #8
1c550     1D 26 0E F2 | 	cmp	local01, #29 wz
1c554     14 4E 05 A1 |  if_e	add	fp, #20
1c558     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c55c     14 4E 85 A1 |  if_e	sub	fp, #20
1c560     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c564     24 00 90 5D |  if_ne	jmp	#LR__2308
1c568     00 26 06 F6 | 	mov	local01, #0
1c56c     A7 28 02 FB | 	rdlong	local02, fp
1c570     0C 4E 05 F1 | 	add	fp, #12
1c574     A7 2A 02 FB | 	rdlong	local03, fp
1c578     0C 4E 85 F1 | 	sub	fp, #12
1c57c     15 29 0A F2 | 	cmp	local02, local03 wz
1c580     01 26 66 A6 |  if_e	neg	local01, #1
1c584     A7 26 62 FC | 	wrlong	local01, fp
1c588     58 01 90 FD | 	jmp	#LR__2313
1c58c                 | LR__2308
1c58c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1c58c     08 4E 05 F1 | 	add	fp, #8
1c590     A7 26 02 FB | 	rdlong	local01, fp
1c594     08 4E 85 F1 | 	sub	fp, #8
1c598     1D 26 0E F2 | 	cmp	local01, #29 wz
1c59c     14 4E 05 A1 |  if_e	add	fp, #20
1c5a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c5a4     14 4E 85 A1 |  if_e	sub	fp, #20
1c5a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c5ac     24 00 90 5D |  if_ne	jmp	#LR__2309
1c5b0     00 26 06 F6 | 	mov	local01, #0
1c5b4     A7 28 02 FB | 	rdlong	local02, fp
1c5b8     0C 4E 05 F1 | 	add	fp, #12
1c5bc     A7 2A 02 FB | 	rdlong	local03, fp
1c5c0     0C 4E 85 F1 | 	sub	fp, #12
1c5c4     15 29 0A F2 | 	cmp	local02, local03 wz
1c5c8     01 26 66 A6 |  if_e	neg	local01, #1
1c5cc     A7 26 62 FC | 	wrlong	local01, fp
1c5d0     10 01 90 FD | 	jmp	#LR__2313
1c5d4                 | LR__2309
1c5d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1c5d4     08 4E 05 F1 | 	add	fp, #8
1c5d8     A7 26 02 FB | 	rdlong	local01, fp
1c5dc     08 4E 85 F1 | 	sub	fp, #8
1c5e0     2B 26 0E F2 | 	cmp	local01, #43 wz
1c5e4     14 4E 05 A1 |  if_e	add	fp, #20
1c5e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c5ec     14 4E 85 A1 |  if_e	sub	fp, #20
1c5f0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c5f4     30 00 90 5D |  if_ne	jmp	#LR__2310
1c5f8     00 26 06 F6 | 	mov	local01, #0
1c5fc     A7 12 02 FB | 	rdlong	arg01, fp
1c600     00 07 BF FD | 	call	#_convertstring
1c604     FD 12 02 F6 | 	mov	arg01, result1
1c608     0C 4E 05 F1 | 	add	fp, #12
1c60c     A7 14 02 FB | 	rdlong	arg02, fp
1c610     0C 4E 85 F1 | 	sub	fp, #12
1c614     E4 88 B0 FD | 	call	#__system___string_cmp
1c618     00 FA 0D F2 | 	cmp	result1, #0 wz
1c61c     00 26 26 A6 |  if_e	not	local01, #0
1c620     A7 26 62 FC | 	wrlong	local01, fp
1c624     BC 00 90 FD | 	jmp	#LR__2313
1c628                 | LR__2310
1c628                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1c628     08 4E 05 F1 | 	add	fp, #8
1c62c     A7 26 02 FB | 	rdlong	local01, fp
1c630     08 4E 85 F1 | 	sub	fp, #8
1c634     1F 26 0E F2 | 	cmp	local01, #31 wz
1c638     14 4E 05 A1 |  if_e	add	fp, #20
1c63c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c640     14 4E 85 A1 |  if_e	sub	fp, #20
1c644     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c648     34 00 90 5D |  if_ne	jmp	#LR__2311
1c64c     00 26 06 F6 | 	mov	local01, #0
1c650     A7 28 02 FB | 	rdlong	local02, fp
1c654     0C 4E 05 F1 | 	add	fp, #12
1c658     A7 12 02 FB | 	rdlong	arg01, fp
1c65c     0C 4E 85 F1 | 	sub	fp, #12
1c660     A0 06 BF FD | 	call	#_convertstring
1c664     FD 14 02 F6 | 	mov	arg02, result1
1c668     14 13 02 F6 | 	mov	arg01, local02
1c66c     8C 88 B0 FD | 	call	#__system___string_cmp
1c670     00 FA 0D F2 | 	cmp	result1, #0 wz
1c674     00 26 26 A6 |  if_e	not	local01, #0
1c678     A7 26 62 FC | 	wrlong	local01, fp
1c67c     64 00 90 FD | 	jmp	#LR__2313
1c680                 | LR__2311
1c680                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1c680     08 4E 05 F1 | 	add	fp, #8
1c684     A7 26 02 FB | 	rdlong	local01, fp
1c688     08 4E 85 F1 | 	sub	fp, #8
1c68c     2B 26 0E F2 | 	cmp	local01, #43 wz
1c690     14 4E 05 A1 |  if_e	add	fp, #20
1c694     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c698     14 4E 85 A1 |  if_e	sub	fp, #20
1c69c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c6a0     3C 00 90 5D |  if_ne	jmp	#LR__2312
1c6a4     00 26 06 F6 | 	mov	local01, #0
1c6a8     A7 12 02 FB | 	rdlong	arg01, fp
1c6ac     54 06 BF FD | 	call	#_convertstring
1c6b0     FD 28 02 F6 | 	mov	local02, result1
1c6b4     0C 4E 05 F1 | 	add	fp, #12
1c6b8     A7 12 02 FB | 	rdlong	arg01, fp
1c6bc     0C 4E 85 F1 | 	sub	fp, #12
1c6c0     40 06 BF FD | 	call	#_convertstring
1c6c4     FD 14 02 F6 | 	mov	arg02, result1
1c6c8     14 13 02 F6 | 	mov	arg01, local02
1c6cc     2C 88 B0 FD | 	call	#__system___string_cmp
1c6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6d4     00 26 26 A6 |  if_e	not	local01, #0
1c6d8     A7 26 62 FC | 	wrlong	local01, fp
1c6dc     04 00 90 FD | 	jmp	#LR__2313
1c6e0                 | LR__2312
1c6e0     A7 00 68 FC | 	wrlong	#0, fp
1c6e4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c6e4                 | LR__2313
1c6e4     08 4E 05 F1 | 	add	fp, #8
1c6e8     A7 38 68 FC | 	wrlong	#28, fp
1c6ec     08 4E 85 F1 | 	sub	fp, #8
1c6f0     A7 12 02 F6 | 	mov	arg01, fp
1c6f4     2C 05 BF FD | 	call	#_push
1c6f8     A7 F0 03 F6 | 	mov	ptra, fp
1c6fc     B2 00 A0 FD | 	call	#popregs_
1c700                 | _do_eq_ret
1c700     2D 00 64 FD | 	ret
1c704                 | 
1c704                 | ' 
1c704                 | ' '--------------------------------- fdiv (/) - float divide
1c704                 | ' 
1c704                 | ' sub do_fdiv 
1c704                 | _do_fdiv
1c704     02 4A 05 F6 | 	mov	COUNT_, #2
1c708     A8 00 A0 FD | 	call	#pushregs_
1c70c     18 F0 07 F1 | 	add	ptra, #24
1c710     78 04 BF FD | 	call	#_pop
1c714     FD 14 02 F6 | 	mov	arg02, result1
1c718     FE 12 02 F6 | 	mov	arg01, result2
1c71c     FF 26 02 F6 | 	mov	local01, result3
1c720     0C 4E 05 F1 | 	add	fp, #12
1c724     A7 14 62 FC | 	wrlong	arg02, fp
1c728     04 4E 05 F1 | 	add	fp, #4
1c72c     A7 12 62 FC | 	wrlong	arg01, fp
1c730     04 4E 05 F1 | 	add	fp, #4
1c734     A7 26 62 FC | 	wrlong	local01, fp
1c738     14 4E 85 F1 | 	sub	fp, #20
1c73c     4C 04 BF FD | 	call	#_pop
1c740     A7 FA 61 FC | 	wrlong	result1, fp
1c744     04 4E 05 F1 | 	add	fp, #4
1c748     A7 FC 61 FC | 	wrlong	result2, fp
1c74c     04 4E 05 F1 | 	add	fp, #4
1c750     A7 FE 61 FC | 	wrlong	result3, fp
1c754                 | ' 
1c754                 | ' t2=pop()
1c754                 | ' t1=pop()
1c754                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1c754     08 4E 85 F1 | 	sub	fp, #8
1c758     1F FE 0D F2 | 	cmp	result3, #31 wz
1c75c     14 4E 05 51 |  if_ne	add	fp, #20
1c760     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c764     14 4E 85 51 |  if_ne	sub	fp, #20
1c768     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1c76c     A7 14 68 AC |  if_e	wrlong	#10, fp
1c770     08 4E 05 A1 |  if_e	add	fp, #8
1c774     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c778     08 4E 85 A1 |  if_e	sub	fp, #8
1c77c     38 01 90 AD |  if_e	jmp	#LR__2325
1c780                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c780     08 4E 05 F1 | 	add	fp, #8
1c784     A7 14 02 FB | 	rdlong	arg02, fp
1c788     08 4E 85 F1 | 	sub	fp, #8
1c78c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c790     28 00 90 5D |  if_ne	jmp	#LR__2320
1c794     08 4E 05 F1 | 	add	fp, #8
1c798     A7 3C 68 FC | 	wrlong	#30, fp
1c79c     08 4E 85 F1 | 	sub	fp, #8
1c7a0     A7 12 02 FB | 	rdlong	arg01, fp
1c7a4     09 13 52 F6 | 	abs	arg01, arg01 wc
1c7a8     1F 28 C6 C9 |  if_b	decod	local02, #31
1c7ac     00 28 06 36 |  if_ae	mov	local02, #0
1c7b0     98 B1 B0 FD | 	call	#__system___float_fromuns
1c7b4     14 FB 61 F5 | 	xor	result1, local02
1c7b8     A7 FA 61 FC | 	wrlong	result1, fp
1c7bc                 | LR__2320
1c7bc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1c7bc     08 4E 05 F1 | 	add	fp, #8
1c7c0     A7 14 02 FB | 	rdlong	arg02, fp
1c7c4     08 4E 85 F1 | 	sub	fp, #8
1c7c8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c7cc     18 00 90 5D |  if_ne	jmp	#LR__2321
1c7d0     08 4E 05 F1 | 	add	fp, #8
1c7d4     A7 3C 68 FC | 	wrlong	#30, fp
1c7d8     08 4E 85 F1 | 	sub	fp, #8
1c7dc     A7 12 02 FB | 	rdlong	arg01, fp
1c7e0     68 B1 B0 FD | 	call	#__system___float_fromuns
1c7e4     A7 FA 61 FC | 	wrlong	result1, fp
1c7e8                 | LR__2321
1c7e8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c7e8     14 4E 05 F1 | 	add	fp, #20
1c7ec     A7 14 02 FB | 	rdlong	arg02, fp
1c7f0     14 4E 85 F1 | 	sub	fp, #20
1c7f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c7f8     34 00 90 5D |  if_ne	jmp	#LR__2322
1c7fc     14 4E 05 F1 | 	add	fp, #20
1c800     A7 3C 68 FC | 	wrlong	#30, fp
1c804     08 4E 85 F1 | 	sub	fp, #8
1c808     A7 12 02 FB | 	rdlong	arg01, fp
1c80c     0C 4E 85 F1 | 	sub	fp, #12
1c810     09 13 52 F6 | 	abs	arg01, arg01 wc
1c814     1F 28 C6 C9 |  if_b	decod	local02, #31
1c818     00 28 06 36 |  if_ae	mov	local02, #0
1c81c     2C B1 B0 FD | 	call	#__system___float_fromuns
1c820     14 FB 61 F5 | 	xor	result1, local02
1c824     0C 4E 05 F1 | 	add	fp, #12
1c828     A7 FA 61 FC | 	wrlong	result1, fp
1c82c     0C 4E 85 F1 | 	sub	fp, #12
1c830                 | LR__2322
1c830                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c830     14 4E 05 F1 | 	add	fp, #20
1c834     A7 14 02 FB | 	rdlong	arg02, fp
1c838     14 4E 85 F1 | 	sub	fp, #20
1c83c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c840     24 00 90 5D |  if_ne	jmp	#LR__2323
1c844     14 4E 05 F1 | 	add	fp, #20
1c848     A7 3C 68 FC | 	wrlong	#30, fp
1c84c     08 4E 85 F1 | 	sub	fp, #8
1c850     A7 12 02 FB | 	rdlong	arg01, fp
1c854     0C 4E 85 F1 | 	sub	fp, #12
1c858     F0 B0 B0 FD | 	call	#__system___float_fromuns
1c85c     0C 4E 05 F1 | 	add	fp, #12
1c860     A7 FA 61 FC | 	wrlong	result1, fp
1c864     0C 4E 85 F1 | 	sub	fp, #12
1c868                 | LR__2323
1c868                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1c868     08 4E 05 F1 | 	add	fp, #8
1c86c     A7 14 02 FB | 	rdlong	arg02, fp
1c870     08 4E 85 F1 | 	sub	fp, #8
1c874     1E 14 0E F2 | 	cmp	arg02, #30 wz
1c878     14 4E 05 A1 |  if_e	add	fp, #20
1c87c     A7 26 02 AB |  if_e	rdlong	local01, fp
1c880     14 4E 85 A1 |  if_e	sub	fp, #20
1c884     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1c888     1C 00 90 5D |  if_ne	jmp	#LR__2324
1c88c     A7 12 02 FB | 	rdlong	arg01, fp
1c890     0C 4E 05 F1 | 	add	fp, #12
1c894     A7 14 02 FB | 	rdlong	arg02, fp
1c898     0C 4E 85 F1 | 	sub	fp, #12
1c89c     B4 B6 B0 FD | 	call	#__system___float_div
1c8a0     A7 FA 61 FC | 	wrlong	result1, fp
1c8a4     10 00 90 FD | 	jmp	#LR__2325
1c8a8                 | LR__2324
1c8a8     A7 16 68 FC | 	wrlong	#11, fp
1c8ac     08 4E 05 F1 | 	add	fp, #8
1c8b0     A7 FE 69 FC | 	wrlong	#255, fp
1c8b4     08 4E 85 F1 | 	sub	fp, #8
1c8b8                 | LR__2325
1c8b8     A7 12 02 F6 | 	mov	arg01, fp
1c8bc     64 03 BF FD | 	call	#_push
1c8c0     A7 F0 03 F6 | 	mov	ptra, fp
1c8c4     B2 00 A0 FD | 	call	#popregs_
1c8c8                 | _do_fdiv_ret
1c8c8     2D 00 64 FD | 	ret
1c8cc                 | 
1c8cc                 | ' 
1c8cc                 | ' '--------------------------------- greater or equal (>=)
1c8cc                 | ' 
1c8cc                 | ' sub do_ge
1c8cc                 | _do_ge
1c8cc     05 4A 05 F6 | 	mov	COUNT_, #5
1c8d0     A8 00 A0 FD | 	call	#pushregs_
1c8d4     18 F0 07 F1 | 	add	ptra, #24
1c8d8     B0 02 BF FD | 	call	#_pop
1c8dc     FD 26 02 F6 | 	mov	local01, result1
1c8e0     FE 28 02 F6 | 	mov	local02, result2
1c8e4     FF 2A 02 F6 | 	mov	local03, result3
1c8e8     0C 4E 05 F1 | 	add	fp, #12
1c8ec     A7 26 62 FC | 	wrlong	local01, fp
1c8f0     04 4E 05 F1 | 	add	fp, #4
1c8f4     A7 28 62 FC | 	wrlong	local02, fp
1c8f8     04 4E 05 F1 | 	add	fp, #4
1c8fc     A7 2A 62 FC | 	wrlong	local03, fp
1c900     14 4E 85 F1 | 	sub	fp, #20
1c904     84 02 BF FD | 	call	#_pop
1c908     FF 2A 02 F6 | 	mov	local03, result3
1c90c     A7 FA 61 FC | 	wrlong	result1, fp
1c910     04 4E 05 F1 | 	add	fp, #4
1c914     A7 FC 61 FC | 	wrlong	result2, fp
1c918     04 4E 05 F1 | 	add	fp, #4
1c91c     A7 2A 62 FC | 	wrlong	local03, fp
1c920                 | ' 
1c920                 | ' t2=pop()
1c920                 | ' t1=pop()
1c920                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1c920     08 4E 85 F1 | 	sub	fp, #8
1c924     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c928     14 4E 05 A1 |  if_e	add	fp, #20
1c92c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c930     14 4E 85 A1 |  if_e	sub	fp, #20
1c934     16 2B 02 A6 |  if_e	mov	local03, local04
1c938     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c93c     28 00 90 5D |  if_ne	jmp	#LR__2330
1c940     00 26 06 F6 | 	mov	local01, #0
1c944     A7 12 02 FB | 	rdlong	arg01, fp
1c948     0C 4E 05 F1 | 	add	fp, #12
1c94c     A7 14 02 FB | 	rdlong	arg02, fp
1c950     0C 4E 85 F1 | 	sub	fp, #12
1c954     A4 85 B0 FD | 	call	#__system___string_cmp
1c958     00 FA 55 F2 | 	cmps	result1, #0 wc
1c95c     00 26 26 36 |  if_ae	not	local01, #0
1c960     A7 26 62 FC | 	wrlong	local01, fp
1c964     24 04 90 FD | 	jmp	#LR__2343
1c968                 | LR__2330
1c968                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1c968     08 4E 05 F1 | 	add	fp, #8
1c96c     A7 26 02 FB | 	rdlong	local01, fp
1c970     08 4E 85 F1 | 	sub	fp, #8
1c974     1E 26 0E F2 | 	cmp	local01, #30 wz
1c978     14 4E 05 A1 |  if_e	add	fp, #20
1c97c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c980     14 4E 85 A1 |  if_e	sub	fp, #20
1c984     16 2B 02 A6 |  if_e	mov	local03, local04
1c988     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c98c     2C 00 90 5D |  if_ne	jmp	#LR__2331
1c990     00 26 06 F6 | 	mov	local01, #0
1c994     A7 12 02 FB | 	rdlong	arg01, fp
1c998     0C 4E 05 F1 | 	add	fp, #12
1c99c     A7 14 02 FB | 	rdlong	arg02, fp
1c9a0     0C 4E 85 F1 | 	sub	fp, #12
1c9a4     01 16 66 F6 | 	neg	arg03, #1
1c9a8     D8 B7 B0 FD | 	call	#__system___float_cmp
1c9ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1c9b0     00 26 26 36 |  if_ae	not	local01, #0
1c9b4     A7 26 62 FC | 	wrlong	local01, fp
1c9b8     D0 03 90 FD | 	jmp	#LR__2343
1c9bc                 | LR__2331
1c9bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1c9bc     08 4E 05 F1 | 	add	fp, #8
1c9c0     A7 26 02 FB | 	rdlong	local01, fp
1c9c4     08 4E 85 F1 | 	sub	fp, #8
1c9c8     1E 26 0E F2 | 	cmp	local01, #30 wz
1c9cc     14 4E 05 A1 |  if_e	add	fp, #20
1c9d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c9d4     14 4E 85 A1 |  if_e	sub	fp, #20
1c9d8     16 2B 02 A6 |  if_e	mov	local03, local04
1c9dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c9e0     48 00 90 5D |  if_ne	jmp	#LR__2332
1c9e4     00 26 06 F6 | 	mov	local01, #0
1c9e8     A7 28 02 FB | 	rdlong	local02, fp
1c9ec     0C 4E 05 F1 | 	add	fp, #12
1c9f0     A7 12 02 FB | 	rdlong	arg01, fp
1c9f4     0C 4E 85 F1 | 	sub	fp, #12
1c9f8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c9fc     1F 2E C6 C9 |  if_b	decod	local05, #31
1ca00     00 2E 06 36 |  if_ae	mov	local05, #0
1ca04     44 AF B0 FD | 	call	#__system___float_fromuns
1ca08     17 FB 61 F5 | 	xor	result1, local05
1ca0c     FD 14 02 F6 | 	mov	arg02, result1
1ca10     14 13 02 F6 | 	mov	arg01, local02
1ca14     01 16 66 F6 | 	neg	arg03, #1
1ca18     68 B7 B0 FD | 	call	#__system___float_cmp
1ca1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ca20     00 26 26 36 |  if_ae	not	local01, #0
1ca24     A7 26 62 FC | 	wrlong	local01, fp
1ca28     60 03 90 FD | 	jmp	#LR__2343
1ca2c                 | LR__2332
1ca2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1ca2c     08 4E 05 F1 | 	add	fp, #8
1ca30     A7 26 02 FB | 	rdlong	local01, fp
1ca34     08 4E 85 F1 | 	sub	fp, #8
1ca38     1E 26 0E F2 | 	cmp	local01, #30 wz
1ca3c     14 4E 05 A1 |  if_e	add	fp, #20
1ca40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca44     14 4E 85 A1 |  if_e	sub	fp, #20
1ca48     16 2B 02 A6 |  if_e	mov	local03, local04
1ca4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ca50     38 00 90 5D |  if_ne	jmp	#LR__2333
1ca54     00 26 06 F6 | 	mov	local01, #0
1ca58     A7 28 02 FB | 	rdlong	local02, fp
1ca5c     0C 4E 05 F1 | 	add	fp, #12
1ca60     A7 12 02 FB | 	rdlong	arg01, fp
1ca64     0C 4E 85 F1 | 	sub	fp, #12
1ca68     E0 AE B0 FD | 	call	#__system___float_fromuns
1ca6c     FD 14 02 F6 | 	mov	arg02, result1
1ca70     14 13 02 F6 | 	mov	arg01, local02
1ca74     01 16 66 F6 | 	neg	arg03, #1
1ca78     08 B7 B0 FD | 	call	#__system___float_cmp
1ca7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ca80     00 26 26 36 |  if_ae	not	local01, #0
1ca84     A7 26 62 FC | 	wrlong	local01, fp
1ca88     00 03 90 FD | 	jmp	#LR__2343
1ca8c                 | LR__2333
1ca8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1ca8c     08 4E 05 F1 | 	add	fp, #8
1ca90     A7 26 02 FB | 	rdlong	local01, fp
1ca94     08 4E 85 F1 | 	sub	fp, #8
1ca98     1C 26 0E F2 | 	cmp	local01, #28 wz
1ca9c     14 4E 05 A1 |  if_e	add	fp, #20
1caa0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1caa4     14 4E 85 A1 |  if_e	sub	fp, #20
1caa8     16 2B 02 A6 |  if_e	mov	local03, local04
1caac     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cab0     44 00 90 5D |  if_ne	jmp	#LR__2334
1cab4     00 26 06 F6 | 	mov	local01, #0
1cab8     A7 12 02 FB | 	rdlong	arg01, fp
1cabc     09 13 52 F6 | 	abs	arg01, arg01 wc
1cac0     1F 2E C6 C9 |  if_b	decod	local05, #31
1cac4     00 2E 06 36 |  if_ae	mov	local05, #0
1cac8     80 AE B0 FD | 	call	#__system___float_fromuns
1cacc     17 FB 61 F5 | 	xor	result1, local05
1cad0     FD 12 02 F6 | 	mov	arg01, result1
1cad4     0C 4E 05 F1 | 	add	fp, #12
1cad8     A7 14 02 FB | 	rdlong	arg02, fp
1cadc     0C 4E 85 F1 | 	sub	fp, #12
1cae0     01 16 66 F6 | 	neg	arg03, #1
1cae4     9C B6 B0 FD | 	call	#__system___float_cmp
1cae8     00 FA 55 F2 | 	cmps	result1, #0 wc
1caec     00 26 26 36 |  if_ae	not	local01, #0
1caf0     A7 26 62 FC | 	wrlong	local01, fp
1caf4     94 02 90 FD | 	jmp	#LR__2343
1caf8                 | LR__2334
1caf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1caf8     08 4E 05 F1 | 	add	fp, #8
1cafc     A7 26 02 FB | 	rdlong	local01, fp
1cb00     08 4E 85 F1 | 	sub	fp, #8
1cb04     1C 26 0E F2 | 	cmp	local01, #28 wz
1cb08     14 4E 05 A1 |  if_e	add	fp, #20
1cb0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cb10     14 4E 85 A1 |  if_e	sub	fp, #20
1cb14     16 2B 02 A6 |  if_e	mov	local03, local04
1cb18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cb1c     24 00 90 5D |  if_ne	jmp	#LR__2335
1cb20     00 26 06 F6 | 	mov	local01, #0
1cb24     A7 28 02 FB | 	rdlong	local02, fp
1cb28     0C 4E 05 F1 | 	add	fp, #12
1cb2c     A7 2A 02 FB | 	rdlong	local03, fp
1cb30     0C 4E 85 F1 | 	sub	fp, #12
1cb34     15 29 52 F2 | 	cmps	local02, local03 wc
1cb38     01 26 66 36 |  if_ae	neg	local01, #1
1cb3c     A7 26 62 FC | 	wrlong	local01, fp
1cb40     48 02 90 FD | 	jmp	#LR__2343
1cb44                 | LR__2335
1cb44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1cb44     08 4E 05 F1 | 	add	fp, #8
1cb48     A7 26 02 FB | 	rdlong	local01, fp
1cb4c     08 4E 85 F1 | 	sub	fp, #8
1cb50     1C 26 0E F2 | 	cmp	local01, #28 wz
1cb54     14 4E 05 A1 |  if_e	add	fp, #20
1cb58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cb5c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb60     16 2B 02 A6 |  if_e	mov	local03, local04
1cb64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cb68     24 00 90 5D |  if_ne	jmp	#LR__2336
1cb6c     00 26 06 F6 | 	mov	local01, #0
1cb70     A7 28 02 FB | 	rdlong	local02, fp
1cb74     0C 4E 05 F1 | 	add	fp, #12
1cb78     A7 2A 02 FB | 	rdlong	local03, fp
1cb7c     0C 4E 85 F1 | 	sub	fp, #12
1cb80     15 29 52 F2 | 	cmps	local02, local03 wc
1cb84     01 26 66 36 |  if_ae	neg	local01, #1
1cb88     A7 26 62 FC | 	wrlong	local01, fp
1cb8c     FC 01 90 FD | 	jmp	#LR__2343
1cb90                 | LR__2336
1cb90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1cb90     08 4E 05 F1 | 	add	fp, #8
1cb94     A7 26 02 FB | 	rdlong	local01, fp
1cb98     08 4E 85 F1 | 	sub	fp, #8
1cb9c     1D 26 0E F2 | 	cmp	local01, #29 wz
1cba0     14 4E 05 A1 |  if_e	add	fp, #20
1cba4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cba8     14 4E 85 A1 |  if_e	sub	fp, #20
1cbac     16 2B 02 A6 |  if_e	mov	local03, local04
1cbb0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cbb4     34 00 90 5D |  if_ne	jmp	#LR__2337
1cbb8     00 26 06 F6 | 	mov	local01, #0
1cbbc     A7 12 02 FB | 	rdlong	arg01, fp
1cbc0     88 AD B0 FD | 	call	#__system___float_fromuns
1cbc4     FD 12 02 F6 | 	mov	arg01, result1
1cbc8     0C 4E 05 F1 | 	add	fp, #12
1cbcc     A7 14 02 FB | 	rdlong	arg02, fp
1cbd0     0C 4E 85 F1 | 	sub	fp, #12
1cbd4     01 16 66 F6 | 	neg	arg03, #1
1cbd8     A8 B5 B0 FD | 	call	#__system___float_cmp
1cbdc     00 FA 55 F2 | 	cmps	result1, #0 wc
1cbe0     00 26 26 36 |  if_ae	not	local01, #0
1cbe4     A7 26 62 FC | 	wrlong	local01, fp
1cbe8     A0 01 90 FD | 	jmp	#LR__2343
1cbec                 | LR__2337
1cbec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1cbec     08 4E 05 F1 | 	add	fp, #8
1cbf0     A7 26 02 FB | 	rdlong	local01, fp
1cbf4     08 4E 85 F1 | 	sub	fp, #8
1cbf8     1D 26 0E F2 | 	cmp	local01, #29 wz
1cbfc     14 4E 05 A1 |  if_e	add	fp, #20
1cc00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cc04     14 4E 85 A1 |  if_e	sub	fp, #20
1cc08     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1cc0c     24 00 90 5D |  if_ne	jmp	#LR__2338
1cc10     00 26 06 F6 | 	mov	local01, #0
1cc14     A7 28 02 FB | 	rdlong	local02, fp
1cc18     0C 4E 05 F1 | 	add	fp, #12
1cc1c     A7 2A 02 FB | 	rdlong	local03, fp
1cc20     0C 4E 85 F1 | 	sub	fp, #12
1cc24     15 29 52 F2 | 	cmps	local02, local03 wc
1cc28     01 26 66 36 |  if_ae	neg	local01, #1
1cc2c     A7 26 62 FC | 	wrlong	local01, fp
1cc30     58 01 90 FD | 	jmp	#LR__2343
1cc34                 | LR__2338
1cc34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1cc34     08 4E 05 F1 | 	add	fp, #8
1cc38     A7 26 02 FB | 	rdlong	local01, fp
1cc3c     08 4E 85 F1 | 	sub	fp, #8
1cc40     1D 26 0E F2 | 	cmp	local01, #29 wz
1cc44     14 4E 05 A1 |  if_e	add	fp, #20
1cc48     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cc4c     14 4E 85 A1 |  if_e	sub	fp, #20
1cc50     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cc54     24 00 90 5D |  if_ne	jmp	#LR__2339
1cc58     00 26 06 F6 | 	mov	local01, #0
1cc5c     A7 28 02 FB | 	rdlong	local02, fp
1cc60     0C 4E 05 F1 | 	add	fp, #12
1cc64     A7 2A 02 FB | 	rdlong	local03, fp
1cc68     0C 4E 85 F1 | 	sub	fp, #12
1cc6c     15 29 12 F2 | 	cmp	local02, local03 wc
1cc70     01 26 66 36 |  if_ae	neg	local01, #1
1cc74     A7 26 62 FC | 	wrlong	local01, fp
1cc78     10 01 90 FD | 	jmp	#LR__2343
1cc7c                 | LR__2339
1cc7c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1cc7c     08 4E 05 F1 | 	add	fp, #8
1cc80     A7 26 02 FB | 	rdlong	local01, fp
1cc84     08 4E 85 F1 | 	sub	fp, #8
1cc88     2B 26 0E F2 | 	cmp	local01, #43 wz
1cc8c     14 4E 05 A1 |  if_e	add	fp, #20
1cc90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cc94     14 4E 85 A1 |  if_e	sub	fp, #20
1cc98     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cc9c     30 00 90 5D |  if_ne	jmp	#LR__2340
1cca0     00 26 06 F6 | 	mov	local01, #0
1cca4     A7 12 02 FB | 	rdlong	arg01, fp
1cca8     58 00 BF FD | 	call	#_convertstring
1ccac     FD 12 02 F6 | 	mov	arg01, result1
1ccb0     0C 4E 05 F1 | 	add	fp, #12
1ccb4     A7 14 02 FB | 	rdlong	arg02, fp
1ccb8     0C 4E 85 F1 | 	sub	fp, #12
1ccbc     3C 82 B0 FD | 	call	#__system___string_cmp
1ccc0     00 FA 55 F2 | 	cmps	result1, #0 wc
1ccc4     00 26 26 36 |  if_ae	not	local01, #0
1ccc8     A7 26 62 FC | 	wrlong	local01, fp
1cccc     BC 00 90 FD | 	jmp	#LR__2343
1ccd0                 | LR__2340
1ccd0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ccd0     08 4E 05 F1 | 	add	fp, #8
1ccd4     A7 26 02 FB | 	rdlong	local01, fp
1ccd8     08 4E 85 F1 | 	sub	fp, #8
1ccdc     1F 26 0E F2 | 	cmp	local01, #31 wz
1cce0     14 4E 05 A1 |  if_e	add	fp, #20
1cce4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cce8     14 4E 85 A1 |  if_e	sub	fp, #20
1ccec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ccf0     34 00 90 5D |  if_ne	jmp	#LR__2341
1ccf4     00 26 06 F6 | 	mov	local01, #0
1ccf8     A7 28 02 FB | 	rdlong	local02, fp
1ccfc     0C 4E 05 F1 | 	add	fp, #12
1cd00     A7 12 02 FB | 	rdlong	arg01, fp
1cd04     0C 4E 85 F1 | 	sub	fp, #12
1cd08     F8 FF BE FD | 	call	#_convertstring
1cd0c     FD 14 02 F6 | 	mov	arg02, result1
1cd10     14 13 02 F6 | 	mov	arg01, local02
1cd14     E4 81 B0 FD | 	call	#__system___string_cmp
1cd18     00 FA 55 F2 | 	cmps	result1, #0 wc
1cd1c     00 26 26 36 |  if_ae	not	local01, #0
1cd20     A7 26 62 FC | 	wrlong	local01, fp
1cd24     64 00 90 FD | 	jmp	#LR__2343
1cd28                 | LR__2341
1cd28                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1cd28     08 4E 05 F1 | 	add	fp, #8
1cd2c     A7 26 02 FB | 	rdlong	local01, fp
1cd30     08 4E 85 F1 | 	sub	fp, #8
1cd34     2B 26 0E F2 | 	cmp	local01, #43 wz
1cd38     14 4E 05 A1 |  if_e	add	fp, #20
1cd3c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cd40     14 4E 85 A1 |  if_e	sub	fp, #20
1cd44     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1cd48     3C 00 90 5D |  if_ne	jmp	#LR__2342
1cd4c     00 26 06 F6 | 	mov	local01, #0
1cd50     A7 12 02 FB | 	rdlong	arg01, fp
1cd54     AC FF BE FD | 	call	#_convertstring
1cd58     FD 28 02 F6 | 	mov	local02, result1
1cd5c     0C 4E 05 F1 | 	add	fp, #12
1cd60     A7 12 02 FB | 	rdlong	arg01, fp
1cd64     0C 4E 85 F1 | 	sub	fp, #12
1cd68     98 FF BE FD | 	call	#_convertstring
1cd6c     FD 14 02 F6 | 	mov	arg02, result1
1cd70     14 13 02 F6 | 	mov	arg01, local02
1cd74     84 81 B0 FD | 	call	#__system___string_cmp
1cd78     00 FA 55 F2 | 	cmps	result1, #0 wc
1cd7c     00 26 26 36 |  if_ae	not	local01, #0
1cd80     A7 26 62 FC | 	wrlong	local01, fp
1cd84     04 00 90 FD | 	jmp	#LR__2343
1cd88                 | LR__2342
1cd88     A7 00 68 FC | 	wrlong	#0, fp
1cd8c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd8c                 | LR__2343
1cd8c     08 4E 05 F1 | 	add	fp, #8
1cd90     A7 38 68 FC | 	wrlong	#28, fp
1cd94     08 4E 85 F1 | 	sub	fp, #8
1cd98                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cd98     A7 26 0A FB | 	rdlong	local01, fp wz
1cd9c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1cda0     A7 12 02 F6 | 	mov	arg01, fp
1cda4     7C FE BE FD | 	call	#_push
1cda8     A7 F0 03 F6 | 	mov	ptra, fp
1cdac     B2 00 A0 FD | 	call	#popregs_
1cdb0                 | _do_ge_ret
1cdb0     2D 00 64 FD | 	ret
1cdb4                 | 
1cdb4                 | ' 
1cdb4                 | ' '--------------------------------- greater than (>)
1cdb4                 | ' 
1cdb4                 | ' sub do_gt
1cdb4                 | _do_gt
1cdb4     05 4A 05 F6 | 	mov	COUNT_, #5
1cdb8     A8 00 A0 FD | 	call	#pushregs_
1cdbc     18 F0 07 F1 | 	add	ptra, #24
1cdc0     C8 FD BE FD | 	call	#_pop
1cdc4     FD 26 02 F6 | 	mov	local01, result1
1cdc8     FE 28 02 F6 | 	mov	local02, result2
1cdcc     FF 2A 02 F6 | 	mov	local03, result3
1cdd0     0C 4E 05 F1 | 	add	fp, #12
1cdd4     A7 26 62 FC | 	wrlong	local01, fp
1cdd8     04 4E 05 F1 | 	add	fp, #4
1cddc     A7 28 62 FC | 	wrlong	local02, fp
1cde0     04 4E 05 F1 | 	add	fp, #4
1cde4     A7 2A 62 FC | 	wrlong	local03, fp
1cde8     14 4E 85 F1 | 	sub	fp, #20
1cdec     9C FD BE FD | 	call	#_pop
1cdf0     FF 2A 02 F6 | 	mov	local03, result3
1cdf4     A7 FA 61 FC | 	wrlong	result1, fp
1cdf8     04 4E 05 F1 | 	add	fp, #4
1cdfc     A7 FC 61 FC | 	wrlong	result2, fp
1ce00     04 4E 05 F1 | 	add	fp, #4
1ce04     A7 2A 62 FC | 	wrlong	local03, fp
1ce08                 | ' 
1ce08                 | ' t2=pop()
1ce08                 | ' t1=pop()
1ce08                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1ce08     08 4E 85 F1 | 	sub	fp, #8
1ce0c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ce10     14 4E 05 A1 |  if_e	add	fp, #20
1ce14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce18     14 4E 85 A1 |  if_e	sub	fp, #20
1ce1c     16 2B 02 A6 |  if_e	mov	local03, local04
1ce20     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ce24     28 00 90 5D |  if_ne	jmp	#LR__2350
1ce28     00 26 06 F6 | 	mov	local01, #0
1ce2c     A7 12 02 FB | 	rdlong	arg01, fp
1ce30     0C 4E 05 F1 | 	add	fp, #12
1ce34     A7 14 02 FB | 	rdlong	arg02, fp
1ce38     0C 4E 85 F1 | 	sub	fp, #12
1ce3c     BC 80 B0 FD | 	call	#__system___string_cmp
1ce40     01 FA 55 F2 | 	cmps	result1, #1 wc
1ce44     00 26 26 36 |  if_ae	not	local01, #0
1ce48     A7 26 62 FC | 	wrlong	local01, fp
1ce4c     20 04 90 FD | 	jmp	#LR__2363
1ce50                 | LR__2350
1ce50                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ce50     08 4E 05 F1 | 	add	fp, #8
1ce54     A7 26 02 FB | 	rdlong	local01, fp
1ce58     08 4E 85 F1 | 	sub	fp, #8
1ce5c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ce60     14 4E 05 A1 |  if_e	add	fp, #20
1ce64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce68     14 4E 85 A1 |  if_e	sub	fp, #20
1ce6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ce70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ce74     2C 00 90 5D |  if_ne	jmp	#LR__2351
1ce78     00 26 06 F6 | 	mov	local01, #0
1ce7c     A7 12 02 FB | 	rdlong	arg01, fp
1ce80     0C 4E 05 F1 | 	add	fp, #12
1ce84     A7 14 02 FB | 	rdlong	arg02, fp
1ce88     0C 4E 85 F1 | 	sub	fp, #12
1ce8c     01 16 66 F6 | 	neg	arg03, #1
1ce90     F0 B2 B0 FD | 	call	#__system___float_cmp
1ce94     01 FA 55 F2 | 	cmps	result1, #1 wc
1ce98     00 26 26 36 |  if_ae	not	local01, #0
1ce9c     A7 26 62 FC | 	wrlong	local01, fp
1cea0     CC 03 90 FD | 	jmp	#LR__2363
1cea4                 | LR__2351
1cea4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1cea4     08 4E 05 F1 | 	add	fp, #8
1cea8     A7 26 02 FB | 	rdlong	local01, fp
1ceac     08 4E 85 F1 | 	sub	fp, #8
1ceb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ceb4     14 4E 05 A1 |  if_e	add	fp, #20
1ceb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cebc     14 4E 85 A1 |  if_e	sub	fp, #20
1cec0     16 2B 02 A6 |  if_e	mov	local03, local04
1cec4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cec8     48 00 90 5D |  if_ne	jmp	#LR__2352
1cecc     00 26 06 F6 | 	mov	local01, #0
1ced0     A7 28 02 FB | 	rdlong	local02, fp
1ced4     0C 4E 05 F1 | 	add	fp, #12
1ced8     A7 12 02 FB | 	rdlong	arg01, fp
1cedc     0C 4E 85 F1 | 	sub	fp, #12
1cee0     09 13 52 F6 | 	abs	arg01, arg01 wc
1cee4     1F 2E C6 C9 |  if_b	decod	local05, #31
1cee8     00 2E 06 36 |  if_ae	mov	local05, #0
1ceec     5C AA B0 FD | 	call	#__system___float_fromuns
1cef0     17 FB 61 F5 | 	xor	result1, local05
1cef4     FD 14 02 F6 | 	mov	arg02, result1
1cef8     14 13 02 F6 | 	mov	arg01, local02
1cefc     01 16 66 F6 | 	neg	arg03, #1
1cf00     80 B2 B0 FD | 	call	#__system___float_cmp
1cf04     01 FA 55 F2 | 	cmps	result1, #1 wc
1cf08     00 26 26 36 |  if_ae	not	local01, #0
1cf0c     A7 26 62 FC | 	wrlong	local01, fp
1cf10     5C 03 90 FD | 	jmp	#LR__2363
1cf14                 | LR__2352
1cf14                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1cf14     08 4E 05 F1 | 	add	fp, #8
1cf18     A7 26 02 FB | 	rdlong	local01, fp
1cf1c     08 4E 85 F1 | 	sub	fp, #8
1cf20     1E 26 0E F2 | 	cmp	local01, #30 wz
1cf24     14 4E 05 A1 |  if_e	add	fp, #20
1cf28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cf2c     14 4E 85 A1 |  if_e	sub	fp, #20
1cf30     16 2B 02 A6 |  if_e	mov	local03, local04
1cf34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cf38     38 00 90 5D |  if_ne	jmp	#LR__2353
1cf3c     00 26 06 F6 | 	mov	local01, #0
1cf40     A7 28 02 FB | 	rdlong	local02, fp
1cf44     0C 4E 05 F1 | 	add	fp, #12
1cf48     A7 12 02 FB | 	rdlong	arg01, fp
1cf4c     0C 4E 85 F1 | 	sub	fp, #12
1cf50     F8 A9 B0 FD | 	call	#__system___float_fromuns
1cf54     FD 14 02 F6 | 	mov	arg02, result1
1cf58     14 13 02 F6 | 	mov	arg01, local02
1cf5c     01 16 66 F6 | 	neg	arg03, #1
1cf60     20 B2 B0 FD | 	call	#__system___float_cmp
1cf64     01 FA 55 F2 | 	cmps	result1, #1 wc
1cf68     00 26 26 36 |  if_ae	not	local01, #0
1cf6c     A7 26 62 FC | 	wrlong	local01, fp
1cf70     FC 02 90 FD | 	jmp	#LR__2363
1cf74                 | LR__2353
1cf74                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1cf74     08 4E 05 F1 | 	add	fp, #8
1cf78     A7 26 02 FB | 	rdlong	local01, fp
1cf7c     08 4E 85 F1 | 	sub	fp, #8
1cf80     1C 26 0E F2 | 	cmp	local01, #28 wz
1cf84     14 4E 05 A1 |  if_e	add	fp, #20
1cf88     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cf8c     14 4E 85 A1 |  if_e	sub	fp, #20
1cf90     16 2B 02 A6 |  if_e	mov	local03, local04
1cf94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cf98     44 00 90 5D |  if_ne	jmp	#LR__2354
1cf9c     00 26 06 F6 | 	mov	local01, #0
1cfa0     A7 12 02 FB | 	rdlong	arg01, fp
1cfa4     09 13 52 F6 | 	abs	arg01, arg01 wc
1cfa8     1F 2E C6 C9 |  if_b	decod	local05, #31
1cfac     00 2E 06 36 |  if_ae	mov	local05, #0
1cfb0     98 A9 B0 FD | 	call	#__system___float_fromuns
1cfb4     17 FB 61 F5 | 	xor	result1, local05
1cfb8     FD 12 02 F6 | 	mov	arg01, result1
1cfbc     0C 4E 05 F1 | 	add	fp, #12
1cfc0     A7 14 02 FB | 	rdlong	arg02, fp
1cfc4     0C 4E 85 F1 | 	sub	fp, #12
1cfc8     01 16 66 F6 | 	neg	arg03, #1
1cfcc     B4 B1 B0 FD | 	call	#__system___float_cmp
1cfd0     01 FA 55 F2 | 	cmps	result1, #1 wc
1cfd4     00 26 26 36 |  if_ae	not	local01, #0
1cfd8     A7 26 62 FC | 	wrlong	local01, fp
1cfdc     90 02 90 FD | 	jmp	#LR__2363
1cfe0                 | LR__2354
1cfe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1cfe0     08 4E 05 F1 | 	add	fp, #8
1cfe4     A7 26 02 FB | 	rdlong	local01, fp
1cfe8     08 4E 85 F1 | 	sub	fp, #8
1cfec     1C 26 0E F2 | 	cmp	local01, #28 wz
1cff0     14 4E 05 A1 |  if_e	add	fp, #20
1cff4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cff8     14 4E 85 A1 |  if_e	sub	fp, #20
1cffc     16 2B 02 A6 |  if_e	mov	local03, local04
1d000     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d004     24 00 90 5D |  if_ne	jmp	#LR__2355
1d008     00 26 06 F6 | 	mov	local01, #0
1d00c     A7 28 02 FB | 	rdlong	local02, fp
1d010     0C 4E 05 F1 | 	add	fp, #12
1d014     A7 2A 02 FB | 	rdlong	local03, fp
1d018     0C 4E 85 F1 | 	sub	fp, #12
1d01c     15 29 5A F2 | 	cmps	local02, local03 wcz
1d020     01 26 66 16 |  if_a	neg	local01, #1
1d024     A7 26 62 FC | 	wrlong	local01, fp
1d028     44 02 90 FD | 	jmp	#LR__2363
1d02c                 | LR__2355
1d02c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1d02c     08 4E 05 F1 | 	add	fp, #8
1d030     A7 26 02 FB | 	rdlong	local01, fp
1d034     08 4E 85 F1 | 	sub	fp, #8
1d038     1C 26 0E F2 | 	cmp	local01, #28 wz
1d03c     14 4E 05 A1 |  if_e	add	fp, #20
1d040     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d044     14 4E 85 A1 |  if_e	sub	fp, #20
1d048     16 2B 02 A6 |  if_e	mov	local03, local04
1d04c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d050     24 00 90 5D |  if_ne	jmp	#LR__2356
1d054     00 26 06 F6 | 	mov	local01, #0
1d058     A7 28 02 FB | 	rdlong	local02, fp
1d05c     0C 4E 05 F1 | 	add	fp, #12
1d060     A7 2A 02 FB | 	rdlong	local03, fp
1d064     0C 4E 85 F1 | 	sub	fp, #12
1d068     15 29 5A F2 | 	cmps	local02, local03 wcz
1d06c     01 26 66 16 |  if_a	neg	local01, #1
1d070     A7 26 62 FC | 	wrlong	local01, fp
1d074     F8 01 90 FD | 	jmp	#LR__2363
1d078                 | LR__2356
1d078                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1d078     08 4E 05 F1 | 	add	fp, #8
1d07c     A7 26 02 FB | 	rdlong	local01, fp
1d080     08 4E 85 F1 | 	sub	fp, #8
1d084     1D 26 0E F2 | 	cmp	local01, #29 wz
1d088     14 4E 05 A1 |  if_e	add	fp, #20
1d08c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d090     14 4E 85 A1 |  if_e	sub	fp, #20
1d094     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d098     34 00 90 5D |  if_ne	jmp	#LR__2357
1d09c     00 26 06 F6 | 	mov	local01, #0
1d0a0     A7 12 02 FB | 	rdlong	arg01, fp
1d0a4     A4 A8 B0 FD | 	call	#__system___float_fromuns
1d0a8     FD 12 02 F6 | 	mov	arg01, result1
1d0ac     0C 4E 05 F1 | 	add	fp, #12
1d0b0     A7 14 02 FB | 	rdlong	arg02, fp
1d0b4     0C 4E 85 F1 | 	sub	fp, #12
1d0b8     01 16 66 F6 | 	neg	arg03, #1
1d0bc     C4 B0 B0 FD | 	call	#__system___float_cmp
1d0c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1d0c4     00 26 26 36 |  if_ae	not	local01, #0
1d0c8     A7 26 62 FC | 	wrlong	local01, fp
1d0cc     A0 01 90 FD | 	jmp	#LR__2363
1d0d0                 | LR__2357
1d0d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1d0d0     08 4E 05 F1 | 	add	fp, #8
1d0d4     A7 26 02 FB | 	rdlong	local01, fp
1d0d8     08 4E 85 F1 | 	sub	fp, #8
1d0dc     1D 26 0E F2 | 	cmp	local01, #29 wz
1d0e0     14 4E 05 A1 |  if_e	add	fp, #20
1d0e4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d0e8     14 4E 85 A1 |  if_e	sub	fp, #20
1d0ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d0f0     24 00 90 5D |  if_ne	jmp	#LR__2358
1d0f4     00 26 06 F6 | 	mov	local01, #0
1d0f8     A7 28 02 FB | 	rdlong	local02, fp
1d0fc     0C 4E 05 F1 | 	add	fp, #12
1d100     A7 2A 02 FB | 	rdlong	local03, fp
1d104     0C 4E 85 F1 | 	sub	fp, #12
1d108     15 29 5A F2 | 	cmps	local02, local03 wcz
1d10c     01 26 66 16 |  if_a	neg	local01, #1
1d110     A7 26 62 FC | 	wrlong	local01, fp
1d114     58 01 90 FD | 	jmp	#LR__2363
1d118                 | LR__2358
1d118                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1d118     08 4E 05 F1 | 	add	fp, #8
1d11c     A7 26 02 FB | 	rdlong	local01, fp
1d120     08 4E 85 F1 | 	sub	fp, #8
1d124     1D 26 0E F2 | 	cmp	local01, #29 wz
1d128     14 4E 05 A1 |  if_e	add	fp, #20
1d12c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d130     14 4E 85 A1 |  if_e	sub	fp, #20
1d134     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d138     24 00 90 5D |  if_ne	jmp	#LR__2359
1d13c     00 26 06 F6 | 	mov	local01, #0
1d140     A7 28 02 FB | 	rdlong	local02, fp
1d144     0C 4E 05 F1 | 	add	fp, #12
1d148     A7 2A 02 FB | 	rdlong	local03, fp
1d14c     0C 4E 85 F1 | 	sub	fp, #12
1d150     15 29 1A F2 | 	cmp	local02, local03 wcz
1d154     01 26 66 16 |  if_a	neg	local01, #1
1d158     A7 26 62 FC | 	wrlong	local01, fp
1d15c     10 01 90 FD | 	jmp	#LR__2363
1d160                 | LR__2359
1d160                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1d160     08 4E 05 F1 | 	add	fp, #8
1d164     A7 26 02 FB | 	rdlong	local01, fp
1d168     08 4E 85 F1 | 	sub	fp, #8
1d16c     2B 26 0E F2 | 	cmp	local01, #43 wz
1d170     14 4E 05 A1 |  if_e	add	fp, #20
1d174     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d178     14 4E 85 A1 |  if_e	sub	fp, #20
1d17c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d180     30 00 90 5D |  if_ne	jmp	#LR__2360
1d184     00 26 06 F6 | 	mov	local01, #0
1d188     A7 12 02 FB | 	rdlong	arg01, fp
1d18c     74 FB BE FD | 	call	#_convertstring
1d190     FD 12 02 F6 | 	mov	arg01, result1
1d194     0C 4E 05 F1 | 	add	fp, #12
1d198     A7 14 02 FB | 	rdlong	arg02, fp
1d19c     0C 4E 85 F1 | 	sub	fp, #12
1d1a0     58 7D B0 FD | 	call	#__system___string_cmp
1d1a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d1a8     00 26 26 36 |  if_ae	not	local01, #0
1d1ac     A7 26 62 FC | 	wrlong	local01, fp
1d1b0     BC 00 90 FD | 	jmp	#LR__2363
1d1b4                 | LR__2360
1d1b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1d1b4     08 4E 05 F1 | 	add	fp, #8
1d1b8     A7 26 02 FB | 	rdlong	local01, fp
1d1bc     08 4E 85 F1 | 	sub	fp, #8
1d1c0     1F 26 0E F2 | 	cmp	local01, #31 wz
1d1c4     14 4E 05 A1 |  if_e	add	fp, #20
1d1c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d1cc     14 4E 85 A1 |  if_e	sub	fp, #20
1d1d0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d1d4     34 00 90 5D |  if_ne	jmp	#LR__2361
1d1d8     00 26 06 F6 | 	mov	local01, #0
1d1dc     A7 28 02 FB | 	rdlong	local02, fp
1d1e0     0C 4E 05 F1 | 	add	fp, #12
1d1e4     A7 12 02 FB | 	rdlong	arg01, fp
1d1e8     0C 4E 85 F1 | 	sub	fp, #12
1d1ec     14 FB BE FD | 	call	#_convertstring
1d1f0     FD 14 02 F6 | 	mov	arg02, result1
1d1f4     14 13 02 F6 | 	mov	arg01, local02
1d1f8     00 7D B0 FD | 	call	#__system___string_cmp
1d1fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1d200     00 26 26 36 |  if_ae	not	local01, #0
1d204     A7 26 62 FC | 	wrlong	local01, fp
1d208     64 00 90 FD | 	jmp	#LR__2363
1d20c                 | LR__2361
1d20c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1d20c     08 4E 05 F1 | 	add	fp, #8
1d210     A7 26 02 FB | 	rdlong	local01, fp
1d214     08 4E 85 F1 | 	sub	fp, #8
1d218     2B 26 0E F2 | 	cmp	local01, #43 wz
1d21c     14 4E 05 A1 |  if_e	add	fp, #20
1d220     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d224     14 4E 85 A1 |  if_e	sub	fp, #20
1d228     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d22c     3C 00 90 5D |  if_ne	jmp	#LR__2362
1d230     00 26 06 F6 | 	mov	local01, #0
1d234     A7 12 02 FB | 	rdlong	arg01, fp
1d238     C8 FA BE FD | 	call	#_convertstring
1d23c     FD 28 02 F6 | 	mov	local02, result1
1d240     0C 4E 05 F1 | 	add	fp, #12
1d244     A7 12 02 FB | 	rdlong	arg01, fp
1d248     0C 4E 85 F1 | 	sub	fp, #12
1d24c     B4 FA BE FD | 	call	#_convertstring
1d250     FD 14 02 F6 | 	mov	arg02, result1
1d254     14 13 02 F6 | 	mov	arg01, local02
1d258     A0 7C B0 FD | 	call	#__system___string_cmp
1d25c     01 FA 55 F2 | 	cmps	result1, #1 wc
1d260     00 26 26 36 |  if_ae	not	local01, #0
1d264     A7 26 62 FC | 	wrlong	local01, fp
1d268     04 00 90 FD | 	jmp	#LR__2363
1d26c                 | LR__2362
1d26c     A7 00 68 FC | 	wrlong	#0, fp
1d270                 | LR__2363
1d270     08 4E 05 F1 | 	add	fp, #8
1d274     A7 38 68 FC | 	wrlong	#28, fp
1d278     08 4E 85 F1 | 	sub	fp, #8
1d27c                 | ' t1.result.uresult=0
1d27c                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d27c     A7 26 0A FB | 	rdlong	local01, fp wz
1d280     A7 02 68 5C |  if_ne	wrlong	#1, fp
1d284     A7 12 02 F6 | 	mov	arg01, fp
1d288     98 F9 BE FD | 	call	#_push
1d28c     A7 F0 03 F6 | 	mov	ptra, fp
1d290     B2 00 A0 FD | 	call	#popregs_
1d294                 | _do_gt_ret
1d294     2D 00 64 FD | 	ret
1d298                 | 
1d298                 | ' 
1d298                 | ' '--------------------------------- less or equal (<=)
1d298                 | ' 
1d298                 | ' sub do_le
1d298                 | _do_le
1d298     05 4A 05 F6 | 	mov	COUNT_, #5
1d29c     A8 00 A0 FD | 	call	#pushregs_
1d2a0     18 F0 07 F1 | 	add	ptra, #24
1d2a4     E4 F8 BE FD | 	call	#_pop
1d2a8     FD 26 02 F6 | 	mov	local01, result1
1d2ac     FE 28 02 F6 | 	mov	local02, result2
1d2b0     FF 2A 02 F6 | 	mov	local03, result3
1d2b4     0C 4E 05 F1 | 	add	fp, #12
1d2b8     A7 26 62 FC | 	wrlong	local01, fp
1d2bc     04 4E 05 F1 | 	add	fp, #4
1d2c0     A7 28 62 FC | 	wrlong	local02, fp
1d2c4     04 4E 05 F1 | 	add	fp, #4
1d2c8     A7 2A 62 FC | 	wrlong	local03, fp
1d2cc     14 4E 85 F1 | 	sub	fp, #20
1d2d0     B8 F8 BE FD | 	call	#_pop
1d2d4     FF 2A 02 F6 | 	mov	local03, result3
1d2d8     A7 FA 61 FC | 	wrlong	result1, fp
1d2dc     04 4E 05 F1 | 	add	fp, #4
1d2e0     A7 FC 61 FC | 	wrlong	result2, fp
1d2e4     04 4E 05 F1 | 	add	fp, #4
1d2e8     A7 2A 62 FC | 	wrlong	local03, fp
1d2ec                 | ' 
1d2ec                 | ' t2=pop()
1d2ec                 | ' t1=pop()
1d2ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1d2ec     08 4E 85 F1 | 	sub	fp, #8
1d2f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d2f4     14 4E 05 A1 |  if_e	add	fp, #20
1d2f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d2fc     14 4E 85 A1 |  if_e	sub	fp, #20
1d300     16 2B 02 A6 |  if_e	mov	local03, local04
1d304     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d308     28 00 90 5D |  if_ne	jmp	#LR__2370
1d30c     00 26 06 F6 | 	mov	local01, #0
1d310     A7 12 02 FB | 	rdlong	arg01, fp
1d314     0C 4E 05 F1 | 	add	fp, #12
1d318     A7 14 02 FB | 	rdlong	arg02, fp
1d31c     0C 4E 85 F1 | 	sub	fp, #12
1d320     D8 7B B0 FD | 	call	#__system___string_cmp
1d324     01 FA 55 F2 | 	cmps	result1, #1 wc
1d328     00 26 26 C6 |  if_b	not	local01, #0
1d32c     A7 26 62 FC | 	wrlong	local01, fp
1d330     20 04 90 FD | 	jmp	#LR__2383
1d334                 | LR__2370
1d334                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1d334     08 4E 05 F1 | 	add	fp, #8
1d338     A7 26 02 FB | 	rdlong	local01, fp
1d33c     08 4E 85 F1 | 	sub	fp, #8
1d340     1E 26 0E F2 | 	cmp	local01, #30 wz
1d344     14 4E 05 A1 |  if_e	add	fp, #20
1d348     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d34c     14 4E 85 A1 |  if_e	sub	fp, #20
1d350     16 2B 02 A6 |  if_e	mov	local03, local04
1d354     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d358     2C 00 90 5D |  if_ne	jmp	#LR__2371
1d35c     00 26 06 F6 | 	mov	local01, #0
1d360     A7 12 02 FB | 	rdlong	arg01, fp
1d364     0C 4E 05 F1 | 	add	fp, #12
1d368     A7 14 02 FB | 	rdlong	arg02, fp
1d36c     0C 4E 85 F1 | 	sub	fp, #12
1d370     01 16 06 F6 | 	mov	arg03, #1
1d374     0C AE B0 FD | 	call	#__system___float_cmp
1d378     01 FA 55 F2 | 	cmps	result1, #1 wc
1d37c     00 26 26 C6 |  if_b	not	local01, #0
1d380     A7 26 62 FC | 	wrlong	local01, fp
1d384     CC 03 90 FD | 	jmp	#LR__2383
1d388                 | LR__2371
1d388                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1d388     08 4E 05 F1 | 	add	fp, #8
1d38c     A7 26 02 FB | 	rdlong	local01, fp
1d390     08 4E 85 F1 | 	sub	fp, #8
1d394     1E 26 0E F2 | 	cmp	local01, #30 wz
1d398     14 4E 05 A1 |  if_e	add	fp, #20
1d39c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3a0     14 4E 85 A1 |  if_e	sub	fp, #20
1d3a4     16 2B 02 A6 |  if_e	mov	local03, local04
1d3a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d3ac     48 00 90 5D |  if_ne	jmp	#LR__2372
1d3b0     00 26 06 F6 | 	mov	local01, #0
1d3b4     A7 28 02 FB | 	rdlong	local02, fp
1d3b8     0C 4E 05 F1 | 	add	fp, #12
1d3bc     A7 12 02 FB | 	rdlong	arg01, fp
1d3c0     0C 4E 85 F1 | 	sub	fp, #12
1d3c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1d3c8     1F 2E C6 C9 |  if_b	decod	local05, #31
1d3cc     00 2E 06 36 |  if_ae	mov	local05, #0
1d3d0     78 A5 B0 FD | 	call	#__system___float_fromuns
1d3d4     17 FB 61 F5 | 	xor	result1, local05
1d3d8     FD 14 02 F6 | 	mov	arg02, result1
1d3dc     14 13 02 F6 | 	mov	arg01, local02
1d3e0     01 16 06 F6 | 	mov	arg03, #1
1d3e4     9C AD B0 FD | 	call	#__system___float_cmp
1d3e8     01 FA 55 F2 | 	cmps	result1, #1 wc
1d3ec     00 26 26 C6 |  if_b	not	local01, #0
1d3f0     A7 26 62 FC | 	wrlong	local01, fp
1d3f4     5C 03 90 FD | 	jmp	#LR__2383
1d3f8                 | LR__2372
1d3f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1d3f8     08 4E 05 F1 | 	add	fp, #8
1d3fc     A7 26 02 FB | 	rdlong	local01, fp
1d400     08 4E 85 F1 | 	sub	fp, #8
1d404     1E 26 0E F2 | 	cmp	local01, #30 wz
1d408     14 4E 05 A1 |  if_e	add	fp, #20
1d40c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d410     14 4E 85 A1 |  if_e	sub	fp, #20
1d414     16 2B 02 A6 |  if_e	mov	local03, local04
1d418     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d41c     38 00 90 5D |  if_ne	jmp	#LR__2373
1d420     00 26 06 F6 | 	mov	local01, #0
1d424     A7 28 02 FB | 	rdlong	local02, fp
1d428     0C 4E 05 F1 | 	add	fp, #12
1d42c     A7 12 02 FB | 	rdlong	arg01, fp
1d430     0C 4E 85 F1 | 	sub	fp, #12
1d434     14 A5 B0 FD | 	call	#__system___float_fromuns
1d438     FD 14 02 F6 | 	mov	arg02, result1
1d43c     14 13 02 F6 | 	mov	arg01, local02
1d440     01 16 06 F6 | 	mov	arg03, #1
1d444     3C AD B0 FD | 	call	#__system___float_cmp
1d448     01 FA 55 F2 | 	cmps	result1, #1 wc
1d44c     00 26 26 C6 |  if_b	not	local01, #0
1d450     A7 26 62 FC | 	wrlong	local01, fp
1d454     FC 02 90 FD | 	jmp	#LR__2383
1d458                 | LR__2373
1d458                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1d458     08 4E 05 F1 | 	add	fp, #8
1d45c     A7 26 02 FB | 	rdlong	local01, fp
1d460     08 4E 85 F1 | 	sub	fp, #8
1d464     1C 26 0E F2 | 	cmp	local01, #28 wz
1d468     14 4E 05 A1 |  if_e	add	fp, #20
1d46c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d470     14 4E 85 A1 |  if_e	sub	fp, #20
1d474     16 2B 02 A6 |  if_e	mov	local03, local04
1d478     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d47c     44 00 90 5D |  if_ne	jmp	#LR__2374
1d480     00 26 06 F6 | 	mov	local01, #0
1d484     A7 12 02 FB | 	rdlong	arg01, fp
1d488     09 13 52 F6 | 	abs	arg01, arg01 wc
1d48c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d490     00 2E 06 36 |  if_ae	mov	local05, #0
1d494     B4 A4 B0 FD | 	call	#__system___float_fromuns
1d498     17 FB 61 F5 | 	xor	result1, local05
1d49c     FD 12 02 F6 | 	mov	arg01, result1
1d4a0     0C 4E 05 F1 | 	add	fp, #12
1d4a4     A7 14 02 FB | 	rdlong	arg02, fp
1d4a8     0C 4E 85 F1 | 	sub	fp, #12
1d4ac     01 16 06 F6 | 	mov	arg03, #1
1d4b0     D0 AC B0 FD | 	call	#__system___float_cmp
1d4b4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d4b8     00 26 26 C6 |  if_b	not	local01, #0
1d4bc     A7 26 62 FC | 	wrlong	local01, fp
1d4c0     90 02 90 FD | 	jmp	#LR__2383
1d4c4                 | LR__2374
1d4c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1d4c4     08 4E 05 F1 | 	add	fp, #8
1d4c8     A7 26 02 FB | 	rdlong	local01, fp
1d4cc     08 4E 85 F1 | 	sub	fp, #8
1d4d0     1C 26 0E F2 | 	cmp	local01, #28 wz
1d4d4     14 4E 05 A1 |  if_e	add	fp, #20
1d4d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d4dc     14 4E 85 A1 |  if_e	sub	fp, #20
1d4e0     16 2B 02 A6 |  if_e	mov	local03, local04
1d4e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d4e8     24 00 90 5D |  if_ne	jmp	#LR__2375
1d4ec     00 26 06 F6 | 	mov	local01, #0
1d4f0     A7 28 02 FB | 	rdlong	local02, fp
1d4f4     0C 4E 05 F1 | 	add	fp, #12
1d4f8     A7 2A 02 FB | 	rdlong	local03, fp
1d4fc     0C 4E 85 F1 | 	sub	fp, #12
1d500     15 29 5A F2 | 	cmps	local02, local03 wcz
1d504     01 26 66 E6 |  if_be	neg	local01, #1
1d508     A7 26 62 FC | 	wrlong	local01, fp
1d50c     44 02 90 FD | 	jmp	#LR__2383
1d510                 | LR__2375
1d510                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1d510     08 4E 05 F1 | 	add	fp, #8
1d514     A7 26 02 FB | 	rdlong	local01, fp
1d518     08 4E 85 F1 | 	sub	fp, #8
1d51c     1C 26 0E F2 | 	cmp	local01, #28 wz
1d520     14 4E 05 A1 |  if_e	add	fp, #20
1d524     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d528     14 4E 85 A1 |  if_e	sub	fp, #20
1d52c     16 2B 02 A6 |  if_e	mov	local03, local04
1d530     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d534     24 00 90 5D |  if_ne	jmp	#LR__2376
1d538     00 26 06 F6 | 	mov	local01, #0
1d53c     A7 28 02 FB | 	rdlong	local02, fp
1d540     0C 4E 05 F1 | 	add	fp, #12
1d544     A7 2A 02 FB | 	rdlong	local03, fp
1d548     0C 4E 85 F1 | 	sub	fp, #12
1d54c     15 29 5A F2 | 	cmps	local02, local03 wcz
1d550     01 26 66 E6 |  if_be	neg	local01, #1
1d554     A7 26 62 FC | 	wrlong	local01, fp
1d558     F8 01 90 FD | 	jmp	#LR__2383
1d55c                 | LR__2376
1d55c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1d55c     08 4E 05 F1 | 	add	fp, #8
1d560     A7 26 02 FB | 	rdlong	local01, fp
1d564     08 4E 85 F1 | 	sub	fp, #8
1d568     1D 26 0E F2 | 	cmp	local01, #29 wz
1d56c     14 4E 05 A1 |  if_e	add	fp, #20
1d570     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d574     14 4E 85 A1 |  if_e	sub	fp, #20
1d578     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d57c     34 00 90 5D |  if_ne	jmp	#LR__2377
1d580     00 26 06 F6 | 	mov	local01, #0
1d584     A7 12 02 FB | 	rdlong	arg01, fp
1d588     C0 A3 B0 FD | 	call	#__system___float_fromuns
1d58c     FD 12 02 F6 | 	mov	arg01, result1
1d590     0C 4E 05 F1 | 	add	fp, #12
1d594     A7 14 02 FB | 	rdlong	arg02, fp
1d598     0C 4E 85 F1 | 	sub	fp, #12
1d59c     01 16 06 F6 | 	mov	arg03, #1
1d5a0     E0 AB B0 FD | 	call	#__system___float_cmp
1d5a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1d5a8     00 26 26 C6 |  if_b	not	local01, #0
1d5ac     A7 26 62 FC | 	wrlong	local01, fp
1d5b0     A0 01 90 FD | 	jmp	#LR__2383
1d5b4                 | LR__2377
1d5b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1d5b4     08 4E 05 F1 | 	add	fp, #8
1d5b8     A7 26 02 FB | 	rdlong	local01, fp
1d5bc     08 4E 85 F1 | 	sub	fp, #8
1d5c0     1D 26 0E F2 | 	cmp	local01, #29 wz
1d5c4     14 4E 05 A1 |  if_e	add	fp, #20
1d5c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5cc     14 4E 85 A1 |  if_e	sub	fp, #20
1d5d0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d5d4     24 00 90 5D |  if_ne	jmp	#LR__2378
1d5d8     00 26 06 F6 | 	mov	local01, #0
1d5dc     A7 28 02 FB | 	rdlong	local02, fp
1d5e0     0C 4E 05 F1 | 	add	fp, #12
1d5e4     A7 2A 02 FB | 	rdlong	local03, fp
1d5e8     0C 4E 85 F1 | 	sub	fp, #12
1d5ec     15 29 5A F2 | 	cmps	local02, local03 wcz
1d5f0     01 26 66 E6 |  if_be	neg	local01, #1
1d5f4     A7 26 62 FC | 	wrlong	local01, fp
1d5f8     58 01 90 FD | 	jmp	#LR__2383
1d5fc                 | LR__2378
1d5fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1d5fc     08 4E 05 F1 | 	add	fp, #8
1d600     A7 26 02 FB | 	rdlong	local01, fp
1d604     08 4E 85 F1 | 	sub	fp, #8
1d608     1D 26 0E F2 | 	cmp	local01, #29 wz
1d60c     14 4E 05 A1 |  if_e	add	fp, #20
1d610     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d614     14 4E 85 A1 |  if_e	sub	fp, #20
1d618     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d61c     24 00 90 5D |  if_ne	jmp	#LR__2379
1d620     00 26 06 F6 | 	mov	local01, #0
1d624     A7 28 02 FB | 	rdlong	local02, fp
1d628     0C 4E 05 F1 | 	add	fp, #12
1d62c     A7 2A 02 FB | 	rdlong	local03, fp
1d630     0C 4E 85 F1 | 	sub	fp, #12
1d634     15 29 1A F2 | 	cmp	local02, local03 wcz
1d638     01 26 66 E6 |  if_be	neg	local01, #1
1d63c     A7 26 62 FC | 	wrlong	local01, fp
1d640     10 01 90 FD | 	jmp	#LR__2383
1d644                 | LR__2379
1d644                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1d644     08 4E 05 F1 | 	add	fp, #8
1d648     A7 26 02 FB | 	rdlong	local01, fp
1d64c     08 4E 85 F1 | 	sub	fp, #8
1d650     2B 26 0E F2 | 	cmp	local01, #43 wz
1d654     14 4E 05 A1 |  if_e	add	fp, #20
1d658     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d65c     14 4E 85 A1 |  if_e	sub	fp, #20
1d660     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d664     30 00 90 5D |  if_ne	jmp	#LR__2380
1d668     00 26 06 F6 | 	mov	local01, #0
1d66c     A7 12 02 FB | 	rdlong	arg01, fp
1d670     90 F6 BE FD | 	call	#_convertstring
1d674     FD 12 02 F6 | 	mov	arg01, result1
1d678     0C 4E 05 F1 | 	add	fp, #12
1d67c     A7 14 02 FB | 	rdlong	arg02, fp
1d680     0C 4E 85 F1 | 	sub	fp, #12
1d684     74 78 B0 FD | 	call	#__system___string_cmp
1d688     01 FA 55 F2 | 	cmps	result1, #1 wc
1d68c     00 26 26 C6 |  if_b	not	local01, #0
1d690     A7 26 62 FC | 	wrlong	local01, fp
1d694     BC 00 90 FD | 	jmp	#LR__2383
1d698                 | LR__2380
1d698                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1d698     08 4E 05 F1 | 	add	fp, #8
1d69c     A7 26 02 FB | 	rdlong	local01, fp
1d6a0     08 4E 85 F1 | 	sub	fp, #8
1d6a4     1F 26 0E F2 | 	cmp	local01, #31 wz
1d6a8     14 4E 05 A1 |  if_e	add	fp, #20
1d6ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1d6b4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d6b8     34 00 90 5D |  if_ne	jmp	#LR__2381
1d6bc     00 26 06 F6 | 	mov	local01, #0
1d6c0     A7 28 02 FB | 	rdlong	local02, fp
1d6c4     0C 4E 05 F1 | 	add	fp, #12
1d6c8     A7 12 02 FB | 	rdlong	arg01, fp
1d6cc     0C 4E 85 F1 | 	sub	fp, #12
1d6d0     30 F6 BE FD | 	call	#_convertstring
1d6d4     FD 14 02 F6 | 	mov	arg02, result1
1d6d8     14 13 02 F6 | 	mov	arg01, local02
1d6dc     1C 78 B0 FD | 	call	#__system___string_cmp
1d6e0     01 FA 55 F2 | 	cmps	result1, #1 wc
1d6e4     00 26 26 C6 |  if_b	not	local01, #0
1d6e8     A7 26 62 FC | 	wrlong	local01, fp
1d6ec     64 00 90 FD | 	jmp	#LR__2383
1d6f0                 | LR__2381
1d6f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1d6f0     08 4E 05 F1 | 	add	fp, #8
1d6f4     A7 26 02 FB | 	rdlong	local01, fp
1d6f8     08 4E 85 F1 | 	sub	fp, #8
1d6fc     2B 26 0E F2 | 	cmp	local01, #43 wz
1d700     14 4E 05 A1 |  if_e	add	fp, #20
1d704     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d708     14 4E 85 A1 |  if_e	sub	fp, #20
1d70c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d710     3C 00 90 5D |  if_ne	jmp	#LR__2382
1d714     00 26 06 F6 | 	mov	local01, #0
1d718     A7 12 02 FB | 	rdlong	arg01, fp
1d71c     E4 F5 BE FD | 	call	#_convertstring
1d720     FD 28 02 F6 | 	mov	local02, result1
1d724     0C 4E 05 F1 | 	add	fp, #12
1d728     A7 12 02 FB | 	rdlong	arg01, fp
1d72c     0C 4E 85 F1 | 	sub	fp, #12
1d730     D0 F5 BE FD | 	call	#_convertstring
1d734     FD 14 02 F6 | 	mov	arg02, result1
1d738     14 13 02 F6 | 	mov	arg01, local02
1d73c     BC 77 B0 FD | 	call	#__system___string_cmp
1d740     01 FA 55 F2 | 	cmps	result1, #1 wc
1d744     00 26 26 C6 |  if_b	not	local01, #0
1d748     A7 26 62 FC | 	wrlong	local01, fp
1d74c     04 00 90 FD | 	jmp	#LR__2383
1d750                 | LR__2382
1d750     A7 00 68 FC | 	wrlong	#0, fp
1d754                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d754                 | LR__2383
1d754     08 4E 05 F1 | 	add	fp, #8
1d758     A7 38 68 FC | 	wrlong	#28, fp
1d75c     08 4E 85 F1 | 	sub	fp, #8
1d760     A7 12 02 F6 | 	mov	arg01, fp
1d764     BC F4 BE FD | 	call	#_push
1d768     A7 F0 03 F6 | 	mov	ptra, fp
1d76c     B2 00 A0 FD | 	call	#popregs_
1d770                 | _do_le_ret
1d770     2D 00 64 FD | 	ret
1d774                 | 
1d774                 | ' 
1d774                 | ' '--------------------------------- less than (<)
1d774                 | ' 
1d774                 | ' sub do_lt
1d774                 | _do_lt
1d774     05 4A 05 F6 | 	mov	COUNT_, #5
1d778     A8 00 A0 FD | 	call	#pushregs_
1d77c     18 F0 07 F1 | 	add	ptra, #24
1d780     08 F4 BE FD | 	call	#_pop
1d784     FD 26 02 F6 | 	mov	local01, result1
1d788     FE 28 02 F6 | 	mov	local02, result2
1d78c     FF 2A 02 F6 | 	mov	local03, result3
1d790     0C 4E 05 F1 | 	add	fp, #12
1d794     A7 26 62 FC | 	wrlong	local01, fp
1d798     04 4E 05 F1 | 	add	fp, #4
1d79c     A7 28 62 FC | 	wrlong	local02, fp
1d7a0     04 4E 05 F1 | 	add	fp, #4
1d7a4     A7 2A 62 FC | 	wrlong	local03, fp
1d7a8     14 4E 85 F1 | 	sub	fp, #20
1d7ac     DC F3 BE FD | 	call	#_pop
1d7b0     FF 2A 02 F6 | 	mov	local03, result3
1d7b4     A7 FA 61 FC | 	wrlong	result1, fp
1d7b8     04 4E 05 F1 | 	add	fp, #4
1d7bc     A7 FC 61 FC | 	wrlong	result2, fp
1d7c0     04 4E 05 F1 | 	add	fp, #4
1d7c4     A7 2A 62 FC | 	wrlong	local03, fp
1d7c8                 | ' 
1d7c8                 | ' t2=pop()
1d7c8                 | ' t1=pop()
1d7c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1d7c8     08 4E 85 F1 | 	sub	fp, #8
1d7cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d7d0     14 4E 05 A1 |  if_e	add	fp, #20
1d7d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d7d8     14 4E 85 A1 |  if_e	sub	fp, #20
1d7dc     16 2B 02 A6 |  if_e	mov	local03, local04
1d7e0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d7e4     28 00 90 5D |  if_ne	jmp	#LR__2390
1d7e8     00 26 06 F6 | 	mov	local01, #0
1d7ec     A7 12 02 FB | 	rdlong	arg01, fp
1d7f0     0C 4E 05 F1 | 	add	fp, #12
1d7f4     A7 14 02 FB | 	rdlong	arg02, fp
1d7f8     0C 4E 85 F1 | 	sub	fp, #12
1d7fc     FC 76 B0 FD | 	call	#__system___string_cmp
1d800     00 FA 55 F2 | 	cmps	result1, #0 wc
1d804     00 26 26 C6 |  if_b	not	local01, #0
1d808     A7 26 62 FC | 	wrlong	local01, fp
1d80c     10 04 90 FD | 	jmp	#LR__2403
1d810                 | LR__2390
1d810                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1d810     08 4E 05 F1 | 	add	fp, #8
1d814     A7 26 02 FB | 	rdlong	local01, fp
1d818     08 4E 85 F1 | 	sub	fp, #8
1d81c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d820     14 4E 05 A1 |  if_e	add	fp, #20
1d824     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d828     14 4E 85 A1 |  if_e	sub	fp, #20
1d82c     16 2B 02 A6 |  if_e	mov	local03, local04
1d830     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d834     2C 00 90 5D |  if_ne	jmp	#LR__2391
1d838     00 26 06 F6 | 	mov	local01, #0
1d83c     A7 12 02 FB | 	rdlong	arg01, fp
1d840     0C 4E 05 F1 | 	add	fp, #12
1d844     A7 14 02 FB | 	rdlong	arg02, fp
1d848     0C 4E 85 F1 | 	sub	fp, #12
1d84c     01 16 06 F6 | 	mov	arg03, #1
1d850     30 A9 B0 FD | 	call	#__system___float_cmp
1d854     00 FA 55 F2 | 	cmps	result1, #0 wc
1d858     00 26 26 C6 |  if_b	not	local01, #0
1d85c     A7 26 62 FC | 	wrlong	local01, fp
1d860     BC 03 90 FD | 	jmp	#LR__2403
1d864                 | LR__2391
1d864                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1d864     08 4E 05 F1 | 	add	fp, #8
1d868     A7 26 02 FB | 	rdlong	local01, fp
1d86c     08 4E 85 F1 | 	sub	fp, #8
1d870     1E 26 0E F2 | 	cmp	local01, #30 wz
1d874     14 4E 05 A1 |  if_e	add	fp, #20
1d878     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d87c     14 4E 85 A1 |  if_e	sub	fp, #20
1d880     16 2B 02 A6 |  if_e	mov	local03, local04
1d884     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d888     48 00 90 5D |  if_ne	jmp	#LR__2392
1d88c     00 26 06 F6 | 	mov	local01, #0
1d890     A7 28 02 FB | 	rdlong	local02, fp
1d894     0C 4E 05 F1 | 	add	fp, #12
1d898     A7 12 02 FB | 	rdlong	arg01, fp
1d89c     0C 4E 85 F1 | 	sub	fp, #12
1d8a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1d8a4     1F 2E C6 C9 |  if_b	decod	local05, #31
1d8a8     00 2E 06 36 |  if_ae	mov	local05, #0
1d8ac     9C A0 B0 FD | 	call	#__system___float_fromuns
1d8b0     17 FB 61 F5 | 	xor	result1, local05
1d8b4     FD 14 02 F6 | 	mov	arg02, result1
1d8b8     14 13 02 F6 | 	mov	arg01, local02
1d8bc     01 16 06 F6 | 	mov	arg03, #1
1d8c0     C0 A8 B0 FD | 	call	#__system___float_cmp
1d8c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1d8c8     00 26 26 C6 |  if_b	not	local01, #0
1d8cc     A7 26 62 FC | 	wrlong	local01, fp
1d8d0     4C 03 90 FD | 	jmp	#LR__2403
1d8d4                 | LR__2392
1d8d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1d8d4     08 4E 05 F1 | 	add	fp, #8
1d8d8     A7 26 02 FB | 	rdlong	local01, fp
1d8dc     08 4E 85 F1 | 	sub	fp, #8
1d8e0     1E 26 0E F2 | 	cmp	local01, #30 wz
1d8e4     14 4E 05 A1 |  if_e	add	fp, #20
1d8e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d8ec     14 4E 85 A1 |  if_e	sub	fp, #20
1d8f0     16 2B 02 A6 |  if_e	mov	local03, local04
1d8f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d8f8     38 00 90 5D |  if_ne	jmp	#LR__2393
1d8fc     00 26 06 F6 | 	mov	local01, #0
1d900     A7 28 02 FB | 	rdlong	local02, fp
1d904     0C 4E 05 F1 | 	add	fp, #12
1d908     A7 12 02 FB | 	rdlong	arg01, fp
1d90c     0C 4E 85 F1 | 	sub	fp, #12
1d910     38 A0 B0 FD | 	call	#__system___float_fromuns
1d914     FD 14 02 F6 | 	mov	arg02, result1
1d918     14 13 02 F6 | 	mov	arg01, local02
1d91c     01 16 06 F6 | 	mov	arg03, #1
1d920     60 A8 B0 FD | 	call	#__system___float_cmp
1d924     00 FA 55 F2 | 	cmps	result1, #0 wc
1d928     00 26 26 C6 |  if_b	not	local01, #0
1d92c     A7 26 62 FC | 	wrlong	local01, fp
1d930     EC 02 90 FD | 	jmp	#LR__2403
1d934                 | LR__2393
1d934                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1d934     08 4E 05 F1 | 	add	fp, #8
1d938     A7 26 02 FB | 	rdlong	local01, fp
1d93c     08 4E 85 F1 | 	sub	fp, #8
1d940     1C 26 0E F2 | 	cmp	local01, #28 wz
1d944     14 4E 05 A1 |  if_e	add	fp, #20
1d948     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d94c     14 4E 85 A1 |  if_e	sub	fp, #20
1d950     16 2B 02 A6 |  if_e	mov	local03, local04
1d954     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d958     44 00 90 5D |  if_ne	jmp	#LR__2394
1d95c     00 26 06 F6 | 	mov	local01, #0
1d960     A7 12 02 FB | 	rdlong	arg01, fp
1d964     09 13 52 F6 | 	abs	arg01, arg01 wc
1d968     1F 2E C6 C9 |  if_b	decod	local05, #31
1d96c     00 2E 06 36 |  if_ae	mov	local05, #0
1d970     D8 9F B0 FD | 	call	#__system___float_fromuns
1d974     17 FB 61 F5 | 	xor	result1, local05
1d978     FD 12 02 F6 | 	mov	arg01, result1
1d97c     0C 4E 05 F1 | 	add	fp, #12
1d980     A7 14 02 FB | 	rdlong	arg02, fp
1d984     0C 4E 85 F1 | 	sub	fp, #12
1d988     01 16 06 F6 | 	mov	arg03, #1
1d98c     F4 A7 B0 FD | 	call	#__system___float_cmp
1d990     00 FA 55 F2 | 	cmps	result1, #0 wc
1d994     00 26 26 C6 |  if_b	not	local01, #0
1d998     A7 26 62 FC | 	wrlong	local01, fp
1d99c     80 02 90 FD | 	jmp	#LR__2403
1d9a0                 | LR__2394
1d9a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1d9a0     08 4E 05 F1 | 	add	fp, #8
1d9a4     A7 26 02 FB | 	rdlong	local01, fp
1d9a8     08 4E 85 F1 | 	sub	fp, #8
1d9ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1d9b0     14 4E 05 A1 |  if_e	add	fp, #20
1d9b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9b8     14 4E 85 A1 |  if_e	sub	fp, #20
1d9bc     16 2B 02 A6 |  if_e	mov	local03, local04
1d9c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d9c4     20 00 90 5D |  if_ne	jmp	#LR__2395
1d9c8     A7 28 02 FB | 	rdlong	local02, fp
1d9cc     0C 4E 05 F1 | 	add	fp, #12
1d9d0     A7 2A 02 FB | 	rdlong	local03, fp
1d9d4     0C 4E 85 F1 | 	sub	fp, #12
1d9d8     15 29 52 F2 | 	cmps	local02, local03 wc
1d9dc     13 27 A2 F1 | 	subx	local01, local01
1d9e0     A7 26 62 FC | 	wrlong	local01, fp
1d9e4     38 02 90 FD | 	jmp	#LR__2403
1d9e8                 | LR__2395
1d9e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1d9e8     08 4E 05 F1 | 	add	fp, #8
1d9ec     A7 26 02 FB | 	rdlong	local01, fp
1d9f0     08 4E 85 F1 | 	sub	fp, #8
1d9f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1d9f8     14 4E 05 A1 |  if_e	add	fp, #20
1d9fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da00     14 4E 85 A1 |  if_e	sub	fp, #20
1da04     16 2B 02 A6 |  if_e	mov	local03, local04
1da08     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1da0c     20 00 90 5D |  if_ne	jmp	#LR__2396
1da10     A7 28 02 FB | 	rdlong	local02, fp
1da14     0C 4E 05 F1 | 	add	fp, #12
1da18     A7 2A 02 FB | 	rdlong	local03, fp
1da1c     0C 4E 85 F1 | 	sub	fp, #12
1da20     15 29 52 F2 | 	cmps	local02, local03 wc
1da24     13 27 A2 F1 | 	subx	local01, local01
1da28     A7 26 62 FC | 	wrlong	local01, fp
1da2c     F0 01 90 FD | 	jmp	#LR__2403
1da30                 | LR__2396
1da30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1da30     08 4E 05 F1 | 	add	fp, #8
1da34     A7 26 02 FB | 	rdlong	local01, fp
1da38     08 4E 85 F1 | 	sub	fp, #8
1da3c     1D 26 0E F2 | 	cmp	local01, #29 wz
1da40     14 4E 05 A1 |  if_e	add	fp, #20
1da44     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da48     14 4E 85 A1 |  if_e	sub	fp, #20
1da4c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1da50     34 00 90 5D |  if_ne	jmp	#LR__2397
1da54     00 26 06 F6 | 	mov	local01, #0
1da58     A7 12 02 FB | 	rdlong	arg01, fp
1da5c     EC 9E B0 FD | 	call	#__system___float_fromuns
1da60     FD 12 02 F6 | 	mov	arg01, result1
1da64     0C 4E 05 F1 | 	add	fp, #12
1da68     A7 14 02 FB | 	rdlong	arg02, fp
1da6c     0C 4E 85 F1 | 	sub	fp, #12
1da70     01 16 06 F6 | 	mov	arg03, #1
1da74     0C A7 B0 FD | 	call	#__system___float_cmp
1da78     00 FA 55 F2 | 	cmps	result1, #0 wc
1da7c     00 26 26 C6 |  if_b	not	local01, #0
1da80     A7 26 62 FC | 	wrlong	local01, fp
1da84     98 01 90 FD | 	jmp	#LR__2403
1da88                 | LR__2397
1da88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1da88     08 4E 05 F1 | 	add	fp, #8
1da8c     A7 26 02 FB | 	rdlong	local01, fp
1da90     08 4E 85 F1 | 	sub	fp, #8
1da94     1D 26 0E F2 | 	cmp	local01, #29 wz
1da98     14 4E 05 A1 |  if_e	add	fp, #20
1da9c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1daa0     14 4E 85 A1 |  if_e	sub	fp, #20
1daa4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1daa8     20 00 90 5D |  if_ne	jmp	#LR__2398
1daac     A7 28 02 FB | 	rdlong	local02, fp
1dab0     0C 4E 05 F1 | 	add	fp, #12
1dab4     A7 2A 02 FB | 	rdlong	local03, fp
1dab8     0C 4E 85 F1 | 	sub	fp, #12
1dabc     15 29 52 F2 | 	cmps	local02, local03 wc
1dac0     13 27 A2 F1 | 	subx	local01, local01
1dac4     A7 26 62 FC | 	wrlong	local01, fp
1dac8     54 01 90 FD | 	jmp	#LR__2403
1dacc                 | LR__2398
1dacc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1dacc     08 4E 05 F1 | 	add	fp, #8
1dad0     A7 26 02 FB | 	rdlong	local01, fp
1dad4     08 4E 85 F1 | 	sub	fp, #8
1dad8     1D 26 0E F2 | 	cmp	local01, #29 wz
1dadc     14 4E 05 A1 |  if_e	add	fp, #20
1dae0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dae4     14 4E 85 A1 |  if_e	sub	fp, #20
1dae8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1daec     20 00 90 5D |  if_ne	jmp	#LR__2399
1daf0     A7 28 02 FB | 	rdlong	local02, fp
1daf4     0C 4E 05 F1 | 	add	fp, #12
1daf8     A7 2A 02 FB | 	rdlong	local03, fp
1dafc     0C 4E 85 F1 | 	sub	fp, #12
1db00     15 29 12 F2 | 	cmp	local02, local03 wc
1db04     13 27 A2 F1 | 	subx	local01, local01
1db08     A7 26 62 FC | 	wrlong	local01, fp
1db0c     10 01 90 FD | 	jmp	#LR__2403
1db10                 | LR__2399
1db10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1db10     08 4E 05 F1 | 	add	fp, #8
1db14     A7 26 02 FB | 	rdlong	local01, fp
1db18     08 4E 85 F1 | 	sub	fp, #8
1db1c     2B 26 0E F2 | 	cmp	local01, #43 wz
1db20     14 4E 05 A1 |  if_e	add	fp, #20
1db24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db28     14 4E 85 A1 |  if_e	sub	fp, #20
1db2c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1db30     30 00 90 5D |  if_ne	jmp	#LR__2400
1db34     00 26 06 F6 | 	mov	local01, #0
1db38     A7 12 02 FB | 	rdlong	arg01, fp
1db3c     C4 F1 BE FD | 	call	#_convertstring
1db40     FD 12 02 F6 | 	mov	arg01, result1
1db44     0C 4E 05 F1 | 	add	fp, #12
1db48     A7 14 02 FB | 	rdlong	arg02, fp
1db4c     0C 4E 85 F1 | 	sub	fp, #12
1db50     A8 73 B0 FD | 	call	#__system___string_cmp
1db54     00 FA 55 F2 | 	cmps	result1, #0 wc
1db58     00 26 26 C6 |  if_b	not	local01, #0
1db5c     A7 26 62 FC | 	wrlong	local01, fp
1db60     BC 00 90 FD | 	jmp	#LR__2403
1db64                 | LR__2400
1db64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1db64     08 4E 05 F1 | 	add	fp, #8
1db68     A7 26 02 FB | 	rdlong	local01, fp
1db6c     08 4E 85 F1 | 	sub	fp, #8
1db70     1F 26 0E F2 | 	cmp	local01, #31 wz
1db74     14 4E 05 A1 |  if_e	add	fp, #20
1db78     A7 2A 02 AB |  if_e	rdlong	local03, fp
1db7c     14 4E 85 A1 |  if_e	sub	fp, #20
1db80     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1db84     34 00 90 5D |  if_ne	jmp	#LR__2401
1db88     00 26 06 F6 | 	mov	local01, #0
1db8c     A7 28 02 FB | 	rdlong	local02, fp
1db90     0C 4E 05 F1 | 	add	fp, #12
1db94     A7 12 02 FB | 	rdlong	arg01, fp
1db98     0C 4E 85 F1 | 	sub	fp, #12
1db9c     64 F1 BE FD | 	call	#_convertstring
1dba0     FD 14 02 F6 | 	mov	arg02, result1
1dba4     14 13 02 F6 | 	mov	arg01, local02
1dba8     50 73 B0 FD | 	call	#__system___string_cmp
1dbac     00 FA 55 F2 | 	cmps	result1, #0 wc
1dbb0     00 26 26 C6 |  if_b	not	local01, #0
1dbb4     A7 26 62 FC | 	wrlong	local01, fp
1dbb8     64 00 90 FD | 	jmp	#LR__2403
1dbbc                 | LR__2401
1dbbc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1dbbc     08 4E 05 F1 | 	add	fp, #8
1dbc0     A7 26 02 FB | 	rdlong	local01, fp
1dbc4     08 4E 85 F1 | 	sub	fp, #8
1dbc8     2B 26 0E F2 | 	cmp	local01, #43 wz
1dbcc     14 4E 05 A1 |  if_e	add	fp, #20
1dbd0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbd4     14 4E 85 A1 |  if_e	sub	fp, #20
1dbd8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dbdc     3C 00 90 5D |  if_ne	jmp	#LR__2402
1dbe0     00 26 06 F6 | 	mov	local01, #0
1dbe4     A7 12 02 FB | 	rdlong	arg01, fp
1dbe8     18 F1 BE FD | 	call	#_convertstring
1dbec     FD 28 02 F6 | 	mov	local02, result1
1dbf0     0C 4E 05 F1 | 	add	fp, #12
1dbf4     A7 12 02 FB | 	rdlong	arg01, fp
1dbf8     0C 4E 85 F1 | 	sub	fp, #12
1dbfc     04 F1 BE FD | 	call	#_convertstring
1dc00     FD 14 02 F6 | 	mov	arg02, result1
1dc04     14 13 02 F6 | 	mov	arg01, local02
1dc08     F0 72 B0 FD | 	call	#__system___string_cmp
1dc0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1dc10     00 26 26 C6 |  if_b	not	local01, #0
1dc14     A7 26 62 FC | 	wrlong	local01, fp
1dc18     04 00 90 FD | 	jmp	#LR__2403
1dc1c                 | LR__2402
1dc1c     A7 00 68 FC | 	wrlong	#0, fp
1dc20                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dc20                 | LR__2403
1dc20     08 4E 05 F1 | 	add	fp, #8
1dc24     A7 38 68 FC | 	wrlong	#28, fp
1dc28     08 4E 85 F1 | 	sub	fp, #8
1dc2c     A7 12 02 F6 | 	mov	arg01, fp
1dc30     F0 EF BE FD | 	call	#_push
1dc34     A7 F0 03 F6 | 	mov	ptra, fp
1dc38     B2 00 A0 FD | 	call	#popregs_
1dc3c                 | _do_lt_ret
1dc3c     2D 00 64 FD | 	ret
1dc40                 | 
1dc40                 | ' 
1dc40                 | ' '--------------------------------- minus (-)
1dc40                 | ' 
1dc40                 | ' sub do_minus
1dc40                 | _do_minus
1dc40     05 4A 05 F6 | 	mov	COUNT_, #5
1dc44     A8 00 A0 FD | 	call	#pushregs_
1dc48     18 F0 07 F1 | 	add	ptra, #24
1dc4c     3C EF BE FD | 	call	#_pop
1dc50     FD 26 02 F6 | 	mov	local01, result1
1dc54     FE 28 02 F6 | 	mov	local02, result2
1dc58     FF 2A 02 F6 | 	mov	local03, result3
1dc5c     0C 4E 05 F1 | 	add	fp, #12
1dc60     A7 26 62 FC | 	wrlong	local01, fp
1dc64     04 4E 05 F1 | 	add	fp, #4
1dc68     A7 28 62 FC | 	wrlong	local02, fp
1dc6c     04 4E 05 F1 | 	add	fp, #4
1dc70     A7 2A 62 FC | 	wrlong	local03, fp
1dc74     14 4E 85 F1 | 	sub	fp, #20
1dc78     10 EF BE FD | 	call	#_pop
1dc7c     FF 2A 02 F6 | 	mov	local03, result3
1dc80     A7 FA 61 FC | 	wrlong	result1, fp
1dc84     04 4E 05 F1 | 	add	fp, #4
1dc88     A7 FC 61 FC | 	wrlong	result2, fp
1dc8c     04 4E 05 F1 | 	add	fp, #4
1dc90     A7 2A 62 FC | 	wrlong	local03, fp
1dc94                 | ' 
1dc94                 | ' t2=pop()
1dc94                 | ' t1=pop()
1dc94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1dc94     08 4E 85 F1 | 	sub	fp, #8
1dc98     1D 2A 0E F2 | 	cmp	local03, #29 wz
1dc9c     14 4E 05 A1 |  if_e	add	fp, #20
1dca0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dca4     14 4E 85 A1 |  if_e	sub	fp, #20
1dca8     16 2B 02 A6 |  if_e	mov	local03, local04
1dcac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dcb0     5C 00 90 5D |  if_ne	jmp	#LR__2411
1dcb4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1dcb4     0C 4E 05 F1 | 	add	fp, #12
1dcb8     A7 26 02 FB | 	rdlong	local01, fp
1dcbc     0C 4E 85 F1 | 	sub	fp, #12
1dcc0     A7 2A 02 FB | 	rdlong	local03, fp
1dcc4     15 27 12 F2 | 	cmp	local01, local03 wc
1dcc8     1C 00 90 3D |  if_ae	jmp	#LR__2410
1dccc     A7 26 02 FB | 	rdlong	local01, fp
1dcd0     0C 4E 05 F1 | 	add	fp, #12
1dcd4     A7 28 02 FB | 	rdlong	local02, fp
1dcd8     0C 4E 85 F1 | 	sub	fp, #12
1dcdc     14 27 82 F1 | 	sub	local01, local02
1dce0     A7 26 62 FC | 	wrlong	local01, fp
1dce4     F4 02 90 FD | 	jmp	#LR__2420
1dce8                 | LR__2410
1dce8     A7 26 02 FB | 	rdlong	local01, fp
1dcec     0C 4E 05 F1 | 	add	fp, #12
1dcf0     A7 28 02 FB | 	rdlong	local02, fp
1dcf4     0C 4E 85 F1 | 	sub	fp, #12
1dcf8     14 27 82 F1 | 	sub	local01, local02
1dcfc     A7 26 62 FC | 	wrlong	local01, fp
1dd00     08 4E 05 F1 | 	add	fp, #8
1dd04     A7 38 68 FC | 	wrlong	#28, fp
1dd08     08 4E 85 F1 | 	sub	fp, #8
1dd0c     CC 02 90 FD | 	jmp	#LR__2420
1dd10                 | LR__2411
1dd10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1dd10     08 4E 05 F1 | 	add	fp, #8
1dd14     A7 26 02 FB | 	rdlong	local01, fp
1dd18     08 4E 85 F1 | 	sub	fp, #8
1dd1c     1D 26 0E F2 | 	cmp	local01, #29 wz
1dd20     14 4E 05 A1 |  if_e	add	fp, #20
1dd24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd28     14 4E 85 A1 |  if_e	sub	fp, #20
1dd2c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd30     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd34     28 00 90 5D |  if_ne	jmp	#LR__2412
1dd38     A7 26 02 FB | 	rdlong	local01, fp
1dd3c     0C 4E 05 F1 | 	add	fp, #12
1dd40     A7 28 02 FB | 	rdlong	local02, fp
1dd44     0C 4E 85 F1 | 	sub	fp, #12
1dd48     14 27 82 F1 | 	sub	local01, local02
1dd4c     A7 26 62 FC | 	wrlong	local01, fp
1dd50     08 4E 05 F1 | 	add	fp, #8
1dd54     A7 38 68 FC | 	wrlong	#28, fp
1dd58     08 4E 85 F1 | 	sub	fp, #8
1dd5c     7C 02 90 FD | 	jmp	#LR__2420
1dd60                 | LR__2412
1dd60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1dd60     08 4E 05 F1 | 	add	fp, #8
1dd64     A7 26 02 FB | 	rdlong	local01, fp
1dd68     08 4E 85 F1 | 	sub	fp, #8
1dd6c     1D 26 0E F2 | 	cmp	local01, #29 wz
1dd70     14 4E 05 A1 |  if_e	add	fp, #20
1dd74     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd78     14 4E 85 A1 |  if_e	sub	fp, #20
1dd7c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd80     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dd84     34 00 90 5D |  if_ne	jmp	#LR__2413
1dd88     A7 12 02 FB | 	rdlong	arg01, fp
1dd8c     BC 9B B0 FD | 	call	#__system___float_fromuns
1dd90     FD 12 02 F6 | 	mov	arg01, result1
1dd94     0C 4E 05 F1 | 	add	fp, #12
1dd98     A7 14 02 FB | 	rdlong	arg02, fp
1dd9c     0C 4E 85 F1 | 	sub	fp, #12
1dda0     1F 14 E6 F4 | 	bitnot	arg02, #31
1dda4     D8 9B B0 FD | 	call	#__system___float_add
1dda8     A7 FA 61 FC | 	wrlong	result1, fp
1ddac     08 4E 05 F1 | 	add	fp, #8
1ddb0     A7 3C 68 FC | 	wrlong	#30, fp
1ddb4     08 4E 85 F1 | 	sub	fp, #8
1ddb8     20 02 90 FD | 	jmp	#LR__2420
1ddbc                 | LR__2413
1ddbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1ddbc     08 4E 05 F1 | 	add	fp, #8
1ddc0     A7 26 02 FB | 	rdlong	local01, fp
1ddc4     08 4E 85 F1 | 	sub	fp, #8
1ddc8     1C 26 0E F2 | 	cmp	local01, #28 wz
1ddcc     14 4E 05 A1 |  if_e	add	fp, #20
1ddd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddd4     14 4E 85 A1 |  if_e	sub	fp, #20
1ddd8     16 2B 02 A6 |  if_e	mov	local03, local04
1dddc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dde0     1C 00 90 5D |  if_ne	jmp	#LR__2414
1dde4     A7 26 02 FB | 	rdlong	local01, fp
1dde8     0C 4E 05 F1 | 	add	fp, #12
1ddec     A7 28 02 FB | 	rdlong	local02, fp
1ddf0     0C 4E 85 F1 | 	sub	fp, #12
1ddf4     14 27 82 F1 | 	sub	local01, local02
1ddf8     A7 26 62 FC | 	wrlong	local01, fp
1ddfc     DC 01 90 FD | 	jmp	#LR__2420
1de00                 | LR__2414
1de00                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1de00     08 4E 05 F1 | 	add	fp, #8
1de04     A7 26 02 FB | 	rdlong	local01, fp
1de08     08 4E 85 F1 | 	sub	fp, #8
1de0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1de10     14 4E 05 A1 |  if_e	add	fp, #20
1de14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de18     14 4E 85 A1 |  if_e	sub	fp, #20
1de1c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1de20     1C 00 90 5D |  if_ne	jmp	#LR__2415
1de24     A7 26 02 FB | 	rdlong	local01, fp
1de28     0C 4E 05 F1 | 	add	fp, #12
1de2c     A7 28 02 FB | 	rdlong	local02, fp
1de30     0C 4E 85 F1 | 	sub	fp, #12
1de34     14 27 82 F1 | 	sub	local01, local02
1de38     A7 26 62 FC | 	wrlong	local01, fp
1de3c     9C 01 90 FD | 	jmp	#LR__2420
1de40                 | LR__2415
1de40                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1de40     08 4E 05 F1 | 	add	fp, #8
1de44     A7 26 02 FB | 	rdlong	local01, fp
1de48     08 4E 85 F1 | 	sub	fp, #8
1de4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1de50     14 4E 05 A1 |  if_e	add	fp, #20
1de54     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de58     14 4E 85 A1 |  if_e	sub	fp, #20
1de5c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1de60     44 00 90 5D |  if_ne	jmp	#LR__2416
1de64     A7 12 02 FB | 	rdlong	arg01, fp
1de68     09 13 52 F6 | 	abs	arg01, arg01 wc
1de6c     1F 2E C6 C9 |  if_b	decod	local05, #31
1de70     00 2E 06 36 |  if_ae	mov	local05, #0
1de74     D4 9A B0 FD | 	call	#__system___float_fromuns
1de78     17 FB 61 F5 | 	xor	result1, local05
1de7c     FD 12 02 F6 | 	mov	arg01, result1
1de80     0C 4E 05 F1 | 	add	fp, #12
1de84     A7 14 02 FB | 	rdlong	arg02, fp
1de88     0C 4E 85 F1 | 	sub	fp, #12
1de8c     1F 14 E6 F4 | 	bitnot	arg02, #31
1de90     EC 9A B0 FD | 	call	#__system___float_add
1de94     A7 FA 61 FC | 	wrlong	result1, fp
1de98     08 4E 05 F1 | 	add	fp, #8
1de9c     A7 3C 68 FC | 	wrlong	#30, fp
1dea0     08 4E 85 F1 | 	sub	fp, #8
1dea4     34 01 90 FD | 	jmp	#LR__2420
1dea8                 | LR__2416
1dea8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1dea8     08 4E 05 F1 | 	add	fp, #8
1deac     A7 26 02 FB | 	rdlong	local01, fp
1deb0     08 4E 85 F1 | 	sub	fp, #8
1deb4     1E 26 0E F2 | 	cmp	local01, #30 wz
1deb8     14 4E 05 A1 |  if_e	add	fp, #20
1debc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dec0     14 4E 85 A1 |  if_e	sub	fp, #20
1dec4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dec8     2C 00 90 5D |  if_ne	jmp	#LR__2417
1decc     A7 26 02 FB | 	rdlong	local01, fp
1ded0     0C 4E 05 F1 | 	add	fp, #12
1ded4     A7 12 02 FB | 	rdlong	arg01, fp
1ded8     0C 4E 85 F1 | 	sub	fp, #12
1dedc     6C 9A B0 FD | 	call	#__system___float_fromuns
1dee0     FD 14 02 F6 | 	mov	arg02, result1
1dee4     13 13 02 F6 | 	mov	arg01, local01
1dee8     1F 14 E6 F4 | 	bitnot	arg02, #31
1deec     90 9A B0 FD | 	call	#__system___float_add
1def0     A7 FA 61 FC | 	wrlong	result1, fp
1def4     E4 00 90 FD | 	jmp	#LR__2420
1def8                 | LR__2417
1def8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1def8     08 4E 05 F1 | 	add	fp, #8
1defc     A7 26 02 FB | 	rdlong	local01, fp
1df00     08 4E 85 F1 | 	sub	fp, #8
1df04     1E 26 0E F2 | 	cmp	local01, #30 wz
1df08     14 4E 05 A1 |  if_e	add	fp, #20
1df0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df10     14 4E 85 A1 |  if_e	sub	fp, #20
1df14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1df18     3C 00 90 5D |  if_ne	jmp	#LR__2418
1df1c     A7 26 02 FB | 	rdlong	local01, fp
1df20     0C 4E 05 F1 | 	add	fp, #12
1df24     A7 12 02 FB | 	rdlong	arg01, fp
1df28     0C 4E 85 F1 | 	sub	fp, #12
1df2c     09 13 52 F6 | 	abs	arg01, arg01 wc
1df30     1F 2E C6 C9 |  if_b	decod	local05, #31
1df34     00 2E 06 36 |  if_ae	mov	local05, #0
1df38     10 9A B0 FD | 	call	#__system___float_fromuns
1df3c     17 FB 61 F5 | 	xor	result1, local05
1df40     FD 14 02 F6 | 	mov	arg02, result1
1df44     13 13 02 F6 | 	mov	arg01, local01
1df48     1F 14 E6 F4 | 	bitnot	arg02, #31
1df4c     30 9A B0 FD | 	call	#__system___float_add
1df50     A7 FA 61 FC | 	wrlong	result1, fp
1df54     84 00 90 FD | 	jmp	#LR__2420
1df58                 | LR__2418
1df58                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1df58     08 4E 05 F1 | 	add	fp, #8
1df5c     A7 26 02 FB | 	rdlong	local01, fp
1df60     08 4E 85 F1 | 	sub	fp, #8
1df64     1E 26 0E F2 | 	cmp	local01, #30 wz
1df68     14 4E 05 A1 |  if_e	add	fp, #20
1df6c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df70     14 4E 85 A1 |  if_e	sub	fp, #20
1df74     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1df78     20 00 90 5D |  if_ne	jmp	#LR__2419
1df7c     A7 12 02 FB | 	rdlong	arg01, fp
1df80     0C 4E 05 F1 | 	add	fp, #12
1df84     A7 14 02 FB | 	rdlong	arg02, fp
1df88     0C 4E 85 F1 | 	sub	fp, #12
1df8c     1F 14 E6 F4 | 	bitnot	arg02, #31
1df90     EC 99 B0 FD | 	call	#__system___float_add
1df94     A7 FA 61 FC | 	wrlong	result1, fp
1df98     40 00 90 FD | 	jmp	#LR__2420
1df9c                 | LR__2419
1df9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1df9c     08 4E 05 F1 | 	add	fp, #8
1dfa0     A7 26 02 FB | 	rdlong	local01, fp
1dfa4     08 4E 85 F1 | 	sub	fp, #8
1dfa8     1F 26 0E F2 | 	cmp	local01, #31 wz
1dfac     14 4E 05 51 |  if_ne	add	fp, #20
1dfb0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1dfb4     14 4E 85 51 |  if_ne	sub	fp, #20
1dfb8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1dfbc     A7 06 68 AC |  if_e	wrlong	#3, fp
1dfc0     08 4E 05 A1 |  if_e	add	fp, #8
1dfc4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1dfc8     08 4E 85 A1 |  if_e	sub	fp, #8
1dfcc     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1dfd0     08 4E 05 51 |  if_ne	add	fp, #8
1dfd4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1dfd8     08 4E 85 51 |  if_ne	sub	fp, #8
1dfdc                 | LR__2420
1dfdc     A7 12 02 F6 | 	mov	arg01, fp
1dfe0     40 EC BE FD | 	call	#_push
1dfe4     A7 F0 03 F6 | 	mov	ptra, fp
1dfe8     B2 00 A0 FD | 	call	#popregs_
1dfec                 | _do_minus_ret
1dfec     2D 00 64 FD | 	ret
1dff0                 | 
1dff0                 | ' 
1dff0                 | ' '--------------------------------- negative (-), one argument negative
1dff0                 | ' 
1dff0                 | ' sub do_negative
1dff0                 | _do_negative
1dff0     02 4A 05 F6 | 	mov	COUNT_, #2
1dff4     A8 00 A0 FD | 	call	#pushregs_
1dff8     0C F0 07 F1 | 	add	ptra, #12
1dffc     8C EB BE FD | 	call	#_pop
1e000     FF 26 02 F6 | 	mov	local01, result3
1e004     A7 FA 61 FC | 	wrlong	result1, fp
1e008     04 4E 05 F1 | 	add	fp, #4
1e00c     A7 FC 61 FC | 	wrlong	result2, fp
1e010     04 4E 05 F1 | 	add	fp, #4
1e014     A7 26 62 FC | 	wrlong	local01, fp
1e018                 | ' 
1e018                 | ' t1=pop()
1e018                 | ' if t1.result_type=result_int then 
1e018     08 4E 85 F1 | 	sub	fp, #8
1e01c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e020     A7 28 02 AB |  if_e	rdlong	local02, fp
1e024     14 27 62 A6 |  if_e	neg	local01, local02
1e028     A7 26 62 AC |  if_e	wrlong	local01, fp
1e02c     5C 00 90 AD |  if_e	jmp	#LR__2432
1e030     08 4E 05 F1 | 	add	fp, #8
1e034     A7 26 02 FB | 	rdlong	local01, fp
1e038     08 4E 85 F1 | 	sub	fp, #8
1e03c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e040     1C 00 90 5D |  if_ne	jmp	#LR__2430
1e044     A7 28 02 FB | 	rdlong	local02, fp
1e048     14 27 62 F6 | 	neg	local01, local02
1e04c     A7 26 62 FC | 	wrlong	local01, fp
1e050     08 4E 05 F1 | 	add	fp, #8
1e054     A7 38 68 FC | 	wrlong	#28, fp
1e058     08 4E 85 F1 | 	sub	fp, #8
1e05c     2C 00 90 FD | 	jmp	#LR__2431
1e060                 | LR__2430
1e060     08 4E 05 F1 | 	add	fp, #8
1e064     A7 26 02 FB | 	rdlong	local01, fp
1e068     08 4E 85 F1 | 	sub	fp, #8
1e06c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e070     A7 FA 01 AB |  if_e	rdlong	result1, fp
1e074     1F FA E5 A4 |  if_e	bitnot	result1, #31
1e078     A7 FA 61 AC |  if_e	wrlong	result1, fp
1e07c     08 4E 05 51 |  if_ne	add	fp, #8
1e080     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e084     08 4E 85 51 |  if_ne	sub	fp, #8
1e088     A7 50 68 5C |  if_ne	wrlong	#40, fp
1e08c                 | LR__2431
1e08c                 | LR__2432
1e08c     A7 12 02 F6 | 	mov	arg01, fp
1e090     90 EB BE FD | 	call	#_push
1e094     A7 F0 03 F6 | 	mov	ptra, fp
1e098     B2 00 A0 FD | 	call	#popregs_
1e09c                 | _do_negative_ret
1e09c     2D 00 64 FD | 	ret
1e0a0                 | 
1e0a0                 | ' 
1e0a0                 | ' '--------------------------------- MOD (modulo)
1e0a0                 | ' 
1e0a0                 | ' sub do_mod 
1e0a0                 | _do_mod
1e0a0     01 4A 05 F6 | 	mov	COUNT_, #1
1e0a4     A8 00 A0 FD | 	call	#pushregs_
1e0a8     18 F0 07 F1 | 	add	ptra, #24
1e0ac     DC EA BE FD | 	call	#_pop
1e0b0     FD 8A 02 F6 | 	mov	muldivb_, result1
1e0b4     FE 88 02 F6 | 	mov	muldiva_, result2
1e0b8     FF 26 02 F6 | 	mov	local01, result3
1e0bc     0C 4E 05 F1 | 	add	fp, #12
1e0c0     A7 8A 62 FC | 	wrlong	muldivb_, fp
1e0c4     04 4E 05 F1 | 	add	fp, #4
1e0c8     A7 88 62 FC | 	wrlong	muldiva_, fp
1e0cc     04 4E 05 F1 | 	add	fp, #4
1e0d0     A7 26 62 FC | 	wrlong	local01, fp
1e0d4     14 4E 85 F1 | 	sub	fp, #20
1e0d8     B0 EA BE FD | 	call	#_pop
1e0dc     A7 FA 61 FC | 	wrlong	result1, fp
1e0e0     04 4E 05 F1 | 	add	fp, #4
1e0e4     A7 FC 61 FC | 	wrlong	result2, fp
1e0e8     04 4E 05 F1 | 	add	fp, #4
1e0ec     A7 FE 61 FC | 	wrlong	result3, fp
1e0f0                 | ' 
1e0f0                 | ' t2=pop()
1e0f0                 | ' t1=pop()
1e0f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1e0f0     08 4E 85 F1 | 	sub	fp, #8
1e0f4     1F FE 0D F2 | 	cmp	result3, #31 wz
1e0f8     14 4E 05 51 |  if_ne	add	fp, #20
1e0fc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1e100     14 4E 85 51 |  if_ne	sub	fp, #20
1e104     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1e108     A7 14 68 AC |  if_e	wrlong	#10, fp
1e10c     08 4E 05 A1 |  if_e	add	fp, #8
1e110     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e114     08 4E 85 A1 |  if_e	sub	fp, #8
1e118     90 01 90 AD |  if_e	jmp	#LR__2446
1e11c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1e11c     08 4E 05 F1 | 	add	fp, #8
1e120     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e124     08 4E 85 F1 | 	sub	fp, #8
1e128     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1e12c     1C 00 90 5D |  if_ne	jmp	#LR__2440
1e130     08 4E 05 F1 | 	add	fp, #8
1e134     A7 38 68 FC | 	wrlong	#28, fp
1e138     08 4E 85 F1 | 	sub	fp, #8
1e13c     A7 12 02 FB | 	rdlong	arg01, fp
1e140     00 14 06 F6 | 	mov	arg02, #0
1e144     D0 A0 B0 FD | 	call	#__system___float_tointeger
1e148     A7 FA 61 FC | 	wrlong	result1, fp
1e14c                 | LR__2440
1e14c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1e14c     14 4E 05 F1 | 	add	fp, #20
1e150     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e154     14 4E 85 F1 | 	sub	fp, #20
1e158     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1e15c     28 00 90 5D |  if_ne	jmp	#LR__2441
1e160     14 4E 05 F1 | 	add	fp, #20
1e164     A7 38 68 FC | 	wrlong	#28, fp
1e168     08 4E 85 F1 | 	sub	fp, #8
1e16c     A7 12 02 FB | 	rdlong	arg01, fp
1e170     0C 4E 85 F1 | 	sub	fp, #12
1e174     00 14 06 F6 | 	mov	arg02, #0
1e178     9C A0 B0 FD | 	call	#__system___float_tointeger
1e17c     0C 4E 05 F1 | 	add	fp, #12
1e180     A7 FA 61 FC | 	wrlong	result1, fp
1e184     0C 4E 85 F1 | 	sub	fp, #12
1e188                 | LR__2441
1e188                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1e188     08 4E 05 F1 | 	add	fp, #8
1e18c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e190     08 4E 85 F1 | 	sub	fp, #8
1e194     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1e198     14 4E 05 A1 |  if_e	add	fp, #20
1e19c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e1a0     14 4E 85 A1 |  if_e	sub	fp, #20
1e1a4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e1a8     20 00 90 5D |  if_ne	jmp	#LR__2442
1e1ac     0C 4E 05 F1 | 	add	fp, #12
1e1b0     A7 26 02 FB | 	rdlong	local01, fp
1e1b4     0C 4E 85 F1 | 	sub	fp, #12
1e1b8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e1bc     13 8B 12 FD | 	qdiv	muldivb_, local01
1e1c0     19 26 62 FD | 	getqy	local01
1e1c4     A7 26 62 FC | 	wrlong	local01, fp
1e1c8     E0 00 90 FD | 	jmp	#LR__2446
1e1cc                 | LR__2442
1e1cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1e1cc     08 4E 05 F1 | 	add	fp, #8
1e1d0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e1d4     08 4E 85 F1 | 	sub	fp, #8
1e1d8     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1e1dc     14 4E 05 A1 |  if_e	add	fp, #20
1e1e0     A7 26 02 AB |  if_e	rdlong	local01, fp
1e1e4     14 4E 85 A1 |  if_e	sub	fp, #20
1e1e8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e1ec     2C 00 90 5D |  if_ne	jmp	#LR__2443
1e1f0     0C 4E 05 F1 | 	add	fp, #12
1e1f4     A7 26 02 FB | 	rdlong	local01, fp
1e1f8     0C 4E 85 F1 | 	sub	fp, #12
1e1fc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e200     13 8B 12 FD | 	qdiv	muldivb_, local01
1e204     19 26 62 FD | 	getqy	local01
1e208     A7 26 62 FC | 	wrlong	local01, fp
1e20c     08 4E 05 F1 | 	add	fp, #8
1e210     A7 38 68 FC | 	wrlong	#28, fp
1e214     08 4E 85 F1 | 	sub	fp, #8
1e218     90 00 90 FD | 	jmp	#LR__2446
1e21c                 | LR__2443
1e21c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1e21c     08 4E 05 F1 | 	add	fp, #8
1e220     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e224     08 4E 85 F1 | 	sub	fp, #8
1e228     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1e22c     14 4E 05 A1 |  if_e	add	fp, #20
1e230     A7 26 02 AB |  if_e	rdlong	local01, fp
1e234     14 4E 85 A1 |  if_e	sub	fp, #20
1e238     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e23c     1C 00 90 5D |  if_ne	jmp	#LR__2444
1e240     A7 88 02 FB | 	rdlong	muldiva_, fp
1e244     0C 4E 05 F1 | 	add	fp, #12
1e248     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e24c     0C 4E 85 F1 | 	sub	fp, #12
1e250     BA 00 A0 FD | 	call	#divide_
1e254     A7 88 62 FC | 	wrlong	muldiva_, fp
1e258     50 00 90 FD | 	jmp	#LR__2446
1e25c                 | LR__2444
1e25c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1e25c     08 4E 05 F1 | 	add	fp, #8
1e260     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e264     08 4E 85 F1 | 	sub	fp, #8
1e268     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1e26c     14 4E 05 A1 |  if_e	add	fp, #20
1e270     A7 26 02 AB |  if_e	rdlong	local01, fp
1e274     14 4E 85 A1 |  if_e	sub	fp, #20
1e278     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e27c     1C 00 90 5D |  if_ne	jmp	#LR__2445
1e280     A7 88 02 FB | 	rdlong	muldiva_, fp
1e284     0C 4E 05 F1 | 	add	fp, #12
1e288     A7 8A 02 FB | 	rdlong	muldivb_, fp
1e28c     0C 4E 85 F1 | 	sub	fp, #12
1e290     BA 00 A0 FD | 	call	#divide_
1e294     A7 88 62 FC | 	wrlong	muldiva_, fp
1e298     10 00 90 FD | 	jmp	#LR__2446
1e29c                 | LR__2445
1e29c     A7 16 68 FC | 	wrlong	#11, fp
1e2a0     08 4E 05 F1 | 	add	fp, #8
1e2a4     A7 FE 69 FC | 	wrlong	#255, fp
1e2a8     08 4E 85 F1 | 	sub	fp, #8
1e2ac                 | LR__2446
1e2ac     A7 12 02 F6 | 	mov	arg01, fp
1e2b0     70 E9 BE FD | 	call	#_push
1e2b4     A7 F0 03 F6 | 	mov	ptra, fp
1e2b8     B2 00 A0 FD | 	call	#popregs_
1e2bc                 | _do_mod_ret
1e2bc     2D 00 64 FD | 	ret
1e2c0                 | 
1e2c0                 | ' 
1e2c0                 | ' '--------------------------------- mul (*)
1e2c0                 | ' 
1e2c0                 | ' sub do_mul
1e2c0                 | _do_mul
1e2c0     05 4A 05 F6 | 	mov	COUNT_, #5
1e2c4     A8 00 A0 FD | 	call	#pushregs_
1e2c8     18 F0 07 F1 | 	add	ptra, #24
1e2cc     BC E8 BE FD | 	call	#_pop
1e2d0     FD 26 02 F6 | 	mov	local01, result1
1e2d4     FE 28 02 F6 | 	mov	local02, result2
1e2d8     FF 2A 02 F6 | 	mov	local03, result3
1e2dc     0C 4E 05 F1 | 	add	fp, #12
1e2e0     A7 26 62 FC | 	wrlong	local01, fp
1e2e4     04 4E 05 F1 | 	add	fp, #4
1e2e8     A7 28 62 FC | 	wrlong	local02, fp
1e2ec     04 4E 05 F1 | 	add	fp, #4
1e2f0     A7 2A 62 FC | 	wrlong	local03, fp
1e2f4     14 4E 85 F1 | 	sub	fp, #20
1e2f8     90 E8 BE FD | 	call	#_pop
1e2fc     FF 2A 02 F6 | 	mov	local03, result3
1e300     A7 FA 61 FC | 	wrlong	result1, fp
1e304     04 4E 05 F1 | 	add	fp, #4
1e308     A7 FC 61 FC | 	wrlong	result2, fp
1e30c     04 4E 05 F1 | 	add	fp, #4
1e310     A7 2A 62 FC | 	wrlong	local03, fp
1e314                 | ' 
1e314                 | ' t2=pop()
1e314                 | ' t1=pop()
1e314                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1e314     08 4E 85 F1 | 	sub	fp, #8
1e318     1D 2A 0E F2 | 	cmp	local03, #29 wz
1e31c     14 4E 05 A1 |  if_e	add	fp, #20
1e320     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e324     14 4E 85 A1 |  if_e	sub	fp, #20
1e328     16 2B 02 A6 |  if_e	mov	local03, local04
1e32c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e330     20 00 90 5D |  if_ne	jmp	#LR__2450
1e334     A7 28 02 FB | 	rdlong	local02, fp
1e338     0C 4E 05 F1 | 	add	fp, #12
1e33c     A7 2A 02 FB | 	rdlong	local03, fp
1e340     15 29 02 FD | 	qmul	local02, local03
1e344     0C 4E 85 F1 | 	sub	fp, #12
1e348     18 26 62 FD | 	getqx	local01
1e34c     A7 26 62 FC | 	wrlong	local01, fp
1e350     C4 02 90 FD | 	jmp	#LR__2459
1e354                 | LR__2450
1e354                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1e354     08 4E 05 F1 | 	add	fp, #8
1e358     A7 26 02 FB | 	rdlong	local01, fp
1e35c     08 4E 85 F1 | 	sub	fp, #8
1e360     1D 26 0E F2 | 	cmp	local01, #29 wz
1e364     14 4E 05 A1 |  if_e	add	fp, #20
1e368     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e36c     14 4E 85 A1 |  if_e	sub	fp, #20
1e370     16 2B 02 A6 |  if_e	mov	local03, local04
1e374     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e378     2C 00 90 5D |  if_ne	jmp	#LR__2451
1e37c     A7 28 02 FB | 	rdlong	local02, fp
1e380     0C 4E 05 F1 | 	add	fp, #12
1e384     A7 2A 02 FB | 	rdlong	local03, fp
1e388     15 29 02 FD | 	qmul	local02, local03
1e38c     0C 4E 85 F1 | 	sub	fp, #12
1e390     18 26 62 FD | 	getqx	local01
1e394     A7 26 62 FC | 	wrlong	local01, fp
1e398     08 4E 05 F1 | 	add	fp, #8
1e39c     A7 38 68 FC | 	wrlong	#28, fp
1e3a0     08 4E 85 F1 | 	sub	fp, #8
1e3a4     70 02 90 FD | 	jmp	#LR__2459
1e3a8                 | LR__2451
1e3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e3a8     08 4E 05 F1 | 	add	fp, #8
1e3ac     A7 26 02 FB | 	rdlong	local01, fp
1e3b0     08 4E 85 F1 | 	sub	fp, #8
1e3b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e3b8     14 4E 05 A1 |  if_e	add	fp, #20
1e3bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1e3c4     16 2B 02 A6 |  if_e	mov	local03, local04
1e3c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e3cc     30 00 90 5D |  if_ne	jmp	#LR__2452
1e3d0     A7 12 02 FB | 	rdlong	arg01, fp
1e3d4     74 95 B0 FD | 	call	#__system___float_fromuns
1e3d8     FD 12 02 F6 | 	mov	arg01, result1
1e3dc     0C 4E 05 F1 | 	add	fp, #12
1e3e0     A7 14 02 FB | 	rdlong	arg02, fp
1e3e4     0C 4E 85 F1 | 	sub	fp, #12
1e3e8     64 99 B0 FD | 	call	#__system___float_mul
1e3ec     A7 FA 61 FC | 	wrlong	result1, fp
1e3f0     08 4E 05 F1 | 	add	fp, #8
1e3f4     A7 3C 68 FC | 	wrlong	#30, fp
1e3f8     08 4E 85 F1 | 	sub	fp, #8
1e3fc     18 02 90 FD | 	jmp	#LR__2459
1e400                 | LR__2452
1e400                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1e400     08 4E 05 F1 | 	add	fp, #8
1e404     A7 26 02 FB | 	rdlong	local01, fp
1e408     08 4E 85 F1 | 	sub	fp, #8
1e40c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e410     14 4E 05 A1 |  if_e	add	fp, #20
1e414     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e418     14 4E 85 A1 |  if_e	sub	fp, #20
1e41c     16 2B 02 A6 |  if_e	mov	local03, local04
1e420     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e424     20 00 90 5D |  if_ne	jmp	#LR__2453
1e428     A7 28 02 FB | 	rdlong	local02, fp
1e42c     0C 4E 05 F1 | 	add	fp, #12
1e430     A7 2A 02 FB | 	rdlong	local03, fp
1e434     15 29 02 FD | 	qmul	local02, local03
1e438     0C 4E 85 F1 | 	sub	fp, #12
1e43c     18 26 62 FD | 	getqx	local01
1e440     A7 26 62 FC | 	wrlong	local01, fp
1e444     D0 01 90 FD | 	jmp	#LR__2459
1e448                 | LR__2453
1e448                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1e448     08 4E 05 F1 | 	add	fp, #8
1e44c     A7 26 02 FB | 	rdlong	local01, fp
1e450     08 4E 85 F1 | 	sub	fp, #8
1e454     1C 26 0E F2 | 	cmp	local01, #28 wz
1e458     14 4E 05 A1 |  if_e	add	fp, #20
1e45c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e460     14 4E 85 A1 |  if_e	sub	fp, #20
1e464     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e468     20 00 90 5D |  if_ne	jmp	#LR__2454
1e46c     A7 28 02 FB | 	rdlong	local02, fp
1e470     0C 4E 05 F1 | 	add	fp, #12
1e474     A7 2A 02 FB | 	rdlong	local03, fp
1e478     15 29 02 FD | 	qmul	local02, local03
1e47c     0C 4E 85 F1 | 	sub	fp, #12
1e480     18 26 62 FD | 	getqx	local01
1e484     A7 26 62 FC | 	wrlong	local01, fp
1e488     8C 01 90 FD | 	jmp	#LR__2459
1e48c                 | LR__2454
1e48c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1e48c     08 4E 05 F1 | 	add	fp, #8
1e490     A7 26 02 FB | 	rdlong	local01, fp
1e494     08 4E 85 F1 | 	sub	fp, #8
1e498     1C 26 0E F2 | 	cmp	local01, #28 wz
1e49c     14 4E 05 A1 |  if_e	add	fp, #20
1e4a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e4a8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e4ac     40 00 90 5D |  if_ne	jmp	#LR__2455
1e4b0     A7 12 02 FB | 	rdlong	arg01, fp
1e4b4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e4b8     1F 2E C6 C9 |  if_b	decod	local05, #31
1e4bc     00 2E 06 36 |  if_ae	mov	local05, #0
1e4c0     88 94 B0 FD | 	call	#__system___float_fromuns
1e4c4     17 FB 61 F5 | 	xor	result1, local05
1e4c8     FD 12 02 F6 | 	mov	arg01, result1
1e4cc     0C 4E 05 F1 | 	add	fp, #12
1e4d0     A7 14 02 FB | 	rdlong	arg02, fp
1e4d4     0C 4E 85 F1 | 	sub	fp, #12
1e4d8     74 98 B0 FD | 	call	#__system___float_mul
1e4dc     A7 FA 61 FC | 	wrlong	result1, fp
1e4e0     08 4E 05 F1 | 	add	fp, #8
1e4e4     A7 3C 68 FC | 	wrlong	#30, fp
1e4e8     08 4E 85 F1 | 	sub	fp, #8
1e4ec     28 01 90 FD | 	jmp	#LR__2459
1e4f0                 | LR__2455
1e4f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1e4f0     08 4E 05 F1 | 	add	fp, #8
1e4f4     A7 26 02 FB | 	rdlong	local01, fp
1e4f8     08 4E 85 F1 | 	sub	fp, #8
1e4fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e500     14 4E 05 A1 |  if_e	add	fp, #20
1e504     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e508     14 4E 85 A1 |  if_e	sub	fp, #20
1e50c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e510     28 00 90 5D |  if_ne	jmp	#LR__2456
1e514     A7 26 02 FB | 	rdlong	local01, fp
1e518     0C 4E 05 F1 | 	add	fp, #12
1e51c     A7 12 02 FB | 	rdlong	arg01, fp
1e520     0C 4E 85 F1 | 	sub	fp, #12
1e524     24 94 B0 FD | 	call	#__system___float_fromuns
1e528     FD 14 02 F6 | 	mov	arg02, result1
1e52c     13 13 02 F6 | 	mov	arg01, local01
1e530     1C 98 B0 FD | 	call	#__system___float_mul
1e534     A7 FA 61 FC | 	wrlong	result1, fp
1e538     DC 00 90 FD | 	jmp	#LR__2459
1e53c                 | LR__2456
1e53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1e53c     08 4E 05 F1 | 	add	fp, #8
1e540     A7 26 02 FB | 	rdlong	local01, fp
1e544     08 4E 85 F1 | 	sub	fp, #8
1e548     1E 26 0E F2 | 	cmp	local01, #30 wz
1e54c     14 4E 05 A1 |  if_e	add	fp, #20
1e550     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e554     14 4E 85 A1 |  if_e	sub	fp, #20
1e558     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e55c     38 00 90 5D |  if_ne	jmp	#LR__2457
1e560     A7 26 02 FB | 	rdlong	local01, fp
1e564     0C 4E 05 F1 | 	add	fp, #12
1e568     A7 12 02 FB | 	rdlong	arg01, fp
1e56c     0C 4E 85 F1 | 	sub	fp, #12
1e570     09 13 52 F6 | 	abs	arg01, arg01 wc
1e574     1F 2E C6 C9 |  if_b	decod	local05, #31
1e578     00 2E 06 36 |  if_ae	mov	local05, #0
1e57c     CC 93 B0 FD | 	call	#__system___float_fromuns
1e580     17 FB 61 F5 | 	xor	result1, local05
1e584     FD 14 02 F6 | 	mov	arg02, result1
1e588     13 13 02 F6 | 	mov	arg01, local01
1e58c     C0 97 B0 FD | 	call	#__system___float_mul
1e590     A7 FA 61 FC | 	wrlong	result1, fp
1e594     80 00 90 FD | 	jmp	#LR__2459
1e598                 | LR__2457
1e598                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1e598     08 4E 05 F1 | 	add	fp, #8
1e59c     A7 26 02 FB | 	rdlong	local01, fp
1e5a0     08 4E 85 F1 | 	sub	fp, #8
1e5a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e5a8     14 4E 05 A1 |  if_e	add	fp, #20
1e5ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e5b4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e5b8     1C 00 90 5D |  if_ne	jmp	#LR__2458
1e5bc     A7 12 02 FB | 	rdlong	arg01, fp
1e5c0     0C 4E 05 F1 | 	add	fp, #12
1e5c4     A7 14 02 FB | 	rdlong	arg02, fp
1e5c8     0C 4E 85 F1 | 	sub	fp, #12
1e5cc     80 97 B0 FD | 	call	#__system___float_mul
1e5d0     A7 FA 61 FC | 	wrlong	result1, fp
1e5d4     40 00 90 FD | 	jmp	#LR__2459
1e5d8                 | LR__2458
1e5d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1e5d8     08 4E 05 F1 | 	add	fp, #8
1e5dc     A7 26 02 FB | 	rdlong	local01, fp
1e5e0     08 4E 85 F1 | 	sub	fp, #8
1e5e4     1F 26 0E F2 | 	cmp	local01, #31 wz
1e5e8     14 4E 05 51 |  if_ne	add	fp, #20
1e5ec     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e5f0     14 4E 85 51 |  if_ne	sub	fp, #20
1e5f4     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1e5f8     A7 10 68 AC |  if_e	wrlong	#8, fp
1e5fc     08 4E 05 A1 |  if_e	add	fp, #8
1e600     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e604     08 4E 85 A1 |  if_e	sub	fp, #8
1e608     A7 12 68 5C |  if_ne	wrlong	#9, fp
1e60c     08 4E 05 51 |  if_ne	add	fp, #8
1e610     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1e614     08 4E 85 51 |  if_ne	sub	fp, #8
1e618                 | LR__2459
1e618     A7 12 02 F6 | 	mov	arg01, fp
1e61c     04 E6 BE FD | 	call	#_push
1e620     A7 F0 03 F6 | 	mov	ptra, fp
1e624     B2 00 A0 FD | 	call	#popregs_
1e628                 | _do_mul_ret
1e628     2D 00 64 FD | 	ret
1e62c                 | 
1e62c                 | ' 
1e62c                 | ' '--------------------------------- not equal (<>)
1e62c                 | ' 
1e62c                 | ' sub do_ne
1e62c                 | _do_ne
1e62c     05 4A 05 F6 | 	mov	COUNT_, #5
1e630     A8 00 A0 FD | 	call	#pushregs_
1e634     18 F0 07 F1 | 	add	ptra, #24
1e638     50 E5 BE FD | 	call	#_pop
1e63c     FD 26 02 F6 | 	mov	local01, result1
1e640     FE 28 02 F6 | 	mov	local02, result2
1e644     FF 2A 02 F6 | 	mov	local03, result3
1e648     0C 4E 05 F1 | 	add	fp, #12
1e64c     A7 26 62 FC | 	wrlong	local01, fp
1e650     04 4E 05 F1 | 	add	fp, #4
1e654     A7 28 62 FC | 	wrlong	local02, fp
1e658     04 4E 05 F1 | 	add	fp, #4
1e65c     A7 2A 62 FC | 	wrlong	local03, fp
1e660     14 4E 85 F1 | 	sub	fp, #20
1e664     24 E5 BE FD | 	call	#_pop
1e668     FF 2A 02 F6 | 	mov	local03, result3
1e66c     A7 FA 61 FC | 	wrlong	result1, fp
1e670     04 4E 05 F1 | 	add	fp, #4
1e674     A7 FC 61 FC | 	wrlong	result2, fp
1e678     04 4E 05 F1 | 	add	fp, #4
1e67c     A7 2A 62 FC | 	wrlong	local03, fp
1e680                 | ' 
1e680                 | ' t2=pop()
1e680                 | ' t1=pop()
1e680                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1e680     08 4E 85 F1 | 	sub	fp, #8
1e684     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e688     14 4E 05 A1 |  if_e	add	fp, #20
1e68c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e690     14 4E 85 A1 |  if_e	sub	fp, #20
1e694     16 2B 02 A6 |  if_e	mov	local03, local04
1e698     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e69c     28 00 90 5D |  if_ne	jmp	#LR__2460
1e6a0     00 26 06 F6 | 	mov	local01, #0
1e6a4     A7 12 02 FB | 	rdlong	arg01, fp
1e6a8     0C 4E 05 F1 | 	add	fp, #12
1e6ac     A7 14 02 FB | 	rdlong	arg02, fp
1e6b0     0C 4E 85 F1 | 	sub	fp, #12
1e6b4     44 68 B0 FD | 	call	#__system___string_cmp
1e6b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e6bc     00 26 26 56 |  if_ne	not	local01, #0
1e6c0     A7 26 62 FC | 	wrlong	local01, fp
1e6c4     20 04 90 FD | 	jmp	#LR__2473
1e6c8                 | LR__2460
1e6c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1e6c8     08 4E 05 F1 | 	add	fp, #8
1e6cc     A7 26 02 FB | 	rdlong	local01, fp
1e6d0     08 4E 85 F1 | 	sub	fp, #8
1e6d4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e6d8     14 4E 05 A1 |  if_e	add	fp, #20
1e6dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e6e4     16 2B 02 A6 |  if_e	mov	local03, local04
1e6e8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e6ec     2C 00 90 5D |  if_ne	jmp	#LR__2461
1e6f0     00 26 06 F6 | 	mov	local01, #0
1e6f4     A7 12 02 FB | 	rdlong	arg01, fp
1e6f8     0C 4E 05 F1 | 	add	fp, #12
1e6fc     A7 14 02 FB | 	rdlong	arg02, fp
1e700     0C 4E 85 F1 | 	sub	fp, #12
1e704     01 16 06 F6 | 	mov	arg03, #1
1e708     78 9A B0 FD | 	call	#__system___float_cmp
1e70c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e710     00 26 26 56 |  if_ne	not	local01, #0
1e714     A7 26 62 FC | 	wrlong	local01, fp
1e718     CC 03 90 FD | 	jmp	#LR__2473
1e71c                 | LR__2461
1e71c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1e71c     08 4E 05 F1 | 	add	fp, #8
1e720     A7 26 02 FB | 	rdlong	local01, fp
1e724     08 4E 85 F1 | 	sub	fp, #8
1e728     1E 26 0E F2 | 	cmp	local01, #30 wz
1e72c     14 4E 05 A1 |  if_e	add	fp, #20
1e730     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e734     14 4E 85 A1 |  if_e	sub	fp, #20
1e738     16 2B 02 A6 |  if_e	mov	local03, local04
1e73c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e740     48 00 90 5D |  if_ne	jmp	#LR__2462
1e744     00 26 06 F6 | 	mov	local01, #0
1e748     A7 28 02 FB | 	rdlong	local02, fp
1e74c     0C 4E 05 F1 | 	add	fp, #12
1e750     A7 12 02 FB | 	rdlong	arg01, fp
1e754     0C 4E 85 F1 | 	sub	fp, #12
1e758     09 13 52 F6 | 	abs	arg01, arg01 wc
1e75c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e760     00 2E 06 36 |  if_ae	mov	local05, #0
1e764     E4 91 B0 FD | 	call	#__system___float_fromuns
1e768     17 FB 61 F5 | 	xor	result1, local05
1e76c     FD 14 02 F6 | 	mov	arg02, result1
1e770     14 13 02 F6 | 	mov	arg01, local02
1e774     01 16 06 F6 | 	mov	arg03, #1
1e778     08 9A B0 FD | 	call	#__system___float_cmp
1e77c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e780     00 26 26 56 |  if_ne	not	local01, #0
1e784     A7 26 62 FC | 	wrlong	local01, fp
1e788     5C 03 90 FD | 	jmp	#LR__2473
1e78c                 | LR__2462
1e78c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1e78c     08 4E 05 F1 | 	add	fp, #8
1e790     A7 26 02 FB | 	rdlong	local01, fp
1e794     08 4E 85 F1 | 	sub	fp, #8
1e798     1E 26 0E F2 | 	cmp	local01, #30 wz
1e79c     14 4E 05 A1 |  if_e	add	fp, #20
1e7a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e7a8     16 2B 02 A6 |  if_e	mov	local03, local04
1e7ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e7b0     38 00 90 5D |  if_ne	jmp	#LR__2463
1e7b4     00 26 06 F6 | 	mov	local01, #0
1e7b8     A7 28 02 FB | 	rdlong	local02, fp
1e7bc     0C 4E 05 F1 | 	add	fp, #12
1e7c0     A7 12 02 FB | 	rdlong	arg01, fp
1e7c4     0C 4E 85 F1 | 	sub	fp, #12
1e7c8     80 91 B0 FD | 	call	#__system___float_fromuns
1e7cc     FD 14 02 F6 | 	mov	arg02, result1
1e7d0     14 13 02 F6 | 	mov	arg01, local02
1e7d4     01 16 06 F6 | 	mov	arg03, #1
1e7d8     A8 99 B0 FD | 	call	#__system___float_cmp
1e7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7e0     00 26 26 56 |  if_ne	not	local01, #0
1e7e4     A7 26 62 FC | 	wrlong	local01, fp
1e7e8     FC 02 90 FD | 	jmp	#LR__2473
1e7ec                 | LR__2463
1e7ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1e7ec     08 4E 05 F1 | 	add	fp, #8
1e7f0     A7 26 02 FB | 	rdlong	local01, fp
1e7f4     08 4E 85 F1 | 	sub	fp, #8
1e7f8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e7fc     14 4E 05 A1 |  if_e	add	fp, #20
1e800     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e804     14 4E 85 A1 |  if_e	sub	fp, #20
1e808     16 2B 02 A6 |  if_e	mov	local03, local04
1e80c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e810     44 00 90 5D |  if_ne	jmp	#LR__2464
1e814     00 26 06 F6 | 	mov	local01, #0
1e818     A7 12 02 FB | 	rdlong	arg01, fp
1e81c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e820     1F 2E C6 C9 |  if_b	decod	local05, #31
1e824     00 2E 06 36 |  if_ae	mov	local05, #0
1e828     20 91 B0 FD | 	call	#__system___float_fromuns
1e82c     17 FB 61 F5 | 	xor	result1, local05
1e830     FD 12 02 F6 | 	mov	arg01, result1
1e834     0C 4E 05 F1 | 	add	fp, #12
1e838     A7 14 02 FB | 	rdlong	arg02, fp
1e83c     0C 4E 85 F1 | 	sub	fp, #12
1e840     01 16 06 F6 | 	mov	arg03, #1
1e844     3C 99 B0 FD | 	call	#__system___float_cmp
1e848     00 FA 0D F2 | 	cmp	result1, #0 wz
1e84c     00 26 26 56 |  if_ne	not	local01, #0
1e850     A7 26 62 FC | 	wrlong	local01, fp
1e854     90 02 90 FD | 	jmp	#LR__2473
1e858                 | LR__2464
1e858                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1e858     08 4E 05 F1 | 	add	fp, #8
1e85c     A7 26 02 FB | 	rdlong	local01, fp
1e860     08 4E 85 F1 | 	sub	fp, #8
1e864     1C 26 0E F2 | 	cmp	local01, #28 wz
1e868     14 4E 05 A1 |  if_e	add	fp, #20
1e86c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e870     14 4E 85 A1 |  if_e	sub	fp, #20
1e874     16 2B 02 A6 |  if_e	mov	local03, local04
1e878     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e87c     24 00 90 5D |  if_ne	jmp	#LR__2465
1e880     00 26 06 F6 | 	mov	local01, #0
1e884     A7 28 02 FB | 	rdlong	local02, fp
1e888     0C 4E 05 F1 | 	add	fp, #12
1e88c     A7 2A 02 FB | 	rdlong	local03, fp
1e890     0C 4E 85 F1 | 	sub	fp, #12
1e894     15 29 0A F2 | 	cmp	local02, local03 wz
1e898     01 26 66 56 |  if_ne	neg	local01, #1
1e89c     A7 26 62 FC | 	wrlong	local01, fp
1e8a0     44 02 90 FD | 	jmp	#LR__2473
1e8a4                 | LR__2465
1e8a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1e8a4     08 4E 05 F1 | 	add	fp, #8
1e8a8     A7 26 02 FB | 	rdlong	local01, fp
1e8ac     08 4E 85 F1 | 	sub	fp, #8
1e8b0     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8b4     14 4E 05 A1 |  if_e	add	fp, #20
1e8b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8bc     14 4E 85 A1 |  if_e	sub	fp, #20
1e8c0     16 2B 02 A6 |  if_e	mov	local03, local04
1e8c4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e8c8     24 00 90 5D |  if_ne	jmp	#LR__2466
1e8cc     00 26 06 F6 | 	mov	local01, #0
1e8d0     A7 28 02 FB | 	rdlong	local02, fp
1e8d4     0C 4E 05 F1 | 	add	fp, #12
1e8d8     A7 2A 02 FB | 	rdlong	local03, fp
1e8dc     0C 4E 85 F1 | 	sub	fp, #12
1e8e0     15 29 0A F2 | 	cmp	local02, local03 wz
1e8e4     01 26 66 56 |  if_ne	neg	local01, #1
1e8e8     A7 26 62 FC | 	wrlong	local01, fp
1e8ec     F8 01 90 FD | 	jmp	#LR__2473
1e8f0                 | LR__2466
1e8f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1e8f0     08 4E 05 F1 | 	add	fp, #8
1e8f4     A7 26 02 FB | 	rdlong	local01, fp
1e8f8     08 4E 85 F1 | 	sub	fp, #8
1e8fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1e900     14 4E 05 A1 |  if_e	add	fp, #20
1e904     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e908     14 4E 85 A1 |  if_e	sub	fp, #20
1e90c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e910     34 00 90 5D |  if_ne	jmp	#LR__2467
1e914     00 26 06 F6 | 	mov	local01, #0
1e918     A7 12 02 FB | 	rdlong	arg01, fp
1e91c     2C 90 B0 FD | 	call	#__system___float_fromuns
1e920     FD 12 02 F6 | 	mov	arg01, result1
1e924     0C 4E 05 F1 | 	add	fp, #12
1e928     A7 14 02 FB | 	rdlong	arg02, fp
1e92c     0C 4E 85 F1 | 	sub	fp, #12
1e930     01 16 06 F6 | 	mov	arg03, #1
1e934     4C 98 B0 FD | 	call	#__system___float_cmp
1e938     00 FA 0D F2 | 	cmp	result1, #0 wz
1e93c     00 26 26 56 |  if_ne	not	local01, #0
1e940     A7 26 62 FC | 	wrlong	local01, fp
1e944     A0 01 90 FD | 	jmp	#LR__2473
1e948                 | LR__2467
1e948                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1e948     08 4E 05 F1 | 	add	fp, #8
1e94c     A7 26 02 FB | 	rdlong	local01, fp
1e950     08 4E 85 F1 | 	sub	fp, #8
1e954     1D 26 0E F2 | 	cmp	local01, #29 wz
1e958     14 4E 05 A1 |  if_e	add	fp, #20
1e95c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e960     14 4E 85 A1 |  if_e	sub	fp, #20
1e964     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e968     24 00 90 5D |  if_ne	jmp	#LR__2468
1e96c     00 26 06 F6 | 	mov	local01, #0
1e970     A7 28 02 FB | 	rdlong	local02, fp
1e974     0C 4E 05 F1 | 	add	fp, #12
1e978     A7 2A 02 FB | 	rdlong	local03, fp
1e97c     0C 4E 85 F1 | 	sub	fp, #12
1e980     15 29 0A F2 | 	cmp	local02, local03 wz
1e984     01 26 66 56 |  if_ne	neg	local01, #1
1e988     A7 26 62 FC | 	wrlong	local01, fp
1e98c     58 01 90 FD | 	jmp	#LR__2473
1e990                 | LR__2468
1e990                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1e990     08 4E 05 F1 | 	add	fp, #8
1e994     A7 26 02 FB | 	rdlong	local01, fp
1e998     08 4E 85 F1 | 	sub	fp, #8
1e99c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9a0     14 4E 05 A1 |  if_e	add	fp, #20
1e9a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9a8     14 4E 85 A1 |  if_e	sub	fp, #20
1e9ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e9b0     24 00 90 5D |  if_ne	jmp	#LR__2469
1e9b4     00 26 06 F6 | 	mov	local01, #0
1e9b8     A7 28 02 FB | 	rdlong	local02, fp
1e9bc     0C 4E 05 F1 | 	add	fp, #12
1e9c0     A7 2A 02 FB | 	rdlong	local03, fp
1e9c4     0C 4E 85 F1 | 	sub	fp, #12
1e9c8     15 29 0A F2 | 	cmp	local02, local03 wz
1e9cc     01 26 66 56 |  if_ne	neg	local01, #1
1e9d0     A7 26 62 FC | 	wrlong	local01, fp
1e9d4     10 01 90 FD | 	jmp	#LR__2473
1e9d8                 | LR__2469
1e9d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1e9d8     08 4E 05 F1 | 	add	fp, #8
1e9dc     A7 26 02 FB | 	rdlong	local01, fp
1e9e0     08 4E 85 F1 | 	sub	fp, #8
1e9e4     2B 26 0E F2 | 	cmp	local01, #43 wz
1e9e8     14 4E 05 A1 |  if_e	add	fp, #20
1e9ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9f0     14 4E 85 A1 |  if_e	sub	fp, #20
1e9f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e9f8     30 00 90 5D |  if_ne	jmp	#LR__2470
1e9fc     00 26 06 F6 | 	mov	local01, #0
1ea00     A7 12 02 FB | 	rdlong	arg01, fp
1ea04     FC E2 BE FD | 	call	#_convertstring
1ea08     FD 12 02 F6 | 	mov	arg01, result1
1ea0c     0C 4E 05 F1 | 	add	fp, #12
1ea10     A7 14 02 FB | 	rdlong	arg02, fp
1ea14     0C 4E 85 F1 | 	sub	fp, #12
1ea18     E0 64 B0 FD | 	call	#__system___string_cmp
1ea1c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea20     00 26 26 56 |  if_ne	not	local01, #0
1ea24     A7 26 62 FC | 	wrlong	local01, fp
1ea28     BC 00 90 FD | 	jmp	#LR__2473
1ea2c                 | LR__2470
1ea2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1ea2c     08 4E 05 F1 | 	add	fp, #8
1ea30     A7 26 02 FB | 	rdlong	local01, fp
1ea34     08 4E 85 F1 | 	sub	fp, #8
1ea38     1F 26 0E F2 | 	cmp	local01, #31 wz
1ea3c     14 4E 05 A1 |  if_e	add	fp, #20
1ea40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea44     14 4E 85 A1 |  if_e	sub	fp, #20
1ea48     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ea4c     34 00 90 5D |  if_ne	jmp	#LR__2471
1ea50     00 26 06 F6 | 	mov	local01, #0
1ea54     A7 28 02 FB | 	rdlong	local02, fp
1ea58     0C 4E 05 F1 | 	add	fp, #12
1ea5c     A7 12 02 FB | 	rdlong	arg01, fp
1ea60     0C 4E 85 F1 | 	sub	fp, #12
1ea64     9C E2 BE FD | 	call	#_convertstring
1ea68     FD 14 02 F6 | 	mov	arg02, result1
1ea6c     14 13 02 F6 | 	mov	arg01, local02
1ea70     88 64 B0 FD | 	call	#__system___string_cmp
1ea74     00 FA 0D F2 | 	cmp	result1, #0 wz
1ea78     00 26 26 56 |  if_ne	not	local01, #0
1ea7c     A7 26 62 FC | 	wrlong	local01, fp
1ea80     64 00 90 FD | 	jmp	#LR__2473
1ea84                 | LR__2471
1ea84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1ea84     08 4E 05 F1 | 	add	fp, #8
1ea88     A7 26 02 FB | 	rdlong	local01, fp
1ea8c     08 4E 85 F1 | 	sub	fp, #8
1ea90     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea94     14 4E 05 A1 |  if_e	add	fp, #20
1ea98     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea9c     14 4E 85 A1 |  if_e	sub	fp, #20
1eaa0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eaa4     3C 00 90 5D |  if_ne	jmp	#LR__2472
1eaa8     00 26 06 F6 | 	mov	local01, #0
1eaac     A7 12 02 FB | 	rdlong	arg01, fp
1eab0     50 E2 BE FD | 	call	#_convertstring
1eab4     FD 28 02 F6 | 	mov	local02, result1
1eab8     0C 4E 05 F1 | 	add	fp, #12
1eabc     A7 12 02 FB | 	rdlong	arg01, fp
1eac0     0C 4E 85 F1 | 	sub	fp, #12
1eac4     3C E2 BE FD | 	call	#_convertstring
1eac8     FD 14 02 F6 | 	mov	arg02, result1
1eacc     14 13 02 F6 | 	mov	arg01, local02
1ead0     28 64 B0 FD | 	call	#__system___string_cmp
1ead4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ead8     00 26 26 56 |  if_ne	not	local01, #0
1eadc     A7 26 62 FC | 	wrlong	local01, fp
1eae0     04 00 90 FD | 	jmp	#LR__2473
1eae4                 | LR__2472
1eae4     A7 00 68 FC | 	wrlong	#0, fp
1eae8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eae8                 | LR__2473
1eae8     08 4E 05 F1 | 	add	fp, #8
1eaec     A7 38 68 FC | 	wrlong	#28, fp
1eaf0     08 4E 85 F1 | 	sub	fp, #8
1eaf4     A7 12 02 F6 | 	mov	arg01, fp
1eaf8     28 E1 BE FD | 	call	#_push
1eafc     A7 F0 03 F6 | 	mov	ptra, fp
1eb00     B2 00 A0 FD | 	call	#popregs_
1eb04                 | _do_ne_ret
1eb04     2D 00 64 FD | 	ret
1eb08                 | 
1eb08                 | ' 
1eb08                 | ' '--------------------------------- OR
1eb08                 | ' 
1eb08                 | ' sub do_or 
1eb08                 | _do_or
1eb08     03 4A 05 F6 | 	mov	COUNT_, #3
1eb0c     A8 00 A0 FD | 	call	#pushregs_
1eb10     18 F0 07 F1 | 	add	ptra, #24
1eb14     74 E0 BE FD | 	call	#_pop
1eb18     FD 12 02 F6 | 	mov	arg01, result1
1eb1c     FE 26 02 F6 | 	mov	local01, result2
1eb20     FF 28 02 F6 | 	mov	local02, result3
1eb24     0C 4E 05 F1 | 	add	fp, #12
1eb28     A7 12 62 FC | 	wrlong	arg01, fp
1eb2c     04 4E 05 F1 | 	add	fp, #4
1eb30     A7 26 62 FC | 	wrlong	local01, fp
1eb34     04 4E 05 F1 | 	add	fp, #4
1eb38     A7 28 62 FC | 	wrlong	local02, fp
1eb3c     14 4E 85 F1 | 	sub	fp, #20
1eb40     48 E0 BE FD | 	call	#_pop
1eb44     FF 2A 02 F6 | 	mov	local03, result3
1eb48     A7 FA 61 FC | 	wrlong	result1, fp
1eb4c     04 4E 05 F1 | 	add	fp, #4
1eb50     A7 FC 61 FC | 	wrlong	result2, fp
1eb54     04 4E 05 F1 | 	add	fp, #4
1eb58     A7 2A 62 FC | 	wrlong	local03, fp
1eb5c                 | ' 
1eb5c                 | ' t2=pop()
1eb5c                 | ' t1=pop()
1eb5c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1eb5c     08 4E 85 F1 | 	sub	fp, #8
1eb60     1C 2A 0E F2 | 	cmp	local03, #28 wz
1eb64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb68     A7 2A 62 AC |  if_e	wrlong	local03, fp
1eb6c     08 4E 05 A1 |  if_e	add	fp, #8
1eb70     A7 3A 68 AC |  if_e	wrlong	#29, fp
1eb74     08 4E 85 A1 |  if_e	sub	fp, #8
1eb78                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1eb78     14 4E 05 F1 | 	add	fp, #20
1eb7c     A7 2A 02 FB | 	rdlong	local03, fp
1eb80     14 4E 85 F1 | 	sub	fp, #20
1eb84     1C 2A 0E F2 | 	cmp	local03, #28 wz
1eb88     18 00 90 5D |  if_ne	jmp	#LR__2480
1eb8c     0C 4E 05 F1 | 	add	fp, #12
1eb90     A7 2A 02 FB | 	rdlong	local03, fp
1eb94     A7 2A 62 FC | 	wrlong	local03, fp
1eb98     08 4E 05 F1 | 	add	fp, #8
1eb9c     A7 3A 68 FC | 	wrlong	#29, fp
1eba0     14 4E 85 F1 | 	sub	fp, #20
1eba4                 | LR__2480
1eba4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1eba4     08 4E 05 F1 | 	add	fp, #8
1eba8     A7 2A 02 FB | 	rdlong	local03, fp
1ebac     08 4E 85 F1 | 	sub	fp, #8
1ebb0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ebb4     14 4E 05 51 |  if_ne	add	fp, #20
1ebb8     A7 28 02 5B |  if_ne	rdlong	local02, fp
1ebbc     14 4E 85 51 |  if_ne	sub	fp, #20
1ebc0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1ebc4     08 4E 05 51 |  if_ne	add	fp, #8
1ebc8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ebcc     08 4E 85 51 |  if_ne	sub	fp, #8
1ebd0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1ebd4     14 4E 05 51 |  if_ne	add	fp, #20
1ebd8     14 4E 85 51 |  if_ne	sub	fp, #20
1ebdc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1ebe0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1ebe4     08 4E 05 A1 |  if_e	add	fp, #8
1ebe8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ebec     08 4E 85 A1 |  if_e	sub	fp, #8
1ebf0     18 00 90 AD |  if_e	jmp	#LR__2481
1ebf4     A7 2A 02 FB | 	rdlong	local03, fp
1ebf8     0C 4E 05 F1 | 	add	fp, #12
1ebfc     A7 26 02 FB | 	rdlong	local01, fp
1ec00     0C 4E 85 F1 | 	sub	fp, #12
1ec04     13 2B 42 F5 | 	or	local03, local01
1ec08     A7 2A 62 FC | 	wrlong	local03, fp
1ec0c                 | LR__2481
1ec0c     A7 12 02 F6 | 	mov	arg01, fp
1ec10     10 E0 BE FD | 	call	#_push
1ec14     A7 F0 03 F6 | 	mov	ptra, fp
1ec18     B2 00 A0 FD | 	call	#popregs_
1ec1c                 | _do_or_ret
1ec1c     2D 00 64 FD | 	ret
1ec20                 | 
1ec20                 | ' 
1ec20                 | ' '--------------------------------- plus (+)
1ec20                 | ' 
1ec20                 | ' sub do_plus 
1ec20                 | _do_plus
1ec20     05 4A 05 F6 | 	mov	COUNT_, #5
1ec24     A8 00 A0 FD | 	call	#pushregs_
1ec28     18 F0 07 F1 | 	add	ptra, #24
1ec2c     5C DF BE FD | 	call	#_pop
1ec30     FD 26 02 F6 | 	mov	local01, result1
1ec34     FE 28 02 F6 | 	mov	local02, result2
1ec38     FF 2A 02 F6 | 	mov	local03, result3
1ec3c     0C 4E 05 F1 | 	add	fp, #12
1ec40     A7 26 62 FC | 	wrlong	local01, fp
1ec44     04 4E 05 F1 | 	add	fp, #4
1ec48     A7 28 62 FC | 	wrlong	local02, fp
1ec4c     04 4E 05 F1 | 	add	fp, #4
1ec50     A7 2A 62 FC | 	wrlong	local03, fp
1ec54     14 4E 85 F1 | 	sub	fp, #20
1ec58     30 DF BE FD | 	call	#_pop
1ec5c     FF 2A 02 F6 | 	mov	local03, result3
1ec60     A7 FA 61 FC | 	wrlong	result1, fp
1ec64     04 4E 05 F1 | 	add	fp, #4
1ec68     A7 FC 61 FC | 	wrlong	result2, fp
1ec6c     04 4E 05 F1 | 	add	fp, #4
1ec70     A7 2A 62 FC | 	wrlong	local03, fp
1ec74                 | ' 
1ec74                 | ' t2=pop()
1ec74                 | ' t1=pop()
1ec74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1ec74     08 4E 85 F1 | 	sub	fp, #8
1ec78     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ec7c     14 4E 05 A1 |  if_e	add	fp, #20
1ec80     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec84     14 4E 85 A1 |  if_e	sub	fp, #20
1ec88     16 2B 02 A6 |  if_e	mov	local03, local04
1ec8c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ec90     1C 00 90 5D |  if_ne	jmp	#LR__2490
1ec94     A7 26 02 FB | 	rdlong	local01, fp
1ec98     0C 4E 05 F1 | 	add	fp, #12
1ec9c     A7 28 02 FB | 	rdlong	local02, fp
1eca0     0C 4E 85 F1 | 	sub	fp, #12
1eca4     14 27 02 F1 | 	add	local01, local02
1eca8     A7 26 62 FC | 	wrlong	local01, fp
1ecac     48 04 90 FD | 	jmp	#LR__2505
1ecb0                 | LR__2490
1ecb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1ecb0     08 4E 05 F1 | 	add	fp, #8
1ecb4     A7 26 02 FB | 	rdlong	local01, fp
1ecb8     08 4E 85 F1 | 	sub	fp, #8
1ecbc     1D 26 0E F2 | 	cmp	local01, #29 wz
1ecc0     14 4E 05 A1 |  if_e	add	fp, #20
1ecc4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecc8     14 4E 85 A1 |  if_e	sub	fp, #20
1eccc     16 2B 02 A6 |  if_e	mov	local03, local04
1ecd0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ecd4     28 00 90 5D |  if_ne	jmp	#LR__2491
1ecd8     A7 26 02 FB | 	rdlong	local01, fp
1ecdc     0C 4E 05 F1 | 	add	fp, #12
1ece0     A7 28 02 FB | 	rdlong	local02, fp
1ece4     0C 4E 85 F1 | 	sub	fp, #12
1ece8     14 27 02 F1 | 	add	local01, local02
1ecec     A7 26 62 FC | 	wrlong	local01, fp
1ecf0     08 4E 05 F1 | 	add	fp, #8
1ecf4     A7 38 68 FC | 	wrlong	#28, fp
1ecf8     08 4E 85 F1 | 	sub	fp, #8
1ecfc     F8 03 90 FD | 	jmp	#LR__2505
1ed00                 | LR__2491
1ed00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ed00     08 4E 05 F1 | 	add	fp, #8
1ed04     A7 26 02 FB | 	rdlong	local01, fp
1ed08     08 4E 85 F1 | 	sub	fp, #8
1ed0c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ed10     14 4E 05 A1 |  if_e	add	fp, #20
1ed14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed18     14 4E 85 A1 |  if_e	sub	fp, #20
1ed1c     16 2B 02 A6 |  if_e	mov	local03, local04
1ed20     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed24     30 00 90 5D |  if_ne	jmp	#LR__2492
1ed28     A7 12 02 FB | 	rdlong	arg01, fp
1ed2c     1C 8C B0 FD | 	call	#__system___float_fromuns
1ed30     FD 12 02 F6 | 	mov	arg01, result1
1ed34     0C 4E 05 F1 | 	add	fp, #12
1ed38     A7 14 02 FB | 	rdlong	arg02, fp
1ed3c     0C 4E 85 F1 | 	sub	fp, #12
1ed40     3C 8C B0 FD | 	call	#__system___float_add
1ed44     A7 FA 61 FC | 	wrlong	result1, fp
1ed48     08 4E 05 F1 | 	add	fp, #8
1ed4c     A7 3C 68 FC | 	wrlong	#30, fp
1ed50     08 4E 85 F1 | 	sub	fp, #8
1ed54     A0 03 90 FD | 	jmp	#LR__2505
1ed58                 | LR__2492
1ed58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ed58     08 4E 05 F1 | 	add	fp, #8
1ed5c     A7 26 02 FB | 	rdlong	local01, fp
1ed60     08 4E 85 F1 | 	sub	fp, #8
1ed64     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed68     14 4E 05 A1 |  if_e	add	fp, #20
1ed6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed70     14 4E 85 A1 |  if_e	sub	fp, #20
1ed74     16 2B 02 A6 |  if_e	mov	local03, local04
1ed78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed7c     1C 00 90 5D |  if_ne	jmp	#LR__2493
1ed80     A7 26 02 FB | 	rdlong	local01, fp
1ed84     0C 4E 05 F1 | 	add	fp, #12
1ed88     A7 28 02 FB | 	rdlong	local02, fp
1ed8c     0C 4E 85 F1 | 	sub	fp, #12
1ed90     14 27 02 F1 | 	add	local01, local02
1ed94     A7 26 62 FC | 	wrlong	local01, fp
1ed98     5C 03 90 FD | 	jmp	#LR__2505
1ed9c                 | LR__2493
1ed9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1ed9c     08 4E 05 F1 | 	add	fp, #8
1eda0     A7 26 02 FB | 	rdlong	local01, fp
1eda4     08 4E 85 F1 | 	sub	fp, #8
1eda8     1C 26 0E F2 | 	cmp	local01, #28 wz
1edac     14 4E 05 A1 |  if_e	add	fp, #20
1edb0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edb4     14 4E 85 A1 |  if_e	sub	fp, #20
1edb8     16 2B 02 A6 |  if_e	mov	local03, local04
1edbc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1edc0     1C 00 90 5D |  if_ne	jmp	#LR__2494
1edc4     A7 26 02 FB | 	rdlong	local01, fp
1edc8     0C 4E 05 F1 | 	add	fp, #12
1edcc     A7 28 02 FB | 	rdlong	local02, fp
1edd0     0C 4E 85 F1 | 	sub	fp, #12
1edd4     14 27 02 F1 | 	add	local01, local02
1edd8     A7 26 62 FC | 	wrlong	local01, fp
1eddc     18 03 90 FD | 	jmp	#LR__2505
1ede0                 | LR__2494
1ede0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ede0     08 4E 05 F1 | 	add	fp, #8
1ede4     A7 26 02 FB | 	rdlong	local01, fp
1ede8     08 4E 85 F1 | 	sub	fp, #8
1edec     1C 26 0E F2 | 	cmp	local01, #28 wz
1edf0     14 4E 05 A1 |  if_e	add	fp, #20
1edf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edf8     14 4E 85 A1 |  if_e	sub	fp, #20
1edfc     16 2B 02 A6 |  if_e	mov	local03, local04
1ee00     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee04     40 00 90 5D |  if_ne	jmp	#LR__2495
1ee08     A7 12 02 FB | 	rdlong	arg01, fp
1ee0c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee10     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee14     00 2E 06 36 |  if_ae	mov	local05, #0
1ee18     30 8B B0 FD | 	call	#__system___float_fromuns
1ee1c     17 FB 61 F5 | 	xor	result1, local05
1ee20     FD 12 02 F6 | 	mov	arg01, result1
1ee24     0C 4E 05 F1 | 	add	fp, #12
1ee28     A7 14 02 FB | 	rdlong	arg02, fp
1ee2c     0C 4E 85 F1 | 	sub	fp, #12
1ee30     4C 8B B0 FD | 	call	#__system___float_add
1ee34     A7 FA 61 FC | 	wrlong	result1, fp
1ee38     08 4E 05 F1 | 	add	fp, #8
1ee3c     A7 3C 68 FC | 	wrlong	#30, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     B0 02 90 FD | 	jmp	#LR__2505
1ee48                 | LR__2495
1ee48                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1ee48     08 4E 05 F1 | 	add	fp, #8
1ee4c     A7 26 02 FB | 	rdlong	local01, fp
1ee50     08 4E 85 F1 | 	sub	fp, #8
1ee54     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee58     14 4E 05 A1 |  if_e	add	fp, #20
1ee5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee60     14 4E 85 A1 |  if_e	sub	fp, #20
1ee64     16 2B 02 A6 |  if_e	mov	local03, local04
1ee68     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee6c     28 00 90 5D |  if_ne	jmp	#LR__2496
1ee70     A7 26 02 FB | 	rdlong	local01, fp
1ee74     0C 4E 05 F1 | 	add	fp, #12
1ee78     A7 12 02 FB | 	rdlong	arg01, fp
1ee7c     0C 4E 85 F1 | 	sub	fp, #12
1ee80     C8 8A B0 FD | 	call	#__system___float_fromuns
1ee84     FD 14 02 F6 | 	mov	arg02, result1
1ee88     13 13 02 F6 | 	mov	arg01, local01
1ee8c     F0 8A B0 FD | 	call	#__system___float_add
1ee90     A7 FA 61 FC | 	wrlong	result1, fp
1ee94     60 02 90 FD | 	jmp	#LR__2505
1ee98                 | LR__2496
1ee98                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1ee98     08 4E 05 F1 | 	add	fp, #8
1ee9c     A7 26 02 FB | 	rdlong	local01, fp
1eea0     08 4E 85 F1 | 	sub	fp, #8
1eea4     1E 26 0E F2 | 	cmp	local01, #30 wz
1eea8     14 4E 05 A1 |  if_e	add	fp, #20
1eeac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eeb0     14 4E 85 A1 |  if_e	sub	fp, #20
1eeb4     16 2B 02 A6 |  if_e	mov	local03, local04
1eeb8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eebc     38 00 90 5D |  if_ne	jmp	#LR__2497
1eec0     A7 26 02 FB | 	rdlong	local01, fp
1eec4     0C 4E 05 F1 | 	add	fp, #12
1eec8     A7 12 02 FB | 	rdlong	arg01, fp
1eecc     0C 4E 85 F1 | 	sub	fp, #12
1eed0     09 13 52 F6 | 	abs	arg01, arg01 wc
1eed4     1F 2E C6 C9 |  if_b	decod	local05, #31
1eed8     00 2E 06 36 |  if_ae	mov	local05, #0
1eedc     6C 8A B0 FD | 	call	#__system___float_fromuns
1eee0     17 FB 61 F5 | 	xor	result1, local05
1eee4     FD 14 02 F6 | 	mov	arg02, result1
1eee8     13 13 02 F6 | 	mov	arg01, local01
1eeec     90 8A B0 FD | 	call	#__system___float_add
1eef0     A7 FA 61 FC | 	wrlong	result1, fp
1eef4     00 02 90 FD | 	jmp	#LR__2505
1eef8                 | LR__2497
1eef8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1eef8     08 4E 05 F1 | 	add	fp, #8
1eefc     A7 26 02 FB | 	rdlong	local01, fp
1ef00     08 4E 85 F1 | 	sub	fp, #8
1ef04     1E 26 0E F2 | 	cmp	local01, #30 wz
1ef08     14 4E 05 A1 |  if_e	add	fp, #20
1ef0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef10     14 4E 85 A1 |  if_e	sub	fp, #20
1ef14     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ef18     1C 00 90 5D |  if_ne	jmp	#LR__2498
1ef1c     A7 12 02 FB | 	rdlong	arg01, fp
1ef20     0C 4E 05 F1 | 	add	fp, #12
1ef24     A7 14 02 FB | 	rdlong	arg02, fp
1ef28     0C 4E 85 F1 | 	sub	fp, #12
1ef2c     50 8A B0 FD | 	call	#__system___float_add
1ef30     A7 FA 61 FC | 	wrlong	result1, fp
1ef34     C0 01 90 FD | 	jmp	#LR__2505
1ef38                 | LR__2498
1ef38                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ef38     08 4E 05 F1 | 	add	fp, #8
1ef3c     A7 26 02 FB | 	rdlong	local01, fp
1ef40     08 4E 85 F1 | 	sub	fp, #8
1ef44     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef48     24 00 90 5D |  if_ne	jmp	#LR__2499
1ef4c     14 4E 05 F1 | 	add	fp, #20
1ef50     A7 2A 02 FB | 	rdlong	local03, fp
1ef54     14 4E 85 F1 | 	sub	fp, #20
1ef58     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ef5c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ef60     08 4E 05 51 |  if_ne	add	fp, #8
1ef64     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ef68     08 4E 85 51 |  if_ne	sub	fp, #8
1ef6c     88 01 90 5D |  if_ne	jmp	#LR__2505
1ef70                 | LR__2499
1ef70                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ef70     14 4E 05 F1 | 	add	fp, #20
1ef74     A7 26 02 FB | 	rdlong	local01, fp
1ef78     14 4E 85 F1 | 	sub	fp, #20
1ef7c     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef80     24 00 90 5D |  if_ne	jmp	#LR__2500
1ef84     08 4E 05 F1 | 	add	fp, #8
1ef88     A7 2A 02 FB | 	rdlong	local03, fp
1ef8c     08 4E 85 F1 | 	sub	fp, #8
1ef90     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ef94     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ef98     08 4E 05 51 |  if_ne	add	fp, #8
1ef9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1efa0     08 4E 85 51 |  if_ne	sub	fp, #8
1efa4     50 01 90 5D |  if_ne	jmp	#LR__2505
1efa8                 | LR__2500
1efa8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1efa8     08 4E 05 F1 | 	add	fp, #8
1efac     A7 26 02 FB | 	rdlong	local01, fp
1efb0     08 4E 85 F1 | 	sub	fp, #8
1efb4     1F 26 0E F2 | 	cmp	local01, #31 wz
1efb8     14 4E 05 A1 |  if_e	add	fp, #20
1efbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efc0     14 4E 85 A1 |  if_e	sub	fp, #20
1efc4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1efc8     1C 00 90 5D |  if_ne	jmp	#LR__2501
1efcc     A7 12 02 FB | 	rdlong	arg01, fp
1efd0     0C 4E 05 F1 | 	add	fp, #12
1efd4     A7 14 02 FB | 	rdlong	arg02, fp
1efd8     0C 4E 85 F1 | 	sub	fp, #12
1efdc     50 5F B0 FD | 	call	#__system___string_concat
1efe0     A7 FA 61 FC | 	wrlong	result1, fp
1efe4     10 01 90 FD | 	jmp	#LR__2505
1efe8                 | LR__2501
1efe8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1efe8     08 4E 05 F1 | 	add	fp, #8
1efec     A7 26 02 FB | 	rdlong	local01, fp
1eff0     08 4E 85 F1 | 	sub	fp, #8
1eff4     2B 26 0E F2 | 	cmp	local01, #43 wz
1eff8     14 4E 05 A1 |  if_e	add	fp, #20
1effc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f000     14 4E 85 A1 |  if_e	sub	fp, #20
1f004     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f008     30 00 90 5D |  if_ne	jmp	#LR__2502
1f00c     A7 12 02 FB | 	rdlong	arg01, fp
1f010     F0 DC BE FD | 	call	#_convertstring
1f014     FD 12 02 F6 | 	mov	arg01, result1
1f018     0C 4E 05 F1 | 	add	fp, #12
1f01c     A7 14 02 FB | 	rdlong	arg02, fp
1f020     0C 4E 85 F1 | 	sub	fp, #12
1f024     08 5F B0 FD | 	call	#__system___string_concat
1f028     A7 FA 61 FC | 	wrlong	result1, fp
1f02c     08 4E 05 F1 | 	add	fp, #8
1f030     A7 3E 68 FC | 	wrlong	#31, fp
1f034     08 4E 85 F1 | 	sub	fp, #8
1f038     BC 00 90 FD | 	jmp	#LR__2505
1f03c                 | LR__2502
1f03c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1f03c     08 4E 05 F1 | 	add	fp, #8
1f040     A7 26 02 FB | 	rdlong	local01, fp
1f044     08 4E 85 F1 | 	sub	fp, #8
1f048     1F 26 0E F2 | 	cmp	local01, #31 wz
1f04c     14 4E 05 A1 |  if_e	add	fp, #20
1f050     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f054     14 4E 85 A1 |  if_e	sub	fp, #20
1f058     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f05c     28 00 90 5D |  if_ne	jmp	#LR__2503
1f060     A7 26 02 FB | 	rdlong	local01, fp
1f064     0C 4E 05 F1 | 	add	fp, #12
1f068     A7 12 02 FB | 	rdlong	arg01, fp
1f06c     0C 4E 85 F1 | 	sub	fp, #12
1f070     90 DC BE FD | 	call	#_convertstring
1f074     FD 14 02 F6 | 	mov	arg02, result1
1f078     13 13 02 F6 | 	mov	arg01, local01
1f07c     B0 5E B0 FD | 	call	#__system___string_concat
1f080     A7 FA 61 FC | 	wrlong	result1, fp
1f084     70 00 90 FD | 	jmp	#LR__2505
1f088                 | LR__2503
1f088                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1f088     08 4E 05 F1 | 	add	fp, #8
1f08c     A7 26 02 FB | 	rdlong	local01, fp
1f090     08 4E 85 F1 | 	sub	fp, #8
1f094     2B 26 0E F2 | 	cmp	local01, #43 wz
1f098     14 4E 05 A1 |  if_e	add	fp, #20
1f09c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0a4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f0a8     3C 00 90 5D |  if_ne	jmp	#LR__2504
1f0ac     A7 12 02 FB | 	rdlong	arg01, fp
1f0b0     50 DC BE FD | 	call	#_convertstring
1f0b4     FD 26 02 F6 | 	mov	local01, result1
1f0b8     0C 4E 05 F1 | 	add	fp, #12
1f0bc     A7 12 02 FB | 	rdlong	arg01, fp
1f0c0     0C 4E 85 F1 | 	sub	fp, #12
1f0c4     3C DC BE FD | 	call	#_convertstring
1f0c8     FD 14 02 F6 | 	mov	arg02, result1
1f0cc     13 13 02 F6 | 	mov	arg01, local01
1f0d0     5C 5E B0 FD | 	call	#__system___string_concat
1f0d4     A7 FA 61 FC | 	wrlong	result1, fp
1f0d8     08 4E 05 F1 | 	add	fp, #8
1f0dc     A7 3E 68 FC | 	wrlong	#31, fp
1f0e0     08 4E 85 F1 | 	sub	fp, #8
1f0e4     10 00 90 FD | 	jmp	#LR__2505
1f0e8                 | LR__2504
1f0e8     A7 08 68 FC | 	wrlong	#4, fp
1f0ec     08 4E 05 F1 | 	add	fp, #8
1f0f0     A7 FE 69 FC | 	wrlong	#255, fp
1f0f4     08 4E 85 F1 | 	sub	fp, #8
1f0f8                 | LR__2505
1f0f8     A7 12 02 F6 | 	mov	arg01, fp
1f0fc     24 DB BE FD | 	call	#_push
1f100     A7 F0 03 F6 | 	mov	ptra, fp
1f104     B2 00 A0 FD | 	call	#popregs_
1f108                 | _do_plus_ret
1f108     2D 00 64 FD | 	ret
1f10c                 | 
1f10c                 | ' 
1f10c                 | ' '--------------------------------- power (^)
1f10c                 | ' 
1f10c                 | ' sub do_power 
1f10c                 | _do_power
1f10c     02 4A 05 F6 | 	mov	COUNT_, #2
1f110     A8 00 A0 FD | 	call	#pushregs_
1f114     18 F0 07 F1 | 	add	ptra, #24
1f118     70 DA BE FD | 	call	#_pop
1f11c     FD 14 02 F6 | 	mov	arg02, result1
1f120     FE 12 02 F6 | 	mov	arg01, result2
1f124     FF 26 02 F6 | 	mov	local01, result3
1f128     0C 4E 05 F1 | 	add	fp, #12
1f12c     A7 14 62 FC | 	wrlong	arg02, fp
1f130     04 4E 05 F1 | 	add	fp, #4
1f134     A7 12 62 FC | 	wrlong	arg01, fp
1f138     04 4E 05 F1 | 	add	fp, #4
1f13c     A7 26 62 FC | 	wrlong	local01, fp
1f140     14 4E 85 F1 | 	sub	fp, #20
1f144     44 DA BE FD | 	call	#_pop
1f148     A7 FA 61 FC | 	wrlong	result1, fp
1f14c     04 4E 05 F1 | 	add	fp, #4
1f150     A7 FC 61 FC | 	wrlong	result2, fp
1f154     04 4E 05 F1 | 	add	fp, #4
1f158     A7 FE 61 FC | 	wrlong	result3, fp
1f15c                 | ' 
1f15c                 | ' t2=pop()
1f15c                 | ' t1=pop()
1f15c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1f15c     08 4E 85 F1 | 	sub	fp, #8
1f160     1F FE 0D F2 | 	cmp	result3, #31 wz
1f164     14 4E 05 51 |  if_ne	add	fp, #20
1f168     A7 26 02 5B |  if_ne	rdlong	local01, fp
1f16c     14 4E 85 51 |  if_ne	sub	fp, #20
1f170     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1f174     A7 18 68 AC |  if_e	wrlong	#12, fp
1f178     08 4E 05 A1 |  if_e	add	fp, #8
1f17c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f180     08 4E 85 A1 |  if_e	sub	fp, #8
1f184     38 01 90 AD |  if_e	jmp	#LR__2515
1f188                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f188     08 4E 05 F1 | 	add	fp, #8
1f18c     A7 14 02 FB | 	rdlong	arg02, fp
1f190     08 4E 85 F1 | 	sub	fp, #8
1f194     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f198     28 00 90 5D |  if_ne	jmp	#LR__2510
1f19c     08 4E 05 F1 | 	add	fp, #8
1f1a0     A7 3C 68 FC | 	wrlong	#30, fp
1f1a4     08 4E 85 F1 | 	sub	fp, #8
1f1a8     A7 12 02 FB | 	rdlong	arg01, fp
1f1ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1f1b0     1F 28 C6 C9 |  if_b	decod	local02, #31
1f1b4     00 28 06 36 |  if_ae	mov	local02, #0
1f1b8     90 87 B0 FD | 	call	#__system___float_fromuns
1f1bc     14 FB 61 F5 | 	xor	result1, local02
1f1c0     A7 FA 61 FC | 	wrlong	result1, fp
1f1c4                 | LR__2510
1f1c4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1f1c4     08 4E 05 F1 | 	add	fp, #8
1f1c8     A7 14 02 FB | 	rdlong	arg02, fp
1f1cc     08 4E 85 F1 | 	sub	fp, #8
1f1d0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f1d4     18 00 90 5D |  if_ne	jmp	#LR__2511
1f1d8     08 4E 05 F1 | 	add	fp, #8
1f1dc     A7 3C 68 FC | 	wrlong	#30, fp
1f1e0     08 4E 85 F1 | 	sub	fp, #8
1f1e4     A7 12 02 FB | 	rdlong	arg01, fp
1f1e8     60 87 B0 FD | 	call	#__system___float_fromuns
1f1ec     A7 FA 61 FC | 	wrlong	result1, fp
1f1f0                 | LR__2511
1f1f0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f1f0     14 4E 05 F1 | 	add	fp, #20
1f1f4     A7 14 02 FB | 	rdlong	arg02, fp
1f1f8     14 4E 85 F1 | 	sub	fp, #20
1f1fc     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f200     34 00 90 5D |  if_ne	jmp	#LR__2512
1f204     14 4E 05 F1 | 	add	fp, #20
1f208     A7 3C 68 FC | 	wrlong	#30, fp
1f20c     08 4E 85 F1 | 	sub	fp, #8
1f210     A7 12 02 FB | 	rdlong	arg01, fp
1f214     0C 4E 85 F1 | 	sub	fp, #12
1f218     09 13 52 F6 | 	abs	arg01, arg01 wc
1f21c     1F 28 C6 C9 |  if_b	decod	local02, #31
1f220     00 28 06 36 |  if_ae	mov	local02, #0
1f224     24 87 B0 FD | 	call	#__system___float_fromuns
1f228     14 FB 61 F5 | 	xor	result1, local02
1f22c     0C 4E 05 F1 | 	add	fp, #12
1f230     A7 FA 61 FC | 	wrlong	result1, fp
1f234     0C 4E 85 F1 | 	sub	fp, #12
1f238                 | LR__2512
1f238                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f238     14 4E 05 F1 | 	add	fp, #20
1f23c     A7 14 02 FB | 	rdlong	arg02, fp
1f240     14 4E 85 F1 | 	sub	fp, #20
1f244     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f248     24 00 90 5D |  if_ne	jmp	#LR__2513
1f24c     14 4E 05 F1 | 	add	fp, #20
1f250     A7 3C 68 FC | 	wrlong	#30, fp
1f254     08 4E 85 F1 | 	sub	fp, #8
1f258     A7 12 02 FB | 	rdlong	arg01, fp
1f25c     0C 4E 85 F1 | 	sub	fp, #12
1f260     E8 86 B0 FD | 	call	#__system___float_fromuns
1f264     0C 4E 05 F1 | 	add	fp, #12
1f268     A7 FA 61 FC | 	wrlong	result1, fp
1f26c     0C 4E 85 F1 | 	sub	fp, #12
1f270                 | LR__2513
1f270                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1f270     08 4E 05 F1 | 	add	fp, #8
1f274     A7 14 02 FB | 	rdlong	arg02, fp
1f278     08 4E 85 F1 | 	sub	fp, #8
1f27c     1E 14 0E F2 | 	cmp	arg02, #30 wz
1f280     14 4E 05 A1 |  if_e	add	fp, #20
1f284     A7 26 02 AB |  if_e	rdlong	local01, fp
1f288     14 4E 85 A1 |  if_e	sub	fp, #20
1f28c     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1f290     1C 00 90 5D |  if_ne	jmp	#LR__2514
1f294     A7 12 02 FB | 	rdlong	arg01, fp
1f298     0C 4E 05 F1 | 	add	fp, #12
1f29c     A7 14 02 FB | 	rdlong	arg02, fp
1f2a0     0C 4E 85 F1 | 	sub	fp, #12
1f2a4     B0 99 B0 FD | 	call	#__system____builtin_powf
1f2a8     A7 FA 61 FC | 	wrlong	result1, fp
1f2ac     10 00 90 FD | 	jmp	#LR__2515
1f2b0                 | LR__2514
1f2b0     A7 1A 68 FC | 	wrlong	#13, fp
1f2b4     08 4E 05 F1 | 	add	fp, #8
1f2b8     A7 FE 69 FC | 	wrlong	#255, fp
1f2bc     08 4E 85 F1 | 	sub	fp, #8
1f2c0                 | LR__2515
1f2c0     A7 12 02 F6 | 	mov	arg01, fp
1f2c4     5C D9 BE FD | 	call	#_push
1f2c8     A7 F0 03 F6 | 	mov	ptra, fp
1f2cc     B2 00 A0 FD | 	call	#popregs_
1f2d0                 | _do_power_ret
1f2d0     2D 00 64 FD | 	ret
1f2d4                 | 
1f2d4                 | ' 
1f2d4                 | ' '--------------------------------- SHL
1f2d4                 | ' 
1f2d4                 | ' sub do_shl 
1f2d4                 | _do_shl
1f2d4     03 4A 05 F6 | 	mov	COUNT_, #3
1f2d8     A8 00 A0 FD | 	call	#pushregs_
1f2dc     18 F0 07 F1 | 	add	ptra, #24
1f2e0     A8 D8 BE FD | 	call	#_pop
1f2e4     FD 12 02 F6 | 	mov	arg01, result1
1f2e8     FE 26 02 F6 | 	mov	local01, result2
1f2ec     FF 28 02 F6 | 	mov	local02, result3
1f2f0     0C 4E 05 F1 | 	add	fp, #12
1f2f4     A7 12 62 FC | 	wrlong	arg01, fp
1f2f8     04 4E 05 F1 | 	add	fp, #4
1f2fc     A7 26 62 FC | 	wrlong	local01, fp
1f300     04 4E 05 F1 | 	add	fp, #4
1f304     A7 28 62 FC | 	wrlong	local02, fp
1f308     14 4E 85 F1 | 	sub	fp, #20
1f30c     7C D8 BE FD | 	call	#_pop
1f310     FF 2A 02 F6 | 	mov	local03, result3
1f314     A7 FA 61 FC | 	wrlong	result1, fp
1f318     04 4E 05 F1 | 	add	fp, #4
1f31c     A7 FC 61 FC | 	wrlong	result2, fp
1f320     04 4E 05 F1 | 	add	fp, #4
1f324     A7 2A 62 FC | 	wrlong	local03, fp
1f328                 | ' 
1f328                 | ' t2=pop()
1f328                 | ' t1=pop()
1f328                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f328     08 4E 85 F1 | 	sub	fp, #8
1f32c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f330     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f334     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f338     08 4E 05 A1 |  if_e	add	fp, #8
1f33c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f340     08 4E 85 A1 |  if_e	sub	fp, #8
1f344                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f344     14 4E 05 F1 | 	add	fp, #20
1f348     A7 2A 02 FB | 	rdlong	local03, fp
1f34c     14 4E 85 F1 | 	sub	fp, #20
1f350     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f354     18 00 90 5D |  if_ne	jmp	#LR__2520
1f358     0C 4E 05 F1 | 	add	fp, #12
1f35c     A7 2A 02 FB | 	rdlong	local03, fp
1f360     A7 2A 62 FC | 	wrlong	local03, fp
1f364     08 4E 05 F1 | 	add	fp, #8
1f368     A7 3A 68 FC | 	wrlong	#29, fp
1f36c     14 4E 85 F1 | 	sub	fp, #20
1f370                 | LR__2520
1f370                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1f370     08 4E 05 F1 | 	add	fp, #8
1f374     A7 2A 02 FB | 	rdlong	local03, fp
1f378     08 4E 85 F1 | 	sub	fp, #8
1f37c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f380     14 4E 05 51 |  if_ne	add	fp, #20
1f384     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f388     14 4E 85 51 |  if_ne	sub	fp, #20
1f38c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f390     08 4E 05 51 |  if_ne	add	fp, #8
1f394     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f398     08 4E 85 51 |  if_ne	sub	fp, #8
1f39c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f3a0     14 4E 05 51 |  if_ne	add	fp, #20
1f3a4     14 4E 85 51 |  if_ne	sub	fp, #20
1f3a8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f3ac     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f3b0     08 4E 05 A1 |  if_e	add	fp, #8
1f3b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f3b8     08 4E 85 A1 |  if_e	sub	fp, #8
1f3bc     18 00 90 AD |  if_e	jmp	#LR__2521
1f3c0     A7 2A 02 FB | 	rdlong	local03, fp
1f3c4     0C 4E 05 F1 | 	add	fp, #12
1f3c8     A7 26 02 FB | 	rdlong	local01, fp
1f3cc     0C 4E 85 F1 | 	sub	fp, #12
1f3d0     13 2B 62 F0 | 	shl	local03, local01
1f3d4     A7 2A 62 FC | 	wrlong	local03, fp
1f3d8                 | LR__2521
1f3d8     A7 12 02 F6 | 	mov	arg01, fp
1f3dc     44 D8 BE FD | 	call	#_push
1f3e0     A7 F0 03 F6 | 	mov	ptra, fp
1f3e4     B2 00 A0 FD | 	call	#popregs_
1f3e8                 | _do_shl_ret
1f3e8     2D 00 64 FD | 	ret
1f3ec                 | 
1f3ec                 | ' 
1f3ec                 | ' '--------------------------------- SHR
1f3ec                 | ' 
1f3ec                 | ' sub do_shr 
1f3ec                 | _do_shr
1f3ec     03 4A 05 F6 | 	mov	COUNT_, #3
1f3f0     A8 00 A0 FD | 	call	#pushregs_
1f3f4     18 F0 07 F1 | 	add	ptra, #24
1f3f8     90 D7 BE FD | 	call	#_pop
1f3fc     FD 12 02 F6 | 	mov	arg01, result1
1f400     FE 26 02 F6 | 	mov	local01, result2
1f404     FF 28 02 F6 | 	mov	local02, result3
1f408     0C 4E 05 F1 | 	add	fp, #12
1f40c     A7 12 62 FC | 	wrlong	arg01, fp
1f410     04 4E 05 F1 | 	add	fp, #4
1f414     A7 26 62 FC | 	wrlong	local01, fp
1f418     04 4E 05 F1 | 	add	fp, #4
1f41c     A7 28 62 FC | 	wrlong	local02, fp
1f420     14 4E 85 F1 | 	sub	fp, #20
1f424     64 D7 BE FD | 	call	#_pop
1f428     FF 2A 02 F6 | 	mov	local03, result3
1f42c     A7 FA 61 FC | 	wrlong	result1, fp
1f430     04 4E 05 F1 | 	add	fp, #4
1f434     A7 FC 61 FC | 	wrlong	result2, fp
1f438     04 4E 05 F1 | 	add	fp, #4
1f43c     A7 2A 62 FC | 	wrlong	local03, fp
1f440                 | ' 
1f440                 | ' t2=pop()
1f440                 | ' t1=pop()
1f440                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1f440     08 4E 85 F1 | 	sub	fp, #8
1f444     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f448     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f44c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1f450     08 4E 05 A1 |  if_e	add	fp, #8
1f454     A7 3A 68 AC |  if_e	wrlong	#29, fp
1f458     08 4E 85 A1 |  if_e	sub	fp, #8
1f45c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1f45c     14 4E 05 F1 | 	add	fp, #20
1f460     A7 2A 02 FB | 	rdlong	local03, fp
1f464     14 4E 85 F1 | 	sub	fp, #20
1f468     1C 2A 0E F2 | 	cmp	local03, #28 wz
1f46c     18 00 90 5D |  if_ne	jmp	#LR__2530
1f470     0C 4E 05 F1 | 	add	fp, #12
1f474     A7 2A 02 FB | 	rdlong	local03, fp
1f478     A7 2A 62 FC | 	wrlong	local03, fp
1f47c     08 4E 05 F1 | 	add	fp, #8
1f480     A7 3A 68 FC | 	wrlong	#29, fp
1f484     14 4E 85 F1 | 	sub	fp, #20
1f488                 | LR__2530
1f488                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1f488     08 4E 05 F1 | 	add	fp, #8
1f48c     A7 2A 02 FB | 	rdlong	local03, fp
1f490     08 4E 85 F1 | 	sub	fp, #8
1f494     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f498     14 4E 05 51 |  if_ne	add	fp, #20
1f49c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1f4a0     14 4E 85 51 |  if_ne	sub	fp, #20
1f4a4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1f4a8     08 4E 05 51 |  if_ne	add	fp, #8
1f4ac     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f4b0     08 4E 85 51 |  if_ne	sub	fp, #8
1f4b4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1f4b8     14 4E 05 51 |  if_ne	add	fp, #20
1f4bc     14 4E 85 51 |  if_ne	sub	fp, #20
1f4c0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1f4c4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1f4c8     08 4E 05 A1 |  if_e	add	fp, #8
1f4cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f4d0     08 4E 85 A1 |  if_e	sub	fp, #8
1f4d4     18 00 90 AD |  if_e	jmp	#LR__2531
1f4d8     A7 2A 02 FB | 	rdlong	local03, fp
1f4dc     0C 4E 05 F1 | 	add	fp, #12
1f4e0     A7 26 02 FB | 	rdlong	local01, fp
1f4e4     0C 4E 85 F1 | 	sub	fp, #12
1f4e8     13 2B 42 F0 | 	shr	local03, local01
1f4ec     A7 2A 62 FC | 	wrlong	local03, fp
1f4f0                 | LR__2531
1f4f0     A7 12 02 F6 | 	mov	arg01, fp
1f4f4     2C D7 BE FD | 	call	#_push
1f4f8     A7 F0 03 F6 | 	mov	ptra, fp
1f4fc     B2 00 A0 FD | 	call	#popregs_
1f500                 | _do_shr_ret
1f500     2D 00 64 FD | 	ret
1f504                 | 
1f504                 | ' 
1f504                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1f504                 | ' 
1f504                 | ' ''----------------------------------------------------------------------------------------------------
1f504                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1f504                 | ' ''----------------------------------------------------------------------------------------------------
1f504                 | ' 
1f504                 | ' ''--------------------------- Command function pointers
1f504                 | ' 
1f504                 | ' sub init_commands
1f504                 | _init_commands
1f504                 | ' 
1f504                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1f504     00 00 06 F6 | 	mov	_var01, #0
1f508     97 16 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1f50c                 | LR__2540
1f50c     00 FB 01 F6 | 	mov	result1, _var01
1f510     02 FA 65 F0 | 	shl	result1, #2
1f514     43 00 00 FF 
1f518     60 E4 05 F1 | 	add	objptr, ##34400
1f51c     F2 FA 01 F1 | 	add	result1, objptr
1f520     43 00 00 FF 
1f524     60 E4 85 F1 | 	sub	objptr, ##34400
1f528     FD E4 61 FC | 	wrlong	objptr, result1
1f52c     01 00 06 F1 | 	add	_var01, #1
1f530     00 01 56 F2 | 	cmps	_var01, #256 wc
1f534     D4 FF 9F CD |  if_b	jmp	#LR__2540
1f538                 | LR__2541
1f538     F2 FA 01 F6 | 	mov	result1, objptr
1f53c     14 FA 25 F4 | 	bith	result1, #20
1f540     43 00 00 FF 
1f544     64 E4 05 F1 | 	add	objptr, ##34404
1f548     F2 FA 61 FC | 	wrlong	result1, objptr
1f54c     43 00 00 FF 
1f550     64 E4 85 F1 | 	sub	objptr, ##34404
1f554     F2 FA 01 F6 | 	mov	result1, objptr
1f558     15 FA 25 F4 | 	bith	result1, #21
1f55c     43 00 00 FF 
1f560     68 E4 05 F1 | 	add	objptr, ##34408
1f564     F2 FA 61 FC | 	wrlong	result1, objptr
1f568     43 00 00 FF 
1f56c     68 E4 85 F1 | 	sub	objptr, ##34408
1f570     F2 FA 01 F6 | 	mov	result1, objptr
1f574     34 FA 25 F4 | 	bith	result1, #52
1f578     43 00 00 FF 
1f57c     6C E4 05 F1 | 	add	objptr, ##34412
1f580     F2 FA 61 FC | 	wrlong	result1, objptr
1f584     43 00 00 FF 
1f588     6C E4 85 F1 | 	sub	objptr, ##34412
1f58c     F2 FA 01 F6 | 	mov	result1, objptr
1f590     16 FA 25 F4 | 	bith	result1, #22
1f594     43 00 00 FF 
1f598     74 E4 05 F1 | 	add	objptr, ##34420
1f59c     F2 FA 61 FC | 	wrlong	result1, objptr
1f5a0     43 00 00 FF 
1f5a4     74 E4 85 F1 | 	sub	objptr, ##34420
1f5a8     F2 FA 01 F6 | 	mov	result1, objptr
1f5ac     00 28 00 FF 
1f5b0     00 FA 45 F5 | 	or	result1, ##5242880
1f5b4     43 00 00 FF 
1f5b8     78 E4 05 F1 | 	add	objptr, ##34424
1f5bc     F2 FA 61 FC | 	wrlong	result1, objptr
1f5c0     43 00 00 FF 
1f5c4     78 E4 85 F1 | 	sub	objptr, ##34424
1f5c8     F2 FA 01 F6 | 	mov	result1, objptr
1f5cc     35 FA 25 F4 | 	bith	result1, #53
1f5d0     43 00 00 FF 
1f5d4     7C E4 05 F1 | 	add	objptr, ##34428
1f5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1f5dc     43 00 00 FF 
1f5e0     7C E4 85 F1 | 	sub	objptr, ##34428
1f5e4     F2 FA 01 F6 | 	mov	result1, objptr
1f5e8     54 FA 25 F4 | 	bith	result1, #84
1f5ec     43 00 00 FF 
1f5f0     80 E4 05 F1 | 	add	objptr, ##34432
1f5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1f5f8     43 00 00 FF 
1f5fc     80 E4 85 F1 | 	sub	objptr, ##34432
1f600     F2 FA 01 F6 | 	mov	result1, objptr
1f604     17 FA 25 F4 | 	bith	result1, #23
1f608     43 00 00 FF 
1f60c     84 E4 05 F1 | 	add	objptr, ##34436
1f610     F2 FA 61 FC | 	wrlong	result1, objptr
1f614     43 00 00 FF 
1f618     84 E4 85 F1 | 	sub	objptr, ##34436
1f61c     F2 FA 01 F6 | 	mov	result1, objptr
1f620     00 48 00 FF 
1f624     00 FA 45 F5 | 	or	result1, ##9437184
1f628     43 00 00 FF 
1f62c     88 E4 05 F1 | 	add	objptr, ##34440
1f630     F2 FA 61 FC | 	wrlong	result1, objptr
1f634     43 00 00 FF 
1f638     88 E4 85 F1 | 	sub	objptr, ##34440
1f63c     F2 FA 01 F6 | 	mov	result1, objptr
1f640     00 50 00 FF 
1f644     00 FA 45 F5 | 	or	result1, ##10485760
1f648     43 00 00 FF 
1f64c     8C E4 05 F1 | 	add	objptr, ##34444
1f650     F2 FA 61 FC | 	wrlong	result1, objptr
1f654     43 00 00 FF 
1f658     8C E4 85 F1 | 	sub	objptr, ##34444
1f65c     F2 FA 01 F6 | 	mov	result1, objptr
1f660     00 58 00 FF 
1f664     00 FA 45 F5 | 	or	result1, ##11534336
1f668     43 00 00 FF 
1f66c     90 E4 05 F1 | 	add	objptr, ##34448
1f670     F2 FA 61 FC | 	wrlong	result1, objptr
1f674     43 00 00 FF 
1f678     90 E4 85 F1 | 	sub	objptr, ##34448
1f67c     F2 FA 01 F6 | 	mov	result1, objptr
1f680     36 FA 25 F4 | 	bith	result1, #54
1f684     43 00 00 FF 
1f688     A4 E4 05 F1 | 	add	objptr, ##34468
1f68c     F2 FA 61 FC | 	wrlong	result1, objptr
1f690     43 00 00 FF 
1f694     A4 E4 85 F1 | 	sub	objptr, ##34468
1f698     F2 FA 01 F6 | 	mov	result1, objptr
1f69c     00 68 00 FF 
1f6a0     00 FA 45 F5 | 	or	result1, ##13631488
1f6a4     43 00 00 FF 
1f6a8     D4 E4 05 F1 | 	add	objptr, ##34516
1f6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1f6b0     43 00 00 FF 
1f6b4     D4 E4 85 F1 | 	sub	objptr, ##34516
1f6b8     F2 FA 01 F6 | 	mov	result1, objptr
1f6bc     00 68 00 FF 
1f6c0     00 FA 45 F5 | 	or	result1, ##13631488
1f6c4     43 00 00 FF 
1f6c8     D0 E4 05 F1 | 	add	objptr, ##34512
1f6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1f6d0     43 00 00 FF 
1f6d4     D0 E4 85 F1 | 	sub	objptr, ##34512
1f6d8     F2 FA 01 F6 | 	mov	result1, objptr
1f6dc     00 68 00 FF 
1f6e0     00 FA 45 F5 | 	or	result1, ##13631488
1f6e4     43 00 00 FF 
1f6e8     D8 E4 05 F1 | 	add	objptr, ##34520
1f6ec     F2 FA 61 FC | 	wrlong	result1, objptr
1f6f0     43 00 00 FF 
1f6f4     D8 E4 85 F1 | 	sub	objptr, ##34520
1f6f8     F2 FA 01 F6 | 	mov	result1, objptr
1f6fc     00 68 00 FF 
1f700     00 FA 45 F5 | 	or	result1, ##13631488
1f704     43 00 00 FF 
1f708     DC E4 05 F1 | 	add	objptr, ##34524
1f70c     F2 FA 61 FC | 	wrlong	result1, objptr
1f710     43 00 00 FF 
1f714     DC E4 85 F1 | 	sub	objptr, ##34524
1f718     F2 FA 01 F6 | 	mov	result1, objptr
1f71c     00 68 00 FF 
1f720     00 FA 45 F5 | 	or	result1, ##13631488
1f724     43 00 00 FF 
1f728     0C E5 05 F1 | 	add	objptr, ##34572
1f72c     F2 FA 61 FC | 	wrlong	result1, objptr
1f730     43 00 00 FF 
1f734     0C E5 85 F1 | 	sub	objptr, ##34572
1f738     F2 FA 01 F6 | 	mov	result1, objptr
1f73c     55 FA 25 F4 | 	bith	result1, #85
1f740     43 00 00 FF 
1f744     BC E4 05 F1 | 	add	objptr, ##34492
1f748     F2 FA 61 FC | 	wrlong	result1, objptr
1f74c     43 00 00 FF 
1f750     BC E4 85 F1 | 	sub	objptr, ##34492
1f754     F2 FA 01 F6 | 	mov	result1, objptr
1f758     00 68 00 FF 
1f75c     00 FA 45 F5 | 	or	result1, ##13631488
1f760     43 00 00 FF 
1f764     10 E5 05 F1 | 	add	objptr, ##34576
1f768     F2 FA 61 FC | 	wrlong	result1, objptr
1f76c     43 00 00 FF 
1f770     10 E5 85 F1 | 	sub	objptr, ##34576
1f774     F2 FA 01 F6 | 	mov	result1, objptr
1f778     00 68 00 FF 
1f77c     00 FA 45 F5 | 	or	result1, ##13631488
1f780     43 00 00 FF 
1f784     E0 E4 05 F1 | 	add	objptr, ##34528
1f788     F2 FA 61 FC | 	wrlong	result1, objptr
1f78c     43 00 00 FF 
1f790     E0 E4 85 F1 | 	sub	objptr, ##34528
1f794     F2 FA 01 F6 | 	mov	result1, objptr
1f798     00 68 00 FF 
1f79c     00 FA 45 F5 | 	or	result1, ##13631488
1f7a0     43 00 00 FF 
1f7a4     E4 E4 05 F1 | 	add	objptr, ##34532
1f7a8     F2 FA 61 FC | 	wrlong	result1, objptr
1f7ac     43 00 00 FF 
1f7b0     E4 E4 85 F1 | 	sub	objptr, ##34532
1f7b4     F2 FA 01 F6 | 	mov	result1, objptr
1f7b8     00 68 00 FF 
1f7bc     00 FA 45 F5 | 	or	result1, ##13631488
1f7c0     43 00 00 FF 
1f7c4     E8 E4 05 F1 | 	add	objptr, ##34536
1f7c8     F2 FA 61 FC | 	wrlong	result1, objptr
1f7cc     43 00 00 FF 
1f7d0     E8 E4 85 F1 | 	sub	objptr, ##34536
1f7d4     F2 FA 01 F6 | 	mov	result1, objptr
1f7d8     74 FA 25 F4 | 	bith	result1, #116
1f7dc     43 00 00 FF 
1f7e0     60 E5 05 F1 | 	add	objptr, ##34656
1f7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1f7e8     43 00 00 FF 
1f7ec     60 E5 85 F1 | 	sub	objptr, ##34656
1f7f0     F2 FA 01 F6 | 	mov	result1, objptr
1f7f4     18 FA 25 F4 | 	bith	result1, #24
1f7f8     43 00 00 FF 
1f7fc     64 E5 05 F1 | 	add	objptr, ##34660
1f800     F2 FA 61 FC | 	wrlong	result1, objptr
1f804     43 00 00 FF 
1f808     64 E5 85 F1 | 	sub	objptr, ##34660
1f80c     F2 FA 01 F6 | 	mov	result1, objptr
1f810     00 88 00 FF 
1f814     00 FA 45 F5 | 	or	result1, ##17825792
1f818     43 00 00 FF 
1f81c     68 E5 05 F1 | 	add	objptr, ##34664
1f820     F2 FA 61 FC | 	wrlong	result1, objptr
1f824     43 00 00 FF 
1f828     68 E5 85 F1 | 	sub	objptr, ##34664
1f82c     F2 FA 01 F6 | 	mov	result1, objptr
1f830     00 90 00 FF 
1f834     00 FA 45 F5 | 	or	result1, ##18874368
1f838     43 00 00 FF 
1f83c     6C E5 05 F1 | 	add	objptr, ##34668
1f840     F2 FA 61 FC | 	wrlong	result1, objptr
1f844     43 00 00 FF 
1f848     6C E5 85 F1 | 	sub	objptr, ##34668
1f84c     F2 FA 01 F6 | 	mov	result1, objptr
1f850     00 98 00 FF 
1f854     00 FA 45 F5 | 	or	result1, ##19922944
1f858     43 00 00 FF 
1f85c     70 E5 05 F1 | 	add	objptr, ##34672
1f860     F2 FA 61 FC | 	wrlong	result1, objptr
1f864     43 00 00 FF 
1f868     70 E5 85 F1 | 	sub	objptr, ##34672
1f86c     F2 FA 01 F6 | 	mov	result1, objptr
1f870     00 A0 00 FF 
1f874     00 FA 45 F5 | 	or	result1, ##20971520
1f878     43 00 00 FF 
1f87c     74 E5 05 F1 | 	add	objptr, ##34676
1f880     F2 FA 61 FC | 	wrlong	result1, objptr
1f884     43 00 00 FF 
1f888     74 E5 85 F1 | 	sub	objptr, ##34676
1f88c     F2 FA 01 F6 | 	mov	result1, objptr
1f890     00 A8 00 FF 
1f894     00 FA 45 F5 | 	or	result1, ##22020096
1f898     43 00 00 FF 
1f89c     78 E5 05 F1 | 	add	objptr, ##34680
1f8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1f8a4     43 00 00 FF 
1f8a8     78 E5 85 F1 | 	sub	objptr, ##34680
1f8ac     F2 FA 01 F6 | 	mov	result1, objptr
1f8b0     00 B0 00 FF 
1f8b4     00 FA 45 F5 | 	or	result1, ##23068672
1f8b8     43 00 00 FF 
1f8bc     7C E5 05 F1 | 	add	objptr, ##34684
1f8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f8c4     43 00 00 FF 
1f8c8     7C E5 85 F1 | 	sub	objptr, ##34684
1f8cc     F2 FA 01 F6 | 	mov	result1, objptr
1f8d0     00 B8 00 FF 
1f8d4     00 FA 45 F5 | 	or	result1, ##24117248
1f8d8     43 00 00 FF 
1f8dc     80 E5 05 F1 | 	add	objptr, ##34688
1f8e0     F2 FA 61 FC | 	wrlong	result1, objptr
1f8e4     43 00 00 FF 
1f8e8     80 E5 85 F1 | 	sub	objptr, ##34688
1f8ec     F2 FA 01 F6 | 	mov	result1, objptr
1f8f0     37 FA 25 F4 | 	bith	result1, #55
1f8f4     43 00 00 FF 
1f8f8     84 E5 05 F1 | 	add	objptr, ##34692
1f8fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f900     43 00 00 FF 
1f904     84 E5 85 F1 | 	sub	objptr, ##34692
1f908     F2 FA 01 F6 | 	mov	result1, objptr
1f90c     00 C8 00 FF 
1f910     00 FA 45 F5 | 	or	result1, ##26214400
1f914     43 00 00 FF 
1f918     88 E5 05 F1 | 	add	objptr, ##34696
1f91c     F2 FA 61 FC | 	wrlong	result1, objptr
1f920     43 00 00 FF 
1f924     88 E5 85 F1 | 	sub	objptr, ##34696
1f928     F2 FA 01 F6 | 	mov	result1, objptr
1f92c     00 D0 00 FF 
1f930     00 FA 45 F5 | 	or	result1, ##27262976
1f934     43 00 00 FF 
1f938     8C E5 05 F1 | 	add	objptr, ##34700
1f93c     F2 FA 61 FC | 	wrlong	result1, objptr
1f940     43 00 00 FF 
1f944     8C E5 85 F1 | 	sub	objptr, ##34700
1f948     F2 FA 01 F6 | 	mov	result1, objptr
1f94c     00 D8 00 FF 
1f950     00 FA 45 F5 | 	or	result1, ##28311552
1f954     43 00 00 FF 
1f958     90 E5 05 F1 | 	add	objptr, ##34704
1f95c     F2 FA 61 FC | 	wrlong	result1, objptr
1f960     43 00 00 FF 
1f964     90 E5 85 F1 | 	sub	objptr, ##34704
1f968     F2 FA 01 F6 | 	mov	result1, objptr
1f96c     56 FA 25 F4 | 	bith	result1, #86
1f970     43 00 00 FF 
1f974     94 E5 05 F1 | 	add	objptr, ##34708
1f978     F2 FA 61 FC | 	wrlong	result1, objptr
1f97c     43 00 00 FF 
1f980     94 E5 85 F1 | 	sub	objptr, ##34708
1f984     F2 FA 01 F6 | 	mov	result1, objptr
1f988     00 E8 00 FF 
1f98c     00 FA 45 F5 | 	or	result1, ##30408704
1f990     45 00 00 FF 
1f994     5C E4 05 F1 | 	add	objptr, ##35420
1f998     F2 FA 61 FC | 	wrlong	result1, objptr
1f99c     45 00 00 FF 
1f9a0     5C E4 85 F1 | 	sub	objptr, ##35420
1f9a4     F2 FA 01 F6 | 	mov	result1, objptr
1f9a8     75 FA 25 F4 | 	bith	result1, #117
1f9ac     43 00 00 FF 
1f9b0     98 E5 05 F1 | 	add	objptr, ##34712
1f9b4     F2 FA 61 FC | 	wrlong	result1, objptr
1f9b8     43 00 00 FF 
1f9bc     98 E5 85 F1 | 	sub	objptr, ##34712
1f9c0     F2 FA 01 F6 | 	mov	result1, objptr
1f9c4     94 FA 25 F4 | 	bith	result1, #148
1f9c8     43 00 00 FF 
1f9cc     AC E5 05 F1 | 	add	objptr, ##34732
1f9d0     F2 FA 61 FC | 	wrlong	result1, objptr
1f9d4     43 00 00 FF 
1f9d8     AC E5 85 F1 | 	sub	objptr, ##34732
1f9dc     F2 FA 01 F6 | 	mov	result1, objptr
1f9e0     19 FA 25 F4 | 	bith	result1, #25
1f9e4     43 00 00 FF 
1f9e8     9C E5 05 F1 | 	add	objptr, ##34716
1f9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1f9f0     43 00 00 FF 
1f9f4     9C E5 85 F1 | 	sub	objptr, ##34716
1f9f8     F2 FA 01 F6 | 	mov	result1, objptr
1f9fc     00 08 01 FF 
1fa00     00 FA 45 F5 | 	or	result1, ##34603008
1fa04     43 00 00 FF 
1fa08     B8 E4 05 F1 | 	add	objptr, ##34488
1fa0c     F2 FA 61 FC | 	wrlong	result1, objptr
1fa10     43 00 00 FF 
1fa14     B8 E4 85 F1 | 	sub	objptr, ##34488
1fa18     F2 FA 01 F6 | 	mov	result1, objptr
1fa1c     00 10 01 FF 
1fa20     00 FA 45 F5 | 	or	result1, ##35651584
1fa24     43 00 00 FF 
1fa28     A0 E5 05 F1 | 	add	objptr, ##34720
1fa2c     F2 FA 61 FC | 	wrlong	result1, objptr
1fa30     43 00 00 FF 
1fa34     A0 E5 85 F1 | 	sub	objptr, ##34720
1fa38     F2 FA 01 F6 | 	mov	result1, objptr
1fa3c     00 18 01 FF 
1fa40     00 FA 45 F5 | 	or	result1, ##36700160
1fa44     43 00 00 FF 
1fa48     A4 E5 05 F1 | 	add	objptr, ##34724
1fa4c     F2 FA 61 FC | 	wrlong	result1, objptr
1fa50     43 00 00 FF 
1fa54     A4 E5 85 F1 | 	sub	objptr, ##34724
1fa58     F2 FA 01 F6 | 	mov	result1, objptr
1fa5c     00 20 01 FF 
1fa60     00 FA 45 F5 | 	or	result1, ##37748736
1fa64     43 00 00 FF 
1fa68     A8 E5 05 F1 | 	add	objptr, ##34728
1fa6c     F2 FA 61 FC | 	wrlong	result1, objptr
1fa70     43 00 00 FF 
1fa74     A8 E5 85 F1 | 	sub	objptr, ##34728
1fa78     F2 FA 01 F6 | 	mov	result1, objptr
1fa7c     00 28 01 FF 
1fa80     00 FA 45 F5 | 	or	result1, ##38797312
1fa84     43 00 00 FF 
1fa88     B4 E5 05 F1 | 	add	objptr, ##34740
1fa8c     F2 FA 61 FC | 	wrlong	result1, objptr
1fa90     43 00 00 FF 
1fa94     B4 E5 85 F1 | 	sub	objptr, ##34740
1fa98     F2 FA 01 F6 | 	mov	result1, objptr
1fa9c     00 30 01 FF 
1faa0     00 FA 45 F5 | 	or	result1, ##39845888
1faa4     43 00 00 FF 
1faa8     B8 E5 05 F1 | 	add	objptr, ##34744
1faac     F2 FA 61 FC | 	wrlong	result1, objptr
1fab0     43 00 00 FF 
1fab4     B8 E5 85 F1 | 	sub	objptr, ##34744
1fab8     F2 FA 01 F6 | 	mov	result1, objptr
1fabc     00 38 01 FF 
1fac0     00 FA 45 F5 | 	or	result1, ##40894464
1fac4     43 00 00 FF 
1fac8     BC E5 05 F1 | 	add	objptr, ##34748
1facc     F2 FA 61 FC | 	wrlong	result1, objptr
1fad0     43 00 00 FF 
1fad4     BC E5 85 F1 | 	sub	objptr, ##34748
1fad8     F2 FA 01 F6 | 	mov	result1, objptr
1fadc     00 40 01 FF 
1fae0     00 FA 45 F5 | 	or	result1, ##41943040
1fae4     43 00 00 FF 
1fae8     C0 E5 05 F1 | 	add	objptr, ##34752
1faec     F2 FA 61 FC | 	wrlong	result1, objptr
1faf0     43 00 00 FF 
1faf4     C0 E5 85 F1 | 	sub	objptr, ##34752
1faf8     F2 FA 01 F6 | 	mov	result1, objptr
1fafc     00 48 01 FF 
1fb00     00 FA 45 F5 | 	or	result1, ##42991616
1fb04     43 00 00 FF 
1fb08     C8 E5 05 F1 | 	add	objptr, ##34760
1fb0c     F2 FA 61 FC | 	wrlong	result1, objptr
1fb10     43 00 00 FF 
1fb14     C8 E5 85 F1 | 	sub	objptr, ##34760
1fb18     F2 FA 01 F6 | 	mov	result1, objptr
1fb1c     00 08 01 FF 
1fb20     00 FA 45 F5 | 	or	result1, ##34603008
1fb24     43 00 00 FF 
1fb28     CC E5 05 F1 | 	add	objptr, ##34764
1fb2c     F2 FA 61 FC | 	wrlong	result1, objptr
1fb30     43 00 00 FF 
1fb34     CC E5 85 F1 | 	sub	objptr, ##34764
1fb38     F2 FA 01 F6 | 	mov	result1, objptr
1fb3c     00 50 01 FF 
1fb40     00 FA 45 F5 | 	or	result1, ##44040192
1fb44     43 00 00 FF 
1fb48     CC E4 05 F1 | 	add	objptr, ##34508
1fb4c     F2 FA 61 FC | 	wrlong	result1, objptr
1fb50     43 00 00 FF 
1fb54     CC E4 85 F1 | 	sub	objptr, ##34508
1fb58     F2 FA 01 F6 | 	mov	result1, objptr
1fb5c     00 58 01 FF 
1fb60     00 FA 45 F5 | 	or	result1, ##45088768
1fb64     43 00 00 FF 
1fb68     FC E4 05 F1 | 	add	objptr, ##34556
1fb6c     F2 FA 61 FC | 	wrlong	result1, objptr
1fb70     43 00 00 FF 
1fb74     FC E4 85 F1 | 	sub	objptr, ##34556
1fb78     F2 FA 01 F6 | 	mov	result1, objptr
1fb7c     00 60 01 FF 
1fb80     00 FA 45 F5 | 	or	result1, ##46137344
1fb84     43 00 00 FF 
1fb88     F8 E4 05 F1 | 	add	objptr, ##34552
1fb8c     F2 FA 61 FC | 	wrlong	result1, objptr
1fb90     43 00 00 FF 
1fb94     F8 E4 85 F1 | 	sub	objptr, ##34552
1fb98     F2 FA 01 F6 | 	mov	result1, objptr
1fb9c     00 68 01 FF 
1fba0     00 FA 45 F5 | 	or	result1, ##47185920
1fba4     43 00 00 FF 
1fba8     9C E4 05 F1 | 	add	objptr, ##34460
1fbac     F2 FA 61 FC | 	wrlong	result1, objptr
1fbb0     43 00 00 FF 
1fbb4     9C E4 85 F1 | 	sub	objptr, ##34460
1fbb8     F2 FA 01 F6 | 	mov	result1, objptr
1fbbc     00 70 01 FF 
1fbc0     00 FA 45 F5 | 	or	result1, ##48234496
1fbc4     43 00 00 FF 
1fbc8     A0 E4 05 F1 | 	add	objptr, ##34464
1fbcc     F2 FA 61 FC | 	wrlong	result1, objptr
1fbd0     43 00 00 FF 
1fbd4     A0 E4 85 F1 | 	sub	objptr, ##34464
1fbd8     F2 FA 01 F6 | 	mov	result1, objptr
1fbdc     00 78 01 FF 
1fbe0     00 FA 45 F5 | 	or	result1, ##49283072
1fbe4     43 00 00 FF 
1fbe8     08 E5 05 F1 | 	add	objptr, ##34568
1fbec     F2 FA 61 FC | 	wrlong	result1, objptr
1fbf0     43 00 00 FF 
1fbf4     08 E5 85 F1 | 	sub	objptr, ##34568
1fbf8     F2 FA 01 F6 | 	mov	result1, objptr
1fbfc     38 FA 25 F4 | 	bith	result1, #56
1fc00     43 00 00 FF 
1fc04     B0 E5 05 F1 | 	add	objptr, ##34736
1fc08     F2 FA 61 FC | 	wrlong	result1, objptr
1fc0c     43 00 00 FF 
1fc10     B0 E5 85 F1 | 	sub	objptr, ##34736
1fc14     F2 FA 01 F6 | 	mov	result1, objptr
1fc18     00 88 01 FF 
1fc1c     00 FA 45 F5 | 	or	result1, ##51380224
1fc20     43 00 00 FF 
1fc24     C4 E5 05 F1 | 	add	objptr, ##34756
1fc28     F2 FA 61 FC | 	wrlong	result1, objptr
1fc2c     43 00 00 FF 
1fc30     C4 E5 85 F1 | 	sub	objptr, ##34756
1fc34     F2 FA 01 F6 | 	mov	result1, objptr
1fc38     00 90 01 FF 
1fc3c     00 FA 45 F5 | 	or	result1, ##52428800
1fc40     43 00 00 FF 
1fc44     D0 E5 05 F1 | 	add	objptr, ##34768
1fc48     F2 FA 61 FC | 	wrlong	result1, objptr
1fc4c     43 00 00 FF 
1fc50     D0 E5 85 F1 | 	sub	objptr, ##34768
1fc54     F2 FA 01 F6 | 	mov	result1, objptr
1fc58     00 98 01 FF 
1fc5c     00 FA 45 F5 | 	or	result1, ##53477376
1fc60     43 00 00 FF 
1fc64     D4 E5 05 F1 | 	add	objptr, ##34772
1fc68     F2 FA 61 FC | 	wrlong	result1, objptr
1fc6c     43 00 00 FF 
1fc70     D4 E5 85 F1 | 	sub	objptr, ##34772
1fc74     F2 FA 01 F6 | 	mov	result1, objptr
1fc78     00 A0 01 FF 
1fc7c     00 FA 45 F5 | 	or	result1, ##54525952
1fc80     43 00 00 FF 
1fc84     D8 E5 05 F1 | 	add	objptr, ##34776
1fc88     F2 FA 61 FC | 	wrlong	result1, objptr
1fc8c     43 00 00 FF 
1fc90     D8 E5 85 F1 | 	sub	objptr, ##34776
1fc94     F2 FA 01 F6 | 	mov	result1, objptr
1fc98     00 A8 01 FF 
1fc9c     00 FA 45 F5 | 	or	result1, ##55574528
1fca0     43 00 00 FF 
1fca4     DC E5 05 F1 | 	add	objptr, ##34780
1fca8     F2 FA 61 FC | 	wrlong	result1, objptr
1fcac     43 00 00 FF 
1fcb0     DC E5 85 F1 | 	sub	objptr, ##34780
1fcb4     F2 FA 01 F6 | 	mov	result1, objptr
1fcb8     00 B0 01 FF 
1fcbc     00 FA 45 F5 | 	or	result1, ##56623104
1fcc0     43 00 00 FF 
1fcc4     E0 E5 05 F1 | 	add	objptr, ##34784
1fcc8     F2 FA 61 FC | 	wrlong	result1, objptr
1fccc     43 00 00 FF 
1fcd0     E0 E5 85 F1 | 	sub	objptr, ##34784
1fcd4     F2 FA 01 F6 | 	mov	result1, objptr
1fcd8     00 B8 01 FF 
1fcdc     00 FA 45 F5 | 	or	result1, ##57671680
1fce0     43 00 00 FF 
1fce4     E4 E5 05 F1 | 	add	objptr, ##34788
1fce8     F2 FA 61 FC | 	wrlong	result1, objptr
1fcec     43 00 00 FF 
1fcf0     E4 E5 85 F1 | 	sub	objptr, ##34788
1fcf4     F2 FA 01 F6 | 	mov	result1, objptr
1fcf8     94 FA 25 F4 | 	bith	result1, #148
1fcfc     43 00 00 FF 
1fd00     AC E5 05 F1 | 	add	objptr, ##34732
1fd04     F2 FA 61 FC | 	wrlong	result1, objptr
1fd08     43 00 00 FF 
1fd0c     AC E5 85 F1 | 	sub	objptr, ##34732
1fd10     F2 FA 01 F6 | 	mov	result1, objptr
1fd14     57 FA 25 F4 | 	bith	result1, #87
1fd18     43 00 00 FF 
1fd1c     EC E5 05 F1 | 	add	objptr, ##34796
1fd20     F2 FA 61 FC | 	wrlong	result1, objptr
1fd24     43 00 00 FF 
1fd28     EC E5 85 F1 | 	sub	objptr, ##34796
1fd2c     F2 FA 01 F6 | 	mov	result1, objptr
1fd30     00 C8 01 FF 
1fd34     00 FA 45 F5 | 	or	result1, ##59768832
1fd38     43 00 00 FF 
1fd3c     E8 E5 05 F1 | 	add	objptr, ##34792
1fd40     F2 FA 61 FC | 	wrlong	result1, objptr
1fd44     43 00 00 FF 
1fd48     E8 E5 85 F1 | 	sub	objptr, ##34792
1fd4c     F2 FA 01 F6 | 	mov	result1, objptr
1fd50     00 D0 01 FF 
1fd54     00 FA 45 F5 | 	or	result1, ##60817408
1fd58     44 00 00 FF 
1fd5c     00 E4 05 F1 | 	add	objptr, ##34816
1fd60     F2 FA 61 FC | 	wrlong	result1, objptr
1fd64     44 00 00 FF 
1fd68     00 E4 85 F1 | 	sub	objptr, ##34816
1fd6c     F2 FA 01 F6 | 	mov	result1, objptr
1fd70     00 D8 01 FF 
1fd74     00 FA 45 F5 | 	or	result1, ##61865984
1fd78     44 00 00 FF 
1fd7c     04 E4 05 F1 | 	add	objptr, ##34820
1fd80     F2 FA 61 FC | 	wrlong	result1, objptr
1fd84     44 00 00 FF 
1fd88     04 E4 85 F1 | 	sub	objptr, ##34820
1fd8c     F2 FA 01 F6 | 	mov	result1, objptr
1fd90     76 FA 25 F4 | 	bith	result1, #118
1fd94     43 00 00 FF 
1fd98     F0 E5 05 F1 | 	add	objptr, ##34800
1fd9c     F2 FA 61 FC | 	wrlong	result1, objptr
1fda0     43 00 00 FF 
1fda4     F0 E5 85 F1 | 	sub	objptr, ##34800
1fda8     F2 FA 01 F6 | 	mov	result1, objptr
1fdac     00 E8 01 FF 
1fdb0     00 FA 45 F5 | 	or	result1, ##63963136
1fdb4     43 00 00 FF 
1fdb8     F4 E5 05 F1 | 	add	objptr, ##34804
1fdbc     F2 FA 61 FC | 	wrlong	result1, objptr
1fdc0     43 00 00 FF 
1fdc4     F4 E5 85 F1 | 	sub	objptr, ##34804
1fdc8     F2 FA 01 F6 | 	mov	result1, objptr
1fdcc     95 FA 25 F4 | 	bith	result1, #149
1fdd0     43 00 00 FF 
1fdd4     F8 E5 05 F1 | 	add	objptr, ##34808
1fdd8     F2 FA 61 FC | 	wrlong	result1, objptr
1fddc     43 00 00 FF 
1fde0     F8 E5 85 F1 | 	sub	objptr, ##34808
1fde4     F2 FA 01 F6 | 	mov	result1, objptr
1fde8     B4 FA 25 F4 | 	bith	result1, #180
1fdec     43 00 00 FF 
1fdf0     FC E5 05 F1 | 	add	objptr, ##34812
1fdf4     F2 FA 61 FC | 	wrlong	result1, objptr
1fdf8     43 00 00 FF 
1fdfc     FC E5 85 F1 | 	sub	objptr, ##34812
1fe00     F2 FA 01 F6 | 	mov	result1, objptr
1fe04     1A FA 25 F4 | 	bith	result1, #26
1fe08     44 00 00 FF 
1fe0c     0C E4 05 F1 | 	add	objptr, ##34828
1fe10     F2 FA 61 FC | 	wrlong	result1, objptr
1fe14     44 00 00 FF 
1fe18     0C E4 85 F1 | 	sub	objptr, ##34828
1fe1c     F2 FA 01 F6 | 	mov	result1, objptr
1fe20     00 08 02 FF 
1fe24     00 FA 45 F5 | 	or	result1, ##68157440
1fe28     44 00 00 FF 
1fe2c     08 E4 05 F1 | 	add	objptr, ##34824
1fe30     F2 FA 61 FC | 	wrlong	result1, objptr
1fe34     44 00 00 FF 
1fe38     08 E4 85 F1 | 	sub	objptr, ##34824
1fe3c     F2 FA 01 F6 | 	mov	result1, objptr
1fe40     00 10 02 FF 
1fe44     00 FA 45 F5 | 	or	result1, ##69206016
1fe48     44 00 00 FF 
1fe4c     18 E4 05 F1 | 	add	objptr, ##34840
1fe50     F2 FA 61 FC | 	wrlong	result1, objptr
1fe54     44 00 00 FF 
1fe58     18 E4 85 F1 | 	sub	objptr, ##34840
1fe5c     F2 FA 01 F6 | 	mov	result1, objptr
1fe60     00 18 02 FF 
1fe64     00 FA 45 F5 | 	or	result1, ##70254592
1fe68     44 00 00 FF 
1fe6c     14 E4 05 F1 | 	add	objptr, ##34836
1fe70     F2 FA 61 FC | 	wrlong	result1, objptr
1fe74     44 00 00 FF 
1fe78     14 E4 85 F1 | 	sub	objptr, ##34836
1fe7c     F2 FA 01 F6 | 	mov	result1, objptr
1fe80     00 20 02 FF 
1fe84     00 FA 45 F5 | 	or	result1, ##71303168
1fe88     44 00 00 FF 
1fe8c     10 E4 05 F1 | 	add	objptr, ##34832
1fe90     F2 FA 61 FC | 	wrlong	result1, objptr
1fe94     44 00 00 FF 
1fe98     10 E4 85 F1 | 	sub	objptr, ##34832
1fe9c     F2 FA 01 F6 | 	mov	result1, objptr
1fea0     00 28 02 FF 
1fea4     00 FA 45 F5 | 	or	result1, ##72351744
1fea8     44 00 00 FF 
1feac     1C E4 05 F1 | 	add	objptr, ##34844
1feb0     F2 FA 61 FC | 	wrlong	result1, objptr
1feb4     44 00 00 FF 
1feb8     1C E4 85 F1 | 	sub	objptr, ##34844
1febc     F2 FA 01 F6 | 	mov	result1, objptr
1fec0     00 30 02 FF 
1fec4     00 FA 45 F5 | 	or	result1, ##73400320
1fec8     44 00 00 FF 
1fecc     20 E4 05 F1 | 	add	objptr, ##34848
1fed0     F2 FA 61 FC | 	wrlong	result1, objptr
1fed4     44 00 00 FF 
1fed8     20 E4 85 F1 | 	sub	objptr, ##34848
1fedc     F2 FA 01 F6 | 	mov	result1, objptr
1fee0     00 38 02 FF 
1fee4     00 FA 45 F5 | 	or	result1, ##74448896
1fee8     43 00 00 FF 
1feec     B4 E4 05 F1 | 	add	objptr, ##34484
1fef0     F2 FA 61 FC | 	wrlong	result1, objptr
1fef4     43 00 00 FF 
1fef8     B4 E4 85 F1 | 	sub	objptr, ##34484
1fefc     F2 FA 01 F6 | 	mov	result1, objptr
1ff00     00 40 02 FF 
1ff04     00 FA 45 F5 | 	or	result1, ##75497472
1ff08     44 00 00 FF 
1ff0c     38 E4 05 F1 | 	add	objptr, ##34872
1ff10     F2 FA 61 FC | 	wrlong	result1, objptr
1ff14     44 00 00 FF 
1ff18     38 E4 85 F1 | 	sub	objptr, ##34872
1ff1c     F2 FA 01 F6 | 	mov	result1, objptr
1ff20     00 48 02 FF 
1ff24     00 FA 45 F5 | 	or	result1, ##76546048
1ff28     44 00 00 FF 
1ff2c     48 E4 05 F1 | 	add	objptr, ##34888
1ff30     F2 FA 61 FC | 	wrlong	result1, objptr
1ff34     44 00 00 FF 
1ff38     48 E4 85 F1 | 	sub	objptr, ##34888
1ff3c     F2 FA 01 F6 | 	mov	result1, objptr
1ff40     00 50 02 FF 
1ff44     00 FA 45 F5 | 	or	result1, ##77594624
1ff48     44 00 00 FF 
1ff4c     4C E4 05 F1 | 	add	objptr, ##34892
1ff50     F2 FA 61 FC | 	wrlong	result1, objptr
1ff54     44 00 00 FF 
1ff58     4C E4 85 F1 | 	sub	objptr, ##34892
1ff5c     F2 FA 01 F6 | 	mov	result1, objptr
1ff60     00 58 02 FF 
1ff64     00 FA 45 F5 | 	or	result1, ##78643200
1ff68     44 00 00 FF 
1ff6c     44 E4 05 F1 | 	add	objptr, ##34884
1ff70     F2 FA 61 FC | 	wrlong	result1, objptr
1ff74     44 00 00 FF 
1ff78     44 E4 85 F1 | 	sub	objptr, ##34884
1ff7c     F2 FA 01 F6 | 	mov	result1, objptr
1ff80     00 60 02 FF 
1ff84     00 FA 45 F5 | 	or	result1, ##79691776
1ff88     44 00 00 FF 
1ff8c     3C E4 05 F1 | 	add	objptr, ##34876
1ff90     F2 FA 61 FC | 	wrlong	result1, objptr
1ff94     44 00 00 FF 
1ff98     3C E4 85 F1 | 	sub	objptr, ##34876
1ff9c     F2 FA 01 F6 | 	mov	result1, objptr
1ffa0     00 68 02 FF 
1ffa4     00 FA 45 F5 | 	or	result1, ##80740352
1ffa8     44 00 00 FF 
1ffac     40 E4 05 F1 | 	add	objptr, ##34880
1ffb0     F2 FA 61 FC | 	wrlong	result1, objptr
1ffb4     44 00 00 FF 
1ffb8     40 E4 85 F1 | 	sub	objptr, ##34880
1ffbc     F2 FA 01 F6 | 	mov	result1, objptr
1ffc0     00 70 02 FF 
1ffc4     00 FA 45 F5 | 	or	result1, ##81788928
1ffc8     44 00 00 FF 
1ffcc     50 E4 05 F1 | 	add	objptr, ##34896
1ffd0     F2 FA 61 FC | 	wrlong	result1, objptr
1ffd4     44 00 00 FF 
1ffd8     50 E4 85 F1 | 	sub	objptr, ##34896
1ffdc     F2 FA 01 F6 | 	mov	result1, objptr
1ffe0     00 78 02 FF 
1ffe4     00 FA 45 F5 | 	or	result1, ##82837504
1ffe8     44 00 00 FF 
1ffec     54 E4 05 F1 | 	add	objptr, ##34900
1fff0     F2 FA 61 FC | 	wrlong	result1, objptr
1fff4     44 00 00 FF 
1fff8     54 E4 85 F1 | 	sub	objptr, ##34900
1fffc     F2 FA 01 F6 | 	mov	result1, objptr
20000     00 80 02 FF 
20004     00 FA 45 F5 | 	or	result1, ##83886080
20008     44 00 00 FF 
2000c     58 E4 05 F1 | 	add	objptr, ##34904
20010     F2 FA 61 FC | 	wrlong	result1, objptr
20014     44 00 00 FF 
20018     58 E4 85 F1 | 	sub	objptr, ##34904
2001c     F2 FA 01 F6 | 	mov	result1, objptr
20020     00 88 02 FF 
20024     00 FA 45 F5 | 	or	result1, ##84934656
20028     44 00 00 FF 
2002c     5C E4 05 F1 | 	add	objptr, ##34908
20030     F2 FA 61 FC | 	wrlong	result1, objptr
20034     44 00 00 FF 
20038     5C E4 85 F1 | 	sub	objptr, ##34908
2003c     F2 FA 01 F6 | 	mov	result1, objptr
20040     00 90 02 FF 
20044     00 FA 45 F5 | 	or	result1, ##85983232
20048     44 00 00 FF 
2004c     60 E4 05 F1 | 	add	objptr, ##34912
20050     F2 FA 61 FC | 	wrlong	result1, objptr
20054     44 00 00 FF 
20058     60 E4 85 F1 | 	sub	objptr, ##34912
2005c     F2 FA 01 F6 | 	mov	result1, objptr
20060     00 98 02 FF 
20064     00 FA 45 F5 | 	or	result1, ##87031808
20068     44 00 00 FF 
2006c     64 E4 05 F1 | 	add	objptr, ##34916
20070     F2 FA 61 FC | 	wrlong	result1, objptr
20074     44 00 00 FF 
20078     64 E4 85 F1 | 	sub	objptr, ##34916
2007c     F2 FA 01 F6 | 	mov	result1, objptr
20080     00 A0 02 FF 
20084     00 FA 45 F5 | 	or	result1, ##88080384
20088     44 00 00 FF 
2008c     68 E4 05 F1 | 	add	objptr, ##34920
20090     F2 FA 61 FC | 	wrlong	result1, objptr
20094     44 00 00 FF 
20098     68 E4 85 F1 | 	sub	objptr, ##34920
2009c     F2 FA 01 F6 | 	mov	result1, objptr
200a0     00 A8 02 FF 
200a4     00 FA 45 F5 | 	or	result1, ##89128960
200a8     44 00 00 FF 
200ac     6C E4 05 F1 | 	add	objptr, ##34924
200b0     F2 FA 61 FC | 	wrlong	result1, objptr
200b4     44 00 00 FF 
200b8     6C E4 85 F1 | 	sub	objptr, ##34924
200bc     F2 FA 01 F6 | 	mov	result1, objptr
200c0     00 B0 02 FF 
200c4     00 FA 45 F5 | 	or	result1, ##90177536
200c8     44 00 00 FF 
200cc     78 E4 05 F1 | 	add	objptr, ##34936
200d0     F2 FA 61 FC | 	wrlong	result1, objptr
200d4     44 00 00 FF 
200d8     78 E4 85 F1 | 	sub	objptr, ##34936
200dc     F2 FA 01 F6 | 	mov	result1, objptr
200e0     00 B8 02 FF 
200e4     00 FA 45 F5 | 	or	result1, ##91226112
200e8     44 00 00 FF 
200ec     70 E4 05 F1 | 	add	objptr, ##34928
200f0     F2 FA 61 FC | 	wrlong	result1, objptr
200f4     44 00 00 FF 
200f8     70 E4 85 F1 | 	sub	objptr, ##34928
200fc     F2 FA 01 F6 | 	mov	result1, objptr
20100     00 C0 02 FF 
20104     00 FA 45 F5 | 	or	result1, ##92274688
20108     44 00 00 FF 
2010c     74 E4 05 F1 | 	add	objptr, ##34932
20110     F2 FA 61 FC | 	wrlong	result1, objptr
20114     44 00 00 FF 
20118     74 E4 85 F1 | 	sub	objptr, ##34932
2011c     F2 FA 01 F6 | 	mov	result1, objptr
20120     00 C8 02 FF 
20124     00 FA 45 F5 | 	or	result1, ##93323264
20128     44 00 00 FF 
2012c     7C E4 05 F1 | 	add	objptr, ##34940
20130     F2 FA 61 FC | 	wrlong	result1, objptr
20134     44 00 00 FF 
20138     7C E4 85 F1 | 	sub	objptr, ##34940
2013c     F2 FA 01 F6 | 	mov	result1, objptr
20140     00 D0 02 FF 
20144     00 FA 45 F5 | 	or	result1, ##94371840
20148     44 00 00 FF 
2014c     24 E4 05 F1 | 	add	objptr, ##34852
20150     F2 FA 61 FC | 	wrlong	result1, objptr
20154     44 00 00 FF 
20158     24 E4 85 F1 | 	sub	objptr, ##34852
2015c     F2 FA 01 F6 | 	mov	result1, objptr
20160     00 D8 02 FF 
20164     00 FA 45 F5 | 	or	result1, ##95420416
20168     44 00 00 FF 
2016c     2C E4 05 F1 | 	add	objptr, ##34860
20170     F2 FA 61 FC | 	wrlong	result1, objptr
20174     44 00 00 FF 
20178     2C E4 85 F1 | 	sub	objptr, ##34860
2017c     F2 FA 01 F6 | 	mov	result1, objptr
20180     00 E0 02 FF 
20184     00 FA 45 F5 | 	or	result1, ##96468992
20188     44 00 00 FF 
2018c     30 E4 05 F1 | 	add	objptr, ##34864
20190     F2 FA 61 FC | 	wrlong	result1, objptr
20194     44 00 00 FF 
20198     30 E4 85 F1 | 	sub	objptr, ##34864
2019c     F2 FA 01 F6 | 	mov	result1, objptr
201a0     00 E8 02 FF 
201a4     00 FA 45 F5 | 	or	result1, ##97517568
201a8     44 00 00 FF 
201ac     80 E4 05 F1 | 	add	objptr, ##34944
201b0     F2 FA 61 FC | 	wrlong	result1, objptr
201b4     44 00 00 FF 
201b8     80 E4 85 F1 | 	sub	objptr, ##34944
201bc     F2 FA 01 F6 | 	mov	result1, objptr
201c0     00 F0 02 FF 
201c4     00 FA 45 F5 | 	or	result1, ##98566144
201c8     44 00 00 FF 
201cc     84 E4 05 F1 | 	add	objptr, ##34948
201d0     F2 FA 61 FC | 	wrlong	result1, objptr
201d4     44 00 00 FF 
201d8     84 E4 85 F1 | 	sub	objptr, ##34948
201dc     F2 FA 01 F6 | 	mov	result1, objptr
201e0     00 F8 02 FF 
201e4     00 FA 45 F5 | 	or	result1, ##99614720
201e8     44 00 00 FF 
201ec     88 E4 05 F1 | 	add	objptr, ##34952
201f0     F2 FA 61 FC | 	wrlong	result1, objptr
201f4     44 00 00 FF 
201f8     88 E4 85 F1 | 	sub	objptr, ##34952
201fc     F2 FA 01 F6 | 	mov	result1, objptr
20200     39 FA 25 F4 | 	bith	result1, #57
20204     44 00 00 FF 
20208     34 E4 05 F1 | 	add	objptr, ##34868
2020c     F2 FA 61 FC | 	wrlong	result1, objptr
20210     44 00 00 FF 
20214     34 E4 85 F1 | 	sub	objptr, ##34868
20218     F2 FA 01 F6 | 	mov	result1, objptr
2021c     00 08 03 FF 
20220     00 FA 45 F5 | 	or	result1, ##101711872
20224     44 00 00 FF 
20228     98 E4 05 F1 | 	add	objptr, ##34968
2022c     F2 FA 61 FC | 	wrlong	result1, objptr
20230     44 00 00 FF 
20234     98 E4 85 F1 | 	sub	objptr, ##34968
20238     F2 FA 01 F6 | 	mov	result1, objptr
2023c     00 10 03 FF 
20240     00 FA 45 F5 | 	or	result1, ##102760448
20244     44 00 00 FF 
20248     A0 E4 05 F1 | 	add	objptr, ##34976
2024c     F2 FA 61 FC | 	wrlong	result1, objptr
20250     44 00 00 FF 
20254     A0 E4 85 F1 | 	sub	objptr, ##34976
20258     F2 FA 01 F6 | 	mov	result1, objptr
2025c     00 18 03 FF 
20260     00 FA 45 F5 | 	or	result1, ##103809024
20264     44 00 00 FF 
20268     94 E4 05 F1 | 	add	objptr, ##34964
2026c     F2 FA 61 FC | 	wrlong	result1, objptr
20270     44 00 00 FF 
20274     94 E4 85 F1 | 	sub	objptr, ##34964
20278     F2 FA 01 F6 | 	mov	result1, objptr
2027c     00 20 03 FF 
20280     00 FA 45 F5 | 	or	result1, ##104857600
20284     44 00 00 FF 
20288     90 E4 05 F1 | 	add	objptr, ##34960
2028c     F2 FA 61 FC | 	wrlong	result1, objptr
20290     44 00 00 FF 
20294     90 E4 85 F1 | 	sub	objptr, ##34960
20298     F2 FA 01 F6 | 	mov	result1, objptr
2029c     00 28 03 FF 
202a0     00 FA 45 F5 | 	or	result1, ##105906176
202a4     44 00 00 FF 
202a8     8C E4 05 F1 | 	add	objptr, ##34956
202ac     F2 FA 61 FC | 	wrlong	result1, objptr
202b0     44 00 00 FF 
202b4     8C E4 85 F1 | 	sub	objptr, ##34956
202b8     F2 FA 01 F6 | 	mov	result1, objptr
202bc     00 30 03 FF 
202c0     00 FA 45 F5 | 	or	result1, ##106954752
202c4     44 00 00 FF 
202c8     9C E4 05 F1 | 	add	objptr, ##34972
202cc     F2 FA 61 FC | 	wrlong	result1, objptr
202d0     44 00 00 FF 
202d4     9C E4 85 F1 | 	sub	objptr, ##34972
202d8     F2 FA 01 F6 | 	mov	result1, objptr
202dc     00 38 03 FF 
202e0     00 FA 45 F5 | 	or	result1, ##108003328
202e4     44 00 00 FF 
202e8     A4 E4 05 F1 | 	add	objptr, ##34980
202ec     F2 FA 61 FC | 	wrlong	result1, objptr
202f0     44 00 00 FF 
202f4     A4 E4 85 F1 | 	sub	objptr, ##34980
202f8     F2 FA 01 F6 | 	mov	result1, objptr
202fc     00 40 03 FF 
20300     00 FA 45 F5 | 	or	result1, ##109051904
20304     44 00 00 FF 
20308     A8 E4 05 F1 | 	add	objptr, ##34984
2030c     F2 FA 61 FC | 	wrlong	result1, objptr
20310     44 00 00 FF 
20314     A8 E4 85 F1 | 	sub	objptr, ##34984
20318     F2 FA 01 F6 | 	mov	result1, objptr
2031c     00 48 03 FF 
20320     00 FA 45 F5 | 	or	result1, ##110100480
20324     44 00 00 FF 
20328     AC E4 05 F1 | 	add	objptr, ##34988
2032c     F2 FA 61 FC | 	wrlong	result1, objptr
20330     44 00 00 FF 
20334     AC E4 85 F1 | 	sub	objptr, ##34988
20338     F2 FA 01 F6 | 	mov	result1, objptr
2033c     00 50 03 FF 
20340     00 FA 45 F5 | 	or	result1, ##111149056
20344     44 00 00 FF 
20348     B4 E4 05 F1 | 	add	objptr, ##34996
2034c     F2 FA 61 FC | 	wrlong	result1, objptr
20350     44 00 00 FF 
20354     B4 E4 85 F1 | 	sub	objptr, ##34996
20358     F2 FA 01 F6 | 	mov	result1, objptr
2035c     00 58 03 FF 
20360     00 FA 45 F5 | 	or	result1, ##112197632
20364     44 00 00 FF 
20368     B8 E4 05 F1 | 	add	objptr, ##35000
2036c     F2 FA 61 FC | 	wrlong	result1, objptr
20370     44 00 00 FF 
20374     B8 E4 85 F1 | 	sub	objptr, ##35000
20378     F2 FA 01 F6 | 	mov	result1, objptr
2037c     00 60 03 FF 
20380     00 FA 45 F5 | 	or	result1, ##113246208
20384     44 00 00 FF 
20388     BC E4 05 F1 | 	add	objptr, ##35004
2038c     F2 FA 61 FC | 	wrlong	result1, objptr
20390     44 00 00 FF 
20394     BC E4 85 F1 | 	sub	objptr, ##35004
20398     F2 FA 01 F6 | 	mov	result1, objptr
2039c     00 68 03 FF 
203a0     00 FA 45 F5 | 	or	result1, ##114294784
203a4     44 00 00 FF 
203a8     C0 E4 05 F1 | 	add	objptr, ##35008
203ac     F2 FA 61 FC | 	wrlong	result1, objptr
203b0     44 00 00 FF 
203b4     C0 E4 85 F1 | 	sub	objptr, ##35008
203b8     F2 FA 01 F6 | 	mov	result1, objptr
203bc     00 70 03 FF 
203c0     00 FA 45 F5 | 	or	result1, ##115343360
203c4     44 00 00 FF 
203c8     C4 E4 05 F1 | 	add	objptr, ##35012
203cc     F2 FA 61 FC | 	wrlong	result1, objptr
203d0     44 00 00 FF 
203d4     C4 E4 85 F1 | 	sub	objptr, ##35012
203d8     F2 FA 01 F6 | 	mov	result1, objptr
203dc     00 78 03 FF 
203e0     00 FA 45 F5 | 	or	result1, ##116391936
203e4     44 00 00 FF 
203e8     C8 E4 05 F1 | 	add	objptr, ##35016
203ec     F2 FA 61 FC | 	wrlong	result1, objptr
203f0     44 00 00 FF 
203f4     C8 E4 85 F1 | 	sub	objptr, ##35016
203f8     F2 FA 01 F6 | 	mov	result1, objptr
203fc     00 08 01 FF 
20400     00 FA 45 F5 | 	or	result1, ##34603008
20404     44 00 00 FF 
20408     CC E4 05 F1 | 	add	objptr, ##35020
2040c     F2 FA 61 FC | 	wrlong	result1, objptr
20410     44 00 00 FF 
20414     CC E4 85 F1 | 	sub	objptr, ##35020
20418     F2 FA 01 F6 | 	mov	result1, objptr
2041c     58 FA 25 F4 | 	bith	result1, #88
20420     44 00 00 FF 
20424     D0 E4 05 F1 | 	add	objptr, ##35024
20428     F2 FA 61 FC | 	wrlong	result1, objptr
2042c     44 00 00 FF 
20430     D0 E4 85 F1 | 	sub	objptr, ##35024
20434     F2 FA 01 F6 | 	mov	result1, objptr
20438     00 88 03 FF 
2043c     00 FA 45 F5 | 	or	result1, ##118489088
20440     44 00 00 FF 
20444     B0 E4 05 F1 | 	add	objptr, ##34992
20448     F2 FA 61 FC | 	wrlong	result1, objptr
2044c     44 00 00 FF 
20450     B0 E4 85 F1 | 	sub	objptr, ##34992
20454     F2 FA 01 F6 | 	mov	result1, objptr
20458     00 90 03 FF 
2045c     00 FA 45 F5 | 	or	result1, ##119537664
20460     43 00 00 FF 
20464     A8 E4 05 F1 | 	add	objptr, ##34472
20468     F2 FA 61 FC | 	wrlong	result1, objptr
2046c     43 00 00 FF 
20470     A8 E4 85 F1 | 	sub	objptr, ##34472
20474     F2 FA 01 F6 | 	mov	result1, objptr
20478     00 98 03 FF 
2047c     00 FA 45 F5 | 	or	result1, ##120586240
20480     44 00 00 FF 
20484     D4 E4 05 F1 | 	add	objptr, ##35028
20488     F2 FA 61 FC | 	wrlong	result1, objptr
2048c     44 00 00 FF 
20490     D4 E4 85 F1 | 	sub	objptr, ##35028
20494     F2 FA 01 F6 | 	mov	result1, objptr
20498     00 A0 03 FF 
2049c     00 FA 45 F5 | 	or	result1, ##121634816
204a0     44 00 00 FF 
204a4     D8 E4 05 F1 | 	add	objptr, ##35032
204a8     F2 FA 61 FC | 	wrlong	result1, objptr
204ac     44 00 00 FF 
204b0     D8 E4 85 F1 | 	sub	objptr, ##35032
204b4     F2 FA 01 F6 | 	mov	result1, objptr
204b8     00 A8 03 FF 
204bc     00 FA 45 F5 | 	or	result1, ##122683392
204c0     44 00 00 FF 
204c4     EC E4 05 F1 | 	add	objptr, ##35052
204c8     F2 FA 61 FC | 	wrlong	result1, objptr
204cc     44 00 00 FF 
204d0     EC E4 85 F1 | 	sub	objptr, ##35052
204d4     F2 FA 01 F6 | 	mov	result1, objptr
204d8     00 B0 03 FF 
204dc     00 FA 45 F5 | 	or	result1, ##123731968
204e0     44 00 00 FF 
204e4     E8 E4 05 F1 | 	add	objptr, ##35048
204e8     F2 FA 61 FC | 	wrlong	result1, objptr
204ec     44 00 00 FF 
204f0     E8 E4 85 F1 | 	sub	objptr, ##35048
204f4     F2 FA 01 F6 | 	mov	result1, objptr
204f8     00 B8 03 FF 
204fc     00 FA 45 F5 | 	or	result1, ##124780544
20500     44 00 00 FF 
20504     E0 E4 05 F1 | 	add	objptr, ##35040
20508     F2 FA 61 FC | 	wrlong	result1, objptr
2050c     44 00 00 FF 
20510     E0 E4 85 F1 | 	sub	objptr, ##35040
20514     F2 FA 01 F6 | 	mov	result1, objptr
20518     77 FA 25 F4 | 	bith	result1, #119
2051c     44 00 00 FF 
20520     DC E4 05 F1 | 	add	objptr, ##35036
20524     F2 FA 61 FC | 	wrlong	result1, objptr
20528     44 00 00 FF 
2052c     DC E4 85 F1 | 	sub	objptr, ##35036
20530     F2 FA 01 F6 | 	mov	result1, objptr
20534     00 C8 03 FF 
20538     00 FA 45 F5 | 	or	result1, ##126877696
2053c     44 00 00 FF 
20540     FC E4 05 F1 | 	add	objptr, ##35068
20544     F2 FA 61 FC | 	wrlong	result1, objptr
20548     44 00 00 FF 
2054c     FC E4 85 F1 | 	sub	objptr, ##35068
20550     F2 FA 01 F6 | 	mov	result1, objptr
20554     00 D0 03 FF 
20558     00 FA 45 F5 | 	or	result1, ##127926272
2055c     44 00 00 FF 
20560     F0 E4 05 F1 | 	add	objptr, ##35056
20564     F2 FA 61 FC | 	wrlong	result1, objptr
20568     44 00 00 FF 
2056c     F0 E4 85 F1 | 	sub	objptr, ##35056
20570     F2 FA 01 F6 | 	mov	result1, objptr
20574     00 D8 03 FF 
20578     00 FA 45 F5 | 	or	result1, ##128974848
2057c     44 00 00 FF 
20580     F4 E4 05 F1 | 	add	objptr, ##35060
20584     F2 FA 61 FC | 	wrlong	result1, objptr
20588     44 00 00 FF 
2058c     F4 E4 85 F1 | 	sub	objptr, ##35060
20590     F2 FA 01 F6 | 	mov	result1, objptr
20594     96 FA 25 F4 | 	bith	result1, #150
20598     44 00 00 FF 
2059c     F8 E4 05 F1 | 	add	objptr, ##35064
205a0     F2 FA 61 FC | 	wrlong	result1, objptr
205a4     44 00 00 FF 
205a8     F8 E4 85 F1 | 	sub	objptr, ##35064
205ac     F2 FA 01 F6 | 	mov	result1, objptr
205b0     00 E8 03 FF 
205b4     00 FA 45 F5 | 	or	result1, ##131072000
205b8     44 00 00 FF 
205bc     00 E5 05 F1 | 	add	objptr, ##35072
205c0     F2 FA 61 FC | 	wrlong	result1, objptr
205c4     44 00 00 FF 
205c8     00 E5 85 F1 | 	sub	objptr, ##35072
205cc     F2 FA 01 F6 | 	mov	result1, objptr
205d0     B5 FA 25 F4 | 	bith	result1, #181
205d4     44 00 00 FF 
205d8     04 E5 05 F1 | 	add	objptr, ##35076
205dc     F2 FA 61 FC | 	wrlong	result1, objptr
205e0     44 00 00 FF 
205e4     04 E5 85 F1 | 	sub	objptr, ##35076
205e8     F2 FA 01 F6 | 	mov	result1, objptr
205ec     D4 FA 25 F4 | 	bith	result1, #212
205f0     44 00 00 FF 
205f4     08 E5 05 F1 | 	add	objptr, ##35080
205f8     F2 FA 61 FC | 	wrlong	result1, objptr
205fc     44 00 00 FF 
20600     08 E5 85 F1 | 	sub	objptr, ##35080
20604     F2 FA 01 F6 | 	mov	result1, objptr
20608     1B FA 25 F4 | 	bith	result1, #27
2060c     44 00 00 FF 
20610     0C E5 05 F1 | 	add	objptr, ##35084
20614     F2 FA 61 FC | 	wrlong	result1, objptr
20618     44 00 00 FF 
2061c     0C E5 85 F1 | 	sub	objptr, ##35084
20620     F2 FA 01 F6 | 	mov	result1, objptr
20624     00 08 04 FF 
20628     00 FA 45 F5 | 	or	result1, ##135266304
2062c     44 00 00 FF 
20630     10 E5 05 F1 | 	add	objptr, ##35088
20634     F2 FA 61 FC | 	wrlong	result1, objptr
20638     44 00 00 FF 
2063c     10 E5 85 F1 | 	sub	objptr, ##35088
20640     F2 FA 01 F6 | 	mov	result1, objptr
20644     00 10 04 FF 
20648     00 FA 45 F5 | 	or	result1, ##136314880
2064c     44 00 00 FF 
20650     14 E5 05 F1 | 	add	objptr, ##35092
20654     F2 FA 61 FC | 	wrlong	result1, objptr
20658     44 00 00 FF 
2065c     14 E5 85 F1 | 	sub	objptr, ##35092
20660     F2 FA 01 F6 | 	mov	result1, objptr
20664     00 18 04 FF 
20668     00 FA 45 F5 | 	or	result1, ##137363456
2066c     44 00 00 FF 
20670     1C E5 05 F1 | 	add	objptr, ##35100
20674     F2 FA 61 FC | 	wrlong	result1, objptr
20678     44 00 00 FF 
2067c     1C E5 85 F1 | 	sub	objptr, ##35100
20680     F2 FA 01 F6 | 	mov	result1, objptr
20684     00 20 04 FF 
20688     00 FA 45 F5 | 	or	result1, ##138412032
2068c     44 00 00 FF 
20690     20 E5 05 F1 | 	add	objptr, ##35104
20694     F2 FA 61 FC | 	wrlong	result1, objptr
20698     44 00 00 FF 
2069c     20 E5 85 F1 | 	sub	objptr, ##35104
206a0     F2 FA 01 F6 | 	mov	result1, objptr
206a4     00 28 04 FF 
206a8     00 FA 45 F5 | 	or	result1, ##139460608
206ac     44 00 00 FF 
206b0     24 E5 05 F1 | 	add	objptr, ##35108
206b4     F2 FA 61 FC | 	wrlong	result1, objptr
206b8     44 00 00 FF 
206bc     24 E5 85 F1 | 	sub	objptr, ##35108
206c0     F2 FA 01 F6 | 	mov	result1, objptr
206c4     00 30 04 FF 
206c8     00 FA 45 F5 | 	or	result1, ##140509184
206cc     44 00 00 FF 
206d0     18 E5 05 F1 | 	add	objptr, ##35096
206d4     F2 FA 61 FC | 	wrlong	result1, objptr
206d8     44 00 00 FF 
206dc     18 E5 85 F1 | 	sub	objptr, ##35096
206e0     F2 FA 01 F6 | 	mov	result1, objptr
206e4     00 38 04 FF 
206e8     00 FA 45 F5 | 	or	result1, ##141557760
206ec     44 00 00 FF 
206f0     28 E5 05 F1 | 	add	objptr, ##35112
206f4     F2 FA 61 FC | 	wrlong	result1, objptr
206f8     44 00 00 FF 
206fc     28 E5 85 F1 | 	sub	objptr, ##35112
20700     F2 FA 01 F6 | 	mov	result1, objptr
20704     00 40 04 FF 
20708     00 FA 45 F5 | 	or	result1, ##142606336
2070c     44 00 00 FF 
20710     5C E5 05 F1 | 	add	objptr, ##35164
20714     F2 FA 61 FC | 	wrlong	result1, objptr
20718     44 00 00 FF 
2071c     5C E5 85 F1 | 	sub	objptr, ##35164
20720     F2 FA 01 F6 | 	mov	result1, objptr
20724     00 48 04 FF 
20728     00 FA 45 F5 | 	or	result1, ##143654912
2072c     44 00 00 FF 
20730     54 E5 05 F1 | 	add	objptr, ##35156
20734     F2 FA 61 FC | 	wrlong	result1, objptr
20738     44 00 00 FF 
2073c     54 E5 85 F1 | 	sub	objptr, ##35156
20740     F2 FA 01 F6 | 	mov	result1, objptr
20744     00 50 04 FF 
20748     00 FA 45 F5 | 	or	result1, ##144703488
2074c     44 00 00 FF 
20750     2C E5 05 F1 | 	add	objptr, ##35116
20754     F2 FA 61 FC | 	wrlong	result1, objptr
20758     44 00 00 FF 
2075c     2C E5 85 F1 | 	sub	objptr, ##35116
20760     F2 FA 01 F6 | 	mov	result1, objptr
20764     00 58 04 FF 
20768     00 FA 45 F5 | 	or	result1, ##145752064
2076c     44 00 00 FF 
20770     30 E5 05 F1 | 	add	objptr, ##35120
20774     F2 FA 61 FC | 	wrlong	result1, objptr
20778     44 00 00 FF 
2077c     30 E5 85 F1 | 	sub	objptr, ##35120
20780     F2 FA 01 F6 | 	mov	result1, objptr
20784     00 60 04 FF 
20788     00 FA 45 F5 | 	or	result1, ##146800640
2078c     44 00 00 FF 
20790     4C E5 05 F1 | 	add	objptr, ##35148
20794     F2 FA 61 FC | 	wrlong	result1, objptr
20798     44 00 00 FF 
2079c     4C E5 85 F1 | 	sub	objptr, ##35148
207a0     F2 FA 01 F6 | 	mov	result1, objptr
207a4     00 68 04 FF 
207a8     00 FA 45 F5 | 	or	result1, ##147849216
207ac     44 00 00 FF 
207b0     50 E5 05 F1 | 	add	objptr, ##35152
207b4     F2 FA 61 FC | 	wrlong	result1, objptr
207b8     44 00 00 FF 
207bc     50 E5 85 F1 | 	sub	objptr, ##35152
207c0     F2 FA 01 F6 | 	mov	result1, objptr
207c4     00 70 04 FF 
207c8     00 FA 45 F5 | 	or	result1, ##148897792
207cc     44 00 00 FF 
207d0     6C E5 05 F1 | 	add	objptr, ##35180
207d4     F2 FA 61 FC | 	wrlong	result1, objptr
207d8     44 00 00 FF 
207dc     6C E5 85 F1 | 	sub	objptr, ##35180
207e0     F2 FA 01 F6 | 	mov	result1, objptr
207e4     00 78 04 FF 
207e8     00 FA 45 F5 | 	or	result1, ##149946368
207ec     44 00 00 FF 
207f0     68 E5 05 F1 | 	add	objptr, ##35176
207f4     F2 FA 61 FC | 	wrlong	result1, objptr
207f8     44 00 00 FF 
207fc     68 E5 85 F1 | 	sub	objptr, ##35176
20800     F2 FA 01 F6 | 	mov	result1, objptr
20804     00 80 04 FF 
20808     00 FA 45 F5 | 	or	result1, ##150994944
2080c     44 00 00 FF 
20810     78 E5 05 F1 | 	add	objptr, ##35192
20814     F2 FA 61 FC | 	wrlong	result1, objptr
20818     44 00 00 FF 
2081c     78 E5 85 F1 | 	sub	objptr, ##35192
20820     F2 FA 01 F6 | 	mov	result1, objptr
20824     00 88 04 FF 
20828     00 FA 45 F5 | 	or	result1, ##152043520
2082c     44 00 00 FF 
20830     44 E5 05 F1 | 	add	objptr, ##35140
20834     F2 FA 61 FC | 	wrlong	result1, objptr
20838     44 00 00 FF 
2083c     44 E5 85 F1 | 	sub	objptr, ##35140
20840     F2 FA 01 F6 | 	mov	result1, objptr
20844     00 90 04 FF 
20848     00 FA 45 F5 | 	or	result1, ##153092096
2084c     44 00 00 FF 
20850     74 E5 05 F1 | 	add	objptr, ##35188
20854     F2 FA 61 FC | 	wrlong	result1, objptr
20858     44 00 00 FF 
2085c     74 E5 85 F1 | 	sub	objptr, ##35188
20860     F2 FA 01 F6 | 	mov	result1, objptr
20864     00 98 04 FF 
20868     00 FA 45 F5 | 	or	result1, ##154140672
2086c     44 00 00 FF 
20870     64 E5 05 F1 | 	add	objptr, ##35172
20874     F2 FA 61 FC | 	wrlong	result1, objptr
20878     44 00 00 FF 
2087c     64 E5 85 F1 | 	sub	objptr, ##35172
20880     F2 FA 01 F6 | 	mov	result1, objptr
20884     00 A0 04 FF 
20888     00 FA 45 F5 | 	or	result1, ##155189248
2088c     43 00 00 FF 
20890     14 E5 05 F1 | 	add	objptr, ##34580
20894     F2 FA 61 FC | 	wrlong	result1, objptr
20898     43 00 00 FF 
2089c     14 E5 85 F1 | 	sub	objptr, ##34580
208a0     F2 FA 01 F6 | 	mov	result1, objptr
208a4     00 A8 04 FF 
208a8     00 FA 45 F5 | 	or	result1, ##156237824
208ac     44 00 00 FF 
208b0     34 E5 05 F1 | 	add	objptr, ##35124
208b4     F2 FA 61 FC | 	wrlong	result1, objptr
208b8     44 00 00 FF 
208bc     34 E5 85 F1 | 	sub	objptr, ##35124
208c0     F2 FA 01 F6 | 	mov	result1, objptr
208c4     00 08 01 FF 
208c8     00 FA 45 F5 | 	or	result1, ##34603008
208cc     44 00 00 FF 
208d0     3C E5 05 F1 | 	add	objptr, ##35132
208d4     F2 FA 61 FC | 	wrlong	result1, objptr
208d8     44 00 00 FF 
208dc     3C E5 85 F1 | 	sub	objptr, ##35132
208e0     F2 FA 01 F6 | 	mov	result1, objptr
208e4     00 B0 04 FF 
208e8     00 FA 45 F5 | 	or	result1, ##157286400
208ec     44 00 00 FF 
208f0     38 E5 05 F1 | 	add	objptr, ##35128
208f4     F2 FA 61 FC | 	wrlong	result1, objptr
208f8     44 00 00 FF 
208fc     38 E5 85 F1 | 	sub	objptr, ##35128
20900     F2 FA 01 F6 | 	mov	result1, objptr
20904     00 B8 04 FF 
20908     00 FA 45 F5 | 	or	result1, ##158334976
2090c     44 00 00 FF 
20910     7C E5 05 F1 | 	add	objptr, ##35196
20914     F2 FA 61 FC | 	wrlong	result1, objptr
20918     44 00 00 FF 
2091c     7C E5 85 F1 | 	sub	objptr, ##35196
20920                 | _init_commands_ret
20920     2D 00 64 FD | 	ret
20924                 | 
20924                 | ' 
20924                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
20924                 | ' 
20924                 | ' sub init_audio
20924                 | _init_audio
20924     06 4A 05 F6 | 	mov	COUNT_, #6
20928     A8 00 A0 FD | 	call	#pushregs_
2092c     00 C0 1F FF 
20930     00 26 06 F6 | 	mov	local01, ##1065353216
20934                 | ' 
20934                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
20934     00 28 06 F6 | 	mov	local02, #0
20938                 | LR__2550
20938     14 2B 02 F6 | 	mov	local03, local02
2093c     01 2A 66 F0 | 	shl	local03, #1
20940     58 7F 23 FF 
20944     00 2C 06 F6 | 	mov	local04, ##1191096320
20948     14 13 52 F6 | 	abs	arg01, local02 wc
2094c     1F 2E C6 C9 |  if_b	decod	local05, #31
20950     00 2E 06 36 |  if_ae	mov	local05, #0
20954     F4 6F B0 FD | 	call	#__system___float_fromuns
20958     17 FB 61 F5 | 	xor	result1, local05
2095c     FD 12 02 F6 | 	mov	arg01, result1
20960     87 24 20 FF 
20964     DB 15 06 F6 | 	mov	arg02, ##1078530011
20968     E4 73 B0 FD | 	call	#__system___float_mul
2096c     FD 12 02 F6 | 	mov	arg01, result1
20970     00 00 22 FF 
20974     00 14 06 F6 | 	mov	arg02, ##1140850688
20978     D8 75 B0 FD | 	call	#__system___float_div
2097c     FD 12 02 F6 | 	mov	arg01, result1
20980     2C 7D B0 FD | 	call	#__system____builtin_sinf
20984     FD 14 02 F6 | 	mov	arg02, result1
20988     16 13 02 F6 | 	mov	arg01, local04
2098c     C0 73 B0 FD | 	call	#__system___float_mul
20990     FD 12 02 F6 | 	mov	arg01, result1
20994     01 14 06 F6 | 	mov	arg02, #1
20998     7C 78 B0 FD | 	call	#__system___float_tointeger
2099c     FD 14 02 F6 | 	mov	arg02, result1
209a0     15 13 02 F6 | 	mov	arg01, local03
209a4     6C 0D B0 FD | 	call	#_psdpoke
209a8     01 28 06 F1 | 	add	local02, #1
209ac     02 00 00 FF 
209b0     00 28 56 F2 | 	cmps	local02, ##1024 wc
209b4     80 FF 9F CD |  if_b	jmp	#LR__2550
209b8                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
209b8     00 28 06 F6 | 	mov	local02, #0
209bc                 | LR__2551
209bc     14 15 02 F6 | 	mov	arg02, local02
209c0     01 14 66 F0 | 	shl	arg02, #1
209c4     0B 12 C6 F9 | 	decod	arg01, #11
209c8     0A 13 02 F1 | 	add	arg01, arg02
209cc     14 2D 02 F6 | 	mov	local04, local02
209d0     07 2C 66 F0 | 	shl	local04, #7
209d4     14 2D 82 F1 | 	sub	local04, local02
209d8     C0 FF 7F FF 
209dc     00 15 06 F6 | 	mov	arg02, ##-32512
209e0     16 15 02 F1 | 	add	arg02, local04
209e4     2C 0D B0 FD | 	call	#_psdpoke
209e8     09 2C C6 F9 | 	decod	local04, #9
209ec     14 2D 02 F1 | 	add	local04, local02
209f0     01 2C 66 F0 | 	shl	local04, #1
209f4     0B 12 C6 F9 | 	decod	arg01, #11
209f8     16 13 02 F1 | 	add	arg01, local04
209fc     14 2F 02 F6 | 	mov	local05, local02
20a00     07 2E 66 F0 | 	shl	local05, #7
20a04     14 2F 82 F1 | 	sub	local05, local02
20a08     3F 00 00 FF 
20a0c     00 15 06 F6 | 	mov	arg02, ##32512
20a10     17 15 82 F1 | 	sub	arg02, local05
20a14     FC 0C B0 FD | 	call	#_psdpoke
20a18     01 28 06 F1 | 	add	local02, #1
20a1c     01 00 00 FF 
20a20     00 28 56 F2 | 	cmps	local02, ##512 wc
20a24     94 FF 9F CD |  if_b	jmp	#LR__2551
20a28                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
20a28     00 28 06 F6 | 	mov	local02, #0
20a2c                 | LR__2552
20a2c     14 2F 02 F6 | 	mov	local05, local02
20a30     01 2E 66 F0 | 	shl	local05, #1
20a34     0C 12 C6 F9 | 	decod	arg01, #12
20a38     17 13 02 F1 | 	add	arg01, local05
20a3c     14 2F 02 F6 | 	mov	local05, local02
20a40     06 2E 66 F0 | 	shl	local05, #6
20a44     14 2F 82 F1 | 	sub	local05, local02
20a48     C1 FF 7F FF 
20a4c     00 14 06 F6 | 	mov	arg02, ##-32256
20a50     17 15 02 F1 | 	add	arg02, local05
20a54     BC 0C B0 FD | 	call	#_psdpoke
20a58     01 28 06 F1 | 	add	local02, #1
20a5c     02 00 00 FF 
20a60     00 28 56 F2 | 	cmps	local02, ##1024 wc
20a64     C4 FF 9F CD |  if_b	jmp	#LR__2552
20a68                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
20a68     00 28 06 F6 | 	mov	local02, #0
20a6c                 | LR__2553
20a6c     14 2F 02 F6 | 	mov	local05, local02
20a70     01 2E 66 F0 | 	shl	local05, #1
20a74     0C 00 00 FF 
20a78     00 12 06 F6 | 	mov	arg01, ##6144
20a7c     17 13 02 F1 | 	add	arg01, local05
20a80     C0 FF 7F FF 
20a84     A8 14 06 F6 | 	mov	arg02, ##-32600
20a88     88 0C B0 FD | 	call	#_psdpoke
20a8c     01 28 06 F1 | 	add	local02, #1
20a90     80 28 56 F2 | 	cmps	local02, #128 wc
20a94     D4 FF 9F CD |  if_b	jmp	#LR__2553
20a98     80 28 06 F6 | 	mov	local02, #128
20a9c                 | LR__2554
20a9c     14 2F 02 F6 | 	mov	local05, local02
20aa0     01 2E 66 F0 | 	shl	local05, #1
20aa4     0C 00 00 FF 
20aa8     00 12 06 F6 | 	mov	arg01, ##6144
20aac     17 13 02 F1 | 	add	arg01, local05
20ab0     3F 00 00 FF 
20ab4     58 15 06 F6 | 	mov	arg02, ##32600
20ab8     58 0C B0 FD | 	call	#_psdpoke
20abc     01 28 06 F1 | 	add	local02, #1
20ac0     02 00 00 FF 
20ac4     00 28 16 F2 | 	cmp	local02, ##1024 wc
20ac8     D0 FF 9F CD |  if_b	jmp	#LR__2554
20acc                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
20acc     00 28 06 F6 | 	mov	local02, #0
20ad0                 | LR__2555
20ad0     14 2F 02 F6 | 	mov	local05, local02
20ad4     01 2E 66 F0 | 	shl	local05, #1
20ad8     0D 12 C6 F9 | 	decod	arg01, #13
20adc     17 13 02 F1 | 	add	arg01, local05
20ae0     C0 FF 7F FF 
20ae4     A8 14 06 F6 | 	mov	arg02, ##-32600
20ae8     28 0C B0 FD | 	call	#_psdpoke
20aec     01 28 06 F1 | 	add	local02, #1
20af0     01 00 00 FF 
20af4     00 28 56 F2 | 	cmps	local02, ##512 wc
20af8     D4 FF 9F CD |  if_b	jmp	#LR__2555
20afc     09 28 C6 F9 | 	decod	local02, #9
20b00                 | LR__2556
20b00     14 2F 02 F6 | 	mov	local05, local02
20b04     01 2E 66 F0 | 	shl	local05, #1
20b08     0D 12 C6 F9 | 	decod	arg01, #13
20b0c     17 13 02 F1 | 	add	arg01, local05
20b10     3F 00 00 FF 
20b14     58 15 06 F6 | 	mov	arg02, ##32600
20b18     F8 0B B0 FD | 	call	#_psdpoke
20b1c     01 28 06 F1 | 	add	local02, #1
20b20     02 00 00 FF 
20b24     00 28 16 F2 | 	cmp	local02, ##1024 wc
20b28     D4 FF 9F CD |  if_b	jmp	#LR__2556
20b2c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
20b2c     00 28 06 F6 | 	mov	local02, #0
20b30                 | LR__2557
20b30     14 2F 02 F6 | 	mov	local05, local02
20b34     01 2E 66 F0 | 	shl	local05, #1
20b38     14 00 00 FF 
20b3c     00 12 06 F6 | 	mov	arg01, ##10240
20b40     17 13 02 F1 | 	add	arg01, local05
20b44     C0 FF 7F FF 
20b48     A8 14 06 F6 | 	mov	arg02, ##-32600
20b4c     C4 0B B0 FD | 	call	#_psdpoke
20b50     01 28 06 F1 | 	add	local02, #1
20b54     00 29 56 F2 | 	cmps	local02, #256 wc
20b58     D4 FF 9F CD |  if_b	jmp	#LR__2557
20b5c     00 29 06 F6 | 	mov	local02, #256
20b60                 | LR__2558
20b60     14 2F 02 F6 | 	mov	local05, local02
20b64     01 2E 66 F0 | 	shl	local05, #1
20b68     14 00 00 FF 
20b6c     00 12 06 F6 | 	mov	arg01, ##10240
20b70     17 13 02 F1 | 	add	arg01, local05
20b74     3F 00 00 FF 
20b78     58 15 06 F6 | 	mov	arg02, ##32600
20b7c     94 0B B0 FD | 	call	#_psdpoke
20b80     01 28 06 F1 | 	add	local02, #1
20b84     02 00 00 FF 
20b88     00 28 16 F2 | 	cmp	local02, ##1024 wc
20b8c     D0 FF 9F CD |  if_b	jmp	#LR__2558
20b90                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
20b90     18 00 00 FF 
20b94     00 28 06 F6 | 	mov	local02, ##12288
20b98                 | LR__2559
20b98     14 13 02 F6 | 	mov	arg01, local02
20b9c     00 14 06 F6 | 	mov	arg02, #0
20ba0     28 0B B0 FD | 	call	#_pslpoke
20ba4     04 28 06 F1 | 	add	local02, #4
20ba8     77 00 00 FF 
20bac     FD 29 56 F2 | 	cmps	local02, ##61437 wc
20bb0     E4 FF 9F CD |  if_b	jmp	#LR__2559
20bb4                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
20bb4     00 28 06 F6 | 	mov	local02, #0
20bb8                 | LR__2560
20bb8     14 2F 02 F6 | 	mov	local05, local02
20bbc     01 2E 66 F0 | 	shl	local05, #1
20bc0     78 00 00 FF 
20bc4     00 2A 06 F6 | 	mov	local03, ##61440
20bc8     17 2B 02 F1 | 	add	local03, local05
20bcc     12 00 00 FF 
20bd0     BA EA 05 F1 | 	add	ptr__dat__, ##9402
20bd4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
20bd8     12 00 00 FF 
20bdc     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
20be0     10 12 06 F1 | 	add	arg01, #16
20be4     14 15 02 F6 | 	mov	arg02, local02
20be8     01 14 66 F0 | 	shl	arg02, #1
20bec     0A 13 02 F1 | 	add	arg01, arg02
20bf0     09 15 E2 FA | 	rdword	arg02, arg01
20bf4     15 13 02 F6 | 	mov	arg01, local03
20bf8     18 0B B0 FD | 	call	#_psdpoke
20bfc     01 28 06 F1 | 	add	local02, #1
20c00     02 00 00 FF 
20c04     00 28 56 F2 | 	cmps	local02, ##1024 wc
20c08     AC FF 9F CD |  if_b	jmp	#LR__2560
20c0c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
20c0c     00 28 06 F6 | 	mov	local02, #0
20c10                 | LR__2561
20c10     14 2F 02 F6 | 	mov	local05, local02
20c14     01 2E 66 F0 | 	shl	local05, #1
20c18     7C 00 00 FF 
20c1c     00 2A 06 F6 | 	mov	local03, ##63488
20c20     17 2B 02 F1 | 	add	local03, local05
20c24     0E 00 00 FF 
20c28     AA EA 05 F1 | 	add	ptr__dat__, ##7338
20c2c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
20c30     0E 00 00 FF 
20c34     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
20c38     10 12 06 F1 | 	add	arg01, #16
20c3c     14 15 02 F6 | 	mov	arg02, local02
20c40     01 14 66 F0 | 	shl	arg02, #1
20c44     0A 13 02 F1 | 	add	arg01, arg02
20c48     09 15 E2 FA | 	rdword	arg02, arg01
20c4c     15 13 02 F6 | 	mov	arg01, local03
20c50     C0 0A B0 FD | 	call	#_psdpoke
20c54     01 28 06 F1 | 	add	local02, #1
20c58     02 00 00 FF 
20c5c     00 28 56 F2 | 	cmps	local02, ##1024 wc
20c60     AC FF 9F CD |  if_b	jmp	#LR__2561
20c64                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
20c64     00 28 06 F6 | 	mov	local02, #0
20c68     0C 00 00 FF 
20c6c     D8 E4 05 F1 | 	add	objptr, ##6360
20c70     97 18 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
20c74                 | LR__2562
20c74     14 2F 02 F6 | 	mov	local05, local02
20c78     01 2E 66 F0 | 	shl	local05, #1
20c7c     F2 2E 02 F1 | 	add	local05, objptr
20c80     14 2B 02 F6 | 	mov	local03, local02
20c84     08 2A 66 F0 | 	shl	local03, #8
20c88     7F 00 00 FF 
20c8c     00 31 06 F6 | 	mov	local06, ##65280
20c90     15 31 82 F1 | 	sub	local06, local03
20c94     17 31 52 FC | 	wrword	local06, local05
20c98     01 28 06 F1 | 	add	local02, #1
20c9c     00 29 56 F2 | 	cmps	local02, #256 wc
20ca0     D0 FF 9F CD |  if_b	jmp	#LR__2562
20ca4                 | LR__2563
20ca4     0C 00 00 FF 
20ca8     D8 E4 85 F1 | 	sub	objptr, ##6360
20cac                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
20cac     00 28 06 F6 | 	mov	local02, #0
20cb0                 | LR__2564
20cb0     14 2F 02 F6 | 	mov	local05, local02
20cb4     01 2E 66 F0 | 	shl	local05, #1
20cb8     0D 00 00 FF 
20cbc     D8 E4 05 F1 | 	add	objptr, ##6872
20cc0     F2 2E 02 F1 | 	add	local05, objptr
20cc4     80 BF 23 FF 
20cc8     00 12 06 F6 | 	mov	arg01, ##1199505408
20ccc     13 15 02 F6 | 	mov	arg02, local01
20cd0     0D 00 00 FF 
20cd4     D8 E4 85 F1 | 	sub	objptr, ##6872
20cd8     74 70 B0 FD | 	call	#__system___float_mul
20cdc     FD 12 02 F6 | 	mov	arg01, result1
20ce0     01 14 06 F6 | 	mov	arg02, #1
20ce4     30 75 B0 FD | 	call	#__system___float_tointeger
20ce8     17 FB 51 FC | 	wrword	result1, local05
20cec     13 13 02 F6 | 	mov	arg01, local01
20cf0     CC BC 1F FF 
20cf4     9A 15 06 F6 | 	mov	arg02, ##1064933786
20cf8     54 70 B0 FD | 	call	#__system___float_mul
20cfc     FD 26 02 F6 | 	mov	local01, result1
20d00     01 28 06 F1 | 	add	local02, #1
20d04     00 29 56 F2 | 	cmps	local02, #256 wc
20d08     A4 FF 9F CD |  if_b	jmp	#LR__2564
20d0c     0E 00 00 FF 
20d10     D6 E4 05 F1 | 	add	objptr, ##7382
20d14     F2 00 58 FC | 	wrword	#0, objptr
20d18                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
20d18     00 28 06 F6 | 	mov	local02, #0
20d1c     02 E4 05 F1 | 	add	objptr, #2
20d20     97 10 48 FB | 	callpa	#(@LR__2566-@LR__2565)>>2,fcache_load_ptr_
20d24                 | LR__2565
20d24     14 2F 02 F6 | 	mov	local05, local02
20d28     01 2E 66 F0 | 	shl	local05, #1
20d2c     F2 2E 02 F1 | 	add	local05, objptr
20d30     7F 00 80 FF 
20d34     17 01 5A FC | 	wrword	##65280, local05
20d38     01 28 06 F1 | 	add	local02, #1
20d3c     FF 28 56 F2 | 	cmps	local02, #255 wc
20d40     E0 FF 9F CD |  if_b	jmp	#LR__2565
20d44                 | LR__2566
20d44     FE E5 05 F1 | 	add	objptr, #510
20d48     F2 00 58 FC | 	wrword	#0, objptr
20d4c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
20d4c     00 28 06 F6 | 	mov	local02, #0
20d50     02 E4 05 F1 | 	add	objptr, #2
20d54     97 52 48 FB | 	callpa	#(@LR__2571-@LR__2567)>>2,fcache_load_ptr_
20d58                 | LR__2567
20d58     14 2F 02 F6 | 	mov	local05, local02
20d5c     01 2E 66 F0 | 	shl	local05, #1
20d60     F2 2E 02 F1 | 	add	local05, objptr
20d64     14 31 02 F6 | 	mov	local06, local02
20d68     0C 30 66 F0 | 	shl	local06, #12
20d6c     17 31 52 FC | 	wrword	local06, local05
20d70     01 28 06 F1 | 	add	local02, #1
20d74     10 28 56 F2 | 	cmps	local02, #16 wc
20d78     DC FF 9F CD |  if_b	jmp	#LR__2567
20d7c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
20d7c     10 28 06 F6 | 	mov	local02, #16
20d80                 | LR__2568
20d80     14 2F 02 F6 | 	mov	local05, local02
20d84     01 2E 66 F0 | 	shl	local05, #1
20d88     F2 2E 02 F1 | 	add	local05, objptr
20d8c     7F 00 80 FF 
20d90     17 01 5A FC | 	wrword	##65280, local05
20d94     01 28 06 F1 | 	add	local02, #1
20d98     F0 28 16 F2 | 	cmp	local02, #240 wc
20d9c     E0 FF 9F CD |  if_b	jmp	#LR__2568
20da0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
20da0     F0 28 06 F6 | 	mov	local02, #240
20da4                 | LR__2569
20da4     14 2F 02 F6 | 	mov	local05, local02
20da8     01 2E 66 F0 | 	shl	local05, #1
20dac     F2 2E 02 F1 | 	add	local05, objptr
20db0     FF 2A 06 F6 | 	mov	local03, #255
20db4     14 2B 82 F1 | 	sub	local03, local02
20db8     0C 2A 66 F0 | 	shl	local03, #12
20dbc     17 2B 52 FC | 	wrword	local03, local05
20dc0     01 28 06 F1 | 	add	local02, #1
20dc4     00 29 16 F2 | 	cmp	local02, #256 wc
20dc8     D8 FF 9F CD |  if_b	jmp	#LR__2569
20dcc                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
20dcc     00 28 06 F6 | 	mov	local02, #0
20dd0     01 00 00 FF 
20dd4     00 E4 05 F1 | 	add	objptr, ##512
20dd8                 | LR__2570
20dd8     14 2F 02 F6 | 	mov	local05, local02
20ddc     01 2E 66 F0 | 	shl	local05, #1
20de0     F2 2E 02 F1 | 	add	local05, objptr
20de4     14 31 02 F6 | 	mov	local06, local02
20de8     08 30 66 F0 | 	shl	local06, #8
20dec     17 31 52 FC | 	wrword	local06, local05
20df0     01 28 06 F1 | 	add	local02, #1
20df4     00 29 56 F2 | 	cmps	local02, #256 wc
20df8     DC FF 9F CD |  if_b	jmp	#LR__2570
20dfc                 | LR__2571
20dfc     FE E5 05 F1 | 	add	objptr, #510
20e00     F2 00 58 FC | 	wrword	#0, objptr
20e04                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
20e04     00 28 06 F6 | 	mov	local02, #0
20e08     02 E4 05 F1 | 	add	objptr, #2
20e0c     97 6A 48 FB | 	callpa	#(@LR__2576-@LR__2572)>>2,fcache_load_ptr_
20e10                 | LR__2572
20e10     14 2F 02 F6 | 	mov	local05, local02
20e14     01 2E 66 F0 | 	shl	local05, #1
20e18     F2 2E 02 F1 | 	add	local05, objptr
20e1c     14 31 02 F6 | 	mov	local06, local02
20e20     04 30 66 F0 | 	shl	local06, #4
20e24     14 31 02 F1 | 	add	local06, local02
20e28     04 30 66 F0 | 	shl	local06, #4
20e2c     17 31 52 FC | 	wrword	local06, local05
20e30     01 28 06 F1 | 	add	local02, #1
20e34     F0 28 56 F2 | 	cmps	local02, #240 wc
20e38     D4 FF 9F CD |  if_b	jmp	#LR__2572
20e3c     F0 28 06 F6 | 	mov	local02, #240
20e40                 | LR__2573
20e40     14 2F 02 F6 | 	mov	local05, local02
20e44     01 2E 66 F0 | 	shl	local05, #1
20e48     F2 2E 02 F1 | 	add	local05, objptr
20e4c     FF 2A 06 F6 | 	mov	local03, #255
20e50     14 2B 82 F1 | 	sub	local03, local02
20e54     0C 2A 66 F0 | 	shl	local03, #12
20e58     17 2B 52 FC | 	wrword	local03, local05
20e5c     01 28 06 F1 | 	add	local02, #1
20e60     00 29 16 F2 | 	cmp	local02, #256 wc
20e64     D8 FF 9F CD |  if_b	jmp	#LR__2573
20e68                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
20e68     00 28 06 F6 | 	mov	local02, #0
20e6c     01 00 00 FF 
20e70     00 E4 05 F1 | 	add	objptr, ##512
20e74                 | LR__2574
20e74     14 2F 02 F6 | 	mov	local05, local02
20e78     01 2E 66 F0 | 	shl	local05, #1
20e7c     F2 2E 02 F1 | 	add	local05, objptr
20e80     14 31 02 F6 | 	mov	local06, local02
20e84     09 30 66 F0 | 	shl	local06, #9
20e88     17 31 52 FC | 	wrword	local06, local05
20e8c     FF 2E 06 F6 | 	mov	local05, #255
20e90     14 2F 82 F1 | 	sub	local05, local02
20e94     01 2E 66 F0 | 	shl	local05, #1
20e98     F2 2E 02 F1 | 	add	local05, objptr
20e9c     14 31 02 F6 | 	mov	local06, local02
20ea0     09 30 66 F0 | 	shl	local06, #9
20ea4     17 31 52 FC | 	wrword	local06, local05
20ea8     01 28 06 F1 | 	add	local02, #1
20eac     80 28 56 F2 | 	cmps	local02, #128 wc
20eb0     C0 FF 9F CD |  if_b	jmp	#LR__2574
20eb4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
20eb4     00 28 06 F6 | 	mov	local02, #0
20eb8     01 00 00 FF 
20ebc     00 E4 05 F1 | 	add	objptr, ##512
20ec0                 | LR__2575
20ec0     14 2F 02 F6 | 	mov	local05, local02
20ec4     01 2E 66 F0 | 	shl	local05, #1
20ec8     F2 2E 02 F1 | 	add	local05, objptr
20ecc     14 31 02 F6 | 	mov	local06, local02
20ed0     0D 30 66 F0 | 	shl	local06, #13
20ed4     17 31 52 FC | 	wrword	local06, local05
20ed8     01 28 06 F1 | 	add	local02, #1
20edc     08 28 56 F2 | 	cmps	local02, #8 wc
20ee0     DC FF 9F CD |  if_b	jmp	#LR__2575
20ee4                 | LR__2576
20ee4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
20ee4     08 28 06 F6 | 	mov	local02, #8
20ee8     97 42 48 FB | 	callpa	#(@LR__2580-@LR__2577)>>2,fcache_load_ptr_
20eec                 | LR__2577
20eec     14 2F 02 F6 | 	mov	local05, local02
20ef0     01 2E 66 F0 | 	shl	local05, #1
20ef4     F2 2E 02 F1 | 	add	local05, objptr
20ef8     14 27 02 F6 | 	mov	local01, local02
20efc     08 26 86 F1 | 	sub	local01, #8
20f00     0B 26 66 F0 | 	shl	local01, #11
20f04     7F 00 00 FF 
20f08     00 31 06 F6 | 	mov	local06, ##65280
20f0c     13 31 82 F1 | 	sub	local06, local01
20f10     17 31 52 FC | 	wrword	local06, local05
20f14     01 28 06 F1 | 	add	local02, #1
20f18     18 28 16 F2 | 	cmp	local02, #24 wc
20f1c     CC FF 9F CD |  if_b	jmp	#LR__2577
20f20                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
20f20     18 28 06 F6 | 	mov	local02, #24
20f24                 | LR__2578
20f24     14 2F 02 F6 | 	mov	local05, local02
20f28     01 2E 66 F0 | 	shl	local05, #1
20f2c     F2 2E 02 F1 | 	add	local05, objptr
20f30     40 00 80 FF 
20f34     17 01 58 FC | 	wrword	##32768, local05
20f38     01 28 06 F1 | 	add	local02, #1
20f3c     81 28 16 F2 | 	cmp	local02, #129 wc
20f40     E0 FF 9F CD |  if_b	jmp	#LR__2578
20f44                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
20f44     81 28 06 F6 | 	mov	local02, #129
20f48                 | LR__2579
20f48     14 2F 02 F6 | 	mov	local05, local02
20f4c     01 2E 66 F0 | 	shl	local05, #1
20f50     F2 2E 02 F1 | 	add	local05, objptr
20f54     FF 2A 06 F6 | 	mov	local03, #255
20f58     14 2B 82 F1 | 	sub	local03, local02
20f5c     08 2A 66 F0 | 	shl	local03, #8
20f60     17 2B 52 FC | 	wrword	local03, local05
20f64     01 28 06 F1 | 	add	local02, #1
20f68     00 29 16 F2 | 	cmp	local02, #256 wc
20f6c     D8 FF 9F CD |  if_b	jmp	#LR__2579
20f70                 | LR__2580
20f70     3E 00 00 FF 
20f74     26 E5 05 F1 | 	add	objptr, ##32038
20f78     F2 00 59 FC | 	wrword	#128, objptr
20f7c     51 00 00 FF 
20f80     FE E5 85 F1 | 	sub	objptr, ##41982
20f84                 | ' for i=0 to 7
20f84     00 28 06 F6 | 	mov	local02, #0
20f88     97 8E 48 FB | 	callpa	#(@LR__2582-@LR__2581)>>2,fcache_load_ptr_
20f8c                 | LR__2581
20f8c     14 2F 02 F6 | 	mov	local05, local02
20f90     01 2E 66 F0 | 	shl	local05, #1
20f94     14 2F 02 F1 | 	add	local05, local02
20f98     03 2E 66 F0 | 	shl	local05, #3
20f9c     14 00 00 FF 
20fa0     38 E5 05 F1 | 	add	objptr, ##10552
20fa4     F2 2E 02 F1 | 	add	local05, objptr
20fa8     00 EE A1 FF 
20fac     17 01 68 FC | 	wrlong	##1138491392, local05
20fb0     14 2F 02 F6 | 	mov	local05, local02
20fb4     01 2E 66 F0 | 	shl	local05, #1
20fb8     14 2F 02 F1 | 	add	local05, local02
20fbc     03 2E 66 F0 | 	shl	local05, #3
20fc0     F2 2E 02 F1 | 	add	local05, objptr
20fc4     04 2E 06 F1 | 	add	local05, #4
20fc8     17 29 42 FC | 	wrbyte	local02, local05
20fcc     14 2F 02 F6 | 	mov	local05, local02
20fd0     01 2E 66 F0 | 	shl	local05, #1
20fd4     14 2F 02 F1 | 	add	local05, local02
20fd8     03 2E 66 F0 | 	shl	local05, #3
20fdc     F2 2E 02 F1 | 	add	local05, objptr
20fe0     05 2E 06 F1 | 	add	local05, #5
20fe4     17 29 42 FC | 	wrbyte	local02, local05
20fe8     14 2F 02 F6 | 	mov	local05, local02
20fec     01 2E 66 F0 | 	shl	local05, #1
20ff0     14 2F 02 F1 | 	add	local05, local02
20ff4     03 2E 66 F0 | 	shl	local05, #3
20ff8     F2 2E 02 F1 | 	add	local05, objptr
20ffc     06 2E 06 F1 | 	add	local05, #6
21000     17 01 58 FC | 	wrword	#0, local05
21004     14 2F 02 F6 | 	mov	local05, local02
21008     01 2E 66 F0 | 	shl	local05, #1
2100c     14 2F 02 F1 | 	add	local05, local02
21010     03 2E 66 F0 | 	shl	local05, #3
21014     F2 2E 02 F1 | 	add	local05, objptr
21018     08 2E 06 F1 | 	add	local05, #8
2101c     00 C0 9F FF 
21020     17 01 68 FC | 	wrlong	##1065353216, local05
21024     14 2F 02 F6 | 	mov	local05, local02
21028     01 2E 66 F0 | 	shl	local05, #1
2102c     14 2F 02 F1 | 	add	local05, local02
21030     03 2E 66 F0 | 	shl	local05, #3
21034     F2 2E 02 F1 | 	add	local05, objptr
21038     0C 2E 06 F1 | 	add	local05, #12
2103c     00 40 A0 FF 
21040     17 01 68 FC | 	wrlong	##1082130432, local05
21044     14 2F 02 F6 | 	mov	local05, local02
21048     01 2E 66 F0 | 	shl	local05, #1
2104c     14 2F 02 F1 | 	add	local05, local02
21050     03 2E 66 F0 | 	shl	local05, #3
21054     F2 2E 02 F1 | 	add	local05, objptr
21058     10 2E 06 F1 | 	add	local05, #16
2105c     17 01 68 FC | 	wrlong	#0, local05
21060     14 2F 02 F6 | 	mov	local05, local02
21064     01 2E 66 F0 | 	shl	local05, #1
21068     14 2F 02 F1 | 	add	local05, local02
2106c     03 2E 66 F0 | 	shl	local05, #3
21070     F2 2E 02 F1 | 	add	local05, objptr
21074     14 2E 06 F1 | 	add	local05, #20
21078     17 FF 59 FC | 	wrword	#255, local05
2107c     14 2F 02 F6 | 	mov	local05, local02
21080     01 2E 66 F0 | 	shl	local05, #1
21084     3D 00 00 FF 
21088     B8 E4 05 F1 | 	add	objptr, ##31416
2108c     F2 2E 02 F1 | 	add	local05, objptr
21090     17 FF 59 FC | 	wrword	#255, local05
21094     01 28 06 F1 | 	add	local02, #1
21098     08 28 56 F2 | 	cmps	local02, #8 wc
2109c     51 00 00 FF 
210a0     F0 E5 85 F1 | 	sub	objptr, ##41968
210a4     E4 FE 9F CD |  if_b	jmp	#LR__2581
210a8                 | LR__2582
210a8     00 6E 20 FF 
210ac     00 30 06 F6 | 	mov	local06, ##1088159744
210b0                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
210b0     03 2E 06 F6 | 	mov	local05, #3
210b4                 | LR__2583
210b4     18 13 02 F6 | 	mov	arg01, local06
210b8     CE C3 1F FF 
210bc     7D 14 06 F6 | 	mov	arg02, ##1065852029
210c0     8C 6C B0 FD | 	call	#__system___float_mul
210c4     FD 30 02 F6 | 	mov	local06, result1
210c8     FA 2F 6E FB | 	djnz	local05, #LR__2583
210cc     00 28 06 F6 | 	mov	local02, #0
210d0                 | LR__2584
210d0     14 2D 02 F6 | 	mov	local04, local02
210d4     02 2C 66 F0 | 	shl	local04, #2
210d8     14 00 00 FF 
210dc     D8 E4 05 F1 | 	add	objptr, ##10456
210e0     F2 2C 02 F1 | 	add	local04, objptr
210e4     16 31 62 FC | 	wrlong	local06, local04
210e8     18 13 02 F6 | 	mov	arg01, local06
210ec     CE C3 1F FF 
210f0     7D 14 06 F6 | 	mov	arg02, ##1065852029
210f4     14 00 00 FF 
210f8     D8 E4 85 F1 | 	sub	objptr, ##10456
210fc     50 6C B0 FD | 	call	#__system___float_mul
21100     FD 30 02 F6 | 	mov	local06, result1
21104     01 28 06 F1 | 	add	local02, #1
21108     0C 28 56 F2 | 	cmps	local02, #12 wc
2110c     C0 FF 9F CD |  if_b	jmp	#LR__2584
21110     14 00 00 FF 
21114     08 E5 05 F1 | 	add	objptr, ##10504
21118     F2 50 6B FC | 	wrlong	#424, objptr
2111c     04 E4 05 F1 | 	add	objptr, #4
21120     F2 20 6B FC | 	wrlong	#400, objptr
21124     04 E4 05 F1 | 	add	objptr, #4
21128     F2 F2 6A FC | 	wrlong	#377, objptr
2112c     04 E4 05 F1 | 	add	objptr, #4
21130     F2 C8 6A FC | 	wrlong	#356, objptr
21134     04 E4 05 F1 | 	add	objptr, #4
21138     F2 A0 6A FC | 	wrlong	#336, objptr
2113c     04 E4 05 F1 | 	add	objptr, #4
21140     F2 7A 6A FC | 	wrlong	#317, objptr
21144     04 E4 05 F1 | 	add	objptr, #4
21148     F2 58 6A FC | 	wrlong	#300, objptr
2114c     04 E4 05 F1 | 	add	objptr, #4
21150     F2 36 6A FC | 	wrlong	#283, objptr
21154     04 E4 05 F1 | 	add	objptr, #4
21158     F2 16 6A FC | 	wrlong	#267, objptr
2115c     04 E4 05 F1 | 	add	objptr, #4
21160     F2 F8 69 FC | 	wrlong	#252, objptr
21164     04 E4 05 F1 | 	add	objptr, #4
21168     F2 DC 69 FC | 	wrlong	#238, objptr
2116c     04 E4 05 F1 | 	add	objptr, #4
21170     F2 C0 69 FC | 	wrlong	#224, objptr
21174     3D 00 00 FF 
21178     CA E4 05 F1 | 	add	objptr, ##31434
2117c     F2 00 59 FC | 	wrword	#128, objptr
21180     02 E4 85 F1 | 	sub	objptr, #2
21184     F2 00 59 FC | 	wrword	#128, objptr
21188     51 00 00 FF 
2118c     FC E5 85 F1 | 	sub	objptr, ##41980
21190     A7 F0 03 F6 | 	mov	ptra, fp
21194     B2 00 A0 FD | 	call	#popregs_
21198                 | _init_audio_ret
21198     2D 00 64 FD | 	ret
2119c                 | 
2119c                 | ' 
2119c                 | ' '------------------- Error messages
2119c                 | ' 
2119c                 | ' sub init_error_strings
2119c                 | _init_error_strings
2119c     AA 01 00 FF 
211a0     E4 00 06 F6 | 	mov	_var01, ##@LR__5887
211a4     45 00 00 FF 
211a8     7C E4 05 F1 | 	add	objptr, ##35452
211ac     F2 00 62 FC | 	wrlong	_var01, objptr
211b0     AA 01 00 FF 
211b4     E5 00 06 F6 | 	mov	_var01, ##@LR__5888
211b8     04 E4 05 F1 | 	add	objptr, #4
211bc     F2 00 62 FC | 	wrlong	_var01, objptr
211c0     AA 01 00 FF 
211c4     09 01 06 F6 | 	mov	_var01, ##@LR__5889
211c8     04 E4 05 F1 | 	add	objptr, #4
211cc     F2 00 62 FC | 	wrlong	_var01, objptr
211d0     AA 01 00 FF 
211d4     29 01 06 F6 | 	mov	_var01, ##@LR__5890
211d8     04 E4 05 F1 | 	add	objptr, #4
211dc     F2 00 62 FC | 	wrlong	_var01, objptr
211e0     AA 01 00 FF 
211e4     42 01 06 F6 | 	mov	_var01, ##@LR__5891
211e8     04 E4 05 F1 | 	add	objptr, #4
211ec     F2 00 62 FC | 	wrlong	_var01, objptr
211f0     AA 01 00 FF 
211f4     5D 01 06 F6 | 	mov	_var01, ##@LR__5892
211f8     04 E4 05 F1 | 	add	objptr, #4
211fc     F2 00 62 FC | 	wrlong	_var01, objptr
21200     AA 01 00 FF 
21204     7E 01 06 F6 | 	mov	_var01, ##@LR__5893
21208     04 E4 05 F1 | 	add	objptr, #4
2120c     F2 00 62 FC | 	wrlong	_var01, objptr
21210     AA 01 00 FF 
21214     AB 01 06 F6 | 	mov	_var01, ##@LR__5894
21218     04 E4 05 F1 | 	add	objptr, #4
2121c     F2 00 62 FC | 	wrlong	_var01, objptr
21220     AA 01 00 FF 
21224     D5 01 06 F6 | 	mov	_var01, ##@LR__5895
21228     04 E4 05 F1 | 	add	objptr, #4
2122c     F2 00 62 FC | 	wrlong	_var01, objptr
21230     AA 01 00 FF 
21234     ED 01 06 F6 | 	mov	_var01, ##@LR__5896
21238     04 E4 05 F1 | 	add	objptr, #4
2123c     F2 00 62 FC | 	wrlong	_var01, objptr
21240     AB 01 00 FF 
21244     0D 00 06 F6 | 	mov	_var01, ##@LR__5897
21248     04 E4 05 F1 | 	add	objptr, #4
2124c     F2 00 62 FC | 	wrlong	_var01, objptr
21250     AB 01 00 FF 
21254     23 00 06 F6 | 	mov	_var01, ##@LR__5898
21258     04 E4 05 F1 | 	add	objptr, #4
2125c     F2 00 62 FC | 	wrlong	_var01, objptr
21260     AB 01 00 FF 
21264     40 00 06 F6 | 	mov	_var01, ##@LR__5899
21268     04 E4 05 F1 | 	add	objptr, #4
2126c     F2 00 62 FC | 	wrlong	_var01, objptr
21270     AB 01 00 FF 
21274     63 00 06 F6 | 	mov	_var01, ##@LR__5900
21278     04 E4 05 F1 | 	add	objptr, #4
2127c     F2 00 62 FC | 	wrlong	_var01, objptr
21280     AB 01 00 FF 
21284     89 00 06 F6 | 	mov	_var01, ##@LR__5901
21288     04 E4 05 F1 | 	add	objptr, #4
2128c     F2 00 62 FC | 	wrlong	_var01, objptr
21290     AB 01 00 FF 
21294     A4 00 06 F6 | 	mov	_var01, ##@LR__5902
21298     04 E4 05 F1 | 	add	objptr, #4
2129c     F2 00 62 FC | 	wrlong	_var01, objptr
212a0     AB 01 00 FF 
212a4     B4 00 06 F6 | 	mov	_var01, ##@LR__5903
212a8     04 E4 05 F1 | 	add	objptr, #4
212ac     F2 00 62 FC | 	wrlong	_var01, objptr
212b0     AB 01 00 FF 
212b4     C3 00 06 F6 | 	mov	_var01, ##@LR__5904
212b8     04 E4 05 F1 | 	add	objptr, #4
212bc     F2 00 62 FC | 	wrlong	_var01, objptr
212c0     AB 01 00 FF 
212c4     DD 00 06 F6 | 	mov	_var01, ##@LR__5905
212c8     04 E4 05 F1 | 	add	objptr, #4
212cc     F2 00 62 FC | 	wrlong	_var01, objptr
212d0     AB 01 00 FF 
212d4     EE 00 06 F6 | 	mov	_var01, ##@LR__5906
212d8     04 E4 05 F1 | 	add	objptr, #4
212dc     F2 00 62 FC | 	wrlong	_var01, objptr
212e0     AB 01 00 FF 
212e4     05 01 06 F6 | 	mov	_var01, ##@LR__5907
212e8     04 E4 05 F1 | 	add	objptr, #4
212ec     F2 00 62 FC | 	wrlong	_var01, objptr
212f0     AB 01 00 FF 
212f4     18 01 06 F6 | 	mov	_var01, ##@LR__5908
212f8     04 E4 05 F1 | 	add	objptr, #4
212fc     F2 00 62 FC | 	wrlong	_var01, objptr
21300     AB 01 00 FF 
21304     27 01 06 F6 | 	mov	_var01, ##@LR__5909
21308     04 E4 05 F1 | 	add	objptr, #4
2130c     F2 00 62 FC | 	wrlong	_var01, objptr
21310     AB 01 00 FF 
21314     43 01 06 F6 | 	mov	_var01, ##@LR__5910
21318     04 E4 05 F1 | 	add	objptr, #4
2131c     F2 00 62 FC | 	wrlong	_var01, objptr
21320     AB 01 00 FF 
21324     53 01 06 F6 | 	mov	_var01, ##@LR__5911
21328     04 E4 05 F1 | 	add	objptr, #4
2132c     F2 00 62 FC | 	wrlong	_var01, objptr
21330     AB 01 00 FF 
21334     63 01 06 F6 | 	mov	_var01, ##@LR__5912
21338     04 E4 05 F1 | 	add	objptr, #4
2133c     F2 00 62 FC | 	wrlong	_var01, objptr
21340     AB 01 00 FF 
21344     96 01 06 F6 | 	mov	_var01, ##@LR__5913
21348     04 E4 05 F1 | 	add	objptr, #4
2134c     F2 00 62 FC | 	wrlong	_var01, objptr
21350     AB 01 00 FF 
21354     B1 01 06 F6 | 	mov	_var01, ##@LR__5914
21358     04 E4 05 F1 | 	add	objptr, #4
2135c     F2 00 62 FC | 	wrlong	_var01, objptr
21360     AB 01 00 FF 
21364     C6 01 06 F6 | 	mov	_var01, ##@LR__5915
21368     04 E4 05 F1 | 	add	objptr, #4
2136c     F2 00 62 FC | 	wrlong	_var01, objptr
21370     AB 01 00 FF 
21374     D2 01 06 F6 | 	mov	_var01, ##@LR__5916
21378     04 E4 05 F1 | 	add	objptr, #4
2137c     F2 00 62 FC | 	wrlong	_var01, objptr
21380     AB 01 00 FF 
21384     E3 01 06 F6 | 	mov	_var01, ##@LR__5917
21388     04 E4 05 F1 | 	add	objptr, #4
2138c     F2 00 62 FC | 	wrlong	_var01, objptr
21390     AB 01 00 FF 
21394     F3 01 06 F6 | 	mov	_var01, ##@LR__5918
21398     04 E4 05 F1 | 	add	objptr, #4
2139c     F2 00 62 FC | 	wrlong	_var01, objptr
213a0     AC 01 00 FF 
213a4     0E 00 06 F6 | 	mov	_var01, ##@LR__5919
213a8     04 E4 05 F1 | 	add	objptr, #4
213ac     F2 00 62 FC | 	wrlong	_var01, objptr
213b0     AC 01 00 FF 
213b4     1E 00 06 F6 | 	mov	_var01, ##@LR__5920
213b8     04 E4 05 F1 | 	add	objptr, #4
213bc     F2 00 62 FC | 	wrlong	_var01, objptr
213c0     AC 01 00 FF 
213c4     2C 00 06 F6 | 	mov	_var01, ##@LR__5921
213c8     04 E4 05 F1 | 	add	objptr, #4
213cc     F2 00 62 FC | 	wrlong	_var01, objptr
213d0     AC 01 00 FF 
213d4     46 00 06 F6 | 	mov	_var01, ##@LR__5922
213d8     04 E4 05 F1 | 	add	objptr, #4
213dc     F2 00 62 FC | 	wrlong	_var01, objptr
213e0     AC 01 00 FF 
213e4     79 00 06 F6 | 	mov	_var01, ##@LR__5923
213e8     04 E4 05 F1 | 	add	objptr, #4
213ec     F2 00 62 FC | 	wrlong	_var01, objptr
213f0     AC 01 00 FF 
213f4     91 00 06 F6 | 	mov	_var01, ##@LR__5924
213f8     04 E4 05 F1 | 	add	objptr, #4
213fc     F2 00 62 FC | 	wrlong	_var01, objptr
21400     AC 01 00 FF 
21404     AC 00 06 F6 | 	mov	_var01, ##@LR__5925
21408     04 E4 05 F1 | 	add	objptr, #4
2140c     F2 00 62 FC | 	wrlong	_var01, objptr
21410     AC 01 00 FF 
21414     C9 00 06 F6 | 	mov	_var01, ##@LR__5926
21418     04 E4 05 F1 | 	add	objptr, #4
2141c     F2 00 62 FC | 	wrlong	_var01, objptr
21420     AC 01 00 FF 
21424     E2 00 06 F6 | 	mov	_var01, ##@LR__5927
21428     04 E4 05 F1 | 	add	objptr, #4
2142c     F2 00 62 FC | 	wrlong	_var01, objptr
21430     AC 01 00 FF 
21434     01 01 06 F6 | 	mov	_var01, ##@LR__5928
21438     04 E4 05 F1 | 	add	objptr, #4
2143c     F2 00 62 FC | 	wrlong	_var01, objptr
21440     AC 01 00 FF 
21444     0F 01 06 F6 | 	mov	_var01, ##@LR__5929
21448     04 E4 05 F1 | 	add	objptr, #4
2144c     F2 00 62 FC | 	wrlong	_var01, objptr
21450     AC 01 00 FF 
21454     3C 01 06 F6 | 	mov	_var01, ##@LR__5930
21458     04 E4 05 F1 | 	add	objptr, #4
2145c     F2 00 62 FC | 	wrlong	_var01, objptr
21460     AC 01 00 FF 
21464     49 01 06 F6 | 	mov	_var01, ##@LR__5931
21468     04 E4 05 F1 | 	add	objptr, #4
2146c     F2 00 62 FC | 	wrlong	_var01, objptr
21470     AC 01 00 FF 
21474     5D 01 06 F6 | 	mov	_var01, ##@LR__5932
21478     04 E4 05 F1 | 	add	objptr, #4
2147c     F2 00 62 FC | 	wrlong	_var01, objptr
21480     AC 01 00 FF 
21484     81 01 06 F6 | 	mov	_var01, ##@LR__5933
21488     04 E4 05 F1 | 	add	objptr, #4
2148c     F2 00 62 FC | 	wrlong	_var01, objptr
21490     AC 01 00 FF 
21494     98 01 06 F6 | 	mov	_var01, ##@LR__5934
21498     04 E4 05 F1 | 	add	objptr, #4
2149c     F2 00 62 FC | 	wrlong	_var01, objptr
214a0     AC 01 00 FF 
214a4     AB 01 06 F6 | 	mov	_var01, ##@LR__5935
214a8     04 E4 05 F1 | 	add	objptr, #4
214ac     F2 00 62 FC | 	wrlong	_var01, objptr
214b0     AC 01 00 FF 
214b4     C2 01 06 F6 | 	mov	_var01, ##@LR__5936
214b8     04 E4 05 F1 | 	add	objptr, #4
214bc     F2 00 62 FC | 	wrlong	_var01, objptr
214c0     AC 01 00 FF 
214c4     DB 01 06 F6 | 	mov	_var01, ##@LR__5937
214c8     04 E4 05 F1 | 	add	objptr, #4
214cc     F2 00 62 FC | 	wrlong	_var01, objptr
214d0     AC 01 00 FF 
214d4     FD 01 06 F6 | 	mov	_var01, ##@LR__5938
214d8     04 E4 05 F1 | 	add	objptr, #4
214dc     F2 00 62 FC | 	wrlong	_var01, objptr
214e0     AD 01 00 FF 
214e4     10 00 06 F6 | 	mov	_var01, ##@LR__5939
214e8     04 E4 05 F1 | 	add	objptr, #4
214ec     F2 00 62 FC | 	wrlong	_var01, objptr
214f0     AD 01 00 FF 
214f4     20 00 06 F6 | 	mov	_var01, ##@LR__5940
214f8     04 E4 05 F1 | 	add	objptr, #4
214fc     F2 00 62 FC | 	wrlong	_var01, objptr
21500     AD 01 00 FF 
21504     38 00 06 F6 | 	mov	_var01, ##@LR__5941
21508     04 E4 05 F1 | 	add	objptr, #4
2150c     F2 00 62 FC | 	wrlong	_var01, objptr
21510     AD 01 00 FF 
21514     4F 00 06 F6 | 	mov	_var01, ##@LR__5942
21518     04 E4 05 F1 | 	add	objptr, #4
2151c     F2 00 62 FC | 	wrlong	_var01, objptr
21520     45 00 00 FF 
21524     58 E5 85 F1 | 	sub	objptr, ##35672
21528                 | _init_error_strings_ret
21528     2D 00 64 FD | 	ret
2152c                 | 
2152c                 | '         
2152c                 | ' sub printerror(err as integer, linenum=0 as integer)
2152c                 | _printerror
2152c     02 4A 05 F6 | 	mov	COUNT_, #2
21530     A8 00 A0 FD | 	call	#pushregs_
21534     09 27 02 F6 | 	mov	local01, arg01
21538     0A 29 02 F6 | 	mov	local02, arg02
2153c     AD 01 00 FF 
21540     5C 12 06 F6 | 	mov	arg01, ##@LR__5943
21544     10 21 B0 FD | 	call	#_hg010b_spin2_write
21548     13 13 02 F6 | 	mov	arg01, local01
2154c     AC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
21550     FD 12 02 F6 | 	mov	arg01, result1
21554     00 21 B0 FD | 	call	#_hg010b_spin2_write
21558     AD 01 00 FF 
2155c     63 12 06 F6 | 	mov	arg01, ##@LR__5944
21560     F4 20 B0 FD | 	call	#_hg010b_spin2_write
21564     02 26 66 F0 | 	shl	local01, #2
21568     45 00 00 FF 
2156c     7C E4 05 F1 | 	add	objptr, ##35452
21570     F2 26 02 F1 | 	add	local01, objptr
21574     13 13 02 FB | 	rdlong	arg01, local01
21578     45 00 00 FF 
2157c     7C E4 85 F1 | 	sub	objptr, ##35452
21580     D4 20 B0 FD | 	call	#_hg010b_spin2_write
21584                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
21584                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
21584     01 28 56 F2 | 	cmps	local02, #1 wc
21588     24 00 90 CD |  if_b	jmp	#LR__2590
2158c     AD 01 00 FF 
21590     67 12 06 F6 | 	mov	arg01, ##@LR__5945
21594     C0 20 B0 FD | 	call	#_hg010b_spin2_write
21598     14 13 02 F6 | 	mov	arg01, local02
2159c     5C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
215a0     FD 12 02 F6 | 	mov	arg01, result1
215a4                 | ' 
215a4                 | ' write(text)
215a4     B0 20 B0 FD | 	call	#_hg010b_spin2_write
215a8                 | ' crlf
215a8     AC 25 B0 FD | 	call	#_hg010b_spin2_crlf
215ac     10 00 90 FD | 	jmp	#LR__2591
215b0                 | LR__2590
215b0     AD 01 00 FF 
215b4     71 12 06 F6 | 	mov	arg01, ##@LR__5946
215b8                 | ' 
215b8                 | ' write(text)
215b8     9C 20 B0 FD | 	call	#_hg010b_spin2_write
215bc                 | ' crlf
215bc     98 25 B0 FD | 	call	#_hg010b_spin2_crlf
215c0                 | LR__2591
215c0     A7 F0 03 F6 | 	mov	ptra, fp
215c4     B2 00 A0 FD | 	call	#popregs_
215c8                 | _printerror_ret
215c8     2D 00 64 FD | 	ret
215cc                 | 
215cc                 | ' 
215cc                 | ' '' ------------------------------- Hardware start/stop/initialization 
215cc                 | ' 
215cc                 | ' sub startpsram
215cc                 | _startpsram
215cc     00 12 06 F6 | 	mov	arg01, #0
215d0     0A 14 C6 F9 | 	decod	arg02, #10
215d4     0B 16 06 F6 | 	mov	arg03, #11
215d8     07 18 06 F6 | 	mov	arg04, #7
215dc     0B 00 00 FF 
215e0     CC E4 05 F1 | 	add	objptr, ##5836
215e4     80 2A B0 FD | 	call	#_psram_spin2_startx
215e8     2B 00 00 FF 
215ec     3C E5 05 F1 | 	add	objptr, ##22332
215f0     F2 FA 61 FC | 	wrlong	result1, objptr
215f4                 | '     return $7FF00 + cog*12
215f4     0C E4 05 F1 | 	add	objptr, #12
215f8     FF 03 80 FF 
215fc     F2 00 6A FC | 	wrlong	##524032, objptr
21600     37 00 00 FF 
21604     14 E4 85 F1 | 	sub	objptr, ##28180
21608                 | _startpsram_ret
21608     2D 00 64 FD | 	ret
2160c                 | 
2160c                 | ' 
2160c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2160c                 | _startvideo
2160c     01 4A 05 F6 | 	mov	COUNT_, #1
21610     A8 00 A0 FD | 	call	#pushregs_
21614     37 00 00 FF 
21618     14 E4 05 F1 | 	add	objptr, ##28180
2161c     F2 18 02 FB | 	rdlong	arg04, objptr
21620     37 00 00 FF 
21624     14 E4 85 F1 | 	sub	objptr, ##28180
21628     0A 13 02 F6 | 	mov	arg01, arg02
2162c     0C 15 02 F6 | 	mov	arg02, arg04
21630     1C 08 B0 FD | 	call	#_hg010b_spin2_start
21634     37 00 00 FF 
21638     00 E4 05 F1 | 	add	objptr, ##28160
2163c     F2 FA 61 FC | 	wrlong	result1, objptr
21640                 | ' 
21640                 | ' videocog=v.start(pin,mbox)
21640                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
21640     00 26 06 F6 | 	mov	local01, #0
21644     2B 00 00 FF 
21648     34 E5 85 F1 | 	sub	objptr, ##22324
2164c                 | LR__2600
2164c     13 13 02 F6 | 	mov	arg01, local01
21650     00 28 00 FF 
21654     00 14 06 F6 | 	mov	arg02, ##5242880
21658     64 2E B0 FD | 	call	#_psram_spin2_setQos
2165c     01 26 06 F1 | 	add	local01, #1
21660     08 26 56 F2 | 	cmps	local01, #8 wc
21664     E4 FF 9F CD |  if_b	jmp	#LR__2600
21668     2B 00 00 FF 
2166c     34 E5 05 F1 | 	add	objptr, ##22324
21670     F2 12 02 FB | 	rdlong	arg01, objptr
21674     7A 00 02 FF 
21678     00 14 06 F6 | 	mov	arg02, ##67171328
2167c     2B 00 00 FF 
21680     34 E5 85 F1 | 	sub	objptr, ##22324
21684     38 2E B0 FD | 	call	#_psram_spin2_setQos
21688     0B 00 00 FF 
2168c     CC E4 85 F1 | 	sub	objptr, ##5836
21690                 | ' psram.setQoS(videocog, $0400f400) 
21690                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
21690     F2 14 02 F6 | 	mov	arg02, objptr
21694     00 C0 04 FF 
21698     00 14 46 F5 | 	or	arg02, ##159383552
2169c     00 16 06 F6 | 	mov	arg03, #0
216a0     00 18 06 F6 | 	mov	arg04, #0
216a4     00 12 06 F6 | 	mov	arg01, #0
216a8     D0 42 B0 FD | 	call	#__system___basic_open
216ac                 | ' return videocog
216ac     37 00 00 FF 
216b0     00 E4 05 F1 | 	add	objptr, ##28160
216b4     F2 FA 01 FB | 	rdlong	result1, objptr
216b8     37 00 00 FF 
216bc     00 E4 85 F1 | 	sub	objptr, ##28160
216c0     A7 F0 03 F6 | 	mov	ptra, fp
216c4     B2 00 A0 FD | 	call	#popregs_
216c8                 | _startvideo_ret
216c8     2D 00 64 FD | 	ret
216cc                 | 
216cc                 | ' 
216cc                 | ' 
216cc                 | ' 
216cc                 | ' '' ------------------------------- Convenient psram peek/poke
216cc                 | ' 
216cc                 | ' sub pslpoke(addr as ulong,value as ulong)
216cc                 | _pslpoke
216cc     00 4A 05 F6 | 	mov	COUNT_, #0
216d0     A8 00 A0 FD | 	call	#pushregs_
216d4     08 F0 07 F1 | 	add	ptra, #8
216d8     A7 12 62 FC | 	wrlong	arg01, fp
216dc     04 4E 05 F1 | 	add	fp, #4
216e0     A7 14 62 FC | 	wrlong	arg02, fp
216e4     A7 12 02 F6 | 	mov	arg01, fp
216e8     04 4E 85 F1 | 	sub	fp, #4
216ec     A7 14 02 FB | 	rdlong	arg02, fp
216f0     04 16 06 F6 | 	mov	arg03, #4
216f4     0B 00 00 FF 
216f8     CC E4 05 F1 | 	add	objptr, ##5836
216fc     30 2C B0 FD | 	call	#_psram_spin2_write
21700     0B 00 00 FF 
21704     CC E4 85 F1 | 	sub	objptr, ##5836
21708     A7 F0 03 F6 | 	mov	ptra, fp
2170c     B2 00 A0 FD | 	call	#popregs_
21710                 | _pslpoke_ret
21710     2D 00 64 FD | 	ret
21714                 | 
21714                 | ' 
21714                 | ' sub psdpoke(addr as ulong,value as ulong)
21714                 | _psdpoke
21714     00 4A 05 F6 | 	mov	COUNT_, #0
21718     A8 00 A0 FD | 	call	#pushregs_
2171c     08 F0 07 F1 | 	add	ptra, #8
21720     A7 12 62 FC | 	wrlong	arg01, fp
21724     04 4E 05 F1 | 	add	fp, #4
21728     A7 14 62 FC | 	wrlong	arg02, fp
2172c     A7 12 02 F6 | 	mov	arg01, fp
21730     04 4E 85 F1 | 	sub	fp, #4
21734     A7 14 02 FB | 	rdlong	arg02, fp
21738     02 16 06 F6 | 	mov	arg03, #2
2173c     0B 00 00 FF 
21740     CC E4 05 F1 | 	add	objptr, ##5836
21744     E8 2B B0 FD | 	call	#_psram_spin2_write
21748     0B 00 00 FF 
2174c     CC E4 85 F1 | 	sub	objptr, ##5836
21750     A7 F0 03 F6 | 	mov	ptra, fp
21754     B2 00 A0 FD | 	call	#popregs_
21758                 | _psdpoke_ret
21758     2D 00 64 FD | 	ret
2175c                 | 
2175c                 | ' 
2175c                 | ' sub pspoke(addr as ulong,value as ulong)
2175c                 | _pspoke
2175c     00 4A 05 F6 | 	mov	COUNT_, #0
21760     A8 00 A0 FD | 	call	#pushregs_
21764     08 F0 07 F1 | 	add	ptra, #8
21768     A7 12 62 FC | 	wrlong	arg01, fp
2176c     04 4E 05 F1 | 	add	fp, #4
21770     A7 14 62 FC | 	wrlong	arg02, fp
21774     A7 12 02 F6 | 	mov	arg01, fp
21778     04 4E 85 F1 | 	sub	fp, #4
2177c     A7 14 02 FB | 	rdlong	arg02, fp
21780     01 16 06 F6 | 	mov	arg03, #1
21784     0B 00 00 FF 
21788     CC E4 05 F1 | 	add	objptr, ##5836
2178c     A0 2B B0 FD | 	call	#_psram_spin2_write
21790     0B 00 00 FF 
21794     CC E4 85 F1 | 	sub	objptr, ##5836
21798     A7 F0 03 F6 | 	mov	ptra, fp
2179c     B2 00 A0 FD | 	call	#popregs_
217a0                 | _pspoke_ret
217a0     2D 00 64 FD | 	ret
217a4                 | 
217a4                 | ' 
217a4                 | ' function pspeek(adr as ulong) as ubyte
217a4                 | _pspeek
217a4     00 4A 05 F6 | 	mov	COUNT_, #0
217a8     A8 00 A0 FD | 	call	#pushregs_
217ac     0C F0 07 F1 | 	add	ptra, #12
217b0     04 4E 05 F1 | 	add	fp, #4
217b4     A7 12 62 FC | 	wrlong	arg01, fp
217b8     04 4E 05 F1 | 	add	fp, #4
217bc     A7 12 02 F6 | 	mov	arg01, fp
217c0     04 4E 85 F1 | 	sub	fp, #4
217c4     A7 14 02 FB | 	rdlong	arg02, fp
217c8     04 4E 85 F1 | 	sub	fp, #4
217cc     01 16 06 F6 | 	mov	arg03, #1
217d0     0B 00 00 FF 
217d4     CC E4 05 F1 | 	add	objptr, ##5836
217d8     B8 2A B0 FD | 	call	#_psram_spin2_read1
217dc     0B 00 00 FF 
217e0     CC E4 85 F1 | 	sub	objptr, ##5836
217e4                 | ' psram.read1(varptr(res),adr,1)
217e4                 | ' return res
217e4     08 4E 05 F1 | 	add	fp, #8
217e8     A7 FA C1 FA | 	rdbyte	result1, fp
217ec     08 4E 85 F1 | 	sub	fp, #8
217f0     A7 F0 03 F6 | 	mov	ptra, fp
217f4     B2 00 A0 FD | 	call	#popregs_
217f8                 | _pspeek_ret
217f8     2D 00 64 FD | 	ret
217fc                 | 
217fc                 | ' 
217fc                 | ' function pslpeek(adr as ulong) as ulong
217fc                 | _pslpeek
217fc     00 4A 05 F6 | 	mov	COUNT_, #0
21800     A8 00 A0 FD | 	call	#pushregs_
21804     0C F0 07 F1 | 	add	ptra, #12
21808     04 4E 05 F1 | 	add	fp, #4
2180c     A7 12 62 FC | 	wrlong	arg01, fp
21810     04 4E 05 F1 | 	add	fp, #4
21814     A7 12 02 F6 | 	mov	arg01, fp
21818     04 4E 85 F1 | 	sub	fp, #4
2181c     A7 14 02 FB | 	rdlong	arg02, fp
21820     04 4E 85 F1 | 	sub	fp, #4
21824     04 16 06 F6 | 	mov	arg03, #4
21828     0B 00 00 FF 
2182c     CC E4 05 F1 | 	add	objptr, ##5836
21830     60 2A B0 FD | 	call	#_psram_spin2_read1
21834     0B 00 00 FF 
21838     CC E4 85 F1 | 	sub	objptr, ##5836
2183c                 | ' psram.read1(varptr(res),adr,4)
2183c                 | ' return res
2183c     08 4E 05 F1 | 	add	fp, #8
21840     A7 FA 01 FB | 	rdlong	result1, fp
21844     08 4E 85 F1 | 	sub	fp, #8
21848     A7 F0 03 F6 | 	mov	ptra, fp
2184c     B2 00 A0 FD | 	call	#popregs_
21850                 | _pslpeek_ret
21850     2D 00 64 FD | 	ret
21854                 | 
21854                 | ' 
21854                 | ' function psdpeek(adr as ulong) as ulong
21854                 | _psdpeek
21854     00 4A 05 F6 | 	mov	COUNT_, #0
21858     A8 00 A0 FD | 	call	#pushregs_
2185c     0C F0 07 F1 | 	add	ptra, #12
21860     04 4E 05 F1 | 	add	fp, #4
21864     A7 12 62 FC | 	wrlong	arg01, fp
21868     04 4E 05 F1 | 	add	fp, #4
2186c     A7 12 02 F6 | 	mov	arg01, fp
21870     04 4E 85 F1 | 	sub	fp, #4
21874     A7 14 02 FB | 	rdlong	arg02, fp
21878     04 4E 85 F1 | 	sub	fp, #4
2187c     02 16 06 F6 | 	mov	arg03, #2
21880     0B 00 00 FF 
21884     CC E4 05 F1 | 	add	objptr, ##5836
21888     08 2A B0 FD | 	call	#_psram_spin2_read1
2188c     0B 00 00 FF 
21890     CC E4 85 F1 | 	sub	objptr, ##5836
21894                 | ' psram.read1(varptr(res),adr,2)
21894                 | ' return res
21894     08 4E 05 F1 | 	add	fp, #8
21898     A7 FA E1 FA | 	rdword	result1, fp
2189c     08 4E 85 F1 | 	sub	fp, #8
218a0     A7 F0 03 F6 | 	mov	ptra, fp
218a4     B2 00 A0 FD | 	call	#popregs_
218a8                 | _psdpeek_ret
218a8     2D 00 64 FD | 	ret
218ac                 | 
218ac                 | ' 
218ac                 | ' '' ------------------------------- USB keyboard scan to char translator
218ac                 | ' 
218ac                 | ' function scantochar(key)
218ac                 | _scantochar
218ac                 | ' 
218ac                 | ' select case (key shr 8) and 255
218ac     09 01 02 F6 | 	mov	_var01, arg01
218b0     08 00 C6 F0 | 	sar	_var01, #8
218b4     FF 00 0E F5 | 	and	_var01, #255 wz
218b8     24 00 90 AD |  if_e	jmp	#LR__2610
218bc     02 00 0E F2 | 	cmp	_var01, #2 wz
218c0     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
218c4     30 00 90 AD |  if_e	jmp	#LR__2611
218c8     40 00 0E F2 | 	cmp	_var01, #64 wz
218cc     44 00 90 AD |  if_e	jmp	#LR__2612
218d0     42 00 0E F2 | 	cmp	_var01, #66 wz
218d4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
218d8     70 00 90 5D |  if_ne	jmp	#LR__2614
218dc     50 00 90 FD | 	jmp	#LR__2613
218e0                 | LR__2610
218e0     09 FB 01 F6 | 	mov	result1, arg01
218e4     7F FA 05 F5 | 	and	result1, #127
218e8     02 FA 65 F0 | 	shl	result1, #2
218ec     F5 FA 01 F1 | 	add	result1, ptr__dat__
218f0     FD FA C1 FA | 	rdbyte	result1, result1
218f4     54 00 90 FD | 	jmp	#_scantochar_ret
218f8                 | LR__2611
218f8     09 FB 01 F6 | 	mov	result1, arg01
218fc     7F FA 05 F5 | 	and	result1, #127
21900     02 FA 65 F0 | 	shl	result1, #2
21904     01 FA 05 F1 | 	add	result1, #1
21908     F5 FA 01 F1 | 	add	result1, ptr__dat__
2190c     FD FA C1 FA | 	rdbyte	result1, result1
21910     38 00 90 FD | 	jmp	#_scantochar_ret
21914                 | LR__2612
21914     09 FB 01 F6 | 	mov	result1, arg01
21918     7F FA 05 F5 | 	and	result1, #127
2191c     02 FA 65 F0 | 	shl	result1, #2
21920     02 FA 05 F1 | 	add	result1, #2
21924     F5 FA 01 F1 | 	add	result1, ptr__dat__
21928     FD FA C1 FA | 	rdbyte	result1, result1
2192c     1C 00 90 FD | 	jmp	#_scantochar_ret
21930                 | LR__2613
21930     09 FB 01 F6 | 	mov	result1, arg01
21934     7F FA 05 F5 | 	and	result1, #127
21938     02 FA 65 F0 | 	shl	result1, #2
2193c     03 FA 05 F1 | 	add	result1, #3
21940     F5 FA 01 F1 | 	add	result1, ptr__dat__
21944     FD FA C1 FA | 	rdbyte	result1, result1
21948     00 00 90 FD | 	jmp	#_scantochar_ret
2194c                 | LR__2614
2194c                 | _scantochar_ret
2194c     2D 00 64 FD | 	ret
21950                 | 
21950                 | _program
21950     01 4A 05 F6 | 	mov	COUNT_, #1
21954     A8 00 A0 FD | 	call	#pushregs_
21958     70 FC BF FD | 	call	#_startpsram
2195c     40 12 06 F6 | 	mov	arg01, #64
21960     00 14 06 F6 | 	mov	arg02, #0
21964     00 16 06 F6 | 	mov	arg03, #0
21968     A0 FC BF FD | 	call	#_startvideo
2196c     37 00 00 FF 
21970     14 E4 05 F1 | 	add	objptr, ##28180
21974     F2 12 02 FB | 	rdlong	arg01, objptr
21978     00 14 06 F6 | 	mov	arg02, #0
2197c     FB 03 00 FF 
21980     00 17 06 F6 | 	mov	arg03, ##521984
21984     2B 00 00 FF 
21988     48 E5 85 F1 | 	sub	objptr, ##22344
2198c     E0 2E B0 FD | 	call	#_audio096_spin2_start
21990     FE 16 02 F6 | 	mov	arg03, result2
21994     2B 00 00 FF 
21998     30 E5 05 F1 | 	add	objptr, ##22320
2199c     F2 FA 61 FC | 	wrlong	result1, objptr
219a0     14 E4 05 F1 | 	add	objptr, #20
219a4     F2 16 62 FC | 	wrlong	arg03, objptr
219a8     37 00 00 FF 
219ac     10 E4 85 F1 | 	sub	objptr, ##28176
219b0     32 12 06 F6 | 	mov	arg01, #50
219b4     10 38 B0 FD | 	call	#__system___waitms
219b8     37 00 00 FF 
219bc     10 E4 05 F1 | 	add	objptr, ##28176
219c0     F2 12 02 FB | 	rdlong	arg01, objptr
219c4     37 00 00 FF 
219c8     10 E4 85 F1 | 	sub	objptr, ##28176
219cc     14 12 06 F1 | 	add	arg01, #20
219d0     20 00 80 FF 
219d4     09 01 58 FC | 	wrword	##16384, arg01
219d8     EC 2B B0 FD | 	call	#_usbnew_spin2_start
219dc     37 00 00 FF 
219e0     04 E4 05 F1 | 	add	objptr, ##28164
219e4     F2 FA 61 FC | 	wrlong	result1, objptr
219e8                 | '   mouse_limits[0] := xlim
219e8     0F 00 00 FF 
219ec     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
219f0     01 00 80 FF 
219f4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
219f8                 | '   mouse_limits[1] := ylim
219f8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
219fc     01 00 80 FF 
21a00     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
21a04     36 00 00 FF 
21a08     F3 E4 85 F1 | 	sub	objptr, ##27891
21a0c     F2 12 02 F6 | 	mov	arg01, objptr
21a10     11 E5 85 F1 | 	sub	objptr, #273
21a14     C4 12 06 F1 | 	add	arg01, #196
21a18                 | '   mouse_outptr := ptr
21a18     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21a1c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
21a20     0F 00 00 FF 
21a24     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
21a28     16 00 00 FF 
21a2c     CA EA 05 F1 | 	add	ptr__dat__, ##11466
21a30     F5 14 02 F6 | 	mov	arg02, ptr__dat__
21a34     16 00 00 FF 
21a38     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
21a3c     10 12 06 F6 | 	mov	arg01, #16
21a40     A4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
21a44     10 12 06 F6 | 	mov	arg01, #16
21a48     20 14 06 F6 | 	mov	arg02, #32
21a4c     20 16 06 F6 | 	mov	arg03, #32
21a50     24 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
21a54     09 12 C6 F9 | 	decod	arg01, #9
21a58     2C 15 06 F6 | 	mov	arg02, #300
21a5c     C0 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
21a60     F2 16 02 F6 | 	mov	arg03, objptr
21a64     50 00 00 FF 
21a68     44 E5 05 F1 | 	add	objptr, ##41284
21a6c     F2 14 02 F6 | 	mov	arg02, objptr
21a70     0A 17 62 FC | 	wrlong	arg03, arg02
21a74     04 14 06 F1 | 	add	arg02, #4
21a78     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
21a7c     EF 14 02 F6 | 	mov	arg02, entryptr__
21a80     1E FA 05 F6 | 	mov	result1, #30
21a84     28 E4 61 FD | 	setq	objptr
21a88     0A FB F1 FC | 	coginit	result1, arg02 wc
21a8c     01 FA 65 C6 |  if_b	neg	result1, #1
21a90     04 E4 85 F1 | 	sub	objptr, #4
21a94     F2 FA 61 FC | 	wrlong	result1, objptr
21a98     01 00 00 FF 
21a9c     90 E4 05 F1 | 	add	objptr, ##656
21aa0     F2 00 68 FC | 	wrlong	#0, objptr
21aa4     1A 00 00 FF 
21aa8     9C E5 85 F1 | 	sub	objptr, ##13724
21aac     F2 04 68 FC | 	wrlong	#2, objptr
21ab0     04 E4 05 F1 | 	add	objptr, #4
21ab4     F2 26 69 FC | 	wrlong	#147, objptr
21ab8     04 E4 05 F1 | 	add	objptr, #4
21abc     F2 34 69 FC | 	wrlong	#154, objptr
21ac0     04 E4 05 F1 | 	add	objptr, #4
21ac4     F2 08 68 FC | 	wrlong	#4, objptr
21ac8     04 E4 85 F1 | 	sub	objptr, #4
21acc     F2 16 02 FB | 	rdlong	arg03, objptr
21ad0     14 E4 85 F1 | 	sub	objptr, #20
21ad4     F2 16 62 FC | 	wrlong	arg03, objptr
21ad8     04 E4 05 F1 | 	add	objptr, #4
21adc     F2 00 68 FC | 	wrlong	#0, objptr
21ae0     04 E4 05 F1 | 	add	objptr, #4
21ae4     F2 00 68 FC | 	wrlong	#0, objptr
21ae8     19 00 00 FF 
21aec     0C E5 05 F1 | 	add	objptr, ##13068
21af0     F2 02 68 FC | 	wrlong	#1, objptr
21af4     01 00 00 FF 
21af8     9C E4 05 F1 | 	add	objptr, ##668
21afc     F2 00 68 FC | 	wrlong	#0, objptr
21b00     01 00 00 FF 
21b04     00 EA 05 F1 | 	add	ptr__dat__, ##512
21b08     08 E4 05 F1 | 	add	objptr, #8
21b0c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
21b10     04 E4 85 F1 | 	sub	objptr, #4
21b14     03 00 80 FF 
21b18     F2 3C 69 FC | 	wrlong	##1694, objptr
21b1c     0C 00 00 FF 
21b20     78 E5 85 F1 | 	sub	objptr, ##6520
21b24     F2 18 68 FC | 	wrlong	#12, objptr
21b28     45 00 00 FF 
21b2c     64 E4 85 F1 | 	sub	objptr, ##35428
21b30     01 00 00 FF 
21b34     00 EA 85 F1 | 	sub	ptr__dat__, ##512
21b38     C8 D9 BF FD | 	call	#_init_commands
21b3c     5C F6 BF FD | 	call	#_init_error_strings
21b40     E0 ED BF FD | 	call	#_init_audio
21b44     20 3A BF FD | 	call	#_do_new
21b48     37 00 00 FF 
21b4c     3C E4 05 F1 | 	add	objptr, ##28220
21b50     F2 12 02 FB | 	rdlong	arg01, objptr
21b54     04 E4 85 F1 | 	sub	objptr, #4
21b58     F2 14 02 FB | 	rdlong	arg02, objptr
21b5c     37 00 00 FF 
21b60     38 E4 85 F1 | 	sub	objptr, ##28216
21b64     30 17 B0 FD | 	call	#_hg010b_spin2_cls
21b68     37 00 00 FF 
21b6c     40 E4 05 F1 | 	add	objptr, ##28224
21b70     F2 12 02 FB | 	rdlong	arg01, objptr
21b74     37 00 00 FF 
21b78     40 E4 85 F1 | 	sub	objptr, ##28224
21b7c     C8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
21b80                 | ' 
21b80                 | ' leading_spaces:=amount
21b80     01 00 00 FF 
21b84     B6 E4 05 F1 | 	add	objptr, ##694
21b88     F2 04 68 FC | 	wrlong	#2, objptr
21b8c     01 00 00 FF 
21b90     B6 E4 85 F1 | 	sub	objptr, ##694
21b94     AD 01 00 FF 
21b98     72 26 06 F6 | 	mov	local01, ##@LR__5947
21b9c     3D 12 06 F6 | 	mov	arg01, #61
21ba0     3C 14 06 F6 | 	mov	arg02, #60
21ba4     3B 16 06 F6 | 	mov	arg03, #59
21ba8     3A 18 06 F6 | 	mov	arg04, #58
21bac     AC 80 B0 FD | 	call	#__system___vfs_open_sdcardx
21bb0     FD 14 02 F6 | 	mov	arg02, result1
21bb4     13 13 02 F6 | 	mov	arg01, local01
21bb8     E4 36 B0 FD | 	call	#__system___mount
21bbc     AD 01 00 FF 
21bc0     76 12 06 F6 | 	mov	arg01, ##@LR__5948
21bc4     98 39 B0 FD | 	call	#__system___chdir
21bc8     AD 01 00 FF 
21bcc     7E 26 06 F6 | 	mov	local01, ##@LR__5949
21bd0     4A 00 00 FF 
21bd4     94 E4 05 F1 | 	add	objptr, ##38036
21bd8     F2 26 62 FC | 	wrlong	local01, objptr
21bdc     13 00 00 FF 
21be0     60 E4 85 F1 | 	sub	objptr, ##9824
21be4     F2 12 02 FB | 	rdlong	arg01, objptr
21be8     37 00 00 FF 
21bec     34 E4 85 F1 | 	sub	objptr, ##28212
21bf0     01 12 66 F0 | 	shl	arg01, #1
21bf4     01 14 06 F6 | 	mov	arg02, #1
21bf8     8C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21bfc                 | ' init_commands
21bfc                 | ' init_error_strings
21bfc                 | ' init_audio
21bfc                 | ' do_new
21bfc                 | ' cls(ink, paper)
21bfc                 | ' v.setfontfamily(font) 				' use ST Mono font
21bfc                 | ' v.setleadingspaces(2)
21bfc                 | ' mount "/sd", _vfs_open_sdcard()
21bfc                 | ' chdir "/sd/bas"
21bfc                 | ' currentdir$="/sd/bas"
21bfc                 | ' position 2*editor_spaces,1 : print ver$
21bfc     00 12 06 F6 | 	mov	arg01, #0
21c00     74 8F B0 FD | 	call	#__system___getiolock_0593
21c04     FD 12 02 F6 | 	mov	arg01, result1
21c08     C8 32 B0 FD | 	call	#__system___lockmem
21c0c     18 00 00 FF 
21c10     40 EB 05 F1 | 	add	ptr__dat__, ##12608
21c14     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
21c18     18 00 00 FF 
21c1c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
21c20     00 12 06 F6 | 	mov	arg01, #0
21c24     00 16 06 F6 | 	mov	arg03, #0
21c28     A0 3F B0 FD | 	call	#__system___basic_print_string
21c2c     00 12 06 F6 | 	mov	arg01, #0
21c30     0A 14 06 F6 | 	mov	arg02, #10
21c34     00 16 06 F6 | 	mov	arg03, #0
21c38     38 3F B0 FD | 	call	#__system___basic_print_char
21c3c     00 12 06 F6 | 	mov	arg01, #0
21c40     34 8F B0 FD | 	call	#__system___getiolock_0593
21c44     FD 00 68 FC | 	wrlong	#0, result1
21c48     51 00 00 FF 
21c4c     D4 E5 05 F1 | 	add	objptr, ##41940
21c50     F2 12 02 FB | 	rdlong	arg01, objptr
21c54     0E 00 00 FF 
21c58     78 E5 85 F1 | 	sub	objptr, ##7544
21c5c     F2 26 02 FB | 	rdlong	local01, objptr
21c60     43 00 00 FF 
21c64     5C E4 85 F1 | 	sub	objptr, ##34396
21c68     13 13 82 F1 | 	sub	arg01, local01
21c6c     00 14 06 F6 | 	mov	arg02, #0
21c70     0A 16 06 F6 | 	mov	arg03, #10
21c74     30 55 B0 FD | 	call	#__system__Number_S
21c78     FD 12 02 F6 | 	mov	arg01, result1
21c7c     AD 01 00 FF 
21c80     86 14 06 F6 | 	mov	arg02, ##@LR__5950
21c84     A8 32 B0 FD | 	call	#__system___string_concat
21c88     FD 26 02 F6 | 	mov	local01, result1
21c8c     50 00 00 FF 
21c90     38 E5 05 F1 | 	add	objptr, ##41272
21c94     F2 26 62 FC | 	wrlong	local01, objptr
21c98     50 00 00 FF 
21c9c     38 E5 85 F1 | 	sub	objptr, ##41272
21ca0                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
21ca0     00 12 06 F6 | 	mov	arg01, #0
21ca4     D0 8E B0 FD | 	call	#__system___getiolock_0593
21ca8     FD 12 02 F6 | 	mov	arg01, result1
21cac     24 32 B0 FD | 	call	#__system___lockmem
21cb0     50 00 00 FF 
21cb4     38 E5 05 F1 | 	add	objptr, ##41272
21cb8     F2 14 02 FB | 	rdlong	arg02, objptr
21cbc     50 00 00 FF 
21cc0     38 E5 85 F1 | 	sub	objptr, ##41272
21cc4     00 12 06 F6 | 	mov	arg01, #0
21cc8     00 16 06 F6 | 	mov	arg03, #0
21ccc     FC 3E B0 FD | 	call	#__system___basic_print_string
21cd0     00 12 06 F6 | 	mov	arg01, #0
21cd4     0A 14 06 F6 | 	mov	arg02, #10
21cd8     00 16 06 F6 | 	mov	arg03, #0
21cdc     94 3E B0 FD | 	call	#__system___basic_print_char
21ce0     00 12 06 F6 | 	mov	arg01, #0
21ce4     90 8E B0 FD | 	call	#__system___getiolock_0593
21ce8     FD 00 68 FC | 	wrlong	#0, result1
21cec     37 00 00 FF 
21cf0     34 E4 05 F1 | 	add	objptr, ##28212
21cf4     F2 12 02 FB | 	rdlong	arg01, objptr
21cf8     37 00 00 FF 
21cfc     34 E4 85 F1 | 	sub	objptr, ##28212
21d00     01 12 66 F0 | 	shl	arg01, #1
21d04     04 14 06 F6 | 	mov	arg02, #4
21d08     7C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
21d0c                 | ' position 2*editor_spaces,4 : print "Ready"
21d0c     00 12 06 F6 | 	mov	arg01, #0
21d10     64 8E B0 FD | 	call	#__system___getiolock_0593
21d14     FD 12 02 F6 | 	mov	arg01, result1
21d18     B8 31 B0 FD | 	call	#__system___lockmem
21d1c     AD 01 00 FF 
21d20     98 14 06 F6 | 	mov	arg02, ##@LR__5951
21d24     00 12 06 F6 | 	mov	arg01, #0
21d28     00 16 06 F6 | 	mov	arg03, #0
21d2c     9C 3E B0 FD | 	call	#__system___basic_print_string
21d30     00 12 06 F6 | 	mov	arg01, #0
21d34     0A 14 06 F6 | 	mov	arg02, #10
21d38     00 16 06 F6 | 	mov	arg03, #0
21d3c     34 3E B0 FD | 	call	#__system___basic_print_char
21d40     00 12 06 F6 | 	mov	arg01, #0
21d44     30 8E B0 FD | 	call	#__system___getiolock_0593
21d48     FD 00 68 FC | 	wrlong	#0, result1
21d4c     00 14 06 F6 | 	mov	arg02, #0
21d50     01 14 D6 F7 | 	test	arg02, #1 wc
21d54     5A 4C 64 FD | 	drvc	#38
21d58     01 14 D6 F7 | 	test	arg02, #1 wc
21d5c     5A 4E 64 FD | 	drvc	#39
21d60     AD 01 00 FF 
21d64     9E 26 06 F6 | 	mov	local01, ##@LR__5952
21d68     52 00 00 FF 
21d6c     00 E4 05 F1 | 	add	objptr, ##41984
21d70     F2 26 62 FC | 	wrlong	local01, objptr
21d74     04 E4 05 F1 | 	add	objptr, #4
21d78     FF FF FF FF 
21d7c     F2 FE 6B FC | 	wrlong	##-1, objptr
21d80     0C E4 05 F1 | 	add	objptr, #12
21d84     F2 00 68 FC | 	wrlong	#0, objptr
21d88     52 00 00 FF 
21d8c     10 E4 85 F1 | 	sub	objptr, ##42000
21d90                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
21d90                 | ' loadname="noname.bas"
21d90                 | ' do_insert=-1
21d90                 | ' inload=0
21d90                 | ' 
21d90                 | ' open "/sd/bas/autorun.bas" for input as #9
21d90     AD 01 00 FF 
21d94     A9 14 06 F6 | 	mov	arg02, ##@LR__5953
21d98     09 12 06 F6 | 	mov	arg01, #9
21d9c     00 16 06 F6 | 	mov	arg03, #0
21da0     34 3D B0 FD | 	call	#__system___basic_open_string
21da4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21da8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21dac     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
21db0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21db4     52 00 00 FF 
21db8     14 E4 05 F1 | 	add	objptr, ##42004
21dbc     F2 FA 61 FC | 	wrlong	result1, objptr
21dc0     52 00 00 FF 
21dc4     14 E4 85 F1 | 	sub	objptr, ##42004
21dc8                 | ' err=geterr()
21dc8                 | ' close #9
21dc8     09 12 06 F6 | 	mov	arg01, #9
21dcc     60 84 B0 FD | 	call	#__system__close
21dd0                 | ' if err=0 then line$="run autorun.bas" : interpret
21dd0     52 00 00 FF 
21dd4     14 E4 05 F1 | 	add	objptr, ##42004
21dd8     F2 26 0A FB | 	rdlong	local01, objptr wz
21ddc     52 00 00 FF 
21de0     14 E4 85 F1 | 	sub	objptr, ##42004
21de4     AD 01 00 AF 
21de8     BD 26 06 A6 |  if_e	mov	local01, ##@LR__5954
21dec     37 00 00 AF 
21df0     1C E4 05 A1 |  if_e	add	objptr, ##28188
21df4     F2 26 62 AC |  if_e	wrlong	local01, objptr
21df8     37 00 00 AF 
21dfc     1C E4 85 A1 |  if_e	sub	objptr, ##28188
21e00     44 F9 BD AD |  if_e	call	#_interpret
21e04                 | ' 
21e04                 | ' 
21e04                 | ' '-------------------------------------------------------------------------------------------------------- 
21e04                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
21e04                 | ' '--------------------------------------------------------------------------------------------------------
21e04                 | ' 
21e04                 | ' do
21e04                 | LR__2620
21e04     FC E9 BD FD | 	call	#_edit
21e08     FD 26 02 F6 | 	mov	local01, result1
21e0c     37 00 00 FF 
21e10     1C E4 05 F1 | 	add	objptr, ##28188
21e14     F2 26 62 FC | 	wrlong	local01, objptr
21e18     37 00 00 FF 
21e1c     1C E4 85 F1 | 	sub	objptr, ##28188
21e20     24 F9 BD FD | 	call	#_interpret
21e24     AD 01 00 FF 
21e28     CD 26 06 F6 | 	mov	local01, ##@LR__5955
21e2c     37 00 00 FF 
21e30     1C E4 05 F1 | 	add	objptr, ##28188
21e34     F2 26 62 FC | 	wrlong	local01, objptr
21e38     37 00 00 FF 
21e3c     1C E4 85 F1 | 	sub	objptr, ##28188
21e40     C0 FF 9F FD | 	jmp	#LR__2620
21e44     A7 F0 03 F6 | 	mov	ptra, fp
21e48     B2 00 A0 FD | 	call	#popregs_
21e4c                 | _program_ret
21e4c     2D 00 64 FD | 	ret
21e50                 | 
21e50                 | ' '' this is not a main program.
21e50                 | ' 
21e50                 | ' '****************************************************************************************************************
21e50                 | ' '                                                                                                             	*
21e50                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
21e50                 | ' '                                                                                                            	*
21e50                 | ' ' base - HDMI base pin												*
21e50                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
21e50                 | ' '														*
21e50                 | ' '														*
21e50                 | ' '****************************************************************************************************************
21e50                 | ' 
21e50                 | ' pub start(base,mb):result |i
21e50                 | _hg010b_spin2_start
21e50                 | ' 
21e50                 | ' '--------------------------- initialize pointers and variables
21e50                 | ' 
21e50                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
21e50     34 E4 05 F1 | 	add	objptr, #52
21e54     F2 FA 01 F6 | 	mov	result1, objptr
21e58     28 E4 85 F1 | 	sub	objptr, #40
21e5c     F2 FA 61 FC | 	wrlong	result1, objptr
21e60                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
21e60                 | ' hdmibase:=base							' HDMI base pin, 8*n
21e60     18 E4 05 F1 | 	add	objptr, #24
21e64     F2 12 62 FC | 	wrlong	arg01, objptr
21e68                 | ' mailbox_ptr:=mb		
21e68     04 E4 05 F1 | 	add	objptr, #4
21e6c     F2 14 62 FC | 	wrlong	arg02, objptr
21e70                 | ' mailbox0:=mb				' PSRAM mailbox pointer
21e70     C1 E5 05 F1 | 	add	objptr, #449
21e74     F2 14 62 FC | 	wrlong	arg02, objptr
21e78                 | ' sprite_ptr:=@spr1ptr
21e78     D8 E4 85 F1 | 	sub	objptr, #216
21e7c     F2 FA 01 F6 | 	mov	result1, objptr
21e80     E5 E4 85 F1 | 	sub	objptr, #229
21e84     F2 FA 61 FC | 	wrlong	result1, objptr
21e88                 | ' 
21e88                 | ' 		'
21e88                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
21e88     E5 E4 05 F1 | 	add	objptr, #229
21e8c     F2 FA 01 FB | 	rdlong	result1, objptr
21e90     D0 FA 05 F1 | 	add	result1, #208
21e94     FD 10 58 FC | 	wrword	#8, result1
21e98                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
21e98     F2 16 02 FB | 	rdlong	arg03, objptr
21e9c     D2 16 06 F1 | 	add	arg03, #210
21ea0     0B 21 58 FC | 	wrword	#16, arg03
21ea4                 | ' leading_spaces:=0				'
21ea4     A5 E5 05 F1 | 	add	objptr, #421
21ea8     F2 00 68 FC | 	wrlong	#0, objptr
21eac                 | ' 
21eac                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
21eac     99 E4 85 F1 | 	sub	objptr, #153
21eb0     00 00 A0 FF 
21eb4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
21eb8                 | ' emptydl[1]:=0
21eb8     04 E4 05 F1 | 	add	objptr, #4
21ebc     F2 00 68 FC | 	wrlong	#0, objptr
21ec0                 | ' 
21ec0                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
21ec0                 | ' 
21ec0                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
21ec0     28 E5 85 F1 | 	sub	objptr, #296
21ec4     F2 02 68 FC | 	wrlong	#1, objptr
21ec8                 | ' if s_debug<>0
21ec8                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
21ec8     20 00 80 FF 
21ecc     F2 00 68 FC | 	wrlong	##16384, objptr
21ed0     F9 E4 85 F1 | 	sub	objptr, #249
21ed4                 | ' setmode()							' set the mode, see below
21ed4     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
21ed8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
21ed8     49 E4 05 F1 | 	add	objptr, #73
21edc     F2 FA 01 F6 | 	mov	result1, objptr
21ee0     35 E4 85 F1 | 	sub	objptr, #53
21ee4     F2 FA 61 FC | 	wrlong	result1, objptr
21ee8                 | ' cursor_ptr:=@cursor_x						
21ee8     28 E4 05 F1 | 	add	objptr, #40
21eec     F2 16 02 F6 | 	mov	arg03, objptr
21ef0     2C E4 85 F1 | 	sub	objptr, #44
21ef4     F2 16 62 FC | 	wrlong	arg03, objptr
21ef8                 | ' fontnum:=0  							' start with a PC type font 
21ef8     55 E4 05 F1 | 	add	objptr, #85
21efc     F2 00 68 FC | 	wrlong	#0, objptr
21f00                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
21f00     1C E4 05 F1 | 	add	objptr, #28
21f04     F2 12 02 F6 | 	mov	arg01, objptr
21f08     81 E4 85 F1 | 	sub	objptr, #129
21f0c     10 00 00 FF 
21f10     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
21f14     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21f18     10 00 00 FF 
21f1c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
21f20     10 16 06 F6 | 	mov	arg03, #16
21f24     CC 2E B0 FD | 	call	#__system____builtin_memmove
21f28                 | ' leading_spaces:=0
21f28     01 00 00 FF 
21f2c     B6 E4 05 F1 | 	add	objptr, ##694
21f30     F2 00 68 FC | 	wrlong	#0, objptr
21f34     01 00 00 FF 
21f38     B6 E4 85 F1 | 	sub	objptr, ##694
21f3c                 | ' '---------------------------- initialize a cursor (MSDOS type)
21f3c                 | ' 
21f3c                 | ' initcursor(154)
21f3c     9A 12 06 F6 | 	mov	arg01, #154
21f40     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
21f44                 | ' 
21f44                 | ' '---------------------------- start the cog
21f44                 | ' 
21f44                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
21f44     10 00 00 FF 
21f48     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
21f4c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
21f50     10 00 00 FF 
21f54     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
21f58     14 E4 05 F1 | 	add	objptr, #20
21f5c     10 FA 05 F6 | 	mov	result1, #16
21f60     28 E4 61 FD | 	setq	objptr
21f64     0A FB F1 FC | 	coginit	result1, arg02 wc
21f68     01 FA 65 C6 |  if_b	neg	result1, #1
21f6c     1C E4 05 F1 | 	add	objptr, #28
21f70     F2 FA 61 FC | 	wrlong	result1, objptr
21f74     30 E4 85 F1 | 	sub	objptr, #48
21f78                 | ' waitms(40)							' wait for stabilize
21f78     28 12 06 F6 | 	mov	arg01, #40
21f7c     48 32 B0 FD | 	call	#__system___waitms
21f80                 | ' return cog							' return the driver's cog #
21f80     30 E4 05 F1 | 	add	objptr, #48
21f84     F2 FA 01 FB | 	rdlong	result1, objptr
21f88     30 E4 85 F1 | 	sub	objptr, #48
21f8c                 | _hg010b_spin2_start_ret
21f8c     2D 00 64 FD | 	ret
21f90                 | 
21f90                 | ' 
21f90                 | ' 
21f90                 | ' '**************************************************************************************************************** 
21f90                 | ' '                                                                                                             	*
21f90                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
21f90                 | ' '  Mode number - see start() above or bits below								*
21f90                 | ' '                                                                                                             	*
21f90                 | ' '****************************************************************************************************************
21f90                 | ' 
21f90                 | ' '---------------------------- initialize a cursor (MSDOS type)
21f90                 | ' pub initcursor(color) |i
21f90                 | _hg010b_spin2_initcursor
21f90     03 4A 05 F6 | 	mov	COUNT_, #3
21f94     A8 00 A0 FD | 	call	#pushregs_
21f98     09 27 02 F6 | 	mov	local01, arg01
21f9c                 | ' 
21f9c                 | ' cursor_x:=0							' place the cursor at 0:0
21f9c     3C E4 05 F1 | 	add	objptr, #60
21fa0     F2 00 58 FC | 	wrword	#0, objptr
21fa4                 | ' cursor_y:=0
21fa4     02 E4 05 F1 | 	add	objptr, #2
21fa8     F2 00 48 FC | 	wrbyte	#0, objptr
21fac                 | ' repeat i from 0 to 111
21fac     00 28 06 F6 | 	mov	local02, #0
21fb0     F8 E5 05 F1 | 	add	objptr, #504
21fb4     97 1A 48 FB | 	callpa	#(@LR__2632-@LR__2630)>>2,fcache_load_ptr_
21fb8                 | LR__2630
21fb8                 | '   cursor[i]:=0
21fb8     14 2B 02 F6 | 	mov	local03, local02
21fbc     F2 2A 02 F1 | 	add	local03, objptr
21fc0     15 01 48 FC | 	wrbyte	#0, local03
21fc4     01 28 06 F1 | 	add	local02, #1
21fc8     70 28 56 F2 | 	cmps	local02, #112 wc
21fcc     E8 FF 9F CD |  if_b	jmp	#LR__2630
21fd0                 | ' repeat i from 112 to 127
21fd0     70 28 06 F6 | 	mov	local02, #112
21fd4                 | LR__2631
21fd4                 | '   cursor[i]:=color  
21fd4     14 2B 02 F6 | 	mov	local03, local02
21fd8     F2 2A 02 F1 | 	add	local03, objptr
21fdc     15 27 42 FC | 	wrbyte	local01, local03
21fe0     01 28 06 F1 | 	add	local02, #1
21fe4     80 28 16 F2 | 	cmp	local02, #128 wc
21fe8     E8 FF 9F CD |  if_b	jmp	#LR__2631
21fec                 | LR__2632
21fec                 | ' 'repeat i from 0 to 127
21fec                 | ' '  if ((i/8)//2)
21fec                 | ' '    cursor[i]:=15
21fec                 | ' '  else
21fec                 | ' '    cursor[i]:=0
21fec                 | ' '  if i>=120    
21fec                 | ' '    cursor[i]:=40
21fec                 | ' setspriteptr(17,@cursor)
21fec     F2 14 02 F6 | 	mov	arg02, objptr
21ff0     01 00 00 FF 
21ff4     36 E4 85 F1 | 	sub	objptr, ##566
21ff8     11 12 06 F6 | 	mov	arg01, #17
21ffc     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
22000                 | ' setspritesize(17,8,16)
22000     11 12 06 F6 | 	mov	arg01, #17
22004     08 14 06 F6 | 	mov	arg02, #8
22008     10 16 06 F6 | 	mov	arg03, #16
2200c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
22010                 | ' setspritepos(17,0,0)
22010     11 12 06 F6 | 	mov	arg01, #17
22014     00 14 06 F6 | 	mov	arg02, #0
22018     00 16 06 F6 | 	mov	arg03, #0
2201c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
22020                 | ' cursorshape:=14
22020     0B 00 00 FF 
22024     C6 E4 05 F1 | 	add	objptr, ##5830
22028     F2 1C 68 FC | 	wrlong	#14, objptr
2202c                 | ' cursorcolor:=color
2202c     04 E4 85 F1 | 	sub	objptr, #4
22030     F2 26 62 FC | 	wrlong	local01, objptr
22034     0B 00 00 FF 
22038     C2 E4 85 F1 | 	sub	objptr, ##5826
2203c     A7 F0 03 F6 | 	mov	ptra, fp
22040     B2 00 A0 FD | 	call	#popregs_
22044                 | _hg010b_spin2_initcursor_ret
22044     2D 00 64 FD | 	ret
22048                 | 
22048                 | ' 
22048                 | ' pub setcursorshape(shape) | i
22048                 | _hg010b_spin2_setcursorshape
22048                 | ' 
22048                 | ' cursorshape:=shape
22048     0B 00 00 FF 
2204c     C6 E4 05 F1 | 	add	objptr, ##5830
22050     F2 12 62 FC | 	wrlong	arg01, objptr
22054                 | ' repeat i from 0 to (8*cursorshape)-1
22054     00 00 06 F6 | 	mov	_var01, #0
22058     09 03 02 F6 | 	mov	_var02, arg01
2205c     03 02 66 F0 | 	shl	_var02, #3
22060     01 02 86 F1 | 	sub	_var02, #1
22064     00 02 56 F2 | 	cmps	_var02, #0 wc
22068     01 04 86 F6 | 	negc	_var03, #1
2206c     02 07 02 F6 | 	mov	_var04, _var03
22070     02 03 02 F1 | 	add	_var02, _var03
22074     0A 00 00 FF 
22078     90 E4 85 F1 | 	sub	objptr, ##5264
2207c     97 0C 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
22080                 | LR__2640
22080                 | '   cursor[i]:=0
22080     00 05 02 F6 | 	mov	_var03, _var01
22084     F2 04 02 F1 | 	add	_var03, objptr
22088     02 01 48 FC | 	wrbyte	#0, _var03
2208c     03 01 02 F1 | 	add	_var01, _var04
22090     01 01 0A F2 | 	cmp	_var01, _var02 wz
22094     E8 FF 9F 5D |  if_ne	jmp	#LR__2640
22098                 | LR__2641
22098                 | ' repeat i from 8*cursorshape to 127
22098     0A 00 00 FF 
2209c     90 E4 05 F1 | 	add	objptr, ##5264
220a0     F2 06 02 FB | 	rdlong	_var04, objptr
220a4     03 01 02 F6 | 	mov	_var01, _var04
220a8     03 00 66 F0 | 	shl	_var01, #3
220ac     0B 00 00 FF 
220b0     C6 E4 85 F1 | 	sub	objptr, ##5830
220b4     03 06 66 F0 | 	shl	_var04, #3
220b8     80 06 56 F2 | 	cmps	_var04, #128 wc
220bc     01 04 A6 F6 | 	negnc	_var03, #1
220c0     7F 02 06 F6 | 	mov	_var02, #127
220c4     02 03 02 F1 | 	add	_var02, _var03
220c8     97 1A 48 FB | 	callpa	#(@LR__2643-@LR__2642)>>2,fcache_load_ptr_
220cc                 | LR__2642
220cc                 | '   cursor[i]:=cursorcolor
220cc     00 07 02 F6 | 	mov	_var04, _var01
220d0     01 00 00 FF 
220d4     36 E4 05 F1 | 	add	objptr, ##566
220d8     F2 06 02 F1 | 	add	_var04, objptr
220dc     0A 00 00 FF 
220e0     8C E4 05 F1 | 	add	objptr, ##5260
220e4     F2 12 02 FB | 	rdlong	arg01, objptr
220e8     0B 00 00 FF 
220ec     C2 E4 85 F1 | 	sub	objptr, ##5826
220f0     03 13 42 FC | 	wrbyte	arg01, _var04
220f4     02 01 02 F1 | 	add	_var01, _var03
220f8     01 01 0A F2 | 	cmp	_var01, _var02 wz
220fc     CC FF 9F 5D |  if_ne	jmp	#LR__2642
22100                 | LR__2643
22100                 | _hg010b_spin2_setcursorshape_ret
22100     2D 00 64 FD | 	ret
22104                 | 
22104                 | ' 
22104                 | ' pub setcursorcolor(color) | i
22104                 | _hg010b_spin2_setcursorcolor
22104                 | ' 
22104                 | ' cursorcolor:=color
22104     0B 00 00 FF 
22108     C2 E4 05 F1 | 	add	objptr, ##5826
2210c     F2 12 62 FC | 	wrlong	arg01, objptr
22110                 | ' repeat i from 0 to (8*cursorshape)-1
22110     00 12 06 F6 | 	mov	arg01, #0
22114     04 E4 05 F1 | 	add	objptr, #4
22118     F2 00 02 FB | 	rdlong	_var01, objptr
2211c     03 00 66 F0 | 	shl	_var01, #3
22120     01 00 86 F1 | 	sub	_var01, #1
22124     00 00 56 F2 | 	cmps	_var01, #0 wc
22128     01 02 86 F6 | 	negc	_var02, #1
2212c     01 05 02 F6 | 	mov	_var03, _var02
22130     01 01 02 F1 | 	add	_var01, _var02
22134     0A 00 00 FF 
22138     90 E4 85 F1 | 	sub	objptr, ##5264
2213c     97 0C 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
22140                 | LR__2650
22140                 | '   cursor[i]:=0
22140     09 03 02 F6 | 	mov	_var02, arg01
22144     F2 02 02 F1 | 	add	_var02, objptr
22148     01 01 48 FC | 	wrbyte	#0, _var02
2214c     02 13 02 F1 | 	add	arg01, _var03
22150     00 13 0A F2 | 	cmp	arg01, _var01 wz
22154     E8 FF 9F 5D |  if_ne	jmp	#LR__2650
22158                 | LR__2651
22158                 | ' repeat i from 8*cursorshape to 127
22158     0A 00 00 FF 
2215c     90 E4 05 F1 | 	add	objptr, ##5264
22160     F2 04 02 FB | 	rdlong	_var03, objptr
22164     02 13 02 F6 | 	mov	arg01, _var03
22168     03 12 66 F0 | 	shl	arg01, #3
2216c     0B 00 00 FF 
22170     C6 E4 85 F1 | 	sub	objptr, ##5830
22174     03 04 66 F0 | 	shl	_var03, #3
22178     80 04 56 F2 | 	cmps	_var03, #128 wc
2217c     01 02 A6 F6 | 	negnc	_var02, #1
22180     7F 00 06 F6 | 	mov	_var01, #127
22184     01 01 02 F1 | 	add	_var01, _var02
22188     97 1A 48 FB | 	callpa	#(@LR__2653-@LR__2652)>>2,fcache_load_ptr_
2218c                 | LR__2652
2218c                 | '   cursor[i]:=cursorcolor
2218c     09 05 02 F6 | 	mov	_var03, arg01
22190     01 00 00 FF 
22194     36 E4 05 F1 | 	add	objptr, ##566
22198     F2 04 02 F1 | 	add	_var03, objptr
2219c     0A 00 00 FF 
221a0     8C E4 05 F1 | 	add	objptr, ##5260
221a4     F2 06 02 FB | 	rdlong	_var04, objptr
221a8     0B 00 00 FF 
221ac     C2 E4 85 F1 | 	sub	objptr, ##5826
221b0     02 07 42 FC | 	wrbyte	_var04, _var03
221b4     01 13 02 F1 | 	add	arg01, _var02
221b8     00 13 0A F2 | 	cmp	arg01, _var01 wz
221bc     CC FF 9F 5D |  if_ne	jmp	#LR__2652
221c0                 | LR__2653
221c0                 | _hg010b_spin2_setcursorcolor_ret
221c0     2D 00 64 FD | 	ret
221c4                 | 
221c4                 | '   
221c4                 | '   
221c4                 | '   
221c4                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
221c4                 | _hg010b_spin2_setmode
221c4     02 4A 05 F6 | 	mov	COUNT_, #2
221c8     A8 00 A0 FD | 	call	#pushregs_
221cc                 | ' 
221cc                 | ' 
221cc                 | ' dl_ptr:=@emptydl[0]
221cc     01 00 00 FF 
221d0     1D E4 05 F1 | 	add	objptr, ##541
221d4     F2 1A 02 F6 | 	mov	arg05, objptr
221d8     FD E5 85 F1 | 	sub	objptr, #509
221dc     F2 1A 62 FC | 	wrlong	arg05, objptr
221e0                 | ' 
221e0                 | ' if cog>0 
221e0     10 E4 05 F1 | 	add	objptr, #16
221e4     F2 1A 02 FB | 	rdlong	arg05, objptr
221e8     30 E4 85 F1 | 	sub	objptr, #48
221ec     01 1A 56 F2 | 	cmps	arg05, #1 wc
221f0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
221f0     01 12 06 36 |  if_ae	mov	arg01, #1
221f4     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
221f8                 | ' xres:=1024
221f8     01 00 00 FF 
221fc     26 E4 05 F1 | 	add	objptr, ##550
22200     02 00 80 FF 
22204     F2 00 68 FC | 	wrlong	##1024, objptr
22208                 | ' yres:=600
22208     04 E4 05 F1 | 	add	objptr, #4
2220c     01 00 80 FF 
22210     F2 B0 68 FC | 	wrlong	##600, objptr
22214                 | ' ppl:=(timings[3])
22214     10 00 00 FF 
22218     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
2221c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22220     51 E5 85 F1 | 	sub	objptr, #337
22224     F2 1A 62 FC | 	wrlong	arg05, objptr
22228                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
22228     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
2222c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
22230     01 26 66 F0 | 	shl	local01, #1
22234     80 E4 85 F1 | 	sub	objptr, #128
22238     F2 26 62 FC | 	wrlong	local01, objptr
2223c                 | ' cpl1:=cpl '' todo remove
2223c     04 E4 05 F1 | 	add	objptr, #4
22240     F2 26 62 FC | 	wrlong	local01, objptr
22244                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
22244     02 00 00 FF 
22248     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
2224c     41 E4 85 F1 | 	sub	objptr, #65
22250     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22254                 | ' repeat i from 0 to 3
22254     00 28 06 F6 | 	mov	local02, #0
22258     02 00 00 FF 
2225c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
22260     08 E4 05 F1 | 	add	objptr, #8
22264     97 20 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
22268                 | LR__2660
22268                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
22268     14 27 02 F6 | 	mov	local01, local02
2226c     02 26 66 F0 | 	shl	local01, #2
22270     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
22274     F2 1A 02 FB | 	rdlong	arg05, objptr
22278     11 1A 66 F0 | 	shl	arg05, #17
2227c     13 27 02 FB | 	rdlong	local01, local01
22280     0D 27 02 F1 | 	add	local01, arg05
22284     80 40 38 FF 
22288     00 26 06 F1 | 	add	local01, ##1887502336
2228c     14 1B 02 F6 | 	mov	arg05, local02
22290     02 1A 66 F0 | 	shl	arg05, #2
22294     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
22298     0D 27 62 FC | 	wrlong	local01, arg05
2229c     01 28 06 F1 | 	add	local02, #1
222a0     04 28 56 F2 | 	cmps	local02, #4 wc
222a4     C0 FF 9F CD |  if_b	jmp	#LR__2660
222a8                 | LR__2661
222a8     24 E4 85 F1 | 	sub	objptr, #36
222ac                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
222ac     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
222b0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
222b4     14 26 66 FC | 	wrlong	local01, #20
222b8                 | ' hubset(timings[10])
222b8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
222bc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
222c0     10 00 00 FF 
222c4     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
222c8     00 12 62 FD | 	hubset	arg01
222cc                 | ' waitms(1)                                                   	' wait for stabilization
222cc     01 12 06 F6 | 	mov	arg01, #1
222d0     F4 2E B0 FD | 	call	#__system___waitms
222d4     10 00 00 FF 
222d8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
222dc     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
222e0     61 E4 05 F1 | 	add	objptr, #97
222e4     F2 28 62 FC | 	wrlong	local02, objptr
222e8     14 27 52 F6 | 	abs	local01, local02 wc
222ec     04 26 46 F0 | 	shr	local01, #4
222f0     13 27 82 F6 | 	negc	local01, local01
222f4     9C E4 05 F1 | 	add	objptr, #156
222f8     F2 26 62 FC | 	wrlong	local01, objptr
222fc     A4 E4 85 F1 | 	sub	objptr, #164
22300     F2 28 02 FB | 	rdlong	local02, objptr
22304     08 E4 05 F1 | 	add	objptr, #8
22308     F2 26 02 FB | 	rdlong	local01, objptr
2230c     13 29 02 FD | 	qmul	local02, local01
22310                 | ' lines:=timings[11]
22310                 | ' t_lines:=lines/16
22310                 | ' buflen:=cpl*lines						' framebuffer length in longs
22310     29 E4 85 F1 | 	sub	objptr, #41
22314     19 26 C6 F9 | 	decod	local01, #25
22318     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
2231c     18 28 62 FD | 	getqx	local02
22320     F2 28 62 FC | 	wrlong	local02, objptr
22324     38 E4 85 F1 | 	sub	objptr, #56
22328     02 28 66 F0 | 	shl	local02, #2
2232c     14 27 82 F1 | 	sub	local01, local02
22330     F2 26 62 FC | 	wrlong	local01, objptr
22334     FD E4 05 F1 | 	add	objptr, #253
22338     F2 28 02 FB | 	rdlong	local02, objptr
2233c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22340     0D 29 02 FD | 	qmul	local02, arg05
22344                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
22344                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
22344     F9 E4 85 F1 | 	sub	objptr, #249
22348                 | ' mode_ptr:=@timings						' set pointers to timings
22348     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
2234c                 | ' graphmode:=1024+512+192+48							' det global variable
2234c                 | ' makedl(graphmode)							' make a DL for the mode
2234c     03 00 00 FF 
22350     F0 12 06 F6 | 	mov	arg01, ##1776
22354     18 28 62 FD | 	getqx	local02
22358     14 27 82 F1 | 	sub	local01, local02
2235c     F2 26 62 FC | 	wrlong	local01, objptr
22360     14 E4 05 F1 | 	add	objptr, #20
22364     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
22368     79 E4 05 F1 | 	add	objptr, #121
2236c     03 00 80 FF 
22370     F2 E0 69 FC | 	wrlong	##1776, objptr
22374     91 E4 85 F1 | 	sub	objptr, #145
22378     10 00 00 FF 
2237c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
22380     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
22384                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
22384     F2 26 02 FB | 	rdlong	local01, objptr
22388     DD E4 05 F1 | 	add	objptr, #221
2238c     F2 26 62 FC | 	wrlong	local01, objptr
22390                 | ' s_font_ptr:=font_ptr
22390     D5 E4 85 F1 | 	sub	objptr, #213
22394     F2 26 02 FB | 	rdlong	local01, objptr
22398     D9 E4 05 F1 | 	add	objptr, #217
2239c     F2 26 62 FC | 	wrlong	local01, objptr
223a0                 | ' s_lines:=lines
223a0     80 E4 85 F1 | 	sub	objptr, #128
223a4     F2 26 02 FB | 	rdlong	local01, objptr
223a8     84 E4 05 F1 | 	add	objptr, #132
223ac     F2 26 62 FC | 	wrlong	local01, objptr
223b0                 | ' s_buflen:=buflen
223b0     AD E4 85 F1 | 	sub	objptr, #173
223b4     F2 26 02 FB | 	rdlong	local01, objptr
223b8     B5 E4 05 F1 | 	add	objptr, #181
223bc     F2 26 62 FC | 	wrlong	local01, objptr
223c0                 | ' s_cpl:=cpl
223c0     94 E4 85 F1 | 	sub	objptr, #148
223c4     F2 26 02 FB | 	rdlong	local01, objptr
223c8     90 E4 05 F1 | 	add	objptr, #144
223cc     F2 26 62 FC | 	wrlong	local01, objptr
223d0                 | ' s_cpl1:=cpl
223d0     90 E4 85 F1 | 	sub	objptr, #144
223d4     F2 26 02 FB | 	rdlong	local01, objptr
223d8     98 E4 05 F1 | 	add	objptr, #152
223dc     F2 26 62 FC | 	wrlong	local01, objptr
223e0                 | ' st_lines:=t_lines
223e0     0C E4 05 F1 | 	add	objptr, #12
223e4     F2 26 02 FB | 	rdlong	local01, objptr
223e8     04 E4 05 F1 | 	add	objptr, #4
223ec     F2 26 62 FC | 	wrlong	local01, objptr
223f0                 | ' ppl:=ppl/xzoom  
223f0     28 E4 85 F1 | 	sub	objptr, #40
223f4     F2 88 02 FB | 	rdlong	muldiva_, objptr
223f8     2C E4 05 F1 | 	add	objptr, #44
223fc     F2 8A 02 FB | 	rdlong	muldivb_, objptr
22400     05 E5 85 F1 | 	sub	objptr, #261
22404     BA 00 A0 FD | 	call	#divide_
22408     D9 E4 05 F1 | 	add	objptr, #217
2240c     F2 8A 62 FC | 	wrlong	muldivb_, objptr
22410                 | ' s_ppl:=ppl
22410     1C E4 05 F1 | 	add	objptr, #28
22414     F2 8A 62 FC | 	wrlong	muldivb_, objptr
22418     F5 E4 85 F1 | 	sub	objptr, #245
2241c                 | ' waitms(20)							' wait 
2241c     14 12 06 F6 | 	mov	arg01, #20
22420     A4 2D B0 FD | 	call	#__system___waitms
22424                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22424     04 E4 05 F1 | 	add	objptr, #4
22428     F2 12 02 FB | 	rdlong	arg01, objptr
2242c     04 E4 85 F1 | 	sub	objptr, #4
22430     F2 16 02 FB | 	rdlong	arg03, objptr
22434     09 17 82 F1 | 	sub	arg03, arg01
22438     20 14 06 F6 | 	mov	arg02, #32
2243c     00 18 06 F6 | 	mov	arg04, #0
22440     01 1A 06 F6 | 	mov	arg05, #1
22444     0B 00 00 FF 
22448     CC E4 05 F1 | 	add	objptr, ##5836
2244c     7C 1F B0 FD | 	call	#_psram_spin2_fill
22450     0B 00 00 FF 
22454     CC E4 85 F1 | 	sub	objptr, ##5836
22458     A7 F0 03 F6 | 	mov	ptra, fp
2245c     B2 00 A0 FD | 	call	#popregs_
22460                 | _hg010b_spin2_setmode_ret
22460     2D 00 64 FD | 	ret
22464                 | 
22464                 | ' 
22464                 | ' '****************************************************************************************************************
22464                 | ' '                                                                                                             	*
22464                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
22464                 | ' '                                                                                                             	*
22464                 | ' '****************************************************************************************************************
22464                 | ' 
22464                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
22464                 | _hg010b_spin2_makedl
22464                 | ' 
22464                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
22464                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
22464                 | ' repeat i from 0 to 11                                                           ' clear DL
22464     00 00 06 F6 | 	mov	_var01, #0
22468     ED E5 05 F1 | 	add	objptr, #493
2246c     97 0E 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
22470                 | LR__2670
22470                 | '   displaylist[i]:=0 
22470     00 03 02 F6 | 	mov	_var02, _var01
22474     02 02 66 F0 | 	shl	_var02, #2
22478     F2 02 02 F1 | 	add	_var02, objptr
2247c     01 01 68 FC | 	wrlong	#0, _var02
22480     01 00 06 F1 | 	add	_var01, #1
22484     0C 00 56 F2 | 	cmps	_var01, #12 wc
22488     E4 FF 9F CD |  if_b	jmp	#LR__2670
2248c                 | LR__2671
2248c                 | '                         ' 
2248c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
2248c     8C E5 85 F1 | 	sub	objptr, #396
22490     F2 02 02 FB | 	rdlong	_var02, objptr
22494     14 02 66 F0 | 	shl	_var02, #20
22498     01 02 06 F1 | 	add	_var02, #1
2249c     04 E4 85 F1 | 	sub	objptr, #4
224a0     F2 00 02 FB | 	rdlong	_var01, objptr
224a4     02 00 66 F0 | 	shl	_var01, #2
224a8     04 00 66 F0 | 	shl	_var01, #4
224ac     00 03 02 F1 | 	add	_var02, _var01
224b0     90 E5 05 F1 | 	add	objptr, #400
224b4     F2 02 62 FC | 	wrlong	_var02, objptr
224b8     ED E5 85 F1 | 	sub	objptr, #493
224bc                 | ' displaylist[1]:=buf_ptr<<4+%10  
224bc     F2 02 02 FB | 	rdlong	_var02, objptr
224c0     04 02 66 F0 | 	shl	_var02, #4
224c4     02 02 06 F1 | 	add	_var02, #2
224c8     F1 E5 05 F1 | 	add	objptr, #497
224cc     F2 02 62 FC | 	wrlong	_var02, objptr
224d0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
224d0     04 E4 85 F1 | 	sub	objptr, #4
224d4     F2 02 02 F6 | 	mov	_var02, objptr
224d8     CD E5 85 F1 | 	sub	objptr, #461
224dc     F2 02 62 FC | 	wrlong	_var02, objptr
224e0     20 E4 85 F1 | 	sub	objptr, #32
224e4                 | _hg010b_spin2_makedl_ret
224e4     2D 00 64 FD | 	ret
224e8                 | 
224e8                 | ' 
224e8                 | ' 
224e8                 | ' '****************************************************************************************************************
224e8                 | ' '                                                                        					*
224e8                 | ' '  Graphic primitives                                                    					*
224e8                 | ' '                                                                        					*
224e8                 | ' '****************************************************************************************************************
224e8                 | ' 
224e8                 | ' pub setspriteptr(num,ptr)
224e8                 | _hg010b_spin2_setspriteptr
224e8                 | ' long[@spr1ptr+12*num]:=ptr
224e8     11 E5 05 F1 | 	add	objptr, #273
224ec     F2 00 02 F6 | 	mov	_var01, objptr
224f0     09 03 02 F6 | 	mov	_var02, arg01
224f4     01 02 66 F0 | 	shl	_var02, #1
224f8     09 03 02 F1 | 	add	_var02, arg01
224fc     02 02 66 F0 | 	shl	_var02, #2
22500     01 01 02 F1 | 	add	_var01, _var02
22504     00 15 62 FC | 	wrlong	arg02, _var01
22508     11 E5 85 F1 | 	sub	objptr, #273
2250c                 | _hg010b_spin2_setspriteptr_ret
2250c     2D 00 64 FD | 	ret
22510                 | 
22510                 | ' 
22510                 | ' pub setspritepos(num,x,y)
22510                 | _hg010b_spin2_setspritepos
22510                 | ' if y>601
22510     01 00 00 FF 
22514     5A 16 56 F2 | 	cmps	arg03, ##602 wc
22518                 | '   y:=601
22518     01 00 00 3F 
2251c     59 16 06 36 |  if_ae	mov	arg03, ##601
22520                 | ' if x>1024
22520     02 00 00 FF 
22524     01 14 56 F2 | 	cmps	arg02, ##1025 wc
22528                 | '   x:=1024
22528     0A 14 C6 39 |  if_ae	decod	arg02, #10
2252c                 | ' word[@spr1ptr+12*num+4]:=x
2252c     11 E5 05 F1 | 	add	objptr, #273
22530     F2 00 02 F6 | 	mov	_var01, objptr
22534     09 03 02 F6 | 	mov	_var02, arg01
22538     01 02 66 F0 | 	shl	_var02, #1
2253c     09 03 02 F1 | 	add	_var02, arg01
22540     02 02 66 F0 | 	shl	_var02, #2
22544     01 01 02 F1 | 	add	_var01, _var02
22548     04 00 06 F1 | 	add	_var01, #4
2254c     00 15 52 FC | 	wrword	arg02, _var01
22550                 | ' word[@spr1ptr+12*num+6]:=y
22550     F2 00 02 F6 | 	mov	_var01, objptr
22554     09 03 02 F6 | 	mov	_var02, arg01
22558     01 02 66 F0 | 	shl	_var02, #1
2255c     09 03 02 F1 | 	add	_var02, arg01
22560     02 02 66 F0 | 	shl	_var02, #2
22564     01 01 02 F1 | 	add	_var01, _var02
22568     06 00 06 F1 | 	add	_var01, #6
2256c     00 17 52 FC | 	wrword	arg03, _var01
22570     11 E5 85 F1 | 	sub	objptr, #273
22574                 | _hg010b_spin2_setspritepos_ret
22574     2D 00 64 FD | 	ret
22578                 | 
22578                 | ' 
22578                 | ' pub setspritesize(num,w,h)
22578                 | _hg010b_spin2_setspritesize
22578                 | ' word[@spr1ptr+12*num+8]:=w
22578     11 E5 05 F1 | 	add	objptr, #273
2257c     F2 00 02 F6 | 	mov	_var01, objptr
22580     09 03 02 F6 | 	mov	_var02, arg01
22584     01 02 66 F0 | 	shl	_var02, #1
22588     09 03 02 F1 | 	add	_var02, arg01
2258c     02 02 66 F0 | 	shl	_var02, #2
22590     01 01 02 F1 | 	add	_var01, _var02
22594     08 00 06 F1 | 	add	_var01, #8
22598     00 15 52 FC | 	wrword	arg02, _var01
2259c                 | ' word[@spr1ptr+12*num+10]:=h
2259c     F2 00 02 F6 | 	mov	_var01, objptr
225a0     09 03 02 F6 | 	mov	_var02, arg01
225a4     01 02 66 F0 | 	shl	_var02, #1
225a8     09 03 02 F1 | 	add	_var02, arg01
225ac     02 02 66 F0 | 	shl	_var02, #2
225b0     01 01 02 F1 | 	add	_var01, _var02
225b4     0A 00 06 F1 | 	add	_var01, #10
225b8     00 17 52 FC | 	wrword	arg03, _var01
225bc     11 E5 85 F1 | 	sub	objptr, #273
225c0                 | _hg010b_spin2_setspritesize_ret
225c0     2D 00 64 FD | 	ret
225c4                 | 
225c4                 | ' 
225c4                 | ' 
225c4                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
225c4                 | ' 
225c4                 | ' 
225c4                 | ' pub putpixel(x,y,c)
225c4                 | _hg010b_spin2_putpixel
225c4     04 4A 05 F6 | 	mov	COUNT_, #4
225c8     A8 00 A0 FD | 	call	#pushregs_
225cc     09 27 02 F6 | 	mov	local01, arg01
225d0                 | ' 
225d0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
225d0     00 28 06 F6 | 	mov	local02, #0
225d4     00 26 56 F2 | 	cmps	local01, #0 wc
225d8     01 28 66 36 |  if_ae	neg	local02, #1
225dc     E9 E4 05 F1 | 	add	objptr, #233
225e0     F2 1A 02 FB | 	rdlong	arg05, objptr
225e4     02 1A 66 F0 | 	shl	arg05, #2
225e8     0D 27 52 F2 | 	cmps	local01, arg05 wc
225ec     15 2B A2 F1 | 	subx	local03, local03
225f0     15 29 02 F5 | 	and	local02, local03
225f4     00 2A 06 F6 | 	mov	local03, #0
225f8     00 14 56 F2 | 	cmps	arg02, #0 wc
225fc     01 2A 66 36 |  if_ae	neg	local03, #1
22600     15 29 02 F5 | 	and	local02, local03
22604     04 E4 85 F1 | 	sub	objptr, #4
22608     F2 2A 02 FB | 	rdlong	local03, objptr
2260c     E5 E4 85 F1 | 	sub	objptr, #229
22610     15 15 52 F2 | 	cmps	arg02, local03 wc
22614     16 2D A2 F1 | 	subx	local04, local04
22618     16 29 CA F7 | 	test	local02, local04 wz
2261c     48 00 90 AD |  if_e	jmp	#LR__2680
22620     DD E4 05 F1 | 	add	objptr, #221
22624     F2 12 02 FB | 	rdlong	arg01, objptr
22628     14 E4 05 F1 | 	add	objptr, #20
2262c     F2 2C 02 FB | 	rdlong	local04, objptr
22630     02 2C 66 F0 | 	shl	local04, #2
22634     0A 2D 02 FD | 	qmul	local04, arg02
22638                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22638     0B 15 02 F6 | 	mov	arg02, arg03
2263c     01 16 06 F6 | 	mov	arg03, #1
22640     00 18 06 F6 | 	mov	arg04, #0
22644     01 1A 06 F6 | 	mov	arg05, #1
22648     0A 00 00 FF 
2264c     DB E5 05 F1 | 	add	objptr, ##5595
22650     18 2C 62 FD | 	getqx	local04
22654     13 2D 02 F1 | 	add	local04, local01
22658     16 13 02 F1 | 	add	arg01, local04
2265c     6C 1D B0 FD | 	call	#_psram_spin2_fill
22660     0B 00 00 FF 
22664     CC E4 85 F1 | 	sub	objptr, ##5836
22668                 | LR__2680
22668     A7 F0 03 F6 | 	mov	ptra, fp
2266c     B2 00 A0 FD | 	call	#popregs_
22670                 | _hg010b_spin2_putpixel_ret
22670     2D 00 64 FD | 	ret
22674                 | 
22674                 | ' 
22674                 | ' pub putpixel2(x,y,c)
22674                 | _hg010b_spin2_putpixel2
22674     02 4A 05 F6 | 	mov	COUNT_, #2
22678     A8 00 A0 FD | 	call	#pushregs_
2267c     DD E4 05 F1 | 	add	objptr, #221
22680     F2 26 02 FB | 	rdlong	local01, objptr
22684     14 E4 05 F1 | 	add	objptr, #20
22688     F2 1A 02 FB | 	rdlong	arg05, objptr
2268c     02 1A 66 F0 | 	shl	arg05, #2
22690     0A 1B 02 FD | 	qmul	arg05, arg02
22694                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
22694     0B 15 02 F6 | 	mov	arg02, arg03
22698     01 16 06 F6 | 	mov	arg03, #1
2269c     00 18 06 F6 | 	mov	arg04, #0
226a0     01 1A 06 F6 | 	mov	arg05, #1
226a4     0A 00 00 FF 
226a8     DB E5 05 F1 | 	add	objptr, ##5595
226ac     18 28 62 FD | 	getqx	local02
226b0     09 29 02 F1 | 	add	local02, arg01
226b4     14 27 02 F1 | 	add	local01, local02
226b8     13 13 02 F6 | 	mov	arg01, local01
226bc     0C 1D B0 FD | 	call	#_psram_spin2_fill
226c0     0B 00 00 FF 
226c4     CC E4 85 F1 | 	sub	objptr, ##5836
226c8     A7 F0 03 F6 | 	mov	ptra, fp
226cc     B2 00 A0 FD | 	call	#popregs_
226d0                 | _hg010b_spin2_putpixel2_ret
226d0     2D 00 64 FD | 	ret
226d4                 | 
226d4                 | ' 
226d4                 | ' pub getpixel2(x,y): c 
226d4                 | _hg010b_spin2_getpixel2
226d4     02 4A 05 F6 | 	mov	COUNT_, #2
226d8     A8 00 A0 FD | 	call	#pushregs_
226dc     0C F0 07 F1 | 	add	ptra, #12
226e0     04 4E 05 F1 | 	add	fp, #4
226e4     A7 12 62 FC | 	wrlong	arg01, fp
226e8     04 4E 05 F1 | 	add	fp, #4
226ec     A7 14 62 FC | 	wrlong	arg02, fp
226f0     08 4E 85 F1 | 	sub	fp, #8
226f4     A7 00 68 FC | 	wrlong	#0, fp
226f8     A7 12 02 F6 | 	mov	arg01, fp
226fc     DD E4 05 F1 | 	add	objptr, #221
22700     F2 14 02 FB | 	rdlong	arg02, objptr
22704     14 E4 05 F1 | 	add	objptr, #20
22708     F2 16 02 FB | 	rdlong	arg03, objptr
2270c     02 16 66 F0 | 	shl	arg03, #2
22710     08 4E 05 F1 | 	add	fp, #8
22714     A7 FA 01 FB | 	rdlong	result1, fp
22718     FD 16 02 FD | 	qmul	arg03, result1
2271c                 | ' 
2271c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
2271c     04 4E 85 F1 | 	sub	fp, #4
22720     A7 26 02 FB | 	rdlong	local01, fp
22724     04 4E 85 F1 | 	sub	fp, #4
22728     01 16 06 F6 | 	mov	arg03, #1
2272c     0A 00 00 FF 
22730     DB E5 05 F1 | 	add	objptr, ##5595
22734     18 28 62 FD | 	getqx	local02
22738     13 29 02 F1 | 	add	local02, local01
2273c     14 15 02 F1 | 	add	arg02, local02
22740     50 1B B0 FD | 	call	#_psram_spin2_read1
22744     0B 00 00 FF 
22748     CC E4 85 F1 | 	sub	objptr, ##5836
2274c                 | ' return c
2274c     A7 FA 01 FB | 	rdlong	result1, fp
22750     A7 F0 03 F6 | 	mov	ptra, fp
22754     B2 00 A0 FD | 	call	#popregs_
22758                 | _hg010b_spin2_getpixel2_ret
22758     2D 00 64 FD | 	ret
2275c                 | 
2275c                 | '   
2275c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
2275c                 | ' 
2275c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
2275c                 | _hg010b_spin2_fastline
2275c     02 4A 05 F6 | 	mov	COUNT_, #2
22760     A8 00 A0 FD | 	call	#pushregs_
22764     09 27 02 F6 | 	mov	local01, arg01
22768     0A 29 02 F6 | 	mov	local02, arg02
2276c                 | ' 
2276c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
2276c     00 16 56 F2 | 	cmps	arg03, #0 wc
22770     F4 00 90 CD |  if_b	jmp	#LR__2690
22774     01 00 00 FF 
22778     2A E4 05 F1 | 	add	objptr, ##554
2277c     F2 1A 02 FB | 	rdlong	arg05, objptr
22780     01 00 00 FF 
22784     2A E4 85 F1 | 	sub	objptr, ##554
22788     0D 17 52 F2 | 	cmps	arg03, arg05 wc
2278c     D8 00 90 3D |  if_ae	jmp	#LR__2690
22790     00 26 56 F2 | 	cmps	local01, #0 wc
22794     00 28 56 C2 |  if_b	cmps	local02, #0 wc
22798     CC 00 90 CD |  if_b	jmp	#LR__2690
2279c     01 00 00 FF 
227a0     26 E4 05 F1 | 	add	objptr, ##550
227a4     F2 1A 02 FB | 	rdlong	arg05, objptr
227a8     01 00 00 FF 
227ac     26 E4 85 F1 | 	sub	objptr, ##550
227b0     0D 27 5A F2 | 	cmps	local01, arg05 wcz
227b4     01 00 00 1F 
227b8     26 E4 05 11 |  if_a	add	objptr, ##550
227bc     F2 12 02 1B |  if_a	rdlong	arg01, objptr
227c0     01 00 00 1F 
227c4     26 E4 85 11 |  if_a	sub	objptr, ##550
227c8     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
227cc                 | '   return
227cc     98 00 90 1D |  if_a	jmp	#LR__2690
227d0     14 27 5A F2 | 	cmps	local01, local02 wcz
227d4     13 1B 02 16 |  if_a	mov	arg05, local01
227d8     14 27 02 16 |  if_a	mov	local01, local02
227dc     0D 29 02 16 |  if_a	mov	local02, arg05
227e0     00 26 56 F2 | 	cmps	local01, #0 wc
227e4     00 26 06 C6 |  if_b	mov	local01, #0
227e8     01 00 00 FF 
227ec     26 E4 05 F1 | 	add	objptr, ##550
227f0     F2 1A 02 FB | 	rdlong	arg05, objptr
227f4     01 00 00 FF 
227f8     26 E4 85 F1 | 	sub	objptr, ##550
227fc     0D 29 52 F2 | 	cmps	local02, arg05 wc
22800     01 00 00 3F 
22804     26 E4 05 31 |  if_ae	add	objptr, ##550
22808     F2 28 02 3B |  if_ae	rdlong	local02, objptr
2280c     01 00 00 3F 
22810     26 E4 85 31 |  if_ae	sub	objptr, ##550
22814     DD E4 05 F1 | 	add	objptr, #221
22818     F2 12 02 FB | 	rdlong	arg01, objptr
2281c     14 E4 05 F1 | 	add	objptr, #20
22820     F2 1A 02 FB | 	rdlong	arg05, objptr
22824     02 1A 66 F0 | 	shl	arg05, #2
22828     0B 1B 02 FD | 	qmul	arg05, arg03
2282c                 | ' if x1>x2
2282c                 | '   x1,x2:=x2,x1
2282c                 | ' if x1<0 
2282c                 | '   x1:=0
2282c                 | ' if x2>=xres
2282c                 | '   x2:=xres-1  
2282c     01 28 86 31 |  if_ae	sub	local02, #1
22830                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
22830     01 16 06 F6 | 	mov	arg03, #1
22834     14 17 02 F1 | 	add	arg03, local02
22838     13 17 82 F1 | 	sub	arg03, local01
2283c     0C 15 02 F6 | 	mov	arg02, arg04
22840     00 18 06 F6 | 	mov	arg04, #0
22844     01 1A 06 F6 | 	mov	arg05, #1
22848     0A 00 00 FF 
2284c     DB E5 05 F1 | 	add	objptr, ##5595
22850     18 28 62 FD | 	getqx	local02
22854     13 29 02 F1 | 	add	local02, local01
22858     14 13 02 F1 | 	add	arg01, local02
2285c     6C 1B B0 FD | 	call	#_psram_spin2_fill
22860     0B 00 00 FF 
22864     CC E4 85 F1 | 	sub	objptr, ##5836
22868                 | LR__2690
22868     A7 F0 03 F6 | 	mov	ptra, fp
2286c     B2 00 A0 FD | 	call	#popregs_
22870                 | _hg010b_spin2_fastline_ret
22870     2D 00 64 FD | 	ret
22874                 | 
22874                 | ' 
22874                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
22874                 | _hg010b_spin2_draw
22874     0E 4A 05 F6 | 	mov	COUNT_, #14
22878     A8 00 A0 FD | 	call	#pushregs_
2287c     09 27 02 F6 | 	mov	local01, arg01
22880     0A 29 02 F6 | 	mov	local02, arg02
22884     0B 2B 02 F6 | 	mov	local03, arg03
22888     0C 2D 02 F6 | 	mov	local04, arg04
2288c     0D 2F 02 F6 | 	mov	local05, arg05
22890                 | ' 
22890                 | ' if (y1==y2)
22890     16 29 0A F2 | 	cmp	local02, local04 wz
22894     18 00 90 5D |  if_ne	jmp	#LR__2700
22898                 | '   fastline(x1,x2,y1,c)
22898     13 13 02 F6 | 	mov	arg01, local01
2289c     15 15 02 F6 | 	mov	arg02, local03
228a0     14 17 02 F6 | 	mov	arg03, local02
228a4     17 19 02 F6 | 	mov	arg04, local05
228a8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
228ac     F8 00 90 FD | 	jmp	#LR__2706
228b0                 | LR__2700
228b0                 | ' else  
228b0                 | '   x:=x1
228b0     13 31 02 F6 | 	mov	local06, local01
228b4                 | '   y:=y1
228b4     14 33 02 F6 | 	mov	local07, local02
228b8                 | ' 
228b8                 | '   if (x1<x2) 
228b8     15 27 52 F2 | 	cmps	local01, local03 wc
228bc                 | '     xi:=1
228bc     01 34 06 C6 |  if_b	mov	local08, #1
228c0                 | '     dx:=x2-x1
228c0     15 37 02 C6 |  if_b	mov	local09, local03
228c4     13 37 82 C1 |  if_b	sub	local09, local01
228c8                 | '   else
228c8                 | '     xi:=-1
228c8     01 34 66 36 |  if_ae	neg	local08, #1
228cc                 | '     dx:=x1-x2
228cc     15 27 82 31 |  if_ae	sub	local01, local03
228d0     13 37 02 36 |  if_ae	mov	local09, local01
228d4                 | '   
228d4                 | '   if (y1<y2) 
228d4     16 29 52 F2 | 	cmps	local02, local04 wc
228d8                 | '     yi:=1
228d8     01 38 06 C6 |  if_b	mov	local10, #1
228dc                 | '     dy:=y2-y1
228dc     16 3B 02 C6 |  if_b	mov	local11, local04
228e0     14 3B 82 C1 |  if_b	sub	local11, local02
228e4                 | '   else
228e4                 | '     yi:=-1
228e4     01 38 66 36 |  if_ae	neg	local10, #1
228e8                 | '     dy:=y1-y2
228e8     16 29 82 31 |  if_ae	sub	local02, local04
228ec     14 3B 02 36 |  if_ae	mov	local11, local02
228f0                 | ' 
228f0                 | '   putpixel(x,y,c)
228f0     17 17 02 F6 | 	mov	arg03, local05
228f4     18 13 02 F6 | 	mov	arg01, local06
228f8     19 15 02 F6 | 	mov	arg02, local07
228fc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
22900                 | ' 
22900                 | '   if (dx>dy)
22900     1D 37 5A F2 | 	cmps	local09, local11 wcz
22904     50 00 90 ED |  if_be	jmp	#LR__2702
22908                 | '     ai:=(dy-dx)*2
22908     1D 3D 02 F6 | 	mov	local12, local11
2290c     1B 3D 82 F1 | 	sub	local12, local09
22910     01 3C 66 F0 | 	shl	local12, #1
22914                 | '     bi:=dy*2
22914     01 3A 66 F0 | 	shl	local11, #1
22918     1D 3F 02 F6 | 	mov	local13, local11
2291c                 | '     d:= bi-dx
2291c     1F 41 02 F6 | 	mov	local14, local13
22920     1B 41 82 F1 | 	sub	local14, local09
22924                 | '     repeat while (x<>x2) 
22924                 | LR__2701
22924     15 31 0A F2 | 	cmp	local06, local03 wz
22928     7C 00 90 AD |  if_e	jmp	#LR__2705
2292c                 | '       if (d>=0) 
2292c     00 40 56 F2 | 	cmps	local14, #0 wc
22930                 | '         x+=xi
22930     1A 31 02 31 |  if_ae	add	local06, local08
22934                 | '         y+=yi
22934     1C 33 02 31 |  if_ae	add	local07, local10
22938                 | '         d+=ai
22938     1E 41 02 31 |  if_ae	add	local14, local12
2293c                 | '       else
2293c                 | '         d+=bi
2293c     1F 41 02 C1 |  if_b	add	local14, local13
22940                 | '         x+=xi
22940     1A 31 02 C1 |  if_b	add	local06, local08
22944                 | '       putpixel(x,y,c)
22944     18 13 02 F6 | 	mov	arg01, local06
22948     19 15 02 F6 | 	mov	arg02, local07
2294c     17 17 02 F6 | 	mov	arg03, local05
22950     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
22954     CC FF 9F FD | 	jmp	#LR__2701
22958                 | LR__2702
22958                 | '   else
22958                 | '     ai:=(dx-dy)*2
22958     1B 3D 02 F6 | 	mov	local12, local09
2295c     1D 3D 82 F1 | 	sub	local12, local11
22960     01 3C 66 F0 | 	shl	local12, #1
22964                 | '     bi:=dx*2
22964     01 36 66 F0 | 	shl	local09, #1
22968     1B 3F 02 F6 | 	mov	local13, local09
2296c                 | '     d:=bi-dy
2296c     1F 41 02 F6 | 	mov	local14, local13
22970     1D 41 82 F1 | 	sub	local14, local11
22974                 | '     repeat while (y<>y2)
22974                 | LR__2703
22974     16 33 0A F2 | 	cmp	local07, local04 wz
22978     2C 00 90 AD |  if_e	jmp	#LR__2704
2297c                 | '       if (d>=0)
2297c     00 40 56 F2 | 	cmps	local14, #0 wc
22980                 | '         x+=xi
22980     1A 31 02 31 |  if_ae	add	local06, local08
22984                 | '         y+=yi
22984     1C 33 02 31 |  if_ae	add	local07, local10
22988                 | '         d+=ai
22988     1E 41 02 31 |  if_ae	add	local14, local12
2298c                 | '       else
2298c                 | '         d+=bi
2298c     1F 41 02 C1 |  if_b	add	local14, local13
22990                 | '         y+=yi
22990     1C 33 02 C1 |  if_b	add	local07, local10
22994                 | '       putpixel(x, y,c)
22994     18 13 02 F6 | 	mov	arg01, local06
22998     19 15 02 F6 | 	mov	arg02, local07
2299c     17 17 02 F6 | 	mov	arg03, local05
229a0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
229a4     CC FF 9F FD | 	jmp	#LR__2703
229a8                 | LR__2704
229a8                 | LR__2705
229a8                 | LR__2706
229a8     A7 F0 03 F6 | 	mov	ptra, fp
229ac     B2 00 A0 FD | 	call	#popregs_
229b0                 | _hg010b_spin2_draw_ret
229b0     2D 00 64 FD | 	ret
229b4                 | 
229b4                 | '  
229b4                 | ' pub fillpush(val) 
229b4                 | _hg010b_spin2_fillpush
229b4                 | ' fillstack[fillptr]:=val
229b4     0B 00 00 FF 
229b8     BA E4 05 F1 | 	add	objptr, ##5818
229bc     F2 00 02 FB | 	rdlong	_var01, objptr
229c0     02 00 66 F0 | 	shl	_var01, #2
229c4     0A 00 00 FF 
229c8     00 E4 85 F1 | 	sub	objptr, ##5120
229cc     F2 00 02 F1 | 	add	_var01, objptr
229d0     00 13 62 FC | 	wrlong	arg01, _var01
229d4                 | ' fillptr+=1   
229d4     0A 00 00 FF 
229d8     00 E4 05 F1 | 	add	objptr, ##5120
229dc     F2 00 02 FB | 	rdlong	_var01, objptr
229e0     01 00 06 F1 | 	add	_var01, #1
229e4     F2 00 62 FC | 	wrlong	_var01, objptr
229e8     0B 00 00 FF 
229ec     BA E4 85 F1 | 	sub	objptr, ##5818
229f0                 | _hg010b_spin2_fillpush_ret
229f0     2D 00 64 FD | 	ret
229f4                 | 
229f4                 | ' 
229f4                 | '     
229f4                 | ' pub fillpop() : val
229f4                 | _hg010b_spin2_fillpop
229f4                 | ' 
229f4                 | ' fillptr-=1
229f4     0B 00 00 FF 
229f8     BA E4 05 F1 | 	add	objptr, ##5818
229fc     F2 FA 01 FB | 	rdlong	result1, objptr
22a00     01 FA 85 F1 | 	sub	result1, #1
22a04     F2 FA 61 FC | 	wrlong	result1, objptr
22a08                 | ' if fillptr<0
22a08     0B 00 00 FF 
22a0c     BA E4 85 F1 | 	sub	objptr, ##5818
22a10     00 FA 55 F2 | 	cmps	result1, #0 wc
22a14                 | '   fillptr:=0
22a14     0B 00 00 CF 
22a18     BA E4 05 C1 |  if_b	add	objptr, ##5818
22a1c     F2 00 68 CC |  if_b	wrlong	#0, objptr
22a20     0B 00 00 CF 
22a24     BA E4 85 C1 |  if_b	sub	objptr, ##5818
22a28                 | '   val:=-12345
22a28     E7 FF 7F CF 
22a2c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
22a30     28 00 90 CD |  if_b	jmp	#LR__2710
22a34                 | ' else 
22a34                 | '   val:=fillstack[fillptr]
22a34     0B 00 00 FF 
22a38     BA E4 05 F1 | 	add	objptr, ##5818
22a3c     F2 00 02 FB | 	rdlong	_var01, objptr
22a40     02 00 66 F0 | 	shl	_var01, #2
22a44     0A 00 00 FF 
22a48     00 E4 85 F1 | 	sub	objptr, ##5120
22a4c     F2 00 02 F1 | 	add	_var01, objptr
22a50     00 01 02 FB | 	rdlong	_var01, _var01
22a54     01 00 00 FF 
22a58     BA E4 85 F1 | 	sub	objptr, ##698
22a5c                 | LR__2710
22a5c                 | ' return val
22a5c     00 FB 01 F6 | 	mov	result1, _var01
22a60                 | _hg010b_spin2_fillpop_ret
22a60     2D 00 64 FD | 	ret
22a64                 | 
22a64                 | ' 
22a64                 | '       
22a64                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
22a64                 | _hg010b_spin2_fill
22a64     0B 4A 05 F6 | 	mov	COUNT_, #11
22a68     A8 00 A0 FD | 	call	#pushregs_
22a6c                 | ' 
22a6c                 | ' newcolor:=newcolor & 255
22a6c     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
22a70                 | ' oldcolor:=oldcolor & 255
22a70     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
22a74                 | ' 
22a74                 | ' if (oldcolor == newcolor) 
22a74     13 29 0A F2 | 	cmp	local02, local01 wz
22a78                 | '   return
22a78     70 02 90 AD |  if_e	jmp	#LR__2729
22a7c                 | ' 
22a7c                 | ' fillptr:=0
22a7c     0B 00 00 FF 
22a80     BA E4 05 F1 | 	add	objptr, ##5818
22a84     F2 00 68 FC | 	wrlong	#0, objptr
22a88                 | ' fillmax:=0
22a88     04 E4 05 F1 | 	add	objptr, #4
22a8c     F2 00 68 FC | 	wrlong	#0, objptr
22a90     0B 00 00 FF 
22a94     BE E4 85 F1 | 	sub	objptr, ##5822
22a98                 | ' fillpush(x)
22a98     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
22a9c                 | ' fillpush(y)
22a9c     0A 13 02 F6 | 	mov	arg01, arg02
22aa0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
22aa4                 | ' y:=fillpop()
22aa4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
22aa8     FD 2A 02 F6 | 	mov	local03, result1
22aac                 | ' x:=fillpop()
22aac     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
22ab0     FD 2C 02 F6 | 	mov	local04, result1
22ab4                 | ' 'pinhigh(38)
22ab4                 | ' repeat while (x>-1)       
22ab4                 | LR__2720
22ab4     00 2C 56 F2 | 	cmps	local04, #0 wc
22ab8     30 02 90 CD |  if_b	jmp	#LR__2728
22abc                 | '  ' pintoggle(39)
22abc                 | '   x1 := x
22abc     16 2F 02 F6 | 	mov	local05, local04
22ac0                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
22ac0                 | LR__2721
22ac0     00 30 06 F6 | 	mov	local06, #0
22ac4     00 32 06 F6 | 	mov	local07, #0
22ac8     00 2E 56 F2 | 	cmps	local05, #0 wc
22acc     01 32 66 36 |  if_ae	neg	local07, #1
22ad0     00 32 0E F2 | 	cmp	local07, #0 wz
22ad4     00 30 26 56 |  if_ne	not	local06, #0
22ad8     00 34 06 F6 | 	mov	local08, #0
22adc     00 36 06 F6 | 	mov	local09, #0
22ae0     15 15 02 F6 | 	mov	arg02, local03
22ae4     17 13 02 F6 | 	mov	arg01, local05
22ae8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22aec     14 FB 09 F2 | 	cmp	result1, local02 wz
22af0     00 36 26 A6 |  if_e	not	local09, #0
22af4     00 36 0E F2 | 	cmp	local09, #0 wz
22af8     00 34 26 56 |  if_ne	not	local08, #0
22afc     1A 31 CA F7 | 	test	local06, local08 wz
22b00                 | '     x1--
22b00     01 2E 86 51 |  if_ne	sub	local05, #1
22b04     B8 FF 9F 5D |  if_ne	jmp	#LR__2721
22b08                 | '   x1++
22b08     01 2E 06 F1 | 	add	local05, #1
22b0c                 | '   spanabove := 0
22b0c     00 38 06 F6 | 	mov	local10, #0
22b10                 | '   spanbelow := 0
22b10     00 3A 06 F6 | 	mov	local11, #0
22b14                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
22b14                 | LR__2722
22b14     00 30 06 F6 | 	mov	local06, #0
22b18     02 00 00 FF 
22b1c     00 2E 56 F2 | 	cmps	local05, ##1024 wc
22b20     00 30 26 C6 |  if_b	not	local06, #0
22b24     00 34 06 F6 | 	mov	local08, #0
22b28     00 36 06 F6 | 	mov	local09, #0
22b2c     15 15 02 F6 | 	mov	arg02, local03
22b30     17 13 02 F6 | 	mov	arg01, local05
22b34     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
22b38     14 FB 09 F2 | 	cmp	result1, local02 wz
22b3c     00 36 26 A6 |  if_e	not	local09, #0
22b40     00 36 0E F2 | 	cmp	local09, #0 wz
22b44     00 34 26 56 |  if_ne	not	local08, #0
22b48     1A 31 CA F7 | 	test	local06, local08 wz
22b4c     88 01 90 AD |  if_e	jmp	#LR__2727
22b50                 | '     putpixel2 (x1,y, newcolor & 255)
22b50     13 17 E2 F8 | 	getbyte	arg03, local01, #0
22b54     17 13 02 F6 | 	mov	arg01, local05
22b58     15 15 02 F6 | 	mov	arg02, local03
22b5c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
22b60                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
22b60     00 30 06 F6 | 	mov	local06, #0
22b64     00 32 06 F6 | 	mov	local07, #0
22b68     00 38 0E F2 | 	cmp	local10, #0 wz
22b6c     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
22b70     01 32 66 26 |  if_nc_and_z	neg	local07, #1
22b74     00 32 0E F2 | 	cmp	local07, #0 wz
22b78     00 30 26 56 |  if_ne	not	local06, #0
22b7c     00 34 06 F6 | 	mov	local08, #0
22b80     00 36 06 F6 | 	mov	local09, #0
22b84     15 15 02 F6 | 	mov	arg02, local03
22b88     01 14 86 F1 | 	sub	arg02, #1
22b8c     17 13 02 F6 | 	mov	arg01, local05
22b90     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
22b94     14 FB 09 F2 | 	cmp	result1, local02 wz
22b98     00 36 26 A6 |  if_e	not	local09, #0
22b9c     00 36 0E F2 | 	cmp	local09, #0 wz
22ba0     00 34 26 56 |  if_ne	not	local08, #0
22ba4     1A 31 CA F7 | 	test	local06, local08 wz
22ba8     1C 00 90 AD |  if_e	jmp	#LR__2723
22bac                 | '       fillpush(x1)
22bac     17 13 02 F6 | 	mov	arg01, local05
22bb0     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
22bb4                 | '       fillpush(y-1)
22bb4     15 13 02 F6 | 	mov	arg01, local03
22bb8     01 12 86 F1 | 	sub	arg01, #1
22bbc     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
22bc0                 | '       spanabove := 1 
22bc0     01 38 06 F6 | 	mov	local10, #1
22bc4     4C 00 90 FD | 	jmp	#LR__2724
22bc8                 | LR__2723
22bc8                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
22bc8     00 30 06 F6 | 	mov	local06, #0
22bcc     00 32 06 F6 | 	mov	local07, #0
22bd0     00 38 0E F2 | 	cmp	local10, #0 wz
22bd4     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
22bd8     01 32 66 16 |  if_a	neg	local07, #1
22bdc     00 32 0E F2 | 	cmp	local07, #0 wz
22be0     00 30 26 56 |  if_ne	not	local06, #0
22be4     00 34 06 F6 | 	mov	local08, #0
22be8     00 36 06 F6 | 	mov	local09, #0
22bec     15 15 02 F6 | 	mov	arg02, local03
22bf0     01 14 86 F1 | 	sub	arg02, #1
22bf4     17 13 02 F6 | 	mov	arg01, local05
22bf8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22bfc     14 FB 09 F2 | 	cmp	result1, local02 wz
22c00     00 36 26 56 |  if_ne	not	local09, #0
22c04     00 36 0E F2 | 	cmp	local09, #0 wz
22c08     00 34 26 56 |  if_ne	not	local08, #0
22c0c     1A 31 CA F7 | 	test	local06, local08 wz
22c10                 | '       spanabove := 0 
22c10     00 38 06 56 |  if_ne	mov	local10, #0
22c14                 | LR__2724
22c14                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
22c14     00 30 06 F6 | 	mov	local06, #0
22c18     00 32 06 F6 | 	mov	local07, #0
22c1c     00 3A 0E F2 | 	cmp	local11, #0 wz
22c20     01 00 00 AF 
22c24     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
22c28     01 32 66 86 |  if_c_and_z	neg	local07, #1
22c2c     00 32 0E F2 | 	cmp	local07, #0 wz
22c30     00 30 26 56 |  if_ne	not	local06, #0
22c34     00 34 06 F6 | 	mov	local08, #0
22c38     00 36 06 F6 | 	mov	local09, #0
22c3c     15 15 02 F6 | 	mov	arg02, local03
22c40     01 14 06 F1 | 	add	arg02, #1
22c44     17 13 02 F6 | 	mov	arg01, local05
22c48     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
22c4c     14 FB 09 F2 | 	cmp	result1, local02 wz
22c50     00 36 26 A6 |  if_e	not	local09, #0
22c54     00 36 0E F2 | 	cmp	local09, #0 wz
22c58     00 34 26 56 |  if_ne	not	local08, #0
22c5c     1A 31 CA F7 | 	test	local06, local08 wz
22c60     1C 00 90 AD |  if_e	jmp	#LR__2725
22c64                 | '       fillpush(x1)
22c64     17 13 02 F6 | 	mov	arg01, local05
22c68     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
22c6c                 | '       fillpush(y + 1)
22c6c     15 13 02 F6 | 	mov	arg01, local03
22c70     01 12 06 F1 | 	add	arg01, #1
22c74     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
22c78                 | '       spanBelow := 1
22c78     01 3A 06 F6 | 	mov	local11, #1
22c7c     50 00 90 FD | 	jmp	#LR__2726
22c80                 | LR__2725
22c80                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
22c80     00 30 06 F6 | 	mov	local06, #0
22c84     00 32 06 F6 | 	mov	local07, #0
22c88     00 3A 0E F2 | 	cmp	local11, #0 wz
22c8c     01 00 00 5F 
22c90     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
22c94     01 32 66 46 |  if_c_and_nz	neg	local07, #1
22c98     00 32 0E F2 | 	cmp	local07, #0 wz
22c9c     00 30 26 56 |  if_ne	not	local06, #0
22ca0     00 34 06 F6 | 	mov	local08, #0
22ca4     00 36 06 F6 | 	mov	local09, #0
22ca8     15 15 02 F6 | 	mov	arg02, local03
22cac     01 14 06 F1 | 	add	arg02, #1
22cb0     17 13 02 F6 | 	mov	arg01, local05
22cb4     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
22cb8     14 FB 09 F2 | 	cmp	result1, local02 wz
22cbc     00 36 26 56 |  if_ne	not	local09, #0
22cc0     00 36 0E F2 | 	cmp	local09, #0 wz
22cc4     00 34 26 56 |  if_ne	not	local08, #0
22cc8     1A 31 CA F7 | 	test	local06, local08 wz
22ccc                 | '       spanbelow := 0
22ccc     00 3A 06 56 |  if_ne	mov	local11, #0
22cd0                 | LR__2726
22cd0                 | '     x1++
22cd0     01 2E 06 F1 | 	add	local05, #1
22cd4     3C FE 9F FD | 	jmp	#LR__2722
22cd8                 | LR__2727
22cd8                 | '   y:=fillpop()
22cd8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
22cdc     FD 2A 02 F6 | 	mov	local03, result1
22ce0                 | '   x:=fillpop()
22ce0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
22ce4     FD 2C 02 F6 | 	mov	local04, result1
22ce8     C8 FD 9F FD | 	jmp	#LR__2720
22cec                 | LR__2728
22cec                 | LR__2729
22cec     A7 F0 03 F6 | 	mov	ptra, fp
22cf0     B2 00 A0 FD | 	call	#popregs_
22cf4                 | _hg010b_spin2_fill_ret
22cf4     2D 00 64 FD | 	ret
22cf8                 | 
22cf8                 | ' 'pinlow(38)    
22cf8                 | ' 
22cf8                 | ' '-- A filled circle -----------------------------------------------------
22cf8                 | ' 
22cf8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
22cf8                 | _hg010b_spin2_fcircle
22cf8     08 4A 05 F6 | 	mov	COUNT_, #8
22cfc     A8 00 A0 FD | 	call	#pushregs_
22d00     0B 27 02 F6 | 	mov	local01, arg03
22d04     FF FF 7F FF 
22d08     FE 27 06 FD | 	qmul	local01, ##-2
22d0c     09 29 02 F6 | 	mov	local02, arg01
22d10     0A 2B 02 F6 | 	mov	local03, arg02
22d14     0C 2D 02 F6 | 	mov	local04, arg04
22d18                 | ' 
22d18                 | ' d:=5-4*r
22d18     13 19 02 F6 | 	mov	arg04, local01
22d1c     02 18 66 F0 | 	shl	arg04, #2
22d20     05 2E 06 F6 | 	mov	local05, #5
22d24     0C 2F 82 F1 | 	sub	local05, arg04
22d28                 | ' x:=0
22d28     00 30 06 F6 | 	mov	local06, #0
22d2c                 | ' y:=r
22d2c                 | ' da:=(-2*r+5)*4
22d2c                 | ' db:=3*4
22d2c     0C 32 06 F6 | 	mov	local07, #12
22d30                 | ' repeat while (x<=y) 
22d30     18 34 62 FD | 	getqx	local08
22d34     05 34 06 F1 | 	add	local08, #5
22d38     02 34 66 F0 | 	shl	local08, #2
22d3c                 | LR__2730
22d3c     13 31 5A F2 | 	cmps	local06, local01 wcz
22d40     B4 00 90 1D |  if_a	jmp	#LR__2732
22d44                 | '   fastline(x0-x,x0+x,y0-y,c)
22d44     14 13 02 F6 | 	mov	arg01, local02
22d48     18 13 82 F1 | 	sub	arg01, local06
22d4c     14 15 02 F6 | 	mov	arg02, local02
22d50     18 15 02 F1 | 	add	arg02, local06
22d54     15 17 02 F6 | 	mov	arg03, local03
22d58     13 17 82 F1 | 	sub	arg03, local01
22d5c     16 19 02 F6 | 	mov	arg04, local04
22d60     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22d64                 | '   fastline(x0-x,x0+x,y0+y,c)
22d64     14 13 02 F6 | 	mov	arg01, local02
22d68     18 13 82 F1 | 	sub	arg01, local06
22d6c     14 15 02 F6 | 	mov	arg02, local02
22d70     18 15 02 F1 | 	add	arg02, local06
22d74     15 17 02 F6 | 	mov	arg03, local03
22d78     13 17 02 F1 | 	add	arg03, local01
22d7c     16 19 02 F6 | 	mov	arg04, local04
22d80     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22d84                 | '   fastline(x0-y,x0+y,y0-x,c)
22d84     14 13 02 F6 | 	mov	arg01, local02
22d88     13 13 82 F1 | 	sub	arg01, local01
22d8c     14 15 02 F6 | 	mov	arg02, local02
22d90     13 15 02 F1 | 	add	arg02, local01
22d94     15 17 02 F6 | 	mov	arg03, local03
22d98     18 17 82 F1 | 	sub	arg03, local06
22d9c     16 19 02 F6 | 	mov	arg04, local04
22da0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
22da4                 | '   fastline(x0-y,x0+y,y0+x,c)
22da4     14 13 02 F6 | 	mov	arg01, local02
22da8     13 13 82 F1 | 	sub	arg01, local01
22dac     14 15 02 F6 | 	mov	arg02, local02
22db0     13 15 02 F1 | 	add	arg02, local01
22db4     15 17 02 F6 | 	mov	arg03, local03
22db8     18 17 02 F1 | 	add	arg03, local06
22dbc     16 19 02 F6 | 	mov	arg04, local04
22dc0     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
22dc4                 | '   if d>0 
22dc4     01 2E 56 F2 | 	cmps	local05, #1 wc
22dc8     18 00 90 CD |  if_b	jmp	#LR__2731
22dcc                 | '     d+=da
22dcc     1A 2F 02 F1 | 	add	local05, local08
22dd0                 | '     y-=1
22dd0     01 26 86 F1 | 	sub	local01, #1
22dd4                 | '     x+=1
22dd4     01 30 06 F1 | 	add	local06, #1
22dd8                 | '     da+=4*4
22dd8     10 34 06 F1 | 	add	local08, #16
22ddc                 | '     db+=2*4
22ddc     08 32 06 F1 | 	add	local07, #8
22de0     58 FF 9F FD | 	jmp	#LR__2730
22de4                 | LR__2731
22de4                 | '   else
22de4                 | '     d+=db
22de4     19 2F 02 F1 | 	add	local05, local07
22de8                 | '     x+=1
22de8     01 30 06 F1 | 	add	local06, #1
22dec                 | '     da+=2*4
22dec     08 34 06 F1 | 	add	local08, #8
22df0                 | '     db+=2*4
22df0     08 32 06 F1 | 	add	local07, #8
22df4     44 FF 9F FD | 	jmp	#LR__2730
22df8                 | LR__2732
22df8     A7 F0 03 F6 | 	mov	ptra, fp
22dfc     B2 00 A0 FD | 	call	#popregs_
22e00                 | _hg010b_spin2_fcircle_ret
22e00     2D 00 64 FD | 	ret
22e04                 | 
22e04                 | '  
22e04                 | ' '-- A circle ------------------------------------------------------------ 
22e04                 | '  
22e04                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
22e04                 | _hg010b_spin2_circle
22e04     08 4A 05 F6 | 	mov	COUNT_, #8
22e08     A8 00 A0 FD | 	call	#pushregs_
22e0c     0B 27 02 F6 | 	mov	local01, arg03
22e10     FF FF 7F FF 
22e14     FE 27 06 FD | 	qmul	local01, ##-2
22e18     09 29 02 F6 | 	mov	local02, arg01
22e1c     0A 2B 02 F6 | 	mov	local03, arg02
22e20     0C 2D 02 F6 | 	mov	local04, arg04
22e24                 | ' 
22e24                 | '  
22e24                 | ' d:=5-4*r
22e24     13 19 02 F6 | 	mov	arg04, local01
22e28     02 18 66 F0 | 	shl	arg04, #2
22e2c     05 2E 06 F6 | 	mov	local05, #5
22e30     0C 2F 82 F1 | 	sub	local05, arg04
22e34                 | ' x:=0
22e34     00 30 06 F6 | 	mov	local06, #0
22e38                 | ' y:=r
22e38                 | ' da:=(-2*r+5)*4
22e38                 | ' db:=3*4
22e38     0C 32 06 F6 | 	mov	local07, #12
22e3c                 | ' repeat while (x<=y) 
22e3c     18 34 62 FD | 	getqx	local08
22e40     05 34 06 F1 | 	add	local08, #5
22e44     02 34 66 F0 | 	shl	local08, #2
22e48                 | LR__2740
22e48     13 31 5A F2 | 	cmps	local06, local01 wcz
22e4c     F4 00 90 1D |  if_a	jmp	#LR__2742
22e50                 | '   putpixel(x0-x,y0-y,c)
22e50     14 13 02 F6 | 	mov	arg01, local02
22e54     18 13 82 F1 | 	sub	arg01, local06
22e58     15 15 02 F6 | 	mov	arg02, local03
22e5c     13 15 82 F1 | 	sub	arg02, local01
22e60     16 17 02 F6 | 	mov	arg03, local04
22e64     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e68                 | '   putpixel(x0-x,y0+y,c)
22e68     14 13 02 F6 | 	mov	arg01, local02
22e6c     18 13 82 F1 | 	sub	arg01, local06
22e70     15 15 02 F6 | 	mov	arg02, local03
22e74     13 15 02 F1 | 	add	arg02, local01
22e78     16 17 02 F6 | 	mov	arg03, local04
22e7c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e80                 | '   putpixel(x0+x,y0-y,c)
22e80     14 13 02 F6 | 	mov	arg01, local02
22e84     18 13 02 F1 | 	add	arg01, local06
22e88     15 15 02 F6 | 	mov	arg02, local03
22e8c     13 15 82 F1 | 	sub	arg02, local01
22e90     16 17 02 F6 | 	mov	arg03, local04
22e94     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
22e98                 | '   putpixel(x0+x,y0+y,c)
22e98     14 13 02 F6 | 	mov	arg01, local02
22e9c     18 13 02 F1 | 	add	arg01, local06
22ea0     15 15 02 F6 | 	mov	arg02, local03
22ea4     13 15 02 F1 | 	add	arg02, local01
22ea8     16 17 02 F6 | 	mov	arg03, local04
22eac     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
22eb0                 | '   putpixel(x0-y,y0-x,c)
22eb0     14 13 02 F6 | 	mov	arg01, local02
22eb4     13 13 82 F1 | 	sub	arg01, local01
22eb8     15 15 02 F6 | 	mov	arg02, local03
22ebc     18 15 82 F1 | 	sub	arg02, local06
22ec0     16 17 02 F6 | 	mov	arg03, local04
22ec4     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22ec8                 | '   putpixel(x0-y,y0+x,c)
22ec8     14 13 02 F6 | 	mov	arg01, local02
22ecc     13 13 82 F1 | 	sub	arg01, local01
22ed0     15 15 02 F6 | 	mov	arg02, local03
22ed4     18 15 02 F1 | 	add	arg02, local06
22ed8     16 17 02 F6 | 	mov	arg03, local04
22edc     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22ee0                 | '   putpixel(x0+y,y0-x,c)
22ee0     14 13 02 F6 | 	mov	arg01, local02
22ee4     13 13 02 F1 | 	add	arg01, local01
22ee8     15 15 02 F6 | 	mov	arg02, local03
22eec     18 15 82 F1 | 	sub	arg02, local06
22ef0     16 17 02 F6 | 	mov	arg03, local04
22ef4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
22ef8                 | '   putpixel(x0+y,y0+x,c)
22ef8     14 13 02 F6 | 	mov	arg01, local02
22efc     13 13 02 F1 | 	add	arg01, local01
22f00     15 15 02 F6 | 	mov	arg02, local03
22f04     18 15 02 F1 | 	add	arg02, local06
22f08     16 17 02 F6 | 	mov	arg03, local04
22f0c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
22f10                 | '   if d>0 
22f10     01 2E 56 F2 | 	cmps	local05, #1 wc
22f14     18 00 90 CD |  if_b	jmp	#LR__2741
22f18                 | '     d+=da
22f18     1A 2F 02 F1 | 	add	local05, local08
22f1c                 | '     y-=1
22f1c     01 26 86 F1 | 	sub	local01, #1
22f20                 | '     x+=1
22f20     01 30 06 F1 | 	add	local06, #1
22f24                 | '     da+=4*4
22f24     10 34 06 F1 | 	add	local08, #16
22f28                 | '     db+=2*4
22f28     08 32 06 F1 | 	add	local07, #8
22f2c     18 FF 9F FD | 	jmp	#LR__2740
22f30                 | LR__2741
22f30                 | '   else
22f30                 | '     d+=db
22f30     19 2F 02 F1 | 	add	local05, local07
22f34                 | '     x+=1
22f34     01 30 06 F1 | 	add	local06, #1
22f38                 | '     da+=2*4
22f38     08 34 06 F1 | 	add	local08, #8
22f3c                 | '     db+=2*4
22f3c     08 32 06 F1 | 	add	local07, #8
22f40     04 FF 9F FD | 	jmp	#LR__2740
22f44                 | LR__2742
22f44     A7 F0 03 F6 | 	mov	ptra, fp
22f48     B2 00 A0 FD | 	call	#popregs_
22f4c                 | _hg010b_spin2_circle_ret
22f4c     2D 00 64 FD | 	ret
22f50                 | 
22f50                 | '     
22f50                 | ' '-- A frame (an empty rectangle) ---------------------------------------
22f50                 | ' 
22f50                 | ' pub frame(x1,y1,x2,y2,c)
22f50                 | _hg010b_spin2_frame
22f50     05 4A 05 F6 | 	mov	COUNT_, #5
22f54     A8 00 A0 FD | 	call	#pushregs_
22f58     09 27 02 F6 | 	mov	local01, arg01
22f5c     0A 29 02 F6 | 	mov	local02, arg02
22f60     0B 2B 02 F6 | 	mov	local03, arg03
22f64     0C 2D 02 F6 | 	mov	local04, arg04
22f68     0D 2F 02 F6 | 	mov	local05, arg05
22f6c                 | ' 
22f6c                 | ' fastline(x1,x2,y1,c)
22f6c     13 13 02 F6 | 	mov	arg01, local01
22f70     15 15 02 F6 | 	mov	arg02, local03
22f74     14 17 02 F6 | 	mov	arg03, local02
22f78     17 19 02 F6 | 	mov	arg04, local05
22f7c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
22f80                 | ' fastline(x1,x2,y2,c)
22f80     13 13 02 F6 | 	mov	arg01, local01
22f84     15 15 02 F6 | 	mov	arg02, local03
22f88     16 17 02 F6 | 	mov	arg03, local04
22f8c     17 19 02 F6 | 	mov	arg04, local05
22f90     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
22f94                 | ' line(x1,y1,x1,y2,c)
22f94     13 13 02 F6 | 	mov	arg01, local01
22f98     14 15 02 F6 | 	mov	arg02, local02
22f9c     13 17 02 F6 | 	mov	arg03, local01
22fa0     16 19 02 F6 | 	mov	arg04, local04
22fa4     17 1B 02 F6 | 	mov	arg05, local05
22fa8                 | ' draw(x1,y1,x2,y2,c)
22fa8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
22fac                 | ' line(x2,y1,x2,y2,c)
22fac     15 13 02 F6 | 	mov	arg01, local03
22fb0     14 15 02 F6 | 	mov	arg02, local02
22fb4     15 17 02 F6 | 	mov	arg03, local03
22fb8     16 19 02 F6 | 	mov	arg04, local04
22fbc     17 1B 02 F6 | 	mov	arg05, local05
22fc0                 | ' draw(x1,y1,x2,y2,c)
22fc0     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22fc4     A7 F0 03 F6 | 	mov	ptra, fp
22fc8     B2 00 A0 FD | 	call	#popregs_
22fcc                 | _hg010b_spin2_frame_ret
22fcc     2D 00 64 FD | 	ret
22fd0                 | 
22fd0                 | ' 
22fd0                 | ' '-- A box (a filled rectangle) ----------------------------------------
22fd0                 | ' 
22fd0                 | ' pub box(x1,y1,x2,y2,c) |yy
22fd0                 | _hg010b_spin2_box
22fd0     06 4A 05 F6 | 	mov	COUNT_, #6
22fd4     A8 00 A0 FD | 	call	#pushregs_
22fd8     09 27 02 F6 | 	mov	local01, arg01
22fdc     0A 29 02 F6 | 	mov	local02, arg02
22fe0     0B 2B 02 F6 | 	mov	local03, arg03
22fe4     0C 2D 02 F6 | 	mov	local04, arg04
22fe8     0D 2F 02 F6 | 	mov	local05, arg05
22fec                 | ' 
22fec                 | ' repeat yy from y1 to y2
22fec     14 2D 52 F2 | 	cmps	local04, local02 wc
22ff0     01 30 86 F6 | 	negc	local06, #1
22ff4     18 2D 02 F1 | 	add	local04, local06
22ff8                 | LR__2750
22ff8                 | '   fastline(x1,x2,yy,c)
22ff8     13 13 02 F6 | 	mov	arg01, local01
22ffc     15 15 02 F6 | 	mov	arg02, local03
23000     17 19 02 F6 | 	mov	arg04, local05
23004     14 17 02 F6 | 	mov	arg03, local02
23008     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
2300c     18 29 02 F1 | 	add	local02, local06
23010     16 29 0A F2 | 	cmp	local02, local04 wz
23014     E0 FF 9F 5D |  if_ne	jmp	#LR__2750
23018     A7 F0 03 F6 | 	mov	ptra, fp
2301c     B2 00 A0 FD | 	call	#popregs_
23020                 | _hg010b_spin2_box_ret
23020     2D 00 64 FD | 	ret
23024                 | 
23024                 | '       
23024                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
23024                 | _hg010b_spin2_putcharxycgf
23024                 | ' 
23024                 | '  
23024                 | ' repeat yy from 0 to 15
23024     00 00 06 F6 | 	mov	_var01, #0
23028     97 8C 48 FB | 	callpa	#(@LR__2762-@LR__2760)>>2,fcache_load_ptr_
2302c                 | LR__2760
2302c                 | ' 
2302c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
2302c     95 E4 05 F1 | 	add	objptr, #149
23030     F2 02 02 FB | 	rdlong	_var02, objptr
23034     0A 02 66 F0 | 	shl	_var02, #10
23038     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
2303c     01 05 02 F1 | 	add	_var03, _var02
23040     0B 03 02 F6 | 	mov	_var02, arg03
23044     04 02 66 F0 | 	shl	_var02, #4
23048     01 05 02 F1 | 	add	_var03, _var02
2304c     00 05 02 F1 | 	add	_var03, _var01
23050     02 05 C2 FA | 	rdbyte	_var03, _var03
23054                 | '   asm
23054     00 04 0E F4 | 	testb	_var03, #0 wz
23058     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
2305c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
23060     01 04 0E F4 | 	testb	_var03, #1 wz
23064     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
23068     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
2306c     02 04 0E F4 | 	testb	_var03, #2 wz
23070     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
23074     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
23078     03 04 0E F4 | 	testb	_var03, #3 wz
2307c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
23080     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
23084     04 04 0E F4 | 	testb	_var03, #4 wz
23088     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
2308c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
23090     05 04 0E F4 | 	testb	_var03, #5 wz
23094     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
23098     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
2309c     06 04 0E F4 | 	testb	_var03, #6 wz
230a0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
230a4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
230a8     07 04 0E F4 | 	testb	_var03, #7 wz
230ac     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
230b0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
230b4                 | '   
230b4                 | '   ccc[0]:=c1
230b4     99 E5 05 F1 | 	add	objptr, #409
230b8     F2 06 62 FC | 	wrlong	_var04, objptr
230bc                 | '   ccc[1]:=c2 
230bc     04 E4 05 F1 | 	add	objptr, #4
230c0     F2 08 62 FC | 	wrlong	_var05, objptr
230c4                 | '   long[mailbox0][2]:=8
230c4     49 E4 85 F1 | 	sub	objptr, #73
230c8     F2 04 02 FB | 	rdlong	_var03, objptr
230cc     08 04 06 F1 | 	add	_var03, #8
230d0     02 11 68 FC | 	wrlong	#8, _var03
230d4                 | '   long[mailbox0][1]:=@ccc
230d4     45 E4 05 F1 | 	add	objptr, #69
230d8     F2 04 02 F6 | 	mov	_var03, objptr
230dc     45 E4 85 F1 | 	sub	objptr, #69
230e0     F2 02 02 FB | 	rdlong	_var02, objptr
230e4     04 02 06 F1 | 	add	_var02, #4
230e8     01 05 62 FC | 	wrlong	_var03, _var02
230ec                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
230ec     0C E5 85 F1 | 	sub	objptr, #268
230f0     F2 04 02 FB | 	rdlong	_var03, objptr
230f4     0A 03 02 F6 | 	mov	_var02, arg02
230f8     00 03 02 F1 | 	add	_var02, _var01
230fc     0A 02 66 F0 | 	shl	_var02, #10
23100     09 0B 02 F6 | 	mov	_var06, arg01
23104     02 0A 66 F0 | 	shl	_var06, #2
23108     05 03 02 F1 | 	add	_var02, _var06
2310c     01 05 02 F1 | 	add	_var03, _var02
23110     00 00 78 FF 
23114     00 04 06 F1 | 	add	_var03, ##-268435456
23118     0C E5 05 F1 | 	add	objptr, #268
2311c     F2 0A 02 FB | 	rdlong	_var06, objptr
23120     05 05 62 FC | 	wrlong	_var03, _var06
23124                 | '   repeat
23124                 | LR__2761
23124     F2 04 02 FB | 	rdlong	_var03, objptr
23128     02 03 02 FB | 	rdlong	_var02, _var03
2312c     00 02 56 F2 | 	cmps	_var02, #0 wc
23130     F0 FF 9F CD |  if_b	jmp	#LR__2761
23134     E9 E5 85 F1 | 	sub	objptr, #489
23138     01 00 06 F1 | 	add	_var01, #1
2313c     10 00 56 F2 | 	cmps	_var01, #16 wc
23140     E8 FE 9F CD |  if_b	jmp	#LR__2760
23144                 | LR__2762
23144                 | _hg010b_spin2_putcharxycgf_ret
23144     2D 00 64 FD | 	ret
23148                 | 
23148                 | ' 
23148                 | ' 
23148                 | ' '**********************************************************************r***
23148                 | ' '                                                                        *
23148                 | ' ' Font related functions                                                 *
23148                 | ' '                                                                        *
23148                 | ' '*************************************************************************
23148                 | ' 
23148                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
23148                 | ' 
23148                 | ' pub setfontfamily(afontnum)
23148                 | _hg010b_spin2_setfontfamily
23148                 | ' 
23148                 | ' font_family:=afontnum
23148     95 E4 05 F1 | 	add	objptr, #149
2314c     F2 12 62 FC | 	wrlong	arg01, objptr
23150     95 E4 85 F1 | 	sub	objptr, #149
23154                 | ' 'if afontnum==8
23154                 | ' '  font_ptr:=@amiga_font
23154                 | ' 
23154                 | ' if afontnum==4
23154     04 12 0E F2 | 	cmp	arg01, #4 wz
23158                 | '   font_ptr:=@st_font
23158     08 00 00 AF 
2315c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
23160     08 E4 05 A1 |  if_e	add	objptr, #8
23164     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23168     08 E4 85 A1 |  if_e	sub	objptr, #8
2316c     08 00 00 AF 
23170     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
23174                 | ' if afontnum==0
23174     00 12 0E F2 | 	cmp	arg01, #0 wz
23178                 | '   font_ptr:=@vga_font
23178     08 E4 05 A1 |  if_e	add	objptr, #8
2317c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
23180     08 E4 85 A1 |  if_e	sub	objptr, #8
23184                 | _hg010b_spin2_setfontfamily_ret
23184     2D 00 64 FD | 	ret
23188                 | 
23188                 | ' 
23188                 | ' '*************************************************************************
23188                 | ' '                                                                        *
23188                 | ' '  Cursor functions                                                      *
23188                 | ' '                                                                        *
23188                 | ' '*************************************************************************
23188                 | ' 
23188                 | ' 
23188                 | ' pub setcursorpos(x,y)
23188                 | _hg010b_spin2_setcursorpos
23188                 | ' 
23188                 | ' ''---------- Set the (x,y) position of cursor
23188                 | ' 
23188                 | ' cursor_x:=x
23188     3C E4 05 F1 | 	add	objptr, #60
2318c     F2 12 52 FC | 	wrword	arg01, objptr
23190                 | ' cursor_y:=y
23190     02 E4 05 F1 | 	add	objptr, #2
23194     F2 14 42 FC | 	wrbyte	arg02, objptr
23198                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23198     02 E4 85 F1 | 	sub	objptr, #2
2319c     F2 14 E2 FA | 	rdword	arg02, objptr
231a0     02 14 66 F0 | 	shl	arg02, #2
231a4     02 E4 05 F1 | 	add	objptr, #2
231a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
231ac     3E E4 85 F1 | 	sub	objptr, #62
231b0     04 16 66 F0 | 	shl	arg03, #4
231b4     04 16 06 F1 | 	add	arg03, #4
231b8     11 12 06 F6 | 	mov	arg01, #17
231bc     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
231c0                 | _hg010b_spin2_setcursorpos_ret
231c0     2D 00 64 FD | 	ret
231c4                 | 
231c4                 | ' 
231c4                 | ' pub setcursorx(x)
231c4                 | _hg010b_spin2_setcursorx
231c4                 | ' cursor_x:=x
231c4     3C E4 05 F1 | 	add	objptr, #60
231c8     F2 12 52 FC | 	wrword	arg01, objptr
231cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
231cc     F2 14 E2 FA | 	rdword	arg02, objptr
231d0     02 14 66 F0 | 	shl	arg02, #2
231d4     02 E4 05 F1 | 	add	objptr, #2
231d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
231dc     3E E4 85 F1 | 	sub	objptr, #62
231e0     04 16 66 F0 | 	shl	arg03, #4
231e4     04 16 06 F1 | 	add	arg03, #4
231e8     11 12 06 F6 | 	mov	arg01, #17
231ec     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
231f0                 | _hg010b_spin2_setcursorx_ret
231f0     2D 00 64 FD | 	ret
231f4                 | 
231f4                 | ' 
231f4                 | ' pub setcursory(y) 
231f4                 | _hg010b_spin2_setcursory
231f4                 | ' cursor_y:=y
231f4     3E E4 05 F1 | 	add	objptr, #62
231f8     F2 12 42 FC | 	wrbyte	arg01, objptr
231fc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
231fc     02 E4 85 F1 | 	sub	objptr, #2
23200     F2 14 E2 FA | 	rdword	arg02, objptr
23204     02 14 66 F0 | 	shl	arg02, #2
23208     02 E4 05 F1 | 	add	objptr, #2
2320c     F2 16 C2 FA | 	rdbyte	arg03, objptr
23210     3E E4 85 F1 | 	sub	objptr, #62
23214     04 16 66 F0 | 	shl	arg03, #4
23218     04 16 06 F1 | 	add	arg03, #4
2321c     11 12 06 F6 | 	mov	arg01, #17
23220     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
23224                 | _hg010b_spin2_setcursory_ret
23224     2D 00 64 FD | 	ret
23228                 | 
23228                 | ' 
23228                 | ' '*************************************************************************
23228                 | ' '                                                                        *
23228                 | ' '  VBlank functions                                                      *
23228                 | ' '                                                                        *
23228                 | ' '*************************************************************************
23228                 | ' 
23228                 | ' pub waitvbl(amount) | i
23228                 | _hg010b_spin2_waitvbl
23228     03 4A 05 F6 | 	mov	COUNT_, #3
2322c     A8 00 A0 FD | 	call	#pushregs_
23230     09 27 02 F6 | 	mov	local01, arg01
23234                 | ' 
23234                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
23234                 | ' 
23234                 | ' repeat i from 1 to amount
23234     01 28 06 F6 | 	mov	local02, #1
23238     01 26 56 F2 | 	cmps	local01, #1 wc
2323c     01 2A 86 F6 | 	negc	local03, #1
23240     15 27 02 F1 | 	add	local01, local03
23244                 | LR__2770
23244                 | '   repeat until vblank==0
23244                 | LR__2771
23244     49 E4 05 F1 | 	add	objptr, #73
23248     F2 12 0A FB | 	rdlong	arg01, objptr wz
2324c     49 E4 85 F1 | 	sub	objptr, #73
23250     0C 00 90 AD |  if_e	jmp	#LR__2772
23254                 | '     waitus(100)
23254     64 12 06 F6 | 	mov	arg01, #100
23258     D8 1F B0 FD | 	call	#__system___waitus
2325c     E4 FF 9F FD | 	jmp	#LR__2771
23260                 | LR__2772
23260                 | '   repeat until vblank==1
23260                 | LR__2773
23260     49 E4 05 F1 | 	add	objptr, #73
23264     F2 12 02 FB | 	rdlong	arg01, objptr
23268     49 E4 85 F1 | 	sub	objptr, #73
2326c     01 12 0E F2 | 	cmp	arg01, #1 wz
23270     0C 00 90 AD |  if_e	jmp	#LR__2774
23274                 | '     waitus(100)
23274     64 12 06 F6 | 	mov	arg01, #100
23278     B8 1F B0 FD | 	call	#__system___waitus
2327c     E0 FF 9F FD | 	jmp	#LR__2773
23280                 | LR__2774
23280     15 29 02 F1 | 	add	local02, local03
23284     13 29 0A F2 | 	cmp	local02, local01 wz
23288     B8 FF 9F 5D |  if_ne	jmp	#LR__2770
2328c     A7 F0 03 F6 | 	mov	ptra, fp
23290     B2 00 A0 FD | 	call	#popregs_
23294                 | _hg010b_spin2_waitvbl_ret
23294     2D 00 64 FD | 	ret
23298                 | 
23298                 | ' 
23298                 | ' 
23298                 | ' pub cls(fc,bc)   :c,i
23298                 | _hg010b_spin2_cls
23298     02 4A 05 F6 | 	mov	COUNT_, #2
2329c     A8 00 A0 FD | 	call	#pushregs_
232a0     09 27 02 F6 | 	mov	local01, arg01
232a4     0A 29 02 F6 | 	mov	local02, arg02
232a8                 | ' 
232a8                 | ' c:=bc
232a8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
232a8     DD E4 05 F1 | 	add	objptr, #221
232ac     F2 12 02 FB | 	rdlong	arg01, objptr
232b0     A5 E4 85 F1 | 	sub	objptr, #165
232b4     F2 16 02 FB | 	rdlong	arg03, objptr
232b8     02 16 66 F0 | 	shl	arg03, #2
232bc     14 15 02 F6 | 	mov	arg02, local02
232c0     00 18 06 F6 | 	mov	arg04, #0
232c4     01 1A 06 F6 | 	mov	arg05, #1
232c8     0B 00 00 FF 
232cc     94 E4 05 F1 | 	add	objptr, ##5780
232d0     F8 10 B0 FD | 	call	#_psram_spin2_fill
232d4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
232d4     0B 00 00 FF 
232d8     C8 E4 85 F1 | 	sub	objptr, ##5832
232dc     F2 12 02 FB | 	rdlong	arg01, objptr
232e0     04 E4 85 F1 | 	sub	objptr, #4
232e4     F2 16 02 FB | 	rdlong	arg03, objptr
232e8     09 17 82 F1 | 	sub	arg03, arg01
232ec     20 14 06 F6 | 	mov	arg02, #32
232f0     00 18 06 F6 | 	mov	arg04, #0
232f4     01 1A 06 F6 | 	mov	arg05, #1
232f8     0B 00 00 FF 
232fc     CC E4 05 F1 | 	add	objptr, ##5836
23300     C8 10 B0 FD | 	call	#_psram_spin2_fill
23304                 | ' setwritecolors(fc,bc)
23304                 | ' 
23304                 | ' write_color:=ff
23304     0B 00 00 FF 
23308     8B E4 85 F1 | 	sub	objptr, ##5771
2330c     F2 26 62 FC | 	wrlong	local01, objptr
23310                 | ' write_background:=bb
23310     04 E4 05 F1 | 	add	objptr, #4
23314     F2 28 62 FC | 	wrlong	local02, objptr
23318                 | ' cursor_x:=0
23318     09 E4 85 F1 | 	sub	objptr, #9
2331c     F2 00 58 FC | 	wrword	#0, objptr
23320                 | ' cursor_y:=0
23320     02 E4 05 F1 | 	add	objptr, #2
23324     F2 00 48 FC | 	wrbyte	#0, objptr
23328                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
23328     02 E4 85 F1 | 	sub	objptr, #2
2332c     F2 14 E2 FA | 	rdword	arg02, objptr
23330     02 14 66 F0 | 	shl	arg02, #2
23334     02 E4 05 F1 | 	add	objptr, #2
23338     F2 16 C2 FA | 	rdbyte	arg03, objptr
2333c     3E E4 85 F1 | 	sub	objptr, #62
23340     04 16 66 F0 | 	shl	arg03, #4
23344     04 16 06 F1 | 	add	arg03, #4
23348     11 12 06 F6 | 	mov	arg01, #17
2334c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
23350                 | ' setcursorcolor(fc)
23350     13 13 02 F6 | 	mov	arg01, local01
23354     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
23358     14 FB 01 F6 | 	mov	result1, local02
2335c     00 FC 05 F6 | 	mov	result2, #0
23360     A7 F0 03 F6 | 	mov	ptra, fp
23364     B2 00 A0 FD | 	call	#popregs_
23368                 | _hg010b_spin2_cls_ret
23368     2D 00 64 FD | 	ret
2336c                 | 
2336c                 | ' 
2336c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2336c                 | ' 
2336c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2336c                 | _hg010b_spin2_putchar
2336c     02 4A 05 F6 | 	mov	COUNT_, #2
23370     A8 00 A0 FD | 	call	#pushregs_
23374     09 27 02 F6 | 	mov	local01, arg01
23378                 | ' 
23378                 | ' if achar==10
23378     0A 26 0E F2 | 	cmp	local01, #10 wz
2337c                 | '   crlf()
2337c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
23380                 | ' if achar==9
23380     09 26 0E F2 | 	cmp	local01, #9 wz
23384     18 00 90 5D |  if_ne	jmp	#LR__2780
23388                 | '   cursor_x:=(cursor_x& %11110000)+16
23388     3C E4 05 F1 | 	add	objptr, #60
2338c     F2 16 E2 FA | 	rdword	arg03, objptr
23390     F0 16 06 F5 | 	and	arg03, #240
23394     10 16 06 F1 | 	add	arg03, #16
23398     F2 16 52 FC | 	wrword	arg03, objptr
2339c     3C E4 85 F1 | 	sub	objptr, #60
233a0                 | LR__2780
233a0                 | '   
233a0                 | ' if (achar<>9) && (achar<>10) 
233a0     09 26 0E F2 | 	cmp	local01, #9 wz
233a4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
233a8     A8 00 90 AD |  if_e	jmp	#LR__2781
233ac                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
233ac     3C E4 05 F1 | 	add	objptr, #60
233b0     F2 12 E2 FA | 	rdword	arg01, objptr
233b4     02 E4 05 F1 | 	add	objptr, #2
233b8     F2 14 C2 FA | 	rdbyte	arg02, objptr
233bc     04 14 66 F0 | 	shl	arg02, #4
233c0     04 14 06 F1 | 	add	arg02, #4
233c4     03 E4 05 F1 | 	add	objptr, #3
233c8     F2 18 02 FB | 	rdlong	arg04, objptr
233cc     04 E4 05 F1 | 	add	objptr, #4
233d0     F2 1A 02 FB | 	rdlong	arg05, objptr
233d4     45 E4 85 F1 | 	sub	objptr, #69
233d8     13 17 02 F6 | 	mov	arg03, local01
233dc     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
233e0     04 E4 05 F1 | 	add	objptr, #4
233e4     F2 12 02 FB | 	rdlong	arg01, objptr
233e8     10 00 00 FF 
233ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
233f0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
233f4     3A E4 05 F1 | 	add	objptr, #58
233f8     F2 1A C2 FA | 	rdbyte	arg05, objptr
233fc     0D 17 02 FD | 	qmul	arg03, arg05
23400                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23400     10 00 00 FF 
23404     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23408     02 E4 85 F1 | 	sub	objptr, #2
2340c     F2 28 E2 FA | 	rdword	local02, objptr
23410     01 28 46 F0 | 	shr	local02, #1
23414     13 15 02 F6 | 	mov	arg02, local01
23418     01 16 06 F6 | 	mov	arg03, #1
2341c     00 18 06 F6 | 	mov	arg04, #0
23420     01 1A 06 F6 | 	mov	arg05, #1
23424     0B 00 00 FF 
23428     90 E4 05 F1 | 	add	objptr, ##5776
2342c     18 26 62 FD | 	getqx	local01
23430     14 27 02 F1 | 	add	local01, local02
23434     13 13 02 F1 | 	add	arg01, local01
23438     90 0F B0 FD | 	call	#_psram_spin2_fill
2343c                 | '   cursor_x+=2
2343c     0B 00 00 FF 
23440     90 E4 85 F1 | 	sub	objptr, ##5776
23444     F2 28 E2 FA | 	rdword	local02, objptr
23448     02 28 06 F1 | 	add	local02, #2
2344c     F2 28 52 FC | 	wrword	local02, objptr
23450     3C E4 85 F1 | 	sub	objptr, #60
23454                 | LR__2781
23454                 | ' 
23454                 | ' if cursor_x>=256
23454     3C E4 05 F1 | 	add	objptr, #60
23458     F2 28 E2 FA | 	rdword	local02, objptr
2345c     3C E4 85 F1 | 	sub	objptr, #60
23460     00 29 56 F2 | 	cmps	local02, #256 wc
23464     64 00 90 CD |  if_b	jmp	#LR__2783
23468                 | '   cursor_x:=0
23468     3C E4 05 F1 | 	add	objptr, #60
2346c     F2 00 58 FC | 	wrword	#0, objptr
23470                 | '   cursor_y+=1
23470     02 E4 05 F1 | 	add	objptr, #2
23474     F2 28 C2 FA | 	rdbyte	local02, objptr
23478     01 28 06 F1 | 	add	local02, #1
2347c     F2 28 42 FC | 	wrbyte	local02, objptr
23480                 | '   if cursor_y>st_lines-1
23480     C3 E4 05 F1 | 	add	objptr, #195
23484     F2 28 02 FB | 	rdlong	local02, objptr
23488     01 28 86 F1 | 	sub	local02, #1
2348c     C3 E4 85 F1 | 	sub	objptr, #195
23490     F2 16 C2 FA | 	rdbyte	arg03, objptr
23494     3E E4 85 F1 | 	sub	objptr, #62
23498     14 17 5A F2 | 	cmps	arg03, local02 wcz
2349c     2C 00 90 ED |  if_be	jmp	#LR__2782
234a0                 | '     scrollup2()
234a0     00 12 06 F6 | 	mov	arg01, #0
234a4     01 00 00 FF 
234a8     58 14 06 F6 | 	mov	arg02, ##600
234ac     10 16 06 F6 | 	mov	arg03, #16
234b0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
234b4                 | '     cursor_y:=st_lines-1
234b4     01 E5 05 F1 | 	add	objptr, #257
234b8     F2 28 02 FB | 	rdlong	local02, objptr
234bc     01 28 86 F1 | 	sub	local02, #1
234c0     C3 E4 85 F1 | 	sub	objptr, #195
234c4     F2 28 42 FC | 	wrbyte	local02, objptr
234c8     3E E4 85 F1 | 	sub	objptr, #62
234cc                 | LR__2782
234cc                 | LR__2783
234cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
234cc     3C E4 05 F1 | 	add	objptr, #60
234d0     F2 14 E2 FA | 	rdword	arg02, objptr
234d4     02 14 66 F0 | 	shl	arg02, #2
234d8     02 E4 05 F1 | 	add	objptr, #2
234dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
234e0     3E E4 85 F1 | 	sub	objptr, #62
234e4     04 16 66 F0 | 	shl	arg03, #4
234e8     04 16 06 F1 | 	add	arg03, #4
234ec     11 12 06 F6 | 	mov	arg01, #17
234f0     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
234f4     A7 F0 03 F6 | 	mov	ptra, fp
234f8     B2 00 A0 FD | 	call	#popregs_
234fc                 | _hg010b_spin2_putchar_ret
234fc     2D 00 64 FD | 	ret
23500                 | 
23500                 | '     
23500                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
23500                 | ' 
23500                 | ' pub putchar2(achar) | c,x,y,l,newcpl
23500                 | _hg010b_spin2_putchar2
23500     02 4A 05 F6 | 	mov	COUNT_, #2
23504     A8 00 A0 FD | 	call	#pushregs_
23508     09 27 02 F6 | 	mov	local01, arg01
2350c                 | ' 
2350c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2350c     3C E4 05 F1 | 	add	objptr, #60
23510     F2 12 E2 FA | 	rdword	arg01, objptr
23514     02 E4 05 F1 | 	add	objptr, #2
23518     F2 14 C2 FA | 	rdbyte	arg02, objptr
2351c     04 14 66 F0 | 	shl	arg02, #4
23520     04 14 06 F1 | 	add	arg02, #4
23524     03 E4 05 F1 | 	add	objptr, #3
23528     F2 18 02 FB | 	rdlong	arg04, objptr
2352c     04 E4 05 F1 | 	add	objptr, #4
23530     F2 1A 02 FB | 	rdlong	arg05, objptr
23534     45 E4 85 F1 | 	sub	objptr, #69
23538     13 17 02 F6 | 	mov	arg03, local01
2353c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
23540     04 E4 05 F1 | 	add	objptr, #4
23544     F2 12 02 FB | 	rdlong	arg01, objptr
23548     10 00 00 FF 
2354c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23550     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23554     3A E4 05 F1 | 	add	objptr, #58
23558     F2 1A C2 FA | 	rdbyte	arg05, objptr
2355c     0D 17 02 FD | 	qmul	arg03, arg05
23560                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
23560     10 00 00 FF 
23564     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23568     02 E4 85 F1 | 	sub	objptr, #2
2356c     F2 28 E2 FA | 	rdword	local02, objptr
23570     01 28 46 F0 | 	shr	local02, #1
23574     13 15 02 F6 | 	mov	arg02, local01
23578     01 16 06 F6 | 	mov	arg03, #1
2357c     00 18 06 F6 | 	mov	arg04, #0
23580     01 1A 06 F6 | 	mov	arg05, #1
23584     0B 00 00 FF 
23588     90 E4 05 F1 | 	add	objptr, ##5776
2358c     18 26 62 FD | 	getqx	local01
23590     14 27 02 F1 | 	add	local01, local02
23594     13 13 02 F1 | 	add	arg01, local01
23598     30 0E B0 FD | 	call	#_psram_spin2_fill
2359c                 | ' 
2359c                 | ' cursor_x+=2
2359c     0B 00 00 FF 
235a0     90 E4 85 F1 | 	sub	objptr, ##5776
235a4     F2 28 E2 FA | 	rdword	local02, objptr
235a8     02 28 06 F1 | 	add	local02, #2
235ac     F2 28 52 FC | 	wrword	local02, objptr
235b0                 | ' if cursor_x>=256
235b0     F2 28 E2 FA | 	rdword	local02, objptr
235b4     3C E4 85 F1 | 	sub	objptr, #60
235b8     00 29 56 F2 | 	cmps	local02, #256 wc
235bc     64 00 90 CD |  if_b	jmp	#LR__2791
235c0                 | '   cursor_x:=0
235c0     3C E4 05 F1 | 	add	objptr, #60
235c4     F2 00 58 FC | 	wrword	#0, objptr
235c8                 | '   cursor_y+=1
235c8     02 E4 05 F1 | 	add	objptr, #2
235cc     F2 28 C2 FA | 	rdbyte	local02, objptr
235d0     01 28 06 F1 | 	add	local02, #1
235d4     F2 28 42 FC | 	wrbyte	local02, objptr
235d8                 | '   if cursor_y>st_lines-1
235d8     C3 E4 05 F1 | 	add	objptr, #195
235dc     F2 28 02 FB | 	rdlong	local02, objptr
235e0     01 28 86 F1 | 	sub	local02, #1
235e4     C3 E4 85 F1 | 	sub	objptr, #195
235e8     F2 16 C2 FA | 	rdbyte	arg03, objptr
235ec     3E E4 85 F1 | 	sub	objptr, #62
235f0     14 17 5A F2 | 	cmps	arg03, local02 wcz
235f4     2C 00 90 ED |  if_be	jmp	#LR__2790
235f8                 | '     scrollup2()
235f8     00 12 06 F6 | 	mov	arg01, #0
235fc     01 00 00 FF 
23600     58 14 06 F6 | 	mov	arg02, ##600
23604     10 16 06 F6 | 	mov	arg03, #16
23608     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2360c                 | '     cursor_y:=st_lines-1
2360c     01 E5 05 F1 | 	add	objptr, #257
23610     F2 28 02 FB | 	rdlong	local02, objptr
23614     01 28 86 F1 | 	sub	local02, #1
23618     C3 E4 85 F1 | 	sub	objptr, #195
2361c     F2 28 42 FC | 	wrbyte	local02, objptr
23620     3E E4 85 F1 | 	sub	objptr, #62
23624                 | LR__2790
23624                 | LR__2791
23624                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
23624     3C E4 05 F1 | 	add	objptr, #60
23628     F2 14 E2 FA | 	rdword	arg02, objptr
2362c     02 14 66 F0 | 	shl	arg02, #2
23630     02 E4 05 F1 | 	add	objptr, #2
23634     F2 16 C2 FA | 	rdbyte	arg03, objptr
23638     3E E4 85 F1 | 	sub	objptr, #62
2363c     04 16 66 F0 | 	shl	arg03, #4
23640     04 16 06 F1 | 	add	arg03, #4
23644     11 12 06 F6 | 	mov	arg01, #17
23648     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2364c     A7 F0 03 F6 | 	mov	ptra, fp
23650     B2 00 A0 FD | 	call	#popregs_
23654                 | _hg010b_spin2_putchar2_ret
23654     2D 00 64 FD | 	ret
23658                 | 
23658                 | ' ''--------- Output a string at the cursor position, move the cursor  
23658                 | ' 
23658                 | ' pub write(text) | iii,c,ncx,ncy
23658                 | _hg010b_spin2_write
23658     04 4A 05 F6 | 	mov	COUNT_, #4
2365c     A8 00 A0 FD | 	call	#pushregs_
23660     09 27 02 F6 | 	mov	local01, arg01
23664                 | ' 
23664                 | ' repeat iii from 0 to strsize(text)-1
23664     00 28 06 F6 | 	mov	local02, #0
23668     13 13 02 F6 | 	mov	arg01, local01
2366c     09 2B 02 F6 | 	mov	local03, arg01
23670     97 06 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
23674                 | LR__2800
23674     15 FB C9 FA | 	rdbyte	result1, local03 wz
23678     01 2A 06 51 |  if_ne	add	local03, #1
2367c     F4 FF 9F 5D |  if_ne	jmp	#LR__2800
23680                 | LR__2801
23680     09 2B 82 F1 | 	sub	local03, arg01
23684     01 2A 86 F1 | 	sub	local03, #1
23688     00 2A 56 F2 | 	cmps	local03, #0 wc
2368c     01 2C 86 F6 | 	negc	local04, #1
23690     16 2B 02 F1 | 	add	local03, local04
23694                 | LR__2802
23694                 | '   putchar2(byte[text+iii])
23694     13 13 02 F6 | 	mov	arg01, local01
23698     14 13 02 F1 | 	add	arg01, local02
2369c     09 13 C2 FA | 	rdbyte	arg01, arg01
236a0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
236a4     16 29 02 F1 | 	add	local02, local04
236a8     15 29 0A F2 | 	cmp	local02, local03 wz
236ac     E4 FF 9F 5D |  if_ne	jmp	#LR__2802
236b0     A7 F0 03 F6 | 	mov	ptra, fp
236b4     B2 00 A0 FD | 	call	#popregs_
236b8                 | _hg010b_spin2_write_ret
236b8     2D 00 64 FD | 	ret
236bc                 | 
236bc                 | '    
236bc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
236bc                 | ' 
236bc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
236bc                 | _hg010b_spin2_scrollup2
236bc     03 4A 05 F6 | 	mov	COUNT_, #3
236c0     A8 00 A0 FD | 	call	#pushregs_
236c4                 | ' 	
236c4                 | ' repeat i from 4 to 579 
236c4     04 26 06 F6 | 	mov	local01, #4
236c8                 | LR__2810
236c8     F9 E4 05 F1 | 	add	objptr, #249
236cc     F2 1A 02 FB | 	rdlong	arg05, objptr
236d0     1C E4 85 F1 | 	sub	objptr, #28
236d4     F2 14 02 FB | 	rdlong	arg02, objptr
236d8     13 19 02 F6 | 	mov	arg04, local01
236dc     10 18 06 F1 | 	add	arg04, #16
236e0     02 18 66 F0 | 	shl	arg04, #2
236e4     14 E4 05 F1 | 	add	objptr, #20
236e8     F2 16 02 FB | 	rdlong	arg03, objptr
236ec     0B 19 02 FD | 	qmul	arg04, arg03
236f0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
236f0     F6 03 00 FF 
236f4     00 12 06 F6 | 	mov	arg01, ##519168
236f8     0D 13 82 F1 | 	sub	arg01, arg05
236fc     02 16 66 F0 | 	shl	arg03, #2
23700     0A 00 00 FF 
23704     DB E5 05 F1 | 	add	objptr, ##5595
23708     18 1A 62 FD | 	getqx	arg05
2370c     0D 15 02 F1 | 	add	arg02, arg05
23710     80 0B B0 FD | 	call	#_psram_spin2_read1
23714     0A 00 00 FF 
23718     D3 E5 85 F1 | 	sub	objptr, ##5587
2371c     F2 1A 02 FB | 	rdlong	arg05, objptr
23720     1C E4 85 F1 | 	sub	objptr, #28
23724     F2 14 02 FB | 	rdlong	arg02, objptr
23728     13 19 02 F6 | 	mov	arg04, local01
2372c     02 18 66 F0 | 	shl	arg04, #2
23730     14 E4 05 F1 | 	add	objptr, #20
23734     F2 16 02 FB | 	rdlong	arg03, objptr
23738     0B 19 02 FD | 	qmul	arg04, arg03
2373c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2373c     F6 03 00 FF 
23740     00 12 06 F6 | 	mov	arg01, ##519168
23744     0D 13 82 F1 | 	sub	arg01, arg05
23748     02 16 66 F0 | 	shl	arg03, #2
2374c     0A 00 00 FF 
23750     DB E5 05 F1 | 	add	objptr, ##5595
23754     18 1A 62 FD | 	getqx	arg05
23758     0D 15 02 F1 | 	add	arg02, arg05
2375c     D0 0B B0 FD | 	call	#_psram_spin2_write
23760     0B 00 00 FF 
23764     CC E4 85 F1 | 	sub	objptr, ##5836
23768     01 26 06 F1 | 	add	local01, #1
2376c     01 00 00 FF 
23770     44 26 16 F2 | 	cmp	local01, ##580 wc
23774     50 FF 9F CD |  if_b	jmp	#LR__2810
23778                 | ' 
23778                 | ' repeat i from 580 to 599
23778     01 00 00 FF 
2377c     44 26 06 F6 | 	mov	local01, ##580
23780                 | LR__2811
23780                 | '    fastline(0,1023,i,write_background)   
23780     45 E4 05 F1 | 	add	objptr, #69
23784     F2 18 02 FB | 	rdlong	arg04, objptr
23788     45 E4 85 F1 | 	sub	objptr, #69
2378c     00 12 06 F6 | 	mov	arg01, #0
23790     09 14 CE F9 | 	bmask	arg02, #9
23794     13 17 02 F6 | 	mov	arg03, local01
23798     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
2379c     01 26 06 F1 | 	add	local01, #1
237a0     01 00 00 FF 
237a4     58 26 16 F2 | 	cmp	local01, ##600 wc
237a8     D4 FF 9F CD |  if_b	jmp	#LR__2811
237ac                 | ' repeat i from 0 to 3
237ac     00 26 06 F6 | 	mov	local01, #0
237b0                 | LR__2812
237b0                 | '    fastline(0,1023,i,write_background)      
237b0     45 E4 05 F1 | 	add	objptr, #69
237b4     F2 18 02 FB | 	rdlong	arg04, objptr
237b8     45 E4 85 F1 | 	sub	objptr, #69
237bc     00 12 06 F6 | 	mov	arg01, #0
237c0     09 14 CE F9 | 	bmask	arg02, #9
237c4     13 17 02 F6 | 	mov	arg03, local01
237c8     90 EF BF FD | 	call	#_hg010b_spin2_fastline
237cc     01 26 06 F1 | 	add	local01, #1
237d0     04 26 56 F2 | 	cmps	local01, #4 wc
237d4     D8 FF 9F CD |  if_b	jmp	#LR__2812
237d8                 | ' 
237d8                 | ' repeat i from 0 to 35
237d8     00 26 06 F6 | 	mov	local01, #0
237dc                 | LR__2813
237dc     13 1B 02 F6 | 	mov	arg05, local01
237e0     01 1A 06 F1 | 	add	arg05, #1
237e4     10 00 00 FF 
237e8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
237ec     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
237f0     0B 1B 02 FD | 	qmul	arg05, arg03
237f4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
237f4     F6 03 00 FF 
237f8     00 12 06 F6 | 	mov	arg01, ##519168
237fc     F9 E4 05 F1 | 	add	objptr, #249
23800     F2 1A 02 FB | 	rdlong	arg05, objptr
23804     0D 13 82 F1 | 	sub	arg01, arg05
23808     F5 E4 85 F1 | 	sub	objptr, #245
2380c     F2 14 02 FB | 	rdlong	arg02, objptr
23810     10 00 00 FF 
23814     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23818     0B 00 00 FF 
2381c     C8 E4 05 F1 | 	add	objptr, ##5832
23820     18 1A 62 FD | 	getqx	arg05
23824     0D 15 02 F1 | 	add	arg02, arg05
23828     68 0A B0 FD | 	call	#_psram_spin2_read1
2382c     10 00 00 FF 
23830     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23834     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
23838     0B 27 02 FD | 	qmul	local01, arg03
2383c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2383c     F6 03 00 FF 
23840     00 12 06 F6 | 	mov	arg01, ##519168
23844     0A 00 00 FF 
23848     D3 E5 85 F1 | 	sub	objptr, ##5587
2384c     F2 1A 02 FB | 	rdlong	arg05, objptr
23850     0D 13 82 F1 | 	sub	arg01, arg05
23854     F5 E4 85 F1 | 	sub	objptr, #245
23858     F2 14 02 FB | 	rdlong	arg02, objptr
2385c     10 00 00 FF 
23860     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
23864     0B 00 00 FF 
23868     C8 E4 05 F1 | 	add	objptr, ##5832
2386c     18 1A 62 FD | 	getqx	arg05
23870     0D 15 02 F1 | 	add	arg02, arg05
23874     B8 0A B0 FD | 	call	#_psram_spin2_write
23878     0B 00 00 FF 
2387c     CC E4 85 F1 | 	sub	objptr, ##5836
23880     01 26 06 F1 | 	add	local01, #1
23884     24 26 56 F2 | 	cmps	local01, #36 wc
23888     50 FF 9F CD |  if_b	jmp	#LR__2813
2388c                 | ' repeat i from 0 to timings[7]-1
2388c     00 26 06 F6 | 	mov	local01, #0
23890     10 00 00 FF 
23894     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
23898     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2389c     10 00 00 FF 
238a0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
238a4     01 28 86 F1 | 	sub	local02, #1
238a8     00 28 56 F2 | 	cmps	local02, #0 wc
238ac     01 2A 86 F6 | 	negc	local03, #1
238b0     15 29 02 F1 | 	add	local02, local03
238b4                 | LR__2814
238b4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
238b4     04 E4 05 F1 | 	add	objptr, #4
238b8     F2 12 02 FB | 	rdlong	arg01, objptr
238bc     10 00 00 FF 
238c0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
238c4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
238c8     10 00 00 FF 
238cc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
238d0     0D 19 02 F6 | 	mov	arg04, arg05
238d4     03 18 66 F0 | 	shl	arg04, #3
238d8     0D 19 02 F1 | 	add	arg04, arg05
238dc     02 18 66 F0 | 	shl	arg04, #2
238e0     13 19 02 F1 | 	add	arg04, local01
238e4     0C 13 02 F1 | 	add	arg01, arg04
238e8     20 14 06 F6 | 	mov	arg02, #32
238ec     01 16 06 F6 | 	mov	arg03, #1
238f0     00 18 06 F6 | 	mov	arg04, #0
238f4     01 1A 06 F6 | 	mov	arg05, #1
238f8     0B 00 00 FF 
238fc     C8 E4 05 F1 | 	add	objptr, ##5832
23900     C8 0A B0 FD | 	call	#_psram_spin2_fill
23904     0B 00 00 FF 
23908     CC E4 85 F1 | 	sub	objptr, ##5836
2390c     15 27 02 F1 | 	add	local01, local03
23910     14 27 0A F2 | 	cmp	local01, local02 wz
23914     9C FF 9F 5D |  if_ne	jmp	#LR__2814
23918     A7 F0 03 F6 | 	mov	ptra, fp
2391c     B2 00 A0 FD | 	call	#popregs_
23920                 | _hg010b_spin2_scrollup2_ret
23920     2D 00 64 FD | 	ret
23924                 | 
23924                 | '  
23924                 | ' ''----------- Scroll the screen one line down 
23924                 | ' 
23924                 | ' pub scrolldown(start=0) | i
23924                 | _hg010b_spin2_scrolldown
23924     05 4A 05 F6 | 	mov	COUNT_, #5
23928     A8 00 A0 FD | 	call	#pushregs_
2392c     09 27 02 F6 | 	mov	local01, arg01
23930                 | ' 
23930                 | ' repeat i from 579 to (start*16)+4
23930     01 00 00 FF 
23934     43 28 06 F6 | 	mov	local02, ##579
23938     13 2B 02 F6 | 	mov	local03, local01
2393c     04 2A 66 F0 | 	shl	local03, #4
23940     04 2A 06 F1 | 	add	local03, #4
23944     01 00 00 FF 
23948     43 2A 56 F2 | 	cmps	local03, ##579 wc
2394c     01 2C 86 F6 | 	negc	local04, #1
23950     16 2F 02 F6 | 	mov	local05, local04
23954     16 2B 02 F1 | 	add	local03, local04
23958                 | LR__2820
23958     F9 E4 05 F1 | 	add	objptr, #249
2395c     F2 2C 02 FB | 	rdlong	local04, objptr
23960     1C E4 85 F1 | 	sub	objptr, #28
23964     F2 14 02 FB | 	rdlong	arg02, objptr
23968     14 1B 02 F6 | 	mov	arg05, local02
2396c     02 1A 66 F0 | 	shl	arg05, #2
23970     14 E4 05 F1 | 	add	objptr, #20
23974     F2 16 02 FB | 	rdlong	arg03, objptr
23978     0B 1B 02 FD | 	qmul	arg05, arg03
2397c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2397c     F6 03 00 FF 
23980     00 12 06 F6 | 	mov	arg01, ##519168
23984     16 13 82 F1 | 	sub	arg01, local04
23988     02 16 66 F0 | 	shl	arg03, #2
2398c     0A 00 00 FF 
23990     DB E5 05 F1 | 	add	objptr, ##5595
23994     18 2C 62 FD | 	getqx	local04
23998     16 15 02 F1 | 	add	arg02, local04
2399c     F4 08 B0 FD | 	call	#_psram_spin2_read1
239a0     0A 00 00 FF 
239a4     D3 E5 85 F1 | 	sub	objptr, ##5587
239a8     F2 2C 02 FB | 	rdlong	local04, objptr
239ac     1C E4 85 F1 | 	sub	objptr, #28
239b0     F2 14 02 FB | 	rdlong	arg02, objptr
239b4     14 1B 02 F6 | 	mov	arg05, local02
239b8     10 1A 06 F1 | 	add	arg05, #16
239bc     02 1A 66 F0 | 	shl	arg05, #2
239c0     14 E4 05 F1 | 	add	objptr, #20
239c4     F2 16 02 FB | 	rdlong	arg03, objptr
239c8     0B 1B 02 FD | 	qmul	arg05, arg03
239cc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
239cc     F6 03 00 FF 
239d0     00 12 06 F6 | 	mov	arg01, ##519168
239d4     16 13 82 F1 | 	sub	arg01, local04
239d8     02 16 66 F0 | 	shl	arg03, #2
239dc     0A 00 00 FF 
239e0     DB E5 05 F1 | 	add	objptr, ##5595
239e4     18 2C 62 FD | 	getqx	local04
239e8     16 15 02 F1 | 	add	arg02, local04
239ec     40 09 B0 FD | 	call	#_psram_spin2_write
239f0     0B 00 00 FF 
239f4     CC E4 85 F1 | 	sub	objptr, ##5836
239f8     17 29 02 F1 | 	add	local02, local05
239fc     15 29 0A F2 | 	cmp	local02, local03 wz
23a00     54 FF 9F 5D |  if_ne	jmp	#LR__2820
23a04                 | ' 
23a04                 | ' repeat i from (start*16)+4 to (start*16)+19
23a04     13 29 02 F6 | 	mov	local02, local01
23a08     04 28 66 F0 | 	shl	local02, #4
23a0c     04 28 06 F1 | 	add	local02, #4
23a10     13 2F 02 F6 | 	mov	local05, local01
23a14     04 2E 66 F0 | 	shl	local05, #4
23a18     13 2E 06 F1 | 	add	local05, #19
23a1c     13 2D 02 F6 | 	mov	local04, local01
23a20     04 2C 66 F0 | 	shl	local04, #4
23a24     04 2C 06 F1 | 	add	local04, #4
23a28     16 2F 52 F2 | 	cmps	local05, local04 wc
23a2c     01 2C 86 F6 | 	negc	local04, #1
23a30     16 2B 02 F6 | 	mov	local03, local04
23a34     16 2F 02 F1 | 	add	local05, local04
23a38                 | LR__2821
23a38                 | '    fastline(0,1023,i,write_background)    
23a38     45 E4 05 F1 | 	add	objptr, #69
23a3c     F2 18 02 FB | 	rdlong	arg04, objptr
23a40     45 E4 85 F1 | 	sub	objptr, #69
23a44     00 12 06 F6 | 	mov	arg01, #0
23a48     09 14 CE F9 | 	bmask	arg02, #9
23a4c     14 17 02 F6 | 	mov	arg03, local02
23a50     08 ED BF FD | 	call	#_hg010b_spin2_fastline
23a54     15 29 02 F1 | 	add	local02, local03
23a58     17 29 0A F2 | 	cmp	local02, local05 wz
23a5c     D8 FF 9F 5D |  if_ne	jmp	#LR__2821
23a60                 | '    
23a60                 | ' repeat i from 35 to start
23a60     23 28 06 F6 | 	mov	local02, #35
23a64     23 26 56 F2 | 	cmps	local01, #35 wc
23a68     01 2C 86 F6 | 	negc	local04, #1
23a6c     13 2F 02 F6 | 	mov	local05, local01
23a70     16 2F 02 F1 | 	add	local05, local04
23a74                 | LR__2822
23a74                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
23a74     F6 03 00 FF 
23a78     00 12 06 F6 | 	mov	arg01, ##519168
23a7c     F9 E4 05 F1 | 	add	objptr, #249
23a80     F2 2A 02 FB | 	rdlong	local03, objptr
23a84     15 13 82 F1 | 	sub	arg01, local03
23a88     F5 E4 85 F1 | 	sub	objptr, #245
23a8c     F2 14 02 FB | 	rdlong	arg02, objptr
23a90     14 2B 02 F6 | 	mov	local03, local02
23a94     07 2A 66 F0 | 	shl	local03, #7
23a98     15 15 02 F1 | 	add	arg02, local03
23a9c     80 16 06 F6 | 	mov	arg03, #128
23aa0     0B 00 00 FF 
23aa4     C8 E4 05 F1 | 	add	objptr, ##5832
23aa8     E8 07 B0 FD | 	call	#_psram_spin2_read1
23aac                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
23aac     F6 03 00 FF 
23ab0     00 12 06 F6 | 	mov	arg01, ##519168
23ab4     0A 00 00 FF 
23ab8     D3 E5 85 F1 | 	sub	objptr, ##5587
23abc     F2 2A 02 FB | 	rdlong	local03, objptr
23ac0     15 13 82 F1 | 	sub	arg01, local03
23ac4     F5 E4 85 F1 | 	sub	objptr, #245
23ac8     F2 14 02 FB | 	rdlong	arg02, objptr
23acc     14 2B 02 F6 | 	mov	local03, local02
23ad0     01 2A 06 F1 | 	add	local03, #1
23ad4     07 2A 66 F0 | 	shl	local03, #7
23ad8     15 15 02 F1 | 	add	arg02, local03
23adc     80 16 06 F6 | 	mov	arg03, #128
23ae0     0B 00 00 FF 
23ae4     C8 E4 05 F1 | 	add	objptr, ##5832
23ae8     44 08 B0 FD | 	call	#_psram_spin2_write
23aec     0B 00 00 FF 
23af0     CC E4 85 F1 | 	sub	objptr, ##5836
23af4     16 29 02 F1 | 	add	local02, local04
23af8     17 29 0A F2 | 	cmp	local02, local05 wz
23afc     74 FF 9F 5D |  if_ne	jmp	#LR__2822
23b00                 | ' repeat i from 0 to 127
23b00     00 28 06 F6 | 	mov	local02, #0
23b04                 | LR__2823
23b04                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
23b04     04 E4 05 F1 | 	add	objptr, #4
23b08     F2 12 02 FB | 	rdlong	arg01, objptr
23b0c     13 2F 02 F6 | 	mov	local05, local01
23b10     07 2E 66 F0 | 	shl	local05, #7
23b14     17 13 02 F1 | 	add	arg01, local05
23b18     14 13 02 F1 | 	add	arg01, local02
23b1c     20 14 06 F6 | 	mov	arg02, #32
23b20     01 16 06 F6 | 	mov	arg03, #1
23b24     00 18 06 F6 | 	mov	arg04, #0
23b28     01 1A 06 F6 | 	mov	arg05, #1
23b2c     0B 00 00 FF 
23b30     C8 E4 05 F1 | 	add	objptr, ##5832
23b34     94 08 B0 FD | 	call	#_psram_spin2_fill
23b38     0B 00 00 FF 
23b3c     CC E4 85 F1 | 	sub	objptr, ##5836
23b40     01 28 06 F1 | 	add	local02, #1
23b44     80 28 56 F2 | 	cmps	local02, #128 wc
23b48     B8 FF 9F CD |  if_b	jmp	#LR__2823
23b4c     A7 F0 03 F6 | 	mov	ptra, fp
23b50     B2 00 A0 FD | 	call	#popregs_
23b54                 | _hg010b_spin2_scrolldown_ret
23b54     2D 00 64 FD | 	ret
23b58                 | 
23b58                 | ' 
23b58                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
23b58                 | ' 
23b58                 | ' pub crlf()
23b58                 | _hg010b_spin2_crlf
23b58                 | ' 
23b58                 | ' cursor_x:=leading_spaces*2
23b58     01 00 00 FF 
23b5c     B6 E4 05 F1 | 	add	objptr, ##694
23b60     F2 16 02 FB | 	rdlong	arg03, objptr
23b64     01 16 66 F0 | 	shl	arg03, #1
23b68     01 00 00 FF 
23b6c     7A E4 85 F1 | 	sub	objptr, ##634
23b70     F2 16 52 FC | 	wrword	arg03, objptr
23b74                 | ' cursor_y+=1
23b74     02 E4 05 F1 | 	add	objptr, #2
23b78     F2 16 C2 FA | 	rdbyte	arg03, objptr
23b7c     01 16 06 F1 | 	add	arg03, #1
23b80     F2 16 42 FC | 	wrbyte	arg03, objptr
23b84                 | ' if cursor_y>st_lines-1
23b84     C3 E4 05 F1 | 	add	objptr, #195
23b88     F2 16 02 FB | 	rdlong	arg03, objptr
23b8c     01 16 86 F1 | 	sub	arg03, #1
23b90     C3 E4 85 F1 | 	sub	objptr, #195
23b94     F2 14 C2 FA | 	rdbyte	arg02, objptr
23b98     3E E4 85 F1 | 	sub	objptr, #62
23b9c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
23ba0     2C 00 90 ED |  if_be	jmp	#LR__2830
23ba4                 | '   scrollup2()
23ba4     00 12 06 F6 | 	mov	arg01, #0
23ba8     01 00 00 FF 
23bac     58 14 06 F6 | 	mov	arg02, ##600
23bb0     10 16 06 F6 | 	mov	arg03, #16
23bb4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
23bb8                 | '   cursor_y:=st_lines-1
23bb8     01 E5 05 F1 | 	add	objptr, #257
23bbc     F2 16 02 FB | 	rdlong	arg03, objptr
23bc0     01 16 86 F1 | 	sub	arg03, #1
23bc4     C3 E4 85 F1 | 	sub	objptr, #195
23bc8     F2 16 42 FC | 	wrbyte	arg03, objptr
23bcc     3E E4 85 F1 | 	sub	objptr, #62
23bd0                 | LR__2830
23bd0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
23bd0     3C E4 05 F1 | 	add	objptr, #60
23bd4     F2 14 E2 FA | 	rdword	arg02, objptr
23bd8     02 14 66 F0 | 	shl	arg02, #2
23bdc     02 E4 05 F1 | 	add	objptr, #2
23be0     F2 16 C2 FA | 	rdbyte	arg03, objptr
23be4     3E E4 85 F1 | 	sub	objptr, #62
23be8     04 16 66 F0 | 	shl	arg03, #4
23bec     04 16 06 F1 | 	add	arg03, #4
23bf0     11 12 06 F6 | 	mov	arg01, #17
23bf4     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
23bf8                 | _hg010b_spin2_crlf_ret
23bf8     2D 00 64 FD | 	ret
23bfc                 | 
23bfc                 | ' 
23bfc                 | ' 
23bfc                 | ' '*************************************************************************
23bfc                 | ' '                                                                        *
23bfc                 | ' '  Conversions                                                           *
23bfc                 | ' '                                                                        *
23bfc                 | ' '*************************************************************************
23bfc                 | ' 
23bfc                 | ' ''---------- Convert a integer to dec string, return a pointer
23bfc                 | ' 
23bfc                 | ' pub inttostr(i):result |q,pos,k,j
23bfc                 | _hg010b_spin2_inttostr
23bfc     03 4A 05 F6 | 	mov	COUNT_, #3
23c00     A8 00 A0 FD | 	call	#pushregs_
23c04     09 27 0A F6 | 	mov	local01, arg01 wz
23c08                 | ' 
23c08                 | ' j:=i
23c08                 | ' pos:=10
23c08     0A 28 06 F6 | 	mov	local02, #10
23c0c                 | ' k:=0
23c0c     00 2A 06 F6 | 	mov	local03, #0
23c10                 | ' 
23c10                 | ' if (j==0)
23c10     18 00 90 5D |  if_ne	jmp	#LR__2840
23c14                 | '   n_string[0]:=48
23c14     4D E4 05 F1 | 	add	objptr, #77
23c18     F2 60 48 FC | 	wrbyte	#48, objptr
23c1c                 | '   n_string[1]:=0
23c1c     01 E4 05 F1 | 	add	objptr, #1
23c20     F2 00 48 FC | 	wrbyte	#0, objptr
23c24     4E E4 85 F1 | 	sub	objptr, #78
23c28     C4 00 90 FD | 	jmp	#LR__2847
23c2c                 | LR__2840
23c2c                 | ' 
23c2c                 | ' else
23c2c                 | '   if (j<0)
23c2c     13 27 52 F6 | 	abs	local01, local01 wc
23c30                 | '     j:=0-j
23c30                 | '     k:=45
23c30     2D 2A 06 C6 |  if_b	mov	local03, #45
23c34                 | ' 
23c34                 | '   n_string[11]:=0
23c34     58 E4 05 F1 | 	add	objptr, #88
23c38     F2 00 48 FC | 	wrbyte	#0, objptr
23c3c     58 E4 85 F1 | 	sub	objptr, #88
23c40     97 24 48 FB | 	callpa	#(@LR__2842-@LR__2841)>>2,fcache_load_ptr_
23c44                 | '   repeat while (pos>-1)
23c44                 | LR__2841
23c44     00 28 56 F2 | 	cmps	local02, #0 wc
23c48     40 00 90 CD |  if_b	jmp	#LR__2843
23c4c     13 FB 51 F6 | 	abs	result1, local01 wc
23c50     0A FA 15 FD | 	qdiv	result1, #10
23c54                 | '     q:=j//10
23c54     19 FA 61 FD | 	getqy	result1
23c58     FD FA 81 F6 | 	negc	result1, result1
23c5c     13 27 52 F6 | 	abs	local01, local01 wc
23c60     0A 26 16 FD | 	qdiv	local01, #10
23c64                 | '     q:=48+q
23c64     30 FA 05 F1 | 	add	result1, #48
23c68                 | '     n_string[pos]:=q
23c68     14 27 02 F6 | 	mov	local01, local02
23c6c     4D E4 05 F1 | 	add	objptr, #77
23c70     F2 26 02 F1 | 	add	local01, objptr
23c74     13 FB 41 FC | 	wrbyte	result1, local01
23c78                 | '     j:=j/10
23c78     4D E4 85 F1 | 	sub	objptr, #77
23c7c                 | '     pos-=1
23c7c     01 28 86 F1 | 	sub	local02, #1
23c80     18 26 62 FD | 	getqx	local01
23c84     13 27 82 F6 | 	negc	local01, local01
23c88     B8 FF 9F FD | 	jmp	#LR__2841
23c8c                 | LR__2842
23c8c                 | LR__2843
23c8c                 | '   repeat while n_string[0]==48
23c8c                 | LR__2844
23c8c     4D E4 05 F1 | 	add	objptr, #77
23c90     F2 16 C2 FA | 	rdbyte	arg03, objptr
23c94     4D E4 85 F1 | 	sub	objptr, #77
23c98     30 16 0E F2 | 	cmp	arg03, #48 wz
23c9c     20 00 90 5D |  if_ne	jmp	#LR__2845
23ca0                 | '     bytemove(@n_string,@n_string+1,12)
23ca0     4D E4 05 F1 | 	add	objptr, #77
23ca4     F2 12 02 F6 | 	mov	arg01, objptr
23ca8     F2 14 02 F6 | 	mov	arg02, objptr
23cac     4D E4 85 F1 | 	sub	objptr, #77
23cb0     01 14 06 F1 | 	add	arg02, #1
23cb4     0C 16 06 F6 | 	mov	arg03, #12
23cb8     38 11 B0 FD | 	call	#__system____builtin_memmove
23cbc     CC FF 9F FD | 	jmp	#LR__2844
23cc0                 | LR__2845
23cc0                 | ' 
23cc0                 | '   if k==45
23cc0     2D 2A 0E F2 | 	cmp	local03, #45 wz
23cc4     28 00 90 5D |  if_ne	jmp	#LR__2846
23cc8                 | '      bytemove(@n_string+1,@n_string,12)
23cc8     4D E4 05 F1 | 	add	objptr, #77
23ccc     F2 12 02 F6 | 	mov	arg01, objptr
23cd0     01 12 06 F1 | 	add	arg01, #1
23cd4     F2 14 02 F6 | 	mov	arg02, objptr
23cd8     4D E4 85 F1 | 	sub	objptr, #77
23cdc     0C 16 06 F6 | 	mov	arg03, #12
23ce0     10 11 B0 FD | 	call	#__system____builtin_memmove
23ce4                 | '      n_string[0]:=k
23ce4     4D E4 05 F1 | 	add	objptr, #77
23ce8     F2 2A 42 FC | 	wrbyte	local03, objptr
23cec     4D E4 85 F1 | 	sub	objptr, #77
23cf0                 | LR__2846
23cf0                 | LR__2847
23cf0                 | ' 
23cf0                 | ' q:=@n_string
23cf0     4D E4 05 F1 | 	add	objptr, #77
23cf4     F2 FA 01 F6 | 	mov	result1, objptr
23cf8     4D E4 85 F1 | 	sub	objptr, #77
23cfc                 | ' return q
23cfc     A7 F0 03 F6 | 	mov	ptra, fp
23d00     B2 00 A0 FD | 	call	#popregs_
23d04                 | _hg010b_spin2_inttostr_ret
23d04     2D 00 64 FD | 	ret
23d08                 | 
23d08                 | ' 
23d08                 | ' '**********************************************************************************
23d08                 | ' '
23d08                 | ' '        Blitting
23d08                 | ' '
23d08                 | ' '**********************************************************************************
23d08                 | ' 
23d08                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
23d08                 | _hg010b_spin2_blit
23d08     18 4A 05 F6 | 	mov	COUNT_, #24
23d0c     A8 00 A0 FD | 	call	#pushregs_
23d10     09 27 02 F6 | 	mov	local01, arg01
23d14     0A 29 02 F6 | 	mov	local02, arg02
23d18     0B 2B 02 F6 | 	mov	local03, arg03
23d1c     0C 2D 02 F6 | 	mov	local04, arg04
23d20     0D 2F 02 F6 | 	mov	local05, arg05
23d24     0E 31 02 F6 | 	mov	local06, arg06
23d28     0F 33 02 F6 | 	mov	local07, arg07
23d2c     10 35 02 F6 | 	mov	local08, arg08
23d30     11 37 02 F6 | 	mov	local09, arg09
23d34     12 39 02 F6 | 	mov	local10, arg10
23d38                 | ' 
23d38                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
23d38     00 04 00 FF 
23d3c     00 26 56 F2 | 	cmps	local01, ##524288 wc
23d40     00 04 00 3F 
23d44     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
23d48     7C 01 90 CD |  if_b	jmp	#LR__2854
23d4c     16 29 5A F2 | 	cmps	local02, local04 wcz
23d50     14 3B 02 16 |  if_a	mov	local11, local02
23d54     16 29 02 16 |  if_a	mov	local02, local04
23d58     1D 2D 02 16 |  if_a	mov	local04, local11
23d5c     17 2B 5A F2 | 	cmps	local03, local05 wcz
23d60     15 3B 02 16 |  if_a	mov	local11, local03
23d64     17 2B 02 16 |  if_a	mov	local03, local05
23d68     18 2B 02 FD | 	qmul	local03, local06
23d6c                 | '   if x1a>x2a
23d6c                 | '     x1a,x2a:=x2a,x1a
23d6c                 | '   if y1a>y2a
23d6c                 | '     y1a,y2a:=y2a,y1a  
23d6c     1D 2F 02 16 |  if_a	mov	local05, local11
23d70                 | ' 
23d70                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
23d70     19 3D 02 F6 | 	mov	local12, local07
23d74     14 3D 02 F1 | 	add	local12, local02
23d78     18 3A 62 FD | 	getqx	local11
23d7c     1C 37 02 FD | 	qmul	local09, local10
23d80     1D 3D 02 F1 | 	add	local12, local11
23d84     13 3F 02 F6 | 	mov	local13, local01
23d88     1A 3F 02 F1 | 	add	local13, local08
23d8c     18 3A 62 FD | 	getqx	local11
23d90     1D 3F 02 F1 | 	add	local13, local11
23d94     1F 3D 5A F2 | 	cmps	local12, local13 wcz
23d98     98 00 90 ED |  if_be	jmp	#LR__2851
23d9c                 | '     repeat y from y1a to y2a
23d9c     15 41 02 F6 | 	mov	local14, local03
23da0     15 2F 52 F2 | 	cmps	local05, local03 wc
23da4     01 42 86 F6 | 	negc	local15, #1
23da8     17 45 02 F6 | 	mov	local16, local05
23dac     21 45 02 F1 | 	add	local16, local15
23db0     0B 00 00 FF 
23db4     CC E4 05 F1 | 	add	objptr, ##5836
23db8                 | LR__2850
23db8     18 41 02 FD | 	qmul	local14, local06
23dbc                 | '   '    writeln(string("I am here"))
23dbc                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
23dbc     13 15 02 F6 | 	mov	arg02, local01
23dc0     16 17 02 F6 | 	mov	arg03, local04
23dc4     14 17 82 F1 | 	sub	arg03, local02
23dc8     01 16 06 F1 | 	add	arg03, #1
23dcc     F6 03 00 FF 
23dd0     00 12 06 F6 | 	mov	arg01, ##519168
23dd4     18 3E 62 FD | 	getqx	local13
23dd8     1F 15 02 F1 | 	add	arg02, local13
23ddc     14 15 02 F1 | 	add	arg02, local02
23de0     B0 04 B0 FD | 	call	#_psram_spin2_read1
23de4     1B 3F 02 F6 | 	mov	local13, local09
23de8     15 3F 82 F1 | 	sub	local13, local03
23dec     20 3F 02 F1 | 	add	local13, local14
23df0     1C 3F 02 FD | 	qmul	local13, local10
23df4                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
23df4     19 15 02 F6 | 	mov	arg02, local07
23df8     16 17 02 F6 | 	mov	arg03, local04
23dfc     14 17 82 F1 | 	sub	arg03, local02
23e00     01 16 06 F1 | 	add	arg03, #1
23e04     F6 03 00 FF 
23e08     00 12 06 F6 | 	mov	arg01, ##519168
23e0c     18 3E 62 FD | 	getqx	local13
23e10     1F 15 02 F1 | 	add	arg02, local13
23e14     1A 15 02 F1 | 	add	arg02, local08
23e18     14 05 B0 FD | 	call	#_psram_spin2_write
23e1c     21 41 02 F1 | 	add	local14, local15
23e20     22 41 0A F2 | 	cmp	local14, local16 wz
23e24     90 FF 9F 5D |  if_ne	jmp	#LR__2850
23e28     0B 00 00 FF 
23e2c     CC E4 85 F1 | 	sub	objptr, ##5836
23e30     94 00 90 FD | 	jmp	#LR__2853
23e34                 | LR__2851
23e34                 | '   else
23e34                 | '     repeat y from y2a to y1a
23e34     17 41 02 F6 | 	mov	local14, local05
23e38     17 2B 52 F2 | 	cmps	local03, local05 wc
23e3c     01 46 86 F6 | 	negc	local17, #1
23e40     15 49 02 F6 | 	mov	local18, local03
23e44     23 49 02 F1 | 	add	local18, local17
23e48     0B 00 00 FF 
23e4c     CC E4 05 F1 | 	add	objptr, ##5836
23e50                 | LR__2852
23e50     18 41 02 FD | 	qmul	local14, local06
23e54                 | '  '     writeln(string("I am there"))
23e54                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
23e54     13 15 02 F6 | 	mov	arg02, local01
23e58     16 17 02 F6 | 	mov	arg03, local04
23e5c     14 17 82 F1 | 	sub	arg03, local02
23e60     01 16 06 F1 | 	add	arg03, #1
23e64     F6 03 00 FF 
23e68     00 12 06 F6 | 	mov	arg01, ##519168
23e6c     18 44 62 FD | 	getqx	local16
23e70     22 15 02 F1 | 	add	arg02, local16
23e74     14 15 02 F1 | 	add	arg02, local02
23e78     18 04 B0 FD | 	call	#_psram_spin2_read1
23e7c     1B 45 02 F6 | 	mov	local16, local09
23e80     15 45 82 F1 | 	sub	local16, local03
23e84     20 45 02 F1 | 	add	local16, local14
23e88     1C 45 02 FD | 	qmul	local16, local10
23e8c                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
23e8c     19 15 02 F6 | 	mov	arg02, local07
23e90     16 17 02 F6 | 	mov	arg03, local04
23e94     14 17 82 F1 | 	sub	arg03, local02
23e98     01 16 06 F1 | 	add	arg03, #1
23e9c     F6 03 00 FF 
23ea0     00 12 06 F6 | 	mov	arg01, ##519168
23ea4     18 44 62 FD | 	getqx	local16
23ea8     22 15 02 F1 | 	add	arg02, local16
23eac     1A 15 02 F1 | 	add	arg02, local08
23eb0     7C 04 B0 FD | 	call	#_psram_spin2_write
23eb4     23 41 02 F1 | 	add	local14, local17
23eb8     24 41 0A F2 | 	cmp	local14, local18 wz
23ebc     90 FF 9F 5D |  if_ne	jmp	#LR__2852
23ec0     0B 00 00 FF 
23ec4     CC E4 85 F1 | 	sub	objptr, ##5836
23ec8                 | LR__2853
23ec8                 | LR__2854
23ec8                 | '     
23ec8                 | ' if ((f>=$80000) && (t<$80000)) 
23ec8     00 04 00 FF 
23ecc     00 26 56 F2 | 	cmps	local01, ##524288 wc
23ed0     80 00 90 CD |  if_b	jmp	#LR__2856
23ed4     00 04 00 FF 
23ed8     00 32 56 F2 | 	cmps	local07, ##524288 wc
23edc     74 00 90 3D |  if_ae	jmp	#LR__2856
23ee0                 | '   repeat y from y1a to y2a
23ee0     15 41 02 F6 | 	mov	local14, local03
23ee4     15 2F 52 F2 | 	cmps	local05, local03 wc
23ee8     01 4A 86 F6 | 	negc	local19, #1
23eec     17 4D 02 F6 | 	mov	local20, local05
23ef0     25 4D 02 F1 | 	add	local20, local19
23ef4     0B 00 00 FF 
23ef8     CC E4 05 F1 | 	add	objptr, ##5836
23efc                 | LR__2855
23efc     1B 49 02 F6 | 	mov	local18, local09
23f00     15 49 82 F1 | 	sub	local18, local03
23f04     20 49 02 F1 | 	add	local18, local14
23f08     1C 49 02 FD | 	qmul	local18, local10
23f0c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
23f0c     19 13 02 F6 | 	mov	arg01, local07
23f10     18 48 62 FD | 	getqx	local18
23f14     18 41 02 FD | 	qmul	local14, local06
23f18     24 13 02 F1 | 	add	arg01, local18
23f1c     1A 13 02 F1 | 	add	arg01, local08
23f20     13 15 02 F6 | 	mov	arg02, local01
23f24     16 17 02 F6 | 	mov	arg03, local04
23f28     14 17 82 F1 | 	sub	arg03, local02
23f2c     01 16 06 F1 | 	add	arg03, #1
23f30     18 48 62 FD | 	getqx	local18
23f34     24 15 02 F1 | 	add	arg02, local18
23f38     14 15 02 F1 | 	add	arg02, local02
23f3c     54 03 B0 FD | 	call	#_psram_spin2_read1
23f40     25 41 02 F1 | 	add	local14, local19
23f44     26 41 0A F2 | 	cmp	local14, local20 wz
23f48     B0 FF 9F 5D |  if_ne	jmp	#LR__2855
23f4c     0B 00 00 FF 
23f50     CC E4 85 F1 | 	sub	objptr, ##5836
23f54                 | LR__2856
23f54                 | '     
23f54                 | ' if ((f<$80000) && (t>=$80000)) 
23f54     00 04 00 FF 
23f58     00 26 56 F2 | 	cmps	local01, ##524288 wc
23f5c     84 00 90 3D |  if_ae	jmp	#LR__2858
23f60     00 04 00 FF 
23f64     00 32 56 F2 | 	cmps	local07, ##524288 wc
23f68     78 00 90 CD |  if_b	jmp	#LR__2858
23f6c                 | '   t:=t & $FFFFFFF
23f6c     7C 32 06 F4 | 	bitl	local07, #124
23f70                 | '   repeat y from y1a to y2a
23f70     15 41 02 F6 | 	mov	local14, local03
23f74     15 2F 52 F2 | 	cmps	local05, local03 wc
23f78     01 4E 86 F6 | 	negc	local21, #1
23f7c     17 51 02 F6 | 	mov	local22, local05
23f80     27 51 02 F1 | 	add	local22, local21
23f84     0B 00 00 FF 
23f88     CC E4 05 F1 | 	add	objptr, ##5836
23f8c                 | LR__2857
23f8c     18 41 02 FD | 	qmul	local14, local06
23f90                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23f90     13 13 02 F6 | 	mov	arg01, local01
23f94     1B 4D 02 F6 | 	mov	local20, local09
23f98     15 4D 82 F1 | 	sub	local20, local03
23f9c     20 4D 02 F1 | 	add	local20, local14
23fa0     18 4A 62 FD | 	getqx	local19
23fa4     1C 4D 02 FD | 	qmul	local20, local10
23fa8     25 13 02 F1 | 	add	arg01, local19
23fac     14 13 02 F1 | 	add	arg01, local02
23fb0     19 15 02 F6 | 	mov	arg02, local07
23fb4     16 17 02 F6 | 	mov	arg03, local04
23fb8     14 17 82 F1 | 	sub	arg03, local02
23fbc     01 16 06 F1 | 	add	arg03, #1
23fc0     18 4C 62 FD | 	getqx	local20
23fc4     26 15 02 F1 | 	add	arg02, local20
23fc8     1A 15 02 F1 | 	add	arg02, local08
23fcc     60 03 B0 FD | 	call	#_psram_spin2_write
23fd0     27 41 02 F1 | 	add	local14, local21
23fd4     28 41 0A F2 | 	cmp	local14, local22 wz
23fd8     B0 FF 9F 5D |  if_ne	jmp	#LR__2857
23fdc     0B 00 00 FF 
23fe0     CC E4 85 F1 | 	sub	objptr, ##5836
23fe4                 | LR__2858
23fe4                 | '     
23fe4                 | ' if ((f<$80000) && (t<$80000)) 
23fe4     00 04 00 FF 
23fe8     00 26 56 F2 | 	cmps	local01, ##524288 wc
23fec     00 04 00 CF 
23ff0     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
23ff4     64 00 90 3D |  if_ae	jmp	#LR__2860
23ff8                 | '   repeat y from y1a to y2a
23ff8     15 41 02 F6 | 	mov	local14, local03
23ffc     15 2F 52 F2 | 	cmps	local05, local03 wc
24000     01 52 86 F6 | 	negc	local23, #1
24004     17 55 02 F6 | 	mov	local24, local05
24008     29 55 02 F1 | 	add	local24, local23
2400c                 | LR__2859
2400c     18 41 02 FD | 	qmul	local14, local06
24010                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
24010     13 13 02 F6 | 	mov	arg01, local01
24014     1B 51 02 F6 | 	mov	local22, local09
24018     15 51 82 F1 | 	sub	local22, local03
2401c     20 51 02 F1 | 	add	local22, local14
24020     18 4E 62 FD | 	getqx	local21
24024     1C 51 02 FD | 	qmul	local22, local10
24028     27 13 02 F1 | 	add	arg01, local21
2402c     14 13 02 F1 | 	add	arg01, local02
24030     19 15 02 F6 | 	mov	arg02, local07
24034     16 17 02 F6 | 	mov	arg03, local04
24038     14 17 82 F1 | 	sub	arg03, local02
2403c     01 16 06 F1 | 	add	arg03, #1
24040     18 50 62 FD | 	getqx	local22
24044     28 15 02 F1 | 	add	arg02, local22
24048     1A 15 02 F1 | 	add	arg02, local08
2404c     A4 0D B0 FD | 	call	#__system____builtin_memmove
24050     29 41 02 F1 | 	add	local14, local23
24054     2A 41 0A F2 | 	cmp	local14, local24 wz
24058     B0 FF 9F 5D |  if_ne	jmp	#LR__2859
2405c                 | LR__2860
2405c     A7 F0 03 F6 | 	mov	ptra, fp
24060     B2 00 A0 FD | 	call	#popregs_
24064                 | _hg010b_spin2_blit_ret
24064     2D 00 64 FD | 	ret
24068                 | 
24068                 | ' 
24068                 | ' '..............................................................................
24068                 | ' 
24068                 | ' {{
24068                 | ' }}
24068                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
24068                 | _psram_spin2_startx
24068     04 4A 05 F6 | 	mov	COUNT_, #4
2406c     A8 00 A0 FD | 	call	#pushregs_
24070     09 27 02 F6 | 	mov	local01, arg01
24074     0B 29 02 F6 | 	mov	local02, arg03
24078     0C 2B 02 F6 | 	mov	local03, arg04
2407c                 | '     stop() ' restart driver if required
2407c     54 01 B0 FD | 	call	#_psram_spin2_stop
24080     00 26 0E F2 | 	cmp	local01, #0 wz
24084     14 26 06 AB |  if_e	rdlong	local01, #20
24088     13 15 52 F6 | 	abs	arg02, local01 wc
2408c     A1 07 00 FF 
24090     40 14 16 FD | 	qdiv	arg02, ##1000000
24094                 | ' 
24094                 | '     ' use current frequency if none specified
24094                 | ' 
24094                 | '     if freq == 0 
24094                 | '         freq := clkfreq 
24094                 | ' 
24094                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
24094                 | ' 
24094                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
24094                 | '     if burst < 0
24094                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
24094     18 14 62 FD | 	getqx	arg02
24098     0A 19 82 F6 | 	negc	arg04, arg02
2409c     03 18 66 F0 | 	shl	arg04, #3
240a0     84 18 86 F1 | 	sub	arg04, #132
240a4     04 18 46 F0 | 	shr	arg04, #4
240a8     04 18 66 F0 | 	shl	arg04, #4
240ac     00 18 56 F2 | 	cmps	arg04, #0 wc
240b0     0E FA 65 C6 |  if_b	neg	result1, #14
240b4     10 01 90 CD |  if_b	jmp	#LR__2873
240b8                 | ' 
240b8                 | '     ' compute the input delay
240b8                 | ' 
240b8                 | '     if delay <= 0
240b8     01 28 56 F2 | 	cmps	local02, #1 wc
240bc     10 00 90 3D |  if_ae	jmp	#LR__2870
240c0                 | '         delay := lookupDelay(freq)
240c0     13 13 02 F6 | 	mov	arg01, local01
240c4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
240c8     FD 28 02 F6 | 	mov	local02, result1
240cc     04 00 90 FD | 	jmp	#LR__2871
240d0                 | LR__2870
240d0                 | '     else
240d0                 | '         delay <#= $f ' limit to 15
240d0     0F 28 66 F3 | 	fles	local02, #15
240d4                 | LR__2871
240d4                 | ' 
240d4                 | '     ' create our lock
240d4                 | ' 
240d4                 | '     driverlock := LOCKNEW()  
240d4     00 FA 05 F6 | 	mov	result1, #0
240d8     04 FA 61 FD | 	locknew	result1
240dc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
240e0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
240e4                 | '     if driverlock == -1
240e4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
240e8     FF FF 7F FF 
240ec     FF FB 0D F2 | 	cmp	result1, ##-1 wz
240f0                 | '         return ERR_NO_LOCK
240f0     1A FA 65 A6 |  if_e	neg	result1, #26
240f4     D0 00 90 AD |  if_e	jmp	#LR__2873
240f8                 | ' 
240f8                 | '     ' patch in the proper data and HUB addresses to the startup structure
240f8                 | ' 
240f8                 | '     long[@startupData][0]:=clkfreq
240f8     14 26 06 FB | 	rdlong	local01, #20
240fc     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
24100     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
24104                 | ' '    long[@startupData][1]:=$1000_0000
24104                 | '     long[@startupData][5]:=@deviceData
24104     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
24108     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2410c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
24110     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
24114     14 14 06 F1 | 	add	arg02, #20
24118     0A 27 62 FC | 	wrlong	local01, arg02
2411c                 | '     long[@startupData][6]:=@qosData
2411c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
24120     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24124     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24128     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
2412c     18 14 06 F1 | 	add	arg02, #24
24130     0A 27 62 FC | 	wrlong	local01, arg02
24134                 | '     long[@startupData][7]:=$7FF00
24134     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
24138     1C 26 06 F1 | 	add	local01, #28
2413c     FF 03 80 FF 
24140     13 01 6A FC | 	wrlong	##524032, local01
24144                 | ' 
24144                 | '     ' setup some default bank and QoS parameter values
24144                 | ' 
24144                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
24144     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
24148     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
2414c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
24150     10 18 66 F0 | 	shl	arg04, #16
24154     0C 28 66 F0 | 	shl	local02, #12
24158     14 19 42 F5 | 	or	arg04, local02
2415c     18 18 46 F5 | 	or	arg04, #24
24160     0C 15 02 F6 | 	mov	arg02, arg04
24164     02 16 06 F6 | 	mov	arg03, #2
24168     A0 00 A0 FD | 	call	#\builtin_longfill_
2416c                 | '     longfill(@qosData, $FFFF0000, 8)
2416c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24170     07 16 06 F6 | 	mov	arg03, #7
24174     28 16 62 FD | 	setq	arg03
24178     80 FF FF FF 
2417c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
24180                 | ' 
24180                 | '     ' get the address of the PSRAM memory driver so we can start it
24180                 | ' 
24180                 | '     driverAddr:= driver.getDriverAddr()
24180                 | '     return @driver_start
24180     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
24184     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
24188     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2418c                 | ' 
2418c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2418c                 | ' 
2418c                 | '     if desiredcog < 0
2418c     00 2A 56 F2 | 	cmps	local03, #0 wc
24190                 | '         desiredcog := NEWCOG
24190     10 2A 06 C6 |  if_b	mov	local03, #16
24194                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
24194     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
24198     15 2D 02 F6 | 	mov	local04, local03
2419c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
241a0     0A 2D F2 FC | 	coginit	local04, arg02 wc
241a4     01 2C 66 C6 |  if_b	neg	local04, #1
241a8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
241ac     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
241b0                 | '     repeat until long[@startupData] == 0 
241b0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
241b4                 | LR__2872
241b4     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
241b8     F8 FF 9F 5D |  if_ne	jmp	#LR__2872
241bc                 | ' 
241bc                 | '     return drivercog
241bc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
241c0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
241c4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
241c8                 | LR__2873
241c8     A7 F0 03 F6 | 	mov	ptra, fp
241cc     B2 00 A0 FD | 	call	#popregs_
241d0                 | _psram_spin2_startx_ret
241d0     2D 00 64 FD | 	ret
241d4                 | 
241d4                 | ' 
241d4                 | ' '..............................................................................
241d4                 | ' 
241d4                 | ' {{
241d4                 | ' }}
241d4                 | ' PUB stop() : i
241d4                 | _psram_spin2_stop
241d4     00 00 06 F6 | 	mov	_var01, #0
241d8                 | '     if drivercog <> -1
241d8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
241dc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
241e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
241e4     FF FF 7F FF 
241e8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
241ec     70 00 90 AD |  if_e	jmp	#LR__2883
241f0                 | '         cogstop(drivercog) ' a rather brutal stop
241f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
241f4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
241f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
241fc     03 12 62 FD | 	cogstop	arg01
24200     97 26 48 FB | 	callpa	#(@LR__2882-@LR__2880)>>2,fcache_load_ptr_
24204                 | '         repeat i from 0 to 7
24204                 | LR__2880
24204                 | '             if long[$7FF00][i*3] < 0
24204     00 FB 01 F6 | 	mov	result1, _var01
24208     01 FA 65 F0 | 	shl	result1, #1
2420c     00 FB 01 F1 | 	add	result1, _var01
24210     02 FA 65 F0 | 	shl	result1, #2
24214     FF 03 00 FF 
24218     00 FB 05 F1 | 	add	result1, ##524032
2421c     FD FA 01 FB | 	rdlong	result1, result1
24220     00 FA 55 F2 | 	cmps	result1, #0 wc
24224     1C 00 90 3D |  if_ae	jmp	#LR__2881
24228                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
24228     00 FB 01 F6 | 	mov	result1, _var01
2422c     01 FA 65 F0 | 	shl	result1, #1
24230     00 FB 01 F1 | 	add	result1, _var01
24234     02 FA 65 F0 | 	shl	result1, #2
24238     FF 03 00 FF 
2423c     00 FB 05 F1 | 	add	result1, ##524032
24240     FD 20 68 FC | 	wrlong	#16, result1
24244                 | LR__2881
24244     01 00 06 F1 | 	add	_var01, #1
24248     08 00 56 F2 | 	cmps	_var01, #8 wc
2424c     B4 FF 9F CD |  if_b	jmp	#LR__2880
24250                 | LR__2882
24250                 | '         drivercog := -1
24250     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24254     FF FF FF FF 
24258     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2425c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24260                 | LR__2883
24260                 | '     if driverlock <> -1
24260     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
24264     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
24268     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2426c     FF FF 7F FF 
24270     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
24274                 | '         LOCKRET(driverlock)
24274     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
24278     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2427c     05 12 62 5D |  if_ne	lockret	arg01
24280                 | '         driverlock := -1
24280     FF FF FF 5F 
24284     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
24288     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2428c     00 FB 01 F6 | 	mov	result1, _var01
24290                 | _psram_spin2_stop_ret
24290     2D 00 64 FD | 	ret
24294                 | 
24294                 | ' 
24294                 | ' '..............................................................................
24294                 | ' 
24294                 | ' {{
24294                 | ' }}
24294                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
24294                 | _psram_spin2_read1
24294                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24294                 | '     if drivercog == -1 ' driver must be running
24294     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24298     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2429c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
242a0     FF FF 7F FF 
242a4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
242a8                 | '         return ERR_INACTIVE
242a8     0F FA 65 A6 |  if_e	neg	result1, #15
242ac     7C 00 90 AD |  if_e	jmp	#LR__2891
242b0                 | '     if count == 0 ' don't even bother reading
242b0     00 16 0E F2 | 	cmp	arg03, #0 wz
242b4                 | '         return 0
242b4     00 FA 05 A6 |  if_e	mov	result1, #0
242b8     70 00 90 AD |  if_e	jmp	#LR__2891
242bc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
242bc     00 FA 05 F6 | 	mov	result1, #0
242c0     01 FA 61 FD | 	cogid	result1
242c4     FD 00 02 F6 | 	mov	_var01, result1
242c8     01 00 66 F0 | 	shl	_var01, #1
242cc     FD 00 02 F1 | 	add	_var01, result1
242d0     02 00 66 F0 | 	shl	_var01, #2
242d4     FF 03 00 FF 
242d8     00 03 06 F6 | 	mov	_var02, ##524032
242dc     00 03 02 F1 | 	add	_var02, _var01
242e0                 | '     if long[mailbox] < 0
242e0     01 01 02 FB | 	rdlong	_var01, _var02
242e4     00 00 56 F2 | 	cmps	_var01, #0 wc
242e8                 | '         return ERR_MAILBOX_BUSY
242e8     1C FA 65 C6 |  if_b	neg	result1, #28
242ec     3C 00 90 CD |  if_b	jmp	#LR__2891
242f0                 | '     long[mailbox][2] := count
242f0     08 02 06 F1 | 	add	_var02, #8
242f4     01 17 62 FC | 	wrlong	arg03, _var02
242f8                 | '     long[mailbox][1] := dstHubAddr
242f8     04 02 86 F1 | 	sub	_var02, #4
242fc     01 13 62 FC | 	wrlong	arg01, _var02
24300     04 02 86 F1 | 	sub	_var02, #4
24304                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
24304     0A 05 02 F6 | 	mov	_var03, arg02
24308     D9 04 06 F4 | 	bitl	_var03, #217
2430c     00 00 58 FF 
24310     00 00 06 F6 | 	mov	_var01, ##-1342177280
24314     02 01 02 F1 | 	add	_var01, _var03
24318     01 01 62 FC | 	wrlong	_var01, _var02
2431c                 | '     repeat
2431c                 | LR__2890
2431c                 | '         result := long[mailbox]    
2431c     01 05 02 FB | 	rdlong	_var03, _var02
24320     00 04 56 F2 | 	cmps	_var03, #0 wc
24324     F4 FF 9F CD |  if_b	jmp	#LR__2890
24328                 | '     while result < 0   
24328                 | '     return -result                       'return success or error
24328     02 FB 61 F6 | 	neg	result1, _var03
2432c                 | LR__2891
2432c                 | _psram_spin2_read1_ret
2432c     2D 00 64 FD | 	ret
24330                 | 
24330                 | ' 
24330                 | ' '..............................................................................
24330                 | ' 
24330                 | ' {{
24330                 | ' }}
24330                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
24330                 | _psram_spin2_write
24330                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
24330                 | '     if drivercog == -1 ' driver must be running
24330     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24334     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
24338     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2433c     FF FF 7F FF 
24340     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
24344                 | '         return ERR_INACTIVE
24344     0F FA 65 A6 |  if_e	neg	result1, #15
24348     7C 00 90 AD |  if_e	jmp	#LR__2901
2434c                 | '     if count == 0 ' don't even bother writing
2434c     00 16 0E F2 | 	cmp	arg03, #0 wz
24350                 | '         return 0
24350     00 FA 05 A6 |  if_e	mov	result1, #0
24354     70 00 90 AD |  if_e	jmp	#LR__2901
24358                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
24358     00 FA 05 F6 | 	mov	result1, #0
2435c     01 FA 61 FD | 	cogid	result1
24360     FD 00 02 F6 | 	mov	_var01, result1
24364     01 00 66 F0 | 	shl	_var01, #1
24368     FD 00 02 F1 | 	add	_var01, result1
2436c     02 00 66 F0 | 	shl	_var01, #2
24370     FF 03 00 FF 
24374     00 03 06 F6 | 	mov	_var02, ##524032
24378     00 03 02 F1 | 	add	_var02, _var01
2437c                 | '     if long[mailbox] < 0
2437c     01 01 02 FB | 	rdlong	_var01, _var02
24380     00 00 56 F2 | 	cmps	_var01, #0 wc
24384                 | '         return ERR_MAILBOX_BUSY
24384     1C FA 65 C6 |  if_b	neg	result1, #28
24388     3C 00 90 CD |  if_b	jmp	#LR__2901
2438c                 | '     long[mailbox][2] := count
2438c     08 02 06 F1 | 	add	_var02, #8
24390     01 17 62 FC | 	wrlong	arg03, _var02
24394                 | '     long[mailbox][1] := srcHubAddr
24394     04 02 86 F1 | 	sub	_var02, #4
24398     01 13 62 FC | 	wrlong	arg01, _var02
2439c     04 02 86 F1 | 	sub	_var02, #4
243a0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
243a0     0A 05 02 F6 | 	mov	_var03, arg02
243a4     D9 04 06 F4 | 	bitl	_var03, #217
243a8     00 00 78 FF 
243ac     00 00 06 F6 | 	mov	_var01, ##-268435456
243b0     02 01 02 F1 | 	add	_var01, _var03
243b4     01 01 62 FC | 	wrlong	_var01, _var02
243b8                 | '     repeat
243b8                 | LR__2900
243b8                 | '         result := long[mailbox]    
243b8     01 05 02 FB | 	rdlong	_var03, _var02
243bc     00 04 56 F2 | 	cmps	_var03, #0 wc
243c0     F4 FF 9F CD |  if_b	jmp	#LR__2900
243c4                 | '     while result < 0   
243c4                 | '     return -result                       'return success or error
243c4     02 FB 61 F6 | 	neg	result1, _var03
243c8                 | LR__2901
243c8                 | _psram_spin2_write_ret
243c8     2D 00 64 FD | 	ret
243cc                 | 
243cc                 | ' 
243cc                 | ' ' generalized fill
243cc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
243cc                 | _psram_spin2_fill
243cc     09 01 02 F6 | 	mov	_var01, arg01
243d0     0A 03 02 F6 | 	mov	_var02, arg02
243d4     0B 05 02 F6 | 	mov	_var03, arg03
243d8     0D 07 02 F6 | 	mov	_var04, arg05
243dc                 | '     case datasize 
243dc     01 06 86 F1 | 	sub	_var04, #1
243e0     04 06 26 F3 | 	fle	_var04, #4
243e4     30 06 62 FD | 	jmprel	_var04
243e8                 | LR__2910
243e8     10 00 90 FD | 	jmp	#LR__2911
243ec     18 00 90 FD | 	jmp	#LR__2912
243f0     2C 00 90 FD | 	jmp	#LR__2914
243f4     1C 00 90 FD | 	jmp	#LR__2913
243f8     24 00 90 FD | 	jmp	#LR__2914
243fc                 | LR__2911
243fc                 | '         1: req := driver.R_WRITEBYTE
243fc     00 00 60 FF 
24400     00 08 06 F6 | 	mov	_var05, ##-1073741824
24404     20 00 90 FD | 	jmp	#LR__2915
24408                 | LR__2912
24408                 | '         2: req := driver.R_WRITEWORD
24408     00 00 68 FF 
2440c     00 08 06 F6 | 	mov	_var05, ##-805306368
24410     14 00 90 FD | 	jmp	#LR__2915
24414                 | LR__2913
24414                 | '         4: req := driver.R_WRITELONG
24414     00 00 70 FF 
24418     00 08 06 F6 | 	mov	_var05, ##-536870912
2441c     08 00 90 FD | 	jmp	#LR__2915
24420                 | LR__2914
24420                 | '         other : return ERR_INVALID
24420     06 FA 65 F6 | 	neg	result1, #6
24424     94 00 90 FD | 	jmp	#LR__2917
24428                 | LR__2915
24428                 | '     if count == 0   ' nothing to do
24428     00 04 0E F2 | 	cmp	_var03, #0 wz
2442c                 | '         return 0
2442c     00 FA 05 A6 |  if_e	mov	result1, #0
24430     88 00 90 AD |  if_e	jmp	#LR__2917
24434                 | '     if drivercog == -1
24434     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
24438     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2443c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
24440     FF FF 7F FF 
24444     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
24448                 | '         return ERR_INACTIVE
24448     0F FA 65 A6 |  if_e	neg	result1, #15
2444c     6C 00 90 AD |  if_e	jmp	#LR__2917
24450                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
24450     00 FA 05 F6 | 	mov	result1, #0
24454     01 FA 61 FD | 	cogid	result1
24458     FD 06 02 F6 | 	mov	_var04, result1
2445c     01 06 66 F0 | 	shl	_var04, #1
24460     FD 06 02 F1 | 	add	_var04, result1
24464     02 06 66 F0 | 	shl	_var04, #2
24468     FF 03 00 FF 
2446c     00 0B 06 F6 | 	mov	_var06, ##524032
24470     03 0B 02 F1 | 	add	_var06, _var04
24474                 | '     if long[mailbox] < 0
24474     05 07 02 FB | 	rdlong	_var04, _var06
24478     00 06 56 F2 | 	cmps	_var04, #0 wc
2447c                 | '         return ERR_MAILBOX_BUSY
2447c     1C FA 65 C6 |  if_b	neg	result1, #28
24480     38 00 90 CD |  if_b	jmp	#LR__2917
24484                 | '     long[mailbox][2] := count
24484     08 0A 06 F1 | 	add	_var06, #8
24488     05 05 62 FC | 	wrlong	_var03, _var06
2448c                 | '     long[mailbox][1] := pattern
2448c     04 0A 86 F1 | 	sub	_var06, #4
24490     05 03 62 FC | 	wrlong	_var02, _var06
24494     04 0A 86 F1 | 	sub	_var06, #4
24498                 | '     long[mailbox] := req + (addr & $1ffffff)
24498     04 0D 02 F6 | 	mov	_var07, _var05
2449c     00 0F 02 F6 | 	mov	_var08, _var01
244a0     D9 0E 06 F4 | 	bitl	_var08, #217
244a4     07 0D 02 F1 | 	add	_var07, _var08
244a8     05 0D 62 FC | 	wrlong	_var07, _var06
244ac                 | '     repeat
244ac                 | LR__2916
244ac                 | '         r := long[mailbox]
244ac     05 0F 02 FB | 	rdlong	_var08, _var06
244b0     00 0E 56 F2 | 	cmps	_var08, #0 wc
244b4     F4 FF 9F CD |  if_b	jmp	#LR__2916
244b8                 | '     while r < 0
244b8                 | '     return -r                  ' return 0 for success or negated error code
244b8     07 FB 61 F6 | 	neg	result1, _var08
244bc                 | LR__2917
244bc                 | _psram_spin2_fill_ret
244bc     2D 00 64 FD | 	ret
244c0                 | 
244c0                 | ' 
244c0                 | ' '..............................................................................
244c0                 | ' 
244c0                 | ' {{
244c0                 | ' }}
244c0                 | ' PUB setQos(cog, qos) : result | mailbox
244c0                 | _psram_spin2_setQos
244c0     09 01 02 F6 | 	mov	_var01, arg01
244c4                 | '     if drivercog == -1 ' driver must be running
244c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
244c8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
244cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
244d0     FF FF 7F FF 
244d4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
244d8                 | '         return ERR_INACTIVE
244d8     0F FA 65 A6 |  if_e	neg	result1, #15
244dc     9C 00 90 AD |  if_e	jmp	#LR__2924
244e0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
244e0     00 00 56 F2 | 	cmps	_var01, #0 wc
244e4     08 00 90 CD |  if_b	jmp	#LR__2920
244e8     08 00 56 F2 | 	cmps	_var01, #8 wc
244ec     08 00 90 CD |  if_b	jmp	#LR__2921
244f0                 | LR__2920
244f0                 | '         return ERR_INVALID
244f0     06 FA 65 F6 | 	neg	result1, #6
244f4     84 00 90 FD | 	jmp	#LR__2924
244f8                 | LR__2921
244f8                 | '     long[@qosData][cog] := qos & !$1ff
244f8     FF 15 26 F5 | 	andn	arg02, #511
244fc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
24500     02 00 66 F0 | 	shl	_var01, #2
24504     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
24508     00 15 62 FC | 	wrlong	arg02, _var01
2450c                 | '     mailbox := $7FF00 + drivercog*12
2450c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
24510     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
24514     02 07 02 F6 | 	mov	_var04, _var03
24518     01 06 66 F0 | 	shl	_var04, #1
2451c     02 07 02 F1 | 	add	_var04, _var03
24520     02 06 66 F0 | 	shl	_var04, #2
24524     FF 03 00 FF 
24528     00 09 06 F6 | 	mov	_var05, ##524032
2452c     03 09 02 F1 | 	add	_var05, _var04
24530                 | '     repeat until LOCKTRY(driverlock)
24530     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
24534                 | LR__2922
24534     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24538     06 12 72 FD | 	locktry	arg01 wc
2453c     F4 FF 9F 3D |  if_ae	jmp	#LR__2922
24540     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24544                 | '     long[mailbox] := driver.R_CONFIG + cogid()
24544     00 06 06 F6 | 	mov	_var04, #0
24548     01 06 62 FD | 	cogid	_var04
2454c     00 00 78 FF 
24550     00 02 06 F6 | 	mov	_var02, ##-268435456
24554     03 03 02 F1 | 	add	_var02, _var04
24558     04 03 62 FC | 	wrlong	_var02, _var05
2455c                 | '     repeat while long[mailbox] < 0
2455c                 | LR__2923
2455c     04 03 02 FB | 	rdlong	_var02, _var05
24560     00 02 56 F2 | 	cmps	_var02, #0 wc
24564     F4 FF 9F CD |  if_b	jmp	#LR__2923
24568                 | '     LOCKREL(driverlock)
24568     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2456c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
24570     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
24574     07 12 72 FD | 	lockrel	arg01 wc
24578     00 FA 05 F6 | 	mov	result1, #0
2457c                 | LR__2924
2457c                 | _psram_spin2_setQos_ret
2457c     2D 00 64 FD | 	ret
24580                 | 
24580                 | ' 
24580                 | ' '..............................................................................
24580                 | ' 
24580                 | ' {{
24580                 | ' }}
24580                 | ' PRI lookupDelay(freq) : delay | profile
24580                 | _psram_spin2_lookupDelay
24580                 | '     profile := @delayTable
24580     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
24584     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
24588                 | '     delay := long[profile][0]
24588     00 03 02 FB | 	rdlong	_var02, _var01
2458c                 | '     repeat while long[profile][1] 
2458c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
24590     97 16 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
24594                 | LR__2930
24594     04 00 06 F1 | 	add	_var01, #4
24598     00 FB 09 FB | 	rdlong	result1, _var01 wz
2459c     04 00 86 F1 | 	sub	_var01, #4
245a0     1C 00 90 AD |  if_e	jmp	#LR__2932
245a4                 | '         if freq +< long[profile][1] 
245a4     04 00 06 F1 | 	add	_var01, #4
245a8     00 FB 01 FB | 	rdlong	result1, _var01
245ac     04 00 86 F1 | 	sub	_var01, #4
245b0     FD 12 12 F2 | 	cmp	arg01, result1 wc
245b4                 | '             quit
245b4                 | '         profile += 4
245b4     04 00 06 31 |  if_ae	add	_var01, #4
245b8                 | '         delay++
245b8     01 02 06 31 |  if_ae	add	_var02, #1
245bc     D4 FF 9F 3D |  if_ae	jmp	#LR__2930
245c0                 | LR__2931
245c0                 | LR__2932
245c0     01 FB 01 F6 | 	mov	result1, _var02
245c4                 | _psram_spin2_lookupDelay_ret
245c4     2D 00 64 FD | 	ret
245c8                 | 
245c8                 | ' 
245c8                 | ' PUB start() : r
245c8                 | _usbnew_spin2_start
245c8     00 00 06 F6 | 	mov	_var01, #0
245cc                 | '   ifnot driver_cog
245cc     15 00 00 FF 
245d0     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
245d4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
245d8     15 00 00 FF 
245dc     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
245e0     38 00 90 5D |  if_ne	jmp	#LR__2940
245e4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
245e4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
245e8     10 00 06 F6 | 	mov	_var01, #16
245ec     00 16 06 F6 | 	mov	arg03, #0
245f0     28 16 62 FD | 	setq	arg03
245f4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
245f8     01 00 66 C6 |  if_b	neg	_var01, #1
245fc                 | '     if r >= 0
245fc     00 00 56 F2 | 	cmps	_var01, #0 wc
24600                 | '       driver_cog := r+1
24600     00 03 02 36 |  if_ae	mov	_var02, _var01
24604     01 02 06 31 |  if_ae	add	_var02, #1
24608     15 00 00 3F 
2460c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
24610     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
24614     15 00 00 3F 
24618     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
2461c                 | LR__2940
2461c     00 FB 01 F6 | 	mov	result1, _var01
24620                 | _usbnew_spin2_start_ret
24620     2D 00 64 FD | 	ret
24624                 | 
24624                 | '     '' (Always enabled)
24624                 | ' 
24624                 | ' '' Get current pressed state of a keyboard key
24624                 | ' PUB keystate(key) : r | buf[2],tmp
24624                 | _usbnew_spin2_keystate
24624     00 04 06 F6 | 	mov	_var03, #0
24628                 | '   if key >= $E0 && key < $E8
24628     E0 12 56 F2 | 	cmps	arg01, #224 wc
2462c     34 00 90 CD |  if_b	jmp	#LR__2950
24630     E8 12 56 F2 | 	cmps	arg01, #232 wc
24634     2C 00 90 3D |  if_ae	jmp	#LR__2950
24638                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
24638     00 FA 05 F6 | 	mov	result1, #0
2463c     13 00 00 FF 
24640     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
24644     09 07 02 F6 | 	mov	_var04, arg01
24648     E0 06 86 F1 | 	sub	_var04, #224
2464c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
24650     03 09 4A F0 | 	shr	_var05, _var04 wz
24654     13 00 00 FF 
24658     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2465c     01 FA 65 56 |  if_ne	neg	result1, #1
24660     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
24664                 | LR__2950
24664                 | '   else
24664                 | '     '' Do this in inline ASM to ensure atomicity
24664                 | '     tmp := @hkbd_report
24664     13 00 00 FF 
24668     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
2466c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
24670                 | '     org
24670     13 00 00 FF 
24674     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
24678     97 1E 48 FB | 	callpa	#(@LR__2952-@LR__2951)>>2,fcache_load_ptr_
2467c                 | LR__2951
2467c 000             | 	org	0
2467c 000 28 02 64 FD | 	setq	#1
24680 001 04 01 02 FB | 	rdlong	_var01, _var05
24684 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
24688 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
2468c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
24690 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
24694 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
24698 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2469c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
246a0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
246a4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
246a8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
246ac 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
246b0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
246b4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
246b8 00f             | LR__2952
246b8                 | 	orgh
246b8     02 FB 01 F6 | 	mov	result1, _var03
246bc                 | _usbnew_spin2_keystate_ret
246bc     2D 00 64 FD | 	ret
246c0                 | 
246c0                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
246c0                 | ' 
246c0                 | ' '' Return key event from buffer if there is one
246c0                 | ' PUB get_key() : r | tail
246c0                 | _usbnew_spin2_get_key
246c0                 | '   tail := keyq_tail
246c0     0F 00 00 FF 
246c4     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
246c8     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
246cc                 | '   if keyq_head == tail
246cc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
246d0     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
246d4     0F 00 00 FF 
246d8     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
246dc     00 03 0A F2 | 	cmp	_var02, _var01 wz
246e0                 | '     return 0 ' No event
246e0     00 FA 05 A6 |  if_e	mov	result1, #0
246e4     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
246e8                 | '   r := keyq_data[tail]
246e8     00 03 02 F6 | 	mov	_var02, _var01
246ec     02 02 66 F0 | 	shl	_var02, #2
246f0     0F 00 00 FF 
246f4     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
246f8     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
246fc     01 FB 01 FB | 	rdlong	result1, _var02
24700                 | '   if ++tail == KEYQUEUE_SIZE
24700     01 00 06 F1 | 	add	_var01, #1
24704     80 00 0E F2 | 	cmp	_var01, #128 wz
24708                 | '     tail := 0
24708     00 00 06 A6 |  if_e	mov	_var01, #0
2470c                 | '   keyq_tail := tail
2470c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
24710     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
24714     0F 00 00 FF 
24718     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
2471c                 | _usbnew_spin2_get_key_ret
2471c     2D 00 64 FD | 	ret
24720                 | 
24720                 | ' 
24720                 | ' '' Emulate mouse movement
24720                 | ' PUB mouse_move(x,y)
24720                 | _usbnew_spin2_mouse_move
24720     02 4A 05 F6 | 	mov	COUNT_, #2
24724     A8 00 A0 FD | 	call	#pushregs_
24728     09 27 02 F6 | 	mov	local01, arg01
2472c     0A 29 02 F6 | 	mov	local02, arg02
24730                 | '   mouse_lock := 1
24730     14 00 00 FF 
24734     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
24738     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2473c     14 00 00 FF 
24740     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
24744                 | '   waitus(2) ' hope driver is now done
24744     02 12 06 F6 | 	mov	arg01, #2
24748     E8 0A B0 FD | 	call	#__system___waitus
2474c                 | '   mouse_xacc := x
2474c     14 00 00 FF 
24750     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
24754     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
24758                 | '   mouse_yacc := y
24758     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2475c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
24760                 | '   if mouse_outptr
24760     04 00 00 FF 
24764     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
24768     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2476c     0F 00 00 FF 
24770     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
24774     24 00 90 AD |  if_e	jmp	#LR__2960
24778                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
24778     10 28 66 F0 | 	shl	local02, #16
2477c     13 27 32 F9 | 	getword	local01, local01, #0
24780     13 29 42 F5 | 	or	local02, local01
24784     0F 00 00 FF 
24788     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
2478c     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
24790     0F 00 00 FF 
24794     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
24798     13 29 62 FC | 	wrlong	local02, local01
2479c                 | LR__2960
2479c                 | '   mouse_lock := 0
2479c     14 00 00 FF 
247a0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
247a4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
247a8     14 00 00 FF 
247ac     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
247b0     A7 F0 03 F6 | 	mov	ptra, fp
247b4     B2 00 A0 FD | 	call	#popregs_
247b8                 | _usbnew_spin2_mouse_move_ret
247b8     2D 00 64 FD | 	ret
247bc                 | 
247bc                 | '     '' Set HAVE_HIDPAD to enable.
247bc                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
247bc                 | ' 
247bc                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
247bc                 | ' PUB hidpad_id(dev) : r
247bc                 | _usbnew_spin2_hidpad_id
247bc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
247bc     13 00 00 FF 
247c0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
247c4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
247c8     09 01 02 F6 | 	mov	_var01, arg01
247cc     03 00 66 F0 | 	shl	_var01, #3
247d0     09 01 82 F1 | 	sub	_var01, arg01
247d4     02 00 66 F0 | 	shl	_var01, #2
247d8     00 FB 01 F1 | 	add	result1, _var01
247dc     FD FA 01 FB | 	rdlong	result1, result1
247e0     13 00 00 FF 
247e4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
247e8                 | _usbnew_spin2_hidpad_id_ret
247e8     2D 00 64 FD | 	ret
247ec                 | 
247ec                 | ' 
247ec                 | ' '' Get all button states for a device
247ec                 | ' PUB hidpad_buttons(dev) : r 
247ec                 | _usbnew_spin2_hidpad_buttons
247ec                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
247ec     13 00 00 FF 
247f0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
247f4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
247f8     09 01 02 F6 | 	mov	_var01, arg01
247fc     03 00 66 F0 | 	shl	_var01, #3
24800     09 01 82 F1 | 	sub	_var01, arg01
24804     02 00 66 F0 | 	shl	_var01, #2
24808     00 FB 01 F1 | 	add	result1, _var01
2480c     14 FA 05 F1 | 	add	result1, #20
24810     FD FA 01 FB | 	rdlong	result1, result1
24814     13 00 00 FF 
24818     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2481c                 | _usbnew_spin2_hidpad_buttons_ret
2481c     2D 00 64 FD | 	ret
24820                 | 
24820                 | ' 
24820                 | ' '' Get state of an axis (normalized between -32768 and 32767)
24820                 | ' PUB hidpad_axis(dev,axnum) : r
24820                 | _usbnew_spin2_hidpad_axis
24820                 | '   if axnum +>= 6
24820     06 14 16 F2 | 	cmp	arg02, #6 wc
24824                 | '     return 0
24824     00 FA 05 36 |  if_ae	mov	result1, #0
24828     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2482c                 | '   else 
2482c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2482c     13 00 00 FF 
24830     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
24834     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
24838     09 01 02 F6 | 	mov	_var01, arg01
2483c     03 00 66 F0 | 	shl	_var01, #3
24840     09 01 82 F1 | 	sub	_var01, arg01
24844     02 00 66 F0 | 	shl	_var01, #2
24848     00 FB 01 F1 | 	add	result1, _var01
2484c     04 00 06 F6 | 	mov	_var01, #4
24850     0A 01 02 F1 | 	add	_var01, arg02
24854     01 00 66 F0 | 	shl	_var01, #1
24858     FD 00 02 F1 | 	add	_var01, result1
2485c     00 FB E1 FA | 	rdword	result1, _var01
24860     0F FA 65 F7 | 	signx	result1, #15
24864     13 00 00 FF 
24868     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2486c                 | _usbnew_spin2_hidpad_axis_ret
2486c     2D 00 64 FD | 	ret
24870                 | 
24870                 | ' 
24870                 | ' 
24870                 | ' '--------------------------------------------------------------
24870                 | ' '---------- Init the variables, start the cog. ----------------
24870                 | ' '--------------------------------------------------------------
24870                 | ' 
24870                 | ' pub start(mbox,scope,cache) :cog,base | iii
24870                 | _audio096_spin2_start
24870     04 4A 05 F6 | 	mov	COUNT_, #4
24874     A8 00 A0 FD | 	call	#pushregs_
24878     09 27 02 F6 | 	mov	local01, arg01
2487c                 | ' 
2487c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
2487c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
2487c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
2487c                 | ' 
2487c                 | ' mailboxaddr:=mbox 
2487c     F2 26 62 FC | 	wrlong	local01, objptr
24880                 | ' scope_ptr:=scope
24880     04 E4 05 F1 | 	add	objptr, #4
24884     F2 14 62 FC | 	wrlong	arg02, objptr
24888                 | ' cache_ptr:=cache
24888     04 E4 05 F1 | 	add	objptr, #4
2488c     F2 16 62 FC | 	wrlong	arg03, objptr
24890                 | ' base:=@channel1[0]
24890     04 E4 05 F1 | 	add	objptr, #4
24894     F2 28 02 F6 | 	mov	local02, objptr
24898                 | ' long[$40]:=mbox
24898     40 26 66 FC | 	wrlong	local01, #64
2489c                 | ' repeat iii from 0 to 7
2489c     00 2A 06 F6 | 	mov	local03, #0
248a0     02 00 00 FF 
248a4     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
248a8     0C E4 85 F1 | 	sub	objptr, #12
248ac     97 BC 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
248b0                 | LR__2970
248b0                 | '   long[base+64*iii]:=0
248b0     14 27 02 F6 | 	mov	local01, local02
248b4     15 FD 01 F6 | 	mov	result2, local03
248b8     06 FC 65 F0 | 	shl	result2, #6
248bc     FE 26 02 F1 | 	add	local01, result2
248c0     13 01 68 FC | 	wrlong	#0, local01
248c4                 | '   long[base+64*iii+4]:=0
248c4     14 27 02 F6 | 	mov	local01, local02
248c8     15 FD 01 F6 | 	mov	result2, local03
248cc     06 FC 65 F0 | 	shl	result2, #6
248d0     FE 26 02 F1 | 	add	local01, result2
248d4     04 26 06 F1 | 	add	local01, #4
248d8     13 01 68 FC | 	wrlong	#0, local01
248dc                 | '   long[base+64*iii+12]:=0
248dc     14 2D 02 F6 | 	mov	local04, local02
248e0     15 27 02 F6 | 	mov	local01, local03
248e4     06 26 66 F0 | 	shl	local01, #6
248e8     13 2D 02 F1 | 	add	local04, local01
248ec     0C 2C 06 F1 | 	add	local04, #12
248f0     16 01 68 FC | 	wrlong	#0, local04
248f4                 | '   long[base+64*iii+16]:=2 
248f4     14 2D 02 F6 | 	mov	local04, local02
248f8     15 27 02 F6 | 	mov	local01, local03
248fc     06 26 66 F0 | 	shl	local01, #6
24900     13 2D 02 F1 | 	add	local04, local01
24904     10 2C 06 F1 | 	add	local04, #16
24908     16 05 68 FC | 	wrlong	#2, local04
2490c                 | '   word[base+64*iii+20]:=0
2490c     14 2D 02 F6 | 	mov	local04, local02
24910     15 27 02 F6 | 	mov	local01, local03
24914     06 26 66 F0 | 	shl	local01, #6
24918     13 2D 02 F1 | 	add	local04, local01
2491c     14 2C 06 F1 | 	add	local04, #20
24920     16 01 58 FC | 	wrword	#0, local04
24924                 | '   word[base+64*iii+22]:=8192
24924     14 2D 02 F6 | 	mov	local04, local02
24928     15 27 02 F6 | 	mov	local01, local03
2492c     06 26 66 F0 | 	shl	local01, #6
24930     13 2D 02 F1 | 	add	local04, local01
24934     16 2C 06 F1 | 	add	local04, #22
24938     10 00 80 FF 
2493c     16 01 58 FC | 	wrword	##8192, local04
24940                 | '   word[base+64*iii+24]:=4000+2*iii
24940     15 2D 02 F6 | 	mov	local04, local03
24944     01 2C 66 F0 | 	shl	local04, #1
24948     07 00 00 FF 
2494c     A0 27 06 F6 | 	mov	local01, ##4000
24950     16 27 02 F1 | 	add	local01, local04
24954     14 2D 02 F6 | 	mov	local04, local02
24958     15 FD 01 F6 | 	mov	result2, local03
2495c     06 FC 65 F0 | 	shl	result2, #6
24960     FE 2C 02 F1 | 	add	local04, result2
24964     18 2C 06 F1 | 	add	local04, #24
24968     16 27 52 FC | 	wrword	local01, local04
2496c                 | '   word[base+64*iii+26]:=2
2496c     14 2D 02 F6 | 	mov	local04, local02
24970     15 27 02 F6 | 	mov	local01, local03
24974     06 26 66 F0 | 	shl	local01, #6
24978     13 2D 02 F1 | 	add	local04, local01
2497c     1A 2C 06 F1 | 	add	local04, #26
24980     16 05 58 FC | 	wrword	#2, local04
24984                 | '   long [base+64*iii+8]:=@null | $C0000000
24984     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
24988     3E 26 26 F4 | 	bith	local01, #62
2498c     14 2D 02 F6 | 	mov	local04, local02
24990     15 17 02 F6 | 	mov	arg03, local03
24994     06 16 66 F0 | 	shl	arg03, #6
24998     0B 2D 02 F1 | 	add	local04, arg03
2499c     08 2C 06 F1 | 	add	local04, #8
249a0     16 27 62 FC | 	wrlong	local01, local04
249a4                 | '   long[base+64*iii+32]:=0
249a4     14 2D 02 F6 | 	mov	local04, local02
249a8     15 27 02 F6 | 	mov	local01, local03
249ac     06 26 66 F0 | 	shl	local01, #6
249b0     13 2D 02 F1 | 	add	local04, local01
249b4     20 2C 06 F1 | 	add	local04, #32
249b8     16 01 68 FC | 	wrlong	#0, local04
249bc                 | '   long[base+64*iii+36]:=0
249bc     14 2D 02 F6 | 	mov	local04, local02
249c0     15 27 02 F6 | 	mov	local01, local03
249c4     06 26 66 F0 | 	shl	local01, #6
249c8     13 2D 02 F1 | 	add	local04, local01
249cc     24 2C 06 F1 | 	add	local04, #36
249d0     16 01 68 FC | 	wrlong	#0, local04
249d4                 | '   long[base+64*iii+40]:=0
249d4     14 2D 02 F6 | 	mov	local04, local02
249d8     15 27 02 F6 | 	mov	local01, local03
249dc     06 26 66 F0 | 	shl	local01, #6
249e0     13 2D 02 F1 | 	add	local04, local01
249e4     28 2C 06 F1 | 	add	local04, #40
249e8     16 01 68 FC | 	wrlong	#0, local04
249ec                 | '   long[base+64*iii+44]:=0
249ec     14 2D 02 F6 | 	mov	local04, local02
249f0     15 27 02 F6 | 	mov	local01, local03
249f4     06 26 66 F0 | 	shl	local01, #6
249f8     13 2D 02 F1 | 	add	local04, local01
249fc     2C 2C 06 F1 | 	add	local04, #44
24a00     16 01 68 FC | 	wrlong	#0, local04
24a04                 | '   long[base+64*iii+28]:=0
24a04     14 2D 02 F6 | 	mov	local04, local02
24a08     15 27 02 F6 | 	mov	local01, local03
24a0c     06 26 66 F0 | 	shl	local01, #6
24a10     13 2D 02 F1 | 	add	local04, local01
24a14     1C 2C 06 F1 | 	add	local04, #28
24a18     16 01 68 FC | 	wrlong	#0, local04
24a1c     01 2A 06 F1 | 	add	local03, #1
24a20     08 2A 56 F2 | 	cmps	local03, #8 wc
24a24     88 FE 9F CD |  if_b	jmp	#LR__2970
24a28                 | LR__2971
24a28     02 00 00 FF 
24a2c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
24a30                 | '   
24a30                 | ' cog:=coginit(16,@audio,@mailboxaddr)
24a30     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
24a34     F2 16 02 F6 | 	mov	arg03, objptr
24a38     10 2C 06 F6 | 	mov	local04, #16
24a3c     28 16 62 FD | 	setq	arg03
24a40     0A 2D F2 FC | 	coginit	local04, arg02 wc
24a44     01 2C 66 C6 |  if_b	neg	local04, #1
24a48                 | ' waitms(100)
24a48     64 12 06 F6 | 	mov	arg01, #100
24a4c     78 07 B0 FD | 	call	#__system___waitms
24a50                 | ' return cog,base
24a50     14 FD 01 F6 | 	mov	result2, local02
24a54     16 FB 01 F6 | 	mov	result1, local04
24a58     A7 F0 03 F6 | 	mov	ptra, fp
24a5c     B2 00 A0 FD | 	call	#popregs_
24a60                 | _audio096_spin2_start_ret
24a60     2D 00 64 FD | 	ret
24a64                 | 
24a64                 | ' 
24a64                 | ' ' a simple play procedure to not poke everything. 
24a64                 | ' 
24a64                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
24a64                 | _audio096_spin2_play
24a64     0C E4 05 F1 | 	add	objptr, #12
24a68     F2 00 02 F6 | 	mov	_var01, objptr
24a6c     06 12 66 F0 | 	shl	arg01, #6
24a70     09 01 02 F1 | 	add	_var01, arg01
24a74     00 13 02 F6 | 	mov	arg01, _var01
24a78     0C 12 06 F1 | 	add	arg01, #12
24a7c     09 1B 62 FC | 	wrlong	arg05, arg01
24a80     00 1C 56 F2 | 	cmps	arg06, #0 wc
24a84     00 13 02 36 |  if_ae	mov	arg01, _var01
24a88     10 12 06 31 |  if_ae	add	arg01, #16
24a8c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
24a90     02 1A 06 C1 |  if_b	add	arg05, #2
24a94     00 13 02 C6 |  if_b	mov	arg01, _var01
24a98     10 12 06 C1 |  if_b	add	arg01, #16
24a9c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
24aa0     0B 13 52 F6 | 	abs	arg01, arg03 wc
24aa4     0F 1B 80 FF 
24aa8     09 1F 1A FD | 	qdiv	##3546895, arg01
24aac                 | ' 
24aac                 | ' base2:=@channel1[0]+64*channel
24aac                 | ' 
24aac                 | ' 
24aac                 | ' long[base2+12]:= len
24aac                 | ' if loop >=0 
24aac                 | '   long[base2+16]:= loop
24aac     0C E4 85 F1 | 	sub	objptr, #12
24ab0                 | ' else
24ab0                 | '   long[base2+16]:= len+2
24ab0                 | ' word[base2+20]:=vol
24ab0     00 13 02 F6 | 	mov	arg01, _var01
24ab4     14 12 06 F1 | 	add	arg01, #20
24ab8     09 19 52 FC | 	wrword	arg04, arg01
24abc                 | ' word[base2+24]:= 3546895/splfreq 
24abc     00 19 02 F6 | 	mov	arg04, _var01
24ac0     18 18 06 F1 | 	add	arg04, #24
24ac4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24ac4                 | ' long[base2+28]:=$40000000    
24ac4                 | ' long[base2+32]:=0    
24ac4                 | ' long[base2+36]:=0    
24ac4                 | ' long[base2+40]:=0    
24ac4                 | ' long[base2+44]:=0    
24ac4                 | ' long[base2+8]:=sample+$C0000000     
24ac4     00 00 60 FF 
24ac8     00 14 06 F1 | 	add	arg02, ##-1073741824
24acc     18 12 62 FD | 	getqx	arg01
24ad0     09 13 82 F6 | 	negc	arg01, arg01
24ad4     0C 13 52 FC | 	wrword	arg01, arg04
24ad8     00 13 02 F6 | 	mov	arg01, _var01
24adc     1A 12 06 F1 | 	add	arg01, #26
24ae0     09 01 5A FC | 	wrword	#256, arg01
24ae4     00 13 02 F6 | 	mov	arg01, _var01
24ae8     1C 12 06 F1 | 	add	arg01, #28
24aec     00 00 A0 FF 
24af0     09 01 68 FC | 	wrlong	##1073741824, arg01
24af4     00 13 02 F6 | 	mov	arg01, _var01
24af8     20 12 06 F1 | 	add	arg01, #32
24afc     09 01 68 FC | 	wrlong	#0, arg01
24b00     00 13 02 F6 | 	mov	arg01, _var01
24b04     24 12 06 F1 | 	add	arg01, #36
24b08     09 01 68 FC | 	wrlong	#0, arg01
24b0c     00 13 02 F6 | 	mov	arg01, _var01
24b10     28 12 06 F1 | 	add	arg01, #40
24b14     09 01 68 FC | 	wrlong	#0, arg01
24b18     00 13 02 F6 | 	mov	arg01, _var01
24b1c     2C 12 06 F1 | 	add	arg01, #44
24b20     09 01 68 FC | 	wrlong	#0, arg01
24b24     08 00 06 F1 | 	add	_var01, #8
24b28     00 15 62 FC | 	wrlong	arg02, _var01
24b2c                 | _audio096_spin2_play_ret
24b2c     2D 00 64 FD | 	ret
24b30                 | 
24b30                 | ' 
24b30                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
24b30                 | _audio096_spin2_play8
24b30                 | ' 
24b30                 | ' base2:=@channel1[0]+64*channel
24b30     0C E4 05 F1 | 	add	objptr, #12
24b34     F2 00 02 F6 | 	mov	_var01, objptr
24b38     06 12 66 F0 | 	shl	arg01, #6
24b3c     09 01 02 F1 | 	add	_var01, arg01
24b40                 | ' long[base2]:=0
24b40     00 01 68 FC | 	wrlong	#0, _var01
24b44                 | ' long[base2+8]:=sample+$40000000 
24b44     00 00 20 FF 
24b48     00 14 06 F1 | 	add	arg02, ##1073741824
24b4c     00 13 02 F6 | 	mov	arg01, _var01
24b50     08 12 06 F1 | 	add	arg01, #8
24b54     09 15 62 FC | 	wrlong	arg02, arg01
24b58                 | ' if loop>=0
24b58     00 1C 56 F2 | 	cmps	arg06, #0 wc
24b5c     0C E4 85 F1 | 	sub	objptr, #12
24b60     1C 00 90 CD |  if_b	jmp	#LR__2980
24b64                 | '   long[base2+12]:=loop
24b64     00 15 02 F6 | 	mov	arg02, _var01
24b68     0C 14 06 F1 | 	add	arg02, #12
24b6c     0A 1D 62 FC | 	wrlong	arg06, arg02
24b70                 | '   long[base2+16]:= len
24b70     00 1D 02 F6 | 	mov	arg06, _var01
24b74     10 1C 06 F1 | 	add	arg06, #16
24b78     0E 1B 62 FC | 	wrlong	arg05, arg06
24b7c     1C 00 90 FD | 	jmp	#LR__2981
24b80                 | LR__2980
24b80                 | ' else
24b80                 | '   long[base2+12]:= len
24b80     00 1D 02 F6 | 	mov	arg06, _var01
24b84     0C 1C 06 F1 | 	add	arg06, #12
24b88     0E 1B 62 FC | 	wrlong	arg05, arg06
24b8c                 | '   long[base2+16]:= len+1
24b8c     01 1A 06 F1 | 	add	arg05, #1
24b90     00 13 02 F6 | 	mov	arg01, _var01
24b94     10 12 06 F1 | 	add	arg01, #16
24b98     09 1B 62 FC | 	wrlong	arg05, arg01
24b9c                 | LR__2981
24b9c     0B 17 52 F6 | 	abs	arg03, arg03 wc
24ba0     0F 1B 80 FF 
24ba4     0B 1F 1A FD | 	qdiv	##3546895, arg03
24ba8                 | ' word[base2+20]:=vol
24ba8     00 17 02 F6 | 	mov	arg03, _var01
24bac     14 16 06 F1 | 	add	arg03, #20
24bb0     0B 19 52 FC | 	wrword	arg04, arg03
24bb4                 | ' word[base2+24]:= 3546895 /splfreq 
24bb4     00 13 02 F6 | 	mov	arg01, _var01
24bb8     18 12 06 F1 | 	add	arg01, #24
24bbc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
24bbc     1A 00 06 F1 | 	add	_var01, #26
24bc0     18 18 62 FD | 	getqx	arg04
24bc4     0C 19 82 F6 | 	negc	arg04, arg04
24bc8     09 19 52 FC | 	wrword	arg04, arg01
24bcc     00 01 5A FC | 	wrword	#256, _var01
24bd0                 | _audio096_spin2_play8_ret
24bd0     2D 00 64 FD | 	ret
24bd4                 | 
24bd4                 | ' 'long[base2+28]:=$40000000
24bd4                 | ' 
24bd4                 | '     
24bd4                 | ' pub stop(channel) 'silence it
24bd4                 | _audio096_spin2_stop
24bd4                 | ' 
24bd4                 | ' word[@channel1[0]+64*channel+20]:=0
24bd4     0C E4 05 F1 | 	add	objptr, #12
24bd8     F2 00 02 F6 | 	mov	_var01, objptr
24bdc     09 03 02 F6 | 	mov	_var02, arg01
24be0     06 02 66 F0 | 	shl	_var02, #6
24be4     01 01 02 F1 | 	add	_var01, _var02
24be8     14 00 06 F1 | 	add	_var01, #20
24bec     00 01 58 FC | 	wrword	#0, _var01
24bf0                 | ' word[@channel1[0]+64*channel+20]:=0
24bf0     F2 00 02 F6 | 	mov	_var01, objptr
24bf4     06 12 66 F0 | 	shl	arg01, #6
24bf8     09 01 02 F1 | 	add	_var01, arg01
24bfc     14 00 06 F1 | 	add	_var01, #20
24c00     00 01 58 FC | 	wrword	#0, _var01
24c04     0C E4 85 F1 | 	sub	objptr, #12
24c08                 | _audio096_spin2_stop_ret
24c08     2D 00 64 FD | 	ret
24c0c                 | hubexit
24c0c     81 00 80 FD | 	jmp	#cogexit
24c10                 | 
24c10                 | __system___setbaud
24c10     14 88 06 FB | 	rdlong	muldiva_, #20
24c14     09 8B 02 F6 | 	mov	muldivb_, arg01
24c18     BA 00 A0 FD | 	call	#divide_
24c1c     97 06 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
24c20                 | LR__2990
24c20     3E FA 9D FA | 	rdpin	result1, #62 wc
24c24     FE FC A1 F1 | 	subx	result2, result2
24c28     F4 FF 9F CD |  if_b	jmp	#LR__2990
24c2c                 | LR__2991
24c2c     40 7C 64 FD | 	dirl	#62
24c30     40 7E 64 FD | 	dirl	#63
24c34     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
24c38     10 8A 66 F0 | 	shl	muldivb_, #16
24c3c     07 14 06 F6 | 	mov	arg02, #7
24c40     45 15 02 F1 | 	add	arg02, muldivb_
24c44     3E F8 0C FC | 	wrpin	#124, #62
24c48     3E 14 16 FC | 	wxpin	arg02, #62
24c4c     3F 7C 0C FC | 	wrpin	#62, #63
24c50     14 14 06 F1 | 	add	arg02, #20
24c54     3F 14 16 FC | 	wxpin	arg02, #63
24c58     41 7C 64 FD | 	dirh	#62
24c5c     41 7E 64 FD | 	dirh	#63
24c60                 | __system___setbaud_ret
24c60     2D 00 64 FD | 	ret
24c64                 | 
24c64                 | __system___txraw
24c64     01 4A 05 F6 | 	mov	COUNT_, #1
24c68     A8 00 A0 FD | 	call	#pushregs_
24c6c     09 27 02 F6 | 	mov	local01, arg01
24c70     97 06 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
24c74                 | LR__3000
24c74     3E FA 9D FA | 	rdpin	result1, #62 wc
24c78     FE FC A1 F1 | 	subx	result2, result2
24c7c     F4 FF 9F CD |  if_b	jmp	#LR__3000
24c80                 | LR__3001
24c80     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
24c84     C2 01 00 AF 
24c88     00 12 06 A6 |  if_e	mov	arg01, ##230400
24c8c     80 FF BF AD |  if_e	call	#__system___setbaud
24c90     58 7C 64 FD | 	drvl	#62
24c94     3E 26 26 FC | 	wypin	local01, #62
24c98     01 FA 05 F6 | 	mov	result1, #1
24c9c     A7 F0 03 F6 | 	mov	ptra, fp
24ca0     B2 00 A0 FD | 	call	#popregs_
24ca4                 | __system___txraw_ret
24ca4     2D 00 64 FD | 	ret
24ca8                 | 
24ca8                 | __system___rxraw
24ca8     0D 4A 05 F6 | 	mov	COUNT_, #13
24cac     A8 00 A0 FD | 	call	#pushregs_
24cb0     09 27 02 F6 | 	mov	local01, arg01
24cb4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24cb8     C2 01 00 AF 
24cbc     00 12 06 A6 |  if_e	mov	arg01, ##230400
24cc0     4C FF BF AD |  if_e	call	#__system___setbaud
24cc4     00 26 0E F2 | 	cmp	local01, #0 wz
24cc8     20 00 90 AD |  if_e	jmp	#LR__3010
24ccc     14 2A 06 FB | 	rdlong	local03, #20
24cd0     0A 2A 46 F0 | 	shr	local03, #10
24cd4     15 27 02 FD | 	qmul	local01, local03
24cd8     1A FA 61 FD | 	getct	result1
24cdc     18 2C 62 FD | 	getqx	local04
24ce0     16 FB 01 F1 | 	add	result1, local04
24ce4     FD 2E 02 F6 | 	mov	local05, result1
24ce8     04 00 90 FD | 	jmp	#LR__3011
24cec                 | LR__3010
24cec     00 2E 06 F6 | 	mov	local05, #0
24cf0                 | LR__3011
24cf0     01 30 66 F6 | 	neg	local06, #1
24cf4     3F 32 06 F6 | 	mov	local07, #63
24cf8     00 34 06 F6 | 	mov	local08, #0
24cfc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24d00     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
24d04     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
24d08                 | LR__3012
24d08     08 36 16 F4 | 	testb	local09, #8 wc
24d0c     09 36 76 F4 | 	testbn	local09, #9 andc
24d10     0A 36 46 F0 | 	shr	local09, #10
24d14     01 34 06 C6 |  if_b	mov	local08, #1
24d18     40 7E 6C 3D |  if_ae	testp	#63 wz
24d1c     01 34 06 26 |  if_nc_and_z	mov	local08, #1
24d20     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
24d24     04 36 46 20 |  if_nc_and_z	shr	local09, #4
24d28                 | LR__3013
24d28     00 28 06 F6 | 	mov	local02, #0
24d2c     00 34 0E F2 | 	cmp	local08, #0 wz
24d30     01 28 66 56 |  if_ne	neg	local02, #1
24d34     00 38 06 F6 | 	mov	local10, #0
24d38     00 2A 06 F6 | 	mov	local03, #0
24d3c     00 26 0E F2 | 	cmp	local01, #0 wz
24d40     01 2A 66 56 |  if_ne	neg	local03, #1
24d44     00 2C 06 F6 | 	mov	local04, #0
24d48     00 3A 06 F6 | 	mov	local11, #0
24d4c     17 3D 02 F6 | 	mov	local12, local05
24d50     1A FA 61 FD | 	getct	result1
24d54     FD 3E 02 F6 | 	mov	local13, result1
24d58     1F 3D 82 F1 | 	sub	local12, local13
24d5c     00 3C 56 F2 | 	cmps	local12, #0 wc
24d60     00 3A 26 C6 |  if_b	not	local11, #0
24d64     00 3A 0E F2 | 	cmp	local11, #0 wz
24d68     00 2C 26 56 |  if_ne	not	local04, #0
24d6c     16 2B CA F7 | 	test	local03, local04 wz
24d70     00 38 26 56 |  if_ne	not	local10, #0
24d74     1C 29 4A F5 | 	or	local02, local10 wz
24d78     8C FF 9F AD |  if_e	jmp	#LR__3012
24d7c     00 34 0E F2 | 	cmp	local08, #0 wz
24d80     1B 31 02 56 |  if_ne	mov	local06, local09
24d84     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
24d88     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24d8c     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
24d90     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
24d94     18 FB 01 F6 | 	mov	result1, local06
24d98     A7 F0 03 F6 | 	mov	ptra, fp
24d9c     B2 00 A0 FD | 	call	#popregs_
24da0                 | __system___rxraw_ret
24da0     2D 00 64 FD | 	ret
24da4                 | 
24da4                 | __system___getus
24da4     1A FC 71 FD | 	getct	result2 wc
24da8     1A 00 62 FD | 	getct	_var01
24dac     10 E6 05 F1 | 	add	ptr___system__dat__, #16
24db0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
24db4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24db8     20 00 90 5D |  if_ne	jmp	#LR__3020
24dbc     14 02 06 FB | 	rdlong	_var02, #20
24dc0     A1 07 00 FF 
24dc4     40 02 16 FD | 	qdiv	_var02, ##1000000
24dc8     10 E6 05 F1 | 	add	ptr___system__dat__, #16
24dcc     18 FA 61 FD | 	getqx	result1
24dd0     FD 02 02 F6 | 	mov	_var02, result1
24dd4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
24dd8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24ddc                 | LR__3020
24ddc     01 FD 11 FD | 	qdiv	result2, _var02
24de0     19 FC 61 FD | 	getqy	result2
24de4     28 FC 61 FD | 	setq	result2
24de8     01 01 12 FD | 	qdiv	_var01, _var02
24dec     18 FA 61 FD | 	getqx	result1
24df0                 | __system___getus_ret
24df0     2D 00 64 FD | 	ret
24df4                 | 
24df4                 | __system____builtin_memmove
24df4     09 01 02 F6 | 	mov	_var01, arg01
24df8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
24dfc     10 00 90 CD |  if_b	jmp	#LR__3030
24e00     0A 03 02 F6 | 	mov	_var02, arg02
24e04     0B 03 02 F1 | 	add	_var02, arg03
24e08     01 13 52 F2 | 	cmps	arg01, _var02 wc
24e0c     48 00 90 CD |  if_b	jmp	#LR__3036
24e10                 | LR__3030
24e10     0B 05 02 F6 | 	mov	_var03, arg03
24e14     02 04 4E F0 | 	shr	_var03, #2 wz
24e18     18 00 90 AD |  if_e	jmp	#LR__3035
24e1c     97 0A 48 FB | 	callpa	#(@LR__3033-@LR__3031)>>2,fcache_load_ptr_
24e20                 | LR__3031
24e20     02 09 D8 FC | 	rep	@LR__3034, _var03
24e24                 | LR__3032
24e24     0A 05 02 FB | 	rdlong	_var03, arg02
24e28     09 05 62 FC | 	wrlong	_var03, arg01
24e2c     04 12 06 F1 | 	add	arg01, #4
24e30     04 14 06 F1 | 	add	arg02, #4
24e34                 | LR__3033
24e34                 | LR__3034
24e34                 | LR__3035
24e34     02 16 CE F7 | 	test	arg03, #2 wz
24e38     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
24e3c     09 03 52 5C |  if_ne	wrword	_var02, arg01
24e40     02 12 06 51 |  if_ne	add	arg01, #2
24e44     02 14 06 51 |  if_ne	add	arg02, #2
24e48     01 16 CE F7 | 	test	arg03, #1 wz
24e4c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
24e50     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
24e54     28 00 90 FD | 	jmp	#LR__3042
24e58                 | LR__3036
24e58     0B 13 02 F1 | 	add	arg01, arg03
24e5c     0B 15 02 F1 | 	add	arg02, arg03
24e60     0B 07 0A F6 | 	mov	_var04, arg03 wz
24e64     18 00 90 AD |  if_e	jmp	#LR__3041
24e68     97 0A 48 FB | 	callpa	#(@LR__3039-@LR__3037)>>2,fcache_load_ptr_
24e6c                 | LR__3037
24e6c     03 09 D8 FC | 	rep	@LR__3040, _var04
24e70                 | LR__3038
24e70     01 12 86 F1 | 	sub	arg01, #1
24e74     01 14 86 F1 | 	sub	arg02, #1
24e78     0A 03 C2 FA | 	rdbyte	_var02, arg02
24e7c     09 03 42 FC | 	wrbyte	_var02, arg01
24e80                 | LR__3039
24e80                 | LR__3040
24e80                 | LR__3041
24e80                 | LR__3042
24e80     00 FB 01 F6 | 	mov	result1, _var01
24e84                 | __system____builtin_memmove_ret
24e84     2D 00 64 FD | 	ret
24e88                 | 
24e88                 | __system____builtin_strcpy
24e88     09 01 02 F6 | 	mov	_var01, arg01
24e8c     97 0A 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
24e90                 | LR__3050
24e90     0A FB C9 FA | 	rdbyte	result1, arg02 wz
24e94     09 FB 41 FC | 	wrbyte	result1, arg01
24e98     01 14 06 F1 | 	add	arg02, #1
24e9c     01 12 06 F1 | 	add	arg01, #1
24ea0     EC FF 9F 5D |  if_ne	jmp	#LR__3050
24ea4                 | LR__3051
24ea4     00 FB 01 F6 | 	mov	result1, _var01
24ea8                 | __system____builtin_strcpy_ret
24ea8     2D 00 64 FD | 	ret
24eac                 | 
24eac                 | __system____topofstack
24eac     00 4A 05 F6 | 	mov	COUNT_, #0
24eb0     A8 00 A0 FD | 	call	#pushregs_
24eb4     08 F0 07 F1 | 	add	ptra, #8
24eb8     04 4E 05 F1 | 	add	fp, #4
24ebc     A7 12 62 FC | 	wrlong	arg01, fp
24ec0     A7 FA 01 F6 | 	mov	result1, fp
24ec4     04 4E 85 F1 | 	sub	fp, #4
24ec8     A7 F0 03 F6 | 	mov	ptra, fp
24ecc     B2 00 A0 FD | 	call	#popregs_
24ed0                 | __system____topofstack_ret
24ed0     2D 00 64 FD | 	ret
24ed4                 | 
24ed4                 | __system___lockmem
24ed4     00 FA 05 F6 | 	mov	result1, #0
24ed8     01 FA 61 FD | 	cogid	result1
24edc     00 FB 05 F1 | 	add	result1, #256
24ee0                 | LR__3060
24ee0     09 01 0A FB | 	rdlong	_var01, arg01 wz
24ee4     09 FB 61 AC |  if_e	wrlong	result1, arg01
24ee8     09 01 02 AB |  if_e	rdlong	_var01, arg01
24eec     09 01 02 AB |  if_e	rdlong	_var01, arg01
24ef0     FD 00 0A F2 | 	cmp	_var01, result1 wz
24ef4     E8 FF 9F 5D |  if_ne	jmp	#LR__3060
24ef8                 | __system___lockmem_ret
24ef8     2D 00 64 FD | 	ret
24efc                 | 
24efc                 | __system___string_cmp
24efc     97 14 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
24f00                 | LR__3070
24f00     09 01 C2 FA | 	rdbyte	_var01, arg01
24f04     0A 03 C2 FA | 	rdbyte	_var02, arg02
24f08     00 05 02 F6 | 	mov	_var03, _var01
24f0c     01 05 8A F1 | 	sub	_var03, _var02 wz
24f10     01 12 06 F1 | 	add	arg01, #1
24f14     01 14 06 F1 | 	add	arg02, #1
24f18     0C 00 90 5D |  if_ne	jmp	#LR__3072
24f1c     00 00 0E F2 | 	cmp	_var01, #0 wz
24f20     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
24f24     D8 FF 9F 5D |  if_ne	jmp	#LR__3070
24f28                 | LR__3071
24f28                 | LR__3072
24f28     02 FB 01 F6 | 	mov	result1, _var03
24f2c                 | __system___string_cmp_ret
24f2c     2D 00 64 FD | 	ret
24f30                 | 
24f30                 | __system___string_concat
24f30     05 4A 05 F6 | 	mov	COUNT_, #5
24f34     A8 00 A0 FD | 	call	#pushregs_
24f38     09 27 02 F6 | 	mov	local01, arg01
24f3c     0A 29 02 F6 | 	mov	local02, arg02
24f40     13 13 02 F6 | 	mov	arg01, local01
24f44     09 2B 02 F6 | 	mov	local03, arg01
24f48     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
24f4c                 | LR__3080
24f4c     15 FB C9 FA | 	rdbyte	result1, local03 wz
24f50     01 2A 06 51 |  if_ne	add	local03, #1
24f54     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
24f58                 | LR__3081
24f58     09 2B 82 F1 | 	sub	local03, arg01
24f5c     15 2D 02 F6 | 	mov	local04, local03
24f60     14 13 02 F6 | 	mov	arg01, local02
24f64     09 2B 02 F6 | 	mov	local03, arg01
24f68     97 06 48 FB | 	callpa	#(@LR__3083-@LR__3082)>>2,fcache_load_ptr_
24f6c                 | LR__3082
24f6c     15 FB C9 FA | 	rdbyte	result1, local03 wz
24f70     01 2A 06 51 |  if_ne	add	local03, #1
24f74     F4 FF 9F 5D |  if_ne	jmp	#LR__3082
24f78                 | LR__3083
24f78     09 2B 82 F1 | 	sub	local03, arg01
24f7c     16 13 02 F6 | 	mov	arg01, local04
24f80     15 13 02 F1 | 	add	arg01, local03
24f84     01 12 06 F1 | 	add	arg01, #1
24f88     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
24f8c     FD 2E 0A F6 | 	mov	local05, result1 wz
24f90     28 00 90 AD |  if_e	jmp	#LR__3084
24f94     17 13 02 F6 | 	mov	arg01, local05
24f98     13 15 02 F6 | 	mov	arg02, local01
24f9c     16 17 02 F6 | 	mov	arg03, local04
24fa0     50 FE BF FD | 	call	#__system____builtin_memmove
24fa4     17 13 02 F6 | 	mov	arg01, local05
24fa8     16 13 02 F1 | 	add	arg01, local04
24fac     01 2A 06 F1 | 	add	local03, #1
24fb0     14 15 02 F6 | 	mov	arg02, local02
24fb4     15 17 02 F6 | 	mov	arg03, local03
24fb8     38 FE BF FD | 	call	#__system____builtin_memmove
24fbc                 | LR__3084
24fbc     17 FB 01 F6 | 	mov	result1, local05
24fc0     A7 F0 03 F6 | 	mov	ptra, fp
24fc4     B2 00 A0 FD | 	call	#popregs_
24fc8                 | __system___string_concat_ret
24fc8     2D 00 64 FD | 	ret
24fcc                 | 
24fcc                 | __system___tx
24fcc     02 4A 05 F6 | 	mov	COUNT_, #2
24fd0     A8 00 A0 FD | 	call	#pushregs_
24fd4     09 27 02 F6 | 	mov	local01, arg01
24fd8     0A 26 0E F2 | 	cmp	local01, #10 wz
24fdc     18 00 90 5D |  if_ne	jmp	#LR__3090
24fe0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24fe4     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
24fe8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24fec     02 28 CE F7 | 	test	local02, #2 wz
24ff0     0D 12 06 56 |  if_ne	mov	arg01, #13
24ff4     6C FC BF 5D |  if_ne	call	#__system___txraw
24ff8                 | LR__3090
24ff8     13 13 02 F6 | 	mov	arg01, local01
24ffc     64 FC BF FD | 	call	#__system___txraw
25000     A7 F0 03 F6 | 	mov	ptra, fp
25004     B2 00 A0 FD | 	call	#popregs_
25008                 | __system___tx_ret
25008     2D 00 64 FD | 	ret
2500c                 | 
2500c                 | __system___rx
2500c     01 4A 05 F6 | 	mov	COUNT_, #1
25010     A8 00 A0 FD | 	call	#pushregs_
25014                 | LR__3100
25014     00 12 06 F6 | 	mov	arg01, #0
25018     8C FC BF FD | 	call	#__system___rxraw
2501c     FD 26 02 F6 | 	mov	local01, result1
25020     FF FF 7F FF 
25024     FF 27 0E F2 | 	cmp	local01, ##-1 wz
25028     E8 FF 9F AD |  if_e	jmp	#LR__3100
2502c     0D 26 0E F2 | 	cmp	local01, #13 wz
25030     14 00 90 5D |  if_ne	jmp	#LR__3101
25034     08 E6 05 F1 | 	add	ptr___system__dat__, #8
25038     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2503c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25040     02 FA CD F7 | 	test	result1, #2 wz
25044     0A 26 06 56 |  if_ne	mov	local01, #10
25048                 | LR__3101
25048     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2504c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
25050     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
25054     01 12 CE F7 | 	test	arg01, #1 wz
25058     1C 00 90 AD |  if_e	jmp	#LR__3104
2505c     7F 26 0E F2 | 	cmp	local01, #127 wz
25060     0C 00 90 5D |  if_ne	jmp	#LR__3102
25064     08 12 06 F6 | 	mov	arg01, #8
25068     60 FF BF FD | 	call	#__system___tx
2506c     08 00 90 FD | 	jmp	#LR__3103
25070                 | LR__3102
25070     13 13 02 F6 | 	mov	arg01, local01
25074     54 FF BF FD | 	call	#__system___tx
25078                 | LR__3103
25078                 | LR__3104
25078     13 FB 01 F6 | 	mov	result1, local01
2507c     A7 F0 03 F6 | 	mov	ptra, fp
25080     B2 00 A0 FD | 	call	#popregs_
25084                 | __system___rx_ret
25084     2D 00 64 FD | 	ret
25088                 | 
25088                 | __system___pinwrite
25088     09 01 02 F6 | 	mov	_var01, arg01
2508c     1F 00 06 F5 | 	and	_var01, #31
25090     20 12 CE F7 | 	test	arg01, #32 wz
25094     06 12 46 F0 | 	shr	arg01, #6
25098     09 13 CA F9 | 	bmask	arg01, arg01
2509c     00 13 62 F0 | 	shl	arg01, _var01
250a0     00 15 62 F0 | 	shl	arg02, _var01
250a4     1C 00 90 AD |  if_e	jmp	#LR__3110
250a8     09 F7 43 F5 | 	or	dirb, arg01
250ac     FD 01 02 F6 | 	mov	_var01, outb
250b0     09 01 22 F5 | 	andn	_var01, arg01
250b4     09 15 02 F5 | 	and	arg02, arg01
250b8     0A 01 42 F5 | 	or	_var01, arg02
250bc     00 FB 03 F6 | 	mov	outb, _var01
250c0     18 00 90 FD | 	jmp	#LR__3111
250c4                 | LR__3110
250c4     09 F5 43 F5 | 	or	dira, arg01
250c8     FC 01 02 F6 | 	mov	_var01, outa
250cc     09 01 22 F5 | 	andn	_var01, arg01
250d0     09 15 02 F5 | 	and	arg02, arg01
250d4     0A 01 42 F5 | 	or	_var01, arg02
250d8     00 F9 03 F6 | 	mov	outa, _var01
250dc                 | LR__3111
250dc                 | __system___pinwrite_ret
250dc     2D 00 64 FD | 	ret
250e0                 | 
250e0                 | __system___basic_read_line
250e0     06 4A 05 F6 | 	mov	COUNT_, #6
250e4     A8 00 A0 FD | 	call	#pushregs_
250e8     09 27 02 F6 | 	mov	local01, arg01
250ec     00 28 06 F6 | 	mov	local02, #0
250f0     18 2A 06 F6 | 	mov	local03, #24
250f4     00 2C 06 F6 | 	mov	local04, #0
250f8     18 12 06 F6 | 	mov	arg01, #24
250fc     78 3F B0 FD | 	call	#__system___gc_alloc_managed
25100     FD 2E 0A F6 | 	mov	local05, result1 wz
25104     17 FB 01 A6 |  if_e	mov	result1, local05
25108     B0 00 90 AD |  if_e	jmp	#LR__3123
2510c                 | LR__3120
2510c     13 13 02 F6 | 	mov	arg01, local01
25110     7C 0B B0 FD | 	call	#__system___basic_get_char
25114     FD 30 02 F6 | 	mov	local06, result1
25118     01 30 56 F2 | 	cmps	local06, #1 wc
2511c     8C 00 90 CD |  if_b	jmp	#LR__3122
25120     0A 30 0E F2 | 	cmp	local06, #10 wz
25124     10 00 90 5D |  if_ne	jmp	#LR__3121
25128     00 2C 0E F2 | 	cmp	local04, #0 wz
2512c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
25130     01 28 86 11 |  if_a	sub	local02, #1
25134     74 00 90 FD | 	jmp	#LR__3122
25138                 | LR__3121
25138     0D 30 0E F2 | 	cmp	local06, #13 wz
2513c     01 2C 06 A6 |  if_e	mov	local04, #1
25140     00 2C 06 56 |  if_ne	mov	local04, #0
25144     08 30 0E F2 | 	cmp	local06, #8 wz
25148     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
2514c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
25150     01 28 86 21 |  if_nc_and_z	sub	local02, #1
25154     B4 FF 9F AD |  if_e	jmp	#LR__3120
25158     17 17 02 F6 | 	mov	arg03, local05
2515c     14 17 02 F1 | 	add	arg03, local02
25160     0B 31 42 FC | 	wrbyte	local06, arg03
25164     01 28 06 F1 | 	add	local02, #1
25168     15 29 0A F2 | 	cmp	local02, local03 wz
2516c     9C FF 9F 5D |  if_ne	jmp	#LR__3120
25170     15 13 02 F6 | 	mov	arg01, local03
25174     20 12 06 F1 | 	add	arg01, #32
25178     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
2517c     FD 30 0A F6 | 	mov	local06, result1 wz
25180     18 FB 01 A6 |  if_e	mov	result1, local06
25184     34 00 90 AD |  if_e	jmp	#LR__3123
25188     18 13 02 F6 | 	mov	arg01, local06
2518c     17 15 02 F6 | 	mov	arg02, local05
25190     15 17 02 F6 | 	mov	arg03, local03
25194     5C FC BF FD | 	call	#__system____builtin_memmove
25198     20 2A 06 F1 | 	add	local03, #32
2519c     17 13 02 F6 | 	mov	arg01, local05
251a0     10 40 B0 FD | 	call	#__system___gc_free
251a4     18 2F 02 F6 | 	mov	local05, local06
251a8     60 FF 9F FD | 	jmp	#LR__3120
251ac                 | LR__3122
251ac     17 31 02 F6 | 	mov	local06, local05
251b0     14 31 02 F1 | 	add	local06, local02
251b4     18 01 48 FC | 	wrbyte	#0, local06
251b8     17 FB 01 F6 | 	mov	result1, local05
251bc                 | LR__3123
251bc     A7 F0 03 F6 | 	mov	ptra, fp
251c0     B2 00 A0 FD | 	call	#popregs_
251c4                 | __system___basic_read_line_ret
251c4     2D 00 64 FD | 	ret
251c8                 | 
251c8                 | __system___waitms
251c8     09 01 02 F6 | 	mov	_var01, arg01
251cc     1A 02 62 FD | 	getct	_var02
251d0     14 04 06 FB | 	rdlong	_var03, #20
251d4     97 14 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
251d8                 | LR__3130
251d8     01 00 00 FF 
251dc     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
251e0     1C 00 90 CD |  if_b	jmp	#LR__3132
251e4     02 03 02 F1 | 	add	_var02, _var03
251e8     01 13 02 F6 | 	mov	arg01, _var02
251ec     00 12 66 FA | 	addct1	arg01, #0
251f0     24 22 60 FD | 	waitct1
251f4     01 00 00 FF 
251f8     E8 01 86 F1 | 	sub	_var01, ##1000
251fc     D8 FF 9F FD | 	jmp	#LR__3130
25200                 | LR__3131
25200                 | LR__3132
25200     01 00 56 F2 | 	cmps	_var01, #1 wc
25204     28 00 90 CD |  if_b	jmp	#LR__3133
25208     02 01 02 FD | 	qmul	_var01, _var03
2520c     01 00 00 FF 
25210     E8 17 06 F6 | 	mov	arg03, ##1000
25214     19 FA 61 FD | 	getqy	result1
25218     18 12 62 FD | 	getqx	arg01
2521c     28 FA 61 FD | 	setq	result1
25220     0B 13 12 FD | 	qdiv	arg01, arg03
25224     18 12 62 FD | 	getqx	arg01
25228     01 13 62 FA | 	addct1	arg01, _var02
2522c     24 22 60 FD | 	waitct1
25230                 | LR__3133
25230                 | __system___waitms_ret
25230     2D 00 64 FD | 	ret
25234                 | 
25234                 | __system___waitus
25234     09 01 02 F6 | 	mov	_var01, arg01
25238     1A 02 62 FD | 	getct	_var02
2523c     14 04 06 FB | 	rdlong	_var03, #20
25240     97 14 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
25244                 | LR__3140
25244     A1 07 00 FF 
25248     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2524c     1C 00 90 CD |  if_b	jmp	#LR__3142
25250     02 03 02 F1 | 	add	_var02, _var03
25254     01 13 02 F6 | 	mov	arg01, _var02
25258     00 12 66 FA | 	addct1	arg01, #0
2525c     24 22 60 FD | 	waitct1
25260     A1 07 00 FF 
25264     40 00 86 F1 | 	sub	_var01, ##1000000
25268     D8 FF 9F FD | 	jmp	#LR__3140
2526c                 | LR__3141
2526c                 | LR__3142
2526c     01 00 56 F2 | 	cmps	_var01, #1 wc
25270     28 00 90 CD |  if_b	jmp	#LR__3143
25274     02 01 02 FD | 	qmul	_var01, _var03
25278     A1 07 00 FF 
2527c     40 16 06 F6 | 	mov	arg03, ##1000000
25280     19 FA 61 FD | 	getqy	result1
25284     18 12 62 FD | 	getqx	arg01
25288     28 FA 61 FD | 	setq	result1
2528c     0B 13 12 FD | 	qdiv	arg01, arg03
25290     18 FA 61 FD | 	getqx	result1
25294     FD 02 62 FA | 	addct1	_var02, result1
25298     24 22 60 FD | 	waitct1
2529c                 | LR__3143
2529c                 | __system___waitus_ret
2529c     2D 00 64 FD | 	ret
252a0                 | 
252a0                 | __system___mount
252a0     0B 4A 05 F6 | 	mov	COUNT_, #11
252a4     A8 00 A0 FD | 	call	#pushregs_
252a8     09 27 02 F6 | 	mov	local01, arg01
252ac     0A 29 0A F6 | 	mov	local02, arg02 wz
252b0     01 2A 66 F6 | 	neg	local03, #1
252b4     01 FA 65 A6 |  if_e	neg	result1, #1
252b8     98 02 90 AD |  if_e	jmp	#LR__3165
252bc     13 FB C1 FA | 	rdbyte	result1, local01
252c0     2F FA 0D F2 | 	cmp	result1, #47 wz
252c4     28 00 90 5D |  if_ne	jmp	#LR__3152
252c8     13 13 02 F6 | 	mov	arg01, local01
252cc     09 2D 02 F6 | 	mov	local04, arg01
252d0     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
252d4                 | LR__3150
252d4     16 FB C9 FA | 	rdbyte	result1, local04 wz
252d8     01 2C 06 51 |  if_ne	add	local04, #1
252dc     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
252e0                 | LR__3151
252e0     09 2D 82 F1 | 	sub	local04, arg01
252e4     16 FB 01 F6 | 	mov	result1, local04
252e8     10 FA 55 F2 | 	cmps	result1, #16 wc
252ec     14 00 90 CD |  if_b	jmp	#LR__3153
252f0                 | LR__3152
252f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
252f4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
252f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
252fc     01 FA 65 F6 | 	neg	result1, #1
25300     50 02 90 FD | 	jmp	#LR__3165
25304                 | LR__3153
25304     00 2E 06 F6 | 	mov	local05, #0
25308                 | LR__3154
25308     04 2E 56 F2 | 	cmps	local05, #4 wc
2530c     B0 00 90 3D |  if_ae	jmp	#LR__3159
25310     17 13 02 F6 | 	mov	arg01, local05
25314     02 12 66 F0 | 	shl	arg01, #2
25318     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2531c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25320     09 FB 09 FB | 	rdlong	result1, arg01 wz
25324     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25328     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
2532c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
25330     84 00 90 8D |  if_c_and_z	jmp	#LR__3158
25334     17 13 02 F6 | 	mov	arg01, local05
25338     02 12 66 F0 | 	shl	arg01, #2
2533c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25340     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25344     09 13 02 FB | 	rdlong	arg01, arg01
25348     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2534c     09 2D 02 F6 | 	mov	local04, arg01
25350     97 06 48 FB | 	callpa	#(@LR__3156-@LR__3155)>>2,fcache_load_ptr_
25354                 | LR__3155
25354     16 FB C9 FA | 	rdbyte	result1, local04 wz
25358     01 2C 06 51 |  if_ne	add	local04, #1
2535c     F4 FF 9F 5D |  if_ne	jmp	#LR__3155
25360                 | LR__3156
25360     09 2D 82 F1 | 	sub	local04, arg01
25364     16 31 02 F6 | 	mov	local06, local04
25368     18 13 02 F6 | 	mov	arg01, local06
2536c     13 13 02 F1 | 	add	arg01, local01
25370     09 FB C1 FA | 	rdbyte	result1, arg01
25374     2F FA 0D F2 | 	cmp	result1, #47 wz
25378     18 33 02 56 |  if_ne	mov	local07, local06
2537c     13 33 02 51 |  if_ne	add	local07, local01
25380     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
25384     30 00 90 5D |  if_ne	jmp	#LR__3157
25388     17 17 02 F6 | 	mov	arg03, local05
2538c     02 16 66 F0 | 	shl	arg03, #2
25390     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25394     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
25398     0B 15 02 FB | 	rdlong	arg02, arg03
2539c     13 13 02 F6 | 	mov	arg01, local01
253a0     18 17 02 F6 | 	mov	arg03, local06
253a4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
253a8     4C 51 B0 FD | 	call	#__system__strncmp
253ac     00 FA 0D F2 | 	cmp	result1, #0 wz
253b0     17 2B 02 A6 |  if_e	mov	local03, local05
253b4     08 00 90 AD |  if_e	jmp	#LR__3159
253b8                 | LR__3157
253b8                 | LR__3158
253b8     01 2E 06 F1 | 	add	local05, #1
253bc     48 FF 9F FD | 	jmp	#LR__3154
253c0                 | LR__3159
253c0     FF FF 7F FF 
253c4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
253c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
253cc     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
253d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
253d4     01 FA 65 A6 |  if_e	neg	result1, #1
253d8     78 01 90 AD |  if_e	jmp	#LR__3165
253dc     15 2F 02 F6 | 	mov	local05, local03
253e0     17 33 02 F6 | 	mov	local07, local05
253e4     02 32 66 F0 | 	shl	local07, #2
253e8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
253ec     F3 32 02 F1 | 	add	local07, ptr___system__dat__
253f0     19 31 0A FB | 	rdlong	local06, local07 wz
253f4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
253f8     58 00 90 AD |  if_e	jmp	#LR__3160
253fc     4C 30 06 F1 | 	add	local06, #76
25400     18 33 0A FB | 	rdlong	local07, local06 wz
25404     4C 30 86 F1 | 	sub	local06, #76
25408     48 00 90 AD |  if_e	jmp	#LR__3160
2540c     4C 30 06 F1 | 	add	local06, #76
25410     18 33 02 FB | 	rdlong	local07, local06
25414     19 2B 02 F6 | 	mov	local03, local07
25418     13 32 46 F7 | 	zerox	local07, #19
2541c     14 2A 46 F0 | 	shr	local03, #20
25420     02 2A 66 F0 | 	shl	local03, #2
25424     ED 2A 02 F1 | 	add	local03, __methods__
25428     15 2B 02 FB | 	rdlong	local03, local03
2542c     17 31 02 F6 | 	mov	local06, local05
25430     02 30 66 F0 | 	shl	local06, #2
25434     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25438     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2543c     18 13 02 FB | 	rdlong	arg01, local06
25440     F2 30 02 F6 | 	mov	local06, objptr
25444     19 E5 01 F6 | 	mov	objptr, local07
25448     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2544c     2D 2A 62 FD | 	call	local03
25450     18 E5 01 F6 | 	mov	objptr, local06
25454                 | LR__3160
25454     17 35 02 F6 | 	mov	local08, local05
25458     02 34 66 F0 | 	shl	local08, #2
2545c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25460     F3 34 02 F1 | 	add	local08, ptr___system__dat__
25464     1A 29 62 FC | 	wrlong	local02, local08
25468     00 28 0E F2 | 	cmp	local02, #0 wz
2546c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25470     18 00 90 5D |  if_ne	jmp	#LR__3161
25474     02 2E 66 F0 | 	shl	local05, #2
25478     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2547c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25480     17 01 68 FC | 	wrlong	#0, local05
25484     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25488     C4 00 90 FD | 	jmp	#LR__3164
2548c                 | LR__3161
2548c     17 37 02 F6 | 	mov	local09, local05
25490     04 36 66 F0 | 	shl	local09, #4
25494     24 E6 05 F1 | 	add	ptr___system__dat__, #36
25498     F3 36 02 F1 | 	add	local09, ptr___system__dat__
2549c     1B 13 02 F6 | 	mov	arg01, local09
254a0     13 15 02 F6 | 	mov	arg02, local01
254a4     10 16 06 F6 | 	mov	arg03, #16
254a8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
254ac     9C 4F B0 FD | 	call	#__system__strncpy
254b0     48 28 06 F1 | 	add	local02, #72
254b4     14 35 0A FB | 	rdlong	local08, local02 wz
254b8     48 28 86 F1 | 	sub	local02, #72
254bc     7C 00 90 AD |  if_e	jmp	#LR__3163
254c0     48 28 06 F1 | 	add	local02, #72
254c4     14 35 02 FB | 	rdlong	local08, local02
254c8     1A 39 02 F6 | 	mov	local10, local08
254cc     13 34 46 F7 | 	zerox	local08, #19
254d0     14 38 46 F0 | 	shr	local10, #20
254d4     02 38 66 F0 | 	shl	local10, #2
254d8     ED 38 02 F1 | 	add	local10, __methods__
254dc     1C 39 02 FB | 	rdlong	local10, local10
254e0     1B 13 02 F6 | 	mov	arg01, local09
254e4     F2 3A 02 F6 | 	mov	local11, objptr
254e8     1A E5 01 F6 | 	mov	objptr, local08
254ec     2D 38 62 FD | 	call	local10
254f0     1D E5 01 F6 | 	mov	objptr, local11
254f4     FD 12 0A F6 | 	mov	arg01, result1 wz
254f8     40 00 90 AD |  if_e	jmp	#LR__3162
254fc     17 35 02 F6 | 	mov	local08, local05
25500     02 34 66 F0 | 	shl	local08, #2
25504     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25508     F3 34 02 F1 | 	add	local08, ptr___system__dat__
2550c     1A 01 68 FC | 	wrlong	#0, local08
25510     02 2E 66 F0 | 	shl	local05, #2
25514     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25518     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2551c     17 01 68 FC | 	wrlong	#0, local05
25520     09 13 6A F6 | 	neg	arg01, arg01 wz
25524     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
25528     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2552c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25530     01 FA 65 56 |  if_ne	neg	result1, #1
25534     00 FA 05 A6 |  if_e	mov	result1, #0
25538     18 00 90 FD | 	jmp	#LR__3165
2553c                 | LR__3162
2553c                 | LR__3163
2553c     02 2E 66 F0 | 	shl	local05, #2
25540     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25544     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
25548     17 37 62 FC | 	wrlong	local09, local05
2554c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25550                 | LR__3164
25550     00 FA 05 F6 | 	mov	result1, #0
25554                 | LR__3165
25554     A7 F0 03 F6 | 	mov	ptra, fp
25558     B2 00 A0 FD | 	call	#popregs_
2555c                 | __system___mount_ret
2555c     2D 00 64 FD | 	ret
25560                 | 
25560                 | __system___chdir
25560     00 4A 05 F6 | 	mov	COUNT_, #0
25564     A8 00 A0 FD | 	call	#pushregs_
25568     40 F0 07 F1 | 	add	ptra, #64
2556c     04 4E 05 F1 | 	add	fp, #4
25570     A7 12 62 FC | 	wrlong	arg01, fp
25574     04 4E 05 F1 | 	add	fp, #4
25578     A7 14 02 F6 | 	mov	arg02, fp
2557c     08 4E 85 F1 | 	sub	fp, #8
25580     6C 4B B0 FD | 	call	#__system__stat
25584     3C 4E 05 F1 | 	add	fp, #60
25588     A7 FA 61 FC | 	wrlong	result1, fp
2558c     3C 4E 85 F1 | 	sub	fp, #60
25590     00 FA 0D F2 | 	cmp	result1, #0 wz
25594     3C 4E 05 51 |  if_ne	add	fp, #60
25598     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2559c     3C 4E 85 51 |  if_ne	sub	fp, #60
255a0     BC 00 90 5D |  if_ne	jmp	#LR__3172
255a4     10 4E 05 F1 | 	add	fp, #16
255a8     A7 12 02 FB | 	rdlong	arg01, fp
255ac     10 4E 85 F1 | 	sub	fp, #16
255b0     78 00 00 FF 
255b4     00 12 06 F5 | 	and	arg01, ##61440
255b8     08 00 00 FF 
255bc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
255c0     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
255c4     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
255c8     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
255cc     01 FA 65 56 |  if_ne	neg	result1, #1
255d0     8C 00 90 5D |  if_ne	jmp	#LR__3172
255d4     04 4E 05 F1 | 	add	fp, #4
255d8     A7 16 02 FB | 	rdlong	arg03, fp
255dc     04 4E 85 F1 | 	sub	fp, #4
255e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
255e4     2F 16 0E F2 | 	cmp	arg03, #47 wz
255e8     24 00 90 5D |  if_ne	jmp	#LR__3170
255ec     84 E6 05 F1 | 	add	ptr___system__dat__, #132
255f0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
255f4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
255f8     04 4E 05 F1 | 	add	fp, #4
255fc     A7 14 02 FB | 	rdlong	arg02, fp
25600     04 4E 85 F1 | 	sub	fp, #4
25604     00 17 06 F6 | 	mov	arg03, #256
25608     40 4E B0 FD | 	call	#__system__strncpy
2560c     4C 00 90 FD | 	jmp	#LR__3171
25610                 | LR__3170
25610     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25614     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25618     38 4E 05 F1 | 	add	fp, #56
2561c     A7 12 62 FC | 	wrlong	arg01, fp
25620     38 4E 85 F1 | 	sub	fp, #56
25624     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
25628     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2562c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
25630     00 17 06 F6 | 	mov	arg03, #256
25634     14 4E B0 FD | 	call	#__system__strncpy
25638     38 4E 05 F1 | 	add	fp, #56
2563c     A7 12 02 FB | 	rdlong	arg01, fp
25640     34 4E 85 F1 | 	sub	fp, #52
25644     A7 14 02 FB | 	rdlong	arg02, fp
25648     04 4E 85 F1 | 	sub	fp, #4
2564c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
25650     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
25654     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
25658     10 00 B0 FD | 	call	#__system____getvfsforfile
2565c                 | LR__3171
2565c     00 FA 05 F6 | 	mov	result1, #0
25660                 | LR__3172
25660     A7 F0 03 F6 | 	mov	ptra, fp
25664     B2 00 A0 FD | 	call	#popregs_
25668                 | __system___chdir_ret
25668     2D 00 64 FD | 	ret
2566c                 | 
2566c                 | __system____getvfsforfile
2566c     0E 4A 05 F6 | 	mov	COUNT_, #14
25670     A8 00 A0 FD | 	call	#pushregs_
25674     09 27 02 F6 | 	mov	local01, arg01
25678     0A 29 02 F6 | 	mov	local02, arg02
2567c     0B 2B 02 F6 | 	mov	local03, arg03
25680     97 10 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
25684                 | LR__3180
25684     14 FB C1 FA | 	rdbyte	result1, local02
25688     2F FA 0D F2 | 	cmp	result1, #47 wz
2568c     01 28 06 A1 |  if_e	add	local02, #1
25690     14 2D C2 AA |  if_e	rdbyte	local04, local02
25694     01 28 86 A1 |  if_e	sub	local02, #1
25698     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
2569c     01 28 06 A1 |  if_e	add	local02, #1
256a0     E0 FF 9F AD |  if_e	jmp	#LR__3180
256a4                 | LR__3181
256a4     14 2D C2 FA | 	rdbyte	local04, local02
256a8     2F 2C 0E F2 | 	cmp	local04, #47 wz
256ac     14 00 90 5D |  if_ne	jmp	#LR__3182
256b0     13 13 02 F6 | 	mov	arg01, local01
256b4     14 15 02 F6 | 	mov	arg02, local02
256b8     00 17 06 F6 | 	mov	arg03, #256
256bc     8C 4D B0 FD | 	call	#__system__strncpy
256c0     7C 00 90 FD | 	jmp	#LR__3184
256c4                 | LR__3182
256c4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
256c8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
256cc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
256d0     13 13 02 F6 | 	mov	arg01, local01
256d4     00 17 06 F6 | 	mov	arg03, #256
256d8     70 4D B0 FD | 	call	#__system__strncpy
256dc     14 2D CA FA | 	rdbyte	local04, local02 wz
256e0     5C 00 90 AD |  if_e	jmp	#LR__3183
256e4     14 2D C2 FA | 	rdbyte	local04, local02
256e8     2E 2C 0E F2 | 	cmp	local04, #46 wz
256ec     01 28 06 A1 |  if_e	add	local02, #1
256f0     14 2F C2 AA |  if_e	rdbyte	local05, local02
256f4     01 28 86 A1 |  if_e	sub	local02, #1
256f8     17 31 02 A6 |  if_e	mov	local06, local05
256fc     07 30 4E A7 |  if_e	zerox	local06, #7 wz
25700     3C 00 90 AD |  if_e	jmp	#LR__3183
25704     13 2F C2 FA | 	rdbyte	local05, local01
25708     2F 2E 0E F2 | 	cmp	local05, #47 wz
2570c     01 26 06 A1 |  if_e	add	local01, #1
25710     13 2D C2 AA |  if_e	rdbyte	local04, local01
25714     01 26 86 A1 |  if_e	sub	local01, #1
25718     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
2571c     A4 01 00 5F 
25720     E4 15 06 56 |  if_ne	mov	arg02, ##@LR__5310
25724     13 13 02 56 |  if_ne	mov	arg01, local01
25728     00 17 06 56 |  if_ne	mov	arg03, #256
2572c     68 4D B0 5D |  if_ne	call	#__system__strncat
25730     13 13 02 F6 | 	mov	arg01, local01
25734     14 15 02 F6 | 	mov	arg02, local02
25738     00 17 06 F6 | 	mov	arg03, #256
2573c     58 4D B0 FD | 	call	#__system__strncat
25740                 | LR__3183
25740                 | LR__3184
25740     13 13 02 F6 | 	mov	arg01, local01
25744     10 4F B0 FD | 	call	#__system___normalizeName
25748     13 2D CA FA | 	rdbyte	local04, local01 wz
2574c     1C 00 90 AD |  if_e	jmp	#LR__3185
25750     13 2D C2 FA | 	rdbyte	local04, local01
25754     2F 2C 0E F2 | 	cmp	local04, #47 wz
25758     01 26 06 A1 |  if_e	add	local01, #1
2575c     13 31 C2 AA |  if_e	rdbyte	local06, local01
25760     01 26 86 A1 |  if_e	sub	local01, #1
25764     00 30 4E A2 |  if_e	cmps	local06, #0 wz
25768     18 00 90 5D |  if_ne	jmp	#LR__3186
2576c                 | LR__3185
2576c     01 00 00 FF 
25770     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
25774     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
25778     01 00 00 FF 
2577c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
25780     EC 01 90 FD | 	jmp	#LR__3200
25784                 | LR__3186
25784     00 32 06 F6 | 	mov	local07, #0
25788                 | LR__3187
25788     04 32 56 F2 | 	cmps	local07, #4 wc
2578c     CC 01 90 3D |  if_ae	jmp	#LR__3199
25790     19 31 02 F6 | 	mov	local06, local07
25794     02 30 66 F0 | 	shl	local06, #2
25798     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2579c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
257a0     18 31 0A FB | 	rdlong	local06, local06 wz
257a4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
257a8     A8 01 90 AD |  if_e	jmp	#LR__3198
257ac     19 2D 02 F6 | 	mov	local04, local07
257b0     02 2C 66 F0 | 	shl	local04, #2
257b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
257b8     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
257bc     16 13 02 FB | 	rdlong	arg01, local04
257c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
257c4     09 35 02 F6 | 	mov	local08, arg01
257c8     97 06 48 FB | 	callpa	#(@LR__3189-@LR__3188)>>2,fcache_load_ptr_
257cc                 | LR__3188
257cc     1A FB C9 FA | 	rdbyte	result1, local08 wz
257d0     01 34 06 51 |  if_ne	add	local08, #1
257d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3188
257d8                 | LR__3189
257d8     09 35 82 F1 | 	sub	local08, arg01
257dc     1A 37 02 F6 | 	mov	local09, local08
257e0     1B 2D 02 F6 | 	mov	local04, local09
257e4     13 2D 02 F1 | 	add	local04, local01
257e8     16 31 C2 FA | 	rdbyte	local06, local04
257ec     2F 30 0E F2 | 	cmp	local06, #47 wz
257f0     1B 39 02 56 |  if_ne	mov	local10, local09
257f4     13 39 02 51 |  if_ne	add	local10, local01
257f8     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
257fc     54 01 90 5D |  if_ne	jmp	#LR__3197
25800     19 17 02 F6 | 	mov	arg03, local07
25804     02 16 66 F0 | 	shl	arg03, #2
25808     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2580c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
25810     0B 15 02 FB | 	rdlong	arg02, arg03
25814     1B 17 02 F6 | 	mov	arg03, local09
25818     13 13 02 F6 | 	mov	arg01, local01
2581c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25820     D4 4C B0 FD | 	call	#__system__strncmp
25824     00 FA 4D F2 | 	cmps	result1, #0 wz
25828     28 01 90 5D |  if_ne	jmp	#LR__3197
2582c     19 3B 02 F6 | 	mov	local11, local07
25830     02 3A 66 F0 | 	shl	local11, #2
25834     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25838     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
2583c     1D 3D 02 FB | 	rdlong	local12, local11
25840     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25844     97 22 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
25848                 | LR__3190
25848     1B 31 02 F6 | 	mov	local06, local09
2584c     01 30 06 F1 | 	add	local06, #1
25850     13 31 02 F1 | 	add	local06, local01
25854     18 3B C2 FA | 	rdbyte	local11, local06
25858     2E 3A 0E F2 | 	cmp	local11, #46 wz
2585c     2C 00 90 5D |  if_ne	jmp	#LR__3192
25860     1B 3B 02 F6 | 	mov	local11, local09
25864     02 3A 06 F1 | 	add	local11, #2
25868     13 3B 02 F1 | 	add	local11, local01
2586c     1D 39 C2 FA | 	rdbyte	local10, local11
25870     2F 38 0E F2 | 	cmp	local10, #47 wz
25874     1B 3F 02 56 |  if_ne	mov	local13, local09
25878     02 3E 06 51 |  if_ne	add	local13, #2
2587c     13 3F 02 51 |  if_ne	add	local13, local01
25880     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
25884     01 36 06 A1 |  if_e	add	local09, #1
25888     BC FF 9F AD |  if_e	jmp	#LR__3190
2588c                 | LR__3191
2588c                 | LR__3192
2588c     00 2A 0E F2 | 	cmp	local03, #0 wz
25890     15 13 02 56 |  if_ne	mov	arg01, local03
25894     13 15 02 56 |  if_ne	mov	arg02, local01
25898     00 17 06 56 |  if_ne	mov	arg03, #256
2589c     AC 4B B0 5D |  if_ne	call	#__system__strncpy
258a0     13 15 02 F6 | 	mov	arg02, local01
258a4     1B 15 02 F1 | 	add	arg02, local09
258a8     01 14 06 F1 | 	add	arg02, #1
258ac     13 13 02 F6 | 	mov	arg01, local01
258b0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
258b4     13 13 02 F6 | 	mov	arg01, local01
258b8     09 35 02 F6 | 	mov	local08, arg01
258bc     97 06 48 FB | 	callpa	#(@LR__3194-@LR__3193)>>2,fcache_load_ptr_
258c0                 | LR__3193
258c0     1A FB C9 FA | 	rdbyte	result1, local08 wz
258c4     01 34 06 51 |  if_ne	add	local08, #1
258c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3193
258cc                 | LR__3194
258cc     09 35 82 F1 | 	sub	local08, arg01
258d0     1A 37 02 F6 | 	mov	local09, local08
258d4                 | LR__3195
258d4     01 36 56 F2 | 	cmps	local09, #1 wc
258d8     70 00 90 CD |  if_b	jmp	#LR__3196
258dc     1B 2D 02 F6 | 	mov	local04, local09
258e0     13 2D 02 F1 | 	add	local04, local01
258e4     16 3B C2 FA | 	rdbyte	local11, local04
258e8     2F 3A 0E F2 | 	cmp	local11, #47 wz
258ec     1B 3B 02 A6 |  if_e	mov	local11, local09
258f0     13 3B 02 A1 |  if_e	add	local11, local01
258f4     1D 01 48 AC |  if_e	wrbyte	#0, local11
258f8     01 36 86 A1 |  if_e	sub	local09, #1
258fc     D4 FF 9F AD |  if_e	jmp	#LR__3195
25900     1B 2D 02 F6 | 	mov	local04, local09
25904     13 2D 02 F1 | 	add	local04, local01
25908     16 3B C2 FA | 	rdbyte	local11, local04
2590c     2E 3A 0E F2 | 	cmp	local11, #46 wz
25910     38 00 90 5D |  if_ne	jmp	#LR__3196
25914     02 36 56 F2 | 	cmps	local09, #2 wc
25918     30 00 90 CD |  if_b	jmp	#LR__3196
2591c     1B 41 02 F6 | 	mov	local14, local09
25920     01 40 86 F1 | 	sub	local14, #1
25924     13 41 02 F1 | 	add	local14, local01
25928     20 2F C2 FA | 	rdbyte	local05, local14
2592c     2F 2E 0E F2 | 	cmp	local05, #47 wz
25930     18 00 90 5D |  if_ne	jmp	#LR__3196
25934     1B 2D 02 F6 | 	mov	local04, local09
25938     01 2C 86 F1 | 	sub	local04, #1
2593c     13 2D 02 F1 | 	add	local04, local01
25940     16 01 48 FC | 	wrbyte	#0, local04
25944     02 36 86 F1 | 	sub	local09, #2
25948     88 FF 9F FD | 	jmp	#LR__3195
2594c                 | LR__3196
2594c     1E FB 01 F6 | 	mov	result1, local12
25950     1C 00 90 FD | 	jmp	#LR__3200
25954                 | LR__3197
25954                 | LR__3198
25954     01 32 06 F1 | 	add	local07, #1
25958     2C FE 9F FD | 	jmp	#LR__3187
2595c                 | LR__3199
2595c     02 00 00 FF 
25960     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25964     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
25968     02 00 00 FF 
2596c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25970                 | LR__3200
25970     A7 F0 03 F6 | 	mov	ptra, fp
25974     B2 00 A0 FD | 	call	#popregs_
25978                 | __system____getvfsforfile_ret
25978     2D 00 64 FD | 	ret
2597c                 | 
2597c                 | __system___basic_open
2597c     05 4A 05 F6 | 	mov	COUNT_, #5
25980     A8 00 A0 FD | 	call	#pushregs_
25984     0A 27 02 F6 | 	mov	local01, arg02
25988     0B 29 02 F6 | 	mov	local02, arg03
2598c     0C 2B 02 F6 | 	mov	local03, arg04
25990     00 2C 06 F6 | 	mov	local04, #0
25994     8C 4A B0 FD | 	call	#__system____getftab
25998     FD 2E 0A F6 | 	mov	local05, result1 wz
2599c     18 00 90 5D |  if_ne	jmp	#LR__3210
259a0     EE 12 02 F6 | 	mov	arg01, abortchain
259a4     0C 14 06 F6 | 	mov	arg02, #12
259a8     01 16 06 F6 | 	mov	arg03, #1
259ac     DA 00 A0 FD | 	call	#__longjmp
259b0     01 FA 65 F6 | 	neg	result1, #1
259b4     14 01 90 FD | 	jmp	#LR__3219
259b8                 | LR__3210
259b8     08 2E 06 F1 | 	add	local05, #8
259bc     17 FB 09 FB | 	rdlong	result1, local05 wz
259c0     08 2E 86 F1 | 	sub	local05, #8
259c4     17 13 02 56 |  if_ne	mov	arg01, local05
259c8     AC 41 B0 5D |  if_ne	call	#__system___closeraw
259cc     00 26 0E F2 | 	cmp	local01, #0 wz
259d0     00 28 0E A2 |  if_e	cmp	local02, #0 wz
259d4     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
259d8     3C 00 90 AD |  if_e	jmp	#LR__3212
259dc     0C 12 06 F6 | 	mov	arg01, #12
259e0     94 36 B0 FD | 	call	#__system___gc_alloc_managed
259e4     FD 2C 0A F6 | 	mov	local04, result1 wz
259e8     18 00 90 5D |  if_ne	jmp	#LR__3211
259ec     EE 12 02 F6 | 	mov	arg01, abortchain
259f0     07 14 06 F6 | 	mov	arg02, #7
259f4     01 16 06 F6 | 	mov	arg03, #1
259f8     DA 00 A0 FD | 	call	#__longjmp
259fc     01 FA 65 F6 | 	neg	result1, #1
25a00     C8 00 90 FD | 	jmp	#LR__3219
25a04                 | LR__3211
25a04     16 01 68 FC | 	wrlong	#0, local04
25a08     04 2C 06 F1 | 	add	local04, #4
25a0c     16 01 68 FC | 	wrlong	#0, local04
25a10     04 2C 86 F1 | 	sub	local04, #4
25a14     17 2D 62 FC | 	wrlong	local04, local05
25a18                 | LR__3212
25a18     00 26 0E F2 | 	cmp	local01, #0 wz
25a1c     20 00 90 AD |  if_e	jmp	#LR__3213
25a20     16 27 62 FC | 	wrlong	local01, local04
25a24     16 FB 01 F6 | 	mov	result1, local04
25a28     00 C8 04 FF 
25a2c     00 FA 45 F5 | 	or	result1, ##160432128
25a30     1C 2E 06 F1 | 	add	local05, #28
25a34     17 FB 61 FC | 	wrlong	result1, local05
25a38     1C 2E 86 F1 | 	sub	local05, #28
25a3c     0C 00 90 FD | 	jmp	#LR__3214
25a40                 | LR__3213
25a40     1C 2E 06 F1 | 	add	local05, #28
25a44     17 01 68 FC | 	wrlong	#0, local05
25a48     1C 2E 86 F1 | 	sub	local05, #28
25a4c                 | LR__3214
25a4c     00 28 0E F2 | 	cmp	local02, #0 wz
25a50     28 00 90 AD |  if_e	jmp	#LR__3215
25a54     04 2C 06 F1 | 	add	local04, #4
25a58     16 29 62 FC | 	wrlong	local02, local04
25a5c     04 2C 86 F1 | 	sub	local04, #4
25a60     16 FB 01 F6 | 	mov	result1, local04
25a64     00 D0 04 FF 
25a68     00 FA 45 F5 | 	or	result1, ##161480704
25a6c     20 2E 06 F1 | 	add	local05, #32
25a70     17 FB 61 FC | 	wrlong	result1, local05
25a74     20 2E 86 F1 | 	sub	local05, #32
25a78     0C 00 90 FD | 	jmp	#LR__3216
25a7c                 | LR__3215
25a7c     20 2E 06 F1 | 	add	local05, #32
25a80     17 01 68 FC | 	wrlong	#0, local05
25a84     20 2E 86 F1 | 	sub	local05, #32
25a88                 | LR__3216
25a88     00 2A 0E F2 | 	cmp	local03, #0 wz
25a8c     24 00 90 AD |  if_e	jmp	#LR__3217
25a90     08 2C 06 F1 | 	add	local04, #8
25a94     16 2B 62 FC | 	wrlong	local03, local04
25a98     08 2C 86 F1 | 	sub	local04, #8
25a9c     00 D8 04 FF 
25aa0     00 2C 46 F5 | 	or	local04, ##162529280
25aa4     24 2E 06 F1 | 	add	local05, #36
25aa8     17 2D 62 FC | 	wrlong	local04, local05
25aac     24 2E 86 F1 | 	sub	local05, #36
25ab0     0C 00 90 FD | 	jmp	#LR__3218
25ab4                 | LR__3217
25ab4     24 2E 06 F1 | 	add	local05, #36
25ab8     17 01 68 FC | 	wrlong	#0, local05
25abc     24 2E 86 F1 | 	sub	local05, #36
25ac0                 | LR__3218
25ac0     08 2E 06 F1 | 	add	local05, #8
25ac4     17 0F 68 FC | 	wrlong	#7, local05
25ac8     00 FA 05 F6 | 	mov	result1, #0
25acc                 | LR__3219
25acc     A7 F0 03 F6 | 	mov	ptra, fp
25ad0     B2 00 A0 FD | 	call	#popregs_
25ad4                 | __system___basic_open_ret
25ad4     2D 00 64 FD | 	ret
25ad8                 | 
25ad8                 | __system___basic_open_string
25ad8     04 4A 05 F6 | 	mov	COUNT_, #4
25adc     A8 00 A0 FD | 	call	#pushregs_
25ae0     0A 27 02 F6 | 	mov	local01, arg02
25ae4     0B 29 02 F6 | 	mov	local02, arg03
25ae8     38 49 B0 FD | 	call	#__system____getftab
25aec     FD 2A 0A F6 | 	mov	local03, result1 wz
25af0     18 00 90 5D |  if_ne	jmp	#LR__3220
25af4     EE 12 02 F6 | 	mov	arg01, abortchain
25af8     0C 14 06 F6 | 	mov	arg02, #12
25afc     01 16 06 F6 | 	mov	arg03, #1
25b00     DA 00 A0 FD | 	call	#__longjmp
25b04     01 FA 65 F6 | 	neg	result1, #1
25b08     5C 00 90 FD | 	jmp	#LR__3222
25b0c                 | LR__3220
25b0c     08 2A 06 F1 | 	add	local03, #8
25b10     15 19 0A FB | 	rdlong	arg04, local03 wz
25b14     08 2A 86 F1 | 	sub	local03, #8
25b18     15 13 02 56 |  if_ne	mov	arg01, local03
25b1c     58 40 B0 5D |  if_ne	call	#__system___closeraw
25b20     13 15 02 F6 | 	mov	arg02, local01
25b24     14 17 02 F6 | 	mov	arg03, local02
25b28     15 13 02 F6 | 	mov	arg01, local03
25b2c     B6 19 06 F6 | 	mov	arg04, #438
25b30     40 3D B0 FD | 	call	#__system___openraw
25b34     FD 2C 02 F6 | 	mov	local04, result1
25b38     00 2C 56 F2 | 	cmps	local04, #0 wc
25b3c     24 00 90 3D |  if_ae	jmp	#LR__3221
25b40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25b44     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
25b48     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25b4c     EE 12 02 F6 | 	mov	arg01, abortchain
25b50     FD 14 02 FB | 	rdlong	arg02, result1
25b54     01 16 06 F6 | 	mov	arg03, #1
25b58     DA 00 A0 FD | 	call	#__longjmp
25b5c     01 FA 65 F6 | 	neg	result1, #1
25b60     04 00 90 FD | 	jmp	#LR__3222
25b64                 | LR__3221
25b64     16 FB 01 F6 | 	mov	result1, local04
25b68                 | LR__3222
25b68     A7 F0 03 F6 | 	mov	ptra, fp
25b6c     B2 00 A0 FD | 	call	#popregs_
25b70                 | __system___basic_open_string_ret
25b70     2D 00 64 FD | 	ret
25b74                 | 
25b74                 | __system___basic_print_char
25b74     03 4A 05 F6 | 	mov	COUNT_, #3
25b78     A8 00 A0 FD | 	call	#pushregs_
25b7c     0A 27 02 F6 | 	mov	local01, arg02
25b80     44 50 B0 FD | 	call	#__system___gettxfunc
25b84     FD 28 0A F6 | 	mov	local02, result1 wz
25b88     00 FA 05 A6 |  if_e	mov	result1, #0
25b8c     30 00 90 AD |  if_e	jmp	#LR__3230
25b90     14 2B 02 F6 | 	mov	local03, local02
25b94     13 28 46 F7 | 	zerox	local02, #19
25b98     14 2A 46 F0 | 	shr	local03, #20
25b9c     02 2A 66 F0 | 	shl	local03, #2
25ba0     ED 2A 02 F1 | 	add	local03, __methods__
25ba4     15 2B 02 FB | 	rdlong	local03, local03
25ba8     13 13 02 F6 | 	mov	arg01, local01
25bac     F2 26 02 F6 | 	mov	local01, objptr
25bb0     14 E5 01 F6 | 	mov	objptr, local02
25bb4     2D 2A 62 FD | 	call	local03
25bb8     13 E5 01 F6 | 	mov	objptr, local01
25bbc     01 FA 05 F6 | 	mov	result1, #1
25bc0                 | LR__3230
25bc0     A7 F0 03 F6 | 	mov	ptra, fp
25bc4     B2 00 A0 FD | 	call	#popregs_
25bc8                 | __system___basic_print_char_ret
25bc8     2D 00 64 FD | 	ret
25bcc                 | 
25bcc                 | __system___basic_print_string
25bcc     03 4A 05 F6 | 	mov	COUNT_, #3
25bd0     A8 00 A0 FD | 	call	#pushregs_
25bd4     0A 27 02 F6 | 	mov	local01, arg02
25bd8     0B 29 02 F6 | 	mov	local02, arg03
25bdc     E8 4F B0 FD | 	call	#__system___gettxfunc
25be0     FD 2A 0A F6 | 	mov	local03, result1 wz
25be4     00 FA 05 A6 |  if_e	mov	result1, #0
25be8     18 00 90 AD |  if_e	jmp	#LR__3240
25bec     00 26 0E F2 | 	cmp	local01, #0 wz
25bf0     00 FA 05 A6 |  if_e	mov	result1, #0
25bf4     15 13 02 56 |  if_ne	mov	arg01, local03
25bf8     14 15 02 56 |  if_ne	mov	arg02, local02
25bfc     13 17 02 56 |  if_ne	mov	arg03, local01
25c00     08 02 B0 5D |  if_ne	call	#__system___fmtstr
25c04                 | LR__3240
25c04     A7 F0 03 F6 | 	mov	ptra, fp
25c08     B2 00 A0 FD | 	call	#popregs_
25c0c                 | __system___basic_print_string_ret
25c0c     2D 00 64 FD | 	ret
25c10                 | 
25c10                 | __system___basic_print_integer
25c10     04 4A 05 F6 | 	mov	COUNT_, #4
25c14     A8 00 A0 FD | 	call	#pushregs_
25c18     0A 27 02 F6 | 	mov	local01, arg02
25c1c     0B 29 02 F6 | 	mov	local02, arg03
25c20     0C 2B 02 F6 | 	mov	local03, arg04
25c24     A0 4F B0 FD | 	call	#__system___gettxfunc
25c28     FD 2C 0A F6 | 	mov	local04, result1 wz
25c2c     00 FA 05 A6 |  if_e	mov	result1, #0
25c30     16 13 02 56 |  if_ne	mov	arg01, local04
25c34     14 15 02 56 |  if_ne	mov	arg02, local02
25c38     13 17 02 56 |  if_ne	mov	arg03, local01
25c3c     15 19 02 56 |  if_ne	mov	arg04, local03
25c40     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
25c44     A7 F0 03 F6 | 	mov	ptra, fp
25c48     B2 00 A0 FD | 	call	#popregs_
25c4c                 | __system___basic_print_integer_ret
25c4c     2D 00 64 FD | 	ret
25c50                 | 
25c50                 | __system___basic_print_unsigned
25c50     03 4A 05 F6 | 	mov	COUNT_, #3
25c54     A8 00 A0 FD | 	call	#pushregs_
25c58     0A 27 02 F6 | 	mov	local01, arg02
25c5c     0B 29 02 F6 | 	mov	local02, arg03
25c60     0C 2B 02 F6 | 	mov	local03, arg04
25c64     60 4F B0 FD | 	call	#__system___gettxfunc
25c68     FD 12 0A F6 | 	mov	arg01, result1 wz
25c6c     00 FA 05 A6 |  if_e	mov	result1, #0
25c70     3A 28 26 54 |  if_ne	bith	local02, #58
25c74     14 15 02 56 |  if_ne	mov	arg02, local02
25c78     13 17 02 56 |  if_ne	mov	arg03, local01
25c7c     15 19 02 56 |  if_ne	mov	arg04, local03
25c80     74 02 B0 5D |  if_ne	call	#__system___fmtnum
25c84     A7 F0 03 F6 | 	mov	ptra, fp
25c88     B2 00 A0 FD | 	call	#popregs_
25c8c                 | __system___basic_print_unsigned_ret
25c8c     2D 00 64 FD | 	ret
25c90                 | 
25c90                 | __system___basic_get_char
25c90     03 4A 05 F6 | 	mov	COUNT_, #3
25c94     A8 00 A0 FD | 	call	#pushregs_
25c98     70 4F B0 FD | 	call	#__system___getrxfunc
25c9c     FD 26 0A F6 | 	mov	local01, result1 wz
25ca0     01 FA 65 A6 |  if_e	neg	result1, #1
25ca4     28 00 90 AD |  if_e	jmp	#LR__3250
25ca8     13 29 02 F6 | 	mov	local02, local01
25cac     13 26 46 F7 | 	zerox	local01, #19
25cb0     14 28 46 F0 | 	shr	local02, #20
25cb4     02 28 66 F0 | 	shl	local02, #2
25cb8     ED 28 02 F1 | 	add	local02, __methods__
25cbc     14 29 02 FB | 	rdlong	local02, local02
25cc0     F2 2A 02 F6 | 	mov	local03, objptr
25cc4     13 E5 01 F6 | 	mov	objptr, local01
25cc8     2D 28 62 FD | 	call	local02
25ccc     15 E5 01 F6 | 	mov	objptr, local03
25cd0                 | LR__3250
25cd0     A7 F0 03 F6 | 	mov	ptra, fp
25cd4     B2 00 A0 FD | 	call	#popregs_
25cd8                 | __system___basic_get_char_ret
25cd8     2D 00 64 FD | 	ret
25cdc                 | 
25cdc                 | __system___basic_put
25cdc     04 4A 05 F6 | 	mov	COUNT_, #4
25ce0     A8 00 A0 FD | 	call	#pushregs_
25ce4     0D 27 02 F6 | 	mov	local01, arg05
25ce8     13 19 02 FD | 	qmul	arg04, local01
25cec     09 29 02 F6 | 	mov	local02, arg01
25cf0     0B 2B 02 F6 | 	mov	local03, arg03
25cf4     00 14 0E F2 | 	cmp	arg02, #0 wz
25cf8     01 14 86 51 |  if_ne	sub	arg02, #1
25cfc     14 13 02 56 |  if_ne	mov	arg01, local02
25d00     00 16 06 56 |  if_ne	mov	arg03, #0
25d04     18 2C 62 FD | 	getqx	local04
25d08     60 45 B0 5D |  if_ne	call	#__system__lseek
25d0c     15 15 02 F6 | 	mov	arg02, local03
25d10     16 17 02 F6 | 	mov	arg03, local04
25d14     14 13 02 F6 | 	mov	arg01, local02
25d18     9C 44 B0 FD | 	call	#__system__write
25d1c     FD 2C 02 F6 | 	mov	local04, result1
25d20     01 2C 56 F2 | 	cmps	local04, #1 wc
25d24     10 00 90 CD |  if_b	jmp	#LR__3260
25d28     16 89 02 F6 | 	mov	muldiva_, local04
25d2c     13 8B 02 F6 | 	mov	muldivb_, local01
25d30     BA 00 A0 FD | 	call	#divide_
25d34     45 2D 02 F6 | 	mov	local04, muldivb_
25d38                 | LR__3260
25d38     16 FB 01 F6 | 	mov	result1, local04
25d3c     A7 F0 03 F6 | 	mov	ptra, fp
25d40     B2 00 A0 FD | 	call	#popregs_
25d44                 | __system___basic_put_ret
25d44     2D 00 64 FD | 	ret
25d48                 | 
25d48                 | __system___basic_get
25d48     04 4A 05 F6 | 	mov	COUNT_, #4
25d4c     A8 00 A0 FD | 	call	#pushregs_
25d50     0D 27 02 F6 | 	mov	local01, arg05
25d54     13 19 02 FD | 	qmul	arg04, local01
25d58     09 29 02 F6 | 	mov	local02, arg01
25d5c     0B 2B 02 F6 | 	mov	local03, arg03
25d60     00 14 0E F2 | 	cmp	arg02, #0 wz
25d64     01 14 86 51 |  if_ne	sub	arg02, #1
25d68     14 13 02 56 |  if_ne	mov	arg01, local02
25d6c     00 16 06 56 |  if_ne	mov	arg03, #0
25d70     18 2C 62 FD | 	getqx	local04
25d74     F4 44 B0 5D |  if_ne	call	#__system__lseek
25d78     15 15 02 F6 | 	mov	arg02, local03
25d7c     16 17 02 F6 | 	mov	arg03, local04
25d80     14 13 02 F6 | 	mov	arg01, local02
25d84     6C 44 B0 FD | 	call	#__system__read
25d88     FD 2C 02 F6 | 	mov	local04, result1
25d8c     01 2C 56 F2 | 	cmps	local04, #1 wc
25d90     10 00 90 CD |  if_b	jmp	#LR__3270
25d94     16 89 02 F6 | 	mov	muldiva_, local04
25d98     13 8B 02 F6 | 	mov	muldivb_, local01
25d9c     BA 00 A0 FD | 	call	#divide_
25da0     45 2D 02 F6 | 	mov	local04, muldivb_
25da4                 | LR__3270
25da4     16 FB 01 F6 | 	mov	result1, local04
25da8     A7 F0 03 F6 | 	mov	ptra, fp
25dac     B2 00 A0 FD | 	call	#popregs_
25db0                 | __system___basic_get_ret
25db0     2D 00 64 FD | 	ret
25db4                 | 
25db4                 | __system___fmtchar
25db4     00 4A 05 F6 | 	mov	COUNT_, #0
25db8     A8 00 A0 FD | 	call	#pushregs_
25dbc     10 F0 07 F1 | 	add	ptra, #16
25dc0     04 4E 05 F1 | 	add	fp, #4
25dc4     A7 12 62 FC | 	wrlong	arg01, fp
25dc8     04 4E 05 F1 | 	add	fp, #4
25dcc     A7 14 62 FC | 	wrlong	arg02, fp
25dd0     04 4E 05 F1 | 	add	fp, #4
25dd4     A7 16 62 FC | 	wrlong	arg03, fp
25dd8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
25ddc     A7 16 62 FC | 	wrlong	arg03, fp
25de0     08 4E 85 F1 | 	sub	fp, #8
25de4     A7 12 02 FB | 	rdlong	arg01, fp
25de8     04 4E 05 F1 | 	add	fp, #4
25dec     A7 14 02 FB | 	rdlong	arg02, fp
25df0     04 4E 05 F1 | 	add	fp, #4
25df4     A7 16 02 F6 | 	mov	arg03, fp
25df8     0C 4E 85 F1 | 	sub	fp, #12
25dfc     0C 00 B0 FD | 	call	#__system___fmtstr
25e00     A7 F0 03 F6 | 	mov	ptra, fp
25e04     B2 00 A0 FD | 	call	#popregs_
25e08                 | __system___fmtchar_ret
25e08     2D 00 64 FD | 	ret
25e0c                 | 
25e0c                 | __system___fmtstr
25e0c     09 4A 05 F6 | 	mov	COUNT_, #9
25e10     A8 00 A0 FD | 	call	#pushregs_
25e14     09 27 02 F6 | 	mov	local01, arg01
25e18     0A 29 02 F6 | 	mov	local02, arg02
25e1c     0B 2B 02 F6 | 	mov	local03, arg03
25e20     14 19 E2 F8 | 	getbyte	arg04, local02, #0
25e24     15 13 02 F6 | 	mov	arg01, local03
25e28     09 2D 02 F6 | 	mov	local04, arg01
25e2c     97 06 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
25e30                 | LR__3280
25e30     16 FB C9 FA | 	rdbyte	result1, local04 wz
25e34     01 2C 06 51 |  if_ne	add	local04, #1
25e38     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
25e3c                 | LR__3281
25e3c     09 2D 82 F1 | 	sub	local04, arg01
25e40     00 18 0E F2 | 	cmp	arg04, #0 wz
25e44     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
25e48     14 15 02 F6 | 	mov	arg02, local02
25e4c     16 17 02 F6 | 	mov	arg03, local04
25e50     13 13 02 F6 | 	mov	arg01, local01
25e54     02 18 06 F6 | 	mov	arg04, #2
25e58     BC 49 B0 FD | 	call	#__system___fmtpad
25e5c     FD 2E 02 F6 | 	mov	local05, result1
25e60     00 2E 56 F2 | 	cmps	local05, #0 wc
25e64     17 FB 01 C6 |  if_b	mov	result1, local05
25e68     80 00 90 CD |  if_b	jmp	#LR__3284
25e6c     01 2C 56 F2 | 	cmps	local04, #1 wc
25e70     50 00 90 CD |  if_b	jmp	#LR__3283
25e74     16 31 02 F6 | 	mov	local06, local04
25e78                 | LR__3282
25e78     13 33 02 F6 | 	mov	local07, local01
25e7c     13 35 02 F6 | 	mov	local08, local01
25e80     13 32 46 F7 | 	zerox	local07, #19
25e84     14 34 46 F0 | 	shr	local08, #20
25e88     02 34 66 F0 | 	shl	local08, #2
25e8c     ED 34 02 F1 | 	add	local08, __methods__
25e90     1A 35 02 FB | 	rdlong	local08, local08
25e94     15 13 C2 FA | 	rdbyte	arg01, local03
25e98     F2 36 02 F6 | 	mov	local09, objptr
25e9c     19 E5 01 F6 | 	mov	objptr, local07
25ea0     01 2A 06 F1 | 	add	local03, #1
25ea4     2D 34 62 FD | 	call	local08
25ea8     1B E5 01 F6 | 	mov	objptr, local09
25eac     FD 36 02 F6 | 	mov	local09, result1
25eb0     00 36 56 F2 | 	cmps	local09, #0 wc
25eb4     1B FB 01 C6 |  if_b	mov	result1, local09
25eb8     30 00 90 CD |  if_b	jmp	#LR__3284
25ebc     1B 2F 02 F1 | 	add	local05, local09
25ec0     ED 31 6E FB | 	djnz	local06, #LR__3282
25ec4                 | LR__3283
25ec4     14 15 02 F6 | 	mov	arg02, local02
25ec8     16 17 02 F6 | 	mov	arg03, local04
25ecc     13 13 02 F6 | 	mov	arg01, local01
25ed0     01 18 06 F6 | 	mov	arg04, #1
25ed4     40 49 B0 FD | 	call	#__system___fmtpad
25ed8     FD 36 02 F6 | 	mov	local09, result1
25edc     00 36 56 F2 | 	cmps	local09, #0 wc
25ee0     1B FB 01 C6 |  if_b	mov	result1, local09
25ee4     1B 2F 02 31 |  if_ae	add	local05, local09
25ee8     17 FB 01 36 |  if_ae	mov	result1, local05
25eec                 | LR__3284
25eec     A7 F0 03 F6 | 	mov	ptra, fp
25ef0     B2 00 A0 FD | 	call	#popregs_
25ef4                 | __system___fmtstr_ret
25ef4     2D 00 64 FD | 	ret
25ef8                 | 
25ef8                 | __system___fmtnum
25ef8     0B 4A 05 F6 | 	mov	COUNT_, #11
25efc     A8 00 A0 FD | 	call	#pushregs_
25f00     09 27 02 F6 | 	mov	local01, arg01
25f04     0A 29 02 F6 | 	mov	local02, arg02
25f08     0B 2B 02 F6 | 	mov	local03, arg03
25f0c     0C 2D 02 F6 | 	mov	local04, arg04
25f10     F8 2F 02 F6 | 	mov	local05, ptra
25f14     17 31 02 F6 | 	mov	local06, local05
25f18     00 32 06 F6 | 	mov	local07, #0
25f1c     14 35 02 F6 | 	mov	local08, local02
25f20     10 34 46 F0 | 	shr	local08, #16
25f24     3F 34 06 F5 | 	and	local08, #63
25f28     14 37 E2 F8 | 	getbyte	local09, local02, #0
25f2c     14 39 02 F6 | 	mov	local10, local02
25f30     1A 38 46 F0 | 	shr	local10, #26
25f34     03 38 06 F5 | 	and	local10, #3
25f38     1C 3B 02 F6 | 	mov	local11, local10
25f3c     01 34 56 F2 | 	cmps	local08, #1 wc
25f40     44 F0 07 F1 | 	add	ptra, #68
25f44     01 34 86 31 |  if_ae	sub	local08, #1
25f48     41 36 56 F2 | 	cmps	local09, #65 wc
25f4c     00 36 0E C2 |  if_b	cmp	local09, #0 wz
25f50     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
25f54     03 3A 0E F2 | 	cmp	local11, #3 wz
25f58     00 3A 06 A6 |  if_e	mov	local11, #0
25f5c     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
25f60     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
25f64     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
25f68     00 3A 0E F2 | 	cmp	local11, #0 wz
25f6c     4C 00 90 AD |  if_e	jmp	#LR__3293
25f70     01 32 06 F6 | 	mov	local07, #1
25f74     1B 35 0A F2 | 	cmp	local08, local09 wz
25f78     18 00 90 5D |  if_ne	jmp	#LR__3291
25f7c     05 34 6E FB | 	djnz	local08, #LR__3290
25f80     13 13 02 F6 | 	mov	arg01, local01
25f84     14 15 02 F6 | 	mov	arg02, local02
25f88     23 16 06 F6 | 	mov	arg03, #35
25f8c     24 FE BF FD | 	call	#__system___fmtchar
25f90     88 00 90 FD | 	jmp	#LR__3297
25f94                 | LR__3290
25f94                 | LR__3291
25f94     02 3A 0E F2 | 	cmp	local11, #2 wz
25f98     18 39 02 A6 |  if_e	mov	local10, local06
25f9c     01 30 06 A1 |  if_e	add	local06, #1
25fa0     1C 41 48 AC |  if_e	wrbyte	#32, local10
25fa4     14 00 90 AD |  if_e	jmp	#LR__3292
25fa8     04 3A 0E F2 | 	cmp	local11, #4 wz
25fac     18 5B 48 AC |  if_e	wrbyte	#45, local06
25fb0     01 30 06 A1 |  if_e	add	local06, #1
25fb4     18 57 48 5C |  if_ne	wrbyte	#43, local06
25fb8     01 30 06 51 |  if_ne	add	local06, #1
25fbc                 | LR__3292
25fbc                 | LR__3293
25fbc     18 13 02 F6 | 	mov	arg01, local06
25fc0     15 15 02 F6 | 	mov	arg02, local03
25fc4     16 17 02 F6 | 	mov	arg03, local04
25fc8     1A 19 02 F6 | 	mov	arg04, local08
25fcc     00 1A 06 F6 | 	mov	arg05, #0
25fd0     1D 28 2E F4 | 	testbn	local02, #29 wz
25fd4     01 1A 06 56 |  if_ne	mov	arg05, #1
25fd8     04 49 B0 FD | 	call	#__system___uitoa
25fdc     FD 32 02 F1 | 	add	local07, result1
25fe0     1B 33 5A F2 | 	cmps	local07, local09 wcz
25fe4     24 00 90 ED |  if_be	jmp	#LR__3296
25fe8     97 0E 48 FB | 	callpa	#(@LR__3295-@LR__3294)>>2,fcache_load_ptr_
25fec                 | LR__3294
25fec     1B 39 02 F6 | 	mov	local10, local09
25ff0     01 38 56 F2 | 	cmps	local10, #1 wc
25ff4     01 36 86 F1 | 	sub	local09, #1
25ff8     18 39 02 36 |  if_ae	mov	local10, local06
25ffc     01 30 06 31 |  if_ae	add	local06, #1
26000     1C 47 48 3C |  if_ae	wrbyte	#35, local10
26004     E4 FF 9F 3D |  if_ae	jmp	#LR__3294
26008                 | LR__3295
26008     18 01 48 FC | 	wrbyte	#0, local06
2600c                 | LR__3296
2600c     13 13 02 F6 | 	mov	arg01, local01
26010     14 15 02 F6 | 	mov	arg02, local02
26014     17 17 02 F6 | 	mov	arg03, local05
26018     F0 FD BF FD | 	call	#__system___fmtstr
2601c                 | LR__3297
2601c     A7 F0 03 F6 | 	mov	ptra, fp
26020     B2 00 A0 FD | 	call	#popregs_
26024                 | __system___fmtnum_ret
26024     2D 00 64 FD | 	ret
26028                 | 
26028                 | __system___fmtfloat
26028     10 4A 05 F6 | 	mov	COUNT_, #16
2602c     A8 00 A0 FD | 	call	#pushregs_
26030     24 F1 07 F1 | 	add	ptra, #292
26034     04 4E 05 F1 | 	add	fp, #4
26038     A7 12 62 FC | 	wrlong	arg01, fp
2603c     04 4E 05 F1 | 	add	fp, #4
26040     A7 14 62 FC | 	wrlong	arg02, fp
26044     04 4E 05 F1 | 	add	fp, #4
26048     A7 16 62 FC | 	wrlong	arg03, fp
2604c     04 4E 05 F1 | 	add	fp, #4
26050     A7 18 62 FC | 	wrlong	arg04, fp
26054     0C 4E 05 F1 | 	add	fp, #12
26058     A7 14 68 FC | 	wrlong	#10, fp
2605c     08 4E 05 F1 | 	add	fp, #8
26060     A7 00 68 FC | 	wrlong	#0, fp
26064     08 4E 05 F1 | 	add	fp, #8
26068     A7 00 68 FC | 	wrlong	#0, fp
2606c     08 4E 05 F1 | 	add	fp, #8
26070     A7 00 68 FC | 	wrlong	#0, fp
26074     04 4E 05 F1 | 	add	fp, #4
26078     A7 04 68 FC | 	wrlong	#2, fp
2607c     04 4E 05 F1 | 	add	fp, #4
26080     A7 00 68 FC | 	wrlong	#0, fp
26084     04 4E 05 F1 | 	add	fp, #4
26088     A7 00 68 FC | 	wrlong	#0, fp
2608c     04 4E 05 F1 | 	add	fp, #4
26090     A7 00 68 FC | 	wrlong	#0, fp
26094     04 4E 05 F1 | 	add	fp, #4
26098     A7 00 68 FC | 	wrlong	#0, fp
2609c     18 4E 05 F1 | 	add	fp, #24
260a0     A7 00 68 FC | 	wrlong	#0, fp
260a4     68 4E 05 F1 | 	add	fp, #104
260a8     A7 26 02 F6 | 	mov	local01, fp
260ac     08 4E 85 F1 | 	sub	fp, #8
260b0     A7 26 62 FC | 	wrlong	local01, fp
260b4     04 4E 05 F1 | 	add	fp, #4
260b8     A7 26 62 FC | 	wrlong	local01, fp
260bc     BC 4E 85 F1 | 	sub	fp, #188
260c0     A7 26 02 FB | 	rdlong	local01, fp
260c4     10 26 46 F0 | 	shr	local01, #16
260c8     3F 26 06 F5 | 	and	local01, #63
260cc     B0 4E 05 F1 | 	add	fp, #176
260d0     A7 26 62 FC | 	wrlong	local01, fp
260d4     B0 4E 85 F1 | 	sub	fp, #176
260d8     A7 26 02 FB | 	rdlong	local01, fp
260dc     1C 26 46 F0 | 	shr	local01, #28
260e0     01 26 06 F5 | 	and	local01, #1
260e4     08 4F 05 F1 | 	add	fp, #264
260e8     A7 26 62 FC | 	wrlong	local01, fp
260ec     58 4E 85 F1 | 	sub	fp, #88
260f0     A7 26 0A FB | 	rdlong	local01, fp wz
260f4     B8 4E 85 F1 | 	sub	fp, #184
260f8     3C 00 90 5D |  if_ne	jmp	#LR__3301
260fc     10 4E 05 F1 | 	add	fp, #16
26100     A7 26 02 FB | 	rdlong	local01, fp
26104     10 4E 85 F1 | 	sub	fp, #16
26108     61 26 0E F2 | 	cmp	local01, #97 wz
2610c     18 00 90 5D |  if_ne	jmp	#LR__3300
26110     B8 4E 05 F1 | 	add	fp, #184
26114     A7 1A 68 FC | 	wrlong	#13, fp
26118     84 4E 85 F1 | 	sub	fp, #132
2611c     A7 02 68 FC | 	wrlong	#1, fp
26120     34 4E 85 F1 | 	sub	fp, #52
26124     24 00 90 FD | 	jmp	#LR__3302
26128                 | LR__3300
26128     B8 4E 05 F1 | 	add	fp, #184
2612c     A7 0C 68 FC | 	wrlong	#6, fp
26130     B8 4E 85 F1 | 	sub	fp, #184
26134     14 00 90 FD | 	jmp	#LR__3302
26138                 | LR__3301
26138     B8 4E 05 F1 | 	add	fp, #184
2613c     A7 26 02 FB | 	rdlong	local01, fp
26140     01 26 86 F1 | 	sub	local01, #1
26144     A7 26 62 FC | 	wrlong	local01, fp
26148     B8 4E 85 F1 | 	sub	fp, #184
2614c                 | LR__3302
2614c     08 4E 05 F1 | 	add	fp, #8
26150     A7 26 02 FB | 	rdlong	local01, fp
26154     16 26 46 F0 | 	shr	local01, #22
26158     03 26 06 F5 | 	and	local01, #3
2615c     04 4F 05 F1 | 	add	fp, #260
26160     A7 26 62 FC | 	wrlong	local01, fp
26164     04 4F 85 F1 | 	sub	fp, #260
26168     A7 26 02 FB | 	rdlong	local01, fp
2616c     1D 26 46 F0 | 	shr	local01, #29
26170     01 26 06 F5 | 	and	local01, #1
26174     B4 4E 05 F1 | 	add	fp, #180
26178     A7 26 62 FC | 	wrlong	local01, fp
2617c     B4 4E 85 F1 | 	sub	fp, #180
26180     A7 26 02 FB | 	rdlong	local01, fp
26184     13 27 EA F8 | 	getbyte	local01, local01, #1
26188     60 4E 05 F1 | 	add	fp, #96
2618c     A7 26 62 FC | 	wrlong	local01, fp
26190     60 4E 85 F1 | 	sub	fp, #96
26194     A7 26 02 FB | 	rdlong	local01, fp
26198     13 27 E2 F8 | 	getbyte	local01, local01, #0
2619c     64 4E 05 F1 | 	add	fp, #100
261a0     A7 26 62 FC | 	wrlong	local01, fp
261a4     00 26 06 F6 | 	mov	local01, #0
261a8     5C 4E 85 F1 | 	sub	fp, #92
261ac     A7 1A 02 FB | 	rdlong	arg05, fp
261b0     65 1A 0E F2 | 	cmp	arg05, #101 wz
261b4     01 26 06 A6 |  if_e	mov	local01, #1
261b8     14 4E 05 F1 | 	add	fp, #20
261bc     A7 26 62 FC | 	wrlong	local01, fp
261c0     98 4E 05 F1 | 	add	fp, #152
261c4     A7 28 0A FB | 	rdlong	local02, fp wz
261c8     45 26 06 56 |  if_ne	mov	local01, #69
261cc     65 26 06 A6 |  if_e	mov	local01, #101
261d0     8C 4E 85 F1 | 	sub	fp, #140
261d4     A7 26 62 FC | 	wrlong	local01, fp
261d8     20 4E 85 F1 | 	sub	fp, #32
261dc     A7 26 02 FB | 	rdlong	local01, fp
261e0     10 4E 85 F1 | 	sub	fp, #16
261e4     61 26 0E F2 | 	cmp	local01, #97 wz
261e8     4C 00 90 5D |  if_ne	jmp	#LR__3303
261ec     24 4E 05 F1 | 	add	fp, #36
261f0     A7 02 68 FC | 	wrlong	#1, fp
261f4     98 4E 05 F1 | 	add	fp, #152
261f8     A7 28 0A FB | 	rdlong	local02, fp wz
261fc     50 26 06 56 |  if_ne	mov	local01, #80
26200     70 26 06 A6 |  if_e	mov	local01, #112
26204     8C 4E 85 F1 | 	sub	fp, #140
26208     A7 26 62 FC | 	wrlong	local01, fp
2620c     14 4E 85 F1 | 	sub	fp, #20
26210     A7 04 68 FC | 	wrlong	#2, fp
26214     1C 4E 05 F1 | 	add	fp, #28
26218     A7 02 68 FC | 	wrlong	#1, fp
2621c     84 4E 05 F1 | 	add	fp, #132
26220     A7 28 0A FB | 	rdlong	local02, fp wz
26224     58 26 06 56 |  if_ne	mov	local01, #88
26228     78 26 06 A6 |  if_e	mov	local01, #120
2622c     7C 4E 85 F1 | 	sub	fp, #124
26230     A7 26 62 FC | 	wrlong	local01, fp
26234     40 4E 85 F1 | 	sub	fp, #64
26238                 | LR__3303
26238     10 4E 05 F1 | 	add	fp, #16
2623c     A7 26 02 FB | 	rdlong	local01, fp
26240     10 4E 85 F1 | 	sub	fp, #16
26244     23 26 0E F2 | 	cmp	local01, #35 wz
26248     3C 00 90 5D |  if_ne	jmp	#LR__3306
2624c     48 4E 05 F1 | 	add	fp, #72
26250     A7 02 68 FC | 	wrlong	#1, fp
26254     C8 4E 05 F1 | 	add	fp, #200
26258     A7 26 0A FB | 	rdlong	local01, fp wz
2625c     10 4F 85 F1 | 	sub	fp, #272
26260     18 00 90 AD |  if_e	jmp	#LR__3304
26264     10 4E 05 F1 | 	add	fp, #16
26268     A7 CC 68 FC | 	wrlong	#102, fp
2626c     00 4F 05 F1 | 	add	fp, #256
26270     A7 00 68 FC | 	wrlong	#0, fp
26274     10 4F 85 F1 | 	sub	fp, #272
26278     0C 00 90 FD | 	jmp	#LR__3305
2627c                 | LR__3304
2627c     10 4F 05 F1 | 	add	fp, #272
26280     A7 02 68 FC | 	wrlong	#1, fp
26284     10 4F 85 F1 | 	sub	fp, #272
26288                 | LR__3305
26288                 | LR__3306
26288     08 4E 05 F1 | 	add	fp, #8
2628c     A7 26 02 FB | 	rdlong	local01, fp
26290     1A 26 46 F0 | 	shr	local01, #26
26294     03 26 06 F5 | 	and	local01, #3
26298     5C 4E 05 F1 | 	add	fp, #92
2629c     A7 26 62 FC | 	wrlong	local01, fp
262a0     58 4E 85 F1 | 	sub	fp, #88
262a4     A7 FA 01 FB | 	rdlong	result1, fp
262a8     0C 4E 85 F1 | 	sub	fp, #12
262ac     1F FA 4D F0 | 	shr	result1, #31 wz
262b0     20 00 90 AD |  if_e	jmp	#LR__3307
262b4     2C 4E 05 F1 | 	add	fp, #44
262b8     A7 5A 68 FC | 	wrlong	#45, fp
262bc     20 4E 85 F1 | 	sub	fp, #32
262c0     A7 FA 01 FB | 	rdlong	result1, fp
262c4     1F FA E5 F4 | 	bitnot	result1, #31
262c8     A7 FA 61 FC | 	wrlong	result1, fp
262cc     0C 4E 85 F1 | 	sub	fp, #12
262d0     3C 00 90 FD | 	jmp	#LR__3309
262d4                 | LR__3307
262d4     64 4E 05 F1 | 	add	fp, #100
262d8     A7 26 02 FB | 	rdlong	local01, fp
262dc     64 4E 85 F1 | 	sub	fp, #100
262e0     01 26 0E F2 | 	cmp	local01, #1 wz
262e4     2C 4E 05 A1 |  if_e	add	fp, #44
262e8     A7 56 68 AC |  if_e	wrlong	#43, fp
262ec     2C 4E 85 A1 |  if_e	sub	fp, #44
262f0     1C 00 90 AD |  if_e	jmp	#LR__3308
262f4     64 4E 05 F1 | 	add	fp, #100
262f8     A7 26 02 FB | 	rdlong	local01, fp
262fc     64 4E 85 F1 | 	sub	fp, #100
26300     02 26 0E F2 | 	cmp	local01, #2 wz
26304     2C 4E 05 A1 |  if_e	add	fp, #44
26308     A7 40 68 AC |  if_e	wrlong	#32, fp
2630c     2C 4E 85 A1 |  if_e	sub	fp, #44
26310                 | LR__3308
26310                 | LR__3309
26310     08 4E 05 F1 | 	add	fp, #8
26314     A7 26 02 FB | 	rdlong	local01, fp
26318     18 26 46 F0 | 	shr	local01, #24
2631c     03 26 06 F5 | 	and	local01, #3
26320     3C 4E 05 F1 | 	add	fp, #60
26324     A7 26 62 FC | 	wrlong	local01, fp
26328     00 26 06 F6 | 	mov	local01, #0
2632c     18 4E 85 F1 | 	sub	fp, #24
26330     A7 2A 0A FB | 	rdlong	local03, fp wz
26334     2C 4E 85 F1 | 	sub	fp, #44
26338     18 00 90 5D |  if_ne	jmp	#LR__3310
2633c     1C 4E 05 F1 | 	add	fp, #28
26340     A7 2C 02 FB | 	rdlong	local04, fp
26344     1C 4E 85 F1 | 	sub	fp, #28
26348     16 2F 02 F6 | 	mov	local05, local04
2634c     0A 2E 0E F2 | 	cmp	local05, #10 wz
26350     04 00 90 AD |  if_e	jmp	#LR__3311
26354                 | LR__3310
26354     01 26 66 F5 | 	xor	local01, #1
26358                 | LR__3311
26358     3C 4E 05 F1 | 	add	fp, #60
2635c     A7 26 62 FC | 	wrlong	local01, fp
26360     3C 4E 85 F1 | 	sub	fp, #60
26364     00 26 0E F2 | 	cmp	local01, #0 wz
26368     0C 01 90 AD |  if_e	jmp	#LR__3313
2636c     44 4E 05 F1 | 	add	fp, #68
26370     A7 2E 02 FB | 	rdlong	local05, fp
26374     44 4E 85 F1 | 	sub	fp, #68
26378     17 2B 02 F6 | 	mov	local03, local05
2637c     02 2A 0E F2 | 	cmp	local03, #2 wz
26380     F4 00 90 5D |  if_ne	jmp	#LR__3313
26384     0C 4F 05 F1 | 	add	fp, #268
26388     A7 30 02 FB | 	rdlong	local06, fp
2638c     0C 4F 85 F1 | 	sub	fp, #268
26390     18 2D 02 F6 | 	mov	local04, local06
26394     02 2C 0E F2 | 	cmp	local04, #2 wz
26398     DC 00 90 AD |  if_e	jmp	#LR__3313
2639c     C0 4E 05 F1 | 	add	fp, #192
263a0     A7 12 02 FB | 	rdlong	arg01, fp
263a4     94 4E 85 F1 | 	sub	fp, #148
263a8     A7 14 02 FB | 	rdlong	arg02, fp
263ac     14 4E 05 F1 | 	add	fp, #20
263b0     A7 16 02 FB | 	rdlong	arg03, fp
263b4     40 4E 85 F1 | 	sub	fp, #64
263b8     8C 47 B0 FD | 	call	#__system__emitsign_0555
263bc     14 4F 05 F1 | 	add	fp, #276
263c0     A7 FA 61 FC | 	wrlong	result1, fp
263c4     14 4F 85 F1 | 	sub	fp, #276
263c8     00 FA 55 F2 | 	cmps	result1, #0 wc
263cc     14 4F 05 C1 |  if_b	add	fp, #276
263d0     A7 FA 01 CB |  if_b	rdlong	result1, fp
263d4     14 4F 85 C1 |  if_b	sub	fp, #276
263d8     6C 0B 90 CD |  if_b	jmp	#LR__3363
263dc     C0 4E 05 F1 | 	add	fp, #192
263e0     A7 26 02 FB | 	rdlong	local01, fp
263e4     54 4E 05 F1 | 	add	fp, #84
263e8     A7 2E 02 FB | 	rdlong	local05, fp
263ec     17 2B 02 F6 | 	mov	local03, local05
263f0     17 27 02 F1 | 	add	local01, local05
263f4     54 4E 85 F1 | 	sub	fp, #84
263f8     A7 26 62 FC | 	wrlong	local01, fp
263fc     58 4E 85 F1 | 	sub	fp, #88
26400     A7 26 0A FB | 	rdlong	local01, fp wz
26404     68 4E 85 F1 | 	sub	fp, #104
26408     60 00 90 AD |  if_e	jmp	#LR__3312
2640c     68 4E 05 F1 | 	add	fp, #104
26410     A7 26 02 FB | 	rdlong	local01, fp
26414     AC 4E 05 F1 | 	add	fp, #172
26418     A7 2A 02 FB | 	rdlong	local03, fp
2641c     15 27 82 F1 | 	sub	local01, local03
26420     AC 4E 85 F1 | 	sub	fp, #172
26424     A7 26 62 FC | 	wrlong	local01, fp
26428     68 4E 85 F1 | 	sub	fp, #104
2642c     00 26 56 F2 | 	cmps	local01, #0 wc
26430     68 4E 05 C1 |  if_b	add	fp, #104
26434     A7 00 68 CC |  if_b	wrlong	#0, fp
26438     68 4E 85 C1 |  if_b	sub	fp, #104
2643c     08 4E 05 F1 | 	add	fp, #8
26440     A7 26 02 FB | 	rdlong	local01, fp
26444     E8 26 06 F4 | 	bitl	local01, #232
26448     A7 26 62 FC | 	wrlong	local01, fp
2644c     60 4E 05 F1 | 	add	fp, #96
26450     A7 2E 02 FB | 	rdlong	local05, fp
26454     17 2B 02 F6 | 	mov	local03, local05
26458     08 2A 66 F0 | 	shl	local03, #8
2645c     15 27 42 F5 | 	or	local01, local03
26460     60 4E 85 F1 | 	sub	fp, #96
26464     A7 26 62 FC | 	wrlong	local01, fp
26468     08 4E 85 F1 | 	sub	fp, #8
2646c                 | LR__3312
2646c     3C 4E 05 F1 | 	add	fp, #60
26470     A7 00 68 FC | 	wrlong	#0, fp
26474     3C 4E 85 F1 | 	sub	fp, #60
26478                 | LR__3313
26478     0C 4E 05 F1 | 	add	fp, #12
2647c     A7 12 02 FB | 	rdlong	arg01, fp
26480     0C 4E 85 F1 | 	sub	fp, #12
26484     EC 21 B0 FD | 	call	#__system____builtin_ilogb
26488     FF FF 3F FF 
2648c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
26490     50 00 90 5D |  if_ne	jmp	#LR__3315
26494     2C 4E 05 F1 | 	add	fp, #44
26498     A7 26 0A FB | 	rdlong	local01, fp wz
2649c     2C 4E 85 F1 | 	sub	fp, #44
264a0     24 00 90 AD |  if_e	jmp	#LR__3314
264a4     C0 4E 05 F1 | 	add	fp, #192
264a8     A7 28 02 FB | 	rdlong	local02, fp
264ac     14 2B 02 F6 | 	mov	local03, local02
264b0     01 2A 06 F1 | 	add	local03, #1
264b4     A7 2A 62 FC | 	wrlong	local03, fp
264b8     94 4E 85 F1 | 	sub	fp, #148
264bc     A7 2C 02 FB | 	rdlong	local04, fp
264c0     2C 4E 85 F1 | 	sub	fp, #44
264c4     14 2D 42 FC | 	wrbyte	local04, local02
264c8                 | LR__3314
264c8     C0 4E 05 F1 | 	add	fp, #192
264cc     A7 12 02 FB | 	rdlong	arg01, fp
264d0     C0 4E 85 F1 | 	sub	fp, #192
264d4     A4 01 00 FF 
264d8     E6 15 06 F6 | 	mov	arg02, ##@LR__5311
264dc     A8 E9 BF FD | 	call	#__system____builtin_strcpy
264e0     A4 08 90 FD | 	jmp	#LR__3351
264e4                 | LR__3315
264e4     0C 4E 05 F1 | 	add	fp, #12
264e8     A7 28 02 FB | 	rdlong	local02, fp
264ec     0C 4E 85 F1 | 	sub	fp, #12
264f0     14 13 02 F6 | 	mov	arg01, local02
264f4     7C 21 B0 FD | 	call	#__system____builtin_ilogb
264f8     00 00 40 FF 
264fc     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
26500     50 00 90 5D |  if_ne	jmp	#LR__3317
26504     2C 4E 05 F1 | 	add	fp, #44
26508     A7 26 0A FB | 	rdlong	local01, fp wz
2650c     2C 4E 85 F1 | 	sub	fp, #44
26510     24 00 90 AD |  if_e	jmp	#LR__3316
26514     C0 4E 05 F1 | 	add	fp, #192
26518     A7 28 02 FB | 	rdlong	local02, fp
2651c     14 2B 02 F6 | 	mov	local03, local02
26520     01 2A 06 F1 | 	add	local03, #1
26524     A7 2A 62 FC | 	wrlong	local03, fp
26528     94 4E 85 F1 | 	sub	fp, #148
2652c     A7 2C 02 FB | 	rdlong	local04, fp
26530     2C 4E 85 F1 | 	sub	fp, #44
26534     14 2D 42 FC | 	wrbyte	local04, local02
26538                 | LR__3316
26538     C0 4E 05 F1 | 	add	fp, #192
2653c     A7 12 02 FB | 	rdlong	arg01, fp
26540     C0 4E 85 F1 | 	sub	fp, #192
26544     A4 01 00 FF 
26548     EA 15 06 F6 | 	mov	arg02, ##@LR__5312
2654c     38 E9 BF FD | 	call	#__system____builtin_strcpy
26550     34 08 90 FD | 	jmp	#LR__3351
26554                 | LR__3317
26554     10 4E 05 F1 | 	add	fp, #16
26558     A7 26 02 FB | 	rdlong	local01, fp
2655c     10 4E 85 F1 | 	sub	fp, #16
26560     67 26 0E F2 | 	cmp	local01, #103 wz
26564     10 4E 05 51 |  if_ne	add	fp, #16
26568     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2656c     10 4E 85 51 |  if_ne	sub	fp, #16
26570     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
26574     94 01 90 5D |  if_ne	jmp	#LR__3322
26578     0C 4E 05 F1 | 	add	fp, #12
2657c     A7 12 02 FB | 	rdlong	arg01, fp
26580     08 4E 05 F1 | 	add	fp, #8
26584     A7 14 02 F6 | 	mov	arg02, fp
26588     0C 4E 05 F1 | 	add	fp, #12
2658c     A7 16 02 F6 | 	mov	arg03, fp
26590     98 4E 05 F1 | 	add	fp, #152
26594     A7 18 02 FB | 	rdlong	arg04, fp
26598     9C 4E 85 F1 | 	sub	fp, #156
2659c     A7 1A 02 FB | 	rdlong	arg05, fp
265a0     1C 4E 85 F1 | 	sub	fp, #28
265a4     AC 43 B0 FD | 	call	#__system__disassemble_0553
265a8     10 4E 05 F1 | 	add	fp, #16
265ac     A7 26 02 FB | 	rdlong	local01, fp
265b0     10 4E 85 F1 | 	sub	fp, #16
265b4     23 26 0E F2 | 	cmp	local01, #35 wz
265b8     A0 00 90 5D |  if_ne	jmp	#LR__3319
265bc     20 4E 05 F1 | 	add	fp, #32
265c0     A7 26 02 FB | 	rdlong	local01, fp
265c4     98 4E 05 F1 | 	add	fp, #152
265c8     A7 2A 02 FB | 	rdlong	local03, fp
265cc     B8 4E 85 F1 | 	sub	fp, #184
265d0     15 27 5A F2 | 	cmps	local01, local03 wcz
265d4     24 4E 05 11 |  if_a	add	fp, #36
265d8     A7 02 68 1C |  if_a	wrlong	#1, fp
265dc     24 4E 85 11 |  if_a	sub	fp, #36
265e0     A4 01 90 1D |  if_a	jmp	#LR__3325
265e4     20 4E 05 F1 | 	add	fp, #32
265e8     A7 26 02 FB | 	rdlong	local01, fp
265ec     20 4E 85 F1 | 	sub	fp, #32
265f0     00 26 56 F2 | 	cmps	local01, #0 wc
265f4     2C 00 90 3D |  if_ae	jmp	#LR__3318
265f8     B8 4E 05 F1 | 	add	fp, #184
265fc     A7 26 02 FB | 	rdlong	local01, fp
26600     13 27 62 F6 | 	neg	local01, local01
26604     98 4E 85 F1 | 	sub	fp, #152
26608     A7 2A 02 FB | 	rdlong	local03, fp
2660c     20 4E 85 F1 | 	sub	fp, #32
26610     13 2B 5A F2 | 	cmps	local03, local01 wcz
26614     24 4E 05 E1 |  if_be	add	fp, #36
26618     A7 02 68 EC |  if_be	wrlong	#1, fp
2661c     24 4E 85 E1 |  if_be	sub	fp, #36
26620     64 01 90 FD | 	jmp	#LR__3325
26624                 | LR__3318
26624     20 4E 05 F1 | 	add	fp, #32
26628     A7 26 02 FB | 	rdlong	local01, fp
2662c     20 4E 85 F1 | 	sub	fp, #32
26630     01 26 56 F2 | 	cmps	local01, #1 wc
26634     50 01 90 CD |  if_b	jmp	#LR__3325
26638     B8 4E 05 F1 | 	add	fp, #184
2663c     A7 26 02 FB | 	rdlong	local01, fp
26640     98 4E 85 F1 | 	sub	fp, #152
26644     A7 2A 02 FB | 	rdlong	local03, fp
26648     15 27 82 F1 | 	sub	local01, local03
2664c     98 4E 05 F1 | 	add	fp, #152
26650     A7 26 62 FC | 	wrlong	local01, fp
26654     B8 4E 85 F1 | 	sub	fp, #184
26658     2C 01 90 FD | 	jmp	#LR__3325
2665c                 | LR__3319
2665c     00 26 06 F6 | 	mov	local01, #0
26660     08 4E 05 F1 | 	add	fp, #8
26664     A7 28 02 FB | 	rdlong	local02, fp
26668     1C 28 46 F0 | 	shr	local02, #28
2666c     01 28 0E F5 | 	and	local02, #1 wz
26670     01 26 06 A6 |  if_e	mov	local01, #1
26674     2C 4E 05 F1 | 	add	fp, #44
26678     A7 26 62 FC | 	wrlong	local01, fp
2667c     14 4E 85 F1 | 	sub	fp, #20
26680     A7 26 02 FB | 	rdlong	local01, fp
26684     98 4E 05 F1 | 	add	fp, #152
26688     A7 2A 02 FB | 	rdlong	local03, fp
2668c     B8 4E 85 F1 | 	sub	fp, #184
26690     15 27 52 F2 | 	cmps	local01, local03 wc
26694     18 00 90 3D |  if_ae	jmp	#LR__3320
26698     20 4E 05 F1 | 	add	fp, #32
2669c     A7 2C 02 FB | 	rdlong	local04, fp
266a0     20 4E 85 F1 | 	sub	fp, #32
266a4     FF FF 7F FF 
266a8     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
266ac     10 00 90 3D |  if_ae	jmp	#LR__3321
266b0                 | LR__3320
266b0     24 4E 05 F1 | 	add	fp, #36
266b4     A7 02 68 FC | 	wrlong	#1, fp
266b8     24 4E 85 F1 | 	sub	fp, #36
266bc     C8 00 90 FD | 	jmp	#LR__3325
266c0                 | LR__3321
266c0     B8 4E 05 F1 | 	add	fp, #184
266c4     A7 2C 02 FB | 	rdlong	local04, fp
266c8     98 4E 85 F1 | 	sub	fp, #152
266cc     A7 2A 02 FB | 	rdlong	local03, fp
266d0     15 2D 82 F1 | 	sub	local04, local03
266d4     98 4E 05 F1 | 	add	fp, #152
266d8     A7 2C 62 FC | 	wrlong	local04, fp
266dc     AC 4E 85 F1 | 	sub	fp, #172
266e0     A7 12 02 FB | 	rdlong	arg01, fp
266e4     08 4E 05 F1 | 	add	fp, #8
266e8     A7 14 02 F6 | 	mov	arg02, fp
266ec     0C 4E 05 F1 | 	add	fp, #12
266f0     A7 16 02 F6 | 	mov	arg03, fp
266f4     16 19 62 F6 | 	neg	arg04, local04
266f8     04 4E 85 F1 | 	sub	fp, #4
266fc     A7 1A 02 FB | 	rdlong	arg05, fp
26700     1C 4E 85 F1 | 	sub	fp, #28
26704     4C 42 B0 FD | 	call	#__system__disassemble_0553
26708     7C 00 90 FD | 	jmp	#LR__3325
2670c                 | LR__3322
2670c     24 4E 05 F1 | 	add	fp, #36
26710     A7 26 0A FB | 	rdlong	local01, fp wz
26714     24 4E 85 F1 | 	sub	fp, #36
26718     34 00 90 AD |  if_e	jmp	#LR__3323
2671c     0C 4E 05 F1 | 	add	fp, #12
26720     A7 12 02 FB | 	rdlong	arg01, fp
26724     08 4E 05 F1 | 	add	fp, #8
26728     A7 14 02 F6 | 	mov	arg02, fp
2672c     0C 4E 05 F1 | 	add	fp, #12
26730     A7 16 02 F6 | 	mov	arg03, fp
26734     98 4E 05 F1 | 	add	fp, #152
26738     A7 18 02 FB | 	rdlong	arg04, fp
2673c     9C 4E 85 F1 | 	sub	fp, #156
26740     A7 1A 02 FB | 	rdlong	arg05, fp
26744     1C 4E 85 F1 | 	sub	fp, #28
26748     08 42 B0 FD | 	call	#__system__disassemble_0553
2674c     38 00 90 FD | 	jmp	#LR__3324
26750                 | LR__3323
26750     0C 4E 05 F1 | 	add	fp, #12
26754     A7 12 02 FB | 	rdlong	arg01, fp
26758     08 4E 05 F1 | 	add	fp, #8
2675c     A7 14 02 F6 | 	mov	arg02, fp
26760     0C 4E 05 F1 | 	add	fp, #12
26764     A7 16 02 F6 | 	mov	arg03, fp
26768     98 4E 05 F1 | 	add	fp, #152
2676c     A7 2C 02 FB | 	rdlong	local04, fp
26770     01 2C 06 F1 | 	add	local04, #1
26774     16 19 62 F6 | 	neg	arg04, local04
26778     9C 4E 85 F1 | 	sub	fp, #156
2677c     A7 1A 02 FB | 	rdlong	arg05, fp
26780     1C 4E 85 F1 | 	sub	fp, #28
26784     CC 41 B0 FD | 	call	#__system__disassemble_0553
26788                 | LR__3324
26788                 | LR__3325
26788     1C 4E 05 F1 | 	add	fp, #28
2678c     A7 26 02 FB | 	rdlong	local01, fp
26790     1C 4E 85 F1 | 	sub	fp, #28
26794     02 26 0E F2 | 	cmp	local01, #2 wz
26798     4C 00 90 5D |  if_ne	jmp	#LR__3328
2679c     1C 4E 05 F1 | 	add	fp, #28
267a0     A7 20 68 FC | 	wrlong	#16, fp
267a4     1C 4E 85 F1 | 	sub	fp, #28
267a8                 | LR__3326
267a8     14 4E 05 F1 | 	add	fp, #20
267ac     A7 26 0A FB | 	rdlong	local01, fp wz
267b0     14 4E 85 F1 | 	sub	fp, #20
267b4     30 00 90 AD |  if_e	jmp	#LR__3327
267b8     14 4E 05 F1 | 	add	fp, #20
267bc     A7 2A 02 FB | 	rdlong	local03, fp
267c0     14 4E 85 F1 | 	sub	fp, #20
267c4     00 80 00 FF 
267c8     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
267cc     18 00 90 3D |  if_ae	jmp	#LR__3327
267d0     14 4E 05 F1 | 	add	fp, #20
267d4     A7 26 02 FB | 	rdlong	local01, fp
267d8     01 26 66 F0 | 	shl	local01, #1
267dc     A7 26 62 FC | 	wrlong	local01, fp
267e0     14 4E 85 F1 | 	sub	fp, #20
267e4     C0 FF 9F FD | 	jmp	#LR__3326
267e8                 | LR__3327
267e8                 | LR__3328
267e8     70 4E 05 F1 | 	add	fp, #112
267ec     A7 12 02 F6 | 	mov	arg01, fp
267f0     5C 4E 85 F1 | 	sub	fp, #92
267f4     A7 14 02 FB | 	rdlong	arg02, fp
267f8     08 4E 05 F1 | 	add	fp, #8
267fc     A7 16 02 FB | 	rdlong	arg03, fp
26800     A0 4E 05 F1 | 	add	fp, #160
26804     A7 1A 02 FB | 	rdlong	arg05, fp
26808     BC 4E 85 F1 | 	sub	fp, #188
2680c     01 18 06 F6 | 	mov	arg04, #1
26810     CC 40 B0 FD | 	call	#__system___uitoa
26814     58 4E 05 F1 | 	add	fp, #88
26818     A7 FA 61 FC | 	wrlong	result1, fp
2681c     38 4E 85 F1 | 	sub	fp, #56
26820     A7 26 02 FB | 	rdlong	local01, fp
26824     20 4E 85 F1 | 	sub	fp, #32
26828     00 26 56 F2 | 	cmps	local01, #0 wc
2682c     50 00 90 3D |  if_ae	jmp	#LR__3329
26830     60 4E 05 F1 | 	add	fp, #96
26834     A7 5A 68 FC | 	wrlong	#45, fp
26838     50 4E 05 F1 | 	add	fp, #80
2683c     A7 12 02 F6 | 	mov	arg01, fp
26840     90 4E 85 F1 | 	sub	fp, #144
26844     A7 2A 02 FB | 	rdlong	local03, fp
26848     15 15 62 F6 | 	neg	arg02, local03
2684c     18 4E 05 F1 | 	add	fp, #24
26850     A7 18 02 FB | 	rdlong	arg04, fp
26854     84 4E 05 F1 | 	add	fp, #132
26858     A7 30 02 FB | 	rdlong	local06, fp
2685c     BC 4E 85 F1 | 	sub	fp, #188
26860     18 2D 02 F6 | 	mov	local04, local06
26864     0A 16 06 F6 | 	mov	arg03, #10
26868     16 1B 02 F6 | 	mov	arg05, local04
2686c     70 40 B0 FD | 	call	#__system___uitoa
26870     5C 4E 05 F1 | 	add	fp, #92
26874     A7 FA 61 FC | 	wrlong	result1, fp
26878     5C 4E 85 F1 | 	sub	fp, #92
2687c     48 00 90 FD | 	jmp	#LR__3330
26880                 | LR__3329
26880     60 4E 05 F1 | 	add	fp, #96
26884     A7 56 68 FC | 	wrlong	#43, fp
26888     50 4E 05 F1 | 	add	fp, #80
2688c     A7 12 02 F6 | 	mov	arg01, fp
26890     90 4E 85 F1 | 	sub	fp, #144
26894     A7 14 02 FB | 	rdlong	arg02, fp
26898     18 4E 05 F1 | 	add	fp, #24
2689c     A7 18 02 FB | 	rdlong	arg04, fp
268a0     84 4E 05 F1 | 	add	fp, #132
268a4     A7 30 02 FB | 	rdlong	local06, fp
268a8     BC 4E 85 F1 | 	sub	fp, #188
268ac     18 2D 02 F6 | 	mov	local04, local06
268b0     0A 16 06 F6 | 	mov	arg03, #10
268b4     16 1B 02 F6 | 	mov	arg05, local04
268b8     24 40 B0 FD | 	call	#__system___uitoa
268bc     5C 4E 05 F1 | 	add	fp, #92
268c0     A7 FA 61 FC | 	wrlong	result1, fp
268c4     5C 4E 85 F1 | 	sub	fp, #92
268c8                 | LR__3330
268c8     24 4E 05 F1 | 	add	fp, #36
268cc     A7 26 0A FB | 	rdlong	local01, fp wz
268d0     24 4E 85 F1 | 	sub	fp, #36
268d4     2C 00 90 AD |  if_e	jmp	#LR__3331
268d8     50 4E 05 F1 | 	add	fp, #80
268dc     A7 00 68 FC | 	wrlong	#0, fp
268e0     04 4E 85 F1 | 	sub	fp, #4
268e4     A7 00 68 FC | 	wrlong	#0, fp
268e8     6C 4E 05 F1 | 	add	fp, #108
268ec     A7 26 02 FB | 	rdlong	local01, fp
268f0     01 26 06 F1 | 	add	local01, #1
268f4     64 4E 85 F1 | 	sub	fp, #100
268f8     A7 26 62 FC | 	wrlong	local01, fp
268fc     54 4E 85 F1 | 	sub	fp, #84
26900     88 00 90 FD | 	jmp	#LR__3334
26904                 | LR__3331
26904     20 4E 05 F1 | 	add	fp, #32
26908     A7 26 02 FB | 	rdlong	local01, fp
2690c     20 4E 85 F1 | 	sub	fp, #32
26910     00 26 56 F2 | 	cmps	local01, #0 wc
26914     40 00 90 3D |  if_ae	jmp	#LR__3332
26918     20 4E 05 F1 | 	add	fp, #32
2691c     A7 28 02 FB | 	rdlong	local02, fp
26920     30 4E 05 F1 | 	add	fp, #48
26924     A7 28 62 FC | 	wrlong	local02, fp
26928     04 4E 85 F1 | 	sub	fp, #4
2692c     A7 28 62 FC | 	wrlong	local02, fp
26930     2C 4E 85 F1 | 	sub	fp, #44
26934     A7 26 02 FB | 	rdlong	local01, fp
26938     98 4E 05 F1 | 	add	fp, #152
2693c     A7 2A 02 FB | 	rdlong	local03, fp
26940     15 27 02 F1 | 	add	local01, local03
26944     01 26 06 F1 | 	add	local01, #1
26948     64 4E 85 F1 | 	sub	fp, #100
2694c     A7 26 62 FC | 	wrlong	local01, fp
26950     54 4E 85 F1 | 	sub	fp, #84
26954     34 00 90 FD | 	jmp	#LR__3333
26958                 | LR__3332
26958     4C 4E 05 F1 | 	add	fp, #76
2695c     A7 00 68 FC | 	wrlong	#0, fp
26960     2C 4E 85 F1 | 	sub	fp, #44
26964     A7 26 02 FB | 	rdlong	local01, fp
26968     30 4E 05 F1 | 	add	fp, #48
2696c     A7 26 62 FC | 	wrlong	local01, fp
26970     68 4E 05 F1 | 	add	fp, #104
26974     A7 2A 02 FB | 	rdlong	local03, fp
26978     15 27 02 F1 | 	add	local01, local03
2697c     01 26 06 F1 | 	add	local01, #1
26980     64 4E 85 F1 | 	sub	fp, #100
26984     A7 26 62 FC | 	wrlong	local01, fp
26988     54 4E 85 F1 | 	sub	fp, #84
2698c                 | LR__3333
2698c                 | LR__3334
2698c     54 4E 05 F1 | 	add	fp, #84
26990     A7 26 02 FB | 	rdlong	local01, fp
26994     08 4E 85 F1 | 	sub	fp, #8
26998     A7 2A 02 FB | 	rdlong	local03, fp
2699c     15 27 82 F1 | 	sub	local01, local03
269a0     01 26 06 F1 | 	add	local01, #1
269a4     24 4E 85 F1 | 	sub	fp, #36
269a8     A7 26 62 FC | 	wrlong	local01, fp
269ac     04 4E 05 F1 | 	add	fp, #4
269b0     A7 26 0A FB | 	rdlong	local01, fp wz
269b4     2C 4E 85 F1 | 	sub	fp, #44
269b8     28 4E 05 51 |  if_ne	add	fp, #40
269bc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
269c0     01 2A 06 51 |  if_ne	add	local03, #1
269c4     A7 2A 62 5C |  if_ne	wrlong	local03, fp
269c8     28 4E 85 51 |  if_ne	sub	fp, #40
269cc     1C 4E 05 F1 | 	add	fp, #28
269d0     A7 26 02 FB | 	rdlong	local01, fp
269d4     1C 4E 85 F1 | 	sub	fp, #28
269d8     10 26 0E F2 | 	cmp	local01, #16 wz
269dc     28 4E 05 A1 |  if_e	add	fp, #40
269e0     A7 26 02 AB |  if_e	rdlong	local01, fp
269e4     02 26 06 A1 |  if_e	add	local01, #2
269e8     A7 26 62 AC |  if_e	wrlong	local01, fp
269ec     28 4E 85 A1 |  if_e	sub	fp, #40
269f0     24 4E 05 F1 | 	add	fp, #36
269f4     A7 26 0A FB | 	rdlong	local01, fp wz
269f8     24 4E 85 F1 | 	sub	fp, #36
269fc     28 00 90 AD |  if_e	jmp	#LR__3335
26a00     28 4E 05 F1 | 	add	fp, #40
26a04     A7 26 02 FB | 	rdlong	local01, fp
26a08     02 2A 06 F6 | 	mov	local03, #2
26a0c     34 4E 05 F1 | 	add	fp, #52
26a10     A7 2E 02 FB | 	rdlong	local05, fp
26a14     17 2B 02 F1 | 	add	local03, local05
26a18     15 27 02 F1 | 	add	local01, local03
26a1c     34 4E 85 F1 | 	sub	fp, #52
26a20     A7 26 62 FC | 	wrlong	local01, fp
26a24     28 4E 85 F1 | 	sub	fp, #40
26a28                 | LR__3335
26a28     28 4E 05 F1 | 	add	fp, #40
26a2c     A7 26 02 FB | 	rdlong	local01, fp
26a30     28 4E 85 F1 | 	sub	fp, #40
26a34     41 26 56 F2 | 	cmps	local01, #65 wc
26a38     01 FA 65 36 |  if_ae	neg	result1, #1
26a3c     08 05 90 3D |  if_ae	jmp	#LR__3363
26a40     3C 4E 05 F1 | 	add	fp, #60
26a44     A7 26 0A FB | 	rdlong	local01, fp wz
26a48     3C 4E 85 F1 | 	sub	fp, #60
26a4c     60 00 90 AD |  if_e	jmp	#LR__3336
26a50     C0 4E 05 F1 | 	add	fp, #192
26a54     A7 12 02 FB | 	rdlong	arg01, fp
26a58     94 4E 85 F1 | 	sub	fp, #148
26a5c     A7 14 02 FB | 	rdlong	arg02, fp
26a60     14 4E 05 F1 | 	add	fp, #20
26a64     A7 16 02 FB | 	rdlong	arg03, fp
26a68     40 4E 85 F1 | 	sub	fp, #64
26a6c     D8 40 B0 FD | 	call	#__system__emitsign_0555
26a70     18 4F 05 F1 | 	add	fp, #280
26a74     A7 FA 61 FC | 	wrlong	result1, fp
26a78     18 4F 85 F1 | 	sub	fp, #280
26a7c     00 FA 55 F2 | 	cmps	result1, #0 wc
26a80     18 4F 05 C1 |  if_b	add	fp, #280
26a84     A7 FA 01 CB |  if_b	rdlong	result1, fp
26a88     18 4F 85 C1 |  if_b	sub	fp, #280
26a8c     B8 04 90 CD |  if_b	jmp	#LR__3363
26a90     C0 4E 05 F1 | 	add	fp, #192
26a94     A7 26 02 FB | 	rdlong	local01, fp
26a98     58 4E 05 F1 | 	add	fp, #88
26a9c     A7 2A 02 FB | 	rdlong	local03, fp
26aa0     15 27 02 F1 | 	add	local01, local03
26aa4     58 4E 85 F1 | 	sub	fp, #88
26aa8     A7 26 62 FC | 	wrlong	local01, fp
26aac     C0 4E 85 F1 | 	sub	fp, #192
26ab0                 | LR__3336
26ab0     4C 4E 05 F1 | 	add	fp, #76
26ab4     A7 26 02 FB | 	rdlong	local01, fp
26ab8     34 4E 85 F1 | 	sub	fp, #52
26abc     A7 26 62 FC | 	wrlong	local01, fp
26ac0     18 4E 85 F1 | 	sub	fp, #24
26ac4     97 9E 48 FB | 	callpa	#(@LR__3342-@LR__3337)>>2,fcache_load_ptr_
26ac8                 | LR__3337
26ac8     18 4E 05 F1 | 	add	fp, #24
26acc     A7 28 02 FB | 	rdlong	local02, fp
26ad0     3C 4E 05 F1 | 	add	fp, #60
26ad4     A7 2E 02 FB | 	rdlong	local05, fp
26ad8     54 4E 85 F1 | 	sub	fp, #84
26adc     17 29 52 F2 | 	cmps	local02, local05 wc
26ae0     20 01 90 3D |  if_ae	jmp	#LR__3343
26ae4     18 4E 05 F1 | 	add	fp, #24
26ae8     A7 30 02 FB | 	rdlong	local06, fp
26aec     18 4E 85 F1 | 	sub	fp, #24
26af0     00 30 56 F2 | 	cmps	local06, #0 wc
26af4     58 00 90 CD |  if_b	jmp	#LR__3338
26af8     18 4E 05 F1 | 	add	fp, #24
26afc     A7 30 02 FB | 	rdlong	local06, fp
26b00     40 4E 05 F1 | 	add	fp, #64
26b04     A7 32 02 FB | 	rdlong	local07, fp
26b08     58 4E 85 F1 | 	sub	fp, #88
26b0c     19 31 52 F2 | 	cmps	local06, local07 wc
26b10     3C 00 90 3D |  if_ae	jmp	#LR__3338
26b14     C0 4E 05 F1 | 	add	fp, #192
26b18     A7 34 02 FB | 	rdlong	local08, fp
26b1c     1A 33 02 F6 | 	mov	local07, local08
26b20     01 32 06 F1 | 	add	local07, #1
26b24     A7 32 62 FC | 	wrlong	local07, fp
26b28     A8 4E 85 F1 | 	sub	fp, #168
26b2c     A7 32 02 FB | 	rdlong	local07, fp
26b30     19 37 02 F6 | 	mov	local09, local07
26b34     58 4E 05 F1 | 	add	fp, #88
26b38     A7 38 02 F6 | 	mov	local10, fp
26b3c     A7 36 02 F1 | 	add	local09, fp
26b40     1B 3B C2 FA | 	rdbyte	local11, local09
26b44     1A 3B 42 FC | 	wrbyte	local11, local08
26b48     70 4E 85 F1 | 	sub	fp, #112
26b4c     20 00 90 FD | 	jmp	#LR__3339
26b50                 | LR__3338
26b50     C0 4E 05 F1 | 	add	fp, #192
26b54     A7 34 02 FB | 	rdlong	local08, fp
26b58     1A 37 02 F6 | 	mov	local09, local08
26b5c     01 36 06 F1 | 	add	local09, #1
26b60     A7 36 62 FC | 	wrlong	local09, fp
26b64     C0 4E 85 F1 | 	sub	fp, #192
26b68     30 36 06 F6 | 	mov	local09, #48
26b6c     1A 61 48 FC | 	wrbyte	#48, local08
26b70                 | LR__3339
26b70     18 4E 05 F1 | 	add	fp, #24
26b74     A7 30 02 FB | 	rdlong	local06, fp
26b78     38 4E 05 F1 | 	add	fp, #56
26b7c     A7 3C 02 FB | 	rdlong	local12, fp
26b80     50 4E 85 F1 | 	sub	fp, #80
26b84     1E 31 0A F2 | 	cmp	local06, local12 wz
26b88     5C 00 90 5D |  if_ne	jmp	#LR__3341
26b8c     10 4F 05 F1 | 	add	fp, #272
26b90     A7 32 02 FB | 	rdlong	local07, fp
26b94     10 4F 85 F1 | 	sub	fp, #272
26b98     19 37 0A F6 | 	mov	local09, local07 wz
26b9c     28 00 90 5D |  if_ne	jmp	#LR__3340
26ba0     54 4E 05 F1 | 	add	fp, #84
26ba4     A7 3A 02 FB | 	rdlong	local11, fp
26ba8     1D 39 02 F6 | 	mov	local10, local11
26bac     01 38 86 F1 | 	sub	local10, #1
26bb0     3C 4E 85 F1 | 	sub	fp, #60
26bb4     A7 3E 02 FB | 	rdlong	local13, fp
26bb8     18 4E 85 F1 | 	sub	fp, #24
26bbc     1F 41 02 F6 | 	mov	local14, local13
26bc0     1C 41 52 F2 | 	cmps	local14, local10 wc
26bc4     20 00 90 3D |  if_ae	jmp	#LR__3341
26bc8                 | LR__3340
26bc8     C0 4E 05 F1 | 	add	fp, #192
26bcc     A7 34 02 FB | 	rdlong	local08, fp
26bd0     1A 3D 02 F6 | 	mov	local12, local08
26bd4     01 3C 06 F1 | 	add	local12, #1
26bd8     A7 3C 62 FC | 	wrlong	local12, fp
26bdc     C0 4E 85 F1 | 	sub	fp, #192
26be0     2E 36 06 F6 | 	mov	local09, #46
26be4     1A 5D 48 FC | 	wrbyte	#46, local08
26be8                 | LR__3341
26be8     18 4E 05 F1 | 	add	fp, #24
26bec     A7 42 02 FB | 	rdlong	local15, fp
26bf0     21 3D 02 F6 | 	mov	local12, local15
26bf4     01 3C 06 F1 | 	add	local12, #1
26bf8     A7 3C 62 FC | 	wrlong	local12, fp
26bfc     18 4E 85 F1 | 	sub	fp, #24
26c00     C4 FE 9F FD | 	jmp	#LR__3337
26c04                 | LR__3342
26c04                 | LR__3343
26c04     34 4E 05 F1 | 	add	fp, #52
26c08     A7 26 0A FB | 	rdlong	local01, fp wz
26c0c     34 4E 85 F1 | 	sub	fp, #52
26c10     A0 00 90 AD |  if_e	jmp	#LR__3347
26c14     C0 4E 05 F1 | 	add	fp, #192
26c18     A7 26 02 FB | 	rdlong	local01, fp
26c1c     01 26 86 F1 | 	sub	local01, #1
26c20     A7 26 62 FC | 	wrlong	local01, fp
26c24     C0 4E 85 F1 | 	sub	fp, #192
26c28     97 26 48 FB | 	callpa	#(@LR__3345-@LR__3344)>>2,fcache_load_ptr_
26c2c                 | LR__3344
26c2c     C0 4E 05 F1 | 	add	fp, #192
26c30     A7 26 02 FB | 	rdlong	local01, fp
26c34     04 4E 05 F1 | 	add	fp, #4
26c38     A7 2A 02 FB | 	rdlong	local03, fp
26c3c     C4 4E 85 F1 | 	sub	fp, #196
26c40     15 27 5A F2 | 	cmps	local01, local03 wcz
26c44     30 00 90 ED |  if_be	jmp	#LR__3346
26c48     C0 4E 05 F1 | 	add	fp, #192
26c4c     A7 30 02 FB | 	rdlong	local06, fp
26c50     C0 4E 85 F1 | 	sub	fp, #192
26c54     18 2D C2 FA | 	rdbyte	local04, local06
26c58     30 2C 0E F2 | 	cmp	local04, #48 wz
26c5c     18 00 90 5D |  if_ne	jmp	#LR__3346
26c60     C0 4E 05 F1 | 	add	fp, #192
26c64     A7 26 02 FB | 	rdlong	local01, fp
26c68     01 26 86 F1 | 	sub	local01, #1
26c6c     A7 26 62 FC | 	wrlong	local01, fp
26c70     C0 4E 85 F1 | 	sub	fp, #192
26c74     B4 FF 9F FD | 	jmp	#LR__3344
26c78                 | LR__3345
26c78                 | LR__3346
26c78     C0 4E 05 F1 | 	add	fp, #192
26c7c     A7 28 02 FB | 	rdlong	local02, fp
26c80     C0 4E 85 F1 | 	sub	fp, #192
26c84     14 27 C2 FA | 	rdbyte	local01, local02
26c88     2E 26 0E F2 | 	cmp	local01, #46 wz
26c8c     C0 4E 05 A1 |  if_e	add	fp, #192
26c90     A7 26 02 AB |  if_e	rdlong	local01, fp
26c94     01 26 86 A1 |  if_e	sub	local01, #1
26c98     A7 26 62 AC |  if_e	wrlong	local01, fp
26c9c     C0 4E 85 A1 |  if_e	sub	fp, #192
26ca0     C0 4E 05 F1 | 	add	fp, #192
26ca4     A7 2A 02 FB | 	rdlong	local03, fp
26ca8     01 2A 06 F1 | 	add	local03, #1
26cac     A7 2A 62 FC | 	wrlong	local03, fp
26cb0     C0 4E 85 F1 | 	sub	fp, #192
26cb4                 | LR__3347
26cb4     24 4E 05 F1 | 	add	fp, #36
26cb8     A7 26 0A FB | 	rdlong	local01, fp wz
26cbc     24 4E 85 F1 | 	sub	fp, #36
26cc0     B4 00 90 AD |  if_e	jmp	#LR__3350
26cc4     C0 4E 05 F1 | 	add	fp, #192
26cc8     A7 28 02 FB | 	rdlong	local02, fp
26ccc     14 2B 02 F6 | 	mov	local03, local02
26cd0     01 2A 06 F1 | 	add	local03, #1
26cd4     A7 2A 62 FC | 	wrlong	local03, fp
26cd8     90 4E 85 F1 | 	sub	fp, #144
26cdc     A7 2C 02 FB | 	rdlong	local04, fp
26ce0     14 2D 42 FC | 	wrbyte	local04, local02
26ce4     90 4E 05 F1 | 	add	fp, #144
26ce8     A7 28 02 FB | 	rdlong	local02, fp
26cec     14 2B 02 F6 | 	mov	local03, local02
26cf0     01 2A 06 F1 | 	add	local03, #1
26cf4     A7 2A 62 FC | 	wrlong	local03, fp
26cf8     60 4E 85 F1 | 	sub	fp, #96
26cfc     A7 2C 02 FB | 	rdlong	local04, fp
26d00     14 2D 42 FC | 	wrbyte	local04, local02
26d04     48 4E 85 F1 | 	sub	fp, #72
26d08     A7 00 68 FC | 	wrlong	#0, fp
26d0c     18 4E 85 F1 | 	sub	fp, #24
26d10                 | LR__3348
26d10     18 4E 05 F1 | 	add	fp, #24
26d14     A7 28 02 FB | 	rdlong	local02, fp
26d18     44 4E 05 F1 | 	add	fp, #68
26d1c     A7 2E 02 FB | 	rdlong	local05, fp
26d20     5C 4E 85 F1 | 	sub	fp, #92
26d24     17 29 52 F2 | 	cmps	local02, local05 wc
26d28     4C 00 90 3D |  if_ae	jmp	#LR__3349
26d2c     C0 4E 05 F1 | 	add	fp, #192
26d30     A7 34 02 FB | 	rdlong	local08, fp
26d34     1A 3D 02 F6 | 	mov	local12, local08
26d38     01 3C 06 F1 | 	add	local12, #1
26d3c     A7 3C 62 FC | 	wrlong	local12, fp
26d40     A8 4E 85 F1 | 	sub	fp, #168
26d44     A7 32 02 FB | 	rdlong	local07, fp
26d48     19 37 02 F6 | 	mov	local09, local07
26d4c     98 4E 05 F1 | 	add	fp, #152
26d50     A7 38 02 F6 | 	mov	local10, fp
26d54     A7 36 02 F1 | 	add	local09, fp
26d58     1B 3B C2 FA | 	rdbyte	local11, local09
26d5c     1A 3B 42 FC | 	wrbyte	local11, local08
26d60     98 4E 85 F1 | 	sub	fp, #152
26d64     A7 3C 02 FB | 	rdlong	local12, fp
26d68     01 3C 06 F1 | 	add	local12, #1
26d6c     A7 3C 62 FC | 	wrlong	local12, fp
26d70     18 4E 85 F1 | 	sub	fp, #24
26d74     98 FF 9F FD | 	jmp	#LR__3348
26d78                 | LR__3349
26d78                 | LR__3350
26d78     C0 4E 05 F1 | 	add	fp, #192
26d7c     A7 26 02 FB | 	rdlong	local01, fp
26d80     C0 4E 85 F1 | 	sub	fp, #192
26d84     13 01 48 FC | 	wrbyte	#0, local01
26d88                 | LR__3351
26d88     6C 4E 05 F1 | 	add	fp, #108
26d8c     A7 26 0A FB | 	rdlong	local01, fp wz
26d90     6C 4E 85 F1 | 	sub	fp, #108
26d94     90 01 90 AD |  if_e	jmp	#LR__3362
26d98     48 4E 05 F1 | 	add	fp, #72
26d9c     A7 2A 0A FB | 	rdlong	local03, fp wz
26da0     48 4E 85 F1 | 	sub	fp, #72
26da4     80 01 90 AD |  if_e	jmp	#LR__3362
26da8     C4 4E 05 F1 | 	add	fp, #196
26dac     A7 12 02 FB | 	rdlong	arg01, fp
26db0     C4 4E 85 F1 | 	sub	fp, #196
26db4     09 45 02 F6 | 	mov	local16, arg01
26db8     97 06 48 FB | 	callpa	#(@LR__3353-@LR__3352)>>2,fcache_load_ptr_
26dbc                 | LR__3352
26dbc     22 FB C9 FA | 	rdbyte	result1, local16 wz
26dc0     01 44 06 51 |  if_ne	add	local16, #1
26dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3352
26dc8                 | LR__3353
26dc8     09 45 82 F1 | 	sub	local16, arg01
26dcc     22 2D 02 F6 | 	mov	local04, local16
26dd0     6C 4E 05 F1 | 	add	fp, #108
26dd4     A7 30 02 FB | 	rdlong	local06, fp
26dd8     6C 4E 85 F1 | 	sub	fp, #108
26ddc     18 2D 5A F2 | 	cmps	local04, local06 wcz
26de0     44 01 90 ED |  if_be	jmp	#LR__3362
26de4     C4 4E 05 F1 | 	add	fp, #196
26de8     A7 26 02 FB | 	rdlong	local01, fp
26dec     5C 4E 05 F1 | 	add	fp, #92
26df0     A7 26 62 FC | 	wrlong	local01, fp
26df4     FC 4E 85 F1 | 	sub	fp, #252
26df8     A7 26 0A FB | 	rdlong	local01, fp wz
26dfc     24 4E 85 F1 | 	sub	fp, #36
26e00     20 00 90 AD |  if_e	jmp	#LR__3354
26e04     B8 4E 05 F1 | 	add	fp, #184
26e08     A7 00 68 FC | 	wrlong	#0, fp
26e0c     4C 4E 85 F1 | 	sub	fp, #76
26e10     A7 26 02 FB | 	rdlong	local01, fp
26e14     B0 4E 05 F1 | 	add	fp, #176
26e18     A7 26 62 FC | 	wrlong	local01, fp
26e1c     1C 4F 85 F1 | 	sub	fp, #284
26e20     24 00 90 FD | 	jmp	#LR__3355
26e24                 | LR__3354
26e24     6C 4E 05 F1 | 	add	fp, #108
26e28     A7 26 02 FB | 	rdlong	local01, fp
26e2c     01 26 86 F1 | 	sub	local01, #1
26e30     4C 4E 05 F1 | 	add	fp, #76
26e34     A7 2A 02 FB | 	rdlong	local03, fp
26e38     15 27 82 F1 | 	sub	local01, local03
26e3c     64 4E 05 F1 | 	add	fp, #100
26e40     A7 26 62 FC | 	wrlong	local01, fp
26e44     1C 4F 85 F1 | 	sub	fp, #284
26e48                 | LR__3355
26e48     97 20 48 FB | 	callpa	#(@LR__3357-@LR__3356)>>2,fcache_load_ptr_
26e4c                 | LR__3356
26e4c     1C 4F 05 F1 | 	add	fp, #284
26e50     A7 26 0A FB | 	rdlong	local01, fp wz
26e54     1C 4F 85 F1 | 	sub	fp, #284
26e58     30 00 90 AD |  if_e	jmp	#LR__3358
26e5c     20 4F 05 F1 | 	add	fp, #288
26e60     A7 28 02 FB | 	rdlong	local02, fp
26e64     14 2B 02 F6 | 	mov	local03, local02
26e68     01 2A 06 F1 | 	add	local03, #1
26e6c     A7 2A 62 FC | 	wrlong	local03, fp
26e70     14 55 48 FC | 	wrbyte	#42, local02
26e74     04 4E 85 F1 | 	sub	fp, #4
26e78     A7 26 02 FB | 	rdlong	local01, fp
26e7c     01 26 86 F1 | 	sub	local01, #1
26e80     A7 26 62 FC | 	wrlong	local01, fp
26e84     1C 4F 85 F1 | 	sub	fp, #284
26e88     C0 FF 9F FD | 	jmp	#LR__3356
26e8c                 | LR__3357
26e8c                 | LR__3358
26e8c     B8 4E 05 F1 | 	add	fp, #184
26e90     A7 26 0A FB | 	rdlong	local01, fp wz
26e94     B8 4E 85 F1 | 	sub	fp, #184
26e98     70 00 90 AD |  if_e	jmp	#LR__3361
26e9c     20 4F 05 F1 | 	add	fp, #288
26ea0     A7 28 02 FB | 	rdlong	local02, fp
26ea4     14 2B 02 F6 | 	mov	local03, local02
26ea8     01 2A 06 F1 | 	add	local03, #1
26eac     A7 2A 62 FC | 	wrlong	local03, fp
26eb0     14 5D 48 FC | 	wrbyte	#46, local02
26eb4     04 4E 85 F1 | 	sub	fp, #4
26eb8     A7 00 68 FC | 	wrlong	#0, fp
26ebc     1C 4F 85 F1 | 	sub	fp, #284
26ec0                 | LR__3359
26ec0     1C 4F 05 F1 | 	add	fp, #284
26ec4     A7 28 02 FB | 	rdlong	local02, fp
26ec8     64 4E 85 F1 | 	sub	fp, #100
26ecc     A7 2E 02 FB | 	rdlong	local05, fp
26ed0     B8 4E 85 F1 | 	sub	fp, #184
26ed4     17 29 52 F2 | 	cmps	local02, local05 wc
26ed8     30 00 90 3D |  if_ae	jmp	#LR__3360
26edc     20 4F 05 F1 | 	add	fp, #288
26ee0     A7 34 02 FB | 	rdlong	local08, fp
26ee4     1A 3D 02 F6 | 	mov	local12, local08
26ee8     01 3C 06 F1 | 	add	local12, #1
26eec     A7 3C 62 FC | 	wrlong	local12, fp
26ef0     1A 55 48 FC | 	wrbyte	#42, local08
26ef4     04 4E 85 F1 | 	sub	fp, #4
26ef8     A7 3C 02 FB | 	rdlong	local12, fp
26efc     01 3C 06 F1 | 	add	local12, #1
26f00     A7 3C 62 FC | 	wrlong	local12, fp
26f04     1C 4F 85 F1 | 	sub	fp, #284
26f08     B4 FF 9F FD | 	jmp	#LR__3359
26f0c                 | LR__3360
26f0c                 | LR__3361
26f0c     20 4F 05 F1 | 	add	fp, #288
26f10     A7 28 02 FB | 	rdlong	local02, fp
26f14     14 2B 02 F6 | 	mov	local03, local02
26f18     01 2A 06 F1 | 	add	local03, #1
26f1c     A7 2A 62 FC | 	wrlong	local03, fp
26f20     20 4F 85 F1 | 	sub	fp, #288
26f24     14 01 48 FC | 	wrbyte	#0, local02
26f28                 | LR__3362
26f28     04 4E 05 F1 | 	add	fp, #4
26f2c     A7 12 02 FB | 	rdlong	arg01, fp
26f30     04 4E 05 F1 | 	add	fp, #4
26f34     A7 14 02 FB | 	rdlong	arg02, fp
26f38     BC 4E 05 F1 | 	add	fp, #188
26f3c     A7 16 02 FB | 	rdlong	arg03, fp
26f40     C4 4E 85 F1 | 	sub	fp, #196
26f44     C4 EE BF FD | 	call	#__system___fmtstr
26f48                 | LR__3363
26f48     A7 F0 03 F6 | 	mov	ptra, fp
26f4c     B2 00 A0 FD | 	call	#popregs_
26f50                 | __system___fmtfloat_ret
26f50     2D 00 64 FD | 	ret
26f54                 | 
26f54                 | __system__Left_S
26f54     04 4A 05 F6 | 	mov	COUNT_, #4
26f58     A8 00 A0 FD | 	call	#pushregs_
26f5c     09 27 02 F6 | 	mov	local01, arg01
26f60     0A 29 02 F6 | 	mov	local02, arg02
26f64     01 28 56 F2 | 	cmps	local02, #1 wc
26f68     A4 01 00 CF 
26f6c     EE FB 05 C6 |  if_b	mov	result1, ##@LR__5313
26f70     5C 00 90 CD |  if_b	jmp	#LR__3373
26f74     13 13 02 F6 | 	mov	arg01, local01
26f78     09 2B 02 F6 | 	mov	local03, arg01
26f7c     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
26f80                 | LR__3370
26f80     15 FB C9 FA | 	rdbyte	result1, local03 wz
26f84     01 2A 06 51 |  if_ne	add	local03, #1
26f88     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
26f8c                 | LR__3371
26f8c     09 2B 82 F1 | 	sub	local03, arg01
26f90     15 FB 01 F6 | 	mov	result1, local03
26f94     14 FB 59 F2 | 	cmps	result1, local02 wcz
26f98     13 FB 01 E6 |  if_be	mov	result1, local01
26f9c     30 00 90 ED |  if_be	jmp	#LR__3373
26fa0     14 13 02 F6 | 	mov	arg01, local02
26fa4     02 12 06 F1 | 	add	arg01, #2
26fa8     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
26fac     FD 2C 0A F6 | 	mov	local04, result1 wz
26fb0     18 00 90 AD |  if_e	jmp	#LR__3372
26fb4     16 13 02 F6 | 	mov	arg01, local04
26fb8     13 15 02 F6 | 	mov	arg02, local01
26fbc     14 17 02 F6 | 	mov	arg03, local02
26fc0     30 DE BF FD | 	call	#__system____builtin_memmove
26fc4     16 29 02 F1 | 	add	local02, local04
26fc8     14 01 48 FC | 	wrbyte	#0, local02
26fcc                 | LR__3372
26fcc     16 FB 01 F6 | 	mov	result1, local04
26fd0                 | LR__3373
26fd0     A7 F0 03 F6 | 	mov	ptra, fp
26fd4     B2 00 A0 FD | 	call	#popregs_
26fd8                 | __system__Left_S_ret
26fd8     2D 00 64 FD | 	ret
26fdc                 | 
26fdc                 | __system__Right_S
26fdc     05 4A 05 F6 | 	mov	COUNT_, #5
26fe0     A8 00 A0 FD | 	call	#pushregs_
26fe4     09 27 02 F6 | 	mov	local01, arg01
26fe8     0A 29 02 F6 | 	mov	local02, arg02
26fec     01 28 56 F2 | 	cmps	local02, #1 wc
26ff0     A4 01 00 CF 
26ff4     EF FB 05 C6 |  if_b	mov	result1, ##@LR__5314
26ff8     64 00 90 CD |  if_b	jmp	#LR__3383
26ffc     13 13 02 F6 | 	mov	arg01, local01
27000     09 2B 02 F6 | 	mov	local03, arg01
27004     97 06 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
27008                 | LR__3380
27008     15 FB C9 FA | 	rdbyte	result1, local03 wz
2700c     01 2A 06 51 |  if_ne	add	local03, #1
27010     F4 FF 9F 5D |  if_ne	jmp	#LR__3380
27014                 | LR__3381
27014     09 2B 82 F1 | 	sub	local03, arg01
27018     15 FB 01 F6 | 	mov	result1, local03
2701c     FD 2C 02 F6 | 	mov	local04, result1
27020     14 2D 5A F2 | 	cmps	local04, local02 wcz
27024     13 FB 01 E6 |  if_be	mov	result1, local01
27028     34 00 90 ED |  if_be	jmp	#LR__3383
2702c     14 13 02 F6 | 	mov	arg01, local02
27030     02 12 06 F1 | 	add	arg01, #2
27034     40 20 B0 FD | 	call	#__system___gc_alloc_managed
27038     FD 2E 0A F6 | 	mov	local05, result1 wz
2703c     1C 00 90 AD |  if_e	jmp	#LR__3382
27040     14 2D 82 F1 | 	sub	local04, local02
27044     13 2D 02 F1 | 	add	local04, local01
27048     01 28 06 F1 | 	add	local02, #1
2704c     17 13 02 F6 | 	mov	arg01, local05
27050     16 15 02 F6 | 	mov	arg02, local04
27054     14 17 02 F6 | 	mov	arg03, local02
27058     98 DD BF FD | 	call	#__system____builtin_memmove
2705c                 | LR__3382
2705c     17 FB 01 F6 | 	mov	result1, local05
27060                 | LR__3383
27060     A7 F0 03 F6 | 	mov	ptra, fp
27064     B2 00 A0 FD | 	call	#popregs_
27068                 | __system__Right_S_ret
27068     2D 00 64 FD | 	ret
2706c                 | 
2706c                 | __system__Mid_S
2706c     05 4A 05 F6 | 	mov	COUNT_, #5
27070     A8 00 A0 FD | 	call	#pushregs_
27074     09 27 02 F6 | 	mov	local01, arg01
27078     0A 29 02 F6 | 	mov	local02, arg02
2707c     01 16 56 F2 | 	cmps	arg03, #1 wc
27080     A4 01 00 CF 
27084     F0 FB 05 C6 |  if_b	mov	result1, ##@LR__5315
27088     80 00 90 CD |  if_b	jmp	#LR__3393
2708c     01 28 86 F1 | 	sub	local02, #1
27090     00 28 56 F3 | 	fges	local02, #0 wc
27094     13 13 02 F6 | 	mov	arg01, local01
27098     09 2B 02 F6 | 	mov	local03, arg01
2709c     97 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
270a0                 | LR__3390
270a0     15 FB C9 FA | 	rdbyte	result1, local03 wz
270a4     01 2A 06 51 |  if_ne	add	local03, #1
270a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
270ac                 | LR__3391
270ac     09 2B 82 F1 | 	sub	local03, arg01
270b0     15 FB 01 F6 | 	mov	result1, local03
270b4     FD 14 02 F6 | 	mov	arg02, result1
270b8     14 15 52 F2 | 	cmps	arg02, local02 wc
270bc     A4 01 00 CF 
270c0     F1 FB 05 C6 |  if_b	mov	result1, ##@LR__5316
270c4     44 00 90 CD |  if_b	jmp	#LR__3393
270c8     0A 2D 02 F6 | 	mov	local04, arg02
270cc     14 2D 82 F1 | 	sub	local04, local02
270d0     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
270d4     0B 2D 02 16 |  if_a	mov	local04, arg03
270d8     16 13 02 F6 | 	mov	arg01, local04
270dc     02 12 06 F1 | 	add	arg01, #2
270e0     94 1F B0 FD | 	call	#__system___gc_alloc_managed
270e4     FD 2E 0A F6 | 	mov	local05, result1 wz
270e8     1C 00 90 AD |  if_e	jmp	#LR__3392
270ec     13 29 02 F1 | 	add	local02, local01
270f0     17 13 02 F6 | 	mov	arg01, local05
270f4     14 15 02 F6 | 	mov	arg02, local02
270f8     16 17 02 F6 | 	mov	arg03, local04
270fc     F4 DC BF FD | 	call	#__system____builtin_memmove
27100     17 2D 02 F1 | 	add	local04, local05
27104     16 01 48 FC | 	wrbyte	#0, local04
27108                 | LR__3392
27108     17 FB 01 F6 | 	mov	result1, local05
2710c                 | LR__3393
2710c     A7 F0 03 F6 | 	mov	ptra, fp
27110     B2 00 A0 FD | 	call	#popregs_
27114                 | __system__Mid_S_ret
27114     2D 00 64 FD | 	ret
27118                 | 
27118                 | __system__Chr_S
27118     01 4A 05 F6 | 	mov	COUNT_, #1
2711c     A8 00 A0 FD | 	call	#pushregs_
27120     09 27 02 F6 | 	mov	local01, arg01
27124     03 12 06 F6 | 	mov	arg01, #3
27128     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
2712c     00 FA 4D F2 | 	cmps	result1, #0 wz
27130     FD 26 42 5C |  if_ne	wrbyte	local01, result1
27134     01 FA 05 51 |  if_ne	add	result1, #1
27138     FD 00 48 5C |  if_ne	wrbyte	#0, result1
2713c     01 FA 85 51 |  if_ne	sub	result1, #1
27140     A7 F0 03 F6 | 	mov	ptra, fp
27144     B2 00 A0 FD | 	call	#popregs_
27148                 | __system__Chr_S_ret
27148     2D 00 64 FD | 	ret
2714c                 | 
2714c                 | __system__str_S
2714c     02 4A 05 F6 | 	mov	COUNT_, #2
27150     A8 00 A0 FD | 	call	#pushregs_
27154     09 27 02 F6 | 	mov	local01, arg01
27158     10 12 06 F6 | 	mov	arg01, #16
2715c     18 1F B0 FD | 	call	#__system___gc_alloc_managed
27160     FD 28 0A F6 | 	mov	local02, result1 wz
27164     30 00 90 AD |  if_e	jmp	#LR__3400
27168     F8 13 02 F6 | 	mov	arg01, ptra
2716c     08 F0 07 F1 | 	add	ptra, #8
27170     09 29 62 FC | 	wrlong	local02, arg01
27174     04 12 06 F1 | 	add	arg01, #4
27178     09 01 68 FC | 	wrlong	#0, arg01
2717c     04 12 86 F1 | 	sub	arg01, #4
27180     00 F0 04 FF 
27184     00 12 46 F5 | 	or	arg01, ##165675008
27188     00 14 06 F6 | 	mov	arg02, #0
2718c     13 17 02 F6 | 	mov	arg03, local01
27190     67 18 06 F6 | 	mov	arg04, #103
27194     90 EE BF FD | 	call	#__system___fmtfloat
27198                 | LR__3400
27198     14 FB 01 F6 | 	mov	result1, local02
2719c     A7 F0 03 F6 | 	mov	ptra, fp
271a0     B2 00 A0 FD | 	call	#popregs_
271a4                 | __system__str_S_ret
271a4     2D 00 64 FD | 	ret
271a8                 | 
271a8                 | __system__Number_S
271a8     08 4A 05 F6 | 	mov	COUNT_, #8
271ac     A8 00 A0 FD | 	call	#pushregs_
271b0     09 27 02 F6 | 	mov	local01, arg01
271b4     0A 29 0A F6 | 	mov	local02, arg02 wz
271b8     0B 2B 02 F6 | 	mov	local03, arg03
271bc     3C 00 90 5D |  if_ne	jmp	#LR__3412
271c0     01 28 06 F6 | 	mov	local02, #1
271c4     15 2D 02 F6 | 	mov	local04, local03
271c8     01 2E 06 F6 | 	mov	local05, #1
271cc     97 16 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
271d0                 | LR__3410
271d0     00 30 06 F6 | 	mov	local06, #0
271d4     13 2D 1A F2 | 	cmp	local04, local01 wcz
271d8     01 30 66 E6 |  if_be	neg	local06, #1
271dc     16 2F 12 F2 | 	cmp	local05, local04 wc
271e0     19 33 A2 F1 | 	subx	local07, local07
271e4     19 31 CA F7 | 	test	local06, local07 wz
271e8     15 2D 02 5D |  if_ne	qmul	local04, local03
271ec     16 2F 02 56 |  if_ne	mov	local05, local04
271f0     01 28 06 51 |  if_ne	add	local02, #1
271f4     18 2C 62 5D |  if_ne	getqx	local04
271f8     D4 FF 9F 5D |  if_ne	jmp	#LR__3410
271fc                 | LR__3411
271fc                 | LR__3412
271fc     20 28 36 F3 | 	fle	local02, #32 wc
27200     14 13 02 F6 | 	mov	arg01, local02
27204     02 12 06 F1 | 	add	arg01, #2
27208     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
2720c     FD 30 02 F6 | 	mov	local06, result1
27210     14 33 02 F6 | 	mov	local07, local02
27214     18 33 02 F1 | 	add	local07, local06
27218     19 01 48 FC | 	wrbyte	#0, local07
2721c     97 1A 48 FB | 	callpa	#(@LR__3414-@LR__3413)>>2,fcache_load_ptr_
27220                 | LR__3413
27220     01 28 16 F2 | 	cmp	local02, #1 wc
27224     2C 00 90 CD |  if_b	jmp	#LR__3415
27228     15 27 12 FD | 	qdiv	local01, local03
2722c     01 28 86 F1 | 	sub	local02, #1
27230     14 33 02 F6 | 	mov	local07, local02
27234     18 33 02 F1 | 	add	local07, local06
27238     19 34 62 FD | 	getqy	local08
2723c     0A 34 16 F2 | 	cmp	local08, #10 wc
27240     30 34 06 C1 |  if_b	add	local08, #48
27244     37 34 06 31 |  if_ae	add	local08, #55
27248     19 35 42 FC | 	wrbyte	local08, local07
2724c     18 26 62 FD | 	getqx	local01
27250     CC FF 9F FD | 	jmp	#LR__3413
27254                 | LR__3414
27254                 | LR__3415
27254     18 FB 01 F6 | 	mov	result1, local06
27258     A7 F0 03 F6 | 	mov	ptra, fp
2725c     B2 00 A0 FD | 	call	#popregs_
27260                 | __system__Number_S_ret
27260     2D 00 64 FD | 	ret
27264                 | 
27264                 | __system__LCase_S
27264     07 4A 05 F6 | 	mov	COUNT_, #7
27268     A8 00 A0 FD | 	call	#pushregs_
2726c     09 27 02 F6 | 	mov	local01, arg01
27270     09 29 02 F6 | 	mov	local02, arg01
27274     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
27278                 | LR__3420
27278     14 FB C9 FA | 	rdbyte	result1, local02 wz
2727c     01 28 06 51 |  if_ne	add	local02, #1
27280     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
27284                 | LR__3421
27284     09 29 82 F1 | 	sub	local02, arg01
27288     14 FB 01 F6 | 	mov	result1, local02
2728c     FD 28 0A F6 | 	mov	local02, result1 wz
27290     A4 01 00 AF 
27294     F2 FB 05 A6 |  if_e	mov	result1, ##@LR__5317
27298     7C 00 90 AD |  if_e	jmp	#LR__3427
2729c     14 13 02 F6 | 	mov	arg01, local02
272a0     02 12 06 F1 | 	add	arg01, #2
272a4     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
272a8     FD 2A 0A F6 | 	mov	local03, result1 wz
272ac     64 00 90 AD |  if_e	jmp	#LR__3426
272b0     01 2C 66 F6 | 	neg	local04, #1
272b4     97 26 48 FB | 	callpa	#(@LR__3425-@LR__3422)>>2,fcache_load_ptr_
272b8                 | LR__3422
272b8     01 2C 06 F1 | 	add	local04, #1
272bc     16 2F 02 F6 | 	mov	local05, local04
272c0     13 2F 02 F1 | 	add	local05, local01
272c4     17 31 C2 FA | 	rdbyte	local06, local05
272c8     41 30 56 F2 | 	cmps	local06, #65 wc
272cc     18 00 90 CD |  if_b	jmp	#LR__3423
272d0     5B 30 56 F2 | 	cmps	local06, #91 wc
272d4     16 33 02 C6 |  if_b	mov	local07, local04
272d8     15 33 02 C1 |  if_b	add	local07, local03
272dc     20 30 06 C1 |  if_b	add	local06, #32
272e0     19 31 42 CC |  if_b	wrbyte	local06, local07
272e4     0C 00 90 CD |  if_b	jmp	#LR__3424
272e8                 | LR__3423
272e8     16 33 02 F6 | 	mov	local07, local04
272ec     15 33 02 F1 | 	add	local07, local03
272f0     19 31 42 FC | 	wrbyte	local06, local07
272f4                 | LR__3424
272f4     14 31 02 F6 | 	mov	local06, local02
272f8     01 30 86 F1 | 	sub	local06, #1
272fc     18 2D 0A F2 | 	cmp	local04, local06 wz
27300     B4 FF 9F 5D |  if_ne	jmp	#LR__3422
27304                 | LR__3425
27304     15 29 02 F1 | 	add	local02, local03
27308     14 01 48 FC | 	wrbyte	#0, local02
2730c     15 FB 01 F6 | 	mov	result1, local03
27310     04 00 90 FD | 	jmp	#LR__3427
27314                 | LR__3426
27314     15 FB 01 F6 | 	mov	result1, local03
27318                 | LR__3427
27318     A7 F0 03 F6 | 	mov	ptra, fp
2731c     B2 00 A0 FD | 	call	#popregs_
27320                 | __system__LCase_S_ret
27320     2D 00 64 FD | 	ret
27324                 | 
27324                 | __system__LTrim_S
27324     05 4A 05 F6 | 	mov	COUNT_, #5
27328     A8 00 A0 FD | 	call	#pushregs_
2732c     09 27 02 F6 | 	mov	local01, arg01
27330     09 29 02 F6 | 	mov	local02, arg01
27334     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
27338                 | LR__3430
27338     14 FB C9 FA | 	rdbyte	result1, local02 wz
2733c     01 28 06 51 |  if_ne	add	local02, #1
27340     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
27344                 | LR__3431
27344     09 29 82 F1 | 	sub	local02, arg01
27348     14 FB 01 F6 | 	mov	result1, local02
2734c     FD 28 0A F6 | 	mov	local02, result1 wz
27350     A4 01 00 AF 
27354     F3 FB 05 A6 |  if_e	mov	result1, ##@LR__5318
27358     7C 00 90 AD |  if_e	jmp	#LR__3436
2735c     00 2A 06 F6 | 	mov	local03, #0
27360     14 2D 02 F6 | 	mov	local04, local02
27364                 | LR__3432
27364     16 2B 52 F2 | 	cmps	local03, local04 wc
27368     68 00 90 3D |  if_ae	jmp	#LR__3435
2736c     15 17 02 F6 | 	mov	arg03, local03
27370     13 17 02 F1 | 	add	arg03, local01
27374     0B 17 C2 FA | 	rdbyte	arg03, arg03
27378     20 16 0E F2 | 	cmp	arg03, #32 wz
2737c     4C 00 90 AD |  if_e	jmp	#LR__3434
27380     14 13 02 F6 | 	mov	arg01, local02
27384     15 13 82 F1 | 	sub	arg01, local03
27388     02 12 06 F1 | 	add	arg01, #2
2738c     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
27390     FD 2E 0A F6 | 	mov	local05, result1 wz
27394     2C 00 90 AD |  if_e	jmp	#LR__3433
27398     15 15 02 F6 | 	mov	arg02, local03
2739c     13 15 02 F1 | 	add	arg02, local01
273a0     14 17 02 F6 | 	mov	arg03, local02
273a4     15 17 82 F1 | 	sub	arg03, local03
273a8     17 13 02 F6 | 	mov	arg01, local05
273ac     44 DA BF FD | 	call	#__system____builtin_memmove
273b0     15 29 82 F1 | 	sub	local02, local03
273b4     17 29 02 F1 | 	add	local02, local05
273b8     14 01 48 FC | 	wrbyte	#0, local02
273bc     17 FB 01 F6 | 	mov	result1, local05
273c0     14 00 90 FD | 	jmp	#LR__3436
273c4                 | LR__3433
273c4     17 FB 01 F6 | 	mov	result1, local05
273c8     0C 00 90 FD | 	jmp	#LR__3436
273cc                 | LR__3434
273cc     01 2A 06 F1 | 	add	local03, #1
273d0     90 FF 9F FD | 	jmp	#LR__3432
273d4                 | LR__3435
273d4     13 FB 01 F6 | 	mov	result1, local01
273d8                 | LR__3436
273d8     A7 F0 03 F6 | 	mov	ptra, fp
273dc     B2 00 A0 FD | 	call	#popregs_
273e0                 | __system__LTrim_S_ret
273e0     2D 00 64 FD | 	ret
273e4                 | 
273e4                 | __system__RTrim_S
273e4     04 4A 05 F6 | 	mov	COUNT_, #4
273e8     A8 00 A0 FD | 	call	#pushregs_
273ec     09 27 02 F6 | 	mov	local01, arg01
273f0     09 29 02 F6 | 	mov	local02, arg01
273f4     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
273f8                 | LR__3440
273f8     14 FB C9 FA | 	rdbyte	result1, local02 wz
273fc     01 28 06 51 |  if_ne	add	local02, #1
27400     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
27404                 | LR__3441
27404     09 29 82 F1 | 	sub	local02, arg01
27408     14 FB 01 F6 | 	mov	result1, local02
2740c     FD 28 0A F6 | 	mov	local02, result1 wz
27410     A4 01 00 AF 
27414     F4 FB 05 A6 |  if_e	mov	result1, ##@LR__5319
27418     74 00 90 AD |  if_e	jmp	#LR__3445
2741c     14 2B 02 F6 | 	mov	local03, local02
27420     01 2A 86 F1 | 	sub	local03, #1
27424                 | LR__3442
27424     15 15 02 F6 | 	mov	arg02, local03
27428     13 15 02 F1 | 	add	arg02, local01
2742c     0A 29 C2 FA | 	rdbyte	local02, arg02
27430     20 28 0E F2 | 	cmp	local02, #32 wz
27434     44 00 90 AD |  if_e	jmp	#LR__3444
27438     15 13 02 F6 | 	mov	arg01, local03
2743c     02 12 06 F1 | 	add	arg01, #2
27440     34 1C B0 FD | 	call	#__system___gc_alloc_managed
27444     FD 2C 0A F6 | 	mov	local04, result1 wz
27448     28 00 90 AD |  if_e	jmp	#LR__3443
2744c     15 17 02 F6 | 	mov	arg03, local03
27450     01 16 06 F1 | 	add	arg03, #1
27454     16 13 02 F6 | 	mov	arg01, local04
27458     13 15 02 F6 | 	mov	arg02, local01
2745c     94 D9 BF FD | 	call	#__system____builtin_memmove
27460     01 2A 06 F1 | 	add	local03, #1
27464     16 2B 02 F1 | 	add	local03, local04
27468     15 01 48 FC | 	wrbyte	#0, local03
2746c     16 FB 01 F6 | 	mov	result1, local04
27470     1C 00 90 FD | 	jmp	#LR__3445
27474                 | LR__3443
27474     16 FB 01 F6 | 	mov	result1, local04
27478     14 00 90 FD | 	jmp	#LR__3445
2747c                 | LR__3444
2747c     01 2A 86 F1 | 	sub	local03, #1
27480     00 2A 56 F2 | 	cmps	local03, #0 wc
27484     9C FF 9F 3D |  if_ae	jmp	#LR__3442
27488     A4 01 00 FF 
2748c     F5 FB 05 F6 | 	mov	result1, ##@LR__5320
27490                 | LR__3445
27490     A7 F0 03 F6 | 	mov	ptra, fp
27494     B2 00 A0 FD | 	call	#popregs_
27498                 | __system__RTrim_S_ret
27498     2D 00 64 FD | 	ret
2749c                 | 
2749c                 | __system__Instr
2749c     07 4A 05 F6 | 	mov	COUNT_, #7
274a0     A8 00 A0 FD | 	call	#pushregs_
274a4     09 27 02 F6 | 	mov	local01, arg01
274a8     0A 29 02 F6 | 	mov	local02, arg02
274ac     0B 2B 02 F6 | 	mov	local03, arg03
274b0     15 13 02 F6 | 	mov	arg01, local03
274b4     09 2D 02 F6 | 	mov	local04, arg01
274b8     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
274bc                 | LR__3450
274bc     16 FB C9 FA | 	rdbyte	result1, local04 wz
274c0     01 2C 06 51 |  if_ne	add	local04, #1
274c4     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
274c8                 | LR__3451
274c8     09 2D 82 F1 | 	sub	local04, arg01
274cc     16 2F 02 F6 | 	mov	local05, local04
274d0     14 13 02 F6 | 	mov	arg01, local02
274d4     09 2D 02 F6 | 	mov	local04, arg01
274d8     97 06 48 FB | 	callpa	#(@LR__3453-@LR__3452)>>2,fcache_load_ptr_
274dc                 | LR__3452
274dc     16 FB C9 FA | 	rdbyte	result1, local04 wz
274e0     01 2C 06 51 |  if_ne	add	local04, #1
274e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3452
274e8                 | LR__3453
274e8     09 2D 82 F1 | 	sub	local04, arg01
274ec     16 FB 01 F6 | 	mov	result1, local04
274f0     FD 18 0A F6 | 	mov	arg04, result1 wz
274f4     00 FA 05 A6 |  if_e	mov	result1, #0
274f8     98 00 90 AD |  if_e	jmp	#LR__3457
274fc     00 2E 0E F2 | 	cmp	local05, #0 wz
27500     00 FA 05 A6 |  if_e	mov	result1, #0
27504     8C 00 90 AD |  if_e	jmp	#LR__3457
27508     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2750c     00 FA 05 16 |  if_a	mov	result1, #0
27510     80 00 90 1D |  if_a	jmp	#LR__3457
27514     01 26 56 F2 | 	cmps	local01, #1 wc
27518     01 26 06 C6 |  if_b	mov	local01, #1
2751c     15 31 C2 FA | 	rdbyte	local06, local03
27520     01 2E 0E F2 | 	cmp	local05, #1 wz
27524     18 00 90 5D |  if_ne	jmp	#LR__3454
27528     14 13 02 F6 | 	mov	arg01, local02
2752c     18 15 02 F6 | 	mov	arg02, local06
27530     13 17 02 F6 | 	mov	arg03, local01
27534     00 18 06 F6 | 	mov	arg04, #0
27538     14 37 B0 FD | 	call	#__system____ScanForChar
2753c     54 00 90 FD | 	jmp	#LR__3457
27540                 | LR__3454
27540     13 33 02 F6 | 	mov	local07, local01
27544                 | LR__3455
27544     14 13 02 F6 | 	mov	arg01, local02
27548     18 15 02 F6 | 	mov	arg02, local06
2754c     19 17 02 F6 | 	mov	arg03, local07
27550     00 18 06 F6 | 	mov	arg04, #0
27554     F8 36 B0 FD | 	call	#__system____ScanForChar
27558     FD 32 0A F6 | 	mov	local07, result1 wz
2755c     30 00 90 AD |  if_e	jmp	#LR__3456
27560     17 17 02 F6 | 	mov	arg03, local05
27564     14 13 02 F6 | 	mov	arg01, local02
27568     19 15 02 F6 | 	mov	arg02, local07
2756c     FC FA BF FD | 	call	#__system__Mid_S
27570     FD 12 02 F6 | 	mov	arg01, result1
27574     15 15 02 F6 | 	mov	arg02, local03
27578     80 D9 BF FD | 	call	#__system___string_cmp
2757c     00 FA 0D F2 | 	cmp	result1, #0 wz
27580     19 FB 01 A6 |  if_e	mov	result1, local07
27584     0C 00 90 AD |  if_e	jmp	#LR__3457
27588     17 33 02 F1 | 	add	local07, local05
2758c     B4 FF 9F FD | 	jmp	#LR__3455
27590                 | LR__3456
27590     00 FA 05 F6 | 	mov	result1, #0
27594                 | LR__3457
27594     A7 F0 03 F6 | 	mov	ptra, fp
27598     B2 00 A0 FD | 	call	#popregs_
2759c                 | __system__Instr_ret
2759c     2D 00 64 FD | 	ret
275a0                 | 
275a0                 | __system__InstrRev
275a0     07 4A 05 F6 | 	mov	COUNT_, #7
275a4     A8 00 A0 FD | 	call	#pushregs_
275a8     09 27 02 F6 | 	mov	local01, arg01
275ac     0A 29 02 F6 | 	mov	local02, arg02
275b0     0B 2B 02 F6 | 	mov	local03, arg03
275b4     15 13 02 F6 | 	mov	arg01, local03
275b8     09 2D 02 F6 | 	mov	local04, arg01
275bc     97 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
275c0                 | LR__3460
275c0     16 FB C9 FA | 	rdbyte	result1, local04 wz
275c4     01 2C 06 51 |  if_ne	add	local04, #1
275c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
275cc                 | LR__3461
275cc     09 2D 82 F1 | 	sub	local04, arg01
275d0     16 2F 02 F6 | 	mov	local05, local04
275d4     14 13 02 F6 | 	mov	arg01, local02
275d8     09 2D 02 F6 | 	mov	local04, arg01
275dc     97 06 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
275e0                 | LR__3462
275e0     16 FB C9 FA | 	rdbyte	result1, local04 wz
275e4     01 2C 06 51 |  if_ne	add	local04, #1
275e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3462
275ec                 | LR__3463
275ec     09 2D 82 F1 | 	sub	local04, arg01
275f0     16 FB 01 F6 | 	mov	result1, local04
275f4     FD 18 0A F6 | 	mov	arg04, result1 wz
275f8     00 FA 05 A6 |  if_e	mov	result1, #0
275fc     98 00 90 AD |  if_e	jmp	#LR__3467
27600     00 2E 0E F2 | 	cmp	local05, #0 wz
27604     00 FA 05 A6 |  if_e	mov	result1, #0
27608     8C 00 90 AD |  if_e	jmp	#LR__3467
2760c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
27610     0C 27 02 16 |  if_a	mov	local01, arg04
27614     01 26 56 F2 | 	cmps	local01, #1 wc
27618     01 26 06 C6 |  if_b	mov	local01, #1
2761c     15 31 C2 FA | 	rdbyte	local06, local03
27620     01 2E 0E F2 | 	cmp	local05, #1 wz
27624     18 00 90 5D |  if_ne	jmp	#LR__3464
27628     14 13 02 F6 | 	mov	arg01, local02
2762c     18 15 02 F6 | 	mov	arg02, local06
27630     13 17 02 F6 | 	mov	arg03, local01
27634     01 18 06 F6 | 	mov	arg04, #1
27638     14 36 B0 FD | 	call	#__system____ScanForChar
2763c     58 00 90 FD | 	jmp	#LR__3467
27640                 | LR__3464
27640     17 33 02 F6 | 	mov	local07, local05
27644     01 32 86 F1 | 	sub	local07, #1
27648                 | LR__3465
27648     14 13 02 F6 | 	mov	arg01, local02
2764c     18 15 02 F6 | 	mov	arg02, local06
27650     19 17 02 F6 | 	mov	arg03, local07
27654     01 18 06 F6 | 	mov	arg04, #1
27658     F4 35 B0 FD | 	call	#__system____ScanForChar
2765c     FD 32 0A F6 | 	mov	local07, result1 wz
27660     30 00 90 AD |  if_e	jmp	#LR__3466
27664     17 17 02 F6 | 	mov	arg03, local05
27668     14 13 02 F6 | 	mov	arg01, local02
2766c     19 15 02 F6 | 	mov	arg02, local07
27670     F8 F9 BF FD | 	call	#__system__Mid_S
27674     FD 12 02 F6 | 	mov	arg01, result1
27678     15 15 02 F6 | 	mov	arg02, local03
2767c     7C D8 BF FD | 	call	#__system___string_cmp
27680     00 FA 0D F2 | 	cmp	result1, #0 wz
27684     19 FB 01 A6 |  if_e	mov	result1, local07
27688     0C 00 90 AD |  if_e	jmp	#LR__3467
2768c     17 33 82 F1 | 	sub	local07, local05
27690     B4 FF 9F FD | 	jmp	#LR__3465
27694                 | LR__3466
27694     00 FA 05 F6 | 	mov	result1, #0
27698                 | LR__3467
27698     A7 F0 03 F6 | 	mov	ptra, fp
2769c     B2 00 A0 FD | 	call	#popregs_
276a0                 | __system__InstrRev_ret
276a0     2D 00 64 FD | 	ret
276a4                 | 
276a4                 | __system___remove
276a4     06 4A 05 F6 | 	mov	COUNT_, #6
276a8     A8 00 A0 FD | 	call	#pushregs_
276ac     84 E7 05 F1 | 	add	ptr___system__dat__, #388
276b0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
276b4     09 15 02 F6 | 	mov	arg02, arg01
276b8     13 13 02 F6 | 	mov	arg01, local01
276bc     00 16 06 F6 | 	mov	arg03, #0
276c0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
276c4     A4 DF BF FD | 	call	#__system____getvfsforfile
276c8     FD 28 0A F6 | 	mov	local02, result1 wz
276cc     10 00 90 AD |  if_e	jmp	#LR__3470
276d0     20 28 06 F1 | 	add	local02, #32
276d4     14 13 0A FB | 	rdlong	arg01, local02 wz
276d8     20 28 86 F1 | 	sub	local02, #32
276dc     14 00 90 5D |  if_ne	jmp	#LR__3471
276e0                 | LR__3470
276e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
276e4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
276e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
276ec     01 FA 65 F6 | 	neg	result1, #1
276f0     A8 00 90 FD | 	jmp	#LR__3474
276f4                 | LR__3471
276f4     40 28 06 F1 | 	add	local02, #64
276f8     14 2B 02 FB | 	rdlong	local03, local02
276fc     15 2D 02 F6 | 	mov	local04, local03
27700     40 28 86 F1 | 	sub	local02, #64
27704     13 2C 46 F7 | 	zerox	local04, #19
27708     14 2A 46 F0 | 	shr	local03, #20
2770c     02 2A 66 F0 | 	shl	local03, #2
27710     ED 2A 02 F1 | 	add	local03, __methods__
27714     15 2B 02 FB | 	rdlong	local03, local03
27718     13 13 02 F6 | 	mov	arg01, local01
2771c     F2 2E 02 F6 | 	mov	local05, objptr
27720     16 E5 01 F6 | 	mov	objptr, local04
27724     2D 2A 62 FD | 	call	local03
27728     17 E5 01 F6 | 	mov	objptr, local05
2772c     FD 30 02 F6 | 	mov	local06, result1
27730     FF FF 7F FF 
27734     F2 31 0E F2 | 	cmp	local06, ##-14 wz
27738     38 00 90 5D |  if_ne	jmp	#LR__3472
2773c     3C 28 06 F1 | 	add	local02, #60
27740     14 31 02 FB | 	rdlong	local06, local02
27744     18 2B 02 F6 | 	mov	local03, local06
27748     13 30 46 F7 | 	zerox	local06, #19
2774c     14 2A 46 F0 | 	shr	local03, #20
27750     02 2A 66 F0 | 	shl	local03, #2
27754     ED 2A 02 F1 | 	add	local03, __methods__
27758     15 2B 02 FB | 	rdlong	local03, local03
2775c     13 13 02 F6 | 	mov	arg01, local01
27760     F2 2E 02 F6 | 	mov	local05, objptr
27764     18 E5 01 F6 | 	mov	objptr, local06
27768     2D 2A 62 FD | 	call	local03
2776c     17 E5 01 F6 | 	mov	objptr, local05
27770     FD 30 02 F6 | 	mov	local06, result1
27774                 | LR__3472
27774     00 30 0E F2 | 	cmp	local06, #0 wz
27778     1C 00 90 AD |  if_e	jmp	#LR__3473
2777c     18 13 6A F6 | 	neg	arg01, local06 wz
27780     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27784     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27788     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2778c     01 FA 65 56 |  if_ne	neg	result1, #1
27790     00 FA 05 A6 |  if_e	mov	result1, #0
27794     04 00 90 FD | 	jmp	#LR__3474
27798                 | LR__3473
27798     00 FA 05 F6 | 	mov	result1, #0
2779c                 | LR__3474
2779c     A7 F0 03 F6 | 	mov	ptra, fp
277a0     B2 00 A0 FD | 	call	#popregs_
277a4                 | __system___remove_ret
277a4     2D 00 64 FD | 	ret
277a8                 | 
277a8                 | __system___mkdir
277a8     05 4A 05 F6 | 	mov	COUNT_, #5
277ac     A8 00 A0 FD | 	call	#pushregs_
277b0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
277b4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
277b8     09 15 02 F6 | 	mov	arg02, arg01
277bc     13 13 02 F6 | 	mov	arg01, local01
277c0     00 16 06 F6 | 	mov	arg03, #0
277c4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
277c8     A0 DE BF FD | 	call	#__system____getvfsforfile
277cc     FD 28 0A F6 | 	mov	local02, result1 wz
277d0     10 00 90 AD |  if_e	jmp	#LR__3480
277d4     20 28 06 F1 | 	add	local02, #32
277d8     14 15 0A FB | 	rdlong	arg02, local02 wz
277dc     20 28 86 F1 | 	sub	local02, #32
277e0     14 00 90 5D |  if_ne	jmp	#LR__3481
277e4                 | LR__3480
277e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
277e8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
277ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
277f0     01 FA 65 F6 | 	neg	result1, #1
277f4     60 00 90 FD | 	jmp	#LR__3483
277f8                 | LR__3481
277f8     38 28 06 F1 | 	add	local02, #56
277fc     14 2B 02 FB | 	rdlong	local03, local02
27800     15 2D 02 F6 | 	mov	local04, local03
27804     13 2A 46 F7 | 	zerox	local03, #19
27808     14 2C 46 F0 | 	shr	local04, #20
2780c     02 2C 66 F0 | 	shl	local04, #2
27810     ED 2C 02 F1 | 	add	local04, __methods__
27814     16 2D 02 FB | 	rdlong	local04, local04
27818     13 13 02 F6 | 	mov	arg01, local01
2781c     FF 15 06 F6 | 	mov	arg02, #511
27820     F2 2E 02 F6 | 	mov	local05, objptr
27824     15 E5 01 F6 | 	mov	objptr, local03
27828     2D 2C 62 FD | 	call	local04
2782c     17 E5 01 F6 | 	mov	objptr, local05
27830     FD 12 0A F6 | 	mov	arg01, result1 wz
27834     1C 00 90 AD |  if_e	jmp	#LR__3482
27838     09 13 6A F6 | 	neg	arg01, arg01 wz
2783c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27840     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27844     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27848     01 FA 65 56 |  if_ne	neg	result1, #1
2784c     00 FA 05 A6 |  if_e	mov	result1, #0
27850     04 00 90 FD | 	jmp	#LR__3483
27854                 | LR__3482
27854     00 FA 05 F6 | 	mov	result1, #0
27858                 | LR__3483
27858     A7 F0 03 F6 | 	mov	ptra, fp
2785c     B2 00 A0 FD | 	call	#popregs_
27860                 | __system___mkdir_ret
27860     2D 00 64 FD | 	ret
27864                 | 
27864                 | __system___strerror
27864     00 12 56 F2 | 	cmps	arg01, #0 wc
27868     08 00 90 CD |  if_b	jmp	#LR__3490
2786c     1A 12 56 F2 | 	cmps	arg01, #26 wc
27870     04 00 90 CD |  if_b	jmp	#LR__3491
27874                 | LR__3490
27874     19 12 06 F6 | 	mov	arg01, #25
27878                 | LR__3491
27878     02 12 66 F0 | 	shl	arg01, #2
2787c     01 00 00 FF 
27880     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
27884     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27888     09 FB 01 FB | 	rdlong	result1, arg01
2788c     01 00 00 FF 
27890     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
27894                 | __system___strerror_ret
27894     2D 00 64 FD | 	ret
27898                 | 
27898                 | __system___int64_shl
27898     20 16 CE F7 | 	test	arg03, #32 wz
2789c     09 15 02 56 |  if_ne	mov	arg02, arg01
278a0     00 12 06 56 |  if_ne	mov	arg01, #0
278a4     1F 16 CE F7 | 	test	arg03, #31 wz
278a8     18 00 90 AD |  if_e	jmp	#LR__3500
278ac     0B 15 62 F0 | 	shl	arg02, arg03
278b0     09 FB 01 F6 | 	mov	result1, arg01
278b4     0B FD 61 F6 | 	neg	result2, arg03
278b8     FE FA 41 F0 | 	shr	result1, result2
278bc     FD 14 42 F5 | 	or	arg02, result1
278c0     0B 13 62 F0 | 	shl	arg01, arg03
278c4                 | LR__3500
278c4     0A FD 01 F6 | 	mov	result2, arg02
278c8     09 FB 01 F6 | 	mov	result1, arg01
278cc                 | __system___int64_shl_ret
278cc     2D 00 64 FD | 	ret
278d0                 | 
278d0                 | __system___usepins
278d0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
278d4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
278d8     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
278dc     00 13 CA F7 | 	test	arg01, _var01 wz
278e0     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
278e4     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
278e8     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
278ec     01 15 CA A7 |  if_e	test	arg02, _var02 wz
278f0     00 FA 05 56 |  if_ne	mov	result1, #0
278f4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
278f8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
278fc     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
27900     09 03 42 F5 | 	or	_var02, arg01
27904     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
27908     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2790c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
27910     0A 03 42 F5 | 	or	_var02, arg02
27914     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
27918     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2791c     01 FA 65 F6 | 	neg	result1, #1
27920                 | __system___usepins_ret
27920     2D 00 64 FD | 	ret
27924                 | 
27924                 | __system___freepins
27924     14 E6 05 F1 | 	add	ptr___system__dat__, #20
27928     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2792c     09 01 22 F5 | 	andn	_var01, arg01
27930     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
27934     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27938     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2793c     0A 01 22 F5 | 	andn	_var01, arg02
27940     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
27944     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
27948                 | __system___freepins_ret
27948     2D 00 64 FD | 	ret
2794c                 | 
2794c                 | __system___float_fromuns
2794c     09 17 0A F6 | 	mov	arg03, arg01 wz
27950     0B FB 01 A6 |  if_e	mov	result1, arg03
27954     24 00 90 AD |  if_e	jmp	#LR__3510
27958     0B 15 92 F7 | 	encod	arg02, arg03 wc
2795c     01 14 06 C1 |  if_b	add	arg02, #1
27960     01 14 86 F1 | 	sub	arg02, #1
27964     1F 12 06 F6 | 	mov	arg01, #31
27968     0A 13 82 F1 | 	sub	arg01, arg02
2796c     09 17 62 F0 | 	shl	arg03, arg01
27970     02 16 46 F0 | 	shr	arg03, #2
27974     00 12 06 F6 | 	mov	arg01, #0
27978     4C 09 B0 FD | 	call	#__system___float_Pack
2797c                 | LR__3510
2797c                 | __system___float_fromuns_ret
2797c     2D 00 64 FD | 	ret
27980                 | 
27980                 | __system___float_add
27980     0F 4A 05 F6 | 	mov	COUNT_, #15
27984     A8 00 A0 FD | 	call	#pushregs_
27988     09 27 02 F6 | 	mov	local01, arg01
2798c     0A 29 02 F6 | 	mov	local02, arg02
27990     00 2A 06 F6 | 	mov	local03, #0
27994     13 2D 02 F6 | 	mov	local04, local01
27998     16 2F 02 F6 | 	mov	local05, local04
2799c     16 2E 46 F7 | 	zerox	local05, #22
279a0     16 31 02 F6 | 	mov	local06, local04
279a4     01 30 66 F0 | 	shl	local06, #1
279a8     18 30 46 F0 | 	shr	local06, #24
279ac     1F 2C 46 F0 | 	shr	local04, #31
279b0     14 13 02 F6 | 	mov	arg01, local02
279b4     09 FB 01 F6 | 	mov	result1, arg01
279b8     FD 32 02 F6 | 	mov	local07, result1
279bc     19 35 02 F6 | 	mov	local08, local07
279c0     16 34 46 F7 | 	zerox	local08, #22
279c4     19 37 02 F6 | 	mov	local09, local07
279c8     01 36 66 F0 | 	shl	local09, #1
279cc     18 36 46 F0 | 	shr	local09, #24
279d0     1B 39 02 F6 | 	mov	local10, local09
279d4     1F 32 46 F0 | 	shr	local07, #31
279d8     00 3A 06 F6 | 	mov	local11, #0
279dc     00 3C 06 F6 | 	mov	local12, #0
279e0     1C 31 12 F2 | 	cmp	local06, local10 wc
279e4     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
279e8     2C 00 90 1D |  if_a	jmp	#LR__3520
279ec     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
279f0     24 00 90 3D |  if_ae	jmp	#LR__3520
279f4     17 3F 02 F6 | 	mov	local13, local05
279f8     1A 2F 02 F6 | 	mov	local05, local08
279fc     1F 35 02 F6 | 	mov	local08, local13
27a00     18 3F 02 F6 | 	mov	local13, local06
27a04     1C 31 02 F6 | 	mov	local06, local10
27a08     1F 39 02 F6 | 	mov	local10, local13
27a0c     16 3F 02 F6 | 	mov	local13, local04
27a10     19 2D 02 F6 | 	mov	local04, local07
27a14     1F 33 02 F6 | 	mov	local07, local13
27a18                 | LR__3520
27a18     FF 30 0E F2 | 	cmp	local06, #255 wz
27a1c     70 01 90 AD |  if_e	jmp	#LR__3535
27a20     00 30 0E F2 | 	cmp	local06, #0 wz
27a24     AC 01 90 AD |  if_e	jmp	#LR__3537
27a28     17 2E 26 F4 | 	bith	local05, #23
27a2c                 | LR__3521
27a2c     00 38 0E F2 | 	cmp	local10, #0 wz
27a30     F0 01 90 AD |  if_e	jmp	#LR__3541
27a34     17 34 26 F4 | 	bith	local08, #23
27a38                 | LR__3522
27a38     7F 30 86 F1 | 	sub	local06, #127
27a3c     7F 38 86 F1 | 	sub	local10, #127
27a40     18 41 02 F6 | 	mov	local14, local06
27a44     1C 41 82 F1 | 	sub	local14, local10
27a48     97 14 48 FB | 	callpa	#(@LR__3524-@LR__3523)>>2,fcache_load_ptr_
27a4c                 | LR__3523
27a4c     20 40 56 F2 | 	cmps	local14, #32 wc
27a50     20 00 90 CD |  if_b	jmp	#LR__3525
27a54     1A 37 02 F6 | 	mov	local09, local08
27a58     00 3A 0E F2 | 	cmp	local11, #0 wz
27a5c     6F 3A 62 FD | 	wrnz	local11
27a60     1D 37 42 F5 | 	or	local09, local11
27a64     1B 3B 02 F6 | 	mov	local11, local09
27a68     00 34 06 F6 | 	mov	local08, #0
27a6c     20 40 86 F1 | 	sub	local14, #32
27a70     D8 FF 9F FD | 	jmp	#LR__3523
27a74                 | LR__3524
27a74                 | LR__3525
27a74     00 40 0E F2 | 	cmp	local14, #0 wz
27a78     38 00 90 AD |  if_e	jmp	#LR__3526
27a7c     1A 3F 02 F6 | 	mov	local13, local08
27a80     20 38 06 F6 | 	mov	local10, #32
27a84     20 39 82 F1 | 	sub	local10, local14
27a88     1C 3F 62 F0 | 	shl	local13, local10
27a8c     1D 39 02 F6 | 	mov	local10, local11
27a90     20 36 06 F6 | 	mov	local09, #32
27a94     20 37 82 F1 | 	sub	local09, local14
27a98     1B 39 6A F0 | 	shl	local10, local09 wz
27a9c     20 3B 42 F0 | 	shr	local11, local14
27aa0     20 35 42 F0 | 	shr	local08, local14
27aa4     1F 3B 42 F5 | 	or	local11, local13
27aa8     00 42 06 F6 | 	mov	local15, #0
27aac     01 42 06 56 |  if_ne	mov	local15, #1
27ab0     21 3B 42 F5 | 	or	local11, local15
27ab4                 | LR__3526
27ab4     16 43 02 F6 | 	mov	local15, local04
27ab8     19 43 62 F5 | 	xor	local15, local07
27abc     01 42 CE F7 | 	test	local15, #1 wz
27ac0     18 00 90 AD |  if_e	jmp	#LR__3527
27ac4     1A 35 22 F6 | 	not	local08, local08
27ac8     1D 3B 22 F6 | 	not	local11, local11
27acc     01 3A 0E F1 | 	add	local11, #1 wz
27ad0     00 42 06 F6 | 	mov	local15, #0
27ad4     01 42 06 A6 |  if_e	mov	local15, #1
27ad8     21 35 02 F1 | 	add	local08, local15
27adc                 | LR__3527
27adc     1D 3D 12 F1 | 	add	local12, local11 wc
27ae0     1A 2F 22 F1 | 	addx	local05, local08
27ae4     00 2E 56 F2 | 	cmps	local05, #0 wc
27ae8     1C 00 90 3D |  if_ae	jmp	#LR__3528
27aec     01 2C 66 F5 | 	xor	local04, #1
27af0     17 2F 22 F6 | 	not	local05, local05
27af4     1E 3D 22 F6 | 	not	local12, local12
27af8     01 3C 0E F1 | 	add	local12, #1 wz
27afc     00 42 06 F6 | 	mov	local15, #0
27b00     01 42 06 A6 |  if_e	mov	local15, #1
27b04     21 2F 02 F1 | 	add	local05, local15
27b08                 | LR__3528
27b08     00 80 00 FF 
27b0c     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
27b10     28 00 90 CD |  if_b	jmp	#LR__3529
27b14     01 30 06 F1 | 	add	local06, #1
27b18     1E 41 02 F6 | 	mov	local14, local12
27b1c     01 40 06 F5 | 	and	local14, #1
27b20     01 3C 46 F0 | 	shr	local12, #1
27b24     17 43 02 F6 | 	mov	local15, local05
27b28     1F 42 66 F0 | 	shl	local15, #31
27b2c     21 3D 42 F5 | 	or	local12, local15
27b30     20 3D 42 F5 | 	or	local12, local14
27b34     01 2E 46 F0 | 	shr	local05, #1
27b38     3C 00 90 FD | 	jmp	#LR__3534
27b3c                 | LR__3529
27b3c     00 40 00 FF 
27b40     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
27b44     30 00 90 3D |  if_ae	jmp	#LR__3533
27b48     00 2E 0E F2 | 	cmp	local05, #0 wz
27b4c     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
27b50     08 2C 46 A5 |  if_e	or	local04, #8
27b54     01 2C 26 A5 |  if_e	andn	local04, #1
27b58     1C 00 90 AD |  if_e	jmp	#LR__3532
27b5c                 | LR__3530
27b5c     00 40 00 FF 
27b60     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
27b64     10 00 90 3D |  if_ae	jmp	#LR__3531
27b68     1E 3D 12 F1 | 	add	local12, local12 wc
27b6c     17 2F 22 F1 | 	addx	local05, local05
27b70     01 30 86 F1 | 	sub	local06, #1
27b74     E4 FF 9F FD | 	jmp	#LR__3530
27b78                 | LR__3531
27b78                 | LR__3532
27b78                 | LR__3533
27b78                 | LR__3534
27b78     17 13 02 F6 | 	mov	arg01, local05
27b7c     1E 15 02 F6 | 	mov	arg02, local12
27b80     18 17 02 F6 | 	mov	arg03, local06
27b84     16 19 02 F6 | 	mov	arg04, local04
27b88     08 35 B0 FD | 	call	#__system__pack_0668
27b8c     DC 00 90 FD | 	jmp	#LR__3545
27b90                 | LR__3535
27b90     FF 38 0E F2 | 	cmp	local10, #255 wz
27b94     10 00 90 5D |  if_ne	jmp	#LR__3536
27b98     16 33 0A F2 | 	cmp	local07, local04 wz
27b9c     00 F8 3F 5F 
27ba0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
27ba4     C4 00 90 5D |  if_ne	jmp	#LR__3545
27ba8                 | LR__3536
27ba8     00 2E 0E F2 | 	cmp	local05, #0 wz
27bac     00 F8 3F 5F 
27bb0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
27bb4     B4 00 90 5D |  if_ne	jmp	#LR__3545
27bb8     1E 15 02 F6 | 	mov	arg02, local12
27bbc     18 17 02 F6 | 	mov	arg03, local06
27bc0     16 19 02 F6 | 	mov	arg04, local04
27bc4     02 18 46 F5 | 	or	arg04, #2
27bc8     17 13 02 F6 | 	mov	arg01, local05
27bcc     C4 34 B0 FD | 	call	#__system__pack_0668
27bd0     98 00 90 FD | 	jmp	#LR__3545
27bd4                 | LR__3537
27bd4     00 2E 0E F2 | 	cmp	local05, #0 wz
27bd8     28 00 90 AD |  if_e	jmp	#LR__3540
27bdc     01 2E 66 F0 | 	shl	local05, #1
27be0     97 0E 48 FB | 	callpa	#(@LR__3539-@LR__3538)>>2,fcache_load_ptr_
27be4                 | LR__3538
27be4     00 40 00 FF 
27be8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
27bec     18 43 02 C6 |  if_b	mov	local15, local06
27bf0     01 42 86 C1 |  if_b	sub	local15, #1
27bf4     21 31 02 C6 |  if_b	mov	local06, local15
27bf8     01 2E 66 C0 |  if_b	shl	local05, #1
27bfc     E4 FF 9F CD |  if_b	jmp	#LR__3538
27c00                 | LR__3539
27c00     28 FE 9F FD | 	jmp	#LR__3521
27c04                 | LR__3540
27c04     19 2D 02 F5 | 	and	local04, local07
27c08     16 19 02 F6 | 	mov	arg04, local04
27c0c     08 18 46 F5 | 	or	arg04, #8
27c10     00 12 06 F6 | 	mov	arg01, #0
27c14     00 14 06 F6 | 	mov	arg02, #0
27c18     00 16 06 F6 | 	mov	arg03, #0
27c1c     74 34 B0 FD | 	call	#__system__pack_0668
27c20     48 00 90 FD | 	jmp	#LR__3545
27c24                 | LR__3541
27c24     00 34 0E F2 | 	cmp	local08, #0 wz
27c28     28 00 90 AD |  if_e	jmp	#LR__3544
27c2c     01 34 66 F0 | 	shl	local08, #1
27c30     97 0E 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
27c34                 | LR__3542
27c34     00 40 00 FF 
27c38     00 34 16 F2 | 	cmp	local08, ##8388608 wc
27c3c     1C 43 02 C6 |  if_b	mov	local15, local10
27c40     01 42 86 C1 |  if_b	sub	local15, #1
27c44     21 39 02 C6 |  if_b	mov	local10, local15
27c48     01 34 66 C0 |  if_b	shl	local08, #1
27c4c     E4 FF 9F CD |  if_b	jmp	#LR__3542
27c50                 | LR__3543
27c50     E4 FD 9F FD | 	jmp	#LR__3522
27c54                 | LR__3544
27c54     7F 30 86 F1 | 	sub	local06, #127
27c58     17 13 02 F6 | 	mov	arg01, local05
27c5c     1E 15 02 F6 | 	mov	arg02, local12
27c60     18 17 02 F6 | 	mov	arg03, local06
27c64     16 19 02 F6 | 	mov	arg04, local04
27c68     28 34 B0 FD | 	call	#__system__pack_0668
27c6c                 | LR__3545
27c6c     A7 F0 03 F6 | 	mov	ptra, fp
27c70     B2 00 A0 FD | 	call	#popregs_
27c74                 | __system___float_add_ret
27c74     2D 00 64 FD | 	ret
27c78                 | 
27c78                 | __system___float_sqrt
27c78     04 4A 05 F6 | 	mov	COUNT_, #4
27c7c     A8 00 A0 FD | 	call	#pushregs_
27c80     09 27 02 F6 | 	mov	local01, arg01
27c84     09 FB 01 F6 | 	mov	result1, arg01
27c88     FD 28 02 F6 | 	mov	local02, result1
27c8c     14 2B 02 F6 | 	mov	local03, local02
27c90     16 2A 46 F7 | 	zerox	local03, #22
27c94     14 2D 02 F6 | 	mov	local04, local02
27c98     01 2C 66 F0 | 	shl	local04, #1
27c9c     18 2C 4E F0 | 	shr	local04, #24 wz
27ca0     1F 28 46 F0 | 	shr	local02, #31
27ca4     70 00 90 AD |  if_e	jmp	#LR__3551
27ca8     17 2A 26 F4 | 	bith	local03, #23
27cac                 | LR__3550
27cac     00 28 0E F2 | 	cmp	local02, #0 wz
27cb0     00 F8 3F 5F 
27cb4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
27cb8     88 00 90 5D |  if_ne	jmp	#LR__3554
27cbc     FF 2C 0E F2 | 	cmp	local04, #255 wz
27cc0     13 FB 01 A6 |  if_e	mov	result1, local01
27cc4     7C 00 90 AD |  if_e	jmp	#LR__3554
27cc8     7F 2C 86 F1 | 	sub	local04, #127
27ccc     01 2C CE F7 | 	test	local04, #1 wz
27cd0     01 2A 66 50 |  if_ne	shl	local03, #1
27cd4     05 2A 66 F0 | 	shl	local03, #5
27cd8     15 01 38 FD | 	qsqrt	#0, local03
27cdc     01 2C 86 51 |  if_ne	sub	local04, #1
27ce0     16 2D 52 F6 | 	abs	local04, local04 wc
27ce4     01 2C 46 F0 | 	shr	local04, #1
27ce8     16 17 82 F6 | 	negc	arg03, local04
27cec     14 19 02 F6 | 	mov	arg04, local02
27cf0     18 12 62 FD | 	getqx	arg01
27cf4     09 15 02 F6 | 	mov	arg02, arg01
27cf8     19 14 66 F0 | 	shl	arg02, #25
27cfc     07 12 46 F0 | 	shr	arg01, #7
27d00     00 80 00 FF 
27d04     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
27d08     01 16 06 31 |  if_ae	add	arg03, #1
27d0c     01 12 46 30 |  if_ae	shr	arg01, #1
27d10     80 33 B0 FD | 	call	#__system__pack_0668
27d14     2C 00 90 FD | 	jmp	#LR__3554
27d18                 | LR__3551
27d18     00 2A 0E F2 | 	cmp	local03, #0 wz
27d1c     13 FB 01 A6 |  if_e	mov	result1, local01
27d20     20 00 90 AD |  if_e	jmp	#LR__3554
27d24     01 2A 66 F0 | 	shl	local03, #1
27d28     97 0A 48 FB | 	callpa	#(@LR__3553-@LR__3552)>>2,fcache_load_ptr_
27d2c                 | LR__3552
27d2c     00 40 00 FF 
27d30     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
27d34     01 2C 86 C1 |  if_b	sub	local04, #1
27d38     01 2A 66 C0 |  if_b	shl	local03, #1
27d3c     EC FF 9F CD |  if_b	jmp	#LR__3552
27d40                 | LR__3553
27d40     68 FF 9F FD | 	jmp	#LR__3550
27d44                 | LR__3554
27d44     A7 F0 03 F6 | 	mov	ptra, fp
27d48     B2 00 A0 FD | 	call	#popregs_
27d4c                 | __system___float_sqrt_ret
27d4c     2D 00 64 FD | 	ret
27d50                 | 
27d50                 | __system___float_mul
27d50     0B 4A 05 F6 | 	mov	COUNT_, #11
27d54     A8 00 A0 FD | 	call	#pushregs_
27d58     09 27 02 F6 | 	mov	local01, arg01
27d5c     0A 29 02 F6 | 	mov	local02, arg02
27d60     13 2B 02 F6 | 	mov	local03, local01
27d64     15 2D 02 F6 | 	mov	local04, local03
27d68     16 2C 46 F7 | 	zerox	local04, #22
27d6c     15 2F 02 F6 | 	mov	local05, local03
27d70     01 2E 66 F0 | 	shl	local05, #1
27d74     18 2E 46 F0 | 	shr	local05, #24
27d78     1F 2A 46 F0 | 	shr	local03, #31
27d7c     14 FB 01 F6 | 	mov	result1, local02
27d80     FD 30 02 F6 | 	mov	local06, result1
27d84     18 33 02 F6 | 	mov	local07, local06
27d88     16 32 46 F7 | 	zerox	local07, #22
27d8c     18 35 02 F6 | 	mov	local08, local06
27d90     01 34 66 F0 | 	shl	local08, #1
27d94     18 34 46 F0 | 	shr	local08, #24
27d98     1F 30 46 F0 | 	shr	local06, #31
27d9c     18 2B 62 F5 | 	xor	local03, local06
27da0     FF 2E 0E F2 | 	cmp	local05, #255 wz
27da4     90 00 90 AD |  if_e	jmp	#LR__3563
27da8     FF 34 0E F2 | 	cmp	local08, #255 wz
27dac     D8 00 90 AD |  if_e	jmp	#LR__3565
27db0     00 2E 0E F2 | 	cmp	local05, #0 wz
27db4     0C 01 90 AD |  if_e	jmp	#LR__3566
27db8     17 2C 26 F4 | 	bith	local04, #23
27dbc                 | LR__3560
27dbc     00 34 0E F2 | 	cmp	local08, #0 wz
27dc0     44 01 90 AD |  if_e	jmp	#LR__3570
27dc4     17 32 26 F4 | 	bith	local07, #23
27dc8                 | LR__3561
27dc8     16 29 02 F6 | 	mov	local02, local04
27dcc     04 28 66 F0 | 	shl	local02, #4
27dd0     19 31 02 F6 | 	mov	local06, local07
27dd4     05 30 66 F0 | 	shl	local06, #5
27dd8     18 29 02 FD | 	qmul	local02, local06
27ddc     1A 2F 02 F1 | 	add	local05, local08
27de0     FE 2E 86 F1 | 	sub	local05, #254
27de4     17 37 02 F6 | 	mov	local09, local05
27de8     04 2C 66 F0 | 	shl	local04, #4
27dec     05 32 66 F0 | 	shl	local07, #5
27df0     18 38 62 FD | 	getqx	local10
27df4     19 2D 02 FD | 	qmul	local04, local07
27df8     19 3A 62 FD | 	getqy	local11
27dfc     00 80 00 FF 
27e00     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
27e04     18 00 90 CD |  if_b	jmp	#LR__3562
27e08     01 36 06 F1 | 	add	local09, #1
27e0c     01 38 46 F0 | 	shr	local10, #1
27e10     1D 35 02 F6 | 	mov	local08, local11
27e14     1F 34 66 F0 | 	shl	local08, #31
27e18     1A 39 42 F5 | 	or	local10, local08
27e1c     01 3A 46 F0 | 	shr	local11, #1
27e20                 | LR__3562
27e20     1D 13 02 F6 | 	mov	arg01, local11
27e24     1C 15 02 F6 | 	mov	arg02, local10
27e28     1B 17 02 F6 | 	mov	arg03, local09
27e2c     15 19 02 F6 | 	mov	arg04, local03
27e30     60 32 B0 FD | 	call	#__system__pack_0668
27e34     10 01 90 FD | 	jmp	#LR__3574
27e38                 | LR__3563
27e38     00 2C 0E F2 | 	cmp	local04, #0 wz
27e3c     13 FB 01 56 |  if_ne	mov	result1, local01
27e40     04 01 90 5D |  if_ne	jmp	#LR__3574
27e44     FF 34 56 F2 | 	cmps	local08, #255 wc
27e48     00 34 0E C2 |  if_b	cmp	local08, #0 wz
27e4c     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
27e50     18 00 90 4D |  if_c_and_nz	jmp	#LR__3564
27e54     00 F8 3F CF 
27e58     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
27e5c     E8 00 90 CD |  if_b	jmp	#LR__3574
27e60     00 32 0E F2 | 	cmp	local07, #0 wz
27e64     14 FB 01 56 |  if_ne	mov	result1, local02
27e68     DC 00 90 5D |  if_ne	jmp	#LR__3574
27e6c                 | LR__3564
27e6c     02 2A 46 F5 | 	or	local03, #2
27e70     00 12 06 F6 | 	mov	arg01, #0
27e74     00 14 06 F6 | 	mov	arg02, #0
27e78     17 17 02 F6 | 	mov	arg03, local05
27e7c     15 19 02 F6 | 	mov	arg04, local03
27e80     10 32 B0 FD | 	call	#__system__pack_0668
27e84     C0 00 90 FD | 	jmp	#LR__3574
27e88                 | LR__3565
27e88     00 2E 0E F2 | 	cmp	local05, #0 wz
27e8c     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
27e90     00 F8 3F AF 
27e94     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
27e98     AC 00 90 AD |  if_e	jmp	#LR__3574
27e9c     00 32 0E F2 | 	cmp	local07, #0 wz
27ea0     14 FB 01 56 |  if_ne	mov	result1, local02
27ea4     A0 00 90 5D |  if_ne	jmp	#LR__3574
27ea8     1A 17 02 F6 | 	mov	arg03, local08
27eac     15 19 02 F6 | 	mov	arg04, local03
27eb0     02 18 46 F5 | 	or	arg04, #2
27eb4     00 12 06 F6 | 	mov	arg01, #0
27eb8     00 14 06 F6 | 	mov	arg02, #0
27ebc     D4 31 B0 FD | 	call	#__system__pack_0668
27ec0     84 00 90 FD | 	jmp	#LR__3574
27ec4                 | LR__3566
27ec4     00 2C 0E F2 | 	cmp	local04, #0 wz
27ec8     20 00 90 AD |  if_e	jmp	#LR__3569
27ecc     01 2C 66 F0 | 	shl	local04, #1
27ed0     97 0A 48 FB | 	callpa	#(@LR__3568-@LR__3567)>>2,fcache_load_ptr_
27ed4                 | LR__3567
27ed4     00 40 00 FF 
27ed8     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
27edc     01 2E 86 C1 |  if_b	sub	local05, #1
27ee0     01 2C 66 C0 |  if_b	shl	local04, #1
27ee4     EC FF 9F CD |  if_b	jmp	#LR__3567
27ee8                 | LR__3568
27ee8     D0 FE 9F FD | 	jmp	#LR__3560
27eec                 | LR__3569
27eec     08 2A 46 F5 | 	or	local03, #8
27ef0     00 12 06 F6 | 	mov	arg01, #0
27ef4     00 14 06 F6 | 	mov	arg02, #0
27ef8     00 16 06 F6 | 	mov	arg03, #0
27efc     15 19 02 F6 | 	mov	arg04, local03
27f00     90 31 B0 FD | 	call	#__system__pack_0668
27f04     40 00 90 FD | 	jmp	#LR__3574
27f08                 | LR__3570
27f08     00 32 0E F2 | 	cmp	local07, #0 wz
27f0c     20 00 90 AD |  if_e	jmp	#LR__3573
27f10     01 32 66 F0 | 	shl	local07, #1
27f14     97 0A 48 FB | 	callpa	#(@LR__3572-@LR__3571)>>2,fcache_load_ptr_
27f18                 | LR__3571
27f18     00 40 00 FF 
27f1c     00 32 16 F2 | 	cmp	local07, ##8388608 wc
27f20     01 34 86 C1 |  if_b	sub	local08, #1
27f24     01 32 66 C0 |  if_b	shl	local07, #1
27f28     EC FF 9F CD |  if_b	jmp	#LR__3571
27f2c                 | LR__3572
27f2c     98 FE 9F FD | 	jmp	#LR__3561
27f30                 | LR__3573
27f30     08 2A 46 F5 | 	or	local03, #8
27f34     00 12 06 F6 | 	mov	arg01, #0
27f38     00 14 06 F6 | 	mov	arg02, #0
27f3c     00 16 06 F6 | 	mov	arg03, #0
27f40     15 19 02 F6 | 	mov	arg04, local03
27f44     4C 31 B0 FD | 	call	#__system__pack_0668
27f48                 | LR__3574
27f48     A7 F0 03 F6 | 	mov	ptra, fp
27f4c     B2 00 A0 FD | 	call	#popregs_
27f50                 | __system___float_mul_ret
27f50     2D 00 64 FD | 	ret
27f54                 | 
27f54                 | __system___float_div
27f54     0E 4A 05 F6 | 	mov	COUNT_, #14
27f58     A8 00 A0 FD | 	call	#pushregs_
27f5c     09 2B 02 F6 | 	mov	local03, arg01
27f60     0A 2D 02 F6 | 	mov	local04, arg02
27f64     15 2F 02 F6 | 	mov	local05, local03
27f68     17 31 02 F6 | 	mov	local06, local05
27f6c     16 30 46 F7 | 	zerox	local06, #22
27f70     17 33 02 F6 | 	mov	local07, local05
27f74     01 32 66 F0 | 	shl	local07, #1
27f78     18 32 46 F0 | 	shr	local07, #24
27f7c     1F 2E 46 F0 | 	shr	local05, #31
27f80     16 FB 01 F6 | 	mov	result1, local04
27f84     FD 34 02 F6 | 	mov	local08, result1
27f88     1A 37 02 F6 | 	mov	local09, local08
27f8c     16 36 46 F7 | 	zerox	local09, #22
27f90     1A 39 02 F6 | 	mov	local10, local08
27f94     01 38 66 F0 | 	shl	local10, #1
27f98     18 38 46 F0 | 	shr	local10, #24
27f9c     1F 34 46 F0 | 	shr	local08, #31
27fa0     1A 2F 62 F5 | 	xor	local05, local08
27fa4     FF 32 0E F2 | 	cmp	local07, #255 wz
27fa8     D4 00 90 AD |  if_e	jmp	#LR__3585
27fac     FF 38 0E F2 | 	cmp	local10, #255 wz
27fb0     04 01 90 AD |  if_e	jmp	#LR__3586
27fb4     00 32 0E F2 | 	cmp	local07, #0 wz
27fb8     24 01 90 AD |  if_e	jmp	#LR__3587
27fbc     17 30 26 F4 | 	bith	local06, #23
27fc0                 | LR__3580
27fc0     00 38 0E F2 | 	cmp	local10, #0 wz
27fc4     70 01 90 AD |  if_e	jmp	#LR__3591
27fc8     17 36 26 F4 | 	bith	local09, #23
27fcc                 | LR__3581
27fcc     1C 33 82 F1 | 	sub	local07, local10
27fd0     19 3B 02 F6 | 	mov	local11, local07
27fd4     18 13 02 F6 | 	mov	arg01, local06
27fd8     02 12 46 F0 | 	shr	arg01, #2
27fdc     1E 30 66 F0 | 	shl	local06, #30
27fe0     18 15 02 F6 | 	mov	arg02, local06
27fe4     1B 17 02 F6 | 	mov	arg03, local09
27fe8     28 12 62 FD | 	setq	arg01
27fec     0B 15 12 FD | 	qdiv	arg02, arg03
27ff0     00 3C 06 F6 | 	mov	local12, #0
27ff4     18 26 62 FD | 	getqx	local01
27ff8     19 FC 61 FD | 	getqy	result2
27ffc     FE 28 02 F6 | 	mov	local02, result2
28000     13 3F 02 F6 | 	mov	local13, local01
28004     00 28 4E F2 | 	cmps	local02, #0 wz
28008     1F 41 02 F6 | 	mov	local14, local13
2800c     19 40 66 F0 | 	shl	local14, #25
28010     01 3C 06 56 |  if_ne	mov	local12, #1
28014     1E 41 42 F5 | 	or	local14, local12
28018     07 3E 46 F0 | 	shr	local13, #7
2801c     00 80 00 FF 
28020     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
28024     1C 00 90 CD |  if_b	jmp	#LR__3582
28028     01 3A 06 F1 | 	add	local11, #1
2802c     01 40 46 F0 | 	shr	local14, #1
28030     1F 3D 02 F6 | 	mov	local12, local13
28034     1F 3C 66 F0 | 	shl	local12, #31
28038     1E 41 42 F5 | 	or	local14, local12
2803c     01 3E 46 F0 | 	shr	local13, #1
28040     24 00 90 FD | 	jmp	#LR__3584
28044                 | LR__3582
28044     00 40 00 FF 
28048     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2804c     18 00 90 3D |  if_ae	jmp	#LR__3583
28050     01 3A 86 F1 | 	sub	local11, #1
28054     01 3E 66 F0 | 	shl	local13, #1
28058     20 3D 02 F6 | 	mov	local12, local14
2805c     1F 3C 46 F0 | 	shr	local12, #31
28060     1E 3F 42 F5 | 	or	local13, local12
28064     01 40 66 F0 | 	shl	local14, #1
28068                 | LR__3583
28068                 | LR__3584
28068     1F 13 02 F6 | 	mov	arg01, local13
2806c     20 15 02 F6 | 	mov	arg02, local14
28070     1D 17 02 F6 | 	mov	arg03, local11
28074     17 19 02 F6 | 	mov	arg04, local05
28078     18 30 B0 FD | 	call	#__system__pack_0668
2807c     F8 00 90 FD | 	jmp	#LR__3595
28080                 | LR__3585
28080     00 30 0E F2 | 	cmp	local06, #0 wz
28084     15 FB 01 56 |  if_ne	mov	result1, local03
28088     EC 00 90 5D |  if_ne	jmp	#LR__3595
2808c     FF 38 0E F2 | 	cmp	local10, #255 wz
28090     00 F8 3F AF 
28094     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28098     DC 00 90 AD |  if_e	jmp	#LR__3595
2809c     02 2E 46 F5 | 	or	local05, #2
280a0     00 12 06 F6 | 	mov	arg01, #0
280a4     00 14 06 F6 | 	mov	arg02, #0
280a8     19 17 02 F6 | 	mov	arg03, local07
280ac     17 19 02 F6 | 	mov	arg04, local05
280b0     E0 2F B0 FD | 	call	#__system__pack_0668
280b4     C0 00 90 FD | 	jmp	#LR__3595
280b8                 | LR__3586
280b8     00 36 0E F2 | 	cmp	local09, #0 wz
280bc     16 FB 01 56 |  if_ne	mov	result1, local04
280c0     B4 00 90 5D |  if_ne	jmp	#LR__3595
280c4     17 19 02 F6 | 	mov	arg04, local05
280c8     08 18 46 F5 | 	or	arg04, #8
280cc     00 12 06 F6 | 	mov	arg01, #0
280d0     00 14 06 F6 | 	mov	arg02, #0
280d4     00 16 06 F6 | 	mov	arg03, #0
280d8     B8 2F B0 FD | 	call	#__system__pack_0668
280dc     98 00 90 FD | 	jmp	#LR__3595
280e0                 | LR__3587
280e0     00 30 0E F2 | 	cmp	local06, #0 wz
280e4     20 00 90 AD |  if_e	jmp	#LR__3590
280e8     01 30 66 F0 | 	shl	local06, #1
280ec     97 0A 48 FB | 	callpa	#(@LR__3589-@LR__3588)>>2,fcache_load_ptr_
280f0                 | LR__3588
280f0     00 40 00 FF 
280f4     00 30 16 F2 | 	cmp	local06, ##8388608 wc
280f8     01 32 86 C1 |  if_b	sub	local07, #1
280fc     01 30 66 C0 |  if_b	shl	local06, #1
28100     EC FF 9F CD |  if_b	jmp	#LR__3588
28104                 | LR__3589
28104     B8 FE 9F FD | 	jmp	#LR__3580
28108                 | LR__3590
28108     00 38 0E F2 | 	cmp	local10, #0 wz
2810c     00 36 0E A2 |  if_e	cmp	local09, #0 wz
28110     00 F8 3F AF 
28114     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28118     5C 00 90 AD |  if_e	jmp	#LR__3595
2811c     17 19 02 F6 | 	mov	arg04, local05
28120     08 18 46 F5 | 	or	arg04, #8
28124     00 12 06 F6 | 	mov	arg01, #0
28128     00 14 06 F6 | 	mov	arg02, #0
2812c     00 16 06 F6 | 	mov	arg03, #0
28130     60 2F B0 FD | 	call	#__system__pack_0668
28134     40 00 90 FD | 	jmp	#LR__3595
28138                 | LR__3591
28138     00 36 0E F2 | 	cmp	local09, #0 wz
2813c     20 00 90 AD |  if_e	jmp	#LR__3594
28140     01 36 66 F0 | 	shl	local09, #1
28144     97 0A 48 FB | 	callpa	#(@LR__3593-@LR__3592)>>2,fcache_load_ptr_
28148                 | LR__3592
28148     00 40 00 FF 
2814c     00 36 16 F2 | 	cmp	local09, ##8388608 wc
28150     01 38 86 C1 |  if_b	sub	local10, #1
28154     01 36 66 C0 |  if_b	shl	local09, #1
28158     EC FF 9F CD |  if_b	jmp	#LR__3592
2815c                 | LR__3593
2815c     6C FE 9F FD | 	jmp	#LR__3581
28160                 | LR__3594
28160     02 2E 46 F5 | 	or	local05, #2
28164     00 12 06 F6 | 	mov	arg01, #0
28168     00 14 06 F6 | 	mov	arg02, #0
2816c     00 16 06 F6 | 	mov	arg03, #0
28170     17 19 02 F6 | 	mov	arg04, local05
28174     1C 2F B0 FD | 	call	#__system__pack_0668
28178                 | LR__3595
28178     A7 F0 03 F6 | 	mov	ptra, fp
2817c     B2 00 A0 FD | 	call	#popregs_
28180                 | __system___float_div_ret
28180     2D 00 64 FD | 	ret
28184                 | 
28184                 | __system___float_cmp
28184     00 C0 3F FF 
28188     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2818c     00 C0 3F CF 
28190     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
28194     0B FB 01 36 |  if_ae	mov	result1, arg03
28198     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2819c     00 C0 7F FF 
281a0     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
281a4     00 C0 7F CF 
281a8     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
281ac     0B FB 01 36 |  if_ae	mov	result1, arg03
281b0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
281b4     00 12 56 F2 | 	cmps	arg01, #0 wc
281b8     2C 00 90 3D |  if_ae	jmp	#LR__3600
281bc     00 14 56 F2 | 	cmps	arg02, #0 wc
281c0     0A FB 01 C6 |  if_b	mov	result1, arg02
281c4     09 FB 81 C1 |  if_b	sub	result1, arg01
281c8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
281cc     00 14 0E F2 | 	cmp	arg02, #0 wz
281d0     00 00 40 AF 
281d4     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
281d8     00 FA 05 A6 |  if_e	mov	result1, #0
281dc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
281e0     01 FA 65 F6 | 	neg	result1, #1
281e4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
281e8                 | LR__3600
281e8     00 14 56 F2 | 	cmps	arg02, #0 wc
281ec     1C 00 90 3D |  if_ae	jmp	#LR__3601
281f0     00 12 0E F2 | 	cmp	arg01, #0 wz
281f4     00 00 40 AF 
281f8     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
281fc     00 FA 05 A6 |  if_e	mov	result1, #0
28200     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
28204     01 FA 05 F6 | 	mov	result1, #1
28208     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2820c                 | LR__3601
2820c     0A 13 82 F1 | 	sub	arg01, arg02
28210     09 FB 01 F6 | 	mov	result1, arg01
28214                 | __system___float_cmp_ret
28214     2D 00 64 FD | 	ret
28218                 | 
28218                 | __system___float_tointeger
28218     02 4A 05 F6 | 	mov	COUNT_, #2
2821c     A8 00 A0 FD | 	call	#pushregs_
28220     50 00 B0 FD | 	call	#__system___float_Unpack
28224     FF FF 7F FF 
28228     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2822c     34 00 90 CD |  if_b	jmp	#LR__3610
28230     1F FC 55 F2 | 	cmps	result2, #31 wc
28234     2C 00 90 3D |  if_ae	jmp	#LR__3610
28238     02 FE 65 F0 | 	shl	result3, #2
2823c     1E 26 06 F6 | 	mov	local01, #30
28240     FE 26 82 F1 | 	sub	local01, result2
28244     13 FF 41 F0 | 	shr	result3, local01
28248     FF 28 02 F6 | 	mov	local02, result3
2824c     0A 29 02 F1 | 	add	local02, arg02
28250     01 28 46 F0 | 	shr	local02, #1
28254     00 FA 0D F2 | 	cmp	result1, #0 wz
28258     14 29 62 56 |  if_ne	neg	local02, local02
2825c     14 FB 01 F6 | 	mov	result1, local02
28260     04 00 90 FD | 	jmp	#LR__3611
28264                 | LR__3610
28264     00 FA 05 F6 | 	mov	result1, #0
28268                 | LR__3611
28268     A7 F0 03 F6 | 	mov	ptra, fp
2826c     B2 00 A0 FD | 	call	#popregs_
28270                 | __system___float_tointeger_ret
28270     2D 00 64 FD | 	ret
28274                 | 
28274                 | __system___float_Unpack
28274     09 01 02 F6 | 	mov	_var01, arg01
28278     1F 00 46 F0 | 	shr	_var01, #31
2827c     09 03 02 F6 | 	mov	_var02, arg01
28280     01 02 66 F0 | 	shl	_var02, #1
28284     18 02 4E F0 | 	shr	_var02, #24 wz
28288     17 13 06 F4 | 	bitl	arg01, #279
2828c     06 12 66 50 |  if_ne	shl	arg01, #6
28290     1D 12 26 54 |  if_ne	bith	arg01, #29
28294     1C 00 90 5D |  if_ne	jmp	#LR__3620
28298     09 05 92 F7 | 	encod	_var03, arg01 wc
2829c     01 04 06 C1 |  if_b	add	_var03, #1
282a0     17 04 86 F1 | 	sub	_var03, #23
282a4     02 03 02 F6 | 	mov	_var02, _var03
282a8     07 FC 05 F6 | 	mov	result2, #7
282ac     02 FD 81 F1 | 	sub	result2, _var03
282b0     FE 12 62 F0 | 	shl	arg01, result2
282b4                 | LR__3620
282b4     7F 02 86 F1 | 	sub	_var02, #127
282b8     09 FF 01 F6 | 	mov	result3, arg01
282bc     00 FB 01 F6 | 	mov	result1, _var01
282c0     01 FD 01 F6 | 	mov	result2, _var02
282c4                 | __system___float_Unpack_ret
282c4     2D 00 64 FD | 	ret
282c8                 | 
282c8                 | __system___float_Pack
282c8     00 00 06 F6 | 	mov	_var01, #0
282cc     00 16 0E F2 | 	cmp	arg03, #0 wz
282d0     8C 00 90 AD |  if_e	jmp	#LR__3631
282d4     0B 03 92 F7 | 	encod	_var02, arg03 wc
282d8     01 02 06 C1 |  if_b	add	_var02, #1
282dc     21 00 06 F6 | 	mov	_var01, #33
282e0     01 01 82 F1 | 	sub	_var01, _var02
282e4     00 17 62 F0 | 	shl	arg03, _var01
282e8     03 02 06 F6 | 	mov	_var02, #3
282ec     00 03 82 F1 | 	sub	_var02, _var01
282f0     01 15 02 F1 | 	add	arg02, _var02
282f4     0A 05 02 F6 | 	mov	_var03, arg02
282f8     00 17 06 F1 | 	add	arg03, #256
282fc     0B 03 02 F6 | 	mov	_var02, arg03
28300     FF 02 2E F5 | 	andn	_var02, #255 wz
28304     01 04 06 A1 |  if_e	add	_var03, #1
28308     7F 04 06 F1 | 	add	_var03, #127
2830c     FF FF 7F FF 
28310     E9 05 46 F3 | 	fges	_var03, ##-23
28314     FF 04 66 F3 | 	fles	_var03, #255
28318     01 04 56 F2 | 	cmps	_var03, #1 wc
2831c     1C 00 90 3D |  if_ae	jmp	#LR__3630
28320     01 16 46 F0 | 	shr	arg03, #1
28324     1F 02 C6 F9 | 	decod	_var02, #31
28328     0B 03 02 F1 | 	add	_var02, arg03
2832c     02 05 62 F6 | 	neg	_var03, _var03
28330     02 03 42 F0 | 	shr	_var02, _var03
28334     01 17 02 F6 | 	mov	arg03, _var02
28338     00 04 06 F6 | 	mov	_var03, #0
2833c                 | LR__3630
2833c     09 FB 01 F6 | 	mov	result1, arg01
28340     1F FA 65 F0 | 	shl	result1, #31
28344     02 03 02 F6 | 	mov	_var02, _var03
28348     17 02 66 F0 | 	shl	_var02, #23
2834c     01 FB 41 F5 | 	or	result1, _var02
28350     0B 07 02 F6 | 	mov	_var04, arg03
28354     09 06 46 F0 | 	shr	_var04, #9
28358     03 FB 41 F5 | 	or	result1, _var04
2835c     04 00 90 FD | 	jmp	#__system___float_Pack_ret
28360                 | LR__3631
28360     00 FB 01 F6 | 	mov	result1, _var01
28364                 | __system___float_Pack_ret
28364     2D 00 64 FD | 	ret
28368                 | 
28368                 | __system___basic_print_float
28368     05 4A 05 F6 | 	mov	COUNT_, #5
2836c     A8 00 A0 FD | 	call	#pushregs_
28370     09 27 02 F6 | 	mov	local01, arg01
28374     0A 29 02 F6 | 	mov	local02, arg02
28378     0B 2B 0A F6 | 	mov	local03, arg03 wz
2837c     0C 2D 02 F6 | 	mov	local04, arg04
28380     14 00 90 5D |  if_ne	jmp	#LR__3640
28384     23 2C 0E F2 | 	cmp	local04, #35 wz
28388     80 02 10 AF 
2838c     00 2E 06 A6 |  if_e	mov	local05, ##537198592
28390     1D 2E C6 59 |  if_ne	decod	local05, #29
28394     17 2B 02 F6 | 	mov	local03, local05
28398                 | LR__3640
28398     13 13 02 F6 | 	mov	arg01, local01
2839c     28 28 B0 FD | 	call	#__system___gettxfunc
283a0     FD 2E 0A F6 | 	mov	local05, result1 wz
283a4     00 FA 05 A6 |  if_e	mov	result1, #0
283a8     17 13 02 56 |  if_ne	mov	arg01, local05
283ac     15 15 02 56 |  if_ne	mov	arg02, local03
283b0     14 17 02 56 |  if_ne	mov	arg03, local02
283b4     16 19 02 56 |  if_ne	mov	arg04, local04
283b8     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
283bc     A7 F0 03 F6 | 	mov	ptra, fp
283c0     B2 00 A0 FD | 	call	#popregs_
283c4                 | __system___basic_print_float_ret
283c4     2D 00 64 FD | 	ret
283c8                 | 
283c8                 | __system____builtin_atoi
283c8     07 4A 05 F6 | 	mov	COUNT_, #7
283cc     A8 00 A0 FD | 	call	#pushregs_
283d0                 | __system____builtin_atoi_enter
283d0     09 27 02 F6 | 	mov	local01, arg01
283d4     0A 29 02 F6 | 	mov	local02, arg02
283d8     00 2A 06 F6 | 	mov	local03, #0
283dc     00 2C 06 F6 | 	mov	local04, #0
283e0     00 2E 06 F6 | 	mov	local05, #0
283e4     97 1C 48 FB | 	callpa	#(@LR__3652-@LR__3650)>>2,fcache_load_ptr_
283e8                 | LR__3650
283e8     13 31 C2 FA | 	rdbyte	local06, local01
283ec     20 30 0E F2 | 	cmp	local06, #32 wz
283f0     01 26 06 A1 |  if_e	add	local01, #1
283f4     F0 FF 9F AD |  if_e	jmp	#LR__3650
283f8     13 33 C2 FA | 	rdbyte	local07, local01
283fc                 | LR__3651
283fc     2D 32 0E F2 | 	cmp	local07, #45 wz
28400     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
28404     18 00 90 5D |  if_ne	jmp	#LR__3653
28408     01 26 06 F1 | 	add	local01, #1
2840c     2D 32 0E F2 | 	cmp	local07, #45 wz
28410     01 30 06 A6 |  if_e	mov	local06, #1
28414     18 2F C2 A2 |  if_e	subr	local05, local06
28418     13 33 C2 FA | 	rdbyte	local07, local01
2841c     DC FF 9F FD | 	jmp	#LR__3651
28420                 | LR__3652
28420                 | LR__3653
28420     00 28 0E F2 | 	cmp	local02, #0 wz
28424     1C 00 90 5D |  if_ne	jmp	#LR__3655
28428     24 32 0E F2 | 	cmp	local07, #36 wz
2842c     10 28 06 A6 |  if_e	mov	local02, #16
28430     01 26 06 A1 |  if_e	add	local01, #1
28434     0C 00 90 AD |  if_e	jmp	#LR__3654
28438     25 32 0E F2 | 	cmp	local07, #37 wz
2843c     02 28 06 A6 |  if_e	mov	local02, #2
28440     01 26 06 A1 |  if_e	add	local01, #1
28444                 | LR__3654
28444                 | LR__3655
28444     97 48 48 FB | 	callpa	#(@LR__3663-@LR__3656)>>2,fcache_load_ptr_
28448                 | LR__3656
28448                 | LR__3657
28448     13 33 C2 FA | 	rdbyte	local07, local01
2844c     5F 32 0E F2 | 	cmp	local07, #95 wz
28450     01 26 06 F1 | 	add	local01, #1
28454     F0 FF 9F AD |  if_e	jmp	#LR__3657
28458     30 32 0E F2 | 	cmp	local07, #48 wz
2845c     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
28460     00 2C 06 A6 |  if_e	mov	local04, #0
28464     60 00 90 AD |  if_e	jmp	#LR__3662
28468     31 32 56 F2 | 	cmps	local07, #49 wc
2846c     18 00 90 CD |  if_b	jmp	#LR__3658
28470     3A 32 56 F2 | 	cmps	local07, #58 wc
28474     19 2D 02 C6 |  if_b	mov	local04, local07
28478     30 2C 86 C1 |  if_b	sub	local04, #48
2847c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
28480     0A 28 06 86 |  if_c_and_z	mov	local02, #10
28484     40 00 90 CD |  if_b	jmp	#LR__3661
28488                 | LR__3658
28488     0B 28 56 F2 | 	cmps	local02, #11 wc
2848c     61 32 56 32 |  if_ae	cmps	local07, #97 wc
28490     14 00 90 CD |  if_b	jmp	#LR__3659
28494     67 32 56 F2 | 	cmps	local07, #103 wc
28498     61 32 86 C1 |  if_b	sub	local07, #97
2849c     0A 2C 06 C6 |  if_b	mov	local04, #10
284a0     19 2D 02 C1 |  if_b	add	local04, local07
284a4     20 00 90 CD |  if_b	jmp	#LR__3660
284a8                 | LR__3659
284a8     0B 28 56 F2 | 	cmps	local02, #11 wc
284ac     41 32 56 32 |  if_ae	cmps	local07, #65 wc
284b0     24 00 90 CD |  if_b	jmp	#LR__3664
284b4     47 32 56 F2 | 	cmps	local07, #71 wc
284b8     41 32 86 C1 |  if_b	sub	local07, #65
284bc     0A 2C 06 C6 |  if_b	mov	local04, #10
284c0     19 2D 02 C1 |  if_b	add	local04, local07
284c4     10 00 90 3D |  if_ae	jmp	#LR__3664
284c8                 | LR__3660
284c8                 | LR__3661
284c8                 | LR__3662
284c8     15 29 02 FD | 	qmul	local02, local03
284cc     18 2A 62 FD | 	getqx	local03
284d0     16 2B 02 F1 | 	add	local03, local04
284d4     70 FF 9F FD | 	jmp	#LR__3656
284d8                 | LR__3663
284d8                 | LR__3664
284d8     00 28 0E F2 | 	cmp	local02, #0 wz
284dc     64 00 90 5D |  if_ne	jmp	#LR__3670
284e0     78 32 0E F2 | 	cmp	local07, #120 wz
284e4     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
284e8     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
284ec     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
284f0     14 00 90 5D |  if_ne	jmp	#LR__3665
284f4     13 13 02 F6 | 	mov	arg01, local01
284f8     10 14 06 F6 | 	mov	arg02, #16
284fc     C8 FE BF FD | 	call	#__system____builtin_atoi
28500     FD 2A 02 F6 | 	mov	local03, result1
28504     3C 00 90 FD | 	jmp	#LR__3669
28508                 | LR__3665
28508     62 32 0E F2 | 	cmp	local07, #98 wz
2850c     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
28510     14 00 90 5D |  if_ne	jmp	#LR__3666
28514     13 13 02 F6 | 	mov	arg01, local01
28518     02 14 06 F6 | 	mov	arg02, #2
2851c     A8 FE BF FD | 	call	#__system____builtin_atoi
28520     FD 2A 02 F6 | 	mov	local03, result1
28524     1C 00 90 FD | 	jmp	#LR__3668
28528                 | LR__3666
28528     6F 32 0E F2 | 	cmp	local07, #111 wz
2852c     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
28530     10 00 90 5D |  if_ne	jmp	#LR__3667
28534     13 13 02 F6 | 	mov	arg01, local01
28538     08 14 06 F6 | 	mov	arg02, #8
2853c     88 FE BF FD | 	call	#__system____builtin_atoi
28540     FD 2A 02 F6 | 	mov	local03, result1
28544                 | LR__3667
28544                 | LR__3668
28544                 | LR__3669
28544                 | LR__3670
28544     00 2E 0E F2 | 	cmp	local05, #0 wz
28548     15 2B 62 56 |  if_ne	neg	local03, local03
2854c     15 FB 01 F6 | 	mov	result1, local03
28550     A7 F0 03 F6 | 	mov	ptra, fp
28554     B2 00 A0 FD | 	call	#popregs_
28558                 | __system____builtin_atoi_ret
28558     2D 00 64 FD | 	ret
2855c                 | 
2855c                 | __system____builtin_atof
2855c     07 4A 05 F6 | 	mov	COUNT_, #7
28560     A8 00 A0 FD | 	call	#pushregs_
28564     09 27 02 F6 | 	mov	local01, arg01
28568     00 28 06 F6 | 	mov	local02, #0
2856c     00 2A 06 F6 | 	mov	local03, #0
28570     00 2C 06 F6 | 	mov	local04, #0
28574     00 2E 06 F6 | 	mov	local05, #0
28578     97 08 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
2857c                 | LR__3680
2857c     13 17 C2 FA | 	rdbyte	arg03, local01
28580     20 16 0E F2 | 	cmp	arg03, #32 wz
28584     01 26 06 A1 |  if_e	add	local01, #1
28588     F0 FF 9F AD |  if_e	jmp	#LR__3680
2858c                 | LR__3681
2858c     13 31 C2 FA | 	rdbyte	local06, local01
28590                 | LR__3682
28590     2B 30 0E F2 | 	cmp	local06, #43 wz
28594     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
28598     14 00 90 5D |  if_ne	jmp	#LR__3683
2859c     2D 30 0E F2 | 	cmp	local06, #45 wz
285a0     1F 2C E6 A4 |  if_e	bitnot	local04, #31
285a4     01 26 06 F1 | 	add	local01, #1
285a8     13 31 C2 FA | 	rdbyte	local06, local01
285ac     E0 FF 9F FD | 	jmp	#LR__3682
285b0                 | LR__3683
285b0                 | LR__3684
285b0     97 08 48 FB | 	callpa	#(@LR__3686-@LR__3685)>>2,fcache_load_ptr_
285b4                 | LR__3685
285b4     13 31 C2 FA | 	rdbyte	local06, local01
285b8     5F 30 0E F2 | 	cmp	local06, #95 wz
285bc     01 26 06 F1 | 	add	local01, #1
285c0     F0 FF 9F AD |  if_e	jmp	#LR__3685
285c4                 | LR__3686
285c4     00 30 0E F2 | 	cmp	local06, #0 wz
285c8     5C 00 90 AD |  if_e	jmp	#LR__3688
285cc     30 30 56 F2 | 	cmps	local06, #48 wc
285d0     44 00 90 CD |  if_b	jmp	#LR__3687
285d4     3A 30 56 F2 | 	cmps	local06, #58 wc
285d8     3C 00 90 3D |  if_ae	jmp	#LR__3687
285dc     14 13 02 F6 | 	mov	arg01, local02
285e0     00 90 20 FF 
285e4     00 14 06 F6 | 	mov	arg02, ##1092616192
285e8     64 F7 BF FD | 	call	#__system___float_mul
285ec     FD 28 02 F6 | 	mov	local02, result1
285f0     30 30 86 F1 | 	sub	local06, #48
285f4     18 13 02 F6 | 	mov	arg01, local06
285f8     50 F3 BF FD | 	call	#__system___float_fromuns
285fc     FD 14 02 F6 | 	mov	arg02, result1
28600     14 13 02 F6 | 	mov	arg01, local02
28604     78 F3 BF FD | 	call	#__system___float_add
28608     FD 28 02 F6 | 	mov	local02, result1
2860c     00 2E 0E F2 | 	cmp	local05, #0 wz
28610     01 2A 86 51 |  if_ne	sub	local03, #1
28614     98 FF 9F FD | 	jmp	#LR__3684
28618                 | LR__3687
28618     2E 30 0E F2 | 	cmp	local06, #46 wz
2861c     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
28620     01 2E 06 A6 |  if_e	mov	local05, #1
28624     88 FF 9F AD |  if_e	jmp	#LR__3684
28628                 | LR__3688
28628     45 30 0E F2 | 	cmp	local06, #69 wz
2862c     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
28630     18 00 90 5D |  if_ne	jmp	#LR__3689
28634     13 13 02 F6 | 	mov	arg01, local01
28638     00 14 06 F6 | 	mov	arg02, #0
2863c     88 FD BF FD | 	call	#__system____builtin_atoi
28640     15 FB 01 F1 | 	add	result1, local03
28644     FD 32 02 F6 | 	mov	local07, result1
28648     04 00 90 FD | 	jmp	#LR__3690
2864c                 | LR__3689
2864c     15 33 02 F6 | 	mov	local07, local03
28650                 | LR__3690
28650     19 17 02 F6 | 	mov	arg03, local07
28654     14 13 02 F6 | 	mov	arg01, local02
28658     00 90 20 FF 
2865c     00 14 06 F6 | 	mov	arg02, ##1092616192
28660     F4 06 B0 FD | 	call	#__system___float_pow_n
28664     16 FB 61 F5 | 	xor	result1, local04
28668     A7 F0 03 F6 | 	mov	ptra, fp
2866c     B2 00 A0 FD | 	call	#popregs_
28670                 | __system____builtin_atof_ret
28670     2D 00 64 FD | 	ret
28674                 | 
28674                 | __system____builtin_ilogb
28674     FC FB BF FD | 	call	#__system___float_Unpack
28678     00 FE 0D F2 | 	cmp	result3, #0 wz
2867c     00 00 40 AF 
28680     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
28684     24 00 90 AD |  if_e	jmp	#LR__3701
28688     80 FC 0D F2 | 	cmp	result2, #128 wz
2868c     18 00 90 5D |  if_ne	jmp	#LR__3700
28690     00 00 10 FF 
28694     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
28698     1E FA CD A9 |  if_e	bmask	result1, #30
2869c     0C 00 90 AD |  if_e	jmp	#LR__3701
286a0     1F FA C5 F9 | 	decod	result1, #31
286a4     04 00 90 FD | 	jmp	#LR__3701
286a8                 | LR__3700
286a8     FE FA 01 F6 | 	mov	result1, result2
286ac                 | LR__3701
286ac                 | __system____builtin_ilogb_ret
286ac     2D 00 64 FD | 	ret
286b0                 | 
286b0                 | __system____builtin_sinf
286b0     03 4A 05 F6 | 	mov	COUNT_, #3
286b4     A8 00 A0 FD | 	call	#pushregs_
286b8     09 27 02 F6 | 	mov	local01, arg01
286bc     87 64 20 FF 
286c0     DB 15 06 F6 | 	mov	arg02, ##1086918619
286c4     8C F8 BF FD | 	call	#__system___float_div
286c8     FD 12 02 F6 | 	mov	arg01, result1
286cc     00 14 06 F6 | 	mov	arg02, #0
286d0     44 FB BF FD | 	call	#__system___float_tointeger
286d4     FD 16 0A F6 | 	mov	arg03, result1 wz
286d8     44 00 90 AD |  if_e	jmp	#LR__3710
286dc     0B 13 52 F6 | 	abs	arg01, arg03 wc
286e0     1F 28 C6 C9 |  if_b	decod	local02, #31
286e4     00 28 06 36 |  if_ae	mov	local02, #0
286e8     60 F2 BF FD | 	call	#__system___float_fromuns
286ec     14 FB 61 F5 | 	xor	result1, local02
286f0     FD 12 02 F6 | 	mov	arg01, result1
286f4     1E 14 C6 F9 | 	decod	arg02, #30
286f8     54 F6 BF FD | 	call	#__system___float_mul
286fc     FD 12 02 F6 | 	mov	arg01, result1
28700     87 24 20 FF 
28704     DB 15 06 F6 | 	mov	arg02, ##1078530011
28708     44 F6 BF FD | 	call	#__system___float_mul
2870c     FD 14 02 F6 | 	mov	arg02, result1
28710     13 13 02 F6 | 	mov	arg01, local01
28714     1F 14 E6 F4 | 	bitnot	arg02, #31
28718     64 F2 BF FD | 	call	#__system___float_add
2871c     FD 26 02 F6 | 	mov	local01, result1
28720                 | LR__3710
28720     13 13 02 F6 | 	mov	arg01, local01
28724     66 E6 1E FF 
28728     CD 14 06 F6 | 	mov	arg02, ##1036831949
2872c     01 16 06 F6 | 	mov	arg03, #1
28730     50 FA BF FD | 	call	#__system___float_cmp
28734     00 FA 55 F2 | 	cmps	result1, #0 wc
28738     5C 00 90 3D |  if_ae	jmp	#LR__3711
2873c     13 13 02 F6 | 	mov	arg01, local01
28740     66 E6 5E FF 
28744     CD 14 06 F6 | 	mov	arg02, ##-1110651699
28748     01 16 66 F6 | 	neg	arg03, #1
2874c     34 FA BF FD | 	call	#__system___float_cmp
28750     01 FA 55 F2 | 	cmps	result1, #1 wc
28754     40 00 90 CD |  if_b	jmp	#LR__3711
28758     13 13 02 F6 | 	mov	arg01, local01
2875c     13 15 02 F6 | 	mov	arg02, local01
28760     EC F5 BF FD | 	call	#__system___float_mul
28764     FD 12 02 F6 | 	mov	arg01, result1
28768     13 15 02 F6 | 	mov	arg02, local01
2876c     E0 F5 BF FD | 	call	#__system___float_mul
28770     FD 12 02 F6 | 	mov	arg01, result1
28774     00 60 20 FF 
28778     00 14 06 F6 | 	mov	arg02, ##1086324736
2877c     D4 F7 BF FD | 	call	#__system___float_div
28780     FD 14 02 F6 | 	mov	arg02, result1
28784     13 13 02 F6 | 	mov	arg01, local01
28788     1F 14 E6 F4 | 	bitnot	arg02, #31
2878c     F0 F1 BF FD | 	call	#__system___float_add
28790     FD 2A 02 F6 | 	mov	local03, result1
28794     54 00 90 FD | 	jmp	#LR__3712
28798                 | LR__3711
28798     13 13 02 F6 | 	mov	arg01, local01
2879c     7C 91 26 FF 
287a0     83 15 06 F6 | 	mov	arg02, ##1294137731
287a4     A8 F5 BF FD | 	call	#__system___float_mul
287a8     FD 12 02 F6 | 	mov	arg01, result1
287ac     00 14 06 F6 | 	mov	arg02, #0
287b0     64 FA BF FD | 	call	#__system___float_tointeger
287b4     02 FA 65 F0 | 	shl	result1, #2
287b8     00 00 A0 FF 
287bc     FD 00 48 FD | 	qrotate	##1073741824, result1
287c0     19 12 62 FD | 	getqy	arg01
287c4     09 13 52 F6 | 	abs	arg01, arg01 wc
287c8     1F 28 C6 C9 |  if_b	decod	local02, #31
287cc     00 28 06 36 |  if_ae	mov	local02, #0
287d0     78 F1 BF FD | 	call	#__system___float_fromuns
287d4     14 FB 61 F5 | 	xor	result1, local02
287d8     FD 12 02 F6 | 	mov	arg01, result1
287dc     00 40 27 FF 
287e0     00 14 06 F6 | 	mov	arg02, ##1317011456
287e4     6C F7 BF FD | 	call	#__system___float_div
287e8     FD 2A 02 F6 | 	mov	local03, result1
287ec                 | LR__3712
287ec     15 FB 01 F6 | 	mov	result1, local03
287f0     A7 F0 03 F6 | 	mov	ptra, fp
287f4     B2 00 A0 FD | 	call	#popregs_
287f8                 | __system____builtin_sinf_ret
287f8     2D 00 64 FD | 	ret
287fc                 | 
287fc                 | __system____builtin_tanf
287fc     02 4A 05 F6 | 	mov	COUNT_, #2
28800     A8 00 A0 FD | 	call	#pushregs_
28804     09 27 02 F6 | 	mov	local01, arg01
28808     A4 FE BF FD | 	call	#__system____builtin_sinf
2880c     FD 28 02 F6 | 	mov	local02, result1
28810     13 15 02 F6 | 	mov	arg02, local01
28814     87 E4 1F FF 
28818     DB 13 06 F6 | 	mov	arg01, ##1070141403
2881c     1F 14 E6 F4 | 	bitnot	arg02, #31
28820     5C F1 BF FD | 	call	#__system___float_add
28824     FD 12 02 F6 | 	mov	arg01, result1
28828     84 FE BF FD | 	call	#__system____builtin_sinf
2882c     FD 14 02 F6 | 	mov	arg02, result1
28830     14 13 02 F6 | 	mov	arg01, local02
28834     1C F7 BF FD | 	call	#__system___float_div
28838     A7 F0 03 F6 | 	mov	ptra, fp
2883c     B2 00 A0 FD | 	call	#popregs_
28840                 | __system____builtin_tanf_ret
28840     2D 00 64 FD | 	ret
28844                 | 
28844                 | __system____builtin_asinf
28844     01 4A 05 F6 | 	mov	COUNT_, #1
28848     A8 00 A0 FD | 	call	#pushregs_
2884c     09 27 02 F6 | 	mov	local01, arg01
28850     13 15 02 F6 | 	mov	arg02, local01
28854     13 13 02 F6 | 	mov	arg01, local01
28858     F4 F4 BF FD | 	call	#__system___float_mul
2885c     FD 14 02 F6 | 	mov	arg02, result1
28860     00 C0 1F FF 
28864     00 12 06 F6 | 	mov	arg01, ##1065353216
28868     1F 14 E6 F4 | 	bitnot	arg02, #31
2886c     10 F1 BF FD | 	call	#__system___float_add
28870     FD 12 02 F6 | 	mov	arg01, result1
28874     00 F4 BF FD | 	call	#__system___float_sqrt
28878     FD 14 02 F6 | 	mov	arg02, result1
2887c     13 13 02 F6 | 	mov	arg01, local01
28880     58 00 B0 FD | 	call	#__system____builtin_atan2f
28884     A7 F0 03 F6 | 	mov	ptra, fp
28888     B2 00 A0 FD | 	call	#popregs_
2888c                 | __system____builtin_asinf_ret
2888c     2D 00 64 FD | 	ret
28890                 | 
28890                 | __system____builtin_acosf
28890     01 4A 05 F6 | 	mov	COUNT_, #1
28894     A8 00 A0 FD | 	call	#pushregs_
28898     09 27 02 F6 | 	mov	local01, arg01
2889c     13 15 02 F6 | 	mov	arg02, local01
288a0     13 13 02 F6 | 	mov	arg01, local01
288a4     A8 F4 BF FD | 	call	#__system___float_mul
288a8     FD 14 02 F6 | 	mov	arg02, result1
288ac     00 C0 1F FF 
288b0     00 12 06 F6 | 	mov	arg01, ##1065353216
288b4     1F 14 E6 F4 | 	bitnot	arg02, #31
288b8     C4 F0 BF FD | 	call	#__system___float_add
288bc     FD 12 02 F6 | 	mov	arg01, result1
288c0     B4 F3 BF FD | 	call	#__system___float_sqrt
288c4     FD 12 02 F6 | 	mov	arg01, result1
288c8     13 15 02 F6 | 	mov	arg02, local01
288cc     0C 00 B0 FD | 	call	#__system____builtin_atan2f
288d0     A7 F0 03 F6 | 	mov	ptra, fp
288d4     B2 00 A0 FD | 	call	#popregs_
288d8                 | __system____builtin_acosf_ret
288d8     2D 00 64 FD | 	ret
288dc                 | 
288dc                 | __system____builtin_atan2f
288dc     04 4A 05 F6 | 	mov	COUNT_, #4
288e0     A8 00 A0 FD | 	call	#pushregs_
288e4     09 27 02 F6 | 	mov	local01, arg01
288e8     0A 29 02 F6 | 	mov	local02, arg02
288ec     13 13 02 F6 | 	mov	arg01, local01
288f0     00 14 06 F6 | 	mov	arg02, #0
288f4     01 16 06 F6 | 	mov	arg03, #1
288f8     88 F8 BF FD | 	call	#__system___float_cmp
288fc     00 FA 0D F2 | 	cmp	result1, #0 wz
28900     28 00 90 5D |  if_ne	jmp	#LR__3720
28904     14 13 02 F6 | 	mov	arg01, local02
28908     00 14 06 F6 | 	mov	arg02, #0
2890c     01 16 06 F6 | 	mov	arg03, #1
28910     70 F8 BF FD | 	call	#__system___float_cmp
28914     00 FA 55 F2 | 	cmps	result1, #0 wc
28918     87 24 60 CF 
2891c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
28920     DC 00 90 CD |  if_b	jmp	#LR__3721
28924     00 FA 05 F6 | 	mov	result1, #0
28928     D4 00 90 FD | 	jmp	#LR__3721
2892c                 | LR__3720
2892c     14 13 02 F6 | 	mov	arg01, local02
28930     14 15 02 F6 | 	mov	arg02, local02
28934     18 F4 BF FD | 	call	#__system___float_mul
28938     FD 2A 02 F6 | 	mov	local03, result1
2893c     13 13 02 F6 | 	mov	arg01, local01
28940     13 15 02 F6 | 	mov	arg02, local01
28944     08 F4 BF FD | 	call	#__system___float_mul
28948     FD 14 02 F6 | 	mov	arg02, result1
2894c     15 13 02 F6 | 	mov	arg01, local03
28950     2C F0 BF FD | 	call	#__system___float_add
28954     FD 12 02 F6 | 	mov	arg01, result1
28958     1C F3 BF FD | 	call	#__system___float_sqrt
2895c     FD 2A 02 F6 | 	mov	local03, result1
28960     14 13 02 F6 | 	mov	arg01, local02
28964     15 15 02 F6 | 	mov	arg02, local03
28968     E8 F5 BF FD | 	call	#__system___float_div
2896c     FD 28 02 F6 | 	mov	local02, result1
28970     13 13 02 F6 | 	mov	arg01, local01
28974     15 15 02 F6 | 	mov	arg02, local03
28978     D8 F5 BF FD | 	call	#__system___float_div
2897c     FD 26 02 F6 | 	mov	local01, result1
28980     00 40 27 FF 
28984     00 12 06 F6 | 	mov	arg01, ##1317011456
28988     14 15 02 F6 | 	mov	arg02, local02
2898c     C0 F3 BF FD | 	call	#__system___float_mul
28990     FD 12 02 F6 | 	mov	arg01, result1
28994     00 14 06 F6 | 	mov	arg02, #0
28998     7C F8 BF FD | 	call	#__system___float_tointeger
2899c     FD 2A 02 F6 | 	mov	local03, result1
289a0     00 40 27 FF 
289a4     00 12 06 F6 | 	mov	arg01, ##1317011456
289a8     13 15 02 F6 | 	mov	arg02, local01
289ac     A0 F3 BF FD | 	call	#__system___float_mul
289b0     FD 12 02 F6 | 	mov	arg01, result1
289b4     00 14 06 F6 | 	mov	arg02, #0
289b8     5C F8 BF FD | 	call	#__system___float_tointeger
289bc     FD 2A 52 FD | 	qvector	local03, result1
289c0     87 24 20 FF 
289c4     DB 2B 06 F6 | 	mov	local03, ##1078530011
289c8     19 12 62 FD | 	getqy	arg01
289cc     01 12 C6 F0 | 	sar	arg01, #1
289d0     09 13 52 F6 | 	abs	arg01, arg01 wc
289d4     1F 2C C6 C9 |  if_b	decod	local04, #31
289d8     00 2C 06 36 |  if_ae	mov	local04, #0
289dc     6C EF BF FD | 	call	#__system___float_fromuns
289e0     16 FB 61 F5 | 	xor	result1, local04
289e4     FD 12 02 F6 | 	mov	arg01, result1
289e8     00 40 27 FF 
289ec     00 14 06 F6 | 	mov	arg02, ##1317011456
289f0     60 F5 BF FD | 	call	#__system___float_div
289f4     FD 14 02 F6 | 	mov	arg02, result1
289f8     15 13 02 F6 | 	mov	arg01, local03
289fc     50 F3 BF FD | 	call	#__system___float_mul
28a00                 | LR__3721
28a00     A7 F0 03 F6 | 	mov	ptra, fp
28a04     B2 00 A0 FD | 	call	#popregs_
28a08                 | __system____builtin_atan2f_ret
28a08     2D 00 64 FD | 	ret
28a0c                 | 
28a0c                 | __system____builtin_exp2f
28a0c     04 4A 05 F6 | 	mov	COUNT_, #4
28a10     A8 00 A0 FD | 	call	#pushregs_
28a14     09 27 02 F6 | 	mov	local01, arg01
28a18     00 7F 21 FF 
28a1c     00 14 06 F6 | 	mov	arg02, ##1123942400
28a20     01 16 66 F6 | 	neg	arg03, #1
28a24     5C F7 BF FD | 	call	#__system___float_cmp
28a28     00 FA 55 F2 | 	cmps	result1, #0 wc
28a2c     00 C0 3F 3F 
28a30     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
28a34     DC 00 90 3D |  if_ae	jmp	#LR__3731
28a38     13 13 02 F6 | 	mov	arg01, local01
28a3c     00 7F 61 FF 
28a40     00 14 06 F6 | 	mov	arg02, ##-1023541248
28a44     01 16 06 F6 | 	mov	arg03, #1
28a48     38 F7 BF FD | 	call	#__system___float_cmp
28a4c     00 FA 55 F2 | 	cmps	result1, #0 wc
28a50     00 FA 05 C6 |  if_b	mov	result1, #0
28a54     BC 00 90 CD |  if_b	jmp	#LR__3731
28a58     13 13 02 F6 | 	mov	arg01, local01
28a5c     00 14 06 F6 | 	mov	arg02, #0
28a60     B4 F7 BF FD | 	call	#__system___float_tointeger
28a64     FD 28 02 F6 | 	mov	local02, result1
28a68     14 13 52 F6 | 	abs	arg01, local02 wc
28a6c     1F 2A C6 C9 |  if_b	decod	local03, #31
28a70     00 2A 06 36 |  if_ae	mov	local03, #0
28a74     D4 EE BF FD | 	call	#__system___float_fromuns
28a78     15 FB 61 F5 | 	xor	result1, local03
28a7c     FD 14 02 F6 | 	mov	arg02, result1
28a80     13 13 02 F6 | 	mov	arg01, local01
28a84     1F 14 E6 F4 | 	bitnot	arg02, #31
28a88     F4 EE BF FD | 	call	#__system___float_add
28a8c     FD 2C 02 F6 | 	mov	local04, result1
28a90     16 13 02 F6 | 	mov	arg01, local04
28a94     00 14 06 F6 | 	mov	arg02, #0
28a98     01 16 06 F6 | 	mov	arg03, #1
28a9c     E4 F6 BF FD | 	call	#__system___float_cmp
28aa0     00 FA 55 F2 | 	cmps	result1, #0 wc
28aa4     18 00 90 3D |  if_ae	jmp	#LR__3730
28aa8     16 13 02 F6 | 	mov	arg01, local04
28aac     00 C0 1F FF 
28ab0     00 14 06 F6 | 	mov	arg02, ##1065353216
28ab4     C8 EE BF FD | 	call	#__system___float_add
28ab8     FD 2C 02 F6 | 	mov	local04, result1
28abc     01 28 86 F1 | 	sub	local02, #1
28ac0                 | LR__3730
28ac0     7F 28 06 F1 | 	add	local02, #127
28ac4     17 28 66 F0 | 	shl	local02, #23
28ac8     16 13 02 F6 | 	mov	arg01, local04
28acc     00 80 26 FF 
28ad0     00 14 06 F6 | 	mov	arg02, ##1291845632
28ad4     78 F2 BF FD | 	call	#__system___float_mul
28ad8     FD 12 02 F6 | 	mov	arg01, result1
28adc     00 14 06 F6 | 	mov	arg02, #0
28ae0     34 F7 BF FD | 	call	#__system___float_tointeger
28ae4     FD 2C 0A F6 | 	mov	local04, result1 wz
28ae8     14 FB 01 A6 |  if_e	mov	result1, local02
28aec     24 00 90 AD |  if_e	jmp	#LR__3731
28af0     3E 2C 26 F4 | 	bith	local04, #62
28af4     0F 2C 62 FD | 	qexp	local04
28af8     14 13 02 F6 | 	mov	arg01, local02
28afc     18 14 62 FD | 	getqx	arg02
28b00     01 14 06 F1 | 	add	arg02, #1
28b04     01 14 46 F0 | 	shr	arg02, #1
28b08     00 80 1F FF 
28b0c     00 14 06 F1 | 	add	arg02, ##1056964608
28b10     3C F2 BF FD | 	call	#__system___float_mul
28b14                 | LR__3731
28b14     A7 F0 03 F6 | 	mov	ptra, fp
28b18     B2 00 A0 FD | 	call	#popregs_
28b1c                 | __system____builtin_exp2f_ret
28b1c     2D 00 64 FD | 	ret
28b20                 | 
28b20                 | __system____builtin_log2f
28b20     06 4A 05 F6 | 	mov	COUNT_, #6
28b24     A8 00 A0 FD | 	call	#pushregs_
28b28     09 27 02 F6 | 	mov	local01, arg01
28b2c     09 29 0A F6 | 	mov	local02, arg01 wz
28b30     00 00 40 5F 
28b34     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
28b38     00 40 00 AF 
28b3c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
28b40     08 01 90 AD |  if_e	jmp	#LR__3744
28b44     00 28 56 F2 | 	cmps	local02, #0 wc
28b48     00 E0 3F CF 
28b4c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
28b50     F8 00 90 CD |  if_b	jmp	#LR__3744
28b54     13 13 02 F6 | 	mov	arg01, local01
28b58     00 90 20 FF 
28b5c     00 14 06 F6 | 	mov	arg02, ##1092616192
28b60     01 16 06 F6 | 	mov	arg03, #1
28b64     1C F6 BF FD | 	call	#__system___float_cmp
28b68     00 FA 0D F2 | 	cmp	result1, #0 wz
28b6c     4D 2A 20 AF 
28b70     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
28b74     D4 00 90 AD |  if_e	jmp	#LR__3744
28b78     13 13 02 F6 | 	mov	arg01, local01
28b7c     FC 16 20 FF 
28b80     54 14 06 F6 | 	mov	arg02, ##1076754516
28b84     01 16 06 F6 | 	mov	arg03, #1
28b88     F8 F5 BF FD | 	call	#__system___float_cmp
28b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
28b90     55 DC 1F AF 
28b94     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
28b98     B0 00 90 AD |  if_e	jmp	#LR__3744
28b9c     14 2B 02 F6 | 	mov	local03, local02
28ba0     17 2A 46 F0 | 	shr	local03, #23
28ba4     15 2B E2 F8 | 	getbyte	local03, local03, #0
28ba8     17 29 06 F4 | 	bitl	local02, #279
28bac     14 2D 02 F6 | 	mov	local04, local02
28bb0     FF 2A 0E F2 | 	cmp	local03, #255 wz
28bb4     1C 00 90 5D |  if_ne	jmp	#LR__3740
28bb8     00 2C 0E F2 | 	cmp	local04, #0 wz
28bbc     00 C0 3F 5F 
28bc0     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
28bc4     00 E0 3F AF 
28bc8     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
28bcc     17 FB 01 F6 | 	mov	result1, local05
28bd0     78 00 90 FD | 	jmp	#LR__3744
28bd4                 | LR__3740
28bd4     00 2A 0E F2 | 	cmp	local03, #0 wz
28bd8     17 2C 26 54 |  if_ne	bith	local04, #23
28bdc     7F 2A 86 51 |  if_ne	sub	local03, #127
28be0     28 00 90 5D |  if_ne	jmp	#LR__3743
28be4     00 2C 0E F2 | 	cmp	local04, #0 wz
28be8     00 40 00 AF 
28bec     00 FA 65 A6 |  if_e	neg	result1, ##8388608
28bf0     58 00 90 AD |  if_e	jmp	#LR__3744
28bf4     7E 2A 66 F6 | 	neg	local03, #126
28bf8     97 08 48 FB | 	callpa	#(@LR__3742-@LR__3741)>>2,fcache_load_ptr_
28bfc                 | LR__3741
28bfc     17 2C 2E F4 | 	testbn	local04, #23 wz
28c00     01 2C 66 A0 |  if_e	shl	local04, #1
28c04     01 2A 06 A1 |  if_e	add	local03, #1
28c08     F0 FF 9F AD |  if_e	jmp	#LR__3741
28c0c                 | LR__3742
28c0c                 | LR__3743
28c0c     0E 2C 62 FD | 	qlog	local04
28c10     01 2A 86 F1 | 	sub	local03, #1
28c14     15 13 52 F6 | 	abs	arg01, local03 wc
28c18     1F 30 C6 C9 |  if_b	decod	local06, #31
28c1c     00 30 06 36 |  if_ae	mov	local06, #0
28c20     18 2E 62 FD | 	getqx	local05
28c24     9B 2E 06 F4 | 	bitl	local05, #155
28c28     08 2E 06 F1 | 	add	local05, #8
28c2c     04 2E 46 F0 | 	shr	local05, #4
28c30     00 C0 1F FF 
28c34     00 2E 06 F1 | 	add	local05, ##1065353216
28c38     10 ED BF FD | 	call	#__system___float_fromuns
28c3c     18 FB 61 F5 | 	xor	result1, local06
28c40     FD 14 02 F6 | 	mov	arg02, result1
28c44     17 13 02 F6 | 	mov	arg01, local05
28c48     34 ED BF FD | 	call	#__system___float_add
28c4c                 | LR__3744
28c4c     A7 F0 03 F6 | 	mov	ptra, fp
28c50     B2 00 A0 FD | 	call	#popregs_
28c54                 | __system____builtin_log2f_ret
28c54     2D 00 64 FD | 	ret
28c58                 | 
28c58                 | __system____builtin_powf
28c58     04 4A 05 F6 | 	mov	COUNT_, #4
28c5c     A8 00 A0 FD | 	call	#pushregs_
28c60     09 27 02 F6 | 	mov	local01, arg01
28c64     0A 29 02 F6 | 	mov	local02, arg02
28c68     14 13 02 F6 | 	mov	arg01, local02
28c6c     00 14 06 F6 | 	mov	arg02, #0
28c70     A4 F5 BF FD | 	call	#__system___float_tointeger
28c74     FD 2A 02 F6 | 	mov	local03, result1
28c78     15 13 52 F6 | 	abs	arg01, local03 wc
28c7c     1F 2C C6 C9 |  if_b	decod	local04, #31
28c80     00 2C 06 36 |  if_ae	mov	local04, #0
28c84     C4 EC BF FD | 	call	#__system___float_fromuns
28c88     16 FB 61 F5 | 	xor	result1, local04
28c8c     FD 12 02 F6 | 	mov	arg01, result1
28c90     14 15 02 F6 | 	mov	arg02, local02
28c94     01 16 06 F6 | 	mov	arg03, #1
28c98     E8 F4 BF FD | 	call	#__system___float_cmp
28c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
28ca0     18 00 90 5D |  if_ne	jmp	#LR__3750
28ca4     00 C0 1F FF 
28ca8     00 12 06 F6 | 	mov	arg01, ##1065353216
28cac     13 15 02 F6 | 	mov	arg02, local01
28cb0     15 17 02 F6 | 	mov	arg03, local03
28cb4     A0 00 B0 FD | 	call	#__system___float_pow_n
28cb8     58 00 90 FD | 	jmp	#LR__3751
28cbc                 | LR__3750
28cbc     13 13 02 F6 | 	mov	arg01, local01
28cc0     00 14 06 F6 | 	mov	arg02, #0
28cc4     01 16 06 F6 | 	mov	arg03, #1
28cc8     B8 F4 BF FD | 	call	#__system___float_cmp
28ccc     00 FA 55 F2 | 	cmps	result1, #0 wc
28cd0     00 E0 3F CF 
28cd4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
28cd8     38 00 90 CD |  if_b	jmp	#LR__3751
28cdc     13 13 02 F6 | 	mov	arg01, local01
28ce0     00 14 06 F6 | 	mov	arg02, #0
28ce4     01 16 06 F6 | 	mov	arg03, #1
28ce8     98 F4 BF FD | 	call	#__system___float_cmp
28cec     00 FA 0D F2 | 	cmp	result1, #0 wz
28cf0     00 FA 05 A6 |  if_e	mov	result1, #0
28cf4     1C 00 90 AD |  if_e	jmp	#LR__3751
28cf8     13 13 02 F6 | 	mov	arg01, local01
28cfc     20 FE BF FD | 	call	#__system____builtin_log2f
28d00     FD 12 02 F6 | 	mov	arg01, result1
28d04     14 15 02 F6 | 	mov	arg02, local02
28d08     44 F0 BF FD | 	call	#__system___float_mul
28d0c     FD 12 02 F6 | 	mov	arg01, result1
28d10     F8 FC BF FD | 	call	#__system____builtin_exp2f
28d14                 | LR__3751
28d14     A7 F0 03 F6 | 	mov	ptra, fp
28d18     B2 00 A0 FD | 	call	#popregs_
28d1c                 | __system____builtin_powf_ret
28d1c     2D 00 64 FD | 	ret
28d20                 | 
28d20                 | __system____builtin_logbase
28d20     02 4A 05 F6 | 	mov	COUNT_, #2
28d24     A8 00 A0 FD | 	call	#pushregs_
28d28     09 27 02 F6 | 	mov	local01, arg01
28d2c     0A 13 02 F6 | 	mov	arg01, arg02
28d30     EC FD BF FD | 	call	#__system____builtin_log2f
28d34     FD 28 02 F6 | 	mov	local02, result1
28d38     13 13 02 F6 | 	mov	arg01, local01
28d3c     E0 FD BF FD | 	call	#__system____builtin_log2f
28d40     FD 14 02 F6 | 	mov	arg02, result1
28d44     14 13 02 F6 | 	mov	arg01, local02
28d48     08 F2 BF FD | 	call	#__system___float_div
28d4c     A7 F0 03 F6 | 	mov	ptra, fp
28d50     B2 00 A0 FD | 	call	#popregs_
28d54                 | __system____builtin_logbase_ret
28d54     2D 00 64 FD | 	ret
28d58                 | 
28d58                 | __system___float_pow_n
28d58     05 4A 05 F6 | 	mov	COUNT_, #5
28d5c     A8 00 A0 FD | 	call	#pushregs_
28d60     09 27 02 F6 | 	mov	local01, arg01
28d64     0A 29 02 F6 | 	mov	local02, arg02
28d68     0B 2B 02 F6 | 	mov	local03, arg03
28d6c     00 2A 56 F2 | 	cmps	local03, #0 wc
28d70     18 00 90 3D |  if_ae	jmp	#LR__3760
28d74     01 2C 06 F6 | 	mov	local04, #1
28d78     15 2B 62 F6 | 	neg	local03, local03
28d7c     00 2A 56 F2 | 	cmps	local03, #0 wc
28d80     00 FA 05 C6 |  if_b	mov	result1, #0
28d84     94 00 90 CD |  if_b	jmp	#LR__3768
28d88     04 00 90 FD | 	jmp	#LR__3761
28d8c                 | LR__3760
28d8c     00 2C 06 F6 | 	mov	local04, #0
28d90                 | LR__3761
28d90     00 C0 1F FF 
28d94     00 2E 06 F6 | 	mov	local05, ##1065353216
28d98                 | LR__3762
28d98     01 2A 56 F2 | 	cmps	local03, #1 wc
28d9c     30 00 90 CD |  if_b	jmp	#LR__3764
28da0     01 2A CE F7 | 	test	local03, #1 wz
28da4     10 00 90 AD |  if_e	jmp	#LR__3763
28da8     17 13 02 F6 | 	mov	arg01, local05
28dac     14 15 02 F6 | 	mov	arg02, local02
28db0     9C EF BF FD | 	call	#__system___float_mul
28db4     FD 2E 02 F6 | 	mov	local05, result1
28db8                 | LR__3763
28db8     01 2A C6 F0 | 	sar	local03, #1
28dbc     14 13 02 F6 | 	mov	arg01, local02
28dc0     14 15 02 F6 | 	mov	arg02, local02
28dc4     88 EF BF FD | 	call	#__system___float_mul
28dc8     FD 28 02 F6 | 	mov	local02, result1
28dcc     C8 FF 9F FD | 	jmp	#LR__3762
28dd0                 | LR__3764
28dd0     00 2C 0E F2 | 	cmp	local04, #0 wz
28dd4     14 00 90 AD |  if_e	jmp	#LR__3765
28dd8     13 13 02 F6 | 	mov	arg01, local01
28ddc     17 15 02 F6 | 	mov	arg02, local05
28de0     70 F1 BF FD | 	call	#__system___float_div
28de4     FD 2E 02 F6 | 	mov	local05, result1
28de8     2C 00 90 FD | 	jmp	#LR__3767
28dec                 | LR__3765
28dec     13 13 02 F6 | 	mov	arg01, local01
28df0     00 C0 1F FF 
28df4     00 14 06 F6 | 	mov	arg02, ##1065353216
28df8     01 16 06 F6 | 	mov	arg03, #1
28dfc     84 F3 BF FD | 	call	#__system___float_cmp
28e00     00 FA 0D F2 | 	cmp	result1, #0 wz
28e04     10 00 90 AD |  if_e	jmp	#LR__3766
28e08     13 13 02 F6 | 	mov	arg01, local01
28e0c     17 15 02 F6 | 	mov	arg02, local05
28e10     3C EF BF FD | 	call	#__system___float_mul
28e14     FD 2E 02 F6 | 	mov	local05, result1
28e18                 | LR__3766
28e18                 | LR__3767
28e18     17 FB 01 F6 | 	mov	result1, local05
28e1c                 | LR__3768
28e1c     A7 F0 03 F6 | 	mov	ptra, fp
28e20     B2 00 A0 FD | 	call	#popregs_
28e24                 | __system___float_pow_n_ret
28e24     2D 00 64 FD | 	ret
28e28                 | 
28e28                 | __system___gc_ptrs
28e28     EC 00 02 F6 | 	mov	_var01, __heap_ptr
28e2c     00 03 02 F6 | 	mov	_var02, _var01
28e30     BB 00 00 FF 
28e34     F8 02 06 F1 | 	add	_var02, ##95992
28e38     00 FD 09 FB | 	rdlong	result2, _var01 wz
28e3c     74 00 90 5D |  if_ne	jmp	#LR__3770
28e40     01 FD 01 F6 | 	mov	result2, _var02
28e44     00 FD 81 F1 | 	sub	result2, _var01
28e48     00 03 58 FC | 	wrword	#1, _var01
28e4c     00 FB 01 F6 | 	mov	result1, _var01
28e50     02 FA 05 F1 | 	add	result1, #2
28e54     36 00 80 FF 
28e58     FD 20 59 FC | 	wrword	##27792, result1
28e5c     00 FB 01 F6 | 	mov	result1, _var01
28e60     04 FA 05 F1 | 	add	result1, #4
28e64     FD 00 58 FC | 	wrword	#0, result1
28e68     00 FB 01 F6 | 	mov	result1, _var01
28e6c     06 FA 05 F1 | 	add	result1, #6
28e70     FD 02 58 FC | 	wrword	#1, result1
28e74     10 00 06 F1 | 	add	_var01, #16
28e78     FE FC 51 F6 | 	abs	result2, result2 wc
28e7c     04 FC 45 F0 | 	shr	result2, #4
28e80     FE FC 81 F6 | 	negc	result2, result2
28e84     00 FD 51 FC | 	wrword	result2, _var01
28e88     00 FD 01 F6 | 	mov	result2, _var01
28e8c     02 FC 05 F1 | 	add	result2, #2
28e90     36 00 80 FF 
28e94     FE 1E 59 FC | 	wrword	##27791, result2
28e98     00 FD 01 F6 | 	mov	result2, _var01
28e9c     04 FC 05 F1 | 	add	result2, #4
28ea0     FE 00 58 FC | 	wrword	#0, result2
28ea4     00 FD 01 F6 | 	mov	result2, _var01
28ea8     06 FC 05 F1 | 	add	result2, #6
28eac     FE 00 58 FC | 	wrword	#0, result2
28eb0     10 00 86 F1 | 	sub	_var01, #16
28eb4                 | LR__3770
28eb4     00 FB 01 F6 | 	mov	result1, _var01
28eb8     01 FD 01 F6 | 	mov	result2, _var02
28ebc                 | __system___gc_ptrs_ret
28ebc     2D 00 64 FD | 	ret
28ec0                 | 
28ec0                 | __system___gc_tryalloc
28ec0     0B 4A 05 F6 | 	mov	COUNT_, #11
28ec4     A8 00 A0 FD | 	call	#pushregs_
28ec8     09 27 02 F6 | 	mov	local01, arg01
28ecc     0A 29 02 F6 | 	mov	local02, arg02
28ed0     54 FF BF FD | 	call	#__system___gc_ptrs
28ed4     FD 2A 02 F6 | 	mov	local03, result1
28ed8     FE 2C 02 F6 | 	mov	local04, result2
28edc     15 2F 02 F6 | 	mov	local05, local03
28ee0     00 30 06 F6 | 	mov	local06, #0
28ee4     97 1E 48 FB | 	callpa	#(@LR__3781-@LR__3780)>>2,fcache_load_ptr_
28ee8                 | LR__3780
28ee8     17 33 02 F6 | 	mov	local07, local05
28eec     06 2E 06 F1 | 	add	local05, #6
28ef0     17 15 EA FA | 	rdword	arg02, local05 wz
28ef4     15 13 02 F6 | 	mov	arg01, local03
28ef8     00 FA 05 A6 |  if_e	mov	result1, #0
28efc     04 14 66 50 |  if_ne	shl	arg02, #4
28f00     0A 13 02 51 |  if_ne	add	arg01, arg02
28f04     09 FB 01 56 |  if_ne	mov	result1, arg01
28f08     FD 2E 0A F6 | 	mov	local05, result1 wz
28f0c     17 31 E2 5A |  if_ne	rdword	local06, local05
28f10     00 2E 0E F2 | 	cmp	local05, #0 wz
28f14     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
28f18     08 00 90 1D |  if_a	jmp	#LR__3782
28f1c     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
28f20     C4 FF 9F 1D |  if_a	jmp	#LR__3780
28f24                 | LR__3781
28f24                 | LR__3782
28f24     00 2E 0E F2 | 	cmp	local05, #0 wz
28f28     17 FB 01 A6 |  if_e	mov	result1, local05
28f2c     3C 01 90 AD |  if_e	jmp	#LR__3785
28f30     17 FD 01 F6 | 	mov	result2, local05
28f34     06 FC 05 F1 | 	add	result2, #6
28f38     FE 34 E2 FA | 	rdword	local08, result2
28f3c     18 27 52 F2 | 	cmps	local01, local06 wc
28f40     C0 00 90 3D |  if_ae	jmp	#LR__3784
28f44     17 27 52 FC | 	wrword	local01, local05
28f48     17 13 02 F6 | 	mov	arg01, local05
28f4c     13 35 02 F6 | 	mov	local08, local01
28f50     04 34 66 F0 | 	shl	local08, #4
28f54     1A 13 02 F1 | 	add	arg01, local08
28f58     13 31 82 F1 | 	sub	local06, local01
28f5c     09 31 52 FC | 	wrword	local06, arg01
28f60     09 35 02 F6 | 	mov	local08, arg01
28f64     02 34 06 F1 | 	add	local08, #2
28f68     36 00 80 FF 
28f6c     1A 1F 59 FC | 	wrword	##27791, local08
28f70     17 15 0A F6 | 	mov	arg02, local05 wz
28f74     00 FA 05 A6 |  if_e	mov	result1, #0
28f78     15 15 82 51 |  if_ne	sub	arg02, local03
28f7c     04 14 46 50 |  if_ne	shr	arg02, #4
28f80     0A FB 01 56 |  if_ne	mov	result1, arg02
28f84     09 35 02 F6 | 	mov	local08, arg01
28f88     04 34 06 F1 | 	add	local08, #4
28f8c     1A FB 51 FC | 	wrword	result1, local08
28f90     17 35 02 F6 | 	mov	local08, local05
28f94     06 34 06 F1 | 	add	local08, #6
28f98     09 15 02 F6 | 	mov	arg02, arg01
28f9c     1A 35 E2 FA | 	rdword	local08, local08
28fa0     06 14 06 F1 | 	add	arg02, #6
28fa4     0A 35 52 FC | 	wrword	local08, arg02
28fa8     09 37 02 F6 | 	mov	local09, arg01
28fac     1B 15 0A F6 | 	mov	arg02, local09 wz
28fb0     00 FA 05 A6 |  if_e	mov	result1, #0
28fb4     15 15 82 51 |  if_ne	sub	arg02, local03
28fb8     04 14 46 50 |  if_ne	shr	arg02, #4
28fbc     0A FB 01 56 |  if_ne	mov	result1, arg02
28fc0     FD 34 02 F6 | 	mov	local08, result1
28fc4     09 39 EA FA | 	rdword	local10, arg01 wz
28fc8     00 FA 05 A6 |  if_e	mov	result1, #0
28fcc     04 38 66 50 |  if_ne	shl	local10, #4
28fd0     1C 13 02 51 |  if_ne	add	arg01, local10
28fd4     09 FB 01 56 |  if_ne	mov	result1, arg01
28fd8     FD 3A 0A F6 | 	mov	local11, result1 wz
28fdc     24 00 90 AD |  if_e	jmp	#LR__3783
28fe0     16 3B 52 F2 | 	cmps	local11, local04 wc
28fe4     1C 00 90 3D |  if_ae	jmp	#LR__3783
28fe8     1B 15 0A F6 | 	mov	arg02, local09 wz
28fec     00 FA 05 A6 |  if_e	mov	result1, #0
28ff0     15 15 82 51 |  if_ne	sub	arg02, local03
28ff4     04 14 46 50 |  if_ne	shr	arg02, #4
28ff8     0A FB 01 56 |  if_ne	mov	result1, arg02
28ffc     04 3A 06 F1 | 	add	local11, #4
29000     1D FB 51 FC | 	wrword	result1, local11
29004                 | LR__3783
29004                 | LR__3784
29004     06 32 06 F1 | 	add	local07, #6
29008     19 35 52 FC | 	wrword	local08, local07
2900c     36 00 00 FF 
29010     80 36 06 F6 | 	mov	local09, ##27776
29014     14 37 42 F5 | 	or	local09, local02
29018     00 FA 05 F6 | 	mov	result1, #0
2901c     01 FA 61 FD | 	cogid	result1
29020     FD 36 42 F5 | 	or	local09, result1
29024     17 3B 02 F6 | 	mov	local11, local05
29028     02 3A 06 F1 | 	add	local11, #2
2902c     1D 37 52 FC | 	wrword	local09, local11
29030     15 37 02 F6 | 	mov	local09, local03
29034     08 36 06 F1 | 	add	local09, #8
29038     17 3B 02 F6 | 	mov	local11, local05
2903c     1B 37 E2 FA | 	rdword	local09, local09
29040     06 3A 06 F1 | 	add	local11, #6
29044     1D 37 52 FC | 	wrword	local09, local11
29048     17 15 0A F6 | 	mov	arg02, local05 wz
2904c     00 FA 05 A6 |  if_e	mov	result1, #0
29050     15 15 82 51 |  if_ne	sub	arg02, local03
29054     04 14 46 50 |  if_ne	shr	arg02, #4
29058     0A FB 01 56 |  if_ne	mov	result1, arg02
2905c     08 2A 06 F1 | 	add	local03, #8
29060     15 FB 51 FC | 	wrword	result1, local03
29064     08 2E 06 F1 | 	add	local05, #8
29068     17 FB 01 F6 | 	mov	result1, local05
2906c                 | LR__3785
2906c     A7 F0 03 F6 | 	mov	ptra, fp
29070     B2 00 A0 FD | 	call	#popregs_
29074                 | __system___gc_tryalloc_ret
29074     2D 00 64 FD | 	ret
29078                 | 
29078                 | __system___gc_alloc_managed
29078     01 4A 05 F6 | 	mov	COUNT_, #1
2907c     A8 00 A0 FD | 	call	#pushregs_
29080     09 27 02 F6 | 	mov	local01, arg01
29084     00 14 06 F6 | 	mov	arg02, #0
29088     1C 00 B0 FD | 	call	#__system___gc_doalloc
2908c     FD 14 0A F6 | 	mov	arg02, result1 wz
29090     01 26 56 A2 |  if_e	cmps	local01, #1 wc
29094     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
29098     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2909c     A7 F0 03 F6 | 	mov	ptra, fp
290a0     B2 00 A0 FD | 	call	#popregs_
290a4                 | __system___gc_alloc_managed_ret
290a4     2D 00 64 FD | 	ret
290a8                 | 
290a8                 | __system___gc_doalloc
290a8     06 4A 05 F6 | 	mov	COUNT_, #6
290ac     A8 00 A0 FD | 	call	#pushregs_
290b0     09 27 0A F6 | 	mov	local01, arg01 wz
290b4     0A 29 02 F6 | 	mov	local02, arg02
290b8     00 FA 05 A6 |  if_e	mov	result1, #0
290bc     8C 00 90 AD |  if_e	jmp	#LR__3797
290c0     17 26 06 F1 | 	add	local01, #23
290c4     0F 26 26 F5 | 	andn	local01, #15
290c8     04 26 46 F0 | 	shr	local01, #4
290cc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
290d0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
290d4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
290d8     F8 BD BF FD | 	call	#__system___lockmem
290dc     13 13 02 F6 | 	mov	arg01, local01
290e0     14 15 02 F6 | 	mov	arg02, local02
290e4     D8 FD BF FD | 	call	#__system___gc_tryalloc
290e8     FD 2A 0A F6 | 	mov	local03, result1 wz
290ec     14 00 90 5D |  if_ne	jmp	#LR__3790
290f0     70 03 B0 FD | 	call	#__system___gc_docollect
290f4     13 13 02 F6 | 	mov	arg01, local01
290f8     14 15 02 F6 | 	mov	arg02, local02
290fc     C0 FD BF FD | 	call	#__system___gc_tryalloc
29100     FD 2A 02 F6 | 	mov	local03, result1
29104                 | LR__3790
29104     1C E6 05 F1 | 	add	ptr___system__dat__, #28
29108     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2910c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
29110     09 01 68 FC | 	wrlong	#0, arg01
29114     00 2A 0E F2 | 	cmp	local03, #0 wz
29118     2C 00 90 AD |  if_e	jmp	#LR__3796
2911c     04 26 66 F0 | 	shl	local01, #4
29120     08 26 86 F1 | 	sub	local01, #8
29124     13 2D 52 F6 | 	abs	local04, local01 wc
29128     02 2C 46 F0 | 	shr	local04, #2
2912c     16 2F 8A F6 | 	negc	local05, local04 wz
29130     15 31 02 F6 | 	mov	local06, local03
29134     10 00 90 AD |  if_e	jmp	#LR__3795
29138     97 06 48 FB | 	callpa	#(@LR__3793-@LR__3791)>>2,fcache_load_ptr_
2913c                 | LR__3791
2913c     17 05 D8 FC | 	rep	@LR__3794, local05
29140                 | LR__3792
29140     18 01 68 FC | 	wrlong	#0, local06
29144     04 30 06 F1 | 	add	local06, #4
29148                 | LR__3793
29148                 | LR__3794
29148                 | LR__3795
29148                 | LR__3796
29148     15 FB 01 F6 | 	mov	result1, local03
2914c                 | LR__3797
2914c     A7 F0 03 F6 | 	mov	ptra, fp
29150     B2 00 A0 FD | 	call	#popregs_
29154                 | __system___gc_doalloc_ret
29154     2D 00 64 FD | 	ret
29158                 | 
29158                 | __system___gc_isvalidptr
29158     F8 16 06 F4 | 	bitl	arg03, #248
2915c     08 16 86 F1 | 	sub	arg03, #8
29160     09 17 52 F2 | 	cmps	arg03, arg01 wc
29164     08 00 90 CD |  if_b	jmp	#LR__3800
29168     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2916c     08 00 90 CD |  if_b	jmp	#LR__3801
29170                 | LR__3800
29170     00 FA 05 F6 | 	mov	result1, #0
29174     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
29178                 | LR__3801
29178     0B 01 02 F6 | 	mov	_var01, arg03
2917c     09 01 62 F5 | 	xor	_var01, arg01
29180     0F 00 CE F7 | 	test	_var01, #15 wz
29184     00 FA 05 56 |  if_ne	mov	result1, #0
29188     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2918c     0B 01 02 F6 | 	mov	_var01, arg03
29190     02 00 06 F1 | 	add	_var01, #2
29194     00 01 E2 FA | 	rdword	_var01, _var01
29198     7F 00 00 FF 
2919c     C0 01 06 F5 | 	and	_var01, ##65472
291a0     36 00 00 FF 
291a4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
291a8     00 FA 05 56 |  if_ne	mov	result1, #0
291ac     0B FB 01 A6 |  if_e	mov	result1, arg03
291b0                 | __system___gc_isvalidptr_ret
291b0     2D 00 64 FD | 	ret
291b4                 | 
291b4                 | __system___gc_free
291b4     09 17 02 F6 | 	mov	arg03, arg01
291b8     6C FC BF FD | 	call	#__system___gc_ptrs
291bc     FD 12 02 F6 | 	mov	arg01, result1
291c0     FE 14 02 F6 | 	mov	arg02, result2
291c4     90 FF BF FD | 	call	#__system___gc_isvalidptr
291c8     FD 14 0A F6 | 	mov	arg02, result1 wz
291cc     28 00 90 AD |  if_e	jmp	#LR__3810
291d0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
291d4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
291d8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
291dc     F4 BC BF FD | 	call	#__system___lockmem
291e0     0A 13 02 F6 | 	mov	arg01, arg02
291e4     14 00 B0 FD | 	call	#__system___gc_dofree
291e8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
291ec     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
291f0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
291f4     09 01 68 FC | 	wrlong	#0, arg01
291f8                 | LR__3810
291f8                 | __system___gc_free_ret
291f8     2D 00 64 FD | 	ret
291fc                 | 
291fc                 | __system___gc_dofree
291fc     06 4A 05 F6 | 	mov	COUNT_, #6
29200     A8 00 A0 FD | 	call	#pushregs_
29204     09 27 02 F6 | 	mov	local01, arg01
29208     1C FC BF FD | 	call	#__system___gc_ptrs
2920c     FD 28 02 F6 | 	mov	local02, result1
29210     FE 2A 02 F6 | 	mov	local03, result2
29214     13 15 02 F6 | 	mov	arg02, local01
29218     02 14 06 F1 | 	add	arg02, #2
2921c     36 00 80 FF 
29220     0A 1F 59 FC | 	wrword	##27791, arg02
29224     13 2D 02 F6 | 	mov	local04, local01
29228     13 13 02 F6 | 	mov	arg01, local01
2922c     09 2F EA FA | 	rdword	local05, arg01 wz
29230     00 FA 05 A6 |  if_e	mov	result1, #0
29234     04 2E 66 50 |  if_ne	shl	local05, #4
29238     17 13 02 51 |  if_ne	add	arg01, local05
2923c     09 FB 01 56 |  if_ne	mov	result1, arg01
29240     FD 30 02 F6 | 	mov	local06, result1
29244     97 24 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
29248                 | LR__3820
29248     04 2C 06 F1 | 	add	local04, #4
2924c     16 15 EA FA | 	rdword	arg02, local04 wz
29250     14 13 02 F6 | 	mov	arg01, local02
29254     00 FA 05 A6 |  if_e	mov	result1, #0
29258     04 14 66 50 |  if_ne	shl	arg02, #4
2925c     0A 13 02 51 |  if_ne	add	arg01, arg02
29260     09 FB 01 56 |  if_ne	mov	result1, arg01
29264     FD 2C 0A F6 | 	mov	local04, result1 wz
29268     24 00 90 AD |  if_e	jmp	#LR__3822
2926c     16 13 02 F6 | 	mov	arg01, local04
29270     00 FA 05 F6 | 	mov	result1, #0
29274     02 12 06 F1 | 	add	arg01, #2
29278     09 13 E2 FA | 	rdword	arg01, arg01
2927c     36 00 00 FF 
29280     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
29284     01 FA 65 A6 |  if_e	neg	result1, #1
29288     00 FA 0D F2 | 	cmp	result1, #0 wz
2928c     B8 FF 9F AD |  if_e	jmp	#LR__3820
29290                 | LR__3821
29290                 | LR__3822
29290     00 2C 0E F2 | 	cmp	local04, #0 wz
29294     14 2D 02 A6 |  if_e	mov	local04, local02
29298     16 15 02 F6 | 	mov	arg02, local04
2929c     06 14 06 F1 | 	add	arg02, #6
292a0     13 13 02 F6 | 	mov	arg01, local01
292a4     0A 15 E2 FA | 	rdword	arg02, arg02
292a8     06 12 06 F1 | 	add	arg01, #6
292ac     09 15 52 FC | 	wrword	arg02, arg01
292b0     13 15 0A F6 | 	mov	arg02, local01 wz
292b4     00 FA 05 A6 |  if_e	mov	result1, #0
292b8     14 15 82 51 |  if_ne	sub	arg02, local02
292bc     04 14 46 50 |  if_ne	shr	arg02, #4
292c0     0A FB 01 56 |  if_ne	mov	result1, arg02
292c4     16 15 02 F6 | 	mov	arg02, local04
292c8     06 14 06 F1 | 	add	arg02, #6
292cc     0A FB 51 FC | 	wrword	result1, arg02
292d0     14 2D 0A F2 | 	cmp	local04, local02 wz
292d4     A4 00 90 AD |  if_e	jmp	#LR__3825
292d8     16 13 02 F6 | 	mov	arg01, local04
292dc     09 2F EA FA | 	rdword	local05, arg01 wz
292e0     00 FA 05 A6 |  if_e	mov	result1, #0
292e4     04 2E 66 50 |  if_ne	shl	local05, #4
292e8     17 13 02 51 |  if_ne	add	arg01, local05
292ec     09 FB 01 56 |  if_ne	mov	result1, arg01
292f0     13 FB 09 F2 | 	cmp	result1, local01 wz
292f4     84 00 90 5D |  if_ne	jmp	#LR__3824
292f8     16 31 E2 FA | 	rdword	local06, local04
292fc     13 15 E2 FA | 	rdword	arg02, local01
29300     0A 31 02 F1 | 	add	local06, arg02
29304     16 31 52 FC | 	wrword	local06, local04
29308     13 31 02 F6 | 	mov	local06, local01
2930c     02 30 06 F1 | 	add	local06, #2
29310     18 01 58 FC | 	wrword	#0, local06
29314     13 13 02 F6 | 	mov	arg01, local01
29318     09 2F EA FA | 	rdword	local05, arg01 wz
2931c     00 FA 05 A6 |  if_e	mov	result1, #0
29320     04 2E 66 50 |  if_ne	shl	local05, #4
29324     17 13 02 51 |  if_ne	add	arg01, local05
29328     09 FB 01 56 |  if_ne	mov	result1, arg01
2932c     FD 30 02 F6 | 	mov	local06, result1
29330     15 31 52 F2 | 	cmps	local06, local03 wc
29334     20 00 90 3D |  if_ae	jmp	#LR__3823
29338     16 15 0A F6 | 	mov	arg02, local04 wz
2933c     00 FA 05 A6 |  if_e	mov	result1, #0
29340     14 15 82 51 |  if_ne	sub	arg02, local02
29344     04 14 46 50 |  if_ne	shr	arg02, #4
29348     0A FB 01 56 |  if_ne	mov	result1, arg02
2934c     18 15 02 F6 | 	mov	arg02, local06
29350     04 14 06 F1 | 	add	arg02, #4
29354     0A FB 51 FC | 	wrword	result1, arg02
29358                 | LR__3823
29358     13 15 02 F6 | 	mov	arg02, local01
2935c     06 14 06 F1 | 	add	arg02, #6
29360     16 FD 01 F6 | 	mov	result2, local04
29364     0A 15 E2 FA | 	rdword	arg02, arg02
29368     06 FC 05 F1 | 	add	result2, #6
2936c     FE 14 52 FC | 	wrword	arg02, result2
29370     06 26 06 F1 | 	add	local01, #6
29374     13 01 58 FC | 	wrword	#0, local01
29378     16 27 02 F6 | 	mov	local01, local04
2937c                 | LR__3824
2937c                 | LR__3825
2937c     13 13 02 F6 | 	mov	arg01, local01
29380     09 2F EA FA | 	rdword	local05, arg01 wz
29384     00 FA 05 A6 |  if_e	mov	result1, #0
29388     04 2E 66 50 |  if_ne	shl	local05, #4
2938c     17 13 02 51 |  if_ne	add	arg01, local05
29390     09 FB 01 56 |  if_ne	mov	result1, arg01
29394     FD 14 0A F6 | 	mov	arg02, result1 wz
29398     B8 00 90 AD |  if_e	jmp	#LR__3827
2939c     15 15 52 F2 | 	cmps	arg02, local03 wc
293a0     B0 00 90 3D |  if_ae	jmp	#LR__3827
293a4     0A 13 02 F6 | 	mov	arg01, arg02
293a8     00 FA 05 F6 | 	mov	result1, #0
293ac     02 12 06 F1 | 	add	arg01, #2
293b0     09 13 E2 FA | 	rdword	arg01, arg01
293b4     36 00 00 FF 
293b8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
293bc     01 FA 65 A6 |  if_e	neg	result1, #1
293c0     00 FA 0D F2 | 	cmp	result1, #0 wz
293c4     8C 00 90 AD |  if_e	jmp	#LR__3827
293c8     13 2D 02 F6 | 	mov	local04, local01
293cc     16 31 E2 FA | 	rdword	local06, local04
293d0     0A 13 02 F6 | 	mov	arg01, arg02
293d4     09 27 E2 FA | 	rdword	local01, arg01
293d8     13 31 02 F1 | 	add	local06, local01
293dc     16 31 52 FC | 	wrword	local06, local04
293e0     09 31 02 F6 | 	mov	local06, arg01
293e4     06 30 06 F1 | 	add	local06, #6
293e8     16 27 02 F6 | 	mov	local01, local04
293ec     18 31 E2 FA | 	rdword	local06, local06
293f0     06 26 06 F1 | 	add	local01, #6
293f4     13 31 52 FC | 	wrword	local06, local01
293f8     09 31 02 F6 | 	mov	local06, arg01
293fc     02 30 06 F1 | 	add	local06, #2
29400     18 55 59 FC | 	wrword	#170, local06
29404     09 31 02 F6 | 	mov	local06, arg01
29408     06 30 06 F1 | 	add	local06, #6
2940c     18 01 58 FC | 	wrword	#0, local06
29410     09 2F EA FA | 	rdword	local05, arg01 wz
29414     00 FA 05 A6 |  if_e	mov	result1, #0
29418     04 2E 66 50 |  if_ne	shl	local05, #4
2941c     17 13 02 51 |  if_ne	add	arg01, local05
29420     09 FB 01 56 |  if_ne	mov	result1, arg01
29424     FD 30 0A F6 | 	mov	local06, result1 wz
29428     28 00 90 AD |  if_e	jmp	#LR__3826
2942c     15 31 52 F2 | 	cmps	local06, local03 wc
29430     20 00 90 3D |  if_ae	jmp	#LR__3826
29434     16 15 0A F6 | 	mov	arg02, local04 wz
29438     00 FA 05 A6 |  if_e	mov	result1, #0
2943c     14 15 82 51 |  if_ne	sub	arg02, local02
29440     04 14 46 50 |  if_ne	shr	arg02, #4
29444     0A FB 01 56 |  if_ne	mov	result1, arg02
29448     18 2D 02 F6 | 	mov	local04, local06
2944c     04 2C 06 F1 | 	add	local04, #4
29450     16 FB 51 FC | 	wrword	result1, local04
29454                 | LR__3826
29454                 | LR__3827
29454     18 FB 01 F6 | 	mov	result1, local06
29458     A7 F0 03 F6 | 	mov	ptra, fp
2945c     B2 00 A0 FD | 	call	#popregs_
29460                 | __system___gc_dofree_ret
29460     2D 00 64 FD | 	ret
29464                 | 
29464                 | __system___gc_docollect
29464     05 4A 05 F6 | 	mov	COUNT_, #5
29468     A8 00 A0 FD | 	call	#pushregs_
2946c     B8 F9 BF FD | 	call	#__system___gc_ptrs
29470     FE 26 02 F6 | 	mov	local01, result2
29474     FD 28 02 F6 | 	mov	local02, result1
29478     14 13 02 F6 | 	mov	arg01, local02
2947c     09 2B EA FA | 	rdword	local03, arg01 wz
29480     00 FA 05 A6 |  if_e	mov	result1, #0
29484     04 2A 66 50 |  if_ne	shl	local03, #4
29488     15 13 02 51 |  if_ne	add	arg01, local03
2948c     09 FB 01 56 |  if_ne	mov	result1, arg01
29490     FD 2C 0A F6 | 	mov	local04, result1 wz
29494     00 FA 05 F6 | 	mov	result1, #0
29498     01 FA 61 FD | 	cogid	result1
2949c     FD 2E 02 F6 | 	mov	local05, result1
294a0     48 00 90 AD |  if_e	jmp	#LR__3832
294a4     97 22 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
294a8                 | LR__3830
294a8     13 2D 52 F2 | 	cmps	local04, local01 wc
294ac     3C 00 90 3D |  if_ae	jmp	#LR__3832
294b0     16 15 02 F6 | 	mov	arg02, local04
294b4     02 14 06 F1 | 	add	arg02, #2
294b8     0A 15 E2 FA | 	rdword	arg02, arg02
294bc     20 14 26 F5 | 	andn	arg02, #32
294c0     16 13 02 F6 | 	mov	arg01, local04
294c4     02 12 06 F1 | 	add	arg01, #2
294c8     09 15 52 FC | 	wrword	arg02, arg01
294cc     16 13 02 F6 | 	mov	arg01, local04
294d0     09 2B EA FA | 	rdword	local03, arg01 wz
294d4     00 FA 05 A6 |  if_e	mov	result1, #0
294d8     04 2A 66 50 |  if_ne	shl	local03, #4
294dc     15 13 02 51 |  if_ne	add	arg01, local03
294e0     09 FB 01 56 |  if_ne	mov	result1, arg01
294e4     FD 2C 0A F6 | 	mov	local04, result1 wz
294e8     BC FF 9F 5D |  if_ne	jmp	#LR__3830
294ec                 | LR__3831
294ec                 | LR__3832
294ec     00 2A 06 F6 | 	mov	local03, #0
294f0     00 12 06 F6 | 	mov	arg01, #0
294f4     B4 B9 BF FD | 	call	#__system____topofstack
294f8     FD 14 02 F6 | 	mov	arg02, result1
294fc     15 13 02 F6 | 	mov	arg01, local03
29500     90 00 B0 FD | 	call	#__system___gc_markhub
29504     1C 01 B0 FD | 	call	#__system___gc_markcog
29508     14 13 02 F6 | 	mov	arg01, local02
2950c     09 2B EA FA | 	rdword	local03, arg01 wz
29510     00 FA 05 A6 |  if_e	mov	result1, #0
29514     04 2A 66 50 |  if_ne	shl	local03, #4
29518     15 13 02 51 |  if_ne	add	arg01, local03
2951c     09 FB 01 56 |  if_ne	mov	result1, arg01
29520     FD 28 0A F6 | 	mov	local02, result1 wz
29524     60 00 90 AD |  if_e	jmp	#LR__3836
29528                 | LR__3833
29528     14 2D 02 F6 | 	mov	local04, local02
2952c     16 13 02 F6 | 	mov	arg01, local04
29530     09 2B EA FA | 	rdword	local03, arg01 wz
29534     00 FA 05 A6 |  if_e	mov	result1, #0
29538     04 2A 66 50 |  if_ne	shl	local03, #4
2953c     15 13 02 51 |  if_ne	add	arg01, local03
29540     09 FB 01 56 |  if_ne	mov	result1, arg01
29544     FD 28 02 F6 | 	mov	local02, result1
29548     16 15 02 F6 | 	mov	arg02, local04
2954c     02 14 06 F1 | 	add	arg02, #2
29550     0A 15 E2 FA | 	rdword	arg02, arg02
29554     20 14 CE F7 | 	test	arg02, #32 wz
29558     10 14 CE A7 |  if_e	test	arg02, #16 wz
2955c     1C 00 90 5D |  if_ne	jmp	#LR__3835
29560     0A 15 42 F8 | 	getnib	arg02, arg02, #0
29564     17 15 0A F2 | 	cmp	arg02, local05 wz
29568     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2956c     0C 00 90 5D |  if_ne	jmp	#LR__3834
29570     16 13 02 F6 | 	mov	arg01, local04
29574     84 FC BF FD | 	call	#__system___gc_dofree
29578     FD 28 02 F6 | 	mov	local02, result1
2957c                 | LR__3834
2957c                 | LR__3835
2957c     00 28 0E F2 | 	cmp	local02, #0 wz
29580     13 29 52 52 |  if_ne	cmps	local02, local01 wc
29584     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3833
29588                 | LR__3836
29588     A7 F0 03 F6 | 	mov	ptra, fp
2958c     B2 00 A0 FD | 	call	#popregs_
29590                 | __system___gc_docollect_ret
29590     2D 00 64 FD | 	ret
29594                 | 
29594                 | __system___gc_markhub
29594     04 4A 05 F6 | 	mov	COUNT_, #4
29598     A8 00 A0 FD | 	call	#pushregs_
2959c     09 27 02 F6 | 	mov	local01, arg01
295a0     0A 29 02 F6 | 	mov	local02, arg02
295a4     80 F8 BF FD | 	call	#__system___gc_ptrs
295a8     FD 2A 02 F6 | 	mov	local03, result1
295ac     FE 2C 02 F6 | 	mov	local04, result2
295b0                 | LR__3840
295b0     14 27 52 F2 | 	cmps	local01, local02 wc
295b4     60 00 90 3D |  if_ae	jmp	#LR__3841
295b8     13 17 02 FB | 	rdlong	arg03, local01
295bc     04 26 06 F1 | 	add	local01, #4
295c0     16 15 02 F6 | 	mov	arg02, local04
295c4     15 13 02 F6 | 	mov	arg01, local03
295c8     8C FB BF FD | 	call	#__system___gc_isvalidptr
295cc     FD 16 0A F6 | 	mov	arg03, result1 wz
295d0     DC FF 9F AD |  if_e	jmp	#LR__3840
295d4     0B 13 02 F6 | 	mov	arg01, arg03
295d8     00 FA 05 F6 | 	mov	result1, #0
295dc     02 12 06 F1 | 	add	arg01, #2
295e0     09 13 E2 FA | 	rdword	arg01, arg01
295e4     36 00 00 FF 
295e8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
295ec     01 FA 65 A6 |  if_e	neg	result1, #1
295f0     00 FA 0D F2 | 	cmp	result1, #0 wz
295f4     B8 FF 9F 5D |  if_ne	jmp	#LR__3840
295f8     0B FD 01 F6 | 	mov	result2, arg03
295fc     02 FC 05 F1 | 	add	result2, #2
29600     FE FC E1 FA | 	rdword	result2, result2
29604     0F FC 25 F5 | 	andn	result2, #15
29608     2E FC 45 F5 | 	or	result2, #46
2960c     02 16 06 F1 | 	add	arg03, #2
29610     0B FD 51 FC | 	wrword	result2, arg03
29614     98 FF 9F FD | 	jmp	#LR__3840
29618                 | LR__3841
29618     A7 F0 03 F6 | 	mov	ptra, fp
2961c     B2 00 A0 FD | 	call	#popregs_
29620                 | __system___gc_markhub_ret
29620     2D 00 64 FD | 	ret
29624                 | 
29624                 | __system___gc_markcog
29624     04 4A 05 F6 | 	mov	COUNT_, #4
29628     A8 00 A0 FD | 	call	#pushregs_
2962c     F8 F7 BF FD | 	call	#__system___gc_ptrs
29630     FD 26 02 F6 | 	mov	local01, result1
29634     FE 28 02 F6 | 	mov	local02, result2
29638     EF 2B 06 F6 | 	mov	local03, #495
2963c                 | LR__3850
2963c                 | 	'.live	local03
2963c     00 2A 96 F9 | 	alts	local03, #0
29640     15 2D 02 F6 | 	mov	local04, local03
29644     13 13 02 F6 | 	mov	arg01, local01
29648     14 15 02 F6 | 	mov	arg02, local02
2964c     16 17 02 F6 | 	mov	arg03, local04
29650     04 FB BF FD | 	call	#__system___gc_isvalidptr
29654     00 FA 0D F2 | 	cmp	result1, #0 wz
29658     18 00 90 AD |  if_e	jmp	#LR__3851
2965c     FD 2C 02 F6 | 	mov	local04, result1
29660     02 2C 06 F1 | 	add	local04, #2
29664     16 2D E2 FA | 	rdword	local04, local04
29668     20 2C 46 F5 | 	or	local04, #32
2966c     02 FA 05 F1 | 	add	result1, #2
29670     FD 2C 52 FC | 	wrword	local04, result1
29674                 | LR__3851
29674     01 2A 86 F1 | 	sub	local03, #1
29678     00 2A 56 F2 | 	cmps	local03, #0 wc
2967c     BC FF 9F 3D |  if_ae	jmp	#LR__3850
29680     A7 F0 03 F6 | 	mov	ptra, fp
29684     B2 00 A0 FD | 	call	#popregs_
29688                 | __system___gc_markcog_ret
29688     2D 00 64 FD | 	ret
2968c                 | 
2968c                 | __system__opendir
2968c     06 4A 05 F6 | 	mov	COUNT_, #6
29690     A8 00 A0 FD | 	call	#pushregs_
29694     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29698     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2969c     09 15 02 F6 | 	mov	arg02, arg01
296a0     13 13 02 F6 | 	mov	arg01, local01
296a4     00 16 06 F6 | 	mov	arg03, #0
296a8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
296ac     BC BF BF FD | 	call	#__system____getvfsforfile
296b0     FD 28 0A F6 | 	mov	local02, result1 wz
296b4     10 00 90 AD |  if_e	jmp	#LR__3860
296b8     28 28 06 F1 | 	add	local02, #40
296bc     14 17 0A FB | 	rdlong	arg03, local02 wz
296c0     28 28 86 F1 | 	sub	local02, #40
296c4     14 00 90 5D |  if_ne	jmp	#LR__3861
296c8                 | LR__3860
296c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
296cc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
296d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
296d4     00 FA 05 F6 | 	mov	result1, #0
296d8     90 00 90 FD | 	jmp	#LR__3863
296dc                 | LR__3861
296dc     5C 12 06 F6 | 	mov	arg01, #92
296e0     10 14 06 F6 | 	mov	arg02, #16
296e4     C0 F9 BF FD | 	call	#__system___gc_doalloc
296e8     FD 2A 0A F6 | 	mov	local03, result1 wz
296ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
296f0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
296f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
296f8     00 FA 05 A6 |  if_e	mov	result1, #0
296fc     6C 00 90 AD |  if_e	jmp	#LR__3863
29700     28 28 06 F1 | 	add	local02, #40
29704     14 2D 02 FB | 	rdlong	local04, local02
29708     16 2F 02 F6 | 	mov	local05, local04
2970c     28 28 86 F1 | 	sub	local02, #40
29710     13 2E 46 F7 | 	zerox	local05, #19
29714     14 2C 46 F0 | 	shr	local04, #20
29718     02 2C 66 F0 | 	shl	local04, #2
2971c     ED 2C 02 F1 | 	add	local04, __methods__
29720     16 2D 02 FB | 	rdlong	local04, local04
29724     15 13 02 F6 | 	mov	arg01, local03
29728     13 15 02 F6 | 	mov	arg02, local01
2972c     F2 30 02 F6 | 	mov	local06, objptr
29730     17 E5 01 F6 | 	mov	objptr, local05
29734     2D 2C 62 FD | 	call	local04
29738     18 E5 01 F6 | 	mov	objptr, local06
2973c     FD 16 0A F6 | 	mov	arg03, result1 wz
29740     20 00 90 AD |  if_e	jmp	#LR__3862
29744     00 16 4E F2 | 	cmps	arg03, #0 wz
29748     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2974c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
29750     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29754     15 13 02 F6 | 	mov	arg01, local03
29758     58 FA BF FD | 	call	#__system___gc_free
2975c     00 FA 05 F6 | 	mov	result1, #0
29760     08 00 90 FD | 	jmp	#LR__3863
29764                 | LR__3862
29764     15 29 62 FC | 	wrlong	local02, local03
29768     15 FB 01 F6 | 	mov	result1, local03
2976c                 | LR__3863
2976c     A7 F0 03 F6 | 	mov	ptra, fp
29770     B2 00 A0 FD | 	call	#popregs_
29774                 | __system__opendir_ret
29774     2D 00 64 FD | 	ret
29778                 | 
29778                 | __system__closedir
29778     04 4A 05 F6 | 	mov	COUNT_, #4
2977c     A8 00 A0 FD | 	call	#pushregs_
29780     09 27 02 F6 | 	mov	local01, arg01
29784     13 13 02 FB | 	rdlong	arg01, local01
29788     2C 12 06 F1 | 	add	arg01, #44
2978c     09 29 02 FB | 	rdlong	local02, arg01
29790     14 2B 02 F6 | 	mov	local03, local02
29794     13 2A 46 F7 | 	zerox	local03, #19
29798     14 28 46 F0 | 	shr	local02, #20
2979c     02 28 66 F0 | 	shl	local02, #2
297a0     ED 28 02 F1 | 	add	local02, __methods__
297a4     14 29 02 FB | 	rdlong	local02, local02
297a8     13 13 02 F6 | 	mov	arg01, local01
297ac     F2 2C 02 F6 | 	mov	local04, objptr
297b0     15 E5 01 F6 | 	mov	objptr, local03
297b4     2D 28 62 FD | 	call	local02
297b8     16 E5 01 F6 | 	mov	objptr, local04
297bc     FD 2C 02 F6 | 	mov	local04, result1
297c0     13 13 02 F6 | 	mov	arg01, local01
297c4     EC F9 BF FD | 	call	#__system___gc_free
297c8     00 2C 4E F2 | 	cmps	local04, #0 wz
297cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
297d0     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
297d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
297d8     01 FA 65 56 |  if_ne	neg	result1, #1
297dc     00 FA 05 A6 |  if_e	mov	result1, #0
297e0     A7 F0 03 F6 | 	mov	ptra, fp
297e4     B2 00 A0 FD | 	call	#popregs_
297e8                 | __system__closedir_ret
297e8     2D 00 64 FD | 	ret
297ec                 | 
297ec                 | __system__readdir
297ec     04 4A 05 F6 | 	mov	COUNT_, #4
297f0     A8 00 A0 FD | 	call	#pushregs_
297f4     09 15 0A FB | 	rdlong	arg02, arg01 wz
297f8     08 12 06 F1 | 	add	arg01, #8
297fc     09 27 02 F6 | 	mov	local01, arg01
29800     08 12 86 F1 | 	sub	arg01, #8
29804     00 FA 05 A6 |  if_e	mov	result1, #0
29808     5C 00 90 AD |  if_e	jmp	#LR__3871
2980c     30 14 06 F1 | 	add	arg02, #48
29810     0A 29 02 FB | 	rdlong	local02, arg02
29814     14 2B 02 F6 | 	mov	local03, local02
29818     13 2A 46 F7 | 	zerox	local03, #19
2981c     14 28 46 F0 | 	shr	local02, #20
29820     02 28 66 F0 | 	shl	local02, #2
29824     ED 28 02 F1 | 	add	local02, __methods__
29828     14 29 02 FB | 	rdlong	local02, local02
2982c     13 15 02 F6 | 	mov	arg02, local01
29830     F2 2C 02 F6 | 	mov	local04, objptr
29834     15 E5 01 F6 | 	mov	objptr, local03
29838     2D 28 62 FD | 	call	local02
2983c     16 E5 01 F6 | 	mov	objptr, local04
29840     00 FA 4D F2 | 	cmps	result1, #0 wz
29844     1C 00 90 AD |  if_e	jmp	#LR__3870
29848     01 FA 55 F2 | 	cmps	result1, #1 wc
2984c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
29850     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
29854     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
29858     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2985c     00 FA 05 F6 | 	mov	result1, #0
29860     04 00 90 FD | 	jmp	#LR__3871
29864                 | LR__3870
29864     13 FB 01 F6 | 	mov	result1, local01
29868                 | LR__3871
29868     A7 F0 03 F6 | 	mov	ptra, fp
2986c     B2 00 A0 FD | 	call	#popregs_
29870                 | __system__readdir_ret
29870     2D 00 64 FD | 	ret
29874                 | 
29874                 | __system___openraw
29874     15 4A 05 F6 | 	mov	COUNT_, #21
29878     A8 00 A0 FD | 	call	#pushregs_
2987c     09 27 02 F6 | 	mov	local01, arg01
29880     0A 29 02 F6 | 	mov	local02, arg02
29884     0B 2B 02 F6 | 	mov	local03, arg03
29888     0C 2D 02 F6 | 	mov	local04, arg04
2988c     04 2E 06 F6 | 	mov	local05, #4
29890     13 31 02 F6 | 	mov	local06, local01
29894     00 32 06 F6 | 	mov	local07, #0
29898     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2989c     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
298a0     1A 13 02 F6 | 	mov	arg01, local08
298a4     14 15 02 F6 | 	mov	arg02, local02
298a8     00 16 06 F6 | 	mov	arg03, #0
298ac     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
298b0     B8 BD BF FD | 	call	#__system____getvfsforfile
298b4     FD 36 0A F6 | 	mov	local09, result1 wz
298b8     10 00 90 AD |  if_e	jmp	#LR__3880
298bc     20 36 06 F1 | 	add	local09, #32
298c0     1B FB 09 FB | 	rdlong	result1, local09 wz
298c4     20 36 86 F1 | 	sub	local09, #32
298c8     14 00 90 5D |  if_ne	jmp	#LR__3881
298cc                 | LR__3880
298cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
298d0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
298d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
298d8     01 FA 65 F6 | 	neg	result1, #1
298dc     8C 02 90 FD | 	jmp	#LR__3894
298e0                 | LR__3881
298e0     18 13 02 F6 | 	mov	arg01, local06
298e4     00 14 06 F6 | 	mov	arg02, #0
298e8     34 16 06 F6 | 	mov	arg03, #52
298ec     09 39 02 F6 | 	mov	local10, arg01
298f0     98 00 A0 FD | 	call	#\builtin_bytefill_
298f4     20 36 06 F1 | 	add	local09, #32
298f8     1B 3B 02 FB | 	rdlong	local11, local09
298fc     1D 3D 02 F6 | 	mov	local12, local11
29900     1D 3F 02 F6 | 	mov	local13, local11
29904     20 36 86 F1 | 	sub	local09, #32
29908     1F 41 02 F6 | 	mov	local14, local13
2990c     13 3C 46 F7 | 	zerox	local12, #19
29910     14 40 46 F0 | 	shr	local14, #20
29914     02 40 66 F0 | 	shl	local14, #2
29918     ED 40 02 F1 | 	add	local14, __methods__
2991c     20 41 02 FB | 	rdlong	local14, local14
29920     18 43 02 F6 | 	mov	local15, local06
29924     1A 45 02 F6 | 	mov	local16, local08
29928     15 47 02 F6 | 	mov	local17, local03
2992c     21 13 02 F6 | 	mov	arg01, local15
29930     22 15 02 F6 | 	mov	arg02, local16
29934     23 17 02 F6 | 	mov	arg03, local17
29938     F2 48 02 F6 | 	mov	local18, objptr
2993c     1E E5 01 F6 | 	mov	objptr, local12
29940     2D 40 62 FD | 	call	local14
29944     24 E5 01 F6 | 	mov	objptr, local18
29948     FD 4A 0A F6 | 	mov	local19, result1 wz
2994c     04 2A CE 57 |  if_ne	test	local03, #4 wz
29950     58 00 90 AD |  if_e	jmp	#LR__3882
29954     24 36 06 F1 | 	add	local09, #36
29958     1B 3B 02 FB | 	rdlong	local11, local09
2995c     1D 3D 02 F6 | 	mov	local12, local11
29960     1D 3F 02 F6 | 	mov	local13, local11
29964     24 36 86 F1 | 	sub	local09, #36
29968     1F 41 02 F6 | 	mov	local14, local13
2996c     13 3C 46 F7 | 	zerox	local12, #19
29970     14 40 46 F0 | 	shr	local14, #20
29974     02 40 66 F0 | 	shl	local14, #2
29978     ED 40 02 F1 | 	add	local14, __methods__
2997c     20 41 02 FB | 	rdlong	local14, local14
29980     18 43 02 F6 | 	mov	local15, local06
29984     1A 45 02 F6 | 	mov	local16, local08
29988     16 47 02 F6 | 	mov	local17, local04
2998c     21 13 02 F6 | 	mov	arg01, local15
29990     22 15 02 F6 | 	mov	arg02, local16
29994     23 17 02 F6 | 	mov	arg03, local17
29998     F2 48 02 F6 | 	mov	local18, objptr
2999c     1E E5 01 F6 | 	mov	objptr, local12
299a0     2D 40 62 FD | 	call	local14
299a4     24 E5 01 F6 | 	mov	objptr, local18
299a8     FD 4A 02 F6 | 	mov	local19, result1
299ac                 | LR__3882
299ac     00 4A 0E F2 | 	cmp	local19, #0 wz
299b0     8C 01 90 5D |  if_ne	jmp	#LR__3892
299b4     15 4D 02 F6 | 	mov	local20, local03
299b8     03 4C 0E F5 | 	and	local20, #3 wz
299bc     02 2E 46 55 |  if_ne	or	local05, #2
299c0     01 4C 0E F2 | 	cmp	local20, #1 wz
299c4     01 2E 46 55 |  if_ne	or	local05, #1
299c8     20 2A CE F7 | 	test	local03, #32 wz
299cc     C0 2E 46 55 |  if_ne	or	local05, #192
299d0     08 30 06 F1 | 	add	local06, #8
299d4     18 2F 62 FC | 	wrlong	local05, local06
299d8     0C 30 06 F1 | 	add	local06, #12
299dc     18 4F 0A FB | 	rdlong	local21, local06 wz
299e0     14 30 86 F1 | 	sub	local06, #20
299e4     18 00 90 5D |  if_ne	jmp	#LR__3883
299e8     04 36 06 F1 | 	add	local09, #4
299ec     1B 4F 02 FB | 	rdlong	local21, local09
299f0     04 36 86 F1 | 	sub	local09, #4
299f4     14 30 06 F1 | 	add	local06, #20
299f8     18 4F 62 FC | 	wrlong	local21, local06
299fc     14 30 86 F1 | 	sub	local06, #20
29a00                 | LR__3883
29a00     18 30 06 F1 | 	add	local06, #24
29a04     18 4F 0A FB | 	rdlong	local21, local06 wz
29a08     18 30 86 F1 | 	sub	local06, #24
29a0c     18 00 90 5D |  if_ne	jmp	#LR__3884
29a10     08 36 06 F1 | 	add	local09, #8
29a14     1B 4F 02 FB | 	rdlong	local21, local09
29a18     08 36 86 F1 | 	sub	local09, #8
29a1c     18 30 06 F1 | 	add	local06, #24
29a20     18 4F 62 FC | 	wrlong	local21, local06
29a24     18 30 86 F1 | 	sub	local06, #24
29a28                 | LR__3884
29a28     24 30 06 F1 | 	add	local06, #36
29a2c     18 4F 0A FB | 	rdlong	local21, local06 wz
29a30     24 30 86 F1 | 	sub	local06, #36
29a34     1B 4F 02 AB |  if_e	rdlong	local21, local09
29a38     24 30 06 A1 |  if_e	add	local06, #36
29a3c     18 4F 62 AC |  if_e	wrlong	local21, local06
29a40     24 30 86 A1 |  if_e	sub	local06, #36
29a44     28 30 06 F1 | 	add	local06, #40
29a48     18 4F 0A FB | 	rdlong	local21, local06 wz
29a4c     28 30 86 F1 | 	sub	local06, #40
29a50     18 00 90 5D |  if_ne	jmp	#LR__3885
29a54     10 36 06 F1 | 	add	local09, #16
29a58     1B 4F 02 FB | 	rdlong	local21, local09
29a5c     10 36 86 F1 | 	sub	local09, #16
29a60     28 30 06 F1 | 	add	local06, #40
29a64     18 4F 62 FC | 	wrlong	local21, local06
29a68     28 30 86 F1 | 	sub	local06, #40
29a6c                 | LR__3885
29a6c     30 30 06 F1 | 	add	local06, #48
29a70     18 4F 0A FB | 	rdlong	local21, local06 wz
29a74     30 30 86 F1 | 	sub	local06, #48
29a78     18 00 90 5D |  if_ne	jmp	#LR__3886
29a7c     0C 36 06 F1 | 	add	local09, #12
29a80     1B 4F 02 FB | 	rdlong	local21, local09
29a84     0C 36 86 F1 | 	sub	local09, #12
29a88     30 30 06 F1 | 	add	local06, #48
29a8c     18 4F 62 FC | 	wrlong	local21, local06
29a90     30 30 86 F1 | 	sub	local06, #48
29a94                 | LR__3886
29a94     1C 30 06 F1 | 	add	local06, #28
29a98     18 4F 0A FB | 	rdlong	local21, local06 wz
29a9c     1C 30 86 F1 | 	sub	local06, #28
29aa0     1C 00 90 5D |  if_ne	jmp	#LR__3887
29aa4     01 32 06 F6 | 	mov	local07, #1
29aa8     F2 12 02 F6 | 	mov	arg01, objptr
29aac     00 18 05 FF 
29ab0     00 12 46 F5 | 	or	arg01, ##170917888
29ab4     1C 30 06 F1 | 	add	local06, #28
29ab8     18 13 62 FC | 	wrlong	arg01, local06
29abc     1C 30 86 F1 | 	sub	local06, #28
29ac0                 | LR__3887
29ac0     20 30 06 F1 | 	add	local06, #32
29ac4     18 4F 0A FB | 	rdlong	local21, local06 wz
29ac8     20 30 86 F1 | 	sub	local06, #32
29acc     1C 00 90 5D |  if_ne	jmp	#LR__3888
29ad0     01 32 06 F6 | 	mov	local07, #1
29ad4     F2 12 02 F6 | 	mov	arg01, objptr
29ad8     00 20 05 FF 
29adc     00 12 46 F5 | 	or	arg01, ##171966464
29ae0     20 30 06 F1 | 	add	local06, #32
29ae4     18 13 62 FC | 	wrlong	arg01, local06
29ae8     20 30 86 F1 | 	sub	local06, #32
29aec                 | LR__3888
29aec     2C 30 06 F1 | 	add	local06, #44
29af0     18 4F 0A FB | 	rdlong	local21, local06 wz
29af4     2C 30 86 F1 | 	sub	local06, #44
29af8     44 00 90 5D |  if_ne	jmp	#LR__3891
29afc     14 36 06 F1 | 	add	local09, #20
29b00     1B 4F 0A FB | 	rdlong	local21, local09 wz
29b04     14 36 86 F1 | 	sub	local09, #20
29b08     18 00 90 AD |  if_e	jmp	#LR__3889
29b0c     14 36 06 F1 | 	add	local09, #20
29b10     1B 4F 02 FB | 	rdlong	local21, local09
29b14     2C 30 06 F1 | 	add	local06, #44
29b18     18 4F 62 FC | 	wrlong	local21, local06
29b1c     2C 30 86 F1 | 	sub	local06, #44
29b20     1C 00 90 FD | 	jmp	#LR__3890
29b24                 | LR__3889
29b24     01 32 06 F6 | 	mov	local07, #1
29b28     F2 12 02 F6 | 	mov	arg01, objptr
29b2c     00 28 05 FF 
29b30     00 12 46 F5 | 	or	arg01, ##173015040
29b34     2C 30 06 F1 | 	add	local06, #44
29b38     18 13 62 FC | 	wrlong	arg01, local06
29b3c     2C 30 86 F1 | 	sub	local06, #44
29b40                 | LR__3890
29b40                 | LR__3891
29b40                 | LR__3892
29b40     00 32 0E F2 | 	cmp	local07, #0 wz
29b44     18 13 02 56 |  if_ne	mov	arg01, local06
29b48     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
29b4c     00 4A 0E F2 | 	cmp	local19, #0 wz
29b50     00 12 06 A6 |  if_e	mov	arg01, #0
29b54     10 00 90 5D |  if_ne	jmp	#LR__3893
29b58     00 12 4E F2 | 	cmps	arg01, #0 wz
29b5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29b60     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29b64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29b68                 | LR__3893
29b68     25 FB 01 F6 | 	mov	result1, local19
29b6c                 | LR__3894
29b6c     A7 F0 03 F6 | 	mov	ptra, fp
29b70     B2 00 A0 FD | 	call	#popregs_
29b74                 | __system___openraw_ret
29b74     2D 00 64 FD | 	ret
29b78                 | 
29b78                 | __system___closeraw
29b78     05 4A 05 F6 | 	mov	COUNT_, #5
29b7c     A8 00 A0 FD | 	call	#pushregs_
29b80     09 27 02 F6 | 	mov	local01, arg01
29b84     00 28 06 F6 | 	mov	local02, #0
29b88     08 26 06 F1 | 	add	local01, #8
29b8c     13 FB 09 FB | 	rdlong	result1, local01 wz
29b90     08 26 86 F1 | 	sub	local01, #8
29b94     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29b98     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
29b9c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29ba0     01 FA 65 A6 |  if_e	neg	result1, #1
29ba4     A8 00 90 AD |  if_e	jmp	#LR__3902
29ba8     2C 26 06 F1 | 	add	local01, #44
29bac     13 FB 09 FB | 	rdlong	result1, local01 wz
29bb0     2C 26 86 F1 | 	sub	local01, #44
29bb4     38 00 90 AD |  if_e	jmp	#LR__3900
29bb8     2C 26 06 F1 | 	add	local01, #44
29bbc     13 2B 02 FB | 	rdlong	local03, local01
29bc0     15 2D 02 F6 | 	mov	local04, local03
29bc4     2C 26 86 F1 | 	sub	local01, #44
29bc8     13 2C 46 F7 | 	zerox	local04, #19
29bcc     14 2A 46 F0 | 	shr	local03, #20
29bd0     02 2A 66 F0 | 	shl	local03, #2
29bd4     ED 2A 02 F1 | 	add	local03, __methods__
29bd8     15 2B 02 FB | 	rdlong	local03, local03
29bdc     13 13 02 F6 | 	mov	arg01, local01
29be0     F2 2E 02 F6 | 	mov	local05, objptr
29be4     16 E5 01 F6 | 	mov	objptr, local04
29be8     2D 2A 62 FD | 	call	local03
29bec     17 E5 01 F6 | 	mov	objptr, local05
29bf0                 | LR__3900
29bf0     24 26 06 F1 | 	add	local01, #36
29bf4     13 2F 0A FB | 	rdlong	local05, local01 wz
29bf8     24 26 86 F1 | 	sub	local01, #36
29bfc     3C 00 90 AD |  if_e	jmp	#LR__3901
29c00     24 26 06 F1 | 	add	local01, #36
29c04     13 2B 02 FB | 	rdlong	local03, local01
29c08     15 2D 02 F6 | 	mov	local04, local03
29c0c     24 26 86 F1 | 	sub	local01, #36
29c10     13 2C 46 F7 | 	zerox	local04, #19
29c14     14 2A 46 F0 | 	shr	local03, #20
29c18     02 2A 66 F0 | 	shl	local03, #2
29c1c     ED 2A 02 F1 | 	add	local03, __methods__
29c20     15 2B 02 FB | 	rdlong	local03, local03
29c24     13 13 02 F6 | 	mov	arg01, local01
29c28     F2 2E 02 F6 | 	mov	local05, objptr
29c2c     16 E5 01 F6 | 	mov	objptr, local04
29c30     2D 2A 62 FD | 	call	local03
29c34     17 E5 01 F6 | 	mov	objptr, local05
29c38     FD 28 02 F6 | 	mov	local02, result1
29c3c                 | LR__3901
29c3c     13 13 02 F6 | 	mov	arg01, local01
29c40     00 14 06 F6 | 	mov	arg02, #0
29c44     34 16 06 F6 | 	mov	arg03, #52
29c48     98 00 A0 FD | 	call	#\builtin_bytefill_
29c4c     14 FB 01 F6 | 	mov	result1, local02
29c50                 | LR__3902
29c50     A7 F0 03 F6 | 	mov	ptra, fp
29c54     B2 00 A0 FD | 	call	#popregs_
29c58                 | __system___closeraw_ret
29c58     2D 00 64 FD | 	ret
29c5c                 | 
29c5c                 | __system___vfs_open_sdcardx
29c5c     0B 4A 05 F6 | 	mov	COUNT_, #11
29c60     A8 00 A0 FD | 	call	#pushregs_
29c64     09 2B 02 F6 | 	mov	local03, arg01
29c68     0A 2D 02 F6 | 	mov	local04, arg02
29c6c     0B 2F 02 F6 | 	mov	local05, arg03
29c70     0C 31 02 F6 | 	mov	local06, arg04
29c74     01 00 00 FF 
29c78     24 12 06 F6 | 	mov	arg01, ##548
29c7c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
29c80     FD 32 02 F6 | 	mov	local07, result1
29c84     01 00 00 FF 
29c88     34 12 06 F6 | 	mov	arg01, ##564
29c8c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
29c90     FD 34 02 F6 | 	mov	local08, result1
29c94     15 19 02 F6 | 	mov	arg04, local03
29c98     1F 18 C6 F0 | 	sar	arg04, #31
29c9c     15 17 02 F6 | 	mov	arg03, local03
29ca0     01 12 06 F6 | 	mov	arg01, #1
29ca4     00 14 06 F6 | 	mov	arg02, #0
29ca8     EC DB BF FD | 	call	#__system___int64_shl
29cac     FD 26 02 F6 | 	mov	local01, result1
29cb0     FE 36 02 F6 | 	mov	local09, result2
29cb4     16 19 02 F6 | 	mov	arg04, local04
29cb8     1F 18 C6 F0 | 	sar	arg04, #31
29cbc     16 17 02 F6 | 	mov	arg03, local04
29cc0     01 12 06 F6 | 	mov	arg01, #1
29cc4     00 14 06 F6 | 	mov	arg02, #0
29cc8     CC DB BF FD | 	call	#__system___int64_shl
29ccc     FD 26 42 F5 | 	or	local01, result1
29cd0     FE 36 42 F5 | 	or	local09, result2
29cd4     17 19 02 F6 | 	mov	arg04, local05
29cd8     1F 18 C6 F0 | 	sar	arg04, #31
29cdc     17 17 02 F6 | 	mov	arg03, local05
29ce0     01 12 06 F6 | 	mov	arg01, #1
29ce4     00 14 06 F6 | 	mov	arg02, #0
29ce8     AC DB BF FD | 	call	#__system___int64_shl
29cec     FD 26 42 F5 | 	or	local01, result1
29cf0     FE 36 42 F5 | 	or	local09, result2
29cf4     18 19 02 F6 | 	mov	arg04, local06
29cf8     1F 18 C6 F0 | 	sar	arg04, #31
29cfc     18 17 02 F6 | 	mov	arg03, local06
29d00     01 12 06 F6 | 	mov	arg01, #1
29d04     00 14 06 F6 | 	mov	arg02, #0
29d08     8C DB BF FD | 	call	#__system___int64_shl
29d0c     1B 15 02 F6 | 	mov	arg02, local09
29d10     FD 26 42 F5 | 	or	local01, result1
29d14     0A FD 41 F5 | 	or	result2, arg02
29d18     FE 28 02 F6 | 	mov	local02, result2
29d1c     13 13 02 F6 | 	mov	arg01, local01
29d20     14 15 02 F6 | 	mov	arg02, local02
29d24     A8 DB BF FD | 	call	#__system___usepins
29d28     00 FA 0D F2 | 	cmp	result1, #0 wz
29d2c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29d30     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
29d34     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29d38     00 FA 05 A6 |  if_e	mov	result1, #0
29d3c     B4 00 90 AD |  if_e	jmp	#LR__3912
29d40     13 39 02 F6 | 	mov	local10, local01
29d44     14 37 02 F6 | 	mov	local09, local02
29d48     01 00 00 FF 
29d4c     08 32 06 F1 | 	add	local07, ##520
29d50     19 39 62 FC | 	wrlong	local10, local07
29d54     04 32 06 F1 | 	add	local07, #4
29d58     19 37 62 FC | 	wrlong	local09, local07
29d5c     01 00 00 FF 
29d60     0C 32 86 F1 | 	sub	local07, ##524
29d64     18 1B 02 F6 | 	mov	arg05, local06
29d68     00 12 06 F6 | 	mov	arg01, #0
29d6c     15 15 02 F6 | 	mov	arg02, local03
29d70     16 17 02 F6 | 	mov	arg03, local04
29d74     17 19 02 F6 | 	mov	arg04, local05
29d78     F2 38 02 F6 | 	mov	local10, objptr
29d7c     19 E5 01 F6 | 	mov	objptr, local07
29d80     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
29d84     1C E5 01 F6 | 	mov	objptr, local10
29d88     FD 3A 0A F6 | 	mov	local11, result1 wz
29d8c     24 00 90 5D |  if_ne	jmp	#LR__3910
29d90     A5 01 00 FF 
29d94     4E 14 06 F6 | 	mov	arg02, ##@LR__5327
29d98     1A 13 02 F6 | 	mov	arg01, local08
29d9c     00 16 06 F6 | 	mov	arg03, #0
29da0     F2 3A 02 F6 | 	mov	local11, objptr
29da4     19 E5 01 F6 | 	mov	objptr, local07
29da8     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
29dac     1D E5 01 F6 | 	mov	objptr, local11
29db0     FD 3A 02 F6 | 	mov	local11, result1
29db4                 | LR__3910
29db4     00 3A 0E F2 | 	cmp	local11, #0 wz
29db8     24 00 90 AD |  if_e	jmp	#LR__3911
29dbc     13 13 02 F6 | 	mov	arg01, local01
29dc0     14 15 02 F6 | 	mov	arg02, local02
29dc4     5C DB BF FD | 	call	#__system___freepins
29dc8     1D 13 6A F6 | 	neg	arg01, local11 wz
29dcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29dd0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29dd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29dd8     00 FA 05 F6 | 	mov	result1, #0
29ddc     14 00 90 FD | 	jmp	#LR__3912
29de0                 | LR__3911
29de0     19 13 02 F6 | 	mov	arg01, local07
29de4     F2 3A 02 F6 | 	mov	local11, objptr
29de8     19 E5 01 F6 | 	mov	objptr, local07
29dec     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
29df0     1D E5 01 F6 | 	mov	objptr, local11
29df4                 | LR__3912
29df4     A7 F0 03 F6 | 	mov	ptra, fp
29df8     B2 00 A0 FD | 	call	#popregs_
29dfc                 | __system___vfs_open_sdcardx_ret
29dfc     2D 00 64 FD | 	ret
29e00                 | 
29e00                 | __system____default_getc
29e00     03 4A 05 F6 | 	mov	COUNT_, #3
29e04     A8 00 A0 FD | 	call	#pushregs_
29e08     09 27 02 F6 | 	mov	local01, arg01
29e0c     13 29 02 FB | 	rdlong	local02, local01
29e10     08 28 06 F1 | 	add	local02, #8
29e14     14 2B 02 FB | 	rdlong	local03, local02
29e18     02 2A CE F7 | 	test	local03, #2 wz
29e1c     13 13 02 56 |  if_ne	mov	arg01, local01
29e20     00 01 B0 5D |  if_ne	call	#__system____default_flush
29e24     14 2B 02 FB | 	rdlong	local03, local02
29e28     01 2A 46 F5 | 	or	local03, #1
29e2c     14 2B 62 FC | 	wrlong	local03, local02
29e30     08 28 86 F1 | 	sub	local02, #8
29e34     14 2B 0A FB | 	rdlong	local03, local02 wz
29e38     0C 00 90 5D |  if_ne	jmp	#LR__3920
29e3c     13 13 02 F6 | 	mov	arg01, local01
29e40     68 18 B0 FD | 	call	#__system____default_filbuf
29e44     FD 2A 02 F6 | 	mov	local03, result1
29e48                 | LR__3920
29e48     01 2A 56 F2 | 	cmps	local03, #1 wc
29e4c     01 FA 65 C6 |  if_b	neg	result1, #1
29e50     1C 00 90 CD |  if_b	jmp	#LR__3921
29e54     01 2A 86 F1 | 	sub	local03, #1
29e58     14 2B 62 FC | 	wrlong	local03, local02
29e5c     04 28 06 F1 | 	add	local02, #4
29e60     14 2B 02 FB | 	rdlong	local03, local02
29e64     15 FB C1 FA | 	rdbyte	result1, local03
29e68     01 2A 06 F1 | 	add	local03, #1
29e6c     14 2B 62 FC | 	wrlong	local03, local02
29e70                 | LR__3921
29e70     A7 F0 03 F6 | 	mov	ptra, fp
29e74     B2 00 A0 FD | 	call	#popregs_
29e78                 | __system____default_getc_ret
29e78     2D 00 64 FD | 	ret
29e7c                 | 
29e7c                 | __system____default_putc
29e7c     06 4A 05 F6 | 	mov	COUNT_, #6
29e80     A8 00 A0 FD | 	call	#pushregs_
29e84     09 27 02 F6 | 	mov	local01, arg01
29e88     0A 29 02 F6 | 	mov	local02, arg02
29e8c     14 2B 02 FB | 	rdlong	local03, local02
29e90     08 2A 06 F1 | 	add	local03, #8
29e94     15 FB 01 FB | 	rdlong	result1, local03
29e98     01 FA CD F7 | 	test	result1, #1 wz
29e9c     14 13 02 56 |  if_ne	mov	arg01, local02
29ea0     80 00 B0 5D |  if_ne	call	#__system____default_flush
29ea4     15 2D 02 FB | 	rdlong	local04, local03
29ea8     02 2C 46 F5 | 	or	local04, #2
29eac     15 2D 62 FC | 	wrlong	local04, local03
29eb0     08 2A 86 F1 | 	sub	local03, #8
29eb4     15 2F 02 FB | 	rdlong	local05, local03
29eb8     10 2A 06 F1 | 	add	local03, #16
29ebc     15 15 02 FB | 	rdlong	arg02, local03
29ec0     10 2A 86 F1 | 	sub	local03, #16
29ec4     17 FB 01 F6 | 	mov	result1, local05
29ec8     0A FB 01 F1 | 	add	result1, arg02
29ecc     FD 26 42 FC | 	wrbyte	local01, result1
29ed0     13 27 E2 F8 | 	getbyte	local01, local01, #0
29ed4     01 2E 06 F1 | 	add	local05, #1
29ed8     15 2F 62 FC | 	wrlong	local05, local03
29edc     06 28 06 F1 | 	add	local02, #6
29ee0     14 31 EA FA | 	rdword	local06, local02 wz
29ee4     06 28 86 F1 | 	sub	local02, #6
29ee8     0C 2A 06 51 |  if_ne	add	local03, #12
29eec     15 2D 02 5B |  if_ne	rdlong	local04, local03
29ef0     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
29ef4     0C 00 90 AD |  if_e	jmp	#LR__3930
29ef8     0A 26 0E F2 | 	cmp	local01, #10 wz
29efc     01 30 0E A2 |  if_e	cmp	local06, #1 wz
29f00     10 00 90 5D |  if_ne	jmp	#LR__3931
29f04                 | LR__3930
29f04     14 13 02 F6 | 	mov	arg01, local02
29f08     18 00 B0 FD | 	call	#__system____default_flush
29f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
29f10     01 26 66 56 |  if_ne	neg	local01, #1
29f14                 | LR__3931
29f14     13 FB 01 F6 | 	mov	result1, local01
29f18     A7 F0 03 F6 | 	mov	ptra, fp
29f1c     B2 00 A0 FD | 	call	#popregs_
29f20                 | __system____default_putc_ret
29f20     2D 00 64 FD | 	ret
29f24                 | 
29f24                 | __system____default_flush
29f24     06 4A 05 F6 | 	mov	COUNT_, #6
29f28     A8 00 A0 FD | 	call	#pushregs_
29f2c     09 27 02 F6 | 	mov	local01, arg01
29f30     13 29 02 FB | 	rdlong	local02, local01
29f34     14 2B 02 FB | 	rdlong	local03, local02
29f38     08 28 06 F1 | 	add	local02, #8
29f3c     14 FB 01 FB | 	rdlong	result1, local02
29f40     08 28 86 F1 | 	sub	local02, #8
29f44     02 FA CD F7 | 	test	result1, #2 wz
29f48     D0 00 90 AD |  if_e	jmp	#LR__3942
29f4c     01 2A 56 F2 | 	cmps	local03, #1 wc
29f50     20 01 90 CD |  if_b	jmp	#LR__3944
29f54     08 26 06 F1 | 	add	local01, #8
29f58     13 FB 01 FB | 	rdlong	result1, local01
29f5c     08 26 86 F1 | 	sub	local01, #8
29f60     40 FA CD F7 | 	test	result1, #64 wz
29f64     68 00 90 AD |  if_e	jmp	#LR__3941
29f68     08 26 06 F1 | 	add	local01, #8
29f6c     13 17 02 FB | 	rdlong	arg03, local01
29f70     08 26 86 F1 | 	sub	local01, #8
29f74     80 16 CE F7 | 	test	arg03, #128 wz
29f78     54 00 90 AD |  if_e	jmp	#LR__3940
29f7c     30 26 06 F1 | 	add	local01, #48
29f80     13 2D 02 FB | 	rdlong	local04, local01
29f84     16 2F 02 F6 | 	mov	local05, local04
29f88     30 26 86 F1 | 	sub	local01, #48
29f8c     13 2E 46 F7 | 	zerox	local05, #19
29f90     14 2C 46 F0 | 	shr	local04, #20
29f94     02 2C 66 F0 | 	shl	local04, #2
29f98     ED 2C 02 F1 | 	add	local04, __methods__
29f9c     16 2D 02 FB | 	rdlong	local04, local04
29fa0     13 13 02 F6 | 	mov	arg01, local01
29fa4     00 14 06 F6 | 	mov	arg02, #0
29fa8     02 16 06 F6 | 	mov	arg03, #2
29fac     F2 30 02 F6 | 	mov	local06, objptr
29fb0     17 E5 01 F6 | 	mov	objptr, local05
29fb4     2D 2C 62 FD | 	call	local04
29fb8     18 E5 01 F6 | 	mov	objptr, local06
29fbc     08 26 06 F1 | 	add	local01, #8
29fc0     13 31 02 FB | 	rdlong	local06, local01
29fc4     80 30 26 F5 | 	andn	local06, #128
29fc8     13 31 62 FC | 	wrlong	local06, local01
29fcc     08 26 86 F1 | 	sub	local01, #8
29fd0                 | LR__3940
29fd0                 | LR__3941
29fd0     18 26 06 F1 | 	add	local01, #24
29fd4     13 2D 02 FB | 	rdlong	local04, local01
29fd8     16 2F 02 F6 | 	mov	local05, local04
29fdc     18 26 86 F1 | 	sub	local01, #24
29fe0     13 2E 46 F7 | 	zerox	local05, #19
29fe4     14 2C 46 F0 | 	shr	local04, #20
29fe8     02 2C 66 F0 | 	shl	local04, #2
29fec     ED 2C 02 F1 | 	add	local04, __methods__
29ff0     16 2D 02 FB | 	rdlong	local04, local04
29ff4     10 28 06 F1 | 	add	local02, #16
29ff8     14 15 02 FB | 	rdlong	arg02, local02
29ffc     10 28 86 F1 | 	sub	local02, #16
2a000     13 13 02 F6 | 	mov	arg01, local01
2a004     15 17 02 F6 | 	mov	arg03, local03
2a008     F2 30 02 F6 | 	mov	local06, objptr
2a00c     17 E5 01 F6 | 	mov	objptr, local05
2a010     2D 2C 62 FD | 	call	local04
2a014     18 E5 01 F6 | 	mov	objptr, local06
2a018     58 00 90 FD | 	jmp	#LR__3944
2a01c                 | LR__3942
2a01c     08 28 06 F1 | 	add	local02, #8
2a020     14 31 02 FB | 	rdlong	local06, local02
2a024     08 28 86 F1 | 	sub	local02, #8
2a028     01 30 CE F7 | 	test	local06, #1 wz
2a02c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2a030     40 00 90 AD |  if_e	jmp	#LR__3943
2a034     30 26 06 F1 | 	add	local01, #48
2a038     13 2D 02 FB | 	rdlong	local04, local01
2a03c     16 2F 02 F6 | 	mov	local05, local04
2a040     30 26 86 F1 | 	sub	local01, #48
2a044     13 2E 46 F7 | 	zerox	local05, #19
2a048     14 2C 46 F0 | 	shr	local04, #20
2a04c     02 2C 66 F0 | 	shl	local04, #2
2a050     ED 2C 02 F1 | 	add	local04, __methods__
2a054     16 2D 02 FB | 	rdlong	local04, local04
2a058     13 13 02 F6 | 	mov	arg01, local01
2a05c     15 15 62 F6 | 	neg	arg02, local03
2a060     01 16 06 F6 | 	mov	arg03, #1
2a064     F2 30 02 F6 | 	mov	local06, objptr
2a068     17 E5 01 F6 | 	mov	objptr, local05
2a06c     2D 2C 62 FD | 	call	local04
2a070     18 E5 01 F6 | 	mov	objptr, local06
2a074                 | LR__3943
2a074                 | LR__3944
2a074     14 01 68 FC | 	wrlong	#0, local02
2a078     04 28 06 F1 | 	add	local02, #4
2a07c     14 01 68 FC | 	wrlong	#0, local02
2a080     04 28 06 F1 | 	add	local02, #4
2a084     14 01 68 FC | 	wrlong	#0, local02
2a088     00 FA 05 F6 | 	mov	result1, #0
2a08c     A7 F0 03 F6 | 	mov	ptra, fp
2a090     B2 00 A0 FD | 	call	#popregs_
2a094                 | __system____default_flush_ret
2a094     2D 00 64 FD | 	ret
2a098                 | 
2a098                 | __system____default_buffer_init
2a098     02 4A 05 F6 | 	mov	COUNT_, #2
2a09c     A8 00 A0 FD | 	call	#pushregs_
2a0a0     09 27 02 F6 | 	mov	local01, arg01
2a0a4     13 29 02 FB | 	rdlong	local02, local01
2a0a8     13 13 02 F6 | 	mov	arg01, local01
2a0ac     34 03 B0 FD | 	call	#__system___isatty
2a0b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0b4     06 26 06 51 |  if_ne	add	local01, #6
2a0b8     13 0B 58 5C |  if_ne	wrword	#5, local01
2a0bc     06 26 06 A1 |  if_e	add	local01, #6
2a0c0     13 0D 58 AC |  if_e	wrword	#6, local01
2a0c4     14 28 06 F1 | 	add	local02, #20
2a0c8     14 27 02 F6 | 	mov	local01, local02
2a0cc     04 28 86 F1 | 	sub	local02, #4
2a0d0     14 27 62 FC | 	wrlong	local01, local02
2a0d4     04 28 86 F1 | 	sub	local02, #4
2a0d8     02 00 80 FF 
2a0dc     14 01 68 FC | 	wrlong	##1024, local02
2a0e0     00 FA 05 F6 | 	mov	result1, #0
2a0e4     A7 F0 03 F6 | 	mov	ptra, fp
2a0e8     B2 00 A0 FD | 	call	#popregs_
2a0ec                 | __system____default_buffer_init_ret
2a0ec     2D 00 64 FD | 	ret
2a0f0                 | 
2a0f0                 | __system__stat
2a0f0     04 4A 05 F6 | 	mov	COUNT_, #4
2a0f4     A8 00 A0 FD | 	call	#pushregs_
2a0f8     0A 27 02 F6 | 	mov	local01, arg02
2a0fc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a100     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2a104     09 15 02 F6 | 	mov	arg02, arg01
2a108     14 13 02 F6 | 	mov	arg01, local02
2a10c     00 16 06 F6 | 	mov	arg03, #0
2a110     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a114     54 B5 BF FD | 	call	#__system____getvfsforfile
2a118     FD 2A 0A F6 | 	mov	local03, result1 wz
2a11c     10 00 90 AD |  if_e	jmp	#LR__3950
2a120     34 2A 06 F1 | 	add	local03, #52
2a124     15 17 0A FB | 	rdlong	arg03, local03 wz
2a128     34 2A 86 F1 | 	sub	local03, #52
2a12c     14 00 90 5D |  if_ne	jmp	#LR__3951
2a130                 | LR__3950
2a130     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a134     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a138     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a13c     01 FA 65 F6 | 	neg	result1, #1
2a140     68 00 90 FD | 	jmp	#LR__3952
2a144                 | LR__3951
2a144     13 13 02 F6 | 	mov	arg01, local01
2a148     00 14 06 F6 | 	mov	arg02, #0
2a14c     30 16 06 F6 | 	mov	arg03, #48
2a150     09 2D 02 F6 | 	mov	local04, arg01
2a154     98 00 A0 FD | 	call	#\builtin_bytefill_
2a158     16 FB 01 F6 | 	mov	result1, local04
2a15c     14 13 CA FA | 	rdbyte	arg01, local02 wz
2a160     08 26 06 A1 |  if_e	add	local01, #8
2a164     08 00 80 AF 
2a168     13 FF 6B AC |  if_e	wrlong	##4607, local01
2a16c     00 FA 05 A6 |  if_e	mov	result1, #0
2a170     38 00 90 AD |  if_e	jmp	#LR__3952
2a174     34 2A 06 F1 | 	add	local03, #52
2a178     15 2B 02 FB | 	rdlong	local03, local03
2a17c     15 2D 02 F6 | 	mov	local04, local03
2a180     13 2A 46 F7 | 	zerox	local03, #19
2a184     14 2C 46 F0 | 	shr	local04, #20
2a188     02 2C 66 F0 | 	shl	local04, #2
2a18c     ED 2C 02 F1 | 	add	local04, __methods__
2a190     16 2D 02 FB | 	rdlong	local04, local04
2a194     14 13 02 F6 | 	mov	arg01, local02
2a198     13 15 02 F6 | 	mov	arg02, local01
2a19c     F2 28 02 F6 | 	mov	local02, objptr
2a1a0     15 E5 01 F6 | 	mov	objptr, local03
2a1a4     2D 2C 62 FD | 	call	local04
2a1a8     14 E5 01 F6 | 	mov	objptr, local02
2a1ac                 | LR__3952
2a1ac     A7 F0 03 F6 | 	mov	ptra, fp
2a1b0     B2 00 A0 FD | 	call	#popregs_
2a1b4                 | __system__stat_ret
2a1b4     2D 00 64 FD | 	ret
2a1b8                 | 
2a1b8                 | __system__write
2a1b8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a1bc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a1c0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a1c4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a1c8     01 FA 65 36 |  if_ae	neg	result1, #1
2a1cc     20 00 90 3D |  if_ae	jmp	#LR__3960
2a1d0     34 12 06 FD | 	qmul	arg01, #52
2a1d4     02 00 00 FF 
2a1d8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a1dc     18 12 62 FD | 	getqx	arg01
2a1e0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a1e4     02 00 00 FF 
2a1e8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a1ec     0C 10 B0 FD | 	call	#__system___vfswrite
2a1f0                 | LR__3960
2a1f0                 | __system__write_ret
2a1f0     2D 00 64 FD | 	ret
2a1f4                 | 
2a1f4                 | __system__read
2a1f4     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a1f8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a1fc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a200     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a204     01 FA 65 36 |  if_ae	neg	result1, #1
2a208     20 00 90 3D |  if_ae	jmp	#LR__3970
2a20c     34 12 06 FD | 	qmul	arg01, #52
2a210     02 00 00 FF 
2a214     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a218     18 12 62 FD | 	getqx	arg01
2a21c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a220     02 00 00 FF 
2a224     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a228     98 11 B0 FD | 	call	#__system___vfsread
2a22c                 | LR__3970
2a22c                 | __system__read_ret
2a22c     2D 00 64 FD | 	ret
2a230                 | 
2a230                 | __system__close
2a230     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a234     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a238     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a23c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a240     01 FA 65 36 |  if_ae	neg	result1, #1
2a244     20 00 90 3D |  if_ae	jmp	#LR__3980
2a248     34 12 06 FD | 	qmul	arg01, #52
2a24c     02 00 00 FF 
2a250     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a254     18 12 62 FD | 	getqx	arg01
2a258     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a25c     02 00 00 FF 
2a260     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a264     10 F9 BF FD | 	call	#__system___closeraw
2a268                 | LR__3980
2a268                 | __system__close_ret
2a268     2D 00 64 FD | 	ret
2a26c                 | 
2a26c                 | __system__lseek
2a26c     06 4A 05 F6 | 	mov	COUNT_, #6
2a270     A8 00 A0 FD | 	call	#pushregs_
2a274     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a278     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a27c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2a280     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a284     01 FA 65 36 |  if_ae	neg	result1, #1
2a288     C4 00 90 3D |  if_ae	jmp	#LR__3991
2a28c     34 12 06 FD | 	qmul	arg01, #52
2a290     02 00 00 FF 
2a294     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2a298     18 26 62 FD | 	getqx	local01
2a29c     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2a2a0     30 26 06 F1 | 	add	local01, #48
2a2a4     13 13 0A FB | 	rdlong	arg01, local01 wz
2a2a8     30 26 86 F1 | 	sub	local01, #48
2a2ac     02 00 00 FF 
2a2b0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2a2b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a2b8     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2a2bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a2c0     01 FA 65 A6 |  if_e	neg	result1, #1
2a2c4     88 00 90 AD |  if_e	jmp	#LR__3991
2a2c8     08 26 06 F1 | 	add	local01, #8
2a2cc     13 29 02 FB | 	rdlong	local02, local01
2a2d0     08 26 86 F1 | 	sub	local01, #8
2a2d4     40 28 CE F7 | 	test	local02, #64 wz
2a2d8     08 26 06 51 |  if_ne	add	local01, #8
2a2dc     13 29 02 5B |  if_ne	rdlong	local02, local01
2a2e0     80 28 46 55 |  if_ne	or	local02, #128
2a2e4     13 29 62 5C |  if_ne	wrlong	local02, local01
2a2e8     08 26 86 51 |  if_ne	sub	local01, #8
2a2ec     30 26 06 F1 | 	add	local01, #48
2a2f0     13 2B 02 FB | 	rdlong	local03, local01
2a2f4     15 2D 02 F6 | 	mov	local04, local03
2a2f8     30 26 86 F1 | 	sub	local01, #48
2a2fc     13 2C 46 F7 | 	zerox	local04, #19
2a300     14 2A 46 F0 | 	shr	local03, #20
2a304     02 2A 66 F0 | 	shl	local03, #2
2a308     ED 2A 02 F1 | 	add	local03, __methods__
2a30c     15 2B 02 FB | 	rdlong	local03, local03
2a310     13 13 02 F6 | 	mov	arg01, local01
2a314     F2 2E 02 F6 | 	mov	local05, objptr
2a318     16 E5 01 F6 | 	mov	objptr, local04
2a31c     2D 2A 62 FD | 	call	local03
2a320     17 E5 01 F6 | 	mov	objptr, local05
2a324     FD 30 02 F6 | 	mov	local06, result1
2a328     00 30 56 F2 | 	cmps	local06, #0 wc
2a32c     1C 00 90 3D |  if_ae	jmp	#LR__3990
2a330     18 13 6A F6 | 	neg	arg01, local06 wz
2a334     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a338     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a33c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a340     01 FA 65 56 |  if_ne	neg	result1, #1
2a344     00 FA 05 A6 |  if_e	mov	result1, #0
2a348     04 00 90 FD | 	jmp	#LR__3991
2a34c                 | LR__3990
2a34c     18 FB 01 F6 | 	mov	result1, local06
2a350                 | LR__3991
2a350     A7 F0 03 F6 | 	mov	ptra, fp
2a354     B2 00 A0 FD | 	call	#popregs_
2a358                 | __system__lseek_ret
2a358     2D 00 64 FD | 	ret
2a35c                 | 
2a35c                 | __system___ioctl
2a35c     03 4A 05 F6 | 	mov	COUNT_, #3
2a360     A8 00 A0 FD | 	call	#pushregs_
2a364     00 12 4E F2 | 	cmps	arg01, #0 wz
2a368     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a36c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a370     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a374     01 FA 65 A6 |  if_e	neg	result1, #1
2a378     5C 00 90 AD |  if_e	jmp	#LR__4001
2a37c     28 12 06 F1 | 	add	arg01, #40
2a380     09 27 02 FB | 	rdlong	local01, arg01
2a384     13 29 02 F6 | 	mov	local02, local01
2a388     28 12 86 F1 | 	sub	arg01, #40
2a38c     13 28 46 F7 | 	zerox	local02, #19
2a390     14 26 46 F0 | 	shr	local01, #20
2a394     02 26 66 F0 | 	shl	local01, #2
2a398     ED 26 02 F1 | 	add	local01, __methods__
2a39c     13 27 02 FB | 	rdlong	local01, local01
2a3a0     F2 2A 02 F6 | 	mov	local03, objptr
2a3a4     14 E5 01 F6 | 	mov	objptr, local02
2a3a8     2D 26 62 FD | 	call	local01
2a3ac     15 E5 01 F6 | 	mov	objptr, local03
2a3b0     FD 12 0A F6 | 	mov	arg01, result1 wz
2a3b4     1C 00 90 AD |  if_e	jmp	#LR__4000
2a3b8     00 12 4E F2 | 	cmps	arg01, #0 wz
2a3bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a3c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a3c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a3c8     01 FA 65 56 |  if_ne	neg	result1, #1
2a3cc     00 FA 05 A6 |  if_e	mov	result1, #0
2a3d0     04 00 90 FD | 	jmp	#LR__4001
2a3d4                 | LR__4000
2a3d4     00 FA 05 F6 | 	mov	result1, #0
2a3d8                 | LR__4001
2a3d8     A7 F0 03 F6 | 	mov	ptra, fp
2a3dc     B2 00 A0 FD | 	call	#popregs_
2a3e0                 | __system___ioctl_ret
2a3e0     2D 00 64 FD | 	ret
2a3e4                 | 
2a3e4                 | __system___isatty
2a3e4     00 4A 05 F6 | 	mov	COUNT_, #0
2a3e8     A8 00 A0 FD | 	call	#pushregs_
2a3ec     0C F0 07 F1 | 	add	ptra, #12
2a3f0     04 4E 05 F1 | 	add	fp, #4
2a3f4     A7 12 62 FC | 	wrlong	arg01, fp
2a3f8     04 4E 05 F1 | 	add	fp, #4
2a3fc     A7 16 02 F6 | 	mov	arg03, fp
2a400     08 4E 85 F1 | 	sub	fp, #8
2a404     00 15 06 F6 | 	mov	arg02, #256
2a408     50 FF BF FD | 	call	#__system___ioctl
2a40c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a410     01 FA 05 A6 |  if_e	mov	result1, #1
2a414     00 FA 05 56 |  if_ne	mov	result1, #0
2a418     A7 F0 03 F6 | 	mov	ptra, fp
2a41c     B2 00 A0 FD | 	call	#popregs_
2a420                 | __system___isatty_ret
2a420     2D 00 64 FD | 	ret
2a424                 | 
2a424                 | __system____getftab
2a424     0A 12 16 F2 | 	cmp	arg01, #10 wc
2a428     34 12 06 CD |  if_b	qmul	arg01, #52
2a42c     00 FA 05 36 |  if_ae	mov	result1, #0
2a430     02 00 00 CF 
2a434     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2a438     18 FA 61 CD |  if_b	getqx	result1
2a43c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2a440     02 00 00 CF 
2a444     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2a448                 | __system____getftab_ret
2a448     2D 00 64 FD | 	ret
2a44c                 | 
2a44c                 | __system__strncpy
2a44c     09 01 02 F6 | 	mov	_var01, arg01
2a450                 | LR__4010
2a450     01 16 86 F1 | 	sub	arg03, #1
2a454     00 16 56 F2 | 	cmps	arg03, #0 wc
2a458     18 00 90 CD |  if_b	jmp	#LR__4011
2a45c     0A FB C1 FA | 	rdbyte	result1, arg02
2a460     00 FB 41 FC | 	wrbyte	result1, _var01
2a464     01 14 06 F1 | 	add	arg02, #1
2a468     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2a46c     01 00 06 F1 | 	add	_var01, #1
2a470     DC FF 9F 5D |  if_ne	jmp	#LR__4010
2a474                 | LR__4011
2a474     97 0C 48 FB | 	callpa	#(@LR__4013-@LR__4012)>>2,fcache_load_ptr_
2a478                 | LR__4012
2a478     01 16 86 F1 | 	sub	arg03, #1
2a47c     00 16 56 F2 | 	cmps	arg03, #0 wc
2a480     00 03 02 36 |  if_ae	mov	_var02, _var01
2a484     01 00 06 31 |  if_ae	add	_var01, #1
2a488     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2a48c     E8 FF 9F 3D |  if_ae	jmp	#LR__4012
2a490                 | LR__4013
2a490     09 FB 01 F6 | 	mov	result1, arg01
2a494                 | __system__strncpy_ret
2a494     2D 00 64 FD | 	ret
2a498                 | 
2a498                 | __system__strncat
2a498     00 14 4E F2 | 	cmps	arg02, #0 wz
2a49c     50 00 90 AD |  if_e	jmp	#LR__4024
2a4a0     01 16 16 F2 | 	cmp	arg03, #1 wc
2a4a4     48 00 90 CD |  if_b	jmp	#LR__4024
2a4a8     09 01 02 F6 | 	mov	_var01, arg01
2a4ac     97 1E 48 FB | 	callpa	#(@LR__4022-@LR__4020)>>2,fcache_load_ptr_
2a4b0                 | LR__4020
2a4b0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2a4b4     01 00 06 51 |  if_ne	add	_var01, #1
2a4b8     F4 FF 9F 5D |  if_ne	jmp	#LR__4020
2a4bc     0B 03 02 F6 | 	mov	_var02, arg03
2a4c0                 | LR__4021
2a4c0     0A 05 C2 FA | 	rdbyte	_var03, arg02
2a4c4     02 07 02 F6 | 	mov	_var04, _var03
2a4c8     07 06 4E F7 | 	zerox	_var04, #7 wz
2a4cc     01 14 06 F1 | 	add	arg02, #1
2a4d0     18 00 90 AD |  if_e	jmp	#LR__4023
2a4d4     01 02 86 F1 | 	sub	_var02, #1
2a4d8     00 02 56 F2 | 	cmps	_var02, #0 wc
2a4dc     00 07 02 36 |  if_ae	mov	_var04, _var01
2a4e0     01 00 06 31 |  if_ae	add	_var01, #1
2a4e4     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2a4e8     D4 FF 9F 3D |  if_ae	jmp	#LR__4021
2a4ec                 | LR__4022
2a4ec                 | LR__4023
2a4ec     00 01 48 FC | 	wrbyte	#0, _var01
2a4f0                 | LR__4024
2a4f0     09 FB 01 F6 | 	mov	result1, arg01
2a4f4                 | __system__strncat_ret
2a4f4     2D 00 64 FD | 	ret
2a4f8                 | 
2a4f8                 | __system__strncmp
2a4f8     09 01 0A F6 | 	mov	_var01, arg01 wz
2a4fc     14 00 90 5D |  if_ne	jmp	#LR__4030
2a500     00 14 0E F2 | 	cmp	arg02, #0 wz
2a504     01 02 66 56 |  if_ne	neg	_var02, #1
2a508     00 02 06 A6 |  if_e	mov	_var02, #0
2a50c     01 FB 01 F6 | 	mov	result1, _var02
2a510     74 00 90 FD | 	jmp	#__system__strncmp_ret
2a514                 | LR__4030
2a514     00 14 0E F2 | 	cmp	arg02, #0 wz
2a518     01 FA 05 A6 |  if_e	mov	result1, #1
2a51c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2a520     0B 05 02 F6 | 	mov	_var03, arg03
2a524     97 16 48 FB | 	callpa	#(@LR__4032-@LR__4031)>>2,fcache_load_ptr_
2a528                 | LR__4031
2a528     00 07 C2 FA | 	rdbyte	_var04, _var01
2a52c     0A 09 02 F6 | 	mov	_var05, arg02
2a530     04 0B C2 FA | 	rdbyte	_var06, _var05
2a534     01 04 86 F1 | 	sub	_var03, #1
2a538     00 04 56 F2 | 	cmps	_var03, #0 wc
2a53c     01 00 06 F1 | 	add	_var01, #1
2a540     01 14 06 F1 | 	add	arg02, #1
2a544     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2a548     08 00 90 2D |  if_nc_and_z	jmp	#LR__4033
2a54c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2a550     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4031
2a554                 | LR__4032
2a554                 | LR__4033
2a554     00 04 56 F2 | 	cmps	_var03, #0 wc
2a558     00 FA 05 C6 |  if_b	mov	result1, #0
2a55c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2a560     05 07 0A F2 | 	cmp	_var04, _var06 wz
2a564     00 FA 05 A6 |  if_e	mov	result1, #0
2a568     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2a56c     00 06 0E F2 | 	cmp	_var04, #0 wz
2a570     01 FA 65 A6 |  if_e	neg	result1, #1
2a574     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2a578     00 0A 0E F2 | 	cmp	_var06, #0 wz
2a57c     01 FA 05 A6 |  if_e	mov	result1, #1
2a580     03 FB 01 56 |  if_ne	mov	result1, _var04
2a584     05 FB 81 51 |  if_ne	sub	result1, _var06
2a588                 | __system__strncmp_ret
2a588     2D 00 64 FD | 	ret
2a58c                 | 
2a58c                 | __system____root_opendir
2a58c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2a590     04 12 06 F1 | 	add	arg01, #4
2a594     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2a598     00 FA 05 F6 | 	mov	result1, #0
2a59c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2a5a0                 | __system____root_opendir_ret
2a5a0     2D 00 64 FD | 	ret
2a5a4                 | 
2a5a4                 | __system____root_readdir
2a5a4     03 4A 05 F6 | 	mov	COUNT_, #3
2a5a8     A8 00 A0 FD | 	call	#pushregs_
2a5ac     09 27 02 F6 | 	mov	local01, arg01
2a5b0     0A 29 02 F6 | 	mov	local02, arg02
2a5b4     04 26 06 F1 | 	add	local01, #4
2a5b8     13 2B 02 FB | 	rdlong	local03, local01
2a5bc     04 26 86 F1 | 	sub	local01, #4
2a5c0                 | LR__4040
2a5c0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2a5c4     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2a5c8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2a5cc     01 FA 65 A6 |  if_e	neg	result1, #1
2a5d0     48 00 90 AD |  if_e	jmp	#LR__4041
2a5d4     15 17 0A FB | 	rdlong	arg03, local03 wz
2a5d8     04 2A 06 A1 |  if_e	add	local03, #4
2a5dc     E0 FF 9F AD |  if_e	jmp	#LR__4040
2a5e0     15 15 02 FB | 	rdlong	arg02, local03
2a5e4     01 14 06 F1 | 	add	arg02, #1
2a5e8     14 13 02 F6 | 	mov	arg01, local02
2a5ec     40 16 06 F6 | 	mov	arg03, #64
2a5f0     58 FE BF FD | 	call	#__system__strncpy
2a5f4     50 28 06 F1 | 	add	local02, #80
2a5f8     14 03 48 FC | 	wrbyte	#1, local02
2a5fc     08 28 86 F1 | 	sub	local02, #8
2a600     14 01 68 FC | 	wrlong	#0, local02
2a604     04 28 06 F1 | 	add	local02, #4
2a608     14 01 68 FC | 	wrlong	#0, local02
2a60c     04 2A 06 F1 | 	add	local03, #4
2a610     04 26 06 F1 | 	add	local01, #4
2a614     13 2B 62 FC | 	wrlong	local03, local01
2a618     00 FA 05 F6 | 	mov	result1, #0
2a61c                 | LR__4041
2a61c     A7 F0 03 F6 | 	mov	ptra, fp
2a620     B2 00 A0 FD | 	call	#popregs_
2a624                 | __system____root_readdir_ret
2a624     2D 00 64 FD | 	ret
2a628                 | 
2a628                 | __system____root_closedir
2a628     00 FA 05 F6 | 	mov	result1, #0
2a62c                 | __system____root_closedir_ret
2a62c     2D 00 64 FD | 	ret
2a630                 | 
2a630                 | __system____root_stat
2a630     0A 01 02 F6 | 	mov	_var01, arg02
2a634     00 13 02 F6 | 	mov	arg01, _var01
2a638     00 14 06 F6 | 	mov	arg02, #0
2a63c     30 16 06 F6 | 	mov	arg03, #48
2a640     98 00 A0 FD | 	call	#\builtin_bytefill_
2a644     08 00 06 F1 | 	add	_var01, #8
2a648     08 00 80 FF 
2a64c     00 FF 6B FC | 	wrlong	##4607, _var01
2a650     00 FA 05 F6 | 	mov	result1, #0
2a654                 | __system____root_stat_ret
2a654     2D 00 64 FD | 	ret
2a658                 | 
2a658                 | __system___normalizeName
2a658     00 00 06 F6 | 	mov	_var01, #0
2a65c     09 03 02 F6 | 	mov	_var02, arg01
2a660     01 05 02 F6 | 	mov	_var03, _var02
2a664                 | LR__4050
2a664     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2a668     5C 01 90 AD |  if_e	jmp	#LR__4069
2a66c     00 00 0E F2 | 	cmp	_var01, #0 wz
2a670     02 07 02 56 |  if_ne	mov	_var04, _var03
2a674     01 04 06 51 |  if_ne	add	_var03, #1
2a678     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2a67c     00 00 06 56 |  if_ne	mov	_var01, #0
2a680     01 07 C2 FA | 	rdbyte	_var04, _var02
2a684     2E 06 0E F2 | 	cmp	_var04, #46 wz
2a688     D8 00 90 5D |  if_ne	jmp	#LR__4062
2a68c     01 02 06 F1 | 	add	_var02, #1
2a690     01 07 C2 FA | 	rdbyte	_var04, _var02
2a694     01 02 86 F1 | 	sub	_var02, #1
2a698     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a69c     18 00 90 AD |  if_e	jmp	#LR__4051
2a6a0     01 02 06 F1 | 	add	_var02, #1
2a6a4     01 09 C2 FA | 	rdbyte	_var05, _var02
2a6a8     01 02 86 F1 | 	sub	_var02, #1
2a6ac     04 0B 02 F6 | 	mov	_var06, _var05
2a6b0     07 0A 4E F7 | 	zerox	_var06, #7 wz
2a6b4     10 00 90 5D |  if_ne	jmp	#LR__4052
2a6b8                 | LR__4051
2a6b8     01 0D 02 F6 | 	mov	_var07, _var02
2a6bc     01 0C 06 F1 | 	add	_var07, #1
2a6c0     06 03 02 F6 | 	mov	_var02, _var07
2a6c4     E0 00 90 FD | 	jmp	#LR__4066
2a6c8                 | LR__4052
2a6c8     01 02 06 F1 | 	add	_var02, #1
2a6cc     01 0D C2 FA | 	rdbyte	_var07, _var02
2a6d0     01 02 86 F1 | 	sub	_var02, #1
2a6d4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2a6d8     2E 06 0E F2 | 	cmp	_var04, #46 wz
2a6dc     84 00 90 5D |  if_ne	jmp	#LR__4061
2a6e0     02 02 06 F1 | 	add	_var02, #2
2a6e4     01 0D C2 FA | 	rdbyte	_var07, _var02
2a6e8     02 02 86 F1 | 	sub	_var02, #2
2a6ec     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2a6f0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a6f4     18 00 90 AD |  if_e	jmp	#LR__4053
2a6f8     02 02 06 F1 | 	add	_var02, #2
2a6fc     01 09 C2 FA | 	rdbyte	_var05, _var02
2a700     02 02 86 F1 | 	sub	_var02, #2
2a704     04 0B 02 F6 | 	mov	_var06, _var05
2a708     07 0A 4E F7 | 	zerox	_var06, #7 wz
2a70c     54 00 90 5D |  if_ne	jmp	#LR__4060
2a710                 | LR__4053
2a710     02 02 06 F1 | 	add	_var02, #2
2a714     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2a718     40 00 90 ED |  if_be	jmp	#LR__4059
2a71c     02 0F 02 F6 | 	mov	_var08, _var03
2a720     01 0E 86 F1 | 	sub	_var08, #1
2a724                 | LR__4054
2a724     07 07 C2 FA | 	rdbyte	_var04, _var08
2a728     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a72c     0C 00 90 5D |  if_ne	jmp	#LR__4055
2a730     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2a734     01 0E 86 11 |  if_a	sub	_var08, #1
2a738     E8 FF 9F 1D |  if_a	jmp	#LR__4054
2a73c                 | LR__4055
2a73c     97 0C 48 FB | 	callpa	#(@LR__4057-@LR__4056)>>2,fcache_load_ptr_
2a740                 | LR__4056
2a740     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2a744     10 00 90 ED |  if_be	jmp	#LR__4058
2a748     07 07 C2 FA | 	rdbyte	_var04, _var08
2a74c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a750     01 0E 86 51 |  if_ne	sub	_var08, #1
2a754     E8 FF 9F 5D |  if_ne	jmp	#LR__4056
2a758                 | LR__4057
2a758                 | LR__4058
2a758     07 05 02 F6 | 	mov	_var03, _var08
2a75c                 | LR__4059
2a75c     01 00 06 F6 | 	mov	_var01, #1
2a760     44 00 90 FD | 	jmp	#LR__4066
2a764                 | LR__4060
2a764                 | LR__4061
2a764                 | LR__4062
2a764     97 18 48 FB | 	callpa	#(@LR__4064-@LR__4063)>>2,fcache_load_ptr_
2a768                 | LR__4063
2a768     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2a76c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2a770     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2a774     20 00 90 AD |  if_e	jmp	#LR__4065
2a778     01 0B 02 F6 | 	mov	_var06, _var02
2a77c     01 09 02 F6 | 	mov	_var05, _var02
2a780     01 08 06 F1 | 	add	_var05, #1
2a784     05 11 C2 FA | 	rdbyte	_var09, _var06
2a788     04 03 02 F6 | 	mov	_var02, _var05
2a78c     02 11 42 FC | 	wrbyte	_var09, _var03
2a790     01 04 06 F1 | 	add	_var03, #1
2a794     D0 FF 9F FD | 	jmp	#LR__4063
2a798                 | LR__4064
2a798                 | LR__4065
2a798     01 07 C2 FA | 	rdbyte	_var04, _var02
2a79c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a7a0     C0 FE 9F 5D |  if_ne	jmp	#LR__4050
2a7a4     01 00 06 F6 | 	mov	_var01, #1
2a7a8                 | LR__4066
2a7a8     97 0C 48 FB | 	callpa	#(@LR__4068-@LR__4067)>>2,fcache_load_ptr_
2a7ac                 | LR__4067
2a7ac     01 07 C2 FA | 	rdbyte	_var04, _var02
2a7b0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2a7b4     01 0D 02 A6 |  if_e	mov	_var07, _var02
2a7b8     01 0C 06 A1 |  if_e	add	_var07, #1
2a7bc     06 03 02 A6 |  if_e	mov	_var02, _var07
2a7c0     E8 FF 9F AD |  if_e	jmp	#LR__4067
2a7c4                 | LR__4068
2a7c4     9C FE 9F FD | 	jmp	#LR__4050
2a7c8                 | LR__4069
2a7c8     02 01 48 FC | 	wrbyte	#0, _var03
2a7cc                 | __system___normalizeName_ret
2a7cc     2D 00 64 FD | 	ret
2a7d0                 | 
2a7d0                 | __system___strrev
2a7d0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2a7d4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2a7d8     09 03 02 F6 | 	mov	_var02, arg01
2a7dc     97 1A 48 FB | 	callpa	#(@LR__4072-@LR__4070)>>2,fcache_load_ptr_
2a7e0                 | LR__4070
2a7e0     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2a7e4     01 02 06 51 |  if_ne	add	_var02, #1
2a7e8     F4 FF 9F 5D |  if_ne	jmp	#LR__4070
2a7ec     01 02 86 F1 | 	sub	_var02, #1
2a7f0                 | LR__4071
2a7f0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2a7f4     1C 00 90 ED |  if_be	jmp	#LR__4073
2a7f8     09 01 C2 FA | 	rdbyte	_var01, arg01
2a7fc     01 05 C2 FA | 	rdbyte	_var03, _var02
2a800     09 05 42 FC | 	wrbyte	_var03, arg01
2a804     01 01 42 FC | 	wrbyte	_var01, _var02
2a808     01 12 06 F1 | 	add	arg01, #1
2a80c     01 02 86 F1 | 	sub	_var02, #1
2a810     DC FF 9F FD | 	jmp	#LR__4071
2a814                 | LR__4072
2a814                 | LR__4073
2a814                 | __system___strrev_ret
2a814     2D 00 64 FD | 	ret
2a818                 | 
2a818                 | __system___fmtpad
2a818     06 4A 05 F6 | 	mov	COUNT_, #6
2a81c     A8 00 A0 FD | 	call	#pushregs_
2a820     09 27 02 F6 | 	mov	local01, arg01
2a824     0A 29 02 F6 | 	mov	local02, arg02
2a828     0B 2B 02 F6 | 	mov	local03, arg03
2a82c     14 13 EA F8 | 	getbyte	arg01, local02, #1
2a830     16 28 46 F0 | 	shr	local02, #22
2a834     03 28 0E F5 | 	and	local02, #3 wz
2a838     00 2C 06 F6 | 	mov	local04, #0
2a83c     01 28 06 A6 |  if_e	mov	local02, #1
2a840     0C 29 CA F7 | 	test	local02, arg04 wz
2a844     00 FA 05 A6 |  if_e	mov	result1, #0
2a848     88 00 90 AD |  if_e	jmp	#LR__4083
2a84c     09 2B C2 F2 | 	subr	local03, arg01
2a850     01 2A 56 F2 | 	cmps	local03, #1 wc
2a854     00 FA 05 C6 |  if_b	mov	result1, #0
2a858     78 00 90 CD |  if_b	jmp	#LR__4083
2a85c     03 28 0E F2 | 	cmp	local02, #3 wz
2a860     18 00 90 5D |  if_ne	jmp	#LR__4080
2a864     01 18 0E F2 | 	cmp	arg04, #1 wz
2a868     6E 28 62 FD | 	wrz	local02
2a86c     14 2B 02 F1 | 	add	local03, local02
2a870     15 2B 52 F6 | 	abs	local03, local03 wc
2a874     01 2A 46 F0 | 	shr	local03, #1
2a878     15 2B 82 F6 | 	negc	local03, local03
2a87c                 | LR__4080
2a87c     01 2A 56 F2 | 	cmps	local03, #1 wc
2a880     4C 00 90 CD |  if_b	jmp	#LR__4082
2a884     15 2F 02 F6 | 	mov	local05, local03
2a888                 | LR__4081
2a888     13 29 02 F6 | 	mov	local02, local01
2a88c     13 31 02 F6 | 	mov	local06, local01
2a890     13 28 46 F7 | 	zerox	local02, #19
2a894     14 30 46 F0 | 	shr	local06, #20
2a898     02 30 66 F0 | 	shl	local06, #2
2a89c     ED 30 02 F1 | 	add	local06, __methods__
2a8a0     18 31 02 FB | 	rdlong	local06, local06
2a8a4     20 12 06 F6 | 	mov	arg01, #32
2a8a8     F2 2A 02 F6 | 	mov	local03, objptr
2a8ac     14 E5 01 F6 | 	mov	objptr, local02
2a8b0     2D 30 62 FD | 	call	local06
2a8b4     15 E5 01 F6 | 	mov	objptr, local03
2a8b8     FD 30 02 F6 | 	mov	local06, result1
2a8bc     00 30 56 F2 | 	cmps	local06, #0 wc
2a8c0     18 FB 01 C6 |  if_b	mov	result1, local06
2a8c4     0C 00 90 CD |  if_b	jmp	#LR__4083
2a8c8     18 2D 02 F1 | 	add	local04, local06
2a8cc     EE 2F 6E FB | 	djnz	local05, #LR__4081
2a8d0                 | LR__4082
2a8d0     16 FB 01 F6 | 	mov	result1, local04
2a8d4                 | LR__4083
2a8d4     A7 F0 03 F6 | 	mov	ptra, fp
2a8d8     B2 00 A0 FD | 	call	#popregs_
2a8dc                 | __system___fmtpad_ret
2a8dc     2D 00 64 FD | 	ret
2a8e0                 | 
2a8e0                 | __system___uitoa
2a8e0     04 4A 05 F6 | 	mov	COUNT_, #4
2a8e4     A8 00 A0 FD | 	call	#pushregs_
2a8e8     09 27 02 F6 | 	mov	local01, arg01
2a8ec     00 1A 4E F2 | 	cmps	arg05, #0 wz
2a8f0     13 1B 02 F6 | 	mov	arg05, local01
2a8f4     00 28 06 F6 | 	mov	local02, #0
2a8f8     37 2A 06 56 |  if_ne	mov	local03, #55
2a8fc     57 2A 06 A6 |  if_e	mov	local03, #87
2a900                 | LR__4090
2a900     0B 15 12 FD | 	qdiv	arg02, arg03
2a904     19 2C 62 FD | 	getqy	local04
2a908     0B 15 12 FD | 	qdiv	arg02, arg03
2a90c     0A 2C 16 F2 | 	cmp	local04, #10 wc
2a910     30 2C 06 C1 |  if_b	add	local04, #48
2a914     15 2D 02 31 |  if_ae	add	local04, local03
2a918     0D 2D 42 FC | 	wrbyte	local04, arg05
2a91c     01 1A 06 F1 | 	add	arg05, #1
2a920     01 28 06 F1 | 	add	local02, #1
2a924     18 14 62 FD | 	getqx	arg02
2a928     00 14 0E F2 | 	cmp	arg02, #0 wz
2a92c     D0 FF 9F 5D |  if_ne	jmp	#LR__4090
2a930     0C 29 12 F2 | 	cmp	local02, arg04 wc
2a934     C8 FF 9F CD |  if_b	jmp	#LR__4090
2a938     0D 01 48 FC | 	wrbyte	#0, arg05
2a93c     13 13 02 F6 | 	mov	arg01, local01
2a940     8C FE BF FD | 	call	#__system___strrev
2a944     14 FB 01 F6 | 	mov	result1, local02
2a948     A7 F0 03 F6 | 	mov	ptra, fp
2a94c     B2 00 A0 FD | 	call	#popregs_
2a950                 | __system___uitoa_ret
2a950     2D 00 64 FD | 	ret
2a954                 | 
2a954                 | __system__disassemble_0553
2a954     10 4A 05 F6 | 	mov	COUNT_, #16
2a958     A8 00 A0 FD | 	call	#pushregs_
2a95c     09 27 02 F6 | 	mov	local01, arg01
2a960     0A 29 02 F6 | 	mov	local02, arg02
2a964     0B 2B 02 F6 | 	mov	local03, arg03
2a968     0C 2D 02 F6 | 	mov	local04, arg04
2a96c     0D 2F 02 F6 | 	mov	local05, arg05
2a970     17 13 52 F6 | 	abs	arg01, local05 wc
2a974     1F 30 C6 C9 |  if_b	decod	local06, #31
2a978     00 30 06 36 |  if_ae	mov	local06, #0
2a97c     CC CF BF FD | 	call	#__system___float_fromuns
2a980     18 FB 61 F5 | 	xor	result1, local06
2a984     FD 32 02 F6 | 	mov	local07, result1
2a988     00 34 06 F6 | 	mov	local08, #0
2a98c     13 13 02 F6 | 	mov	arg01, local01
2a990     00 14 06 F6 | 	mov	arg02, #0
2a994     01 16 06 F6 | 	mov	arg03, #1
2a998     E8 D7 BF FD | 	call	#__system___float_cmp
2a99c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9a0     00 36 06 A6 |  if_e	mov	local09, #0
2a9a4     14 01 68 AC |  if_e	wrlong	#0, local02
2a9a8     15 37 62 AC |  if_e	wrlong	local09, local03
2a9ac     8C 01 90 AD |  if_e	jmp	#LR__4112
2a9b0     13 13 02 F6 | 	mov	arg01, local01
2a9b4     BC DC BF FD | 	call	#__system____builtin_ilogb
2a9b8     FD 38 02 F6 | 	mov	local10, result1
2a9bc     0A 2E 0E F2 | 	cmp	local05, #10 wz
2a9c0     24 00 90 5D |  if_ne	jmp	#LR__4100
2a9c4     1C 37 02 F6 | 	mov	local09, local10
2a9c8     01 36 66 F0 | 	shl	local09, #1
2a9cc     1C 37 02 F1 | 	add	local09, local10
2a9d0     1B 39 52 F6 | 	abs	local10, local09 wc
2a9d4     0A 38 16 FD | 	qdiv	local10, #10
2a9d8     09 3A 06 F6 | 	mov	local11, #9
2a9dc     18 38 62 FD | 	getqx	local10
2a9e0     1C 39 82 F6 | 	negc	local10, local10
2a9e4     04 00 90 FD | 	jmp	#LR__4101
2a9e8                 | LR__4100
2a9e8     18 3A 06 F6 | 	mov	local11, #24
2a9ec                 | LR__4101
2a9ec                 | LR__4102
2a9ec     08 34 56 F2 | 	cmps	local08, #8 wc
2a9f0     01 34 06 F1 | 	add	local08, #1
2a9f4     60 00 90 3D |  if_ae	jmp	#LR__4103
2a9f8     00 C0 1F FF 
2a9fc     00 12 06 F6 | 	mov	arg01, ##1065353216
2aa00     19 15 02 F6 | 	mov	arg02, local07
2aa04     1C 17 02 F6 | 	mov	arg03, local10
2aa08     4C E3 BF FD | 	call	#__system___float_pow_n
2aa0c     FD 14 02 F6 | 	mov	arg02, result1
2aa10     13 13 02 F6 | 	mov	arg01, local01
2aa14     3C D5 BF FD | 	call	#__system___float_div
2aa18     FD 3C 02 F6 | 	mov	local12, result1
2aa1c     1E 13 02 F6 | 	mov	arg01, local12
2aa20     00 C0 1F FF 
2aa24     00 14 06 F6 | 	mov	arg02, ##1065353216
2aa28     01 16 06 F6 | 	mov	arg03, #1
2aa2c     54 D7 BF FD | 	call	#__system___float_cmp
2aa30     00 FA 55 F2 | 	cmps	result1, #0 wc
2aa34     01 38 86 C1 |  if_b	sub	local10, #1
2aa38     B0 FF 9F CD |  if_b	jmp	#LR__4102
2aa3c     19 15 02 F6 | 	mov	arg02, local07
2aa40     1E 13 02 F6 | 	mov	arg01, local12
2aa44     01 16 66 F6 | 	neg	arg03, #1
2aa48     38 D7 BF FD | 	call	#__system___float_cmp
2aa4c     00 FA 55 F2 | 	cmps	result1, #0 wc
2aa50     01 38 06 31 |  if_ae	add	local10, #1
2aa54     94 FF 9F 3D |  if_ae	jmp	#LR__4102
2aa58                 | LR__4103
2aa58     1E 13 02 F6 | 	mov	arg01, local12
2aa5c     14 DC BF FD | 	call	#__system____builtin_ilogb
2aa60     FD 3E 02 F6 | 	mov	local13, result1
2aa64     1E 41 02 F6 | 	mov	local14, local12
2aa68     17 41 06 F4 | 	bitl	local14, #279
2aa6c     17 40 26 F4 | 	bith	local14, #23
2aa70     1F 41 62 F0 | 	shl	local14, local13
2aa74     02 2E 0E F2 | 	cmp	local05, #2 wz
2aa78     02 2C 66 A0 |  if_e	shl	local04, #2
2aa7c     00 42 06 F6 | 	mov	local15, #0
2aa80     00 2C 56 F2 | 	cmps	local04, #0 wc
2aa84     10 00 90 3D |  if_ae	jmp	#LR__4104
2aa88     1C 2D C2 F2 | 	subr	local04, local10
2aa8c     00 2C 56 F2 | 	cmps	local04, #0 wc
2aa90     A0 00 90 CD |  if_b	jmp	#LR__4111
2aa94     04 00 90 FD | 	jmp	#LR__4105
2aa98                 | LR__4104
2aa98     01 2C 06 F1 | 	add	local04, #1
2aa9c                 | LR__4105
2aa9c     1D 2D 7A F3 | 	fles	local04, local11 wcz
2aaa0     01 44 06 F6 | 	mov	local16, #1
2aaa4     97 22 48 FB | 	callpa	#(@LR__4107-@LR__4106)>>2,fcache_load_ptr_
2aaa8                 | LR__4106
2aaa8     00 40 00 FF 
2aaac     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2aab0     38 00 90 3D |  if_ae	jmp	#LR__4108
2aab4     01 2C 56 F2 | 	cmps	local04, #1 wc
2aab8     01 2C 86 F1 | 	sub	local04, #1
2aabc     2C 00 90 CD |  if_b	jmp	#LR__4108
2aac0     17 43 02 FD | 	qmul	local15, local05
2aac4     20 3F 02 F6 | 	mov	local13, local14
2aac8     17 3E 46 F0 | 	shr	local13, #23
2aacc     17 41 06 F4 | 	bitl	local14, #279
2aad0     18 42 62 FD | 	getqx	local15
2aad4     17 45 02 FD | 	qmul	local16, local05
2aad8     18 44 62 FD | 	getqx	local16
2aadc     17 41 02 FD | 	qmul	local14, local05
2aae0     1F 43 02 F1 | 	add	local15, local13
2aae4     18 40 62 FD | 	getqx	local14
2aae8     BC FF 9F FD | 	jmp	#LR__4106
2aaec                 | LR__4107
2aaec                 | LR__4108
2aaec     17 37 02 F6 | 	mov	local09, local05
2aaf0     17 36 66 F0 | 	shl	local09, #23
2aaf4     1B 3F 52 F6 | 	abs	local13, local09 wc
2aaf8     01 3E 46 F0 | 	shr	local13, #1
2aafc     1F 3F 82 F6 | 	negc	local13, local13
2ab00     1F 41 1A F2 | 	cmp	local14, local13 wcz
2ab04     20 00 90 1D |  if_a	jmp	#LR__4109
2ab08     17 2E 66 F0 | 	shl	local05, #23
2ab0c     17 3F 52 F6 | 	abs	local13, local05 wc
2ab10     01 3E 46 F0 | 	shr	local13, #1
2ab14     1F 3F 82 F6 | 	negc	local13, local13
2ab18     1F 41 0A F2 | 	cmp	local14, local13 wz
2ab1c     14 00 90 5D |  if_ne	jmp	#LR__4110
2ab20     01 42 CE F7 | 	test	local15, #1 wz
2ab24     0C 00 90 AD |  if_e	jmp	#LR__4110
2ab28                 | LR__4109
2ab28     01 42 06 F1 | 	add	local15, #1
2ab2c     22 43 0A F2 | 	cmp	local15, local16 wz
2ab30     01 38 06 A1 |  if_e	add	local10, #1
2ab34                 | LR__4110
2ab34                 | LR__4111
2ab34     14 43 62 FC | 	wrlong	local15, local02
2ab38     15 39 62 FC | 	wrlong	local10, local03
2ab3c                 | LR__4112
2ab3c     A7 F0 03 F6 | 	mov	ptra, fp
2ab40     B2 00 A0 FD | 	call	#popregs_
2ab44                 | __system__disassemble_0553_ret
2ab44     2D 00 64 FD | 	ret
2ab48                 | 
2ab48                 | __system__emitsign_0555
2ab48     00 FA 05 F6 | 	mov	result1, #0
2ab4c     00 14 0E F2 | 	cmp	arg02, #0 wz
2ab50     09 01 02 56 |  if_ne	mov	_var01, arg01
2ab54     01 12 06 51 |  if_ne	add	arg01, #1
2ab58     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2ab5c     01 FA 05 56 |  if_ne	mov	result1, #1
2ab60     00 16 0E F2 | 	cmp	arg03, #0 wz
2ab64     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2ab68     01 12 06 51 |  if_ne	add	arg01, #1
2ab6c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2ab70     02 FA 05 51 |  if_ne	add	result1, #2
2ab74                 | __system__emitsign_0555_ret
2ab74     2D 00 64 FD | 	ret
2ab78                 | 
2ab78                 | __system___getiolock_0593
2ab78     01 4A 05 F6 | 	mov	COUNT_, #1
2ab7c     A8 00 A0 FD | 	call	#pushregs_
2ab80     A0 F8 BF FD | 	call	#__system____getftab
2ab84     FD 26 0A F6 | 	mov	local01, result1 wz
2ab88     10 00 90 AD |  if_e	jmp	#LR__4120
2ab8c     08 26 06 F1 | 	add	local01, #8
2ab90     13 FB 09 FB | 	rdlong	result1, local01 wz
2ab94     08 26 86 F1 | 	sub	local01, #8
2ab98     18 00 90 5D |  if_ne	jmp	#LR__4121
2ab9c                 | LR__4120
2ab9c     01 00 00 FF 
2aba0     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2aba4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2aba8     01 00 00 FF 
2abac     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2abb0     08 00 90 FD | 	jmp	#LR__4122
2abb4                 | LR__4121
2abb4     0C 26 06 F1 | 	add	local01, #12
2abb8     13 FB 01 F6 | 	mov	result1, local01
2abbc                 | LR__4122
2abbc     A7 F0 03 F6 | 	mov	ptra, fp
2abc0     B2 00 A0 FD | 	call	#popregs_
2abc4                 | __system___getiolock_0593_ret
2abc4     2D 00 64 FD | 	ret
2abc8                 | 
2abc8                 | __system___gettxfunc
2abc8     01 4A 05 F6 | 	mov	COUNT_, #1
2abcc     A8 00 A0 FD | 	call	#pushregs_
2abd0     50 F8 BF FD | 	call	#__system____getftab
2abd4     FD 26 0A F6 | 	mov	local01, result1 wz
2abd8     10 00 90 AD |  if_e	jmp	#LR__4130
2abdc     08 26 06 F1 | 	add	local01, #8
2abe0     13 15 0A FB | 	rdlong	arg02, local01 wz
2abe4     08 26 86 F1 | 	sub	local01, #8
2abe8     08 00 90 5D |  if_ne	jmp	#LR__4131
2abec                 | LR__4130
2abec     00 FA 05 F6 | 	mov	result1, #0
2abf0     0C 00 90 FD | 	jmp	#LR__4132
2abf4                 | LR__4131
2abf4     00 E0 04 FF 
2abf8     00 26 46 F5 | 	or	local01, ##163577856
2abfc     13 FB 01 F6 | 	mov	result1, local01
2ac00                 | LR__4132
2ac00     A7 F0 03 F6 | 	mov	ptra, fp
2ac04     B2 00 A0 FD | 	call	#popregs_
2ac08                 | __system___gettxfunc_ret
2ac08     2D 00 64 FD | 	ret
2ac0c                 | 
2ac0c                 | __system___getrxfunc
2ac0c     01 4A 05 F6 | 	mov	COUNT_, #1
2ac10     A8 00 A0 FD | 	call	#pushregs_
2ac14     0C F8 BF FD | 	call	#__system____getftab
2ac18     FD 26 0A F6 | 	mov	local01, result1 wz
2ac1c     10 00 90 AD |  if_e	jmp	#LR__4140
2ac20     08 26 06 F1 | 	add	local01, #8
2ac24     13 15 0A FB | 	rdlong	arg02, local01 wz
2ac28     08 26 86 F1 | 	sub	local01, #8
2ac2c     08 00 90 5D |  if_ne	jmp	#LR__4141
2ac30                 | LR__4140
2ac30     00 FA 05 F6 | 	mov	result1, #0
2ac34     0C 00 90 FD | 	jmp	#LR__4142
2ac38                 | LR__4141
2ac38     00 E8 04 FF 
2ac3c     00 26 46 F5 | 	or	local01, ##164626432
2ac40     13 FB 01 F6 | 	mov	result1, local01
2ac44                 | LR__4142
2ac44     A7 F0 03 F6 | 	mov	ptra, fp
2ac48     B2 00 A0 FD | 	call	#popregs_
2ac4c                 | __system___getrxfunc_ret
2ac4c     2D 00 64 FD | 	ret
2ac50                 | 
2ac50                 | __system____ScanForChar
2ac50     09 01 02 F6 | 	mov	_var01, arg01
2ac54     09 03 02 F6 | 	mov	_var02, arg01
2ac58     97 06 48 FB | 	callpa	#(@LR__4151-@LR__4150)>>2,fcache_load_ptr_
2ac5c                 | LR__4150
2ac5c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2ac60     01 02 06 51 |  if_ne	add	_var02, #1
2ac64     F4 FF 9F 5D |  if_ne	jmp	#LR__4150
2ac68                 | LR__4151
2ac68     09 03 82 F1 | 	sub	_var02, arg01
2ac6c     01 FB 01 F6 | 	mov	result1, _var02
2ac70     FD 12 0A F6 | 	mov	arg01, result1 wz
2ac74     00 FA 05 A6 |  if_e	mov	result1, #0
2ac78     B8 00 90 AD |  if_e	jmp	#LR__4158
2ac7c     0A 05 02 F6 | 	mov	_var03, arg02
2ac80     07 04 4E F7 | 	zerox	_var03, #7 wz
2ac84     00 FA 05 A6 |  if_e	mov	result1, #0
2ac88     A8 00 90 AD |  if_e	jmp	#LR__4158
2ac8c     01 16 16 F2 | 	cmp	arg03, #1 wc
2ac90     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2ac94     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2ac98     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2ac9c     94 00 90 4D |  if_c_and_nz	jmp	#LR__4158
2aca0     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2aca4     10 00 90 ED |  if_be	jmp	#LR__4152
2aca8     00 18 0E F2 | 	cmp	arg04, #0 wz
2acac     00 FA 05 A6 |  if_e	mov	result1, #0
2acb0     80 00 90 AD |  if_e	jmp	#LR__4158
2acb4     09 17 02 F6 | 	mov	arg03, arg01
2acb8                 | LR__4152
2acb8     01 16 86 F1 | 	sub	arg03, #1
2acbc     00 18 0E F2 | 	cmp	arg04, #0 wz
2acc0     38 00 90 5D |  if_ne	jmp	#LR__4154
2acc4     0B 07 02 F6 | 	mov	_var04, arg03
2acc8     09 09 02 F6 | 	mov	_var05, arg01
2accc                 | LR__4153
2accc     04 07 12 F2 | 	cmp	_var04, _var05 wc
2acd0     5C 00 90 3D |  if_ae	jmp	#LR__4157
2acd4     03 05 02 F6 | 	mov	_var03, _var04
2acd8     00 05 02 F1 | 	add	_var03, _var01
2acdc     02 05 C2 FA | 	rdbyte	_var03, _var03
2ace0     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2ace4     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2ace8     01 06 06 A1 |  if_e	add	_var04, #1
2acec     03 FB 01 A6 |  if_e	mov	result1, _var04
2acf0     40 00 90 AD |  if_e	jmp	#LR__4158
2acf4     01 06 06 F1 | 	add	_var04, #1
2acf8     D0 FF 9F FD | 	jmp	#LR__4153
2acfc                 | LR__4154
2acfc     0B 07 02 F6 | 	mov	_var04, arg03
2ad00                 | LR__4155
2ad00     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2ad04     28 00 90 1D |  if_a	jmp	#LR__4156
2ad08     03 09 02 F6 | 	mov	_var05, _var04
2ad0c     00 09 02 F1 | 	add	_var05, _var01
2ad10     04 05 C2 FA | 	rdbyte	_var03, _var05
2ad14     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2ad18     04 05 0A F2 | 	cmp	_var03, _var05 wz
2ad1c     01 06 06 A1 |  if_e	add	_var04, #1
2ad20     03 FB 01 A6 |  if_e	mov	result1, _var04
2ad24     0C 00 90 AD |  if_e	jmp	#LR__4158
2ad28     01 06 86 F1 | 	sub	_var04, #1
2ad2c     D0 FF 9F FD | 	jmp	#LR__4155
2ad30                 | LR__4156
2ad30                 | LR__4157
2ad30     00 FA 05 F6 | 	mov	result1, #0
2ad34                 | LR__4158
2ad34                 | __system____ScanForChar_ret
2ad34     2D 00 64 FD | 	ret
2ad38                 | 
2ad38                 | __system___basic_dir
2ad38     05 4A 05 F6 | 	mov	COUNT_, #5
2ad3c     A8 00 A0 FD | 	call	#pushregs_
2ad40     4C F0 07 F1 | 	add	ptra, #76
2ad44     04 4E 05 F1 | 	add	fp, #4
2ad48     A7 12 62 FC | 	wrlong	arg01, fp
2ad4c     04 4E 05 F1 | 	add	fp, #4
2ad50     A7 14 62 FC | 	wrlong	arg02, fp
2ad54     04 4E 85 F1 | 	sub	fp, #4
2ad58     A7 14 0A FB | 	rdlong	arg02, fp wz
2ad5c     04 4E 85 F1 | 	sub	fp, #4
2ad60     04 4E 05 51 |  if_ne	add	fp, #4
2ad64     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ad68     04 4E 85 51 |  if_ne	sub	fp, #4
2ad6c     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2ad70     70 00 90 AD |  if_e	jmp	#LR__4160
2ad74     03 00 00 FF 
2ad78     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ad7c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2ad80     03 00 00 FF 
2ad84     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ad88     03 00 00 5F 
2ad8c     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2ad90     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2ad94     03 00 00 5F 
2ad98     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2ad9c     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2ada0     A5 01 00 FF 
2ada4     50 12 06 F6 | 	mov	arg01, ##@LR__5328
2ada8     E0 E8 BF FD | 	call	#__system__opendir
2adac     03 00 00 FF 
2adb0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2adb4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2adb8     08 4E 05 F1 | 	add	fp, #8
2adbc     A7 28 02 FB | 	rdlong	local02, fp
2adc0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2adc4     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2adc8     04 4E 85 F1 | 	sub	fp, #4
2adcc     A7 28 02 FB | 	rdlong	local02, fp
2add0     04 4E 85 F1 | 	sub	fp, #4
2add4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2add8     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2addc     03 00 00 FF 
2ade0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2ade4                 | LR__4160
2ade4     03 00 00 FF 
2ade8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2adec     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2adf0     03 00 00 FF 
2adf4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2adf8     A5 01 00 AF 
2adfc     52 FA 05 A6 |  if_e	mov	result1, ##@LR__5329
2ae00     84 02 90 AD |  if_e	jmp	#LR__4173
2ae04                 | LR__4161
2ae04     03 00 00 FF 
2ae08     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ae0c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2ae10     03 00 00 FF 
2ae14     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ae18     D0 E9 BF FD | 	call	#__system__readdir
2ae1c     0C 4E 05 F1 | 	add	fp, #12
2ae20     A7 FA 61 FC | 	wrlong	result1, fp
2ae24     0C 4E 85 F1 | 	sub	fp, #12
2ae28     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae2c     38 00 90 5D |  if_ne	jmp	#LR__4162
2ae30     03 00 00 FF 
2ae34     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ae38     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2ae3c     03 00 00 FF 
2ae40     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ae44     30 E9 BF FD | 	call	#__system__closedir
2ae48     03 00 00 FF 
2ae4c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2ae50     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2ae54     03 00 00 FF 
2ae58     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2ae5c     A5 01 00 FF 
2ae60     54 FA 05 F6 | 	mov	result1, ##@LR__5330
2ae64     20 02 90 FD | 	jmp	#LR__4173
2ae68                 | LR__4162
2ae68     0C 4E 05 F1 | 	add	fp, #12
2ae6c     A7 12 02 FB | 	rdlong	arg01, fp
2ae70     0C 4E 85 F1 | 	sub	fp, #12
2ae74     03 00 00 FF 
2ae78     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2ae7c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2ae80     03 00 00 FF 
2ae84     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2ae88     10 09 B0 FD | 	call	#__system___pat_match
2ae8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae90     70 FF 9F AD |  if_e	jmp	#LR__4161
2ae94     03 00 00 FF 
2ae98     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2ae9c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2aea0     03 00 00 FF 
2aea4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2aea8     78 01 90 AD |  if_e	jmp	#LR__4169
2aeac     0C 4E 05 F1 | 	add	fp, #12
2aeb0     A7 12 02 FB | 	rdlong	arg01, fp
2aeb4     04 4E 05 F1 | 	add	fp, #4
2aeb8     A7 14 02 F6 | 	mov	arg02, fp
2aebc     10 4E 85 F1 | 	sub	fp, #16
2aec0     2C F2 BF FD | 	call	#__system__stat
2aec4     40 4E 05 F1 | 	add	fp, #64
2aec8     A7 FA 61 FC | 	wrlong	result1, fp
2aecc     40 4E 85 F1 | 	sub	fp, #64
2aed0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aed4     A5 01 00 5F 
2aed8     56 FA 05 56 |  if_ne	mov	result1, ##@LR__5331
2aedc     A8 01 90 5D |  if_ne	jmp	#LR__4173
2aee0     18 4E 05 F1 | 	add	fp, #24
2aee4     A7 28 02 FB | 	rdlong	local02, fp
2aee8     78 00 00 FF 
2aeec     00 28 06 F5 | 	and	local02, ##61440
2aef0     2C 4E 05 F1 | 	add	fp, #44
2aef4     A7 28 62 FC | 	wrlong	local02, fp
2aef8     38 4E 85 F1 | 	sub	fp, #56
2aefc     A7 28 02 FB | 	rdlong	local02, fp
2af00     0C 4E 85 F1 | 	sub	fp, #12
2af04     14 29 C2 FA | 	rdbyte	local02, local02
2af08     2E 28 0E F2 | 	cmp	local02, #46 wz
2af0c     08 4E 05 A1 |  if_e	add	fp, #8
2af10     A7 04 68 AC |  if_e	wrlong	#2, fp
2af14     08 4E C5 F3 | 	sumz	fp, #8
2af18     A7 00 68 5C |  if_ne	wrlong	#0, fp
2af1c     08 4E 85 51 |  if_ne	sub	fp, #8
2af20     44 4E 05 F1 | 	add	fp, #68
2af24     A7 28 02 FB | 	rdlong	local02, fp
2af28     44 4E 85 F1 | 	sub	fp, #68
2af2c     08 00 00 FF 
2af30     00 28 0E F2 | 	cmp	local02, ##4096 wz
2af34     18 00 90 5D |  if_ne	jmp	#LR__4163
2af38     08 4E 05 F1 | 	add	fp, #8
2af3c     A7 28 02 FB | 	rdlong	local02, fp
2af40     10 28 46 F5 | 	or	local02, #16
2af44     A7 28 62 FC | 	wrlong	local02, fp
2af48     08 4E 85 F1 | 	sub	fp, #8
2af4c     AC 00 90 FD | 	jmp	#LR__4168
2af50                 | LR__4163
2af50     44 4E 05 F1 | 	add	fp, #68
2af54     A7 28 02 FB | 	rdlong	local02, fp
2af58     44 4E 85 F1 | 	sub	fp, #68
2af5c     10 00 00 FF 
2af60     00 28 0E F2 | 	cmp	local02, ##8192 wz
2af64     44 4E 05 51 |  if_ne	add	fp, #68
2af68     A7 26 02 5B |  if_ne	rdlong	local01, fp
2af6c     44 4E 85 51 |  if_ne	sub	fp, #68
2af70     18 00 00 5F 
2af74     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2af78     44 4E 05 51 |  if_ne	add	fp, #68
2af7c     13 2B 02 56 |  if_ne	mov	local03, local01
2af80     44 4E 85 51 |  if_ne	sub	fp, #68
2af84     20 00 00 5F 
2af88     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2af8c     18 00 90 5D |  if_ne	jmp	#LR__4164
2af90     08 4E 05 F1 | 	add	fp, #8
2af94     A7 28 02 FB | 	rdlong	local02, fp
2af98     04 28 46 F5 | 	or	local02, #4
2af9c     A7 28 62 FC | 	wrlong	local02, fp
2afa0     08 4E 85 F1 | 	sub	fp, #8
2afa4     54 00 90 FD | 	jmp	#LR__4167
2afa8                 | LR__4164
2afa8     18 4E 05 F1 | 	add	fp, #24
2afac     A7 28 02 FB | 	rdlong	local02, fp
2afb0     18 4E 85 F1 | 	sub	fp, #24
2afb4     92 28 CE F7 | 	test	local02, #146 wz
2afb8     18 00 90 5D |  if_ne	jmp	#LR__4165
2afbc     08 4E 05 F1 | 	add	fp, #8
2afc0     A7 28 02 FB | 	rdlong	local02, fp
2afc4     01 28 46 F5 | 	or	local02, #1
2afc8     A7 28 62 FC | 	wrlong	local02, fp
2afcc     08 4E 85 F1 | 	sub	fp, #8
2afd0     28 00 90 FD | 	jmp	#LR__4166
2afd4                 | LR__4165
2afd4     44 4E 05 F1 | 	add	fp, #68
2afd8     A7 2C 02 FB | 	rdlong	local04, fp
2afdc     44 4E 85 F1 | 	sub	fp, #68
2afe0     08 00 00 FF 
2afe4     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2afe8     08 4E 05 51 |  if_ne	add	fp, #8
2afec     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2aff0     20 2C 46 55 |  if_ne	or	local04, #32
2aff4     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2aff8     08 4E 85 51 |  if_ne	sub	fp, #8
2affc                 | LR__4166
2affc                 | LR__4167
2affc                 | LR__4168
2affc     08 4E 05 F1 | 	add	fp, #8
2b000     A7 2C 02 FB | 	rdlong	local04, fp
2b004     08 4E 85 F1 | 	sub	fp, #8
2b008     03 00 00 FF 
2b00c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2b010     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2b014     03 00 00 FF 
2b018     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2b01c     13 2D CA F7 | 	test	local04, local01 wz
2b020     E0 FD 9F AD |  if_e	jmp	#LR__4161
2b024                 | LR__4169
2b024     0C 4E 05 F1 | 	add	fp, #12
2b028     A7 12 02 FB | 	rdlong	arg01, fp
2b02c     0C 4E 85 F1 | 	sub	fp, #12
2b030     09 2F 02 F6 | 	mov	local05, arg01
2b034     97 06 48 FB | 	callpa	#(@LR__4171-@LR__4170)>>2,fcache_load_ptr_
2b038                 | LR__4170
2b038     17 FB C9 FA | 	rdbyte	result1, local05 wz
2b03c     01 2E 06 51 |  if_ne	add	local05, #1
2b040     F4 FF 9F 5D |  if_ne	jmp	#LR__4170
2b044                 | LR__4171
2b044     17 13 C2 F2 | 	subr	arg01, local05
2b048     01 12 06 F1 | 	add	arg01, #1
2b04c     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2b050     48 4E 05 F1 | 	add	fp, #72
2b054     A7 FA 61 FC | 	wrlong	result1, fp
2b058     48 4E 85 F1 | 	sub	fp, #72
2b05c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b060     18 00 90 AD |  if_e	jmp	#LR__4172
2b064     48 4E 05 F1 | 	add	fp, #72
2b068     A7 12 02 FB | 	rdlong	arg01, fp
2b06c     3C 4E 85 F1 | 	sub	fp, #60
2b070     A7 14 02 FB | 	rdlong	arg02, fp
2b074     0C 4E 85 F1 | 	sub	fp, #12
2b078     0C 9E BF FD | 	call	#__system____builtin_strcpy
2b07c                 | LR__4172
2b07c     48 4E 05 F1 | 	add	fp, #72
2b080     A7 FA 01 FB | 	rdlong	result1, fp
2b084     48 4E 85 F1 | 	sub	fp, #72
2b088                 | LR__4173
2b088     A7 F0 03 F6 | 	mov	ptra, fp
2b08c     B2 00 A0 FD | 	call	#popregs_
2b090                 | __system___basic_dir_ret
2b090     2D 00 64 FD | 	ret
2b094                 | 
2b094                 | __system__pack_0668
2b094     09 01 02 F6 | 	mov	_var01, arg01
2b098     7F 16 06 F1 | 	add	arg03, #127
2b09c     04 18 CE F7 | 	test	arg04, #4 wz
2b0a0     10 00 90 AD |  if_e	jmp	#LR__4180
2b0a4     00 00 0E F2 | 	cmp	_var01, #0 wz
2b0a8     16 00 C6 A9 |  if_e	decod	_var01, #22
2b0ac     F7 00 26 F4 | 	bith	_var01, #247
2b0b0     B4 00 90 FD | 	jmp	#LR__4189
2b0b4                 | LR__4180
2b0b4     02 18 CE F7 | 	test	arg04, #2 wz
2b0b8     00 C0 3F 5F 
2b0bc     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2b0c0     00 14 06 56 |  if_ne	mov	arg02, #0
2b0c4     A0 00 90 5D |  if_ne	jmp	#LR__4188
2b0c8     08 18 CE F7 | 	test	arg04, #8 wz
2b0cc     00 00 06 56 |  if_ne	mov	_var01, #0
2b0d0     94 00 90 5D |  if_ne	jmp	#LR__4187
2b0d4     FF 16 56 F2 | 	cmps	arg03, #255 wc
2b0d8     00 C0 3F 3F 
2b0dc     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2b0e0     00 14 06 36 |  if_ae	mov	arg02, #0
2b0e4     80 00 90 3D |  if_ae	jmp	#LR__4186
2b0e8     01 16 56 F2 | 	cmps	arg03, #1 wc
2b0ec     6C 00 90 3D |  if_ae	jmp	#LR__4184
2b0f0     01 14 46 F0 | 	shr	arg02, #1
2b0f4     00 03 02 F6 | 	mov	_var02, _var01
2b0f8     01 02 06 F5 | 	and	_var02, #1
2b0fc     1F 02 66 F0 | 	shl	_var02, #31
2b100     01 15 42 F5 | 	or	arg02, _var02
2b104     01 00 46 F0 | 	shr	_var01, #1
2b108     97 1E 48 FB | 	callpa	#(@LR__4182-@LR__4181)>>2,fcache_load_ptr_
2b10c                 | LR__4181
2b10c     00 16 56 F2 | 	cmps	arg03, #0 wc
2b110     34 00 90 3D |  if_ae	jmp	#LR__4183
2b114     00 00 0E F2 | 	cmp	_var01, #0 wz
2b118     2C 00 90 AD |  if_e	jmp	#LR__4183
2b11c     0A 13 02 F6 | 	mov	arg01, arg02
2b120     01 12 06 F5 | 	and	arg01, #1
2b124     01 16 06 F1 | 	add	arg03, #1
2b128     01 14 46 F0 | 	shr	arg02, #1
2b12c     00 03 02 F6 | 	mov	_var02, _var01
2b130     01 02 06 F5 | 	and	_var02, #1
2b134     1F 02 66 F0 | 	shl	_var02, #31
2b138     01 15 42 F5 | 	or	arg02, _var02
2b13c     09 15 42 F5 | 	or	arg02, arg01
2b140     01 00 46 F0 | 	shr	_var01, #1
2b144     C4 FF 9F FD | 	jmp	#LR__4181
2b148                 | LR__4182
2b148                 | LR__4183
2b148     00 16 56 F2 | 	cmps	arg03, #0 wc
2b14c     18 00 90 3D |  if_ae	jmp	#LR__4185
2b150     00 14 0E F2 | 	cmp	arg02, #0 wz
2b154     6F 14 62 FD | 	wrnz	arg02
2b158     0C 00 90 FD | 	jmp	#LR__4185
2b15c                 | LR__4184
2b15c     17 01 06 F4 | 	bitl	_var01, #279
2b160     17 16 66 F0 | 	shl	arg03, #23
2b164     0B 01 42 F5 | 	or	_var01, arg03
2b168                 | LR__4185
2b168                 | LR__4186
2b168                 | LR__4187
2b168                 | LR__4188
2b168                 | LR__4189
2b168     01 00 CE F7 | 	test	_var01, #1 wz
2b16c     01 14 46 55 |  if_ne	or	arg02, #1
2b170     0A 17 02 F6 | 	mov	arg03, arg02
2b174     00 02 06 F6 | 	mov	_var02, #0
2b178     FF FF 3F FF 
2b17c     FF 15 06 F1 | 	add	arg02, ##2147483647
2b180     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2b184     01 02 06 C6 |  if_b	mov	_var02, #1
2b188     01 01 02 F1 | 	add	_var01, _var02
2b18c     01 18 CE F7 | 	test	arg04, #1 wz
2b190     1F 00 26 54 |  if_ne	bith	_var01, #31
2b194     00 FB 01 F6 | 	mov	result1, _var01
2b198                 | __system__pack_0668_ret
2b198     2D 00 64 FD | 	ret
2b19c                 | 
2b19c                 | __system___rxtxioctl_0758
2b19c     00 15 0E F2 | 	cmp	arg02, #256 wz
2b1a0     0C 00 90 AD |  if_e	jmp	#LR__4190
2b1a4     01 15 0E F2 | 	cmp	arg02, #257 wz
2b1a8     1C 00 90 AD |  if_e	jmp	#LR__4191
2b1ac     30 00 90 FD | 	jmp	#LR__4192
2b1b0                 | LR__4190
2b1b0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2b1b4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2b1b8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2b1bc     0B FB 61 FC | 	wrlong	result1, arg03
2b1c0     00 FA 05 F6 | 	mov	result1, #0
2b1c4     28 00 90 FD | 	jmp	#LR__4193
2b1c8                 | LR__4191
2b1c8     0B 13 02 FB | 	rdlong	arg01, arg03
2b1cc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2b1d0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b1d4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2b1d8     00 FA 05 F6 | 	mov	result1, #0
2b1dc     10 00 90 FD | 	jmp	#LR__4193
2b1e0                 | LR__4192
2b1e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b1e4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2b1e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b1ec     01 FA 65 F6 | 	neg	result1, #1
2b1f0                 | LR__4193
2b1f0                 | __system___rxtxioctl_0758_ret
2b1f0     2D 00 64 FD | 	ret
2b1f4                 | 
2b1f4                 | __system____dummy_flush_0759
2b1f4     00 FA 05 F6 | 	mov	result1, #0
2b1f8                 | __system____dummy_flush_0759_ret
2b1f8     2D 00 64 FD | 	ret
2b1fc                 | 
2b1fc                 | __system___vfswrite
2b1fc     09 4A 05 F6 | 	mov	COUNT_, #9
2b200     A8 00 A0 FD | 	call	#pushregs_
2b204     09 27 02 F6 | 	mov	local01, arg01
2b208     0A 29 02 F6 | 	mov	local02, arg02
2b20c     0B 2B 02 F6 | 	mov	local03, arg03
2b210     14 2D 02 F6 | 	mov	local04, local02
2b214     08 26 06 F1 | 	add	local01, #8
2b218     13 13 02 FB | 	rdlong	arg01, local01
2b21c     08 26 86 F1 | 	sub	local01, #8
2b220     02 12 CE F7 | 	test	arg01, #2 wz
2b224     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b228     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b22c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b230     01 FA 65 A6 |  if_e	neg	result1, #1
2b234     80 01 90 AD |  if_e	jmp	#LR__4206
2b238     08 26 06 F1 | 	add	local01, #8
2b23c     13 FB 01 FB | 	rdlong	result1, local01
2b240     08 26 86 F1 | 	sub	local01, #8
2b244     40 FA CD F7 | 	test	result1, #64 wz
2b248     68 00 90 AD |  if_e	jmp	#LR__4201
2b24c     08 26 06 F1 | 	add	local01, #8
2b250     13 15 02 FB | 	rdlong	arg02, local01
2b254     08 26 86 F1 | 	sub	local01, #8
2b258     80 14 CE F7 | 	test	arg02, #128 wz
2b25c     54 00 90 AD |  if_e	jmp	#LR__4200
2b260     30 26 06 F1 | 	add	local01, #48
2b264     13 2F 02 FB | 	rdlong	local05, local01
2b268     17 31 02 F6 | 	mov	local06, local05
2b26c     30 26 86 F1 | 	sub	local01, #48
2b270     13 30 46 F7 | 	zerox	local06, #19
2b274     14 2E 46 F0 | 	shr	local05, #20
2b278     02 2E 66 F0 | 	shl	local05, #2
2b27c     ED 2E 02 F1 | 	add	local05, __methods__
2b280     17 2F 02 FB | 	rdlong	local05, local05
2b284     13 13 02 F6 | 	mov	arg01, local01
2b288     00 14 06 F6 | 	mov	arg02, #0
2b28c     02 16 06 F6 | 	mov	arg03, #2
2b290     F2 32 02 F6 | 	mov	local07, objptr
2b294     18 E5 01 F6 | 	mov	objptr, local06
2b298     2D 2E 62 FD | 	call	local05
2b29c     19 E5 01 F6 | 	mov	objptr, local07
2b2a0     08 26 06 F1 | 	add	local01, #8
2b2a4     13 33 02 FB | 	rdlong	local07, local01
2b2a8     80 32 26 F5 | 	andn	local07, #128
2b2ac     13 33 62 FC | 	wrlong	local07, local01
2b2b0     08 26 86 F1 | 	sub	local01, #8
2b2b4                 | LR__4200
2b2b4                 | LR__4201
2b2b4     18 26 06 F1 | 	add	local01, #24
2b2b8     13 33 0A FB | 	rdlong	local07, local01 wz
2b2bc     18 26 86 F1 | 	sub	local01, #24
2b2c0     80 00 90 AD |  if_e	jmp	#LR__4203
2b2c4     18 26 06 F1 | 	add	local01, #24
2b2c8     13 2F 02 FB | 	rdlong	local05, local01
2b2cc     17 31 02 F6 | 	mov	local06, local05
2b2d0     18 26 86 F1 | 	sub	local01, #24
2b2d4     13 30 46 F7 | 	zerox	local06, #19
2b2d8     14 2E 46 F0 | 	shr	local05, #20
2b2dc     02 2E 66 F0 | 	shl	local05, #2
2b2e0     ED 2E 02 F1 | 	add	local05, __methods__
2b2e4     17 2F 02 FB | 	rdlong	local05, local05
2b2e8     14 15 02 F6 | 	mov	arg02, local02
2b2ec     15 17 02 F6 | 	mov	arg03, local03
2b2f0     13 13 02 F6 | 	mov	arg01, local01
2b2f4     F2 32 02 F6 | 	mov	local07, objptr
2b2f8     18 E5 01 F6 | 	mov	objptr, local06
2b2fc     2D 2E 62 FD | 	call	local05
2b300     19 E5 01 F6 | 	mov	objptr, local07
2b304     FD 34 02 F6 | 	mov	local08, result1
2b308     00 34 56 F2 | 	cmps	local08, #0 wc
2b30c     2C 00 90 3D |  if_ae	jmp	#LR__4202
2b310     08 26 06 F1 | 	add	local01, #8
2b314     13 33 02 FB | 	rdlong	local07, local01
2b318     20 32 46 F5 | 	or	local07, #32
2b31c     13 33 62 FC | 	wrlong	local07, local01
2b320     00 34 4E F2 | 	cmps	local08, #0 wz
2b324     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b328     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2b32c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b330     01 FA 65 56 |  if_ne	neg	result1, #1
2b334     00 FA 05 A6 |  if_e	mov	result1, #0
2b338     7C 00 90 FD | 	jmp	#LR__4206
2b33c                 | LR__4202
2b33c     1A FB 01 F6 | 	mov	result1, local08
2b340     74 00 90 FD | 	jmp	#LR__4206
2b344                 | LR__4203
2b344     1C 26 06 F1 | 	add	local01, #28
2b348     13 37 0A FB | 	rdlong	local09, local01 wz
2b34c     1C 26 86 F1 | 	sub	local01, #28
2b350     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b354     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b358     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b35c     01 FA 65 A6 |  if_e	neg	result1, #1
2b360     54 00 90 AD |  if_e	jmp	#LR__4206
2b364     00 34 06 F6 | 	mov	local08, #0
2b368                 | LR__4204
2b368     01 2A 16 F2 | 	cmp	local03, #1 wc
2b36c     44 00 90 CD |  if_b	jmp	#LR__4205
2b370     1B 31 02 F6 | 	mov	local06, local09
2b374     1B 2F 02 F6 | 	mov	local05, local09
2b378     13 30 46 F7 | 	zerox	local06, #19
2b37c     14 2E 46 F0 | 	shr	local05, #20
2b380     02 2E 66 F0 | 	shl	local05, #2
2b384     ED 2E 02 F1 | 	add	local05, __methods__
2b388     17 2F 02 FB | 	rdlong	local05, local05
2b38c     16 13 C2 FA | 	rdbyte	arg01, local04
2b390     13 15 02 F6 | 	mov	arg02, local01
2b394     F2 32 02 F6 | 	mov	local07, objptr
2b398     18 E5 01 F6 | 	mov	objptr, local06
2b39c     01 2C 06 F1 | 	add	local04, #1
2b3a0     2D 2E 62 FD | 	call	local05
2b3a4     19 E5 01 F6 | 	mov	objptr, local07
2b3a8     FD 34 02 F1 | 	add	local08, result1
2b3ac     01 2A 86 F1 | 	sub	local03, #1
2b3b0     B4 FF 9F FD | 	jmp	#LR__4204
2b3b4                 | LR__4205
2b3b4     1A FB 01 F6 | 	mov	result1, local08
2b3b8                 | LR__4206
2b3b8     A7 F0 03 F6 | 	mov	ptra, fp
2b3bc     B2 00 A0 FD | 	call	#popregs_
2b3c0                 | __system___vfswrite_ret
2b3c0     2D 00 64 FD | 	ret
2b3c4                 | 
2b3c4                 | __system___vfsread
2b3c4     03 4A 05 F6 | 	mov	COUNT_, #3
2b3c8     A8 00 A0 FD | 	call	#pushregs_
2b3cc     28 F0 07 F1 | 	add	ptra, #40
2b3d0     04 4E 05 F1 | 	add	fp, #4
2b3d4     A7 12 62 FC | 	wrlong	arg01, fp
2b3d8     04 4E 05 F1 | 	add	fp, #4
2b3dc     A7 14 62 FC | 	wrlong	arg02, fp
2b3e0     04 4E 05 F1 | 	add	fp, #4
2b3e4     A7 16 62 FC | 	wrlong	arg03, fp
2b3e8     04 4E 85 F1 | 	sub	fp, #4
2b3ec     A7 FA 01 FB | 	rdlong	result1, fp
2b3f0     14 4E 05 F1 | 	add	fp, #20
2b3f4     A7 FA 61 FC | 	wrlong	result1, fp
2b3f8     04 4E 05 F1 | 	add	fp, #4
2b3fc     A7 00 68 FC | 	wrlong	#0, fp
2b400     1C 4E 85 F1 | 	sub	fp, #28
2b404     A7 12 02 FB | 	rdlong	arg01, fp
2b408     04 4E 85 F1 | 	sub	fp, #4
2b40c     08 12 06 F1 | 	add	arg01, #8
2b410     09 FB 01 FB | 	rdlong	result1, arg01
2b414     01 FA CD F7 | 	test	result1, #1 wz
2b418     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b41c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b420     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b424     01 FA 65 A6 |  if_e	neg	result1, #1
2b428     74 02 90 AD |  if_e	jmp	#LR__4216
2b42c     04 4E 05 F1 | 	add	fp, #4
2b430     A7 12 02 FB | 	rdlong	arg01, fp
2b434     04 4E 85 F1 | 	sub	fp, #4
2b438     14 12 06 F1 | 	add	arg01, #20
2b43c     09 FB 09 FB | 	rdlong	result1, arg01 wz
2b440     B8 00 90 AD |  if_e	jmp	#LR__4211
2b444     04 4E 05 F1 | 	add	fp, #4
2b448     A7 12 02 FB | 	rdlong	arg01, fp
2b44c     09 17 02 F6 | 	mov	arg03, arg01
2b450     14 16 06 F1 | 	add	arg03, #20
2b454     0B 27 02 FB | 	rdlong	local01, arg03
2b458     13 29 02 F6 | 	mov	local02, local01
2b45c     13 26 46 F7 | 	zerox	local01, #19
2b460     14 28 46 F0 | 	shr	local02, #20
2b464     02 28 66 F0 | 	shl	local02, #2
2b468     ED 28 02 F1 | 	add	local02, __methods__
2b46c     14 29 02 FB | 	rdlong	local02, local02
2b470     04 4E 05 F1 | 	add	fp, #4
2b474     A7 14 02 FB | 	rdlong	arg02, fp
2b478     04 4E 05 F1 | 	add	fp, #4
2b47c     A7 16 02 FB | 	rdlong	arg03, fp
2b480     0C 4E 85 F1 | 	sub	fp, #12
2b484     F2 2A 02 F6 | 	mov	local03, objptr
2b488     13 E5 01 F6 | 	mov	objptr, local01
2b48c     2D 28 62 FD | 	call	local02
2b490     15 E5 01 F6 | 	mov	objptr, local03
2b494     10 4E 05 F1 | 	add	fp, #16
2b498     A7 FA 61 FC | 	wrlong	result1, fp
2b49c     10 4E 85 F1 | 	sub	fp, #16
2b4a0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b4a4     44 00 90 3D |  if_ae	jmp	#LR__4210
2b4a8     04 4E 05 F1 | 	add	fp, #4
2b4ac     A7 2A 02 FB | 	rdlong	local03, fp
2b4b0     15 27 02 F6 | 	mov	local01, local03
2b4b4     08 2A 06 F1 | 	add	local03, #8
2b4b8     15 29 02 FB | 	rdlong	local02, local03
2b4bc     20 28 46 F5 | 	or	local02, #32
2b4c0     08 26 06 F1 | 	add	local01, #8
2b4c4     13 29 62 FC | 	wrlong	local02, local01
2b4c8     0C 4E 05 F1 | 	add	fp, #12
2b4cc     A7 12 0A FB | 	rdlong	arg01, fp wz
2b4d0     10 4E 85 F1 | 	sub	fp, #16
2b4d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b4d8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b4dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b4e0     01 FA 65 56 |  if_ne	neg	result1, #1
2b4e4     00 FA 05 A6 |  if_e	mov	result1, #0
2b4e8     B4 01 90 FD | 	jmp	#LR__4216
2b4ec                 | LR__4210
2b4ec     10 4E 05 F1 | 	add	fp, #16
2b4f0     A7 FA 01 FB | 	rdlong	result1, fp
2b4f4     10 4E 85 F1 | 	sub	fp, #16
2b4f8     A4 01 90 FD | 	jmp	#LR__4216
2b4fc                 | LR__4211
2b4fc     04 4E 05 F1 | 	add	fp, #4
2b500     A7 12 02 FB | 	rdlong	arg01, fp
2b504     20 12 06 F1 | 	add	arg01, #32
2b508     09 13 0A FB | 	rdlong	arg01, arg01 wz
2b50c     14 4E 05 F1 | 	add	fp, #20
2b510     A7 12 62 FC | 	wrlong	arg01, fp
2b514     18 4E 85 F1 | 	sub	fp, #24
2b518     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b51c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2b520     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b524     01 FA 65 A6 |  if_e	neg	result1, #1
2b528     74 01 90 AD |  if_e	jmp	#LR__4216
2b52c     04 4E 05 F1 | 	add	fp, #4
2b530     A7 2A 02 FB | 	rdlong	local03, fp
2b534     04 4E 85 F1 | 	sub	fp, #4
2b538     28 2A 06 F1 | 	add	local03, #40
2b53c     15 29 0A FB | 	rdlong	local02, local03 wz
2b540     7C 00 90 AD |  if_e	jmp	#LR__4213
2b544     04 4E 05 F1 | 	add	fp, #4
2b548     A7 12 02 FB | 	rdlong	arg01, fp
2b54c     09 2B 02 F6 | 	mov	local03, arg01
2b550     28 2A 06 F1 | 	add	local03, #40
2b554     15 27 02 FB | 	rdlong	local01, local03
2b558     13 29 02 F6 | 	mov	local02, local01
2b55c     13 26 46 F7 | 	zerox	local01, #19
2b560     14 28 46 F0 | 	shr	local02, #20
2b564     02 28 66 F0 | 	shl	local02, #2
2b568     ED 28 02 F1 | 	add	local02, __methods__
2b56c     14 29 02 FB | 	rdlong	local02, local02
2b570     20 4E 05 F1 | 	add	fp, #32
2b574     A7 16 02 F6 | 	mov	arg03, fp
2b578     24 4E 85 F1 | 	sub	fp, #36
2b57c     00 15 06 F6 | 	mov	arg02, #256
2b580     F2 2A 02 F6 | 	mov	local03, objptr
2b584     13 E5 01 F6 | 	mov	objptr, local01
2b588     2D 28 62 FD | 	call	local02
2b58c     15 E5 01 F6 | 	mov	objptr, local03
2b590     10 4E 05 F1 | 	add	fp, #16
2b594     A7 FA 61 FC | 	wrlong	result1, fp
2b598     00 FA 4D F2 | 	cmps	result1, #0 wz
2b59c     10 4E 85 F1 | 	sub	fp, #16
2b5a0     1C 00 90 5D |  if_ne	jmp	#LR__4212
2b5a4     24 4E 05 F1 | 	add	fp, #36
2b5a8     A7 28 02 FB | 	rdlong	local02, fp
2b5ac     24 4E 85 F1 | 	sub	fp, #36
2b5b0     02 28 CE F7 | 	test	local02, #2 wz
2b5b4     20 4E 05 51 |  if_ne	add	fp, #32
2b5b8     A7 02 68 5C |  if_ne	wrlong	#1, fp
2b5bc     20 4E 85 51 |  if_ne	sub	fp, #32
2b5c0                 | LR__4212
2b5c0                 | LR__4213
2b5c0     10 4E 05 F1 | 	add	fp, #16
2b5c4     A7 00 68 FC | 	wrlong	#0, fp
2b5c8     10 4E 85 F1 | 	sub	fp, #16
2b5cc                 | LR__4214
2b5cc     0C 4E 05 F1 | 	add	fp, #12
2b5d0     A7 2A 02 FB | 	rdlong	local03, fp
2b5d4     0C 4E 85 F1 | 	sub	fp, #12
2b5d8     01 2A 16 F2 | 	cmp	local03, #1 wc
2b5dc     B4 00 90 CD |  if_b	jmp	#LR__4215
2b5e0     18 4E 05 F1 | 	add	fp, #24
2b5e4     A7 28 02 FB | 	rdlong	local02, fp
2b5e8     14 2B 02 F6 | 	mov	local03, local02
2b5ec     13 2A 46 F7 | 	zerox	local03, #19
2b5f0     14 28 46 F0 | 	shr	local02, #20
2b5f4     02 28 66 F0 | 	shl	local02, #2
2b5f8     ED 28 02 F1 | 	add	local02, __methods__
2b5fc     14 29 02 FB | 	rdlong	local02, local02
2b600     14 4E 85 F1 | 	sub	fp, #20
2b604     A7 12 02 FB | 	rdlong	arg01, fp
2b608     04 4E 85 F1 | 	sub	fp, #4
2b60c     F2 26 02 F6 | 	mov	local01, objptr
2b610     15 E5 01 F6 | 	mov	objptr, local03
2b614     2D 28 62 FD | 	call	local02
2b618     13 E5 01 F6 | 	mov	objptr, local01
2b61c     14 4E 05 F1 | 	add	fp, #20
2b620     A7 FA 61 FC | 	wrlong	result1, fp
2b624     14 4E 85 F1 | 	sub	fp, #20
2b628     00 FA 55 F2 | 	cmps	result1, #0 wc
2b62c     64 00 90 CD |  if_b	jmp	#LR__4215
2b630     1C 4E 05 F1 | 	add	fp, #28
2b634     A7 2A 02 FB | 	rdlong	local03, fp
2b638     15 29 02 F6 | 	mov	local02, local03
2b63c     01 28 06 F1 | 	add	local02, #1
2b640     A7 28 62 FC | 	wrlong	local02, fp
2b644     08 4E 85 F1 | 	sub	fp, #8
2b648     A7 28 02 FB | 	rdlong	local02, fp
2b64c     15 29 42 FC | 	wrbyte	local02, local03
2b650     04 4E 85 F1 | 	sub	fp, #4
2b654     A7 2A 02 FB | 	rdlong	local03, fp
2b658     01 2A 06 F1 | 	add	local03, #1
2b65c     A7 2A 62 FC | 	wrlong	local03, fp
2b660     04 4E 85 F1 | 	sub	fp, #4
2b664     A7 2A 02 FB | 	rdlong	local03, fp
2b668     01 2A 86 F1 | 	sub	local03, #1
2b66c     A7 2A 62 FC | 	wrlong	local03, fp
2b670     14 4E 05 F1 | 	add	fp, #20
2b674     A7 2A 0A FB | 	rdlong	local03, fp wz
2b678     20 4E 85 F1 | 	sub	fp, #32
2b67c     4C FF 9F AD |  if_e	jmp	#LR__4214
2b680     14 4E 05 F1 | 	add	fp, #20
2b684     A7 28 02 FB | 	rdlong	local02, fp
2b688     14 4E 85 F1 | 	sub	fp, #20
2b68c     0A 28 0E F2 | 	cmp	local02, #10 wz
2b690     38 FF 9F 5D |  if_ne	jmp	#LR__4214
2b694                 | LR__4215
2b694     10 4E 05 F1 | 	add	fp, #16
2b698     A7 FA 01 FB | 	rdlong	result1, fp
2b69c     10 4E 85 F1 | 	sub	fp, #16
2b6a0                 | LR__4216
2b6a0     A7 F0 03 F6 | 	mov	ptra, fp
2b6a4     B2 00 A0 FD | 	call	#popregs_
2b6a8                 | __system___vfsread_ret
2b6a8     2D 00 64 FD | 	ret
2b6ac                 | 
2b6ac                 | __system____default_filbuf
2b6ac     04 4A 05 F6 | 	mov	COUNT_, #4
2b6b0     A8 00 A0 FD | 	call	#pushregs_
2b6b4     09 27 02 F6 | 	mov	local01, arg01
2b6b8     13 29 02 FB | 	rdlong	local02, local01
2b6bc     0C 28 06 F1 | 	add	local02, #12
2b6c0     14 FB 09 FB | 	rdlong	result1, local02 wz
2b6c4     0C 28 86 F1 | 	sub	local02, #12
2b6c8     20 00 90 5D |  if_ne	jmp	#LR__4220
2b6cc     14 28 06 F1 | 	add	local02, #20
2b6d0     14 FB 01 F6 | 	mov	result1, local02
2b6d4     04 28 86 F1 | 	sub	local02, #4
2b6d8     14 FB 61 FC | 	wrlong	result1, local02
2b6dc     04 28 86 F1 | 	sub	local02, #4
2b6e0     02 00 80 FF 
2b6e4     14 01 68 FC | 	wrlong	##1024, local02
2b6e8     0C 28 86 F1 | 	sub	local02, #12
2b6ec                 | LR__4220
2b6ec     14 26 06 F1 | 	add	local01, #20
2b6f0     13 2B 02 FB | 	rdlong	local03, local01
2b6f4     15 2D 02 F6 | 	mov	local04, local03
2b6f8     14 26 86 F1 | 	sub	local01, #20
2b6fc     13 2C 46 F7 | 	zerox	local04, #19
2b700     14 2A 46 F0 | 	shr	local03, #20
2b704     02 2A 66 F0 | 	shl	local03, #2
2b708     ED 2A 02 F1 | 	add	local03, __methods__
2b70c     15 2B 02 FB | 	rdlong	local03, local03
2b710     10 28 06 F1 | 	add	local02, #16
2b714     14 15 02 FB | 	rdlong	arg02, local02
2b718     04 28 86 F1 | 	sub	local02, #4
2b71c     14 17 02 FB | 	rdlong	arg03, local02
2b720     0C 28 86 F1 | 	sub	local02, #12
2b724     13 13 02 F6 | 	mov	arg01, local01
2b728     F2 26 02 F6 | 	mov	local01, objptr
2b72c     16 E5 01 F6 | 	mov	objptr, local04
2b730     2D 2A 62 FD | 	call	local03
2b734     13 E5 01 F6 | 	mov	objptr, local01
2b738     FD 2C 02 F6 | 	mov	local04, result1
2b73c     00 2C 56 F2 | 	cmps	local04, #0 wc
2b740     01 FA 65 C6 |  if_b	neg	result1, #1
2b744     28 00 90 CD |  if_b	jmp	#LR__4221
2b748     14 2D 62 FC | 	wrlong	local04, local02
2b74c     10 28 06 F1 | 	add	local02, #16
2b750     14 2B 02 FB | 	rdlong	local03, local02
2b754     0C 28 86 F1 | 	sub	local02, #12
2b758     14 2B 62 FC | 	wrlong	local03, local02
2b75c     04 28 06 F1 | 	add	local02, #4
2b760     14 2B 02 FB | 	rdlong	local03, local02
2b764     01 2A 46 F5 | 	or	local03, #1
2b768     14 2B 62 FC | 	wrlong	local03, local02
2b76c     16 FB 01 F6 | 	mov	result1, local04
2b770                 | LR__4221
2b770     A7 F0 03 F6 | 	mov	ptra, fp
2b774     B2 00 A0 FD | 	call	#popregs_
2b778                 | __system____default_filbuf_ret
2b778     2D 00 64 FD | 	ret
2b77c                 | 
2b77c                 | __system__getlower_1148
2b77c     41 12 56 F2 | 	cmps	arg01, #65 wc
2b780     10 00 90 CD |  if_b	jmp	#LR__4230
2b784     5B 12 56 F2 | 	cmps	arg01, #91 wc
2b788     09 FB 01 C6 |  if_b	mov	result1, arg01
2b78c     20 FA 05 C1 |  if_b	add	result1, #32
2b790     04 00 90 CD |  if_b	jmp	#__system__getlower_1148_ret
2b794                 | LR__4230
2b794     09 FB 01 F6 | 	mov	result1, arg01
2b798                 | __system__getlower_1148_ret
2b798     2D 00 64 FD | 	ret
2b79c                 | 
2b79c                 | __system___pat_match
2b79c     08 4A 05 F6 | 	mov	COUNT_, #8
2b7a0     A8 00 A0 FD | 	call	#pushregs_
2b7a4     09 27 02 F6 | 	mov	local01, arg01
2b7a8                 | LR__4240
2b7a8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2b7ac     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2b7b0     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2b7b4     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2b7b8     2C 00 90 AD |  if_e	jmp	#LR__4241
2b7bc     0A 13 C2 FA | 	rdbyte	arg01, arg02
2b7c0     B8 FF BF FD | 	call	#__system__getlower_1148
2b7c4     FD 2A 02 F6 | 	mov	local03, result1
2b7c8     13 13 C2 FA | 	rdbyte	arg01, local01
2b7cc     AC FF BF FD | 	call	#__system__getlower_1148
2b7d0     15 FB 09 F2 | 	cmp	result1, local03 wz
2b7d4     00 FA 05 56 |  if_ne	mov	result1, #0
2b7d8     FC 00 90 5D |  if_ne	jmp	#LR__4249
2b7dc     01 26 06 F1 | 	add	local01, #1
2b7e0     01 14 06 F1 | 	add	arg02, #1
2b7e4     C0 FF 9F FD | 	jmp	#LR__4240
2b7e8                 | LR__4241
2b7e8     0A 2B C2 FA | 	rdbyte	local03, arg02
2b7ec     2A 2A 0E F2 | 	cmp	local03, #42 wz
2b7f0     D4 00 90 5D |  if_ne	jmp	#LR__4248
2b7f4     01 14 06 F1 | 	add	arg02, #1
2b7f8     0A 29 C2 FA | 	rdbyte	local02, arg02
2b7fc     01 14 86 F1 | 	sub	arg02, #1
2b800     2E 28 0E F2 | 	cmp	local02, #46 wz
2b804     28 00 90 5D |  if_ne	jmp	#LR__4242
2b808     02 14 06 F1 | 	add	arg02, #2
2b80c     0A 29 C2 FA | 	rdbyte	local02, arg02
2b810     02 14 86 F1 | 	sub	arg02, #2
2b814     2A 28 0E F2 | 	cmp	local02, #42 wz
2b818     03 14 06 A1 |  if_e	add	arg02, #3
2b81c     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2b820     03 14 86 A1 |  if_e	sub	arg02, #3
2b824     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2b828     01 FA 05 A6 |  if_e	mov	result1, #1
2b82c     A8 00 90 AD |  if_e	jmp	#LR__4249
2b830                 | LR__4242
2b830     01 14 06 F1 | 	add	arg02, #1
2b834     00 30 06 F6 | 	mov	local06, #0
2b838     97 1E 48 FB | 	callpa	#(@LR__4245-@LR__4243)>>2,fcache_load_ptr_
2b83c                 | LR__4243
2b83c     18 33 02 F6 | 	mov	local07, local06
2b840     0A 33 02 F1 | 	add	local07, arg02
2b844     19 33 CA FA | 	rdbyte	local07, local07 wz
2b848     18 2F 02 56 |  if_ne	mov	local05, local06
2b84c     01 2E 06 51 |  if_ne	add	local05, #1
2b850     17 31 02 56 |  if_ne	mov	local06, local05
2b854     E4 FF 9F 5D |  if_ne	jmp	#LR__4243
2b858     00 34 06 F6 | 	mov	local08, #0
2b85c                 | LR__4244
2b85c     1A 33 02 F6 | 	mov	local07, local08
2b860     13 33 02 F1 | 	add	local07, local01
2b864     19 33 CA FA | 	rdbyte	local07, local07 wz
2b868     1A 2F 02 56 |  if_ne	mov	local05, local08
2b86c     01 2E 06 51 |  if_ne	add	local05, #1
2b870     17 35 02 56 |  if_ne	mov	local08, local05
2b874     E4 FF 9F 5D |  if_ne	jmp	#LR__4244
2b878                 | LR__4245
2b878     18 35 52 F2 | 	cmps	local08, local06 wc
2b87c     00 FA 05 C6 |  if_b	mov	result1, #0
2b880     54 00 90 CD |  if_b	jmp	#LR__4249
2b884     1A 29 02 F6 | 	mov	local02, local08
2b888     18 29 82 F1 | 	sub	local02, local06
2b88c     14 27 02 F1 | 	add	local01, local02
2b890                 | LR__4246
2b890     01 30 56 F2 | 	cmps	local06, #1 wc
2b894     30 00 90 CD |  if_b	jmp	#LR__4247
2b898     13 13 C2 FA | 	rdbyte	arg01, local01
2b89c     DC FE BF FD | 	call	#__system__getlower_1148
2b8a0     FD 34 02 F6 | 	mov	local08, result1
2b8a4     0A 13 C2 FA | 	rdbyte	arg01, arg02
2b8a8     D0 FE BF FD | 	call	#__system__getlower_1148
2b8ac     FD 34 0A F2 | 	cmp	local08, result1 wz
2b8b0     00 FA 05 56 |  if_ne	mov	result1, #0
2b8b4     20 00 90 5D |  if_ne	jmp	#LR__4249
2b8b8     01 26 06 F1 | 	add	local01, #1
2b8bc     01 14 06 F1 | 	add	arg02, #1
2b8c0     01 30 86 F1 | 	sub	local06, #1
2b8c4     C8 FF 9F FD | 	jmp	#LR__4246
2b8c8                 | LR__4247
2b8c8                 | LR__4248
2b8c8     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2b8cc     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2b8d0     01 FA 05 A6 |  if_e	mov	result1, #1
2b8d4     00 FA 05 56 |  if_ne	mov	result1, #0
2b8d8                 | LR__4249
2b8d8     A7 F0 03 F6 | 	mov	ptra, fp
2b8dc     B2 00 A0 FD | 	call	#popregs_
2b8e0                 | __system___pat_match_ret
2b8e0     2D 00 64 FD | 	ret
2b8e4                 | 
2b8e4                 | _fatfs_cc_ff_uni2oem
2b8e4     00 00 06 F6 | 	mov	_var01, #0
2b8e8     80 12 16 F2 | 	cmp	arg01, #128 wc
2b8ec     09 01 02 C6 |  if_b	mov	_var01, arg01
2b8f0     58 00 90 CD |  if_b	jmp	#LR__4254
2b8f4     80 00 00 FF 
2b8f8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2b8fc     4C 00 90 3D |  if_ae	jmp	#LR__4253
2b900     0A FB 31 F9 | 	getword	result1, arg02, #0
2b904     01 00 00 FF 
2b908     52 FB 0D F2 | 	cmp	result1, ##850 wz
2b90c     3C 00 90 5D |  if_ne	jmp	#LR__4253
2b910                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2b910     00 00 06 F6 | 	mov	_var01, #0
2b914     97 14 48 FB | 	callpa	#(@LR__4251-@LR__4250)>>2,fcache_load_ptr_
2b918                 | LR__4250
2b918     00 FB 31 F9 | 	getword	result1, _var01, #0
2b91c     80 FA 15 F2 | 	cmp	result1, #128 wc
2b920     1C 00 90 3D |  if_ae	jmp	#LR__4252
2b924     00 FB 31 F9 | 	getword	result1, _var01, #0
2b928     01 FA 65 F0 | 	shl	result1, #1
2b92c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2b930     FD FA E1 FA | 	rdword	result1, result1
2b934     FD 12 0A F2 | 	cmp	arg01, result1 wz
2b938     01 00 06 51 |  if_ne	add	_var01, #1
2b93c     D8 FF 9F 5D |  if_ne	jmp	#LR__4250
2b940                 | LR__4251
2b940                 | LR__4252
2b940     00 01 32 F9 | 	getword	_var01, _var01, #0
2b944     80 00 06 F1 | 	add	_var01, #128
2b948     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2b94c                 | LR__4253
2b94c                 | LR__4254
2b94c                 | ' 			c = (c + 0x80) & 0xFF;
2b94c                 | ' 		}
2b94c                 | ' 	}
2b94c                 | ' 
2b94c                 | ' 	return c;
2b94c     00 FB 01 F6 | 	mov	result1, _var01
2b950                 | _fatfs_cc_ff_uni2oem_ret
2b950     2D 00 64 FD | 	ret
2b954                 | 
2b954                 | _fatfs_cc_ff_oem2uni
2b954     00 00 06 F6 | 	mov	_var01, #0
2b958     09 FB 31 F9 | 	getword	result1, arg01, #0
2b95c     80 FA 15 F2 | 	cmp	result1, #128 wc
2b960     09 01 02 C6 |  if_b	mov	_var01, arg01
2b964     2C 00 90 CD |  if_b	jmp	#LR__4261
2b968     0A 15 32 F9 | 	getword	arg02, arg02, #0
2b96c     01 00 00 FF 
2b970     52 15 0E F2 | 	cmp	arg02, ##850 wz
2b974     1C 00 90 5D |  if_ne	jmp	#LR__4260
2b978     09 FB 31 F9 | 	getword	result1, arg01, #0
2b97c     00 FB 15 F2 | 	cmp	result1, #256 wc
2b980     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2b984     80 12 86 C1 |  if_b	sub	arg01, #128
2b988     01 12 66 C0 |  if_b	shl	arg01, #1
2b98c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2b990     09 01 E2 CA |  if_b	rdword	_var01, arg01
2b994                 | LR__4260
2b994                 | LR__4261
2b994                 | ' 		}
2b994                 | ' 	}
2b994                 | ' 
2b994                 | ' 	return c;
2b994     00 FB 01 F6 | 	mov	result1, _var01
2b998                 | _fatfs_cc_ff_oem2uni_ret
2b998     2D 00 64 FD | 	ret
2b99c                 | 
2b99c                 | _fatfs_cc_ff_wtoupper
2b99c     09 01 02 F6 | 	mov	_var01, arg01
2b9a0     80 00 00 FF 
2b9a4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2b9a8     60 01 90 3D |  if_ae	jmp	#LR__4283
2b9ac     00 03 02 F6 | 	mov	_var02, _var01
2b9b0     01 01 32 F9 | 	getword	_var01, _var02, #0
2b9b4     08 00 00 FF 
2b9b8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2b9bc     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2b9c0     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2b9c4     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2b9c8     01 00 00 3F 
2b9cc     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2b9d0     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2b9d4     01 00 00 3F 
2b9d8     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2b9dc     02 07 02 F6 | 	mov	_var04, _var03
2b9e0                 | ' 		uc = (WORD)uni;
2b9e0                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2b9e0                 | ' 		for (;;) {
2b9e0                 | LR__4270
2b9e0     03 09 E2 FA | 	rdword	_var05, _var04
2b9e4     04 05 02 F6 | 	mov	_var03, _var05
2b9e8     0F 04 4E F7 | 	zerox	_var03, #15 wz
2b9ec     02 06 06 F1 | 	add	_var04, #2
2b9f0     14 01 90 AD |  if_e	jmp	#LR__4282
2b9f4     01 05 32 F9 | 	getword	_var03, _var02, #0
2b9f8     04 01 32 F9 | 	getword	_var01, _var05, #0
2b9fc     00 05 12 F2 | 	cmp	_var03, _var01 wc
2ba00     04 01 90 CD |  if_b	jmp	#LR__4282
2ba04     03 0B E2 FA | 	rdword	_var06, _var04
2ba08     05 0D 32 F9 | 	getword	_var07, _var06, #0
2ba0c     08 0C 46 F0 | 	shr	_var07, #8
2ba10     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ba14     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2ba18     01 05 32 F9 | 	getword	_var03, _var02, #0
2ba1c     04 0F 32 F9 | 	getword	_var08, _var05, #0
2ba20     05 01 32 F9 | 	getword	_var01, _var06, #0
2ba24     00 0F 02 F1 | 	add	_var08, _var01
2ba28     07 05 52 F2 | 	cmps	_var03, _var08 wc
2ba2c     02 06 06 F1 | 	add	_var04, #2
2ba30     C4 00 90 3D |  if_ae	jmp	#LR__4281
2ba34                 | ' 				switch (cmd) {
2ba34     06 11 32 F9 | 	getword	_var09, _var07, #0
2ba38     09 10 26 F3 | 	fle	_var09, #9
2ba3c     30 10 62 FD | 	jmprel	_var09
2ba40                 | LR__4271
2ba40     24 00 90 FD | 	jmp	#LR__4272
2ba44     3C 00 90 FD | 	jmp	#LR__4273
2ba48     54 00 90 FD | 	jmp	#LR__4274
2ba4c     5C 00 90 FD | 	jmp	#LR__4275
2ba50     64 00 90 FD | 	jmp	#LR__4276
2ba54     6C 00 90 FD | 	jmp	#LR__4277
2ba58     74 00 90 FD | 	jmp	#LR__4278
2ba5c     7C 00 90 FD | 	jmp	#LR__4279
2ba60     84 00 90 FD | 	jmp	#LR__4280
2ba64     A0 00 90 FD | 	jmp	#LR__4282
2ba68                 | LR__4272
2ba68     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba6c     04 09 32 F9 | 	getword	_var05, _var05, #0
2ba70     04 03 82 F1 | 	sub	_var02, _var05
2ba74     01 02 66 F0 | 	shl	_var02, #1
2ba78     03 03 02 F1 | 	add	_var02, _var04
2ba7c     01 03 E2 FA | 	rdword	_var02, _var02
2ba80     84 00 90 FD | 	jmp	#LR__4282
2ba84                 | LR__4273
2ba84     01 05 32 F9 | 	getword	_var03, _var02, #0
2ba88     01 03 32 F9 | 	getword	_var02, _var02, #0
2ba8c     04 09 32 F9 | 	getword	_var05, _var05, #0
2ba90     04 03 82 F1 | 	sub	_var02, _var05
2ba94     01 02 06 F5 | 	and	_var02, #1
2ba98     02 03 C2 F2 | 	subr	_var02, _var03
2ba9c     68 00 90 FD | 	jmp	#LR__4282
2baa0                 | LR__4274
2baa0     01 03 32 F9 | 	getword	_var02, _var02, #0
2baa4     10 02 86 F1 | 	sub	_var02, #16
2baa8     5C 00 90 FD | 	jmp	#LR__4282
2baac                 | LR__4275
2baac     01 03 32 F9 | 	getword	_var02, _var02, #0
2bab0     20 02 86 F1 | 	sub	_var02, #32
2bab4     50 00 90 FD | 	jmp	#LR__4282
2bab8                 | LR__4276
2bab8     01 03 32 F9 | 	getword	_var02, _var02, #0
2babc     30 02 86 F1 | 	sub	_var02, #48
2bac0     44 00 90 FD | 	jmp	#LR__4282
2bac4                 | LR__4277
2bac4     01 03 32 F9 | 	getword	_var02, _var02, #0
2bac8     1A 02 86 F1 | 	sub	_var02, #26
2bacc     38 00 90 FD | 	jmp	#LR__4282
2bad0                 | LR__4278
2bad0     01 03 32 F9 | 	getword	_var02, _var02, #0
2bad4     08 02 06 F1 | 	add	_var02, #8
2bad8     2C 00 90 FD | 	jmp	#LR__4282
2badc                 | LR__4279
2badc     01 03 32 F9 | 	getword	_var02, _var02, #0
2bae0     50 02 86 F1 | 	sub	_var02, #80
2bae4     20 00 90 FD | 	jmp	#LR__4282
2bae8                 | LR__4280
2bae8     01 03 32 F9 | 	getword	_var02, _var02, #0
2baec     0E 00 00 FF 
2baf0     60 02 86 F1 | 	sub	_var02, ##7264
2baf4                 | ' 				}
2baf4                 | ' 				break;
2baf4     10 00 90 FD | 	jmp	#LR__4282
2baf8                 | LR__4281
2baf8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2bafc     02 0A 06 AA |  if_e	mul	_var06, #2
2bb00     05 07 02 A1 |  if_e	add	_var04, _var06
2bb04     D8 FE 9F FD | 	jmp	#LR__4270
2bb08                 | LR__4282
2bb08     01 01 32 F9 | 	getword	_var01, _var02, #0
2bb0c                 | LR__4283
2bb0c                 | ' 		}
2bb0c                 | ' 		uni = uc;
2bb0c                 | ' 	}
2bb0c                 | ' 
2bb0c                 | ' 	return uni;
2bb0c     00 FB 01 F6 | 	mov	result1, _var01
2bb10                 | _fatfs_cc_ff_wtoupper_ret
2bb10     2D 00 64 FD | 	ret
2bb14                 | 
2bb14                 | _fatfs_cc_strncpy
2bb14     09 01 02 F6 | 	mov	_var01, arg01
2bb18     97 12 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
2bb1c                 | ' 
2bb1c                 | ' 	dscan = dst;
2bb1c                 | ' 	sscan = src;
2bb1c                 | ' 	count = n;
2bb1c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2bb1c                 | LR__4290
2bb1c     01 16 86 F1 | 	sub	arg03, #1
2bb20     00 16 56 F2 | 	cmps	arg03, #0 wc
2bb24     18 00 90 CD |  if_b	jmp	#LR__4292
2bb28     0A FB C1 FA | 	rdbyte	result1, arg02
2bb2c     00 FB 41 FC | 	wrbyte	result1, _var01
2bb30     01 14 06 F1 | 	add	arg02, #1
2bb34     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bb38                 | ' 		continue;
2bb38     01 00 06 F1 | 	add	_var01, #1
2bb3c     DC FF 9F 5D |  if_ne	jmp	#LR__4290
2bb40                 | LR__4291
2bb40                 | LR__4292
2bb40     97 0C 48 FB | 	callpa	#(@LR__4294-@LR__4293)>>2,fcache_load_ptr_
2bb44                 | ' 	while (--count >= 0)
2bb44                 | LR__4293
2bb44     01 16 86 F1 | 	sub	arg03, #1
2bb48     00 16 56 F2 | 	cmps	arg03, #0 wc
2bb4c     00 03 02 36 |  if_ae	mov	_var02, _var01
2bb50     01 00 06 31 |  if_ae	add	_var01, #1
2bb54     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2bb58     E8 FF 9F 3D |  if_ae	jmp	#LR__4293
2bb5c                 | LR__4294
2bb5c                 | ' 		*dscan++ = '\0';
2bb5c                 | ' 	return(dst);
2bb5c     09 FB 01 F6 | 	mov	result1, arg01
2bb60                 | _fatfs_cc_strncpy_ret
2bb60     2D 00 64 FD | 	ret
2bb64                 | 
2bb64                 | _fatfs_cc_memcmp
2bb64                 | ' 	for (n = size; n > 0; n--)
2bb64     00 16 0E F2 | 	cmp	arg03, #0 wz
2bb68     28 00 90 AD |  if_e	jmp	#LR__4301
2bb6c                 | LR__4300
2bb6c     09 01 C2 FA | 	rdbyte	_var01, arg01
2bb70     0A 03 C2 FA | 	rdbyte	_var02, arg02
2bb74     01 01 0A F2 | 	cmp	_var01, _var02 wz
2bb78     01 12 06 A1 |  if_e	add	arg01, #1
2bb7c     01 14 06 A1 |  if_e	add	arg02, #1
2bb80                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2bb80     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2bb84     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2bb88     01 FB 81 51 |  if_ne	sub	result1, _var02
2bb8c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2bb90     F6 17 6E FB | 	djnz	arg03, #LR__4300
2bb94                 | LR__4301
2bb94                 | ' 
2bb94                 | ' 	return(0);
2bb94     00 FA 05 F6 | 	mov	result1, #0
2bb98                 | _fatfs_cc_memcmp_ret
2bb98     2D 00 64 FD | 	ret
2bb9c                 | 
2bb9c                 | _fatfs_cc_strncmp
2bb9c     09 01 0A F6 | 	mov	_var01, arg01 wz
2bba0     14 00 90 5D |  if_ne	jmp	#LR__4310
2bba4                 | ' 		return scan2 ? -1 : 0;
2bba4     00 14 0E F2 | 	cmp	arg02, #0 wz
2bba8     01 02 66 56 |  if_ne	neg	_var02, #1
2bbac     00 02 06 A6 |  if_e	mov	_var02, #0
2bbb0     01 FB 01 F6 | 	mov	result1, _var02
2bbb4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2bbb8                 | LR__4310
2bbb8     00 14 0E F2 | 	cmp	arg02, #0 wz
2bbbc     01 FA 05 A6 |  if_e	mov	result1, #1
2bbc0     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bbc4     0B 05 02 F6 | 	mov	_var03, arg03
2bbc8     97 16 48 FB | 	callpa	#(@LR__4312-@LR__4311)>>2,fcache_load_ptr_
2bbcc                 | ' 	count = n;
2bbcc                 | ' 	do {
2bbcc                 | LR__4311
2bbcc     00 07 C2 FA | 	rdbyte	_var04, _var01
2bbd0     0A 09 02 F6 | 	mov	_var05, arg02
2bbd4     04 0B C2 FA | 	rdbyte	_var06, _var05
2bbd8     01 04 86 F1 | 	sub	_var03, #1
2bbdc     00 04 56 F2 | 	cmps	_var03, #0 wc
2bbe0     01 00 06 F1 | 	add	_var01, #1
2bbe4     01 14 06 F1 | 	add	arg02, #1
2bbe8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2bbec     08 00 90 2D |  if_nc_and_z	jmp	#LR__4313
2bbf0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bbf4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4311
2bbf8                 | LR__4312
2bbf8                 | LR__4313
2bbf8     00 04 56 F2 | 	cmps	_var03, #0 wc
2bbfc                 | ' 		return(0);
2bbfc     00 FA 05 C6 |  if_b	mov	result1, #0
2bc00     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2bc04     05 07 0A F2 | 	cmp	_var04, _var06 wz
2bc08                 | ' 		return(0);
2bc08     00 FA 05 A6 |  if_e	mov	result1, #0
2bc0c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bc10     00 06 0E F2 | 	cmp	_var04, #0 wz
2bc14                 | ' 		return(-1);
2bc14     01 FA 65 A6 |  if_e	neg	result1, #1
2bc18     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2bc1c     00 0A 0E F2 | 	cmp	_var06, #0 wz
2bc20                 | ' 		return(1);
2bc20     01 FA 05 A6 |  if_e	mov	result1, #1
2bc24                 | ' 		return(c1 - c2);
2bc24     03 FB 01 56 |  if_ne	mov	result1, _var04
2bc28     05 FB 81 51 |  if_ne	sub	result1, _var06
2bc2c                 | _fatfs_cc_strncmp_ret
2bc2c     2D 00 64 FD | 	ret
2bc30                 | 
2bc30                 | _fatfs_cc_strchr
2bc30                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2bc30                 | ' 	while ((c = *s++) != (char) charwanted)
2bc30                 | LR__4320
2bc30     09 01 02 F6 | 	mov	_var01, arg01
2bc34     00 03 C2 FA | 	rdbyte	_var02, _var01
2bc38     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2bc3c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2bc40     03 05 0A F2 | 	cmp	_var03, _var04 wz
2bc44     01 12 06 F1 | 	add	arg01, #1
2bc48     14 00 90 AD |  if_e	jmp	#LR__4321
2bc4c     01 05 02 F6 | 	mov	_var03, _var02
2bc50     07 04 4E F7 | 	zerox	_var03, #7 wz
2bc54     00 FA 05 A6 |  if_e	mov	result1, #0
2bc58     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2bc5c     D0 FF 9F FD | 	jmp	#LR__4320
2bc60                 | LR__4321
2bc60                 | ' 	return((char *)--s);
2bc60     01 12 86 F1 | 	sub	arg01, #1
2bc64     09 FB 01 F6 | 	mov	result1, arg01
2bc68                 | _fatfs_cc_strchr_ret
2bc68     2D 00 64 FD | 	ret
2bc6c                 | 
2bc6c                 | _fatfs_cc_disk_initialize
2bc6c     04 4A 05 F6 | 	mov	COUNT_, #4
2bc70     A8 00 A0 FD | 	call	#pushregs_
2bc74     40 F0 07 F1 | 	add	ptra, #64
2bc78     04 4E 05 F1 | 	add	fp, #4
2bc7c     A7 12 42 FC | 	wrbyte	arg01, fp
2bc80     01 00 00 FF 
2bc84     14 E4 05 F1 | 	add	objptr, ##532
2bc88     F2 18 02 FB | 	rdlong	arg04, objptr
2bc8c     2C 4E 05 F1 | 	add	fp, #44
2bc90     A7 18 62 FC | 	wrlong	arg04, fp
2bc94     04 E4 85 F1 | 	sub	objptr, #4
2bc98     F2 18 02 FB | 	rdlong	arg04, objptr
2bc9c     04 4E 05 F1 | 	add	fp, #4
2bca0     A7 18 62 FC | 	wrlong	arg04, fp
2bca4     08 E4 05 F1 | 	add	objptr, #8
2bca8     F2 18 02 FB | 	rdlong	arg04, objptr
2bcac     04 4E 05 F1 | 	add	fp, #4
2bcb0     A7 18 62 FC | 	wrlong	arg04, fp
2bcb4     04 E4 05 F1 | 	add	objptr, #4
2bcb8     F2 18 02 FB | 	rdlong	arg04, objptr
2bcbc     04 4E 05 F1 | 	add	fp, #4
2bcc0     A7 18 62 FC | 	wrlong	arg04, fp
2bcc4     04 E4 05 F1 | 	add	objptr, #4
2bcc8     F2 02 48 FC | 	wrbyte	#1, objptr
2bccc     01 00 00 FF 
2bcd0     20 E4 85 F1 | 	sub	objptr, ##544
2bcd4     38 4E 85 F1 | 	sub	fp, #56
2bcd8     A7 18 CA FA | 	rdbyte	arg04, fp wz
2bcdc     04 4E 85 F1 | 	sub	fp, #4
2bce0                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2bce0                 | '             return RES_NOTRDY;
2bce0     03 FA 05 56 |  if_ne	mov	result1, #3
2bce4     D8 05 90 5D |  if_ne	jmp	#LR__4348
2bce8     13 00 00 FF 
2bcec     10 13 06 F6 | 	mov	arg01, ##10000
2bcf0     40 95 BF FD | 	call	#__system___waitus
2bcf4     30 4E 05 F1 | 	add	fp, #48
2bcf8     A7 12 02 FB | 	rdlong	arg01, fp
2bcfc     09 01 08 FC | 	wrpin	#0, arg01
2bd00     04 4E 05 F1 | 	add	fp, #4
2bd04     A7 12 02 FB | 	rdlong	arg01, fp
2bd08     09 01 08 FC | 	wrpin	#0, arg01
2bd0c     04 4E 05 F1 | 	add	fp, #4
2bd10     A7 12 02 FB | 	rdlong	arg01, fp
2bd14     09 01 08 FC | 	wrpin	#0, arg01
2bd18     04 4E 05 F1 | 	add	fp, #4
2bd1c     A7 12 02 FB | 	rdlong	arg01, fp
2bd20     09 00 80 FF 
2bd24     09 01 08 FC | 	wrpin	##4608, arg01
2bd28     0C 4E 85 F1 | 	sub	fp, #12
2bd2c     A7 12 02 FB | 	rdlong	arg01, fp
2bd30     59 12 62 FD | 	drvh	arg01
2bd34     04 4E 05 F1 | 	add	fp, #4
2bd38     A7 12 02 FB | 	rdlong	arg01, fp
2bd3c     59 12 62 FD | 	drvh	arg01
2bd40     04 4E 05 F1 | 	add	fp, #4
2bd44     A7 12 02 FB | 	rdlong	arg01, fp
2bd48     59 12 62 FD | 	drvh	arg01
2bd4c     04 4E 05 F1 | 	add	fp, #4
2bd50     A7 12 02 FB | 	rdlong	arg01, fp
2bd54     59 12 62 FD | 	drvh	arg01
2bd58     20 4E 85 F1 | 	sub	fp, #32
2bd5c     00 04 80 FF 
2bd60     A7 20 68 FC | 	wrlong	##524304, fp
2bd64     04 4E 05 F1 | 	add	fp, #4
2bd68     20 03 80 FF 
2bd6c     A7 90 68 FC | 	wrlong	##409672, fp
2bd70     14 4E 05 F1 | 	add	fp, #20
2bd74     A7 26 02 FB | 	rdlong	local01, fp
2bd78     18 4E 85 F1 | 	sub	fp, #24
2bd7c     A7 16 02 FB | 	rdlong	arg03, fp
2bd80     40 26 62 FD | 	dirl	local01
2bd84     A0 03 80 FF 
2bd88     13 91 08 FC | 	wrpin	##475208, local01
2bd8c     13 17 12 FC | 	wxpin	arg03, local01
2bd90     13 01 28 FC | 	wypin	#0, local01
2bd94     41 26 62 FD | 	dirh	local01
2bd98     1C 4E 05 F1 | 	add	fp, #28
2bd9c     A7 28 02 FB | 	rdlong	local02, fp
2bda0     14 27 82 F1 | 	sub	local01, local02
2bda4     07 26 06 F5 | 	and	local01, #7
2bda8     18 26 66 F0 | 	shl	local01, #24
2bdac     78 14 06 F6 | 	mov	arg02, #120
2bdb0     13 15 42 F5 | 	or	arg02, local01
2bdb4     14 4E 85 F1 | 	sub	fp, #20
2bdb8     A7 14 62 FC | 	wrlong	arg02, fp
2bdbc     14 4E 05 F1 | 	add	fp, #20
2bdc0     A7 12 02 FB | 	rdlong	arg01, fp
2bdc4     10 14 26 F4 | 	bith	arg02, #16
2bdc8     40 12 62 FD | 	dirl	arg01
2bdcc     09 15 02 FC | 	wrpin	arg02, arg01
2bdd0     09 3F 18 FC | 	wxpin	#31, arg01
2bdd4     FF FF FF FF 
2bdd8     09 FF 2B FC | 	wypin	##-1, arg01
2bddc     41 12 62 FD | 	dirh	arg01
2bde0     04 4E 85 F1 | 	sub	fp, #4
2bde4     A7 14 02 FB | 	rdlong	arg02, fp
2bde8     08 4E 05 F1 | 	add	fp, #8
2bdec     A7 2A 02 FB | 	rdlong	local03, fp
2bdf0     15 15 82 F1 | 	sub	arg02, local03
2bdf4     07 14 06 F5 | 	and	arg02, #7
2bdf8     18 14 66 F0 | 	shl	arg02, #24
2bdfc     14 4E 85 F1 | 	sub	fp, #20
2be00     A7 14 62 FC | 	wrlong	arg02, fp
2be04     29 00 00 FF 
2be08     7A 14 46 F5 | 	or	arg02, ##21114
2be0c     A7 14 62 FC | 	wrlong	arg02, fp
2be10     14 4E 05 F1 | 	add	fp, #20
2be14     A7 12 02 FB | 	rdlong	arg01, fp
2be18     40 12 62 FD | 	dirl	arg01
2be1c     09 15 02 FC | 	wrpin	arg02, arg01
2be20     09 4F 18 FC | 	wxpin	#39, arg01
2be24     09 01 28 FC | 	wypin	#0, arg01
2be28     41 12 62 FD | 	dirh	arg01
2be2c     28 4E 85 F1 | 	sub	fp, #40
2be30     A7 12 02 F6 | 	mov	arg01, fp
2be34     14 4E 85 F1 | 	sub	fp, #20
2be38     0A 14 06 F6 | 	mov	arg02, #10
2be3c     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1182
2be40     00 12 06 F6 | 	mov	arg01, #0
2be44     00 14 06 F6 | 	mov	arg02, #0
2be48     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2be4c     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1192
2be50     64 12 06 F6 | 	mov	arg01, #100
2be54     DC 93 BF FD | 	call	#__system___waitus
2be58     14 4E 05 F1 | 	add	fp, #20
2be5c     A7 12 02 F6 | 	mov	arg01, fp
2be60     14 4E 85 F1 | 	sub	fp, #20
2be64     0A 14 06 F6 | 	mov	arg02, #10
2be68     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1182
2be6c     0C 4E 05 F1 | 	add	fp, #12
2be70     A7 00 48 FC | 	wrbyte	#0, fp
2be74     0C 4E 85 F1 | 	sub	fp, #12
2be78     00 12 06 F6 | 	mov	arg01, #0
2be7c     00 14 06 F6 | 	mov	arg02, #0
2be80     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2be84     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2be88     01 18 0E F2 | 	cmp	arg04, #1 wz
2be8c     B8 03 90 5D |  if_ne	jmp	#LR__4347
2be90     08 12 06 F6 | 	mov	arg01, #8
2be94     AA 15 06 F6 | 	mov	arg02, #426
2be98     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2be9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2bea0     01 FA 0D F2 | 	cmp	result1, #1 wz
2bea4     98 01 90 5D |  if_ne	jmp	#LR__4333
2bea8     14 4E 05 F1 | 	add	fp, #20
2beac     A7 12 02 F6 | 	mov	arg01, fp
2beb0     14 4E 85 F1 | 	sub	fp, #20
2beb4     04 14 06 F6 | 	mov	arg02, #4
2beb8     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1182
2bebc     16 4E 05 F1 | 	add	fp, #22
2bec0     A7 2C C2 FA | 	rdbyte	local04, fp
2bec4     16 4E 85 F1 | 	sub	fp, #22
2bec8     01 2C 0E F2 | 	cmp	local04, #1 wz
2becc     17 4E 05 A1 |  if_e	add	fp, #23
2bed0     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2bed4     17 4E 85 A1 |  if_e	sub	fp, #23
2bed8     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2bedc     68 03 90 5D |  if_ne	jmp	#LR__4346
2bee0                 | ' 				for (tmr = 1000; tmr; tmr--) {
2bee0     18 4E 05 F1 | 	add	fp, #24
2bee4     01 00 80 FF 
2bee8     A7 D0 6B FC | 	wrlong	##1000, fp
2beec     18 4E 85 F1 | 	sub	fp, #24
2bef0                 | LR__4330
2bef0     18 4E 05 F1 | 	add	fp, #24
2bef4     A7 26 0A FB | 	rdlong	local01, fp wz
2bef8     18 4E 85 F1 | 	sub	fp, #24
2befc     3C 00 90 AD |  if_e	jmp	#LR__4331
2bf00     A9 12 06 F6 | 	mov	arg01, #169
2bf04     1E 14 C6 F9 | 	decod	arg02, #30
2bf08     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2bf0c     FD 2C 02 F6 | 	mov	local04, result1
2bf10     07 2C 4E F7 | 	zerox	local04, #7 wz
2bf14     24 00 90 AD |  if_e	jmp	#LR__4331
2bf18     01 00 00 FF 
2bf1c     E8 13 06 F6 | 	mov	arg01, ##1000
2bf20     10 93 BF FD | 	call	#__system___waitus
2bf24     18 4E 05 F1 | 	add	fp, #24
2bf28     A7 2C 02 FB | 	rdlong	local04, fp
2bf2c     01 2C 86 F1 | 	sub	local04, #1
2bf30     A7 2C 62 FC | 	wrlong	local04, fp
2bf34     18 4E 85 F1 | 	sub	fp, #24
2bf38     B4 FF 9F FD | 	jmp	#LR__4330
2bf3c                 | LR__4331
2bf3c     18 4E 05 F1 | 	add	fp, #24
2bf40     A7 2C 0A FB | 	rdlong	local04, fp wz
2bf44     18 4E 85 F1 | 	sub	fp, #24
2bf48     4C 00 90 AD |  if_e	jmp	#LR__4332
2bf4c     3A 12 06 F6 | 	mov	arg01, #58
2bf50     00 14 06 F6 | 	mov	arg02, #0
2bf54     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2bf58     FD 2A 02 F6 | 	mov	local03, result1
2bf5c     07 2A 4E F7 | 	zerox	local03, #7 wz
2bf60     34 00 90 5D |  if_ne	jmp	#LR__4332
2bf64     14 4E 05 F1 | 	add	fp, #20
2bf68     A7 12 02 F6 | 	mov	arg01, fp
2bf6c     14 4E 85 F1 | 	sub	fp, #20
2bf70     04 14 06 F6 | 	mov	arg02, #4
2bf74     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1182
2bf78     14 4E 05 F1 | 	add	fp, #20
2bf7c     A7 26 C2 FA | 	rdbyte	local01, fp
2bf80     40 26 CE F7 | 	test	local01, #64 wz
2bf84     0C 2C 06 56 |  if_ne	mov	local04, #12
2bf88     04 2C 06 A6 |  if_e	mov	local04, #4
2bf8c     08 4E 85 F1 | 	sub	fp, #8
2bf90     A7 2C 42 FC | 	wrbyte	local04, fp
2bf94     0C 4E 85 F1 | 	sub	fp, #12
2bf98                 | LR__4332
2bf98     14 2C 06 FB | 	rdlong	local04, #20
2bf9c     18 4E 05 F1 | 	add	fp, #24
2bfa0     A7 2C 62 FC | 	wrlong	local04, fp
2bfa4     0C 4E 05 F1 | 	add	fp, #12
2bfa8     A7 2C 02 FB | 	rdlong	local04, fp
2bfac     1B 2C 26 F4 | 	bith	local04, #27
2bfb0     A7 2C 62 FC | 	wrlong	local04, fp
2bfb4     0C 4E 85 F1 | 	sub	fp, #12
2bfb8     A7 2C 02 FB | 	rdlong	local04, fp
2bfbc     18 4E 85 F1 | 	sub	fp, #24
2bfc0     68 78 04 FF 
2bfc4     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2bfc8     1C 4E 05 C1 |  if_b	add	fp, #28
2bfcc     00 01 80 CF 
2bfd0     A7 08 68 CC |  if_b	wrlong	##131076, fp
2bfd4     1C 4E 85 C1 |  if_b	sub	fp, #28
2bfd8     6C 02 90 CD |  if_b	jmp	#LR__4346
2bfdc     18 4E 05 F1 | 	add	fp, #24
2bfe0     A7 2C 02 FB | 	rdlong	local04, fp
2bfe4     18 4E 85 F1 | 	sub	fp, #24
2bfe8     E1 F5 05 FF 
2bfec     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2bff0     1C 4E 05 C1 |  if_b	add	fp, #28
2bff4     00 01 80 CF 
2bff8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2bffc     1C 4E 85 C1 |  if_b	sub	fp, #28
2c000     44 02 90 CD |  if_b	jmp	#LR__4346
2c004     18 4E 05 F1 | 	add	fp, #24
2c008     A7 2C 02 FB | 	rdlong	local04, fp
2c00c     18 4E 85 F1 | 	sub	fp, #24
2c010     3B 58 08 FF 
2c014     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2c018     1C 4E 05 C1 |  if_b	add	fp, #28
2c01c     00 01 80 CF 
2c020     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2c024     1C 4E 85 C1 |  if_b	sub	fp, #28
2c028     1C 02 90 CD |  if_b	jmp	#LR__4346
2c02c     1C 4E 05 F1 | 	add	fp, #28
2c030     80 01 80 FF 
2c034     A7 10 68 FC | 	wrlong	##196616, fp
2c038     1C 4E 85 F1 | 	sub	fp, #28
2c03c     08 02 90 FD | 	jmp	#LR__4346
2c040                 | LR__4333
2c040     A9 12 06 F6 | 	mov	arg01, #169
2c044     00 14 06 F6 | 	mov	arg02, #0
2c048     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c04c     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2c050     02 2C 16 F2 | 	cmp	local04, #2 wc
2c054     18 00 90 3D |  if_ae	jmp	#LR__4334
2c058     0C 4E 05 F1 | 	add	fp, #12
2c05c     A7 04 48 FC | 	wrbyte	#2, fp
2c060     04 4E 05 F1 | 	add	fp, #4
2c064     A7 52 49 FC | 	wrbyte	#169, fp
2c068     10 4E 85 F1 | 	sub	fp, #16
2c06c     14 00 90 FD | 	jmp	#LR__4335
2c070                 | LR__4334
2c070     0C 4E 05 F1 | 	add	fp, #12
2c074     A7 02 48 FC | 	wrbyte	#1, fp
2c078     04 4E 05 F1 | 	add	fp, #4
2c07c     A7 02 48 FC | 	wrbyte	#1, fp
2c080     10 4E 85 F1 | 	sub	fp, #16
2c084                 | LR__4335
2c084                 | ' 				ty =  0x01 ; cmd =  (1) ;
2c084                 | ' 			}
2c084                 | ' 			for (tmr = 1000; tmr; tmr--) {
2c084     18 4E 05 F1 | 	add	fp, #24
2c088     01 00 80 FF 
2c08c     A7 D0 6B FC | 	wrlong	##1000, fp
2c090     18 4E 85 F1 | 	sub	fp, #24
2c094                 | LR__4336
2c094     18 4E 05 F1 | 	add	fp, #24
2c098     A7 2A 0A FB | 	rdlong	local03, fp wz
2c09c     18 4E 85 F1 | 	sub	fp, #24
2c0a0     44 00 90 AD |  if_e	jmp	#LR__4337
2c0a4     10 4E 05 F1 | 	add	fp, #16
2c0a8     A7 12 C2 FA | 	rdbyte	arg01, fp
2c0ac     10 4E 85 F1 | 	sub	fp, #16
2c0b0     00 14 06 F6 | 	mov	arg02, #0
2c0b4     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c0b8     FD 2C 02 F6 | 	mov	local04, result1
2c0bc     07 2C 4E F7 | 	zerox	local04, #7 wz
2c0c0     24 00 90 AD |  if_e	jmp	#LR__4337
2c0c4     01 00 00 FF 
2c0c8     E8 13 06 F6 | 	mov	arg01, ##1000
2c0cc     64 91 BF FD | 	call	#__system___waitus
2c0d0     18 4E 05 F1 | 	add	fp, #24
2c0d4     A7 2C 02 FB | 	rdlong	local04, fp
2c0d8     01 2C 86 F1 | 	sub	local04, #1
2c0dc     A7 2C 62 FC | 	wrlong	local04, fp
2c0e0     18 4E 85 F1 | 	sub	fp, #24
2c0e4     AC FF 9F FD | 	jmp	#LR__4336
2c0e8                 | LR__4337
2c0e8     18 4E 05 F1 | 	add	fp, #24
2c0ec     A7 2C 0A FB | 	rdlong	local04, fp wz
2c0f0     18 4E 85 F1 | 	sub	fp, #24
2c0f4     14 00 90 AD |  if_e	jmp	#LR__4338
2c0f8     10 12 06 F6 | 	mov	arg01, #16
2c0fc     09 14 C6 F9 | 	decod	arg02, #9
2c100     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c104     07 FA 4D F7 | 	zerox	result1, #7 wz
2c108     0C 00 90 AD |  if_e	jmp	#LR__4339
2c10c                 | LR__4338
2c10c     0C 4E 05 F1 | 	add	fp, #12
2c110     A7 00 48 FC | 	wrbyte	#0, fp
2c114     0C 4E 85 F1 | 	sub	fp, #12
2c118                 | LR__4339
2c118     14 2C 06 FB | 	rdlong	local04, #20
2c11c     18 4E 05 F1 | 	add	fp, #24
2c120     A7 2C 62 FC | 	wrlong	local04, fp
2c124     18 4E 85 F1 | 	sub	fp, #24
2c128     F0 FA 02 FF 
2c12c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2c130     18 00 90 3D |  if_ae	jmp	#LR__4340
2c134     24 4E 05 F1 | 	add	fp, #36
2c138     A7 2C 02 FB | 	rdlong	local04, fp
2c13c     1B 2C 26 F4 | 	bith	local04, #27
2c140     A7 2C 62 FC | 	wrlong	local04, fp
2c144     24 4E 85 F1 | 	sub	fp, #36
2c148     2C 00 90 FD | 	jmp	#LR__4341
2c14c                 | LR__4340
2c14c     18 4E 05 F1 | 	add	fp, #24
2c150     A7 2C 02 FB | 	rdlong	local04, fp
2c154     18 4E 85 F1 | 	sub	fp, #24
2c158     E1 F5 05 FF 
2c15c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2c160     24 4E 05 C1 |  if_b	add	fp, #36
2c164     A7 2C 02 CB |  if_b	rdlong	local04, fp
2c168     80 00 04 CF 
2c16c     00 2C 46 C5 |  if_b	or	local04, ##134283264
2c170     A7 2C 62 CC |  if_b	wrlong	local04, fp
2c174     24 4E 85 C1 |  if_b	sub	fp, #36
2c178                 | LR__4341
2c178     18 4E 05 F1 | 	add	fp, #24
2c17c     A7 2C 02 FB | 	rdlong	local04, fp
2c180     18 4E 85 F1 | 	sub	fp, #24
2c184     F0 FA 02 FF 
2c188     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2c18c     1C 4E 05 C1 |  if_b	add	fp, #28
2c190     00 01 80 CF 
2c194     A7 08 68 CC |  if_b	wrlong	##131076, fp
2c198     1C 4E 85 C1 |  if_b	sub	fp, #28
2c19c     A8 00 90 CD |  if_b	jmp	#LR__4345
2c1a0     18 4E 05 F1 | 	add	fp, #24
2c1a4     A7 2C 02 FB | 	rdlong	local04, fp
2c1a8     18 4E 85 F1 | 	sub	fp, #24
2c1ac     68 78 04 FF 
2c1b0     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2c1b4     1C 4E 05 C1 |  if_b	add	fp, #28
2c1b8     80 01 80 CF 
2c1bc     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2c1c0     1C 4E 85 C1 |  if_b	sub	fp, #28
2c1c4     80 00 90 CD |  if_b	jmp	#LR__4344
2c1c8     18 4E 05 F1 | 	add	fp, #24
2c1cc     A7 2C 02 FB | 	rdlong	local04, fp
2c1d0     18 4E 85 F1 | 	sub	fp, #24
2c1d4     E1 F5 05 FF 
2c1d8     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2c1dc     1C 4E 05 C1 |  if_b	add	fp, #28
2c1e0     00 02 80 CF 
2c1e4     A7 10 68 CC |  if_b	wrlong	##262152, fp
2c1e8     1C 4E 85 C1 |  if_b	sub	fp, #28
2c1ec     58 00 90 CD |  if_b	jmp	#LR__4343
2c1f0     18 4E 05 F1 | 	add	fp, #24
2c1f4     A7 2C 02 FB | 	rdlong	local04, fp
2c1f8     18 4E 85 F1 | 	sub	fp, #24
2c1fc     59 73 07 FF 
2c200     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2c204     1C 4E 05 C1 |  if_b	add	fp, #28
2c208     80 02 80 CF 
2c20c     A7 14 68 CC |  if_b	wrlong	##327690, fp
2c210     1C 4E 85 C1 |  if_b	sub	fp, #28
2c214     30 00 90 CD |  if_b	jmp	#LR__4342
2c218     18 4E 05 F1 | 	add	fp, #24
2c21c     A7 2C 02 FB | 	rdlong	local04, fp
2c220     18 4E 85 F1 | 	sub	fp, #24
2c224     D1 F0 08 FF 
2c228     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2c22c     1C 4E 05 C1 |  if_b	add	fp, #28
2c230     00 03 80 CF 
2c234     A7 18 68 CC |  if_b	wrlong	##393228, fp
2c238     1C 4E 85 F3 | 	sumc	fp, #28
2c23c     80 03 80 3F 
2c240     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2c244     1C 4E 85 31 |  if_ae	sub	fp, #28
2c248                 | LR__4342
2c248                 | LR__4343
2c248                 | LR__4344
2c248                 | LR__4345
2c248                 | LR__4346
2c248                 | LR__4347
2c248     0C 4E 05 F1 | 	add	fp, #12
2c24c     A7 2C C2 FA | 	rdbyte	local04, fp
2c250     01 00 00 FF 
2c254     21 E4 05 F1 | 	add	objptr, ##545
2c258     F2 2C 42 FC | 	wrbyte	local04, objptr
2c25c     A7 26 CA FA | 	rdbyte	local01, fp wz
2c260     00 2C 06 56 |  if_ne	mov	local04, #0
2c264     01 2C 06 A6 |  if_e	mov	local04, #1
2c268     20 4E 05 F1 | 	add	fp, #32
2c26c     A7 2C 42 FC | 	wrbyte	local04, fp
2c270     A7 2C C2 FA | 	rdbyte	local04, fp
2c274     2C 4E 85 F1 | 	sub	fp, #44
2c278     01 E4 85 F1 | 	sub	objptr, #1
2c27c     F2 2C 42 FC | 	wrbyte	local04, objptr
2c280     01 00 00 FF 
2c284     20 E4 85 F1 | 	sub	objptr, ##544
2c288     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1192
2c28c     34 4E 05 F1 | 	add	fp, #52
2c290     A7 12 02 FB | 	rdlong	arg01, fp
2c294     18 4E 85 F1 | 	sub	fp, #24
2c298     A7 14 02 FB | 	rdlong	arg02, fp
2c29c     09 15 12 FC | 	wxpin	arg02, arg01
2c2a0     1C 4E 05 F1 | 	add	fp, #28
2c2a4     A7 12 02 FB | 	rdlong	arg01, fp
2c2a8     14 4E 85 F1 | 	sub	fp, #20
2c2ac     A7 14 02 FB | 	rdlong	arg02, fp
2c2b0     09 15 02 FC | 	wrpin	arg02, arg01
2c2b4                 | ' 
2c2b4                 | ' 		}
2c2b4                 | ' 	}
2c2b4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c2b4                 | ' 	CardType = ty;
2c2b4                 | ' 	s = ty ? 0 :  0x01 ;
2c2b4                 | ' 	Stat = s;
2c2b4                 | ' 
2c2b4                 | ' 	deselect();
2c2b4                 | ' 
2c2b4                 | ' 
2c2b4                 | ' 	_wxpin( PIN_CLK, ck_div );
2c2b4                 | ' 	_wrpin( PIN_DI, spm_tx );
2c2b4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2c2b4                 | ' 	return s;
2c2b4     08 4E 05 F1 | 	add	fp, #8
2c2b8     A7 FA C1 FA | 	rdbyte	result1, fp
2c2bc     2C 4E 85 F1 | 	sub	fp, #44
2c2c0                 | LR__4348
2c2c0     A7 F0 03 F6 | 	mov	ptra, fp
2c2c4     B2 00 A0 FD | 	call	#popregs_
2c2c8                 | _fatfs_cc_disk_initialize_ret
2c2c8     2D 00 64 FD | 	ret
2c2cc                 | 
2c2cc                 | _fatfs_cc_disk_read
2c2cc     05 4A 05 F6 | 	mov	COUNT_, #5
2c2d0     A8 00 A0 FD | 	call	#pushregs_
2c2d4     0A 27 02 F6 | 	mov	local01, arg02
2c2d8     0B 29 02 F6 | 	mov	local02, arg03
2c2dc     0C 2B 02 F6 | 	mov	local03, arg04
2c2e0     00 12 0E F2 | 	cmp	arg01, #0 wz
2c2e4     01 FA 05 56 |  if_ne	mov	result1, #1
2c2e8                 | ' 
2c2e8                 | ' 	return Stat;
2c2e8     01 00 00 AF 
2c2ec     20 E4 05 A1 |  if_e	add	objptr, ##544
2c2f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c2f4     01 00 00 AF 
2c2f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c2fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c300     01 FA CD F7 | 	test	result1, #1 wz
2c304     03 FA 05 56 |  if_ne	mov	result1, #3
2c308     84 00 90 5D |  if_ne	jmp	#LR__4352
2c30c     01 00 00 FF 
2c310     21 E4 05 F1 | 	add	objptr, ##545
2c314     F2 2C C2 FA | 	rdbyte	local04, objptr
2c318     01 00 00 FF 
2c31c     21 E4 85 F1 | 	sub	objptr, ##545
2c320     08 2C CE F7 | 	test	local04, #8 wz
2c324     09 28 66 A0 |  if_e	shl	local02, #9
2c328     02 2A 16 F2 | 	cmp	local03, #2 wc
2c32c     12 2C 06 36 |  if_ae	mov	local04, #18
2c330     11 2C 06 C6 |  if_b	mov	local04, #17
2c334     14 15 02 F6 | 	mov	arg02, local02
2c338     16 13 02 F6 | 	mov	arg01, local04
2c33c     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c340     FD 2E 02 F6 | 	mov	local05, result1
2c344     07 2E 4E F7 | 	zerox	local05, #7 wz
2c348     30 00 90 5D |  if_ne	jmp	#LR__4351
2c34c                 | ' 		do {
2c34c                 | LR__4350
2c34c     13 13 02 F6 | 	mov	arg01, local01
2c350     09 14 C6 F9 | 	decod	arg02, #9
2c354     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1200
2c358     00 FA 0D F2 | 	cmp	result1, #0 wz
2c35c     01 00 00 5F 
2c360     00 26 06 51 |  if_ne	add	local01, ##512
2c364     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4350
2c368     16 2D E2 F8 | 	getbyte	local04, local04, #0
2c36c     12 2C 0E F2 | 	cmp	local04, #18 wz
2c370     0C 12 06 A6 |  if_e	mov	arg01, #12
2c374     00 14 06 A6 |  if_e	mov	arg02, #0
2c378     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1206
2c37c                 | LR__4351
2c37c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1192
2c380                 | ' 	}
2c380                 | ' 	deselect();
2c380                 | ' 
2c380                 | ' 	return count ? RES_ERROR : RES_OK;
2c380     00 2A 0E F2 | 	cmp	local03, #0 wz
2c384     01 2E 06 56 |  if_ne	mov	local05, #1
2c388     00 2E 06 A6 |  if_e	mov	local05, #0
2c38c     17 FB 01 F6 | 	mov	result1, local05
2c390                 | LR__4352
2c390     A7 F0 03 F6 | 	mov	ptra, fp
2c394     B2 00 A0 FD | 	call	#popregs_
2c398                 | _fatfs_cc_disk_read_ret
2c398     2D 00 64 FD | 	ret
2c39c                 | 
2c39c                 | _fatfs_cc_disk_write
2c39c     04 4A 05 F6 | 	mov	COUNT_, #4
2c3a0     A8 00 A0 FD | 	call	#pushregs_
2c3a4     0A 27 02 F6 | 	mov	local01, arg02
2c3a8     0C 29 02 F6 | 	mov	local02, arg04
2c3ac     0B 2B 02 F6 | 	mov	local03, arg03
2c3b0     00 12 0E F2 | 	cmp	arg01, #0 wz
2c3b4     01 FA 05 56 |  if_ne	mov	result1, #1
2c3b8                 | ' 
2c3b8                 | ' 	return Stat;
2c3b8     01 00 00 AF 
2c3bc     20 E4 05 A1 |  if_e	add	objptr, ##544
2c3c0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c3c4     01 00 00 AF 
2c3c8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c3cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c3d0     01 FA CD F7 | 	test	result1, #1 wz
2c3d4     03 FA 05 56 |  if_ne	mov	result1, #3
2c3d8     D4 00 90 5D |  if_ne	jmp	#LR__4364
2c3dc     01 00 00 FF 
2c3e0     21 E4 05 F1 | 	add	objptr, ##545
2c3e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
2c3e8     01 00 00 FF 
2c3ec     21 E4 85 F1 | 	sub	objptr, ##545
2c3f0     08 16 CE F7 | 	test	arg03, #8 wz
2c3f4     09 2A 66 A0 |  if_e	shl	local03, #9
2c3f8     01 28 0E F2 | 	cmp	local02, #1 wz
2c3fc     30 00 90 5D |  if_ne	jmp	#LR__4360
2c400     18 12 06 F6 | 	mov	arg01, #24
2c404     15 15 02 F6 | 	mov	arg02, local03
2c408     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c40c     FD 2C 02 F6 | 	mov	local04, result1
2c410     07 2C 4E F7 | 	zerox	local04, #7 wz
2c414     84 00 90 5D |  if_ne	jmp	#LR__4363
2c418     13 13 02 F6 | 	mov	arg01, local01
2c41c     FE 14 06 F6 | 	mov	arg02, #254
2c420     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1202
2c424     00 FA 0D F2 | 	cmp	result1, #0 wz
2c428     00 28 06 56 |  if_ne	mov	local02, #0
2c42c     6C 00 90 FD | 	jmp	#LR__4363
2c430                 | LR__4360
2c430     01 00 00 FF 
2c434     21 E4 05 F1 | 	add	objptr, ##545
2c438     F2 2C C2 FA | 	rdbyte	local04, objptr
2c43c     01 00 00 FF 
2c440     21 E4 85 F1 | 	sub	objptr, ##545
2c444     06 2C CE F7 | 	test	local04, #6 wz
2c448     97 12 06 56 |  if_ne	mov	arg01, #151
2c44c     14 15 02 56 |  if_ne	mov	arg02, local02
2c450     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1206
2c454     15 15 02 F6 | 	mov	arg02, local03
2c458     19 12 06 F6 | 	mov	arg01, #25
2c45c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c460     FD 2C 02 F6 | 	mov	local04, result1
2c464     07 2C 4E F7 | 	zerox	local04, #7 wz
2c468     30 00 90 5D |  if_ne	jmp	#LR__4362
2c46c                 | ' 			do {
2c46c                 | LR__4361
2c46c     13 13 02 F6 | 	mov	arg01, local01
2c470     FC 14 06 F6 | 	mov	arg02, #252
2c474     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1202
2c478     00 FA 0D F2 | 	cmp	result1, #0 wz
2c47c     01 00 00 5F 
2c480     00 26 06 51 |  if_ne	add	local01, ##512
2c484     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4361
2c488     00 12 06 F6 | 	mov	arg01, #0
2c48c     FD 14 06 F6 | 	mov	arg02, #253
2c490     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1202
2c494     00 FA 0D F2 | 	cmp	result1, #0 wz
2c498     01 28 06 A6 |  if_e	mov	local02, #1
2c49c                 | LR__4362
2c49c                 | LR__4363
2c49c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1192
2c4a0                 | ' 				count = 1;
2c4a0                 | ' 		}
2c4a0                 | ' 	}
2c4a0                 | ' 	deselect();
2c4a0                 | ' 
2c4a0                 | ' 	return count ? RES_ERROR : RES_OK;
2c4a0     00 28 0E F2 | 	cmp	local02, #0 wz
2c4a4     01 2C 06 56 |  if_ne	mov	local04, #1
2c4a8     00 2C 06 A6 |  if_e	mov	local04, #0
2c4ac     16 FB 01 F6 | 	mov	result1, local04
2c4b0                 | LR__4364
2c4b0     A7 F0 03 F6 | 	mov	ptra, fp
2c4b4     B2 00 A0 FD | 	call	#popregs_
2c4b8                 | _fatfs_cc_disk_write_ret
2c4b8     2D 00 64 FD | 	ret
2c4bc                 | 
2c4bc                 | _fatfs_cc_disk_ioctl
2c4bc     01 4A 05 F6 | 	mov	COUNT_, #1
2c4c0     A8 00 A0 FD | 	call	#pushregs_
2c4c4     30 F0 07 F1 | 	add	ptra, #48
2c4c8     04 4E 05 F1 | 	add	fp, #4
2c4cc     A7 12 42 FC | 	wrbyte	arg01, fp
2c4d0     04 4E 05 F1 | 	add	fp, #4
2c4d4     A7 14 42 FC | 	wrbyte	arg02, fp
2c4d8     04 4E 05 F1 | 	add	fp, #4
2c4dc     A7 16 62 FC | 	wrlong	arg03, fp
2c4e0     08 4E 85 F1 | 	sub	fp, #8
2c4e4     A7 12 CA FA | 	rdbyte	arg01, fp wz
2c4e8     04 4E 85 F1 | 	sub	fp, #4
2c4ec     01 FA 05 56 |  if_ne	mov	result1, #1
2c4f0                 | ' 
2c4f0                 | ' 	return Stat;
2c4f0     01 00 00 AF 
2c4f4     20 E4 05 A1 |  if_e	add	objptr, ##544
2c4f8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c4fc     01 00 00 AF 
2c500     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c504     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c508     01 FA CD F7 | 	test	result1, #1 wz
2c50c     03 FA 05 56 |  if_ne	mov	result1, #3
2c510     E4 01 90 5D |  if_ne	jmp	#LR__4378
2c514     10 4E 05 F1 | 	add	fp, #16
2c518     A7 02 68 FC | 	wrlong	#1, fp
2c51c                 | ' 
2c51c                 | ' 	res = RES_ERROR;
2c51c                 | ' 	switch (ctrl) {
2c51c     08 4E 85 F1 | 	sub	fp, #8
2c520     A7 26 C2 FA | 	rdbyte	local01, fp
2c524     08 4E 85 F1 | 	sub	fp, #8
2c528     04 26 26 F3 | 	fle	local01, #4
2c52c     30 26 62 FD | 	jmprel	local01
2c530                 | LR__4370
2c530     10 00 90 FD | 	jmp	#LR__4371
2c534     24 00 90 FD | 	jmp	#LR__4372
2c538     A0 01 90 FD | 	jmp	#LR__4376
2c53c     80 01 90 FD | 	jmp	#LR__4375
2c540     98 01 90 FD | 	jmp	#LR__4376
2c544                 | LR__4371
2c544     B4 79 B0 FD | 	call	#_fatfs_cc_select_1196
2c548     00 FA 0D F2 | 	cmp	result1, #0 wz
2c54c     10 4E 05 51 |  if_ne	add	fp, #16
2c550     A7 00 68 5C |  if_ne	wrlong	#0, fp
2c554     10 4E 85 51 |  if_ne	sub	fp, #16
2c558                 | ' 			break;
2c558     8C 01 90 FD | 	jmp	#LR__4377
2c55c                 | LR__4372
2c55c     09 12 06 F6 | 	mov	arg01, #9
2c560     00 14 06 F6 | 	mov	arg02, #0
2c564     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1206
2c568     FD 26 02 F6 | 	mov	local01, result1
2c56c     07 26 4E F7 | 	zerox	local01, #7 wz
2c570     74 01 90 5D |  if_ne	jmp	#LR__4377
2c574     18 4E 05 F1 | 	add	fp, #24
2c578     A7 12 02 F6 | 	mov	arg01, fp
2c57c     18 4E 85 F1 | 	sub	fp, #24
2c580     10 14 06 F6 | 	mov	arg02, #16
2c584     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1200
2c588     00 FA 0D F2 | 	cmp	result1, #0 wz
2c58c     58 01 90 AD |  if_e	jmp	#LR__4377
2c590     18 4E 05 F1 | 	add	fp, #24
2c594     A7 26 C2 FA | 	rdbyte	local01, fp
2c598     18 4E 85 F1 | 	sub	fp, #24
2c59c     06 26 46 F0 | 	shr	local01, #6
2c5a0     01 26 0E F2 | 	cmp	local01, #1 wz
2c5a4     5C 00 90 5D |  if_ne	jmp	#LR__4373
2c5a8     21 4E 05 F1 | 	add	fp, #33
2c5ac     A7 26 C2 FA | 	rdbyte	local01, fp
2c5b0     01 4E 85 F1 | 	sub	fp, #1
2c5b4     A7 FA C1 FA | 	rdbyte	result1, fp
2c5b8     FD FA 31 F9 | 	getword	result1, result1, #0
2c5bc     08 FA 65 F0 | 	shl	result1, #8
2c5c0     FD 26 02 F1 | 	add	local01, result1
2c5c4     01 4E 85 F1 | 	sub	fp, #1
2c5c8     A7 FA C1 FA | 	rdbyte	result1, fp
2c5cc     3F FA 05 F5 | 	and	result1, #63
2c5d0     10 FA 65 F0 | 	shl	result1, #16
2c5d4     FD 26 02 F1 | 	add	local01, result1
2c5d8     01 26 06 F1 | 	add	local01, #1
2c5dc     09 4E 05 F1 | 	add	fp, #9
2c5e0     A7 26 62 FC | 	wrlong	local01, fp
2c5e4     1C 4E 85 F1 | 	sub	fp, #28
2c5e8     A7 26 02 FB | 	rdlong	local01, fp
2c5ec     1C 4E 05 F1 | 	add	fp, #28
2c5f0     A7 FA 01 FB | 	rdlong	result1, fp
2c5f4     28 4E 85 F1 | 	sub	fp, #40
2c5f8     0A FA 65 F0 | 	shl	result1, #10
2c5fc     13 FB 61 FC | 	wrlong	result1, local01
2c600     AC 00 90 FD | 	jmp	#LR__4374
2c604                 | LR__4373
2c604     1D 4E 05 F1 | 	add	fp, #29
2c608     A7 26 C2 FA | 	rdbyte	local01, fp
2c60c     13 27 42 F8 | 	getnib	local01, local01, #0
2c610     05 4E 05 F1 | 	add	fp, #5
2c614     A7 FA C1 FA | 	rdbyte	result1, fp
2c618     80 FA 05 F5 | 	and	result1, #128
2c61c     07 FA C5 F0 | 	sar	result1, #7
2c620     FD 26 02 F1 | 	add	local01, result1
2c624     01 4E 85 F1 | 	sub	fp, #1
2c628     A7 FA C1 FA | 	rdbyte	result1, fp
2c62c     03 FA 05 F5 | 	and	result1, #3
2c630     01 FA 65 F0 | 	shl	result1, #1
2c634     FD 26 02 F1 | 	add	local01, result1
2c638     02 26 06 F1 | 	add	local01, #2
2c63c     0D 4E 85 F1 | 	sub	fp, #13
2c640     A7 26 42 FC | 	wrbyte	local01, fp
2c644     0C 4E 05 F1 | 	add	fp, #12
2c648     A7 26 C2 FA | 	rdbyte	local01, fp
2c64c     06 26 46 F0 | 	shr	local01, #6
2c650     01 4E 85 F1 | 	sub	fp, #1
2c654     A7 FA C1 FA | 	rdbyte	result1, fp
2c658     FD FA 31 F9 | 	getword	result1, result1, #0
2c65c     02 FA 65 F0 | 	shl	result1, #2
2c660     FD 26 02 F1 | 	add	local01, result1
2c664     01 4E 85 F1 | 	sub	fp, #1
2c668     A7 FA C1 FA | 	rdbyte	result1, fp
2c66c     03 FA 05 F5 | 	and	result1, #3
2c670     FD FA 31 F9 | 	getword	result1, result1, #0
2c674     0A FA 65 F0 | 	shl	result1, #10
2c678     FD 26 02 F1 | 	add	local01, result1
2c67c     01 26 06 F1 | 	add	local01, #1
2c680     0A 4E 05 F1 | 	add	fp, #10
2c684     A7 26 62 FC | 	wrlong	local01, fp
2c688     1C 4E 85 F1 | 	sub	fp, #28
2c68c     A7 26 02 FB | 	rdlong	local01, fp
2c690     1C 4E 05 F1 | 	add	fp, #28
2c694     A7 FA 01 FB | 	rdlong	result1, fp
2c698     14 4E 85 F1 | 	sub	fp, #20
2c69c     A7 16 C2 FA | 	rdbyte	arg03, fp
2c6a0     14 4E 85 F1 | 	sub	fp, #20
2c6a4     09 16 86 F1 | 	sub	arg03, #9
2c6a8     0B FB 61 F0 | 	shl	result1, arg03
2c6ac     13 FB 61 FC | 	wrlong	result1, local01
2c6b0                 | LR__4374
2c6b0     10 4E 05 F1 | 	add	fp, #16
2c6b4     A7 00 68 FC | 	wrlong	#0, fp
2c6b8     10 4E 85 F1 | 	sub	fp, #16
2c6bc                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2c6bc                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2c6bc                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2c6bc                 | ' 				}
2c6bc                 | ' 				res = RES_OK;
2c6bc                 | ' 			}
2c6bc                 | ' 			break;
2c6bc     28 00 90 FD | 	jmp	#LR__4377
2c6c0                 | LR__4375
2c6c0     0C 4E 05 F1 | 	add	fp, #12
2c6c4     A7 26 02 FB | 	rdlong	local01, fp
2c6c8     13 01 69 FC | 	wrlong	#128, local01
2c6cc     04 4E 05 F1 | 	add	fp, #4
2c6d0     A7 00 68 FC | 	wrlong	#0, fp
2c6d4     10 4E 85 F1 | 	sub	fp, #16
2c6d8                 | ' 			*(DWORD*)buff = 128;
2c6d8                 | ' 			res = RES_OK;
2c6d8                 | ' 			break;
2c6d8     0C 00 90 FD | 	jmp	#LR__4377
2c6dc                 | LR__4376
2c6dc     10 4E 05 F1 | 	add	fp, #16
2c6e0     A7 08 68 FC | 	wrlong	#4, fp
2c6e4     10 4E 85 F1 | 	sub	fp, #16
2c6e8                 | LR__4377
2c6e8     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1192
2c6ec                 | ' 			res = RES_PARERR;
2c6ec                 | ' 	}
2c6ec                 | ' 
2c6ec                 | ' 	deselect();
2c6ec                 | ' 
2c6ec                 | ' 	return res;
2c6ec     10 4E 05 F1 | 	add	fp, #16
2c6f0     A7 FA 01 FB | 	rdlong	result1, fp
2c6f4     10 4E 85 F1 | 	sub	fp, #16
2c6f8                 | LR__4378
2c6f8     A7 F0 03 F6 | 	mov	ptra, fp
2c6fc     B2 00 A0 FD | 	call	#popregs_
2c700                 | _fatfs_cc_disk_ioctl_ret
2c700     2D 00 64 FD | 	ret
2c704                 | 
2c704                 | _fatfs_cc_disk_setpins
2c704     00 12 0E F2 | 	cmp	arg01, #0 wz
2c708     01 FA 65 56 |  if_ne	neg	result1, #1
2c70c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2c710     01 00 00 FF 
2c714     10 E4 05 F1 | 	add	objptr, ##528
2c718     F2 14 62 FC | 	wrlong	arg02, objptr
2c71c     04 E4 05 F1 | 	add	objptr, #4
2c720     F2 16 62 FC | 	wrlong	arg03, objptr
2c724     04 E4 05 F1 | 	add	objptr, #4
2c728     F2 18 62 FC | 	wrlong	arg04, objptr
2c72c     04 E4 05 F1 | 	add	objptr, #4
2c730     F2 1A 62 FC | 	wrlong	arg05, objptr
2c734     01 00 00 FF 
2c738     1C E4 85 F1 | 	sub	objptr, ##540
2c73c     00 FA 05 F6 | 	mov	result1, #0
2c740                 | _fatfs_cc_disk_setpins_ret
2c740     2D 00 64 FD | 	ret
2c744                 | 
2c744                 | _fatfs_cc_tchar2uni
2c744     09 01 02 FB | 	rdlong	_var01, arg01
2c748     00 03 02 F6 | 	mov	_var02, _var01
2c74c     01 00 06 F1 | 	add	_var01, #1
2c750     00 05 02 F6 | 	mov	_var03, _var01
2c754     01 07 C2 FA | 	rdbyte	_var04, _var02
2c758     80 06 CE F7 | 	test	_var04, #128 wz
2c75c     E8 00 90 AD |  if_e	jmp	#LR__4387
2c760     03 09 02 F6 | 	mov	_var05, _var04
2c764     E0 08 06 F5 | 	and	_var05, #224
2c768     C0 08 0E F2 | 	cmp	_var05, #192 wz
2c76c     1F 06 06 A5 |  if_e	and	_var04, #31
2c770     01 0A 06 A6 |  if_e	mov	_var06, #1
2c774     34 00 90 AD |  if_e	jmp	#LR__4381
2c778     03 09 02 F6 | 	mov	_var05, _var04
2c77c     F0 08 06 F5 | 	and	_var05, #240
2c780     E0 08 0E F2 | 	cmp	_var05, #224 wz
2c784     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2c788     02 0A 06 A6 |  if_e	mov	_var06, #2
2c78c     1C 00 90 AD |  if_e	jmp	#LR__4380
2c790     03 09 02 F6 | 	mov	_var05, _var04
2c794     F8 08 06 F5 | 	and	_var05, #248
2c798     F0 08 0E F2 | 	cmp	_var05, #240 wz
2c79c     07 06 06 A5 |  if_e	and	_var04, #7
2c7a0     03 0A 06 A6 |  if_e	mov	_var06, #3
2c7a4                 | ' 			return 0xFFFFFFFF;
2c7a4     01 FA 65 56 |  if_ne	neg	result1, #1
2c7a8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c7ac                 | LR__4380
2c7ac                 | LR__4381
2c7ac                 | ' 		}
2c7ac                 | ' 		do {
2c7ac                 | LR__4382
2c7ac     02 0D C2 FA | 	rdbyte	_var07, _var03
2c7b0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2c7b4     C0 08 06 F5 | 	and	_var05, #192
2c7b8     80 08 0E F2 | 	cmp	_var05, #128 wz
2c7bc     01 04 06 F1 | 	add	_var03, #1
2c7c0     01 FA 65 56 |  if_ne	neg	result1, #1
2c7c4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2c7c8     06 06 66 F0 | 	shl	_var04, #6
2c7cc     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2c7d0     3F 02 06 F5 | 	and	_var02, #63
2c7d4     01 07 42 F5 | 	or	_var04, _var02
2c7d8     F4 0B 6E FB | 	djnz	_var06, #LR__4382
2c7dc     80 06 16 F2 | 	cmp	_var04, #128 wc
2c7e0     24 00 90 CD |  if_b	jmp	#LR__4384
2c7e4     6C 00 00 FF 
2c7e8     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2c7ec     0C 00 90 CD |  if_b	jmp	#LR__4383
2c7f0     70 00 00 FF 
2c7f4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2c7f8     0C 00 90 CD |  if_b	jmp	#LR__4384
2c7fc                 | LR__4383
2c7fc     80 08 00 FF 
2c800     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2c804     08 00 90 CD |  if_b	jmp	#LR__4385
2c808                 | LR__4384
2c808     01 FA 65 F6 | 	neg	result1, #1
2c80c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2c810                 | LR__4385
2c810     80 00 00 FF 
2c814     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2c818     2C 00 90 CD |  if_b	jmp	#LR__4386
2c81c     03 03 02 F6 | 	mov	_var02, _var04
2c820     80 00 00 FF 
2c824     00 02 86 F1 | 	sub	_var02, ##65536
2c828     06 02 66 F0 | 	shl	_var02, #6
2c82c     80 FF 01 FF 
2c830     00 02 06 F5 | 	and	_var02, ##67043328
2c834     6E 00 6C FF 
2c838     00 08 06 F6 | 	mov	_var05, ##-671032320
2c83c     01 09 42 F5 | 	or	_var05, _var02
2c840     09 06 46 F7 | 	zerox	_var04, #9
2c844     04 07 42 F5 | 	or	_var04, _var05
2c848                 | LR__4386
2c848                 | LR__4387
2c848     09 05 62 FC | 	wrlong	_var03, arg01
2c84c                 | ' 	}
2c84c                 | ' #line 811 "ff.c"
2c84c                 | ' 	*str = p;
2c84c                 | ' 	return uc;
2c84c     03 FB 01 F6 | 	mov	result1, _var04
2c850                 | _fatfs_cc_tchar2uni_ret
2c850     2D 00 64 FD | 	ret
2c854                 | 
2c854                 | _fatfs_cc_put_utf
2c854     80 12 16 F2 | 	cmp	arg01, #128 wc
2c858     18 00 90 3D |  if_ae	jmp	#LR__4390
2c85c     01 16 16 F2 | 	cmp	arg03, #1 wc
2c860     00 FA 05 C6 |  if_b	mov	result1, #0
2c864     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c868     0A 13 42 FC | 	wrbyte	arg01, arg02
2c86c                 | ' 		*buf = (TCHAR)chr;
2c86c                 | ' 		return 1;
2c86c     01 FA 05 F6 | 	mov	result1, #1
2c870     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c874                 | LR__4390
2c874     04 00 00 FF 
2c878     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2c87c     40 00 90 3D |  if_ae	jmp	#LR__4391
2c880     02 16 16 F2 | 	cmp	arg03, #2 wc
2c884     00 FA 05 C6 |  if_b	mov	result1, #0
2c888     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c88c     09 FB 01 F6 | 	mov	result1, arg01
2c890     06 FA 45 F0 | 	shr	result1, #6
2c894     1F FA 05 F5 | 	and	result1, #31
2c898     C0 16 06 F6 | 	mov	arg03, #192
2c89c     FD 16 42 F5 | 	or	arg03, result1
2c8a0     0A 17 42 FC | 	wrbyte	arg03, arg02
2c8a4     01 14 06 F1 | 	add	arg02, #1
2c8a8     3F 12 06 F5 | 	and	arg01, #63
2c8ac     80 FA 05 F6 | 	mov	result1, #128
2c8b0     09 FB 41 F5 | 	or	result1, arg01
2c8b4     0A FB 41 FC | 	wrbyte	result1, arg02
2c8b8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2c8b8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c8b8                 | ' 		return 2;
2c8b8     02 FA 05 F6 | 	mov	result1, #2
2c8bc     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c8c0                 | LR__4391
2c8c0     80 00 00 FF 
2c8c4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2c8c8     70 00 90 3D |  if_ae	jmp	#LR__4394
2c8cc     03 16 16 F2 | 	cmp	arg03, #3 wc
2c8d0     18 00 90 CD |  if_b	jmp	#LR__4392
2c8d4     6C 00 00 FF 
2c8d8     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2c8dc     14 00 90 CD |  if_b	jmp	#LR__4393
2c8e0     70 00 00 FF 
2c8e4     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2c8e8     08 00 90 3D |  if_ae	jmp	#LR__4393
2c8ec                 | LR__4392
2c8ec     00 FA 05 F6 | 	mov	result1, #0
2c8f0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c8f4                 | LR__4393
2c8f4     09 FB 59 F8 | 	getnib	result1, arg01, #3
2c8f8     E0 16 06 F6 | 	mov	arg03, #224
2c8fc     FD 16 42 F5 | 	or	arg03, result1
2c900     0A 17 42 FC | 	wrbyte	arg03, arg02
2c904     01 14 06 F1 | 	add	arg02, #1
2c908     09 FB 01 F6 | 	mov	result1, arg01
2c90c     06 FA 45 F0 | 	shr	result1, #6
2c910     3F FA 05 F5 | 	and	result1, #63
2c914     80 16 06 F6 | 	mov	arg03, #128
2c918     FD 16 42 F5 | 	or	arg03, result1
2c91c     0A 17 42 FC | 	wrbyte	arg03, arg02
2c920     01 14 06 F1 | 	add	arg02, #1
2c924     3F 12 06 F5 | 	and	arg01, #63
2c928     80 FA 05 F6 | 	mov	result1, #128
2c92c     09 FB 41 F5 | 	or	result1, arg01
2c930     0A FB 41 FC | 	wrbyte	result1, arg02
2c934                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2c934                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c934                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c934                 | ' 		return 3;
2c934     03 FA 05 F6 | 	mov	result1, #3
2c938     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2c93c                 | LR__4394
2c93c     04 16 16 F2 | 	cmp	arg03, #4 wc
2c940     00 FA 05 C6 |  if_b	mov	result1, #0
2c944     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2c948     09 01 02 F6 | 	mov	_var01, arg01
2c94c     E0 01 06 F4 | 	bitl	_var01, #480
2c950     00 00 6C FF 
2c954     00 00 86 F1 | 	sub	_var01, ##-671088640
2c958     06 00 46 F0 | 	shr	_var01, #6
2c95c     09 13 32 F9 | 	getword	arg01, arg01, #0
2c960     6E 00 00 FF 
2c964     00 12 86 F1 | 	sub	arg01, ##56320
2c968     00 08 00 FF 
2c96c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2c970     02 00 00 CF 
2c974     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2c978     00 FA 05 36 |  if_ae	mov	result1, #0
2c97c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2c980     09 01 42 F5 | 	or	_var01, arg01
2c984     80 00 00 FF 
2c988     00 00 06 F1 | 	add	_var01, ##65536
2c98c     00 FB 01 F6 | 	mov	result1, _var01
2c990     12 FA 45 F0 | 	shr	result1, #18
2c994     07 FA 05 F5 | 	and	result1, #7
2c998     F0 16 06 F6 | 	mov	arg03, #240
2c99c     FD 16 42 F5 | 	or	arg03, result1
2c9a0     0A 17 42 FC | 	wrbyte	arg03, arg02
2c9a4     01 14 06 F1 | 	add	arg02, #1
2c9a8     00 FB 01 F6 | 	mov	result1, _var01
2c9ac     0C FA 45 F0 | 	shr	result1, #12
2c9b0     3F FA 05 F5 | 	and	result1, #63
2c9b4     80 16 06 F6 | 	mov	arg03, #128
2c9b8     FD 16 42 F5 | 	or	arg03, result1
2c9bc     0A 17 42 FC | 	wrbyte	arg03, arg02
2c9c0     01 14 06 F1 | 	add	arg02, #1
2c9c4     00 FB 01 F6 | 	mov	result1, _var01
2c9c8     06 FA 45 F0 | 	shr	result1, #6
2c9cc     3F FA 05 F5 | 	and	result1, #63
2c9d0     80 16 06 F6 | 	mov	arg03, #128
2c9d4     FD 16 42 F5 | 	or	arg03, result1
2c9d8     0A 17 42 FC | 	wrbyte	arg03, arg02
2c9dc     01 14 06 F1 | 	add	arg02, #1
2c9e0     3F 00 06 F5 | 	and	_var01, #63
2c9e4     80 FA 05 F6 | 	mov	result1, #128
2c9e8     00 FB 41 F5 | 	or	result1, _var01
2c9ec     0A FB 41 FC | 	wrbyte	result1, arg02
2c9f0                 | ' 	chr = (hc | chr) + 0x10000;
2c9f0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2c9f0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2c9f0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2c9f0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2c9f0                 | ' 	return 4;
2c9f0     04 FA 05 F6 | 	mov	result1, #4
2c9f4                 | _fatfs_cc_put_utf_ret
2c9f4     2D 00 64 FD | 	ret
2c9f8                 | 
2c9f8                 | _fatfs_cc_sync_window
2c9f8     02 4A 05 F6 | 	mov	COUNT_, #2
2c9fc     A8 00 A0 FD | 	call	#pushregs_
2ca00     09 27 02 F6 | 	mov	local01, arg01
2ca04     00 28 06 F6 | 	mov	local02, #0
2ca08     03 26 06 F1 | 	add	local01, #3
2ca0c     13 FB C9 FA | 	rdbyte	result1, local01 wz
2ca10     03 26 86 F1 | 	sub	local01, #3
2ca14     A4 00 90 AD |  if_e	jmp	#LR__4402
2ca18     01 26 06 F1 | 	add	local01, #1
2ca1c     13 13 C2 FA | 	rdbyte	arg01, local01
2ca20     33 26 06 F1 | 	add	local01, #51
2ca24     13 15 02 F6 | 	mov	arg02, local01
2ca28     04 26 86 F1 | 	sub	local01, #4
2ca2c     13 17 02 FB | 	rdlong	arg03, local01
2ca30     30 26 86 F1 | 	sub	local01, #48
2ca34     01 18 06 F6 | 	mov	arg04, #1
2ca38     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2ca3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca40     74 00 90 5D |  if_ne	jmp	#LR__4400
2ca44     03 26 06 F1 | 	add	local01, #3
2ca48     13 01 48 FC | 	wrbyte	#0, local01
2ca4c     2D 26 06 F1 | 	add	local01, #45
2ca50     13 FB 01 FB | 	rdlong	result1, local01
2ca54     0C 26 86 F1 | 	sub	local01, #12
2ca58     13 19 02 FB | 	rdlong	arg04, local01
2ca5c     0C FB 81 F1 | 	sub	result1, arg04
2ca60     08 26 86 F1 | 	sub	local01, #8
2ca64     13 19 02 FB | 	rdlong	arg04, local01
2ca68     1C 26 86 F1 | 	sub	local01, #28
2ca6c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ca70     48 00 90 3D |  if_ae	jmp	#LR__4401
2ca74     02 26 06 F1 | 	add	local01, #2
2ca78     13 19 C2 FA | 	rdbyte	arg04, local01
2ca7c     02 26 86 F1 | 	sub	local01, #2
2ca80     02 18 0E F2 | 	cmp	arg04, #2 wz
2ca84     34 00 90 5D |  if_ne	jmp	#LR__4401
2ca88     01 26 06 F1 | 	add	local01, #1
2ca8c     13 13 C2 FA | 	rdbyte	arg01, local01
2ca90     33 26 06 F1 | 	add	local01, #51
2ca94     13 15 02 F6 | 	mov	arg02, local01
2ca98     04 26 86 F1 | 	sub	local01, #4
2ca9c     13 17 02 FB | 	rdlong	arg03, local01
2caa0     14 26 86 F1 | 	sub	local01, #20
2caa4     13 27 02 FB | 	rdlong	local01, local01
2caa8     13 17 02 F1 | 	add	arg03, local01
2caac     01 18 06 F6 | 	mov	arg04, #1
2cab0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2cab4     04 00 90 FD | 	jmp	#LR__4401
2cab8                 | LR__4400
2cab8     01 28 06 F6 | 	mov	local02, #1
2cabc                 | LR__4401
2cabc                 | LR__4402
2cabc                 | ' 			res = FR_DISK_ERR;
2cabc                 | ' 		}
2cabc                 | ' 	}
2cabc                 | ' 	return res;
2cabc     14 FB 01 F6 | 	mov	result1, local02
2cac0     A7 F0 03 F6 | 	mov	ptra, fp
2cac4     B2 00 A0 FD | 	call	#popregs_
2cac8                 | _fatfs_cc_sync_window_ret
2cac8     2D 00 64 FD | 	ret
2cacc                 | 
2cacc                 | _fatfs_cc_move_window
2cacc     03 4A 05 F6 | 	mov	COUNT_, #3
2cad0     A8 00 A0 FD | 	call	#pushregs_
2cad4     09 27 02 F6 | 	mov	local01, arg01
2cad8     0A 29 02 F6 | 	mov	local02, arg02
2cadc     00 2A 06 F6 | 	mov	local03, #0
2cae0     30 26 06 F1 | 	add	local01, #48
2cae4     13 19 02 FB | 	rdlong	arg04, local01
2cae8     30 26 86 F1 | 	sub	local01, #48
2caec     0C 29 0A F2 | 	cmp	local02, arg04 wz
2caf0     40 00 90 AD |  if_e	jmp	#LR__4411
2caf4     13 13 02 F6 | 	mov	arg01, local01
2caf8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2cafc     FD 2A 0A F6 | 	mov	local03, result1 wz
2cb00     30 00 90 5D |  if_ne	jmp	#LR__4410
2cb04     01 26 06 F1 | 	add	local01, #1
2cb08     13 13 C2 FA | 	rdbyte	arg01, local01
2cb0c     33 26 06 F1 | 	add	local01, #51
2cb10     13 15 02 F6 | 	mov	arg02, local01
2cb14     14 17 02 F6 | 	mov	arg03, local02
2cb18     01 18 06 F6 | 	mov	arg04, #1
2cb1c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2cb20     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb24     01 28 66 56 |  if_ne	neg	local02, #1
2cb28     01 2A 06 56 |  if_ne	mov	local03, #1
2cb2c     04 26 86 F1 | 	sub	local01, #4
2cb30     13 29 62 FC | 	wrlong	local02, local01
2cb34                 | LR__4410
2cb34                 | LR__4411
2cb34                 | ' 				sect = (LBA_t)0 - 1;
2cb34                 | ' 				res = FR_DISK_ERR;
2cb34                 | ' 			}
2cb34                 | ' 			fs->winsect = sect;
2cb34                 | ' 		}
2cb34                 | ' 	}
2cb34                 | ' 	return res;
2cb34     15 FB 01 F6 | 	mov	result1, local03
2cb38     A7 F0 03 F6 | 	mov	ptra, fp
2cb3c     B2 00 A0 FD | 	call	#popregs_
2cb40                 | _fatfs_cc_move_window_ret
2cb40     2D 00 64 FD | 	ret
2cb44                 | 
2cb44                 | _fatfs_cc_sync_fs
2cb44     02 4A 05 F6 | 	mov	COUNT_, #2
2cb48     A8 00 A0 FD | 	call	#pushregs_
2cb4c     09 27 02 F6 | 	mov	local01, arg01
2cb50     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2cb54     FD 28 0A F6 | 	mov	local02, result1 wz
2cb58     D8 00 90 5D |  if_ne	jmp	#LR__4421
2cb5c     13 19 C2 FA | 	rdbyte	arg04, local01
2cb60     03 18 0E F2 | 	cmp	arg04, #3 wz
2cb64     04 26 06 A1 |  if_e	add	local01, #4
2cb68     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2cb6c     04 26 86 A1 |  if_e	sub	local01, #4
2cb70     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2cb74     A0 00 90 5D |  if_ne	jmp	#LR__4420
2cb78     34 26 06 F1 | 	add	local01, #52
2cb7c     13 13 02 F6 | 	mov	arg01, local01
2cb80     00 14 06 F6 | 	mov	arg02, #0
2cb84     09 16 C6 F9 | 	decod	arg03, #9
2cb88     98 00 A0 FD | 	call	#\builtin_bytefill_
2cb8c     13 13 02 F6 | 	mov	arg01, local01
2cb90     FE 13 06 F1 | 	add	arg01, #510
2cb94     55 00 80 FF 
2cb98     09 AB 58 FC | 	wrword	##43605, arg01
2cb9c     A9 B0 A0 FF 
2cba0     13 A5 68 FC | 	wrlong	##1096897106, local01
2cba4     13 13 02 F6 | 	mov	arg01, local01
2cba8     E4 13 06 F1 | 	add	arg01, #484
2cbac     B9 A0 B0 FF 
2cbb0     09 E5 68 FC | 	wrlong	##1631679090, arg01
2cbb4     13 13 02 F6 | 	mov	arg01, local01
2cbb8     E8 13 06 F1 | 	add	arg01, #488
2cbbc     20 26 86 F1 | 	sub	local01, #32
2cbc0     13 15 02 FB | 	rdlong	arg02, local01
2cbc4     09 15 62 FC | 	wrlong	arg02, arg01
2cbc8     20 26 06 F1 | 	add	local01, #32
2cbcc     13 13 02 F6 | 	mov	arg01, local01
2cbd0     EC 13 06 F1 | 	add	arg01, #492
2cbd4     24 26 86 F1 | 	sub	local01, #36
2cbd8     13 15 02 FB | 	rdlong	arg02, local01
2cbdc     09 15 62 FC | 	wrlong	arg02, arg01
2cbe0     10 26 06 F1 | 	add	local01, #16
2cbe4     13 17 02 FB | 	rdlong	arg03, local01
2cbe8     01 16 06 F1 | 	add	arg03, #1
2cbec     10 26 06 F1 | 	add	local01, #16
2cbf0     13 17 62 FC | 	wrlong	arg03, local01
2cbf4     2F 26 86 F1 | 	sub	local01, #47
2cbf8     13 13 C2 FA | 	rdbyte	arg01, local01
2cbfc     33 26 06 F1 | 	add	local01, #51
2cc00     13 15 02 F6 | 	mov	arg02, local01
2cc04     01 18 06 F6 | 	mov	arg04, #1
2cc08     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2cc0c     30 26 86 F1 | 	sub	local01, #48
2cc10     13 01 48 FC | 	wrbyte	#0, local01
2cc14     04 26 86 F1 | 	sub	local01, #4
2cc18                 | LR__4420
2cc18     01 26 06 F1 | 	add	local01, #1
2cc1c     13 13 C2 FA | 	rdbyte	arg01, local01
2cc20     00 14 06 F6 | 	mov	arg02, #0
2cc24     00 16 06 F6 | 	mov	arg03, #0
2cc28     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2cc2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc30     01 28 06 56 |  if_ne	mov	local02, #1
2cc34                 | LR__4421
2cc34                 | ' 	}
2cc34                 | ' 
2cc34                 | ' 	return res;
2cc34     14 FB 01 F6 | 	mov	result1, local02
2cc38     A7 F0 03 F6 | 	mov	ptra, fp
2cc3c     B2 00 A0 FD | 	call	#popregs_
2cc40                 | _fatfs_cc_sync_fs_ret
2cc40     2D 00 64 FD | 	ret
2cc44                 | 
2cc44                 | _fatfs_cc_clst2sect
2cc44     02 14 86 F1 | 	sub	arg02, #2
2cc48     18 12 06 F1 | 	add	arg01, #24
2cc4c     09 01 02 FB | 	rdlong	_var01, arg01
2cc50     18 12 86 F1 | 	sub	arg01, #24
2cc54     02 00 86 F1 | 	sub	_var01, #2
2cc58     00 15 12 F2 | 	cmp	arg02, _var01 wc
2cc5c     00 FA 05 36 |  if_ae	mov	result1, #0
2cc60     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2cc64     0A 12 06 F1 | 	add	arg01, #10
2cc68     09 01 E2 FA | 	rdword	_var01, arg01
2cc6c     0A 01 02 FD | 	qmul	_var01, arg02
2cc70                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2cc70     22 12 06 F1 | 	add	arg01, #34
2cc74     09 FB 01 FB | 	rdlong	result1, arg01
2cc78     18 00 62 FD | 	getqx	_var01
2cc7c     00 FB 01 F1 | 	add	result1, _var01
2cc80                 | _fatfs_cc_clst2sect_ret
2cc80     2D 00 64 FD | 	ret
2cc84                 | 
2cc84                 | _fatfs_cc_get_fat
2cc84     07 4A 05 F6 | 	mov	COUNT_, #7
2cc88     A8 00 A0 FD | 	call	#pushregs_
2cc8c     0A 27 02 F6 | 	mov	local01, arg02
2cc90     09 29 02 FB | 	rdlong	local02, arg01
2cc94     02 26 16 F2 | 	cmp	local01, #2 wc
2cc98     14 00 90 CD |  if_b	jmp	#LR__4430
2cc9c     18 28 06 F1 | 	add	local02, #24
2cca0     14 2B 02 FB | 	rdlong	local03, local02
2cca4     18 28 86 F1 | 	sub	local02, #24
2cca8     15 27 12 F2 | 	cmp	local01, local03 wc
2ccac     08 00 90 CD |  if_b	jmp	#LR__4431
2ccb0                 | LR__4430
2ccb0     01 2C 06 F6 | 	mov	local04, #1
2ccb4     60 01 90 FD | 	jmp	#LR__4438
2ccb8                 | LR__4431
2ccb8     01 2C 66 F6 | 	neg	local04, #1
2ccbc                 | ' 		val = 0xFFFFFFFF;
2ccbc                 | ' 
2ccbc                 | ' 		switch (fs->fs_type) {
2ccbc     14 2F C2 FA | 	rdbyte	local05, local02
2ccc0     01 2E 86 F1 | 	sub	local05, #1
2ccc4     03 2E 26 F3 | 	fle	local05, #3
2ccc8     30 2E 62 FD | 	jmprel	local05
2cccc                 | LR__4432
2cccc     0C 00 90 FD | 	jmp	#LR__4433
2ccd0     B8 00 90 FD | 	jmp	#LR__4434
2ccd4     F8 00 90 FD | 	jmp	#LR__4435
2ccd8     38 01 90 FD | 	jmp	#LR__4436
2ccdc                 | LR__4433
2ccdc     13 2F 02 F6 | 	mov	local05, local01
2cce0     13 13 02 F6 | 	mov	arg01, local01
2cce4     01 12 46 F0 | 	shr	arg01, #1
2cce8     09 2F 02 F1 | 	add	local05, arg01
2ccec     14 13 02 F6 | 	mov	arg01, local02
2ccf0     17 31 02 F6 | 	mov	local06, local05
2ccf4     09 30 46 F0 | 	shr	local06, #9
2ccf8     24 28 06 F1 | 	add	local02, #36
2ccfc     14 15 02 FB | 	rdlong	arg02, local02
2cd00     24 28 86 F1 | 	sub	local02, #36
2cd04     18 15 02 F1 | 	add	arg02, local06
2cd08     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2cd0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd10     04 01 90 5D |  if_ne	jmp	#LR__4437
2cd14     17 31 02 F6 | 	mov	local06, local05
2cd18     FF 31 06 F5 | 	and	local06, #511
2cd1c     34 28 06 F1 | 	add	local02, #52
2cd20     14 31 02 F1 | 	add	local06, local02
2cd24     18 33 C2 FA | 	rdbyte	local07, local06
2cd28     34 28 86 F1 | 	sub	local02, #52
2cd2c     14 13 02 F6 | 	mov	arg01, local02
2cd30     01 2E 06 F1 | 	add	local05, #1
2cd34     17 31 02 F6 | 	mov	local06, local05
2cd38     09 30 46 F0 | 	shr	local06, #9
2cd3c     24 28 06 F1 | 	add	local02, #36
2cd40     14 15 02 FB | 	rdlong	arg02, local02
2cd44     24 28 86 F1 | 	sub	local02, #36
2cd48     18 15 02 F1 | 	add	arg02, local06
2cd4c     7C FD BF FD | 	call	#_fatfs_cc_move_window
2cd50     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd54     C0 00 90 5D |  if_ne	jmp	#LR__4437
2cd58     FF 2F 06 F5 | 	and	local05, #511
2cd5c     34 28 06 F1 | 	add	local02, #52
2cd60     14 2F 02 F1 | 	add	local05, local02
2cd64     17 31 C2 FA | 	rdbyte	local06, local05
2cd68     08 30 66 F0 | 	shl	local06, #8
2cd6c     18 33 42 F5 | 	or	local07, local06
2cd70     01 26 CE F7 | 	test	local01, #1 wz
2cd74     04 32 46 50 |  if_ne	shr	local07, #4
2cd78     19 2B 02 56 |  if_ne	mov	local03, local07
2cd7c     0B 32 46 A7 |  if_e	zerox	local07, #11
2cd80     19 2B 02 A6 |  if_e	mov	local03, local07
2cd84     15 2D 02 F6 | 	mov	local04, local03
2cd88                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2cd88                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2cd88                 | ' 			break;
2cd88     8C 00 90 FD | 	jmp	#LR__4437
2cd8c                 | LR__4434
2cd8c     14 13 02 F6 | 	mov	arg01, local02
2cd90     13 31 02 F6 | 	mov	local06, local01
2cd94     08 30 46 F0 | 	shr	local06, #8
2cd98     24 28 06 F1 | 	add	local02, #36
2cd9c     14 15 02 FB | 	rdlong	arg02, local02
2cda0     24 28 86 F1 | 	sub	local02, #36
2cda4     18 15 02 F1 | 	add	arg02, local06
2cda8     20 FD BF FD | 	call	#_fatfs_cc_move_window
2cdac     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdb0     64 00 90 5D |  if_ne	jmp	#LR__4437
2cdb4     34 28 06 F1 | 	add	local02, #52
2cdb8     01 26 66 F0 | 	shl	local01, #1
2cdbc     FF 27 06 F5 | 	and	local01, #511
2cdc0     13 29 02 F1 | 	add	local02, local01
2cdc4                 | ' {
2cdc4                 | ' 
2cdc4                 | ' 	return *((WORD*)ptr);
2cdc4     14 FB E1 FA | 	rdword	result1, local02
2cdc8     FD 2C 32 F9 | 	getword	local04, result1, #0
2cdcc                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2cdcc                 | ' 			break;
2cdcc     48 00 90 FD | 	jmp	#LR__4437
2cdd0                 | LR__4435
2cdd0     14 13 02 F6 | 	mov	arg01, local02
2cdd4     13 31 02 F6 | 	mov	local06, local01
2cdd8     07 30 46 F0 | 	shr	local06, #7
2cddc     24 28 06 F1 | 	add	local02, #36
2cde0     14 15 02 FB | 	rdlong	arg02, local02
2cde4     24 28 86 F1 | 	sub	local02, #36
2cde8     18 15 02 F1 | 	add	arg02, local06
2cdec     DC FC BF FD | 	call	#_fatfs_cc_move_window
2cdf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdf4     20 00 90 5D |  if_ne	jmp	#LR__4437
2cdf8     34 28 06 F1 | 	add	local02, #52
2cdfc     02 26 66 F0 | 	shl	local01, #2
2ce00     FF 27 06 F5 | 	and	local01, #511
2ce04     13 29 02 F1 | 	add	local02, local01
2ce08                 | ' {
2ce08                 | ' 
2ce08                 | ' 	return *((DWORD*)ptr);
2ce08     14 2D 02 FB | 	rdlong	local04, local02
2ce0c     7C 2C 06 F4 | 	bitl	local04, #124
2ce10                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2ce10                 | ' 			break;
2ce10     04 00 90 FD | 	jmp	#LR__4437
2ce14                 | LR__4436
2ce14     01 2C 06 F6 | 	mov	local04, #1
2ce18                 | LR__4437
2ce18                 | LR__4438
2ce18                 | ' 			val = 1;
2ce18                 | ' 		}
2ce18                 | ' 	}
2ce18                 | ' 
2ce18                 | ' 	return val;
2ce18     16 FB 01 F6 | 	mov	result1, local04
2ce1c     A7 F0 03 F6 | 	mov	ptra, fp
2ce20     B2 00 A0 FD | 	call	#popregs_
2ce24                 | _fatfs_cc_get_fat_ret
2ce24     2D 00 64 FD | 	ret
2ce28                 | 
2ce28                 | _fatfs_cc_put_fat
2ce28     08 4A 05 F6 | 	mov	COUNT_, #8
2ce2c     A8 00 A0 FD | 	call	#pushregs_
2ce30     09 27 02 F6 | 	mov	local01, arg01
2ce34     0A 29 02 F6 | 	mov	local02, arg02
2ce38     0B 2B 02 F6 | 	mov	local03, arg03
2ce3c     02 2C 06 F6 | 	mov	local04, #2
2ce40     02 28 16 F2 | 	cmp	local02, #2 wc
2ce44     E0 01 90 CD |  if_b	jmp	#LR__4447
2ce48     18 26 06 F1 | 	add	local01, #24
2ce4c     13 2F 02 FB | 	rdlong	local05, local01
2ce50     18 26 86 F1 | 	sub	local01, #24
2ce54     17 29 12 F2 | 	cmp	local02, local05 wc
2ce58     CC 01 90 3D |  if_ae	jmp	#LR__4447
2ce5c                 | ' 		switch (fs->fs_type) {
2ce5c     13 31 C2 FA | 	rdbyte	local06, local01
2ce60     01 30 86 F1 | 	sub	local06, #1
2ce64     03 30 26 F3 | 	fle	local06, #3
2ce68     30 30 62 FD | 	jmprel	local06
2ce6c                 | LR__4440
2ce6c     0C 00 90 FD | 	jmp	#LR__4441
2ce70     F8 00 90 FD | 	jmp	#LR__4444
2ce74     40 01 90 FD | 	jmp	#LR__4445
2ce78     AC 01 90 FD | 	jmp	#LR__4446
2ce7c                 | LR__4441
2ce7c     14 33 02 F6 | 	mov	local07, local02
2ce80     14 2F 02 F6 | 	mov	local05, local02
2ce84     01 2E 46 F0 | 	shr	local05, #1
2ce88     17 33 02 F1 | 	add	local07, local05
2ce8c     13 13 02 F6 | 	mov	arg01, local01
2ce90     19 31 02 F6 | 	mov	local06, local07
2ce94     09 30 46 F0 | 	shr	local06, #9
2ce98     24 26 06 F1 | 	add	local01, #36
2ce9c     13 15 02 FB | 	rdlong	arg02, local01
2cea0     24 26 86 F1 | 	sub	local01, #36
2cea4     18 15 02 F1 | 	add	arg02, local06
2cea8     20 FC BF FD | 	call	#_fatfs_cc_move_window
2ceac     FD 2C 0A F6 | 	mov	local04, result1 wz
2ceb0     74 01 90 5D |  if_ne	jmp	#LR__4446
2ceb4     34 26 06 F1 | 	add	local01, #52
2ceb8     13 35 02 F6 | 	mov	local08, local01
2cebc     19 2F 02 F6 | 	mov	local05, local07
2cec0     FF 2F 06 F5 | 	and	local05, #511
2cec4     17 35 02 F1 | 	add	local08, local05
2cec8     01 28 CE F7 | 	test	local02, #1 wz
2cecc     34 26 86 F1 | 	sub	local01, #52
2ced0     01 32 06 F1 | 	add	local07, #1
2ced4     18 00 90 AD |  if_e	jmp	#LR__4442
2ced8     1A 2F C2 FA | 	rdbyte	local05, local08
2cedc     17 2F 42 F8 | 	getnib	local05, local05, #0
2cee0     15 31 E2 F8 | 	getbyte	local06, local03, #0
2cee4     04 30 66 F0 | 	shl	local06, #4
2cee8     18 2F 42 F5 | 	or	local05, local06
2ceec     04 00 90 FD | 	jmp	#LR__4443
2cef0                 | LR__4442
2cef0     15 2F 02 F6 | 	mov	local05, local03
2cef4                 | LR__4443
2cef4     1A 2F 42 FC | 	wrbyte	local05, local08
2cef8     03 26 06 F1 | 	add	local01, #3
2cefc     13 03 48 FC | 	wrbyte	#1, local01
2cf00     03 26 86 F1 | 	sub	local01, #3
2cf04     13 13 02 F6 | 	mov	arg01, local01
2cf08     19 35 02 F6 | 	mov	local08, local07
2cf0c     09 34 46 F0 | 	shr	local08, #9
2cf10     24 26 06 F1 | 	add	local01, #36
2cf14     13 15 02 FB | 	rdlong	arg02, local01
2cf18     24 26 86 F1 | 	sub	local01, #36
2cf1c     1A 15 02 F1 | 	add	arg02, local08
2cf20     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2cf24     FD 2C 0A F6 | 	mov	local04, result1 wz
2cf28     FC 00 90 5D |  if_ne	jmp	#LR__4446
2cf2c     34 26 06 F1 | 	add	local01, #52
2cf30     13 35 02 F6 | 	mov	local08, local01
2cf34     FF 33 06 F5 | 	and	local07, #511
2cf38     19 35 02 F1 | 	add	local08, local07
2cf3c     01 28 CE F7 | 	test	local02, #1 wz
2cf40     04 2A 46 50 |  if_ne	shr	local03, #4
2cf44     15 2F 02 56 |  if_ne	mov	local05, local03
2cf48     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2cf4c     F0 2E 06 A5 |  if_e	and	local05, #240
2cf50     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2cf54     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2cf58     15 2F 42 A5 |  if_e	or	local05, local03
2cf5c     1A 2F 42 FC | 	wrbyte	local05, local08
2cf60     31 26 86 F1 | 	sub	local01, #49
2cf64     13 03 48 FC | 	wrbyte	#1, local01
2cf68                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2cf68                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2cf68                 | ' 			fs->wflag = 1;
2cf68                 | ' 			break;
2cf68     BC 00 90 FD | 	jmp	#LR__4446
2cf6c                 | LR__4444
2cf6c     13 13 02 F6 | 	mov	arg01, local01
2cf70     14 35 02 F6 | 	mov	local08, local02
2cf74     08 34 46 F0 | 	shr	local08, #8
2cf78     24 26 06 F1 | 	add	local01, #36
2cf7c     13 15 02 FB | 	rdlong	arg02, local01
2cf80     24 26 86 F1 | 	sub	local01, #36
2cf84     1A 15 02 F1 | 	add	arg02, local08
2cf88     40 FB BF FD | 	call	#_fatfs_cc_move_window
2cf8c     FD 2C 0A F6 | 	mov	local04, result1 wz
2cf90     94 00 90 5D |  if_ne	jmp	#LR__4446
2cf94     34 26 06 F1 | 	add	local01, #52
2cf98     13 13 02 F6 | 	mov	arg01, local01
2cf9c     01 28 66 F0 | 	shl	local02, #1
2cfa0     FF 29 06 F5 | 	and	local02, #511
2cfa4     14 13 02 F1 | 	add	arg01, local02
2cfa8     09 2B 52 FC | 	wrword	local03, arg01
2cfac     31 26 86 F1 | 	sub	local01, #49
2cfb0     13 03 48 FC | 	wrbyte	#1, local01
2cfb4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2cfb4                 | ' 			fs->wflag = 1;
2cfb4                 | ' 			break;
2cfb4     70 00 90 FD | 	jmp	#LR__4446
2cfb8                 | LR__4445
2cfb8     13 13 02 F6 | 	mov	arg01, local01
2cfbc     14 35 02 F6 | 	mov	local08, local02
2cfc0     07 34 46 F0 | 	shr	local08, #7
2cfc4     24 26 06 F1 | 	add	local01, #36
2cfc8     13 15 02 FB | 	rdlong	arg02, local01
2cfcc     24 26 86 F1 | 	sub	local01, #36
2cfd0     1A 15 02 F1 | 	add	arg02, local08
2cfd4     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2cfd8     FD 2C 0A F6 | 	mov	local04, result1 wz
2cfdc     48 00 90 5D |  if_ne	jmp	#LR__4446
2cfe0     7C 2A 06 F4 | 	bitl	local03, #124
2cfe4     34 26 06 F1 | 	add	local01, #52
2cfe8     14 35 02 F6 | 	mov	local08, local02
2cfec     02 34 66 F0 | 	shl	local08, #2
2cff0     FF 35 06 F5 | 	and	local08, #511
2cff4     13 13 02 F6 | 	mov	arg01, local01
2cff8     1A 13 02 F1 | 	add	arg01, local08
2cffc                 | ' {
2cffc                 | ' 
2cffc                 | ' 	return *((DWORD*)ptr);
2cffc     09 35 02 FB | 	rdlong	local08, arg01
2d000     00 00 78 FF 
2d004     00 34 06 F5 | 	and	local08, ##-268435456
2d008     1A 2B 42 F5 | 	or	local03, local08
2d00c     13 13 02 F6 | 	mov	arg01, local01
2d010     02 28 66 F0 | 	shl	local02, #2
2d014     FF 29 06 F5 | 	and	local02, #511
2d018     14 13 02 F1 | 	add	arg01, local02
2d01c     09 2B 62 FC | 	wrlong	local03, arg01
2d020     31 26 86 F1 | 	sub	local01, #49
2d024     13 03 48 FC | 	wrbyte	#1, local01
2d028                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2d028                 | ' 			}
2d028                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2d028                 | ' 			fs->wflag = 1;
2d028                 | ' 			break;
2d028                 | LR__4446
2d028                 | LR__4447
2d028                 | ' 		}
2d028                 | ' 	}
2d028                 | ' 	return res;
2d028     16 FB 01 F6 | 	mov	result1, local04
2d02c     A7 F0 03 F6 | 	mov	ptra, fp
2d030     B2 00 A0 FD | 	call	#popregs_
2d034                 | _fatfs_cc_put_fat_ret
2d034     2D 00 64 FD | 	ret
2d038                 | 
2d038                 | _fatfs_cc_remove_chain
2d038     05 4A 05 F6 | 	mov	COUNT_, #5
2d03c     A8 00 A0 FD | 	call	#pushregs_
2d040     09 27 02 F6 | 	mov	local01, arg01
2d044     0A 29 02 F6 | 	mov	local02, arg02
2d048     0B 2B 02 F6 | 	mov	local03, arg03
2d04c     13 2D 02 FB | 	rdlong	local04, local01
2d050     02 28 16 F2 | 	cmp	local02, #2 wc
2d054     14 00 90 CD |  if_b	jmp	#LR__4450
2d058     18 2C 06 F1 | 	add	local04, #24
2d05c     16 FB 01 FB | 	rdlong	result1, local04
2d060     18 2C 86 F1 | 	sub	local04, #24
2d064     FD 28 12 F2 | 	cmp	local02, result1 wc
2d068     08 00 90 CD |  if_b	jmp	#LR__4451
2d06c                 | LR__4450
2d06c     02 FA 05 F6 | 	mov	result1, #2
2d070     CC 00 90 FD | 	jmp	#LR__4456
2d074                 | LR__4451
2d074     00 2A 0E F2 | 	cmp	local03, #0 wz
2d078     18 00 90 AD |  if_e	jmp	#LR__4452
2d07c     15 15 02 F6 | 	mov	arg02, local03
2d080     16 13 02 F6 | 	mov	arg01, local04
2d084     01 16 66 F6 | 	neg	arg03, #1
2d088     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2d08c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d090     AC 00 90 5D |  if_ne	jmp	#LR__4456
2d094                 | LR__4452
2d094                 | ' 	}
2d094                 | ' 
2d094                 | ' 
2d094                 | ' 	do {
2d094                 | LR__4453
2d094     14 15 02 F6 | 	mov	arg02, local02
2d098     13 13 02 F6 | 	mov	arg01, local01
2d09c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2d0a0     FD 2E 0A F6 | 	mov	local05, result1 wz
2d0a4     94 00 90 AD |  if_e	jmp	#LR__4455
2d0a8     01 2E 0E F2 | 	cmp	local05, #1 wz
2d0ac     02 FA 05 A6 |  if_e	mov	result1, #2
2d0b0     8C 00 90 AD |  if_e	jmp	#LR__4456
2d0b4     FF FF 7F FF 
2d0b8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2d0bc     01 FA 05 A6 |  if_e	mov	result1, #1
2d0c0     7C 00 90 AD |  if_e	jmp	#LR__4456
2d0c4     14 15 02 F6 | 	mov	arg02, local02
2d0c8     16 13 02 F6 | 	mov	arg01, local04
2d0cc     00 16 06 F6 | 	mov	arg03, #0
2d0d0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2d0d4     FD 2A 0A F6 | 	mov	local03, result1 wz
2d0d8     15 FB 01 56 |  if_ne	mov	result1, local03
2d0dc     60 00 90 5D |  if_ne	jmp	#LR__4456
2d0e0     18 2C 06 F1 | 	add	local04, #24
2d0e4     16 2B 02 FB | 	rdlong	local03, local04
2d0e8     02 2A 86 F1 | 	sub	local03, #2
2d0ec     04 2C 86 F1 | 	sub	local04, #4
2d0f0     16 29 02 FB | 	rdlong	local02, local04
2d0f4     14 2C 86 F1 | 	sub	local04, #20
2d0f8     15 29 12 F2 | 	cmp	local02, local03 wc
2d0fc     24 00 90 3D |  if_ae	jmp	#LR__4454
2d100     14 2C 06 F1 | 	add	local04, #20
2d104     16 2B 02 FB | 	rdlong	local03, local04
2d108     01 2A 06 F1 | 	add	local03, #1
2d10c     16 2B 62 FC | 	wrlong	local03, local04
2d110     10 2C 86 F1 | 	sub	local04, #16
2d114     16 2B C2 FA | 	rdbyte	local03, local04
2d118     01 2A 46 F5 | 	or	local03, #1
2d11c     16 2B 42 FC | 	wrbyte	local03, local04
2d120     04 2C 86 F1 | 	sub	local04, #4
2d124                 | LR__4454
2d124     17 29 02 F6 | 	mov	local02, local05
2d128     18 2C 06 F1 | 	add	local04, #24
2d12c     16 2F 02 FB | 	rdlong	local05, local04
2d130     18 2C 86 F1 | 	sub	local04, #24
2d134     17 29 12 F2 | 	cmp	local02, local05 wc
2d138     58 FF 9F CD |  if_b	jmp	#LR__4453
2d13c                 | LR__4455
2d13c                 | ' #line 1500 "ff.c"
2d13c                 | ' 	return FR_OK;
2d13c     00 FA 05 F6 | 	mov	result1, #0
2d140                 | LR__4456
2d140     A7 F0 03 F6 | 	mov	ptra, fp
2d144     B2 00 A0 FD | 	call	#popregs_
2d148                 | _fatfs_cc_remove_chain_ret
2d148     2D 00 64 FD | 	ret
2d14c                 | 
2d14c                 | _fatfs_cc_create_chain
2d14c     09 4A 05 F6 | 	mov	COUNT_, #9
2d150     A8 00 A0 FD | 	call	#pushregs_
2d154     09 27 02 F6 | 	mov	local01, arg01
2d158     0A 29 0A F6 | 	mov	local02, arg02 wz
2d15c     13 2B 02 FB | 	rdlong	local03, local01
2d160     28 00 90 5D |  if_ne	jmp	#LR__4460
2d164     10 2A 06 F1 | 	add	local03, #16
2d168     15 2D 0A FB | 	rdlong	local04, local03 wz
2d16c     10 2A 86 F1 | 	sub	local03, #16
2d170     18 2A 06 51 |  if_ne	add	local03, #24
2d174     15 2F 02 5B |  if_ne	rdlong	local05, local03
2d178     18 2A 86 51 |  if_ne	sub	local03, #24
2d17c     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2d180     50 00 90 4D |  if_c_and_nz	jmp	#LR__4461
2d184     01 2C 06 F6 | 	mov	local04, #1
2d188     48 00 90 FD | 	jmp	#LR__4461
2d18c                 | LR__4460
2d18c     14 15 02 F6 | 	mov	arg02, local02
2d190     13 13 02 F6 | 	mov	arg01, local01
2d194     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2d198     FD 2C 02 F6 | 	mov	local04, result1
2d19c     02 2C 16 F2 | 	cmp	local04, #2 wc
2d1a0     01 FA 05 C6 |  if_b	mov	result1, #1
2d1a4     BC 01 90 CD |  if_b	jmp	#LR__4471
2d1a8     FF FF 7F FF 
2d1ac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2d1b0     16 FB 01 A6 |  if_e	mov	result1, local04
2d1b4     AC 01 90 AD |  if_e	jmp	#LR__4471
2d1b8     18 2A 06 F1 | 	add	local03, #24
2d1bc     15 2F 02 FB | 	rdlong	local05, local03
2d1c0     18 2A 86 F1 | 	sub	local03, #24
2d1c4     17 2D 12 F2 | 	cmp	local04, local05 wc
2d1c8     16 FB 01 C6 |  if_b	mov	result1, local04
2d1cc     94 01 90 CD |  if_b	jmp	#LR__4471
2d1d0     14 2D 02 F6 | 	mov	local04, local02
2d1d4                 | LR__4461
2d1d4     14 2A 06 F1 | 	add	local03, #20
2d1d8     15 2F 0A FB | 	rdlong	local05, local03 wz
2d1dc     14 2A 86 F1 | 	sub	local03, #20
2d1e0     00 FA 05 A6 |  if_e	mov	result1, #0
2d1e4     7C 01 90 AD |  if_e	jmp	#LR__4471
2d1e8     00 30 06 F6 | 	mov	local06, #0
2d1ec     14 2D 0A F2 | 	cmp	local04, local02 wz
2d1f0     74 00 90 5D |  if_ne	jmp	#LR__4464
2d1f4     16 31 02 F6 | 	mov	local06, local04
2d1f8     01 30 06 F1 | 	add	local06, #1
2d1fc     18 2A 06 F1 | 	add	local03, #24
2d200     15 2F 02 FB | 	rdlong	local05, local03
2d204     18 2A 86 F1 | 	sub	local03, #24
2d208     17 31 12 F2 | 	cmp	local06, local05 wc
2d20c     02 30 06 36 |  if_ae	mov	local06, #2
2d210     18 15 02 F6 | 	mov	arg02, local06
2d214     13 13 02 F6 | 	mov	arg01, local01
2d218     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2d21c     FD 2E 02 F6 | 	mov	local05, result1
2d220     01 2E 0E F2 | 	cmp	local05, #1 wz
2d224     FF FF 7F 5F 
2d228     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2d22c     17 FB 01 A6 |  if_e	mov	result1, local05
2d230     30 01 90 AD |  if_e	jmp	#LR__4471
2d234     00 2E 0E F2 | 	cmp	local05, #0 wz
2d238     2C 00 90 AD |  if_e	jmp	#LR__4463
2d23c     10 2A 06 F1 | 	add	local03, #16
2d240     15 33 02 FB | 	rdlong	local07, local03
2d244     10 2A 86 F1 | 	sub	local03, #16
2d248     02 32 16 F2 | 	cmp	local07, #2 wc
2d24c     14 00 90 CD |  if_b	jmp	#LR__4462
2d250     18 2A 06 F1 | 	add	local03, #24
2d254     15 2F 02 FB | 	rdlong	local05, local03
2d258     18 2A 86 F1 | 	sub	local03, #24
2d25c     17 33 12 F2 | 	cmp	local07, local05 wc
2d260     19 2D 02 C6 |  if_b	mov	local04, local07
2d264                 | LR__4462
2d264     00 30 06 F6 | 	mov	local06, #0
2d268                 | LR__4463
2d268                 | LR__4464
2d268     00 30 0E F2 | 	cmp	local06, #0 wz
2d26c     60 00 90 5D |  if_ne	jmp	#LR__4467
2d270     16 31 02 F6 | 	mov	local06, local04
2d274                 | ' 			ncl = scl;
2d274                 | ' 			for (;;) {
2d274                 | LR__4465
2d274     01 30 06 F1 | 	add	local06, #1
2d278     18 2A 06 F1 | 	add	local03, #24
2d27c     15 2F 02 FB | 	rdlong	local05, local03
2d280     18 2A 86 F1 | 	sub	local03, #24
2d284     17 31 12 F2 | 	cmp	local06, local05 wc
2d288     02 30 06 36 |  if_ae	mov	local06, #2
2d28c     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2d290     00 FA 05 16 |  if_a	mov	result1, #0
2d294     CC 00 90 1D |  if_a	jmp	#LR__4471
2d298     18 15 02 F6 | 	mov	arg02, local06
2d29c     13 13 02 F6 | 	mov	arg01, local01
2d2a0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2d2a4     FD 32 0A F6 | 	mov	local07, result1 wz
2d2a8     24 00 90 AD |  if_e	jmp	#LR__4466
2d2ac     01 32 0E F2 | 	cmp	local07, #1 wz
2d2b0     FF FF 7F 5F 
2d2b4     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2d2b8     19 FB 01 A6 |  if_e	mov	result1, local07
2d2bc     A4 00 90 AD |  if_e	jmp	#LR__4471
2d2c0     16 31 0A F2 | 	cmp	local06, local04 wz
2d2c4     00 FA 05 A6 |  if_e	mov	result1, #0
2d2c8     98 00 90 AD |  if_e	jmp	#LR__4471
2d2cc     A4 FF 9F FD | 	jmp	#LR__4465
2d2d0                 | LR__4466
2d2d0                 | LR__4467
2d2d0     15 13 02 F6 | 	mov	arg01, local03
2d2d4     18 15 02 F6 | 	mov	arg02, local06
2d2d8     01 16 66 F6 | 	neg	arg03, #1
2d2dc     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2d2e0     FD 34 0A F6 | 	mov	local08, result1 wz
2d2e4     1C 00 90 5D |  if_ne	jmp	#LR__4468
2d2e8     00 28 0E F2 | 	cmp	local02, #0 wz
2d2ec     14 00 90 AD |  if_e	jmp	#LR__4468
2d2f0     15 13 02 F6 | 	mov	arg01, local03
2d2f4     14 15 02 F6 | 	mov	arg02, local02
2d2f8     18 17 02 F6 | 	mov	arg03, local06
2d2fc     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2d300     FD 34 02 F6 | 	mov	local08, result1
2d304                 | LR__4468
2d304     00 34 0E F2 | 	cmp	local08, #0 wz
2d308     4C 00 90 5D |  if_ne	jmp	#LR__4469
2d30c     10 2A 06 F1 | 	add	local03, #16
2d310     15 31 62 FC | 	wrlong	local06, local03
2d314     08 2A 06 F1 | 	add	local03, #8
2d318     15 2F 02 FB | 	rdlong	local05, local03
2d31c     02 2E 86 F1 | 	sub	local05, #2
2d320     04 2A 86 F1 | 	sub	local03, #4
2d324     15 37 02 FB | 	rdlong	local09, local03
2d328     14 2A 86 F1 | 	sub	local03, #20
2d32c     17 37 1A F2 | 	cmp	local09, local05 wcz
2d330     14 2A 06 E1 |  if_be	add	local03, #20
2d334     15 37 02 EB |  if_be	rdlong	local09, local03
2d338     01 36 86 E1 |  if_be	sub	local09, #1
2d33c     15 37 62 EC |  if_be	wrlong	local09, local03
2d340     14 2A 86 E1 |  if_be	sub	local03, #20
2d344     04 2A 06 F1 | 	add	local03, #4
2d348     15 2F C2 FA | 	rdbyte	local05, local03
2d34c     01 2E 46 F5 | 	or	local05, #1
2d350     15 2F 42 FC | 	wrbyte	local05, local03
2d354     08 00 90 FD | 	jmp	#LR__4470
2d358                 | LR__4469
2d358     01 34 0E F2 | 	cmp	local08, #1 wz
2d35c     01 30 C6 F6 | 	negz	local06, #1
2d360                 | LR__4470
2d360                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2d360                 | ' 	}
2d360                 | ' 
2d360                 | ' 	return ncl;
2d360     18 FB 01 F6 | 	mov	result1, local06
2d364                 | LR__4471
2d364     A7 F0 03 F6 | 	mov	ptra, fp
2d368     B2 00 A0 FD | 	call	#popregs_
2d36c                 | _fatfs_cc_create_chain_ret
2d36c     2D 00 64 FD | 	ret
2d370                 | 
2d370                 | _fatfs_cc_dir_clear
2d370     06 4A 05 F6 | 	mov	COUNT_, #6
2d374     A8 00 A0 FD | 	call	#pushregs_
2d378     09 27 02 F6 | 	mov	local01, arg01
2d37c     0A 29 02 F6 | 	mov	local02, arg02
2d380     13 13 02 F6 | 	mov	arg01, local01
2d384     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2d388     00 FA 0D F2 | 	cmp	result1, #0 wz
2d38c     01 FA 05 56 |  if_ne	mov	result1, #1
2d390     90 00 90 5D |  if_ne	jmp	#LR__4482
2d394     13 13 02 F6 | 	mov	arg01, local01
2d398     14 15 02 F6 | 	mov	arg02, local02
2d39c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2d3a0     FD 2A 02 F6 | 	mov	local03, result1
2d3a4     30 26 06 F1 | 	add	local01, #48
2d3a8     13 2B 62 FC | 	wrlong	local03, local01
2d3ac     04 26 06 F1 | 	add	local01, #4
2d3b0     13 13 02 F6 | 	mov	arg01, local01
2d3b4     00 14 06 F6 | 	mov	arg02, #0
2d3b8     09 16 C6 F9 | 	decod	arg03, #9
2d3bc     98 00 A0 FD | 	call	#\builtin_bytefill_
2d3c0     13 2D 02 F6 | 	mov	local04, local01
2d3c4                 | ' #line 1667 "ff.c"
2d3c4                 | ' 	{
2d3c4                 | ' 		ibuf = fs->win; szb = 1;
2d3c4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2d3c4     00 2E 06 F6 | 	mov	local05, #0
2d3c8     34 26 86 F1 | 	sub	local01, #52
2d3cc                 | LR__4480
2d3cc     0A 26 06 F1 | 	add	local01, #10
2d3d0     13 31 E2 FA | 	rdword	local06, local01
2d3d4     0A 26 86 F1 | 	sub	local01, #10
2d3d8     18 2F 12 F2 | 	cmp	local05, local06 wc
2d3dc     2C 00 90 3D |  if_ae	jmp	#LR__4481
2d3e0     01 26 06 F1 | 	add	local01, #1
2d3e4     13 13 C2 FA | 	rdbyte	arg01, local01
2d3e8     01 26 86 F1 | 	sub	local01, #1
2d3ec     16 15 02 F6 | 	mov	arg02, local04
2d3f0     15 17 02 F6 | 	mov	arg03, local03
2d3f4     17 17 02 F1 | 	add	arg03, local05
2d3f8     01 18 06 F6 | 	mov	arg04, #1
2d3fc     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2d400     00 FA 0D F2 | 	cmp	result1, #0 wz
2d404     01 2E 06 A1 |  if_e	add	local05, #1
2d408     C0 FF 9F AD |  if_e	jmp	#LR__4480
2d40c                 | LR__4481
2d40c                 | ' 	}
2d40c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2d40c     0A 26 06 F1 | 	add	local01, #10
2d410     13 2D E2 FA | 	rdword	local04, local01
2d414     16 2F 0A F2 | 	cmp	local05, local04 wz
2d418     00 30 06 A6 |  if_e	mov	local06, #0
2d41c     01 30 06 56 |  if_ne	mov	local06, #1
2d420     18 FB 01 F6 | 	mov	result1, local06
2d424                 | LR__4482
2d424     A7 F0 03 F6 | 	mov	ptra, fp
2d428     B2 00 A0 FD | 	call	#popregs_
2d42c                 | _fatfs_cc_dir_clear_ret
2d42c     2D 00 64 FD | 	ret
2d430                 | 
2d430                 | _fatfs_cc_dir_sdi
2d430     06 4A 05 F6 | 	mov	COUNT_, #6
2d434     A8 00 A0 FD | 	call	#pushregs_
2d438     09 27 02 F6 | 	mov	local01, arg01
2d43c     0A 29 02 F6 | 	mov	local02, arg02
2d440     13 2B 02 FB | 	rdlong	local03, local01
2d444     00 10 00 FF 
2d448     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2d44c     1F 28 CE C7 |  if_b	test	local02, #31 wz
2d450                 | ' 		return FR_INT_ERR;
2d450     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2d454     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4496
2d458     10 26 06 F1 | 	add	local01, #16
2d45c     13 29 62 FC | 	wrlong	local02, local01
2d460     08 26 86 F1 | 	sub	local01, #8
2d464     13 2D 0A FB | 	rdlong	local04, local01 wz
2d468     08 26 86 F1 | 	sub	local01, #8
2d46c     15 2F C2 AA |  if_e	rdbyte	local05, local03
2d470     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2d474     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2d478     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2d47c     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2d480     00 2C 0E F2 | 	cmp	local04, #0 wz
2d484     3C 00 90 5D |  if_ne	jmp	#LR__4490
2d488     14 2F 02 F6 | 	mov	local05, local02
2d48c     05 2E 46 F0 | 	shr	local05, #5
2d490     08 2A 06 F1 | 	add	local03, #8
2d494     15 15 E2 FA | 	rdword	arg02, local03
2d498     08 2A 86 F1 | 	sub	local03, #8
2d49c     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2d4a0     02 FA 05 36 |  if_ae	mov	result1, #2
2d4a4     E4 00 90 3D |  if_ae	jmp	#LR__4496
2d4a8     28 2A 06 F1 | 	add	local03, #40
2d4ac     15 2F 02 FB | 	rdlong	local05, local03
2d4b0     28 2A 86 F1 | 	sub	local03, #40
2d4b4     18 26 06 F1 | 	add	local01, #24
2d4b8     13 2F 62 FC | 	wrlong	local05, local01
2d4bc     18 26 86 F1 | 	sub	local01, #24
2d4c0     7C 00 90 FD | 	jmp	#LR__4495
2d4c4                 | LR__4490
2d4c4     0A 2A 06 F1 | 	add	local03, #10
2d4c8     15 31 E2 FA | 	rdword	local06, local03
2d4cc     0A 2A 86 F1 | 	sub	local03, #10
2d4d0     09 30 66 F0 | 	shl	local06, #9
2d4d4                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d4d4                 | ' 		while (ofs >= csz) {
2d4d4                 | LR__4491
2d4d4     18 29 12 F2 | 	cmp	local02, local06 wc
2d4d8     4C 00 90 CD |  if_b	jmp	#LR__4494
2d4dc     13 13 02 F6 | 	mov	arg01, local01
2d4e0     16 15 02 F6 | 	mov	arg02, local04
2d4e4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2d4e8     FD 2C 02 F6 | 	mov	local04, result1
2d4ec     FF FF 7F FF 
2d4f0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2d4f4     01 FA 05 A6 |  if_e	mov	result1, #1
2d4f8     90 00 90 AD |  if_e	jmp	#LR__4496
2d4fc     02 2C 16 F2 | 	cmp	local04, #2 wc
2d500     14 00 90 CD |  if_b	jmp	#LR__4492
2d504     18 2A 06 F1 | 	add	local03, #24
2d508     15 2F 02 FB | 	rdlong	local05, local03
2d50c     18 2A 86 F1 | 	sub	local03, #24
2d510     17 2D 12 F2 | 	cmp	local04, local05 wc
2d514     08 00 90 CD |  if_b	jmp	#LR__4493
2d518                 | LR__4492
2d518     02 FA 05 F6 | 	mov	result1, #2
2d51c     6C 00 90 FD | 	jmp	#LR__4496
2d520                 | LR__4493
2d520     18 29 82 F1 | 	sub	local02, local06
2d524     AC FF 9F FD | 	jmp	#LR__4491
2d528                 | LR__4494
2d528     15 13 02 F6 | 	mov	arg01, local03
2d52c     16 15 02 F6 | 	mov	arg02, local04
2d530     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2d534     18 26 06 F1 | 	add	local01, #24
2d538     13 FB 61 FC | 	wrlong	result1, local01
2d53c     18 26 86 F1 | 	sub	local01, #24
2d540                 | LR__4495
2d540     14 26 06 F1 | 	add	local01, #20
2d544     13 2D 62 FC | 	wrlong	local04, local01
2d548     04 26 06 F1 | 	add	local01, #4
2d54c     13 2F 0A FB | 	rdlong	local05, local01 wz
2d550     18 26 86 F1 | 	sub	local01, #24
2d554     02 FA 05 A6 |  if_e	mov	result1, #2
2d558     30 00 90 AD |  if_e	jmp	#LR__4496
2d55c     14 31 02 F6 | 	mov	local06, local02
2d560     09 30 46 F0 | 	shr	local06, #9
2d564     18 26 06 F1 | 	add	local01, #24
2d568     13 2F 02 FB | 	rdlong	local05, local01
2d56c     18 2F 02 F1 | 	add	local05, local06
2d570     13 2F 62 FC | 	wrlong	local05, local01
2d574     34 2A 06 F1 | 	add	local03, #52
2d578     FF 29 06 F5 | 	and	local02, #511
2d57c     14 2B 02 F1 | 	add	local03, local02
2d580     04 26 06 F1 | 	add	local01, #4
2d584     13 2B 62 FC | 	wrlong	local03, local01
2d588                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2d588                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2d588                 | ' 
2d588                 | ' 	return FR_OK;
2d588     00 FA 05 F6 | 	mov	result1, #0
2d58c                 | LR__4496
2d58c     A7 F0 03 F6 | 	mov	ptra, fp
2d590     B2 00 A0 FD | 	call	#popregs_
2d594                 | _fatfs_cc_dir_sdi_ret
2d594     2D 00 64 FD | 	ret
2d598                 | 
2d598                 | _fatfs_cc_dir_next
2d598     05 4A 05 F6 | 	mov	COUNT_, #5
2d59c     A8 00 A0 FD | 	call	#pushregs_
2d5a0     09 27 02 F6 | 	mov	local01, arg01
2d5a4     0A 29 02 F6 | 	mov	local02, arg02
2d5a8     13 2B 02 FB | 	rdlong	local03, local01
2d5ac     10 26 06 F1 | 	add	local01, #16
2d5b0     13 2D 02 FB | 	rdlong	local04, local01
2d5b4     10 26 86 F1 | 	sub	local01, #16
2d5b8     20 2C 06 F1 | 	add	local04, #32
2d5bc     00 10 00 FF 
2d5c0     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2d5c4     18 26 06 31 |  if_ae	add	local01, #24
2d5c8     13 01 68 3C |  if_ae	wrlong	#0, local01
2d5cc     18 26 86 31 |  if_ae	sub	local01, #24
2d5d0     18 26 06 F1 | 	add	local01, #24
2d5d4     13 15 0A FB | 	rdlong	arg02, local01 wz
2d5d8     18 26 86 F1 | 	sub	local01, #24
2d5dc     04 FA 05 A6 |  if_e	mov	result1, #4
2d5e0     64 01 90 AD |  if_e	jmp	#LR__4505
2d5e4     FF 2D CE F7 | 	test	local04, #511 wz
2d5e8     3C 01 90 5D |  if_ne	jmp	#LR__4504
2d5ec     18 26 06 F1 | 	add	local01, #24
2d5f0     13 15 02 FB | 	rdlong	arg02, local01
2d5f4     01 14 06 F1 | 	add	arg02, #1
2d5f8     13 15 62 FC | 	wrlong	arg02, local01
2d5fc     04 26 86 F1 | 	sub	local01, #4
2d600     13 15 0A FB | 	rdlong	arg02, local01 wz
2d604     14 26 86 F1 | 	sub	local01, #20
2d608     2C 00 90 5D |  if_ne	jmp	#LR__4500
2d60c     16 15 02 F6 | 	mov	arg02, local04
2d610     05 14 46 F0 | 	shr	arg02, #5
2d614     08 2A 06 F1 | 	add	local03, #8
2d618     15 29 E2 FA | 	rdword	local02, local03
2d61c     08 2A 86 F1 | 	sub	local03, #8
2d620     14 15 12 F2 | 	cmp	arg02, local02 wc
2d624     18 26 06 31 |  if_ae	add	local01, #24
2d628     13 01 68 3C |  if_ae	wrlong	#0, local01
2d62c                 | ' 				dp->sect = 0; return FR_NO_FILE;
2d62c     04 FA 05 36 |  if_ae	mov	result1, #4
2d630     14 01 90 3D |  if_ae	jmp	#LR__4505
2d634     F0 00 90 FD | 	jmp	#LR__4503
2d638                 | LR__4500
2d638     16 13 02 F6 | 	mov	arg01, local04
2d63c     09 12 46 F0 | 	shr	arg01, #9
2d640     0A 2A 06 F1 | 	add	local03, #10
2d644     15 15 E2 FA | 	rdword	arg02, local03
2d648     0A 2A 86 F1 | 	sub	local03, #10
2d64c     01 14 86 F1 | 	sub	arg02, #1
2d650     0A 13 CA F7 | 	test	arg01, arg02 wz
2d654     D0 00 90 5D |  if_ne	jmp	#LR__4502
2d658     13 13 02 F6 | 	mov	arg01, local01
2d65c     14 26 06 F1 | 	add	local01, #20
2d660     13 15 02 FB | 	rdlong	arg02, local01
2d664     14 26 86 F1 | 	sub	local01, #20
2d668     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2d66c     FD 2E 02 F6 | 	mov	local05, result1
2d670     02 2E 16 F2 | 	cmp	local05, #2 wc
2d674     02 FA 05 C6 |  if_b	mov	result1, #2
2d678     CC 00 90 CD |  if_b	jmp	#LR__4505
2d67c     FF FF 7F FF 
2d680     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2d684     01 FA 05 A6 |  if_e	mov	result1, #1
2d688     BC 00 90 AD |  if_e	jmp	#LR__4505
2d68c     18 2A 06 F1 | 	add	local03, #24
2d690     15 15 02 FB | 	rdlong	arg02, local03
2d694     18 2A 86 F1 | 	sub	local03, #24
2d698     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2d69c     68 00 90 CD |  if_b	jmp	#LR__4501
2d6a0     00 28 0E F2 | 	cmp	local02, #0 wz
2d6a4     18 26 06 A1 |  if_e	add	local01, #24
2d6a8     13 01 68 AC |  if_e	wrlong	#0, local01
2d6ac                 | ' 						dp->sect = 0; return FR_NO_FILE;
2d6ac     04 FA 05 A6 |  if_e	mov	result1, #4
2d6b0     94 00 90 AD |  if_e	jmp	#LR__4505
2d6b4     13 13 02 F6 | 	mov	arg01, local01
2d6b8     14 26 06 F1 | 	add	local01, #20
2d6bc     13 15 02 FB | 	rdlong	arg02, local01
2d6c0     14 26 86 F1 | 	sub	local01, #20
2d6c4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2d6c8     FD 2E 0A F6 | 	mov	local05, result1 wz
2d6cc     07 FA 05 A6 |  if_e	mov	result1, #7
2d6d0     74 00 90 AD |  if_e	jmp	#LR__4505
2d6d4     01 2E 0E F2 | 	cmp	local05, #1 wz
2d6d8     02 FA 05 A6 |  if_e	mov	result1, #2
2d6dc     68 00 90 AD |  if_e	jmp	#LR__4505
2d6e0     FF FF 7F FF 
2d6e4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2d6e8     01 FA 05 A6 |  if_e	mov	result1, #1
2d6ec     58 00 90 AD |  if_e	jmp	#LR__4505
2d6f0     17 15 02 F6 | 	mov	arg02, local05
2d6f4     15 13 02 F6 | 	mov	arg01, local03
2d6f8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2d6fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d700     01 FA 05 56 |  if_ne	mov	result1, #1
2d704     40 00 90 5D |  if_ne	jmp	#LR__4505
2d708                 | LR__4501
2d708     14 26 06 F1 | 	add	local01, #20
2d70c     13 2F 62 FC | 	wrlong	local05, local01
2d710     15 13 02 F6 | 	mov	arg01, local03
2d714     17 15 02 F6 | 	mov	arg02, local05
2d718     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2d71c     04 26 06 F1 | 	add	local01, #4
2d720     13 FB 61 FC | 	wrlong	result1, local01
2d724     18 26 86 F1 | 	sub	local01, #24
2d728                 | LR__4502
2d728                 | LR__4503
2d728                 | LR__4504
2d728     10 26 06 F1 | 	add	local01, #16
2d72c     13 2D 62 FC | 	wrlong	local04, local01
2d730     34 2A 06 F1 | 	add	local03, #52
2d734     FF 2D 06 F5 | 	and	local04, #511
2d738     16 2B 02 F1 | 	add	local03, local04
2d73c     0C 26 06 F1 | 	add	local01, #12
2d740     13 2B 62 FC | 	wrlong	local03, local01
2d744                 | ' #line 1771 "ff.c"
2d744                 | ' 				}
2d744                 | ' 				dp->clust = clst;
2d744                 | ' 				dp->sect = clst2sect(fs, clst);
2d744                 | ' 			}
2d744                 | ' 		}
2d744                 | ' 	}
2d744                 | ' 	dp->dptr = ofs;
2d744                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2d744                 | ' 
2d744                 | ' 	return FR_OK;
2d744     00 FA 05 F6 | 	mov	result1, #0
2d748                 | LR__4505
2d748     A7 F0 03 F6 | 	mov	ptra, fp
2d74c     B2 00 A0 FD | 	call	#popregs_
2d750                 | _fatfs_cc_dir_next_ret
2d750     2D 00 64 FD | 	ret
2d754                 | 
2d754                 | _fatfs_cc_dir_alloc
2d754     08 4A 05 F6 | 	mov	COUNT_, #8
2d758     A8 00 A0 FD | 	call	#pushregs_
2d75c     09 27 02 F6 | 	mov	local01, arg01
2d760     0A 29 02 F6 | 	mov	local02, arg02
2d764     13 2B 02 FB | 	rdlong	local03, local01
2d768     13 13 02 F6 | 	mov	arg01, local01
2d76c     00 14 06 F6 | 	mov	arg02, #0
2d770     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2d774     FD 2C 0A F6 | 	mov	local04, result1 wz
2d778     70 00 90 5D |  if_ne	jmp	#LR__4514
2d77c     00 2E 06 F6 | 	mov	local05, #0
2d780                 | ' 		n = 0;
2d780                 | ' 		do {
2d780                 | LR__4510
2d780     18 26 06 F1 | 	add	local01, #24
2d784     13 15 02 FB | 	rdlong	arg02, local01
2d788     18 26 86 F1 | 	sub	local01, #24
2d78c     15 13 02 F6 | 	mov	arg01, local03
2d790     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2d794     FD 2C 0A F6 | 	mov	local04, result1 wz
2d798     50 00 90 5D |  if_ne	jmp	#LR__4513
2d79c     1C 26 06 F1 | 	add	local01, #28
2d7a0     13 31 02 FB | 	rdlong	local06, local01
2d7a4     1C 26 86 F1 | 	sub	local01, #28
2d7a8     18 31 C2 FA | 	rdbyte	local06, local06
2d7ac     E5 30 0E F2 | 	cmp	local06, #229 wz
2d7b0     1C 26 06 51 |  if_ne	add	local01, #28
2d7b4     13 33 02 5B |  if_ne	rdlong	local07, local01
2d7b8     1C 26 86 51 |  if_ne	sub	local01, #28
2d7bc     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2d7c0     10 00 90 5D |  if_ne	jmp	#LR__4511
2d7c4     01 2E 06 F1 | 	add	local05, #1
2d7c8     14 2F 0A F2 | 	cmp	local05, local02 wz
2d7cc     1C 00 90 AD |  if_e	jmp	#LR__4513
2d7d0     04 00 90 FD | 	jmp	#LR__4512
2d7d4                 | LR__4511
2d7d4     00 2E 06 F6 | 	mov	local05, #0
2d7d8                 | LR__4512
2d7d8     13 13 02 F6 | 	mov	arg01, local01
2d7dc     01 14 06 F6 | 	mov	arg02, #1
2d7e0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2d7e4     FD 2C 0A F6 | 	mov	local04, result1 wz
2d7e8     94 FF 9F AD |  if_e	jmp	#LR__4510
2d7ec                 | LR__4513
2d7ec                 | LR__4514
2d7ec     04 2C 0E F2 | 	cmp	local04, #4 wz
2d7f0     07 2C 06 A6 |  if_e	mov	local04, #7
2d7f4                 | ' 	return res;
2d7f4     16 FB 01 F6 | 	mov	result1, local04
2d7f8     A7 F0 03 F6 | 	mov	ptra, fp
2d7fc     B2 00 A0 FD | 	call	#popregs_
2d800                 | _fatfs_cc_dir_alloc_ret
2d800     2D 00 64 FD | 	ret
2d804                 | 
2d804                 | _fatfs_cc_ld_clust
2d804     09 01 02 F6 | 	mov	_var01, arg01
2d808     0A 13 02 F6 | 	mov	arg01, arg02
2d80c     1A 12 06 F1 | 	add	arg01, #26
2d810                 | ' {
2d810                 | ' 
2d810                 | ' 	return *((WORD*)ptr);
2d810     09 FB E1 FA | 	rdword	result1, arg01
2d814     FD 12 32 F9 | 	getword	arg01, result1, #0
2d818     00 01 C2 FA | 	rdbyte	_var01, _var01
2d81c     03 00 0E F2 | 	cmp	_var01, #3 wz
2d820     14 14 06 A1 |  if_e	add	arg02, #20
2d824                 | ' {
2d824                 | ' 
2d824                 | ' 	return *((WORD*)ptr);
2d824     0A FB E1 AA |  if_e	rdword	result1, arg02
2d828     10 FA 65 A0 |  if_e	shl	result1, #16
2d82c     FD 12 42 A5 |  if_e	or	arg01, result1
2d830                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2d830                 | ' 	}
2d830                 | ' 
2d830                 | ' 	return cl;
2d830     09 FB 01 F6 | 	mov	result1, arg01
2d834                 | _fatfs_cc_ld_clust_ret
2d834     2D 00 64 FD | 	ret
2d838                 | 
2d838                 | _fatfs_cc_st_clust
2d838     09 01 02 F6 | 	mov	_var01, arg01
2d83c     0A 13 02 F6 | 	mov	arg01, arg02
2d840     1A 12 06 F1 | 	add	arg01, #26
2d844     09 17 52 FC | 	wrword	arg03, arg01
2d848     00 01 C2 FA | 	rdbyte	_var01, _var01
2d84c     03 00 0E F2 | 	cmp	_var01, #3 wz
2d850     14 14 06 A1 |  if_e	add	arg02, #20
2d854     10 16 46 A0 |  if_e	shr	arg03, #16
2d858     0A 17 52 AC |  if_e	wrword	arg03, arg02
2d85c                 | _fatfs_cc_st_clust_ret
2d85c     2D 00 64 FD | 	ret
2d860                 | 
2d860                 | _fatfs_cc_cmp_lfn
2d860     07 4A 05 F6 | 	mov	COUNT_, #7
2d864     A8 00 A0 FD | 	call	#pushregs_
2d868     09 27 02 F6 | 	mov	local01, arg01
2d86c     0A 13 02 F6 | 	mov	arg01, arg02
2d870     1A 12 06 F1 | 	add	arg01, #26
2d874                 | ' {
2d874                 | ' 
2d874                 | ' 	return *((WORD*)ptr);
2d874     09 FB E9 FA | 	rdword	result1, arg01 wz
2d878     00 FA 05 56 |  if_ne	mov	result1, #0
2d87c     E0 00 90 5D |  if_ne	jmp	#LR__4526
2d880     0A 29 C2 FA | 	rdbyte	local02, arg02
2d884     3F 28 06 F5 | 	and	local02, #63
2d888     01 28 86 F1 | 	sub	local02, #1
2d88c     0D 28 06 FD | 	qmul	local02, #13
2d890                 | ' 
2d890                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2d890                 | ' 
2d890                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d890     01 2A 06 F6 | 	mov	local03, #1
2d894     00 2C 06 F6 | 	mov	local04, #0
2d898     18 2E 62 FD | 	getqx	local05
2d89c                 | LR__4520
2d89c     0D 2C 16 F2 | 	cmp	local04, #13 wc
2d8a0     9C 00 90 3D |  if_ae	jmp	#LR__4525
2d8a4     0A 13 02 F6 | 	mov	arg01, arg02
2d8a8     16 29 02 F6 | 	mov	local02, local04
2d8ac     01 00 00 FF 
2d8b0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2d8b4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2d8b8     14 29 C2 FA | 	rdbyte	local02, local02
2d8bc     01 28 06 FA | 	mul	local02, #1
2d8c0     14 13 02 F1 | 	add	arg01, local02
2d8c4     01 00 00 FF 
2d8c8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2d8cc                 | ' {
2d8cc                 | ' 
2d8cc                 | ' 	return *((WORD*)ptr);
2d8cc     09 FB E1 FA | 	rdword	result1, arg01
2d8d0     FD 30 02 F6 | 	mov	local06, result1
2d8d4     15 29 02 F6 | 	mov	local02, local03
2d8d8     0F 28 4E F7 | 	zerox	local02, #15 wz
2d8dc     44 00 90 AD |  if_e	jmp	#LR__4523
2d8e0     00 2F 16 F2 | 	cmp	local05, #256 wc
2d8e4     2C 00 90 3D |  if_ae	jmp	#LR__4521
2d8e8     18 13 32 F9 | 	getword	arg01, local06, #0
2d8ec     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d8f0     FD 28 02 F6 | 	mov	local02, result1
2d8f4     17 2B 02 F6 | 	mov	local03, local05
2d8f8     01 2A 66 F0 | 	shl	local03, #1
2d8fc     13 2B 02 F1 | 	add	local03, local01
2d900     15 13 E2 FA | 	rdword	arg01, local03
2d904     01 2E 06 F1 | 	add	local05, #1
2d908     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2d90c     FD 28 0A F2 | 	cmp	local02, result1 wz
2d910     08 00 90 AD |  if_e	jmp	#LR__4522
2d914                 | LR__4521
2d914                 | ' 				return 0;
2d914     00 FA 05 F6 | 	mov	result1, #0
2d918     44 00 90 FD | 	jmp	#LR__4526
2d91c                 | LR__4522
2d91c     18 2B 02 F6 | 	mov	local03, local06
2d920     14 00 90 FD | 	jmp	#LR__4524
2d924                 | LR__4523
2d924     18 31 32 F9 | 	getword	local06, local06, #0
2d928     7F 00 00 FF 
2d92c     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2d930     00 FA 05 56 |  if_ne	mov	result1, #0
2d934     28 00 90 5D |  if_ne	jmp	#LR__4526
2d938                 | LR__4524
2d938     01 2C 06 F1 | 	add	local04, #1
2d93c     5C FF 9F FD | 	jmp	#LR__4520
2d940                 | LR__4525
2d940     0A 29 C2 FA | 	rdbyte	local02, arg02
2d944     40 28 CE F7 | 	test	local02, #64 wz
2d948     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2d94c     01 2E 66 50 |  if_ne	shl	local05, #1
2d950     13 2F 02 51 |  if_ne	add	local05, local01
2d954     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2d958     00 FA 05 56 |  if_ne	mov	result1, #0
2d95c                 | ' 
2d95c                 | ' 	return 1;
2d95c     01 FA 05 A6 |  if_e	mov	result1, #1
2d960                 | LR__4526
2d960     A7 F0 03 F6 | 	mov	ptra, fp
2d964     B2 00 A0 FD | 	call	#popregs_
2d968                 | _fatfs_cc_cmp_lfn_ret
2d968     2D 00 64 FD | 	ret
2d96c                 | 
2d96c                 | _fatfs_cc_pick_lfn
2d96c     09 01 02 F6 | 	mov	_var01, arg01
2d970     0A 13 02 F6 | 	mov	arg01, arg02
2d974     1A 12 06 F1 | 	add	arg01, #26
2d978                 | ' {
2d978                 | ' 
2d978                 | ' 	return *((WORD*)ptr);
2d978     09 FB E9 FA | 	rdword	result1, arg01 wz
2d97c     00 FA 05 56 |  if_ne	mov	result1, #0
2d980     D4 00 90 5D |  if_ne	jmp	#LR__4535
2d984     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d988     40 02 26 F5 | 	andn	_var02, #64
2d98c     01 02 86 F1 | 	sub	_var02, #1
2d990     0D 02 06 FD | 	qmul	_var02, #13
2d994                 | ' 
2d994                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2d994                 | ' 
2d994                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2d994     01 04 06 F6 | 	mov	_var03, #1
2d998     00 06 06 F6 | 	mov	_var04, #0
2d99c     18 08 62 FD | 	getqx	_var05
2d9a0                 | LR__4530
2d9a0     0D 06 16 F2 | 	cmp	_var04, #13 wc
2d9a4     80 00 90 3D |  if_ae	jmp	#LR__4533
2d9a8     0A 13 02 F6 | 	mov	arg01, arg02
2d9ac     03 03 02 F6 | 	mov	_var02, _var04
2d9b0     01 00 00 FF 
2d9b4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2d9b8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2d9bc     01 03 C2 FA | 	rdbyte	_var02, _var02
2d9c0     01 02 06 FA | 	mul	_var02, #1
2d9c4     01 13 02 F1 | 	add	arg01, _var02
2d9c8     01 00 00 FF 
2d9cc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2d9d0                 | ' {
2d9d0                 | ' 
2d9d0                 | ' 	return *((WORD*)ptr);
2d9d0     09 FB E1 FA | 	rdword	result1, arg01
2d9d4     FD 0A 02 F6 | 	mov	_var06, result1
2d9d8     02 03 02 F6 | 	mov	_var02, _var03
2d9dc     0F 02 4E F7 | 	zerox	_var02, #15 wz
2d9e0     28 00 90 AD |  if_e	jmp	#LR__4531
2d9e4     00 09 16 F2 | 	cmp	_var05, #256 wc
2d9e8     00 FA 05 36 |  if_ae	mov	result1, #0
2d9ec     68 00 90 3D |  if_ae	jmp	#LR__4535
2d9f0     04 03 02 F6 | 	mov	_var02, _var05
2d9f4     01 02 66 F0 | 	shl	_var02, #1
2d9f8     00 03 02 F1 | 	add	_var02, _var01
2d9fc     05 05 02 F6 | 	mov	_var03, _var06
2da00     01 05 52 FC | 	wrword	_var03, _var02
2da04     01 08 06 F1 | 	add	_var05, #1
2da08     14 00 90 FD | 	jmp	#LR__4532
2da0c                 | LR__4531
2da0c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2da10     7F 00 00 FF 
2da14     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2da18     00 FA 05 56 |  if_ne	mov	result1, #0
2da1c     38 00 90 5D |  if_ne	jmp	#LR__4535
2da20                 | LR__4532
2da20     01 06 06 F1 | 	add	_var04, #1
2da24     78 FF 9F FD | 	jmp	#LR__4530
2da28                 | LR__4533
2da28     0A 03 C2 FA | 	rdbyte	_var02, arg02
2da2c     40 02 CE F7 | 	test	_var02, #64 wz
2da30     02 0D 02 56 |  if_ne	mov	_var07, _var03
2da34     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2da38     18 00 90 AD |  if_e	jmp	#LR__4534
2da3c     00 09 16 F2 | 	cmp	_var05, #256 wc
2da40     00 FA 05 36 |  if_ae	mov	result1, #0
2da44     10 00 90 3D |  if_ae	jmp	#LR__4535
2da48     01 08 66 F0 | 	shl	_var05, #1
2da4c     00 09 02 F1 | 	add	_var05, _var01
2da50     04 01 58 FC | 	wrword	#0, _var05
2da54                 | LR__4534
2da54                 | ' 		lfnbuf[i] = 0;
2da54                 | ' 	}
2da54                 | ' 
2da54                 | ' 	return 1;
2da54     01 FA 05 F6 | 	mov	result1, #1
2da58                 | LR__4535
2da58                 | _fatfs_cc_pick_lfn_ret
2da58     2D 00 64 FD | 	ret
2da5c                 | 
2da5c                 | _fatfs_cc_put_lfn
2da5c     0D 14 06 F1 | 	add	arg02, #13
2da60     0A 19 42 FC | 	wrbyte	arg04, arg02
2da64     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2da68     01 18 86 F1 | 	sub	arg04, #1
2da6c     0D 18 06 FD | 	qmul	arg04, #13
2da70     09 01 02 F6 | 	mov	_var01, arg01
2da74     02 14 86 F1 | 	sub	arg02, #2
2da78     0A 1F 48 FC | 	wrbyte	#15, arg02
2da7c     01 14 06 F1 | 	add	arg02, #1
2da80     0A 01 48 FC | 	wrbyte	#0, arg02
2da84     0C 14 86 F1 | 	sub	arg02, #12
2da88     0A 13 02 F6 | 	mov	arg01, arg02
2da8c     1A 12 06 F1 | 	add	arg01, #26
2da90     09 01 58 FC | 	wrword	#0, arg01
2da94     00 02 06 F6 | 	mov	_var02, #0
2da98     00 04 06 F6 | 	mov	_var03, #0
2da9c                 | ' 	BYTE* dir,
2da9c                 | ' 	BYTE ord,
2da9c                 | ' 	BYTE sum
2da9c                 | ' )
2da9c                 | ' {
2da9c                 | ' 	UINT i, s;
2da9c                 | ' 	WCHAR wc;
2da9c                 | ' 
2da9c                 | ' 
2da9c                 | ' 	dir[ 13 ] = sum;
2da9c                 | ' 	dir[ 11 ] =  0x0F ;
2da9c                 | ' 	dir[ 12 ] = 0;
2da9c                 | ' 	st_word(dir +  26 , 0);
2da9c                 | ' 
2da9c                 | ' 	i = (ord - 1) * 13;
2da9c                 | ' 	s = wc = 0;
2da9c                 | ' 	do {
2da9c     01 00 00 FF 
2daa0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2daa4     18 06 62 FD | 	getqx	_var04
2daa8     97 2A 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2daac                 | LR__4540
2daac     01 19 32 F9 | 	getword	arg04, _var02, #0
2dab0     7F 00 00 FF 
2dab4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2dab8     03 13 02 56 |  if_ne	mov	arg01, _var04
2dabc     01 06 06 51 |  if_ne	add	_var04, #1
2dac0     01 12 66 50 |  if_ne	shl	arg01, #1
2dac4     00 13 02 51 |  if_ne	add	arg01, _var01
2dac8     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2dacc     0A 13 02 F6 | 	mov	arg01, arg02
2dad0     02 19 02 F6 | 	mov	arg04, _var03
2dad4     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2dad8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dadc     01 18 06 FA | 	mul	arg04, #1
2dae0     0C 13 02 F1 | 	add	arg01, arg04
2dae4     09 03 52 FC | 	wrword	_var02, arg01
2dae8     01 19 02 F6 | 	mov	arg04, _var02
2daec     0F 18 4E F7 | 	zerox	arg04, #15 wz
2daf0     0F 02 CE A9 |  if_e	bmask	_var02, #15
2daf4     01 04 06 F1 | 	add	_var03, #1
2daf8     0D 04 16 F2 | 	cmp	_var03, #13 wc
2dafc     AC FF 9F CD |  if_b	jmp	#LR__4540
2db00                 | LR__4541
2db00     01 00 00 FF 
2db04     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2db08     01 03 32 F9 | 	getword	_var02, _var02, #0
2db0c     7F 00 00 FF 
2db10     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2db14     01 06 66 50 |  if_ne	shl	_var04, #1
2db18     00 07 02 51 |  if_ne	add	_var04, _var01
2db1c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2db20     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2db24     40 16 46 A5 |  if_e	or	arg03, #64
2db28     0A 17 42 FC | 	wrbyte	arg03, arg02
2db2c                 | _fatfs_cc_put_lfn_ret
2db2c     2D 00 64 FD | 	ret
2db30                 | 
2db30                 | _fatfs_cc_gen_numname
2db30     08 4A 05 F6 | 	mov	COUNT_, #8
2db34     A8 00 A0 FD | 	call	#pushregs_
2db38     2C F0 07 F1 | 	add	ptra, #44
2db3c     09 27 02 F6 | 	mov	local01, arg01
2db40     0A 29 02 F6 | 	mov	local02, arg02
2db44     0B 2B 02 F6 | 	mov	local03, arg03
2db48     0C 2D 02 F6 | 	mov	local04, arg04
2db4c     13 13 02 F6 | 	mov	arg01, local01
2db50     14 15 02 F6 | 	mov	arg02, local02
2db54     0B 16 06 F6 | 	mov	arg03, #11
2db58     98 72 BF FD | 	call	#__system____builtin_memmove
2db5c     06 2C 16 F2 | 	cmp	local04, #6 wc
2db60     48 00 90 CD |  if_b	jmp	#LR__4555
2db64     16 2F 02 F6 | 	mov	local05, local04
2db68     97 1E 48 FB | 	callpa	#(@LR__4553-@LR__4550)>>2,fcache_load_ptr_
2db6c                 | ' 		sreg = seq;
2db6c                 | ' 		while (*lfn) {
2db6c                 | LR__4550
2db6c     15 31 EA FA | 	rdword	local06, local03 wz
2db70     34 00 90 AD |  if_e	jmp	#LR__4554
2db74     15 33 E2 FA | 	rdword	local07, local03
2db78                 | ' 			wc = *lfn++;
2db78                 | ' 			for (i = 0; i < 16; i++) {
2db78     02 2A 06 F1 | 	add	local03, #2
2db7c     10 12 DC FC | 	rep	@LR__4552, #16
2db80                 | LR__4551
2db80     01 2E 66 F0 | 	shl	local05, #1
2db84     19 31 32 F9 | 	getword	local06, local07, #0
2db88     01 30 06 F5 | 	and	local06, #1
2db8c     18 2F 02 F1 | 	add	local05, local06
2db90     19 33 32 F9 | 	getword	local07, local07, #0
2db94     01 32 46 F0 | 	shr	local07, #1
2db98     10 2E 2E F4 | 	testbn	local05, #16 wz
2db9c     88 00 00 5F 
2dba0     21 2E 66 55 |  if_ne	xor	local05, ##69665
2dba4                 | LR__4552
2dba4     C4 FF 9F FD | 	jmp	#LR__4550
2dba8                 | LR__4553
2dba8                 | LR__4554
2dba8     17 2D 02 F6 | 	mov	local04, local05
2dbac                 | LR__4555
2dbac     07 32 06 F6 | 	mov	local07, #7
2dbb0                 | ' 			}
2dbb0                 | ' 		}
2dbb0                 | ' 		seq = (UINT)sreg;
2dbb0                 | ' 	}
2dbb0                 | ' 
2dbb0                 | ' 
2dbb0                 | ' 	i = 7;
2dbb0                 | ' 	do {
2dbb0     10 4E 05 F1 | 	add	fp, #16
2dbb4     97 1A 48 FB | 	callpa	#(@LR__4557-@LR__4556)>>2,fcache_load_ptr_
2dbb8                 | LR__4556
2dbb8     16 2F 42 F8 | 	getnib	local05, local04, #0
2dbbc     30 2E 06 F1 | 	add	local05, #48
2dbc0     04 2C 46 F0 | 	shr	local04, #4
2dbc4     17 31 E2 F8 | 	getbyte	local06, local05, #0
2dbc8     3A 30 16 F2 | 	cmp	local06, #58 wc
2dbcc     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2dbd0     07 2E 06 31 |  if_ae	add	local05, #7
2dbd4     19 31 02 F6 | 	mov	local06, local07
2dbd8     01 32 8E F1 | 	sub	local07, #1 wz
2dbdc     A7 30 02 F1 | 	add	local06, fp
2dbe0     18 2F 42 FC | 	wrbyte	local05, local06
2dbe4     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2dbe8     CC FF 9F 5D |  if_ne	jmp	#LR__4556
2dbec                 | LR__4557
2dbec     19 31 02 F6 | 	mov	local06, local07
2dbf0     A7 30 02 F1 | 	add	local06, fp
2dbf4     18 FD 48 FC | 	wrbyte	#126, local06
2dbf8                 | ' 	ns[i] = '~';
2dbf8                 | ' 
2dbf8                 | ' 
2dbf8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2dbf8     00 2E 06 F6 | 	mov	local05, #0
2dbfc     10 4E 85 F1 | 	sub	fp, #16
2dc00     97 2A 48 FB | 	callpa	#(@LR__4560-@LR__4558)>>2,fcache_load_ptr_
2dc04                 | LR__4558
2dc04     19 2F 12 F2 | 	cmp	local05, local07 wc
2dc08     4C 00 90 3D |  if_ae	jmp	#LR__4561
2dc0c     17 31 02 F6 | 	mov	local06, local05
2dc10     13 31 02 F1 | 	add	local06, local01
2dc14     18 31 C2 FA | 	rdbyte	local06, local06
2dc18     20 30 0E F2 | 	cmp	local06, #32 wz
2dc1c     38 00 90 AD |  if_e	jmp	#LR__4561
2dc20     17 13 02 F6 | 	mov	arg01, local05
2dc24     13 13 02 F1 | 	add	arg01, local01
2dc28     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2dc2c     00 FA 05 56 |  if_ne	mov	result1, #0
2dc30                 | ' 
2dc30                 | ' 	return 0;
2dc30     00 FA 05 A6 |  if_e	mov	result1, #0
2dc34     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc38     14 00 90 AD |  if_e	jmp	#LR__4559
2dc3c     19 31 02 F6 | 	mov	local06, local07
2dc40     01 30 86 F1 | 	sub	local06, #1
2dc44     18 2F 0A F2 | 	cmp	local05, local06 wz
2dc48     0C 00 90 AD |  if_e	jmp	#LR__4561
2dc4c     01 2E 06 F1 | 	add	local05, #1
2dc50                 | LR__4559
2dc50     01 2E 06 F1 | 	add	local05, #1
2dc54     AC FF 9F FD | 	jmp	#LR__4558
2dc58                 | LR__4560
2dc58                 | LR__4561
2dc58     97 20 48 FB | 	callpa	#(@LR__4565-@LR__4562)>>2,fcache_load_ptr_
2dc5c                 | ' 			j++;
2dc5c                 | ' 		}
2dc5c                 | ' 	}
2dc5c                 | ' 	do {
2dc5c                 | LR__4562
2dc5c     17 31 02 F6 | 	mov	local06, local05
2dc60     13 31 02 F1 | 	add	local06, local01
2dc64     08 32 16 F2 | 	cmp	local07, #8 wc
2dc68     01 2E 06 F1 | 	add	local05, #1
2dc6c     1C 00 90 3D |  if_ae	jmp	#LR__4563
2dc70     19 2D 02 F6 | 	mov	local04, local07
2dc74     10 4E 05 F1 | 	add	fp, #16
2dc78     A7 2C 02 F1 | 	add	local04, fp
2dc7c     16 35 C2 FA | 	rdbyte	local08, local04
2dc80     01 32 06 F1 | 	add	local07, #1
2dc84     10 4E 85 F1 | 	sub	fp, #16
2dc88     04 00 90 FD | 	jmp	#LR__4564
2dc8c                 | LR__4563
2dc8c     20 34 06 F6 | 	mov	local08, #32
2dc90                 | LR__4564
2dc90     18 35 42 FC | 	wrbyte	local08, local06
2dc94     08 2E 16 F2 | 	cmp	local05, #8 wc
2dc98     C0 FF 9F CD |  if_b	jmp	#LR__4562
2dc9c                 | LR__4565
2dc9c     A7 F0 03 F6 | 	mov	ptra, fp
2dca0     B2 00 A0 FD | 	call	#popregs_
2dca4                 | _fatfs_cc_gen_numname_ret
2dca4     2D 00 64 FD | 	ret
2dca8                 | 
2dca8                 | _fatfs_cc_sum_sfn
2dca8     00 00 06 F6 | 	mov	_var01, #0
2dcac                 | ' )
2dcac                 | ' {
2dcac                 | ' 	BYTE sum = 0;
2dcac                 | ' 	UINT n = 11;
2dcac                 | ' 
2dcac                 | ' 	do {
2dcac     97 12 48 FB | 	callpa	#(@LR__4572-@LR__4570)>>2,fcache_load_ptr_
2dcb0                 | LR__4570
2dcb0     0B 10 DC FC | 	rep	@LR__4573, #11
2dcb4                 | LR__4571
2dcb4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2dcb8     01 FA 45 F0 | 	shr	result1, #1
2dcbc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2dcc0     07 00 66 F0 | 	shl	_var01, #7
2dcc4     00 FB 01 F1 | 	add	result1, _var01
2dcc8     09 01 C2 FA | 	rdbyte	_var01, arg01
2dccc     FD 00 02 F1 | 	add	_var01, result1
2dcd0     01 12 06 F1 | 	add	arg01, #1
2dcd4                 | LR__4572
2dcd4                 | LR__4573
2dcd4                 | ' 	return sum;
2dcd4     00 FB 01 F6 | 	mov	result1, _var01
2dcd8                 | _fatfs_cc_sum_sfn_ret
2dcd8     2D 00 64 FD | 	ret
2dcdc                 | 
2dcdc                 | _fatfs_cc_dir_read
2dcdc     0C 4A 05 F6 | 	mov	COUNT_, #12
2dce0     A8 00 A0 FD | 	call	#pushregs_
2dce4     09 27 02 F6 | 	mov	local01, arg01
2dce8     0A 29 02 F6 | 	mov	local02, arg02
2dcec     04 2A 06 F6 | 	mov	local03, #4
2dcf0     13 2D 02 FB | 	rdlong	local04, local01
2dcf4     FF 2E 06 F6 | 	mov	local05, #255
2dcf8     FF 30 06 F6 | 	mov	local06, #255
2dcfc                 | ' )
2dcfc                 | ' {
2dcfc                 | ' 	FRESULT res = FR_NO_FILE;
2dcfc                 | ' 	FATFS *fs = dp->obj.fs;
2dcfc                 | ' 	BYTE attr, b;
2dcfc                 | ' 
2dcfc                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2dcfc                 | ' 
2dcfc                 | ' 
2dcfc                 | ' 	while (dp->sect) {
2dcfc                 | LR__4580
2dcfc     18 26 06 F1 | 	add	local01, #24
2dd00     13 FB 09 FB | 	rdlong	result1, local01 wz
2dd04     18 26 86 F1 | 	sub	local01, #24
2dd08     AC 01 90 AD |  if_e	jmp	#LR__4590
2dd0c     18 26 06 F1 | 	add	local01, #24
2dd10     13 15 02 FB | 	rdlong	arg02, local01
2dd14     18 26 86 F1 | 	sub	local01, #24
2dd18     16 13 02 F6 | 	mov	arg01, local04
2dd1c     AC ED BF FD | 	call	#_fatfs_cc_move_window
2dd20     FD 2A 0A F6 | 	mov	local03, result1 wz
2dd24     90 01 90 5D |  if_ne	jmp	#LR__4590
2dd28     1C 26 06 F1 | 	add	local01, #28
2dd2c     13 FB 01 FB | 	rdlong	result1, local01
2dd30     1C 26 86 F1 | 	sub	local01, #28
2dd34     FD 32 C2 FA | 	rdbyte	local07, result1
2dd38     19 FB 01 F6 | 	mov	result1, local07
2dd3c     07 FA 4D F7 | 	zerox	result1, #7 wz
2dd40     04 2A 06 A6 |  if_e	mov	local03, #4
2dd44                 | ' 			res = FR_NO_FILE; break;
2dd44     70 01 90 AD |  if_e	jmp	#LR__4590
2dd48     1C 26 06 F1 | 	add	local01, #28
2dd4c     13 35 02 FB | 	rdlong	local08, local01
2dd50     0B 34 06 F1 | 	add	local08, #11
2dd54     1A 37 C2 FA | 	rdbyte	local09, local08
2dd58     3F 36 06 F5 | 	and	local09, #63
2dd5c     16 26 86 F1 | 	sub	local01, #22
2dd60     13 37 42 FC | 	wrbyte	local09, local01
2dd64     06 26 86 F1 | 	sub	local01, #6
2dd68     19 FB E1 F8 | 	getbyte	result1, local07, #0
2dd6c     E5 FA 0D F2 | 	cmp	result1, #229 wz
2dd70     19 35 02 56 |  if_ne	mov	local08, local07
2dd74     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2dd78     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2dd7c     1C 00 90 AD |  if_e	jmp	#LR__4581
2dd80     00 38 06 F6 | 	mov	local10, #0
2dd84     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2dd88     20 34 26 F5 | 	andn	local08, #32
2dd8c     08 34 0E F2 | 	cmp	local08, #8 wz
2dd90     01 38 06 A6 |  if_e	mov	local10, #1
2dd94     14 39 0A F2 | 	cmp	local10, local02 wz
2dd98     08 00 90 AD |  if_e	jmp	#LR__4582
2dd9c                 | LR__4581
2dd9c     FF 2E 06 F6 | 	mov	local05, #255
2dda0     00 01 90 FD | 	jmp	#LR__4589
2dda4                 | LR__4582
2dda4     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2dda8     0F 36 0E F2 | 	cmp	local09, #15 wz
2ddac     B4 00 90 5D |  if_ne	jmp	#LR__4586
2ddb0     19 3B E2 F8 | 	getbyte	local11, local07, #0
2ddb4     40 3A CE F7 | 	test	local11, #64 wz
2ddb8     30 00 90 AD |  if_e	jmp	#LR__4583
2ddbc     1C 26 06 F1 | 	add	local01, #28
2ddc0     13 3B 02 FB | 	rdlong	local11, local01
2ddc4     0D 3A 06 F1 | 	add	local11, #13
2ddc8     1D 31 C2 FA | 	rdbyte	local06, local11
2ddcc     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ddd0     BF 32 06 F5 | 	and	local07, #191
2ddd4     19 2F 02 F6 | 	mov	local05, local07
2ddd8     0C 26 86 F1 | 	sub	local01, #12
2dddc     13 3B 02 FB | 	rdlong	local11, local01
2dde0     1C 26 06 F1 | 	add	local01, #28
2dde4     13 3B 62 FC | 	wrlong	local11, local01
2dde8     2C 26 86 F1 | 	sub	local01, #44
2ddec                 | LR__4583
2ddec     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ddf0     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ddf4     1C 35 0A F2 | 	cmp	local08, local10 wz
2ddf8     5C 00 90 5D |  if_ne	jmp	#LR__4584
2ddfc     18 39 E2 F8 | 	getbyte	local10, local06, #0
2de00     1C 26 06 F1 | 	add	local01, #28
2de04     13 37 02 FB | 	rdlong	local09, local01
2de08     1C 26 86 F1 | 	sub	local01, #28
2de0c     0D 36 06 F1 | 	add	local09, #13
2de10     1B 35 C2 FA | 	rdbyte	local08, local09
2de14     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2de18     1B 39 0A F2 | 	cmp	local10, local09 wz
2de1c     38 00 90 5D |  if_ne	jmp	#LR__4584
2de20     0C 2C 06 F1 | 	add	local04, #12
2de24     16 13 02 FB | 	rdlong	arg01, local04
2de28     0C 2C 86 F1 | 	sub	local04, #12
2de2c     1C 26 06 F1 | 	add	local01, #28
2de30     13 3D 02 FB | 	rdlong	local12, local01
2de34     1C 26 86 F1 | 	sub	local01, #28
2de38     1E 15 02 F6 | 	mov	arg02, local12
2de3c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2de40     00 FA 4D F2 | 	cmps	result1, #0 wz
2de44     17 3D 02 56 |  if_ne	mov	local12, local05
2de48     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2de4c     01 3C 86 51 |  if_ne	sub	local12, #1
2de50     1E 3B 02 56 |  if_ne	mov	local11, local12
2de54     04 00 90 5D |  if_ne	jmp	#LR__4585
2de58                 | LR__4584
2de58     FF 3A 06 F6 | 	mov	local11, #255
2de5c                 | LR__4585
2de5c     1D 2F 02 F6 | 	mov	local05, local11
2de60     40 00 90 FD | 	jmp	#LR__4588
2de64                 | LR__4586
2de64     17 3B 02 F6 | 	mov	local11, local05
2de68     07 3A 4E F7 | 	zerox	local11, #7 wz
2de6c     20 00 90 5D |  if_ne	jmp	#LR__4587
2de70     18 31 E2 F8 | 	getbyte	local06, local06, #0
2de74     1C 26 06 F1 | 	add	local01, #28
2de78     13 13 02 FB | 	rdlong	arg01, local01
2de7c     1C 26 86 F1 | 	sub	local01, #28
2de80     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2de84     FD FA E1 F8 | 	getbyte	result1, result1, #0
2de88     FD 30 0A F2 | 	cmp	local06, result1 wz
2de8c     28 00 90 AD |  if_e	jmp	#LR__4590
2de90                 | LR__4587
2de90     2C 26 06 F1 | 	add	local01, #44
2de94     FF FF FF FF 
2de98     13 FF 6B FC | 	wrlong	##-1, local01
2de9c     2C 26 86 F1 | 	sub	local01, #44
2dea0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2dea0                 | ' 					}
2dea0                 | ' 					break;
2dea0     14 00 90 FD | 	jmp	#LR__4590
2dea4                 | LR__4588
2dea4                 | LR__4589
2dea4     13 13 02 F6 | 	mov	arg01, local01
2dea8     00 14 06 F6 | 	mov	arg02, #0
2deac     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2deb0     FD 2A 0A F6 | 	mov	local03, result1 wz
2deb4     44 FE 9F AD |  if_e	jmp	#LR__4580
2deb8                 | LR__4590
2deb8     00 2A 0E F2 | 	cmp	local03, #0 wz
2debc     18 26 06 51 |  if_ne	add	local01, #24
2dec0     13 01 68 5C |  if_ne	wrlong	#0, local01
2dec4                 | ' 	return res;
2dec4     15 FB 01 F6 | 	mov	result1, local03
2dec8     A7 F0 03 F6 | 	mov	ptra, fp
2decc     B2 00 A0 FD | 	call	#popregs_
2ded0                 | _fatfs_cc_dir_read_ret
2ded0     2D 00 64 FD | 	ret
2ded4                 | 
2ded4                 | _fatfs_cc_dir_find
2ded4     0B 4A 05 F6 | 	mov	COUNT_, #11
2ded8     A8 00 A0 FD | 	call	#pushregs_
2dedc     09 27 02 F6 | 	mov	local01, arg01
2dee0     13 29 02 FB | 	rdlong	local02, local01
2dee4     13 13 02 F6 | 	mov	arg01, local01
2dee8     00 14 06 F6 | 	mov	arg02, #0
2deec     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2def0     00 FA 0D F2 | 	cmp	result1, #0 wz
2def4     18 02 90 5D |  if_ne	jmp	#LR__4612
2def8     FF 2A 06 F6 | 	mov	local03, #255
2defc     FF 2C 06 F6 | 	mov	local04, #255
2df00     2C 26 06 F1 | 	add	local01, #44
2df04     FF FF FF FF 
2df08     13 FF 6B FC | 	wrlong	##-1, local01
2df0c     2C 26 86 F1 | 	sub	local01, #44
2df10                 | ' #line 2404 "ff.c"
2df10                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2df10                 | ' 
2df10                 | ' 	do {
2df10                 | LR__4600
2df10     18 26 06 F1 | 	add	local01, #24
2df14     13 15 02 FB | 	rdlong	arg02, local01
2df18     18 26 86 F1 | 	sub	local01, #24
2df1c     14 13 02 F6 | 	mov	arg01, local02
2df20     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2df24     FD 2E 0A F6 | 	mov	local05, result1 wz
2df28     E0 01 90 5D |  if_ne	jmp	#LR__4611
2df2c     1C 26 06 F1 | 	add	local01, #28
2df30     13 17 02 FB | 	rdlong	arg03, local01
2df34     1C 26 86 F1 | 	sub	local01, #28
2df38     0B 31 C2 FA | 	rdbyte	local06, arg03
2df3c     18 17 02 F6 | 	mov	arg03, local06
2df40     07 16 4E F7 | 	zerox	arg03, #7 wz
2df44     04 2E 06 A6 |  if_e	mov	local05, #4
2df48     C0 01 90 AD |  if_e	jmp	#LR__4611
2df4c     1C 26 06 F1 | 	add	local01, #28
2df50     13 33 02 FB | 	rdlong	local07, local01
2df54     19 17 02 F6 | 	mov	arg03, local07
2df58     0B 16 06 F1 | 	add	arg03, #11
2df5c     0B 35 C2 FA | 	rdbyte	local08, arg03
2df60     3F 34 06 F5 | 	and	local08, #63
2df64     16 26 86 F1 | 	sub	local01, #22
2df68     13 35 42 FC | 	wrbyte	local08, local01
2df6c     06 26 86 F1 | 	sub	local01, #6
2df70     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2df74     E5 16 0E F2 | 	cmp	arg03, #229 wz
2df78     18 00 90 AD |  if_e	jmp	#LR__4601
2df7c     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2df80     08 16 CE F7 | 	test	arg03, #8 wz
2df84     1A 33 02 56 |  if_ne	mov	local07, local08
2df88     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2df8c     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2df90     18 00 90 AD |  if_e	jmp	#LR__4602
2df94                 | LR__4601
2df94     FF 2C 06 F6 | 	mov	local04, #255
2df98     2C 26 06 F1 | 	add	local01, #44
2df9c     FF FF FF FF 
2dfa0     13 FF 6B FC | 	wrlong	##-1, local01
2dfa4     2C 26 86 F1 | 	sub	local01, #44
2dfa8     4C 01 90 FD | 	jmp	#LR__4610
2dfac                 | LR__4602
2dfac     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2dfb0     0F 34 0E F2 | 	cmp	local08, #15 wz
2dfb4     C8 00 90 5D |  if_ne	jmp	#LR__4606
2dfb8     2B 26 06 F1 | 	add	local01, #43
2dfbc     13 35 C2 FA | 	rdbyte	local08, local01
2dfc0     2B 26 86 F1 | 	sub	local01, #43
2dfc4     40 34 CE F7 | 	test	local08, #64 wz
2dfc8     2C 01 90 5D |  if_ne	jmp	#LR__4609
2dfcc     18 37 E2 F8 | 	getbyte	local09, local06, #0
2dfd0     40 36 CE F7 | 	test	local09, #64 wz
2dfd4     30 00 90 AD |  if_e	jmp	#LR__4603
2dfd8     1C 26 06 F1 | 	add	local01, #28
2dfdc     13 37 02 FB | 	rdlong	local09, local01
2dfe0     0D 36 06 F1 | 	add	local09, #13
2dfe4     1B 2B C2 FA | 	rdbyte	local03, local09
2dfe8     18 31 E2 F8 | 	getbyte	local06, local06, #0
2dfec     BF 30 06 F5 | 	and	local06, #191
2dff0     18 2D 02 F6 | 	mov	local04, local06
2dff4     0C 26 86 F1 | 	sub	local01, #12
2dff8     13 37 02 FB | 	rdlong	local09, local01
2dffc     1C 26 06 F1 | 	add	local01, #28
2e000     13 37 62 FC | 	wrlong	local09, local01
2e004     2C 26 86 F1 | 	sub	local01, #44
2e008                 | LR__4603
2e008     18 39 E2 F8 | 	getbyte	local10, local06, #0
2e00c     16 33 E2 F8 | 	getbyte	local07, local04, #0
2e010     19 39 0A F2 | 	cmp	local10, local07 wz
2e014     5C 00 90 5D |  if_ne	jmp	#LR__4604
2e018     15 35 E2 F8 | 	getbyte	local08, local03, #0
2e01c     1C 26 06 F1 | 	add	local01, #28
2e020     13 33 02 FB | 	rdlong	local07, local01
2e024     1C 26 86 F1 | 	sub	local01, #28
2e028     0D 32 06 F1 | 	add	local07, #13
2e02c     19 31 C2 FA | 	rdbyte	local06, local07
2e030     18 33 E2 F8 | 	getbyte	local07, local06, #0
2e034     19 35 0A F2 | 	cmp	local08, local07 wz
2e038     38 00 90 5D |  if_ne	jmp	#LR__4604
2e03c     0C 28 06 F1 | 	add	local02, #12
2e040     14 13 02 FB | 	rdlong	arg01, local02
2e044     0C 28 86 F1 | 	sub	local02, #12
2e048     1C 26 06 F1 | 	add	local01, #28
2e04c     13 3B 02 FB | 	rdlong	local11, local01
2e050     1C 26 86 F1 | 	sub	local01, #28
2e054     1D 15 02 F6 | 	mov	arg02, local11
2e058     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2e05c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e060     16 3B 02 56 |  if_ne	mov	local11, local04
2e064     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2e068     01 3A 86 51 |  if_ne	sub	local11, #1
2e06c     1D 37 02 56 |  if_ne	mov	local09, local11
2e070     04 00 90 5D |  if_ne	jmp	#LR__4605
2e074                 | LR__4604
2e074     FF 36 06 F6 | 	mov	local09, #255
2e078                 | LR__4605
2e078     1B 2D 02 F6 | 	mov	local04, local09
2e07c     78 00 90 FD | 	jmp	#LR__4609
2e080                 | LR__4606
2e080     16 37 02 F6 | 	mov	local09, local04
2e084     07 36 4E F7 | 	zerox	local09, #7 wz
2e088     20 00 90 5D |  if_ne	jmp	#LR__4607
2e08c     15 39 E2 F8 | 	getbyte	local10, local03, #0
2e090     1C 26 06 F1 | 	add	local01, #28
2e094     13 13 02 FB | 	rdlong	arg01, local01
2e098     1C 26 86 F1 | 	sub	local01, #28
2e09c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2e0a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e0a4     FD 38 0A F2 | 	cmp	local10, result1 wz
2e0a8     60 00 90 AD |  if_e	jmp	#LR__4611
2e0ac                 | LR__4607
2e0ac     2B 26 06 F1 | 	add	local01, #43
2e0b0     13 37 C2 FA | 	rdbyte	local09, local01
2e0b4     2B 26 86 F1 | 	sub	local01, #43
2e0b8     01 36 CE F7 | 	test	local09, #1 wz
2e0bc     24 00 90 5D |  if_ne	jmp	#LR__4608
2e0c0     1C 26 06 F1 | 	add	local01, #28
2e0c4     13 13 02 FB | 	rdlong	arg01, local01
2e0c8     04 26 06 F1 | 	add	local01, #4
2e0cc     13 15 02 F6 | 	mov	arg02, local01
2e0d0     20 26 86 F1 | 	sub	local01, #32
2e0d4     0B 16 06 F6 | 	mov	arg03, #11
2e0d8     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2e0dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0e0     28 00 90 AD |  if_e	jmp	#LR__4611
2e0e4                 | LR__4608
2e0e4     FF 2C 06 F6 | 	mov	local04, #255
2e0e8     2C 26 06 F1 | 	add	local01, #44
2e0ec     FF FF FF FF 
2e0f0     13 FF 6B FC | 	wrlong	##-1, local01
2e0f4     2C 26 86 F1 | 	sub	local01, #44
2e0f8                 | LR__4609
2e0f8                 | LR__4610
2e0f8     13 13 02 F6 | 	mov	arg01, local01
2e0fc     00 14 06 F6 | 	mov	arg02, #0
2e100     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2e104     FD 2E 0A F6 | 	mov	local05, result1 wz
2e108     04 FE 9F AD |  if_e	jmp	#LR__4600
2e10c                 | LR__4611
2e10c                 | ' 
2e10c                 | ' 	return res;
2e10c     17 FB 01 F6 | 	mov	result1, local05
2e110                 | LR__4612
2e110     A7 F0 03 F6 | 	mov	ptra, fp
2e114     B2 00 A0 FD | 	call	#popregs_
2e118                 | _fatfs_cc_dir_find_ret
2e118     2D 00 64 FD | 	ret
2e11c                 | 
2e11c                 | _fatfs_cc_dir_register
2e11c     0A 4A 05 F6 | 	mov	COUNT_, #10
2e120     A8 00 A0 FD | 	call	#pushregs_
2e124     2C F0 07 F1 | 	add	ptra, #44
2e128     04 4E 05 F1 | 	add	fp, #4
2e12c     A7 12 62 FC | 	wrlong	arg01, fp
2e130     09 27 02 FB | 	rdlong	local01, arg01
2e134     08 4E 05 F1 | 	add	fp, #8
2e138     A7 26 62 FC | 	wrlong	local01, fp
2e13c     08 4E 85 F1 | 	sub	fp, #8
2e140     A7 28 02 FB | 	rdlong	local02, fp
2e144     04 4E 85 F1 | 	sub	fp, #4
2e148     2B 28 06 F1 | 	add	local02, #43
2e14c     14 29 C2 FA | 	rdbyte	local02, local02
2e150     A0 28 CE F7 | 	test	local02, #160 wz
2e154     06 FA 05 56 |  if_ne	mov	result1, #6
2e158     F8 03 90 5D |  if_ne	jmp	#LR__4635
2e15c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2e15c     14 4E 05 F1 | 	add	fp, #20
2e160     A7 00 68 FC | 	wrlong	#0, fp
2e164     14 4E 85 F1 | 	sub	fp, #20
2e168     97 28 48 FB | 	callpa	#(@LR__4621-@LR__4620)>>2,fcache_load_ptr_
2e16c                 | LR__4620
2e16c     0C 4E 05 F1 | 	add	fp, #12
2e170     A7 28 02 FB | 	rdlong	local02, fp
2e174     0C 28 06 F1 | 	add	local02, #12
2e178     14 2B 02 FB | 	rdlong	local03, local02
2e17c     08 4E 05 F1 | 	add	fp, #8
2e180     A7 2C 02 FB | 	rdlong	local04, fp
2e184     14 4E 85 F1 | 	sub	fp, #20
2e188     01 2C 66 F0 | 	shl	local04, #1
2e18c     15 2D 02 F1 | 	add	local04, local03
2e190     16 29 EA FA | 	rdword	local02, local04 wz
2e194     24 00 90 AD |  if_e	jmp	#LR__4622
2e198     14 4E 05 F1 | 	add	fp, #20
2e19c     A7 2E 02 FB | 	rdlong	local05, fp
2e1a0     17 31 02 F6 | 	mov	local06, local05
2e1a4     17 33 02 F6 | 	mov	local07, local05
2e1a8     19 35 02 F6 | 	mov	local08, local07
2e1ac     01 34 06 F1 | 	add	local08, #1
2e1b0     A7 34 62 FC | 	wrlong	local08, fp
2e1b4     14 4E 85 F1 | 	sub	fp, #20
2e1b8     B0 FF 9F FD | 	jmp	#LR__4620
2e1bc                 | LR__4621
2e1bc                 | LR__4622
2e1bc     1C 4E 05 F1 | 	add	fp, #28
2e1c0     A7 12 02 F6 | 	mov	arg01, fp
2e1c4     18 4E 85 F1 | 	sub	fp, #24
2e1c8     A7 14 02 FB | 	rdlong	arg02, fp
2e1cc     04 4E 85 F1 | 	sub	fp, #4
2e1d0     20 14 06 F1 | 	add	arg02, #32
2e1d4     0C 16 06 F6 | 	mov	arg03, #12
2e1d8     18 6C BF FD | 	call	#__system____builtin_memmove
2e1dc     27 4E 05 F1 | 	add	fp, #39
2e1e0     A7 36 C2 FA | 	rdbyte	local09, fp
2e1e4     27 4E 85 F1 | 	sub	fp, #39
2e1e8     01 36 CE F7 | 	test	local09, #1 wz
2e1ec     F4 00 90 AD |  if_e	jmp	#LR__4625
2e1f0     04 4E 05 F1 | 	add	fp, #4
2e1f4     A7 38 02 FB | 	rdlong	local10, fp
2e1f8     2B 38 06 F1 | 	add	local10, #43
2e1fc     1C 81 48 FC | 	wrbyte	#64, local10
2e200                 | ' 		dp->fn[ 11 ] =  0x40 ;
2e200                 | ' 		for (n = 1; n < 100; n++) {
2e200     0C 4E 05 F1 | 	add	fp, #12
2e204     A7 02 68 FC | 	wrlong	#1, fp
2e208     10 4E 85 F1 | 	sub	fp, #16
2e20c                 | LR__4623
2e20c     10 4E 05 F1 | 	add	fp, #16
2e210     A7 28 02 FB | 	rdlong	local02, fp
2e214     10 4E 85 F1 | 	sub	fp, #16
2e218     64 28 16 F2 | 	cmp	local02, #100 wc
2e21c     70 00 90 3D |  if_ae	jmp	#LR__4624
2e220     04 4E 05 F1 | 	add	fp, #4
2e224     A7 12 02 FB | 	rdlong	arg01, fp
2e228     20 12 06 F1 | 	add	arg01, #32
2e22c     18 4E 05 F1 | 	add	fp, #24
2e230     A7 14 02 F6 | 	mov	arg02, fp
2e234     10 4E 85 F1 | 	sub	fp, #16
2e238     A7 38 02 FB | 	rdlong	local10, fp
2e23c     0C 38 06 F1 | 	add	local10, #12
2e240     1C 17 02 FB | 	rdlong	arg03, local10
2e244     04 4E 05 F1 | 	add	fp, #4
2e248     A7 18 02 FB | 	rdlong	arg04, fp
2e24c     10 4E 85 F1 | 	sub	fp, #16
2e250     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2e254     04 4E 05 F1 | 	add	fp, #4
2e258     A7 12 02 FB | 	rdlong	arg01, fp
2e25c     04 4E 85 F1 | 	sub	fp, #4
2e260     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2e264     08 4E 05 F1 | 	add	fp, #8
2e268     A7 FA 61 FC | 	wrlong	result1, fp
2e26c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e270     08 4E 85 F1 | 	sub	fp, #8
2e274     18 00 90 5D |  if_ne	jmp	#LR__4624
2e278     10 4E 05 F1 | 	add	fp, #16
2e27c     A7 38 02 FB | 	rdlong	local10, fp
2e280     01 38 06 F1 | 	add	local10, #1
2e284     A7 38 62 FC | 	wrlong	local10, fp
2e288     10 4E 85 F1 | 	sub	fp, #16
2e28c     7C FF 9F FD | 	jmp	#LR__4623
2e290                 | LR__4624
2e290     10 4E 05 F1 | 	add	fp, #16
2e294     A7 38 02 FB | 	rdlong	local10, fp
2e298     10 4E 85 F1 | 	sub	fp, #16
2e29c     64 38 0E F2 | 	cmp	local10, #100 wz
2e2a0     07 FA 05 A6 |  if_e	mov	result1, #7
2e2a4     AC 02 90 AD |  if_e	jmp	#LR__4635
2e2a8     08 4E 05 F1 | 	add	fp, #8
2e2ac     A7 38 02 FB | 	rdlong	local10, fp
2e2b0     08 4E 85 F1 | 	sub	fp, #8
2e2b4     04 38 0E F2 | 	cmp	local10, #4 wz
2e2b8     08 4E 05 51 |  if_ne	add	fp, #8
2e2bc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2e2c0     08 4E 85 51 |  if_ne	sub	fp, #8
2e2c4     8C 02 90 5D |  if_ne	jmp	#LR__4635
2e2c8     04 4E 05 F1 | 	add	fp, #4
2e2cc     A7 38 02 FB | 	rdlong	local10, fp
2e2d0     23 4E 05 F1 | 	add	fp, #35
2e2d4     A7 26 C2 FA | 	rdbyte	local01, fp
2e2d8     27 4E 85 F1 | 	sub	fp, #39
2e2dc     2B 38 06 F1 | 	add	local10, #43
2e2e0     1C 27 42 FC | 	wrbyte	local01, local10
2e2e4                 | LR__4625
2e2e4     27 4E 05 F1 | 	add	fp, #39
2e2e8     A7 28 C2 FA | 	rdbyte	local02, fp
2e2ec     27 4E 85 F1 | 	sub	fp, #39
2e2f0     02 28 CE F7 | 	test	local02, #2 wz
2e2f4     20 00 90 AD |  if_e	jmp	#LR__4626
2e2f8     14 4E 05 F1 | 	add	fp, #20
2e2fc     A7 38 02 FB | 	rdlong	local10, fp
2e300     0C 38 06 F1 | 	add	local10, #12
2e304     0D 38 16 FD | 	qdiv	local10, #13
2e308     14 4E 85 F1 | 	sub	fp, #20
2e30c     18 38 62 FD | 	getqx	local10
2e310     01 38 06 F1 | 	add	local10, #1
2e314     04 00 90 FD | 	jmp	#LR__4627
2e318                 | LR__4626
2e318     01 38 06 F6 | 	mov	local10, #1
2e31c                 | LR__4627
2e31c     18 4E 05 F1 | 	add	fp, #24
2e320     A7 38 62 FC | 	wrlong	local10, fp
2e324     14 4E 85 F1 | 	sub	fp, #20
2e328     A7 12 02 FB | 	rdlong	arg01, fp
2e32c     1C 15 02 F6 | 	mov	arg02, local10
2e330     04 4E 85 F1 | 	sub	fp, #4
2e334     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2e338     08 4E 05 F1 | 	add	fp, #8
2e33c     A7 FA 61 FC | 	wrlong	result1, fp
2e340     08 4E 85 F1 | 	sub	fp, #8
2e344     00 FA 0D F2 | 	cmp	result1, #0 wz
2e348     38 01 90 5D |  if_ne	jmp	#LR__4632
2e34c     18 4E 05 F1 | 	add	fp, #24
2e350     A7 38 02 FB | 	rdlong	local10, fp
2e354     01 38 8E F1 | 	sub	local10, #1 wz
2e358     A7 38 62 FC | 	wrlong	local10, fp
2e35c     18 4E 85 F1 | 	sub	fp, #24
2e360     20 01 90 AD |  if_e	jmp	#LR__4632
2e364     04 4E 05 F1 | 	add	fp, #4
2e368     A7 38 02 FB | 	rdlong	local10, fp
2e36c     1C 13 02 F6 | 	mov	arg01, local10
2e370     14 4E 05 F1 | 	add	fp, #20
2e374     A7 18 02 FB | 	rdlong	arg04, fp
2e378     18 4E 85 F1 | 	sub	fp, #24
2e37c     05 18 66 F0 | 	shl	arg04, #5
2e380     10 38 06 F1 | 	add	local10, #16
2e384     1C 15 02 FB | 	rdlong	arg02, local10
2e388     0C 15 82 F1 | 	sub	arg02, arg04
2e38c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e390     08 4E 05 F1 | 	add	fp, #8
2e394     A7 FA 61 FC | 	wrlong	result1, fp
2e398     08 4E 85 F1 | 	sub	fp, #8
2e39c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3a0     E0 00 90 5D |  if_ne	jmp	#LR__4631
2e3a4     04 4E 05 F1 | 	add	fp, #4
2e3a8     A7 12 02 FB | 	rdlong	arg01, fp
2e3ac     04 4E 85 F1 | 	sub	fp, #4
2e3b0     20 12 06 F1 | 	add	arg01, #32
2e3b4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2e3b8     FD 38 02 F6 | 	mov	local10, result1
2e3bc     28 4E 05 F1 | 	add	fp, #40
2e3c0     A7 38 42 FC | 	wrbyte	local10, fp
2e3c4     28 4E 85 F1 | 	sub	fp, #40
2e3c8                 | ' 			sum = sum_sfn(dp->fn);
2e3c8                 | ' 			do {
2e3c8                 | LR__4628
2e3c8     0C 4E 05 F1 | 	add	fp, #12
2e3cc     A7 12 02 FB | 	rdlong	arg01, fp
2e3d0     08 4E 85 F1 | 	sub	fp, #8
2e3d4     A7 26 02 FB | 	rdlong	local01, fp
2e3d8     04 4E 85 F1 | 	sub	fp, #4
2e3dc     18 26 06 F1 | 	add	local01, #24
2e3e0     13 15 02 FB | 	rdlong	arg02, local01
2e3e4     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2e3e8     08 4E 05 F1 | 	add	fp, #8
2e3ec     A7 FA 61 FC | 	wrlong	result1, fp
2e3f0     00 FA 4D F2 | 	cmps	result1, #0 wz
2e3f4     08 4E 85 F1 | 	sub	fp, #8
2e3f8     88 00 90 5D |  if_ne	jmp	#LR__4630
2e3fc     0C 4E 05 F1 | 	add	fp, #12
2e400     A7 28 02 FB | 	rdlong	local02, fp
2e404     0C 28 06 F1 | 	add	local02, #12
2e408     14 13 02 FB | 	rdlong	arg01, local02
2e40c     08 4E 85 F1 | 	sub	fp, #8
2e410     A7 26 02 FB | 	rdlong	local01, fp
2e414     1C 26 06 F1 | 	add	local01, #28
2e418     13 15 02 FB | 	rdlong	arg02, local01
2e41c     14 4E 05 F1 | 	add	fp, #20
2e420     A7 16 02 FB | 	rdlong	arg03, fp
2e424     10 4E 05 F1 | 	add	fp, #16
2e428     A7 18 C2 FA | 	rdbyte	arg04, fp
2e42c     28 4E 85 F1 | 	sub	fp, #40
2e430     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2e434     0C 4E 05 F1 | 	add	fp, #12
2e438     A7 38 02 FB | 	rdlong	local10, fp
2e43c     03 38 06 F1 | 	add	local10, #3
2e440     1C 03 48 FC | 	wrbyte	#1, local10
2e444     08 4E 85 F1 | 	sub	fp, #8
2e448     A7 12 02 FB | 	rdlong	arg01, fp
2e44c     04 4E 85 F1 | 	sub	fp, #4
2e450     00 14 06 F6 | 	mov	arg02, #0
2e454     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2e458     08 4E 05 F1 | 	add	fp, #8
2e45c     A7 FA 61 FC | 	wrlong	result1, fp
2e460     00 FA 4D F2 | 	cmps	result1, #0 wz
2e464     08 4E 85 F1 | 	sub	fp, #8
2e468     18 00 90 5D |  if_ne	jmp	#LR__4629
2e46c     18 4E 05 F1 | 	add	fp, #24
2e470     A7 38 02 FB | 	rdlong	local10, fp
2e474     01 38 8E F1 | 	sub	local10, #1 wz
2e478     A7 38 62 FC | 	wrlong	local10, fp
2e47c     18 4E 85 F1 | 	sub	fp, #24
2e480     44 FF 9F 5D |  if_ne	jmp	#LR__4628
2e484                 | LR__4629
2e484                 | LR__4630
2e484                 | LR__4631
2e484                 | LR__4632
2e484     08 4E 05 F1 | 	add	fp, #8
2e488     A7 38 0A FB | 	rdlong	local10, fp wz
2e48c     08 4E 85 F1 | 	sub	fp, #8
2e490     B4 00 90 5D |  if_ne	jmp	#LR__4634
2e494     0C 4E 05 F1 | 	add	fp, #12
2e498     A7 12 02 FB | 	rdlong	arg01, fp
2e49c     08 4E 85 F1 | 	sub	fp, #8
2e4a0     A7 26 02 FB | 	rdlong	local01, fp
2e4a4     04 4E 85 F1 | 	sub	fp, #4
2e4a8     18 26 06 F1 | 	add	local01, #24
2e4ac     13 15 02 FB | 	rdlong	arg02, local01
2e4b0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2e4b4     08 4E 05 F1 | 	add	fp, #8
2e4b8     A7 FA 61 FC | 	wrlong	result1, fp
2e4bc     08 4E 85 F1 | 	sub	fp, #8
2e4c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4c4     80 00 90 5D |  if_ne	jmp	#LR__4633
2e4c8     04 4E 05 F1 | 	add	fp, #4
2e4cc     A7 28 02 FB | 	rdlong	local02, fp
2e4d0     04 4E 85 F1 | 	sub	fp, #4
2e4d4     1C 28 06 F1 | 	add	local02, #28
2e4d8     14 13 02 FB | 	rdlong	arg01, local02
2e4dc     00 14 06 F6 | 	mov	arg02, #0
2e4e0     20 16 06 F6 | 	mov	arg03, #32
2e4e4     98 00 A0 FD | 	call	#\builtin_bytefill_
2e4e8     04 4E 05 F1 | 	add	fp, #4
2e4ec     A7 14 02 FB | 	rdlong	arg02, fp
2e4f0     0A 27 02 F6 | 	mov	local01, arg02
2e4f4     1C 26 06 F1 | 	add	local01, #28
2e4f8     13 13 02 FB | 	rdlong	arg01, local01
2e4fc     04 4E 85 F1 | 	sub	fp, #4
2e500     20 14 06 F1 | 	add	arg02, #32
2e504     0B 16 06 F6 | 	mov	arg03, #11
2e508     E8 68 BF FD | 	call	#__system____builtin_memmove
2e50c     04 4E 05 F1 | 	add	fp, #4
2e510     A7 36 02 FB | 	rdlong	local09, fp
2e514     1B 39 02 F6 | 	mov	local10, local09
2e518     1C 38 06 F1 | 	add	local10, #28
2e51c     1C 27 02 FB | 	rdlong	local01, local10
2e520     2B 36 06 F1 | 	add	local09, #43
2e524     1B 39 C2 FA | 	rdbyte	local10, local09
2e528     18 38 06 F5 | 	and	local10, #24
2e52c     0C 26 06 F1 | 	add	local01, #12
2e530     13 39 42 FC | 	wrbyte	local10, local01
2e534     08 4E 05 F1 | 	add	fp, #8
2e538     A7 38 02 FB | 	rdlong	local10, fp
2e53c     0C 4E 85 F1 | 	sub	fp, #12
2e540     03 38 06 F1 | 	add	local10, #3
2e544     1C 03 48 FC | 	wrbyte	#1, local10
2e548                 | LR__4633
2e548                 | LR__4634
2e548                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2e548                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2e548                 | ' 
2e548                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2e548                 | ' 
2e548                 | ' 			fs->wflag = 1;
2e548                 | ' 		}
2e548                 | ' 	}
2e548                 | ' 
2e548                 | ' 	return res;
2e548     08 4E 05 F1 | 	add	fp, #8
2e54c     A7 FA 01 FB | 	rdlong	result1, fp
2e550     08 4E 85 F1 | 	sub	fp, #8
2e554                 | LR__4635
2e554     A7 F0 03 F6 | 	mov	ptra, fp
2e558     B2 00 A0 FD | 	call	#popregs_
2e55c                 | _fatfs_cc_dir_register_ret
2e55c     2D 00 64 FD | 	ret
2e560                 | 
2e560                 | _fatfs_cc_dir_remove
2e560     05 4A 05 F6 | 	mov	COUNT_, #5
2e564     A8 00 A0 FD | 	call	#pushregs_
2e568     09 27 02 F6 | 	mov	local01, arg01
2e56c     13 29 02 FB | 	rdlong	local02, local01
2e570     10 26 06 F1 | 	add	local01, #16
2e574     13 2B 02 FB | 	rdlong	local03, local01
2e578     1C 26 06 F1 | 	add	local01, #28
2e57c     13 15 02 FB | 	rdlong	arg02, local01
2e580     2C 26 86 F1 | 	sub	local01, #44
2e584     FF FF 7F FF 
2e588     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2e58c     00 2C 06 A6 |  if_e	mov	local04, #0
2e590     18 00 90 AD |  if_e	jmp	#LR__4640
2e594     13 13 02 F6 | 	mov	arg01, local01
2e598     2C 26 06 F1 | 	add	local01, #44
2e59c     13 15 02 FB | 	rdlong	arg02, local01
2e5a0     2C 26 86 F1 | 	sub	local01, #44
2e5a4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2e5a8     FD 2C 02 F6 | 	mov	local04, result1
2e5ac                 | LR__4640
2e5ac     16 2F 0A F6 | 	mov	local05, local04 wz
2e5b0     64 00 90 5D |  if_ne	jmp	#LR__4643
2e5b4                 | ' 		do {
2e5b4                 | LR__4641
2e5b4     18 26 06 F1 | 	add	local01, #24
2e5b8     13 15 02 FB | 	rdlong	arg02, local01
2e5bc     18 26 86 F1 | 	sub	local01, #24
2e5c0     14 13 02 F6 | 	mov	arg01, local02
2e5c4     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2e5c8     FD 2E 0A F6 | 	mov	local05, result1 wz
2e5cc     40 00 90 5D |  if_ne	jmp	#LR__4642
2e5d0     1C 26 06 F1 | 	add	local01, #28
2e5d4     13 2D 02 FB | 	rdlong	local04, local01
2e5d8     16 CB 49 FC | 	wrbyte	#229, local04
2e5dc     03 28 06 F1 | 	add	local02, #3
2e5e0     14 03 48 FC | 	wrbyte	#1, local02
2e5e4     03 28 86 F1 | 	sub	local02, #3
2e5e8     0C 26 86 F1 | 	sub	local01, #12
2e5ec     13 2D 02 FB | 	rdlong	local04, local01
2e5f0     10 26 86 F1 | 	sub	local01, #16
2e5f4     15 2D 12 F2 | 	cmp	local04, local03 wc
2e5f8     14 00 90 3D |  if_ae	jmp	#LR__4642
2e5fc     13 13 02 F6 | 	mov	arg01, local01
2e600     00 14 06 F6 | 	mov	arg02, #0
2e604     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2e608     FD 2E 0A F6 | 	mov	local05, result1 wz
2e60c     A4 FF 9F AD |  if_e	jmp	#LR__4641
2e610                 | LR__4642
2e610     04 2E 0E F2 | 	cmp	local05, #4 wz
2e614     02 2E 06 A6 |  if_e	mov	local05, #2
2e618                 | LR__4643
2e618                 | ' 	}
2e618                 | ' #line 2590 "ff.c"
2e618                 | ' 	return res;
2e618     17 FB 01 F6 | 	mov	result1, local05
2e61c     A7 F0 03 F6 | 	mov	ptra, fp
2e620     B2 00 A0 FD | 	call	#popregs_
2e624                 | _fatfs_cc_dir_remove_ret
2e624     2D 00 64 FD | 	ret
2e628                 | 
2e628                 | _fatfs_cc_get_fileinfo
2e628     0F 4A 05 F6 | 	mov	COUNT_, #15
2e62c     A8 00 A0 FD | 	call	#pushregs_
2e630     09 27 02 F6 | 	mov	local01, arg01
2e634     0A 29 02 F6 | 	mov	local02, arg02
2e638     13 2B 02 FB | 	rdlong	local03, local01
2e63c     1C 28 06 F1 | 	add	local02, #28
2e640     14 01 48 FC | 	wrbyte	#0, local02
2e644     1C 28 86 F1 | 	sub	local02, #28
2e648     18 26 06 F1 | 	add	local01, #24
2e64c     13 2D 0A FB | 	rdlong	local04, local01 wz
2e650     18 26 86 F1 | 	sub	local01, #24
2e654     90 03 90 AD |  if_e	jmp	#LR__4664
2e658     2C 26 06 F1 | 	add	local01, #44
2e65c     13 2D 02 FB | 	rdlong	local04, local01
2e660     2C 26 86 F1 | 	sub	local01, #44
2e664     FF FF 7F FF 
2e668     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2e66c     D8 00 90 AD |  if_e	jmp	#LR__4653
2e670     00 2E 06 F6 | 	mov	local05, #0
2e674     00 30 06 F6 | 	mov	local06, #0
2e678     00 32 06 F6 | 	mov	local07, #0
2e67c                 | ' 			si = di = 0;
2e67c                 | ' 			hs = 0;
2e67c                 | ' 			while (fs->lfnbuf[si] != 0) {
2e67c                 | LR__4650
2e67c     0C 2A 06 F1 | 	add	local03, #12
2e680     15 2D 02 FB | 	rdlong	local04, local03
2e684     0C 2A 86 F1 | 	sub	local03, #12
2e688     18 35 02 F6 | 	mov	local08, local06
2e68c     01 34 66 F0 | 	shl	local08, #1
2e690     16 35 02 F1 | 	add	local08, local04
2e694     1A 2D EA FA | 	rdword	local04, local08 wz
2e698     90 00 90 AD |  if_e	jmp	#LR__4652
2e69c     0C 2A 06 F1 | 	add	local03, #12
2e6a0     15 37 02 FB | 	rdlong	local09, local03
2e6a4     0C 2A 86 F1 | 	sub	local03, #12
2e6a8     18 39 02 F6 | 	mov	local10, local06
2e6ac     01 38 66 F0 | 	shl	local10, #1
2e6b0     1B 39 02 F1 | 	add	local10, local09
2e6b4     1C 3B E2 FA | 	rdword	local11, local10
2e6b8     19 2D 02 F6 | 	mov	local04, local07
2e6bc     0F 2C 4E F7 | 	zerox	local04, #15 wz
2e6c0     01 30 06 F1 | 	add	local06, #1
2e6c4     24 00 90 5D |  if_ne	jmp	#LR__4651
2e6c8     1D 3D 32 F9 | 	getword	local12, local11, #0
2e6cc     6C 00 00 FF 
2e6d0     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2e6d4     14 00 90 CD |  if_b	jmp	#LR__4651
2e6d8     1D 3F 32 F9 | 	getword	local13, local11, #0
2e6dc     70 00 00 FF 
2e6e0     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2e6e4     1D 33 02 C6 |  if_b	mov	local07, local11
2e6e8                 | ' 					hs = wc; continue;
2e6e8     90 FF 9F CD |  if_b	jmp	#LR__4650
2e6ec                 | LR__4651
2e6ec     19 13 32 F9 | 	getword	arg01, local07, #0
2e6f0     10 12 66 F0 | 	shl	arg01, #16
2e6f4     1D 3B 32 F9 | 	getword	local11, local11, #0
2e6f8     1D 13 42 F5 | 	or	arg01, local11
2e6fc     17 15 02 F6 | 	mov	arg02, local05
2e700     1C 28 06 F1 | 	add	local02, #28
2e704     14 15 02 F1 | 	add	arg02, local02
2e708     FF 16 06 F6 | 	mov	arg03, #255
2e70c     17 17 82 F1 | 	sub	arg03, local05
2e710     1C 28 86 F1 | 	sub	local02, #28
2e714     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2e718     FD 40 0A F6 | 	mov	local14, result1 wz
2e71c     00 2E 06 A6 |  if_e	mov	local05, #0
2e720     20 2F 02 51 |  if_ne	add	local05, local14
2e724     00 32 06 56 |  if_ne	mov	local07, #0
2e728     50 FF 9F 5D |  if_ne	jmp	#LR__4650
2e72c                 | LR__4652
2e72c     19 2D 02 F6 | 	mov	local04, local07
2e730     0F 2C 4E F7 | 	zerox	local04, #15 wz
2e734     00 2E 06 56 |  if_ne	mov	local05, #0
2e738     1C 28 06 F1 | 	add	local02, #28
2e73c     14 2F 02 F1 | 	add	local05, local02
2e740     17 01 48 FC | 	wrbyte	#0, local05
2e744     1C 28 86 F1 | 	sub	local02, #28
2e748                 | LR__4653
2e748     00 2E 06 F6 | 	mov	local05, #0
2e74c     00 30 06 F6 | 	mov	local06, #0
2e750                 | ' 			fno->fname[di] = 0;
2e750                 | ' 		}
2e750                 | ' 	}
2e750                 | ' 
2e750                 | ' 	si = di = 0;
2e750                 | ' 	while (si < 11) {
2e750                 | LR__4654
2e750     0B 30 16 F2 | 	cmp	local06, #11 wc
2e754     20 01 90 3D |  if_ae	jmp	#LR__4657
2e758     1C 26 06 F1 | 	add	local01, #28
2e75c     13 37 02 FB | 	rdlong	local09, local01
2e760     1C 26 86 F1 | 	sub	local01, #28
2e764     18 39 02 F6 | 	mov	local10, local06
2e768     1B 39 02 F1 | 	add	local10, local09
2e76c     1C 3B C2 FA | 	rdbyte	local11, local10
2e770     1D 2D 32 F9 | 	getword	local04, local11, #0
2e774     20 2C 0E F2 | 	cmp	local04, #32 wz
2e778     01 30 06 F1 | 	add	local06, #1
2e77c     D0 FF 9F AD |  if_e	jmp	#LR__4654
2e780     1D 2D 32 F9 | 	getword	local04, local11, #0
2e784     05 2C 0E F2 | 	cmp	local04, #5 wz
2e788     E5 3A 06 A6 |  if_e	mov	local11, #229
2e78c     09 30 0E F2 | 	cmp	local06, #9 wz
2e790     20 00 90 5D |  if_ne	jmp	#LR__4655
2e794     0C 2E 16 F2 | 	cmp	local05, #12 wc
2e798     18 00 90 3D |  if_ae	jmp	#LR__4655
2e79c     17 3F 02 F6 | 	mov	local13, local05
2e7a0     0C 28 06 F1 | 	add	local02, #12
2e7a4     14 3F 02 F1 | 	add	local13, local02
2e7a8     1F 5D 48 FC | 	wrbyte	#46, local13
2e7ac     01 2E 06 F1 | 	add	local05, #1
2e7b0     0C 28 86 F1 | 	sub	local02, #12
2e7b4                 | LR__4655
2e7b4     1D 13 32 F9 | 	getword	arg01, local11, #0
2e7b8     07 12 4E F7 | 	zerox	arg01, #7 wz
2e7bc     00 FA 05 56 |  if_ne	mov	result1, #0
2e7c0                 | ' 
2e7c0                 | ' 	return 0;
2e7c0     00 FA 05 A6 |  if_e	mov	result1, #0
2e7c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7c8     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2e7cc     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2e7d0     50 00 90 AD |  if_e	jmp	#LR__4656
2e7d4     1C 26 06 F1 | 	add	local01, #28
2e7d8     13 39 02 FB | 	rdlong	local10, local01
2e7dc     1C 26 86 F1 | 	sub	local01, #28
2e7e0     18 35 02 F6 | 	mov	local08, local06
2e7e4     1C 35 02 F1 | 	add	local08, local10
2e7e8     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2e7ec     00 FA 05 56 |  if_ne	mov	result1, #0
2e7f0                 | ' 
2e7f0                 | ' 	return 0;
2e7f0     00 FA 05 A6 |  if_e	mov	result1, #0
2e7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7f8     28 00 90 AD |  if_e	jmp	#LR__4656
2e7fc     1D 3B 32 F9 | 	getword	local11, local11, #0
2e800     08 3A 66 F0 | 	shl	local11, #8
2e804     1C 26 06 F1 | 	add	local01, #28
2e808     13 41 02 FB | 	rdlong	local14, local01
2e80c     1C 26 86 F1 | 	sub	local01, #28
2e810     18 37 02 F6 | 	mov	local09, local06
2e814     20 37 02 F1 | 	add	local09, local14
2e818     1B 3D C2 FA | 	rdbyte	local12, local09
2e81c     1E 3B 42 F5 | 	or	local11, local12
2e820     01 30 06 F1 | 	add	local06, #1
2e824                 | LR__4656
2e824     1D 13 02 F6 | 	mov	arg01, local11
2e828     01 00 00 FF 
2e82c     52 15 06 F6 | 	mov	arg02, ##850
2e830     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2e834     FD 3A 02 F6 | 	mov	local11, result1
2e838     1D 2D 02 F6 | 	mov	local04, local11
2e83c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2e840     00 2E 06 A6 |  if_e	mov	local05, #0
2e844     30 00 90 AD |  if_e	jmp	#LR__4657
2e848     1D 13 32 F9 | 	getword	arg01, local11, #0
2e84c     17 15 02 F6 | 	mov	arg02, local05
2e850     0C 28 06 F1 | 	add	local02, #12
2e854     14 15 02 F1 | 	add	arg02, local02
2e858     0C 16 06 F6 | 	mov	arg03, #12
2e85c     17 17 82 F1 | 	sub	arg03, local05
2e860     0C 28 86 F1 | 	sub	local02, #12
2e864     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2e868     FD 40 0A F6 | 	mov	local14, result1 wz
2e86c     00 2E 06 A6 |  if_e	mov	local05, #0
2e870     20 2F 02 51 |  if_ne	add	local05, local14
2e874     D8 FE 9F 5D |  if_ne	jmp	#LR__4654
2e878                 | LR__4657
2e878     17 2D 02 F6 | 	mov	local04, local05
2e87c     0C 28 06 F1 | 	add	local02, #12
2e880     14 2D 02 F1 | 	add	local04, local02
2e884     16 01 48 FC | 	wrbyte	#0, local04
2e888     10 28 06 F1 | 	add	local02, #16
2e88c     14 2D CA FA | 	rdbyte	local04, local02 wz
2e890     1C 28 86 F1 | 	sub	local02, #28
2e894     F8 00 90 5D |  if_ne	jmp	#LR__4663
2e898     00 2E 0E F2 | 	cmp	local05, #0 wz
2e89c     1C 00 90 5D |  if_ne	jmp	#LR__4658
2e8a0     17 3F 02 F6 | 	mov	local13, local05
2e8a4     1C 28 06 F1 | 	add	local02, #28
2e8a8     14 3F 02 F1 | 	add	local13, local02
2e8ac     1F 7F 48 FC | 	wrbyte	#63, local13
2e8b0     01 2E 06 F1 | 	add	local05, #1
2e8b4     1C 28 86 F1 | 	sub	local02, #28
2e8b8     A4 00 90 FD | 	jmp	#LR__4662
2e8bc                 | LR__4658
2e8bc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2e8bc     00 2E 06 F6 | 	mov	local05, #0
2e8c0     00 30 06 F6 | 	mov	local06, #0
2e8c4     08 42 06 F6 | 	mov	local15, #8
2e8c8                 | LR__4659
2e8c8     18 2D 02 F6 | 	mov	local04, local06
2e8cc     0C 28 06 F1 | 	add	local02, #12
2e8d0     14 2D 02 F1 | 	add	local04, local02
2e8d4     16 3F CA FA | 	rdbyte	local13, local04 wz
2e8d8     0C 28 86 F1 | 	sub	local02, #12
2e8dc     80 00 90 AD |  if_e	jmp	#LR__4661
2e8e0     18 35 02 F6 | 	mov	local08, local06
2e8e4     0C 28 06 F1 | 	add	local02, #12
2e8e8     14 35 02 F1 | 	add	local08, local02
2e8ec     1A 3B C2 FA | 	rdbyte	local11, local08
2e8f0     1D 41 32 F9 | 	getword	local14, local11, #0
2e8f4     2E 40 0E F2 | 	cmp	local14, #46 wz
2e8f8     0C 28 86 F1 | 	sub	local02, #12
2e8fc     10 42 06 A6 |  if_e	mov	local15, #16
2e900     1D 41 32 F9 | 	getword	local14, local11, #0
2e904     41 40 16 F2 | 	cmp	local14, #65 wc
2e908     30 00 90 CD |  if_b	jmp	#LR__4660
2e90c     1D 35 32 F9 | 	getword	local08, local11, #0
2e910     5B 34 16 F2 | 	cmp	local08, #91 wc
2e914     24 00 90 3D |  if_ae	jmp	#LR__4660
2e918     1C 26 06 F1 | 	add	local01, #28
2e91c     13 37 02 FB | 	rdlong	local09, local01
2e920     1C 26 86 F1 | 	sub	local01, #28
2e924     0C 36 06 F1 | 	add	local09, #12
2e928     1B 39 C2 FA | 	rdbyte	local10, local09
2e92c     21 41 E2 F8 | 	getbyte	local14, local15, #0
2e930     20 39 CA F7 | 	test	local10, local14 wz
2e934     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2e938     20 3A 06 51 |  if_ne	add	local11, #32
2e93c                 | LR__4660
2e93c     17 41 02 F6 | 	mov	local14, local05
2e940     1C 28 06 F1 | 	add	local02, #28
2e944     14 41 02 F1 | 	add	local14, local02
2e948     1D 3B 32 F9 | 	getword	local11, local11, #0
2e94c     20 3B 42 FC | 	wrbyte	local11, local14
2e950     01 30 06 F1 | 	add	local06, #1
2e954     01 2E 06 F1 | 	add	local05, #1
2e958     1C 28 86 F1 | 	sub	local02, #28
2e95c     68 FF 9F FD | 	jmp	#LR__4659
2e960                 | LR__4661
2e960                 | LR__4662
2e960     1C 28 06 F1 | 	add	local02, #28
2e964     14 2F 02 F1 | 	add	local05, local02
2e968     17 01 48 FC | 	wrbyte	#0, local05
2e96c     1C 26 06 F1 | 	add	local01, #28
2e970     13 2D 02 FB | 	rdlong	local04, local01
2e974     1C 26 86 F1 | 	sub	local01, #28
2e978     0C 2C 06 F1 | 	add	local04, #12
2e97c     16 3F CA FA | 	rdbyte	local13, local04 wz
2e980     1C 28 86 F1 | 	sub	local02, #28
2e984     0C 28 06 A1 |  if_e	add	local02, #12
2e988     14 01 48 AC |  if_e	wrbyte	#0, local02
2e98c     0C 28 86 A1 |  if_e	sub	local02, #12
2e990                 | LR__4663
2e990     1C 26 06 F1 | 	add	local01, #28
2e994     13 3D 02 FB | 	rdlong	local12, local01
2e998     0B 3C 06 F1 | 	add	local12, #11
2e99c     1E 2D C2 FA | 	rdbyte	local04, local12
2e9a0     3F 2C 06 F5 | 	and	local04, #63
2e9a4     08 28 06 F1 | 	add	local02, #8
2e9a8     14 2D 42 FC | 	wrbyte	local04, local02
2e9ac     08 28 86 F1 | 	sub	local02, #8
2e9b0     13 13 02 FB | 	rdlong	arg01, local01
2e9b4     1C 12 06 F1 | 	add	arg01, #28
2e9b8                 | ' {
2e9b8                 | ' 
2e9b8                 | ' 	return *((DWORD*)ptr);
2e9b8     09 FB 01 FB | 	rdlong	result1, arg01
2e9bc     14 FB 61 FC | 	wrlong	result1, local02
2e9c0     13 13 02 FB | 	rdlong	arg01, local01
2e9c4     16 12 06 F1 | 	add	arg01, #22
2e9c8                 | ' {
2e9c8                 | ' 
2e9c8                 | ' 	return *((WORD*)ptr);
2e9c8     09 FB E1 FA | 	rdword	result1, arg01
2e9cc     06 28 06 F1 | 	add	local02, #6
2e9d0     14 FB 51 FC | 	wrword	result1, local02
2e9d4     13 13 02 FB | 	rdlong	arg01, local01
2e9d8     18 12 06 F1 | 	add	arg01, #24
2e9dc                 | ' {
2e9dc                 | ' 
2e9dc                 | ' 	return *((WORD*)ptr);
2e9dc     09 FB E1 FA | 	rdword	result1, arg01
2e9e0     02 28 86 F1 | 	sub	local02, #2
2e9e4     14 FB 51 FC | 	wrword	result1, local02
2e9e8                 | LR__4664
2e9e8     A7 F0 03 F6 | 	mov	ptra, fp
2e9ec     B2 00 A0 FD | 	call	#popregs_
2e9f0                 | _fatfs_cc_get_fileinfo_ret
2e9f0     2D 00 64 FD | 	ret
2e9f4                 | 
2e9f4                 | _fatfs_cc_create_name
2e9f4     0D 4A 05 F6 | 	mov	COUNT_, #13
2e9f8     A8 00 A0 FD | 	call	#pushregs_
2e9fc     34 F0 07 F1 | 	add	ptra, #52
2ea00     04 4E 05 F1 | 	add	fp, #4
2ea04     A7 12 62 FC | 	wrlong	arg01, fp
2ea08     04 4E 05 F1 | 	add	fp, #4
2ea0c     A7 14 62 FC | 	wrlong	arg02, fp
2ea10     0A FB 01 FB | 	rdlong	result1, arg02
2ea14     28 4E 05 F1 | 	add	fp, #40
2ea18     A7 FA 61 FC | 	wrlong	result1, fp
2ea1c     2C 4E 85 F1 | 	sub	fp, #44
2ea20     A7 FA 01 FB | 	rdlong	result1, fp
2ea24     FD 26 02 FB | 	rdlong	local01, result1
2ea28     0C 26 06 F1 | 	add	local01, #12
2ea2c     13 29 02 FB | 	rdlong	local02, local01
2ea30     14 4E 05 F1 | 	add	fp, #20
2ea34     A7 28 62 FC | 	wrlong	local02, fp
2ea38     14 4E 05 F1 | 	add	fp, #20
2ea3c     A7 00 68 FC | 	wrlong	#0, fp
2ea40     2C 4E 85 F1 | 	sub	fp, #44
2ea44                 | ' 
2ea44                 | ' 
2ea44                 | ' 
2ea44                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2ea44                 | ' 	for (;;) {
2ea44                 | LR__4670
2ea44     30 4E 05 F1 | 	add	fp, #48
2ea48     A7 12 02 F6 | 	mov	arg01, fp
2ea4c     30 4E 85 F1 | 	sub	fp, #48
2ea50     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2ea54     1C 4E 05 F1 | 	add	fp, #28
2ea58     A7 FA 61 FC | 	wrlong	result1, fp
2ea5c     1C 4E 85 F1 | 	sub	fp, #28
2ea60     FF FF 7F FF 
2ea64     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2ea68     06 FA 05 A6 |  if_e	mov	result1, #6
2ea6c     74 08 90 AD |  if_e	jmp	#LR__4710
2ea70     1C 4E 05 F1 | 	add	fp, #28
2ea74     A7 26 02 FB | 	rdlong	local01, fp
2ea78     1C 4E 85 F1 | 	sub	fp, #28
2ea7c     80 00 00 FF 
2ea80     00 26 16 F2 | 	cmp	local01, ##65536 wc
2ea84     3C 00 90 CD |  if_b	jmp	#LR__4671
2ea88     18 4E 05 F1 | 	add	fp, #24
2ea8c     A7 2A 02 FB | 	rdlong	local03, fp
2ea90     14 4E 05 F1 | 	add	fp, #20
2ea94     A7 26 02 FB | 	rdlong	local01, fp
2ea98     13 2D 02 F6 | 	mov	local04, local01
2ea9c     01 2C 06 F1 | 	add	local04, #1
2eaa0     A7 2C 62 FC | 	wrlong	local04, fp
2eaa4     01 26 66 F0 | 	shl	local01, #1
2eaa8     15 27 02 F1 | 	add	local01, local03
2eaac     10 4E 85 F1 | 	sub	fp, #16
2eab0     A7 2E 02 FB | 	rdlong	local05, fp
2eab4     1C 4E 85 F1 | 	sub	fp, #28
2eab8     17 31 02 F6 | 	mov	local06, local05
2eabc     10 30 46 F0 | 	shr	local06, #16
2eac0     13 31 52 FC | 	wrword	local06, local01
2eac4                 | LR__4671
2eac4     1C 4E 05 F1 | 	add	fp, #28
2eac8     A7 26 02 FB | 	rdlong	local01, fp
2eacc     08 4E 85 F1 | 	sub	fp, #8
2ead0     A7 26 52 FC | 	wrword	local01, fp
2ead4     A7 26 E2 FA | 	rdword	local01, fp
2ead8     14 4E 85 F1 | 	sub	fp, #20
2eadc     20 26 16 F2 | 	cmp	local01, #32 wc
2eae0     B0 00 90 CD |  if_b	jmp	#LR__4673
2eae4     14 4E 05 F1 | 	add	fp, #20
2eae8     A7 26 E2 FA | 	rdword	local01, fp
2eaec     14 4E 85 F1 | 	sub	fp, #20
2eaf0     2F 26 0E F2 | 	cmp	local01, #47 wz
2eaf4     14 4E 05 51 |  if_ne	add	fp, #20
2eaf8     A7 2C E2 5A |  if_ne	rdword	local04, fp
2eafc     14 4E 85 51 |  if_ne	sub	fp, #20
2eb00     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2eb04     8C 00 90 AD |  if_e	jmp	#LR__4673
2eb08     14 4E 05 F1 | 	add	fp, #20
2eb0c     A7 12 E2 FA | 	rdword	arg01, fp
2eb10     14 4E 85 F1 | 	sub	fp, #20
2eb14     80 12 16 F2 | 	cmp	arg01, #128 wc
2eb18     24 00 90 3D |  if_ae	jmp	#LR__4672
2eb1c     A5 01 00 FF 
2eb20     58 12 06 F6 | 	mov	arg01, ##@LR__5332
2eb24     14 4E 05 F1 | 	add	fp, #20
2eb28     A7 14 E2 FA | 	rdword	arg02, fp
2eb2c     14 4E 85 F1 | 	sub	fp, #20
2eb30     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2eb34     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb38     06 FA 05 56 |  if_ne	mov	result1, #6
2eb3c     A4 07 90 5D |  if_ne	jmp	#LR__4710
2eb40                 | LR__4672
2eb40     2C 4E 05 F1 | 	add	fp, #44
2eb44     A7 30 02 FB | 	rdlong	local06, fp
2eb48     2C 4E 85 F1 | 	sub	fp, #44
2eb4c     FF 30 16 F2 | 	cmp	local06, #255 wc
2eb50     06 FA 05 36 |  if_ae	mov	result1, #6
2eb54     8C 07 90 3D |  if_ae	jmp	#LR__4710
2eb58     18 4E 05 F1 | 	add	fp, #24
2eb5c     A7 2A 02 FB | 	rdlong	local03, fp
2eb60     14 4E 05 F1 | 	add	fp, #20
2eb64     A7 28 02 FB | 	rdlong	local02, fp
2eb68     14 2D 02 F6 | 	mov	local04, local02
2eb6c     01 2C 06 F1 | 	add	local04, #1
2eb70     A7 2C 62 FC | 	wrlong	local04, fp
2eb74     14 27 02 F6 | 	mov	local01, local02
2eb78     01 26 66 F0 | 	shl	local01, #1
2eb7c     15 27 02 F1 | 	add	local01, local03
2eb80     18 4E 85 F1 | 	sub	fp, #24
2eb84     A7 30 E2 FA | 	rdword	local06, fp
2eb88     14 4E 85 F1 | 	sub	fp, #20
2eb8c     13 31 52 FC | 	wrword	local06, local01
2eb90     B0 FE 9F FD | 	jmp	#LR__4670
2eb94                 | LR__4673
2eb94     14 4E 05 F1 | 	add	fp, #20
2eb98     A7 32 E2 FA | 	rdword	local07, fp
2eb9c     14 4E 85 F1 | 	sub	fp, #20
2eba0     20 32 16 F2 | 	cmp	local07, #32 wc
2eba4     10 4E 05 C1 |  if_b	add	fp, #16
2eba8     A7 08 48 CC |  if_b	wrbyte	#4, fp
2ebac     10 4E 85 C1 |  if_b	sub	fp, #16
2ebb0     74 00 90 CD |  if_b	jmp	#LR__4678
2ebb4     97 24 48 FB | 	callpa	#(@LR__4676-@LR__4674)>>2,fcache_load_ptr_
2ebb8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2ebb8                 | LR__4674
2ebb8     30 4E 05 F1 | 	add	fp, #48
2ebbc     A7 2C 02 FB | 	rdlong	local04, fp
2ebc0     30 4E 85 F1 | 	sub	fp, #48
2ebc4     16 33 C2 FA | 	rdbyte	local07, local04
2ebc8     2F 32 0E F2 | 	cmp	local07, #47 wz
2ebcc     18 00 90 AD |  if_e	jmp	#LR__4675
2ebd0     30 4E 05 F1 | 	add	fp, #48
2ebd4     A7 2C 02 FB | 	rdlong	local04, fp
2ebd8     30 4E 85 F1 | 	sub	fp, #48
2ebdc     16 29 C2 FA | 	rdbyte	local02, local04
2ebe0     5C 28 0E F2 | 	cmp	local02, #92 wz
2ebe4     18 00 90 5D |  if_ne	jmp	#LR__4677
2ebe8                 | LR__4675
2ebe8     30 4E 05 F1 | 	add	fp, #48
2ebec     A7 26 02 FB | 	rdlong	local01, fp
2ebf0     01 26 06 F1 | 	add	local01, #1
2ebf4     A7 26 62 FC | 	wrlong	local01, fp
2ebf8     30 4E 85 F1 | 	sub	fp, #48
2ebfc     B8 FF 9F FD | 	jmp	#LR__4674
2ec00                 | LR__4676
2ec00                 | LR__4677
2ec00     10 4E 05 F1 | 	add	fp, #16
2ec04     A7 00 48 FC | 	wrbyte	#0, fp
2ec08     20 4E 05 F1 | 	add	fp, #32
2ec0c     A7 30 02 FB | 	rdlong	local06, fp
2ec10     30 4E 85 F1 | 	sub	fp, #48
2ec14     18 33 C2 FA | 	rdbyte	local07, local06
2ec18     20 32 16 F2 | 	cmp	local07, #32 wc
2ec1c     10 4E 05 C1 |  if_b	add	fp, #16
2ec20     A7 08 48 CC |  if_b	wrbyte	#4, fp
2ec24     10 4E 85 C1 |  if_b	sub	fp, #16
2ec28                 | LR__4678
2ec28     08 4E 05 F1 | 	add	fp, #8
2ec2c     A7 32 02 FB | 	rdlong	local07, fp
2ec30     28 4E 05 F1 | 	add	fp, #40
2ec34     A7 26 02 FB | 	rdlong	local01, fp
2ec38     30 4E 85 F1 | 	sub	fp, #48
2ec3c     19 27 62 FC | 	wrlong	local01, local07
2ec40     97 38 48 FB | 	callpa	#(@LR__4680-@LR__4679)>>2,fcache_load_ptr_
2ec44                 | ' 	}
2ec44                 | ' 	*path = p;
2ec44                 | ' #line 2862 "ff.c"
2ec44                 | ' 	while (di) {
2ec44                 | LR__4679
2ec44     2C 4E 05 F1 | 	add	fp, #44
2ec48     A7 32 0A FB | 	rdlong	local07, fp wz
2ec4c     2C 4E 85 F1 | 	sub	fp, #44
2ec50     60 00 90 AD |  if_e	jmp	#LR__4681
2ec54     18 4E 05 F1 | 	add	fp, #24
2ec58     A7 30 02 FB | 	rdlong	local06, fp
2ec5c     14 4E 05 F1 | 	add	fp, #20
2ec60     A7 2C 02 FB | 	rdlong	local04, fp
2ec64     01 2C 86 F1 | 	sub	local04, #1
2ec68     01 2C 66 F0 | 	shl	local04, #1
2ec6c     18 2D 02 F1 | 	add	local04, local06
2ec70     16 31 E2 FA | 	rdword	local06, local04
2ec74     18 4E 85 F1 | 	sub	fp, #24
2ec78     A7 30 52 FC | 	wrword	local06, fp
2ec7c     A7 32 E2 FA | 	rdword	local07, fp
2ec80     14 4E 85 F1 | 	sub	fp, #20
2ec84     20 32 0E F2 | 	cmp	local07, #32 wz
2ec88     14 4E 05 51 |  if_ne	add	fp, #20
2ec8c     A7 26 E2 5A |  if_ne	rdword	local01, fp
2ec90     14 4E 85 51 |  if_ne	sub	fp, #20
2ec94     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2ec98     18 00 90 5D |  if_ne	jmp	#LR__4681
2ec9c     2C 4E 05 F1 | 	add	fp, #44
2eca0     A7 26 02 FB | 	rdlong	local01, fp
2eca4     01 26 86 F1 | 	sub	local01, #1
2eca8     A7 26 62 FC | 	wrlong	local01, fp
2ecac     2C 4E 85 F1 | 	sub	fp, #44
2ecb0     90 FF 9F FD | 	jmp	#LR__4679
2ecb4                 | LR__4680
2ecb4                 | LR__4681
2ecb4     18 4E 05 F1 | 	add	fp, #24
2ecb8     A7 34 02 FB | 	rdlong	local08, fp
2ecbc     14 4E 05 F1 | 	add	fp, #20
2ecc0     A7 2C 02 FB | 	rdlong	local04, fp
2ecc4     01 2C 66 F0 | 	shl	local04, #1
2ecc8     1A 2D 02 F1 | 	add	local04, local08
2eccc     16 01 58 FC | 	wrword	#0, local04
2ecd0     A7 32 0A FB | 	rdlong	local07, fp wz
2ecd4     2C 4E 85 F1 | 	sub	fp, #44
2ecd8     06 FA 05 A6 |  if_e	mov	result1, #6
2ecdc     04 06 90 AD |  if_e	jmp	#LR__4710
2ece0                 | ' 
2ece0                 | ' 
2ece0                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2ece0     28 4E 05 F1 | 	add	fp, #40
2ece4     A7 00 68 FC | 	wrlong	#0, fp
2ece8     28 4E 85 F1 | 	sub	fp, #40
2ecec     97 22 48 FB | 	callpa	#(@LR__4683-@LR__4682)>>2,fcache_load_ptr_
2ecf0                 | LR__4682
2ecf0     18 4E 05 F1 | 	add	fp, #24
2ecf4     A7 36 02 FB | 	rdlong	local09, fp
2ecf8     10 4E 05 F1 | 	add	fp, #16
2ecfc     A7 38 02 FB | 	rdlong	local10, fp
2ed00     28 4E 85 F1 | 	sub	fp, #40
2ed04     01 38 66 F0 | 	shl	local10, #1
2ed08     1B 39 02 F1 | 	add	local10, local09
2ed0c     1C 3B E2 FA | 	rdword	local11, local10
2ed10     20 3A 0E F2 | 	cmp	local11, #32 wz
2ed14     1C 00 90 5D |  if_ne	jmp	#LR__4684
2ed18     28 4E 05 F1 | 	add	fp, #40
2ed1c     A7 3C 02 FB | 	rdlong	local12, fp
2ed20     1E 2F 02 F6 | 	mov	local05, local12
2ed24     01 2E 06 F1 | 	add	local05, #1
2ed28     A7 2E 62 FC | 	wrlong	local05, fp
2ed2c     28 4E 85 F1 | 	sub	fp, #40
2ed30     BC FF 9F FD | 	jmp	#LR__4682
2ed34                 | LR__4683
2ed34                 | LR__4684
2ed34     28 4E 05 F1 | 	add	fp, #40
2ed38     A7 32 02 FB | 	rdlong	local07, fp
2ed3c     28 4E 85 F1 | 	sub	fp, #40
2ed40     01 32 16 F2 | 	cmp	local07, #1 wc
2ed44     28 00 90 3D |  if_ae	jmp	#LR__4685
2ed48     18 4E 05 F1 | 	add	fp, #24
2ed4c     A7 2A 02 FB | 	rdlong	local03, fp
2ed50     10 4E 05 F1 | 	add	fp, #16
2ed54     A7 36 02 FB | 	rdlong	local09, fp
2ed58     28 4E 85 F1 | 	sub	fp, #40
2ed5c     01 36 66 F0 | 	shl	local09, #1
2ed60     15 37 02 F1 | 	add	local09, local03
2ed64     1B 27 E2 FA | 	rdword	local01, local09
2ed68     2E 26 0E F2 | 	cmp	local01, #46 wz
2ed6c     14 00 90 5D |  if_ne	jmp	#LR__4686
2ed70                 | LR__4685
2ed70     10 4E 05 F1 | 	add	fp, #16
2ed74     A7 32 C2 FA | 	rdbyte	local07, fp
2ed78     03 32 46 F5 | 	or	local07, #3
2ed7c     A7 32 42 FC | 	wrbyte	local07, fp
2ed80     10 4E 85 F1 | 	sub	fp, #16
2ed84                 | LR__4686
2ed84     97 2C 48 FB | 	callpa	#(@LR__4688-@LR__4687)>>2,fcache_load_ptr_
2ed88                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2ed88                 | LR__4687
2ed88     2C 4E 05 F1 | 	add	fp, #44
2ed8c     A7 32 02 FB | 	rdlong	local07, fp
2ed90     2C 4E 85 F1 | 	sub	fp, #44
2ed94     01 32 16 F2 | 	cmp	local07, #1 wc
2ed98     44 00 90 CD |  if_b	jmp	#LR__4689
2ed9c     18 4E 05 F1 | 	add	fp, #24
2eda0     A7 30 02 FB | 	rdlong	local06, fp
2eda4     14 4E 05 F1 | 	add	fp, #20
2eda8     A7 2A 02 FB | 	rdlong	local03, fp
2edac     2C 4E 85 F1 | 	sub	fp, #44
2edb0     01 2A 86 F1 | 	sub	local03, #1
2edb4     01 2A 66 F0 | 	shl	local03, #1
2edb8     18 2B 02 F1 | 	add	local03, local06
2edbc     15 27 E2 FA | 	rdword	local01, local03
2edc0     2E 26 0E F2 | 	cmp	local01, #46 wz
2edc4     18 00 90 AD |  if_e	jmp	#LR__4689
2edc8     2C 4E 05 F1 | 	add	fp, #44
2edcc     A7 26 02 FB | 	rdlong	local01, fp
2edd0     01 26 86 F1 | 	sub	local01, #1
2edd4     A7 26 62 FC | 	wrlong	local01, fp
2edd8     2C 4E 85 F1 | 	sub	fp, #44
2eddc     A8 FF 9F FD | 	jmp	#LR__4687
2ede0                 | LR__4688
2ede0                 | LR__4689
2ede0     04 4E 05 F1 | 	add	fp, #4
2ede4     A7 12 02 FB | 	rdlong	arg01, fp
2ede8     04 4E 85 F1 | 	sub	fp, #4
2edec     20 12 06 F1 | 	add	arg01, #32
2edf0     20 14 06 F6 | 	mov	arg02, #32
2edf4     0B 16 06 F6 | 	mov	arg03, #11
2edf8     09 3F 02 F6 | 	mov	local13, arg01
2edfc     98 00 A0 FD | 	call	#\builtin_bytefill_
2ee00     1F FB 01 F6 | 	mov	result1, local13
2ee04     0C 4E 05 F1 | 	add	fp, #12
2ee08     A7 00 48 FC | 	wrbyte	#0, fp
2ee0c     A7 32 C2 FA | 	rdbyte	local07, fp
2ee10     14 4E 05 F1 | 	add	fp, #20
2ee14     A7 32 62 FC | 	wrlong	local07, fp
2ee18     04 4E 05 F1 | 	add	fp, #4
2ee1c     A7 10 68 FC | 	wrlong	#8, fp
2ee20     24 4E 85 F1 | 	sub	fp, #36
2ee24                 | ' 
2ee24                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2ee24                 | ' 	i = b = 0; ni = 8;
2ee24                 | ' 	for (;;) {
2ee24                 | LR__4690
2ee24     18 4E 05 F1 | 	add	fp, #24
2ee28     A7 2A 02 FB | 	rdlong	local03, fp
2ee2c     10 4E 05 F1 | 	add	fp, #16
2ee30     A7 36 02 FB | 	rdlong	local09, fp
2ee34     1B 2D 02 F6 | 	mov	local04, local09
2ee38     01 2C 06 F1 | 	add	local04, #1
2ee3c     A7 2C 62 FC | 	wrlong	local04, fp
2ee40     01 36 66 F0 | 	shl	local09, #1
2ee44     15 37 02 F1 | 	add	local09, local03
2ee48     1B 31 E2 FA | 	rdword	local06, local09
2ee4c     14 4E 85 F1 | 	sub	fp, #20
2ee50     A7 30 52 FC | 	wrword	local06, fp
2ee54     A7 32 EA FA | 	rdword	local07, fp wz
2ee58     14 4E 85 F1 | 	sub	fp, #20
2ee5c     74 03 90 AD |  if_e	jmp	#LR__4706
2ee60     14 4E 05 F1 | 	add	fp, #20
2ee64     A7 32 E2 FA | 	rdword	local07, fp
2ee68     14 4E 85 F1 | 	sub	fp, #20
2ee6c     20 32 0E F2 | 	cmp	local07, #32 wz
2ee70     30 00 90 AD |  if_e	jmp	#LR__4691
2ee74     14 4E 05 F1 | 	add	fp, #20
2ee78     A7 26 E2 FA | 	rdword	local01, fp
2ee7c     14 4E 85 F1 | 	sub	fp, #20
2ee80     2E 26 0E F2 | 	cmp	local01, #46 wz
2ee84     34 00 90 5D |  if_ne	jmp	#LR__4692
2ee88     28 4E 05 F1 | 	add	fp, #40
2ee8c     A7 2C 02 FB | 	rdlong	local04, fp
2ee90     04 4E 05 F1 | 	add	fp, #4
2ee94     A7 38 02 FB | 	rdlong	local10, fp
2ee98     2C 4E 85 F1 | 	sub	fp, #44
2ee9c     1C 2D 0A F2 | 	cmp	local04, local10 wz
2eea0     18 00 90 AD |  if_e	jmp	#LR__4692
2eea4                 | LR__4691
2eea4     10 4E 05 F1 | 	add	fp, #16
2eea8     A7 32 C2 FA | 	rdbyte	local07, fp
2eeac     03 32 46 F5 | 	or	local07, #3
2eeb0     A7 32 42 FC | 	wrbyte	local07, fp
2eeb4     10 4E 85 F1 | 	sub	fp, #16
2eeb8                 | ' 			cf |=  0x01  |  0x02 ;
2eeb8                 | ' 			continue;
2eeb8     68 FF 9F FD | 	jmp	#LR__4690
2eebc                 | LR__4692
2eebc     20 4E 05 F1 | 	add	fp, #32
2eec0     A7 32 02 FB | 	rdlong	local07, fp
2eec4     04 4E 05 F1 | 	add	fp, #4
2eec8     A7 26 02 FB | 	rdlong	local01, fp
2eecc     24 4E 85 F1 | 	sub	fp, #36
2eed0     13 33 12 F2 | 	cmp	local07, local01 wc
2eed4     1C 00 90 3D |  if_ae	jmp	#LR__4693
2eed8     28 4E 05 F1 | 	add	fp, #40
2eedc     A7 34 02 FB | 	rdlong	local08, fp
2eee0     04 4E 05 F1 | 	add	fp, #4
2eee4     A7 38 02 FB | 	rdlong	local10, fp
2eee8     2C 4E 85 F1 | 	sub	fp, #44
2eeec     1C 35 0A F2 | 	cmp	local08, local10 wz
2eef0     B0 00 90 5D |  if_ne	jmp	#LR__4695
2eef4                 | LR__4693
2eef4     24 4E 05 F1 | 	add	fp, #36
2eef8     A7 32 02 FB | 	rdlong	local07, fp
2eefc     24 4E 85 F1 | 	sub	fp, #36
2ef00     0B 32 0E F2 | 	cmp	local07, #11 wz
2ef04     18 00 90 5D |  if_ne	jmp	#LR__4694
2ef08     10 4E 05 F1 | 	add	fp, #16
2ef0c     A7 32 C2 FA | 	rdbyte	local07, fp
2ef10     03 32 46 F5 | 	or	local07, #3
2ef14     A7 32 42 FC | 	wrbyte	local07, fp
2ef18     10 4E 85 F1 | 	sub	fp, #16
2ef1c                 | ' 				cf |=  0x01  |  0x02 ;
2ef1c                 | ' 				break;
2ef1c     B4 02 90 FD | 	jmp	#LR__4706
2ef20                 | LR__4694
2ef20     28 4E 05 F1 | 	add	fp, #40
2ef24     A7 32 02 FB | 	rdlong	local07, fp
2ef28     04 4E 05 F1 | 	add	fp, #4
2ef2c     A7 26 02 FB | 	rdlong	local01, fp
2ef30     2C 4E 85 F1 | 	sub	fp, #44
2ef34     13 33 0A F2 | 	cmp	local07, local01 wz
2ef38     10 4E 05 51 |  if_ne	add	fp, #16
2ef3c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2ef40     03 32 46 55 |  if_ne	or	local07, #3
2ef44     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2ef48     10 4E 85 51 |  if_ne	sub	fp, #16
2ef4c     28 4E 05 F1 | 	add	fp, #40
2ef50     A7 32 02 FB | 	rdlong	local07, fp
2ef54     04 4E 05 F1 | 	add	fp, #4
2ef58     A7 28 02 FB | 	rdlong	local02, fp
2ef5c     2C 4E 85 F1 | 	sub	fp, #44
2ef60     14 33 1A F2 | 	cmp	local07, local02 wcz
2ef64     6C 02 90 1D |  if_a	jmp	#LR__4706
2ef68     2C 4E 05 F1 | 	add	fp, #44
2ef6c     A7 32 02 FB | 	rdlong	local07, fp
2ef70     04 4E 85 F1 | 	sub	fp, #4
2ef74     A7 32 62 FC | 	wrlong	local07, fp
2ef78     08 4E 85 F1 | 	sub	fp, #8
2ef7c     A7 10 68 FC | 	wrlong	#8, fp
2ef80     04 4E 05 F1 | 	add	fp, #4
2ef84     A7 16 68 FC | 	wrlong	#11, fp
2ef88     18 4E 85 F1 | 	sub	fp, #24
2ef8c     A7 3A C2 FA | 	rdbyte	local11, fp
2ef90     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2ef94     02 32 66 F0 | 	shl	local07, #2
2ef98     A7 32 42 FC | 	wrbyte	local07, fp
2ef9c     0C 4E 85 F1 | 	sub	fp, #12
2efa0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2efa0                 | ' 			continue;
2efa0     80 FE 9F FD | 	jmp	#LR__4690
2efa4                 | LR__4695
2efa4     14 4E 05 F1 | 	add	fp, #20
2efa8     A7 32 E2 FA | 	rdword	local07, fp
2efac     14 4E 85 F1 | 	sub	fp, #20
2efb0     80 32 16 F2 | 	cmp	local07, #128 wc
2efb4     6C 00 90 CD |  if_b	jmp	#LR__4697
2efb8     10 4E 05 F1 | 	add	fp, #16
2efbc     A7 32 C2 FA | 	rdbyte	local07, fp
2efc0     02 32 46 F5 | 	or	local07, #2
2efc4     A7 32 42 FC | 	wrbyte	local07, fp
2efc8     04 4E 05 F1 | 	add	fp, #4
2efcc     A7 12 E2 FA | 	rdword	arg01, fp
2efd0     14 4E 85 F1 | 	sub	fp, #20
2efd4     01 00 00 FF 
2efd8     52 15 06 F6 | 	mov	arg02, ##850
2efdc     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2efe0     14 4E 05 F1 | 	add	fp, #20
2efe4     A7 FA 51 FC | 	wrword	result1, fp
2efe8     A7 32 E2 FA | 	rdword	local07, fp
2efec     14 4E 85 F1 | 	sub	fp, #20
2eff0     80 32 CE F7 | 	test	local07, #128 wz
2eff4     2C 00 90 AD |  if_e	jmp	#LR__4696
2eff8     14 4E 05 F1 | 	add	fp, #20
2effc     A7 28 E2 FA | 	rdword	local02, fp
2f000     7F 28 06 F5 | 	and	local02, #127
2f004     01 00 00 FF 
2f008     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2f00c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f010     14 33 C2 FA | 	rdbyte	local07, local02
2f014     A7 32 52 FC | 	wrword	local07, fp
2f018     14 4E 85 F1 | 	sub	fp, #20
2f01c     01 00 00 FF 
2f020     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2f024                 | LR__4696
2f024                 | LR__4697
2f024     14 4E 05 F1 | 	add	fp, #20
2f028     A7 32 E2 FA | 	rdword	local07, fp
2f02c     14 4E 85 F1 | 	sub	fp, #20
2f030     00 33 16 F2 | 	cmp	local07, #256 wc
2f034     88 00 90 CD |  if_b	jmp	#LR__4699
2f038     24 4E 05 F1 | 	add	fp, #36
2f03c     A7 32 02 FB | 	rdlong	local07, fp
2f040     01 32 86 F1 | 	sub	local07, #1
2f044     04 4E 85 F1 | 	sub	fp, #4
2f048     A7 28 02 FB | 	rdlong	local02, fp
2f04c     20 4E 85 F1 | 	sub	fp, #32
2f050     19 29 12 F2 | 	cmp	local02, local07 wc
2f054     2C 00 90 CD |  if_b	jmp	#LR__4698
2f058     10 4E 05 F1 | 	add	fp, #16
2f05c     A7 3A C2 FA | 	rdbyte	local11, fp
2f060     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2f064     03 32 46 F5 | 	or	local07, #3
2f068     A7 32 42 FC | 	wrbyte	local07, fp
2f06c     14 4E 05 F1 | 	add	fp, #20
2f070     A7 32 02 FB | 	rdlong	local07, fp
2f074     04 4E 85 F1 | 	sub	fp, #4
2f078     A7 32 62 FC | 	wrlong	local07, fp
2f07c     20 4E 85 F1 | 	sub	fp, #32
2f080                 | ' 				cf |=  0x01  |  0x02 ;
2f080                 | ' 				i = ni; continue;
2f080     A0 FD 9F FD | 	jmp	#LR__4690
2f084                 | LR__4698
2f084     04 4E 05 F1 | 	add	fp, #4
2f088     A7 36 02 FB | 	rdlong	local09, fp
2f08c     1C 4E 05 F1 | 	add	fp, #28
2f090     A7 38 02 FB | 	rdlong	local10, fp
2f094     1C 2D 02 F6 | 	mov	local04, local10
2f098     01 2C 06 F1 | 	add	local04, #1
2f09c     A7 2C 62 FC | 	wrlong	local04, fp
2f0a0     20 36 06 F1 | 	add	local09, #32
2f0a4     1B 39 02 F1 | 	add	local10, local09
2f0a8     0C 4E 85 F1 | 	sub	fp, #12
2f0ac     A7 2A E2 FA | 	rdword	local03, fp
2f0b0     14 4E 85 F1 | 	sub	fp, #20
2f0b4     08 2A 46 F0 | 	shr	local03, #8
2f0b8     1C 2B 42 FC | 	wrbyte	local03, local10
2f0bc     D4 00 90 FD | 	jmp	#LR__4705
2f0c0                 | LR__4699
2f0c0     14 4E 05 F1 | 	add	fp, #20
2f0c4     A7 32 EA FA | 	rdword	local07, fp wz
2f0c8     14 4E 85 F1 | 	sub	fp, #20
2f0cc     20 00 90 AD |  if_e	jmp	#LR__4700
2f0d0     A5 01 00 FF 
2f0d4     61 12 06 F6 | 	mov	arg01, ##@LR__5333
2f0d8     14 4E 05 F1 | 	add	fp, #20
2f0dc     A7 14 E2 FA | 	rdword	arg02, fp
2f0e0     14 4E 85 F1 | 	sub	fp, #20
2f0e4     48 CB BF FD | 	call	#_fatfs_cc_strchr
2f0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f0ec     20 00 90 AD |  if_e	jmp	#LR__4701
2f0f0                 | LR__4700
2f0f0     14 4E 05 F1 | 	add	fp, #20
2f0f4     A7 BE 58 FC | 	wrword	#95, fp
2f0f8     04 4E 85 F1 | 	sub	fp, #4
2f0fc     A7 32 C2 FA | 	rdbyte	local07, fp
2f100     03 32 46 F5 | 	or	local07, #3
2f104     A7 32 42 FC | 	wrbyte	local07, fp
2f108     10 4E 85 F1 | 	sub	fp, #16
2f10c     84 00 90 FD | 	jmp	#LR__4704
2f110                 | LR__4701
2f110     14 4E 05 F1 | 	add	fp, #20
2f114     A7 32 E2 FA | 	rdword	local07, fp
2f118     14 4E 85 F1 | 	sub	fp, #20
2f11c     41 32 16 F2 | 	cmp	local07, #65 wc
2f120     24 00 90 CD |  if_b	jmp	#LR__4702
2f124     14 4E 05 F1 | 	add	fp, #20
2f128     A7 26 E2 FA | 	rdword	local01, fp
2f12c     14 4E 85 F1 | 	sub	fp, #20
2f130     5B 26 16 F2 | 	cmp	local01, #91 wc
2f134     0C 4E 05 C1 |  if_b	add	fp, #12
2f138     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2f13c     02 32 46 C5 |  if_b	or	local07, #2
2f140     A7 32 42 CC |  if_b	wrbyte	local07, fp
2f144     0C 4E 85 C1 |  if_b	sub	fp, #12
2f148                 | LR__4702
2f148     14 4E 05 F1 | 	add	fp, #20
2f14c     A7 32 E2 FA | 	rdword	local07, fp
2f150     14 4E 85 F1 | 	sub	fp, #20
2f154     61 32 16 F2 | 	cmp	local07, #97 wc
2f158     38 00 90 CD |  if_b	jmp	#LR__4703
2f15c     14 4E 05 F1 | 	add	fp, #20
2f160     A7 26 E2 FA | 	rdword	local01, fp
2f164     14 4E 85 F1 | 	sub	fp, #20
2f168     7B 26 16 F2 | 	cmp	local01, #123 wc
2f16c     24 00 90 3D |  if_ae	jmp	#LR__4703
2f170     0C 4E 05 F1 | 	add	fp, #12
2f174     A7 32 C2 FA | 	rdbyte	local07, fp
2f178     01 32 46 F5 | 	or	local07, #1
2f17c     A7 32 42 FC | 	wrbyte	local07, fp
2f180     08 4E 05 F1 | 	add	fp, #8
2f184     A7 32 E2 FA | 	rdword	local07, fp
2f188     20 32 86 F1 | 	sub	local07, #32
2f18c     A7 32 52 FC | 	wrword	local07, fp
2f190     14 4E 85 F1 | 	sub	fp, #20
2f194                 | LR__4703
2f194                 | LR__4704
2f194                 | LR__4705
2f194     04 4E 05 F1 | 	add	fp, #4
2f198     A7 3A 02 FB | 	rdlong	local11, fp
2f19c     1D 37 02 F6 | 	mov	local09, local11
2f1a0     1C 4E 05 F1 | 	add	fp, #28
2f1a4     A7 28 02 FB | 	rdlong	local02, fp
2f1a8     14 2D 02 F6 | 	mov	local04, local02
2f1ac     01 2C 06 F1 | 	add	local04, #1
2f1b0     A7 2C 62 FC | 	wrlong	local04, fp
2f1b4     14 39 02 F6 | 	mov	local10, local02
2f1b8     20 36 06 F1 | 	add	local09, #32
2f1bc     1B 39 02 F1 | 	add	local10, local09
2f1c0     0C 4E 85 F1 | 	sub	fp, #12
2f1c4     A7 2A E2 FA | 	rdword	local03, fp
2f1c8     14 4E 85 F1 | 	sub	fp, #20
2f1cc     1C 2B 42 FC | 	wrbyte	local03, local10
2f1d0     50 FC 9F FD | 	jmp	#LR__4690
2f1d4                 | LR__4706
2f1d4     04 4E 05 F1 | 	add	fp, #4
2f1d8     A7 3A 02 FB | 	rdlong	local11, fp
2f1dc     04 4E 85 F1 | 	sub	fp, #4
2f1e0     20 3A 06 F1 | 	add	local11, #32
2f1e4     1D 33 C2 FA | 	rdbyte	local07, local11
2f1e8     E5 32 0E F2 | 	cmp	local07, #229 wz
2f1ec     04 4E 05 A1 |  if_e	add	fp, #4
2f1f0     A7 32 02 AB |  if_e	rdlong	local07, fp
2f1f4     04 4E 85 A1 |  if_e	sub	fp, #4
2f1f8     20 32 06 A1 |  if_e	add	local07, #32
2f1fc     19 0B 48 AC |  if_e	wrbyte	#5, local07
2f200     24 4E 05 F1 | 	add	fp, #36
2f204     A7 32 02 FB | 	rdlong	local07, fp
2f208     24 4E 85 F1 | 	sub	fp, #36
2f20c     08 32 0E F2 | 	cmp	local07, #8 wz
2f210     0C 4E 05 A1 |  if_e	add	fp, #12
2f214     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2f218     02 32 66 A0 |  if_e	shl	local07, #2
2f21c     A7 32 42 AC |  if_e	wrbyte	local07, fp
2f220     0C 4E 85 A1 |  if_e	sub	fp, #12
2f224     0C 4E 05 F1 | 	add	fp, #12
2f228     A7 32 C2 FA | 	rdbyte	local07, fp
2f22c     0C 4E 85 F1 | 	sub	fp, #12
2f230     0C 32 06 F5 | 	and	local07, #12
2f234     0C 32 0E F2 | 	cmp	local07, #12 wz
2f238     18 00 90 AD |  if_e	jmp	#LR__4707
2f23c     0C 4E 05 F1 | 	add	fp, #12
2f240     A7 26 C2 FA | 	rdbyte	local01, fp
2f244     0C 4E 85 F1 | 	sub	fp, #12
2f248     03 26 06 F5 | 	and	local01, #3
2f24c     03 26 0E F2 | 	cmp	local01, #3 wz
2f250     14 00 90 5D |  if_ne	jmp	#LR__4708
2f254                 | LR__4707
2f254     10 4E 05 F1 | 	add	fp, #16
2f258     A7 32 C2 FA | 	rdbyte	local07, fp
2f25c     02 32 46 F5 | 	or	local07, #2
2f260     A7 32 42 FC | 	wrbyte	local07, fp
2f264     10 4E 85 F1 | 	sub	fp, #16
2f268                 | LR__4708
2f268     10 4E 05 F1 | 	add	fp, #16
2f26c     A7 32 C2 FA | 	rdbyte	local07, fp
2f270     10 4E 85 F1 | 	sub	fp, #16
2f274     02 32 CE F7 | 	test	local07, #2 wz
2f278     48 00 90 5D |  if_ne	jmp	#LR__4709
2f27c     0C 4E 05 F1 | 	add	fp, #12
2f280     A7 32 C2 FA | 	rdbyte	local07, fp
2f284     0C 4E 85 F1 | 	sub	fp, #12
2f288     01 32 CE F7 | 	test	local07, #1 wz
2f28c     10 4E 05 51 |  if_ne	add	fp, #16
2f290     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2f294     10 32 46 55 |  if_ne	or	local07, #16
2f298     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2f29c     10 4E 85 51 |  if_ne	sub	fp, #16
2f2a0     0C 4E 05 F1 | 	add	fp, #12
2f2a4     A7 32 C2 FA | 	rdbyte	local07, fp
2f2a8     0C 4E 85 F1 | 	sub	fp, #12
2f2ac     04 32 CE F7 | 	test	local07, #4 wz
2f2b0     10 4E 05 51 |  if_ne	add	fp, #16
2f2b4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2f2b8     08 32 46 55 |  if_ne	or	local07, #8
2f2bc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2f2c0     10 4E 85 51 |  if_ne	sub	fp, #16
2f2c4                 | LR__4709
2f2c4     04 4E 05 F1 | 	add	fp, #4
2f2c8     A7 32 02 FB | 	rdlong	local07, fp
2f2cc     0C 4E 05 F1 | 	add	fp, #12
2f2d0     A7 26 C2 FA | 	rdbyte	local01, fp
2f2d4     10 4E 85 F1 | 	sub	fp, #16
2f2d8     2B 32 06 F1 | 	add	local07, #43
2f2dc     19 27 42 FC | 	wrbyte	local01, local07
2f2e0                 | ' 	}
2f2e0                 | ' 
2f2e0                 | ' 	dp->fn[ 11 ] = cf;
2f2e0                 | ' 
2f2e0                 | ' 	return FR_OK;
2f2e0     00 FA 05 F6 | 	mov	result1, #0
2f2e4                 | LR__4710
2f2e4     A7 F0 03 F6 | 	mov	ptra, fp
2f2e8     B2 00 A0 FD | 	call	#popregs_
2f2ec                 | _fatfs_cc_create_name_ret
2f2ec     2D 00 64 FD | 	ret
2f2f0                 | 
2f2f0                 | _fatfs_cc_follow_path
2f2f0     02 4A 05 F6 | 	mov	COUNT_, #2
2f2f4     A8 00 A0 FD | 	call	#pushregs_
2f2f8     18 F0 07 F1 | 	add	ptra, #24
2f2fc     04 4E 05 F1 | 	add	fp, #4
2f300     A7 12 62 FC | 	wrlong	arg01, fp
2f304     04 4E 05 F1 | 	add	fp, #4
2f308     A7 14 62 FC | 	wrlong	arg02, fp
2f30c     04 4E 85 F1 | 	sub	fp, #4
2f310     A7 FA 01 FB | 	rdlong	result1, fp
2f314     FD 26 02 FB | 	rdlong	local01, result1
2f318     10 4E 05 F1 | 	add	fp, #16
2f31c     A7 26 62 FC | 	wrlong	local01, fp
2f320     14 4E 85 F1 | 	sub	fp, #20
2f324     97 24 48 FB | 	callpa	#(@LR__4722-@LR__4720)>>2,fcache_load_ptr_
2f328                 | ' )
2f328                 | ' {
2f328                 | ' 	FRESULT res;
2f328                 | ' 	BYTE ns;
2f328                 | ' 	FATFS *fs = dp->obj.fs;
2f328                 | ' #line 3034 "ff.c"
2f328                 | ' 	{
2f328                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2f328                 | LR__4720
2f328     08 4E 05 F1 | 	add	fp, #8
2f32c     A7 26 02 FB | 	rdlong	local01, fp
2f330     08 4E 85 F1 | 	sub	fp, #8
2f334     13 27 C2 FA | 	rdbyte	local01, local01
2f338     2F 26 0E F2 | 	cmp	local01, #47 wz
2f33c     18 00 90 AD |  if_e	jmp	#LR__4721
2f340     08 4E 05 F1 | 	add	fp, #8
2f344     A7 26 02 FB | 	rdlong	local01, fp
2f348     08 4E 85 F1 | 	sub	fp, #8
2f34c     13 27 C2 FA | 	rdbyte	local01, local01
2f350     5C 26 0E F2 | 	cmp	local01, #92 wz
2f354     18 00 90 5D |  if_ne	jmp	#LR__4723
2f358                 | LR__4721
2f358     08 4E 05 F1 | 	add	fp, #8
2f35c     A7 26 02 FB | 	rdlong	local01, fp
2f360     01 26 06 F1 | 	add	local01, #1
2f364     A7 26 62 FC | 	wrlong	local01, fp
2f368     08 4E 85 F1 | 	sub	fp, #8
2f36c     B8 FF 9F FD | 	jmp	#LR__4720
2f370                 | LR__4722
2f370                 | LR__4723
2f370     04 4E 05 F1 | 	add	fp, #4
2f374     A7 26 02 FB | 	rdlong	local01, fp
2f378     08 26 06 F1 | 	add	local01, #8
2f37c     13 01 68 FC | 	wrlong	#0, local01
2f380     04 4E 05 F1 | 	add	fp, #4
2f384     A7 26 02 FB | 	rdlong	local01, fp
2f388     08 4E 85 F1 | 	sub	fp, #8
2f38c     13 27 C2 FA | 	rdbyte	local01, local01
2f390     20 26 16 F2 | 	cmp	local01, #32 wc
2f394     30 00 90 3D |  if_ae	jmp	#LR__4724
2f398     04 4E 05 F1 | 	add	fp, #4
2f39c     A7 26 02 FB | 	rdlong	local01, fp
2f3a0     2B 26 06 F1 | 	add	local01, #43
2f3a4     13 01 49 FC | 	wrbyte	#128, local01
2f3a8     A7 12 02 FB | 	rdlong	arg01, fp
2f3ac     04 4E 85 F1 | 	sub	fp, #4
2f3b0     00 14 06 F6 | 	mov	arg02, #0
2f3b4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f3b8     0C 4E 05 F1 | 	add	fp, #12
2f3bc     A7 FA 61 FC | 	wrlong	result1, fp
2f3c0     0C 4E 85 F1 | 	sub	fp, #12
2f3c4     1C 01 90 FD | 	jmp	#LR__4728
2f3c8                 | LR__4724
2f3c8                 | ' 		for (;;) {
2f3c8                 | LR__4725
2f3c8     04 4E 05 F1 | 	add	fp, #4
2f3cc     A7 12 02 FB | 	rdlong	arg01, fp
2f3d0     04 4E 05 F1 | 	add	fp, #4
2f3d4     A7 14 02 F6 | 	mov	arg02, fp
2f3d8     08 4E 85 F1 | 	sub	fp, #8
2f3dc     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2f3e0     0C 4E 05 F1 | 	add	fp, #12
2f3e4     A7 FA 61 FC | 	wrlong	result1, fp
2f3e8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f3ec     0C 4E 85 F1 | 	sub	fp, #12
2f3f0     F0 00 90 5D |  if_ne	jmp	#LR__4727
2f3f4     04 4E 05 F1 | 	add	fp, #4
2f3f8     A7 12 02 FB | 	rdlong	arg01, fp
2f3fc     04 4E 85 F1 | 	sub	fp, #4
2f400     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2f404     0C 4E 05 F1 | 	add	fp, #12
2f408     A7 FA 61 FC | 	wrlong	result1, fp
2f40c     08 4E 85 F1 | 	sub	fp, #8
2f410     A7 26 02 FB | 	rdlong	local01, fp
2f414     2B 26 06 F1 | 	add	local01, #43
2f418     13 27 C2 FA | 	rdbyte	local01, local01
2f41c     0C 4E 05 F1 | 	add	fp, #12
2f420     A7 26 42 FC | 	wrbyte	local01, fp
2f424     04 4E 85 F1 | 	sub	fp, #4
2f428     A7 26 0A FB | 	rdlong	local01, fp wz
2f42c     0C 4E 85 F1 | 	sub	fp, #12
2f430     34 00 90 AD |  if_e	jmp	#LR__4726
2f434     0C 4E 05 F1 | 	add	fp, #12
2f438     A7 26 02 FB | 	rdlong	local01, fp
2f43c     0C 4E 85 F1 | 	sub	fp, #12
2f440     04 26 0E F2 | 	cmp	local01, #4 wz
2f444     9C 00 90 5D |  if_ne	jmp	#LR__4727
2f448     10 4E 05 F1 | 	add	fp, #16
2f44c     A7 26 C2 FA | 	rdbyte	local01, fp
2f450     10 4E 85 F1 | 	sub	fp, #16
2f454     04 26 CE F7 | 	test	local01, #4 wz
2f458     0C 4E 05 A1 |  if_e	add	fp, #12
2f45c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2f460     0C 4E 85 A1 |  if_e	sub	fp, #12
2f464                 | ' 					}
2f464                 | ' 				}
2f464                 | ' 				break;
2f464     7C 00 90 FD | 	jmp	#LR__4727
2f468                 | LR__4726
2f468     10 4E 05 F1 | 	add	fp, #16
2f46c     A7 26 C2 FA | 	rdbyte	local01, fp
2f470     10 4E 85 F1 | 	sub	fp, #16
2f474     04 26 CE F7 | 	test	local01, #4 wz
2f478     68 00 90 5D |  if_ne	jmp	#LR__4727
2f47c     04 4E 05 F1 | 	add	fp, #4
2f480     A7 26 02 FB | 	rdlong	local01, fp
2f484     04 4E 85 F1 | 	sub	fp, #4
2f488     06 26 06 F1 | 	add	local01, #6
2f48c     13 27 C2 FA | 	rdbyte	local01, local01
2f490     10 26 CE F7 | 	test	local01, #16 wz
2f494     0C 4E 05 A1 |  if_e	add	fp, #12
2f498     A7 0A 68 AC |  if_e	wrlong	#5, fp
2f49c     0C 4E 85 A1 |  if_e	sub	fp, #12
2f4a0                 | ' 				res = FR_NO_PATH; break;
2f4a0     40 00 90 AD |  if_e	jmp	#LR__4727
2f4a4     04 4E 05 F1 | 	add	fp, #4
2f4a8     A7 28 02 FB | 	rdlong	local02, fp
2f4ac     14 27 02 F6 | 	mov	local01, local02
2f4b0     10 4E 05 F1 | 	add	fp, #16
2f4b4     A7 14 02 FB | 	rdlong	arg02, fp
2f4b8     0A 13 02 F6 | 	mov	arg01, arg02
2f4bc     34 14 06 F1 | 	add	arg02, #52
2f4c0     14 4E 85 F1 | 	sub	fp, #20
2f4c4     10 28 06 F1 | 	add	local02, #16
2f4c8     14 29 02 FB | 	rdlong	local02, local02
2f4cc     FF 29 06 F5 | 	and	local02, #511
2f4d0     14 15 02 F1 | 	add	arg02, local02
2f4d4     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2f4d8     08 26 06 F1 | 	add	local01, #8
2f4dc     13 FB 61 FC | 	wrlong	result1, local01
2f4e0     E4 FE 9F FD | 	jmp	#LR__4725
2f4e4                 | LR__4727
2f4e4                 | LR__4728
2f4e4                 | ' 			}
2f4e4                 | ' #line 3090 "ff.c"
2f4e4                 | ' 			{
2f4e4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2f4e4                 | ' 			}
2f4e4                 | ' 		}
2f4e4                 | ' 	}
2f4e4                 | ' 
2f4e4                 | ' 	return res;
2f4e4     0C 4E 05 F1 | 	add	fp, #12
2f4e8     A7 FA 01 FB | 	rdlong	result1, fp
2f4ec     0C 4E 85 F1 | 	sub	fp, #12
2f4f0     A7 F0 03 F6 | 	mov	ptra, fp
2f4f4     B2 00 A0 FD | 	call	#popregs_
2f4f8                 | _fatfs_cc_follow_path_ret
2f4f8     2D 00 64 FD | 	ret
2f4fc                 | 
2f4fc                 | _fatfs_cc_get_ldnumber
2f4fc     01 00 66 F6 | 	neg	_var01, #1
2f500     09 03 0A FB | 	rdlong	_var02, arg01 wz
2f504     01 05 02 F6 | 	mov	_var03, _var02
2f508     01 FA 65 A6 |  if_e	neg	result1, #1
2f50c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2f510     97 10 48 FB | 	callpa	#(@LR__4731-@LR__4730)>>2,fcache_load_ptr_
2f514                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2f514                 | LR__4730
2f514     02 07 C2 FA | 	rdbyte	_var04, _var03
2f518     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2f51c     20 FA 15 F2 | 	cmp	result1, #32 wc
2f520     01 04 06 F1 | 	add	_var03, #1
2f524     03 09 02 36 |  if_ae	mov	_var05, _var04
2f528     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2f52c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2f530     E0 FF 9F 1D |  if_a	jmp	#LR__4730
2f534                 | LR__4731
2f534     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2f538     3A 06 0E F2 | 	cmp	_var04, #58 wz
2f53c     40 00 90 5D |  if_ne	jmp	#LR__4733
2f540     01 0A 06 F6 | 	mov	_var06, #1
2f544     01 09 C2 FA | 	rdbyte	_var05, _var02
2f548     30 08 16 F2 | 	cmp	_var05, #48 wc
2f54c     1C 00 90 CD |  if_b	jmp	#LR__4732
2f550     01 09 C2 FA | 	rdbyte	_var05, _var02
2f554     3A 08 16 F2 | 	cmp	_var05, #58 wc
2f558     01 0D 02 C6 |  if_b	mov	_var07, _var02
2f55c     02 0C 06 C1 |  if_b	add	_var07, #2
2f560     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2f564     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2f568     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2f56c                 | LR__4732
2f56c     01 0A 56 F2 | 	cmps	_var06, #1 wc
2f570     05 01 02 C6 |  if_b	mov	_var01, _var06
2f574     09 05 62 CC |  if_b	wrlong	_var03, arg01
2f578                 | ' 			vol = i;
2f578                 | ' 			*path = tt;
2f578                 | ' 		}
2f578                 | ' 		return vol;
2f578     00 FB 01 F6 | 	mov	result1, _var01
2f57c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2f580                 | LR__4733
2f580                 | ' 	}
2f580                 | ' #line 3170 "ff.c"
2f580                 | ' 	vol = 0;
2f580                 | ' 
2f580                 | ' 	return vol;
2f580     00 FA 05 F6 | 	mov	result1, #0
2f584                 | _fatfs_cc_get_ldnumber_ret
2f584     2D 00 64 FD | 	ret
2f588                 | 
2f588                 | _fatfs_cc_check_fs
2f588     04 4A 05 F6 | 	mov	COUNT_, #4
2f58c     A8 00 A0 FD | 	call	#pushregs_
2f590     09 27 02 F6 | 	mov	local01, arg01
2f594     03 26 06 F1 | 	add	local01, #3
2f598     13 01 48 FC | 	wrbyte	#0, local01
2f59c     2D 26 06 F1 | 	add	local01, #45
2f5a0     FF FF FF FF 
2f5a4     13 FF 6B FC | 	wrlong	##-1, local01
2f5a8     30 26 86 F1 | 	sub	local01, #48
2f5ac     13 13 02 F6 | 	mov	arg01, local01
2f5b0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2f5b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5b8     04 FA 05 56 |  if_ne	mov	result1, #4
2f5bc     94 01 90 5D |  if_ne	jmp	#LR__4744
2f5c0     34 26 06 F1 | 	add	local01, #52
2f5c4     13 13 02 F6 | 	mov	arg01, local01
2f5c8     FE 13 06 F1 | 	add	arg01, #510
2f5cc                 | ' {
2f5cc                 | ' 
2f5cc                 | ' 	return *((WORD*)ptr);
2f5cc     09 29 E2 FA | 	rdword	local02, arg01
2f5d0     13 2B C2 FA | 	rdbyte	local03, local01
2f5d4     34 26 86 F1 | 	sub	local01, #52
2f5d8     15 2D E2 F8 | 	getbyte	local04, local03, #0
2f5dc     EB 2C 0E F2 | 	cmp	local04, #235 wz
2f5e0     15 17 02 56 |  if_ne	mov	arg03, local03
2f5e4     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2f5e8     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2f5ec     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2f5f0     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2f5f4     44 01 90 5D |  if_ne	jmp	#LR__4743
2f5f8     14 2D 32 F9 | 	getword	local04, local02, #0
2f5fc     55 00 00 FF 
2f600     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2f604     2C 00 90 5D |  if_ne	jmp	#LR__4740
2f608     34 26 06 F1 | 	add	local01, #52
2f60c     13 13 02 F6 | 	mov	arg01, local01
2f610     34 26 86 F1 | 	sub	local01, #52
2f614     52 12 06 F1 | 	add	arg01, #82
2f618     A5 01 00 FF 
2f61c     68 14 06 F6 | 	mov	arg02, ##@LR__5334
2f620     08 16 06 F6 | 	mov	arg03, #8
2f624     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2f628     00 FA 0D F2 | 	cmp	result1, #0 wz
2f62c                 | ' 			return 0;
2f62c     00 FA 05 A6 |  if_e	mov	result1, #0
2f630     20 01 90 AD |  if_e	jmp	#LR__4744
2f634                 | LR__4740
2f634     34 26 06 F1 | 	add	local01, #52
2f638     13 13 02 F6 | 	mov	arg01, local01
2f63c     0B 12 06 F1 | 	add	arg01, #11
2f640                 | ' {
2f640                 | ' 
2f640                 | ' 	return *((WORD*)ptr);
2f640     09 FB E1 FA | 	rdword	result1, arg01
2f644     0D 26 06 F1 | 	add	local01, #13
2f648     13 2B C2 FA | 	rdbyte	local03, local01
2f64c     41 26 86 F1 | 	sub	local01, #65
2f650     FD 2C 32 F9 | 	getword	local04, result1, #0
2f654     FD 14 32 F9 | 	getword	arg02, result1, #0
2f658     01 14 86 F1 | 	sub	arg02, #1
2f65c     0A 2D CA F7 | 	test	local04, arg02 wz
2f660     D8 00 90 5D |  if_ne	jmp	#LR__4742
2f664     FD 14 32 F9 | 	getword	arg02, result1, #0
2f668     01 00 00 FF 
2f66c     00 14 16 F2 | 	cmp	arg02, ##512 wc
2f670     C8 00 90 CD |  if_b	jmp	#LR__4742
2f674     FD 14 32 F9 | 	getword	arg02, result1, #0
2f678     01 00 00 FF 
2f67c     01 14 16 F2 | 	cmp	arg02, ##513 wc
2f680     B8 00 90 3D |  if_ae	jmp	#LR__4742
2f684     15 13 02 F6 | 	mov	arg01, local03
2f688     07 12 4E F7 | 	zerox	arg01, #7 wz
2f68c     AC 00 90 AD |  if_e	jmp	#LR__4742
2f690     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2f694     15 2B E2 F8 | 	getbyte	local03, local03, #0
2f698     01 2A 86 F1 | 	sub	local03, #1
2f69c     15 13 CA F7 | 	test	arg01, local03 wz
2f6a0     98 00 90 5D |  if_ne	jmp	#LR__4742
2f6a4     34 26 06 F1 | 	add	local01, #52
2f6a8     13 13 02 F6 | 	mov	arg01, local01
2f6ac     34 26 86 F1 | 	sub	local01, #52
2f6b0     0E 12 06 F1 | 	add	arg01, #14
2f6b4                 | ' {
2f6b4                 | ' 
2f6b4                 | ' 	return *((WORD*)ptr);
2f6b4     09 FB E9 FA | 	rdword	result1, arg01 wz
2f6b8     80 00 90 AD |  if_e	jmp	#LR__4742
2f6bc     44 26 06 F1 | 	add	local01, #68
2f6c0     13 13 C2 FA | 	rdbyte	arg01, local01
2f6c4     44 26 86 F1 | 	sub	local01, #68
2f6c8     01 12 86 F1 | 	sub	arg01, #1
2f6cc     02 12 16 F2 | 	cmp	arg01, #2 wc
2f6d0     68 00 90 3D |  if_ae	jmp	#LR__4742
2f6d4     34 26 06 F1 | 	add	local01, #52
2f6d8     13 13 02 F6 | 	mov	arg01, local01
2f6dc     34 26 86 F1 | 	sub	local01, #52
2f6e0     11 12 06 F1 | 	add	arg01, #17
2f6e4                 | ' {
2f6e4                 | ' 
2f6e4                 | ' 	return *((WORD*)ptr);
2f6e4     09 FB E9 FA | 	rdword	result1, arg01 wz
2f6e8     50 00 90 AD |  if_e	jmp	#LR__4742
2f6ec     34 26 06 F1 | 	add	local01, #52
2f6f0     13 13 02 F6 | 	mov	arg01, local01
2f6f4     34 26 86 F1 | 	sub	local01, #52
2f6f8     13 12 06 F1 | 	add	arg01, #19
2f6fc                 | ' {
2f6fc                 | ' 
2f6fc                 | ' 	return *((WORD*)ptr);
2f6fc     09 FB E1 FA | 	rdword	result1, arg01
2f700     FD 2A 32 F9 | 	getword	local03, result1, #0
2f704     80 2A 16 F2 | 	cmp	local03, #128 wc
2f708     20 00 90 3D |  if_ae	jmp	#LR__4741
2f70c     34 26 06 F1 | 	add	local01, #52
2f710     13 13 02 F6 | 	mov	arg01, local01
2f714     34 26 86 F1 | 	sub	local01, #52
2f718     20 12 06 F1 | 	add	arg01, #32
2f71c                 | ' {
2f71c                 | ' 
2f71c                 | ' 	return *((DWORD*)ptr);
2f71c     09 FB 01 FB | 	rdlong	result1, arg01
2f720     80 00 00 FF 
2f724     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2f728     10 00 90 CD |  if_b	jmp	#LR__4742
2f72c                 | LR__4741
2f72c     4A 26 06 F1 | 	add	local01, #74
2f730                 | ' {
2f730                 | ' 
2f730                 | ' 	return *((WORD*)ptr);
2f730     13 FB E9 FA | 	rdword	result1, local01 wz
2f734                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2f734                 | ' 			&& ld_word(fs->win +  14 ) != 0
2f734                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2f734                 | ' 			&& ld_word(fs->win +  17 ) != 0
2f734                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2f734                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2f734                 | ' 				return 0;
2f734     00 FA 05 56 |  if_ne	mov	result1, #0
2f738     18 00 90 5D |  if_ne	jmp	#LR__4744
2f73c                 | LR__4742
2f73c                 | LR__4743
2f73c                 | ' 		}
2f73c                 | ' 	}
2f73c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2f73c     14 2B 32 F9 | 	getword	local03, local02, #0
2f740     55 00 00 FF 
2f744     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2f748     02 2C 06 A6 |  if_e	mov	local04, #2
2f74c     03 2C 06 56 |  if_ne	mov	local04, #3
2f750     16 FB 01 F6 | 	mov	result1, local04
2f754                 | LR__4744
2f754     A7 F0 03 F6 | 	mov	ptra, fp
2f758     B2 00 A0 FD | 	call	#popregs_
2f75c                 | _fatfs_cc_check_fs_ret
2f75c     2D 00 64 FD | 	ret
2f760                 | 
2f760                 | _fatfs_cc_find_volume
2f760     05 4A 05 F6 | 	mov	COUNT_, #5
2f764     A8 00 A0 FD | 	call	#pushregs_
2f768     24 F0 07 F1 | 	add	ptra, #36
2f76c     09 27 02 F6 | 	mov	local01, arg01
2f770     0A 29 02 F6 | 	mov	local02, arg02
2f774     13 13 02 F6 | 	mov	arg01, local01
2f778     00 14 06 F6 | 	mov	arg02, #0
2f77c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2f780     02 FA 0D F2 | 	cmp	result1, #2 wz
2f784     0C 00 90 AD |  if_e	jmp	#LR__4750
2f788     03 FA 15 F2 | 	cmp	result1, #3 wc
2f78c     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2f790     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4758
2f794                 | LR__4750
2f794                 | ' 	for (i = 0; i < 4; i++) {
2f794     00 2A 06 F6 | 	mov	local03, #0
2f798     97 26 48 FB | 	callpa	#(@LR__4752-@LR__4751)>>2,fcache_load_ptr_
2f79c                 | LR__4751
2f79c     04 2A 16 F2 | 	cmp	local03, #4 wc
2f7a0     44 00 90 3D |  if_ae	jmp	#LR__4753
2f7a4     15 2D 02 F6 | 	mov	local04, local03
2f7a8     02 2C 66 F0 | 	shl	local04, #2
2f7ac     14 4E 05 F1 | 	add	fp, #20
2f7b0     A7 2C 02 F1 | 	add	local04, fp
2f7b4     34 26 06 F1 | 	add	local01, #52
2f7b8     13 13 02 F6 | 	mov	arg01, local01
2f7bc     34 26 86 F1 | 	sub	local01, #52
2f7c0     BE 13 06 F1 | 	add	arg01, #446
2f7c4     15 15 02 F6 | 	mov	arg02, local03
2f7c8     04 14 66 F0 | 	shl	arg02, #4
2f7cc     0A 13 02 F1 | 	add	arg01, arg02
2f7d0     08 12 06 F1 | 	add	arg01, #8
2f7d4                 | ' {
2f7d4                 | ' 
2f7d4                 | ' 	return *((DWORD*)ptr);
2f7d4     09 FB 01 FB | 	rdlong	result1, arg01
2f7d8     14 4E 85 F1 | 	sub	fp, #20
2f7dc     16 FB 61 FC | 	wrlong	result1, local04
2f7e0     01 2A 06 F1 | 	add	local03, #1
2f7e4     B4 FF 9F FD | 	jmp	#LR__4751
2f7e8                 | LR__4752
2f7e8                 | LR__4753
2f7e8     00 28 0E F2 | 	cmp	local02, #0 wz
2f7ec     14 2D 02 56 |  if_ne	mov	local04, local02
2f7f0     01 2C 86 51 |  if_ne	sub	local04, #1
2f7f4     00 2C 06 A6 |  if_e	mov	local04, #0
2f7f8     16 2B 02 F6 | 	mov	local03, local04
2f7fc                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2f7fc                 | ' 	}
2f7fc                 | ' 	i = part ? part - 1 : 0;
2f7fc                 | ' 	do {
2f7fc                 | LR__4754
2f7fc     15 2D 02 F6 | 	mov	local04, local03
2f800     02 2C 66 F0 | 	shl	local04, #2
2f804     14 4E 05 F1 | 	add	fp, #20
2f808     A7 2C 02 F1 | 	add	local04, fp
2f80c     16 2D 0A FB | 	rdlong	local04, local04 wz
2f810     14 4E 85 F1 | 	sub	fp, #20
2f814     28 00 90 AD |  if_e	jmp	#LR__4755
2f818     15 2D 02 F6 | 	mov	local04, local03
2f81c     02 2C 66 F0 | 	shl	local04, #2
2f820     14 4E 05 F1 | 	add	fp, #20
2f824     A7 2C 02 F1 | 	add	local04, fp
2f828     16 15 02 FB | 	rdlong	arg02, local04
2f82c     13 13 02 F6 | 	mov	arg01, local01
2f830     14 4E 85 F1 | 	sub	fp, #20
2f834     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2f838     FD 2C 02 F6 | 	mov	local04, result1
2f83c     04 00 90 FD | 	jmp	#LR__4756
2f840                 | LR__4755
2f840     03 2C 06 F6 | 	mov	local04, #3
2f844                 | LR__4756
2f844     16 2F 02 F6 | 	mov	local05, local04
2f848     00 28 0E F2 | 	cmp	local02, #0 wz
2f84c     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2f850     0C 00 90 8D |  if_c_and_z	jmp	#LR__4757
2f854     01 2A 06 A1 |  if_e	add	local03, #1
2f858     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2f85c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4754
2f860                 | LR__4757
2f860                 | ' 	return fmt;
2f860     17 FB 01 F6 | 	mov	result1, local05
2f864                 | LR__4758
2f864     A7 F0 03 F6 | 	mov	ptra, fp
2f868     B2 00 A0 FD | 	call	#popregs_
2f86c                 | _fatfs_cc_find_volume_ret
2f86c     2D 00 64 FD | 	ret
2f870                 | 
2f870                 | _fatfs_cc_mount_volume
2f870     0B 4A 05 F6 | 	mov	COUNT_, #11
2f874     A8 00 A0 FD | 	call	#pushregs_
2f878     0A 27 02 F6 | 	mov	local01, arg02
2f87c     0B 29 02 F6 | 	mov	local02, arg03
2f880     13 01 68 FC | 	wrlong	#0, local01
2f884     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2f888     FD 2A 02 F6 | 	mov	local03, result1
2f88c     00 2A 56 F2 | 	cmps	local03, #0 wc
2f890     0B FA 05 C6 |  if_b	mov	result1, #11
2f894     3C 05 90 CD |  if_b	jmp	#LR__4770
2f898     15 17 02 F6 | 	mov	arg03, local03
2f89c     02 16 66 F0 | 	shl	arg03, #2
2f8a0     F2 16 02 F1 | 	add	arg03, objptr
2f8a4     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2f8a8     0C FA 05 A6 |  if_e	mov	result1, #12
2f8ac     24 05 90 AD |  if_e	jmp	#LR__4770
2f8b0     13 2D 62 FC | 	wrlong	local04, local01
2f8b4     14 29 E2 F8 | 	getbyte	local02, local02, #0
2f8b8     FE 28 06 F5 | 	and	local02, #254
2f8bc     16 17 CA FA | 	rdbyte	arg03, local04 wz
2f8c0     4C 00 90 AD |  if_e	jmp	#LR__4761
2f8c4     01 2C 06 F1 | 	add	local04, #1
2f8c8     16 13 CA FA | 	rdbyte	arg01, local04 wz
2f8cc     01 2C 86 F1 | 	sub	local04, #1
2f8d0     01 FA 05 56 |  if_ne	mov	result1, #1
2f8d4                 | ' 
2f8d4                 | ' 	return Stat;
2f8d4     01 00 00 AF 
2f8d8     20 E4 05 A1 |  if_e	add	objptr, ##544
2f8dc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f8e0     01 00 00 AF 
2f8e4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f8e8     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2f8ec     01 16 CE F7 | 	test	arg03, #1 wz
2f8f0     1C 00 90 5D |  if_ne	jmp	#LR__4760
2f8f4     00 28 0E F2 | 	cmp	local02, #0 wz
2f8f8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2f8fc     04 FA CD 57 |  if_ne	test	result1, #4 wz
2f900                 | ' 				return FR_WRITE_PROTECTED;
2f900     0A FA 05 56 |  if_ne	mov	result1, #10
2f904     CC 04 90 5D |  if_ne	jmp	#LR__4770
2f908                 | ' 			}
2f908                 | ' 			return FR_OK;
2f908     00 FA 05 F6 | 	mov	result1, #0
2f90c     C4 04 90 FD | 	jmp	#LR__4770
2f910                 | LR__4760
2f910                 | LR__4761
2f910     16 01 48 FC | 	wrbyte	#0, local04
2f914     01 2C 06 F1 | 	add	local04, #1
2f918     16 2B 42 FC | 	wrbyte	local03, local04
2f91c     16 13 C2 FA | 	rdbyte	arg01, local04
2f920     01 2C 86 F1 | 	sub	local04, #1
2f924     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2f928     FD 16 02 F6 | 	mov	arg03, result1
2f92c     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2f930     01 2E CE F7 | 	test	local05, #1 wz
2f934                 | ' 		return FR_NOT_READY;
2f934     03 FA 05 56 |  if_ne	mov	result1, #3
2f938     98 04 90 5D |  if_ne	jmp	#LR__4770
2f93c     00 28 0E F2 | 	cmp	local02, #0 wz
2f940     0B 2F 02 56 |  if_ne	mov	local05, arg03
2f944     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2f948     04 2E CE 57 |  if_ne	test	local05, #4 wz
2f94c                 | ' 		return FR_WRITE_PROTECTED;
2f94c     0A FA 05 56 |  if_ne	mov	result1, #10
2f950     80 04 90 5D |  if_ne	jmp	#LR__4770
2f954     16 13 02 F6 | 	mov	arg01, local04
2f958     00 14 06 F6 | 	mov	arg02, #0
2f95c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2f960     FD 12 02 F6 | 	mov	arg01, result1
2f964     04 12 0E F2 | 	cmp	arg01, #4 wz
2f968     01 FA 05 A6 |  if_e	mov	result1, #1
2f96c     64 04 90 AD |  if_e	jmp	#LR__4770
2f970     02 12 16 F2 | 	cmp	arg01, #2 wc
2f974     0D FA 05 36 |  if_ae	mov	result1, #13
2f978     58 04 90 3D |  if_ae	jmp	#LR__4770
2f97c     30 2C 06 F1 | 	add	local04, #48
2f980     16 31 02 FB | 	rdlong	local06, local04
2f984     04 2C 06 F1 | 	add	local04, #4
2f988     16 13 02 F6 | 	mov	arg01, local04
2f98c     34 2C 86 F1 | 	sub	local04, #52
2f990     0B 12 06 F1 | 	add	arg01, #11
2f994                 | ' {
2f994                 | ' 
2f994                 | ' 	return *((WORD*)ptr);
2f994     09 FB E1 FA | 	rdword	result1, arg01
2f998     01 00 00 FF 
2f99c     00 FA 0D F2 | 	cmp	result1, ##512 wz
2f9a0     0D FA 05 56 |  if_ne	mov	result1, #13
2f9a4     2C 04 90 5D |  if_ne	jmp	#LR__4770
2f9a8     34 2C 06 F1 | 	add	local04, #52
2f9ac     16 13 02 F6 | 	mov	arg01, local04
2f9b0     34 2C 86 F1 | 	sub	local04, #52
2f9b4     16 12 06 F1 | 	add	arg01, #22
2f9b8                 | ' {
2f9b8                 | ' 
2f9b8                 | ' 	return *((WORD*)ptr);
2f9b8     09 FB E1 FA | 	rdword	result1, arg01
2f9bc     FD 32 0A F6 | 	mov	local07, result1 wz
2f9c0     18 00 90 5D |  if_ne	jmp	#LR__4762
2f9c4     34 2C 06 F1 | 	add	local04, #52
2f9c8     16 13 02 F6 | 	mov	arg01, local04
2f9cc     34 2C 86 F1 | 	sub	local04, #52
2f9d0     24 12 06 F1 | 	add	arg01, #36
2f9d4                 | ' {
2f9d4                 | ' 
2f9d4                 | ' 	return *((DWORD*)ptr);
2f9d4     09 FB 01 FB | 	rdlong	result1, arg01
2f9d8     FD 32 02 F6 | 	mov	local07, result1
2f9dc                 | LR__4762
2f9dc     1C 2C 06 F1 | 	add	local04, #28
2f9e0     16 33 62 FC | 	wrlong	local07, local04
2f9e4     28 2C 06 F1 | 	add	local04, #40
2f9e8     16 2F C2 FA | 	rdbyte	local05, local04
2f9ec     42 2C 86 F1 | 	sub	local04, #66
2f9f0     16 2F 42 FC | 	wrbyte	local05, local04
2f9f4     16 2F C2 FA | 	rdbyte	local05, local04
2f9f8     02 2C 86 F1 | 	sub	local04, #2
2f9fc     01 2E 0E F2 | 	cmp	local05, #1 wz
2fa00     02 2C 06 51 |  if_ne	add	local04, #2
2fa04     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2fa08     02 2C 86 51 |  if_ne	sub	local04, #2
2fa0c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2fa10     0D FA 05 56 |  if_ne	mov	result1, #13
2fa14     BC 03 90 5D |  if_ne	jmp	#LR__4770
2fa18     02 2C 06 F1 | 	add	local04, #2
2fa1c     16 2F C2 FA | 	rdbyte	local05, local04
2fa20     17 33 02 FD | 	qmul	local07, local05
2fa24     3F 2C 06 F1 | 	add	local04, #63
2fa28     16 2F C2 FA | 	rdbyte	local05, local04
2fa2c     37 2C 86 F1 | 	sub	local04, #55
2fa30     16 2F 52 FC | 	wrword	local05, local04
2fa34     16 2F EA FA | 	rdword	local05, local04 wz
2fa38     0A 2C 86 F1 | 	sub	local04, #10
2fa3c     18 32 62 FD | 	getqx	local07
2fa40     20 00 90 AD |  if_e	jmp	#LR__4763
2fa44     0A 2C 06 F1 | 	add	local04, #10
2fa48     16 2F E2 FA | 	rdword	local05, local04
2fa4c     17 2B 32 F9 | 	getword	local03, local05, #0
2fa50     0A 2C 86 F1 | 	sub	local04, #10
2fa54     17 2F 32 F9 | 	getword	local05, local05, #0
2fa58     01 2E 86 F1 | 	sub	local05, #1
2fa5c     17 2B CA F7 | 	test	local03, local05 wz
2fa60     08 00 90 AD |  if_e	jmp	#LR__4764
2fa64                 | LR__4763
2fa64     0D FA 05 F6 | 	mov	result1, #13
2fa68     68 03 90 FD | 	jmp	#LR__4770
2fa6c                 | LR__4764
2fa6c     34 2C 06 F1 | 	add	local04, #52
2fa70     16 13 02 F6 | 	mov	arg01, local04
2fa74     11 12 06 F1 | 	add	arg01, #17
2fa78                 | ' {
2fa78                 | ' 
2fa78                 | ' 	return *((WORD*)ptr);
2fa78     09 FB E1 FA | 	rdword	result1, arg01
2fa7c     2C 2C 86 F1 | 	sub	local04, #44
2fa80     16 FB 51 FC | 	wrword	result1, local04
2fa84     16 2F E2 FA | 	rdword	local05, local04
2fa88     08 2C 86 F1 | 	sub	local04, #8
2fa8c     17 13 52 F6 | 	abs	arg01, local05 wc
2fa90     09 13 42 F8 | 	getnib	arg01, arg01, #0
2fa94     09 13 8A F6 | 	negc	arg01, arg01 wz
2fa98     0D FA 05 56 |  if_ne	mov	result1, #13
2fa9c     34 03 90 5D |  if_ne	jmp	#LR__4770
2faa0     34 2C 06 F1 | 	add	local04, #52
2faa4     16 13 02 F6 | 	mov	arg01, local04
2faa8     34 2C 86 F1 | 	sub	local04, #52
2faac     13 12 06 F1 | 	add	arg01, #19
2fab0                 | ' {
2fab0                 | ' 
2fab0                 | ' 	return *((WORD*)ptr);
2fab0     09 FB E1 FA | 	rdword	result1, arg01
2fab4     FD 34 0A F6 | 	mov	local08, result1 wz
2fab8     34 2C 06 A1 |  if_e	add	local04, #52
2fabc     16 13 02 A6 |  if_e	mov	arg01, local04
2fac0     34 2C 86 A1 |  if_e	sub	local04, #52
2fac4     20 12 06 A1 |  if_e	add	arg01, #32
2fac8                 | ' {
2fac8                 | ' 
2fac8                 | ' 	return *((DWORD*)ptr);
2fac8     09 35 02 AB |  if_e	rdlong	local08, arg01
2facc     34 2C 06 F1 | 	add	local04, #52
2fad0     16 13 02 F6 | 	mov	arg01, local04
2fad4     34 2C 86 F1 | 	sub	local04, #52
2fad8     0E 12 06 F1 | 	add	arg01, #14
2fadc                 | ' {
2fadc                 | ' 
2fadc                 | ' 	return *((WORD*)ptr);
2fadc     09 FB E1 FA | 	rdword	result1, arg01
2fae0     FD 12 02 F6 | 	mov	arg01, result1
2fae4     09 2F 02 F6 | 	mov	local05, arg01
2fae8     0F 2E 4E F7 | 	zerox	local05, #15 wz
2faec     0D FA 05 A6 |  if_e	mov	result1, #13
2faf0     E0 02 90 AD |  if_e	jmp	#LR__4770
2faf4     09 37 32 F9 | 	getword	local09, arg01, #0
2faf8     19 37 02 F1 | 	add	local09, local07
2fafc     08 2C 06 F1 | 	add	local04, #8
2fb00     16 2F E2 FA | 	rdword	local05, local04
2fb04     08 2C 86 F1 | 	sub	local04, #8
2fb08     17 2F 52 F6 | 	abs	local05, local05 wc
2fb0c     04 2E 46 F0 | 	shr	local05, #4
2fb10     17 37 82 F3 | 	sumc	local09, local05
2fb14     1B 35 12 F2 | 	cmp	local08, local09 wc
2fb18     0D FA 05 C6 |  if_b	mov	result1, #13
2fb1c     B4 02 90 CD |  if_b	jmp	#LR__4770
2fb20     1B 35 82 F1 | 	sub	local08, local09
2fb24     0A 2C 06 F1 | 	add	local04, #10
2fb28     16 2F E2 FA | 	rdword	local05, local04
2fb2c     17 35 12 FD | 	qdiv	local08, local05
2fb30     0A 2C 86 F1 | 	sub	local04, #10
2fb34     18 2E 62 FD | 	getqx	local05
2fb38     00 2E 0E F2 | 	cmp	local05, #0 wz
2fb3c     0D FA 05 A6 |  if_e	mov	result1, #13
2fb40     90 02 90 AD |  if_e	jmp	#LR__4770
2fb44     00 38 06 F6 | 	mov	local10, #0
2fb48     FF FF 07 FF 
2fb4c     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2fb50     03 38 06 C6 |  if_b	mov	local10, #3
2fb54     7F 00 00 FF 
2fb58     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2fb5c     02 38 06 C6 |  if_b	mov	local10, #2
2fb60     07 00 00 FF 
2fb64     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2fb68     01 38 06 C6 |  if_b	mov	local10, #1
2fb6c     00 38 0E F2 | 	cmp	local10, #0 wz
2fb70     0D FA 05 A6 |  if_e	mov	result1, #13
2fb74     5C 02 90 AD |  if_e	jmp	#LR__4770
2fb78     02 2E 06 F1 | 	add	local05, #2
2fb7c     18 2C 06 F1 | 	add	local04, #24
2fb80     16 2F 62 FC | 	wrlong	local05, local04
2fb84     08 2C 06 F1 | 	add	local04, #8
2fb88     16 31 62 FC | 	wrlong	local06, local04
2fb8c     18 2F 02 F6 | 	mov	local05, local06
2fb90     09 13 32 F9 | 	getword	arg01, arg01, #0
2fb94     09 2F 02 F1 | 	add	local05, arg01
2fb98     04 2C 06 F1 | 	add	local04, #4
2fb9c     16 2F 62 FC | 	wrlong	local05, local04
2fba0     18 2F 02 F6 | 	mov	local05, local06
2fba4     1B 2F 02 F1 | 	add	local05, local09
2fba8     08 2C 06 F1 | 	add	local04, #8
2fbac     16 2F 62 FC | 	wrlong	local05, local04
2fbb0     2C 2C 86 F1 | 	sub	local04, #44
2fbb4     03 38 0E F2 | 	cmp	local10, #3 wz
2fbb8     5C 00 90 5D |  if_ne	jmp	#LR__4765
2fbbc     34 2C 06 F1 | 	add	local04, #52
2fbc0     16 13 02 F6 | 	mov	arg01, local04
2fbc4     34 2C 86 F1 | 	sub	local04, #52
2fbc8     2A 12 06 F1 | 	add	arg01, #42
2fbcc                 | ' {
2fbcc                 | ' 
2fbcc                 | ' 	return *((WORD*)ptr);
2fbcc     09 FB E9 FA | 	rdword	result1, arg01 wz
2fbd0     0D FA 05 56 |  if_ne	mov	result1, #13
2fbd4     FC 01 90 5D |  if_ne	jmp	#LR__4770
2fbd8     08 2C 06 F1 | 	add	local04, #8
2fbdc     16 2F EA FA | 	rdword	local05, local04 wz
2fbe0     08 2C 86 F1 | 	sub	local04, #8
2fbe4     0D FA 05 56 |  if_ne	mov	result1, #13
2fbe8     E8 01 90 5D |  if_ne	jmp	#LR__4770
2fbec     34 2C 06 F1 | 	add	local04, #52
2fbf0     16 13 02 F6 | 	mov	arg01, local04
2fbf4     2C 12 06 F1 | 	add	arg01, #44
2fbf8                 | ' {
2fbf8                 | ' 
2fbf8                 | ' 	return *((DWORD*)ptr);
2fbf8     09 FB 01 FB | 	rdlong	result1, arg01
2fbfc     0C 2C 86 F1 | 	sub	local04, #12
2fc00     16 FB 61 FC | 	wrlong	result1, local04
2fc04     10 2C 86 F1 | 	sub	local04, #16
2fc08     16 3B 02 FB | 	rdlong	local11, local04
2fc0c     18 2C 86 F1 | 	sub	local04, #24
2fc10     02 3A 66 F0 | 	shl	local11, #2
2fc14     6C 00 90 FD | 	jmp	#LR__4767
2fc18                 | LR__4765
2fc18     08 2C 06 F1 | 	add	local04, #8
2fc1c     16 2F EA FA | 	rdword	local05, local04 wz
2fc20     08 2C 86 F1 | 	sub	local04, #8
2fc24     0D FA 05 A6 |  if_e	mov	result1, #13
2fc28     A8 01 90 AD |  if_e	jmp	#LR__4770
2fc2c     24 2C 06 F1 | 	add	local04, #36
2fc30     16 2F 02 FB | 	rdlong	local05, local04
2fc34     19 2F 02 F1 | 	add	local05, local07
2fc38     04 2C 06 F1 | 	add	local04, #4
2fc3c     16 2F 62 FC | 	wrlong	local05, local04
2fc40     28 2C 86 F1 | 	sub	local04, #40
2fc44     02 38 0E F2 | 	cmp	local10, #2 wz
2fc48     18 2C 06 A1 |  if_e	add	local04, #24
2fc4c     16 2F 02 AB |  if_e	rdlong	local05, local04
2fc50     18 2C 86 A1 |  if_e	sub	local04, #24
2fc54     01 2E 66 A0 |  if_e	shl	local05, #1
2fc58     24 00 90 AD |  if_e	jmp	#LR__4766
2fc5c     18 2C 06 F1 | 	add	local04, #24
2fc60     16 3B 02 FB | 	rdlong	local11, local04
2fc64     1D 2F 02 F6 | 	mov	local05, local11
2fc68     01 2E 66 F0 | 	shl	local05, #1
2fc6c     1D 2F 02 F1 | 	add	local05, local11
2fc70     01 2E 46 F0 | 	shr	local05, #1
2fc74     18 2C 86 F1 | 	sub	local04, #24
2fc78     01 3A 06 F5 | 	and	local11, #1
2fc7c     1D 2F 02 F1 | 	add	local05, local11
2fc80                 | LR__4766
2fc80     17 3B 02 F6 | 	mov	local11, local05
2fc84                 | LR__4767
2fc84     FF 3B 06 F1 | 	add	local11, #511
2fc88     09 3A 46 F0 | 	shr	local11, #9
2fc8c     1C 2C 06 F1 | 	add	local04, #28
2fc90     16 17 02 FB | 	rdlong	arg03, local04
2fc94     1C 2C 86 F1 | 	sub	local04, #28
2fc98     1D 17 12 F2 | 	cmp	arg03, local11 wc
2fc9c     0D FA 05 C6 |  if_b	mov	result1, #13
2fca0     30 01 90 CD |  if_b	jmp	#LR__4770
2fca4     14 2C 06 F1 | 	add	local04, #20
2fca8     FF FF FF FF 
2fcac     16 FF 6B FC | 	wrlong	##-1, local04
2fcb0     04 2C 86 F1 | 	sub	local04, #4
2fcb4     FF FF FF FF 
2fcb8     16 FF 6B FC | 	wrlong	##-1, local04
2fcbc     0C 2C 86 F1 | 	sub	local04, #12
2fcc0     16 01 49 FC | 	wrbyte	#128, local04
2fcc4     04 2C 86 F1 | 	sub	local04, #4
2fcc8     03 38 0E F2 | 	cmp	local10, #3 wz
2fccc     D0 00 90 5D |  if_ne	jmp	#LR__4769
2fcd0     34 2C 06 F1 | 	add	local04, #52
2fcd4     16 13 02 F6 | 	mov	arg01, local04
2fcd8     34 2C 86 F1 | 	sub	local04, #52
2fcdc     30 12 06 F1 | 	add	arg01, #48
2fce0                 | ' {
2fce0                 | ' 
2fce0                 | ' 	return *((WORD*)ptr);
2fce0     09 FB E1 FA | 	rdword	result1, arg01
2fce4     FD 2E 32 F9 | 	getword	local05, result1, #0
2fce8     01 2E 0E F2 | 	cmp	local05, #1 wz
2fcec     B0 00 90 5D |  if_ne	jmp	#LR__4769
2fcf0     01 30 06 F1 | 	add	local06, #1
2fcf4     16 13 02 F6 | 	mov	arg01, local04
2fcf8     18 15 02 F6 | 	mov	arg02, local06
2fcfc     CC CD BF FD | 	call	#_fatfs_cc_move_window
2fd00     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd04     98 00 90 5D |  if_ne	jmp	#LR__4769
2fd08     04 2C 06 F1 | 	add	local04, #4
2fd0c     16 01 48 FC | 	wrbyte	#0, local04
2fd10     30 2C 06 F1 | 	add	local04, #48
2fd14     16 13 02 F6 | 	mov	arg01, local04
2fd18     34 2C 86 F1 | 	sub	local04, #52
2fd1c     FE 13 06 F1 | 	add	arg01, #510
2fd20                 | ' {
2fd20                 | ' 
2fd20                 | ' 	return *((WORD*)ptr);
2fd20     09 FB E1 FA | 	rdword	result1, arg01
2fd24     FD 2E 32 F9 | 	getword	local05, result1, #0
2fd28     55 00 00 FF 
2fd2c     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2fd30     34 2C 06 A1 |  if_e	add	local04, #52
2fd34     16 13 02 A6 |  if_e	mov	arg01, local04
2fd38     34 2C 86 A1 |  if_e	sub	local04, #52
2fd3c                 | ' {
2fd3c                 | ' 
2fd3c                 | ' 	return *((DWORD*)ptr);
2fd3c     09 FB 01 AB |  if_e	rdlong	result1, arg01
2fd40     A9 B0 20 AF 
2fd44     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2fd48     54 00 90 5D |  if_ne	jmp	#LR__4768
2fd4c     34 2C 06 F1 | 	add	local04, #52
2fd50     16 13 02 F6 | 	mov	arg01, local04
2fd54     34 2C 86 F1 | 	sub	local04, #52
2fd58     E4 13 06 F1 | 	add	arg01, #484
2fd5c                 | ' {
2fd5c                 | ' 
2fd5c                 | ' 	return *((DWORD*)ptr);
2fd5c     09 FB 01 FB | 	rdlong	result1, arg01
2fd60     B9 A0 30 FF 
2fd64     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2fd68     34 00 90 5D |  if_ne	jmp	#LR__4768
2fd6c     34 2C 06 F1 | 	add	local04, #52
2fd70     16 13 02 F6 | 	mov	arg01, local04
2fd74     E8 13 06 F1 | 	add	arg01, #488
2fd78                 | ' {
2fd78                 | ' 
2fd78                 | ' 	return *((DWORD*)ptr);
2fd78     09 FB 01 FB | 	rdlong	result1, arg01
2fd7c     20 2C 86 F1 | 	sub	local04, #32
2fd80     16 FB 61 FC | 	wrlong	result1, local04
2fd84     20 2C 06 F1 | 	add	local04, #32
2fd88     16 13 02 F6 | 	mov	arg01, local04
2fd8c     EC 13 06 F1 | 	add	arg01, #492
2fd90                 | ' {
2fd90                 | ' 
2fd90                 | ' 	return *((DWORD*)ptr);
2fd90     09 FB 01 FB | 	rdlong	result1, arg01
2fd94     24 2C 86 F1 | 	sub	local04, #36
2fd98     16 FB 61 FC | 	wrlong	result1, local04
2fd9c     10 2C 86 F1 | 	sub	local04, #16
2fda0                 | LR__4768
2fda0                 | LR__4769
2fda0     16 39 42 FC | 	wrbyte	local10, local04
2fda4     04 E4 05 F1 | 	add	objptr, #4
2fda8     F2 2E E2 FA | 	rdword	local05, objptr
2fdac     01 2E 06 F1 | 	add	local05, #1
2fdb0     F2 2E 52 FC | 	wrword	local05, objptr
2fdb4     F2 3A E2 FA | 	rdword	local11, objptr
2fdb8     06 2C 06 F1 | 	add	local04, #6
2fdbc     16 3B 52 FC | 	wrword	local11, local04
2fdc0     04 E4 05 F1 | 	add	objptr, #4
2fdc4     06 2C 06 F1 | 	add	local04, #6
2fdc8     16 E5 61 FC | 	wrlong	objptr, local04
2fdcc                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2fdcc                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2fdcc                 | ' 			{
2fdcc                 | ' 
2fdcc                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2fdcc                 | ' 
2fdcc                 | ' 
2fdcc                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2fdcc                 | ' 
2fdcc                 | ' 			}
2fdcc                 | ' 		}
2fdcc                 | ' 
2fdcc                 | ' 
2fdcc                 | ' 	}
2fdcc                 | ' 
2fdcc                 | ' 	fs->fs_type = (BYTE)fmt;
2fdcc                 | ' 	fs->id = ++Fsid;
2fdcc                 | ' 
2fdcc                 | ' 	fs->lfnbuf = LfnBuf;
2fdcc                 | ' #line 3567 "ff.c"
2fdcc                 | ' 	return FR_OK;
2fdcc     00 FA 05 F6 | 	mov	result1, #0
2fdd0     08 E4 85 F1 | 	sub	objptr, #8
2fdd4                 | LR__4770
2fdd4     A7 F0 03 F6 | 	mov	ptra, fp
2fdd8     B2 00 A0 FD | 	call	#popregs_
2fddc                 | _fatfs_cc_mount_volume_ret
2fddc     2D 00 64 FD | 	ret
2fde0                 | 
2fde0                 | _fatfs_cc_validate
2fde0     09 01 0A F6 | 	mov	_var01, arg01 wz
2fde4     09 02 06 F6 | 	mov	_var02, #9
2fde8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2fdec     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2fdf0     50 00 90 AD |  if_e	jmp	#LR__4780
2fdf4     04 00 06 F1 | 	add	_var01, #4
2fdf8     00 07 E2 FA | 	rdword	_var04, _var01
2fdfc     04 00 86 F1 | 	sub	_var01, #4
2fe00     00 13 02 FB | 	rdlong	arg01, _var01
2fe04     06 12 06 F1 | 	add	arg01, #6
2fe08     09 FB E1 FA | 	rdword	result1, arg01
2fe0c     FD 06 0A F2 | 	cmp	_var04, result1 wz
2fe10     30 00 90 5D |  if_ne	jmp	#LR__4780
2fe14     00 07 02 FB | 	rdlong	_var04, _var01
2fe18     01 06 06 F1 | 	add	_var04, #1
2fe1c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2fe20     01 FA 05 56 |  if_ne	mov	result1, #1
2fe24                 | ' 
2fe24                 | ' 	return Stat;
2fe24     01 00 00 AF 
2fe28     20 E4 05 A1 |  if_e	add	objptr, ##544
2fe2c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2fe30     01 00 00 AF 
2fe34     20 E4 85 A1 |  if_e	sub	objptr, ##544
2fe38     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2fe3c     01 04 CE F7 | 	test	_var03, #1 wz
2fe40     00 02 06 A6 |  if_e	mov	_var02, #0
2fe44                 | LR__4780
2fe44     00 02 0E F2 | 	cmp	_var02, #0 wz
2fe48     00 05 02 AB |  if_e	rdlong	_var03, _var01
2fe4c     00 04 06 56 |  if_ne	mov	_var03, #0
2fe50     0A 05 62 FC | 	wrlong	_var03, arg02
2fe54                 | ' 			res = FR_OK;
2fe54                 | ' 		}
2fe54                 | ' 
2fe54                 | ' 	}
2fe54                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2fe54                 | ' 	return res;
2fe54     01 FB 01 F6 | 	mov	result1, _var02
2fe58                 | _fatfs_cc_validate_ret
2fe58     2D 00 64 FD | 	ret
2fe5c                 | 
2fe5c                 | _fatfs_cc_f_mount
2fe5c     01 4A 05 F6 | 	mov	COUNT_, #1
2fe60     A8 00 A0 FD | 	call	#pushregs_
2fe64     20 F0 07 F1 | 	add	ptra, #32
2fe68     04 4E 05 F1 | 	add	fp, #4
2fe6c     A7 12 62 FC | 	wrlong	arg01, fp
2fe70     04 4E 05 F1 | 	add	fp, #4
2fe74     A7 14 62 FC | 	wrlong	arg02, fp
2fe78     04 4E 05 F1 | 	add	fp, #4
2fe7c     A7 16 42 FC | 	wrbyte	arg03, fp
2fe80     04 4E 85 F1 | 	sub	fp, #4
2fe84     A7 16 02 FB | 	rdlong	arg03, fp
2fe88     14 4E 05 F1 | 	add	fp, #20
2fe8c     A7 16 62 FC | 	wrlong	arg03, fp
2fe90     A7 12 02 F6 | 	mov	arg01, fp
2fe94     1C 4E 85 F1 | 	sub	fp, #28
2fe98     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2fe9c     14 4E 05 F1 | 	add	fp, #20
2fea0     A7 FA 61 FC | 	wrlong	result1, fp
2fea4     14 4E 85 F1 | 	sub	fp, #20
2fea8     00 FA 55 F2 | 	cmps	result1, #0 wc
2feac     0B FA 05 C6 |  if_b	mov	result1, #11
2feb0     C0 00 90 CD |  if_b	jmp	#LR__4791
2feb4     14 4E 05 F1 | 	add	fp, #20
2feb8     A7 16 02 FB | 	rdlong	arg03, fp
2febc     02 16 66 F0 | 	shl	arg03, #2
2fec0     F2 16 02 F1 | 	add	arg03, objptr
2fec4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2fec8     04 4E 85 F1 | 	sub	fp, #4
2fecc     A7 16 62 FC | 	wrlong	arg03, fp
2fed0     10 4E 85 F1 | 	sub	fp, #16
2fed4     28 00 90 AD |  if_e	jmp	#LR__4790
2fed8     10 4E 05 F1 | 	add	fp, #16
2fedc     A7 16 02 FB | 	rdlong	arg03, fp
2fee0     10 4E 85 F1 | 	sub	fp, #16
2fee4     01 16 06 F1 | 	add	arg03, #1
2fee8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2feec     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2fef0     10 4E 05 F1 | 	add	fp, #16
2fef4     A7 16 02 FB | 	rdlong	arg03, fp
2fef8     10 4E 85 F1 | 	sub	fp, #16
2fefc     0B 01 48 FC | 	wrbyte	#0, arg03
2ff00                 | LR__4790
2ff00     04 4E 05 F1 | 	add	fp, #4
2ff04     A7 26 0A FB | 	rdlong	local01, fp wz
2ff08     04 4E 85 F1 | 	sub	fp, #4
2ff0c     04 4E 05 51 |  if_ne	add	fp, #4
2ff10     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ff14     04 4E 85 51 |  if_ne	sub	fp, #4
2ff18     13 01 48 5C |  if_ne	wrbyte	#0, local01
2ff1c     14 4E 05 F1 | 	add	fp, #20
2ff20     A7 26 02 FB | 	rdlong	local01, fp
2ff24     02 26 66 F0 | 	shl	local01, #2
2ff28     F2 26 02 F1 | 	add	local01, objptr
2ff2c     10 4E 85 F1 | 	sub	fp, #16
2ff30     A7 16 02 FB | 	rdlong	arg03, fp
2ff34     13 17 62 FC | 	wrlong	arg03, local01
2ff38     08 4E 05 F1 | 	add	fp, #8
2ff3c     A7 26 CA FA | 	rdbyte	local01, fp wz
2ff40     0C 4E 85 F1 | 	sub	fp, #12
2ff44     00 FA 05 A6 |  if_e	mov	result1, #0
2ff48     28 00 90 AD |  if_e	jmp	#LR__4791
2ff4c     08 4E 05 F1 | 	add	fp, #8
2ff50     A7 12 02 F6 | 	mov	arg01, fp
2ff54     04 4E 85 F1 | 	sub	fp, #4
2ff58     A7 14 02 F6 | 	mov	arg02, fp
2ff5c     04 4E 85 F1 | 	sub	fp, #4
2ff60     00 16 06 F6 | 	mov	arg03, #0
2ff64     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2ff68     18 4E 05 F1 | 	add	fp, #24
2ff6c     A7 FA 61 FC | 	wrlong	result1, fp
2ff70                 | ' 
2ff70                 | ' 	res = mount_volume(&path, &fs, 0);
2ff70                 | ' 	return res ;
2ff70     18 4E 85 F1 | 	sub	fp, #24
2ff74                 | LR__4791
2ff74     A7 F0 03 F6 | 	mov	ptra, fp
2ff78     B2 00 A0 FD | 	call	#popregs_
2ff7c                 | _fatfs_cc_f_mount_ret
2ff7c     2D 00 64 FD | 	ret
2ff80                 | 
2ff80                 | _fatfs_cc_f_open
2ff80     02 4A 05 F6 | 	mov	COUNT_, #2
2ff84     A8 00 A0 FD | 	call	#pushregs_
2ff88     60 F0 07 F1 | 	add	ptra, #96
2ff8c     04 4E 05 F1 | 	add	fp, #4
2ff90     A7 12 62 FC | 	wrlong	arg01, fp
2ff94     04 4E 05 F1 | 	add	fp, #4
2ff98     A7 14 62 FC | 	wrlong	arg02, fp
2ff9c     04 4E 05 F1 | 	add	fp, #4
2ffa0     A7 16 42 FC | 	wrbyte	arg03, fp
2ffa4     08 4E 85 F1 | 	sub	fp, #8
2ffa8     A7 18 0A FB | 	rdlong	arg04, fp wz
2ffac     04 4E 85 F1 | 	sub	fp, #4
2ffb0     09 FA 05 A6 |  if_e	mov	result1, #9
2ffb4     98 06 90 AD |  if_e	jmp	#LR__4817
2ffb8     0C 4E 05 F1 | 	add	fp, #12
2ffbc     A7 18 C2 FA | 	rdbyte	arg04, fp
2ffc0     3F 18 06 F5 | 	and	arg04, #63
2ffc4     A7 18 42 FC | 	wrbyte	arg04, fp
2ffc8     04 4E 85 F1 | 	sub	fp, #4
2ffcc     A7 12 02 F6 | 	mov	arg01, fp
2ffd0     3C 4E 05 F1 | 	add	fp, #60
2ffd4     A7 14 02 F6 | 	mov	arg02, fp
2ffd8     38 4E 85 F1 | 	sub	fp, #56
2ffdc     A7 16 C2 FA | 	rdbyte	arg03, fp
2ffe0     0C 4E 85 F1 | 	sub	fp, #12
2ffe4     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2ffe8     10 4E 05 F1 | 	add	fp, #16
2ffec     A7 FA 61 FC | 	wrlong	result1, fp
2fff0     10 4E 85 F1 | 	sub	fp, #16
2fff4     00 FA 0D F2 | 	cmp	result1, #0 wz
2fff8     2C 06 90 5D |  if_ne	jmp	#LR__4816
2fffc     44 4E 05 F1 | 	add	fp, #68
30000     A7 18 02 FB | 	rdlong	arg04, fp
30004     30 4E 85 F1 | 	sub	fp, #48
30008     A7 18 62 FC | 	wrlong	arg04, fp
3000c     A7 12 02 F6 | 	mov	arg01, fp
30010     0C 4E 85 F1 | 	sub	fp, #12
30014     A7 26 02 FB | 	rdlong	local01, fp
30018     08 4E 85 F1 | 	sub	fp, #8
3001c     13 15 02 F6 | 	mov	arg02, local01
30020     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
30024     10 4E 05 F1 | 	add	fp, #16
30028     A7 FA 61 FC | 	wrlong	result1, fp
3002c     10 4E 85 F1 | 	sub	fp, #16
30030     00 FA 0D F2 | 	cmp	result1, #0 wz
30034     1C 00 90 5D |  if_ne	jmp	#LR__4800
30038     3F 4E 05 F1 | 	add	fp, #63
3003c     A7 18 C2 FA | 	rdbyte	arg04, fp
30040     3F 4E 85 F1 | 	sub	fp, #63
30044     80 18 CE F7 | 	test	arg04, #128 wz
30048     10 4E 05 51 |  if_ne	add	fp, #16
3004c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
30050     10 4E 85 51 |  if_ne	sub	fp, #16
30054                 | LR__4800
30054     0C 4E 05 F1 | 	add	fp, #12
30058     A7 18 C2 FA | 	rdbyte	arg04, fp
3005c     0C 4E 85 F1 | 	sub	fp, #12
30060     1C 18 CE F7 | 	test	arg04, #28 wz
30064     F0 01 90 AD |  if_e	jmp	#LR__4805
30068     10 4E 05 F1 | 	add	fp, #16
3006c     A7 26 0A FB | 	rdlong	local01, fp wz
30070     10 4E 85 F1 | 	sub	fp, #16
30074     48 00 90 AD |  if_e	jmp	#LR__4802
30078     10 4E 05 F1 | 	add	fp, #16
3007c     A7 18 02 FB | 	rdlong	arg04, fp
30080     10 4E 85 F1 | 	sub	fp, #16
30084     04 18 0E F2 | 	cmp	arg04, #4 wz
30088     1C 00 90 5D |  if_ne	jmp	#LR__4801
3008c     14 4E 05 F1 | 	add	fp, #20
30090     A7 12 02 F6 | 	mov	arg01, fp
30094     14 4E 85 F1 | 	sub	fp, #20
30098     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
3009c     10 4E 05 F1 | 	add	fp, #16
300a0     A7 FA 61 FC | 	wrlong	result1, fp
300a4     10 4E 85 F1 | 	sub	fp, #16
300a8                 | LR__4801
300a8     0C 4E 05 F1 | 	add	fp, #12
300ac     A7 26 C2 FA | 	rdbyte	local01, fp
300b0     08 26 46 F5 | 	or	local01, #8
300b4     A7 26 42 FC | 	wrbyte	local01, fp
300b8     0C 4E 85 F1 | 	sub	fp, #12
300bc     3C 00 90 FD | 	jmp	#LR__4804
300c0                 | LR__4802
300c0     1A 4E 05 F1 | 	add	fp, #26
300c4     A7 26 C2 FA | 	rdbyte	local01, fp
300c8     1A 4E 85 F1 | 	sub	fp, #26
300cc     11 26 CE F7 | 	test	local01, #17 wz
300d0     10 4E 05 51 |  if_ne	add	fp, #16
300d4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
300d8     10 4E 85 51 |  if_ne	sub	fp, #16
300dc     1C 00 90 5D |  if_ne	jmp	#LR__4803
300e0     0C 4E 05 F1 | 	add	fp, #12
300e4     A7 26 C2 FA | 	rdbyte	local01, fp
300e8     0C 4E 85 F1 | 	sub	fp, #12
300ec     04 26 CE F7 | 	test	local01, #4 wz
300f0     10 4E 05 51 |  if_ne	add	fp, #16
300f4     A7 10 68 5C |  if_ne	wrlong	#8, fp
300f8     10 4E 85 51 |  if_ne	sub	fp, #16
300fc                 | LR__4803
300fc                 | LR__4804
300fc     10 4E 05 F1 | 	add	fp, #16
30100     A7 26 0A FB | 	rdlong	local01, fp wz
30104     10 4E 85 F1 | 	sub	fp, #16
30108     A8 01 90 5D |  if_ne	jmp	#LR__4808
3010c     0C 4E 05 F1 | 	add	fp, #12
30110     A7 26 C2 FA | 	rdbyte	local01, fp
30114     0C 4E 85 F1 | 	sub	fp, #12
30118     08 26 CE F7 | 	test	local01, #8 wz
3011c     94 01 90 AD |  if_e	jmp	#LR__4808
30120     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
30124     54 4E 05 F1 | 	add	fp, #84
30128     A7 FA 61 FC | 	wrlong	result1, fp
3012c     24 4E 85 F1 | 	sub	fp, #36
30130     A7 12 02 FB | 	rdlong	arg01, fp
30134     0E 12 06 F1 | 	add	arg01, #14
30138     09 FB 61 FC | 	wrlong	result1, arg01
3013c     A7 12 02 FB | 	rdlong	arg01, fp
30140     16 12 06 F1 | 	add	arg01, #22
30144     24 4E 05 F1 | 	add	fp, #36
30148     A7 14 02 FB | 	rdlong	arg02, fp
3014c     09 15 62 FC | 	wrlong	arg02, arg01
30150     10 4E 85 F1 | 	sub	fp, #16
30154     A7 12 02 FB | 	rdlong	arg01, fp
30158     14 4E 85 F1 | 	sub	fp, #20
3015c     A7 14 02 FB | 	rdlong	arg02, fp
30160     30 4E 85 F1 | 	sub	fp, #48
30164     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
30168     48 4E 05 F1 | 	add	fp, #72
3016c     A7 FA 61 FC | 	wrlong	result1, fp
30170     18 4E 85 F1 | 	sub	fp, #24
30174     A7 26 02 FB | 	rdlong	local01, fp
30178     0B 26 06 F1 | 	add	local01, #11
3017c     13 41 48 FC | 	wrbyte	#32, local01
30180     14 4E 05 F1 | 	add	fp, #20
30184     A7 12 02 FB | 	rdlong	arg01, fp
30188     14 4E 85 F1 | 	sub	fp, #20
3018c     A7 14 02 FB | 	rdlong	arg02, fp
30190     30 4E 85 F1 | 	sub	fp, #48
30194     00 16 06 F6 | 	mov	arg03, #0
30198     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
3019c     30 4E 05 F1 | 	add	fp, #48
301a0     A7 12 02 FB | 	rdlong	arg01, fp
301a4     1C 12 06 F1 | 	add	arg01, #28
301a8     09 01 68 FC | 	wrlong	#0, arg01
301ac     14 4E 05 F1 | 	add	fp, #20
301b0     A7 26 02 FB | 	rdlong	local01, fp
301b4     03 26 06 F1 | 	add	local01, #3
301b8     13 03 48 FC | 	wrbyte	#1, local01
301bc     04 4E 05 F1 | 	add	fp, #4
301c0     A7 26 0A FB | 	rdlong	local01, fp wz
301c4     48 4E 85 F1 | 	sub	fp, #72
301c8     E8 00 90 AD |  if_e	jmp	#LR__4808
301cc     44 4E 05 F1 | 	add	fp, #68
301d0     A7 26 02 FB | 	rdlong	local01, fp
301d4     30 26 06 F1 | 	add	local01, #48
301d8     13 27 02 FB | 	rdlong	local01, local01
301dc     14 4E 05 F1 | 	add	fp, #20
301e0     A7 26 62 FC | 	wrlong	local01, fp
301e4     44 4E 85 F1 | 	sub	fp, #68
301e8     A7 12 02 F6 | 	mov	arg01, fp
301ec     34 4E 05 F1 | 	add	fp, #52
301f0     A7 14 02 FB | 	rdlong	arg02, fp
301f4     48 4E 85 F1 | 	sub	fp, #72
301f8     00 16 06 F6 | 	mov	arg03, #0
301fc     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
30200     10 4E 05 F1 | 	add	fp, #16
30204     A7 FA 61 FC | 	wrlong	result1, fp
30208     10 4E 85 F1 | 	sub	fp, #16
3020c     00 FA 0D F2 | 	cmp	result1, #0 wz
30210     A0 00 90 5D |  if_ne	jmp	#LR__4808
30214     44 4E 05 F1 | 	add	fp, #68
30218     A7 12 02 FB | 	rdlong	arg01, fp
3021c     14 4E 05 F1 | 	add	fp, #20
30220     A7 14 02 FB | 	rdlong	arg02, fp
30224     58 4E 85 F1 | 	sub	fp, #88
30228     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
3022c     10 4E 05 F1 | 	add	fp, #16
30230     A7 FA 61 FC | 	wrlong	result1, fp
30234     34 4E 05 F1 | 	add	fp, #52
30238     A7 18 02 FB | 	rdlong	arg04, fp
3023c     04 4E 05 F1 | 	add	fp, #4
30240     A7 26 02 FB | 	rdlong	local01, fp
30244     48 4E 85 F1 | 	sub	fp, #72
30248     01 26 86 F1 | 	sub	local01, #1
3024c     10 18 06 F1 | 	add	arg04, #16
30250     0C 27 62 FC | 	wrlong	local01, arg04
30254     5C 00 90 FD | 	jmp	#LR__4808
30258                 | LR__4805
30258     10 4E 05 F1 | 	add	fp, #16
3025c     A7 18 0A FB | 	rdlong	arg04, fp wz
30260     10 4E 85 F1 | 	sub	fp, #16
30264     4C 00 90 5D |  if_ne	jmp	#LR__4807
30268     1A 4E 05 F1 | 	add	fp, #26
3026c     A7 18 C2 FA | 	rdbyte	arg04, fp
30270     1A 4E 85 F1 | 	sub	fp, #26
30274     10 18 CE F7 | 	test	arg04, #16 wz
30278     10 4E 05 51 |  if_ne	add	fp, #16
3027c     A7 08 68 5C |  if_ne	wrlong	#4, fp
30280     10 4E 85 51 |  if_ne	sub	fp, #16
30284     2C 00 90 5D |  if_ne	jmp	#LR__4806
30288     0C 4E 05 F1 | 	add	fp, #12
3028c     A7 18 C2 FA | 	rdbyte	arg04, fp
30290     0C 4E 85 F1 | 	sub	fp, #12
30294     02 18 CE F7 | 	test	arg04, #2 wz
30298     1A 4E 05 51 |  if_ne	add	fp, #26
3029c     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
302a0     1A 4E 85 51 |  if_ne	sub	fp, #26
302a4     01 26 CE 57 |  if_ne	test	local01, #1 wz
302a8     10 4E 05 51 |  if_ne	add	fp, #16
302ac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
302b0     10 4E 85 51 |  if_ne	sub	fp, #16
302b4                 | LR__4806
302b4                 | LR__4807
302b4                 | LR__4808
302b4     10 4E 05 F1 | 	add	fp, #16
302b8     A7 26 0A FB | 	rdlong	local01, fp wz
302bc     10 4E 85 F1 | 	sub	fp, #16
302c0     60 00 90 5D |  if_ne	jmp	#LR__4809
302c4     0C 4E 05 F1 | 	add	fp, #12
302c8     A7 28 C2 FA | 	rdbyte	local02, fp
302cc     0C 4E 85 F1 | 	sub	fp, #12
302d0     08 28 CE F7 | 	test	local02, #8 wz
302d4     0C 4E 05 51 |  if_ne	add	fp, #12
302d8     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
302dc     40 28 46 55 |  if_ne	or	local02, #64
302e0     A7 28 42 5C |  if_ne	wrbyte	local02, fp
302e4     0C 4E 85 51 |  if_ne	sub	fp, #12
302e8     04 4E 05 F1 | 	add	fp, #4
302ec     A7 28 02 FB | 	rdlong	local02, fp
302f0     40 4E 05 F1 | 	add	fp, #64
302f4     A7 26 02 FB | 	rdlong	local01, fp
302f8     30 26 06 F1 | 	add	local01, #48
302fc     13 27 02 FB | 	rdlong	local01, local01
30300     20 28 06 F1 | 	add	local02, #32
30304     14 27 62 FC | 	wrlong	local01, local02
30308     40 4E 85 F1 | 	sub	fp, #64
3030c     A7 28 02 FB | 	rdlong	local02, fp
30310     2C 4E 05 F1 | 	add	fp, #44
30314     A7 26 02 FB | 	rdlong	local01, fp
30318     30 4E 85 F1 | 	sub	fp, #48
3031c     24 28 06 F1 | 	add	local02, #36
30320     14 27 62 FC | 	wrlong	local01, local02
30324                 | LR__4809
30324     10 4E 05 F1 | 	add	fp, #16
30328     A7 28 0A FB | 	rdlong	local02, fp wz
3032c     10 4E 85 F1 | 	sub	fp, #16
30330     F4 02 90 5D |  if_ne	jmp	#LR__4815
30334     04 4E 05 F1 | 	add	fp, #4
30338     A7 28 02 FB | 	rdlong	local02, fp
3033c     40 4E 05 F1 | 	add	fp, #64
30340     A7 12 02 FB | 	rdlong	arg01, fp
30344     14 4E 85 F1 | 	sub	fp, #20
30348     A7 14 02 FB | 	rdlong	arg02, fp
3034c     30 4E 85 F1 | 	sub	fp, #48
30350     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
30354     08 28 06 F1 | 	add	local02, #8
30358     14 FB 61 FC | 	wrlong	result1, local02
3035c     04 4E 05 F1 | 	add	fp, #4
30360     A7 28 02 FB | 	rdlong	local02, fp
30364     2C 4E 05 F1 | 	add	fp, #44
30368     A7 12 02 FB | 	rdlong	arg01, fp
3036c     1C 12 06 F1 | 	add	arg01, #28
30370                 | ' {
30370                 | ' 
30370                 | ' 	return *((DWORD*)ptr);
30370     09 FB 01 FB | 	rdlong	result1, arg01
30374     0C 28 06 F1 | 	add	local02, #12
30378     14 FB 61 FC | 	wrlong	result1, local02
3037c     2C 4E 85 F1 | 	sub	fp, #44
30380     A7 28 02 FB | 	rdlong	local02, fp
30384     40 4E 05 F1 | 	add	fp, #64
30388     A7 26 02 FB | 	rdlong	local01, fp
3038c     14 27 62 FC | 	wrlong	local01, local02
30390     40 4E 85 F1 | 	sub	fp, #64
30394     A7 28 02 FB | 	rdlong	local02, fp
30398     40 4E 05 F1 | 	add	fp, #64
3039c     A7 26 02 FB | 	rdlong	local01, fp
303a0     06 26 06 F1 | 	add	local01, #6
303a4     13 27 E2 FA | 	rdword	local01, local01
303a8     04 28 06 F1 | 	add	local02, #4
303ac     14 27 52 FC | 	wrword	local01, local02
303b0     40 4E 85 F1 | 	sub	fp, #64
303b4     A7 28 02 FB | 	rdlong	local02, fp
303b8     08 4E 05 F1 | 	add	fp, #8
303bc     A7 26 C2 FA | 	rdbyte	local01, fp
303c0     10 28 06 F1 | 	add	local02, #16
303c4     14 27 42 FC | 	wrbyte	local01, local02
303c8     08 4E 85 F1 | 	sub	fp, #8
303cc     A7 28 02 FB | 	rdlong	local02, fp
303d0     11 28 06 F1 | 	add	local02, #17
303d4     14 01 48 FC | 	wrbyte	#0, local02
303d8     A7 28 02 FB | 	rdlong	local02, fp
303dc     1C 28 06 F1 | 	add	local02, #28
303e0     14 01 68 FC | 	wrlong	#0, local02
303e4     A7 28 02 FB | 	rdlong	local02, fp
303e8     14 28 06 F1 | 	add	local02, #20
303ec     14 01 68 FC | 	wrlong	#0, local02
303f0     A7 12 02 FB | 	rdlong	arg01, fp
303f4     04 4E 85 F1 | 	sub	fp, #4
303f8     28 12 06 F1 | 	add	arg01, #40
303fc     00 14 06 F6 | 	mov	arg02, #0
30400     09 16 C6 F9 | 	decod	arg03, #9
30404     98 00 A0 FD | 	call	#\builtin_bytefill_
30408     0C 4E 05 F1 | 	add	fp, #12
3040c     A7 28 C2 FA | 	rdbyte	local02, fp
30410     0C 4E 85 F1 | 	sub	fp, #12
30414     20 28 CE F7 | 	test	local02, #32 wz
30418     0C 02 90 AD |  if_e	jmp	#LR__4814
3041c     04 4E 05 F1 | 	add	fp, #4
30420     A7 26 02 FB | 	rdlong	local01, fp
30424     04 4E 85 F1 | 	sub	fp, #4
30428     0C 26 06 F1 | 	add	local01, #12
3042c     13 29 02 FB | 	rdlong	local02, local01
30430     01 28 16 F2 | 	cmp	local02, #1 wc
30434     F0 01 90 CD |  if_b	jmp	#LR__4814
30438     04 4E 05 F1 | 	add	fp, #4
3043c     A7 26 02 FB | 	rdlong	local01, fp
30440     13 29 02 F6 | 	mov	local02, local01
30444     0C 26 06 F1 | 	add	local01, #12
30448     13 27 02 FB | 	rdlong	local01, local01
3044c     14 28 06 F1 | 	add	local02, #20
30450     14 27 62 FC | 	wrlong	local01, local02
30454     40 4E 05 F1 | 	add	fp, #64
30458     A7 28 02 FB | 	rdlong	local02, fp
3045c     0A 28 06 F1 | 	add	local02, #10
30460     14 29 E2 FA | 	rdword	local02, local02
30464     09 28 66 F0 | 	shl	local02, #9
30468     08 4E 05 F1 | 	add	fp, #8
3046c     A7 28 62 FC | 	wrlong	local02, fp
30470     48 4E 85 F1 | 	sub	fp, #72
30474     A7 28 02 FB | 	rdlong	local02, fp
30478     08 28 06 F1 | 	add	local02, #8
3047c     14 27 02 FB | 	rdlong	local01, local02
30480     4C 4E 05 F1 | 	add	fp, #76
30484     A7 26 62 FC | 	wrlong	local01, fp
30488                 | ' 				fp->fptr = fp->obj.objsize;
30488                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
30488                 | ' 				clst = fp->obj.sclust;
30488                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
30488     4C 4E 85 F1 | 	sub	fp, #76
3048c     A7 28 02 FB | 	rdlong	local02, fp
30490     0C 28 06 F1 | 	add	local02, #12
30494     14 27 02 FB | 	rdlong	local01, local02
30498     58 4E 05 F1 | 	add	fp, #88
3049c     A7 26 62 FC | 	wrlong	local01, fp
304a0     5C 4E 85 F1 | 	sub	fp, #92
304a4                 | LR__4810
304a4     10 4E 05 F1 | 	add	fp, #16
304a8     A7 28 0A FB | 	rdlong	local02, fp wz
304ac     10 4E 85 F1 | 	sub	fp, #16
304b0     94 00 90 5D |  if_ne	jmp	#LR__4811
304b4     5C 4E 05 F1 | 	add	fp, #92
304b8     A7 28 02 FB | 	rdlong	local02, fp
304bc     10 4E 85 F1 | 	sub	fp, #16
304c0     A7 26 02 FB | 	rdlong	local01, fp
304c4     4C 4E 85 F1 | 	sub	fp, #76
304c8     13 29 1A F2 | 	cmp	local02, local01 wcz
304cc     78 00 90 ED |  if_be	jmp	#LR__4811
304d0     04 4E 05 F1 | 	add	fp, #4
304d4     A7 12 02 FB | 	rdlong	arg01, fp
304d8     4C 4E 05 F1 | 	add	fp, #76
304dc     A7 14 02 FB | 	rdlong	arg02, fp
304e0     50 4E 85 F1 | 	sub	fp, #80
304e4     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
304e8     50 4E 05 F1 | 	add	fp, #80
304ec     A7 FA 61 FC | 	wrlong	result1, fp
304f0     50 4E 85 F1 | 	sub	fp, #80
304f4     02 FA 15 F2 | 	cmp	result1, #2 wc
304f8     10 4E 05 C1 |  if_b	add	fp, #16
304fc     A7 04 68 CC |  if_b	wrlong	#2, fp
30500     10 4E 85 C1 |  if_b	sub	fp, #16
30504     50 4E 05 F1 | 	add	fp, #80
30508     A7 28 02 FB | 	rdlong	local02, fp
3050c     50 4E 85 F1 | 	sub	fp, #80
30510     FF FF 7F FF 
30514     FF 29 0E F2 | 	cmp	local02, ##-1 wz
30518     10 4E 05 A1 |  if_e	add	fp, #16
3051c     A7 02 68 AC |  if_e	wrlong	#1, fp
30520     10 4E 85 A1 |  if_e	sub	fp, #16
30524     5C 4E 05 F1 | 	add	fp, #92
30528     A7 28 02 FB | 	rdlong	local02, fp
3052c     10 4E 85 F1 | 	sub	fp, #16
30530     A7 26 02 FB | 	rdlong	local01, fp
30534     13 29 82 F1 | 	sub	local02, local01
30538     10 4E 05 F1 | 	add	fp, #16
3053c     A7 28 62 FC | 	wrlong	local02, fp
30540     5C 4E 85 F1 | 	sub	fp, #92
30544     5C FF 9F FD | 	jmp	#LR__4810
30548                 | LR__4811
30548     04 4E 05 F1 | 	add	fp, #4
3054c     A7 28 02 FB | 	rdlong	local02, fp
30550     4C 4E 05 F1 | 	add	fp, #76
30554     A7 26 02 FB | 	rdlong	local01, fp
30558     18 28 06 F1 | 	add	local02, #24
3055c     14 27 62 FC | 	wrlong	local01, local02
30560     40 4E 85 F1 | 	sub	fp, #64
30564     A7 28 0A FB | 	rdlong	local02, fp wz
30568     10 4E 85 F1 | 	sub	fp, #16
3056c     B8 00 90 5D |  if_ne	jmp	#LR__4813
30570     5C 4E 05 F1 | 	add	fp, #92
30574     A7 26 02 FB | 	rdlong	local01, fp
30578     5C 4E 85 F1 | 	sub	fp, #92
3057c     FF 27 CE F7 | 	test	local01, #511 wz
30580     A4 00 90 AD |  if_e	jmp	#LR__4813
30584     44 4E 05 F1 | 	add	fp, #68
30588     A7 12 02 FB | 	rdlong	arg01, fp
3058c     0C 4E 05 F1 | 	add	fp, #12
30590     A7 14 02 FB | 	rdlong	arg02, fp
30594     50 4E 85 F1 | 	sub	fp, #80
30598     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
3059c     58 4E 05 F1 | 	add	fp, #88
305a0     A7 FA 61 FC | 	wrlong	result1, fp
305a4     00 FA 4D F2 | 	cmps	result1, #0 wz
305a8     58 4E 85 F1 | 	sub	fp, #88
305ac     10 4E 05 A1 |  if_e	add	fp, #16
305b0     A7 04 68 AC |  if_e	wrlong	#2, fp
305b4     10 4E 85 A1 |  if_e	sub	fp, #16
305b8     6C 00 90 AD |  if_e	jmp	#LR__4812
305bc     04 4E 05 F1 | 	add	fp, #4
305c0     A7 28 02 FB | 	rdlong	local02, fp
305c4     54 4E 05 F1 | 	add	fp, #84
305c8     A7 26 02 FB | 	rdlong	local01, fp
305cc     04 4E 05 F1 | 	add	fp, #4
305d0     A7 18 02 FB | 	rdlong	arg04, fp
305d4     09 18 46 F0 | 	shr	arg04, #9
305d8     0C 27 02 F1 | 	add	local01, arg04
305dc     1C 28 06 F1 | 	add	local02, #28
305e0     14 27 62 FC | 	wrlong	local01, local02
305e4     18 4E 85 F1 | 	sub	fp, #24
305e8     A7 28 02 FB | 	rdlong	local02, fp
305ec     01 28 06 F1 | 	add	local02, #1
305f0     14 13 C2 FA | 	rdbyte	arg01, local02
305f4     40 4E 85 F1 | 	sub	fp, #64
305f8     A7 28 02 FB | 	rdlong	local02, fp
305fc     14 15 02 F6 | 	mov	arg02, local02
30600     28 14 06 F1 | 	add	arg02, #40
30604     04 4E 85 F1 | 	sub	fp, #4
30608     1C 28 06 F1 | 	add	local02, #28
3060c     14 17 02 FB | 	rdlong	arg03, local02
30610     01 18 06 F6 | 	mov	arg04, #1
30614     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
30618     00 FA 0D F2 | 	cmp	result1, #0 wz
3061c     10 4E 05 51 |  if_ne	add	fp, #16
30620     A7 02 68 5C |  if_ne	wrlong	#1, fp
30624     10 4E 85 51 |  if_ne	sub	fp, #16
30628                 | LR__4812
30628                 | LR__4813
30628                 | LR__4814
30628                 | LR__4815
30628                 | LR__4816
30628     10 4E 05 F1 | 	add	fp, #16
3062c     A7 28 0A FB | 	rdlong	local02, fp wz
30630     10 4E 85 F1 | 	sub	fp, #16
30634     04 4E 05 51 |  if_ne	add	fp, #4
30638     A7 28 02 5B |  if_ne	rdlong	local02, fp
3063c     04 4E 85 51 |  if_ne	sub	fp, #4
30640     14 01 68 5C |  if_ne	wrlong	#0, local02
30644                 | ' 
30644                 | ' 	return res ;
30644     10 4E 05 F1 | 	add	fp, #16
30648     A7 FA 01 FB | 	rdlong	result1, fp
3064c     10 4E 85 F1 | 	sub	fp, #16
30650                 | LR__4817
30650     A7 F0 03 F6 | 	mov	ptra, fp
30654     B2 00 A0 FD | 	call	#popregs_
30658                 | _fatfs_cc_f_open_ret
30658     2D 00 64 FD | 	ret
3065c                 | 
3065c                 | _fatfs_cc_f_read
3065c     0E 4A 05 F6 | 	mov	COUNT_, #14
30660     A8 00 A0 FD | 	call	#pushregs_
30664     38 F0 07 F1 | 	add	ptra, #56
30668     04 4E 05 F1 | 	add	fp, #4
3066c     A7 12 62 FC | 	wrlong	arg01, fp
30670     04 4E 05 F1 | 	add	fp, #4
30674     A7 14 62 FC | 	wrlong	arg02, fp
30678     04 4E 05 F1 | 	add	fp, #4
3067c     A7 16 62 FC | 	wrlong	arg03, fp
30680     04 4E 05 F1 | 	add	fp, #4
30684     A7 18 62 FC | 	wrlong	arg04, fp
30688     08 4E 85 F1 | 	sub	fp, #8
3068c     A7 FA 01 FB | 	rdlong	result1, fp
30690     2C 4E 05 F1 | 	add	fp, #44
30694     A7 FA 61 FC | 	wrlong	result1, fp
30698     24 4E 85 F1 | 	sub	fp, #36
3069c     A7 FA 01 FB | 	rdlong	result1, fp
306a0     FD 00 68 FC | 	wrlong	#0, result1
306a4     0C 4E 85 F1 | 	sub	fp, #12
306a8     A7 12 02 FB | 	rdlong	arg01, fp
306ac     14 4E 05 F1 | 	add	fp, #20
306b0     A7 14 02 F6 | 	mov	arg02, fp
306b4     18 4E 85 F1 | 	sub	fp, #24
306b8     24 F7 BF FD | 	call	#_fatfs_cc_validate
306bc     14 4E 05 F1 | 	add	fp, #20
306c0     A7 FA 61 FC | 	wrlong	result1, fp
306c4     00 FA 4D F2 | 	cmps	result1, #0 wz
306c8     14 4E 85 F1 | 	sub	fp, #20
306cc     20 00 90 5D |  if_ne	jmp	#LR__4820
306d0     04 4E 05 F1 | 	add	fp, #4
306d4     A7 14 02 FB | 	rdlong	arg02, fp
306d8     11 14 06 F1 | 	add	arg02, #17
306dc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
306e0     10 4E 05 F1 | 	add	fp, #16
306e4     A7 14 62 FC | 	wrlong	arg02, fp
306e8     14 4E 85 F1 | 	sub	fp, #20
306ec     10 00 90 AD |  if_e	jmp	#LR__4821
306f0                 | LR__4820
306f0     14 4E 05 F1 | 	add	fp, #20
306f4     A7 FA 01 FB | 	rdlong	result1, fp
306f8     14 4E 85 F1 | 	sub	fp, #20
306fc     EC 05 90 FD | 	jmp	#LR__4840
30700                 | LR__4821
30700     04 4E 05 F1 | 	add	fp, #4
30704     A7 18 02 FB | 	rdlong	arg04, fp
30708     04 4E 85 F1 | 	sub	fp, #4
3070c     10 18 06 F1 | 	add	arg04, #16
30710     0C 19 C2 FA | 	rdbyte	arg04, arg04
30714     01 18 CE F7 | 	test	arg04, #1 wz
30718     07 FA 05 A6 |  if_e	mov	result1, #7
3071c     CC 05 90 AD |  if_e	jmp	#LR__4840
30720     04 4E 05 F1 | 	add	fp, #4
30724     A7 26 02 FB | 	rdlong	local01, fp
30728     13 29 02 F6 | 	mov	local02, local01
3072c     0C 28 06 F1 | 	add	local02, #12
30730     14 2B 02 FB | 	rdlong	local03, local02
30734     14 26 06 F1 | 	add	local01, #20
30738     13 27 02 FB | 	rdlong	local01, local01
3073c     13 2B 82 F1 | 	sub	local03, local01
30740     20 4E 05 F1 | 	add	fp, #32
30744     A7 2A 62 FC | 	wrlong	local03, fp
30748     18 4E 85 F1 | 	sub	fp, #24
3074c     A7 2C 02 FB | 	rdlong	local04, fp
30750     0C 4E 85 F1 | 	sub	fp, #12
30754     15 2D 1A F2 | 	cmp	local04, local03 wcz
30758     24 4E 05 11 |  if_a	add	fp, #36
3075c     A7 2C 02 1B |  if_a	rdlong	local04, fp
30760     18 4E 85 11 |  if_a	sub	fp, #24
30764     A7 2C 62 1C |  if_a	wrlong	local04, fp
30768     0C 4E 85 11 |  if_a	sub	fp, #12
3076c                 | ' 
3076c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3076c                 | LR__4822
3076c     0C 4E 05 F1 | 	add	fp, #12
30770     A7 28 02 FB | 	rdlong	local02, fp
30774     0C 4E 85 F1 | 	sub	fp, #12
30778     14 2D 02 F6 | 	mov	local04, local02
3077c     01 2C 16 F2 | 	cmp	local04, #1 wc
30780     64 05 90 CD |  if_b	jmp	#LR__4839
30784     04 4E 05 F1 | 	add	fp, #4
30788     A7 2A 02 FB | 	rdlong	local03, fp
3078c     04 4E 85 F1 | 	sub	fp, #4
30790     14 2A 06 F1 | 	add	local03, #20
30794     15 2B 02 FB | 	rdlong	local03, local03
30798     FF 2B CE F7 | 	test	local03, #511 wz
3079c     3C 04 90 5D |  if_ne	jmp	#LR__4837
307a0     04 4E 05 F1 | 	add	fp, #4
307a4     A7 26 02 FB | 	rdlong	local01, fp
307a8     14 26 06 F1 | 	add	local01, #20
307ac     13 2B 02 FB | 	rdlong	local03, local01
307b0     09 2A 46 F0 | 	shr	local03, #9
307b4     14 4E 05 F1 | 	add	fp, #20
307b8     A7 2E 02 FB | 	rdlong	local05, fp
307bc     17 31 02 F6 | 	mov	local06, local05
307c0     0A 30 06 F1 | 	add	local06, #10
307c4     18 33 E2 FA | 	rdword	local07, local06
307c8     0A 30 86 F1 | 	sub	local06, #10
307cc     19 35 32 F9 | 	getword	local08, local07, #0
307d0     01 34 86 F1 | 	sub	local08, #1
307d4     1A 2B 0A F5 | 	and	local03, local08 wz
307d8     18 4E 05 F1 | 	add	fp, #24
307dc     A7 2A 62 FC | 	wrlong	local03, fp
307e0     30 4E 85 F1 | 	sub	fp, #48
307e4     E0 00 90 5D |  if_ne	jmp	#LR__4827
307e8     04 4E 05 F1 | 	add	fp, #4
307ec     A7 2A 02 FB | 	rdlong	local03, fp
307f0     04 4E 85 F1 | 	sub	fp, #4
307f4     14 2A 06 F1 | 	add	local03, #20
307f8     15 2B 0A FB | 	rdlong	local03, local03 wz
307fc     20 00 90 5D |  if_ne	jmp	#LR__4823
30800     04 4E 05 F1 | 	add	fp, #4
30804     A7 2A 02 FB | 	rdlong	local03, fp
30808     08 2A 06 F1 | 	add	local03, #8
3080c     15 2B 02 FB | 	rdlong	local03, local03
30810     18 4E 05 F1 | 	add	fp, #24
30814     A7 2A 62 FC | 	wrlong	local03, fp
30818     1C 4E 85 F1 | 	sub	fp, #28
3081c     28 00 90 FD | 	jmp	#LR__4824
30820                 | LR__4823
30820     04 4E 05 F1 | 	add	fp, #4
30824     A7 34 02 FB | 	rdlong	local08, fp
30828     1A 13 02 F6 | 	mov	arg01, local08
3082c     04 4E 85 F1 | 	sub	fp, #4
30830     18 34 06 F1 | 	add	local08, #24
30834     1A 15 02 FB | 	rdlong	arg02, local08
30838     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
3083c     1C 4E 05 F1 | 	add	fp, #28
30840     A7 FA 61 FC | 	wrlong	result1, fp
30844     1C 4E 85 F1 | 	sub	fp, #28
30848                 | LR__4824
30848     1C 4E 05 F1 | 	add	fp, #28
3084c     A7 2A 02 FB | 	rdlong	local03, fp
30850     1C 4E 85 F1 | 	sub	fp, #28
30854     02 2A 16 F2 | 	cmp	local03, #2 wc
30858     1C 00 90 3D |  if_ae	jmp	#LR__4825
3085c     04 4E 05 F1 | 	add	fp, #4
30860     A7 2A 02 FB | 	rdlong	local03, fp
30864     04 4E 85 F1 | 	sub	fp, #4
30868     11 2A 06 F1 | 	add	local03, #17
3086c     15 05 48 FC | 	wrbyte	#2, local03
30870     02 FA 05 F6 | 	mov	result1, #2
30874     74 04 90 FD | 	jmp	#LR__4840
30878                 | LR__4825
30878     1C 4E 05 F1 | 	add	fp, #28
3087c     A7 2A 02 FB | 	rdlong	local03, fp
30880     1C 4E 85 F1 | 	sub	fp, #28
30884     FF FF 7F FF 
30888     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
3088c     1C 00 90 5D |  if_ne	jmp	#LR__4826
30890     04 4E 05 F1 | 	add	fp, #4
30894     A7 2A 02 FB | 	rdlong	local03, fp
30898     04 4E 85 F1 | 	sub	fp, #4
3089c     11 2A 06 F1 | 	add	local03, #17
308a0     15 03 48 FC | 	wrbyte	#1, local03
308a4     01 FA 05 F6 | 	mov	result1, #1
308a8     40 04 90 FD | 	jmp	#LR__4840
308ac                 | LR__4826
308ac     04 4E 05 F1 | 	add	fp, #4
308b0     A7 2A 02 FB | 	rdlong	local03, fp
308b4     18 4E 05 F1 | 	add	fp, #24
308b8     A7 34 02 FB | 	rdlong	local08, fp
308bc     1C 4E 85 F1 | 	sub	fp, #28
308c0     18 2A 06 F1 | 	add	local03, #24
308c4     15 35 62 FC | 	wrlong	local08, local03
308c8                 | LR__4827
308c8     18 4E 05 F1 | 	add	fp, #24
308cc     A7 12 02 FB | 	rdlong	arg01, fp
308d0     14 4E 85 F1 | 	sub	fp, #20
308d4     A7 2A 02 FB | 	rdlong	local03, fp
308d8     04 4E 85 F1 | 	sub	fp, #4
308dc     18 2A 06 F1 | 	add	local03, #24
308e0     15 15 02 FB | 	rdlong	arg02, local03
308e4     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
308e8     20 4E 05 F1 | 	add	fp, #32
308ec     A7 FA 61 FC | 	wrlong	result1, fp
308f0     20 4E 85 F1 | 	sub	fp, #32
308f4     00 FA 0D F2 | 	cmp	result1, #0 wz
308f8     1C 00 90 5D |  if_ne	jmp	#LR__4828
308fc     04 4E 05 F1 | 	add	fp, #4
30900     A7 2A 02 FB | 	rdlong	local03, fp
30904     04 4E 85 F1 | 	sub	fp, #4
30908     11 2A 06 F1 | 	add	local03, #17
3090c     15 05 48 FC | 	wrbyte	#2, local03
30910     02 FA 05 F6 | 	mov	result1, #2
30914     D4 03 90 FD | 	jmp	#LR__4840
30918                 | LR__4828
30918     20 4E 05 F1 | 	add	fp, #32
3091c     A7 2A 02 FB | 	rdlong	local03, fp
30920     10 4E 05 F1 | 	add	fp, #16
30924     A7 34 02 FB | 	rdlong	local08, fp
30928     1A 2B 02 F1 | 	add	local03, local08
3092c     10 4E 85 F1 | 	sub	fp, #16
30930     A7 2A 62 FC | 	wrlong	local03, fp
30934     14 4E 85 F1 | 	sub	fp, #20
30938     A7 2A 02 FB | 	rdlong	local03, fp
3093c     09 2A 46 F0 | 	shr	local03, #9
30940     20 4E 05 F1 | 	add	fp, #32
30944     A7 2A 62 FC | 	wrlong	local03, fp
30948     2C 4E 85 F1 | 	sub	fp, #44
3094c     01 2A 16 F2 | 	cmp	local03, #1 wc
30950     5C 01 90 CD |  if_b	jmp	#LR__4832
30954     30 4E 05 F1 | 	add	fp, #48
30958     A7 2A 02 FB | 	rdlong	local03, fp
3095c     04 4E 85 F1 | 	sub	fp, #4
30960     A7 34 02 FB | 	rdlong	local08, fp
30964     1A 2B 02 F1 | 	add	local03, local08
30968     14 4E 85 F1 | 	sub	fp, #20
3096c     A7 34 02 FB | 	rdlong	local08, fp
30970     18 4E 85 F1 | 	sub	fp, #24
30974     0A 34 06 F1 | 	add	local08, #10
30978     1A 35 E2 FA | 	rdword	local08, local08
3097c     1A 2B 1A F2 | 	cmp	local03, local08 wcz
30980     28 00 90 ED |  if_be	jmp	#LR__4829
30984     18 4E 05 F1 | 	add	fp, #24
30988     A7 26 02 FB | 	rdlong	local01, fp
3098c     0A 26 06 F1 | 	add	local01, #10
30990     13 2B E2 FA | 	rdword	local03, local01
30994     18 4E 05 F1 | 	add	fp, #24
30998     A7 34 02 FB | 	rdlong	local08, fp
3099c     1A 2B 82 F1 | 	sub	local03, local08
309a0     04 4E 85 F1 | 	sub	fp, #4
309a4     A7 2A 62 FC | 	wrlong	local03, fp
309a8     2C 4E 85 F1 | 	sub	fp, #44
309ac                 | LR__4829
309ac     18 4E 05 F1 | 	add	fp, #24
309b0     A7 26 02 FB | 	rdlong	local01, fp
309b4     01 26 06 F1 | 	add	local01, #1
309b8     13 13 C2 FA | 	rdbyte	arg01, local01
309bc     1C 4E 05 F1 | 	add	fp, #28
309c0     A7 14 02 FB | 	rdlong	arg02, fp
309c4     14 4E 85 F1 | 	sub	fp, #20
309c8     A7 16 02 FB | 	rdlong	arg03, fp
309cc     0C 4E 05 F1 | 	add	fp, #12
309d0     A7 18 02 FB | 	rdlong	arg04, fp
309d4     2C 4E 85 F1 | 	sub	fp, #44
309d8     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
309dc     00 FA 0D F2 | 	cmp	result1, #0 wz
309e0     1C 00 90 AD |  if_e	jmp	#LR__4830
309e4     04 4E 05 F1 | 	add	fp, #4
309e8     A7 2A 02 FB | 	rdlong	local03, fp
309ec     04 4E 85 F1 | 	sub	fp, #4
309f0     11 2A 06 F1 | 	add	local03, #17
309f4     15 03 48 FC | 	wrbyte	#1, local03
309f8     01 FA 05 F6 | 	mov	result1, #1
309fc     EC 02 90 FD | 	jmp	#LR__4840
30a00                 | LR__4830
30a00     04 4E 05 F1 | 	add	fp, #4
30a04     A7 26 02 FB | 	rdlong	local01, fp
30a08     04 4E 85 F1 | 	sub	fp, #4
30a0c     10 26 06 F1 | 	add	local01, #16
30a10     13 2B C2 FA | 	rdbyte	local03, local01
30a14     80 2A CE F7 | 	test	local03, #128 wz
30a18     78 00 90 AD |  if_e	jmp	#LR__4831
30a1c     04 4E 05 F1 | 	add	fp, #4
30a20     A7 34 02 FB | 	rdlong	local08, fp
30a24     1C 34 06 F1 | 	add	local08, #28
30a28     1A 35 02 FB | 	rdlong	local08, local08
30a2c     1C 4E 05 F1 | 	add	fp, #28
30a30     A7 36 02 FB | 	rdlong	local09, fp
30a34     1B 35 82 F1 | 	sub	local08, local09
30a38     0C 4E 05 F1 | 	add	fp, #12
30a3c     A7 38 02 FB | 	rdlong	local10, fp
30a40     2C 4E 85 F1 | 	sub	fp, #44
30a44     1C 3B 02 F6 | 	mov	local11, local10
30a48     1D 35 12 F2 | 	cmp	local08, local11 wc
30a4c     44 00 90 3D |  if_ae	jmp	#LR__4831
30a50     34 4E 05 F1 | 	add	fp, #52
30a54     A7 12 02 FB | 	rdlong	arg01, fp
30a58     30 4E 85 F1 | 	sub	fp, #48
30a5c     A7 14 02 FB | 	rdlong	arg02, fp
30a60     0A 3B 02 F6 | 	mov	local11, arg02
30a64     1C 3A 06 F1 | 	add	local11, #28
30a68     1D 37 02 FB | 	rdlong	local09, local11
30a6c     1C 4E 05 F1 | 	add	fp, #28
30a70     A7 2E 02 FB | 	rdlong	local05, fp
30a74     17 37 82 F1 | 	sub	local09, local05
30a78     09 36 66 F0 | 	shl	local09, #9
30a7c     1B 3B 02 F6 | 	mov	local11, local09
30a80     1B 13 02 F1 | 	add	arg01, local09
30a84     20 4E 85 F1 | 	sub	fp, #32
30a88     28 14 06 F1 | 	add	arg02, #40
30a8c     09 16 C6 F9 | 	decod	arg03, #9
30a90     60 43 BF FD | 	call	#__system____builtin_memmove
30a94                 | LR__4831
30a94     2C 4E 05 F1 | 	add	fp, #44
30a98     A7 2A 02 FB | 	rdlong	local03, fp
30a9c     09 2A 66 F0 | 	shl	local03, #9
30aa0     04 4E 85 F1 | 	sub	fp, #4
30aa4     A7 2A 62 FC | 	wrlong	local03, fp
30aa8     28 4E 85 F1 | 	sub	fp, #40
30aac                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
30aac                 | ' 				}
30aac                 | ' 
30aac                 | ' 
30aac                 | ' 				rcnt =  ((UINT) 512 )  * cc;
30aac                 | ' 				continue;
30aac     B4 01 90 FD | 	jmp	#LR__4838
30ab0                 | LR__4832
30ab0     04 4E 05 F1 | 	add	fp, #4
30ab4     A7 2A 02 FB | 	rdlong	local03, fp
30ab8     1C 2A 06 F1 | 	add	local03, #28
30abc     15 2B 02 FB | 	rdlong	local03, local03
30ac0     1C 4E 05 F1 | 	add	fp, #28
30ac4     A7 26 02 FB | 	rdlong	local01, fp
30ac8     20 4E 85 F1 | 	sub	fp, #32
30acc     13 2B 0A F2 | 	cmp	local03, local01 wz
30ad0     EC 00 90 AD |  if_e	jmp	#LR__4836
30ad4     04 4E 05 F1 | 	add	fp, #4
30ad8     A7 26 02 FB | 	rdlong	local01, fp
30adc     04 4E 85 F1 | 	sub	fp, #4
30ae0     10 26 06 F1 | 	add	local01, #16
30ae4     13 2B C2 FA | 	rdbyte	local03, local01
30ae8     80 2A CE F7 | 	test	local03, #128 wz
30aec     7C 00 90 AD |  if_e	jmp	#LR__4834
30af0     18 4E 05 F1 | 	add	fp, #24
30af4     A7 26 02 FB | 	rdlong	local01, fp
30af8     01 26 06 F1 | 	add	local01, #1
30afc     13 13 C2 FA | 	rdbyte	arg01, local01
30b00     14 4E 85 F1 | 	sub	fp, #20
30b04     A7 2A 02 FB | 	rdlong	local03, fp
30b08     15 15 02 F6 | 	mov	arg02, local03
30b0c     28 14 06 F1 | 	add	arg02, #40
30b10     04 4E 85 F1 | 	sub	fp, #4
30b14     1C 2A 06 F1 | 	add	local03, #28
30b18     15 17 02 FB | 	rdlong	arg03, local03
30b1c     01 18 06 F6 | 	mov	arg04, #1
30b20     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
30b24     00 FA 0D F2 | 	cmp	result1, #0 wz
30b28     1C 00 90 AD |  if_e	jmp	#LR__4833
30b2c     04 4E 05 F1 | 	add	fp, #4
30b30     A7 2A 02 FB | 	rdlong	local03, fp
30b34     04 4E 85 F1 | 	sub	fp, #4
30b38     11 2A 06 F1 | 	add	local03, #17
30b3c     15 03 48 FC | 	wrbyte	#1, local03
30b40     01 FA 05 F6 | 	mov	result1, #1
30b44     A4 01 90 FD | 	jmp	#LR__4840
30b48                 | LR__4833
30b48     04 4E 05 F1 | 	add	fp, #4
30b4c     A7 3A 02 FB | 	rdlong	local11, fp
30b50     1D 2B 02 F6 | 	mov	local03, local11
30b54     04 4E 85 F1 | 	sub	fp, #4
30b58     10 3A 06 F1 | 	add	local11, #16
30b5c     1D 3B C2 FA | 	rdbyte	local11, local11
30b60     7F 3A 06 F5 | 	and	local11, #127
30b64     10 2A 06 F1 | 	add	local03, #16
30b68     15 3B 42 FC | 	wrbyte	local11, local03
30b6c                 | LR__4834
30b6c     18 4E 05 F1 | 	add	fp, #24
30b70     A7 26 02 FB | 	rdlong	local01, fp
30b74     01 26 06 F1 | 	add	local01, #1
30b78     13 13 C2 FA | 	rdbyte	arg01, local01
30b7c     14 4E 85 F1 | 	sub	fp, #20
30b80     A7 14 02 FB | 	rdlong	arg02, fp
30b84     28 14 06 F1 | 	add	arg02, #40
30b88     1C 4E 05 F1 | 	add	fp, #28
30b8c     A7 16 02 FB | 	rdlong	arg03, fp
30b90     20 4E 85 F1 | 	sub	fp, #32
30b94     01 18 06 F6 | 	mov	arg04, #1
30b98     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
30b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
30ba0     1C 00 90 AD |  if_e	jmp	#LR__4835
30ba4     04 4E 05 F1 | 	add	fp, #4
30ba8     A7 2A 02 FB | 	rdlong	local03, fp
30bac     04 4E 85 F1 | 	sub	fp, #4
30bb0     11 2A 06 F1 | 	add	local03, #17
30bb4     15 03 48 FC | 	wrbyte	#1, local03
30bb8     01 FA 05 F6 | 	mov	result1, #1
30bbc     2C 01 90 FD | 	jmp	#LR__4840
30bc0                 | LR__4835
30bc0                 | LR__4836
30bc0     04 4E 05 F1 | 	add	fp, #4
30bc4     A7 2A 02 FB | 	rdlong	local03, fp
30bc8     1C 4E 05 F1 | 	add	fp, #28
30bcc     A7 3A 02 FB | 	rdlong	local11, fp
30bd0     20 4E 85 F1 | 	sub	fp, #32
30bd4     1C 2A 06 F1 | 	add	local03, #28
30bd8     15 3B 62 FC | 	wrlong	local11, local03
30bdc                 | LR__4837
30bdc     04 4E 05 F1 | 	add	fp, #4
30be0     A7 26 02 FB | 	rdlong	local01, fp
30be4     14 26 06 F1 | 	add	local01, #20
30be8     13 3B 02 FB | 	rdlong	local11, local01
30bec     FF 3B 06 F5 | 	and	local11, #511
30bf0     09 2A C6 F9 | 	decod	local03, #9
30bf4     1D 2B 82 F1 | 	sub	local03, local11
30bf8     24 4E 05 F1 | 	add	fp, #36
30bfc     A7 2A 62 FC | 	wrlong	local03, fp
30c00     1C 4E 85 F1 | 	sub	fp, #28
30c04     A7 3A 02 FB | 	rdlong	local11, fp
30c08     0C 4E 85 F1 | 	sub	fp, #12
30c0c     1D 2B 1A F2 | 	cmp	local03, local11 wcz
30c10     0C 4E 05 11 |  if_a	add	fp, #12
30c14     A7 2A 02 1B |  if_a	rdlong	local03, fp
30c18     1C 4E 05 11 |  if_a	add	fp, #28
30c1c     A7 2A 62 1C |  if_a	wrlong	local03, fp
30c20     28 4E 85 11 |  if_a	sub	fp, #40
30c24     34 4E 05 F1 | 	add	fp, #52
30c28     A7 12 02 FB | 	rdlong	arg01, fp
30c2c     30 4E 85 F1 | 	sub	fp, #48
30c30     A7 30 02 FB | 	rdlong	local06, fp
30c34     18 15 02 F6 | 	mov	arg02, local06
30c38     28 14 06 F1 | 	add	arg02, #40
30c3c     14 30 06 F1 | 	add	local06, #20
30c40     18 3B 02 FB | 	rdlong	local11, local06
30c44     1D 37 02 F6 | 	mov	local09, local11
30c48     1B 39 02 F6 | 	mov	local10, local09
30c4c     FF 39 06 F5 | 	and	local10, #511
30c50     1C 15 02 F1 | 	add	arg02, local10
30c54     24 4E 05 F1 | 	add	fp, #36
30c58     A7 16 02 FB | 	rdlong	arg03, fp
30c5c     28 4E 85 F1 | 	sub	fp, #40
30c60     90 41 BF FD | 	call	#__system____builtin_memmove
30c64                 | LR__4838
30c64     0C 4E 05 F1 | 	add	fp, #12
30c68     A7 2A 02 FB | 	rdlong	local03, fp
30c6c     1C 4E 05 F1 | 	add	fp, #28
30c70     A7 34 02 FB | 	rdlong	local08, fp
30c74     1A 2B 82 F1 | 	sub	local03, local08
30c78     1C 4E 85 F1 | 	sub	fp, #28
30c7c     A7 2A 62 FC | 	wrlong	local03, fp
30c80     04 4E 05 F1 | 	add	fp, #4
30c84     A7 26 02 FB | 	rdlong	local01, fp
30c88     13 33 02 FB | 	rdlong	local07, local01
30c8c     18 4E 05 F1 | 	add	fp, #24
30c90     A7 34 02 FB | 	rdlong	local08, fp
30c94     1A 33 02 F1 | 	add	local07, local08
30c98     13 33 62 FC | 	wrlong	local07, local01
30c9c     0C 4E 05 F1 | 	add	fp, #12
30ca0     A7 2A 02 FB | 	rdlong	local03, fp
30ca4     0C 4E 85 F1 | 	sub	fp, #12
30ca8     A7 3C 02 FB | 	rdlong	local12, fp
30cac     1E 2B 02 F1 | 	add	local03, local12
30cb0     0C 4E 05 F1 | 	add	fp, #12
30cb4     A7 2A 62 FC | 	wrlong	local03, fp
30cb8     30 4E 85 F1 | 	sub	fp, #48
30cbc     A7 3E 02 FB | 	rdlong	local13, fp
30cc0     1F 2B 02 F6 | 	mov	local03, local13
30cc4     14 3E 06 F1 | 	add	local13, #20
30cc8     1F 41 02 FB | 	rdlong	local14, local13
30ccc     24 4E 05 F1 | 	add	fp, #36
30cd0     A7 30 02 FB | 	rdlong	local06, fp
30cd4     28 4E 85 F1 | 	sub	fp, #40
30cd8     18 41 02 F1 | 	add	local14, local06
30cdc     14 2A 06 F1 | 	add	local03, #20
30ce0     15 41 62 FC | 	wrlong	local14, local03
30ce4     84 FA 9F FD | 	jmp	#LR__4822
30ce8                 | LR__4839
30ce8                 | ' 
30ce8                 | ' 
30ce8                 | ' 
30ce8                 | ' 
30ce8                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
30ce8                 | ' 
30ce8                 | ' 	}
30ce8                 | ' 
30ce8                 | ' 	return FR_OK ;
30ce8     00 FA 05 F6 | 	mov	result1, #0
30cec                 | LR__4840
30cec     A7 F0 03 F6 | 	mov	ptra, fp
30cf0     B2 00 A0 FD | 	call	#popregs_
30cf4                 | _fatfs_cc_f_read_ret
30cf4     2D 00 64 FD | 	ret
30cf8                 | 
30cf8                 | _fatfs_cc_f_write
30cf8     15 4A 05 F6 | 	mov	COUNT_, #21
30cfc     A8 00 A0 FD | 	call	#pushregs_
30d00     34 F0 07 F1 | 	add	ptra, #52
30d04     04 4E 05 F1 | 	add	fp, #4
30d08     A7 12 62 FC | 	wrlong	arg01, fp
30d0c     04 4E 05 F1 | 	add	fp, #4
30d10     A7 14 62 FC | 	wrlong	arg02, fp
30d14     04 4E 05 F1 | 	add	fp, #4
30d18     A7 16 62 FC | 	wrlong	arg03, fp
30d1c     04 4E 05 F1 | 	add	fp, #4
30d20     A7 18 62 FC | 	wrlong	arg04, fp
30d24     08 4E 85 F1 | 	sub	fp, #8
30d28     A7 FA 01 FB | 	rdlong	result1, fp
30d2c     28 4E 05 F1 | 	add	fp, #40
30d30     A7 FA 61 FC | 	wrlong	result1, fp
30d34     20 4E 85 F1 | 	sub	fp, #32
30d38     A7 FA 01 FB | 	rdlong	result1, fp
30d3c     FD 00 68 FC | 	wrlong	#0, result1
30d40     0C 4E 85 F1 | 	sub	fp, #12
30d44     A7 12 02 FB | 	rdlong	arg01, fp
30d48     14 4E 05 F1 | 	add	fp, #20
30d4c     A7 14 02 F6 | 	mov	arg02, fp
30d50     18 4E 85 F1 | 	sub	fp, #24
30d54     88 F0 BF FD | 	call	#_fatfs_cc_validate
30d58     14 4E 05 F1 | 	add	fp, #20
30d5c     A7 FA 61 FC | 	wrlong	result1, fp
30d60     00 FA 4D F2 | 	cmps	result1, #0 wz
30d64     14 4E 85 F1 | 	sub	fp, #20
30d68     20 00 90 5D |  if_ne	jmp	#LR__4850
30d6c     04 4E 05 F1 | 	add	fp, #4
30d70     A7 14 02 FB | 	rdlong	arg02, fp
30d74     11 14 06 F1 | 	add	arg02, #17
30d78     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
30d7c     10 4E 05 F1 | 	add	fp, #16
30d80     A7 14 62 FC | 	wrlong	arg02, fp
30d84     14 4E 85 F1 | 	sub	fp, #20
30d88     10 00 90 AD |  if_e	jmp	#LR__4851
30d8c                 | LR__4850
30d8c     14 4E 05 F1 | 	add	fp, #20
30d90     A7 FA 01 FB | 	rdlong	result1, fp
30d94     14 4E 85 F1 | 	sub	fp, #20
30d98     44 07 90 FD | 	jmp	#LR__4873
30d9c                 | LR__4851
30d9c     04 4E 05 F1 | 	add	fp, #4
30da0     A7 14 02 FB | 	rdlong	arg02, fp
30da4     04 4E 85 F1 | 	sub	fp, #4
30da8     10 14 06 F1 | 	add	arg02, #16
30dac     0A 15 C2 FA | 	rdbyte	arg02, arg02
30db0     02 14 CE F7 | 	test	arg02, #2 wz
30db4     07 FA 05 A6 |  if_e	mov	result1, #7
30db8     24 07 90 AD |  if_e	jmp	#LR__4873
30dbc     04 4E 05 F1 | 	add	fp, #4
30dc0     A7 14 02 FB | 	rdlong	arg02, fp
30dc4     0A 13 02 F6 | 	mov	arg01, arg02
30dc8     14 12 06 F1 | 	add	arg01, #20
30dcc     09 13 02 FB | 	rdlong	arg01, arg01
30dd0     08 4E 05 F1 | 	add	fp, #8
30dd4     A7 FA 01 FB | 	rdlong	result1, fp
30dd8     FD 12 02 F1 | 	add	arg01, result1
30ddc     0C 4E 85 F1 | 	sub	fp, #12
30de0     14 14 06 F1 | 	add	arg02, #20
30de4     0A FB 01 FB | 	rdlong	result1, arg02
30de8     FD 12 12 F2 | 	cmp	arg01, result1 wc
30dec     24 00 90 3D |  if_ae	jmp	#LR__4852
30df0     04 4E 05 F1 | 	add	fp, #4
30df4     A7 14 02 FB | 	rdlong	arg02, fp
30df8     01 FA 65 F6 | 	neg	result1, #1
30dfc     14 14 06 F1 | 	add	arg02, #20
30e00     0A 15 02 FB | 	rdlong	arg02, arg02
30e04     0A FB 81 F1 | 	sub	result1, arg02
30e08     08 4E 05 F1 | 	add	fp, #8
30e0c     A7 FA 61 FC | 	wrlong	result1, fp
30e10     0C 4E 85 F1 | 	sub	fp, #12
30e14                 | LR__4852
30e14                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
30e14                 | ' 	}
30e14                 | ' 
30e14                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
30e14                 | LR__4853
30e14     0C 4E 05 F1 | 	add	fp, #12
30e18     A7 FA 01 FB | 	rdlong	result1, fp
30e1c     0C 4E 85 F1 | 	sub	fp, #12
30e20     01 FA 15 F2 | 	cmp	result1, #1 wc
30e24     90 06 90 CD |  if_b	jmp	#LR__4872
30e28     04 4E 05 F1 | 	add	fp, #4
30e2c     A7 FA 01 FB | 	rdlong	result1, fp
30e30     04 4E 85 F1 | 	sub	fp, #4
30e34     14 FA 05 F1 | 	add	result1, #20
30e38     FD FA 01 FB | 	rdlong	result1, result1
30e3c     FF FB CD F7 | 	test	result1, #511 wz
30e40     D8 04 90 5D |  if_ne	jmp	#LR__4868
30e44     04 4E 05 F1 | 	add	fp, #4
30e48     A7 FA 01 FB | 	rdlong	result1, fp
30e4c     14 FA 05 F1 | 	add	result1, #20
30e50     FD FA 01 FB | 	rdlong	result1, result1
30e54     09 FA 45 F0 | 	shr	result1, #9
30e58     14 4E 05 F1 | 	add	fp, #20
30e5c     A7 14 02 FB | 	rdlong	arg02, fp
30e60     0A 14 06 F1 | 	add	arg02, #10
30e64     0A 19 E2 FA | 	rdword	arg04, arg02
30e68     0C 15 32 F9 | 	getword	arg02, arg04, #0
30e6c     01 14 86 F1 | 	sub	arg02, #1
30e70     0A FB 09 F5 | 	and	result1, arg02 wz
30e74     14 4E 05 F1 | 	add	fp, #20
30e78     A7 FA 61 FC | 	wrlong	result1, fp
30e7c     2C 4E 85 F1 | 	sub	fp, #44
30e80     44 01 90 5D |  if_ne	jmp	#LR__4859
30e84     04 4E 05 F1 | 	add	fp, #4
30e88     A7 FA 01 FB | 	rdlong	result1, fp
30e8c     04 4E 85 F1 | 	sub	fp, #4
30e90     14 FA 05 F1 | 	add	result1, #20
30e94     FD 14 0A FB | 	rdlong	arg02, result1 wz
30e98     44 00 90 5D |  if_ne	jmp	#LR__4854
30e9c     04 4E 05 F1 | 	add	fp, #4
30ea0     A7 14 02 FB | 	rdlong	arg02, fp
30ea4     08 14 06 F1 | 	add	arg02, #8
30ea8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
30eac     18 4E 05 F1 | 	add	fp, #24
30eb0     A7 14 62 FC | 	wrlong	arg02, fp
30eb4     1C 4E 85 F1 | 	sub	fp, #28
30eb8     4C 00 90 5D |  if_ne	jmp	#LR__4855
30ebc     04 4E 05 F1 | 	add	fp, #4
30ec0     A7 12 02 FB | 	rdlong	arg01, fp
30ec4     04 4E 85 F1 | 	sub	fp, #4
30ec8     00 14 06 F6 | 	mov	arg02, #0
30ecc     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
30ed0     1C 4E 05 F1 | 	add	fp, #28
30ed4     A7 FA 61 FC | 	wrlong	result1, fp
30ed8     1C 4E 85 F1 | 	sub	fp, #28
30edc     28 00 90 FD | 	jmp	#LR__4855
30ee0                 | LR__4854
30ee0     04 4E 05 F1 | 	add	fp, #4
30ee4     A7 18 02 FB | 	rdlong	arg04, fp
30ee8     0C 13 02 F6 | 	mov	arg01, arg04
30eec     04 4E 85 F1 | 	sub	fp, #4
30ef0     18 18 06 F1 | 	add	arg04, #24
30ef4     0C 15 02 FB | 	rdlong	arg02, arg04
30ef8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
30efc     1C 4E 05 F1 | 	add	fp, #28
30f00     A7 FA 61 FC | 	wrlong	result1, fp
30f04     1C 4E 85 F1 | 	sub	fp, #28
30f08                 | LR__4855
30f08     1C 4E 05 F1 | 	add	fp, #28
30f0c     A7 FA 09 FB | 	rdlong	result1, fp wz
30f10     1C 4E 85 F1 | 	sub	fp, #28
30f14     A0 05 90 AD |  if_e	jmp	#LR__4872
30f18     1C 4E 05 F1 | 	add	fp, #28
30f1c     A7 FA 01 FB | 	rdlong	result1, fp
30f20     1C 4E 85 F1 | 	sub	fp, #28
30f24     01 FA 0D F2 | 	cmp	result1, #1 wz
30f28     1C 00 90 5D |  if_ne	jmp	#LR__4856
30f2c     04 4E 05 F1 | 	add	fp, #4
30f30     A7 FA 01 FB | 	rdlong	result1, fp
30f34     04 4E 85 F1 | 	sub	fp, #4
30f38     11 FA 05 F1 | 	add	result1, #17
30f3c     FD 04 48 FC | 	wrbyte	#2, result1
30f40     02 FA 05 F6 | 	mov	result1, #2
30f44     98 05 90 FD | 	jmp	#LR__4873
30f48                 | LR__4856
30f48     1C 4E 05 F1 | 	add	fp, #28
30f4c     A7 FA 01 FB | 	rdlong	result1, fp
30f50     1C 4E 85 F1 | 	sub	fp, #28
30f54     FF FF 7F FF 
30f58     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30f5c     1C 00 90 5D |  if_ne	jmp	#LR__4857
30f60     04 4E 05 F1 | 	add	fp, #4
30f64     A7 FA 01 FB | 	rdlong	result1, fp
30f68     04 4E 85 F1 | 	sub	fp, #4
30f6c     11 FA 05 F1 | 	add	result1, #17
30f70     FD 02 48 FC | 	wrbyte	#1, result1
30f74     01 FA 05 F6 | 	mov	result1, #1
30f78     64 05 90 FD | 	jmp	#LR__4873
30f7c                 | LR__4857
30f7c     04 4E 05 F1 | 	add	fp, #4
30f80     A7 FA 01 FB | 	rdlong	result1, fp
30f84     18 4E 05 F1 | 	add	fp, #24
30f88     A7 18 02 FB | 	rdlong	arg04, fp
30f8c     18 FA 05 F1 | 	add	result1, #24
30f90     FD 18 62 FC | 	wrlong	arg04, result1
30f94     18 4E 85 F1 | 	sub	fp, #24
30f98     A7 FA 01 FB | 	rdlong	result1, fp
30f9c     04 4E 85 F1 | 	sub	fp, #4
30fa0     08 FA 05 F1 | 	add	result1, #8
30fa4     FD FA 09 FB | 	rdlong	result1, result1 wz
30fa8     1C 00 90 5D |  if_ne	jmp	#LR__4858
30fac     04 4E 05 F1 | 	add	fp, #4
30fb0     A7 18 02 FB | 	rdlong	arg04, fp
30fb4     18 4E 05 F1 | 	add	fp, #24
30fb8     A7 FA 01 FB | 	rdlong	result1, fp
30fbc     1C 4E 85 F1 | 	sub	fp, #28
30fc0     08 18 06 F1 | 	add	arg04, #8
30fc4     0C FB 61 FC | 	wrlong	result1, arg04
30fc8                 | LR__4858
30fc8                 | LR__4859
30fc8     04 4E 05 F1 | 	add	fp, #4
30fcc     A7 18 02 FB | 	rdlong	arg04, fp
30fd0     04 4E 85 F1 | 	sub	fp, #4
30fd4     10 18 06 F1 | 	add	arg04, #16
30fd8     0C 19 C2 FA | 	rdbyte	arg04, arg04
30fdc     80 18 CE F7 | 	test	arg04, #128 wz
30fe0     7C 00 90 AD |  if_e	jmp	#LR__4861
30fe4     18 4E 05 F1 | 	add	fp, #24
30fe8     A7 18 02 FB | 	rdlong	arg04, fp
30fec     01 18 06 F1 | 	add	arg04, #1
30ff0     0C 13 C2 FA | 	rdbyte	arg01, arg04
30ff4     14 4E 85 F1 | 	sub	fp, #20
30ff8     A7 18 02 FB | 	rdlong	arg04, fp
30ffc     0C 15 02 F6 | 	mov	arg02, arg04
31000     28 14 06 F1 | 	add	arg02, #40
31004     04 4E 85 F1 | 	sub	fp, #4
31008     1C 18 06 F1 | 	add	arg04, #28
3100c     0C 17 02 FB | 	rdlong	arg03, arg04
31010     01 18 06 F6 | 	mov	arg04, #1
31014     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
31018     00 FA 0D F2 | 	cmp	result1, #0 wz
3101c     1C 00 90 AD |  if_e	jmp	#LR__4860
31020     04 4E 05 F1 | 	add	fp, #4
31024     A7 FA 01 FB | 	rdlong	result1, fp
31028     04 4E 85 F1 | 	sub	fp, #4
3102c     11 FA 05 F1 | 	add	result1, #17
31030     FD 02 48 FC | 	wrbyte	#1, result1
31034     01 FA 05 F6 | 	mov	result1, #1
31038     A4 04 90 FD | 	jmp	#LR__4873
3103c                 | LR__4860
3103c     04 4E 05 F1 | 	add	fp, #4
31040     A7 18 02 FB | 	rdlong	arg04, fp
31044     0C FB 01 F6 | 	mov	result1, arg04
31048     04 4E 85 F1 | 	sub	fp, #4
3104c     10 18 06 F1 | 	add	arg04, #16
31050     0C 19 C2 FA | 	rdbyte	arg04, arg04
31054     7F 18 06 F5 | 	and	arg04, #127
31058     10 FA 05 F1 | 	add	result1, #16
3105c     FD 18 42 FC | 	wrbyte	arg04, result1
31060                 | LR__4861
31060     18 4E 05 F1 | 	add	fp, #24
31064     A7 12 02 FB | 	rdlong	arg01, fp
31068     14 4E 85 F1 | 	sub	fp, #20
3106c     A7 14 02 FB | 	rdlong	arg02, fp
31070     04 4E 85 F1 | 	sub	fp, #4
31074     18 14 06 F1 | 	add	arg02, #24
31078     0A 15 02 FB | 	rdlong	arg02, arg02
3107c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
31080     20 4E 05 F1 | 	add	fp, #32
31084     A7 FA 61 FC | 	wrlong	result1, fp
31088     20 4E 85 F1 | 	sub	fp, #32
3108c     00 FA 0D F2 | 	cmp	result1, #0 wz
31090     1C 00 90 5D |  if_ne	jmp	#LR__4862
31094     04 4E 05 F1 | 	add	fp, #4
31098     A7 FA 01 FB | 	rdlong	result1, fp
3109c     04 4E 85 F1 | 	sub	fp, #4
310a0     11 FA 05 F1 | 	add	result1, #17
310a4     FD 04 48 FC | 	wrbyte	#2, result1
310a8     02 FA 05 F6 | 	mov	result1, #2
310ac     30 04 90 FD | 	jmp	#LR__4873
310b0                 | LR__4862
310b0     20 4E 05 F1 | 	add	fp, #32
310b4     A7 FA 01 FB | 	rdlong	result1, fp
310b8     0C 4E 05 F1 | 	add	fp, #12
310bc     A7 26 02 FB | 	rdlong	local01, fp
310c0     13 FB 01 F1 | 	add	result1, local01
310c4     0C 4E 85 F1 | 	sub	fp, #12
310c8     A7 FA 61 FC | 	wrlong	result1, fp
310cc     14 4E 85 F1 | 	sub	fp, #20
310d0     A7 FA 01 FB | 	rdlong	result1, fp
310d4     09 FA 45 F0 | 	shr	result1, #9
310d8     1C 4E 05 F1 | 	add	fp, #28
310dc     A7 FA 61 FC | 	wrlong	result1, fp
310e0     28 4E 85 F1 | 	sub	fp, #40
310e4     01 FA 15 F2 | 	cmp	result1, #1 wc
310e8     60 01 90 CD |  if_b	jmp	#LR__4866
310ec     2C 4E 05 F1 | 	add	fp, #44
310f0     A7 FA 01 FB | 	rdlong	result1, fp
310f4     04 4E 85 F1 | 	sub	fp, #4
310f8     A7 18 02 FB | 	rdlong	arg04, fp
310fc     0C FB 01 F1 | 	add	result1, arg04
31100     10 4E 85 F1 | 	sub	fp, #16
31104     A7 18 02 FB | 	rdlong	arg04, fp
31108     18 4E 85 F1 | 	sub	fp, #24
3110c     0A 18 06 F1 | 	add	arg04, #10
31110     0C 19 E2 FA | 	rdword	arg04, arg04
31114     0C FB 19 F2 | 	cmp	result1, arg04 wcz
31118     28 00 90 ED |  if_be	jmp	#LR__4863
3111c     18 4E 05 F1 | 	add	fp, #24
31120     A7 FA 01 FB | 	rdlong	result1, fp
31124     0A FA 05 F1 | 	add	result1, #10
31128     FD FA E1 FA | 	rdword	result1, result1
3112c     14 4E 05 F1 | 	add	fp, #20
31130     A7 18 02 FB | 	rdlong	arg04, fp
31134     0C FB 81 F1 | 	sub	result1, arg04
31138     04 4E 85 F1 | 	sub	fp, #4
3113c     A7 FA 61 FC | 	wrlong	result1, fp
31140     28 4E 85 F1 | 	sub	fp, #40
31144                 | LR__4863
31144     18 4E 05 F1 | 	add	fp, #24
31148     A7 18 02 FB | 	rdlong	arg04, fp
3114c     01 18 06 F1 | 	add	arg04, #1
31150     0C 13 C2 FA | 	rdbyte	arg01, arg04
31154     18 4E 05 F1 | 	add	fp, #24
31158     A7 14 02 FB | 	rdlong	arg02, fp
3115c     10 4E 85 F1 | 	sub	fp, #16
31160     A7 16 02 FB | 	rdlong	arg03, fp
31164     08 4E 05 F1 | 	add	fp, #8
31168     A7 18 02 FB | 	rdlong	arg04, fp
3116c     28 4E 85 F1 | 	sub	fp, #40
31170     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
31174     00 FA 0D F2 | 	cmp	result1, #0 wz
31178     1C 00 90 AD |  if_e	jmp	#LR__4864
3117c     04 4E 05 F1 | 	add	fp, #4
31180     A7 26 02 FB | 	rdlong	local01, fp
31184     04 4E 85 F1 | 	sub	fp, #4
31188     11 26 06 F1 | 	add	local01, #17
3118c     13 03 48 FC | 	wrbyte	#1, local01
31190     01 FA 05 F6 | 	mov	result1, #1
31194     48 03 90 FD | 	jmp	#LR__4873
31198                 | LR__4864
31198     04 4E 05 F1 | 	add	fp, #4
3119c     A7 FA 01 FB | 	rdlong	result1, fp
311a0     1C FA 05 F1 | 	add	result1, #28
311a4     FD FA 01 FB | 	rdlong	result1, result1
311a8     1C 4E 05 F1 | 	add	fp, #28
311ac     A7 28 02 FB | 	rdlong	local02, fp
311b0     14 FB 81 F1 | 	sub	result1, local02
311b4     08 4E 05 F1 | 	add	fp, #8
311b8     A7 18 02 FB | 	rdlong	arg04, fp
311bc     28 4E 85 F1 | 	sub	fp, #40
311c0     0C FB 11 F2 | 	cmp	result1, arg04 wc
311c4     68 00 90 3D |  if_ae	jmp	#LR__4865
311c8     04 4E 05 F1 | 	add	fp, #4
311cc     A7 12 02 FB | 	rdlong	arg01, fp
311d0     28 12 06 F1 | 	add	arg01, #40
311d4     2C 4E 05 F1 | 	add	fp, #44
311d8     A7 14 02 FB | 	rdlong	arg02, fp
311dc     2C 4E 85 F1 | 	sub	fp, #44
311e0     A7 FA 01 FB | 	rdlong	result1, fp
311e4     1C FA 05 F1 | 	add	result1, #28
311e8     FD 2A 02 FB | 	rdlong	local03, result1
311ec     1C 4E 05 F1 | 	add	fp, #28
311f0     A7 18 02 FB | 	rdlong	arg04, fp
311f4     20 4E 85 F1 | 	sub	fp, #32
311f8     0C 2B 82 F1 | 	sub	local03, arg04
311fc     09 2A 66 F0 | 	shl	local03, #9
31200     15 15 02 F1 | 	add	arg02, local03
31204     09 16 C6 F9 | 	decod	arg03, #9
31208     E8 3B BF FD | 	call	#__system____builtin_memmove
3120c     04 4E 05 F1 | 	add	fp, #4
31210     A7 18 02 FB | 	rdlong	arg04, fp
31214     0C FB 01 F6 | 	mov	result1, arg04
31218     04 4E 85 F1 | 	sub	fp, #4
3121c     10 18 06 F1 | 	add	arg04, #16
31220     0C 19 C2 FA | 	rdbyte	arg04, arg04
31224     7F 18 06 F5 | 	and	arg04, #127
31228     10 FA 05 F1 | 	add	result1, #16
3122c     FD 18 42 FC | 	wrbyte	arg04, result1
31230                 | LR__4865
31230     28 4E 05 F1 | 	add	fp, #40
31234     A7 FA 01 FB | 	rdlong	result1, fp
31238     09 FA 65 F0 | 	shl	result1, #9
3123c     04 4E 85 F1 | 	sub	fp, #4
31240     A7 FA 61 FC | 	wrlong	result1, fp
31244     24 4E 85 F1 | 	sub	fp, #36
31248                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
31248                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
31248                 | ' 				}
31248                 | ' 
31248                 | ' 
31248                 | ' 				wcnt =  ((UINT) 512 )  * cc;
31248                 | ' 				continue;
31248     74 01 90 FD | 	jmp	#LR__4869
3124c                 | LR__4866
3124c     04 4E 05 F1 | 	add	fp, #4
31250     A7 28 02 FB | 	rdlong	local02, fp
31254     1C 28 06 F1 | 	add	local02, #28
31258     14 FB 01 FB | 	rdlong	result1, local02
3125c     1C 4E 05 F1 | 	add	fp, #28
31260     A7 28 02 FB | 	rdlong	local02, fp
31264     20 4E 85 F1 | 	sub	fp, #32
31268     14 FB 09 F2 | 	cmp	result1, local02 wz
3126c     90 00 90 AD |  if_e	jmp	#LR__4867
31270     04 4E 05 F1 | 	add	fp, #4
31274     A7 FA 01 FB | 	rdlong	result1, fp
31278     FD 2A 02 F6 | 	mov	local03, result1
3127c     04 4E 85 F1 | 	sub	fp, #4
31280     14 2A 06 F1 | 	add	local03, #20
31284     15 2B 02 FB | 	rdlong	local03, local03
31288     0C FA 05 F1 | 	add	result1, #12
3128c     FD 2C 02 FB | 	rdlong	local04, result1
31290     16 2F 02 F6 | 	mov	local05, local04
31294     17 2B 12 F2 | 	cmp	local03, local05 wc
31298     64 00 90 3D |  if_ae	jmp	#LR__4867
3129c     18 4E 05 F1 | 	add	fp, #24
312a0     A7 18 02 FB | 	rdlong	arg04, fp
312a4     01 18 06 F1 | 	add	arg04, #1
312a8     0C 13 C2 FA | 	rdbyte	arg01, arg04
312ac     14 4E 85 F1 | 	sub	fp, #20
312b0     A7 30 02 FB | 	rdlong	local06, fp
312b4     28 30 06 F1 | 	add	local06, #40
312b8     18 33 02 F6 | 	mov	local07, local06
312bc     1C 4E 05 F1 | 	add	fp, #28
312c0     A7 34 02 FB | 	rdlong	local08, fp
312c4     20 4E 85 F1 | 	sub	fp, #32
312c8     01 36 06 F6 | 	mov	local09, #1
312cc     19 15 02 F6 | 	mov	arg02, local07
312d0     1A 17 02 F6 | 	mov	arg03, local08
312d4     01 18 06 F6 | 	mov	arg04, #1
312d8     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
312dc     FD 38 0A F6 | 	mov	local10, result1 wz
312e0     1C 00 90 AD |  if_e	jmp	#LR__4867
312e4     04 4E 05 F1 | 	add	fp, #4
312e8     A7 38 02 FB | 	rdlong	local10, fp
312ec     04 4E 85 F1 | 	sub	fp, #4
312f0     11 38 06 F1 | 	add	local10, #17
312f4     1C 03 48 FC | 	wrbyte	#1, local10
312f8                 | ' 				fp->fptr < fp->obj.objsize &&
312f8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
312f8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
312f8     01 FA 05 F6 | 	mov	result1, #1
312fc     E0 01 90 FD | 	jmp	#LR__4873
31300                 | LR__4867
31300     04 4E 05 F1 | 	add	fp, #4
31304     A7 18 02 FB | 	rdlong	arg04, fp
31308     1C 4E 05 F1 | 	add	fp, #28
3130c     A7 FA 01 FB | 	rdlong	result1, fp
31310     20 4E 85 F1 | 	sub	fp, #32
31314     1C 18 06 F1 | 	add	arg04, #28
31318     0C FB 61 FC | 	wrlong	result1, arg04
3131c                 | LR__4868
3131c     04 4E 05 F1 | 	add	fp, #4
31320     A7 FA 01 FB | 	rdlong	result1, fp
31324     14 FA 05 F1 | 	add	result1, #20
31328     FD FA 01 FB | 	rdlong	result1, result1
3132c     FF FB 05 F5 | 	and	result1, #511
31330     09 3A C6 F9 | 	decod	local11, #9
31334     FD 3A 82 F1 | 	sub	local11, result1
31338     20 4E 05 F1 | 	add	fp, #32
3133c     A7 3A 62 FC | 	wrlong	local11, fp
31340     18 4E 85 F1 | 	sub	fp, #24
31344     A7 FA 01 FB | 	rdlong	result1, fp
31348     0C 4E 85 F1 | 	sub	fp, #12
3134c     FD 3A 1A F2 | 	cmp	local11, result1 wcz
31350     0C 4E 05 11 |  if_a	add	fp, #12
31354     A7 3A 02 1B |  if_a	rdlong	local11, fp
31358     18 4E 05 11 |  if_a	add	fp, #24
3135c     A7 3A 62 1C |  if_a	wrlong	local11, fp
31360     24 4E 85 11 |  if_a	sub	fp, #36
31364     04 4E 05 F1 | 	add	fp, #4
31368     A7 3A 02 FB | 	rdlong	local11, fp
3136c     1D 13 02 F6 | 	mov	arg01, local11
31370     28 12 06 F1 | 	add	arg01, #40
31374     14 3A 06 F1 | 	add	local11, #20
31378     1D 3B 02 FB | 	rdlong	local11, local11
3137c     FF 3B 06 F5 | 	and	local11, #511
31380     1D 13 02 F1 | 	add	arg01, local11
31384     2C 4E 05 F1 | 	add	fp, #44
31388     A7 14 02 FB | 	rdlong	arg02, fp
3138c     0C 4E 85 F1 | 	sub	fp, #12
31390     A7 16 02 FB | 	rdlong	arg03, fp
31394     24 4E 85 F1 | 	sub	fp, #36
31398     58 3A BF FD | 	call	#__system____builtin_memmove
3139c     04 4E 05 F1 | 	add	fp, #4
313a0     A7 FA 01 FB | 	rdlong	result1, fp
313a4     FD 3A 02 F6 | 	mov	local11, result1
313a8     04 4E 85 F1 | 	sub	fp, #4
313ac     10 FA 05 F1 | 	add	result1, #16
313b0     FD FA C1 FA | 	rdbyte	result1, result1
313b4     80 FA 45 F5 | 	or	result1, #128
313b8     10 3A 06 F1 | 	add	local11, #16
313bc     1D FB 41 FC | 	wrbyte	result1, local11
313c0                 | LR__4869
313c0     0C 4E 05 F1 | 	add	fp, #12
313c4     A7 3A 02 FB | 	rdlong	local11, fp
313c8     18 4E 05 F1 | 	add	fp, #24
313cc     A7 FA 01 FB | 	rdlong	result1, fp
313d0     FD 3A 82 F1 | 	sub	local11, result1
313d4     18 4E 85 F1 | 	sub	fp, #24
313d8     A7 3A 62 FC | 	wrlong	local11, fp
313dc     04 4E 05 F1 | 	add	fp, #4
313e0     A7 3C 02 FB | 	rdlong	local12, fp
313e4     1E 3B 02 FB | 	rdlong	local11, local12
313e8     14 4E 05 F1 | 	add	fp, #20
313ec     A7 3E 02 FB | 	rdlong	local13, fp
313f0     1F 3B 02 F1 | 	add	local11, local13
313f4     1E 3B 62 FC | 	wrlong	local11, local12
313f8     0C 4E 05 F1 | 	add	fp, #12
313fc     A7 3A 02 FB | 	rdlong	local11, fp
31400     0C 4E 85 F1 | 	sub	fp, #12
31404     A7 40 02 FB | 	rdlong	local14, fp
31408     20 3B 02 F1 | 	add	local11, local14
3140c     0C 4E 05 F1 | 	add	fp, #12
31410     A7 3A 62 FC | 	wrlong	local11, fp
31414     2C 4E 85 F1 | 	sub	fp, #44
31418     A7 42 02 FB | 	rdlong	local15, fp
3141c     21 3B 02 F6 | 	mov	local11, local15
31420     14 42 06 F1 | 	add	local15, #20
31424     21 43 02 FB | 	rdlong	local15, local15
31428     20 4E 05 F1 | 	add	fp, #32
3142c     A7 44 02 FB | 	rdlong	local16, fp
31430     22 43 02 F1 | 	add	local15, local16
31434     14 3A 06 F1 | 	add	local11, #20
31438     1D 43 62 FC | 	wrlong	local15, local11
3143c     20 4E 85 F1 | 	sub	fp, #32
31440     A7 46 02 FB | 	rdlong	local17, fp
31444     23 3B 02 F6 | 	mov	local11, local17
31448     23 49 02 F6 | 	mov	local18, local17
3144c     04 4E 85 F1 | 	sub	fp, #4
31450     14 46 06 F1 | 	add	local17, #20
31454     23 4B 02 FB | 	rdlong	local19, local17
31458     0C 48 06 F1 | 	add	local18, #12
3145c     24 4D 02 FB | 	rdlong	local20, local18
31460     26 4B 1A F2 | 	cmp	local19, local20 wcz
31464     24 00 90 ED |  if_be	jmp	#LR__4870
31468     04 4E 05 F1 | 	add	fp, #4
3146c     A7 2E 02 FB | 	rdlong	local05, fp
31470     04 4E 85 F1 | 	sub	fp, #4
31474     17 2B 02 F6 | 	mov	local03, local05
31478     14 2A 06 F1 | 	add	local03, #20
3147c     15 2D 02 FB | 	rdlong	local04, local03
31480     14 2A 86 F1 | 	sub	local03, #20
31484     16 4F 02 F6 | 	mov	local21, local04
31488     20 00 90 FD | 	jmp	#LR__4871
3148c                 | LR__4870
3148c     04 4E 05 F1 | 	add	fp, #4
31490     A7 32 02 FB | 	rdlong	local07, fp
31494     04 4E 85 F1 | 	sub	fp, #4
31498     19 39 02 F6 | 	mov	local10, local07
3149c     0C 38 06 F1 | 	add	local10, #12
314a0     1C 35 02 FB | 	rdlong	local08, local10
314a4     0C 38 86 F1 | 	sub	local10, #12
314a8     1A 4F 02 F6 | 	mov	local21, local08
314ac                 | LR__4871
314ac     0C 3A 06 F1 | 	add	local11, #12
314b0     1D 4F 62 FC | 	wrlong	local21, local11
314b4     5C F9 9F FD | 	jmp	#LR__4853
314b8                 | LR__4872
314b8     04 4E 05 F1 | 	add	fp, #4
314bc     A7 3C 02 FB | 	rdlong	local12, fp
314c0     1E 27 02 F6 | 	mov	local01, local12
314c4     04 4E 85 F1 | 	sub	fp, #4
314c8     10 3C 06 F1 | 	add	local12, #16
314cc     1E 3B C2 FA | 	rdbyte	local11, local12
314d0     40 3A 46 F5 | 	or	local11, #64
314d4     10 26 06 F1 | 	add	local01, #16
314d8     13 3B 42 FC | 	wrbyte	local11, local01
314dc                 | ' 
314dc                 | ' 
314dc                 | ' 
314dc                 | ' 
314dc                 | ' 
314dc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
314dc                 | ' 		fp->flag |=  0x80 ;
314dc                 | ' 
314dc                 | ' 	}
314dc                 | ' 
314dc                 | ' 	fp->flag |=  0x40 ;
314dc                 | ' 
314dc                 | ' 	return FR_OK ;
314dc     00 FA 05 F6 | 	mov	result1, #0
314e0                 | LR__4873
314e0     A7 F0 03 F6 | 	mov	ptra, fp
314e4     B2 00 A0 FD | 	call	#popregs_
314e8                 | _fatfs_cc_f_write_ret
314e8     2D 00 64 FD | 	ret
314ec                 | 
314ec                 | _fatfs_cc_f_sync
314ec     00 4A 05 F6 | 	mov	COUNT_, #0
314f0     A8 00 A0 FD | 	call	#pushregs_
314f4     18 F0 07 F1 | 	add	ptra, #24
314f8     04 4E 05 F1 | 	add	fp, #4
314fc     A7 12 62 FC | 	wrlong	arg01, fp
31500     08 4E 05 F1 | 	add	fp, #8
31504     A7 14 02 F6 | 	mov	arg02, fp
31508     0C 4E 85 F1 | 	sub	fp, #12
3150c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
31510     08 4E 05 F1 | 	add	fp, #8
31514     A7 FA 61 FC | 	wrlong	result1, fp
31518     08 4E 85 F1 | 	sub	fp, #8
3151c     00 FA 0D F2 | 	cmp	result1, #0 wz
31520     C0 01 90 5D |  if_ne	jmp	#LR__4883
31524     04 4E 05 F1 | 	add	fp, #4
31528     A7 18 02 FB | 	rdlong	arg04, fp
3152c     04 4E 85 F1 | 	sub	fp, #4
31530     10 18 06 F1 | 	add	arg04, #16
31534     0C 19 C2 FA | 	rdbyte	arg04, arg04
31538     40 18 CE F7 | 	test	arg04, #64 wz
3153c     A4 01 90 AD |  if_e	jmp	#LR__4882
31540     04 4E 05 F1 | 	add	fp, #4
31544     A7 18 02 FB | 	rdlong	arg04, fp
31548     04 4E 85 F1 | 	sub	fp, #4
3154c     10 18 06 F1 | 	add	arg04, #16
31550     0C 19 C2 FA | 	rdbyte	arg04, arg04
31554     80 18 CE F7 | 	test	arg04, #128 wz
31558     64 00 90 AD |  if_e	jmp	#LR__4880
3155c     0C 4E 05 F1 | 	add	fp, #12
31560     A7 18 02 FB | 	rdlong	arg04, fp
31564     01 18 06 F1 | 	add	arg04, #1
31568     0C 13 C2 FA | 	rdbyte	arg01, arg04
3156c     08 4E 85 F1 | 	sub	fp, #8
31570     A7 18 02 FB | 	rdlong	arg04, fp
31574     0C 15 02 F6 | 	mov	arg02, arg04
31578     28 14 06 F1 | 	add	arg02, #40
3157c     04 4E 85 F1 | 	sub	fp, #4
31580     1C 18 06 F1 | 	add	arg04, #28
31584     0C 17 02 FB | 	rdlong	arg03, arg04
31588     01 18 06 F6 | 	mov	arg04, #1
3158c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
31590     00 FA 0D F2 | 	cmp	result1, #0 wz
31594     01 FA 05 56 |  if_ne	mov	result1, #1
31598     54 01 90 5D |  if_ne	jmp	#LR__4884
3159c     04 4E 05 F1 | 	add	fp, #4
315a0     A7 18 02 FB | 	rdlong	arg04, fp
315a4     0C 17 02 F6 | 	mov	arg03, arg04
315a8     04 4E 85 F1 | 	sub	fp, #4
315ac     10 18 06 F1 | 	add	arg04, #16
315b0     0C 19 C2 FA | 	rdbyte	arg04, arg04
315b4     7F 18 06 F5 | 	and	arg04, #127
315b8     10 16 06 F1 | 	add	arg03, #16
315bc     0B 19 42 FC | 	wrbyte	arg04, arg03
315c0                 | LR__4880
315c0     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
315c4     10 4E 05 F1 | 	add	fp, #16
315c8     A7 FA 61 FC | 	wrlong	result1, fp
315cc     04 4E 85 F1 | 	sub	fp, #4
315d0     A7 12 02 FB | 	rdlong	arg01, fp
315d4     08 4E 85 F1 | 	sub	fp, #8
315d8     A7 18 02 FB | 	rdlong	arg04, fp
315dc     04 4E 85 F1 | 	sub	fp, #4
315e0     20 18 06 F1 | 	add	arg04, #32
315e4     0C 15 02 FB | 	rdlong	arg02, arg04
315e8     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
315ec     08 4E 05 F1 | 	add	fp, #8
315f0     A7 FA 61 FC | 	wrlong	result1, fp
315f4     08 4E 85 F1 | 	sub	fp, #8
315f8     00 FA 0D F2 | 	cmp	result1, #0 wz
315fc     E4 00 90 5D |  if_ne	jmp	#LR__4881
31600     04 4E 05 F1 | 	add	fp, #4
31604     A7 18 02 FB | 	rdlong	arg04, fp
31608     24 18 06 F1 | 	add	arg04, #36
3160c     0C 19 02 FB | 	rdlong	arg04, arg04
31610     10 4E 05 F1 | 	add	fp, #16
31614     A7 18 62 FC | 	wrlong	arg04, fp
31618     0C 17 02 F6 | 	mov	arg03, arg04
3161c     0B 16 06 F1 | 	add	arg03, #11
31620     0B 17 C2 FA | 	rdbyte	arg03, arg03
31624     20 16 46 F5 | 	or	arg03, #32
31628     0B 18 06 F1 | 	add	arg04, #11
3162c     0C 17 42 FC | 	wrbyte	arg03, arg04
31630     10 4E 85 F1 | 	sub	fp, #16
31634     A7 18 02 FB | 	rdlong	arg04, fp
31638     0C 13 02 FB | 	rdlong	arg01, arg04
3163c     10 4E 05 F1 | 	add	fp, #16
31640     A7 14 02 FB | 	rdlong	arg02, fp
31644     14 4E 85 F1 | 	sub	fp, #20
31648     08 18 06 F1 | 	add	arg04, #8
3164c     0C 17 02 FB | 	rdlong	arg03, arg04
31650     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
31654     14 4E 05 F1 | 	add	fp, #20
31658     A7 12 02 FB | 	rdlong	arg01, fp
3165c     1C 12 06 F1 | 	add	arg01, #28
31660     10 4E 85 F1 | 	sub	fp, #16
31664     A7 18 02 FB | 	rdlong	arg04, fp
31668     0C 18 06 F1 | 	add	arg04, #12
3166c     0C 15 02 FB | 	rdlong	arg02, arg04
31670     09 15 62 FC | 	wrlong	arg02, arg01
31674     10 4E 05 F1 | 	add	fp, #16
31678     A7 12 02 FB | 	rdlong	arg01, fp
3167c     16 12 06 F1 | 	add	arg01, #22
31680     04 4E 85 F1 | 	sub	fp, #4
31684     A7 14 02 FB | 	rdlong	arg02, fp
31688     09 15 62 FC | 	wrlong	arg02, arg01
3168c     04 4E 05 F1 | 	add	fp, #4
31690     A7 12 02 FB | 	rdlong	arg01, fp
31694     12 12 06 F1 | 	add	arg01, #18
31698     09 01 58 FC | 	wrword	#0, arg01
3169c     08 4E 85 F1 | 	sub	fp, #8
316a0     A7 18 02 FB | 	rdlong	arg04, fp
316a4     03 18 06 F1 | 	add	arg04, #3
316a8     0C 03 48 FC | 	wrbyte	#1, arg04
316ac     A7 12 02 FB | 	rdlong	arg01, fp
316b0     0C 4E 85 F1 | 	sub	fp, #12
316b4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
316b8     08 4E 05 F1 | 	add	fp, #8
316bc     A7 FA 61 FC | 	wrlong	result1, fp
316c0     04 4E 85 F1 | 	sub	fp, #4
316c4     A7 18 02 FB | 	rdlong	arg04, fp
316c8     0C 17 02 F6 | 	mov	arg03, arg04
316cc     04 4E 85 F1 | 	sub	fp, #4
316d0     10 18 06 F1 | 	add	arg04, #16
316d4     0C 19 C2 FA | 	rdbyte	arg04, arg04
316d8     BF 18 06 F5 | 	and	arg04, #191
316dc     10 16 06 F1 | 	add	arg03, #16
316e0     0B 19 42 FC | 	wrbyte	arg04, arg03
316e4                 | LR__4881
316e4                 | LR__4882
316e4                 | LR__4883
316e4                 | ' 					dir = fp->dir_ptr;
316e4                 | ' 					dir[ 11 ] |=  0x20 ;
316e4                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
316e4                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
316e4                 | ' 					st_dword(dir +  22 , tm);
316e4                 | ' 					st_word(dir +  18 , 0);
316e4                 | ' 					fs->wflag = 1;
316e4                 | ' 					res = sync_fs(fs);
316e4                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
316e4                 | ' 				}
316e4                 | ' 			}
316e4                 | ' 		}
316e4                 | ' 	}
316e4                 | ' 
316e4                 | ' 	return res ;
316e4     08 4E 05 F1 | 	add	fp, #8
316e8     A7 FA 01 FB | 	rdlong	result1, fp
316ec     08 4E 85 F1 | 	sub	fp, #8
316f0                 | LR__4884
316f0     A7 F0 03 F6 | 	mov	ptra, fp
316f4     B2 00 A0 FD | 	call	#popregs_
316f8                 | _fatfs_cc_f_sync_ret
316f8     2D 00 64 FD | 	ret
316fc                 | 
316fc                 | _fatfs_cc_f_close
316fc     01 4A 05 F6 | 	mov	COUNT_, #1
31700     A8 00 A0 FD | 	call	#pushregs_
31704     10 F0 07 F1 | 	add	ptra, #16
31708     04 4E 05 F1 | 	add	fp, #4
3170c     A7 12 62 FC | 	wrlong	arg01, fp
31710     04 4E 85 F1 | 	sub	fp, #4
31714     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
31718     08 4E 05 F1 | 	add	fp, #8
3171c     A7 FA 61 FC | 	wrlong	result1, fp
31720     08 4E 85 F1 | 	sub	fp, #8
31724     00 FA 0D F2 | 	cmp	result1, #0 wz
31728     38 00 90 5D |  if_ne	jmp	#LR__4890
3172c     04 4E 05 F1 | 	add	fp, #4
31730     A7 12 02 FB | 	rdlong	arg01, fp
31734     08 4E 05 F1 | 	add	fp, #8
31738     A7 14 02 F6 | 	mov	arg02, fp
3173c     0C 4E 85 F1 | 	sub	fp, #12
31740     9C E6 BF FD | 	call	#_fatfs_cc_validate
31744     08 4E 05 F1 | 	add	fp, #8
31748     A7 FA 61 FC | 	wrlong	result1, fp
3174c     08 4E 85 F1 | 	sub	fp, #8
31750     00 FA 0D F2 | 	cmp	result1, #0 wz
31754     04 4E 05 A1 |  if_e	add	fp, #4
31758     A7 26 02 AB |  if_e	rdlong	local01, fp
3175c     04 4E 85 A1 |  if_e	sub	fp, #4
31760     13 01 68 AC |  if_e	wrlong	#0, local01
31764                 | LR__4890
31764                 | ' 
31764                 | ' 
31764                 | ' 
31764                 | ' 
31764                 | ' 			fp->obj.fs = 0;
31764                 | ' #line 4192 "ff.c"
31764                 | ' 		}
31764                 | ' 	}
31764                 | ' 	return res;
31764     08 4E 05 F1 | 	add	fp, #8
31768     A7 FA 01 FB | 	rdlong	result1, fp
3176c     08 4E 85 F1 | 	sub	fp, #8
31770     A7 F0 03 F6 | 	mov	ptra, fp
31774     B2 00 A0 FD | 	call	#popregs_
31778                 | _fatfs_cc_f_close_ret
31778     2D 00 64 FD | 	ret
3177c                 | 
3177c                 | _fatfs_cc_f_lseek
3177c     00 4A 05 F6 | 	mov	COUNT_, #0
31780     A8 00 A0 FD | 	call	#pushregs_
31784     24 F0 07 F1 | 	add	ptra, #36
31788     04 4E 05 F1 | 	add	fp, #4
3178c     A7 12 62 FC | 	wrlong	arg01, fp
31790     04 4E 05 F1 | 	add	fp, #4
31794     A7 14 62 FC | 	wrlong	arg02, fp
31798     04 4E 85 F1 | 	sub	fp, #4
3179c     A7 12 02 FB | 	rdlong	arg01, fp
317a0     0C 4E 05 F1 | 	add	fp, #12
317a4     A7 14 02 F6 | 	mov	arg02, fp
317a8     10 4E 85 F1 | 	sub	fp, #16
317ac     30 E6 BF FD | 	call	#_fatfs_cc_validate
317b0     0C 4E 05 F1 | 	add	fp, #12
317b4     A7 FA 61 FC | 	wrlong	result1, fp
317b8     0C 4E 85 F1 | 	sub	fp, #12
317bc     00 FA 0D F2 | 	cmp	result1, #0 wz
317c0     1C 00 90 5D |  if_ne	jmp	#LR__4900
317c4     04 4E 05 F1 | 	add	fp, #4
317c8     A7 18 02 FB | 	rdlong	arg04, fp
317cc     11 18 06 F1 | 	add	arg04, #17
317d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
317d4     08 4E 05 F1 | 	add	fp, #8
317d8     A7 18 62 FC | 	wrlong	arg04, fp
317dc     0C 4E 85 F1 | 	sub	fp, #12
317e0                 | LR__4900
317e0     0C 4E 05 F1 | 	add	fp, #12
317e4     A7 18 0A FB | 	rdlong	arg04, fp wz
317e8     0C 4E 85 F1 | 	sub	fp, #12
317ec     0C 4E 05 51 |  if_ne	add	fp, #12
317f0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
317f4     0C 4E 85 51 |  if_ne	sub	fp, #12
317f8     40 06 90 5D |  if_ne	jmp	#LR__4923
317fc     04 4E 05 F1 | 	add	fp, #4
31800     A7 18 02 FB | 	rdlong	arg04, fp
31804     04 4E 05 F1 | 	add	fp, #4
31808     A7 16 02 FB | 	rdlong	arg03, fp
3180c     08 4E 85 F1 | 	sub	fp, #8
31810     0C 18 06 F1 | 	add	arg04, #12
31814     0C 19 02 FB | 	rdlong	arg04, arg04
31818     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
3181c     3C 00 90 ED |  if_be	jmp	#LR__4901
31820     04 4E 05 F1 | 	add	fp, #4
31824     A7 16 02 FB | 	rdlong	arg03, fp
31828     04 4E 85 F1 | 	sub	fp, #4
3182c     10 16 06 F1 | 	add	arg03, #16
31830     0B 17 C2 FA | 	rdbyte	arg03, arg03
31834     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
31838     02 16 CE F7 | 	test	arg03, #2 wz
3183c     1C 00 90 5D |  if_ne	jmp	#LR__4901
31840     04 4E 05 F1 | 	add	fp, #4
31844     A7 16 02 FB | 	rdlong	arg03, fp
31848     0C 16 06 F1 | 	add	arg03, #12
3184c     0B 17 02 FB | 	rdlong	arg03, arg03
31850     04 4E 05 F1 | 	add	fp, #4
31854     A7 16 62 FC | 	wrlong	arg03, fp
31858     08 4E 85 F1 | 	sub	fp, #8
3185c                 | LR__4901
3185c     04 4E 05 F1 | 	add	fp, #4
31860     A7 16 02 FB | 	rdlong	arg03, fp
31864     14 16 06 F1 | 	add	arg03, #20
31868     0B 17 02 FB | 	rdlong	arg03, arg03
3186c     1C 4E 05 F1 | 	add	fp, #28
31870     A7 16 62 FC | 	wrlong	arg03, fp
31874     1C 4E 85 F1 | 	sub	fp, #28
31878     A7 16 02 FB | 	rdlong	arg03, fp
3187c     18 4E 05 F1 | 	add	fp, #24
31880     A7 00 68 FC | 	wrlong	#0, fp
31884     14 16 06 F1 | 	add	arg03, #20
31888     0B 01 68 FC | 	wrlong	#0, arg03
3188c     14 4E 85 F1 | 	sub	fp, #20
31890     A7 16 02 FB | 	rdlong	arg03, fp
31894     08 4E 85 F1 | 	sub	fp, #8
31898     01 16 16 F2 | 	cmp	arg03, #1 wc
3189c     E4 03 90 CD |  if_b	jmp	#LR__4917
318a0     10 4E 05 F1 | 	add	fp, #16
318a4     A7 16 02 FB | 	rdlong	arg03, fp
318a8     0A 16 06 F1 | 	add	arg03, #10
318ac     0B 19 E2 FA | 	rdword	arg04, arg03
318b0     09 18 66 F0 | 	shl	arg04, #9
318b4     08 4E 05 F1 | 	add	fp, #8
318b8     A7 18 62 FC | 	wrlong	arg04, fp
318bc     08 4E 05 F1 | 	add	fp, #8
318c0     A7 18 02 FB | 	rdlong	arg04, fp
318c4     20 4E 85 F1 | 	sub	fp, #32
318c8     01 18 16 F2 | 	cmp	arg04, #1 wc
318cc     AC 00 90 CD |  if_b	jmp	#LR__4902
318d0     08 4E 05 F1 | 	add	fp, #8
318d4     A7 18 02 FB | 	rdlong	arg04, fp
318d8     01 18 86 F1 | 	sub	arg04, #1
318dc     10 4E 05 F1 | 	add	fp, #16
318e0     A7 16 02 FB | 	rdlong	arg03, fp
318e4     0B 19 12 FD | 	qdiv	arg04, arg03
318e8     08 4E 05 F1 | 	add	fp, #8
318ec     A7 FA 01 FB | 	rdlong	result1, fp
318f0     01 FA 85 F1 | 	sub	result1, #1
318f4     18 18 62 FD | 	getqx	arg04
318f8     0B FB 11 FD | 	qdiv	result1, arg03
318fc     20 4E 85 F1 | 	sub	fp, #32
31900     18 16 62 FD | 	getqx	arg03
31904     0B 19 12 F2 | 	cmp	arg04, arg03 wc
31908     70 00 90 CD |  if_b	jmp	#LR__4902
3190c     04 4E 05 F1 | 	add	fp, #4
31910     A7 16 02 FB | 	rdlong	arg03, fp
31914     1C 4E 05 F1 | 	add	fp, #28
31918     A7 FA 01 FB | 	rdlong	result1, fp
3191c     01 FA 85 F1 | 	sub	result1, #1
31920     08 4E 85 F1 | 	sub	fp, #8
31924     A7 18 02 FB | 	rdlong	arg04, fp
31928     01 18 86 F1 | 	sub	arg04, #1
3192c     0C FB 21 F5 | 	andn	result1, arg04
31930     14 16 06 F1 | 	add	arg03, #20
31934     0B FB 61 FC | 	wrlong	result1, arg03
31938     10 4E 85 F1 | 	sub	fp, #16
3193c     A7 16 02 FB | 	rdlong	arg03, fp
31940     04 4E 85 F1 | 	sub	fp, #4
31944     A7 18 02 FB | 	rdlong	arg04, fp
31948     14 18 06 F1 | 	add	arg04, #20
3194c     0C 19 02 FB | 	rdlong	arg04, arg04
31950     0C 17 82 F1 | 	sub	arg03, arg04
31954     04 4E 05 F1 | 	add	fp, #4
31958     A7 16 62 FC | 	wrlong	arg03, fp
3195c     04 4E 85 F1 | 	sub	fp, #4
31960     A7 16 02 FB | 	rdlong	arg03, fp
31964     18 16 06 F1 | 	add	arg03, #24
31968     0B 17 02 FB | 	rdlong	arg03, arg03
3196c     10 4E 05 F1 | 	add	fp, #16
31970     A7 16 62 FC | 	wrlong	arg03, fp
31974     14 4E 85 F1 | 	sub	fp, #20
31978     D0 00 90 FD | 	jmp	#LR__4906
3197c                 | LR__4902
3197c     04 4E 05 F1 | 	add	fp, #4
31980     A7 16 02 FB | 	rdlong	arg03, fp
31984     08 16 06 F1 | 	add	arg03, #8
31988     0B 17 0A FB | 	rdlong	arg03, arg03 wz
3198c     10 4E 05 F1 | 	add	fp, #16
31990     A7 16 62 FC | 	wrlong	arg03, fp
31994     14 4E 85 F1 | 	sub	fp, #20
31998     94 00 90 5D |  if_ne	jmp	#LR__4905
3199c     04 4E 05 F1 | 	add	fp, #4
319a0     A7 12 02 FB | 	rdlong	arg01, fp
319a4     04 4E 85 F1 | 	sub	fp, #4
319a8     00 14 06 F6 | 	mov	arg02, #0
319ac     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
319b0     14 4E 05 F1 | 	add	fp, #20
319b4     A7 FA 61 FC | 	wrlong	result1, fp
319b8     14 4E 85 F1 | 	sub	fp, #20
319bc     01 FA 0D F2 | 	cmp	result1, #1 wz
319c0     1C 00 90 5D |  if_ne	jmp	#LR__4903
319c4     04 4E 05 F1 | 	add	fp, #4
319c8     A7 16 02 FB | 	rdlong	arg03, fp
319cc     04 4E 85 F1 | 	sub	fp, #4
319d0     11 16 06 F1 | 	add	arg03, #17
319d4     0B 05 48 FC | 	wrbyte	#2, arg03
319d8     02 FA 05 F6 | 	mov	result1, #2
319dc     5C 04 90 FD | 	jmp	#LR__4923
319e0                 | LR__4903
319e0     14 4E 05 F1 | 	add	fp, #20
319e4     A7 FA 01 FB | 	rdlong	result1, fp
319e8     14 4E 85 F1 | 	sub	fp, #20
319ec     FF FF 7F FF 
319f0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
319f4     1C 00 90 5D |  if_ne	jmp	#LR__4904
319f8     04 4E 05 F1 | 	add	fp, #4
319fc     A7 16 02 FB | 	rdlong	arg03, fp
31a00     04 4E 85 F1 | 	sub	fp, #4
31a04     11 16 06 F1 | 	add	arg03, #17
31a08     0B 03 48 FC | 	wrbyte	#1, arg03
31a0c     01 FA 05 F6 | 	mov	result1, #1
31a10     28 04 90 FD | 	jmp	#LR__4923
31a14                 | LR__4904
31a14     04 4E 05 F1 | 	add	fp, #4
31a18     A7 16 02 FB | 	rdlong	arg03, fp
31a1c     10 4E 05 F1 | 	add	fp, #16
31a20     A7 18 02 FB | 	rdlong	arg04, fp
31a24     14 4E 85 F1 | 	sub	fp, #20
31a28     08 16 06 F1 | 	add	arg03, #8
31a2c     0B 19 62 FC | 	wrlong	arg04, arg03
31a30                 | LR__4905
31a30     04 4E 05 F1 | 	add	fp, #4
31a34     A7 16 02 FB | 	rdlong	arg03, fp
31a38     10 4E 05 F1 | 	add	fp, #16
31a3c     A7 18 02 FB | 	rdlong	arg04, fp
31a40     14 4E 85 F1 | 	sub	fp, #20
31a44     18 16 06 F1 | 	add	arg03, #24
31a48     0B 19 62 FC | 	wrlong	arg04, arg03
31a4c                 | LR__4906
31a4c     14 4E 05 F1 | 	add	fp, #20
31a50     A7 16 0A FB | 	rdlong	arg03, fp wz
31a54     14 4E 85 F1 | 	sub	fp, #20
31a58     28 02 90 AD |  if_e	jmp	#LR__4916
31a5c                 | ' 				while (ofs > bcs) {
31a5c                 | LR__4907
31a5c     08 4E 05 F1 | 	add	fp, #8
31a60     A7 18 02 FB | 	rdlong	arg04, fp
31a64     10 4E 05 F1 | 	add	fp, #16
31a68     A7 16 02 FB | 	rdlong	arg03, fp
31a6c     18 4E 85 F1 | 	sub	fp, #24
31a70     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
31a74     68 01 90 ED |  if_be	jmp	#LR__4913
31a78     08 4E 05 F1 | 	add	fp, #8
31a7c     A7 18 02 FB | 	rdlong	arg04, fp
31a80     10 4E 05 F1 | 	add	fp, #16
31a84     A7 16 02 FB | 	rdlong	arg03, fp
31a88     0B 19 82 F1 | 	sub	arg04, arg03
31a8c     10 4E 85 F1 | 	sub	fp, #16
31a90     A7 18 62 FC | 	wrlong	arg04, fp
31a94     04 4E 85 F1 | 	sub	fp, #4
31a98     A7 18 02 FB | 	rdlong	arg04, fp
31a9c     0C FB 01 F6 | 	mov	result1, arg04
31aa0     14 18 06 F1 | 	add	arg04, #20
31aa4     0C 19 02 FB | 	rdlong	arg04, arg04
31aa8     14 4E 05 F1 | 	add	fp, #20
31aac     A7 16 02 FB | 	rdlong	arg03, fp
31ab0     0B 19 02 F1 | 	add	arg04, arg03
31ab4     14 FA 05 F1 | 	add	result1, #20
31ab8     FD 18 62 FC | 	wrlong	arg04, result1
31abc     14 4E 85 F1 | 	sub	fp, #20
31ac0     A7 16 02 FB | 	rdlong	arg03, fp
31ac4     04 4E 85 F1 | 	sub	fp, #4
31ac8     10 16 06 F1 | 	add	arg03, #16
31acc     0B 17 C2 FA | 	rdbyte	arg03, arg03
31ad0     02 16 CE F7 | 	test	arg03, #2 wz
31ad4     3C 00 90 AD |  if_e	jmp	#LR__4908
31ad8     04 4E 05 F1 | 	add	fp, #4
31adc     A7 12 02 FB | 	rdlong	arg01, fp
31ae0     10 4E 05 F1 | 	add	fp, #16
31ae4     A7 14 02 FB | 	rdlong	arg02, fp
31ae8     14 4E 85 F1 | 	sub	fp, #20
31aec     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
31af0     14 4E 05 F1 | 	add	fp, #20
31af4     A7 FA 61 FC | 	wrlong	result1, fp
31af8     00 FA 4D F2 | 	cmps	result1, #0 wz
31afc     14 4E 85 F1 | 	sub	fp, #20
31b00     08 4E 05 A1 |  if_e	add	fp, #8
31b04     A7 00 68 AC |  if_e	wrlong	#0, fp
31b08     08 4E 85 A1 |  if_e	sub	fp, #8
31b0c                 | ' 							ofs = 0; break;
31b0c     D0 00 90 AD |  if_e	jmp	#LR__4913
31b10     24 00 90 FD | 	jmp	#LR__4909
31b14                 | LR__4908
31b14     04 4E 05 F1 | 	add	fp, #4
31b18     A7 12 02 FB | 	rdlong	arg01, fp
31b1c     10 4E 05 F1 | 	add	fp, #16
31b20     A7 14 02 FB | 	rdlong	arg02, fp
31b24     14 4E 85 F1 | 	sub	fp, #20
31b28     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
31b2c     14 4E 05 F1 | 	add	fp, #20
31b30     A7 FA 61 FC | 	wrlong	result1, fp
31b34     14 4E 85 F1 | 	sub	fp, #20
31b38                 | LR__4909
31b38     14 4E 05 F1 | 	add	fp, #20
31b3c     A7 16 02 FB | 	rdlong	arg03, fp
31b40     14 4E 85 F1 | 	sub	fp, #20
31b44     FF FF 7F FF 
31b48     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
31b4c     1C 00 90 5D |  if_ne	jmp	#LR__4910
31b50     04 4E 05 F1 | 	add	fp, #4
31b54     A7 16 02 FB | 	rdlong	arg03, fp
31b58     04 4E 85 F1 | 	sub	fp, #4
31b5c     11 16 06 F1 | 	add	arg03, #17
31b60     0B 03 48 FC | 	wrbyte	#1, arg03
31b64     01 FA 05 F6 | 	mov	result1, #1
31b68     D0 02 90 FD | 	jmp	#LR__4923
31b6c                 | LR__4910
31b6c     14 4E 05 F1 | 	add	fp, #20
31b70     A7 16 02 FB | 	rdlong	arg03, fp
31b74     14 4E 85 F1 | 	sub	fp, #20
31b78     02 16 16 F2 | 	cmp	arg03, #2 wc
31b7c     24 00 90 CD |  if_b	jmp	#LR__4911
31b80     10 4E 05 F1 | 	add	fp, #16
31b84     A7 18 02 FB | 	rdlong	arg04, fp
31b88     04 4E 05 F1 | 	add	fp, #4
31b8c     A7 16 02 FB | 	rdlong	arg03, fp
31b90     14 4E 85 F1 | 	sub	fp, #20
31b94     18 18 06 F1 | 	add	arg04, #24
31b98     0C 19 02 FB | 	rdlong	arg04, arg04
31b9c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
31ba0     1C 00 90 CD |  if_b	jmp	#LR__4912
31ba4                 | LR__4911
31ba4     04 4E 05 F1 | 	add	fp, #4
31ba8     A7 16 02 FB | 	rdlong	arg03, fp
31bac     04 4E 85 F1 | 	sub	fp, #4
31bb0     11 16 06 F1 | 	add	arg03, #17
31bb4     0B 05 48 FC | 	wrbyte	#2, arg03
31bb8     02 FA 05 F6 | 	mov	result1, #2
31bbc     7C 02 90 FD | 	jmp	#LR__4923
31bc0                 | LR__4912
31bc0     04 4E 05 F1 | 	add	fp, #4
31bc4     A7 18 02 FB | 	rdlong	arg04, fp
31bc8     10 4E 05 F1 | 	add	fp, #16
31bcc     A7 16 02 FB | 	rdlong	arg03, fp
31bd0     14 4E 85 F1 | 	sub	fp, #20
31bd4     18 18 06 F1 | 	add	arg04, #24
31bd8     0C 17 62 FC | 	wrlong	arg03, arg04
31bdc     7C FE 9F FD | 	jmp	#LR__4907
31be0                 | LR__4913
31be0     04 4E 05 F1 | 	add	fp, #4
31be4     A7 16 02 FB | 	rdlong	arg03, fp
31be8     0B 13 02 F6 | 	mov	arg01, arg03
31bec     14 16 06 F1 | 	add	arg03, #20
31bf0     0B 15 02 FB | 	rdlong	arg02, arg03
31bf4     04 4E 05 F1 | 	add	fp, #4
31bf8     A7 16 02 FB | 	rdlong	arg03, fp
31bfc     0B 15 02 F1 | 	add	arg02, arg03
31c00     14 12 06 F1 | 	add	arg01, #20
31c04     09 15 62 FC | 	wrlong	arg02, arg01
31c08     A7 16 02 FB | 	rdlong	arg03, fp
31c0c     08 4E 85 F1 | 	sub	fp, #8
31c10     FF 17 CE F7 | 	test	arg03, #511 wz
31c14     6C 00 90 AD |  if_e	jmp	#LR__4915
31c18     10 4E 05 F1 | 	add	fp, #16
31c1c     A7 12 02 FB | 	rdlong	arg01, fp
31c20     04 4E 05 F1 | 	add	fp, #4
31c24     A7 14 02 FB | 	rdlong	arg02, fp
31c28     14 4E 85 F1 | 	sub	fp, #20
31c2c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
31c30     1C 4E 05 F1 | 	add	fp, #28
31c34     A7 FA 61 FC | 	wrlong	result1, fp
31c38     1C 4E 85 F1 | 	sub	fp, #28
31c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
31c40     1C 00 90 5D |  if_ne	jmp	#LR__4914
31c44     04 4E 05 F1 | 	add	fp, #4
31c48     A7 16 02 FB | 	rdlong	arg03, fp
31c4c     04 4E 85 F1 | 	sub	fp, #4
31c50     11 16 06 F1 | 	add	arg03, #17
31c54     0B 05 48 FC | 	wrbyte	#2, arg03
31c58     02 FA 05 F6 | 	mov	result1, #2
31c5c     DC 01 90 FD | 	jmp	#LR__4923
31c60                 | LR__4914
31c60     1C 4E 05 F1 | 	add	fp, #28
31c64     A7 18 02 FB | 	rdlong	arg04, fp
31c68     14 4E 85 F1 | 	sub	fp, #20
31c6c     A7 16 02 FB | 	rdlong	arg03, fp
31c70     09 16 46 F0 | 	shr	arg03, #9
31c74     0B 19 02 F1 | 	add	arg04, arg03
31c78     14 4E 05 F1 | 	add	fp, #20
31c7c     A7 18 62 FC | 	wrlong	arg04, fp
31c80     1C 4E 85 F1 | 	sub	fp, #28
31c84                 | LR__4915
31c84                 | LR__4916
31c84                 | LR__4917
31c84     04 4E 05 F1 | 	add	fp, #4
31c88     A7 18 02 FB | 	rdlong	arg04, fp
31c8c     0C 17 02 F6 | 	mov	arg03, arg04
31c90     04 4E 85 F1 | 	sub	fp, #4
31c94     14 16 06 F1 | 	add	arg03, #20
31c98     0B 17 02 FB | 	rdlong	arg03, arg03
31c9c     0C 18 06 F1 | 	add	arg04, #12
31ca0     0C 19 02 FB | 	rdlong	arg04, arg04
31ca4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
31ca8     3C 00 90 ED |  if_be	jmp	#LR__4918
31cac     04 4E 05 F1 | 	add	fp, #4
31cb0     A7 18 02 FB | 	rdlong	arg04, fp
31cb4     0C 17 02 F6 | 	mov	arg03, arg04
31cb8     14 18 06 F1 | 	add	arg04, #20
31cbc     0C 19 02 FB | 	rdlong	arg04, arg04
31cc0     0C 16 06 F1 | 	add	arg03, #12
31cc4     0B 19 62 FC | 	wrlong	arg04, arg03
31cc8     A7 18 02 FB | 	rdlong	arg04, fp
31ccc     0C 17 02 F6 | 	mov	arg03, arg04
31cd0     04 4E 85 F1 | 	sub	fp, #4
31cd4     10 18 06 F1 | 	add	arg04, #16
31cd8     0C 19 C2 FA | 	rdbyte	arg04, arg04
31cdc     40 18 46 F5 | 	or	arg04, #64
31ce0     10 16 06 F1 | 	add	arg03, #16
31ce4     0B 19 42 FC | 	wrbyte	arg04, arg03
31ce8                 | LR__4918
31ce8     04 4E 05 F1 | 	add	fp, #4
31cec     A7 16 02 FB | 	rdlong	arg03, fp
31cf0     04 4E 85 F1 | 	sub	fp, #4
31cf4     14 16 06 F1 | 	add	arg03, #20
31cf8     0B 17 02 FB | 	rdlong	arg03, arg03
31cfc     FF 17 CE F7 | 	test	arg03, #511 wz
31d00     2C 01 90 AD |  if_e	jmp	#LR__4922
31d04     04 4E 05 F1 | 	add	fp, #4
31d08     A7 18 02 FB | 	rdlong	arg04, fp
31d0c     18 4E 05 F1 | 	add	fp, #24
31d10     A7 16 02 FB | 	rdlong	arg03, fp
31d14     1C 4E 85 F1 | 	sub	fp, #28
31d18     1C 18 06 F1 | 	add	arg04, #28
31d1c     0C 19 02 FB | 	rdlong	arg04, arg04
31d20     0C 17 0A F2 | 	cmp	arg03, arg04 wz
31d24     08 01 90 AD |  if_e	jmp	#LR__4922
31d28     04 4E 05 F1 | 	add	fp, #4
31d2c     A7 16 02 FB | 	rdlong	arg03, fp
31d30     04 4E 85 F1 | 	sub	fp, #4
31d34     10 16 06 F1 | 	add	arg03, #16
31d38     0B 17 C2 FA | 	rdbyte	arg03, arg03
31d3c     80 16 CE F7 | 	test	arg03, #128 wz
31d40     7C 00 90 AD |  if_e	jmp	#LR__4920
31d44     10 4E 05 F1 | 	add	fp, #16
31d48     A7 16 02 FB | 	rdlong	arg03, fp
31d4c     01 16 06 F1 | 	add	arg03, #1
31d50     0B 13 C2 FA | 	rdbyte	arg01, arg03
31d54     0C 4E 85 F1 | 	sub	fp, #12
31d58     A7 16 02 FB | 	rdlong	arg03, fp
31d5c     0B 15 02 F6 | 	mov	arg02, arg03
31d60     28 14 06 F1 | 	add	arg02, #40
31d64     04 4E 85 F1 | 	sub	fp, #4
31d68     1C 16 06 F1 | 	add	arg03, #28
31d6c     0B 17 02 FB | 	rdlong	arg03, arg03
31d70     01 18 06 F6 | 	mov	arg04, #1
31d74     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
31d78     00 FA 0D F2 | 	cmp	result1, #0 wz
31d7c     1C 00 90 AD |  if_e	jmp	#LR__4919
31d80     04 4E 05 F1 | 	add	fp, #4
31d84     A7 16 02 FB | 	rdlong	arg03, fp
31d88     04 4E 85 F1 | 	sub	fp, #4
31d8c     11 16 06 F1 | 	add	arg03, #17
31d90     0B 03 48 FC | 	wrbyte	#1, arg03
31d94     01 FA 05 F6 | 	mov	result1, #1
31d98     A0 00 90 FD | 	jmp	#LR__4923
31d9c                 | LR__4919
31d9c     04 4E 05 F1 | 	add	fp, #4
31da0     A7 18 02 FB | 	rdlong	arg04, fp
31da4     0C 17 02 F6 | 	mov	arg03, arg04
31da8     04 4E 85 F1 | 	sub	fp, #4
31dac     10 18 06 F1 | 	add	arg04, #16
31db0     0C 19 C2 FA | 	rdbyte	arg04, arg04
31db4     7F 18 06 F5 | 	and	arg04, #127
31db8     10 16 06 F1 | 	add	arg03, #16
31dbc     0B 19 42 FC | 	wrbyte	arg04, arg03
31dc0                 | LR__4920
31dc0     10 4E 05 F1 | 	add	fp, #16
31dc4     A7 16 02 FB | 	rdlong	arg03, fp
31dc8     01 16 06 F1 | 	add	arg03, #1
31dcc     0B 13 C2 FA | 	rdbyte	arg01, arg03
31dd0     0C 4E 85 F1 | 	sub	fp, #12
31dd4     A7 14 02 FB | 	rdlong	arg02, fp
31dd8     28 14 06 F1 | 	add	arg02, #40
31ddc     18 4E 05 F1 | 	add	fp, #24
31de0     A7 16 02 FB | 	rdlong	arg03, fp
31de4     1C 4E 85 F1 | 	sub	fp, #28
31de8     01 18 06 F6 | 	mov	arg04, #1
31dec     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
31df0     00 FA 0D F2 | 	cmp	result1, #0 wz
31df4     1C 00 90 AD |  if_e	jmp	#LR__4921
31df8     04 4E 05 F1 | 	add	fp, #4
31dfc     A7 16 02 FB | 	rdlong	arg03, fp
31e00     04 4E 85 F1 | 	sub	fp, #4
31e04     11 16 06 F1 | 	add	arg03, #17
31e08     0B 03 48 FC | 	wrbyte	#1, arg03
31e0c     01 FA 05 F6 | 	mov	result1, #1
31e10     28 00 90 FD | 	jmp	#LR__4923
31e14                 | LR__4921
31e14     04 4E 05 F1 | 	add	fp, #4
31e18     A7 18 02 FB | 	rdlong	arg04, fp
31e1c     18 4E 05 F1 | 	add	fp, #24
31e20     A7 16 02 FB | 	rdlong	arg03, fp
31e24     1C 4E 85 F1 | 	sub	fp, #28
31e28     1C 18 06 F1 | 	add	arg04, #28
31e2c     0C 17 62 FC | 	wrlong	arg03, arg04
31e30                 | LR__4922
31e30                 | ' 
31e30                 | ' 			fp->sect = nsect;
31e30                 | ' 		}
31e30                 | ' 	}
31e30                 | ' 
31e30                 | ' 	return res ;
31e30     0C 4E 05 F1 | 	add	fp, #12
31e34     A7 FA 01 FB | 	rdlong	result1, fp
31e38     0C 4E 85 F1 | 	sub	fp, #12
31e3c                 | LR__4923
31e3c     A7 F0 03 F6 | 	mov	ptra, fp
31e40     B2 00 A0 FD | 	call	#popregs_
31e44                 | _fatfs_cc_f_lseek_ret
31e44     2D 00 64 FD | 	ret
31e48                 | 
31e48                 | _fatfs_cc_f_opendir
31e48     01 4A 05 F6 | 	mov	COUNT_, #1
31e4c     A8 00 A0 FD | 	call	#pushregs_
31e50     14 F0 07 F1 | 	add	ptra, #20
31e54     04 4E 05 F1 | 	add	fp, #4
31e58     A7 12 62 FC | 	wrlong	arg01, fp
31e5c     04 4E 05 F1 | 	add	fp, #4
31e60     A7 14 62 FC | 	wrlong	arg02, fp
31e64     04 4E 85 F1 | 	sub	fp, #4
31e68     A7 16 0A FB | 	rdlong	arg03, fp wz
31e6c     04 4E 85 F1 | 	sub	fp, #4
31e70     09 FA 05 A6 |  if_e	mov	result1, #9
31e74     78 01 90 AD |  if_e	jmp	#LR__4936
31e78     08 4E 05 F1 | 	add	fp, #8
31e7c     A7 12 02 F6 | 	mov	arg01, fp
31e80     08 4E 05 F1 | 	add	fp, #8
31e84     A7 14 02 F6 | 	mov	arg02, fp
31e88     10 4E 85 F1 | 	sub	fp, #16
31e8c     00 16 06 F6 | 	mov	arg03, #0
31e90     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
31e94     0C 4E 05 F1 | 	add	fp, #12
31e98     A7 FA 61 FC | 	wrlong	result1, fp
31e9c     0C 4E 85 F1 | 	sub	fp, #12
31ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
31ea4     20 01 90 5D |  if_ne	jmp	#LR__4935
31ea8     04 4E 05 F1 | 	add	fp, #4
31eac     A7 16 02 FB | 	rdlong	arg03, fp
31eb0     0C 4E 05 F1 | 	add	fp, #12
31eb4     A7 FA 01 FB | 	rdlong	result1, fp
31eb8     0B FB 61 FC | 	wrlong	result1, arg03
31ebc     0C 4E 85 F1 | 	sub	fp, #12
31ec0     A7 12 02 FB | 	rdlong	arg01, fp
31ec4     04 4E 05 F1 | 	add	fp, #4
31ec8     A7 14 02 FB | 	rdlong	arg02, fp
31ecc     08 4E 85 F1 | 	sub	fp, #8
31ed0     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
31ed4     0C 4E 05 F1 | 	add	fp, #12
31ed8     A7 FA 61 FC | 	wrlong	result1, fp
31edc     0C 4E 85 F1 | 	sub	fp, #12
31ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
31ee4     C4 00 90 5D |  if_ne	jmp	#LR__4934
31ee8     04 4E 05 F1 | 	add	fp, #4
31eec     A7 16 02 FB | 	rdlong	arg03, fp
31ef0     04 4E 85 F1 | 	sub	fp, #4
31ef4     2B 16 06 F1 | 	add	arg03, #43
31ef8     0B 17 C2 FA | 	rdbyte	arg03, arg03
31efc     80 16 CE F7 | 	test	arg03, #128 wz
31f00     58 00 90 5D |  if_ne	jmp	#LR__4932
31f04     04 4E 05 F1 | 	add	fp, #4
31f08     A7 16 02 FB | 	rdlong	arg03, fp
31f0c     04 4E 85 F1 | 	sub	fp, #4
31f10     06 16 06 F1 | 	add	arg03, #6
31f14     0B 17 C2 FA | 	rdbyte	arg03, arg03
31f18     10 16 CE F7 | 	test	arg03, #16 wz
31f1c     30 00 90 AD |  if_e	jmp	#LR__4930
31f20     04 4E 05 F1 | 	add	fp, #4
31f24     A7 16 02 FB | 	rdlong	arg03, fp
31f28     0B 27 02 F6 | 	mov	local01, arg03
31f2c     0C 4E 05 F1 | 	add	fp, #12
31f30     A7 12 02 FB | 	rdlong	arg01, fp
31f34     10 4E 85 F1 | 	sub	fp, #16
31f38     1C 16 06 F1 | 	add	arg03, #28
31f3c     0B 15 02 FB | 	rdlong	arg02, arg03
31f40     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
31f44     08 26 06 F1 | 	add	local01, #8
31f48     13 FB 61 FC | 	wrlong	result1, local01
31f4c     0C 00 90 FD | 	jmp	#LR__4931
31f50                 | LR__4930
31f50     0C 4E 05 F1 | 	add	fp, #12
31f54     A7 0A 68 FC | 	wrlong	#5, fp
31f58     0C 4E 85 F1 | 	sub	fp, #12
31f5c                 | LR__4931
31f5c                 | LR__4932
31f5c     0C 4E 05 F1 | 	add	fp, #12
31f60     A7 26 0A FB | 	rdlong	local01, fp wz
31f64     0C 4E 85 F1 | 	sub	fp, #12
31f68     40 00 90 5D |  if_ne	jmp	#LR__4933
31f6c     04 4E 05 F1 | 	add	fp, #4
31f70     A7 26 02 FB | 	rdlong	local01, fp
31f74     0C 4E 05 F1 | 	add	fp, #12
31f78     A7 16 02 FB | 	rdlong	arg03, fp
31f7c     06 16 06 F1 | 	add	arg03, #6
31f80     0B 17 E2 FA | 	rdword	arg03, arg03
31f84     04 26 06 F1 | 	add	local01, #4
31f88     13 17 52 FC | 	wrword	arg03, local01
31f8c     0C 4E 85 F1 | 	sub	fp, #12
31f90     A7 12 02 FB | 	rdlong	arg01, fp
31f94     04 4E 85 F1 | 	sub	fp, #4
31f98     00 14 06 F6 | 	mov	arg02, #0
31f9c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
31fa0     0C 4E 05 F1 | 	add	fp, #12
31fa4     A7 FA 61 FC | 	wrlong	result1, fp
31fa8     0C 4E 85 F1 | 	sub	fp, #12
31fac                 | LR__4933
31fac                 | LR__4934
31fac     0C 4E 05 F1 | 	add	fp, #12
31fb0     A7 26 02 FB | 	rdlong	local01, fp
31fb4     0C 4E 85 F1 | 	sub	fp, #12
31fb8     04 26 0E F2 | 	cmp	local01, #4 wz
31fbc     0C 4E 05 A1 |  if_e	add	fp, #12
31fc0     A7 0A 68 AC |  if_e	wrlong	#5, fp
31fc4     0C 4E 85 A1 |  if_e	sub	fp, #12
31fc8                 | LR__4935
31fc8     0C 4E 05 F1 | 	add	fp, #12
31fcc     A7 26 0A FB | 	rdlong	local01, fp wz
31fd0     0C 4E 85 F1 | 	sub	fp, #12
31fd4     04 4E 05 51 |  if_ne	add	fp, #4
31fd8     A7 26 02 5B |  if_ne	rdlong	local01, fp
31fdc     04 4E 85 51 |  if_ne	sub	fp, #4
31fe0     13 01 68 5C |  if_ne	wrlong	#0, local01
31fe4                 | ' 
31fe4                 | ' 	return res ;
31fe4     0C 4E 05 F1 | 	add	fp, #12
31fe8     A7 FA 01 FB | 	rdlong	result1, fp
31fec     0C 4E 85 F1 | 	sub	fp, #12
31ff0                 | LR__4936
31ff0     A7 F0 03 F6 | 	mov	ptra, fp
31ff4     B2 00 A0 FD | 	call	#popregs_
31ff8                 | _fatfs_cc_f_opendir_ret
31ff8     2D 00 64 FD | 	ret
31ffc                 | 
31ffc                 | _fatfs_cc_f_closedir
31ffc     00 4A 05 F6 | 	mov	COUNT_, #0
32000     A8 00 A0 FD | 	call	#pushregs_
32004     10 F0 07 F1 | 	add	ptra, #16
32008     04 4E 05 F1 | 	add	fp, #4
3200c     A7 12 62 FC | 	wrlong	arg01, fp
32010     08 4E 05 F1 | 	add	fp, #8
32014     A7 14 02 F6 | 	mov	arg02, fp
32018     0C 4E 85 F1 | 	sub	fp, #12
3201c     C0 DD BF FD | 	call	#_fatfs_cc_validate
32020     08 4E 05 F1 | 	add	fp, #8
32024     A7 FA 61 FC | 	wrlong	result1, fp
32028     08 4E 85 F1 | 	sub	fp, #8
3202c     00 FA 0D F2 | 	cmp	result1, #0 wz
32030     04 4E 05 A1 |  if_e	add	fp, #4
32034     A7 FA 01 AB |  if_e	rdlong	result1, fp
32038     04 4E 85 A1 |  if_e	sub	fp, #4
3203c     FD 00 68 AC |  if_e	wrlong	#0, result1
32040                 | ' 
32040                 | ' 
32040                 | ' 
32040                 | ' 
32040                 | ' 		dp->obj.fs = 0;
32040                 | ' #line 4633 "ff.c"
32040                 | ' 	}
32040                 | ' 	return res;
32040     08 4E 05 F1 | 	add	fp, #8
32044     A7 FA 01 FB | 	rdlong	result1, fp
32048     08 4E 85 F1 | 	sub	fp, #8
3204c     A7 F0 03 F6 | 	mov	ptra, fp
32050     B2 00 A0 FD | 	call	#popregs_
32054                 | _fatfs_cc_f_closedir_ret
32054     2D 00 64 FD | 	ret
32058                 | 
32058                 | _fatfs_cc_f_readdir
32058     00 4A 05 F6 | 	mov	COUNT_, #0
3205c     A8 00 A0 FD | 	call	#pushregs_
32060     14 F0 07 F1 | 	add	ptra, #20
32064     04 4E 05 F1 | 	add	fp, #4
32068     A7 12 62 FC | 	wrlong	arg01, fp
3206c     04 4E 05 F1 | 	add	fp, #4
32070     A7 14 62 FC | 	wrlong	arg02, fp
32074     04 4E 85 F1 | 	sub	fp, #4
32078     A7 12 02 FB | 	rdlong	arg01, fp
3207c     0C 4E 05 F1 | 	add	fp, #12
32080     A7 14 02 F6 | 	mov	arg02, fp
32084     10 4E 85 F1 | 	sub	fp, #16
32088     54 DD BF FD | 	call	#_fatfs_cc_validate
3208c     0C 4E 05 F1 | 	add	fp, #12
32090     A7 FA 61 FC | 	wrlong	result1, fp
32094     0C 4E 85 F1 | 	sub	fp, #12
32098     00 FA 0D F2 | 	cmp	result1, #0 wz
3209c     BC 00 90 5D |  if_ne	jmp	#LR__4943
320a0     08 4E 05 F1 | 	add	fp, #8
320a4     A7 FA 09 FB | 	rdlong	result1, fp wz
320a8     08 4E 85 F1 | 	sub	fp, #8
320ac     24 00 90 5D |  if_ne	jmp	#LR__4940
320b0     04 4E 05 F1 | 	add	fp, #4
320b4     A7 12 02 FB | 	rdlong	arg01, fp
320b8     04 4E 85 F1 | 	sub	fp, #4
320bc     00 14 06 F6 | 	mov	arg02, #0
320c0     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
320c4     0C 4E 05 F1 | 	add	fp, #12
320c8     A7 FA 61 FC | 	wrlong	result1, fp
320cc     0C 4E 85 F1 | 	sub	fp, #12
320d0     88 00 90 FD | 	jmp	#LR__4942
320d4                 | LR__4940
320d4     04 4E 05 F1 | 	add	fp, #4
320d8     A7 12 02 FB | 	rdlong	arg01, fp
320dc     04 4E 85 F1 | 	sub	fp, #4
320e0     00 14 06 F6 | 	mov	arg02, #0
320e4     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
320e8     0C 4E 05 F1 | 	add	fp, #12
320ec     A7 FA 61 FC | 	wrlong	result1, fp
320f0     0C 4E 85 F1 | 	sub	fp, #12
320f4     04 FA 0D F2 | 	cmp	result1, #4 wz
320f8     0C 4E 05 A1 |  if_e	add	fp, #12
320fc     A7 00 68 AC |  if_e	wrlong	#0, fp
32100     0C 4E 85 A1 |  if_e	sub	fp, #12
32104     0C 4E 05 F1 | 	add	fp, #12
32108     A7 FA 09 FB | 	rdlong	result1, fp wz
3210c     0C 4E 85 F1 | 	sub	fp, #12
32110     48 00 90 5D |  if_ne	jmp	#LR__4941
32114     04 4E 05 F1 | 	add	fp, #4
32118     A7 12 02 FB | 	rdlong	arg01, fp
3211c     04 4E 05 F1 | 	add	fp, #4
32120     A7 14 02 FB | 	rdlong	arg02, fp
32124     08 4E 85 F1 | 	sub	fp, #8
32128     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
3212c     04 4E 05 F1 | 	add	fp, #4
32130     A7 12 02 FB | 	rdlong	arg01, fp
32134     04 4E 85 F1 | 	sub	fp, #4
32138     00 14 06 F6 | 	mov	arg02, #0
3213c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
32140     0C 4E 05 F1 | 	add	fp, #12
32144     A7 FA 61 FC | 	wrlong	result1, fp
32148     0C 4E 85 F1 | 	sub	fp, #12
3214c     04 FA 0D F2 | 	cmp	result1, #4 wz
32150     0C 4E 05 A1 |  if_e	add	fp, #12
32154     A7 00 68 AC |  if_e	wrlong	#0, fp
32158     0C 4E 85 A1 |  if_e	sub	fp, #12
3215c                 | LR__4941
3215c                 | LR__4942
3215c                 | LR__4943
3215c                 | ' 			}
3215c                 | ' 			;
3215c                 | ' 		}
3215c                 | ' 	}
3215c                 | ' 	return res ;
3215c     0C 4E 05 F1 | 	add	fp, #12
32160     A7 FA 01 FB | 	rdlong	result1, fp
32164     0C 4E 85 F1 | 	sub	fp, #12
32168     A7 F0 03 F6 | 	mov	ptra, fp
3216c     B2 00 A0 FD | 	call	#popregs_
32170                 | _fatfs_cc_f_readdir_ret
32170     2D 00 64 FD | 	ret
32174                 | 
32174                 | _fatfs_cc_f_stat
32174     00 4A 05 F6 | 	mov	COUNT_, #0
32178     A8 00 A0 FD | 	call	#pushregs_
3217c     40 F0 07 F1 | 	add	ptra, #64
32180     04 4E 05 F1 | 	add	fp, #4
32184     A7 12 62 FC | 	wrlong	arg01, fp
32188     04 4E 05 F1 | 	add	fp, #4
3218c     A7 14 62 FC | 	wrlong	arg02, fp
32190     04 4E 85 F1 | 	sub	fp, #4
32194     A7 12 02 F6 | 	mov	arg01, fp
32198     0C 4E 05 F1 | 	add	fp, #12
3219c     A7 14 02 F6 | 	mov	arg02, fp
321a0     10 4E 85 F1 | 	sub	fp, #16
321a4     00 16 06 F6 | 	mov	arg03, #0
321a8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
321ac     0C 4E 05 F1 | 	add	fp, #12
321b0     A7 FA 61 FC | 	wrlong	result1, fp
321b4     0C 4E 85 F1 | 	sub	fp, #12
321b8     00 FA 0D F2 | 	cmp	result1, #0 wz
321bc     74 00 90 5D |  if_ne	jmp	#LR__4953
321c0     10 4E 05 F1 | 	add	fp, #16
321c4     A7 12 02 F6 | 	mov	arg01, fp
321c8     0C 4E 85 F1 | 	sub	fp, #12
321cc     A7 14 02 FB | 	rdlong	arg02, fp
321d0     04 4E 85 F1 | 	sub	fp, #4
321d4     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
321d8     0C 4E 05 F1 | 	add	fp, #12
321dc     A7 FA 61 FC | 	wrlong	result1, fp
321e0     0C 4E 85 F1 | 	sub	fp, #12
321e4     00 FA 0D F2 | 	cmp	result1, #0 wz
321e8     48 00 90 5D |  if_ne	jmp	#LR__4952
321ec     3B 4E 05 F1 | 	add	fp, #59
321f0     A7 FA C1 FA | 	rdbyte	result1, fp
321f4     3B 4E 85 F1 | 	sub	fp, #59
321f8     80 FA CD F7 | 	test	result1, #128 wz
321fc     0C 4E 05 51 |  if_ne	add	fp, #12
32200     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32204     0C 4E 85 51 |  if_ne	sub	fp, #12
32208     28 00 90 5D |  if_ne	jmp	#LR__4951
3220c     08 4E 05 F1 | 	add	fp, #8
32210     A7 FA 09 FB | 	rdlong	result1, fp wz
32214     08 4E 85 F1 | 	sub	fp, #8
32218     18 00 90 AD |  if_e	jmp	#LR__4950
3221c     10 4E 05 F1 | 	add	fp, #16
32220     A7 12 02 F6 | 	mov	arg01, fp
32224     08 4E 85 F1 | 	sub	fp, #8
32228     A7 14 02 FB | 	rdlong	arg02, fp
3222c     08 4E 85 F1 | 	sub	fp, #8
32230     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
32234                 | LR__4950
32234                 | LR__4951
32234                 | LR__4952
32234                 | LR__4953
32234                 | ' 			}
32234                 | ' 		}
32234                 | ' 		;
32234                 | ' 	}
32234                 | ' 
32234                 | ' 	return res ;
32234     0C 4E 05 F1 | 	add	fp, #12
32238     A7 FA 01 FB | 	rdlong	result1, fp
3223c     0C 4E 85 F1 | 	sub	fp, #12
32240     A7 F0 03 F6 | 	mov	ptra, fp
32244     B2 00 A0 FD | 	call	#popregs_
32248                 | _fatfs_cc_f_stat_ret
32248     2D 00 64 FD | 	ret
3224c                 | 
3224c                 | _fatfs_cc_f_unlink
3224c     00 4A 05 F6 | 	mov	COUNT_, #0
32250     A8 00 A0 FD | 	call	#pushregs_
32254     74 F0 07 F1 | 	add	ptra, #116
32258     04 4E 05 F1 | 	add	fp, #4
3225c     A7 12 62 FC | 	wrlong	arg01, fp
32260     68 4E 05 F1 | 	add	fp, #104
32264     A7 00 68 FC | 	wrlong	#0, fp
32268     68 4E 85 F1 | 	sub	fp, #104
3226c     A7 12 02 F6 | 	mov	arg01, fp
32270     6C 4E 05 F1 | 	add	fp, #108
32274     A7 14 02 F6 | 	mov	arg02, fp
32278     70 4E 85 F1 | 	sub	fp, #112
3227c     02 16 06 F6 | 	mov	arg03, #2
32280     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
32284     08 4E 05 F1 | 	add	fp, #8
32288     A7 FA 61 FC | 	wrlong	result1, fp
3228c     08 4E 85 F1 | 	sub	fp, #8
32290     00 FA 0D F2 | 	cmp	result1, #0 wz
32294     E4 01 90 5D |  if_ne	jmp	#LR__4968
32298     70 4E 05 F1 | 	add	fp, #112
3229c     A7 16 02 FB | 	rdlong	arg03, fp
322a0     64 4E 85 F1 | 	sub	fp, #100
322a4     A7 16 62 FC | 	wrlong	arg03, fp
322a8     A7 12 02 F6 | 	mov	arg01, fp
322ac     08 4E 85 F1 | 	sub	fp, #8
322b0     A7 14 02 FB | 	rdlong	arg02, fp
322b4     04 4E 85 F1 | 	sub	fp, #4
322b8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
322bc     08 4E 05 F1 | 	add	fp, #8
322c0     A7 FA 61 FC | 	wrlong	result1, fp
322c4     00 FA 4D F2 | 	cmps	result1, #0 wz
322c8     08 4E 85 F1 | 	sub	fp, #8
322cc     AC 01 90 5D |  if_ne	jmp	#LR__4967
322d0     37 4E 05 F1 | 	add	fp, #55
322d4     A7 FA C1 FA | 	rdbyte	result1, fp
322d8     37 4E 85 F1 | 	sub	fp, #55
322dc     80 FA CD F7 | 	test	result1, #128 wz
322e0     08 4E 05 51 |  if_ne	add	fp, #8
322e4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
322e8     08 4E 85 51 |  if_ne	sub	fp, #8
322ec     1C 00 90 5D |  if_ne	jmp	#LR__4960
322f0     12 4E 05 F1 | 	add	fp, #18
322f4     A7 FA C1 FA | 	rdbyte	result1, fp
322f8     12 4E 85 F1 | 	sub	fp, #18
322fc     01 FA CD F7 | 	test	result1, #1 wz
32300     08 4E 05 51 |  if_ne	add	fp, #8
32304     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32308     08 4E 85 51 |  if_ne	sub	fp, #8
3230c                 | LR__4960
3230c     08 4E 05 F1 | 	add	fp, #8
32310     A7 FA 09 FB | 	rdlong	result1, fp wz
32314     08 4E 85 F1 | 	sub	fp, #8
32318     C8 00 90 5D |  if_ne	jmp	#LR__4963
3231c     70 4E 05 F1 | 	add	fp, #112
32320     A7 12 02 FB | 	rdlong	arg01, fp
32324     48 4E 85 F1 | 	sub	fp, #72
32328     A7 14 02 FB | 	rdlong	arg02, fp
3232c     28 4E 85 F1 | 	sub	fp, #40
32330     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
32334     6C 4E 05 F1 | 	add	fp, #108
32338     A7 FA 61 FC | 	wrlong	result1, fp
3233c     5A 4E 85 F1 | 	sub	fp, #90
32340     A7 FA C1 FA | 	rdbyte	result1, fp
32344     12 4E 85 F1 | 	sub	fp, #18
32348     10 FA CD F7 | 	test	result1, #16 wz
3234c     94 00 90 AD |  if_e	jmp	#LR__4962
32350     70 4E 05 F1 | 	add	fp, #112
32354     A7 FA 01 FB | 	rdlong	result1, fp
32358     34 4E 85 F1 | 	sub	fp, #52
3235c     A7 FA 61 FC | 	wrlong	result1, fp
32360     30 4E 05 F1 | 	add	fp, #48
32364     A7 16 02 FB | 	rdlong	arg03, fp
32368     28 4E 85 F1 | 	sub	fp, #40
3236c     A7 16 62 FC | 	wrlong	arg03, fp
32370     08 4E 85 F1 | 	sub	fp, #8
32374     A7 12 02 F6 | 	mov	arg01, fp
32378     3C 4E 85 F1 | 	sub	fp, #60
3237c     00 14 06 F6 | 	mov	arg02, #0
32380     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
32384     08 4E 05 F1 | 	add	fp, #8
32388     A7 FA 61 FC | 	wrlong	result1, fp
3238c     08 4E 85 F1 | 	sub	fp, #8
32390     00 FA 0D F2 | 	cmp	result1, #0 wz
32394     4C 00 90 5D |  if_ne	jmp	#LR__4961
32398     3C 4E 05 F1 | 	add	fp, #60
3239c     A7 12 02 F6 | 	mov	arg01, fp
323a0     3C 4E 85 F1 | 	sub	fp, #60
323a4     00 14 06 F6 | 	mov	arg02, #0
323a8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
323ac     08 4E 05 F1 | 	add	fp, #8
323b0     A7 FA 61 FC | 	wrlong	result1, fp
323b4     00 FA 4D F2 | 	cmps	result1, #0 wz
323b8     08 4E 85 F1 | 	sub	fp, #8
323bc     08 4E 05 A1 |  if_e	add	fp, #8
323c0     A7 0E 68 AC |  if_e	wrlong	#7, fp
323c4     08 4E 85 A1 |  if_e	sub	fp, #8
323c8     08 4E 05 F1 | 	add	fp, #8
323cc     A7 FA 01 FB | 	rdlong	result1, fp
323d0     08 4E 85 F1 | 	sub	fp, #8
323d4     04 FA 0D F2 | 	cmp	result1, #4 wz
323d8     08 4E 05 A1 |  if_e	add	fp, #8
323dc     A7 00 68 AC |  if_e	wrlong	#0, fp
323e0     08 4E 85 A1 |  if_e	sub	fp, #8
323e4                 | LR__4961
323e4                 | LR__4962
323e4                 | LR__4963
323e4     08 4E 05 F1 | 	add	fp, #8
323e8     A7 FA 09 FB | 	rdlong	result1, fp wz
323ec     08 4E 85 F1 | 	sub	fp, #8
323f0     88 00 90 5D |  if_ne	jmp	#LR__4966
323f4     0C 4E 05 F1 | 	add	fp, #12
323f8     A7 12 02 F6 | 	mov	arg01, fp
323fc     0C 4E 85 F1 | 	sub	fp, #12
32400     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
32404     08 4E 05 F1 | 	add	fp, #8
32408     A7 FA 61 FC | 	wrlong	result1, fp
3240c     08 4E 85 F1 | 	sub	fp, #8
32410     00 FA 0D F2 | 	cmp	result1, #0 wz
32414     38 00 90 5D |  if_ne	jmp	#LR__4964
32418     6C 4E 05 F1 | 	add	fp, #108
3241c     A7 FA 09 FB | 	rdlong	result1, fp wz
32420     6C 4E 85 F1 | 	sub	fp, #108
32424     28 00 90 AD |  if_e	jmp	#LR__4964
32428     0C 4E 05 F1 | 	add	fp, #12
3242c     A7 12 02 F6 | 	mov	arg01, fp
32430     60 4E 05 F1 | 	add	fp, #96
32434     A7 14 02 FB | 	rdlong	arg02, fp
32438     6C 4E 85 F1 | 	sub	fp, #108
3243c     00 16 06 F6 | 	mov	arg03, #0
32440     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
32444     08 4E 05 F1 | 	add	fp, #8
32448     A7 FA 61 FC | 	wrlong	result1, fp
3244c     08 4E 85 F1 | 	sub	fp, #8
32450                 | LR__4964
32450     08 4E 05 F1 | 	add	fp, #8
32454     A7 FA 09 FB | 	rdlong	result1, fp wz
32458     08 4E 85 F1 | 	sub	fp, #8
3245c     1C 00 90 5D |  if_ne	jmp	#LR__4965
32460     70 4E 05 F1 | 	add	fp, #112
32464     A7 12 02 FB | 	rdlong	arg01, fp
32468     70 4E 85 F1 | 	sub	fp, #112
3246c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
32470     08 4E 05 F1 | 	add	fp, #8
32474     A7 FA 61 FC | 	wrlong	result1, fp
32478     08 4E 85 F1 | 	sub	fp, #8
3247c                 | LR__4965
3247c                 | LR__4966
3247c                 | LR__4967
3247c                 | LR__4968
3247c                 | ' 			}
3247c                 | ' 		}
3247c                 | ' 		;
3247c                 | ' 	}
3247c                 | ' 
3247c                 | ' 	return res ;
3247c     08 4E 05 F1 | 	add	fp, #8
32480     A7 FA 01 FB | 	rdlong	result1, fp
32484     08 4E 85 F1 | 	sub	fp, #8
32488     A7 F0 03 F6 | 	mov	ptra, fp
3248c     B2 00 A0 FD | 	call	#popregs_
32490                 | _fatfs_cc_f_unlink_ret
32490     2D 00 64 FD | 	ret
32494                 | 
32494                 | _fatfs_cc_f_mkdir
32494     00 4A 05 F6 | 	mov	COUNT_, #0
32498     A8 00 A0 FD | 	call	#pushregs_
3249c     5C F0 07 F1 | 	add	ptra, #92
324a0     04 4E 05 F1 | 	add	fp, #4
324a4     A7 12 62 FC | 	wrlong	arg01, fp
324a8     A7 12 02 F6 | 	mov	arg01, fp
324ac     48 4E 05 F1 | 	add	fp, #72
324b0     A7 14 02 F6 | 	mov	arg02, fp
324b4     4C 4E 85 F1 | 	sub	fp, #76
324b8     02 16 06 F6 | 	mov	arg03, #2
324bc     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
324c0     08 4E 05 F1 | 	add	fp, #8
324c4     A7 FA 61 FC | 	wrlong	result1, fp
324c8     08 4E 85 F1 | 	sub	fp, #8
324cc     00 FA 0D F2 | 	cmp	result1, #0 wz
324d0     C4 02 90 5D |  if_ne	jmp	#LR__4975
324d4     4C 4E 05 F1 | 	add	fp, #76
324d8     A7 16 02 FB | 	rdlong	arg03, fp
324dc     40 4E 85 F1 | 	sub	fp, #64
324e0     A7 16 62 FC | 	wrlong	arg03, fp
324e4     A7 12 02 F6 | 	mov	arg01, fp
324e8     08 4E 85 F1 | 	sub	fp, #8
324ec     A7 14 02 FB | 	rdlong	arg02, fp
324f0     04 4E 85 F1 | 	sub	fp, #4
324f4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
324f8     08 4E 05 F1 | 	add	fp, #8
324fc     A7 FA 61 FC | 	wrlong	result1, fp
32500     00 FA 4D F2 | 	cmps	result1, #0 wz
32504     08 4E 85 F1 | 	sub	fp, #8
32508     08 4E 05 A1 |  if_e	add	fp, #8
3250c     A7 10 68 AC |  if_e	wrlong	#8, fp
32510     08 4E 85 A1 |  if_e	sub	fp, #8
32514     08 4E 05 F1 | 	add	fp, #8
32518     A7 FA 01 FB | 	rdlong	result1, fp
3251c     08 4E 85 F1 | 	sub	fp, #8
32520     04 FA 0D F2 | 	cmp	result1, #4 wz
32524     70 02 90 5D |  if_ne	jmp	#LR__4974
32528     4C 4E 05 F1 | 	add	fp, #76
3252c     A7 16 02 FB | 	rdlong	arg03, fp
32530     10 4E 85 F1 | 	sub	fp, #16
32534     A7 16 62 FC | 	wrlong	arg03, fp
32538     A7 12 02 F6 | 	mov	arg01, fp
3253c     3C 4E 85 F1 | 	sub	fp, #60
32540     00 14 06 F6 | 	mov	arg02, #0
32544     04 AC BF FD | 	call	#_fatfs_cc_create_chain
32548     50 4E 05 F1 | 	add	fp, #80
3254c     A7 FA 61 FC | 	wrlong	result1, fp
32550     48 4E 85 F1 | 	sub	fp, #72
32554     A7 00 68 FC | 	wrlong	#0, fp
32558     48 4E 05 F1 | 	add	fp, #72
3255c     A7 FA 09 FB | 	rdlong	result1, fp wz
32560     50 4E 85 F1 | 	sub	fp, #80
32564     08 4E 05 A1 |  if_e	add	fp, #8
32568     A7 0E 68 AC |  if_e	wrlong	#7, fp
3256c     08 4E 85 A1 |  if_e	sub	fp, #8
32570     50 4E 05 F1 | 	add	fp, #80
32574     A7 FA 01 FB | 	rdlong	result1, fp
32578     50 4E 85 F1 | 	sub	fp, #80
3257c     01 FA 0D F2 | 	cmp	result1, #1 wz
32580     08 4E 05 A1 |  if_e	add	fp, #8
32584     A7 04 68 AC |  if_e	wrlong	#2, fp
32588     08 4E 85 A1 |  if_e	sub	fp, #8
3258c     50 4E 05 F1 | 	add	fp, #80
32590     A7 16 02 FB | 	rdlong	arg03, fp
32594     50 4E 85 F1 | 	sub	fp, #80
32598     FF FF 7F FF 
3259c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
325a0     08 4E 05 A1 |  if_e	add	fp, #8
325a4     A7 02 68 AC |  if_e	wrlong	#1, fp
325a8     08 4E 85 A1 |  if_e	sub	fp, #8
325ac     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
325b0     58 4E 05 F1 | 	add	fp, #88
325b4     A7 FA 61 FC | 	wrlong	result1, fp
325b8     50 4E 85 F1 | 	sub	fp, #80
325bc     A7 FA 09 FB | 	rdlong	result1, fp wz
325c0     08 4E 85 F1 | 	sub	fp, #8
325c4     1C 01 90 5D |  if_ne	jmp	#LR__4971
325c8     4C 4E 05 F1 | 	add	fp, #76
325cc     A7 12 02 FB | 	rdlong	arg01, fp
325d0     04 4E 05 F1 | 	add	fp, #4
325d4     A7 14 02 FB | 	rdlong	arg02, fp
325d8     50 4E 85 F1 | 	sub	fp, #80
325dc     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
325e0     08 4E 05 F1 | 	add	fp, #8
325e4     A7 FA 61 FC | 	wrlong	result1, fp
325e8     00 FA 4D F2 | 	cmps	result1, #0 wz
325ec     08 4E 85 F1 | 	sub	fp, #8
325f0     F0 00 90 5D |  if_ne	jmp	#LR__4970
325f4     4C 4E 05 F1 | 	add	fp, #76
325f8     A7 12 02 FB | 	rdlong	arg01, fp
325fc     4C 4E 85 F1 | 	sub	fp, #76
32600     34 12 06 F1 | 	add	arg01, #52
32604     20 14 06 F6 | 	mov	arg02, #32
32608     0B 16 06 F6 | 	mov	arg03, #11
3260c     98 00 A0 FD | 	call	#\builtin_bytefill_
32610     4C 4E 05 F1 | 	add	fp, #76
32614     A7 FA 01 FB | 	rdlong	result1, fp
32618     34 FA 05 F1 | 	add	result1, #52
3261c     FD 5C 48 FC | 	wrbyte	#46, result1
32620     A7 16 02 FB | 	rdlong	arg03, fp
32624     3F 16 06 F1 | 	add	arg03, #63
32628     0B 21 48 FC | 	wrbyte	#16, arg03
3262c     A7 12 02 FB | 	rdlong	arg01, fp
32630     4A 12 06 F1 | 	add	arg01, #74
32634     0C 4E 05 F1 | 	add	fp, #12
32638     A7 14 02 FB | 	rdlong	arg02, fp
3263c     09 15 62 FC | 	wrlong	arg02, arg01
32640     0C 4E 85 F1 | 	sub	fp, #12
32644     A7 14 02 FB | 	rdlong	arg02, fp
32648     0A 13 02 F6 | 	mov	arg01, arg02
3264c     34 14 06 F1 | 	add	arg02, #52
32650     04 4E 05 F1 | 	add	fp, #4
32654     A7 16 02 FB | 	rdlong	arg03, fp
32658     50 4E 85 F1 | 	sub	fp, #80
3265c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
32660     4C 4E 05 F1 | 	add	fp, #76
32664     A7 14 02 FB | 	rdlong	arg02, fp
32668     0A 13 02 F6 | 	mov	arg01, arg02
3266c     54 12 06 F1 | 	add	arg01, #84
32670     4C 4E 85 F1 | 	sub	fp, #76
32674     34 14 06 F1 | 	add	arg02, #52
32678     20 16 06 F6 | 	mov	arg03, #32
3267c     74 27 BF FD | 	call	#__system____builtin_memmove
32680     4C 4E 05 F1 | 	add	fp, #76
32684     A7 16 02 FB | 	rdlong	arg03, fp
32688     55 16 06 F1 | 	add	arg03, #85
3268c     0B 5D 48 FC | 	wrbyte	#46, arg03
32690     38 4E 85 F1 | 	sub	fp, #56
32694     A7 16 02 FB | 	rdlong	arg03, fp
32698     40 4E 05 F1 | 	add	fp, #64
3269c     A7 16 62 FC | 	wrlong	arg03, fp
326a0     08 4E 85 F1 | 	sub	fp, #8
326a4     A7 14 02 FB | 	rdlong	arg02, fp
326a8     0A 13 02 F6 | 	mov	arg01, arg02
326ac     54 14 06 F1 | 	add	arg02, #84
326b0     4C 4E 85 F1 | 	sub	fp, #76
326b4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
326b8     4C 4E 05 F1 | 	add	fp, #76
326bc     A7 16 02 FB | 	rdlong	arg03, fp
326c0     03 16 06 F1 | 	add	arg03, #3
326c4     0B 03 48 FC | 	wrbyte	#1, arg03
326c8     40 4E 85 F1 | 	sub	fp, #64
326cc     A7 12 02 F6 | 	mov	arg01, fp
326d0     0C 4E 85 F1 | 	sub	fp, #12
326d4     44 BA BF FD | 	call	#_fatfs_cc_dir_register
326d8     08 4E 05 F1 | 	add	fp, #8
326dc     A7 FA 61 FC | 	wrlong	result1, fp
326e0     08 4E 85 F1 | 	sub	fp, #8
326e4                 | LR__4970
326e4                 | LR__4971
326e4     08 4E 05 F1 | 	add	fp, #8
326e8     A7 FA 09 FB | 	rdlong	result1, fp wz
326ec     08 4E 85 F1 | 	sub	fp, #8
326f0     88 00 90 5D |  if_ne	jmp	#LR__4972
326f4     28 4E 05 F1 | 	add	fp, #40
326f8     A7 12 02 FB | 	rdlong	arg01, fp
326fc     16 12 06 F1 | 	add	arg01, #22
32700     30 4E 05 F1 | 	add	fp, #48
32704     A7 14 02 FB | 	rdlong	arg02, fp
32708     09 15 62 FC | 	wrlong	arg02, arg01
3270c     0C 4E 85 F1 | 	sub	fp, #12
32710     A7 12 02 FB | 	rdlong	arg01, fp
32714     24 4E 85 F1 | 	sub	fp, #36
32718     A7 14 02 FB | 	rdlong	arg02, fp
3271c     28 4E 05 F1 | 	add	fp, #40
32720     A7 16 02 FB | 	rdlong	arg03, fp
32724     50 4E 85 F1 | 	sub	fp, #80
32728     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
3272c     28 4E 05 F1 | 	add	fp, #40
32730     A7 FA 01 FB | 	rdlong	result1, fp
32734     0B FA 05 F1 | 	add	result1, #11
32738     FD 20 48 FC | 	wrbyte	#16, result1
3273c     24 4E 05 F1 | 	add	fp, #36
32740     A7 FA 01 FB | 	rdlong	result1, fp
32744     03 FA 05 F1 | 	add	result1, #3
32748     FD 02 48 FC | 	wrbyte	#1, result1
3274c     44 4E 85 F1 | 	sub	fp, #68
32750     A7 FA 09 FB | 	rdlong	result1, fp wz
32754     08 4E 85 F1 | 	sub	fp, #8
32758     3C 00 90 5D |  if_ne	jmp	#LR__4973
3275c     4C 4E 05 F1 | 	add	fp, #76
32760     A7 12 02 FB | 	rdlong	arg01, fp
32764     4C 4E 85 F1 | 	sub	fp, #76
32768     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
3276c     08 4E 05 F1 | 	add	fp, #8
32770     A7 FA 61 FC | 	wrlong	result1, fp
32774     08 4E 85 F1 | 	sub	fp, #8
32778     1C 00 90 FD | 	jmp	#LR__4973
3277c                 | LR__4972
3277c     3C 4E 05 F1 | 	add	fp, #60
32780     A7 12 02 F6 | 	mov	arg01, fp
32784     14 4E 05 F1 | 	add	fp, #20
32788     A7 14 02 FB | 	rdlong	arg02, fp
3278c     50 4E 85 F1 | 	sub	fp, #80
32790     00 16 06 F6 | 	mov	arg03, #0
32794     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
32798                 | LR__4973
32798                 | LR__4974
32798                 | LR__4975
32798                 | ' 				remove_chain(&sobj, dcl, 0);
32798                 | ' 			}
32798                 | ' 		}
32798                 | ' 		;
32798                 | ' 	}
32798                 | ' 
32798                 | ' 	return res ;
32798     08 4E 05 F1 | 	add	fp, #8
3279c     A7 FA 01 FB | 	rdlong	result1, fp
327a0     08 4E 85 F1 | 	sub	fp, #8
327a4     A7 F0 03 F6 | 	mov	ptra, fp
327a8     B2 00 A0 FD | 	call	#popregs_
327ac                 | _fatfs_cc_f_mkdir_ret
327ac     2D 00 64 FD | 	ret
327b0                 | 
327b0                 | _fatfs_cc_f_rename
327b0     01 4A 05 F6 | 	mov	COUNT_, #1
327b4     A8 00 A0 FD | 	call	#pushregs_
327b8     9C F0 07 F1 | 	add	ptra, #156
327bc     04 4E 05 F1 | 	add	fp, #4
327c0     A7 12 62 FC | 	wrlong	arg01, fp
327c4     04 4E 05 F1 | 	add	fp, #4
327c8     A7 14 62 FC | 	wrlong	arg02, fp
327cc     A7 12 02 F6 | 	mov	arg01, fp
327d0     08 4E 85 F1 | 	sub	fp, #8
327d4     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
327d8     04 4E 05 F1 | 	add	fp, #4
327dc     A7 12 02 F6 | 	mov	arg01, fp
327e0     6C 4E 05 F1 | 	add	fp, #108
327e4     A7 14 02 F6 | 	mov	arg02, fp
327e8     70 4E 85 F1 | 	sub	fp, #112
327ec     02 16 06 F6 | 	mov	arg03, #2
327f0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
327f4     0C 4E 05 F1 | 	add	fp, #12
327f8     A7 FA 61 FC | 	wrlong	result1, fp
327fc     0C 4E 85 F1 | 	sub	fp, #12
32800     00 FA 0D F2 | 	cmp	result1, #0 wz
32804     44 03 90 5D |  if_ne	jmp	#LR__4993
32808     70 4E 05 F1 | 	add	fp, #112
3280c     A7 16 02 FB | 	rdlong	arg03, fp
32810     60 4E 85 F1 | 	sub	fp, #96
32814     A7 16 62 FC | 	wrlong	arg03, fp
32818     A7 12 02 F6 | 	mov	arg01, fp
3281c     0C 4E 85 F1 | 	sub	fp, #12
32820     A7 14 02 FB | 	rdlong	arg02, fp
32824     04 4E 85 F1 | 	sub	fp, #4
32828     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
3282c     0C 4E 05 F1 | 	add	fp, #12
32830     A7 FA 61 FC | 	wrlong	result1, fp
32834     00 FA 4D F2 | 	cmps	result1, #0 wz
32838     0C 4E 85 F1 | 	sub	fp, #12
3283c     1C 00 90 5D |  if_ne	jmp	#LR__4980
32840     3B 4E 05 F1 | 	add	fp, #59
32844     A7 FA C1 FA | 	rdbyte	result1, fp
32848     3B 4E 85 F1 | 	sub	fp, #59
3284c     A0 FA CD F7 | 	test	result1, #160 wz
32850     0C 4E 05 51 |  if_ne	add	fp, #12
32854     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32858     0C 4E 85 51 |  if_ne	sub	fp, #12
3285c                 | LR__4980
3285c     0C 4E 05 F1 | 	add	fp, #12
32860     A7 26 0A FB | 	rdlong	local01, fp wz
32864     0C 4E 85 F1 | 	sub	fp, #12
32868     E0 02 90 5D |  if_ne	jmp	#LR__4992
3286c     74 4E 05 F1 | 	add	fp, #116
32870     A7 12 02 F6 | 	mov	arg01, fp
32874     48 4E 85 F1 | 	sub	fp, #72
32878     A7 14 02 FB | 	rdlong	arg02, fp
3287c     2C 4E 85 F1 | 	sub	fp, #44
32880     20 16 06 F6 | 	mov	arg03, #32
32884     6C 25 BF FD | 	call	#__system____builtin_memmove
32888     40 4E 05 F1 | 	add	fp, #64
3288c     A7 12 02 F6 | 	mov	arg01, fp
32890     30 4E 85 F1 | 	sub	fp, #48
32894     A7 14 02 F6 | 	mov	arg02, fp
32898     10 4E 85 F1 | 	sub	fp, #16
3289c     30 16 06 F6 | 	mov	arg03, #48
328a0     50 25 BF FD | 	call	#__system____builtin_memmove
328a4     40 4E 05 F1 | 	add	fp, #64
328a8     A7 12 02 F6 | 	mov	arg01, fp
328ac     38 4E 85 F1 | 	sub	fp, #56
328b0     A7 14 02 FB | 	rdlong	arg02, fp
328b4     08 4E 85 F1 | 	sub	fp, #8
328b8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
328bc     0C 4E 05 F1 | 	add	fp, #12
328c0     A7 FA 61 FC | 	wrlong	result1, fp
328c4     0C 4E 85 F1 | 	sub	fp, #12
328c8     00 FA 0D F2 | 	cmp	result1, #0 wz
328cc     4C 00 90 5D |  if_ne	jmp	#LR__4983
328d0     48 4E 05 F1 | 	add	fp, #72
328d4     A7 FA 01 FB | 	rdlong	result1, fp
328d8     30 4E 85 F1 | 	sub	fp, #48
328dc     A7 16 02 FB | 	rdlong	arg03, fp
328e0     18 4E 85 F1 | 	sub	fp, #24
328e4     0B FB 09 F2 | 	cmp	result1, arg03 wz
328e8     20 00 90 5D |  if_ne	jmp	#LR__4981
328ec     50 4E 05 F1 | 	add	fp, #80
328f0     A7 FA 01 FB | 	rdlong	result1, fp
328f4     30 4E 85 F1 | 	sub	fp, #48
328f8     A7 16 02 FB | 	rdlong	arg03, fp
328fc     20 4E 85 F1 | 	sub	fp, #32
32900     0B FB 09 F2 | 	cmp	result1, arg03 wz
32904     04 26 06 A6 |  if_e	mov	local01, #4
32908     04 00 90 AD |  if_e	jmp	#LR__4982
3290c                 | LR__4981
3290c     08 26 06 F6 | 	mov	local01, #8
32910                 | LR__4982
32910     0C 4E 05 F1 | 	add	fp, #12
32914     A7 26 62 FC | 	wrlong	local01, fp
32918     0C 4E 85 F1 | 	sub	fp, #12
3291c                 | LR__4983
3291c     0C 4E 05 F1 | 	add	fp, #12
32920     A7 26 02 FB | 	rdlong	local01, fp
32924     0C 4E 85 F1 | 	sub	fp, #12
32928     04 26 0E F2 | 	cmp	local01, #4 wz
3292c     CC 01 90 5D |  if_ne	jmp	#LR__4989
32930     40 4E 05 F1 | 	add	fp, #64
32934     A7 12 02 F6 | 	mov	arg01, fp
32938     40 4E 85 F1 | 	sub	fp, #64
3293c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
32940     0C 4E 05 F1 | 	add	fp, #12
32944     A7 FA 61 FC | 	wrlong	result1, fp
32948     0C 4E 85 F1 | 	sub	fp, #12
3294c     00 FA 0D F2 | 	cmp	result1, #0 wz
32950     A8 01 90 5D |  if_ne	jmp	#LR__4988
32954     5C 4E 05 F1 | 	add	fp, #92
32958     A7 12 02 FB | 	rdlong	arg01, fp
3295c     38 4E 05 F1 | 	add	fp, #56
32960     A7 12 62 FC | 	wrlong	arg01, fp
32964     0D 12 06 F1 | 	add	arg01, #13
32968     20 4E 85 F1 | 	sub	fp, #32
3296c     A7 14 02 F6 | 	mov	arg02, fp
32970     74 4E 85 F1 | 	sub	fp, #116
32974     0D 14 06 F1 | 	add	arg02, #13
32978     13 16 06 F6 | 	mov	arg03, #19
3297c     74 24 BF FD | 	call	#__system____builtin_memmove
32980     94 4E 05 F1 | 	add	fp, #148
32984     A7 26 02 FB | 	rdlong	local01, fp
32988     15 4E 85 F1 | 	sub	fp, #21
3298c     A7 FA C1 FA | 	rdbyte	result1, fp
32990     0B 26 06 F1 | 	add	local01, #11
32994     13 FB 41 FC | 	wrbyte	result1, local01
32998     15 4E 05 F1 | 	add	fp, #21
3299c     A7 26 02 FB | 	rdlong	local01, fp
329a0     94 4E 85 F1 | 	sub	fp, #148
329a4     0B 26 06 F1 | 	add	local01, #11
329a8     13 27 C2 FA | 	rdbyte	local01, local01
329ac     10 26 CE F7 | 	test	local01, #16 wz
329b0     24 00 90 5D |  if_ne	jmp	#LR__4984
329b4     94 4E 05 F1 | 	add	fp, #148
329b8     A7 FA 01 FB | 	rdlong	result1, fp
329bc     FD 26 02 F6 | 	mov	local01, result1
329c0     94 4E 85 F1 | 	sub	fp, #148
329c4     0B FA 05 F1 | 	add	result1, #11
329c8     FD FA C1 FA | 	rdbyte	result1, result1
329cc     20 FA 45 F5 | 	or	result1, #32
329d0     0B 26 06 F1 | 	add	local01, #11
329d4     13 FB 41 FC | 	wrbyte	result1, local01
329d8                 | LR__4984
329d8     70 4E 05 F1 | 	add	fp, #112
329dc     A7 26 02 FB | 	rdlong	local01, fp
329e0     03 26 06 F1 | 	add	local01, #3
329e4     13 03 48 FC | 	wrbyte	#1, local01
329e8     24 4E 05 F1 | 	add	fp, #36
329ec     A7 26 02 FB | 	rdlong	local01, fp
329f0     94 4E 85 F1 | 	sub	fp, #148
329f4     0B 26 06 F1 | 	add	local01, #11
329f8     13 27 C2 FA | 	rdbyte	local01, local01
329fc     10 26 CE F7 | 	test	local01, #16 wz
32a00     F8 00 90 AD |  if_e	jmp	#LR__4987
32a04     18 4E 05 F1 | 	add	fp, #24
32a08     A7 16 02 FB | 	rdlong	arg03, fp
32a0c     30 4E 05 F1 | 	add	fp, #48
32a10     A7 26 02 FB | 	rdlong	local01, fp
32a14     48 4E 85 F1 | 	sub	fp, #72
32a18     13 17 0A F2 | 	cmp	arg03, local01 wz
32a1c     DC 00 90 AD |  if_e	jmp	#LR__4987
32a20     70 4E 05 F1 | 	add	fp, #112
32a24     A7 12 02 FB | 	rdlong	arg01, fp
32a28     09 27 02 F6 | 	mov	local01, arg01
32a2c     24 4E 05 F1 | 	add	fp, #36
32a30     A7 14 02 FB | 	rdlong	arg02, fp
32a34     94 4E 85 F1 | 	sub	fp, #148
32a38     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
32a3c     FD 14 02 F6 | 	mov	arg02, result1
32a40     13 13 02 F6 | 	mov	arg01, local01
32a44     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
32a48     98 4E 05 F1 | 	add	fp, #152
32a4c     A7 FA 61 FC | 	wrlong	result1, fp
32a50     00 FA 4D F2 | 	cmps	result1, #0 wz
32a54     98 4E 85 F1 | 	sub	fp, #152
32a58     0C 4E 05 A1 |  if_e	add	fp, #12
32a5c     A7 04 68 AC |  if_e	wrlong	#2, fp
32a60     0C 4E 85 A1 |  if_e	sub	fp, #12
32a64     94 00 90 AD |  if_e	jmp	#LR__4986
32a68     70 4E 05 F1 | 	add	fp, #112
32a6c     A7 12 02 FB | 	rdlong	arg01, fp
32a70     28 4E 05 F1 | 	add	fp, #40
32a74     A7 14 02 FB | 	rdlong	arg02, fp
32a78     98 4E 85 F1 | 	sub	fp, #152
32a7c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
32a80     0C 4E 05 F1 | 	add	fp, #12
32a84     A7 FA 61 FC | 	wrlong	result1, fp
32a88     64 4E 05 F1 | 	add	fp, #100
32a8c     A7 26 02 FB | 	rdlong	local01, fp
32a90     54 26 06 F1 | 	add	local01, #84
32a94     24 4E 05 F1 | 	add	fp, #36
32a98     A7 26 62 FC | 	wrlong	local01, fp
32a9c     88 4E 85 F1 | 	sub	fp, #136
32aa0     A7 26 0A FB | 	rdlong	local01, fp wz
32aa4     0C 4E 85 F1 | 	sub	fp, #12
32aa8     50 00 90 5D |  if_ne	jmp	#LR__4985
32aac     94 4E 05 F1 | 	add	fp, #148
32ab0     A7 26 02 FB | 	rdlong	local01, fp
32ab4     94 4E 85 F1 | 	sub	fp, #148
32ab8     01 26 06 F1 | 	add	local01, #1
32abc     13 27 C2 FA | 	rdbyte	local01, local01
32ac0     2E 26 0E F2 | 	cmp	local01, #46 wz
32ac4     34 00 90 5D |  if_ne	jmp	#LR__4985
32ac8     70 4E 05 F1 | 	add	fp, #112
32acc     A7 12 02 FB | 	rdlong	arg01, fp
32ad0     24 4E 05 F1 | 	add	fp, #36
32ad4     A7 14 02 FB | 	rdlong	arg02, fp
32ad8     4C 4E 85 F1 | 	sub	fp, #76
32adc     A7 16 02 FB | 	rdlong	arg03, fp
32ae0     48 4E 85 F1 | 	sub	fp, #72
32ae4     50 AD BF FD | 	call	#_fatfs_cc_st_clust
32ae8     70 4E 05 F1 | 	add	fp, #112
32aec     A7 26 02 FB | 	rdlong	local01, fp
32af0     70 4E 85 F1 | 	sub	fp, #112
32af4     03 26 06 F1 | 	add	local01, #3
32af8     13 03 48 FC | 	wrbyte	#1, local01
32afc                 | LR__4985
32afc                 | LR__4986
32afc                 | LR__4987
32afc                 | LR__4988
32afc                 | LR__4989
32afc     0C 4E 05 F1 | 	add	fp, #12
32b00     A7 26 0A FB | 	rdlong	local01, fp wz
32b04     0C 4E 85 F1 | 	sub	fp, #12
32b08     40 00 90 5D |  if_ne	jmp	#LR__4991
32b0c     10 4E 05 F1 | 	add	fp, #16
32b10     A7 12 02 F6 | 	mov	arg01, fp
32b14     10 4E 85 F1 | 	sub	fp, #16
32b18     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
32b1c     0C 4E 05 F1 | 	add	fp, #12
32b20     A7 FA 61 FC | 	wrlong	result1, fp
32b24     0C 4E 85 F1 | 	sub	fp, #12
32b28     00 FA 0D F2 | 	cmp	result1, #0 wz
32b2c     1C 00 90 5D |  if_ne	jmp	#LR__4990
32b30     70 4E 05 F1 | 	add	fp, #112
32b34     A7 12 02 FB | 	rdlong	arg01, fp
32b38     70 4E 85 F1 | 	sub	fp, #112
32b3c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
32b40     0C 4E 05 F1 | 	add	fp, #12
32b44     A7 FA 61 FC | 	wrlong	result1, fp
32b48     0C 4E 85 F1 | 	sub	fp, #12
32b4c                 | LR__4990
32b4c                 | LR__4991
32b4c                 | LR__4992
32b4c                 | LR__4993
32b4c                 | ' 					res = sync_fs(fs);
32b4c                 | ' 				}
32b4c                 | ' 			}
32b4c                 | ' 
32b4c                 | ' 		}
32b4c                 | ' 		;
32b4c                 | ' 	}
32b4c                 | ' 
32b4c                 | ' 	return res ;
32b4c     0C 4E 05 F1 | 	add	fp, #12
32b50     A7 FA 01 FB | 	rdlong	result1, fp
32b54     0C 4E 85 F1 | 	sub	fp, #12
32b58     A7 F0 03 F6 | 	mov	ptra, fp
32b5c     B2 00 A0 FD | 	call	#popregs_
32b60                 | _fatfs_cc_f_rename_ret
32b60     2D 00 64 FD | 	ret
32b64                 | 
32b64                 | _fatfs_cc_time
32b64     00 4A 05 F6 | 	mov	COUNT_, #0
32b68     A8 00 A0 FD | 	call	#pushregs_
32b6c     14 F0 07 F1 | 	add	ptra, #20
32b70     04 4E 05 F1 | 	add	fp, #4
32b74     A7 12 62 FC | 	wrlong	arg01, fp
32b78     04 4E 05 F1 | 	add	fp, #4
32b7c     A7 12 02 F6 | 	mov	arg01, fp
32b80     08 4E 85 F1 | 	sub	fp, #8
32b84     00 14 06 F6 | 	mov	arg02, #0
32b88     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
32b8c     08 4E 05 F1 | 	add	fp, #8
32b90     A7 FA 01 FB | 	rdlong	result1, fp
32b94     08 4E 05 F1 | 	add	fp, #8
32b98     A7 FA 61 FC | 	wrlong	result1, fp
32b9c     0C 4E 85 F1 | 	sub	fp, #12
32ba0     A7 FA 09 FB | 	rdlong	result1, fp wz
32ba4     04 4E 85 F1 | 	sub	fp, #4
32ba8     18 00 90 AD |  if_e	jmp	#LR__5000
32bac     04 4E 05 F1 | 	add	fp, #4
32bb0     A7 FA 01 FB | 	rdlong	result1, fp
32bb4     0C 4E 05 F1 | 	add	fp, #12
32bb8     A7 14 02 FB | 	rdlong	arg02, fp
32bbc     10 4E 85 F1 | 	sub	fp, #16
32bc0     FD 14 62 FC | 	wrlong	arg02, result1
32bc4                 | LR__5000
32bc4                 | '         *tp = now;
32bc4                 | '     return now;
32bc4     10 4E 05 F1 | 	add	fp, #16
32bc8     A7 FA 01 FB | 	rdlong	result1, fp
32bcc     10 4E 85 F1 | 	sub	fp, #16
32bd0     A7 F0 03 F6 | 	mov	ptra, fp
32bd4     B2 00 A0 FD | 	call	#popregs_
32bd8                 | _fatfs_cc_time_ret
32bd8     2D 00 64 FD | 	ret
32bdc                 | 
32bdc                 | _fatfs_cc_mktime
32bdc     06 4A 05 F6 | 	mov	COUNT_, #6
32be0     A8 00 A0 FD | 	call	#pushregs_
32be4     09 27 02 F6 | 	mov	local01, arg01
32be8     14 26 06 F1 | 	add	local01, #20
32bec     13 13 02 FB | 	rdlong	arg01, local01
32bf0     14 26 86 F1 | 	sub	local01, #20
32bf4     46 12 56 F2 | 	cmps	arg01, #70 wc
32bf8                 | '                 return (time_t) -1;
32bf8     01 FA 65 C6 |  if_b	neg	result1, #1
32bfc     7C 01 90 CD |  if_b	jmp	#LR__5014
32c00     03 00 00 FF 
32c04     6C 29 06 F6 | 	mov	local02, ##1900
32c08     14 26 06 F1 | 	add	local01, #20
32c0c     13 FB 01 FB | 	rdlong	result1, local01
32c10     FD 28 02 F1 | 	add	local02, result1
32c14     08 26 86 F1 | 	sub	local01, #8
32c18     13 2B 02 FB | 	rdlong	local03, local01
32c1c     01 2A 86 F1 | 	sub	local03, #1
32c20     04 26 06 F1 | 	add	local01, #4
32c24     13 13 02 FB | 	rdlong	arg01, local01
32c28     10 26 86 F1 | 	sub	local01, #16
32c2c     02 12 66 F0 | 	shl	arg01, #2
32c30     02 00 00 FF 
32c34     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
32c38     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
32c3c     09 FB 01 FB | 	rdlong	result1, arg01
32c40     FD 2A 02 F1 | 	add	local03, result1
32c44     14 13 02 F6 | 	mov	arg01, local02
32c48     02 00 00 FF 
32c4c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
32c50     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
32c54     00 FA 0D F2 | 	cmp	result1, #0 wz
32c58     1C 00 90 AD |  if_e	jmp	#LR__5010
32c5c     00 2C 06 F6 | 	mov	local04, #0
32c60     10 26 06 F1 | 	add	local01, #16
32c64     13 FB 01 FB | 	rdlong	result1, local01
32c68     10 26 86 F1 | 	sub	local01, #16
32c6c     02 FA 55 F2 | 	cmps	result1, #2 wc
32c70     01 2C 06 36 |  if_ae	mov	local04, #1
32c74     04 00 90 FD | 	jmp	#LR__5011
32c78                 | LR__5010
32c78     00 2C 06 F6 | 	mov	local04, #0
32c7c                 | LR__5011
32c7c     04 26 06 F1 | 	add	local01, #4
32c80     13 FB 01 FB | 	rdlong	result1, local01
32c84     04 26 86 F1 | 	sub	local01, #4
32c88     13 2F 02 FB | 	rdlong	local05, local01
32c8c     08 26 06 F1 | 	add	local01, #8
32c90     13 13 02 FB | 	rdlong	arg01, local01
32c94     07 00 00 FF 
32c98     10 12 06 FD | 	qmul	arg01, ##3600
32c9c     16 2B 02 F1 | 	add	local03, local04
32ca0     FD 2C 02 F6 | 	mov	local04, result1
32ca4     04 2C 66 F0 | 	shl	local04, #4
32ca8     FD 2C 82 F1 | 	sub	local04, result1
32cac     02 2C 66 F0 | 	shl	local04, #2
32cb0     16 2F 02 F1 | 	add	local05, local04
32cb4     08 26 86 F1 | 	sub	local01, #8
32cb8     18 2C 62 FD | 	getqx	local04
32cbc     A8 00 00 FF 
32cc0     80 2B 06 FD | 	qmul	local03, ##86400
32cc4     16 2F 02 F1 | 	add	local05, local04
32cc8     14 2B 02 F6 | 	mov	local03, local02
32ccc     03 00 00 FF 
32cd0     B2 2B 86 F1 | 	sub	local03, ##1970
32cd4     18 2C 62 FD | 	getqx	local04
32cd8     99 F0 00 FF 
32cdc     80 2B 06 FD | 	qmul	local03, ##31536000
32ce0     16 2F 02 F1 | 	add	local05, local04
32ce4     14 2B 02 F6 | 	mov	local03, local02
32ce8     03 00 00 FF 
32cec     B1 2B 86 F1 | 	sub	local03, ##1969
32cf0     15 31 52 F6 | 	abs	local06, local03 wc
32cf4     02 30 46 F0 | 	shr	local06, #2
32cf8     18 31 82 F6 | 	negc	local06, local06
32cfc     03 00 00 FF 
32d00     D1 29 56 F2 | 	cmps	local02, ##2001 wc
32d04     18 2C 62 FD | 	getqx	local04
32d08     16 2F 02 F1 | 	add	local05, local04
32d0c     18 00 90 CD |  if_b	jmp	#LR__5012
32d10     03 00 00 FF 
32d14     D0 29 86 F1 | 	sub	local02, ##2000
32d18     14 2D 52 F6 | 	abs	local04, local02 wc
32d1c     64 2C 16 FD | 	qdiv	local04, #100
32d20     18 2C 62 FD | 	getqx	local04
32d24     16 31 A2 F3 | 	sumnc	local06, local04
32d28                 | LR__5012
32d28     A8 00 00 FF 
32d2c     80 31 06 FD | 	qmul	local06, ##86400
32d30     18 30 62 FD | 	getqx	local06
32d34     18 2F 02 F1 | 	add	local05, local06
32d38     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
32d3c     02 00 00 FF 
32d40     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
32d44     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
32d48     18 2F 02 F1 | 	add	local05, local06
32d4c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
32d50     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
32d54     02 00 00 FF 
32d58     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
32d5c     01 2A 0E F2 | 	cmp	local03, #1 wz
32d60     14 00 90 5D |  if_ne	jmp	#LR__5013
32d64     13 13 02 F6 | 	mov	arg01, local01
32d68     DC 19 B0 FD | 	call	#_fatfs_cc___indst
32d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
32d70     07 00 00 5F 
32d74     10 2E 86 51 |  if_ne	sub	local05, ##3600
32d78                 | LR__5013
32d78                 | '                 s -=  (3600L) ;
32d78                 | ' 
32d78                 | '         return s;
32d78     17 FB 01 F6 | 	mov	result1, local05
32d7c                 | LR__5014
32d7c     A7 F0 03 F6 | 	mov	ptra, fp
32d80     B2 00 A0 FD | 	call	#popregs_
32d84                 | _fatfs_cc_mktime_ret
32d84     2D 00 64 FD | 	ret
32d88                 | 
32d88                 | _fatfs_cc__gmtime_r
32d88     03 4A 05 F6 | 	mov	COUNT_, #3
32d8c     A8 00 A0 FD | 	call	#pushregs_
32d90     09 27 02 FB | 	rdlong	local01, arg01
32d94     A8 00 00 FF 
32d98     80 27 16 FD | 	qdiv	local01, ##86400
32d9c     18 FA 61 FD | 	getqx	result1
32da0     04 FA 05 F1 | 	add	result1, #4
32da4     07 FA 15 FD | 	qdiv	result1, #7
32da8     18 14 06 F1 | 	add	arg02, #24
32dac     D1 7F 27 FF 
32db0     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
32db4     D1 7F 27 3F 
32db8     00 26 86 31 |  if_ae	sub	local01, ##1325376000
32dbc     03 00 00 3F 
32dc0     DC 29 06 36 |  if_ae	mov	local02, ##2012
32dc4     03 00 00 CF 
32dc8     B2 29 06 C6 |  if_b	mov	local02, ##1970
32dcc                 | ' 	  year = 1970;
32dcc                 | ' 	}
32dcc                 | ' 
32dcc                 | ' 	for(;;) {
32dcc     19 FA 61 FD | 	getqy	result1
32dd0     0A FB 61 FC | 	wrlong	result1, arg02
32dd4     18 14 86 F1 | 	sub	arg02, #24
32dd8                 | LR__5020
32dd8     14 13 02 F6 | 	mov	arg01, local02
32ddc     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
32de0     00 FA 0D F2 | 	cmp	result1, #0 wz
32de4     42 F1 00 5F 
32de8     00 2B 06 56 |  if_ne	mov	local03, ##31622400
32dec     99 F0 00 AF 
32df0     80 2B 06 A6 |  if_e	mov	local03, ##31536000
32df4     15 27 12 F2 | 	cmp	local01, local03 wc
32df8                 | ' 	    break;
32df8     01 28 06 31 |  if_ae	add	local02, #1
32dfc     15 27 82 31 |  if_ae	sub	local01, local03
32e00     D4 FF 9F 3D |  if_ae	jmp	#LR__5020
32e04     A8 00 00 FF 
32e08     80 27 16 FD | 	qdiv	local01, ##86400
32e0c     14 2B 02 F6 | 	mov	local03, local02
32e10     03 00 00 FF 
32e14     6C 2B 86 F1 | 	sub	local03, ##1900
32e18     14 14 06 F1 | 	add	arg02, #20
32e1c     0A 2B 62 FC | 	wrlong	local03, arg02
32e20     08 14 06 F1 | 	add	arg02, #8
32e24     14 13 02 F6 | 	mov	arg01, local02
32e28     18 28 62 FD | 	getqx	local02
32e2c     0A 29 62 FC | 	wrlong	local02, arg02
32e30     1C 14 86 F1 | 	sub	arg02, #28
32e34     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
32e38     00 FA 0D F2 | 	cmp	result1, #0 wz
32e3c     1D 2A 06 56 |  if_ne	mov	local03, #29
32e40     1C 2A 06 A6 |  if_e	mov	local03, #28
32e44     02 00 00 FF 
32e48     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
32e4c     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
32e50     02 00 00 FF 
32e54     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
32e58                 | ' 
32e58                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
32e58                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
32e58     00 12 06 F6 | 	mov	arg01, #0
32e5c     97 2A 48 FB | 	callpa	#(@LR__5022-@LR__5021)>>2,fcache_load_ptr_
32e60                 | LR__5021
32e60     09 2B 02 F6 | 	mov	local03, arg01
32e64     02 2A 66 F0 | 	shl	local03, #2
32e68     02 00 00 FF 
32e6c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
32e70     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
32e74     15 2B 02 FB | 	rdlong	local03, local03
32e78     15 29 52 F2 | 	cmps	local02, local03 wc
32e7c     02 00 00 FF 
32e80     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
32e84     2C 00 90 CD |  if_b	jmp	#LR__5023
32e88     09 2B 02 F6 | 	mov	local03, arg01
32e8c     02 2A 66 F0 | 	shl	local03, #2
32e90     02 00 00 FF 
32e94     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
32e98     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
32e9c     15 2B 02 FB | 	rdlong	local03, local03
32ea0     15 29 82 F1 | 	sub	local02, local03
32ea4     01 12 06 F1 | 	add	arg01, #1
32ea8     02 00 00 FF 
32eac     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
32eb0     AC FF 9F FD | 	jmp	#LR__5021
32eb4                 | LR__5022
32eb4                 | LR__5023
32eb4     A8 00 00 FF 
32eb8     80 27 16 FD | 	qdiv	local01, ##86400
32ebc     10 14 06 F1 | 	add	arg02, #16
32ec0     0A 13 62 FC | 	wrlong	arg01, arg02
32ec4     01 28 06 F1 | 	add	local02, #1
32ec8     04 14 86 F1 | 	sub	arg02, #4
32ecc     0A 29 62 FC | 	wrlong	local02, arg02
32ed0     19 26 62 FD | 	getqy	local01
32ed4     07 00 00 FF 
32ed8     10 26 16 FD | 	qdiv	local01, ##3600
32edc     18 2A 62 FD | 	getqx	local03
32ee0     07 00 00 FF 
32ee4     10 26 16 FD | 	qdiv	local01, ##3600
32ee8     04 14 86 F1 | 	sub	arg02, #4
32eec     0A 2B 62 FC | 	wrlong	local03, arg02
32ef0     19 26 62 FD | 	getqy	local01
32ef4     3C 26 16 FD | 	qdiv	local01, #60
32ef8     18 2A 62 FD | 	getqx	local03
32efc     3C 26 16 FD | 	qdiv	local01, #60
32f00     04 14 86 F1 | 	sub	arg02, #4
32f04     0A 2B 62 FC | 	wrlong	local03, arg02
32f08     04 14 86 F1 | 	sub	arg02, #4
32f0c                 | '         stm->tm_isdst = 0;
32f0c                 | ' 
32f0c                 | ' ;
32f0c                 | '         return stm;
32f0c     0A FB 01 F6 | 	mov	result1, arg02
32f10     19 2A 62 FD | 	getqy	local03
32f14     0A 2B 62 FC | 	wrlong	local03, arg02
32f18     20 14 06 F1 | 	add	arg02, #32
32f1c     0A 01 68 FC | 	wrlong	#0, arg02
32f20     A7 F0 03 F6 | 	mov	ptra, fp
32f24     B2 00 A0 FD | 	call	#popregs_
32f28                 | _fatfs_cc__gmtime_r_ret
32f28     2D 00 64 FD | 	ret
32f2c                 | 
32f2c                 | _fatfs_cc__tzset
32f2c     A5 01 00 FF 
32f30     71 12 06 F6 | 	mov	arg01, ##@LR__5335
32f34     34 00 B0 FD | 	call	#_fatfs_cc_getenv
32f38     FD 12 02 F6 | 	mov	arg01, result1
32f3c     02 00 00 FF 
32f40     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
32f44     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
32f48     02 00 00 FF 
32f4c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
32f50     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
32f54     02 00 00 FF 
32f58     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
32f5c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
32f60     02 00 00 FF 
32f64     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
32f68                 | _fatfs_cc__tzset_ret
32f68     2D 00 64 FD | 	ret
32f6c                 | 
32f6c                 | _fatfs_cc_getenv
32f6c     06 4A 05 F6 | 	mov	COUNT_, #6
32f70     A8 00 A0 FD | 	call	#pushregs_
32f74     09 27 02 F6 | 	mov	local01, arg01
32f78     09 29 02 F6 | 	mov	local02, arg01
32f7c     97 06 48 FB | 	callpa	#(@LR__5031-@LR__5030)>>2,fcache_load_ptr_
32f80                 | LR__5030
32f80     14 FB C9 FA | 	rdbyte	result1, local02 wz
32f84     01 28 06 51 |  if_ne	add	local02, #1
32f88     F4 FF 9F 5D |  if_ne	jmp	#LR__5030
32f8c                 | LR__5031
32f8c     09 29 82 F1 | 	sub	local02, arg01
32f90     14 FB 01 F6 | 	mov	result1, local02
32f94     02 00 00 FF 
32f98     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
32f9c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
32fa0     02 00 00 FF 
32fa4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
32fa8                 | '             return 0;
32fa8     00 FA 05 A6 |  if_e	mov	result1, #0
32fac     5C 00 90 AD |  if_e	jmp	#LR__5034
32fb0                 | ' 
32fb0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
32fb0     02 00 00 FF 
32fb4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
32fb8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
32fbc     02 00 00 FF 
32fc0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
32fc4                 | LR__5032
32fc4     15 2D 0A FB | 	rdlong	local04, local03 wz
32fc8     3C 00 90 AD |  if_e	jmp	#LR__5033
32fcc     16 13 02 F6 | 	mov	arg01, local04
32fd0     13 15 02 F6 | 	mov	arg02, local01
32fd4     14 17 02 F6 | 	mov	arg03, local02
32fd8     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
32fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
32fe0     14 2F 02 A6 |  if_e	mov	local05, local02
32fe4     16 2F 02 A1 |  if_e	add	local05, local04
32fe8     17 31 C2 AA |  if_e	rdbyte	local06, local05
32fec     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
32ff0                 | ' 			return name+len+1;
32ff0     14 2D 02 A1 |  if_e	add	local04, local02
32ff4     01 2C 06 A1 |  if_e	add	local04, #1
32ff8     16 FB 01 A6 |  if_e	mov	result1, local04
32ffc     0C 00 90 AD |  if_e	jmp	#LR__5034
33000     04 2A 06 F1 | 	add	local03, #4
33004     BC FF 9F FD | 	jmp	#LR__5032
33008                 | LR__5033
33008                 | ' 	}
33008                 | ' 	return 0;
33008     00 FA 05 F6 | 	mov	result1, #0
3300c                 | LR__5034
3300c     A7 F0 03 F6 | 	mov	ptra, fp
33010     B2 00 A0 FD | 	call	#popregs_
33014                 | _fatfs_cc_getenv_ret
33014     2D 00 64 FD | 	ret
33018                 | 
33018                 | _fatfs_cc__get_fattime
33018     00 4A 05 F6 | 	mov	COUNT_, #0
3301c     A8 00 A0 FD | 	call	#pushregs_
33020     34 F0 07 F1 | 	add	ptra, #52
33024     00 12 06 F6 | 	mov	arg01, #0
33028     38 FB BF FD | 	call	#_fatfs_cc_time
3302c     04 4E 05 F1 | 	add	fp, #4
33030     A7 FA 61 FC | 	wrlong	result1, fp
33034     A7 12 02 F6 | 	mov	arg01, fp
33038     0C 4E 05 F1 | 	add	fp, #12
3303c     A7 14 02 F6 | 	mov	arg02, fp
33040     10 4E 85 F1 | 	sub	fp, #16
33044     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
33048     24 4E 05 F1 | 	add	fp, #36
3304c     A7 14 02 FB | 	rdlong	arg02, fp
33050     50 14 86 F1 | 	sub	arg02, #80
33054     09 14 66 F0 | 	shl	arg02, #9
33058     04 4E 85 F1 | 	sub	fp, #4
3305c     A7 FA 01 FB | 	rdlong	result1, fp
33060     01 FA 05 F1 | 	add	result1, #1
33064     05 FA 65 F0 | 	shl	result1, #5
33068     FD 14 42 F5 | 	or	arg02, result1
3306c     04 4E 85 F1 | 	sub	fp, #4
33070     A7 FA 01 FB | 	rdlong	result1, fp
33074     FD 14 42 F5 | 	or	arg02, result1
33078     14 4E 85 F1 | 	sub	fp, #20
3307c     A7 14 62 FC | 	wrlong	arg02, fp
33080     10 4E 05 F1 | 	add	fp, #16
33084     A7 14 02 FB | 	rdlong	arg02, fp
33088     0B 14 66 F0 | 	shl	arg02, #11
3308c     04 4E 85 F1 | 	sub	fp, #4
33090     A7 FA 01 FB | 	rdlong	result1, fp
33094     05 FA 65 F0 | 	shl	result1, #5
33098     FD 14 42 F5 | 	or	arg02, result1
3309c     04 4E 85 F1 | 	sub	fp, #4
330a0     A7 FA 01 FB | 	rdlong	result1, fp
330a4     FD 14 42 F5 | 	or	arg02, result1
330a8     04 4E 85 F1 | 	sub	fp, #4
330ac     A7 14 62 FC | 	wrlong	arg02, fp
330b0                 | ' 
330b0                 | '     now = time(0);
330b0                 | '     _gmtime_r (&now, &date);
330b0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
330b0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
330b0                 | '     return (ffdate << 16) | fftime;
330b0     04 4E 85 F1 | 	sub	fp, #4
330b4     A7 FA 01 FB | 	rdlong	result1, fp
330b8     10 FA 65 F0 | 	shl	result1, #16
330bc     08 4E 85 F1 | 	sub	fp, #8
330c0     0A FB 41 F5 | 	or	result1, arg02
330c4     A7 F0 03 F6 | 	mov	ptra, fp
330c8     B2 00 A0 FD | 	call	#popregs_
330cc                 | _fatfs_cc__get_fattime_ret
330cc     2D 00 64 FD | 	ret
330d0                 | 
330d0                 | _fatfs_cc_unixtime_1022
330d0     00 4A 05 F6 | 	mov	COUNT_, #0
330d4     A8 00 A0 FD | 	call	#pushregs_
330d8     34 F0 07 F1 | 	add	ptra, #52
330dc     04 4E 05 F1 | 	add	fp, #4
330e0     A7 12 62 FC | 	wrlong	arg01, fp
330e4     04 4E 05 F1 | 	add	fp, #4
330e8     A7 14 62 FC | 	wrlong	arg02, fp
330ec     04 4E 85 F1 | 	sub	fp, #4
330f0     A7 14 02 FB | 	rdlong	arg02, fp
330f4     09 14 46 F0 | 	shr	arg02, #9
330f8     7F 14 06 F5 | 	and	arg02, #127
330fc     50 FA 05 F6 | 	mov	result1, #80
33100     0A FB 01 F1 | 	add	result1, arg02
33104     20 4E 05 F1 | 	add	fp, #32
33108     A7 FA 61 FC | 	wrlong	result1, fp
3310c     20 4E 85 F1 | 	sub	fp, #32
33110     A7 FA 01 FB | 	rdlong	result1, fp
33114     05 FA 45 F0 | 	shr	result1, #5
33118     FD FA 41 F8 | 	getnib	result1, result1, #0
3311c     01 FA 85 F1 | 	sub	result1, #1
33120     1C 4E 05 F1 | 	add	fp, #28
33124     A7 FA 61 FC | 	wrlong	result1, fp
33128     1C 4E 85 F1 | 	sub	fp, #28
3312c     A7 FA 01 FB | 	rdlong	result1, fp
33130     1F FA 05 F5 | 	and	result1, #31
33134     18 4E 05 F1 | 	add	fp, #24
33138     A7 FA 61 FC | 	wrlong	result1, fp
3313c     14 4E 85 F1 | 	sub	fp, #20
33140     A7 FA 01 FB | 	rdlong	result1, fp
33144     0B FA 45 F0 | 	shr	result1, #11
33148     1F FA 05 F5 | 	and	result1, #31
3314c     10 4E 05 F1 | 	add	fp, #16
33150     A7 FA 61 FC | 	wrlong	result1, fp
33154     10 4E 85 F1 | 	sub	fp, #16
33158     A7 FA 01 FB | 	rdlong	result1, fp
3315c     05 FA 45 F0 | 	shr	result1, #5
33160     3F FA 05 F5 | 	and	result1, #63
33164     0C 4E 05 F1 | 	add	fp, #12
33168     A7 FA 61 FC | 	wrlong	result1, fp
3316c     0C 4E 85 F1 | 	sub	fp, #12
33170     A7 14 02 FB | 	rdlong	arg02, fp
33174     1F 14 06 F5 | 	and	arg02, #31
33178     01 14 66 F0 | 	shl	arg02, #1
3317c     08 4E 05 F1 | 	add	fp, #8
33180     A7 14 62 FC | 	wrlong	arg02, fp
33184     A7 12 02 F6 | 	mov	arg01, fp
33188     10 4E 85 F1 | 	sub	fp, #16
3318c     4C FA BF FD | 	call	#_fatfs_cc_mktime
33190     0C 4E 05 F1 | 	add	fp, #12
33194     A7 FA 61 FC | 	wrlong	result1, fp
33198                 | ' 
33198                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
33198                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
33198                 | '     date.tm_mday = (dosdate & 0x1f);
33198                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
33198                 | '     date.tm_min = (dostime >> 5) & 0x3f;
33198                 | '     date.tm_sec = (dostime & 0x1f) << 1;
33198                 | ' 
33198                 | '     t = mktime(&date);
33198                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33198                 | '     return t;
33198     0C 4E 85 F1 | 	sub	fp, #12
3319c     A7 F0 03 F6 | 	mov	ptra, fp
331a0     B2 00 A0 FD | 	call	#popregs_
331a4                 | _fatfs_cc_unixtime_1022_ret
331a4     2D 00 64 FD | 	ret
331a8                 | 
331a8                 | _fatfs_cc__set_dos_error_1024
331a8     09 01 02 F6 | 	mov	_var01, arg01
331ac                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
331ac                 | '     switch (derr) {
331ac     14 00 26 F3 | 	fle	_var01, #20
331b0     30 00 62 FD | 	jmprel	_var01
331b4                 | LR__5040
331b4     50 00 90 FD | 	jmp	#LR__5041
331b8     84 00 90 FD | 	jmp	#LR__5055
331bc     80 00 90 FD | 	jmp	#LR__5056
331c0     7C 00 90 FD | 	jmp	#LR__5057
331c4     48 00 90 FD | 	jmp	#LR__5042
331c8     44 00 90 FD | 	jmp	#LR__5043
331cc     40 00 90 FD | 	jmp	#LR__5044
331d0     44 00 90 FD | 	jmp	#LR__5045
331d4     48 00 90 FD | 	jmp	#LR__5047
331d8     54 00 90 FD | 	jmp	#LR__5050
331dc     38 00 90 FD | 	jmp	#LR__5046
331e0     4C 00 90 FD | 	jmp	#LR__5051
331e4     48 00 90 FD | 	jmp	#LR__5052
331e8     44 00 90 FD | 	jmp	#LR__5053
331ec     50 00 90 FD | 	jmp	#LR__5058
331f0     4C 00 90 FD | 	jmp	#LR__5058
331f4     48 00 90 FD | 	jmp	#LR__5058
331f8     2C 00 90 FD | 	jmp	#LR__5048
331fc     38 00 90 FD | 	jmp	#LR__5054
33200     2C 00 90 FD | 	jmp	#LR__5049
33204     38 00 90 FD | 	jmp	#LR__5058
33208                 | LR__5041
33208     00 02 06 F6 | 	mov	_var02, #0
3320c                 | '         r = 0;
3320c                 | '         break;
3320c     34 00 90 FD | 	jmp	#LR__5059
33210                 | LR__5042
33210                 | LR__5043
33210                 | LR__5044
33210     04 02 06 F6 | 	mov	_var02, #4
33214                 | '         r =  4 ;
33214                 | '         break;
33214     2C 00 90 FD | 	jmp	#LR__5059
33218                 | LR__5045
33218                 | LR__5046
33218     06 02 06 F6 | 	mov	_var02, #6
3321c                 | '         r =  6 ;
3321c                 | '         break;
3321c     24 00 90 FD | 	jmp	#LR__5059
33220                 | LR__5047
33220     09 02 06 F6 | 	mov	_var02, #9
33224                 | '         r =  9 ;
33224                 | '         break;
33224     1C 00 90 FD | 	jmp	#LR__5059
33228                 | LR__5048
33228     07 02 06 F6 | 	mov	_var02, #7
3322c                 | '         r =  7 ;
3322c                 | '         break;
3322c     14 00 90 FD | 	jmp	#LR__5059
33230                 | LR__5049
33230                 | LR__5050
33230                 | LR__5051
33230                 | LR__5052
33230                 | LR__5053
33230     0A 02 06 F6 | 	mov	_var02, #10
33234                 | '         r =  10 ;
33234                 | '         break;
33234     0C 00 90 FD | 	jmp	#LR__5059
33238                 | LR__5054
33238     0B 02 06 F6 | 	mov	_var02, #11
3323c                 | '         r =  11 ;
3323c                 | '         break;
3323c     04 00 90 FD | 	jmp	#LR__5059
33240                 | LR__5055
33240                 | LR__5056
33240                 | LR__5057
33240                 | LR__5058
33240     0C 02 06 F6 | 	mov	_var02, #12
33244                 | '         r =  12 ;
33244                 | '         break;
33244                 | LR__5059
33244                 | '     }
33244                 | '     return _seterror(r);
33244     00 02 4E F2 | 	cmps	_var02, #0 wz
33248     20 E6 05 F1 | 	add	ptr___system__dat__, #32
3324c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
33250     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
33254     01 FA 65 56 |  if_ne	neg	result1, #1
33258     00 FA 05 A6 |  if_e	mov	result1, #0
3325c                 | _fatfs_cc__set_dos_error_1024_ret
3325c     2D 00 64 FD | 	ret
33260                 | 
33260                 | _fatfs_cc_v_creat
33260     04 4A 05 F6 | 	mov	COUNT_, #4
33264     A8 00 A0 FD | 	call	#pushregs_
33268     09 27 02 F6 | 	mov	local01, arg01
3326c     0A 29 02 F6 | 	mov	local02, arg02
33270     03 00 00 FF 
33274     3C 12 06 F6 | 	mov	arg01, ##1596
33278                 | '     return _gc_alloc(size);
33278     10 14 06 F6 | 	mov	arg02, #16
3327c     28 5E BF FD | 	call	#__system___gc_doalloc
33280     FD 2A 0A F6 | 	mov	local03, result1 wz
33284                 | '       return _seterror( 7 );
33284     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33288     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3328c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33290     01 FA 65 A6 |  if_e	neg	result1, #1
33294     58 00 90 AD |  if_e	jmp	#LR__5061
33298     15 13 02 F6 | 	mov	arg01, local03
3329c     00 14 06 F6 | 	mov	arg02, #0
332a0     03 00 00 FF 
332a4     3C 16 06 F6 | 	mov	arg03, ##1596
332a8     98 00 A0 FD | 	call	#\builtin_bytefill_
332ac     02 00 00 FF 
332b0     14 2A 06 F1 | 	add	local03, ##1044
332b4     15 13 02 F6 | 	mov	arg01, local03
332b8     02 00 00 FF 
332bc     14 2A 86 F1 | 	sub	local03, ##1044
332c0     14 15 02 F6 | 	mov	arg02, local02
332c4     07 16 06 F6 | 	mov	arg03, #7
332c8     B4 CC BF FD | 	call	#_fatfs_cc_f_open
332cc     FD 2C 0A F6 | 	mov	local04, result1 wz
332d0     14 00 90 AD |  if_e	jmp	#LR__5060
332d4     15 13 02 F6 | 	mov	arg01, local03
332d8                 | '     return _gc_free(ptr);
332d8     D8 5E BF FD | 	call	#__system___gc_free
332dc                 | '     free(f);
332dc                 | '     return _set_dos_error(r);
332dc     16 13 02 F6 | 	mov	arg01, local04
332e0     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1024
332e4     08 00 90 FD | 	jmp	#LR__5061
332e8                 | LR__5060
332e8     13 2B 62 FC | 	wrlong	local03, local01
332ec                 | '   }
332ec                 | '   fil->vfsdata = f;
332ec                 | '   return 0;
332ec     00 FA 05 F6 | 	mov	result1, #0
332f0                 | LR__5061
332f0     A7 F0 03 F6 | 	mov	ptra, fp
332f4     B2 00 A0 FD | 	call	#popregs_
332f8                 | _fatfs_cc_v_creat_ret
332f8     2D 00 64 FD | 	ret
332fc                 | 
332fc                 | _fatfs_cc_v_close
332fc     02 4A 05 F6 | 	mov	COUNT_, #2
33300     A8 00 A0 FD | 	call	#pushregs_
33304     09 27 02 FB | 	rdlong	local01, arg01
33308     02 00 00 FF 
3330c     14 26 06 F1 | 	add	local01, ##1044
33310     13 13 02 F6 | 	mov	arg01, local01
33314     02 00 00 FF 
33318     14 26 86 F1 | 	sub	local01, ##1044
3331c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
33320     FD 28 02 F6 | 	mov	local02, result1
33324     13 13 02 F6 | 	mov	arg01, local01
33328                 | '     return _gc_free(ptr);
33328     88 5E BF FD | 	call	#__system___gc_free
3332c                 | '     FAT_FIL *f = fil->vfsdata;
3332c                 | '     r=f_close(&f->fil);
3332c                 | '     free(f);
3332c                 | '     return _set_dos_error(r);
3332c     14 13 02 F6 | 	mov	arg01, local02
33330     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1024
33334     A7 F0 03 F6 | 	mov	ptra, fp
33338     B2 00 A0 FD | 	call	#popregs_
3333c                 | _fatfs_cc_v_close_ret
3333c     2D 00 64 FD | 	ret
33340                 | 
33340                 | _fatfs_cc_v_opendir
33340     04 4A 05 F6 | 	mov	COUNT_, #4
33344     A8 00 A0 FD | 	call	#pushregs_
33348     09 27 02 F6 | 	mov	local01, arg01
3334c     0A 29 02 F6 | 	mov	local02, arg02
33350     30 12 06 F6 | 	mov	arg01, #48
33354                 | '     return _gc_alloc(size);
33354     10 14 06 F6 | 	mov	arg02, #16
33358     4C 5D BF FD | 	call	#__system___gc_doalloc
3335c     FD 2A 0A F6 | 	mov	local03, result1 wz
33360                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33360                 | '       return _seterror( 7 );
33360     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33364     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33368     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3336c     01 FA 65 A6 |  if_e	neg	result1, #1
33370     34 00 90 AD |  if_e	jmp	#LR__5071
33374     14 15 02 F6 | 	mov	arg02, local02
33378     15 13 02 F6 | 	mov	arg01, local03
3337c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
33380     FD 2C 0A F6 | 	mov	local04, result1 wz
33384     14 00 90 AD |  if_e	jmp	#LR__5070
33388     15 13 02 F6 | 	mov	arg01, local03
3338c                 | '     return _gc_free(ptr);
3338c     24 5E BF FD | 	call	#__system___gc_free
33390                 | '         free(f);
33390                 | '         return _set_dos_error(r);
33390     16 13 02 F6 | 	mov	arg01, local04
33394     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1024
33398     0C 00 90 FD | 	jmp	#LR__5071
3339c                 | LR__5070
3339c     04 26 06 F1 | 	add	local01, #4
333a0     13 2B 62 FC | 	wrlong	local03, local01
333a4                 | '     }
333a4                 | '     dir->vfsdata = f;
333a4                 | '     return 0;
333a4     00 FA 05 F6 | 	mov	result1, #0
333a8                 | LR__5071
333a8     A7 F0 03 F6 | 	mov	ptra, fp
333ac     B2 00 A0 FD | 	call	#popregs_
333b0                 | _fatfs_cc_v_opendir_ret
333b0     2D 00 64 FD | 	ret
333b4                 | 
333b4                 | _fatfs_cc_v_closedir
333b4     02 4A 05 F6 | 	mov	COUNT_, #2
333b8     A8 00 A0 FD | 	call	#pushregs_
333bc     04 12 06 F1 | 	add	arg01, #4
333c0     09 27 02 FB | 	rdlong	local01, arg01
333c4     13 13 02 F6 | 	mov	arg01, local01
333c8     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
333cc     FD 28 02 F6 | 	mov	local02, result1
333d0     13 13 02 F6 | 	mov	arg01, local01
333d4                 | '     return _gc_free(ptr);
333d4     DC 5D BF FD | 	call	#__system___gc_free
333d8     00 28 0E F2 | 	cmp	local02, #0 wz
333dc     14 13 02 56 |  if_ne	mov	arg01, local02
333e0     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1024
333e4                 | '     return r;
333e4     14 FB 01 F6 | 	mov	result1, local02
333e8     A7 F0 03 F6 | 	mov	ptra, fp
333ec     B2 00 A0 FD | 	call	#popregs_
333f0                 | _fatfs_cc_v_closedir_ret
333f0     2D 00 64 FD | 	ret
333f4                 | 
333f4                 | _fatfs_cc_v_readdir
333f4     01 4A 05 F6 | 	mov	COUNT_, #1
333f8     A8 00 A0 FD | 	call	#pushregs_
333fc     2C F1 07 F1 | 	add	ptra, #300
33400     04 4E 05 F1 | 	add	fp, #4
33404     A7 12 62 FC | 	wrlong	arg01, fp
33408     04 4E 05 F1 | 	add	fp, #4
3340c     A7 14 62 FC | 	wrlong	arg02, fp
33410     04 4E 85 F1 | 	sub	fp, #4
33414     A7 16 02 FB | 	rdlong	arg03, fp
33418     04 16 06 F1 | 	add	arg03, #4
3341c     0B 13 02 FB | 	rdlong	arg01, arg03
33420     08 4E 05 F1 | 	add	fp, #8
33424     A7 14 02 F6 | 	mov	arg02, fp
33428     0C 4E 85 F1 | 	sub	fp, #12
3342c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
33430     28 4F 05 F1 | 	add	fp, #296
33434     A7 FA 61 FC | 	wrlong	result1, fp
33438     28 4F 85 F1 | 	sub	fp, #296
3343c     00 FA 0D F2 | 	cmp	result1, #0 wz
33440     14 00 90 AD |  if_e	jmp	#LR__5080
33444                 | '         return _set_dos_error(r);
33444     28 4F 05 F1 | 	add	fp, #296
33448     A7 12 02 FB | 	rdlong	arg01, fp
3344c     28 4F 85 F1 | 	sub	fp, #296
33450     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1024
33454     C4 00 90 FD | 	jmp	#LR__5083
33458                 | LR__5080
33458     28 4E 05 F1 | 	add	fp, #40
3345c     A7 16 CA FA | 	rdbyte	arg03, fp wz
33460     28 4E 85 F1 | 	sub	fp, #40
33464                 | '         return -1;
33464     01 FA 65 A6 |  if_e	neg	result1, #1
33468     B0 00 90 AD |  if_e	jmp	#LR__5083
3346c     08 4E 05 F1 | 	add	fp, #8
33470     A7 12 02 FB | 	rdlong	arg01, fp
33474     20 4E 05 F1 | 	add	fp, #32
33478     A7 14 02 F6 | 	mov	arg02, fp
3347c     28 4E 85 F1 | 	sub	fp, #40
33480     3F 16 06 F6 | 	mov	arg03, #63
33484     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
33488     08 4E 05 F1 | 	add	fp, #8
3348c     A7 16 02 FB | 	rdlong	arg03, fp
33490     3F 16 06 F1 | 	add	arg03, #63
33494     0B 01 48 FC | 	wrbyte	#0, arg03
33498     0C 4E 05 F1 | 	add	fp, #12
3349c     A7 16 C2 FA | 	rdbyte	arg03, fp
334a0     14 4E 85 F1 | 	sub	fp, #20
334a4     10 16 CE F7 | 	test	arg03, #16 wz
334a8     18 00 90 AD |  if_e	jmp	#LR__5081
334ac     08 4E 05 F1 | 	add	fp, #8
334b0     A7 16 02 FB | 	rdlong	arg03, fp
334b4     08 4E 85 F1 | 	sub	fp, #8
334b8     50 16 06 F1 | 	add	arg03, #80
334bc     0B 03 48 FC | 	wrbyte	#1, arg03
334c0     14 00 90 FD | 	jmp	#LR__5082
334c4                 | LR__5081
334c4     08 4E 05 F1 | 	add	fp, #8
334c8     A7 16 02 FB | 	rdlong	arg03, fp
334cc     08 4E 85 F1 | 	sub	fp, #8
334d0     50 16 06 F1 | 	add	arg03, #80
334d4     0B 01 48 FC | 	wrbyte	#0, arg03
334d8                 | LR__5082
334d8     08 4E 05 F1 | 	add	fp, #8
334dc     A7 16 02 FB | 	rdlong	arg03, fp
334e0     04 4E 05 F1 | 	add	fp, #4
334e4     A7 14 02 FB | 	rdlong	arg02, fp
334e8     48 16 06 F1 | 	add	arg03, #72
334ec     0B 15 62 FC | 	wrlong	arg02, arg03
334f0     04 4E 85 F1 | 	sub	fp, #4
334f4     A7 26 02 FB | 	rdlong	local01, fp
334f8     08 4E 05 F1 | 	add	fp, #8
334fc     A7 12 E2 FA | 	rdword	arg01, fp
33500     02 4E 05 F1 | 	add	fp, #2
33504     A7 14 E2 FA | 	rdword	arg02, fp
33508     12 4E 85 F1 | 	sub	fp, #18
3350c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1022
33510     4C 26 06 F1 | 	add	local01, #76
33514     13 FB 61 FC | 	wrlong	result1, local01
33518                 | '         ent->d_type =  (0) ;
33518                 | '     }
33518                 | '     ent->d_size = finfo.fsize;
33518                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
33518                 | '     return 0;
33518     00 FA 05 F6 | 	mov	result1, #0
3351c                 | LR__5083
3351c     A7 F0 03 F6 | 	mov	ptra, fp
33520     B2 00 A0 FD | 	call	#popregs_
33524                 | _fatfs_cc_v_readdir_ret
33524     2D 00 64 FD | 	ret
33528                 | 
33528                 | _fatfs_cc_v_stat
33528     03 4A 05 F6 | 	mov	COUNT_, #3
3352c     A8 00 A0 FD | 	call	#pushregs_
33530     30 F1 07 F1 | 	add	ptra, #304
33534     04 4E 05 F1 | 	add	fp, #4
33538     A7 12 62 FC | 	wrlong	arg01, fp
3353c     04 4E 05 F1 | 	add	fp, #4
33540     A7 14 62 FC | 	wrlong	arg02, fp
33544     08 4E 85 F1 | 	sub	fp, #8
33548     0A 13 02 F6 | 	mov	arg01, arg02
3354c     00 14 06 F6 | 	mov	arg02, #0
33550     30 16 06 F6 | 	mov	arg03, #48
33554     98 00 A0 FD | 	call	#\builtin_bytefill_
33558     04 4E 05 F1 | 	add	fp, #4
3355c     A7 FA 01 FB | 	rdlong	result1, fp
33560     04 4E 85 F1 | 	sub	fp, #4
33564     FD FA C9 FA | 	rdbyte	result1, result1 wz
33568     2C 00 90 AD |  if_e	jmp	#LR__5090
3356c     04 4E 05 F1 | 	add	fp, #4
33570     A7 FA 01 FB | 	rdlong	result1, fp
33574     04 4E 85 F1 | 	sub	fp, #4
33578     FD FA C1 FA | 	rdbyte	result1, result1
3357c     2E FA 0D F2 | 	cmp	result1, #46 wz
33580     04 4E 05 A1 |  if_e	add	fp, #4
33584     A7 26 02 AB |  if_e	rdlong	local01, fp
33588     04 4E 85 A1 |  if_e	sub	fp, #4
3358c     01 26 06 A1 |  if_e	add	local01, #1
33590     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
33594     18 00 90 5D |  if_ne	jmp	#LR__5091
33598                 | LR__5090
33598     18 4E 05 F1 | 	add	fp, #24
3359c     A7 20 48 FC | 	wrbyte	#16, fp
335a0     0C 4E 85 F1 | 	sub	fp, #12
335a4     A7 00 68 FC | 	wrlong	#0, fp
335a8     0C 4E 85 F1 | 	sub	fp, #12
335ac     24 00 90 FD | 	jmp	#LR__5092
335b0                 | LR__5091
335b0     04 4E 05 F1 | 	add	fp, #4
335b4     A7 12 02 FB | 	rdlong	arg01, fp
335b8     0C 4E 05 F1 | 	add	fp, #12
335bc     A7 14 02 F6 | 	mov	arg02, fp
335c0     10 4E 85 F1 | 	sub	fp, #16
335c4     AC EB BF FD | 	call	#_fatfs_cc_f_stat
335c8     0C 4E 05 F1 | 	add	fp, #12
335cc     A7 FA 61 FC | 	wrlong	result1, fp
335d0     0C 4E 85 F1 | 	sub	fp, #12
335d4                 | LR__5092
335d4     0C 4E 05 F1 | 	add	fp, #12
335d8     A7 28 0A FB | 	rdlong	local02, fp wz
335dc     0C 4E 85 F1 | 	sub	fp, #12
335e0     14 00 90 AD |  if_e	jmp	#LR__5093
335e4                 | '         return _set_dos_error(r);
335e4     0C 4E 05 F1 | 	add	fp, #12
335e8     A7 12 02 FB | 	rdlong	arg01, fp
335ec     0C 4E 85 F1 | 	sub	fp, #12
335f0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1024
335f4     14 01 90 FD | 	jmp	#LR__5094
335f8                 | LR__5093
335f8     2C 4F 05 F1 | 	add	fp, #300
335fc     A7 48 6A FC | 	wrlong	#292, fp
33600     14 4F 85 F1 | 	sub	fp, #276
33604     A7 2A C2 FA | 	rdbyte	local03, fp
33608     18 4E 85 F1 | 	sub	fp, #24
3360c     01 2A CE F7 | 	test	local03, #1 wz
33610     2C 4F 05 A1 |  if_e	add	fp, #300
33614     A7 2A 02 AB |  if_e	rdlong	local03, fp
33618     92 2A 46 A5 |  if_e	or	local03, #146
3361c     A7 2A 62 AC |  if_e	wrlong	local03, fp
33620     2C 4F 85 A1 |  if_e	sub	fp, #300
33624     18 4E 05 F1 | 	add	fp, #24
33628     A7 2A C2 FA | 	rdbyte	local03, fp
3362c     18 4E 85 F1 | 	sub	fp, #24
33630     10 2A CE F7 | 	test	local03, #16 wz
33634     2C 4F 05 51 |  if_ne	add	fp, #300
33638     A7 2A 02 5B |  if_ne	rdlong	local03, fp
3363c     08 00 00 5F 
33640     49 2A 46 55 |  if_ne	or	local03, ##4169
33644     A7 2A 62 5C |  if_ne	wrlong	local03, fp
33648     2C 4F 85 51 |  if_ne	sub	fp, #300
3364c     08 4E 05 F1 | 	add	fp, #8
33650     A7 2A 02 FB | 	rdlong	local03, fp
33654     24 4F 05 F1 | 	add	fp, #292
33658     A7 28 02 FB | 	rdlong	local02, fp
3365c     08 2A 06 F1 | 	add	local03, #8
33660     15 29 62 FC | 	wrlong	local02, local03
33664     24 4F 85 F1 | 	sub	fp, #292
33668     A7 2A 02 FB | 	rdlong	local03, fp
3366c     0C 2A 06 F1 | 	add	local03, #12
33670     15 03 68 FC | 	wrlong	#1, local03
33674     A7 2A 02 FB | 	rdlong	local03, fp
33678     08 4E 05 F1 | 	add	fp, #8
3367c     A7 28 02 FB | 	rdlong	local02, fp
33680     18 2A 06 F1 | 	add	local03, #24
33684     15 29 62 FC | 	wrlong	local02, local03
33688     08 4E 85 F1 | 	sub	fp, #8
3368c     A7 2A 02 FB | 	rdlong	local03, fp
33690     1C 2A 06 F1 | 	add	local03, #28
33694     01 00 80 FF 
33698     15 01 68 FC | 	wrlong	##512, local03
3369c     A7 28 02 FB | 	rdlong	local02, fp
336a0     14 2B 02 F6 | 	mov	local03, local02
336a4     18 28 06 F1 | 	add	local02, #24
336a8     14 29 02 FB | 	rdlong	local02, local02
336ac     FF 29 06 F1 | 	add	local02, #511
336b0     14 29 52 F6 | 	abs	local02, local02 wc
336b4     09 28 46 F0 | 	shr	local02, #9
336b8     14 29 82 F6 | 	negc	local02, local02
336bc     20 2A 06 F1 | 	add	local03, #32
336c0     15 29 62 FC | 	wrlong	local02, local03
336c4     A7 28 02 FB | 	rdlong	local02, fp
336c8     14 2B 02 F6 | 	mov	local03, local02
336cc     14 27 02 F6 | 	mov	local01, local02
336d0     0C 4E 05 F1 | 	add	fp, #12
336d4     A7 12 E2 FA | 	rdword	arg01, fp
336d8     02 4E 05 F1 | 	add	fp, #2
336dc     A7 14 E2 FA | 	rdword	arg02, fp
336e0     16 4E 85 F1 | 	sub	fp, #22
336e4     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1022
336e8     2C 26 06 F1 | 	add	local01, #44
336ec     13 FB 61 FC | 	wrlong	result1, local01
336f0     28 28 06 F1 | 	add	local02, #40
336f4     14 FB 61 FC | 	wrlong	result1, local02
336f8     24 2A 06 F1 | 	add	local03, #36
336fc     15 FB 61 FC | 	wrlong	result1, local03
33700                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
33700                 | '     }
33700                 | '     buf->st_mode = mode;
33700                 | '     buf->st_nlink = 1;
33700                 | '     buf->st_size = finfo.fsize;
33700                 | '     buf->st_blksize = 512;
33700                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
33700                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
33700                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33700                 | '     return r;
33700     0C 4E 05 F1 | 	add	fp, #12
33704     A7 FA 01 FB | 	rdlong	result1, fp
33708     0C 4E 85 F1 | 	sub	fp, #12
3370c                 | LR__5094
3370c     A7 F0 03 F6 | 	mov	ptra, fp
33710     B2 00 A0 FD | 	call	#popregs_
33714                 | _fatfs_cc_v_stat_ret
33714     2D 00 64 FD | 	ret
33718                 | 
33718                 | _fatfs_cc_v_read
33718     00 4A 05 F6 | 	mov	COUNT_, #0
3371c     A8 00 A0 FD | 	call	#pushregs_
33720     1C F0 07 F1 | 	add	ptra, #28
33724     04 4E 05 F1 | 	add	fp, #4
33728     A7 12 62 FC | 	wrlong	arg01, fp
3372c     04 4E 05 F1 | 	add	fp, #4
33730     A7 14 62 FC | 	wrlong	arg02, fp
33734     04 4E 05 F1 | 	add	fp, #4
33738     A7 16 62 FC | 	wrlong	arg03, fp
3373c     08 4E 85 F1 | 	sub	fp, #8
33740     A7 12 02 FB | 	rdlong	arg01, fp
33744     09 13 0A FB | 	rdlong	arg01, arg01 wz
33748     0C 4E 05 F1 | 	add	fp, #12
3374c     A7 12 62 FC | 	wrlong	arg01, fp
33750     10 4E 85 F1 | 	sub	fp, #16
33754                 | '         return _seterror( 5 );
33754     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33758     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3375c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33760     01 FA 65 A6 |  if_e	neg	result1, #1
33764     B8 00 90 AD |  if_e	jmp	#LR__5102
33768     10 4E 05 F1 | 	add	fp, #16
3376c     A7 12 02 FB | 	rdlong	arg01, fp
33770     02 00 00 FF 
33774     14 12 06 F1 | 	add	arg01, ##1044
33778     08 4E 85 F1 | 	sub	fp, #8
3377c     A7 14 02 FB | 	rdlong	arg02, fp
33780     04 4E 05 F1 | 	add	fp, #4
33784     A7 16 02 FB | 	rdlong	arg03, fp
33788     0C 4E 05 F1 | 	add	fp, #12
3378c     A7 18 02 F6 | 	mov	arg04, fp
33790     18 4E 85 F1 | 	sub	fp, #24
33794     C4 CE BF FD | 	call	#_fatfs_cc_f_read
33798     14 4E 05 F1 | 	add	fp, #20
3379c     A7 FA 61 FC | 	wrlong	result1, fp
337a0     14 4E 85 F1 | 	sub	fp, #20
337a4     00 FA 0D F2 | 	cmp	result1, #0 wz
337a8     34 00 90 AD |  if_e	jmp	#LR__5100
337ac     04 4E 05 F1 | 	add	fp, #4
337b0     A7 18 02 FB | 	rdlong	arg04, fp
337b4     0C 17 02 F6 | 	mov	arg03, arg04
337b8     08 18 06 F1 | 	add	arg04, #8
337bc     0C 19 02 FB | 	rdlong	arg04, arg04
337c0     20 18 46 F5 | 	or	arg04, #32
337c4     08 16 06 F1 | 	add	arg03, #8
337c8     0B 19 62 FC | 	wrlong	arg04, arg03
337cc                 | '         fil->state |=  (0x20) ;
337cc                 | '         return _set_dos_error(r);
337cc     10 4E 05 F1 | 	add	fp, #16
337d0     A7 12 02 FB | 	rdlong	arg01, fp
337d4     14 4E 85 F1 | 	sub	fp, #20
337d8     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
337dc     40 00 90 FD | 	jmp	#LR__5102
337e0                 | LR__5100
337e0     18 4E 05 F1 | 	add	fp, #24
337e4     A7 FA 09 FB | 	rdlong	result1, fp wz
337e8     18 4E 85 F1 | 	sub	fp, #24
337ec     24 00 90 5D |  if_ne	jmp	#LR__5101
337f0     04 4E 05 F1 | 	add	fp, #4
337f4     A7 FA 01 FB | 	rdlong	result1, fp
337f8     FD 18 02 F6 | 	mov	arg04, result1
337fc     04 4E 85 F1 | 	sub	fp, #4
33800     08 FA 05 F1 | 	add	result1, #8
33804     FD FA 01 FB | 	rdlong	result1, result1
33808     10 FA 45 F5 | 	or	result1, #16
3380c     08 18 06 F1 | 	add	arg04, #8
33810     0C FB 61 FC | 	wrlong	result1, arg04
33814                 | LR__5101
33814                 | '         fil->state |=  (0x10) ;
33814                 | '     }
33814                 | '     return x;
33814     18 4E 05 F1 | 	add	fp, #24
33818     A7 FA 01 FB | 	rdlong	result1, fp
3381c     18 4E 85 F1 | 	sub	fp, #24
33820                 | LR__5102
33820     A7 F0 03 F6 | 	mov	ptra, fp
33824     B2 00 A0 FD | 	call	#popregs_
33828                 | _fatfs_cc_v_read_ret
33828     2D 00 64 FD | 	ret
3382c                 | 
3382c                 | _fatfs_cc_v_write
3382c     00 4A 05 F6 | 	mov	COUNT_, #0
33830     A8 00 A0 FD | 	call	#pushregs_
33834     1C F0 07 F1 | 	add	ptra, #28
33838     04 4E 05 F1 | 	add	fp, #4
3383c     A7 12 62 FC | 	wrlong	arg01, fp
33840     04 4E 05 F1 | 	add	fp, #4
33844     A7 14 62 FC | 	wrlong	arg02, fp
33848     04 4E 05 F1 | 	add	fp, #4
3384c     A7 16 62 FC | 	wrlong	arg03, fp
33850     08 4E 85 F1 | 	sub	fp, #8
33854     A7 12 02 FB | 	rdlong	arg01, fp
33858     09 13 0A FB | 	rdlong	arg01, arg01 wz
3385c     0C 4E 05 F1 | 	add	fp, #12
33860     A7 12 62 FC | 	wrlong	arg01, fp
33864     10 4E 85 F1 | 	sub	fp, #16
33868                 | '         return _seterror( 5 );
33868     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3386c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
33870     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33874     01 FA 65 A6 |  if_e	neg	result1, #1
33878     84 00 90 AD |  if_e	jmp	#LR__5111
3387c     10 4E 05 F1 | 	add	fp, #16
33880     A7 12 02 FB | 	rdlong	arg01, fp
33884     02 00 00 FF 
33888     14 12 06 F1 | 	add	arg01, ##1044
3388c     08 4E 85 F1 | 	sub	fp, #8
33890     A7 14 02 FB | 	rdlong	arg02, fp
33894     04 4E 05 F1 | 	add	fp, #4
33898     A7 16 02 FB | 	rdlong	arg03, fp
3389c     0C 4E 05 F1 | 	add	fp, #12
338a0     A7 18 02 F6 | 	mov	arg04, fp
338a4     18 4E 85 F1 | 	sub	fp, #24
338a8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
338ac     14 4E 05 F1 | 	add	fp, #20
338b0     A7 FA 61 FC | 	wrlong	result1, fp
338b4     14 4E 85 F1 | 	sub	fp, #20
338b8     00 FA 0D F2 | 	cmp	result1, #0 wz
338bc     34 00 90 AD |  if_e	jmp	#LR__5110
338c0     04 4E 05 F1 | 	add	fp, #4
338c4     A7 18 02 FB | 	rdlong	arg04, fp
338c8     0C 17 02 F6 | 	mov	arg03, arg04
338cc     08 18 06 F1 | 	add	arg04, #8
338d0     0C 19 02 FB | 	rdlong	arg04, arg04
338d4     20 18 46 F5 | 	or	arg04, #32
338d8     08 16 06 F1 | 	add	arg03, #8
338dc     0B 19 62 FC | 	wrlong	arg04, arg03
338e0                 | '         fil->state |=  (0x20) ;
338e0                 | '         return _set_dos_error(r);
338e0     10 4E 05 F1 | 	add	fp, #16
338e4     A7 12 02 FB | 	rdlong	arg01, fp
338e8     14 4E 85 F1 | 	sub	fp, #20
338ec     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
338f0     0C 00 90 FD | 	jmp	#LR__5111
338f4                 | LR__5110
338f4                 | '     }
338f4                 | '     return x;
338f4     18 4E 05 F1 | 	add	fp, #24
338f8     A7 FA 01 FB | 	rdlong	result1, fp
338fc     18 4E 85 F1 | 	sub	fp, #24
33900                 | LR__5111
33900     A7 F0 03 F6 | 	mov	ptra, fp
33904     B2 00 A0 FD | 	call	#popregs_
33908                 | _fatfs_cc_v_write_ret
33908     2D 00 64 FD | 	ret
3390c                 | 
3390c                 | _fatfs_cc_v_lseek
3390c     04 4A 05 F6 | 	mov	COUNT_, #4
33910     A8 00 A0 FD | 	call	#pushregs_
33914     0A 27 02 F6 | 	mov	local01, arg02
33918     0B 29 02 F6 | 	mov	local02, arg03
3391c     09 2B 02 FB | 	rdlong	local03, arg01
33920     02 00 00 FF 
33924     14 2A 0E F1 | 	add	local03, ##1044 wz
33928                 | '         return _seterror( 5 );
33928     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3392c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
33930     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33934     01 FA 65 A6 |  if_e	neg	result1, #1
33938     4C 00 90 AD |  if_e	jmp	#LR__5122
3393c     00 28 0E F2 | 	cmp	local02, #0 wz
33940     24 00 90 AD |  if_e	jmp	#LR__5120
33944     01 28 0E F2 | 	cmp	local02, #1 wz
33948     14 2A 06 A1 |  if_e	add	local03, #20
3394c     15 2D 02 AB |  if_e	rdlong	local04, local03
33950     14 2A 86 A1 |  if_e	sub	local03, #20
33954     16 27 02 A1 |  if_e	add	local01, local04
33958     0C 2A 06 51 |  if_ne	add	local03, #12
3395c     15 2D 02 5B |  if_ne	rdlong	local04, local03
33960     0C 2A 86 51 |  if_ne	sub	local03, #12
33964     16 27 02 51 |  if_ne	add	local01, local04
33968                 | LR__5120
33968     13 15 02 F6 | 	mov	arg02, local01
3396c     15 13 02 F6 | 	mov	arg01, local03
33970     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
33974     FD 12 0A F6 | 	mov	arg01, result1 wz
33978     08 00 90 AD |  if_e	jmp	#LR__5121
3397c                 | '         return _set_dos_error(result);
3397c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
33980     04 00 90 FD | 	jmp	#LR__5122
33984                 | LR__5121
33984                 | '     }
33984                 | '     return offset;
33984     13 FB 01 F6 | 	mov	result1, local01
33988                 | LR__5122
33988     A7 F0 03 F6 | 	mov	ptra, fp
3398c     B2 00 A0 FD | 	call	#popregs_
33990                 | _fatfs_cc_v_lseek_ret
33990     2D 00 64 FD | 	ret
33994                 | 
33994                 | _fatfs_cc_v_ioctl
33994                 | ' {
33994                 | '     return _seterror( 10 );
33994     20 E6 05 F1 | 	add	ptr___system__dat__, #32
33998     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
3399c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
339a0     01 FA 65 F6 | 	neg	result1, #1
339a4                 | _fatfs_cc_v_ioctl_ret
339a4     2D 00 64 FD | 	ret
339a8                 | 
339a8                 | _fatfs_cc_v_mkdir
339a8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
339ac     FD 12 02 F6 | 	mov	arg01, result1
339b0                 | ' 
339b0                 | '     r = f_mkdir(name);
339b0                 | '     return _set_dos_error(r);
339b0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
339b4                 | _fatfs_cc_v_mkdir_ret
339b4     2D 00 64 FD | 	ret
339b8                 | 
339b8                 | _fatfs_cc_v_remove
339b8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
339bc     FD 12 02 F6 | 	mov	arg01, result1
339c0                 | ' 
339c0                 | '     r = f_unlink(name);
339c0                 | '     return _set_dos_error(r);
339c0     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
339c4                 | _fatfs_cc_v_remove_ret
339c4     2D 00 64 FD | 	ret
339c8                 | 
339c8                 | _fatfs_cc_v_rmdir
339c8     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
339cc     FD 12 02 F6 | 	mov	arg01, result1
339d0                 | ' 
339d0                 | '     r = f_unlink(name);
339d0                 | '     return _set_dos_error(r);
339d0     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
339d4                 | _fatfs_cc_v_rmdir_ret
339d4     2D 00 64 FD | 	ret
339d8                 | 
339d8                 | _fatfs_cc_v_rename
339d8     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
339dc     FD 12 02 F6 | 	mov	arg01, result1
339e0                 | '     return _set_dos_error(r);
339e0     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
339e4                 | _fatfs_cc_v_rename_ret
339e4     2D 00 64 FD | 	ret
339e8                 | 
339e8                 | _fatfs_cc_v_open
339e8     07 4A 05 F6 | 	mov	COUNT_, #7
339ec     A8 00 A0 FD | 	call	#pushregs_
339f0     09 27 02 F6 | 	mov	local01, arg01
339f4     0A 29 02 F6 | 	mov	local02, arg02
339f8     0B 2B 02 F6 | 	mov	local03, arg03
339fc     03 00 00 FF 
33a00     3C 12 06 F6 | 	mov	arg01, ##1596
33a04                 | '     return _gc_alloc(size);
33a04     10 14 06 F6 | 	mov	arg02, #16
33a08     9C 56 BF FD | 	call	#__system___gc_doalloc
33a0c     FD 2C 0A F6 | 	mov	local04, result1 wz
33a10                 | '       return _seterror( 7 );
33a10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33a14     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
33a18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33a1c     01 FA 65 A6 |  if_e	neg	result1, #1
33a20     98 00 90 AD |  if_e	jmp	#LR__5136
33a24     16 13 02 F6 | 	mov	arg01, local04
33a28     00 14 06 F6 | 	mov	arg02, #0
33a2c     03 00 00 FF 
33a30     3C 16 06 F6 | 	mov	arg03, ##1596
33a34     98 00 A0 FD | 	call	#\builtin_bytefill_
33a38                 | '   switch (flags & 3) {
33a38     15 2F 02 F6 | 	mov	local05, local03
33a3c     03 2E 0E F5 | 	and	local05, #3 wz
33a40     0C 00 90 AD |  if_e	jmp	#LR__5130
33a44     01 2E 0E F2 | 	cmp	local05, #1 wz
33a48     0C 00 90 AD |  if_e	jmp	#LR__5131
33a4c     10 00 90 FD | 	jmp	#LR__5132
33a50                 | LR__5130
33a50     01 30 06 F6 | 	mov	local06, #1
33a54                 | '       fs_flags =  0x01 ;
33a54                 | '       break;
33a54     0C 00 90 FD | 	jmp	#LR__5133
33a58                 | LR__5131
33a58     02 30 06 F6 | 	mov	local06, #2
33a5c                 | '       fs_flags =  0x02 ;
33a5c                 | '       break;
33a5c     04 00 90 FD | 	jmp	#LR__5133
33a60                 | LR__5132
33a60     03 30 06 F6 | 	mov	local06, #3
33a64                 | '       fs_flags =  0x01  |  0x02 ;
33a64                 | '       break;
33a64                 | LR__5133
33a64     08 2A CE F7 | 	test	local03, #8 wz
33a68     18 30 46 55 |  if_ne	or	local06, #24
33a6c     08 00 90 5D |  if_ne	jmp	#LR__5134
33a70     20 2A CE F7 | 	test	local03, #32 wz
33a74     30 30 46 55 |  if_ne	or	local06, #48
33a78                 | LR__5134
33a78     02 00 00 FF 
33a7c     14 2C 06 F1 | 	add	local04, ##1044
33a80     16 13 02 F6 | 	mov	arg01, local04
33a84     02 00 00 FF 
33a88     14 2C 86 F1 | 	sub	local04, ##1044
33a8c     14 15 02 F6 | 	mov	arg02, local02
33a90     18 17 02 F6 | 	mov	arg03, local06
33a94     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
33a98     FD 32 0A F6 | 	mov	local07, result1 wz
33a9c     14 00 90 AD |  if_e	jmp	#LR__5135
33aa0     16 13 02 F6 | 	mov	arg01, local04
33aa4                 | '     return _gc_free(ptr);
33aa4     0C 57 BF FD | 	call	#__system___gc_free
33aa8                 | '     free(f);
33aa8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33aa8                 | '     return _set_dos_error(r);
33aa8     19 13 02 F6 | 	mov	arg01, local07
33aac     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
33ab0     08 00 90 FD | 	jmp	#LR__5136
33ab4                 | LR__5135
33ab4     13 2D 62 FC | 	wrlong	local04, local01
33ab8                 | '   }
33ab8                 | '   fil->vfsdata = f;
33ab8                 | '   return 0;
33ab8     00 FA 05 F6 | 	mov	result1, #0
33abc                 | LR__5136
33abc     A7 F0 03 F6 | 	mov	ptra, fp
33ac0     B2 00 A0 FD | 	call	#popregs_
33ac4                 | _fatfs_cc_v_open_ret
33ac4     2D 00 64 FD | 	ret
33ac8                 | 
33ac8                 | _fatfs_cc_v_flush
33ac8     09 13 02 FB | 	rdlong	arg01, arg01
33acc     02 00 00 FF 
33ad0     14 12 0E F1 | 	add	arg01, ##1044 wz
33ad4                 | '         return _seterror( 5 );
33ad4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
33ad8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
33adc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
33ae0     01 FA 65 A6 |  if_e	neg	result1, #1
33ae4     0C 00 90 AD |  if_e	jmp	#LR__5140
33ae8     00 DA BF FD | 	call	#_fatfs_cc_f_sync
33aec     FD 12 02 F6 | 	mov	arg01, result1
33af0                 | '     }
33af0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33af0                 | '     result = f_sync(f);
33af0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33af0                 | '     return _set_dos_error(result);
33af0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1024
33af4                 | LR__5140
33af4                 | _fatfs_cc_v_flush_ret
33af4     2D 00 64 FD | 	ret
33af8                 | 
33af8                 | _fatfs_cc_v_init
33af8                 | ' {
33af8                 | '     return 0;
33af8     00 FA 05 F6 | 	mov	result1, #0
33afc                 | _fatfs_cc_v_init_ret
33afc     2D 00 64 FD | 	ret
33b00                 | 
33b00                 | _fatfs_cc_v_deinit
33b00     A5 01 00 FF 
33b04     74 14 06 F6 | 	mov	arg02, ##@LR__5336
33b08     00 12 06 F6 | 	mov	arg01, #0
33b0c     00 16 06 F6 | 	mov	arg03, #0
33b10     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
33b14     01 00 00 FF 
33b18     08 E4 05 F1 | 	add	objptr, ##520
33b1c     F2 12 02 FB | 	rdlong	arg01, objptr
33b20     04 E4 05 F1 | 	add	objptr, #4
33b24     F2 14 02 FB | 	rdlong	arg02, objptr
33b28     01 00 00 FF 
33b2c     0C E4 85 F1 | 	sub	objptr, ##524
33b30     F0 3D BF FD | 	call	#__system___freepins
33b34                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
33b34                 | '     _freepins(f_pinmask);
33b34                 | '     return 0;
33b34     00 FA 05 F6 | 	mov	result1, #0
33b38                 | _fatfs_cc_v_deinit_ret
33b38     2D 00 64 FD | 	ret
33b3c                 | 
33b3c                 | _fatfs_cc_get_vfs
33b3c     01 4A 05 F6 | 	mov	COUNT_, #1
33b40     A8 00 A0 FD | 	call	#pushregs_
33b44     09 27 02 F6 | 	mov	local01, arg01
33b48     50 12 06 F6 | 	mov	arg01, #80
33b4c     28 55 BF FD | 	call	#__system___gc_alloc_managed
33b50     FD 12 02 F6 | 	mov	arg01, result1
33b54     F2 FA 01 F6 | 	mov	result1, objptr
33b58     00 30 05 FF 
33b5c     00 FA 45 F5 | 	or	result1, ##174063616
33b60     09 FB 61 FC | 	wrlong	result1, arg01
33b64     F2 FA 01 F6 | 	mov	result1, objptr
33b68     00 38 05 FF 
33b6c     00 FA 45 F5 | 	or	result1, ##175112192
33b70     04 12 06 F1 | 	add	arg01, #4
33b74     09 FB 61 FC | 	wrlong	result1, arg01
33b78     F2 FA 01 F6 | 	mov	result1, objptr
33b7c     00 40 05 FF 
33b80     00 FA 45 F5 | 	or	result1, ##176160768
33b84     04 12 06 F1 | 	add	arg01, #4
33b88     09 FB 61 FC | 	wrlong	result1, arg01
33b8c     F2 FA 01 F6 | 	mov	result1, objptr
33b90     00 48 05 FF 
33b94     00 FA 45 F5 | 	or	result1, ##177209344
33b98     04 12 06 F1 | 	add	arg01, #4
33b9c     09 FB 61 FC | 	wrlong	result1, arg01
33ba0     F2 FA 01 F6 | 	mov	result1, objptr
33ba4     00 50 05 FF 
33ba8     00 FA 45 F5 | 	or	result1, ##178257920
33bac     04 12 06 F1 | 	add	arg01, #4
33bb0     09 FB 61 FC | 	wrlong	result1, arg01
33bb4     04 12 06 F1 | 	add	arg01, #4
33bb8     09 01 68 FC | 	wrlong	#0, arg01
33bbc     04 12 06 F1 | 	add	arg01, #4
33bc0     09 27 62 FC | 	wrlong	local01, arg01
33bc4     04 12 06 F1 | 	add	arg01, #4
33bc8     09 01 68 FC | 	wrlong	#0, arg01
33bcc     F2 FA 01 F6 | 	mov	result1, objptr
33bd0     00 58 05 FF 
33bd4     00 FA 45 F5 | 	or	result1, ##179306496
33bd8     04 12 06 F1 | 	add	arg01, #4
33bdc     09 FB 61 FC | 	wrlong	result1, arg01
33be0     F2 FA 01 F6 | 	mov	result1, objptr
33be4     00 60 05 FF 
33be8     00 FA 45 F5 | 	or	result1, ##180355072
33bec     04 12 06 F1 | 	add	arg01, #4
33bf0     09 FB 61 FC | 	wrlong	result1, arg01
33bf4     F2 FA 01 F6 | 	mov	result1, objptr
33bf8     00 68 05 FF 
33bfc     00 FA 45 F5 | 	or	result1, ##181403648
33c00     04 12 06 F1 | 	add	arg01, #4
33c04     09 FB 61 FC | 	wrlong	result1, arg01
33c08     F2 FA 01 F6 | 	mov	result1, objptr
33c0c     00 70 05 FF 
33c10     00 FA 45 F5 | 	or	result1, ##182452224
33c14     04 12 06 F1 | 	add	arg01, #4
33c18     09 FB 61 FC | 	wrlong	result1, arg01
33c1c     F2 FA 01 F6 | 	mov	result1, objptr
33c20     00 78 05 FF 
33c24     00 FA 45 F5 | 	or	result1, ##183500800
33c28     04 12 06 F1 | 	add	arg01, #4
33c2c     09 FB 61 FC | 	wrlong	result1, arg01
33c30     F2 FA 01 F6 | 	mov	result1, objptr
33c34     00 80 05 FF 
33c38     00 FA 45 F5 | 	or	result1, ##184549376
33c3c     04 12 06 F1 | 	add	arg01, #4
33c40     09 FB 61 FC | 	wrlong	result1, arg01
33c44     F2 FA 01 F6 | 	mov	result1, objptr
33c48     00 88 05 FF 
33c4c     00 FA 45 F5 | 	or	result1, ##185597952
33c50     04 12 06 F1 | 	add	arg01, #4
33c54     09 FB 61 FC | 	wrlong	result1, arg01
33c58     F2 FA 01 F6 | 	mov	result1, objptr
33c5c     00 90 05 FF 
33c60     00 FA 45 F5 | 	or	result1, ##186646528
33c64     04 12 06 F1 | 	add	arg01, #4
33c68     09 FB 61 FC | 	wrlong	result1, arg01
33c6c     F2 FA 01 F6 | 	mov	result1, objptr
33c70     00 98 05 FF 
33c74     00 FA 45 F5 | 	or	result1, ##187695104
33c78     04 12 06 F1 | 	add	arg01, #4
33c7c     09 FB 61 FC | 	wrlong	result1, arg01
33c80     F2 FA 01 F6 | 	mov	result1, objptr
33c84     00 A0 05 FF 
33c88     00 FA 45 F5 | 	or	result1, ##188743680
33c8c     04 12 06 F1 | 	add	arg01, #4
33c90     09 FB 61 FC | 	wrlong	result1, arg01
33c94     F2 FA 01 F6 | 	mov	result1, objptr
33c98     00 A8 05 FF 
33c9c     00 FA 45 F5 | 	or	result1, ##189792256
33ca0     04 12 06 F1 | 	add	arg01, #4
33ca4     09 FB 61 FC | 	wrlong	result1, arg01
33ca8     F2 FA 01 F6 | 	mov	result1, objptr
33cac     00 B0 05 FF 
33cb0     00 FA 45 F5 | 	or	result1, ##190840832
33cb4     04 12 06 F1 | 	add	arg01, #4
33cb8     09 FB 61 FC | 	wrlong	result1, arg01
33cbc     4C 12 86 F1 | 	sub	arg01, #76
33cc0                 | ' 
33cc0                 | '     v->close = &v_close;
33cc0                 | '     v->read = &v_read;
33cc0                 | '     v->write = &v_write;
33cc0                 | '     v->lseek = &v_lseek;
33cc0                 | '     v->ioctl = &v_ioctl;
33cc0                 | '     v->flush = 0;
33cc0                 | '     v->vfs_data = ptr;
33cc0                 | '     v->reserved = 0;
33cc0                 | ' 
33cc0                 | '     v->open = &v_open;
33cc0                 | '     v->creat = &v_creat;
33cc0                 | '     v->opendir = &v_opendir;
33cc0                 | '     v->closedir = &v_closedir;
33cc0                 | '     v->readdir = &v_readdir;
33cc0                 | '     v->stat = &v_stat;
33cc0                 | ' 
33cc0                 | '     v->mkdir = &v_mkdir;
33cc0                 | '     v->rmdir = &v_rmdir;
33cc0                 | ' 
33cc0                 | '     v->remove = &v_remove;
33cc0                 | '     v->rename = &v_rename;
33cc0                 | ' 
33cc0                 | '     v->init = &v_init;
33cc0                 | '     v->deinit = &v_deinit;
33cc0                 | ' 
33cc0                 | '     return v;
33cc0     09 FB 01 F6 | 	mov	result1, arg01
33cc4     A7 F0 03 F6 | 	mov	ptra, fp
33cc8     B2 00 A0 FD | 	call	#popregs_
33ccc                 | _fatfs_cc_get_vfs_ret
33ccc     2D 00 64 FD | 	ret
33cd0                 | 
33cd0                 | _fatfs_cc_xmit_mmc_1175
33cd0     01 00 00 FF 
33cd4     10 E4 05 F1 | 	add	objptr, ##528
33cd8     F2 00 02 FB | 	rdlong	_var01, objptr
33cdc     08 E4 05 F1 | 	add	objptr, #8
33ce0     F2 02 02 FB | 	rdlong	_var02, objptr
33ce4     01 00 00 FF 
33ce8     18 E4 85 F1 | 	sub	objptr, ##536
33cec     40 02 62 FD | 	dirl	_var02
33cf0     28 02 64 FD | 	setq	#1
33cf4     09 05 02 FB | 	rdlong	_var03, arg01
33cf8     69 04 62 FD | 	rev	_var03
33cfc     1B 04 FE F9 | 	movbyts	_var03, #27
33d00     01 05 22 FC | 	wypin	_var03, _var02
33d04     0A 05 02 F6 | 	mov	_var03, arg02
33d08     02 14 4E F0 | 	shr	arg02, #2 wz
33d0c     03 04 66 F0 | 	shl	_var03, #3
33d10     00 05 22 FC | 	wypin	_var03, _var01
33d14     41 02 62 FD | 	dirh	_var02
33d18     08 12 06 F1 | 	add	arg01, #8
33d1c     69 06 62 FD | 	rev	_var04
33d20     1B 06 FE F9 | 	movbyts	_var04, #27
33d24                 | LR__5150
33d24     01 07 22 5C |  if_ne	wypin	_var04, _var02
33d28     09 07 02 5B |  if_ne	rdlong	_var04, arg01
33d2c     04 12 06 51 |  if_ne	add	arg01, #4
33d30     69 06 62 5D |  if_ne	rev	_var04
33d34     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
33d38                 | LR__5151
33d38     40 02 72 5D |  if_ne	testp	_var02 wc
33d3c     F8 FF 9F 1D |  if_a	jmp	#LR__5151
33d40     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5150
33d44                 | LR__5152
33d44     40 00 72 FD | 	testp	_var01 wc
33d48     F8 FF 9F 3D |  if_ae	jmp	#LR__5152
33d4c     40 02 62 FD | 	dirl	_var02
33d50     FF FF FF FF 
33d54     01 FF 2B FC | 	wypin	##-1, _var02
33d58     41 02 62 FD | 	dirh	_var02
33d5c                 | _fatfs_cc_xmit_mmc_1175_ret
33d5c     2D 00 64 FD | 	ret
33d60                 | 
33d60                 | _fatfs_cc_rcvr_mmc_1182
33d60     01 00 00 FF 
33d64     10 E4 05 F1 | 	add	objptr, ##528
33d68     F2 00 02 FB | 	rdlong	_var01, objptr
33d6c     0C E4 05 F1 | 	add	objptr, #12
33d70     F2 02 02 FB | 	rdlong	_var02, objptr
33d74     01 00 00 FF 
33d78     1C E4 85 F1 | 	sub	objptr, ##540
33d7c     01 03 08 FC | 	akpin	_var02
33d80     0A 05 0A F6 | 	mov	_var03, arg02 wz
33d84     02 04 4E F0 | 	shr	_var03, #2 wz
33d88     30 00 90 AD |  if_e	jmp	#LR__5162
33d8c     02 07 02 F6 | 	mov	_var04, _var03
33d90     05 06 66 F0 | 	shl	_var04, #5
33d94     00 07 22 FC | 	wypin	_var04, _var01
33d98     01 7F 18 FC | 	wxpin	#63, _var02
33d9c                 | LR__5160
33d9c                 | LR__5161
33d9c     40 02 72 FD | 	testp	_var02 wc
33da0     F8 FF 9F 3D |  if_ae	jmp	#LR__5161
33da4     01 07 8A FA | 	rdpin	_var04, _var02
33da8     69 06 62 FD | 	rev	_var04
33dac     1B 06 FE F9 | 	movbyts	_var04, #27
33db0     09 07 62 FC | 	wrlong	_var04, arg01
33db4     04 12 06 F1 | 	add	arg01, #4
33db8     F8 05 6E FB | 	djnz	_var03, #LR__5160
33dbc                 | LR__5162
33dbc     03 14 0E F5 | 	and	arg02, #3 wz
33dc0     24 00 90 AD |  if_e	jmp	#LR__5165
33dc4     01 4F 18 FC | 	wxpin	#39, _var02
33dc8                 | LR__5163
33dc8     00 11 28 FC | 	wypin	#8, _var01
33dcc                 | LR__5164
33dcc     40 02 72 FD | 	testp	_var02 wc
33dd0     F8 FF 9F 3D |  if_ae	jmp	#LR__5164
33dd4     01 07 8A FA | 	rdpin	_var04, _var02
33dd8     69 06 62 FD | 	rev	_var04
33ddc     09 07 42 FC | 	wrbyte	_var04, arg01
33de0     01 12 06 F1 | 	add	arg01, #1
33de4     F8 15 6E FB | 	djnz	arg02, #LR__5163
33de8                 | LR__5165
33de8                 | _fatfs_cc_rcvr_mmc_1182_ret
33de8     2D 00 64 FD | 	ret
33dec                 | 
33dec                 | _fatfs_cc_wait_ready_1186
33dec     01 4A 05 F6 | 	mov	COUNT_, #1
33df0     A8 00 A0 FD | 	call	#pushregs_
33df4     10 F0 07 F1 | 	add	ptra, #16
33df8     1A FA 61 FD | 	getct	result1
33dfc     08 4E 05 F1 | 	add	fp, #8
33e00     A7 FA 61 FC | 	wrlong	result1, fp
33e04     14 26 06 FB | 	rdlong	local01, #20
33e08     01 26 46 F0 | 	shr	local01, #1
33e0c     04 4E 05 F1 | 	add	fp, #4
33e10     A7 26 62 FC | 	wrlong	local01, fp
33e14     0C 4E 85 F1 | 	sub	fp, #12
33e18                 | ' {
33e18                 | ' 	BYTE d;
33e18                 | ' 	UINT tmr, tmout;
33e18                 | ' 
33e18                 | ' 	tmr = _cnt();
33e18                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
33e18                 | ' 	for(;;) {
33e18                 | LR__5170
33e18     04 4E 05 F1 | 	add	fp, #4
33e1c     A7 12 02 F6 | 	mov	arg01, fp
33e20     04 4E 85 F1 | 	sub	fp, #4
33e24     01 14 06 F6 | 	mov	arg02, #1
33e28     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
33e2c     04 4E 05 F1 | 	add	fp, #4
33e30     A7 26 C2 FA | 	rdbyte	local01, fp
33e34     04 4E 85 F1 | 	sub	fp, #4
33e38     FF 26 0E F2 | 	cmp	local01, #255 wz
33e3c     01 FA 05 A6 |  if_e	mov	result1, #1
33e40     28 00 90 AD |  if_e	jmp	#LR__5171
33e44     1A FA 61 FD | 	getct	result1
33e48     08 4E 05 F1 | 	add	fp, #8
33e4c     A7 26 02 FB | 	rdlong	local01, fp
33e50     13 FB 81 F1 | 	sub	result1, local01
33e54     04 4E 05 F1 | 	add	fp, #4
33e58     A7 26 02 FB | 	rdlong	local01, fp
33e5c     0C 4E 85 F1 | 	sub	fp, #12
33e60     13 FB 11 F2 | 	cmp	result1, local01 wc
33e64     00 FA 05 36 |  if_ae	mov	result1, #0
33e68     AC FF 9F CD |  if_b	jmp	#LR__5170
33e6c                 | LR__5171
33e6c     A7 F0 03 F6 | 	mov	ptra, fp
33e70     B2 00 A0 FD | 	call	#popregs_
33e74                 | _fatfs_cc_wait_ready_1186_ret
33e74     2D 00 64 FD | 	ret
33e78                 | 
33e78                 | _fatfs_cc_deselect_1192
33e78     00 4A 05 F6 | 	mov	COUNT_, #0
33e7c     A8 00 A0 FD | 	call	#pushregs_
33e80     14 F0 07 F1 | 	add	ptra, #20
33e84     01 00 00 FF 
33e88     14 E4 05 F1 | 	add	objptr, ##532
33e8c     F2 14 02 FB | 	rdlong	arg02, objptr
33e90     04 4E 05 F1 | 	add	fp, #4
33e94     A7 14 62 FC | 	wrlong	arg02, fp
33e98     04 E4 85 F1 | 	sub	objptr, #4
33e9c     F2 14 02 FB | 	rdlong	arg02, objptr
33ea0     04 4E 05 F1 | 	add	fp, #4
33ea4     A7 14 62 FC | 	wrlong	arg02, fp
33ea8     08 E4 05 F1 | 	add	objptr, #8
33eac     F2 14 02 FB | 	rdlong	arg02, objptr
33eb0     04 4E 05 F1 | 	add	fp, #4
33eb4     A7 14 62 FC | 	wrlong	arg02, fp
33eb8     04 E4 05 F1 | 	add	objptr, #4
33ebc     F2 14 02 FB | 	rdlong	arg02, objptr
33ec0     01 00 00 FF 
33ec4     1C E4 85 F1 | 	sub	objptr, ##540
33ec8     04 4E 05 F1 | 	add	fp, #4
33ecc     A7 14 62 FC | 	wrlong	arg02, fp
33ed0     0C 4E 85 F1 | 	sub	fp, #12
33ed4     A7 12 02 FB | 	rdlong	arg01, fp
33ed8     04 4E 85 F1 | 	sub	fp, #4
33edc     59 12 62 FD | 	drvh	arg01
33ee0     1F 20 64 FD | 	waitx	#16
33ee4     A7 12 02 F6 | 	mov	arg01, fp
33ee8     01 14 06 F6 | 	mov	arg02, #1
33eec     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
33ef0     A7 F0 03 F6 | 	mov	ptra, fp
33ef4     B2 00 A0 FD | 	call	#popregs_
33ef8                 | _fatfs_cc_deselect_1192_ret
33ef8     2D 00 64 FD | 	ret
33efc                 | 
33efc                 | _fatfs_cc_select_1196
33efc     00 4A 05 F6 | 	mov	COUNT_, #0
33f00     A8 00 A0 FD | 	call	#pushregs_
33f04     10 F0 07 F1 | 	add	ptra, #16
33f08     01 00 00 FF 
33f0c     14 E4 05 F1 | 	add	objptr, ##532
33f10     F2 14 02 FB | 	rdlong	arg02, objptr
33f14     08 4E 05 F1 | 	add	fp, #8
33f18     A7 14 62 FC | 	wrlong	arg02, fp
33f1c     08 E4 05 F1 | 	add	objptr, #8
33f20     F2 12 02 FB | 	rdlong	arg01, objptr
33f24     01 00 00 FF 
33f28     1C E4 85 F1 | 	sub	objptr, ##540
33f2c     04 4E 05 F1 | 	add	fp, #4
33f30     A7 12 62 FC | 	wrlong	arg01, fp
33f34     50 12 62 FD | 	fltl	arg01
33f38     04 4E 85 F1 | 	sub	fp, #4
33f3c     A7 12 02 FB | 	rdlong	arg01, fp
33f40     58 12 62 FD | 	drvl	arg01
33f44     1F 20 64 FD | 	waitx	#16
33f48     04 4E 05 F1 | 	add	fp, #4
33f4c     A7 12 02 FB | 	rdlong	arg01, fp
33f50     41 12 62 FD | 	dirh	arg01
33f54     08 4E 85 F1 | 	sub	fp, #8
33f58     A7 12 02 F6 | 	mov	arg01, fp
33f5c     04 4E 85 F1 | 	sub	fp, #4
33f60     01 14 06 F6 | 	mov	arg02, #1
33f64     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
33f68     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1186
33f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
33f70     01 FA 05 56 |  if_ne	mov	result1, #1
33f74     08 00 90 5D |  if_ne	jmp	#LR__5180
33f78     FC FE BF FD | 	call	#_fatfs_cc_deselect_1192
33f7c                 | ' 
33f7c                 | ' 	deselect();
33f7c                 | ' 	return 0;
33f7c     00 FA 05 F6 | 	mov	result1, #0
33f80                 | LR__5180
33f80     A7 F0 03 F6 | 	mov	ptra, fp
33f84     B2 00 A0 FD | 	call	#popregs_
33f88                 | _fatfs_cc_select_1196_ret
33f88     2D 00 64 FD | 	ret
33f8c                 | 
33f8c                 | _fatfs_cc_rcvr_datablock_1200
33f8c     01 4A 05 F6 | 	mov	COUNT_, #1
33f90     A8 00 A0 FD | 	call	#pushregs_
33f94     18 F0 07 F1 | 	add	ptra, #24
33f98     04 4E 05 F1 | 	add	fp, #4
33f9c     A7 12 62 FC | 	wrlong	arg01, fp
33fa0     04 4E 05 F1 | 	add	fp, #4
33fa4     A7 14 62 FC | 	wrlong	arg02, fp
33fa8     1A FA 61 FD | 	getct	result1
33fac     08 4E 05 F1 | 	add	fp, #8
33fb0     A7 FA 61 FC | 	wrlong	result1, fp
33fb4     14 26 06 FB | 	rdlong	local01, #20
33fb8     03 26 46 F0 | 	shr	local01, #3
33fbc     04 4E 05 F1 | 	add	fp, #4
33fc0     A7 26 62 FC | 	wrlong	local01, fp
33fc4     14 4E 85 F1 | 	sub	fp, #20
33fc8                 | ' 	BYTE *buff,
33fc8                 | ' 	UINT btr
33fc8                 | ' )
33fc8                 | ' {
33fc8                 | ' 	BYTE d[2];
33fc8                 | ' 	UINT tmr, tmout;
33fc8                 | ' 
33fc8                 | ' 	tmr = _cnt();
33fc8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
33fc8                 | ' 	for(;;) {
33fc8                 | LR__5190
33fc8     0C 4E 05 F1 | 	add	fp, #12
33fcc     A7 12 02 F6 | 	mov	arg01, fp
33fd0     0C 4E 85 F1 | 	sub	fp, #12
33fd4     01 14 06 F6 | 	mov	arg02, #1
33fd8     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
33fdc     0C 4E 05 F1 | 	add	fp, #12
33fe0     A7 26 C2 FA | 	rdbyte	local01, fp
33fe4     0C 4E 85 F1 | 	sub	fp, #12
33fe8     FF 26 0E F2 | 	cmp	local01, #255 wz
33fec     28 00 90 5D |  if_ne	jmp	#LR__5191
33ff0     1A FA 61 FD | 	getct	result1
33ff4     FD 26 02 F6 | 	mov	local01, result1
33ff8     10 4E 05 F1 | 	add	fp, #16
33ffc     A7 14 02 FB | 	rdlong	arg02, fp
34000     0A 27 82 F1 | 	sub	local01, arg02
34004     04 4E 05 F1 | 	add	fp, #4
34008     A7 14 02 FB | 	rdlong	arg02, fp
3400c     14 4E 85 F1 | 	sub	fp, #20
34010     0A 27 12 F2 | 	cmp	local01, arg02 wc
34014     B0 FF 9F CD |  if_b	jmp	#LR__5190
34018                 | LR__5191
34018     0C 4E 05 F1 | 	add	fp, #12
3401c     A7 26 C2 FA | 	rdbyte	local01, fp
34020     0C 4E 85 F1 | 	sub	fp, #12
34024     FE 26 0E F2 | 	cmp	local01, #254 wz
34028     00 FA 05 56 |  if_ne	mov	result1, #0
3402c     30 00 90 5D |  if_ne	jmp	#LR__5192
34030     04 4E 05 F1 | 	add	fp, #4
34034     A7 12 02 FB | 	rdlong	arg01, fp
34038     04 4E 05 F1 | 	add	fp, #4
3403c     A7 14 02 FB | 	rdlong	arg02, fp
34040     08 4E 85 F1 | 	sub	fp, #8
34044     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
34048     0C 4E 05 F1 | 	add	fp, #12
3404c     A7 12 02 F6 | 	mov	arg01, fp
34050     0C 4E 85 F1 | 	sub	fp, #12
34054     02 14 06 F6 | 	mov	arg02, #2
34058     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
3405c                 | ' 
3405c                 | ' 	rcvr_mmc(buff, btr);
3405c                 | ' 	rcvr_mmc(d, 2);
3405c                 | ' 
3405c                 | ' 	return 1;
3405c     01 FA 05 F6 | 	mov	result1, #1
34060                 | LR__5192
34060     A7 F0 03 F6 | 	mov	ptra, fp
34064     B2 00 A0 FD | 	call	#popregs_
34068                 | _fatfs_cc_rcvr_datablock_1200_ret
34068     2D 00 64 FD | 	ret
3406c                 | 
3406c                 | _fatfs_cc_xmit_datablock_1202
3406c     00 4A 05 F6 | 	mov	COUNT_, #0
34070     A8 00 A0 FD | 	call	#pushregs_
34074     10 F0 07 F1 | 	add	ptra, #16
34078     04 4E 05 F1 | 	add	fp, #4
3407c     A7 12 62 FC | 	wrlong	arg01, fp
34080     04 4E 05 F1 | 	add	fp, #4
34084     A7 14 42 FC | 	wrbyte	arg02, fp
34088     08 4E 85 F1 | 	sub	fp, #8
3408c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1186
34090     00 FA 0D F2 | 	cmp	result1, #0 wz
34094     00 FA 05 A6 |  if_e	mov	result1, #0
34098     90 00 90 AD |  if_e	jmp	#LR__5201
3409c     08 4E 05 F1 | 	add	fp, #8
340a0     A7 14 C2 FA | 	rdbyte	arg02, fp
340a4     04 4E 05 F1 | 	add	fp, #4
340a8     A7 14 42 FC | 	wrbyte	arg02, fp
340ac     A7 12 02 F6 | 	mov	arg01, fp
340b0     0C 4E 85 F1 | 	sub	fp, #12
340b4     01 14 06 F6 | 	mov	arg02, #1
340b8     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1175
340bc     08 4E 05 F1 | 	add	fp, #8
340c0     A7 14 C2 FA | 	rdbyte	arg02, fp
340c4     08 4E 85 F1 | 	sub	fp, #8
340c8     FD 14 0E F2 | 	cmp	arg02, #253 wz
340cc     58 00 90 AD |  if_e	jmp	#LR__5200
340d0     04 4E 05 F1 | 	add	fp, #4
340d4     A7 12 02 FB | 	rdlong	arg01, fp
340d8     04 4E 85 F1 | 	sub	fp, #4
340dc     09 14 C6 F9 | 	decod	arg02, #9
340e0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1175
340e4     0C 4E 05 F1 | 	add	fp, #12
340e8     A7 12 02 F6 | 	mov	arg01, fp
340ec     0C 4E 85 F1 | 	sub	fp, #12
340f0     02 14 06 F6 | 	mov	arg02, #2
340f4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
340f8     0C 4E 05 F1 | 	add	fp, #12
340fc     A7 12 02 F6 | 	mov	arg01, fp
34100     0C 4E 85 F1 | 	sub	fp, #12
34104     01 14 06 F6 | 	mov	arg02, #1
34108     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
3410c     0C 4E 05 F1 | 	add	fp, #12
34110     A7 14 C2 FA | 	rdbyte	arg02, fp
34114     0C 4E 85 F1 | 	sub	fp, #12
34118     1F 14 06 F5 | 	and	arg02, #31
3411c     05 14 0E F2 | 	cmp	arg02, #5 wz
34120                 | ' 			return 0;
34120     00 FA 05 56 |  if_ne	mov	result1, #0
34124     04 00 90 5D |  if_ne	jmp	#LR__5201
34128                 | LR__5200
34128                 | ' 	}
34128                 | ' 
34128                 | ' 	return 1;
34128     01 FA 05 F6 | 	mov	result1, #1
3412c                 | LR__5201
3412c     A7 F0 03 F6 | 	mov	ptra, fp
34130     B2 00 A0 FD | 	call	#popregs_
34134                 | _fatfs_cc_xmit_datablock_1202_ret
34134     2D 00 64 FD | 	ret
34138                 | 
34138                 | _fatfs_cc_send_cmd_1206
34138     01 4A 05 F6 | 	mov	COUNT_, #1
3413c     A8 00 A0 FD | 	call	#pushregs_
34140     1C F0 07 F1 | 	add	ptra, #28
34144                 | _fatfs_cc_send_cmd_1206_enter
34144     04 4E 05 F1 | 	add	fp, #4
34148     A7 12 42 FC | 	wrbyte	arg01, fp
3414c     04 4E 05 F1 | 	add	fp, #4
34150     A7 14 62 FC | 	wrlong	arg02, fp
34154     04 4E 85 F1 | 	sub	fp, #4
34158     A7 FA C1 FA | 	rdbyte	result1, fp
3415c     04 4E 85 F1 | 	sub	fp, #4
34160     80 FA CD F7 | 	test	result1, #128 wz
34164     44 00 90 AD |  if_e	jmp	#LR__5210
34168     04 4E 05 F1 | 	add	fp, #4
3416c     A7 14 C2 FA | 	rdbyte	arg02, fp
34170     7F 14 06 F5 | 	and	arg02, #127
34174     A7 14 42 FC | 	wrbyte	arg02, fp
34178     04 4E 85 F1 | 	sub	fp, #4
3417c     37 12 06 F6 | 	mov	arg01, #55
34180     00 14 06 F6 | 	mov	arg02, #0
34184     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1206
34188     0C 4E 05 F1 | 	add	fp, #12
3418c     A7 FA 41 FC | 	wrbyte	result1, fp
34190     A7 14 C2 FA | 	rdbyte	arg02, fp
34194     0C 4E 85 F1 | 	sub	fp, #12
34198     02 14 16 F2 | 	cmp	arg02, #2 wc
3419c     0C 4E 05 31 |  if_ae	add	fp, #12
341a0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
341a4     0C 4E 85 31 |  if_ae	sub	fp, #12
341a8     6C 01 90 3D |  if_ae	jmp	#LR__5214
341ac                 | LR__5210
341ac     04 4E 05 F1 | 	add	fp, #4
341b0     A7 14 C2 FA | 	rdbyte	arg02, fp
341b4     04 4E 85 F1 | 	sub	fp, #4
341b8     0C 14 0E F2 | 	cmp	arg02, #12 wz
341bc     14 00 90 AD |  if_e	jmp	#LR__5211
341c0     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1192
341c4     34 FD BF FD | 	call	#_fatfs_cc_select_1196
341c8     00 FA 0D F2 | 	cmp	result1, #0 wz
341cc     FF FA 05 A6 |  if_e	mov	result1, #255
341d0     44 01 90 AD |  if_e	jmp	#LR__5214
341d4                 | LR__5211
341d4     04 4E 05 F1 | 	add	fp, #4
341d8     A7 14 C2 FA | 	rdbyte	arg02, fp
341dc     40 FA 05 F6 | 	mov	result1, #64
341e0     0A FB 41 F5 | 	or	result1, arg02
341e4     10 4E 05 F1 | 	add	fp, #16
341e8     A7 FA 41 FC | 	wrbyte	result1, fp
341ec     0C 4E 85 F1 | 	sub	fp, #12
341f0     A7 FA 01 FB | 	rdlong	result1, fp
341f4     18 FA 45 F0 | 	shr	result1, #24
341f8     0D 4E 05 F1 | 	add	fp, #13
341fc     A7 FA 41 FC | 	wrbyte	result1, fp
34200     0D 4E 85 F1 | 	sub	fp, #13
34204     A7 FA 01 FB | 	rdlong	result1, fp
34208     10 FA 45 F0 | 	shr	result1, #16
3420c     0E 4E 05 F1 | 	add	fp, #14
34210     A7 FA 41 FC | 	wrbyte	result1, fp
34214     0E 4E 85 F1 | 	sub	fp, #14
34218     A7 FA 01 FB | 	rdlong	result1, fp
3421c     08 FA 45 F0 | 	shr	result1, #8
34220     0F 4E 05 F1 | 	add	fp, #15
34224     A7 FA 41 FC | 	wrbyte	result1, fp
34228     0F 4E 85 F1 | 	sub	fp, #15
3422c     A7 FA 01 FB | 	rdlong	result1, fp
34230     10 4E 05 F1 | 	add	fp, #16
34234     A7 FA 41 FC | 	wrbyte	result1, fp
34238     0C 4E 85 F1 | 	sub	fp, #12
3423c     A7 02 48 FC | 	wrbyte	#1, fp
34240     08 4E 85 F1 | 	sub	fp, #8
34244     A7 FA C9 FA | 	rdbyte	result1, fp wz
34248     04 4E 85 F1 | 	sub	fp, #4
3424c     0C 4E 05 A1 |  if_e	add	fp, #12
34250     A7 2A 49 AC |  if_e	wrbyte	#149, fp
34254     0C 4E 85 A1 |  if_e	sub	fp, #12
34258     04 4E 05 F1 | 	add	fp, #4
3425c     A7 FA C1 FA | 	rdbyte	result1, fp
34260     04 4E 85 F1 | 	sub	fp, #4
34264     08 FA 0D F2 | 	cmp	result1, #8 wz
34268     0C 4E 05 A1 |  if_e	add	fp, #12
3426c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
34270     0C 4E 85 A1 |  if_e	sub	fp, #12
34274     0C 4E 05 F1 | 	add	fp, #12
34278     A7 14 C2 FA | 	rdbyte	arg02, fp
3427c     0D 4E 05 F1 | 	add	fp, #13
34280     A7 14 42 FC | 	wrbyte	arg02, fp
34284     05 4E 85 F1 | 	sub	fp, #5
34288     A7 12 02 F6 | 	mov	arg01, fp
3428c     14 4E 85 F1 | 	sub	fp, #20
34290     06 14 06 F6 | 	mov	arg02, #6
34294     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1175
34298     04 4E 05 F1 | 	add	fp, #4
3429c     A7 26 C2 FA | 	rdbyte	local01, fp
342a0     04 4E 85 F1 | 	sub	fp, #4
342a4     0C 26 0E F2 | 	cmp	local01, #12 wz
342a8     10 4E 05 A1 |  if_e	add	fp, #16
342ac     A7 12 02 A6 |  if_e	mov	arg01, fp
342b0     10 4E 85 A1 |  if_e	sub	fp, #16
342b4     01 14 06 A6 |  if_e	mov	arg02, #1
342b8     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1182
342bc     0C 4E 05 F1 | 	add	fp, #12
342c0     A7 14 48 FC | 	wrbyte	#10, fp
342c4     0C 4E 85 F1 | 	sub	fp, #12
342c8                 | ' 	n = 10;
342c8                 | ' 	do
342c8                 | LR__5212
342c8     10 4E 05 F1 | 	add	fp, #16
342cc     A7 12 02 F6 | 	mov	arg01, fp
342d0     10 4E 85 F1 | 	sub	fp, #16
342d4     01 14 06 F6 | 	mov	arg02, #1
342d8     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1182
342dc     10 4E 05 F1 | 	add	fp, #16
342e0     A7 26 C2 FA | 	rdbyte	local01, fp
342e4     10 4E 85 F1 | 	sub	fp, #16
342e8     80 26 CE F7 | 	test	local01, #128 wz
342ec     1C 00 90 AD |  if_e	jmp	#LR__5213
342f0     0C 4E 05 F1 | 	add	fp, #12
342f4     A7 26 C2 FA | 	rdbyte	local01, fp
342f8     01 26 86 F1 | 	sub	local01, #1
342fc     A7 26 42 FC | 	wrbyte	local01, fp
34300     A7 26 CA FA | 	rdbyte	local01, fp wz
34304     0C 4E 85 F1 | 	sub	fp, #12
34308     BC FF 9F 5D |  if_ne	jmp	#LR__5212
3430c                 | LR__5213
3430c                 | ' 
3430c                 | ' 	return d;
3430c     10 4E 05 F1 | 	add	fp, #16
34310     A7 FA C1 FA | 	rdbyte	result1, fp
34314     10 4E 85 F1 | 	sub	fp, #16
34318                 | LR__5214
34318     A7 F0 03 F6 | 	mov	ptra, fp
3431c     B2 00 A0 FD | 	call	#popregs_
34320                 | _fatfs_cc_send_cmd_1206_ret
34320     2D 00 64 FD | 	ret
34324                 | 
34324                 | _fatfs_cc_disk_deinitialize
34324     03 4A 05 F6 | 	mov	COUNT_, #3
34328     A8 00 A0 FD | 	call	#pushregs_
3432c     00 12 4E F2 | 	cmps	arg01, #0 wz
34330     01 00 00 FF 
34334     14 E4 05 F1 | 	add	objptr, ##532
34338     F2 12 02 FB | 	rdlong	arg01, objptr
3433c     04 E4 85 F1 | 	sub	objptr, #4
34340     F2 26 02 FB | 	rdlong	local01, objptr
34344     08 E4 05 F1 | 	add	objptr, #8
34348     F2 28 02 FB | 	rdlong	local02, objptr
3434c     04 E4 05 F1 | 	add	objptr, #4
34350     F2 2A 02 FB | 	rdlong	local03, objptr
34354     01 00 00 FF 
34358     1C E4 85 F1 | 	sub	objptr, ##540
3435c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
3435c                 | '         return RES_NOTRDY;
3435c     03 FA 05 56 |  if_ne	mov	result1, #3
34360     2C 00 90 5D |  if_ne	jmp	#LR__5220
34364     50 12 62 FD | 	fltl	arg01
34368     09 01 08 FC | 	wrpin	#0, arg01
3436c     50 26 62 FD | 	fltl	local01
34370     13 01 08 FC | 	wrpin	#0, local01
34374     50 28 62 FD | 	fltl	local02
34378     14 01 08 FC | 	wrpin	#0, local02
3437c     50 2A 62 FD | 	fltl	local03
34380     15 01 08 FC | 	wrpin	#0, local03
34384     0A 12 06 F6 | 	mov	arg01, #10
34388     3C 0E BF FD | 	call	#__system___waitms
3438c                 | '     }
3438c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
3438c                 | '     _pinclear(PIN_SS);
3438c                 | '     _pinclear(PIN_CLK);
3438c                 | '     _pinclear(PIN_DI);
3438c                 | '     _pinclear(PIN_DO);
3438c                 | ' 
3438c                 | '     _waitms(10);
3438c                 | ' 
3438c                 | '     return 0;
3438c     00 FA 05 F6 | 	mov	result1, #0
34390                 | LR__5220
34390     A7 F0 03 F6 | 	mov	ptra, fp
34394     B2 00 A0 FD | 	call	#popregs_
34398                 | _fatfs_cc_disk_deinitialize_ret
34398     2D 00 64 FD | 	ret
3439c                 | 
3439c                 | _fatfs_cc_gettimeofday
3439c     04 4A 05 F6 | 	mov	COUNT_, #4
343a0     A8 00 A0 FD | 	call	#pushregs_
343a4     09 27 02 F6 | 	mov	local01, arg01
343a8     F8 09 BF FD | 	call	#__system___getus
343ac     FD 12 02 F6 | 	mov	arg01, result1
343b0     02 00 00 FF 
343b4     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
343b8     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
343bc     09 FB 01 F6 | 	mov	result1, arg01
343c0     14 FB 81 F1 | 	sub	result1, local02
343c4     A1 07 00 FF 
343c8     40 FA 15 FD | 	qdiv	result1, ##1000000
343cc     02 00 00 FF 
343d0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
343d4     18 28 62 FD | 	getqx	local02
343d8     A1 07 00 FF 
343dc     40 FA 15 FD | 	qdiv	result1, ##1000000
343e0     00 28 0E F2 | 	cmp	local02, #0 wz
343e4     19 2A 62 FD | 	getqy	local03
343e8     28 00 90 AD |  if_e	jmp	#LR__5230
343ec     02 00 00 FF 
343f0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
343f4     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
343f8     14 2D 02 F1 | 	add	local04, local02
343fc     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
34400     15 13 82 F1 | 	sub	arg01, local03
34404     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
34408     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
3440c     02 00 00 FF 
34410     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
34414                 | LR__5230
34414     02 00 00 FF 
34418     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
3441c     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
34420     02 00 00 FF 
34424     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
34428     13 2D 62 FC | 	wrlong	local04, local01
3442c     04 26 06 F1 | 	add	local01, #4
34430     13 2B 62 FC | 	wrlong	local03, local01
34434                 | '         lastsec += secs;
34434                 | '         lastus = now - leftover;
34434                 | '     }
34434                 | '     tv->tv_sec = lastsec;
34434                 | '     tv->tv_usec = leftover;
34434                 | '     return 0;
34434     00 FA 05 F6 | 	mov	result1, #0
34438     A7 F0 03 F6 | 	mov	ptra, fp
3443c     B2 00 A0 FD | 	call	#popregs_
34440                 | _fatfs_cc_gettimeofday_ret
34440     2D 00 64 FD | 	ret
34444                 | 
34444                 | _fatfs_cc__is_leap_year
34444     09 FB 51 F6 | 	abs	result1, arg01 wc
34448     03 FA 05 F5 | 	and	result1, #3
3444c     FD FA 89 F6 | 	negc	result1, result1 wz
34450     38 00 90 5D |  if_ne	jmp	#LR__5241
34454     09 FB 51 F6 | 	abs	result1, arg01 wc
34458     64 FA 15 FD | 	qdiv	result1, #100
3445c     19 FA 61 FD | 	getqy	result1
34460     FD FA 89 F6 | 	negc	result1, result1 wz
34464     1C 00 90 5D |  if_ne	jmp	#LR__5240
34468     09 FB 51 F6 | 	abs	result1, arg01 wc
3446c     90 FB 15 FD | 	qdiv	result1, #400
34470                 | '       return (0 == y % 400);
34470     00 FA 05 F6 | 	mov	result1, #0
34474     19 00 62 FD | 	getqy	_var01
34478     00 01 8A F6 | 	negc	_var01, _var01 wz
3447c     01 FA 05 A6 |  if_e	mov	result1, #1
34480     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
34484                 | LR__5240
34484                 | '     return 1;
34484     01 FA 05 F6 | 	mov	result1, #1
34488     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
3448c                 | LR__5241
3448c                 | '   }
3448c                 | '   return 0;
3448c     00 FA 05 F6 | 	mov	result1, #0
34490                 | _fatfs_cc__is_leap_year_ret
34490     2D 00 64 FD | 	ret
34494                 | 
34494                 | _fatfs_cc___tzoffset
34494     09 01 0A F6 | 	mov	_var01, arg01 wz
34498     FF FF FF FF 
3449c     0A FF 6B FC | 	wrlong	##-1, arg02
344a0     01 02 06 F6 | 	mov	_var02, #1
344a4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
344a8                 | '                 return 0;
344a8     00 FA 05 A6 |  if_e	mov	result1, #0
344ac     94 02 90 AD |  if_e	jmp	#LR__5267
344b0     0A 01 68 FC | 	wrlong	#0, arg02
344b4     02 00 00 FF 
344b8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
344bc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
344c0                 | ' 
344c0                 | '        *hasdst = 0;
344c0                 | ' 
344c0                 | ' 	n = stdname;
344c0                 | '         while (*s && isalpha(*s)) {
344c0     02 00 00 FF 
344c4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
344c8     97 28 48 FB | 	callpa	#(@LR__5251-@LR__5250)>>2,fcache_load_ptr_
344cc                 | LR__5250
344cc     00 05 CA FA | 	rdbyte	_var03, _var01 wz
344d0     48 00 90 AD |  if_e	jmp	#LR__5252
344d4     00 13 C2 FA | 	rdbyte	arg01, _var01
344d8                 | ' {
344d8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
344d8     80 12 36 F3 | 	fle	arg01, #128 wc
344dc                 | '     return __ctype[c];
344dc     02 00 00 FF 
344e0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
344e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
344e8     09 FB C1 FA | 	rdbyte	result1, arg01
344ec     02 00 00 FF 
344f0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
344f4     0C FA CD F7 | 	test	result1, #12 wz
344f8     20 00 90 AD |  if_e	jmp	#LR__5252
344fc     00 09 02 F6 | 	mov	_var05, _var01
34500     00 0B 02 F6 | 	mov	_var06, _var01
34504     01 0A 06 F1 | 	add	_var06, #1
34508     04 0D C2 FA | 	rdbyte	_var07, _var05
3450c     05 01 02 F6 | 	mov	_var01, _var06
34510     03 0D 42 FC | 	wrbyte	_var07, _var04
34514     01 06 06 F1 | 	add	_var04, #1
34518     B0 FF 9F FD | 	jmp	#LR__5250
3451c                 | LR__5251
3451c                 | LR__5252
3451c     03 01 48 FC | 	wrbyte	#0, _var04
34520     00 0E 06 F6 | 	mov	_var08, #0
34524     00 05 C2 FA | 	rdbyte	_var03, _var01
34528     2D 04 0E F2 | 	cmp	_var03, #45 wz
3452c     01 02 66 A6 |  if_e	neg	_var02, #1
34530     01 00 06 A1 |  if_e	add	_var01, #1
34534     97 28 48 FB | 	callpa	#(@LR__5254-@LR__5253)>>2,fcache_load_ptr_
34538                 | '                 sgn = -1;
34538                 | '                 s++;
34538                 | '         }
34538                 | '         while (isdigit(*s)) {
34538                 | LR__5253
34538     00 13 C2 FA | 	rdbyte	arg01, _var01
3453c                 | ' {
3453c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3453c     80 12 36 F3 | 	fle	arg01, #128 wc
34540                 | '     return __ctype[c];
34540     02 00 00 FF 
34544     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
34548     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3454c     09 FB C1 FA | 	rdbyte	result1, arg01
34550     02 00 00 FF 
34554     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34558     02 FA CD F7 | 	test	result1, #2 wz
3455c     28 00 90 AD |  if_e	jmp	#LR__5255
34560     07 05 02 F6 | 	mov	_var03, _var08
34564     02 04 66 F0 | 	shl	_var03, #2
34568     07 05 02 F1 | 	add	_var03, _var08
3456c     01 04 66 F0 | 	shl	_var03, #1
34570     00 09 C2 FA | 	rdbyte	_var05, _var01
34574     30 08 86 F1 | 	sub	_var05, #48
34578     04 05 02 F1 | 	add	_var03, _var05
3457c     02 0F 02 F6 | 	mov	_var08, _var03
34580     01 00 06 F1 | 	add	_var01, #1
34584     B0 FF 9F FD | 	jmp	#LR__5253
34588                 | LR__5254
34588                 | LR__5255
34588     07 00 00 FF 
3458c     10 0E 06 FD | 	qmul	_var08, ##3600
34590     00 05 C2 FA | 	rdbyte	_var03, _var01
34594     3A 04 0E F2 | 	cmp	_var03, #58 wz
34598     18 10 62 FD | 	getqx	_var09
3459c     70 00 90 5D |  if_ne	jmp	#LR__5259
345a0     00 0E 06 F6 | 	mov	_var08, #0
345a4     01 00 06 F1 | 	add	_var01, #1
345a8     97 28 48 FB | 	callpa	#(@LR__5257-@LR__5256)>>2,fcache_load_ptr_
345ac                 | '                 x = 0;
345ac                 | '                 s++;
345ac                 | '                 while (isdigit(*s)) {
345ac                 | LR__5256
345ac     00 13 C2 FA | 	rdbyte	arg01, _var01
345b0                 | ' {
345b0                 | '   return  (__ctype_get(c) & 0x02 ) ;
345b0     80 12 36 F3 | 	fle	arg01, #128 wc
345b4                 | '     return __ctype[c];
345b4     02 00 00 FF 
345b8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
345bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
345c0     09 FB C1 FA | 	rdbyte	result1, arg01
345c4     02 00 00 FF 
345c8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
345cc     02 FA CD F7 | 	test	result1, #2 wz
345d0     28 00 90 AD |  if_e	jmp	#LR__5258
345d4     07 05 02 F6 | 	mov	_var03, _var08
345d8     02 04 66 F0 | 	shl	_var03, #2
345dc     07 05 02 F1 | 	add	_var03, _var08
345e0     01 04 66 F0 | 	shl	_var03, #1
345e4     00 09 C2 FA | 	rdbyte	_var05, _var01
345e8     30 08 86 F1 | 	sub	_var05, #48
345ec     04 05 02 F1 | 	add	_var03, _var05
345f0     02 0F 02 F6 | 	mov	_var08, _var03
345f4     01 00 06 F1 | 	add	_var01, #1
345f8     B0 FF 9F FD | 	jmp	#LR__5256
345fc                 | LR__5257
345fc                 | LR__5258
345fc     07 0D 02 F6 | 	mov	_var07, _var08
34600     04 0C 66 F0 | 	shl	_var07, #4
34604     07 0D 82 F1 | 	sub	_var07, _var08
34608     02 0C 66 F0 | 	shl	_var07, #2
3460c     06 11 02 F1 | 	add	_var09, _var07
34610                 | LR__5259
34610     02 00 00 FF 
34614     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
34618     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3461c     00 13 C2 FA | 	rdbyte	arg01, _var01
34620                 | ' {
34620                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
34620     80 12 36 F3 | 	fle	arg01, #128 wc
34624                 | '     return __ctype[c];
34624     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
34628     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3462c     09 FB C1 FA | 	rdbyte	result1, arg01
34630     02 00 00 FF 
34634     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
34638     0C FA CD F7 | 	test	result1, #12 wz
3463c     50 00 90 AD |  if_e	jmp	#LR__5262
34640     0A 03 68 FC | 	wrlong	#1, arg02
34644                 | '                 *hasdst = 1;
34644                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
34644                 | LR__5260
34644     00 05 CA FA | 	rdbyte	_var03, _var01 wz
34648     44 00 90 AD |  if_e	jmp	#LR__5261
3464c     00 13 C2 FA | 	rdbyte	arg01, _var01
34650                 | ' {
34650                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
34650     80 12 36 F3 | 	fle	arg01, #128 wc
34654                 | '     return __ctype[c];
34654     02 00 00 FF 
34658     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3465c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34660     09 FB C1 FA | 	rdbyte	result1, arg01
34664     02 00 00 FF 
34668     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3466c     0C FA CD F7 | 	test	result1, #12 wz
34670     1C 00 90 AD |  if_e	jmp	#LR__5261
34674     00 0B 02 F6 | 	mov	_var06, _var01
34678     01 0A 06 F1 | 	add	_var06, #1
3467c     00 0D C2 FA | 	rdbyte	_var07, _var01
34680     05 01 02 F6 | 	mov	_var01, _var06
34684     03 0D 42 FC | 	wrbyte	_var07, _var04
34688     01 06 06 F1 | 	add	_var04, #1
3468c     B4 FF 9F FD | 	jmp	#LR__5260
34690                 | LR__5261
34690                 | LR__5262
34690     03 01 48 FC | 	wrbyte	#0, _var04
34694     02 00 00 FF 
34698     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3469c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
346a0     02 00 00 FF 
346a4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
346a8     20 00 90 AD |  if_e	jmp	#LR__5263
346ac     02 00 00 FF 
346b0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
346b4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
346b8     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
346bc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
346c0     02 00 00 FF 
346c4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
346c8     1C 00 90 FD | 	jmp	#LR__5264
346cc                 | LR__5263
346cc     02 00 00 FF 
346d0     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
346d4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
346d8     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
346dc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
346e0     02 00 00 FF 
346e4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
346e8                 | LR__5264
346e8     02 00 00 FF 
346ec     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
346f0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
346f4     02 00 00 FF 
346f8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
346fc     20 00 90 AD |  if_e	jmp	#LR__5265
34700     02 00 00 FF 
34704     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
34708     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3470c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
34710     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
34714     02 00 00 FF 
34718     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3471c     1C 00 90 FD | 	jmp	#LR__5266
34720                 | LR__5265
34720     02 00 00 FF 
34724     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
34728     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3472c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
34730     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
34734     02 00 00 FF 
34738     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3473c                 | LR__5266
3473c     08 03 02 FD | 	qmul	_var02, _var09
34740                 | ' 		_tzname[1] = stdname;
34740                 | ' 
34740                 | '         return sgn * off;
34740     18 FA 61 FD | 	getqx	result1
34744                 | LR__5267
34744                 | _fatfs_cc___tzoffset_ret
34744     2D 00 64 FD | 	ret
34748                 | 
34748                 | _fatfs_cc___indst
34748     10 12 06 F1 | 	add	arg01, #16
3474c     09 01 02 FB | 	rdlong	_var01, arg01
34750     10 12 86 F1 | 	sub	arg01, #16
34754     02 00 0E F2 | 	cmp	_var01, #2 wz
34758     30 00 90 5D |  if_ne	jmp	#LR__5270
3475c     07 00 06 F6 | 	mov	_var01, #7
34760     18 12 06 F1 | 	add	arg01, #24
34764     09 03 02 FB | 	rdlong	_var02, arg01
34768     01 01 02 F1 | 	add	_var01, _var02
3476c     0C 12 86 F1 | 	sub	arg01, #12
34770     09 05 02 FB | 	rdlong	_var03, arg01
34774     02 01 82 F1 | 	sub	_var01, _var03
34778     00 00 56 F2 | 	cmps	_var01, #0 wc
3477c                 | '                         return 1;
3477c     01 FA 05 C6 |  if_b	mov	result1, #1
34780     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
34784                 | '                 return 0;
34784     00 FA 05 F6 | 	mov	result1, #0
34788     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3478c                 | LR__5270
3478c     10 12 06 F1 | 	add	arg01, #16
34790     09 01 02 FB | 	rdlong	_var01, arg01
34794     10 12 86 F1 | 	sub	arg01, #16
34798     0A 00 0E F2 | 	cmp	_var01, #10 wz
3479c     28 00 90 5D |  if_ne	jmp	#LR__5271
347a0     18 12 06 F1 | 	add	arg01, #24
347a4     09 01 02 FB | 	rdlong	_var01, arg01
347a8     0C 12 86 F1 | 	sub	arg01, #12
347ac     09 07 02 FB | 	rdlong	_var04, arg01
347b0     03 01 82 F1 | 	sub	_var01, _var04
347b4     00 00 56 F2 | 	cmps	_var01, #0 wc
347b8                 | '                         return 0;
347b8     00 FA 05 C6 |  if_b	mov	result1, #0
347bc     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
347c0                 | '                 return 1;
347c0     01 FA 05 F6 | 	mov	result1, #1
347c4     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
347c8                 | LR__5271
347c8                 | '         }
347c8                 | ' 
347c8                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
347c8     00 00 06 F6 | 	mov	_var01, #0
347cc     10 12 06 F1 | 	add	arg01, #16
347d0     09 03 02 FB | 	rdlong	_var02, arg01
347d4     10 12 86 F1 | 	sub	arg01, #16
347d8     03 02 56 F2 | 	cmps	_var02, #3 wc
347dc     10 00 90 CD |  if_b	jmp	#LR__5272
347e0     10 12 06 F1 | 	add	arg01, #16
347e4     09 05 02 FB | 	rdlong	_var03, arg01
347e8     0A 04 56 F2 | 	cmps	_var03, #10 wc
347ec     01 00 06 C6 |  if_b	mov	_var01, #1
347f0                 | LR__5272
347f0     00 FB 01 F6 | 	mov	result1, _var01
347f4                 | _fatfs_cc___indst_ret
347f4     2D 00 64 FD | 	ret
347f8                 | 
347f8                 | ' 	
347f8                 | ' 	FUNCTION pfunc(c as integer) as integer
347f8                 | ___strs_cl_pfunc
347f8                 | ' 		if (i < 16) then
347f8     04 E4 05 F1 | 	add	objptr, #4
347fc     F2 FA 01 FB | 	rdlong	result1, objptr
34800     04 E4 85 F1 | 	sub	objptr, #4
34804     10 FA 55 F2 | 	cmps	result1, #16 wc
34808     2C 00 90 3D |  if_ae	jmp	#LR__5280
3480c     F2 FA 01 FB | 	rdlong	result1, objptr
34810     04 E4 05 F1 | 	add	objptr, #4
34814     F2 00 02 FB | 	rdlong	_var01, objptr
34818     FD 00 02 F1 | 	add	_var01, result1
3481c     00 13 42 FC | 	wrbyte	arg01, _var01
34820     F2 FA 01 FB | 	rdlong	result1, objptr
34824     01 FA 05 F1 | 	add	result1, #1
34828     F2 FA 61 FC | 	wrlong	result1, objptr
3482c     04 E4 85 F1 | 	sub	objptr, #4
34830                 | ' 			p(i) = c
34830                 | ' 			i = i+1
34830                 | ' 			return 1
34830     01 FA 05 F6 | 	mov	result1, #1
34834     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
34838                 | LR__5280
34838                 | ' 			return -1
34838     01 FA 65 F6 | 	neg	result1, #1
3483c                 | ___strs_cl_pfunc_ret
3483c     2D 00 64 FD | 	ret
34840                 | 
34840                 | __struct__s_vfs_file_t_putchar
34840     04 4A 05 F6 | 	mov	COUNT_, #4
34844     A8 00 A0 FD | 	call	#pushregs_
34848     1C E4 05 F1 | 	add	objptr, #28
3484c     F2 26 0A FB | 	rdlong	local01, objptr wz
34850     1C E4 85 F1 | 	sub	objptr, #28
34854     00 FA 05 A6 |  if_e	mov	result1, #0
34858     48 00 90 AD |  if_e	jmp	#LR__5290
3485c     1C E4 05 F1 | 	add	objptr, #28
34860     F2 28 02 FB | 	rdlong	local02, objptr
34864     14 2B 02 F6 | 	mov	local03, local02
34868     1C E4 85 F1 | 	sub	objptr, #28
3486c     13 2A 46 F7 | 	zerox	local03, #19
34870     14 28 46 F0 | 	shr	local02, #20
34874     02 28 66 F0 | 	shl	local02, #2
34878     ED 28 02 F1 | 	add	local02, __methods__
3487c     14 29 02 FB | 	rdlong	local02, local02
34880     F2 14 02 F6 | 	mov	arg02, objptr
34884     F2 2C 02 F6 | 	mov	local04, objptr
34888     15 E5 01 F6 | 	mov	objptr, local03
3488c     2D 28 62 FD | 	call	local02
34890     16 E5 01 F6 | 	mov	objptr, local04
34894                 | '     return (i < 0) ? 0 : 1;
34894     00 FA 55 F2 | 	cmps	result1, #0 wc
34898     00 26 06 C6 |  if_b	mov	local01, #0
3489c     01 26 06 36 |  if_ae	mov	local01, #1
348a0     13 FB 01 F6 | 	mov	result1, local01
348a4                 | LR__5290
348a4     A7 F0 03 F6 | 	mov	ptra, fp
348a8     B2 00 A0 FD | 	call	#popregs_
348ac                 | __struct__s_vfs_file_t_putchar_ret
348ac     2D 00 64 FD | 	ret
348b0                 | 
348b0                 | __struct__s_vfs_file_t_getchar
348b0     03 4A 05 F6 | 	mov	COUNT_, #3
348b4     A8 00 A0 FD | 	call	#pushregs_
348b8     20 E4 05 F1 | 	add	objptr, #32
348bc     F2 12 0A FB | 	rdlong	arg01, objptr wz
348c0     20 E4 85 F1 | 	sub	objptr, #32
348c4     01 FA 65 A6 |  if_e	neg	result1, #1
348c8     38 00 90 AD |  if_e	jmp	#LR__5300
348cc                 | '     return getcf(__this);
348cc     20 E4 05 F1 | 	add	objptr, #32
348d0     F2 26 02 FB | 	rdlong	local01, objptr
348d4     13 29 02 F6 | 	mov	local02, local01
348d8     20 E4 85 F1 | 	sub	objptr, #32
348dc     13 28 46 F7 | 	zerox	local02, #19
348e0     14 26 46 F0 | 	shr	local01, #20
348e4     02 26 66 F0 | 	shl	local01, #2
348e8     ED 26 02 F1 | 	add	local01, __methods__
348ec     13 27 02 FB | 	rdlong	local01, local01
348f0     F2 12 02 F6 | 	mov	arg01, objptr
348f4     F2 2A 02 F6 | 	mov	local03, objptr
348f8     14 E5 01 F6 | 	mov	objptr, local02
348fc     2D 26 62 FD | 	call	local01
34900     15 E5 01 F6 | 	mov	objptr, local03
34904                 | LR__5300
34904     A7 F0 03 F6 | 	mov	ptra, fp
34908     B2 00 A0 FD | 	call	#popregs_
3490c                 | __struct__s_vfs_file_t_getchar_ret
3490c     2D 00 64 FD | 	ret
34910                 | 
34910                 | __struct___bas_wrap_sender_tx
34910     03 4A 05 F6 | 	mov	COUNT_, #3
34914     A8 00 A0 FD | 	call	#pushregs_
34918     F2 26 02 FB | 	rdlong	local01, objptr
3491c     13 29 02 F6 | 	mov	local02, local01
34920     13 26 46 F7 | 	zerox	local01, #19
34924     14 28 46 F0 | 	shr	local02, #20
34928     02 28 66 F0 | 	shl	local02, #2
3492c     ED 28 02 F1 | 	add	local02, __methods__
34930     14 29 02 FB | 	rdlong	local02, local02
34934     F2 2A 02 F6 | 	mov	local03, objptr
34938     13 E5 01 F6 | 	mov	objptr, local01
3493c     2D 28 62 FD | 	call	local02
34940     15 E5 01 F6 | 	mov	objptr, local03
34944     01 FA 05 F6 | 	mov	result1, #1
34948     A7 F0 03 F6 | 	mov	ptra, fp
3494c     B2 00 A0 FD | 	call	#popregs_
34950                 | __struct___bas_wrap_sender_tx_ret
34950     2D 00 64 FD | 	ret
34954                 | 
34954                 | __struct___bas_wrap_sender_rx
34954     03 4A 05 F6 | 	mov	COUNT_, #3
34958     A8 00 A0 FD | 	call	#pushregs_
3495c     04 E4 05 F1 | 	add	objptr, #4
34960     F2 26 02 FB | 	rdlong	local01, objptr
34964     13 29 02 F6 | 	mov	local02, local01
34968     04 E4 85 F1 | 	sub	objptr, #4
3496c     13 28 46 F7 | 	zerox	local02, #19
34970     14 26 46 F0 | 	shr	local01, #20
34974     02 26 66 F0 | 	shl	local01, #2
34978     ED 26 02 F1 | 	add	local01, __methods__
3497c     13 27 02 FB | 	rdlong	local01, local01
34980     F2 2A 02 F6 | 	mov	local03, objptr
34984     14 E5 01 F6 | 	mov	objptr, local02
34988     2D 26 62 FD | 	call	local01
3498c     15 E5 01 F6 | 	mov	objptr, local03
34990     A7 F0 03 F6 | 	mov	ptra, fp
34994     B2 00 A0 FD | 	call	#popregs_
34998                 | __struct___bas_wrap_sender_rx_ret
34998     2D 00 64 FD | 	ret
3499c                 | 
3499c                 | __struct___bas_wrap_sender_close
3499c     03 4A 05 F6 | 	mov	COUNT_, #3
349a0     A8 00 A0 FD | 	call	#pushregs_
349a4     08 E4 05 F1 | 	add	objptr, #8
349a8     F2 26 02 FB | 	rdlong	local01, objptr
349ac     13 29 02 F6 | 	mov	local02, local01
349b0     08 E4 85 F1 | 	sub	objptr, #8
349b4     13 28 46 F7 | 	zerox	local02, #19
349b8     14 26 46 F0 | 	shr	local01, #20
349bc     02 26 66 F0 | 	shl	local01, #2
349c0     ED 26 02 F1 | 	add	local01, __methods__
349c4     13 27 02 FB | 	rdlong	local01, local01
349c8     F2 2A 02 F6 | 	mov	local03, objptr
349cc     14 E5 01 F6 | 	mov	objptr, local02
349d0     2D 26 62 FD | 	call	local01
349d4     15 E5 01 F6 | 	mov	objptr, local03
349d8     A7 F0 03 F6 | 	mov	ptra, fp
349dc     B2 00 A0 FD | 	call	#popregs_
349e0                 | __struct___bas_wrap_sender_close_ret
349e0     2D 00 64 FD | 	ret
349e4                 | 
349e4                 | LR__5310
349e4     2F          | 	byte	"/"
349e5     00          | 	byte	0
349e6                 | LR__5311
349e6     69 6E 66    | 	byte	"inf"
349e9     00          | 	byte	0
349ea                 | LR__5312
349ea     6E 61 6E    | 	byte	"nan"
349ed     00          | 	byte	0
349ee                 | LR__5313
349ee                 | 	byte	
349ee     00          | 	byte	0
349ef                 | LR__5314
349ef                 | 	byte	
349ef     00          | 	byte	0
349f0                 | LR__5315
349f0                 | 	byte	
349f0     00          | 	byte	0
349f1                 | LR__5316
349f1                 | 	byte	
349f1     00          | 	byte	0
349f2                 | LR__5317
349f2                 | 	byte	
349f2     00          | 	byte	0
349f3                 | LR__5318
349f3                 | 	byte	
349f3     00          | 	byte	0
349f4                 | LR__5319
349f4                 | 	byte	
349f4     00          | 	byte	0
349f5                 | LR__5320
349f5                 | 	byte	
349f5     00          | 	byte	0
349f6                 | LR__5321
349f6     00          | 	byte	0
349f7     00          | 	byte	0
349f8                 | LR__5322
349f8     00          | 	byte	0
349f9     00          | 	byte	0
349fa                 | LR__5323
349fa     00          | 	byte	0
349fb     00          | 	byte	0
349fc                 | LR__5324
349fc     20 21 21 21 
34a00     20 63 6F 72 
34a04     72 75 70 74 
34a08     65 64 20 68 
34a0c     65 61 70 3F 
34a10     3F 3F 20 21 
34a14     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
34a17     00          | 	byte	0
34a18                 | LR__5325
34a18     20 21 21 21 
34a1c     20 6F 75 74 
34a20     20 6F 66 20 
34a24     68 65 61 70 
34a28     20 6D 65 6D 
34a2c     6F 72 79 20 
34a30     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
34a34     00          | 	byte	0
34a35                 | LR__5326
34a35     20 21 21 21 
34a39     20 63 6F 72 
34a3d     72 75 70 74 
34a41     65 64 20 68 
34a45     65 61 70 20 
34a49     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
34a4d     00          | 	byte	0
34a4e                 | LR__5327
34a4e     00          | 	byte	0
34a4f     00          | 	byte	0
34a50                 | LR__5328
34a50     2E          | 	byte	"."
34a51     00          | 	byte	0
34a52                 | LR__5329
34a52     00          | 	byte	0
34a53     00          | 	byte	0
34a54                 | LR__5330
34a54     00          | 	byte	0
34a55     00          | 	byte	0
34a56                 | LR__5331
34a56     00          | 	byte	0
34a57     00          | 	byte	0
34a58                 | LR__5332
34a58     2A 3A 3C 3E 
34a5c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
34a60     00          | 	byte	0
34a61                 | LR__5333
34a61     2B 2C 3B 3D 
34a65     5B 5D       | 	byte	"+,;=[]"
34a67     00          | 	byte	0
34a68                 | LR__5334
34a68     46 41 54 33 
34a6c     32 20 20 20 | 	byte	"FAT32   "
34a70     00          | 	byte	0
34a71                 | LR__5335
34a71     54 5A       | 	byte	"TZ"
34a73     00          | 	byte	0
34a74                 | LR__5336
34a74     00          | 	byte	0
34a75     00          | 	byte	0
34a76                 | LR__5337
34a76                 | 	byte	
34a76     00          | 	byte	0
34a77                 | LR__5338
34a77                 | 	byte	
34a77     00          | 	byte	0
34a78                 | LR__5339
34a78                 | 	byte	
34a78     00          | 	byte	0
34a79                 | LR__5340
34a79                 | 	byte	
34a79     00          | 	byte	0
34a7a                 | LR__5341
34a7a     22          | 	byte	34
34a7b     00          | 	byte	0
34a7c                 | LR__5342
34a7c     22          | 	byte	34
34a7d     00          | 	byte	0
34a7e                 | LR__5343
34a7e     3A          | 	byte	":"
34a7f     00          | 	byte	0
34a80                 | LR__5344
34a80                 | 	byte	
34a80     00          | 	byte	0
34a81                 | LR__5345
34a81                 | 	byte	
34a81     00          | 	byte	0
34a82                 | LR__5346
34a82                 | 	byte	
34a82     00          | 	byte	0
34a83                 | LR__5347
34a83                 | 	byte	
34a83     00          | 	byte	0
34a84                 | LR__5348
34a84                 | 	byte	
34a84     00          | 	byte	0
34a85                 | LR__5349
34a85                 | 	byte	
34a85     00          | 	byte	0
34a86                 | LR__5350
34a86                 | 	byte	
34a86     00          | 	byte	0
34a87                 | LR__5351
34a87     30          | 	byte	"0"
34a88     00          | 	byte	0
34a89                 | LR__5352
34a89     22          | 	byte	34
34a8a     00          | 	byte	0
34a8b                 | LR__5353
34a8b     22          | 	byte	34
34a8c     00          | 	byte	0
34a8d                 | LR__5354
34a8d     22          | 	byte	34
34a8e     00          | 	byte	0
34a8f                 | LR__5355
34a8f     22          | 	byte	34
34a90     00          | 	byte	0
34a91                 | LR__5356
34a91     22          | 	byte	34
34a92     00          | 	byte	0
34a93                 | LR__5357
34a93     3E          | 	byte	">"
34a94     00          | 	byte	0
34a95                 | LR__5358
34a95     3C          | 	byte	"<"
34a96     00          | 	byte	0
34a97                 | LR__5359
34a97     2B          | 	byte	"+"
34a98     00          | 	byte	0
34a99                 | LR__5360
34a99     2D          | 	byte	"-"
34a9a     00          | 	byte	0
34a9b                 | LR__5361
34a9b     2A          | 	byte	"*"
34a9c     00          | 	byte	0
34a9d                 | LR__5362
34a9d     2F          | 	byte	"/"
34a9e     00          | 	byte	0
34a9f                 | LR__5363
34a9f     5E          | 	byte	"^"
34aa0     00          | 	byte	0
34aa1                 | LR__5364
34aa1     3D          | 	byte	"="
34aa2     00          | 	byte	0
34aa3                 | LR__5365
34aa3     2B          | 	byte	"+"
34aa4     00          | 	byte	0
34aa5                 | LR__5366
34aa5     2B          | 	byte	"+"
34aa6     00          | 	byte	0
34aa7                 | LR__5367
34aa7     2D          | 	byte	"-"
34aa8     00          | 	byte	0
34aa9                 | LR__5368
34aa9     2D          | 	byte	"-"
34aaa     00          | 	byte	0
34aab                 | LR__5369
34aab     3C          | 	byte	"<"
34aac     00          | 	byte	0
34aad                 | LR__5370
34aad     3E          | 	byte	">"
34aae     00          | 	byte	0
34aaf                 | LR__5371
34aaf     22          | 	byte	34
34ab0     00          | 	byte	0
34ab1                 | LR__5372
34ab1     22          | 	byte	34
34ab2     00          | 	byte	0
34ab3                 | LR__5373
34ab3     65 6C 73 65 | 	byte	"else"
34ab7     00          | 	byte	0
34ab8                 | LR__5374
34ab8     74 68 65 6E | 	byte	"then"
34abc     00          | 	byte	0
34abd                 | LR__5375
34abd     2E          | 	byte	"."
34abe     00          | 	byte	0
34abf                 | LR__5376
34abf     3F          | 	byte	"?"
34ac0     00          | 	byte	0
34ac1                 | LR__5377
34ac1     3F          | 	byte	"?"
34ac2     00          | 	byte	0
34ac3                 | LR__5378
34ac3     6D 6F 75 73 
34ac7     65          | 	byte	"mouse"
34ac8     00          | 	byte	0
34ac9                 | LR__5379
34ac9     63 75 72 73 
34acd     6F 72       | 	byte	"cursor"
34acf     00          | 	byte	0
34ad0                 | LR__5380
34ad0     63 6C 69 63 
34ad4     6B          | 	byte	"click"
34ad5     00          | 	byte	0
34ad6                 | LR__5381
34ad6     6F 6E       | 	byte	"on"
34ad8     00          | 	byte	0
34ad9                 | LR__5382
34ad9     31          | 	byte	"1"
34ada     00          | 	byte	0
34adb                 | LR__5383
34adb     6F 66 66    | 	byte	"off"
34ade     00          | 	byte	0
34adf                 | LR__5384
34adf     30          | 	byte	"0"
34ae0     00          | 	byte	0
34ae1                 | LR__5385
34ae1     6D 6F 64 65 | 	byte	"mode"
34ae5     00          | 	byte	0
34ae6                 | LR__5386
34ae6     6D 2E       | 	byte	"m."
34ae8     00          | 	byte	0
34ae9                 | LR__5387
34ae9     61 74 61 72 
34aed     69          | 	byte	"atari"
34aee     00          | 	byte	0
34aef                 | LR__5388
34aef     30          | 	byte	"0"
34af0     00          | 	byte	0
34af1                 | LR__5389
34af1     70 63 5F 61 
34af5     6D 62 65 72 | 	byte	"pc_amber"
34af9     00          | 	byte	0
34afa                 | LR__5390
34afa     31          | 	byte	"1"
34afb     00          | 	byte	0
34afc                 | LR__5391
34afc     70 63 5F 67 
34b00     72 65 65 6E | 	byte	"pc_green"
34b04     00          | 	byte	0
34b05                 | LR__5392
34b05     32          | 	byte	"2"
34b06     00          | 	byte	0
34b07                 | LR__5393
34b07     70 63 5F 77 
34b0b     68 69 74 65 | 	byte	"pc_white"
34b0f     00          | 	byte	0
34b10                 | LR__5394
34b10     33          | 	byte	"3"
34b11     00          | 	byte	0
34b12                 | LR__5395
34b12     73 74       | 	byte	"st"
34b14     00          | 	byte	0
34b15                 | LR__5396
34b15     34          | 	byte	"4"
34b16     00          | 	byte	0
34b17                 | LR__5397
34b17                 | 	byte	
34b17     00          | 	byte	0
34b18                 | LR__5398
34b18     6C 6F 61 64 | 	byte	"load"
34b1c     00          | 	byte	0
34b1d                 | LR__5399
34b1d     73 61 76 65 | 	byte	"save"
34b21     00          | 	byte	0
34b22                 | LR__5400
34b22     62 72 75 6E | 	byte	"brun"
34b26     00          | 	byte	0
34b27                 | LR__5401
34b27     72 75 6E    | 	byte	"run"
34b2a     00          | 	byte	0
34b2b                 | LR__5402
34b2b     6C 6F 2E    | 	byte	"lo."
34b2e     00          | 	byte	0
34b2f                 | LR__5403
34b2f     73 2E       | 	byte	"s."
34b31     00          | 	byte	0
34b32                 | LR__5404
34b32     62 72 2E    | 	byte	"br."
34b35     00          | 	byte	0
34b36                 | LR__5405
34b36     65 6E 74 65 
34b3a     72          | 	byte	"enter"
34b3b     00          | 	byte	0
34b3c                 | LR__5406
34b3c     65 2E       | 	byte	"e."
34b3e     00          | 	byte	0
34b3f                 | LR__5407
34b3f     64 65 6C 65 
34b43     74 65       | 	byte	"delete"
34b45     00          | 	byte	0
34b46                 | LR__5408
34b46     6D 6B 64 69 
34b4a     72          | 	byte	"mkdir"
34b4b     00          | 	byte	0
34b4c                 | LR__5409
34b4c     63 64       | 	byte	"cd"
34b4e     00          | 	byte	0
34b4f                 | LR__5410
34b4f     63 64 2E    | 	byte	"cd."
34b52     00          | 	byte	0
34b53                 | LR__5411
34b53     2E          | 	byte	"."
34b54     00          | 	byte	0
34b55                 | LR__5412
34b55     2E 2E       | 	byte	".."
34b57     00          | 	byte	0
34b58                 | LR__5413
34b58     63 64       | 	byte	"cd"
34b5a     00          | 	byte	0
34b5b                 | LR__5414
34b5b     2F          | 	byte	"/"
34b5c     00          | 	byte	0
34b5d                 | LR__5415
34b5d                 | 	byte	
34b5d     00          | 	byte	0
34b5e                 | LR__5416
34b5e                 | 	byte	
34b5e     00          | 	byte	0
34b5f                 | LR__5417
34b5f                 | 	byte	
34b5f     00          | 	byte	0
34b60                 | LR__5418
34b60                 | 	byte	
34b60     00          | 	byte	0
34b61                 | LR__5419
34b61                 | 	byte	
34b61     00          | 	byte	0
34b62                 | LR__5420
34b62     52 65 61 64 
34b66     79          | 	byte	"Ready"
34b67     00          | 	byte	0
34b68                 | LR__5421
34b68     2B          | 	byte	"+"
34b69     00          | 	byte	0
34b6a                 | LR__5422
34b6a     2D          | 	byte	"-"
34b6b     00          | 	byte	0
34b6c                 | LR__5423
34b6c     6F 72       | 	byte	"or"
34b6e     00          | 	byte	0
34b6f                 | LR__5424
34b6f     78 6F 72    | 	byte	"xor"
34b72     00          | 	byte	0
34b73                 | LR__5425
34b73     2A          | 	byte	"*"
34b74     00          | 	byte	0
34b75                 | LR__5426
34b75     2F          | 	byte	"/"
34b76     00          | 	byte	0
34b77                 | LR__5427
34b77     61 6E 64    | 	byte	"and"
34b7a     00          | 	byte	0
34b7b                 | LR__5428
34b7b     64 69 76    | 	byte	"div"
34b7e     00          | 	byte	0
34b7f                 | LR__5429
34b7f     6D 6F 64    | 	byte	"mod"
34b82     00          | 	byte	0
34b83                 | LR__5430
34b83     73 68 6C    | 	byte	"shl"
34b86     00          | 	byte	0
34b87                 | LR__5431
34b87     73 68 72    | 	byte	"shr"
34b8a     00          | 	byte	0
34b8b                 | LR__5432
34b8b     5E          | 	byte	"^"
34b8c     00          | 	byte	0
34b8d                 | LR__5433
34b8d     6E 6F 74    | 	byte	"not"
34b90     00          | 	byte	0
34b91                 | LR__5434
34b91     40          | 	byte	"@"
34b92     00          | 	byte	0
34b93                 | LR__5435
34b93     3D          | 	byte	"="
34b94     00          | 	byte	0
34b95                 | LR__5436
34b95     3E 3D       | 	byte	">="
34b97     00          | 	byte	0
34b98                 | LR__5437
34b98     3C 3D       | 	byte	"<="
34b9a     00          | 	byte	0
34b9b                 | LR__5438
34b9b     3C          | 	byte	"<"
34b9c     00          | 	byte	0
34b9d                 | LR__5439
34b9d     3E          | 	byte	">"
34b9e     00          | 	byte	0
34b9f                 | LR__5440
34b9f     3C 3E       | 	byte	"<>"
34ba1     00          | 	byte	0
34ba2                 | LR__5441
34ba2     2B 2B       | 	byte	"++"
34ba4     00          | 	byte	0
34ba5                 | LR__5442
34ba5     2D 2D       | 	byte	"--"
34ba7     00          | 	byte	0
34ba8                 | LR__5443
34ba8     23          | 	byte	"#"
34ba9     00          | 	byte	0
34baa                 | LR__5444
34baa     30          | 	byte	"0"
34bab     00          | 	byte	0
34bac                 | LR__5445
34bac     39          | 	byte	"9"
34bad     00          | 	byte	0
34bae                 | LR__5446
34bae     23 72 65 61 
34bb2     64          | 	byte	"#read"
34bb3     00          | 	byte	0
34bb4                 | LR__5447
34bb4     23 77 72 69 
34bb8     74 65       | 	byte	"#write"
34bba     00          | 	byte	0
34bbb                 | LR__5448
34bbb     23 61 70 70 
34bbf     65 6E 64    | 	byte	"#append"
34bc2     00          | 	byte	0
34bc3                 | LR__5449
34bc3     23          | 	byte	"#"
34bc4     00          | 	byte	0
34bc5                 | LR__5450
34bc5     23          | 	byte	"#"
34bc6     00          | 	byte	0
34bc7                 | LR__5451
34bc7     2D          | 	byte	"-"
34bc8     00          | 	byte	0
34bc9                 | LR__5452
34bc9     30          | 	byte	"0"
34bca     00          | 	byte	0
34bcb                 | LR__5453
34bcb     63          | 	byte	"c"
34bcc     00          | 	byte	0
34bcd                 | LR__5454
34bcd     63 23       | 	byte	"c#"
34bcf     00          | 	byte	0
34bd0                 | LR__5455
34bd0     64          | 	byte	"d"
34bd1     00          | 	byte	0
34bd2                 | LR__5456
34bd2     64 23       | 	byte	"d#"
34bd4     00          | 	byte	0
34bd5                 | LR__5457
34bd5     65          | 	byte	"e"
34bd6     00          | 	byte	0
34bd7                 | LR__5458
34bd7     66          | 	byte	"f"
34bd8     00          | 	byte	0
34bd9                 | LR__5459
34bd9     66 23       | 	byte	"f#"
34bdb     00          | 	byte	0
34bdc                 | LR__5460
34bdc     67          | 	byte	"g"
34bdd     00          | 	byte	0
34bde                 | LR__5461
34bde     67 23       | 	byte	"g#"
34be0     00          | 	byte	0
34be1                 | LR__5462
34be1     61          | 	byte	"a"
34be2     00          | 	byte	0
34be3                 | LR__5463
34be3     61 23       | 	byte	"a#"
34be5     00          | 	byte	0
34be6                 | LR__5464
34be6     68          | 	byte	"h"
34be7     00          | 	byte	0
34be8                 | LR__5465
34be8     62          | 	byte	"b"
34be9     00          | 	byte	0
34bea                 | LR__5466
34bea     2B          | 	byte	"+"
34beb     00          | 	byte	0
34bec                 | LR__5467
34bec     2D          | 	byte	"-"
34bed     00          | 	byte	0
34bee                 | LR__5468
34bee     3D          | 	byte	"="
34bef     00          | 	byte	0
34bf0                 | LR__5469
34bf0     2C          | 	byte	","
34bf1     00          | 	byte	0
34bf2                 | LR__5470
34bf2     2A          | 	byte	"*"
34bf3     00          | 	byte	0
34bf4                 | LR__5471
34bf4     2F          | 	byte	"/"
34bf5     00          | 	byte	0
34bf6                 | LR__5472
34bf6     3B          | 	byte	";"
34bf7     00          | 	byte	0
34bf8                 | LR__5473
34bf8     22          | 	byte	34
34bf9     00          | 	byte	0
34bfa                 | LR__5474
34bfa     5E          | 	byte	"^"
34bfb     00          | 	byte	0
34bfc                 | LR__5475
34bfc     29          | 	byte	")"
34bfd     00          | 	byte	0
34bfe                 | LR__5476
34bfe     28          | 	byte	"("
34bff     00          | 	byte	0
34c00                 | LR__5477
34c00     3A          | 	byte	":"
34c01     00          | 	byte	0
34c02                 | LR__5478
34c02     20          | 	byte	" "
34c03     00          | 	byte	0
34c04                 | LR__5479
34c04     3E          | 	byte	">"
34c05     00          | 	byte	0
34c06                 | LR__5480
34c06     3C          | 	byte	"<"
34c07     00          | 	byte	0
34c08                 | LR__5481
34c08     3D          | 	byte	"="
34c09     00          | 	byte	0
34c0a                 | LR__5482
34c0a     62 65 65 70 | 	byte	"beep"
34c0e     00          | 	byte	0
34c0f                 | LR__5483
34c0f     62 2E       | 	byte	"b."
34c11     00          | 	byte	0
34c12                 | LR__5484
34c12     62 6C 69 74 | 	byte	"blit"
34c16     00          | 	byte	0
34c17                 | LR__5485
34c17     62 6F 78    | 	byte	"box"
34c1a     00          | 	byte	0
34c1b                 | LR__5486
34c1b     62 72 75 6E | 	byte	"brun"
34c1f     00          | 	byte	0
34c20                 | LR__5487
34c20     62 72 2E    | 	byte	"br."
34c23     00          | 	byte	0
34c24                 | LR__5488
34c24     63 64       | 	byte	"cd"
34c26     00          | 	byte	0
34c27                 | LR__5489
34c27     63 68 61 6E 
34c2b     67 65 66 72 
34c2f     65 71       | 	byte	"changefreq"
34c31     00          | 	byte	0
34c32                 | LR__5490
34c32     63 66 2E    | 	byte	"cf."
34c35     00          | 	byte	0
34c36                 | LR__5491
34c36     63 68 61 6E 
34c3a     67 65 70 61 
34c3e     6E          | 	byte	"changepan"
34c3f     00          | 	byte	0
34c40                 | LR__5492
34c40     63 70 2E    | 	byte	"cp."
34c43     00          | 	byte	0
34c44                 | LR__5493
34c44     63 68 61 6E 
34c48     67 65 76 6F 
34c4c     6C          | 	byte	"changevol"
34c4d     00          | 	byte	0
34c4e                 | LR__5494
34c4e     63 76 2E    | 	byte	"cv."
34c51     00          | 	byte	0
34c52                 | LR__5495
34c52     63 68 61 6E 
34c56     67 65 77 61 
34c5a     76 65       | 	byte	"changewave"
34c5c     00          | 	byte	0
34c5d                 | LR__5496
34c5d     63 77 2E    | 	byte	"cw."
34c60     00          | 	byte	0
34c61                 | LR__5497
34c61     63 69 72 63 
34c65     6C 65       | 	byte	"circle"
34c67     00          | 	byte	0
34c68                 | LR__5498
34c68     63 69 2E    | 	byte	"ci."
34c6b     00          | 	byte	0
34c6c                 | LR__5499
34c6c     63 6C 69 63 
34c70     6B          | 	byte	"click"
34c71     00          | 	byte	0
34c72                 | LR__5500
34c72     63 6C 6F 73 
34c76     65          | 	byte	"close"
34c77     00          | 	byte	0
34c78                 | LR__5501
34c78     63 6C 73    | 	byte	"cls"
34c7b     00          | 	byte	0
34c7c                 | LR__5502
34c7c     63 6F 6C 6F 
34c80     72          | 	byte	"color"
34c81     00          | 	byte	0
34c82                 | LR__5503
34c82     63 2E       | 	byte	"c."
34c84     00          | 	byte	0
34c85                 | LR__5504
34c85     63 73 61 76 
34c89     65          | 	byte	"csave"
34c8a     00          | 	byte	0
34c8b                 | LR__5505
34c8b     63 73 2E    | 	byte	"cs."
34c8e     00          | 	byte	0
34c8f                 | LR__5506
34c8f     63 75 72 73 
34c93     6F 72       | 	byte	"cursor"
34c95     00          | 	byte	0
34c96                 | LR__5507
34c96     64 61 74 61 | 	byte	"data"
34c9a     00          | 	byte	0
34c9b                 | LR__5508
34c9b     64 65 66 73 
34c9f     6E 64       | 	byte	"defsnd"
34ca1     00          | 	byte	0
34ca2                 | LR__5509
34ca2     64 65 66 65 
34ca6     6E 76       | 	byte	"defenv"
34ca8     00          | 	byte	0
34ca9                 | LR__5510
34ca9     64 65 66 73 
34cad     70 72 69 74 
34cb1     65          | 	byte	"defsprite"
34cb2     00          | 	byte	0
34cb3                 | LR__5511
34cb3     64 73 2E    | 	byte	"ds."
34cb6     00          | 	byte	0
34cb7                 | LR__5512
34cb7     64 65 67    | 	byte	"deg"
34cba     00          | 	byte	0
34cbb                 | LR__5513
34cbb     64 65 6C 65 
34cbf     74 65       | 	byte	"delete"
34cc1     00          | 	byte	0
34cc2                 | LR__5514
34cc2     64 69 6D    | 	byte	"dim"
34cc5     00          | 	byte	0
34cc6                 | LR__5515
34cc6     64 69 72    | 	byte	"dir"
34cc9     00          | 	byte	0
34cca                 | LR__5516
34cca     64 70 6F 6B 
34cce     65          | 	byte	"dpoke"
34ccf     00          | 	byte	0
34cd0                 | LR__5517
34cd0     64 72 61 77 | 	byte	"draw"
34cd4     00          | 	byte	0
34cd5                 | LR__5518
34cd5     64 72 61 77 
34cd9     74 6F       | 	byte	"drawto"
34cdb     00          | 	byte	0
34cdc                 | LR__5519
34cdc     64 72 2E    | 	byte	"dr."
34cdf     00          | 	byte	0
34ce0                 | LR__5520
34ce0     65 6C 73 65 | 	byte	"else"
34ce4     00          | 	byte	0
34ce5                 | LR__5521
34ce5     65 6E 64    | 	byte	"end"
34ce8     00          | 	byte	0
34ce9                 | LR__5522
34ce9     65 6E 74 65 
34ced     72          | 	byte	"enter"
34cee     00          | 	byte	0
34cef                 | LR__5523
34cef     65 2E       | 	byte	"e."
34cf1     00          | 	byte	0
34cf2                 | LR__5524
34cf2     66 63 69 72 
34cf6     63 6C 65    | 	byte	"fcircle"
34cf9     00          | 	byte	0
34cfa                 | LR__5525
34cfa     66 63 2E    | 	byte	"fc."
34cfd     00          | 	byte	0
34cfe                 | LR__5526
34cfe     66 69 6C 6C | 	byte	"fill"
34d02     00          | 	byte	0
34d03                 | LR__5527
34d03     66 69 2E    | 	byte	"fi."
34d06     00          | 	byte	0
34d07                 | LR__5528
34d07     66 6F 6E 74 | 	byte	"font"
34d0b     00          | 	byte	0
34d0c                 | LR__5529
34d0c     66 6F 72    | 	byte	"for"
34d0f     00          | 	byte	0
34d10                 | LR__5530
34d10     66 2E       | 	byte	"f."
34d12     00          | 	byte	0
34d13                 | LR__5531
34d13     66 72 61 6D 
34d17     65          | 	byte	"frame"
34d18     00          | 	byte	0
34d19                 | LR__5532
34d19     66 72 2E    | 	byte	"fr."
34d1c     00          | 	byte	0
34d1d                 | LR__5533
34d1d     67 65 74    | 	byte	"get"
34d20     00          | 	byte	0
34d21                 | LR__5534
34d21     67 6F 73 75 
34d25     62          | 	byte	"gosub"
34d26     00          | 	byte	0
34d27                 | LR__5535
34d27     67 6F 74 6F | 	byte	"goto"
34d2b     00          | 	byte	0
34d2c                 | LR__5536
34d2c     67 2E       | 	byte	"g."
34d2e     00          | 	byte	0
34d2f                 | LR__5537
34d2f     69 66       | 	byte	"if"
34d31     00          | 	byte	0
34d32                 | LR__5538
34d32     69 6E 6B    | 	byte	"ink"
34d35     00          | 	byte	0
34d36                 | LR__5539
34d36     69 2E       | 	byte	"i."
34d38     00          | 	byte	0
34d39                 | LR__5540
34d39     69 6E 70 75 
34d3d     74          | 	byte	"input"
34d3e     00          | 	byte	0
34d3f                 | LR__5541
34d3f     6C 69 73 74 | 	byte	"list"
34d43     00          | 	byte	0
34d44                 | LR__5542
34d44     6C 2E       | 	byte	"l."
34d46     00          | 	byte	0
34d47                 | LR__5543
34d47     6C 6F 61 64 | 	byte	"load"
34d4b     00          | 	byte	0
34d4c                 | LR__5544
34d4c     6C 6F 2E    | 	byte	"lo."
34d4f     00          | 	byte	0
34d50                 | LR__5545
34d50     6C 70 6F 6B 
34d54     65          | 	byte	"lpoke"
34d55     00          | 	byte	0
34d56                 | LR__5546
34d56     6D 6B 64 69 
34d5a     72          | 	byte	"mkdir"
34d5b     00          | 	byte	0
34d5c                 | LR__5547
34d5c     6D 6F 64 65 | 	byte	"mode"
34d60     00          | 	byte	0
34d61                 | LR__5548
34d61     6D 2E       | 	byte	"m."
34d63     00          | 	byte	0
34d64                 | LR__5549
34d64     6D 6F 75 73 
34d68     65          | 	byte	"mouse"
34d69     00          | 	byte	0
34d6a                 | LR__5550
34d6a     6E 65 77    | 	byte	"new"
34d6d     00          | 	byte	0
34d6e                 | LR__5551
34d6e     6E 65 78 74 | 	byte	"next"
34d72     00          | 	byte	0
34d73                 | LR__5552
34d73     6E 2E       | 	byte	"n."
34d75     00          | 	byte	0
34d76                 | LR__5553
34d76     6F 6E       | 	byte	"on"
34d78     00          | 	byte	0
34d79                 | LR__5554
34d79     6F 70 65 6E | 	byte	"open"
34d7d     00          | 	byte	0
34d7e                 | LR__5555
34d7e     70 61 70 65 
34d82     72          | 	byte	"paper"
34d83     00          | 	byte	0
34d84                 | LR__5556
34d84     70 61 2E    | 	byte	"pa."
34d87     00          | 	byte	0
34d88                 | LR__5557
34d88     70 69 6E 66 
34d8c     6C 6F 61 74 | 	byte	"pinfloat"
34d90     00          | 	byte	0
34d91                 | LR__5558
34d91     70 69 6E 68 
34d95     69          | 	byte	"pinhi"
34d96     00          | 	byte	0
34d97                 | LR__5559
34d97     70 69 6E 6C 
34d9b     6F          | 	byte	"pinlo"
34d9c     00          | 	byte	0
34d9d                 | LR__5560
34d9d     70 69 6E 73 
34da1     74 61 72 74 | 	byte	"pinstart"
34da5     00          | 	byte	0
34da6                 | LR__5561
34da6     70 69 6E 74 
34daa     6F 67 67 6C 
34dae     65          | 	byte	"pintoggle"
34daf     00          | 	byte	0
34db0                 | LR__5562
34db0     70 69 6E 77 
34db4     72 69 74 65 | 	byte	"pinwrite"
34db8     00          | 	byte	0
34db9                 | LR__5563
34db9     70 6C 61 79 | 	byte	"play"
34dbd     00          | 	byte	0
34dbe                 | LR__5564
34dbe     70 2E       | 	byte	"p."
34dc0     00          | 	byte	0
34dc1                 | LR__5565
34dc1     70 6C 6F 74 | 	byte	"plot"
34dc5     00          | 	byte	0
34dc6                 | LR__5566
34dc6     70 6C 2E    | 	byte	"pl."
34dc9     00          | 	byte	0
34dca                 | LR__5567
34dca     70 6F 6B 65 | 	byte	"poke"
34dce     00          | 	byte	0
34dcf                 | LR__5568
34dcf     70 6F 70    | 	byte	"pop"
34dd2     00          | 	byte	0
34dd3                 | LR__5569
34dd3     70 6F 73 69 
34dd7     74 69 6F 6E | 	byte	"position"
34ddb     00          | 	byte	0
34ddc                 | LR__5570
34ddc     70 6F 73 2E | 	byte	"pos."
34de0     00          | 	byte	0
34de1                 | LR__5571
34de1     70 72 69 6E 
34de5     74          | 	byte	"print"
34de6     00          | 	byte	0
34de7                 | LR__5572
34de7     3F          | 	byte	"?"
34de8     00          | 	byte	0
34de9                 | LR__5573
34de9     70 75 74    | 	byte	"put"
34dec     00          | 	byte	0
34ded                 | LR__5574
34ded     72 61 64    | 	byte	"rad"
34df0     00          | 	byte	0
34df1                 | LR__5575
34df1     72 65 61 64 | 	byte	"read"
34df5     00          | 	byte	0
34df6                 | LR__5576
34df6     72 65 6C 65 
34dfa     61 73 65    | 	byte	"release"
34dfd     00          | 	byte	0
34dfe                 | LR__5577
34dfe     72 65 6D    | 	byte	"rem"
34e01     00          | 	byte	0
34e02                 | LR__5578
34e02     27          | 	byte	"'"
34e03     00          | 	byte	0
34e04                 | LR__5579
34e04     72 65 73 74 
34e08     6F 72 65    | 	byte	"restore"
34e0b     00          | 	byte	0
34e0c                 | LR__5580
34e0c     72 65 74 75 
34e10     72 6E       | 	byte	"return"
34e12     00          | 	byte	0
34e13                 | LR__5581
34e13     72 75 6E    | 	byte	"run"
34e16     00          | 	byte	0
34e17                 | LR__5582
34e17     73 61 76 65 | 	byte	"save"
34e1b     00          | 	byte	0
34e1c                 | LR__5583
34e1c     73 2E       | 	byte	"s."
34e1e     00          | 	byte	0
34e1f                 | LR__5584
34e1f     73 65 74 64 
34e23     65 6C 61 79 | 	byte	"setdelay"
34e27     00          | 	byte	0
34e28                 | LR__5585
34e28     73 64 2E    | 	byte	"sd."
34e2b     00          | 	byte	0
34e2c                 | LR__5586
34e2c     73 65 74 65 
34e30     6E 76       | 	byte	"setenv"
34e32     00          | 	byte	0
34e33                 | LR__5587
34e33     73 65 2E    | 	byte	"se."
34e36     00          | 	byte	0
34e37                 | LR__5588
34e37     73 65 74 6C 
34e3b     65 6E       | 	byte	"setlen"
34e3d     00          | 	byte	0
34e3e                 | LR__5589
34e3e     73 6C 2E    | 	byte	"sl."
34e41     00          | 	byte	0
34e42                 | LR__5590
34e42     73 65 74 70 
34e46     61 6E       | 	byte	"setpan"
34e48     00          | 	byte	0
34e49                 | LR__5591
34e49     73 70 2E    | 	byte	"sp."
34e4c     00          | 	byte	0
34e4d                 | LR__5592
34e4d     73 65 74 73 
34e51     75 73 74 61 
34e55     69 6E       | 	byte	"setsustain"
34e57     00          | 	byte	0
34e58                 | LR__5593
34e58     73 73 2E    | 	byte	"ss."
34e5b     00          | 	byte	0
34e5c                 | LR__5594
34e5c     73 65 74 76 
34e60     6F 6C       | 	byte	"setvol"
34e62     00          | 	byte	0
34e63                 | LR__5595
34e63     73 76 2E    | 	byte	"sv."
34e66     00          | 	byte	0
34e67                 | LR__5596
34e67     73 65 74 77 
34e6b     61 76 65    | 	byte	"setwave"
34e6e     00          | 	byte	0
34e6f                 | LR__5597
34e6f     73 77 2E    | 	byte	"sw."
34e72     00          | 	byte	0
34e73                 | LR__5598
34e73     73 65 74 77 
34e77     61 76       | 	byte	"setwav"
34e79     00          | 	byte	0
34e7a                 | LR__5599
34e7a     73 68 75 74 
34e7e     75 70       | 	byte	"shutup"
34e80     00          | 	byte	0
34e81                 | LR__5600
34e81     73 68 2E    | 	byte	"sh."
34e84     00          | 	byte	0
34e85                 | LR__5601
34e85     73 6F 75 6E 
34e89     64          | 	byte	"sound"
34e8a     00          | 	byte	0
34e8b                 | LR__5602
34e8b     73 6F 2E    | 	byte	"so."
34e8e     00          | 	byte	0
34e8f                 | LR__5603
34e8f     73 70 72 69 
34e93     74 65       | 	byte	"sprite"
34e95     00          | 	byte	0
34e96                 | LR__5604
34e96     73 70 72 2E | 	byte	"spr."
34e9a     00          | 	byte	0
34e9b                 | LR__5605
34e9b     74 68 65 6E | 	byte	"then"
34e9f     00          | 	byte	0
34ea0                 | LR__5606
34ea0     77 61 69 74 
34ea4     6D 73       | 	byte	"waitms"
34ea6     00          | 	byte	0
34ea7                 | LR__5607
34ea7     77 2E       | 	byte	"w."
34ea9     00          | 	byte	0
34eaa                 | LR__5608
34eaa     77 61 69 74 
34eae     63 6C 6F 63 
34eb2     6B          | 	byte	"waitclock"
34eb3     00          | 	byte	0
34eb4                 | LR__5609
34eb4     77 63 2E    | 	byte	"wc."
34eb7     00          | 	byte	0
34eb8                 | LR__5610
34eb8     77 61 69 74 
34ebc     76 62 6C    | 	byte	"waitvbl"
34ebf     00          | 	byte	0
34ec0                 | LR__5611
34ec0     77 76 2E    | 	byte	"wv."
34ec3     00          | 	byte	0
34ec4                 | LR__5612
34ec4     77 72 70 69 
34ec8     6E          | 	byte	"wrpin"
34ec9     00          | 	byte	0
34eca                 | LR__5613
34eca     77 78 70 69 
34ece     6E          | 	byte	"wxpin"
34ecf     00          | 	byte	0
34ed0                 | LR__5614
34ed0     77 79 70 69 
34ed4     6E          | 	byte	"wypin"
34ed5     00          | 	byte	0
34ed6                 | LR__5615
34ed6     61 62 73    | 	byte	"abs"
34ed9     00          | 	byte	0
34eda                 | LR__5616
34eda     61 63 6F 73 | 	byte	"acos"
34ede     00          | 	byte	0
34edf                 | LR__5617
34edf     61 64 72    | 	byte	"adr"
34ee2     00          | 	byte	0
34ee3                 | LR__5618
34ee3     61 64 64 72 | 	byte	"addr"
34ee7     00          | 	byte	0
34ee8                 | LR__5619
34ee8     61 73 63    | 	byte	"asc"
34eeb     00          | 	byte	0
34eec                 | LR__5620
34eec     61 73 69 6E | 	byte	"asin"
34ef0     00          | 	byte	0
34ef1                 | LR__5621
34ef1     61 74 6E    | 	byte	"atn"
34ef4     00          | 	byte	0
34ef5                 | LR__5622
34ef5     62 69 6E 24 | 	byte	"bin$"
34ef9     00          | 	byte	0
34efa                 | LR__5623
34efa     63 68 72 24 | 	byte	"chr$"
34efe     00          | 	byte	0
34eff                 | LR__5624
34eff     63 6F 73    | 	byte	"cos"
34f02     00          | 	byte	0
34f03                 | LR__5625
34f03     64 70 65 65 
34f07     6B          | 	byte	"dpeek"
34f08     00          | 	byte	0
34f09                 | LR__5626
34f09     66 72 61 6D 
34f0d     65 62 75 66 | 	byte	"framebuf"
34f11     00          | 	byte	0
34f12                 | LR__5627
34f12     66 62 2E    | 	byte	"fb."
34f15     00          | 	byte	0
34f16                 | LR__5628
34f16     66 72 65    | 	byte	"fre"
34f19     00          | 	byte	0
34f1a                 | LR__5629
34f1a     67 65 74 70 
34f1e     69 78 65 6C | 	byte	"getpixel"
34f22     00          | 	byte	0
34f23                 | LR__5630
34f23     67 65 2E    | 	byte	"ge."
34f26     00          | 	byte	0
34f27                 | LR__5631
34f27     67 65 74 65 
34f2b     6E 76 73 75 
34f2f     73 74 61 69 
34f33     6E          | 	byte	"getenvsustain"
34f34     00          | 	byte	0
34f35                 | LR__5632
34f35     67 65 74 6E 
34f39     6F 74 65 76 
34f3d     61 6C 75 65 | 	byte	"getnotevalue"
34f41     00          | 	byte	0
34f42                 | LR__5633
34f42     67 65 74 74 
34f46     69 6D 65    | 	byte	"gettime"
34f49     00          | 	byte	0
34f4a                 | LR__5634
34f4a     68 65 78 24 | 	byte	"hex$"
34f4e     00          | 	byte	0
34f4f                 | LR__5635
34f4f     69 6E 6B 65 
34f53     79 24       | 	byte	"inkey$"
34f55     00          | 	byte	0
34f56                 | LR__5636
34f56     69 6E 74    | 	byte	"int"
34f59     00          | 	byte	0
34f5a                 | LR__5637
34f5a     6C 65 66 74 
34f5e     24          | 	byte	"left$"
34f5f     00          | 	byte	0
34f60                 | LR__5638
34f60     6C 65 6E    | 	byte	"len"
34f63     00          | 	byte	0
34f64                 | LR__5639
34f64     6C 6F 67    | 	byte	"log"
34f67     00          | 	byte	0
34f68                 | LR__5640
34f68     6C 70 65 65 
34f6c     6B          | 	byte	"lpeek"
34f6d     00          | 	byte	0
34f6e                 | LR__5641
34f6e     6D 69 64 24 | 	byte	"mid$"
34f72     00          | 	byte	0
34f73                 | LR__5642
34f73     6D 6F 75 73 
34f77     65 6B       | 	byte	"mousek"
34f79     00          | 	byte	0
34f7a                 | LR__5643
34f7a     6D 6F 75 73 
34f7e     65 77       | 	byte	"mousew"
34f80     00          | 	byte	0
34f81                 | LR__5644
34f81     6D 6F 75 73 
34f85     65 78       | 	byte	"mousex"
34f87     00          | 	byte	0
34f88                 | LR__5645
34f88     6D 6F 75 73 
34f8c     65 79       | 	byte	"mousey"
34f8e     00          | 	byte	0
34f8f                 | LR__5646
34f8f     70 65 65 6B | 	byte	"peek"
34f93     00          | 	byte	0
34f94                 | LR__5647
34f94     70 69 6E 72 
34f98     65 61 64    | 	byte	"pinread"
34f9b     00          | 	byte	0
34f9c                 | LR__5648
34f9c     72 64 70 69 
34fa0     6E          | 	byte	"rdpin"
34fa1     00          | 	byte	0
34fa2                 | LR__5649
34fa2     72 69 67 68 
34fa6     74 24       | 	byte	"right$"
34fa8     00          | 	byte	0
34fa9                 | LR__5650
34fa9     72 71 70 69 
34fad     6E          | 	byte	"rqpin"
34fae     00          | 	byte	0
34faf                 | LR__5651
34faf     72 6F 75 6E 
34fb3     64          | 	byte	"round"
34fb4     00          | 	byte	0
34fb5                 | LR__5652
34fb5     72 6E 64    | 	byte	"rnd"
34fb8     00          | 	byte	0
34fb9                 | LR__5653
34fb9     73 69 6E    | 	byte	"sin"
34fbc     00          | 	byte	0
34fbd                 | LR__5654
34fbd     73 71 72    | 	byte	"sqr"
34fc0     00          | 	byte	0
34fc1                 | LR__5655
34fc1     73 74 69 63 
34fc5     6B          | 	byte	"stick"
34fc6     00          | 	byte	0
34fc7                 | LR__5656
34fc7     73 74 72 69 
34fcb     67          | 	byte	"strig"
34fcc     00          | 	byte	0
34fcd                 | LR__5657
34fcd     73 74 72 24 | 	byte	"str$"
34fd1     00          | 	byte	0
34fd2                 | LR__5658
34fd2     74 61 6E    | 	byte	"tan"
34fd5     00          | 	byte	0
34fd6                 | LR__5659
34fd6     76 61 6C    | 	byte	"val"
34fd9     00          | 	byte	0
34fda                 | LR__5660
34fda     76 61 72 70 
34fde     74 72       | 	byte	"varptr"
34fe0     00          | 	byte	0
34fe1                 | LR__5661
34fe1     61          | 	byte	"a"
34fe2     00          | 	byte	0
34fe3                 | LR__5662
34fe3     7A          | 	byte	"z"
34fe4     00          | 	byte	0
34fe5                 | LR__5663
34fe5     5F          | 	byte	"_"
34fe6     00          | 	byte	0
34fe7                 | LR__5664
34fe7     61          | 	byte	"a"
34fe8     00          | 	byte	0
34fe9                 | LR__5665
34fe9     7A          | 	byte	"z"
34fea     00          | 	byte	0
34feb                 | LR__5666
34feb     30          | 	byte	"0"
34fec     00          | 	byte	0
34fed                 | LR__5667
34fed     39          | 	byte	"9"
34fee     00          | 	byte	0
34fef                 | LR__5668
34fef     5F          | 	byte	"_"
34ff0     00          | 	byte	0
34ff1                 | LR__5669
34ff1     2E          | 	byte	"."
34ff2     00          | 	byte	0
34ff3                 | LR__5670
34ff3     61          | 	byte	"a"
34ff4     00          | 	byte	0
34ff5                 | LR__5671
34ff5     7A          | 	byte	"z"
34ff6     00          | 	byte	0
34ff7                 | LR__5672
34ff7     30          | 	byte	"0"
34ff8     00          | 	byte	0
34ff9                 | LR__5673
34ff9     39          | 	byte	"9"
34ffa     00          | 	byte	0
34ffb                 | LR__5674
34ffb     5F          | 	byte	"_"
34ffc     00          | 	byte	0
34ffd                 | LR__5675
34ffd     24          | 	byte	"$"
34ffe     00          | 	byte	0
34fff                 | LR__5676
34fff     25          | 	byte	"%"
35000     00          | 	byte	0
35001                 | LR__5677
35001     21          | 	byte	"!"
35002     00          | 	byte	0
35003                 | LR__5678
35003     30          | 	byte	"0"
35004     00          | 	byte	0
35005                 | LR__5679
35005     39          | 	byte	"9"
35006     00          | 	byte	0
35007                 | LR__5680
35007     2E          | 	byte	"."
35008     00          | 	byte	0
35009                 | LR__5681
35009     24          | 	byte	"$"
3500a     00          | 	byte	0
3500b                 | LR__5682
3500b     25          | 	byte	"%"
3500c     00          | 	byte	0
3500d                 | LR__5683
3500d     2D          | 	byte	"-"
3500e     00          | 	byte	0
3500f                 | LR__5684
3500f     2E          | 	byte	"."
35010     00          | 	byte	0
35011                 | LR__5685
35011     24          | 	byte	"$"
35012     00          | 	byte	0
35013                 | LR__5686
35013     25          | 	byte	"%"
35014     00          | 	byte	0
35015                 | LR__5687
35015     30          | 	byte	"0"
35016     00          | 	byte	0
35017                 | LR__5688
35017     39          | 	byte	"9"
35018     00          | 	byte	0
35019                 | LR__5689
35019     5F          | 	byte	"_"
3501a     00          | 	byte	0
3501b                 | LR__5690
3501b     2E          | 	byte	"."
3501c     00          | 	byte	0
3501d                 | LR__5691
3501d     45          | 	byte	"E"
3501e     00          | 	byte	0
3501f                 | LR__5692
3501f     65          | 	byte	"e"
35020     00          | 	byte	0
35021                 | LR__5693
35021     2D          | 	byte	"-"
35022     00          | 	byte	0
35023                 | LR__5694
35023     61          | 	byte	"a"
35024     00          | 	byte	0
35025                 | LR__5695
35025     66          | 	byte	"f"
35026     00          | 	byte	0
35027                 | LR__5696
35027     30          | 	byte	"0"
35028     00          | 	byte	0
35029                 | LR__5697
35029     31          | 	byte	"1"
3502a     00          | 	byte	0
3502b                 | LR__5698
3502b     5F          | 	byte	"_"
3502c     00          | 	byte	0
3502d                 | LR__5699
3502d     2D          | 	byte	"-"
3502e     00          | 	byte	0
3502f                 | LR__5700
3502f     65          | 	byte	"e"
35030     00          | 	byte	0
35031                 | LR__5701
35031     2E          | 	byte	"."
35032     00          | 	byte	0
35033                 | LR__5702
35033     45          | 	byte	"E"
35034     00          | 	byte	0
35035                 | LR__5703
35035     65          | 	byte	"e"
35036     00          | 	byte	0
35037                 | LR__5704
35037     30          | 	byte	"0"
35038     00          | 	byte	0
35039                 | LR__5705
35039     39          | 	byte	"9"
3503a     00          | 	byte	0
3503b                 | LR__5706
3503b     24          | 	byte	"$"
3503c     00          | 	byte	0
3503d                 | LR__5707
3503d     25          | 	byte	"%"
3503e     00          | 	byte	0
3503f                 | LR__5708
3503f     2D          | 	byte	"-"
35040     00          | 	byte	0
35041                 | LR__5709
35041     24          | 	byte	"$"
35042     00          | 	byte	0
35043                 | LR__5710
35043     25          | 	byte	"%"
35044     00          | 	byte	0
35045                 | LR__5711
35045     30          | 	byte	"0"
35046     00          | 	byte	0
35047                 | LR__5712
35047     39          | 	byte	"9"
35048     00          | 	byte	0
35049                 | LR__5713
35049     5F          | 	byte	"_"
3504a     00          | 	byte	0
3504b                 | LR__5714
3504b     30          | 	byte	"0"
3504c     00          | 	byte	0
3504d                 | LR__5715
3504d     39          | 	byte	"9"
3504e     00          | 	byte	0
3504f                 | LR__5716
3504f     61          | 	byte	"a"
35050     00          | 	byte	0
35051                 | LR__5717
35051     66          | 	byte	"f"
35052     00          | 	byte	0
35053                 | LR__5718
35053     5F          | 	byte	"_"
35054     00          | 	byte	0
35055                 | LR__5719
35055     30          | 	byte	"0"
35056     00          | 	byte	0
35057                 | LR__5720
35057     31          | 	byte	"1"
35058     00          | 	byte	0
35059                 | LR__5721
35059     5F          | 	byte	"_"
3505a     00          | 	byte	0
3505b                 | LR__5722
3505b     30          | 	byte	"0"
3505c     00          | 	byte	0
3505d                 | LR__5723
3505d     39          | 	byte	"9"
3505e     00          | 	byte	0
3505f                 | LR__5724
3505f     5F          | 	byte	"_"
35060     00          | 	byte	0
35061                 | LR__5725
35061     22          | 	byte	34
35062     00          | 	byte	0
35063                 | LR__5726
35063     22          | 	byte	34
35064     00          | 	byte	0
35065                 | LR__5727
35065     44 69 6D 3A 
35069     20 61 74 20 
3506d     6C 69 6E 65 
35071     20          | 	byte	"Dim: at line "
35072     00          | 	byte	0
35073                 | LR__5728
35073     3A 20 77 61 
35077     72 6E 69 6E 
3507b     67 3A 20 74 
3507f     68 65 20 76 
35083     61 72 69 61 
35087     62 6C 65 20 
3508b     65 78 69 73 
3508f     74 65 64 2E | 	byte	": warning: the variable existed."
35093     00          | 	byte	0
35094                 | LR__5729
35094     28          | 	byte	"("
35095     00          | 	byte	0
35096                 | LR__5730
35096     61 73       | 	byte	"as"
35098     00          | 	byte	0
35099                 | LR__5731
35099     61 73       | 	byte	"as"
3509b     00          | 	byte	0
3509c                 | LR__5732
3509c     2C          | 	byte	","
3509d     00          | 	byte	0
3509e                 | LR__5733
3509e     29          | 	byte	")"
3509f     00          | 	byte	0
350a0                 | LR__5734
350a0     29          | 	byte	")"
350a1     00          | 	byte	0
350a2                 | LR__5735
350a2     61 73       | 	byte	"as"
350a4     00          | 	byte	0
350a5                 | LR__5736
350a5     62 79 74 65 | 	byte	"byte"
350a9     00          | 	byte	0
350aa                 | LR__5737
350aa     75 62 79 74 
350ae     65          | 	byte	"ubyte"
350af     00          | 	byte	0
350b0                 | LR__5738
350b0     73 68 6F 72 
350b4     74          | 	byte	"short"
350b5     00          | 	byte	0
350b6                 | LR__5739
350b6     75 73 68 6F 
350ba     72 74       | 	byte	"ushort"
350bc     00          | 	byte	0
350bd                 | LR__5740
350bd     6C 6F 6E 67 | 	byte	"long"
350c1     00          | 	byte	0
350c2                 | LR__5741
350c2     69 6E 74 65 
350c6     67 65 72    | 	byte	"integer"
350c9     00          | 	byte	0
350ca                 | LR__5742
350ca     75 6C 6F 6E 
350ce     67          | 	byte	"ulong"
350cf     00          | 	byte	0
350d0                 | LR__5743
350d0     69 6E 74 36 
350d4     34          | 	byte	"int64"
350d5     00          | 	byte	0
350d6                 | LR__5744
350d6     75 69 6E 74 
350da     36 34       | 	byte	"uint64"
350dc     00          | 	byte	0
350dd                 | LR__5745
350dd     73 69 6E 67 
350e1     6C 65       | 	byte	"single"
350e3     00          | 	byte	0
350e4                 | LR__5746
350e4     64 6F 75 62 
350e8     6C 65       | 	byte	"double"
350ea     00          | 	byte	0
350eb                 | LR__5747
350eb     73 74 72 69 
350ef     6E 67       | 	byte	"string"
350f1     00          | 	byte	0
350f2                 | LR__5748
350f2     74 6F       | 	byte	"to"
350f4     00          | 	byte	0
350f5                 | LR__5749
350f5     73 74 65 70 | 	byte	"step"
350f9     00          | 	byte	0
350fa                 | LR__5750
350fa     73 2E       | 	byte	"s."
350fc     00          | 	byte	0
350fd                 | LR__5751
350fd     67 6F 74 6F | 	byte	"goto"
35101     00          | 	byte	0
35102                 | LR__5752
35102     67 6F 73 75 
35106     62          | 	byte	"gosub"
35107     00          | 	byte	0
35108                 | LR__5753
35108     24          | 	byte	"$"
35109     00          | 	byte	0
3510a                 | LR__5754
3510a     26 68       | 	byte	"&h"
3510c     00          | 	byte	0
3510d                 | LR__5755
3510d     25          | 	byte	"%"
3510e     00          | 	byte	0
3510f                 | LR__5756
3510f     26 62       | 	byte	"&b"
35111     00          | 	byte	0
35112                 | LR__5757
35112                 | 	byte	
35112     00          | 	byte	0
35113                 | LR__5758
35113     61 63 6F 73 
35117     3A 20       | 	byte	"acos: "
35119     00          | 	byte	0
3511a                 | LR__5759
3511a     61 73 63 3A 
3511e     20          | 	byte	"asc: "
3511f     00          | 	byte	0
35120                 | LR__5760
35120     61 73 63 3A 
35124     20          | 	byte	"asc: "
35125     00          | 	byte	0
35126                 | LR__5761
35126     61 73 69 6E 
3512a     3A 20       | 	byte	"asin: "
3512c     00          | 	byte	0
3512d                 | LR__5762
3512d     61 74 6E 3A 
35131     20          | 	byte	"atn: "
35132     00          | 	byte	0
35133                 | LR__5763
35133     62 6C 69 74 
35137     3A 20       | 	byte	"blit: "
35139     00          | 	byte	0
3513a                 | LR__5764
3513a     62 69 6E 24 
3513e     3A 20       | 	byte	"bin$: "
35140     00          | 	byte	0
35141                 | LR__5765
35141     2F          | 	byte	"/"
35142     00          | 	byte	0
35143                 | LR__5766
35143     2F 73 64 2F 
35147     62 69 6E 2F | 	byte	"/sd/bin/"
3514b     00          | 	byte	0
3514c                 | LR__5767
3514c     53 79 73 74 
35150     65 6D 20 65 
35154     72 72 6F 72 
35158     20          | 	byte	"System error "
35159     00          | 	byte	0
3515a                 | LR__5768
3515a     3A 20       | 	byte	": "
3515c     00          | 	byte	0
3515d                 | LR__5769
3515d     2A          | 	byte	"*"
3515e     00          | 	byte	0
3515f                 | LR__5770
3515f     2E 2E       | 	byte	".."
35161     00          | 	byte	0
35162                 | LR__5771
35162     2F          | 	byte	"/"
35163     00          | 	byte	0
35164                 | LR__5772
35164     2F          | 	byte	"/"
35165     00          | 	byte	0
35166                 | LR__5773
35166     53 79 73 74 
3516a     65 6D 20 65 
3516e     72 72 6F 72 
35172     20          | 	byte	"System error "
35173     00          | 	byte	0
35174                 | LR__5774
35174     3A 20       | 	byte	": "
35176     00          | 	byte	0
35177                 | LR__5775
35177     43 75 72 72 
3517b     65 6E 74 20 
3517f     64 69 72 65 
35183     63 74 6F 72 
35187     79 3A 20    | 	byte	"Current directory: "
3518a     00          | 	byte	0
3518b                 | LR__5776
3518b     2F          | 	byte	"/"
3518c     00          | 	byte	0
3518d                 | LR__5777
3518d     53 79 73 74 
35191     65 6D 20 65 
35195     72 72 6F 72 
35199     20          | 	byte	"System error "
3519a     00          | 	byte	0
3519b                 | LR__5778
3519b     3A 20       | 	byte	": "
3519d     00          | 	byte	0
3519e                 | LR__5779
3519e     43 75 72 72 
351a2     65 6E 74 20 
351a6     64 69 72 65 
351aa     63 74 6F 72 
351ae     79 3A 20    | 	byte	"Current directory: "
351b1     00          | 	byte	0
351b2                 | LR__5780
351b2     2F          | 	byte	"/"
351b3     00          | 	byte	0
351b4                 | LR__5781
351b4     2F          | 	byte	"/"
351b5     00          | 	byte	0
351b6                 | LR__5782
351b6     2F          | 	byte	"/"
351b7     00          | 	byte	0
351b8                 | LR__5783
351b8     53 79 73 74 
351bc     65 6D 20 65 
351c0     72 72 6F 72 
351c4     20          | 	byte	"System error "
351c5     00          | 	byte	0
351c6                 | LR__5784
351c6     3A 20       | 	byte	": "
351c8     00          | 	byte	0
351c9                 | LR__5785
351c9     43 75 72 72 
351cd     65 6E 74 20 
351d1     64 69 72 65 
351d5     63 74 6F 72 
351d9     79 3A 20    | 	byte	"Current directory: "
351dc     00          | 	byte	0
351dd                 | LR__5786
351dd     63 68 72 24 
351e1     3A 20       | 	byte	"chr$: "
351e3     00          | 	byte	0
351e4                 | LR__5787
351e4     63 68 61 6E 
351e8     6E 65 6C 23 
351ec     20 65 78 70 
351f0     65 63 74 65 
351f4     64          | 	byte	"channel# expected"
351f5     00          | 	byte	0
351f6                 | LR__5788
351f6     63 6F 73 3A 
351fa     20          | 	byte	"cos: "
351fb     00          | 	byte	0
351fc                 | LR__5789
351fc                 | 	byte	
351fc     00          | 	byte	0
351fd                 | LR__5790
351fd                 | 	byte	
351fd     00          | 	byte	0
351fe                 | LR__5791
351fe     2F 73 64 2F 
35202     6D 65 64 69 
35206     61 2F 68 2F | 	byte	"/sd/media/h/"
3520a     00          | 	byte	0
3520b                 | LR__5792
3520b     53 79 73 74 
3520f     65 6D 20 65 
35213     72 72 6F 72 
35217     20          | 	byte	"System error "
35218     00          | 	byte	0
35219                 | LR__5793
35219     3A 20       | 	byte	": "
3521b     00          | 	byte	0
3521c                 | LR__5794
3521c                 | 	byte	
3521c     00          | 	byte	0
3521d                 | LR__5795
3521d                 | 	byte	
3521d     00          | 	byte	0
3521e                 | LR__5796
3521e     2F 73 64 2F 
35222     6D 65 64 69 
35226     61 2F 73 2F | 	byte	"/sd/media/s/"
3522a     00          | 	byte	0
3522b                 | LR__5797
3522b     53 79 73 74 
3522f     65 6D 20 65 
35233     72 72 6F 72 
35237     20          | 	byte	"System error "
35238     00          | 	byte	0
35239                 | LR__5798
35239     3A 20       | 	byte	": "
3523b     00          | 	byte	0
3523c                 | LR__5799
3523c     2F          | 	byte	"/"
3523d     00          | 	byte	0
3523e                 | LR__5800
3523e     2F          | 	byte	"/"
3523f     00          | 	byte	0
35240                 | LR__5801
35240     2F          | 	byte	"/"
35241     00          | 	byte	0
35242                 | LR__5802
35242     43 61 6E 6E 
35246     6F 74 20 64 
3524a     65 6C 65 74 
3524e     65 20 66 69 
35252     6C 65 20 6F 
35256     72 20 66 69 
3525a     6C 65 20 64 
3525e     6F 65 73 6E 
35262     27 74 20 65 
35266     78 69 73 74 
3526a     3A 20 73 79 
3526e     73 74 65 6D 
35272     20 65 72 72 
35276     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
35279     00          | 	byte	0
3527a                 | LR__5803
3527a     43 75 72 72 
3527e     65 6E 74 20 
35282     64 69 72 65 
35286     63 74 6F 72 
3528a     79 3A 20    | 	byte	"Current directory: "
3528d     00          | 	byte	0
3528e                 | LR__5804
3528e                 | 	byte	
3528e     00          | 	byte	0
3528f                 | LR__5805
3528f     2A          | 	byte	"*"
35290     00          | 	byte	0
35291                 | LR__5806
35291                 | 	byte	
35291     00          | 	byte	0
35292                 | LR__5807
35292     5B 64 69 72 
35296     5D 20       | 	byte	"[dir] "
35298     00          | 	byte	0
35299                 | LR__5808
35299     4D 6F 72 65 
3529d     20 74 68 61 
352a1     6E 20 31 32 
352a5     38 20 65 6E 
352a9     74 72 69 65 
352ad     73 20 66 6F 
352b1     75 6E 64 3A 
352b5     20 63 6C 65 
352b9     61 6E 20 79 
352bd     6F 75 72 20 
352c1     64 69 72 65 
352c5     63 74 6F 72 
352c9     79          | 	byte	"More than 128 entries found: clean your directory"
352ca     00          | 	byte	0
352cb                 | LR__5809
352cb     2A          | 	byte	"*"
352cc     00          | 	byte	0
352cd                 | LR__5810
352cd                 | 	byte	
352cd     00          | 	byte	0
352ce                 | LR__5811
352ce     4D 6F 72 65 
352d2     20 74 68 61 
352d6     6E 20 31 32 
352da     38 20 65 6E 
352de     74 72 69 65 
352e2     73 20 66 6F 
352e6     75 6E 64 3A 
352ea     20 63 6C 65 
352ee     61 6E 20 79 
352f2     6F 75 72 20 
352f6     64 69 72 65 
352fa     63 74 6F 72 
352fe     79          | 	byte	"More than 128 entries found: clean your directory"
352ff     00          | 	byte	0
35300                 | LR__5812
35300     45 72 72 6F 
35304     72 20       | 	byte	"Error "
35306     00          | 	byte	0
35307                 | LR__5813
35307     3A 20       | 	byte	": "
35309     00          | 	byte	0
3530a                 | LR__5814
3530a     67 65 74 65 
3530e     6E 76 73 75 
35312     73 74 61 69 
35316     6E 3A 20    | 	byte	"getenvsustain: "
35319     00          | 	byte	0
3531a                 | LR__5815
3531a     67 65 74 70 
3531e     69 78 65 6C 
35322     3A 20       | 	byte	"getpixel: "
35324     00          | 	byte	0
35325                 | LR__5816
35325     68 65 78 24 
35329     3A 20       | 	byte	"hex$: "
3532b     00          | 	byte	0
3532c                 | LR__5817
3532c                 | 	byte	
3532c     00          | 	byte	0
3532d                 | LR__5818
3532d     49 6E 20 69 
35331     6E 70 75 74 
35335     3A 20       | 	byte	"In input: "
35337     00          | 	byte	0
35338                 | LR__5819
35338     2C          | 	byte	","
35339     00          | 	byte	0
3533a                 | LR__5820
3533a                 | 	byte	
3533a     00          | 	byte	0
3533b                 | LR__5821
3533b                 | 	byte	
3533b     00          | 	byte	0
3533c                 | LR__5822
3533c     6C 65 66 74 
35340     24 3A 20    | 	byte	"left$: "
35343     00          | 	byte	0
35344                 | LR__5823
35344     6C 65 66 74 
35348     24 3A 20    | 	byte	"left$: "
3534b     00          | 	byte	0
3534c                 | LR__5824
3534c     6C 65 6E 3A 
35350     20          | 	byte	"len: "
35351     00          | 	byte	0
35352                 | LR__5825
35352     6C 65 6E 3A 
35356     20          | 	byte	"len: "
35357     00          | 	byte	0
35358                 | LR__5826
35358                 | 	byte	
35358     00          | 	byte	0
35359                 | LR__5827
35359     2F          | 	byte	"/"
3535a     00          | 	byte	0
3535b                 | LR__5828
3535b     2F          | 	byte	"/"
3535c     00          | 	byte	0
3535d                 | LR__5829
3535d     2E 62 61 73 | 	byte	".bas"
35361     00          | 	byte	0
35362                 | LR__5830
35362     53 79 73 74 
35366     65 6D 20 65 
3536a     72 72 6F 72 
3536e     20          | 	byte	"System error "
3536f     00          | 	byte	0
35370                 | LR__5831
35370     3A 20       | 	byte	": "
35372     00          | 	byte	0
35373                 | LR__5832
35373     2E 62 61 73 | 	byte	".bas"
35377     00          | 	byte	0
35378                 | LR__5833
35378     2F          | 	byte	"/"
35379     00          | 	byte	0
3537a                 | LR__5834
3537a                 | 	byte	
3537a     00          | 	byte	0
3537b                 | LR__5835
3537b     4C 6F 61 64 
3537f     65 64 20    | 	byte	"Loaded "
35382     00          | 	byte	0
35383                 | LR__5836
35383     2F          | 	byte	"/"
35384     00          | 	byte	0
35385                 | LR__5837
35385     6C 6F 67 3A 
35389     20          | 	byte	"log: "
3538a     00          | 	byte	0
3538b                 | LR__5838
3538b     6D 69 64 24 
3538f     3A 20       | 	byte	"mid$: "
35391     00          | 	byte	0
35392                 | LR__5839
35392     6D 69 64 24 
35396     3A 20       | 	byte	"mid$: "
35398     00          | 	byte	0
35399                 | LR__5840
35399     43 61 6E 6E 
3539d     6F 74 20 63 
353a1     72 65 61 74 
353a5     65 20 61 20 
353a9     64 69 72 65 
353ad     63 74 6F 72 
353b1     79 3A 20 73 
353b5     79 73 74 65 
353b9     6D 20 65 72 
353bd     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
353c1     00          | 	byte	0
353c2                 | LR__5841
353c2     20 42 41 53 
353c6     49 43 20 62 
353ca     79 74 65 73 
353ce     20 66 72 65 
353d2     65          | 	byte	" BASIC bytes free"
353d3     00          | 	byte	0
353d4                 | LR__5842
353d4                 | 	byte	
353d4     00          | 	byte	0
353d5                 | LR__5843
353d5                 | 	byte	
353d5     00          | 	byte	0
353d6                 | LR__5844
353d6                 | 	byte	
353d6     00          | 	byte	0
353d7                 | LR__5845
353d7     6E 6F 6E 61 
353db     6D 65 2E 62 
353df     61 73       | 	byte	"noname.bas"
353e1     00          | 	byte	0
353e2                 | LR__5846
353e2     66 69 6C 65 
353e6     6E 61 6D 65 
353ea     20 65 78 70 
353ee     65 63 74 65 
353f2     64          | 	byte	"filename expected"
353f3     00          | 	byte	0
353f4                 | LR__5847
353f4     72 65 61 64 | 	byte	"read"
353f8     00          | 	byte	0
353f9                 | LR__5848
353f9     77 72 69 74 
353fd     65          | 	byte	"write"
353fe     00          | 	byte	0
353ff                 | LR__5849
353ff     61 70 70 65 
35403     6E 64       | 	byte	"append"
35405     00          | 	byte	0
35406                 | LR__5850
35406     63 68 61 6E 
3540a     6E 65 6C 23 
3540e     20 65 78 70 
35412     65 63 74 65 
35416     64          | 	byte	"channel# expected"
35417     00          | 	byte	0
35418                 | LR__5851
35418     4F 70 65 6E 
3541c     3A 20 69 6E 
35420     76 61 6C 69 
35424     64 20 6D 6F 
35428     64 65       | 	byte	"Open: invalid mode"
3542a     00          | 	byte	0
3542b                 | LR__5852
3542b     50 72 69 6E 
3542f     74 20 74 6F 
35433     20 63 68 61 
35437     6E 6E 65 6C 
3543b     20 28 6E 6F 
3543f     74 20 79 65 
35443     74 20 69 6D 
35447     70 6C 65 6D 
3544b     65 6E 74 65 
3544f     64 29       | 	byte	"Print to channel (not yet implemented)"
35451     00          | 	byte	0
35452                 | LR__5853
35452                 | 	byte	
35452     00          | 	byte	0
35453                 | LR__5854
35453     64 61 74 61 | 	byte	"data"
35457     00          | 	byte	0
35458                 | LR__5855
35458                 | 	byte	
35458     00          | 	byte	0
35459                 | LR__5856
35459     49 6E 20 72 
3545d     65 61 64 3A 
35461     20          | 	byte	"In read: "
35462     00          | 	byte	0
35463                 | LR__5857
35463                 | 	byte	
35463     00          | 	byte	0
35464                 | LR__5858
35464                 | 	byte	
35464     00          | 	byte	0
35465                 | LR__5859
35465     2C          | 	byte	","
35466     00          | 	byte	0
35467                 | LR__5860
35467                 | 	byte	
35467     00          | 	byte	0
35468                 | LR__5861
35468                 | 	byte	
35468     00          | 	byte	0
35469                 | LR__5862
35469                 | 	byte	
35469     00          | 	byte	0
3546a                 | LR__5863
3546a                 | 	byte	
3546a     00          | 	byte	0
3546b                 | LR__5864
3546b                 | 	byte	
3546b     00          | 	byte	0
3546c                 | LR__5865
3546c     72 69 67 68 
35470     74 24 3A 20 | 	byte	"right$: "
35474     00          | 	byte	0
35475                 | LR__5866
35475     72 69 67 68 
35479     74 24 3A 20 | 	byte	"right$: "
3547d     00          | 	byte	0
3547e                 | LR__5867
3547e     72 6E 64 3A 
35482     20          | 	byte	"rnd: "
35483     00          | 	byte	0
35484                 | LR__5868
35484     72 6E 64 3A 
35488     20          | 	byte	"rnd: "
35489     00          | 	byte	0
3548a                 | LR__5869
3548a                 | 	byte	
3548a     00          | 	byte	0
3548b                 | LR__5870
3548b     53 74 6F 70 
3548f     70 65 64 20 
35493     61 74 20 6C 
35497     69 6E 65 20 | 	byte	"Stopped at line "
3549b     00          | 	byte	0
3549c                 | LR__5871
3549c                 | 	byte	
3549c     00          | 	byte	0
3549d                 | LR__5872
3549d     2F          | 	byte	"/"
3549e     00          | 	byte	0
3549f                 | LR__5873
3549f                 | 	byte	
3549f     00          | 	byte	0
354a0                 | LR__5874
354a0     53 61 76 65 
354a4     64 20 61 73 
354a8     20          | 	byte	"Saved as "
354a9     00          | 	byte	0
354aa                 | LR__5875
354aa     2F          | 	byte	"/"
354ab     00          | 	byte	0
354ac                 | LR__5876
354ac     73 69 6E 3A 
354b0     20          | 	byte	"sin: "
354b1     00          | 	byte	0
354b2                 | LR__5877
354b2     73 71 72 3A 
354b6     20          | 	byte	"sqr: "
354b7     00          | 	byte	0
354b8                 | LR__5878
354b8     73 74 69 63 
354bc     6B 3A 20    | 	byte	"stick: "
354bf     00          | 	byte	0
354c0                 | LR__5879
354c0     73 74 72 69 
354c4     67 3A 20    | 	byte	"strig: "
354c7     00          | 	byte	0
354c8                 | LR__5880
354c8     74 61 6E 3A 
354cc     20          | 	byte	"tan: "
354cd     00          | 	byte	0
354ce                 | LR__5881
354ce     76 61 6C 3A 
354d2     20          | 	byte	"val: "
354d3     00          | 	byte	0
354d4                 | LR__5882
354d4     76 61 6C 3A 
354d8     20          | 	byte	"val: "
354d9     00          | 	byte	0
354da                 | LR__5883
354da     24          | 	byte	"$"
354db     00          | 	byte	0
354dc                 | LR__5884
354dc     26 68       | 	byte	"&h"
354de     00          | 	byte	0
354df                 | LR__5885
354df     25          | 	byte	"%"
354e0     00          | 	byte	0
354e1                 | LR__5886
354e1     26 62       | 	byte	"&b"
354e3     00          | 	byte	0
354e4                 | LR__5887
354e4                 | 	byte	
354e4     00          | 	byte	0
354e5                 | LR__5888
354e5     45 78 70 65 
354e9     63 74 65 64 
354ed     20 6E 75 6D 
354f1     62 65 72 2C 
354f5     20 67 6F 74 
354f9     20 73 6F 6D 
354fd     65 74 68 69 
35501     6E 67 20 65 
35505     6C 73 65    | 	byte	"Expected number, got something else"
35508     00          | 	byte	0
35509                 | LR__5889
35509     43 61 6E 6E 
3550d     6F 74 20 61 
35511     64 64 20 61 
35515     20 6E 75 6D 
35519     62 65 72 20 
3551d     74 6F 20 61 
35521     20 73 74 72 
35525     69 6E 67    | 	byte	"Cannot add a number to a string"
35528     00          | 	byte	0
35529                 | LR__5890
35529     43 61 6E 6E 
3552d     6F 74 20 73 
35531     75 62 73 74 
35535     72 61 63 74 
35539     20 73 74 72 
3553d     69 6E 67 73 | 	byte	"Cannot substract strings"
35541     00          | 	byte	0
35542                 | LR__5891
35542     55 6E 6B 6E 
35546     6F 77 6E 20 
3554a     65 72 72 6F 
3554e     72 20 77 68 
35552     69 6C 65 20 
35556     61 64 64 69 
3555a     6E 67       | 	byte	"Unknown error while adding"
3555c     00          | 	byte	0
3555d                 | LR__5892
3555d     55 6E 6B 6E 
35561     6F 77 6E 20 
35565     65 72 72 6F 
35569     72 20 77 68 
3556d     69 6C 65 20 
35571     73 75 62 73 
35575     74 72 61 63 
35579     74 69 6E 67 | 	byte	"Unknown error while substracting"
3557d     00          | 	byte	0
3557e                 | LR__5893
3557e     43 61 6E 6E 
35582     6F 74 20 64 
35586     6F 20 6C 6F 
3558a     67 69 63 20 
3558e     6F 70 65 72 
35592     61 74 69 6F 
35596     6E 20 6F 6E 
3559a     20 73 74 72 
3559e     69 6E 67 20 
355a2     6F 72 20 66 
355a6     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
355aa     00          | 	byte	0
355ab                 | LR__5894
355ab     55 6E 6B 6E 
355af     6F 77 6E 20 
355b3     65 72 72 6F 
355b7     72 20 77 68 
355bb     69 6C 65 20 
355bf     64 6F 69 6E 
355c3     67 20 6C 6F 
355c7     67 69 63 20 
355cb     6F 70 65 72 
355cf     61 74 69 6F 
355d3     6E          | 	byte	"Unknown error while doing logic operation"
355d4     00          | 	byte	0
355d5                 | LR__5895
355d5     43 61 6E 6E 
355d9     6F 74 20 6D 
355dd     75 6C 74 69 
355e1     70 6C 79 20 
355e5     73 74 72 69 
355e9     6E 67 73    | 	byte	"Cannot multiply strings"
355ec     00          | 	byte	0
355ed                 | LR__5896
355ed     55 6E 6B 6E 
355f1     6F 77 6E 20 
355f5     65 72 72 6F 
355f9     72 20 77 68 
355fd     69 6C 65 20 
35601     6D 75 6C 74 
35605     69 70 6C 79 
35609     69 6E 67    | 	byte	"Unknown error while multiplying"
3560c     00          | 	byte	0
3560d                 | LR__5897
3560d     43 61 6E 6E 
35611     6F 74 20 64 
35615     69 76 69 64 
35619     65 20 73 74 
3561d     72 69 6E 67 
35621     73          | 	byte	"Cannot divide strings"
35622     00          | 	byte	0
35623                 | LR__5898
35623     55 6E 6B 6E 
35627     6F 77 6E 20 
3562b     65 72 72 6F 
3562f     72 20 77 68 
35633     69 6C 65 20 
35637     64 69 76 69 
3563b     64 69 6E 67 | 	byte	"Unknown error while dividing"
3563f     00          | 	byte	0
35640                 | LR__5899
35640     43 61 6E 6E 
35644     6F 74 20 63 
35648     6F 6D 70 75 
3564c     74 65 20 61 
35650     20 70 6F 77 
35654     65 72 20 6F 
35658     66 20 61 20 
3565c     73 74 72 69 
35660     6E 67       | 	byte	"Cannot compute a power of a string"
35662     00          | 	byte	0
35663                 | LR__5900
35663     55 6E 6B 6E 
35667     6F 77 6E 20 
3566b     65 72 72 6F 
3566f     72 20 77 68 
35673     69 6C 65 20 
35677     63 6F 6D 70 
3567b     75 74 69 6E 
3567f     67 20 61 20 
35683     70 6F 77 65 
35687     72          | 	byte	"Unknown error while computing a power"
35688     00          | 	byte	0
35689                 | LR__5901
35689     52 69 67 68 
3568d     74 20 70 61 
35691     72 65 6E 74 
35695     68 65 73 69 
35699     73 20 65 78 
3569d     70 65 63 74 
356a1     65 64       | 	byte	"Right parenthesis expected"
356a3     00          | 	byte	0
356a4                 | LR__5902
356a4     45 78 70 65 
356a8     63 74 65 64 
356ac     20 73 74 72 
356b0     69 6E 67    | 	byte	"Expected string"
356b3     00          | 	byte	0
356b4                 | LR__5903
356b4     45 78 70 65 
356b8     63 74 65 64 
356bc     20 66 6C 6F 
356c0     61 74       | 	byte	"Expected float"
356c2     00          | 	byte	0
356c3                 | LR__5904
356c3     45 78 70 65 
356c7     63 74 65 64 
356cb     20 75 6E 73 
356cf     69 67 6E 65 
356d3     64 20 69 6E 
356d7     74 65 67 65 
356db     72          | 	byte	"Expected unsigned integer"
356dc     00          | 	byte	0
356dd                 | LR__5905
356dd     45 78 70 65 
356e1     63 74 65 64 
356e5     20 69 6E 74 
356e9     65 67 65 72 | 	byte	"Expected integer"
356ed     00          | 	byte	0
356ee                 | LR__5906
356ee     4E 6F 20 6D 
356f2     6F 72 65 20 
356f6     76 61 72 69 
356fa     61 62 6C 65 
356fe     20 73 6C 6F 
35702     74 73       | 	byte	"No more variable slots"
35704     00          | 	byte	0
35705                 | LR__5907
35705     56 61 72 69 
35709     61 62 6C 65 
3570d     20 6E 6F 74 
35711     20 66 6F 75 
35715     6E 64       | 	byte	"Variable not found"
35717     00          | 	byte	0
35718                 | LR__5908
35718     43 6F 6D 6D 
3571c     61 20 65 78 
35720     70 65 63 74 
35724     65 64       | 	byte	"Comma expected"
35726     00          | 	byte	0
35727                 | LR__5909
35727     43 6F 6D 6D 
3572b     61 20 6F 72 
3572f     20 73 65 6D 
35733     69 63 6F 6C 
35737     6F 6E 20 65 
3573b     78 70 65 63 
3573f     74 65 64    | 	byte	"Comma or semicolon expected"
35742     00          | 	byte	0
35743                 | LR__5910
35743     55 6E 6B 6E 
35747     6F 77 6E 20 
3574b     63 6F 6D 6D 
3574f     61 6E 64    | 	byte	"Unknown command"
35752     00          | 	byte	0
35753                 | LR__5911
35753     53 74 61 63 
35757     6B 20 75 6E 
3575b     64 65 72 66 
3575f     6C 6F 77    | 	byte	"Stack underflow"
35762     00          | 	byte	0
35763                 | LR__5912
35763     43 61 6E 6E 
35767     6F 74 20 65 
3576b     78 65 63 75 
3576f     74 65 20 67 
35773     6F 74 6F 20 
35777     6F 72 20 67 
3577b     6F 73 75 62 
3577f     20 69 6E 20 
35783     74 68 65 20 
35787     69 6D 6D 65 
3578b     64 69 61 74 
3578f     65 20 6D 6F 
35793     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
35795     00          | 	byte	0
35796                 | LR__5913
35796     43 61 6E 6E 
3579a     6F 74 20 6C 
3579e     6F 61 64 20 
357a2     66 72 6F 6D 
357a6     20 74 68 69 
357aa     73 20 66 69 
357ae     6C 65       | 	byte	"Cannot load from this file"
357b0     00          | 	byte	0
357b1                 | LR__5914
357b1     54 68 65 20 
357b5     70 72 6F 67 
357b9     72 61 6D 20 
357bd     69 73 20 65 
357c1     6D 70 74 79 | 	byte	"The program is empty"
357c5     00          | 	byte	0
357c6                 | LR__5915
357c6     49 66 20 61 
357ca     66 74 65 72 
357ce     20 69 66    | 	byte	"If after if"
357d1     00          | 	byte	0
357d2                 | LR__5916
357d2     45 6D 70 74 
357d6     79 20 65 78 
357da     70 72 65 73 
357de     73 69 6F 6E | 	byte	"Empty expression"
357e2     00          | 	byte	0
357e3                 | LR__5917
357e3     53 74 72 69 
357e7     6E 67 20 65 
357eb     78 70 65 63 
357ef     74 65 64    | 	byte	"String expected"
357f2     00          | 	byte	0
357f3                 | LR__5918
357f3     49 6E 74 65 
357f7     72 70 72 65 
357fb     74 65 72 20 
357ff     69 6E 74 65 
35803     72 6E 61 6C 
35807     20 65 72 72 
3580b     6F 72       | 	byte	"Interpreter internal error"
3580d     00          | 	byte	0
3580e                 | LR__5919
3580e     45 78 70 65 
35812     63 74 65 64 
35816     20 61 73 73 
3581a     69 67 6E    | 	byte	"Expected assign"
3581d     00          | 	byte	0
3581e                 | LR__5920
3581e     45 78 70 65 
35822     63 74 65 64 
35826     20 27 74 6F 
3582a     27          | 	byte	"Expected 'to'"
3582b     00          | 	byte	0
3582c                 | LR__5921
3582c     45 78 70 65 
35830     63 74 65 64 
35834     20 69 6E 74 
35838     65 67 65 72 
3583c     20 76 61 72 
35840     69 61 62 6C 
35844     65          | 	byte	"Expected integer variable"
35845     00          | 	byte	0
35846                 | LR__5922
35846     55 6E 69 6E 
3584a     69 74 69 61 
3584e     6C 69 7A 65 
35852     64 20 76 61 
35856     72 69 61 62 
3585a     6C 65 20 69 
3585e     6E 20 27 6E 
35862     65 78 74 27 
35866     2C 20 75 73 
3586a     65 20 27 66 
3586e     6F 72 27 20 
35872     62 65 66 6F 
35876     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
35878     00          | 	byte	0
35879                 | LR__5923
35879     4E 6F 20 6D 
3587d     6F 72 65 20 
35881     73 6C 6F 74 
35885     73 20 66 6F 
35889     72 20 27 66 
3588d     6F 72 27    | 	byte	"No more slots for 'for'"
35890     00          | 	byte	0
35891                 | LR__5924
35891     27 4E 65 78 
35895     74 27 20 64 
35899     6F 65 73 6E 
3589d     27 74 20 6D 
358a1     61 74 63 68 
358a5     20 27 66 6F 
358a9     72 27       | 	byte	"'Next' doesn't match 'for'"
358ab     00          | 	byte	0
358ac                 | LR__5925
358ac     27 47 6F 74 
358b0     6F 27 20 74 
358b4     61 72 67 65 
358b8     74 20 6C 69 
358bc     6E 65 20 6E 
358c0     6F 74 20 66 
358c4     6F 75 6E 64 | 	byte	"'Goto' target line not found"
358c8     00          | 	byte	0
358c9                 | LR__5926
358c9     42 61 64 20 
358cd     6E 75 6D 62 
358d1     65 72 20 6F 
358d5     66 20 70 61 
358d9     72 61 6D 65 
358dd     74 65 72 73 | 	byte	"Bad number of parameters"
358e1     00          | 	byte	0
358e2                 | LR__5927
358e2     46 75 6E 63 
358e6     74 69 6F 6E 
358ea     20 75 6E 64 
358ee     65 66 69 6E 
358f2     65 64 20 66 
358f6     6F 72 20 73 
358fa     74 72 69 6E 
358fe     67 73       | 	byte	"Function undefined for strings"
35900     00          | 	byte	0
35901                 | LR__5928
35901     42 61 64 20 
35905     70 61 72 61 
35909     6D 65 74 65 
3590d     72          | 	byte	"Bad parameter"
3590e     00          | 	byte	0
3590f                 | LR__5929
3590f     43 61 6E 6E 
35913     6F 74 20 64 
35917     65 63 6C 61 
3591b     72 65 20 61 
3591f     6E 20 61 72 
35923     72 61 79 3A 
35927     20 74 68 65 
3592b     20 76 61 72 
3592f     69 61 62 6C 
35933     65 20 65 78 
35937     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3593b     00          | 	byte	0
3593c                 | LR__5930
3593c     45 78 70 65 
35940     63 74 65 64 
35944     20 27 28 27 | 	byte	"Expected '('"
35948     00          | 	byte	0
35949                 | LR__5931
35949     45 78 70 65 
3594d     63 74 65 64 
35951     20 27 29 27 
35955     20 6F 72 20 
35959     27 2C 27    | 	byte	"Expected ')' or ','"
3595c     00          | 	byte	0
3595d                 | LR__5932
3595d     4E 6F 20 6D 
35961     6F 72 65 20 
35965     74 68 61 6E 
35969     20 33 20 64 
3596d     69 6D 65 6E 
35971     73 69 6F 6E 
35975     73 20 73 75 
35979     70 70 6F 72 
3597d     74 65 64    | 	byte	"No more than 3 dimensions supported"
35980     00          | 	byte	0
35981                 | LR__5933
35981     56 61 72 69 
35985     61 62 6C 65 
35989     20 6E 61 6D 
3598d     65 20 65 78 
35991     70 65 63 74 
35995     65 64       | 	byte	"Variable name expected"
35997     00          | 	byte	0
35998                 | LR__5934
35998     54 79 70 65 
3599c     20 6E 61 6D 
359a0     65 20 65 78 
359a4     70 65 63 74 
359a8     65 64       | 	byte	"Type name expected"
359aa     00          | 	byte	0
359ab                 | LR__5935
359ab     54 79 70 65 
359af     20 6E 6F 74 
359b3     20 73 75 70 
359b7     70 6F 72 74 
359bb     65 64 20 79 
359bf     65 74       | 	byte	"Type not supported yet"
359c1     00          | 	byte	0
359c2                 | LR__5936
359c2     41 72 72 61 
359c6     79 20 69 6E 
359ca     64 65 78 20 
359ce     6F 75 74 20 
359d2     6F 66 20 72 
359d6     61 6E 67 65 | 	byte	"Array index out of range"
359da     00          | 	byte	0
359db                 | LR__5937
359db     42 61 64 20 
359df     74 79 70 65 
359e3     20 77 68 69 
359e7     6C 65 20 61 
359eb     73 73 69 67 
359ef     6E 69 6E 67 
359f3     20 74 6F 20 
359f7     61 72 72 61 
359fb     79          | 	byte	"Bad type while assigning to array"
359fc     00          | 	byte	0
359fd                 | LR__5938
359fd     54 6F 6F 20 
35a01     6D 61 6E 79 
35a05     20 76 61 72 
35a09     69 61 62 6C 
35a0d     65 73       | 	byte	"Too many variables"
35a0f     00          | 	byte	0
35a10                 | LR__5939
35a10     27 54 68 65 
35a14     6E 27 20 65 
35a18     78 70 65 63 
35a1c     74 65 64    | 	byte	"'Then' expected"
35a1f     00          | 	byte	0
35a20                 | LR__5940
35a20     44 69 72 65 
35a24     63 74 6F 72 
35a28     79 20 64 6F 
35a2c     65 73 6E 27 
35a30     74 20 65 78 
35a34     69 73 74    | 	byte	"Directory doesn't exist"
35a37     00          | 	byte	0
35a38                 | LR__5941
35a38     55 6E 65 78 
35a3c     70 65 63 74 
35a40     65 64 20 65 
35a44     6E 64 20 6F 
35a48     66 20 6C 69 
35a4c     6E 65       | 	byte	"Unexpected end of line"
35a4e     00          | 	byte	0
35a4f                 | LR__5942
35a4f     4E 6F 20 6D 
35a53     6F 72 65 20 
35a57     64 61 74 61 | 	byte	"No more data"
35a5b     00          | 	byte	0
35a5c                 | LR__5943
35a5c     45 72 72 6F 
35a60     72 20       | 	byte	"Error "
35a62     00          | 	byte	0
35a63                 | LR__5944
35a63     20 2D 20    | 	byte	" - "
35a66     00          | 	byte	0
35a67                 | LR__5945
35a67     20 69 6E 20 
35a6b     6C 69 6E 65 
35a6f     20          | 	byte	" in line "
35a70     00          | 	byte	0
35a71                 | LR__5946
35a71                 | 	byte	
35a71     00          | 	byte	0
35a72                 | LR__5947
35a72     2F 73 64    | 	byte	"/sd"
35a75     00          | 	byte	0
35a76                 | LR__5948
35a76     2F 73 64 2F 
35a7a     62 61 73    | 	byte	"/sd/bas"
35a7d     00          | 	byte	0
35a7e                 | LR__5949
35a7e     2F 73 64 2F 
35a82     62 61 73    | 	byte	"/sd/bas"
35a85     00          | 	byte	0
35a86                 | LR__5950
35a86     20 42 41 53 
35a8a     49 43 20 62 
35a8e     79 74 65 73 
35a92     20 66 72 65 
35a96     65          | 	byte	" BASIC bytes free"
35a97     00          | 	byte	0
35a98                 | LR__5951
35a98     52 65 61 64 
35a9c     79          | 	byte	"Ready"
35a9d     00          | 	byte	0
35a9e                 | LR__5952
35a9e     6E 6F 6E 61 
35aa2     6D 65 2E 62 
35aa6     61 73       | 	byte	"noname.bas"
35aa8     00          | 	byte	0
35aa9                 | LR__5953
35aa9     2F 73 64 2F 
35aad     62 61 73 2F 
35ab1     61 75 74 6F 
35ab5     72 75 6E 2E 
35ab9     62 61 73    | 	byte	"/sd/bas/autorun.bas"
35abc     00          | 	byte	0
35abd                 | LR__5954
35abd     72 75 6E 20 
35ac1     61 75 74 6F 
35ac5     72 75 6E 2E 
35ac9     62 61 73    | 	byte	"run autorun.bas"
35acc     00          | 	byte	0
35acd                 | LR__5955
35acd                 | 	byte	
35acd     00          | 	byte	0
35ace     00 00       | 	alignl
35ad0                 | _dat_
35ad0     00 00 00 00 
35ad4     00 00 00 00 
35ad8     00 00 00 00 
35adc     00 00 00 00 | 	byte	$00[16]
35ae0     61 41 17 0E 
35ae4     62 42 00 00 
35ae8     63 43 19 10 
35aec     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
35af0     65 45 18 0F 
35af4     66 46 00 00 
35af8     67 47 00 00 
35afc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
35b00     69 49 00 00 
35b04     6A 4A 00 00 
35b08     6B 4B 00 00 
35b0c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
35b10     6D 4D 00 00 
35b14     6E 4E 1A 11 
35b18     6F 4F 1E 15 
35b1c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
35b20     71 51 00 00 
35b24     72 52 00 00 
35b28     73 53 1B 12 
35b2c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
35b30     75 55 00 00 
35b34     76 56 00 00 
35b38     77 57 00 00 
35b3c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
35b40     79 59 00 00 
35b44     7A 5A 1D 14 
35b48     31 21 04 00 
35b4c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
35b50     33 23 06 00 
35b54     34 24 07 00 
35b58     35 25 08 00 
35b5c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
35b60     37 26 0A 00 
35b64     38 2A 0B 00 
35b68     39 28 0C 00 
35b6c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
35b70     8D 8D 00 00 
35b74     9B 9B 00 00 
35b78     88 88 00 00 
35b7c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
35b80     20 20 00 00 
35b84     2D 5F 00 00 
35b88     3D 2B 00 00 
35b8c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
35b90     5D 7D 00 00 
35b94     5C 7C 00 00 
35b98     23 7E 00 00 
35b9c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
35ba0     27 22 00 00 
35ba4     60 7E 03 00 
35ba8     2C 3C 00 00 
35bac     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
35bb0     2F 3F 00 00 
35bb4     B9 B9 00 00 
35bb8     BA 00 00 00 
35bbc     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
35bc0     BC 00 00 00 
35bc4     BD 00 00 00 
35bc8     BE 00 00 00 
35bcc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
35bd0     C0 00 00 00 
35bd4     C1 00 00 00 
35bd8     C2 00 00 00 
35bdc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
35be0     C4 00 00 00 
35be4     C5 00 00 00 
35be8     C6 00 00 00 
35bec     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
35bf0     C8 00 00 00 
35bf4     C9 00 00 00 
35bf8     CA 00 00 00 
35bfc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
35c00     7F 7F 00 00 
35c04     CC 00 00 00 
35c08     CD 00 00 00 
35c0c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
35c10     CF 00 00 00 
35c14     D0 00 00 00 
35c18     D1 00 00 00 
35c1c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
35c20     2F 2F 00 00 
35c24     2A 2A 00 00 
35c28     2D 2D 00 00 
35c2c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
35c30     8D 8D 00 00 
35c34     31 31 00 00 
35c38     32 32 00 00 
35c3c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
35c40     34 34 00 00 
35c44     35 35 00 00 
35c48     36 36 00 00 
35c4c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
35c50     38 38 00 00 
35c54     39 39 00 00 
35c58     30 30 00 00 
35c5c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
35c60     5C 7C 00 00 
35c64     00 00 00 00 
35c68     00 00 00 00 
35c6c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
35c70     00 00 00 00 
      ...             
35cc8     00 00 00 00 
35ccc     00 00 00 00 | 	byte	$00[96]
35cd0     2B 00 A6 F2 
35cd4     24 A7 09 80 
35cd8     5B 88 4D 89 
35cdc     80 88 A5 88 | atari_spl file "atari.spl"
35ce0     6D 88 B8 88 
35ce4     80 88 CB 88 
35ce8     92 88 A5 88 
35cec     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
35cf0     A5 88 CA 88 
35cf4     A6 88 DD 88 
35cf8     B8 88 AB 89 
35cfc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
35d00     C8 AD C6 F1 
35d04     91 06 B6 FF 
35d08     13 00 4A 00 
35d0c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
35d10     5D 00 5E 00 
35d14     5D 00 5E 00 
35d18     5E 00 5D 00 
35d1c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
35d20     38 00 83 00 
35d24     25 00 83 00 
35d28     C3 FE D1 04 
35d2c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
35d30     48 88 38 85 
35d34     41 8A CB 88 
35d38     28 89 B8 88 
35d3c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
35d40     15 89 03 89 
35d44     02 89 15 89 
35d48     16 89 15 89 
35d4c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
35d50     15 89 3A 89 
35d54     72 89 E3 89 
35d58     52 83 AD 97 
35d5c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
35d60     0C 02 B6 FF 
35d64     E1 00 A8 00 
35d68     F3 00 A8 00 
35d6c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
35d70     CE 00 CD 00 
35d74     CD 00 BA 00 
35d78     E1 00 BB 00 
35d7c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
35d80     DF 00 C9 FF 
35d84     E6 01 B6 06 
35d88     EE DD 8D 98 
35d8c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
35d90     97 89 73 89 
35d94     3B 89 60 89 
35d98     60 89 60 89 
35d9c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
35da0     73 89 72 89 
35da4     85 89 73 89 
35da8     AA 89 60 89 
35dac     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
35db0     E8 8A 18 86 
35db4     92 88 A5 C2 
35db8     E0 00 C3 05 
35dbc     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
35dc0     F2 00 64 01 
35dc4     06 01 3E 01 
35dc8     2B 01 2B 01 
35dcc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
35dd0     2B 01 2A 01 
35dd4     2B 01 2B 01 
35dd8     2B 01 18 01 
35ddc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
35de0     39 07 61 F3 
35de4     C0 AF 37 85 
35de8     0F 88 8B 8A 
35dec     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
35df0     AB 89 D0 89 
35df4     AB 89 D0 89 
35df8     D0 89 CF 89 
35dfc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
35e00     D0 89 F5 89 
35e04     BD 89 08 8A 
35e08     CF 89 E8 8A 
35e0c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
35e10     53 B3 0D F8 
35e14     F4 07 38 00 
35e18     63 01 63 01 
35e1c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
35e20     88 01 88 01 
35e24     76 01 88 01 
35e28     88 01 89 01 
35e2c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
35e30     75 01 AE 01 
35e34     76 01 88 01 
35e38     4A 00 46 06 
35e3c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
35e40     08 8A 9A 86 
35e44     33 8B 08 8A 
35e48     2D 8A F5 89 
35e4c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
35e50     2D 8A 2D 8A 
35e54     2E 8A 1B 8A 
35e58     40 8A 2D 8A 
35e5c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
35e60     2E 8A 79 8A 
35e64     66 8A C8 8B 
35e68     72 82 2B 97 
35e6c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
35e70     1D 02 05 01 
35e74     F8 01 C0 01 
35e78     0B 02 C0 01 
35e7c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
35e80     F9 01 D3 01 
35e84     F8 01 D3 01 
35e88     F8 01 D2 01 
35e8c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
35e90     E6 01 2B 01 
35e94     8E 02 5F 07 
35e98     F7 E2 ED 9C 
35e9c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
35ea0     E8 8A 78 8A 
35ea4     78 8A 65 8A 
35ea8     8B 8A 78 8A 
35eac     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
35eb0     8B 8A 9D 8A 
35eb4     9D 8A 8B 8A 
35eb8     C2 8A 78 8A 
35ebc     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
35ec0     70 8C 18 86 
35ec4     8B 8A 23 C9 
35ec8     CB 03 C4 05 
35ecc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
35ed0     0B 02 7B 02 
35ed4     1E 02 55 02 
35ed8     30 02 43 02 
35edc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
35ee0     43 02 44 02 
35ee4     43 02 30 02 
35ee8     68 02 31 02 
35eec     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
35ef0     07 08 3F F7 
35ef4     73 B2 13 85 
35ef8     15 89 ED 8B 
35efc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
35f00     B0 8A FB 8A 
35f04     D5 8A FA 8A 
35f08     E8 8A FB 8A 
35f0c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
35f10     E8 8A 21 8B 
35f14     E7 8A 33 8B 
35f18     E8 8A 26 8C 
35f1c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
35f20     8D B0 27 F6 
35f24     9C 08 AD 01 
35f28     7B 02 8D 02 
35f2c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
35f30     A1 02 A0 02 
35f34     A1 02 A0 02 
35f38     A0 02 A0 02 
35f3c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
35f40     7B 02 D8 02 
35f44     7B 02 C6 02 
35f48     3E 01 C3 05 
35f4c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
35f50     00 8C 2A 86 
35f54     E0 8C FA 8A 
35f58     6A 8B FB 8A 
35f5c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
35f60     45 8B 45 8B 
35f64     45 8B 6B 8B 
35f68     46 8B 59 8B 
35f6c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
35f70     6B 8B 6B 8B 
35f74     6B 8B 6B 8B 
35f78     7D 8B 7D 8B 
35f7c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
35f80     90 8B 91 8B 
35f84     90 8B 90 8B 
35f88     A3 8B A3 8B 
35f8c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
35f90     B5 8B B6 8B 
35f94     B5 8B B5 8B 
35f98     B6 8B C8 8B 
35f9c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
35fa0     C8 8B DA 8B 
35fa4     DB 8B DB 8B 
35fa8     DB 8B DC 8B 
35fac     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
35fb0     EE 8B EE 8B 
35fb4     00 8C 01 8C 
35fb8     00 8C 01 8C 
35fbc     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
35fc0     12 8C 13 8C 
35fc4     13 8C 26 8C 
35fc8     26 8C 26 8C 
35fcc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
35fd0     38 8C 38 8C 
35fd4     38 8C 38 8C 
35fd8     4B 8C 4B 8C 
35fdc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
35fe0     5E 8C 5E 8C 
35fe4     5E 8C 5E 8C 
35fe8     70 8C 70 8C 
35fec     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
35ff0     70 8C 83 8C 
35ff4     83 8C 83 8C 
35ff8     83 8C 96 8C 
35ffc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
36000     95 8C A9 8C 
36004     A9 8C A8 8C 
36008     A8 8C A8 8C 
3600c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
36010     BB 8C BB 8C 
36014     BB 8C CE 8C 
36018     CE 8C CE 8C 
3601c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
36020     E0 8C E1 8C 
36024     E1 8C E0 8C 
36028     F4 8C F2 8C 
3602c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
36030     05 8D 05 8D 
36034     06 8D 06 8D 
36038     19 8D 19 8D 
3603c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
36040     18 8D 2B 8D 
36044     2B 8D 2B 8D 
36048     2A 8D 3E 8D 
3604c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
36050     3E 8D 51 8D 
36054     50 8D 50 8D 
36058     50 8D 51 8D 
3605c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
36060     63 8D 64 8D 
36064     76 8D 75 8D 
36068     75 8D 76 8D 
3606c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
36070     88 8D 88 8D 
36074     89 8D 9B 8D 
36078     9A 8D 9B 8D 
3607c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
36080     AD 8D AE 8D 
36084     AD 8D AE 8D 
36088     C1 8D C1 8D 
3608c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
36090     D3 8D D3 8D 
36094     D3 8D D3 8D 
36098     D3 8D E6 8D 
3609c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
360a0     E6 8D E6 8D 
360a4     F9 8D F9 8D 
360a8     F9 8D F8 8D 
360ac     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
360b0     0B 8E 0B 8E 
360b4     1D 8E 1D 8E 
360b8     1E 8E 1E 8E 
360bc     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
360c0     31 8E 31 8E 
360c4     31 8E 42 8E 
360c8     43 8E 43 8E 
360cc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
360d0     56 8E 56 8E 
360d4     55 8E 56 8E 
360d8     68 8E 69 8E 
360dc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
360e0     69 8E 7B 8E 
360e4     7C 8E 7B 8E 
360e8     7B 8E 8D 8E 
360ec     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
360f0     8D 8E A1 8E 
360f4     A0 8E A1 8E 
360f8     A1 8E A0 8E 
360fc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
36100     B3 8E B3 8E 
36104     C6 8E C5 8E 
36108     C6 8E C6 8E 
3610c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
36110     D8 8E D9 8E 
36114     D8 8E EC 8E 
36118     EB 8E EC 8E 
3611c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
36120     FE 8E FE 8E 
36124     FE 8E FE 8E 
36128     10 8F 10 8F 
3612c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
36130     11 8F 23 8F 
36134     24 8F 23 8F 
36138     24 8F 37 8F 
3613c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
36140     36 8F 36 8F 
36144     48 8F 49 8F 
36148     49 8F 49 8F 
3614c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
36150     5B 8F 5C 8F 
36154     5B 8F 6E 8F 
36158     6E 8F 6E 8F 
3615c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
36160     81 8F 81 8F 
36164     81 8F 81 8F 
36168     93 8F 93 8F 
3616c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
36170     93 8F A6 8F 
36174     A6 8F A6 8F 
36178     A6 8F B9 8F 
3617c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
36180     B9 8F B9 8F 
36184     CC 8F CB 8F 
36188     CB 8F CC 8F 
3618c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
36190     DF 8F DE 8F 
36194     DE 8F F1 8F 
36198     F1 8F F1 8F 
3619c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
361a0     03 90 04 90 
361a4     04 90 04 90 
361a8     16 90 17 90 
361ac     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
361b0     29 90 28 90 
361b4     29 90 28 90 
361b8     29 90 3C 90 
361bc     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
361c0     3C 90 4F 90 
361c4     4E 90 4E 90 
361c8     4E 90 4E 90 
361cc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
361d0     61 90 61 90 
361d4     73 90 74 90 
361d8     74 90 74 90 
361dc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
361e0     87 90 86 90 
361e4     87 90 86 90 
361e8     99 90 99 90 
361ec     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
361f0     AB 90 AB 90 
361f4     AC 90 AB 90 
361f8     AB 90 BF 90 
361fc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
36200     BE 90 D1 90 
36204     D0 90 D1 90 
36208     D1 90 D1 90 
3620c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
36210     E3 90 E4 90 
36214     F6 90 F6 90 
36218     F6 90 F6 90 
3621c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
36220     09 91 0A 91 
36224     0A 91 1C 91 
36228     1C 91 1C 91 
3622c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
36230     2F 91 2E 91 
36234     2F 91 2F 91 
36238     2E 91 41 91 
3623c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
36240     41 91 53 91 
36244     54 91 54 91 
36248     53 91 54 91 
3624c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
36250     67 91 67 91 
36254     79 91 7A 91 
36258     79 91 78 91 
3625c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
36260     8C 91 8B 91 
36264     8C 91 8C 91 
36268     9E 91 9E 91 
3626c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
36270     B1 91 B1 91 
36274     B2 91 B1 91 
36278     B1 91 C4 91 
3627c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
36280     C4 91 D6 91 
36284     D7 91 D7 91 
36288     D7 91 D6 91 
3628c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
36290     EA 91 EA 91 
36294     EA 91 FC 91 
36298     FC 91 FB 91 
3629c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
362a0     0E 92 0F 92 
362a4     0F 92 0E 92 
362a8     21 92 21 92 
362ac     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
362b0     21 92 34 92 
362b4     33 92 34 92 
362b8     34 92 47 92 
362bc     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
362c0     46 92 47 92 
362c4     59 92 59 92 
362c8     59 92 59 92 
362cc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
362d0     6C 92 6C 92 
362d4     6B 92 7E 92 
362d8     7E 92 7E 92 
362dc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
362e0     92 92 91 92 
362e4     91 92 90 92 
362e8     91 92 A4 92 
362ec     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
362f0     A3 92 B6 92 
362f4     B6 92 B7 92 
362f8     B7 92 B6 92 
362fc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
36300     CA 92 C9 92 
36304     CA 92 DC 92 
36308     DC 92 DC 92 
3630c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
36310     EF 92 EF 92 
36314     EF 92 EF 92 
36318     01 93 01 93 
3631c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
36320     15 93 14 93 
36324     14 93 14 93 
36328     14 93 27 93 
3632c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
36330     27 93 39 93 
36334     3A 93 39 93 
36338     39 93 39 93 
3633c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
36340     4B 93 4C 93 
36344     5F 93 5F 93 
36348     5F 93 5E 93 
3634c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
36350     5F 93 84 93 
36354     4C 93 96 93 
36358     5F 93 AE 94 
3635c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
36360     7B C1 00 00 
36364     00 00 00 00 
36368     00 00 00 00 
3636c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36370     00 00 00 00 | 	byte	$00, $00, $00, $00
36374     7A D7 00 80 
36378     87 8A 48 8F 
3637c     EC 8C 76 8D 
36380     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
36384     3C 8D 82 8D 
36388     42 8D 88 8D 
3638c     8C 8D 8E 8D 
36390     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
36394     97 8D DE 8D 
36398     E1 8D F1 8E 
3639c     D8 8C A3 83 
363a0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
363a4     65 71 C9 65 
363a8     FC 64 C4 65 
363ac     C1 65 BF 65 
363b0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
363b4     B6 65 B4 65 
363b8     B2 65 AE 65 
363bc     AC 65 ED 65 
363c0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
363c4     5E 65 25 66 
363c8     FA 62 23 6B 
363cc     B5 6C 61 0A 
363d0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
363d4     5D 90 BE 8D 
363d8     47 8E C3 8D 
363dc     09 8E C9 8D 
363e0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
363e4     15 8E 19 8E 
363e8     1B 8E 62 8E 
363ec     64 8E 68 8E 
363f0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
363f4     B5 8E 4C 90 
363f8     FA 84 3C 9D 
363fc     98 13 79 6D 
36400     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
36404     D9 66 50 66 
36408     D4 66 4B 66 
3640c     8C 66 46 66 
36410     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
36414     81 66 3A 66 
36418     7C 66 36 66 
3641c     76 66 30 66 
36420     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
36424     6B 66 88 72 
36428     BF 37 E7 B7 
3642c     75 83 8B 8E 
36430     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
36434     94 8E 96 8E 
36438     DD 8E 9C 8E 
3643c     E2 8E A2 8E 
36440     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
36444     EE 8E AE 8E 
36448     38 8F B5 8E 
3644c     3F 8F FD 8E 
36450     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
36454     A5 87 1E E3 
36458     6D 5D FA 71 
3645c     41 64 25 67 
36460     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
36464     D9 66 1A 67 
36468     18 67 15 67 
3646c     12 67 0F 67 
36470     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
36474     07 67 C0 66 
36478     01 67 BC 66 
3647c     B8 66 DE 64 
36480     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
36484     43 E5 1F 8B 
36488     14 8A F1 90 
3648c     1C 8F 63 8F 
36490     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
36494     29 8F 6E 8F 
36498     72 8F 75 8F 
3649c     34 8F BE 8F 
364a0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
364a4     84 8F 87 8F 
364a8     CC 8F 56 90 
364ac     67 91 49 80 
364b0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
364b4     46 77 A6 66 
364b8     E8 66 B0 67 
364bc     AD 67 ED 67 
364c0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
364c4     A2 67 E3 67 
364c8     9D 67 9A 67 
364cc     98 67 94 67 
364d0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
364d4     49 67 CD 67 
364d8     28 65 5F 6E 
364dc     82 67 3A 01 
364e0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
364e4     C2 91 A9 8F 
364e8     EF 8F AE 8F 
364ec     F4 8F B5 8F 
364f0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
364f4     01 90 03 90 
364f8     07 90 09 90 
364fc     0C 90 53 90 
36500     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
36504     18 90 44 93 
36508     85 84 D6 9D 
3650c     87 1F 2F 75 
36510     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
36514     C4 68 F6 67 
36518     BE 68 F1 67 
3651c     76 68 2E 68 
36520     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
36524     27 68 24 68 
36528     64 68 1E 68 
3652c     5F 68 19 68 
36530     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
36534     DC 68 56 72 
36538     7E 36 C2 B8 
3653c     D7 84 73 90 
36540     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
36544     7B 90 7F 90 
36548     82 90 84 90 
3654c     CB 90 8B 90 
36550     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
36554     D7 90 96 90 
36558     20 91 59 90 
3655c     25 91 A2 90 
36560     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
36564     D0 89 40 EE 
36568     12 64 C4 71 
3656c     29 66 0C 69 
36570     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
36574     C0 68 02 69 
36578     FE 68 FB 68 
3657c     F9 68 F6 68 
36580     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
36584     EE 68 A8 68 
36588     2C 69 5F 68 
3658c     E2 68 81 66 
36590     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
36594     1E EB A6 8A 
36598     73 8B 5E 93 
3659c     7B 90 48 91 
365a0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
365a4     0D 91 11 91 
365a8     14 91 16 91 
365ac     5C 91 1C 91 
365b0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
365b4     68 91 AF 91 
365b8     2A 91 B5 91 
365bc     75 91 1A 94 
365c0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
365c4     70 0E CB 6C 
365c8     5D 6E C4 67 
365cc     99 69 54 69 
365d0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
365d4     D2 69 49 69 
365d8     89 69 86 69 
365dc     40 69 C4 69 
365e0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
365e4     35 69 76 69 
365e8     58 67 EB 6D 
365ec     E9 6D 89 0F 
365f0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
365f4     33 94 94 91 
365f8     D9 91 56 91 
365fc     E0 91 9F 91 
36600     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
36604     EC 91 EE 91 
36608     F1 91 F4 91 
3660c     F7 91 3D 92 
36610     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
36614     46 92 21 94 
36618     11 89 A4 9D 
3661c     FD 0E 8F 6C 
36620     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
36624     28 6A E1 69 
36628     65 6A 1F 6A 
3662c     5F 6A 1A 6A 
36630     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
36634     54 6A 0F 6A 
36638     4F 6A 09 6A 
3663c     06 6A 03 6A 
36640     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
36644     23 68 69 77 
36648     3A 4D 38 CA 
3664c     38 86 4E 91 
36650     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
36654     64 92 24 92 
36658     6A 92 2A 92 
3665c     70 92 30 92 
36660     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
36664     7B 92 7E 92 
36668     C5 92 84 92 
3666c     CB 92 8A 92 
36670     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
36674     4D 8D F9 E2 
36678     97 59 FE 74 
3667c     DB 68 6D 6A 
36680     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
36684     A8 6A A5 6A 
36688     A3 6A 9F 6A 
3668c     9D 6A 9B 6A 
36690     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
36694     D6 6A 8F 6A 
36698     CF 6A 46 6A 
3669c     CA 6A E1 67 
366a0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
366a4     D3 F7 15 92 
366a8     90 8C BF 94 
366ac     A6 92 EB 92 
366b0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
366b4     B1 92 F7 92 
366b8     FA 92 FD 92 
366bc     00 93 02 93 
366c0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
366c4     4F 93 52 93 
366c8     54 93 22 94 
366cc     5A 93 8F 88 
366d0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
366d4     1C 77 07 6C 
366d8     E8 69 7A 6B 
366dc     34 6B 75 6B 
366e0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
366e4     29 6B 26 6B 
366e8     24 6B 21 6B 
366ec     1D 6B 5E 6B 
366f0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
366f4     12 6B 52 6B 
366f8     34 69 34 6E 
366fc     BA 73 A4 24 
36700     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
36704     7A 94 B3 93 
36708     72 93 31 93 
3670c     78 93 7A 93 
36710     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
36714     83 93 86 93 
36718     89 93 D0 93 
3671c     D2 93 D5 93 
36720     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
36724     DD 93 40 96 
36728     30 8B 99 9C 
3672c     52 10 94 71 
36730     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
36734     46 6C 79 6B 
36738     40 6C B7 6B 
3673c     F7 6B B1 6B 
36740     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
36744     EC 6B A5 6B 
36748     A2 6B 9F 6B 
3674c     9D 6B 9A 6B 
36750     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
36754     C8 6A E4 76 
36758     20 4B F9 CE 
3675c     2E 8A 1A 92 
36760     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
36764     FB 93 BA 93 
36768     01 94 03 94 
3676c     4A 94 09 94 
36770     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
36774     55 94 14 94 
36778     9E 94 1A 94 
3677c     61 94 20 94 
36780     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
36784     3E 87 E5 CD 
36788     5F 50 6C 78 
3678c     B5 6A 04 6C 
36790     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
36794     83 6C 7F 6C 
36798     7C 6C 36 6C 
3679c     76 6C 74 6C 
367a0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
367a4     6B 6C 25 6C 
367a8     66 6C 1F 6C 
367ac     1D 6C 41 6A 
367b0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
367b4     BA FA FC 94 
367b8     5B 8D 97 96 
367bc     3B 94 C5 94 
367c0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
367c4     89 94 8C 94 
367c8     8F 94 92 94 
367cc     94 94 DB 94 
367d0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
367d4     E4 94 E7 94 
367d8     2D 95 74 95 
367dc     C8 96 15 89 
367e0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
367e4     CB 75 31 6F 
367e8     7E 6B 10 6D 
367ec     C9 6C 0A 6D 
367f0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
367f4     BD 6C FF 6C 
367f8     FB 6C F9 6C 
367fc     B2 6C F3 6C 
36800     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
36804     A7 6C E8 6C 
36808     0D 6B 85 6F 
3680c     C7 74 10 28 
36810     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
36814     96 96 47 95 
36818     06 95 0A 95 
3681c     0C 95 0F 95 
36820     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
36824     17 95 5E 95 
36828     61 95 63 95 
3682c     22 95 AC 95 
36830     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
36834     72 95 17 98 
36838     59 8E 01 96 
3683c     CF FC 5A 68 
36840     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
36844     96 6D 50 6D 
36848     D5 6D 4A 6D 
3684c     8C 6D 89 6D 
36850     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
36854     80 6D 3A 6D 
36858     7A 6D 77 6D 
3685c     75 6D 71 6D 
36860     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
36864     18 6C BC 78 
36868     9A 4F 7E CF 
3686c     1F 89 F1 93 
36870     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
36874     D2 95 4E 95 
36878     D7 95 53 95 
3687c     DD 95 E0 95 
36880     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
36884     A5 95 EB 95 
36888     EE 95 F0 95 
3688c     37 96 B3 95 
36890     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
36894     1A 98 D5 8D 
36898     C5 9F CD 0F 
3689c     0F 71 F3 73 
368a0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
368a4     D9 6D 5E 6E 
368a8     D3 6D 58 6E 
368ac     12 6E 0F 6E 
368b0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
368b4     49 6E BF 6D 
368b8     87 6E 76 6D 
368bc     81 6E 11 6B 
368c0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
368c4     3F 09 44 95 
368c8     E5 8D 3F 99 
368cc     D4 95 A2 96 
368d0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
368d4     23 96 69 96 
368d8     6B 96 6E 96 
368dc     71 96 74 96 
368e0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
368e4     BF 96 3C 96 
368e8     C6 96 C8 96 
368ec     A3 98 51 8D 
368f0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
368f4     CF 75 29 73 
368f8     90 6C EC 6E 
368fc     62 6E E7 6E 
36900     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
36904     9A 6E 98 6E 
36908     95 6E 91 6E 
3690c     8E 6E CF 6E 
36910     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
36914     40 6E C3 6E 
36918     E8 6C 45 6F 
3691c     A5 7B C9 35 
36920     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
36924     2D 98 23 97 
36928     E1 96 A0 96 
3692c     A4 96 EA 96 
36930     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
36934     AF 96 F4 96 
36938     F8 96 3E 97 
3693c     FD 96 43 97 
36940     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
36944     08 97 6B 99 
36948     D6 92 88 91 
3694c     D8 EE 84 66 
36950     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
36954     2E 6F E7 6E 
36958     6C 6F 24 6F 
3695c     21 6F 1F 6F 
36960     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
36964     17 6F 13 6F 
36968     54 6F 0E 6F 
3696c     0B 6F 4B 6F 
36970     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
36974     27 6D 1C 7B 
36978     19 59 9F DB 
3697c     66 8E BC 94 
36980     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
36984     67 97 26 97 
36988     6D 97 2B 97 
3698c     72 97 32 97 
36990     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
36994     C1 97 7F 97 
36998     C6 97 85 97 
3699c     CB 97 CE 97 
369a0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
369a4     EC 8A C4 C6 
369a8     68 4C F4 7D 
369ac     63 6E E8 6E 
369b0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
369b4     ED 6F A7 6F 
369b8     E7 6F A0 6F 
369bc     E1 6F 9B 6F 
369c0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
369c4     D5 6F 8F 6F 
369c8     CE 6F 45 6F 
369cc     86 6F 68 6D 
369d0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
369d4     C0 13 AD A2 
369d8     A7 8E 79 99 
369dc     E6 97 E8 97 
369e0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
369e4     F1 97 F3 97 
369e8     F6 97 F9 97 
369ec     FB 97 FE 97 
369f0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
369f4     4A 98 0A 98 
369f8     93 98 0F 98 
369fc     7F 9B BF 8C 
36a00     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
36a04     91 7B 62 73 
36a08     1A 6E B9 70 
36a0c     EB 6F B3 70 
36a10     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
36a14     25 70 20 70 
36a18     1E 70 1B 70 
36a1c     18 70 15 70 
36a20     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
36a24     0D 70 09 70 
36a28     07 70 03 70 
36a2c     01 70 FD 6F 
36a30     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
36a34     F6 6F F2 6F 
36a38     EF 6F EC 6F 
36a3c     2C 70 E6 6F 
36a40     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
36a44     DD 6F 97 6F 
36a48     D7 6F 84 6E 
36a4c     8F 6F 3F 7D 
36a50     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
36a52     FF FF FF FF 
36a56     FF FF       | atarist_spl file "atarist.spl" '512
36a58     00 00 00 00 
36a5c     00 00 00 00 
36a60     00 00       | 	byte	$00[10]
36a62     17 7F F2 7F 
36a66     B2 7F 72 7F 
36a6a     33 7F F4 7E 
36a6e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
36a72     36 7E F5 7D 
36a76     E9 51 F2 0D 
36a7a     8E 00 F3 FD 
36a7e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
36a82     57 FD 58 FD 
36a86     5B FD 5C FD 
36a8a     5C FD 60 7D 
36a8e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
36a92     D6 7C 98 7C 
36a96     59 7C 1A 7C 
36a9a     DC 7B 9E 7B 
36a9e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
36aa2     F3 05 00 FD 
36aa6     41 FB EA FA 
36aaa     D9 FA DB FA 
36aae     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
36ab2     E4 FA 9B 36 
36ab6     F8 7A C0 7A 
36aba     84 7A 45 7A 
36abe     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
36ac2     8E 79 51 79 
36ac6     15 79 D7 78 
36aca     3C 1F EB FF 
36ace     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
36ad2     6D F8 65 F8 
36ad6     68 F8 6D F8 
36ada     70 F8 74 F8 
36ade     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
36ae2     AB 60 79 60 
36ae6     4B 60 1A 60 
36aea     E9 5F B9 5F 
36aee     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
36af2     FB 59 B2 0B 
36af6     92 FA 3A F7 
36afa     96 F6 79 F6 
36afe     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
36b02     82 F6 86 F6 
36b06     8C F6 DB 5D 
36b0a     F1 5E C1 5E 
36b0e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
36b12     34 5E 04 5E 
36b16     D6 5D A6 5D 
36b1a     78 5D D4 3E 
36b1e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
36b22     27 F5 BA F4 
36b26     AB F4 AD F4 
36b2a     B2 F4 B8 F4 
36b2e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
36b32     26 5D 2B 5D 
36b36     FC 5C CD 5C 
36b3a     9F 5C 70 5C 
36b3e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
36b42     E5 5B B8 5B 
36b46     DB 24 A7 FC 
36b4a     D1 F4 4D F3 
36b4e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
36b52     04 F3 0B F3 
36b56     11 F3 16 F3 
36b5a     DE 18 98 5B 
36b5e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
36b62     4E 4A 29 48 
36b66     A0 47 6A 47 
36b6a     43 47 20 47 
36b6e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
36b72     E2 F6 98 F2 
36b76     C5 F1 A3 F1 
36b7a     A3 F1 A8 F1 
36b7e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
36b82     BF F1 00 3D 
36b86     EF 46 CD 46 
36b8a     AA 46 86 46 
36b8e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
36b92     1C 46 F9 45 
36b96     D7 45 EE 43 
36b9a     DE 02 E8 F3 
36b9e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
36ba2     61 F0 65 F0 
36ba6     6D F0 74 F0 
36baa     7C F0 84 F0 
36bae     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
36bb2     8E 45 6D 45 
36bb6     49 45 27 45 
36bba     05 45 E1 44 
36bbe     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
36bc2     F1 2F A9 FB 
36bc6     8B F1 9B EF 
36bca     40 EF 36 EF 
36bce     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
36bd2     4D EF 56 EF 
36bd6     5E EF 7B 44 
36bda     8C 44 69 44 
36bde     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
36be2     03 44 E1 43 
36be6     C0 43 F5 37 
36bea     69 33 0F 11 
36bee     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
36bf2     66 EE 37 EE 
36bf6     38 EE 40 EE 
36bfa     48 EE 51 EE 
36bfe     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
36c02     7D 32 6A 32 
36c06     51 32 37 32 
36c0a     1F 32 05 32 
36c0e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
36c12     B9 31 A1 31 
36c16     F1 04 F4 F1 
36c1a     50 EE A0 ED 
36c1e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
36c22     93 ED 9A ED 
36c26     A4 ED AD ED 
36c2a     F4 27 C1 31 
36c2e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
36c32     78 31 5F 31 
36c36     46 31 2E 31 
36c3a     15 31 FC 30 
36c3e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
36c42     C4 EF 4A ED 
36c46     DC EC CB EC 
36c4a     D2 EC DA EC 
36c4e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
36c52     F9 EC 64 2F 
36c56     0A 31 F1 30 
36c5a     D9 30 C0 30 
36c5e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
36c62     78 30 5F 30 
36c66     46 30 38 23 
36c6a     A6 F6 19 EE 
36c6e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
36c72     20 EC 28 EC 
36c76     32 EC 3C EC 
36c7a     47 EC 51 EC 
36c7e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
36c82     A3 22 93 22 
36c86     7F 22 6E 22 
36c8a     5D 22 4C 22 
36c8e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
36c92     77 09 76 F1 
36c96     CC EC F0 EB 
36c9a     CD EB CE EB 
36c9e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
36ca2     ED EB F5 EB 
36ca6     3E F6 6B 22 
36caa     5F 22 4E 22 
36cae     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
36cb2     1B 22 0B 22 
36cb6     FA 21 E9 21 
36cba     D8 21 4D FF 
36cbe     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
36cc2     92 EB 7B EB 
36cc6     82 EB 8C EB 
36cca     97 EB A1 EB 
36cce     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
36cd2     15 22 04 22 
36cd6     F3 21 E3 21 
36cda     D2 21 C0 21 
36cde     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
36ce2     8E 21 7D 21 
36ce6     9A F8 A4 ED 
36cea     8E EB 2F EB 
36cee     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
36cf2     37 EB 42 EB 
36cf6     4C EB 57 EB 
36cfa     B2 17 22 19 
36cfe     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
36d02     FD 18 EF 18 
36d06     E3 18 D6 18 
36d0a     CA 18 BD 18 
36d0e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
36d12     60 EC 35 EB 
36d16     01 EB 01 EB 
36d1a     0C EB 16 EB 
36d1e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
36d22     34 EB D0 18 
36d26     00 19 F4 18 
36d2a     E8 18 DA 18 
36d2e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
36d32     B6 18 A9 18 
36d36     9D 18 91 05 
36d3a     F0 EF CA EB 
36d3e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
36d42     E8 EA F2 EA 
36d46     FE EA 07 EB 
36d4a     12 EB C2 EF 
36d4e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
36d52     D9 18 CD 18 
36d56     C0 18 B3 18 
36d5a     A7 18 9B 18 
36d5e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
36d62     B8 FC 30 EE 
36d66     61 EB DC EA 
36d6a     CD EA D2 EA 
36d6e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
36d72     F3 EA FE EA 
36d76     D2 09 D1 18 
36d7a     C3 18 17 18 
36d7e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
36d82     66 11 52 11 
36d86     49 11 41 11 
36d8a     38 11 E0 F4 
36d8e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
36d92     C9 EA C5 EA 
36d96     CF EA DB EA 
36d9a     E6 EA EF EA 
36d9e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
36da2     89 11 80 11 
36da6     78 11 6E 11 
36daa     67 11 5D 11 
36dae     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
36db2     43 11 32 0D 
36db6     9C F1 07 EC 
36dba     F8 EA CD EA 
36dbe     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
36dc2     E4 EA ED EA 
36dc6     F8 EA 02 EB 
36dca     55 11 91 11 
36dce     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
36dd2     75 11 6E 11 
36dd6     64 11 5E 11 
36dda     54 11 4A 11 
36dde     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
36de2     A8 EB F1 EA 
36de6     D9 EA DC EA 
36dea     E8 EA F1 EA 
36dee     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
36df2     A6 EB 9E 11 
36df6     A0 11 96 11 
36dfa     8D 11 85 11 
36dfe     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
36e02     6A 11 CA 0D 
36e06     36 0B 57 F8 
36e0a     6C ED 57 EB 
36e0e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
36e12     F4 EA FF EA 
36e16     09 EB 15 EB 
36e1a     1E EB 1A FD 
36e1e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
36e22     ED 0A E8 0A 
36e26     E2 0A DC 0A 
36e2a     D6 0A D1 0A 
36e2e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
36e32     F8 F3 BC EC 
36e36     57 EB 1E EB 
36e3a     18 EB 24 EB 
36e3e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
36e42     42 EB 4D EB 
36e46     08 09 20 0B 
36e4a     1A 0B 14 0B 
36e4e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
36e52     04 0B FE 0A 
36e56     F9 0A F2 0A 
36e5a     84 08 3A F1 
36e5e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
36e62     42 EB 42 EB 
36e66     4E EB 57 EB 
36e6a     62 EB 6B EB 
36e6e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
36e72     48 0B 43 0B 
36e76     3C 0B 36 0B 
36e7a     31 0B 2C 0B 
36e7e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
36e82     1B 0B 5C 00 
36e86     6A EF 1B EC 
36e8a     81 EB 6A EB 
36e8e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
36e92     85 EB 8E EB 
36e96     99 EB A3 EB 
36e9a     DD 05 E5 05 
36e9e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
36ea2     DB 05 D8 05 
36ea6     D5 05 D1 05 
36eaa     D0 05 CB 05 
36eae     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
36eb2     0C EC BB EB 
36eb6     B3 EB BB EB 
36eba     C5 EB D0 EB 
36ebe     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
36ec2     E4 F7 2C 06 
36ec6     28 06 24 06 
36eca     22 06 1F 06 
36ece     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
36ed2     16 06 14 06 
36ed6     0F 06 D0 F3 
36eda     65 ED 2D EC 
36ede     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
36ee2     01 EC 0A EC 
36ee6     14 EC 1E EC 
36eea     29 EC FB 03 
36eee     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
36ef2     63 06 60 06 
36ef6     5E 06 59 06 
36efa     58 06 54 06 
36efe     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
36f02     69 F1 21 ED 
36f06     55 EC 33 EC 
36f0a     36 EC 40 EC 
36f0e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
36f12     5C EC 68 EC 
36f16     92 02 D9 02 
36f1a     D7 02 D7 02 
36f1e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
36f22     D1 02 D1 02 
36f26     CE 02 CD 02 
36f2a     5D FC 80 EF 
36f2e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
36f32     83 EC 8A EC 
36f36     93 EC 9C EC 
36f3a     A5 EC B1 EC 
36f3e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
36f42     2B 03 2A 03 
36f46     29 03 26 03 
36f4a     25 03 24 03 
36f4e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
36f52     1F 03 70 F7 
36f56     D0 EE 27 ED 
36f5a     DB EC D4 EC 
36f5e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
36f62     F0 EC FA EC 
36f66     02 ED F9 F4 
36f6a     7B 03 7C 03 
36f6e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
36f72     75 03 73 03 
36f76     72 03 70 03 
36f7a     6D 03 6C 03 
36f7e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
36f82     54 ED 22 ED 
36f86     22 ED 2C ED 
36f8a     35 ED 3F ED 
36f8e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
36f92     14 01 C3 03 
36f96     C1 03 C0 03 
36f9a     5F 01 A5 00 
36f9e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
36fa2     7B 00 7C 00 
36fa6     20 00 85 F1 
36faa     2A EE 89 ED 
36fae     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
36fb2     80 ED 87 ED 
36fb6     90 ED 9A ED 
36fba     A3 ED 73 00 
36fbe     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
36fc2     D0 00 D0 00 
36fc6     D0 00 D0 00 
36fca     D0 00 CF 00 
36fce     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
36fd2     80 F0 3D EE 
36fd6     D5 ED C7 ED 
36fda     CD ED D6 ED 
36fde     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
36fe2     F2 ED FA ED 
36fe6     1D 01 29 01 
36fea     27 01 27 01 
36fee     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
36ff2     25 01 26 01 
36ff6     26 01 23 01 
36ffa     D0 F7 EC EF 
36ffe     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
37002     1C EE 24 EE 
37006     2D EE 37 EE 
3700a     40 EE 47 EE 
3700e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
37012     7D 01 7B 01 
37016     7A 01 7A 01 
3701a     79 01 78 01 
3701e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
37022     84 FE DE F3 
37026     6C EF 93 EE 
3702a     72 EE 72 EE 
3702e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
37032     8B EE 95 EE 
37036     9E EE 15 FC 
3703a     67 FE 67 FE 
3703e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
37042     6B FE 6B FE 
37046     6D FE 6D FE 
3704a     6D FE 6F FE 
3704e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
37052     DF EE CC EE 
37056     CF EE D9 EE 
3705a     E1 EE EA EE 
3705e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
37062     5A FE C4 FE 
37066     C3 FE C5 FE 
3706a     C6 FE C6 FE 
3706e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
37072     C8 FE C7 FE 
37076     DA FB 85 F1 
3707a     8D EF 31 EF 
3707e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
37082     34 EF 3E EF 
37086     46 EF 4F EF 
3708a     57 EF 0D FF 
3708e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
37092     1F FF 1F FF 
37096     21 FF 21 FF 
3709a     21 FF 21 FF 
3709e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
370a2     15 F1 BE EF 
370a6     84 EF 7E EF 
370aa     88 EF 8F EF 
370ae     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
370b2     A9 EF 06 F2 
370b6     A6 FC AB FC 
370ba     AD FC AE FC 
370be     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
370c2     B2 FC B4 FC 
370c6     B6 FC B7 FC 
370ca     8B F4 BD F0 
370ce     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
370d2     E4 EF EE EF 
370d6     F6 EF FD EF 
370da     04 F0 0E F0 
370de     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
370e2     0B FD 0D FD 
370e6     0F FD 11 FD 
370ea     11 FD 13 FD 
370ee     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
370f2     17 FD 64 F3 
370f6     CD F0 52 F0 
370fa     41 F0 45 F0 
370fe     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
37102     5B F0 64 F0 
37106     6D F0 FB FC 
3710a     65 FD 68 FD 
3710e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
37112     6C FD 6D FD 
37116     6F FD 70 FD 
3711a     72 FD B3 FB 
3711e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
37122     A4 F0 99 F0 
37126     A0 F0 A8 F0 
3712a     AE F0 B9 F0 
3712e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
37132     CB FB DD FB 
37136     DE FB E0 FB 
3713a     E3 FB E3 FB 
3713e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
37142     E9 FB EC FB 
37146     62 F7 27 F2 
3714a     2A F1 FF F0 
3714e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
37152     0C F1 13 F1 
37156     1B F1 23 F1 
3715a     33 F2 3C FC 
3715e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
37162     42 FC 45 FC 
37166     47 FC 48 FC 
3716a     4A FC 4C FC 
3716e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
37172     20 F2 77 F1 
37176     5C F1 5F F1 
3717a     64 F1 6C F1 
3717e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
37182     83 F1 DC F8 
37186     9A FC 9A FC 
3718a     9B FC 9E FC 
3718e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
37192     A3 FC A4 FC 
37196     A6 FC A9 FC 
3719a     90 F4 33 F2 
3719e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
371a2     BA F1 BF F1 
371a6     C7 F1 CE F1 
371aa     D6 F1 DC F1 
371ae     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
371b2     F3 FC F5 FC 
371b6     FE FB 79 FB 
371ba     62 FB 5F FB 
371be     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
371c2     6F FA AF F3 
371c6     53 F2 12 F2 
371ca     0F F2 15 F2 
371ce     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
371d2     2A F2 32 F2 
371d6     38 F2 9A FB 
371da     AF FB B1 FB 
371de     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
371e2     B7 FB B8 FB 
371e6     BA FB BC FB 
371ea     C1 FB 3B F8 
371ee     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
371f2     6E F2 6C F2 
371f6     74 F2 7A F2 
371fa     81 F2 87 F2 
371fe     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
37202     06 FC 09 FC 
37206     0C FC 0E FC 
3720a     0F FC 12 FC 
3720e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
37212     17 FC 1A FC 
37216     B2 F6 7B F3 
3721a     DD F2 C5 F2 
3721e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
37222     D4 F2 DB F2 
37226     E0 F2 E8 F2 
3722a     28 F8 60 FC 
3722e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
37232     64 FC 66 FC 
37236     68 FC 6A FC 
3723a     6D FC 52 FC 
3723e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
37242     78 F3 24 F3 
37246     1A F3 1E F3 
3724a     24 F3 2A F3 
3724e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
37252     3D F3 80 FA 
37256     0C FB 0F FB 
3725a     10 FB 14 FB 
3725e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
37262     1B FB 1D FB 
37266     1F FB 92 FA 
3726a     DE F4 AE F3 
3726e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
37272     79 F3 7E F3 
37276     84 F3 8C F3 
3727a     92 F3 97 F3 
3727e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
37282     67 FB 69 FB 
37286     6B FB 6F FB 
3728a     71 FB 72 FB 
3728e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
37292     E3 F8 BA F4 
37296     EE F3 CC F3 
3729a     CA F3 CF F3 
3729e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
372a2     E2 F3 E8 F3 
372a6     ED F3 B7 FB 
372aa     BC FB BE FB 
372ae     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
372b2     C4 FB C6 FB 
372b6     C8 FB C9 FB 
372ba     CC FB 8F F7 
372be     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
372c2     1E F4 1E F4 
372c6     24 F4 2A F4 
372ca     30 F4 38 F4 
372ce     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
372d2     AD FA B1 FA 
372d6     B4 FA B6 FA 
372da     BA FA BB FA 
372de     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
372e2     C2 FA C6 FA 
372e6     55 F6 C6 F4 
372ea     7D F4 72 F4 
372ee     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
372f2     83 F4 89 F4 
372f6     8F F4 94 F4 
372fa     66 FA 03 FB 
372fe     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
37302     0A FB 0E FB 
37306     10 FB 11 FB 
3730a     16 FB 18 FB 
3730e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
37312     F9 F4 CA F4 
37316     C5 F4 CB F4 
3731a     D1 F4 D7 F4 
3731e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
37322     E8 F4 3F FB 
37326     56 FB 58 FB 
3732a     5A FB 5E FB 
3732e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
37332     64 FB 64 FB 
37336     69 FB 99 F9 
3733a     E9 F5 33 F5 
3733e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
37342     1D F5 22 F5 
37346     27 F5 2E F5 
3734a     32 F5 37 F5 
3734e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
37352     BC FA BC FA 
37356     C1 FA C2 FA 
3735a     C4 FA C8 FA 
3735e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
37362     F9 F7 DB F5 
37366     78 F5 69 F5 
3736a     6A F5 70 F5 
3736e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
37372     7F F5 85 F5 
37376     6E F7 06 FB 
3737a     0A FB 0B FB 
3737e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
37382     14 FB 15 FB 
37386     18 FB 1B FB 
3738a     1D FB 70 F7 
3738e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
37392     B6 F5 BB F5 
37396     C0 F5 C6 F5 
3739a     CA F5 CF F5 
3739e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
373a2     54 FB 56 FB 
373a6     5A FB 5B FB 
373aa     5E FB 5F FB 
373ae     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
373b2     67 FB 52 FB 
373b6     29 F7 33 F6 
373ba     06 F6 02 F6 
373be     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
373c2     10 F6 16 F6 
373c6     1A F6 1F F6 
373ca     81 FB 9F FB 
373ce     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
373d2     51 FB F2 FA 
373d6     E3 FA E3 FA 
373da     E5 FA E9 FA 
373de     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
373e2     64 F6 4D F6 
373e6     4D F6 53 F6 
373ea     57 F6 5C F6 
373ee     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
373f2     6A F6 19 FB 
373f6     1E FB 22 FB 
373fa     23 FB 24 FB 
373fe     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
37402     2C FB 2E FB 
37406     32 FB F0 F8 
3740a     01 F7 A5 F6 
3740e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
37412     9F F6 A3 F6 
37416     A6 F6 AC F6 
3741a     B0 F6 EB F7 
3741e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
37422     68 FB 6C FB 
37426     6E FB 71 FB 
3742a     72 FB 74 FB 
3742e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
37432     71 F8 21 F7 
37436     E5 F6 DD F6 
3743a     E1 F6 E6 F6 
3743e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
37442     F5 F6 F7 F6 
37446     F7 FA AB FB 
3744a     AD FB AF FB 
3744e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
37452     B6 FB B9 FB 
37456     BB FB BC FB 
3745a     21 FB 07 F8 
3745e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
37462     22 F7 26 F7 
37466     2B F7 2E F7 
3746a     34 F7 38 F7 
3746e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
37472     13 FB 16 FB 
37476     17 FB 1B FB 
3747a     1E FB 20 FB 
3747e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
37482     26 FB 77 FA 
37486     F3 F7 7C F7 
3748a     67 F7 6A F7 
3748e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
37492     74 F7 7A F7 
37496     7E F7 82 F7 
3749a     53 FB 5A FB 
3749e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
374a2     5F FB 63 FB 
374a6     65 FB 67 FB 
374aa     69 FB 6A FB 
374ae     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
374b2     B5 F7 A9 F7 
374b6     AD F7 B0 F7 
374ba     B5 F7 B8 F7 
374be     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
374c2     6E F8 99 FB 
374c6     9C FB 9D FB 
374ca     9F FB A4 FB 
374ce     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
374d2     A9 FB AB FB 
374d6     AD FB 46 F9 
374da     26 F8 F0 F7 
374de     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
374e2     F4 F7 F8 F7 
374e6     FB F7 FF F7 
374ea     03 F8 65 FA 
374ee     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
374f2     2B FB 2F FB 
374f6     30 FB 32 FB 
374fa     34 FB 38 FB 
374fe     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
37502     E9 F8 4A F8 
37506     2E F8 2C F8 
3750a     2F F8 36 F8 
3750e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
37512     41 F8 44 F8 
37516     4A FB 67 FB 
3751a     68 FB 6B FB 
3751e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
37522     73 FB 74 FB 
37526     78 FB 7A FB 
3752a     14 FB E7 F8 
3752e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
37532     6D F8 70 F8 
37536     73 F8 78 F8 
3753a     7C F8 80 F8 
3753e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
37542     A6 FB A7 FB 
37546     A9 FB AC FB 
3754a     AF FB B1 FB 
3754e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
37552     B7 FB 73 FA 
37556     F8 F8 B4 F8 
3755a     A9 F8 AB F8 
3755e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
37562     B4 F8 B8 F8 
37566     BB F8 FA F8 
3756a     64 FB 65 FB 
3756e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
37572     6D FB 6F FB 
37576     70 FB 74 FB 
3757a     77 FB 77 FB 
3757e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
37582     E9 F8 E4 F8 
37586     E8 F8 EB F8 
3758a     EE F8 F2 F8 
3758e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
37592     B5 FA 9F FB 
37596     A1 FB A4 FB 
3759a     A5 FB A9 FB 
3759e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
375a2     AE FB B1 FB 
375a6     B2 FB C7 F9 
375aa     39 F9 22 F9 
375ae     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
375b2     26 F9 2A F9 
375b6     2E F9 32 F9 
375ba     33 F9 BA FB 
375be     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
375c2     DE FB E1 FB 
375c6     E2 FB E4 FB 
375ca     E5 FB E7 FB 
375ce     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
375d2     C5 F9 67 F9 
375d6     57 F9 56 F9 
375da     5B F9 5F F9 
375de     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
375e2     68 F9 6C F9 
375e6     0B FC 11 FC 
375ea     14 FC 15 FC 
375ee     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
375f2     B5 FB B5 FB 
375f6     B6 FB B8 FB 
375fa     E9 FA C8 F9 
375fe     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
37602     90 F9 94 F9 
37606     95 F9 99 F9 
3760a     9D F9 9F F9 
3760e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
37612     DE FB DF FB 
37616     E2 FB E4 FB 
3761a     E6 FB E8 FB 
3761e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
37622     EF FB AC FA 
37626     E9 F9 C7 F9 
3762a     C3 F9 C8 F9 
3762e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
37632     D0 F9 D4 F9 
37636     D6 F9 0E FB 
3763a     11 FC 13 FC 
3763e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
37642     19 FC 1B FC 
37646     1D FC 1E FC 
3764a     21 FC 22 FC 
3764e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
37652     F7 F9 F7 F9 
37656     FB F9 FE F9 
3765a     00 FA 03 FA 
3765e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
37662     1B FC 45 FC 
37666     46 FC 48 FC 
3766a     4A FC 4B FC 
3766e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
37672     52 FC 54 FC 
37676     F3 FB 82 FA 
3767a     35 FA 28 FA 
3767e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
37682     31 FA 32 FA 
37686     37 FA 37 FA 
3768a     3C FA 00 FC 
3768e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
37692     09 FC 0B FC 
37696     0F FC 12 FC 
3769a     12 FC 15 FC 
3769e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
376a2     8D FA 60 FA 
376a6     5B FA 5C FA 
376aa     60 FA 61 FA 
376ae     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
376b2     6C FA 6D FA 
376b6     37 FC 3A FC 
376ba     3B FC 3D FC 
376be     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
376c2     43 FC 44 FC 
376c6     45 FC 47 FC 
376ca     51 FB AB FA 
376ce     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
376d2     8E FA 91 FA 
376d6     93 FA 95 FA 
376da     98 FA 9B FA 
376de     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
376e2     68 FC 6A FC 
376e6     6C FC 6E FC 
376ea     70 FC 72 FC 
376ee     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
376f2     76 FC 3B FB 
376f6     D0 FA BB FA 
376fa     B9 FA BD FA 
376fe     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
37702     C4 FA C6 FA 
37706     CA FA 13 FC 
3770a     3A FC 3A FC 
3770e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
37712     41 FC 43 FC 
37716     44 FC 47 FC 
3771a     48 FC 3C FC 
3771e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
37722     E6 FA E8 FA 
37726     EB FA EE FA 
3772a     F0 FA F2 FA 
3772e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
37732     61 FC 66 FC 
37736     68 FC 6B FC 
3773a     6C FC 6E FC 
3773e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
37742     73 FC 75 FC 
37746     13 FC 3F FB 
3774a     17 FB 12 FB 
3774e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
37752     1A FB 1D FB 
37756     1F FB 20 FB 
3775a     23 FB 92 FC 
3775e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
37762     96 FC 97 FC 
37766     9A FC 9C FC 
3776a     9E FC 9F FC 
3776e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
37772     5A FB 41 FB 
37776     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3777a     73 32 00 04 
3777e     00 00 10 00 
37782     00 00 00 00 
37786     00 00 00 00 | atari2 file "atari2.s2"
3778a     43 87 43 87 
3778e     43 87 44 87 
37792     43 87 44 87 
37796     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3779a     43 87 43 87 
3779e     43 87 44 87 
377a2     43 87 43 87 
377a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
377aa     44 87 43 87 
377ae     44 87 43 87 
377b2     43 87 43 87 
377b6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
377ba     43 87 43 87 
377be     44 87 43 87 
377c2     44 87 44 87 
377c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
377ca     43 87 43 87 
377ce     44 87 43 87 
377d2     43 87 42 87 
377d6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
377da     43 87 43 87 
377de     43 87 43 87 
377e2     44 87 43 87 
377e6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
377ea     44 87 44 87 
377ee     43 87 44 87 
377f2     43 87 44 87 
377f6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
377fa     44 87 43 87 
377fe     44 87 44 87 
37802     43 87 43 87 
37806     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3780a     43 87 44 87 
3780e     44 87 43 87 
37812     43 87 44 87 
37816     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3781a     43 87 43 87 
3781e     43 87 43 87 
37822     43 87 43 87 
37826     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3782a     42 87 43 87 
3782e     44 87 42 87 
37832     43 87 43 87 
37836     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3783a     43 87 44 87 
3783e     44 87 43 87 
37842     43 87 43 87 
37846     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3784a     43 87 5C 87 
3784e     EE 86 AC 87 
37852     4C 7C A3 78 
37856     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3785a     BC 78 BB 78 
3785e     BD 78 BC 78 
37862     BB 78 BD 78 
37866     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3786a     BB 78 BB 78 
3786e     BC 78 BC 78 
37872     BC 78 BB 78 
37876     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3787a     BC 78 BC 78 
3787e     BC 78 BC 78 
37882     BC 78 BC 78 
37886     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3788a     BB 78 BC 78 
3788e     A0 78 4C 7C 
37892     11 7A 29 89 
37896     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3789a     44 87 43 87 
3789e     44 87 43 87 
378a2     43 87 42 87 
378a6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
378aa     43 87 43 87 
378ae     44 87 ED 85 
378b2     71 85 52 79 
378b6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
378ba     BC 78 BC 78 
378be     BC 78 BC 78 
378c2     BC 78 BC 78 
378c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
378ca     BC 78 BC 78 
378ce     BC 78 A0 78 
378d2     CF 7A B9 81 
378d6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
378da     44 87 43 87 
378de     43 87 44 87 
378e2     43 87 44 87 
378e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
378ea     43 87 43 87 
378ee     43 87 43 87 
378f2     44 87 43 87 
378f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
378fa     43 87 43 87 
378fe     44 87 43 87 
37902     44 87 43 87 
37906     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3790a     44 87 43 87 
3790e     43 87 43 87 
37912     5A 87 39 81 
37916     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3791a     A5 78 BC 78 
3791e     BB 78 BC 78 
37922     BB 78 BC 78 
37926     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3792a     BC 78 BC 78 
3792e     BC 78 BC 78 
37932     BC 78 8F 79 
37936     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3793a     09 85 47 87 
3793e     43 87 43 87 
37942     42 87 42 87 
37946     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3794a     43 87 43 87 
3794e     43 87 43 87 
37952     43 87 44 87 
37956     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3795a     43 87 43 87 
3795e     44 87 43 87 
37962     42 87 43 87 
37966     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3796a     44 87 43 87 
3796e     43 87 43 87 
37972     44 87 44 87 
37976     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3797a     94 78 55 7A 
3797e     B9 78 BC 78 
37982     BC 78 BC 78 
37986     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3798a     BC 78 BB 78 
3798e     BC 78 BC 78 
37992     BC 78 BC 78 
37996     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3799a     BB 78 BC 78 
3799e     BC 78 BC 78 
379a2     BB 78 BC 78 
379a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
379aa     BC 78 BC 78 
379ae     BD 78 BC 78 
379b2     BC 78 BB 78 
379b6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
379ba     94 78 B3 84 
379be     36 84 4A 87 
379c2     43 87 43 87 
379c6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
379ca     43 87 44 87 
379ce     43 87 43 87 
379d2     43 87 43 87 
379d6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
379da     43 87 44 87 
379de     43 87 44 87 
379e2     43 87 43 87 
379e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
379ea     43 87 43 87 
379ee     43 87 45 87 
379f2     43 87 43 87 
379f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
379fa     43 87 44 87 
379fe     44 87 44 87 
37a02     43 87 43 87 
37a06     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
37a0a     43 87 42 87 
37a0e     43 87 43 87 
37a12     44 87 43 87 
37a16     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
37a1a     54 87 3C 82 
37a1e     36 83 52 79 
37a22     C6 78 BC 78 
37a26     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
37a2a     BB 78 BB 78 
37a2e     BC 78 BC 78 
37a32     BC 78 BC 78 
37a36     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37a3a     BD 78 ED 78 
37a3e     1B 79 F4 83 
37a42     4D 83 4E 87 
37a46     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
37a4a     44 87 43 87 
37a4e     42 87 44 87 
37a52     43 87 42 87 
37a56     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
37a5a     43 87 54 87 
37a5e     26 82 B3 84 
37a62     D6 77 BB 78 
37a66     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
37a6a     BC 78 BB 78 
37a6e     BB 78 BB 78 
37a72     BB 78 BB 78 
37a76     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
37a7a     BC 78 BC 78 
37a7e     26 79 18 75 
37a82     36 83 1F 84 
37a86     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
37a8a     43 87 43 87 
37a8e     43 87 43 87 
37a92     43 87 44 87 
37a96     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
37a9a     43 87 44 87 
37a9e     44 87 43 87 
37aa2     43 87 43 87 
37aa6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
37aaa     43 87 43 87 
37aae     43 87 43 87 
37ab2     44 87 44 87 
37ab6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
37aba     44 87 43 87 
37abe     43 87 43 87 
37ac2     43 87 44 87 
37ac6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
37aca     44 87 44 87 
37ace     44 87 43 87 
37ad2     44 87 43 87 
37ad6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
37ada     43 87 43 87 
37ade     43 87 44 87 
37ae2     44 87 43 87 
37ae6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
37aea     43 87 43 87 
37aee     43 87 43 87 
37af2     43 87 44 87 
37af6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
37afa     43 87 44 87 
37afe     43 87 44 87 
37b02     19 87 7D 86 
37b06     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
37b0a     B1 78 BC 78 
37b0e     BC 78 BC 78 
37b12     BC 78 BC 78 
37b16     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37b1a     BC 78 BC 78 
37b1e     BD 78 BC 78 
37b22     B7 78 3B 7B 
37b26     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
37b2a     96 86 44 87 
37b2e     43 87 43 87 
37b32     43 87 43 87 
37b36     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
37b3a     44 87 44 87 
37b3e     43 87 44 87 
37b42     43 87 44 87 
37b46     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
37b4a     43 87 44 87 
37b4e     43 87 44 87 
37b52     43 87 44 87 
37b56     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
37b5a     43 87 44 87 
37b5e     43 87 43 87 
37b62     44 87 43 87 
37b66     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
37b6a     44 87 44 87 
37b6e     43 87 43 87 
37b72     43 87 44 87 
37b76     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
37b7a     43 87 43 87 
37b7e     43 87 43 87 
37b82     44 87 44 87 
37b86     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
37b8a     36 83 CF 7A 
37b8e     AB 78 BB 78 
37b92     BC 78 BC 78 
37b96     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
37b9a     BB 78 BC 78 
37b9e     BC 78 BC 78 
37ba2     BC 78 BC 78 
37ba6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37baa     BC 78 BC 78 
37bae     BC 78 BB 78 
37bb2     BC 78 BC 78 
37bb6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
37bba     BB 78 BC 78 
37bbe     BB 78 BC 78 
37bc2     BC 78 BD 78 
37bc6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
37bca     BC 78 BC 78 
37bce     BC 78 BC 78 
37bd2     BC 78 BD 78 
37bd6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
37bda     BC 78 BB 78 
37bde     BC 78 BB 78 
37be2     BB 78 BC 78 
37be6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
37bea     BC 78 BC 78 
37bee     BC 78 BC 78 
37bf2     BC 78 BB 78 
37bf6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
37bfa     BC 78 BC 78 
37bfe     BC 78 BD 78 
37c02     BB 78 BC 78 
37c06     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
37c0a     BC 78 BC 78 
37c0e     BC 78 BB 78 
37c12     BC 78 BB 78 
37c16     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
37c1a     BB 78 BC 78 
37c1e     BC 78 BC 78 
37c22     BC 78 BB 78 
37c26     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37c2a     BC 78 BC 78 
37c2e     BC 78 BB 78 
37c32     BC 78 BB 78 
37c36     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37c3a     BC 78 BC 78 
37c3e     BC 78 BC 78 
37c42     BB 78 BC 78 
37c46     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
37c4a     BC 78 9F 78 
37c4e     52 79 B3 84 
37c52     2F 86 60 87 
37c56     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
37c5a     44 87 43 87 
37c5e     43 87 43 87 
37c62     43 87 43 87 
37c66     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
37c6a     43 87 43 87 
37c6e     43 87 44 87 
37c72     43 87 43 87 
37c76     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
37c7a     43 87 43 87 
37c7e     43 87 43 87 
37c82     43 87 44 87 
37c86     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
37c8a     44 87 44 87 
37c8e     5E 87 BC 80 
37c92     FB 80 94 78 
37c96     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
37c9a     BD 78 BC 78 
37c9e     BB 78 BC 78 
37ca2     BB 78 BB 78 
37ca6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
37caa     BC 78 BB 78 
37cae     BB 78 6B 79 
37cb2     D6 77 AC 87 
37cb6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
37cba     43 87 44 87 
37cbe     43 87 43 87 
37cc2     44 87 43 87 
37cc6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
37cca     43 87 44 87 
37cce     43 87 5C 87 
37cd2     E7 80 00 80 
37cd6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
37cda     BC 78 BD 78 
37cde     BC 78 BC 78 
37ce2     BC 78 BB 78 
37ce6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37cea     BC 78 BC 78 
37cee     BB 78 BC 78 
37cf2     BB 78 BC 78 
37cf6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37cfa     BB 78 BC 78 
37cfe     BC 78 BC 78 
37d02     BC 78 BC 78 
37d06     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37d0a     BC 78 BC 78 
37d0e     BC 78 BC 78 
37d12     A0 78 8D 7B 
37d16     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
37d1a     60 87 43 87 
37d1e     44 87 44 87 
37d22     43 87 43 87 
37d26     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
37d2a     44 87 43 87 
37d2e     43 87 43 87 
37d32     44 87 73 86 
37d36     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
37d3a     51 7B B6 78 
37d3e     BC 78 BD 78 
37d42     BC 78 BC 78 
37d46     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37d4a     BB 78 BC 78 
37d4e     BD 78 BB 78 
37d52     BC 78 BB 78 
37d56     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
37d5a     BC 78 BC 78 
37d5e     BC 78 BC 78 
37d62     BB 78 BC 78 
37d66     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37d6a     BC 78 BB 78 
37d6e     BB 78 BC 78 
37d72     BC 78 BB 78 
37d76     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
37d7a     22 8C AF 84 
37d7e     48 87 43 87 
37d82     44 87 43 87 
37d86     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
37d8a     43 87 42 87 
37d8e     43 87 43 87 
37d92     44 87 43 87 
37d96     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
37d9a     43 87 43 87 
37d9e     44 87 44 87 
37da2     43 87 43 87 
37da6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
37daa     43 87 43 87 
37dae     43 87 43 87 
37db2     44 87 43 87 
37db6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
37dba     9F 8B D6 77 
37dbe     16 7C B3 78 
37dc2     BC 78 BB 78 
37dc6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
37dca     BB 78 BC 78 
37dce     BB 78 BC 78 
37dd2     BC 78 BC 78 
37dd6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37dda     BC 78 BB 78 
37dde     BB 78 BC 78 
37de2     BB 78 BC 78 
37de6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
37dea     BB 78 BB 78 
37dee     BC 78 BC 78 
37df2     BC 78 BB 78 
37df6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
37dfa     BC 78 BC 78 
37dfe     BC 78 BD 78 
37e02     BB 78 BC 78 
37e06     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
37e0a     BC 78 BC 78 
37e0e     BC 78 BB 78 
37e12     BC 78 BC 78 
37e16     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37e1a     A8 78 54 7E 
37e1e     F4 83 17 82 
37e22     50 87 43 87 
37e26     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
37e2a     44 87 43 87 
37e2e     44 87 43 87 
37e32     43 87 44 87 
37e36     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
37e3a     43 87 28 87 
37e3e     20 85 CF 7A 
37e42     70 7D AD 78 
37e46     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
37e4a     BB 78 BC 78 
37e4e     BC 78 BC 78 
37e52     BB 78 BB 78 
37e56     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
37e5a     BB 78 B2 78 
37e5e     9A 7C CF 7A 
37e62     4A 87 0D 87 
37e66     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
37e6a     43 87 44 87 
37e6e     43 87 44 87 
37e72     43 87 43 87 
37e76     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
37e7a     44 87 43 87 
37e7e     28 87 51 85 
37e82     11 7A 1E 7D 
37e86     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
37e8a     BC 78 BB 78 
37e8e     BC 78 BC 78 
37e92     BC 78 BC 78 
37e96     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
37e9a     BB 78 BC 78 
37e9e     BB 78 BC 78 
37ea2     BC 78 BC 78 
37ea6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
37eaa     BB 78 BC 78 
37eae     BC 78 BC 78 
37eb2     BD 78 BB 78 
37eb6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
37eba     BC 78 BB 78 
37ebe     BC 78 BC 78 
37ec2     BC 78 BB 78 
37ec6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37eca     BC 78 BC 78 
37ece     BC 78 BC 78 
37ed2     BB 78 BC 78 
37ed6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37eda     BC 78 BD 78 
37ede     BC 78 BC 78 
37ee2     BC 78 BB 78 
37ee6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37eea     BC 78 BB 78 
37eee     BB 78 BC 78 
37ef2     BC 78 BB 78 
37ef6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37efa     BB 78 BB 78 
37efe     BB 78 BC 78 
37f02     B6 78 48 7D 
37f06     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
37f0a     56 87 43 87 
37f0e     42 87 44 87 
37f12     44 87 43 87 
37f16     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
37f1a     43 87 44 87 
37f1e     43 87 44 87 
37f22     4C 87 7E 83 
37f26     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
37f2a     F7 78 BC 78 
37f2e     BC 78 BB 78 
37f32     BB 78 BC 78 
37f36     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
37f3a     BC 78 BB 78 
37f3e     BC 78 BC 78 
37f42     BB 78 BC 78 
37f46     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
37f4a     BB 78 BC 78 
37f4e     BC 78 BC 78 
37f52     BC 78 BB 78 
37f56     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37f5a     BC 78 BC 78 
37f5e     BC 78 BC 78 
37f62     BC 78 BB 78 
37f66     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37f6a     BC 78 BB 78 
37f6e     BB 78 BC 78 
37f72     BC 78 BB 78 
37f76     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
37f7a     BC 78 BC 78 
37f7e     BB 78 BC 78 
37f82     BC 78 BC 78 
37f86     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
37f8a     73 32 00 04 
37f8e     00 00 10 00 
37f92     00 00 00 00 
37f96     00 00 00 00 | atari12 file "atari12.s2"
37f9a     00 6D 00 6D 
37f9e     00 6D 00 6D 
37fa2     00 6D 00 6D 
37fa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37faa     00 6D 00 6D 
37fae     00 6D 00 6D 
37fb2     00 6D 00 6D 
37fb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37fba     00 6D 00 6D 
37fbe     00 6D 00 6D 
37fc2     00 6D 00 6D 
37fc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37fca     00 6D 00 6D 
37fce     00 6D 00 6D 
37fd2     00 6D 00 6D 
37fd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
37fda     00 6D 00 6D 
37fde     00 6D 00 6D 
37fe2     00 6D 00 6D 
37fe6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
37fea     00 6C 00 6C 
37fee     00 6C 00 6C 
37ff2     00 6C 00 6C 
37ff6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
37ffa     00 6C 00 6C 
37ffe     00 6C 00 6C 
38002     00 6C 00 6C 
38006     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3800a     00 6C 00 6C 
3800e     00 6C 00 6C 
38012     00 6C 00 6C 
38016     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3801a     00 6C 00 6C 
3801e     00 6C 00 6C 
38022     00 6C 00 6C 
38026     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3802a     00 6C 00 6C 
3802e     00 6C 00 6C 
38032     00 6C 00 6C 
38036     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3803a     00 6C 00 6C 
3803e     00 6C 00 6C 
38042     00 6C 00 6C 
38046     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3804a     00 6C 00 6C 
3804e     00 6C 00 6C 
38052     00 6C 00 6C 
38056     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3805a     00 6C 00 6C 
3805e     00 6C 00 6C 
38062     00 6C 00 6C 
38066     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3806a     00 6C 00 6C 
3806e     00 6C 00 6C 
38072     00 6C 00 6C 
38076     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3807a     00 6C 00 6C 
3807e     00 6C 00 6C 
38082     00 6C 00 6C 
38086     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3808a     00 6C 00 6C 
3808e     00 6C 00 6C 
38092     00 6C 00 6C 
38096     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3809a     00 6C 00 6B 
3809e     00 6B 00 6B 
380a2     00 6B 00 6B 
380a6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380aa     00 6B 00 6B 
380ae     00 6B 00 6B 
380b2     00 6B 00 6B 
380b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380ba     00 6B 00 6B 
380be     00 6B 00 6B 
380c2     00 6B 00 6B 
380c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380ca     00 6B 00 6B 
380ce     00 6B 00 6B 
380d2     00 6B 00 6B 
380d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380da     00 6B 00 6B 
380de     00 6B 00 6B 
380e2     00 6B 00 6B 
380e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380ea     00 6B 00 6B 
380ee     00 6B 00 6B 
380f2     00 6B 00 6B 
380f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
380fa     00 6B 00 6B 
380fe     00 6B 00 6B 
38102     00 6B 00 6B 
38106     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3810a     00 6B 00 6B 
3810e     00 6B 00 6B 
38112     00 6B 00 6B 
38116     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3811a     00 6B 00 6B 
3811e     00 6B 00 6B 
38122     00 6B 00 6B 
38126     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3812a     00 6B 00 6B 
3812e     00 6B 00 6B 
38132     00 6A 00 9D 
38136     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3813a     00 9E 00 9E 
3813e     00 9E 00 9E 
38142     00 9E 00 9E 
38146     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3814a     00 9E 00 9E 
3814e     00 9E 00 9E 
38152     00 9E 00 9E 
38156     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3815a     00 9E 00 9E 
3815e     00 9E 00 9E 
38162     00 9E 00 9E 
38166     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3816a     00 9E 00 9E 
3816e     00 9E 00 9E 
38172     00 9E 00 9E 
38176     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3817a     00 9E 00 9E 
3817e     00 9E 00 9E 
38182     00 9E 00 9E 
38186     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3818a     00 9E 00 9E 
3818e     00 9E 00 9E 
38192     00 9E 00 9E 
38196     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3819a     00 9E 00 9E 
3819e     00 9E 00 9E 
381a2     00 9E 00 9E 
381a6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
381aa     00 9E 00 9E 
381ae     00 9E 00 9E 
381b2     00 9E 00 9E 
381b6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
381ba     00 9E 00 9E 
381be     00 9E 00 9E 
381c2     00 9E 00 9E 
381c6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
381ca     00 9F 00 9F 
381ce     00 9F 00 9F 
381d2     00 9F 00 9F 
381d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381da     00 9F 00 9F 
381de     00 9F 00 9F 
381e2     00 9F 00 9F 
381e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381ea     00 9F 00 9F 
381ee     00 9F 00 9F 
381f2     00 9F 00 9F 
381f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
381fa     00 9F 00 9F 
381fe     00 9F 00 9F 
38202     00 9F 00 9F 
38206     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3820a     00 9F 00 9F 
3820e     00 9F 00 9F 
38212     00 9F 00 9F 
38216     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3821a     00 9F 00 9F 
3821e     00 9F 00 9F 
38222     00 9F 00 9F 
38226     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3822a     00 9F 00 9F 
3822e     00 9F 00 9F 
38232     00 9F 00 9F 
38236     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3823a     00 9F 00 9F 
3823e     00 9F 00 9F 
38242     00 9F 00 9F 
38246     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3824a     00 9F 00 9F 
3824e     00 9F 00 9F 
38252     00 9F 00 9F 
38256     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3825a     00 9F 00 9F 
3825e     00 9F 00 9F 
38262     00 9F 00 9F 
38266     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3826a     00 9F 00 9F 
3826e     00 9F 00 9F 
38272     00 9F 00 9F 
38276     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3827a     00 9F 00 9F 
3827e     00 9F 00 9F 
38282     00 9F 00 9F 
38286     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3828a     00 9F 00 9F 
3828e     00 9F 00 A0 
38292     00 A0 00 A0 
38296     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3829a     00 A0 00 A0 
3829e     00 A0 00 A0 
382a2     00 A0 00 A0 
382a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382aa     00 A0 00 A0 
382ae     00 A0 00 A0 
382b2     00 A0 00 A0 
382b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382ba     00 A0 00 A0 
382be     00 A0 00 A0 
382c2     00 A0 00 A0 
382c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382ca     00 A0 00 A0 
382ce     00 A0 00 A0 
382d2     00 A0 00 A0 
382d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382da     00 A0 00 A0 
382de     00 A0 00 A0 
382e2     00 A0 00 A0 
382e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382ea     00 A0 00 A0 
382ee     00 A0 00 A0 
382f2     00 A0 00 A0 
382f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
382fa     00 A0 00 A0 
382fe     00 A0 00 A0 
38302     00 A0 00 A0 
38306     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3830a     00 A0 00 A0 
3830e     00 A0 00 A0 
38312     00 A0 00 A0 
38316     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3831a     00 A0 00 A0 
3831e     00 A0 00 A0 
38322     00 A0 00 A0 
38326     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3832a     00 A0 00 A0 
3832e     00 A0 00 A0 
38332     00 A0 00 A0 
38336     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3833a     00 A0 00 A0 
3833e     00 A0 00 A0 
38342     00 A0 00 A0 
38346     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3834a     00 A0 00 A0 
3834e     00 A0 00 A0 
38352     00 A0 00 A0 
38356     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3835a     00 6D 00 6D 
3835e     00 6D 00 6D 
38362     00 6D 00 6D 
38366     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3836a     00 6D 00 6D 
3836e     00 6D 00 6D 
38372     00 6D 00 6D 
38376     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3837a     00 6D 00 6D 
3837e     00 6D 00 6D 
38382     00 6D 00 6D 
38386     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3838a     00 6D 00 6D 
3838e     00 6D 00 6D 
38392     00 6D 00 6D 
38396     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3839a     00 6D 00 6D 
3839e     00 6D 00 6D 
383a2     00 6D 00 6D 
383a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
383aa     00 6D 00 6D 
383ae     00 6D 00 6D 
383b2     00 6D 00 6D 
383b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
383ba     00 6D 00 6D 
383be     00 6D 00 6D 
383c2     00 6D 00 6D 
383c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
383ca     00 6D 00 6D 
383ce     00 6D 00 6D 
383d2     00 6D 00 6D 
383d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
383da     00 6D 00 6D 
383de     00 A0 00 A0 
383e2     00 A0 00 A0 
383e6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383ea     00 A0 00 A0 
383ee     00 A0 00 A0 
383f2     00 A0 00 A0 
383f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
383fa     00 A0 00 A0 
383fe     00 A0 00 A0 
38402     00 A0 00 A0 
38406     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3840a     00 A0 00 A0 
3840e     00 A0 00 A0 
38412     00 A0 00 A0 
38416     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3841a     00 A0 00 A0 
3841e     00 A0 00 A0 
38422     00 A0 00 A0 
38426     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3842a     00 A0 00 A0 
3842e     00 A0 00 A0 
38432     00 A0 00 A0 
38436     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3843a     00 A0 00 A0 
3843e     00 A0 00 A0 
38442     00 A0 00 A0 
38446     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3844a     00 A0 00 A0 
3844e     00 A0 00 A0 
38452     00 A0 00 A0 
38456     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3845a     00 A0 00 A0 
3845e     00 A0 00 A0 
38462     00 A0 00 A0 
38466     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3846a     00 6D 00 6D 
3846e     00 6D 00 6D 
38472     00 6D 00 6D 
38476     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3847a     00 6D 00 6D 
3847e     00 6D 00 6D 
38482     00 6D 00 6D 
38486     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3848a     00 6D 00 6D 
3848e     00 6D 00 6D 
38492     00 6D 00 6D 
38496     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3849a     00 6D 00 6D 
3849e     00 6D 00 6D 
384a2     00 6D 00 6D 
384a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
384aa     00 6D 00 6D 
384ae     00 6D 00 6D 
384b2     00 6D 00 6D 
384b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
384ba     00 6D 00 6D 
384be     00 6D 00 6D 
384c2     00 6D 00 6D 
384c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
384ca     00 6D 00 6D 
384ce     00 6D 00 6D 
384d2     00 6D 00 6D 
384d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
384da     00 6D 00 6D 
384de     00 6D 00 6D 
384e2     00 6D 00 6D 
384e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
384ea     00 6D 00 6D 
384ee     00 6C 00 A0 
384f2     00 9F 00 A0 
384f6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
384fa     00 A0 00 A0 
384fe     00 A0 00 A0 
38502     00 A0 00 A0 
38506     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3850a     00 A0 00 A0 
3850e     00 A0 00 A0 
38512     00 A0 00 A0 
38516     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3851a     00 A0 00 A0 
3851e     00 A0 00 A0 
38522     00 A0 00 A0 
38526     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3852a     00 A0 00 A0 
3852e     00 A0 00 A0 
38532     00 A0 00 A0 
38536     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3853a     00 A0 00 A0 
3853e     00 A0 00 A0 
38542     00 A0 00 A0 
38546     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3854a     00 A0 00 A0 
3854e     00 A0 00 A0 
38552     00 A0 00 A0 
38556     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3855a     00 A0 00 A0 
3855e     00 A0 00 A0 
38562     00 A0 00 A0 
38566     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3856a     00 A0 00 A0 
3856e     00 A0 00 A0 
38572     00 A0 00 A0 
38576     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3857a     00 A0 00 A0 
3857e     00 A0 00 A0 
38582     00 A0 00 A0 
38586     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3858a     00 A0 00 A0 
3858e     00 A0 00 A0 
38592     00 A0 00 A0 
38596     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3859a     00 A0 00 A0 
3859e     00 A0 00 A0 
385a2     00 A0 00 A0 
385a6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
385aa     00 A1 00 A1 
385ae     00 A1 00 A1 
385b2     00 A1 00 A1 
385b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
385ba     00 A1 00 A1 
385be     00 A1 00 A1 
385c2     00 A1 00 A1 
385c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
385ca     00 A1 00 A1 
385ce     00 A1 00 A1 
385d2     00 A1 00 A1 
385d6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
385da     00 A1 00 A1 
385de     00 A1 00 A1 
385e2     00 A1 00 A1 
385e6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
385ea     00 A1 00 A1 
385ee     00 A1 00 A1 
385f2     00 A1 00 A1 
385f6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
385fa     00 A1 00 A1 
385fe     00 A1 00 A1 
38602     00 6E 00 6E 
38606     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3860a     00 6E 00 6E 
3860e     00 6E 00 6E 
38612     00 6E 00 6E 
38616     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3861a     00 6E 00 6E 
3861e     00 6E 00 6E 
38622     00 6E 00 6E 
38626     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3862a     00 6E 00 6E 
3862e     00 6E 00 6E 
38632     00 6E 00 6E 
38636     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3863a     00 6E 00 6D 
3863e     00 6D 00 6D 
38642     00 6D 00 6D 
38646     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3864a     00 6D 00 6D 
3864e     00 6D 00 6D 
38652     00 6D 00 6D 
38656     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3865a     00 6D 00 6D 
3865e     00 6D 00 6D 
38662     00 6D 00 6D 
38666     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3866a     00 6D 00 6D 
3866e     00 6D 00 6D 
38672     00 6D 00 6D 
38676     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3867a     00 6D 00 6D 
3867e     00 6D 00 6D 
38682     00 6D 00 6D 
38686     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3868a     00 6D 00 6D 
3868e     00 6D 00 6D 
38692     00 6D 00 6D 
38696     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3869a     00 6D 00 6D 
3869e     00 6D 00 6D 
386a2     00 6D 00 6D 
386a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
386aa     00 6D 00 6D 
386ae     00 6D 00 6D 
386b2     00 6D 00 6D 
386b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
386ba     00 6D 00 6D 
386be     00 6D 00 6D 
386c2     00 6D 00 6D 
386c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
386ca     00 6D 00 6D 
386ce     00 6D 00 6D 
386d2     00 6D 00 6D 
386d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
386da     00 6D 00 6D 
386de     00 6D 00 6D 
386e2     00 6D 00 6D 
386e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
386ea     00 6D 00 6D 
386ee     00 6C 00 6C 
386f2     00 6C 00 6C 
386f6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
386fa     00 6C 00 6C 
386fe     00 6C 00 6C 
38702     00 6C 00 6C 
38706     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3870a     00 6C 00 6C 
3870e     00 6C 00 6C 
38712     00 9D 00 9F 
38716     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3871a     00 9F 00 9F 
3871e     00 9F 00 9F 
38722     00 A0 00 A0 
38726     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3872a     00 A0 00 A0 
3872e     00 A0 00 A0 
38732     00 A0 00 A0 
38736     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3873a     00 A0 00 A0 
3873e     00 A0 00 A0 
38742     00 A0 00 A0 
38746     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3874a     00 A0 00 A0 
3874e     00 A0 00 A0 
38752     00 A0 00 A0 
38756     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3875a     00 A0 00 A0 
3875e     00 A0 00 A0 
38762     00 A0 00 A0 
38766     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3876a     00 A0 00 A0 
3876e     00 A0 00 A0 
38772     00 A0 00 A0 
38776     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3877a     00 A0 00 A0 
3877e     00 A0 00 A0 
38782     00 A0 00 A0 
38786     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3878a     00 A0 00 A0 
3878e     00 A0 00 A0 
38792     00 A0 00 A0 
38796     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3879a     01 00 00 00 
3879e     00 00 00 00 
387a2     00 00 00 00 
387a6     00 00 00 00 | mouse  file "mouse2.def"
387aa     00 00 00 00 
387ae     00 00 00 00 
387b2     00 00 00 00 
387b6     00 00 00 00 | 	byte	$00[16]
387ba     01 01 00 00 
387be     00 00 00 00 
387c2     00 00 00 00 
387c6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387ca     00 00 00 00 
387ce     00 00 00 00 
387d2     00 00 00 00 
387d6     00 00 00 00 | 	byte	$00[16]
387da     01 0D 01 00 
387de     00 00 00 00 
387e2     00 00 00 00 
387e6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
387ea     00 00 00 00 
387ee     00 00 00 00 
387f2     00 00 00 00 
387f6     00 00 00 00 | 	byte	$00[16]
387fa     01 0D 0D 01 
387fe     00 00 00 00 
38802     00 00 00 00 
38806     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3880a     00 00 00 00 
3880e     00 00 00 00 
38812     00 00 00 00 
38816     00 00 00 00 | 	byte	$00[16]
3881a     01 0D 0D 0D 
3881e     01 00 00 00 
38822     00 00 00 00 
38826     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3882a     00 00 00 00 
3882e     00 00 00 00 
38832     00 00 00 00 
38836     00 00 00 00 | 	byte	$00[16]
3883a     01 0D 0D 0D 
3883e     0D 01 00 00 
38842     00 00 00 00 
38846     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3884a     00 00 00 00 
3884e     00 00 00 00 
38852     00 00 00 00 
38856     00 00 00 00 | 	byte	$00[16]
3885a     01 0D 0D 0D 
3885e     0D 0D 01 00 
38862     00 00 00 00 
38866     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3886a     00 00 00 00 
3886e     00 00 00 00 
38872     00 00 00 00 
38876     00 00 00 00 | 	byte	$00[16]
3887a     01 0D 0D 0D 
3887e     0D 0D 0D 01 
38882     00 00 00 00 
38886     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3888a     00 00 00 00 
3888e     00 00 00 00 
38892     00 00 00 00 
38896     00 00 00 00 | 	byte	$00[16]
3889a     01 0D 0D 0D 
3889e     0D 0D 0D 0C 
388a2     01 00 00 00 
388a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
388aa     00 00 00 00 
388ae     00 00 00 00 
388b2     00 00 00 00 
388b6     00 00 00 00 | 	byte	$00[16]
388ba     01 0D 0D 0D 
388be     0D 0D 0D 0D 
388c2     0C 01 00 00 
388c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
388ca     00 00 00 00 
388ce     00 00 00 00 
388d2     00 00 00 00 
388d6     00 00 00 00 | 	byte	$00[16]
388da     01 0D 0D 0D 
388de     0D 0D 0D 0D 
388e2     0D 0C 01 00 
388e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
388ea     00 00 00 00 
388ee     00 00 00 00 
388f2     00 00 00 00 
388f6     00 00 00 00 | 	byte	$00[16]
388fa     01 0D 0D 0D 
388fe     0D 0D 0D 0D 
38902     0D 0D 0B 01 
38906     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3890a     00 00 00 00 
3890e     00 00 00 00 
38912     00 00 00 00 
38916     00 00 00 00 | 	byte	$00[16]
3891a     01 0D 0D 0D 
3891e     0C 0D 0D 03 
38922     01 01 01 01 
38926     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3892a     00 00 00 00 
3892e     00 00 00 00 
38932     00 00 00 00 
38936     00 00 00 00 | 	byte	$00[16]
3893a     01 0D 0D 0C 
3893e     01 09 0D 03 
38942     00 00 00 00 
38946     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3894a     00 00 00 00 
3894e     00 00 00 00 
38952     00 00 00 00 
38956     00 00 00 00 | 	byte	$00[16]
3895a     01 0D 0C 01 
3895e     00 01 0D 0B 
38962     01 00 00 00 
38966     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3896a     00 00 00 00 
3896e     00 00 00 00 
38972     00 00 00 00 
38976     00 00 00 00 | 	byte	$00[16]
3897a     01 0C 01 00 
3897e     00 01 0A 0D 
38982     01 00 00 00 
38986     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3898a     00 00 00 00 
3898e     00 00 00 00 
38992     00 00 00 00 
38996     00 00 00 00 | 	byte	$00[16]
3899a     01 01 00 00 
3899e     00 00 01 0D 
389a2     0B 01 00 00 
389a6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
389aa     00 00 00 00 
389ae     00 00 00 00 
389b2     00 00 00 00 
389b6     00 00 00 00 
389ba     00 00 00 00 
389be     00 00       | 	byte	$00[22]
389c0     01 0B 0D 01 
389c4     00 00 00 00 
389c8     00 00 00 00 
389cc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
389d0     00 00 00 00 
389d4     00 00 00 00 
389d8     00 00 00 00 
389dc     00 00 00 00 
389e0     00          | 	byte	$00[17]
389e1     01 01 00 00 
389e5     00 00 00 00 
389e9     00 00 00 00 
389ed     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
389f1     00 00 00 00 
      ...             
38b95     00 00 00 00 
38b99     00          | 	byte	$00[425]
38b9a                 | 
38b9a     00 00       |              	org
38b9c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
38ba0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
38ba4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
38ba8 003             | 
38ba8 003 00 30 04 F6 |                 mov     psramaddr,#0
38bac 004             | 
38bac 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
38bb0 005 20 00 00 FF 
38bb4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
38bb8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
38bbc 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
38bc0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
38bc4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
38bc8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
38bcc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
38bd0 00d             | 
38bd0 00d 20 00 00 FF 
38bd4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
38bd8 00f E0 03 00 FF 
38bdc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
38be0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
38be4 012             | 
38be4 012             |                 
38be4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
38be8 013             |     
38be8 013 01 2C 60 FD |                 cogid 	t11				' get id
38bec 014 00 00 EC FC |                 coginit #0,#0				' start the new program
38bf0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
38bf4 016             | 
38bf4 016 00 00 00 00 | t11 		long 	0
38bf8 017 00 FF 07 00 | mailbox 	long 	$7FF00
38bfc 018 00 00 00 00 | psramaddr 	long 	0
38c00 019 00 00 00 00 | pslockval	long 	0
38c04 01a 00 00 00 00 | cmd             long    0
38c08 01b 00 00 00 00 | buf1            long    0
38c0c 01c 00 40 00 00 | buf2            long    16384
38c10 01d 14 8C 03 00 | 	long	@@@_dat_ + 12612
38c14 01e 50 32 20 52 
38c18 01f 65 74 72 6F 
38c1c 020 6D 61 63 68 
38c20 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
38c24 022 42 41 53 49 
38c28 023 43 20 76 65 
38c2c 024 72 73 69 6F 
38c30 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
38c34 026 33 32 00 00 | 	byte	$33, $32, $00, $00
38c38 027             | 	alignl
38c38 027             | _hg010b_spin2_dat_
38c38 027             | 
38c38 027 00 00 00 00 
38c3c 028 00 00 00 00 
38c40 029 00 00 00 00 
38c44 02a 00 00 00 00 
38c48 02b 00 00 00    | vga_font       file "vgafont.def"
38c4b 02b 7E 81 A5 81 
38c4f 02c 81 BD 99 81 
38c53 02d 81 7E 00 00 
38c57 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
38c5b 02f 7E FF DB FF 
38c5f 030 FF C3 E7 FF 
38c63 031 FF 7E 00 00 
38c67 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
38c6b 033 00 36 7F 7F 
38c6f 034 7F 7F 3E 1C 
38c73 035 08 00 00 00 
38c77 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
38c7b 037 00 08 1C 3E 
38c7f 038 7F 3E 1C 08 
38c83 039 00 00 00 00 
38c87 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
38c8b 03b 18 3C 3C E7 
38c8f 03c E7 E7 18 18 
38c93 03d 3C 00 00 00 
38c97 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38c9b 03f 18 3C 7E FF 
38c9f 040 FF 7E 18 18 
38ca3 041 3C 00 00 00 
38ca7 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
38cab 043 00 00 00 18 
38caf 044 3C 3C 18 00 
38cb3 045 00 00 00 00 
38cb7 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
38cbb 047 FF FF FF E7 
38cbf 048 C3 C3 E7 FF 
38cc3 049 FF FF FF FF 
38cc7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
38ccb 04b 00 00 3C 66 
38ccf 04c 42 42 66 3C 
38cd3 04d 00 00 00 00 
38cd7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
38cdb 04f FF FF C3 99 
38cdf 050 BD BD 99 C3 
38ce3 051 FF FF FF FF 
38ce7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
38ceb 053 78 70 58 4C 
38cef 054 1E 33 33 33 
38cf3 055 33 1E 00 00 
38cf7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
38cfb 057 3C 66 66 66 
38cff 058 66 3C 18 7E 
38d03 059 18 18 00 00 
38d07 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
38d0b 05b FC CC FC 0C 
38d0f 05c 0C 0C 0C 0E 
38d13 05d 0F 07 00 00 
38d17 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
38d1b 05f FE C6 FE C6 
38d1f 060 C6 C6 C6 E6 
38d23 061 E7 67 03 00 
38d27 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
38d2b 063 18 18 DB 3C 
38d2f 064 E7 3C DB 18 
38d33 065 18 00 00 00 
38d37 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
38d3b 067 03 07 0F 1F 
38d3f 068 7F 1F 0F 07 
38d43 069 03 01 00 00 
38d47 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
38d4b 06b 60 70 78 7C 
38d4f 06c 7F 7C 78 70 
38d53 06d 60 40 00 00 
38d57 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
38d5b 06f 18 3C 7E 18 
38d5f 070 18 18 7E 3C 
38d63 071 18 00 00 00 
38d67 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
38d6b 073 66 66 66 66 
38d6f 074 66 66 66    | 	byte	$66[7]
38d72 075 00 66 66 00 
38d76 076 00 00 00 00 
38d7a 077 00 FE DB DB 
38d7e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
38d82 079 D8 D8 D8 00 
38d86 07a 00 00 00 3E 
38d8a 07b 63 06 1C 36 
38d8e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
38d92 07d 30 63 3E 00 
38d96 07e 00 00 00 00 
38d9a 07f 00 00 00 00 
38d9e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
38da2 081 7F 7F 7F 00 
38da6 082 00 00 00 00 
38daa 083 00 18 3C 7E 
38dae 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
38db2 085 3C 18 7E 00 
38db6 086 00 00 00 00 
38dba 087 00 18 3C 7E 
38dbe 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
38dc2 089 18 18 18 00 
38dc6 08a 00 00 00 00 
38dca 08b 00 18 18 18 
38dce 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38dd2 08d 7E 3C 18 00 
38dd6 08e 00 00 00 00 
38dda 08f 00 00 00 18 
38dde 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
38de2 091 00 00 00 00 
38de6 092 00 00 00 00 
38dea 093 00 00 00    | 	byte	$00[11]
38ded 094 0C 06 7F 06 
38df1 095 0C 00 00 00 
38df5 096 00 00 00 00 
38df9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38dfd 098 00 03 03 03 
38e01 099 7F 00 00 00 
38e05 09a 00 00 00 00 
38e09 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e0d 09c 14 36 7F 36 
38e11 09d 14 00 00 00 
38e15 09e 00 00 00 00 
38e19 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
38e1d 0a0 1C 1C 3E 3E 
38e21 0a1 7F 7F 00 00 
38e25 0a2 00 00 00 00 
38e29 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
38e2d 0a4 7F 3E 3E 1C 
38e31 0a5 1C 08 00 00 
38e35 0a6 00 00 00 00 
38e39 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e3d 0a8 00 00 00 00 
38e41 0a9 00 00 00 00 
38e45 0aa 00 00 00 00 
38e49 0ab 00 00       | 	byte	$00[14]
38e4b 0ab 18 3C 3C 3C 
38e4f 0ac 18 18 18 00 
38e53 0ad 18 18 00 00 
38e57 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
38e5b 0af 66 24 00 00 
38e5f 0b0 00 00 00 00 
38e63 0b1 00 00 00 00 
38e67 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e6b 0b3 00 36 36 7F 
38e6f 0b4 36 36 36 7F 
38e73 0b5 36 36 00 00 
38e77 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
38e7b 0b7 3E 63 43 03 
38e7f 0b8 3E 60 60 61 
38e83 0b9 63 3E 18 18 
38e87 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
38e8b 0bb 00 00 43 63 
38e8f 0bc 30 18 0C 06 
38e93 0bd 63 61 00 00 
38e97 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
38e9b 0bf 1C 36 36 1C 
38e9f 0c0 6E 3B 33 33 
38ea3 0c1 33 6E 00 00 
38ea7 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
38eab 0c3 0C 0C 0C 06 
38eaf 0c4 00 00 00 00 
38eb3 0c5 00 00 00 00 
38eb7 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38ebb 0c7 30 18 0C 0C 
38ebf 0c8 0C 0C 0C 0C 
38ec3 0c9 18 30 00 00 
38ec7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
38ecb 0cb 0C 18 30 30 
38ecf 0cc 30 30 30 30 
38ed3 0cd 18 0C 00 00 
38ed7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
38edb 0cf 00 00 00 66 
38edf 0d0 3C FF 3C 66 
38ee3 0d1 00 00 00 00 
38ee7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
38eeb 0d3 00 00 00 18 
38eef 0d4 18 7E 18 18 
38ef3 0d5 00 00 00 00 
38ef7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
38efb 0d7 00 00 00 00 
38eff 0d8 00 00 00 00 | 	byte	$00[8]
38f03 0d9 18 18 18 0C 
38f07 0da 00 00 00 00 
38f0b 0db 00 00 00 00 
38f0f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
38f13 0dd 00 00 00 00 
38f17 0de 00 00 00 00 
38f1b 0df 00 00 00 00 
38f1f 0e0 00 00 00 00 | 	byte	$00[16]
38f23 0e1 18 18 00 00 
38f27 0e2 00 00 00 00 
38f2b 0e3 00 00 40 60 
38f2f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
38f33 0e5 03 01 00 00 
38f37 0e6 00 00 00 00 
38f3b 0e7 1C 36 63 63 
38f3f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
38f43 0e9 36 1C 00 00 
38f47 0ea 00 00 00 00 
38f4b 0eb 18 1C 1E 18 
38f4f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
38f53 0ed 18 7E 00 00 
38f57 0ee 00 00 00 00 
38f5b 0ef 3E 63 60 30 
38f5f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
38f63 0f1 63 7F 00 00 
38f67 0f2 00 00 00 00 
38f6b 0f3 3E 63 60 60 
38f6f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
38f73 0f5 63 3E 00 00 
38f77 0f6 00 00 00 00 
38f7b 0f7 30 38 3C 36 
38f7f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
38f83 0f9 30 78 00 00 
38f87 0fa 00 00 00 00 
38f8b 0fb 7F 03 03 03 
38f8f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
38f93 0fd 63 3E 00 00 
38f97 0fe 00 00 00 00 
38f9b 0ff 1C 06 03 03 
38f9f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
38fa3 101 63 3E 00 00 
38fa7 102 00 00 00 00 
38fab 103 7F 63 60 60 
38faf 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
38fb3 105 0C 0C 00 00 
38fb7 106 00 00 00 00 
38fbb 107 3E 63 63 63 
38fbf 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
38fc3 109 63 3E 00 00 
38fc7 10a 00 00 00 00 
38fcb 10b 3E 63 63 63 
38fcf 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
38fd3 10d 30 1E 00 00 
38fd7 10e 00 00 00 00 
38fdb 10f 00 00 00 18 
38fdf 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38fe3 111 18 18 00 00 
38fe7 112 00 00 00 00 
38feb 113 00 00 00 18 
38fef 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38ff3 115 18 18 0C 00 
38ff7 116 00 00 00 00 
38ffb 117 00 60 30 18 
38fff 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
39003 119 30 60 00 00 
39007 11a 00 00 00 00 
3900b 11b 00 00 00 7E 
3900f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
39013 11d 00 00 00 00 
39017 11e 00 00 00 00 
3901b 11f 00          | 	byte	$00[9]
3901c 120 06 0C 18 30 
39020 121 60 30 18 0C 
39024 122 06 00 00 00 
39028 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3902c 124 63 63 30 18 
39030 125 18 18 00 18 
39034 126 18 00 00 00 
39038 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3903c 128 3E 63 63 7B 
39040 129 7B 7B 3B 03 
39044 12a 3E 00 00 00 
39048 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3904c 12c 1C 36 63 63 
39050 12d 7F 63 63 63 
39054 12e 63 00 00 00 
39058 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3905c 130 66 66 66 3E 
39060 131 66 66 66 66 
39064 132 3F 00 00 00 
39068 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3906c 134 66 43 03 03 
39070 135 03 03 43 66 
39074 136 3C 00 00 00 
39078 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3907c 138 36 66 66 66 
39080 139 66 66 66 36 
39084 13a 1F 00 00 00 
39088 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3908c 13c 66 46 16 1E 
39090 13d 16 06 46 66 
39094 13e 7F 00 00 00 
39098 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3909c 140 66 46 16 1E 
390a0 141 16 06 06 06 
390a4 142 0F 00 00 00 
390a8 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
390ac 144 66 43 03 03 
390b0 145 7B 63 63 66 
390b4 146 5C 00 00 00 
390b8 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
390bc 148 63 63 63 7F 
390c0 149 63 63 63 63 
390c4 14a 63 00 00 00 
390c8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
390cc 14c 18 18 18 18 
390d0 14d 18 18 18 18 | 	byte	$18[8]
390d4 14e 3C 00 00 00 
390d8 14f 00 00 00 78 
390dc 150 30 30 30 30 
390e0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
390e4 152 1E 00 00 00 
390e8 153 00 00 00 67 
390ec 154 66 66 36 1E 
390f0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
390f4 156 67 00 00 00 
390f8 157 00 00 00 0F 
390fc 158 06 06 06 06 
39100 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
39104 15a 7F 00 00 00 
39108 15b 00 00 00 63 
3910c 15c 77 7F 7F 6B 
39110 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
39114 15e 63 00 00 00 
39118 15f 00 00 00 63 
3911c 160 67 6F 7F 7B 
39120 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
39124 162 63 00 00 00 
39128 163 00 00 00 3E 
3912c 164 63 63 63 63 
39130 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
39134 166 3E 00 00 00 
39138 167 00 00 00 3F 
3913c 168 66 66 66 3E 
39140 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
39144 16a 0F 00 00 00 
39148 16b 00 00 00 3E 
3914c 16c 63 63 63 63 
39150 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
39154 16e 3E 30 70 00 
39158 16f 00 00 00 3F 
3915c 170 66 66 66 3E 
39160 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
39164 172 67 00 00 00 
39168 173 00 00 00 3E 
3916c 174 63 63 06 1C 
39170 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
39174 176 3E 00 00 00 
39178 177 00 00 00 7E 
3917c 178 7E 5A 18 18 
39180 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
39184 17a 3C 00 00 00 
39188 17b 00 00 00 63 
3918c 17c 63 63 63 63 
39190 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
39194 17e 3E 00 00 00 
39198 17f 00 00 00 63 
3919c 180 63 63 63 63 
391a0 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
391a4 182 08 00 00 00 
391a8 183 00 00 00 63 
391ac 184 63 63 63 6B 
391b0 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
391b4 186 36 00 00 00 
391b8 187 00 00 00 63 
391bc 188 63 36 3E 1C 
391c0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
391c4 18a 63 00 00 00 
391c8 18b 00 00 00 66 
391cc 18c 66 66 66 3C 
391d0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
391d4 18e 3C 00 00 00 
391d8 18f 00 00 00 7F 
391dc 190 63 61 30 18 
391e0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
391e4 192 7F 00 00 00 
391e8 193 00 00 00 3C 
391ec 194 0C 0C 0C 0C 
391f0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
391f4 196 3C 00 00 00 
391f8 197 00 00 00 00 
391fc 198 01 03 07 0E 
39200 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
39204 19a 40 00 00 00 
39208 19b 00 00 00 3C 
3920c 19c 30 30 30 30 
39210 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
39214 19e 3C 00 00 00 
39218 19f 1C 36 00 00 
3921c 1a0 00 00 00 00 
39220 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39224 1a2 00 00 00 00 
39228 1a3 00 00 00 00 
3922c 1a4 00 00 00 00 
39230 1a5 00 00 00 00 
39234 1a6 00          | 	byte	$00[17]
39235 1a6 FF 00 00 0C 
39239 1a7 18 00 00 00 
3923d 1a8 00 00 00 00 
39241 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39245 1aa 00 00 00 00 
39249 1ab 00 00 00 00 
3924d 1ac 00          | 	byte	$00[9]
3924e 1ac 1E 30 3E 33 
39252 1ad 33 33 6E 00 
39256 1ae 00 00 00 00 
3925a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3925e 1b0 1E 36 66 66 
39262 1b1 66 66 3E 00 
39266 1b2 00 00 00 00 
3926a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3926e 1b4 3E 63 03 03 
39272 1b5 03 63 3E 00 
39276 1b6 00 00 00 00 
3927a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3927e 1b8 3C 36 33 33 
39282 1b9 33 33 6E 00 
39286 1ba 00 00 00 00 
3928a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3928e 1bc 3E 63 7F 03 
39292 1bd 03 63 3E 00 
39296 1be 00 00 00 00 
3929a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3929e 1c0 0C 1E 0C 0C 
392a2 1c1 0C 0C 1E 00 
392a6 1c2 00 00 00 00 
392aa 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
392ae 1c4 6E 33 33 33 
392b2 1c5 33 33 3E 30 
392b6 1c6 33 1E 00 00 
392ba 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
392be 1c8 36 6E 66 66 
392c2 1c9 66 66 67 00 
392c6 1ca 00 00 00 00 
392ca 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
392ce 1cc 1C 18 18 18 
392d2 1cd 18 18 3C 00 
392d6 1ce 00 00 00 00 
392da 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
392de 1d0 70 60 60 60 
392e2 1d1 60 60 60 66 
392e6 1d2 66 3C 00 00 
392ea 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
392ee 1d4 66 36 1E 1E 
392f2 1d5 36 66 67 00 
392f6 1d6 00 00 00 00 
392fa 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
392fe 1d8 18 18 18 18 
39302 1d9 18 18       | 	byte	$18[6]
39304 1da 3C 00 00 00 
39308 1db 00 00 00 00 
3930c 1dc 00 00 37 7F 
39310 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
39314 1de 63 00 00 00 
39318 1df 00 00 00 00 
3931c 1e0 00 00 3B 66 
39320 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
39324 1e2 66 00 00 00 
39328 1e3 00 00 00 00 
3932c 1e4 00 00 3E 63 
39330 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
39334 1e6 3E 00 00 00 
39338 1e7 00 00 00 00 
3933c 1e8 00 00 3B 66 
39340 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
39344 1ea 3E 06 06 0F 
39348 1eb 00 00 00 00 
3934c 1ec 00 00 6E 33 
39350 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
39354 1ee 3E 30 30 78 
39358 1ef 00 00 00 00 
3935c 1f0 00 00 3B 6E 
39360 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
39364 1f2 0F 00 00 00 
39368 1f3 00 00 00 00 
3936c 1f4 00 00 3E 63 
39370 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
39374 1f6 3E 00 00 00 
39378 1f7 00 00 00 08 
3937c 1f8 0C 0C 3F 0C 
39380 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
39384 1fa 38 00 00 00 
39388 1fb 00 00 00 00 
3938c 1fc 00 00 33 33 
39390 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
39394 1fe 6E 00 00 00 
39398 1ff 00 00 00 00 
3939c 200 00 00 63 63 
393a0 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
393a4 202 1C 00 00 00 
393a8 203 00 00 00 00 
393ac 204 00 00 63 63 
393b0 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
393b4 206 36 00 00 00 
393b8 207 00 00 00 00 
393bc 208 00 00 63 36 
393c0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
393c4 20a 63 00 00 00 
393c8 20b 00 00 00 00 
393cc 20c 00 00 63 63 
393d0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
393d4 20e 7E 60 30 1F 
393d8 20f 00 00 00 00 
393dc 210 00 00 7F 33 
393e0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
393e4 212 7F 00 00 00 
393e8 213 00 00 00 70 
393ec 214 18 18 18 0E 
393f0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
393f4 216 70 00 00 00 
393f8 217 00 00 00 18 
393fc 218 18 18 18 18 
39400 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
39404 21a 18 00 00 00 
39408 21b 00 00 00 0E 
3940c 21c 18 18 18 70 
39410 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
39414 21e 0E 00 00 00 
39418 21f 6E 3B 00 00 
3941c 220 00 00 00 00 
39420 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39424 222 00 00 00 00 
39428 223 00 00 00 00 
3942c 224 00 00       | 	byte	$00[10]
3942e 224 08 1C 36 63 
39432 225 63 63 7F 00 
39436 226 00 00 00 00 
3943a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3943e 228 03 03 03 03 
39442 229 43 66 3C 18 
39446 22a 30 1E 00 00 
3944a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3944e 22c 33 33 33 33 
39452 22d 33 33       | 	byte	$33[6]
39454 22e 6E 00 00 00 
39458 22f 00 00 60 30 
3945c 230 18 00 3E 63 
39460 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
39464 232 3E 00 00 00 
39468 233 00 00 08 1C 
3946c 234 36 00 1E 30 
39470 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
39474 236 6E 00 00 00 
39478 237 00 00 00 00 
3947c 238 33 00 1E 30 
39480 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
39484 23a 6E 00 00 00 
39488 23b 00 00 1C 36 
3948c 23c 1C 00 33 33 
39490 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
39494 23e 6E 00 00 00 
39498 23f 00 00 60 30 
3949c 240 18 00 3E 63 
394a0 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
394a4 242 3E 00 00 00 
394a8 243 00 00 00 00 
394ac 244 00 00 3E 63 
394b0 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
394b4 246 3E 18 30 1E 
394b8 247 00 00 00 1C 
394bc 248 58 78 38 18 
394c0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
394c4 24a 3C 00 00 00 
394c8 24b 00 00 00 00 
394cc 24c 63 00 3E 63 
394d0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
394d4 24e 3E 00 00 00 
394d8 24f 66 33 00 3E 
394dc 250 63 63 63 63 
394e0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
394e4 252 3E 00 00 00 
394e8 253 00 00 CC 66 
394ec 254 33 00 3E 63 
394f0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
394f4 256 3E 00 00 00 
394f8 257 00 00 18 3C 
394fc 258 66 00 1C 18 
39500 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
39504 25a 3C 00 00 00 
39508 25b 30 18 00 7F 
3950c 25c 63 61 30 18 
39510 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
39514 25e 7F 00 00 00 
39518 25f 00 63 00 08 
3951c 260 1C 36 63 63 
39520 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
39524 262 63 00 00 00 
39528 263 30 18 00 3C 
3952c 264 66 43 03 03 
39530 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
39534 266 3C 00 00 00 
39538 267 30 18 00 7F 
3953c 268 66 46 16 1E 
39540 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
39544 26a 7F 00 00 00 
39548 26b 0C 06 00 0F 
3954c 26c 06 06 06 06 
39550 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
39554 26e 7F 00 00 00 
39558 26f 30 18 00 1C 
3955c 270 18 18 18 18 
39560 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
39564 272 3C 00 00 00 
39568 273 00 00 08 1C 
3956c 274 36 00 3E 63 
39570 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
39574 276 3E 00 00 00 
39578 277 00 00 00 00 
3957c 278 63 00 3E 63 
39580 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
39584 27a 3E 00 00 00 
39588 27b 00 00 00 6F 
3958c 27c 46 26 06 06 
39590 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
39594 27e 7F 00 00 00 
39598 27f 00 00 00 6E 
3959c 280 4C 2C 0C 0C 
395a0 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
395a4 282 1E 00 00 00 
395a8 283 30 18 00 3E 
395ac 284 63 63 06 1C 
395b0 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
395b4 286 3E 00 00 00 
395b8 287 00 00 60 30 
395bc 288 18 00 3E 63 
395c0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
395c4 28a 3E 00 00 00 
395c8 28b 00 63 00 3E 
395cc 28c 63 63 63 63 
395d0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
395d4 28e 3E 00 00 00 
395d8 28f 00 63 00 63 
395dc 290 63 63 63 63 
395e0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
395e4 292 3E 00 00 00 
395e8 293 6C 38 00 7E 
395ec 294 7E 5A 18 18 
395f0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
395f4 296 3C 00 00 00 
395f8 297 00 00 60 48 
395fc 298 2C 0C 3F 0C 
39600 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
39604 29a 38 00 00 00 
39608 29b 00 00 00 0F 
3960c 29c 26 36 1E 0E 
39610 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
39614 29e 7F 00 00 00 
39618 29f 00 00 00 00 
3961c 2a0 00 63 36 1C 
39620 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
39624 2a2 00 00 00 00 
39628 2a3 00 00       | 	byte	$00[6]
3962a 2a3 36 1C 08 00 
3962e 2a4 3E 63 03 03 
39632 2a5 03 63 3E 00 
39636 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3963a 2a7 30 18 0C 00 
3963e 2a8 1E 30 3E 33 
39642 2a9 33 33 6E 00 
39646 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3964a 2ab 60 30 18 00 
3964e 2ac 1C 18 18 18 
39652 2ad 18 18 3C 00 
39656 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3965a 2af 60 30 18 00 
3965e 2b0 3E 63 63 63 
39662 2b1 63 63 3E 00 
39666 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3966a 2b3 30 18 0C 00 
3966e 2b4 33 33 33 33 
39672 2b5 33 33 6E 00 
39676 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3967a 2b7 00 08 1C 36 
3967e 2b8 63 63 7F 63 
39682 2b9 63 63 63 18 
39686 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3968a 2bb 00 00 00 00 
3968e 2bc 1E 30 3E 33 
39692 2bd 33 33 6E 18 
39696 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3969a 2bf 00 7F 63 61 
3969e 2c0 30 18 0C 06 
396a2 2c1 43 63 7F 00 
396a6 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
396aa 2c3 36 1C 08 00 
396ae 2c4 7F 33 18 0C 
396b2 2c5 06 63 7F 00 
396b6 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
396ba 2c7 00 7F 66 46 
396be 2c8 16 1E 16 06 
396c2 2c9 46 66 7F 18 
396c6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
396ca 2cb 00 00 00 00 
396ce 2cc 3E 63 7F 03 
396d2 2cd 03 63 3E 18 
396d6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
396da 2cf 00 3C 66 03 
396de 2d0 1F 03 0F 03 
396e2 2d1 03 66 3C 00 
396e6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
396ea 2d3 60 30 18 00 
396ee 2d4 7F 33 18 0C 
396f2 2d5 06 63 7F 00 
396f6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
396fa 2d7 00 3C 66 43 
396fe 2d8 03 03 03 03 
39702 2d9 43 66 3C 00 
39706 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3970a 2db 00 00 00 00 
3970e 2dc 3E 63 06 1C 
39712 2dd 30 63 3E 18 
39716 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3971a 2df 00 00 00 00 
3971e 2e0 00 00       | 	byte	$00[6]
39720 2e1 6C 36 1B 36 
39724 2e2 6C 00 00 00 
39728 2e3 00 00 00 00 
3972c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39730 2e5 1B 36 6C 36 
39734 2e6 1B 00 00 00 
39738 2e7 88 22 88 22 
3973c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
39740 2e9 88 22 88 22 
39744 2ea 88 22 88 22 
39748 2eb AA 55 AA 55 
3974c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
39750 2ed AA 55 AA 55 
39754 2ee AA 55 AA 55 
39758 2ef BB EE BB EE 
3975c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
39760 2f1 BB EE BB EE 
39764 2f2 BB EE BB EE 
39768 2f3 18 18 18 18 
3976c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
39770 2f5 18 18 18 18 
39774 2f6 18 18 18 18 
39778 2f7 18 18 18 18 
3977c 2f8 18 18 18    | 	byte	$18[15]
3977f 2f8 1F 18 18 18 
39783 2f9 18 18 18 18 
39787 2fa 18 30 18 00 
3978b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3978f 2fc 63 7F 63 63 
39793 2fd 63 63 00 00 
39797 2fe 00 1C 36 00 
3979b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3979f 300 63 7F 63 63 
397a3 301 63 63 00 00 
397a7 302 00 36 1C 00 
397ab 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
397af 304 1E 16 06 46 
397b3 305 66 7F 00 00 
397b7 306 00 00 00 00 
397bb 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
397bf 308 1C 30 60 63 
397c3 309 63 3E 18 30 
397c7 30a 1E 6C 6C 6C 
397cb 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
397cf 30c 6F 6C 6C 6C 
397d3 30d 6C 6C 6C 6C 
397d7 30e 6C 6C 6C 6C 
397db 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
397df 310 6C 6C 6C 6C 
397e3 311 6C 6C 6C 6C 
397e7 312 6C          | 	byte	$6c[9]
397e8 313 00 00 00 00 
397ec 314 00          | 	byte	$00[5]
397ed 314 7F 60 6F 6C 
397f1 315 6C 6C 6C 6C 
397f5 316 6C 6C 6C 6C 
397f9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
397fd 318 6F 60 7F 00 
39801 319 00 00 00 00 
39805 31a 00 00 00 18 
39809 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3980d 31c 61 30 18 0C 
39811 31d 06 43 63 7F 
39815 31e 00 00 00 00 
39819 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3981d 320 00 7F 33 18 
39821 321 0C 06 63 7F 
39825 322 00 00 00 00 
39829 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3982d 324 00 00 1F 18 
39831 325 18 18 18 18 
39835 326 18 18 18 18 
39839 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3983d 328 18 18 F8 00 
39841 329 00 00 00 00 
39845 32a 00 00 00 18 
39849 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3984d 32c 18 18 FF 00 
39851 32d 00 00 00 00 
39855 32e 00 00 00 00 
39859 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3985d 330 00 00 FF 18 
39861 331 18 18 18 18 
39865 332 18 18 18 18 
39869 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3986d 334 18 18 F8 18 
39871 335 18 18 18 18 
39875 336 18 18 18 00 
39879 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3987d 338 00 00 FF 00 
39881 339 00 00 00 00 
39885 33a 00 00 00 18 
39889 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3988d 33c 18 18 FF 18 
39891 33d 18 18 18 18 
39895 33e 18 18 18 63 
39899 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3989d 340 36 63 63 7F 
398a1 341 63 63 63 63 
398a5 342 00 00 00 00 
398a9 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
398ad 344 00 1E 30 3E 
398b1 345 33 33 33 6E 
398b5 346 00 00 00 6C 
398b9 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
398bd 348 EC 0C FC 00 
398c1 349 00 00 00 00 
398c5 34a 00 00 00 00 
398c9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398cd 34c FC 0C EC 6C 
398d1 34d 6C 6C 6C 6C 
398d5 34e 6C 6C 6C 6C 
398d9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
398dd 350 EF 00 FF 00 
398e1 351 00 00 00 00 
398e5 352 00 00 00 00 
398e9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398ed 354 FF 00 EF 6C 
398f1 355 6C 6C 6C 6C 
398f5 356 6C 6C 6C 6C 
398f9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
398fd 358 EC 0C EC 6C 
39901 359 6C 6C 6C 6C 
39905 35a 6C 6C 6C 00 
39909 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3990d 35c FF 00 FF 00 
39911 35d 00 00 00 00 
39915 35e 00 00 00 6C 
39919 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3991d 360 EF 00 EF 6C 
39921 361 6C 6C 6C 6C 
39925 362 6C 6C 6C 00 
39929 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3992d 364 63 3E 63 63 
39931 365 63 63 3E 63 
39935 366 00 00 00 00 
39939 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3993d 368 30 3C 36 33 
39941 369 33 33 33 6E 
39945 36a 00 00 00 00 
39949 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3994d 36c 66 66 6F 66 
39951 36d 66 66 36 1F 
39955 36e 00 00 00 36 
39959 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3995d 370 66 66 66 66 
39961 371 66 66       | 	byte	$66[6]
39963 371 36 1F 00 00 
39967 372 00 00 63 00 
3996b 373 7F 66 46 16 
3996f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
39973 375 66 7F 00 00 
39977 376 00 6C 38 00 
3997b 377 38 30 30 3C 
3997f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
39983 379 33 6E 00 00 
39987 37a 00 36 1C 00 
3998b 37b 63 67 6F 7F 
3998f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
39993 37d 63 63 00 00 
39997 37e 00 30 18 00 
3999b 37f 3C 18 18 18 
3999f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
399a3 381 18 3C 00 00 
399a7 382 00 3C 66 00 
399ab 383 3C 18 18 18 
399af 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
399b3 385 18 3C 00 00 
399b7 386 00 00 00 36 
399bb 387 1C 08 00 3E 
399bf 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
399c3 389 63 3E 00 00 
399c7 38a 00 18 18 18 
399cb 38b 18 18 18 18 
399cf 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
399d3 38d 00 00 00 00 
399d7 38e 00 00 00 00 
399db 38f 00 00 00 00 | 	byte	$00[12]
399df 390 F8 18 18 18 
399e3 391 18 18 18 18 
399e7 392 18 FF FF FF 
399eb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
399ef 394 FF FF FF FF 
399f3 395 FF FF FF FF 
399f7 396 FF          | 	byte	$ff[9]
399f8 397 00 00 00 00 
399fc 398 00 00 00    | 	byte	$00[7]
399ff 398 FF FF FF FF 
39a03 399 FF FF FF FF 
39a07 39a FF          | 	byte	$ff[9]
39a08 39b 00 00 00 7E 
39a0c 39c 7E 5A 18 18 
39a10 39d 18 18 18 18 
39a14 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
39a18 39f 1C 36 1C 63 
39a1c 3a0 63 63 63 63 
39a20 3a1 63 63 63 63 
39a24 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39a28 3a3 FF FF FF FF 
39a2c 3a4 FF FF FF    | 	byte	$ff[7]
39a2f 3a4 00 00 00 00 
39a33 3a5 00 00 00 00 
39a37 3a6 00          | 	byte	$00[9]
39a38 3a7 30 18 00 3E 
39a3c 3a8 63 63 63 63 
39a40 3a9 63 63 63 63 
39a44 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39a48 3ab 00 00 00 1E 
39a4c 3ac 33 33 33 1B 
39a50 3ad 33 63 63 63 
39a54 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
39a58 3af 1C 36 00 3E 
39a5c 3b0 63 63 63 63 
39a60 3b1 63 63 63 63 
39a64 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39a68 3b3 30 18 00 63 
39a6c 3b4 67 6F 7F 7B 
39a70 3b5 73 63 63 63 
39a74 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
39a78 3b7 00 00 60 30 
39a7c 3b8 18 00 3B 66 
39a80 3b9 66 66 66 66 
39a84 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
39a88 3bb 00 00 36 1C 
39a8c 3bc 08 00 3B 66 
39a90 3bd 66 66 66 66 
39a94 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
39a98 3bf 36 1C 00 3E 
39a9c 3c0 63 63 06 1C 
39aa0 3c1 30 60 63 63 
39aa4 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
39aa8 3c3 00 00 36 1C 
39aac 3c4 08 00 3E 63 
39ab0 3c5 06 1C 30 63 
39ab4 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
39ab8 3c7 30 18 00 3F 
39abc 3c8 66 66 66 3E 
39ac0 3c9 36 66 66 66 
39ac4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
39ac8 3cb 30 18 00 63 
39acc 3cc 63 63 63 63 
39ad0 3cd 63 63 63 63 
39ad4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39ad8 3cf 00 00 60 30 
39adc 3d0 18 00 3B 6E 
39ae0 3d1 66 06 06 06 
39ae4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
39ae8 3d3 66 33 00 63 
39aec 3d4 63 63 63 63 
39af0 3d5 63 63 63 63 
39af4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
39af8 3d7 00 00 60 30 
39afc 3d8 18 00 63 63 
39b00 3d9 63 63 63 63 
39b04 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
39b08 3db 30 18 00 66 
39b0c 3dc 66 66 66 3C 
39b10 3dd 18 18 18 18 
39b14 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
39b18 3df 00 00 00 08 
39b1c 3e0 0C 0C 3F 0C 
39b20 3e1 0C 0C 0C 6C 
39b24 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
39b28 3e3 30 18 00 00 
39b2c 3e4 00 00 00 00 
39b30 3e5 00 00 00 00 
39b34 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b38 3e7 00 00 00 00 
39b3c 3e8 00 00 00 00 | 	byte	$00[8]
39b40 3e9 7F 00 00 00 
39b44 3ea 00 00 00 00 
39b48 3eb 66 33 00 00 
39b4c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
39b50 3ed 00 00 00 00 
39b54 3ee 00 00 00 00 
39b58 3ef 00 00 00 00 
39b5c 3f0 00 00 00 00 
39b60 3f1 00 00 00 00 
39b64 3f2 00          | 	byte	$00[21]
39b65 3f2 0C 06 3C 36 
39b69 3f3 1C 00 00 00 
39b6d 3f4 00 00 00 00 
39b71 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b75 3f6 00 00 00 63 
39b79 3f7 3E 00 00 00 
39b7d 3f8 00 00 00 00 
39b81 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39b85 3fa 00 00 00 00 
39b89 3fb 3E 63 06 1C 
39b8d 3fc 36 63 63 36 
39b91 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
39b95 3fe 00 00 00 00 
39b99 3ff 00 00 00 00 | 	byte	$00[8]
39b9d 400 18 00 7E 00 
39ba1 401 18 00 00 00 
39ba5 402 00 00 00 00 
39ba9 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39bad 404 00 00 00 00 
39bb1 405 00 00 00 00 | 	byte	$00[8]
39bb5 406 18 30 1E 00 
39bb9 407 00 00 1C 36 
39bbd 408 36 1C 00 00 
39bc1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
39bc5 40a 00 00 00 00 
39bc9 40b 63 00 00 00 
39bcd 40c 00 00 00 00 
39bd1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39bd5 40e 00 00 00 18 
39bd9 40f 18 00 00 00 
39bdd 410 00 00 00 00 
39be1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39be5 412 00 00 00 00 
39be9 413 00          | 	byte	$00[5]
39bea 413 CC 66 33 00 
39bee 414 33 33 33 33 
39bf2 415 33 33 6E 00 
39bf6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
39bfa 417 00 3F 66 66 
39bfe 418 66 3E 36 66 
39c02 419 66 66 6F 00 
39c06 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
39c0a 41b 36 1C 08 00 
39c0e 41c 3B 6E 66 06 
39c12 41d 06 06 0F 00 
39c16 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
39c1a 41f 00 00 00 7E 
39c1e 420 7E 7E 7E 7E 
39c22 421 7E 7E 00 00 
39c26 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
39c2a 423 00 00 00 00 
39c2e 424 00 00 00 00 
39c32 425 00 00 00 00 
39c36 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39c38 427             | 'vga_font       file "vgafont.def"
39c38 427 00 00 00 00 
      ...             
39c68 433 00 00 00 00 
39c6c 434 00 00 00    | st_font        file "st4font.def"
39c6f 434 FF FF 00 00 
39c73 435 00 00 00 00 
39c77 436 00 18 18 18 
39c7b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39c7f 438 18 18 18 18 
39c83 439 18 18 18 18 
39c87 43a 18          | 	byte	$18[9]
39c88 43b 00 00 00 00 
39c8c 43c 00 00 00    | 	byte	$00[7]
39c8f 43c FF FF 18 18 
39c93 43d 18 18 18 18 
39c97 43e 18 18 18 18 
39c9b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39c9f 440 FF FF 00 00 
39ca3 441 00 00 00 00 
39ca7 442 00 18 18 18 
39cab 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39caf 444 1F 1F 18 18 
39cb3 445 18 18 18 18 
39cb7 446 18 18 18 18 
39cbb 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39cbf 448 F8 F8 18 18 
39cc3 449 18 18 18 18 
39cc7 44a 18 00 00 00 
39ccb 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39ccf 44c 1F 1F 18 18 
39cd3 44d 18 18 18 18 
39cd7 44e 18 00 00 00 
39cdb 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39cdf 450 F8 F8 18 18 
39ce3 451 18 18 18 18 
39ce7 452 18 18 18 18 
39ceb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39cef 454 1F 1F 00 00 
39cf3 455 00 00 00 00 
39cf7 456 00 18 18 18 
39cfb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39cff 458 F8 F8 00 00 
39d03 459 00 00 00 00 
39d07 45a 00 18 18 18 
39d0b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39d0f 45c FF FF 18 18 
39d13 45d 18 18 18 18 
39d17 45e 18 00 00 18 
39d1b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
39d1f 460 66 7E 7E 66 
39d23 461 66 66 66 30 
39d27 462 18 00 00 7E 
39d2b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
39d2f 464 3E 06 06 06 
39d33 465 06 7E 7E 18 
39d37 466 0C 30 18 3C 
39d3b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
39d3f 468 06 06 06 66 
39d43 469 66 7E 3C 00 
39d47 46a 00 30 18 66 
39d4b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
39d4f 46c 7E 7E 76 76 
39d53 46d 66 66 66 00 
39d57 46e 00 30 18 7C 
39d5b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
39d5f 470 1C 38 70 60 
39d63 471 60 7E 3E 00 
39d67 472 00 30 18 7E 
39d6b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
39d6f 474 18 0C 0C 06 
39d73 475 06 7E 7E 00 
39d77 476 00 18 18 00 
39d7b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
39d7f 478 18 18 0C 0C 
39d83 479 06 7E 7E 00 
39d87 47a 00 30 18 3C 
39d8b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
39d8f 47c 66 66 66 66 
39d93 47d 66          | 	byte	$66[5]
39d94 47e 7E 3C 00 00 
39d98 47f 00 00 06 06 
39d9c 480 06 06 16 1E 
39da0 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
39da4 482 7E 7E 00 00 
39da8 483 00 00 00 00 
39dac 484 00 3C 7C 60 
39db0 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
39db4 486 7E 7C 30 18 
39db8 487 00 00 00 00 
39dbc 488 00 3C 7E 66 
39dc0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
39dc4 48a 7E 7C 18 0C 
39dc8 48b 00 00 30 18 
39dcc 48c 00 3C 3E 06 
39dd0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
39dd4 48e 7E 7C 00 00 
39dd8 48f 00 00 30 18 
39ddc 490 00 3E 7E 66 
39de0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
39de4 492 66 66 00 00 
39de8 493 00 00 30 18 
39dec 494 00 7C 7E 06 
39df0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
39df4 496 7E 3E 00 00 
39df8 497 00 00 30 18 
39dfc 498 00 7E 7E 30 
39e00 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
39e04 49a 7E 7E 00 00 
39e08 49b 00 00 18 18 
39e0c 49c 00 7E 7E 30 
39e10 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
39e14 49e 7E 7E 00 00 
39e18 49f 00 00 30 18 
39e1c 4a0 00 3C 7E 66 
39e20 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
39e24 4a2 7E 3C 00 00 
39e28 4a3 00 00 1C 1C 
39e2c 4a4 18 18 38 3C 
39e30 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
39e34 4a6 3C 3C 00 00 
39e38 4a7 00 00 00 00 
39e3c 4a8 00 00 00 00 
39e40 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39e44 4aa 00 00 00 00 
39e48 4ab 00 00       | 	byte	$00[6]
39e4a 4ab 18 18 18 18 
39e4e 4ac 18 18 18 18 | 	byte	$18[8]
39e52 4ad 00 00 18 18 
39e56 4ae 00 00 00 00 
39e5a 4af 66 66 66 66 
39e5e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
39e62 4b1 00 00 00 00 
39e66 4b2 00 00 00 00 
39e6a 4b3 00          | 	byte	$00[9]
39e6b 4b3 66 66 FF FF 
39e6f 4b4 66 66 FF FF 
39e73 4b5 66 66 00 00 
39e77 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
39e7b 4b7 7C 7E 06 06 
39e7f 4b8 3E 7C 60 60 
39e83 4b9 7E 3E 18 18 
39e87 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
39e8b 4bb 66 30 30 18 
39e8f 4bc 18 0C 0C 66 
39e93 4bd 66 00 00 00 
39e97 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
39e9b 4bf 66 66 3C 1C 
39e9f 4c0 1C FC FE 66 
39ea3 4c1 66 FE FC 00 
39ea7 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
39eab 4c3 18 18 18 18 
39eaf 4c4 00 00 00 00 
39eb3 4c5 00 00 00 00 
39eb7 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
39ebb 4c7 18 1C 0C 0C 
39ebf 4c8 0C 0C 0C 0C 
39ec3 4c9 1C 18 30 00 
39ec7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
39ecb 4cb 18 38 30 30 
39ecf 4cc 30 30 30 30 
39ed3 4cd 38 18 0C 00 
39ed7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
39edb 4cf 66 66 3C 3C 
39edf 4d0 FF FF 3C 3C 
39ee3 4d1 66 66 00 00 
39ee7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
39eeb 4d3 00 18 18 18 
39eef 4d4 7E 7E 18 18 
39ef3 4d5 18 00 00 00 
39ef7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
39efb 4d7 00 00 00 00 
39eff 4d8 00 00       | 	byte	$00[6]
39f01 4d9 18 18 18 18 
39f05 4da 18          | 	byte	$18[5]
39f06 4da 0C 04 00 00 
39f0a 4db 00 00 00 00 
39f0e 4dc 7E 7E 00 00 
39f12 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
39f16 4de 00 00 00 00 
39f1a 4df 00 00 00 00 
39f1e 4e0 00 00 00 00 
39f22 4e1 00          | 	byte	$00[13]
39f23 4e1 18 18 18 00 
39f27 4e2 00 00 00 60 
39f2b 4e3 60 60 30 30 
39f2f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
39f33 4e5 06 06 06 00 
39f37 4e6 00 00 00 3C 
39f3b 4e7 7E 66 66 66 
39f3f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
39f43 4e9 66 7E 3C 00 
39f47 4ea 00 00 00 18 
39f4b 4eb 18 1C 1C 18 
39f4f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
39f53 4ed 18 7E 7E 00 
39f57 4ee 00 00 00 3C 
39f5b 4ef 7E 66 66 30 
39f5f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
39f63 4f1 0C 7E 7E 00 
39f67 4f2 00 00 00 7E 
39f6b 4f3 7E 30 30 18 
39f6f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
39f73 4f5 66 7E 3C 00 
39f77 4f6 00 00 00 30 
39f7b 4f7 30 38 38 3C 
39f7f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
39f83 4f9 7E 30 30 00 
39f87 4fa 00 00 00 7E 
39f8b 4fb 7E 06 06 3E 
39f8f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
39f93 4fd 66 7E 3C 00 
39f97 4fe 00 00 00 38 
39f9b 4ff 3C 0E 06 06 
39f9f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
39fa3 501 66 7E 3C 00 
39fa7 502 00 00 00 7E 
39fab 503 7E 60 60 30 
39faf 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
39fb3 505 0C 0C 0C 00 
39fb7 506 00 00 00 3C 
39fbb 507 7E 66 66 3C 
39fbf 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
39fc3 509 66 7E 3C 00 
39fc7 50a 00 00 00 3C 
39fcb 50b 7E 66 66 7E 
39fcf 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
39fd3 50d 70 3C 1C 00 
39fd7 50e 00 00 00 00 
39fdb 50f 00 00 18 18 
39fdf 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
39fe3 511 18 18 18 00 
39fe7 512 00 00 00 00 
39feb 513 00 00 18 18 
39fef 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
39ff3 515 18 18 18 0C 
39ff7 516 04 00 00 00 
39ffb 517 70 38 1C 0E 
39fff 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3a003 519 70 00 00 00 
3a007 51a 00 00 00 00 
3a00b 51b 00 00 7E 7E 
3a00f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3a013 51d 00 00 00 00 
3a017 51e 00 00 00 00 | 	byte	$00[8]
3a01b 51f 0E 1C 38 70 
3a01f 520 E0 70 38 1C 
3a023 521 0E 00 00 00 
3a027 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3a02b 523 7E 66 66 30 
3a02f 524 30 18 18 18 
3a033 525 00 18 18 00 
3a037 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3a03b 527 7E 66 66 66 
3a03f 528 66 36 06 66 
3a043 529 66 7E 3C 00 
3a047 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3a04b 52b 3C 7E 66 66 
3a04f 52c 66 7E 7E 66 
3a053 52d 66 66 66 00 
3a057 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3a05b 52f 7E 66 66 7E 
3a05f 530 3E 66 66 66 
3a063 531 66 7E 3E 00 
3a067 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3a06b 533 7E 66 66 06 
3a06f 534 06 06 06 66 
3a073 535 66 7E 3C 00 
3a077 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3a07b 537 7E 66 66 66 
3a07f 538 66 66 66 66 
3a083 539 66 7E 3E 00 
3a087 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3a08b 53b 7E 06 06 3E 
3a08f 53c 3E 06 06 06 
3a093 53d 06 7E 7E 00 
3a097 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3a09b 53f 7E 06 06 3E 
3a09f 540 3E 06 06 06 
3a0a3 541 06 06 06 00 
3a0a7 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3a0ab 543 7E 06 06 76 
3a0af 544 76 66 66 66 
3a0b3 545 66 7E 3C 00 
3a0b7 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3a0bb 547 66 66 66 7E 
3a0bf 548 7E 66 66 66 
3a0c3 549 66 66 66 00 
3a0c7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3a0cb 54b 7E 18 18 18 
3a0cf 54c 18 18 18 18 
3a0d3 54d 18 7E 7E 00 
3a0d7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3a0db 54f 60 60 60 60 
3a0df 550 60 60 60    | 	byte	$60[7]
3a0e2 551 66 66 7E 3C 
3a0e6 552 00 00 00 00 
3a0ea 553 66 66 36 36 
3a0ee 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3a0f2 555 66 66 C6 C6 
3a0f6 556 00 00 00 00 
3a0fa 557 06 06 06 06 
3a0fe 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3a102 559 06 06 7E 7E 
3a106 55a 00 00 00 00 
3a10a 55b C6 C6 EE EE 
3a10e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3a112 55d C6 C6 C6 C6 
3a116 55e 00 00 00 00 
3a11a 55f 66 66 66 6E 
3a11e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3a122 561 76 66 66 66 
3a126 562 00 00 00 00 
3a12a 563 3C 7E 66 66 
3a12e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3a132 565 66 66 7E 3C 
3a136 566 00 00 00 00 
3a13a 567 3E 7E 66 66 
3a13e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3a142 569 06 06 06 06 
3a146 56a 00 00 00 00 
3a14a 56b 3C 7E 66 66 
3a14e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3a152 56d 66 56 3E 6C 
3a156 56e 00 00 00 00 
3a15a 56f 3E 7E 66 66 
3a15e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3a162 571 66 66 C6 C6 
3a166 572 00 00 00 00 
3a16a 573 7C 7E 06 06 
3a16e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3a172 575 60 60 7E 3E 
3a176 576 00 00 00 00 
3a17a 577 7E 7E 18 18 
3a17e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3a182 579 18 18 18 18 
3a186 57a 00 00 00 00 
3a18a 57b 66 66 66 66 
3a18e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3a192 57d 66 66 7E 3C 
3a196 57e 00 00 00 00 
3a19a 57f 66 66 66 66 
3a19e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3a1a2 581 3C 3C 18 18 
3a1a6 582 00 00 00 00 
3a1aa 583 C6 C6 C6 C6 
3a1ae 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3a1b2 585 FE EE C6 82 
3a1b6 586 00 00 00 00 
3a1ba 587 66 66 66 3C 
3a1be 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3a1c2 589 3C 66 66 66 
3a1c6 58a 00 00 00 00 
3a1ca 58b 66 66 66 66 
3a1ce 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3a1d2 58d 18 18 18 18 
3a1d6 58e 00 00 00 00 
3a1da 58f 7E 7E 30 30 
3a1de 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3a1e2 591 06 06 7E 7E 
3a1e6 592 00 00 00 00 
3a1ea 593 3C 3C 0C 0C 
3a1ee 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3a1f2 595 0C 0C 3C 3C 
3a1f6 596 00 00 00 00 
3a1fa 597 06 06 0C 0C 
3a1fe 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3a202 599 60 60 C0 C0 
3a206 59a 00 00 00 00 
3a20a 59b 3C 3C 30 30 
3a20e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3a212 59d 30 30 3C 3C 
3a216 59e 00 00 00 00 
3a21a 59f 18 18 3C 3C 
3a21e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3a222 5a1 00 00 00 00 
3a226 5a2 00 00 00 00 
3a22a 5a3 00 00 00 00 
3a22e 5a4 00 00 00 00 
3a232 5a5 00 00       | 	byte	$00[18]
3a234 5a6 FE FE 00 00 
3a238 5a7 00 00 0C 0C 
3a23c 5a8 18 18 00 00 
3a240 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3a244 5aa 00 00 00 00 
3a248 5ab 00 00 00 00 
3a24c 5ac 00          | 	byte	$00[9]
3a24d 5ac 3C 7C 60 7C 
3a251 5ad 7E 66 66 7E 
3a255 5ae 7C 00 00 00 
3a259 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3a25d 5b0 3E 7E 66 66 
3a261 5b1 66 66 66 7E 
3a265 5b2 3E 00 00 00 
3a269 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3a26d 5b4 3C 3E 06 06 
3a271 5b5 06 06 06 7E 
3a275 5b6 7C 00 00 00 
3a279 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3a27d 5b8 7C 7E 66 66 
3a281 5b9 66 66 66 7E 
3a285 5ba 7C 00 00 00 
3a289 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3a28d 5bc 3C 7E 66 66 
3a291 5bd 7E 06 06 7E 
3a295 5be 7C 00 00 00 
3a299 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3a29d 5c0 18 7E 7E 18 
3a2a1 5c1 18 18 18 18 
3a2a5 5c2 18 00 00 00 
3a2a9 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a2ad 5c4 7C 7E 66 66 
3a2b1 5c5 66 66 7E 7C 
3a2b5 5c6 60 7E 3E 00 
3a2b9 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3a2bd 5c8 3E 7E 66 66 
3a2c1 5c9 66 66 66 66 
3a2c5 5ca 66 00 00 00 
3a2c9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3a2cd 5cc 1C 1C 18 18 
3a2d1 5cd 18 18 18 3C 
3a2d5 5ce 3C 00 00 00 
3a2d9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3a2dd 5d0 30 30 30 30 
3a2e1 5d1 30 30 30 30 
3a2e5 5d2 30          | 	byte	$30[9]
3a2e6 5d2 3E 1E 00 00 
3a2ea 5d3 06 06 06 36 
3a2ee 5d4 36 1E 1E 1E 
3a2f2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3a2f6 5d6 00 00 00 00 
3a2fa 5d7 1C 1C 18 18 
3a2fe 5d8 18 18 18 18 
3a302 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3a306 5da 00 00 00 00 
3a30a 5db 00 00 00    | 	byte	$00[7]
3a30d 5dc 6C FE FE D6 
3a311 5dd D6 C6 C6 C6 
3a315 5de C6 00 00 00 
3a319 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3a31d 5e0 3E 7E 66 66 
3a321 5e1 66 66 66 66 
3a325 5e2 66 00 00 00 
3a329 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3a32d 5e4 3C 7E 66 66 
3a331 5e5 66 66 66 7E 
3a335 5e6 3C 00 00 00 
3a339 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3a33d 5e8 3E 7E 66 66 
3a341 5e9 66 66 66 7E 
3a345 5ea 3E 06 06 00 
3a349 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3a34d 5ec 7C 7E 66 66 
3a351 5ed 66 66 66 7E 
3a355 5ee 7C 60 60 00 
3a359 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3a35d 5f0 3E 7E 66 06 
3a361 5f1 06 06 06 06 
3a365 5f2 06 00 00 00 
3a369 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3a36d 5f4 7C 7E 06 0E 
3a371 5f5 3C 70 60 7E 
3a375 5f6 3E 00 00 00 
3a379 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3a37d 5f8 7E 7E 18 18 
3a381 5f9 18 18 18 78 
3a385 5fa 70 00 00 00 
3a389 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3a38d 5fc 66 66 66 66 
3a391 5fd 66 66 66    | 	byte	$66[7]
3a394 5fe 7E 7C 00 00 
3a398 5ff 00 00 00 00 
3a39c 600 00 66 66 66 
3a3a0 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3a3a4 602 18 18 00 00 
3a3a8 603 00 00 00 00 
3a3ac 604 00 C6 C6 D6 
3a3b0 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3a3b4 606 C6 82 00 00 
3a3b8 607 00 00 00 00 
3a3bc 608 00 66 66 3C 
3a3c0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3a3c4 60a 66 66 00 00 
3a3c8 60b 00 00 00 00 
3a3cc 60c 00 66 66 66 
3a3d0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3a3d4 60e 7C 60 7E 3E 
3a3d8 60f 00 00 00 00 
3a3dc 610 00 7E 7E 30 
3a3e0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3a3e4 612 7E 7E 00 00 
3a3e8 613 00 00 30 18 
3a3ec 614 18 18 18 0C 
3a3f0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3a3f4 616 18 30 00 00 
3a3f8 617 00 00 18 18 
3a3fc 618 18 18 18 18 
3a400 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a404 61a 18 18 00 00 
3a408 61b 00 00 0C 18 
3a40c 61c 18 18 18 30 
3a410 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3a414 61e 18 0C 00 00 
3a418 61f 00 00 6C 7E 
3a41c 620 36 00 00 00 
3a420 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3a424 622 00 00 00 00 
3a428 623 00 00 00 00 
3a42c 624 00          | 	byte	$00[9]
3a42d 624 18 18 18 18 
3a431 625 18 18 00 00 
3a435 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3a438 627             | 'amiga_font     file "amigafont.def"
3a438 627 00 6C FE FE 
3a43c 628 7C 38 10 00 
3a440 629 18 18 18 F8 
3a444 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3a448 62b C0 C0 C0 C0 
3a44c 62c C0 C0 C0 C0 | 	byte	$c0[8]
3a450 62d 18 18 18 1F 
3a454 62e 1F 00 00 00 
3a458 62f 18 18 18 1F 
3a45c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3a460 631 00 00 00 1F 
3a464 632 1F 18 18 18 
3a468 633 C0 E0 70 38 
3a46c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3a470 635 03 07 0E 1C 
3a474 636 38 70 E0 C0 
3a478 637 80 C0 E0 F0 
3a47c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3a480 639 00 00 00 00 
3a484 63a F0 F0 F0 F0 
3a488 63b 01 03 07 0F 
3a48c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3a490 63d F0 F0 F0 F0 
3a494 63e 00 00 00 00 
3a498 63f 0F 0F 0F 0F 
3a49c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3a4a0 641 FF FF 00 00 
3a4a4 642 00 00 00 00 
3a4a8 643 00 00 00 00 
3a4ac 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3a4b0 645 00 00 00 00 
3a4b4 646 0F 0F 0F 0F 
3a4b8 647 00 38 38 EE 
3a4bc 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3a4c0 649 00 00 00 F8 
3a4c4 64a F8 18 18 18 
3a4c8 64b 00 00 00 FF 
3a4cc 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3a4d0 64d 18 18 18 FF 
3a4d4 64e FF 18 18 18 
3a4d8 64f 00 00 3C 7E 
3a4dc 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3a4e0 651 00 00 00 00 
3a4e4 652 FF FF FF FF 
3a4e8 653 03 03 03 03 
3a4ec 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3a4f0 655 00 00 00 FF 
3a4f4 656 FF 18 18 18 
3a4f8 657 18 18 18 FF 
3a4fc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3a500 659 0F 0F 0F 0F 
3a504 65a 0F 0F 0F 0F | 	byte	$0f[8]
3a508 65b 18 18 18 F8 
3a50c 65c F8 00 00 00 
3a510 65d 1E 06 1E 06 
3a514 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3a518 65f 00 18 3C 7E 
3a51c 660 18 18 18 00 
3a520 661 00 18 18 18 
3a524 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3a528 663 00 18 0C 7E 
3a52c 664 0C 18 00 00 
3a530 665 00 18 30 7E 
3a534 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3a538 667 00 00 00 00 
3a53c 668 00 00 00 00 
3a540 669 00          | 	byte	$00[9]
3a541 669 18 18 18 18 
3a545 66a 00 18 00 00 
3a549 66b 66 66 66 00 
3a54d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3a551 66d 66 FF 66 66 
3a555 66e FF 66 00 18 
3a559 66f 7C 06 3C 60 
3a55d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3a561 671 66 36 18 0C 
3a565 672 66 62 00 38 
3a569 673 6C 38 1C F6 
3a56d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3a571 675 18 18 18 00 
3a575 676 00 00 00 00 
3a579 677 70 38 18 18 
3a57d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3a581 679 0E 1C 18 18 
3a585 67a 1C 0E 00 00 
3a589 67b 66 3C FF 3C 
3a58d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3a591 67d 18 18 7E 18 
3a595 67e 18 00 00 00 
3a599 67f 00 00 00 00 
3a59d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3a5a1 681 00 00 7E 00 
3a5a5 682 00 00 00 00 
3a5a9 683 00 00 00 00 
3a5ad 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3a5b1 685 60 30 18 0C 
3a5b5 686 06 02 00 00 
3a5b9 687 3C 66 76 6E 
3a5bd 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3a5c1 689 18 1C 18 18 
3a5c5 68a 18 7E 00 00 
3a5c9 68b 3C 66 30 18 
3a5cd 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3a5d1 68d 7E 30 18 30 
3a5d5 68e 66 3C 00 00 
3a5d9 68f 30 38 3C 36 
3a5dd 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3a5e1 691 7E 06 3E 60 
3a5e5 692 66 3C 00 00 
3a5e9 693 3C 06 3E 66 
3a5ed 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3a5f1 695 7E 60 30 18 
3a5f5 696 0C 0C 00 00 
3a5f9 697 3C 66 3C 66 
3a5fd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3a601 699 3C 66 7C 60 
3a605 69a 30 1C 00 00 
3a609 69b 00 18 18 00 
3a60d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3a611 69d 00 18 18 00 
3a615 69e 18 18 0C 60 
3a619 69f 30 18 0C 18 
3a61d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3a621 6a1 00 7E 00 00 
3a625 6a2 7E 00 00 06 
3a629 6a3 0C 18 30 18 
3a62d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3a631 6a5 3C 66 30 18 
3a635 6a6 00 18 00 00 
3a639 6a7 3C 66 76 76 
3a63d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3a641 6a9 18 3C 66 66 
3a645 6aa 7E 66 00 00 
3a649 6ab 3E 66 3E 66 
3a64d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3a651 6ad 3C 66 06 06 
3a655 6ae 66 3C 00 00 
3a659 6af 1E 36 66 66 
3a65d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3a661 6b1 7E 06 3E 06 
3a665 6b2 06 7E 00 00 
3a669 6b3 7E 06 3E 06 
3a66d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3a671 6b5 7C 06 06 76 
3a675 6b6 66 7C 00 00 
3a679 6b7 66 66 7E 66 
3a67d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3a681 6b9 7E 18 18 18 
3a685 6ba 18 7E 00 00 
3a689 6bb 60 60 60 60 
3a68d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3a691 6bd 66 36 1E 1E 
3a695 6be 36 66 00 00 
3a699 6bf 06 06 06 06 
3a69d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3a6a1 6c1 C6 EE FE D6 
3a6a5 6c2 C6 C6 00 00 
3a6a9 6c3 66 6E 7E 7E 
3a6ad 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3a6b1 6c5 3C 66 66 66 
3a6b5 6c6 66 3C 00 00 
3a6b9 6c7 3E 66 66 3E 
3a6bd 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3a6c1 6c9 3C 66 66 66 
3a6c5 6ca 36 6C 00 00 
3a6c9 6cb 3E 66 66 3E 
3a6cd 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3a6d1 6cd 3C 06 3C 60 
3a6d5 6ce 60 3C 00 00 
3a6d9 6cf 7E 18 18 18 
3a6dd 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3a6e1 6d1 66 66 66 66 
3a6e5 6d2 66          | 	byte	$66[5]
3a6e6 6d2 7E 00 00 66 
3a6ea 6d3 66 66 66 3C 
3a6ee 6d4 18 00 00 C6 
3a6f2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3a6f6 6d6 C6 00 00 66 
3a6fa 6d7 66 3C 3C 66 
3a6fe 6d8 66 00 00 66 
3a702 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3a706 6da 18 00 00 7E 
3a70a 6db 30 18 0C 06 
3a70e 6dc 7E 00 00 78 
3a712 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3a716 6de 78 00 00 02 
3a71a 6df 06 0C 18 30 
3a71e 6e0 60 00 00 1E 
3a722 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3a726 6e2 1E 00 00 10 
3a72a 6e3 38 6C C6 00 
3a72e 6e4 00 00 00 00 
3a732 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a736 6e6 FF 00 00 18 
3a73a 6e7 3C 7E 7E 3C 
3a73e 6e8 18 00 00 00 
3a742 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3a746 6ea 7C 00 00 06 
3a74a 6eb 06 3E 66 66 
3a74e 6ec 3E 00 00 00 
3a752 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3a756 6ee 3C 00 00 60 
3a75a 6ef 60 7C 66 66 
3a75e 6f0 7C 00 00 00 
3a762 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3a766 6f2 3C 00 00 70 
3a76a 6f3 18 7C 18 18 
3a76e 6f4 18 00 00 00 
3a772 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3a776 6f6 60 3E 00 06 
3a77a 6f7 06 3E 66 66 
3a77e 6f8 66 00 00 18 
3a782 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3a786 6fa 3C 00 00 60 
3a78a 6fb 00 60 60 60 
3a78e 6fc 60 3C 00 06 
3a792 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3a796 6fe 66 00 00 1C 
3a79a 6ff 18 18 18 18 
3a79e 700 3C 00 00 00 
3a7a2 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3a7a6 702 C6 00 00 00 
3a7aa 703 3E 66 66 66 
3a7ae 704 66 00 00 00 
3a7b2 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3a7b6 706 3C 00 00 00 
3a7ba 707 3E 66 66 3E 
3a7be 708 06 06 00 00 
3a7c2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3a7c6 70a 60 60 00 00 
3a7ca 70b 3E 66 06 06 
3a7ce 70c 06 00 00 00 
3a7d2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3a7d6 70e 3E 00 00 18 
3a7da 70f 7E 18 18 18 
3a7de 710 70 00 00 00 
3a7e2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3a7e6 712 7C 00 00 00 
3a7ea 713 66 66 66 3C 
3a7ee 714 18 00 00 00 
3a7f2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3a7f6 716 6C 00 00 00 
3a7fa 717 66 3C 18 3C 
3a7fe 718 66 00 00 00 
3a802 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3a806 71a 30 1E 00 00 
3a80a 71b 7E 30 18 0C 
3a80e 71c 7E 00 00 18 
3a812 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3a816 71e 3C 00 18 18 
3a81a 71f 18 18 18 18 
3a81e 720 18 18 00 7E 
3a822 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3a826 722 60 00 10 18 
3a82a 723 1C 1E 1C 18 
3a82e 724 10 00 08 18 
3a832 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3a836 726 08 00       | 	byte	$08, $00
3a838 727 00 00 00 00 
3a83c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3a83d 728 80 00 00 00 
3a841 729 00 80 00 00 
3a845 72a 80 80 00 00 
3a849 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3a84d 72c 80 00 80 00 
3a851 72d 00 40 80 00 
3a855 72e AA AA AA 00 
3a859 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3a85d 730 FF 00 00 00 
3a861 731 00 FF 00 00 
3a865 732 FF FF 00 00 
3a869 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3a86d 734 FF 00 FF 00 
3a871 735 00 FF FF 00 
3a875 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3a878 737 00 00 00 00 
3a87c 738 00          | ataripalette   file "ataripalettep2.def"
3a87d 738 11 11 11 00 
3a881 739 22 22 22 00 
3a885 73a 33 33 33 00 
3a889 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3a88d 73c 55 55 55 00 
3a891 73d 66 66 66 00 
3a895 73e 77 77 77 00 
3a899 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3a89d 740 99 99 99 00 
3a8a1 741 AA AA AA 00 
3a8a5 742 BB BB BB 00 
3a8a9 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3a8ad 744 DD DD DD 00 
3a8b1 745 EE EE EE 00 
3a8b5 746 FF FF FF 00 
3a8b9 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3a8bd 748 00 14 40 00 
3a8c1 749 00 1E 60 00 
3a8c5 74a 00 28 80 00 
3a8c9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3a8cd 74c 00 3C BF 00 
3a8d1 74d 00 46 DF 00 
3a8d5 74e 00 50 FF 00 
3a8d9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3a8dd 750 39 77 FF 00 
3a8e1 751 55 8A FF 00 
3a8e5 752 71 9E FF 00 
3a8e9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3a8ed 754 AA C5 FF 00 
3a8f1 755 C6 D8 FF 00 
3a8f5 756 E3 EC FF 00 
3a8f9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3a8fd 758 00 00 40 00 
3a901 759 00 00 60 00 
3a905 75a 00 00 80 00 
3a909 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3a90d 75c 00 00 BF 00 
3a911 75d 00 00 DF 00 
3a915 75e 00 00 FF 00 
3a919 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3a91d 760 39 39 FF 00 
3a921 761 55 55 FF 00 
3a925 762 71 71 FF 00 
3a929 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3a92d 764 AA AA FF 00 
3a931 765 C6 C6 FF 00 
3a935 766 E3 E3 FF 00 
3a939 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3a93d 768 20 00 40 00 
3a941 769 30 00 60 00 
3a945 76a 40 00 80 00 
3a949 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3a94d 76c 60 00 BF 00 
3a951 76d 70 00 DF 00 
3a955 76e 80 00 FF 00 
3a959 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3a95d 770 9C 39 FF 00 
3a961 771 AA 55 FF 00 
3a965 772 B8 71 FF 00 
3a969 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3a96d 774 D5 AA FF 00 
3a971 775 E3 C6 FF 00 
3a975 776 F1 E3 FF 00 
3a979 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3a97d 778 40 00 40 00 
3a981 779 60 00 60 00 
3a985 77a 80 00 80 00 
3a989 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3a98d 77c BF 00 BF 00 
3a991 77d DF 00 DF 00 
3a995 77e FF 00 FF 00 
3a999 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3a99d 780 FF 39 FF 00 
3a9a1 781 FF 55 FF 00 
3a9a5 782 FF 71 FF 00 
3a9a9 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3a9ad 784 FF AA FF 00 
3a9b1 785 FF C6 FF 00 
3a9b5 786 FF E3 FF 00 
3a9b9 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3a9bd 788 40 00 20 00 
3a9c1 789 60 00 30 00 
3a9c5 78a 80 00 40 00 
3a9c9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3a9cd 78c BF 00 60 00 
3a9d1 78d DF 00 70 00 
3a9d5 78e FF 00 80 00 
3a9d9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3a9dd 790 FF 39 9C 00 
3a9e1 791 FF 55 AA 00 
3a9e5 792 FF 71 B8 00 
3a9e9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3a9ed 794 FF AA D5 00 
3a9f1 795 FF C6 E3 00 
3a9f5 796 FF E3 F1 00 
3a9f9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3a9fd 798 40 00 00 00 
3aa01 799 60 00 00 00 
3aa05 79a 80 00 00 00 
3aa09 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3aa0d 79c BF 00 00 00 
3aa11 79d DF 00 00 00 
3aa15 79e FF 00 00 00 
3aa19 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3aa1d 7a0 FF 39 39 00 
3aa21 7a1 FF 55 55 00 
3aa25 7a2 FF 71 71 00 
3aa29 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3aa2d 7a4 FF AA AA 00 
3aa31 7a5 FF C6 C6 00 
3aa35 7a6 FF E3 E3 00 
3aa39 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3aa3d 7a8 40 10 00 00 
3aa41 7a9 60 18 00 00 
3aa45 7aa 80 20 00 00 
3aa49 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3aa4d 7ac BF 30 00 00 
3aa51 7ad DF 38 00 00 
3aa55 7ae FF 40 00 00 
3aa59 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3aa5d 7b0 FF 6A 39 00 
3aa61 7b1 FF 80 55 00 
3aa65 7b2 FF 95 71 00 
3aa69 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3aa6d 7b4 FF BF AA 00 
3aa71 7b5 FF D5 C6 00 
3aa75 7b6 FF EA E3 00 
3aa79 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3aa7d 7b8 40 20 00 00 
3aa81 7b9 60 30 00 00 
3aa85 7ba 80 40 00 00 
3aa89 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3aa8d 7bc BF 60 00 00 
3aa91 7bd DF 70 00 00 
3aa95 7be FF 80 00 00 
3aa99 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3aa9d 7c0 FF 9C 39 00 
3aaa1 7c1 FF AA 55 00 
3aaa5 7c2 FF B8 71 00 
3aaa9 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3aaad 7c4 FF D5 AA 00 
3aab1 7c5 FF E3 C6 00 
3aab5 7c6 FF F1 E3 00 
3aab9 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3aabd 7c8 40 30 00 00 
3aac1 7c9 60 48 00 00 
3aac5 7ca 80 60 00 00 
3aac9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3aacd 7cc BF 90 00 00 
3aad1 7cd DF A8 00 00 
3aad5 7ce FF C0 00 00 
3aad9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3aadd 7d0 FF CE 39 00 
3aae1 7d1 FF D5 55 00 
3aae5 7d2 FF DC 71 00 
3aae9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3aaed 7d4 FF EA AA 00 
3aaf1 7d5 FF F1 C6 00 
3aaf5 7d6 FF F8 E3 00 
3aaf9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3aafd 7d8 30 40 00 00 
3ab01 7d9 48 60 00 00 
3ab05 7da 60 80 00 00 
3ab09 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3ab0d 7dc 90 BF 00 00 
3ab11 7dd A8 DF 00 00 
3ab15 7de C0 FF 00 00 
3ab19 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3ab1d 7e0 CE FF 39 00 
3ab21 7e1 D5 FF 55 00 
3ab25 7e2 DC FF 71 00 
3ab29 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3ab2d 7e4 EA FF AA 00 
3ab31 7e5 F1 FF C6 00 
3ab35 7e6 F8 FF E3 00 
3ab39 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3ab3d 7e8 00 40 00 00 
3ab41 7e9 00 60 00 00 
3ab45 7ea 00 80 00 00 
3ab49 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3ab4d 7ec 00 BF 00 00 
3ab51 7ed 00 DF 00 00 
3ab55 7ee 00 FF 00 00 
3ab59 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3ab5d 7f0 39 FF 39 00 
3ab61 7f1 55 FF 55 00 
3ab65 7f2 71 FF 71 00 
3ab69 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3ab6d 7f4 AA FF AA 00 
3ab71 7f5 C6 FF C6 00 
3ab75 7f6 E3 FF E3 00 
3ab79 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3ab7d 7f8 00 40 14 00 
3ab81 7f9 00 60 1E 00 
3ab85 7fa 00 80 28 00 
3ab89 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3ab8d 7fc 00 BF 3C 00 
3ab91 7fd 00 DF 46 00 
3ab95 7fe 00 FF 50 00 
3ab99 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3ab9d 800 39 FF 77 00 
3aba1 801 55 FF 8A 00 
3aba5 802 71 FF 9E 00 
3aba9 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3abad 804 AA FF C5 00 
3abb1 805 C6 FF D8 00 
3abb5 806 E3 FF EC 00 
3abb9 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3abbd 808 00 40 28 00 
3abc1 809 00 60 3C 00 
3abc5 80a 00 80 50 00 
3abc9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3abcd 80c 00 BF 78 00 
3abd1 80d 00 DF 8C 00 
3abd5 80e 00 FF A0 00 
3abd9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3abdd 810 39 FF B5 00 
3abe1 811 55 FF C0 00 
3abe5 812 71 FF CA 00 
3abe9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3abed 814 AA FF DF 00 
3abf1 815 C6 FF EA 00 
3abf5 816 E3 FF F4 00 
3abf9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3abfd 818 00 40 40 00 
3ac01 819 00 60 60 00 
3ac05 81a 00 80 80 00 
3ac09 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3ac0d 81c 00 BF BF 00 
3ac11 81d 00 DF DF 00 
3ac15 81e 00 FF FF 00 
3ac19 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3ac1d 820 39 FF FF 00 
3ac21 821 55 FF FF 00 
3ac25 822 71 FF FF 00 
3ac29 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3ac2d 824 AA FF FF 00 
3ac31 825 C6 FF FF 00 
3ac35 826 E3 FF FF 00 
3ac39 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3ac3d 828 00 28 40 00 
3ac41 829 00 3C 60 00 
3ac45 82a 00 50 80 00 
3ac49 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3ac4d 82c 00 78 BF 00 
3ac51 82d 00 8C DF 00 
3ac55 82e 00 A0 FF 00 
3ac59 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3ac5d 830 39 B5 FF 00 
3ac61 831 55 C0 FF 00 
3ac65 832 71 CA FF 00 
3ac69 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3ac6d 834 AA DF FF 00 
3ac71 835 C6 EA FF 00 
3ac75 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3ac78 837             | 
3ac78 837             | '**********************************************************************************
3ac78 837             | '
3ac78 837             | '        Timings and colors definitions
3ac78 837             | '
3ac78 837             | '**********************************************************************************
3ac78 837             | 
3ac78 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3ac78 837 08 00 00 00 
3ac7c 838 3C 00 00 00 
3ac80 839 08 00 00 00 
3ac84 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3ac88 83b 07 00 00 00 
3ac8c 83c 04 00 00 00 
3ac90 83d 01 00 00 00 
3ac94 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3ac98 83f 58 02 00 00 
3ac9c 840 20 9E 4B 14 
3aca0 841 FB A8 9E 01 
3aca4 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3aca8 843 00 00 00 00 
3acac 844 C0 00 00 00 
3acb0 845 00 00 00 00 
3acb4 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acb8 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3acb8 847 00 75 C7 97 
3acbc 848 27 47 F6 0A 
3acc0 849 05 79 CB 9B 
3acc4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3acc8 84b             | 
3acc8 84b             | ''--------  Initialization  ----------------------------------------------------------------
3acc8 84b             | 
3acc8 84b 28 0C 64 FD | hdmi            setq    #6
3accc 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3acd0 84d 28 10 64 FD |                 setq    #8
3acd4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3acd8 84f             | 
3acd8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3acdc 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3ace0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3ace4 852 D6 C6 01 F1 |                 add     t1,hbase
3ace8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3acec 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3acf0 855 7B 0B 80 5F 
3acf4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3acf8 857 66 66 86 FF 
3acfc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3ad00 859             | '
3ad00 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3ad04 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3ad08 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3ad0c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3ad10 85d             | 
3ad10 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3ad14 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3ad18 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3ad1c 860             | 
3ad1c 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3ad1c 860             | 
3ad1c 860 28 06 64 FD | p101            setq 	#3
3ad20 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3ad24 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3ad28 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3ad2c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3ad30 865 00 A0 05 F6 |                 mov     dlinum, #0
3ad34 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3ad38 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3ad3c 868             | 
3ad3c 868             | 
3ad3c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3ad40 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3ad44 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3ad48 86b             |                 
3ad48 86b             | 
3ad48 86b             | 
3ad48 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3ad48 86b             |   
3ad48 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3ad4c 86c 29 FE 65 3D |          if_nc  setq2   #255
3ad50 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3ad54 86e             | 
3ad54 86e             | '' -----   up porch (before the picture)
3ad54 86e             | 
3ad54 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3ad58 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3ad5c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3ad60 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3ad64 872             |  
3ad64 872             |    
3ad64 872             |  
3ad64 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ad68 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ad6c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3ad70 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ad74 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ad78 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3ad7c 878             | 
3ad7c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ad80 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ad84 87a 48 00 B0 FD | 		call    #dli
3ad88 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ad8c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3ad90 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3ad94 87e             |                 	
3ad94 87e             |                 
3ad94 87e             | 
3ad94 87e             |  
3ad94 87e             | '' ------- the main screen drawing starts here
3ad94 87e             | 
3ad94 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3ad98 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3ad9c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3ada0 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3ada4 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3ada8 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3adac 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3adb0 885             |               
3adb0 885             | 
3adb0 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3adb4 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3adb8 887             | 
3adb8 887             | ' ---------------- All visible lines displayed now, start vblank  
3adb8 887             | 
3adb8 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3adbc 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3adc0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3adc4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3adc8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3adcc 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3add0 88d             | 
3add0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3add0 88d             | 
3add0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3add0 88d             | 
3add0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3add4 88e             | 
3add4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3add8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3addc 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3ade0 891             | 
3ade0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3ade4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3ade8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3adec 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3adf0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3adf4 896             | 
3adf4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3adf8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3adfc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3ae00 899 70 00 90 AD |     if_z        jmp     #preload
3ae04 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3ae08 89b 94 00 90 AD |     if_z        jmp     #preload2
3ae0c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3ae10 89d 0C 00 90 AD |     if_z        jmp     #p390
3ae14 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3ae18 89f 28 00 90 AD |     if_z        jmp     #p391  
3ae1c 8a0             | 
3ae1c 8a0 2D 00 64 FD | p308            ret
3ae20 8a1             |    
3ae20 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3ae24 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3ae28 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3ae2c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3ae30 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3ae34 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3ae38 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3ae3c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3ae40 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3ae44 8aa             |  
3ae44 8aa             | '' --------  Reload palette. To do 
3ae44 8aa             | 
3ae44 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3ae48 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3ae4c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3ae50 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3ae54 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3ae58 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3ae5c 8b0 70 FF 9F FD |         	jmp     #dli                
3ae60 8b1             |       
3ae60 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3ae60 8b1             | 
3ae60 8b1             | 
3ae60 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3ae60 8b1             | 
3ae60 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3ae64 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ae68 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ae6c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ae70 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3ae74 8b6             |         
3ae74 8b6             | '' -------------- Preload a line from PSRAM        
3ae74 8b6             |         
3ae74 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3ae78 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3ae7c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3ae80 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3ae84 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3ae88 8bb             | 
3ae88 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3ae8c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3ae90 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3ae94 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3ae98 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3ae9c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3aea0 8c1             |  
3aea0 8c1             |  
3aea0 8c1             | preload2      '  incmod  dlinum,#3
3aea0 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3aea4 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3aea8 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3aeac 8c4 28 02 64 FD |                 setq	#1
3aeb0 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3aeb4 8c6             |                 
3aeb4 8c6             | 
3aeb4 8c6             | '' -------------- Draw sprites
3aeb4 8c6             | 
3aeb4 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3aeb8 8c7 10 5C 0E F5 | 		and t8,#16 wz
3aebc 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3aec0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3aec4 8ca             | 		
3aec4 8ca             | 
3aec4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3aec8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3aecc 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3aed0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3aed4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3aed8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3aedc 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3aee0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3aee4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3aee8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3aeec 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3aef0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3aef4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3aef8 8d7             | 
3aef8 8d7             | 
3aef8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3aefc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3af00 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3af04 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3af08 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3af0c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3af10 8dd 00 5E 06 F6 |                 mov 	t9,#0
3af14 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3af18 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3af1c 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3af20 8e1             |      
3af20 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3af24 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3af28 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3af2c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3af30 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3af34 8e6             |                 
3af34 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3af38 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3af3c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3af40 8e9             |   		
3af40 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3af44 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3af48 8eb             | 
3af48 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3af4c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3af50 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3af54 8ee             |  
3af54 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3af58 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3af5c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3af60 8f1             | 	
3af60 8f1             | 	
3af60 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3af64 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3af68 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3af6c 8f4             | 
3af6c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3af70 8f5             | 
3af70 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3af74 8f6 01 58 86 F1 | 	 	sub     t6,#1
3af78 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3af7c 8f8             | 
3af7c 8f8 28 58 62 FD |                 setq   	t6
3af80 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3af84 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3af88 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3af8c 8fc 24 00 90 AD |         if_z    jmp #p898
3af90 8fd             |          
3af90 8fd             |         
3af90 8fd 70 5F 06 F6 |                 mov  t9,#368
3af94 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3af98 8ff             | 
3af98 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3af9c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3afa0 901 FF FF 7F FF 
3afa4 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3afa8 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3afac 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3afb0 905 2D 01 00 F5 |                 and 0-0, t7
3afb4 906             |                
3afb4 906             | 
3afb4 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3afb8 907 E5 E0 7A FA |                 wmlong 368,t3				
3afbc 908             |                 
3afbc 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3afc0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3afc4 90a 2D 00 64 FD |                 ret
3afc8 90b             | 	
3afc8 90b             | 	
3afc8 90b             |                
3afc8 90b             |  
3afc8 90b             | '' -------------- Graphics line ------------------------------------------------------------
3afc8 90b             |  
3afc8 90b             | 
3afc8 90b             | '' consts and vars
3afc8 90b             | 
3afc8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3afcc 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3afd0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3afd4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3afd8 90f             | 
3afd8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3afdc 910             | 
3afdc 910             | '------ these longs will be set by setmode function
3afdc 910             | 
3afdc 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3afe0 911 00 00 00 00 | m_sn            long    0        'sync
3afe4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3afe8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3afec 914             | 'm_border        long    0        'left/right borders
3afec 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3aff0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3aff4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3aff8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3affc 918 00 00 00 00 | i_totalvis      long    0
3b000 919             | 
3b000 919             | '-------------------------------------
3b000 919             |  
3b000 919 00 00 00 00 | linenum         long    0
3b004 91a 00 00 00 00 | frames          long    0
3b008 91b 00 00 00 00 | dlinum long 0
3b00c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3b010 91d             | 
3b010 91d 00 00 00 00 | vblankptr       long    0
3b014 91e 00 00 00 00 | modeptr         long    0
3b018 91f 00 00 00 00 | paletteptr      long    0
3b01c 920 00 00 00 00 | dlptr           long    0
3b020 921 01 00 00 00 | hbase           long    1
3b024 922 00 00 00 00 | mailbox         long    0
3b028 923 00 00 00 00 | spriteptr          long 0
3b02c 924             | 
3b02c 924 00 00 00 00 | cmd             long    0
3b030 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3b034 926 00 04 00 00 | buf2            long    1024
3b038 927 01 00 00 00 | dlptr2          long    1
3b03c 928 01 00 00 00 | dl              long    1
3b040 929             | 
3b040 929 00 00 00 00 | buf1c long 0
3b044 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3b048 92b 01 00 00 00 | framebuf2       long    1
3b04c 92c 01 00 00 00 | hsync0          long    1
3b050 92d 01 00 00 00 | hsync1          long    1
3b054 92e             | 
3b054 92e 01 00 00 00 | t1              long    1
3b058 92f 00 00 00 00 | t2 long 0
3b05c 930 00 00 00 00 | t3 long 0
3b060 931 00 00 00 00 | t4 long 0
3b064 932             | 
3b064 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3b068 933 00 00 00 00 | rcnt2           long    0
3b06c 934 00 00 00 00 | rcnt2a          long    0
3b070 935 00 00 00 00 | roffset         long    0
3b074 936 00 00 00 00 | rdl             long    0  'dl repeat line
3b078 937 00 00 00 00 | dlc             long    0  'dl command
3b07c 938             | 
3b07c 938 FF FF FF FF | affffffff       long    $ffffffff
3b080 939 00 00 00 00 | sprite1pointer long 0
3b084 93a 00 00 00 00 | sprite1xy      long 0
3b088 93b 00 00 00 00 | sprite1wh      long 0
3b08c 93c 00 00 00 00 | sprite2pointer long 0
3b090 93d 00 00 00 00 | sprite2xy      long 0
3b094 93e 00 00 00 00 | sprite2wh      long 0
3b098 93f 00 00 00 00 | sprite3pointer long 0
3b09c 940 00 00 00 00 | sprite3xy      long 0
3b0a0 941 00 00 00 00 | sprite3wh      long 0
3b0a4 942 00 00 00 00 | sprite4pointer long 0
3b0a8 943 00 00 00 00 | sprite4xy      long 0
3b0ac 944 00 00 00 00 | sprite4wh      long 0
3b0b0 945 00 00 00 00 | sprite5pointer long 0
3b0b4 946 00 00 00 00 | sprite5xy      long 0
3b0b8 947 00 00 00 00 | sprite5wh      long 0
3b0bc 948 00 00 00 00 | sprite6pointer long 0
3b0c0 949 00 00 00 00 | sprite6xy      long 0
3b0c4 94a 00 00 00 00 | sprite6wh      long 0
3b0c8 94b 00 00 00 00 | sprite7pointer long 0
3b0cc 94c 00 00 00 00 | sprite7xy      long 0
3b0d0 94d 00 00 00 00 | sprite7wh      long 0
3b0d4 94e 00 00 00 00 | sprite8pointer long 0
3b0d8 94f 00 00 00 00 | sprite8xy      long 0
3b0dc 950 00 00 00 00 | sprite8wh      long 0
3b0e0 951 00 00 00 00 | sprite9pointer long 0
3b0e4 952 00 00 00 00 | sprite9xy      long 0
3b0e8 953 00 00 00 00 | sprite9wh      long 0
3b0ec 954 00 00 00 00 | sprite10pointer long 0
3b0f0 955 00 00 00 00 | sprite10xy      long 0
3b0f4 956 00 00 00 00 | sprite10wh      long 0
3b0f8 957 00 00 00 00 | sprite11pointer long 0
3b0fc 958 00 00 00 00 | sprite11xy      long 0
3b100 959 00 00 00 00 | sprite11wh      long 0
3b104 95a 00 00 00 00 | sprite12pointer long 0
3b108 95b 00 00 00 00 | sprite12xy      long 0
3b10c 95c 00 00 00 00 | sprite12wh      long 0
3b110 95d 00 00 00 00 | sprite13pointer long 0
3b114 95e 00 00 00 00 | sprite13xy      long 0
3b118 95f 00 00 00 00 | sprite13wh      long 0
3b11c 960 00 00 00 00 | sprite14pointer long 0
3b120 961 00 00 00 00 | sprite14xy      long 0
3b124 962 00 00 00 00 | sprite14wh      long 0
3b128 963 00 00 00 00 | sprite15pointer long 0
3b12c 964 00 00 00 00 | sprite15xy      long 0
3b130 965 00 00 00 00 | sprite15wh      long 0
3b134 966 00 00 00 00 | sprite16pointer long 0
3b138 967 00 00 00 00 | sprite16xy      long 0
3b13c 968 00 00 00 00 | sprite16wh      long 0
3b140 969 00 00 00 00 | sprite17pointer long 0
3b144 96a 00 00 00 00 | sprite17xy      long 0
3b148 96b 00 00 00 00 | sprite17wh      long 0
3b14c 96c 00 00 00 00 | sprite18pointer long 0
3b150 96d 00 00 00 00 | sprite18xy      long 0
3b154 96e 00 00 00 00 | sprite18wh      long 0
3b158 96f 00 00 00 00 | spritenum long 0
3b15c 970             | 
3b15c 970 00 00 00 00 | spriteline long 0
3b160 971 84 03 00 00 | sprite_x long 900
3b164 972 00 00 00 00 | sprite_y long 0
3b168 973 10 00 00 00 | sprite_w long 16
3b16c 974 40 00 00 00 | sprite_h long 64
3b170 975 00 00 00 00 | l2 long 0
3b174 976 00 00 00 00 | t5 long 0
3b178 977 00 00 00 00 | t6 long 0
3b17c 978 00 00 00 00 | t7 long 0
3b180 979 00 00 00 00 | t8 long 0
3b184 97a 00 00 00 00 | t9 long 0
3b188 97b 00 00 00 00 | preloadaddr long 0
3b18c 97c 00 00 00 00 | preloadlineaddr long 0
3b190 97d 00 04 00 00 | a1024 long 1024
3b194 97e             | 
3b194 97e E0 03 00 00 | aa long 992
3b198 97f FF 03 00 00 | a1023 long 1023
3b19c 980 00 10 00 00 | a4096 long 4096
3b1a0 981             |  fit 368
3b1a0 981             | _psram_spin2_dat_
3b1a0 981 00 00 00 00 
      ...             
3b298 9bf 00 00 00 00 
3b29c 9c0 00 00 00 00 |     listdata long 0[8*8]
3b2a0 9c1             |             orgh
3b2a0                 | 
3b2a0                 | ' driver state
3b2a0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3b2a4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3b2a8                 | 
3b2a8                 | ' delay profile
3b2a8     07 00 00 00 
3b2ac     00 CF 7B 05 
3b2b0     80 D1 F0 08 
3b2b4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3b2b8     80 C4 60 0F 
3b2bc     80 39 7A 12 
3b2c0     40 2D D9 13 
3b2c4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3b2c8                 | 
3b2c8                 | ' data to be passed to driver when starting it
3b2c8                 | startupData
3b2c8     00 00 00 00 |     long    0           ' current frequency
3b2cc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3b2d0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3b2d4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3b2d8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3b2dc     E8 B2 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3b2e0     68 B3 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3b2e4     88 B3 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3b2e8                 | 
3b2e8                 | ' data for memory
3b2e8                 | deviceData
3b2e8                 |     ' 16 bank parameters follow (16MB per bank)
3b2e8     00 00 00 00 
      ...             
3b320     00 00 00 00 
3b324     00 00 00 00 |     long    0[16]                               ' banks 0-15
3b328                 |     ' 16 banks of pin parameters follow
3b328     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3b32c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3b330     FF FF FF FF 
      ...             
3b360     FF FF FF FF 
3b364     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3b368                 | 
3b368                 | ' data for COG polling
3b368                 | qosData 
3b368     00 00 FF FF 
3b36c     00 00 FF FF 
3b370     00 00 FF FF 
3b374     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3b378     00 00 FF FF 
3b37c     00 00 FF FF 
3b380     00 00 FF FF 
3b384     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3b388                 |     
3b388                 | ' mailbox storage
3b388                 | 
3b388                 | mailboxes
3b388     00 00 00 00 
      ...             
3b3e0     00 00 00 00 
3b3e4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3b3e8                 | 	alignl
3b3e8                 | _psram16drv_spin2_dat_
3b3e8                 |                             orgh
3b3e8     00 00 00 00 
      ...             
3b400     00 00 00 00 
3b404     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3b408                 | 
3b408                 | driver_start
3b408                 |                             org
3b408 000             | '..................................................................................................
3b408 000             | ' Memory layout for COG RAM once operational:
3b408 000             | '
3b408 000             | '  COG RAM address      Usage
3b408 000             | '  ---------------      ----
3b408 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3b408 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3b408 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3b408 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3b408 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3b408 000             | '  ~$198-$1F3           State and register variables
3b408 000             | '
3b408 000             | ' Also during driver COG startup:
3b408 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3b408 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3b408 000             | '..................................................................................................
3b408 000             |                             
3b408 000             | ' Mailbox storage after vector initialization
3b408 000             | 
3b408 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3b40c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3b410 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3b414 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3b418 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3b41c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3b420 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3b424 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3b428 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3b42c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3b430 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3b434 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3b438 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3b43c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3b440 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3b444 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3b448 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3b44c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3b450 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3b454 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3b458 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3b45c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3b460 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3b464 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3b468 018             | 
3b468 018             | ' Mailbox parameter addresses per COG once patched
3b468 018             |                             
3b468 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3b46c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3b470 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3b474 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3b478 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3b47c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3b480 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3b484 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3b488 020             | 
3b488 020             | '..................................................................................................
3b488 020             | ' Per COG request and state setup and service branching
3b488 020             |         
3b488 020             | cog0                 
3b488 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3b48c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3b490 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3b494 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3b498 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b49c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b4a0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3b4a4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3b4a8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3b4ac 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b4b0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b4b4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3b4b8 02c             | cog1                        
3b4b8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3b4bc 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3b4c0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3b4c4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3b4c8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b4cc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b4d0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3b4d4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3b4d8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3b4dc 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b4e0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b4e4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3b4e8 038             | cog2                         
3b4e8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3b4ec 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3b4f0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3b4f4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3b4f8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b4fc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b500 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3b504 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3b508 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3b50c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b510 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b514 043 33 CA 63 FD |                             execf   request-0               'jump to service
3b518 044             | cog3                        
3b518 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3b51c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3b520 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3b524 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3b528 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b52c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b530 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3b534 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3b538 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3b53c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b540 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b544 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3b548 050             | cog4                        
3b548 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3b54c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3b550 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3b554 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3b558 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b55c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b560 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3b564 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3b568 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3b56c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b570 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b574 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3b578 05c             | cog5                        
3b578 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3b57c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3b580 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3b584 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3b588 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b58c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b590 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3b594 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3b598 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3b59c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b5a0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b5a4 067 33 CA 63 FD |                             execf   request-0               'jump to service
3b5a8 068             | cog6                        
3b5a8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3b5ac 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3b5b0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3b5b4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3b5b8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b5bc 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b5c0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3b5c4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3b5c8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3b5cc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b5d0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b5d4 073 33 CA 63 FD |                             execf   request-0               'jump to service
3b5d8 074             | cog7                        
3b5d8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3b5dc 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3b5e0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3b5e4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3b5e8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3b5ec 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3b5f0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3b5f4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3b5f8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3b5fc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3b600 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3b604 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3b608 080             |                             fit     128
3b608 080             | 
3b608 080             |                             fit     128
3b608 080             | pad                         long    0[128-$]                'align init code to $80
3b608 080             | 
3b608 080             | '..................................................................................................
3b608 080             | 
3b608 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3b608 080             | 
3b608 080             | init                        
3b608 080             |                             ' get driver scratch long address in hub
3b608 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3b60c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3b610 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3b614 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3b618 084             |                     
3b618 084             |                             ' read in the additional LUT RAM code
3b618 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3b61c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3b620 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3b624 087             | 
3b624 087             |                             ' read the startup parameters
3b624 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3b628 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3b62c 089             | 
3b62c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3b62c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3b630 08a             | 
3b630 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3b634 08b 01 00 00 5F 
3b638 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3b63c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3b640 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3b644 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3b648 090             | 
3b648 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3b648 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3b64c 091 01 00 00 FF 
3b650 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3b654 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3b658 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3b65c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3b660 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3b664 097 08 DE 47 F5 |                             or      a, #8
3b668 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3b66c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3b670 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3b674 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3b678 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3b67c 09d 01 DE 07 F1 |                             add     a, #1
3b680 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3b684 09f             |  
3b684 09f             |                             ' setup device control pin states
3b684 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3b688 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3b68c 0a1 01 00 00 FF 
3b690 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3b694 0a3             | 
3b694 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3b698 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3b69c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3b6a0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3b6a4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3b6a8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3b6ac 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3b6b0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3b6b4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3b6b8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3b6bc 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3b6c0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3b6c4 0af             | pinloop
3b6c4 0af             |                             ' generate minimum CE high time before access
3b6c4 0af A1 07 00 FF 
3b6c8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3b6cc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3b6d0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3b6d4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3b6d8 0b4 1F DE 63 FD |                             waitx   a                       'delay
3b6dc 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3b6e0 0b6             | 
3b6e0 0b6             |                             ' setup the COG mailboxes and addresses 
3b6e0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3b6e4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3b6e8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3b6ec 0b9             | 
3b6ec 0b9 28 2E 64 FD |                             setq    #24-1
3b6f0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3b6f4 0bb             | 
3b6f4 0bb             |                             ' setup the polling loop for active COGs 
3b6f4 0bb 01 C2 63 FD |                             cogid   id
3b6f8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3b6fc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3b700 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3b704 0bf 0A F0 07 F6 |                             mov     ptra, #10
3b708 0c0 E1 F1 03 FA |                             mul     ptra, id
3b70c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3b710 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3b714 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3b718 0c4 03 C2 07 FA |                             mul     id, #3
3b71c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3b720 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3b724 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3b728 0c8 D8 01 B0 FD |                             call    #reloadcogs
3b72c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3b730 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3b734 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3b734 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3b738 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3b73c 0cd 08 04 DC FC |                             rep     #2, #8
3b740 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3b744 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3b748 0d0             | 
3b748 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3b748 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3b748 0d0 01 C2 63 FD |                             cogid   id
3b74c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3b750 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3b754 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3b758 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3b75c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3b760 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3b764 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3b768 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3b76c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3b770 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3b774 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3b778 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3b77c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3b780 0de A5 E5 03 F1 |                             add     d, const512
3b784 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3b788 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3b78c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3b790 0e2             |                             
3b790 0e2             |                             ' setup register values for control vector loop setup after we return
3b790 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3b794 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3b798 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3b79c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3b7a0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3b7a4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3b7a8 0e8 D0 C3 8F F9 |                             altd    id, #id0
3b7ac 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3b7b0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3b7b4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3b7b8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3b7bc 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3b7c0 0ee             |  
3b7c0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3b7c4 0ef 07 CA 07 F5 |                             and     request, #7
3b7c8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3b7cc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3b7d0 0f2             |                             fit     $100                    'ensure all init code fits this space
3b7d0 0f2             | 
3b7d0 0f2             |                             fit     $100                    'ensure all init code fits this space
3b7d0 0f2             | 
3b7d0 0f2 00 00 00 00 
      ...             
3b800 0fe 00 00 00 00 
3b804 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3b808 100             | 
3b808 100             | '..................................................................................................
3b808 100             | ' Error result handling and COG notification of request completion
3b808 100             | 
3b808 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3b80c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3b810 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3b814 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3b818 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3b81c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3b820 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3b824 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3b828 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3b82c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3b830 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3b834 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3b838 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3b83c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3b840 10e             | ' Poller re-starts here after a COG is serviced
3b840 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3b844 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3b848 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3b84c 111             | ' Main dynamic polling loop repeats until a request arrives
3b84c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3b850 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3b854 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3b858 114             | 
3b858 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3b85c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3b860 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3b864 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3b868 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3b86c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3b870 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3b874 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3b878 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3b87c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3b880 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3b884 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3b888 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3b88c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3b890 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3b894 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3b898 124             | 
3b898 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3b89c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3b8a0 126             |  
3b8a0 126             | '..................................................................................................
3b8a0 126             | ' List handler                               
3b8a0 126             | 
3b8a0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3b8a4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3b8a8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3b8ac 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3b8b0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3b8b4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3b8b8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3b8bc 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3b8c0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3b8c4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3b8c8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3b8cc 131 33 00 60 FD |                             execf   0-0                     'process the request 
3b8d0 132             | 
3b8d0 132             | '..................................................................................................
3b8d0 132             | ' Restoring per COG state and resuming where we left off
3b8d0 132             | 
3b8d0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3b8d4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3b8d8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3b8dc 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3b8e0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3b8e4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3b8e8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3b8ec 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3b8f0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3b8f4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3b8f8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3b8fc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3b900 13e             |                    
3b900 13e             | '..................................................................................................
3b900 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3b900 13e             | 
3b900 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3b904 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3b908 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3b90c 141 D0 DF B7 F9 |                             setd    a, #id0
3b910 142 D8 DF BF F9 |                             sets    a, #addr1
3b914 143 FE FF FF FF 
3b918 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3b91c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3b920 146 3F DE A7 F9 |                             alti    a, #%111_111 
3b924 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3b928 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3b92c 149 01 E2 63 FD |                             cogid   c
3b930 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3b934 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3b938 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3b93c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3b940 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3b944 14f 00 E0 03 F6 |                             mov     b, 0-0
3b948 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3b94c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3b950 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3b954 153 0C 00 90 AD |             if_z            jmp     #excluded               
3b958 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3b95c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3b960 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3b964 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3b968 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3b96c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3b970 15a             | 
3b970 15a             | 'determine priority cogs and build instructions for the polling sequence
3b970 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3b974 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3b978 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3b97c 15d             | 
3b97c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3b980 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3b984 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3b988 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3b98c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3b990 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3b994 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3b998 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3b99c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3b9a0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3b9a4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3b9a8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3b9ac 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3b9b0 16a             | endprioloop
3b9b0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3b9b4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3b9b8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3b9bc 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3b9c0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3b9c4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3b9c8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3b9cc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3b9d0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3b9d4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3b9d8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3b9dc 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3b9e0 176             | 
3b9e0 176             | ' populate the round robin COG polling instructions
3b9e0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3b9e4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3b9e8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3b9ec 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3b9f0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3b9f4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3b9f8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3b9fc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3ba00 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3ba04 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3ba08 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3ba0c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3ba10 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3ba14 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3ba18 184             | '..................................................................................................
3ba18 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3ba18 184             | 
3ba18 184             | set_latency                                                 '            (a) set latency
3ba18 184             | get_latency                                                 '            (b) get latency
3ba18 184             | set_burst                                                   '            (c) set burst size of bank
3ba18 184             | get_burst                                                   '            (d) get burst size of bank
3ba18 184             |                                                             '            (e) dump state
3ba18 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3ba1c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3ba20 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3ba24 187             |                                                             ' | | | | e  account for following AUGS
3ba24 187 04 00 00 FF 
3ba28 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3ba2c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3ba30 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3ba34 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3ba38 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3ba3c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3ba40 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3ba44 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3ba48 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3ba4c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3ba50 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3ba54 193             | 
3ba54 193             | '..................................................................................................
3ba54 193             | ' Misc EXECF code
3ba54 193             | 
3ba54 193 33 72 63 FD | start_read_exec             execf   newburstr
3ba58 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3ba5c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3ba60 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3ba64 197             | 
3ba64 197             | '..................................................................................................
3ba64 197             | ' Variables
3ba64 197             | 
3ba64 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3ba68 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3ba6c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3ba70 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3ba74 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3ba78 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3ba7c 19d             | 
3ba7c 19d 00 00 00 80 | xfreq1          long    $80000000
3ba80 19e 00 00 00 40 | xfreq2          long    $40000000
3ba84 19f 03 00 00 00 | delay           long    3
3ba88 1a0             | 
3ba88 1a0             | lutcodeaddr                 
3ba88 1a0             | startupparams
3ba88 1a0             | excludedcogs                                    'careful: shared register use!
3ba88 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3ba8c 1a1 00 00 00 00 | flags           long    0
3ba90 1a2             | mask                                            'careful: shared register use!
3ba90 1a2 00 00 00 00 | resetmaskA      long    0
3ba94 1a3             | limit                                           'careful: shared register use!
3ba94 1a3 00 00 00 00 | resetmaskB      long    0
3ba98 1a4 00 00 00 00 | datapins        long    0
3ba9c 1a5             | const512                                        'careful: shared register use!
3ba9c 1a5 00 00 00 00 | devicelist      long    0
3baa0 1a6 00 00 00 00 | coglist         long    0
3baa4 1a7 00 00 00 00 | mbox            long    0 
3baa8 1a8             | 
3baa8 1a8             | clkpin                                          'shared with code patched during init
3baa8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3baac 1a9             | cspin                                           'shared with code patched during init
3baac 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3bab0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3bab4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3bab8 1ac 01 00 00 00 | clkdelay        long    1
3babc 1ad 00 00 00 00 | regdatabus      long    0
3bac0 1ae             | 
3bac0 1ae 10 00 00 00 | deviceaddr      long    $10
3bac4 1af             | rrcounter
3bac4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3bac8 1b0             | 
3bac8 1b0             | ' jump addresses for the per COG handlers
3bac8 1b0 20 00 00 00 | cog0_handler    long    cog0
3bacc 1b1 2C 00 00 00 | cog1_handler    long    cog1
3bad0 1b2 38 00 00 00 | cog2_handler    long    cog2
3bad4 1b3 44 00 00 00 | cog3_handler    long    cog3
3bad8 1b4 50 00 00 00 | cog4_handler    long    cog4
3badc 1b5 5C 00 00 00 | cog5_handler    long    cog5
3bae0 1b6 68 00 00 00 | cog6_handler    long    cog6
3bae4 1b7 74 00 00 00 | cog7_handler    long    cog7
3bae8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3baec 1b9             | 
3baec 1b9             | ' EXECF sequences
3baec 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3baf0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3baf4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3baf8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3bafc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3bb00 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3bb04 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3bb08 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3bb08 1c0             | 
3bb08 1c0             | 
3bb08 1c0             | ' SKIPF sequences
3bb08 1c0             | skiptable
3bb08 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3bb0c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3bb10 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3bb14 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3bb18 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3bb1c 1c5 00 00 00 00 | pattern2        long    0
3bb20 1c6 00 00 00 00 | pattern3        long    0
3bb24 1c7 77 02 00 00 | singlelong      long    %1001110111  
3bb28 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3bb2c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3bb30 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3bb34 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3bb38 1cc             | 
3bb38 1cc             | ' LUT RAM address values
3bb38 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3bb3c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3bb40 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3bb44 1cf F6 02 00 00 | noread          long    noread_lut
3bb48 1d0             | 
3bb48 1d0 00 00 00 00 | id0             long    0
3bb4c 1d1 01 00 00 00 | id1             long    1
3bb50 1d2 02 00 00 00 | id2             long    2
3bb54 1d3 03 00 00 00 | id3             long    3
3bb58 1d4 04 00 00 00 | id4             long    4
3bb5c 1d5 05 00 00 00 | id5             long    5
3bb60 1d6 06 00 00 00 | id6             long    6
3bb64 1d7 07 00 00 00 | id7             long    7
3bb68 1d8             | 
3bb68 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3bb68 1d8             | 'and COG updates and need to follow immediately after id0-id7
3bb68 1d8 00 00 00 00 | addr1           long    0
3bb6c 1d9 00 00 00 00 | hubdata         long    0
3bb70 1da 00 00 00 00 | count           long    0
3bb74 1db 00 00 00 00 | addr2           long    0
3bb78 1dc 00 00 00 00 | total           long    0
3bb7c 1dd 00 00 00 00 | offset1         long    0
3bb80 1de 00 00 00 00 | offset2         long    0
3bb84 1df 00 00 00 00 | link            long    0
3bb88 1e0             | 
3bb88 1e0             | burstwrite                                      'note shared register use during init
3bb88 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3bb8c 1e1 00 00 00 00 | id              long    0
3bb90 1e2             | 
3bb90 1e2 00 00 00 00 | header          long    0
3bb94 1e3 00 00 00 00 | trailer         long    0
3bb98 1e4 00 00 00 00 | cmdaddr         long    0
3bb9c 1e5 00 00 00 00 | request         long    0
3bba0 1e6 00 00 00 00 | rrlimit         long    0
3bba4 1e7 00 00 00 00 | pinconfig       long    0
3bba8 1e8 00 00 00 00 | clks            long    0
3bbac 1e9 00 00 00 00 | resume          long    0
3bbb0 1ea 00 00 00 00 | orighubsize     long    0
3bbb4 1eb 00 00 00 00 | wrclks          long    0
3bbb8 1ec             | 
3bbb8 1ec 00 00 00 00 | pattern         long    0
3bbbc 1ed 00 00 00 00 | hubscratch      long    0
3bbc0 1ee 00 10 00 00 | val4k           long    4096
3bbc4 1ef             | 
3bbc4 1ef             | ' temporary general purpose regs
3bbc4 1ef 00 00 00 00 | a               long    0
3bbc8 1f0 00 00 00 00 | b               long    0
3bbcc 1f1 00 00 00 00 | c               long    0
3bbd0 1f2 00 00 00 00 | d               long    0
3bbd4 1f3             |                 fit     502
3bbd4 1f3             | 
3bbd4 1f3             |                 fit     502
3bbd4 1f3             | 
3bbd4 1f3             | '..................................................................................................
3bbd4 1f3             | 
3bbd4 1f3             |             orgh
3bbd4                 | 
3bbd4                 | lut_code
3bbd4                 | 'HW init code up to 80 longs
3bbd4                 | 
3bbd4                 | '..................................................................................................
3bbd4                 | ' Memory layout for LUT RAM once operational:
3bbd4                 | '
3bbd4                 | '  LUT RAM address      Usage
3bbd4                 | '  ---------------      ----
3bbd4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3bbd4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3bbd4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3bbd4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3bbd4                 | '
3bbd4                 | ' Also during driver COG startup:
3bbd4                 | ' $230-$24F is used for HW init setup
3bbd4                 | ' $250-$26F is used as temporary vector storage 
3bbd4                 | '..................................................................................................
3bbd4                 | 
3bbd4                 |                 org $230    
3bbd4 230             | 
3bbd4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3bbd4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3bbd8 231 24 16 60 FD |                             pollxfi
3bbdc 232 FF AA 2A FF 
3bbe0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3bbe4 234 28 00 B0 FD |                             call    #sendqspi
3bbe8 235 07 F8 07 FF 
3bbec 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3bbf0 237 28 00 B0 FD |                             call    #sendspi
3bbf4 238 F8 07 78 FF 
3bbf8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3bbfc 23a 1C 00 B0 FD |                             call    #sendspi
3bc00 23b 7F 78 78 FF 
3bc04 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3bc08 23d 10 00 B0 FD |                             call    #sendspi 
3bc0c 23e 2D 00 64 FD |                             ret
3bc10 23f             | 
3bc10 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3bc14 240 32 0C 64 FD |                             skipf   #%110
3bc18 241 9C EF 03 F6 |                             mov     pb, xsendimm
3bc1c 242             | 
3bc1c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3bc20 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3bc24 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3bc28 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3bc2c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3bc30 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3bc34 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3bc38 249 50 48 63 FD |                             fltl    datapins                'float data bus
3bc3c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3bc40 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3bc44 24c             | 
3bc44 24c 00 00 00 00 
3bc48 24d 00 00 00 00 
3bc4c 24e 00 00 00 00 
3bc50 24f 00 00 00 00 |                 long    0[$270-32-$]
3bc54 250             |                 fit     $270-32  ' keep room for 32 vector longs
3bc54 250             |     
3bc54 250             |                 fit     $270-32  ' keep room for 32 vector longs
3bc54 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3bc54 250             | rw_vect ' PSRAM jump vectors
3bc54 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bc58 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bc5c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3bc60 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3bc64 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3bc68 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3bc6c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3bc70 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3bc74 258             | ro_vect ' R/O PSRAM jump vectors
3bc74 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bc78 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3bc7c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3bc80 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3bc84 25c 00 01 00 00 |                 long    unsupported
3bc88 25d 00 01 00 00 |                 long    unsupported
3bc8c 25e 00 01 00 00 |                 long    unsupported
3bc90 25f 00 01 00 00 |                 long    unsupported
3bc94 260             | ctrl_vect ' Control jump vectors
3bc94 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3bc98 261 00 01 00 00 |                 long    unsupported
3bc9c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3bca0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3bca4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3bca8 265 00 01 00 00 |                 long    unsupported
3bcac 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3bcb0 267 3E 01 00 00 |                 long    reconfig 
3bcb4 268             | no_vect ' Invalid bank jump vectors
3bcb4 268 01 01 00 00 |                 long    invalidbank
3bcb8 269 01 01 00 00 |                 long    invalidbank
3bcbc 26a 01 01 00 00 |                 long    invalidbank
3bcc0 26b 01 01 00 00 |                 long    invalidbank
3bcc4 26c 01 01 00 00 |                 long    invalidbank
3bcc8 26d 01 01 00 00 |                 long    invalidbank
3bccc 26e 01 01 00 00 |                 long    invalidbank
3bcd0 26f 01 01 00 00 |                 long    invalidbank
3bcd4 270             |                 fit     $270
3bcd4 270             | 
3bcd4 270             |                 fit     $270
3bcd4 270             | '..................................................................................................
3bcd4 270             | ' PSRAM READS
3bcd4 270             |                                                             ' a b c d e f
3bcd4 270             |                                                             ' B W L B R L  (a) byte read
3bcd4 270             |                                                             ' Y O O U E O  (b) word read
3bcd4 270             |                                                             ' T R N R S C  (c) long read
3bcd4 270             |                                                             ' E D G S U K  (d) new burst read
3bcd4 270             |                                                             '       T M E  (e) resumed sub-burst
3bcd4 270             |                                                             '         E D  (f) locked sub-burst
3bcd4 270             | 
3bcd4 270             | 
3bcd4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3bcd8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3bcdc 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3bce0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3bce4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3bce8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3bcec 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3bcf0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3bcf4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3bcf8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3bcfc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3bd00 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3bd04 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3bd08 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3bd0c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3bd10 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3bd14 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3bd18 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3bd1c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3bd20 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3bd24 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3bd28 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3bd2c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3bd30 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3bd34 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3bd38 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3bd3c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3bd40 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3bd44 28c             | 
3bd44 28c             |                             ' fall through to read bursts
3bd44 28c             |                         
3bd44 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3bd44 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3bd48 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3bd4c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3bd50 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3bd54 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3bd58 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3bd5c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3bd60 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3bd64 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3bd68 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3bd6c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3bd70 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3bd74 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3bd78 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3bd7c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3bd80 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3bd84 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3bd88 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3bd8c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3bd90 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3bd94 2a0 E8 D1 03 F1 |                             add     clks, clks
3bd98 2a1             | readcommon
3bd98 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3bd9c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3bda0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3bda4 2a4             | 
3bda4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3bda8 2a5 69 C8 63 FD |                             rev     cmdaddr
3bdac 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3bdb0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3bdb4 2a8             | 
3bdb4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3bdb8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3bdbc 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3bdbc 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3bdc0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3bdc4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3bdc8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3bdcc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3bdcc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3bdd0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3bdd4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3bdd8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3bddc 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3bde0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3bde4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3bde4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3bde8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3bdec 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3bdf0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3bdf4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3bdf8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3bdfc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3be00 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3be04 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3be08 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3be0c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3be10 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3be14 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3be18 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3be1c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3be1c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3be20 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3be24 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3be28 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3be2c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3be30 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3be34 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3be38 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3be3c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3be40 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3be44 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3be48 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3be4c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3be50 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3be54 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3be58 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3be5c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3be60 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3be64 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3be68 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3be6c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3be70 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3be74 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3be78 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3be7c 2da 10 03 90 FD |                             jmp     #writecommon
3be80 2db             | 
3be80 2db             | '..................................................................................................
3be80 2db             | ' Burst continuation testing
3be80 2db             | 
3be80 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3be84 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3be88 2dd             | continue_read_lut          
3be88 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3be8c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3be90 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3be94 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3be98 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3be9c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3bea0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3bea4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3bea8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3beac 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3beb0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3beb4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3beb8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3bebc 2ea             | 
3bebc 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3bec0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3bec4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3bec8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3becc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3bed0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3bed4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3bed8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3bedc 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3bee0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3bee4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3bee8 2f5             | 
3bee8 2f5             | 
3bee8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3beec 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3beec 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3bef0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3bef4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3bef8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3befc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3bf00 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3bf04 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3bf08 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3bf0c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3bf10 2ff             | '..................................................................................................
3bf10 2ff             | ' Completion of requests
3bf10 2ff             | 
3bf10 2ff             | complete_rw_lut             
3bf10 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3bf14 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3bf18 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3bf1c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3bf20 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3bf24 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3bf28 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3bf2c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3bf30 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3bf34 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3bf38 309 32 62 64 AD |             if_z            skipf   #%110001
3bf3c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3bf40 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3bf44 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3bf48 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3bf4c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3bf50 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3bf54 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3bf58 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3bf5c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3bf60 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3bf64 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3bf68 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3bf6c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3bf6c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3bf6c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3bf6c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3bf70 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3bf74 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3bf78 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3bf7c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3bf80 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3bf84 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3bf88 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3bf8c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3bf90 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3bf94 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3bf98 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3bf9c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3bfa0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3bfa4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3bfa8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3bfac 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3bfb0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3bfb4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3bfb8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3bfbc 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3bfc0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3bfc4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3bfc8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3bfcc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3bfd0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3bfd4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3bfd8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3bfdc 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3bfe0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3bfe4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3bfe8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3bfec 336 34 FF 9F AD |             if_z            jmp     #checknext
3bff0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3bff4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3bff8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3bffc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3c000 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3c004 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3c008 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3c00c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3c010 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3c014 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3c018 341             | 
3c018 341             | '..................................................................................................
3c018 341             | ' PSRAM WRITES
3c018 341             |                                                             '  a b c d e f g h
3c018 341             | 
3c018 341             |                                                             '  B W L F B R L L (a) byte write(s)
3c018 341             |                                                             '  Y O O I U E O O (b) word write(s)
3c018 341             |                                                             '  T R N L R S C C (c) long write(s)
3c018 341             |                                                             '  E D G L S U K K (d) resumed fill
3c018 341             |                                                             '          T M E E (e) new burst write
3c018 341             |                                                             '            E D D (f) resumed burst
3c018 341             |                                                             '              F B (g) locked fill
3c018 341             |                                                             '              I U (h) locked burst write
3c018 341             |                                                             '              L R 
3c018 341             |                                                             '              L S 
3c018 341             |                                                             '                T 
3c018 341             | 
3c018 341             | w_single                   
3c018 341             | w_fill_cont           
3c018 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3c01c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3c020 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3c024 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3c028 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3c02c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3c030 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3c034 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3c038 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3c03c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3c040 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3c044 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3c048 34d             |                ' disable call to r_resume_burst for single longs when z=0
3c048 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3c04c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3c050 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3c054 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3c058 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3c05c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3c060 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3c064 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3c068 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3c06c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3c070 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3c074 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3c078 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3c07c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3c080 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3c084 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3c088 35d             |         
3c088 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3c088 35d             |             '
3c088 35d             |             '  At least one of these 3 optional components will be sent
3c088 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3c088 35d             |             '     body - N x full longs of data
3c088 35d             |             '     trailer - last partial long of data
3c088 35d             |             '
3c088 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3c088 35d             |             '
3c088 35d             |             'Case    Type                           Sends
3c088 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3c088 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3c088 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3c088 35d             |             ' 4)     Multiple long fill             body only
3c088 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3c088 35d             | 
3c088 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3c088 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3c08c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3c090 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3c094 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3c098 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3c09c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3c0a0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3c0a4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3c0a8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3c0ac 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3c0b0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3c0b4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3c0b8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3c0bc 36a             |                             
3c0bc 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3c0c0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3c0c4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3c0c8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3c0cc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3c0d0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3c0d4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3c0d8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3c0dc 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3c0e0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3c0e4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3c0e8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3c0ec 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3c0f0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3c0f4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3c0f8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3c0fc 37a             | 
3c0fc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3c100 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3c104 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3c108 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3c10c 37e             |                  
3c10c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3c110 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3c114 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3c118 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3c11c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3c120 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3c124 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3c128 385             | 
3c128 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3c12c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3c130 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3c134 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3c138 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3c13c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3c140 38b             | 
3c140 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3c140 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3c144 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3c148 38d 2A B0 63 FD |                             push    addr1                   'save address
3c14c 38e             | 
3c14c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3c14c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3c150 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3c154 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3c158 391             |             
3c158 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3c15c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3c160 393 2B B0 63 FD |                             pop     addr1                   'restore address
3c164 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3c168 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3c16c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3c170 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3c174 398             | 
3c174 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3c178 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3c17c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3c180 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3c184 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3c188 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3c18c 39e             | 
3c18c 39e             |                             'trailer is done
3c18c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3c190 39f             | 
3c190 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3c194 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3c198 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3c19c 3a2             | 
3c19c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3c1a0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3c1a4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3c1a8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3c1ac 3a6             |                             
3c1ac 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3c1b0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3c1b4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3c1b8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3c1bc 3aa             |                                                          
3c1bc 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3c1c0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3c1c4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3c1c8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3c1cc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3c1d0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3c1d4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3c1d8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3c1dc 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3c1e0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3c1e4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3c1e8 3b5             |  
3c1e8 3b5 59 52 63 FD |                             drvh    cspin
3c1ec 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3c1f0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3c1f4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3c1f8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3c1fc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3c200 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3c204 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3c208 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3c20c 3be EA E5 03 F6 |                             mov     d, orighubsize
3c210 3bf EF E5 63 F0 |                             shl     d, a
3c214 3c0 F2 E3 83 F1 |                             sub     c, d
3c218 3c1 DD E3 03 F1 |                             add     c, offset1
3c21c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3c220 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3c224 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3c228 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3c22c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3c230 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3c234 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3c238 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3c23c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3c240 3cb BB D3 03 F6 |                             mov     resume, restorefill
3c244 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3c248 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3c24c 3ce 6C FC BF CD |             if_c            call    #yield
3c250 3cf 2D 00 64 FD |                             ret
3c254 3d0             |                            
3c254 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3c254 3d0             |                       '     rczl    pa                      'rotate left into address offset
3c254 3d0             |                       '     rczl    c wcz                   'restore count and flags
3c254 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3c258 3d1 02 EC 67 F0 |                             shl     pa, #2
3c25c 3d2 28 06 64 AD |             if_z            setq    #3
3c260 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3c264 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3c268 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3c26c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3c270 3d7             | 
3c270 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3c274 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3c278 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3c27c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3c280 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3c284 3dc             |                 fit 1024-32
3c284 3dc             |         
3c284 3dc             | 
3c284 3dc             | '..................................................................................................
3c284 3dc             | 
3c284 3dc             |                 fit 1024-32
3c284 3dc 00 00 00 00 
3c288 3dd 00 00 00 00 
3c28c 3de 00 00 00 00 
3c290 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3c294 3e0             |                 org 1024-32
3c294 000             | 
3c294 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3c294 000 00 00 00 00 |                 long $0000
3c298 001 11 11 00 00 |                 long $1111
3c29c 002 22 22 00 00 |                 long $2222
3c2a0 003 33 33 00 00 |                 long $3333
3c2a4 004 44 44 00 00 |                 long $4444
3c2a8 005 55 55 00 00 |                 long $5555
3c2ac 006 66 66 00 00 |                 long $6666
3c2b0 007 77 77 00 00 |                 long $7777
3c2b4 008 88 88 00 00 |                 long $8888
3c2b8 009 99 99 00 00 |                 long $9999
3c2bc 00a AA AA 00 00 |                 long $aaaa
3c2c0 00b BB BB 00 00 |                 long $bbbb
3c2c4 00c CC CC 00 00 |                 long $cccc
3c2c8 00d DD DD 00 00 |                 long $dddd
3c2cc 00e EE EE 00 00 |                 long $eeee
3c2d0 00f FF FF 00 00 |                 long $ffff
3c2d4 010             | 
3c2d4 010             | 'masks
3c2d4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3c2d8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3c2dc 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3c2e0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3c2e4 014             | 
3c2e4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3c2e8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3c2ec 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3c2f0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3c2f4 018             | 
3c2f4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3c2f8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3c2fc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3c300 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3c304 01c             | 
3c304 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3c308 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3c30c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3c310 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3c314 020             |         fit 1024
3c314 020             | 
3c314 020             |         fit 1024
3c314 020             | 
3c314 020             | '--------------------------------------------------------------------------------------------------
3c314 020             |         orgh
3c314                 | 
3c314                 | gfxexpansion
3c314                 |                             'simple line drawing graphics expansion of memory driver
3c314                 |                             'jmp     #donerepeats                'just return for now
3c314                 | 
3c314     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3c318     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3c31c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3c320     DD E1 03 F6 |                             mov     b, offset1              'get error term
3c324     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3c328     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3c32c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3c330     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3c334     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3c338     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3c33c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3c340     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3c344     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3c348     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3c34c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3c350     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3c354     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3c358     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3c35c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3c360     DC E5 33 F9 |                             getword d, total, #0            'get line width
3c364     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3c368     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3c36c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3c370     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3c374     C3 03 80 FD |                             jmp     #readmask               'continue filling
3c378                 | 	alignl
3c378                 | _usbnew_spin2_dat_
3c378                 |                 org     $000
3c378 000             | 
3c378 000             | usb_host_start
3c378 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3c37c 001             | 
3c37c 001 03 00 00 FF 
3c380 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3c384 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3c388 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3c38c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c390 006 29 70 63 FD |                 setq2   htmp
3c394 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3c398 008             | 
3c398 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3c39c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3c3a0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3c3a4 00b             | 
3c3a4 00b             | '------------------------------------------------------------------------------
3c3a4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3c3a4 00b             | ' special because the receiving function must not respond with either STALL or
3c3a4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3c3a4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3c3a4 00b             | ' corrupt packet, it must ignore the transaction
3c3a4 00b             | '------------------------------------------------------------------------------
3c3a4 00b             | ' On entry:
3c3a4 00b             | '   PTRA - start address of the SETUP data struct.
3c3a4 00b             | ' On exit:
3c3a4 00b             | '   retval - PID_ACK on success, otherwise error code.
3c3a4 00b             | '------------------------------------------------------------------------------
3c3a4 00b             | txn_setup
3c3a4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3c3a8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3c3ac 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3c3b0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3c3b4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3c3b8 010             | .setup
3c3b8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3c3bc 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c3c0 012 2D 00 64 AD |         if_z    ret
3c3c4 013 7C 0B B0 FD |                 call    #retry_wait
3c3c8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c3cc 015 2D 00 64 AD |         if_z    ret
3c3d0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3c3d4 017 E0 FF 9F FD |                 jmp     #.setup
3c3d8 018             | 
3c3d8 018             | '------------------------------------------------------------------------------
3c3d8 018             | ' IN/INTERRUPT transaction.
3c3d8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3c3d8 018             | '------------------------------------------------------------------------------
3c3d8 018             | ' On entry:
3c3d8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3c3d8 018             | '     CRC(b19..23).
3c3d8 018             | ' On exit:
3c3d8 018             | '------------------------------------------------------------------------------
3c3d8 018             | txn_in
3c3d8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3c3dc 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3c3e0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3c3e4 01b             | 
3c3e4 01b             |                 ' Fall through to urx_packet
3c3e4 01b             | 
3c3e4 01b             | '------------------------------------------------------------------------------
3c3e4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3c3e4 01b             | ' received are handshakes and IN DATAx.
3c3e4 01b             | '------------------------------------------------------------------------------
3c3e4 01b             | ' On entry:
3c3e4 01b             | ' On exit:
3c3e4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3c3e4 01b             | '     returned.
3c3e4 01b             | '------------------------------------------------------------------------------
3c3e4 01b             | urx_packet
3c3e4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3c3e8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c3ec 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3c3f0 01e 1A 92 63 FD |                 getct   hct2
3c3f4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3c3f8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3c3fc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3c400 022             | .wait_sop
3c400 022 22 A7 8A FA |                 rdpin   urx, dm
3c404 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c408 024 08 00 90 CD |         if_c    jmp     #.get_pid
3c40c 025 FC 25 CC FB |                 jnct2   #.wait_sop
3c410 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3c414 027             | .get_pid
3c414 027 28 02 B0 FD |                 call    #urx_next
3c418 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3c41c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3c420 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3c424 02b             | .chk_pid
3c424 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c428 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3c42c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3c430 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3c434 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3c438 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3c43c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3c440 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3c444 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3c448 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3c44c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3c450 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3c454 037             | .ack_resend
3c454 037 22 A7 82 FA |                 rqpin   urx, dm
3c458 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3c45c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3c460 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3c464 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3c468 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3c46c 03d             | .chk_eop
3c46c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c470 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3c474 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3c478 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3c47c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3c480 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3c484 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3c488 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3c48c 045 2D 00 64 FD |                 ret
3c490 046             | .idle
3c490 046 22 A7 82 FA |                 rqpin   urx, dm
3c494 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3c498 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3c49c 049 2D 00 64 FD |                 ret
3c4a0 04a             | 
3c4a0 04a             | '------------------------------------------------------------------------------
3c4a0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3c4a0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3c4a0 04a             | ' if one is required.
3c4a0 04a             | '------------------------------------------------------------------------------
3c4a0 04a             | ' On entry:
3c4a0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3c4a0 04a             | ' On exit:
3c4a0 04a             | '------------------------------------------------------------------------------
3c4a0 04a             | utx_token
3c4a0 04a 22 A7 82 FA |                 rqpin   urx, dm
3c4a4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3c4a8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3c4ac 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3c4b0 04e 34 0D B0 CD |         if_c    call    #utx_pre
3c4b4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3c4b8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3c4bc 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3c4c0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3c4c4 053             | .next_byte
3c4c4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3c4c8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3c4cc 055             | .wait
3c4cc 055 40 46 72 FD |                 testp   dp                      wc
3c4d0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3c4d4 057 23 03 08 FC |                 akpin   dp
3c4d8 058 22 A5 22 FC |                 wypin   utx, dm
3c4dc 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3c4e0 05a             | 
3c4e0 05a             | '------------------------------------------------------------------------------
3c4e0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3c4e0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3c4e0 05a             | '------------------------------------------------------------------------------
3c4e0 05a             | ' On entry:
3c4e0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3c4e0 05a             | '     CRC(b19..23).
3c4e0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3c4e0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3c4e0 05a             | ' On exit:
3c4e0 05a             | '------------------------------------------------------------------------------
3c4e0 05a             | txn_out
3c4e0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3c4e4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3c4e8 05c 00 00 C0 FF 
3c4ec 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3c4f0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3c4f4 05f             | 
3c4f4 05f             |                 ' Fall through to utx_data
3c4f4 05f             | 
3c4f4 05f             | '------------------------------------------------------------------------------
3c4f4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3c4f4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3c4f4 05f             | ' success/fail is not determined until the status stage of the transaction,
3c4f4 05f             | ' this routine is only concerned about the current DATAx packet.
3c4f4 05f             | '------------------------------------------------------------------------------
3c4f4 05f             | ' On entry:
3c4f4 05f             | '   PTRA - hub start address of the data to read.
3c4f4 05f             | '   pkt_cnt - data payload size.
3c4f4 05f             | ' On exit:
3c4f4 05f             | '------------------------------------------------------------------------------
3c4f4 05f             | utx_data
3c4f4 05f 22 A7 82 FA |                 rqpin   urx, dm
3c4f8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c4fc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3c500 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3c504 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3c508 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3c50c 065 D8 0C B0 CD |         if_c    call    #utx_pre
3c510 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3c514 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3c518 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3c51c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3c520 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3c524 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3c528 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3c52c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3c530 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3c534 06f             | .read_byte
3c534 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3c538 070 F0 00 B0 FD |                 call    #utx_byte
3c53c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3c540 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3c544 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3c548 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3c54c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3c550 076             | .send_crc
3c550 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3c554 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3c558 078 D0 00 B0 FD |                 call    #utx_byte
3c55c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3c560 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3c564 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3c568 07c             | 
3c568 07c             | '------------------------------------------------------------------------------
3c568 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3c568 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3c568 07c             | ' expects that the packet includes at least the CRC word.
3c568 07c             | '
3c568 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3c568 07c             | ' was requested, which makes it difficult to determine where the data stops
3c568 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3c568 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3c568 07c             | ' USB-16 expected residual value of 0xB001.
3c568 07c             | '
3c568 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3c568 07c             | ' so the caller can verify IN success before writing the data to its final
3c568 07c             | ' destination.
3c568 07c             | '------------------------------------------------------------------------------
3c568 07c             | ' On entry:
3c568 07c             | '   pkt_data - max byte count expected to be in the packet.
3c568 07c             | '   newb_flg - signals new byte ready when toggled.
3c568 07c             | ' On exit:
3c568 07c             | '   pkt_cnt - actual number of bytes read.
3c568 07c             | '------------------------------------------------------------------------------
3c568 07c             | urx_data
3c568 07c F7 75 03 F6 |                 mov     htmp2, pb
3c56c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3c570 07e 00 00 C0 FF 
3c574 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3c578 080 BA EF 03 F6 |                 mov     pb, htmp2
3c57c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3c580 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3c584 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3c588 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3c58c 085             | .wait_byte
3c58c 085             | ' In-line rx for max speed
3c58c 085 22 A7 82 FA |                 rqpin   urx, dm
3c590 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3c594 087 53 A5 02 F5 |                 and     utx, urx
3c598 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3c59c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3c5a0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3c5a4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3c5a8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3c5ac 08d DC FF 9F FD |                 jmp     #.wait_byte
3c5b0 08e             | .get_byte
3c5b0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3c5b4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3c5b8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3c5bc 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3c5c0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3c5c4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3c5c8 094             | .end_crc
3c5c8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3c5cc 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3c5d0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3c5d4 097 2D 00 64 1D |         if_a    ret
3c5d8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3c5d8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3c5d8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3c5d8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3c5d8 098 22 A7 82 FA |                 rqpin   urx, dm
3c5dc 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3c5e0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3c5e4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3c5e4 09b             | .chk_crc
3c5e4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3c5e8 09c 58 00 00 FF 
3c5ec 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3c5f0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3c5f4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3c5f8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3c5fc 0a1 34 09 B0 FD |                 call    #poll_waitx
3c600 0a2             | 
3c600 0a2             |                 ' Fall through to utx_handshake
3c600 0a2             | 
3c600 0a2             | '------------------------------------------------------------------------------
3c600 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3c600 0a2             | ' the appropriate IP delay has been inserted.
3c600 0a2             | '------------------------------------------------------------------------------
3c600 0a2             | ' On entry:
3c600 0a2             | '   retval - handshake PID to send.
3c600 0a2             | ' On exit:
3c600 0a2             | '   retval unchanged.
3c600 0a2             | '------------------------------------------------------------------------------
3c600 0a2             | utx_handshake
3c600 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3c604 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3c608 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3c60c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3c610 0a6 5F A5 02 F6 |                 mov     utx, retval
3c614 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3c618 0a8             | .idle
3c618 0a8 22 A7 82 FA |                 rqpin   urx, dm
3c61c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3c620 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3c624 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3c628 0ac 08 09 90 FD |                 jmp     #poll_waitx
3c62c 0ad             | 
3c62c 0ad             | '------------------------------------------------------------------------------
3c62c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3c62c 0ad             | '------------------------------------------------------------------------------
3c62c 0ad             | ' On entry:
3c62c 0ad             | '   utx - byte to transmit.
3c62c 0ad             | ' On exit:
3c62c 0ad             | '------------------------------------------------------------------------------
3c62c 0ad             | utx_byte
3c62c 0ad 40 46 72 FD |                 testp   dp                      wc
3c630 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3c634 0af 23 03 08 FC |                 akpin   dp
3c638 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3c63c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3c640 0b2             | 
3c640 0b2             | '------------------------------------------------------------------------------
3c640 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3c640 0b2             | '------------------------------------------------------------------------------
3c640 0b2             | ' On entry:
3c640 0b2             | ' On exit:
3c640 0b2             | '   retval - the byte read.
3c640 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3c640 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3c640 0b2             | '     received.
3c640 0b2             | '------------------------------------------------------------------------------
3c640 0b2             | urx_next
3c640 0b2 22 A7 8A FA |                 rdpin   urx, dm
3c644 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3c648 0b4 53 A5 02 F5 |                 and     utx, urx
3c64c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3c650 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3c654 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3c658 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3c65c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3c660 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3c664 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3c668 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3c66c 0bd 2D 00 64 FD |                 ret
3c670 0be             | 
3c670 0be             | '------------------------------------------------------------------------------
3c670 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3c670 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3c670 0be             | ' length, and the PID is not included in the CRC calculation:
3c670 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3c670 0be             | '  CRC5  ENDP ADDRESS PID
3c670 0be             | ' %00000_1111_1111111_xxxxxxxx
3c670 0be             | '------------------------------------------------------------------------------
3c670 0be             | ' On entry:
3c670 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3c670 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3c670 0be             | ' On exit:
3c670 0be             | '   ep_addr_pid - CRC value appended to the packet.
3c670 0be             | '------------------------------------------------------------------------------
3c670 0be             | calc_crc5
3c670 0be FF 03 00 FF 
3c674 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3c678 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3c67c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3c680 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3c684 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3c688 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3c68c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3c690 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3c694 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3c698 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3c69c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3c6a0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3c6a4 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3c6a8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3c6ac 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3c6b0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3c6b4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3c6b8 0d0             | 
3c6b8 0d0             | '------------------------------------------------------------------------------
3c6b8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3c6b8 0d0             | '------------------------------------------------------------------------------
3c6b8 0d0             | isr1_fsframe
3c6b8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3c6bc 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c6c0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c6c4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c6c8 0d4             | .wait
3c6c8 0d4 40 46 72 FD |                 testp   dp                      wc
3c6cc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3c6d0 0d6 23 03 08 FC |                 akpin   dp
3c6d4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3c6d8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3c6dc 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3c6e0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3c6e4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3c6e8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3c6ec 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3c6f0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3c6f4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3c6f8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3c6fc 0e1 2C FF BF FD |                 call    #utx_byte
3c700 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3c704 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3c708 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3c70c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3c710 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3c714 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3c718 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3c71c 0e9 5B A5 42 F5 |                 or      utx, icrc
3c720 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3c724 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3c728 0ec 20 00 90 FD |                 jmp     #isr1_wait
3c72c 0ed             | isr1_lsframe
3c72c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3c730 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c734 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c738 0f0             | .wait
3c738 0f0 40 46 72 FD |                 testp   dp                      wc
3c73c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3c740 0f2 23 03 08 FC |                 akpin   dp
3c744 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3c748 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3c74c 0f5             | isr1_wait
3c74c 0f5 22 A5 82 FA |                 rqpin   utx, dm
3c750 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3c754 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3c758 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3c75c 0f9 03 00 00 FF 
3c760 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3c764 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3c768 0fc F5 FF 3B FB |                 reti1
3c76c 0fd             | 
3c76c 0fd             | '------------------------------------------------------------------------------
3c76c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3c76c 0fd             | ' transaction will complete before the next frame is triggered.
3c76c 0fd             | '------------------------------------------------------------------------------
3c76c 0fd             | ' On entry:
3c76c 0fd             | ' On exit:
3c76c 0fd             | '------------------------------------------------------------------------------
3c76c 0fd             | wait_txn_ok
3c76c 0fd 1A 74 63 FD |                 getct   htmp2
3c770 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3c774 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c778 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3c77c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3c780 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3c784 103 2D 00 64 FD |                 ret
3c788 104             | 
3c788 104             | '------------------------------------------------------------------------------
3c788 104             | ' A device connection was detected, or a bus reset was requested by the USB
3c788 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3c788 104             | ' and perform a reset sequence prior to device enumeration.
3c788 104             | '------------------------------------------------------------------------------
3c788 104             | dev_reset
3c788 104 22 A7 82 FA |                 rqpin   urx, dm
3c78c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3c790 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3c794 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3c798 108             | reset
3c798 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3c79c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3c7a0 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3c7a4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3c7a8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3c7ac 10d 1A 92 62 FD |                 getct   iframe_ct_base
3c7b0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3c7b4 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3c7b8 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3c7bc 111 24 70 07 F1 |                 add     htmp, #36
3c7c0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3c7c4 113             | .framewait
3c7c4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3c7c8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3c7cc 115 2D 00 64 FD |                 ret
3c7d0 116             | 
3c7d0 116             | '------------------------------------------------------------------------------
3c7d0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3c7d0 116             | '------------------------------------------------------------------------------
3c7d0 116             | ' On entry:
3c7d0 116             | '   PTRA - source address.
3c7d0 116             | '   PB - destination address.
3c7d0 116             | '   hr0 - length of copy, in bytes.
3c7d0 116             | ' On exit:
3c7d0 116             | '------------------------------------------------------------------------------
3c7d0 116             | hmemcpy
3c7d0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3c7d4 117 F7 71 43 FC |                 wrbyte  htmp, pb
3c7d8 118 01 EE 07 F1 |                 add     pb, #1
3c7dc 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3c7e0 11a             | 
3c7e0 11a             | '------------------------------------------------------------------------------
3c7e0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3c7e0 11a             | ' loop until the errant device is disconnected.
3c7e0 11a             | '------------------------------------------------------------------------------
3c7e0 11a             | ' On entry:
3c7e0 11a             | ' On exit:
3c7e0 11a             | '------------------------------------------------------------------------------
3c7e0 11a             | host_error
3c7e0 11a             |           if ERROR_LED >= 0
3c7e0 11a             |           end
3c7e0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3c7e4 11b             | 
3c7e4 11b             | '------------------------------------------------------------------------------
3c7e4 11b             | ' Get HID descriptor buffer for current port
3c7e4 11b             | '------------------------------------------------------------------------------
3c7e4 11b             | ' On entry:
3c7e4 11b             | ' On exit:
3c7e4 11b             | '   PB - HID descriptor buffer pointer
3c7e4 11b             | '------------------------------------------------------------------------------
3c7e4 11b             | get_hid_descr_buffer
3c7e4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3c7e8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3c7ec 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3c7f0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3c7f4 11f             | 
3c7f4 11f             | 
3c7f4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3c7f8 120             | 
3c7f8 120             | ' USB commands and error codes
3c7f8 120 00 00 00 00 | cmd_data        long    0
3c7fc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3c800 122             | 
3c800 122             | ' Parameters block assigned at cog startup
3c800 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3c804 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3c808 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3c80c 125             | if ACTIVITY_LED >= 0
3c80c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3c80c 125             | end
3c80c 125             | if ERROR_LED >= 0
3c80c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3c80c 125             | end
3c80c 125 00 00 00 00 | hid_descr_p     long    0
3c810 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3c810 126             | 'hkbd_report_p   long    0
3c810 126 00 00 00 00 | hub_descr_p     long    0
3c814 127 00 00 00 00 | urx_buff_p      long    0
3c818 128 00 00 00 00 | dev_desc_buff_p long    0
3c81c 129 00 00 00 00 | con_desc_buff_p long    0
3c820 12a 00 00 00 00 | cache_start_p   long    0
3c824 12b 00 00 00 00 | cache_end_p     long    0
3c828 12c             | if EMUPAD_MAX_PLAYER > 0
3c828 12c             | emupad_out_ptr  long    0
3c828 12c             | end
3c828 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3c82c 12d             | 
3c82c 12d             | hdev_init_start
3c82c 12d             | hdev_port       res     1
3c82c 12d             | hdev_port       res     1
3c82c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3c82c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3c82c 12d             | kbm_next_datax  res     1
3c82c 12d             | kbm_next_datax  res     1
3c82c 12d             | hub_intf_num    res     1
3c82c 12d             | hub_intf_num    res     1
3c82c 12d             | hub_next_datax  res     1
3c82c 12d             | hub_next_datax  res     1
3c82c 12d             | hub_status_chg  res     1
3c82c 12d             | hub_status_chg  res     1
3c82c 12d             | hub_port_status res     1
3c82c 12d             | hub_port_status res     1
3c82c 12d             | if HAVE_MOUSE
3c82c 12d             | ms_intf_num     res     1
3c82c 12d             | ms_intf_num     res     1
3c82c 12d             | ms_in_max_pkt   res     1
3c82c 12d             | ms_in_max_pkt   res     1
3c82c 12d             | end
3c82c 12d             | kb_intf_num     res     1
3c82c 12d             | kb_intf_num     res     1
3c82c 12d             | kb_interval     res     1
3c82c 12d             | kb_interval     res     1
3c82c 12d             | kb_in_max_pkt   res     1
3c82c 12d             | kb_in_max_pkt   res     1
3c82c 12d             | kb_max_index    res     1
3c82c 12d             | kb_max_index    res     1
3c82c 12d             | kb_led_states   res     1
3c82c 12d             | kb_led_states   res     1
3c82c 12d             | gp_intf_num     res     1
3c82c 12d             | gp_intf_num     res     1
3c82c 12d             | gp_interval     res     1
3c82c 12d             | gp_interval     res     1
3c82c 12d             | gp_max_index    res     1
3c82c 12d             | gp_max_index    res     1
3c82c 12d             | gp_descr_len    res     1+MAX_DEVICES
3c82c 12d             | gp_descr_len    res     1+MAX_DEVICES
3c82c 12d             | hdev_init_end
3c82c 12d             | 
3c82c 12d             | ' Initialized at cog startup:
3c82c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3c82c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3c82c 12d             | iframe_ct_new   res     1
3c82c 12d             | iframe_ct_new   res     1
3c82c 12d             | iframe_ct_base  res     1
3c82c 12d             | iframe_ct_base  res     1
3c82c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3c82c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3c82c 12d             | 
3c82c 12d             | ' This register block is reset to zero when a USB device connects
3c82c 12d             | hreg_init_start
3c82c 12d             | hstatus         res     1         ' Host status flags
3c82c 12d             | hstatus         res     1         ' Host status flags
3c82c 12d             | hctwait         res     1         ' Poll-based wait clocks
3c82c 12d             | hctwait         res     1         ' Poll-based wait clocks
3c82c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3c82c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3c82c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3c82c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3c82c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3c82c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3c82c 12d             | xfer_retry      res     1         ' Control transfer retry count
3c82c 12d             | xfer_retry      res     1         ' Control transfer retry count
3c82c 12d             | retry           res     1         ' Transaction retry count
3c82c 12d             | retry           res     1         ' Transaction retry count
3c82c 12d             | utx             res     1         ' Byte to transmit on USB
3c82c 12d             | utx             res     1         ' Byte to transmit on USB
3c82c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3c82c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3c82c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3c82c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3c82c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3c82c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3c82c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3c82c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3c82c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3c82c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3c82c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3c82c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3c82c 12d             | frame           res     1         ' USB 1ms frame counter value
3c82c 12d             | frame           res     1         ' USB 1ms frame counter value
3c82c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3c82c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3c82c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3c82c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3c82c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3c82c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3c82c 12d             | crc             res     1         ' Used for CRC16 calculation
3c82c 12d             | crc             res     1         ' Used for CRC16 calculation
3c82c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3c82c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3c82c 12d             | retval          res     1         ' Global success/fail return parameter
3c82c 12d             | retval          res     1         ' Global success/fail return parameter
3c82c 12d             | context_retval  res     1         ' Operation contextual return parameter
3c82c 12d             | context_retval  res     1         ' Operation contextual return parameter
3c82c 12d             | ' Device stuff
3c82c 12d             | hdev_id         res     1+MAX_DEVICES
3c82c 12d             | hdev_id         res     1+MAX_DEVICES
3c82c 12d             | hdev_bcd        res     1
3c82c 12d             | hdev_bcd        res     1
3c82c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3c82c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3c82c 12d             | ' Keyboard/mouse stuff
3c82c 12d             | hctrl_ep_addr   res     1
3c82c 12d             | hctrl_ep_addr   res     1
3c82c 12d             | hctrl_max_pkt   res     1
3c82c 12d             | hctrl_max_pkt   res     1
3c82c 12d             | hconfig_base    res     1
3c82c 12d             | hconfig_base    res     1
3c82c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3c82c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3c82c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3c82c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3c82c 12d             | hdev_class      res     1
3c82c 12d             | hdev_class      res     1
3c82c 12d             | hdev_subclass   res     1
3c82c 12d             | hdev_subclass   res     1
3c82c 12d             | hdev_protocol   res     1
3c82c 12d             | hdev_protocol   res     1
3c82c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3c82c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3c82c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3c82c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3c82c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3c82c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3c82c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3c82c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3c82c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3c82c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3c82c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3c82c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3c82c 12d             | if HAVE_MOUSE
3c82c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3c82c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3c82c 12d             | end
3c82c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3c82c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3c82c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3c82c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3c82c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3c82c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3c82c 12d             | hdev_out_addr   res     1
3c82c 12d             | hdev_out_addr   res     1
3c82c 12d             | 
3c82c 12d             | if EMUPAD_MAX_PLAYER > 0
3c82c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3c82c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3c82c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3c82c 12d             | end
3c82c 12d             | 
3c82c 12d             | hreg_init_end
3c82c 12d             | 
3c82c 12d             | hidr_start
3c82c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3c82c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3c82c 12d             | hidr_flags      res     1
3c82c 12d             | hidr_flags      res     1
3c82c 12d             | hidr_axis       res     3
3c82c 12d             | hidr_axis       res     3
3c82c 12d             | hidr_buttons    res     1
3c82c 12d             | hidr_buttons    res     1
3c82c 12d             | hidr_hats       res     1
3c82c 12d             | hidr_hats       res     1
3c82c 12d             | '' Above are actually useful values, 6 longs
3c82c 12d             | hidr_id         res     1
3c82c 12d             | hidr_id         res     1
3c82c 12d             | hidr_state      res     1
3c82c 12d             | hidr_state      res     1
3c82c 12d             | hidr_size       res     1
3c82c 12d             | hidr_size       res     1
3c82c 12d             | hidr_count      res     1
3c82c 12d             | hidr_count      res     1
3c82c 12d             | hidr_offset     res     1
3c82c 12d             | hidr_offset     res     1
3c82c 12d             | hidr_usage_idx  res     1
3c82c 12d             | hidr_usage_idx  res     1
3c82c 12d             | hidr_lminmax    res     1
3c82c 12d             | hidr_lminmax    res     1
3c82c 12d             | hidr_pminmax    res     1
3c82c 12d             | hidr_pminmax    res     1
3c82c 12d             | hidr_type       res     1
3c82c 12d             | hidr_type       res     1
3c82c 12d             | hidr_end
3c82c 12d             | 
3c82c 12d             | ' Variables dependent on the system freqency
3c82c 12d             | _var_64_lower_  res     1
3c82c 12d             | _var_64_lower_  res     1
3c82c 12d             | _var_64_upper_  res     1
3c82c 12d             | _var_64_upper_  res     1
3c82c 12d             | _12Mbps_        res     1
3c82c 12d             | _12Mbps_        res     1
3c82c 12d             | _1_5Mbps_       res     1
3c82c 12d             | _1_5Mbps_       res     1
3c82c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3c82c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3c82c 12d             | _1us_           res     1         ' 1us
3c82c 12d             | _1us_           res     1         ' 1us
3c82c 12d             | _10us_          res     1         ' 10us
3c82c 12d             | _10us_          res     1         ' 10us
3c82c 12d             | _33us_          res     1         ' 33us
3c82c 12d             | _33us_          res     1         ' 33us
3c82c 12d             | _txn_err_       res     1         ' 250us
3c82c 12d             | _txn_err_       res     1         ' 250us
3c82c 12d             | _500us_         res     1         ' 500us
3c82c 12d             | _500us_         res     1         ' 500us
3c82c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3c82c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3c82c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3c82c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3c82c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3c82c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3c82c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3c82c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3c82c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3c82c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3c82c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3c82c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3c82c 12d             | _preamble_wait_ res     1
3c82c 12d             | _preamble_wait_ res     1
3c82c 12d             | _1ms_           res     1         ' 1ms
3c82c 12d             | _1ms_           res     1         ' 1ms
3c82c 12d             | _2ms_           res     1         ' 2ms
3c82c 12d             | _2ms_           res     1         ' 2ms
3c82c 12d             | _suspend_wait_  res     1         ' 3ms
3c82c 12d             | _suspend_wait_  res     1         ' 3ms
3c82c 12d             | _4ms_           res     1         ' 4ms
3c82c 12d             | _4ms_           res     1         ' 4ms
3c82c 12d             | _xfer_wait_     res     1         ' 5ms
3c82c 12d             | _xfer_wait_     res     1         ' 5ms
3c82c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3c82c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3c82c 12d             | _reset_hold_    res     1         ' 15ms
3c82c 12d             | _reset_hold_    res     1         ' 15ms
3c82c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3c82c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3c82c 12d             | _21ms_          res     1         ' 21ms
3c82c 12d             | _21ms_          res     1         ' 21ms
3c82c 12d             | _100ms_         res     1         ' 100ms
3c82c 12d             | _100ms_         res     1         ' 100ms
3c82c 12d             | _500ms_         res     1         ' 500ms
3c82c 12d             | _500ms_         res     1         ' 500ms
3c82c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3c82c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3c82c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3c82c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3c82c 12d             | '------------------------------------------------------------------------------
3c82c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3c82c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3c82c 12d             | _usb_d_ls_nco_  res     1
3c82c 12d             | _usb_d_ls_nco_  res     1
3c82c 12d             | _usb_h_fs_nco_  res     1
3c82c 12d             | _usb_h_fs_nco_  res     1
3c82c 12d             | _usb_d_fs_nco_  res     1
3c82c 12d             | _usb_d_fs_nco_  res     1
3c82c 12d             | '------------------------------------------------------------------------------
3c82c 12d             | ' Scratch registers
3c82c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3c82c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3c82c 12d             | htmp1           res     1
3c82c 12d             | htmp1           res     1
3c82c 12d             | htmp2           res     1
3c82c 12d             | htmp2           res     1
3c82c 12d             | htmp3           res     1
3c82c 12d             | htmp3           res     1
3c82c 12d             | hrep            res     1         ' Repeat count
3c82c 12d             | hrep            res     1         ' Repeat count
3c82c 12d             | hsave0          res     1         ' Subroutine parameter saves
3c82c 12d             | hsave0          res     1         ' Subroutine parameter saves
3c82c 12d             | hsave1          res     1
3c82c 12d             | hsave1          res     1
3c82c 12d             | hsave2          res     1
3c82c 12d             | hsave2          res     1
3c82c 12d             | isrtmp1         res     1
3c82c 12d             | isrtmp1         res     1
3c82c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3c82c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3c82c 12d             | hr0             res     1         ' Multi-purpose registers
3c82c 12d             | hr0             res     1         ' Multi-purpose registers
3c82c 12d             | hr1             res     1
3c82c 12d             | hr1             res     1
3c82c 12d             | hr2             res     1
3c82c 12d             | hr2             res     1
3c82c 12d             | hr3             res     1
3c82c 12d             | hr3             res     1
3c82c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3c82c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3c82c 12d             | hpar2           res     1
3c82c 12d             | hpar2           res     1
3c82c 12d             | hpar3           res     1
3c82c 12d             | hpar3           res     1
3c82c 12d             | hct2            res     1         ' Function response bus turn-around timer
3c82c 12d             | hct2            res     1         ' Function response bus turn-around timer
3c82c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3c82c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3c82c 12d             | mod_cnt         res     1         ' Used in idle loops
3c82c 12d             | mod_cnt         res     1         ' Used in idle loops
3c82c 12d             |                 fit     $1F0
3c82c 12d             |                 org     $200
3c82c 200             | hlut_start
3c82c 200             | 
3c82c 200             | '------------------------------------------------------------------------------
3c82c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3c82c 200             | ' settings to startup defaults.
3c82c 200             | '------------------------------------------------------------------------------
3c82c 200             | ' On entry:
3c82c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3c82c 200             | '------------------------------------------------------------------------------
3c82c 200             | set_speed_full
3c82c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3c830 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3c834 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3c838 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3c83c 204             | '                ret                             wcz     ' Restore caller flags on exit
3c83c 204             | 
3c83c 204             | '------------------------------------------------------------------------------
3c83c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3c83c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3c83c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3c83c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3c83c 204             | ' putting the smart pins into reset.
3c83c 204             | '------------------------------------------------------------------------------
3c83c 204             | ' On entry:
3c83c 204             | ' On exit: CZ flags restored to caller states
3c83c 204             | '------------------------------------------------------------------------------
3c83c 204             | set_speed_low
3c83c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3c840 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3c844 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3c848 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3c84c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3c850 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3c854 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3c858 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3c85c 20c             | 
3c85c 20c             | '------------------------------------------------------------------------------
3c85c 20c             | ' Perform configuration stuff required when a device intitially connects.
3c85c 20c             | '------------------------------------------------------------------------------
3c85c 20c             | ' On entry:
3c85c 20c             | ' On exit:
3c85c 20c             | '------------------------------------------------------------------------------
3c85c 20c             | on_connect
3c85c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3c860 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3c864 20e             | .retry
3c864 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3c868 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3c86c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3c870 211 00 08 00 FF 
3c874 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3c878 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3c87c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c880 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3c884 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3c888 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3c88c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c890 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3c894 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3c898 21b 4C 03 B0 FD |                 call    #poll_waitx
3c89c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3c8a0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3c8a4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3c8a8 21f B8 FF 9F FD |                 jmp     #.retry
3c8ac 220             | .get_dev_desc
3c8ac 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3c8b0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3c8b4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3c8b8 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3c8bc 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3c8c0 225 88 FB BF FD |                 call    #reset
3c8c4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3c8c8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c8cc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3c8d0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3c8d4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8d8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3c8dc 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3c8e0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3c8e4 22e 04 00 00 FF 
3c8e8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3c8ec 230 34 FA BF FD |                 call    #calc_crc5
3c8f0 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3c8f4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c8f8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3c8fc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3c900 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3c904 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3c908 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c90c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3c910 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3c914 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3c918 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3c91c 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3c920 23d C4 02 B0 FD |                 call    #poll_waitx
3c924 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3c928 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3c92c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3c930 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3c934 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3c938 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c93c 244 2D 00 64 5D |         if_nz   ret
3c940 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3c944 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3c948 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3c94c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3c950 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3c954 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3c958 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3c95c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3c960 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3c964 24e 2C FB 9F CD |         if_b    jmp     #host_error
3c968 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3c96c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c970 251 2D EC 63 FD |                 call    pa
3c974 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3c978 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3c97c 254 2C EC 63 FD |                 jmp     pa
3c980 255             | 
3c980 255             | '------------------------------------------------------------------------------
3c980 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3c980 255             | ' Status reporting is always in the function-to-host direction.
3c980 255             | '------------------------------------------------------------------------------
3c980 255             | ' On entry:
3c980 255             | '   PTRA - start address of the SETUP data in hub.
3c980 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3c980 255             | '     stage.
3c980 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3c980 255             | ' On exit:
3c980 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3c980 255             | '     contains the count of data stage bytes actually received, which must
3c980 255             | '     always be <= the count requested.
3c980 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3c980 255             | '     more specific USB operation error code.
3c980 255             | '------------------------------------------------------------------------------
3c980 255             | control_read
3c980 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3c984 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3c988 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3c98c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3c990 259             | .xfer_start
3c990 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3c994 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3c998 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c99c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3c9a0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3c9a4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3c9a8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3c9ac 260 61 00 00 FF 
3c9b0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3c9b4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3c9b8 263             | .data
3c9b8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3c9bc 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3c9c0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3c9c4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3c9c8 267             | .nak_retry
3c9c8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3c9cc 268             | .in_retry
3c9cc 268 BC F6 BF FD |                 call    #txn_in
3c9d0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3c9d4 26a 28 00 90 AD |         if_z    jmp     #.commit
3c9d8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3c9dc 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3c9e0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3c9e4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3c9e8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3c9ec 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3c9f0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3c9f4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3c9f8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3c9fc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3ca00 275             | .commit
3ca00 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3ca04 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3ca08 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3ca0c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3ca10 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3ca14 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3ca18 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3ca1c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3ca20 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3ca24 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3ca28 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3ca2c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3ca30 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3ca34 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3ca38 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3ca3c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3ca40 285             | .pre_status
3ca40 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3ca44 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3ca48 287 00 B0 06 F6 |                 mov     pkt_data, #0
3ca4c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3ca50 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3ca54 28a 61 00 00 FF 
3ca58 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3ca5c 28c             | .out_retry
3ca5c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3ca60 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ca64 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3ca68 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3ca6c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3ca70 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3ca74 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3ca78 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3ca7c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ca80 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3ca84 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3ca88 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3ca88 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3ca88 297             | ' ControlRead() transfer gets things unstuck most of the time...
3ca88 297             | .xfer_retry
3ca88 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3ca8c 298 58 01 B0 FD |                 call    #poll_waitx
3ca90 299 8C F9 BF FD |                 call    #wait_txn_ok
3ca94 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3ca98 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3ca9c 29c C8 EF 03 F6 |                 mov     pb, hpar3
3caa0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3caa4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3caa8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3caac 2a0             | 
3caac 2a0             | '------------------------------------------------------------------------------
3caac 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3caac 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3caac 2a0             | ' the SETUP data struct is filled with the required values.
3caac 2a0             | '------------------------------------------------------------------------------
3caac 2a0             | ' On entry:
3caac 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3caac 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3caac 2a0             | '     stage.
3caac 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3caac 2a0             | ' On exit:
3caac 2a0             | '   retval - used to convey the success/failure of each stage.
3caac 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3caac 2a0             | '     more specific USB operation error code.
3caac 2a0             | '------------------------------------------------------------------------------
3caac 2a0             | control_write
3caac 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3cab0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3cab4 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3cab8 2a3             | 
3cab8 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3cabc 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3cac0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3cac4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3cac8 2a7             | .xfer_start
3cac8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3cacc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3cad0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3cad4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cad8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3cadc 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3cae0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3cae4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3cae8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3caec 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3caf0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3caf4 2b2             | .data
3caf4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3caf8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3cafc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3cb00 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3cb04 2b6             | .out_retry
3cb04 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3cb08 2b7 88 F6 BF FD |                 call    #txn_out
3cb0c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cb10 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3cb14 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3cb18 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3cb1c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3cb20 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3cb24 2be             | .commit
3cb24 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3cb28 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3cb2c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3cb30 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3cb34 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3cb38 2c3             | pre_status_in
3cb38 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3cb3c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3cb40 2c5             | .status_retry
3cb40 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3cb44 2c6 44 F5 BF FD |                 call    #txn_in
3cb48 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3cb4c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3cb50 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3cb54 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3cb58 2cb 2D 00 64 AD |         if_z    ret
3cb5c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3cb60 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3cb64 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3cb68 2cf             | '               ret                                     ' Caller must handle transfer retirement
3cb68 2cf             | 
3cb68 2cf             | '------------------------------------------------------------------------------
3cb68 2cf             | ' Execute an IN interrupt transaction.
3cb68 2cf             | '------------------------------------------------------------------------------
3cb68 2cf             | ' On entry:
3cb68 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3cb68 2cf             | '   hpar2 - Address of the IN data buffer
3cb68 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3cb68 2cf             | ' On exit:
3cb68 2cf             | '   retval - the result of the operation.
3cb68 2cf             | '   hpar3 - the count of IN data bytes actually received.
3cb68 2cf             | '------------------------------------------------------------------------------
3cb68 2cf             | do_int_in
3cb68 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3cb6c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3cb70 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3cb74 2d2             | 
3cb74 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3cb78 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3cb7c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3cb80 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3cb84 2d6             | .retry
3cb84 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3cb88 2d7 00 F5 BF FD |                 call    #txn_in
3cb8c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3cb90 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3cb94 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3cb98 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3cb9c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3cba0 2dd 54 00 B0 FD |                 call    #retry_wait
3cba4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3cba8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3cbac 2e0 D4 FF 9F FD |                 jmp     #.retry
3cbb0 2e1             | .commit
3cbb0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3cbb4 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3cbb8 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3cbbc 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3cbc0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3cbc4 2e6             | .post_ret
3cbc4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3cbc8 2e7             | 
3cbc8 2e7             | 
3cbc8 2e7             | '------------------------------------------------------------------------------
3cbc8 2e7             | ' Resets the downstream hub port to FS
3cbc8 2e7             | '------------------------------------------------------------------------------
3cbc8 2e7             | dwnstream_reset
3cbc8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3cbcc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3cbd0 2e9             | 
3cbd0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3cbd4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3cbd8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3cbdc 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3cbe0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3cbe4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3cbe8 2ef             | 
3cbe8 2ef             | '------------------------------------------------------------------------------
3cbe8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3cbe8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3cbe8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3cbe8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3cbe8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3cbe8 2ef             | '------------------------------------------------------------------------------
3cbe8 2ef             | ' On entry:
3cbe8 2ef             | '   hctwait - wait interval in sysclocks.
3cbe8 2ef             | ' On exit:
3cbe8 2ef             | '------------------------------------------------------------------------------
3cbe8 2ef             | poll_waitx
3cbe8 2ef 1A 92 63 FD |                 getct   hct2
3cbec 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3cbf0 2f1             | .wait
3cbf0 2f1 FF 25 CC FB |                 jnct2   #.wait
3cbf4 2f2 2D 00 64 FD |                 ret
3cbf8 2f3             | 
3cbf8 2f3             | '------------------------------------------------------------------------------
3cbf8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3cbf8 2f3             | '------------------------------------------------------------------------------
3cbf8 2f3             | ' On entry:
3cbf8 2f3             | '   retval - transaction response PID or error code.
3cbf8 2f3             | ' On exit:
3cbf8 2f3             | '------------------------------------------------------------------------------
3cbf8 2f3             | retry_wait
3cbf8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3cbfc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3cc00 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3cc04 2f6 14 00 90 AD |         if_z    jmp     #.nak
3cc08 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3cc0c 2f8 D8 FF BF FD |                 call    #poll_waitx
3cc10 2f9             | .dec
3cc10 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3cc14 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3cc18 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3cc1c 2fc             | .nak
3cc1c 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3cc20 2fd C4 FF BF FD |                 call    #poll_waitx
3cc24 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3cc28 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3cc2c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3cc30 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3cc34 302 2D 00 64 FD |                 ret
3cc38 303             | 
3cc38 303             | host_reset
3cc38 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3cc3c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3cc40 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3cc40 305 BD 01 05 FF 
3cc44 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3cc48 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3cc4c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3cc50 309             | ' Check to see if the system clock has been changed.
3cc50 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3cc54 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3cc58 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3cc5c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3cc60 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3cc64 30e 40 46 62 FD |                 dirl    dp
3cc68 30f             | 
3cc68 30f 28 02 64 FD |                 setq    #1
3cc6c 310 80 00 80 FF 
3cc70 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3cc74 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3cc78 313             | .enable
3cc78 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3cc7c 314 41 46 62 FD |                 dirh    dp
3cc80 315 1F 36 63 FD |                 waitx   _1us_
3cc84 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3cc88 317             | 
3cc88 317             |                 ' Handle Port protection enable and startup delay
3cc88 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3cc8c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3cc90 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3cc94 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3cc98 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3cc9c 31c             | 
3cc9c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3cca0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3cca4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3cca8 31f 00 00 04 F6 |                 mov     0-0, #0
3ccac 320             | .regloop
3ccac 320             | 
3ccac 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3ccac 320             | 
3ccac 320             | discon_entry
3ccac 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3ccb0 321             | 
3ccb0 321             |               
3ccb0 321             |         if HAVE_HIDPAD
3ccb0 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3ccb4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ccb8 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3ccbc 324 F7 01 68 FC |                 wrlong  #0,pb
3ccc0 325             |         end
3ccc0 325             |         if EMUPAD_MAX_PLAYER > 0
3ccc0 325             |         end
3ccc0 325             | 
3ccc0 325             |                 ' Fall through to disconnected loop
3ccc0 325             | 
3ccc0 325             | '-----------------------------------------------------------------------------------------------------------------
3ccc0 325             | ' Device connect handling (Section 7.1.7.3).
3ccc0 325             | '-----------------------------------------------------------------------------------------------------------------
3ccc0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3ccc0 325             | ' device to connect (Section 7.1.7.3).
3ccc0 325             | '-----------------------------------------------------------------------------------------------------------------
3ccc0 325             | disconnected
3ccc0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3ccc4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3ccc8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3cccc 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3ccd0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3ccd4 32a             |         if ACTIVITY_LED >= 0
3ccd4 32a             |         end
3ccd4 32a 22 A7 82 FA |                 rqpin   urx, dm
3ccd8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3ccdc 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3cce0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3cce4 32e             | .se1_test
3cce4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3cce8 32f FC FE BF FD |                 call    #poll_waitx
3ccec 330 22 A7 82 FA |                 rqpin   urx, dm
3ccf0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ccf4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3ccf8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3ccfc 334             | .se1            'SE1 is a fatal error condition
3ccfc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3cd00 335 E4 FE BF FD |                 call    #poll_waitx
3cd04 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3cd08 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3cd0c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3cd0c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3cd10 339 22 A7 82 FA |                 rqpin   urx, dm
3cd14 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3cd18 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3cd1c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3cd20 33d             | connected
3cd20 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3cd24 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3cd28 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3cd2c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3cd30 341             | .set_pulse
3cd30 341 1A 64 63 FD |                 getct   _pulse_time_
3cd34 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3cd38 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3cd38 343             | ' of 1ms and make a correction, if necessary.
3cd38 343             | '                mov     htmp, _1ms_
3cd38 343             | '                subs    htmp, iframe_delta
3cd38 343             | '                adds    _frame1ms_clks_, htmp
3cd38 343             | '                debug(udec(_frame1ms_clks_))
3cd38 343             | 
3cd38 343             |                 ' Fall through to idle/processing loop
3cd38 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3cd3c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3cd40 345             | 
3cd40 345             | hidle
3cd40 345 22 A7 82 FA |                 rqpin   urx, dm
3cd44 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3cd48 347 98 00 90 CD |         if_c    jmp     #.se0_test
3cd4c 348 24 06 70 FD |                 pollct3                         wc
3cd50 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3cd54 34a 1A 94 63 FD |                 getct   hct3
3cd58 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3cd5c 34c             | 
3cd5c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3cd60 34d 00 70 E3 F8 |                 getbyte htmp
3cd64 34e             | 
3cd64 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3cd68 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3cd6c 350 40 00 90 AD |         if_z    jmp     #.poll
3cd70 351             | 
3cd70 351             |         if _HAVE_GAMEPAD
3cd70 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3cd74 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3cd78 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3cd7c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3cd80 355 2C 00 90 AD |         if_z    jmp     #.poll
3cd84 356             |         end
3cd84 356             | 
3cd84 356             |         if HAVE_MOUSE
3cd84 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3cd88 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3cd8c 358 20 00 90 AD |         if_z    jmp     #.poll
3cd90 359             |         end
3cd90 359             | 
3cd90 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3cd94 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3cd98 35b 14 00 90 AD |         if_z    jmp     #.poll
3cd9c 35c             | 
3cd9c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3cda0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3cda4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3cda8 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3cdac 360             |         if HAVE_MOUSE
3cdac 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3cdb0 361             |         else
3cdb0 361             |         end
3cdb0 361             | 
3cdb0 361             | .poll
3cdb0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3cdb4 362 2D EC 63 FD |                 call    pa
3cdb8 363             | .skip_poll
3cdb8 363             | 
3cdb8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3cdbc 364             | 
3cdbc 364             | .nopoll
3cdbc 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3cdc0 365 44 00 90 AD |         if_z    jmp     #hsuspend
3cdc4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3cdc8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3cdcc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3cdd0 369 1A 84 63 FD |                 getct   hr0
3cdd4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3cdd8 36b             |         if ACTIVITY_LED >= 0
3cdd8 36b             |         end
3cdd8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3cddc 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3cde0 36d 5C FF 9F FD |                 jmp     #hidle
3cde4 36e             | ' Check for extended SE0 state on the bus
3cde4 36e             | .se0_test
3cde4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3cde8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3cdec 370 22 A7 82 FA |                 rqpin   urx, dm
3cdf0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3cdf4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3cdf8 373 24 F6 BF FD |                 call    #wait_txn_ok
3cdfc 374 00 00 80 FF 
3ce00 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3ce04 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3ce04 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3ce08 377             | 
3ce08 377             | hsuspend
3ce08 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3ce0c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3ce10 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3ce14 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3ce18 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3ce1c 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3ce20 37d             | 
3ce20 37d             |                 ' Fall through to resume wait loop
3ce20 37d             | 
3ce20 37d             | hwait_resume
3ce20 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3ce24 37e 02 86 47 F0 |                 shr     hr1, #2
3ce28 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3ce2c 380             |         if ACTIVITY_LED >= 0
3ce2c 380             |         end
3ce2c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3ce30 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3ce34 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3ce38 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3ce3c 384 18 00 90 AD |         if_z    jmp     #.resume
3ce40 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3ce44 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ce48 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3ce4c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3ce50 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3ce54 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3ce58 38b             | .resume
3ce58 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3ce5c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3ce60 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3ce64 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3ce68 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3ce6c 390 1F 70 63 FD |                 waitx   htmp
3ce70 391 22 07 28 FC |                 wypin   #OUT_J, dm
3ce74 392 01 70 47 F0 |                 shr     htmp, #1
3ce78 393 1F 70 63 FD |                 waitx   htmp
3ce7c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ce80 395 1A 92 62 FD |                 getct   iframe_ct_base
3ce84 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3ce88 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3ce8c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3ce90 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3ce94 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3ce98 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3ce9c 39c             | 
3ce9c 39c             | '------------------------------------------------------------------------------
3ce9c 39c             | ' Send preamble to enable low-speed HUB ports
3ce9c 39c             | '------------------------------------------------------------------------------
3ce9c 39c             | ' On entry:
3ce9c 39c             | ' On exit:
3ce9c 39c             | '   USB baud rate set to low-speed
3ce9c 39c             | '------------------------------------------------------------------------------
3ce9c 39c             | utx_pre
3ce9c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3cea0 39d 40 46 62 FD |                 dirl    dp
3cea4 39e 28 02 64 FD |                 setq    #1
3cea8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3ceac 3a0 58 44 62 FD |                 drvl    dm
3ceb0 3a1 59 46 62 FD |                 drvh    dp
3ceb4 3a2             | 
3ceb4 3a2 1E 00 00 FF 
3ceb8 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3cebc 3a4             | 
3cebc 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3cec0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3cec4 3a6 28 02 64 3D |         if_nc   setq    #1
3cec8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3cecc 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3ced0 3a9             | .l1
3ced0 3a9             | 
3ced0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ced4 3aa 40 46 62 FD |                 dirl    dp
3ced8 3ab 28 02 64 FD |                 setq    #1
3cedc 3ac 80 00 80 FF 
3cee0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3cee4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3cee8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ceec 3b0 41 46 62 FD |                 dirh    dp
3cef0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3cef4 3b2             | 
3cef4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3cef8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3cefc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3cf00 3b5             | 
3cf00 3b5             | hlut_end
3cf00 3b5             |                 fit     $400
3cf00 3b5             |                 orgh
3cf00                 | if OVERLAP_MEMORY
3cf00                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3cf00                 | end
3cf00                 | '------------------------------------------------------------------------------
3cf00                 | ' Routines called from cog space.
3cf00                 | '------------------------------------------------------------------------------
3cf00                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3cf00                 | '------------------------------------------------------------------------------
3cf00                 | 
3cf00                 | '------------------------------------------------------------------------------
3cf00                 | ' USB host cog initialization.
3cf00                 | '------------------------------------------------------------------------------
3cf00                 | usb_host_init
3cf00                 |                 ' Initialize buffer pointers
3cf00                 |         if OVERLAP_MEMORY
3cf00                 |         else
3cf00     40 15 B0 FE |                 loc     pb, #hid_descr
3cf04                 |         end
3cf04     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3cf08                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3cf08                 |                 {
3cf08                 |                 }
3cf08                 |         
3cf08                 |                 {
3cf08                 |                 }
3cf08                 |                 'loc     pb,#hkbd_report
3cf08                 |                 'mov     hkbd_report_p,pb
3cf08                 | 
3cf08     08 1D B0 FE |                 loc     pb, #hub_descr
3cf0c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3cf10     1D 1D B0 FE |                 loc     pb, #urx_buff
3cf14     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3cf18     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3cf1c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3cf20     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3cf24     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3cf28     18 15 B0 FE |                 loc     pb, #usb_cache_start
3cf2c     F7 55 02 F6 |                 mov     cache_start_p, pb
3cf30     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3cf34     F7 57 02 F6 |                 mov     cache_end_p, pb
3cf38                 | 
3cf38                 |         if ERROR_LED >= 0
3cf38                 |         end
3cf38                 | 
3cf38                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3cf38                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3cf38                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3cf38                 | ' Configure and enable the Serial Host USB port.
3cf38     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3cf3c                 | 
3cf3c                 | '------------------------------------------------------------------------------
3cf3c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3cf3c                 | '------------------------------------------------------------------------------
3cf3c                 | ' On entry:
3cf3c                 | '   htmp - current CLKFREQ value.
3cf3c                 | '------------------------------------------------------------------------------
3cf3c                 | hinit_usb_timings
3cf3c                 | '                getct   htmp2
3cf3c     B8 59 02 F6 |                 mov     save_sysclk, htmp
3cf40     8D 5B 80 FF 
3cf44     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3cf48     18 30 63 FD |                 getqx   _12Mbps_
3cf4c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3cf50     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3cf54     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3cf58     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3cf5c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3cf60     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3cf64     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3cf68     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3cf6c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3cf70     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3cf74     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3cf78     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3cf7c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3cf80     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3cf84     80 00 00 FF 
3cf88     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3cf8c     18 2C 63 FD |                 getqx   _var_64_lower_
3cf90     19 2E 63 FD |                 getqy   _var_64_upper_
3cf94     28 2C 63 FD |                 setq    _var_64_lower_
3cf98     65 CD 1D FF 
3cf9c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3cfa0     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3cfa4     01 00 00 FF 
3cfa8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3cfac     18 2C 63 FD |                 getqx   _var_64_lower_
3cfb0     19 2E 63 FD |                 getqy   _var_64_upper_
3cfb4     28 2C 63 FD |                 setq    _var_64_lower_
3cfb8     A1 07 00 FF 
3cfbc     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3cfc0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3cfc4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3cfc8     09 36 57 F0 |                 shr     _1us_, #9               wc
3cfcc     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3cfd0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3cfd4     18 38 63 FD |                 getqx   _10us_
3cfd8     09 38 57 F0 |                 shr     _10us_, #9              wc
3cfdc     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3cfe0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3cfe4     18 3A 63 FD |                 getqx   _33us_
3cfe8     09 3A 57 F0 |                 shr     _33us_, #9              wc
3cfec     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3cff0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3cff4     18 3C 63 FD |                 getqx   _txn_err_
3cff8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3cffc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3d000     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3d004     18 3E 63 FD |                 getqx   _500us_
3d008     09 3E 57 F0 |                 shr     _500us_, #9             wc
3d00c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3d010     01 00 00 FF 
3d014     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3d018     18 40 63 FD |                 getqx   _txn_ok_ls_
3d01c     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3d020     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3d024     01 00 00 FF 
3d028     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3d02c     18 42 63 FD |                 getqx   _txn_ok_fs_
3d030     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3d034     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3d038     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3d03c     05 00 00 FF 
3d040     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3d044     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3d048     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3d04c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3d050     1C 00 00 FF 
3d054     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3d058     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3d05c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3d060     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3d064     00 00 00 FF 
3d068     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3d06c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3d070     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3d074     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3d078     04 00 00 FF 
3d07c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3d080     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3d084     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3d088     8D 5B 00 FF 
3d08c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3d090     18 4C 63 FD |                 getqx   _preamble_wait_
3d094     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3d098     01 00 00 FF 
3d09c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3d0a0     18 2C 63 FD |                 getqx   _var_64_lower_
3d0a4     19 2E 63 FD |                 getqy   _var_64_upper_
3d0a8     28 2C 63 FD |                 setq    _var_64_lower_
3d0ac     01 00 00 FF 
3d0b0     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3d0b4     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3d0b8     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3d0bc     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3d0c0     FF FF 7F FF 
3d0c4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3d0c8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3d0cc     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3d0d0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3d0d4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3d0d8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3d0dc     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3d0e0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3d0e4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3d0e8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3d0ec     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3d0f0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3d0f4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3d0f8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3d0fc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3d100     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3d104     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3d108     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3d10c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3d110     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3d114     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3d118     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3d11c     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3d120     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3d124     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3d128     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3d12c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3d130                 | '        _ret_   mov     _1sec_, save_sysclk
3d130                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3d130                 | '                ret
3d130                 | {
3d130                 | }
3d130                 | 
3d130                 | '------------------------------------------------------------------------------
3d130                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3d130                 | ' one. If it is, start the task progression that will configure the device for
3d130                 | ' use.
3d130                 | '------------------------------------------------------------------------------
3d130                 | ' On entry:
3d130                 | '   hconfig_base - start address of the cached config descriptor chain.
3d130                 | ' On exit:
3d130                 | '------------------------------------------------------------------------------
3d130                 | hparse_con_desc
3d130     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3d134     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3d138     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3d13c     4E 70 FF F9 |                 movbyts htmp,#%%1032
3d140     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3d144                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3d144                 | 
3d144     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3d148     6E ED 03 F1 |                 add     pa, hconfig_base
3d14c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3d150                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3d150                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3d150                 | ' that defines a keyboard and/or mouse.
3d150     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3d154                 | .next_intf
3d154     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3d158     BC 01 90 3D |         if_ae   jmp     #hset_config
3d15c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3d160     75 F3 03 F1 |                 add     ptrb, hnext_desc
3d164     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3d168     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3d16c     0C 00 90 AD |         if_z    jmp     #.intf
3d170     80 71 C7 FA |                 rdbyte  htmp, ptrb
3d174     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3d178     D8 FF 9F FD |                 jmp     #.next_intf
3d17c                 | .intf
3d17c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3d180     00 90 07 F6 |                 mov     hpar3, #0
3d184     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3d188     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3d18c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3d190     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3d194                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3d194                 | 
3d194                 | .endp
3d194     80 71 C7 FA |                 rdbyte  htmp, ptrb
3d198     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3d19c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3d1a0     78 00 90 3D |         if_ae   jmp     #.get_device
3d1a4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3d1a8     75 F3 03 F1 |                 add     ptrb, hnext_desc
3d1ac     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3d1b0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3d1b4     64 00 90 AD |         if_z    jmp     #.get_device
3d1b8     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3d1bc     04 00 90 AD |         if_z    jmp     #.get_ep
3d1c0     D0 FF 9F FD |                 jmp     #.endp
3d1c4                 | .get_ep
3d1c4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3d1c8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3d1cc     0F 86 67 F0 |                 shl     hr1, #8 + 7
3d1d0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3d1d4     3F 00 00 FF 
3d1d8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3d1dc     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3d1e0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3d1e4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3d1e8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d1ec     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3d1f0     A0 FF 9F FD |                 jmp     #.endp
3d1f4                 | .in_ep
3d1f4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3d1f8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3d1fc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3d1fc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3d200     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3d204     8C FF 9F FD |                 jmp     #.endp
3d208                 | .out_ep
3d208     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3d20c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3d210                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3d210     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3d214     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3d218     78 FF 9F FD |                 jmp     #.endp
3d21c                 | 
3d21c                 | .get_device
3d21c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3d220     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3d224     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3d228     68 00 90 AD |         if_z    jmp     #.gamepad
3d22c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3d230     AC 00 90 AD |         if_z    jmp     #.hub
3d234     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3d238     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3d23c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3d240     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3d244     4C 00 90 AD |         if_z    jmp     #.gamepad
3d248     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3d24c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3d250                 | .keyboard
3d250     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3d254                 |         if HAVE_MOUSE
3d254     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3d258                 |         else
3d258                 |         end
3d258     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3d25c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3d260     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3d264     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3d268     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3d26c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3d270                 |                 'debug(udec(kb_intf_num))
3d270                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3d270     E0 FE 9F FD |                 jmp     #.next_intf
3d274                 | if HAVE_MOUSE
3d274                 | .mouse
3d274     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3d278     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3d27c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3d280     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3d284     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3d288                 |                 'getbyte ms_interval, hr2, #3
3d288     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3d28c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3d290                 |                 'debug(udec(kb_intf_num))
3d290                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3d290     C0 FE 9F FD |                 jmp     #.next_intf
3d294                 | end
3d294                 | .gamepad
3d294     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3d298     C7 71 63 F5 |                 xor     htmp, hpar2
3d29c     3F 00 00 FF 
3d2a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d2a4     AC FE 9F AD |         if_z    jmp     #.next_intf
3d2a8                 |         if HAVE_MOUSE
3d2a8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3d2ac     C7 71 63 F5 |                 xor     htmp, hpar2
3d2b0     3F 00 00 FF 
3d2b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d2b8     98 FE 9F AD |         if_z    jmp     #.next_intf
3d2bc                 |         end
3d2bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3d2c0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3d2c4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3d2c8                 | 
3d2c8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3d2cc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3d2d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d2d4     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3d2d8     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3d2dc                 |                 'debug(udec(gp_intf_num))
3d2dc                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3d2dc     74 FE 9F FD |                 jmp     #.next_intf
3d2e0                 | .hub
3d2e0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3d2e4     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3d2e8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3d2ec     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3d2f0     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3d2f4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3d2f8     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3d2fc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3d300     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3d304     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3d308     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d30c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3d310     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3d314                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3d314     3C FE 9F FD |                 jmp     #.next_intf
3d318                 | 
3d318                 | '------------------------------------------------------------------------------
3d318                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3d318                 | ' it according to its function, or functions. In the case of this boot protocol
3d318                 | ' keyboard/mouse class driver:
3d318                 | ' - SetConfiguration(config_num)
3d318                 | ' - SetProtocol(boot)
3d318                 | ' - SetIdle(indefinite)
3d318                 | ' - Enter the device interrupt IN polling task stage.
3d318                 | '------------------------------------------------------------------------------
3d318                 | ' On entry:
3d318                 | ' On exit:
3d318                 | '------------------------------------------------------------------------------
3d318                 | hset_config
3d318                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3d318                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3d318     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3d31c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d320     00 00 0C F2 |                 cmp     0-0, #0                 wz
3d324     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3d328                 |         if HAVE_MOUSE
3d328     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3d32c                 |         end
3d32c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3d330     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3d334                 | .set_config
3d334     6C 0E D0 FE |                 loc     ptra, #set_config
3d338     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3d33c     6E ED 03 F1 |                 add     pa, hconfig_base
3d340     F6 8D C3 FA |                 rdbyte  hpar1, pa
3d344     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3d348     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3d34c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3d350     A0 02 A0 FD |                 call    #control_write
3d354     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d358     2D 00 64 5D |         if_nz   ret
3d35c                 | .kbd_config
3d35c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3d360     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3d364                 | 
3d364     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3d368     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d36c     3F 00 00 FF 
3d370     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d374     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3d378                 | 
3d378     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3d37c     34 0E D0 FE |                 loc     ptra, #set_protocol
3d380     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3d384     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d388     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3d38c     A0 02 A0 FD |                 call    #control_write
3d390     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d394     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3d398     E4 02 90 5D |         if_nz   jmp     #.notify_client
3d39c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3d3a0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3d3a4     30 03 B0 FD |                 call    #hset_idle
3d3a8                 |                 'cmp     retval, #PID_ACK        wz
3d3a8                 |         'if_nz   mov     hkbd_ep_addr, #0
3d3a8                 |         'if_nz   jmp     #.notify_client
3d3a8     A8 99 02 F6 |                 mov     hctwait, _2ms_
3d3ac     EF 02 A0 FD |                 call    #poll_waitx
3d3b0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3d3b4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3d3b8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3d3bc     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3d3c0     2C 03 B0 FD |                 call    #hset_kbdled_report
3d3c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d3c8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3d3cc     B0 02 90 5D |         if_nz   jmp     #.notify_client
3d3d0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3d3d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d3d8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d3dc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3d3e0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3d3e4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3d3e8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3d3ec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3d3f0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3d3f4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3d3f8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3d3fc                 |         if !!HAVE_MOUSE
3d3fc                 |         end
3d3fc                 | 
3d3fc                 | .mouse_config
3d3fc                 | if HAVE_MOUSE
3d3fc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3d400     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3d404     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3d408     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d40c     3F 00 00 FF 
3d410     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d414     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3d418                 | 
3d418                 |                 debug("mouse passed addr check")
3d418                 | 
3d418     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3d41c     00 00 80 FF 
3d420     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3d424     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3d428     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d42c     55 02 A0 FD |                 call    #control_read
3d430     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d434     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3d438     44 02 90 5D |         if_nz   jmp     #.notify_client
3d43c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3d440     56 01 00 F6 |                 mov     0-0, total_data
3d444     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d448                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3d448                 | 
3d448     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3d44c     64 0D D0 FE |                 loc     ptra, #set_protocol
3d450     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3d454     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d458     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3d45c     A0 02 A0 FD |                 call    #control_write
3d460     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d464     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3d468     14 02 90 5D |         if_nz   jmp     #.notify_client
3d46c                 |                 debug("mouse passed SetProtocol")
3d46c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3d470     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3d474     60 02 B0 FD |                 call    #hset_idle
3d478                 |                 'cmp     retval, #PID_ACK        wz
3d478                 |         'if_nz   mov     hmouse_ep_addr, #0
3d478                 |         'if_nz   jmp     #.notify_client
3d478                 |                 debug("mouse passed SetIdle")
3d478     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3d47c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d480     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d484     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3d488     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3d48c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3d490     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3d494     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3d498     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3d49c     3F 00 00 FF 
3d4a0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3d4a4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3d4a8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3d4ac     D0 01 90 FD |                 jmp     #.notify_client
3d4b0                 | end
3d4b0                 | .gamepad_config
3d4b0                 | if _HAVE_GAMEPAD
3d4b0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d4b4     00 00 0C F2 |                 cmp     0-0, #0                 wz
3d4b8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3d4bc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d4c0     00 70 03 F6 |                 mov     htmp, 0-0
3d4c4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d4c8     3F 00 00 FF 
3d4cc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d4d0     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3d4d4                 | 
3d4d4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d4d8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3d4dc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d4e0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d4e4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3d4e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d4ec     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3d4f0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3d4f4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3d4f8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3d4fc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d500     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3d504     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3d508     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3d50c                 | 
3d50c                 |                 if EMUPAD_MAX_PLAYER > 0
3d50c                 |                 
3d50c                 | .rule_loop           
3d50c                 |                 end
3d50c                 | 
3d50c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3d510     5C 00 90 AD |         if_e    jmp     #.xinput
3d514     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3d518     00 70 03 F6 |                 mov     htmp,0-0
3d51c     01 A6 02 FF 
3d520     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3d524     7C 00 90 AD |         if_e    jmp     #.ps3
3d528                 | 
3d528     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3d52c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3d530     00 00 80 5F 
3d534     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3d538     03 00 80 AF 
3d53c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3d540     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3d544     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d548     55 02 A0 FD |                 call    #control_read
3d54c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d550     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3d554     00 00 04 56 |         if_nz   mov     0-0, #0
3d558     24 01 90 5D |         if_nz   jmp     #.notify_client
3d55c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3d560     56 01 00 F6 |                 mov     0-0, total_data
3d564     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3d568                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3d568                 | 
3d568     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3d56c     10 01 90 FD |                 jmp     #.notify_client
3d570                 | .xinput
3d570     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3d574     2D EF 03 F6 |                 mov     pb,hdev_port
3d578     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3d57c     03 EE 27 F3 |                 fle     pb,#3
3d580     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3d584     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3d588                 | 
3d588     03 B0 06 F6 |                 mov     pkt_data, #3
3d58c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3d590     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3d594     5A 00 A0 FD |                 call    #txn_out
3d598     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3d59c                 | 
3d59c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3d5a0     DC 00 90 FD |                 jmp     #.notify_client
3d5a4                 | .ps3
3d5a4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3d5a8     2D EF 03 F6 |                 mov     pb,hdev_port
3d5ac     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3d5b0     04 EE 27 F3 |                 fle     pb,#4
3d5b4     F7 EF C3 F9 |                 decod   pb
3d5b8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3d5bc                 | 
3d5bc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3d5c0     00 0C D0 FE |                 loc     ptra, #set_report
3d5c4     01 00 80 FF 
3d5c8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3d5cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d5d0     03 61 5C FC |                 wrword  #48, ptra[wLength]
3d5d4     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3d5d8     A0 02 A0 FD |                 call    #control_write
3d5dc                 | 
3d5dc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3d5e0     E0 0B D0 FE |                 loc     ptra, #set_report
3d5e4     01 00 80 FF 
3d5e8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3d5ec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d5f0     03 09 5C FC |                 wrword  #4, ptra[wLength]
3d5f4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3d5f8     A0 02 A0 FD |                 call    #control_write
3d5fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3d600     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3d604     00 00 04 56 |         if_nz   mov     0-0, #0
3d608     74 00 90 5D |         if_nz   jmp     #.notify_client
3d60c                 | 
3d60c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3d610     6C 00 90 FD |                 jmp     #.notify_client
3d614                 | end
3d614                 | 
3d614                 | .hub_config
3d614     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3d618     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3d61c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3d620     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3d624     3F 00 00 FF 
3d628     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3d62c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3d630                 | 
3d630     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3d634     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3d638     26 EF 03 F6 |                 mov     pb, hub_descr_p
3d63c     55 02 A0 FD |                 call    #control_read
3d640     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d644     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3d648     34 00 90 5D |         if_nz   jmp     #.notify_client
3d64c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3d64c                 | 
3d64c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3d650     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3d654     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3d658                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3d658                 | .pwr_loop
3d658     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3d65c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3d660     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3d664     A0 02 A0 FD |                 call    #control_write
3d668     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3d66c                 | 
3d66c     B1 99 02 F6 |                 mov     hctwait, _500ms_
3d670     B0 99 02 F1 |                 add     hctwait, _100ms_
3d674     EF 02 A0 FD |                 call    #poll_waitx
3d678                 | 
3d678     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3d67c     00 00 90 FD |                 jmp     #.notify_client
3d680                 | 
3d680                 | .notify_client
3d680     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d684     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3d688                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3d688                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3d688     2D 00 64 FD |                 ret
3d68c                 | 
3d68c                 | '------------------------------------------------------------------------------
3d68c                 | ' Initialize the keyboard/mouse data area to start-up values.
3d68c                 | '------------------------------------------------------------------------------
3d68c                 | ' On entry:
3d68c                 | ' On exit:
3d68c                 | '------------------------------------------------------------------------------
3d68c                 | init_kbdm_data
3d68c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3d690     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3d694                 | 
3d694     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3d698     2B ED 03 F6 |                 mov     pa, cache_end_p
3d69c                 | .loop
3d69c     61 01 4C FC |                 wrbyte  #0, ptra++
3d6a0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3d6a4     F4 FF 9F CD |         if_b    jmp     #.loop
3d6a8                 |         
3d6a8                 |         if EMUPAD_MAX_PLAYER > 0
3d6a8                 |         end
3d6a8                 | 
3d6a8                 | 
3d6a8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3d6ac                 | .regloop
3d6ac     00 EC 8F F9 |                 altd    pa
3d6b0     00 00 04 F6 |                 mov     0-0, #0
3d6b4     01 EC 07 F1 |                 add     pa, #1
3d6b8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3d6bc     EC FF 9F 5D |         if_nz   jmp     #.regloop
3d6c0                 | 
3d6c0     E1 E1 61 FF 
3d6c4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3d6c8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3d6cc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3d6d0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3d6d4                 | 
3d6d4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3d6d8                 | 
3d6d8                 | '------------------------------------------------------------------------------
3d6d8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3d6d8                 | ' function.
3d6d8                 | '------------------------------------------------------------------------------
3d6d8                 | ' On entry:
3d6d8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3d6d8                 | '   hpar2 - index number of the target interface.
3d6d8                 | ' On exit:
3d6d8                 | '------------------------------------------------------------------------------
3d6d8                 | hset_idle
3d6d8     A8 99 02 F6 |                 mov     hctwait, _2ms_
3d6dc     EF 02 A0 FD |                 call    #poll_waitx
3d6e0     D8 0A D0 FE |                 loc     ptra, #set_idle
3d6e4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3d6e8     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3d6ec     A0 02 80 FD |                 jmp     #control_write
3d6f0                 | 
3d6f0                 | '------------------------------------------------------------------------------
3d6f0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3d6f0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3d6f0                 | '------------------------------------------------------------------------------
3d6f0                 | ' On entry:
3d6f0                 | '   ep_addr_pid - device address and enpoint for the request.
3d6f0                 | ' On exit:
3d6f0                 | '   retval - transaction result.
3d6f0                 | '------------------------------------------------------------------------------
3d6f0                 | hset_kbdled_report
3d6f0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3d6f4     CC 0A D0 FE |                 loc     ptra, #set_report
3d6f8     01 00 80 FF 
3d6fc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3d700     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3d704     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3d708     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d70c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3d710     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3d714                 | 
3d714                 | '------------------------------------------------------------------------------
3d714                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3d714                 | '------------------------------------------------------------------------------
3d714                 | ' On entry:
3d714                 | ' On exit:
3d714                 | '------------------------------------------------------------------------------
3d714                 | hget_kbd_in_report
3d714     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3d718     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3d71c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3d720     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3d724     CF 02 A0 FD |                 call    #do_int_in
3d728     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d72c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d730                 | 
3d730     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d734     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d738                 | 
3d738     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3d73c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d740     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3d744     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3d748                 | 
3d748     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3d74c     18 00 B0 FD |                 call    #hkbd_compare
3d750                 |         if EMUPAD_MAX_PLAYER > 0
3d750                 |         end
3d750                 | 
3d750                 | .led_check
3d750     3B 71 03 F6 |                 mov     htmp, kb_led_states
3d754     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3d758     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3d75c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3d760     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3d764     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3d768                 | 
3d768                 | '------------------------------------------------------------------------------
3d768                 | ' Compare current and previous keyboard data buffers for keypress changes.
3d768                 | '------------------------------------------------------------------------------
3d768                 | hkbd_compare
3d768     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3d76c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3d770     61 73 07 FB |                 rdlong  htmp1, ptra++
3d774     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3d778     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3d77c     61 73 07 FB |                 rdlong  htmp1, ptra++
3d780     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3d784     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3d788     2D 00 64 AD |         if_z    ret
3d78c                 | 
3d78c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3d790                 | 
3d790                 |                 ' Handle modifiers
3d790     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3d794     00 87 C7 FA |                 rdbyte  hr1, ptra
3d798     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3d79c     63 86 63 FD |                 mergew  hr1
3d7a0     08 EC 07 F6 |                 mov     pa,#8
3d7a4                 | .modloop
3d7a4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3d7a8     E8 8C 07 F6 |                 mov     hpar1,#$E8
3d7ac     F6 8D 83 F1 |                 sub     hpar1,pa
3d7b0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3d7b4     FB ED 6F FB |                 djnz    pa,#.modloop
3d7b8                 | 
3d7b8     6F E0 75 FD | .release        modc    _set    wc
3d7bc                 |                 'alts    hdev_port, #hid_report_p
3d7bc                 |                 'mov     ptra, hid_report_p
3d7bc     02 F0 07 F1 |                 add     ptra, #2
3d7c0     06 EC 07 F6 |                 mov     pa, #6
3d7c4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3d7c8     20 00 90 AD |         if_z    jmp     #.rl3
3d7cc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3d7d0     02 F2 07 F1 |                 add     ptrb, #2
3d7d4     06 EE 07 F6 |                 mov     pb, #6
3d7d8     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3d7dc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3d7e0     08 00 90 AD |         if_z    jmp     #.rl3
3d7e4     FC EF 6F FB |                 djnz    pb, #.rl2
3d7e8     68 00 B0 FD |                 call    #hkbd_translate
3d7ec     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3d7f0                 | 
3d7f0     00 90 07 F6 |                 mov     hpar3, #0
3d7f4     1F 90 27 F4 |                 bith    hpar3, #31
3d7f8                 | 
3d7f8     6F 00 74 FD | .press          modc    _clr    wc
3d7fc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3d800     02 F0 07 F1 |                 add     ptra, #2
3d804     06 EC 07 F6 |                 mov     pa, #6
3d808     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3d80c     20 00 90 AD |         if_z    jmp     #.pl3
3d810     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3d814     02 F2 07 F1 |                 add     ptrb, #2
3d818     06 EE 07 F6 |                 mov     pb, #6
3d81c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3d820     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3d824     08 00 90 AD |         if_z    jmp     #.pl3
3d828     FC EF 6F FB |                 djnz    pb, #.pl2
3d82c     24 00 B0 FD |                 call    #hkbd_translate
3d830     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3d834                 | 
3d834     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3d838     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3d83c     28 02 64 FD |                 setq #1
3d840     61 73 07 FB |                 rdlong  htmp1, ptra++
3d844     28 02 64 FD |                 setq #1
3d848     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3d84c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3d850                 | 
3d850     2D 00 64 FD |                 ret
3d854                 | 
3d854                 | '------------------------------------------------------------------------------
3d854                 | ' Translate keyboard scancode to ASCII
3d854                 | '------------------------------------------------------------------------------
3d854                 | ' On entry:
3d854                 | '   hpar1 - scancode
3d854                 | '   hpar2 - key modifiers state
3d854                 | '       c - pressed (0) or released (1) flag
3d854                 | ' On exit:
3d854                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3d854                 | '               30..17 = unused
3d854                 | '                   18 = scroll-lock state 
3d854                 | '                   17 = caps-lock state
3d854                 | '                   16 = num-lock state 
3d854                 | '                15..8 = key modifiers state
3d854                 | '                 7..0 = scancode
3d854                 | '------------------------------------------------------------------------------
3d854                 | hkbd_translate
3d854     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3d858     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3d85c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3d860     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3d864     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3d868     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3d86c                 | 
3d86c                 |         if EMUPAD_MAX_PLAYER > 0
3d86c                 | 
3d86c                 |         if EMUPAD_BT0_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT1_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT2_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT3_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT4_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT5_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT6_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT7_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT8_BIT >= 0
3d86c                 |         end
3d86c                 |         if EMUPAD_BT9_BIT >= 0
3d86c                 |         end
3d86c                 | 
3d86c                 |         end
3d86c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3d870     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3d874     1F 8C 47 F4 |                 bitc    hpar1, #31
3d878                 |         if KEYQUEUE_SIZE > 0
3d878     C4 09 B0 FE |                 loc pb,#keyq_head
3d87c     F7 71 E3 FA |                 rdword htmp,pb
3d880     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3d884     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3d888     B8 75 03 F6 |                 mov htmp2,htmp
3d88c     04 74 07 FA |                 mul htmp2,#4
3d890     F7 75 03 F1 |                 add htmp2,pb
3d894     02 74 07 F1 |                 add htmp2,#2
3d898     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3d89c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3d8a0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3d8a4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3d8a8                 |         end
3d8a8     2D 00 7C FD |                 ret wcz
3d8ac                 | 
3d8ac                 | if HAVE_MOUSE
3d8ac                 | '------------------------------------------------------------------------------
3d8ac                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3d8ac                 | '------------------------------------------------------------------------------
3d8ac                 | ' On entry:
3d8ac                 | ' On exit:
3d8ac                 | '------------------------------------------------------------------------------
3d8ac                 | hget_mouse_in_report
3d8ac     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3d8b0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3d8b4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3d8b8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3d8bc     CF 02 A0 FD |                 call    #do_int_in
3d8c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d8c4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d8c8                 | 
3d8c8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d8cc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d8d0                 | 
3d8d0     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3d8d4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d8d8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3d8dc     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3d8e0                 | 
3d8e0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3d8e4     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3d8e8     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3d8ec     01 90 87 31 |         if_ae   sub     hpar3, #1
3d8f0                 | 
3d8f0     40 09 90 FE |                 loc     pa, #mouse_limits
3d8f4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3d8f8                 | 
3d8f8                 |                 ' load xacc,yacc,zacc
3d8f8     28 04 64 FD |                 setq    #3-1
3d8fc     80 87 07 FB |                 rdlong  hr1,ptrb
3d900                 |                 ' load limits and outptr
3d900     28 04 64 FD |                 setq    #3-1
3d904     F6 73 03 FB |                 rdlong  htmp1,pa
3d908                 | 
3d908     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3d90c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3d910     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3d914     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3d918     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3d91c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3d920     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3d924     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3d928                 |               
3d928                 | 
3d928     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3d92c     07 70 67 F7 |                 signx   htmp, #7
3d930     B8 87 03 F1 |                 add     hr1,htmp
3d934     00 72 0F F2 |                 cmp     htmp1,#0 wz
3d938     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3d93c     00 86 47 53 |         if_ne   fges    hr1,#0
3d940                 | 
3d940     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3d944     07 70 67 F7 |                 signx   htmp, #7
3d948     B8 89 03 F1 |                 add     hr2,htmp
3d94c     00 74 0F F2 |                 cmp     htmp2,#0 wz
3d950     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3d954     00 88 47 53 |         if_ne   fges    hr2,#0
3d958                 |                 
3d958                 | 
3d958     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3d95c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3d960     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3d964     B8 8B 03 A1 |         if_z    add     hr3,htmp
3d968                 | 
3d968     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3d96c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3d970                 | 
3d970                 |                 ' write back accumulators
3d970     28 04 64 FD |                 setq    #3-1
3d974     80 87 67 FC |                 wrlong  hr1,ptrb
3d978                 |                 ' if outptr set, write X/Y words
3d978     00 76 0F F2 |                 cmp htmp3,#0                    wz
3d97c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3d980     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3d984     2D 00 64 FD |                 ret
3d988                 | end
3d988                 | 
3d988                 | '------------------------------------------------------------------------------
3d988                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3d988                 | '------------------------------------------------------------------------------
3d988                 | ' On entry:
3d988                 | ' On exit:
3d988                 | '------------------------------------------------------------------------------
3d988                 | if _HAVE_GAMEPAD
3d988                 | hget_gp_in_report
3d988     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3d98c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3d990                 | 
3d990     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3d994     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3d998     00 90 E3 F8 |                 getbyte hpar3
3d99c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3d9a0     CF 02 A0 FD |                 call    #do_int_in
3d9a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d9a8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3d9ac                 | 
3d9ac     00 90 0F F2 |                 cmp     hpar3, #0               wz
3d9b0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3d9b4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3d9b4                 | 
3d9b4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3d9b8     00 70 E3 F8 |                 getbyte htmp                            ' |
3d9bc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3d9c0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3d9c4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3d9c8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3d9cc     B8 01 C0 F8 |                 setbyte htmp                            ' |
3d9d0                 | 
3d9d0                 | ' Note: the following code compares the current and previous reports
3d9d0                 | ' and process the data if there are changes to ease the debug output.
3d9d0                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3d9d0                 | ' gpPreReport buffer.
3d9d0                 | 
3d9d0                 |                 ' ----- start of block to remove
3d9d0                 |                 {
3d9d0                 |                 }
3d9d0                 |                 ' ----- end of block to remove
3d9d0     F4 04 90 FE |                 loc pa,#hpad_translate
3d9d4     2A EC 63 FD |                 push pa
3d9d8                 | 
3d9d8                 |                 ' FALL THROUGH !!!!
3d9d8                 | 
3d9d8                 | '------------------------------------------------------------------------------
3d9d8                 | ' Decode controller report
3d9d8                 | '------------------------------------------------------------------------------
3d9d8                 | hid_decode
3d9d8                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3d9d8     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3d9dc     00 04 00 FF 
3d9e0     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3d9e4                 | 
3d9e4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3d9e8                 | 
3d9e8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d9ec     00 2A E3 F8 |                 getbyte hidr_type
3d9f0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3d9f4     34 02 90 AD |         if_z    jmp     #hpad_xinput
3d9f8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3d9fc     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3da00     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3da04     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3da08     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3da0c                 |                 
3da0c                 | 
3da0c                 | '------------------------------------------------------------------------------
3da0c                 | ' Handle HID controller (or mouse now
3da0c                 | ' On entry:
3da0c                 | '   ptrb - controller report
3da0c                 | '------------------------------------------------------------------------------
3da0c                 | hpad_hid
3da0c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3da10     F7 F1 03 F6 |                 mov     ptra, pb
3da14     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3da18     00 EC 03 F6 |                 mov     pa, 0-0
3da1c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3da1c     19 2A 3B FF 
3da20     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3da24                 | 
3da24                 | .next
3da24     00 EC 5F F2 |                 cmps    pa, #0      wcz
3da28     2D 00 7C ED |         if_be   ret     wcz
3da2c                 | 
3da2c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3da30     01 EC 87 F1 |                 sub     pa, #1
3da34     00 8E 07 F6 |                 mov     hpar2, #0
3da38                 | 
3da38     C6 71 03 F6 |                 mov     htmp, hpar1
3da3c     03 70 07 F5 |                 and     htmp, #$03
3da40     01 70 0F F2 |                 cmp     htmp, #1    wz
3da44     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3da48     07 8E 67 A7 |         if_z    signx   hpar2,#7
3da4c     01 EC 87 A1 |         if_z    sub     pa, #1
3da50     02 70 0F F2 |                 cmp     htmp, #2    wz
3da54     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3da58     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3da5c     02 EC 87 A1 |         if_z    sub     pa, #2
3da60     03 70 0F F2 |                 cmp     htmp, #3    wz
3da64     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3da68     04 EC 87 A1 |         if_z    sub     pa, #4
3da6c                 | 
3da6c     FC 8C 07 F5 |                 and     hpar1, #$FC
3da70                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3da70                 | 
3da70     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3da74     0C 01 90 AD |         if_z    jmp     #.report_id
3da78     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3da7c     24 01 90 AD |         if_z    jmp     #.usage_page
3da80     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3da84     2C 01 90 AD |         if_z    jmp     #.usage
3da88     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3da8c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3da90     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3da94     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3da98     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3da9c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3daa0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3daa4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3daa8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3daac     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3dab0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3dab4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3dab8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3dabc     64 FF 9F 5D |         if_nz   jmp     #.next
3dac0                 | 
3dac0     D8 1D A7 FB |                 tjf     hidr_state,#.next
3dac4                 | 
3dac4     03 8E 07 F5 |                 and     hpar2, #$03
3dac8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3dacc     18 00 90 5D |         if_nz   jmp     #.skip
3dad0                 | 
3dad0     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3dad4     20 00 90 AD |         if_z    jmp     #.axes
3dad8     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3dadc     5C 00 90 AD |         if_z    jmp     #.hats
3dae0     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3dae4     70 00 90 AD |         if_z    jmp     #.buttons
3dae8                 | .skip
3dae8     8F 71 03 F6 |                 mov     htmp, hidr_size
3daec     90 71 03 FA |                 mul     htmp, hidr_count
3daf0     B8 23 03 F1 |                 add     hidr_offset, htmp
3daf4     2C FF 9F FD |                 jmp     #.next
3daf8                 | .axes
3daf8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3daf8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3dafc     90 87 03 F6 |                 mov     hr1, hidr_count
3db00                 | .l1
3db00     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3db04     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3db08     04 03 B0 FD |                 call    #hpad_getbits
3db0c     64 03 B0 FD |                 call    #hpad_normalize
3db10     06 84 1F F2 |                 cmp     hr0, #6         wcz
3db14     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3db18     00 88 43 C8 |         if_b    getnib  hr2
3db1c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3db20     5F 01 20 C9 |         if_b    setword retval
3db24     01 84 07 C1 |         if_b    add     hr0, #1
3db28     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3db2c     F4 87 6F FB |                 djnz    hr1, #.l1
3db30                 | 
3db30     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3db34     01 1C 07 F6 |                 mov     hidr_state, #1
3db38     E8 FE 9F FD |                 jmp     #.next
3db3c                 | .hats
3db3c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3db3c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3db40     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3db44     C8 02 B0 FD |                 call    #hpad_getbits
3db48     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3db4c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3db50     01 1C 07 F6 |                 mov     hidr_state, #1
3db54     90 FF 9F FD |                 jmp     #.skip
3db58                 | .buttons
3db58                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3db58     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3db5c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3db60     90 8F 03 FA |                 mul     hpar2, hidr_count
3db64     A8 02 B0 FD |                 call    #hpad_getbits
3db68     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3db6c     B8 BF 62 F0 |                 shl     retval, htmp
3db70     5F 17 43 F5 |                 or      hidr_buttons, retval
3db74     90 71 03 F1 |                 add     htmp, hidr_count
3db78     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3db7c     01 1C 07 F6 |                 mov     hidr_state, #1
3db80     64 FF 9F FD |                 jmp     #.skip
3db84                 | .report_id
3db84     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3db88     2D 00 7C 5D |         if_nz   ret     wcz
3db8c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3db90     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3db94     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3db98     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3db9c     01 F2 87 51 |         if_nz   sub     ptrb,#1
3dba0     80 FE 9F FD |                 jmp     #.next
3dba4                 | .usage_page
3dba4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3dba8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3dbac     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3dbb0     70 FE 9F FD |                 jmp     #.next
3dbb4                 | .usage
3dbb4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3dbb8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3dbbc     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3dbc0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3dbc4     5C FE 9F AD |         if_z    jmp     #.next
3dbc8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3dbcc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3dbd0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3dbd4     4C FE 9F AD |         if_z    jmp     #.next
3dbd8     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3dbdc     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3dbe0     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3dbe4     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3dbe8     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3dbec     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3dbf0     10 00 90 AD |         if_z    jmp     #.usage_axis
3dbf4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3dbf8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3dbfc     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3dc00     20 FE 9F FD |                 jmp     #.next
3dc04                 | .usage_axis
3dc04     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3dc08     18 FE 9F CD |         if_b    jmp     #.next
3dc0c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3dc10     C7 01 00 F8 |                 setnib  hpar2
3dc14                 | 
3dc14     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3dc18     C7 8F C3 F9 |                 decod   hpar2
3dc1c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3dc20                 | 
3dc20     01 24 07 F1 |                 add     hidr_usage_idx, #1
3dc24     02 1C 07 F6 |                 mov     hidr_state, #2
3dc28     F8 FD 9F FD |                 jmp     #.next
3dc2c                 | 
3dc2c                 | '------------------------------------------------------------------------------
3dc2c                 | ' Handle XInput controller
3dc2c                 | ' On entry:
3dc2c                 | '   ptrb - controller report
3dc2c                 | '------------------------------------------------------------------------------
3dc2c                 | '   Default implementation translates the report to a pseudo-defacto hid
3dc2c                 | '   standard and jumps to hpad_translate for actions.
3dc2c                 | '   Implementors may take specific actions for this kind of controller.
3dc2c                 | '------------------------------------------------------------------------------
3dc2c                 | hpad_xinput
3dc2c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3dc30     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3dc34     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3dc38     14 70 0F F2 |                 cmp     htmp, #$14      wz
3dc3c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3dc40                 | 
3dc40                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3dc40                 | 
3dc40     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3dc44     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3dc48                 | 
3dc48     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3dc4c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3dc50     5F BF 22 F6 |                 not     retval
3dc54     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3dc58     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3dc5c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3dc60     5F BF 22 F6 |                 not     retval
3dc64     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3dc68                 | 
3dc68     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3dc6c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3dc70     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3dc74     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3dc78     F8 01 B0 FD |                 call    #hpad_normalize
3dc7c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3dc80     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3dc84     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3dc88     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3dc8c     E4 01 B0 FD |                 call    #hpad_normalize
3dc90     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3dc94                 | 
3dc94     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3dc98     81 BF E6 FA |                 rdword  retval, ptrb[1]
3dc9c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3dca0     00 16 47 F4 |                 bitc    hidr_buttons, #0
3dca4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3dca8     01 16 47 F4 |                 bitc    hidr_buttons, #1
3dcac     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3dcb0     02 16 47 F4 |                 bitc    hidr_buttons, #2
3dcb4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3dcb8     03 16 47 F4 |                 bitc    hidr_buttons, #3
3dcbc     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3dcc0     04 16 47 F4 |                 bitc    hidr_buttons, #4
3dcc4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3dcc8     05 16 47 F4 |                 bitc    hidr_buttons, #5
3dccc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3dcd0     08 16 47 F4 |                 bitc    hidr_buttons, #8
3dcd4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3dcd8     09 16 47 F4 |                 bitc    hidr_buttons, #9
3dcdc     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3dce0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3dce4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3dce8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3dcec     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3dcf0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3dcf4                 | 
3dcf4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3dcf8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3dcfc     7A BB 7A FF 
3dd00     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3dd04     F9 FF 7F FF 
3dd08     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3dd0c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3dd10     00 70 43 F8 |                 getnib  htmp
3dd14     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3dd18                 | 
3dd18     AC 01 90 FD |                 jmp     #hpad_translate
3dd1c                 | 
3dd1c                 | '------------------------------------------------------------------------------
3dd1c                 | ' Handle PS3 controller
3dd1c                 | ' On entry:
3dd1c                 | '   ptrb - controller report
3dd1c                 | '------------------------------------------------------------------------------
3dd1c                 | '   Default implementation translates the report to a pseudo-defacto hid
3dd1c                 | '   standard and jumps to hpad_translate for actions.
3dd1c                 | '   Implementors may take specific actions for this kind of controller.
3dd1c                 | '------------------------------------------------------------------------------
3dd1c                 | hpad_ps3
3dd1c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3dd20     01 70 0F F2 |                 cmp     htmp, #$01      wz
3dd24     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3dd28                 | 
3dd28                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3dd28                 | 
3dd28     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3dd2c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3dd30     40 01 B0 FD |                 call    #hpad_normalize
3dd34     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3dd38     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3dd3c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3dd40     30 01 B0 FD |                 call    #hpad_normalize
3dd44     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3dd48     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3dd4c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3dd50     20 01 B0 FD |                 call    #hpad_normalize
3dd54     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3dd58     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3dd5c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3dd60     10 01 B0 FD |                 call    #hpad_normalize
3dd64     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3dd68     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3dd6c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3dd70                 | 
3dd70     08 8C 07 F6 |                 mov     hpar1, #8
3dd74     13 8E 07 F6 |                 mov     hpar2, #19
3dd78     94 00 B0 FD |                 call    #hpad_getbits
3dd7c                 | 
3dd7c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3dd80     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3dd84     00 16 47 F4 |                 bitc    hidr_buttons, #0
3dd88     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3dd8c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3dd90     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3dd94     02 16 47 F4 |                 bitc    hidr_buttons, #2
3dd98     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3dd9c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3dda0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3dda4     04 16 47 F4 |                 bitc    hidr_buttons, #4
3dda8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3ddac     05 16 47 F4 |                 bitc    hidr_buttons, #5
3ddb0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3ddb4     06 16 47 F4 |                 bitc    hidr_buttons, #6
3ddb8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3ddbc     07 16 47 F4 |                 bitc    hidr_buttons, #7
3ddc0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3ddc4     08 16 47 F4 |                 bitc    hidr_buttons, #8
3ddc8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3ddcc     09 16 47 F4 |                 bitc    hidr_buttons, #9
3ddd0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3ddd4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3ddd8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3dddc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3dde0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3dde4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3dde8                 | 
3dde8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3ddec     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3ddf0     09 FA 79 FF 
3ddf4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3ddf8     FF FA 7F FF 
3ddfc     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3de00     B9 71 5F F9 |                 altgn   htmp, #htmp1
3de04     00 70 43 F8 |                 getnib  htmp
3de08     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3de0c                 | 
3de0c     B8 00 90 FD |                 jmp     #hpad_translate
3de10                 | 
3de10                 | '------------------------------------------------------------------------------
3de10                 | ' Read bits from report data buffer
3de10                 | '------------------------------------------------------------------------------
3de10                 | ' On entry:
3de10                 | '   PTRB - report buffer
3de10                 | '   hpar1 - start bit
3de10                 | '   hpar2 - number of bits
3de10                 | ' On exit:
3de10                 | '   retval - bits
3de10                 | '------------------------------------------------------------------------------
3de10                 | hpad_getbits
3de10     C6 71 03 F6 |                 mov     htmp, hpar1
3de14     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3de18     F9 71 03 F1 |                 add     htmp, ptrb
3de1c     B8 BF 02 FB |                 rdlong  retval, htmp
3de20                 | 
3de20     C6 73 03 F6 |                 mov     htmp1, hpar1
3de24     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3de28     B9 BF 42 F0 |                 shr     retval, htmp1
3de2c                 | 
3de2c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3de30     10 00 90 1D |         if_a    jmp     #.l1
3de34                 | 
3de34     C7 8F C3 F9 |                 decod   hpar2
3de38     01 8E 87 F1 |                 sub     hpar2, #1
3de3c     C7 BF 02 F5 |                 and     retval, hpar2
3de40     2D 00 64 FD |                 ret
3de44                 | .l1
3de44     FF 7F 00 FF 
3de48     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3de4c     03 70 07 F1 |                 add     htmp, #3
3de50     B8 75 03 FB |                 rdlong  htmp2, htmp
3de54     18 8E 87 F1 |                 sub     hpar2, #24
3de58     C7 8F C3 F9 |                 decod   hpar2
3de5c     01 8E 87 F1 |                 sub     hpar2, #1
3de60     B9 75 43 F0 |                 shr     htmp2, htmp1
3de64     C7 75 03 F5 |                 and     htmp2, hpar2
3de68     18 74 67 F0 |                 shl     htmp2, #24
3de6c     BA BF 42 F5 |                 or      retval, htmp2
3de70     2D 00 64 FD |                 ret
3de74                 | 
3de74                 | '------------------------------------------------------------------------------
3de74                 | ' Normalize value to signed word (-32768 / 32767)
3de74                 | '------------------------------------------------------------------------------
3de74                 | ' On entry:
3de74                 | '   retval - value to normalize
3de74                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3de74                 | '   - or -
3de74                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3de74                 | '   hidr_size - value bits length
3de74                 | ' On exit:
3de74                 | '   retval - normalized value
3de74                 | '------------------------------------------------------------------------------
3de74                 | hpad_normalize
3de74     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3de78     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3de7c     2D 00 64 AD |         if_z    ret
3de80     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3de84     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3de88     0F 72 77 F7 |                 signx   htmp1, #15      wc
3de8c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3de90     00 BE 66 C7 |         if_c    signx   retval, #0-0
3de94     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3de98     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3de9c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3dea0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3dea4     B8 71 53 F6 |                 abs     htmp            wc
3dea8     1F BE 0E F4 |                 testb   retval, #31     wz
3deac     5F BF 42 F6 |                 abs     retval
3deb0     B8 BF 12 FD |                 qdiv    retval, htmp
3deb4     18 BE 62 FD |                 getqx   retval
3deb8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3debc     C0 FF 7F FF 
3dec0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3dec4     2D 00 64 FD |                 ret
3dec8                 | 
3dec8                 | '------------------------------------------------------------------------------
3dec8                 | ' Perform controller actions
3dec8                 | ' On entry:
3dec8                 | '    hidr_id        report id
3dec8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3dec8                 | '                      X = hidr_axis+0, #0
3dec8                 | '                      Y = hidr_axis+0, #1
3dec8                 | '                      Z = hidr_axis+1, #0
3dec8                 | '                     RX = hidr_axis+1, #1
3dec8                 | '                     RY = hidr_axis+2, #0
3dec8                 | '                     RZ = hidr_axis+2, #1
3dec8                 | '    hidr_buttons   buttons state (bits 0 to 31)
3dec8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3dec8                 | '
3dec8                 | '                     -------3 -------2 -------1 -------0 byte
3dec8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3dec8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3dec8                 | '                                zyx||| |||||||| ++++++++ n. buttons
3dec8                 | '                                |||||| ||||++++--------- n. axes
3dec8                 | '                                |||||| ++++------------- n. hats
3dec8                 | '                                ++++++------------------ valid axes
3dec8                 | '------------------------------------------------------------------------------
3dec8                 | hpad_translate
3dec8                 | 
3dec8                 | 
3dec8                 |         if HAVE_HIDPAD
3dec8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3decc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3ded0     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3ded4     01 70 E7 F2 |                 cmpsub  htmp,#1
3ded8     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3dedc     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3dee0     2D 00 7C 3D |         if_ae   ret     wcz
3dee4     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3dee8     B8 F3 03 F1 |                 add     ptrb,htmp
3deec     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3def0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3def4     28 0C 64 FD |                 setq    #7-1
3def8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3defc                 |         end
3defc                 | 
3defc                 | 
3defc                 |         if EMUPAD_MAX_PLAYER > 0
3defc                 | .emupad_no_hat
3defc                 |         if EMUPAD_BT0_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT1_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT2_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT3_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT4_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT5_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT6_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT7_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT8_BIT >= 0
3defc                 |         end
3defc                 |         if EMUPAD_BT9_BIT >= 0
3defc                 |         end
3defc                 | .emupad_slot_over
3defc                 |         end
3defc                 | 
3defc                 |         if 0
3defc                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3defc                 | 
3defc                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3defc                 | 
3defc                 |         end
3defc     2D 00 64 FD |                 ret
3df00                 | end
3df00                 | 
3df00                 | if EMUPAD_MAX_PLAYER > 0
3df00                 | '------------------------------------------------------------------------------
3df00                 | ' Clear EmuPad state
3df00                 | '------------------------------------------------------------------------------
3df00                 | emupad_reset
3df00                 | 
3df00                 | '------------------------------------------------------------------------------
3df00                 | ' Get EmuPad Player number for current device (into retval)
3df00                 | ' Z flag is also set if current device is valid
3df00                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3df00                 | '------------------------------------------------------------------------------
3df00                 | emupad_getnum
3df00                 | .loop
3df00                 | '------------------------------------------------------------------------------
3df00                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3df00                 | '------------------------------------------------------------------------------
3df00                 | emupad_discon
3df00                 | .loop         
3df00                 |         
3df00                 |         ' FALL THROUGH!!!
3df00                 | 
3df00                 | '------------------------------------------------------------------------------
3df00                 | ' Update EmuPad reports (all of them...)
3df00                 | '------------------------------------------------------------------------------
3df00                 | emupad_write_reports
3df00                 | .devloop
3df00                 | 
3df00                 | end
3df00                 | 
3df00                 | 
3df00                 | '------------------------------------------------------------------------------
3df00                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3df00                 | '------------------------------------------------------------------------------
3df00                 | ' On entry:
3df00                 | ' On exit:
3df00                 | '------------------------------------------------------------------------------
3df00                 | hget_hub_status
3df00     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3df04     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3df08     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3df0c     01 90 2F F9 |                 setword hpar3, #1, #1
3df10     CF 02 A0 FD |                 call    #do_int_in
3df14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df18     0C 00 90 AD |         if_z    jmp     #.data
3df1c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3df20     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3df24     2D 00 64 FD |                 ret
3df28                 | .data
3df28     00 90 0F F2 |                 cmp     hpar3, #0               wz
3df2c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3df30                 | 
3df30     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3df34     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3df38     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3df3c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3df40                 |                 debug(ubin_long(hub_status_chg))
3df40                 | 
3df40     01 5A 06 F6 |                 mov     hdev_port, #1
3df44                 | .loop
3df44     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3df48     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3df4c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3df50     F0 FF 9F 3D |         if_nc   jmp     #.loop
3df54     2D 00 64 FD |                 ret
3df58                 | 
3df58                 | hub_port_handler
3df58     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3df5c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3df60     27 EF 03 F6 |                 mov     pb, urx_buff_p
3df64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df68     55 02 A0 FD |                 call    #control_read
3df6c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3df70                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3df70                 | 
3df70     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3df74     50 01 90 5D |         if_x0   jmp     #.other
3df78     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3df7c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3df80     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3df84     A0 02 A0 FD |                 call    #control_write
3df88     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3df8c     7C 01 90 5D |         if_x0   jmp     #.disconnect
3df90     B0 99 02 F6 |                 mov     hctwait, _100ms_
3df94     EF 02 A0 FD |                 call    #poll_waitx
3df98                 | 
3df98     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3df9c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3dfa0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3dfa4     A0 02 A0 FD |                 call    #control_write
3dfa8                 | 
3dfa8     02 76 07 F6 |                 mov     htmp3, #2
3dfac                 | .wait_reset
3dfac     AC 99 02 F6 |                 mov     hctwait, _8ms_
3dfb0     EF 02 A0 FD |                 call    #poll_waitx
3dfb4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3dfb8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3dfbc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3dfc0     55 02 A0 FD |                 call    #control_read
3dfc4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3dfc8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3dfcc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3dfd0                 | 
3dfd0     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3dfd4     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3dfd8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3dfdc     A0 02 A0 FD |                 call    #control_write
3dfe0                 | 
3dfe0     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3dfe4                 | .wait_recover
3dfe4     A7 99 02 F6 |                 mov     hctwait, _1ms_
3dfe8     EF 02 A0 FD |                 call    #poll_waitx
3dfec     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3dff0                 | 
3dff0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3dff4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3dff8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3dffc                 | 
3dffc     00 08 00 FF 
3e000     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3e004     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3e008     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3e00c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3e010     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3e014     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e018     48 01 90 5D |         if_nz   jmp     #.done
3e01c                 | .get_dev_desc
3e01c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3e020     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3e024     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3e028     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3e02c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3e030     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3e034     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3e038     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e03c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3e040     AC 99 02 F6 |                 mov     hctwait, _8ms_
3e044     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3e048     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3e04c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3e050     BE 00 A0 FD |                 call    #calc_crc5
3e054     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3e058     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3e05c     F7 AD C2 FA |                 rdbyte  total_data, pb
3e060     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e064     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e068     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e06c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3e070     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e074     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e078                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e078     9F 99 02 F6 |                 mov     hctwait, _500us_
3e07c     EF 02 A0 FD |                 call    #poll_waitx
3e080     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3e084     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e088     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e08c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e090     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e094     CC 00 90 5D |         if_nz   jmp     #.done
3e098     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e09c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e0a0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e0a4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e0a8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e0ac     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e0b0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e0b4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e0b8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e0bc     A4 00 90 CD |         if_b    jmp     #.done
3e0c0     6C F0 BF FD |                 call    #hparse_con_desc
3e0c4     9C 00 90 FD |                 jmp     #.done
3e0c8                 | 
3e0c8                 | .other
3e0c8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3e0cc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3e0d0     28 00 90 AD |         if_x1   jmp     #.reset_feature
3e0d4     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3e0d8     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3e0dc     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3e0e0     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3e0e4     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3e0e8     10 00 90 AD |         if_x1   jmp     #.reset_feature
3e0ec     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3e0f0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3e0f4     04 00 90 AD |         if_x1   jmp     #.reset_feature
3e0f8     68 00 90 FD |                 jmp     #.done
3e0fc                 | .reset_feature
3e0fc     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3e100     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3e104     A0 02 A0 FD |                 call    #control_write
3e108     58 00 90 FD |                 jmp     #.done
3e10c                 | .disconnect
3e10c                 | 
3e10c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e110     00 70 E3 F8 |                 getbyte htmp
3e114     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3e118     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3e11c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3e120     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3e124     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3e128     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3e12c                 |         if EMUPAD_MAX_PLAYER > 0
3e12c                 |         end
3e12c                 |         if HAVE_MOUSE
3e12c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3e130     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3e134     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3e138                 |         end
3e138                 |         if HAVE_HIDPAD
3e138     14 0A F0 FE |                 loc ptrb,#hidpad_report
3e13c     2D 71 03 F6 |                 mov htmp,hdev_port
3e140     01 70 E7 F2 |                 cmpsub htmp,#1
3e144     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3e148     B8 F3 03 F1 |                 add ptrb,htmp
3e14c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3e150     80 01 6C FC |                 wrlong #0,ptrb
3e154                 |         end
3e154                 | 
3e154     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3e158     00 00 C4 F8 |                 setbyte #0
3e15c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e160     00 00 04 F6 |                 mov     0-0, #0
3e164                 | 
3e164                 | .done
3e164     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3e168     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3e16c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e170     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3e174     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3e178     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3e17c                 | 
3e17c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3e180     27 EF 03 F6 |                 mov     pb, urx_buff_p
3e184     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3e188     55 02 A0 FD |                 call    #control_read
3e18c     00 69 06 FB |                 rdlong  hub_port_status, ptra
3e190                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3e190     2D 00 64 FD |                 ret
3e194                 | 
3e194                 | '------------------------------------------------------------------------------
3e194                 | ' Partially populated SETUP packets
3e194                 | '------------------------------------------------------------------------------
3e194     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3e195     06          |                 byte    REQ_GET_DESC
3e196     00 01       |                 word    TYPE_DEVICE << 8
3e198     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e19a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e19c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3e19d     06          |                 byte    REQ_GET_DESC
3e19e     00 02       |                 word    TYPE_CONFIG << 8
3e1a0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e1a2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e1a4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3e1a5     09          |                 byte    REQ_SET_CONFIG
3e1a6     00 00       |                 word    0       ' Configuration value
3e1a8     00 00       |                 word    0       ' Zero
3e1aa     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3e1ac     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3e1ad     05          |                 byte    REQ_SET_ADDR
3e1ae     00 00       |                 word    0       ' Zero
3e1b0     00 00       |                 word    0       ' Zero
3e1b2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3e1b4                 | '------------------------------------------------------------------------------
3e1b4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3e1b4                 | ' wValue field dictates which protocol should be used.
3e1b4                 | '
3e1b4                 | ' When initialized, all devices default to report protocol. However the host
3e1b4                 | ' should not make any assumptions about the device state and should set the
3e1b4                 | ' desired protocol whenever initializing a device.
3e1b4                 | '------------------------------------------------------------------------------
3e1b4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3e1b5     0B          |                 byte    HID_SET_PROTO
3e1b6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3e1b8                 |                                                 ' (HID 1.11 Section 7.2.6).
3e1b8     00 00       |                 word    0               ' Interface index number.
3e1ba     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3e1bc                 | '------------------------------------------------------------------------------
3e1bc     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3e1bd     0A          |                 byte    HID_SET_IDLE
3e1be     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3e1c0                 |                                         ' reporting until a change is detected in the report data
3e1c0                 | 
3e1c0                 |                                         ' (HID 1.11 Section 7.2.4).
3e1c0     00 00       |                 word    0       ' Interface index number.
3e1c2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3e1c4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3e1c5     09          |                 byte    HID_SET_REPORT
3e1c6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3e1c8                 |                                         ' (HID 1.11 Section 7.2.2).
3e1c8     00 00       |                 word    0       ' Interface index number.
3e1ca     00 00       |                 word    0       ' Size of the report, in bytes.
3e1cc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3e1cd     06          |                 byte    REQ_GET_DESC
3e1ce     00 22       |                 word    TYPE_REPORT << 8
3e1d0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e1d2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e1d4                 | '------------------------------------------------------------------------------
3e1d4     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3e1d5     06          |                 byte    REQ_GET_DESC
3e1d6     00 29       |                 word    TYPE_HUB << 8
3e1d8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3e1da     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e1dc     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3e1dd     03          |                 byte    REQ_SET_FEATURE
3e1de     00 00       |                 word    0       ' port power
3e1e0     01 00       |                 word    1       ' Port index number (1+)
3e1e2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e1e4     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3e1e5     01          |                 byte    REQ_CLEAR_FEATURE
3e1e6     00 00       |                 word    0       ' port power
3e1e8     01 00       |                 word    1       ' Port index number (1+)
3e1ea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3e1ec     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3e1ed     00          |                 byte    REQ_GET_STATUS
3e1ee     00 00       |                 word    0
3e1f0     01 00       |                 word    1       ' Port index number (1+)
3e1f2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3e1f4                 | '------------------------------------------------------------------------------
3e1f4                 | if _HAVE_GAMEPAD
3e1f4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3e1f8                 | ps3_command_buff
3e1f8     00 00 00 00 
3e1fc     00          |                 byte    $00, $00, $00, $00, $00
3e1fd     00 00 00 00 
3e201     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3e202     FF 27 10 00 
3e206     32          |                 byte    $FF, $27, $10, $00, $32
3e207     FF 27 10 00 
3e20b     32          |                 byte    $FF, $27, $10, $00, $32
3e20c     FF 27 10 00 
3e210     32          |                 byte    $FF, $27, $10, $00, $32
3e211     FF 27 10 00 
3e215     32          |                 byte    $FF, $27, $10, $00, $32
3e216     00 00 00 00 
3e21a     00          |                 byte    $00, $00, $00, $00, $00
3e21b     00 00 00 00 
3e21f     00          |                 byte    $00, $00, $00, $00, $00
3e220     00 00 00 00 
3e224     00          |                 byte    $00, $00, $00, $00, $00
3e225     00 00 00    |                 byte    $00, $00, $00
3e228                 | '------------------------------------------------------------------------------
3e228     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3e22b                 |                                         ' 0x01 All blinking
3e22b                 |                                         ' 0x02 1 flashes, then on
3e22b                 |                                         ' 0x03 2 flashes, then on
3e22b                 |                                         ' 0x04 3 flashes, then on
3e22b                 |                                         ' 0x05 4 flashes, then on
3e22b                 |                                         ' 0x06 1 on
3e22b                 |                                         ' 0x07 2 on
3e22b                 |                                         ' 0x08 3 on
3e22b                 |                                         ' 0x09 4 on
3e22b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3e22b                 |                                         ' 0x0B Blinking*
3e22b                 |                                         ' 0x0C Slow blinking*
3e22b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3e22b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3e22e     00          |                 byte    $00             ' Left rumble
3e22f     00          |                 byte    $00             ' Right rumble
3e230     00 00 00    |                 byte    $00, $00, $00
3e233     00          | end
3e234                 | alignl
3e234                 | 
3e234                 | if HAVE_MOUSE
3e234     00 00 00 00 
3e238     00 00 00 00 | mouse_limits long 0[2]
3e23c     00 00 00 00 | mouse_outptr long 0
3e240                 | end
3e240                 | 
3e240                 | if KEYQUEUE_SIZE > 0
3e240     00          | keyq_head byte 0
3e241     00          | keyq_tail byte 0
3e242     00 00 00 00 
      ...             
3e43e     00 00 00 00 
3e442     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3e444                 | alignl
3e444                 | end
3e444                 | 
3e444                 | if EMUPAD_MAX_PLAYER > 0
3e444                 | emupad_rule_buffer
3e444                 | if EMUPAD_BUILTIN_RULES
3e444                 | file "padmap_builtin.dat"
3e444                 | end
3e444                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3e444                 | '' Default rule directly follows!
3e444                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3e444                 | end
3e444                 | 
3e444                 | '------------------------------------------------------------------------------
3e444                 | ' The USB data cache area gets zero-filled at every device disconnect
3e444                 | '------------------------------------------------------------------------------
3e444                 | usb_cache_start
3e444                 | 
3e444                 | ' HID descriptor and report buffers
3e444                 | if !!OVERLAP_MEMORY
3e444     00 00 00 00 
      ...             
3eb3c     00 00 00 00 
3eb40     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3eb44                 | end
3eb44     00 00 00 00 
3eb48     00 00 00 00 | hkbd_report     byte    0[8]
3eb4c     00 00 00 00 | hkbd_led_rep    byte    0
3eb50                 | alignl
3eb50                 | 
3eb50                 | if HAVE_HIDPAD
3eb50     00 00 00 00 
      ...             
3ec0c     00 00 00 00 
3ec10     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3ec14                 | end
3ec14                 | 
3ec14                 | ' HUB descriptor
3ec14     00          | hub_descr       byte    0   ' bDescLength
3ec15     00          |                 byte    0   ' bDescriptorType
3ec16     00          |                 byte    0   ' bNbrPorts
3ec17     00 00       |                 word    0   ' wHubCharacteristics
3ec19     00          |                 byte    0   ' bPwrOn2PwrGood
3ec1a     00          |                 byte    0   ' bHubContrCurrent
3ec1b     00          |                 byte    0   ' DeviceRemoveable
3ec1c     00          |                 byte    0   ' PortPwrCtrlMask
3ec1d                 | 
3ec1d                 | usb_cache_end
3ec1d                 | 
3ec1d                 | if HAVE_MOUSE
3ec1d     00 00 00 00 | mouse_xacc      long 0
3ec21     00 00 00 00 | mouse_yacc      long 0
3ec25     00 00 00 00 | mouse_zacc      long 0
3ec29     00          | mouse_bstate    byte 0
3ec2a     00          | mouse_lpending  byte 0
3ec2b     00          | mouse_rpending  byte 0
3ec2c     00          | mouse_mpending  byte 0
3ec2d     00          | mouse_lock      byte 0
3ec2e     00 00 00    |                 byte 0[3] ' padding
3ec31                 | end
3ec31                 | 
3ec31     00 00 00 00 
      ...             
3eca9     00 00 00 00 
3ecad     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3ecb1     00 00 00 00 
3ecb5     00 00 00 00 
3ecb9     00 00 00 00 
3ecbd     00 00 00 00 
3ecc1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3ecc3     00 00 00 00 
      ...             
3edbb     00 00 00 00 
3edbf     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3edc3                 | 
3edc3     00          | driver_cog      byte    0                       ' Current driver cog + 1
3edc4                 | 	alignl
3edc4                 | _audio096_spin2_dat_
3edc4                 | 
3edc4                 | audio       org     0
3edc4                 | 
3edc4     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3edc8     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3edcc     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3edd0                 |  
3edd0     01 EC 63 FD |             cogid   pa                   ' compute cogid
3edd4     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3edd8     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3eddc     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3ede0                 | 
3ede0     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3ede4     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3ede8     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3edec     0F 24 06 FC |             wrpin   dac2,#right
3edf0     0F 00 1E FC |             wxpin   #256,#right    
3edf4     41 9C 64 FD |             dirh    #left addpins 1
3edf8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3edfc     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3ee00     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3ee04                 |             
3ee04                 | '---------------------------------------------------------------------------------        
3ee04                 | '----------------- The main loop -------------------------------------------------
3ee04                 | '---------------------------------------------------------------------------------
3ee04                 | 
3ee04     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3ee08     10 00 90 CD |       if_c  jmp     #loop1
3ee0c                 |   
3ee0c     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3ee10     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3ee14     D5 00 80 F1 |             sub     0-0,a40000000
3ee18     FD 01 6E FB |             djnz    cn,#p402
3ee1c                 |     
3ee1c     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3ee20     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3ee24     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3ee28     01 00 06 C6 |     if_c    mov     cn,#1
3ee2c     DA 02 3A F3 |             fle     ct,time3 wcz
3ee30     02 00 06 C6 |     if_c    mov     cn,#2     
3ee34     DB 02 3A F3 |             fle     ct,time4 wcz
3ee38     03 00 06 C6 |     if_c    mov     cn,#3
3ee3c     DC 02 3A F3 |             fle     ct,time5 wcz
3ee40     04 00 06 C6 |     if_c    mov     cn,#4
3ee44     DD 02 3A F3 |             fle     ct,time6 wcz
3ee48     05 00 06 C6 |     if_c    mov     cn,#5
3ee4c     DE 02 3A F3 |             fle     ct,time7 wcz
3ee50     06 00 06 C6 |     if_c    mov     cn,#6
3ee54     DF 02 3A F3 |             fle     ct,time8 wcz
3ee58     07 00 06 C6 |     if_c    mov     cn,#7
3ee5c                 | 
3ee5c                 | 
3ee5c                 | '----------------------------------------------------------------------------------
3ee5c                 | '------------- Compute channel samples --------------------------------------------
3ee5c                 | '----------------------------------------------------------------------------------
3ee5c                 | 
3ee5c                 | 
3ee5c     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3ee60     06 C0 65 F0 |             shl     channeladd,#6
3ee64     E0 F0 03 F1 |             add     ptra,channeladd
3ee68                 | 
3ee68     28 16 64 FD |             setq    #11                        	' read parameters
3ee6c     00 D7 05 FB |             rdlong  pointer0,ptra
3ee70                 |     	    
3ee70     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3ee74     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3ee78     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3ee7c     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3ee80     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3ee84     00 C4 0D F2 |             cmp     qq,#0 wz                         
3ee88     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3ee8c     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3ee90                 |             
3ee90     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3ee94     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3ee98     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3ee9c                 | 
3ee9c     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3eea0     EC 08 3A F9 |             getword oldrs,sample0,#1
3eea4     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3eea8     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3eeac     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3eeb0     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3eeb4                 | 
3eeb4     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3eeb8     00 04 02 F6 |             mov     dt0,0-0    
3eebc     D7 04 82 F1 |             sub     dt0,time0
3eec0                 |             
3eec0     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3eec4     FB 00 00 F1 |             add     0-0,afreq0  	
3eec8                 |             
3eec8                 | '---- envelopes
3eec8                 |             
3eec8     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3eecc     20 00 00 AF 
3eed0     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3eed4     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3eed8                 | 
3eed8     FB 48 02 F6 |             mov     envs1,afreq0
3eedc     F5 48 02 FA |             mul     envs1,envspd0
3eee0     24 E7 01 F1 |             add     envph0,envs1 
3eee4                 | 
3eee4     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3eee8     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3eeec     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3eef0     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3eef4     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3eef8     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3eefc     00 46 06 36 |     if_ge   mov     envlo,#0
3ef00     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3ef04     16 E6 65 30 |     if_ge   shl     envph0,#22
3ef08                 | 
3ef08     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3ef0c     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3ef10     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3ef14     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3ef18     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3ef1c     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3ef20     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3ef24     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3ef28     23 49 02 FA |             mul     envs1,envlo
3ef2c     25 49 02 F1 |             add     envs1,envs2
3ef30     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3ef34                 |             
3ef34     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3ef38     1B C6 61 AD |     if_z    getrnd  spl
3ef3c     58 00 90 AD |     if_z    jmp     #p406
3ef40                 |  
3ef40     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3ef44     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3ef48     08 D6 45 F0 |             shr     pointer0,#8
3ef4c                 |          
3ef4c     1F DA 0D F4 |             testb   sstart0,#31 wz            
3ef50     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3ef54     1C DA 0D F4 |             testb   sstart0,#28 wz            
3ef58     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3ef5c                 |         
3ef5c     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3ef60     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3ef64     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3ef68                 |             
3ef68     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3ef6c     ED C4 01 F1 |             add     qq,sstart0            
3ef70                 | 
3ef70     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3ef74     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3ef78     1C 01 B0 1D |     if_gt   call    #cache_read
3ef7c                 |          
3ef7c     1F DA 0D F4 |             testb   sstart0,#31 wz 
3ef80     08 C6 65 50 |     if_nz   shl     spl,#8
3ef84     08 D6 65 50 |     if_nz   shl     pointer0,#8
3ef88     07 D6 65 A0 |     if_z    shl     pointer0,#7
3ef8c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3ef90     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3ef94     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3ef98                 | 
3ef98                 | 
3ef98     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3ef9c     00 C6 01 F6 |             mov     spl,0-0
3efa0     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3efa4     00 C6 01 F6 |             mov     spl,0-0
3efa8                 | 
3efa8     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3efac     00 0A 02 F6 |             mov     ls0,0-0
3efb0     20 00 00 FF 
3efb4     00 C4 05 F6 |             mov     qq,##16384
3efb8     FE C4 81 F1 |             sub     qq,apan0
3efbc     E2 C6 31 FA |             scas    spl,qq
3efc0     00 0C 02 F6 |             mov     rs0, 0-0
3efc4                 | 
3efc4     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3efc8     06 11 02 F1 |             add     rs,rs0
3efcc     03 0F 82 F1 |             sub     ls,oldls
3efd0     05 0F 02 F1 |             add     ls,ls0
3efd4                 |    
3efd4     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3efd8     05 D9 21 F9 |             setword sample0,ls0,#0
3efdc                 |             
3efdc     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3efe0     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3efe4     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3efe8                 |   '  if_z    mov     sample0,#0
3efe8     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3efec     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3eff0     04 00 00 AF 
3eff4     00 B0 05 A1 |     if_z    add     time1,##2048
3eff8     D8 B2 01 A6 |     if_z    mov     time2,time1
3effc     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3f000                 | 
3f000     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3f004     00 D7 65 FC |             wrlong  pointer0,ptra
3f008     08 E7 65 FC |             wrlong  envph0,ptra[8]
3f00c     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3f010                 |                       
3f010     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3f014     FF C3 25 A7 |     if_z    decmod  front, #511          
3f018                 |          
3f018     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3f01c     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3f020     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3f024     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3f028                 | 	    
3f028                 | 		    
3f028     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3f02c     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3f030     04 15 02 F6 |             mov     newsample, oldrs       
3f034                 | 
3f034     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3f038     02 AF 01 F1 |             add     time0,dt0    
3f03c                 |                                      
3f03c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3f040     D8 FD 9F AD |     if_z    jmp     #loop1
3f044     02 C5 01 F6 |             mov     qq,dt0
3f048                 | 
3f048                 |     
3f048                 |             
3f048     01 4E 36 F0 | p301        rol     dropper,#1 wc
3f04c     40 00 90 3D |     if_nc   jmp     #p399
3f050     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3f054     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3f058     F4 FF 9F AD |     if_e    jmp     #p398   
3f05c                 | 		
3f05c     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3f060     20 00 90 AD |     if_z    jmp     #p302	   
3f064                 |   
3f064     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3f068     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3f06c     02 1E 66 C0 |     if_c    shl     scptr2,#2
3f070     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3f074     60 1E 66 FC |             wrlong  scptr2,#$60
3f078     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3f07c     01 00 00 CF 
3f080     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3f084                 | 			    
3f084     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3f088     00 00 00 FF 
3f08c     FF C3 05 F7 |             incmod  front, ##511
3f090     ED C5 6D FB | p399        djnz    qq,#p301
3f094                 |             
3f094     6C FD 9F FD |             jmp     #loop            'loop
3f098                 | 
3f098                 | '----------------------------------------------------------------------------------
3f098                 | '------------- This is the end of the main loop -----------------------------------
3f098                 | '----------------------------------------------------------------------------------
3f098                 | 
3f098                 | '----------------------------------------------------------------------------------
3f098                 | '------------- PSRAM cache ----------- --------------------------------------------
3f098                 | '----------------------------------------------------------------------------------
3f098                 | 
3f098                 | ' There are 8 cache pointers for 8 channels
3f098                 | ' if 24 higher bits of address=cache, then get a word from the cache
3f098                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3f098                 | 
3f098                 | 
3f098     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3f09c                 |             
3f09c     E2 40 02 F6 | 	    mov     addrhi,qq		
3f0a0     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3f0a4     14 01 96 F9 | 	    alts    cn,#cache1            
3f0a8     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3f0ac     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3f0b0                 | 	
3f0b0     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3f0b4     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3f0b8     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3f0bc     08 38 66 F0 | 	    shl     cmd,#8
3f0c0     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3f0c4     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3f0c8     08 3A 66 F0 |             shl     hubaddr,#8                  '
3f0cc     13 3B 02 F1 |             add     hubaddr,hubptr 
3f0d0     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3f0d4     28 04 64 FD |             setq    #2                          ' write 3 longs
3f0d8     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3f0dc     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3f0e0     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3f0e4                 |             
3f0e4                 | 	
3f0e4     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3f0e8     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3f0ec     13 C5 01 F1 | 	    add     qq,hubptr
3f0f0     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3f0f4     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3f0f8                 |           
3f0f8                 | 
3f0f8                 | '--------------------------------------------------------------------------
3f0f8                 | '------ Interrupt service -------------------------------------------------
3f0f8                 | '------ Output the sample, get the next one if exists ---------------------
3f0f8                 | '--------------------------------------------------------------------------
3f0f8                 | 
3f0f8     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3f0fc     0F D0 25 FC |             wypin   rsample,#right       '4
3f100     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3f104     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3f108     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3f10c     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3f110     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3f114                 |     
3f114     F5 FF 3B FB |             reti1                        '17/19 
3f118                 |           
3f118                 | '---------------------------------------------------------------------------
3f118                 | '-------- End of interrupt -------------------------------------------------
3f118                 | '---------------------------------------------------------------------------    
3f118                 | 
3f118                 | 
3f118                 | '---------------------------------------------------------------------------
3f118                 | '------- Variables ---------------------------------------------------------
3f118                 | '---------------------------------------------------------------------------
3f118                 | 
3f118                 | ' constants
3f118                 | 
3f118     00 00 00 40 | a40000000   long $40000000
3f11c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3f120                 | 
3f120                 | ' Time variables
3f120                 | 
3f120     00 00 00 00 | time0       long 0    ' Global sample computing time
3f124     01 00 00 00 | time1       long 1    ' Local channels time
3f128     02 00 00 00 | time2       long 2
3f12c     03 00 00 00 | time3       long 3
3f130     04 00 00 00 | time4       long 4
3f134     05 00 00 00 | time5       long 5
3f138     06 00 00 00 | time6       long 6
3f13c     07 00 00 00 | time7       long 7
3f140     08 00 00 00 | time8       long 8
3f144                 | 
3f144     00 00 00 00 | channeladd long 0
3f148                 | 
3f148     00 00 00 00 | front       long 0
3f14c                 | 
3f14c                 | ' temporary variables 
3f14c     00 00 00 00 | qq          long 0
3f150     00 00 00 00 | spl         long 0
3f154     00 00 00 00 | zero        long 0
3f158     00 00 00 00 | mailbox     long 0
3f15c     00 00 00 00 | mailbox2 long 0
3f160                 | 
3f160                 | ' Interrupt ISR variables
3f160                 | 
3f160     00 00 00 00 | lsample     long 0
3f164     00 00 00 00 | rsample     long 0
3f168     00 00 00 00 | lsnext      long 0
3f16c     00 00 00 00 | rsnext      long 0 
3f170                 | 
3f170                 | ' channel parameter block
3f170                 | 
3f170     00 00 00 00 | pointer0    long 0     
3f174     00 00 00 00 | sample0     long 0
3f178     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3f17c     00 00 00 00 | lstart0     long 0
3f180     00 00 00 00 | lend0       long 0
3f184     00 00 00 00 | volpan0     long 0
3f188     00 00 00 00 | freqskip0   long 0
3f18c     00 00 00 00 | command0    long 0
3f190     00 00 00 00 | envph0	    long 0
3f194     00 00 00 00 | envptr0	    long 0
3f198     00 00 00 00 | envspd0	    long 0
3f19c     00 00 00 00 | envlen0	    long 0
3f1a0     00 00 00 00 | res5	    long 0
3f1a4     00 00 00 00 | res6	    long 0
3f1a8     00 00 00 00 | res7	    long 0
3f1ac     00 00 00 00 | res8	    long 0
3f1b0                 | 
3f1b0     00 00 00 00 | afreq0      long 0
3f1b4     00 00 00 00 | askip0      long 0
3f1b8     00 00 00 00 | avol0       long 0
3f1bc     00 00 00 00 | apan0       long 0
3f1c0                 | 
3f1c0     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3f1c4     00 00 00 00 | cn          long 0
3f1c8     00 00 00 00 | ct          long 0
3f1cc     00 00 00 00 | dt0         long 0
3f1d0                 | 
3f1d0                 | ' Samples
3f1d0     00 00 00 00 | oldls       long 0
3f1d4     00 00 00 00 | oldrs       long 0
3f1d8                 | 
3f1d8     00 00 00 00 | ls0         long 0
3f1dc     00 00 00 00 | rs0         long 0
3f1e0                 | 
3f1e0     00 00 00 00 | ls          long 0    
3f1e4     00 00 00 00 | rs          long 0
3f1e8                 | 
3f1e8     00 00 00 00 | oldsample   long 0
3f1ec     00 00 00 00 | newsample   long 0
3f1f0                 | 
3f1f0     00 00 00 00 | nrsample    long 0
3f1f4     00 00 00 00 | nlsample    long 0
3f1f8                 | 
3f1f8     00 00 00 00 | scbase long 0
3f1fc     00 00 00 00 | scptr long 0
3f200     00 00 00 00 | scptr2 long 0
3f204     00 00 00 00 | scope long 0
3f208                 | 
3f208     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3f20c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3f210                 | 
3f210     00 18 07 00 | hubptr      long $71800
3f214     00 00 00 00 | cache1      long 0
3f218     00 00 00 00 | cache2      long 0
3f21c     00 00 00 00 | cache3      long 0
3f220     00 00 00 00 | cache4      long 0
3f224     00 00 00 00 | cache5      long 0
3f228     00 00 00 00 | cache6      long 0
3f22c     00 00 00 00 | cache7      long 0
3f230     00 00 00 00 | cache8      long 0
3f234                 | 
3f234                 | 
3f234     00 00 00 00 | cmd         long 0
3f238     00 00 00 00 | hubaddr     long 0
3f23c     00 01 00 00 | count       long 256
3f240     00 00 00 00 | addrlo long 0
3f244     00 00 00 00 | addrhi long 0
3f248     00 00 00 00 | pointer00 long 0
3f24c     00 00 00 00 | envhi long 0
3f250     00 00 00 00 | envlo long 0
3f254     00 00 00 00 | envs1 long 0
3f258     00 00 00 00 | envs2 long 0
3f25c     00 00 00 00 | noise0 long 0
3f260     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3f264     00 00 00 00 
3f268     00 00 00 00 | null  			long 	0,0           ' for channel reset
3f26c                 | 	alignl
3f26c                 | __system__dat_
3f26c     00 00 00 00 
3f270     00 00 00 00 | 	byte	$00[8]
3f274     03 00 00 00 
3f278     00 00 00 00 
3f27c     00 00 00 00 
3f280     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f284     00 00 00 00 
      ...             
3f510     00 00 00 00 
3f514     00 00 00 00 | 	byte	$00[660]
3f518     00 00 F0 09 | 	long	(159 {__system____root_opendir})<<20
3f51c     00 00 00 0A | 	long	(160 {__system____root_closedir})<<20
3f520     00 00 10 0A | 	long	(161 {__system____root_readdir})<<20
3f524     00 00 20 0A | 	long	(162 {__system____root_stat})<<20
3f528     00 00 00 00 
3f52c     00 00 00 00 
3f530     00 00 00 00 
3f534     00 00 00 00 
3f538     00 00 00 00 
3f53c     00 00 00 00 
3f540     00 00 00 00 | 	byte	$00[28]
3f544     AC F5 03 00 | 	long	@@@__system__dat_ + 832
3f548     AF F5 03 00 | 	long	@@@__system__dat_ + 835
3f54c     D0 F5 03 00 | 	long	@@@__system__dat_ + 868
3f550     E9 F5 03 00 | 	long	@@@__system__dat_ + 893
3f554     04 F6 03 00 | 	long	@@@__system__dat_ + 920
3f558     1E F6 03 00 | 	long	@@@__system__dat_ + 946
3f55c     2E F6 03 00 | 	long	@@@__system__dat_ + 962
3f560     40 F6 03 00 | 	long	@@@__system__dat_ + 980
3f564     52 F6 03 00 | 	long	@@@__system__dat_ + 998
3f568     64 F6 03 00 | 	long	@@@__system__dat_ + 1016
3f56c     70 F6 03 00 | 	long	@@@__system__dat_ + 1028
3f570     81 F6 03 00 | 	long	@@@__system__dat_ + 1045
3f574     95 F6 03 00 | 	long	@@@__system__dat_ + 1065
3f578     9F F6 03 00 | 	long	@@@__system__dat_ + 1075
3f57c     AF F6 03 00 | 	long	@@@__system__dat_ + 1091
3f580     BE F6 03 00 | 	long	@@@__system__dat_ + 1106
3f584     D4 F6 03 00 | 	long	@@@__system__dat_ + 1128
3f588     ED F6 03 00 | 	long	@@@__system__dat_ + 1153
3f58c     01 F7 03 00 | 	long	@@@__system__dat_ + 1173
3f590     0F F7 03 00 | 	long	@@@__system__dat_ + 1187
3f594     23 F7 03 00 | 	long	@@@__system__dat_ + 1207
3f598     2F F7 03 00 | 	long	@@@__system__dat_ + 1219
3f59c     41 F7 03 00 | 	long	@@@__system__dat_ + 1237
3f5a0     59 F7 03 00 | 	long	@@@__system__dat_ + 1261
3f5a4     6B F7 03 00 | 	long	@@@__system__dat_ + 1279
3f5a8     7E F7 03 00 | 	long	@@@__system__dat_ + 1298
3f5ac     4F 4B 00 4E 
3f5b0     75 6D 65 72 
3f5b4     69 63 61 6C 
3f5b8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3f5bc     75 6D 65 6E 
3f5c0     74 20 6F 75 
3f5c4     74 20 6F 66 
3f5c8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3f5cc     61 69 6E 00 
3f5d0     52 65 73 75 
3f5d4     6C 74 20 6E 
3f5d8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3f5dc     65 70 72 65 
3f5e0     73 65 6E 74 
3f5e4     61 62 6C 65 
3f5e8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3f5ec     65 67 61 6C 
3f5f0     20 6D 75 6C 
3f5f4     74 69 62 79 
3f5f8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3f5fc     65 71 75 65 
3f600     6E 63 65 00 
3f604     4E 6F 20 73 
3f608     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3f60c     66 69 6C 65 
3f610     20 6F 72 20 
3f614     64 69 72 65 
3f618     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3f61c     79 00 42 61 
3f620     64 20 66 69 
3f624     6C 65 20 6E 
3f628     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3f62c     72 00 50 65 
3f630     72 6D 69 73 
3f634     73 69 6F 6E 
3f638     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3f63c     69 65 64 00 
3f640     4E 6F 74 20 
3f644     65 6E 6F 75 
3f648     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3f64c     65 6D 6F 72 
3f650     79 00 54 65 
3f654     6D 70 6F 72 
3f658     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3f65c     66 61 69 6C 
3f660     75 72 65 00 
3f664     46 69 6C 65 
3f668     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3f66c     73 74 73 00 
3f670     49 6E 76 61 
3f674     6C 69 64 20 
3f678     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3f67c     6D 65 6E 74 
3f680     00 54 6F 6F 
3f684     20 6D 61 6E 
3f688     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3f68c     65 6E 20 66 
3f690     69 6C 65 73 
3f694     00 49 2F 4F 
3f698     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3f69c     6F 72 00 4E 
3f6a0     6F 74 20 61 
3f6a4     20 64 69 72 
3f6a8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3f6ac     72 79 00 49 
3f6b0     73 20 61 20 
3f6b4     64 69 72 65 
3f6b8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3f6bc     79 00 52 65 
3f6c0     61 64 20 6F 
3f6c4     6E 6C 79 20 
3f6c8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3f6cc     20 73 79 73 
3f6d0     74 65 6D 00 
3f6d4     46 75 6E 63 
3f6d8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3f6dc     20 6E 6F 74 
3f6e0     20 69 6D 70 
3f6e4     6C 65 6D 65 
3f6e8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3f6ec     00 44 69 72 
3f6f0     65 63 74 6F 
3f6f4     72 79 20 6E 
3f6f8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3f6fc     6D 70 74 79 
3f700     00 4E 61 6D 
3f704     65 20 74 6F 
3f708     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3f70c     6E 67 00 44 
3f710     65 76 69 63 
3f714     65 20 6E 6F 
3f718     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3f71c     65 6B 61 62 
3f720     6C 65 00 42 
3f724     61 64 20 61 
3f728     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3f72c     73 73 00 42 
3f730     72 6F 6B 65 
3f734     6E 20 63 6F 
3f738     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3f73c     74 69 6F 6E 
3f740     00 44 65 76 
3f744     69 63 65 20 
3f748     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3f74c     65 73 6F 75 
3f750     72 63 65 20 
3f754     62 75 73 79 
3f758     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3f75c     73 73 20 64 
3f760     65 76 69 63 
3f764     65 20 6C 69 
3f768     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3f76c     6F 20 73 70 
3f770     61 63 65 20 
3f774     6F 6E 20 64 
3f778     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3f77c     65 00 55 6E 
3f780     6B 6E 6F 77 
3f784     6E 20 65 72 
3f788     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3f78c     00 00 00 00 
3f790     00 00 00 00 
3f794     00 00 00 00 | 	byte	$00[12]
3f798     05 00 00 00 
3f79c     00 00 00 00 
3f7a0     00 00 00 00 
3f7a4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f7a8     00 00 00 00 | 	byte	$00, $00, $00, $00
3f7ac     00 00 70 0B | 	long	(183 {__system___tx})<<20
3f7b0     00 00 80 0B | 	long	(184 {__system___rx})<<20
3f7b4     00 00 00 00 | 	byte	$00, $00, $00, $00
3f7b8     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0758})<<20
3f7bc     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0759})<<20
3f7c0     00 00 00 00 
3f7c4     00 00 00 00 | 	byte	$00[8]
3f7c8     01 00 00 00 
3f7cc     06 00 00 00 
3f7d0     00 00 00 00 
3f7d4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f7d8     00 00 00 00 
3f7dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f7e0     00 00 70 0B | 	long	(183 {__system___tx})<<20
3f7e4     00 00 80 0B | 	long	(184 {__system___rx})<<20
3f7e8     00 00 00 00 | 	byte	$00, $00, $00, $00
3f7ec     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0758})<<20
3f7f0     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0759})<<20
3f7f4     00 00 00 00 
3f7f8     00 00 00 00 | 	byte	$00[8]
3f7fc     01 00 00 00 
3f800     06 00 00 00 
3f804     00 00 00 00 
3f808     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f80c     00 00 00 00 
3f810     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f814     00 00 70 0B | 	long	(183 {__system___tx})<<20
3f818     00 00 80 0B | 	long	(184 {__system___rx})<<20
3f81c     00 00 00 00 | 	byte	$00, $00, $00, $00
3f820     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0758})<<20
3f824     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0759})<<20
3f828     00 00 00 00 
      ...             
3f998     00 00 00 00 
3f99c     00 00 00 00 | 	byte	$00[376]
3f9a0     A4 F9 03 00 | 	long	@@@__system__dat_ + 1848
3f9a4     00 00 00 00 
3f9a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3f9ac                 | 	alignl
3f9ac                 | _fatfs_cc_dat_
3f9ac     C7 00 FC 00 
3f9b0     E9 00 E2 00 
3f9b4     E4 00 E0 00 
3f9b8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3f9bc     EA 00 EB 00 
3f9c0     E8 00 EF 00 
3f9c4     EE 00 EC 00 
3f9c8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3f9cc     C9 00 E6 00 
3f9d0     C6 00 F4 00 
3f9d4     F6 00 F2 00 
3f9d8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3f9dc     FF 00 D6 00 
3f9e0     DC 00 F8 00 
3f9e4     A3 00 D8 00 
3f9e8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3f9ec     E1 00 ED 00 
3f9f0     F3 00 FA 00 
3f9f4     F1 00 D1 00 
3f9f8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3f9fc     BF 00 AE 00 
3fa00     AC 00 BD 00 
3fa04     BC 00 A1 00 
3fa08     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3fa0c     91 25 92 25 
3fa10     93 25 02 25 
3fa14     24 25 C1 00 
3fa18     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3fa1c     A9 00 63 25 
3fa20     51 25 57 25 
3fa24     5D 25 A2 00 
3fa28     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3fa2c     14 25 34 25 
3fa30     2C 25 1C 25 
3fa34     00 25 3C 25 
3fa38     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3fa3c     5A 25 54 25 
3fa40     69 25 66 25 
3fa44     60 25 50 25 
3fa48     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3fa4c     F0 00 D0 00 
3fa50     CA 00 CB 00 
3fa54     C8 00 31 01 
3fa58     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3fa5c     CF 00 18 25 
3fa60     0C 25 88 25 
3fa64     84 25 A6 00 
3fa68     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3fa6c     D3 00 DF 00 
3fa70     D4 00 D2 00 
3fa74     F5 00 D5 00 
3fa78     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3fa7c     DE 00 DA 00 
3fa80     DB 00 D9 00 
3fa84     FD 00 DD 00 
3fa88     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3fa8c     AD 00 B1 00 
3fa90     17 20 BE 00 
3fa94     B6 00 A7 00 
3fa98     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3fa9c     B0 00 A8 00 
3faa0     B7 00 B9 00 
3faa4     B3 00 B2 00 
3faa8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3faac     61 00 1A 03 
3fab0     E0 00 17 03 
3fab4     F8 00 07 03 
3fab8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3fabc     78 01 00 01 
3fac0     30 01 32 01 
3fac4     06 01 39 01 
3fac8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3facc     2E 01 79 01 
3fad0     06 01 80 01 
3fad4     4D 00 43 02 
3fad8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3fadc     82 01 84 01 
3fae0     84 01 86 01 
3fae4     87 01 87 01 
3fae8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3faec     8B 01 8B 01 
3faf0     8D 01 8E 01 
3faf4     8F 01 90 01 
3faf8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3fafc     93 01 94 01 
3fb00     F6 01 96 01 
3fb04     97 01 98 01 
3fb08     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3fb0c     9B 01 9C 01 
3fb10     9D 01 20 02 
3fb14     9F 01 A0 01 
3fb18     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3fb1c     A2 01 A4 01 
3fb20     A4 01 A6 01 
3fb24     A7 01 A7 01 
3fb28     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3fb2c     AB 01 AC 01 
3fb30     AC 01 AE 01 
3fb34     AF 01 AF 01 
3fb38     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3fb3c     B3 01 B3 01 
3fb40     B5 01 B5 01 
3fb44     B7 01 B8 01 
3fb48     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3fb4c     BB 01 BC 01 
3fb50     BC 01 BE 01 
3fb54     F7 01 C0 01 
3fb58     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3fb5c     C3 01 C4 01 
3fb60     C5 01 C4 01 
3fb64     C7 01 C8 01 
3fb68     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3fb6c     CB 01 CA 01 
3fb70     CD 01 10 01 
3fb74     DD 01 01 00 
3fb78     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3fb7c     12 01 F3 01 
3fb80     03 00 F1 01 
3fb84     F4 01 F4 01 
3fb88     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3fb8c     22 02 12 01 
3fb90     3A 02 09 00 
3fb94     65 2C 3B 02 
3fb98     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3fb9c     66 2C 3F 02 
3fba0     40 02 41 02 
3fba4     41 02 46 02 
3fba8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3fbac     40 00 81 01 
3fbb0     86 01 55 02 
3fbb4     89 01 8A 01 
3fbb8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3fbbc     5A 02 90 01 
3fbc0     5C 02 5D 02 
3fbc4     5E 02 5F 02 
3fbc8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3fbcc     62 02 94 01 
3fbd0     64 02 65 02 
3fbd4     66 02 67 02 
3fbd8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3fbdc     6A 02 62 2C 
3fbe0     6C 02 6D 02 
3fbe4     6E 02 9C 01 
3fbe8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3fbec     9D 01 73 02 
3fbf0     74 02 9F 01 
3fbf4     76 02 77 02 
3fbf8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3fbfc     7A 02 7B 02 
3fc00     7C 02 64 2C 
3fc04     7E 02 7F 02 
3fc08     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3fc0c     82 02 A9 01 
3fc10     84 02 85 02 
3fc14     86 02 87 02 
3fc18     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3fc1c     B1 01 B2 01 
3fc20     45 02 8D 02 
3fc24     8E 02 8F 02 
3fc28     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3fc2c     B7 01 7B 03 
3fc30     03 00 FD 03 
3fc34     FE 03 FF 03 
3fc38     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3fc3c     86 03 88 03 
3fc40     89 03 8A 03 
3fc44     B1 03 11 03 
3fc48     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3fc4c     A3 03 A3 03 
3fc50     C4 03 08 03 
3fc54     CC 03 03 00 
3fc58     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3fc5c     8F 03 D8 03 
3fc60     18 01 F2 03 
3fc64     0A 00 F9 03 
3fc68     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3fc6c     F5 03 F6 03 
3fc70     F7 03 F7 03 
3fc74     F9 03 FA 03 
3fc78     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3fc7c     20 03 50 04 
3fc80     10 07 60 04 
3fc84     22 01 8A 04 
3fc88     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3fc8c     0E 01 CF 04 
3fc90     01 00 C0 04 
3fc94     D0 04 44 01 
3fc98     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3fc9c     00 00 7D 1D 
3fca0     01 00 63 2C 
3fca4     00 1E 96 01 
3fca8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3fcac     00 1F 08 06 
3fcb0     10 1F 06 06 
3fcb4     20 1F 08 06 
3fcb8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3fcbc     40 1F 06 06 
3fcc0     51 1F 07 00 
3fcc4     59 1F 52 1F 
3fcc8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3fccc     5D 1F 56 1F 
3fcd0     5F 1F 60 1F 
3fcd4     08 06 70 1F 
3fcd8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3fcdc     BB 1F C8 1F 
3fce0     C9 1F CA 1F 
3fce4     CB 1F DA 1F 
3fce8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3fcec     F9 1F EA 1F 
3fcf0     EB 1F FA 1F 
3fcf4     FB 1F 80 1F 
3fcf8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3fcfc     08 06 A0 1F 
3fd00     08 06 B0 1F 
3fd04     04 00 B8 1F 
3fd08     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3fd0c     BC 1F CC 1F 
3fd10     01 00 C3 1F 
3fd14     D0 1F 02 06 
3fd18     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3fd1c     E5 1F 01 00 
3fd20     EC 1F F3 1F 
3fd24     01 00 FC 1F 
3fd28     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3fd2c     32 21 70 21 
3fd30     10 02 84 21 
3fd34     01 00 83 21 
3fd38     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3fd3c     30 2C 2F 04 
3fd40     60 2C 02 01 
3fd44     67 2C 06 01 
3fd48     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3fd4c     80 2C 64 01 
3fd50     00 2D 26 08 
3fd54     41 FF 1A 03 
3fd58     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3fd5c     05 07 09 0E 
3fd60     10 12 14 16 
3fd64     18 1C 1E 43 
3fd68     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3fd6c     41 41 43 45 
3fd70     45 45 49 49 
3fd74     49 41 41 45 
3fd78     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3fd7c     4F 55 55 59 
3fd80     4F 55 4F 9C 
3fd84     4F 9E 9F 41 
3fd88     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3fd8c     A5 A6 A7 A8 
3fd90     A9 AA AB AC 
3fd94     AD AE AF B0 
3fd98     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3fd9c     41 41 41 B8 
3fda0     B9 BA BB BC 
3fda4     BD BE BF C0 
3fda8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3fdac     C5 41 41 C8 
3fdb0     C9 CA CB CC 
3fdb4     CD CE CF D1 
3fdb8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3fdbc     49 49 49 49 
3fdc0     D9 DA DB DC 
3fdc4     DD 49 DF 4F 
3fdc8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3fdcc     4F E6 E8 E8 
3fdd0     55 55 55 59 
3fdd4     59 EE EF F0 
3fdd8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3fddc     F5 F6 F7 F8 
3fde0     F9 FA FB FC 
3fde4     FD FE FF 00 
3fde8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3fdec     00 00 00 00 | 	byte	$00, $00, $00, $00
3fdf0     00 00 60 0A | 	long	(166 {_fatfs_cc_v_close})<<20
3fdf4     00 00 70 0A | 	long	(167 {_fatfs_cc_v_read})<<20
3fdf8     00 00 80 0A | 	long	(168 {_fatfs_cc_v_write})<<20
3fdfc     00 00 90 0A | 	long	(169 {_fatfs_cc_v_lseek})<<20
3fe00     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_ioctl})<<20
3fe04     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_flush})<<20
3fe08     00 00 00 00 
3fe0c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3fe10     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_open})<<20
3fe14     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_creat})<<20
3fe18     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_opendir})<<20
3fe1c     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_closedir})<<20
3fe20     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_readdir})<<20
3fe24     00 00 00 0B | 	long	(176 {_fatfs_cc_v_stat})<<20
3fe28     00 00 10 0B | 	long	(177 {_fatfs_cc_v_mkdir})<<20
3fe2c     00 00 20 0B | 	long	(178 {_fatfs_cc_v_rmdir})<<20
3fe30     00 00 30 0B | 	long	(179 {_fatfs_cc_v_remove})<<20
3fe34     00 00 40 0B | 	long	(180 {_fatfs_cc_v_rename})<<20
3fe38     00 00 50 0B | 	long	(181 {_fatfs_cc_v_init})<<20
3fe3c     00 00 60 0B | 	long	(182 {_fatfs_cc_v_deinit})<<20
3fe40     FF FF FF FF 
3fe44     1F 00 00 00 
3fe48     1C 00 00 00 
3fe4c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3fe50     1E 00 00 00 
3fe54     1F 00 00 00 
3fe58     1E 00 00 00 
3fe5c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3fe60     1F 00 00 00 
3fe64     1E 00 00 00 
3fe68     1F 00 00 00 
3fe6c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3fe70     1F 00 00 00 
3fe74     00 00 00 00 
3fe78     1F 00 00 00 
3fe7c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3fe80     5A 00 00 00 
3fe84     78 00 00 00 
3fe88     97 00 00 00 
3fe8c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3fe90     D4 00 00 00 
3fe94     F3 00 00 00 
3fe98     11 01 00 00 
3fe9c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3fea0     4E 01 00 00 
3fea4     6D 01 00 00 
3fea8     FF FF FF FF 
3feac     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3feb0     00 00 00 00 
      ...             
3fec8     00 00 00 00 
3fecc     00 00 00 00 | 	byte	$00[32]
3fed0     EE FE 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3fed4     F2 FE 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3fed8     00 00 00 00 
3fedc     00 00 00 00 
3fee0     00 00 00 00 
3fee4     00 00 00 00 
3fee8     00 00       | 	byte	$00[18]
3feea     3F 3F 3F 00 
3feee     55 43 54 00 
3fef2     55 43 54 00 
3fef6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3fefa     00 00 00 00 
3fefe     00 00 00    | 	byte	$00[7]
3ff01     CA 9A 3B 00 
3ff05     00 00 00 01 
3ff09     01 01 01 01 
3ff0d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ff11     91 11 11 11 
3ff15     11 01 01 01 
3ff19     01 01 01 01 
3ff1d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ff21     01 01 01 01 
3ff25     01 01 01    | 	byte	$01[7]
3ff28     90 20 20 20 
3ff2c     20 20 20 20 
3ff30     20 20 20 20 
3ff34     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3ff38     42 42 42 42 
3ff3c     42 42 42 42 
3ff40     42 42       | 	byte	$42[10]
3ff42     20 20 20 20 
3ff46     20 20 20    | 	byte	$20[7]
3ff49     44 44 44 44 
3ff4d     44 44       | 	byte	$44[6]
3ff4f     04 04 04 04 
3ff53     04 04 04 04 
3ff57     04 04 04 04 
3ff5b     04 04 04 04 
3ff5f     04 04 04 04 | 	byte	$04[20]
3ff63     20 20 20 20 
3ff67     20 20       | 	byte	$20[6]
3ff69     48 48 48 48 
3ff6d     48 48       | 	byte	$48[6]
3ff6f     08 08 08 08 
3ff73     08 08 08 08 
3ff77     08 08 08 08 
3ff7b     08 08 08 08 
3ff7f     08 08 08 08 | 	byte	$08[20]
3ff83     20 20 20 20 
3ff87     01 00 00 00 
3ff8b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3ff8c                 | __methodtable__
3ff8c     9C 5B 01 00 | 	long	@_do_no_command
3ff90     20 EC 01 00 | 	long	@_do_plus
3ff94     40 DC 01 00 | 	long	@_do_minus
3ff98     08 EB 01 00 | 	long	@_do_or
3ff9c     C0 E2 01 00 | 	long	@_do_mul
3ffa0     04 C7 01 00 | 	long	@_do_fdiv
3ffa4     F0 BE 01 00 | 	long	@_do_and
3ffa8     08 C0 01 00 | 	long	@_do_div
3ffac     A0 E0 01 00 | 	long	@_do_mod
3ffb0     D4 F2 01 00 | 	long	@_do_shl
3ffb4     EC F3 01 00 | 	long	@_do_shr
3ffb8     0C F1 01 00 | 	long	@_do_power
3ffbc     A8 B4 01 00 | 	long	@_do_getvar
3ffc0     48 78 01 00 | 	long	@_do_push
3ffc4     A0 AE 01 00 | 	long	@_do_assign
3ffc8     30 F4 00 00 | 	long	@_do_cls
3ffcc     68 55 01 00 | 	long	@_do_new
3ffd0     8C 70 01 00 | 	long	@_do_plot
3ffd4     3C 16 01 00 | 	long	@_do_draw
3ffd8     F4 72 01 00 | 	long	@_do_print
3ffdc     10 F2 00 00 | 	long	@_do_circle
3ffe0     70 18 01 00 | 	long	@_do_fcircle
3ffe4     F4 E0 00 00 | 	long	@_do_box
3ffe8     54 1D 01 00 | 	long	@_do_frame
3ffec     70 F4 00 00 | 	long	@_do_color
3fff0     E4 1A 01 00 | 	long	@_do_for
3fff4     D4 57 01 00 | 	long	@_do_next
3fff8     98 43 01 00 | 	long	@_do_list
3fffc     E0 93 01 00 | 	long	@_do_run
40000     98 17 01 00 | 	long	@_do_error
40004     A0 29 01 00 | 	long	@_do_fast_goto
40008     90 2A 01 00 | 	long	@_do_find_goto
4000c     A4 2C 01 00 | 	long	@_do_slow_goto
40010     BC 5B 01 00 | 	long	@_do_nothing
40014     F8 D3 00 00 | 	long	@_test_csave
40018     FC 97 01 00 | 	long	@_do_save
4001c     34 46 01 00 | 	long	@_do_load
40020     C8 63 01 00 | 	long	@_do_pinwrite
40024     E0 AB 01 00 | 	long	@_do_waitms
40028     14 AD 01 00 | 	long	@_do_waitvbl
4002c     98 2F 01 00 | 	long	@_do_if
40030     30 17 01 00 | 	long	@_do_else
40034     28 C2 01 00 | 	long	@_do_eq
40038     CC C8 01 00 | 	long	@_do_ge
4003c     98 D2 01 00 | 	long	@_do_le
40040     B4 CD 01 00 | 	long	@_do_gt
40044     74 D7 01 00 | 	long	@_do_lt
40048     2C E6 01 00 | 	long	@_do_ne
4004c     48 91 01 00 | 	long	@_do_rnd
40050     DC E2 00 00 | 	long	@_do_brun
40054     78 DC 00 00 | 	long	@_do_beep
40058     CC 0E 01 00 | 	long	@_do_dir
4005c     FC 5F 01 00 | 	long	@_do_paper
40060     54 33 01 00 | 	long	@_do_ink
40064     68 1A 01 00 | 	long	@_do_font
40068     78 50 01 00 | 	long	@_do_mode
4006c     24 54 01 00 | 	long	@_do_mouse
40070     20 28 01 00 | 	long	@_do_gettime
40074     CC F5 00 00 | 	long	@_do_cursor
40078     88 F3 00 00 | 	long	@_do_click
4007c     E0 54 01 00 | 	long	@_do_mousex
40080     24 55 01 00 | 	long	@_do_mousey
40084     58 54 01 00 | 	long	@_do_mousek
40088     9C 54 01 00 | 	long	@_do_mousew
4008c     48 A1 01 00 | 	long	@_do_sin
40090     80 A4 01 00 | 	long	@_do_stick
40094     10 A6 01 00 | 	long	@_do_strig
40098     A0 A2 01 00 | 	long	@_do_sprite
4009c     F0 09 01 00 | 	long	@_do_defsprite
400a0     CC 26 01 00 | 	long	@_do_getpixel
400a4     BC AB 01 00 | 	long	@_do_waitclock
400a8     F0 DF 01 00 | 	long	@_do_negative
400ac     CC 7E 01 00 | 	long	@_do_rdpin
400b0     6C 93 01 00 | 	long	@_do_rqpin
400b4     F4 61 01 00 | 	long	@_do_pinread
400b8     20 AD 01 00 | 	long	@_do_wrpin
400bc     A0 AD 01 00 | 	long	@_do_wxpin
400c0     20 AE 01 00 | 	long	@_do_wypin
400c4     34 61 01 00 | 	long	@_do_pinfloat
400c8     B4 61 01 00 | 	long	@_do_pinlo
400cc     74 61 01 00 | 	long	@_do_pinhi
400d0     78 62 01 00 | 	long	@_do_pinstart
400d4     88 63 01 00 | 	long	@_do_pintoggle
400d8     6C 72 01 00 | 	long	@_do_position
400dc     A8 F4 00 00 | 	long	@_do_cos
400e0     A0 A7 01 00 | 	long	@_do_tan
400e4     60 DB 00 00 | 	long	@_do_atn
400e8     50 DA 00 00 | 	long	@_do_asin
400ec     E0 D7 00 00 | 	long	@_do_acos
400f0     8C A3 01 00 | 	long	@_do_sqr
400f4     54 19 01 00 | 	long	@_do_fill
400f8     00 01 01 00 | 	long	@_do_defsnd
400fc     00 F6 00 00 | 	long	@_do_defenv
40100     A4 7E 01 00 | 	long	@_do_rad
40104     64 0D 01 00 | 	long	@_do_deg
40108     D4 33 01 00 | 	long	@_do_int
4010c     50 64 01 00 | 	long	@_do_play
40110     A0 9B 01 00 | 	long	@_do_setdelay
40114     48 9C 01 00 | 	long	@_do_setenv
40118     F0 9C 01 00 | 	long	@_do_setlen
4011c     98 9D 01 00 | 	long	@_do_setpan
40120     E8 9E 01 00 | 	long	@_do_setvol
40124     90 9F 01 00 | 	long	@_do_setwave
40128     40 9E 01 00 | 	long	@_do_setsustain
4012c     40 8E 01 00 | 	long	@_do_release
40130     B8 24 01 00 | 	long	@_do_getenvsustain
40134     5C 71 01 00 | 	long	@_do_poke
40138     64 15 01 00 | 	long	@_do_dpoke
4013c     14 4D 01 00 | 	long	@_do_lpoke
40140     84 60 01 00 | 	long	@_do_peek
40144     B8 14 01 00 | 	long	@_do_dpeek
40148     68 4C 01 00 | 	long	@_do_lpeek
4014c     B0 1E 01 00 | 	long	@_do_fre
40150     C8 25 01 00 | 	long	@_do_getnotevalue
40154     60 BA 01 00 | 	long	@_do_getaddr
40158     7C 30 01 00 | 	long	@_do_inkey
4015c     60 D7 00 00 | 	long	@_do_abs
40160     34 2E 01 00 | 	long	@_do_hex
40164     90 DF 00 00 | 	long	@_do_bin
40168     B0 A8 01 00 | 	long	@_do_val
4016c     10 F1 00 00 | 	long	@_do_chr
40170     F0 D8 00 00 | 	long	@_do_asc
40174     98 40 01 00 | 	long	@_do_left
40178     BC 8F 01 00 | 	long	@_do_right
4017c     EC 4D 01 00 | 	long	@_do_mid
40180     24 42 01 00 | 	long	@_do_len
40184     88 28 01 00 | 	long	@_do_gosub
40188     10 8F 01 00 | 	long	@_do_return
4018c     54 17 01 00 | 	long	@_do_end
40190     34 72 01 00 | 	long	@_do_pop
40194     EC 4A 01 00 | 	long	@_do_log
40198     04 EF 00 00 | 	long	@_do_changevol
4019c     E4 EF 00 00 | 	long	@_do_changewav
401a0     F4 ED 00 00 | 	long	@_do_changepan
401a4     D8 EA 00 00 | 	long	@_do_changefreq
401a8     38 A0 01 00 | 	long	@_do_shutup
401ac     18 93 01 00 | 	long	@_do_round
401b0     88 17 01 00 | 	long	@_do_enter
401b4     E4 5C 01 00 | 	long	@_do_open
401b8     B4 F3 00 00 | 	long	@_do_close
401bc     14 1F 01 00 | 	long	@_do_get
401c0     64 79 01 00 | 	long	@_do_put
401c4     18 E5 00 00 | 	long	@_do_cd
401c8     8C 0D 01 00 | 	long	@_do_delete
401cc     B8 4F 01 00 | 	long	@_do_mkdir
401d0     8C DD 00 00 | 	long	@_do_blit
401d4     7C 1E 01 00 | 	long	@_do_framebuf
401d8     C0 5B 01 00 | 	long	@_do_on
401dc     58 A2 01 00 | 	long	@_do_skip
401e0     90 34 01 00 | 	long	@_do_input
401e4     30 81 01 00 | 	long	@_do_read
401e8     D8 8E 01 00 | 	long	@_do_restore
401ec     6C 33 02 00 | 	long	@_hg010b_spin2_putchar
401f0     10 49 03 00 | 	long	@__struct___bas_wrap_sender_tx
401f4     54 49 03 00 | 	long	@__struct___bas_wrap_sender_rx
401f8     9C 49 03 00 | 	long	@__struct___bas_wrap_sender_close
401fc     40 48 03 00 | 	long	@__struct__s_vfs_file_t_putchar
40200     B0 48 03 00 | 	long	@__struct__s_vfs_file_t_getchar
40204     F8 47 03 00 | 	long	@___strs_cl_pfunc
40208     8C A5 02 00 | 	long	@__system____root_opendir
4020c     28 A6 02 00 | 	long	@__system____root_closedir
40210     A4 A5 02 00 | 	long	@__system____root_readdir
40214     30 A6 02 00 | 	long	@__system____root_stat
40218     7C 9E 02 00 | 	long	@__system____default_putc
4021c     00 9E 02 00 | 	long	@__system____default_getc
40220     24 9F 02 00 | 	long	@__system____default_flush
40224     FC 32 03 00 | 	long	@_fatfs_cc_v_close
40228     18 37 03 00 | 	long	@_fatfs_cc_v_read
4022c     2C 38 03 00 | 	long	@_fatfs_cc_v_write
40230     0C 39 03 00 | 	long	@_fatfs_cc_v_lseek
40234     94 39 03 00 | 	long	@_fatfs_cc_v_ioctl
40238     E8 39 03 00 | 	long	@_fatfs_cc_v_open
4023c     60 32 03 00 | 	long	@_fatfs_cc_v_creat
40240     40 33 03 00 | 	long	@_fatfs_cc_v_opendir
40244     B4 33 03 00 | 	long	@_fatfs_cc_v_closedir
40248     F4 33 03 00 | 	long	@_fatfs_cc_v_readdir
4024c     28 35 03 00 | 	long	@_fatfs_cc_v_stat
40250     A8 39 03 00 | 	long	@_fatfs_cc_v_mkdir
40254     C8 39 03 00 | 	long	@_fatfs_cc_v_rmdir
40258     B8 39 03 00 | 	long	@_fatfs_cc_v_remove
4025c     D8 39 03 00 | 	long	@_fatfs_cc_v_rename
40260     F8 3A 03 00 | 	long	@_fatfs_cc_v_init
40264     00 3B 03 00 | 	long	@_fatfs_cc_v_deinit
40268     CC 4F 02 00 | 	long	@__system___tx
4026c     0C 50 02 00 | 	long	@__system___rx
40270     9C B1 02 00 | 	long	@__system___rxtxioctl_0758
40274     F4 B1 02 00 | 	long	@__system____dummy_flush_0759
40278     C8 3A 03 00 | 	long	@_fatfs_cc_v_flush
4027c                 | __heap_base
4027c     00 00 00 00 
      ...             
5797c     00 00 00 00 
57980     00 00 00 00 | 	long	0[24002]
57984                 | objmem
57984     00 00 00 00 
      ...             
61dd8     00 00 00 00 
61ddc     00 00 00 00 | 	long	0[10519]
61de0                 | stackspace
61de0     00 00 00 00 | 	long	0[1]
61de4 100             | 	org	COG_BSS_START
61de4 100             | _var01
61de4 100             | 	res	1
61de4 101             | _var02
61de4 101             | 	res	1
61de4 102             | _var03
61de4 102             | 	res	1
61de4 103             | _var04
61de4 103             | 	res	1
61de4 104             | _var05
61de4 104             | 	res	1
61de4 105             | _var06
61de4 105             | 	res	1
61de4 106             | _var07
61de4 106             | 	res	1
61de4 107             | _var08
61de4 107             | 	res	1
61de4 108             | _var09
61de4 108             | 	res	1
61de4 109             | arg01
61de4 109             | 	res	1
61de4 10a             | arg02
61de4 10a             | 	res	1
61de4 10b             | arg03
61de4 10b             | 	res	1
61de4 10c             | arg04
61de4 10c             | 	res	1
61de4 10d             | arg05
61de4 10d             | 	res	1
61de4 10e             | arg06
61de4 10e             | 	res	1
61de4 10f             | arg07
61de4 10f             | 	res	1
61de4 110             | arg08
61de4 110             | 	res	1
61de4 111             | arg09
61de4 111             | 	res	1
61de4 112             | arg10
61de4 112             | 	res	1
61de4 113             | local01
61de4 113             | 	res	1
61de4 114             | local02
61de4 114             | 	res	1
61de4 115             | local03
61de4 115             | 	res	1
61de4 116             | local04
61de4 116             | 	res	1
61de4 117             | local05
61de4 117             | 	res	1
61de4 118             | local06
61de4 118             | 	res	1
61de4 119             | local07
61de4 119             | 	res	1
61de4 11a             | local08
61de4 11a             | 	res	1
61de4 11b             | local09
61de4 11b             | 	res	1
61de4 11c             | local10
61de4 11c             | 	res	1
61de4 11d             | local11
61de4 11d             | 	res	1
61de4 11e             | local12
61de4 11e             | 	res	1
61de4 11f             | local13
61de4 11f             | 	res	1
61de4 120             | local14
61de4 120             | 	res	1
61de4 121             | local15
61de4 121             | 	res	1
61de4 122             | local16
61de4 122             | 	res	1
61de4 123             | local17
61de4 123             | 	res	1
61de4 124             | local18
61de4 124             | 	res	1
61de4 125             | local19
61de4 125             | 	res	1
61de4 126             | local20
61de4 126             | 	res	1
61de4 127             | local21
61de4 127             | 	res	1
61de4 128             | local22
61de4 128             | 	res	1
61de4 129             | local23
61de4 129             | 	res	1
61de4 12a             | local24
61de4 12a             | 	res	1
61de4 12b             | local25
61de4 12b             | 	res	1
61de4 12c             | local26
61de4 12c             | 	res	1
61de4 12d             | local27
61de4 12d             | 	res	1
61de4 12e             | local28
61de4 12e             | 	res	1
61de4 12f             | local29
61de4 12f             | 	res	1
61de4 130             | local30
61de4 130             | 	res	1
61de4 131             | local31
61de4 131             | 	res	1
61de4 132             | local32
61de4 132             | 	res	1
61de4 133             | local33
61de4 133             | 	res	1
61de4 134             | local34
61de4 134             | 	res	1
61de4 135             | local35
61de4 135             | 	res	1
61de4 136             | local36
61de4 136             | 	res	1
61de4 137             | local37
61de4 137             | 	res	1
61de4 138             | local38
61de4 138             | 	res	1
61de4 139             | local39
61de4 139             | 	res	1
61de4 13a             | local40
61de4 13a             | 	res	1
61de4 13b             | local41
61de4 13b             | 	res	1
61de4 13c             | local42
61de4 13c             | 	res	1
61de4 13d             | local43
61de4 13d             | 	res	1
61de4 13e             | local44
61de4 13e             | 	res	1
61de4 13f             | local45
61de4 13f             | 	res	1
61de4 140             | local46
61de4 140             | 	res	1
61de4 141             | local47
61de4 141             | 	res	1
61de4 142             | local48
61de4 142             | 	res	1
61de4 143             | local49
61de4 143             | 	res	1
61de4 144             | muldiva_
61de4 144             | 	res	1
61de4 145             | muldivb_
61de4 145             | 	res	1
61de4 146             | 	fit	480
61de4 146             | 
