con
	_clkfreq = 20000000
	_clkmode = 16779595
'     
'     ' P2 EDGE with PSRAM pin mappings (P2-EC32MB)
'    DATABUS  = 48
	DATABUS = 48
'     CLK_PIN  = 55
	CLK_PIN = 55
'     CE_PIN   = 54
	CE_PIN = 54
' '    DATABUS  = 0
'   '  CLK_PIN  = 7
'  '   CE_PIN   = 6
' 
'     ' number of address bits used in 8MB of PSRAM
'     ADDRSIZE = 23   
	ADDRSIZE = 23
' 
'     ' 8 microsecond CS low time
'     MAX_CS_LOW_USEC = 8
	MAX_CS_LOW_USEC = 8
' 
'     ' optional FLAGS for driver
'     FLAGS = 1<<driver.EXPANSION_BIT
	FLAGS = 268435456
'     
'     ' These error codes are compatible with the larger, complete driver
'     ERR_INVALID      =  -6 ' invalid arguments
	ERR_INVALID = -6
'     ERR_TOO_SLOW     = -14 ' can't send sufficient data at this P2 clock speed
	ERR_TOO_SLOW = -14
'     ERR_INACTIVE     = -15 ' driver is not running
	ERR_INACTIVE = -15
'     ERR_ABORTED      = -16 ' driver was shutdown
	ERR_ABORTED = -16
'     ERR_WOULD_BLOCK  = -24
	ERR_WOULD_BLOCK = -24
'     ERR_NO_LOCK      = -26 ' no LOCK available for driver
	ERR_NO_LOCK = -26
'     ERR_MAILBOX_BUSY = -28 ' mailbox still has operation pending
	ERR_MAILBOX_BUSY = -28
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 20000000
	long	0 ' clock mode: will default to $100094b
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16779592
	waitx	##200000
	mov	pa, ##16779595
	hubset	pa
	wrlong	pa, #24
	wrlong	##20000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_start
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    mov	fcache_tmpb_,ptrb
    pop	ptrb
    altd	pa,ret_instr_
    mov	 0-0, ret_instr_
    setq	pa
    rdlong	$0, ptrb++
    push	ptrb
    mov ptrb,fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    _ret_ cmp inb,#0
fcache_tmpb_
    long 0
fcache_load_ptr_
    long FCACHE_LOAD_
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

objptr
	long	@objmem
ptr__dat__
	long	@_dat_
ptr__psram4drv_dat__
	long	@_psram4drv_dat_
ptr_stackspace_
	long	@stackspace
result1
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' '..............................................................................
' 
' {{
' }}
' PUB start() : result
_start
'     return startx(0, 0, 0, -1)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	neg	arg04, #1
	call	#_startx
_start_ret
	ret

' 
' '..............................................................................
' 
' {{
' }}
' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
_startx
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg03
	mov	local03, arg04
'     stop() ' restart driver if required
	call	#_stop
	cmp	local01, #0 wz
 if_e	rdlong	local01, #20
	abs	arg02, local01 wc
	qdiv	arg02, ##4000000
' 
'     ' use current frequency if none specified
' 
'     if freq == 0 
'         freq := clkfreq 
' 
'     ' compute the device burst size including overheads to keep CS low time below 8us
' 
'     burst := (((MAX_CS_LOW_USEC*(freq/4000000)) - 132) >> 4) << 4  ' some sane rounded value
'     if burst < 0
'         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
	getqx	arg02
	negc	arg04, arg02
	shl	arg04, #3
	sub	arg04, #132
	shr	arg04, #4
	shl	arg04, #4
	cmps	arg04, #0 wc
 if_b	neg	result1, #14
 if_b	jmp	#LR__0004
' 
'     ' compute the input delay
' 
'     if delay <= 0
	cmps	local02, #1 wc
 if_ae	jmp	#LR__0001
'         delay := lookupDelay(freq)
	mov	arg01, local01
	call	#_lookupDelay
	mov	local02, result1
	jmp	#LR__0002
LR__0001
'     else
'         delay <#= $f ' limit to 15
	fles	local02, #15
LR__0002
' 
'     ' create our lock
' 
'     driverlock := LOCKNEW()  
	mov	result1, #0
	locknew	result1
	add	ptr__dat__, #260
	wrlong	result1, ptr__dat__
'     if driverlock == -1
	sub	ptr__dat__, #260
	cmp	result1, ##-1 wz
'         return ERR_NO_LOCK
 if_e	neg	result1, #26
 if_e	jmp	#LR__0004
' 
'     ' patch in the proper data and HUB addresses to the startup structure
' 
'     long[@startupData][0]:=clkfreq
	rdlong	local01, #20
	add	ptr__dat__, #296
	wrlong	local01, ptr__dat__
'     long[@startupData][5]:=@deviceData
	add	ptr__dat__, #32
	mov	local01, ptr__dat__
	sub	ptr__dat__, #32
	mov	arg02, ptr__dat__
	add	arg02, #20
	wrlong	local01, arg02
'     long[@startupData][6]:=@qosData
	add	ptr__dat__, #160
	mov	local01, ptr__dat__
	sub	ptr__dat__, #160
	mov	arg02, ptr__dat__
	add	arg02, #24
	wrlong	local01, arg02
'     long[@startupData][7]:=@mailboxes
	add	ptr__dat__, #192
	mov	local01, ptr__dat__
	sub	ptr__dat__, #192
	mov	arg02, ptr__dat__
	add	arg02, #28
	wrlong	local01, arg02
' 
'     ' setup some default bank and QoS parameter values
' 
'     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
	add	ptr__dat__, #32
	mov	arg01, ptr__dat__
	sub	ptr__dat__, #328
	shl	arg04, #16
	shl	local02, #12
	or	arg04, local02
	or	arg04, #22
	mov	arg02, arg04
	mov	arg03, #2
	call	#\builtin_longfill_
'     longfill(@qosData, $7FFF0000, 8)
	add	ptr__dat__, #456
	mov	arg03, #7
	setq	arg03
	wrlong	##2147418112, ptr__dat__
' 
'     ' get the address of the PSRAM memory driver so we can start it
' 
'     driverAddr:= driver.getDriverAddr()
'     return @driver_start
	mov	arg02, ptr__psram4drv_dat__
' 
'     ' start the PSRAM memory driver and wait for it to complete initialization
' 
'     if desiredcog < 0
	cmps	local03, #0 wc
'         desiredcog := NEWCOG
 if_b	mov	local03, #16
'     drivercog := coginit(desiredcog, driverAddr, @startupData)
	sub	ptr__dat__, #160
	mov	local04, local03
	setq	ptr__dat__
	coginit	local04, arg02 wc
 if_b	neg	local04, #1
	sub	ptr__dat__, #40
	wrlong	local04, ptr__dat__
'     repeat until long[@startupData] == 0 
	add	ptr__dat__, #40
LR__0003
	rdlong	local04, ptr__dat__ wz
 if_ne	jmp	#LR__0003
' 
'     return drivercog
	sub	ptr__dat__, #40
	rdlong	result1, ptr__dat__
	sub	ptr__dat__, #256
LR__0004
	mov	ptra, fp
	call	#popregs_
_startx_ret
	ret

' 
' '..............................................................................
' 
' {{
' }}
' PUB stop() : i
_stop
	mov	_var01, #0
'     if drivercog <> -1
	add	ptr__dat__, #256
	rdlong	arg01, ptr__dat__
	sub	ptr__dat__, #256
	cmp	arg01, ##-1 wz
 if_e	jmp	#LR__0013
'         cogstop(drivercog) ' a rather brutal stop
	add	ptr__dat__, #256
	rdlong	arg01, ptr__dat__
	sub	ptr__dat__, #256
	cogstop	arg01
	callpa	#(@LR__0012-@LR__0010)>>2,fcache_load_ptr_
'         repeat i from 0 to 7
LR__0010
'             if long[@mailboxes][i*3] < 0
	add	ptr__dat__, #488
	mov	result1, _var01
	shl	result1, #1
	add	result1, _var01
	shl	result1, #2
	add	result1, ptr__dat__
	rdlong	result1, result1
	cmps	result1, #0 wc
	sub	ptr__dat__, #488
 if_ae	jmp	#LR__0011
'                 long[@mailboxes][i*3] := -ERR_ABORTED ' abort request
	add	ptr__dat__, #488
	mov	result1, _var01
	shl	result1, #1
	add	result1, _var01
	shl	result1, #2
	add	result1, ptr__dat__
	wrlong	#16, result1
	sub	ptr__dat__, #488
LR__0011
	add	_var01, #1
	cmps	_var01, #8 wc
 if_b	jmp	#LR__0010
LR__0012
'         drivercog := -1
	add	ptr__dat__, #256
	wrlong	##-1, ptr__dat__
	sub	ptr__dat__, #256
LR__0013
'     if driverlock <> -1
	add	ptr__dat__, #260
	rdlong	arg01, ptr__dat__
	sub	ptr__dat__, #260
	cmp	arg01, ##-1 wz
'         LOCKRET(driverlock)
 if_ne	add	ptr__dat__, #260
 if_ne	rdlong	arg01, ptr__dat__
 if_ne	lockret	arg01
'         driverlock := -1
 if_ne	wrlong	##-1, ptr__dat__
 if_ne	sub	ptr__dat__, #260
	mov	result1, _var01
_stop_ret
	ret

' 
' '..............................................................................
' 
' {{
' }}
' PRI lookupDelay(freq) : delay | profile
_lookupDelay
'     profile := @delayTable
	add	ptr__dat__, #264
	mov	_var01, ptr__dat__
'     delay := long[profile][0]
	rdlong	_var02, _var01
'     repeat while long[profile][1] 
	sub	ptr__dat__, #264
	callpa	#(@LR__0021-@LR__0020)>>2,fcache_load_ptr_
LR__0020
	add	_var01, #4
	rdlong	result1, _var01 wz
	sub	_var01, #4
 if_e	jmp	#LR__0022
'         if freq +< long[profile][1] 
	add	_var01, #4
	rdlong	result1, _var01
	sub	_var01, #4
	cmp	arg01, result1 wc
'             quit
'         profile += 4
 if_ae	add	_var01, #4
'         delay++
 if_ae	add	_var02, #1
 if_ae	jmp	#LR__0020
LR__0021
LR__0022
	mov	result1, _var02
_lookupDelay_ret
	ret
hubexit
	jmp	#cogexit
	alignl
_dat_
'-'     listdata long 0[8*8]
	byte	$00[256]
'-'             orgh
'-' 
'-' ' driver state
'-' drivercog   long    -1  ' COG id of driver
	byte	$ff, $ff, $ff, $ff
'-' driverlock  long    -1  ' LOCK id of driver
	byte	$ff, $ff, $ff, $ff
'-' 
'-' ' delay profile
'-' delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
	byte	$07, $00, $00, $00, $00, $cf, $7b, $05, $80, $d1, $f0, $08, $80, $4f, $47, $0c
	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
'-' 
'-' ' data to be passed to driver when starting it
'-' startupData
'-'     long    0           ' current frequency
	byte	$00, $00, $00, $00
'-'     long    FLAGS       ' optional flags for driver
	byte	$00, $00, $00, $10
'-'     long    0           ' reset pin mask on port A for PSRAM (none)
	byte	$00, $00, $00, $00
'-'     long    0           ' reset pin mask on port B for PSRAM (none)
	byte	$00, $00, $00, $00
'-'     long    DATABUS     ' PSRAM data bus start pin
	byte	$30, $00, $00, $00
'-'     long    deviceData  ' address of devices data structure in HUBRAM
	long	@@@_dat_ + 328
'-'     long    qosData     ' address of QoS data structure in HUBRAM
	long	@@@_dat_ + 456
'-'     long    mailboxes   ' address of mailbox structure in HUBRAM
	long	@@@_dat_ + 488
'-' 
'-' ' data for memory
'-' deviceData
'-'     ' 16 bank parameters follow (16MB per bank)
'-'     long    0[16]                               ' banks 0-15
	byte	$00[64]
'-'     ' 16 banks of pin parameters follow
'-'     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
	byte	$36, $37, $00, $00
'-'     long    -1[15]                              ' banks 1-15
	byte	$ff[60]
'-' 
'-' ' data for COG polling
'-' qosData 
'-'     long    $7FFF0000[8]    ' cog 0-7 default QoS parameters
	byte	$00, $00, $ff, $7f, $00, $00, $ff, $7f, $00, $00, $ff, $7f, $00, $00, $ff, $7f
	byte	$00, $00, $ff, $7f, $00, $00, $ff, $7f, $00, $00, $ff, $7f, $00, $00, $ff, $7f
'-'     
'-' ' mailbox storage
'-' mailboxes
'-'     long    0[8*3]          ' 3 longs per mailbox per COG
	byte	$00[96]
	alignl
_psram4drv_dat_
'-'                             orgh
'-' 
'-' driver_start
'-'                             org
'-' '..................................................................................................
'-' ' Memory layout for COG RAM once operational:
'-' '
'-' '  COG RAM address      Usage
'-' '  ---------------      ----
'-' '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
'-' '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
'-' '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
'-' '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
'-' '   $100-$197           Mailbox poller, error handlers, and all driver management code
'-' '  ~$198-$1F3           State and register variables
'-' '
'-' ' Also during driver COG startup:
'-' '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
'-' ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
'-' '..................................................................................................
'-'                             
'-' ' Mailbox storage after vector initialization
'-' 
'-' req0                        call    #init                   'do HW setup/initialization
	byte	$fc, $01, $b0, $fd
'-' data0                       rdlut   c, b wz                 'read bank info          
	byte	$ec, $db, $ab, $fa
'-' count0                      mov     a, b                    'set COGRAM address low nibble
	byte	$ec, $d7, $03, $f6
'-' req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
	byte	$68, $f0, $07, $a6
'-' data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
	byte	$0a, $da, $17, $f4
'-' count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
	byte	$50, $f0, $07, $16
'-' req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
	byte	$58, $f0, $07, $46
'-' data2                       mov     c, #$8                  'setup vector base to $80
	byte	$08, $da, $07, $f6
'-' count2                      setnib  a, c, #1                'prepare vector base address for bank
	byte	$ed, $d7, $0b, $f8
'-' req3                        altd    a, #0                   'prepare COG destination read address
	byte	$00, $d6, $8f, $f9
'-' data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
	byte	$61, $01, $a4, $fa
'-' count3                      incmod  c, #15 wz               'next vector
	byte	$0f, $da, $0f, $f7
'-' req4        if_nz           jmp     #count2                 'repeat
	byte	$ec, $ff, $9f, $5d
'-' data4                       incmod  b, #15 wz               'next bank
	byte	$0f, $d8, $0f, $f7
'-' count4      if_nz           jmp     #data0                  'repeat
	byte	$c8, $ff, $9f, $5d
'-' req5                        mov     ptra, #$20              'setup base LUT address to clear
	byte	$20, $f0, $07, $f6
'-' data5                       rep     #5, #80                 'update next 80 longs      
	byte	$50, $0a, $dc, $fc
'-' count5                      cmp     ptra, header wc         'check if LUT address range 
	byte	$df, $f1, $13, $f2
'-' req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
	byte	$e0, $f1, $93, $32
'-' data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
	byte	$61, $01, $3c, $cc
'-' count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
	byte	$61, $ab, $37, $3c
'-' req7        if_nc           add     $-1, const512           'increment source of LUT write data
	byte	$a3, $29, $00, $31
'-' data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
	byte	$ff, $ba, $03, $f6
'-' count7      _ret_           mov     255, #dolist            'setup list address, return to notify
	byte	$26, $ff, $05, $06
'-' 
'-' ' Mailbox parameter addresses per COG once patched
'-'                             
'-' cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
	byte	$04, $00, $00, $00
'-' cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
	byte	$10, $00, $00, $00
'-' cog2mboxdata                long    2*12+4                  '...
	byte	$1c, $00, $00, $00
'-' cog3mboxdata                long    3*12+4
	byte	$28, $00, $00, $00
'-' cog4mboxdata                long    4*12+4
	byte	$34, $00, $00, $00
'-' cog5mboxdata                long    5*12+4
	byte	$40, $00, $00, $00
'-' cog6mboxdata                long    6*12+4
	byte	$4c, $00, $00, $00
'-' cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
	byte	$58, $00, $00, $00
'-' 
'-' '..................................................................................................
'-' ' Per COG request and state setup and service branching
'-'         
'-' cog0                 
'-'                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
	byte	$20, $f0, $07, $f6
'-'                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
	byte	$18, $f2, $03, $f6
'-'                             mov     id, id0                 'get COG0 state
	byte	$cd, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG0 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$30, $04, $90, $5d
'-'                             mov     addr1, req0             'get mailbox request parameter for COG0
	byte	$00, $aa, $03, $f6
'-'                             mov     hubdata, data0          'get COG0 mailbox data parameter
	byte	$01, $ac, $03, $f6
'-'                             mov     count, count0           'get COG0 mailbox count parameter
	byte	$02, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog1                        
'-'                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
	byte	$2a, $f0, $07, $f6
'-'                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
	byte	$19, $f2, $03, $f6
'-'                             mov     id, id1                 'get COG1 state
	byte	$ce, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG1 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$00, $04, $90, $5d
'-'                             mov     addr1, req1             'get mailbox request parameter for COG1
	byte	$03, $aa, $03, $f6
'-'                             mov     hubdata, data1          'get COG1 mailbox data parameter
	byte	$04, $ac, $03, $f6
'-'                             mov     count, count1           'get COG1 mailbox count parameter
	byte	$05, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog2                         
'-'                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
	byte	$34, $f0, $07, $f6
'-'                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
	byte	$1a, $f2, $03, $f6
'-'                             mov     id, id2                 'get COG2 state
	byte	$cf, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG2 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$d0, $03, $90, $5d
'-'                             mov     addr1, req2             'get mailbox request parameter for COG2
	byte	$06, $aa, $03, $f6
'-'                             mov     hubdata, data2          'get COG2 mailbox data parameter
	byte	$07, $ac, $03, $f6
'-'                             mov     count, count2           'get COG2 mailbox count parameter
	byte	$08, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog3                        
'-'                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
	byte	$3e, $f0, $07, $f6
'-'                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
	byte	$1b, $f2, $03, $f6
'-'                             mov     id, id3                 'get COG3 state
	byte	$d0, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG3 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$a0, $03, $90, $5d
'-'                             mov     addr1, req3             'get mailbox request parameter for COG3
	byte	$09, $aa, $03, $f6
'-'                             mov     hubdata, data3          'get COG3 mailbox data parameter
	byte	$0a, $ac, $03, $f6
'-'                             mov     count, count3           'get COG3 mailbox count parameter
	byte	$0b, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog4                        
'-'                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
	byte	$48, $f0, $07, $f6
'-'                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
	byte	$1c, $f2, $03, $f6
'-'                             mov     id, id4                 'get COG4 state
	byte	$d1, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG4 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$70, $03, $90, $5d
'-'                             mov     addr1, req4             'get mailbox request parameter for COG4
	byte	$0c, $aa, $03, $f6
'-'                             mov     hubdata, data4          'get COG4 mailbox data parameter
	byte	$0d, $ac, $03, $f6
'-'                             mov     count, count4           'get COG4 mailbox count parameter
	byte	$0e, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog5                        
'-'                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
	byte	$52, $f0, $07, $f6
'-'                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
	byte	$1d, $f2, $03, $f6
'-'                             mov     id, id5                 'get COG5 state
	byte	$d2, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG5 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$40, $03, $90, $5d
'-'                             mov     addr1, req5             'get mailbox request parameter for COG5
	byte	$0f, $aa, $03, $f6
'-'                             mov     hubdata, data5          'get COG5 mailbox data parameter
	byte	$10, $ac, $03, $f6
'-'                             mov     count, count5           'get COG5 mailbox count parameter
	byte	$11, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog6                        
'-'                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
	byte	$5c, $f0, $07, $f6
'-'                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
	byte	$1e, $f2, $03, $f6
'-'                             mov     id, id6                 'get COG6 state
	byte	$d3, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG6 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$10, $03, $90, $5d
'-'                             mov     addr1, req6             'get mailbox request parameter for COG6
	byte	$12, $aa, $03, $f6
'-'                             mov     hubdata, data6          'get COG6 mailbox data parameter
	byte	$13, $ac, $03, $f6
'-'                             mov     count, count6           'get COG6 mailbox count parameter
	byte	$14, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-' cog7                        
'-'                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
	byte	$66, $f0, $07, $f6
'-'                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
	byte	$1f, $f2, $03, $f6
'-'                             mov     id, id7                 'get COG7 state
	byte	$d4, $bd, $03, $f6
'-'                             getword limit, id, #1           'get COG7 burst limit
	byte	$de, $43, $3b, $f9
'-'                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
	byte	$08, $cd, $af, $fa
'-'             if_nz           jmp     #restore                'if so restore state and resume
	byte	$e0, $02, $90, $5d
'-'                             mov     addr1, req7             'get mailbox request parameter for COG7
	byte	$15, $aa, $03, $f6
'-'                             mov     hubdata, data7          'get COG7 mailbox data parameter
	byte	$16, $ac, $03, $f6
'-'                             mov     count, count7           'get COG7 mailbox count parameter
	byte	$17, $ae, $03, $f6
'-'                             getbyte request, addr1, #3      'get request + bank info
	byte	$d5, $c5, $fb, $f8
'-'                             altd    request, #0             'lookup jump vector service table 
	byte	$00, $c4, $8f, $f9
'-'                             execf   request-0               'jump to service
	byte	$33, $c4, $63, $fd
'-'                             fit     128
'-' 
'-'                             fit     128
'-' pad                         long    0[128-$]                'align init code to $80
'-' 
'-' '..................................................................................................
'-' 
'-' ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
'-' 
'-' init                        
'-'                             ' read in the additional LUT RAM code
'-'                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
	byte	$f9, $3d, $03, $f1
'-'                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
	byte	$29, $9e, $67, $fd
'-'                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
	byte	$9e, $61, $00, $fb
'-' 
'-'                             ' read the startup parameters
'-'                             setq    #8-1                    'read 8 longs from hub
	byte	$28, $0e, $64, $fd
'-'                             rdlong  startupparams, ptra     '.. as the startup parameters 
	byte	$00, $3d, $07, $fb
'-' 
'-'                             ' setup some of the config flag dependent state and patch LUTRAM
'-'                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
	byte	$1c, $3e, $0f, $f4
'-' 
'-'             if_z            add     expansion, ptrb         'compensate for HUB address
	byte	$f9, $6d, $03, $a1
'-'             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
	byte	$01, $00, $00, $5f, $e1, $6c, $07, $56
'-'                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
	byte	$1d, $3e, $17, $f4
'-'             if_nc           or      clkconfig, registered   'enable this if so
	byte	$a8, $53, $43, $35
'-'             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
	byte	$00, $54, $07, $36
'-' 
'-'                             ' setup data pin modes and data bus pin group in streamer commands
'-'                             and     datapins, #%111000      'compute base pin
	byte	$38, $44, $07, $f5
'-'                             or      datapins, ##(3<<6)      'configure 4 pins total
	byte	$00, $00, $00, $ff, $c0, $44, $47, $f5
'-'                             mov     a, datapins             'get data pin base
	byte	$a2, $d7, $03, $f6
'-'                             wrpin   registered, datapins    'prepare data pins for address phase transfer
	byte	$a2, $51, $03, $fc
'-'                             shr     a, #3 wc                'determine data pin group
	byte	$03, $d6, $57, $f0
'-'                             or      a, #8
	byte	$08, $d6, $47, $f5
'-'                             setnib  ximm8, a, #5            'setup bus group in streamer
	byte	$eb, $2f, $2b, $f8
'-'                             bitc    ximm8, #19
	byte	$13, $2e, $47, $f4
'-'                             setnib  xrecvdata, a, #5
	byte	$eb, $31, $2b, $f8
'-'                             bitc    xrecvdata, #19
	byte	$13, $30, $47, $f4
'-'                             setnib  xsenddata, a, #5
	byte	$eb, $33, $2b, $f8
'-'                             bitc    xsenddata, #19
	byte	$13, $32, $47, $f4
'-'                             setnib  xsendimm, a, #5
	byte	$eb, $35, $2b, $f8
'-'                             bitc    xsendimm, #19
	byte	$13, $34, $47, $f4
'-'  
'-'                             ' setup device control pin states
'-'                             setq2   #32-1                   'read 32 longs to LUTRAM
	byte	$29, $3e, $64, $fd
'-'                             rdlong  $000, devicelist        'read bank/pin data for all banks    
	byte	$a3, $01, $00, $fb
'-'                             mov     const512, ##512         'prepare constant
	byte	$01, $00, $00, $ff, $00, $46, $07, $f6
'-' 
'-'                             mov     ptrb, #16               'point to bank pin config data
	byte	$10, $f2, $07, $f6
'-'                             rep     @pinloop, #16           'iterate through 16 banks
	byte	$10, $14, $dc, $fc
'-'                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
	byte	$e1, $c9, $b7, $fa
'-'                             and     pinconfig, pinmask      'save us from invalid bits in args
	byte	$ad, $c9, $03, $f5
'-'             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
	byte	$e4, $4f, $e3, $38
'-'             if_nc           wrpin   #0, cspin               'clear smart pin mode
	byte	$a7, $01, $08, $3c
'-'             if_nc           drvh    cspin                   'setup pins for all banks
	byte	$59, $4e, $63, $3d
'-'             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
	byte	$e4, $4d, $eb, $38
'-'             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
	byte	$50, $4c, $63, $3d
'-'             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
	byte	$a6, $53, $03, $3c
'-'             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
	byte	$a6, $03, $18, $3c
'-' '            if_nc           wxpin   #2, clkpin              'configure for 1 clocks between transitions
'-'             if_nc           drvl    clkpin                  'set clk state low
	byte	$58, $4c, $63, $3d
'-' pinloop
'-'                             ' generate minimum CE high time before access
'-'                             qdiv    frequency, ##1000000    'convert from Hz to MHz
	byte	$a1, $07, $00, $ff, $40, $3c, $17, $fd
'-'                             getqx   c                       'get P2 clocks per microsecond
	byte	$18, $da, $63, $fd
'-'                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
	byte	$96, $d6, $07, $f6
'-'                             mul     a, c                    'convert microseconds to clocks
	byte	$ed, $d7, $03, $fa
'-'                             waitx   a                       'delay
	byte	$1f, $d6, $63, $fd
'-'                             call    #hwinit                 'setup HW into QSPI mode
	byte	$f8, $05, $b0, $fd
'-' 
'-'                             ' setup the COG mailboxes and addresses 
'-'                             rep     #2, #8                  'setup loop to patch mailbox addresses
	byte	$08, $04, $dc, $fc
'-'                             alti    $+1, #%111_000          'increase D field
	byte	$38, $68, $a5, $f9
'-'                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
	byte	$a5, $31, $00, $f1
'-' 
'-'                             setq    #24-1
	byte	$28, $2e, $64, $fd
'-'                             wrlong  #0, mbox                'clear out mailboxes ????
	byte	$a5, $01, $68, $fc
'-' 
'-'                             ' setup the polling loop for active COGs 
'-'                             cogid   id
	byte	$01, $bc, $63, $fd
'-'                             alts    id, #id0                'determine id register of control COG
	byte	$cd, $bd, $97, $f9
'-'                             setd    patchid, #0             'patch into destination address
	byte	$00, $90, $b6, $f9
'-'                             push    ptra                    'save ptra before we lose it
	byte	$2a, $f0, $63, $fd
'-'                             mov     ptra, #10
	byte	$0a, $f0, $07, $f6
'-'                             mul     ptra, id
	byte	$de, $f1, $03, $fa
'-'                             add     ptra, #$20              'prep ptra for reloadcogs
	byte	$20, $f0, $07, $f1
'-'                             alts    id, #cog0_handler       'add to handler base
	byte	$ae, $bd, $97, $f9
'-'                             sets    ctrlpollinst, #0-0      'patch into jump instruction
	byte	$00, $48, $be, $f9
'-'                             mul     id, #3
	byte	$03, $bc, $07, $fa
'-'                             setd    ctrlpollinst, id
	byte	$de, $49, $b2, $f9
'-'                             rdlut   id, ptra[9]             'save original value
	byte	$09, $bd, $a7, $fa
'-'                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
	byte	$09, $bb, $37, $fc
'-'                             call    #reloadcogs
	byte	$e8, $01, $b0, $fd
'-'                             wrlut   id, ptra[9]             'restore original value
	byte	$09, $bd, $37, $fc
'-'                             pop     ptra                    'restore original ptra
	byte	$2b, $f0, $63, $fd
'-'                             ' move LUT control vectors into temporary location to avoid clobbering them later
'-'                             setd    d, #addr1
	byte	$d5, $dd, $b7, $f9
'-'                             sets    d, #(ctrl_vect & $1ff)
	byte	$60, $dc, $bf, $f9
'-'                             rep     #2, #8
	byte	$08, $04, $dc, $fc
'-'                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
	byte	$3f, $dc, $a7, $f9
'-'                             rdlut   addr1-0, #$60-0
	byte	$60, $aa, $a7, $fa
'-' 
'-'                             'setup control COG service handling, we need to patch 5 instructions
'-'                             'one existing instruction is moved earlier and four instructions get replaced
'-'                             cogid   id
	byte	$01, $bc, $63, $fd
'-'                             mov     a, #(cog1-cog0)         'get code separation of handlers
	byte	$0c, $d6, $07, $f6
'-'                             mul     a, id                   'scale ID by separation
	byte	$de, $d7, $03, $fa
'-'                             add     a, #cog0+4              'add to base for COG0 and offset
	byte	$24, $d6, $07, $f1
'-'                             setd    d, a                    'set this as the destination
	byte	$eb, $dd, $b3, $f9
'-'                             add     a, #2                   'increment COG address
	byte	$02, $d6, $07, $f1
'-'                             sets    d, a                    'set this as the source
	byte	$eb, $dd, $bb, $f9
'-'                             alti    d, #%111_100             
	byte	$3c, $dc, $a7, $f9
'-'                             mov     0-0, 0-0                'move instruction
	byte	$00, $00, $00, $f6
'-'                             sets    d, #controlpatch        'set source of patched instructions
	byte	$ea, $dc, $bf, $f9
'-'                             rep     #2, #2                  'patch two instructions
	byte	$02, $04, $dc, $fc
'-'                             alti    d, #%111_111
	byte	$3f, $dc, $a7, $f9
'-'                             mov     0-0, 0-0
	byte	$00, $00, $00, $f6
'-'                             add     d, const512             'skip two instructions
	byte	$a3, $dd, $03, $f1
'-'                             add     d, const512
	byte	$a3, $dd, $03, $f1
'-'                             rep     #2, #2                  'patch two instructions
	byte	$02, $04, $dc, $fc
'-'                             alti    d, #%111_111
	byte	$3f, $dc, $a7, $f9
'-'                             mov     0-0, 0-0
	byte	$00, $00, $00, $f6
'-'                             
'-'                             ' setup register values for control vector loop setup after we return
'-'                             mov     header, id              'get cog ID
	byte	$de, $bf, $03, $f6
'-'                             mul     header, #10             'multiply by size of state memory per COG
	byte	$0a, $be, $07, $fa
'-'                             add     header, #$20            'add to COG state base address in LUT
	byte	$20, $be, $07, $f1
'-'                             mov     trailer, header         'determine start/end LUT address
	byte	$df, $c1, $03, $f6
'-'                             add     trailer, #9             '...for control region
	byte	$09, $c0, $07, $f1
'-'                             or      id, initctrl            'set id field for control COG
	byte	$dd, $bd, $43, $f5
'-'                             altd    id, #id0
	byte	$cd, $bd, $8f, $f9
'-'                             mov     0-0, id                 'setup id field for notification
	byte	$de, $01, $00, $f6
'-'                             mov     ptrb, ptra              'get startup parameter address
	byte	$f8, $f3, $03, $f6
'-'                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
	byte	$04, $f2, $07, $f1
'-'                             mov     b, #0                   'prepare b for upcoming loop
	byte	$00, $d8, $07, $f6
'-'                 _ret_       push    #notify                 'continue init in mailbox area
	byte	$2a, $14, $66, $0d
'-'  
'-' controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
	byte	$d5, $c5, $7b, $f8
'-'                             and     request, #7
	byte	$07, $c4, $07, $f5
'-'                             add     request, ptra           'add request vector offset
	byte	$f8, $c5, $03, $f1
'-'                             rdlut   request, request        'lookup jump vector service table 
	byte	$e2, $c5, $a3, $fa
'-'                             fit     $100                    'ensure all init code fits this space
'-' 
'-'                             fit     $100                    'ensure all init code fits this space
'-' 
'-'                             long    0[$100-$]               'pad more if required until table ends
	byte	$00[72]
'-' 
'-' '..................................................................................................
'-' ' Error result handling and COG notification of request completion
'-' 
'-' unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
	byte	$04, $04, $4c, $fb
'-' invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
	byte	$03, $02, $4c, $fb
'-' invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
	byte	$02, $06, $4c, $fb
'-' alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
	byte	$01, $08, $4c, $fb
'-' busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
	byte	$05, $ec, $07, $f6
'-' err                         altd    id, #id0                'adjust for the running COG
	byte	$cd, $bd, $8f, $f9
'-'                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
	byte	$09, $00, $04, $f4
'-'                             wrlut   #0, ptra[8]             'cancel any resume state
	byte	$08, $01, $3c, $fc
'-'                             skipf   #%10                    'dont notify with success code 0 below
	byte	$32, $04, $64, $fd
'-'                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
	byte	$bf, $ed, $67, $fc
'-' notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
	byte	$bf, $01, $6c, $fc
'-'                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
	byte	$0b, $bc, $0f, $f4
'-'                             decod   a, id                   'convert COG ID to bitmask
	byte	$de, $d7, $c3, $f9
'-'             if_z            cogatn  a                       'notify COG via ATN
	byte	$3f, $d6, $63, $ad
'-' ' Poller re-starts here after a COG is serviced
'-' poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
	byte	$0f, $bc, $0f, $f4
'-'             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
	byte	$e3, $5b, $03, $57
'-'                             bmask   mask, rrcounter         'generate a RR skip mask from the count
	byte	$ad, $41, $cb, $f9
'-' ' Main dynamic polling loop repeats until a request arrives
'-' polling_loop                rep     #0-0, #0                'repeat until we get a request for something
	byte	$00, $00, $dc, $fc
'-'                             setq    #24-1                   'read 24 longs
	byte	$28, $2e, $64, $fd
'-'                             rdlong  req0, mbox              'get all mailbox requests and data longs
	byte	$a5, $01, $00, $fb
'-' 
'-' polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
	byte	$ae, $01, $b0, $fb
'-'                             skipf   mask                    ']after all priority COG handlers if present
	byte	$32, $40, $63, $fd
'-'                     	    tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
	byte	$af, $07, $b0, $fb
'-'                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
	byte	$b0, $0d, $b0, $fb
'-'                      	    tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
	byte	$b1, $13, $b0, $fb
'-'                     	    tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
	byte	$b2, $19, $b0, $fb
'-'                     	    tjs     req5, cog5_handler      ']This loop is recreated at init time 
	byte	$b3, $1f, $b0, $fb
'-'                     	    tjs     req6, cog6_handler      ']based on the active COGs being polled
	byte	$b4, $25, $b0, $fb
'-'                    	    tjs     req7, cog7_handler      ']and whether priority or round robin.
	byte	$b5, $2b, $b0, $fb
'-'                     	    tjs     req1, cog1_handler      ']Any update of COG parameters would also
	byte	$af, $07, $b0, $fb
'-'                   	    tjs     req2, cog2_handler      ']regenerate this code, in case priorities
	byte	$b0, $0d, $b0, $fb
'-'                      	    tjs     req3, cog3_handler      ']have changed.
	byte	$b1, $13, $b0, $fb
'-'                     	    tjs     req4, cog4_handler      ']A skip pattern that is continually 
	byte	$b2, $19, $b0, $fb
'-'                   	    tjs     req5, cog5_handler      ']changed selects which RR COG is the
	byte	$b3, $1f, $b0, $fb
'-'                     	    tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
	byte	$b4, $25, $b0, $fb
'-' pollinst            	    tjs     req7, cog7_handler      'instruction template for RR COGs
	byte	$b5, $2b, $b0, $fb
'-' 
'-' ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
	byte	$ae, $01, $b0, $fb
'-' skipfinst                   skipf   mask                    'instruction template for skipf
	byte	$32, $40, $63, $fd
'-'  
'-' '..................................................................................................
'-' ' List handler                               
'-' 
'-' dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
	byte	$01, $aa, $a7, $fb
'-'                             execf   burstwrite              'otherwise do a burst write to this bank
	byte	$33, $ba, $63, $fd
'-' real_list                   setq    #8-1                    'read 8 longs (largest request size)
	byte	$28, $0e, $64, $fd
'-'                             rdlong  addr1, hubdata          '..to update the request state
	byte	$d6, $ab, $03, $fb
'-'                             tjns    addr1, #invalidlist     'error if request list item not valid
	byte	$d7, $ab, $bf, $fb
'-'                             altd    id, #id0                'get COG state
	byte	$cd, $bd, $8f, $f9
'-'                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
	byte	$09, $00, $3c, $f4
'-'                             bith    id, #LIST_BIT           'retain fact that we are in a list
	byte	$09, $bc, $27, $f4
'-'             if_z            jmp     #unsupported            'no list recursion is allowed!
	byte	$44, $ff, $9f, $ad
'-' list_test                   getbyte request, addr1, #3      'get upper byte of this request
	byte	$d5, $c5, $fb, $f8
'-' service_request             altd    request, #0             'get request address in COG RAM
	byte	$00, $c4, $8f, $f9
'-'                             execf   0-0                     'process the request 
	byte	$33, $00, $60, $fd
'-' 
'-' '..................................................................................................
'-' ' Restoring per COG state and resuming where we left off
'-' 
'-' restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
	byte	$00, $ab, $a7, $fa
'-'                             rdlut   hubdata, ptra[1]
	byte	$01, $ad, $a7, $fa
'-'                             rdlut   count, ptra[2]
	byte	$02, $af, $a7, $fa
'-'                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
	byte	$03, $b1, $b7, $fa
'-'                             getbyte request, addr1, #3
	byte	$d5, $c5, $fb, $f8
'-'             if_nc           execf   resume                  'if not extended then resume immediately
	byte	$33, $cc, $63, $3d
'-'                             rdlut   total, ptra[4]          'we need to read the extended parameters
	byte	$04, $b3, $a7, $fa
'-'                             rdlut   offset1, ptra[5]
	byte	$05, $b5, $a7, $fa
'-'                             rdlut   offset2, ptra[6]
	byte	$06, $b7, $a7, $fa
'-'                             rdlut   link, ptra[7]
	byte	$07, $b9, $a7, $fa
'-'                             rdlut   orighubsize, ptra[9]
	byte	$09, $cf, $a7, $fa
'-'                             execf   resume                  'then resume what we were doing last time
	byte	$33, $cc, $63, $fd
'-'                    
'-' '..................................................................................................
'-' ' Re-configuration of QoS settings and custom polling loop sequence generator
'-' 
'-' reconfig                    push    #notify                 'setup return addr, then reload 
	byte	$2a, $14, $66, $fd
'-' reloadcogs                  setq    #8-1                    'reload all per COG QoS params
	byte	$28, $0e, $64, $fd
'-'                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
	byte	$a4, $ab, $03, $fb
'-'                             setd    a, #id0
	byte	$cd, $d7, $b7, $f9
'-'                             sets    a, #addr1
	byte	$d5, $d7, $bf, $f9
'-'                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
	byte	$fe, $ff, $ff, $ff, $28, $00, $66, $fd
'-'                             rep     #2, #8                  'repeat for 8 COGs
	byte	$08, $04, $dc, $fc
'-'                             alti    a, #%111_111 
	byte	$3f, $d6, $a7, $f9
'-'                             muxq    0-0, 0-0
	byte	$00, $00, $f0, $f9
'-' patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
	byte	$09, $01, $a4, $fa
'-'                             cogid   c
	byte	$01, $da, $63, $fd
'-'                             decod   excludedcogs, c         'exclude driver cog initially
	byte	$ed, $3d, $c3, $f9
'-'                             mov     a, #$8                  'a iterates through prio levels 8=lowest
	byte	$08, $d6, $07, $f6
'-'                             neg     pa, #1                  'start with all ones
	byte	$01, $ec, $67, $f6
'-' fillprio                    mov     c, #7                   'c iterates through cogs
	byte	$07, $da, $07, $f6
'-' prioloop                    alts    c, #id0
	byte	$cd, $db, $97, $f9
'-'                             mov     b, 0-0
	byte	$00, $d8, $03, $f6
'-'                             getword d, b, #1                'get burst field
	byte	$ec, $dd, $3b, $f9
'-'                             test    d wz                    'if burst=0 
	byte	$ee, $dd, $cb, $f7
'-'             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
	byte	$ed, $3d, $23, $a4
'-'             if_z            jmp     #excluded               
	byte	$0c, $00, $90, $ad
'-'                             getnib  d, b, #3                'get RR/PRI flag & priority
	byte	$ec, $dd, $5b, $f8
'-'                             cmp     d, a wz                 'compare against current priority level
	byte	$eb, $dd, $0b, $f2
'-'             if_z            rolnib  pa, c, #0               'if matches include COG at this level
	byte	$ed, $ed, $83, $a8
'-' excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
	byte	$f6, $db, $7f, $fb
'-'                             incmod  a, #15 wz               'next level
	byte	$0f, $d6, $0f, $f7
'-'             if_nz           jmp     #fillprio 
	byte	$cc, $ff, $9f, $5d
'-' 
'-' 'determine priority cogs and build instructions for the polling sequence
'-'                             mov     pb, #0                  'clear out set of priority COGs
	byte	$00, $ee, $07, $f6
'-'                             mov     a, #3                   'start with no COGs being polled + 3 instructions
	byte	$03, $d6, $07, $f6
'-'                             setd    d, #polling_code        'initialize COGRAM write position
	byte	$14, $dd, $b7, $f9
'-' 
'-'                             rep     @endprioloop, #8        'test all 8 priority slots
	byte	$08, $18, $dc, $fc
'-'                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
	byte	$03, $ec, $17, $f4
'-'                             getnib  c, pa, #0               'get cogid ID at this priority level
	byte	$f6, $db, $43, $f8
'-'             if_nc           testb   pb, c wz                'check if already exists as priority COG
	byte	$ed, $ef, $0b, $34
'-'             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
	byte	$ed, $ef, $23, $14
'-'             if_nc_and_nz    add     a, #1                   'add another COG to poll 
	byte	$01, $d6, $07, $11
'-'             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
	byte	$ae, $db, $97, $19
'-'             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
	byte	$00, $46, $be, $19
'-'             if_nc_and_nz    mul     c, #3
	byte	$03, $da, $07, $1a
'-'             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
	byte	$ed, $47, $b2, $19
'-'             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
	byte	$38, $dc, $a7, $19
'-'             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
	byte	$23, $01, $00, $16
'-'                             ror     pa, #4                  'advance to next priority
	byte	$04, $ec, $07, $f0
'-' endprioloop
'-'                             xor     pb, #$ff                'invert to find all the non-priority COGs
	byte	$ff, $ee, $67, $f5
'-'                             andn    pb, excludedcogs        'and remove any other excluded COGs
	byte	$9e, $ef, $23, $f5
'-'                             ones    rrlimit, pb wz          'count the number of RR COGs
	byte	$f7, $c7, $ab, $f7
'-'                             add     a, rrlimit              'account for this number of RR COGs to poll
	byte	$e3, $d7, $03, $f1
'-'                             sub     rrlimit, #1             'setup last RR count value for incmod
	byte	$01, $c6, $87, $f1
'-'                             alti    d, #%111_000            'generate the control polling instruction
	byte	$38, $dc, $a7, $f9
'-'                             mov     0-0, ctrlpollinst       'write the instruction
	byte	$24, $01, $00, $f6
'-'             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
	byte	$38, $dc, $a7, $59
'-'             if_nz           mov     0-0, skipfinst          'add the skipf instruction
	byte	$25, $01, $00, $56
'-'             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
	byte	$02, $d6, $07, $51
'-'                             setd    polling_loop, a         'save it as the repeat count
	byte	$eb, $23, $b2, $f9
'-'             if_z            ret                             'we are done now, if no round robin COGs
	byte	$2d, $00, $64, $ad
'-' 
'-' ' populate the round robin COG polling instructions
'-'                             mov     rrcounter, #2           'fill the RR poll instruction list twice
	byte	$02, $5a, $07, $f6
'-' rrloop                      mov     b, pb                   'get the set of RR COGs
	byte	$f7, $d9, $03, $f6
'-'                             mov     c, #0                   'start at COG ID = 0
	byte	$00, $da, $07, $f6
'-'                             mov     a, #0                   'req mailbox COGRAM address for COG 0
	byte	$00, $d6, $07, $f6
'-' nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
	byte	$01, $d8, $5f, $f0
'-'             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
	byte	$eb, $47, $b2, $c9
'-'             if_c            alts    c, #cog0_handler        'determine jump address
	byte	$ae, $db, $97, $c9
'-'             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
	byte	$00, $46, $be, $c9
'-'             if_c            alti    d, #%111_000            'generate new COG RAM write address
	byte	$38, $dc, $a7, $c9
'-'             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
	byte	$23, $01, $00, $c6
'-'                             add     c, #1                   'increment the COG ID
	byte	$01, $da, $07, $f1
'-'                             add     a, #3                   'increase the request address
	byte	$03, $d6, $07, $f1
'-'             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
	byte	$dc, $ff, $9f, $5d
'-'             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
	byte	$f3, $5b, $6f, $0b
'-' '..................................................................................................
'-' ' Code to get/set driver settings per bank or to dump COG/LUT state
'-' 
'-' set_latency                                                 '            (a) set latency
'-' get_latency                                                 '            (b) get latency
'-' set_burst                                                   '            (c) set burst size of bank
'-' get_burst                                                   '            (d) get burst size of bank
'-'                                                             '            (e) dump state
'-'                             getnib  b, addr1, #6            ' a b c d    get bank address
	byte	$d5, $d9, $73, $f8
'-' dump_state                  setq    #511                    ' | | | | e  prepare burst write
	byte	$28, $fe, $67, $fd
'-'                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
	byte	$d6, $01, $60, $fc
'-'                                                             ' | | | | e  account for following AUGS
'-'                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
	byte	$04, $00, $00, $ff, $00, $ac, $07, $f1
'-'                             setq2   #511                    ' | | | | e  prepare burst write
	byte	$29, $fe, $67, $fd
'-'                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
	byte	$d6, $01, $60, $fc
'-'                             add     b, #16                  ' a b | | |  point to latency params
	byte	$10, $d8, $07, $f1
'-'                             rdlut   a, b                    ' a b c d |  read data for bank
	byte	$ec, $d7, $a3, $fa
'-'                             setbyte a, hubdata, #3          ' a | | | |  patch latency
	byte	$d6, $d7, $db, $f8
'-'                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
	byte	$d6, $d7, $03, $f6
'-'                             wrlut   a, b                    ' a | c | |  if setting, save bank data
	byte	$ec, $d7, $33, $fc
'-'                             getbyte a, a, #3                ' | b | | |  extract latency field only
	byte	$eb, $d7, $fb, $f8
'-'                             wrlong  a, ptrb                 ' | b | d |  write result          
	byte	$80, $d7, $67, $fc
'-'                             jmp     #notify                 ' a b c d e  return success
	byte	$dc, $fd, $9f, $fd
'-' 
'-' '..................................................................................................
'-' ' Misc EXECF code
'-' 
'-' start_read_exec             execf   newburstr
	byte	$33, $6e, $63, $fd
'-' start_write_exec            execf   resumewrites
	byte	$33, $78, $63, $fd
'-' continue_read_exec          execf   lockedreads
	byte	$33, $74, $63, $fd
'-' continue_write_exec         execf   lockedwrites
	byte	$33, $76, $63, $fd
'-' 
'-' '..................................................................................................
'-' ' Variables
'-' 
'-' ximm8           long    $6000_0008              '8 nibble transfers to pins
	byte	$08, $00, $00, $60
'-' xrecvdata       long    $E000_0000              'arbitrary 4 bit reads from 4 bit bus pins
	byte	$00, $00, $00, $e0
'-' xsenddata       long    $A000_0000              'arbitrary 4 bit writes from hub to pins
	byte	$00, $00, $00, $a0
'-' xsendimm        long    $6000_0002              'arbitrary nx4 bit immediate writes from imm to pins
	byte	$02, $00, $00, $60
'-' 
'-' xfreq1          long    $80000000
	byte	$00, $00, $00, $80
'-' xfreq2          long    $40000000
	byte	$00, $00, $00, $40
'-' 'xfreq2          long    $20000000
'-' 
'-' delay           long    3
	byte	$03, $00, $00, $00
'-' 
'-' lutcodeaddr                 
'-' startupparams
'-' excludedcogs                                    'careful: shared register use!
'-' frequency       long    lut_code - driver_start 'determine offset of LUT code from base
	byte	$bc, $07, $00, $00
'-' flags           long    0
	byte	$00, $00, $00, $00
'-' mask                                            'careful: shared register use!
'-' resetmaskA      long    0
	byte	$00, $00, $00, $00
'-' limit                                           'careful: shared register use!
'-' resetmaskB      long    0
	byte	$00, $00, $00, $00
'-' datapins        long    0
	byte	$00, $00, $00, $00
'-' const512                                        'careful: shared register use!
'-' devicelist      long    0
	byte	$00, $00, $00, $00
'-' coglist         long    0
	byte	$00, $00, $00, $00
'-' mbox            long    0 
	byte	$00, $00, $00, $00
'-' 
'-' clkpin                                          'shared with code patched during init
'-' clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
	byte	$a6, $03, $18, $fc
'-' cspin                                           'shared with code patched during init
'-' speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
	byte	$1d, $36, $63, $fd
'-' registered      long    %100_000_000_00_00000_0 'config pin for clocked input
	byte	$00, $00, $01, $00
'-' clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
	byte	$4a, $00, $00, $00
'-' clkdelay        long    1
	byte	$01, $00, $00, $00
'-' regdatabus      long    0
	byte	$00, $00, $00, $00
'-' 
'-' deviceaddr      long    $10
	byte	$10, $00, $00, $00
'-' rrcounter
'-' pinmask         long    $ff3f7f7f
	byte	$7f, $7f, $3f, $ff
'-' 
'-' ' jump addresses for the per COG handlers
'-' cog0_handler    long    cog0
	byte	$20, $00, $00, $00
'-' cog1_handler    long    cog1
	byte	$2c, $00, $00, $00
'-' cog2_handler    long    cog2
	byte	$38, $00, $00, $00
'-' cog3_handler    long    cog3
	byte	$44, $00, $00, $00
'-' cog4_handler    long    cog4
	byte	$50, $00, $00, $00
'-' cog5_handler    long    cog5
	byte	$5c, $00, $00, $00
'-' cog6_handler    long    cog6
	byte	$68, $00, $00, $00
'-' cog7_handler    long    cog7
	byte	$74, $00, $00, $00
'-' expansion       long    gfxexpansion - driver_start
	byte	$0c, $0d, $00, $00
'-' 
'-' ' EXECF sequences
'-' newburstr       long    (%1111000000000011111100 << 10) + r_burst
	byte	$70, $f2, $03, $f0
'-' lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
	byte	$2c, $9b, $ef, $00
'-' restorefill     long    (%0001110100000001011100 << 10) + w_fill_cont
	byte	$27, $73, $01, $1d
'-' lockedreads     long    (%0000000001111000111100 << 10) + r_locked_burst
	byte	$80, $f2, $78, $00
'-' lockedwrites    long    (%0000000111100000111100 << 10) + w_resume_burst
	byte	$2f, $f3, $e0, $01
'-' resumewrites    long    (%0000000111100000000000 << 10) + w_resume_burst
	byte	$2f, $03, $e0, $01
'-' resumereads     long    (%0000000011110000000000 << 10) + r_resume_burst
	byte	$78, $02, $f0, $00
'-' 
'-' 
'-' ' SKIPF sequences
'-' skiptable       long    %110110000 ' read modify write byte
	byte	$b0, $01, $00, $00
'-'                 long    %101101000 ' read modify write word
	byte	$68, $01, $00, $00
'-'                 long    %011011000 ' read modify write long
	byte	$d8, $00, $00, $00
'-' read_skip       long    %11111110000110      ' extended single read skip sequence
	byte	$86, $3f, $00, $00
'-' write_skip      long    %1100011100011111110 ' extended single write skip sequence
	byte	$fe, $38, $06, $00
'-' fill_skip       long    %11000001000000010   ' extended fill skip sequence
	byte	$02, $82, $01, $00
'-' burst_skip      long    %001111100000000     ' extended burst skip sequence
	byte	$00, $1f, $00, $00
'-' 
'-' skipcase_a      long    %01101111100000000001000011111101
	byte	$fd, $10, $80, $6f
'-' skipcase_b      long    %00000000010100000001100000010000
	byte	$10, $18, $50, $00
'-' skipcase_c      long    %00000000011000000011111000010001
	byte	$11, $3e, $60, $00
'-' skipseq_write   long    %00000000000000000000111100000010
	byte	$02, $0f, $00, $00
'-' 
'-' ' LUT RAM address values
'-' complete_rw     long    complete_rw_lut
	byte	$e5, $02, $00, $00
'-' continue_read   long    continue_read_lut
	byte	$c3, $02, $00, $00
'-' continue_write  long    continue_write_lut
	byte	$c1, $02, $00, $00
'-' noread          long    noread_lut
	byte	$dc, $02, $00, $00
'-' 
'-' id0             long    0
	byte	$00, $00, $00, $00
'-' id1             long    1
	byte	$01, $00, $00, $00
'-' id2             long    2
	byte	$02, $00, $00, $00
'-' id3             long    3
	byte	$03, $00, $00, $00
'-' id4             long    4
	byte	$04, $00, $00, $00
'-' id5             long    5
	byte	$05, $00, $00, $00
'-' id6             long    6
	byte	$06, $00, $00, $00
'-' id7             long    7
	byte	$07, $00, $00, $00
'-' 
'-' 'These next 10 request registers below are also temporarily reused during init 
'-' 'and COG updates and need to follow immediately after id0-id7
'-' addr1           long    0
	byte	$00, $00, $00, $00
'-' hubdata         long    0
	byte	$00, $00, $00, $00
'-' count           long    0
	byte	$00, $00, $00, $00
'-' addr2           long    0
	byte	$00, $00, $00, $00
'-' total           long    0
	byte	$00, $00, $00, $00
'-' offset1         long    0
	byte	$00, $00, $00, $00
'-' offset2         long    0
	byte	$00, $00, $00, $00
'-' link            long    0
	byte	$00, $00, $00, $00
'-' 
'-' burstwrite                                      'note shared register use during init
'-' initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
	byte	$00, $10, $f0, $fe
'-' id              long    0
	byte	$00, $00, $00, $00
'-' 
'-' header          long    0
	byte	$00, $00, $00, $00
'-' trailer         long    0
	byte	$00, $00, $00, $00
'-' cmdaddr         long    0
	byte	$00, $00, $00, $00
'-' request         long    0
	byte	$00, $00, $00, $00
'-' rrlimit         long    0
	byte	$00, $00, $00, $00
'-' pinconfig       long    0
	byte	$00, $00, $00, $00
'-' clks            long    0
	byte	$00, $00, $00, $00
'-' resume          long    0
	byte	$00, $00, $00, $00
'-' orighubsize     long    0
	byte	$00, $00, $00, $00
'-' wrclks          long    0
	byte	$00, $00, $00, $00
'-' 
'-' pattern         long    0
	byte	$00, $00, $00, $00
'-' pagesize        long    PAGE_SIZE
	byte	$00, $04, $00, $00
'-' 
'-' ' temporary general purpose regs
'-' a               long    0
	byte	$00, $00, $00, $00
'-' b               long    0
	byte	$00, $00, $00, $00
'-' c               long    0
	byte	$00, $00, $00, $00
'-' d               long    0
	byte	$00, $00, $00, $00
'-'                 fit     502
'-' 
'-'                 fit     502
'-' 
'-' '..................................................................................................
'-' 
'-'             orgh
'-' 
'-' lut_code
'-' 'HW init code up to 80 longs
'-' 
'-' '..................................................................................................
'-' ' Memory layout for LUT RAM once operational:
'-' '
'-' '  LUT RAM address      Usage
'-' '  ---------------      ----
'-' '    $200-$20F          Bank parameters: burst + type + size per bank (16)
'-' '    $210-$21F          Pin parameters : latency + control pins per bank (16)
'-' '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
'-' '    $270-$3FF          Main PSRAM access code in LUTRAM 
'-' '
'-' ' Also during driver COG startup:
'-' ' $230-$24F is used for HW init setup
'-' ' $250-$26F is used as temporary vector storage 
'-' '..................................................................................................
'-' 
'-'                 org $230    
'-' 
'-' ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
'-' hwinit                      setxfrq xfreq2
	byte	$1d, $38, $63, $fd
'-'                             pollxfi
	byte	$24, $16, $60, $fd
'-'                             mov     pa, #$5F                '$F5 - exit QSPI mode if we were in this mode
	byte	$5f, $ec, $07, $f6
'-'                             call    #sendqspi
	byte	$28, $00, $b0, $fd
'-'                             mov     pa, ##$0FF00FF0         '$66 - reset enable
	byte	$07, $f8, $07, $ff, $f0, $ed, $07, $f6
'-'                             call    #sendspi
	byte	$28, $00, $b0, $fd
'-'                             mov     pa, ##$F00FF00F         '$99 - reset
	byte	$f8, $07, $78, $ff, $0f, $ec, $07, $f6
'-'                             call    #sendspi
	byte	$1c, $00, $b0, $fd
'-'                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
	byte	$7f, $78, $78, $ff, $00, $ed, $07, $f6
'-'                             call    #sendspi 
	byte	$10, $00, $b0, $fd
'-'                             ret
	byte	$2d, $00, $64, $fd
'-' 
'-' sendqspi                    mov     clks,#4
	byte	$04, $ca, $07, $f6
'-'                             skipf   #%110
	byte	$32, $0c, $64, $fd
'-'                             mov     pb, xsendimm
	byte	$9a, $ef, $03, $f6
'-' 
'-' sendspi                     mov     clks, #16
	byte	$10, $ca, $07, $f6
'-'                             mov     pb, ximm8
	byte	$97, $ef, $03, $f6
'-'                             drvl    cspin                   'active low chip select
	byte	$58, $4e, $63, $fd
'-'                             drvl    datapins                'enable the DATA bus
	byte	$58, $44, $63, $fd
'-'                             xinit   pb, pa                  'send 32 bit immediate data
	byte	$f6, $ef, $a3, $fc
'-'                             wypin   clks, clkpin            'start memory clock output 
	byte	$a6, $cb, $23, $fc
'-'                             waitxfi                         'wait for the completion
	byte	$24, $36, $60, $fd
'-'                             fltl    datapins                'float data bus
	byte	$50, $44, $63, $fd
'-'                             drvh    cspin                   'raise chip select
	byte	$59, $4e, $63, $fd
'-'             _ret_           waitx   #200                    'delay before return to ensure CS delay
	byte	$1f, $90, $65, $0d
'-' 
'-'                 long    0[$270-32-$]
	byte	$00[20]
'-'                 fit     $270-32  ' keep room for 32 vector longs
'-'     
'-'                 fit     $270-32  ' keep room for 32 vector longs
'-' ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
'-' rw_vect ' PSRAM jump vectors
'-'                 long    (%0001101100110100001100 << 10) + r_single
	byte	$72, $32, $34, $1b
'-'                 long    (%0001011100110100001000 << 10) + r_single
	byte	$72, $22, $34, $17
'-'                 long    (%0000111100110100010100 << 10) + r_single
	byte	$72, $52, $34, $0f
'-'                 long    (%1111000000000011111100 << 10) + r_burst
	byte	$70, $f2, $03, $f0
'-'                 long    (%0001110100000000001100 << 10) + w_single
	byte	$27, $33, $00, $1d
'-'                 long    (%0001110100000000001000 << 10) + w_single
	byte	$27, $23, $00, $1d
'-'                 long    (%0001110100000000000100 << 10) + w_single
	byte	$27, $13, $00, $1d
'-'                 long    (%0001111000000000000110 << 10) + w_burst
	byte	$2b, $1b, $00, $1e
'-' ro_vect ' R/O PSRAM jump vectors
'-'                 long    (%0001101100110100001100 << 10) + r_single
	byte	$72, $32, $34, $1b
'-'                 long    (%0001011100110100001000 << 10) + r_single
	byte	$72, $22, $34, $17
'-'                 long    (%0000111100110100010100 << 10) + r_single
	byte	$72, $52, $34, $0f
'-'                 long    (%1111000000000011111100 << 10) + r_burst
	byte	$70, $f2, $03, $f0
'-'                 long    unsupported
	byte	$00, $01, $00, $00
'-'                 long    unsupported
	byte	$00, $01, $00, $00
'-'                 long    unsupported
	byte	$00, $01, $00, $00
'-'                 long    unsupported
	byte	$00, $01, $00, $00
'-' ctrl_vect ' Control jump vectors
'-'                 long    (%0000000000111001111110 << 10) + get_latency
	byte	$84, $f9, $39, $00
'-'                 long    unsupported
	byte	$00, $01, $00, $00
'-'                 long    (%0000000001111011111110 << 10) + get_burst
	byte	$84, $f9, $7b, $00
'-'                 long    (%0000000001111111000000 << 10) + dump_state
	byte	$85, $01, $7f, $00
'-'                 long    (%0000000011010001111110 << 10) + set_latency
	byte	$84, $f9, $d1, $00
'-'                 long    unsupported
	byte	$00, $01, $00, $00
'-'                 long    (%0000000011001011111110 << 10) + set_burst
	byte	$84, $f9, $cb, $00
'-'                 long    reconfig 
	byte	$3e, $01, $00, $00
'-' no_vect ' Invalid bank jump vectors
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 long    invalidbank
	byte	$01, $01, $00, $00
'-'                 fit     $270
'-' 
'-'                 fit     $270
'-' '..................................................................................................
'-' ' PSRAM READS
'-'                                                             ' a b c d e f
'-'                                                             ' B W L B R L  (a) byte read
'-'                                                             ' Y O O U E O  (b) word read
'-'                                                             ' T R N R S C  (c) long read
'-'                                                             ' E D G S U K  (d) new burst read
'-'                                                             '       T M E  (e) resumed sub-burst
'-'                                                             '         E D  (f) locked sub-burst
'-' 
'-' 
'-' r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
	byte	$d7, $cf, $03, $f6
'-'                             tjz     count, #noread_lut      '       d      check for any bytes to send
	byte	$6a, $ae, $97, $fb
'-' r_single                    test    count wz                ' a b c |      test for RMW (z=0 if RMW)
	byte	$d7, $af, $cb, $f7
'-'                             modz    5 wz                    ' a b c |      test for RMW (z=1 if RMW) 
	byte	$6f, $0a, $6c, $fd
'-'                             andn    addr1, #1               ' | b | |      align to word boundary to prevent page issues
	byte	$01, $aa, $27, $f5
'-'                             andn    addr1, #3               ' | | c |      align to long boundary to prevent page issues
	byte	$03, $aa, $27, $f5
'-'                             wrlong  #0, ptrb                ' a b | |      clear upper bits of byte/word mailbox result
	byte	$80, $01, $6c, $fc
'-'                             wrfast  xfreq1, ptrb            ' a b c |      setup streamer hub address for singles
	byte	$f9, $37, $83, $fc
'-' r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
	byte	$e2, $d9, $43, $f8
'-'                             rdlut   b, b                    ' a b c d e    get bank limit/mask
	byte	$ec, $d9, $a3, $fa
'-'                             bmask   mask, b                 ' | | | d e    build mask for addr
	byte	$ec, $41, $cb, $f9
'-'                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
	byte	$ec, $3b, $eb, $f8
'-'                             shr     b, #17                  ' | | | d e    scale burst size based on bus rate
	byte	$11, $d8, $47, $f0
'-'                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
	byte	$ec, $43, $23, $f3
'-'                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
	byte	$05, $3a, $57, $f0
'-'                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
	byte	$10, $56, $67, $f4
'-' r_locked_burst              mov     c, count wz             ' | | | d e f  get count of bytes left to read
	byte	$d7, $db, $0b, $f6
'-'                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
	byte	$a1, $db, $33, $f3
'-'                             mov     clks, #2 wc             ' a | | | | |  2 clock transitions per byte
	byte	$02, $ca, $17, $f6
'-'                             mov     clks, #4 wc             ' | b | | | |  4 clock transitions per word
	byte	$04, $ca, $17, $f6
'-'                             mov     clks, #8 wc             ' | | c | | |  8 clock transitions per long
	byte	$08, $ca, $17, $f6
'-'                             skipf   read_skip               ' a b c | | |  extend skipf sequence for single reads
	byte	$32, $82, $63, $fd
'-'             if_nc           mov     resume, complete_rw     ' a b c d e f  burst/single read will complete
	byte	$c9, $cd, $03, $36
'-'             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
	byte	$ca, $cd, $03, $c6
'-'                             wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
	byte	$d6, $37, $83, $fc
'-'                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
	byte	$e2, $59, $03, $f8
'-'                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
	byte	$ac, $c9, $a3, $fa
'-'                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
	byte	$e4, $4f, $e3, $f8
'-'                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
	byte	$e4, $4d, $eb, $f8
'-'                             ' handle the page boundary by splitting any read bursts that cross it 
'-'                             mov     d, addr1                ' | | | d e f  get start address
	byte	$d5, $dd, $03, $f6
'-'                             zerox   d, #(PAGE_BITS-1)       ' | | | d e f  only keep page LSBs
	byte	$09, $dc, $47, $f7
'-'                             subr    d, pagesize             ' | | | d e f  figure out how many bytes remain before we hit the boundary
	byte	$ea, $dd, $c3, $f2
'-'                             fle     c, d wc                 ' | | | d e f  compare this size to our transfer size and limit it
	byte	$ee, $db, $33, $f3
'-'             if_c            mov     resume, continue_read   ' | | | d e f  and we will continue with a sub-burst again
	byte	$ca, $cd, $03, $c6
'-'                             mov     clks, c                 ' | | | d e f  get count of bytes to be read into HUB
	byte	$ed, $cb, $03, $f6
'-'                             shl     clks, #1                ' | | | d e f  multiply by two to work out nibble count
	byte	$01, $ca, $67, $f0
'-' 
'-'                             setword xrecvdata, clks, #0     'set the nibble transfers needed in streamer
	byte	$e5, $31, $23, $f9
'-'                             add     clks, #14               'include 14 address+delay clocks
	byte	$0e, $ca, $07, $f1
'-'                             add     clks, clks              'compute clock transitions by doubling
	byte	$e5, $cb, $03, $f1
'-'                             mov     cmdaddr, addr1          'get start address of transfer
	byte	$d5, $c3, $03, $f6
'-'                             setbyte cmdaddr, #$EB, #3       'add quad read command
	byte	$eb, $c2, $df, $f8
'-' 
'-'                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
	byte	$60, $c2, $63, $fd
'-'                             rev     cmdaddr
	byte	$69, $c2, $63, $fd
'-'                             movbyts cmdaddr, #%%0123
	byte	$1b, $c2, $ff, $f9
'-'                             mergeb  cmdaddr
	byte	$61, $c2, $63, $fd
'-' 
'-'                             drvl    cspin                   'activate chip select
	byte	$58, $4e, $63, $fd
'-'                             drvl    datapins                'enable data bus
	byte	$58, $44, $63, $fd
'-'             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
'-'                             xinit   ximm8, cmdaddr          'stream out command+address
	byte	$e1, $2f, $a3, $fc
'-'                             wypin   clks, clkpin            'start clock output
	byte	$a6, $cb, $23, $fc
'-'                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
	byte	$00, $00, $cc, $fc
'-'                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
	byte	$00, $0c, $cc, $fc
'-'                             drvh    datapins                'enable this only if validating actual tri-state time on a scope
	byte	$59, $44, $63, $fd
'-'                             fltl    datapins                'safe to float the data bus, address has been sent by now
	byte	$50, $44, $63, $fd
'-'                       
'-'                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
	byte	$a2, $57, $03, $fc
'-'                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
	byte	$28, $36, $63, $fd
'-'                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
	byte	$00, $3a, $c7, $fc
'-'                             xcont   #6, #0                  'fixed delay offset to expand delay range
	byte	$00, $0c, $cc, $fc
'-'             if_z            skipf   #%0100100               'special skip case for read-modify-write(RWM)
	byte	$32, $48, $64, $ad
'-'                                                             'Bursts Bytes Words Longs  RMW
'-'                             setq    xfreq2                  '   a     b     c     d     e
	byte	$28, $38, $63, $fd
'-'                             xcont   xrecvdata, #0           '   a     b     c     d     e     transfer data as nibbles
	byte	$00, $30, $c7, $fc
'-'                             call    resume                  '   a     b     c     d     |    
	byte	$2d, $cc, $63, $fd
'-'                             waitxfi                         '   a     b     c     d     e     wait for streaming to finish
	byte	$24, $36, $60, $fd
'-'                             wrpin   registered, datapins    '   a     b     c     d     e     restore data pins for next transfer
	byte	$a2, $51, $03, $fc
'-'             _ret_           drvh    cspin                   '   a     b     c     d     |     de-assert chip select and return
	byte	$59, $4e, $63, $0d
'-'                             drvh    cspin                   '                           e     deassert chip select and continue
	byte	$59, $4e, $63, $fd
'-' 
'-'                             getnib  d, request, #1          'get request code value
	byte	$e2, $dd, $4b, $f8
'-'                             altd    d, #skiptable-8         'patch next instruction
	byte	$b6, $dd, $8f, $f9
'-'                             skipf   0-0                     'generate skip sequence for byte, word or long
	byte	$32, $00, $60, $fd
'-'                                                             ' RMWB RMWW RMLL 
'-'                             rdlong  a, ptrb                 '  c    d    e   read back data written to mailbox
	byte	$80, $d7, $07, $fb
'-'                             setq    count                   '  c    d    e   setup bit mux mask
	byte	$28, $ae, $63, $fd
'-'                             muxq    a, hubdata              '  c    d    e   apply bit mux
	byte	$d6, $d7, $f3, $f9
'-'                             mov     wrclks, #20             '  c    |    |   setup clks for byte write
	byte	$14, $d0, $07, $f6
'-'                             mov     wrclks, #24             '  |    d    |   setup clks for word write
	byte	$18, $d0, $07, $f6
'-'                             mov     wrclks, #32             '  |    |    e   setup clks for long write
	byte	$20, $d0, $07, $f6
'-'                             setword xsendimm, #2, #0        '  c    |    |
	byte	$02, $34, $27, $f9
'-'                             setword xsendimm, #4, #0        '  |    d    |
	byte	$04, $34, $27, $f9
'-'                             setword xsendimm, #8, #0        '  |    |    e
	byte	$08, $34, $27, $f9
'-'                             mov     hubdata, a              'write a to PSRAM
	byte	$eb, $ad, $03, $f6
'-'                             mov     pattern, #%001101       'setup next skip pattern to send a single item and resume
	byte	$0d, $d2, $07, $f6
'-'                             mov     resume, complete_rw     'we'll complete the operation after this
	byte	$c9, $cd, $03, $f6
'-'                             jmp     #writecommon
	byte	$34, $02, $90, $fd
'-' 
'-' '..................................................................................................
'-' ' Burst continuation testing
'-' 
'-' continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
	byte	$32, $90, $63, $fd
'-'                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
	byte	$bc, $cd, $03, $f6
'-' continue_read_lut          
'-'                             mov     resume, resumereads     ' | setup resume address to execf
	byte	$bd, $cd, $03, $f6
'-'                             add     hubdata, c              ' a compute the next hub addr to use
	byte	$ed, $ad, $03, $f1
'-'                             sub     count, c                ' a account for the bytes already sent
	byte	$ed, $af, $83, $f1
'-'                             add     c, addr1                ' a compute next external mem address
	byte	$d5, $db, $03, $f1
'-'                             setq    mask                    ' a configure mask for bit muxing
	byte	$28, $40, $63, $fd
'-'                             muxq    addr1, c                ' a perform address bit muxing
	byte	$ed, $ab, $f3, $f9
'-'                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
	byte	$0a, $bc, $0f, $f4
'-'             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
	byte	$14, $00, $90, $5d
'-'                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
	byte	$de, $43, $3b, $f9
'-'                             fle     limit, b                ' | also re-apply per bank limit
	byte	$ec, $43, $23, $f3
'-'             _ret_           push    #continue_read_exec     ' | 
	byte	$2a, $2a, $67, $0d
'-'             if_nz           jmp     #yield                  ' a
	byte	$04, $00, $90, $5d
'-'             _ret_           push    #continue_write_exec    ' a
	byte	$2a, $2c, $67, $0d
'-' 
'-' yield                       wrlut   total, ptra[4]          'save context for next time
	byte	$04, $b3, $37, $fc
'-'                             wrlut   offset1, ptra[5]        'save context for next time
	byte	$05, $b5, $37, $fc
'-'                             wrlut   offset2, ptra[6]        'save context for next time
	byte	$06, $b7, $37, $fc
'-'                             wrlut   link, ptra[7]           'save context for next time
	byte	$07, $b9, $37, $fc
'-' yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
	byte	$00, $ab, $37, $fc
'-'                             wrlut   hubdata, ptra[1]        'save context for next time
	byte	$01, $ad, $37, $fc
'-'                             wrlut   count, ptra[2]          'save context for next time
	byte	$02, $af, $37, $fc
'-'                             wrlut   addr2, ptra[3]          'save context for next time
	byte	$03, $b1, $37, $fc
'-'                             wrlut   resume, ptra[8]         'save next resume address
	byte	$08, $cd, $37, $fc
'-'                             wrlut   orighubsize, ptra[9]    'save original hub size
	byte	$09, $cf, $37, $fc
'-'             _ret_           push    #poller
	byte	$2a, $1c, $66, $0d
'-' 
'-' 
'-' notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
	byte	$32, $be, $65, $fd
'-' nowrite_lut                                                 '  (a) new skip sequence 
'-' noread_lut                  skipf   #0                      ' | cancel skipping
	byte	$32, $00, $64, $fd
'-'                             wrlut   #0, ptra[8]             ' | clear resume
	byte	$08, $01, $3c, $fc
'-'                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
	byte	$09, $bc, $0f, $f4
'-'             if_nz           jmp     #notify                 ' | if not a request list then we are done
	byte	$a8, $f8, $9f, $5d
'-'                             testb   addr2, #31 wz           ' | check if extended list item
	byte	$1f, $b0, $0f, $f4
'-' donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
	byte	$dc, $b1, $03, $a6
'-' checklist                   call    #checknext              ' | handle running from list
	byte	$1c, $00, $b0, $fd
'-'                             ret                             ' | continue processing
	byte	$2d, $00, $64, $fd
'-'             _ret_           push    noread                  'continue end of transfer
	byte	$2a, $98, $63, $0d
'-' '..................................................................................................
'-' ' Completion of requests
'-' 
'-' complete_rw_lut             
'-'                             testb   id, #LIST_BIT wz        'test for running from a request list   
	byte	$09, $bc, $0f, $f4
'-'             if_z            skipf   #%10                    'if a request list then skip notification
	byte	$32, $04, $64, $ad
'-'                             wrlut   #0, ptra[8]             ' a   default is not to resume
	byte	$08, $01, $3c, $fc
'-'             _ret_           push    #notify                 ' |   if not a request list then we are done
	byte	$2a, $14, $66, $0d
'-'                             tjs     addr2, #extendedreq     '     test for special extended request  
	byte	$0d, $b0, $b7, $fb
'-' 'checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
'-' '                            rdlong  pa, ptrb[-1]            'check if list has been aborted by client
'-' '                            tjns    pa, #listcomplete       'exit if it has
'-' '                            skipf   #%1000                  'do not notify if list is continuing
'-' '                            wrlong  addr2, ptrb             ' a  write back next list address
'-' 'listcomplete                altd    id, #id0                ' a  compute COG's state address
'-' '                            bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
'-' '            _ret_           push    #notify                 ' |  we are done with the list
'-' '            _ret_           push    #poller                 ' a  we are still continuing the list
'-' 
'-' 
'-' checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
	byte	$07, $b0, $97, $fb
'-'                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
	byte	$bf, $ed, $07, $fb
'-'                             tjns    pa, #listcomplete       'exit if it has
	byte	$05, $ec, $bf, $fb
'-'                             testb   id, #LOCKED_BIT wz
	byte	$0a, $bc, $0f, $f4
'-'             if_z            mov     hubdata, addr2
	byte	$d8, $ad, $03, $a6
'-'             if_z            skipf   #%110001
	byte	$32, $62, $64, $ad
'-'             if_nz           skipf   #%1000                  'do not notify if list is continuing
	byte	$32, $10, $64, $5d
'-'                             wrlong  addr2, ptrb             ' a  write back next list address
	byte	$80, $b1, $67, $fc
'-' listcomplete                altd    id, #id0                ' a  compute COG's state address
	byte	$cd, $bd, $8f, $f9
'-'                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
	byte	$09, $00, $04, $f4
'-'             _ret_           push    #notify                 ' |  we are done with the list
	byte	$2a, $14, $66, $0d
'-'             _ret_           push    #poller                 ' a  we are still continuing the list
	byte	$2a, $1c, $66, $0d
'-'             _ret_           push    #real_list
	byte	$2a, $50, $66, $0d
'-' 
'-' 
'-' 
'-' extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
	byte	$e3, $af, $97, $fb
'-'                             getnib  a, addr2, #7            'check the request type
	byte	$d8, $d7, $7b, $f8
'-'                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
	byte	$0f, $d6, $0f, $f2
'-'                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
	byte	$d5, $d7, $73, $f8
'-'             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
	byte	$32, $8a, $63, $5d
'-'                                                             ' skipcase (a) gfx copy to/from hub
'-'                                                             ' skipcase (b) gfx copy extmem bank to bank
'-'                                                             ' skipcase (c) linear copy extmem bank to bank
'-'                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
	byte	$d8, $d7, $73, $f8
'-'                             rdlut   d, a wz                 ' a      load bank information and check if valid
	byte	$eb, $dd, $ab, $fa
'-'             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
	byte	$31, $02, $64, $5d
'-'             _ret_           push    #invalidbank            ' |      otherwise bail out after this
	byte	$2a, $02, $66, $0d
'-'                             test    offset1 wz              ' |      check for first offset being zero
	byte	$da, $b5, $cb, $f7
'-'             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
	byte	$db, $b7, $cb, $a7
'-'             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
	byte	$32, $8e, $63, $ad
'-'                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
	byte	$32, $8c, $63, $fd
'-'                             add     hubdata, c              ' a b c  add bytes just sent to hub address
	byte	$ed, $ad, $03, $f1
'-'                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
	byte	$e7, $ad, $83, $f1
'-'                             add     c, addr1                ' a b c  compute next address to use
	byte	$d5, $db, $03, $f1
'-'                             test    total wz                ' a b |  check for zero tranfers
	byte	$d9, $b3, $cb, $f7
'-'                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
	byte	$d9, $cf, $2b, $f3
'-'             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
	byte	$44, $ff, $9f, $ad
'-'                             testb   addr1, #30 wz           ' a b c  check if reading/writing
	byte	$1e, $aa, $0f, $f4
'-'                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
	byte	$e7, $af, $03, $f6
'-'                             sub     c, orighubsize          ' a b |  rewind to original position
	byte	$e7, $db, $83, $f1
'-'             if_z            add     c, offset1              ' a b |  add any dst scanline offset
	byte	$da, $db, $03, $a1
'-'             if_nz           add     c, offset2              ' a b |  add any src scanline offset
	byte	$db, $db, $03, $51
'-'             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
	byte	$db, $ad, $03, $a1
'-'             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
	byte	$da, $ad, $03, $51
'-'                             setq    mask                    ' a b c  configure mask for bit muxing
	byte	$28, $40, $63, $fd
'-'                             muxq    addr1, c                ' a b c  perform address bit muxing
	byte	$ed, $ab, $f3, $f9
'-'                             mov     a, addr1                ' | b c  ]
	byte	$d5, $d7, $03, $f6
'-'                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
	byte	$d8, $ab, $03, $f6
'-'                             mov     addr2, a                ' | b c  ]
	byte	$eb, $b1, $03, $f6
'-'                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
	byte	$1e, $aa, $a7, $f4
'-'                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
	byte	$0f, $b0, $3f, $f8
'-'                             sub     total, #1 wz            ' a | |  decrement scanline count
	byte	$01, $b2, $8f, $f1
'-'             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
	byte	$01, $b2, $8f, $a1
'-'             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
	byte	$e7, $b3, $8b, $a1
'-' '            if_nz           jmp     #moretransfers          ' a b c  more transfers still to go
'-' '                            tjz     link, #listcomplete     ' a b c  test link for next request
'-' '                            rdlong  pa, ptrb[-1]            'check if list has been aborted by client
'-' '                            tjns    pa, #listcomplete       'will exit if it has
'-' '                            wrlong  link, ptrb              'setup list next pointer
'-' '                            altd    id, #id0                'compute COG's state address
'-' '                            bitl    0-0, #LIST_BIT          'clear list flag for this COG
'-' '            _ret_           push    #poller                 'we will return to polling
'-'             if_z            mov addr2,link
	byte	$dc, $b1, $03, $a6
'-'             if_z            jmp #checknext
	byte	$34, $ff, $9f, $ad
'-' moretransfers               getbyte request, addr1, #3      'prepare next request
	byte	$d5, $c5, $fb, $f8
'-'                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
	byte	$0a, $bc, $0f, $f4
'-'             if_z            skipf   #%1110                  '     skip some code if we are locked
	byte	$32, $1c, $64, $ad
'-'                             testb   addr1, #30 wz           ' a   test if will be reading or writing
	byte	$1e, $aa, $0f, $f4
'-'             if_z            mov     resume, resumewrites    ' |   resume burst writing
	byte	$bc, $cd, $03, $a6
'-'             if_nz           mov     resume, newburstr       ' |   resume burst reading
	byte	$b7, $cd, $03, $56
'-'                             jmp     #yield                  ' |   yield to poller
	byte	$b0, $fe, $9f, $fd
'-'             if_z            skip    #%1                     '     skip next instruction for writing case
	byte	$31, $02, $64, $ad
'-'             _ret_           push    #start_read_exec        '(|)  do new read burst next 
	byte	$2a, $26, $67, $0d
'-'             _ret_           push    #start_write_exec       'do new write burst next
	byte	$2a, $28, $67, $0d
'-' 
'-' '..................................................................................................
'-' ' PSRAM WRITES
'-'                                                             '  a b c d e f g h
'-' 
'-'                                                             '  B W L F B R L L (a) byte write(s)
'-'                                                             '  Y O O I U E O O (b) word write(s)
'-'                                                             '  T R N L R S C C (c) long write(s)
'-'                                                             '  E D G L S U K K (d) resumed fill
'-'                                                             '          T M E E (e) new burst write
'-'                                                             '            E D D (f) resumed burst
'-'                                                             '              F B (g) locked fill
'-'                                                             '              I U (h) locked burst write
'-'                                                             '              L R 
'-'                                                             '              L S 
'-'                                                             '                T 
'-' 
'-'                 
'-' w_single                   
'-' w_fill_cont           
'-'                             getnib  a, addr1, #7            '  a b c d          obtain request
	byte	$d5, $d7, $7b, $f8
'-'                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
	byte	$03, $d6, $07, $f5
'-'                             andn    addr1, #1               '  | b | |          align word addresses to stop page crossing issues
	byte	$01, $aa, $27, $f5
'-'                             andn    addr1, #3               '  | | c |          align long addresses to stop page crossing issues
	byte	$03, $aa, $27, $f5
'-' w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
	byte	$d7, $cf, $03, $f6
'-' w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
	byte	$01, $ae, $0f, $f2
'-'                             shl     count, a                '  a b c | |   |    scale into bytes
	byte	$eb, $af, $63, $f0
'-'                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
	byte	$ad, $af, $97, $fb
'-' w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
	byte	$d7, $db, $03, $f6
'-'                             call    #\w_get_bankdelay       '  a b c d e f g h  get per bank limit and read delay info
	byte	$7c, $03, $a0, $fd
'-'                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
	byte	$e2, $59, $03, $f8
'-'                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
	byte	$ac, $c9, $a3, $fa
'-'                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
	byte	$e4, $4f, $e3, $f8
'-'                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
	byte	$e4, $4d, $eb, $f8
'-'                             mov     pattern, #%111 wz       '  | | | | e f | h  setup base skip pattern for bursts
	byte	$07, $d2, $0f, $f6
'-'                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
	byte	$a1, $db, $33, $f3
'-'             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
	byte	$cb, $cd, $03, $c6
'-'             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
	byte	$c9, $cd, $03, $36
'-'                             rdfast  xfreq1, hubdata         '  | | | | e f | h  setup streamer hub addr
	byte	$d6, $37, $73, $fc
'-'             if_z            skipf   write_skip              '  a b c d | | g |  extend single write skip pattern (optimization)
	byte	$32, $84, $63, $ad
'-'             if_z            mov     pattern, #%10011101     '  a b c d | | g |  setup pattern for single writes
	byte	$9d, $d2, $07, $a6
'-'                             skipf   fill_skip               '  ? ? ? d | | g |  extend fill skip pattern
	byte	$32, $86, $63, $fd
'-'                             mov     pattern, #0             '  ? ? ? d | | g |  setup pattern for fill writes
	byte	$00, $d2, $07, $f6
'-'                             skipf   burst_skip              '  | | | | e f | h  extend burst writes skip pattern
	byte	$32, $88, $63, $fd
'-'                             'if not just a single transfer we need to work out how many bytes are left to the page boundary
'-'                             mov     d, addr1                '  | | | d e f g h  get start address
	byte	$d5, $dd, $03, $f6
'-'                             zerox   d, #(PAGE_BITS-1)       '  | | | d e f g h  only keep page LSBs
	byte	$09, $dc, $47, $f7
'-'                             subr    d, pagesize             '  | | | d e f g h  figure out how many bytes remain before we hit the boundary
	byte	$ea, $dd, $c3, $f2
'-'                             fle     c, d wc                 '  | | | d e f g h  compare this size to our transfer size and limit it
	byte	$ee, $db, $33, $f3
'-'                             mov     wrclks, c               '  a b c d e f g h  number of bytes to be sent
	byte	$ed, $d1, $03, $f6
'-'                             mul     wrclks, #4              '  a b c d e f g h  convert to clock transitions (2 transitions/nibble)
	byte	$04, $d0, $07, $fa
'-'                             add     wrclks, #16             '  a b c d e f g h  add header clock transitions
	byte	$10, $d0, $07, $f1
'-'             if_c            mov     resume, continue_write  '  | | | | e f | h  and we will continue with a sub-burst again
	byte	$cb, $cd, $03, $c6
'-'                             mov     pb, c                   '  | | | d | | g |  get number of bytes to be filled
	byte	$ed, $ef, $03, $f6
'-'                             shr     pb, a                   '  | | | d | | g |  scale into number of items to fill
	byte	$eb, $ef, $43, $f0
'-'                             decod   d, a                    '  a b c d | | g |  get write item size in bytes
	byte	$eb, $dd, $c3, $f9
'-'                             shl     d, #1                   '  a b c d | | g |  convert to nibbles
	byte	$01, $dc, $67, $f0
'-'                             setword xsendimm, d, #0         '  a b c d | | g |  setup streamer count
	byte	$ee, $35, $23, $f9
'-'                             setword xsenddata, c, #0        '  | | | | e f | h  setup write burst bytes to be streamed
	byte	$ed, $33, $23, $f9
'-'                             add     xsenddata, c            '  | | | | e f | h  convert to nibbles
	byte	$ed, $33, $03, $f1
'-' 
'-' writecommon                 mov     cmdaddr, addr1          'get start address of transfer
	byte	$d5, $c3, $03, $f6
'-'                             setbyte cmdaddr, #$02, #3       'add quad write command
	byte	$02, $c2, $df, $f8
'-' 
'-'                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
	byte	$60, $c2, $63, $fd
'-'                             rev     cmdaddr                 
	byte	$69, $c2, $63, $fd
'-'                             movbyts cmdaddr, #%%0123
	byte	$1b, $c2, $ff, $f9
'-'                             mergeb  cmdaddr
	byte	$61, $c2, $63, $fd
'-'                             
'-'                             drvl    cspin                   'activate chip select
	byte	$58, $4e, $63, $fd
'-'                             drvl    datapins                'enable the DATA bus
	byte	$58, $44, $63, $fd
'-'                             xinit   ximm8, cmdaddr          'send 8 nibbles of address and command via LUT translation
	byte	$e1, $2f, $a3, $fc
'-'                             wypin   wrclks, clkpin          'start memory clock output 
	byte	$a6, $d1, $23, $fc
'-'                                                          
'-'                             skipf   pattern                 '   B W L Burst FB FW FL RMW
	byte	$32, $d2, $63, $fd
'-'                             rep     #1, pb                  '   | | |   |    e  f  g  | ' repeat for bursts
	byte	$f7, $03, $d8, $fc
'-'                             xcont   xsendimm, hubdata       '   a b c   |    e  f  g  h ' send immediate data as nibbles
	byte	$d6, $35, $c3, $fc
'-'                             skipf   #%10011                 '   | | |   |    e  f  g  | '
	byte	$32, $26, $64, $fd
'-'                             xcont   xsenddata, #0           '   | | |   d    |  |  |  | ' send data from hub for bursts as nibbles
	byte	$00, $32, $c7, $fc
'-'                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
	byte	$2d, $cc, $63, $fd
'-'                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
	byte	$24, $36, $60, $fd
'-'                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
	byte	$50, $44, $63, $fd
'-'             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
	byte	$59, $4e, $63, $0d
'-' 
'-'                             drvh    cspin
	byte	$59, $4e, $63, $fd
'-' check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
	byte	$09, $bc, $17, $f4
'-'                             sub     count, c wz             'account for bytes written
	byte	$ed, $af, $8b, $f1
'-'             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
	byte	$34, $00, $90, $5d
'-'                             wrlut   #0, ptra[8]             'default is not to resume
	byte	$08, $01, $3c, $fc
'-'             if_nc           jmp     #notify                 'if not a request list then we are done
	byte	$8c, $f6, $9f, $3d
'-'                             tjns    addr2, #checklist       'if not extended, check next list entry
	byte	$7a, $b1, $bf, $fb
'-'                             djz     total, #donerepeats     'check for repeats remaining
	byte	$78, $b3, $67, $fb
'-'                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
	byte	$b6, $b3, $b3, $fb
'-'                             mov     d, orighubsize
	byte	$e7, $dd, $03, $f6
'-'                             shl     d, a
	byte	$eb, $dd, $63, $f0
'-'                             sub     c, d
	byte	$ee, $db, $83, $f1
'-'                             add     c, offset1
	byte	$da, $db, $03, $f1
'-'                             mov     count, d                'restore original count
	byte	$ee, $af, $03, $f6
'-' readmask                    getnib  b, request, #0          'get bank parameter LUT address
	byte	$e2, $d9, $43, $f8
'-'                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
	byte	$ec, $d9, $a3, $fa
'-'                             bmask   mask, b                 'build mask for addr (in case count=1)
	byte	$ec, $41, $cb, $f9
'-' continue_fill               add     c, addr1                'add bytes to destination address
	byte	$d5, $db, $03, $f1
'-'                             setq    mask                    'setup bit mask
	byte	$28, $40, $63, $fd
'-'                             muxq    addr1, c                'setup new external memory address
	byte	$ed, $ab, $f3, $f9
'-'                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
	byte	$0a, $bc, $0f, $f4
'-'             if_z            execf   lockedfill              'continue next fill operation
	byte	$33, $70, $63, $ad
'-'                             mov     resume, restorefill
	byte	$b9, $cd, $03, $f6
'-'             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
	byte	$00, $b0, $07, $36
'-'             if_nc           call    #yieldfill              'we have to yield now to other COGs
	byte	$68, $fd, $bf, $3d
'-'             if_c            call    #yield
	byte	$54, $fd, $bf, $cd
'-'                             ret
	byte	$2d, $00, $64, $fd
'-'                            
'-' w_get_bankdelay             getnib  b, request, #0          'get bank parameter LUT address
	byte	$e2, $d9, $43, $f8
'-'                             rdlut   b, b                    'get bank limit/mask
	byte	$ec, $d9, $a3, $fa
'-'                             bmask   mask, b                 'build mask for addr
	byte	$ec, $41, $cb, $f9
'-'                             getbyte delay, b, #1            'get input delay of bank + flags
	byte	$ec, $3b, $eb, $f8
'-'                             shr     b, #17                  'scale burst size based on bus rate
	byte	$11, $d8, $47, $f0
'-'                             fle     limit, b                'apply any per bank limit to cog limit
	byte	$ec, $43, $23, $f3
'-'                             shr     delay, #5 wc            'prep delay and test for registered inputs
	byte	$05, $3a, $57, $f0
'-'             _ret_           bitnc   regdatabus, #16         'setup if data bus is registered or not
	byte	$10, $56, $67, $04
'-'         fit 1024
'-' 
'-' '..................................................................................................
'-' 
'-'         fit 1024
'-' 
'-' '--------------------------------------------------------------------------------------------------
'-'         orgh
'-' 
'-' gfxexpansion
'-'                             'simple line drawing graphics expansion of memory driver
'-'                             'jmp     #donerepeats                'just return for now
'-' 
'-'                             cmp     addr1, addr2 wz         'see if we've reached the end
	byte	$d8, $ab, $0b, $f2
'-'             if_z            jmp     #donerepeats            'nothing more to draw
	byte	$e1, $02, $80, $ad
'-'                             add     total, #1               'restore total after decrement
	byte	$01, $b2, $07, $f1
'-'                             mov     b, offset1              'get error term
	byte	$da, $d9, $03, $f6
'-'                             shl     b, #1                   'compute e2 = 2 x error
	byte	$01, $d8, $67, $f0
'-'                             getword d, offset2, #0          'get dx = abs(x0-x1)
	byte	$db, $dd, $33, $f9
'-'                             sar     offset2, #16            'get dy = -abs(y0-y1)
	byte	$10, $b6, $c7, $f0
'-'                             cmps    b, offset2 wc           'compare if e2 >= dy
	byte	$db, $d9, $53, $f2
'-'                             mov     c, #0                   'clear accumulator reg
	byte	$00, $da, $07, $f6
'-'             if_c            skip    #%1110                  'if not, skip
	byte	$31, $1c, $64, $cd
'-'                             decod   a                       'decode as 1,2,or 4 byte size
	byte	$eb, $d7, $c3, $f9
'-'                             add     offset1, offset2        'err+=dy 
	byte	$db, $b5, $03, $f1
'-'                             testb   total, #16 wz           'check sign sx   
	byte	$10, $b2, $0f, $f4
'-'                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
	byte	$eb, $db, $c3, $f3
'-'                             cmps    d, b wc                 'compare if e2 <= dx
	byte	$ec, $dd, $53, $f2
'-'             if_c            skip    #%11110                 'if not, skip
	byte	$31, $3c, $64, $cd
'-'                             rolword offset2, d, #0          'restore offset
	byte	$ee, $b7, $43, $f9
'-'                             add     offset1, d              'err+=dx
	byte	$ee, $b5, $03, $f1
'-'                             testb   total, #17 wz           'check sign sy
	byte	$11, $b2, $0f, $f4
'-'                             getword d, total, #0            'get line width
	byte	$d9, $dd, $33, $f9
'-'                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
	byte	$ee, $db, $c3, $f3
'-'                             encod   a wc                    'restore size and set carry
	byte	$eb, $d7, $93, $f7
'-'                             mov     count, orighubsize      'reset the fill width
	byte	$e7, $af, $03, $f6
'-'                             shl     count, a                '..for the type of transfer
	byte	$eb, $af, $63, $f0
'-'                             jmp     #readmask               'continue filling
	byte	$6f, $03, $80, $fd
objmem
	long	0[0]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
	fit	480
