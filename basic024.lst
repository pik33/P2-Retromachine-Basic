00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic024.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 24
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 5C 56 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 31 63 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 30 61 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 31 61 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 62 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 60 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 30 61 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 31 63 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 18 1D 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 10 1B 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 20 0B 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 10 0A 03 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 F0 0D 03 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 4C 87 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 30 15 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 84 A8 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 34 D0 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa EC CD 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb C4 DF 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F4 FF 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7A 00 00 FF 
00818     03 E4 05 F1 | 	add	objptr, ##62467
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7A 00 00 FF 
0082c     48 E4 85 F1 | 	sub	objptr, ##62536
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     80 83 B1 FD | 	call	#__system___waitms
0083c     7A 00 00 FF 
00840     48 E4 05 F1 | 	add	objptr, ##62536
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7A 00 00 FF 
00854     48 E4 85 F1 | 	sub	objptr, ##62536
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     58 83 B1 FD | 	call	#__system___waitms
00864     7A 00 00 FF 
00868     48 E4 05 F1 | 	add	objptr, ##62536
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7A 00 00 FF 
0087c     48 E4 85 F1 | 	sub	objptr, ##62536
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     30 83 B1 FD | 	call	#__system___waitms
0088c     7A 00 00 FF 
00890     48 E4 05 F1 | 	add	objptr, ##62536
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7A 00 00 FF 
008a4     48 E4 85 F1 | 	sub	objptr, ##62536
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     C0 E5 05 F1 | 	add	objptr, ##62400
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     C8 E5 85 F1 | 	sub	objptr, ##62408
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     3C 79 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     8C 79 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     7C 79 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     D0 E5 05 F1 | 	add	objptr, ##62416
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     EC E5 85 F1 | 	sub	objptr, ##62444
009b0     E0 78 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     D0 E5 05 F1 | 	add	objptr, ##62416
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     EC E5 85 F1 | 	sub	objptr, ##62444
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     21 4A 05 F6 | 	mov	COUNT_, #33
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     48 F0 07 F1 | 	add	ptra, ##584
00a2c     55 00 00 FF 
00a30     F0 E5 05 F1 | 	add	objptr, ##44016
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     69 00 00 FF 
00a60     50 E4 85 F1 | 	sub	objptr, ##53840
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     53 00 00 FF 
00a9c     E0 E5 05 F1 | 	add	objptr, ##42976
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     3E 01 00 FF 
00ab4     7E 16 06 F6 | 	mov	arg03, ##@LR__4287
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     55 00 00 FF 
00af4     F0 E5 85 F1 | 	sub	objptr, ##44016
00af8     0C A2 B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     44 A1 B1 FD | 	call	#__system__LTrim_S
00b04     55 00 00 FF 
00b08     F0 E5 05 F1 | 	add	objptr, ##44016
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     3E 01 00 FF 
00b14     7F 1E 06 F6 | 	mov	local01, ##@LR__4288
00b18     24 00 00 FF 
00b1c     88 E4 05 F1 | 	add	objptr, ##18568
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     88 E4 85 F1 | 	sub	objptr, ##18568
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     55 00 00 FF 
00b34     F0 E5 85 F1 | 	sub	objptr, ##44016
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     7A 00 00 FF 
00b54     7C E4 05 F1 | 	add	objptr, ##62588
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     7A 00 00 FF 
00b60     7C E4 85 F1 | 	sub	objptr, ##62588
00b64     10 23 90 AD |  if_e	jmp	#LR__0133
00b68     7A 00 00 FF 
00b6c     80 E4 05 F1 | 	add	objptr, ##62592
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     90 E4 85 F1 | 	sub	objptr, ##18576
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     55 00 00 FF 
00b88     F0 E5 85 F1 | 	sub	objptr, ##44016
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     55 00 00 FF 
00bb8     F0 E5 05 F1 | 	add	objptr, ##44016
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     55 00 00 FF 
00bc4     F0 E5 85 F1 | 	sub	objptr, ##44016
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     18 9E B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     3E 01 00 FF 
00bdc     80 14 06 F6 | 	mov	arg02, ##@LR__4289
00be0     0C 7D B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     7A 00 00 FF 
00bf0     80 E4 05 F1 | 	add	objptr, ##62592
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     7A 00 00 FF 
00bfc     80 E4 85 F1 | 	sub	objptr, ##62592
00c00     7A 00 00 AF 
00c04     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     7A 00 00 AF 
00c10     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     55 00 00 FF 
00c1c     F0 E5 05 F1 | 	add	objptr, ##44016
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     55 00 00 FF 
00c28     F0 E5 85 F1 | 	sub	objptr, ##44016
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     B4 9D B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     3E 01 00 FF 
00c40     82 14 06 F6 | 	mov	arg02, ##@LR__4290
00c44     A8 7C B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     7A 00 00 AF 
00c50     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     7A 00 00 AF 
00c5c     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     7A 00 00 AF 
00c68     80 E4 05 A1 |  if_e	add	objptr, ##62592
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     7A 00 00 AF 
00c74     80 E4 85 A1 |  if_e	sub	objptr, ##62592
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     53 00 00 FF 
00c84     E0 E5 05 F1 | 	add	objptr, ##42976
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A0 E4 05 F1 | 	add	objptr, ##19616
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     7A 00 00 FF 
00ca0     80 E4 85 F1 | 	sub	objptr, ##62592
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     55 00 00 FF 
00cbc     F0 E5 05 F1 | 	add	objptr, ##44016
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     55 00 00 FF 
00cc8     F0 E5 85 F1 | 	sub	objptr, ##44016
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     14 9D B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     3E 01 00 FF 
00ce0     84 30 06 F6 | 	mov	local10, ##@LR__4291
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     04 7C B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     53 00 00 FF 
00d00     E0 E5 05 F1 | 	add	objptr, ##42976
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     53 00 00 FF 
00d20     E0 E5 85 F1 | 	sub	objptr, ##42976
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     7A 00 00 FF 
00d2c     7C E4 05 F1 | 	add	objptr, ##62588
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     7A 00 00 FF 
00d38     7C E4 85 F1 | 	sub	objptr, ##62588
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     7A 00 00 FF 
00d50     7C E4 05 F1 | 	add	objptr, ##62588
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     7A 00 00 FF 
00d5c     7C E4 85 F1 | 	sub	objptr, ##62588
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     55 00 00 FF 
00d6c     F0 E5 05 F1 | 	add	objptr, ##44016
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     55 00 00 FF 
00d78     F0 E5 85 F1 | 	sub	objptr, ##44016
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     B4 9B B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     58 9F B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     90 9E B1 FD | 	call	#__system__LTrim_S
00db8     7A 00 00 FF 
00dbc     84 E4 05 F1 | 	add	objptr, ##62596
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     94 E4 85 F1 | 	sub	objptr, ##18580
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     55 00 00 FF 
00dd4     F0 E5 85 F1 | 	sub	objptr, ##44016
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     F0 9A B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     1C 9F B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     54 9E B1 FD | 	call	#__system__LTrim_S
00df4     55 00 00 FF 
00df8     F0 E5 05 F1 | 	add	objptr, ##44016
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     55 00 00 FF 
00e04     F0 E5 85 F1 | 	sub	objptr, ##44016
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     3E 01 00 FF 
00e10     86 1E 06 F6 | 	mov	local01, ##@LR__4292
00e14     7A 00 00 FF 
00e18     84 E4 05 F1 | 	add	objptr, ##62596
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     7A 00 00 FF 
00e24     84 E4 85 F1 | 	sub	objptr, ##62596
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     55 00 00 FF 
00e2c     F8 E5 05 F1 | 	add	objptr, ##44024
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     55 00 00 FF 
00e38     F8 E5 85 F1 | 	sub	objptr, ##44024
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     7A 00 00 FF 
00e4c     84 E4 05 F1 | 	add	objptr, ##62596
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     7A 00 00 FF 
00e58     84 E4 85 F1 | 	sub	objptr, ##62596
00e5c     3E 01 00 FF 
00e60     87 14 06 F6 | 	mov	arg02, ##@LR__4293
00e64     88 7A B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     55 00 00 5F 
00e70     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     55 00 00 5F 
00e7c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     55 00 00 FF 
00e88     F8 E5 05 F1 | 	add	objptr, ##44024
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     55 00 00 FF 
00e94     F8 E5 85 F1 | 	sub	objptr, ##44024
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     7A 00 00 FF 
00ea8     84 E4 05 F1 | 	add	objptr, ##62596
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     7A 00 00 FF 
00eb4     84 E4 85 F1 | 	sub	objptr, ##62596
00eb8     3E 01 00 FF 
00ebc     88 14 06 F6 | 	mov	arg02, ##@LR__4294
00ec0     2C 7A B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     55 00 00 AF 
00ecc     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     55 00 00 AF 
00ed8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     55 00 00 FF 
00ee4     F8 E5 05 F1 | 	add	objptr, ##44024
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     55 00 00 FF 
00ef0     F8 E5 85 F1 | 	sub	objptr, ##44024
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     7A 00 00 FF 
00f00     84 E4 05 F1 | 	add	objptr, ##62596
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     7A 00 00 FF 
00f0c     84 E4 85 F1 | 	sub	objptr, ##62596
00f10     3E 01 00 FF 
00f14     89 14 06 F6 | 	mov	arg02, ##@LR__4295
00f18     D4 79 B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     55 00 00 5F 
00f24     F8 E5 05 51 |  if_ne	add	objptr, ##44024
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     55 00 00 5F 
00f30     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     55 00 00 FF 
00f3c     F8 E5 05 F1 | 	add	objptr, ##44024
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     55 00 00 FF 
00f48     F8 E5 85 F1 | 	sub	objptr, ##44024
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     7A 00 00 FF 
00f58     84 E4 05 F1 | 	add	objptr, ##62596
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     7A 00 00 FF 
00f64     84 E4 85 F1 | 	sub	objptr, ##62596
00f68     3E 01 00 FF 
00f6c     8A 14 06 F6 | 	mov	arg02, ##@LR__4296
00f70     7C 79 B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     55 00 00 AF 
00f7c     F8 E5 05 A1 |  if_e	add	objptr, ##44024
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     55 00 00 AF 
00f88     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     55 00 00 FF 
00fa8     F0 E5 05 F1 | 	add	objptr, ##44016
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     55 00 00 FF 
00fb4     F0 E5 85 F1 | 	sub	objptr, ##44016
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     28 9A B1 FD | 	call	#__system__Mid_S
00fc4     7A 00 00 FF 
00fc8     88 E4 05 F1 | 	add	objptr, ##62600
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     7A 00 00 FF 
00fd8     88 E4 85 F1 | 	sub	objptr, ##62600
00fdc     A4 21 B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     7A 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##62588
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     7A 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##62588
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     7A 00 00 FF 
01064     90 E4 05 F1 | 	add	objptr, ##62608
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     7A 00 00 FF 
01098     90 E4 85 F1 | 	sub	objptr, ##62608
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     55 00 00 FF 
010ac     F0 E5 05 F1 | 	add	objptr, ##44016
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A0 E4 05 F1 | 	add	objptr, ##18592
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     7A 00 00 FF 
010c4     90 E4 85 F1 | 	sub	objptr, ##62608
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     1C 99 B1 FD | 	call	#__system__Mid_S
010d0     7A 00 00 FF 
010d4     98 E4 05 F1 | 	add	objptr, ##62616
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     7A 00 00 FF 
010e0     98 E4 85 F1 | 	sub	objptr, ##62616
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     3E 01 00 FF 
010ec     8B 14 06 F6 | 	mov	arg02, ##@LR__4297
010f0     FC 77 B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     53 00 00 FF 
01108     E0 E5 05 F1 | 	add	objptr, ##42976
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     B8 E4 05 F1 | 	add	objptr, ##19640
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     7A 00 00 FF 
01120     98 E4 85 F1 | 	sub	objptr, ##62616
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     55 00 00 FF 
01130     F0 E5 05 F1 | 	add	objptr, ##44016
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A0 E4 05 F1 | 	add	objptr, ##18592
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     7A 00 00 FF 
0115c     90 E4 85 F1 | 	sub	objptr, ##62608
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     7C 98 B1 FD | 	call	#__system__Mid_S
01170     7A 00 00 FF 
01174     98 E4 05 F1 | 	add	objptr, ##62616
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     7A 00 00 FF 
01180     98 E4 85 F1 | 	sub	objptr, ##62616
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     3E 01 00 FF 
0118c     8C 14 06 F6 | 	mov	arg02, ##@LR__4298
01190     5C 77 B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     53 00 00 FF 
011a8     E0 E5 05 F1 | 	add	objptr, ##42976
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     B8 E4 05 F1 | 	add	objptr, ##19640
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     7A 00 00 FF 
011c0     98 E4 85 F1 | 	sub	objptr, ##62616
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     53 00 00 FF 
011e4     E0 E5 05 F1 | 	add	objptr, ##42976
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     3E 01 00 FF 
011f4     8D 14 06 F6 | 	mov	arg02, ##@LR__4299
011f8     53 00 00 FF 
011fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01200     EC 76 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     53 00 00 FF 
01224     E0 E5 05 F1 | 	add	objptr, ##42976
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     B8 E4 05 F1 | 	add	objptr, ##19640
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     B8 E4 85 F1 | 	sub	objptr, ##19640
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     53 00 00 FF 
01264     E0 E5 85 F1 | 	sub	objptr, ##42976
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     B0 76 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     53 00 00 FF 
012a4     E0 E5 05 F1 | 	add	objptr, ##42976
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     53 00 00 FF 
012fc     E0 E5 85 F1 | 	sub	objptr, ##42976
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     7A 00 00 FF 
0130c     98 E4 05 F1 | 	add	objptr, ##62616
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     7A 00 00 FF 
01318     98 E4 85 F1 | 	sub	objptr, ##62616
0131c     3E 01 00 FF 
01320     8F 14 06 F6 | 	mov	arg02, ##@LR__4300
01324     C8 75 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     7A 00 00 FF 
01338     98 E4 05 F1 | 	add	objptr, ##62616
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     7A 00 00 FF 
01344     98 E4 85 F1 | 	sub	objptr, ##62616
01348     3E 01 00 FF 
0134c     91 14 06 F6 | 	mov	arg02, ##@LR__4301
01350     9C 75 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     53 00 00 FF 
01378     E0 E5 05 F1 | 	add	objptr, ##42976
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     53 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##42976
01390     C8 95 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     3E 01 00 FF 
0139c     93 14 06 F6 | 	mov	arg02, ##@LR__4302
013a0     4C 75 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     53 00 00 FF 
013bc     E0 E5 05 F1 | 	add	objptr, ##42976
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     53 00 00 FF 
013d4     E0 E5 85 F1 | 	sub	objptr, ##42976
013d8     F8 94 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     3E 01 00 FF 
013e4     95 14 06 F6 | 	mov	arg02, ##@LR__4303
013e8     04 75 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     53 00 00 FF 
01400     E0 E5 05 F1 | 	add	objptr, ##42976
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     53 00 00 FF 
0144c     E0 E5 85 F1 | 	sub	objptr, ##42976
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     E0 94 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     98 74 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     53 00 00 FF 
014bc     E0 E5 05 F1 | 	add	objptr, ##42976
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     53 00 00 FF 
01514     E0 E5 85 F1 | 	sub	objptr, ##42976
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     53 00 00 FF 
01540     E0 E5 05 F1 | 	add	objptr, ##42976
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C0 E4 05 F1 | 	add	objptr, ##19648
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C0 E4 85 F1 | 	sub	objptr, ##19648
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     C4 E4 05 F1 | 	add	objptr, ##19652
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     7A 00 00 FF 
0158c     A0 E4 85 F1 | 	sub	objptr, ##62624
01590     3E 01 00 FF 
01594     97 14 06 F6 | 	mov	arg02, ##@LR__4304
01598     54 73 B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     7A 00 00 FF 
015a8     A0 E4 05 F1 | 	add	objptr, ##62624
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     7A 00 00 FF 
015b4     A0 E4 85 F1 | 	sub	objptr, ##62624
015b8     3E 01 00 FF 
015bc     99 14 06 F6 | 	mov	arg02, ##@LR__4305
015c0     2C 73 B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     7A 00 00 FF 
015d0     A0 E4 05 F1 | 	add	objptr, ##62624
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     7A 00 00 FF 
015dc     A0 E4 85 F1 | 	sub	objptr, ##62624
015e0     3E 01 00 FF 
015e4     9B 14 06 F6 | 	mov	arg02, ##@LR__4306
015e8     04 73 B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     7A 00 00 FF 
015f8     A0 E4 05 F1 | 	add	objptr, ##62624
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     7A 00 00 FF 
01604     A0 E4 85 F1 | 	sub	objptr, ##62624
01608     3E 01 00 FF 
0160c     9D 34 06 F6 | 	mov	local12, ##@LR__4307
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     D8 72 B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     7A 00 00 FF 
01624     A0 E4 05 F1 | 	add	objptr, ##62624
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     7A 00 00 FF 
01630     A0 E4 85 F1 | 	sub	objptr, ##62624
01634     3E 01 00 FF 
01638     9F 32 06 F6 | 	mov	local11, ##@LR__4308
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     A8 72 B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     7A 00 00 FF 
01654     A0 E4 05 F1 | 	add	objptr, ##62624
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     7A 00 00 FF 
01660     A0 E4 85 F1 | 	sub	objptr, ##62624
01664     3E 01 00 FF 
01668     A1 32 06 F6 | 	mov	local11, ##@LR__4309
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     7C 72 B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     7A 00 00 FF 
01680     A0 E4 05 F1 | 	add	objptr, ##62624
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     7A 00 00 FF 
0168c     A0 E4 85 F1 | 	sub	objptr, ##62624
01690     3E 01 00 FF 
01694     A3 38 06 F6 | 	mov	local14, ##@LR__4310
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     50 72 B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     7A 00 00 FF 
016ac     A4 E4 05 F1 | 	add	objptr, ##62628
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     7A 00 00 FF 
016b8     A4 E4 85 F1 | 	sub	objptr, ##62628
016bc     3E 01 00 FF 
016c0     A5 4C 06 F6 | 	mov	local24, ##@LR__4311
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     20 72 B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     7A 00 00 FF 
016dc     A0 E4 05 F1 | 	add	objptr, ##62624
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     7A 00 00 FF 
016e8     A0 E4 85 F1 | 	sub	objptr, ##62624
016ec     3E 01 00 FF 
016f0     A7 4C 06 F6 | 	mov	local24, ##@LR__4312
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     F4 71 B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     7A 00 00 FF 
01708     A4 E4 05 F1 | 	add	objptr, ##62628
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     7A 00 00 FF 
01714     A4 E4 85 F1 | 	sub	objptr, ##62628
01718     3E 01 00 FF 
0171c     A9 46 06 F6 | 	mov	local21, ##@LR__4313
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     C4 71 B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     7A 00 00 FF 
01738     A0 E4 05 F1 | 	add	objptr, ##62624
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     7A 00 00 FF 
01744     A0 E4 85 F1 | 	sub	objptr, ##62624
01748     3E 01 00 FF 
0174c     AB 46 06 F6 | 	mov	local21, ##@LR__4314
01750     23 15 02 F6 | 	mov	arg02, local21
01754     98 71 B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     7A 00 00 FF 
01764     A4 E4 05 F1 | 	add	objptr, ##62628
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     7A 00 00 FF 
01770     A4 E4 85 F1 | 	sub	objptr, ##62628
01774     3E 01 00 FF 
01778     AD 4E 06 F6 | 	mov	local25, ##@LR__4315
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     68 71 B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     7A 00 00 FF 
01794     A0 E4 05 F1 | 	add	objptr, ##62624
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     7A 00 00 FF 
017a0     A0 E4 85 F1 | 	sub	objptr, ##62624
017a4     3E 01 00 FF 
017a8     AF 50 06 F6 | 	mov	local26, ##@LR__4316
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     38 71 B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     7A 00 00 FF 
017c4     A4 E4 05 F1 | 	add	objptr, ##62628
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     7A 00 00 FF 
017d0     A4 E4 85 F1 | 	sub	objptr, ##62628
017d4     3E 01 00 FF 
017d8     B1 52 06 F6 | 	mov	local27, ##@LR__4317
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     08 71 B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     53 00 00 FF 
017fc     E0 E5 05 F1 | 	add	objptr, ##42976
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C0 E4 05 F1 | 	add	objptr, ##19648
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     7A 00 00 FF 
0181c     A4 E4 85 F1 | 	sub	objptr, ##62628
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     F8 70 B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     53 00 00 FF 
0185c     E0 E5 05 F1 | 	add	objptr, ##42976
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     53 00 00 FF 
018c0     E0 E5 85 F1 | 	sub	objptr, ##42976
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     53 00 00 FF 
018fc     E0 E5 05 F1 | 	add	objptr, ##42976
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     53 00 00 FF 
01924     E0 E5 85 F1 | 	sub	objptr, ##42976
01928     DC 93 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     14 93 B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 88 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 29 02 F6 | 	mov	local06, local04
0194c     03 28 66 F0 | 	shl	local06, #3
01950     53 00 00 FF 
01954     E0 E5 05 F1 | 	add	objptr, ##42976
01958     F2 28 02 F1 | 	add	local06, objptr
0195c     14 13 02 FB | 	rdlong	arg01, local06
01960     53 00 00 FF 
01964     E0 E5 85 F1 | 	sub	objptr, ##42976
01968     09 2D 02 F6 | 	mov	local08, arg01
0196c                 | LR__0078
0196c     16 FB C9 FA | 	rdbyte	result1, local08 wz
01970     01 2C 06 51 |  if_ne	add	local08, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01978     09 2D 8A F1 | 	sub	local08, arg01 wz
0197c     C4 00 90 5D |  if_ne	jmp	#LR__0082
01980                 | '     if i=k-1 then k-=1  :  exit
01980     1E 1F 02 F6 | 	mov	local01, local16
01984     01 1E 86 F1 | 	sub	local01, #1
01988     0F 25 0A F2 | 	cmp	local04, local01 wz
0198c     01 3C 86 A1 |  if_e	sub	local16, #1
01990     C4 00 90 AD |  if_e	jmp	#LR__0084
01994                 | '     if i<k-1 then 
01994     1E 1F 02 F6 | 	mov	local01, local16
01998     01 1E 86 F1 | 	sub	local01, #1
0199c     0F 25 52 F2 | 	cmps	local04, local01 wc
019a0     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a4                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a4     12 3B 02 F6 | 	mov	local15, local04
019a8     1E 59 02 F6 | 	mov	local30, local16
019ac     01 58 86 F1 | 	sub	local30, #1
019b0                 | LR__0079
019b0     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b4     80 00 90 3D |  if_ae	jmp	#LR__0080
019b8     1D 29 02 F6 | 	mov	local06, local15
019bc     01 28 06 F1 | 	add	local06, #1
019c0     03 28 66 F0 | 	shl	local06, #3
019c4     53 00 00 FF 
019c8     E0 E5 05 F1 | 	add	objptr, ##42976
019cc     F2 28 02 F1 | 	add	local06, objptr
019d0     14 1F 02 FB | 	rdlong	local01, local06
019d4     1D 2B 02 F6 | 	mov	local07, local15
019d8     01 2A 06 F1 | 	add	local07, #1
019dc     03 2A 66 F0 | 	shl	local07, #3
019e0     F2 2A 02 F1 | 	add	local07, objptr
019e4     04 2A 06 F1 | 	add	local07, #4
019e8     15 27 02 FB | 	rdlong	local05, local07
019ec     1D 31 02 F6 | 	mov	local10, local15
019f0     18 2B 02 F6 | 	mov	local07, local10
019f4     03 2A 66 F0 | 	shl	local07, #3
019f8     F2 34 02 F6 | 	mov	local12, objptr
019fc     F2 2A 02 F1 | 	add	local07, objptr
01a00     15 1F 62 FC | 	wrlong	local01, local07
01a04     1D 33 02 F6 | 	mov	local11, local15
01a08     19 39 02 F6 | 	mov	local14, local11
01a0c     1C 37 02 F6 | 	mov	local13, local14
01a10     03 36 66 F0 | 	shl	local13, #3
01a14     F2 4C 02 F6 | 	mov	local24, objptr
01a18     F2 36 02 F1 | 	add	local13, objptr
01a1c     04 36 06 F1 | 	add	local13, #4
01a20     1B 27 62 FC | 	wrlong	local05, local13
01a24     04 36 86 F1 | 	sub	local13, #4
01a28     01 3A 06 F1 | 	add	local15, #1
01a2c     53 00 00 FF 
01a30     E0 E5 85 F1 | 	sub	objptr, ##42976
01a34     78 FF 9F FD | 	jmp	#LR__0079
01a38                 | LR__0080
01a38     01 3C 86 F1 | 	sub	local16, #1
01a3c                 | '       if i>0 then i-=1 
01a3c     01 24 56 F2 | 	cmps	local04, #1 wc
01a40     01 24 86 31 |  if_ae	sub	local04, #1
01a44                 | LR__0081
01a44                 | LR__0082
01a44     01 24 06 F1 | 	add	local04, #1
01a48     1E 1F 02 F6 | 	mov	local01, local16
01a4c     01 1E 86 F1 | 	sub	local01, #1
01a50     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a54     F0 FE 9F ED |  if_be	jmp	#LR__0077
01a58                 | LR__0083
01a58                 | LR__0084
01a58                 | ' 
01a58                 | ' ' 1g: lowercase all that is not a string
01a58                 | ' 
01a58                 | ' for j=0 to k-1
01a58     00 3A 06 F6 | 	mov	local15, #0
01a5c     1E 5B 02 F6 | 	mov	local31, local16
01a60                 | LR__0085
01a60     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a64     CC 00 90 3D |  if_ae	jmp	#LR__0088
01a68                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a68     1D 29 02 F6 | 	mov	local06, local15
01a6c     03 28 66 F0 | 	shl	local06, #3
01a70     53 00 00 FF 
01a74     E0 E5 05 F1 | 	add	objptr, ##42976
01a78     F2 28 02 F1 | 	add	local06, objptr
01a7c     14 13 02 FB | 	rdlong	arg01, local06
01a80     01 14 06 F6 | 	mov	arg02, #1
01a84     53 00 00 FF 
01a88     E0 E5 85 F1 | 	sub	objptr, ##42976
01a8c     44 8E B1 FD | 	call	#__system__Left_S
01a90     FD 12 02 F6 | 	mov	arg01, result1
01a94     3E 01 00 FF 
01a98     B3 14 06 F6 | 	mov	arg02, ##@LR__4318
01a9c     50 6E B1 FD | 	call	#__system___string_cmp
01aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01aa4     44 00 90 5D |  if_ne	jmp	#LR__0086
01aa8     1D 2B 02 F6 | 	mov	local07, local15
01aac     03 2A 66 F0 | 	shl	local07, #3
01ab0     53 00 00 FF 
01ab4     E0 E5 05 F1 | 	add	objptr, ##42976
01ab8     F2 34 02 F6 | 	mov	local12, objptr
01abc     F2 2A 02 F1 | 	add	local07, objptr
01ac0     15 13 02 FB | 	rdlong	arg01, local07
01ac4     01 14 06 F6 | 	mov	arg02, #1
01ac8     53 00 00 FF 
01acc     E0 E5 85 F1 | 	sub	objptr, ##42976
01ad0     88 8E B1 FD | 	call	#__system__Right_S
01ad4     FD 12 02 F6 | 	mov	arg01, result1
01ad8     3E 01 00 FF 
01adc     B5 14 06 F6 | 	mov	arg02, ##@LR__4319
01ae0     0C 6E B1 FD | 	call	#__system___string_cmp
01ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ae8     40 00 90 AD |  if_e	jmp	#LR__0087
01aec                 | LR__0086
01aec     1D 31 02 F6 | 	mov	local10, local15
01af0     03 30 66 F0 | 	shl	local10, #3
01af4     53 00 00 FF 
01af8     E0 E5 05 F1 | 	add	objptr, ##42976
01afc     F2 30 02 F1 | 	add	local10, objptr
01b00     1D 35 02 F6 | 	mov	local12, local15
01b04     1A 33 02 F6 | 	mov	local11, local12
01b08     19 39 02 F6 | 	mov	local14, local11
01b0c     03 38 66 F0 | 	shl	local14, #3
01b10     F2 36 02 F6 | 	mov	local13, objptr
01b14     F2 38 02 F1 | 	add	local14, objptr
01b18     1C 13 02 FB | 	rdlong	arg01, local14
01b1c     53 00 00 FF 
01b20     E0 E5 85 F1 | 	sub	objptr, ##42976
01b24     60 90 B1 FD | 	call	#__system__LCase_S
01b28     18 FB 61 FC | 	wrlong	result1, local10
01b2c                 | LR__0087
01b2c     01 3A 06 F1 | 	add	local15, #1
01b30     2C FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 24 06 F6 | 	mov	local04, #0
01b38     1E 5D 02 F6 | 	mov	local32, local16
01b3c     01 5C 06 F1 | 	add	local32, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2E 25 52 F2 | 	cmps	local04, local32 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     12 31 02 F6 | 	mov	local10, local04
01b50     03 30 66 F0 | 	shl	local10, #3
01b54     53 00 00 FF 
01b58     E0 E5 05 F1 | 	add	objptr, ##42976
01b5c     F2 30 02 F1 | 	add	local10, objptr
01b60     04 30 06 F1 | 	add	local10, #4
01b64     FF FF FF FF 
01b68     18 FF 6B FC | 	wrlong	##-1, local10
01b6c     01 24 06 F1 | 	add	local04, #1
01b70     53 00 00 FF 
01b74     E0 E5 85 F1 | 	sub	objptr, ##42976
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     53 00 00 FF 
01b80     E0 E5 05 F1 | 	add	objptr, ##42976
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     53 00 00 FF 
01b8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01b90     09 2D 02 F6 | 	mov	local08, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     16 FB C9 FA | 	rdbyte	result1, local08 wz
01b9c     01 2C 06 51 |  if_ne	add	local08, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2D 8A F1 | 	sub	local08, arg01 wz
01ba8     CC 12 90 AD |  if_e	jmp	#LR__0133
01bac                 | ' 
01bac                 | ' ' 2a find part types 
01bac                 | ' 
01bac                 | ' for i=0 to k-1
01bac     00 24 06 F6 | 	mov	local04, #0
01bb0     1E 5F 02 F6 | 	mov	local33, local16
01bb4                 | LR__0094
01bb4     2F 25 52 F2 | 	cmps	local04, local33 wc
01bb8     70 05 90 3D |  if_ae	jmp	#LR__0103
01bbc     12 31 02 F6 | 	mov	local10, local04
01bc0     03 30 66 F0 | 	shl	local10, #3
01bc4     53 00 00 FF 
01bc8     E0 E5 05 F1 | 	add	objptr, ##42976
01bcc     F2 30 02 F1 | 	add	local10, objptr
01bd0     12 37 02 F6 | 	mov	local13, local04
01bd4     03 36 66 F0 | 	shl	local13, #3
01bd8     F2 4C 02 F6 | 	mov	local24, objptr
01bdc     F2 36 02 F1 | 	add	local13, objptr
01be0     1B 13 02 FB | 	rdlong	arg01, local13
01be4     53 00 00 FF 
01be8     E0 E5 85 F1 | 	sub	objptr, ##42976
01bec     94 15 B0 FD | 	call	#_isseparator
01bf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
01bf4     04 30 06 F1 | 	add	local10, #4
01bf8     18 FB 61 FC | 	wrlong	result1, local10
01bfc                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01bfc     12 31 02 F6 | 	mov	local10, local04
01c00     03 30 66 F0 | 	shl	local10, #3
01c04     53 00 00 FF 
01c08     E0 E5 05 F1 | 	add	objptr, ##42976
01c0c     F2 30 02 F1 | 	add	local10, objptr
01c10     04 30 06 F1 | 	add	local10, #4
01c14     18 2B 02 FB | 	rdlong	local07, local10
01c18     01 2A 56 F2 | 	cmps	local07, #1 wc
01c1c     53 00 00 FF 
01c20     E0 E5 85 F1 | 	sub	objptr, ##42976
01c24     FC 04 90 3D |  if_ae	jmp	#LR__0102
01c28     12 31 02 F6 | 	mov	local10, local04
01c2c     03 30 66 F0 | 	shl	local10, #3
01c30     53 00 00 FF 
01c34     E0 E5 05 F1 | 	add	objptr, ##42976
01c38     F2 30 02 F1 | 	add	local10, objptr
01c3c     12 37 02 F6 | 	mov	local13, local04
01c40     03 36 66 F0 | 	shl	local13, #3
01c44     F2 4C 02 F6 | 	mov	local24, objptr
01c48     F2 36 02 F1 | 	add	local13, objptr
01c4c     1B 13 02 FB | 	rdlong	arg01, local13
01c50     53 00 00 FF 
01c54     E0 E5 85 F1 | 	sub	objptr, ##42976
01c58     48 12 B0 FD | 	call	#_isoperator
01c5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c60     04 30 06 F1 | 	add	local10, #4
01c64     18 FB 61 FC | 	wrlong	result1, local10
01c68                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c68     12 31 02 F6 | 	mov	local10, local04
01c6c     03 30 66 F0 | 	shl	local10, #3
01c70     53 00 00 FF 
01c74     E0 E5 05 F1 | 	add	objptr, ##42976
01c78     F2 30 02 F1 | 	add	local10, objptr
01c7c     04 30 06 F1 | 	add	local10, #4
01c80     18 2B 02 FB | 	rdlong	local07, local10
01c84     01 2A 56 F2 | 	cmps	local07, #1 wc
01c88     53 00 00 FF 
01c8c     E0 E5 85 F1 | 	sub	objptr, ##42976
01c90     90 04 90 3D |  if_ae	jmp	#LR__0102
01c94     12 31 02 F6 | 	mov	local10, local04
01c98     03 30 66 F0 | 	shl	local10, #3
01c9c     53 00 00 FF 
01ca0     E0 E5 05 F1 | 	add	objptr, ##42976
01ca4     F2 30 02 F1 | 	add	local10, objptr
01ca8     12 37 02 F6 | 	mov	local13, local04
01cac     03 36 66 F0 | 	shl	local13, #3
01cb0     F2 4C 02 F6 | 	mov	local24, objptr
01cb4     F2 36 02 F1 | 	add	local13, objptr
01cb8     1B 13 02 FB | 	rdlong	arg01, local13
01cbc     53 00 00 FF 
01cc0     E0 E5 85 F1 | 	sub	objptr, ##42976
01cc4                 | ' 
01cc4                 | ' select case s
01cc4     3E 01 00 FF 
01cc8     BF 15 06 F6 | 	mov	arg02, ##@LR__4391
01ccc     20 6C B1 FD | 	call	#__system___string_cmp
01cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01cd4     1B FA 05 A6 |  if_e	mov	result1, #27
01cd8     00 FA 05 56 |  if_ne	mov	result1, #0
01cdc     FD FA E1 F8 | 	getbyte	result1, result1, #0
01ce0     04 30 06 F1 | 	add	local10, #4
01ce4     18 FB 61 FC | 	wrlong	result1, local10
01ce8                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01ce8     12 31 02 F6 | 	mov	local10, local04
01cec     03 30 66 F0 | 	shl	local10, #3
01cf0     53 00 00 FF 
01cf4     E0 E5 05 F1 | 	add	objptr, ##42976
01cf8     F2 30 02 F1 | 	add	local10, objptr
01cfc     04 30 06 F1 | 	add	local10, #4
01d00     18 2B 02 FB | 	rdlong	local07, local10
01d04     01 2A 56 F2 | 	cmps	local07, #1 wc
01d08     53 00 00 FF 
01d0c     E0 E5 85 F1 | 	sub	objptr, ##42976
01d10     10 04 90 3D |  if_ae	jmp	#LR__0102
01d14     12 31 02 F6 | 	mov	local10, local04
01d18     03 30 66 F0 | 	shl	local10, #3
01d1c     53 00 00 FF 
01d20     E0 E5 05 F1 | 	add	objptr, ##42976
01d24     F2 30 02 F1 | 	add	local10, objptr
01d28     12 37 02 F6 | 	mov	local13, local04
01d2c     03 36 66 F0 | 	shl	local13, #3
01d30     F2 4C 02 F6 | 	mov	local24, objptr
01d34     F2 36 02 F1 | 	add	local13, objptr
01d38     1B 13 02 FB | 	rdlong	arg01, local13
01d3c     53 00 00 FF 
01d40     E0 E5 85 F1 | 	sub	objptr, ##42976
01d44     3C 16 B0 FD | 	call	#_iscommand
01d48     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d4c     04 30 06 F1 | 	add	local10, #4
01d50     18 FB 61 FC | 	wrlong	result1, local10
01d54                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01d54     12 31 02 F6 | 	mov	local10, local04
01d58     03 30 66 F0 | 	shl	local10, #3
01d5c     53 00 00 FF 
01d60     E0 E5 05 F1 | 	add	objptr, ##42976
01d64     F2 30 02 F1 | 	add	local10, objptr
01d68     04 30 06 F1 | 	add	local10, #4
01d6c     18 2B 02 FB | 	rdlong	local07, local10
01d70     01 2A 56 F2 | 	cmps	local07, #1 wc
01d74     53 00 00 FF 
01d78     E0 E5 85 F1 | 	sub	objptr, ##42976
01d7c     A4 03 90 3D |  if_ae	jmp	#LR__0102
01d80     12 31 02 F6 | 	mov	local10, local04
01d84     03 30 66 F0 | 	shl	local10, #3
01d88     53 00 00 FF 
01d8c     E0 E5 05 F1 | 	add	objptr, ##42976
01d90     F2 30 02 F1 | 	add	local10, objptr
01d94     12 33 02 F6 | 	mov	local11, local04
01d98     19 39 02 F6 | 	mov	local14, local11
01d9c     1C 37 02 F6 | 	mov	local13, local14
01da0     03 36 66 F0 | 	shl	local13, #3
01da4     F2 4C 02 F6 | 	mov	local24, objptr
01da8     F2 36 02 F1 | 	add	local13, objptr
01dac     1B 13 02 FB | 	rdlong	arg01, local13
01db0     53 00 00 FF 
01db4     E0 E5 85 F1 | 	sub	objptr, ##42976
01db8     48 1F B0 FD | 	call	#_isfunction
01dbc     FD FA E1 F8 | 	getbyte	result1, result1, #0
01dc0     04 30 06 F1 | 	add	local10, #4
01dc4     18 FB 61 FC | 	wrlong	result1, local10
01dc8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01dc8     12 31 02 F6 | 	mov	local10, local04
01dcc     03 30 66 F0 | 	shl	local10, #3
01dd0     53 00 00 FF 
01dd4     E0 E5 05 F1 | 	add	objptr, ##42976
01dd8     F2 30 02 F1 | 	add	local10, objptr
01ddc     04 30 06 F1 | 	add	local10, #4
01de0     18 35 02 FB | 	rdlong	local12, local10
01de4     01 34 56 F2 | 	cmps	local12, #1 wc
01de8     53 00 00 FF 
01dec     E0 E5 85 F1 | 	sub	objptr, ##42976
01df0     30 03 90 3D |  if_ae	jmp	#LR__0102
01df4     12 29 02 F6 | 	mov	local06, local04
01df8     03 28 66 F0 | 	shl	local06, #3
01dfc     53 00 00 FF 
01e00     E0 E5 05 F1 | 	add	objptr, ##42976
01e04     F2 28 02 F1 | 	add	local06, objptr
01e08     14 13 02 FB | 	rdlong	arg01, local06
01e0c     53 00 00 FF 
01e10     E0 E5 85 F1 | 	sub	objptr, ##42976
01e14     00 24 B0 FD | 	call	#_isnum
01e18     FD 1E 02 F6 | 	mov	local01, result1
01e1c     7A 00 00 FF 
01e20     A8 E4 05 F1 | 	add	objptr, ##62632
01e24     F2 1E 62 FC | 	wrlong	local01, objptr
01e28     12 29 02 F6 | 	mov	local06, local04
01e2c     03 28 66 F0 | 	shl	local06, #3
01e30     26 00 00 FF 
01e34     C8 E4 85 F1 | 	sub	objptr, ##19656
01e38     F2 28 02 F1 | 	add	local06, objptr
01e3c     14 13 02 FB | 	rdlong	arg01, local06
01e40     53 00 00 FF 
01e44     E0 E5 85 F1 | 	sub	objptr, ##42976
01e48     A4 26 B0 FD | 	call	#_isint
01e4c     FD 1E 02 F6 | 	mov	local01, result1
01e50     7A 00 00 FF 
01e54     AC E4 05 F1 | 	add	objptr, ##62636
01e58     F2 1E 62 FC | 	wrlong	local01, objptr
01e5c     12 29 02 F6 | 	mov	local06, local04
01e60     03 28 66 F0 | 	shl	local06, #3
01e64     26 00 00 FF 
01e68     CC E4 85 F1 | 	sub	objptr, ##19660
01e6c     F2 2A 02 F6 | 	mov	local07, objptr
01e70     F2 28 02 F1 | 	add	local06, objptr
01e74     14 13 02 FB | 	rdlong	arg01, local06
01e78     53 00 00 FF 
01e7c     E0 E5 85 F1 | 	sub	objptr, ##42976
01e80     C4 27 B0 FD | 	call	#_isdec
01e84     7A 00 00 FF 
01e88     B0 E4 05 F1 | 	add	objptr, ##62640
01e8c     F2 FA 61 FC | 	wrlong	result1, objptr
01e90                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01e90     08 E4 85 F1 | 	sub	objptr, #8
01e94     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e98     7A 00 00 FF 
01e9c     A8 E4 85 F1 | 	sub	objptr, ##62632
01ea0     60 00 90 AD |  if_e	jmp	#LR__0095
01ea4     7A 00 00 FF 
01ea8     AC E4 05 F1 | 	add	objptr, ##62636
01eac     F2 30 0A FB | 	rdlong	local10, objptr wz
01eb0     7A 00 00 FF 
01eb4     AC E4 85 F1 | 	sub	objptr, ##62636
01eb8     48 00 90 AD |  if_e	jmp	#LR__0095
01ebc     7A 00 00 FF 
01ec0     B0 E4 05 F1 | 	add	objptr, ##62640
01ec4     F2 34 0A FB | 	rdlong	local12, objptr wz
01ec8     7A 00 00 FF 
01ecc     B0 E4 85 F1 | 	sub	objptr, ##62640
01ed0     30 00 90 AD |  if_e	jmp	#LR__0095
01ed4     12 27 02 F6 | 	mov	local05, local04
01ed8     13 31 02 F6 | 	mov	local10, local05
01edc     03 30 66 F0 | 	shl	local10, #3
01ee0     53 00 00 FF 
01ee4     E0 E5 05 F1 | 	add	objptr, ##42976
01ee8     F2 30 02 F1 | 	add	local10, objptr
01eec     04 30 06 F1 | 	add	local10, #4
01ef0     01 00 80 FF 
01ef4     18 01 68 FC | 	wrlong	##512, local10
01ef8     53 00 00 FF 
01efc     E0 E5 85 F1 | 	sub	objptr, ##42976
01f00     20 02 90 FD | 	jmp	#LR__0102
01f04                 | LR__0095
01f04                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01f04     7A 00 00 FF 
01f08     A8 E4 05 F1 | 	add	objptr, ##62632
01f0c     F2 1E 0A FB | 	rdlong	local01, objptr wz
01f10     7A 00 00 FF 
01f14     A8 E4 85 F1 | 	sub	objptr, ##62632
01f18     64 00 90 AD |  if_e	jmp	#LR__0096
01f1c     7A 00 00 FF 
01f20     AC E4 05 F1 | 	add	objptr, ##62636
01f24     F2 30 0A FB | 	rdlong	local10, objptr wz
01f28     7A 00 00 FF 
01f2c     AC E4 85 F1 | 	sub	objptr, ##62636
01f30     7A 00 00 5F 
01f34     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01f38     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01f3c     7A 00 00 5F 
01f40     B0 E4 85 51 |  if_ne	sub	objptr, ##62640
01f44     1A 2B 22 56 |  if_ne	not	local07, local12
01f48     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01f4c     30 00 90 AD |  if_e	jmp	#LR__0096
01f50     12 27 02 F6 | 	mov	local05, local04
01f54     13 31 02 F6 | 	mov	local10, local05
01f58     03 30 66 F0 | 	shl	local10, #3
01f5c     53 00 00 FF 
01f60     E0 E5 05 F1 | 	add	objptr, ##42976
01f64     F2 30 02 F1 | 	add	local10, objptr
01f68     04 30 06 F1 | 	add	local10, #4
01f6c     01 00 80 FF 
01f70     18 03 68 FC | 	wrlong	##513, local10
01f74     53 00 00 FF 
01f78     E0 E5 85 F1 | 	sub	objptr, ##42976
01f7c     A4 01 90 FD | 	jmp	#LR__0102
01f80                 | LR__0096
01f80                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01f80     7A 00 00 FF 
01f84     A8 E4 05 F1 | 	add	objptr, ##62632
01f88     F2 1E 0A FB | 	rdlong	local01, objptr wz
01f8c     7A 00 00 FF 
01f90     A8 E4 85 F1 | 	sub	objptr, ##62632
01f94     7A 00 00 5F 
01f98     AC E4 05 51 |  if_ne	add	objptr, ##62636
01f9c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01fa0     7A 00 00 5F 
01fa4     AC E4 85 51 |  if_ne	sub	objptr, ##62636
01fa8     18 31 22 56 |  if_ne	not	local10, local10
01fac     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
01fb0     7A 00 00 5F 
01fb4     B0 E4 05 51 |  if_ne	add	objptr, ##62640
01fb8     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01fbc     7A 00 00 5F 
01fc0     B0 E4 85 51 |  if_ne	sub	objptr, ##62640
01fc4     1A 2B 22 56 |  if_ne	not	local07, local12
01fc8     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01fcc     30 00 90 AD |  if_e	jmp	#LR__0097
01fd0     12 27 02 F6 | 	mov	local05, local04
01fd4     13 31 02 F6 | 	mov	local10, local05
01fd8     03 30 66 F0 | 	shl	local10, #3
01fdc     53 00 00 FF 
01fe0     E0 E5 05 F1 | 	add	objptr, ##42976
01fe4     F2 30 02 F1 | 	add	local10, objptr
01fe8     04 30 06 F1 | 	add	local10, #4
01fec     01 00 80 FF 
01ff0     18 05 68 FC | 	wrlong	##514, local10
01ff4     53 00 00 FF 
01ff8     E0 E5 85 F1 | 	sub	objptr, ##42976
01ffc     24 01 90 FD | 	jmp	#LR__0102
02000                 | LR__0097
02000                 | ' 
02000                 | ' if isstring(lparts(i).part$) then 
02000     12 29 02 F6 | 	mov	local06, local04
02004     03 28 66 F0 | 	shl	local06, #3
02008     53 00 00 FF 
0200c     E0 E5 05 F1 | 	add	objptr, ##42976
02010     F2 28 02 F1 | 	add	local06, objptr
02014     14 13 02 FB | 	rdlong	arg01, local06
02018     53 00 00 FF 
0201c     E0 E5 85 F1 | 	sub	objptr, ##42976
02020     E4 26 B0 FD | 	call	#_isstring
02024     00 FA 0D F2 | 	cmp	result1, #0 wz
02028     9C 00 90 AD |  if_e	jmp	#LR__0100
0202c     12 31 02 F6 | 	mov	local10, local04
02030     03 30 66 F0 | 	shl	local10, #3
02034     53 00 00 FF 
02038     E0 E5 05 F1 | 	add	objptr, ##42976
0203c     F2 30 02 F1 | 	add	local10, objptr
02040     04 30 06 F1 | 	add	local10, #4
02044     01 00 80 FF 
02048     18 07 68 FC | 	wrlong	##515, local10
0204c     12 27 02 F6 | 	mov	local05, local04
02050     13 31 02 F6 | 	mov	local10, local05
02054     03 30 66 F0 | 	shl	local10, #3
02058     F2 30 02 F1 | 	add	local10, objptr
0205c     12 39 02 F6 | 	mov	local14, local04
02060     03 38 66 F0 | 	shl	local14, #3
02064     F2 38 02 F1 | 	add	local14, objptr
02068     1C 2B 02 FB | 	rdlong	local07, local14
0206c     02 14 06 F6 | 	mov	arg02, #2
02070     12 4D 02 F6 | 	mov	local24, local04
02074     26 45 02 F6 | 	mov	local20, local24
02078     22 47 02 F6 | 	mov	local21, local20
0207c     03 46 66 F0 | 	shl	local21, #3
02080     F2 48 02 F6 | 	mov	local22, objptr
02084     F2 46 02 F1 | 	add	local21, objptr
02088     23 13 02 FB | 	rdlong	arg01, local21
0208c     53 00 00 FF 
02090     E0 E5 85 F1 | 	sub	objptr, ##42976
02094     09 2D 02 F6 | 	mov	local08, arg01
02098     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
0209c                 | LR__0098
0209c     16 FB C9 FA | 	rdbyte	result1, local08 wz
020a0     01 2C 06 51 |  if_ne	add	local08, #1
020a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
020a8                 | LR__0099
020a8     09 2D 82 F1 | 	sub	local08, arg01
020ac     16 37 02 F6 | 	mov	local13, local08
020b0     1B 17 02 F6 | 	mov	arg03, local13
020b4     02 16 86 F1 | 	sub	arg03, #2
020b8     15 13 02 F6 | 	mov	arg01, local07
020bc     2C 89 B1 FD | 	call	#__system__Mid_S
020c0     18 FB 61 FC | 	wrlong	result1, local10
020c4     5C 00 90 FD | 	jmp	#LR__0102
020c8                 | LR__0100
020c8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
020c8     12 27 02 F6 | 	mov	local05, local04
020cc     13 29 02 F6 | 	mov	local06, local05
020d0     03 28 66 F0 | 	shl	local06, #3
020d4     53 00 00 FF 
020d8     E0 E5 05 F1 | 	add	objptr, ##42976
020dc     F2 28 02 F1 | 	add	local06, objptr
020e0     14 13 02 FB | 	rdlong	arg01, local06
020e4     53 00 00 FF 
020e8     E0 E5 85 F1 | 	sub	objptr, ##42976
020ec     B4 1E B0 FD | 	call	#_isname
020f0     00 FA 0D F2 | 	cmp	result1, #0 wz
020f4     2C 00 90 AD |  if_e	jmp	#LR__0101
020f8     12 27 02 F6 | 	mov	local05, local04
020fc     13 31 02 F6 | 	mov	local10, local05
02100     03 30 66 F0 | 	shl	local10, #3
02104     53 00 00 FF 
02108     E0 E5 05 F1 | 	add	objptr, ##42976
0210c     F2 30 02 F1 | 	add	local10, objptr
02110     04 30 06 F1 | 	add	local10, #4
02114     01 00 80 FF 
02118     18 09 68 FC | 	wrlong	##516, local10
0211c     53 00 00 FF 
02120     E0 E5 85 F1 | 	sub	objptr, ##42976
02124                 | LR__0101
02124                 | LR__0102
02124     01 24 06 F1 | 	add	local04, #1
02128     88 FA 9F FD | 	jmp	#LR__0094
0212c                 | LR__0103
0212c     1E 31 02 F6 | 	mov	local10, local16
02130     03 30 66 F0 | 	shl	local10, #3
02134     53 00 00 FF 
02138     E0 E5 05 F1 | 	add	objptr, ##42976
0213c     F2 30 02 F1 | 	add	local10, objptr
02140     04 30 06 F1 | 	add	local10, #4
02144     18 FD 6B FC | 	wrlong	#510, local10
02148     1E 31 02 F6 | 	mov	local10, local16
0214c     03 30 66 F0 | 	shl	local10, #3
02150     F2 30 02 F1 | 	add	local10, objptr
02154     3E 01 00 FF 
02158     B7 2A 06 F6 | 	mov	local07, ##@LR__4320
0215c     18 2B 62 FC | 	wrlong	local07, local10
02160     10 00 00 FF 
02164     54 E4 05 F1 | 	add	objptr, ##8276
02168     F2 3C 62 FC | 	wrlong	local16, objptr
0216c                 | ' 
0216c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0216c                 | ' 
0216c                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
0216c                 | ' if lparts(0).token=token_decimal then let addptr=1 else let addptr=0
0216c     10 00 00 FF 
02170     50 E4 85 F1 | 	sub	objptr, ##8272
02174     F2 1E 02 FB | 	rdlong	local01, objptr
02178     53 00 00 FF 
0217c     E4 E5 85 F1 | 	sub	objptr, ##42980
02180     01 00 00 FF 
02184     00 1E 0E F2 | 	cmp	local01, ##512 wz
02188     7A 00 00 AF 
0218c     B4 E4 05 A1 |  if_e	add	objptr, ##62644
02190     F2 02 68 AC |  if_e	wrlong	#1, objptr
02194     7A 00 00 FF 
02198     B4 E4 C5 F3 | 	sumz	objptr, ##62644
0219c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
021a0     7A 00 00 5F 
021a4     B4 E4 85 51 |  if_ne	sub	objptr, ##62644
021a8     7A 00 00 FF 
021ac     B4 E4 05 F1 | 	add	objptr, ##62644
021b0     F2 28 02 FB | 	rdlong	local06, objptr
021b4     03 28 66 F0 | 	shl	local06, #3
021b8     26 00 00 FF 
021bc     D4 E4 85 F1 | 	sub	objptr, ##19668
021c0     F2 28 02 F1 | 	add	local06, objptr
021c4     14 35 02 FB | 	rdlong	local12, local06
021c8     26 00 00 FF 
021cc     D8 E4 05 F1 | 	add	objptr, ##19672
021d0     F2 34 62 FC | 	wrlong	local12, objptr
021d4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
021d4     7A 00 00 FF 
021d8     B8 E4 85 F1 | 	sub	objptr, ##62648
021dc     3E 01 00 FF 
021e0     B8 14 06 F6 | 	mov	arg02, ##@LR__4321
021e4     1A 13 02 F6 | 	mov	arg01, local12
021e8     04 67 B1 FD | 	call	#__system___string_cmp
021ec     00 FA 0D F2 | 	cmp	result1, #0 wz
021f0     D8 00 90 AD |  if_e	jmp	#LR__0104
021f4     7A 00 00 FF 
021f8     B8 E4 05 F1 | 	add	objptr, ##62648
021fc     F2 12 02 FB | 	rdlong	arg01, objptr
02200     7A 00 00 FF 
02204     B8 E4 85 F1 | 	sub	objptr, ##62648
02208     3E 01 00 FF 
0220c     BD 14 06 F6 | 	mov	arg02, ##@LR__4322
02210     DC 66 B1 FD | 	call	#__system___string_cmp
02214     00 FA 0D F2 | 	cmp	result1, #0 wz
02218     B0 00 90 AD |  if_e	jmp	#LR__0104
0221c     7A 00 00 FF 
02220     B8 E4 05 F1 | 	add	objptr, ##62648
02224     F2 12 02 FB | 	rdlong	arg01, objptr
02228     7A 00 00 FF 
0222c     B8 E4 85 F1 | 	sub	objptr, ##62648
02230     3E 01 00 FF 
02234     C2 14 06 F6 | 	mov	arg02, ##@LR__4323
02238     B4 66 B1 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     88 00 90 AD |  if_e	jmp	#LR__0104
02244     7A 00 00 FF 
02248     B8 E4 05 F1 | 	add	objptr, ##62648
0224c     F2 12 02 FB | 	rdlong	arg01, objptr
02250     7A 00 00 FF 
02254     B8 E4 85 F1 | 	sub	objptr, ##62648
02258     3E 01 00 FF 
0225c     C7 34 06 F6 | 	mov	local12, ##@LR__4324
02260     1A 15 02 F6 | 	mov	arg02, local12
02264     88 66 B1 FD | 	call	#__system___string_cmp
02268     00 FA 0D F2 | 	cmp	result1, #0 wz
0226c     5C 00 90 AD |  if_e	jmp	#LR__0104
02270     7A 00 00 FF 
02274     B8 E4 05 F1 | 	add	objptr, ##62648
02278     F2 12 02 FB | 	rdlong	arg01, objptr
0227c     7A 00 00 FF 
02280     B8 E4 85 F1 | 	sub	objptr, ##62648
02284     3E 01 00 FF 
02288     CB 34 06 F6 | 	mov	local12, ##@LR__4325
0228c     1A 15 02 F6 | 	mov	arg02, local12
02290     5C 66 B1 FD | 	call	#__system___string_cmp
02294     00 FA 0D F2 | 	cmp	result1, #0 wz
02298     30 00 90 AD |  if_e	jmp	#LR__0104
0229c     7A 00 00 FF 
022a0     B8 E4 05 F1 | 	add	objptr, ##62648
022a4     F2 12 02 FB | 	rdlong	arg01, objptr
022a8     7A 00 00 FF 
022ac     B8 E4 85 F1 | 	sub	objptr, ##62648
022b0     3E 01 00 FF 
022b4     CE 38 06 F6 | 	mov	local14, ##@LR__4326
022b8     1C 33 02 F6 | 	mov	local11, local14
022bc     19 15 02 F6 | 	mov	arg02, local11
022c0     2C 66 B1 FD | 	call	#__system___string_cmp
022c4     FD 34 0A F6 | 	mov	local12, result1 wz
022c8     90 00 90 5D |  if_ne	jmp	#LR__0105
022cc                 | LR__0104
022cc     7A 00 00 FF 
022d0     B4 E4 05 F1 | 	add	objptr, ##62644
022d4     F2 38 02 FB | 	rdlong	local14, objptr
022d8     1C 33 02 F6 | 	mov	local11, local14
022dc     01 32 06 F1 | 	add	local11, #1
022e0     19 37 02 F6 | 	mov	local13, local11
022e4     1B 4D 02 F6 | 	mov	local24, local13
022e8     03 4C 66 F0 | 	shl	local24, #3
022ec     26 00 00 FF 
022f0     D4 E4 85 F1 | 	sub	objptr, ##19668
022f4     F2 44 02 F6 | 	mov	local20, objptr
022f8     F2 4C 02 F1 | 	add	local24, objptr
022fc     04 4C 06 F1 | 	add	local24, #4
02300     26 49 02 FB | 	rdlong	local22, local24
02304     04 4C 86 F1 | 	sub	local24, #4
02308     24 47 02 F6 | 	mov	local21, local22
0230c     01 00 00 FF 
02310     04 46 0E F2 | 	cmp	local21, ##516 wz
02314     53 00 00 FF 
02318     E0 E5 85 F1 | 	sub	objptr, ##42976
0231c     3C 00 90 5D |  if_ne	jmp	#LR__0105
02320     7A 00 00 FF 
02324     B4 E4 05 F1 | 	add	objptr, ##62644
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     D4 E4 85 F1 | 	sub	objptr, ##19668
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     01 00 00 FF 
02344     03 34 06 F6 | 	mov	local12, ##515
02348     04 28 06 F1 | 	add	local06, #4
0234c     01 00 80 FF 
02350     14 07 68 FC | 	wrlong	##515, local06
02354     53 00 00 FF 
02358     E0 E5 85 F1 | 	sub	objptr, ##42976
0235c                 | LR__0105
0235c                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
0235c     7A 00 00 FF 
02360     B8 E4 05 F1 | 	add	objptr, ##62648
02364     F2 12 02 FB | 	rdlong	arg01, objptr
02368     7A 00 00 FF 
0236c     B8 E4 85 F1 | 	sub	objptr, ##62648
02370     3E 01 00 FF 
02374     D2 14 06 F6 | 	mov	arg02, ##@LR__4327
02378     74 65 B1 FD | 	call	#__system___string_cmp
0237c     00 FA 0D F2 | 	cmp	result1, #0 wz
02380     54 00 90 AD |  if_e	jmp	#LR__0106
02384     7A 00 00 FF 
02388     B8 E4 05 F1 | 	add	objptr, ##62648
0238c     F2 12 02 FB | 	rdlong	arg01, objptr
02390     7A 00 00 FF 
02394     B8 E4 85 F1 | 	sub	objptr, ##62648
02398     3E 01 00 FF 
0239c     D8 14 06 F6 | 	mov	arg02, ##@LR__4328
023a0     4C 65 B1 FD | 	call	#__system___string_cmp
023a4     00 FA 0D F2 | 	cmp	result1, #0 wz
023a8     2C 00 90 AD |  if_e	jmp	#LR__0106
023ac     7A 00 00 FF 
023b0     B8 E4 05 F1 | 	add	objptr, ##62648
023b4     F2 12 02 FB | 	rdlong	arg01, objptr
023b8     7A 00 00 FF 
023bc     B8 E4 85 F1 | 	sub	objptr, ##62648
023c0     3E 01 00 FF 
023c4     DF 2A 06 F6 | 	mov	local07, ##@LR__4329
023c8     15 15 02 F6 | 	mov	arg02, local07
023cc     20 65 B1 FD | 	call	#__system___string_cmp
023d0     00 FA 0D F2 | 	cmp	result1, #0 wz
023d4     9C 01 90 5D |  if_ne	jmp	#LR__0109
023d8                 | LR__0106
023d8     7A 00 00 FF 
023dc     B4 E4 05 F1 | 	add	objptr, ##62644
023e0     F2 2A 02 FB | 	rdlong	local07, objptr
023e4     15 35 02 F6 | 	mov	local12, local07
023e8     01 34 06 F1 | 	add	local12, #1
023ec     1A 33 02 F6 | 	mov	local11, local12
023f0     03 32 66 F0 | 	shl	local11, #3
023f4     26 00 00 FF 
023f8     D4 E4 85 F1 | 	sub	objptr, ##19668
023fc     F2 38 02 F6 | 	mov	local14, objptr
02400     F2 32 02 F1 | 	add	local11, objptr
02404     04 32 06 F1 | 	add	local11, #4
02408     19 4D 02 FB | 	rdlong	local24, local11
0240c     04 32 86 F1 | 	sub	local11, #4
02410     26 37 02 F6 | 	mov	local13, local24
02414     01 00 00 FF 
02418     04 36 0E F2 | 	cmp	local13, ##516 wz
0241c     53 00 00 FF 
02420     E0 E5 85 F1 | 	sub	objptr, ##42976
02424     4C 01 90 5D |  if_ne	jmp	#LR__0109
02428                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02428     7A 00 00 FF 
0242c     B4 E4 05 F1 | 	add	objptr, ##62644
02430     F2 2A 02 FB | 	rdlong	local07, objptr
02434     01 2A 06 F1 | 	add	local07, #1
02438     03 2A 66 F0 | 	shl	local07, #3
0243c     26 00 00 FF 
02440     D4 E4 85 F1 | 	sub	objptr, ##19668
02444     F2 2A 02 F1 | 	add	local07, objptr
02448     15 13 02 FB | 	rdlong	arg01, local07
0244c     3E 01 00 FF 
02450     E5 14 06 F6 | 	mov	arg02, ##@LR__4330
02454     53 00 00 FF 
02458     E0 E5 85 F1 | 	sub	objptr, ##42976
0245c     90 64 B1 FD | 	call	#__system___string_cmp
02460     00 FA 0D F2 | 	cmp	result1, #0 wz
02464     60 00 90 5D |  if_ne	jmp	#LR__0107
02468     7A 00 00 FF 
0246c     B4 E4 05 F1 | 	add	objptr, ##62644
02470     F2 28 02 FB | 	rdlong	local06, objptr
02474     01 28 06 F1 | 	add	local06, #1
02478     03 28 66 F0 | 	shl	local06, #3
0247c     26 00 00 FF 
02480     D4 E4 85 F1 | 	sub	objptr, ##19668
02484     F2 28 02 F1 | 	add	local06, objptr
02488     3E 01 00 FF 
0248c     E8 34 06 F6 | 	mov	local12, ##@LR__4331
02490     14 35 62 FC | 	wrlong	local12, local06
02494     26 00 00 FF 
02498     D4 E4 05 F1 | 	add	objptr, ##19668
0249c     F2 28 02 FB | 	rdlong	local06, objptr
024a0     01 28 06 F1 | 	add	local06, #1
024a4     03 28 66 F0 | 	shl	local06, #3
024a8     26 00 00 FF 
024ac     D4 E4 85 F1 | 	sub	objptr, ##19668
024b0     F2 28 02 F1 | 	add	local06, objptr
024b4     04 28 06 F1 | 	add	local06, #4
024b8     01 00 80 FF 
024bc     14 01 68 FC | 	wrlong	##512, local06
024c0     53 00 00 FF 
024c4     E0 E5 85 F1 | 	sub	objptr, ##42976
024c8                 | LR__0107
024c8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
024c8     7A 00 00 FF 
024cc     B4 E4 05 F1 | 	add	objptr, ##62644
024d0     F2 2A 02 FB | 	rdlong	local07, objptr
024d4     01 2A 06 F1 | 	add	local07, #1
024d8     03 2A 66 F0 | 	shl	local07, #3
024dc     26 00 00 FF 
024e0     D4 E4 85 F1 | 	sub	objptr, ##19668
024e4     F2 34 02 F6 | 	mov	local12, objptr
024e8     F2 2A 02 F1 | 	add	local07, objptr
024ec     15 13 02 FB | 	rdlong	arg01, local07
024f0     3E 01 00 FF 
024f4     EA 14 06 F6 | 	mov	arg02, ##@LR__4332
024f8     53 00 00 FF 
024fc     E0 E5 85 F1 | 	sub	objptr, ##42976
02500     EC 63 B1 FD | 	call	#__system___string_cmp
02504     00 FA 0D F2 | 	cmp	result1, #0 wz
02508     68 00 90 5D |  if_ne	jmp	#LR__0108
0250c     7A 00 00 FF 
02510     B4 E4 05 F1 | 	add	objptr, ##62644
02514     F2 28 02 FB | 	rdlong	local06, objptr
02518     01 28 06 F1 | 	add	local06, #1
0251c     03 28 66 F0 | 	shl	local06, #3
02520     26 00 00 FF 
02524     D4 E4 85 F1 | 	sub	objptr, ##19668
02528     F2 28 02 F1 | 	add	local06, objptr
0252c     3E 01 00 FF 
02530     EE 34 06 F6 | 	mov	local12, ##@LR__4333
02534     14 35 62 FC | 	wrlong	local12, local06
02538     26 00 00 FF 
0253c     D4 E4 05 F1 | 	add	objptr, ##19668
02540     F2 28 02 FB | 	rdlong	local06, objptr
02544     01 28 06 F1 | 	add	local06, #1
02548     03 28 66 F0 | 	shl	local06, #3
0254c     26 00 00 FF 
02550     D4 E4 85 F1 | 	sub	objptr, ##19668
02554     F2 2A 02 F6 | 	mov	local07, objptr
02558     F2 28 02 F1 | 	add	local06, objptr
0255c     09 34 C6 F9 | 	decod	local12, #9
02560     04 28 06 F1 | 	add	local06, #4
02564     01 00 80 FF 
02568     14 01 68 FC | 	wrlong	##512, local06
0256c     53 00 00 FF 
02570     E0 E5 85 F1 | 	sub	objptr, ##42976
02574                 | LR__0108
02574                 | LR__0109
02574                 | ' if (lp$="mode" orelse lp$="m.") andalso lparts(addptr+1).token=token_name then
02574     7A 00 00 FF 
02578     B8 E4 05 F1 | 	add	objptr, ##62648
0257c     F2 12 02 FB | 	rdlong	arg01, objptr
02580     7A 00 00 FF 
02584     B8 E4 85 F1 | 	sub	objptr, ##62648
02588     3E 01 00 FF 
0258c     F0 14 06 F6 | 	mov	arg02, ##@LR__4334
02590     5C 63 B1 FD | 	call	#__system___string_cmp
02594     00 FA 0D F2 | 	cmp	result1, #0 wz
02598     30 00 90 AD |  if_e	jmp	#LR__0110
0259c     7A 00 00 FF 
025a0     B8 E4 05 F1 | 	add	objptr, ##62648
025a4     F2 12 02 FB | 	rdlong	arg01, objptr
025a8     7A 00 00 FF 
025ac     B8 E4 85 F1 | 	sub	objptr, ##62648
025b0     3E 01 00 FF 
025b4     F5 28 06 F6 | 	mov	local06, ##@LR__4335
025b8     14 31 02 F6 | 	mov	local10, local06
025bc     18 15 02 F6 | 	mov	arg02, local10
025c0     2C 63 B1 FD | 	call	#__system___string_cmp
025c4     00 FA 0D F2 | 	cmp	result1, #0 wz
025c8     90 03 90 5D |  if_ne	jmp	#LR__0116
025cc                 | LR__0110
025cc     7A 00 00 FF 
025d0     B4 E4 05 F1 | 	add	objptr, ##62644
025d4     F2 28 02 FB | 	rdlong	local06, objptr
025d8     14 31 02 F6 | 	mov	local10, local06
025dc     01 30 06 F1 | 	add	local10, #1
025e0     18 2B 02 F6 | 	mov	local07, local10
025e4     15 35 02 F6 | 	mov	local12, local07
025e8     03 34 66 F0 | 	shl	local12, #3
025ec     26 00 00 FF 
025f0     D4 E4 85 F1 | 	sub	objptr, ##19668
025f4     F2 32 02 F6 | 	mov	local11, objptr
025f8     F2 34 02 F1 | 	add	local12, objptr
025fc     04 34 06 F1 | 	add	local12, #4
02600     1A 37 02 FB | 	rdlong	local13, local12
02604     04 34 86 F1 | 	sub	local12, #4
02608     1B 39 02 F6 | 	mov	local14, local13
0260c     01 00 00 FF 
02610     04 38 0E F2 | 	cmp	local14, ##516 wz
02614     53 00 00 FF 
02618     E0 E5 85 F1 | 	sub	objptr, ##42976
0261c     3C 03 90 5D |  if_ne	jmp	#LR__0116
02620                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02620     7A 00 00 FF 
02624     B4 E4 05 F1 | 	add	objptr, ##62644
02628     F2 2A 02 FB | 	rdlong	local07, objptr
0262c     01 2A 06 F1 | 	add	local07, #1
02630     03 2A 66 F0 | 	shl	local07, #3
02634     26 00 00 FF 
02638     D4 E4 85 F1 | 	sub	objptr, ##19668
0263c     F2 2A 02 F1 | 	add	local07, objptr
02640     15 13 02 FB | 	rdlong	arg01, local07
02644     3E 01 00 FF 
02648     F8 14 06 F6 | 	mov	arg02, ##@LR__4336
0264c     53 00 00 FF 
02650     E0 E5 85 F1 | 	sub	objptr, ##42976
02654     98 62 B1 FD | 	call	#__system___string_cmp
02658     00 FA 0D F2 | 	cmp	result1, #0 wz
0265c     60 00 90 5D |  if_ne	jmp	#LR__0111
02660     7A 00 00 FF 
02664     B4 E4 05 F1 | 	add	objptr, ##62644
02668     F2 28 02 FB | 	rdlong	local06, objptr
0266c     01 28 06 F1 | 	add	local06, #1
02670     03 28 66 F0 | 	shl	local06, #3
02674     26 00 00 FF 
02678     D4 E4 85 F1 | 	sub	objptr, ##19668
0267c     F2 28 02 F1 | 	add	local06, objptr
02680     3E 01 00 FF 
02684     FE 34 06 F6 | 	mov	local12, ##@LR__4337
02688     14 35 62 FC | 	wrlong	local12, local06
0268c     26 00 00 FF 
02690     D4 E4 05 F1 | 	add	objptr, ##19668
02694     F2 28 02 FB | 	rdlong	local06, objptr
02698     01 28 06 F1 | 	add	local06, #1
0269c     03 28 66 F0 | 	shl	local06, #3
026a0     26 00 00 FF 
026a4     D4 E4 85 F1 | 	sub	objptr, ##19668
026a8     F2 28 02 F1 | 	add	local06, objptr
026ac     04 28 06 F1 | 	add	local06, #4
026b0     01 00 80 FF 
026b4     14 01 68 FC | 	wrlong	##512, local06
026b8     53 00 00 FF 
026bc     E0 E5 85 F1 | 	sub	objptr, ##42976
026c0                 | LR__0111
026c0                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
026c0     7A 00 00 FF 
026c4     B4 E4 05 F1 | 	add	objptr, ##62644
026c8     F2 2A 02 FB | 	rdlong	local07, objptr
026cc     01 2A 06 F1 | 	add	local07, #1
026d0     03 2A 66 F0 | 	shl	local07, #3
026d4     26 00 00 FF 
026d8     D4 E4 85 F1 | 	sub	objptr, ##19668
026dc     F2 2A 02 F1 | 	add	local07, objptr
026e0     15 13 02 FB | 	rdlong	arg01, local07
026e4     3E 01 00 FF 
026e8     00 15 06 F6 | 	mov	arg02, ##@LR__4338
026ec     53 00 00 FF 
026f0     E0 E5 85 F1 | 	sub	objptr, ##42976
026f4     F8 61 B1 FD | 	call	#__system___string_cmp
026f8     00 FA 0D F2 | 	cmp	result1, #0 wz
026fc     60 00 90 5D |  if_ne	jmp	#LR__0112
02700     7A 00 00 FF 
02704     B4 E4 05 F1 | 	add	objptr, ##62644
02708     F2 28 02 FB | 	rdlong	local06, objptr
0270c     01 28 06 F1 | 	add	local06, #1
02710     03 28 66 F0 | 	shl	local06, #3
02714     26 00 00 FF 
02718     D4 E4 85 F1 | 	sub	objptr, ##19668
0271c     F2 28 02 F1 | 	add	local06, objptr
02720     3E 01 00 FF 
02724     09 35 06 F6 | 	mov	local12, ##@LR__4339
02728     14 35 62 FC | 	wrlong	local12, local06
0272c     26 00 00 FF 
02730     D4 E4 05 F1 | 	add	objptr, ##19668
02734     F2 28 02 FB | 	rdlong	local06, objptr
02738     01 28 06 F1 | 	add	local06, #1
0273c     03 28 66 F0 | 	shl	local06, #3
02740     26 00 00 FF 
02744     D4 E4 85 F1 | 	sub	objptr, ##19668
02748     F2 28 02 F1 | 	add	local06, objptr
0274c     04 28 06 F1 | 	add	local06, #4
02750     01 00 80 FF 
02754     14 01 68 FC | 	wrlong	##512, local06
02758     53 00 00 FF 
0275c     E0 E5 85 F1 | 	sub	objptr, ##42976
02760                 | LR__0112
02760                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2" :lparts(addptr+1).token=token_decimal
02760     7A 00 00 FF 
02764     B4 E4 05 F1 | 	add	objptr, ##62644
02768     F2 2A 02 FB | 	rdlong	local07, objptr
0276c     01 2A 06 F1 | 	add	local07, #1
02770     03 2A 66 F0 | 	shl	local07, #3
02774     26 00 00 FF 
02778     D4 E4 85 F1 | 	sub	objptr, ##19668
0277c     F2 2A 02 F1 | 	add	local07, objptr
02780     15 13 02 FB | 	rdlong	arg01, local07
02784     3E 01 00 FF 
02788     0B 15 06 F6 | 	mov	arg02, ##@LR__4340
0278c     53 00 00 FF 
02790     E0 E5 85 F1 | 	sub	objptr, ##42976
02794     58 61 B1 FD | 	call	#__system___string_cmp
02798     00 FA 0D F2 | 	cmp	result1, #0 wz
0279c     60 00 90 5D |  if_ne	jmp	#LR__0113
027a0     7A 00 00 FF 
027a4     B4 E4 05 F1 | 	add	objptr, ##62644
027a8     F2 28 02 FB | 	rdlong	local06, objptr
027ac     01 28 06 F1 | 	add	local06, #1
027b0     03 28 66 F0 | 	shl	local06, #3
027b4     26 00 00 FF 
027b8     D4 E4 85 F1 | 	sub	objptr, ##19668
027bc     F2 28 02 F1 | 	add	local06, objptr
027c0     3E 01 00 FF 
027c4     14 35 06 F6 | 	mov	local12, ##@LR__4341
027c8     14 35 62 FC | 	wrlong	local12, local06
027cc     26 00 00 FF 
027d0     D4 E4 05 F1 | 	add	objptr, ##19668
027d4     F2 28 02 FB | 	rdlong	local06, objptr
027d8     01 28 06 F1 | 	add	local06, #1
027dc     03 28 66 F0 | 	shl	local06, #3
027e0     26 00 00 FF 
027e4     D4 E4 85 F1 | 	sub	objptr, ##19668
027e8     F2 28 02 F1 | 	add	local06, objptr
027ec     04 28 06 F1 | 	add	local06, #4
027f0     01 00 80 FF 
027f4     14 01 68 FC | 	wrlong	##512, local06
027f8     53 00 00 FF 
027fc     E0 E5 85 F1 | 	sub	objptr, ##42976
02800                 | LR__0113
02800                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3" :lparts(addptr+1).token=token_decimal
02800     7A 00 00 FF 
02804     B4 E4 05 F1 | 	add	objptr, ##62644
02808     F2 2A 02 FB | 	rdlong	local07, objptr
0280c     01 2A 06 F1 | 	add	local07, #1
02810     03 2A 66 F0 | 	shl	local07, #3
02814     26 00 00 FF 
02818     D4 E4 85 F1 | 	sub	objptr, ##19668
0281c     F2 2A 02 F1 | 	add	local07, objptr
02820     15 13 02 FB | 	rdlong	arg01, local07
02824     3E 01 00 FF 
02828     16 15 06 F6 | 	mov	arg02, ##@LR__4342
0282c     53 00 00 FF 
02830     E0 E5 85 F1 | 	sub	objptr, ##42976
02834     B8 60 B1 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     60 00 90 5D |  if_ne	jmp	#LR__0114
02840     7A 00 00 FF 
02844     B4 E4 05 F1 | 	add	objptr, ##62644
02848     F2 28 02 FB | 	rdlong	local06, objptr
0284c     01 28 06 F1 | 	add	local06, #1
02850     03 28 66 F0 | 	shl	local06, #3
02854     26 00 00 FF 
02858     D4 E4 85 F1 | 	sub	objptr, ##19668
0285c     F2 28 02 F1 | 	add	local06, objptr
02860     3E 01 00 FF 
02864     1F 35 06 F6 | 	mov	local12, ##@LR__4343
02868     14 35 62 FC | 	wrlong	local12, local06
0286c     26 00 00 FF 
02870     D4 E4 05 F1 | 	add	objptr, ##19668
02874     F2 28 02 FB | 	rdlong	local06, objptr
02878     01 28 06 F1 | 	add	local06, #1
0287c     03 28 66 F0 | 	shl	local06, #3
02880     26 00 00 FF 
02884     D4 E4 85 F1 | 	sub	objptr, ##19668
02888     F2 28 02 F1 | 	add	local06, objptr
0288c     04 28 06 F1 | 	add	local06, #4
02890     01 00 80 FF 
02894     14 01 68 FC | 	wrlong	##512, local06
02898     53 00 00 FF 
0289c     E0 E5 85 F1 | 	sub	objptr, ##42976
028a0                 | LR__0114
028a0                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4" :lparts(addptr+1).token=token_decimal
028a0     7A 00 00 FF 
028a4     B4 E4 05 F1 | 	add	objptr, ##62644
028a8     F2 28 02 FB | 	rdlong	local06, objptr
028ac     01 28 06 F1 | 	add	local06, #1
028b0     14 2B 02 F6 | 	mov	local07, local06
028b4     03 2A 66 F0 | 	shl	local07, #3
028b8     26 00 00 FF 
028bc     D4 E4 85 F1 | 	sub	objptr, ##19668
028c0     F2 34 02 F6 | 	mov	local12, objptr
028c4     F2 2A 02 F1 | 	add	local07, objptr
028c8     15 13 02 FB | 	rdlong	arg01, local07
028cc     3E 01 00 FF 
028d0     21 31 06 F6 | 	mov	local10, ##@LR__4344
028d4     18 15 02 F6 | 	mov	arg02, local10
028d8     53 00 00 FF 
028dc     E0 E5 85 F1 | 	sub	objptr, ##42976
028e0     0C 60 B1 FD | 	call	#__system___string_cmp
028e4     00 FA 0D F2 | 	cmp	result1, #0 wz
028e8     70 00 90 5D |  if_ne	jmp	#LR__0115
028ec     7A 00 00 FF 
028f0     B4 E4 05 F1 | 	add	objptr, ##62644
028f4     F2 28 02 FB | 	rdlong	local06, objptr
028f8     01 28 06 F1 | 	add	local06, #1
028fc     03 28 66 F0 | 	shl	local06, #3
02900     26 00 00 FF 
02904     D4 E4 85 F1 | 	sub	objptr, ##19668
02908     F2 28 02 F1 | 	add	local06, objptr
0290c     3E 01 00 FF 
02910     24 35 06 F6 | 	mov	local12, ##@LR__4345
02914     14 35 62 FC | 	wrlong	local12, local06
02918     26 00 00 FF 
0291c     D4 E4 05 F1 | 	add	objptr, ##19668
02920     F2 30 02 FB | 	rdlong	local10, objptr
02924     01 30 06 F1 | 	add	local10, #1
02928     18 29 02 F6 | 	mov	local06, local10
0292c     03 28 66 F0 | 	shl	local06, #3
02930     26 00 00 FF 
02934     D4 E4 85 F1 | 	sub	objptr, ##19668
02938     F2 2A 02 F6 | 	mov	local07, objptr
0293c     F2 28 02 F1 | 	add	local06, objptr
02940     09 34 C6 F9 | 	decod	local12, #9
02944     04 28 06 F1 | 	add	local06, #4
02948     01 00 80 FF 
0294c     14 01 68 FC | 	wrlong	##512, local06
02950     04 28 86 F1 | 	sub	local06, #4
02954     53 00 00 FF 
02958     E0 E5 85 F1 | 	sub	objptr, ##42976
0295c                 | LR__0115
0295c                 | LR__0116
0295c                 | ' 
0295c                 | ' 
0295c                 | ' '2b determine a type of the line
0295c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
0295c     53 00 00 FF 
02960     E0 E5 05 F1 | 	add	objptr, ##42976
02964     F2 12 02 FB | 	rdlong	arg01, objptr
02968     53 00 00 FF 
0296c     E0 E5 85 F1 | 	sub	objptr, ##42976
02970     D4 1C B0 FD | 	call	#_isdec
02974     00 FA 0D F2 | 	cmp	result1, #0 wz
02978     20 00 90 AD |  if_e	jmp	#LR__0117
0297c     53 00 00 FF 
02980     E0 E5 05 F1 | 	add	objptr, ##42976
02984     F2 12 02 FB | 	rdlong	arg01, objptr
02988     53 00 00 FF 
0298c     E0 E5 85 F1 | 	sub	objptr, ##42976
02990     00 14 06 F6 | 	mov	arg02, #0
02994     8C 8F B1 FD | 	call	#__system____builtin_atoi
02998     FD 20 02 F6 | 	mov	local02, result1
0299c                 | LR__0117
0299c                 | ' 
0299c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
0299c     01 20 16 F2 | 	cmp	local02, #1 wc
029a0     2C 00 90 CD |  if_b	jmp	#LR__0118
029a4     01 3C 0E F2 | 	cmp	local16, #1 wz
029a8     55 00 00 AF 
029ac     F8 E5 05 A1 |  if_e	add	objptr, ##44024
029b0     F2 1E 02 AB |  if_e	rdlong	local01, objptr
029b4     55 00 00 AF 
029b8     F8 E5 85 A1 |  if_e	sub	objptr, ##44024
029bc     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
029c0     0C 00 90 5D |  if_ne	jmp	#LR__0118
029c4     10 13 02 F6 | 	mov	arg01, local02
029c8     A0 1D B0 FD | 	call	#_deleteline
029cc     C8 04 90 FD | 	jmp	#LR__0134
029d0                 | LR__0118
029d0                 | ' 
029d0                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
029d0     01 20 16 F2 | 	cmp	local02, #1 wc
029d4     E0 00 90 CD |  if_b	jmp	#LR__0121
029d8     55 00 00 FF 
029dc     F8 E5 05 F1 | 	add	objptr, ##44024
029e0     F2 1E 0A FB | 	rdlong	local01, objptr wz
029e4     55 00 00 FF 
029e8     F8 E5 85 F1 | 	sub	objptr, ##44024
029ec     20 00 90 AD |  if_e	jmp	#LR__0119
029f0     55 00 00 FF 
029f4     F8 E5 05 F1 | 	add	objptr, ##44024
029f8     F2 28 02 FB | 	rdlong	local06, objptr
029fc     55 00 00 FF 
02a00     F8 E5 85 F1 | 	sub	objptr, ##44024
02a04     14 31 02 F6 | 	mov	local10, local06
02a08     03 30 0E F2 | 	cmp	local10, #3 wz
02a0c     A8 00 90 5D |  if_ne	jmp	#LR__0121
02a10                 | LR__0119
02a10     53 00 00 FF 
02a14     F4 E5 05 F1 | 	add	objptr, ##42996
02a18     F2 34 02 FB | 	rdlong	local12, objptr
02a1c     53 00 00 FF 
02a20     F4 E5 85 F1 | 	sub	objptr, ##42996
02a24     1A 2B 02 F6 | 	mov	local07, local12
02a28     1B 2A 0E F2 | 	cmp	local07, #27 wz
02a2c     88 00 90 AD |  if_e	jmp	#LR__0121
02a30     55 00 00 FF 
02a34     F8 E5 05 F1 | 	add	objptr, ##44024
02a38     F2 16 02 FB | 	rdlong	arg03, objptr
02a3c     55 00 00 FF 
02a40     F8 E5 85 F1 | 	sub	objptr, ##44024
02a44     10 13 02 F6 | 	mov	arg01, local02
02a48     00 14 06 F6 | 	mov	arg02, #0
02a4c     E0 2F B0 FD | 	call	#_compile
02a50     FD 22 0A F6 | 	mov	local03, result1 wz
02a54                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02a54                 | '   if err<>0 then printerror(err): goto 104
02a54     0C 00 90 AD |  if_e	jmp	#LR__0120
02a58     11 13 02 F6 | 	mov	arg01, local03
02a5c     44 29 B1 FD | 	call	#_printerror
02a60     34 04 90 FD | 	jmp	#LR__0134
02a64                 | LR__0120
02a64                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02a64     7A 00 00 FF 
02a68     84 E4 05 F1 | 	add	objptr, ##62596
02a6c     F2 12 02 FB | 	rdlong	arg01, objptr
02a70     7A 00 00 FF 
02a74     84 E4 85 F1 | 	sub	objptr, ##62596
02a78     3E 01 00 FF 
02a7c     26 15 06 F6 | 	mov	arg02, ##@LR__4346
02a80     6C 5E B1 FD | 	call	#__system___string_cmp
02a84     00 FA 0D F2 | 	cmp	result1, #0 wz
02a88     0C 04 90 AD |  if_e	jmp	#LR__0134
02a8c     7A 00 00 FF 
02a90     84 E4 05 F1 | 	add	objptr, ##62596
02a94     F2 1E 02 FB | 	rdlong	local01, objptr
02a98     24 00 00 FF 
02a9c     94 E4 85 F1 | 	sub	objptr, ##18580
02aa0     F2 1E 62 FC | 	wrlong	local01, objptr
02aa4     08 E4 05 F1 | 	add	objptr, #8
02aa8     F2 08 68 FC | 	wrlong	#4, objptr
02aac     55 00 00 FF 
02ab0     F8 E5 85 F1 | 	sub	objptr, ##44024
02ab4     B0 DF 9F FD | 	jmp	#LR__0020
02ab8                 | LR__0121
02ab8                 | '       							
02ab8                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02ab8     01 20 16 F2 | 	cmp	local02, #1 wc
02abc     E4 00 90 CD |  if_b	jmp	#LR__0124
02ac0     55 00 00 FF 
02ac4     F8 E5 05 F1 | 	add	objptr, ##44024
02ac8     F2 1E 02 FB | 	rdlong	local01, objptr
02acc     55 00 00 FF 
02ad0     F8 E5 85 F1 | 	sub	objptr, ##44024
02ad4     01 1E 0E F2 | 	cmp	local01, #1 wz
02ad8     20 00 90 AD |  if_e	jmp	#LR__0122
02adc     55 00 00 FF 
02ae0     F8 E5 05 F1 | 	add	objptr, ##44024
02ae4     F2 28 02 FB | 	rdlong	local06, objptr
02ae8     55 00 00 FF 
02aec     F8 E5 85 F1 | 	sub	objptr, ##44024
02af0     14 31 02 F6 | 	mov	local10, local06
02af4     02 30 0E F2 | 	cmp	local10, #2 wz
02af8     A8 00 90 5D |  if_ne	jmp	#LR__0124
02afc                 | LR__0122
02afc     53 00 00 FF 
02b00     EC E5 05 F1 | 	add	objptr, ##42988
02b04     F2 34 02 FB | 	rdlong	local12, objptr
02b08     53 00 00 FF 
02b0c     EC E5 85 F1 | 	sub	objptr, ##42988
02b10     1A 2B 02 F6 | 	mov	local07, local12
02b14     1B 2A 0E F2 | 	cmp	local07, #27 wz
02b18     88 00 90 AD |  if_e	jmp	#LR__0124
02b1c     55 00 00 FF 
02b20     F8 E5 05 F1 | 	add	objptr, ##44024
02b24     F2 16 02 FB | 	rdlong	arg03, objptr
02b28     55 00 00 FF 
02b2c     F8 E5 85 F1 | 	sub	objptr, ##44024
02b30     10 13 02 F6 | 	mov	arg01, local02
02b34     00 14 06 F6 | 	mov	arg02, #0
02b38     F4 2E B0 FD | 	call	#_compile
02b3c     FD 22 0A F6 | 	mov	local03, result1 wz
02b40                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02b40                 | '   if err<>0 then printerror(err): goto 104
02b40     0C 00 90 AD |  if_e	jmp	#LR__0123
02b44     11 13 02 F6 | 	mov	arg01, local03
02b48     58 28 B1 FD | 	call	#_printerror
02b4c     48 03 90 FD | 	jmp	#LR__0134
02b50                 | LR__0123
02b50                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02b50     7A 00 00 FF 
02b54     84 E4 05 F1 | 	add	objptr, ##62596
02b58     F2 12 02 FB | 	rdlong	arg01, objptr
02b5c     7A 00 00 FF 
02b60     84 E4 85 F1 | 	sub	objptr, ##62596
02b64     3E 01 00 FF 
02b68     27 15 06 F6 | 	mov	arg02, ##@LR__4347
02b6c     80 5D B1 FD | 	call	#__system___string_cmp
02b70     00 FA 0D F2 | 	cmp	result1, #0 wz
02b74     20 03 90 AD |  if_e	jmp	#LR__0134
02b78     7A 00 00 FF 
02b7c     84 E4 05 F1 | 	add	objptr, ##62596
02b80     F2 1E 02 FB | 	rdlong	local01, objptr
02b84     24 00 00 FF 
02b88     94 E4 85 F1 | 	sub	objptr, ##18580
02b8c     F2 1E 62 FC | 	wrlong	local01, objptr
02b90     08 E4 05 F1 | 	add	objptr, #8
02b94     F2 08 68 FC | 	wrlong	#4, objptr
02b98     55 00 00 FF 
02b9c     F8 E5 85 F1 | 	sub	objptr, ##44024
02ba0     C4 DE 9F FD | 	jmp	#LR__0020
02ba4                 | LR__0124
02ba4                 | ' 							 
02ba4                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
02ba4     01 20 16 F2 | 	cmp	local02, #1 wc
02ba8     C0 00 90 CD |  if_b	jmp	#LR__0125
02bac     55 00 00 FF 
02bb0     F8 E5 05 F1 | 	add	objptr, ##44024
02bb4     F2 1E 0A FB | 	rdlong	local01, objptr wz
02bb8     55 00 00 FF 
02bbc     F8 E5 85 F1 | 	sub	objptr, ##44024
02bc0     55 00 00 5F 
02bc4     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02bc8     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02bcc     55 00 00 5F 
02bd0     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02bd4     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02bd8     53 00 00 AF 
02bdc     F4 E5 05 A1 |  if_e	add	objptr, ##42996
02be0     F2 34 02 AB |  if_e	rdlong	local12, objptr
02be4     53 00 00 AF 
02be8     F4 E5 85 A1 |  if_e	sub	objptr, ##42996
02bec     1A 2B 02 A6 |  if_e	mov	local07, local12
02bf0     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02bf4     74 00 90 5D |  if_ne	jmp	#LR__0125
02bf8     55 00 00 FF 
02bfc     F8 E5 05 F1 | 	add	objptr, ##44024
02c00     F2 16 02 FB | 	rdlong	arg03, objptr
02c04     55 00 00 FF 
02c08     F8 E5 85 F1 | 	sub	objptr, ##44024
02c0c     10 13 02 F6 | 	mov	arg01, local02
02c10     00 14 06 F6 | 	mov	arg02, #0
02c14     E8 2E B0 FD | 	call	#_compile_assign
02c18                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02c18                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02c18     7A 00 00 FF 
02c1c     84 E4 05 F1 | 	add	objptr, ##62596
02c20     F2 12 02 FB | 	rdlong	arg01, objptr
02c24     7A 00 00 FF 
02c28     84 E4 85 F1 | 	sub	objptr, ##62596
02c2c     3E 01 00 FF 
02c30     28 15 06 F6 | 	mov	arg02, ##@LR__4348
02c34     B8 5C B1 FD | 	call	#__system___string_cmp
02c38     00 FA 0D F2 | 	cmp	result1, #0 wz
02c3c     58 02 90 AD |  if_e	jmp	#LR__0134
02c40     7A 00 00 FF 
02c44     84 E4 05 F1 | 	add	objptr, ##62596
02c48     F2 1E 02 FB | 	rdlong	local01, objptr
02c4c     24 00 00 FF 
02c50     94 E4 85 F1 | 	sub	objptr, ##18580
02c54     F2 1E 62 FC | 	wrlong	local01, objptr
02c58     08 E4 05 F1 | 	add	objptr, #8
02c5c     F2 08 68 FC | 	wrlong	#4, objptr
02c60     55 00 00 FF 
02c64     F8 E5 85 F1 | 	sub	objptr, ##44024
02c68     FC DD 9F FD | 	jmp	#LR__0020
02c6c                 | LR__0125
02c6c                 | '     							 
02c6c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02c6c     01 20 16 F2 | 	cmp	local02, #1 wc
02c70     C0 00 90 CD |  if_b	jmp	#LR__0126
02c74     55 00 00 FF 
02c78     F8 E5 05 F1 | 	add	objptr, ##44024
02c7c     F2 1E 02 FB | 	rdlong	local01, objptr
02c80     55 00 00 FF 
02c84     F8 E5 85 F1 | 	sub	objptr, ##44024
02c88     01 1E 0E F2 | 	cmp	local01, #1 wz
02c8c     55 00 00 5F 
02c90     F8 E5 05 51 |  if_ne	add	objptr, ##44024
02c94     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02c98     55 00 00 5F 
02c9c     F8 E5 85 51 |  if_ne	sub	objptr, ##44024
02ca0     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
02ca4     53 00 00 AF 
02ca8     EC E5 05 A1 |  if_e	add	objptr, ##42988
02cac     F2 34 02 AB |  if_e	rdlong	local12, objptr
02cb0     53 00 00 AF 
02cb4     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02cb8     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02cbc     74 00 90 5D |  if_ne	jmp	#LR__0126
02cc0     55 00 00 FF 
02cc4     F8 E5 05 F1 | 	add	objptr, ##44024
02cc8     F2 16 02 FB | 	rdlong	arg03, objptr
02ccc     55 00 00 FF 
02cd0     F8 E5 85 F1 | 	sub	objptr, ##44024
02cd4     10 13 02 F6 | 	mov	arg01, local02
02cd8     00 14 06 F6 | 	mov	arg02, #0
02cdc     20 2E B0 FD | 	call	#_compile_assign
02ce0                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02ce0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02ce0     7A 00 00 FF 
02ce4     84 E4 05 F1 | 	add	objptr, ##62596
02ce8     F2 12 02 FB | 	rdlong	arg01, objptr
02cec     7A 00 00 FF 
02cf0     84 E4 85 F1 | 	sub	objptr, ##62596
02cf4     3E 01 00 FF 
02cf8     29 15 06 F6 | 	mov	arg02, ##@LR__4349
02cfc     F0 5B B1 FD | 	call	#__system___string_cmp
02d00     00 FA 0D F2 | 	cmp	result1, #0 wz
02d04     90 01 90 AD |  if_e	jmp	#LR__0134
02d08     7A 00 00 FF 
02d0c     84 E4 05 F1 | 	add	objptr, ##62596
02d10     F2 1E 02 FB | 	rdlong	local01, objptr
02d14     24 00 00 FF 
02d18     94 E4 85 F1 | 	sub	objptr, ##18580
02d1c     F2 1E 62 FC | 	wrlong	local01, objptr
02d20     08 E4 05 F1 | 	add	objptr, #8
02d24     F2 08 68 FC | 	wrlong	#4, objptr
02d28     55 00 00 FF 
02d2c     F8 E5 85 F1 | 	sub	objptr, ##44024
02d30     34 DD 9F FD | 	jmp	#LR__0020
02d34                 | LR__0126
02d34                 | ' 
02d34                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02d34     53 00 00 FF 
02d38     E4 E5 05 F1 | 	add	objptr, ##42980
02d3c     F2 1E 02 FB | 	rdlong	local01, objptr
02d40     53 00 00 FF 
02d44     E4 E5 85 F1 | 	sub	objptr, ##42980
02d48     01 00 00 FF 
02d4c     04 1E 0E F2 | 	cmp	local01, ##516 wz
02d50     53 00 00 AF 
02d54     EC E5 05 A1 |  if_e	add	objptr, ##42988
02d58     F2 30 02 AB |  if_e	rdlong	local10, objptr
02d5c     53 00 00 AF 
02d60     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02d64     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
02d68     14 00 90 5D |  if_ne	jmp	#LR__0127
02d6c     00 12 06 F6 | 	mov	arg01, #0
02d70     00 14 06 F6 | 	mov	arg02, #0
02d74     00 16 06 F6 | 	mov	arg03, #0
02d78     84 2D B0 FD | 	call	#_compile_assign
02d7c     90 00 90 FD | 	jmp	#LR__0129
02d80                 | LR__0127
02d80                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
02d80     53 00 00 FF 
02d84     E4 E5 05 F1 | 	add	objptr, ##42980
02d88     F2 1E 02 FB | 	rdlong	local01, objptr
02d8c     53 00 00 FF 
02d90     E4 E5 85 F1 | 	sub	objptr, ##42980
02d94     01 00 00 FF 
02d98     04 1E 0E F2 | 	cmp	local01, ##516 wz
02d9c     53 00 00 AF 
02da0     EC E5 05 A1 |  if_e	add	objptr, ##42988
02da4     F2 30 02 AB |  if_e	rdlong	local10, objptr
02da8     53 00 00 AF 
02dac     EC E5 85 A1 |  if_e	sub	objptr, ##42988
02db0     14 30 0E A2 |  if_e	cmp	local10, #20 wz
02db4     44 00 90 5D |  if_ne	jmp	#LR__0128
02db8     00 12 06 F6 | 	mov	arg01, #0
02dbc     04 B3 B1 FD | 	call	#__system___getiolock_0417
02dc0     FD 12 02 F6 | 	mov	arg01, result1
02dc4     00 5B B1 FD | 	call	#__system___lockmem
02dc8     3E 01 00 FF 
02dcc     2A 15 06 F6 | 	mov	arg02, ##@LR__4350
02dd0     00 12 06 F6 | 	mov	arg01, #0
02dd4     00 16 06 F6 | 	mov	arg03, #0
02dd8     DC 67 B1 FD | 	call	#__system___basic_print_string
02ddc     00 12 06 F6 | 	mov	arg01, #0
02de0     0A 14 06 F6 | 	mov	arg02, #10
02de4     00 16 06 F6 | 	mov	arg03, #0
02de8     74 67 B1 FD | 	call	#__system___basic_print_char
02dec     00 12 06 F6 | 	mov	arg01, #0
02df0     D0 B2 B1 FD | 	call	#__system___getiolock_0417
02df4     FD 00 68 FC | 	wrlong	#0, result1
02df8     7C 00 90 FD | 	jmp	#LR__0133
02dfc                 | LR__0128
02dfc     00 12 06 F6 | 	mov	arg01, #0
02e00     00 14 06 F6 | 	mov	arg02, #0
02e04     00 16 06 F6 | 	mov	arg03, #0
02e08     24 2C B0 FD | 	call	#_compile
02e0c     FD 22 02 F6 | 	mov	local03, result1
02e10                 | LR__0129
02e10                 | ' 
02e10                 | ' ' if we are here, this is not a program line to add, so try to execute this
02e10                 | ' 
02e10                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
02e10                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
02e10                 | ' if err=0 then execute_line() else printerror(err)
02e10     00 22 0E F2 | 	cmp	local03, #0 wz
02e14     0C 00 90 5D |  if_ne	jmp	#LR__0130
02e18     00 12 06 F6 | 	mov	arg01, #0
02e1c     0C 66 B0 FD | 	call	#_execute_line
02e20     08 00 90 FD | 	jmp	#LR__0131
02e24                 | LR__0130
02e24     11 13 02 F6 | 	mov	arg01, local03
02e28     78 25 B1 FD | 	call	#_printerror
02e2c                 | LR__0131
02e2c                 | ' if rest$<>"" then line$=rest$:  goto 108 
02e2c     7A 00 00 FF 
02e30     84 E4 05 F1 | 	add	objptr, ##62596
02e34     F2 12 02 FB | 	rdlong	arg01, objptr
02e38     7A 00 00 FF 
02e3c     84 E4 85 F1 | 	sub	objptr, ##62596
02e40     3E 01 00 FF 
02e44     59 15 06 F6 | 	mov	arg02, ##@LR__4351
02e48     A4 5A B1 FD | 	call	#__system___string_cmp
02e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e50     24 00 90 AD |  if_e	jmp	#LR__0132
02e54     7A 00 00 FF 
02e58     84 E4 05 F1 | 	add	objptr, ##62596
02e5c     F2 1E 02 FB | 	rdlong	local01, objptr
02e60     24 00 00 FF 
02e64     94 E4 85 F1 | 	sub	objptr, ##18580
02e68     F2 1E 62 FC | 	wrlong	local01, objptr
02e6c     55 00 00 FF 
02e70     F0 E5 85 F1 | 	sub	objptr, ##44016
02e74     F0 DB 9F FD | 	jmp	#LR__0020
02e78                 | LR__0132
02e78                 | LR__0133
02e78     3E 01 00 FF 
02e7c     5A 13 06 F6 | 	mov	arg01, ##@LR__4352
02e80                 | ' 
02e80                 | ' write(text)
02e80     1C 4A B1 FD | 	call	#_hg010b_spin2_write
02e84                 | ' crlf
02e84     78 4B B1 FD | 	call	#_hg010b_spin2_crlf
02e88     3E 01 00 FF 
02e8c     5B 13 06 F6 | 	mov	arg01, ##@LR__4353
02e90                 | ' 
02e90                 | ' write(text)
02e90     0C 4A B1 FD | 	call	#_hg010b_spin2_write
02e94                 | ' crlf
02e94     68 4B B1 FD | 	call	#_hg010b_spin2_crlf
02e98                 | LR__0134
02e98     A7 F0 03 F6 | 	mov	ptra, fp
02e9c     B2 00 A0 FD | 	call	#popregs_
02ea0                 | _interpret_ret
02ea0     2D 00 64 FD | 	ret
02ea4                 | 
02ea4                 | ' 
02ea4                 | ' 
02ea4                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
02ea4                 | ' 
02ea4                 | ' function isoperator(s as string) as ubyte
02ea4                 | _isoperator
02ea4     01 4A 05 F6 | 	mov	COUNT_, #1
02ea8     A8 00 A0 FD | 	call	#pushregs_
02eac                 | ' 
02eac                 | ' select case s
02eac     09 1F 02 F6 | 	mov	local01, arg01
02eb0     3E 01 00 FF 
02eb4     61 15 06 F6 | 	mov	arg02, ##@LR__4354
02eb8     0F 13 02 F6 | 	mov	arg01, local01
02ebc     30 5A B1 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     FC 01 90 AD |  if_e	jmp	#LR__0140
02ec8     3E 01 00 FF 
02ecc     63 15 06 F6 | 	mov	arg02, ##@LR__4355
02ed0     0F 13 02 F6 | 	mov	arg01, local01
02ed4     18 5A B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     EC 01 90 AD |  if_e	jmp	#LR__0141
02ee0     3E 01 00 FF 
02ee4     65 15 06 F6 | 	mov	arg02, ##@LR__4356
02ee8     0F 13 02 F6 | 	mov	arg01, local01
02eec     00 5A B1 FD | 	call	#__system___string_cmp
02ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef4     DC 01 90 AD |  if_e	jmp	#LR__0142
02ef8     3E 01 00 FF 
02efc     68 15 06 F6 | 	mov	arg02, ##@LR__4357
02f00     0F 13 02 F6 | 	mov	arg01, local01
02f04     E8 59 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     CC 01 90 AD |  if_e	jmp	#LR__0143
02f10     3E 01 00 FF 
02f14     6C 15 06 F6 | 	mov	arg02, ##@LR__4358
02f18     0F 13 02 F6 | 	mov	arg01, local01
02f1c     D0 59 B1 FD | 	call	#__system___string_cmp
02f20     00 FA 0D F2 | 	cmp	result1, #0 wz
02f24     BC 01 90 AD |  if_e	jmp	#LR__0144
02f28     3E 01 00 FF 
02f2c     6E 15 06 F6 | 	mov	arg02, ##@LR__4359
02f30     0F 13 02 F6 | 	mov	arg01, local01
02f34     B8 59 B1 FD | 	call	#__system___string_cmp
02f38     00 FA 0D F2 | 	cmp	result1, #0 wz
02f3c     AC 01 90 AD |  if_e	jmp	#LR__0145
02f40     3E 01 00 FF 
02f44     70 15 06 F6 | 	mov	arg02, ##@LR__4360
02f48     0F 13 02 F6 | 	mov	arg01, local01
02f4c     A0 59 B1 FD | 	call	#__system___string_cmp
02f50     00 FA 0D F2 | 	cmp	result1, #0 wz
02f54     9C 01 90 AD |  if_e	jmp	#LR__0146
02f58     3E 01 00 FF 
02f5c     74 15 06 F6 | 	mov	arg02, ##@LR__4361
02f60     0F 13 02 F6 | 	mov	arg01, local01
02f64     88 59 B1 FD | 	call	#__system___string_cmp
02f68     00 FA 0D F2 | 	cmp	result1, #0 wz
02f6c     8C 01 90 AD |  if_e	jmp	#LR__0147
02f70     3E 01 00 FF 
02f74     78 15 06 F6 | 	mov	arg02, ##@LR__4362
02f78     0F 13 02 F6 | 	mov	arg01, local01
02f7c     70 59 B1 FD | 	call	#__system___string_cmp
02f80     00 FA 0D F2 | 	cmp	result1, #0 wz
02f84     7C 01 90 AD |  if_e	jmp	#LR__0148
02f88     3E 01 00 FF 
02f8c     7C 15 06 F6 | 	mov	arg02, ##@LR__4363
02f90     0F 13 02 F6 | 	mov	arg01, local01
02f94     58 59 B1 FD | 	call	#__system___string_cmp
02f98     00 FA 0D F2 | 	cmp	result1, #0 wz
02f9c     6C 01 90 AD |  if_e	jmp	#LR__0149
02fa0     3E 01 00 FF 
02fa4     80 15 06 F6 | 	mov	arg02, ##@LR__4364
02fa8     0F 13 02 F6 | 	mov	arg01, local01
02fac     40 59 B1 FD | 	call	#__system___string_cmp
02fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb4     5C 01 90 AD |  if_e	jmp	#LR__0150
02fb8     3E 01 00 FF 
02fbc     84 15 06 F6 | 	mov	arg02, ##@LR__4365
02fc0     0F 13 02 F6 | 	mov	arg01, local01
02fc4     28 59 B1 FD | 	call	#__system___string_cmp
02fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02fcc     4C 01 90 AD |  if_e	jmp	#LR__0151
02fd0     3E 01 00 FF 
02fd4     86 15 06 F6 | 	mov	arg02, ##@LR__4366
02fd8     0F 13 02 F6 | 	mov	arg01, local01
02fdc     10 59 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     3C 01 90 AD |  if_e	jmp	#LR__0152
02fe8     3E 01 00 FF 
02fec     8A 15 06 F6 | 	mov	arg02, ##@LR__4367
02ff0     0F 13 02 F6 | 	mov	arg01, local01
02ff4     F8 58 B1 FD | 	call	#__system___string_cmp
02ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
02ffc     2C 01 90 AD |  if_e	jmp	#LR__0153
03000     3E 01 00 FF 
03004     8C 15 06 F6 | 	mov	arg02, ##@LR__4368
03008     0F 13 02 F6 | 	mov	arg01, local01
0300c     E0 58 B1 FD | 	call	#__system___string_cmp
03010     00 FA 0D F2 | 	cmp	result1, #0 wz
03014     1C 01 90 AD |  if_e	jmp	#LR__0154
03018     3E 01 00 FF 
0301c     8E 15 06 F6 | 	mov	arg02, ##@LR__4369
03020     0F 13 02 F6 | 	mov	arg01, local01
03024     C8 58 B1 FD | 	call	#__system___string_cmp
03028     00 FA 0D F2 | 	cmp	result1, #0 wz
0302c     0C 01 90 AD |  if_e	jmp	#LR__0155
03030     3E 01 00 FF 
03034     91 15 06 F6 | 	mov	arg02, ##@LR__4370
03038     0F 13 02 F6 | 	mov	arg01, local01
0303c     B0 58 B1 FD | 	call	#__system___string_cmp
03040     00 FA 0D F2 | 	cmp	result1, #0 wz
03044     FC 00 90 AD |  if_e	jmp	#LR__0156
03048     3E 01 00 FF 
0304c     94 15 06 F6 | 	mov	arg02, ##@LR__4371
03050     0F 13 02 F6 | 	mov	arg01, local01
03054     98 58 B1 FD | 	call	#__system___string_cmp
03058     00 FA 0D F2 | 	cmp	result1, #0 wz
0305c     EC 00 90 AD |  if_e	jmp	#LR__0157
03060     3E 01 00 FF 
03064     96 15 06 F6 | 	mov	arg02, ##@LR__4372
03068     0F 13 02 F6 | 	mov	arg01, local01
0306c     80 58 B1 FD | 	call	#__system___string_cmp
03070     00 FA 0D F2 | 	cmp	result1, #0 wz
03074     DC 00 90 AD |  if_e	jmp	#LR__0158
03078     3E 01 00 FF 
0307c     98 15 06 F6 | 	mov	arg02, ##@LR__4373
03080     0F 13 02 F6 | 	mov	arg01, local01
03084     68 58 B1 FD | 	call	#__system___string_cmp
03088     00 FA 0D F2 | 	cmp	result1, #0 wz
0308c     CC 00 90 AD |  if_e	jmp	#LR__0159
03090     3E 01 00 FF 
03094     9B 15 06 F6 | 	mov	arg02, ##@LR__4374
03098     0F 13 02 F6 | 	mov	arg01, local01
0309c     50 58 B1 FD | 	call	#__system___string_cmp
030a0     00 FA 0D F2 | 	cmp	result1, #0 wz
030a4     BC 00 90 AD |  if_e	jmp	#LR__0160
030a8     3E 01 00 FF 
030ac     9E 15 06 F6 | 	mov	arg02, ##@LR__4375
030b0     0F 13 02 F6 | 	mov	arg01, local01
030b4     38 58 B1 FD | 	call	#__system___string_cmp
030b8     00 FA 0D F2 | 	cmp	result1, #0 wz
030bc     AC 00 90 AD |  if_e	jmp	#LR__0161
030c0     B0 00 90 FD | 	jmp	#LR__0162
030c4                 | LR__0140
030c4     01 FA 05 F6 | 	mov	result1, #1
030c8     AC 00 90 FD | 	jmp	#LR__0163
030cc                 | LR__0141
030cc     02 FA 05 F6 | 	mov	result1, #2
030d0     A4 00 90 FD | 	jmp	#LR__0163
030d4                 | LR__0142
030d4     03 FA 05 F6 | 	mov	result1, #3
030d8     9C 00 90 FD | 	jmp	#LR__0163
030dc                 | LR__0143
030dc     04 FA 05 F6 | 	mov	result1, #4
030e0     94 00 90 FD | 	jmp	#LR__0163
030e4                 | LR__0144
030e4     05 FA 05 F6 | 	mov	result1, #5
030e8     8C 00 90 FD | 	jmp	#LR__0163
030ec                 | LR__0145
030ec     06 FA 05 F6 | 	mov	result1, #6
030f0     84 00 90 FD | 	jmp	#LR__0163
030f4                 | LR__0146
030f4     07 FA 05 F6 | 	mov	result1, #7
030f8     7C 00 90 FD | 	jmp	#LR__0163
030fc                 | LR__0147
030fc     08 FA 05 F6 | 	mov	result1, #8
03100     74 00 90 FD | 	jmp	#LR__0163
03104                 | LR__0148
03104     09 FA 05 F6 | 	mov	result1, #9
03108     6C 00 90 FD | 	jmp	#LR__0163
0310c                 | LR__0149
0310c     0A FA 05 F6 | 	mov	result1, #10
03110     64 00 90 FD | 	jmp	#LR__0163
03114                 | LR__0150
03114     0B FA 05 F6 | 	mov	result1, #11
03118     5C 00 90 FD | 	jmp	#LR__0163
0311c                 | LR__0151
0311c     0C FA 05 F6 | 	mov	result1, #12
03120     54 00 90 FD | 	jmp	#LR__0163
03124                 | LR__0152
03124     0D FA 05 F6 | 	mov	result1, #13
03128     4C 00 90 FD | 	jmp	#LR__0163
0312c                 | LR__0153
0312c     0E FA 05 F6 | 	mov	result1, #14
03130     44 00 90 FD | 	jmp	#LR__0163
03134                 | LR__0154
03134     1B FA 05 F6 | 	mov	result1, #27
03138     3C 00 90 FD | 	jmp	#LR__0163
0313c                 | LR__0155
0313c     27 FA 05 F6 | 	mov	result1, #39
03140     34 00 90 FD | 	jmp	#LR__0163
03144                 | LR__0156
03144     26 FA 05 F6 | 	mov	result1, #38
03148     2C 00 90 FD | 	jmp	#LR__0163
0314c                 | LR__0157
0314c     10 FA 05 F6 | 	mov	result1, #16
03150     24 00 90 FD | 	jmp	#LR__0163
03154                 | LR__0158
03154     0F FA 05 F6 | 	mov	result1, #15
03158     1C 00 90 FD | 	jmp	#LR__0163
0315c                 | LR__0159
0315c     2A FA 05 F6 | 	mov	result1, #42
03160     14 00 90 FD | 	jmp	#LR__0163
03164                 | LR__0160
03164     28 FA 05 F6 | 	mov	result1, #40
03168     0C 00 90 FD | 	jmp	#LR__0163
0316c                 | LR__0161
0316c     29 FA 05 F6 | 	mov	result1, #41
03170     04 00 90 FD | 	jmp	#LR__0163
03174                 | LR__0162
03174     00 FA 05 F6 | 	mov	result1, #0
03178                 | LR__0163
03178     A7 F0 03 F6 | 	mov	ptra, fp
0317c     B2 00 A0 FD | 	call	#popregs_
03180                 | _isoperator_ret
03180     2D 00 64 FD | 	ret
03184                 | 
03184                 | ' 
03184                 | ' function isseparator(s as string) as ubyte
03184                 | _isseparator
03184     01 4A 05 F6 | 	mov	COUNT_, #1
03188     A8 00 A0 FD | 	call	#pushregs_
0318c                 | ' 
0318c                 | ' select case s
0318c     09 1F 02 F6 | 	mov	local01, arg01
03190     3E 01 00 FF 
03194     A1 15 06 F6 | 	mov	arg02, ##@LR__4376
03198     0F 13 02 F6 | 	mov	arg01, local01
0319c     50 57 B1 FD | 	call	#__system___string_cmp
031a0     00 FA 0D F2 | 	cmp	result1, #0 wz
031a4     54 01 90 AD |  if_e	jmp	#LR__0170
031a8     3E 01 00 FF 
031ac     A3 15 06 F6 | 	mov	arg02, ##@LR__4377
031b0     0F 13 02 F6 | 	mov	arg01, local01
031b4     38 57 B1 FD | 	call	#__system___string_cmp
031b8     00 FA 0D F2 | 	cmp	result1, #0 wz
031bc     44 01 90 AD |  if_e	jmp	#LR__0171
031c0     3E 01 00 FF 
031c4     A5 15 06 F6 | 	mov	arg02, ##@LR__4378
031c8     0F 13 02 F6 | 	mov	arg01, local01
031cc     20 57 B1 FD | 	call	#__system___string_cmp
031d0     00 FA 0D F2 | 	cmp	result1, #0 wz
031d4     34 01 90 AD |  if_e	jmp	#LR__0172
031d8     3E 01 00 FF 
031dc     A7 15 06 F6 | 	mov	arg02, ##@LR__4379
031e0     0F 13 02 F6 | 	mov	arg01, local01
031e4     08 57 B1 FD | 	call	#__system___string_cmp
031e8     00 FA 0D F2 | 	cmp	result1, #0 wz
031ec     24 01 90 AD |  if_e	jmp	#LR__0173
031f0     3E 01 00 FF 
031f4     A9 15 06 F6 | 	mov	arg02, ##@LR__4380
031f8     0F 13 02 F6 | 	mov	arg01, local01
031fc     F0 56 B1 FD | 	call	#__system___string_cmp
03200     00 FA 0D F2 | 	cmp	result1, #0 wz
03204     14 01 90 AD |  if_e	jmp	#LR__0174
03208     3E 01 00 FF 
0320c     AB 15 06 F6 | 	mov	arg02, ##@LR__4381
03210     0F 13 02 F6 | 	mov	arg01, local01
03214     D8 56 B1 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     04 01 90 AD |  if_e	jmp	#LR__0175
03220     3E 01 00 FF 
03224     AD 15 06 F6 | 	mov	arg02, ##@LR__4382
03228     0F 13 02 F6 | 	mov	arg01, local01
0322c     C0 56 B1 FD | 	call	#__system___string_cmp
03230     00 FA 0D F2 | 	cmp	result1, #0 wz
03234     F4 00 90 AD |  if_e	jmp	#LR__0176
03238     3E 01 00 FF 
0323c     AF 15 06 F6 | 	mov	arg02, ##@LR__4383
03240     0F 13 02 F6 | 	mov	arg01, local01
03244     A8 56 B1 FD | 	call	#__system___string_cmp
03248     00 FA 0D F2 | 	cmp	result1, #0 wz
0324c     E4 00 90 AD |  if_e	jmp	#LR__0177
03250     3E 01 00 FF 
03254     B1 15 06 F6 | 	mov	arg02, ##@LR__4384
03258     0F 13 02 F6 | 	mov	arg01, local01
0325c     90 56 B1 FD | 	call	#__system___string_cmp
03260     00 FA 0D F2 | 	cmp	result1, #0 wz
03264     D4 00 90 AD |  if_e	jmp	#LR__0178
03268     3E 01 00 FF 
0326c     B3 15 06 F6 | 	mov	arg02, ##@LR__4385
03270     0F 13 02 F6 | 	mov	arg01, local01
03274     78 56 B1 FD | 	call	#__system___string_cmp
03278     00 FA 0D F2 | 	cmp	result1, #0 wz
0327c     C4 00 90 AD |  if_e	jmp	#LR__0179
03280     3E 01 00 FF 
03284     B5 15 06 F6 | 	mov	arg02, ##@LR__4386
03288     0F 13 02 F6 | 	mov	arg01, local01
0328c     60 56 B1 FD | 	call	#__system___string_cmp
03290     00 FA 0D F2 | 	cmp	result1, #0 wz
03294     B4 00 90 AD |  if_e	jmp	#LR__0180
03298     3E 01 00 FF 
0329c     B7 15 06 F6 | 	mov	arg02, ##@LR__4387
032a0     0F 13 02 F6 | 	mov	arg01, local01
032a4     48 56 B1 FD | 	call	#__system___string_cmp
032a8     00 FA 0D F2 | 	cmp	result1, #0 wz
032ac     A4 00 90 AD |  if_e	jmp	#LR__0181
032b0     3E 01 00 FF 
032b4     B9 15 06 F6 | 	mov	arg02, ##@LR__4388
032b8     0F 13 02 F6 | 	mov	arg01, local01
032bc     30 56 B1 FD | 	call	#__system___string_cmp
032c0     00 FA 0D F2 | 	cmp	result1, #0 wz
032c4     94 00 90 AD |  if_e	jmp	#LR__0182
032c8     3E 01 00 FF 
032cc     BB 15 06 F6 | 	mov	arg02, ##@LR__4389
032d0     0F 13 02 F6 | 	mov	arg01, local01
032d4     18 56 B1 FD | 	call	#__system___string_cmp
032d8     00 FA 0D F2 | 	cmp	result1, #0 wz
032dc     84 00 90 AD |  if_e	jmp	#LR__0183
032e0     3E 01 00 FF 
032e4     BD 15 06 F6 | 	mov	arg02, ##@LR__4390
032e8     0F 13 02 F6 | 	mov	arg01, local01
032ec     00 56 B1 FD | 	call	#__system___string_cmp
032f0     00 FA 0D F2 | 	cmp	result1, #0 wz
032f4     74 00 90 AD |  if_e	jmp	#LR__0184
032f8     78 00 90 FD | 	jmp	#LR__0185
032fc                 | LR__0170
032fc     01 FA 05 F6 | 	mov	result1, #1
03300     74 00 90 FD | 	jmp	#LR__0186
03304                 | LR__0171
03304     02 FA 05 F6 | 	mov	result1, #2
03308     6C 00 90 FD | 	jmp	#LR__0186
0330c                 | LR__0172
0330c     1B FA 05 F6 | 	mov	result1, #27
03310     64 00 90 FD | 	jmp	#LR__0186
03314                 | LR__0173
03314     11 FA 05 F6 | 	mov	result1, #17
03318     5C 00 90 FD | 	jmp	#LR__0186
0331c                 | LR__0174
0331c     05 FA 05 F6 | 	mov	result1, #5
03320     54 00 90 FD | 	jmp	#LR__0186
03324                 | LR__0175
03324     06 FA 05 F6 | 	mov	result1, #6
03328     4C 00 90 FD | 	jmp	#LR__0186
0332c                 | LR__0176
0332c     12 FA 05 F6 | 	mov	result1, #18
03330     44 00 90 FD | 	jmp	#LR__0186
03334                 | LR__0177
03334     13 FA 05 F6 | 	mov	result1, #19
03338     3C 00 90 FD | 	jmp	#LR__0186
0333c                 | LR__0178
0333c     0C FA 05 F6 | 	mov	result1, #12
03340     34 00 90 FD | 	jmp	#LR__0186
03344                 | LR__0179
03344     14 FA 05 F6 | 	mov	result1, #20
03348     2C 00 90 FD | 	jmp	#LR__0186
0334c                 | LR__0180
0334c     15 FA 05 F6 | 	mov	result1, #21
03350     24 00 90 FD | 	jmp	#LR__0186
03354                 | LR__0181
03354     16 FA 05 F6 | 	mov	result1, #22
03358     1C 00 90 FD | 	jmp	#LR__0186
0335c                 | LR__0182
0335c     FF FB 05 F6 | 	mov	result1, #511
03360     14 00 90 FD | 	jmp	#LR__0186
03364                 | LR__0183
03364     0F FA 05 F6 | 	mov	result1, #15
03368     0C 00 90 FD | 	jmp	#LR__0186
0336c                 | LR__0184
0336c     10 FA 05 F6 | 	mov	result1, #16
03370     04 00 90 FD | 	jmp	#LR__0186
03374                 | LR__0185
03374     00 FA 05 F6 | 	mov	result1, #0
03378                 | LR__0186
03378     A7 F0 03 F6 | 	mov	ptra, fp
0337c     B2 00 A0 FD | 	call	#popregs_
03380                 | _isseparator_ret
03380     2D 00 64 FD | 	ret
03384                 | 
03384                 | ' 
03384                 | ' 
03384                 | ' function iscommand(s as string) as ubyte
03384                 | _iscommand
03384     01 4A 05 F6 | 	mov	COUNT_, #1
03388     A8 00 A0 FD | 	call	#pushregs_
0338c                 | ' 
0338c                 | ' select case s
0338c     09 1F 02 F6 | 	mov	local01, arg01
03390     3E 01 00 FF 
03394     C1 15 06 F6 | 	mov	arg02, ##@LR__4392
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     50 55 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     F4 06 90 AD |  if_e	jmp	#LR__0190
033a8     3E 01 00 FF 
033ac     C6 15 06 F6 | 	mov	arg02, ##@LR__4393
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     38 55 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     E4 06 90 AD |  if_e	jmp	#LR__0191
033c0     3E 01 00 FF 
033c4     C9 15 06 F6 | 	mov	arg02, ##@LR__4394
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     20 55 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     D4 06 90 AD |  if_e	jmp	#LR__0192
033d8     3E 01 00 FF 
033dc     CD 15 06 F6 | 	mov	arg02, ##@LR__4395
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     08 55 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     C4 06 90 AD |  if_e	jmp	#LR__0193
033f0     3E 01 00 FF 
033f4     D2 15 06 F6 | 	mov	arg02, ##@LR__4396
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     F0 54 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     B4 06 90 AD |  if_e	jmp	#LR__0194
03408     3E 01 00 FF 
0340c     D6 15 06 F6 | 	mov	arg02, ##@LR__4397
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     D8 54 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     A4 06 90 AD |  if_e	jmp	#LR__0195
03420     3E 01 00 FF 
03424     DD 15 06 F6 | 	mov	arg02, ##@LR__4398
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     C0 54 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     94 06 90 AD |  if_e	jmp	#LR__0196
03438     3E 01 00 FF 
0343c     E1 15 06 F6 | 	mov	arg02, ##@LR__4399
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     A8 54 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     84 06 90 AD |  if_e	jmp	#LR__0197
03450     3E 01 00 FF 
03454     E7 15 06 F6 | 	mov	arg02, ##@LR__4400
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     90 54 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     74 06 90 AD |  if_e	jmp	#LR__0198
03468     3E 01 00 FF 
0346c     EB 15 06 F6 | 	mov	arg02, ##@LR__4401
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     78 54 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     64 06 90 AD |  if_e	jmp	#LR__0199
03480     3E 01 00 FF 
03484     F1 15 06 F6 | 	mov	arg02, ##@LR__4402
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     60 54 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     54 06 90 AD |  if_e	jmp	#LR__0200
03498     3E 01 00 FF 
0349c     F4 15 06 F6 | 	mov	arg02, ##@LR__4403
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     48 54 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     44 06 90 AD |  if_e	jmp	#LR__0201
034b0     3E 01 00 FF 
034b4     FA 15 06 F6 | 	mov	arg02, ##@LR__4404
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     30 54 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     34 06 90 AD |  if_e	jmp	#LR__0202
034c8     3E 01 00 FF 
034cc     FE 15 06 F6 | 	mov	arg02, ##@LR__4405
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     18 54 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     24 06 90 AD |  if_e	jmp	#LR__0203
034e0     3F 01 00 FF 
034e4     05 14 06 F6 | 	mov	arg02, ##@LR__4406
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     00 54 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     14 06 90 AD |  if_e	jmp	#LR__0204
034f8     3F 01 00 FF 
034fc     0C 14 06 F6 | 	mov	arg02, ##@LR__4407
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     E8 53 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     04 06 90 AD |  if_e	jmp	#LR__0205
03510     3F 01 00 FF 
03514     13 14 06 F6 | 	mov	arg02, ##@LR__4408
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     D0 53 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     F4 05 90 AD |  if_e	jmp	#LR__0206
03528     3F 01 00 FF 
0352c     1D 14 06 F6 | 	mov	arg02, ##@LR__4409
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     B8 53 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     E4 05 90 AD |  if_e	jmp	#LR__0207
03540     3F 01 00 FF 
03544     21 14 06 F6 | 	mov	arg02, ##@LR__4410
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     A0 53 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     D4 05 90 AD |  if_e	jmp	#LR__0208
03558     3F 01 00 FF 
0355c     25 14 06 F6 | 	mov	arg02, ##@LR__4411
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     88 53 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     C4 05 90 AD |  if_e	jmp	#LR__0209
03570     3F 01 00 FF 
03574     29 14 06 F6 | 	mov	arg02, ##@LR__4412
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     70 53 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     B4 05 90 AD |  if_e	jmp	#LR__0210
03588     3F 01 00 FF 
0358c     2E 14 06 F6 | 	mov	arg02, ##@LR__4413
03590     0F 13 02 F6 | 	mov	arg01, local01
03594     58 53 B1 FD | 	call	#__system___string_cmp
03598     00 FA 0D F2 | 	cmp	result1, #0 wz
0359c     A4 05 90 AD |  if_e	jmp	#LR__0211
035a0     3F 01 00 FF 
035a4     32 14 06 F6 | 	mov	arg02, ##@LR__4414
035a8     0F 13 02 F6 | 	mov	arg01, local01
035ac     40 53 B1 FD | 	call	#__system___string_cmp
035b0     00 FA 0D F2 | 	cmp	result1, #0 wz
035b4     94 05 90 AD |  if_e	jmp	#LR__0212
035b8     3F 01 00 FF 
035bc     37 14 06 F6 | 	mov	arg02, ##@LR__4415
035c0     0F 13 02 F6 | 	mov	arg01, local01
035c4     28 53 B1 FD | 	call	#__system___string_cmp
035c8     00 FA 0D F2 | 	cmp	result1, #0 wz
035cc     84 05 90 AD |  if_e	jmp	#LR__0213
035d0     3F 01 00 FF 
035d4     3F 14 06 F6 | 	mov	arg02, ##@LR__4416
035d8     0F 13 02 F6 | 	mov	arg01, local01
035dc     10 53 B1 FD | 	call	#__system___string_cmp
035e0     00 FA 0D F2 | 	cmp	result1, #0 wz
035e4     74 05 90 AD |  if_e	jmp	#LR__0214
035e8     3F 01 00 FF 
035ec     43 14 06 F6 | 	mov	arg02, ##@LR__4417
035f0     0F 13 02 F6 | 	mov	arg01, local01
035f4     F8 52 B1 FD | 	call	#__system___string_cmp
035f8     00 FA 0D F2 | 	cmp	result1, #0 wz
035fc     64 05 90 AD |  if_e	jmp	#LR__0215
03600     3F 01 00 FF 
03604     48 14 06 F6 | 	mov	arg02, ##@LR__4418
03608     0F 13 02 F6 | 	mov	arg01, local01
0360c     E0 52 B1 FD | 	call	#__system___string_cmp
03610     00 FA 0D F2 | 	cmp	result1, #0 wz
03614     54 05 90 AD |  if_e	jmp	#LR__0216
03618     3F 01 00 FF 
0361c     4C 14 06 F6 | 	mov	arg02, ##@LR__4419
03620     0F 13 02 F6 | 	mov	arg01, local01
03624     C8 52 B1 FD | 	call	#__system___string_cmp
03628     00 FA 0D F2 | 	cmp	result1, #0 wz
0362c     44 05 90 AD |  if_e	jmp	#LR__0217
03630     3F 01 00 FF 
03634     51 14 06 F6 | 	mov	arg02, ##@LR__4420
03638     0F 13 02 F6 | 	mov	arg01, local01
0363c     B0 52 B1 FD | 	call	#__system___string_cmp
03640     00 FA 0D F2 | 	cmp	result1, #0 wz
03644     34 05 90 AD |  if_e	jmp	#LR__0218
03648     3F 01 00 FF 
0364c     55 14 06 F6 | 	mov	arg02, ##@LR__4421
03650     0F 13 02 F6 | 	mov	arg01, local01
03654     98 52 B1 FD | 	call	#__system___string_cmp
03658     00 FA 0D F2 | 	cmp	result1, #0 wz
0365c     24 05 90 AD |  if_e	jmp	#LR__0219
03660     3F 01 00 FF 
03664     58 14 06 F6 | 	mov	arg02, ##@LR__4422
03668     0F 13 02 F6 | 	mov	arg01, local01
0366c     80 52 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     14 05 90 AD |  if_e	jmp	#LR__0220
03678     3F 01 00 FF 
0367c     5E 14 06 F6 | 	mov	arg02, ##@LR__4423
03680     0F 13 02 F6 | 	mov	arg01, local01
03684     68 52 B1 FD | 	call	#__system___string_cmp
03688     00 FA 0D F2 | 	cmp	result1, #0 wz
0368c     04 05 90 AD |  if_e	jmp	#LR__0221
03690     3F 01 00 FF 
03694     62 14 06 F6 | 	mov	arg02, ##@LR__4424
03698     0F 13 02 F6 | 	mov	arg01, local01
0369c     50 52 B1 FD | 	call	#__system___string_cmp
036a0     00 FA 0D F2 | 	cmp	result1, #0 wz
036a4     F4 04 90 AD |  if_e	jmp	#LR__0222
036a8     3F 01 00 FF 
036ac     67 14 06 F6 | 	mov	arg02, ##@LR__4425
036b0     0F 13 02 F6 | 	mov	arg01, local01
036b4     38 52 B1 FD | 	call	#__system___string_cmp
036b8     00 FA 0D F2 | 	cmp	result1, #0 wz
036bc     E4 04 90 AD |  if_e	jmp	#LR__0223
036c0     3F 01 00 FF 
036c4     6A 14 06 F6 | 	mov	arg02, ##@LR__4426
036c8     0F 13 02 F6 | 	mov	arg01, local01
036cc     20 52 B1 FD | 	call	#__system___string_cmp
036d0     00 FA 0D F2 | 	cmp	result1, #0 wz
036d4     D4 04 90 AD |  if_e	jmp	#LR__0224
036d8     3F 01 00 FF 
036dc     6D 14 06 F6 | 	mov	arg02, ##@LR__4427
036e0     0F 13 02 F6 | 	mov	arg01, local01
036e4     08 52 B1 FD | 	call	#__system___string_cmp
036e8     00 FA 0D F2 | 	cmp	result1, #0 wz
036ec     C4 04 90 AD |  if_e	jmp	#LR__0225
036f0     3F 01 00 FF 
036f4     71 14 06 F6 | 	mov	arg02, ##@LR__4428
036f8     0F 13 02 F6 | 	mov	arg01, local01
036fc     F0 51 B1 FD | 	call	#__system___string_cmp
03700     00 FA 0D F2 | 	cmp	result1, #0 wz
03704     B4 04 90 AD |  if_e	jmp	#LR__0226
03708     3F 01 00 FF 
0370c     74 14 06 F6 | 	mov	arg02, ##@LR__4429
03710     0F 13 02 F6 | 	mov	arg01, local01
03714     D8 51 B1 FD | 	call	#__system___string_cmp
03718     00 FA 0D F2 | 	cmp	result1, #0 wz
0371c     A4 04 90 AD |  if_e	jmp	#LR__0227
03720     3F 01 00 FF 
03724     79 14 06 F6 | 	mov	arg02, ##@LR__4430
03728     0F 13 02 F6 | 	mov	arg01, local01
0372c     C0 51 B1 FD | 	call	#__system___string_cmp
03730     00 FA 0D F2 | 	cmp	result1, #0 wz
03734     94 04 90 AD |  if_e	jmp	#LR__0228
03738     3F 01 00 FF 
0373c     7C 14 06 F6 | 	mov	arg02, ##@LR__4431
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     A8 51 B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     84 04 90 AD |  if_e	jmp	#LR__0229
03750     3F 01 00 FF 
03754     81 14 06 F6 | 	mov	arg02, ##@LR__4432
03758     0F 13 02 F6 | 	mov	arg01, local01
0375c     90 51 B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     74 04 90 AD |  if_e	jmp	#LR__0230
03768     3F 01 00 FF 
0376c     85 14 06 F6 | 	mov	arg02, ##@LR__4433
03770     0F 13 02 F6 | 	mov	arg01, local01
03774     78 51 B1 FD | 	call	#__system___string_cmp
03778     00 FA 0D F2 | 	cmp	result1, #0 wz
0377c     64 04 90 AD |  if_e	jmp	#LR__0231
03780     3F 01 00 FF 
03784     8A 14 06 F6 | 	mov	arg02, ##@LR__4434
03788     0F 13 02 F6 | 	mov	arg01, local01
0378c     60 51 B1 FD | 	call	#__system___string_cmp
03790     00 FA 0D F2 | 	cmp	result1, #0 wz
03794     54 04 90 AD |  if_e	jmp	#LR__0232
03798     3F 01 00 FF 
0379c     8D 14 06 F6 | 	mov	arg02, ##@LR__4435
037a0     0F 13 02 F6 | 	mov	arg01, local01
037a4     48 51 B1 FD | 	call	#__system___string_cmp
037a8     00 FA 0D F2 | 	cmp	result1, #0 wz
037ac     44 04 90 AD |  if_e	jmp	#LR__0233
037b0     3F 01 00 FF 
037b4     93 14 06 F6 | 	mov	arg02, ##@LR__4436
037b8     0F 13 02 F6 | 	mov	arg01, local01
037bc     30 51 B1 FD | 	call	#__system___string_cmp
037c0     00 FA 0D F2 | 	cmp	result1, #0 wz
037c4     34 04 90 AD |  if_e	jmp	#LR__0234
037c8     3F 01 00 FF 
037cc     97 14 06 F6 | 	mov	arg02, ##@LR__4437
037d0     0F 13 02 F6 | 	mov	arg01, local01
037d4     18 51 B1 FD | 	call	#__system___string_cmp
037d8     00 FA 0D F2 | 	cmp	result1, #0 wz
037dc     24 04 90 AD |  if_e	jmp	#LR__0235
037e0     3F 01 00 FF 
037e4     9C 14 06 F6 | 	mov	arg02, ##@LR__4438
037e8     0F 13 02 F6 | 	mov	arg01, local01
037ec     00 51 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     14 04 90 AD |  if_e	jmp	#LR__0236
037f8     3F 01 00 FF 
037fc     9F 14 06 F6 | 	mov	arg02, ##@LR__4439
03800     0F 13 02 F6 | 	mov	arg01, local01
03804     E8 50 B1 FD | 	call	#__system___string_cmp
03808     00 FA 0D F2 | 	cmp	result1, #0 wz
0380c     04 04 90 AD |  if_e	jmp	#LR__0237
03810     3F 01 00 FF 
03814     A5 14 06 F6 | 	mov	arg02, ##@LR__4440
03818     0F 13 02 F6 | 	mov	arg01, local01
0381c     D0 50 B1 FD | 	call	#__system___string_cmp
03820     00 FA 0D F2 | 	cmp	result1, #0 wz
03824     F4 03 90 AD |  if_e	jmp	#LR__0238
03828     3F 01 00 FF 
0382c     A8 14 06 F6 | 	mov	arg02, ##@LR__4441
03830     0F 13 02 F6 | 	mov	arg01, local01
03834     B8 50 B1 FD | 	call	#__system___string_cmp
03838     00 FA 0D F2 | 	cmp	result1, #0 wz
0383c     E4 03 90 AD |  if_e	jmp	#LR__0239
03840     3F 01 00 FF 
03844     B1 14 06 F6 | 	mov	arg02, ##@LR__4442
03848     0F 13 02 F6 | 	mov	arg01, local01
0384c     A0 50 B1 FD | 	call	#__system___string_cmp
03850     00 FA 0D F2 | 	cmp	result1, #0 wz
03854     D4 03 90 AD |  if_e	jmp	#LR__0240
03858     3F 01 00 FF 
0385c     B7 14 06 F6 | 	mov	arg02, ##@LR__4443
03860     0F 13 02 F6 | 	mov	arg01, local01
03864     88 50 B1 FD | 	call	#__system___string_cmp
03868     00 FA 0D F2 | 	cmp	result1, #0 wz
0386c     C4 03 90 AD |  if_e	jmp	#LR__0241
03870     3F 01 00 FF 
03874     BD 14 06 F6 | 	mov	arg02, ##@LR__4444
03878     0F 13 02 F6 | 	mov	arg01, local01
0387c     70 50 B1 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     B4 03 90 AD |  if_e	jmp	#LR__0242
03888     3F 01 00 FF 
0388c     C6 14 06 F6 | 	mov	arg02, ##@LR__4445
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     58 50 B1 FD | 	call	#__system___string_cmp
03898     00 FA 0D F2 | 	cmp	result1, #0 wz
0389c     A4 03 90 AD |  if_e	jmp	#LR__0243
038a0     3F 01 00 FF 
038a4     D0 14 06 F6 | 	mov	arg02, ##@LR__4446
038a8     0F 13 02 F6 | 	mov	arg01, local01
038ac     40 50 B1 FD | 	call	#__system___string_cmp
038b0     00 FA 0D F2 | 	cmp	result1, #0 wz
038b4     94 03 90 AD |  if_e	jmp	#LR__0244
038b8     3F 01 00 FF 
038bc     D9 14 06 F6 | 	mov	arg02, ##@LR__4447
038c0     0F 13 02 F6 | 	mov	arg01, local01
038c4     28 50 B1 FD | 	call	#__system___string_cmp
038c8     00 FA 0D F2 | 	cmp	result1, #0 wz
038cc     84 03 90 AD |  if_e	jmp	#LR__0245
038d0     3F 01 00 FF 
038d4     DE 14 06 F6 | 	mov	arg02, ##@LR__4448
038d8     0F 13 02 F6 | 	mov	arg01, local01
038dc     10 50 B1 FD | 	call	#__system___string_cmp
038e0     00 FA 0D F2 | 	cmp	result1, #0 wz
038e4     74 03 90 AD |  if_e	jmp	#LR__0246
038e8     3F 01 00 FF 
038ec     E3 14 06 F6 | 	mov	arg02, ##@LR__4449
038f0     0F 13 02 F6 | 	mov	arg01, local01
038f4     F8 4F B1 FD | 	call	#__system___string_cmp
038f8     00 FA 0D F2 | 	cmp	result1, #0 wz
038fc     64 03 90 AD |  if_e	jmp	#LR__0247
03900     3F 01 00 FF 
03904     E7 14 06 F6 | 	mov	arg02, ##@LR__4450
03908     0F 13 02 F6 | 	mov	arg01, local01
0390c     E0 4F B1 FD | 	call	#__system___string_cmp
03910     00 FA 0D F2 | 	cmp	result1, #0 wz
03914     54 03 90 AD |  if_e	jmp	#LR__0248
03918     3F 01 00 FF 
0391c     F0 14 06 F6 | 	mov	arg02, ##@LR__4451
03920     0F 13 02 F6 | 	mov	arg01, local01
03924     C8 4F B1 FD | 	call	#__system___string_cmp
03928     00 FA 0D F2 | 	cmp	result1, #0 wz
0392c     44 03 90 AD |  if_e	jmp	#LR__0249
03930     3F 01 00 FF 
03934     F6 14 06 F6 | 	mov	arg02, ##@LR__4452
03938     0F 13 02 F6 | 	mov	arg01, local01
0393c     B0 4F B1 FD | 	call	#__system___string_cmp
03940     00 FA 0D F2 | 	cmp	result1, #0 wz
03944     34 03 90 AD |  if_e	jmp	#LR__0250
03948     3F 01 00 FF 
0394c     FC 14 06 F6 | 	mov	arg02, ##@LR__4453
03950     0F 13 02 F6 | 	mov	arg01, local01
03954     98 4F B1 FD | 	call	#__system___string_cmp
03958     00 FA 0D F2 | 	cmp	result1, #0 wz
0395c     24 03 90 AD |  if_e	jmp	#LR__0251
03960     3F 01 00 FF 
03964     FE 14 06 F6 | 	mov	arg02, ##@LR__4454
03968     0F 13 02 F6 | 	mov	arg01, local01
0396c     80 4F B1 FD | 	call	#__system___string_cmp
03970     00 FA 0D F2 | 	cmp	result1, #0 wz
03974     14 03 90 AD |  if_e	jmp	#LR__0252
03978     3F 01 00 FF 
0397c     02 15 06 F6 | 	mov	arg02, ##@LR__4455
03980     0F 13 02 F6 | 	mov	arg01, local01
03984     68 4F B1 FD | 	call	#__system___string_cmp
03988     00 FA 0D F2 | 	cmp	result1, #0 wz
0398c     04 03 90 AD |  if_e	jmp	#LR__0253
03990     3F 01 00 FF 
03994     07 15 06 F6 | 	mov	arg02, ##@LR__4456
03998     0F 13 02 F6 | 	mov	arg01, local01
0399c     50 4F B1 FD | 	call	#__system___string_cmp
039a0     00 FA 0D F2 | 	cmp	result1, #0 wz
039a4     F4 02 90 AD |  if_e	jmp	#LR__0254
039a8     3F 01 00 FF 
039ac     0A 15 06 F6 | 	mov	arg02, ##@LR__4457
039b0     0F 13 02 F6 | 	mov	arg01, local01
039b4     38 4F B1 FD | 	call	#__system___string_cmp
039b8     00 FA 0D F2 | 	cmp	result1, #0 wz
039bc     E4 02 90 AD |  if_e	jmp	#LR__0255
039c0     3F 01 00 FF 
039c4     11 15 06 F6 | 	mov	arg02, ##@LR__4458
039c8     0F 13 02 F6 | 	mov	arg01, local01
039cc     20 4F B1 FD | 	call	#__system___string_cmp
039d0     00 FA 0D F2 | 	cmp	result1, #0 wz
039d4     D4 02 90 AD |  if_e	jmp	#LR__0256
039d8     3F 01 00 FF 
039dc     15 15 06 F6 | 	mov	arg02, ##@LR__4459
039e0     0F 13 02 F6 | 	mov	arg01, local01
039e4     08 4F B1 FD | 	call	#__system___string_cmp
039e8     00 FA 0D F2 | 	cmp	result1, #0 wz
039ec     C4 02 90 AD |  if_e	jmp	#LR__0257
039f0     3F 01 00 FF 
039f4     1A 15 06 F6 | 	mov	arg02, ##@LR__4460
039f8     0F 13 02 F6 | 	mov	arg01, local01
039fc     F0 4E B1 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     B4 02 90 AD |  if_e	jmp	#LR__0258
03a08     3F 01 00 FF 
03a0c     21 15 06 F6 | 	mov	arg02, ##@LR__4461
03a10     0F 13 02 F6 | 	mov	arg01, local01
03a14     D8 4E B1 FD | 	call	#__system___string_cmp
03a18     00 FA 0D F2 | 	cmp	result1, #0 wz
03a1c     A4 02 90 AD |  if_e	jmp	#LR__0259
03a20     3F 01 00 FF 
03a24     2B 15 06 F6 | 	mov	arg02, ##@LR__4462
03a28     0F 13 02 F6 | 	mov	arg01, local01
03a2c     C0 4E B1 FD | 	call	#__system___string_cmp
03a30     00 FA 0D F2 | 	cmp	result1, #0 wz
03a34     94 02 90 AD |  if_e	jmp	#LR__0260
03a38     3F 01 00 FF 
03a3c     2F 15 06 F6 | 	mov	arg02, ##@LR__4463
03a40     0F 13 02 F6 | 	mov	arg01, local01
03a44     A8 4E B1 FD | 	call	#__system___string_cmp
03a48     00 FA 0D F2 | 	cmp	result1, #0 wz
03a4c     84 02 90 AD |  if_e	jmp	#LR__0261
03a50     3F 01 00 FF 
03a54     37 15 06 F6 | 	mov	arg02, ##@LR__4464
03a58     0F 13 02 F6 | 	mov	arg01, local01
03a5c     90 4E B1 FD | 	call	#__system___string_cmp
03a60     00 FA 0D F2 | 	cmp	result1, #0 wz
03a64     74 02 90 AD |  if_e	jmp	#LR__0262
03a68     3F 01 00 FF 
03a6c     3B 15 06 F6 | 	mov	arg02, ##@LR__4465
03a70     0F 13 02 F6 | 	mov	arg01, local01
03a74     78 4E B1 FD | 	call	#__system___string_cmp
03a78     00 FA 0D F2 | 	cmp	result1, #0 wz
03a7c     64 02 90 AD |  if_e	jmp	#LR__0263
03a80     3F 01 00 FF 
03a84     41 15 06 F6 | 	mov	arg02, ##@LR__4466
03a88     0F 13 02 F6 | 	mov	arg01, local01
03a8c     60 4E B1 FD | 	call	#__system___string_cmp
03a90     00 FA 0D F2 | 	cmp	result1, #0 wz
03a94     54 02 90 AD |  if_e	jmp	#LR__0264
03a98     58 02 90 FD | 	jmp	#LR__0265
03a9c                 | LR__0190
03a9c     5C FA 05 F6 | 	mov	result1, #92
03aa0     54 02 90 FD | 	jmp	#LR__0266
03aa4                 | LR__0191
03aa4     5C FA 05 F6 | 	mov	result1, #92
03aa8     4C 02 90 FD | 	jmp	#LR__0266
03aac                 | LR__0192
03aac     47 FA 05 F6 | 	mov	result1, #71
03ab0     44 02 90 FD | 	jmp	#LR__0266
03ab4                 | LR__0193
03ab4     59 FA 05 F6 | 	mov	result1, #89
03ab8     3C 02 90 FD | 	jmp	#LR__0266
03abc                 | LR__0194
03abc     59 FA 05 F6 | 	mov	result1, #89
03ac0     34 02 90 FD | 	jmp	#LR__0266
03ac4                 | LR__0195
03ac4     45 FA 05 F6 | 	mov	result1, #69
03ac8     2C 02 90 FD | 	jmp	#LR__0266
03acc                 | LR__0196
03acc     45 FA 05 F6 | 	mov	result1, #69
03ad0     24 02 90 FD | 	jmp	#LR__0266
03ad4                 | LR__0197
03ad4     69 FA 05 F6 | 	mov	result1, #105
03ad8     1C 02 90 FD | 	jmp	#LR__0266
03adc                 | LR__0198
03adc     40 FA 05 F6 | 	mov	result1, #64
03ae0     14 02 90 FD | 	jmp	#LR__0266
03ae4                 | LR__0199
03ae4     49 FA 05 F6 | 	mov	result1, #73
03ae8     0C 02 90 FD | 	jmp	#LR__0266
03aec                 | LR__0200
03aec     49 FA 05 F6 | 	mov	result1, #73
03af0     04 02 90 FD | 	jmp	#LR__0266
03af4                 | LR__0201
03af4     50 FA 05 F6 | 	mov	result1, #80
03af8     FC 01 90 FD | 	jmp	#LR__0266
03afc                 | LR__0202
03afc     50 FA 05 F6 | 	mov	result1, #80
03b00     F4 01 90 FD | 	jmp	#LR__0266
03b04                 | LR__0203
03b04     68 FA 05 F6 | 	mov	result1, #104
03b08     EC 01 90 FD | 	jmp	#LR__0266
03b0c                 | LR__0204
03b0c     73 FA 05 F6 | 	mov	result1, #115
03b10     E4 01 90 FD | 	jmp	#LR__0266
03b14                 | LR__0205
03b14     74 FA 05 F6 | 	mov	result1, #116
03b18     DC 01 90 FD | 	jmp	#LR__0266
03b1c                 | LR__0206
03b1c     6C FA 05 F6 | 	mov	result1, #108
03b20     D4 01 90 FD | 	jmp	#LR__0266
03b24                 | LR__0207
03b24     6C FA 05 F6 | 	mov	result1, #108
03b28     CC 01 90 FD | 	jmp	#LR__0266
03b2c                 | LR__0208
03b2c     72 FA 05 F6 | 	mov	result1, #114
03b30     C4 01 90 FD | 	jmp	#LR__0266
03b34                 | LR__0209
03b34     5D FA 05 F6 | 	mov	result1, #93
03b38     BC 01 90 FD | 	jmp	#LR__0266
03b3c                 | LR__0210
03b3c     43 FA 05 F6 | 	mov	result1, #67
03b40     B4 01 90 FD | 	jmp	#LR__0266
03b44                 | LR__0211
03b44     43 FA 05 F6 | 	mov	result1, #67
03b48     AC 01 90 FD | 	jmp	#LR__0266
03b4c                 | LR__0212
03b4c     5A FA 05 F6 | 	mov	result1, #90
03b50     A4 01 90 FD | 	jmp	#LR__0266
03b54                 | LR__0213
03b54     46 FA 05 F6 | 	mov	result1, #70
03b58     9C 01 90 FD | 	jmp	#LR__0266
03b5c                 | LR__0214
03b5c     46 FA 05 F6 | 	mov	result1, #70
03b60     94 01 90 FD | 	jmp	#LR__0266
03b64                 | LR__0215
03b64     71 FA 05 F6 | 	mov	result1, #113
03b68     8C 01 90 FD | 	jmp	#LR__0266
03b6c                 | LR__0216
03b6c     71 FA 05 F6 | 	mov	result1, #113
03b70     84 01 90 FD | 	jmp	#LR__0266
03b74                 | LR__0217
03b74     60 FA 05 F6 | 	mov	result1, #96
03b78     7C 01 90 FD | 	jmp	#LR__0266
03b7c                 | LR__0218
03b7c     4A FA 05 F6 | 	mov	result1, #74
03b80     74 01 90 FD | 	jmp	#LR__0266
03b84                 | LR__0219
03b84     4A FA 05 F6 | 	mov	result1, #74
03b88     6C 01 90 FD | 	jmp	#LR__0266
03b8c                 | LR__0220
03b8c     48 FA 05 F6 | 	mov	result1, #72
03b90     64 01 90 FD | 	jmp	#LR__0266
03b94                 | LR__0221
03b94     48 FA 05 F6 | 	mov	result1, #72
03b98     5C 01 90 FD | 	jmp	#LR__0266
03b9c                 | LR__0222
03b9c     4E FA 05 F6 | 	mov	result1, #78
03ba0     54 01 90 FD | 	jmp	#LR__0266
03ba4                 | LR__0223
03ba4     4E FA 05 F6 | 	mov	result1, #78
03ba8     4C 01 90 FD | 	jmp	#LR__0266
03bac                 | LR__0224
03bac     58 FA 05 F6 | 	mov	result1, #88
03bb0     44 01 90 FD | 	jmp	#LR__0266
03bb4                 | LR__0225
03bb4     5F FA 05 F6 | 	mov	result1, #95
03bb8     3C 01 90 FD | 	jmp	#LR__0266
03bbc                 | LR__0226
03bbc     5F FA 05 F6 | 	mov	result1, #95
03bc0     34 01 90 FD | 	jmp	#LR__0266
03bc4                 | LR__0227
03bc4     4C FA 05 F6 | 	mov	result1, #76
03bc8     2C 01 90 FD | 	jmp	#LR__0266
03bcc                 | LR__0228
03bcc     4C FA 05 F6 | 	mov	result1, #76
03bd0     24 01 90 FD | 	jmp	#LR__0266
03bd4                 | LR__0229
03bd4     52 FA 05 F6 | 	mov	result1, #82
03bd8     1C 01 90 FD | 	jmp	#LR__0266
03bdc                 | LR__0230
03bdc     52 FA 05 F6 | 	mov	result1, #82
03be0     14 01 90 FD | 	jmp	#LR__0266
03be4                 | LR__0231
03be4     61 FA 05 F6 | 	mov	result1, #97
03be8     0C 01 90 FD | 	jmp	#LR__0266
03bec                 | LR__0232
03bec     61 FA 05 F6 | 	mov	result1, #97
03bf0     04 01 90 FD | 	jmp	#LR__0266
03bf4                 | LR__0233
03bf4     63 FA 05 F6 | 	mov	result1, #99
03bf8     FC 00 90 FD | 	jmp	#LR__0266
03bfc                 | LR__0234
03bfc     41 FA 05 F6 | 	mov	result1, #65
03c00     F4 00 90 FD | 	jmp	#LR__0266
03c04                 | LR__0235
03c04     4B FA 05 F6 | 	mov	result1, #75
03c08     EC 00 90 FD | 	jmp	#LR__0266
03c0c                 | LR__0236
03c0c     4B FA 05 F6 | 	mov	result1, #75
03c10     E4 00 90 FD | 	jmp	#LR__0266
03c14                 | LR__0237
03c14     5E FA 05 F6 | 	mov	result1, #94
03c18     DC 00 90 FD | 	jmp	#LR__0266
03c1c                 | LR__0238
03c1c     5E FA 05 F6 | 	mov	result1, #94
03c20     D4 00 90 FD | 	jmp	#LR__0266
03c24                 | LR__0239
03c24     7C FA 05 F6 | 	mov	result1, #124
03c28     CC 00 90 FD | 	jmp	#LR__0266
03c2c                 | LR__0240
03c2c     7E FA 05 F6 | 	mov	result1, #126
03c30     C4 00 90 FD | 	jmp	#LR__0266
03c34                 | LR__0241
03c34     7D FA 05 F6 | 	mov	result1, #125
03c38     BC 00 90 FD | 	jmp	#LR__0266
03c3c                 | LR__0242
03c3c     7F FA 05 F6 | 	mov	result1, #127
03c40     B4 00 90 FD | 	jmp	#LR__0266
03c44                 | LR__0243
03c44     80 FA 05 F6 | 	mov	result1, #128
03c48     AC 00 90 FD | 	jmp	#LR__0266
03c4c                 | LR__0244
03c4c     55 FA 05 F6 | 	mov	result1, #85
03c50     A4 00 90 FD | 	jmp	#LR__0266
03c54                 | LR__0245
03c54     75 FA 05 F6 | 	mov	result1, #117
03c58     9C 00 90 FD | 	jmp	#LR__0266
03c5c                 | LR__0246
03c5c     42 FA 05 F6 | 	mov	result1, #66
03c60     94 00 90 FD | 	jmp	#LR__0266
03c64                 | LR__0247
03c64     42 FA 05 F6 | 	mov	result1, #66
03c68     8C 00 90 FD | 	jmp	#LR__0266
03c6c                 | LR__0248
03c6c     81 FA 05 F6 | 	mov	result1, #129
03c70     84 00 90 FD | 	jmp	#LR__0266
03c74                 | LR__0249
03c74     81 FA 05 F6 | 	mov	result1, #129
03c78     7C 00 90 FD | 	jmp	#LR__0266
03c7c                 | LR__0250
03c7c     44 FA 05 F6 | 	mov	result1, #68
03c80     74 00 90 FD | 	jmp	#LR__0266
03c84                 | LR__0251
03c84     44 FA 05 F6 | 	mov	result1, #68
03c88     6C 00 90 FD | 	jmp	#LR__0266
03c8c                 | LR__0252
03c8c     4D FA 05 F6 | 	mov	result1, #77
03c90     64 00 90 FD | 	jmp	#LR__0266
03c94                 | LR__0253
03c94     51 FA 05 F6 | 	mov	result1, #81
03c98     5C 00 90 FD | 	jmp	#LR__0266
03c9c                 | LR__0254
03c9c     51 FA 05 F6 | 	mov	result1, #81
03ca0     54 00 90 FD | 	jmp	#LR__0266
03ca4                 | LR__0255
03ca4     6D FA 05 F6 | 	mov	result1, #109
03ca8     4C 00 90 FD | 	jmp	#LR__0266
03cac                 | LR__0256
03cac     6D FA 05 F6 | 	mov	result1, #109
03cb0     44 00 90 FD | 	jmp	#LR__0266
03cb4                 | LR__0257
03cb4     5B FA 05 F6 | 	mov	result1, #91
03cb8     3C 00 90 FD | 	jmp	#LR__0266
03cbc                 | LR__0258
03cbc     56 FA 05 F6 | 	mov	result1, #86
03cc0     34 00 90 FD | 	jmp	#LR__0266
03cc4                 | LR__0259
03cc4     70 FA 05 F6 | 	mov	result1, #112
03cc8     2C 00 90 FD | 	jmp	#LR__0266
03ccc                 | LR__0260
03ccc     70 FA 05 F6 | 	mov	result1, #112
03cd0     24 00 90 FD | 	jmp	#LR__0266
03cd4                 | LR__0261
03cd4     57 FA 05 F6 | 	mov	result1, #87
03cd8     1C 00 90 FD | 	jmp	#LR__0266
03cdc                 | LR__0262
03cdc     57 FA 05 F6 | 	mov	result1, #87
03ce0     14 00 90 FD | 	jmp	#LR__0266
03ce4                 | LR__0263
03ce4     77 FA 05 F6 | 	mov	result1, #119
03ce8     0C 00 90 FD | 	jmp	#LR__0266
03cec                 | LR__0264
03cec     78 FA 05 F6 | 	mov	result1, #120
03cf0     04 00 90 FD | 	jmp	#LR__0266
03cf4                 | LR__0265
03cf4     00 FA 05 F6 | 	mov	result1, #0
03cf8                 | LR__0266
03cf8     A7 F0 03 F6 | 	mov	ptra, fp
03cfc     B2 00 A0 FD | 	call	#popregs_
03d00                 | _iscommand_ret
03d00     2D 00 64 FD | 	ret
03d04                 | 
03d04                 | ' 
03d04                 | ' function isfunction(s as string) as ubyte
03d04                 | _isfunction
03d04     01 4A 05 F6 | 	mov	COUNT_, #1
03d08     A8 00 A0 FD | 	call	#pushregs_
03d0c                 | ' 
03d0c                 | ' select case s
03d0c     09 1F 02 F6 | 	mov	local01, arg01
03d10     3F 01 00 FF 
03d14     47 15 06 F6 | 	mov	arg02, ##@LR__4467
03d18     0F 13 02 F6 | 	mov	arg01, local01
03d1c     D0 4B B1 FD | 	call	#__system___string_cmp
03d20     00 FA 0D F2 | 	cmp	result1, #0 wz
03d24     CC 01 90 AD |  if_e	jmp	#LR__0270
03d28     3F 01 00 FF 
03d2c     4C 15 06 F6 | 	mov	arg02, ##@LR__4468
03d30     0F 13 02 F6 | 	mov	arg01, local01
03d34     B8 4B B1 FD | 	call	#__system___string_cmp
03d38     00 FA 0D F2 | 	cmp	result1, #0 wz
03d3c     BC 01 90 AD |  if_e	jmp	#LR__0271
03d40     3F 01 00 FF 
03d44     51 15 06 F6 | 	mov	arg02, ##@LR__4469
03d48     0F 13 02 F6 | 	mov	arg01, local01
03d4c     A0 4B B1 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     AC 01 90 AD |  if_e	jmp	#LR__0272
03d58     3F 01 00 FF 
03d5c     55 15 06 F6 | 	mov	arg02, ##@LR__4470
03d60     0F 13 02 F6 | 	mov	arg01, local01
03d64     88 4B B1 FD | 	call	#__system___string_cmp
03d68     00 FA 0D F2 | 	cmp	result1, #0 wz
03d6c     9C 01 90 AD |  if_e	jmp	#LR__0273
03d70     3F 01 00 FF 
03d74     59 15 06 F6 | 	mov	arg02, ##@LR__4471
03d78     0F 13 02 F6 | 	mov	arg01, local01
03d7c     70 4B B1 FD | 	call	#__system___string_cmp
03d80     00 FA 0D F2 | 	cmp	result1, #0 wz
03d84     8C 01 90 AD |  if_e	jmp	#LR__0274
03d88     3F 01 00 FF 
03d8c     62 15 06 F6 | 	mov	arg02, ##@LR__4472
03d90     0F 13 02 F6 | 	mov	arg01, local01
03d94     58 4B B1 FD | 	call	#__system___string_cmp
03d98     00 FA 0D F2 | 	cmp	result1, #0 wz
03d9c     7C 01 90 AD |  if_e	jmp	#LR__0275
03da0     3F 01 00 FF 
03da4     66 15 06 F6 | 	mov	arg02, ##@LR__4473
03da8     0F 13 02 F6 | 	mov	arg01, local01
03dac     40 4B B1 FD | 	call	#__system___string_cmp
03db0     00 FA 0D F2 | 	cmp	result1, #0 wz
03db4     6C 01 90 AD |  if_e	jmp	#LR__0276
03db8     3F 01 00 FF 
03dbc     6E 15 06 F6 | 	mov	arg02, ##@LR__4474
03dc0     0F 13 02 F6 | 	mov	arg01, local01
03dc4     28 4B B1 FD | 	call	#__system___string_cmp
03dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03dcc     5C 01 90 AD |  if_e	jmp	#LR__0277
03dd0     3F 01 00 FF 
03dd4     75 15 06 F6 | 	mov	arg02, ##@LR__4475
03dd8     0F 13 02 F6 | 	mov	arg01, local01
03ddc     10 4B B1 FD | 	call	#__system___string_cmp
03de0     00 FA 0D F2 | 	cmp	result1, #0 wz
03de4     4C 01 90 AD |  if_e	jmp	#LR__0278
03de8     3F 01 00 FF 
03dec     7C 15 06 F6 | 	mov	arg02, ##@LR__4476
03df0     0F 13 02 F6 | 	mov	arg01, local01
03df4     F8 4A B1 FD | 	call	#__system___string_cmp
03df8     00 FA 0D F2 | 	cmp	result1, #0 wz
03dfc     3C 01 90 AD |  if_e	jmp	#LR__0279
03e00     3F 01 00 FF 
03e04     83 15 06 F6 | 	mov	arg02, ##@LR__4477
03e08     0F 13 02 F6 | 	mov	arg01, local01
03e0c     E0 4A B1 FD | 	call	#__system___string_cmp
03e10     00 FA 0D F2 | 	cmp	result1, #0 wz
03e14     2C 01 90 AD |  if_e	jmp	#LR__0280
03e18     3F 01 00 FF 
03e1c     8A 15 06 F6 | 	mov	arg02, ##@LR__4478
03e20     0F 13 02 F6 | 	mov	arg01, local01
03e24     C8 4A B1 FD | 	call	#__system___string_cmp
03e28     00 FA 0D F2 | 	cmp	result1, #0 wz
03e2c     1C 01 90 AD |  if_e	jmp	#LR__0281
03e30     3F 01 00 FF 
03e34     92 15 06 F6 | 	mov	arg02, ##@LR__4479
03e38     0F 13 02 F6 | 	mov	arg01, local01
03e3c     B0 4A B1 FD | 	call	#__system___string_cmp
03e40     00 FA 0D F2 | 	cmp	result1, #0 wz
03e44     0C 01 90 AD |  if_e	jmp	#LR__0282
03e48     3F 01 00 FF 
03e4c     98 15 06 F6 | 	mov	arg02, ##@LR__4480
03e50     0F 13 02 F6 | 	mov	arg01, local01
03e54     98 4A B1 FD | 	call	#__system___string_cmp
03e58     00 FA 0D F2 | 	cmp	result1, #0 wz
03e5c     FC 00 90 AD |  if_e	jmp	#LR__0283
03e60     3F 01 00 FF 
03e64     9E 15 06 F6 | 	mov	arg02, ##@LR__4481
03e68     0F 13 02 F6 | 	mov	arg01, local01
03e6c     80 4A B1 FD | 	call	#__system___string_cmp
03e70     00 FA 0D F2 | 	cmp	result1, #0 wz
03e74     EC 00 90 AD |  if_e	jmp	#LR__0284
03e78     3F 01 00 FF 
03e7c     A2 15 06 F6 | 	mov	arg02, ##@LR__4482
03e80     0F 13 02 F6 | 	mov	arg01, local01
03e84     68 4A B1 FD | 	call	#__system___string_cmp
03e88     00 FA 0D F2 | 	cmp	result1, #0 wz
03e8c     DC 00 90 AD |  if_e	jmp	#LR__0285
03e90     3F 01 00 FF 
03e94     A6 15 06 F6 | 	mov	arg02, ##@LR__4483
03e98     0F 13 02 F6 | 	mov	arg01, local01
03e9c     50 4A B1 FD | 	call	#__system___string_cmp
03ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea4     CC 00 90 AD |  if_e	jmp	#LR__0286
03ea8     3F 01 00 FF 
03eac     AA 15 06 F6 | 	mov	arg02, ##@LR__4484
03eb0     0F 13 02 F6 | 	mov	arg01, local01
03eb4     38 4A B1 FD | 	call	#__system___string_cmp
03eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ebc     BC 00 90 AD |  if_e	jmp	#LR__0287
03ec0     3F 01 00 FF 
03ec4     B0 15 06 F6 | 	mov	arg02, ##@LR__4485
03ec8     0F 13 02 F6 | 	mov	arg01, local01
03ecc     20 4A B1 FD | 	call	#__system___string_cmp
03ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed4     AC 00 90 AD |  if_e	jmp	#LR__0288
03ed8     3F 01 00 FF 
03edc     B6 15 06 F6 | 	mov	arg02, ##@LR__4486
03ee0     0F 13 02 F6 | 	mov	arg01, local01
03ee4     08 4A B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     9C 00 90 AD |  if_e	jmp	#LR__0289
03ef0     A0 00 90 FD | 	jmp	#LR__0290
03ef4                 | LR__0270
03ef4     85 FA 05 F6 | 	mov	result1, #133
03ef8     9C 00 90 FD | 	jmp	#LR__0291
03efc                 | LR__0271
03efc     84 FA 05 F6 | 	mov	result1, #132
03f00     94 00 90 FD | 	jmp	#LR__0291
03f04                 | LR__0272
03f04     86 FA 05 F6 | 	mov	result1, #134
03f08     8C 00 90 FD | 	jmp	#LR__0291
03f0c                 | LR__0273
03f0c     82 FA 05 F6 | 	mov	result1, #130
03f10     84 00 90 FD | 	jmp	#LR__0291
03f14                 | LR__0274
03f14     6F FA 05 F6 | 	mov	result1, #111
03f18     7C 00 90 FD | 	jmp	#LR__0291
03f1c                 | LR__0275
03f1c     6F FA 05 F6 | 	mov	result1, #111
03f20     74 00 90 FD | 	jmp	#LR__0291
03f24                 | LR__0276
03f24     62 FA 05 F6 | 	mov	result1, #98
03f28     6C 00 90 FD | 	jmp	#LR__0291
03f2c                 | LR__0277
03f2c     66 FA 05 F6 | 	mov	result1, #102
03f30     64 00 90 FD | 	jmp	#LR__0291
03f34                 | LR__0278
03f34     67 FA 05 F6 | 	mov	result1, #103
03f38     5C 00 90 FD | 	jmp	#LR__0291
03f3c                 | LR__0279
03f3c     64 FA 05 F6 | 	mov	result1, #100
03f40     54 00 90 FD | 	jmp	#LR__0291
03f44                 | LR__0280
03f44     65 FA 05 F6 | 	mov	result1, #101
03f48     4C 00 90 FD | 	jmp	#LR__0291
03f4c                 | LR__0281
03f4c     7B FA 05 F6 | 	mov	result1, #123
03f50     44 00 90 FD | 	jmp	#LR__0291
03f54                 | LR__0282
03f54     76 FA 05 F6 | 	mov	result1, #118
03f58     3C 00 90 FD | 	jmp	#LR__0291
03f5c                 | LR__0283
03f5c     7A FA 05 F6 | 	mov	result1, #122
03f60     34 00 90 FD | 	jmp	#LR__0291
03f64                 | LR__0284
03f64     54 FA 05 F6 | 	mov	result1, #84
03f68     2C 00 90 FD | 	jmp	#LR__0291
03f6c                 | LR__0285
03f6c     6B FA 05 F6 | 	mov	result1, #107
03f70     24 00 90 FD | 	jmp	#LR__0291
03f74                 | LR__0286
03f74     87 FA 05 F6 | 	mov	result1, #135
03f78     1C 00 90 FD | 	jmp	#LR__0291
03f7c                 | LR__0287
03f7c     6A FA 05 F6 | 	mov	result1, #106
03f80     14 00 90 FD | 	jmp	#LR__0291
03f84                 | LR__0288
03f84     6E FA 05 F6 | 	mov	result1, #110
03f88     0C 00 90 FD | 	jmp	#LR__0291
03f8c                 | LR__0289
03f8c     83 FA 05 F6 | 	mov	result1, #131
03f90     04 00 90 FD | 	jmp	#LR__0291
03f94                 | LR__0290
03f94     00 FA 05 F6 | 	mov	result1, #0
03f98                 | LR__0291
03f98     A7 F0 03 F6 | 	mov	ptra, fp
03f9c     B2 00 A0 FD | 	call	#popregs_
03fa0                 | _isfunction_ret
03fa0     2D 00 64 FD | 	ret
03fa4                 | 
03fa4                 | ' 
03fa4                 | ' function isname(s as string) as boolean
03fa4                 | _isname
03fa4     0D 4A 05 F6 | 	mov	COUNT_, #13
03fa8     A8 00 A0 FD | 	call	#pushregs_
03fac     09 1F 02 F6 | 	mov	local01, arg01
03fb0     09 21 02 F6 | 	mov	local02, arg01
03fb4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03fb8                 | LR__0300
03fb8     10 FB C9 FA | 	rdbyte	result1, local02 wz
03fbc     01 20 06 51 |  if_ne	add	local02, #1
03fc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03fc4                 | LR__0301
03fc4     09 21 82 F1 | 	sub	local02, arg01
03fc8     10 FB 01 F6 | 	mov	result1, local02
03fcc     FD 22 0A F6 | 	mov	local03, result1 wz
03fd0     00 FA 05 A6 |  if_e	mov	result1, #0
03fd4     34 02 90 AD |  if_e	jmp	#LR__0313
03fd8     0F 13 02 F6 | 	mov	arg01, local01
03fdc     01 14 06 F6 | 	mov	arg02, #1
03fe0     01 16 06 F6 | 	mov	arg03, #1
03fe4     04 6A B1 FD | 	call	#__system__Mid_S
03fe8     FD 24 02 F6 | 	mov	local04, result1
03fec                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03fec     3F 01 00 FF 
03ff0     BA 15 06 F6 | 	mov	arg02, ##@LR__4487
03ff4     12 13 02 F6 | 	mov	arg01, local04
03ff8     F4 48 B1 FD | 	call	#__system___string_cmp
03ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
04000     18 00 90 CD |  if_b	jmp	#LR__0302
04004     3F 01 00 FF 
04008     BC 15 06 F6 | 	mov	arg02, ##@LR__4488
0400c     12 13 02 F6 | 	mov	arg01, local04
04010     DC 48 B1 FD | 	call	#__system___string_cmp
04014     01 FA 55 F2 | 	cmps	result1, #1 wc
04018     1C 00 90 CD |  if_b	jmp	#LR__0303
0401c                 | LR__0302
0401c     3F 01 00 FF 
04020     BE 15 06 F6 | 	mov	arg02, ##@LR__4489
04024     12 13 02 F6 | 	mov	arg01, local04
04028     C4 48 B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     00 FA 05 56 |  if_ne	mov	result1, #0
04034     D4 01 90 5D |  if_ne	jmp	#LR__0313
04038                 | LR__0303
04038                 | ' if l>2 then 
04038     03 22 56 F2 | 	cmps	local03, #3 wc
0403c     C8 01 90 CD |  if_b	jmp	#LR__0312
04040                 | '   for i=2 to l
04040     02 26 06 F6 | 	mov	local05, #2
04044     11 29 02 F6 | 	mov	local06, local03
04048     01 28 06 F1 | 	add	local06, #1
0404c                 | LR__0304
0404c     14 27 52 F2 | 	cmps	local05, local06 wc
04050     B4 01 90 3D |  if_ae	jmp	#LR__0311
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     13 15 02 F6 | 	mov	arg02, local05
0405c     01 16 06 F6 | 	mov	arg03, #1
04060     88 69 B1 FD | 	call	#__system__Mid_S
04064     FD 24 02 F6 | 	mov	local04, result1
04068                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04068     11 27 52 F2 | 	cmps	local05, local03 wc
0406c     9C 00 90 3D |  if_ae	jmp	#LR__0307
04070     3F 01 00 FF 
04074     C0 15 06 F6 | 	mov	arg02, ##@LR__4490
04078     12 13 02 F6 | 	mov	arg01, local04
0407c     70 48 B1 FD | 	call	#__system___string_cmp
04080     00 FA 55 F2 | 	cmps	result1, #0 wc
04084     18 00 90 CD |  if_b	jmp	#LR__0305
04088     3F 01 00 FF 
0408c     C2 15 06 F6 | 	mov	arg02, ##@LR__4491
04090     12 13 02 F6 | 	mov	arg01, local04
04094     58 48 B1 FD | 	call	#__system___string_cmp
04098     01 FA 55 F2 | 	cmps	result1, #1 wc
0409c     6C 00 90 CD |  if_b	jmp	#LR__0307
040a0                 | LR__0305
040a0     3F 01 00 FF 
040a4     C4 15 06 F6 | 	mov	arg02, ##@LR__4492
040a8     12 13 02 F6 | 	mov	arg01, local04
040ac     40 48 B1 FD | 	call	#__system___string_cmp
040b0     00 FA 55 F2 | 	cmps	result1, #0 wc
040b4     18 00 90 CD |  if_b	jmp	#LR__0306
040b8     3F 01 00 FF 
040bc     C6 15 06 F6 | 	mov	arg02, ##@LR__4493
040c0     12 13 02 F6 | 	mov	arg01, local04
040c4     28 48 B1 FD | 	call	#__system___string_cmp
040c8     01 FA 55 F2 | 	cmps	result1, #1 wc
040cc     3C 00 90 CD |  if_b	jmp	#LR__0307
040d0                 | LR__0306
040d0     3F 01 00 FF 
040d4     C8 2B 06 F6 | 	mov	local07, ##@LR__4494
040d8     12 13 02 F6 | 	mov	arg01, local04
040dc     15 15 02 F6 | 	mov	arg02, local07
040e0     0C 48 B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     20 00 90 AD |  if_e	jmp	#LR__0307
040ec     3F 01 00 FF 
040f0     CA 2D 06 F6 | 	mov	local08, ##@LR__4495
040f4     12 13 02 F6 | 	mov	arg01, local04
040f8     16 15 02 F6 | 	mov	arg02, local08
040fc     F0 47 B1 FD | 	call	#__system___string_cmp
04100     FD 2E 0A F6 | 	mov	local09, result1 wz
04104     00 FA 05 56 |  if_ne	mov	result1, #0
04108     00 01 90 5D |  if_ne	jmp	#LR__0313
0410c                 | LR__0307
0410c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0410c     11 27 0A F2 | 	cmp	local05, local03 wz
04110     EC 00 90 5D |  if_ne	jmp	#LR__0310
04114     3F 01 00 FF 
04118     CC 31 06 F6 | 	mov	local10, ##@LR__4496
0411c     12 13 02 F6 | 	mov	arg01, local04
04120     18 15 02 F6 | 	mov	arg02, local10
04124     C8 47 B1 FD | 	call	#__system___string_cmp
04128     FD 32 02 F6 | 	mov	local11, result1
0412c     00 32 56 F2 | 	cmps	local11, #0 wc
04130     1C 00 90 CD |  if_b	jmp	#LR__0308
04134     3F 01 00 FF 
04138     CE 15 06 F6 | 	mov	arg02, ##@LR__4497
0413c     12 13 02 F6 | 	mov	arg01, local04
04140     AC 47 B1 FD | 	call	#__system___string_cmp
04144     FD 30 02 F6 | 	mov	local10, result1
04148     01 30 56 F2 | 	cmps	local10, #1 wc
0414c     B0 00 90 CD |  if_b	jmp	#LR__0310
04150                 | LR__0308
04150     3F 01 00 FF 
04154     D0 15 06 F6 | 	mov	arg02, ##@LR__4498
04158     12 13 02 F6 | 	mov	arg01, local04
0415c     90 47 B1 FD | 	call	#__system___string_cmp
04160     00 FA 55 F2 | 	cmps	result1, #0 wc
04164     1C 00 90 CD |  if_b	jmp	#LR__0309
04168     3F 01 00 FF 
0416c     D2 2F 06 F6 | 	mov	local09, ##@LR__4499
04170     12 13 02 F6 | 	mov	arg01, local04
04174     17 15 02 F6 | 	mov	arg02, local09
04178     74 47 B1 FD | 	call	#__system___string_cmp
0417c     01 FA 55 F2 | 	cmps	result1, #1 wc
04180     7C 00 90 CD |  if_b	jmp	#LR__0310
04184                 | LR__0309
04184     3F 01 00 FF 
04188     D4 2F 06 F6 | 	mov	local09, ##@LR__4500
0418c     12 13 02 F6 | 	mov	arg01, local04
04190     17 15 02 F6 | 	mov	arg02, local09
04194     58 47 B1 FD | 	call	#__system___string_cmp
04198     00 FA 4D F2 | 	cmps	result1, #0 wz
0419c     60 00 90 AD |  if_e	jmp	#LR__0310
041a0     3F 01 00 FF 
041a4     D6 2D 06 F6 | 	mov	local08, ##@LR__4501
041a8     12 13 02 F6 | 	mov	arg01, local04
041ac     16 15 02 F6 | 	mov	arg02, local08
041b0     3C 47 B1 FD | 	call	#__system___string_cmp
041b4     FD 2E 0A F6 | 	mov	local09, result1 wz
041b8     44 00 90 AD |  if_e	jmp	#LR__0310
041bc     3F 01 00 FF 
041c0     D8 35 06 F6 | 	mov	local12, ##@LR__4502
041c4     1A 2D 02 F6 | 	mov	local08, local12
041c8     12 13 02 F6 | 	mov	arg01, local04
041cc     16 15 02 F6 | 	mov	arg02, local08
041d0     1C 47 B1 FD | 	call	#__system___string_cmp
041d4     FD 2A 0A F6 | 	mov	local07, result1 wz
041d8     24 00 90 AD |  if_e	jmp	#LR__0310
041dc     3F 01 00 FF 
041e0     DA 37 06 F6 | 	mov	local13, ##@LR__4503
041e4     1B 35 02 F6 | 	mov	local12, local13
041e8     12 13 02 F6 | 	mov	arg01, local04
041ec     1A 15 02 F6 | 	mov	arg02, local12
041f0     FC 46 B1 FD | 	call	#__system___string_cmp
041f4     FD 2C 0A F6 | 	mov	local08, result1 wz
041f8     00 FA 05 56 |  if_ne	mov	result1, #0
041fc     0C 00 90 5D |  if_ne	jmp	#LR__0313
04200                 | LR__0310
04200     01 26 06 F1 | 	add	local05, #1
04204     44 FE 9F FD | 	jmp	#LR__0304
04208                 | LR__0311
04208                 | LR__0312
04208                 | ' return true
04208     01 FA 65 F6 | 	neg	result1, #1
0420c                 | LR__0313
0420c     A7 F0 03 F6 | 	mov	ptra, fp
04210     B2 00 A0 FD | 	call	#popregs_
04214                 | _isname_ret
04214     2D 00 64 FD | 	ret
04218                 | 
04218                 | ' 
04218                 | ' function isnum(s as string) as boolean
04218                 | _isnum
04218     0D 4A 05 F6 | 	mov	COUNT_, #13
0421c     A8 00 A0 FD | 	call	#pushregs_
04220     09 1F 02 F6 | 	mov	local01, arg01
04224     00 20 06 F6 | 	mov	local02, #0
04228     00 22 06 F6 | 	mov	local03, #0
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     09 25 02 F6 | 	mov	local04, arg01
04234     97 06 48 FB | 	callpa	#(@LR__0321-@LR__0320)>>2,fcache_load_ptr_
04238                 | LR__0320
04238     12 FB C9 FA | 	rdbyte	result1, local04 wz
0423c     01 24 06 51 |  if_ne	add	local04, #1
04240     F4 FF 9F 5D |  if_ne	jmp	#LR__0320
04244                 | LR__0321
04244     09 25 82 F1 | 	sub	local04, arg01
04248     12 FB 01 F6 | 	mov	result1, local04
0424c     FD 26 0A F6 | 	mov	local05, result1 wz
04250     00 FA 05 A6 |  if_e	mov	result1, #0
04254     8C 02 90 AD |  if_e	jmp	#LR__0332
04258     0F 13 02 F6 | 	mov	arg01, local01
0425c     01 14 06 F6 | 	mov	arg02, #1
04260     01 16 06 F6 | 	mov	arg03, #1
04264     84 67 B1 FD | 	call	#__system__Mid_S
04268     FD 28 02 F6 | 	mov	local06, result1
0426c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0426c     3F 01 00 FF 
04270     DC 15 06 F6 | 	mov	arg02, ##@LR__4504
04274     14 13 02 F6 | 	mov	arg01, local06
04278     74 46 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 55 F2 | 	cmps	result1, #0 wc
04280     18 00 90 CD |  if_b	jmp	#LR__0322
04284     3F 01 00 FF 
04288     DE 15 06 F6 | 	mov	arg02, ##@LR__4505
0428c     14 13 02 F6 | 	mov	arg01, local06
04290     5C 46 B1 FD | 	call	#__system___string_cmp
04294     01 FA 55 F2 | 	cmps	result1, #1 wc
04298     78 00 90 CD |  if_b	jmp	#LR__0323
0429c                 | LR__0322
0429c     3F 01 00 FF 
042a0     E0 15 06 F6 | 	mov	arg02, ##@LR__4506
042a4     14 13 02 F6 | 	mov	arg01, local06
042a8     44 46 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     60 00 90 AD |  if_e	jmp	#LR__0323
042b4     3F 01 00 FF 
042b8     E2 2B 06 F6 | 	mov	local07, ##@LR__4507
042bc     14 13 02 F6 | 	mov	arg01, local06
042c0     15 15 02 F6 | 	mov	arg02, local07
042c4     28 46 B1 FD | 	call	#__system___string_cmp
042c8     00 FA 0D F2 | 	cmp	result1, #0 wz
042cc     44 00 90 AD |  if_e	jmp	#LR__0323
042d0     3F 01 00 FF 
042d4     E4 2D 06 F6 | 	mov	local08, ##@LR__4508
042d8     16 2B 02 F6 | 	mov	local07, local08
042dc     14 13 02 F6 | 	mov	arg01, local06
042e0     15 15 02 F6 | 	mov	arg02, local07
042e4     08 46 B1 FD | 	call	#__system___string_cmp
042e8     00 FA 4D F2 | 	cmps	result1, #0 wz
042ec     24 00 90 AD |  if_e	jmp	#LR__0323
042f0     3F 01 00 FF 
042f4     E6 2F 06 F6 | 	mov	local09, ##@LR__4509
042f8     17 2D 02 F6 | 	mov	local08, local09
042fc     14 13 02 F6 | 	mov	arg01, local06
04300     16 15 02 F6 | 	mov	arg02, local08
04304     E8 45 B1 FD | 	call	#__system___string_cmp
04308     FD 2A 0A F6 | 	mov	local07, result1 wz
0430c     00 FA 05 56 |  if_ne	mov	result1, #0
04310     D0 01 90 5D |  if_ne	jmp	#LR__0332
04314                 | LR__0323
04314                 | ' if m$="." then ds=1
04314     3F 01 00 FF 
04318     E8 15 06 F6 | 	mov	arg02, ##@LR__4510
0431c     14 13 02 F6 | 	mov	arg01, local06
04320     CC 45 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     01 20 06 A6 |  if_e	mov	local02, #1
0432c                 | ' if l>1 then 
0432c     02 26 56 F2 | 	cmps	local05, #2 wc
04330     AC 01 90 CD |  if_b	jmp	#LR__0331
04334                 | '   for i=2 to l
04334     02 30 06 F6 | 	mov	local10, #2
04338     13 33 02 F6 | 	mov	local11, local05
0433c     01 32 06 F1 | 	add	local11, #1
04340                 | LR__0324
04340     19 31 52 F2 | 	cmps	local10, local11 wc
04344     98 01 90 3D |  if_ae	jmp	#LR__0330
04348     0F 13 02 F6 | 	mov	arg01, local01
0434c     18 15 02 F6 | 	mov	arg02, local10
04350     01 16 06 F6 | 	mov	arg03, #1
04354     94 66 B1 FD | 	call	#__system__Mid_S
04358     FD 28 02 F6 | 	mov	local06, result1
0435c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
0435c     3F 01 00 FF 
04360     EA 15 06 F6 | 	mov	arg02, ##@LR__4511
04364     14 13 02 F6 | 	mov	arg01, local06
04368     84 45 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 55 F2 | 	cmps	result1, #0 wc
04370     18 00 90 CD |  if_b	jmp	#LR__0325
04374     3F 01 00 FF 
04378     EC 15 06 F6 | 	mov	arg02, ##@LR__4512
0437c     14 13 02 F6 | 	mov	arg01, local06
04380     6C 45 B1 FD | 	call	#__system___string_cmp
04384     01 FA 55 F2 | 	cmps	result1, #1 wc
04388     98 00 90 CD |  if_b	jmp	#LR__0326
0438c                 | LR__0325
0438c     3F 01 00 FF 
04390     EE 15 06 F6 | 	mov	arg02, ##@LR__4513
04394     14 13 02 F6 | 	mov	arg01, local06
04398     54 45 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     80 00 90 AD |  if_e	jmp	#LR__0326
043a4     3F 01 00 FF 
043a8     F0 2B 06 F6 | 	mov	local07, ##@LR__4514
043ac     14 13 02 F6 | 	mov	arg01, local06
043b0     15 15 02 F6 | 	mov	arg02, local07
043b4     38 45 B1 FD | 	call	#__system___string_cmp
043b8     00 FA 4D F2 | 	cmps	result1, #0 wz
043bc     64 00 90 AD |  if_e	jmp	#LR__0326
043c0     3F 01 00 FF 
043c4     F2 2D 06 F6 | 	mov	local08, ##@LR__4515
043c8     16 2B 02 F6 | 	mov	local07, local08
043cc     14 13 02 F6 | 	mov	arg01, local06
043d0     15 15 02 F6 | 	mov	arg02, local07
043d4     18 45 B1 FD | 	call	#__system___string_cmp
043d8     FD 34 0A F6 | 	mov	local12, result1 wz
043dc     44 00 90 AD |  if_e	jmp	#LR__0326
043e0     3F 01 00 FF 
043e4     F4 2F 06 F6 | 	mov	local09, ##@LR__4516
043e8     17 2D 02 F6 | 	mov	local08, local09
043ec     14 13 02 F6 | 	mov	arg01, local06
043f0     16 15 02 F6 | 	mov	arg02, local08
043f4     F8 44 B1 FD | 	call	#__system___string_cmp
043f8     FD 2A 0A F6 | 	mov	local07, result1 wz
043fc     24 00 90 AD |  if_e	jmp	#LR__0326
04400     3F 01 00 FF 
04404     F6 37 06 F6 | 	mov	local13, ##@LR__4517
04408     1B 2F 02 F6 | 	mov	local09, local13
0440c     14 13 02 F6 | 	mov	arg01, local06
04410     17 15 02 F6 | 	mov	arg02, local09
04414     D8 44 B1 FD | 	call	#__system___string_cmp
04418     FD 2C 0A F6 | 	mov	local08, result1 wz
0441c     00 FA 05 56 |  if_ne	mov	result1, #0
04420     C0 00 90 5D |  if_ne	jmp	#LR__0332
04424                 | LR__0326
04424                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04424     3F 01 00 FF 
04428     F8 15 06 F6 | 	mov	arg02, ##@LR__4518
0442c     14 13 02 F6 | 	mov	arg01, local06
04430     BC 44 B1 FD | 	call	#__system___string_cmp
04434     00 FA 0D F2 | 	cmp	result1, #0 wz
04438     38 00 90 5D |  if_ne	jmp	#LR__0327
0443c     18 15 02 F6 | 	mov	arg02, local10
04440     01 14 86 F1 | 	sub	arg02, #1
04444     0F 13 02 F6 | 	mov	arg01, local01
04448     01 16 06 F6 | 	mov	arg03, #1
0444c     9C 65 B1 FD | 	call	#__system__Mid_S
04450     FD 12 02 F6 | 	mov	arg01, result1
04454     30 67 B1 FD | 	call	#__system__LCase_S
04458     FD 12 02 F6 | 	mov	arg01, result1
0445c     3F 01 00 FF 
04460     FA 15 06 F6 | 	mov	arg02, ##@LR__4519
04464     88 44 B1 FD | 	call	#__system___string_cmp
04468     00 FA 0D F2 | 	cmp	result1, #0 wz
0446c     00 FA 05 56 |  if_ne	mov	result1, #0
04470     70 00 90 5D |  if_ne	jmp	#LR__0332
04474                 | LR__0327
04474                 | '     if m$="." then ds+=1: if ds>1 then return false
04474     3F 01 00 FF 
04478     FC 15 06 F6 | 	mov	arg02, ##@LR__4520
0447c     14 13 02 F6 | 	mov	arg01, local06
04480     6C 44 B1 FD | 	call	#__system___string_cmp
04484     00 FA 0D F2 | 	cmp	result1, #0 wz
04488     01 20 06 A1 |  if_e	add	local02, #1
0448c     02 20 56 A2 |  if_e	cmps	local02, #2 wc
04490     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04494     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0332
04498                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04498     3F 01 00 FF 
0449c     FE 15 06 F6 | 	mov	arg02, ##@LR__4521
044a0     14 13 02 F6 | 	mov	arg01, local06
044a4     48 44 B1 FD | 	call	#__system___string_cmp
044a8     00 FA 4D F2 | 	cmps	result1, #0 wz
044ac     18 00 90 AD |  if_e	jmp	#LR__0328
044b0     40 01 00 FF 
044b4     00 14 06 F6 | 	mov	arg02, ##@LR__4522
044b8     14 13 02 F6 | 	mov	arg01, local06
044bc     30 44 B1 FD | 	call	#__system___string_cmp
044c0     00 FA 4D F2 | 	cmps	result1, #0 wz
044c4     10 00 90 5D |  if_ne	jmp	#LR__0329
044c8                 | LR__0328
044c8     01 22 06 F1 | 	add	local03, #1
044cc     02 22 56 F2 | 	cmps	local03, #2 wc
044d0     00 FA 05 36 |  if_ae	mov	result1, #0
044d4     0C 00 90 3D |  if_ae	jmp	#LR__0332
044d8                 | LR__0329
044d8     01 30 06 F1 | 	add	local10, #1
044dc     60 FE 9F FD | 	jmp	#LR__0324
044e0                 | LR__0330
044e0                 | LR__0331
044e0                 | ' return true
044e0     01 FA 65 F6 | 	neg	result1, #1
044e4                 | LR__0332
044e4     A7 F0 03 F6 | 	mov	ptra, fp
044e8     B2 00 A0 FD | 	call	#popregs_
044ec                 | _isnum_ret
044ec     2D 00 64 FD | 	ret
044f0                 | 
044f0                 | '   
044f0                 | ' function isint(s as string) as boolean
044f0                 | _isint
044f0     05 4A 05 F6 | 	mov	COUNT_, #5
044f4     A8 00 A0 FD | 	call	#pushregs_
044f8     09 1F 02 F6 | 	mov	local01, arg01
044fc     09 21 02 F6 | 	mov	local02, arg01
04500     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
04504                 | LR__0340
04504     10 FB C9 FA | 	rdbyte	result1, local02 wz
04508     01 20 06 51 |  if_ne	add	local02, #1
0450c     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
04510                 | LR__0341
04510     09 21 82 F1 | 	sub	local02, arg01
04514     10 FB 01 F6 | 	mov	result1, local02
04518     FD 20 0A F6 | 	mov	local02, result1 wz
0451c     00 FA 05 A6 |  if_e	mov	result1, #0
04520     18 01 90 AD |  if_e	jmp	#LR__0349
04524     0F 13 02 F6 | 	mov	arg01, local01
04528     01 14 06 F6 | 	mov	arg02, #1
0452c     01 16 06 F6 | 	mov	arg03, #1
04530     B8 64 B1 FD | 	call	#__system__Mid_S
04534     FD 22 02 F6 | 	mov	local03, result1
04538                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04538     40 01 00 FF 
0453c     02 14 06 F6 | 	mov	arg02, ##@LR__4523
04540     11 13 02 F6 | 	mov	arg01, local03
04544     A8 43 B1 FD | 	call	#__system___string_cmp
04548     00 FA 55 F2 | 	cmps	result1, #0 wc
0454c     18 00 90 CD |  if_b	jmp	#LR__0342
04550     40 01 00 FF 
04554     04 14 06 F6 | 	mov	arg02, ##@LR__4524
04558     11 13 02 F6 | 	mov	arg01, local03
0455c     90 43 B1 FD | 	call	#__system___string_cmp
04560     01 FA 55 F2 | 	cmps	result1, #1 wc
04564     4C 00 90 CD |  if_b	jmp	#LR__0343
04568                 | LR__0342
04568     40 01 00 FF 
0456c     06 14 06 F6 | 	mov	arg02, ##@LR__4525
04570     11 13 02 F6 | 	mov	arg01, local03
04574     78 43 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     34 00 90 AD |  if_e	jmp	#LR__0343
04580     40 01 00 FF 
04584     08 14 06 F6 | 	mov	arg02, ##@LR__4526
04588     11 13 02 F6 | 	mov	arg01, local03
0458c     60 43 B1 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     1C 00 90 AD |  if_e	jmp	#LR__0343
04598     40 01 00 FF 
0459c     0A 14 06 F6 | 	mov	arg02, ##@LR__4527
045a0     11 13 02 F6 | 	mov	arg01, local03
045a4     48 43 B1 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     00 FA 05 56 |  if_ne	mov	result1, #0
045b0     88 00 90 5D |  if_ne	jmp	#LR__0349
045b4                 | LR__0343
045b4                 | ' 
045b4                 | ' if l>1 then 
045b4     02 20 56 F2 | 	cmps	local02, #2 wc
045b8     7C 00 90 CD |  if_b	jmp	#LR__0348
045bc                 | '   for i=2 to l
045bc     02 24 06 F6 | 	mov	local04, #2
045c0     10 27 02 F6 | 	mov	local05, local02
045c4     01 26 06 F1 | 	add	local05, #1
045c8                 | LR__0344
045c8     13 25 52 F2 | 	cmps	local04, local05 wc
045cc     68 00 90 3D |  if_ae	jmp	#LR__0347
045d0     0F 13 02 F6 | 	mov	arg01, local01
045d4     12 15 02 F6 | 	mov	arg02, local04
045d8     01 16 06 F6 | 	mov	arg03, #1
045dc     0C 64 B1 FD | 	call	#__system__Mid_S
045e0     FD 22 02 F6 | 	mov	local03, result1
045e4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
045e4     40 01 00 FF 
045e8     0C 14 06 F6 | 	mov	arg02, ##@LR__4528
045ec     11 13 02 F6 | 	mov	arg01, local03
045f0     FC 42 B1 FD | 	call	#__system___string_cmp
045f4     00 FA 55 F2 | 	cmps	result1, #0 wc
045f8     18 00 90 CD |  if_b	jmp	#LR__0345
045fc     40 01 00 FF 
04600     0E 14 06 F6 | 	mov	arg02, ##@LR__4529
04604     11 13 02 F6 | 	mov	arg01, local03
04608     E4 42 B1 FD | 	call	#__system___string_cmp
0460c     01 FA 55 F2 | 	cmps	result1, #1 wc
04610     1C 00 90 CD |  if_b	jmp	#LR__0346
04614                 | LR__0345
04614     40 01 00 FF 
04618     10 14 06 F6 | 	mov	arg02, ##@LR__4530
0461c     11 13 02 F6 | 	mov	arg01, local03
04620     CC 42 B1 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     00 FA 05 56 |  if_ne	mov	result1, #0
0462c     0C 00 90 5D |  if_ne	jmp	#LR__0349
04630                 | LR__0346
04630     01 24 06 F1 | 	add	local04, #1
04634     90 FF 9F FD | 	jmp	#LR__0344
04638                 | LR__0347
04638                 | LR__0348
04638                 | ' return true
04638     01 FA 65 F6 | 	neg	result1, #1
0463c                 | LR__0349
0463c     A7 F0 03 F6 | 	mov	ptra, fp
04640     B2 00 A0 FD | 	call	#popregs_
04644                 | _isint_ret
04644     2D 00 64 FD | 	ret
04648                 | 
04648                 | ' 
04648                 | ' function isdec(s as string) as boolean
04648                 | _isdec
04648     05 4A 05 F6 | 	mov	COUNT_, #5
0464c     A8 00 A0 FD | 	call	#pushregs_
04650     09 1F 02 F6 | 	mov	local01, arg01
04654     09 21 02 F6 | 	mov	local02, arg01
04658     97 06 48 FB | 	callpa	#(@LR__0351-@LR__0350)>>2,fcache_load_ptr_
0465c                 | LR__0350
0465c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04660     01 20 06 51 |  if_ne	add	local02, #1
04664     F4 FF 9F 5D |  if_ne	jmp	#LR__0350
04668                 | LR__0351
04668     09 21 82 F1 | 	sub	local02, arg01
0466c     10 FB 01 F6 | 	mov	result1, local02
04670     FD 20 0A F6 | 	mov	local02, result1 wz
04674     00 FA 05 A6 |  if_e	mov	result1, #0
04678     80 00 90 AD |  if_e	jmp	#LR__0356
0467c                 | ' for i=1 to l
0467c     01 22 06 F6 | 	mov	local03, #1
04680     10 25 02 F6 | 	mov	local04, local02
04684     01 24 06 F1 | 	add	local04, #1
04688                 | LR__0352
04688     12 23 52 F2 | 	cmps	local03, local04 wc
0468c     68 00 90 3D |  if_ae	jmp	#LR__0355
04690     0F 13 02 F6 | 	mov	arg01, local01
04694     11 15 02 F6 | 	mov	arg02, local03
04698     01 16 06 F6 | 	mov	arg03, #1
0469c     4C 63 B1 FD | 	call	#__system__Mid_S
046a0     FD 26 02 F6 | 	mov	local05, result1
046a4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
046a4     40 01 00 FF 
046a8     12 14 06 F6 | 	mov	arg02, ##@LR__4531
046ac     13 13 02 F6 | 	mov	arg01, local05
046b0     3C 42 B1 FD | 	call	#__system___string_cmp
046b4     00 FA 55 F2 | 	cmps	result1, #0 wc
046b8     18 00 90 CD |  if_b	jmp	#LR__0353
046bc     40 01 00 FF 
046c0     14 14 06 F6 | 	mov	arg02, ##@LR__4532
046c4     13 13 02 F6 | 	mov	arg01, local05
046c8     24 42 B1 FD | 	call	#__system___string_cmp
046cc     01 FA 55 F2 | 	cmps	result1, #1 wc
046d0     1C 00 90 CD |  if_b	jmp	#LR__0354
046d4                 | LR__0353
046d4     40 01 00 FF 
046d8     16 14 06 F6 | 	mov	arg02, ##@LR__4533
046dc     13 13 02 F6 | 	mov	arg01, local05
046e0     0C 42 B1 FD | 	call	#__system___string_cmp
046e4     00 FA 0D F2 | 	cmp	result1, #0 wz
046e8     00 FA 05 56 |  if_ne	mov	result1, #0
046ec     0C 00 90 5D |  if_ne	jmp	#LR__0356
046f0                 | LR__0354
046f0     01 22 06 F1 | 	add	local03, #1
046f4     90 FF 9F FD | 	jmp	#LR__0352
046f8                 | LR__0355
046f8                 | ' return true
046f8     01 FA 65 F6 | 	neg	result1, #1
046fc                 | LR__0356
046fc     A7 F0 03 F6 | 	mov	ptra, fp
04700     B2 00 A0 FD | 	call	#popregs_
04704                 | _isdec_ret
04704     2D 00 64 FD | 	ret
04708                 | 
04708                 | ' 
04708                 | ' function isstring(s as string) as boolean
04708                 | _isstring
04708     01 4A 05 F6 | 	mov	COUNT_, #1
0470c     A8 00 A0 FD | 	call	#pushregs_
04710                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
04710     09 1F 02 F6 | 	mov	local01, arg01
04714     01 14 06 F6 | 	mov	arg02, #1
04718     B8 61 B1 FD | 	call	#__system__Left_S
0471c     FD 12 02 F6 | 	mov	arg01, result1
04720     40 01 00 FF 
04724     18 14 06 F6 | 	mov	arg02, ##@LR__4534
04728     C4 41 B1 FD | 	call	#__system___string_cmp
0472c     00 FA 4D F2 | 	cmps	result1, #0 wz
04730     28 00 90 5D |  if_ne	jmp	#LR__0360
04734     0F 13 02 F6 | 	mov	arg01, local01
04738     01 14 06 F6 | 	mov	arg02, #1
0473c     1C 62 B1 FD | 	call	#__system__Right_S
04740     FD 12 02 F6 | 	mov	arg01, result1
04744     40 01 00 FF 
04748     1A 14 06 F6 | 	mov	arg02, ##@LR__4535
0474c     A0 41 B1 FD | 	call	#__system___string_cmp
04750     00 FA 4D F2 | 	cmps	result1, #0 wz
04754     01 FA 65 A6 |  if_e	neg	result1, #1
04758     04 00 90 AD |  if_e	jmp	#LR__0361
0475c                 | LR__0360
0475c     00 FA 05 F6 | 	mov	result1, #0
04760                 | LR__0361
04760     A7 F0 03 F6 | 	mov	ptra, fp
04764     B2 00 A0 FD | 	call	#popregs_
04768                 | _isstring_ret
04768     2D 00 64 FD | 	ret
0476c                 | 
0476c                 | ' 
0476c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
0476c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0476c                 | ' 
0476c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0476c                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
0476c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0476c                 | ' 
0476c                 | ' '----- delete a line from a program
0476c                 | ' 
0476c                 | ' function deleteline(aline as ulong) as integer
0476c                 | _deleteline
0476c     03 4A 05 F6 | 	mov	COUNT_, #3
04770     A8 00 A0 FD | 	call	#pushregs_
04774     2C F0 07 F1 | 	add	ptra, #44
04778     04 4E 05 F1 | 	add	fp, #4
0477c     A7 12 62 FC | 	wrlong	arg01, fp
04780     69 00 00 FF 
04784     58 E4 05 F1 | 	add	objptr, ##53848
04788     F2 1E 02 FB | 	rdlong	local01, objptr
0478c     0C 4E 05 F1 | 	add	fp, #12
04790     A7 1E 62 FC | 	wrlong	local01, fp
04794     10 4E 85 F1 | 	sub	fp, #16
04798                 | ' 
04798                 | ' 
04798                 | ' searchptr=programstart
04798                 | ' 
04798                 | ' do
04798     5D 00 00 FF 
0479c     98 E5 85 F1 | 	sub	objptr, ##48024
047a0                 | LR__0370
047a0     14 4E 05 F1 | 	add	fp, #20
047a4     A7 12 02 F6 | 	mov	arg01, fp
047a8     04 4E 85 F1 | 	sub	fp, #4
047ac     A7 14 02 FB | 	rdlong	arg02, fp
047b0     10 4E 85 F1 | 	sub	fp, #16
047b4     18 16 06 F6 | 	mov	arg03, #24
047b8     1C 36 B1 FD | 	call	#_psram_spin2_read1
047bc     10 4E 05 F1 | 	add	fp, #16
047c0     A7 1E 02 FB | 	rdlong	local01, fp
047c4     08 4E 85 F1 | 	sub	fp, #8
047c8     A7 1E 62 FC | 	wrlong	local01, fp
047cc     20 4E 05 F1 | 	add	fp, #32
047d0     A7 1E 02 FB | 	rdlong	local01, fp
047d4     18 4E 85 F1 | 	sub	fp, #24
047d8     A7 1E 62 FC | 	wrlong	local01, fp
047dc     04 4E 05 F1 | 	add	fp, #4
047e0     A7 1E 02 FB | 	rdlong	local01, fp
047e4     10 4E 85 F1 | 	sub	fp, #16
047e8     A7 16 02 FB | 	rdlong	arg03, fp
047ec     04 4E 85 F1 | 	sub	fp, #4
047f0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
047f4     28 4E 05 C1 |  if_b	add	fp, #40
047f8     A7 20 02 CB |  if_b	rdlong	local02, fp
047fc     28 4E 85 C1 |  if_b	sub	fp, #40
04800     FF FF 3F CF 
04804     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04808     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0370
0480c     0B 00 00 FF 
04810     C0 E4 85 F1 | 	sub	objptr, ##5824
04814                 | ' 
04814                 | ' 
04814                 | ' if header(0)<>aline then return -1
04814     14 4E 05 F1 | 	add	fp, #20
04818     A7 1E 02 FB | 	rdlong	local01, fp
0481c     10 4E 85 F1 | 	sub	fp, #16
04820     A7 22 02 FB | 	rdlong	local03, fp
04824     04 4E 85 F1 | 	sub	fp, #4
04828     11 1F 0A F2 | 	cmp	local01, local03 wz
0482c     01 FA 65 56 |  if_ne	neg	result1, #1
04830     4C 03 90 5D |  if_ne	jmp	#LR__0376
04834     08 4E 05 F1 | 	add	fp, #8
04838     A7 12 02 FB | 	rdlong	arg01, fp
0483c     08 4E 85 F1 | 	sub	fp, #8
04840     01 14 66 F6 | 	neg	arg02, #1
04844     01 16 06 F6 | 	mov	arg03, #1
04848     00 18 06 F6 | 	mov	arg04, #0
0484c     0B 00 00 FF 
04850     C0 E4 05 F1 | 	add	objptr, ##5824
04854                 | '     return fill(addr, pattern, count, listPtr, 4)
04854     04 1A 06 F6 | 	mov	arg05, #4
04858     B4 36 B1 FD | 	call	#_psram_spin2_fill
0485c     0B 00 00 FF 
04860     C0 E4 85 F1 | 	sub	objptr, ##5824
04864                 | ' 
04864                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
04864                 | ' 
04864                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
04864     28 4E 05 F1 | 	add	fp, #40
04868     A7 1E 02 FB | 	rdlong	local01, fp
0486c     28 4E 85 F1 | 	sub	fp, #40
04870     FF FF 3F FF 
04874     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04878     24 4E 05 A1 |  if_e	add	fp, #36
0487c     A7 22 02 AB |  if_e	rdlong	local03, fp
04880     24 4E 85 A1 |  if_e	sub	fp, #36
04884     FF FF 7F AF 
04888     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
0488c     90 00 90 5D |  if_ne	jmp	#LR__0371
04890     69 00 00 FF 
04894     58 E4 05 F1 | 	add	objptr, ##53848
04898     F2 00 68 FC | 	wrlong	#0, objptr
0489c     07 00 00 FF 
048a0     28 E4 85 F1 | 	sub	objptr, ##3624
048a4     F2 00 68 FC | 	wrlong	#0, objptr
048a8     07 00 00 FF 
048ac     2C E4 05 F1 | 	add	objptr, ##3628
048b0     F2 00 68 FC | 	wrlong	#0, objptr
048b4     04 E4 05 F1 | 	add	objptr, #4
048b8     FF FF FF FF 
048bc     F2 FE 6B FC | 	wrlong	##-1, objptr
048c0     00 12 06 F6 | 	mov	arg01, #0
048c4     10 E4 85 F1 | 	sub	objptr, #16
048c8     F2 00 68 FC | 	wrlong	#0, objptr
048cc     01 14 66 F6 | 	neg	arg02, #1
048d0     01 16 06 F6 | 	mov	arg03, #1
048d4     00 18 06 F6 | 	mov	arg04, #0
048d8     5D 00 00 FF 
048dc     90 E5 85 F1 | 	sub	objptr, ##48016
048e0                 | '     return fill(addr, pattern, count, listPtr, 4)
048e0     04 1A 06 F6 | 	mov	arg05, #4
048e4     28 36 B1 FD | 	call	#_psram_spin2_fill
048e8     10 12 06 F6 | 	mov	arg01, #16
048ec     01 14 66 F6 | 	neg	arg02, #1
048f0     01 16 06 F6 | 	mov	arg03, #1
048f4     00 18 06 F6 | 	mov	arg04, #0
048f8                 | '     return fill(addr, pattern, count, listPtr, 4)
048f8     04 1A 06 F6 | 	mov	arg05, #4
048fc     10 36 B1 FD | 	call	#_psram_spin2_fill
04900     14 12 06 F6 | 	mov	arg01, #20
04904     1E 14 CE F9 | 	bmask	arg02, #30
04908     01 16 06 F6 | 	mov	arg03, #1
0490c     00 18 06 F6 | 	mov	arg04, #0
04910                 | '     return fill(addr, pattern, count, listPtr, 4)
04910     04 1A 06 F6 | 	mov	arg05, #4
04914     F8 35 B1 FD | 	call	#_psram_spin2_fill
04918     0B 00 00 FF 
0491c     C0 E4 85 F1 | 	sub	objptr, ##5824
04920                 | LR__0371
04920                 | ' 
04920                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
04920     28 4E 05 F1 | 	add	fp, #40
04924     A7 1E 02 FB | 	rdlong	local01, fp
04928     28 4E 85 F1 | 	sub	fp, #40
0492c     FF FF 3F FF 
04930     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04934     88 00 90 5D |  if_ne	jmp	#LR__0372
04938     24 4E 05 F1 | 	add	fp, #36
0493c     A7 22 02 FB | 	rdlong	local03, fp
04940     24 4E 85 F1 | 	sub	fp, #36
04944     FF FF 7F FF 
04948     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0494c     70 00 90 AD |  if_e	jmp	#LR__0372
04950     24 4E 05 F1 | 	add	fp, #36
04954     A7 12 02 FB | 	rdlong	arg01, fp
04958     24 4E 85 F1 | 	sub	fp, #36
0495c     14 12 06 F1 | 	add	arg01, #20
04960     1E 14 CE F9 | 	bmask	arg02, #30
04964     01 16 06 F6 | 	mov	arg03, #1
04968     00 18 06 F6 | 	mov	arg04, #0
0496c     0B 00 00 FF 
04970     C0 E4 05 F1 | 	add	objptr, ##5824
04974                 | '     return fill(addr, pattern, count, listPtr, 4)
04974     04 1A 06 F6 | 	mov	arg05, #4
04978     94 35 B1 FD | 	call	#_psram_spin2_fill
0497c     24 4E 05 F1 | 	add	fp, #36
04980     A7 1E 02 FB | 	rdlong	local01, fp
04984     5D 00 00 FF 
04988     A0 E5 05 F1 | 	add	objptr, ##48032
0498c     F2 1E 62 FC | 	wrlong	local01, objptr
04990     69 00 00 FF 
04994     60 E4 85 F1 | 	sub	objptr, ##53856
04998     A7 12 02 FB | 	rdlong	arg01, fp
0499c     24 4E 85 F1 | 	sub	fp, #36
049a0     BC 0B B1 FD | 	call	#_pslpeek
049a4     69 00 00 FF 
049a8     5C E4 05 F1 | 	add	objptr, ##53852
049ac     F2 FA 61 FC | 	wrlong	result1, objptr
049b0     69 00 00 FF 
049b4     5C E4 85 F1 | 	sub	objptr, ##53852
049b8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
049b8                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
049b8                 | '   lastline=pslpeek(header(4))
049b8                 | '   return 0
049b8     00 FA 05 F6 | 	mov	result1, #0
049bc     C0 01 90 FD | 	jmp	#LR__0376
049c0                 | LR__0372
049c0                 | ' 
049c0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
049c0     28 4E 05 F1 | 	add	fp, #40
049c4     A7 1E 02 FB | 	rdlong	local01, fp
049c8     28 4E 85 F1 | 	sub	fp, #40
049cc     FF FF 3F FF 
049d0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
049d4     6C 00 90 AD |  if_e	jmp	#LR__0373
049d8     24 4E 05 F1 | 	add	fp, #36
049dc     A7 22 02 FB | 	rdlong	local03, fp
049e0     24 4E 85 F1 | 	sub	fp, #36
049e4     FF FF 7F FF 
049e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
049ec     54 00 90 5D |  if_ne	jmp	#LR__0373
049f0     28 4E 05 F1 | 	add	fp, #40
049f4     A7 12 02 FB | 	rdlong	arg01, fp
049f8     28 4E 85 F1 | 	sub	fp, #40
049fc     10 12 06 F1 | 	add	arg01, #16
04a00     01 14 66 F6 | 	neg	arg02, #1
04a04     01 16 06 F6 | 	mov	arg03, #1
04a08     00 18 06 F6 | 	mov	arg04, #0
04a0c     0B 00 00 FF 
04a10     C0 E4 05 F1 | 	add	objptr, ##5824
04a14                 | '     return fill(addr, pattern, count, listPtr, 4)
04a14     04 1A 06 F6 | 	mov	arg05, #4
04a18     F4 34 B1 FD | 	call	#_psram_spin2_fill
04a1c     28 4E 05 F1 | 	add	fp, #40
04a20     A7 1E 02 FB | 	rdlong	local01, fp
04a24     28 4E 85 F1 | 	sub	fp, #40
04a28     5D 00 00 FF 
04a2c     98 E5 05 F1 | 	add	objptr, ##48024
04a30     F2 1E 62 FC | 	wrlong	local01, objptr
04a34     69 00 00 FF 
04a38     58 E4 85 F1 | 	sub	objptr, ##53848
04a3c                 | ' '   print "deleted first line"
04a3c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04a3c                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04a3c                 | '   return 0
04a3c     00 FA 05 F6 | 	mov	result1, #0
04a40     3C 01 90 FD | 	jmp	#LR__0376
04a44                 | LR__0373
04a44                 | ' 
04a44                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
04a44     28 4E 05 F1 | 	add	fp, #40
04a48     A7 1E 02 FB | 	rdlong	local01, fp
04a4c     28 4E 85 F1 | 	sub	fp, #40
04a50     FF FF 3F FF 
04a54     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
04a58     24 4E 05 51 |  if_ne	add	fp, #36
04a5c     A7 22 02 5B |  if_ne	rdlong	local03, fp
04a60     24 4E 85 51 |  if_ne	sub	fp, #36
04a64     FF FF 7F 5F 
04a68     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
04a6c     68 00 90 AD |  if_e	jmp	#LR__0374
04a70     28 4E 05 F1 | 	add	fp, #40
04a74     A7 12 02 FB | 	rdlong	arg01, fp
04a78     10 12 06 F1 | 	add	arg01, #16
04a7c     04 4E 85 F1 | 	sub	fp, #4
04a80     A7 14 02 FB | 	rdlong	arg02, fp
04a84     24 4E 85 F1 | 	sub	fp, #36
04a88     01 16 06 F6 | 	mov	arg03, #1
04a8c     00 18 06 F6 | 	mov	arg04, #0
04a90     0B 00 00 FF 
04a94     C0 E4 05 F1 | 	add	objptr, ##5824
04a98                 | '     return fill(addr, pattern, count, listPtr, 4)
04a98     04 1A 06 F6 | 	mov	arg05, #4
04a9c     70 34 B1 FD | 	call	#_psram_spin2_fill
04aa0     24 4E 05 F1 | 	add	fp, #36
04aa4     A7 12 02 FB | 	rdlong	arg01, fp
04aa8     14 12 06 F1 | 	add	arg01, #20
04aac     04 4E 05 F1 | 	add	fp, #4
04ab0     A7 14 02 FB | 	rdlong	arg02, fp
04ab4     28 4E 85 F1 | 	sub	fp, #40
04ab8     01 16 06 F6 | 	mov	arg03, #1
04abc     00 18 06 F6 | 	mov	arg04, #0
04ac0                 | '     return fill(addr, pattern, count, listPtr, 4)
04ac0     04 1A 06 F6 | 	mov	arg05, #4
04ac4     48 34 B1 FD | 	call	#_psram_spin2_fill
04ac8     0B 00 00 FF 
04acc     C0 E4 85 F1 | 	sub	objptr, ##5824
04ad0                 | '    pslpoke(header(5)+16,header(4))  
04ad0                 | '    pslpoke(header(4)+20, header(5))
04ad0                 | '    return 0
04ad0     00 FA 05 F6 | 	mov	result1, #0
04ad4     A8 00 90 FD | 	jmp	#LR__0376
04ad8                 | LR__0374
04ad8     10 4E 05 F1 | 	add	fp, #16
04adc     A7 1E 02 FB | 	rdlong	local01, fp
04ae0     08 4E 85 F1 | 	sub	fp, #8
04ae4     A7 1E 62 FC | 	wrlong	local01, fp
04ae8     69 00 00 FF 
04aec     58 E4 05 F1 | 	add	objptr, ##53848
04af0     F2 1E 02 FB | 	rdlong	local01, objptr
04af4     08 4E 05 F1 | 	add	fp, #8
04af8     A7 1E 62 FC | 	wrlong	local01, fp
04afc     10 4E 85 F1 | 	sub	fp, #16
04b00                 | ' 
04b00                 | ' 
04b00                 | ' 
04b00                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04b00                 | ' 
04b00                 | ' lineptr2=searchptr
04b00                 | ' searchptr=programstart
04b00                 | ' 
04b00                 | ' do
04b00     5D 00 00 FF 
04b04     98 E5 85 F1 | 	sub	objptr, ##48024
04b08                 | LR__0375
04b08     14 4E 05 F1 | 	add	fp, #20
04b0c     A7 12 02 F6 | 	mov	arg01, fp
04b10     04 4E 85 F1 | 	sub	fp, #4
04b14     A7 14 02 FB | 	rdlong	arg02, fp
04b18     10 4E 85 F1 | 	sub	fp, #16
04b1c     18 16 06 F6 | 	mov	arg03, #24
04b20     B4 32 B1 FD | 	call	#_psram_spin2_read1
04b24     10 4E 05 F1 | 	add	fp, #16
04b28     A7 1E 02 FB | 	rdlong	local01, fp
04b2c     08 4E 85 F1 | 	sub	fp, #8
04b30     A7 1E 62 FC | 	wrlong	local01, fp
04b34     20 4E 05 F1 | 	add	fp, #32
04b38     A7 1E 02 FB | 	rdlong	local01, fp
04b3c     18 4E 85 F1 | 	sub	fp, #24
04b40     A7 1E 62 FC | 	wrlong	local01, fp
04b44     04 4E 05 F1 | 	add	fp, #4
04b48     A7 1E 02 FB | 	rdlong	local01, fp
04b4c     10 4E 85 F1 | 	sub	fp, #16
04b50     A7 22 02 FB | 	rdlong	local03, fp
04b54     04 4E 85 F1 | 	sub	fp, #4
04b58     11 1F 12 F2 | 	cmp	local01, local03 wc
04b5c     28 4E 05 C1 |  if_b	add	fp, #40
04b60     A7 20 02 CB |  if_b	rdlong	local02, fp
04b64     28 4E 85 C1 |  if_b	sub	fp, #40
04b68     FF FF 3F CF 
04b6c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04b70     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0375
04b74     0B 00 00 FF 
04b78     C0 E4 85 F1 | 	sub	objptr, ##5824
04b7c     00 FA 05 F6 | 	mov	result1, #0
04b80                 | LR__0376
04b80     A7 F0 03 F6 | 	mov	ptra, fp
04b84     B2 00 A0 FD | 	call	#popregs_
04b88                 | _deleteline_ret
04b88     2D 00 64 FD | 	ret
04b8c                 | 
04b8c                 | ' 
04b8c                 | ' sub save_line
04b8c                 | _save_line
04b8c     03 4A 05 F6 | 	mov	COUNT_, #3
04b90     A8 00 A0 FD | 	call	#pushregs_
04b94     69 00 00 FF 
04b98     50 E4 05 F1 | 	add	objptr, ##53840
04b9c     F2 16 02 FB | 	rdlong	arg03, objptr
04ba0     01 16 06 F1 | 	add	arg03, #1
04ba4     05 00 00 FF 
04ba8     18 E4 85 F1 | 	sub	objptr, ##2584
04bac     F2 14 02 FB | 	rdlong	arg02, objptr
04bb0     0B 15 02 FD | 	qmul	arg02, arg03
04bb4     0E 00 00 FF 
04bb8     44 E4 85 F1 | 	sub	objptr, ##7236
04bbc     F2 12 02 FB | 	rdlong	arg01, objptr
04bc0     55 00 00 FF 
04bc4     F4 E5 85 F1 | 	sub	objptr, ##44020
04bc8     09 1F 02 F6 | 	mov	local01, arg01
04bcc     18 20 62 FD | 	getqx	local02
04bd0     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04bd4                 | LR__0380
04bd4     0F FB C9 FA | 	rdbyte	result1, local01 wz
04bd8     01 1E 06 51 |  if_ne	add	local01, #1
04bdc     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04be0                 | LR__0381
04be0     09 1F 82 F1 | 	sub	local01, arg01
04be4     03 1E CE F7 | 	test	local01, #3 wz
04be8     02 1E 46 50 |  if_ne	shr	local01, #2
04bec     01 1E 06 51 |  if_ne	add	local01, #1
04bf0     02 1E 66 50 |  if_ne	shl	local01, #2
04bf4     10 23 02 F6 | 	mov	local03, local02
04bf8     0F 23 02 F1 | 	add	local03, local01
04bfc     62 00 00 FF 
04c00     30 E4 05 F1 | 	add	objptr, ##50224
04c04     F2 16 02 FB | 	rdlong	arg03, objptr
04c08     10 17 02 F1 | 	add	arg03, local02
04c0c     04 00 00 FF 
04c10     28 E4 05 F1 | 	add	objptr, ##2088
04c14     F2 16 62 FC | 	wrlong	arg03, objptr
04c18     04 E4 05 F1 | 	add	objptr, #4
04c1c     F2 1E 62 FC | 	wrlong	local01, objptr
04c20     0C E4 85 F1 | 	sub	objptr, #12
04c24     F2 12 02 F6 | 	mov	arg01, objptr
04c28     04 00 00 FF 
04c2c     20 E4 85 F1 | 	sub	objptr, ##2080
04c30     F2 14 02 FB | 	rdlong	arg02, objptr
04c34     10 17 02 F6 | 	mov	arg03, local02
04c38     56 00 00 FF 
04c3c     70 E5 85 F1 | 	sub	objptr, ##44400
04c40     30 32 B1 FD | 	call	#_psram_spin2_write
04c44     4A 00 00 FF 
04c48     34 E5 05 F1 | 	add	objptr, ##38196
04c4c     F2 12 02 FB | 	rdlong	arg01, objptr
04c50     0C 00 00 FF 
04c54     3C E4 05 F1 | 	add	objptr, ##6204
04c58     F2 14 02 FB | 	rdlong	arg02, objptr
04c5c     10 15 02 F1 | 	add	arg02, local02
04c60     0F 17 02 F6 | 	mov	arg03, local01
04c64     56 00 00 FF 
04c68     70 E5 85 F1 | 	sub	objptr, ##44400
04c6c     04 32 B1 FD | 	call	#_psram_spin2_write
04c70     56 00 00 FF 
04c74     70 E5 05 F1 | 	add	objptr, ##44400
04c78     F2 1E 02 FB | 	rdlong	local01, objptr
04c7c     11 1F 02 F1 | 	add	local01, local03
04c80     F2 1E 62 FC | 	wrlong	local01, objptr
04c84     62 00 00 FF 
04c88     30 E4 85 F1 | 	sub	objptr, ##50224
04c8c     A7 F0 03 F6 | 	mov	ptra, fp
04c90     B2 00 A0 FD | 	call	#popregs_
04c94                 | _save_line_ret
04c94     2D 00 64 FD | 	ret
04c98                 | 
04c98                 | ' 
04c98                 | ' 
04c98                 | ' function insertline(aline as ulong) as integer
04c98                 | _insertline
04c98     02 4A 05 F6 | 	mov	COUNT_, #2
04c9c     A8 00 A0 FD | 	call	#pushregs_
04ca0     28 F0 07 F1 | 	add	ptra, #40
04ca4     04 4E 05 F1 | 	add	fp, #4
04ca8     A7 12 62 FC | 	wrlong	arg01, fp
04cac     69 00 00 FF 
04cb0     58 E4 05 F1 | 	add	objptr, ##53848
04cb4     F2 1E 02 FB | 	rdlong	local01, objptr
04cb8     04 4E 05 F1 | 	add	fp, #4
04cbc     A7 1E 62 FC | 	wrlong	local01, fp
04cc0     08 4E 85 F1 | 	sub	fp, #8
04cc4                 | ' 
04cc4                 | ' do
04cc4     5D 00 00 FF 
04cc8     98 E5 85 F1 | 	sub	objptr, ##48024
04ccc                 | LR__0390
04ccc     10 4E 05 F1 | 	add	fp, #16
04cd0     A7 12 02 F6 | 	mov	arg01, fp
04cd4     08 4E 85 F1 | 	sub	fp, #8
04cd8     A7 14 02 FB | 	rdlong	arg02, fp
04cdc     08 4E 85 F1 | 	sub	fp, #8
04ce0     18 16 06 F6 | 	mov	arg03, #24
04ce4     F0 30 B1 FD | 	call	#_psram_spin2_read1
04ce8     08 4E 05 F1 | 	add	fp, #8
04cec     A7 1E 02 FB | 	rdlong	local01, fp
04cf0     04 4E 05 F1 | 	add	fp, #4
04cf4     A7 1E 62 FC | 	wrlong	local01, fp
04cf8     18 4E 05 F1 | 	add	fp, #24
04cfc     A7 1E 02 FB | 	rdlong	local01, fp
04d00     1C 4E 85 F1 | 	sub	fp, #28
04d04     A7 1E 62 FC | 	wrlong	local01, fp
04d08     08 4E 05 F1 | 	add	fp, #8
04d0c     A7 1E 02 FB | 	rdlong	local01, fp
04d10     0C 4E 85 F1 | 	sub	fp, #12
04d14     A7 16 02 FB | 	rdlong	arg03, fp
04d18     04 4E 85 F1 | 	sub	fp, #4
04d1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04d20     24 4E 05 C1 |  if_b	add	fp, #36
04d24     A7 20 02 CB |  if_b	rdlong	local02, fp
04d28     24 4E 85 C1 |  if_b	sub	fp, #36
04d2c     FF FF 3F CF 
04d30     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04d34     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0390
04d38     0B 00 00 FF 
04d3c     C0 E4 85 F1 | 	sub	objptr, ##5824
04d40                 | ' 
04d40                 | ' if header(0)=aline then return -1 ' delete it first
04d40     10 4E 05 F1 | 	add	fp, #16
04d44     A7 1E 02 FB | 	rdlong	local01, fp
04d48     0C 4E 85 F1 | 	sub	fp, #12
04d4c     A7 20 02 FB | 	rdlong	local02, fp
04d50     04 4E 85 F1 | 	sub	fp, #4
04d54     10 1F 0A F2 | 	cmp	local01, local02 wz
04d58     01 FA 65 A6 |  if_e	neg	result1, #1
04d5c     74 01 90 AD |  if_e	jmp	#LR__0393
04d60                 | ' if header(0)<aline then return -2 ' end of program reached
04d60     10 4E 05 F1 | 	add	fp, #16
04d64     A7 1E 02 FB | 	rdlong	local01, fp
04d68     0C 4E 85 F1 | 	sub	fp, #12
04d6c     A7 16 02 FB | 	rdlong	arg03, fp
04d70     04 4E 85 F1 | 	sub	fp, #4
04d74     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04d78     02 FA 65 C6 |  if_b	neg	result1, #2
04d7c     54 01 90 CD |  if_b	jmp	#LR__0393
04d80                 | ' 
04d80                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
04d80     20 4E 05 F1 | 	add	fp, #32
04d84     A7 1E 02 FB | 	rdlong	local01, fp
04d88     20 4E 85 F1 | 	sub	fp, #32
04d8c     FF FF 7F FF 
04d90     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04d94     84 00 90 5D |  if_ne	jmp	#LR__0391
04d98     62 00 00 FF 
04d9c     30 E4 05 F1 | 	add	objptr, ##50224
04da0     F2 1E 02 FB | 	rdlong	local01, objptr
04da4     07 00 00 FF 
04da8     28 E4 05 F1 | 	add	objptr, ##3624
04dac     F2 1E 62 FC | 	wrlong	local01, objptr
04db0     0C 4E 05 F1 | 	add	fp, #12
04db4     A7 12 02 FB | 	rdlong	arg01, fp
04db8     0C 4E 85 F1 | 	sub	fp, #12
04dbc     10 12 06 F1 | 	add	arg01, #16
04dc0     07 00 00 FF 
04dc4     28 E4 85 F1 | 	sub	objptr, ##3624
04dc8     F2 14 02 FB | 	rdlong	arg02, objptr
04dcc     01 16 06 F6 | 	mov	arg03, #1
04dd0     00 18 06 F6 | 	mov	arg04, #0
04dd4     56 00 00 FF 
04dd8     70 E5 85 F1 | 	sub	objptr, ##44400
04ddc                 | '     return fill(addr, pattern, count, listPtr, 4)
04ddc     04 1A 06 F6 | 	mov	arg05, #4
04de0     2C 31 B1 FD | 	call	#_psram_spin2_fill
04de4     5A 00 00 FF 
04de8     A0 E5 05 F1 | 	add	objptr, ##46496
04dec     FF FF FF FF 
04df0     F2 FE 6B FC | 	wrlong	##-1, objptr
04df4     0C 4E 05 F1 | 	add	fp, #12
04df8     A7 1E 02 FB | 	rdlong	local01, fp
04dfc     0C 4E 85 F1 | 	sub	fp, #12
04e00     04 E4 05 F1 | 	add	objptr, #4
04e04     F2 1E 62 FC | 	wrlong	local01, objptr
04e08     66 00 00 FF 
04e0c     64 E4 85 F1 | 	sub	objptr, ##52324
04e10     78 FD BF FD | 	call	#_save_line
04e14                 | '   programstart=programptr
04e14                 | '   pslpoke(lineptr2+16,programptr)
04e14                 | '   ucompiledline(4)=$FFFF_FFFF
04e14                 | '   ucompiledline(5)=lineptr2
04e14                 | '   save_line
04e14                 | '   return 0
04e14     00 FA 05 F6 | 	mov	result1, #0
04e18     B8 00 90 FD | 	jmp	#LR__0393
04e1c                 | LR__0391
04e1c                 | ' 
04e1c                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04e1c     20 4E 05 F1 | 	add	fp, #32
04e20     A7 1E 02 FB | 	rdlong	local01, fp
04e24     20 4E 85 F1 | 	sub	fp, #32
04e28     FF FF 7F FF 
04e2c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04e30     9C 00 90 AD |  if_e	jmp	#LR__0392
04e34     20 4E 05 F1 | 	add	fp, #32
04e38     A7 1E 02 FB | 	rdlong	local01, fp
04e3c     66 00 00 FF 
04e40     60 E4 05 F1 | 	add	objptr, ##52320
04e44     F2 1E 62 FC | 	wrlong	local01, objptr
04e48     14 4E 85 F1 | 	sub	fp, #20
04e4c     A7 1E 02 FB | 	rdlong	local01, fp
04e50     04 E4 05 F1 | 	add	objptr, #4
04e54     F2 1E 62 FC | 	wrlong	local01, objptr
04e58     A7 12 02 FB | 	rdlong	arg01, fp
04e5c     0C 4E 85 F1 | 	sub	fp, #12
04e60     10 12 06 F1 | 	add	arg01, #16
04e64     04 00 00 FF 
04e68     34 E4 85 F1 | 	sub	objptr, ##2100
04e6c     F2 14 02 FB | 	rdlong	arg02, objptr
04e70     01 16 06 F6 | 	mov	arg03, #1
04e74     00 18 06 F6 | 	mov	arg04, #0
04e78     56 00 00 FF 
04e7c     70 E5 85 F1 | 	sub	objptr, ##44400
04e80                 | '     return fill(addr, pattern, count, listPtr, 4)
04e80     04 1A 06 F6 | 	mov	arg05, #4
04e84     88 30 B1 FD | 	call	#_psram_spin2_fill
04e88     20 4E 05 F1 | 	add	fp, #32
04e8c     A7 12 02 FB | 	rdlong	arg01, fp
04e90     20 4E 85 F1 | 	sub	fp, #32
04e94     14 12 06 F1 | 	add	arg01, #20
04e98     56 00 00 FF 
04e9c     70 E5 05 F1 | 	add	objptr, ##44400
04ea0     F2 14 02 FB | 	rdlong	arg02, objptr
04ea4     01 16 06 F6 | 	mov	arg03, #1
04ea8     00 18 06 F6 | 	mov	arg04, #0
04eac     56 00 00 FF 
04eb0     70 E5 85 F1 | 	sub	objptr, ##44400
04eb4                 | '     return fill(addr, pattern, count, listPtr, 4)
04eb4     04 1A 06 F6 | 	mov	arg05, #4
04eb8     54 30 B1 FD | 	call	#_psram_spin2_fill
04ebc     0B 00 00 FF 
04ec0     C0 E4 85 F1 | 	sub	objptr, ##5824
04ec4     C4 FC BF FD | 	call	#_save_line
04ec8                 | '   ucompiledline(4)=header(4)
04ec8                 | '   ucompiledline(5)=lineptr2
04ec8                 | '   pslpoke(lineptr2+16,programptr)
04ec8                 | '   pslpoke(header(4)+20,programptr)
04ec8                 | '   save_line
04ec8                 | '   return 0
04ec8     00 FA 05 F6 | 	mov	result1, #0
04ecc     04 00 90 FD | 	jmp	#LR__0393
04ed0                 | LR__0392
04ed0     00 FA 05 F6 | 	mov	result1, #0
04ed4                 | LR__0393
04ed4     A7 F0 03 F6 | 	mov	ptra, fp
04ed8     B2 00 A0 FD | 	call	#popregs_
04edc                 | _insertline_ret
04edc     2D 00 64 FD | 	ret
04ee0                 | 
04ee0                 | ' 
04ee0                 | ' sub add_line_at_end(aline) 
04ee0                 | _add_line_at_end
04ee0     69 00 00 FF 
04ee4     5C E4 05 F1 | 	add	objptr, ##53852
04ee8     F2 12 62 FC | 	wrlong	arg01, objptr
04eec     04 E4 05 F1 | 	add	objptr, #4
04ef0     F2 14 02 FB | 	rdlong	arg02, objptr
04ef4     03 00 00 FF 
04ef8     00 E4 85 F1 | 	sub	objptr, ##1536
04efc     F2 14 62 FC | 	wrlong	arg02, objptr
04f00     03 00 00 FF 
04f04     00 E4 05 F1 | 	add	objptr, ##1536
04f08     F2 12 02 FB | 	rdlong	arg01, objptr
04f0c     14 12 06 F1 | 	add	arg01, #20
04f10     07 00 00 FF 
04f14     30 E4 85 F1 | 	sub	objptr, ##3632
04f18     F2 14 02 FB | 	rdlong	arg02, objptr
04f1c     01 16 06 F6 | 	mov	arg03, #1
04f20     00 18 06 F6 | 	mov	arg04, #0
04f24     56 00 00 FF 
04f28     70 E5 85 F1 | 	sub	objptr, ##44400
04f2c                 | '     return fill(addr, pattern, count, listPtr, 4)
04f2c     04 1A 06 F6 | 	mov	arg05, #4
04f30     DC 2F B1 FD | 	call	#_psram_spin2_fill
04f34     56 00 00 FF 
04f38     70 E5 05 F1 | 	add	objptr, ##44400
04f3c     F2 14 02 FB | 	rdlong	arg02, objptr
04f40     07 00 00 FF 
04f44     30 E4 05 F1 | 	add	objptr, ##3632
04f48     F2 14 62 FC | 	wrlong	arg02, objptr
04f4c     02 00 00 FF 
04f50     FC E5 85 F1 | 	sub	objptr, ##1532
04f54     FF FF BF FF 
04f58     F2 FE 6B FC | 	wrlong	##2147483647, objptr
04f5c                 | ' 
04f5c                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
04f5c                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
04f5c     04 00 00 FF 
04f60     34 E4 85 F1 | 	sub	objptr, ##2100
04f64     F2 14 0A FB | 	rdlong	arg02, objptr wz
04f68     62 00 00 FF 
04f6c     30 E4 85 F1 | 	sub	objptr, ##50224
04f70     66 00 00 AF 
04f74     60 E4 05 A1 |  if_e	add	objptr, ##52320
04f78     FF FF FF AF 
04f7c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
04f80     66 00 00 AF 
04f84     60 E4 85 A1 |  if_e	sub	objptr, ##52320
04f88     00 FC BF FD | 	call	#_save_line
04f8c     62 00 00 FF 
04f90     30 E4 05 F1 | 	add	objptr, ##50224
04f94     F2 12 02 FB | 	rdlong	arg01, objptr
04f98     01 14 66 F6 | 	neg	arg02, #1
04f9c     01 16 06 F6 | 	mov	arg03, #1
04fa0     00 18 06 F6 | 	mov	arg04, #0
04fa4     56 00 00 FF 
04fa8     70 E5 85 F1 | 	sub	objptr, ##44400
04fac                 | '     return fill(addr, pattern, count, listPtr, 4)
04fac     04 1A 06 F6 | 	mov	arg05, #4
04fb0     5C 2F B1 FD | 	call	#_psram_spin2_fill
04fb4     0B 00 00 FF 
04fb8     C0 E4 85 F1 | 	sub	objptr, ##5824
04fbc                 | _add_line_at_end_ret
04fbc     2D 00 64 FD | 	ret
04fc0                 | 
04fc0                 | ' 
04fc0                 | ' function compile_immediate(linetype as ulong) as integer
04fc0                 | _compile_immediate
04fc0     09 4A 05 F6 | 	mov	COUNT_, #9
04fc4     A8 00 A0 FD | 	call	#pushregs_
04fc8                 | _compile_immediate_enter
04fc8     09 25 0A F6 | 	mov	local04, arg01 wz
04fcc     00 26 06 F6 | 	mov	local05, #0
04fd0     00 28 06 F6 | 	mov	local06, #0
04fd4                 | ' 
04fd4                 | ' ' linetype=cont+1, linetype=0 immediate
04fd4                 | ' '  : 1: this is the first part of the line that will continue
04fd4                 | ' ' 2 - this is the continuation of the line
04fd4                 | ' ' 3 - this is the last continued line
04fd4                 | ' ' 4 - this is the one and only part
04fd4                 | ' 
04fd4                 | ' err=0
04fd4                 | ' cmd=0
04fd4                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04fd4     2C 00 90 5D |  if_ne	jmp	#LR__0400
04fd8     53 00 00 FF 
04fdc     E4 E5 05 F1 | 	add	objptr, ##42980
04fe0     F2 28 02 FB | 	rdlong	local06, objptr
04fe4     02 00 00 FF 
04fe8     34 E4 05 F1 | 	add	objptr, ##1076
04fec     F2 02 68 FC | 	wrlong	#1, objptr
04ff0     13 00 00 FF 
04ff4     38 E4 05 F1 | 	add	objptr, ##9784
04ff8     F2 00 68 FC | 	wrlong	#0, objptr
04ffc     69 00 00 FF 
05000     50 E4 85 F1 | 	sub	objptr, ##53840
05004                 | LR__0400
05004                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05004     02 24 0E F2 | 	cmp	local04, #2 wz
05008     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0500c     53 00 00 AF 
05010     E4 E5 05 A1 |  if_e	add	objptr, ##42980
05014     F2 28 02 AB |  if_e	rdlong	local06, objptr
05018     02 00 00 AF 
0501c     34 E4 05 A1 |  if_e	add	objptr, ##1076
05020     F2 02 68 AC |  if_e	wrlong	#1, objptr
05024     56 00 00 AF 
05028     18 E4 85 A1 |  if_e	sub	objptr, ##44056
0502c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0502c     04 24 0E F2 | 	cmp	local04, #4 wz
05030     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05034     2C 00 90 5D |  if_ne	jmp	#LR__0401
05038     53 00 00 FF 
0503c     EC E5 05 F1 | 	add	objptr, ##42988
05040     F2 28 02 FB | 	rdlong	local06, objptr
05044     02 00 00 FF 
05048     2C E4 05 F1 | 	add	objptr, ##1068
0504c     F2 04 68 FC | 	wrlong	#2, objptr
05050     13 00 00 FF 
05054     38 E4 05 F1 | 	add	objptr, ##9784
05058     F2 04 68 FC | 	wrlong	#2, objptr
0505c     69 00 00 FF 
05060     50 E4 85 F1 | 	sub	objptr, ##53840
05064                 | LR__0401
05064                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05064     05 24 0E F2 | 	cmp	local04, #5 wz
05068     40 00 90 5D |  if_ne	jmp	#LR__0402
0506c     56 00 00 FF 
05070     18 E4 05 F1 | 	add	objptr, ##44056
05074     F2 2A 02 FB | 	rdlong	local07, objptr
05078     15 29 02 F6 | 	mov	local06, local07
0507c     03 28 66 F0 | 	shl	local06, #3
05080     02 00 00 FF 
05084     38 E4 85 F1 | 	sub	objptr, ##1080
05088     F2 28 02 F1 | 	add	local06, objptr
0508c     04 28 06 F1 | 	add	local06, #4
05090     14 29 02 FB | 	rdlong	local06, local06
05094     01 2A 06 F1 | 	add	local07, #1
05098     02 00 00 FF 
0509c     38 E4 05 F1 | 	add	objptr, ##1080
050a0     F2 2A 62 FC | 	wrlong	local07, objptr
050a4     56 00 00 FF 
050a8     18 E4 85 F1 | 	sub	objptr, ##44056
050ac                 | LR__0402
050ac     00 2C 06 F6 | 	mov	local08, #0
050b0                 | ' vars=0
050b0                 | ' 'print  "In compile_immediate cmd=:", cmd
050b0                 | ' 451 select case cmd
050b0     40 28 0E F2 | 	cmp	local06, #64 wz
050b4     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
050b8     44 03 90 AD |  if_e	jmp	#LR__0450
050bc     4C 28 0E F2 | 	cmp	local06, #76 wz
050c0     84 01 90 AD |  if_e	jmp	#LR__0403
050c4     73 28 0E F2 | 	cmp	local06, #115 wz
050c8     88 01 90 AD |  if_e	jmp	#LR__0404
050cc     74 28 0E F2 | 	cmp	local06, #116 wz
050d0     8C 01 90 AD |  if_e	jmp	#LR__0405
050d4     75 28 0E F2 | 	cmp	local06, #117 wz
050d8     90 01 90 AD |  if_e	jmp	#LR__0406
050dc     4D 28 0E F2 | 	cmp	local06, #77 wz
050e0     1C 03 90 AD |  if_e	jmp	#LR__0450
050e4     42 28 0E F2 | 	cmp	local06, #66 wz
050e8     8C 01 90 AD |  if_e	jmp	#LR__0407
050ec     43 28 0E F2 | 	cmp	local06, #67 wz
050f0     90 01 90 AD |  if_e	jmp	#LR__0408
050f4     45 28 0E F2 | 	cmp	local06, #69 wz
050f8     94 01 90 AD |  if_e	jmp	#LR__0409
050fc     46 28 0E F2 | 	cmp	local06, #70 wz
05100     98 01 90 AD |  if_e	jmp	#LR__0410
05104     47 28 0E F2 | 	cmp	local06, #71 wz
05108     9C 01 90 AD |  if_e	jmp	#LR__0411
0510c     48 28 0E F2 | 	cmp	local06, #72 wz
05110     A0 01 90 AD |  if_e	jmp	#LR__0412
05114     49 28 0E F2 | 	cmp	local06, #73 wz
05118     A4 01 90 AD |  if_e	jmp	#LR__0413
0511c     44 28 0E F2 | 	cmp	local06, #68 wz
05120     A8 01 90 AD |  if_e	jmp	#LR__0414
05124     4E 28 0E F2 | 	cmp	local06, #78 wz
05128     AC 01 90 AD |  if_e	jmp	#LR__0415
0512c     50 28 0E F2 | 	cmp	local06, #80 wz
05130     C0 01 90 AD |  if_e	jmp	#LR__0417
05134     51 28 0E F2 | 	cmp	local06, #81 wz
05138     C0 01 90 AD |  if_e	jmp	#LR__0418
0513c     52 28 0E F2 | 	cmp	local06, #82 wz
05140     C0 01 90 AD |  if_e	jmp	#LR__0419
05144     59 28 0E F2 | 	cmp	local06, #89 wz
05148     C0 01 90 AD |  if_e	jmp	#LR__0420
0514c     55 28 0E F2 | 	cmp	local06, #85 wz
05150     C0 01 90 AD |  if_e	jmp	#LR__0421
05154     56 28 0E F2 | 	cmp	local06, #86 wz
05158     C0 01 90 AD |  if_e	jmp	#LR__0422
0515c     57 28 0E F2 | 	cmp	local06, #87 wz
05160     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
05164     98 02 90 AD |  if_e	jmp	#LR__0450
05168     58 28 0E F2 | 	cmp	local06, #88 wz
0516c     B4 01 90 AD |  if_e	jmp	#LR__0423
05170     4A 28 0E F2 | 	cmp	local06, #74 wz
05174     B4 01 90 AD |  if_e	jmp	#LR__0424
05178     4B 28 0E F2 | 	cmp	local06, #75 wz
0517c     B4 01 90 AD |  if_e	jmp	#LR__0425
05180     5A 28 0E F2 | 	cmp	local06, #90 wz
05184     B4 01 90 AD |  if_e	jmp	#LR__0426
05188     5C 28 0E F2 | 	cmp	local06, #92 wz
0518c     B4 01 90 AD |  if_e	jmp	#LR__0427
05190     5D 28 0E F2 | 	cmp	local06, #93 wz
05194     68 02 90 AD |  if_e	jmp	#LR__0450
05198     5E 28 0E F2 | 	cmp	local06, #94 wz
0519c     B0 01 90 AD |  if_e	jmp	#LR__0428
051a0     5F 28 0E F2 | 	cmp	local06, #95 wz
051a4     B0 01 90 AD |  if_e	jmp	#LR__0429
051a8     60 28 0E F2 | 	cmp	local06, #96 wz
051ac     B0 01 90 AD |  if_e	jmp	#LR__0430
051b0     61 28 0E F2 | 	cmp	local06, #97 wz
051b4     B0 01 90 AD |  if_e	jmp	#LR__0431
051b8     63 28 0E F2 | 	cmp	local06, #99 wz
051bc     B0 01 90 AD |  if_e	jmp	#LR__0432
051c0     68 28 0E F2 | 	cmp	local06, #104 wz
051c4     B0 01 90 AD |  if_e	jmp	#LR__0433
051c8     69 28 0E F2 | 	cmp	local06, #105 wz
051cc     B0 01 90 AD |  if_e	jmp	#LR__0434
051d0     6D 28 0E F2 | 	cmp	local06, #109 wz
051d4     B0 01 90 AD |  if_e	jmp	#LR__0435
051d8     6C 28 0E F2 | 	cmp	local06, #108 wz
051dc     B0 01 90 AD |  if_e	jmp	#LR__0436
051e0     71 28 0E F2 | 	cmp	local06, #113 wz
051e4     B0 01 90 AD |  if_e	jmp	#LR__0437
051e8     79 28 0E F2 | 	cmp	local06, #121 wz
051ec     B0 01 90 AD |  if_e	jmp	#LR__0438
051f0     77 28 0E F2 | 	cmp	local06, #119 wz
051f4     B0 01 90 AD |  if_e	jmp	#LR__0439
051f8     78 28 0E F2 | 	cmp	local06, #120 wz
051fc     B0 01 90 AD |  if_e	jmp	#LR__0440
05200     7C 28 0E F2 | 	cmp	local06, #124 wz
05204     B0 01 90 AD |  if_e	jmp	#LR__0441
05208     7D 28 0E F2 | 	cmp	local06, #125 wz
0520c     B0 01 90 AD |  if_e	jmp	#LR__0442
05210     7E 28 0E F2 | 	cmp	local06, #126 wz
05214     B0 01 90 AD |  if_e	jmp	#LR__0443
05218     7F 28 0E F2 | 	cmp	local06, #127 wz
0521c     B0 01 90 AD |  if_e	jmp	#LR__0444
05220     80 28 0E F2 | 	cmp	local06, #128 wz
05224     B0 01 90 AD |  if_e	jmp	#LR__0445
05228     72 28 0E F2 | 	cmp	local06, #114 wz
0522c     B0 01 90 AD |  if_e	jmp	#LR__0446
05230     81 28 0E F2 | 	cmp	local06, #129 wz
05234     B0 01 90 AD |  if_e	jmp	#LR__0447
05238     01 00 00 FF 
0523c     04 28 0E F2 | 	cmp	local06, ##516 wz
05240     AC 01 90 AD |  if_e	jmp	#LR__0448
05244     B0 01 90 FD | 	jmp	#LR__0449
05248                 | LR__0403
05248     B4 0F B0 FD | 	call	#_compile_fun_varp
0524c     FD 2C 02 F6 | 	mov	local08, result1
05250     AC 01 90 FD | 	jmp	#LR__0450
05254                 | LR__0404
05254     A8 0F B0 FD | 	call	#_compile_fun_varp
05258     FD 2C 02 F6 | 	mov	local08, result1
0525c     A0 01 90 FD | 	jmp	#LR__0450
05260                 | LR__0405
05260     9C 0F B0 FD | 	call	#_compile_fun_varp
05264     FD 2C 02 F6 | 	mov	local08, result1
05268     94 01 90 FD | 	jmp	#LR__0450
0526c                 | LR__0406
0526c     90 0F B0 FD | 	call	#_compile_fun_varp
05270     FD 2C 02 F6 | 	mov	local08, result1
05274     88 01 90 FD | 	jmp	#LR__0450
05278                 | LR__0407
05278     A4 0B B0 FD | 	call	#_compile_fun_2p
0527c     FD 26 02 F6 | 	mov	local05, result1
05280     7C 01 90 FD | 	jmp	#LR__0450
05284                 | LR__0408
05284     98 0B B0 FD | 	call	#_compile_fun_2p
05288     FD 26 02 F6 | 	mov	local05, result1
0528c     70 01 90 FD | 	jmp	#LR__0450
05290                 | LR__0409
05290     00 0C B0 FD | 	call	#_compile_fun_3p
05294     FD 26 02 F6 | 	mov	local05, result1
05298     64 01 90 FD | 	jmp	#LR__0450
0529c                 | LR__0410
0529c     F4 0B B0 FD | 	call	#_compile_fun_3p
052a0     FD 26 02 F6 | 	mov	local05, result1
052a4     58 01 90 FD | 	jmp	#LR__0450
052a8                 | LR__0411
052a8     B4 0C B0 FD | 	call	#_compile_fun_4p
052ac     FD 26 02 F6 | 	mov	local05, result1
052b0     4C 01 90 FD | 	jmp	#LR__0450
052b4                 | LR__0412
052b4     A8 0C B0 FD | 	call	#_compile_fun_4p
052b8     FD 26 02 F6 | 	mov	local05, result1
052bc     40 01 90 FD | 	jmp	#LR__0450
052c0                 | LR__0413
052c0     BC 2D B0 FD | 	call	#_expr
052c4                 | ' 
052c4                 | ' 
052c4                 | ' expr()
052c4                 | ' return 0
052c4     00 26 06 F6 | 	mov	local05, #0
052c8     34 01 90 FD | 	jmp	#LR__0450
052cc                 | LR__0414
052cc     5C 10 B0 FD | 	call	#_compile_print
052d0     FD 26 02 F6 | 	mov	local05, result1
052d4     E4 01 90 FD | 	jmp	#LR__0451
052d8                 | LR__0415
052d8     01 24 16 F2 | 	cmp	local04, #1 wc
052dc     08 00 90 CD |  if_b	jmp	#LR__0416
052e0     3C 2A B0 FD | 	call	#_compile_goto
052e4     D4 01 90 FD | 	jmp	#LR__0451
052e8                 | LR__0416
052e8     19 12 06 F6 | 	mov	arg01, #25
052ec     B4 00 B1 FD | 	call	#_printerror
052f0     C8 01 90 FD | 	jmp	#LR__0451
052f4                 | LR__0417
052f4     88 2D B0 FD | 	call	#_expr
052f8                 | ' 
052f8                 | ' 
052f8                 | ' expr()
052f8                 | ' return 0
052f8     04 01 90 FD | 	jmp	#LR__0450
052fc                 | LR__0418
052fc     80 2D B0 FD | 	call	#_expr
05300                 | ' 
05300                 | ' 
05300                 | ' expr()
05300                 | ' return 0
05300     FC 00 90 FD | 	jmp	#LR__0450
05304                 | LR__0419
05304     78 2D B0 FD | 	call	#_expr
05308                 | ' 
05308                 | ' 
05308                 | ' expr()
05308                 | ' return 0
05308     F4 00 90 FD | 	jmp	#LR__0450
0530c                 | LR__0420
0530c     70 2D B0 FD | 	call	#_expr
05310                 | ' 
05310                 | ' 
05310                 | ' expr()
05310                 | ' return 0
05310     EC 00 90 FD | 	jmp	#LR__0450
05314                 | LR__0421
05314     94 0F B0 FD | 	call	#_compile_int_fun_2p
05318     E4 00 90 FD | 	jmp	#LR__0450
0531c                 | LR__0422
0531c     18 0A B0 FD | 	call	#_compile_converttoint
05320                 | ' return err
05320     DC 00 90 FD | 	jmp	#LR__0450
05324                 | LR__0423
05324     DC 16 B0 FD | 	call	#_compile_if
05328     90 01 90 FD | 	jmp	#LR__0451
0532c                 | LR__0424
0532c     18 20 B0 FD | 	call	#_compile_for
05330     88 01 90 FD | 	jmp	#LR__0451
05334                 | LR__0425
05334     38 28 B0 FD | 	call	#_compile_next
05338     80 01 90 FD | 	jmp	#LR__0451
0533c                 | LR__0426
0533c     04 18 B0 FD | 	call	#_compile_else
05340     78 01 90 FD | 	jmp	#LR__0451
05344                 | LR__0427
05344     D8 0A B0 FD | 	call	#_compile_fun_2p
05348     FD 26 02 F6 | 	mov	local05, result1
0534c     B0 00 90 FD | 	jmp	#LR__0450
05350                 | LR__0428
05350     2C 2D B0 FD | 	call	#_expr
05354                 | ' 
05354                 | ' 
05354                 | ' expr()
05354                 | ' return 0
05354     A8 00 90 FD | 	jmp	#LR__0450
05358                 | LR__0429
05358     24 2D B0 FD | 	call	#_expr
0535c                 | ' 
0535c                 | ' 
0535c                 | ' expr()
0535c                 | ' return 0
0535c     A0 00 90 FD | 	jmp	#LR__0450
05360                 | LR__0430
05360     1C 2D B0 FD | 	call	#_expr
05364                 | ' 
05364                 | ' 
05364                 | ' expr()
05364                 | ' return 0
05364     98 00 90 FD | 	jmp	#LR__0450
05368                 | LR__0431
05368     14 2D B0 FD | 	call	#_expr
0536c                 | ' 
0536c                 | ' 
0536c                 | ' expr()
0536c                 | ' return 0
0536c     90 00 90 FD | 	jmp	#LR__0450
05370                 | LR__0432
05370     0C 2D B0 FD | 	call	#_expr
05374                 | ' 
05374                 | ' 
05374                 | ' expr()
05374                 | ' return 0
05374     88 00 90 FD | 	jmp	#LR__0450
05378                 | LR__0433
05378     04 2D B0 FD | 	call	#_expr
0537c                 | ' 
0537c                 | ' 
0537c                 | ' expr()
0537c                 | ' return 0
0537c     80 00 90 FD | 	jmp	#LR__0450
05380                 | LR__0434
05380     FC 2C B0 FD | 	call	#_expr
05384                 | ' 
05384                 | ' 
05384                 | ' expr()
05384                 | ' return 0
05384     78 00 90 FD | 	jmp	#LR__0450
05388                 | LR__0435
05388     08 0B B0 FD | 	call	#_compile_fun_3p
0538c     70 00 90 FD | 	jmp	#LR__0450
05390                 | LR__0436
05390     F0 0C B0 FD | 	call	#_compile_fun_5p
05394     68 00 90 FD | 	jmp	#LR__0450
05398                 | LR__0437
05398     C4 0B B0 FD | 	call	#_compile_fun_4p
0539c     60 00 90 FD | 	jmp	#LR__0450
053a0                 | LR__0438
053a0     7C 0A B0 FD | 	call	#_compile_fun_2p
053a4     58 00 90 FD | 	jmp	#LR__0450
053a8                 | LR__0439
053a8     74 0A B0 FD | 	call	#_compile_fun_2p
053ac     50 00 90 FD | 	jmp	#LR__0450
053b0                 | LR__0440
053b0     6C 0A B0 FD | 	call	#_compile_fun_2p
053b4     48 00 90 FD | 	jmp	#LR__0450
053b8                 | LR__0441
053b8     C4 2C B0 FD | 	call	#_expr
053bc                 | ' 
053bc                 | ' 
053bc                 | ' expr()
053bc                 | ' return 0
053bc     40 00 90 FD | 	jmp	#LR__0450
053c0                 | LR__0442
053c0     BC 2C B0 FD | 	call	#_expr
053c4                 | ' 
053c4                 | ' 
053c4                 | ' expr()
053c4                 | ' return 0
053c4     38 00 90 FD | 	jmp	#LR__0450
053c8                 | LR__0443
053c8     B4 2C B0 FD | 	call	#_expr
053cc                 | ' 
053cc                 | ' 
053cc                 | ' expr()
053cc                 | ' return 0
053cc     30 00 90 FD | 	jmp	#LR__0450
053d0                 | LR__0444
053d0     8C 0B B0 FD | 	call	#_compile_fun_4p
053d4     28 00 90 FD | 	jmp	#LR__0450
053d8                 | LR__0445
053d8     A4 2C B0 FD | 	call	#_expr
053dc                 | ' 
053dc                 | ' 
053dc                 | ' expr()
053dc                 | ' return 0
053dc     20 00 90 FD | 	jmp	#LR__0450
053e0                 | LR__0446
053e0     88 18 B0 FD | 	call	#_compile_dim
053e4     D4 00 90 FD | 	jmp	#LR__0451
053e8                 | LR__0447
053e8     34 0A B0 FD | 	call	#_compile_fun_2p
053ec     10 00 90 FD | 	jmp	#LR__0450
053f0                 | LR__0448
053f0     20 01 B0 FD | 	call	#_compile_array_assign
053f4     C4 00 90 FD | 	jmp	#LR__0451
053f8                 | LR__0449
053f8     80 08 B0 FD | 	call	#_compile_unknown
053fc     BC 00 90 FD | 	jmp	#LR__0451
05400                 | LR__0450
05400     14 23 02 F6 | 	mov	local03, local06
05404     16 1F 02 F6 | 	mov	local01, local08
05408     0F 2B 02 F6 | 	mov	local07, local01
0540c     10 2F 02 F6 | 	mov	local09, local02
05410     11 1F 02 F6 | 	mov	local01, local03
05414     69 00 00 FF 
05418     50 E4 05 F1 | 	add	objptr, ##53840
0541c     F2 2C 02 FB | 	rdlong	local08, objptr
05420     16 29 02 F6 | 	mov	local06, local08
05424     01 28 66 F0 | 	shl	local06, #1
05428     16 29 02 F1 | 	add	local06, local08
0542c     02 28 66 F0 | 	shl	local06, #2
05430     03 00 00 FF 
05434     00 E4 85 F1 | 	sub	objptr, ##1536
05438     F2 28 02 F1 | 	add	local06, objptr
0543c     14 2B 62 FC | 	wrlong	local07, local06
05440     03 00 00 FF 
05444     00 E4 05 F1 | 	add	objptr, ##1536
05448     F2 2C 02 FB | 	rdlong	local08, objptr
0544c     16 2B 02 F6 | 	mov	local07, local08
05450     01 2A 66 F0 | 	shl	local07, #1
05454     16 2B 02 F1 | 	add	local07, local08
05458     02 2A 66 F0 | 	shl	local07, #2
0545c     03 00 00 FF 
05460     00 E4 85 F1 | 	sub	objptr, ##1536
05464     F2 2A 02 F1 | 	add	local07, objptr
05468     04 2A 06 F1 | 	add	local07, #4
0546c     15 2F 62 FC | 	wrlong	local09, local07
05470     03 00 00 FF 
05474     00 E4 05 F1 | 	add	objptr, ##1536
05478     F2 2E 02 FB | 	rdlong	local09, objptr
0547c     17 2D 02 F6 | 	mov	local08, local09
05480     01 2C 66 F0 | 	shl	local08, #1
05484     17 2D 02 F1 | 	add	local08, local09
05488     02 2C 66 F0 | 	shl	local08, #2
0548c     03 00 00 FF 
05490     00 E4 85 F1 | 	sub	objptr, ##1536
05494     F2 2C 02 F1 | 	add	local08, objptr
05498     08 2C 06 F1 | 	add	local08, #8
0549c     16 1F 62 FC | 	wrlong	local01, local08
054a0     03 00 00 FF 
054a4     00 E4 05 F1 | 	add	objptr, ##1536
054a8     F2 2A 02 FB | 	rdlong	local07, objptr
054ac     01 2A 06 F1 | 	add	local07, #1
054b0     F2 2A 62 FC | 	wrlong	local07, objptr
054b4     69 00 00 FF 
054b8     50 E4 85 F1 | 	sub	objptr, ##53840
054bc                 | LR__0451
054bc                 | ' 
054bc                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
054bc                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
054bc     00 24 0E F2 | 	cmp	local04, #0 wz
054c0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
054c4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
054c8     38 00 90 5D |  if_ne	jmp	#LR__0452
054cc     69 00 00 FF 
054d0     50 E4 05 F1 | 	add	objptr, ##53840
054d4     F2 2E 02 FB | 	rdlong	local09, objptr
054d8     17 1F 02 F6 | 	mov	local01, local09
054dc     01 1E 66 F0 | 	shl	local01, #1
054e0     17 1F 02 F1 | 	add	local01, local09
054e4     02 1E 66 F0 | 	shl	local01, #2
054e8     03 00 00 FF 
054ec     00 E4 85 F1 | 	sub	objptr, ##1536
054f0     F2 1E 02 F1 | 	add	local01, objptr
054f4     08 1E 06 F1 | 	add	local01, #8
054f8     0F FD 6B FC | 	wrlong	#510, local01
054fc     66 00 00 FF 
05500     50 E4 85 F1 | 	sub	objptr, ##52304
05504                 | LR__0452
05504                 | ' 
05504                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
05504                 | ' return err
05504     13 FB 01 F6 | 	mov	result1, local05
05508     A7 F0 03 F6 | 	mov	ptra, fp
0550c     B2 00 A0 FD | 	call	#popregs_
05510                 | _compile_immediate_ret
05510     2D 00 64 FD | 	ret
05514                 | 
05514                 | ' 
05514                 | ' sub compile_array_assign
05514                 | _compile_array_assign
05514     0A 4A 05 F6 | 	mov	COUNT_, #10
05518     A8 00 A0 FD | 	call	#pushregs_
0551c     00 24 06 F6 | 	mov	local04, #0
05520     56 00 00 FF 
05524     18 E4 05 F1 | 	add	objptr, ##44056
05528     F2 26 02 FB | 	rdlong	local05, objptr
0552c     13 FB 01 F6 | 	mov	result1, local05
05530     01 FA 85 F1 | 	sub	result1, #1
05534     03 FA 65 F0 | 	shl	result1, #3
05538     02 00 00 FF 
0553c     38 E4 85 F1 | 	sub	objptr, ##1080
05540     F2 FA 01 F1 | 	add	result1, objptr
05544     FD 28 02 FB | 	rdlong	local06, result1
05548                 | ' numpar=0
05548                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
05548                 | ' ' todo here: recognize params and t1.result.twowords=numpar
05548                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
05548                 | ' if lparts(ct).token=token_lpar then
05548     03 26 66 F0 | 	shl	local05, #3
0554c     F2 26 02 F1 | 	add	local05, objptr
05550     04 26 06 F1 | 	add	local05, #4
05554     13 27 02 FB | 	rdlong	local05, local05
05558     15 26 0E F2 | 	cmp	local05, #21 wz
0555c     53 00 00 FF 
05560     E0 E5 85 F1 | 	sub	objptr, ##42976
05564     D4 01 90 5D |  if_ne	jmp	#LR__0464
05568     56 00 00 FF 
0556c     18 E4 05 F1 | 	add	objptr, ##44056
05570     F2 2A 02 FB | 	rdlong	local07, objptr
05574     01 2A 06 F1 | 	add	local07, #1
05578     F2 2A 62 FC | 	wrlong	local07, objptr
0557c     56 00 00 FF 
05580     18 E4 85 F1 | 	sub	objptr, ##44056
05584                 | '   ct+=1 											' omit this lpar, this is for expr list
05584                 | '   do
05584                 | LR__0460
05584     F8 2A B0 FD | 	call	#_expr
05588     56 00 00 FF 
0558c     18 E4 05 F1 | 	add	objptr, ##44056
05590     F2 26 02 FB | 	rdlong	local05, objptr
05594     01 26 06 F1 | 	add	local05, #1
05598     F2 26 62 FC | 	wrlong	local05, objptr
0559c     01 24 06 F1 | 	add	local04, #1
055a0     01 26 86 F1 | 	sub	local05, #1
055a4     03 26 66 F0 | 	shl	local05, #3
055a8     02 00 00 FF 
055ac     38 E4 85 F1 | 	sub	objptr, ##1080
055b0     F2 26 02 F1 | 	add	local05, objptr
055b4     04 26 06 F1 | 	add	local05, #4
055b8     13 2B 02 FB | 	rdlong	local07, local05
055bc     14 2A 0E F2 | 	cmp	local07, #20 wz
055c0     53 00 00 FF 
055c4     E0 E5 85 F1 | 	sub	objptr, ##42976
055c8     34 00 90 AD |  if_e	jmp	#LR__0461
055cc     56 00 00 FF 
055d0     18 E4 05 F1 | 	add	objptr, ##44056
055d4     F2 2A 02 FB | 	rdlong	local07, objptr
055d8     03 2A 66 F0 | 	shl	local07, #3
055dc     02 00 00 FF 
055e0     38 E4 85 F1 | 	sub	objptr, ##1080
055e4     F2 2A 02 F1 | 	add	local07, objptr
055e8     04 2A 06 F1 | 	add	local07, #4
055ec     15 2B 02 FB | 	rdlong	local07, local07
055f0     FE 2B 0E F2 | 	cmp	local07, #510 wz
055f4     53 00 00 FF 
055f8     E0 E5 85 F1 | 	sub	objptr, ##42976
055fc     84 FF 9F 5D |  if_ne	jmp	#LR__0460
05600                 | LR__0461
05600     56 00 00 FF 
05604     18 E4 05 F1 | 	add	objptr, ##44056
05608     F2 2A 02 FB | 	rdlong	local07, objptr
0560c     01 2A 06 F1 | 	add	local07, #1
05610     F2 2A 62 FC | 	wrlong	local07, objptr
05614     56 00 00 FF 
05618     18 E4 85 F1 | 	sub	objptr, ##44056
0561c     60 2A B0 FD | 	call	#_expr
05620     01 2C 66 F6 | 	neg	local08, #1
05624     00 2E 06 F6 | 	mov	local09, #0
05628                 | ' '   print "in array_assign, rpar found, numpar=",numpar
05628                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
05628                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
05628                 | ' ct+=1 : expr()
05628                 | ' ' now find the vae
05628                 | ' 
05628                 | ' j=-1 : i=0 : do : 
05628                 | LR__0462
05628                 | '   if variables(i).name=varname$ then j=i: exit loop
05628     17 27 02 F6 | 	mov	local05, local09
0562c     04 26 66 F0 | 	shl	local05, #4
05630     33 00 00 FF 
05634     DC E5 05 F1 | 	add	objptr, ##26588
05638     F2 26 02 F1 | 	add	local05, objptr
0563c     13 13 02 FB | 	rdlong	arg01, local05
05640     14 15 02 F6 | 	mov	arg02, local06
05644     33 00 00 FF 
05648     DC E5 85 F1 | 	sub	objptr, ##26588
0564c     A0 32 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     17 2D 02 A6 |  if_e	mov	local08, local09
05658     20 00 90 AD |  if_e	jmp	#LR__0463
0565c     01 2E 06 F1 | 	add	local09, #1
05660     53 00 00 FF 
05664     DC E5 05 F1 | 	add	objptr, ##42972
05668     F2 2A 02 FB | 	rdlong	local07, objptr
0566c     53 00 00 FF 
05670     DC E5 85 F1 | 	sub	objptr, ##42972
05674     15 2F 5A F2 | 	cmps	local09, local07 wcz
05678     AC FF 9F ED |  if_be	jmp	#LR__0462
0567c                 | LR__0463
0567c     16 1F 02 F6 | 	mov	local01, local08
05680     12 21 02 F6 | 	mov	local02, local04
05684     17 22 06 F6 | 	mov	local03, #23
05688     0F 2B 02 F6 | 	mov	local07, local01
0568c     10 31 02 F6 | 	mov	local10, local02
05690     11 2D 02 F6 | 	mov	local08, local03
05694     69 00 00 FF 
05698     50 E4 05 F1 | 	add	objptr, ##53840
0569c     F2 1E 02 FB | 	rdlong	local01, objptr
056a0     0F 2F 02 F6 | 	mov	local09, local01
056a4     01 2E 66 F0 | 	shl	local09, #1
056a8     0F 2F 02 F1 | 	add	local09, local01
056ac     02 2E 66 F0 | 	shl	local09, #2
056b0     03 00 00 FF 
056b4     00 E4 85 F1 | 	sub	objptr, ##1536
056b8     F2 2E 02 F1 | 	add	local09, objptr
056bc     17 2B 62 FC | 	wrlong	local07, local09
056c0     03 00 00 FF 
056c4     00 E4 05 F1 | 	add	objptr, ##1536
056c8     F2 1E 02 FB | 	rdlong	local01, objptr
056cc     0F 2F 02 F6 | 	mov	local09, local01
056d0     01 2E 66 F0 | 	shl	local09, #1
056d4     0F 2F 02 F1 | 	add	local09, local01
056d8     02 2E 66 F0 | 	shl	local09, #2
056dc     03 00 00 FF 
056e0     00 E4 85 F1 | 	sub	objptr, ##1536
056e4     F2 2E 02 F1 | 	add	local09, objptr
056e8     04 2E 06 F1 | 	add	local09, #4
056ec     17 31 62 FC | 	wrlong	local10, local09
056f0     03 00 00 FF 
056f4     00 E4 05 F1 | 	add	objptr, ##1536
056f8     F2 30 02 FB | 	rdlong	local10, objptr
056fc     18 1F 02 F6 | 	mov	local01, local10
05700     01 1E 66 F0 | 	shl	local01, #1
05704     18 1F 02 F1 | 	add	local01, local10
05708     02 1E 66 F0 | 	shl	local01, #2
0570c     03 00 00 FF 
05710     00 E4 85 F1 | 	sub	objptr, ##1536
05714     F2 1E 02 F1 | 	add	local01, objptr
05718     08 1E 06 F1 | 	add	local01, #8
0571c     0F 2D 62 FC | 	wrlong	local08, local01
05720     03 00 00 FF 
05724     00 E4 05 F1 | 	add	objptr, ##1536
05728     F2 2A 02 FB | 	rdlong	local07, objptr
0572c     01 2A 06 F1 | 	add	local07, #1
05730     F2 2A 62 FC | 	wrlong	local07, objptr
05734     69 00 00 FF 
05738     50 E4 85 F1 | 	sub	objptr, ##53840
0573c                 | LR__0464
0573c     A7 F0 03 F6 | 	mov	ptra, fp
05740     B2 00 A0 FD | 	call	#popregs_
05744                 | _compile_array_assign_ret
05744     2D 00 64 FD | 	ret
05748                 | 
05748                 | ' 
05748                 | ' 
05748                 | ' sub compile_immediate_assign(linetype as ulong)
05748                 | _compile_immediate_assign
05748     09 4A 05 F6 | 	mov	COUNT_, #9
0574c     A8 00 A0 FD | 	call	#pushregs_
05750     09 25 0A F6 | 	mov	local04, arg01 wz
05754     FF 22 06 F6 | 	mov	local03, #255
05758     01 26 66 F6 | 	neg	local05, #1
0575c                 | ' 
0575c                 | ' t1.result_type=result_error : t1.result.uresult=0
0575c                 | ' i=-1: j=-1
0575c                 | ' 
0575c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0575c     2C 00 90 5D |  if_ne	jmp	#LR__0470
05760     53 00 00 FF 
05764     E0 E5 05 F1 | 	add	objptr, ##42976
05768     F2 28 02 FB | 	rdlong	local06, objptr
0576c     02 00 00 FF 
05770     38 E4 05 F1 | 	add	objptr, ##1080
05774     F2 04 68 FC | 	wrlong	#2, objptr
05778     13 00 00 FF 
0577c     38 E4 05 F1 | 	add	objptr, ##9784
05780     F2 00 68 FC | 	wrlong	#0, objptr
05784     69 00 00 FF 
05788     50 E4 85 F1 | 	sub	objptr, ##53840
0578c                 | LR__0470
0578c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
0578c     02 24 0E F2 | 	cmp	local04, #2 wz
05790     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05794     53 00 00 AF 
05798     E0 E5 05 A1 |  if_e	add	objptr, ##42976
0579c     F2 28 02 AB |  if_e	rdlong	local06, objptr
057a0     02 00 00 AF 
057a4     38 E4 05 A1 |  if_e	add	objptr, ##1080
057a8     F2 04 68 AC |  if_e	wrlong	#2, objptr
057ac     56 00 00 AF 
057b0     18 E4 85 A1 |  if_e	sub	objptr, ##44056
057b4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
057b4     04 24 0E F2 | 	cmp	local04, #4 wz
057b8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
057bc     2C 00 90 5D |  if_ne	jmp	#LR__0471
057c0     53 00 00 FF 
057c4     E8 E5 05 F1 | 	add	objptr, ##42984
057c8     F2 28 02 FB | 	rdlong	local06, objptr
057cc     02 00 00 FF 
057d0     30 E4 05 F1 | 	add	objptr, ##1072
057d4     F2 06 68 FC | 	wrlong	#3, objptr
057d8     13 00 00 FF 
057dc     38 E4 05 F1 | 	add	objptr, ##9784
057e0     F2 04 68 FC | 	wrlong	#2, objptr
057e4     69 00 00 FF 
057e8     50 E4 85 F1 | 	sub	objptr, ##53840
057ec                 | LR__0471
057ec                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
057ec     05 24 0E F2 | 	cmp	local04, #5 wz
057f0     3C 00 90 5D |  if_ne	jmp	#LR__0472
057f4     56 00 00 FF 
057f8     18 E4 05 F1 | 	add	objptr, ##44056
057fc     F2 FA 01 FB | 	rdlong	result1, objptr
05800     FD 28 02 F6 | 	mov	local06, result1
05804     03 28 66 F0 | 	shl	local06, #3
05808     02 00 00 FF 
0580c     38 E4 85 F1 | 	sub	objptr, ##1080
05810     F2 28 02 F1 | 	add	local06, objptr
05814     14 29 02 FB | 	rdlong	local06, local06
05818     02 FA 05 F1 | 	add	result1, #2
0581c     02 00 00 FF 
05820     38 E4 05 F1 | 	add	objptr, ##1080
05824     F2 FA 61 FC | 	wrlong	result1, objptr
05828     56 00 00 FF 
0582c     18 E4 85 F1 | 	sub	objptr, ##44056
05830                 | LR__0472
05830     14 13 02 F6 | 	mov	arg01, local06
05834     01 14 06 F6 | 	mov	arg02, #1
05838     20 51 B1 FD | 	call	#__system__Right_S
0583c     40 28 B0 FD | 	call	#_expr
05840                 | '  
05840                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
05840                 | ' 
05840                 | ' suffix2$=right$(varname2$,1)
05840                 | ' expr()
05840                 | ' 
05840                 | ' 
05840                 | ' if varnum>0 then
05840     53 00 00 FF 
05844     DC E5 05 F1 | 	add	objptr, ##42972
05848     F2 2A 02 FB | 	rdlong	local07, objptr
0584c     53 00 00 FF 
05850     DC E5 85 F1 | 	sub	objptr, ##42972
05854     01 2A 56 F2 | 	cmps	local07, #1 wc
05858     58 00 90 CD |  if_b	jmp	#LR__0475
0585c                 | '   for i=0 to varnum-1
0585c     00 2C 06 F6 | 	mov	local08, #0
05860     53 00 00 FF 
05864     DC E5 05 F1 | 	add	objptr, ##42972
05868     F2 2E 02 FB | 	rdlong	local09, objptr
0586c     53 00 00 FF 
05870     DC E5 85 F1 | 	sub	objptr, ##42972
05874                 | LR__0473
05874     17 2D 52 F2 | 	cmps	local08, local09 wc
05878     38 00 90 3D |  if_ae	jmp	#LR__0474
0587c                 | '     if variables(i).name=varname2$ then j=i : exit
0587c     16 2B 02 F6 | 	mov	local07, local08
05880     04 2A 66 F0 | 	shl	local07, #4
05884     33 00 00 FF 
05888     DC E5 05 F1 | 	add	objptr, ##26588
0588c     F2 2A 02 F1 | 	add	local07, objptr
05890     15 13 02 FB | 	rdlong	arg01, local07
05894     14 15 02 F6 | 	mov	arg02, local06
05898     33 00 00 FF 
0589c     DC E5 85 F1 | 	sub	objptr, ##26588
058a0     4C 30 B1 FD | 	call	#__system___string_cmp
058a4     00 FA 0D F2 | 	cmp	result1, #0 wz
058a8     16 27 02 A6 |  if_e	mov	local05, local08
058ac     01 2C 06 51 |  if_ne	add	local08, #1
058b0     C0 FF 9F 5D |  if_ne	jmp	#LR__0473
058b4                 | LR__0474
058b4                 | LR__0475
058b4                 | ' if  j=-1 andalso varnum<maxvars then   
058b4     FF FF 7F FF 
058b8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
058bc     60 00 90 5D |  if_ne	jmp	#LR__0476
058c0     53 00 00 FF 
058c4     DC E5 05 F1 | 	add	objptr, ##42972
058c8     F2 2A 02 FB | 	rdlong	local07, objptr
058cc     53 00 00 FF 
058d0     DC E5 85 F1 | 	sub	objptr, ##42972
058d4     01 00 00 FF 
058d8     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
058dc     40 00 90 3D |  if_ae	jmp	#LR__0476
058e0     53 00 00 FF 
058e4     DC E5 05 F1 | 	add	objptr, ##42972
058e8     F2 2E 02 FB | 	rdlong	local09, objptr
058ec     04 2E 66 F0 | 	shl	local09, #4
058f0     20 00 00 FF 
058f4     00 E4 85 F1 | 	sub	objptr, ##16384
058f8     F2 2E 02 F1 | 	add	local09, objptr
058fc     17 29 62 FC | 	wrlong	local06, local09
05900     20 00 00 FF 
05904     00 E4 05 F1 | 	add	objptr, ##16384
05908     F2 2A 02 FB | 	rdlong	local07, objptr
0590c     15 27 02 F6 | 	mov	local05, local07
05910     01 2A 06 F1 | 	add	local07, #1
05914     F2 2A 62 FC | 	wrlong	local07, objptr
05918     53 00 00 FF 
0591c     DC E5 85 F1 | 	sub	objptr, ##42972
05920                 | LR__0476
05920     13 1F 02 F6 | 	mov	local01, local05
05924     17 22 06 F6 | 	mov	local03, #23
05928     0F 2B 02 F6 | 	mov	local07, local01
0592c     10 2F 02 F6 | 	mov	local09, local02
05930     11 1F 02 F6 | 	mov	local01, local03
05934     69 00 00 FF 
05938     50 E4 05 F1 | 	add	objptr, ##53840
0593c     F2 2C 02 FB | 	rdlong	local08, objptr
05940     16 29 02 F6 | 	mov	local06, local08
05944     01 28 66 F0 | 	shl	local06, #1
05948     16 29 02 F1 | 	add	local06, local08
0594c     02 28 66 F0 | 	shl	local06, #2
05950     03 00 00 FF 
05954     00 E4 85 F1 | 	sub	objptr, ##1536
05958     F2 28 02 F1 | 	add	local06, objptr
0595c     14 2B 62 FC | 	wrlong	local07, local06
05960     03 00 00 FF 
05964     00 E4 05 F1 | 	add	objptr, ##1536
05968     F2 2C 02 FB | 	rdlong	local08, objptr
0596c     16 2B 02 F6 | 	mov	local07, local08
05970     01 2A 66 F0 | 	shl	local07, #1
05974     16 2B 02 F1 | 	add	local07, local08
05978     02 2A 66 F0 | 	shl	local07, #2
0597c     03 00 00 FF 
05980     00 E4 85 F1 | 	sub	objptr, ##1536
05984     F2 2A 02 F1 | 	add	local07, objptr
05988     04 2A 06 F1 | 	add	local07, #4
0598c     15 2F 62 FC | 	wrlong	local09, local07
05990     03 00 00 FF 
05994     00 E4 05 F1 | 	add	objptr, ##1536
05998     F2 2E 02 FB | 	rdlong	local09, objptr
0599c     17 2D 02 F6 | 	mov	local08, local09
059a0     01 2C 66 F0 | 	shl	local08, #1
059a4     17 2D 02 F1 | 	add	local08, local09
059a8     02 2C 66 F0 | 	shl	local08, #2
059ac     03 00 00 FF 
059b0     00 E4 85 F1 | 	sub	objptr, ##1536
059b4     F2 2C 02 F1 | 	add	local08, objptr
059b8     08 2C 06 F1 | 	add	local08, #8
059bc     16 1F 62 FC | 	wrlong	local01, local08
059c0     03 00 00 FF 
059c4     00 E4 05 F1 | 	add	objptr, ##1536
059c8     F2 2A 02 FB | 	rdlong	local07, objptr
059cc     01 2A 06 F1 | 	add	local07, #1
059d0     F2 2A 62 FC | 	wrlong	local07, objptr
059d4     69 00 00 FF 
059d8     50 E4 85 F1 | 	sub	objptr, ##53840
059dc                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
059dc                 | ' 
059dc                 | ' 
059dc                 | ' 
059dc                 | ' 
059dc                 | ' 
059dc                 | ' 
059dc                 | ' compiledline(lineptr)=t1:  lineptr+=1 
059dc                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
059dc     00 24 0E F2 | 	cmp	local04, #0 wz
059e0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
059e4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
059e8     38 00 90 5D |  if_ne	jmp	#LR__0477
059ec     69 00 00 FF 
059f0     50 E4 05 F1 | 	add	objptr, ##53840
059f4     F2 1E 02 FB | 	rdlong	local01, objptr
059f8     0F 2F 02 F6 | 	mov	local09, local01
059fc     01 2E 66 F0 | 	shl	local09, #1
05a00     0F 2F 02 F1 | 	add	local09, local01
05a04     02 2E 66 F0 | 	shl	local09, #2
05a08     03 00 00 FF 
05a0c     00 E4 85 F1 | 	sub	objptr, ##1536
05a10     F2 2E 02 F1 | 	add	local09, objptr
05a14     08 2E 06 F1 | 	add	local09, #8
05a18     17 FD 6B FC | 	wrlong	#510, local09
05a1c     66 00 00 FF 
05a20     50 E4 85 F1 | 	sub	objptr, ##52304
05a24                 | LR__0477
05a24     A7 F0 03 F6 | 	mov	ptra, fp
05a28     B2 00 A0 FD | 	call	#popregs_
05a2c                 | _compile_immediate_assign_ret
05a2c     2D 00 64 FD | 	ret
05a30                 | 
05a30                 | ' 
05a30                 | ' ' ------------------ compile the line that is calling a command 
05a30                 | ' 
05a30                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
05a30                 | _compile
05a30     04 4A 05 F6 | 	mov	COUNT_, #4
05a34     A8 00 A0 FD | 	call	#pushregs_
05a38     09 1F 0A F6 | 	mov	local01, arg01 wz
05a3c     0A 21 02 F6 | 	mov	local02, arg02
05a40     0B 23 02 F6 | 	mov	local03, arg03
05a44                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05a44                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05a44                 | '  
05a44                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05a44                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05a44     0C 00 90 5D |  if_ne	jmp	#LR__0480
05a48     00 12 06 F6 | 	mov	arg01, #0
05a4c     70 F5 BF FD | 	call	#_compile_immediate
05a50     A0 00 90 FD | 	jmp	#LR__0487
05a54                 | LR__0480
05a54     66 00 00 FF 
05a58     50 E4 05 F1 | 	add	objptr, ##52304
05a5c     F2 1E 62 FC | 	wrlong	local01, objptr
05a60     04 E4 05 F1 | 	add	objptr, #4
05a64     F2 20 62 FC | 	wrlong	local02, objptr
05a68     66 00 00 FF 
05a6c     54 E4 85 F1 | 	sub	objptr, ##52308
05a70     11 13 02 F6 | 	mov	arg01, local03
05a74     01 12 06 F1 | 	add	arg01, #1
05a78     44 F5 BF FD | 	call	#_compile_immediate
05a7c     FD 24 0A F6 | 	mov	local04, result1 wz
05a80                 | ' 
05a80                 | ' ucompiledline(0)=alinemajor
05a80                 | ' ucompiledline(1)=alineminor
05a80                 | ' 
05a80                 | ' 
05a80                 | ' ' cont: 0: this is the first part of the line that will continue
05a80                 | ' ' 1 - this is the continuation of the line
05a80                 | ' ' 2 - this is the last continued line
05a80                 | ' ' 3 - this is the ome and only part
05a80                 | ' 
05a80                 | ' 
05a80                 | ' err=compile_immediate(cont+1) 
05a80                 | ' if err=0 then
05a80     6C 00 90 5D |  if_ne	jmp	#LR__0486
05a84                 | '   if cont=3 orelse cont=2 then 
05a84     03 22 0E F2 | 	cmp	local03, #3 wz
05a88     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05a8c     60 00 90 5D |  if_ne	jmp	#LR__0485
05a90                 | '     if alinemajor >lastline then 
05a90     69 00 00 FF 
05a94     5C E4 05 F1 | 	add	objptr, ##53852
05a98     F2 16 02 FB | 	rdlong	arg03, objptr
05a9c     69 00 00 FF 
05aa0     5C E4 85 F1 | 	sub	objptr, ##53852
05aa4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05aa8     0C 00 90 ED |  if_be	jmp	#LR__0481
05aac     0F 13 02 F6 | 	mov	arg01, local01
05ab0     2C F4 BF FD | 	call	#_add_line_at_end
05ab4     38 00 90 FD | 	jmp	#LR__0484
05ab8                 | LR__0481
05ab8     0F 13 02 F6 | 	mov	arg01, local01
05abc     AC EC BF FD | 	call	#_deleteline
05ac0                 | '       deleteline(alinemajor)  
05ac0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
05ac0     69 00 00 FF 
05ac4     5C E4 05 F1 | 	add	objptr, ##53852
05ac8     F2 16 02 FB | 	rdlong	arg03, objptr
05acc     69 00 00 FF 
05ad0     5C E4 85 F1 | 	sub	objptr, ##53852
05ad4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05ad8     0C 00 90 ED |  if_be	jmp	#LR__0482
05adc     0F 13 02 F6 | 	mov	arg01, local01
05ae0     FC F3 BF FD | 	call	#_add_line_at_end
05ae4     08 00 90 FD | 	jmp	#LR__0483
05ae8                 | LR__0482
05ae8     0F 13 02 F6 | 	mov	arg01, local01
05aec     A8 F1 BF FD | 	call	#_insertline
05af0                 | LR__0483
05af0                 | LR__0484
05af0                 | LR__0485
05af0                 | LR__0486
05af0                 | ' return err
05af0     12 FB 01 F6 | 	mov	result1, local04
05af4                 | LR__0487
05af4     A7 F0 03 F6 | 	mov	ptra, fp
05af8     B2 00 A0 FD | 	call	#popregs_
05afc                 | _compile_ret
05afc     2D 00 64 FD | 	ret
05b00                 | 
05b00                 | ' 
05b00                 | ' ' ------------------ compile the line that is assigning to a variable
05b00                 | ' 
05b00                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
05b00                 | _compile_assign
05b00     03 4A 05 F6 | 	mov	COUNT_, #3
05b04     A8 00 A0 FD | 	call	#pushregs_
05b08     09 1F 0A F6 | 	mov	local01, arg01 wz
05b0c     0A 21 02 F6 | 	mov	local02, arg02
05b10     0B 23 02 F6 | 	mov	local03, arg03
05b14                 | ' 
05b14                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05b14                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05b14     0C 00 90 5D |  if_ne	jmp	#LR__0490
05b18     00 12 06 F6 | 	mov	arg01, #0
05b1c     28 FC BF FD | 	call	#_compile_immediate_assign
05b20     94 00 90 FD | 	jmp	#LR__0496
05b24                 | LR__0490
05b24     66 00 00 FF 
05b28     50 E4 05 F1 | 	add	objptr, ##52304
05b2c     F2 1E 62 FC | 	wrlong	local01, objptr
05b30     04 E4 05 F1 | 	add	objptr, #4
05b34     F2 20 62 FC | 	wrlong	local02, objptr
05b38     66 00 00 FF 
05b3c     54 E4 85 F1 | 	sub	objptr, ##52308
05b40     11 13 02 F6 | 	mov	arg01, local03
05b44     01 12 06 F1 | 	add	arg01, #1
05b48     FC FB BF FD | 	call	#_compile_immediate_assign
05b4c                 | ' 
05b4c                 | ' ucompiledline(0)=alinemajor
05b4c                 | ' ucompiledline(1)=alineminor
05b4c                 | ' 
05b4c                 | ' compile_immediate_assign(cont+1) 
05b4c                 | ' 
05b4c                 | ' if cont=3 orelse cont=2 then 
05b4c     03 22 0E F2 | 	cmp	local03, #3 wz
05b50     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05b54     60 00 90 5D |  if_ne	jmp	#LR__0495
05b58                 | '   if alinemajor >lastline then 
05b58     69 00 00 FF 
05b5c     5C E4 05 F1 | 	add	objptr, ##53852
05b60     F2 16 02 FB | 	rdlong	arg03, objptr
05b64     69 00 00 FF 
05b68     5C E4 85 F1 | 	sub	objptr, ##53852
05b6c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05b70     0C 00 90 ED |  if_be	jmp	#LR__0491
05b74     0F 13 02 F6 | 	mov	arg01, local01
05b78     64 F3 BF FD | 	call	#_add_line_at_end
05b7c     38 00 90 FD | 	jmp	#LR__0494
05b80                 | LR__0491
05b80     0F 13 02 F6 | 	mov	arg01, local01
05b84     E4 EB BF FD | 	call	#_deleteline
05b88                 | '     deleteline(alinemajor)  
05b88                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05b88     69 00 00 FF 
05b8c     5C E4 05 F1 | 	add	objptr, ##53852
05b90     F2 16 02 FB | 	rdlong	arg03, objptr
05b94     69 00 00 FF 
05b98     5C E4 85 F1 | 	sub	objptr, ##53852
05b9c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05ba0     0C 00 90 ED |  if_be	jmp	#LR__0492
05ba4     0F 13 02 F6 | 	mov	arg01, local01
05ba8     34 F3 BF FD | 	call	#_add_line_at_end
05bac     08 00 90 FD | 	jmp	#LR__0493
05bb0                 | LR__0492
05bb0     0F 13 02 F6 | 	mov	arg01, local01
05bb4     E0 F0 BF FD | 	call	#_insertline
05bb8                 | LR__0493
05bb8                 | LR__0494
05bb8                 | LR__0495
05bb8                 | LR__0496
05bb8     A7 F0 03 F6 | 	mov	ptra, fp
05bbc     B2 00 A0 FD | 	call	#popregs_
05bc0                 | _compile_assign_ret
05bc0     2D 00 64 FD | 	ret
05bc4                 | 
05bc4                 | ' 
05bc4                 | ' sub compile_error(errno)
05bc4                 | _compile_error
05bc4     FF 04 06 F6 | 	mov	_var03, #255
05bc8     01 07 02 F6 | 	mov	_var04, _var02
05bcc     02 09 02 F6 | 	mov	_var05, _var03
05bd0     69 00 00 FF 
05bd4     50 E4 05 F1 | 	add	objptr, ##53840
05bd8     F2 0A 02 FB | 	rdlong	_var06, objptr
05bdc     05 0D 02 F6 | 	mov	_var07, _var06
05be0     01 0C 66 F0 | 	shl	_var07, #1
05be4     05 0D 02 F1 | 	add	_var07, _var06
05be8     02 0C 66 F0 | 	shl	_var07, #2
05bec     03 00 00 FF 
05bf0     00 E4 85 F1 | 	sub	objptr, ##1536
05bf4     F2 0C 02 F1 | 	add	_var07, objptr
05bf8     06 13 62 FC | 	wrlong	arg01, _var07
05bfc     03 00 00 FF 
05c00     00 E4 05 F1 | 	add	objptr, ##1536
05c04     F2 0C 02 FB | 	rdlong	_var07, objptr
05c08     06 0B 02 F6 | 	mov	_var06, _var07
05c0c     01 0A 66 F0 | 	shl	_var06, #1
05c10     06 0B 02 F1 | 	add	_var06, _var07
05c14     02 0A 66 F0 | 	shl	_var06, #2
05c18     03 00 00 FF 
05c1c     00 E4 85 F1 | 	sub	objptr, ##1536
05c20     F2 0A 02 F1 | 	add	_var06, objptr
05c24     04 0A 06 F1 | 	add	_var06, #4
05c28     05 07 62 FC | 	wrlong	_var04, _var06
05c2c     03 00 00 FF 
05c30     00 E4 05 F1 | 	add	objptr, ##1536
05c34     F2 0C 02 FB | 	rdlong	_var07, objptr
05c38     06 0B 02 F6 | 	mov	_var06, _var07
05c3c     01 0A 66 F0 | 	shl	_var06, #1
05c40     06 0B 02 F1 | 	add	_var06, _var07
05c44     02 0A 66 F0 | 	shl	_var06, #2
05c48     03 00 00 FF 
05c4c     00 E4 85 F1 | 	sub	objptr, ##1536
05c50     F2 0A 02 F1 | 	add	_var06, objptr
05c54     08 0A 06 F1 | 	add	_var06, #8
05c58     05 09 62 FC | 	wrlong	_var05, _var06
05c5c     03 00 00 FF 
05c60     00 E4 05 F1 | 	add	objptr, ##1536
05c64     F2 12 02 FB | 	rdlong	arg01, objptr
05c68     01 12 06 F1 | 	add	arg01, #1
05c6c     F2 12 62 FC | 	wrlong	arg01, objptr
05c70     69 00 00 FF 
05c74     50 E4 85 F1 | 	sub	objptr, ##53840
05c78                 | _compile_error_ret
05c78     2D 00 64 FD | 	ret
05c7c                 | 
05c7c                 | ' 
05c7c                 | ' 
05c7c                 | ' sub compile_unknown() 
05c7c                 | _compile_unknown
05c7c     FF 04 06 F6 | 	mov	_var03, #255
05c80     17 00 06 F6 | 	mov	_var01, #23
05c84     01 07 02 F6 | 	mov	_var04, _var02
05c88     02 01 02 F6 | 	mov	_var01, _var03
05c8c     69 00 00 FF 
05c90     50 E4 05 F1 | 	add	objptr, ##53840
05c94     F2 08 02 FB | 	rdlong	_var05, objptr
05c98     04 0B 02 F6 | 	mov	_var06, _var05
05c9c     01 0A 66 F0 | 	shl	_var06, #1
05ca0     04 0B 02 F1 | 	add	_var06, _var05
05ca4     02 0A 66 F0 | 	shl	_var06, #2
05ca8     03 00 00 FF 
05cac     00 E4 85 F1 | 	sub	objptr, ##1536
05cb0     F2 0A 02 F1 | 	add	_var06, objptr
05cb4     05 2F 68 FC | 	wrlong	#23, _var06
05cb8     03 00 00 FF 
05cbc     00 E4 05 F1 | 	add	objptr, ##1536
05cc0     F2 0A 02 FB | 	rdlong	_var06, objptr
05cc4     05 09 02 F6 | 	mov	_var05, _var06
05cc8     01 08 66 F0 | 	shl	_var05, #1
05ccc     05 09 02 F1 | 	add	_var05, _var06
05cd0     02 08 66 F0 | 	shl	_var05, #2
05cd4     03 00 00 FF 
05cd8     00 E4 85 F1 | 	sub	objptr, ##1536
05cdc     F2 08 02 F1 | 	add	_var05, objptr
05ce0     04 08 06 F1 | 	add	_var05, #4
05ce4     04 07 62 FC | 	wrlong	_var04, _var05
05ce8     03 00 00 FF 
05cec     00 E4 05 F1 | 	add	objptr, ##1536
05cf0     F2 0A 02 FB | 	rdlong	_var06, objptr
05cf4     05 09 02 F6 | 	mov	_var05, _var06
05cf8     01 08 66 F0 | 	shl	_var05, #1
05cfc     05 09 02 F1 | 	add	_var05, _var06
05d00     02 08 66 F0 | 	shl	_var05, #2
05d04     03 00 00 FF 
05d08     00 E4 85 F1 | 	sub	objptr, ##1536
05d0c     F2 08 02 F1 | 	add	_var05, objptr
05d10     08 08 06 F1 | 	add	_var05, #8
05d14     04 01 62 FC | 	wrlong	_var01, _var05
05d18     03 00 00 FF 
05d1c     00 E4 05 F1 | 	add	objptr, ##1536
05d20     F2 0A 02 FB | 	rdlong	_var06, objptr
05d24     01 0A 06 F1 | 	add	_var06, #1
05d28     F2 0A 62 FC | 	wrlong	_var06, objptr
05d2c     69 00 00 FF 
05d30     50 E4 85 F1 | 	sub	objptr, ##53840
05d34                 | _compile_unknown_ret
05d34     2D 00 64 FD | 	ret
05d38                 | 
05d38                 | ' 
05d38                 | ' function compile_converttoint() as integer
05d38                 | _compile_converttoint
05d38     06 4A 05 F6 | 	mov	COUNT_, #6
05d3c     A8 00 A0 FD | 	call	#pushregs_
05d40     00 1E 06 F6 | 	mov	local01, #0
05d44     38 23 B0 FD | 	call	#_expr
05d48     FD 24 0A F6 | 	mov	local04, result1 wz
05d4c                 | ' err=0
05d4c                 | ' t1.result.uresult=0
05d4c                 | ' err=expr()
05d4c                 | ' if err=0 then
05d4c     C0 00 90 5D |  if_ne	jmp	#LR__0500
05d50     16 22 06 F6 | 	mov	local03, #22
05d54     0F 27 02 F6 | 	mov	local05, local01
05d58     10 29 02 F6 | 	mov	local06, local02
05d5c     11 25 02 F6 | 	mov	local04, local03
05d60     69 00 00 FF 
05d64     50 E4 05 F1 | 	add	objptr, ##53840
05d68     F2 1E 02 FB | 	rdlong	local01, objptr
05d6c     0F FB 01 F6 | 	mov	result1, local01
05d70     01 FA 65 F0 | 	shl	result1, #1
05d74     0F FB 01 F1 | 	add	result1, local01
05d78     02 FA 65 F0 | 	shl	result1, #2
05d7c     03 00 00 FF 
05d80     00 E4 85 F1 | 	sub	objptr, ##1536
05d84     F2 FA 01 F1 | 	add	result1, objptr
05d88     FD 26 62 FC | 	wrlong	local05, result1
05d8c     03 00 00 FF 
05d90     00 E4 05 F1 | 	add	objptr, ##1536
05d94     F2 26 02 FB | 	rdlong	local05, objptr
05d98     13 1F 02 F6 | 	mov	local01, local05
05d9c     01 1E 66 F0 | 	shl	local01, #1
05da0     13 1F 02 F1 | 	add	local01, local05
05da4     02 1E 66 F0 | 	shl	local01, #2
05da8     03 00 00 FF 
05dac     00 E4 85 F1 | 	sub	objptr, ##1536
05db0     F2 1E 02 F1 | 	add	local01, objptr
05db4     04 1E 06 F1 | 	add	local01, #4
05db8     0F 29 62 FC | 	wrlong	local06, local01
05dbc     03 00 00 FF 
05dc0     00 E4 05 F1 | 	add	objptr, ##1536
05dc4     F2 28 02 FB | 	rdlong	local06, objptr
05dc8     14 27 02 F6 | 	mov	local05, local06
05dcc     01 26 66 F0 | 	shl	local05, #1
05dd0     14 27 02 F1 | 	add	local05, local06
05dd4     02 26 66 F0 | 	shl	local05, #2
05dd8     03 00 00 FF 
05ddc     00 E4 85 F1 | 	sub	objptr, ##1536
05de0     F2 26 02 F1 | 	add	local05, objptr
05de4     08 26 06 F1 | 	add	local05, #8
05de8     13 25 62 FC | 	wrlong	local04, local05
05dec     03 00 00 FF 
05df0     00 E4 05 F1 | 	add	objptr, ##1536
05df4     F2 26 02 FB | 	rdlong	local05, objptr
05df8     01 26 06 F1 | 	add	local05, #1
05dfc     F2 26 62 FC | 	wrlong	local05, objptr
05e00     69 00 00 FF 
05e04     50 E4 85 F1 | 	sub	objptr, ##53840
05e08                 | '   t1.result_type=fun_converttoint
05e08                 | '   compiledline(lineptr)=t1: lineptr+=1 
05e08                 | '   return 0
05e08     00 FA 05 F6 | 	mov	result1, #0
05e0c     04 00 90 FD | 	jmp	#LR__0501
05e10                 | LR__0500
05e10                 | '   return err
05e10     12 FB 01 F6 | 	mov	result1, local04
05e14                 | LR__0501
05e14     A7 F0 03 F6 | 	mov	ptra, fp
05e18     B2 00 A0 FD | 	call	#popregs_
05e1c                 | _compile_converttoint_ret
05e1c     2D 00 64 FD | 	ret
05e20                 | 
05e20                 | ' 
05e20                 | ' 
05e20                 | ' function compile_fun_2p() as ulong
05e20                 | _compile_fun_2p
05e20     01 4A 05 F6 | 	mov	COUNT_, #1
05e24     A8 00 A0 FD | 	call	#pushregs_
05e28     54 22 B0 FD | 	call	#_expr
05e2c                 | ' 
05e2c                 | ' expr()
05e2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05e2c     56 00 00 FF 
05e30     18 E4 05 F1 | 	add	objptr, ##44056
05e34     F2 1E 02 FB | 	rdlong	local01, objptr
05e38     03 1E 66 F0 | 	shl	local01, #3
05e3c     02 00 00 FF 
05e40     38 E4 85 F1 | 	sub	objptr, ##1080
05e44     F2 1E 02 F1 | 	add	local01, objptr
05e48     04 1E 06 F1 | 	add	local01, #4
05e4c     0F 1F 02 FB | 	rdlong	local01, local01
05e50     11 1E 0E F2 | 	cmp	local01, #17 wz
05e54     53 00 00 FF 
05e58     E0 E5 85 F1 | 	sub	objptr, ##42976
05e5c     15 FA 05 56 |  if_ne	mov	result1, #21
05e60     24 00 90 5D |  if_ne	jmp	#LR__0510
05e64     56 00 00 FF 
05e68     18 E4 05 F1 | 	add	objptr, ##44056
05e6c     F2 1E 02 FB | 	rdlong	local01, objptr
05e70     01 1E 06 F1 | 	add	local01, #1
05e74     F2 1E 62 FC | 	wrlong	local01, objptr
05e78     56 00 00 FF 
05e7c     18 E4 85 F1 | 	sub	objptr, ##44056
05e80     FC 21 B0 FD | 	call	#_expr
05e84     00 FA 05 F6 | 	mov	result1, #0
05e88                 | LR__0510
05e88     A7 F0 03 F6 | 	mov	ptra, fp
05e8c     B2 00 A0 FD | 	call	#popregs_
05e90                 | _compile_fun_2p_ret
05e90     2D 00 64 FD | 	ret
05e94                 | 
05e94                 | ' 
05e94                 | ' function compile_fun_3p() as ulong
05e94                 | _compile_fun_3p
05e94     01 4A 05 F6 | 	mov	COUNT_, #1
05e98     A8 00 A0 FD | 	call	#pushregs_
05e9c     E0 21 B0 FD | 	call	#_expr
05ea0                 | ' 
05ea0                 | ' expr()
05ea0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05ea0     56 00 00 FF 
05ea4     18 E4 05 F1 | 	add	objptr, ##44056
05ea8     F2 1E 02 FB | 	rdlong	local01, objptr
05eac     03 1E 66 F0 | 	shl	local01, #3
05eb0     02 00 00 FF 
05eb4     38 E4 85 F1 | 	sub	objptr, ##1080
05eb8     F2 1E 02 F1 | 	add	local01, objptr
05ebc     04 1E 06 F1 | 	add	local01, #4
05ec0     0F 1F 02 FB | 	rdlong	local01, local01
05ec4     11 1E 0E F2 | 	cmp	local01, #17 wz
05ec8     53 00 00 FF 
05ecc     E0 E5 85 F1 | 	sub	objptr, ##42976
05ed0     15 FA 05 56 |  if_ne	mov	result1, #21
05ed4     7C 00 90 5D |  if_ne	jmp	#LR__0520
05ed8     56 00 00 FF 
05edc     18 E4 05 F1 | 	add	objptr, ##44056
05ee0     F2 1E 02 FB | 	rdlong	local01, objptr
05ee4     01 1E 06 F1 | 	add	local01, #1
05ee8     F2 1E 62 FC | 	wrlong	local01, objptr
05eec     56 00 00 FF 
05ef0     18 E4 85 F1 | 	sub	objptr, ##44056
05ef4     88 21 B0 FD | 	call	#_expr
05ef8                 | ' expr()
05ef8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05ef8     56 00 00 FF 
05efc     18 E4 05 F1 | 	add	objptr, ##44056
05f00     F2 1E 02 FB | 	rdlong	local01, objptr
05f04     03 1E 66 F0 | 	shl	local01, #3
05f08     02 00 00 FF 
05f0c     38 E4 85 F1 | 	sub	objptr, ##1080
05f10     F2 1E 02 F1 | 	add	local01, objptr
05f14     04 1E 06 F1 | 	add	local01, #4
05f18     0F 1F 02 FB | 	rdlong	local01, local01
05f1c     11 1E 0E F2 | 	cmp	local01, #17 wz
05f20     53 00 00 FF 
05f24     E0 E5 85 F1 | 	sub	objptr, ##42976
05f28     15 FA 05 56 |  if_ne	mov	result1, #21
05f2c     24 00 90 5D |  if_ne	jmp	#LR__0520
05f30     56 00 00 FF 
05f34     18 E4 05 F1 | 	add	objptr, ##44056
05f38     F2 1E 02 FB | 	rdlong	local01, objptr
05f3c     01 1E 06 F1 | 	add	local01, #1
05f40     F2 1E 62 FC | 	wrlong	local01, objptr
05f44     56 00 00 FF 
05f48     18 E4 85 F1 | 	sub	objptr, ##44056
05f4c     30 21 B0 FD | 	call	#_expr
05f50     00 FA 05 F6 | 	mov	result1, #0
05f54                 | LR__0520
05f54     A7 F0 03 F6 | 	mov	ptra, fp
05f58     B2 00 A0 FD | 	call	#popregs_
05f5c                 | _compile_fun_3p_ret
05f5c     2D 00 64 FD | 	ret
05f60                 | 
05f60                 | ' 
05f60                 | ' function compile_fun_4p() as ulong
05f60                 | _compile_fun_4p
05f60     01 4A 05 F6 | 	mov	COUNT_, #1
05f64     A8 00 A0 FD | 	call	#pushregs_
05f68     14 21 B0 FD | 	call	#_expr
05f6c                 | ' 
05f6c                 | ' expr()
05f6c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05f6c     56 00 00 FF 
05f70     18 E4 05 F1 | 	add	objptr, ##44056
05f74     F2 1E 02 FB | 	rdlong	local01, objptr
05f78     03 1E 66 F0 | 	shl	local01, #3
05f7c     02 00 00 FF 
05f80     38 E4 85 F1 | 	sub	objptr, ##1080
05f84     F2 1E 02 F1 | 	add	local01, objptr
05f88     04 1E 06 F1 | 	add	local01, #4
05f8c     0F 1F 02 FB | 	rdlong	local01, local01
05f90     11 1E 0E F2 | 	cmp	local01, #17 wz
05f94     53 00 00 FF 
05f98     E0 E5 85 F1 | 	sub	objptr, ##42976
05f9c     15 FA 05 56 |  if_ne	mov	result1, #21
05fa0     D4 00 90 5D |  if_ne	jmp	#LR__0530
05fa4     56 00 00 FF 
05fa8     18 E4 05 F1 | 	add	objptr, ##44056
05fac     F2 1E 02 FB | 	rdlong	local01, objptr
05fb0     01 1E 06 F1 | 	add	local01, #1
05fb4     F2 1E 62 FC | 	wrlong	local01, objptr
05fb8     56 00 00 FF 
05fbc     18 E4 85 F1 | 	sub	objptr, ##44056
05fc0     BC 20 B0 FD | 	call	#_expr
05fc4                 | ' expr()
05fc4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05fc4     56 00 00 FF 
05fc8     18 E4 05 F1 | 	add	objptr, ##44056
05fcc     F2 1E 02 FB | 	rdlong	local01, objptr
05fd0     03 1E 66 F0 | 	shl	local01, #3
05fd4     02 00 00 FF 
05fd8     38 E4 85 F1 | 	sub	objptr, ##1080
05fdc     F2 1E 02 F1 | 	add	local01, objptr
05fe0     04 1E 06 F1 | 	add	local01, #4
05fe4     0F 1F 02 FB | 	rdlong	local01, local01
05fe8     11 1E 0E F2 | 	cmp	local01, #17 wz
05fec     53 00 00 FF 
05ff0     E0 E5 85 F1 | 	sub	objptr, ##42976
05ff4     15 FA 05 56 |  if_ne	mov	result1, #21
05ff8     7C 00 90 5D |  if_ne	jmp	#LR__0530
05ffc     56 00 00 FF 
06000     18 E4 05 F1 | 	add	objptr, ##44056
06004     F2 1E 02 FB | 	rdlong	local01, objptr
06008     01 1E 06 F1 | 	add	local01, #1
0600c     F2 1E 62 FC | 	wrlong	local01, objptr
06010     56 00 00 FF 
06014     18 E4 85 F1 | 	sub	objptr, ##44056
06018     64 20 B0 FD | 	call	#_expr
0601c                 | ' expr()
0601c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0601c     56 00 00 FF 
06020     18 E4 05 F1 | 	add	objptr, ##44056
06024     F2 1E 02 FB | 	rdlong	local01, objptr
06028     03 1E 66 F0 | 	shl	local01, #3
0602c     02 00 00 FF 
06030     38 E4 85 F1 | 	sub	objptr, ##1080
06034     F2 1E 02 F1 | 	add	local01, objptr
06038     04 1E 06 F1 | 	add	local01, #4
0603c     0F 1F 02 FB | 	rdlong	local01, local01
06040     11 1E 0E F2 | 	cmp	local01, #17 wz
06044     53 00 00 FF 
06048     E0 E5 85 F1 | 	sub	objptr, ##42976
0604c     15 FA 05 56 |  if_ne	mov	result1, #21
06050     24 00 90 5D |  if_ne	jmp	#LR__0530
06054     56 00 00 FF 
06058     18 E4 05 F1 | 	add	objptr, ##44056
0605c     F2 1E 02 FB | 	rdlong	local01, objptr
06060     01 1E 06 F1 | 	add	local01, #1
06064     F2 1E 62 FC | 	wrlong	local01, objptr
06068     56 00 00 FF 
0606c     18 E4 85 F1 | 	sub	objptr, ##44056
06070     0C 20 B0 FD | 	call	#_expr
06074     00 FA 05 F6 | 	mov	result1, #0
06078                 | LR__0530
06078     A7 F0 03 F6 | 	mov	ptra, fp
0607c     B2 00 A0 FD | 	call	#popregs_
06080                 | _compile_fun_4p_ret
06080     2D 00 64 FD | 	ret
06084                 | 
06084                 | ' 
06084                 | ' 
06084                 | ' function compile_fun_5p() as ulong
06084                 | _compile_fun_5p
06084     01 4A 05 F6 | 	mov	COUNT_, #1
06088     A8 00 A0 FD | 	call	#pushregs_
0608c     F0 1F B0 FD | 	call	#_expr
06090                 | ' 
06090                 | ' expr()
06090                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06090     56 00 00 FF 
06094     18 E4 05 F1 | 	add	objptr, ##44056
06098     F2 1E 02 FB | 	rdlong	local01, objptr
0609c     03 1E 66 F0 | 	shl	local01, #3
060a0     02 00 00 FF 
060a4     38 E4 85 F1 | 	sub	objptr, ##1080
060a8     F2 1E 02 F1 | 	add	local01, objptr
060ac     04 1E 06 F1 | 	add	local01, #4
060b0     0F 1F 02 FB | 	rdlong	local01, local01
060b4     11 1E 0E F2 | 	cmp	local01, #17 wz
060b8     53 00 00 FF 
060bc     E0 E5 85 F1 | 	sub	objptr, ##42976
060c0     15 FA 05 56 |  if_ne	mov	result1, #21
060c4     2C 01 90 5D |  if_ne	jmp	#LR__0540
060c8     56 00 00 FF 
060cc     18 E4 05 F1 | 	add	objptr, ##44056
060d0     F2 1E 02 FB | 	rdlong	local01, objptr
060d4     01 1E 06 F1 | 	add	local01, #1
060d8     F2 1E 62 FC | 	wrlong	local01, objptr
060dc     56 00 00 FF 
060e0     18 E4 85 F1 | 	sub	objptr, ##44056
060e4     98 1F B0 FD | 	call	#_expr
060e8                 | ' expr()
060e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
060e8     56 00 00 FF 
060ec     18 E4 05 F1 | 	add	objptr, ##44056
060f0     F2 1E 02 FB | 	rdlong	local01, objptr
060f4     03 1E 66 F0 | 	shl	local01, #3
060f8     02 00 00 FF 
060fc     38 E4 85 F1 | 	sub	objptr, ##1080
06100     F2 1E 02 F1 | 	add	local01, objptr
06104     04 1E 06 F1 | 	add	local01, #4
06108     0F 1F 02 FB | 	rdlong	local01, local01
0610c     11 1E 0E F2 | 	cmp	local01, #17 wz
06110     53 00 00 FF 
06114     E0 E5 85 F1 | 	sub	objptr, ##42976
06118     15 FA 05 56 |  if_ne	mov	result1, #21
0611c     D4 00 90 5D |  if_ne	jmp	#LR__0540
06120     56 00 00 FF 
06124     18 E4 05 F1 | 	add	objptr, ##44056
06128     F2 1E 02 FB | 	rdlong	local01, objptr
0612c     01 1E 06 F1 | 	add	local01, #1
06130     F2 1E 62 FC | 	wrlong	local01, objptr
06134     56 00 00 FF 
06138     18 E4 85 F1 | 	sub	objptr, ##44056
0613c     40 1F B0 FD | 	call	#_expr
06140                 | ' expr()
06140                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06140     56 00 00 FF 
06144     18 E4 05 F1 | 	add	objptr, ##44056
06148     F2 1E 02 FB | 	rdlong	local01, objptr
0614c     03 1E 66 F0 | 	shl	local01, #3
06150     02 00 00 FF 
06154     38 E4 85 F1 | 	sub	objptr, ##1080
06158     F2 1E 02 F1 | 	add	local01, objptr
0615c     04 1E 06 F1 | 	add	local01, #4
06160     0F 1F 02 FB | 	rdlong	local01, local01
06164     11 1E 0E F2 | 	cmp	local01, #17 wz
06168     53 00 00 FF 
0616c     E0 E5 85 F1 | 	sub	objptr, ##42976
06170     15 FA 05 56 |  if_ne	mov	result1, #21
06174     7C 00 90 5D |  if_ne	jmp	#LR__0540
06178     56 00 00 FF 
0617c     18 E4 05 F1 | 	add	objptr, ##44056
06180     F2 1E 02 FB | 	rdlong	local01, objptr
06184     01 1E 06 F1 | 	add	local01, #1
06188     F2 1E 62 FC | 	wrlong	local01, objptr
0618c     56 00 00 FF 
06190     18 E4 85 F1 | 	sub	objptr, ##44056
06194     E8 1E B0 FD | 	call	#_expr
06198                 | ' expr()
06198                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06198     56 00 00 FF 
0619c     18 E4 05 F1 | 	add	objptr, ##44056
061a0     F2 1E 02 FB | 	rdlong	local01, objptr
061a4     03 1E 66 F0 | 	shl	local01, #3
061a8     02 00 00 FF 
061ac     38 E4 85 F1 | 	sub	objptr, ##1080
061b0     F2 1E 02 F1 | 	add	local01, objptr
061b4     04 1E 06 F1 | 	add	local01, #4
061b8     0F 1F 02 FB | 	rdlong	local01, local01
061bc     11 1E 0E F2 | 	cmp	local01, #17 wz
061c0     53 00 00 FF 
061c4     E0 E5 85 F1 | 	sub	objptr, ##42976
061c8     15 FA 05 56 |  if_ne	mov	result1, #21
061cc     24 00 90 5D |  if_ne	jmp	#LR__0540
061d0     56 00 00 FF 
061d4     18 E4 05 F1 | 	add	objptr, ##44056
061d8     F2 1E 02 FB | 	rdlong	local01, objptr
061dc     01 1E 06 F1 | 	add	local01, #1
061e0     F2 1E 62 FC | 	wrlong	local01, objptr
061e4     56 00 00 FF 
061e8     18 E4 85 F1 | 	sub	objptr, ##44056
061ec     90 1E B0 FD | 	call	#_expr
061f0     00 FA 05 F6 | 	mov	result1, #0
061f4                 | LR__0540
061f4     A7 F0 03 F6 | 	mov	ptra, fp
061f8     B2 00 A0 FD | 	call	#popregs_
061fc                 | _compile_fun_5p_ret
061fc     2D 00 64 FD | 	ret
06200                 | 
06200                 | ' 
06200                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
06200                 | _compile_fun_varp
06200     02 4A 05 F6 | 	mov	COUNT_, #2
06204     A8 00 A0 FD | 	call	#pushregs_
06208     00 1E 06 F6 | 	mov	local01, #0
0620c                 | ' i=0
0620c                 | ' if lparts(ct).token<>token_end then
0620c     56 00 00 FF 
06210     18 E4 05 F1 | 	add	objptr, ##44056
06214     F2 20 02 FB | 	rdlong	local02, objptr
06218     03 20 66 F0 | 	shl	local02, #3
0621c     02 00 00 FF 
06220     38 E4 85 F1 | 	sub	objptr, ##1080
06224     F2 20 02 F1 | 	add	local02, objptr
06228     04 20 06 F1 | 	add	local02, #4
0622c     10 21 02 FB | 	rdlong	local02, local02
06230     FE 21 0E F2 | 	cmp	local02, #510 wz
06234     53 00 00 FF 
06238     E0 E5 85 F1 | 	sub	objptr, ##42976
0623c     5C 00 90 AD |  if_e	jmp	#LR__0552
06240                 | '   do
06240                 | LR__0550
06240     3C 1E B0 FD | 	call	#_expr
06244     01 1E 06 F1 | 	add	local01, #1
06248                 | '   expr()
06248                 | '    i+=1
06248                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06248     56 00 00 FF 
0624c     18 E4 05 F1 | 	add	objptr, ##44056
06250     F2 20 02 FB | 	rdlong	local02, objptr
06254     03 20 66 F0 | 	shl	local02, #3
06258     02 00 00 FF 
0625c     38 E4 85 F1 | 	sub	objptr, ##1080
06260     F2 20 02 F1 | 	add	local02, objptr
06264     04 20 06 F1 | 	add	local02, #4
06268     10 21 02 FB | 	rdlong	local02, local02
0626c     11 20 0E F2 | 	cmp	local02, #17 wz
06270     53 00 00 FF 
06274     E0 E5 85 F1 | 	sub	objptr, ##42976
06278     20 00 90 5D |  if_ne	jmp	#LR__0551
0627c     56 00 00 FF 
06280     18 E4 05 F1 | 	add	objptr, ##44056
06284     F2 20 02 FB | 	rdlong	local02, objptr
06288     01 20 06 F1 | 	add	local02, #1
0628c     F2 20 62 FC | 	wrlong	local02, objptr
06290     56 00 00 FF 
06294     18 E4 85 F1 | 	sub	objptr, ##44056
06298     A4 FF 9F FD | 	jmp	#LR__0550
0629c                 | LR__0551
0629c                 | LR__0552
0629c                 | ' return i
0629c     0F FB 01 F6 | 	mov	result1, local01
062a0     A7 F0 03 F6 | 	mov	ptra, fp
062a4     B2 00 A0 FD | 	call	#popregs_
062a8                 | _compile_fun_varp_ret
062a8     2D 00 64 FD | 	ret
062ac                 | 
062ac                 | ' 
062ac                 | ' 
062ac                 | ' function compile_int_fun_2p() as ulong
062ac                 | _compile_int_fun_2p
062ac     01 4A 05 F6 | 	mov	COUNT_, #1
062b0     A8 00 A0 FD | 	call	#pushregs_
062b4     80 FA BF FD | 	call	#_compile_converttoint
062b8     FD 1E 02 F6 | 	mov	local01, result1
062bc                 | ' err=compile_converttoint() : if err>0 then return err
062bc     01 1E 56 F2 | 	cmps	local01, #1 wc
062c0     0F FB 01 36 |  if_ae	mov	result1, local01
062c4     58 00 90 3D |  if_ae	jmp	#LR__0560
062c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
062c8     56 00 00 FF 
062cc     18 E4 05 F1 | 	add	objptr, ##44056
062d0     F2 1E 02 FB | 	rdlong	local01, objptr
062d4     03 1E 66 F0 | 	shl	local01, #3
062d8     02 00 00 FF 
062dc     38 E4 85 F1 | 	sub	objptr, ##1080
062e0     F2 1E 02 F1 | 	add	local01, objptr
062e4     04 1E 06 F1 | 	add	local01, #4
062e8     0F 1F 02 FB | 	rdlong	local01, local01
062ec     11 1E 0E F2 | 	cmp	local01, #17 wz
062f0     53 00 00 FF 
062f4     E0 E5 85 F1 | 	sub	objptr, ##42976
062f8     15 FA 05 56 |  if_ne	mov	result1, #21
062fc     20 00 90 5D |  if_ne	jmp	#LR__0560
06300     56 00 00 FF 
06304     18 E4 05 F1 | 	add	objptr, ##44056
06308     F2 1E 02 FB | 	rdlong	local01, objptr
0630c     01 1E 06 F1 | 	add	local01, #1
06310     F2 1E 62 FC | 	wrlong	local01, objptr
06314     56 00 00 FF 
06318     18 E4 85 F1 | 	sub	objptr, ##44056
0631c     18 FA BF FD | 	call	#_compile_converttoint
06320                 | ' err=compile_converttoint() 
06320                 | ' return err
06320                 | LR__0560
06320     A7 F0 03 F6 | 	mov	ptra, fp
06324     B2 00 A0 FD | 	call	#popregs_
06328                 | _compile_int_fun_2p_ret
06328     2D 00 64 FD | 	ret
0632c                 | 
0632c                 | ' 
0632c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0632c                 | _compile_print
0632c     0B 4A 05 F6 | 	mov	COUNT_, #11
06330     A8 00 A0 FD | 	call	#pushregs_
06334     00 1E 06 F6 | 	mov	local01, #0
06338     1D 22 06 F6 | 	mov	local03, #29
0633c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0633c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0633c     56 00 00 FF 
06340     18 E4 05 F1 | 	add	objptr, ##44056
06344     F2 24 02 FB | 	rdlong	local04, objptr
06348     03 24 66 F0 | 	shl	local04, #3
0634c     02 00 00 FF 
06350     38 E4 85 F1 | 	sub	objptr, ##1080
06354     F2 24 02 F1 | 	add	local04, objptr
06358     04 24 06 F1 | 	add	local04, #4
0635c     12 25 02 FB | 	rdlong	local04, local04
06360     FE 25 0E F2 | 	cmp	local04, #510 wz
06364     53 00 00 FF 
06368     E0 E5 85 F1 | 	sub	objptr, ##42976
0636c     68 01 90 5D |  if_ne	jmp	#LR__0570
06370     20 22 06 F6 | 	mov	local03, #32
06374     0F 27 02 F6 | 	mov	local05, local01
06378     10 29 02 F6 | 	mov	local06, local02
0637c     11 2B 02 F6 | 	mov	local07, local03
06380     69 00 00 FF 
06384     50 E4 05 F1 | 	add	objptr, ##53840
06388     F2 2C 02 FB | 	rdlong	local08, objptr
0638c     16 2F 02 F6 | 	mov	local09, local08
06390     01 2E 66 F0 | 	shl	local09, #1
06394     16 2F 02 F1 | 	add	local09, local08
06398     02 2E 66 F0 | 	shl	local09, #2
0639c     03 00 00 FF 
063a0     00 E4 85 F1 | 	sub	objptr, ##1536
063a4     F2 2E 02 F1 | 	add	local09, objptr
063a8     17 27 62 FC | 	wrlong	local05, local09
063ac     03 00 00 FF 
063b0     00 E4 05 F1 | 	add	objptr, ##1536
063b4     F2 26 02 FB | 	rdlong	local05, objptr
063b8     13 31 02 F6 | 	mov	local10, local05
063bc     01 30 66 F0 | 	shl	local10, #1
063c0     13 31 02 F1 | 	add	local10, local05
063c4     02 30 66 F0 | 	shl	local10, #2
063c8     03 00 00 FF 
063cc     00 E4 85 F1 | 	sub	objptr, ##1536
063d0     F2 30 02 F1 | 	add	local10, objptr
063d4     04 30 06 F1 | 	add	local10, #4
063d8     18 29 62 FC | 	wrlong	local06, local10
063dc     03 00 00 FF 
063e0     00 E4 05 F1 | 	add	objptr, ##1536
063e4     F2 26 02 FB | 	rdlong	local05, objptr
063e8     13 33 02 F6 | 	mov	local11, local05
063ec     01 32 66 F0 | 	shl	local11, #1
063f0     13 33 02 F1 | 	add	local11, local05
063f4     02 32 66 F0 | 	shl	local11, #2
063f8     03 00 00 FF 
063fc     00 E4 85 F1 | 	sub	objptr, ##1536
06400     F2 32 02 F1 | 	add	local11, objptr
06404     08 32 06 F1 | 	add	local11, #8
06408     19 2B 62 FC | 	wrlong	local07, local11
0640c     03 00 00 FF 
06410     00 E4 05 F1 | 	add	objptr, ##1536
06414     F2 26 02 FB | 	rdlong	local05, objptr
06418     01 26 06 F1 | 	add	local05, #1
0641c     F2 26 62 FC | 	wrlong	local05, objptr
06420     44 22 06 F6 | 	mov	local03, #68
06424     0F 27 02 F6 | 	mov	local05, local01
06428     10 29 02 F6 | 	mov	local06, local02
0642c     11 2B 02 F6 | 	mov	local07, local03
06430     F2 2C 02 FB | 	rdlong	local08, objptr
06434     16 2F 02 F6 | 	mov	local09, local08
06438     01 2E 66 F0 | 	shl	local09, #1
0643c     16 2F 02 F1 | 	add	local09, local08
06440     02 2E 66 F0 | 	shl	local09, #2
06444     03 00 00 FF 
06448     00 E4 85 F1 | 	sub	objptr, ##1536
0644c     F2 2E 02 F1 | 	add	local09, objptr
06450     17 27 62 FC | 	wrlong	local05, local09
06454     03 00 00 FF 
06458     00 E4 05 F1 | 	add	objptr, ##1536
0645c     F2 32 02 FB | 	rdlong	local11, objptr
06460     19 31 02 F6 | 	mov	local10, local11
06464     01 30 66 F0 | 	shl	local10, #1
06468     19 31 02 F1 | 	add	local10, local11
0646c     02 30 66 F0 | 	shl	local10, #2
06470     03 00 00 FF 
06474     00 E4 85 F1 | 	sub	objptr, ##1536
06478     F2 30 02 F1 | 	add	local10, objptr
0647c     04 30 06 F1 | 	add	local10, #4
06480     18 29 62 FC | 	wrlong	local06, local10
06484     03 00 00 FF 
06488     00 E4 05 F1 | 	add	objptr, ##1536
0648c     F2 30 02 FB | 	rdlong	local10, objptr
06490     18 33 02 F6 | 	mov	local11, local10
06494     01 32 66 F0 | 	shl	local11, #1
06498     18 33 02 F1 | 	add	local11, local10
0649c     02 32 66 F0 | 	shl	local11, #2
064a0     03 00 00 FF 
064a4     00 E4 85 F1 | 	sub	objptr, ##1536
064a8     F2 32 02 F1 | 	add	local11, objptr
064ac     08 32 06 F1 | 	add	local11, #8
064b0     19 2B 62 FC | 	wrlong	local07, local11
064b4     03 00 00 FF 
064b8     00 E4 05 F1 | 	add	objptr, ##1536
064bc     F2 26 02 FB | 	rdlong	local05, objptr
064c0     01 26 06 F1 | 	add	local05, #1
064c4     F2 26 62 FC | 	wrlong	local05, objptr
064c8     69 00 00 FF 
064cc     50 E4 85 F1 | 	sub	objptr, ##53840
064d0     00 FA 05 F6 | 	mov	result1, #0
064d4     20 05 90 FD | 	jmp	#LR__0577
064d8                 | LR__0570
064d8                 | ' do
064d8                 | LR__0571
064d8     A4 1B B0 FD | 	call	#_expr
064dc                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
064dc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
064dc     56 00 00 FF 
064e0     18 E4 05 F1 | 	add	objptr, ##44056
064e4     F2 24 02 FB | 	rdlong	local04, objptr
064e8     03 24 66 F0 | 	shl	local04, #3
064ec     02 00 00 FF 
064f0     38 E4 85 F1 | 	sub	objptr, ##1080
064f4     F2 24 02 F1 | 	add	local04, objptr
064f8     04 24 06 F1 | 	add	local04, #4
064fc     12 2D 02 FB | 	rdlong	local08, local04
06500     11 2C 0E F2 | 	cmp	local08, #17 wz
06504     53 00 00 FF 
06508     E0 E5 85 F1 | 	sub	objptr, ##42976
0650c     60 01 90 5D |  if_ne	jmp	#LR__0572
06510     21 22 06 F6 | 	mov	local03, #33
06514     0F 27 02 F6 | 	mov	local05, local01
06518     10 29 02 F6 | 	mov	local06, local02
0651c     11 2B 02 F6 | 	mov	local07, local03
06520     69 00 00 FF 
06524     50 E4 05 F1 | 	add	objptr, ##53840
06528     F2 2C 02 FB | 	rdlong	local08, objptr
0652c     16 2F 02 F6 | 	mov	local09, local08
06530     01 2E 66 F0 | 	shl	local09, #1
06534     16 2F 02 F1 | 	add	local09, local08
06538     02 2E 66 F0 | 	shl	local09, #2
0653c     03 00 00 FF 
06540     00 E4 85 F1 | 	sub	objptr, ##1536
06544     F2 2E 02 F1 | 	add	local09, objptr
06548     17 27 62 FC | 	wrlong	local05, local09
0654c     03 00 00 FF 
06550     00 E4 05 F1 | 	add	objptr, ##1536
06554     F2 32 02 FB | 	rdlong	local11, objptr
06558     19 31 02 F6 | 	mov	local10, local11
0655c     01 30 66 F0 | 	shl	local10, #1
06560     19 31 02 F1 | 	add	local10, local11
06564     02 30 66 F0 | 	shl	local10, #2
06568     03 00 00 FF 
0656c     00 E4 85 F1 | 	sub	objptr, ##1536
06570     F2 30 02 F1 | 	add	local10, objptr
06574     04 30 06 F1 | 	add	local10, #4
06578     18 29 62 FC | 	wrlong	local06, local10
0657c     03 00 00 FF 
06580     00 E4 05 F1 | 	add	objptr, ##1536
06584     F2 26 02 FB | 	rdlong	local05, objptr
06588     13 33 02 F6 | 	mov	local11, local05
0658c     01 32 66 F0 | 	shl	local11, #1
06590     13 33 02 F1 | 	add	local11, local05
06594     02 32 66 F0 | 	shl	local11, #2
06598     03 00 00 FF 
0659c     00 E4 85 F1 | 	sub	objptr, ##1536
065a0     F2 32 02 F1 | 	add	local11, objptr
065a4     08 32 06 F1 | 	add	local11, #8
065a8     19 2B 62 FC | 	wrlong	local07, local11
065ac     03 00 00 FF 
065b0     00 E4 05 F1 | 	add	objptr, ##1536
065b4     F2 26 02 FB | 	rdlong	local05, objptr
065b8     01 26 06 F1 | 	add	local05, #1
065bc     F2 26 62 FC | 	wrlong	local05, objptr
065c0     44 22 06 F6 | 	mov	local03, #68
065c4     0F 27 02 F6 | 	mov	local05, local01
065c8     10 29 02 F6 | 	mov	local06, local02
065cc     11 2B 02 F6 | 	mov	local07, local03
065d0     F2 2C 02 FB | 	rdlong	local08, objptr
065d4     16 2F 02 F6 | 	mov	local09, local08
065d8     01 2E 66 F0 | 	shl	local09, #1
065dc     16 2F 02 F1 | 	add	local09, local08
065e0     02 2E 66 F0 | 	shl	local09, #2
065e4     03 00 00 FF 
065e8     00 E4 85 F1 | 	sub	objptr, ##1536
065ec     F2 2E 02 F1 | 	add	local09, objptr
065f0     17 27 62 FC | 	wrlong	local05, local09
065f4     03 00 00 FF 
065f8     00 E4 05 F1 | 	add	objptr, ##1536
065fc     F2 32 02 FB | 	rdlong	local11, objptr
06600     19 31 02 F6 | 	mov	local10, local11
06604     01 30 66 F0 | 	shl	local10, #1
06608     19 31 02 F1 | 	add	local10, local11
0660c     02 30 66 F0 | 	shl	local10, #2
06610     03 00 00 FF 
06614     00 E4 85 F1 | 	sub	objptr, ##1536
06618     F2 30 02 F1 | 	add	local10, objptr
0661c     04 30 06 F1 | 	add	local10, #4
06620     18 29 62 FC | 	wrlong	local06, local10
06624     03 00 00 FF 
06628     00 E4 05 F1 | 	add	objptr, ##1536
0662c     F2 30 02 FB | 	rdlong	local10, objptr
06630     18 33 02 F6 | 	mov	local11, local10
06634     01 32 66 F0 | 	shl	local11, #1
06638     18 33 02 F1 | 	add	local11, local10
0663c     02 32 66 F0 | 	shl	local11, #2
06640     03 00 00 FF 
06644     00 E4 85 F1 | 	sub	objptr, ##1536
06648     F2 32 02 F1 | 	add	local11, objptr
0664c     08 32 06 F1 | 	add	local11, #8
06650     19 2B 62 FC | 	wrlong	local07, local11
06654     03 00 00 FF 
06658     00 E4 05 F1 | 	add	objptr, ##1536
0665c     F2 26 02 FB | 	rdlong	local05, objptr
06660     01 26 06 F1 | 	add	local05, #1
06664     F2 26 62 FC | 	wrlong	local05, objptr
06668     69 00 00 FF 
0666c     50 E4 85 F1 | 	sub	objptr, ##53840
06670                 | LR__0572
06670                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06670     56 00 00 FF 
06674     18 E4 05 F1 | 	add	objptr, ##44056
06678     F2 24 02 FB | 	rdlong	local04, objptr
0667c     03 24 66 F0 | 	shl	local04, #3
06680     02 00 00 FF 
06684     38 E4 85 F1 | 	sub	objptr, ##1080
06688     F2 24 02 F1 | 	add	local04, objptr
0668c     04 24 06 F1 | 	add	local04, #4
06690     12 2D 02 FB | 	rdlong	local08, local04
06694     12 2C 0E F2 | 	cmp	local08, #18 wz
06698     53 00 00 FF 
0669c     E0 E5 85 F1 | 	sub	objptr, ##42976
066a0     60 01 90 5D |  if_ne	jmp	#LR__0573
066a4     22 22 06 F6 | 	mov	local03, #34
066a8     0F 27 02 F6 | 	mov	local05, local01
066ac     10 29 02 F6 | 	mov	local06, local02
066b0     11 2B 02 F6 | 	mov	local07, local03
066b4     69 00 00 FF 
066b8     50 E4 05 F1 | 	add	objptr, ##53840
066bc     F2 2C 02 FB | 	rdlong	local08, objptr
066c0     16 2F 02 F6 | 	mov	local09, local08
066c4     01 2E 66 F0 | 	shl	local09, #1
066c8     16 2F 02 F1 | 	add	local09, local08
066cc     02 2E 66 F0 | 	shl	local09, #2
066d0     03 00 00 FF 
066d4     00 E4 85 F1 | 	sub	objptr, ##1536
066d8     F2 2E 02 F1 | 	add	local09, objptr
066dc     17 27 62 FC | 	wrlong	local05, local09
066e0     03 00 00 FF 
066e4     00 E4 05 F1 | 	add	objptr, ##1536
066e8     F2 32 02 FB | 	rdlong	local11, objptr
066ec     19 31 02 F6 | 	mov	local10, local11
066f0     01 30 66 F0 | 	shl	local10, #1
066f4     19 31 02 F1 | 	add	local10, local11
066f8     02 30 66 F0 | 	shl	local10, #2
066fc     03 00 00 FF 
06700     00 E4 85 F1 | 	sub	objptr, ##1536
06704     F2 30 02 F1 | 	add	local10, objptr
06708     04 30 06 F1 | 	add	local10, #4
0670c     18 29 62 FC | 	wrlong	local06, local10
06710     03 00 00 FF 
06714     00 E4 05 F1 | 	add	objptr, ##1536
06718     F2 26 02 FB | 	rdlong	local05, objptr
0671c     13 33 02 F6 | 	mov	local11, local05
06720     01 32 66 F0 | 	shl	local11, #1
06724     13 33 02 F1 | 	add	local11, local05
06728     02 32 66 F0 | 	shl	local11, #2
0672c     03 00 00 FF 
06730     00 E4 85 F1 | 	sub	objptr, ##1536
06734     F2 32 02 F1 | 	add	local11, objptr
06738     08 32 06 F1 | 	add	local11, #8
0673c     19 2B 62 FC | 	wrlong	local07, local11
06740     03 00 00 FF 
06744     00 E4 05 F1 | 	add	objptr, ##1536
06748     F2 26 02 FB | 	rdlong	local05, objptr
0674c     01 26 06 F1 | 	add	local05, #1
06750     F2 26 62 FC | 	wrlong	local05, objptr
06754     44 22 06 F6 | 	mov	local03, #68
06758     0F 27 02 F6 | 	mov	local05, local01
0675c     10 29 02 F6 | 	mov	local06, local02
06760     11 2B 02 F6 | 	mov	local07, local03
06764     F2 2C 02 FB | 	rdlong	local08, objptr
06768     16 2F 02 F6 | 	mov	local09, local08
0676c     01 2E 66 F0 | 	shl	local09, #1
06770     16 2F 02 F1 | 	add	local09, local08
06774     02 2E 66 F0 | 	shl	local09, #2
06778     03 00 00 FF 
0677c     00 E4 85 F1 | 	sub	objptr, ##1536
06780     F2 2E 02 F1 | 	add	local09, objptr
06784     17 27 62 FC | 	wrlong	local05, local09
06788     03 00 00 FF 
0678c     00 E4 05 F1 | 	add	objptr, ##1536
06790     F2 32 02 FB | 	rdlong	local11, objptr
06794     19 31 02 F6 | 	mov	local10, local11
06798     01 30 66 F0 | 	shl	local10, #1
0679c     19 31 02 F1 | 	add	local10, local11
067a0     02 30 66 F0 | 	shl	local10, #2
067a4     03 00 00 FF 
067a8     00 E4 85 F1 | 	sub	objptr, ##1536
067ac     F2 30 02 F1 | 	add	local10, objptr
067b0     04 30 06 F1 | 	add	local10, #4
067b4     18 29 62 FC | 	wrlong	local06, local10
067b8     03 00 00 FF 
067bc     00 E4 05 F1 | 	add	objptr, ##1536
067c0     F2 30 02 FB | 	rdlong	local10, objptr
067c4     18 33 02 F6 | 	mov	local11, local10
067c8     01 32 66 F0 | 	shl	local11, #1
067cc     18 33 02 F1 | 	add	local11, local10
067d0     02 32 66 F0 | 	shl	local11, #2
067d4     03 00 00 FF 
067d8     00 E4 85 F1 | 	sub	objptr, ##1536
067dc     F2 32 02 F1 | 	add	local11, objptr
067e0     08 32 06 F1 | 	add	local11, #8
067e4     19 2B 62 FC | 	wrlong	local07, local11
067e8     03 00 00 FF 
067ec     00 E4 05 F1 | 	add	objptr, ##1536
067f0     F2 26 02 FB | 	rdlong	local05, objptr
067f4     01 26 06 F1 | 	add	local05, #1
067f8     F2 26 62 FC | 	wrlong	local05, objptr
067fc     69 00 00 FF 
06800     50 E4 85 F1 | 	sub	objptr, ##53840
06804                 | LR__0573
06804                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
06804     56 00 00 FF 
06808     18 E4 05 F1 | 	add	objptr, ##44056
0680c     F2 24 02 FB | 	rdlong	local04, objptr
06810     03 24 66 F0 | 	shl	local04, #3
06814     02 00 00 FF 
06818     38 E4 85 F1 | 	sub	objptr, ##1080
0681c     F2 24 02 F1 | 	add	local04, objptr
06820     04 24 06 F1 | 	add	local04, #4
06824     12 2D 02 FB | 	rdlong	local08, local04
06828     FE 2D 0E F2 | 	cmp	local08, #510 wz
0682c     53 00 00 FF 
06830     E0 E5 85 F1 | 	sub	objptr, ##42976
06834     B8 00 90 5D |  if_ne	jmp	#LR__0574
06838     44 22 06 F6 | 	mov	local03, #68
0683c     0F 27 02 F6 | 	mov	local05, local01
06840     10 29 02 F6 | 	mov	local06, local02
06844     11 2B 02 F6 | 	mov	local07, local03
06848     69 00 00 FF 
0684c     50 E4 05 F1 | 	add	objptr, ##53840
06850     F2 2C 02 FB | 	rdlong	local08, objptr
06854     16 2F 02 F6 | 	mov	local09, local08
06858     01 2E 66 F0 | 	shl	local09, #1
0685c     16 2F 02 F1 | 	add	local09, local08
06860     02 2E 66 F0 | 	shl	local09, #2
06864     03 00 00 FF 
06868     00 E4 85 F1 | 	sub	objptr, ##1536
0686c     F2 2E 02 F1 | 	add	local09, objptr
06870     17 27 62 FC | 	wrlong	local05, local09
06874     03 00 00 FF 
06878     00 E4 05 F1 | 	add	objptr, ##1536
0687c     F2 32 02 FB | 	rdlong	local11, objptr
06880     19 31 02 F6 | 	mov	local10, local11
06884     01 30 66 F0 | 	shl	local10, #1
06888     19 31 02 F1 | 	add	local10, local11
0688c     02 30 66 F0 | 	shl	local10, #2
06890     03 00 00 FF 
06894     00 E4 85 F1 | 	sub	objptr, ##1536
06898     F2 30 02 F1 | 	add	local10, objptr
0689c     04 30 06 F1 | 	add	local10, #4
068a0     18 29 62 FC | 	wrlong	local06, local10
068a4     03 00 00 FF 
068a8     00 E4 05 F1 | 	add	objptr, ##1536
068ac     F2 30 02 FB | 	rdlong	local10, objptr
068b0     18 33 02 F6 | 	mov	local11, local10
068b4     01 32 66 F0 | 	shl	local11, #1
068b8     18 33 02 F1 | 	add	local11, local10
068bc     02 32 66 F0 | 	shl	local11, #2
068c0     03 00 00 FF 
068c4     00 E4 85 F1 | 	sub	objptr, ##1536
068c8     F2 32 02 F1 | 	add	local11, objptr
068cc     08 32 06 F1 | 	add	local11, #8
068d0     19 2B 62 FC | 	wrlong	local07, local11
068d4     03 00 00 FF 
068d8     00 E4 05 F1 | 	add	objptr, ##1536
068dc     F2 26 02 FB | 	rdlong	local05, objptr
068e0     01 26 06 F1 | 	add	local05, #1
068e4     F2 26 62 FC | 	wrlong	local05, objptr
068e8     69 00 00 FF 
068ec     50 E4 85 F1 | 	sub	objptr, ##53840
068f0                 | LR__0574
068f0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
068f0     56 00 00 FF 
068f4     18 E4 05 F1 | 	add	objptr, ##44056
068f8     F2 24 02 FB | 	rdlong	local04, objptr
068fc     03 24 66 F0 | 	shl	local04, #3
06900     02 00 00 FF 
06904     38 E4 85 F1 | 	sub	objptr, ##1080
06908     F2 24 02 F1 | 	add	local04, objptr
0690c     04 24 06 F1 | 	add	local04, #4
06910     12 2D 02 FB | 	rdlong	local08, local04
06914     11 2C 0E F2 | 	cmp	local08, #17 wz
06918     53 00 00 FF 
0691c     E0 E5 85 F1 | 	sub	objptr, ##42976
06920     6C 00 90 AD |  if_e	jmp	#LR__0575
06924     56 00 00 FF 
06928     18 E4 05 F1 | 	add	objptr, ##44056
0692c     F2 2C 02 FB | 	rdlong	local08, objptr
06930     03 2C 66 F0 | 	shl	local08, #3
06934     02 00 00 FF 
06938     38 E4 85 F1 | 	sub	objptr, ##1080
0693c     F2 2C 02 F1 | 	add	local08, objptr
06940     04 2C 06 F1 | 	add	local08, #4
06944     16 2D 02 FB | 	rdlong	local08, local08
06948     12 2C 0E F2 | 	cmp	local08, #18 wz
0694c     53 00 00 FF 
06950     E0 E5 85 F1 | 	sub	objptr, ##42976
06954     38 00 90 AD |  if_e	jmp	#LR__0575
06958     56 00 00 FF 
0695c     18 E4 05 F1 | 	add	objptr, ##44056
06960     F2 32 02 FB | 	rdlong	local11, objptr
06964     03 32 66 F0 | 	shl	local11, #3
06968     02 00 00 FF 
0696c     38 E4 85 F1 | 	sub	objptr, ##1080
06970     F2 32 02 F1 | 	add	local11, objptr
06974     04 32 06 F1 | 	add	local11, #4
06978     19 33 02 FB | 	rdlong	local11, local11
0697c     FE 33 0E F2 | 	cmp	local11, #510 wz
06980     53 00 00 FF 
06984     E0 E5 85 F1 | 	sub	objptr, ##42976
06988     16 FA 05 56 |  if_ne	mov	result1, #22
0698c     68 00 90 5D |  if_ne	jmp	#LR__0577
06990                 | LR__0575
06990     56 00 00 FF 
06994     18 E4 05 F1 | 	add	objptr, ##44056
06998     F2 24 02 FB | 	rdlong	local04, objptr
0699c     01 24 06 F1 | 	add	local04, #1
069a0     F2 24 62 FC | 	wrlong	local04, objptr
069a4     03 24 66 F0 | 	shl	local04, #3
069a8     02 00 00 FF 
069ac     38 E4 85 F1 | 	sub	objptr, ##1080
069b0     F2 24 02 F1 | 	add	local04, objptr
069b4     04 24 06 F1 | 	add	local04, #4
069b8     12 2D 02 FB | 	rdlong	local08, local04
069bc     FE 2D 0E F2 | 	cmp	local08, #510 wz
069c0     53 00 00 FF 
069c4     E0 E5 85 F1 | 	sub	objptr, ##42976
069c8     28 00 90 AD |  if_e	jmp	#LR__0576
069cc     56 00 00 FF 
069d0     18 E4 05 F1 | 	add	objptr, ##44056
069d4     F2 32 02 FB | 	rdlong	local11, objptr
069d8     0E 00 00 FF 
069dc     1C E4 05 F1 | 	add	objptr, ##7196
069e0     F2 30 02 FB | 	rdlong	local10, objptr
069e4     64 00 00 FF 
069e8     34 E4 85 F1 | 	sub	objptr, ##51252
069ec     18 33 52 F2 | 	cmps	local11, local10 wc
069f0     E4 FA 9F CD |  if_b	jmp	#LR__0571
069f4                 | LR__0576
069f4                 | ' return 0
069f4     00 FA 05 F6 | 	mov	result1, #0
069f8                 | LR__0577
069f8     A7 F0 03 F6 | 	mov	ptra, fp
069fc     B2 00 A0 FD | 	call	#popregs_
06a00                 | _compile_print_ret
06a00     2D 00 64 FD | 	ret
06a04                 | 
06a04                 | ' 
06a04                 | ' function compile_if() as ulong  
06a04                 | _compile_if
06a04     05 4A 05 F6 | 	mov	COUNT_, #5
06a08     A8 00 A0 FD | 	call	#pushregs_
06a0c                 | _compile_if_enter
06a0c     28 F3 BF FD | 	call	#_compile_converttoint
06a10                 | ' return err
06a10     56 00 00 FF 
06a14     18 E4 05 F1 | 	add	objptr, ##44056
06a18     F2 FA 01 FB | 	rdlong	result1, objptr
06a1c     01 FA 05 F1 | 	add	result1, #1
06a20     F2 FA 61 FC | 	wrlong	result1, objptr
06a24     58 22 06 F6 | 	mov	local03, #88
06a28     0F 25 02 F6 | 	mov	local04, local01
06a2c     10 27 02 F6 | 	mov	local05, local02
06a30     11 1F 02 F6 | 	mov	local01, local03
06a34     13 00 00 FF 
06a38     38 E4 05 F1 | 	add	objptr, ##9784
06a3c     F2 12 02 FB | 	rdlong	arg01, objptr
06a40     09 FB 01 F6 | 	mov	result1, arg01
06a44     01 FA 65 F0 | 	shl	result1, #1
06a48     09 FB 01 F1 | 	add	result1, arg01
06a4c     02 FA 65 F0 | 	shl	result1, #2
06a50     03 00 00 FF 
06a54     00 E4 85 F1 | 	sub	objptr, ##1536
06a58     F2 FA 01 F1 | 	add	result1, objptr
06a5c     FD 24 62 FC | 	wrlong	local04, result1
06a60     03 00 00 FF 
06a64     00 E4 05 F1 | 	add	objptr, ##1536
06a68     F2 12 02 FB | 	rdlong	arg01, objptr
06a6c     09 25 02 F6 | 	mov	local04, arg01
06a70     01 24 66 F0 | 	shl	local04, #1
06a74     09 25 02 F1 | 	add	local04, arg01
06a78     02 24 66 F0 | 	shl	local04, #2
06a7c     03 00 00 FF 
06a80     00 E4 85 F1 | 	sub	objptr, ##1536
06a84     F2 24 02 F1 | 	add	local04, objptr
06a88     04 24 06 F1 | 	add	local04, #4
06a8c     12 27 62 FC | 	wrlong	local05, local04
06a90     03 00 00 FF 
06a94     00 E4 05 F1 | 	add	objptr, ##1536
06a98     F2 24 02 FB | 	rdlong	local04, objptr
06a9c     12 27 02 F6 | 	mov	local05, local04
06aa0     01 26 66 F0 | 	shl	local05, #1
06aa4     12 27 02 F1 | 	add	local05, local04
06aa8     02 26 66 F0 | 	shl	local05, #2
06aac     03 00 00 FF 
06ab0     00 E4 85 F1 | 	sub	objptr, ##1536
06ab4     F2 26 02 F1 | 	add	local05, objptr
06ab8     08 26 06 F1 | 	add	local05, #8
06abc     13 1F 62 FC | 	wrlong	local01, local05
06ac0     03 00 00 FF 
06ac4     00 E4 05 F1 | 	add	objptr, ##1536
06ac8     F2 24 02 FB | 	rdlong	local04, objptr
06acc     01 24 06 F1 | 	add	local04, #1
06ad0     F2 24 62 FC | 	wrlong	local04, objptr
06ad4                 | ' 
06ad4                 | ' 'print "In compile_if"
06ad4                 | ' compile_int_fun_1p()
06ad4                 | ' cmd=lparts(ct).token : ct+=1
06ad4                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
06ad4                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
06ad4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06ad4     13 00 00 FF 
06ad8     38 E4 85 F1 | 	sub	objptr, ##9784
06adc     F2 26 02 FB | 	rdlong	local05, objptr
06ae0     01 26 06 F1 | 	add	local05, #1
06ae4     03 26 66 F0 | 	shl	local05, #3
06ae8     02 00 00 FF 
06aec     38 E4 85 F1 | 	sub	objptr, ##1080
06af0     F2 26 02 F1 | 	add	local05, objptr
06af4     13 13 02 FB | 	rdlong	arg01, local05
06af8     53 00 00 FF 
06afc     E0 E5 85 F1 | 	sub	objptr, ##42976
06b00                 | ' 
06b00                 | ' select case s
06b00     3E 01 00 FF 
06b04     BF 15 06 F6 | 	mov	arg02, ##@LR__4391
06b08     E4 1D B1 FD | 	call	#__system___string_cmp
06b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b10     1B FA 05 A6 |  if_e	mov	result1, #27
06b14     00 FA 05 56 |  if_ne	mov	result1, #0
06b18     00 FA 0D F2 | 	cmp	result1, #0 wz
06b1c     0C 00 90 AD |  if_e	jmp	#LR__0580
06b20     05 12 06 F6 | 	mov	arg01, #5
06b24     20 EC BF FD | 	call	#_compile_immediate_assign
06b28     08 00 90 FD | 	jmp	#LR__0581
06b2c                 | LR__0580
06b2c     05 12 06 F6 | 	mov	arg01, #5
06b30     8C E4 BF FD | 	call	#_compile_immediate
06b34                 | LR__0581
06b34                 | ' 
06b34                 | ' 
06b34                 | ' return 0
06b34     00 FA 05 F6 | 	mov	result1, #0
06b38     A7 F0 03 F6 | 	mov	ptra, fp
06b3c     B2 00 A0 FD | 	call	#popregs_
06b40                 | _compile_if_ret
06b40     2D 00 64 FD | 	ret
06b44                 | 
06b44                 | ' 
06b44                 | ' function compile_else() as ulong  
06b44                 | _compile_else
06b44     05 4A 05 F6 | 	mov	COUNT_, #5
06b48     A8 00 A0 FD | 	call	#pushregs_
06b4c                 | _compile_else_enter
06b4c     5A 22 06 F6 | 	mov	local03, #90
06b50     0F 25 02 F6 | 	mov	local04, local01
06b54     10 27 02 F6 | 	mov	local05, local02
06b58     11 1F 02 F6 | 	mov	local01, local03
06b5c     69 00 00 FF 
06b60     50 E4 05 F1 | 	add	objptr, ##53840
06b64     F2 12 02 FB | 	rdlong	arg01, objptr
06b68     09 FB 01 F6 | 	mov	result1, arg01
06b6c     01 FA 65 F0 | 	shl	result1, #1
06b70     09 FB 01 F1 | 	add	result1, arg01
06b74     02 FA 65 F0 | 	shl	result1, #2
06b78     03 00 00 FF 
06b7c     00 E4 85 F1 | 	sub	objptr, ##1536
06b80     F2 FA 01 F1 | 	add	result1, objptr
06b84     FD 24 62 FC | 	wrlong	local04, result1
06b88     03 00 00 FF 
06b8c     00 E4 05 F1 | 	add	objptr, ##1536
06b90     F2 FA 01 FB | 	rdlong	result1, objptr
06b94     FD 24 02 F6 | 	mov	local04, result1
06b98     01 24 66 F0 | 	shl	local04, #1
06b9c     FD 24 02 F1 | 	add	local04, result1
06ba0     02 24 66 F0 | 	shl	local04, #2
06ba4     03 00 00 FF 
06ba8     00 E4 85 F1 | 	sub	objptr, ##1536
06bac     F2 24 02 F1 | 	add	local04, objptr
06bb0     04 24 06 F1 | 	add	local04, #4
06bb4     12 27 62 FC | 	wrlong	local05, local04
06bb8     03 00 00 FF 
06bbc     00 E4 05 F1 | 	add	objptr, ##1536
06bc0     F2 24 02 FB | 	rdlong	local04, objptr
06bc4     12 27 02 F6 | 	mov	local05, local04
06bc8     01 26 66 F0 | 	shl	local05, #1
06bcc     12 27 02 F1 | 	add	local05, local04
06bd0     02 26 66 F0 | 	shl	local05, #2
06bd4     03 00 00 FF 
06bd8     00 E4 85 F1 | 	sub	objptr, ##1536
06bdc     F2 26 02 F1 | 	add	local05, objptr
06be0     08 26 06 F1 | 	add	local05, #8
06be4     13 1F 62 FC | 	wrlong	local01, local05
06be8     03 00 00 FF 
06bec     00 E4 05 F1 | 	add	objptr, ##1536
06bf0     F2 24 02 FB | 	rdlong	local04, objptr
06bf4     01 24 06 F1 | 	add	local04, #1
06bf8     F2 24 62 FC | 	wrlong	local04, objptr
06bfc                 | ' 
06bfc                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06bfc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06bfc     13 00 00 FF 
06c00     38 E4 85 F1 | 	sub	objptr, ##9784
06c04     F2 26 02 FB | 	rdlong	local05, objptr
06c08     01 26 06 F1 | 	add	local05, #1
06c0c     03 26 66 F0 | 	shl	local05, #3
06c10     02 00 00 FF 
06c14     38 E4 85 F1 | 	sub	objptr, ##1080
06c18     F2 26 02 F1 | 	add	local05, objptr
06c1c     13 13 02 FB | 	rdlong	arg01, local05
06c20     53 00 00 FF 
06c24     E0 E5 85 F1 | 	sub	objptr, ##42976
06c28                 | ' 
06c28                 | ' select case s
06c28     3E 01 00 FF 
06c2c     BF 15 06 F6 | 	mov	arg02, ##@LR__4391
06c30     BC 1C B1 FD | 	call	#__system___string_cmp
06c34     00 FA 0D F2 | 	cmp	result1, #0 wz
06c38     1B FA 05 A6 |  if_e	mov	result1, #27
06c3c     00 FA 05 56 |  if_ne	mov	result1, #0
06c40     00 FA 0D F2 | 	cmp	result1, #0 wz
06c44     0C 00 90 AD |  if_e	jmp	#LR__0590
06c48     05 12 06 F6 | 	mov	arg01, #5
06c4c     F8 EA BF FD | 	call	#_compile_immediate_assign
06c50     08 00 90 FD | 	jmp	#LR__0591
06c54                 | LR__0590
06c54     05 12 06 F6 | 	mov	arg01, #5
06c58     64 E3 BF FD | 	call	#_compile_immediate
06c5c                 | LR__0591
06c5c                 | ' 
06c5c                 | ' 
06c5c                 | ' return 0
06c5c     00 FA 05 F6 | 	mov	result1, #0
06c60     A7 F0 03 F6 | 	mov	ptra, fp
06c64     B2 00 A0 FD | 	call	#popregs_
06c68                 | _compile_else_ret
06c68     2D 00 64 FD | 	ret
06c6c                 | 
06c6c                 | ' 
06c6c                 | ' 
06c6c                 | ' function compile_dim() as ulong  
06c6c                 | _compile_dim
06c6c     11 4A 05 F6 | 	mov	COUNT_, #17
06c70     A8 00 A0 FD | 	call	#pushregs_
06c74     01 1E 06 F6 | 	mov	local01, #1
06c78     01 20 06 F6 | 	mov	local02, #1
06c7c     01 22 06 F6 | 	mov	local03, #1
06c80                 | ' 
06c80                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06c80                 | ' 
06c80                 | ' if isname(lparts(ct).part$) then 
06c80     56 00 00 FF 
06c84     18 E4 05 F1 | 	add	objptr, ##44056
06c88     F2 14 02 FB | 	rdlong	arg02, objptr
06c8c     03 14 66 F0 | 	shl	arg02, #3
06c90     02 00 00 FF 
06c94     38 E4 85 F1 | 	sub	objptr, ##1080
06c98     F2 14 02 F1 | 	add	arg02, objptr
06c9c     0A 13 02 FB | 	rdlong	arg01, arg02
06ca0     53 00 00 FF 
06ca4     E0 E5 85 F1 | 	sub	objptr, ##42976
06ca8     F8 D2 BF FD | 	call	#_isname
06cac     00 FA 0D F2 | 	cmp	result1, #0 wz
06cb0     30 05 90 AD |  if_e	jmp	#LR__0624
06cb4     56 00 00 FF 
06cb8     18 E4 05 F1 | 	add	objptr, ##44056
06cbc     F2 24 02 FB | 	rdlong	local04, objptr
06cc0     03 24 66 F0 | 	shl	local04, #3
06cc4     02 00 00 FF 
06cc8     38 E4 85 F1 | 	sub	objptr, ##1080
06ccc     F2 24 02 F1 | 	add	local04, objptr
06cd0     12 27 02 FB | 	rdlong	local05, local04
06cd4     01 28 66 F6 | 	neg	local06, #1
06cd8                 | '   varname2$=lparts(ct).part$ 
06cd8                 | '   j=-1
06cd8                 | '   if varnum>0 then
06cd8     04 E4 85 F1 | 	sub	objptr, #4
06cdc     F2 2A 02 FB | 	rdlong	local07, objptr
06ce0     53 00 00 FF 
06ce4     DC E5 85 F1 | 	sub	objptr, ##42972
06ce8     01 2A 56 F2 | 	cmps	local07, #1 wc
06cec     58 00 90 CD |  if_b	jmp	#LR__0602
06cf0                 | '  '   print "in dim, varnum=";varnum
06cf0                 | '     for i=0 to varnum-1
06cf0     00 2C 06 F6 | 	mov	local08, #0
06cf4     53 00 00 FF 
06cf8     DC E5 05 F1 | 	add	objptr, ##42972
06cfc     F2 2E 02 FB | 	rdlong	local09, objptr
06d00     53 00 00 FF 
06d04     DC E5 85 F1 | 	sub	objptr, ##42972
06d08                 | LR__0600
06d08     17 2D 52 F2 | 	cmps	local08, local09 wc
06d0c     38 00 90 3D |  if_ae	jmp	#LR__0601
06d10                 | '       if variables(i).name=varname2$ then j=i : exit
06d10     16 25 02 F6 | 	mov	local04, local08
06d14     04 24 66 F0 | 	shl	local04, #4
06d18     33 00 00 FF 
06d1c     DC E5 05 F1 | 	add	objptr, ##26588
06d20     F2 24 02 F1 | 	add	local04, objptr
06d24     12 13 02 FB | 	rdlong	arg01, local04
06d28     13 15 02 F6 | 	mov	arg02, local05
06d2c     33 00 00 FF 
06d30     DC E5 85 F1 | 	sub	objptr, ##26588
06d34     B8 1B B1 FD | 	call	#__system___string_cmp
06d38     00 FA 0D F2 | 	cmp	result1, #0 wz
06d3c     16 29 02 A6 |  if_e	mov	local06, local08
06d40     01 2C 06 51 |  if_ne	add	local08, #1
06d44     C0 FF 9F 5D |  if_ne	jmp	#LR__0600
06d48                 | LR__0601
06d48                 | LR__0602
06d48                 | '   if j<>-1 then printerror (42) : return 42
06d48     FF FF 7F FF 
06d4c     FF 29 0E F2 | 	cmp	local06, ##-1 wz
06d50     10 00 90 AD |  if_e	jmp	#LR__0603
06d54     2A 12 06 F6 | 	mov	arg01, #42
06d58     48 E6 B0 FD | 	call	#_printerror
06d5c     2A FA 05 F6 | 	mov	result1, #42
06d60     D8 05 90 FD | 	jmp	#LR__0626
06d64                 | LR__0603
06d64                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06d64     56 00 00 FF 
06d68     18 E4 05 F1 | 	add	objptr, ##44056
06d6c     F2 14 02 FB | 	rdlong	arg02, objptr
06d70     01 14 06 F1 | 	add	arg02, #1
06d74     03 14 66 F0 | 	shl	arg02, #3
06d78     02 00 00 FF 
06d7c     38 E4 85 F1 | 	sub	objptr, ##1080
06d80     F2 14 02 F1 | 	add	arg02, objptr
06d84     0A 13 02 FB | 	rdlong	arg01, arg02
06d88     40 01 00 FF 
06d8c     1C 14 06 F6 | 	mov	arg02, ##@LR__4536
06d90     53 00 00 FF 
06d94     E0 E5 85 F1 | 	sub	objptr, ##42976
06d98     54 1B B1 FD | 	call	#__system___string_cmp
06d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
06da0     50 00 90 AD |  if_e	jmp	#LR__0604
06da4     56 00 00 FF 
06da8     18 E4 05 F1 | 	add	objptr, ##44056
06dac     F2 2E 02 FB | 	rdlong	local09, objptr
06db0     01 2E 06 F1 | 	add	local09, #1
06db4     03 2E 66 F0 | 	shl	local09, #3
06db8     02 00 00 FF 
06dbc     38 E4 85 F1 | 	sub	objptr, ##1080
06dc0     F2 2E 02 F1 | 	add	local09, objptr
06dc4     17 13 02 FB | 	rdlong	arg01, local09
06dc8     40 01 00 FF 
06dcc     1E 14 06 F6 | 	mov	arg02, ##@LR__4537
06dd0     53 00 00 FF 
06dd4     E0 E5 85 F1 | 	sub	objptr, ##42976
06dd8     14 1B B1 FD | 	call	#__system___string_cmp
06ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
06de0     10 00 90 AD |  if_e	jmp	#LR__0604
06de4     2B 12 06 F6 | 	mov	arg01, #43
06de8     B8 E5 B0 FD | 	call	#_printerror
06dec     2B FA 05 F6 | 	mov	result1, #43
06df0     48 05 90 FD | 	jmp	#LR__0626
06df4                 | LR__0604
06df4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06df4     56 00 00 FF 
06df8     18 E4 05 F1 | 	add	objptr, ##44056
06dfc     F2 14 02 FB | 	rdlong	arg02, objptr
06e00     01 14 06 F1 | 	add	arg02, #1
06e04     03 14 66 F0 | 	shl	arg02, #3
06e08     02 00 00 FF 
06e0c     38 E4 85 F1 | 	sub	objptr, ##1080
06e10     F2 14 02 F1 | 	add	arg02, objptr
06e14     0A 13 02 FB | 	rdlong	arg01, arg02
06e18     40 01 00 FF 
06e1c     21 14 06 F6 | 	mov	arg02, ##@LR__4538
06e20     53 00 00 FF 
06e24     E0 E5 85 F1 | 	sub	objptr, ##42976
06e28     C4 1A B1 FD | 	call	#__system___string_cmp
06e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e30     56 00 00 AF 
06e34     18 E4 05 A1 |  if_e	add	objptr, ##44056
06e38     F2 30 02 AB |  if_e	rdlong	local10, objptr
06e3c     56 00 00 AF 
06e40     18 E4 85 A1 |  if_e	sub	objptr, ##44056
06e44     01 30 06 A1 |  if_e	add	local10, #1
06e48     7C 01 90 AD |  if_e	jmp	#LR__0610
06e4c     56 00 00 FF 
06e50     18 E4 05 F1 | 	add	objptr, ##44056
06e54     F2 30 02 FB | 	rdlong	local10, objptr
06e58     56 00 00 FF 
06e5c     18 E4 85 F1 | 	sub	objptr, ##44056
06e60     02 30 06 F1 | 	add	local10, #2
06e64     00 32 06 F6 | 	mov	local11, #0
06e68                 | '   l=ct+2 : m=0 : do
06e68                 | LR__0605
06e68                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06e68                 | '     if isdec(lparts(l).part$) then 
06e68     18 25 02 F6 | 	mov	local04, local10
06e6c     03 24 66 F0 | 	shl	local04, #3
06e70     53 00 00 FF 
06e74     E0 E5 05 F1 | 	add	objptr, ##42976
06e78     F2 24 02 F1 | 	add	local04, objptr
06e7c     12 13 02 FB | 	rdlong	arg01, local04
06e80     53 00 00 FF 
06e84     E0 E5 85 F1 | 	sub	objptr, ##42976
06e88     BC D7 BF FD | 	call	#_isdec
06e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e90     44 00 90 AD |  if_e	jmp	#LR__0606
06e94     19 35 02 F6 | 	mov	local12, local11
06e98     0F 35 06 F1 | 	add	local12, #local01
06e9c     18 2F 02 F6 | 	mov	local09, local10
06ea0     03 2E 66 F0 | 	shl	local09, #3
06ea4     53 00 00 FF 
06ea8     E0 E5 05 F1 | 	add	objptr, ##42976
06eac     F2 2E 02 F1 | 	add	local09, objptr
06eb0     17 13 02 FB | 	rdlong	arg01, local09
06eb4     00 14 06 F6 | 	mov	arg02, #0
06eb8     53 00 00 FF 
06ebc     E0 E5 85 F1 | 	sub	objptr, ##42976
06ec0     60 4A B1 FD | 	call	#__system____builtin_atoi
06ec4     FD 36 02 F6 | 	mov	local13, result1
06ec8                 | 	'.live	local13
06ec8                 | 	'.live	local12
06ec8     00 34 8E F9 | 	altd	local12, #0
06ecc     1B 35 02 F6 | 	mov	local12, local13
06ed0     01 32 06 F1 | 	add	local11, #1
06ed4     10 00 90 FD | 	jmp	#LR__0607
06ed8                 | LR__0606
06ed8     11 12 06 F6 | 	mov	arg01, #17
06edc     C4 E4 B0 FD | 	call	#_printerror
06ee0                 | '       printerror (17)  : return(17)
06ee0     11 FA 05 F6 | 	mov	result1, #17
06ee4     54 04 90 FD | 	jmp	#LR__0626
06ee8                 | LR__0607
06ee8                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06ee8     18 25 02 F6 | 	mov	local04, local10
06eec     01 24 06 F1 | 	add	local04, #1
06ef0     03 24 66 F0 | 	shl	local04, #3
06ef4     53 00 00 FF 
06ef8     E0 E5 05 F1 | 	add	objptr, ##42976
06efc     F2 24 02 F1 | 	add	local04, objptr
06f00     12 13 02 FB | 	rdlong	arg01, local04
06f04     40 01 00 FF 
06f08     24 14 06 F6 | 	mov	arg02, ##@LR__4539
06f0c     53 00 00 FF 
06f10     E0 E5 85 F1 | 	sub	objptr, ##42976
06f14     D8 19 B1 FD | 	call	#__system___string_cmp
06f18     00 FA 0D F2 | 	cmp	result1, #0 wz
06f1c     48 00 90 AD |  if_e	jmp	#LR__0608
06f20     18 37 02 F6 | 	mov	local13, local10
06f24     01 36 06 F1 | 	add	local13, #1
06f28     03 36 66 F0 | 	shl	local13, #3
06f2c     53 00 00 FF 
06f30     E0 E5 05 F1 | 	add	objptr, ##42976
06f34     F2 36 02 F1 | 	add	local13, objptr
06f38     1B 13 02 FB | 	rdlong	arg01, local13
06f3c     40 01 00 FF 
06f40     26 14 06 F6 | 	mov	arg02, ##@LR__4540
06f44     53 00 00 FF 
06f48     E0 E5 85 F1 | 	sub	objptr, ##42976
06f4c     A0 19 B1 FD | 	call	#__system___string_cmp
06f50     00 FA 0D F2 | 	cmp	result1, #0 wz
06f54     10 00 90 AD |  if_e	jmp	#LR__0608
06f58     2C 12 06 F6 | 	mov	arg01, #44
06f5c     44 E4 B0 FD | 	call	#_printerror
06f60     2C FA 05 F6 | 	mov	result1, #44
06f64     D4 03 90 FD | 	jmp	#LR__0626
06f68                 | LR__0608
06f68     02 30 06 F1 | 	add	local10, #2
06f6c     18 25 02 F6 | 	mov	local04, local10
06f70     01 24 86 F1 | 	sub	local04, #1
06f74     03 24 66 F0 | 	shl	local04, #3
06f78     53 00 00 FF 
06f7c     E0 E5 05 F1 | 	add	objptr, ##42976
06f80     F2 24 02 F1 | 	add	local04, objptr
06f84     12 13 02 FB | 	rdlong	arg01, local04
06f88     40 01 00 FF 
06f8c     28 14 06 F6 | 	mov	arg02, ##@LR__4541
06f90     53 00 00 FF 
06f94     E0 E5 85 F1 | 	sub	objptr, ##42976
06f98     54 19 B1 FD | 	call	#__system___string_cmp
06f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
06fa0     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06fa4     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0605
06fa8                 | '   if m>3 then printerror(45): return(45)
06fa8     04 32 56 F2 | 	cmps	local11, #4 wc
06fac     10 00 90 CD |  if_b	jmp	#LR__0609
06fb0     2D 12 06 F6 | 	mov	arg01, #45
06fb4     EC E3 B0 FD | 	call	#_printerror
06fb8     2D FA 05 F6 | 	mov	result1, #45
06fbc     7C 03 90 FD | 	jmp	#LR__0626
06fc0                 | LR__0609
06fc0     00 39 06 F6 | 	mov	local14, #256
06fc4     0C 3A 06 F6 | 	mov	local15, #12
06fc8                 | LR__0610
06fc8                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06fc8                 | '   arraytype=array_no_type : esize=12
06fc8                 | ' 1350 
06fc8                 | '   if lparts(l).part$="as" then
06fc8     18 25 02 F6 | 	mov	local04, local10
06fcc     03 24 66 F0 | 	shl	local04, #3
06fd0     53 00 00 FF 
06fd4     E0 E5 05 F1 | 	add	objptr, ##42976
06fd8     F2 24 02 F1 | 	add	local04, objptr
06fdc     12 13 02 FB | 	rdlong	arg01, local04
06fe0     40 01 00 FF 
06fe4     2A 14 06 F6 | 	mov	arg02, ##@LR__4542
06fe8     53 00 00 FF 
06fec     E0 E5 85 F1 | 	sub	objptr, ##42976
06ff0     FC 18 B1 FD | 	call	#__system___string_cmp
06ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff8     F8 01 90 5D |  if_ne	jmp	#LR__0625
06ffc                 | '     select case lparts(l+1).part$
06ffc     18 35 02 F6 | 	mov	local12, local10
07000     01 34 06 F1 | 	add	local12, #1
07004     03 34 66 F0 | 	shl	local12, #3
07008     53 00 00 FF 
0700c     E0 E5 05 F1 | 	add	objptr, ##42976
07010     F2 34 02 F1 | 	add	local12, objptr
07014     1A 3D 02 FB | 	rdlong	local16, local12
07018     40 01 00 FF 
0701c     2D 14 06 F6 | 	mov	arg02, ##@LR__4543
07020     1E 13 02 F6 | 	mov	arg01, local16
07024     53 00 00 FF 
07028     E0 E5 85 F1 | 	sub	objptr, ##42976
0702c     C0 18 B1 FD | 	call	#__system___string_cmp
07030     00 FA 0D F2 | 	cmp	result1, #0 wz
07034     0C 01 90 AD |  if_e	jmp	#LR__0611
07038     40 01 00 FF 
0703c     32 14 06 F6 | 	mov	arg02, ##@LR__4544
07040     1E 13 02 F6 | 	mov	arg01, local16
07044     A8 18 B1 FD | 	call	#__system___string_cmp
07048     00 FA 0D F2 | 	cmp	result1, #0 wz
0704c     00 01 90 AD |  if_e	jmp	#LR__0612
07050     40 01 00 FF 
07054     38 14 06 F6 | 	mov	arg02, ##@LR__4545
07058     1E 13 02 F6 | 	mov	arg01, local16
0705c     90 18 B1 FD | 	call	#__system___string_cmp
07060     00 FA 0D F2 | 	cmp	result1, #0 wz
07064     F4 00 90 AD |  if_e	jmp	#LR__0613
07068     40 01 00 FF 
0706c     3E 14 06 F6 | 	mov	arg02, ##@LR__4546
07070     1E 13 02 F6 | 	mov	arg01, local16
07074     78 18 B1 FD | 	call	#__system___string_cmp
07078     00 FA 0D F2 | 	cmp	result1, #0 wz
0707c     E8 00 90 AD |  if_e	jmp	#LR__0614
07080     40 01 00 FF 
07084     45 14 06 F6 | 	mov	arg02, ##@LR__4547
07088     1E 13 02 F6 | 	mov	arg01, local16
0708c     60 18 B1 FD | 	call	#__system___string_cmp
07090     00 FA 0D F2 | 	cmp	result1, #0 wz
07094     DC 00 90 AD |  if_e	jmp	#LR__0615
07098     40 01 00 FF 
0709c     4A 14 06 F6 | 	mov	arg02, ##@LR__4548
070a0     1E 13 02 F6 | 	mov	arg01, local16
070a4     48 18 B1 FD | 	call	#__system___string_cmp
070a8     00 FA 0D F2 | 	cmp	result1, #0 wz
070ac     D0 00 90 AD |  if_e	jmp	#LR__0616
070b0     40 01 00 FF 
070b4     52 14 06 F6 | 	mov	arg02, ##@LR__4549
070b8     1E 13 02 F6 | 	mov	arg01, local16
070bc     30 18 B1 FD | 	call	#__system___string_cmp
070c0     00 FA 0D F2 | 	cmp	result1, #0 wz
070c4     C4 00 90 AD |  if_e	jmp	#LR__0617
070c8     40 01 00 FF 
070cc     58 14 06 F6 | 	mov	arg02, ##@LR__4550
070d0     1E 13 02 F6 | 	mov	arg01, local16
070d4     18 18 B1 FD | 	call	#__system___string_cmp
070d8     00 FA 0D F2 | 	cmp	result1, #0 wz
070dc     B8 00 90 AD |  if_e	jmp	#LR__0618
070e0     40 01 00 FF 
070e4     5E 14 06 F6 | 	mov	arg02, ##@LR__4551
070e8     1E 13 02 F6 | 	mov	arg01, local16
070ec     00 18 B1 FD | 	call	#__system___string_cmp
070f0     00 FA 0D F2 | 	cmp	result1, #0 wz
070f4     AC 00 90 AD |  if_e	jmp	#LR__0619
070f8     40 01 00 FF 
070fc     65 14 06 F6 | 	mov	arg02, ##@LR__4552
07100     1E 13 02 F6 | 	mov	arg01, local16
07104     E8 17 B1 FD | 	call	#__system___string_cmp
07108     00 FA 0D F2 | 	cmp	result1, #0 wz
0710c     A0 00 90 AD |  if_e	jmp	#LR__0620
07110     40 01 00 FF 
07114     6C 14 06 F6 | 	mov	arg02, ##@LR__4553
07118     1E 13 02 F6 | 	mov	arg01, local16
0711c     D0 17 B1 FD | 	call	#__system___string_cmp
07120     00 FA 0D F2 | 	cmp	result1, #0 wz
07124     94 00 90 AD |  if_e	jmp	#LR__0621
07128     40 01 00 FF 
0712c     73 14 06 F6 | 	mov	arg02, ##@LR__4554
07130     1E 13 02 F6 | 	mov	arg01, local16
07134     B8 17 B1 FD | 	call	#__system___string_cmp
07138     00 FA 0D F2 | 	cmp	result1, #0 wz
0713c     88 00 90 AD |  if_e	jmp	#LR__0622
07140     90 00 90 FD | 	jmp	#LR__0623
07144                 | LR__0611
07144     01 39 06 F6 | 	mov	local14, #257
07148     01 3A 06 F6 | 	mov	local15, #1
0714c     A4 00 90 FD | 	jmp	#LR__0625
07150                 | LR__0612
07150     02 39 06 F6 | 	mov	local14, #258
07154     01 3A 06 F6 | 	mov	local15, #1
07158     98 00 90 FD | 	jmp	#LR__0625
0715c                 | LR__0613
0715c     03 39 06 F6 | 	mov	local14, #259
07160     02 3A 06 F6 | 	mov	local15, #2
07164     8C 00 90 FD | 	jmp	#LR__0625
07168                 | LR__0614
07168     04 39 06 F6 | 	mov	local14, #260
0716c     02 3A 06 F6 | 	mov	local15, #2
07170     80 00 90 FD | 	jmp	#LR__0625
07174                 | LR__0615
07174     05 39 06 F6 | 	mov	local14, #261
07178     04 3A 06 F6 | 	mov	local15, #4
0717c     74 00 90 FD | 	jmp	#LR__0625
07180                 | LR__0616
07180     05 39 06 F6 | 	mov	local14, #261
07184     04 3A 06 F6 | 	mov	local15, #4
07188     68 00 90 FD | 	jmp	#LR__0625
0718c                 | LR__0617
0718c     06 39 06 F6 | 	mov	local14, #262
07190     04 3A 06 F6 | 	mov	local15, #4
07194     5C 00 90 FD | 	jmp	#LR__0625
07198                 | LR__0618
07198     07 39 06 F6 | 	mov	local14, #263
0719c     08 3A 06 F6 | 	mov	local15, #8
071a0     50 00 90 FD | 	jmp	#LR__0625
071a4                 | LR__0619
071a4     08 39 06 F6 | 	mov	local14, #264
071a8     08 3A 06 F6 | 	mov	local15, #8
071ac     44 00 90 FD | 	jmp	#LR__0625
071b0                 | LR__0620
071b0     09 39 06 F6 | 	mov	local14, #265
071b4     04 3A 06 F6 | 	mov	local15, #4
071b8     38 00 90 FD | 	jmp	#LR__0625
071bc                 | LR__0621
071bc     0A 39 06 F6 | 	mov	local14, #266
071c0     08 3A 06 F6 | 	mov	local15, #8
071c4     2C 00 90 FD | 	jmp	#LR__0625
071c8                 | LR__0622
071c8     0B 39 06 F6 | 	mov	local14, #267
071cc     04 3A 06 F6 | 	mov	local15, #4
071d0     20 00 90 FD | 	jmp	#LR__0625
071d4                 | LR__0623
071d4     2F 12 06 F6 | 	mov	arg01, #47
071d8     C8 E1 B0 FD | 	call	#_printerror
071dc     2F FA 05 F6 | 	mov	result1, #47
071e0     58 01 90 FD | 	jmp	#LR__0626
071e4                 | LR__0624
071e4     2E 12 06 F6 | 	mov	arg01, #46
071e8     B8 E1 B0 FD | 	call	#_printerror
071ec                 | '   printerror(46): return 46
071ec     2E FA 05 F6 | 	mov	result1, #46
071f0     48 01 90 FD | 	jmp	#LR__0626
071f4                 | LR__0625
071f4     0F 3B 02 FD | 	qmul	local15, local01
071f8     18 2A 62 FD | 	getqx	local07
071fc     10 2B 02 FD | 	qmul	local07, local02
07200     18 3C 62 FD | 	getqx	local16
07204     11 3D 02 FD | 	qmul	local16, local03
07208     7A 00 00 FF 
0720c     4C E4 05 F1 | 	add	objptr, ##62540
07210     F2 3E 02 FB | 	rdlong	local17, objptr
07214     1C 15 02 F6 | 	mov	arg02, local14
07218     01 16 06 F6 | 	mov	arg03, #1
0721c     00 18 06 F6 | 	mov	arg04, #0
07220                 | '     return fill(addr, pattern, count, listPtr, 4)
07220     04 1A 06 F6 | 	mov	arg05, #4
07224     18 3C 62 FD | 	getqx	local16
07228     1E 3F 82 F1 | 	sub	local17, local16
0722c     10 3E 86 F1 | 	sub	local17, #16
07230     F2 3E 62 FC | 	wrlong	local17, objptr
07234     1F 13 02 F6 | 	mov	arg01, local17
07238     6E 00 00 FF 
0723c     8C E5 85 F1 | 	sub	objptr, ##56716
07240     CC 0C B1 FD | 	call	#_psram_spin2_fill
07244     1F 13 02 F6 | 	mov	arg01, local17
07248     02 12 06 F1 | 	add	arg01, #2
0724c     1D 15 02 F6 | 	mov	arg02, local15
07250     01 16 06 F6 | 	mov	arg03, #1
07254     00 18 06 F6 | 	mov	arg04, #0
07258                 | '     return fill(addr, pattern, count, listPtr, 1)
07258     01 1A 06 F6 | 	mov	arg05, #1
0725c     B0 0C B1 FD | 	call	#_psram_spin2_fill
07260     1F 13 02 F6 | 	mov	arg01, local17
07264     04 12 06 F1 | 	add	arg01, #4
07268     0F 15 02 F6 | 	mov	arg02, local01
0726c     01 16 06 F6 | 	mov	arg03, #1
07270     00 18 06 F6 | 	mov	arg04, #0
07274                 | '     return fill(addr, pattern, count, listPtr, 4)
07274     04 1A 06 F6 | 	mov	arg05, #4
07278     94 0C B1 FD | 	call	#_psram_spin2_fill
0727c     1F 13 02 F6 | 	mov	arg01, local17
07280     08 12 06 F1 | 	add	arg01, #8
07284     10 15 02 F6 | 	mov	arg02, local02
07288     01 16 06 F6 | 	mov	arg03, #1
0728c     00 18 06 F6 | 	mov	arg04, #0
07290                 | '     return fill(addr, pattern, count, listPtr, 4)
07290     04 1A 06 F6 | 	mov	arg05, #4
07294     78 0C B1 FD | 	call	#_psram_spin2_fill
07298     1F 13 02 F6 | 	mov	arg01, local17
0729c     0C 12 06 F1 | 	add	arg01, #12
072a0     11 15 02 F6 | 	mov	arg02, local03
072a4     01 16 06 F6 | 	mov	arg03, #1
072a8     00 18 06 F6 | 	mov	arg04, #0
072ac                 | '     return fill(addr, pattern, count, listPtr, 4)
072ac     04 1A 06 F6 | 	mov	arg05, #4
072b0     5C 0C B1 FD | 	call	#_psram_spin2_fill
072b4     48 00 00 FF 
072b8     1C E5 05 F1 | 	add	objptr, ##37148
072bc     F2 24 02 FB | 	rdlong	local04, objptr
072c0     04 24 66 F0 | 	shl	local04, #4
072c4     20 00 00 FF 
072c8     00 E4 85 F1 | 	sub	objptr, ##16384
072cc     F2 24 02 F1 | 	add	local04, objptr
072d0     12 27 62 FC | 	wrlong	local05, local04
072d4     20 00 00 FF 
072d8     00 E4 05 F1 | 	add	objptr, ##16384
072dc     F2 24 02 FB | 	rdlong	local04, objptr
072e0     04 24 66 F0 | 	shl	local04, #4
072e4     20 00 00 FF 
072e8     00 E4 85 F1 | 	sub	objptr, ##16384
072ec     F2 24 02 F1 | 	add	local04, objptr
072f0     04 24 06 F1 | 	add	local04, #4
072f4     12 3F 62 FC | 	wrlong	local17, local04
072f8     20 00 00 FF 
072fc     00 E4 05 F1 | 	add	objptr, ##16384
07300     F2 24 02 FB | 	rdlong	local04, objptr
07304     04 24 66 F0 | 	shl	local04, #4
07308     20 00 00 FF 
0730c     00 E4 85 F1 | 	sub	objptr, ##16384
07310     F2 24 02 F1 | 	add	local04, objptr
07314     0C 24 06 F1 | 	add	local04, #12
07318     12 39 62 FC | 	wrlong	local14, local04
0731c     20 00 00 FF 
07320     00 E4 05 F1 | 	add	objptr, ##16384
07324     F2 2A 02 FB | 	rdlong	local07, objptr
07328     01 2A 06 F1 | 	add	local07, #1
0732c     F2 2A 62 FC | 	wrlong	local07, objptr
07330     53 00 00 FF 
07334     DC E5 85 F1 | 	sub	objptr, ##42972
07338                 | ' 'print dims(0),dims(1),dims(2),arraytype
07338                 | ' 
07338                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
07338                 | ' arrayptr=memtop-arraysize-16
07338                 | ' memtop=arrayptr
07338                 | ' 
07338                 | ' pslpoke arrayptr,arraytype
07338                 | ' pspoke arrayptr+2,esize
07338                 | ' pslpoke arrayptr+4,dims(0)
07338                 | ' pslpoke arrayptr+8,dims(1)
07338                 | ' pslpoke arrayptr+12,dims(2)
07338                 | ' 
07338                 | ' variables(varnum).name=varname2$
07338                 | ' variables(varnum).value.uresult=arrayptr
07338                 | ' variables(varnum).vartype=arraytype
07338                 | ' varnum+=1
07338                 | ' 
07338                 | ' return 0
07338     00 FA 05 F6 | 	mov	result1, #0
0733c                 | LR__0626
0733c     A7 F0 03 F6 | 	mov	ptra, fp
07340     B2 00 A0 FD | 	call	#popregs_
07344                 | _compile_dim_ret
07344     2D 00 64 FD | 	ret
07348                 | 
07348                 | ' 
07348                 | ' 
07348                 | ' function compile_for() as ulong  
07348                 | _compile_for
07348     07 4A 05 F6 | 	mov	COUNT_, #7
0734c     A8 00 A0 FD | 	call	#pushregs_
07350                 | ' 
07350                 | ' 
07350                 | ' 
07350                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07350     56 00 00 FF 
07354     18 E4 05 F1 | 	add	objptr, ##44056
07358     F2 14 02 FB | 	rdlong	arg02, objptr
0735c     01 14 06 F1 | 	add	arg02, #1
07360     03 14 66 F0 | 	shl	arg02, #3
07364     02 00 00 FF 
07368     38 E4 85 F1 | 	sub	objptr, ##1080
0736c     F2 14 02 F1 | 	add	arg02, objptr
07370     0A 13 02 FB | 	rdlong	arg01, arg02
07374     53 00 00 FF 
07378     E0 E5 85 F1 | 	sub	objptr, ##42976
0737c                 | ' 
0737c                 | ' select case s
0737c     3E 01 00 FF 
07380     BF 15 06 F6 | 	mov	arg02, ##@LR__4391
07384     68 15 B1 FD | 	call	#__system___string_cmp
07388     00 FA 0D F2 | 	cmp	result1, #0 wz
0738c     1B FA 05 A6 |  if_e	mov	result1, #27
07390     00 FA 05 56 |  if_ne	mov	result1, #0
07394     00 FA 0D F2 | 	cmp	result1, #0 wz
07398     0C 00 90 AD |  if_e	jmp	#LR__0630
0739c     05 12 06 F6 | 	mov	arg01, #5
073a0     A4 E3 BF FD | 	call	#_compile_immediate_assign
073a4     10 00 90 FD | 	jmp	#LR__0631
073a8                 | LR__0630
073a8     20 12 06 F6 | 	mov	arg01, #32
073ac     14 E8 BF FD | 	call	#_compile_error
073b0     20 FA 05 F6 | 	mov	result1, #32
073b4     E8 02 90 FD | 	jmp	#LR__0637
073b8                 | LR__0631
073b8     69 00 00 FF 
073bc     50 E4 05 F1 | 	add	objptr, ##53840
073c0     F2 12 02 FB | 	rdlong	arg01, objptr
073c4     09 25 02 F6 | 	mov	local04, arg01
073c8     01 24 86 F1 | 	sub	local04, #1
073cc     12 15 02 F6 | 	mov	arg02, local04
073d0     01 14 66 F0 | 	shl	arg02, #1
073d4     12 15 02 F1 | 	add	arg02, local04
073d8     02 14 66 F0 | 	shl	arg02, #2
073dc     03 00 00 FF 
073e0     00 E4 85 F1 | 	sub	objptr, ##1536
073e4     F2 14 02 F1 | 	add	arg02, objptr
073e8     0A 1F 02 FB | 	rdlong	local01, arg02
073ec     04 14 06 F1 | 	add	arg02, #4
073f0     0A 27 02 FB | 	rdlong	local05, arg02
073f4     01 12 86 F1 | 	sub	arg01, #1
073f8     09 29 02 F6 | 	mov	local06, arg01
073fc     01 28 66 F0 | 	shl	local06, #1
07400     09 29 02 F1 | 	add	local06, arg01
07404     02 28 66 F0 | 	shl	local06, #2
07408     F2 28 02 F1 | 	add	local06, objptr
0740c     08 28 06 F1 | 	add	local06, #8
07410     14 13 02 FB | 	rdlong	arg01, local06
07414     13 21 02 F6 | 	mov	local02, local05
07418     09 23 02 F6 | 	mov	local03, arg01
0741c                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0741c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
0741c     17 22 0E F2 | 	cmp	local03, #23 wz
07420     66 00 00 FF 
07424     50 E4 85 F1 | 	sub	objptr, ##52304
07428     10 00 90 AD |  if_e	jmp	#LR__0632
0742c     22 12 06 F6 | 	mov	arg01, #34
07430     90 E7 BF FD | 	call	#_compile_error
07434     22 FA 05 F6 | 	mov	result1, #34
07438     64 02 90 FD | 	jmp	#LR__0637
0743c                 | LR__0632
0743c     0F 2B 02 F6 | 	mov	local07, local01
07440                 | ' varnum=t1.result.uresult
07440                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07440     56 00 00 FF 
07444     18 E4 05 F1 | 	add	objptr, ##44056
07448     F2 24 02 FB | 	rdlong	local04, objptr
0744c     03 24 66 F0 | 	shl	local04, #3
07450     02 00 00 FF 
07454     38 E4 85 F1 | 	sub	objptr, ##1080
07458     F2 24 02 F1 | 	add	local04, objptr
0745c     12 13 02 FB | 	rdlong	arg01, local04
07460     40 01 00 FF 
07464     7A 14 06 F6 | 	mov	arg02, ##@LR__4555
07468     53 00 00 FF 
0746c     E0 E5 85 F1 | 	sub	objptr, ##42976
07470     7C 14 B1 FD | 	call	#__system___string_cmp
07474     00 FA 0D F2 | 	cmp	result1, #0 wz
07478     10 00 90 AD |  if_e	jmp	#LR__0633
0747c     21 12 06 F6 | 	mov	arg01, #33
07480     40 E7 BF FD | 	call	#_compile_error
07484     21 FA 05 F6 | 	mov	result1, #33
07488     14 02 90 FD | 	jmp	#LR__0637
0748c                 | LR__0633
0748c     56 00 00 FF 
07490     18 E4 05 F1 | 	add	objptr, ##44056
07494     F2 24 02 FB | 	rdlong	local04, objptr
07498     01 24 06 F1 | 	add	local04, #1
0749c     F2 24 62 FC | 	wrlong	local04, objptr
074a0     56 00 00 FF 
074a4     18 E4 85 F1 | 	sub	objptr, ##44056
074a8     D4 0B B0 FD | 	call	#_expr
074ac                 | ' ct+=1
074ac                 | ' expr()  ' there is "to" value pushed on the stack
074ac                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="st."then 
074ac     56 00 00 FF 
074b0     18 E4 05 F1 | 	add	objptr, ##44056
074b4     F2 24 02 FB | 	rdlong	local04, objptr
074b8     03 24 66 F0 | 	shl	local04, #3
074bc     02 00 00 FF 
074c0     38 E4 85 F1 | 	sub	objptr, ##1080
074c4     F2 24 02 F1 | 	add	local04, objptr
074c8     12 13 02 FB | 	rdlong	arg01, local04
074cc     40 01 00 FF 
074d0     7D 14 06 F6 | 	mov	arg02, ##@LR__4556
074d4     53 00 00 FF 
074d8     E0 E5 85 F1 | 	sub	objptr, ##42976
074dc     10 14 B1 FD | 	call	#__system___string_cmp
074e0     00 FA 0D F2 | 	cmp	result1, #0 wz
074e4     3C 00 90 AD |  if_e	jmp	#LR__0634
074e8     56 00 00 FF 
074ec     18 E4 05 F1 | 	add	objptr, ##44056
074f0     F2 28 02 FB | 	rdlong	local06, objptr
074f4     03 28 66 F0 | 	shl	local06, #3
074f8     02 00 00 FF 
074fc     38 E4 85 F1 | 	sub	objptr, ##1080
07500     F2 28 02 F1 | 	add	local06, objptr
07504     14 13 02 FB | 	rdlong	arg01, local06
07508     40 01 00 FF 
0750c     82 14 06 F6 | 	mov	arg02, ##@LR__4557
07510     53 00 00 FF 
07514     E0 E5 85 F1 | 	sub	objptr, ##42976
07518     D4 13 B1 FD | 	call	#__system___string_cmp
0751c     00 FA 0D F2 | 	cmp	result1, #0 wz
07520     24 00 90 5D |  if_ne	jmp	#LR__0635
07524                 | LR__0634
07524     56 00 00 FF 
07528     18 E4 05 F1 | 	add	objptr, ##44056
0752c     F2 28 02 FB | 	rdlong	local06, objptr
07530     01 28 06 F1 | 	add	local06, #1
07534     F2 28 62 FC | 	wrlong	local06, objptr
07538     56 00 00 FF 
0753c     18 E4 85 F1 | 	sub	objptr, ##44056
07540     3C 0B B0 FD | 	call	#_expr
07544     78 00 90 FD | 	jmp	#LR__0636
07548                 | LR__0635
07548     69 00 00 FF 
0754c     50 E4 05 F1 | 	add	objptr, ##53840
07550     F2 28 02 FB | 	rdlong	local06, objptr
07554     14 27 02 F6 | 	mov	local05, local06
07558     01 26 66 F0 | 	shl	local05, #1
0755c     14 27 02 F1 | 	add	local05, local06
07560     02 26 66 F0 | 	shl	local05, #2
07564     03 00 00 FF 
07568     00 E4 85 F1 | 	sub	objptr, ##1536
0756c     F2 26 02 F1 | 	add	local05, objptr
07570     08 26 06 F1 | 	add	local05, #8
07574     13 39 68 FC | 	wrlong	#28, local05
07578     03 00 00 FF 
0757c     00 E4 05 F1 | 	add	objptr, ##1536
07580     F2 28 02 FB | 	rdlong	local06, objptr
07584     14 27 02 F6 | 	mov	local05, local06
07588     01 26 66 F0 | 	shl	local05, #1
0758c     14 27 02 F1 | 	add	local05, local06
07590     02 26 66 F0 | 	shl	local05, #2
07594     03 00 00 FF 
07598     00 E4 85 F1 | 	sub	objptr, ##1536
0759c     F2 26 02 F1 | 	add	local05, objptr
075a0     13 03 68 FC | 	wrlong	#1, local05
075a4     03 00 00 FF 
075a8     00 E4 05 F1 | 	add	objptr, ##1536
075ac     F2 28 02 FB | 	rdlong	local06, objptr
075b0     01 28 06 F1 | 	add	local06, #1
075b4     F2 28 62 FC | 	wrlong	local06, objptr
075b8     69 00 00 FF 
075bc     50 E4 85 F1 | 	sub	objptr, ##53840
075c0                 | LR__0636
075c0     69 00 00 FF 
075c4     50 E4 05 F1 | 	add	objptr, ##53840
075c8     F2 28 02 FB | 	rdlong	local06, objptr
075cc     14 27 02 F6 | 	mov	local05, local06
075d0     01 26 66 F0 | 	shl	local05, #1
075d4     14 27 02 F1 | 	add	local05, local06
075d8     02 26 66 F0 | 	shl	local05, #2
075dc     03 00 00 FF 
075e0     00 E4 85 F1 | 	sub	objptr, ##1536
075e4     F2 26 02 F1 | 	add	local05, objptr
075e8     08 26 06 F1 | 	add	local05, #8
075ec     13 39 68 FC | 	wrlong	#28, local05
075f0     03 00 00 FF 
075f4     00 E4 05 F1 | 	add	objptr, ##1536
075f8     F2 28 02 FB | 	rdlong	local06, objptr
075fc     14 27 02 F6 | 	mov	local05, local06
07600     01 26 66 F0 | 	shl	local05, #1
07604     14 27 02 F1 | 	add	local05, local06
07608     02 26 66 F0 | 	shl	local05, #2
0760c     03 00 00 FF 
07610     00 E4 85 F1 | 	sub	objptr, ##1536
07614     F2 26 02 F1 | 	add	local05, objptr
07618     13 2B 62 FC | 	wrlong	local07, local05
0761c     03 00 00 FF 
07620     00 E4 05 F1 | 	add	objptr, ##1536
07624     F2 2A 02 FB | 	rdlong	local07, objptr
07628     01 2A 06 F1 | 	add	local07, #1
0762c     F2 2A 62 FC | 	wrlong	local07, objptr
07630     15 29 02 F6 | 	mov	local06, local07
07634     01 28 66 F0 | 	shl	local06, #1
07638     15 29 02 F1 | 	add	local06, local07
0763c     02 28 66 F0 | 	shl	local06, #2
07640     03 00 00 FF 
07644     00 E4 85 F1 | 	sub	objptr, ##1536
07648     F2 28 02 F1 | 	add	local06, objptr
0764c     08 28 06 F1 | 	add	local06, #8
07650     14 95 68 FC | 	wrlong	#74, local06
07654     03 00 00 FF 
07658     00 E4 05 F1 | 	add	objptr, ##1536
0765c     F2 2A 02 FB | 	rdlong	local07, objptr
07660     15 29 02 F6 | 	mov	local06, local07
07664     01 28 66 F0 | 	shl	local06, #1
07668     15 29 02 F1 | 	add	local06, local07
0766c     02 28 66 F0 | 	shl	local06, #2
07670     03 00 00 FF 
07674     00 E4 85 F1 | 	sub	objptr, ##1536
07678     F2 28 02 F1 | 	add	local06, objptr
0767c     14 01 68 FC | 	wrlong	#0, local06
07680     03 00 00 FF 
07684     00 E4 05 F1 | 	add	objptr, ##1536
07688     F2 2A 02 FB | 	rdlong	local07, objptr
0768c     01 2A 06 F1 | 	add	local07, #1
07690     F2 2A 62 FC | 	wrlong	local07, objptr
07694     69 00 00 FF 
07698     50 E4 85 F1 | 	sub	objptr, ##53840
0769c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0769c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0769c                 | ' 
0769c                 | ' 
0769c                 | ' return 0
0769c     00 FA 05 F6 | 	mov	result1, #0
076a0                 | LR__0637
076a0     A7 F0 03 F6 | 	mov	ptra, fp
076a4     B2 00 A0 FD | 	call	#popregs_
076a8                 | _compile_for_ret
076a8     2D 00 64 FD | 	ret
076ac                 | 
076ac                 | ' 
076ac                 | ' 
076ac                 | ' sub do_for()
076ac                 | _do_for
076ac     05 4A 05 F6 | 	mov	COUNT_, #5
076b0     A8 00 A0 FD | 	call	#pushregs_
076b4     78 00 00 FF 
076b8     AC E5 05 F1 | 	add	objptr, ##61868
076bc     F2 24 02 FB | 	rdlong	local04, objptr
076c0     01 24 06 F1 | 	add	local04, #1
076c4     F2 24 62 FC | 	wrlong	local04, objptr
076c8     78 00 00 FF 
076cc     AC E5 85 F1 | 	sub	objptr, ##61868
076d0     5C 1E B0 FD | 	call	#_pop
076d4     FD 1E 02 F6 | 	mov	local01, result1
076d8     FE 20 02 F6 | 	mov	local02, result2
076dc     FF 22 02 F6 | 	mov	local03, result3
076e0     78 00 00 FF 
076e4     AC E5 05 F1 | 	add	objptr, ##61868
076e8     F2 24 02 FB | 	rdlong	local04, objptr
076ec     12 27 02 F6 | 	mov	local05, local04
076f0     02 26 66 F0 | 	shl	local05, #2
076f4     12 27 02 F1 | 	add	local05, local04
076f8     02 26 66 F0 | 	shl	local05, #2
076fc     07 00 00 FF 
07700     40 E5 85 F1 | 	sub	objptr, ##3904
07704     F2 26 02 F1 | 	add	local05, objptr
07708     08 26 06 F1 | 	add	local05, #8
0770c     13 1F 62 FC | 	wrlong	local01, local05
07710     71 00 00 FF 
07714     6C E4 85 F1 | 	sub	objptr, ##57964
07718     14 1E B0 FD | 	call	#_pop
0771c     FD 1E 02 F6 | 	mov	local01, result1
07720     FE 20 02 F6 | 	mov	local02, result2
07724     FF 22 02 F6 | 	mov	local03, result3
07728     78 00 00 FF 
0772c     AC E5 05 F1 | 	add	objptr, ##61868
07730     F2 24 02 FB | 	rdlong	local04, objptr
07734     12 27 02 F6 | 	mov	local05, local04
07738     02 26 66 F0 | 	shl	local05, #2
0773c     12 27 02 F1 | 	add	local05, local04
07740     02 26 66 F0 | 	shl	local05, #2
07744     07 00 00 FF 
07748     40 E5 85 F1 | 	sub	objptr, ##3904
0774c     F2 26 02 F1 | 	add	local05, objptr
07750     0C 26 06 F1 | 	add	local05, #12
07754     13 1F 62 FC | 	wrlong	local01, local05
07758     71 00 00 FF 
0775c     6C E4 85 F1 | 	sub	objptr, ##57964
07760     CC 1D B0 FD | 	call	#_pop
07764     FD 1E 02 F6 | 	mov	local01, result1
07768     FE 20 02 F6 | 	mov	local02, result2
0776c     FF 22 02 F6 | 	mov	local03, result3
07770     78 00 00 FF 
07774     AC E5 05 F1 | 	add	objptr, ##61868
07778     F2 24 02 FB | 	rdlong	local04, objptr
0777c     12 27 02 F6 | 	mov	local05, local04
07780     02 26 66 F0 | 	shl	local05, #2
07784     12 27 02 F1 | 	add	local05, local04
07788     02 26 66 F0 | 	shl	local05, #2
0778c     07 00 00 FF 
07790     40 E5 85 F1 | 	sub	objptr, ##3904
07794     F2 26 02 F1 | 	add	local05, objptr
07798     10 26 06 F1 | 	add	local05, #16
0779c     13 1F 62 FC | 	wrlong	local01, local05
077a0                 | ' fortop+=1
077a0                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
077a0                 | ' 'if i> maxfor then printerror(36) : return
077a0                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
077a0                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
077a0                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
077a0                 | ' if compiledline(lineptr_e).result_type=token_end then
077a0     08 00 00 FF 
077a4     18 E4 85 F1 | 	sub	objptr, ##4120
077a8     F2 1E 02 FB | 	rdlong	local01, objptr
077ac     0F 27 02 F6 | 	mov	local05, local01
077b0     01 26 66 F0 | 	shl	local05, #1
077b4     0F 27 02 F1 | 	add	local05, local01
077b8     02 26 66 F0 | 	shl	local05, #2
077bc     03 00 00 FF 
077c0     04 E4 85 F1 | 	sub	objptr, ##1540
077c4     F2 26 02 F1 | 	add	local05, objptr
077c8     08 26 06 F1 | 	add	local05, #8
077cc     13 27 02 FB | 	rdlong	local05, local05
077d0     FE 27 0E F2 | 	cmp	local05, #510 wz
077d4     66 00 00 FF 
077d8     50 E4 85 F1 | 	sub	objptr, ##52304
077dc     70 00 90 5D |  if_ne	jmp	#LR__0640
077e0     78 00 00 FF 
077e4     AC E5 05 F1 | 	add	objptr, ##61868
077e8     F2 1E 02 FB | 	rdlong	local01, objptr
077ec     0F 27 02 F6 | 	mov	local05, local01
077f0     02 26 66 F0 | 	shl	local05, #2
077f4     0F 27 02 F1 | 	add	local05, local01
077f8     02 26 66 F0 | 	shl	local05, #2
077fc     07 00 00 FF 
07800     40 E5 85 F1 | 	sub	objptr, ##3904
07804     F2 26 02 F1 | 	add	local05, objptr
07808     07 00 00 FF 
0780c     18 E5 05 F1 | 	add	objptr, ##3864
07810     F2 1E 02 FB | 	rdlong	local01, objptr
07814     13 1F 62 FC | 	wrlong	local01, local05
07818     28 E4 05 F1 | 	add	objptr, #40
0781c     F2 1E 02 FB | 	rdlong	local01, objptr
07820     0F 27 02 F6 | 	mov	local05, local01
07824     02 26 66 F0 | 	shl	local05, #2
07828     0F 27 02 F1 | 	add	local05, local01
0782c     02 26 66 F0 | 	shl	local05, #2
07830     07 00 00 FF 
07834     40 E5 85 F1 | 	sub	objptr, ##3904
07838     F2 26 02 F1 | 	add	local05, objptr
0783c     04 26 06 F1 | 	add	local05, #4
07840     13 01 68 FC | 	wrlong	#0, local05
07844     71 00 00 FF 
07848     6C E4 85 F1 | 	sub	objptr, ##57964
0784c     7C 00 90 FD | 	jmp	#LR__0641
07850                 | LR__0640
07850     78 00 00 FF 
07854     AC E5 05 F1 | 	add	objptr, ##61868
07858     F2 1E 02 FB | 	rdlong	local01, objptr
0785c     0F 27 02 F6 | 	mov	local05, local01
07860     02 26 66 F0 | 	shl	local05, #2
07864     0F 27 02 F1 | 	add	local05, local01
07868     02 26 66 F0 | 	shl	local05, #2
0786c     07 00 00 FF 
07870     40 E5 85 F1 | 	sub	objptr, ##3904
07874     F2 26 02 F1 | 	add	local05, objptr
07878     07 00 00 FF 
0787c     20 E5 05 F1 | 	add	objptr, ##3872
07880     F2 1E 02 FB | 	rdlong	local01, objptr
07884     13 1F 62 FC | 	wrlong	local01, local05
07888     20 E4 05 F1 | 	add	objptr, #32
0788c     F2 1E 02 FB | 	rdlong	local01, objptr
07890     0F 27 02 F6 | 	mov	local05, local01
07894     02 26 66 F0 | 	shl	local05, #2
07898     0F 27 02 F1 | 	add	local05, local01
0789c     02 26 66 F0 | 	shl	local05, #2
078a0     07 00 00 FF 
078a4     40 E5 85 F1 | 	sub	objptr, ##3904
078a8     F2 26 02 F1 | 	add	local05, objptr
078ac     08 00 00 FF 
078b0     18 E4 85 F1 | 	sub	objptr, ##4120
078b4     F2 1E 02 FB | 	rdlong	local01, objptr
078b8     69 00 00 FF 
078bc     54 E4 85 F1 | 	sub	objptr, ##53844
078c0     01 1E 06 F1 | 	add	local01, #1
078c4     04 26 06 F1 | 	add	local05, #4
078c8     13 1F 62 FC | 	wrlong	local01, local05
078cc                 | LR__0641
078cc     A7 F0 03 F6 | 	mov	ptra, fp
078d0     B2 00 A0 FD | 	call	#popregs_
078d4                 | _do_for_ret
078d4     2D 00 64 FD | 	ret
078d8                 | 
078d8                 | ' 
078d8                 | ' ' now do_next todo
078d8                 | ' 
078d8                 | ' sub do_next()
078d8                 | _do_next
078d8     04 4A 05 F6 | 	mov	COUNT_, #4
078dc     A8 00 A0 FD | 	call	#pushregs_
078e0     4C 1C B0 FD | 	call	#_pop
078e4     FD 1E 02 F6 | 	mov	local01, result1
078e8     FE 20 02 F6 | 	mov	local02, result2
078ec     FF 22 02 F6 | 	mov	local03, result3
078f0                 | ' 
078f0                 | ' t1=pop() :varnum=t1.result.uresult
078f0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
078f0     78 00 00 FF 
078f4     AC E5 05 F1 | 	add	objptr, ##61868
078f8     F2 12 02 FB | 	rdlong	arg01, objptr
078fc     09 25 02 F6 | 	mov	local04, arg01
07900     02 24 66 F0 | 	shl	local04, #2
07904     09 25 02 F1 | 	add	local04, arg01
07908     02 24 66 F0 | 	shl	local04, #2
0790c     07 00 00 FF 
07910     40 E5 85 F1 | 	sub	objptr, ##3904
07914     F2 24 02 F1 | 	add	local04, objptr
07918     08 24 06 F1 | 	add	local04, #8
0791c     12 25 02 FB | 	rdlong	local04, local04
07920     0F 25 0A F2 | 	cmp	local04, local01 wz
07924     71 00 00 FF 
07928     6C E4 85 F1 | 	sub	objptr, ##57964
0792c     0C 00 90 AD |  if_e	jmp	#LR__0650
07930     25 12 06 F6 | 	mov	arg01, #37
07934     6C DA B0 FD | 	call	#_printerror
07938     28 02 90 FD | 	jmp	#LR__0654
0793c                 | LR__0650
0793c     78 00 00 FF 
07940     AC E5 05 F1 | 	add	objptr, ##61868
07944     F2 12 02 FB | 	rdlong	arg01, objptr
07948     09 25 02 F6 | 	mov	local04, arg01
0794c     02 24 66 F0 | 	shl	local04, #2
07950     09 25 02 F1 | 	add	local04, arg01
07954     02 24 66 F0 | 	shl	local04, #2
07958     07 00 00 FF 
0795c     40 E5 85 F1 | 	sub	objptr, ##3904
07960     F2 24 02 F1 | 	add	local04, objptr
07964     0C 24 06 F1 | 	add	local04, #12
07968     12 25 02 FB | 	rdlong	local04, local04
0796c     0F 13 02 F6 | 	mov	arg01, local01
07970     04 12 66 F0 | 	shl	arg01, #4
07974     3D 00 00 FF 
07978     90 E4 85 F1 | 	sub	objptr, ##31376
0797c     F2 12 02 F1 | 	add	arg01, objptr
07980     0F FF 01 F6 | 	mov	result3, local01
07984     04 FE 65 F0 | 	shl	result3, #4
07988     F2 FE 01 F1 | 	add	result3, objptr
0798c     04 FE 05 F1 | 	add	result3, #4
07990     FF FE 01 FB | 	rdlong	result3, result3
07994     12 FF 01 F1 | 	add	result3, local04
07998     04 12 06 F1 | 	add	arg01, #4
0799c     09 FF 61 FC | 	wrlong	result3, arg01
079a0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
079a0                 | ' if fortable(fortop).stepval>=0 then
079a0     44 00 00 FF 
079a4     D0 E5 05 F1 | 	add	objptr, ##35280
079a8     F2 12 02 FB | 	rdlong	arg01, objptr
079ac     09 25 02 F6 | 	mov	local04, arg01
079b0     02 24 66 F0 | 	shl	local04, #2
079b4     09 25 02 F1 | 	add	local04, arg01
079b8     02 24 66 F0 | 	shl	local04, #2
079bc     07 00 00 FF 
079c0     40 E5 85 F1 | 	sub	objptr, ##3904
079c4     F2 24 02 F1 | 	add	local04, objptr
079c8     0C 24 06 F1 | 	add	local04, #12
079cc     12 25 02 FB | 	rdlong	local04, local04
079d0     00 24 56 F2 | 	cmps	local04, #0 wc
079d4     71 00 00 FF 
079d8     6C E4 85 F1 | 	sub	objptr, ##57964
079dc     78 00 90 CD |  if_b	jmp	#LR__0651
079e0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
079e0     04 1E 66 F0 | 	shl	local01, #4
079e4     33 00 00 FF 
079e8     DC E5 05 F1 | 	add	objptr, ##26588
079ec     F2 1E 02 F1 | 	add	local01, objptr
079f0     44 00 00 FF 
079f4     D0 E5 05 F1 | 	add	objptr, ##35280
079f8     F2 24 02 FB | 	rdlong	local04, objptr
079fc     12 13 02 F6 | 	mov	arg01, local04
07a00     02 12 66 F0 | 	shl	arg01, #2
07a04     12 13 02 F1 | 	add	arg01, local04
07a08     02 12 66 F0 | 	shl	arg01, #2
07a0c     07 00 00 FF 
07a10     40 E5 85 F1 | 	sub	objptr, ##3904
07a14     F2 12 02 F1 | 	add	arg01, objptr
07a18     04 1E 06 F1 | 	add	local01, #4
07a1c     0F 25 02 FB | 	rdlong	local04, local01
07a20     10 12 06 F1 | 	add	arg01, #16
07a24     09 13 02 FB | 	rdlong	arg01, arg01
07a28     09 25 5A F2 | 	cmps	local04, arg01 wcz
07a2c     71 00 00 FF 
07a30     6C E4 85 F1 | 	sub	objptr, ##57964
07a34     9C 00 90 ED |  if_be	jmp	#LR__0653
07a38     78 00 00 FF 
07a3c     AC E5 05 F1 | 	add	objptr, ##61868
07a40     F2 24 02 FB | 	rdlong	local04, objptr
07a44     01 24 86 F1 | 	sub	local04, #1
07a48     F2 24 62 FC | 	wrlong	local04, objptr
07a4c     78 00 00 FF 
07a50     AC E5 85 F1 | 	sub	objptr, ##61868
07a54     0C 01 90 FD | 	jmp	#LR__0654
07a58                 | LR__0651
07a58                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07a58     0F 13 02 F6 | 	mov	arg01, local01
07a5c     04 12 66 F0 | 	shl	arg01, #4
07a60     33 00 00 FF 
07a64     DC E5 05 F1 | 	add	objptr, ##26588
07a68     F2 12 02 F1 | 	add	arg01, objptr
07a6c     44 00 00 FF 
07a70     D0 E5 05 F1 | 	add	objptr, ##35280
07a74     F2 24 02 FB | 	rdlong	local04, objptr
07a78     12 1F 02 F6 | 	mov	local01, local04
07a7c     02 1E 66 F0 | 	shl	local01, #2
07a80     12 1F 02 F1 | 	add	local01, local04
07a84     02 1E 66 F0 | 	shl	local01, #2
07a88     07 00 00 FF 
07a8c     40 E5 85 F1 | 	sub	objptr, ##3904
07a90     F2 1E 02 F1 | 	add	local01, objptr
07a94     04 12 06 F1 | 	add	arg01, #4
07a98     09 13 02 FB | 	rdlong	arg01, arg01
07a9c     10 1E 06 F1 | 	add	local01, #16
07aa0     0F 1F 02 FB | 	rdlong	local01, local01
07aa4     0F 13 52 F2 | 	cmps	arg01, local01 wc
07aa8     71 00 00 FF 
07aac     6C E4 85 F1 | 	sub	objptr, ##57964
07ab0     20 00 90 3D |  if_ae	jmp	#LR__0652
07ab4     78 00 00 FF 
07ab8     AC E5 05 F1 | 	add	objptr, ##61868
07abc     F2 24 02 FB | 	rdlong	local04, objptr
07ac0     01 24 86 F1 | 	sub	local04, #1
07ac4     F2 24 62 FC | 	wrlong	local04, objptr
07ac8     78 00 00 FF 
07acc     AC E5 85 F1 | 	sub	objptr, ##61868
07ad0     90 00 90 FD | 	jmp	#LR__0654
07ad4                 | LR__0652
07ad4                 | LR__0653
07ad4     78 00 00 FF 
07ad8     AC E5 05 F1 | 	add	objptr, ##61868
07adc     F2 1E 02 FB | 	rdlong	local01, objptr
07ae0     0F 25 02 F6 | 	mov	local04, local01
07ae4     02 24 66 F0 | 	shl	local04, #2
07ae8     0F 25 02 F1 | 	add	local04, local01
07aec     02 24 66 F0 | 	shl	local04, #2
07af0     07 00 00 FF 
07af4     40 E5 85 F1 | 	sub	objptr, ##3904
07af8     F2 24 02 F1 | 	add	local04, objptr
07afc     12 25 02 FB | 	rdlong	local04, local04
07b00     07 00 00 FF 
07b04     18 E5 05 F1 | 	add	objptr, ##3864
07b08     F2 24 62 FC | 	wrlong	local04, objptr
07b0c     28 E4 05 F1 | 	add	objptr, #40
07b10     F2 1E 02 FB | 	rdlong	local01, objptr
07b14     0F 25 02 F6 | 	mov	local04, local01
07b18     02 24 66 F0 | 	shl	local04, #2
07b1c     0F 25 02 F1 | 	add	local04, local01
07b20     02 24 66 F0 | 	shl	local04, #2
07b24     07 00 00 FF 
07b28     40 E5 85 F1 | 	sub	objptr, ##3904
07b2c     F2 24 02 F1 | 	add	local04, objptr
07b30     04 24 06 F1 | 	add	local04, #4
07b34     12 25 02 FB | 	rdlong	local04, local04
07b38     07 00 00 FF 
07b3c     1C E5 05 F1 | 	add	objptr, ##3868
07b40     F2 24 62 FC | 	wrlong	local04, objptr
07b44     0F 00 00 FF 
07b48     38 E5 85 F1 | 	sub	objptr, ##7992
07b4c     F2 24 02 FB | 	rdlong	local04, objptr
07b50     01 24 86 F1 | 	sub	local04, #1
07b54     04 E4 05 F1 | 	add	objptr, #4
07b58     F2 24 62 FC | 	wrlong	local04, objptr
07b5c     69 00 00 FF 
07b60     54 E4 85 F1 | 	sub	objptr, ##53844
07b64                 | LR__0654
07b64     A7 F0 03 F6 | 	mov	ptra, fp
07b68     B2 00 A0 FD | 	call	#popregs_
07b6c                 | _do_next_ret
07b6c     2D 00 64 FD | 	ret
07b70                 | 
07b70                 | ' 
07b70                 | ' 
07b70                 | ' function compile_next() as ulong
07b70                 | _compile_next
07b70     04 4A 05 F6 | 	mov	COUNT_, #4
07b74     A8 00 A0 FD | 	call	#pushregs_
07b78     56 00 00 FF 
07b7c     18 E4 05 F1 | 	add	objptr, ##44056
07b80     F2 12 02 FB | 	rdlong	arg01, objptr
07b84     03 12 66 F0 | 	shl	arg01, #3
07b88     02 00 00 FF 
07b8c     38 E4 85 F1 | 	sub	objptr, ##1080
07b90     F2 12 02 F1 | 	add	arg01, objptr
07b94     09 1F 02 FB | 	rdlong	local01, arg01
07b98                 | ' 
07b98                 | ' varname$=lparts(ct).part$ 
07b98                 | ' 'suffix$=right$(varname$,1)
07b98                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07b98                 | ' if varnum=0 then compile_error(35)  : return 35
07b98     04 E4 85 F1 | 	sub	objptr, #4
07b9c     F2 14 0A FB | 	rdlong	arg02, objptr wz
07ba0     53 00 00 FF 
07ba4     DC E5 85 F1 | 	sub	objptr, ##42972
07ba8     10 00 90 5D |  if_ne	jmp	#LR__0660
07bac     23 12 06 F6 | 	mov	arg01, #35
07bb0     10 E0 BF FD | 	call	#_compile_error
07bb4     23 FA 05 F6 | 	mov	result1, #35
07bb8     58 01 90 FD | 	jmp	#LR__0664
07bbc                 | LR__0660
07bbc     01 20 66 F6 | 	neg	local02, #1
07bc0                 | ' j=-1
07bc0                 | ' for i=0 to varnum-1
07bc0     00 22 06 F6 | 	mov	local03, #0
07bc4     53 00 00 FF 
07bc8     DC E5 05 F1 | 	add	objptr, ##42972
07bcc     F2 24 02 FB | 	rdlong	local04, objptr
07bd0     53 00 00 FF 
07bd4     DC E5 85 F1 | 	sub	objptr, ##42972
07bd8                 | LR__0661
07bd8     12 23 12 F2 | 	cmp	local03, local04 wc
07bdc     38 00 90 3D |  if_ae	jmp	#LR__0662
07be0                 | '   if variables(i).name=varname$ then j=i : exit
07be0     11 15 02 F6 | 	mov	arg02, local03
07be4     04 14 66 F0 | 	shl	arg02, #4
07be8     33 00 00 FF 
07bec     DC E5 05 F1 | 	add	objptr, ##26588
07bf0     F2 14 02 F1 | 	add	arg02, objptr
07bf4     0A 13 02 FB | 	rdlong	arg01, arg02
07bf8     0F 15 02 F6 | 	mov	arg02, local01
07bfc     33 00 00 FF 
07c00     DC E5 85 F1 | 	sub	objptr, ##26588
07c04     E8 0C B1 FD | 	call	#__system___string_cmp
07c08     00 FA 0D F2 | 	cmp	result1, #0 wz
07c0c     11 21 02 A6 |  if_e	mov	local02, local03
07c10     01 22 06 51 |  if_ne	add	local03, #1
07c14     C0 FF 9F 5D |  if_ne	jmp	#LR__0661
07c18                 | LR__0662
07c18                 | ' if j=-1 then compile_error(35) : return 35
07c18     FF FF 7F FF 
07c1c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07c20     10 00 90 5D |  if_ne	jmp	#LR__0663
07c24     23 12 06 F6 | 	mov	arg01, #35
07c28     98 DF BF FD | 	call	#_compile_error
07c2c     23 FA 05 F6 | 	mov	result1, #35
07c30     E0 00 90 FD | 	jmp	#LR__0664
07c34                 | LR__0663
07c34     69 00 00 FF 
07c38     50 E4 05 F1 | 	add	objptr, ##53840
07c3c     F2 24 02 FB | 	rdlong	local04, objptr
07c40     12 23 02 F6 | 	mov	local03, local04
07c44     01 22 66 F0 | 	shl	local03, #1
07c48     12 23 02 F1 | 	add	local03, local04
07c4c     02 22 66 F0 | 	shl	local03, #2
07c50     03 00 00 FF 
07c54     00 E4 85 F1 | 	sub	objptr, ##1536
07c58     F2 22 02 F1 | 	add	local03, objptr
07c5c     08 22 06 F1 | 	add	local03, #8
07c60     11 39 68 FC | 	wrlong	#28, local03
07c64     03 00 00 FF 
07c68     00 E4 05 F1 | 	add	objptr, ##1536
07c6c     F2 24 02 FB | 	rdlong	local04, objptr
07c70     12 23 02 F6 | 	mov	local03, local04
07c74     01 22 66 F0 | 	shl	local03, #1
07c78     12 23 02 F1 | 	add	local03, local04
07c7c     02 22 66 F0 | 	shl	local03, #2
07c80     03 00 00 FF 
07c84     00 E4 85 F1 | 	sub	objptr, ##1536
07c88     F2 22 02 F1 | 	add	local03, objptr
07c8c     11 21 62 FC | 	wrlong	local02, local03
07c90     03 00 00 FF 
07c94     00 E4 05 F1 | 	add	objptr, ##1536
07c98     F2 24 02 FB | 	rdlong	local04, objptr
07c9c     01 24 06 F1 | 	add	local04, #1
07ca0     F2 24 62 FC | 	wrlong	local04, objptr
07ca4     12 23 02 F6 | 	mov	local03, local04
07ca8     01 22 66 F0 | 	shl	local03, #1
07cac     12 23 02 F1 | 	add	local03, local04
07cb0     02 22 66 F0 | 	shl	local03, #2
07cb4     03 00 00 FF 
07cb8     00 E4 85 F1 | 	sub	objptr, ##1536
07cbc     F2 22 02 F1 | 	add	local03, objptr
07cc0     08 22 06 F1 | 	add	local03, #8
07cc4     11 97 68 FC | 	wrlong	#75, local03
07cc8     03 00 00 FF 
07ccc     00 E4 05 F1 | 	add	objptr, ##1536
07cd0     F2 24 02 FB | 	rdlong	local04, objptr
07cd4     12 23 02 F6 | 	mov	local03, local04
07cd8     01 22 66 F0 | 	shl	local03, #1
07cdc     12 23 02 F1 | 	add	local03, local04
07ce0     02 22 66 F0 | 	shl	local03, #2
07ce4     03 00 00 FF 
07ce8     00 E4 85 F1 | 	sub	objptr, ##1536
07cec     F2 22 02 F1 | 	add	local03, objptr
07cf0     11 01 68 FC | 	wrlong	#0, local03
07cf4     03 00 00 FF 
07cf8     00 E4 05 F1 | 	add	objptr, ##1536
07cfc     F2 24 02 FB | 	rdlong	local04, objptr
07d00     01 24 06 F1 | 	add	local04, #1
07d04     F2 24 62 FC | 	wrlong	local04, objptr
07d08     69 00 00 FF 
07d0c     50 E4 85 F1 | 	sub	objptr, ##53840
07d10                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
07d10                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
07d10                 | ' return 0
07d10     00 FA 05 F6 | 	mov	result1, #0
07d14                 | LR__0664
07d14     A7 F0 03 F6 | 	mov	ptra, fp
07d18     B2 00 A0 FD | 	call	#popregs_
07d1c                 | _compile_next_ret
07d1c     2D 00 64 FD | 	ret
07d20                 | 
07d20                 | ' 
07d20                 | ' 
07d20                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07d20                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07d20                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07d20                 | ' 
07d20                 | ' 
07d20                 | ' function compile_goto( ) as ulong
07d20                 | _compile_goto
07d20     03 4A 05 F6 | 	mov	COUNT_, #3
07d24     A8 00 A0 FD | 	call	#pushregs_
07d28     28 F0 07 F1 | 	add	ptra, #40
07d2c                 | ' 
07d2c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07d2c     56 00 00 FF 
07d30     18 E4 05 F1 | 	add	objptr, ##44056
07d34     F2 16 02 FB | 	rdlong	arg03, objptr
07d38     03 16 66 F0 | 	shl	arg03, #3
07d3c     02 00 00 FF 
07d40     38 E4 85 F1 | 	sub	objptr, ##1080
07d44     F2 16 02 F1 | 	add	arg03, objptr
07d48     04 16 06 F1 | 	add	arg03, #4
07d4c     0B 17 02 FB | 	rdlong	arg03, arg03
07d50     01 00 00 FF 
07d54     00 16 0E F2 | 	cmp	arg03, ##512 wz
07d58     53 00 00 FF 
07d5c     E0 E5 85 F1 | 	sub	objptr, ##42976
07d60     CC 02 90 5D |  if_ne	jmp	#LR__0675
07d64     56 00 00 FF 
07d68     18 E4 05 F1 | 	add	objptr, ##44056
07d6c     F2 16 02 FB | 	rdlong	arg03, objptr
07d70     01 16 06 F1 | 	add	arg03, #1
07d74     03 16 66 F0 | 	shl	arg03, #3
07d78     02 00 00 FF 
07d7c     38 E4 85 F1 | 	sub	objptr, ##1080
07d80     F2 16 02 F1 | 	add	arg03, objptr
07d84     04 16 06 F1 | 	add	arg03, #4
07d88     0B 17 02 FB | 	rdlong	arg03, arg03
07d8c     FE 17 0E F2 | 	cmp	arg03, #510 wz
07d90     53 00 00 FF 
07d94     E0 E5 85 F1 | 	sub	objptr, ##42976
07d98     94 02 90 5D |  if_ne	jmp	#LR__0675
07d9c     56 00 00 FF 
07da0     18 E4 05 F1 | 	add	objptr, ##44056
07da4     F2 16 02 FB | 	rdlong	arg03, objptr
07da8     03 16 66 F0 | 	shl	arg03, #3
07dac     02 00 00 FF 
07db0     38 E4 85 F1 | 	sub	objptr, ##1080
07db4     F2 16 02 F1 | 	add	arg03, objptr
07db8     0B 13 02 FB | 	rdlong	arg01, arg03
07dbc     00 14 06 F6 | 	mov	arg02, #0
07dc0     53 00 00 FF 
07dc4     E0 E5 85 F1 | 	sub	objptr, ##42976
07dc8     58 3B B1 FD | 	call	#__system____builtin_atoi
07dcc     04 4E 05 F1 | 	add	fp, #4
07dd0     A7 FA 61 FC | 	wrlong	result1, fp
07dd4     69 00 00 FF 
07dd8     50 E4 05 F1 | 	add	objptr, ##53840
07ddc     F2 1E 02 FB | 	rdlong	local01, objptr
07de0     0F 21 02 F6 | 	mov	local02, local01
07de4     01 20 66 F0 | 	shl	local02, #1
07de8     0F 21 02 F1 | 	add	local02, local01
07dec     02 20 66 F0 | 	shl	local02, #2
07df0     03 00 00 FF 
07df4     00 E4 85 F1 | 	sub	objptr, ##1536
07df8     F2 20 02 F1 | 	add	local02, objptr
07dfc     08 20 06 F1 | 	add	local02, #8
07e00     10 9D 68 FC | 	wrlong	#78, local02
07e04     03 00 00 FF 
07e08     08 E4 05 F1 | 	add	objptr, ##1544
07e0c     F2 22 02 FB | 	rdlong	local03, objptr
07e10     69 00 00 FF 
07e14     58 E4 85 F1 | 	sub	objptr, ##53848
07e18     04 4E 05 F1 | 	add	fp, #4
07e1c     A7 22 62 FC | 	wrlong	local03, fp
07e20     08 4E 85 F1 | 	sub	fp, #8
07e24                 | ' 
07e24                 | '   gotoline=val%(lparts(ct).part$) 
07e24                 | '   compiledline(lineptr).result_type=token_fast_goto
07e24                 | ' ' now find a pointer to goto
07e24                 | '   gotoptr=programstart
07e24                 | '   do
07e24                 | LR__0670
07e24     10 4E 05 F1 | 	add	fp, #16
07e28     A7 12 02 F6 | 	mov	arg01, fp
07e2c     08 4E 85 F1 | 	sub	fp, #8
07e30     A7 14 02 FB | 	rdlong	arg02, fp
07e34     08 4E 85 F1 | 	sub	fp, #8
07e38     18 16 06 F6 | 	mov	arg03, #24
07e3c     0B 00 00 FF 
07e40     C0 E4 05 F1 | 	add	objptr, ##5824
07e44     90 FF B0 FD | 	call	#_psram_spin2_read1
07e48     0B 00 00 FF 
07e4c     C0 E4 85 F1 | 	sub	objptr, ##5824
07e50                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07e50                 | '     if gotoheader(0)<>$FFFFFFFF then
07e50     10 4E 05 F1 | 	add	fp, #16
07e54     A7 22 02 FB | 	rdlong	local03, fp
07e58     10 4E 85 F1 | 	sub	fp, #16
07e5c     FF FF 7F FF 
07e60     FF 23 0E F2 | 	cmp	local03, ##-1 wz
07e64     24 00 90 AD |  if_e	jmp	#LR__0671
07e68     08 4E 05 F1 | 	add	fp, #8
07e6c     A7 22 02 FB | 	rdlong	local03, fp
07e70     04 4E 05 F1 | 	add	fp, #4
07e74     A7 22 62 FC | 	wrlong	local03, fp
07e78     18 4E 05 F1 | 	add	fp, #24
07e7c     A7 22 02 FB | 	rdlong	local03, fp
07e80     1C 4E 85 F1 | 	sub	fp, #28
07e84     A7 22 62 FC | 	wrlong	local03, fp
07e88     08 4E 85 F1 | 	sub	fp, #8
07e8c                 | LR__0671
07e8c     24 4E 05 F1 | 	add	fp, #36
07e90     A7 22 02 FB | 	rdlong	local03, fp
07e94     24 4E 85 F1 | 	sub	fp, #36
07e98     FF FF 3F FF 
07e9c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
07ea0     10 4E 05 51 |  if_ne	add	fp, #16
07ea4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
07ea8     10 4E 85 51 |  if_ne	sub	fp, #16
07eac     FF FF 7F 5F 
07eb0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07eb4     1C 00 90 AD |  if_e	jmp	#LR__0672
07eb8     10 4E 05 F1 | 	add	fp, #16
07ebc     A7 22 02 FB | 	rdlong	local03, fp
07ec0     0C 4E 85 F1 | 	sub	fp, #12
07ec4     A7 20 02 FB | 	rdlong	local02, fp
07ec8     04 4E 85 F1 | 	sub	fp, #4
07ecc     10 23 0A F2 | 	cmp	local03, local02 wz
07ed0     50 FF 9F 5D |  if_ne	jmp	#LR__0670
07ed4                 | LR__0672
07ed4                 | '   if gotoheader(0)=gotoline then
07ed4     10 4E 05 F1 | 	add	fp, #16
07ed8     A7 22 02 FB | 	rdlong	local03, fp
07edc     0C 4E 85 F1 | 	sub	fp, #12
07ee0     A7 1E 02 FB | 	rdlong	local01, fp
07ee4     04 4E 85 F1 | 	sub	fp, #4
07ee8     0F 23 0A F2 | 	cmp	local03, local01 wz
07eec     7C 00 90 5D |  if_ne	jmp	#LR__0673
07ef0     69 00 00 FF 
07ef4     50 E4 05 F1 | 	add	objptr, ##53840
07ef8     F2 1E 02 FB | 	rdlong	local01, objptr
07efc     0F 21 02 F6 | 	mov	local02, local01
07f00     01 20 66 F0 | 	shl	local02, #1
07f04     0F 21 02 F1 | 	add	local02, local01
07f08     02 20 66 F0 | 	shl	local02, #2
07f0c     03 00 00 FF 
07f10     00 E4 85 F1 | 	sub	objptr, ##1536
07f14     F2 20 02 F1 | 	add	local02, objptr
07f18     0C 4E 05 F1 | 	add	fp, #12
07f1c     A7 22 02 FB | 	rdlong	local03, fp
07f20     10 23 62 FC | 	wrlong	local03, local02
07f24     03 00 00 FF 
07f28     00 E4 05 F1 | 	add	objptr, ##1536
07f2c     F2 1E 02 FB | 	rdlong	local01, objptr
07f30     0F 21 02 F6 | 	mov	local02, local01
07f34     01 20 66 F0 | 	shl	local02, #1
07f38     0F 21 02 F1 | 	add	local02, local01
07f3c     02 20 66 F0 | 	shl	local02, #2
07f40     03 00 00 FF 
07f44     00 E4 85 F1 | 	sub	objptr, ##1536
07f48     F2 20 02 F1 | 	add	local02, objptr
07f4c     08 4E 85 F1 | 	sub	fp, #8
07f50     A7 22 02 FB | 	rdlong	local03, fp
07f54     04 4E 85 F1 | 	sub	fp, #4
07f58     04 20 06 F1 | 	add	local02, #4
07f5c     10 23 62 FC | 	wrlong	local03, local02
07f60     66 00 00 FF 
07f64     50 E4 85 F1 | 	sub	objptr, ##52304
07f68     A4 00 90 FD | 	jmp	#LR__0674
07f6c                 | LR__0673
07f6c     69 00 00 FF 
07f70     50 E4 05 F1 | 	add	objptr, ##53840
07f74     F2 1E 02 FB | 	rdlong	local01, objptr
07f78     0F 21 02 F6 | 	mov	local02, local01
07f7c     01 20 66 F0 | 	shl	local02, #1
07f80     0F 21 02 F1 | 	add	local02, local01
07f84     02 20 66 F0 | 	shl	local02, #2
07f88     03 00 00 FF 
07f8c     00 E4 85 F1 | 	sub	objptr, ##1536
07f90     F2 20 02 F1 | 	add	local02, objptr
07f94     00 00 C0 FF 
07f98     10 01 68 FC | 	wrlong	##-2147483648, local02
07f9c     03 00 00 FF 
07fa0     00 E4 05 F1 | 	add	objptr, ##1536
07fa4     F2 1E 02 FB | 	rdlong	local01, objptr
07fa8     0F 21 02 F6 | 	mov	local02, local01
07fac     01 20 66 F0 | 	shl	local02, #1
07fb0     0F 21 02 F1 | 	add	local02, local01
07fb4     02 20 66 F0 | 	shl	local02, #2
07fb8     03 00 00 FF 
07fbc     00 E4 85 F1 | 	sub	objptr, ##1536
07fc0     F2 20 02 F1 | 	add	local02, objptr
07fc4     04 4E 05 F1 | 	add	fp, #4
07fc8     A7 22 02 FB | 	rdlong	local03, fp
07fcc     04 4E 85 F1 | 	sub	fp, #4
07fd0     04 20 06 F1 | 	add	local02, #4
07fd4     10 23 62 FC | 	wrlong	local03, local02
07fd8     03 00 00 FF 
07fdc     00 E4 05 F1 | 	add	objptr, ##1536
07fe0     F2 1E 02 FB | 	rdlong	local01, objptr
07fe4     0F 21 02 F6 | 	mov	local02, local01
07fe8     01 20 66 F0 | 	shl	local02, #1
07fec     0F 21 02 F1 | 	add	local02, local01
07ff0     02 20 66 F0 | 	shl	local02, #2
07ff4     03 00 00 FF 
07ff8     00 E4 85 F1 | 	sub	objptr, ##1536
07ffc     F2 20 02 F1 | 	add	local02, objptr
08000     08 20 06 F1 | 	add	local02, #8
08004     10 A7 68 FC | 	wrlong	#83, local02
08008     66 00 00 FF 
0800c     50 E4 85 F1 | 	sub	objptr, ##52304
08010                 | LR__0674
08010     69 00 00 FF 
08014     50 E4 05 F1 | 	add	objptr, ##53840
08018     F2 22 02 FB | 	rdlong	local03, objptr
0801c     01 22 06 F1 | 	add	local03, #1
08020     F2 22 62 FC | 	wrlong	local03, objptr
08024     69 00 00 FF 
08028     50 E4 85 F1 | 	sub	objptr, ##53840
0802c     40 00 90 FD | 	jmp	#LR__0676
08030                 | LR__0675
08030                 | '    print "We have a slow goto, todo  "
08030     00 12 06 F6 | 	mov	arg01, #0
08034     8C 60 B1 FD | 	call	#__system___getiolock_0417
08038     FD 12 02 F6 | 	mov	arg01, result1
0803c     88 08 B1 FD | 	call	#__system___lockmem
08040     40 01 00 FF 
08044     86 14 06 F6 | 	mov	arg02, ##@LR__4558
08048     00 12 06 F6 | 	mov	arg01, #0
0804c     00 16 06 F6 | 	mov	arg03, #0
08050     64 15 B1 FD | 	call	#__system___basic_print_string
08054     00 12 06 F6 | 	mov	arg01, #0
08058     0A 14 06 F6 | 	mov	arg02, #10
0805c     00 16 06 F6 | 	mov	arg03, #0
08060     FC 14 B1 FD | 	call	#__system___basic_print_char
08064     00 12 06 F6 | 	mov	arg01, #0
08068     58 60 B1 FD | 	call	#__system___getiolock_0417
0806c     FD 00 68 FC | 	wrlong	#0, result1
08070                 | LR__0676
08070                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08070                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08070                 | ' return 0
08070     00 FA 05 F6 | 	mov	result1, #0
08074     A7 F0 03 F6 | 	mov	ptra, fp
08078     B2 00 A0 FD | 	call	#popregs_
0807c                 | _compile_goto_ret
0807c     2D 00 64 FD | 	ret
08080                 | 
08080                 | ' 
08080                 | ' 
08080                 | ' 
08080                 | ' 
08080                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08080                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08080                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08080                 | ' 
08080                 | ' 
08080                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08080                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08080                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08080                 | ' 
08080                 | ' 
08080                 | ' function expr() as integer 
08080                 | _expr
08080     07 4A 05 F6 | 	mov	COUNT_, #7
08084     A8 00 A0 FD | 	call	#pushregs_
08088                 | _expr_enter
08088     56 00 00 FF 
0808c     18 E4 05 F1 | 	add	objptr, ##44056
08090     F2 24 02 FB | 	rdlong	local04, objptr
08094     03 24 66 F0 | 	shl	local04, #3
08098     02 00 00 FF 
0809c     38 E4 85 F1 | 	sub	objptr, ##1080
080a0     F2 24 02 F1 | 	add	local04, objptr
080a4     04 24 06 F1 | 	add	local04, #4
080a8     12 27 02 FB | 	rdlong	local05, local04
080ac                 | ' 
080ac                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
080ac     FE 27 0E F2 | 	cmp	local05, #510 wz
080b0     53 00 00 FF 
080b4     E0 E5 85 F1 | 	sub	objptr, ##42976
080b8     C4 00 90 5D |  if_ne	jmp	#LR__0680
080bc     1D 1E 06 F6 | 	mov	local01, #29
080c0     FF 22 06 F6 | 	mov	local03, #255
080c4     0F 29 02 F6 | 	mov	local06, local01
080c8     10 2B 02 F6 | 	mov	local07, local02
080cc     11 1F 02 F6 | 	mov	local01, local03
080d0     69 00 00 FF 
080d4     50 E4 05 F1 | 	add	objptr, ##53840
080d8     F2 26 02 FB | 	rdlong	local05, objptr
080dc     13 25 02 F6 | 	mov	local04, local05
080e0     01 24 66 F0 | 	shl	local04, #1
080e4     13 25 02 F1 | 	add	local04, local05
080e8     02 24 66 F0 | 	shl	local04, #2
080ec     03 00 00 FF 
080f0     00 E4 85 F1 | 	sub	objptr, ##1536
080f4     F2 24 02 F1 | 	add	local04, objptr
080f8     12 29 62 FC | 	wrlong	local06, local04
080fc     03 00 00 FF 
08100     00 E4 05 F1 | 	add	objptr, ##1536
08104     F2 28 02 FB | 	rdlong	local06, objptr
08108     14 27 02 F6 | 	mov	local05, local06
0810c     01 26 66 F0 | 	shl	local05, #1
08110     14 27 02 F1 | 	add	local05, local06
08114     02 26 66 F0 | 	shl	local05, #2
08118     03 00 00 FF 
0811c     00 E4 85 F1 | 	sub	objptr, ##1536
08120     F2 26 02 F1 | 	add	local05, objptr
08124     04 26 06 F1 | 	add	local05, #4
08128     13 2B 62 FC | 	wrlong	local07, local05
0812c     03 00 00 FF 
08130     00 E4 05 F1 | 	add	objptr, ##1536
08134     F2 2A 02 FB | 	rdlong	local07, objptr
08138     15 29 02 F6 | 	mov	local06, local07
0813c     01 28 66 F0 | 	shl	local06, #1
08140     15 29 02 F1 | 	add	local06, local07
08144     02 28 66 F0 | 	shl	local06, #2
08148     03 00 00 FF 
0814c     00 E4 85 F1 | 	sub	objptr, ##1536
08150     F2 28 02 F1 | 	add	local06, objptr
08154     08 28 06 F1 | 	add	local06, #8
08158     14 1F 62 FC | 	wrlong	local01, local06
0815c     03 00 00 FF 
08160     00 E4 05 F1 | 	add	objptr, ##1536
08164     F2 28 02 FB | 	rdlong	local06, objptr
08168     01 28 06 F1 | 	add	local06, #1
0816c     F2 28 62 FC | 	wrlong	local06, objptr
08170     69 00 00 FF 
08174     50 E4 85 F1 | 	sub	objptr, ##53840
08178     1D FA 05 F6 | 	mov	result1, #29
0817c     54 01 90 FD | 	jmp	#LR__0683
08180                 | LR__0680
08180     00 1E 06 F6 | 	mov	local01, #0
08184     58 01 B0 FD | 	call	#_addsub
08188     56 00 00 FF 
0818c     18 E4 05 F1 | 	add	objptr, ##44056
08190     F2 24 02 FB | 	rdlong	local04, objptr
08194     03 24 66 F0 | 	shl	local04, #3
08198     02 00 00 FF 
0819c     38 E4 85 F1 | 	sub	objptr, ##1080
081a0     F2 24 02 F1 | 	add	local04, objptr
081a4     04 24 06 F1 | 	add	local04, #4
081a8     12 27 02 FB | 	rdlong	local05, local04
081ac                 | ' t3.result.uresult=0
081ac                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
081ac                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
081ac                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
081ac     53 00 00 FF 
081b0     E0 E5 85 F1 | 	sub	objptr, ##42976
081b4                 | LR__0681
081b4     1B 26 0E F2 | 	cmp	local05, #27 wz
081b8     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
081bc     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
081c0     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
081c4     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
081c8     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
081cc     00 01 90 5D |  if_ne	jmp	#LR__0682
081d0     56 00 00 FF 
081d4     18 E4 05 F1 | 	add	objptr, ##44056
081d8     F2 28 02 FB | 	rdlong	local06, objptr
081dc     01 28 06 F1 | 	add	local06, #1
081e0     F2 28 62 FC | 	wrlong	local06, objptr
081e4     56 00 00 FF 
081e8     18 E4 85 F1 | 	sub	objptr, ##44056
081ec     F0 00 B0 FD | 	call	#_addsub
081f0     13 23 02 F6 | 	mov	local03, local05
081f4     0F 29 02 F6 | 	mov	local06, local01
081f8     10 2B 02 F6 | 	mov	local07, local02
081fc     11 27 02 F6 | 	mov	local05, local03
08200     69 00 00 FF 
08204     50 E4 05 F1 | 	add	objptr, ##53840
08208     F2 24 02 FB | 	rdlong	local04, objptr
0820c     12 FB 01 F6 | 	mov	result1, local04
08210     01 FA 65 F0 | 	shl	result1, #1
08214     12 FB 01 F1 | 	add	result1, local04
08218     02 FA 65 F0 | 	shl	result1, #2
0821c     03 00 00 FF 
08220     00 E4 85 F1 | 	sub	objptr, ##1536
08224     F2 FA 01 F1 | 	add	result1, objptr
08228     FD 28 62 FC | 	wrlong	local06, result1
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 28 02 FB | 	rdlong	local06, objptr
08238     14 25 02 F6 | 	mov	local04, local06
0823c     01 24 66 F0 | 	shl	local04, #1
08240     14 25 02 F1 | 	add	local04, local06
08244     02 24 66 F0 | 	shl	local04, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 24 02 F1 | 	add	local04, objptr
08254     04 24 06 F1 | 	add	local04, #4
08258     12 2B 62 FC | 	wrlong	local07, local04
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 2A 02 FB | 	rdlong	local07, objptr
08268     15 29 02 F6 | 	mov	local06, local07
0826c     01 28 66 F0 | 	shl	local06, #1
08270     15 29 02 F1 | 	add	local06, local07
08274     02 28 66 F0 | 	shl	local06, #2
08278     03 00 00 FF 
0827c     00 E4 85 F1 | 	sub	objptr, ##1536
08280     F2 28 02 F1 | 	add	local06, objptr
08284     08 28 06 F1 | 	add	local06, #8
08288     14 27 62 FC | 	wrlong	local05, local06
0828c     03 00 00 FF 
08290     00 E4 05 F1 | 	add	objptr, ##1536
08294     F2 28 02 FB | 	rdlong	local06, objptr
08298     01 28 06 F1 | 	add	local06, #1
0829c     F2 28 62 FC | 	wrlong	local06, objptr
082a0     13 00 00 FF 
082a4     38 E4 85 F1 | 	sub	objptr, ##9784
082a8     F2 24 02 FB | 	rdlong	local04, objptr
082ac     03 24 66 F0 | 	shl	local04, #3
082b0     02 00 00 FF 
082b4     38 E4 85 F1 | 	sub	objptr, ##1080
082b8     F2 24 02 F1 | 	add	local04, objptr
082bc     04 24 06 F1 | 	add	local04, #4
082c0     12 27 02 FB | 	rdlong	local05, local04
082c4     53 00 00 FF 
082c8     E0 E5 85 F1 | 	sub	objptr, ##42976
082cc     E4 FE 9F FD | 	jmp	#LR__0681
082d0                 | LR__0682
082d0                 | ' return 0  
082d0     00 FA 05 F6 | 	mov	result1, #0
082d4                 | LR__0683
082d4     A7 F0 03 F6 | 	mov	ptra, fp
082d8     B2 00 A0 FD | 	call	#popregs_
082dc                 | _expr_ret
082dc     2D 00 64 FD | 	ret
082e0                 | 
082e0                 | ' 
082e0                 | ' 
082e0                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
082e0                 | ' 
082e0                 | ' function addsub() as integer 
082e0                 | _addsub
082e0     07 4A 05 F6 | 	mov	COUNT_, #7
082e4     A8 00 A0 FD | 	call	#pushregs_
082e8                 | _addsub_enter
082e8     00 1E 06 F6 | 	mov	local01, #0
082ec     50 01 B0 FD | 	call	#_muldiv
082f0     56 00 00 FF 
082f4     18 E4 05 F1 | 	add	objptr, ##44056
082f8     F2 24 02 FB | 	rdlong	local04, objptr
082fc     03 24 66 F0 | 	shl	local04, #3
08300     02 00 00 FF 
08304     38 E4 85 F1 | 	sub	objptr, ##1080
08308     F2 24 02 F1 | 	add	local04, objptr
0830c     04 24 06 F1 | 	add	local04, #4
08310     12 27 02 FB | 	rdlong	local05, local04
08314                 | ' t3.result.uresult=0
08314                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08314                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08314                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08314     53 00 00 FF 
08318     E0 E5 85 F1 | 	sub	objptr, ##42976
0831c                 | LR__0690
0831c     01 26 0E F2 | 	cmp	local05, #1 wz
08320     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08324     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08328     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0832c     00 01 90 5D |  if_ne	jmp	#LR__0691
08330     56 00 00 FF 
08334     18 E4 05 F1 | 	add	objptr, ##44056
08338     F2 24 02 FB | 	rdlong	local04, objptr
0833c     01 24 06 F1 | 	add	local04, #1
08340     F2 24 62 FC | 	wrlong	local04, objptr
08344     56 00 00 FF 
08348     18 E4 85 F1 | 	sub	objptr, ##44056
0834c     F0 00 B0 FD | 	call	#_muldiv
08350     13 23 02 F6 | 	mov	local03, local05
08354     0F 29 02 F6 | 	mov	local06, local01
08358     10 2B 02 F6 | 	mov	local07, local02
0835c     11 27 02 F6 | 	mov	local05, local03
08360     69 00 00 FF 
08364     50 E4 05 F1 | 	add	objptr, ##53840
08368     F2 24 02 FB | 	rdlong	local04, objptr
0836c     12 FB 01 F6 | 	mov	result1, local04
08370     01 FA 65 F0 | 	shl	result1, #1
08374     12 FB 01 F1 | 	add	result1, local04
08378     02 FA 65 F0 | 	shl	result1, #2
0837c     03 00 00 FF 
08380     00 E4 85 F1 | 	sub	objptr, ##1536
08384     F2 FA 01 F1 | 	add	result1, objptr
08388     FD 28 62 FC | 	wrlong	local06, result1
0838c     03 00 00 FF 
08390     00 E4 05 F1 | 	add	objptr, ##1536
08394     F2 28 02 FB | 	rdlong	local06, objptr
08398     14 25 02 F6 | 	mov	local04, local06
0839c     01 24 66 F0 | 	shl	local04, #1
083a0     14 25 02 F1 | 	add	local04, local06
083a4     02 24 66 F0 | 	shl	local04, #2
083a8     03 00 00 FF 
083ac     00 E4 85 F1 | 	sub	objptr, ##1536
083b0     F2 24 02 F1 | 	add	local04, objptr
083b4     04 24 06 F1 | 	add	local04, #4
083b8     12 2B 62 FC | 	wrlong	local07, local04
083bc     03 00 00 FF 
083c0     00 E4 05 F1 | 	add	objptr, ##1536
083c4     F2 2A 02 FB | 	rdlong	local07, objptr
083c8     15 29 02 F6 | 	mov	local06, local07
083cc     01 28 66 F0 | 	shl	local06, #1
083d0     15 29 02 F1 | 	add	local06, local07
083d4     02 28 66 F0 | 	shl	local06, #2
083d8     03 00 00 FF 
083dc     00 E4 85 F1 | 	sub	objptr, ##1536
083e0     F2 28 02 F1 | 	add	local06, objptr
083e4     08 28 06 F1 | 	add	local06, #8
083e8     14 27 62 FC | 	wrlong	local05, local06
083ec     03 00 00 FF 
083f0     00 E4 05 F1 | 	add	objptr, ##1536
083f4     F2 28 02 FB | 	rdlong	local06, objptr
083f8     01 28 06 F1 | 	add	local06, #1
083fc     F2 28 62 FC | 	wrlong	local06, objptr
08400     13 00 00 FF 
08404     38 E4 85 F1 | 	sub	objptr, ##9784
08408     F2 24 02 FB | 	rdlong	local04, objptr
0840c     03 24 66 F0 | 	shl	local04, #3
08410     02 00 00 FF 
08414     38 E4 85 F1 | 	sub	objptr, ##1080
08418     F2 24 02 F1 | 	add	local04, objptr
0841c     04 24 06 F1 | 	add	local04, #4
08420     12 27 02 FB | 	rdlong	local05, local04
08424     53 00 00 FF 
08428     E0 E5 85 F1 | 	sub	objptr, ##42976
0842c     EC FE 9F FD | 	jmp	#LR__0690
08430                 | LR__0691
08430                 | '   return 0
08430     00 FA 05 F6 | 	mov	result1, #0
08434     A7 F0 03 F6 | 	mov	ptra, fp
08438     B2 00 A0 FD | 	call	#popregs_
0843c                 | _addsub_ret
0843c     2D 00 64 FD | 	ret
08440                 | 
08440                 | ' 
08440                 | ' sub muldiv()
08440                 | _muldiv
08440     08 4A 05 F6 | 	mov	COUNT_, #8
08444     A8 00 A0 FD | 	call	#pushregs_
08448                 | _muldiv_enter
08448     00 1E 06 F6 | 	mov	local01, #0
0844c     58 01 B0 FD | 	call	#_getvalue
08450     56 00 00 FF 
08454     18 E4 05 F1 | 	add	objptr, ##44056
08458     F2 24 02 FB | 	rdlong	local04, objptr
0845c     03 24 66 F0 | 	shl	local04, #3
08460     02 00 00 FF 
08464     38 E4 85 F1 | 	sub	objptr, ##1080
08468     F2 24 02 F1 | 	add	local04, objptr
0846c     04 24 06 F1 | 	add	local04, #4
08470     12 27 02 FB | 	rdlong	local05, local04
08474                 | ' t3.result.uresult=0
08474                 | ' getvalue()    
08474                 | ' op = lparts(ct).token
08474                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08474     53 00 00 FF 
08478     E0 E5 85 F1 | 	sub	objptr, ##42976
0847c                 | LR__0700
0847c     05 26 0E F2 | 	cmp	local05, #5 wz
08480     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
08484     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
08488     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0848c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
08490     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
08494     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
08498     00 01 90 5D |  if_ne	jmp	#LR__0701
0849c     56 00 00 FF 
084a0     18 E4 05 F1 | 	add	objptr, ##44056
084a4     F2 24 02 FB | 	rdlong	local04, objptr
084a8     01 24 06 F1 | 	add	local04, #1
084ac     F2 24 62 FC | 	wrlong	local04, objptr
084b0     56 00 00 FF 
084b4     18 E4 85 F1 | 	sub	objptr, ##44056
084b8     EC 00 B0 FD | 	call	#_getvalue
084bc     13 23 02 F6 | 	mov	local03, local05
084c0     0F 29 02 F6 | 	mov	local06, local01
084c4     10 2B 02 F6 | 	mov	local07, local02
084c8     11 27 02 F6 | 	mov	local05, local03
084cc     69 00 00 FF 
084d0     50 E4 05 F1 | 	add	objptr, ##53840
084d4     F2 24 02 FB | 	rdlong	local04, objptr
084d8     12 2D 02 F6 | 	mov	local08, local04
084dc     01 2C 66 F0 | 	shl	local08, #1
084e0     12 2D 02 F1 | 	add	local08, local04
084e4     02 2C 66 F0 | 	shl	local08, #2
084e8     03 00 00 FF 
084ec     00 E4 85 F1 | 	sub	objptr, ##1536
084f0     F2 2C 02 F1 | 	add	local08, objptr
084f4     16 29 62 FC | 	wrlong	local06, local08
084f8     03 00 00 FF 
084fc     00 E4 05 F1 | 	add	objptr, ##1536
08500     F2 2C 02 FB | 	rdlong	local08, objptr
08504     16 29 02 F6 | 	mov	local06, local08
08508     01 28 66 F0 | 	shl	local06, #1
0850c     16 29 02 F1 | 	add	local06, local08
08510     02 28 66 F0 | 	shl	local06, #2
08514     03 00 00 FF 
08518     00 E4 85 F1 | 	sub	objptr, ##1536
0851c     F2 28 02 F1 | 	add	local06, objptr
08520     04 28 06 F1 | 	add	local06, #4
08524     14 2B 62 FC | 	wrlong	local07, local06
08528     03 00 00 FF 
0852c     00 E4 05 F1 | 	add	objptr, ##1536
08530     F2 2C 02 FB | 	rdlong	local08, objptr
08534     16 2B 02 F6 | 	mov	local07, local08
08538     01 2A 66 F0 | 	shl	local07, #1
0853c     16 2B 02 F1 | 	add	local07, local08
08540     02 2A 66 F0 | 	shl	local07, #2
08544     03 00 00 FF 
08548     00 E4 85 F1 | 	sub	objptr, ##1536
0854c     F2 2A 02 F1 | 	add	local07, objptr
08550     08 2A 06 F1 | 	add	local07, #8
08554     15 27 62 FC | 	wrlong	local05, local07
08558     03 00 00 FF 
0855c     00 E4 05 F1 | 	add	objptr, ##1536
08560     F2 28 02 FB | 	rdlong	local06, objptr
08564     01 28 06 F1 | 	add	local06, #1
08568     F2 28 62 FC | 	wrlong	local06, objptr
0856c     13 00 00 FF 
08570     38 E4 85 F1 | 	sub	objptr, ##9784
08574     F2 24 02 FB | 	rdlong	local04, objptr
08578     03 24 66 F0 | 	shl	local04, #3
0857c     02 00 00 FF 
08580     38 E4 85 F1 | 	sub	objptr, ##1080
08584     F2 24 02 F1 | 	add	local04, objptr
08588     04 24 06 F1 | 	add	local04, #4
0858c     12 27 02 FB | 	rdlong	local05, local04
08590     53 00 00 FF 
08594     E0 E5 85 F1 | 	sub	objptr, ##42976
08598     E0 FE 9F FD | 	jmp	#LR__0700
0859c                 | LR__0701
0859c     A7 F0 03 F6 | 	mov	ptra, fp
085a0     B2 00 A0 FD | 	call	#popregs_
085a4                 | _muldiv_ret
085a4     2D 00 64 FD | 	ret
085a8                 | 
085a8                 | ' 
085a8                 | ' sub getvalue() 
085a8                 | _getvalue
085a8     0B 4A 05 F6 | 	mov	COUNT_, #11
085ac     A8 00 A0 FD | 	call	#pushregs_
085b0                 | _getvalue_enter
085b0     01 24 06 F6 | 	mov	local04, #1
085b4     00 1E 06 F6 | 	mov	local01, #0
085b8     1D 22 06 F6 | 	mov	local03, #29
085bc     56 00 00 FF 
085c0     18 E4 05 F1 | 	add	objptr, ##44056
085c4     F2 16 02 FB | 	rdlong	arg03, objptr
085c8     03 16 66 F0 | 	shl	arg03, #3
085cc     02 00 00 FF 
085d0     38 E4 85 F1 | 	sub	objptr, ##1080
085d4     F2 16 02 F1 | 	add	arg03, objptr
085d8     04 16 06 F1 | 	add	arg03, #4
085dc     0B 27 02 FB | 	rdlong	local05, arg03
085e0                 | ' m=1
085e0                 | ' t1.result.uresult=0: t1.result_type=result_uint
085e0                 | ' op=lparts(ct).token
085e0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
085e0     02 26 0E F2 | 	cmp	local05, #2 wz
085e4     53 00 00 FF 
085e8     E0 E5 85 F1 | 	sub	objptr, ##42976
085ec     38 00 90 5D |  if_ne	jmp	#LR__0710
085f0     01 24 66 F6 | 	neg	local04, #1
085f4     56 00 00 FF 
085f8     18 E4 05 F1 | 	add	objptr, ##44056
085fc     F2 26 02 FB | 	rdlong	local05, objptr
08600     01 26 06 F1 | 	add	local05, #1
08604     F2 26 62 FC | 	wrlong	local05, objptr
08608     03 26 66 F0 | 	shl	local05, #3
0860c     02 00 00 FF 
08610     38 E4 85 F1 | 	sub	objptr, ##1080
08614     F2 26 02 F1 | 	add	local05, objptr
08618     04 26 06 F1 | 	add	local05, #4
0861c     13 27 02 FB | 	rdlong	local05, local05
08620     53 00 00 FF 
08624     E0 E5 85 F1 | 	sub	objptr, ##42976
08628                 | LR__0710
08628                 | ' select case op
08628     01 00 00 FF 
0862c     00 26 0E F2 | 	cmp	local05, ##512 wz
08630     3C 00 90 AD |  if_e	jmp	#LR__0711
08634     01 00 00 FF 
08638     01 26 0E F2 | 	cmp	local05, ##513 wz
0863c     88 01 90 AD |  if_e	jmp	#LR__0714
08640     01 00 00 FF 
08644     02 26 0E F2 | 	cmp	local05, ##514 wz
08648     84 02 90 AD |  if_e	jmp	#LR__0715
0864c     01 00 00 FF 
08650     03 26 0E F2 | 	cmp	local05, ##515 wz
08654     E8 03 90 AD |  if_e	jmp	#LR__0718
08658     01 00 00 FF 
0865c     04 26 0E F2 | 	cmp	local05, ##516 wz
08660     E0 05 90 AD |  if_e	jmp	#LR__0723
08664     15 26 0E F2 | 	cmp	local05, #21 wz
08668     00 06 90 AD |  if_e	jmp	#LR__0724
0866c     70 06 90 FD | 	jmp	#LR__0725
08670                 | LR__0711
08670                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
08670     01 24 0E F2 | 	cmp	local04, #1 wz
08674     3C 00 90 5D |  if_ne	jmp	#LR__0712
08678     56 00 00 FF 
0867c     18 E4 05 F1 | 	add	objptr, ##44056
08680     F2 26 02 FB | 	rdlong	local05, objptr
08684     03 26 66 F0 | 	shl	local05, #3
08688     02 00 00 FF 
0868c     38 E4 85 F1 | 	sub	objptr, ##1080
08690     F2 26 02 F1 | 	add	local05, objptr
08694     13 13 02 FB | 	rdlong	arg01, local05
08698     00 14 06 F6 | 	mov	arg02, #0
0869c     53 00 00 FF 
086a0     E0 E5 85 F1 | 	sub	objptr, ##42976
086a4     7C 32 B1 FD | 	call	#__system____builtin_atoi
086a8     FD 24 02 FD | 	qmul	local04, result1
086ac     18 1E 62 FD | 	getqx	local01
086b0     1D 22 06 F6 | 	mov	local03, #29
086b4                 | LR__0712
086b4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
086b4     FF FF 7F FF 
086b8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
086bc     3C 00 90 5D |  if_ne	jmp	#LR__0713
086c0     56 00 00 FF 
086c4     18 E4 05 F1 | 	add	objptr, ##44056
086c8     F2 26 02 FB | 	rdlong	local05, objptr
086cc     03 26 66 F0 | 	shl	local05, #3
086d0     02 00 00 FF 
086d4     38 E4 85 F1 | 	sub	objptr, ##1080
086d8     F2 26 02 F1 | 	add	local05, objptr
086dc     13 13 02 FB | 	rdlong	arg01, local05
086e0     00 14 06 F6 | 	mov	arg02, #0
086e4     53 00 00 FF 
086e8     E0 E5 85 F1 | 	sub	objptr, ##42976
086ec     34 32 B1 FD | 	call	#__system____builtin_atoi
086f0     FD 24 02 FD | 	qmul	local04, result1
086f4     18 1E 62 FD | 	getqx	local01
086f8     1C 22 06 F6 | 	mov	local03, #28
086fc                 | LR__0713
086fc     0F 29 02 F6 | 	mov	local06, local01
08700     10 2B 02 F6 | 	mov	local07, local02
08704     11 27 02 F6 | 	mov	local05, local03
08708     69 00 00 FF 
0870c     50 E4 05 F1 | 	add	objptr, ##53840
08710     F2 1E 02 FB | 	rdlong	local01, objptr
08714     0F 25 02 F6 | 	mov	local04, local01
08718     01 24 66 F0 | 	shl	local04, #1
0871c     0F 25 02 F1 | 	add	local04, local01
08720     02 24 66 F0 | 	shl	local04, #2
08724     03 00 00 FF 
08728     00 E4 85 F1 | 	sub	objptr, ##1536
0872c     F2 24 02 F1 | 	add	local04, objptr
08730     12 29 62 FC | 	wrlong	local06, local04
08734     03 00 00 FF 
08738     00 E4 05 F1 | 	add	objptr, ##1536
0873c     F2 28 02 FB | 	rdlong	local06, objptr
08740     14 1F 02 F6 | 	mov	local01, local06
08744     01 1E 66 F0 | 	shl	local01, #1
08748     14 1F 02 F1 | 	add	local01, local06
0874c     02 1E 66 F0 | 	shl	local01, #2
08750     03 00 00 FF 
08754     00 E4 85 F1 | 	sub	objptr, ##1536
08758     F2 1E 02 F1 | 	add	local01, objptr
0875c     04 1E 06 F1 | 	add	local01, #4
08760     0F 2B 62 FC | 	wrlong	local07, local01
08764     03 00 00 FF 
08768     00 E4 05 F1 | 	add	objptr, ##1536
0876c     F2 2A 02 FB | 	rdlong	local07, objptr
08770     15 29 02 F6 | 	mov	local06, local07
08774     01 28 66 F0 | 	shl	local06, #1
08778     15 29 02 F1 | 	add	local06, local07
0877c     02 28 66 F0 | 	shl	local06, #2
08780     03 00 00 FF 
08784     00 E4 85 F1 | 	sub	objptr, ##1536
08788     F2 28 02 F1 | 	add	local06, objptr
0878c     08 28 06 F1 | 	add	local06, #8
08790     14 27 62 FC | 	wrlong	local05, local06
08794     03 00 00 FF 
08798     00 E4 05 F1 | 	add	objptr, ##1536
0879c     F2 28 02 FB | 	rdlong	local06, objptr
087a0     01 28 06 F1 | 	add	local06, #1
087a4     F2 28 62 FC | 	wrlong	local06, objptr
087a8     13 00 00 FF 
087ac     38 E4 85 F1 | 	sub	objptr, ##9784
087b0     F2 28 02 FB | 	rdlong	local06, objptr
087b4     01 28 06 F1 | 	add	local06, #1
087b8     F2 28 62 FC | 	wrlong	local06, objptr
087bc     56 00 00 FF 
087c0     18 E4 85 F1 | 	sub	objptr, ##44056
087c4     3C 05 90 FD | 	jmp	#LR__0726
087c8                 | LR__0714
087c8     56 00 00 FF 
087cc     18 E4 05 F1 | 	add	objptr, ##44056
087d0     F2 28 02 FB | 	rdlong	local06, objptr
087d4     03 28 66 F0 | 	shl	local06, #3
087d8     02 00 00 FF 
087dc     38 E4 85 F1 | 	sub	objptr, ##1080
087e0     F2 28 02 F1 | 	add	local06, objptr
087e4     14 13 02 FB | 	rdlong	arg01, local06
087e8     00 14 06 F6 | 	mov	arg02, #0
087ec     53 00 00 FF 
087f0     E0 E5 85 F1 | 	sub	objptr, ##42976
087f4     2C 31 B1 FD | 	call	#__system____builtin_atoi
087f8     FD 24 02 FD | 	qmul	local04, result1
087fc     69 00 00 FF 
08800     50 E4 05 F1 | 	add	objptr, ##53840
08804     F2 28 02 FB | 	rdlong	local06, objptr
08808     14 2D 02 F6 | 	mov	local08, local06
0880c     01 2C 66 F0 | 	shl	local08, #1
08810     14 2D 02 F1 | 	add	local08, local06
08814     02 2C 66 F0 | 	shl	local08, #2
08818     03 00 00 FF 
0881c     00 E4 85 F1 | 	sub	objptr, ##1536
08820     F2 2C 02 F1 | 	add	local08, objptr
08824     03 00 00 FF 
08828     00 E4 05 F1 | 	add	objptr, ##1536
0882c     18 1E 62 FD | 	getqx	local01
08830     1C 22 06 F6 | 	mov	local03, #28
08834     0F 29 02 F6 | 	mov	local06, local01
08838     10 2B 02 F6 | 	mov	local07, local02
0883c     16 29 62 FC | 	wrlong	local06, local08
08840     11 2D 02 F6 | 	mov	local08, local03
08844     F2 28 02 FB | 	rdlong	local06, objptr
08848     14 27 02 F6 | 	mov	local05, local06
0884c     01 26 66 F0 | 	shl	local05, #1
08850     14 27 02 F1 | 	add	local05, local06
08854     02 26 66 F0 | 	shl	local05, #2
08858     03 00 00 FF 
0885c     00 E4 85 F1 | 	sub	objptr, ##1536
08860     F2 26 02 F1 | 	add	local05, objptr
08864     04 26 06 F1 | 	add	local05, #4
08868     13 2B 62 FC | 	wrlong	local07, local05
0886c     03 00 00 FF 
08870     00 E4 05 F1 | 	add	objptr, ##1536
08874     F2 2A 02 FB | 	rdlong	local07, objptr
08878     15 29 02 F6 | 	mov	local06, local07
0887c     01 28 66 F0 | 	shl	local06, #1
08880     15 29 02 F1 | 	add	local06, local07
08884     02 28 66 F0 | 	shl	local06, #2
08888     03 00 00 FF 
0888c     00 E4 85 F1 | 	sub	objptr, ##1536
08890     F2 28 02 F1 | 	add	local06, objptr
08894     08 28 06 F1 | 	add	local06, #8
08898     14 2D 62 FC | 	wrlong	local08, local06
0889c     03 00 00 FF 
088a0     00 E4 05 F1 | 	add	objptr, ##1536
088a4     F2 28 02 FB | 	rdlong	local06, objptr
088a8     01 28 06 F1 | 	add	local06, #1
088ac     F2 28 62 FC | 	wrlong	local06, objptr
088b0     13 00 00 FF 
088b4     38 E4 85 F1 | 	sub	objptr, ##9784
088b8     F2 28 02 FB | 	rdlong	local06, objptr
088bc     01 28 06 F1 | 	add	local06, #1
088c0     F2 28 62 FC | 	wrlong	local06, objptr
088c4     56 00 00 FF 
088c8     18 E4 85 F1 | 	sub	objptr, ##44056
088cc     34 04 90 FD | 	jmp	#LR__0726
088d0                 | LR__0715
088d0                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
088d0     01 24 0E F2 | 	cmp	local04, #1 wz
088d4     48 00 90 5D |  if_ne	jmp	#LR__0716
088d8     00 C0 1F FF 
088dc     00 28 06 F6 | 	mov	local06, ##1065353216
088e0     56 00 00 FF 
088e4     18 E4 05 F1 | 	add	objptr, ##44056
088e8     F2 2C 02 FB | 	rdlong	local08, objptr
088ec     03 2C 66 F0 | 	shl	local08, #3
088f0     02 00 00 FF 
088f4     38 E4 85 F1 | 	sub	objptr, ##1080
088f8     F2 2C 02 F1 | 	add	local08, objptr
088fc     16 13 02 FB | 	rdlong	arg01, local08
08900     53 00 00 FF 
08904     E0 E5 85 F1 | 	sub	objptr, ##42976
08908     88 31 B1 FD | 	call	#__system____builtin_atof
0890c     FD 14 02 F6 | 	mov	arg02, result1
08910     14 13 02 F6 | 	mov	arg01, local06
08914     94 29 B1 FD | 	call	#__system___float_mul
08918     FD 1E 02 F6 | 	mov	local01, result1
0891c     1E 22 06 F6 | 	mov	local03, #30
08920                 | LR__0716
08920                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
08920     FF FF 7F FF 
08924     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08928     48 00 90 5D |  if_ne	jmp	#LR__0717
0892c     00 C0 5F FF 
08930     00 28 06 F6 | 	mov	local06, ##-1082130432
08934     56 00 00 FF 
08938     18 E4 05 F1 | 	add	objptr, ##44056
0893c     F2 2C 02 FB | 	rdlong	local08, objptr
08940     03 2C 66 F0 | 	shl	local08, #3
08944     02 00 00 FF 
08948     38 E4 85 F1 | 	sub	objptr, ##1080
0894c     F2 2C 02 F1 | 	add	local08, objptr
08950     16 13 02 FB | 	rdlong	arg01, local08
08954     53 00 00 FF 
08958     E0 E5 85 F1 | 	sub	objptr, ##42976
0895c     34 31 B1 FD | 	call	#__system____builtin_atof
08960     FD 14 02 F6 | 	mov	arg02, result1
08964     14 13 02 F6 | 	mov	arg01, local06
08968     40 29 B1 FD | 	call	#__system___float_mul
0896c     FD 1E 02 F6 | 	mov	local01, result1
08970     1E 22 06 F6 | 	mov	local03, #30
08974                 | LR__0717
08974     0F 29 02 F6 | 	mov	local06, local01
08978     10 2B 02 F6 | 	mov	local07, local02
0897c     11 27 02 F6 | 	mov	local05, local03
08980     69 00 00 FF 
08984     50 E4 05 F1 | 	add	objptr, ##53840
08988     F2 1E 02 FB | 	rdlong	local01, objptr
0898c     0F 2D 02 F6 | 	mov	local08, local01
08990     01 2C 66 F0 | 	shl	local08, #1
08994     0F 2D 02 F1 | 	add	local08, local01
08998     02 2C 66 F0 | 	shl	local08, #2
0899c     03 00 00 FF 
089a0     00 E4 85 F1 | 	sub	objptr, ##1536
089a4     F2 2C 02 F1 | 	add	local08, objptr
089a8     16 29 62 FC | 	wrlong	local06, local08
089ac     03 00 00 FF 
089b0     00 E4 05 F1 | 	add	objptr, ##1536
089b4     F2 2C 02 FB | 	rdlong	local08, objptr
089b8     16 29 02 F6 | 	mov	local06, local08
089bc     01 28 66 F0 | 	shl	local06, #1
089c0     16 29 02 F1 | 	add	local06, local08
089c4     02 28 66 F0 | 	shl	local06, #2
089c8     03 00 00 FF 
089cc     00 E4 85 F1 | 	sub	objptr, ##1536
089d0     F2 28 02 F1 | 	add	local06, objptr
089d4     04 28 06 F1 | 	add	local06, #4
089d8     14 2B 62 FC | 	wrlong	local07, local06
089dc     03 00 00 FF 
089e0     00 E4 05 F1 | 	add	objptr, ##1536
089e4     F2 2C 02 FB | 	rdlong	local08, objptr
089e8     16 2B 02 F6 | 	mov	local07, local08
089ec     01 2A 66 F0 | 	shl	local07, #1
089f0     16 2B 02 F1 | 	add	local07, local08
089f4     02 2A 66 F0 | 	shl	local07, #2
089f8     03 00 00 FF 
089fc     00 E4 85 F1 | 	sub	objptr, ##1536
08a00     F2 2A 02 F1 | 	add	local07, objptr
08a04     08 2A 06 F1 | 	add	local07, #8
08a08     15 27 62 FC | 	wrlong	local05, local07
08a0c     03 00 00 FF 
08a10     00 E4 05 F1 | 	add	objptr, ##1536
08a14     F2 28 02 FB | 	rdlong	local06, objptr
08a18     01 28 06 F1 | 	add	local06, #1
08a1c     F2 28 62 FC | 	wrlong	local06, objptr
08a20     13 00 00 FF 
08a24     38 E4 85 F1 | 	sub	objptr, ##9784
08a28     F2 28 02 FB | 	rdlong	local06, objptr
08a2c     01 28 06 F1 | 	add	local06, #1
08a30     F2 28 62 FC | 	wrlong	local06, objptr
08a34     56 00 00 FF 
08a38     18 E4 85 F1 | 	sub	objptr, ##44056
08a3c     C4 02 90 FD | 	jmp	#LR__0726
08a40                 | LR__0718
08a40     1F 22 06 F6 | 	mov	local03, #31
08a44     56 00 00 FF 
08a48     18 E4 05 F1 | 	add	objptr, ##44056
08a4c     F2 16 02 FB | 	rdlong	arg03, objptr
08a50     03 16 66 F0 | 	shl	arg03, #3
08a54     02 00 00 FF 
08a58     38 E4 85 F1 | 	sub	objptr, ##1080
08a5c     F2 16 02 F1 | 	add	arg03, objptr
08a60     0B 13 02 FB | 	rdlong	arg01, arg03
08a64     53 00 00 FF 
08a68     E0 E5 85 F1 | 	sub	objptr, ##42976
08a6c     09 2F 02 F6 | 	mov	local09, arg01
08a70     97 06 48 FB | 	callpa	#(@LR__0720-@LR__0719)>>2,fcache_load_ptr_
08a74                 | LR__0719
08a74     17 FB C9 FA | 	rdbyte	result1, local09 wz
08a78     01 2E 06 51 |  if_ne	add	local09, #1
08a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0719
08a80                 | LR__0720
08a80     09 2F 82 F1 | 	sub	local09, arg01
08a84     17 FB 01 F6 | 	mov	result1, local09
08a88     7A 00 00 FF 
08a8c     7C E4 05 F1 | 	add	objptr, ##62588
08a90     F2 FA 61 FC | 	wrlong	result1, objptr
08a94     30 E4 85 F1 | 	sub	objptr, #48
08a98     F2 12 02 FB | 	rdlong	arg01, objptr
08a9c     FD 12 82 F1 | 	sub	arg01, result1
08aa0     04 12 86 F1 | 	sub	arg01, #4
08aa4     03 12 26 F5 | 	andn	arg01, #3
08aa8     F2 12 62 FC | 	wrlong	arg01, objptr
08aac     30 E4 05 F1 | 	add	objptr, #48
08ab0     F2 14 02 FB | 	rdlong	arg02, objptr
08ab4     01 16 06 F6 | 	mov	arg03, #1
08ab8     00 18 06 F6 | 	mov	arg04, #0
08abc     6E 00 00 FF 
08ac0     BC E5 85 F1 | 	sub	objptr, ##56764
08ac4                 | '     return fill(addr, pattern, count, listPtr, 4)
08ac4     04 1A 06 F6 | 	mov	arg05, #4
08ac8     44 F4 B0 FD | 	call	#_psram_spin2_fill
08acc                 | '     pslpoke memtop,l
08acc                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08acc     01 30 06 F6 | 	mov	local10, #1
08ad0     6E 00 00 FF 
08ad4     BC E5 05 F1 | 	add	objptr, ##56764
08ad8     F2 32 02 FB | 	rdlong	local11, objptr
08adc     7A 00 00 FF 
08ae0     7C E4 85 F1 | 	sub	objptr, ##62588
08ae4     01 32 06 F1 | 	add	local11, #1
08ae8                 | LR__0721
08ae8     19 31 52 F2 | 	cmps	local10, local11 wc
08aec     78 00 90 3D |  if_ae	jmp	#LR__0722
08af0     7A 00 00 FF 
08af4     4C E4 05 F1 | 	add	objptr, ##62540
08af8     F2 2A 02 FB | 	rdlong	local07, objptr
08afc     03 2A 06 F1 | 	add	local07, #3
08b00     18 2B 02 F1 | 	add	local07, local10
08b04     24 00 00 FF 
08b08     34 E4 85 F1 | 	sub	objptr, ##18484
08b0c     F2 2C 02 FB | 	rdlong	local08, objptr
08b10     03 2C 66 F0 | 	shl	local08, #3
08b14     02 00 00 FF 
08b18     38 E4 85 F1 | 	sub	objptr, ##1080
08b1c     F2 2C 02 F1 | 	add	local08, objptr
08b20     16 13 02 FB | 	rdlong	arg01, local08
08b24     18 15 02 F6 | 	mov	arg02, local10
08b28     01 16 06 F6 | 	mov	arg03, #1
08b2c     53 00 00 FF 
08b30     E0 E5 85 F1 | 	sub	objptr, ##42976
08b34     B4 1E B1 FD | 	call	#__system__Mid_S
08b38     FD 14 C2 FA | 	rdbyte	arg02, result1
08b3c     15 13 02 F6 | 	mov	arg01, local07
08b40     01 16 06 F6 | 	mov	arg03, #1
08b44     00 18 06 F6 | 	mov	arg04, #0
08b48     0B 00 00 FF 
08b4c     C0 E4 05 F1 | 	add	objptr, ##5824
08b50                 | '     return fill(addr, pattern, count, listPtr, 1)
08b50     01 1A 06 F6 | 	mov	arg05, #1
08b54     B8 F3 B0 FD | 	call	#_psram_spin2_fill
08b58     0B 00 00 FF 
08b5c     C0 E4 85 F1 | 	sub	objptr, ##5824
08b60     01 30 06 F1 | 	add	local10, #1
08b64     80 FF 9F FD | 	jmp	#LR__0721
08b68                 | LR__0722
08b68     7A 00 00 FF 
08b6c     4C E4 05 F1 | 	add	objptr, ##62540
08b70     F2 1E 02 FB | 	rdlong	local01, objptr
08b74     2B 22 06 F6 | 	mov	local03, #43
08b78     0F 29 02 F6 | 	mov	local06, local01
08b7c     10 2B 02 F6 | 	mov	local07, local02
08b80     11 33 02 F6 | 	mov	local11, local03
08b84     10 00 00 FF 
08b88     FC E5 85 F1 | 	sub	objptr, ##8700
08b8c     F2 30 02 FB | 	rdlong	local10, objptr
08b90     18 2D 02 F6 | 	mov	local08, local10
08b94     01 2C 66 F0 | 	shl	local08, #1
08b98     18 2D 02 F1 | 	add	local08, local10
08b9c     02 2C 66 F0 | 	shl	local08, #2
08ba0     03 00 00 FF 
08ba4     00 E4 85 F1 | 	sub	objptr, ##1536
08ba8     F2 2C 02 F1 | 	add	local08, objptr
08bac     16 29 62 FC | 	wrlong	local06, local08
08bb0     03 00 00 FF 
08bb4     00 E4 05 F1 | 	add	objptr, ##1536
08bb8     F2 30 02 FB | 	rdlong	local10, objptr
08bbc     18 2D 02 F6 | 	mov	local08, local10
08bc0     01 2C 66 F0 | 	shl	local08, #1
08bc4     18 2D 02 F1 | 	add	local08, local10
08bc8     02 2C 66 F0 | 	shl	local08, #2
08bcc     03 00 00 FF 
08bd0     00 E4 85 F1 | 	sub	objptr, ##1536
08bd4     F2 2C 02 F1 | 	add	local08, objptr
08bd8     04 2C 06 F1 | 	add	local08, #4
08bdc     16 2B 62 FC | 	wrlong	local07, local08
08be0     03 00 00 FF 
08be4     00 E4 05 F1 | 	add	objptr, ##1536
08be8     F2 30 02 FB | 	rdlong	local10, objptr
08bec     18 2D 02 F6 | 	mov	local08, local10
08bf0     01 2C 66 F0 | 	shl	local08, #1
08bf4     18 2D 02 F1 | 	add	local08, local10
08bf8     02 2C 66 F0 | 	shl	local08, #2
08bfc     03 00 00 FF 
08c00     00 E4 85 F1 | 	sub	objptr, ##1536
08c04     F2 2C 02 F1 | 	add	local08, objptr
08c08     08 2C 06 F1 | 	add	local08, #8
08c0c     16 33 62 FC | 	wrlong	local11, local08
08c10     03 00 00 FF 
08c14     00 E4 05 F1 | 	add	objptr, ##1536
08c18     F2 28 02 FB | 	rdlong	local06, objptr
08c1c     01 28 06 F1 | 	add	local06, #1
08c20     F2 28 62 FC | 	wrlong	local06, objptr
08c24     13 00 00 FF 
08c28     38 E4 85 F1 | 	sub	objptr, ##9784
08c2c     F2 28 02 FB | 	rdlong	local06, objptr
08c30     01 28 06 F1 | 	add	local06, #1
08c34     F2 28 62 FC | 	wrlong	local06, objptr
08c38     56 00 00 FF 
08c3c     18 E4 85 F1 | 	sub	objptr, ##44056
08c40     C0 00 90 FD | 	jmp	#LR__0726
08c44                 | LR__0723
08c44     12 13 02 F6 | 	mov	arg01, local04
08c48     B8 03 B0 FD | 	call	#_getvar
08c4c     56 00 00 FF 
08c50     18 E4 05 F1 | 	add	objptr, ##44056
08c54     F2 28 02 FB | 	rdlong	local06, objptr
08c58     01 28 06 F1 | 	add	local06, #1
08c5c     F2 28 62 FC | 	wrlong	local06, objptr
08c60     56 00 00 FF 
08c64     18 E4 85 F1 | 	sub	objptr, ##44056
08c68     98 00 90 FD | 	jmp	#LR__0726
08c6c                 | LR__0724
08c6c     56 00 00 FF 
08c70     18 E4 05 F1 | 	add	objptr, ##44056
08c74     F2 28 02 FB | 	rdlong	local06, objptr
08c78     01 28 06 F1 | 	add	local06, #1
08c7c     F2 28 62 FC | 	wrlong	local06, objptr
08c80     56 00 00 FF 
08c84     18 E4 85 F1 | 	sub	objptr, ##44056
08c88     F4 F3 BF FD | 	call	#_expr
08c8c                 | '     ct+=1
08c8c                 | '     expr() 
08c8c                 | '     if lparts(ct).token=token_rpar then ct+=1
08c8c     56 00 00 FF 
08c90     18 E4 05 F1 | 	add	objptr, ##44056
08c94     F2 32 02 FB | 	rdlong	local11, objptr
08c98     03 32 66 F0 | 	shl	local11, #3
08c9c     02 00 00 FF 
08ca0     38 E4 85 F1 | 	sub	objptr, ##1080
08ca4     F2 32 02 F1 | 	add	local11, objptr
08ca8     04 32 06 F1 | 	add	local11, #4
08cac     19 33 02 FB | 	rdlong	local11, local11
08cb0     14 32 0E F2 | 	cmp	local11, #20 wz
08cb4     53 00 00 FF 
08cb8     E0 E5 85 F1 | 	sub	objptr, ##42976
08cbc     44 00 90 5D |  if_ne	jmp	#LR__0726
08cc0     56 00 00 FF 
08cc4     18 E4 05 F1 | 	add	objptr, ##44056
08cc8     F2 28 02 FB | 	rdlong	local06, objptr
08ccc     01 28 06 F1 | 	add	local06, #1
08cd0     F2 28 62 FC | 	wrlong	local06, objptr
08cd4     56 00 00 FF 
08cd8     18 E4 85 F1 | 	sub	objptr, ##44056
08cdc     24 00 90 FD | 	jmp	#LR__0726
08ce0                 | LR__0725
08ce0     12 13 02 F6 | 	mov	arg01, local04
08ce4     28 00 B0 FD | 	call	#_getfun
08ce8     56 00 00 FF 
08cec     18 E4 05 F1 | 	add	objptr, ##44056
08cf0     F2 28 02 FB | 	rdlong	local06, objptr
08cf4     01 28 06 F1 | 	add	local06, #1
08cf8     F2 28 62 FC | 	wrlong	local06, objptr
08cfc     56 00 00 FF 
08d00     18 E4 85 F1 | 	sub	objptr, ##44056
08d04                 | LR__0726
08d04     A7 F0 03 F6 | 	mov	ptra, fp
08d08     B2 00 A0 FD | 	call	#popregs_
08d0c                 | _getvalue_ret
08d0c     2D 00 64 FD | 	ret
08d10                 | 
08d10                 | ' 
08d10                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
08d10                 | _getfun
08d10     0A 4A 05 F6 | 	mov	COUNT_, #10
08d14     A8 00 A0 FD | 	call	#pushregs_
08d18                 | _getfun_enter
08d18     09 25 02 F6 | 	mov	local04, arg01
08d1c     56 00 00 FF 
08d20     18 E4 05 F1 | 	add	objptr, ##44056
08d24     F2 26 02 FB | 	rdlong	local05, objptr
08d28     13 29 02 F6 | 	mov	local06, local05
08d2c     00 2A 06 F6 | 	mov	local07, #0
08d30                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08d30                 | ' oldct=ct
08d30                 | ' numpar=0
08d30                 | '   
08d30                 | ' if lparts(ct+1).token=token_lpar then
08d30     01 26 06 F1 | 	add	local05, #1
08d34     03 26 66 F0 | 	shl	local05, #3
08d38     02 00 00 FF 
08d3c     38 E4 85 F1 | 	sub	objptr, ##1080
08d40     F2 26 02 F1 | 	add	local05, objptr
08d44     04 26 06 F1 | 	add	local05, #4
08d48     13 27 02 FB | 	rdlong	local05, local05
08d4c     15 26 0E F2 | 	cmp	local05, #21 wz
08d50     53 00 00 FF 
08d54     E0 E5 85 F1 | 	sub	objptr, ##42976
08d58     08 01 90 5D |  if_ne	jmp	#LR__0734
08d5c     56 00 00 FF 
08d60     18 E4 05 F1 | 	add	objptr, ##44056
08d64     F2 2C 02 FB | 	rdlong	local08, objptr
08d68     01 2C 06 F1 | 	add	local08, #1
08d6c     F2 2C 62 FC | 	wrlong	local08, objptr
08d70     56 00 00 FF 
08d74     18 E4 85 F1 | 	sub	objptr, ##44056
08d78                 | '   ct+=1 											' omit this lpar, this is for expr list
08d78                 | '   do
08d78                 | LR__0730
08d78     56 00 00 FF 
08d7c     18 E4 05 F1 | 	add	objptr, ##44056
08d80     F2 26 02 FB | 	rdlong	local05, objptr
08d84     01 26 06 F1 | 	add	local05, #1
08d88     F2 26 62 FC | 	wrlong	local05, objptr
08d8c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08d8c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08d8c     03 26 66 F0 | 	shl	local05, #3
08d90     02 00 00 FF 
08d94     38 E4 85 F1 | 	sub	objptr, ##1080
08d98     F2 26 02 F1 | 	add	local05, objptr
08d9c     04 26 06 F1 | 	add	local05, #4
08da0     13 2D 02 FB | 	rdlong	local08, local05
08da4     15 2C 0E F2 | 	cmp	local08, #21 wz
08da8     53 00 00 FF 
08dac     E0 E5 85 F1 | 	sub	objptr, ##42976
08db0     40 00 90 5D |  if_ne	jmp	#LR__0731
08db4     56 00 00 FF 
08db8     18 E4 05 F1 | 	add	objptr, ##44056
08dbc     F2 2C 02 FB | 	rdlong	local08, objptr
08dc0     01 2C 06 F1 | 	add	local08, #1
08dc4     F2 2C 62 FC | 	wrlong	local08, objptr
08dc8     56 00 00 FF 
08dcc     18 E4 85 F1 | 	sub	objptr, ##44056
08dd0     AC F2 BF FD | 	call	#_expr
08dd4     56 00 00 FF 
08dd8     18 E4 05 F1 | 	add	objptr, ##44056
08ddc     F2 2C 02 FB | 	rdlong	local08, objptr
08de0     01 2C 06 F1 | 	add	local08, #1
08de4     F2 2C 62 FC | 	wrlong	local08, objptr
08de8     56 00 00 FF 
08dec     18 E4 85 F1 | 	sub	objptr, ##44056
08df0     04 00 90 FD | 	jmp	#LR__0732
08df4                 | LR__0731
08df4     88 F2 BF FD | 	call	#_expr
08df8                 | LR__0732
08df8     01 2A 06 F1 | 	add	local07, #1
08dfc     56 00 00 FF 
08e00     18 E4 05 F1 | 	add	objptr, ##44056
08e04     F2 26 02 FB | 	rdlong	local05, objptr
08e08     03 26 66 F0 | 	shl	local05, #3
08e0c     02 00 00 FF 
08e10     38 E4 85 F1 | 	sub	objptr, ##1080
08e14     F2 26 02 F1 | 	add	local05, objptr
08e18     04 26 06 F1 | 	add	local05, #4
08e1c     13 2D 02 FB | 	rdlong	local08, local05
08e20     14 2C 0E F2 | 	cmp	local08, #20 wz
08e24     53 00 00 FF 
08e28     E0 E5 85 F1 | 	sub	objptr, ##42976
08e2c     34 00 90 AD |  if_e	jmp	#LR__0733
08e30     56 00 00 FF 
08e34     18 E4 05 F1 | 	add	objptr, ##44056
08e38     F2 2C 02 FB | 	rdlong	local08, objptr
08e3c     03 2C 66 F0 | 	shl	local08, #3
08e40     02 00 00 FF 
08e44     38 E4 85 F1 | 	sub	objptr, ##1080
08e48     F2 2C 02 F1 | 	add	local08, objptr
08e4c     04 2C 06 F1 | 	add	local08, #4
08e50     16 2D 02 FB | 	rdlong	local08, local08
08e54     FE 2D 0E F2 | 	cmp	local08, #510 wz
08e58     53 00 00 FF 
08e5c     E0 E5 85 F1 | 	sub	objptr, ##42976
08e60     14 FF 9F 5D |  if_ne	jmp	#LR__0730
08e64                 | LR__0733
08e64                 | LR__0734
08e64     15 1F 02 F6 | 	mov	local01, local07
08e68     03 28 66 F0 | 	shl	local06, #3
08e6c     53 00 00 FF 
08e70     E0 E5 05 F1 | 	add	objptr, ##42976
08e74     F2 28 02 F1 | 	add	local06, objptr
08e78     04 28 06 F1 | 	add	local06, #4
08e7c     14 23 02 FB | 	rdlong	local03, local06
08e80     0F 2D 02 F6 | 	mov	local08, local01
08e84     10 2B 02 F6 | 	mov	local07, local02
08e88     11 29 02 F6 | 	mov	local06, local03
08e8c     15 00 00 FF 
08e90     70 E4 05 F1 | 	add	objptr, ##10864
08e94     F2 26 02 FB | 	rdlong	local05, objptr
08e98     13 13 02 F6 | 	mov	arg01, local05
08e9c     01 12 66 F0 | 	shl	arg01, #1
08ea0     13 13 02 F1 | 	add	arg01, local05
08ea4     02 12 66 F0 | 	shl	arg01, #2
08ea8     03 00 00 FF 
08eac     00 E4 85 F1 | 	sub	objptr, ##1536
08eb0     F2 12 02 F1 | 	add	arg01, objptr
08eb4     09 2D 62 FC | 	wrlong	local08, arg01
08eb8     03 00 00 FF 
08ebc     00 E4 05 F1 | 	add	objptr, ##1536
08ec0     F2 2C 02 FB | 	rdlong	local08, objptr
08ec4     16 2F 02 F6 | 	mov	local09, local08
08ec8     01 2E 66 F0 | 	shl	local09, #1
08ecc     16 2F 02 F1 | 	add	local09, local08
08ed0     02 2E 66 F0 | 	shl	local09, #2
08ed4     03 00 00 FF 
08ed8     00 E4 85 F1 | 	sub	objptr, ##1536
08edc     F2 2E 02 F1 | 	add	local09, objptr
08ee0     04 2E 06 F1 | 	add	local09, #4
08ee4     17 2B 62 FC | 	wrlong	local07, local09
08ee8     03 00 00 FF 
08eec     00 E4 05 F1 | 	add	objptr, ##1536
08ef0     F2 2C 02 FB | 	rdlong	local08, objptr
08ef4     16 31 02 F6 | 	mov	local10, local08
08ef8     01 30 66 F0 | 	shl	local10, #1
08efc     16 31 02 F1 | 	add	local10, local08
08f00     02 30 66 F0 | 	shl	local10, #2
08f04     03 00 00 FF 
08f08     00 E4 85 F1 | 	sub	objptr, ##1536
08f0c     F2 30 02 F1 | 	add	local10, objptr
08f10     08 30 06 F1 | 	add	local10, #8
08f14     18 29 62 FC | 	wrlong	local06, local10
08f18     03 00 00 FF 
08f1c     00 E4 05 F1 | 	add	objptr, ##1536
08f20     F2 2C 02 FB | 	rdlong	local08, objptr
08f24     01 2C 06 F1 | 	add	local08, #1
08f28     F2 2C 62 FC | 	wrlong	local08, objptr
08f2c     69 00 00 FF 
08f30     50 E4 85 F1 | 	sub	objptr, ##53840
08f34                 | ' 
08f34                 | ' t2.result.uresult=numpar
08f34                 | ' 
08f34                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08f34                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08f34                 | ' 
08f34                 | '   
08f34                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08f34     FF FF 7F FF 
08f38     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08f3c     B8 00 90 5D |  if_ne	jmp	#LR__0735
08f40     15 22 06 F6 | 	mov	local03, #21
08f44     0F 2D 02 F6 | 	mov	local08, local01
08f48     10 2B 02 F6 | 	mov	local07, local02
08f4c     11 29 02 F6 | 	mov	local06, local03
08f50     69 00 00 FF 
08f54     50 E4 05 F1 | 	add	objptr, ##53840
08f58     F2 26 02 FB | 	rdlong	local05, objptr
08f5c     13 13 02 F6 | 	mov	arg01, local05
08f60     01 12 66 F0 | 	shl	arg01, #1
08f64     13 13 02 F1 | 	add	arg01, local05
08f68     02 12 66 F0 | 	shl	arg01, #2
08f6c     03 00 00 FF 
08f70     00 E4 85 F1 | 	sub	objptr, ##1536
08f74     F2 12 02 F1 | 	add	arg01, objptr
08f78     09 2D 62 FC | 	wrlong	local08, arg01
08f7c     03 00 00 FF 
08f80     00 E4 05 F1 | 	add	objptr, ##1536
08f84     F2 30 02 FB | 	rdlong	local10, objptr
08f88     18 2F 02 F6 | 	mov	local09, local10
08f8c     01 2E 66 F0 | 	shl	local09, #1
08f90     18 2F 02 F1 | 	add	local09, local10
08f94     02 2E 66 F0 | 	shl	local09, #2
08f98     03 00 00 FF 
08f9c     00 E4 85 F1 | 	sub	objptr, ##1536
08fa0     F2 2E 02 F1 | 	add	local09, objptr
08fa4     04 2E 06 F1 | 	add	local09, #4
08fa8     17 2B 62 FC | 	wrlong	local07, local09
08fac     03 00 00 FF 
08fb0     00 E4 05 F1 | 	add	objptr, ##1536
08fb4     F2 2E 02 FB | 	rdlong	local09, objptr
08fb8     17 31 02 F6 | 	mov	local10, local09
08fbc     01 30 66 F0 | 	shl	local10, #1
08fc0     17 31 02 F1 | 	add	local10, local09
08fc4     02 30 66 F0 | 	shl	local10, #2
08fc8     03 00 00 FF 
08fcc     00 E4 85 F1 | 	sub	objptr, ##1536
08fd0     F2 30 02 F1 | 	add	local10, objptr
08fd4     08 30 06 F1 | 	add	local10, #8
08fd8     18 29 62 FC | 	wrlong	local06, local10
08fdc     03 00 00 FF 
08fe0     00 E4 05 F1 | 	add	objptr, ##1536
08fe4     F2 2C 02 FB | 	rdlong	local08, objptr
08fe8     01 2C 06 F1 | 	add	local08, #1
08fec     F2 2C 62 FC | 	wrlong	local08, objptr
08ff0     69 00 00 FF 
08ff4     50 E4 85 F1 | 	sub	objptr, ##53840
08ff8                 | LR__0735
08ff8     A7 F0 03 F6 | 	mov	ptra, fp
08ffc     B2 00 A0 FD | 	call	#popregs_
09000                 | _getfun_ret
09000     2D 00 64 FD | 	ret
09004                 | 
09004                 | '   
09004                 | '   
09004                 | ' sub getvar(m as integer) 
09004                 | _getvar
09004     0A 4A 05 F6 | 	mov	COUNT_, #10
09008     A8 00 A0 FD | 	call	#pushregs_
0900c                 | _getvar_enter
0900c     09 25 02 F6 | 	mov	local04, arg01
09010     56 00 00 FF 
09014     18 E4 05 F1 | 	add	objptr, ##44056
09018     F2 14 02 FB | 	rdlong	arg02, objptr
0901c     03 14 66 F0 | 	shl	arg02, #3
09020     02 00 00 FF 
09024     38 E4 85 F1 | 	sub	objptr, ##1080
09028     F2 14 02 F1 | 	add	arg02, objptr
0902c     0A 27 02 FB | 	rdlong	local05, arg02
09030     13 13 02 F6 | 	mov	arg01, local05
09034     01 14 06 F6 | 	mov	arg02, #1
09038     53 00 00 FF 
0903c     E0 E5 85 F1 | 	sub	objptr, ##42976
09040     18 19 B1 FD | 	call	#__system__Right_S
09044     FD 28 02 F6 | 	mov	local06, result1
09048     01 2A 66 F6 | 	neg	local07, #1
0904c                 | ' 
0904c                 | ' varname$=lparts(ct).part$
0904c                 | ' suffix$=right$(varname$,1)
0904c                 | ' j=-1
0904c                 | ' 
0904c                 | ' for i=0 to varnum-1
0904c     00 2C 06 F6 | 	mov	local08, #0
09050     53 00 00 FF 
09054     DC E5 05 F1 | 	add	objptr, ##42972
09058     F2 2E 02 FB | 	rdlong	local09, objptr
0905c     53 00 00 FF 
09060     DC E5 85 F1 | 	sub	objptr, ##42972
09064                 | LR__0740
09064     17 2D 52 F2 | 	cmps	local08, local09 wc
09068     38 00 90 3D |  if_ae	jmp	#LR__0741
0906c                 | '   if variables(i).name=varname$ then j=i : exit
0906c     16 15 02 F6 | 	mov	arg02, local08
09070     04 14 66 F0 | 	shl	arg02, #4
09074     33 00 00 FF 
09078     DC E5 05 F1 | 	add	objptr, ##26588
0907c     F2 14 02 F1 | 	add	arg02, objptr
09080     0A 13 02 FB | 	rdlong	arg01, arg02
09084     13 15 02 F6 | 	mov	arg02, local05
09088     33 00 00 FF 
0908c     DC E5 85 F1 | 	sub	objptr, ##26588
09090     5C F8 B0 FD | 	call	#__system___string_cmp
09094     00 FA 0D F2 | 	cmp	result1, #0 wz
09098     16 2B 02 A6 |  if_e	mov	local07, local08
0909c     01 2C 06 51 |  if_ne	add	local08, #1
090a0     C0 FF 9F 5D |  if_ne	jmp	#LR__0740
090a4                 | LR__0741
090a4                 | ' if  j=-1 andalso varnum<maxvars then   
090a4     FF FF 7F FF 
090a8     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
090ac     A8 00 90 5D |  if_ne	jmp	#LR__0742
090b0     53 00 00 FF 
090b4     DC E5 05 F1 | 	add	objptr, ##42972
090b8     F2 2E 02 FB | 	rdlong	local09, objptr
090bc     53 00 00 FF 
090c0     DC E5 85 F1 | 	sub	objptr, ##42972
090c4     01 00 00 FF 
090c8     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
090cc     88 00 90 3D |  if_ae	jmp	#LR__0742
090d0     53 00 00 FF 
090d4     DC E5 05 F1 | 	add	objptr, ##42972
090d8     F2 2E 02 FB | 	rdlong	local09, objptr
090dc     04 2E 66 F0 | 	shl	local09, #4
090e0     20 00 00 FF 
090e4     00 E4 85 F1 | 	sub	objptr, ##16384
090e8     F2 2E 02 F1 | 	add	local09, objptr
090ec     17 27 62 FC | 	wrlong	local05, local09
090f0     20 00 00 FF 
090f4     00 E4 05 F1 | 	add	objptr, ##16384
090f8     F2 2E 02 FB | 	rdlong	local09, objptr
090fc     04 2E 66 F0 | 	shl	local09, #4
09100     20 00 00 FF 
09104     00 E4 85 F1 | 	sub	objptr, ##16384
09108     F2 2E 02 F1 | 	add	local09, objptr
0910c     04 2E 06 F1 | 	add	local09, #4
09110     17 01 68 FC | 	wrlong	#0, local09
09114     20 00 00 FF 
09118     00 E4 05 F1 | 	add	objptr, ##16384
0911c     F2 2E 02 FB | 	rdlong	local09, objptr
09120     04 2E 66 F0 | 	shl	local09, #4
09124     20 00 00 FF 
09128     00 E4 85 F1 | 	sub	objptr, ##16384
0912c     F2 2E 02 F1 | 	add	local09, objptr
09130     0C 2E 06 F1 | 	add	local09, #12
09134     17 39 68 FC | 	wrlong	#28, local09
09138     20 00 00 FF 
0913c     00 E4 05 F1 | 	add	objptr, ##16384
09140     F2 2E 02 FB | 	rdlong	local09, objptr
09144     17 2B 02 F6 | 	mov	local07, local09
09148     01 2E 06 F1 | 	add	local09, #1
0914c     F2 2E 62 FC | 	wrlong	local09, objptr
09150     53 00 00 FF 
09154     DC E5 85 F1 | 	sub	objptr, ##42972
09158                 | LR__0742
09158     00 2E 06 F6 | 	mov	local09, #0
0915c                 | ' numpar=0
0915c                 | ' ' check if it is an array
0915c                 | ' 
0915c                 | ' if lparts(ct+1).token=token_lpar then
0915c     56 00 00 FF 
09160     18 E4 05 F1 | 	add	objptr, ##44056
09164     F2 2C 02 FB | 	rdlong	local08, objptr
09168     01 2C 06 F1 | 	add	local08, #1
0916c     03 2C 66 F0 | 	shl	local08, #3
09170     02 00 00 FF 
09174     38 E4 85 F1 | 	sub	objptr, ##1080
09178     F2 2C 02 F1 | 	add	local08, objptr
0917c     04 2C 06 F1 | 	add	local08, #4
09180     16 2D 02 FB | 	rdlong	local08, local08
09184     15 2C 0E F2 | 	cmp	local08, #21 wz
09188     53 00 00 FF 
0918c     E0 E5 85 F1 | 	sub	objptr, ##42976
09190     08 01 90 5D |  if_ne	jmp	#LR__0747
09194     56 00 00 FF 
09198     18 E4 05 F1 | 	add	objptr, ##44056
0919c     F2 30 02 FB | 	rdlong	local10, objptr
091a0     01 30 06 F1 | 	add	local10, #1
091a4     F2 30 62 FC | 	wrlong	local10, objptr
091a8     56 00 00 FF 
091ac     18 E4 85 F1 | 	sub	objptr, ##44056
091b0                 | '   ct+=1 											' omit this lpar, this is for expr list
091b0                 | '   do
091b0                 | LR__0743
091b0     56 00 00 FF 
091b4     18 E4 05 F1 | 	add	objptr, ##44056
091b8     F2 2C 02 FB | 	rdlong	local08, objptr
091bc     01 2C 06 F1 | 	add	local08, #1
091c0     F2 2C 62 FC | 	wrlong	local08, objptr
091c4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
091c4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
091c4     03 2C 66 F0 | 	shl	local08, #3
091c8     02 00 00 FF 
091cc     38 E4 85 F1 | 	sub	objptr, ##1080
091d0     F2 2C 02 F1 | 	add	local08, objptr
091d4     04 2C 06 F1 | 	add	local08, #4
091d8     16 31 02 FB | 	rdlong	local10, local08
091dc     15 30 0E F2 | 	cmp	local10, #21 wz
091e0     53 00 00 FF 
091e4     E0 E5 85 F1 | 	sub	objptr, ##42976
091e8     40 00 90 5D |  if_ne	jmp	#LR__0744
091ec     56 00 00 FF 
091f0     18 E4 05 F1 | 	add	objptr, ##44056
091f4     F2 30 02 FB | 	rdlong	local10, objptr
091f8     01 30 06 F1 | 	add	local10, #1
091fc     F2 30 62 FC | 	wrlong	local10, objptr
09200     56 00 00 FF 
09204     18 E4 85 F1 | 	sub	objptr, ##44056
09208     74 EE BF FD | 	call	#_expr
0920c     56 00 00 FF 
09210     18 E4 05 F1 | 	add	objptr, ##44056
09214     F2 30 02 FB | 	rdlong	local10, objptr
09218     01 30 06 F1 | 	add	local10, #1
0921c     F2 30 62 FC | 	wrlong	local10, objptr
09220     56 00 00 FF 
09224     18 E4 85 F1 | 	sub	objptr, ##44056
09228     04 00 90 FD | 	jmp	#LR__0745
0922c                 | LR__0744
0922c     50 EE BF FD | 	call	#_expr
09230                 | LR__0745
09230     01 2E 06 F1 | 	add	local09, #1
09234     56 00 00 FF 
09238     18 E4 05 F1 | 	add	objptr, ##44056
0923c     F2 2C 02 FB | 	rdlong	local08, objptr
09240     03 2C 66 F0 | 	shl	local08, #3
09244     02 00 00 FF 
09248     38 E4 85 F1 | 	sub	objptr, ##1080
0924c     F2 2C 02 F1 | 	add	local08, objptr
09250     04 2C 06 F1 | 	add	local08, #4
09254     16 31 02 FB | 	rdlong	local10, local08
09258     14 30 0E F2 | 	cmp	local10, #20 wz
0925c     53 00 00 FF 
09260     E0 E5 85 F1 | 	sub	objptr, ##42976
09264     34 00 90 AD |  if_e	jmp	#LR__0746
09268     56 00 00 FF 
0926c     18 E4 05 F1 | 	add	objptr, ##44056
09270     F2 30 02 FB | 	rdlong	local10, objptr
09274     03 30 66 F0 | 	shl	local10, #3
09278     02 00 00 FF 
0927c     38 E4 85 F1 | 	sub	objptr, ##1080
09280     F2 30 02 F1 | 	add	local10, objptr
09284     04 30 06 F1 | 	add	local10, #4
09288     18 31 02 FB | 	rdlong	local10, local10
0928c     FE 31 0E F2 | 	cmp	local10, #510 wz
09290     53 00 00 FF 
09294     E0 E5 85 F1 | 	sub	objptr, ##42976
09298     14 FF 9F 5D |  if_ne	jmp	#LR__0743
0929c                 | LR__0746
0929c                 | LR__0747
0929c     17 21 02 F6 | 	mov	local02, local09
092a0     11 22 06 F6 | 	mov	local03, #17
092a4     15 1F 02 F6 | 	mov	local01, local07
092a8     0F 31 02 F6 | 	mov	local10, local01
092ac     10 2F 02 F6 | 	mov	local09, local02
092b0     11 2D 02 F6 | 	mov	local08, local03
092b4     69 00 00 FF 
092b8     50 E4 05 F1 | 	add	objptr, ##53840
092bc     F2 2A 02 FB | 	rdlong	local07, objptr
092c0     15 29 02 F6 | 	mov	local06, local07
092c4     01 28 66 F0 | 	shl	local06, #1
092c8     15 29 02 F1 | 	add	local06, local07
092cc     02 28 66 F0 | 	shl	local06, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 28 02 F1 | 	add	local06, objptr
092dc     14 31 62 FC | 	wrlong	local10, local06
092e0     03 00 00 FF 
092e4     00 E4 05 F1 | 	add	objptr, ##1536
092e8     F2 30 02 FB | 	rdlong	local10, objptr
092ec     18 27 02 F6 | 	mov	local05, local10
092f0     01 26 66 F0 | 	shl	local05, #1
092f4     18 27 02 F1 | 	add	local05, local10
092f8     02 26 66 F0 | 	shl	local05, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 26 02 F1 | 	add	local05, objptr
09308     04 26 06 F1 | 	add	local05, #4
0930c     13 2F 62 FC | 	wrlong	local09, local05
09310     03 00 00 FF 
09314     00 E4 05 F1 | 	add	objptr, ##1536
09318     F2 30 02 FB | 	rdlong	local10, objptr
0931c     18 FB 01 F6 | 	mov	result1, local10
09320     01 FA 65 F0 | 	shl	result1, #1
09324     18 FB 01 F1 | 	add	result1, local10
09328     02 FA 65 F0 | 	shl	result1, #2
0932c     03 00 00 FF 
09330     00 E4 85 F1 | 	sub	objptr, ##1536
09334     F2 FA 01 F1 | 	add	result1, objptr
09338     08 FA 05 F1 | 	add	result1, #8
0933c     FD 2C 62 FC | 	wrlong	local08, result1
09340     03 00 00 FF 
09344     00 E4 05 F1 | 	add	objptr, ##1536
09348     F2 30 02 FB | 	rdlong	local10, objptr
0934c     01 30 06 F1 | 	add	local10, #1
09350     F2 30 62 FC | 	wrlong	local10, objptr
09354     69 00 00 FF 
09358     50 E4 85 F1 | 	sub	objptr, ##53840
0935c                 | ' 
0935c                 | ' t2.result.twowords(1)=numpar
0935c                 | ' 
0935c                 | ' 
0935c                 | ' 
0935c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0935c                 | ' 
0935c                 | ' 
0935c                 | '  
0935c                 | ' 
0935c                 | ' 701 
0935c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0935c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0935c     FF FF 7F FF 
09360     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09364     B8 00 90 5D |  if_ne	jmp	#LR__0748
09368     15 22 06 F6 | 	mov	local03, #21
0936c     0F 31 02 F6 | 	mov	local10, local01
09370     10 2F 02 F6 | 	mov	local09, local02
09374     11 2D 02 F6 | 	mov	local08, local03
09378     69 00 00 FF 
0937c     50 E4 05 F1 | 	add	objptr, ##53840
09380     F2 2A 02 FB | 	rdlong	local07, objptr
09384     15 29 02 F6 | 	mov	local06, local07
09388     01 28 66 F0 | 	shl	local06, #1
0938c     15 29 02 F1 | 	add	local06, local07
09390     02 28 66 F0 | 	shl	local06, #2
09394     03 00 00 FF 
09398     00 E4 85 F1 | 	sub	objptr, ##1536
0939c     F2 28 02 F1 | 	add	local06, objptr
093a0     14 31 62 FC | 	wrlong	local10, local06
093a4     03 00 00 FF 
093a8     00 E4 05 F1 | 	add	objptr, ##1536
093ac     F2 1E 02 FB | 	rdlong	local01, objptr
093b0     0F 27 02 F6 | 	mov	local05, local01
093b4     01 26 66 F0 | 	shl	local05, #1
093b8     0F 27 02 F1 | 	add	local05, local01
093bc     02 26 66 F0 | 	shl	local05, #2
093c0     03 00 00 FF 
093c4     00 E4 85 F1 | 	sub	objptr, ##1536
093c8     F2 26 02 F1 | 	add	local05, objptr
093cc     04 26 06 F1 | 	add	local05, #4
093d0     13 2F 62 FC | 	wrlong	local09, local05
093d4     03 00 00 FF 
093d8     00 E4 05 F1 | 	add	objptr, ##1536
093dc     F2 1E 02 FB | 	rdlong	local01, objptr
093e0     0F FB 01 F6 | 	mov	result1, local01
093e4     01 FA 65 F0 | 	shl	result1, #1
093e8     0F FB 01 F1 | 	add	result1, local01
093ec     02 FA 65 F0 | 	shl	result1, #2
093f0     03 00 00 FF 
093f4     00 E4 85 F1 | 	sub	objptr, ##1536
093f8     F2 FA 01 F1 | 	add	result1, objptr
093fc     08 FA 05 F1 | 	add	result1, #8
09400     FD 2C 62 FC | 	wrlong	local08, result1
09404     03 00 00 FF 
09408     00 E4 05 F1 | 	add	objptr, ##1536
0940c     F2 30 02 FB | 	rdlong	local10, objptr
09410     01 30 06 F1 | 	add	local10, #1
09414     F2 30 62 FC | 	wrlong	local10, objptr
09418     69 00 00 FF 
0941c     50 E4 85 F1 | 	sub	objptr, ##53840
09420                 | LR__0748
09420     A7 F0 03 F6 | 	mov	ptra, fp
09424     B2 00 A0 FD | 	call	#popregs_
09428                 | _getvar_ret
09428     2D 00 64 FD | 	ret
0942c                 | 
0942c                 | ' 
0942c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0942c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0942c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0942c                 | ' 
0942c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0942c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0942c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0942c                 | ' 
0942c                 | ' function execute_line (astart=0 as integer) as integer
0942c                 | _execute_line
0942c     04 4A 05 F6 | 	mov	COUNT_, #4
09430     A8 00 A0 FD | 	call	#pushregs_
09434     78 00 00 FF 
09438     88 E5 05 F1 | 	add	objptr, ##61832
0943c     F2 00 68 FC | 	wrlong	#0, objptr
09440                 | ' runptr2=0
09440                 | ' for lineptr_e=astart to lineptr-1
09440     0F 00 00 FF 
09444     34 E5 85 F1 | 	sub	objptr, ##7988
09448     F2 12 62 FC | 	wrlong	arg01, objptr
0944c     04 E4 85 F1 | 	sub	objptr, #4
09450     F2 1E 02 FB | 	rdlong	local01, objptr
09454     69 00 00 FF 
09458     50 E4 85 F1 | 	sub	objptr, ##53840
0945c                 | LR__0750
0945c     69 00 00 FF 
09460     54 E4 05 F1 | 	add	objptr, ##53844
09464     F2 FA 01 FB | 	rdlong	result1, objptr
09468     69 00 00 FF 
0946c     54 E4 85 F1 | 	sub	objptr, ##53844
09470     0F FB 51 F2 | 	cmps	result1, local01 wc
09474     98 00 90 3D |  if_ae	jmp	#LR__0751
09478     69 00 00 FF 
0947c     54 E4 05 F1 | 	add	objptr, ##53844
09480     F2 FA 01 FB | 	rdlong	result1, objptr
09484     FD 20 02 F6 | 	mov	local02, result1
09488     01 20 66 F0 | 	shl	local02, #1
0948c     FD 20 02 F1 | 	add	local02, result1
09490     02 20 66 F0 | 	shl	local02, #2
09494     03 00 00 FF 
09498     04 E4 85 F1 | 	sub	objptr, ##1540
0949c     F2 20 02 F1 | 	add	local02, objptr
094a0     08 20 06 F1 | 	add	local02, #8
094a4     10 21 02 FB | 	rdlong	local02, local02
094a8     10 21 E2 F8 | 	getbyte	local02, local02, #0
094ac     02 20 66 F0 | 	shl	local02, #2
094b0     04 00 00 FF 
094b4     1C E4 85 F1 | 	sub	objptr, ##2076
094b8     F2 20 02 F1 | 	add	local02, objptr
094bc     10 21 02 FB | 	rdlong	local02, local02
094c0     10 23 02 F6 | 	mov	local03, local02
094c4     13 20 46 F7 | 	zerox	local02, #19
094c8     14 22 46 F0 | 	shr	local03, #20
094cc     02 22 66 F0 | 	shl	local03, #2
094d0     ED 22 02 F1 | 	add	local03, __methods__
094d4     11 23 02 FB | 	rdlong	local03, local03
094d8     62 00 00 FF 
094dc     34 E4 85 F1 | 	sub	objptr, ##50228
094e0     F2 24 02 F6 | 	mov	local04, objptr
094e4     10 E5 01 F6 | 	mov	objptr, local02
094e8     2D 22 62 FD | 	call	local03
094ec     12 E5 01 F6 | 	mov	objptr, local04
094f0     69 00 00 FF 
094f4     54 E4 05 F1 | 	add	objptr, ##53844
094f8     F2 24 02 FB | 	rdlong	local04, objptr
094fc     01 24 06 F1 | 	add	local04, #1
09500     F2 24 62 FC | 	wrlong	local04, objptr
09504     69 00 00 FF 
09508     54 E4 85 F1 | 	sub	objptr, ##53844
0950c     4C FF 9F FD | 	jmp	#LR__0750
09510                 | LR__0751
09510                 | ' return runptr2
09510     78 00 00 FF 
09514     88 E5 05 F1 | 	add	objptr, ##61832
09518     F2 FA 01 FB | 	rdlong	result1, objptr
0951c     78 00 00 FF 
09520     88 E5 85 F1 | 	sub	objptr, ##61832
09524     A7 F0 03 F6 | 	mov	ptra, fp
09528     B2 00 A0 FD | 	call	#popregs_
0952c                 | _execute_line_ret
0952c     2D 00 64 FD | 	ret
09530                 | 
09530                 | ' 
09530                 | ' 
09530                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
09530                 | ' 
09530                 | ' function pop() as expr_result
09530                 | _pop
09530                 | ' 
09530                 | ' if stackpointer=0 then
09530     62 00 00 FF 
09534     2C E4 05 F1 | 	add	objptr, ##50220
09538     F2 FA 09 FB | 	rdlong	result1, objptr wz
0953c     62 00 00 FF 
09540     2C E4 85 F1 | 	sub	objptr, ##50220
09544     FF 04 06 A6 |  if_e	mov	_var03, #255
09548     18 00 06 A6 |  if_e	mov	_var01, #24
0954c     68 00 90 AD |  if_e	jmp	#LR__0760
09550     62 00 00 FF 
09554     2C E4 05 F1 | 	add	objptr, ##50220
09558     F2 FA 01 FB | 	rdlong	result1, objptr
0955c     01 FA 85 F1 | 	sub	result1, #1
09560     F2 FA 61 FC | 	wrlong	result1, objptr
09564     FD FE 01 F6 | 	mov	result3, result1
09568     01 FE 65 F0 | 	shl	result3, #1
0956c     FD FE 01 F1 | 	add	result3, result1
09570     02 FE 65 F0 | 	shl	result3, #2
09574     0C 00 00 FF 
09578     0C E4 85 F1 | 	sub	objptr, ##6156
0957c     F2 FE 01 F1 | 	add	result3, objptr
09580     FF 00 02 FB | 	rdlong	_var01, result3
09584     04 FE 05 F1 | 	add	result3, #4
09588     FF FE 01 FB | 	rdlong	result3, result3
0958c     FD FC 01 F6 | 	mov	result2, result1
09590     01 FC 65 F0 | 	shl	result2, #1
09594     FD FC 01 F1 | 	add	result2, result1
09598     02 FC 65 F0 | 	shl	result2, #2
0959c     F2 FC 01 F1 | 	add	result2, objptr
095a0     08 FC 05 F1 | 	add	result2, #8
095a4     FE FA 01 FB | 	rdlong	result1, result2
095a8     FF 02 02 F6 | 	mov	_var02, result3
095ac     FD 04 02 F6 | 	mov	_var03, result1
095b0     56 00 00 FF 
095b4     20 E4 85 F1 | 	sub	objptr, ##44064
095b8                 | LR__0760
095b8                 | ' return t1
095b8     01 FD 01 F6 | 	mov	result2, _var02
095bc     02 FF 01 F6 | 	mov	result3, _var03
095c0     00 FB 01 F6 | 	mov	result1, _var01
095c4                 | _pop_ret
095c4     2D 00 64 FD | 	ret
095c8                 | 
095c8                 | ' 
095c8                 | ' sub push(t1 as expr_result )
095c8                 | _push
095c8                 | ' 
095c8                 | ' 'print "In push: "; t1.result_type
095c8                 | ' 'print "In push: "; t1.result.uresult
095c8                 | ' 
095c8                 | ' if stackpointer<maxstack then 
095c8     62 00 00 FF 
095cc     2C E4 05 F1 | 	add	objptr, ##50220
095d0     F2 00 02 FB | 	rdlong	_var01, objptr
095d4     62 00 00 FF 
095d8     2C E4 85 F1 | 	sub	objptr, ##50220
095dc     01 00 00 FF 
095e0     00 00 56 F2 | 	cmps	_var01, ##512 wc
095e4     BC 00 90 3D |  if_ae	jmp	#LR__0770
095e8     09 01 02 FB | 	rdlong	_var01, arg01
095ec     04 12 06 F1 | 	add	arg01, #4
095f0     09 03 02 FB | 	rdlong	_var02, arg01
095f4     04 12 06 F1 | 	add	arg01, #4
095f8     09 13 02 FB | 	rdlong	arg01, arg01
095fc     62 00 00 FF 
09600     2C E4 05 F1 | 	add	objptr, ##50220
09604     F2 04 02 FB | 	rdlong	_var03, objptr
09608     02 07 02 F6 | 	mov	_var04, _var03
0960c     01 06 66 F0 | 	shl	_var04, #1
09610     02 07 02 F1 | 	add	_var04, _var03
09614     02 06 66 F0 | 	shl	_var04, #2
09618     0C 00 00 FF 
0961c     0C E4 85 F1 | 	sub	objptr, ##6156
09620     F2 06 02 F1 | 	add	_var04, objptr
09624     03 01 62 FC | 	wrlong	_var01, _var04
09628     0C 00 00 FF 
0962c     0C E4 05 F1 | 	add	objptr, ##6156
09630     F2 06 02 FB | 	rdlong	_var04, objptr
09634     03 05 02 F6 | 	mov	_var03, _var04
09638     01 04 66 F0 | 	shl	_var03, #1
0963c     03 05 02 F1 | 	add	_var03, _var04
09640     02 04 66 F0 | 	shl	_var03, #2
09644     0C 00 00 FF 
09648     0C E4 85 F1 | 	sub	objptr, ##6156
0964c     F2 04 02 F1 | 	add	_var03, objptr
09650     04 04 06 F1 | 	add	_var03, #4
09654     02 03 62 FC | 	wrlong	_var02, _var03
09658     0C 00 00 FF 
0965c     0C E4 05 F1 | 	add	objptr, ##6156
09660     F2 06 02 FB | 	rdlong	_var04, objptr
09664     03 05 02 F6 | 	mov	_var03, _var04
09668     01 04 66 F0 | 	shl	_var03, #1
0966c     03 05 02 F1 | 	add	_var03, _var04
09670     02 04 66 F0 | 	shl	_var03, #2
09674     0C 00 00 FF 
09678     0C E4 85 F1 | 	sub	objptr, ##6156
0967c     F2 04 02 F1 | 	add	_var03, objptr
09680     08 04 06 F1 | 	add	_var03, #8
09684     02 13 62 FC | 	wrlong	arg01, _var03
09688     0C 00 00 FF 
0968c     0C E4 05 F1 | 	add	objptr, ##6156
09690     F2 00 02 FB | 	rdlong	_var01, objptr
09694     01 00 06 F1 | 	add	_var01, #1
09698     F2 00 62 FC | 	wrlong	_var01, objptr
0969c     62 00 00 FF 
096a0     2C E4 85 F1 | 	sub	objptr, ##50220
096a4                 | LR__0770
096a4                 | _push_ret
096a4     2D 00 64 FD | 	ret
096a8                 | 
096a8                 | ' 
096a8                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
096a8                 | ' 
096a8                 | ' sub do_push
096a8                 | _do_push
096a8                 | ' if stackpointer<maxstack then 
096a8     62 00 00 FF 
096ac     2C E4 05 F1 | 	add	objptr, ##50220
096b0     F2 00 02 FB | 	rdlong	_var01, objptr
096b4     62 00 00 FF 
096b8     2C E4 85 F1 | 	sub	objptr, ##50220
096bc     01 00 00 FF 
096c0     00 00 56 F2 | 	cmps	_var01, ##512 wc
096c4     F8 00 90 3D |  if_ae	jmp	#LR__0780
096c8     69 00 00 FF 
096cc     54 E4 05 F1 | 	add	objptr, ##53844
096d0     F2 02 02 FB | 	rdlong	_var02, objptr
096d4     01 05 02 F6 | 	mov	_var03, _var02
096d8     01 04 66 F0 | 	shl	_var03, #1
096dc     01 05 02 F1 | 	add	_var03, _var02
096e0     02 04 66 F0 | 	shl	_var03, #2
096e4     03 00 00 FF 
096e8     04 E4 85 F1 | 	sub	objptr, ##1540
096ec     F2 04 02 F1 | 	add	_var03, objptr
096f0     02 01 02 FB | 	rdlong	_var01, _var03
096f4     04 04 06 F1 | 	add	_var03, #4
096f8     02 07 02 FB | 	rdlong	_var04, _var03
096fc     01 05 02 F6 | 	mov	_var03, _var02
09700     01 04 66 F0 | 	shl	_var03, #1
09704     01 05 02 F1 | 	add	_var03, _var02
09708     02 04 66 F0 | 	shl	_var03, #2
0970c     F2 04 02 F1 | 	add	_var03, objptr
09710     08 04 06 F1 | 	add	_var03, #8
09714     02 03 02 FB | 	rdlong	_var02, _var03
09718     04 00 00 FF 
0971c     24 E4 85 F1 | 	sub	objptr, ##2084
09720     F2 04 02 FB | 	rdlong	_var03, objptr
09724     02 09 02 F6 | 	mov	_var05, _var03
09728     01 08 66 F0 | 	shl	_var05, #1
0972c     02 09 02 F1 | 	add	_var05, _var03
09730     02 08 66 F0 | 	shl	_var05, #2
09734     0C 00 00 FF 
09738     0C E4 85 F1 | 	sub	objptr, ##6156
0973c     F2 08 02 F1 | 	add	_var05, objptr
09740     04 01 62 FC | 	wrlong	_var01, _var05
09744     0C 00 00 FF 
09748     0C E4 05 F1 | 	add	objptr, ##6156
0974c     F2 08 02 FB | 	rdlong	_var05, objptr
09750     04 05 02 F6 | 	mov	_var03, _var05
09754     01 04 66 F0 | 	shl	_var03, #1
09758     04 05 02 F1 | 	add	_var03, _var05
0975c     02 04 66 F0 | 	shl	_var03, #2
09760     0C 00 00 FF 
09764     0C E4 85 F1 | 	sub	objptr, ##6156
09768     F2 04 02 F1 | 	add	_var03, objptr
0976c     04 04 06 F1 | 	add	_var03, #4
09770     02 07 62 FC | 	wrlong	_var04, _var03
09774     0C 00 00 FF 
09778     0C E4 05 F1 | 	add	objptr, ##6156
0977c     F2 08 02 FB | 	rdlong	_var05, objptr
09780     04 07 02 F6 | 	mov	_var04, _var05
09784     01 06 66 F0 | 	shl	_var04, #1
09788     04 07 02 F1 | 	add	_var04, _var05
0978c     02 06 66 F0 | 	shl	_var04, #2
09790     0C 00 00 FF 
09794     0C E4 85 F1 | 	sub	objptr, ##6156
09798     F2 06 02 F1 | 	add	_var04, objptr
0979c     08 06 06 F1 | 	add	_var04, #8
097a0     03 03 62 FC | 	wrlong	_var02, _var04
097a4     0C 00 00 FF 
097a8     0C E4 05 F1 | 	add	objptr, ##6156
097ac     F2 00 02 FB | 	rdlong	_var01, objptr
097b0     01 00 06 F1 | 	add	_var01, #1
097b4     F2 00 62 FC | 	wrlong	_var01, objptr
097b8     62 00 00 FF 
097bc     2C E4 85 F1 | 	sub	objptr, ##50220
097c0                 | LR__0780
097c0                 | _do_push_ret
097c0     2D 00 64 FD | 	ret
097c4                 | 
097c4                 | ' 
097c4                 | '   
097c4                 | ' sub csave_block(address as ulong)
097c4                 | _csave_block
097c4     09 01 02 F6 | 	mov	_var01, arg01
097c8                 | ' 
097c8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
097c8                 | ' ' we enter it at the state of playing 1 kHz header tone
097c8                 | ' 
097c8                 | ' for i=0 to 63 step 2
097c8     00 02 06 F6 | 	mov	_var02, #0
097cc                 | LR__0790
097cc                 | '   do: loop until lpeek(base+32*7)>32768
097cc     55 00 00 FF 
097d0     E4 E5 05 F1 | 	add	objptr, ##44004
097d4     97 0C 48 FB | 	callpa	#(@LR__0792-@LR__0791)>>2,fcache_load_ptr_
097d8                 | LR__0791
097d8     F2 12 02 FB | 	rdlong	arg01, objptr
097dc     E0 12 06 F1 | 	add	arg01, #224
097e0     09 FB 01 FB | 	rdlong	result1, arg01
097e4     40 00 00 FF 
097e8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
097ec     E8 FF 9F CD |  if_b	jmp	#LR__0791
097f0                 | LR__0792
097f0     00 13 02 F6 | 	mov	arg01, _var01
097f4     01 05 02 F6 | 	mov	_var03, _var02
097f8     02 04 66 F0 | 	shl	_var03, #2
097fc     02 13 02 F1 | 	add	arg01, _var03
09800     09 07 02 FB | 	rdlong	_var04, arg01
09804     24 00 00 FF 
09808     B8 E4 05 F1 | 	add	objptr, ##18616
0980c     F2 06 62 FC | 	wrlong	_var04, objptr
09810     7A 00 00 FF 
09814     9C E4 85 F1 | 	sub	objptr, ##62620
09818                 | '   q=lpeek(address+4*i)
09818                 | '      for bit=0 to 31
09818     00 08 06 F6 | 	mov	_var05, #0
0981c     97 84 48 FB | 	callpa	#(@LR__0797-@LR__0793)>>2,fcache_load_ptr_
09820                 | LR__0793
09820                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
09820     7A 00 00 FF 
09824     9C E4 05 F1 | 	add	objptr, ##62620
09828     F2 06 02 FB | 	rdlong	_var04, objptr
0982c     7A 00 00 FF 
09830     9C E4 85 F1 | 	sub	objptr, ##62620
09834     04 05 C2 F9 | 	decod	_var03, _var05
09838     02 07 CA F7 | 	test	_var04, _var03 wz
0983c     60 00 90 AD |  if_e	jmp	#LR__0794
09840     04 05 02 F6 | 	mov	_var03, _var05
09844     02 04 66 F0 | 	shl	_var03, #2
09848     76 00 00 FF 
0984c     80 E4 05 F1 | 	add	objptr, ##60544
09850     F2 04 02 F1 | 	add	_var03, objptr
09854     02 FF 48 FC | 	wrbyte	#127, _var03
09858     04 05 02 F6 | 	mov	_var03, _var05
0985c     02 04 66 F0 | 	shl	_var03, #2
09860     01 04 06 F1 | 	add	_var03, #1
09864     F2 04 02 F1 | 	add	_var03, objptr
09868     02 01 49 FC | 	wrbyte	#128, _var03
0986c     04 05 02 F6 | 	mov	_var03, _var05
09870     02 04 66 F0 | 	shl	_var03, #2
09874     02 04 06 F1 | 	add	_var03, #2
09878     F2 04 02 F1 | 	add	_var03, objptr
0987c     02 FF 48 FC | 	wrbyte	#127, _var03
09880     04 05 02 F6 | 	mov	_var03, _var05
09884     02 04 66 F0 | 	shl	_var03, #2
09888     03 04 06 F1 | 	add	_var03, #3
0988c     F2 04 02 F1 | 	add	_var03, objptr
09890     02 01 49 FC | 	wrbyte	#128, _var03
09894     76 00 00 FF 
09898     80 E4 85 F1 | 	sub	objptr, ##60544
0989c     5C 00 90 FD | 	jmp	#LR__0795
098a0                 | LR__0794
098a0     04 05 02 F6 | 	mov	_var03, _var05
098a4     02 04 66 F0 | 	shl	_var03, #2
098a8     76 00 00 FF 
098ac     80 E4 05 F1 | 	add	objptr, ##60544
098b0     F2 04 02 F1 | 	add	_var03, objptr
098b4     02 01 49 FC | 	wrbyte	#128, _var03
098b8     04 05 02 F6 | 	mov	_var03, _var05
098bc     02 04 66 F0 | 	shl	_var03, #2
098c0     01 04 06 F1 | 	add	_var03, #1
098c4     F2 04 02 F1 | 	add	_var03, objptr
098c8     02 01 49 FC | 	wrbyte	#128, _var03
098cc     04 05 02 F6 | 	mov	_var03, _var05
098d0     02 04 66 F0 | 	shl	_var03, #2
098d4     02 04 06 F1 | 	add	_var03, #2
098d8     F2 04 02 F1 | 	add	_var03, objptr
098dc     02 FF 48 FC | 	wrbyte	#127, _var03
098e0     04 05 02 F6 | 	mov	_var03, _var05
098e4     02 04 66 F0 | 	shl	_var03, #2
098e8     03 04 06 F1 | 	add	_var03, #3
098ec     F2 04 02 F1 | 	add	_var03, objptr
098f0     02 FF 48 FC | 	wrbyte	#127, _var03
098f4     76 00 00 FF 
098f8     80 E4 85 F1 | 	sub	objptr, ##60544
098fc                 | LR__0795
098fc     01 08 06 F1 | 	add	_var05, #1
09900     20 08 56 F2 | 	cmps	_var05, #32 wc
09904     18 FF 9F CD |  if_b	jmp	#LR__0793
09908                 | '   do: loop until lpeek(base+32*7)<32768
09908     55 00 00 FF 
0990c     E4 E5 05 F1 | 	add	objptr, ##44004
09910                 | LR__0796
09910     F2 12 02 FB | 	rdlong	arg01, objptr
09914     E0 12 06 F1 | 	add	arg01, #224
09918     09 FB 01 FB | 	rdlong	result1, arg01
0991c     40 00 00 FF 
09920     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09924     E8 FF 9F 3D |  if_ae	jmp	#LR__0796
09928                 | LR__0797
09928     00 13 02 F6 | 	mov	arg01, _var01
0992c     04 12 06 F1 | 	add	arg01, #4
09930     01 05 02 F6 | 	mov	_var03, _var02
09934     02 04 66 F0 | 	shl	_var03, #2
09938     02 13 02 F1 | 	add	arg01, _var03
0993c     09 07 02 FB | 	rdlong	_var04, arg01
09940     24 00 00 FF 
09944     B8 E4 05 F1 | 	add	objptr, ##18616
09948     F2 06 62 FC | 	wrlong	_var04, objptr
0994c     7A 00 00 FF 
09950     9C E4 85 F1 | 	sub	objptr, ##62620
09954                 | '   q=lpeek(address+4+4*i)
09954                 | '      for bit=0 to 31
09954     00 08 06 F6 | 	mov	_var05, #0
09958     97 94 48 FB | 	callpa	#(@LR__0801-@LR__0798)>>2,fcache_load_ptr_
0995c                 | LR__0798
0995c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0995c     7A 00 00 FF 
09960     9C E4 05 F1 | 	add	objptr, ##62620
09964     F2 06 02 FB | 	rdlong	_var04, objptr
09968     7A 00 00 FF 
0996c     9C E4 85 F1 | 	sub	objptr, ##62620
09970     04 05 C2 F9 | 	decod	_var03, _var05
09974     02 07 CA F7 | 	test	_var04, _var03 wz
09978     80 00 90 AD |  if_e	jmp	#LR__0799
0997c     04 0B 02 F6 | 	mov	_var06, _var05
09980     02 0A 66 F0 | 	shl	_var06, #2
09984     80 04 06 F6 | 	mov	_var03, #128
09988     05 05 02 F1 | 	add	_var03, _var06
0998c     76 00 00 FF 
09990     80 E4 05 F1 | 	add	objptr, ##60544
09994     F2 04 02 F1 | 	add	_var03, objptr
09998     02 FF 48 FC | 	wrbyte	#127, _var03
0999c     04 0B 02 F6 | 	mov	_var06, _var05
099a0     02 0A 66 F0 | 	shl	_var06, #2
099a4     80 04 06 F6 | 	mov	_var03, #128
099a8     05 05 02 F1 | 	add	_var03, _var06
099ac     01 04 06 F1 | 	add	_var03, #1
099b0     F2 04 02 F1 | 	add	_var03, objptr
099b4     02 01 49 FC | 	wrbyte	#128, _var03
099b8     04 0B 02 F6 | 	mov	_var06, _var05
099bc     02 0A 66 F0 | 	shl	_var06, #2
099c0     80 04 06 F6 | 	mov	_var03, #128
099c4     05 05 02 F1 | 	add	_var03, _var06
099c8     02 04 06 F1 | 	add	_var03, #2
099cc     F2 04 02 F1 | 	add	_var03, objptr
099d0     02 FF 48 FC | 	wrbyte	#127, _var03
099d4     04 0B 02 F6 | 	mov	_var06, _var05
099d8     02 0A 66 F0 | 	shl	_var06, #2
099dc     80 04 06 F6 | 	mov	_var03, #128
099e0     05 05 02 F1 | 	add	_var03, _var06
099e4     03 04 06 F1 | 	add	_var03, #3
099e8     F2 04 02 F1 | 	add	_var03, objptr
099ec     02 01 49 FC | 	wrbyte	#128, _var03
099f0     76 00 00 FF 
099f4     80 E4 85 F1 | 	sub	objptr, ##60544
099f8     7C 00 90 FD | 	jmp	#LR__0800
099fc                 | LR__0799
099fc     04 0B 02 F6 | 	mov	_var06, _var05
09a00     02 0A 66 F0 | 	shl	_var06, #2
09a04     80 04 06 F6 | 	mov	_var03, #128
09a08     05 05 02 F1 | 	add	_var03, _var06
09a0c     76 00 00 FF 
09a10     80 E4 05 F1 | 	add	objptr, ##60544
09a14     F2 04 02 F1 | 	add	_var03, objptr
09a18     02 01 49 FC | 	wrbyte	#128, _var03
09a1c     04 0B 02 F6 | 	mov	_var06, _var05
09a20     02 0A 66 F0 | 	shl	_var06, #2
09a24     80 04 06 F6 | 	mov	_var03, #128
09a28     05 05 02 F1 | 	add	_var03, _var06
09a2c     01 04 06 F1 | 	add	_var03, #1
09a30     F2 04 02 F1 | 	add	_var03, objptr
09a34     02 01 49 FC | 	wrbyte	#128, _var03
09a38     04 0B 02 F6 | 	mov	_var06, _var05
09a3c     02 0A 66 F0 | 	shl	_var06, #2
09a40     80 04 06 F6 | 	mov	_var03, #128
09a44     05 05 02 F1 | 	add	_var03, _var06
09a48     02 04 06 F1 | 	add	_var03, #2
09a4c     F2 04 02 F1 | 	add	_var03, objptr
09a50     02 FF 48 FC | 	wrbyte	#127, _var03
09a54     04 0B 02 F6 | 	mov	_var06, _var05
09a58     02 0A 66 F0 | 	shl	_var06, #2
09a5c     80 04 06 F6 | 	mov	_var03, #128
09a60     05 05 02 F1 | 	add	_var03, _var06
09a64     03 04 06 F1 | 	add	_var03, #3
09a68     F2 04 02 F1 | 	add	_var03, objptr
09a6c     02 FF 48 FC | 	wrbyte	#127, _var03
09a70     76 00 00 FF 
09a74     80 E4 85 F1 | 	sub	objptr, ##60544
09a78                 | LR__0800
09a78     01 08 06 F1 | 	add	_var05, #1
09a7c     20 08 56 F2 | 	cmps	_var05, #32 wc
09a80     D8 FE 9F CD |  if_b	jmp	#LR__0798
09a84                 | LR__0801
09a84     02 02 06 F1 | 	add	_var02, #2
09a88     40 02 56 F2 | 	cmps	_var02, #64 wc
09a8c     3C FD 9F CD |  if_b	jmp	#LR__0790
09a90                 | ' do: loop until lpeek(base+32*7)>32768
09a90     55 00 00 FF 
09a94     E4 E5 05 F1 | 	add	objptr, ##44004
09a98     97 84 48 FB | 	callpa	#(@LR__0810-@LR__0802)>>2,fcache_load_ptr_
09a9c                 | LR__0802
09a9c     F2 12 02 FB | 	rdlong	arg01, objptr
09aa0     E0 12 06 F1 | 	add	arg01, #224
09aa4     09 FB 01 FB | 	rdlong	result1, arg01
09aa8     40 00 00 FF 
09aac     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09ab0     E8 FF 9F CD |  if_b	jmp	#LR__0802
09ab4     55 00 00 FF 
09ab8     E4 E5 85 F1 | 	sub	objptr, ##44004
09abc                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09abc     00 02 06 F6 | 	mov	_var02, #0
09ac0                 | LR__0803
09ac0     01 07 52 F6 | 	abs	_var04, _var02 wc
09ac4     07 06 06 F5 | 	and	_var04, #7
09ac8     03 07 82 F6 | 	negc	_var04, _var04
09acc     04 06 56 F2 | 	cmps	_var04, #4 wc
09ad0     20 00 90 3D |  if_ae	jmp	#LR__0804
09ad4     01 0B 02 F6 | 	mov	_var06, _var02
09ad8     76 00 00 FF 
09adc     80 E4 05 F1 | 	add	objptr, ##60544
09ae0     F2 0A 02 F1 | 	add	_var06, objptr
09ae4     05 FF 48 FC | 	wrbyte	#127, _var06
09ae8     76 00 00 FF 
09aec     80 E4 85 F1 | 	sub	objptr, ##60544
09af0     1C 00 90 FD | 	jmp	#LR__0805
09af4                 | LR__0804
09af4     01 0B 02 F6 | 	mov	_var06, _var02
09af8     76 00 00 FF 
09afc     80 E4 05 F1 | 	add	objptr, ##60544
09b00     F2 0A 02 F1 | 	add	_var06, objptr
09b04     05 01 49 FC | 	wrbyte	#128, _var06
09b08     76 00 00 FF 
09b0c     80 E4 85 F1 | 	sub	objptr, ##60544
09b10                 | LR__0805
09b10     01 02 06 F1 | 	add	_var02, #1
09b14     80 02 56 F2 | 	cmps	_var02, #128 wc
09b18     A4 FF 9F CD |  if_b	jmp	#LR__0803
09b1c                 | ' 
09b1c                 | ' do: loop until lpeek(base+32*7)<32768
09b1c     55 00 00 FF 
09b20     E4 E5 05 F1 | 	add	objptr, ##44004
09b24                 | LR__0806
09b24     F2 12 02 FB | 	rdlong	arg01, objptr
09b28     E0 12 06 F1 | 	add	arg01, #224
09b2c     09 FB 01 FB | 	rdlong	result1, arg01
09b30     40 00 00 FF 
09b34     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09b38     E8 FF 9F 3D |  if_ae	jmp	#LR__0806
09b3c     55 00 00 FF 
09b40     E4 E5 85 F1 | 	sub	objptr, ##44004
09b44                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09b44     80 02 06 F6 | 	mov	_var02, #128
09b48                 | LR__0807
09b48     01 07 52 F6 | 	abs	_var04, _var02 wc
09b4c     07 06 06 F5 | 	and	_var04, #7
09b50     03 07 82 F6 | 	negc	_var04, _var04
09b54     04 06 56 F2 | 	cmps	_var04, #4 wc
09b58     20 00 90 3D |  if_ae	jmp	#LR__0808
09b5c     01 0B 02 F6 | 	mov	_var06, _var02
09b60     76 00 00 FF 
09b64     80 E4 05 F1 | 	add	objptr, ##60544
09b68     F2 0A 02 F1 | 	add	_var06, objptr
09b6c     05 FF 48 FC | 	wrbyte	#127, _var06
09b70     76 00 00 FF 
09b74     80 E4 85 F1 | 	sub	objptr, ##60544
09b78     1C 00 90 FD | 	jmp	#LR__0809
09b7c                 | LR__0808
09b7c     01 0B 02 F6 | 	mov	_var06, _var02
09b80     76 00 00 FF 
09b84     80 E4 05 F1 | 	add	objptr, ##60544
09b88     F2 0A 02 F1 | 	add	_var06, objptr
09b8c     05 01 49 FC | 	wrbyte	#128, _var06
09b90     76 00 00 FF 
09b94     80 E4 85 F1 | 	sub	objptr, ##60544
09b98                 | LR__0809
09b98     01 02 06 F1 | 	add	_var02, #1
09b9c     00 03 16 F2 | 	cmp	_var02, #256 wc
09ba0     A4 FF 9F CD |  if_b	jmp	#LR__0807
09ba4                 | LR__0810
09ba4                 | _csave_block_ret
09ba4     2D 00 64 FD | 	ret
09ba8                 | 
09ba8                 | ' 
09ba8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09ba8                 | _csave_addtoblock
09ba8     04 4A 05 F6 | 	mov	COUNT_, #4
09bac     A8 00 A0 FD | 	call	#pushregs_
09bb0     09 1F 02 F6 | 	mov	local01, arg01
09bb4                 | ' 
09bb4                 | ' 
09bb4                 | ' if force=0 then
09bb4     07 14 4E F7 | 	zerox	arg02, #7 wz
09bb8     78 00 90 5D |  if_ne	jmp	#LR__0820
09bbc     78 00 00 FF 
09bc0     80 E5 05 F1 | 	add	objptr, ##61824
09bc4     F2 14 02 FB | 	rdlong	arg02, objptr
09bc8     02 00 00 FF 
09bcc     00 E4 85 F1 | 	sub	objptr, ##1024
09bd0     F2 14 02 F1 | 	add	arg02, objptr
09bd4     0A 1F 42 FC | 	wrbyte	local01, arg02
09bd8     02 00 00 FF 
09bdc     00 E4 05 F1 | 	add	objptr, ##1024
09be0     F2 1E 02 FB | 	rdlong	local01, objptr
09be4     01 1E 06 F1 | 	add	local01, #1
09be8     F2 1E 62 FC | 	wrlong	local01, objptr
09bec                 | '   block(blockptr)=d
09bec                 | '   blockptr+=1
09bec                 | '   if blockptr>=255 then
09bec     78 00 00 FF 
09bf0     80 E5 85 F1 | 	sub	objptr, ##61824
09bf4     FF 1E 16 F2 | 	cmp	local01, #255 wc
09bf8     E4 00 90 CD |  if_b	jmp	#LR__0824
09bfc     76 00 00 FF 
09c00     80 E5 05 F1 | 	add	objptr, ##60800
09c04     F2 12 02 F6 | 	mov	arg01, objptr
09c08     76 00 00 FF 
09c0c     80 E5 85 F1 | 	sub	objptr, ##60800
09c10     B0 FB BF FD | 	call	#_csave_block
09c14     78 00 00 FF 
09c18     80 E5 05 F1 | 	add	objptr, ##61824
09c1c     F2 00 68 FC | 	wrlong	#0, objptr
09c20     78 00 00 FF 
09c24     80 E5 85 F1 | 	sub	objptr, ##61824
09c28     2C 13 06 F6 | 	mov	arg01, #300
09c2c     8C EF B0 FD | 	call	#__system___waitms
09c30     AC 00 90 FD | 	jmp	#LR__0824
09c34                 | LR__0820
09c34     78 00 00 FF 
09c38     80 E5 05 F1 | 	add	objptr, ##61824
09c3c     F2 20 02 FB | 	rdlong	local02, objptr
09c40     02 00 00 FF 
09c44     00 E4 85 F1 | 	sub	objptr, ##1024
09c48     F2 20 02 F1 | 	add	local02, objptr
09c4c     10 1F 42 FC | 	wrbyte	local01, local02
09c50                 | '   block(blockptr)=d
09c50                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09c50     02 00 00 FF 
09c54     00 E4 05 F1 | 	add	objptr, ##1024
09c58     F2 22 02 FB | 	rdlong	local03, objptr
09c5c     78 00 00 FF 
09c60     80 E5 85 F1 | 	sub	objptr, ##61824
09c64     FF 22 16 F2 | 	cmp	local03, #255 wc
09c68     40 00 90 3D |  if_ae	jmp	#LR__0823
09c6c     78 00 00 FF 
09c70     80 E5 05 F1 | 	add	objptr, ##61824
09c74     F2 24 02 FB | 	rdlong	local04, objptr
09c78     78 00 00 FF 
09c7c     80 E5 85 F1 | 	sub	objptr, ##61824
09c80                 | LR__0821
09c80     00 25 56 F2 | 	cmps	local04, #256 wc
09c84     24 00 90 3D |  if_ae	jmp	#LR__0822
09c88     12 21 02 F6 | 	mov	local02, local04
09c8c     76 00 00 FF 
09c90     80 E5 05 F1 | 	add	objptr, ##60800
09c94     F2 20 02 F1 | 	add	local02, objptr
09c98     10 01 48 FC | 	wrbyte	#0, local02
09c9c     01 24 06 F1 | 	add	local04, #1
09ca0     76 00 00 FF 
09ca4     80 E5 85 F1 | 	sub	objptr, ##60800
09ca8     D4 FF 9F FD | 	jmp	#LR__0821
09cac                 | LR__0822
09cac                 | LR__0823
09cac     76 00 00 FF 
09cb0     80 E5 05 F1 | 	add	objptr, ##60800
09cb4     F2 12 02 F6 | 	mov	arg01, objptr
09cb8     76 00 00 FF 
09cbc     80 E5 85 F1 | 	sub	objptr, ##60800
09cc0     00 FB BF FD | 	call	#_csave_block
09cc4     78 00 00 FF 
09cc8     80 E5 05 F1 | 	add	objptr, ##61824
09ccc     F2 00 68 FC | 	wrlong	#0, objptr
09cd0     78 00 00 FF 
09cd4     80 E5 85 F1 | 	sub	objptr, ##61824
09cd8     2C 13 06 F6 | 	mov	arg01, #300
09cdc     DC EE B0 FD | 	call	#__system___waitms
09ce0                 | LR__0824
09ce0     A7 F0 03 F6 | 	mov	ptra, fp
09ce4     B2 00 A0 FD | 	call	#popregs_
09ce8                 | _csave_addtoblock_ret
09ce8     2D 00 64 FD | 	ret
09cec                 | 
09cec                 | ' 
09cec                 | ' sub test_csave
09cec                 | _test_csave
09cec     04 4A 05 F6 | 	mov	COUNT_, #4
09cf0     A8 00 A0 FD | 	call	#pushregs_
09cf4     C0 F0 07 F1 | 	add	ptra, #192
09cf8                 | ' 'dim fileheader,savestart, saveptr as ulong
09cf8                 | ' 
09cf8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09cf8     69 00 00 FF 
09cfc     58 E4 05 F1 | 	add	objptr, ##53848
09d00     F2 12 02 FB | 	rdlong	arg01, objptr
09d04     69 00 00 FF 
09d08     58 E4 85 F1 | 	sub	objptr, ##53848
09d0c     50 B8 B0 FD | 	call	#_pslpeek
09d10     FF FF 7F FF 
09d14     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09d18     0C 00 90 5D |  if_ne	jmp	#LR__0830
09d1c     1B 12 06 F6 | 	mov	arg01, #27
09d20     80 B6 B0 FD | 	call	#_printerror
09d24     0C 03 90 FD | 	jmp	#LR__0842
09d28                 | LR__0830
09d28     04 F8 BF FD | 	call	#_pop
09d2c     FF 1E 02 F6 | 	mov	local01, result3
09d30     90 4E 05 F1 | 	add	fp, #144
09d34     A7 FA 61 FC | 	wrlong	result1, fp
09d38     04 4E 05 F1 | 	add	fp, #4
09d3c     A7 FC 61 FC | 	wrlong	result2, fp
09d40     04 4E 05 F1 | 	add	fp, #4
09d44     A7 1E 62 FC | 	wrlong	local01, fp
09d48                 | ' t1=pop()
09d48                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
09d48     98 4E 85 F1 | 	sub	fp, #152
09d4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09d50     40 01 00 5F 
09d54     A2 1E 06 56 |  if_ne	mov	local01, ##@LR__4559
09d58     8C 4E 05 51 |  if_ne	add	fp, #140
09d5c     A7 1E 62 5C |  if_ne	wrlong	local01, fp
09d60     8C 4E 85 51 |  if_ne	sub	fp, #140
09d64     90 4E 05 A1 |  if_e	add	fp, #144
09d68     A7 1E 02 AB |  if_e	rdlong	local01, fp
09d6c     04 4E 85 A1 |  if_e	sub	fp, #4
09d70     A7 1E 62 AC |  if_e	wrlong	local01, fp
09d74     8C 4E 85 A1 |  if_e	sub	fp, #140
09d78                 | ' 
09d78                 | ' ' prepare 1 kHz header wave
09d78                 | ' 
09d78                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09d78     A7 00 68 FC | 	wrlong	#0, fp
09d7c     97 34 48 FB | 	callpa	#(@LR__0834-@LR__0831)>>2,fcache_load_ptr_
09d80                 | LR__0831
09d80     A7 1E 02 FB | 	rdlong	local01, fp
09d84     0F 1F 52 F6 | 	abs	local01, local01 wc
09d88     07 1E 06 F5 | 	and	local01, #7
09d8c     0F 1F 82 F6 | 	negc	local01, local01
09d90     04 1E 56 F2 | 	cmps	local01, #4 wc
09d94     20 00 90 3D |  if_ae	jmp	#LR__0832
09d98     A7 1E 02 FB | 	rdlong	local01, fp
09d9c     76 00 00 FF 
09da0     80 E4 05 F1 | 	add	objptr, ##60544
09da4     F2 1E 02 F1 | 	add	local01, objptr
09da8     0F FF 48 FC | 	wrbyte	#127, local01
09dac     76 00 00 FF 
09db0     80 E4 85 F1 | 	sub	objptr, ##60544
09db4     1C 00 90 FD | 	jmp	#LR__0833
09db8                 | LR__0832
09db8     A7 1E 02 FB | 	rdlong	local01, fp
09dbc     76 00 00 FF 
09dc0     80 E4 05 F1 | 	add	objptr, ##60544
09dc4     F2 1E 02 F1 | 	add	local01, objptr
09dc8     0F 01 49 FC | 	wrbyte	#128, local01
09dcc     76 00 00 FF 
09dd0     80 E4 85 F1 | 	sub	objptr, ##60544
09dd4                 | LR__0833
09dd4     A7 1E 02 FB | 	rdlong	local01, fp
09dd8     01 1E 06 F1 | 	add	local01, #1
09ddc     A7 1E 62 FC | 	wrlong	local01, fp
09de0     00 1F 56 F2 | 	cmps	local01, #256 wc
09de4     98 FF 9F CD |  if_b	jmp	#LR__0831
09de8                 | LR__0834
09de8     76 00 00 FF 
09dec     80 E4 05 F1 | 	add	objptr, ##60544
09df0     F2 14 02 F6 | 	mov	arg02, objptr
09df4     07 12 06 F6 | 	mov	arg01, #7
09df8     0F 00 00 FF 
09dfc     40 17 06 F6 | 	mov	arg03, ##8000
09e00     0E 18 C6 F9 | 	decod	arg04, #14
09e04     00 1B 06 F6 | 	mov	arg05, #256
09e08     00 1C 06 F6 | 	mov	arg06, #0
09e0c     6A 00 00 FF 
09e10     C0 E5 85 F1 | 	sub	objptr, ##54720
09e14     14 E7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
09e18     0B 00 00 FF 
09e1c     C0 E4 85 F1 | 	sub	objptr, ##5824
09e20     05 00 00 FF 
09e24     B8 13 06 F6 | 	mov	arg01, ##3000
09e28     90 ED B0 FD | 	call	#__system___waitms
09e2c     78 00 00 FF 
09e30     80 E5 05 F1 | 	add	objptr, ##61824
09e34     F2 00 68 FC | 	wrlong	#0, objptr
09e38     78 00 00 FF 
09e3c     80 E5 85 F1 | 	sub	objptr, ##61824
09e40     72 12 06 F6 | 	mov	arg01, #114
09e44     00 14 06 F6 | 	mov	arg02, #0
09e48     5C FD BF FD | 	call	#_csave_addtoblock
09e4c     62 12 06 F6 | 	mov	arg01, #98
09e50     00 14 06 F6 | 	mov	arg02, #0
09e54     50 FD BF FD | 	call	#_csave_addtoblock
09e58     61 12 06 F6 | 	mov	arg01, #97
09e5c     00 14 06 F6 | 	mov	arg02, #0
09e60     44 FD BF FD | 	call	#_csave_addtoblock
09e64     0D 12 06 F6 | 	mov	arg01, #13
09e68     00 14 06 F6 | 	mov	arg02, #0
09e6c     38 FD BF FD | 	call	#_csave_addtoblock
09e70                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
09e70                 | ' waitms 3000 
09e70                 | ' 
09e70                 | ' blockptr=0
09e70                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
09e70                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
09e70     A7 02 68 FC | 	wrlong	#1, fp
09e74     8C 4E 05 F1 | 	add	fp, #140
09e78     A7 12 02 FB | 	rdlong	arg01, fp
09e7c     8C 4E 85 F1 | 	sub	fp, #140
09e80     09 21 02 F6 | 	mov	local02, arg01
09e84     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09e88                 | LR__0835
09e88     10 FB C9 FA | 	rdbyte	result1, local02 wz
09e8c     01 20 06 51 |  if_ne	add	local02, #1
09e90     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09e94                 | LR__0836
09e94     09 21 82 F1 | 	sub	local02, arg01
09e98     10 23 02 F6 | 	mov	local03, local02
09e9c     01 22 06 F1 | 	add	local03, #1
09ea0                 | LR__0837
09ea0     A7 1E 02 FB | 	rdlong	local01, fp
09ea4     11 1F 52 F2 | 	cmps	local01, local03 wc
09ea8     34 00 90 3D |  if_ae	jmp	#LR__0838
09eac     8C 4E 05 F1 | 	add	fp, #140
09eb0     A7 12 02 FB | 	rdlong	arg01, fp
09eb4     8C 4E 85 F1 | 	sub	fp, #140
09eb8     A7 14 02 FB | 	rdlong	arg02, fp
09ebc     01 16 06 F6 | 	mov	arg03, #1
09ec0     28 0B B1 FD | 	call	#__system__Mid_S
09ec4     FD 12 C2 FA | 	rdbyte	arg01, result1
09ec8     00 14 06 F6 | 	mov	arg02, #0
09ecc     D8 FC BF FD | 	call	#_csave_addtoblock
09ed0     A7 1E 02 FB | 	rdlong	local01, fp
09ed4     01 1E 06 F1 | 	add	local01, #1
09ed8     A7 1E 62 FC | 	wrlong	local01, fp
09edc     C0 FF 9F FD | 	jmp	#LR__0837
09ee0                 | LR__0838
09ee0     00 12 06 F6 | 	mov	arg01, #0
09ee4     00 14 06 F6 | 	mov	arg02, #0
09ee8     BC FC BF FD | 	call	#_csave_addtoblock
09eec     72 12 06 F6 | 	mov	arg01, #114
09ef0     00 14 06 F6 | 	mov	arg02, #0
09ef4     B0 FC BF FD | 	call	#_csave_addtoblock
09ef8     62 12 06 F6 | 	mov	arg01, #98
09efc     00 14 06 F6 | 	mov	arg02, #0
09f00     A4 FC BF FD | 	call	#_csave_addtoblock
09f04     73 12 06 F6 | 	mov	arg01, #115
09f08     00 14 06 F6 | 	mov	arg02, #0
09f0c     98 FC BF FD | 	call	#_csave_addtoblock
09f10     0D 12 06 F6 | 	mov	arg01, #13
09f14     00 14 06 F6 | 	mov	arg02, #0
09f18     8C FC BF FD | 	call	#_csave_addtoblock
09f1c     69 00 00 FF 
09f20     58 E4 05 F1 | 	add	objptr, ##53848
09f24     F2 1E 02 FB | 	rdlong	local01, objptr
09f28     69 00 00 FF 
09f2c     58 E4 85 F1 | 	sub	objptr, ##53848
09f30     9C 4E 05 F1 | 	add	fp, #156
09f34     A7 1E 62 FC | 	wrlong	local01, fp
09f38     9C 4E 85 F1 | 	sub	fp, #156
09f3c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09f3c                 | ' 
09f3c                 | ' saveptr=programstart
09f3c                 | ' do
09f3c                 | LR__0839
09f3c     A0 4E 05 F1 | 	add	fp, #160
09f40     A7 12 02 F6 | 	mov	arg01, fp
09f44     04 4E 85 F1 | 	sub	fp, #4
09f48     A7 14 02 FB | 	rdlong	arg02, fp
09f4c     9C 4E 85 F1 | 	sub	fp, #156
09f50     18 16 06 F6 | 	mov	arg03, #24
09f54     0B 00 00 FF 
09f58     C0 E4 05 F1 | 	add	objptr, ##5824
09f5c     78 DE B0 FD | 	call	#_psram_spin2_read1
09f60     0C 4E 05 F1 | 	add	fp, #12
09f64     A7 12 02 F6 | 	mov	arg01, fp
09f68     9C 4E 05 F1 | 	add	fp, #156
09f6c     A7 14 02 FB | 	rdlong	arg02, fp
09f70     04 4E 05 F1 | 	add	fp, #4
09f74     A7 16 02 FB | 	rdlong	arg03, fp
09f78     AC 4E 85 F1 | 	sub	fp, #172
09f7c     58 DE B0 FD | 	call	#_psram_spin2_read1
09f80     0B 00 00 FF 
09f84     C0 E4 85 F1 | 	sub	objptr, ##5824
09f88     AC 4E 05 F1 | 	add	fp, #172
09f8c     A7 12 02 FB | 	rdlong	arg01, fp
09f90     AC 4E 85 F1 | 	sub	fp, #172
09f94     00 14 06 F6 | 	mov	arg02, #0
09f98     0C FC BF FD | 	call	#_csave_addtoblock
09f9c                 | '   psram.read1(varptr(header(0)),saveptr,24)
09f9c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
09f9c                 | '   csave_addtoblock(header(3),0) ' that's always <255
09f9c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
09f9c     A7 00 68 FC | 	wrlong	#0, fp
09fa0     AC 4E 05 F1 | 	add	fp, #172
09fa4     A7 24 02 FB | 	rdlong	local04, fp
09fa8     AC 4E 85 F1 | 	sub	fp, #172
09fac                 | LR__0840
09fac     A7 1E 02 FB | 	rdlong	local01, fp
09fb0     12 1F 52 F2 | 	cmps	local01, local04 wc
09fb4     2C 00 90 3D |  if_ae	jmp	#LR__0841
09fb8     A7 22 02 FB | 	rdlong	local03, fp
09fbc     0C 4E 05 F1 | 	add	fp, #12
09fc0     A7 22 02 F1 | 	add	local03, fp
09fc4     11 13 C2 FA | 	rdbyte	arg01, local03
09fc8     00 14 06 F6 | 	mov	arg02, #0
09fcc     0C 4E 85 F1 | 	sub	fp, #12
09fd0     D4 FB BF FD | 	call	#_csave_addtoblock
09fd4     A7 22 02 FB | 	rdlong	local03, fp
09fd8     01 22 06 F1 | 	add	local03, #1
09fdc     A7 22 62 FC | 	wrlong	local03, fp
09fe0     C8 FF 9F FD | 	jmp	#LR__0840
09fe4                 | LR__0841
09fe4     B4 4E 05 F1 | 	add	fp, #180
09fe8     A7 1E 02 FB | 	rdlong	local01, fp
09fec     18 4E 85 F1 | 	sub	fp, #24
09ff0     A7 1E 62 FC | 	wrlong	local01, fp
09ff4     18 4E 05 F1 | 	add	fp, #24
09ff8     A7 1E 02 FB | 	rdlong	local01, fp
09ffc     B4 4E 85 F1 | 	sub	fp, #180
0a000     FF FF 3F FF 
0a004     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a008     30 FF 9F 5D |  if_ne	jmp	#LR__0839
0a00c     00 12 06 F6 | 	mov	arg01, #0
0a010     01 14 06 F6 | 	mov	arg02, #1
0a014     90 FB BF FD | 	call	#_csave_addtoblock
0a018     55 00 00 FF 
0a01c     E4 E5 05 F1 | 	add	objptr, ##44004
0a020     F2 12 02 FB | 	rdlong	arg01, objptr
0a024     55 00 00 FF 
0a028     E4 E5 85 F1 | 	sub	objptr, ##44004
0a02c     F4 12 06 F1 | 	add	arg01, #244
0a030     09 01 58 FC | 	wrword	#0, arg01
0a034                 | LR__0842
0a034     A7 F0 03 F6 | 	mov	ptra, fp
0a038     B2 00 A0 FD | 	call	#popregs_
0a03c                 | _test_csave_ret
0a03c     2D 00 64 FD | 	ret
0a040                 | 
0a040                 | ' 
0a040                 | ' ' ----------------- Save the program
0a040                 | ' 
0a040                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0a040                 | _do_save
0a040     02 4A 05 F6 | 	mov	COUNT_, #2
0a044     A8 00 A0 FD | 	call	#pushregs_
0a048     01 00 00 FF 
0a04c     BC F0 07 F1 | 	add	ptra, ##700
0a050     01 00 00 FF 
0a054     10 4E 05 F1 | 	add	fp, ##528
0a058     B1 B0 86 FF 
0a05c     A7 E4 68 FC | 	wrlong	##224486002, fp
0a060     01 00 00 FF 
0a064     10 4E 85 F1 | 	sub	fp, ##528
0a068     C4 F4 BF FD | 	call	#_pop
0a06c     FF 16 02 F6 | 	mov	arg03, result3
0a070     A7 FA 61 FC | 	wrlong	result1, fp
0a074     04 4E 05 F1 | 	add	fp, #4
0a078     A7 FC 61 FC | 	wrlong	result2, fp
0a07c     04 4E 05 F1 | 	add	fp, #4
0a080     A7 16 62 FC | 	wrlong	arg03, fp
0a084     08 4E 85 F1 | 	sub	fp, #8
0a088                 | ' 
0a088                 | ' fileheader=$0D616272' rba+ver'
0a088                 | ' 
0a088                 | ' t1=pop() 
0a088                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a088     69 00 00 FF 
0a08c     58 E4 05 F1 | 	add	objptr, ##53848
0a090     F2 12 02 FB | 	rdlong	arg01, objptr
0a094     69 00 00 FF 
0a098     58 E4 85 F1 | 	sub	objptr, ##53848
0a09c     C0 B4 B0 FD | 	call	#_pslpeek
0a0a0     FF FF 7F FF 
0a0a4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a0a8     0C 00 90 5D |  if_ne	jmp	#LR__0850
0a0ac     1B 12 06 F6 | 	mov	arg01, #27
0a0b0     F0 B2 B0 FD | 	call	#_printerror
0a0b4     68 02 90 FD | 	jmp	#LR__0856
0a0b8                 | LR__0850
0a0b8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0a0b8     08 4E 05 F1 | 	add	fp, #8
0a0bc     A7 16 02 FB | 	rdlong	arg03, fp
0a0c0     08 4E 85 F1 | 	sub	fp, #8
0a0c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a0c8     18 00 90 5D |  if_ne	jmp	#LR__0851
0a0cc     A7 12 02 FB | 	rdlong	arg01, fp
0a0d0     64 25 B0 FD | 	call	#_convertstring
0a0d4     A7 FA 61 FC | 	wrlong	result1, fp
0a0d8     08 4E 05 F1 | 	add	fp, #8
0a0dc     A7 3E 68 FC | 	wrlong	#31, fp
0a0e0     08 4E 85 F1 | 	sub	fp, #8
0a0e4                 | LR__0851
0a0e4                 | ' if t1.result_type=result_string then
0a0e4     08 4E 05 F1 | 	add	fp, #8
0a0e8     A7 1E 02 FB | 	rdlong	local01, fp
0a0ec     08 4E 85 F1 | 	sub	fp, #8
0a0f0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a0f4     28 02 90 5D |  if_ne	jmp	#LR__0855
0a0f8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0a0f8     A7 12 02 FB | 	rdlong	arg01, fp
0a0fc     40 01 00 FF 
0a100     AD 14 06 F6 | 	mov	arg02, ##@LR__4560
0a104     E8 E7 B0 FD | 	call	#__system___string_cmp
0a108     00 FA 0D F2 | 	cmp	result1, #0 wz
0a10c     40 01 00 AF 
0a110     AE 1E 06 A6 |  if_e	mov	local01, ##@LR__4561
0a114     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a118                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0a118     09 12 06 F6 | 	mov	arg01, #9
0a11c     D4 35 B1 FD | 	call	#__system__close
0a120     09 1E 06 F6 | 	mov	local01, #9
0a124     71 00 00 FF 
0a128     68 E4 05 F1 | 	add	objptr, ##57960
0a12c     F2 12 02 FB | 	rdlong	arg01, objptr
0a130     71 00 00 FF 
0a134     68 E4 85 F1 | 	sub	objptr, ##57960
0a138     40 01 00 FF 
0a13c     B9 14 06 F6 | 	mov	arg02, ##@LR__4562
0a140     E0 E7 B0 FD | 	call	#__system___string_concat
0a144     FD 12 02 F6 | 	mov	arg01, result1
0a148     A7 14 02 FB | 	rdlong	arg02, fp
0a14c     D4 E7 B0 FD | 	call	#__system___string_concat
0a150     FD 14 02 F6 | 	mov	arg02, result1
0a154     0F 13 02 F6 | 	mov	arg01, local01
0a158     0D 16 06 F6 | 	mov	arg03, #13
0a15c     68 F3 B0 FD | 	call	#__system___basic_open_string
0a160     01 00 00 FF 
0a164     0C 4E 05 F1 | 	add	fp, ##524
0a168     A7 0A 68 FC | 	wrlong	#5, fp
0a16c     69 00 00 FF 
0a170     58 E4 05 F1 | 	add	objptr, ##53848
0a174     F2 1E 02 FB | 	rdlong	local01, objptr
0a178     69 00 00 FF 
0a17c     58 E4 85 F1 | 	sub	objptr, ##53848
0a180     0C 4E 05 F1 | 	add	fp, #12
0a184     A7 1E 62 FC | 	wrlong	local01, fp
0a188     01 00 00 FF 
0a18c     18 4E 85 F1 | 	sub	fp, ##536
0a190                 | ' '  put #9,1,fileheader,1
0a190                 | '   i=5
0a190                 | '   saveptr=programstart
0a190                 | '   do
0a190                 | LR__0852
0a190     01 00 00 FF 
0a194     1C 4E 05 F1 | 	add	fp, ##540
0a198     A7 12 02 F6 | 	mov	arg01, fp
0a19c     04 4E 85 F1 | 	sub	fp, #4
0a1a0     A7 14 02 FB | 	rdlong	arg02, fp
0a1a4     01 00 00 FF 
0a1a8     18 4E 85 F1 | 	sub	fp, ##536
0a1ac     18 16 06 F6 | 	mov	arg03, #24
0a1b0     0B 00 00 FF 
0a1b4     C0 E4 05 F1 | 	add	objptr, ##5824
0a1b8     1C DC B0 FD | 	call	#_psram_spin2_read1
0a1bc     01 00 00 FF 
0a1c0     34 4E 05 F1 | 	add	fp, ##564
0a1c4     A7 12 02 F6 | 	mov	arg01, fp
0a1c8     10 4E 85 F1 | 	sub	fp, #16
0a1cc     A7 14 02 FB | 	rdlong	arg02, fp
0a1d0     04 4E 05 F1 | 	add	fp, #4
0a1d4     A7 16 02 FB | 	rdlong	arg03, fp
0a1d8     01 00 00 FF 
0a1dc     28 4E 85 F1 | 	sub	fp, ##552
0a1e0     F4 DB B0 FD | 	call	#_psram_spin2_read1
0a1e4     0B 00 00 FF 
0a1e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1ec     40 01 00 FF 
0a1f0     BB 1E 06 F6 | 	mov	local01, ##@LR__4563
0a1f4     01 00 00 FF 
0a1f8     B4 4E 05 F1 | 	add	fp, ##692
0a1fc     A7 1E 62 FC | 	wrlong	local01, fp
0a200                 | '     psram.read1(varptr(header(0)),saveptr,24)
0a200                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0a200                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0a200     A8 4E 85 F1 | 	sub	fp, #168
0a204     A7 02 68 FC | 	wrlong	#1, fp
0a208     1C 4E 05 F1 | 	add	fp, #28
0a20c     A7 20 02 FB | 	rdlong	local02, fp
0a210     01 00 00 FF 
0a214     28 4E 85 F1 | 	sub	fp, ##552
0a218     01 20 06 F1 | 	add	local02, #1
0a21c                 | LR__0853
0a21c     01 00 00 FF 
0a220     0C 4E 05 F1 | 	add	fp, ##524
0a224     A7 1E 02 FB | 	rdlong	local01, fp
0a228     01 00 00 FF 
0a22c     0C 4E 85 F1 | 	sub	fp, ##524
0a230     10 1F 52 F2 | 	cmps	local01, local02 wc
0a234     64 00 90 3D |  if_ae	jmp	#LR__0854
0a238     01 00 00 FF 
0a23c     B4 4E 05 F1 | 	add	fp, ##692
0a240     A7 1E 02 FB | 	rdlong	local01, fp
0a244     A8 4E 85 F1 | 	sub	fp, #168
0a248     A7 16 02 FB | 	rdlong	arg03, fp
0a24c     01 16 86 F1 | 	sub	arg03, #1
0a250     28 4E 05 F1 | 	add	fp, #40
0a254     A7 16 02 F1 | 	add	arg03, fp
0a258     0B 13 C2 FA | 	rdbyte	arg01, arg03
0a25c     01 00 00 FF 
0a260     34 4E 85 F1 | 	sub	fp, ##564
0a264     30 08 B1 FD | 	call	#__system__Chr_S
0a268     FD 14 02 F6 | 	mov	arg02, result1
0a26c     0F 13 02 F6 | 	mov	arg01, local01
0a270     B0 E6 B0 FD | 	call	#__system___string_concat
0a274     01 00 00 FF 
0a278     B4 4E 05 F1 | 	add	fp, ##692
0a27c     A7 FA 61 FC | 	wrlong	result1, fp
0a280     A8 4E 85 F1 | 	sub	fp, #168
0a284     A7 1E 02 FB | 	rdlong	local01, fp
0a288     01 1E 06 F1 | 	add	local01, #1
0a28c     A7 1E 62 FC | 	wrlong	local01, fp
0a290     01 00 00 FF 
0a294     0C 4E 85 F1 | 	sub	fp, ##524
0a298     80 FF 9F FD | 	jmp	#LR__0853
0a29c                 | LR__0854
0a29c                 | '  '   put #9,i,header(3),1 : i+=4
0a29c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0a29c                 | '      print #9, saveline$
0a29c     09 12 06 F6 | 	mov	arg01, #9
0a2a0     20 3E B1 FD | 	call	#__system___getiolock_0417
0a2a4     FD 12 02 F6 | 	mov	arg01, result1
0a2a8     1C E6 B0 FD | 	call	#__system___lockmem
0a2ac     01 00 00 FF 
0a2b0     B4 4E 05 F1 | 	add	fp, ##692
0a2b4     A7 14 02 FB | 	rdlong	arg02, fp
0a2b8     01 00 00 FF 
0a2bc     B4 4E 85 F1 | 	sub	fp, ##692
0a2c0     09 12 06 F6 | 	mov	arg01, #9
0a2c4     00 16 06 F6 | 	mov	arg03, #0
0a2c8     EC F2 B0 FD | 	call	#__system___basic_print_string
0a2cc     09 12 06 F6 | 	mov	arg01, #9
0a2d0     0A 14 06 F6 | 	mov	arg02, #10
0a2d4     00 16 06 F6 | 	mov	arg03, #0
0a2d8     84 F2 B0 FD | 	call	#__system___basic_print_char
0a2dc     09 12 06 F6 | 	mov	arg01, #9
0a2e0     E0 3D B1 FD | 	call	#__system___getiolock_0417
0a2e4     FD 00 68 FC | 	wrlong	#0, result1
0a2e8     01 00 00 FF 
0a2ec     30 4E 05 F1 | 	add	fp, ##560
0a2f0     A7 1E 02 FB | 	rdlong	local01, fp
0a2f4     18 4E 85 F1 | 	sub	fp, #24
0a2f8     A7 1E 62 FC | 	wrlong	local01, fp
0a2fc     18 4E 05 F1 | 	add	fp, #24
0a300     A7 1E 02 FB | 	rdlong	local01, fp
0a304     01 00 00 FF 
0a308     30 4E 85 F1 | 	sub	fp, ##560
0a30c     FF FF 3F FF 
0a310     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a314     78 FE 9F 5D |  if_ne	jmp	#LR__0852
0a318                 | '   close #9  
0a318     09 12 06 F6 | 	mov	arg01, #9
0a31c     D4 33 B1 FD | 	call	#__system__close
0a320                 | LR__0855
0a320                 | LR__0856
0a320     A7 F0 03 F6 | 	mov	ptra, fp
0a324     B2 00 A0 FD | 	call	#popregs_
0a328                 | _do_save_ret
0a328     2D 00 64 FD | 	ret
0a32c                 | 
0a32c                 | ' 
0a32c                 | ' '----------------- Load the program
0a32c                 | ' 'lo todo: errors while loading
0a32c                 | ' sub do_load
0a32c                 | _do_load
0a32c     01 4A 05 F6 | 	mov	COUNT_, #1
0a330     A8 00 A0 FD | 	call	#pushregs_
0a334     A4 F0 07 F1 | 	add	ptra, #164
0a338     A0 4E 05 F1 | 	add	fp, #160
0a33c     A7 12 02 F6 | 	mov	arg01, fp
0a340     80 4E 85 F1 | 	sub	fp, #128
0a344     A7 14 02 F6 | 	mov	arg02, fp
0a348     20 4E 85 F1 | 	sub	fp, #32
0a34c     09 15 62 FC | 	wrlong	arg02, arg01
0a350     DC F1 BF FD | 	call	#_pop
0a354     FF 1A 02 F6 | 	mov	arg05, result3
0a358     A7 FA 61 FC | 	wrlong	result1, fp
0a35c     04 4E 05 F1 | 	add	fp, #4
0a360     A7 FC 61 FC | 	wrlong	result2, fp
0a364     04 4E 05 F1 | 	add	fp, #4
0a368     A7 1A 62 FC | 	wrlong	arg05, fp
0a36c                 | ' 
0a36c                 | ' lpoke varptr(line2$),varptr(line2)
0a36c                 | ' t1=pop() 
0a36c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0a36c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0a36c     08 4E 85 F1 | 	sub	fp, #8
0a370     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0a374     18 00 90 5D |  if_ne	jmp	#LR__0860
0a378     A7 12 02 FB | 	rdlong	arg01, fp
0a37c     B8 22 B0 FD | 	call	#_convertstring
0a380     A7 FA 61 FC | 	wrlong	result1, fp
0a384     08 4E 05 F1 | 	add	fp, #8
0a388     A7 3E 68 FC | 	wrlong	#31, fp
0a38c     08 4E 85 F1 | 	sub	fp, #8
0a390                 | LR__0860
0a390                 | ' if t1.result_type=result_string then
0a390     08 4E 05 F1 | 	add	fp, #8
0a394     A7 1E 02 FB | 	rdlong	local01, fp
0a398     08 4E 85 F1 | 	sub	fp, #8
0a39c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a3a0     40 03 90 5D |  if_ne	jmp	#LR__0867
0a3a4     2C 1D B0 FD | 	call	#_do_new
0a3a8                 | '   do_new
0a3a8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0a3a8     A7 12 02 FB | 	rdlong	arg01, fp
0a3ac     40 01 00 FF 
0a3b0     BC 14 06 F6 | 	mov	arg02, ##@LR__4564
0a3b4     38 E5 B0 FD | 	call	#__system___string_cmp
0a3b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3bc     40 01 00 AF 
0a3c0     BD 1E 06 A6 |  if_e	mov	local01, ##@LR__4565
0a3c4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a3c8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a3c8     09 12 06 F6 | 	mov	arg01, #9
0a3cc     24 33 B1 FD | 	call	#__system__close
0a3d0     09 1E 06 F6 | 	mov	local01, #9
0a3d4     71 00 00 FF 
0a3d8     68 E4 05 F1 | 	add	objptr, ##57960
0a3dc     F2 12 02 FB | 	rdlong	arg01, objptr
0a3e0     71 00 00 FF 
0a3e4     68 E4 85 F1 | 	sub	objptr, ##57960
0a3e8     40 01 00 FF 
0a3ec     C8 14 06 F6 | 	mov	arg02, ##@LR__4566
0a3f0     30 E5 B0 FD | 	call	#__system___string_concat
0a3f4     FD 12 02 F6 | 	mov	arg01, result1
0a3f8     A7 14 02 FB | 	rdlong	arg02, fp
0a3fc     24 E5 B0 FD | 	call	#__system___string_concat
0a400     FD 14 02 F6 | 	mov	arg02, result1
0a404     0F 13 02 F6 | 	mov	arg01, local01
0a408     00 16 06 F6 | 	mov	arg03, #0
0a40c     B8 F0 B0 FD | 	call	#__system___basic_open_string
0a410     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0a414     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0a418     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0a41c     10 4E 05 F1 | 	add	fp, #16
0a420     A7 FA 61 FC | 	wrlong	result1, fp
0a424                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0a424     10 4E 85 F1 | 	sub	fp, #16
0a428     9C 00 90 AD |  if_e	jmp	#LR__0861
0a42c     00 12 06 F6 | 	mov	arg01, #0
0a430     90 3C B1 FD | 	call	#__system___getiolock_0417
0a434     FD 12 02 F6 | 	mov	arg01, result1
0a438     8C E4 B0 FD | 	call	#__system___lockmem
0a43c     40 01 00 FF 
0a440     CA 14 06 F6 | 	mov	arg02, ##@LR__4567
0a444     00 12 06 F6 | 	mov	arg01, #0
0a448     00 16 06 F6 | 	mov	arg03, #0
0a44c     68 F1 B0 FD | 	call	#__system___basic_print_string
0a450     10 4E 05 F1 | 	add	fp, #16
0a454     A7 14 02 FB | 	rdlong	arg02, fp
0a458     10 4E 85 F1 | 	sub	fp, #16
0a45c     00 12 06 F6 | 	mov	arg01, #0
0a460     00 16 06 F6 | 	mov	arg03, #0
0a464     0A 18 06 F6 | 	mov	arg04, #10
0a468     90 F1 B0 FD | 	call	#__system___basic_print_integer
0a46c     40 01 00 FF 
0a470     D8 14 06 F6 | 	mov	arg02, ##@LR__4568
0a474     00 12 06 F6 | 	mov	arg01, #0
0a478     00 16 06 F6 | 	mov	arg03, #0
0a47c     38 F1 B0 FD | 	call	#__system___basic_print_string
0a480     10 4E 05 F1 | 	add	fp, #16
0a484     A7 12 02 FB | 	rdlong	arg01, fp
0a488     10 4E 85 F1 | 	sub	fp, #16
0a48c     30 09 B1 FD | 	call	#__system___strerror
0a490     FD 14 02 F6 | 	mov	arg02, result1
0a494     00 12 06 F6 | 	mov	arg01, #0
0a498     00 16 06 F6 | 	mov	arg03, #0
0a49c     18 F1 B0 FD | 	call	#__system___basic_print_string
0a4a0     00 12 06 F6 | 	mov	arg01, #0
0a4a4     0A 14 06 F6 | 	mov	arg02, #10
0a4a8     00 16 06 F6 | 	mov	arg03, #0
0a4ac     B0 F0 B0 FD | 	call	#__system___basic_print_char
0a4b0     00 12 06 F6 | 	mov	arg01, #0
0a4b4     0C 3C B1 FD | 	call	#__system___getiolock_0417
0a4b8     FD 00 68 FC | 	wrlong	#0, result1
0a4bc     09 12 06 F6 | 	mov	arg01, #9
0a4c0     30 32 B1 FD | 	call	#__system__close
0a4c4     24 02 90 FD | 	jmp	#LR__0869
0a4c8                 | LR__0861
0a4c8     0C 4E 05 F1 | 	add	fp, #12
0a4cc     A7 0A 68 FC | 	wrlong	#5, fp
0a4d0                 | '   i=5
0a4d0                 | '   get #9,1,header,1
0a4d0     0C 4E 05 F1 | 	add	fp, #12
0a4d4     A7 16 02 F6 | 	mov	arg03, fp
0a4d8     18 4E 85 F1 | 	sub	fp, #24
0a4dc     09 12 06 F6 | 	mov	arg01, #9
0a4e0     01 14 06 F6 | 	mov	arg02, #1
0a4e4     01 18 06 F6 | 	mov	arg04, #1
0a4e8     04 1A 06 F6 | 	mov	arg05, #4
0a4ec     D8 F1 B0 FD | 	call	#__system___basic_get
0a4f0                 | '   
0a4f0                 | '   if header<>$0D616272 then 
0a4f0     18 4E 05 F1 | 	add	fp, #24
0a4f4     A7 1E 02 FB | 	rdlong	local01, fp
0a4f8     18 4E 85 F1 | 	sub	fp, #24
0a4fc     B1 B0 06 FF 
0a500     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0a504     F0 00 90 AD |  if_e	jmp	#LR__0864
0a508                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0a508     09 12 06 F6 | 	mov	arg01, #9
0a50c     E4 31 B1 FD | 	call	#__system__close
0a510     09 1E 06 F6 | 	mov	local01, #9
0a514     71 00 00 FF 
0a518     68 E4 05 F1 | 	add	objptr, ##57960
0a51c     F2 12 02 FB | 	rdlong	arg01, objptr
0a520     71 00 00 FF 
0a524     68 E4 85 F1 | 	sub	objptr, ##57960
0a528     40 01 00 FF 
0a52c     DB 14 06 F6 | 	mov	arg02, ##@LR__4569
0a530     F0 E3 B0 FD | 	call	#__system___string_concat
0a534     FD 12 02 F6 | 	mov	arg01, result1
0a538     A7 14 02 FB | 	rdlong	arg02, fp
0a53c     E4 E3 B0 FD | 	call	#__system___string_concat
0a540     FD 14 02 F6 | 	mov	arg02, result1
0a544     0F 13 02 F6 | 	mov	arg01, local01
0a548     00 16 06 F6 | 	mov	arg03, #0
0a54c     78 EF B0 FD | 	call	#__system___basic_open_string
0a550                 | '     do
0a550                 | LR__0862
0a550     09 12 06 F6 | 	mov	arg01, #9
0a554     7C E5 B0 FD | 	call	#__system___basic_read_line
0a558     55 00 00 FF 
0a55c     F0 E5 05 F1 | 	add	objptr, ##44016
0a560     F2 FA 61 FC | 	wrlong	result1, objptr
0a564                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0a564     55 00 00 FF 
0a568     F0 E5 85 F1 | 	sub	objptr, ##44016
0a56c     FD 12 02 F6 | 	mov	arg01, result1
0a570     01 14 06 F6 | 	mov	arg02, #1
0a574     5C 03 B1 FD | 	call	#__system__Left_S
0a578     FD 12 02 F6 | 	mov	arg01, result1
0a57c     40 01 00 FF 
0a580     DD 14 06 F6 | 	mov	arg02, ##@LR__4570
0a584     68 E3 B0 FD | 	call	#__system___string_cmp
0a588     00 FA 55 F2 | 	cmps	result1, #0 wc
0a58c     34 00 90 CD |  if_b	jmp	#LR__0863
0a590     55 00 00 FF 
0a594     F0 E5 05 F1 | 	add	objptr, ##44016
0a598     F2 12 02 FB | 	rdlong	arg01, objptr
0a59c     55 00 00 FF 
0a5a0     F0 E5 85 F1 | 	sub	objptr, ##44016
0a5a4     01 14 06 F6 | 	mov	arg02, #1
0a5a8     28 03 B1 FD | 	call	#__system__Left_S
0a5ac     FD 12 02 F6 | 	mov	arg01, result1
0a5b0     40 01 00 FF 
0a5b4     DF 14 06 F6 | 	mov	arg02, ##@LR__4571
0a5b8     34 E3 B0 FD | 	call	#__system___string_cmp
0a5bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0a5c0     58 64 BF CD |  if_b	call	#_interpret
0a5c4                 | LR__0863
0a5c4     55 00 00 FF 
0a5c8     F0 E5 05 F1 | 	add	objptr, ##44016
0a5cc     F2 12 02 FB | 	rdlong	arg01, objptr
0a5d0     55 00 00 FF 
0a5d4     F0 E5 85 F1 | 	sub	objptr, ##44016
0a5d8     40 01 00 FF 
0a5dc     E1 14 06 F6 | 	mov	arg02, ##@LR__4572
0a5e0     0C E3 B0 FD | 	call	#__system___string_cmp
0a5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5e8     64 FF 9F 5D |  if_ne	jmp	#LR__0862
0a5ec                 | '     close #9
0a5ec     09 12 06 F6 | 	mov	arg01, #9
0a5f0     00 31 B1 FD | 	call	#__system__close
0a5f4     F4 00 90 FD | 	jmp	#LR__0868
0a5f8                 | LR__0864
0a5f8                 | '   'printerror(26) : close #9 : return
0a5f8                 | '     do
0a5f8                 | LR__0865
0a5f8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0a5f8     0C 4E 05 F1 | 	add	fp, #12
0a5fc     A7 14 02 FB | 	rdlong	arg02, fp
0a600     10 4E 05 F1 | 	add	fp, #16
0a604     A7 16 02 F6 | 	mov	arg03, fp
0a608     1C 4E 85 F1 | 	sub	fp, #28
0a60c     09 12 06 F6 | 	mov	arg01, #9
0a610     01 18 06 F6 | 	mov	arg04, #1
0a614     04 1A 06 F6 | 	mov	arg05, #4
0a618     AC F0 B0 FD | 	call	#__system___basic_get
0a61c     14 4E 05 F1 | 	add	fp, #20
0a620     A7 FA 61 FC | 	wrlong	result1, fp
0a624     08 4E 85 F1 | 	sub	fp, #8
0a628     A7 1E 02 FB | 	rdlong	local01, fp
0a62c     04 1E 06 F1 | 	add	local01, #4
0a630     A7 1E 62 FC | 	wrlong	local01, fp
0a634     10 4E 05 F1 | 	add	fp, #16
0a638     A7 1E 02 FB | 	rdlong	local01, fp
0a63c     04 4E 05 F1 | 	add	fp, #4
0a640     A7 1E 02 F1 | 	add	local01, fp
0a644     0F 01 48 FC | 	wrbyte	#0, local01
0a648                 | '       if amount=1 then  
0a648     0C 4E 85 F1 | 	sub	fp, #12
0a64c     A7 1E 02 FB | 	rdlong	local01, fp
0a650     14 4E 85 F1 | 	sub	fp, #20
0a654     01 1E 0E F2 | 	cmp	local01, #1 wz
0a658     68 00 90 5D |  if_ne	jmp	#LR__0866
0a65c                 | '         get #9,i,line2(0),linelength : i+=linelength
0a65c     0C 4E 05 F1 | 	add	fp, #12
0a660     A7 14 02 FB | 	rdlong	arg02, fp
0a664     14 4E 05 F1 | 	add	fp, #20
0a668     A7 16 02 F6 | 	mov	arg03, fp
0a66c     04 4E 85 F1 | 	sub	fp, #4
0a670     A7 18 02 FB | 	rdlong	arg04, fp
0a674     1C 4E 85 F1 | 	sub	fp, #28
0a678     09 12 06 F6 | 	mov	arg01, #9
0a67c     01 1A 06 F6 | 	mov	arg05, #1
0a680     44 F0 B0 FD | 	call	#__system___basic_get
0a684     0C 4E 05 F1 | 	add	fp, #12
0a688     A7 1E 02 FB | 	rdlong	local01, fp
0a68c     10 4E 05 F1 | 	add	fp, #16
0a690     A7 1A 02 FB | 	rdlong	arg05, fp
0a694     0D 1F 02 F1 | 	add	local01, arg05
0a698     10 4E 85 F1 | 	sub	fp, #16
0a69c     A7 1E 62 FC | 	wrlong	local01, fp
0a6a0     94 4E 05 F1 | 	add	fp, #148
0a6a4     A7 1E 02 FB | 	rdlong	local01, fp
0a6a8     A0 4E 85 F1 | 	sub	fp, #160
0a6ac     55 00 00 FF 
0a6b0     F0 E5 05 F1 | 	add	objptr, ##44016
0a6b4     F2 1E 62 FC | 	wrlong	local01, objptr
0a6b8     55 00 00 FF 
0a6bc     F0 E5 85 F1 | 	sub	objptr, ##44016
0a6c0     58 63 BF FD | 	call	#_interpret
0a6c4                 | LR__0866
0a6c4     14 4E 05 F1 | 	add	fp, #20
0a6c8     A7 1E 02 FB | 	rdlong	local01, fp
0a6cc     14 4E 85 F1 | 	sub	fp, #20
0a6d0     01 1E 56 F2 | 	cmps	local01, #1 wc
0a6d4     20 FF 9F 3D |  if_ae	jmp	#LR__0865
0a6d8                 | '     close #9 
0a6d8     09 12 06 F6 | 	mov	arg01, #9
0a6dc     14 30 B1 FD | 	call	#__system__close
0a6e0     08 00 90 FD | 	jmp	#LR__0868
0a6e4                 | LR__0867
0a6e4     1E 12 06 F6 | 	mov	arg01, #30
0a6e8     B8 AC B0 FD | 	call	#_printerror
0a6ec                 | LR__0868
0a6ec                 | LR__0869
0a6ec     A7 F0 03 F6 | 	mov	ptra, fp
0a6f0     B2 00 A0 FD | 	call	#popregs_
0a6f4                 | _do_load_ret
0a6f4     2D 00 64 FD | 	ret
0a6f8                 | 
0a6f8                 | ' 
0a6f8                 | ' '----------------- Run the program 
0a6f8                 | ' 
0a6f8                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0a6f8                 | ' 
0a6f8                 | ' sub do_run
0a6f8                 | _do_run
0a6f8     01 4A 05 F6 | 	mov	COUNT_, #1
0a6fc     A8 00 A0 FD | 	call	#pushregs_
0a700     69 00 00 FF 
0a704     58 E4 05 F1 | 	add	objptr, ##53848
0a708     F2 1C 02 FB | 	rdlong	arg06, objptr
0a70c     0F 00 00 FF 
0a710     2C E5 05 F1 | 	add	objptr, ##7980
0a714     F2 1C 62 FC | 	wrlong	arg06, objptr
0a718     04 E4 05 F1 | 	add	objptr, #4
0a71c     F2 00 68 FC | 	wrlong	#0, objptr
0a720     04 E4 05 F1 | 	add	objptr, #4
0a724     FF FF FF FF 
0a728     F2 FE 6B FC | 	wrlong	##-1, objptr
0a72c                 | ' if inrun>0 then 
0a72c     04 E4 05 F1 | 	add	objptr, #4
0a730     F2 1C 02 FB | 	rdlong	arg06, objptr
0a734     78 00 00 FF 
0a738     90 E5 85 F1 | 	sub	objptr, ##61840
0a73c     01 1C 16 F2 | 	cmp	arg06, #1 wc
0a740     30 00 90 CD |  if_b	jmp	#LR__0870
0a744     78 00 00 FF 
0a748     94 E5 05 F1 | 	add	objptr, ##61844
0a74c     F2 12 02 F6 | 	mov	arg01, objptr
0a750     10 E4 85 F1 | 	sub	objptr, #16
0a754     F2 14 02 FB | 	rdlong	arg02, objptr
0a758     18 16 06 F6 | 	mov	arg03, #24
0a75c     6D 00 00 FF 
0a760     C4 E4 85 F1 | 	sub	objptr, ##56004
0a764     70 D6 B0 FD | 	call	#_psram_spin2_read1
0a768     0B 00 00 FF 
0a76c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a770                 | '   psram.read1(varptr(runheader),runptr,24)  
0a770                 | '   return
0a770     9C 02 90 FD | 	jmp	#LR__0876
0a774                 | LR__0870
0a774     78 00 00 FF 
0a778     90 E5 05 F1 | 	add	objptr, ##61840
0a77c     F2 02 68 FC | 	wrlong	#1, objptr
0a780     04 E4 05 F1 | 	add	objptr, #4
0a784     F2 12 02 F6 | 	mov	arg01, objptr
0a788     10 E4 85 F1 | 	sub	objptr, #16
0a78c     F2 14 02 FB | 	rdlong	arg02, objptr
0a790     18 16 06 F6 | 	mov	arg03, #24
0a794     6D 00 00 FF 
0a798     C4 E4 85 F1 | 	sub	objptr, ##56004
0a79c     38 D6 B0 FD | 	call	#_psram_spin2_read1
0a7a0                 | ' inrun=1
0a7a0                 | ' psram.read1(varptr(runheader),runptr,24) 
0a7a0                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0a7a0     6D 00 00 FF 
0a7a4     D4 E4 05 F1 | 	add	objptr, ##56020
0a7a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a7ac     78 00 00 FF 
0a7b0     94 E5 85 F1 | 	sub	objptr, ##61844
0a7b4     FF FF 7F FF 
0a7b8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0a7bc     78 00 00 AF 
0a7c0     90 E5 05 A1 |  if_e	add	objptr, ##61840
0a7c4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a7c8     78 00 00 AF 
0a7cc     90 E5 85 A1 |  if_e	sub	objptr, ##61840
0a7d0     3C 02 90 AD |  if_e	jmp	#LR__0876
0a7d4                 | ' do 
0a7d4                 | LR__0871
0a7d4                 | '   if runptr<>oldrunptr then
0a7d4     78 00 00 FF 
0a7d8     84 E5 05 F1 | 	add	objptr, ##61828
0a7dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a7e0     08 E4 05 F1 | 	add	objptr, #8
0a7e4     F2 1C 02 FB | 	rdlong	arg06, objptr
0a7e8     78 00 00 FF 
0a7ec     8C E5 85 F1 | 	sub	objptr, ##61836
0a7f0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0a7f4     CC 00 90 AD |  if_e	jmp	#LR__0872
0a7f8     78 00 00 FF 
0a7fc     94 E5 05 F1 | 	add	objptr, ##61844
0a800     F2 12 02 F6 | 	mov	arg01, objptr
0a804     10 E4 85 F1 | 	sub	objptr, #16
0a808     F2 14 02 FB | 	rdlong	arg02, objptr
0a80c     18 16 06 F6 | 	mov	arg03, #24
0a810     6D 00 00 FF 
0a814     C4 E4 85 F1 | 	sub	objptr, ##56004
0a818     BC D5 B0 FD | 	call	#_psram_spin2_read1
0a81c     5A 00 00 FF 
0a820     90 E5 05 F1 | 	add	objptr, ##46480
0a824     F2 12 02 F6 | 	mov	arg01, objptr
0a828     12 00 00 FF 
0a82c     34 E5 05 F1 | 	add	objptr, ##9524
0a830     F2 14 02 FB | 	rdlong	arg02, objptr
0a834     14 00 00 FF 
0a838     4C E5 85 F1 | 	sub	objptr, ##10572
0a83c     F2 1E 02 FB | 	rdlong	local01, objptr
0a840     01 1E 66 F0 | 	shl	local01, #1
0a844     0F 15 02 F1 | 	add	arg02, local01
0a848     14 00 00 FF 
0a84c     64 E5 05 F1 | 	add	objptr, ##10596
0a850     F2 16 02 FB | 	rdlong	arg03, objptr
0a854     18 E4 85 F1 | 	sub	objptr, #24
0a858     F2 1E 02 FB | 	rdlong	local01, objptr
0a85c     0F 17 82 F1 | 	sub	arg03, local01
0a860     6D 00 00 FF 
0a864     C4 E4 85 F1 | 	sub	objptr, ##56004
0a868     6C D5 B0 FD | 	call	#_psram_spin2_read1
0a86c     6D 00 00 FF 
0a870     DC E4 05 F1 | 	add	objptr, ##56028
0a874     F2 1E 02 FB | 	rdlong	local01, objptr
0a878     18 E4 85 F1 | 	sub	objptr, #24
0a87c     F2 1C 02 FB | 	rdlong	arg06, objptr
0a880     0E 1F 82 F1 | 	sub	local01, arg06
0a884     14 00 00 FF 
0a888     4C E5 85 F1 | 	sub	objptr, ##10572
0a88c     F2 1C 02 FB | 	rdlong	arg06, objptr
0a890     0E 1F 12 FD | 	qdiv	local01, arg06
0a894     05 00 00 FF 
0a898     18 E4 05 F1 | 	add	objptr, ##2584
0a89c     18 1E 62 FD | 	getqx	local01
0a8a0     03 1E 86 F1 | 	sub	local01, #3
0a8a4     F2 1E 62 FC | 	wrlong	local01, objptr
0a8a8     0F 00 00 FF 
0a8ac     34 E5 05 F1 | 	add	objptr, ##7988
0a8b0     F2 1E 02 FB | 	rdlong	local01, objptr
0a8b4     08 E4 05 F1 | 	add	objptr, #8
0a8b8     F2 1E 62 FC | 	wrlong	local01, objptr
0a8bc     78 00 00 FF 
0a8c0     8C E5 85 F1 | 	sub	objptr, ##61836
0a8c4                 | LR__0872
0a8c4     78 00 00 FF 
0a8c8     A8 E5 05 F1 | 	add	objptr, ##61864
0a8cc     F2 1E 02 FB | 	rdlong	local01, objptr
0a8d0     24 E4 85 F1 | 	sub	objptr, #36
0a8d4     F2 1E 62 FC | 	wrlong	local01, objptr
0a8d8     04 E4 05 F1 | 	add	objptr, #4
0a8dc     F2 12 02 FB | 	rdlong	arg01, objptr
0a8e0     78 00 00 FF 
0a8e4     88 E5 85 F1 | 	sub	objptr, ##61832
0a8e8     40 EB BF FD | 	call	#_execute_line
0a8ec     78 00 00 FF 
0a8f0     88 E5 05 F1 | 	add	objptr, ##61832
0a8f4     F2 FA 61 FC | 	wrlong	result1, objptr
0a8f8     04 E4 85 F1 | 	sub	objptr, #4
0a8fc     F2 1E 02 FB | 	rdlong	local01, objptr
0a900     78 00 00 FF 
0a904     84 E5 85 F1 | 	sub	objptr, ##61828
0a908     FF FF 3F FF 
0a90c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a910     0C 00 90 AD |  if_e	jmp	#LR__0873
0a914     50 D8 B0 FD | 	call	#_usbnew_spin2_get_key
0a918     06 FB 0D F2 | 	cmp	result1, #262 wz
0a91c     B4 FE 9F 5D |  if_ne	jmp	#LR__0871
0a920                 | LR__0873
0a920                 | ' if runheader(5)<>$7FFF_FFFF then 
0a920     78 00 00 FF 
0a924     A8 E5 05 F1 | 	add	objptr, ##61864
0a928     F2 1E 02 FB | 	rdlong	local01, objptr
0a92c     78 00 00 FF 
0a930     A8 E5 85 F1 | 	sub	objptr, ##61864
0a934     FF FF 3F FF 
0a938     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0a93c     BC 00 90 AD |  if_e	jmp	#LR__0875
0a940                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0a940     78 00 00 FF 
0a944     B4 E5 05 F1 | 	add	objptr, ##61876
0a948     F2 1E 02 FB | 	rdlong	local01, objptr
0a94c     78 00 00 FF 
0a950     B4 E5 85 F1 | 	sub	objptr, ##61876
0a954     01 1E 0E F2 | 	cmp	local01, #1 wz
0a958     3C 00 90 5D |  if_ne	jmp	#LR__0874
0a95c     7A 00 00 FF 
0a960     58 E4 05 F1 | 	add	objptr, ##62552
0a964     F2 14 02 FB | 	rdlong	arg02, objptr
0a968     04 E4 85 F1 | 	sub	objptr, #4
0a96c     F2 1A 02 FB | 	rdlong	arg05, objptr
0a970     07 12 06 F6 | 	mov	arg01, #7
0a974     56 00 00 FF 
0a978     44 16 06 F6 | 	mov	arg03, ##44100
0a97c     0E 18 C6 F9 | 	decod	arg04, #14
0a980     01 1C 66 F6 | 	neg	arg06, #1
0a984     6E 00 00 FF 
0a988     94 E5 85 F1 | 	sub	objptr, ##56724
0a98c     00 DB B0 FD | 	call	#_Audio093b_8_sc_spin2_play
0a990     0B 00 00 FF 
0a994     C0 E4 85 F1 | 	sub	objptr, ##5824
0a998                 | LR__0874
0a998                 | '   print "Stopped at line ";runheader(0)
0a998     00 12 06 F6 | 	mov	arg01, #0
0a99c     24 37 B1 FD | 	call	#__system___getiolock_0417
0a9a0     FD 12 02 F6 | 	mov	arg01, result1
0a9a4     20 DF B0 FD | 	call	#__system___lockmem
0a9a8     40 01 00 FF 
0a9ac     E2 14 06 F6 | 	mov	arg02, ##@LR__4573
0a9b0     00 12 06 F6 | 	mov	arg01, #0
0a9b4     00 16 06 F6 | 	mov	arg03, #0
0a9b8     FC EB B0 FD | 	call	#__system___basic_print_string
0a9bc     78 00 00 FF 
0a9c0     94 E5 05 F1 | 	add	objptr, ##61844
0a9c4     F2 14 02 FB | 	rdlong	arg02, objptr
0a9c8     78 00 00 FF 
0a9cc     94 E5 85 F1 | 	sub	objptr, ##61844
0a9d0     00 12 06 F6 | 	mov	arg01, #0
0a9d4     00 16 06 F6 | 	mov	arg03, #0
0a9d8     0A 18 06 F6 | 	mov	arg04, #10
0a9dc     5C EC B0 FD | 	call	#__system___basic_print_unsigned
0a9e0     00 12 06 F6 | 	mov	arg01, #0
0a9e4     0A 14 06 F6 | 	mov	arg02, #10
0a9e8     00 16 06 F6 | 	mov	arg03, #0
0a9ec     70 EB B0 FD | 	call	#__system___basic_print_char
0a9f0     00 12 06 F6 | 	mov	arg01, #0
0a9f4     CC 36 B1 FD | 	call	#__system___getiolock_0417
0a9f8     FD 00 68 FC | 	wrlong	#0, result1
0a9fc                 | LR__0875
0a9fc     78 00 00 FF 
0aa00     90 E5 05 F1 | 	add	objptr, ##61840
0aa04     F2 00 68 FC | 	wrlong	#0, objptr
0aa08     78 00 00 FF 
0aa0c     90 E5 85 F1 | 	sub	objptr, ##61840
0aa10                 | LR__0876
0aa10     A7 F0 03 F6 | 	mov	ptra, fp
0aa14     B2 00 A0 FD | 	call	#popregs_
0aa18                 | _do_run_ret
0aa18     2D 00 64 FD | 	ret
0aa1c                 | 
0aa1c                 | ' 
0aa1c                 | ' sub do_defenv
0aa1c                 | _do_defenv
0aa1c     05 4A 05 F6 | 	mov	COUNT_, #5
0aa20     A8 00 A0 FD | 	call	#pushregs_
0aa24     84 F0 07 F1 | 	add	ptra, #132
0aa28     69 00 00 FF 
0aa2c     54 E4 05 F1 | 	add	objptr, ##53844
0aa30     F2 1A 02 FB | 	rdlong	arg05, objptr
0aa34     0D 19 02 F6 | 	mov	arg04, arg05
0aa38     01 18 66 F0 | 	shl	arg04, #1
0aa3c     0D 19 02 F1 | 	add	arg04, arg05
0aa40     02 18 66 F0 | 	shl	arg04, #2
0aa44     03 00 00 FF 
0aa48     04 E4 85 F1 | 	sub	objptr, ##1540
0aa4c     F2 18 02 F1 | 	add	arg04, objptr
0aa50     0C 1B 02 FB | 	rdlong	arg05, arg04
0aa54     A7 1A 62 FC | 	wrlong	arg05, fp
0aa58                 | ' 
0aa58                 | ' numpar=compiledline(lineptr_e).result.uresult
0aa58                 | ' 
0aa58                 | ' 
0aa58                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0aa58                 | ' ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0aa58                 | ' ' Every 5 ms added 
0aa58                 | ' ' defsnd channel, a,d,s,r - defines ADSR as in SID 
0aa58                 | ' 
0aa58                 | ' 
0aa58                 | ' if numpar<2 then return
0aa58     02 1A 56 F2 | 	cmps	arg05, #2 wc
0aa5c     66 00 00 FF 
0aa60     50 E4 85 F1 | 	sub	objptr, ##52304
0aa64     40 0A 90 CD |  if_b	jmp	#LR__0907
0aa68                 | ' 
0aa68                 | '  
0aa68                 | ' if numpar=2 then
0aa68     A7 1A 02 FB | 	rdlong	arg05, fp
0aa6c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0aa70     AC 04 90 5D |  if_ne	jmp	#LR__0890
0aa74     B8 EA BF FD | 	call	#_pop
0aa78     FF 1A 02 F6 | 	mov	arg05, result3
0aa7c     28 4E 05 F1 | 	add	fp, #40
0aa80     A7 FA 61 FC | 	wrlong	result1, fp
0aa84     04 4E 05 F1 | 	add	fp, #4
0aa88     A7 FC 61 FC | 	wrlong	result2, fp
0aa8c     04 4E 05 F1 | 	add	fp, #4
0aa90     A7 1A 62 FC | 	wrlong	arg05, fp
0aa94                 | '   t1=pop()
0aa94                 | '   if t1.result_type=result_string2 then 
0aa94     30 4E 85 F1 | 	sub	fp, #48
0aa98     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0aa9c     20 00 90 5D |  if_ne	jmp	#LR__0880
0aaa0     28 4E 05 F1 | 	add	fp, #40
0aaa4     A7 12 02 FB | 	rdlong	arg01, fp
0aaa8     28 4E 85 F1 | 	sub	fp, #40
0aaac     88 1B B0 FD | 	call	#_convertstring
0aab0     34 4E 05 F1 | 	add	fp, #52
0aab4     A7 FA 61 FC | 	wrlong	result1, fp
0aab8     34 4E 85 F1 | 	sub	fp, #52
0aabc     40 00 90 FD | 	jmp	#LR__0883
0aac0                 | LR__0880
0aac0     30 4E 05 F1 | 	add	fp, #48
0aac4     A7 1A 02 FB | 	rdlong	arg05, fp
0aac8     30 4E 85 F1 | 	sub	fp, #48
0aacc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0aad0     18 00 90 5D |  if_ne	jmp	#LR__0881
0aad4     28 4E 05 F1 | 	add	fp, #40
0aad8     A7 1A 02 FB | 	rdlong	arg05, fp
0aadc     0C 4E 05 F1 | 	add	fp, #12
0aae0     A7 1A 62 FC | 	wrlong	arg05, fp
0aae4     34 4E 85 F1 | 	sub	fp, #52
0aae8     14 00 90 FD | 	jmp	#LR__0882
0aaec                 | LR__0881
0aaec     40 01 00 FF 
0aaf0     F3 1A 06 F6 | 	mov	arg05, ##@LR__4574
0aaf4     34 4E 05 F1 | 	add	fp, #52
0aaf8     A7 1A 62 FC | 	wrlong	arg05, fp
0aafc     34 4E 85 F1 | 	sub	fp, #52
0ab00                 | LR__0882
0ab00                 | LR__0883
0ab00                 | ' 
0ab00                 | '     
0ab00                 | '   if s<>"" then 
0ab00     34 4E 05 F1 | 	add	fp, #52
0ab04     A7 12 02 FB | 	rdlong	arg01, fp
0ab08     34 4E 85 F1 | 	sub	fp, #52
0ab0c     40 01 00 FF 
0ab10     F4 14 06 F6 | 	mov	arg02, ##@LR__4575
0ab14     D8 DD B0 FD | 	call	#__system___string_cmp
0ab18     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab1c     9C 02 90 AD |  if_e	jmp	#LR__0888
0ab20     0C EA BF FD | 	call	#_pop
0ab24     FF 1A 02 F6 | 	mov	arg05, result3
0ab28     28 4E 05 F1 | 	add	fp, #40
0ab2c     A7 FA 61 FC | 	wrlong	result1, fp
0ab30     04 4E 05 F1 | 	add	fp, #4
0ab34     A7 FC 61 FC | 	wrlong	result2, fp
0ab38     04 4E 05 F1 | 	add	fp, #4
0ab3c     A7 1A 62 FC | 	wrlong	arg05, fp
0ab40     08 4E 85 F1 | 	sub	fp, #8
0ab44     A7 12 02 F6 | 	mov	arg01, fp
0ab48     28 4E 85 F1 | 	sub	fp, #40
0ab4c     70 5E B0 FD | 	call	#_converttoint
0ab50     10 4E 05 F1 | 	add	fp, #16
0ab54     A7 FA 61 FC | 	wrlong	result1, fp
0ab58     10 4E 85 F1 | 	sub	fp, #16
0ab5c                 | '     t1=pop()
0ab5c                 | '     channel=converttoint(t1) 
0ab5c                 | '     close #9 : open "/sd/media/h/"+s for input as #9
0ab5c     09 12 06 F6 | 	mov	arg01, #9
0ab60     90 2B B1 FD | 	call	#__system__close
0ab64     09 1E 06 F6 | 	mov	local01, #9
0ab68     40 01 00 FF 
0ab6c     F5 12 06 F6 | 	mov	arg01, ##@LR__4576
0ab70     34 4E 05 F1 | 	add	fp, #52
0ab74     A7 14 02 FB | 	rdlong	arg02, fp
0ab78     34 4E 85 F1 | 	sub	fp, #52
0ab7c     A4 DD B0 FD | 	call	#__system___string_concat
0ab80     FD 14 02 F6 | 	mov	arg02, result1
0ab84     0F 13 02 F6 | 	mov	arg01, local01
0ab88     00 16 06 F6 | 	mov	arg03, #0
0ab8c     38 E9 B0 FD | 	call	#__system___basic_open_string
0ab90     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0ab94     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ab98     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0ab9c     7A 00 00 FF 
0aba0     C8 E4 05 F1 | 	add	objptr, ##62664
0aba4     F2 FA 61 FC | 	wrlong	result1, objptr
0aba8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0aba8     7A 00 00 FF 
0abac     C8 E4 85 F1 | 	sub	objptr, ##62664
0abb0     B0 00 90 AD |  if_e	jmp	#LR__0884
0abb4     00 12 06 F6 | 	mov	arg01, #0
0abb8     08 35 B1 FD | 	call	#__system___getiolock_0417
0abbc     FD 12 02 F6 | 	mov	arg01, result1
0abc0     04 DD B0 FD | 	call	#__system___lockmem
0abc4     40 01 00 FF 
0abc8     02 15 06 F6 | 	mov	arg02, ##@LR__4577
0abcc     00 12 06 F6 | 	mov	arg01, #0
0abd0     00 16 06 F6 | 	mov	arg03, #0
0abd4     E0 E9 B0 FD | 	call	#__system___basic_print_string
0abd8     7A 00 00 FF 
0abdc     C8 E4 05 F1 | 	add	objptr, ##62664
0abe0     F2 14 02 FB | 	rdlong	arg02, objptr
0abe4     7A 00 00 FF 
0abe8     C8 E4 85 F1 | 	sub	objptr, ##62664
0abec     00 12 06 F6 | 	mov	arg01, #0
0abf0     00 16 06 F6 | 	mov	arg03, #0
0abf4     0A 18 06 F6 | 	mov	arg04, #10
0abf8     00 EA B0 FD | 	call	#__system___basic_print_integer
0abfc     40 01 00 FF 
0ac00     10 15 06 F6 | 	mov	arg02, ##@LR__4578
0ac04     00 12 06 F6 | 	mov	arg01, #0
0ac08     00 16 06 F6 | 	mov	arg03, #0
0ac0c     A8 E9 B0 FD | 	call	#__system___basic_print_string
0ac10     00 1E 06 F6 | 	mov	local01, #0
0ac14     7A 00 00 FF 
0ac18     C8 E4 05 F1 | 	add	objptr, ##62664
0ac1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ac20     7A 00 00 FF 
0ac24     C8 E4 85 F1 | 	sub	objptr, ##62664
0ac28     94 01 B1 FD | 	call	#__system___strerror
0ac2c     FD 14 02 F6 | 	mov	arg02, result1
0ac30     0F 13 02 F6 | 	mov	arg01, local01
0ac34     00 16 06 F6 | 	mov	arg03, #0
0ac38     7C E9 B0 FD | 	call	#__system___basic_print_string
0ac3c     00 12 06 F6 | 	mov	arg01, #0
0ac40     0A 14 06 F6 | 	mov	arg02, #10
0ac44     00 16 06 F6 | 	mov	arg03, #0
0ac48     14 E9 B0 FD | 	call	#__system___basic_print_char
0ac4c     00 12 06 F6 | 	mov	arg01, #0
0ac50     70 34 B1 FD | 	call	#__system___getiolock_0417
0ac54     FD 00 68 FC | 	wrlong	#0, result1
0ac58     09 12 06 F6 | 	mov	arg01, #9
0ac5c     94 2A B1 FD | 	call	#__system__close
0ac60     44 08 90 FD | 	jmp	#LR__0907
0ac64                 | LR__0884
0ac64                 | '     get #9,17,envbuf8(channel,0),256
0ac64     10 4E 05 F1 | 	add	fp, #16
0ac68     A7 1A 02 FB | 	rdlong	arg05, fp
0ac6c     10 4E 85 F1 | 	sub	fp, #16
0ac70     0D 17 02 F6 | 	mov	arg03, arg05
0ac74     09 16 66 F0 | 	shl	arg03, #9
0ac78     0D 17 02 F1 | 	add	arg03, arg05
0ac7c     2B 00 00 FF 
0ac80     CC E5 05 F1 | 	add	objptr, ##22476
0ac84     F2 16 02 F1 | 	add	arg03, objptr
0ac88     09 12 06 F6 | 	mov	arg01, #9
0ac8c     11 14 06 F6 | 	mov	arg02, #17
0ac90     00 19 06 F6 | 	mov	arg04, #256
0ac94     01 1A 06 F6 | 	mov	arg05, #1
0ac98     2B 00 00 FF 
0ac9c     CC E5 85 F1 | 	sub	objptr, ##22476
0aca0     24 EA B0 FD | 	call	#__system___basic_get
0aca4                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0aca4     04 4E 05 F1 | 	add	fp, #4
0aca8     A7 FE 69 FC | 	wrlong	#255, fp
0acac     04 4E 85 F1 | 	sub	fp, #4
0acb0     2B 00 00 FF 
0acb4     CC E5 05 F1 | 	add	objptr, ##22476
0acb8     97 34 48 FB | 	callpa	#(@LR__0886-@LR__0885)>>2,fcache_load_ptr_
0acbc                 | LR__0885
0acbc     10 4E 05 F1 | 	add	fp, #16
0acc0     A7 1A 02 FB | 	rdlong	arg05, fp
0acc4     0D 19 02 F6 | 	mov	arg04, arg05
0acc8     08 18 66 F0 | 	shl	arg04, #8
0accc     0D 19 02 F1 | 	add	arg04, arg05
0acd0     01 18 66 F0 | 	shl	arg04, #1
0acd4     F2 18 02 F1 | 	add	arg04, objptr
0acd8     0C 4E 85 F1 | 	sub	fp, #12
0acdc     A7 16 02 FB | 	rdlong	arg03, fp
0ace0     0B 15 02 F6 | 	mov	arg02, arg03
0ace4     01 14 66 F0 | 	shl	arg02, #1
0ace8     0C 15 02 F1 | 	add	arg02, arg04
0acec     0D 19 02 F6 | 	mov	arg04, arg05
0acf0     09 18 66 F0 | 	shl	arg04, #9
0acf4     0D 19 02 F1 | 	add	arg04, arg05
0acf8     F2 18 02 F1 | 	add	arg04, objptr
0acfc     0C 17 02 F1 | 	add	arg03, arg04
0ad00     0B 1B C2 FA | 	rdbyte	arg05, arg03
0ad04     00 1B 06 FA | 	mul	arg05, #256
0ad08     0A 1B 52 FC | 	wrword	arg05, arg02
0ad0c     A7 1A 02 FB | 	rdlong	arg05, fp
0ad10     01 1A 86 F1 | 	sub	arg05, #1
0ad14     A7 1A 62 FC | 	wrlong	arg05, fp
0ad18     04 4E 85 F1 | 	sub	fp, #4
0ad1c     00 1A 56 F2 | 	cmps	arg05, #0 wc
0ad20     98 FF 9F 3D |  if_ae	jmp	#LR__0885
0ad24                 | LR__0886
0ad24     2B 00 00 FF 
0ad28     CC E5 85 F1 | 	sub	objptr, ##22476
0ad2c                 | '     close #9
0ad2c     09 12 06 F6 | 	mov	arg01, #9
0ad30     C0 29 B1 FD | 	call	#__system__close
0ad34                 | '                                                                       for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0ad34     04 4E 05 F1 | 	add	fp, #4
0ad38     A7 00 68 FC | 	wrlong	#0, fp
0ad3c                 | LR__0887
0ad3c     A7 1E 02 FB | 	rdlong	local01, fp
0ad40     0F 13 02 F6 | 	mov	arg01, local01
0ad44     0C 4E 05 F1 | 	add	fp, #12
0ad48     A7 1A 02 FB | 	rdlong	arg05, fp
0ad4c     0D 19 02 F6 | 	mov	arg04, arg05
0ad50     08 18 66 F0 | 	shl	arg04, #8
0ad54     0D 19 02 F1 | 	add	arg04, arg05
0ad58     01 18 66 F0 | 	shl	arg04, #1
0ad5c     2B 00 00 FF 
0ad60     CC E5 05 F1 | 	add	objptr, ##22476
0ad64     F2 18 02 F1 | 	add	arg04, objptr
0ad68     01 1E 66 F0 | 	shl	local01, #1
0ad6c     0C 1F 02 F1 | 	add	local01, arg04
0ad70     0F 1F E2 FA | 	rdword	local01, local01
0ad74     0F 1F 52 F6 | 	abs	local01, local01 wc
0ad78     90 1F 16 FD | 	qdiv	local01, #400
0ad7c     10 4E 85 F1 | 	sub	fp, #16
0ad80     2B 00 00 FF 
0ad84     CC E5 85 F1 | 	sub	objptr, ##22476
0ad88     20 15 06 F6 | 	mov	arg02, #288
0ad8c     28 16 06 F6 | 	mov	arg03, #40
0ad90     18 1E 62 FD | 	getqx	local01
0ad94     0F 15 A2 F3 | 	sumnc	arg02, local01
0ad98     DC BB B0 FD | 	call	#_hg010b_spin2_putpixel
0ad9c     04 4E 05 F1 | 	add	fp, #4
0ada0     A7 1E 02 FB | 	rdlong	local01, fp
0ada4     01 1E 06 F1 | 	add	local01, #1
0ada8     A7 1E 62 FC | 	wrlong	local01, fp
0adac     00 1F 56 F2 | 	cmps	local01, #256 wc
0adb0     88 FF 9F CD |  if_b	jmp	#LR__0887
0adb4     04 4E 85 F1 | 	sub	fp, #4
0adb8                 | '     return
0adb8     EC 06 90 FD | 	jmp	#LR__0907
0adbc                 | LR__0888
0adbc     28 4E 05 F1 | 	add	fp, #40
0adc0     A7 12 02 F6 | 	mov	arg01, fp
0adc4     28 4E 85 F1 | 	sub	fp, #40
0adc8     F4 5B B0 FD | 	call	#_converttoint
0adcc     FD 1E 02 F6 | 	mov	local01, result1
0add0     0C 4E 05 F1 | 	add	fp, #12
0add4     A7 1E 62 FC | 	wrlong	local01, fp
0add8     0C 4E 85 F1 | 	sub	fp, #12
0addc                 | '   
0addc                 | '   par=converttoint(t1)  : print par
0addc     00 12 06 F6 | 	mov	arg01, #0
0ade0     E0 32 B1 FD | 	call	#__system___getiolock_0417
0ade4     FD 12 02 F6 | 	mov	arg01, result1
0ade8     DC DA B0 FD | 	call	#__system___lockmem
0adec     0C 4E 05 F1 | 	add	fp, #12
0adf0     A7 14 02 FB | 	rdlong	arg02, fp
0adf4     0C 4E 85 F1 | 	sub	fp, #12
0adf8     00 12 06 F6 | 	mov	arg01, #0
0adfc     00 16 06 F6 | 	mov	arg03, #0
0ae00     0A 18 06 F6 | 	mov	arg04, #10
0ae04     F4 E7 B0 FD | 	call	#__system___basic_print_integer
0ae08     00 12 06 F6 | 	mov	arg01, #0
0ae0c     0A 14 06 F6 | 	mov	arg02, #10
0ae10     00 16 06 F6 | 	mov	arg03, #0
0ae14     48 E7 B0 FD | 	call	#__system___basic_print_char
0ae18     00 12 06 F6 | 	mov	arg01, #0
0ae1c     A4 32 B1 FD | 	call	#__system___getiolock_0417
0ae20     FD 00 68 FC | 	wrlong	#0, result1
0ae24     08 E7 BF FD | 	call	#_pop
0ae28     FF 1E 02 F6 | 	mov	local01, result3
0ae2c     28 4E 05 F1 | 	add	fp, #40
0ae30     A7 FA 61 FC | 	wrlong	result1, fp
0ae34     04 4E 05 F1 | 	add	fp, #4
0ae38     A7 FC 61 FC | 	wrlong	result2, fp
0ae3c     04 4E 05 F1 | 	add	fp, #4
0ae40     A7 1E 62 FC | 	wrlong	local01, fp
0ae44     08 4E 85 F1 | 	sub	fp, #8
0ae48     A7 12 02 F6 | 	mov	arg01, fp
0ae4c     28 4E 85 F1 | 	sub	fp, #40
0ae50     6C 5B B0 FD | 	call	#_converttoint
0ae54     10 4E 05 F1 | 	add	fp, #16
0ae58     A7 FA 61 FC | 	wrlong	result1, fp
0ae5c                 | '   t1=pop()
0ae5c                 | '   channel=converttoint(t1)  
0ae5c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0ae5c     04 4E 85 F1 | 	sub	fp, #4
0ae60     A7 1E 0A FB | 	rdlong	local01, fp wz
0ae64     0C 4E 85 F1 | 	sub	fp, #12
0ae68     3C 06 90 5D |  if_ne	jmp	#LR__0907
0ae6c     04 4E 05 F1 | 	add	fp, #4
0ae70     A7 00 68 FC | 	wrlong	#0, fp
0ae74     04 4E 85 F1 | 	sub	fp, #4
0ae78                 | LR__0889
0ae78     10 4E 05 F1 | 	add	fp, #16
0ae7c     A7 1E 02 FB | 	rdlong	local01, fp
0ae80     0B 1E 66 F0 | 	shl	local01, #11
0ae84     0B 00 00 FF 
0ae88     CC E5 05 F1 | 	add	objptr, ##6092
0ae8c     F2 1E 02 F1 | 	add	local01, objptr
0ae90     0C 4E 85 F1 | 	sub	fp, #12
0ae94     A7 12 02 FB | 	rdlong	arg01, fp
0ae98     09 21 02 F6 | 	mov	local02, arg01
0ae9c     01 20 66 F0 | 	shl	local02, #1
0aea0     0F 21 02 F1 | 	add	local02, local01
0aea4     04 4E 85 F1 | 	sub	fp, #4
0aea8     0B 00 00 FF 
0aeac     CC E5 85 F1 | 	sub	objptr, ##6092
0aeb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0aeb4     1F 22 C6 C9 |  if_b	decod	local03, #31
0aeb8     00 22 06 36 |  if_ae	mov	local03, #0
0aebc     E8 FF B0 FD | 	call	#__system___float_fromuns
0aec0     11 FB 61 F5 | 	xor	result1, local03
0aec4     FD 14 02 F6 | 	mov	arg02, result1
0aec8     87 E4 1D FF 
0aecc     DB 13 06 F6 | 	mov	arg01, ##1003032539
0aed0     D8 03 B1 FD | 	call	#__system___float_mul
0aed4     FD 12 02 F6 | 	mov	arg01, result1
0aed8     0C 0D B1 FD | 	call	#__system____builtin_sinf
0aedc     FD 14 02 F6 | 	mov	arg02, result1
0aee0     58 7F 23 FF 
0aee4     00 12 06 F6 | 	mov	arg01, ##1191096320
0aee8     C0 03 B1 FD | 	call	#__system___float_mul
0aeec     FD 12 02 F6 | 	mov	arg01, result1
0aef0     01 14 06 F6 | 	mov	arg02, #1
0aef4     7C 08 B1 FD | 	call	#__system___float_tointeger
0aef8     10 FB 51 FC | 	wrword	result1, local02
0aefc     04 4E 05 F1 | 	add	fp, #4
0af00     A7 20 02 FB | 	rdlong	local02, fp
0af04     01 20 06 F1 | 	add	local02, #1
0af08     A7 20 62 FC | 	wrlong	local02, fp
0af0c     04 4E 85 F1 | 	sub	fp, #4
0af10     02 00 00 FF 
0af14     00 20 56 F2 | 	cmps	local02, ##1024 wc
0af18     5C FF 9F CD |  if_b	jmp	#LR__0889
0af1c                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0af1c                 | '   return
0af1c     88 05 90 FD | 	jmp	#LR__0907
0af20                 | LR__0890
0af20                 | ' for i=0 to 15 : harm(i)=0: next i  
0af20     04 4E 05 F1 | 	add	fp, #4
0af24     A7 00 68 FC | 	wrlong	#0, fp
0af28     97 16 48 FB | 	callpa	#(@LR__0892-@LR__0891)>>2,fcache_load_ptr_
0af2c                 | LR__0891
0af2c     A7 1E 02 FB | 	rdlong	local01, fp
0af30     02 1E 66 F0 | 	shl	local01, #2
0af34     34 4E 05 F1 | 	add	fp, #52
0af38     A7 1E 02 F1 | 	add	local01, fp
0af3c     0F 01 68 FC | 	wrlong	#0, local01
0af40     34 4E 85 F1 | 	sub	fp, #52
0af44     A7 1E 02 FB | 	rdlong	local01, fp
0af48     01 1E 06 F1 | 	add	local01, #1
0af4c     A7 1E 62 FC | 	wrlong	local01, fp
0af50     10 1E 56 F2 | 	cmps	local01, #16 wc
0af54     D4 FF 9F CD |  if_b	jmp	#LR__0891
0af58                 | LR__0892
0af58     04 4E 85 F1 | 	sub	fp, #4
0af5c                 | ' for i=numpar to 2 step -1 
0af5c     A7 1E 02 FB | 	rdlong	local01, fp
0af60     04 4E 05 F1 | 	add	fp, #4
0af64     A7 1E 62 FC | 	wrlong	local01, fp
0af68     04 4E 85 F1 | 	sub	fp, #4
0af6c                 | LR__0893
0af6c     C0 E5 BF FD | 	call	#_pop
0af70     28 4E 05 F1 | 	add	fp, #40
0af74     A7 FA 61 FC | 	wrlong	result1, fp
0af78     04 4E 05 F1 | 	add	fp, #4
0af7c     A7 FC 61 FC | 	wrlong	result2, fp
0af80     04 4E 05 F1 | 	add	fp, #4
0af84     A7 FE 61 FC | 	wrlong	result3, fp
0af88     2C 4E 85 F1 | 	sub	fp, #44
0af8c     A7 1E 02 FB | 	rdlong	local01, fp
0af90     02 1E 86 F1 | 	sub	local01, #2
0af94     02 1E 66 F0 | 	shl	local01, #2
0af98     34 4E 05 F1 | 	add	fp, #52
0af9c     A7 1E 02 F1 | 	add	local01, fp
0afa0     10 4E 85 F1 | 	sub	fp, #16
0afa4     A7 12 02 F6 | 	mov	arg01, fp
0afa8     28 4E 85 F1 | 	sub	fp, #40
0afac     BC 5A B0 FD | 	call	#_converttofloat
0afb0     0F FB 61 FC | 	wrlong	result1, local01
0afb4     04 4E 05 F1 | 	add	fp, #4
0afb8     A7 1E 02 FB | 	rdlong	local01, fp
0afbc     01 1E 86 F1 | 	sub	local01, #1
0afc0     A7 1E 62 FC | 	wrlong	local01, fp
0afc4     04 4E 85 F1 | 	sub	fp, #4
0afc8     02 1E 56 F2 | 	cmps	local01, #2 wc
0afcc     9C FF 9F 3D |  if_ae	jmp	#LR__0893
0afd0     5C E5 BF FD | 	call	#_pop
0afd4     FF 1E 02 F6 | 	mov	local01, result3
0afd8     28 4E 05 F1 | 	add	fp, #40
0afdc     A7 FA 61 FC | 	wrlong	result1, fp
0afe0     04 4E 05 F1 | 	add	fp, #4
0afe4     A7 FC 61 FC | 	wrlong	result2, fp
0afe8     04 4E 05 F1 | 	add	fp, #4
0afec     A7 1E 62 FC | 	wrlong	local01, fp
0aff0     08 4E 85 F1 | 	sub	fp, #8
0aff4     A7 12 02 F6 | 	mov	arg01, fp
0aff8     28 4E 85 F1 | 	sub	fp, #40
0affc     C0 59 B0 FD | 	call	#_converttoint
0b000     FD 1E 02 F6 | 	mov	local01, result1
0b004     10 4E 05 F1 | 	add	fp, #16
0b008     A7 1E 62 FC | 	wrlong	local01, fp
0b00c     10 4E 85 F1 | 	sub	fp, #16
0b010                 | ' t1=pop()
0b010                 | ' channel=converttoint(t1) : print channel
0b010     00 12 06 F6 | 	mov	arg01, #0
0b014     AC 30 B1 FD | 	call	#__system___getiolock_0417
0b018     FD 12 02 F6 | 	mov	arg01, result1
0b01c     A8 D8 B0 FD | 	call	#__system___lockmem
0b020     10 4E 05 F1 | 	add	fp, #16
0b024     A7 14 02 FB | 	rdlong	arg02, fp
0b028     10 4E 85 F1 | 	sub	fp, #16
0b02c     00 12 06 F6 | 	mov	arg01, #0
0b030     00 16 06 F6 | 	mov	arg03, #0
0b034     0A 18 06 F6 | 	mov	arg04, #10
0b038     C0 E5 B0 FD | 	call	#__system___basic_print_integer
0b03c     00 12 06 F6 | 	mov	arg01, #0
0b040     0A 14 06 F6 | 	mov	arg02, #10
0b044     00 16 06 F6 | 	mov	arg03, #0
0b048     14 E5 B0 FD | 	call	#__system___basic_print_char
0b04c     00 12 06 F6 | 	mov	arg01, #0
0b050     70 30 B1 FD | 	call	#__system___getiolock_0417
0b054     FD 00 68 FC | 	wrlong	#0, result1
0b058                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b058     08 4E 05 F1 | 	add	fp, #8
0b05c     02 00 80 FF 
0b060     A7 00 68 FC | 	wrlong	##1024, fp
0b064     08 4E 85 F1 | 	sub	fp, #8
0b068     0B 00 00 FF 
0b06c     CC E5 05 F1 | 	add	objptr, ##6092
0b070     97 18 48 FB | 	callpa	#(@LR__0896-@LR__0894)>>2,fcache_load_ptr_
0b074                 | LR__0894
0b074     02 00 00 FF 
0b078     00 14 DC FC | 	rep	@LR__0897, ##1024
0b07c                 | LR__0895
0b07c     10 4E 05 F1 | 	add	fp, #16
0b080     A7 20 02 FB | 	rdlong	local02, fp
0b084     0B 20 66 F0 | 	shl	local02, #11
0b088     F2 20 02 F1 | 	add	local02, objptr
0b08c     0C 4E 85 F1 | 	sub	fp, #12
0b090     A7 1E 02 FB | 	rdlong	local01, fp
0b094     04 4E 85 F1 | 	sub	fp, #4
0b098     01 1E 66 F0 | 	shl	local01, #1
0b09c     10 1F 02 F1 | 	add	local01, local02
0b0a0     0F 01 58 FC | 	wrword	#0, local01
0b0a4                 | LR__0896
0b0a4                 | LR__0897
0b0a4     0B 00 00 FF 
0b0a8     CC E5 85 F1 | 	sub	objptr, ##6092
0b0ac     1C 4E 05 F1 | 	add	fp, #28
0b0b0     A7 00 68 FC | 	wrlong	#0, fp
0b0b4                 | ' max=0
0b0b4                 | ' if harm(0)<0 then
0b0b4     1C 4E 05 F1 | 	add	fp, #28
0b0b8     A7 12 02 FB | 	rdlong	arg01, fp
0b0bc     38 4E 85 F1 | 	sub	fp, #56
0b0c0     00 14 06 F6 | 	mov	arg02, #0
0b0c4     01 16 06 F6 | 	mov	arg03, #1
0b0c8     14 06 B1 FD | 	call	#__system___float_cmp
0b0cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0b0d0     04 01 90 3D |  if_ae	jmp	#LR__0900
0b0d4     38 4E 05 F1 | 	add	fp, #56
0b0d8     A7 FA 01 FB | 	rdlong	result1, fp
0b0dc     1F FA 05 F4 | 	bitl	result1, #31
0b0e0     24 4E 85 F1 | 	sub	fp, #36
0b0e4     A7 FA 61 FC | 	wrlong	result1, fp
0b0e8     28 4E 05 F1 | 	add	fp, #40
0b0ec     A7 FA 01 FB | 	rdlong	result1, fp
0b0f0     1F FA 05 F4 | 	bitl	result1, #31
0b0f4     24 4E 85 F1 | 	sub	fp, #36
0b0f8     A7 FA 61 FC | 	wrlong	result1, fp
0b0fc     20 4E 05 F1 | 	add	fp, #32
0b100     00 C0 9F FF 
0b104     A7 00 68 FC | 	wrlong	##1065353216, fp
0b108     24 4E 85 F1 | 	sub	fp, #36
0b10c     A7 1E 02 FB | 	rdlong	local01, fp
0b110     28 4E 05 F1 | 	add	fp, #40
0b114     A7 1E 62 FC | 	wrlong	local01, fp
0b118     24 4E 85 F1 | 	sub	fp, #36
0b11c     A7 1E 02 FB | 	rdlong	local01, fp
0b120     28 4E 05 F1 | 	add	fp, #40
0b124     A7 1E 62 FC | 	wrlong	local01, fp
0b128                 | '   harm(0)=1
0b128                 | '   harm(1)=even
0b128                 | '   harm(2)=odd
0b128                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0b128     3C 4E 85 F1 | 	sub	fp, #60
0b12c     A7 06 68 FC | 	wrlong	#3, fp
0b130                 | LR__0898
0b130     A7 1A 02 FB | 	rdlong	arg05, fp
0b134     0D 25 02 F6 | 	mov	local04, arg05
0b138     02 24 66 F0 | 	shl	local04, #2
0b13c     34 4E 05 F1 | 	add	fp, #52
0b140     A7 24 02 F1 | 	add	local04, fp
0b144     02 1A 86 F1 | 	sub	arg05, #2
0b148     02 1A 66 F0 | 	shl	arg05, #2
0b14c     A7 1A 02 F1 | 	add	arg05, fp
0b150     0D 13 02 FB | 	rdlong	arg01, arg05
0b154     24 4E 85 F1 | 	sub	fp, #36
0b158     A7 14 02 FB | 	rdlong	arg02, fp
0b15c     14 4E 85 F1 | 	sub	fp, #20
0b160     48 01 B1 FD | 	call	#__system___float_mul
0b164     12 FB 61 FC | 	wrlong	result1, local04
0b168     04 4E 05 F1 | 	add	fp, #4
0b16c     A7 26 02 FB | 	rdlong	local05, fp
0b170     02 26 06 F1 | 	add	local05, #2
0b174     A7 26 62 FC | 	wrlong	local05, fp
0b178     10 26 56 F2 | 	cmps	local05, #16 wc
0b17c     B0 FF 9F CD |  if_b	jmp	#LR__0898
0b180                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0b180     A7 08 68 FC | 	wrlong	#4, fp
0b184                 | LR__0899
0b184     A7 26 02 FB | 	rdlong	local05, fp
0b188     13 25 02 F6 | 	mov	local04, local05
0b18c     02 24 66 F0 | 	shl	local04, #2
0b190     34 4E 05 F1 | 	add	fp, #52
0b194     A7 24 02 F1 | 	add	local04, fp
0b198     02 26 86 F1 | 	sub	local05, #2
0b19c     02 26 66 F0 | 	shl	local05, #2
0b1a0     A7 26 02 F1 | 	add	local05, fp
0b1a4     13 13 02 FB | 	rdlong	arg01, local05
0b1a8     20 4E 85 F1 | 	sub	fp, #32
0b1ac     A7 14 02 FB | 	rdlong	arg02, fp
0b1b0     18 4E 85 F1 | 	sub	fp, #24
0b1b4     F4 00 B1 FD | 	call	#__system___float_mul
0b1b8     12 FB 61 FC | 	wrlong	result1, local04
0b1bc     04 4E 05 F1 | 	add	fp, #4
0b1c0     A7 26 02 FB | 	rdlong	local05, fp
0b1c4     02 26 06 F1 | 	add	local05, #2
0b1c8     A7 26 62 FC | 	wrlong	local05, fp
0b1cc     0F 26 56 F2 | 	cmps	local05, #15 wc
0b1d0     B0 FF 9F CD |  if_b	jmp	#LR__0899
0b1d4     04 4E 85 F1 | 	sub	fp, #4
0b1d8                 | LR__0900
0b1d8                 | ' if harm(0)>=0 then ' synthesize with harmonics
0b1d8     38 4E 05 F1 | 	add	fp, #56
0b1dc     A7 12 02 FB | 	rdlong	arg01, fp
0b1e0     38 4E 85 F1 | 	sub	fp, #56
0b1e4     00 14 06 F6 | 	mov	arg02, #0
0b1e8     01 16 66 F6 | 	neg	arg03, #1
0b1ec     F0 04 B1 FD | 	call	#__system___float_cmp
0b1f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b1f4     B0 02 90 CD |  if_b	jmp	#LR__0906
0b1f8                 | '   for i=0 to 1023
0b1f8     04 4E 05 F1 | 	add	fp, #4
0b1fc     A7 00 68 FC | 	wrlong	#0, fp
0b200     04 4E 85 F1 | 	sub	fp, #4
0b204                 | LR__0901
0b204     20 4E 05 F1 | 	add	fp, #32
0b208     A7 00 68 FC | 	wrlong	#0, fp
0b20c                 | '     spl=0
0b20c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0b20c     18 4E 85 F1 | 	sub	fp, #24
0b210     A7 00 68 FC | 	wrlong	#0, fp
0b214                 | LR__0902
0b214     A7 24 02 FB | 	rdlong	local04, fp
0b218     02 24 66 F0 | 	shl	local04, #2
0b21c     30 4E 05 F1 | 	add	fp, #48
0b220     A7 24 02 F1 | 	add	local04, fp
0b224     12 27 02 FB | 	rdlong	local05, local04
0b228     87 E4 1D FF 
0b22c     DB 25 06 F6 | 	mov	local04, ##1003032539
0b230     34 4E 85 F1 | 	sub	fp, #52
0b234     A7 12 02 FB | 	rdlong	arg01, fp
0b238     04 4E 85 F1 | 	sub	fp, #4
0b23c     09 13 52 F6 | 	abs	arg01, arg01 wc
0b240     1F 22 C6 C9 |  if_b	decod	local03, #31
0b244     00 22 06 36 |  if_ae	mov	local03, #0
0b248     5C FC B0 FD | 	call	#__system___float_fromuns
0b24c     11 FB 61 F5 | 	xor	result1, local03
0b250     FD 14 02 F6 | 	mov	arg02, result1
0b254     12 13 02 F6 | 	mov	arg01, local04
0b258     50 00 B1 FD | 	call	#__system___float_mul
0b25c     FD 24 02 F6 | 	mov	local04, result1
0b260     08 4E 05 F1 | 	add	fp, #8
0b264     A7 12 02 FB | 	rdlong	arg01, fp
0b268     08 4E 85 F1 | 	sub	fp, #8
0b26c     01 12 06 F1 | 	add	arg01, #1
0b270     09 13 52 F6 | 	abs	arg01, arg01 wc
0b274     1F 22 C6 C9 |  if_b	decod	local03, #31
0b278     00 22 06 36 |  if_ae	mov	local03, #0
0b27c     28 FC B0 FD | 	call	#__system___float_fromuns
0b280     11 FB 61 F5 | 	xor	result1, local03
0b284     FD 14 02 F6 | 	mov	arg02, result1
0b288     12 13 02 F6 | 	mov	arg01, local04
0b28c     1C 00 B1 FD | 	call	#__system___float_mul
0b290     FD 12 02 F6 | 	mov	arg01, result1
0b294     50 09 B1 FD | 	call	#__system____builtin_sinf
0b298     FD 14 02 F6 | 	mov	arg02, result1
0b29c     13 13 02 F6 | 	mov	arg01, local05
0b2a0     08 00 B1 FD | 	call	#__system___float_mul
0b2a4     FD 14 02 F6 | 	mov	arg02, result1
0b2a8     20 4E 05 F1 | 	add	fp, #32
0b2ac     A7 12 02 FB | 	rdlong	arg01, fp
0b2b0     20 4E 85 F1 | 	sub	fp, #32
0b2b4     24 FC B0 FD | 	call	#__system___float_add
0b2b8     20 4E 05 F1 | 	add	fp, #32
0b2bc     A7 FA 61 FC | 	wrlong	result1, fp
0b2c0     18 4E 85 F1 | 	sub	fp, #24
0b2c4     A7 16 02 FB | 	rdlong	arg03, fp
0b2c8     01 16 06 F1 | 	add	arg03, #1
0b2cc     A7 16 62 FC | 	wrlong	arg03, fp
0b2d0     10 16 56 F2 | 	cmps	arg03, #16 wc
0b2d4     3C FF 9F CD |  if_b	jmp	#LR__0902
0b2d8                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0b2d8     18 4E 05 F1 | 	add	fp, #24
0b2dc     A7 12 02 FB | 	rdlong	arg01, fp
0b2e0     1F 12 06 F4 | 	bitl	arg01, #31
0b2e4     04 4E 85 F1 | 	sub	fp, #4
0b2e8     A7 14 02 FB | 	rdlong	arg02, fp
0b2ec     1C 4E 85 F1 | 	sub	fp, #28
0b2f0     01 16 66 F6 | 	neg	arg03, #1
0b2f4     E8 03 B1 FD | 	call	#__system___float_cmp
0b2f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0b2fc     18 00 90 CD |  if_b	jmp	#LR__0903
0b300     20 4E 05 F1 | 	add	fp, #32
0b304     A7 FA 01 FB | 	rdlong	result1, fp
0b308     1F FA 05 F4 | 	bitl	result1, #31
0b30c     04 4E 85 F1 | 	sub	fp, #4
0b310     A7 FA 61 FC | 	wrlong	result1, fp
0b314     1C 4E 85 F1 | 	sub	fp, #28
0b318                 | LR__0903
0b318     04 4E 05 F1 | 	add	fp, #4
0b31c     A7 26 02 FB | 	rdlong	local05, fp
0b320     01 26 06 F1 | 	add	local05, #1
0b324     A7 26 62 FC | 	wrlong	local05, fp
0b328     04 4E 85 F1 | 	sub	fp, #4
0b32c     02 00 00 FF 
0b330     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b334     CC FE 9F CD |  if_b	jmp	#LR__0901
0b338                 | '   for i=0 to 1023
0b338     04 4E 05 F1 | 	add	fp, #4
0b33c     A7 00 68 FC | 	wrlong	#0, fp
0b340     04 4E 85 F1 | 	sub	fp, #4
0b344                 | LR__0904
0b344     20 4E 05 F1 | 	add	fp, #32
0b348     A7 00 68 FC | 	wrlong	#0, fp
0b34c                 | '     spl=0
0b34c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0b34c     18 4E 85 F1 | 	sub	fp, #24
0b350     A7 00 68 FC | 	wrlong	#0, fp
0b354                 | LR__0905
0b354     A7 26 02 FB | 	rdlong	local05, fp
0b358     02 26 66 F0 | 	shl	local05, #2
0b35c     30 4E 05 F1 | 	add	fp, #48
0b360     A7 26 02 F1 | 	add	local05, fp
0b364     13 27 02 FB | 	rdlong	local05, local05
0b368     1C 4E 85 F1 | 	sub	fp, #28
0b36c     A7 14 02 FB | 	rdlong	arg02, fp
0b370     1C 4E 85 F1 | 	sub	fp, #28
0b374     58 7F 23 FF 
0b378     00 12 06 F6 | 	mov	arg01, ##1191096320
0b37c     30 01 B1 FD | 	call	#__system___float_div
0b380     FD 14 02 F6 | 	mov	arg02, result1
0b384     13 13 02 F6 | 	mov	arg01, local05
0b388     20 FF B0 FD | 	call	#__system___float_mul
0b38c     FD 26 02 F6 | 	mov	local05, result1
0b390     87 E4 1D FF 
0b394     DB 25 06 F6 | 	mov	local04, ##1003032539
0b398     04 4E 05 F1 | 	add	fp, #4
0b39c     A7 12 02 FB | 	rdlong	arg01, fp
0b3a0     04 4E 85 F1 | 	sub	fp, #4
0b3a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b3a8     1F 22 C6 C9 |  if_b	decod	local03, #31
0b3ac     00 22 06 36 |  if_ae	mov	local03, #0
0b3b0     F4 FA B0 FD | 	call	#__system___float_fromuns
0b3b4     11 FB 61 F5 | 	xor	result1, local03
0b3b8     FD 14 02 F6 | 	mov	arg02, result1
0b3bc     12 13 02 F6 | 	mov	arg01, local04
0b3c0     E8 FE B0 FD | 	call	#__system___float_mul
0b3c4     FD 24 02 F6 | 	mov	local04, result1
0b3c8     08 4E 05 F1 | 	add	fp, #8
0b3cc     A7 12 02 FB | 	rdlong	arg01, fp
0b3d0     08 4E 85 F1 | 	sub	fp, #8
0b3d4     01 12 06 F1 | 	add	arg01, #1
0b3d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0b3dc     1F 22 C6 C9 |  if_b	decod	local03, #31
0b3e0     00 22 06 36 |  if_ae	mov	local03, #0
0b3e4     C0 FA B0 FD | 	call	#__system___float_fromuns
0b3e8     11 FB 61 F5 | 	xor	result1, local03
0b3ec     FD 14 02 F6 | 	mov	arg02, result1
0b3f0     12 13 02 F6 | 	mov	arg01, local04
0b3f4     B4 FE B0 FD | 	call	#__system___float_mul
0b3f8     FD 12 02 F6 | 	mov	arg01, result1
0b3fc     E8 07 B1 FD | 	call	#__system____builtin_sinf
0b400     FD 14 02 F6 | 	mov	arg02, result1
0b404     13 13 02 F6 | 	mov	arg01, local05
0b408     A0 FE B0 FD | 	call	#__system___float_mul
0b40c     FD 14 02 F6 | 	mov	arg02, result1
0b410     20 4E 05 F1 | 	add	fp, #32
0b414     A7 12 02 FB | 	rdlong	arg01, fp
0b418     20 4E 85 F1 | 	sub	fp, #32
0b41c     BC FA B0 FD | 	call	#__system___float_add
0b420     20 4E 05 F1 | 	add	fp, #32
0b424     A7 FA 61 FC | 	wrlong	result1, fp
0b428     18 4E 85 F1 | 	sub	fp, #24
0b42c     A7 26 02 FB | 	rdlong	local05, fp
0b430     01 26 06 F1 | 	add	local05, #1
0b434     A7 26 62 FC | 	wrlong	local05, fp
0b438     10 26 56 F2 | 	cmps	local05, #16 wc
0b43c     14 FF 9F CD |  if_b	jmp	#LR__0905
0b440     08 4E 05 F1 | 	add	fp, #8
0b444     A7 26 02 FB | 	rdlong	local05, fp
0b448     0B 26 66 F0 | 	shl	local05, #11
0b44c     0B 00 00 FF 
0b450     CC E5 05 F1 | 	add	objptr, ##6092
0b454     F2 26 02 F1 | 	add	local05, objptr
0b458     0C 4E 85 F1 | 	sub	fp, #12
0b45c     A7 20 02 FB | 	rdlong	local02, fp
0b460     01 20 66 F0 | 	shl	local02, #1
0b464     13 21 02 F1 | 	add	local02, local05
0b468     1C 4E 05 F1 | 	add	fp, #28
0b46c     A7 12 02 FB | 	rdlong	arg01, fp
0b470     20 4E 85 F1 | 	sub	fp, #32
0b474     0B 00 00 FF 
0b478     CC E5 85 F1 | 	sub	objptr, ##6092
0b47c     01 14 06 F6 | 	mov	arg02, #1
0b480     F0 02 B1 FD | 	call	#__system___float_tointeger
0b484     10 FB 51 FC | 	wrword	result1, local02
0b488     04 4E 05 F1 | 	add	fp, #4
0b48c     A7 26 02 FB | 	rdlong	local05, fp
0b490     01 26 06 F1 | 	add	local05, #1
0b494     A7 26 62 FC | 	wrlong	local05, fp
0b498     04 4E 85 F1 | 	sub	fp, #4
0b49c     02 00 00 FF 
0b4a0     00 26 56 F2 | 	cmps	local05, ##1024 wc
0b4a4     9C FE 9F CD |  if_b	jmp	#LR__0904
0b4a8                 | LR__0906
0b4a8                 | LR__0907
0b4a8     A7 F0 03 F6 | 	mov	ptra, fp
0b4ac     B2 00 A0 FD | 	call	#popregs_
0b4b0                 | _do_defenv_ret
0b4b0     2D 00 64 FD | 	ret
0b4b4                 | 
0b4b4                 | ' 
0b4b4                 | ' sub do_defsnd
0b4b4                 | _do_defsnd
0b4b4     05 4A 05 F6 | 	mov	COUNT_, #5
0b4b8     A8 00 A0 FD | 	call	#pushregs_
0b4bc     84 F0 07 F1 | 	add	ptra, #132
0b4c0     69 00 00 FF 
0b4c4     54 E4 05 F1 | 	add	objptr, ##53844
0b4c8     F2 1A 02 FB | 	rdlong	arg05, objptr
0b4cc     0D 19 02 F6 | 	mov	arg04, arg05
0b4d0     01 18 66 F0 | 	shl	arg04, #1
0b4d4     0D 19 02 F1 | 	add	arg04, arg05
0b4d8     02 18 66 F0 | 	shl	arg04, #2
0b4dc     03 00 00 FF 
0b4e0     04 E4 85 F1 | 	sub	objptr, ##1540
0b4e4     F2 18 02 F1 | 	add	arg04, objptr
0b4e8     0C 1B 02 FB | 	rdlong	arg05, arg04
0b4ec     A7 1A 62 FC | 	wrlong	arg05, fp
0b4f0                 | ' 
0b4f0                 | ' numpar=compiledline(lineptr_e).result.uresult
0b4f0                 | ' 
0b4f0                 | ' 
0b4f0                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0b4f0                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0b4f0                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0b4f0                 | ' ' defsnd channel, oneint - defines waveshape as in SID and 0=sinewave
0b4f0                 | ' 
0b4f0                 | ' if numpar<2 then return
0b4f0     02 1A 56 F2 | 	cmps	arg05, #2 wc
0b4f4     66 00 00 FF 
0b4f8     50 E4 85 F1 | 	sub	objptr, ##52304
0b4fc     2C 09 90 CD |  if_b	jmp	#LR__0934
0b500                 | ' 
0b500                 | '  
0b500                 | ' if numpar=2 then
0b500     A7 1A 02 FB | 	rdlong	arg05, fp
0b504     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b508     98 03 90 5D |  if_ne	jmp	#LR__0917
0b50c     20 E0 BF FD | 	call	#_pop
0b510     FF 1A 02 F6 | 	mov	arg05, result3
0b514     28 4E 05 F1 | 	add	fp, #40
0b518     A7 FA 61 FC | 	wrlong	result1, fp
0b51c     04 4E 05 F1 | 	add	fp, #4
0b520     A7 FC 61 FC | 	wrlong	result2, fp
0b524     04 4E 05 F1 | 	add	fp, #4
0b528     A7 1A 62 FC | 	wrlong	arg05, fp
0b52c                 | '   t1=pop()
0b52c                 | '   if t1.result_type=result_string2 then 
0b52c     30 4E 85 F1 | 	sub	fp, #48
0b530     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b534     20 00 90 5D |  if_ne	jmp	#LR__0910
0b538     28 4E 05 F1 | 	add	fp, #40
0b53c     A7 12 02 FB | 	rdlong	arg01, fp
0b540     28 4E 85 F1 | 	sub	fp, #40
0b544     F0 10 B0 FD | 	call	#_convertstring
0b548     34 4E 05 F1 | 	add	fp, #52
0b54c     A7 FA 61 FC | 	wrlong	result1, fp
0b550     34 4E 85 F1 | 	sub	fp, #52
0b554     40 00 90 FD | 	jmp	#LR__0913
0b558                 | LR__0910
0b558     30 4E 05 F1 | 	add	fp, #48
0b55c     A7 1A 02 FB | 	rdlong	arg05, fp
0b560     30 4E 85 F1 | 	sub	fp, #48
0b564     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0b568     18 00 90 5D |  if_ne	jmp	#LR__0911
0b56c     28 4E 05 F1 | 	add	fp, #40
0b570     A7 1A 02 FB | 	rdlong	arg05, fp
0b574     0C 4E 05 F1 | 	add	fp, #12
0b578     A7 1A 62 FC | 	wrlong	arg05, fp
0b57c     34 4E 85 F1 | 	sub	fp, #52
0b580     14 00 90 FD | 	jmp	#LR__0912
0b584                 | LR__0911
0b584     40 01 00 FF 
0b588     13 1B 06 F6 | 	mov	arg05, ##@LR__4579
0b58c     34 4E 05 F1 | 	add	fp, #52
0b590     A7 1A 62 FC | 	wrlong	arg05, fp
0b594     34 4E 85 F1 | 	sub	fp, #52
0b598                 | LR__0912
0b598                 | LR__0913
0b598                 | ' 
0b598                 | '     
0b598                 | '   if s<>"" then 
0b598     34 4E 05 F1 | 	add	fp, #52
0b59c     A7 12 02 FB | 	rdlong	arg01, fp
0b5a0     34 4E 85 F1 | 	sub	fp, #52
0b5a4     40 01 00 FF 
0b5a8     14 15 06 F6 | 	mov	arg02, ##@LR__4580
0b5ac     40 D3 B0 FD | 	call	#__system___string_cmp
0b5b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5b4     88 01 90 AD |  if_e	jmp	#LR__0915
0b5b8     74 DF BF FD | 	call	#_pop
0b5bc     FF 1A 02 F6 | 	mov	arg05, result3
0b5c0     28 4E 05 F1 | 	add	fp, #40
0b5c4     A7 FA 61 FC | 	wrlong	result1, fp
0b5c8     04 4E 05 F1 | 	add	fp, #4
0b5cc     A7 FC 61 FC | 	wrlong	result2, fp
0b5d0     04 4E 05 F1 | 	add	fp, #4
0b5d4     A7 1A 62 FC | 	wrlong	arg05, fp
0b5d8     08 4E 85 F1 | 	sub	fp, #8
0b5dc     A7 12 02 F6 | 	mov	arg01, fp
0b5e0     28 4E 85 F1 | 	sub	fp, #40
0b5e4     D8 53 B0 FD | 	call	#_converttoint
0b5e8     10 4E 05 F1 | 	add	fp, #16
0b5ec     A7 FA 61 FC | 	wrlong	result1, fp
0b5f0     10 4E 85 F1 | 	sub	fp, #16
0b5f4                 | '     t1=pop()
0b5f4                 | '     channel=converttoint(t1) 
0b5f4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0b5f4     09 12 06 F6 | 	mov	arg01, #9
0b5f8     F8 20 B1 FD | 	call	#__system__close
0b5fc     09 1E 06 F6 | 	mov	local01, #9
0b600     40 01 00 FF 
0b604     15 13 06 F6 | 	mov	arg01, ##@LR__4581
0b608     34 4E 05 F1 | 	add	fp, #52
0b60c     A7 14 02 FB | 	rdlong	arg02, fp
0b610     34 4E 85 F1 | 	sub	fp, #52
0b614     0C D3 B0 FD | 	call	#__system___string_concat
0b618     FD 14 02 F6 | 	mov	arg02, result1
0b61c     0F 13 02 F6 | 	mov	arg01, local01
0b620     00 16 06 F6 | 	mov	arg03, #0
0b624     A0 DE B0 FD | 	call	#__system___basic_open_string
0b628     20 E8 05 F1 | 	add	ptr___system__dat__, #32
0b62c     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b630     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
0b634     7A 00 00 FF 
0b638     C8 E4 05 F1 | 	add	objptr, ##62664
0b63c     F2 FA 61 FC | 	wrlong	result1, objptr
0b640                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b640     7A 00 00 FF 
0b644     C8 E4 85 F1 | 	sub	objptr, ##62664
0b648     B0 00 90 AD |  if_e	jmp	#LR__0914
0b64c     00 12 06 F6 | 	mov	arg01, #0
0b650     70 2A B1 FD | 	call	#__system___getiolock_0417
0b654     FD 12 02 F6 | 	mov	arg01, result1
0b658     6C D2 B0 FD | 	call	#__system___lockmem
0b65c     40 01 00 FF 
0b660     22 15 06 F6 | 	mov	arg02, ##@LR__4582
0b664     00 12 06 F6 | 	mov	arg01, #0
0b668     00 16 06 F6 | 	mov	arg03, #0
0b66c     48 DF B0 FD | 	call	#__system___basic_print_string
0b670     7A 00 00 FF 
0b674     C8 E4 05 F1 | 	add	objptr, ##62664
0b678     F2 14 02 FB | 	rdlong	arg02, objptr
0b67c     7A 00 00 FF 
0b680     C8 E4 85 F1 | 	sub	objptr, ##62664
0b684     00 12 06 F6 | 	mov	arg01, #0
0b688     00 16 06 F6 | 	mov	arg03, #0
0b68c     0A 18 06 F6 | 	mov	arg04, #10
0b690     68 DF B0 FD | 	call	#__system___basic_print_integer
0b694     40 01 00 FF 
0b698     30 15 06 F6 | 	mov	arg02, ##@LR__4583
0b69c     00 12 06 F6 | 	mov	arg01, #0
0b6a0     00 16 06 F6 | 	mov	arg03, #0
0b6a4     10 DF B0 FD | 	call	#__system___basic_print_string
0b6a8     00 1E 06 F6 | 	mov	local01, #0
0b6ac     7A 00 00 FF 
0b6b0     C8 E4 05 F1 | 	add	objptr, ##62664
0b6b4     F2 12 02 FB | 	rdlong	arg01, objptr
0b6b8     7A 00 00 FF 
0b6bc     C8 E4 85 F1 | 	sub	objptr, ##62664
0b6c0     FC F6 B0 FD | 	call	#__system___strerror
0b6c4     FD 14 02 F6 | 	mov	arg02, result1
0b6c8     0F 13 02 F6 | 	mov	arg01, local01
0b6cc     00 16 06 F6 | 	mov	arg03, #0
0b6d0     E4 DE B0 FD | 	call	#__system___basic_print_string
0b6d4     00 12 06 F6 | 	mov	arg01, #0
0b6d8     0A 14 06 F6 | 	mov	arg02, #10
0b6dc     00 16 06 F6 | 	mov	arg03, #0
0b6e0     7C DE B0 FD | 	call	#__system___basic_print_char
0b6e4     00 12 06 F6 | 	mov	arg01, #0
0b6e8     D8 29 B1 FD | 	call	#__system___getiolock_0417
0b6ec     FD 00 68 FC | 	wrlong	#0, result1
0b6f0     09 12 06 F6 | 	mov	arg01, #9
0b6f4     FC 1F B1 FD | 	call	#__system__close
0b6f8     30 07 90 FD | 	jmp	#LR__0934
0b6fc                 | LR__0914
0b6fc                 | '     get #9,17,samplebuf(channel,0),1024
0b6fc     10 4E 05 F1 | 	add	fp, #16
0b700     A7 16 02 FB | 	rdlong	arg03, fp
0b704     10 4E 85 F1 | 	sub	fp, #16
0b708     0B 16 66 F0 | 	shl	arg03, #11
0b70c     0B 00 00 FF 
0b710     CC E5 05 F1 | 	add	objptr, ##6092
0b714     F2 16 02 F1 | 	add	arg03, objptr
0b718     09 12 06 F6 | 	mov	arg01, #9
0b71c     11 14 06 F6 | 	mov	arg02, #17
0b720     0A 18 C6 F9 | 	decod	arg04, #10
0b724     02 1A 06 F6 | 	mov	arg05, #2
0b728     0B 00 00 FF 
0b72c     CC E5 85 F1 | 	sub	objptr, ##6092
0b730     94 DF B0 FD | 	call	#__system___basic_get
0b734                 | '     close #9
0b734     09 12 06 F6 | 	mov	arg01, #9
0b738     B8 1F B1 FD | 	call	#__system__close
0b73c                 | '                                                                       '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b73c                 | '     return
0b73c     EC 06 90 FD | 	jmp	#LR__0934
0b740                 | LR__0915
0b740     28 4E 05 F1 | 	add	fp, #40
0b744     A7 12 02 F6 | 	mov	arg01, fp
0b748     28 4E 85 F1 | 	sub	fp, #40
0b74c     70 52 B0 FD | 	call	#_converttoint
0b750     FD 1E 02 F6 | 	mov	local01, result1
0b754     0C 4E 05 F1 | 	add	fp, #12
0b758     A7 1E 62 FC | 	wrlong	local01, fp
0b75c     0C 4E 85 F1 | 	sub	fp, #12
0b760                 | '   
0b760                 | '   par=converttoint(t1)  : print par
0b760     00 12 06 F6 | 	mov	arg01, #0
0b764     5C 29 B1 FD | 	call	#__system___getiolock_0417
0b768     FD 12 02 F6 | 	mov	arg01, result1
0b76c     58 D1 B0 FD | 	call	#__system___lockmem
0b770     0C 4E 05 F1 | 	add	fp, #12
0b774     A7 14 02 FB | 	rdlong	arg02, fp
0b778     0C 4E 85 F1 | 	sub	fp, #12
0b77c     00 12 06 F6 | 	mov	arg01, #0
0b780     00 16 06 F6 | 	mov	arg03, #0
0b784     0A 18 06 F6 | 	mov	arg04, #10
0b788     70 DE B0 FD | 	call	#__system___basic_print_integer
0b78c     00 12 06 F6 | 	mov	arg01, #0
0b790     0A 14 06 F6 | 	mov	arg02, #10
0b794     00 16 06 F6 | 	mov	arg03, #0
0b798     C4 DD B0 FD | 	call	#__system___basic_print_char
0b79c     00 12 06 F6 | 	mov	arg01, #0
0b7a0     20 29 B1 FD | 	call	#__system___getiolock_0417
0b7a4     FD 00 68 FC | 	wrlong	#0, result1
0b7a8     84 DD BF FD | 	call	#_pop
0b7ac     FF 1E 02 F6 | 	mov	local01, result3
0b7b0     28 4E 05 F1 | 	add	fp, #40
0b7b4     A7 FA 61 FC | 	wrlong	result1, fp
0b7b8     04 4E 05 F1 | 	add	fp, #4
0b7bc     A7 FC 61 FC | 	wrlong	result2, fp
0b7c0     04 4E 05 F1 | 	add	fp, #4
0b7c4     A7 1E 62 FC | 	wrlong	local01, fp
0b7c8     08 4E 85 F1 | 	sub	fp, #8
0b7cc     A7 12 02 F6 | 	mov	arg01, fp
0b7d0     28 4E 85 F1 | 	sub	fp, #40
0b7d4     E8 51 B0 FD | 	call	#_converttoint
0b7d8     10 4E 05 F1 | 	add	fp, #16
0b7dc     A7 FA 61 FC | 	wrlong	result1, fp
0b7e0                 | '   t1=pop()
0b7e0                 | '   channel=converttoint(t1)  
0b7e0                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0b7e0     04 4E 85 F1 | 	sub	fp, #4
0b7e4     A7 1E 0A FB | 	rdlong	local01, fp wz
0b7e8     0C 4E 85 F1 | 	sub	fp, #12
0b7ec     3C 06 90 5D |  if_ne	jmp	#LR__0934
0b7f0     04 4E 05 F1 | 	add	fp, #4
0b7f4     A7 00 68 FC | 	wrlong	#0, fp
0b7f8     04 4E 85 F1 | 	sub	fp, #4
0b7fc                 | LR__0916
0b7fc     10 4E 05 F1 | 	add	fp, #16
0b800     A7 1E 02 FB | 	rdlong	local01, fp
0b804     0B 1E 66 F0 | 	shl	local01, #11
0b808     0B 00 00 FF 
0b80c     CC E5 05 F1 | 	add	objptr, ##6092
0b810     F2 1E 02 F1 | 	add	local01, objptr
0b814     0C 4E 85 F1 | 	sub	fp, #12
0b818     A7 12 02 FB | 	rdlong	arg01, fp
0b81c     09 21 02 F6 | 	mov	local02, arg01
0b820     01 20 66 F0 | 	shl	local02, #1
0b824     0F 21 02 F1 | 	add	local02, local01
0b828     04 4E 85 F1 | 	sub	fp, #4
0b82c     0B 00 00 FF 
0b830     CC E5 85 F1 | 	sub	objptr, ##6092
0b834     09 13 52 F6 | 	abs	arg01, arg01 wc
0b838     1F 22 C6 C9 |  if_b	decod	local03, #31
0b83c     00 22 06 36 |  if_ae	mov	local03, #0
0b840     64 F6 B0 FD | 	call	#__system___float_fromuns
0b844     11 FB 61 F5 | 	xor	result1, local03
0b848     FD 14 02 F6 | 	mov	arg02, result1
0b84c     87 E4 1D FF 
0b850     DB 13 06 F6 | 	mov	arg01, ##1003032539
0b854     54 FA B0 FD | 	call	#__system___float_mul
0b858     FD 12 02 F6 | 	mov	arg01, result1
0b85c     88 03 B1 FD | 	call	#__system____builtin_sinf
0b860     FD 14 02 F6 | 	mov	arg02, result1
0b864     58 7F 23 FF 
0b868     00 12 06 F6 | 	mov	arg01, ##1191096320
0b86c     3C FA B0 FD | 	call	#__system___float_mul
0b870     FD 12 02 F6 | 	mov	arg01, result1
0b874     01 14 06 F6 | 	mov	arg02, #1
0b878     F8 FE B0 FD | 	call	#__system___float_tointeger
0b87c     10 FB 51 FC | 	wrword	result1, local02
0b880     04 4E 05 F1 | 	add	fp, #4
0b884     A7 20 02 FB | 	rdlong	local02, fp
0b888     01 20 06 F1 | 	add	local02, #1
0b88c     A7 20 62 FC | 	wrlong	local02, fp
0b890     04 4E 85 F1 | 	sub	fp, #4
0b894     02 00 00 FF 
0b898     00 20 56 F2 | 	cmps	local02, ##1024 wc
0b89c     5C FF 9F CD |  if_b	jmp	#LR__0916
0b8a0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0b8a0                 | '   return
0b8a0     88 05 90 FD | 	jmp	#LR__0934
0b8a4                 | LR__0917
0b8a4                 | ' for i=0 to 15 : harm(i)=0: next i  
0b8a4     04 4E 05 F1 | 	add	fp, #4
0b8a8     A7 00 68 FC | 	wrlong	#0, fp
0b8ac     97 16 48 FB | 	callpa	#(@LR__0919-@LR__0918)>>2,fcache_load_ptr_
0b8b0                 | LR__0918
0b8b0     A7 1E 02 FB | 	rdlong	local01, fp
0b8b4     02 1E 66 F0 | 	shl	local01, #2
0b8b8     34 4E 05 F1 | 	add	fp, #52
0b8bc     A7 1E 02 F1 | 	add	local01, fp
0b8c0     0F 01 68 FC | 	wrlong	#0, local01
0b8c4     34 4E 85 F1 | 	sub	fp, #52
0b8c8     A7 1E 02 FB | 	rdlong	local01, fp
0b8cc     01 1E 06 F1 | 	add	local01, #1
0b8d0     A7 1E 62 FC | 	wrlong	local01, fp
0b8d4     10 1E 56 F2 | 	cmps	local01, #16 wc
0b8d8     D4 FF 9F CD |  if_b	jmp	#LR__0918
0b8dc                 | LR__0919
0b8dc     04 4E 85 F1 | 	sub	fp, #4
0b8e0                 | ' for i=numpar to 2 step -1 
0b8e0     A7 1E 02 FB | 	rdlong	local01, fp
0b8e4     04 4E 05 F1 | 	add	fp, #4
0b8e8     A7 1E 62 FC | 	wrlong	local01, fp
0b8ec     04 4E 85 F1 | 	sub	fp, #4
0b8f0                 | LR__0920
0b8f0     3C DC BF FD | 	call	#_pop
0b8f4     28 4E 05 F1 | 	add	fp, #40
0b8f8     A7 FA 61 FC | 	wrlong	result1, fp
0b8fc     04 4E 05 F1 | 	add	fp, #4
0b900     A7 FC 61 FC | 	wrlong	result2, fp
0b904     04 4E 05 F1 | 	add	fp, #4
0b908     A7 FE 61 FC | 	wrlong	result3, fp
0b90c     2C 4E 85 F1 | 	sub	fp, #44
0b910     A7 1E 02 FB | 	rdlong	local01, fp
0b914     02 1E 86 F1 | 	sub	local01, #2
0b918     02 1E 66 F0 | 	shl	local01, #2
0b91c     34 4E 05 F1 | 	add	fp, #52
0b920     A7 1E 02 F1 | 	add	local01, fp
0b924     10 4E 85 F1 | 	sub	fp, #16
0b928     A7 12 02 F6 | 	mov	arg01, fp
0b92c     28 4E 85 F1 | 	sub	fp, #40
0b930     38 51 B0 FD | 	call	#_converttofloat
0b934     0F FB 61 FC | 	wrlong	result1, local01
0b938     04 4E 05 F1 | 	add	fp, #4
0b93c     A7 1E 02 FB | 	rdlong	local01, fp
0b940     01 1E 86 F1 | 	sub	local01, #1
0b944     A7 1E 62 FC | 	wrlong	local01, fp
0b948     04 4E 85 F1 | 	sub	fp, #4
0b94c     02 1E 56 F2 | 	cmps	local01, #2 wc
0b950     9C FF 9F 3D |  if_ae	jmp	#LR__0920
0b954     D8 DB BF FD | 	call	#_pop
0b958     FF 1E 02 F6 | 	mov	local01, result3
0b95c     28 4E 05 F1 | 	add	fp, #40
0b960     A7 FA 61 FC | 	wrlong	result1, fp
0b964     04 4E 05 F1 | 	add	fp, #4
0b968     A7 FC 61 FC | 	wrlong	result2, fp
0b96c     04 4E 05 F1 | 	add	fp, #4
0b970     A7 1E 62 FC | 	wrlong	local01, fp
0b974     08 4E 85 F1 | 	sub	fp, #8
0b978     A7 12 02 F6 | 	mov	arg01, fp
0b97c     28 4E 85 F1 | 	sub	fp, #40
0b980     3C 50 B0 FD | 	call	#_converttoint
0b984     FD 1E 02 F6 | 	mov	local01, result1
0b988     10 4E 05 F1 | 	add	fp, #16
0b98c     A7 1E 62 FC | 	wrlong	local01, fp
0b990     10 4E 85 F1 | 	sub	fp, #16
0b994                 | ' t1=pop()
0b994                 | ' channel=converttoint(t1) : print channel
0b994     00 12 06 F6 | 	mov	arg01, #0
0b998     28 27 B1 FD | 	call	#__system___getiolock_0417
0b99c     FD 12 02 F6 | 	mov	arg01, result1
0b9a0     24 CF B0 FD | 	call	#__system___lockmem
0b9a4     10 4E 05 F1 | 	add	fp, #16
0b9a8     A7 14 02 FB | 	rdlong	arg02, fp
0b9ac     10 4E 85 F1 | 	sub	fp, #16
0b9b0     00 12 06 F6 | 	mov	arg01, #0
0b9b4     00 16 06 F6 | 	mov	arg03, #0
0b9b8     0A 18 06 F6 | 	mov	arg04, #10
0b9bc     3C DC B0 FD | 	call	#__system___basic_print_integer
0b9c0     00 12 06 F6 | 	mov	arg01, #0
0b9c4     0A 14 06 F6 | 	mov	arg02, #10
0b9c8     00 16 06 F6 | 	mov	arg03, #0
0b9cc     90 DB B0 FD | 	call	#__system___basic_print_char
0b9d0     00 12 06 F6 | 	mov	arg01, #0
0b9d4     EC 26 B1 FD | 	call	#__system___getiolock_0417
0b9d8     FD 00 68 FC | 	wrlong	#0, result1
0b9dc                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0b9dc     08 4E 05 F1 | 	add	fp, #8
0b9e0     02 00 80 FF 
0b9e4     A7 00 68 FC | 	wrlong	##1024, fp
0b9e8     08 4E 85 F1 | 	sub	fp, #8
0b9ec     0B 00 00 FF 
0b9f0     CC E5 05 F1 | 	add	objptr, ##6092
0b9f4     97 18 48 FB | 	callpa	#(@LR__0923-@LR__0921)>>2,fcache_load_ptr_
0b9f8                 | LR__0921
0b9f8     02 00 00 FF 
0b9fc     00 14 DC FC | 	rep	@LR__0924, ##1024
0ba00                 | LR__0922
0ba00     10 4E 05 F1 | 	add	fp, #16
0ba04     A7 20 02 FB | 	rdlong	local02, fp
0ba08     0B 20 66 F0 | 	shl	local02, #11
0ba0c     F2 20 02 F1 | 	add	local02, objptr
0ba10     0C 4E 85 F1 | 	sub	fp, #12
0ba14     A7 1E 02 FB | 	rdlong	local01, fp
0ba18     04 4E 85 F1 | 	sub	fp, #4
0ba1c     01 1E 66 F0 | 	shl	local01, #1
0ba20     10 1F 02 F1 | 	add	local01, local02
0ba24     0F 01 58 FC | 	wrword	#0, local01
0ba28                 | LR__0923
0ba28                 | LR__0924
0ba28     0B 00 00 FF 
0ba2c     CC E5 85 F1 | 	sub	objptr, ##6092
0ba30     1C 4E 05 F1 | 	add	fp, #28
0ba34     A7 00 68 FC | 	wrlong	#0, fp
0ba38                 | ' max=0
0ba38                 | ' if harm(0)<0 then
0ba38     1C 4E 05 F1 | 	add	fp, #28
0ba3c     A7 12 02 FB | 	rdlong	arg01, fp
0ba40     38 4E 85 F1 | 	sub	fp, #56
0ba44     00 14 06 F6 | 	mov	arg02, #0
0ba48     01 16 06 F6 | 	mov	arg03, #1
0ba4c     90 FC B0 FD | 	call	#__system___float_cmp
0ba50     00 FA 55 F2 | 	cmps	result1, #0 wc
0ba54     04 01 90 3D |  if_ae	jmp	#LR__0927
0ba58     38 4E 05 F1 | 	add	fp, #56
0ba5c     A7 FA 01 FB | 	rdlong	result1, fp
0ba60     1F FA 05 F4 | 	bitl	result1, #31
0ba64     24 4E 85 F1 | 	sub	fp, #36
0ba68     A7 FA 61 FC | 	wrlong	result1, fp
0ba6c     28 4E 05 F1 | 	add	fp, #40
0ba70     A7 FA 01 FB | 	rdlong	result1, fp
0ba74     1F FA 05 F4 | 	bitl	result1, #31
0ba78     24 4E 85 F1 | 	sub	fp, #36
0ba7c     A7 FA 61 FC | 	wrlong	result1, fp
0ba80     20 4E 05 F1 | 	add	fp, #32
0ba84     00 C0 9F FF 
0ba88     A7 00 68 FC | 	wrlong	##1065353216, fp
0ba8c     24 4E 85 F1 | 	sub	fp, #36
0ba90     A7 1E 02 FB | 	rdlong	local01, fp
0ba94     28 4E 05 F1 | 	add	fp, #40
0ba98     A7 1E 62 FC | 	wrlong	local01, fp
0ba9c     24 4E 85 F1 | 	sub	fp, #36
0baa0     A7 1E 02 FB | 	rdlong	local01, fp
0baa4     28 4E 05 F1 | 	add	fp, #40
0baa8     A7 1E 62 FC | 	wrlong	local01, fp
0baac                 | '   harm(0)=1
0baac                 | '   harm(1)=even
0baac                 | '   harm(2)=odd
0baac                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0baac     3C 4E 85 F1 | 	sub	fp, #60
0bab0     A7 06 68 FC | 	wrlong	#3, fp
0bab4                 | LR__0925
0bab4     A7 1A 02 FB | 	rdlong	arg05, fp
0bab8     0D 25 02 F6 | 	mov	local04, arg05
0babc     02 24 66 F0 | 	shl	local04, #2
0bac0     34 4E 05 F1 | 	add	fp, #52
0bac4     A7 24 02 F1 | 	add	local04, fp
0bac8     02 1A 86 F1 | 	sub	arg05, #2
0bacc     02 1A 66 F0 | 	shl	arg05, #2
0bad0     A7 1A 02 F1 | 	add	arg05, fp
0bad4     0D 13 02 FB | 	rdlong	arg01, arg05
0bad8     24 4E 85 F1 | 	sub	fp, #36
0badc     A7 14 02 FB | 	rdlong	arg02, fp
0bae0     14 4E 85 F1 | 	sub	fp, #20
0bae4     C4 F7 B0 FD | 	call	#__system___float_mul
0bae8     12 FB 61 FC | 	wrlong	result1, local04
0baec     04 4E 05 F1 | 	add	fp, #4
0baf0     A7 26 02 FB | 	rdlong	local05, fp
0baf4     02 26 06 F1 | 	add	local05, #2
0baf8     A7 26 62 FC | 	wrlong	local05, fp
0bafc     10 26 56 F2 | 	cmps	local05, #16 wc
0bb00     B0 FF 9F CD |  if_b	jmp	#LR__0925
0bb04                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0bb04     A7 08 68 FC | 	wrlong	#4, fp
0bb08                 | LR__0926
0bb08     A7 26 02 FB | 	rdlong	local05, fp
0bb0c     13 25 02 F6 | 	mov	local04, local05
0bb10     02 24 66 F0 | 	shl	local04, #2
0bb14     34 4E 05 F1 | 	add	fp, #52
0bb18     A7 24 02 F1 | 	add	local04, fp
0bb1c     02 26 86 F1 | 	sub	local05, #2
0bb20     02 26 66 F0 | 	shl	local05, #2
0bb24     A7 26 02 F1 | 	add	local05, fp
0bb28     13 13 02 FB | 	rdlong	arg01, local05
0bb2c     20 4E 85 F1 | 	sub	fp, #32
0bb30     A7 14 02 FB | 	rdlong	arg02, fp
0bb34     18 4E 85 F1 | 	sub	fp, #24
0bb38     70 F7 B0 FD | 	call	#__system___float_mul
0bb3c     12 FB 61 FC | 	wrlong	result1, local04
0bb40     04 4E 05 F1 | 	add	fp, #4
0bb44     A7 26 02 FB | 	rdlong	local05, fp
0bb48     02 26 06 F1 | 	add	local05, #2
0bb4c     A7 26 62 FC | 	wrlong	local05, fp
0bb50     0F 26 56 F2 | 	cmps	local05, #15 wc
0bb54     B0 FF 9F CD |  if_b	jmp	#LR__0926
0bb58     04 4E 85 F1 | 	sub	fp, #4
0bb5c                 | LR__0927
0bb5c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0bb5c     38 4E 05 F1 | 	add	fp, #56
0bb60     A7 12 02 FB | 	rdlong	arg01, fp
0bb64     38 4E 85 F1 | 	sub	fp, #56
0bb68     00 14 06 F6 | 	mov	arg02, #0
0bb6c     01 16 66 F6 | 	neg	arg03, #1
0bb70     6C FB B0 FD | 	call	#__system___float_cmp
0bb74     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb78     B0 02 90 CD |  if_b	jmp	#LR__0933
0bb7c                 | '   for i=0 to 1023
0bb7c     04 4E 05 F1 | 	add	fp, #4
0bb80     A7 00 68 FC | 	wrlong	#0, fp
0bb84     04 4E 85 F1 | 	sub	fp, #4
0bb88                 | LR__0928
0bb88     20 4E 05 F1 | 	add	fp, #32
0bb8c     A7 00 68 FC | 	wrlong	#0, fp
0bb90                 | '     spl=0
0bb90                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0bb90     18 4E 85 F1 | 	sub	fp, #24
0bb94     A7 00 68 FC | 	wrlong	#0, fp
0bb98                 | LR__0929
0bb98     A7 24 02 FB | 	rdlong	local04, fp
0bb9c     02 24 66 F0 | 	shl	local04, #2
0bba0     30 4E 05 F1 | 	add	fp, #48
0bba4     A7 24 02 F1 | 	add	local04, fp
0bba8     12 27 02 FB | 	rdlong	local05, local04
0bbac     87 E4 1D FF 
0bbb0     DB 25 06 F6 | 	mov	local04, ##1003032539
0bbb4     34 4E 85 F1 | 	sub	fp, #52
0bbb8     A7 12 02 FB | 	rdlong	arg01, fp
0bbbc     04 4E 85 F1 | 	sub	fp, #4
0bbc0     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbc4     1F 22 C6 C9 |  if_b	decod	local03, #31
0bbc8     00 22 06 36 |  if_ae	mov	local03, #0
0bbcc     D8 F2 B0 FD | 	call	#__system___float_fromuns
0bbd0     11 FB 61 F5 | 	xor	result1, local03
0bbd4     FD 14 02 F6 | 	mov	arg02, result1
0bbd8     12 13 02 F6 | 	mov	arg01, local04
0bbdc     CC F6 B0 FD | 	call	#__system___float_mul
0bbe0     FD 24 02 F6 | 	mov	local04, result1
0bbe4     08 4E 05 F1 | 	add	fp, #8
0bbe8     A7 12 02 FB | 	rdlong	arg01, fp
0bbec     08 4E 85 F1 | 	sub	fp, #8
0bbf0     01 12 06 F1 | 	add	arg01, #1
0bbf4     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbf8     1F 22 C6 C9 |  if_b	decod	local03, #31
0bbfc     00 22 06 36 |  if_ae	mov	local03, #0
0bc00     A4 F2 B0 FD | 	call	#__system___float_fromuns
0bc04     11 FB 61 F5 | 	xor	result1, local03
0bc08     FD 14 02 F6 | 	mov	arg02, result1
0bc0c     12 13 02 F6 | 	mov	arg01, local04
0bc10     98 F6 B0 FD | 	call	#__system___float_mul
0bc14     FD 12 02 F6 | 	mov	arg01, result1
0bc18     CC FF B0 FD | 	call	#__system____builtin_sinf
0bc1c     FD 14 02 F6 | 	mov	arg02, result1
0bc20     13 13 02 F6 | 	mov	arg01, local05
0bc24     84 F6 B0 FD | 	call	#__system___float_mul
0bc28     FD 14 02 F6 | 	mov	arg02, result1
0bc2c     20 4E 05 F1 | 	add	fp, #32
0bc30     A7 12 02 FB | 	rdlong	arg01, fp
0bc34     20 4E 85 F1 | 	sub	fp, #32
0bc38     A0 F2 B0 FD | 	call	#__system___float_add
0bc3c     20 4E 05 F1 | 	add	fp, #32
0bc40     A7 FA 61 FC | 	wrlong	result1, fp
0bc44     18 4E 85 F1 | 	sub	fp, #24
0bc48     A7 16 02 FB | 	rdlong	arg03, fp
0bc4c     01 16 06 F1 | 	add	arg03, #1
0bc50     A7 16 62 FC | 	wrlong	arg03, fp
0bc54     10 16 56 F2 | 	cmps	arg03, #16 wc
0bc58     3C FF 9F CD |  if_b	jmp	#LR__0929
0bc5c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0bc5c     18 4E 05 F1 | 	add	fp, #24
0bc60     A7 12 02 FB | 	rdlong	arg01, fp
0bc64     1F 12 06 F4 | 	bitl	arg01, #31
0bc68     04 4E 85 F1 | 	sub	fp, #4
0bc6c     A7 14 02 FB | 	rdlong	arg02, fp
0bc70     1C 4E 85 F1 | 	sub	fp, #28
0bc74     01 16 66 F6 | 	neg	arg03, #1
0bc78     64 FA B0 FD | 	call	#__system___float_cmp
0bc7c     01 FA 55 F2 | 	cmps	result1, #1 wc
0bc80     18 00 90 CD |  if_b	jmp	#LR__0930
0bc84     20 4E 05 F1 | 	add	fp, #32
0bc88     A7 FA 01 FB | 	rdlong	result1, fp
0bc8c     1F FA 05 F4 | 	bitl	result1, #31
0bc90     04 4E 85 F1 | 	sub	fp, #4
0bc94     A7 FA 61 FC | 	wrlong	result1, fp
0bc98     1C 4E 85 F1 | 	sub	fp, #28
0bc9c                 | LR__0930
0bc9c     04 4E 05 F1 | 	add	fp, #4
0bca0     A7 26 02 FB | 	rdlong	local05, fp
0bca4     01 26 06 F1 | 	add	local05, #1
0bca8     A7 26 62 FC | 	wrlong	local05, fp
0bcac     04 4E 85 F1 | 	sub	fp, #4
0bcb0     02 00 00 FF 
0bcb4     00 26 56 F2 | 	cmps	local05, ##1024 wc
0bcb8     CC FE 9F CD |  if_b	jmp	#LR__0928
0bcbc                 | '   for i=0 to 1023
0bcbc     04 4E 05 F1 | 	add	fp, #4
0bcc0     A7 00 68 FC | 	wrlong	#0, fp
0bcc4     04 4E 85 F1 | 	sub	fp, #4
0bcc8                 | LR__0931
0bcc8     20 4E 05 F1 | 	add	fp, #32
0bccc     A7 00 68 FC | 	wrlong	#0, fp
0bcd0                 | '     spl=0
0bcd0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0bcd0     18 4E 85 F1 | 	sub	fp, #24
0bcd4     A7 00 68 FC | 	wrlong	#0, fp
0bcd8                 | LR__0932
0bcd8     A7 26 02 FB | 	rdlong	local05, fp
0bcdc     02 26 66 F0 | 	shl	local05, #2
0bce0     30 4E 05 F1 | 	add	fp, #48
0bce4     A7 26 02 F1 | 	add	local05, fp
0bce8     13 27 02 FB | 	rdlong	local05, local05
0bcec     1C 4E 85 F1 | 	sub	fp, #28
0bcf0     A7 14 02 FB | 	rdlong	arg02, fp
0bcf4     1C 4E 85 F1 | 	sub	fp, #28
0bcf8     58 7F 23 FF 
0bcfc     00 12 06 F6 | 	mov	arg01, ##1191096320
0bd00     AC F7 B0 FD | 	call	#__system___float_div
0bd04     FD 14 02 F6 | 	mov	arg02, result1
0bd08     13 13 02 F6 | 	mov	arg01, local05
0bd0c     9C F5 B0 FD | 	call	#__system___float_mul
0bd10     FD 26 02 F6 | 	mov	local05, result1
0bd14     87 E4 1D FF 
0bd18     DB 25 06 F6 | 	mov	local04, ##1003032539
0bd1c     04 4E 05 F1 | 	add	fp, #4
0bd20     A7 12 02 FB | 	rdlong	arg01, fp
0bd24     04 4E 85 F1 | 	sub	fp, #4
0bd28     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd2c     1F 22 C6 C9 |  if_b	decod	local03, #31
0bd30     00 22 06 36 |  if_ae	mov	local03, #0
0bd34     70 F1 B0 FD | 	call	#__system___float_fromuns
0bd38     11 FB 61 F5 | 	xor	result1, local03
0bd3c     FD 14 02 F6 | 	mov	arg02, result1
0bd40     12 13 02 F6 | 	mov	arg01, local04
0bd44     64 F5 B0 FD | 	call	#__system___float_mul
0bd48     FD 24 02 F6 | 	mov	local04, result1
0bd4c     08 4E 05 F1 | 	add	fp, #8
0bd50     A7 12 02 FB | 	rdlong	arg01, fp
0bd54     08 4E 85 F1 | 	sub	fp, #8
0bd58     01 12 06 F1 | 	add	arg01, #1
0bd5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd60     1F 22 C6 C9 |  if_b	decod	local03, #31
0bd64     00 22 06 36 |  if_ae	mov	local03, #0
0bd68     3C F1 B0 FD | 	call	#__system___float_fromuns
0bd6c     11 FB 61 F5 | 	xor	result1, local03
0bd70     FD 14 02 F6 | 	mov	arg02, result1
0bd74     12 13 02 F6 | 	mov	arg01, local04
0bd78     30 F5 B0 FD | 	call	#__system___float_mul
0bd7c     FD 12 02 F6 | 	mov	arg01, result1
0bd80     64 FE B0 FD | 	call	#__system____builtin_sinf
0bd84     FD 14 02 F6 | 	mov	arg02, result1
0bd88     13 13 02 F6 | 	mov	arg01, local05
0bd8c     1C F5 B0 FD | 	call	#__system___float_mul
0bd90     FD 14 02 F6 | 	mov	arg02, result1
0bd94     20 4E 05 F1 | 	add	fp, #32
0bd98     A7 12 02 FB | 	rdlong	arg01, fp
0bd9c     20 4E 85 F1 | 	sub	fp, #32
0bda0     38 F1 B0 FD | 	call	#__system___float_add
0bda4     20 4E 05 F1 | 	add	fp, #32
0bda8     A7 FA 61 FC | 	wrlong	result1, fp
0bdac     18 4E 85 F1 | 	sub	fp, #24
0bdb0     A7 26 02 FB | 	rdlong	local05, fp
0bdb4     01 26 06 F1 | 	add	local05, #1
0bdb8     A7 26 62 FC | 	wrlong	local05, fp
0bdbc     10 26 56 F2 | 	cmps	local05, #16 wc
0bdc0     14 FF 9F CD |  if_b	jmp	#LR__0932
0bdc4     08 4E 05 F1 | 	add	fp, #8
0bdc8     A7 26 02 FB | 	rdlong	local05, fp
0bdcc     0B 26 66 F0 | 	shl	local05, #11
0bdd0     0B 00 00 FF 
0bdd4     CC E5 05 F1 | 	add	objptr, ##6092
0bdd8     F2 26 02 F1 | 	add	local05, objptr
0bddc     0C 4E 85 F1 | 	sub	fp, #12
0bde0     A7 20 02 FB | 	rdlong	local02, fp
0bde4     01 20 66 F0 | 	shl	local02, #1
0bde8     13 21 02 F1 | 	add	local02, local05
0bdec     1C 4E 05 F1 | 	add	fp, #28
0bdf0     A7 12 02 FB | 	rdlong	arg01, fp
0bdf4     20 4E 85 F1 | 	sub	fp, #32
0bdf8     0B 00 00 FF 
0bdfc     CC E5 85 F1 | 	sub	objptr, ##6092
0be00     01 14 06 F6 | 	mov	arg02, #1
0be04     6C F9 B0 FD | 	call	#__system___float_tointeger
0be08     10 FB 51 FC | 	wrword	result1, local02
0be0c     04 4E 05 F1 | 	add	fp, #4
0be10     A7 26 02 FB | 	rdlong	local05, fp
0be14     01 26 06 F1 | 	add	local05, #1
0be18     A7 26 62 FC | 	wrlong	local05, fp
0be1c     04 4E 85 F1 | 	sub	fp, #4
0be20     02 00 00 FF 
0be24     00 26 56 F2 | 	cmps	local05, ##1024 wc
0be28     9C FE 9F CD |  if_b	jmp	#LR__0931
0be2c                 | LR__0933
0be2c                 | LR__0934
0be2c     A7 F0 03 F6 | 	mov	ptra, fp
0be30     B2 00 A0 FD | 	call	#popregs_
0be34                 | _do_defsnd_ret
0be34     2D 00 64 FD | 	ret
0be38                 | 
0be38                 | ' 
0be38                 | ' ' ---------------  List the program. 
0be38                 | ' 
0be38                 | ' sub do_list
0be38                 | _do_list
0be38     02 4A 05 F6 | 	mov	COUNT_, #2
0be3c     A8 00 A0 FD | 	call	#pushregs_
0be40     B8 F0 07 F1 | 	add	ptra, #184
0be44     04 4E 05 F1 | 	add	fp, #4
0be48     A7 00 68 FC | 	wrlong	#0, fp
0be4c     04 4E 05 F1 | 	add	fp, #4
0be50     FF FF BF FF 
0be54     A7 FE 6B FC | 	wrlong	##2147483647, fp
0be58     08 4E 85 F1 | 	sub	fp, #8
0be5c     69 00 00 FF 
0be60     54 E4 05 F1 | 	add	objptr, ##53844
0be64     F2 1E 02 FB | 	rdlong	local01, objptr
0be68     0F 17 02 F6 | 	mov	arg03, local01
0be6c     01 16 66 F0 | 	shl	arg03, #1
0be70     0F 17 02 F1 | 	add	arg03, local01
0be74     02 16 66 F0 | 	shl	arg03, #2
0be78     03 00 00 FF 
0be7c     04 E4 85 F1 | 	sub	objptr, ##1540
0be80     F2 16 02 F1 | 	add	arg03, objptr
0be84     0B 17 02 FB | 	rdlong	arg03, arg03
0be88     A7 16 62 FC | 	wrlong	arg03, fp
0be8c                 | ' 
0be8c                 | ' startline=0 : endline=$7FFFFFFF
0be8c                 | ' numpar=compiledline(lineptr_e).result.uresult
0be8c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0be8c     01 16 0E F2 | 	cmp	arg03, #1 wz
0be90     66 00 00 FF 
0be94     50 E4 85 F1 | 	sub	objptr, ##52304
0be98     3C 00 90 5D |  if_ne	jmp	#LR__0940
0be9c     90 D6 BF FD | 	call	#_pop
0bea0     FF 1E 02 F6 | 	mov	local01, result3
0bea4     0C 4E 05 F1 | 	add	fp, #12
0bea8     A7 FA 61 FC | 	wrlong	result1, fp
0beac     04 4E 05 F1 | 	add	fp, #4
0beb0     A7 FC 61 FC | 	wrlong	result2, fp
0beb4     04 4E 05 F1 | 	add	fp, #4
0beb8     A7 1E 62 FC | 	wrlong	local01, fp
0bebc     08 4E 85 F1 | 	sub	fp, #8
0bec0     A7 12 02 F6 | 	mov	arg01, fp
0bec4     0C 4E 85 F1 | 	sub	fp, #12
0bec8     F4 4A B0 FD | 	call	#_converttoint
0becc     04 4E 05 F1 | 	add	fp, #4
0bed0     A7 FA 61 FC | 	wrlong	result1, fp
0bed4     04 4E 85 F1 | 	sub	fp, #4
0bed8                 | LR__0940
0bed8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0bed8     A7 16 02 FB | 	rdlong	arg03, fp
0bedc     02 16 0E F2 | 	cmp	arg03, #2 wz
0bee0     7C 00 90 5D |  if_ne	jmp	#LR__0941
0bee4     48 D6 BF FD | 	call	#_pop
0bee8     FF 1E 02 F6 | 	mov	local01, result3
0beec     0C 4E 05 F1 | 	add	fp, #12
0bef0     A7 FA 61 FC | 	wrlong	result1, fp
0bef4     04 4E 05 F1 | 	add	fp, #4
0bef8     A7 FC 61 FC | 	wrlong	result2, fp
0befc     04 4E 05 F1 | 	add	fp, #4
0bf00     A7 1E 62 FC | 	wrlong	local01, fp
0bf04     08 4E 85 F1 | 	sub	fp, #8
0bf08     A7 12 02 F6 | 	mov	arg01, fp
0bf0c     0C 4E 85 F1 | 	sub	fp, #12
0bf10     AC 4A B0 FD | 	call	#_converttoint
0bf14     FD 1E 02 F6 | 	mov	local01, result1
0bf18     08 4E 05 F1 | 	add	fp, #8
0bf1c     A7 1E 62 FC | 	wrlong	local01, fp
0bf20     08 4E 85 F1 | 	sub	fp, #8
0bf24     08 D6 BF FD | 	call	#_pop
0bf28     FF 1E 02 F6 | 	mov	local01, result3
0bf2c     0C 4E 05 F1 | 	add	fp, #12
0bf30     A7 FA 61 FC | 	wrlong	result1, fp
0bf34     04 4E 05 F1 | 	add	fp, #4
0bf38     A7 FC 61 FC | 	wrlong	result2, fp
0bf3c     04 4E 05 F1 | 	add	fp, #4
0bf40     A7 1E 62 FC | 	wrlong	local01, fp
0bf44     08 4E 85 F1 | 	sub	fp, #8
0bf48     A7 12 02 F6 | 	mov	arg01, fp
0bf4c     0C 4E 85 F1 | 	sub	fp, #12
0bf50     6C 4A B0 FD | 	call	#_converttoint
0bf54     04 4E 05 F1 | 	add	fp, #4
0bf58     A7 FA 61 FC | 	wrlong	result1, fp
0bf5c     04 4E 85 F1 | 	sub	fp, #4
0bf60                 | LR__0941
0bf60                 | ' 
0bf60                 | ' 
0bf60                 | ' print
0bf60     00 12 06 F6 | 	mov	arg01, #0
0bf64     5C 21 B1 FD | 	call	#__system___getiolock_0417
0bf68     FD 12 02 F6 | 	mov	arg01, result1
0bf6c     58 C9 B0 FD | 	call	#__system___lockmem
0bf70     00 12 06 F6 | 	mov	arg01, #0
0bf74     0A 14 06 F6 | 	mov	arg02, #10
0bf78     00 16 06 F6 | 	mov	arg03, #0
0bf7c     E0 D5 B0 FD | 	call	#__system___basic_print_char
0bf80     00 12 06 F6 | 	mov	arg01, #0
0bf84     3C 21 B1 FD | 	call	#__system___getiolock_0417
0bf88     FD 00 68 FC | 	wrlong	#0, result1
0bf8c     69 00 00 FF 
0bf90     58 E4 05 F1 | 	add	objptr, ##53848
0bf94     F2 20 02 FB | 	rdlong	local02, objptr
0bf98     11 00 00 FF 
0bf9c     68 E4 05 F1 | 	add	objptr, ##8808
0bfa0     F2 20 62 FC | 	wrlong	local02, objptr
0bfa4     7A 00 00 FF 
0bfa8     C0 E4 85 F1 | 	sub	objptr, ##62656
0bfac                 | ' do 
0bfac                 | LR__0942
0bfac     20 4E 05 F1 | 	add	fp, #32
0bfb0     A7 12 02 F6 | 	mov	arg01, fp
0bfb4     20 4E 85 F1 | 	sub	fp, #32
0bfb8     7A 00 00 FF 
0bfbc     C0 E4 05 F1 | 	add	objptr, ##62656
0bfc0     F2 14 02 FB | 	rdlong	arg02, objptr
0bfc4     18 16 06 F6 | 	mov	arg03, #24
0bfc8     6F 00 00 FF 
0bfcc     00 E4 85 F1 | 	sub	objptr, ##56832
0bfd0     04 BE B0 FD | 	call	#_psram_spin2_read1
0bfd4     0B 00 00 FF 
0bfd8     C0 E4 85 F1 | 	sub	objptr, ##5824
0bfdc                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0bfdc                 | '   if header(0)<> $FFFFFFFF then
0bfdc     20 4E 05 F1 | 	add	fp, #32
0bfe0     A7 20 02 FB | 	rdlong	local02, fp
0bfe4     20 4E 85 F1 | 	sub	fp, #32
0bfe8     FF FF 7F FF 
0bfec     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0bff0     A8 00 90 AD |  if_e	jmp	#LR__0944
0bff4     38 4E 05 F1 | 	add	fp, #56
0bff8     3F 16 06 F6 | 	mov	arg03, #63
0bffc     28 16 62 FD | 	setq	arg03
0c000     A7 00 68 FC | 	wrlong	#0, fp
0c004     A7 12 02 F6 | 	mov	arg01, fp
0c008     10 4E 85 F1 | 	sub	fp, #16
0c00c     A7 14 02 FB | 	rdlong	arg02, fp
0c010     04 4E 05 F1 | 	add	fp, #4
0c014     A7 16 02 FB | 	rdlong	arg03, fp
0c018     2C 4E 85 F1 | 	sub	fp, #44
0c01c     0B 00 00 FF 
0c020     C0 E4 05 F1 | 	add	objptr, ##5824
0c024     B0 BD B0 FD | 	call	#_psram_spin2_read1
0c028     0B 00 00 FF 
0c02c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c030                 | '     longfill(linebuf,0,64)
0c030                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0c030                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0c030     20 4E 05 F1 | 	add	fp, #32
0c034     A7 20 02 FB | 	rdlong	local02, fp
0c038     1C 4E 85 F1 | 	sub	fp, #28
0c03c     A7 1E 02 FB | 	rdlong	local01, fp
0c040     04 4E 85 F1 | 	sub	fp, #4
0c044     0F 21 52 F2 | 	cmps	local02, local01 wc
0c048     30 00 90 CD |  if_b	jmp	#LR__0943
0c04c     20 4E 05 F1 | 	add	fp, #32
0c050     A7 20 02 FB | 	rdlong	local02, fp
0c054     18 4E 85 F1 | 	sub	fp, #24
0c058     A7 16 02 FB | 	rdlong	arg03, fp
0c05c     08 4E 85 F1 | 	sub	fp, #8
0c060     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0c064     14 00 90 1D |  if_a	jmp	#LR__0943
0c068     38 4E 05 F1 | 	add	fp, #56
0c06c     A7 12 02 F6 | 	mov	arg01, fp
0c070     38 4E 85 F1 | 	sub	fp, #56
0c074                 | ' 
0c074                 | ' write(text)
0c074     28 B8 B0 FD | 	call	#_hg010b_spin2_write
0c078                 | ' crlf
0c078     84 B9 B0 FD | 	call	#_hg010b_spin2_crlf
0c07c                 | LR__0943
0c07c     34 4E 05 F1 | 	add	fp, #52
0c080     A7 20 02 FB | 	rdlong	local02, fp
0c084     34 4E 85 F1 | 	sub	fp, #52
0c088     7A 00 00 FF 
0c08c     C0 E4 05 F1 | 	add	objptr, ##62656
0c090     F2 20 62 FC | 	wrlong	local02, objptr
0c094     7A 00 00 FF 
0c098     C0 E4 85 F1 | 	sub	objptr, ##62656
0c09c                 | LR__0944
0c09c     34 4E 05 F1 | 	add	fp, #52
0c0a0     A7 20 02 FB | 	rdlong	local02, fp
0c0a4     34 4E 85 F1 | 	sub	fp, #52
0c0a8     FF FF 3F FF 
0c0ac     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c0b0     20 4E 05 51 |  if_ne	add	fp, #32
0c0b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c0b8     20 4E 85 51 |  if_ne	sub	fp, #32
0c0bc     FF FF 7F 5F 
0c0c0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c0c4     E4 FE 9F 5D |  if_ne	jmp	#LR__0942
0c0c8     A7 F0 03 F6 | 	mov	ptra, fp
0c0cc     B2 00 A0 FD | 	call	#popregs_
0c0d0                 | _do_list_ret
0c0d0     2D 00 64 FD | 	ret
0c0d4                 | 
0c0d4                 | ' 
0c0d4                 | ' '---------------- Clear the program
0c0d4                 | ' 
0c0d4                 | ' sub do_new
0c0d4                 | _do_new
0c0d4     03 4A 05 F6 | 	mov	COUNT_, #3
0c0d8     A8 00 A0 FD | 	call	#pushregs_
0c0dc     00 12 06 F6 | 	mov	arg01, #0
0c0e0     01 14 66 F6 | 	neg	arg02, #1
0c0e4     01 16 06 F6 | 	mov	arg03, #1
0c0e8     00 18 06 F6 | 	mov	arg04, #0
0c0ec     0B 00 00 FF 
0c0f0     C0 E4 05 F1 | 	add	objptr, ##5824
0c0f4                 | '     return fill(addr, pattern, count, listPtr, 4)
0c0f4     04 1A 06 F6 | 	mov	arg05, #4
0c0f8     14 BE B0 FD | 	call	#_psram_spin2_fill
0c0fc     48 00 00 FF 
0c100     1C E5 05 F1 | 	add	objptr, ##37148
0c104     F2 00 68 FC | 	wrlong	#0, objptr
0c108     15 00 00 FF 
0c10c     7C E4 05 F1 | 	add	objptr, ##10876
0c110     F2 00 68 FC | 	wrlong	#0, objptr
0c114     0F 00 00 FF 
0c118     2C E5 05 F1 | 	add	objptr, ##7980
0c11c     F2 00 68 FC | 	wrlong	#0, objptr
0c120     04 E4 05 F1 | 	add	objptr, #4
0c124     F2 00 68 FC | 	wrlong	#0, objptr
0c128     16 00 00 FF 
0c12c     5C E5 85 F1 | 	sub	objptr, ##11612
0c130     F2 00 68 FC | 	wrlong	#0, objptr
0c134     07 00 00 FF 
0c138     24 E4 05 F1 | 	add	objptr, ##3620
0c13c     F2 00 68 FC | 	wrlong	#0, objptr
0c140     07 00 00 FF 
0c144     20 E4 85 F1 | 	sub	objptr, ##3616
0c148     F2 00 68 FC | 	wrlong	#0, objptr
0c14c     0F 00 00 FF 
0c150     34 E4 05 F1 | 	add	objptr, ##7732
0c154     F2 00 68 FC | 	wrlong	#0, objptr
0c158     08 00 00 FF 
0c15c     08 E4 85 F1 | 	sub	objptr, ##4104
0c160     F2 00 68 FC | 	wrlong	#0, objptr
0c164     04 E4 05 F1 | 	add	objptr, #4
0c168     FF FF FF FF 
0c16c     F2 FE 6B FC | 	wrlong	##-1, objptr
0c170     0F 00 00 FF 
0c174     4C E5 05 F1 | 	add	objptr, ##8012
0c178     F2 00 68 FC | 	wrlong	#0, objptr
0c17c                 | ' 
0c17c                 | ' pslpoke(0,$FFFFFFFF)
0c17c                 | ' varnum=0
0c17c                 | ' programstart=0 :runptr=0 : runptr2=0
0c17c                 | ' stackpointer=0
0c17c                 | ' lineptr=0 
0c17c                 | ' programptr=0 : stringptr=0
0c17c                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0c17c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0c17c     00 1E 06 F6 | 	mov	local01, #0
0c180     07 00 00 FF 
0c184     40 E5 85 F1 | 	sub	objptr, ##3904
0c188     97 16 48 FB | 	callpa	#(@LR__0951-@LR__0950)>>2,fcache_load_ptr_
0c18c                 | LR__0950
0c18c     0F 21 02 F6 | 	mov	local02, local01
0c190     02 20 66 F0 | 	shl	local02, #2
0c194     0F 21 02 F1 | 	add	local02, local01
0c198     02 20 66 F0 | 	shl	local02, #2
0c19c     F2 20 02 F1 | 	add	local02, objptr
0c1a0     08 20 06 F1 | 	add	local02, #8
0c1a4     FF FF FF FF 
0c1a8     10 FF 6B FC | 	wrlong	##-1, local02
0c1ac     01 1E 06 F1 | 	add	local01, #1
0c1b0     81 1E 56 F2 | 	cmps	local01, #129 wc
0c1b4     D4 FF 9F CD |  if_b	jmp	#LR__0950
0c1b8                 | LR__0951
0c1b8     71 00 00 FF 
0c1bc     6C E4 85 F1 | 	sub	objptr, ##57964
0c1c0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0c1c0     00 1E 06 F6 | 	mov	local01, #0
0c1c4                 | LR__0952
0c1c4     0F 21 02 F6 | 	mov	local02, local01
0c1c8     02 20 66 F0 | 	shl	local02, #2
0c1cc     7A 00 00 FF 
0c1d0     08 E4 05 F1 | 	add	objptr, ##62472
0c1d4     F2 20 02 F1 | 	add	local02, objptr
0c1d8     10 21 0A FB | 	rdlong	local02, local02 wz
0c1dc     7A 00 00 FF 
0c1e0     08 E4 85 F1 | 	sub	objptr, ##62472
0c1e4     34 00 90 AD |  if_e	jmp	#LR__0953
0c1e8     0F 13 02 F6 | 	mov	arg01, local01
0c1ec     00 14 06 F6 | 	mov	arg02, #0
0c1f0     00 16 06 F6 | 	mov	arg03, #0
0c1f4     34 A7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c1f8     0F 21 02 F6 | 	mov	local02, local01
0c1fc     02 20 66 F0 | 	shl	local02, #2
0c200     7A 00 00 FF 
0c204     08 E4 05 F1 | 	add	objptr, ##62472
0c208     F2 20 02 F1 | 	add	local02, objptr
0c20c     10 13 02 FB | 	rdlong	arg01, local02
0c210     7A 00 00 FF 
0c214     08 E4 85 F1 | 	sub	objptr, ##62472
0c218     98 04 B1 FD | 	call	#__system___gc_free
0c21c                 | LR__0953
0c21c     F2 22 02 FB | 	rdlong	local03, objptr
0c220     7A 00 00 FF 
0c224     4C E4 05 F1 | 	add	objptr, ##62540
0c228     F2 22 62 FC | 	wrlong	local03, objptr
0c22c     7A 00 00 FF 
0c230     4C E4 85 F1 | 	sub	objptr, ##62540
0c234     11 12 06 F6 | 	mov	arg01, #17
0c238     08 14 06 F6 | 	mov	arg02, #8
0c23c     10 16 06 F6 | 	mov	arg03, #16
0c240     E8 A6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0c244     01 1E 06 F1 | 	add	local01, #1
0c248     10 1E 56 F2 | 	cmps	local01, #16 wc
0c24c     74 FF 9F CD |  if_b	jmp	#LR__0952
0c250     A7 F0 03 F6 | 	mov	ptra, fp
0c254     B2 00 A0 FD | 	call	#popregs_
0c258                 | _do_new_ret
0c258     2D 00 64 FD | 	ret
0c25c                 | 
0c25c                 | ' 
0c25c                 | ' '----------------------- goto
0c25c                 | ' sub do_fast_goto
0c25c                 | _do_fast_goto
0c25c     02 4A 05 F6 | 	mov	COUNT_, #2
0c260     A8 00 A0 FD | 	call	#pushregs_
0c264                 | _do_fast_goto_enter
0c264     69 00 00 FF 
0c268     54 E4 05 F1 | 	add	objptr, ##53844
0c26c     F2 12 02 FB | 	rdlong	arg01, objptr
0c270     09 1F 02 F6 | 	mov	local01, arg01
0c274     01 1E 66 F0 | 	shl	local01, #1
0c278     09 1F 02 F1 | 	add	local01, arg01
0c27c     02 1E 66 F0 | 	shl	local01, #2
0c280     03 00 00 FF 
0c284     04 E4 85 F1 | 	sub	objptr, ##1540
0c288     F2 1E 02 F1 | 	add	local01, objptr
0c28c     0F 21 02 FB | 	rdlong	local02, local01
0c290     10 13 02 F6 | 	mov	arg01, local02
0c294     66 00 00 FF 
0c298     50 E4 85 F1 | 	sub	objptr, ##52304
0c29c     C0 92 B0 FD | 	call	#_pslpeek
0c2a0     FD 12 02 F6 | 	mov	arg01, result1
0c2a4                 | ' 
0c2a4                 | ' testptr=compiledline(lineptr_e).result.uresult
0c2a4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0c2a4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0c2a4     69 00 00 FF 
0c2a8     54 E4 05 F1 | 	add	objptr, ##53844
0c2ac     F2 FA 01 FB | 	rdlong	result1, objptr
0c2b0     FD 1E 02 F6 | 	mov	local01, result1
0c2b4     01 1E 66 F0 | 	shl	local01, #1
0c2b8     FD 1E 02 F1 | 	add	local01, result1
0c2bc     02 1E 66 F0 | 	shl	local01, #2
0c2c0     03 00 00 FF 
0c2c4     04 E4 85 F1 | 	sub	objptr, ##1540
0c2c8     F2 1E 02 F1 | 	add	local01, objptr
0c2cc     04 1E 06 F1 | 	add	local01, #4
0c2d0     0F 1F 02 FB | 	rdlong	local01, local01
0c2d4     0F 13 0A F2 | 	cmp	arg01, local01 wz
0c2d8     66 00 00 FF 
0c2dc     50 E4 85 F1 | 	sub	objptr, ##52304
0c2e0     58 00 90 5D |  if_ne	jmp	#LR__0960
0c2e4     78 00 00 FF 
0c2e8     84 E5 05 F1 | 	add	objptr, ##61828
0c2ec     F2 20 62 FC | 	wrlong	local02, objptr
0c2f0     0F 00 00 FF 
0c2f4     34 E5 85 F1 | 	sub	objptr, ##7988
0c2f8     F2 20 02 FB | 	rdlong	local02, objptr
0c2fc     01 20 86 F1 | 	sub	local02, #1
0c300     04 E4 05 F1 | 	add	objptr, #4
0c304     F2 20 62 FC | 	wrlong	local02, objptr
0c308                 | '   runptr=testptr
0c308                 | '   lineptr_e=lineptr-1
0c308                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0c308     0F 00 00 FF 
0c30c     54 E5 05 F1 | 	add	objptr, ##8020
0c310     F2 20 02 FB | 	rdlong	local02, objptr
0c314     78 00 00 FF 
0c318     A8 E5 85 F1 | 	sub	objptr, ##61864
0c31c     FF FF 3F FF 
0c320     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0c324     78 00 00 AF 
0c328     A8 E5 05 A1 |  if_e	add	objptr, ##61864
0c32c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c330     78 00 00 AF 
0c334     A8 E5 85 A1 |  if_e	sub	objptr, ##61864
0c338     04 00 90 FD | 	jmp	#LR__0961
0c33c                 | LR__0960
0c33c     0C 00 B0 FD | 	call	#_do_find_goto
0c340                 | LR__0961
0c340     A7 F0 03 F6 | 	mov	ptra, fp
0c344     B2 00 A0 FD | 	call	#popregs_
0c348                 | _do_fast_goto_ret
0c348     2D 00 64 FD | 	ret
0c34c                 | 
0c34c                 | ' 
0c34c                 | ' 
0c34c                 | ' 
0c34c                 | ' 
0c34c                 | ' sub do_find_goto
0c34c                 | _do_find_goto
0c34c     03 4A 05 F6 | 	mov	COUNT_, #3
0c350     A8 00 A0 FD | 	call	#pushregs_
0c354     24 F0 07 F1 | 	add	ptra, #36
0c358                 | _do_find_goto_enter
0c358     69 00 00 FF 
0c35c     54 E4 05 F1 | 	add	objptr, ##53844
0c360     F2 1E 02 FB | 	rdlong	local01, objptr
0c364     0F 21 02 F6 | 	mov	local02, local01
0c368     01 20 66 F0 | 	shl	local02, #1
0c36c     0F 21 02 F1 | 	add	local02, local01
0c370     02 20 66 F0 | 	shl	local02, #2
0c374     03 00 00 FF 
0c378     04 E4 85 F1 | 	sub	objptr, ##1540
0c37c     F2 20 02 F1 | 	add	local02, objptr
0c380     04 20 06 F1 | 	add	local02, #4
0c384     10 21 02 FB | 	rdlong	local02, local02
0c388     A7 20 62 FC | 	wrlong	local02, fp
0c38c     03 00 00 FF 
0c390     08 E4 05 F1 | 	add	objptr, ##1544
0c394     F2 22 02 FB | 	rdlong	local03, objptr
0c398     69 00 00 FF 
0c39c     58 E4 85 F1 | 	sub	objptr, ##53848
0c3a0     04 4E 05 F1 | 	add	fp, #4
0c3a4     A7 22 62 FC | 	wrlong	local03, fp
0c3a8     04 4E 85 F1 | 	sub	fp, #4
0c3ac                 | ' 
0c3ac                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0c3ac                 | '  ' print "find goto"                                                                     'print gotoline 
0c3ac                 | ' gotoptr=programstart
0c3ac                 | ' do
0c3ac                 | LR__0970
0c3ac     0C 4E 05 F1 | 	add	fp, #12
0c3b0     A7 12 02 F6 | 	mov	arg01, fp
0c3b4     08 4E 85 F1 | 	sub	fp, #8
0c3b8     A7 14 02 FB | 	rdlong	arg02, fp
0c3bc     04 4E 85 F1 | 	sub	fp, #4
0c3c0     18 16 06 F6 | 	mov	arg03, #24
0c3c4     0B 00 00 FF 
0c3c8     C0 E4 05 F1 | 	add	objptr, ##5824
0c3cc     08 BA B0 FD | 	call	#_psram_spin2_read1
0c3d0     0B 00 00 FF 
0c3d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0c3d8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0c3d8                 | '   if gotoheader(0)<>$FFFFFFFF then
0c3d8     0C 4E 05 F1 | 	add	fp, #12
0c3dc     A7 22 02 FB | 	rdlong	local03, fp
0c3e0     0C 4E 85 F1 | 	sub	fp, #12
0c3e4     FF FF 7F FF 
0c3e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0c3ec     24 00 90 AD |  if_e	jmp	#LR__0971
0c3f0     04 4E 05 F1 | 	add	fp, #4
0c3f4     A7 22 02 FB | 	rdlong	local03, fp
0c3f8     04 4E 05 F1 | 	add	fp, #4
0c3fc     A7 22 62 FC | 	wrlong	local03, fp
0c400     18 4E 05 F1 | 	add	fp, #24
0c404     A7 22 02 FB | 	rdlong	local03, fp
0c408     1C 4E 85 F1 | 	sub	fp, #28
0c40c     A7 22 62 FC | 	wrlong	local03, fp
0c410     04 4E 85 F1 | 	sub	fp, #4
0c414                 | LR__0971
0c414     20 4E 05 F1 | 	add	fp, #32
0c418     A7 22 02 FB | 	rdlong	local03, fp
0c41c     20 4E 85 F1 | 	sub	fp, #32
0c420     FF FF 3F FF 
0c424     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c428     0C 4E 05 51 |  if_ne	add	fp, #12
0c42c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c430     0C 4E 85 51 |  if_ne	sub	fp, #12
0c434     FF FF 7F 5F 
0c438     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0c43c     18 00 90 AD |  if_e	jmp	#LR__0972
0c440     0C 4E 05 F1 | 	add	fp, #12
0c444     A7 22 02 FB | 	rdlong	local03, fp
0c448     0C 4E 85 F1 | 	sub	fp, #12
0c44c     A7 20 02 FB | 	rdlong	local02, fp
0c450     10 23 0A F2 | 	cmp	local03, local02 wz
0c454     54 FF 9F 5D |  if_ne	jmp	#LR__0970
0c458                 | LR__0972
0c458                 | ' 
0c458                 | ' if gotoheader(0)=gotoline then
0c458     0C 4E 05 F1 | 	add	fp, #12
0c45c     A7 22 02 FB | 	rdlong	local03, fp
0c460     0C 4E 85 F1 | 	sub	fp, #12
0c464     A7 1E 02 FB | 	rdlong	local01, fp
0c468     0F 23 0A F2 | 	cmp	local03, local01 wz
0c46c     D8 00 90 5D |  if_ne	jmp	#LR__0973
0c470     69 00 00 FF 
0c474     54 E4 05 F1 | 	add	objptr, ##53844
0c478     F2 1E 02 FB | 	rdlong	local01, objptr
0c47c     0F 21 02 F6 | 	mov	local02, local01
0c480     01 20 66 F0 | 	shl	local02, #1
0c484     0F 21 02 F1 | 	add	local02, local01
0c488     02 20 66 F0 | 	shl	local02, #2
0c48c     03 00 00 FF 
0c490     04 E4 85 F1 | 	sub	objptr, ##1540
0c494     F2 20 02 F1 | 	add	local02, objptr
0c498     08 4E 05 F1 | 	add	fp, #8
0c49c     A7 22 02 FB | 	rdlong	local03, fp
0c4a0     10 23 62 FC | 	wrlong	local03, local02
0c4a4     03 00 00 FF 
0c4a8     04 E4 05 F1 | 	add	objptr, ##1540
0c4ac     F2 1E 02 FB | 	rdlong	local01, objptr
0c4b0     0F 21 02 F6 | 	mov	local02, local01
0c4b4     01 20 66 F0 | 	shl	local02, #1
0c4b8     0F 21 02 F1 | 	add	local02, local01
0c4bc     02 20 66 F0 | 	shl	local02, #2
0c4c0     03 00 00 FF 
0c4c4     04 E4 85 F1 | 	sub	objptr, ##1540
0c4c8     F2 20 02 F1 | 	add	local02, objptr
0c4cc     08 20 06 F1 | 	add	local02, #8
0c4d0     10 9D 68 FC | 	wrlong	#78, local02
0c4d4     03 00 00 FF 
0c4d8     04 E4 05 F1 | 	add	objptr, ##1540
0c4dc     F2 20 02 FB | 	rdlong	local02, objptr
0c4e0     10 13 02 F6 | 	mov	arg01, local02
0c4e4     01 12 66 F0 | 	shl	arg01, #1
0c4e8     10 13 02 F1 | 	add	arg01, local02
0c4ec     02 12 66 F0 | 	shl	arg01, #2
0c4f0     03 00 00 FF 
0c4f4     04 E4 85 F1 | 	sub	objptr, ##1540
0c4f8     F2 12 02 F1 | 	add	arg01, objptr
0c4fc     12 00 00 FF 
0c500     3C E5 05 F1 | 	add	objptr, ##9532
0c504     F2 14 02 FB | 	rdlong	arg02, objptr
0c508     02 22 06 F6 | 	mov	local03, #2
0c50c     10 23 02 F1 | 	add	local03, local02
0c510     14 00 00 FF 
0c514     54 E5 85 F1 | 	sub	objptr, ##10580
0c518     F2 16 02 FB | 	rdlong	arg03, objptr
0c51c     0B 23 02 FD | 	qmul	local03, arg03
0c520     08 4E 85 F1 | 	sub	fp, #8
0c524     58 00 00 FF 
0c528     78 E5 85 F1 | 	sub	objptr, ##45432
0c52c     18 22 62 FD | 	getqx	local03
0c530     11 15 02 F1 | 	add	arg02, local03
0c534     3C B9 B0 FD | 	call	#_psram_spin2_write
0c538     0B 00 00 FF 
0c53c     C0 E4 85 F1 | 	sub	objptr, ##5824
0c540     18 FD BF FD | 	call	#_do_fast_goto
0c544     08 00 90 FD | 	jmp	#LR__0974
0c548                 | LR__0973
0c548     26 12 06 F6 | 	mov	arg01, #38
0c54c     54 8E B0 FD | 	call	#_printerror
0c550                 | LR__0974
0c550     A7 F0 03 F6 | 	mov	ptra, fp
0c554     B2 00 A0 FD | 	call	#popregs_
0c558                 | _do_find_goto_ret
0c558     2D 00 64 FD | 	ret
0c55c                 | 
0c55c                 | ' 
0c55c                 | ' sub do_slow_goto
0c55c                 | _do_slow_goto
0c55c                 | _do_slow_goto_ret
0c55c     2D 00 64 FD | 	ret
0c560                 | 
0c560                 | ' 
0c560                 | ' '----------------------- Error processing
0c560                 | ' 
0c560                 | ' sub do_error
0c560                 | _do_error
0c560     01 4A 05 F6 | 	mov	COUNT_, #1
0c564     A8 00 A0 FD | 	call	#pushregs_
0c568     69 00 00 FF 
0c56c     54 E4 05 F1 | 	add	objptr, ##53844
0c570     F2 18 02 FB | 	rdlong	arg04, objptr
0c574     0C 17 02 F6 | 	mov	arg03, arg04
0c578     01 16 66 F0 | 	shl	arg03, #1
0c57c     0C 17 02 F1 | 	add	arg03, arg04
0c580     02 16 66 F0 | 	shl	arg03, #2
0c584     03 00 00 FF 
0c588     04 E4 85 F1 | 	sub	objptr, ##1540
0c58c     F2 16 02 F1 | 	add	arg03, objptr
0c590     0B 1F 02 FB | 	rdlong	local01, arg03
0c594                 | ' r=compiledline(lineptr_e).result.uresult
0c594                 | ' print "Error ";r;": ";errors$(r)
0c594     00 12 06 F6 | 	mov	arg01, #0
0c598     66 00 00 FF 
0c59c     50 E4 85 F1 | 	sub	objptr, ##52304
0c5a0     20 1B B1 FD | 	call	#__system___getiolock_0417
0c5a4     FD 12 02 F6 | 	mov	arg01, result1
0c5a8     1C C3 B0 FD | 	call	#__system___lockmem
0c5ac     40 01 00 FF 
0c5b0     33 15 06 F6 | 	mov	arg02, ##@LR__4584
0c5b4     00 12 06 F6 | 	mov	arg01, #0
0c5b8     00 16 06 F6 | 	mov	arg03, #0
0c5bc     F8 CF B0 FD | 	call	#__system___basic_print_string
0c5c0     00 12 06 F6 | 	mov	arg01, #0
0c5c4     0F 15 02 F6 | 	mov	arg02, local01
0c5c8     00 16 06 F6 | 	mov	arg03, #0
0c5cc     0A 18 06 F6 | 	mov	arg04, #10
0c5d0     68 D0 B0 FD | 	call	#__system___basic_print_unsigned
0c5d4     40 01 00 FF 
0c5d8     3A 15 06 F6 | 	mov	arg02, ##@LR__4585
0c5dc     00 12 06 F6 | 	mov	arg01, #0
0c5e0     00 16 06 F6 | 	mov	arg03, #0
0c5e4     D0 CF B0 FD | 	call	#__system___basic_print_string
0c5e8     02 1E 66 F0 | 	shl	local01, #2
0c5ec     64 00 00 FF 
0c5f0     50 E4 05 F1 | 	add	objptr, ##51280
0c5f4     F2 1E 02 F1 | 	add	local01, objptr
0c5f8     0F 15 02 FB | 	rdlong	arg02, local01
0c5fc     00 12 06 F6 | 	mov	arg01, #0
0c600     00 16 06 F6 | 	mov	arg03, #0
0c604     64 00 00 FF 
0c608     50 E4 85 F1 | 	sub	objptr, ##51280
0c60c     A8 CF B0 FD | 	call	#__system___basic_print_string
0c610     00 12 06 F6 | 	mov	arg01, #0
0c614     0A 14 06 F6 | 	mov	arg02, #10
0c618     00 16 06 F6 | 	mov	arg03, #0
0c61c     40 CF B0 FD | 	call	#__system___basic_print_char
0c620     00 12 06 F6 | 	mov	arg01, #0
0c624     9C 1A B1 FD | 	call	#__system___getiolock_0417
0c628     FD 00 68 FC | 	wrlong	#0, result1
0c62c     A7 F0 03 F6 | 	mov	ptra, fp
0c630     B2 00 A0 FD | 	call	#popregs_
0c634                 | _do_error_ret
0c634     2D 00 64 FD | 	ret
0c638                 | 
0c638                 | ' 
0c638                 | ' 
0c638                 | ' '------------------ Assigning to a variable  
0c638                 | ' 
0c638                 | ' function  convertstring(psaddr as ulong) as string
0c638                 | _convertstring
0c638     04 4A 05 F6 | 	mov	COUNT_, #4
0c63c     A8 00 A0 FD | 	call	#pushregs_
0c640     09 1F 02 F6 | 	mov	local01, arg01
0c644     18 8F B0 FD | 	call	#_pslpeek
0c648     FD 20 02 F6 | 	mov	local02, result1
0c64c     40 01 00 FF 
0c650     3D 23 06 F6 | 	mov	local03, ##@LR__4586
0c654                 | ' 'print "in convertstring: psaddr=";psaddr
0c654                 | ' l=pslpeek(psaddr)
0c654                 | ' 'print "in convertstring: len=";l
0c654                 | ' s="" 
0c654                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0c654     01 24 06 F6 | 	mov	local04, #1
0c658     01 20 06 F1 | 	add	local02, #1
0c65c                 | LR__0980
0c65c     10 25 52 F2 | 	cmps	local04, local02 wc
0c660     30 00 90 3D |  if_ae	jmp	#LR__0981
0c664     0F 13 02 F6 | 	mov	arg01, local01
0c668     03 12 06 F1 | 	add	arg01, #3
0c66c     12 13 02 F1 | 	add	arg01, local04
0c670     94 8E B0 FD | 	call	#_pspeek
0c674     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0c678     1C E4 B0 FD | 	call	#__system__Chr_S
0c67c     FD 14 02 F6 | 	mov	arg02, result1
0c680     11 13 02 F6 | 	mov	arg01, local03
0c684     9C C2 B0 FD | 	call	#__system___string_concat
0c688     FD 22 02 F6 | 	mov	local03, result1
0c68c     01 24 06 F1 | 	add	local04, #1
0c690     C8 FF 9F FD | 	jmp	#LR__0980
0c694                 | LR__0981
0c694                 | ' 'print "in convertstring: str=";s
0c694                 | ' return s
0c694     11 FB 01 F6 | 	mov	result1, local03
0c698     A7 F0 03 F6 | 	mov	ptra, fp
0c69c     B2 00 A0 FD | 	call	#popregs_
0c6a0                 | _convertstring_ret
0c6a0     2D 00 64 FD | 	ret
0c6a4                 | 
0c6a4                 | ' 
0c6a4                 | ' sub do_assign
0c6a4                 | _do_assign
0c6a4     05 4A 05 F6 | 	mov	COUNT_, #5
0c6a8     A8 00 A0 FD | 	call	#pushregs_
0c6ac     44 F0 07 F1 | 	add	ptra, #68
0c6b0     69 00 00 FF 
0c6b4     54 E4 05 F1 | 	add	objptr, ##53844
0c6b8     F2 16 02 FB | 	rdlong	arg03, objptr
0c6bc     0B 15 02 F6 | 	mov	arg02, arg03
0c6c0     01 14 66 F0 | 	shl	arg02, #1
0c6c4     0B 15 02 F1 | 	add	arg02, arg03
0c6c8     02 14 66 F0 | 	shl	arg02, #2
0c6cc     03 00 00 FF 
0c6d0     04 E4 85 F1 | 	sub	objptr, ##1540
0c6d4     F2 14 02 F1 | 	add	arg02, objptr
0c6d8     0A 15 02 FB | 	rdlong	arg02, arg02
0c6dc     18 4E 05 F1 | 	add	fp, #24
0c6e0     A7 14 62 FC | 	wrlong	arg02, fp
0c6e4                 | ' 
0c6e4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0c6e4                 | ' 
0c6e4                 | ' if variables(varnum).vartype<array_no_type then 
0c6e4     18 4E 85 F1 | 	sub	fp, #24
0c6e8     04 14 66 F0 | 	shl	arg02, #4
0c6ec     32 00 00 FF 
0c6f0     74 E4 85 F1 | 	sub	objptr, ##25716
0c6f4     F2 14 02 F1 | 	add	arg02, objptr
0c6f8     0C 14 06 F1 | 	add	arg02, #12
0c6fc     0A 17 02 FB | 	rdlong	arg03, arg02
0c700     00 17 16 F2 | 	cmp	arg03, #256 wc
0c704     33 00 00 FF 
0c708     DC E5 85 F1 | 	sub	objptr, ##26588
0c70c     18 01 90 3D |  if_ae	jmp	#LR__0990
0c710     1C CE BF FD | 	call	#_pop
0c714     A7 FA 61 FC | 	wrlong	result1, fp
0c718     04 4E 05 F1 | 	add	fp, #4
0c71c     A7 FC 61 FC | 	wrlong	result2, fp
0c720     04 4E 05 F1 | 	add	fp, #4
0c724     A7 FE 61 FC | 	wrlong	result3, fp
0c728     08 4E 85 F1 | 	sub	fp, #8
0c72c     A7 16 02 FB | 	rdlong	arg03, fp
0c730     04 4E 05 F1 | 	add	fp, #4
0c734     A7 14 02 FB | 	rdlong	arg02, fp
0c738     14 4E 05 F1 | 	add	fp, #20
0c73c     A7 12 02 FB | 	rdlong	arg01, fp
0c740     04 12 66 F0 | 	shl	arg01, #4
0c744     33 00 00 FF 
0c748     DC E5 05 F1 | 	add	objptr, ##26588
0c74c     F2 12 02 F1 | 	add	arg01, objptr
0c750     04 12 06 F1 | 	add	arg01, #4
0c754     09 17 62 FC | 	wrlong	arg03, arg01
0c758     A7 16 02 FB | 	rdlong	arg03, fp
0c75c     04 16 66 F0 | 	shl	arg03, #4
0c760     F2 16 02 F1 | 	add	arg03, objptr
0c764     08 16 06 F1 | 	add	arg03, #8
0c768     0B 15 62 FC | 	wrlong	arg02, arg03
0c76c     A7 16 02 FB | 	rdlong	arg03, fp
0c770     04 16 66 F0 | 	shl	arg03, #4
0c774     F2 16 02 F1 | 	add	arg03, objptr
0c778     10 4E 85 F1 | 	sub	fp, #16
0c77c     A7 14 02 FB | 	rdlong	arg02, fp
0c780     0C 16 06 F1 | 	add	arg03, #12
0c784     0B 15 62 FC | 	wrlong	arg02, arg03
0c788                 | '   t1=pop() 
0c788                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0c788                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0c788                 | '   if variables(varnum).vartype<>result_string2 then return
0c788     10 4E 05 F1 | 	add	fp, #16
0c78c     A7 16 02 FB | 	rdlong	arg03, fp
0c790     18 4E 85 F1 | 	sub	fp, #24
0c794     04 16 66 F0 | 	shl	arg03, #4
0c798     F2 16 02 F1 | 	add	arg03, objptr
0c79c     0C 16 06 F1 | 	add	arg03, #12
0c7a0     0B 17 02 FB | 	rdlong	arg03, arg03
0c7a4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c7a8     33 00 00 FF 
0c7ac     DC E5 85 F1 | 	sub	objptr, ##26588
0c7b0     9C 05 90 5D |  if_ne	jmp	#LR__1011
0c7b4     18 4E 05 F1 | 	add	fp, #24
0c7b8     A7 16 02 FB | 	rdlong	arg03, fp
0c7bc     0B 1F 02 F6 | 	mov	local01, arg03
0c7c0     04 1E 66 F0 | 	shl	local01, #4
0c7c4     33 00 00 FF 
0c7c8     DC E5 05 F1 | 	add	objptr, ##26588
0c7cc     F2 1E 02 F1 | 	add	local01, objptr
0c7d0     18 4E 85 F1 | 	sub	fp, #24
0c7d4     04 16 66 F0 | 	shl	arg03, #4
0c7d8     F2 16 02 F1 | 	add	arg03, objptr
0c7dc     04 16 06 F1 | 	add	arg03, #4
0c7e0     0B 13 02 FB | 	rdlong	arg01, arg03
0c7e4     33 00 00 FF 
0c7e8     DC E5 85 F1 | 	sub	objptr, ##26588
0c7ec     48 FE BF FD | 	call	#_convertstring
0c7f0     04 1E 06 F1 | 	add	local01, #4
0c7f4     0F FB 61 FC | 	wrlong	result1, local01
0c7f8     18 4E 05 F1 | 	add	fp, #24
0c7fc     A7 1E 02 FB | 	rdlong	local01, fp
0c800     18 4E 85 F1 | 	sub	fp, #24
0c804     04 1E 66 F0 | 	shl	local01, #4
0c808     33 00 00 FF 
0c80c     DC E5 05 F1 | 	add	objptr, ##26588
0c810     F2 1E 02 F1 | 	add	local01, objptr
0c814     0C 1E 06 F1 | 	add	local01, #12
0c818     0F 3F 68 FC | 	wrlong	#31, local01
0c81c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0c81c                 | '   variables(varnum).vartype=result_string
0c81c                 | '   return
0c81c     33 00 00 FF 
0c820     DC E5 85 F1 | 	sub	objptr, ##26588
0c824     28 05 90 FD | 	jmp	#LR__1011
0c828                 | LR__0990
0c828                 | ' for i=0 to 2 : arrid(i)=0 : next i
0c828     1C 4E 05 F1 | 	add	fp, #28
0c82c     A7 00 68 FC | 	wrlong	#0, fp
0c830     97 16 48 FB | 	callpa	#(@LR__0992-@LR__0991)>>2,fcache_load_ptr_
0c834                 | LR__0991
0c834     A7 1E 02 FB | 	rdlong	local01, fp
0c838     02 1E 66 F0 | 	shl	local01, #2
0c83c     18 4E 05 F1 | 	add	fp, #24
0c840     A7 1E 02 F1 | 	add	local01, fp
0c844     0F 01 68 FC | 	wrlong	#0, local01
0c848     18 4E 85 F1 | 	sub	fp, #24
0c84c     A7 1E 02 FB | 	rdlong	local01, fp
0c850     01 1E 06 F1 | 	add	local01, #1
0c854     A7 1E 62 FC | 	wrlong	local01, fp
0c858     03 1E 16 F2 | 	cmp	local01, #3 wc
0c85c     D4 FF 9F CD |  if_b	jmp	#LR__0991
0c860                 | LR__0992
0c860     69 00 00 FF 
0c864     54 E4 05 F1 | 	add	objptr, ##53844
0c868     F2 16 02 FB | 	rdlong	arg03, objptr
0c86c     0B 1F 02 F6 | 	mov	local01, arg03
0c870     01 1E 66 F0 | 	shl	local01, #1
0c874     0B 1F 02 F1 | 	add	local01, arg03
0c878     02 1E 66 F0 | 	shl	local01, #2
0c87c     03 00 00 FF 
0c880     04 E4 85 F1 | 	sub	objptr, ##1540
0c884     F2 1E 02 F1 | 	add	local01, objptr
0c888     04 1E 06 F1 | 	add	local01, #4
0c88c     0F 21 02 FB | 	rdlong	local02, local01
0c890     04 4E 05 F1 | 	add	fp, #4
0c894     A7 20 62 FC | 	wrlong	local02, fp
0c898     20 4E 85 F1 | 	sub	fp, #32
0c89c     66 00 00 FF 
0c8a0     50 E4 85 F1 | 	sub	objptr, ##52304
0c8a4     88 CC BF FD | 	call	#_pop
0c8a8     A7 FA 61 FC | 	wrlong	result1, fp
0c8ac     04 4E 05 F1 | 	add	fp, #4
0c8b0     A7 FC 61 FC | 	wrlong	result2, fp
0c8b4     04 4E 05 F1 | 	add	fp, #4
0c8b8     A7 FE 61 FC | 	wrlong	result3, fp
0c8bc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0c8bc                 | ' t1=pop() ' var value
0c8bc                 | ' if numpar>0 then
0c8bc     18 4E 05 F1 | 	add	fp, #24
0c8c0     A7 22 02 FB | 	rdlong	local03, fp
0c8c4     20 4E 85 F1 | 	sub	fp, #32
0c8c8     01 22 16 F2 | 	cmp	local03, #1 wc
0c8cc     70 00 90 CD |  if_b	jmp	#LR__0995
0c8d0                 | '   for i=numpar to 1 step -1
0c8d0     20 4E 05 F1 | 	add	fp, #32
0c8d4     A7 24 0A FB | 	rdlong	local04, fp wz
0c8d8     04 4E 85 F1 | 	sub	fp, #4
0c8dc     A7 24 62 FC | 	wrlong	local04, fp
0c8e0     1C 4E 85 F1 | 	sub	fp, #28
0c8e4     58 00 90 AD |  if_e	jmp	#LR__0994
0c8e8                 | LR__0993
0c8e8     44 CC BF FD | 	call	#_pop
0c8ec     0C 4E 05 F1 | 	add	fp, #12
0c8f0     A7 FA 61 FC | 	wrlong	result1, fp
0c8f4     04 4E 05 F1 | 	add	fp, #4
0c8f8     A7 FC 61 FC | 	wrlong	result2, fp
0c8fc     04 4E 05 F1 | 	add	fp, #4
0c900     A7 FE 61 FC | 	wrlong	result3, fp
0c904     08 4E 05 F1 | 	add	fp, #8
0c908     A7 22 02 FB | 	rdlong	local03, fp
0c90c     01 22 86 F1 | 	sub	local03, #1
0c910     02 22 66 F0 | 	shl	local03, #2
0c914     18 4E 05 F1 | 	add	fp, #24
0c918     A7 22 02 F1 | 	add	local03, fp
0c91c     28 4E 85 F1 | 	sub	fp, #40
0c920     A7 24 02 FB | 	rdlong	local04, fp
0c924     11 25 62 FC | 	wrlong	local04, local03
0c928     10 4E 05 F1 | 	add	fp, #16
0c92c     A7 24 02 FB | 	rdlong	local04, fp
0c930     01 24 8E F1 | 	sub	local04, #1 wz
0c934     A7 24 62 FC | 	wrlong	local04, fp
0c938     1C 4E 85 F1 | 	sub	fp, #28
0c93c     A8 FF 9F 5D |  if_ne	jmp	#LR__0993
0c940                 | LR__0994
0c940                 | LR__0995
0c940     18 4E 05 F1 | 	add	fp, #24
0c944     A7 1E 02 FB | 	rdlong	local01, fp
0c948     04 1E 66 F0 | 	shl	local01, #4
0c94c     33 00 00 FF 
0c950     DC E5 05 F1 | 	add	objptr, ##26588
0c954     F2 1E 02 F1 | 	add	local01, objptr
0c958     04 1E 06 F1 | 	add	local01, #4
0c95c     0F 13 02 FB | 	rdlong	arg01, local01
0c960     0C 4E 05 F1 | 	add	fp, #12
0c964     A7 12 62 FC | 	wrlong	arg01, fp
0c968     24 4E 85 F1 | 	sub	fp, #36
0c96c     33 00 00 FF 
0c970     DC E5 85 F1 | 	sub	objptr, ##26588
0c974     E8 8B B0 FD | 	call	#_pslpeek
0c978     FD 24 32 F9 | 	getword	local04, result1, #0
0c97c     28 4E 05 F1 | 	add	fp, #40
0c980     A7 24 62 FC | 	wrlong	local04, fp
0c984     04 4E 85 F1 | 	sub	fp, #4
0c988     A7 12 02 FB | 	rdlong	arg01, fp
0c98c     24 4E 85 F1 | 	sub	fp, #36
0c990     02 12 06 F1 | 	add	arg01, #2
0c994     70 8B B0 FD | 	call	#_pspeek
0c998     FD FA E1 F8 | 	getbyte	result1, result1, #0
0c99c     2C 4E 05 F1 | 	add	fp, #44
0c9a0     A7 FA 61 FC | 	wrlong	result1, fp
0c9a4     08 4E 85 F1 | 	sub	fp, #8
0c9a8     A7 12 02 FB | 	rdlong	arg01, fp
0c9ac     09 25 02 F6 | 	mov	local04, arg01
0c9b0     10 24 06 F1 | 	add	local04, #16
0c9b4     24 4E 85 F1 | 	sub	fp, #36
0c9b8     04 12 06 F1 | 	add	arg01, #4
0c9bc     A0 8B B0 FD | 	call	#_pslpeek
0c9c0     FD 1E 02 F6 | 	mov	local01, result1
0c9c4     38 4E 05 F1 | 	add	fp, #56
0c9c8     A7 20 02 FB | 	rdlong	local02, fp
0c9cc     10 1F 02 FD | 	qmul	local01, local02
0c9d0     04 4E 85 F1 | 	sub	fp, #4
0c9d4     A7 22 02 FB | 	rdlong	local03, fp
0c9d8     10 4E 85 F1 | 	sub	fp, #16
0c9dc     A7 12 02 FB | 	rdlong	arg01, fp
0c9e0     24 4E 85 F1 | 	sub	fp, #36
0c9e4     08 12 06 F1 | 	add	arg01, #8
0c9e8     18 20 62 FD | 	getqx	local02
0c9ec     10 23 02 F1 | 	add	local03, local02
0c9f0     6C 8B B0 FD | 	call	#_pslpeek
0c9f4     FD 20 02 F6 | 	mov	local02, result1
0c9f8     24 4E 05 F1 | 	add	fp, #36
0c9fc     A7 12 02 FB | 	rdlong	arg01, fp
0ca00     24 4E 85 F1 | 	sub	fp, #36
0ca04     04 12 06 F1 | 	add	arg01, #4
0ca08     54 8B B0 FD | 	call	#_pslpeek
0ca0c     FD 20 02 FD | 	qmul	local02, result1
0ca10     3C 4E 05 F1 | 	add	fp, #60
0ca14     A7 20 02 FB | 	rdlong	local02, fp
0ca18     18 1E 62 FD | 	getqx	local01
0ca1c     10 1F 02 FD | 	qmul	local01, local02
0ca20     10 4E 85 F1 | 	sub	fp, #16
0ca24     A7 20 02 FB | 	rdlong	local02, fp
0ca28     18 1E 62 FD | 	getqx	local01
0ca2c     0F 23 02 F1 | 	add	local03, local01
0ca30     11 21 02 FD | 	qmul	local02, local03
0ca34     04 4E 05 F1 | 	add	fp, #4
0ca38                 | ' esize=pspeek(arrptr+2)
0ca38                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0ca38                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0ca38                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0ca38                 | ' 
0ca38                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0ca38                 | ' select case arrtype
0ca38     18 22 62 FD | 	getqx	local03
0ca3c     11 25 02 F1 | 	add	local04, local03
0ca40     A7 24 62 FC | 	wrlong	local04, fp
0ca44     08 4E 85 F1 | 	sub	fp, #8
0ca48     A7 26 02 FB | 	rdlong	local05, fp
0ca4c     28 4E 85 F1 | 	sub	fp, #40
0ca50     00 27 86 F1 | 	sub	local05, #256
0ca54     0C 26 26 F3 | 	fle	local05, #12
0ca58     30 26 62 FD | 	jmprel	local05
0ca5c                 | LR__0996
0ca5c     30 00 90 FD | 	jmp	#LR__0997
0ca60     58 00 90 FD | 	jmp	#LR__0998
0ca64     88 00 90 FD | 	jmp	#LR__0999
0ca68     B8 00 90 FD | 	jmp	#LR__1000
0ca6c     10 01 90 FD | 	jmp	#LR__1001
0ca70     68 01 90 FD | 	jmp	#LR__1002
0ca74     98 01 90 FD | 	jmp	#LR__1003
0ca78     C8 01 90 FD | 	jmp	#LR__1004
0ca7c     F8 01 90 FD | 	jmp	#LR__1005
0ca80     28 02 90 FD | 	jmp	#LR__1006
0ca84     58 02 90 FD | 	jmp	#LR__1007
0ca88     88 02 90 FD | 	jmp	#LR__1008
0ca8c     B8 02 90 FD | 	jmp	#LR__1009
0ca90                 | LR__0997
0ca90     A7 12 02 F6 | 	mov	arg01, fp
0ca94     30 4E 05 F1 | 	add	fp, #48
0ca98     A7 14 02 FB | 	rdlong	arg02, fp
0ca9c     30 4E 85 F1 | 	sub	fp, #48
0caa0     0C 16 06 F6 | 	mov	arg03, #12
0caa4     0B 00 00 FF 
0caa8     C0 E4 05 F1 | 	add	objptr, ##5824
0caac     C4 B3 B0 FD | 	call	#_psram_spin2_write
0cab0     0B 00 00 FF 
0cab4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cab8     94 02 90 FD | 	jmp	#LR__1010
0cabc                 | LR__0998
0cabc     30 4E 05 F1 | 	add	fp, #48
0cac0     A7 12 02 FB | 	rdlong	arg01, fp
0cac4     30 4E 85 F1 | 	sub	fp, #48
0cac8     A7 14 02 FB | 	rdlong	arg02, fp
0cacc     01 16 06 F6 | 	mov	arg03, #1
0cad0     00 18 06 F6 | 	mov	arg04, #0
0cad4     0B 00 00 FF 
0cad8     C0 E4 05 F1 | 	add	objptr, ##5824
0cadc                 | '     return fill(addr, pattern, count, listPtr, 1)
0cadc     01 1A 06 F6 | 	mov	arg05, #1
0cae0     2C B4 B0 FD | 	call	#_psram_spin2_fill
0cae4     0B 00 00 FF 
0cae8     C0 E4 85 F1 | 	sub	objptr, ##5824
0caec     60 02 90 FD | 	jmp	#LR__1010
0caf0                 | LR__0999
0caf0     30 4E 05 F1 | 	add	fp, #48
0caf4     A7 12 02 FB | 	rdlong	arg01, fp
0caf8     30 4E 85 F1 | 	sub	fp, #48
0cafc     A7 14 02 FB | 	rdlong	arg02, fp
0cb00     01 16 06 F6 | 	mov	arg03, #1
0cb04     00 18 06 F6 | 	mov	arg04, #0
0cb08     0B 00 00 FF 
0cb0c     C0 E4 05 F1 | 	add	objptr, ##5824
0cb10                 | '     return fill(addr, pattern, count, listPtr, 1)
0cb10     01 1A 06 F6 | 	mov	arg05, #1
0cb14     F8 B3 B0 FD | 	call	#_psram_spin2_fill
0cb18     0B 00 00 FF 
0cb1c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cb20     2C 02 90 FD | 	jmp	#LR__1010
0cb24                 | LR__1000
0cb24     30 4E 05 F1 | 	add	fp, #48
0cb28     A7 12 02 FB | 	rdlong	arg01, fp
0cb2c     30 4E 85 F1 | 	sub	fp, #48
0cb30     A7 14 02 FB | 	rdlong	arg02, fp
0cb34     01 16 06 F6 | 	mov	arg03, #1
0cb38     00 18 06 F6 | 	mov	arg04, #0
0cb3c     0B 00 00 FF 
0cb40     C0 E4 05 F1 | 	add	objptr, ##5824
0cb44                 | '     return fill(addr, pattern, count, listPtr, 1)
0cb44     01 1A 06 F6 | 	mov	arg05, #1
0cb48     C4 B3 B0 FD | 	call	#_psram_spin2_fill
0cb4c     30 4E 05 F1 | 	add	fp, #48
0cb50     A7 12 02 FB | 	rdlong	arg01, fp
0cb54     30 4E 85 F1 | 	sub	fp, #48
0cb58     01 12 06 F1 | 	add	arg01, #1
0cb5c     A7 14 02 FB | 	rdlong	arg02, fp
0cb60     08 14 46 F0 | 	shr	arg02, #8
0cb64     01 16 06 F6 | 	mov	arg03, #1
0cb68     00 18 06 F6 | 	mov	arg04, #0
0cb6c                 | '     return fill(addr, pattern, count, listPtr, 1)
0cb6c     01 1A 06 F6 | 	mov	arg05, #1
0cb70     9C B3 B0 FD | 	call	#_psram_spin2_fill
0cb74     0B 00 00 FF 
0cb78     C0 E4 85 F1 | 	sub	objptr, ##5824
0cb7c     D0 01 90 FD | 	jmp	#LR__1010
0cb80                 | LR__1001
0cb80     30 4E 05 F1 | 	add	fp, #48
0cb84     A7 12 02 FB | 	rdlong	arg01, fp
0cb88     30 4E 85 F1 | 	sub	fp, #48
0cb8c     A7 14 02 FB | 	rdlong	arg02, fp
0cb90     01 16 06 F6 | 	mov	arg03, #1
0cb94     00 18 06 F6 | 	mov	arg04, #0
0cb98     0B 00 00 FF 
0cb9c     C0 E4 05 F1 | 	add	objptr, ##5824
0cba0                 | '     return fill(addr, pattern, count, listPtr, 1)
0cba0     01 1A 06 F6 | 	mov	arg05, #1
0cba4     68 B3 B0 FD | 	call	#_psram_spin2_fill
0cba8     30 4E 05 F1 | 	add	fp, #48
0cbac     A7 12 02 FB | 	rdlong	arg01, fp
0cbb0     30 4E 85 F1 | 	sub	fp, #48
0cbb4     01 12 06 F1 | 	add	arg01, #1
0cbb8     A7 14 02 FB | 	rdlong	arg02, fp
0cbbc     08 14 46 F0 | 	shr	arg02, #8
0cbc0     01 16 06 F6 | 	mov	arg03, #1
0cbc4     00 18 06 F6 | 	mov	arg04, #0
0cbc8                 | '     return fill(addr, pattern, count, listPtr, 1)
0cbc8     01 1A 06 F6 | 	mov	arg05, #1
0cbcc     40 B3 B0 FD | 	call	#_psram_spin2_fill
0cbd0     0B 00 00 FF 
0cbd4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cbd8     74 01 90 FD | 	jmp	#LR__1010
0cbdc                 | LR__1002
0cbdc     30 4E 05 F1 | 	add	fp, #48
0cbe0     A7 12 02 FB | 	rdlong	arg01, fp
0cbe4     30 4E 85 F1 | 	sub	fp, #48
0cbe8     A7 14 02 FB | 	rdlong	arg02, fp
0cbec     01 16 06 F6 | 	mov	arg03, #1
0cbf0     00 18 06 F6 | 	mov	arg04, #0
0cbf4     0B 00 00 FF 
0cbf8     C0 E4 05 F1 | 	add	objptr, ##5824
0cbfc                 | '     return fill(addr, pattern, count, listPtr, 4)
0cbfc     04 1A 06 F6 | 	mov	arg05, #4
0cc00     0C B3 B0 FD | 	call	#_psram_spin2_fill
0cc04     0B 00 00 FF 
0cc08     C0 E4 85 F1 | 	sub	objptr, ##5824
0cc0c     40 01 90 FD | 	jmp	#LR__1010
0cc10                 | LR__1003
0cc10     30 4E 05 F1 | 	add	fp, #48
0cc14     A7 12 02 FB | 	rdlong	arg01, fp
0cc18     30 4E 85 F1 | 	sub	fp, #48
0cc1c     A7 14 02 FB | 	rdlong	arg02, fp
0cc20     01 16 06 F6 | 	mov	arg03, #1
0cc24     00 18 06 F6 | 	mov	arg04, #0
0cc28     0B 00 00 FF 
0cc2c     C0 E4 05 F1 | 	add	objptr, ##5824
0cc30                 | '     return fill(addr, pattern, count, listPtr, 4)
0cc30     04 1A 06 F6 | 	mov	arg05, #4
0cc34     D8 B2 B0 FD | 	call	#_psram_spin2_fill
0cc38     0B 00 00 FF 
0cc3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cc40     0C 01 90 FD | 	jmp	#LR__1010
0cc44                 | LR__1004
0cc44     30 4E 05 F1 | 	add	fp, #48
0cc48     A7 12 02 FB | 	rdlong	arg01, fp
0cc4c     30 4E 85 F1 | 	sub	fp, #48
0cc50     A7 14 02 FB | 	rdlong	arg02, fp
0cc54     01 16 06 F6 | 	mov	arg03, #1
0cc58     00 18 06 F6 | 	mov	arg04, #0
0cc5c     0B 00 00 FF 
0cc60     C0 E4 05 F1 | 	add	objptr, ##5824
0cc64                 | '     return fill(addr, pattern, count, listPtr, 4)
0cc64     04 1A 06 F6 | 	mov	arg05, #4
0cc68     A4 B2 B0 FD | 	call	#_psram_spin2_fill
0cc6c     0B 00 00 FF 
0cc70     C0 E4 85 F1 | 	sub	objptr, ##5824
0cc74     D8 00 90 FD | 	jmp	#LR__1010
0cc78                 | LR__1005
0cc78     30 4E 05 F1 | 	add	fp, #48
0cc7c     A7 12 02 FB | 	rdlong	arg01, fp
0cc80     30 4E 85 F1 | 	sub	fp, #48
0cc84     A7 14 02 FB | 	rdlong	arg02, fp
0cc88     01 16 06 F6 | 	mov	arg03, #1
0cc8c     00 18 06 F6 | 	mov	arg04, #0
0cc90     0B 00 00 FF 
0cc94     C0 E4 05 F1 | 	add	objptr, ##5824
0cc98                 | '     return fill(addr, pattern, count, listPtr, 4)
0cc98     04 1A 06 F6 | 	mov	arg05, #4
0cc9c     70 B2 B0 FD | 	call	#_psram_spin2_fill
0cca0     0B 00 00 FF 
0cca4     C0 E4 85 F1 | 	sub	objptr, ##5824
0cca8     A4 00 90 FD | 	jmp	#LR__1010
0ccac                 | LR__1006
0ccac     30 4E 05 F1 | 	add	fp, #48
0ccb0     A7 12 02 FB | 	rdlong	arg01, fp
0ccb4     30 4E 85 F1 | 	sub	fp, #48
0ccb8     A7 14 02 FB | 	rdlong	arg02, fp
0ccbc     01 16 06 F6 | 	mov	arg03, #1
0ccc0     00 18 06 F6 | 	mov	arg04, #0
0ccc4     0B 00 00 FF 
0ccc8     C0 E4 05 F1 | 	add	objptr, ##5824
0cccc                 | '     return fill(addr, pattern, count, listPtr, 4)
0cccc     04 1A 06 F6 | 	mov	arg05, #4
0ccd0     3C B2 B0 FD | 	call	#_psram_spin2_fill
0ccd4     0B 00 00 FF 
0ccd8     C0 E4 85 F1 | 	sub	objptr, ##5824
0ccdc     70 00 90 FD | 	jmp	#LR__1010
0cce0                 | LR__1007
0cce0     30 4E 05 F1 | 	add	fp, #48
0cce4     A7 12 02 FB | 	rdlong	arg01, fp
0cce8     30 4E 85 F1 | 	sub	fp, #48
0ccec     A7 14 02 FB | 	rdlong	arg02, fp
0ccf0     01 16 06 F6 | 	mov	arg03, #1
0ccf4     00 18 06 F6 | 	mov	arg04, #0
0ccf8     0B 00 00 FF 
0ccfc     C0 E4 05 F1 | 	add	objptr, ##5824
0cd00                 | '     return fill(addr, pattern, count, listPtr, 4)
0cd00     04 1A 06 F6 | 	mov	arg05, #4
0cd04     08 B2 B0 FD | 	call	#_psram_spin2_fill
0cd08     0B 00 00 FF 
0cd0c     C0 E4 85 F1 | 	sub	objptr, ##5824
0cd10     3C 00 90 FD | 	jmp	#LR__1010
0cd14                 | LR__1008
0cd14     30 4E 05 F1 | 	add	fp, #48
0cd18     A7 12 02 FB | 	rdlong	arg01, fp
0cd1c     30 4E 85 F1 | 	sub	fp, #48
0cd20     A7 14 02 FB | 	rdlong	arg02, fp
0cd24     01 16 06 F6 | 	mov	arg03, #1
0cd28     00 18 06 F6 | 	mov	arg04, #0
0cd2c     0B 00 00 FF 
0cd30     C0 E4 05 F1 | 	add	objptr, ##5824
0cd34                 | '     return fill(addr, pattern, count, listPtr, 4)
0cd34     04 1A 06 F6 | 	mov	arg05, #4
0cd38     D4 B1 B0 FD | 	call	#_psram_spin2_fill
0cd3c     0B 00 00 FF 
0cd40     C0 E4 85 F1 | 	sub	objptr, ##5824
0cd44     08 00 90 FD | 	jmp	#LR__1010
0cd48                 | LR__1009
0cd48     2F 12 06 F6 | 	mov	arg01, #47
0cd4c     54 86 B0 FD | 	call	#_printerror
0cd50                 | LR__1010
0cd50                 | LR__1011
0cd50     A7 F0 03 F6 | 	mov	ptra, fp
0cd54     B2 00 A0 FD | 	call	#popregs_
0cd58                 | _do_assign_ret
0cd58     2D 00 64 FD | 	ret
0cd5c                 | 
0cd5c                 | ' 
0cd5c                 | ' 
0cd5c                 | ' ' --------------------- Read a variable and push to the stack
0cd5c                 | ' 
0cd5c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0cd5c                 | ' 
0cd5c                 | ' sub do_getvar
0cd5c                 | _do_getvar
0cd5c     04 4A 05 F6 | 	mov	COUNT_, #4
0cd60     A8 00 A0 FD | 	call	#pushregs_
0cd64     3C F0 07 F1 | 	add	ptra, #60
0cd68                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0cd68                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0cd68     69 00 00 FF 
0cd6c     54 E4 05 F1 | 	add	objptr, ##53844
0cd70     F2 1E 02 FB | 	rdlong	local01, objptr
0cd74     0F 17 02 F6 | 	mov	arg03, local01
0cd78     01 16 66 F0 | 	shl	arg03, #1
0cd7c     0F 17 02 F1 | 	add	arg03, local01
0cd80     02 16 66 F0 | 	shl	arg03, #2
0cd84     03 00 00 FF 
0cd88     04 E4 85 F1 | 	sub	objptr, ##1540
0cd8c     F2 16 02 F1 | 	add	arg03, objptr
0cd90     04 16 06 F1 | 	add	arg03, #4
0cd94     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0cd98     66 00 00 FF 
0cd9c     50 E4 85 F1 | 	sub	objptr, ##52304
0cda0     C4 00 90 5D |  if_ne	jmp	#LR__1021
0cda4     69 00 00 FF 
0cda8     54 E4 05 F1 | 	add	objptr, ##53844
0cdac     F2 1E 02 FB | 	rdlong	local01, objptr
0cdb0     0F 13 02 F6 | 	mov	arg01, local01
0cdb4     01 12 66 F0 | 	shl	arg01, #1
0cdb8     0F 13 02 F1 | 	add	arg01, local01
0cdbc     02 12 66 F0 | 	shl	arg01, #2
0cdc0     03 00 00 FF 
0cdc4     04 E4 85 F1 | 	sub	objptr, ##1540
0cdc8     F2 12 02 F1 | 	add	arg01, objptr
0cdcc     09 1F 02 FB | 	rdlong	local01, arg01
0cdd0     04 1E 66 F0 | 	shl	local01, #4
0cdd4     32 00 00 FF 
0cdd8     74 E4 85 F1 | 	sub	objptr, ##25716
0cddc     F2 1E 02 F1 | 	add	local01, objptr
0cde0     04 1E 06 F1 | 	add	local01, #4
0cde4     0F 13 02 FB | 	rdlong	arg01, local01
0cde8     04 1E 06 F1 | 	add	local01, #4
0cdec     0F 1F 02 FB | 	rdlong	local01, local01
0cdf0     A7 12 62 FC | 	wrlong	arg01, fp
0cdf4     04 4E 05 F1 | 	add	fp, #4
0cdf8     A7 1E 62 FC | 	wrlong	local01, fp
0cdfc     35 00 00 FF 
0ce00     78 E4 05 F1 | 	add	objptr, ##27256
0ce04     F2 1E 02 FB | 	rdlong	local01, objptr
0ce08     0F 13 02 F6 | 	mov	arg01, local01
0ce0c     01 12 66 F0 | 	shl	arg01, #1
0ce10     0F 13 02 F1 | 	add	arg01, local01
0ce14     02 12 66 F0 | 	shl	arg01, #2
0ce18     03 00 00 FF 
0ce1c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce20     F2 12 02 F1 | 	add	arg01, objptr
0ce24     09 1F 02 FB | 	rdlong	local01, arg01
0ce28     04 1E 66 F0 | 	shl	local01, #4
0ce2c     32 00 00 FF 
0ce30     74 E4 85 F1 | 	sub	objptr, ##25716
0ce34     F2 1E 02 F1 | 	add	local01, objptr
0ce38     0C 1E 06 F1 | 	add	local01, #12
0ce3c     0F 1F 02 FB | 	rdlong	local01, local01
0ce40     04 4E 05 F1 | 	add	fp, #4
0ce44     A7 1E 62 FC | 	wrlong	local01, fp
0ce48                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ce48                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ce48                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ce48     08 4E 85 F1 | 	sub	fp, #8
0ce4c     00 1F 16 F2 | 	cmp	local01, #256 wc
0ce50     33 00 00 FF 
0ce54     DC E5 85 F1 | 	sub	objptr, ##26588
0ce58     0C 00 90 3D |  if_ae	jmp	#LR__1020
0ce5c     A7 12 02 F6 | 	mov	arg01, fp
0ce60     64 C7 BF FD | 	call	#_push
0ce64     88 04 90 FD | 	jmp	#LR__1042
0ce68                 | LR__1020
0ce68                 | LR__1021
0ce68     69 00 00 FF 
0ce6c     54 E4 05 F1 | 	add	objptr, ##53844
0ce70     F2 16 02 FB | 	rdlong	arg03, objptr
0ce74     0B 15 02 F6 | 	mov	arg02, arg03
0ce78     01 14 66 F0 | 	shl	arg02, #1
0ce7c     0B 15 02 F1 | 	add	arg02, arg03
0ce80     02 14 66 F0 | 	shl	arg02, #2
0ce84     03 00 00 FF 
0ce88     04 E4 85 F1 | 	sub	objptr, ##1540
0ce8c     F2 14 02 F1 | 	add	arg02, objptr
0ce90     0A 17 02 FB | 	rdlong	arg03, arg02
0ce94     04 16 66 F0 | 	shl	arg03, #4
0ce98     32 00 00 FF 
0ce9c     74 E4 85 F1 | 	sub	objptr, ##25716
0cea0     F2 16 02 F1 | 	add	arg03, objptr
0cea4     04 16 06 F1 | 	add	arg03, #4
0cea8     0B 13 02 FB | 	rdlong	arg01, arg03
0ceac     0C 4E 05 F1 | 	add	fp, #12
0ceb0     A7 12 62 FC | 	wrlong	arg01, fp
0ceb4     0C 4E 85 F1 | 	sub	fp, #12
0ceb8     33 00 00 FF 
0cebc     DC E5 85 F1 | 	sub	objptr, ##26588
0cec0     9C 86 B0 FD | 	call	#_pslpeek
0cec4     FD FA 31 F9 | 	getword	result1, result1, #0
0cec8     10 4E 05 F1 | 	add	fp, #16
0cecc     A7 FA 61 FC | 	wrlong	result1, fp
0ced0     69 00 00 FF 
0ced4     54 E4 05 F1 | 	add	objptr, ##53844
0ced8     F2 16 02 FB | 	rdlong	arg03, objptr
0cedc     0B 15 02 F6 | 	mov	arg02, arg03
0cee0     01 14 66 F0 | 	shl	arg02, #1
0cee4     0B 15 02 F1 | 	add	arg02, arg03
0cee8     02 14 66 F0 | 	shl	arg02, #2
0ceec     03 00 00 FF 
0cef0     04 E4 85 F1 | 	sub	objptr, ##1540
0cef4     F2 14 02 F1 | 	add	arg02, objptr
0cef8     04 14 06 F1 | 	add	arg02, #4
0cefc     0A 17 02 FB | 	rdlong	arg03, arg02
0cf00     04 4E 05 F1 | 	add	fp, #4
0cf04     A7 16 62 FC | 	wrlong	arg03, fp
0cf08     08 4E 85 F1 | 	sub	fp, #8
0cf0c     A7 12 02 FB | 	rdlong	arg01, fp
0cf10     0C 4E 85 F1 | 	sub	fp, #12
0cf14     02 12 06 F1 | 	add	arg01, #2
0cf18     66 00 00 FF 
0cf1c     50 E4 85 F1 | 	sub	objptr, ##52304
0cf20     E4 85 B0 FD | 	call	#_pspeek
0cf24     FD FA E1 F8 | 	getbyte	result1, result1, #0
0cf28     18 4E 05 F1 | 	add	fp, #24
0cf2c     A7 FA 61 FC | 	wrlong	result1, fp
0cf30     0C 4E 85 F1 | 	sub	fp, #12
0cf34     A7 12 02 FB | 	rdlong	arg01, fp
0cf38     0C 4E 85 F1 | 	sub	fp, #12
0cf3c     04 12 06 F1 | 	add	arg01, #4
0cf40     1C 86 B0 FD | 	call	#_pslpeek
0cf44     1C 4E 05 F1 | 	add	fp, #28
0cf48     A7 FA 61 FC | 	wrlong	result1, fp
0cf4c     10 4E 85 F1 | 	sub	fp, #16
0cf50     A7 12 02 FB | 	rdlong	arg01, fp
0cf54     0C 4E 85 F1 | 	sub	fp, #12
0cf58     08 12 06 F1 | 	add	arg01, #8
0cf5c     00 86 B0 FD | 	call	#_pslpeek
0cf60     20 4E 05 F1 | 	add	fp, #32
0cf64     A7 FA 61 FC | 	wrlong	result1, fp
0cf68     14 4E 85 F1 | 	sub	fp, #20
0cf6c     A7 12 02 FB | 	rdlong	arg01, fp
0cf70     0C 4E 85 F1 | 	sub	fp, #12
0cf74     0C 12 06 F1 | 	add	arg01, #12
0cf78     E4 85 B0 FD | 	call	#_pslpeek
0cf7c     24 4E 05 F1 | 	add	fp, #36
0cf80     A7 FA 61 FC | 	wrlong	result1, fp
0cf84                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0cf84                 | ' esize=pspeek(arrptr+2)
0cf84                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0cf84                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0cf84                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0cf84                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0cf84     10 4E 85 F1 | 	sub	fp, #16
0cf88     A7 16 02 FB | 	rdlong	arg03, fp
0cf8c     14 4E 85 F1 | 	sub	fp, #20
0cf90     03 16 16 F2 | 	cmp	arg03, #3 wc
0cf94     30 00 90 CD |  if_b	jmp	#LR__1022
0cf98     94 C5 BF FD | 	call	#_pop
0cf9c     A7 FA 61 FC | 	wrlong	result1, fp
0cfa0     04 4E 05 F1 | 	add	fp, #4
0cfa4     A7 FC 61 FC | 	wrlong	result2, fp
0cfa8     04 4E 05 F1 | 	add	fp, #4
0cfac     A7 FE 61 FC | 	wrlong	result3, fp
0cfb0     08 4E 85 F1 | 	sub	fp, #8
0cfb4     A7 16 02 FB | 	rdlong	arg03, fp
0cfb8     30 4E 05 F1 | 	add	fp, #48
0cfbc     A7 16 62 FC | 	wrlong	arg03, fp
0cfc0     30 4E 85 F1 | 	sub	fp, #48
0cfc4     0C 00 90 FD | 	jmp	#LR__1023
0cfc8                 | LR__1022
0cfc8     30 4E 05 F1 | 	add	fp, #48
0cfcc     A7 00 68 FC | 	wrlong	#0, fp
0cfd0     30 4E 85 F1 | 	sub	fp, #48
0cfd4                 | LR__1023
0cfd4                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0cfd4     14 4E 05 F1 | 	add	fp, #20
0cfd8     A7 16 02 FB | 	rdlong	arg03, fp
0cfdc     14 4E 85 F1 | 	sub	fp, #20
0cfe0     02 16 16 F2 | 	cmp	arg03, #2 wc
0cfe4     30 00 90 CD |  if_b	jmp	#LR__1024
0cfe8     44 C5 BF FD | 	call	#_pop
0cfec     A7 FA 61 FC | 	wrlong	result1, fp
0cff0     04 4E 05 F1 | 	add	fp, #4
0cff4     A7 FC 61 FC | 	wrlong	result2, fp
0cff8     04 4E 05 F1 | 	add	fp, #4
0cffc     A7 FE 61 FC | 	wrlong	result3, fp
0d000     08 4E 85 F1 | 	sub	fp, #8
0d004     A7 16 02 FB | 	rdlong	arg03, fp
0d008     2C 4E 05 F1 | 	add	fp, #44
0d00c     A7 16 62 FC | 	wrlong	arg03, fp
0d010     2C 4E 85 F1 | 	sub	fp, #44
0d014     0C 00 90 FD | 	jmp	#LR__1025
0d018                 | LR__1024
0d018     2C 4E 05 F1 | 	add	fp, #44
0d01c     A7 00 68 FC | 	wrlong	#0, fp
0d020     2C 4E 85 F1 | 	sub	fp, #44
0d024                 | LR__1025
0d024                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0d024     14 4E 05 F1 | 	add	fp, #20
0d028     A7 16 02 FB | 	rdlong	arg03, fp
0d02c     14 4E 85 F1 | 	sub	fp, #20
0d030     01 16 16 F2 | 	cmp	arg03, #1 wc
0d034     30 00 90 CD |  if_b	jmp	#LR__1026
0d038     F4 C4 BF FD | 	call	#_pop
0d03c     A7 FA 61 FC | 	wrlong	result1, fp
0d040     04 4E 05 F1 | 	add	fp, #4
0d044     A7 FC 61 FC | 	wrlong	result2, fp
0d048     04 4E 05 F1 | 	add	fp, #4
0d04c     A7 FE 61 FC | 	wrlong	result3, fp
0d050     08 4E 85 F1 | 	sub	fp, #8
0d054     A7 16 02 FB | 	rdlong	arg03, fp
0d058     28 4E 05 F1 | 	add	fp, #40
0d05c     A7 16 62 FC | 	wrlong	arg03, fp
0d060     28 4E 85 F1 | 	sub	fp, #40
0d064     0C 00 90 FD | 	jmp	#LR__1027
0d068                 | LR__1026
0d068     28 4E 05 F1 | 	add	fp, #40
0d06c     A7 00 68 FC | 	wrlong	#0, fp
0d070     28 4E 85 F1 | 	sub	fp, #40
0d074                 | LR__1027
0d074     0C 4E 05 F1 | 	add	fp, #12
0d078     A7 20 02 FB | 	rdlong	local02, fp
0d07c     1C 4E 05 F1 | 	add	fp, #28
0d080     A7 22 02 FB | 	rdlong	local03, fp
0d084     04 4E 05 F1 | 	add	fp, #4
0d088     A7 FE 01 FB | 	rdlong	result3, fp
0d08c     10 4E 85 F1 | 	sub	fp, #16
0d090     A7 FC 01 FB | 	rdlong	result2, fp
0d094     FE FE 01 FD | 	qmul	result3, result2
0d098     10 20 06 F1 | 	add	local02, #16
0d09c     14 4E 05 F1 | 	add	fp, #20
0d0a0     A7 FE 01 FB | 	rdlong	result3, fp
0d0a4     18 FA 61 FD | 	getqx	result1
0d0a8     FE FE 01 FD | 	qmul	result3, result2
0d0ac     FD 22 02 F1 | 	add	local03, result1
0d0b0     10 4E 85 F1 | 	sub	fp, #16
0d0b4     A7 FC 01 FB | 	rdlong	result2, fp
0d0b8     18 FE 61 FD | 	getqx	result3
0d0bc     FE FE 01 FD | 	qmul	result3, result2
0d0c0     08 4E 85 F1 | 	sub	fp, #8
0d0c4     A7 FC 01 FB | 	rdlong	result2, fp
0d0c8     18 FE 61 FD | 	getqx	result3
0d0cc     FF 22 02 F1 | 	add	local03, result3
0d0d0     FE 22 02 FD | 	qmul	local03, result2
0d0d4     1C 4E 05 F1 | 	add	fp, #28
0d0d8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0d0d8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0d0d8                 | ' 
0d0d8                 | ' select case vartype
0d0d8     18 FE 61 FD | 	getqx	result3
0d0dc     FF 20 02 F1 | 	add	local02, result3
0d0e0     A7 20 62 FC | 	wrlong	local02, fp
0d0e4     24 4E 85 F1 | 	sub	fp, #36
0d0e8     A7 24 02 FB | 	rdlong	local04, fp
0d0ec     10 4E 85 F1 | 	sub	fp, #16
0d0f0     00 25 86 F1 | 	sub	local04, #256
0d0f4     0C 24 26 F3 | 	fle	local04, #12
0d0f8     30 24 62 FD | 	jmprel	local04
0d0fc                 | LR__1028
0d0fc     30 00 90 FD | 	jmp	#LR__1029
0d100     58 00 90 FD | 	jmp	#LR__1030
0d104     8C 00 90 FD | 	jmp	#LR__1031
0d108     AC 00 90 FD | 	jmp	#LR__1032
0d10c     E8 00 90 FD | 	jmp	#LR__1033
0d110     08 01 90 FD | 	jmp	#LR__1034
0d114     24 01 90 FD | 	jmp	#LR__1035
0d118     40 01 90 FD | 	jmp	#LR__1036
0d11c     50 01 90 FD | 	jmp	#LR__1037
0d120     60 01 90 FD | 	jmp	#LR__1038
0d124     7C 01 90 FD | 	jmp	#LR__1039
0d128     8C 01 90 FD | 	jmp	#LR__1040
0d12c     B8 01 90 FD | 	jmp	#LR__1041
0d130                 | LR__1029
0d130     A7 12 02 F6 | 	mov	arg01, fp
0d134     34 4E 05 F1 | 	add	fp, #52
0d138     A7 14 02 FB | 	rdlong	arg02, fp
0d13c     34 4E 85 F1 | 	sub	fp, #52
0d140     0C 16 06 F6 | 	mov	arg03, #12
0d144     0B 00 00 FF 
0d148     C0 E4 05 F1 | 	add	objptr, ##5824
0d14c     88 AC B0 FD | 	call	#_psram_spin2_read1
0d150     0B 00 00 FF 
0d154     C0 E4 85 F1 | 	sub	objptr, ##5824
0d158     8C 01 90 FD | 	jmp	#LR__1041
0d15c                 | LR__1030
0d15c     08 4E 05 F1 | 	add	fp, #8
0d160     A7 38 68 FC | 	wrlong	#28, fp
0d164     2C 4E 05 F1 | 	add	fp, #44
0d168     A7 12 02 FB | 	rdlong	arg01, fp
0d16c     34 4E 85 F1 | 	sub	fp, #52
0d170     94 83 B0 FD | 	call	#_pspeek
0d174     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d178     A7 FA 61 FC | 	wrlong	result1, fp
0d17c     80 FA 15 F2 | 	cmp	result1, #128 wc
0d180     00 1F 66 36 |  if_ae	neg	local01, #256
0d184     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d188     11 1F 42 35 |  if_ae	or	local01, local03
0d18c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d190     54 01 90 FD | 	jmp	#LR__1041
0d194                 | LR__1031
0d194     08 4E 05 F1 | 	add	fp, #8
0d198     A7 3A 68 FC | 	wrlong	#29, fp
0d19c     2C 4E 05 F1 | 	add	fp, #44
0d1a0     A7 12 02 FB | 	rdlong	arg01, fp
0d1a4     34 4E 85 F1 | 	sub	fp, #52
0d1a8     5C 83 B0 FD | 	call	#_pspeek
0d1ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
0d1b0     A7 FA 61 FC | 	wrlong	result1, fp
0d1b4     30 01 90 FD | 	jmp	#LR__1041
0d1b8                 | LR__1032
0d1b8     08 4E 05 F1 | 	add	fp, #8
0d1bc     A7 38 68 FC | 	wrlong	#28, fp
0d1c0     2C 4E 05 F1 | 	add	fp, #44
0d1c4     A7 12 02 FB | 	rdlong	arg01, fp
0d1c8     34 4E 85 F1 | 	sub	fp, #52
0d1cc     90 83 B0 FD | 	call	#_pslpeek
0d1d0     FD FA 31 F9 | 	getword	result1, result1, #0
0d1d4     A7 FA 61 FC | 	wrlong	result1, fp
0d1d8     40 00 00 FF 
0d1dc     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0d1e0     FF 7F 00 3F 
0d1e4     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0d1e8     A7 22 02 3B |  if_ae	rdlong	local03, fp
0d1ec     11 1F 42 35 |  if_ae	or	local01, local03
0d1f0     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0d1f4     F0 00 90 FD | 	jmp	#LR__1041
0d1f8                 | LR__1033
0d1f8     08 4E 05 F1 | 	add	fp, #8
0d1fc     A7 3A 68 FC | 	wrlong	#29, fp
0d200     2C 4E 05 F1 | 	add	fp, #44
0d204     A7 12 02 FB | 	rdlong	arg01, fp
0d208     34 4E 85 F1 | 	sub	fp, #52
0d20c     50 83 B0 FD | 	call	#_pslpeek
0d210     FD FA 31 F9 | 	getword	result1, result1, #0
0d214     A7 FA 61 FC | 	wrlong	result1, fp
0d218     CC 00 90 FD | 	jmp	#LR__1041
0d21c                 | LR__1034
0d21c     08 4E 05 F1 | 	add	fp, #8
0d220     A7 38 68 FC | 	wrlong	#28, fp
0d224     2C 4E 05 F1 | 	add	fp, #44
0d228     A7 12 02 FB | 	rdlong	arg01, fp
0d22c     34 4E 85 F1 | 	sub	fp, #52
0d230     2C 83 B0 FD | 	call	#_pslpeek
0d234     A7 FA 61 FC | 	wrlong	result1, fp
0d238     AC 00 90 FD | 	jmp	#LR__1041
0d23c                 | LR__1035
0d23c     08 4E 05 F1 | 	add	fp, #8
0d240     A7 3A 68 FC | 	wrlong	#29, fp
0d244     2C 4E 05 F1 | 	add	fp, #44
0d248     A7 12 02 FB | 	rdlong	arg01, fp
0d24c     34 4E 85 F1 | 	sub	fp, #52
0d250     0C 83 B0 FD | 	call	#_pslpeek
0d254     A7 FA 61 FC | 	wrlong	result1, fp
0d258     8C 00 90 FD | 	jmp	#LR__1041
0d25c                 | LR__1036
0d25c     08 4E 05 F1 | 	add	fp, #8
0d260     A7 FE 69 FC | 	wrlong	#255, fp
0d264     08 4E 85 F1 | 	sub	fp, #8
0d268     A7 60 68 FC | 	wrlong	#48, fp
0d26c     78 00 90 FD | 	jmp	#LR__1041
0d270                 | LR__1037
0d270     08 4E 05 F1 | 	add	fp, #8
0d274     A7 FE 69 FC | 	wrlong	#255, fp
0d278     08 4E 85 F1 | 	sub	fp, #8
0d27c     A7 60 68 FC | 	wrlong	#48, fp
0d280     64 00 90 FD | 	jmp	#LR__1041
0d284                 | LR__1038
0d284     08 4E 05 F1 | 	add	fp, #8
0d288     A7 3C 68 FC | 	wrlong	#30, fp
0d28c     2C 4E 05 F1 | 	add	fp, #44
0d290     A7 12 02 FB | 	rdlong	arg01, fp
0d294     34 4E 85 F1 | 	sub	fp, #52
0d298     C4 82 B0 FD | 	call	#_pslpeek
0d29c     A7 FA 61 FC | 	wrlong	result1, fp
0d2a0     44 00 90 FD | 	jmp	#LR__1041
0d2a4                 | LR__1039
0d2a4     08 4E 05 F1 | 	add	fp, #8
0d2a8     A7 FE 69 FC | 	wrlong	#255, fp
0d2ac     08 4E 85 F1 | 	sub	fp, #8
0d2b0     A7 60 68 FC | 	wrlong	#48, fp
0d2b4     30 00 90 FD | 	jmp	#LR__1041
0d2b8                 | LR__1040
0d2b8     08 4E 05 F1 | 	add	fp, #8
0d2bc     A7 3E 68 FC | 	wrlong	#31, fp
0d2c0     2C 4E 05 F1 | 	add	fp, #44
0d2c4     A7 12 02 FB | 	rdlong	arg01, fp
0d2c8     34 4E 85 F1 | 	sub	fp, #52
0d2cc     90 82 B0 FD | 	call	#_pslpeek
0d2d0     A7 FA 61 FC | 	wrlong	result1, fp
0d2d4     00 04 00 FF 
0d2d8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0d2dc     08 4E 05 31 |  if_ae	add	fp, #8
0d2e0     A7 56 68 3C |  if_ae	wrlong	#43, fp
0d2e4     08 4E 85 31 |  if_ae	sub	fp, #8
0d2e8                 | LR__1041
0d2e8     A7 12 02 F6 | 	mov	arg01, fp
0d2ec     D8 C2 BF FD | 	call	#_push
0d2f0                 | LR__1042
0d2f0     A7 F0 03 F6 | 	mov	ptra, fp
0d2f4     B2 00 A0 FD | 	call	#popregs_
0d2f8                 | _do_getvar_ret
0d2f8     2D 00 64 FD | 	ret
0d2fc                 | 
0d2fc                 | ' 
0d2fc                 | ' '------------------------ Operators 
0d2fc                 | ' 
0d2fc                 | ' sub do_plus 
0d2fc                 | _do_plus
0d2fc     05 4A 05 F6 | 	mov	COUNT_, #5
0d300     A8 00 A0 FD | 	call	#pushregs_
0d304     18 F0 07 F1 | 	add	ptra, #24
0d308     24 C2 BF FD | 	call	#_pop
0d30c     FD 1E 02 F6 | 	mov	local01, result1
0d310     FE 20 02 F6 | 	mov	local02, result2
0d314     FF 22 02 F6 | 	mov	local03, result3
0d318     0C 4E 05 F1 | 	add	fp, #12
0d31c     A7 1E 62 FC | 	wrlong	local01, fp
0d320     04 4E 05 F1 | 	add	fp, #4
0d324     A7 20 62 FC | 	wrlong	local02, fp
0d328     04 4E 05 F1 | 	add	fp, #4
0d32c     A7 22 62 FC | 	wrlong	local03, fp
0d330     14 4E 85 F1 | 	sub	fp, #20
0d334     F8 C1 BF FD | 	call	#_pop
0d338     FF 22 02 F6 | 	mov	local03, result3
0d33c     A7 FA 61 FC | 	wrlong	result1, fp
0d340     04 4E 05 F1 | 	add	fp, #4
0d344     A7 FC 61 FC | 	wrlong	result2, fp
0d348     04 4E 05 F1 | 	add	fp, #4
0d34c     A7 22 62 FC | 	wrlong	local03, fp
0d350                 | ' 
0d350                 | ' t2=pop()
0d350                 | ' t1=pop()
0d350                 | ' 
0d350                 | ' 
0d350                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0d350     08 4E 85 F1 | 	sub	fp, #8
0d354     1D 22 0E F2 | 	cmp	local03, #29 wz
0d358     14 4E 05 A1 |  if_e	add	fp, #20
0d35c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d360     14 4E 85 A1 |  if_e	sub	fp, #20
0d364     12 23 02 A6 |  if_e	mov	local03, local04
0d368     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d36c     1C 00 90 5D |  if_ne	jmp	#LR__1050
0d370     A7 1E 02 FB | 	rdlong	local01, fp
0d374     0C 4E 05 F1 | 	add	fp, #12
0d378     A7 20 02 FB | 	rdlong	local02, fp
0d37c     0C 4E 85 F1 | 	sub	fp, #12
0d380     10 1F 02 F1 | 	add	local01, local02
0d384     A7 1E 62 FC | 	wrlong	local01, fp
0d388     48 04 90 FD | 	jmp	#LR__1065
0d38c                 | LR__1050
0d38c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0d38c     08 4E 05 F1 | 	add	fp, #8
0d390     A7 1E 02 FB | 	rdlong	local01, fp
0d394     08 4E 85 F1 | 	sub	fp, #8
0d398     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d39c     14 4E 05 A1 |  if_e	add	fp, #20
0d3a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d3a4     14 4E 85 A1 |  if_e	sub	fp, #20
0d3a8     12 23 02 A6 |  if_e	mov	local03, local04
0d3ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d3b0     28 00 90 5D |  if_ne	jmp	#LR__1051
0d3b4     A7 1E 02 FB | 	rdlong	local01, fp
0d3b8     0C 4E 05 F1 | 	add	fp, #12
0d3bc     A7 20 02 FB | 	rdlong	local02, fp
0d3c0     0C 4E 85 F1 | 	sub	fp, #12
0d3c4     10 1F 02 F1 | 	add	local01, local02
0d3c8     A7 1E 62 FC | 	wrlong	local01, fp
0d3cc     08 4E 05 F1 | 	add	fp, #8
0d3d0     A7 38 68 FC | 	wrlong	#28, fp
0d3d4     08 4E 85 F1 | 	sub	fp, #8
0d3d8     F8 03 90 FD | 	jmp	#LR__1065
0d3dc                 | LR__1051
0d3dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d3dc     08 4E 05 F1 | 	add	fp, #8
0d3e0     A7 1E 02 FB | 	rdlong	local01, fp
0d3e4     08 4E 85 F1 | 	sub	fp, #8
0d3e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d3ec     14 4E 05 A1 |  if_e	add	fp, #20
0d3f0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d3f4     14 4E 85 A1 |  if_e	sub	fp, #20
0d3f8     12 23 02 A6 |  if_e	mov	local03, local04
0d3fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d400     30 00 90 5D |  if_ne	jmp	#LR__1052
0d404     A7 12 02 FB | 	rdlong	arg01, fp
0d408     9C DA B0 FD | 	call	#__system___float_fromuns
0d40c     FD 12 02 F6 | 	mov	arg01, result1
0d410     0C 4E 05 F1 | 	add	fp, #12
0d414     A7 14 02 FB | 	rdlong	arg02, fp
0d418     0C 4E 85 F1 | 	sub	fp, #12
0d41c     BC DA B0 FD | 	call	#__system___float_add
0d420     A7 FA 61 FC | 	wrlong	result1, fp
0d424     08 4E 05 F1 | 	add	fp, #8
0d428     A7 3C 68 FC | 	wrlong	#30, fp
0d42c     08 4E 85 F1 | 	sub	fp, #8
0d430     A0 03 90 FD | 	jmp	#LR__1065
0d434                 | LR__1052
0d434                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0d434     08 4E 05 F1 | 	add	fp, #8
0d438     A7 1E 02 FB | 	rdlong	local01, fp
0d43c     08 4E 85 F1 | 	sub	fp, #8
0d440     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d444     14 4E 05 A1 |  if_e	add	fp, #20
0d448     A7 24 02 AB |  if_e	rdlong	local04, fp
0d44c     14 4E 85 A1 |  if_e	sub	fp, #20
0d450     12 23 02 A6 |  if_e	mov	local03, local04
0d454     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d458     1C 00 90 5D |  if_ne	jmp	#LR__1053
0d45c     A7 1E 02 FB | 	rdlong	local01, fp
0d460     0C 4E 05 F1 | 	add	fp, #12
0d464     A7 20 02 FB | 	rdlong	local02, fp
0d468     0C 4E 85 F1 | 	sub	fp, #12
0d46c     10 1F 02 F1 | 	add	local01, local02
0d470     A7 1E 62 FC | 	wrlong	local01, fp
0d474     5C 03 90 FD | 	jmp	#LR__1065
0d478                 | LR__1053
0d478                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0d478     08 4E 05 F1 | 	add	fp, #8
0d47c     A7 1E 02 FB | 	rdlong	local01, fp
0d480     08 4E 85 F1 | 	sub	fp, #8
0d484     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d488     14 4E 05 A1 |  if_e	add	fp, #20
0d48c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d490     14 4E 85 A1 |  if_e	sub	fp, #20
0d494     12 23 02 A6 |  if_e	mov	local03, local04
0d498     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d49c     1C 00 90 5D |  if_ne	jmp	#LR__1054
0d4a0     A7 1E 02 FB | 	rdlong	local01, fp
0d4a4     0C 4E 05 F1 | 	add	fp, #12
0d4a8     A7 20 02 FB | 	rdlong	local02, fp
0d4ac     0C 4E 85 F1 | 	sub	fp, #12
0d4b0     10 1F 02 F1 | 	add	local01, local02
0d4b4     A7 1E 62 FC | 	wrlong	local01, fp
0d4b8     18 03 90 FD | 	jmp	#LR__1065
0d4bc                 | LR__1054
0d4bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0d4bc     08 4E 05 F1 | 	add	fp, #8
0d4c0     A7 1E 02 FB | 	rdlong	local01, fp
0d4c4     08 4E 85 F1 | 	sub	fp, #8
0d4c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d4cc     14 4E 05 A1 |  if_e	add	fp, #20
0d4d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0d4d4     14 4E 85 A1 |  if_e	sub	fp, #20
0d4d8     12 23 02 A6 |  if_e	mov	local03, local04
0d4dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d4e0     40 00 90 5D |  if_ne	jmp	#LR__1055
0d4e4     A7 12 02 FB | 	rdlong	arg01, fp
0d4e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d4ec     1F 26 C6 C9 |  if_b	decod	local05, #31
0d4f0     00 26 06 36 |  if_ae	mov	local05, #0
0d4f4     B0 D9 B0 FD | 	call	#__system___float_fromuns
0d4f8     13 FB 61 F5 | 	xor	result1, local05
0d4fc     FD 12 02 F6 | 	mov	arg01, result1
0d500     0C 4E 05 F1 | 	add	fp, #12
0d504     A7 14 02 FB | 	rdlong	arg02, fp
0d508     0C 4E 85 F1 | 	sub	fp, #12
0d50c     CC D9 B0 FD | 	call	#__system___float_add
0d510     A7 FA 61 FC | 	wrlong	result1, fp
0d514     08 4E 05 F1 | 	add	fp, #8
0d518     A7 3C 68 FC | 	wrlong	#30, fp
0d51c     08 4E 85 F1 | 	sub	fp, #8
0d520     B0 02 90 FD | 	jmp	#LR__1065
0d524                 | LR__1055
0d524                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0d524     08 4E 05 F1 | 	add	fp, #8
0d528     A7 1E 02 FB | 	rdlong	local01, fp
0d52c     08 4E 85 F1 | 	sub	fp, #8
0d530     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d534     14 4E 05 A1 |  if_e	add	fp, #20
0d538     A7 24 02 AB |  if_e	rdlong	local04, fp
0d53c     14 4E 85 A1 |  if_e	sub	fp, #20
0d540     12 23 02 A6 |  if_e	mov	local03, local04
0d544     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d548     28 00 90 5D |  if_ne	jmp	#LR__1056
0d54c     A7 1E 02 FB | 	rdlong	local01, fp
0d550     0C 4E 05 F1 | 	add	fp, #12
0d554     A7 12 02 FB | 	rdlong	arg01, fp
0d558     0C 4E 85 F1 | 	sub	fp, #12
0d55c     48 D9 B0 FD | 	call	#__system___float_fromuns
0d560     FD 14 02 F6 | 	mov	arg02, result1
0d564     0F 13 02 F6 | 	mov	arg01, local01
0d568     70 D9 B0 FD | 	call	#__system___float_add
0d56c     A7 FA 61 FC | 	wrlong	result1, fp
0d570     60 02 90 FD | 	jmp	#LR__1065
0d574                 | LR__1056
0d574                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0d574     08 4E 05 F1 | 	add	fp, #8
0d578     A7 1E 02 FB | 	rdlong	local01, fp
0d57c     08 4E 85 F1 | 	sub	fp, #8
0d580     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d584     14 4E 05 A1 |  if_e	add	fp, #20
0d588     A7 24 02 AB |  if_e	rdlong	local04, fp
0d58c     14 4E 85 A1 |  if_e	sub	fp, #20
0d590     12 23 02 A6 |  if_e	mov	local03, local04
0d594     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d598     38 00 90 5D |  if_ne	jmp	#LR__1057
0d59c     A7 1E 02 FB | 	rdlong	local01, fp
0d5a0     0C 4E 05 F1 | 	add	fp, #12
0d5a4     A7 12 02 FB | 	rdlong	arg01, fp
0d5a8     0C 4E 85 F1 | 	sub	fp, #12
0d5ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5b0     1F 26 C6 C9 |  if_b	decod	local05, #31
0d5b4     00 26 06 36 |  if_ae	mov	local05, #0
0d5b8     EC D8 B0 FD | 	call	#__system___float_fromuns
0d5bc     13 FB 61 F5 | 	xor	result1, local05
0d5c0     FD 14 02 F6 | 	mov	arg02, result1
0d5c4     0F 13 02 F6 | 	mov	arg01, local01
0d5c8     10 D9 B0 FD | 	call	#__system___float_add
0d5cc     A7 FA 61 FC | 	wrlong	result1, fp
0d5d0     00 02 90 FD | 	jmp	#LR__1065
0d5d4                 | LR__1057
0d5d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0d5d4     08 4E 05 F1 | 	add	fp, #8
0d5d8     A7 1E 02 FB | 	rdlong	local01, fp
0d5dc     08 4E 85 F1 | 	sub	fp, #8
0d5e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d5e4     14 4E 05 A1 |  if_e	add	fp, #20
0d5e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d5ec     14 4E 85 A1 |  if_e	sub	fp, #20
0d5f0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0d5f4     1C 00 90 5D |  if_ne	jmp	#LR__1058
0d5f8     A7 12 02 FB | 	rdlong	arg01, fp
0d5fc     0C 4E 05 F1 | 	add	fp, #12
0d600     A7 14 02 FB | 	rdlong	arg02, fp
0d604     0C 4E 85 F1 | 	sub	fp, #12
0d608     D0 D8 B0 FD | 	call	#__system___float_add
0d60c     A7 FA 61 FC | 	wrlong	result1, fp
0d610     C0 01 90 FD | 	jmp	#LR__1065
0d614                 | LR__1058
0d614                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d614     08 4E 05 F1 | 	add	fp, #8
0d618     A7 1E 02 FB | 	rdlong	local01, fp
0d61c     08 4E 85 F1 | 	sub	fp, #8
0d620     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d624     24 00 90 5D |  if_ne	jmp	#LR__1059
0d628     14 4E 05 F1 | 	add	fp, #20
0d62c     A7 22 02 FB | 	rdlong	local03, fp
0d630     14 4E 85 F1 | 	sub	fp, #20
0d634     1F 22 0E F2 | 	cmp	local03, #31 wz
0d638     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d63c     08 4E 05 51 |  if_ne	add	fp, #8
0d640     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d644     08 4E 85 51 |  if_ne	sub	fp, #8
0d648     88 01 90 5D |  if_ne	jmp	#LR__1065
0d64c                 | LR__1059
0d64c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0d64c     14 4E 05 F1 | 	add	fp, #20
0d650     A7 1E 02 FB | 	rdlong	local01, fp
0d654     14 4E 85 F1 | 	sub	fp, #20
0d658     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d65c     24 00 90 5D |  if_ne	jmp	#LR__1060
0d660     08 4E 05 F1 | 	add	fp, #8
0d664     A7 22 02 FB | 	rdlong	local03, fp
0d668     08 4E 85 F1 | 	sub	fp, #8
0d66c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d670     A7 04 68 5C |  if_ne	wrlong	#2, fp
0d674     08 4E 05 51 |  if_ne	add	fp, #8
0d678     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d67c     08 4E 85 51 |  if_ne	sub	fp, #8
0d680     50 01 90 5D |  if_ne	jmp	#LR__1065
0d684                 | LR__1060
0d684                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0d684     08 4E 05 F1 | 	add	fp, #8
0d688     A7 1E 02 FB | 	rdlong	local01, fp
0d68c     08 4E 85 F1 | 	sub	fp, #8
0d690     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d694     14 4E 05 A1 |  if_e	add	fp, #20
0d698     A7 22 02 AB |  if_e	rdlong	local03, fp
0d69c     14 4E 85 A1 |  if_e	sub	fp, #20
0d6a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d6a4     1C 00 90 5D |  if_ne	jmp	#LR__1061
0d6a8     A7 12 02 FB | 	rdlong	arg01, fp
0d6ac     0C 4E 05 F1 | 	add	fp, #12
0d6b0     A7 14 02 FB | 	rdlong	arg02, fp
0d6b4     0C 4E 85 F1 | 	sub	fp, #12
0d6b8     68 B2 B0 FD | 	call	#__system___string_concat
0d6bc     A7 FA 61 FC | 	wrlong	result1, fp
0d6c0     10 01 90 FD | 	jmp	#LR__1065
0d6c4                 | LR__1061
0d6c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0d6c4     08 4E 05 F1 | 	add	fp, #8
0d6c8     A7 1E 02 FB | 	rdlong	local01, fp
0d6cc     08 4E 85 F1 | 	sub	fp, #8
0d6d0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d6d4     14 4E 05 A1 |  if_e	add	fp, #20
0d6d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6dc     14 4E 85 A1 |  if_e	sub	fp, #20
0d6e0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d6e4     30 00 90 5D |  if_ne	jmp	#LR__1062
0d6e8     A7 12 02 FB | 	rdlong	arg01, fp
0d6ec     48 EF BF FD | 	call	#_convertstring
0d6f0     FD 12 02 F6 | 	mov	arg01, result1
0d6f4     0C 4E 05 F1 | 	add	fp, #12
0d6f8     A7 14 02 FB | 	rdlong	arg02, fp
0d6fc     0C 4E 85 F1 | 	sub	fp, #12
0d700     20 B2 B0 FD | 	call	#__system___string_concat
0d704     A7 FA 61 FC | 	wrlong	result1, fp
0d708     08 4E 05 F1 | 	add	fp, #8
0d70c     A7 3E 68 FC | 	wrlong	#31, fp
0d710     08 4E 85 F1 | 	sub	fp, #8
0d714     BC 00 90 FD | 	jmp	#LR__1065
0d718                 | LR__1062
0d718                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0d718     08 4E 05 F1 | 	add	fp, #8
0d71c     A7 1E 02 FB | 	rdlong	local01, fp
0d720     08 4E 85 F1 | 	sub	fp, #8
0d724     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d728     14 4E 05 A1 |  if_e	add	fp, #20
0d72c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d730     14 4E 85 A1 |  if_e	sub	fp, #20
0d734     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d738     28 00 90 5D |  if_ne	jmp	#LR__1063
0d73c     A7 1E 02 FB | 	rdlong	local01, fp
0d740     0C 4E 05 F1 | 	add	fp, #12
0d744     A7 12 02 FB | 	rdlong	arg01, fp
0d748     0C 4E 85 F1 | 	sub	fp, #12
0d74c     E8 EE BF FD | 	call	#_convertstring
0d750     FD 14 02 F6 | 	mov	arg02, result1
0d754     0F 13 02 F6 | 	mov	arg01, local01
0d758     C8 B1 B0 FD | 	call	#__system___string_concat
0d75c     A7 FA 61 FC | 	wrlong	result1, fp
0d760     70 00 90 FD | 	jmp	#LR__1065
0d764                 | LR__1063
0d764                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0d764     08 4E 05 F1 | 	add	fp, #8
0d768     A7 1E 02 FB | 	rdlong	local01, fp
0d76c     08 4E 85 F1 | 	sub	fp, #8
0d770     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d774     14 4E 05 A1 |  if_e	add	fp, #20
0d778     A7 22 02 AB |  if_e	rdlong	local03, fp
0d77c     14 4E 85 A1 |  if_e	sub	fp, #20
0d780     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d784     3C 00 90 5D |  if_ne	jmp	#LR__1064
0d788     A7 12 02 FB | 	rdlong	arg01, fp
0d78c     A8 EE BF FD | 	call	#_convertstring
0d790     FD 1E 02 F6 | 	mov	local01, result1
0d794     0C 4E 05 F1 | 	add	fp, #12
0d798     A7 12 02 FB | 	rdlong	arg01, fp
0d79c     0C 4E 85 F1 | 	sub	fp, #12
0d7a0     94 EE BF FD | 	call	#_convertstring
0d7a4     FD 14 02 F6 | 	mov	arg02, result1
0d7a8     0F 13 02 F6 | 	mov	arg01, local01
0d7ac     74 B1 B0 FD | 	call	#__system___string_concat
0d7b0     A7 FA 61 FC | 	wrlong	result1, fp
0d7b4     08 4E 05 F1 | 	add	fp, #8
0d7b8     A7 3E 68 FC | 	wrlong	#31, fp
0d7bc     08 4E 85 F1 | 	sub	fp, #8
0d7c0     10 00 90 FD | 	jmp	#LR__1065
0d7c4                 | LR__1064
0d7c4     A7 08 68 FC | 	wrlong	#4, fp
0d7c8     08 4E 05 F1 | 	add	fp, #8
0d7cc     A7 FE 69 FC | 	wrlong	#255, fp
0d7d0     08 4E 85 F1 | 	sub	fp, #8
0d7d4                 | LR__1065
0d7d4     A7 12 02 F6 | 	mov	arg01, fp
0d7d8     EC BD BF FD | 	call	#_push
0d7dc     A7 F0 03 F6 | 	mov	ptra, fp
0d7e0     B2 00 A0 FD | 	call	#popregs_
0d7e4                 | _do_plus_ret
0d7e4     2D 00 64 FD | 	ret
0d7e8                 | 
0d7e8                 | ' 
0d7e8                 | ' sub do_minus
0d7e8                 | _do_minus
0d7e8     05 4A 05 F6 | 	mov	COUNT_, #5
0d7ec     A8 00 A0 FD | 	call	#pushregs_
0d7f0     18 F0 07 F1 | 	add	ptra, #24
0d7f4     38 BD BF FD | 	call	#_pop
0d7f8     FD 1E 02 F6 | 	mov	local01, result1
0d7fc     FE 20 02 F6 | 	mov	local02, result2
0d800     FF 22 02 F6 | 	mov	local03, result3
0d804     0C 4E 05 F1 | 	add	fp, #12
0d808     A7 1E 62 FC | 	wrlong	local01, fp
0d80c     04 4E 05 F1 | 	add	fp, #4
0d810     A7 20 62 FC | 	wrlong	local02, fp
0d814     04 4E 05 F1 | 	add	fp, #4
0d818     A7 22 62 FC | 	wrlong	local03, fp
0d81c     14 4E 85 F1 | 	sub	fp, #20
0d820     0C BD BF FD | 	call	#_pop
0d824     FF 22 02 F6 | 	mov	local03, result3
0d828     A7 FA 61 FC | 	wrlong	result1, fp
0d82c     04 4E 05 F1 | 	add	fp, #4
0d830     A7 FC 61 FC | 	wrlong	result2, fp
0d834     04 4E 05 F1 | 	add	fp, #4
0d838     A7 22 62 FC | 	wrlong	local03, fp
0d83c                 | ' 
0d83c                 | ' t2=pop()
0d83c                 | ' t1=pop()
0d83c                 | ' 
0d83c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0d83c     08 4E 85 F1 | 	sub	fp, #8
0d840     1D 22 0E F2 | 	cmp	local03, #29 wz
0d844     14 4E 05 A1 |  if_e	add	fp, #20
0d848     A7 24 02 AB |  if_e	rdlong	local04, fp
0d84c     14 4E 85 A1 |  if_e	sub	fp, #20
0d850     12 23 02 A6 |  if_e	mov	local03, local04
0d854     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d858     5C 00 90 5D |  if_ne	jmp	#LR__1071
0d85c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0d85c     0C 4E 05 F1 | 	add	fp, #12
0d860     A7 1E 02 FB | 	rdlong	local01, fp
0d864     0C 4E 85 F1 | 	sub	fp, #12
0d868     A7 22 02 FB | 	rdlong	local03, fp
0d86c     11 1F 12 F2 | 	cmp	local01, local03 wc
0d870     1C 00 90 3D |  if_ae	jmp	#LR__1070
0d874     A7 1E 02 FB | 	rdlong	local01, fp
0d878     0C 4E 05 F1 | 	add	fp, #12
0d87c     A7 20 02 FB | 	rdlong	local02, fp
0d880     0C 4E 85 F1 | 	sub	fp, #12
0d884     10 1F 82 F1 | 	sub	local01, local02
0d888     A7 1E 62 FC | 	wrlong	local01, fp
0d88c     F4 02 90 FD | 	jmp	#LR__1080
0d890                 | LR__1070
0d890     A7 1E 02 FB | 	rdlong	local01, fp
0d894     0C 4E 05 F1 | 	add	fp, #12
0d898     A7 20 02 FB | 	rdlong	local02, fp
0d89c     0C 4E 85 F1 | 	sub	fp, #12
0d8a0     10 1F 82 F1 | 	sub	local01, local02
0d8a4     A7 1E 62 FC | 	wrlong	local01, fp
0d8a8     08 4E 05 F1 | 	add	fp, #8
0d8ac     A7 38 68 FC | 	wrlong	#28, fp
0d8b0     08 4E 85 F1 | 	sub	fp, #8
0d8b4     CC 02 90 FD | 	jmp	#LR__1080
0d8b8                 | LR__1071
0d8b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0d8b8     08 4E 05 F1 | 	add	fp, #8
0d8bc     A7 1E 02 FB | 	rdlong	local01, fp
0d8c0     08 4E 85 F1 | 	sub	fp, #8
0d8c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d8c8     14 4E 05 A1 |  if_e	add	fp, #20
0d8cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d8d4     12 23 02 A6 |  if_e	mov	local03, local04
0d8d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d8dc     28 00 90 5D |  if_ne	jmp	#LR__1072
0d8e0     A7 1E 02 FB | 	rdlong	local01, fp
0d8e4     0C 4E 05 F1 | 	add	fp, #12
0d8e8     A7 20 02 FB | 	rdlong	local02, fp
0d8ec     0C 4E 85 F1 | 	sub	fp, #12
0d8f0     10 1F 82 F1 | 	sub	local01, local02
0d8f4     A7 1E 62 FC | 	wrlong	local01, fp
0d8f8     08 4E 05 F1 | 	add	fp, #8
0d8fc     A7 38 68 FC | 	wrlong	#28, fp
0d900     08 4E 85 F1 | 	sub	fp, #8
0d904     7C 02 90 FD | 	jmp	#LR__1080
0d908                 | LR__1072
0d908                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0d908     08 4E 05 F1 | 	add	fp, #8
0d90c     A7 1E 02 FB | 	rdlong	local01, fp
0d910     08 4E 85 F1 | 	sub	fp, #8
0d914     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d918     14 4E 05 A1 |  if_e	add	fp, #20
0d91c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d920     14 4E 85 A1 |  if_e	sub	fp, #20
0d924     12 23 02 A6 |  if_e	mov	local03, local04
0d928     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d92c     34 00 90 5D |  if_ne	jmp	#LR__1073
0d930     A7 12 02 FB | 	rdlong	arg01, fp
0d934     70 D5 B0 FD | 	call	#__system___float_fromuns
0d938     FD 12 02 F6 | 	mov	arg01, result1
0d93c     0C 4E 05 F1 | 	add	fp, #12
0d940     A7 14 02 FB | 	rdlong	arg02, fp
0d944     0C 4E 85 F1 | 	sub	fp, #12
0d948     1F 14 E6 F4 | 	bitnot	arg02, #31
0d94c     8C D5 B0 FD | 	call	#__system___float_add
0d950     A7 FA 61 FC | 	wrlong	result1, fp
0d954     08 4E 05 F1 | 	add	fp, #8
0d958     A7 3C 68 FC | 	wrlong	#30, fp
0d95c     08 4E 85 F1 | 	sub	fp, #8
0d960     20 02 90 FD | 	jmp	#LR__1080
0d964                 | LR__1073
0d964                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0d964     08 4E 05 F1 | 	add	fp, #8
0d968     A7 1E 02 FB | 	rdlong	local01, fp
0d96c     08 4E 85 F1 | 	sub	fp, #8
0d970     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d974     14 4E 05 A1 |  if_e	add	fp, #20
0d978     A7 24 02 AB |  if_e	rdlong	local04, fp
0d97c     14 4E 85 A1 |  if_e	sub	fp, #20
0d980     12 23 02 A6 |  if_e	mov	local03, local04
0d984     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d988     1C 00 90 5D |  if_ne	jmp	#LR__1074
0d98c     A7 1E 02 FB | 	rdlong	local01, fp
0d990     0C 4E 05 F1 | 	add	fp, #12
0d994     A7 20 02 FB | 	rdlong	local02, fp
0d998     0C 4E 85 F1 | 	sub	fp, #12
0d99c     10 1F 82 F1 | 	sub	local01, local02
0d9a0     A7 1E 62 FC | 	wrlong	local01, fp
0d9a4     DC 01 90 FD | 	jmp	#LR__1080
0d9a8                 | LR__1074
0d9a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0d9a8     08 4E 05 F1 | 	add	fp, #8
0d9ac     A7 1E 02 FB | 	rdlong	local01, fp
0d9b0     08 4E 85 F1 | 	sub	fp, #8
0d9b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d9b8     14 4E 05 A1 |  if_e	add	fp, #20
0d9bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9c0     14 4E 85 A1 |  if_e	sub	fp, #20
0d9c4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0d9c8     1C 00 90 5D |  if_ne	jmp	#LR__1075
0d9cc     A7 1E 02 FB | 	rdlong	local01, fp
0d9d0     0C 4E 05 F1 | 	add	fp, #12
0d9d4     A7 20 02 FB | 	rdlong	local02, fp
0d9d8     0C 4E 85 F1 | 	sub	fp, #12
0d9dc     10 1F 82 F1 | 	sub	local01, local02
0d9e0     A7 1E 62 FC | 	wrlong	local01, fp
0d9e4     9C 01 90 FD | 	jmp	#LR__1080
0d9e8                 | LR__1075
0d9e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0d9e8     08 4E 05 F1 | 	add	fp, #8
0d9ec     A7 1E 02 FB | 	rdlong	local01, fp
0d9f0     08 4E 85 F1 | 	sub	fp, #8
0d9f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d9f8     14 4E 05 A1 |  if_e	add	fp, #20
0d9fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0da00     14 4E 85 A1 |  if_e	sub	fp, #20
0da04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0da08     44 00 90 5D |  if_ne	jmp	#LR__1076
0da0c     A7 12 02 FB | 	rdlong	arg01, fp
0da10     09 13 52 F6 | 	abs	arg01, arg01 wc
0da14     1F 26 C6 C9 |  if_b	decod	local05, #31
0da18     00 26 06 36 |  if_ae	mov	local05, #0
0da1c     88 D4 B0 FD | 	call	#__system___float_fromuns
0da20     13 FB 61 F5 | 	xor	result1, local05
0da24     FD 12 02 F6 | 	mov	arg01, result1
0da28     0C 4E 05 F1 | 	add	fp, #12
0da2c     A7 14 02 FB | 	rdlong	arg02, fp
0da30     0C 4E 85 F1 | 	sub	fp, #12
0da34     1F 14 E6 F4 | 	bitnot	arg02, #31
0da38     A0 D4 B0 FD | 	call	#__system___float_add
0da3c     A7 FA 61 FC | 	wrlong	result1, fp
0da40     08 4E 05 F1 | 	add	fp, #8
0da44     A7 3C 68 FC | 	wrlong	#30, fp
0da48     08 4E 85 F1 | 	sub	fp, #8
0da4c     34 01 90 FD | 	jmp	#LR__1080
0da50                 | LR__1076
0da50                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0da50     08 4E 05 F1 | 	add	fp, #8
0da54     A7 1E 02 FB | 	rdlong	local01, fp
0da58     08 4E 85 F1 | 	sub	fp, #8
0da5c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da60     14 4E 05 A1 |  if_e	add	fp, #20
0da64     A7 22 02 AB |  if_e	rdlong	local03, fp
0da68     14 4E 85 A1 |  if_e	sub	fp, #20
0da6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0da70     2C 00 90 5D |  if_ne	jmp	#LR__1077
0da74     A7 1E 02 FB | 	rdlong	local01, fp
0da78     0C 4E 05 F1 | 	add	fp, #12
0da7c     A7 12 02 FB | 	rdlong	arg01, fp
0da80     0C 4E 85 F1 | 	sub	fp, #12
0da84     20 D4 B0 FD | 	call	#__system___float_fromuns
0da88     FD 14 02 F6 | 	mov	arg02, result1
0da8c     0F 13 02 F6 | 	mov	arg01, local01
0da90     1F 14 E6 F4 | 	bitnot	arg02, #31
0da94     44 D4 B0 FD | 	call	#__system___float_add
0da98     A7 FA 61 FC | 	wrlong	result1, fp
0da9c     E4 00 90 FD | 	jmp	#LR__1080
0daa0                 | LR__1077
0daa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0daa0     08 4E 05 F1 | 	add	fp, #8
0daa4     A7 1E 02 FB | 	rdlong	local01, fp
0daa8     08 4E 85 F1 | 	sub	fp, #8
0daac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dab0     14 4E 05 A1 |  if_e	add	fp, #20
0dab4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dab8     14 4E 85 A1 |  if_e	sub	fp, #20
0dabc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dac0     3C 00 90 5D |  if_ne	jmp	#LR__1078
0dac4     A7 1E 02 FB | 	rdlong	local01, fp
0dac8     0C 4E 05 F1 | 	add	fp, #12
0dacc     A7 12 02 FB | 	rdlong	arg01, fp
0dad0     0C 4E 85 F1 | 	sub	fp, #12
0dad4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dad8     1F 26 C6 C9 |  if_b	decod	local05, #31
0dadc     00 26 06 36 |  if_ae	mov	local05, #0
0dae0     C4 D3 B0 FD | 	call	#__system___float_fromuns
0dae4     13 FB 61 F5 | 	xor	result1, local05
0dae8     FD 14 02 F6 | 	mov	arg02, result1
0daec     0F 13 02 F6 | 	mov	arg01, local01
0daf0     1F 14 E6 F4 | 	bitnot	arg02, #31
0daf4     E4 D3 B0 FD | 	call	#__system___float_add
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     84 00 90 FD | 	jmp	#LR__1080
0db00                 | LR__1078
0db00                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0db00     08 4E 05 F1 | 	add	fp, #8
0db04     A7 1E 02 FB | 	rdlong	local01, fp
0db08     08 4E 85 F1 | 	sub	fp, #8
0db0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0db10     14 4E 05 A1 |  if_e	add	fp, #20
0db14     A7 22 02 AB |  if_e	rdlong	local03, fp
0db18     14 4E 85 A1 |  if_e	sub	fp, #20
0db1c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db20     20 00 90 5D |  if_ne	jmp	#LR__1079
0db24     A7 12 02 FB | 	rdlong	arg01, fp
0db28     0C 4E 05 F1 | 	add	fp, #12
0db2c     A7 14 02 FB | 	rdlong	arg02, fp
0db30     0C 4E 85 F1 | 	sub	fp, #12
0db34     1F 14 E6 F4 | 	bitnot	arg02, #31
0db38     A0 D3 B0 FD | 	call	#__system___float_add
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     40 00 90 FD | 	jmp	#LR__1080
0db44                 | LR__1079
0db44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0db44     08 4E 05 F1 | 	add	fp, #8
0db48     A7 1E 02 FB | 	rdlong	local01, fp
0db4c     08 4E 85 F1 | 	sub	fp, #8
0db50     1F 1E 0E F2 | 	cmp	local01, #31 wz
0db54     14 4E 05 51 |  if_ne	add	fp, #20
0db58     A7 22 02 5B |  if_ne	rdlong	local03, fp
0db5c     14 4E 85 51 |  if_ne	sub	fp, #20
0db60     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0db64     A7 06 68 AC |  if_e	wrlong	#3, fp
0db68     08 4E 05 A1 |  if_e	add	fp, #8
0db6c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0db70     08 4E 85 A1 |  if_e	sub	fp, #8
0db74     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0db78     08 4E 05 51 |  if_ne	add	fp, #8
0db7c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0db80     08 4E 85 51 |  if_ne	sub	fp, #8
0db84                 | LR__1080
0db84     A7 12 02 F6 | 	mov	arg01, fp
0db88     3C BA BF FD | 	call	#_push
0db8c     A7 F0 03 F6 | 	mov	ptra, fp
0db90     B2 00 A0 FD | 	call	#popregs_
0db94                 | _do_minus_ret
0db94     2D 00 64 FD | 	ret
0db98                 | 
0db98                 | ' 
0db98                 | ' sub do_and 
0db98                 | _do_and
0db98     03 4A 05 F6 | 	mov	COUNT_, #3
0db9c     A8 00 A0 FD | 	call	#pushregs_
0dba0     18 F0 07 F1 | 	add	ptra, #24
0dba4     88 B9 BF FD | 	call	#_pop
0dba8     FD 12 02 F6 | 	mov	arg01, result1
0dbac     FE 1E 02 F6 | 	mov	local01, result2
0dbb0     FF 20 02 F6 | 	mov	local02, result3
0dbb4     0C 4E 05 F1 | 	add	fp, #12
0dbb8     A7 12 62 FC | 	wrlong	arg01, fp
0dbbc     04 4E 05 F1 | 	add	fp, #4
0dbc0     A7 1E 62 FC | 	wrlong	local01, fp
0dbc4     04 4E 05 F1 | 	add	fp, #4
0dbc8     A7 20 62 FC | 	wrlong	local02, fp
0dbcc     14 4E 85 F1 | 	sub	fp, #20
0dbd0     5C B9 BF FD | 	call	#_pop
0dbd4     FF 22 02 F6 | 	mov	local03, result3
0dbd8     A7 FA 61 FC | 	wrlong	result1, fp
0dbdc     04 4E 05 F1 | 	add	fp, #4
0dbe0     A7 FC 61 FC | 	wrlong	result2, fp
0dbe4     04 4E 05 F1 | 	add	fp, #4
0dbe8     A7 22 62 FC | 	wrlong	local03, fp
0dbec                 | ' 
0dbec                 | ' t2=pop()
0dbec                 | ' t1=pop()
0dbec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0dbec     08 4E 85 F1 | 	sub	fp, #8
0dbf0     1C 22 0E F2 | 	cmp	local03, #28 wz
0dbf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbf8     A7 22 62 AC |  if_e	wrlong	local03, fp
0dbfc     08 4E 05 A1 |  if_e	add	fp, #8
0dc00     A7 3A 68 AC |  if_e	wrlong	#29, fp
0dc04     08 4E 85 A1 |  if_e	sub	fp, #8
0dc08                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0dc08     14 4E 05 F1 | 	add	fp, #20
0dc0c     A7 22 02 FB | 	rdlong	local03, fp
0dc10     14 4E 85 F1 | 	sub	fp, #20
0dc14     1C 22 0E F2 | 	cmp	local03, #28 wz
0dc18     18 00 90 5D |  if_ne	jmp	#LR__1090
0dc1c     0C 4E 05 F1 | 	add	fp, #12
0dc20     A7 22 02 FB | 	rdlong	local03, fp
0dc24     A7 22 62 FC | 	wrlong	local03, fp
0dc28     08 4E 05 F1 | 	add	fp, #8
0dc2c     A7 3A 68 FC | 	wrlong	#29, fp
0dc30     14 4E 85 F1 | 	sub	fp, #20
0dc34                 | LR__1090
0dc34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0dc34     08 4E 05 F1 | 	add	fp, #8
0dc38     A7 22 02 FB | 	rdlong	local03, fp
0dc3c     08 4E 85 F1 | 	sub	fp, #8
0dc40     1F 22 0E F2 | 	cmp	local03, #31 wz
0dc44     14 4E 05 51 |  if_ne	add	fp, #20
0dc48     A7 20 02 5B |  if_ne	rdlong	local02, fp
0dc4c     14 4E 85 51 |  if_ne	sub	fp, #20
0dc50     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0dc54     08 4E 05 51 |  if_ne	add	fp, #8
0dc58     A7 22 02 5B |  if_ne	rdlong	local03, fp
0dc5c     08 4E 85 51 |  if_ne	sub	fp, #8
0dc60     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0dc64     14 4E 05 51 |  if_ne	add	fp, #20
0dc68     14 4E 85 51 |  if_ne	sub	fp, #20
0dc6c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0dc70     A7 0C 68 AC |  if_e	wrlong	#6, fp
0dc74     08 4E 05 A1 |  if_e	add	fp, #8
0dc78     A7 FE 69 AC |  if_e	wrlong	#255, fp
0dc7c     08 4E 85 A1 |  if_e	sub	fp, #8
0dc80     18 00 90 AD |  if_e	jmp	#LR__1091
0dc84     A7 22 02 FB | 	rdlong	local03, fp
0dc88     0C 4E 05 F1 | 	add	fp, #12
0dc8c     A7 1E 02 FB | 	rdlong	local01, fp
0dc90     0C 4E 85 F1 | 	sub	fp, #12
0dc94     0F 23 02 F5 | 	and	local03, local01
0dc98     A7 22 62 FC | 	wrlong	local03, fp
0dc9c                 | LR__1091
0dc9c     A7 12 02 F6 | 	mov	arg01, fp
0dca0     24 B9 BF FD | 	call	#_push
0dca4     A7 F0 03 F6 | 	mov	ptra, fp
0dca8     B2 00 A0 FD | 	call	#popregs_
0dcac                 | _do_and_ret
0dcac     2D 00 64 FD | 	ret
0dcb0                 | 
0dcb0                 | ' 
0dcb0                 | ' sub do_or 
0dcb0                 | _do_or
0dcb0     03 4A 05 F6 | 	mov	COUNT_, #3
0dcb4     A8 00 A0 FD | 	call	#pushregs_
0dcb8     18 F0 07 F1 | 	add	ptra, #24
0dcbc     70 B8 BF FD | 	call	#_pop
0dcc0     FD 12 02 F6 | 	mov	arg01, result1
0dcc4     FE 1E 02 F6 | 	mov	local01, result2
0dcc8     FF 20 02 F6 | 	mov	local02, result3
0dccc     0C 4E 05 F1 | 	add	fp, #12
0dcd0     A7 12 62 FC | 	wrlong	arg01, fp
0dcd4     04 4E 05 F1 | 	add	fp, #4
0dcd8     A7 1E 62 FC | 	wrlong	local01, fp
0dcdc     04 4E 05 F1 | 	add	fp, #4
0dce0     A7 20 62 FC | 	wrlong	local02, fp
0dce4     14 4E 85 F1 | 	sub	fp, #20
0dce8     44 B8 BF FD | 	call	#_pop
0dcec     FF 22 02 F6 | 	mov	local03, result3
0dcf0     A7 FA 61 FC | 	wrlong	result1, fp
0dcf4     04 4E 05 F1 | 	add	fp, #4
0dcf8     A7 FC 61 FC | 	wrlong	result2, fp
0dcfc     04 4E 05 F1 | 	add	fp, #4
0dd00     A7 22 62 FC | 	wrlong	local03, fp
0dd04                 | ' 
0dd04                 | ' t2=pop()
0dd04                 | ' t1=pop()
0dd04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0dd04     08 4E 85 F1 | 	sub	fp, #8
0dd08     1C 22 0E F2 | 	cmp	local03, #28 wz
0dd0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd10     A7 22 62 AC |  if_e	wrlong	local03, fp
0dd14     08 4E 05 A1 |  if_e	add	fp, #8
0dd18     A7 3A 68 AC |  if_e	wrlong	#29, fp
0dd1c     08 4E 85 A1 |  if_e	sub	fp, #8
0dd20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0dd20     14 4E 05 F1 | 	add	fp, #20
0dd24     A7 22 02 FB | 	rdlong	local03, fp
0dd28     14 4E 85 F1 | 	sub	fp, #20
0dd2c     1C 22 0E F2 | 	cmp	local03, #28 wz
0dd30     18 00 90 5D |  if_ne	jmp	#LR__1100
0dd34     0C 4E 05 F1 | 	add	fp, #12
0dd38     A7 22 02 FB | 	rdlong	local03, fp
0dd3c     A7 22 62 FC | 	wrlong	local03, fp
0dd40     08 4E 05 F1 | 	add	fp, #8
0dd44     A7 3A 68 FC | 	wrlong	#29, fp
0dd48     14 4E 85 F1 | 	sub	fp, #20
0dd4c                 | LR__1100
0dd4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0dd4c     08 4E 05 F1 | 	add	fp, #8
0dd50     A7 22 02 FB | 	rdlong	local03, fp
0dd54     08 4E 85 F1 | 	sub	fp, #8
0dd58     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd5c     14 4E 05 51 |  if_ne	add	fp, #20
0dd60     A7 20 02 5B |  if_ne	rdlong	local02, fp
0dd64     14 4E 85 51 |  if_ne	sub	fp, #20
0dd68     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0dd6c     08 4E 05 51 |  if_ne	add	fp, #8
0dd70     A7 22 02 5B |  if_ne	rdlong	local03, fp
0dd74     08 4E 85 51 |  if_ne	sub	fp, #8
0dd78     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0dd7c     14 4E 05 51 |  if_ne	add	fp, #20
0dd80     14 4E 85 51 |  if_ne	sub	fp, #20
0dd84     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0dd88     A7 0C 68 AC |  if_e	wrlong	#6, fp
0dd8c     08 4E 05 A1 |  if_e	add	fp, #8
0dd90     A7 FE 69 AC |  if_e	wrlong	#255, fp
0dd94     08 4E 85 A1 |  if_e	sub	fp, #8
0dd98     18 00 90 AD |  if_e	jmp	#LR__1101
0dd9c     A7 22 02 FB | 	rdlong	local03, fp
0dda0     0C 4E 05 F1 | 	add	fp, #12
0dda4     A7 1E 02 FB | 	rdlong	local01, fp
0dda8     0C 4E 85 F1 | 	sub	fp, #12
0ddac     0F 23 42 F5 | 	or	local03, local01
0ddb0     A7 22 62 FC | 	wrlong	local03, fp
0ddb4                 | LR__1101
0ddb4     A7 12 02 F6 | 	mov	arg01, fp
0ddb8     0C B8 BF FD | 	call	#_push
0ddbc     A7 F0 03 F6 | 	mov	ptra, fp
0ddc0     B2 00 A0 FD | 	call	#popregs_
0ddc4                 | _do_or_ret
0ddc4     2D 00 64 FD | 	ret
0ddc8                 | 
0ddc8                 | ' 
0ddc8                 | ' sub do_mul
0ddc8                 | _do_mul
0ddc8     05 4A 05 F6 | 	mov	COUNT_, #5
0ddcc     A8 00 A0 FD | 	call	#pushregs_
0ddd0     18 F0 07 F1 | 	add	ptra, #24
0ddd4     58 B7 BF FD | 	call	#_pop
0ddd8     FD 1E 02 F6 | 	mov	local01, result1
0dddc     FE 20 02 F6 | 	mov	local02, result2
0dde0     FF 22 02 F6 | 	mov	local03, result3
0dde4     0C 4E 05 F1 | 	add	fp, #12
0dde8     A7 1E 62 FC | 	wrlong	local01, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 20 62 FC | 	wrlong	local02, fp
0ddf4     04 4E 05 F1 | 	add	fp, #4
0ddf8     A7 22 62 FC | 	wrlong	local03, fp
0ddfc     14 4E 85 F1 | 	sub	fp, #20
0de00     2C B7 BF FD | 	call	#_pop
0de04     FF 22 02 F6 | 	mov	local03, result3
0de08     A7 FA 61 FC | 	wrlong	result1, fp
0de0c     04 4E 05 F1 | 	add	fp, #4
0de10     A7 FC 61 FC | 	wrlong	result2, fp
0de14     04 4E 05 F1 | 	add	fp, #4
0de18     A7 22 62 FC | 	wrlong	local03, fp
0de1c                 | ' 
0de1c                 | ' t2=pop()
0de1c                 | ' t1=pop()
0de1c                 | ' 
0de1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0de1c     08 4E 85 F1 | 	sub	fp, #8
0de20     1D 22 0E F2 | 	cmp	local03, #29 wz
0de24     14 4E 05 A1 |  if_e	add	fp, #20
0de28     A7 24 02 AB |  if_e	rdlong	local04, fp
0de2c     14 4E 85 A1 |  if_e	sub	fp, #20
0de30     12 23 02 A6 |  if_e	mov	local03, local04
0de34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de38     20 00 90 5D |  if_ne	jmp	#LR__1110
0de3c     A7 20 02 FB | 	rdlong	local02, fp
0de40     0C 4E 05 F1 | 	add	fp, #12
0de44     A7 22 02 FB | 	rdlong	local03, fp
0de48     11 21 02 FD | 	qmul	local02, local03
0de4c     0C 4E 85 F1 | 	sub	fp, #12
0de50     18 1E 62 FD | 	getqx	local01
0de54     A7 1E 62 FC | 	wrlong	local01, fp
0de58     C4 02 90 FD | 	jmp	#LR__1119
0de5c                 | LR__1110
0de5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0de5c     08 4E 05 F1 | 	add	fp, #8
0de60     A7 1E 02 FB | 	rdlong	local01, fp
0de64     08 4E 85 F1 | 	sub	fp, #8
0de68     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de6c     14 4E 05 A1 |  if_e	add	fp, #20
0de70     A7 24 02 AB |  if_e	rdlong	local04, fp
0de74     14 4E 85 A1 |  if_e	sub	fp, #20
0de78     12 23 02 A6 |  if_e	mov	local03, local04
0de7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0de80     2C 00 90 5D |  if_ne	jmp	#LR__1111
0de84     A7 20 02 FB | 	rdlong	local02, fp
0de88     0C 4E 05 F1 | 	add	fp, #12
0de8c     A7 22 02 FB | 	rdlong	local03, fp
0de90     11 21 02 FD | 	qmul	local02, local03
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     18 1E 62 FD | 	getqx	local01
0de9c     A7 1E 62 FC | 	wrlong	local01, fp
0dea0     08 4E 05 F1 | 	add	fp, #8
0dea4     A7 38 68 FC | 	wrlong	#28, fp
0dea8     08 4E 85 F1 | 	sub	fp, #8
0deac     70 02 90 FD | 	jmp	#LR__1119
0deb0                 | LR__1111
0deb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0deb0     08 4E 05 F1 | 	add	fp, #8
0deb4     A7 1E 02 FB | 	rdlong	local01, fp
0deb8     08 4E 85 F1 | 	sub	fp, #8
0debc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dec0     14 4E 05 A1 |  if_e	add	fp, #20
0dec4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dec8     14 4E 85 A1 |  if_e	sub	fp, #20
0decc     12 23 02 A6 |  if_e	mov	local03, local04
0ded0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ded4     30 00 90 5D |  if_ne	jmp	#LR__1112
0ded8     A7 12 02 FB | 	rdlong	arg01, fp
0dedc     C8 CF B0 FD | 	call	#__system___float_fromuns
0dee0     FD 12 02 F6 | 	mov	arg01, result1
0dee4     0C 4E 05 F1 | 	add	fp, #12
0dee8     A7 14 02 FB | 	rdlong	arg02, fp
0deec     0C 4E 85 F1 | 	sub	fp, #12
0def0     B8 D3 B0 FD | 	call	#__system___float_mul
0def4     A7 FA 61 FC | 	wrlong	result1, fp
0def8     08 4E 05 F1 | 	add	fp, #8
0defc     A7 3C 68 FC | 	wrlong	#30, fp
0df00     08 4E 85 F1 | 	sub	fp, #8
0df04     18 02 90 FD | 	jmp	#LR__1119
0df08                 | LR__1112
0df08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0df08     08 4E 05 F1 | 	add	fp, #8
0df0c     A7 1E 02 FB | 	rdlong	local01, fp
0df10     08 4E 85 F1 | 	sub	fp, #8
0df14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df18     14 4E 05 A1 |  if_e	add	fp, #20
0df1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0df20     14 4E 85 A1 |  if_e	sub	fp, #20
0df24     12 23 02 A6 |  if_e	mov	local03, local04
0df28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df2c     20 00 90 5D |  if_ne	jmp	#LR__1113
0df30     A7 20 02 FB | 	rdlong	local02, fp
0df34     0C 4E 05 F1 | 	add	fp, #12
0df38     A7 22 02 FB | 	rdlong	local03, fp
0df3c     11 21 02 FD | 	qmul	local02, local03
0df40     0C 4E 85 F1 | 	sub	fp, #12
0df44     18 1E 62 FD | 	getqx	local01
0df48     A7 1E 62 FC | 	wrlong	local01, fp
0df4c     D0 01 90 FD | 	jmp	#LR__1119
0df50                 | LR__1113
0df50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0df50     08 4E 05 F1 | 	add	fp, #8
0df54     A7 1E 02 FB | 	rdlong	local01, fp
0df58     08 4E 85 F1 | 	sub	fp, #8
0df5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df60     14 4E 05 A1 |  if_e	add	fp, #20
0df64     A7 24 02 AB |  if_e	rdlong	local04, fp
0df68     14 4E 85 A1 |  if_e	sub	fp, #20
0df6c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0df70     20 00 90 5D |  if_ne	jmp	#LR__1114
0df74     A7 20 02 FB | 	rdlong	local02, fp
0df78     0C 4E 05 F1 | 	add	fp, #12
0df7c     A7 22 02 FB | 	rdlong	local03, fp
0df80     11 21 02 FD | 	qmul	local02, local03
0df84     0C 4E 85 F1 | 	sub	fp, #12
0df88     18 1E 62 FD | 	getqx	local01
0df8c     A7 1E 62 FC | 	wrlong	local01, fp
0df90     8C 01 90 FD | 	jmp	#LR__1119
0df94                 | LR__1114
0df94                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0df94     08 4E 05 F1 | 	add	fp, #8
0df98     A7 1E 02 FB | 	rdlong	local01, fp
0df9c     08 4E 85 F1 | 	sub	fp, #8
0dfa0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dfa4     14 4E 05 A1 |  if_e	add	fp, #20
0dfa8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfac     14 4E 85 A1 |  if_e	sub	fp, #20
0dfb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dfb4     40 00 90 5D |  if_ne	jmp	#LR__1115
0dfb8     A7 12 02 FB | 	rdlong	arg01, fp
0dfbc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dfc0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dfc4     00 26 06 36 |  if_ae	mov	local05, #0
0dfc8     DC CE B0 FD | 	call	#__system___float_fromuns
0dfcc     13 FB 61 F5 | 	xor	result1, local05
0dfd0     FD 12 02 F6 | 	mov	arg01, result1
0dfd4     0C 4E 05 F1 | 	add	fp, #12
0dfd8     A7 14 02 FB | 	rdlong	arg02, fp
0dfdc     0C 4E 85 F1 | 	sub	fp, #12
0dfe0     C8 D2 B0 FD | 	call	#__system___float_mul
0dfe4     A7 FA 61 FC | 	wrlong	result1, fp
0dfe8     08 4E 05 F1 | 	add	fp, #8
0dfec     A7 3C 68 FC | 	wrlong	#30, fp
0dff0     08 4E 85 F1 | 	sub	fp, #8
0dff4     28 01 90 FD | 	jmp	#LR__1119
0dff8                 | LR__1115
0dff8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0dff8     08 4E 05 F1 | 	add	fp, #8
0dffc     A7 1E 02 FB | 	rdlong	local01, fp
0e000     08 4E 85 F1 | 	sub	fp, #8
0e004     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e008     14 4E 05 A1 |  if_e	add	fp, #20
0e00c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e010     14 4E 85 A1 |  if_e	sub	fp, #20
0e014     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e018     28 00 90 5D |  if_ne	jmp	#LR__1116
0e01c     A7 1E 02 FB | 	rdlong	local01, fp
0e020     0C 4E 05 F1 | 	add	fp, #12
0e024     A7 12 02 FB | 	rdlong	arg01, fp
0e028     0C 4E 85 F1 | 	sub	fp, #12
0e02c     78 CE B0 FD | 	call	#__system___float_fromuns
0e030     FD 14 02 F6 | 	mov	arg02, result1
0e034     0F 13 02 F6 | 	mov	arg01, local01
0e038     70 D2 B0 FD | 	call	#__system___float_mul
0e03c     A7 FA 61 FC | 	wrlong	result1, fp
0e040     DC 00 90 FD | 	jmp	#LR__1119
0e044                 | LR__1116
0e044                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0e044     08 4E 05 F1 | 	add	fp, #8
0e048     A7 1E 02 FB | 	rdlong	local01, fp
0e04c     08 4E 85 F1 | 	sub	fp, #8
0e050     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e054     14 4E 05 A1 |  if_e	add	fp, #20
0e058     A7 22 02 AB |  if_e	rdlong	local03, fp
0e05c     14 4E 85 A1 |  if_e	sub	fp, #20
0e060     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e064     38 00 90 5D |  if_ne	jmp	#LR__1117
0e068     A7 1E 02 FB | 	rdlong	local01, fp
0e06c     0C 4E 05 F1 | 	add	fp, #12
0e070     A7 12 02 FB | 	rdlong	arg01, fp
0e074     0C 4E 85 F1 | 	sub	fp, #12
0e078     09 13 52 F6 | 	abs	arg01, arg01 wc
0e07c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e080     00 26 06 36 |  if_ae	mov	local05, #0
0e084     20 CE B0 FD | 	call	#__system___float_fromuns
0e088     13 FB 61 F5 | 	xor	result1, local05
0e08c     FD 14 02 F6 | 	mov	arg02, result1
0e090     0F 13 02 F6 | 	mov	arg01, local01
0e094     14 D2 B0 FD | 	call	#__system___float_mul
0e098     A7 FA 61 FC | 	wrlong	result1, fp
0e09c     80 00 90 FD | 	jmp	#LR__1119
0e0a0                 | LR__1117
0e0a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0e0a0     08 4E 05 F1 | 	add	fp, #8
0e0a4     A7 1E 02 FB | 	rdlong	local01, fp
0e0a8     08 4E 85 F1 | 	sub	fp, #8
0e0ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e0b0     14 4E 05 A1 |  if_e	add	fp, #20
0e0b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0e0b8     14 4E 85 A1 |  if_e	sub	fp, #20
0e0bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e0c0     1C 00 90 5D |  if_ne	jmp	#LR__1118
0e0c4     A7 12 02 FB | 	rdlong	arg01, fp
0e0c8     0C 4E 05 F1 | 	add	fp, #12
0e0cc     A7 14 02 FB | 	rdlong	arg02, fp
0e0d0     0C 4E 85 F1 | 	sub	fp, #12
0e0d4     D4 D1 B0 FD | 	call	#__system___float_mul
0e0d8     A7 FA 61 FC | 	wrlong	result1, fp
0e0dc     40 00 90 FD | 	jmp	#LR__1119
0e0e0                 | LR__1118
0e0e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0e0e0     08 4E 05 F1 | 	add	fp, #8
0e0e4     A7 1E 02 FB | 	rdlong	local01, fp
0e0e8     08 4E 85 F1 | 	sub	fp, #8
0e0ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e0f0     14 4E 05 51 |  if_ne	add	fp, #20
0e0f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e0f8     14 4E 85 51 |  if_ne	sub	fp, #20
0e0fc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0e100     A7 10 68 AC |  if_e	wrlong	#8, fp
0e104     08 4E 05 A1 |  if_e	add	fp, #8
0e108     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e10c     08 4E 85 A1 |  if_e	sub	fp, #8
0e110     A7 12 68 5C |  if_ne	wrlong	#9, fp
0e114     08 4E 05 51 |  if_ne	add	fp, #8
0e118     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0e11c     08 4E 85 51 |  if_ne	sub	fp, #8
0e120                 | LR__1119
0e120     A7 12 02 F6 | 	mov	arg01, fp
0e124     A0 B4 BF FD | 	call	#_push
0e128     A7 F0 03 F6 | 	mov	ptra, fp
0e12c     B2 00 A0 FD | 	call	#popregs_
0e130                 | _do_mul_ret
0e130     2D 00 64 FD | 	ret
0e134                 | 
0e134                 | ' 
0e134                 | ' sub do_div 
0e134                 | _do_div
0e134     01 4A 05 F6 | 	mov	COUNT_, #1
0e138     A8 00 A0 FD | 	call	#pushregs_
0e13c     18 F0 07 F1 | 	add	ptra, #24
0e140     EC B3 BF FD | 	call	#_pop
0e144     FD 62 02 F6 | 	mov	muldivb_, result1
0e148     FE 60 02 F6 | 	mov	muldiva_, result2
0e14c     FF 1E 02 F6 | 	mov	local01, result3
0e150     0C 4E 05 F1 | 	add	fp, #12
0e154     A7 62 62 FC | 	wrlong	muldivb_, fp
0e158     04 4E 05 F1 | 	add	fp, #4
0e15c     A7 60 62 FC | 	wrlong	muldiva_, fp
0e160     04 4E 05 F1 | 	add	fp, #4
0e164     A7 1E 62 FC | 	wrlong	local01, fp
0e168     14 4E 85 F1 | 	sub	fp, #20
0e16c     C0 B3 BF FD | 	call	#_pop
0e170     A7 FA 61 FC | 	wrlong	result1, fp
0e174     04 4E 05 F1 | 	add	fp, #4
0e178     A7 FC 61 FC | 	wrlong	result2, fp
0e17c     04 4E 05 F1 | 	add	fp, #4
0e180     A7 FE 61 FC | 	wrlong	result3, fp
0e184                 | ' 
0e184                 | ' t2=pop()
0e184                 | ' t1=pop()
0e184                 | ' 
0e184                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0e184     08 4E 85 F1 | 	sub	fp, #8
0e188     1F FE 0D F2 | 	cmp	result3, #31 wz
0e18c     14 4E 05 51 |  if_ne	add	fp, #20
0e190     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e194     14 4E 85 51 |  if_ne	sub	fp, #20
0e198     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e19c     A7 14 68 AC |  if_e	wrlong	#10, fp
0e1a0     08 4E 05 A1 |  if_e	add	fp, #8
0e1a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e1a8     08 4E 85 A1 |  if_e	sub	fp, #8
0e1ac     90 01 90 AD |  if_e	jmp	#LR__1126
0e1b0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e1b0     08 4E 05 F1 | 	add	fp, #8
0e1b4     A7 62 02 FB | 	rdlong	muldivb_, fp
0e1b8     08 4E 85 F1 | 	sub	fp, #8
0e1bc     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0e1c0     1C 00 90 5D |  if_ne	jmp	#LR__1120
0e1c4     08 4E 05 F1 | 	add	fp, #8
0e1c8     A7 38 68 FC | 	wrlong	#28, fp
0e1cc     08 4E 85 F1 | 	sub	fp, #8
0e1d0     A7 12 02 FB | 	rdlong	arg01, fp
0e1d4     00 14 06 F6 | 	mov	arg02, #0
0e1d8     98 D5 B0 FD | 	call	#__system___float_tointeger
0e1dc     A7 FA 61 FC | 	wrlong	result1, fp
0e1e0                 | LR__1120
0e1e0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e1e0     14 4E 05 F1 | 	add	fp, #20
0e1e4     A7 62 02 FB | 	rdlong	muldivb_, fp
0e1e8     14 4E 85 F1 | 	sub	fp, #20
0e1ec     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0e1f0     28 00 90 5D |  if_ne	jmp	#LR__1121
0e1f4     14 4E 05 F1 | 	add	fp, #20
0e1f8     A7 38 68 FC | 	wrlong	#28, fp
0e1fc     08 4E 85 F1 | 	sub	fp, #8
0e200     A7 12 02 FB | 	rdlong	arg01, fp
0e204     0C 4E 85 F1 | 	sub	fp, #12
0e208     00 14 06 F6 | 	mov	arg02, #0
0e20c     64 D5 B0 FD | 	call	#__system___float_tointeger
0e210     0C 4E 05 F1 | 	add	fp, #12
0e214     A7 FA 61 FC | 	wrlong	result1, fp
0e218     0C 4E 85 F1 | 	sub	fp, #12
0e21c                 | LR__1121
0e21c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0e21c     08 4E 05 F1 | 	add	fp, #8
0e220     A7 62 02 FB | 	rdlong	muldivb_, fp
0e224     08 4E 85 F1 | 	sub	fp, #8
0e228     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0e22c     14 4E 05 A1 |  if_e	add	fp, #20
0e230     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e234     14 4E 85 A1 |  if_e	sub	fp, #20
0e238     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e23c     20 00 90 5D |  if_ne	jmp	#LR__1122
0e240     0C 4E 05 F1 | 	add	fp, #12
0e244     A7 1E 02 FB | 	rdlong	local01, fp
0e248     0C 4E 85 F1 | 	sub	fp, #12
0e24c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e250     0F 63 12 FD | 	qdiv	muldivb_, local01
0e254     18 1E 62 FD | 	getqx	local01
0e258     A7 1E 62 FC | 	wrlong	local01, fp
0e25c     E0 00 90 FD | 	jmp	#LR__1126
0e260                 | LR__1122
0e260                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0e260     08 4E 05 F1 | 	add	fp, #8
0e264     A7 62 02 FB | 	rdlong	muldivb_, fp
0e268     08 4E 85 F1 | 	sub	fp, #8
0e26c     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0e270     14 4E 05 A1 |  if_e	add	fp, #20
0e274     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e278     14 4E 85 A1 |  if_e	sub	fp, #20
0e27c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e280     2C 00 90 5D |  if_ne	jmp	#LR__1123
0e284     0C 4E 05 F1 | 	add	fp, #12
0e288     A7 1E 02 FB | 	rdlong	local01, fp
0e28c     0C 4E 85 F1 | 	sub	fp, #12
0e290     A7 62 02 FB | 	rdlong	muldivb_, fp
0e294     0F 63 12 FD | 	qdiv	muldivb_, local01
0e298     18 1E 62 FD | 	getqx	local01
0e29c     A7 1E 62 FC | 	wrlong	local01, fp
0e2a0     08 4E 05 F1 | 	add	fp, #8
0e2a4     A7 38 68 FC | 	wrlong	#28, fp
0e2a8     08 4E 85 F1 | 	sub	fp, #8
0e2ac     90 00 90 FD | 	jmp	#LR__1126
0e2b0                 | LR__1123
0e2b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0e2b0     08 4E 05 F1 | 	add	fp, #8
0e2b4     A7 62 02 FB | 	rdlong	muldivb_, fp
0e2b8     08 4E 85 F1 | 	sub	fp, #8
0e2bc     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0e2c0     14 4E 05 A1 |  if_e	add	fp, #20
0e2c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e2c8     14 4E 85 A1 |  if_e	sub	fp, #20
0e2cc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e2d0     1C 00 90 5D |  if_ne	jmp	#LR__1124
0e2d4     A7 60 02 FB | 	rdlong	muldiva_, fp
0e2d8     0C 4E 05 F1 | 	add	fp, #12
0e2dc     A7 62 02 FB | 	rdlong	muldivb_, fp
0e2e0     0C 4E 85 F1 | 	sub	fp, #12
0e2e4     BA 00 A0 FD | 	call	#divide_
0e2e8     A7 62 62 FC | 	wrlong	muldivb_, fp
0e2ec     50 00 90 FD | 	jmp	#LR__1126
0e2f0                 | LR__1124
0e2f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0e2f0     08 4E 05 F1 | 	add	fp, #8
0e2f4     A7 62 02 FB | 	rdlong	muldivb_, fp
0e2f8     08 4E 85 F1 | 	sub	fp, #8
0e2fc     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0e300     14 4E 05 A1 |  if_e	add	fp, #20
0e304     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e308     14 4E 85 A1 |  if_e	sub	fp, #20
0e30c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e310     1C 00 90 5D |  if_ne	jmp	#LR__1125
0e314     A7 60 02 FB | 	rdlong	muldiva_, fp
0e318     0C 4E 05 F1 | 	add	fp, #12
0e31c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e320     0C 4E 85 F1 | 	sub	fp, #12
0e324     BA 00 A0 FD | 	call	#divide_
0e328     A7 62 62 FC | 	wrlong	muldivb_, fp
0e32c     10 00 90 FD | 	jmp	#LR__1126
0e330                 | LR__1125
0e330     A7 16 68 FC | 	wrlong	#11, fp
0e334     08 4E 05 F1 | 	add	fp, #8
0e338     A7 FE 69 FC | 	wrlong	#255, fp
0e33c     08 4E 85 F1 | 	sub	fp, #8
0e340                 | LR__1126
0e340     A7 12 02 F6 | 	mov	arg01, fp
0e344     80 B2 BF FD | 	call	#_push
0e348     A7 F0 03 F6 | 	mov	ptra, fp
0e34c     B2 00 A0 FD | 	call	#popregs_
0e350                 | _do_div_ret
0e350     2D 00 64 FD | 	ret
0e354                 | 
0e354                 | ' 
0e354                 | ' sub do_fdiv 
0e354                 | _do_fdiv
0e354     02 4A 05 F6 | 	mov	COUNT_, #2
0e358     A8 00 A0 FD | 	call	#pushregs_
0e35c     18 F0 07 F1 | 	add	ptra, #24
0e360     CC B1 BF FD | 	call	#_pop
0e364     FD 14 02 F6 | 	mov	arg02, result1
0e368     FE 12 02 F6 | 	mov	arg01, result2
0e36c     FF 1E 02 F6 | 	mov	local01, result3
0e370     0C 4E 05 F1 | 	add	fp, #12
0e374     A7 14 62 FC | 	wrlong	arg02, fp
0e378     04 4E 05 F1 | 	add	fp, #4
0e37c     A7 12 62 FC | 	wrlong	arg01, fp
0e380     04 4E 05 F1 | 	add	fp, #4
0e384     A7 1E 62 FC | 	wrlong	local01, fp
0e388     14 4E 85 F1 | 	sub	fp, #20
0e38c     A0 B1 BF FD | 	call	#_pop
0e390     A7 FA 61 FC | 	wrlong	result1, fp
0e394     04 4E 05 F1 | 	add	fp, #4
0e398     A7 FC 61 FC | 	wrlong	result2, fp
0e39c     04 4E 05 F1 | 	add	fp, #4
0e3a0     A7 FE 61 FC | 	wrlong	result3, fp
0e3a4                 | ' 
0e3a4                 | ' t2=pop()
0e3a4                 | ' t1=pop()
0e3a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0e3a4     08 4E 85 F1 | 	sub	fp, #8
0e3a8     1F FE 0D F2 | 	cmp	result3, #31 wz
0e3ac     14 4E 05 51 |  if_ne	add	fp, #20
0e3b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e3b4     14 4E 85 51 |  if_ne	sub	fp, #20
0e3b8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e3bc     A7 14 68 AC |  if_e	wrlong	#10, fp
0e3c0     08 4E 05 A1 |  if_e	add	fp, #8
0e3c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e3c8     08 4E 85 A1 |  if_e	sub	fp, #8
0e3cc     38 01 90 AD |  if_e	jmp	#LR__1135
0e3d0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e3d0     08 4E 05 F1 | 	add	fp, #8
0e3d4     A7 14 02 FB | 	rdlong	arg02, fp
0e3d8     08 4E 85 F1 | 	sub	fp, #8
0e3dc     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e3e0     28 00 90 5D |  if_ne	jmp	#LR__1130
0e3e4     08 4E 05 F1 | 	add	fp, #8
0e3e8     A7 3C 68 FC | 	wrlong	#30, fp
0e3ec     08 4E 85 F1 | 	sub	fp, #8
0e3f0     A7 12 02 FB | 	rdlong	arg01, fp
0e3f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e3f8     1F 20 C6 C9 |  if_b	decod	local02, #31
0e3fc     00 20 06 36 |  if_ae	mov	local02, #0
0e400     A4 CA B0 FD | 	call	#__system___float_fromuns
0e404     10 FB 61 F5 | 	xor	result1, local02
0e408     A7 FA 61 FC | 	wrlong	result1, fp
0e40c                 | LR__1130
0e40c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0e40c     08 4E 05 F1 | 	add	fp, #8
0e410     A7 14 02 FB | 	rdlong	arg02, fp
0e414     08 4E 85 F1 | 	sub	fp, #8
0e418     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e41c     18 00 90 5D |  if_ne	jmp	#LR__1131
0e420     08 4E 05 F1 | 	add	fp, #8
0e424     A7 3C 68 FC | 	wrlong	#30, fp
0e428     08 4E 85 F1 | 	sub	fp, #8
0e42c     A7 12 02 FB | 	rdlong	arg01, fp
0e430     74 CA B0 FD | 	call	#__system___float_fromuns
0e434     A7 FA 61 FC | 	wrlong	result1, fp
0e438                 | LR__1131
0e438                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0e438     14 4E 05 F1 | 	add	fp, #20
0e43c     A7 14 02 FB | 	rdlong	arg02, fp
0e440     14 4E 85 F1 | 	sub	fp, #20
0e444     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e448     34 00 90 5D |  if_ne	jmp	#LR__1132
0e44c     14 4E 05 F1 | 	add	fp, #20
0e450     A7 3C 68 FC | 	wrlong	#30, fp
0e454     08 4E 85 F1 | 	sub	fp, #8
0e458     A7 12 02 FB | 	rdlong	arg01, fp
0e45c     0C 4E 85 F1 | 	sub	fp, #12
0e460     09 13 52 F6 | 	abs	arg01, arg01 wc
0e464     1F 20 C6 C9 |  if_b	decod	local02, #31
0e468     00 20 06 36 |  if_ae	mov	local02, #0
0e46c     38 CA B0 FD | 	call	#__system___float_fromuns
0e470     10 FB 61 F5 | 	xor	result1, local02
0e474     0C 4E 05 F1 | 	add	fp, #12
0e478     A7 FA 61 FC | 	wrlong	result1, fp
0e47c     0C 4E 85 F1 | 	sub	fp, #12
0e480                 | LR__1132
0e480                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0e480     14 4E 05 F1 | 	add	fp, #20
0e484     A7 14 02 FB | 	rdlong	arg02, fp
0e488     14 4E 85 F1 | 	sub	fp, #20
0e48c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0e490     24 00 90 5D |  if_ne	jmp	#LR__1133
0e494     14 4E 05 F1 | 	add	fp, #20
0e498     A7 3C 68 FC | 	wrlong	#30, fp
0e49c     08 4E 85 F1 | 	sub	fp, #8
0e4a0     A7 12 02 FB | 	rdlong	arg01, fp
0e4a4     0C 4E 85 F1 | 	sub	fp, #12
0e4a8     FC C9 B0 FD | 	call	#__system___float_fromuns
0e4ac     0C 4E 05 F1 | 	add	fp, #12
0e4b0     A7 FA 61 FC | 	wrlong	result1, fp
0e4b4     0C 4E 85 F1 | 	sub	fp, #12
0e4b8                 | LR__1133
0e4b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0e4b8     08 4E 05 F1 | 	add	fp, #8
0e4bc     A7 14 02 FB | 	rdlong	arg02, fp
0e4c0     08 4E 85 F1 | 	sub	fp, #8
0e4c4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0e4c8     14 4E 05 A1 |  if_e	add	fp, #20
0e4cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e4d0     14 4E 85 A1 |  if_e	sub	fp, #20
0e4d4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0e4d8     1C 00 90 5D |  if_ne	jmp	#LR__1134
0e4dc     A7 12 02 FB | 	rdlong	arg01, fp
0e4e0     0C 4E 05 F1 | 	add	fp, #12
0e4e4     A7 14 02 FB | 	rdlong	arg02, fp
0e4e8     0C 4E 85 F1 | 	sub	fp, #12
0e4ec     C0 CF B0 FD | 	call	#__system___float_div
0e4f0     A7 FA 61 FC | 	wrlong	result1, fp
0e4f4     10 00 90 FD | 	jmp	#LR__1135
0e4f8                 | LR__1134
0e4f8     A7 16 68 FC | 	wrlong	#11, fp
0e4fc     08 4E 05 F1 | 	add	fp, #8
0e500     A7 FE 69 FC | 	wrlong	#255, fp
0e504     08 4E 85 F1 | 	sub	fp, #8
0e508                 | LR__1135
0e508     A7 12 02 F6 | 	mov	arg01, fp
0e50c     B8 B0 BF FD | 	call	#_push
0e510     A7 F0 03 F6 | 	mov	ptra, fp
0e514     B2 00 A0 FD | 	call	#popregs_
0e518                 | _do_fdiv_ret
0e518     2D 00 64 FD | 	ret
0e51c                 | 
0e51c                 | ' 
0e51c                 | ' 
0e51c                 | ' sub do_mod 
0e51c                 | _do_mod
0e51c     01 4A 05 F6 | 	mov	COUNT_, #1
0e520     A8 00 A0 FD | 	call	#pushregs_
0e524     18 F0 07 F1 | 	add	ptra, #24
0e528     04 B0 BF FD | 	call	#_pop
0e52c     FD 62 02 F6 | 	mov	muldivb_, result1
0e530     FE 60 02 F6 | 	mov	muldiva_, result2
0e534     FF 1E 02 F6 | 	mov	local01, result3
0e538     0C 4E 05 F1 | 	add	fp, #12
0e53c     A7 62 62 FC | 	wrlong	muldivb_, fp
0e540     04 4E 05 F1 | 	add	fp, #4
0e544     A7 60 62 FC | 	wrlong	muldiva_, fp
0e548     04 4E 05 F1 | 	add	fp, #4
0e54c     A7 1E 62 FC | 	wrlong	local01, fp
0e550     14 4E 85 F1 | 	sub	fp, #20
0e554     D8 AF BF FD | 	call	#_pop
0e558     A7 FA 61 FC | 	wrlong	result1, fp
0e55c     04 4E 05 F1 | 	add	fp, #4
0e560     A7 FC 61 FC | 	wrlong	result2, fp
0e564     04 4E 05 F1 | 	add	fp, #4
0e568     A7 FE 61 FC | 	wrlong	result3, fp
0e56c                 | ' 
0e56c                 | ' t2=pop()
0e56c                 | ' t1=pop()
0e56c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0e56c     08 4E 85 F1 | 	sub	fp, #8
0e570     1F FE 0D F2 | 	cmp	result3, #31 wz
0e574     14 4E 05 51 |  if_ne	add	fp, #20
0e578     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0e57c     14 4E 85 51 |  if_ne	sub	fp, #20
0e580     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0e584     A7 14 68 AC |  if_e	wrlong	#10, fp
0e588     08 4E 05 A1 |  if_e	add	fp, #8
0e58c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e590     08 4E 85 A1 |  if_e	sub	fp, #8
0e594     90 01 90 AD |  if_e	jmp	#LR__1146
0e598                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0e598     08 4E 05 F1 | 	add	fp, #8
0e59c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e5a0     08 4E 85 F1 | 	sub	fp, #8
0e5a4     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0e5a8     1C 00 90 5D |  if_ne	jmp	#LR__1140
0e5ac     08 4E 05 F1 | 	add	fp, #8
0e5b0     A7 38 68 FC | 	wrlong	#28, fp
0e5b4     08 4E 85 F1 | 	sub	fp, #8
0e5b8     A7 12 02 FB | 	rdlong	arg01, fp
0e5bc     00 14 06 F6 | 	mov	arg02, #0
0e5c0     B0 D1 B0 FD | 	call	#__system___float_tointeger
0e5c4     A7 FA 61 FC | 	wrlong	result1, fp
0e5c8                 | LR__1140
0e5c8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0e5c8     14 4E 05 F1 | 	add	fp, #20
0e5cc     A7 62 02 FB | 	rdlong	muldivb_, fp
0e5d0     14 4E 85 F1 | 	sub	fp, #20
0e5d4     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0e5d8     28 00 90 5D |  if_ne	jmp	#LR__1141
0e5dc     14 4E 05 F1 | 	add	fp, #20
0e5e0     A7 38 68 FC | 	wrlong	#28, fp
0e5e4     08 4E 85 F1 | 	sub	fp, #8
0e5e8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ec     0C 4E 85 F1 | 	sub	fp, #12
0e5f0     00 14 06 F6 | 	mov	arg02, #0
0e5f4     7C D1 B0 FD | 	call	#__system___float_tointeger
0e5f8     0C 4E 05 F1 | 	add	fp, #12
0e5fc     A7 FA 61 FC | 	wrlong	result1, fp
0e600     0C 4E 85 F1 | 	sub	fp, #12
0e604                 | LR__1141
0e604                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0e604     08 4E 05 F1 | 	add	fp, #8
0e608     A7 62 02 FB | 	rdlong	muldivb_, fp
0e60c     08 4E 85 F1 | 	sub	fp, #8
0e610     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0e614     14 4E 05 A1 |  if_e	add	fp, #20
0e618     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e61c     14 4E 85 A1 |  if_e	sub	fp, #20
0e620     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e624     20 00 90 5D |  if_ne	jmp	#LR__1142
0e628     0C 4E 05 F1 | 	add	fp, #12
0e62c     A7 1E 02 FB | 	rdlong	local01, fp
0e630     0C 4E 85 F1 | 	sub	fp, #12
0e634     A7 62 02 FB | 	rdlong	muldivb_, fp
0e638     0F 63 12 FD | 	qdiv	muldivb_, local01
0e63c     19 1E 62 FD | 	getqy	local01
0e640     A7 1E 62 FC | 	wrlong	local01, fp
0e644     E0 00 90 FD | 	jmp	#LR__1146
0e648                 | LR__1142
0e648                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0e648     08 4E 05 F1 | 	add	fp, #8
0e64c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e650     08 4E 85 F1 | 	sub	fp, #8
0e654     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0e658     14 4E 05 A1 |  if_e	add	fp, #20
0e65c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e660     14 4E 85 A1 |  if_e	sub	fp, #20
0e664     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e668     2C 00 90 5D |  if_ne	jmp	#LR__1143
0e66c     0C 4E 05 F1 | 	add	fp, #12
0e670     A7 1E 02 FB | 	rdlong	local01, fp
0e674     0C 4E 85 F1 | 	sub	fp, #12
0e678     A7 62 02 FB | 	rdlong	muldivb_, fp
0e67c     0F 63 12 FD | 	qdiv	muldivb_, local01
0e680     19 1E 62 FD | 	getqy	local01
0e684     A7 1E 62 FC | 	wrlong	local01, fp
0e688     08 4E 05 F1 | 	add	fp, #8
0e68c     A7 38 68 FC | 	wrlong	#28, fp
0e690     08 4E 85 F1 | 	sub	fp, #8
0e694     90 00 90 FD | 	jmp	#LR__1146
0e698                 | LR__1143
0e698                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0e698     08 4E 05 F1 | 	add	fp, #8
0e69c     A7 62 02 FB | 	rdlong	muldivb_, fp
0e6a0     08 4E 85 F1 | 	sub	fp, #8
0e6a4     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0e6a8     14 4E 05 A1 |  if_e	add	fp, #20
0e6ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6b0     14 4E 85 A1 |  if_e	sub	fp, #20
0e6b4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0e6b8     1C 00 90 5D |  if_ne	jmp	#LR__1144
0e6bc     A7 60 02 FB | 	rdlong	muldiva_, fp
0e6c0     0C 4E 05 F1 | 	add	fp, #12
0e6c4     A7 62 02 FB | 	rdlong	muldivb_, fp
0e6c8     0C 4E 85 F1 | 	sub	fp, #12
0e6cc     BA 00 A0 FD | 	call	#divide_
0e6d0     A7 60 62 FC | 	wrlong	muldiva_, fp
0e6d4     50 00 90 FD | 	jmp	#LR__1146
0e6d8                 | LR__1144
0e6d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0e6d8     08 4E 05 F1 | 	add	fp, #8
0e6dc     A7 62 02 FB | 	rdlong	muldivb_, fp
0e6e0     08 4E 85 F1 | 	sub	fp, #8
0e6e4     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0e6e8     14 4E 05 A1 |  if_e	add	fp, #20
0e6ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
0e6f0     14 4E 85 A1 |  if_e	sub	fp, #20
0e6f4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0e6f8     1C 00 90 5D |  if_ne	jmp	#LR__1145
0e6fc     A7 60 02 FB | 	rdlong	muldiva_, fp
0e700     0C 4E 05 F1 | 	add	fp, #12
0e704     A7 62 02 FB | 	rdlong	muldivb_, fp
0e708     0C 4E 85 F1 | 	sub	fp, #12
0e70c     BA 00 A0 FD | 	call	#divide_
0e710     A7 60 62 FC | 	wrlong	muldiva_, fp
0e714     10 00 90 FD | 	jmp	#LR__1146
0e718                 | LR__1145
0e718     A7 16 68 FC | 	wrlong	#11, fp
0e71c     08 4E 05 F1 | 	add	fp, #8
0e720     A7 FE 69 FC | 	wrlong	#255, fp
0e724     08 4E 85 F1 | 	sub	fp, #8
0e728                 | LR__1146
0e728     A7 12 02 F6 | 	mov	arg01, fp
0e72c     98 AE BF FD | 	call	#_push
0e730     A7 F0 03 F6 | 	mov	ptra, fp
0e734     B2 00 A0 FD | 	call	#popregs_
0e738                 | _do_mod_ret
0e738     2D 00 64 FD | 	ret
0e73c                 | 
0e73c                 | ' 
0e73c                 | ' sub do_shl 
0e73c                 | _do_shl
0e73c     03 4A 05 F6 | 	mov	COUNT_, #3
0e740     A8 00 A0 FD | 	call	#pushregs_
0e744     18 F0 07 F1 | 	add	ptra, #24
0e748     E4 AD BF FD | 	call	#_pop
0e74c     FD 12 02 F6 | 	mov	arg01, result1
0e750     FE 1E 02 F6 | 	mov	local01, result2
0e754     FF 20 02 F6 | 	mov	local02, result3
0e758     0C 4E 05 F1 | 	add	fp, #12
0e75c     A7 12 62 FC | 	wrlong	arg01, fp
0e760     04 4E 05 F1 | 	add	fp, #4
0e764     A7 1E 62 FC | 	wrlong	local01, fp
0e768     04 4E 05 F1 | 	add	fp, #4
0e76c     A7 20 62 FC | 	wrlong	local02, fp
0e770     14 4E 85 F1 | 	sub	fp, #20
0e774     B8 AD BF FD | 	call	#_pop
0e778     FF 22 02 F6 | 	mov	local03, result3
0e77c     A7 FA 61 FC | 	wrlong	result1, fp
0e780     04 4E 05 F1 | 	add	fp, #4
0e784     A7 FC 61 FC | 	wrlong	result2, fp
0e788     04 4E 05 F1 | 	add	fp, #4
0e78c     A7 22 62 FC | 	wrlong	local03, fp
0e790                 | ' 
0e790                 | ' t2=pop()
0e790                 | ' t1=pop()
0e790                 | ' 
0e790                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e790     08 4E 85 F1 | 	sub	fp, #8
0e794     1C 22 0E F2 | 	cmp	local03, #28 wz
0e798     A7 22 02 AB |  if_e	rdlong	local03, fp
0e79c     A7 22 62 AC |  if_e	wrlong	local03, fp
0e7a0     08 4E 05 A1 |  if_e	add	fp, #8
0e7a4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e7a8     08 4E 85 A1 |  if_e	sub	fp, #8
0e7ac                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e7ac     14 4E 05 F1 | 	add	fp, #20
0e7b0     A7 22 02 FB | 	rdlong	local03, fp
0e7b4     14 4E 85 F1 | 	sub	fp, #20
0e7b8     1C 22 0E F2 | 	cmp	local03, #28 wz
0e7bc     18 00 90 5D |  if_ne	jmp	#LR__1150
0e7c0     0C 4E 05 F1 | 	add	fp, #12
0e7c4     A7 22 02 FB | 	rdlong	local03, fp
0e7c8     A7 22 62 FC | 	wrlong	local03, fp
0e7cc     08 4E 05 F1 | 	add	fp, #8
0e7d0     A7 3A 68 FC | 	wrlong	#29, fp
0e7d4     14 4E 85 F1 | 	sub	fp, #20
0e7d8                 | LR__1150
0e7d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0e7d8     08 4E 05 F1 | 	add	fp, #8
0e7dc     A7 22 02 FB | 	rdlong	local03, fp
0e7e0     08 4E 85 F1 | 	sub	fp, #8
0e7e4     1F 22 0E F2 | 	cmp	local03, #31 wz
0e7e8     14 4E 05 51 |  if_ne	add	fp, #20
0e7ec     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e7f0     14 4E 85 51 |  if_ne	sub	fp, #20
0e7f4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e7f8     08 4E 05 51 |  if_ne	add	fp, #8
0e7fc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e800     08 4E 85 51 |  if_ne	sub	fp, #8
0e804     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e808     14 4E 05 51 |  if_ne	add	fp, #20
0e80c     14 4E 85 51 |  if_ne	sub	fp, #20
0e810     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e814     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e818     08 4E 05 A1 |  if_e	add	fp, #8
0e81c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e820     08 4E 85 A1 |  if_e	sub	fp, #8
0e824     18 00 90 AD |  if_e	jmp	#LR__1151
0e828     A7 22 02 FB | 	rdlong	local03, fp
0e82c     0C 4E 05 F1 | 	add	fp, #12
0e830     A7 1E 02 FB | 	rdlong	local01, fp
0e834     0C 4E 85 F1 | 	sub	fp, #12
0e838     0F 23 62 F0 | 	shl	local03, local01
0e83c     A7 22 62 FC | 	wrlong	local03, fp
0e840                 | LR__1151
0e840     A7 12 02 F6 | 	mov	arg01, fp
0e844     80 AD BF FD | 	call	#_push
0e848     A7 F0 03 F6 | 	mov	ptra, fp
0e84c     B2 00 A0 FD | 	call	#popregs_
0e850                 | _do_shl_ret
0e850     2D 00 64 FD | 	ret
0e854                 | 
0e854                 | ' 
0e854                 | ' sub do_shr 
0e854                 | _do_shr
0e854     03 4A 05 F6 | 	mov	COUNT_, #3
0e858     A8 00 A0 FD | 	call	#pushregs_
0e85c     18 F0 07 F1 | 	add	ptra, #24
0e860     CC AC BF FD | 	call	#_pop
0e864     FD 12 02 F6 | 	mov	arg01, result1
0e868     FE 1E 02 F6 | 	mov	local01, result2
0e86c     FF 20 02 F6 | 	mov	local02, result3
0e870     0C 4E 05 F1 | 	add	fp, #12
0e874     A7 12 62 FC | 	wrlong	arg01, fp
0e878     04 4E 05 F1 | 	add	fp, #4
0e87c     A7 1E 62 FC | 	wrlong	local01, fp
0e880     04 4E 05 F1 | 	add	fp, #4
0e884     A7 20 62 FC | 	wrlong	local02, fp
0e888     14 4E 85 F1 | 	sub	fp, #20
0e88c     A0 AC BF FD | 	call	#_pop
0e890     FF 22 02 F6 | 	mov	local03, result3
0e894     A7 FA 61 FC | 	wrlong	result1, fp
0e898     04 4E 05 F1 | 	add	fp, #4
0e89c     A7 FC 61 FC | 	wrlong	result2, fp
0e8a0     04 4E 05 F1 | 	add	fp, #4
0e8a4     A7 22 62 FC | 	wrlong	local03, fp
0e8a8                 | ' t2=pop()
0e8a8                 | ' t1=pop()
0e8a8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0e8a8     08 4E 85 F1 | 	sub	fp, #8
0e8ac     1C 22 0E F2 | 	cmp	local03, #28 wz
0e8b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e8b4     A7 22 62 AC |  if_e	wrlong	local03, fp
0e8b8     08 4E 05 A1 |  if_e	add	fp, #8
0e8bc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0e8c0     08 4E 85 A1 |  if_e	sub	fp, #8
0e8c4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0e8c4     14 4E 05 F1 | 	add	fp, #20
0e8c8     A7 22 02 FB | 	rdlong	local03, fp
0e8cc     14 4E 85 F1 | 	sub	fp, #20
0e8d0     1C 22 0E F2 | 	cmp	local03, #28 wz
0e8d4     18 00 90 5D |  if_ne	jmp	#LR__1160
0e8d8     0C 4E 05 F1 | 	add	fp, #12
0e8dc     A7 22 02 FB | 	rdlong	local03, fp
0e8e0     A7 22 62 FC | 	wrlong	local03, fp
0e8e4     08 4E 05 F1 | 	add	fp, #8
0e8e8     A7 3A 68 FC | 	wrlong	#29, fp
0e8ec     14 4E 85 F1 | 	sub	fp, #20
0e8f0                 | LR__1160
0e8f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0e8f0     08 4E 05 F1 | 	add	fp, #8
0e8f4     A7 22 02 FB | 	rdlong	local03, fp
0e8f8     08 4E 85 F1 | 	sub	fp, #8
0e8fc     1F 22 0E F2 | 	cmp	local03, #31 wz
0e900     14 4E 05 51 |  if_ne	add	fp, #20
0e904     A7 20 02 5B |  if_ne	rdlong	local02, fp
0e908     14 4E 85 51 |  if_ne	sub	fp, #20
0e90c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0e910     08 4E 05 51 |  if_ne	add	fp, #8
0e914     A7 22 02 5B |  if_ne	rdlong	local03, fp
0e918     08 4E 85 51 |  if_ne	sub	fp, #8
0e91c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0e920     14 4E 05 51 |  if_ne	add	fp, #20
0e924     14 4E 85 51 |  if_ne	sub	fp, #20
0e928     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0e92c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0e930     08 4E 05 A1 |  if_e	add	fp, #8
0e934     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e938     08 4E 85 A1 |  if_e	sub	fp, #8
0e93c     18 00 90 AD |  if_e	jmp	#LR__1161
0e940     A7 22 02 FB | 	rdlong	local03, fp
0e944     0C 4E 05 F1 | 	add	fp, #12
0e948     A7 1E 02 FB | 	rdlong	local01, fp
0e94c     0C 4E 85 F1 | 	sub	fp, #12
0e950     0F 23 42 F0 | 	shr	local03, local01
0e954     A7 22 62 FC | 	wrlong	local03, fp
0e958                 | LR__1161
0e958     A7 12 02 F6 | 	mov	arg01, fp
0e95c     68 AC BF FD | 	call	#_push
0e960     A7 F0 03 F6 | 	mov	ptra, fp
0e964     B2 00 A0 FD | 	call	#popregs_
0e968                 | _do_shr_ret
0e968     2D 00 64 FD | 	ret
0e96c                 | 
0e96c                 | ' 
0e96c                 | ' sub do_power 
0e96c                 | _do_power
0e96c     02 4A 05 F6 | 	mov	COUNT_, #2
0e970     A8 00 A0 FD | 	call	#pushregs_
0e974     18 F0 07 F1 | 	add	ptra, #24
0e978     B4 AB BF FD | 	call	#_pop
0e97c     FD 14 02 F6 | 	mov	arg02, result1
0e980     FE 12 02 F6 | 	mov	arg01, result2
0e984     FF 1E 02 F6 | 	mov	local01, result3
0e988     0C 4E 05 F1 | 	add	fp, #12
0e98c     A7 14 62 FC | 	wrlong	arg02, fp
0e990     04 4E 05 F1 | 	add	fp, #4
0e994     A7 12 62 FC | 	wrlong	arg01, fp
0e998     04 4E 05 F1 | 	add	fp, #4
0e99c     A7 1E 62 FC | 	wrlong	local01, fp
0e9a0     14 4E 85 F1 | 	sub	fp, #20
0e9a4     88 AB BF FD | 	call	#_pop
0e9a8     A7 FA 61 FC | 	wrlong	result1, fp
0e9ac     04 4E 05 F1 | 	add	fp, #4
0e9b0     A7 FC 61 FC | 	wrlong	result2, fp
0e9b4     04 4E 05 F1 | 	add	fp, #4
0e9b8     A7 FE 61 FC | 	wrlong	result3, fp
0e9bc                 | ' t2=pop()
0e9bc                 | ' t1=pop()
0e9bc                 | ' 
0e9bc                 | ' 
0e9bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0e9bc     08 4E 85 F1 | 	sub	fp, #8
0e9c0     1F FE 0D F2 | 	cmp	result3, #31 wz
0e9c4     14 4E 05 51 |  if_ne	add	fp, #20
0e9c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e9cc     14 4E 85 51 |  if_ne	sub	fp, #20
0e9d0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0e9d4     A7 18 68 AC |  if_e	wrlong	#12, fp
0e9d8     08 4E 05 A1 |  if_e	add	fp, #8
0e9dc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0e9e0     08 4E 85 A1 |  if_e	sub	fp, #8
0e9e4     38 01 90 AD |  if_e	jmp	#LR__1175
0e9e8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0e9e8     08 4E 05 F1 | 	add	fp, #8
0e9ec     A7 14 02 FB | 	rdlong	arg02, fp
0e9f0     08 4E 85 F1 | 	sub	fp, #8
0e9f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
0e9f8     28 00 90 5D |  if_ne	jmp	#LR__1170
0e9fc     08 4E 05 F1 | 	add	fp, #8
0ea00     A7 3C 68 FC | 	wrlong	#30, fp
0ea04     08 4E 85 F1 | 	sub	fp, #8
0ea08     A7 12 02 FB | 	rdlong	arg01, fp
0ea0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea10     1F 20 C6 C9 |  if_b	decod	local02, #31
0ea14     00 20 06 36 |  if_ae	mov	local02, #0
0ea18     8C C4 B0 FD | 	call	#__system___float_fromuns
0ea1c     10 FB 61 F5 | 	xor	result1, local02
0ea20     A7 FA 61 FC | 	wrlong	result1, fp
0ea24                 | LR__1170
0ea24                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0ea24     08 4E 05 F1 | 	add	fp, #8
0ea28     A7 14 02 FB | 	rdlong	arg02, fp
0ea2c     08 4E 85 F1 | 	sub	fp, #8
0ea30     1D 14 0E F2 | 	cmp	arg02, #29 wz
0ea34     18 00 90 5D |  if_ne	jmp	#LR__1171
0ea38     08 4E 05 F1 | 	add	fp, #8
0ea3c     A7 3C 68 FC | 	wrlong	#30, fp
0ea40     08 4E 85 F1 | 	sub	fp, #8
0ea44     A7 12 02 FB | 	rdlong	arg01, fp
0ea48     5C C4 B0 FD | 	call	#__system___float_fromuns
0ea4c     A7 FA 61 FC | 	wrlong	result1, fp
0ea50                 | LR__1171
0ea50                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0ea50     14 4E 05 F1 | 	add	fp, #20
0ea54     A7 14 02 FB | 	rdlong	arg02, fp
0ea58     14 4E 85 F1 | 	sub	fp, #20
0ea5c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ea60     34 00 90 5D |  if_ne	jmp	#LR__1172
0ea64     14 4E 05 F1 | 	add	fp, #20
0ea68     A7 3C 68 FC | 	wrlong	#30, fp
0ea6c     08 4E 85 F1 | 	sub	fp, #8
0ea70     A7 12 02 FB | 	rdlong	arg01, fp
0ea74     0C 4E 85 F1 | 	sub	fp, #12
0ea78     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea7c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ea80     00 20 06 36 |  if_ae	mov	local02, #0
0ea84     20 C4 B0 FD | 	call	#__system___float_fromuns
0ea88     10 FB 61 F5 | 	xor	result1, local02
0ea8c     0C 4E 05 F1 | 	add	fp, #12
0ea90     A7 FA 61 FC | 	wrlong	result1, fp
0ea94     0C 4E 85 F1 | 	sub	fp, #12
0ea98                 | LR__1172
0ea98                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0ea98     14 4E 05 F1 | 	add	fp, #20
0ea9c     A7 14 02 FB | 	rdlong	arg02, fp
0eaa0     14 4E 85 F1 | 	sub	fp, #20
0eaa4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0eaa8     24 00 90 5D |  if_ne	jmp	#LR__1173
0eaac     14 4E 05 F1 | 	add	fp, #20
0eab0     A7 3C 68 FC | 	wrlong	#30, fp
0eab4     08 4E 85 F1 | 	sub	fp, #8
0eab8     A7 12 02 FB | 	rdlong	arg01, fp
0eabc     0C 4E 85 F1 | 	sub	fp, #12
0eac0     E4 C3 B0 FD | 	call	#__system___float_fromuns
0eac4     0C 4E 05 F1 | 	add	fp, #12
0eac8     A7 FA 61 FC | 	wrlong	result1, fp
0eacc     0C 4E 85 F1 | 	sub	fp, #12
0ead0                 | LR__1173
0ead0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0ead0     08 4E 05 F1 | 	add	fp, #8
0ead4     A7 14 02 FB | 	rdlong	arg02, fp
0ead8     08 4E 85 F1 | 	sub	fp, #8
0eadc     1E 14 0E F2 | 	cmp	arg02, #30 wz
0eae0     14 4E 05 A1 |  if_e	add	fp, #20
0eae4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0eae8     14 4E 85 A1 |  if_e	sub	fp, #20
0eaec     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0eaf0     1C 00 90 5D |  if_ne	jmp	#LR__1174
0eaf4     A7 12 02 FB | 	rdlong	arg01, fp
0eaf8     0C 4E 05 F1 | 	add	fp, #12
0eafc     A7 14 02 FB | 	rdlong	arg02, fp
0eb00     0C 4E 85 F1 | 	sub	fp, #12
0eb04     88 D6 B0 FD | 	call	#__system____builtin_powf
0eb08     A7 FA 61 FC | 	wrlong	result1, fp
0eb0c     10 00 90 FD | 	jmp	#LR__1175
0eb10                 | LR__1174
0eb10     A7 1A 68 FC | 	wrlong	#13, fp
0eb14     08 4E 05 F1 | 	add	fp, #8
0eb18     A7 FE 69 FC | 	wrlong	#255, fp
0eb1c     08 4E 85 F1 | 	sub	fp, #8
0eb20                 | LR__1175
0eb20     A7 12 02 F6 | 	mov	arg01, fp
0eb24     A0 AA BF FD | 	call	#_push
0eb28     A7 F0 03 F6 | 	mov	ptra, fp
0eb2c     B2 00 A0 FD | 	call	#popregs_
0eb30                 | _do_power_ret
0eb30     2D 00 64 FD | 	ret
0eb34                 | 
0eb34                 | ' 
0eb34                 | ' 
0eb34                 | ' sub do_eq
0eb34                 | _do_eq
0eb34     05 4A 05 F6 | 	mov	COUNT_, #5
0eb38     A8 00 A0 FD | 	call	#pushregs_
0eb3c     18 F0 07 F1 | 	add	ptra, #24
0eb40     EC A9 BF FD | 	call	#_pop
0eb44     FD 1E 02 F6 | 	mov	local01, result1
0eb48     FE 20 02 F6 | 	mov	local02, result2
0eb4c     FF 22 02 F6 | 	mov	local03, result3
0eb50     0C 4E 05 F1 | 	add	fp, #12
0eb54     A7 1E 62 FC | 	wrlong	local01, fp
0eb58     04 4E 05 F1 | 	add	fp, #4
0eb5c     A7 20 62 FC | 	wrlong	local02, fp
0eb60     04 4E 05 F1 | 	add	fp, #4
0eb64     A7 22 62 FC | 	wrlong	local03, fp
0eb68     14 4E 85 F1 | 	sub	fp, #20
0eb6c     C0 A9 BF FD | 	call	#_pop
0eb70     FF 22 02 F6 | 	mov	local03, result3
0eb74     A7 FA 61 FC | 	wrlong	result1, fp
0eb78     04 4E 05 F1 | 	add	fp, #4
0eb7c     A7 FC 61 FC | 	wrlong	result2, fp
0eb80     04 4E 05 F1 | 	add	fp, #4
0eb84     A7 22 62 FC | 	wrlong	local03, fp
0eb88                 | ' t2=pop()
0eb88                 | ' t1=pop()
0eb88                 | ' 
0eb88                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0eb88     08 4E 85 F1 | 	sub	fp, #8
0eb8c     1F 22 0E F2 | 	cmp	local03, #31 wz
0eb90     14 4E 05 A1 |  if_e	add	fp, #20
0eb94     A7 24 02 AB |  if_e	rdlong	local04, fp
0eb98     14 4E 85 A1 |  if_e	sub	fp, #20
0eb9c     12 23 02 A6 |  if_e	mov	local03, local04
0eba0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eba4     28 00 90 5D |  if_ne	jmp	#LR__1180
0eba8     00 1E 06 F6 | 	mov	local01, #0
0ebac     A7 12 02 FB | 	rdlong	arg01, fp
0ebb0     0C 4E 05 F1 | 	add	fp, #12
0ebb4     A7 14 02 FB | 	rdlong	arg02, fp
0ebb8     0C 4E 85 F1 | 	sub	fp, #12
0ebbc     30 9D B0 FD | 	call	#__system___string_cmp
0ebc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ebc4     00 1E 26 A6 |  if_e	not	local01, #0
0ebc8     A7 1E 62 FC | 	wrlong	local01, fp
0ebcc     1C 04 90 FD | 	jmp	#LR__1193
0ebd0                 | LR__1180
0ebd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0ebd0     08 4E 05 F1 | 	add	fp, #8
0ebd4     A7 1E 02 FB | 	rdlong	local01, fp
0ebd8     08 4E 85 F1 | 	sub	fp, #8
0ebdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ebe0     14 4E 05 A1 |  if_e	add	fp, #20
0ebe4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ebe8     14 4E 85 A1 |  if_e	sub	fp, #20
0ebec     12 23 02 A6 |  if_e	mov	local03, local04
0ebf0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ebf4     2C 00 90 5D |  if_ne	jmp	#LR__1181
0ebf8     00 1E 06 F6 | 	mov	local01, #0
0ebfc     A7 12 02 FB | 	rdlong	arg01, fp
0ec00     0C 4E 05 F1 | 	add	fp, #12
0ec04     A7 14 02 FB | 	rdlong	arg02, fp
0ec08     0C 4E 85 F1 | 	sub	fp, #12
0ec0c     01 16 06 F6 | 	mov	arg03, #1
0ec10     CC CA B0 FD | 	call	#__system___float_cmp
0ec14     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec18     00 1E 26 A6 |  if_e	not	local01, #0
0ec1c     A7 1E 62 FC | 	wrlong	local01, fp
0ec20     C8 03 90 FD | 	jmp	#LR__1193
0ec24                 | LR__1181
0ec24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0ec24     08 4E 05 F1 | 	add	fp, #8
0ec28     A7 1E 02 FB | 	rdlong	local01, fp
0ec2c     08 4E 85 F1 | 	sub	fp, #8
0ec30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ec34     14 4E 05 A1 |  if_e	add	fp, #20
0ec38     A7 24 02 AB |  if_e	rdlong	local04, fp
0ec3c     14 4E 85 A1 |  if_e	sub	fp, #20
0ec40     12 23 02 A6 |  if_e	mov	local03, local04
0ec44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ec48     48 00 90 5D |  if_ne	jmp	#LR__1182
0ec4c     00 1E 06 F6 | 	mov	local01, #0
0ec50     A7 20 02 FB | 	rdlong	local02, fp
0ec54     0C 4E 05 F1 | 	add	fp, #12
0ec58     A7 12 02 FB | 	rdlong	arg01, fp
0ec5c     0C 4E 85 F1 | 	sub	fp, #12
0ec60     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec64     1F 26 C6 C9 |  if_b	decod	local05, #31
0ec68     00 26 06 36 |  if_ae	mov	local05, #0
0ec6c     38 C2 B0 FD | 	call	#__system___float_fromuns
0ec70     13 FB 61 F5 | 	xor	result1, local05
0ec74     FD 14 02 F6 | 	mov	arg02, result1
0ec78     10 13 02 F6 | 	mov	arg01, local02
0ec7c     01 16 06 F6 | 	mov	arg03, #1
0ec80     5C CA B0 FD | 	call	#__system___float_cmp
0ec84     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec88     00 1E 26 A6 |  if_e	not	local01, #0
0ec8c     A7 1E 62 FC | 	wrlong	local01, fp
0ec90     58 03 90 FD | 	jmp	#LR__1193
0ec94                 | LR__1182
0ec94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0ec94     08 4E 05 F1 | 	add	fp, #8
0ec98     A7 1E 02 FB | 	rdlong	local01, fp
0ec9c     08 4E 85 F1 | 	sub	fp, #8
0eca0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0eca4     14 4E 05 A1 |  if_e	add	fp, #20
0eca8     A7 24 02 AB |  if_e	rdlong	local04, fp
0ecac     14 4E 85 A1 |  if_e	sub	fp, #20
0ecb0     12 23 02 A6 |  if_e	mov	local03, local04
0ecb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ecb8     38 00 90 5D |  if_ne	jmp	#LR__1183
0ecbc     00 1E 06 F6 | 	mov	local01, #0
0ecc0     A7 20 02 FB | 	rdlong	local02, fp
0ecc4     0C 4E 05 F1 | 	add	fp, #12
0ecc8     A7 12 02 FB | 	rdlong	arg01, fp
0eccc     0C 4E 85 F1 | 	sub	fp, #12
0ecd0     D4 C1 B0 FD | 	call	#__system___float_fromuns
0ecd4     FD 14 02 F6 | 	mov	arg02, result1
0ecd8     10 13 02 F6 | 	mov	arg01, local02
0ecdc     01 16 06 F6 | 	mov	arg03, #1
0ece0     FC C9 B0 FD | 	call	#__system___float_cmp
0ece4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ece8     00 1E 26 A6 |  if_e	not	local01, #0
0ecec     A7 1E 62 FC | 	wrlong	local01, fp
0ecf0     F8 02 90 FD | 	jmp	#LR__1193
0ecf4                 | LR__1183
0ecf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0ecf4     08 4E 05 F1 | 	add	fp, #8
0ecf8     A7 1E 02 FB | 	rdlong	local01, fp
0ecfc     08 4E 85 F1 | 	sub	fp, #8
0ed00     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ed04     14 4E 05 A1 |  if_e	add	fp, #20
0ed08     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed0c     14 4E 85 A1 |  if_e	sub	fp, #20
0ed10     12 23 02 A6 |  if_e	mov	local03, local04
0ed14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ed18     44 00 90 5D |  if_ne	jmp	#LR__1184
0ed1c     00 1E 06 F6 | 	mov	local01, #0
0ed20     A7 12 02 FB | 	rdlong	arg01, fp
0ed24     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed28     1F 26 C6 C9 |  if_b	decod	local05, #31
0ed2c     00 26 06 36 |  if_ae	mov	local05, #0
0ed30     74 C1 B0 FD | 	call	#__system___float_fromuns
0ed34     13 FB 61 F5 | 	xor	result1, local05
0ed38     FD 12 02 F6 | 	mov	arg01, result1
0ed3c     0C 4E 05 F1 | 	add	fp, #12
0ed40     A7 14 02 FB | 	rdlong	arg02, fp
0ed44     0C 4E 85 F1 | 	sub	fp, #12
0ed48     01 16 06 F6 | 	mov	arg03, #1
0ed4c     90 C9 B0 FD | 	call	#__system___float_cmp
0ed50     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed54     00 1E 26 A6 |  if_e	not	local01, #0
0ed58     A7 1E 62 FC | 	wrlong	local01, fp
0ed5c     8C 02 90 FD | 	jmp	#LR__1193
0ed60                 | LR__1184
0ed60                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0ed60     08 4E 05 F1 | 	add	fp, #8
0ed64     A7 1E 02 FB | 	rdlong	local01, fp
0ed68     08 4E 85 F1 | 	sub	fp, #8
0ed6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ed70     14 4E 05 A1 |  if_e	add	fp, #20
0ed74     A7 24 02 AB |  if_e	rdlong	local04, fp
0ed78     14 4E 85 A1 |  if_e	sub	fp, #20
0ed7c     12 23 02 A6 |  if_e	mov	local03, local04
0ed80     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ed84     24 00 90 5D |  if_ne	jmp	#LR__1185
0ed88     00 1E 06 F6 | 	mov	local01, #0
0ed8c     A7 20 02 FB | 	rdlong	local02, fp
0ed90     0C 4E 05 F1 | 	add	fp, #12
0ed94     A7 22 02 FB | 	rdlong	local03, fp
0ed98     0C 4E 85 F1 | 	sub	fp, #12
0ed9c     11 21 0A F2 | 	cmp	local02, local03 wz
0eda0     01 1E 66 A6 |  if_e	neg	local01, #1
0eda4     A7 1E 62 FC | 	wrlong	local01, fp
0eda8     40 02 90 FD | 	jmp	#LR__1193
0edac                 | LR__1185
0edac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0edac     08 4E 05 F1 | 	add	fp, #8
0edb0     A7 1E 02 FB | 	rdlong	local01, fp
0edb4     08 4E 85 F1 | 	sub	fp, #8
0edb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0edbc     14 4E 05 A1 |  if_e	add	fp, #20
0edc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0edc4     14 4E 85 A1 |  if_e	sub	fp, #20
0edc8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0edcc     24 00 90 5D |  if_ne	jmp	#LR__1186
0edd0     00 1E 06 F6 | 	mov	local01, #0
0edd4     A7 20 02 FB | 	rdlong	local02, fp
0edd8     0C 4E 05 F1 | 	add	fp, #12
0eddc     A7 22 02 FB | 	rdlong	local03, fp
0ede0     0C 4E 85 F1 | 	sub	fp, #12
0ede4     11 21 0A F2 | 	cmp	local02, local03 wz
0ede8     01 1E 66 A6 |  if_e	neg	local01, #1
0edec     A7 1E 62 FC | 	wrlong	local01, fp
0edf0     F8 01 90 FD | 	jmp	#LR__1193
0edf4                 | LR__1186
0edf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0edf4     08 4E 05 F1 | 	add	fp, #8
0edf8     A7 1E 02 FB | 	rdlong	local01, fp
0edfc     08 4E 85 F1 | 	sub	fp, #8
0ee00     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ee04     14 4E 05 A1 |  if_e	add	fp, #20
0ee08     A7 22 02 AB |  if_e	rdlong	local03, fp
0ee0c     14 4E 85 A1 |  if_e	sub	fp, #20
0ee10     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ee14     34 00 90 5D |  if_ne	jmp	#LR__1187
0ee18     00 1E 06 F6 | 	mov	local01, #0
0ee1c     A7 12 02 FB | 	rdlong	arg01, fp
0ee20     84 C0 B0 FD | 	call	#__system___float_fromuns
0ee24     FD 12 02 F6 | 	mov	arg01, result1
0ee28     0C 4E 05 F1 | 	add	fp, #12
0ee2c     A7 14 02 FB | 	rdlong	arg02, fp
0ee30     0C 4E 85 F1 | 	sub	fp, #12
0ee34     01 16 06 F6 | 	mov	arg03, #1
0ee38     A4 C8 B0 FD | 	call	#__system___float_cmp
0ee3c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ee40     00 1E 26 A6 |  if_e	not	local01, #0
0ee44     A7 1E 62 FC | 	wrlong	local01, fp
0ee48     A0 01 90 FD | 	jmp	#LR__1193
0ee4c                 | LR__1187
0ee4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0ee4c     08 4E 05 F1 | 	add	fp, #8
0ee50     A7 1E 02 FB | 	rdlong	local01, fp
0ee54     08 4E 85 F1 | 	sub	fp, #8
0ee58     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ee5c     14 4E 05 A1 |  if_e	add	fp, #20
0ee60     A7 22 02 AB |  if_e	rdlong	local03, fp
0ee64     14 4E 85 A1 |  if_e	sub	fp, #20
0ee68     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ee6c     24 00 90 5D |  if_ne	jmp	#LR__1188
0ee70     00 1E 06 F6 | 	mov	local01, #0
0ee74     A7 20 02 FB | 	rdlong	local02, fp
0ee78     0C 4E 05 F1 | 	add	fp, #12
0ee7c     A7 22 02 FB | 	rdlong	local03, fp
0ee80     0C 4E 85 F1 | 	sub	fp, #12
0ee84     11 21 0A F2 | 	cmp	local02, local03 wz
0ee88     01 1E 66 A6 |  if_e	neg	local01, #1
0ee8c     A7 1E 62 FC | 	wrlong	local01, fp
0ee90     58 01 90 FD | 	jmp	#LR__1193
0ee94                 | LR__1188
0ee94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0ee94     08 4E 05 F1 | 	add	fp, #8
0ee98     A7 1E 02 FB | 	rdlong	local01, fp
0ee9c     08 4E 85 F1 | 	sub	fp, #8
0eea0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0eea4     14 4E 05 A1 |  if_e	add	fp, #20
0eea8     A7 22 02 AB |  if_e	rdlong	local03, fp
0eeac     14 4E 85 A1 |  if_e	sub	fp, #20
0eeb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0eeb4     24 00 90 5D |  if_ne	jmp	#LR__1189
0eeb8     00 1E 06 F6 | 	mov	local01, #0
0eebc     A7 20 02 FB | 	rdlong	local02, fp
0eec0     0C 4E 05 F1 | 	add	fp, #12
0eec4     A7 22 02 FB | 	rdlong	local03, fp
0eec8     0C 4E 85 F1 | 	sub	fp, #12
0eecc     11 21 0A F2 | 	cmp	local02, local03 wz
0eed0     01 1E 66 A6 |  if_e	neg	local01, #1
0eed4     A7 1E 62 FC | 	wrlong	local01, fp
0eed8     10 01 90 FD | 	jmp	#LR__1193
0eedc                 | LR__1189
0eedc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0eedc     08 4E 05 F1 | 	add	fp, #8
0eee0     A7 1E 02 FB | 	rdlong	local01, fp
0eee4     08 4E 85 F1 | 	sub	fp, #8
0eee8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0eeec     14 4E 05 A1 |  if_e	add	fp, #20
0eef0     A7 22 02 AB |  if_e	rdlong	local03, fp
0eef4     14 4E 85 A1 |  if_e	sub	fp, #20
0eef8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0eefc     30 00 90 5D |  if_ne	jmp	#LR__1190
0ef00     00 1E 06 F6 | 	mov	local01, #0
0ef04     A7 12 02 FB | 	rdlong	arg01, fp
0ef08     2C D7 BF FD | 	call	#_convertstring
0ef0c     FD 12 02 F6 | 	mov	arg01, result1
0ef10     0C 4E 05 F1 | 	add	fp, #12
0ef14     A7 14 02 FB | 	rdlong	arg02, fp
0ef18     0C 4E 85 F1 | 	sub	fp, #12
0ef1c     D0 99 B0 FD | 	call	#__system___string_cmp
0ef20     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef24     00 1E 26 A6 |  if_e	not	local01, #0
0ef28     A7 1E 62 FC | 	wrlong	local01, fp
0ef2c     BC 00 90 FD | 	jmp	#LR__1193
0ef30                 | LR__1190
0ef30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0ef30     08 4E 05 F1 | 	add	fp, #8
0ef34     A7 1E 02 FB | 	rdlong	local01, fp
0ef38     08 4E 85 F1 | 	sub	fp, #8
0ef3c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ef40     14 4E 05 A1 |  if_e	add	fp, #20
0ef44     A7 22 02 AB |  if_e	rdlong	local03, fp
0ef48     14 4E 85 A1 |  if_e	sub	fp, #20
0ef4c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0ef50     34 00 90 5D |  if_ne	jmp	#LR__1191
0ef54     00 1E 06 F6 | 	mov	local01, #0
0ef58     A7 20 02 FB | 	rdlong	local02, fp
0ef5c     0C 4E 05 F1 | 	add	fp, #12
0ef60     A7 12 02 FB | 	rdlong	arg01, fp
0ef64     0C 4E 85 F1 | 	sub	fp, #12
0ef68     CC D6 BF FD | 	call	#_convertstring
0ef6c     FD 14 02 F6 | 	mov	arg02, result1
0ef70     10 13 02 F6 | 	mov	arg01, local02
0ef74     78 99 B0 FD | 	call	#__system___string_cmp
0ef78     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef7c     00 1E 26 A6 |  if_e	not	local01, #0
0ef80     A7 1E 62 FC | 	wrlong	local01, fp
0ef84     64 00 90 FD | 	jmp	#LR__1193
0ef88                 | LR__1191
0ef88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0ef88     08 4E 05 F1 | 	add	fp, #8
0ef8c     A7 1E 02 FB | 	rdlong	local01, fp
0ef90     08 4E 85 F1 | 	sub	fp, #8
0ef94     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ef98     14 4E 05 A1 |  if_e	add	fp, #20
0ef9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0efa0     14 4E 85 A1 |  if_e	sub	fp, #20
0efa4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0efa8     3C 00 90 5D |  if_ne	jmp	#LR__1192
0efac     00 1E 06 F6 | 	mov	local01, #0
0efb0     A7 12 02 FB | 	rdlong	arg01, fp
0efb4     80 D6 BF FD | 	call	#_convertstring
0efb8     FD 20 02 F6 | 	mov	local02, result1
0efbc     0C 4E 05 F1 | 	add	fp, #12
0efc0     A7 12 02 FB | 	rdlong	arg01, fp
0efc4     0C 4E 85 F1 | 	sub	fp, #12
0efc8     6C D6 BF FD | 	call	#_convertstring
0efcc     FD 14 02 F6 | 	mov	arg02, result1
0efd0     10 13 02 F6 | 	mov	arg01, local02
0efd4     18 99 B0 FD | 	call	#__system___string_cmp
0efd8     00 FA 0D F2 | 	cmp	result1, #0 wz
0efdc     00 1E 26 A6 |  if_e	not	local01, #0
0efe0     A7 1E 62 FC | 	wrlong	local01, fp
0efe4     04 00 90 FD | 	jmp	#LR__1193
0efe8                 | LR__1192
0efe8     A7 00 68 FC | 	wrlong	#0, fp
0efec                 | LR__1193
0efec     08 4E 05 F1 | 	add	fp, #8
0eff0     A7 38 68 FC | 	wrlong	#28, fp
0eff4     08 4E 85 F1 | 	sub	fp, #8
0eff8     A7 12 02 F6 | 	mov	arg01, fp
0effc     C8 A5 BF FD | 	call	#_push
0f000     A7 F0 03 F6 | 	mov	ptra, fp
0f004     B2 00 A0 FD | 	call	#popregs_
0f008                 | _do_eq_ret
0f008     2D 00 64 FD | 	ret
0f00c                 | 
0f00c                 | ' 
0f00c                 | ' sub do_gt
0f00c                 | _do_gt
0f00c     05 4A 05 F6 | 	mov	COUNT_, #5
0f010     A8 00 A0 FD | 	call	#pushregs_
0f014     18 F0 07 F1 | 	add	ptra, #24
0f018     14 A5 BF FD | 	call	#_pop
0f01c     FD 1E 02 F6 | 	mov	local01, result1
0f020     FE 20 02 F6 | 	mov	local02, result2
0f024     FF 22 02 F6 | 	mov	local03, result3
0f028     0C 4E 05 F1 | 	add	fp, #12
0f02c     A7 1E 62 FC | 	wrlong	local01, fp
0f030     04 4E 05 F1 | 	add	fp, #4
0f034     A7 20 62 FC | 	wrlong	local02, fp
0f038     04 4E 05 F1 | 	add	fp, #4
0f03c     A7 22 62 FC | 	wrlong	local03, fp
0f040     14 4E 85 F1 | 	sub	fp, #20
0f044     E8 A4 BF FD | 	call	#_pop
0f048     FF 22 02 F6 | 	mov	local03, result3
0f04c     A7 FA 61 FC | 	wrlong	result1, fp
0f050     04 4E 05 F1 | 	add	fp, #4
0f054     A7 FC 61 FC | 	wrlong	result2, fp
0f058     04 4E 05 F1 | 	add	fp, #4
0f05c     A7 22 62 FC | 	wrlong	local03, fp
0f060                 | ' t2=pop()
0f060                 | ' t1=pop()
0f060                 | ' 
0f060                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0f060     08 4E 85 F1 | 	sub	fp, #8
0f064     1F 22 0E F2 | 	cmp	local03, #31 wz
0f068     14 4E 05 A1 |  if_e	add	fp, #20
0f06c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f070     14 4E 85 A1 |  if_e	sub	fp, #20
0f074     12 23 02 A6 |  if_e	mov	local03, local04
0f078     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f07c     28 00 90 5D |  if_ne	jmp	#LR__1200
0f080     00 1E 06 F6 | 	mov	local01, #0
0f084     A7 12 02 FB | 	rdlong	arg01, fp
0f088     0C 4E 05 F1 | 	add	fp, #12
0f08c     A7 14 02 FB | 	rdlong	arg02, fp
0f090     0C 4E 85 F1 | 	sub	fp, #12
0f094     58 98 B0 FD | 	call	#__system___string_cmp
0f098     01 FA 55 F2 | 	cmps	result1, #1 wc
0f09c     00 1E 26 36 |  if_ae	not	local01, #0
0f0a0     A7 1E 62 FC | 	wrlong	local01, fp
0f0a4     1C 04 90 FD | 	jmp	#LR__1213
0f0a8                 | LR__1200
0f0a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0f0a8     08 4E 05 F1 | 	add	fp, #8
0f0ac     A7 1E 02 FB | 	rdlong	local01, fp
0f0b0     08 4E 85 F1 | 	sub	fp, #8
0f0b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f0b8     14 4E 05 A1 |  if_e	add	fp, #20
0f0bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0c0     14 4E 85 A1 |  if_e	sub	fp, #20
0f0c4     12 23 02 A6 |  if_e	mov	local03, local04
0f0c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f0cc     2C 00 90 5D |  if_ne	jmp	#LR__1201
0f0d0     00 1E 06 F6 | 	mov	local01, #0
0f0d4     A7 12 02 FB | 	rdlong	arg01, fp
0f0d8     0C 4E 05 F1 | 	add	fp, #12
0f0dc     A7 14 02 FB | 	rdlong	arg02, fp
0f0e0     0C 4E 85 F1 | 	sub	fp, #12
0f0e4     01 16 66 F6 | 	neg	arg03, #1
0f0e8     F4 C5 B0 FD | 	call	#__system___float_cmp
0f0ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0f0f0     00 1E 26 36 |  if_ae	not	local01, #0
0f0f4     A7 1E 62 FC | 	wrlong	local01, fp
0f0f8     C8 03 90 FD | 	jmp	#LR__1213
0f0fc                 | LR__1201
0f0fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0f0fc     08 4E 05 F1 | 	add	fp, #8
0f100     A7 1E 02 FB | 	rdlong	local01, fp
0f104     08 4E 85 F1 | 	sub	fp, #8
0f108     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f10c     14 4E 05 A1 |  if_e	add	fp, #20
0f110     A7 24 02 AB |  if_e	rdlong	local04, fp
0f114     14 4E 85 A1 |  if_e	sub	fp, #20
0f118     12 23 02 A6 |  if_e	mov	local03, local04
0f11c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f120     48 00 90 5D |  if_ne	jmp	#LR__1202
0f124     00 1E 06 F6 | 	mov	local01, #0
0f128     A7 20 02 FB | 	rdlong	local02, fp
0f12c     0C 4E 05 F1 | 	add	fp, #12
0f130     A7 12 02 FB | 	rdlong	arg01, fp
0f134     0C 4E 85 F1 | 	sub	fp, #12
0f138     09 13 52 F6 | 	abs	arg01, arg01 wc
0f13c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f140     00 26 06 36 |  if_ae	mov	local05, #0
0f144     60 BD B0 FD | 	call	#__system___float_fromuns
0f148     13 FB 61 F5 | 	xor	result1, local05
0f14c     FD 14 02 F6 | 	mov	arg02, result1
0f150     10 13 02 F6 | 	mov	arg01, local02
0f154     01 16 66 F6 | 	neg	arg03, #1
0f158     84 C5 B0 FD | 	call	#__system___float_cmp
0f15c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f160     00 1E 26 36 |  if_ae	not	local01, #0
0f164     A7 1E 62 FC | 	wrlong	local01, fp
0f168     58 03 90 FD | 	jmp	#LR__1213
0f16c                 | LR__1202
0f16c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0f16c     08 4E 05 F1 | 	add	fp, #8
0f170     A7 1E 02 FB | 	rdlong	local01, fp
0f174     08 4E 85 F1 | 	sub	fp, #8
0f178     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f17c     14 4E 05 A1 |  if_e	add	fp, #20
0f180     A7 24 02 AB |  if_e	rdlong	local04, fp
0f184     14 4E 85 A1 |  if_e	sub	fp, #20
0f188     12 23 02 A6 |  if_e	mov	local03, local04
0f18c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f190     38 00 90 5D |  if_ne	jmp	#LR__1203
0f194     00 1E 06 F6 | 	mov	local01, #0
0f198     A7 20 02 FB | 	rdlong	local02, fp
0f19c     0C 4E 05 F1 | 	add	fp, #12
0f1a0     A7 12 02 FB | 	rdlong	arg01, fp
0f1a4     0C 4E 85 F1 | 	sub	fp, #12
0f1a8     FC BC B0 FD | 	call	#__system___float_fromuns
0f1ac     FD 14 02 F6 | 	mov	arg02, result1
0f1b0     10 13 02 F6 | 	mov	arg01, local02
0f1b4     01 16 66 F6 | 	neg	arg03, #1
0f1b8     24 C5 B0 FD | 	call	#__system___float_cmp
0f1bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0f1c0     00 1E 26 36 |  if_ae	not	local01, #0
0f1c4     A7 1E 62 FC | 	wrlong	local01, fp
0f1c8     F8 02 90 FD | 	jmp	#LR__1213
0f1cc                 | LR__1203
0f1cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0f1cc     08 4E 05 F1 | 	add	fp, #8
0f1d0     A7 1E 02 FB | 	rdlong	local01, fp
0f1d4     08 4E 85 F1 | 	sub	fp, #8
0f1d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f1dc     14 4E 05 A1 |  if_e	add	fp, #20
0f1e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1e4     14 4E 85 A1 |  if_e	sub	fp, #20
0f1e8     12 23 02 A6 |  if_e	mov	local03, local04
0f1ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1f0     44 00 90 5D |  if_ne	jmp	#LR__1204
0f1f4     00 1E 06 F6 | 	mov	local01, #0
0f1f8     A7 12 02 FB | 	rdlong	arg01, fp
0f1fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0f200     1F 26 C6 C9 |  if_b	decod	local05, #31
0f204     00 26 06 36 |  if_ae	mov	local05, #0
0f208     9C BC B0 FD | 	call	#__system___float_fromuns
0f20c     13 FB 61 F5 | 	xor	result1, local05
0f210     FD 12 02 F6 | 	mov	arg01, result1
0f214     0C 4E 05 F1 | 	add	fp, #12
0f218     A7 14 02 FB | 	rdlong	arg02, fp
0f21c     0C 4E 85 F1 | 	sub	fp, #12
0f220     01 16 66 F6 | 	neg	arg03, #1
0f224     B8 C4 B0 FD | 	call	#__system___float_cmp
0f228     01 FA 55 F2 | 	cmps	result1, #1 wc
0f22c     00 1E 26 36 |  if_ae	not	local01, #0
0f230     A7 1E 62 FC | 	wrlong	local01, fp
0f234     8C 02 90 FD | 	jmp	#LR__1213
0f238                 | LR__1204
0f238                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0f238     08 4E 05 F1 | 	add	fp, #8
0f23c     A7 1E 02 FB | 	rdlong	local01, fp
0f240     08 4E 85 F1 | 	sub	fp, #8
0f244     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f248     14 4E 05 A1 |  if_e	add	fp, #20
0f24c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f250     14 4E 85 A1 |  if_e	sub	fp, #20
0f254     12 23 02 A6 |  if_e	mov	local03, local04
0f258     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f25c     24 00 90 5D |  if_ne	jmp	#LR__1205
0f260     00 1E 06 F6 | 	mov	local01, #0
0f264     A7 20 02 FB | 	rdlong	local02, fp
0f268     0C 4E 05 F1 | 	add	fp, #12
0f26c     A7 22 02 FB | 	rdlong	local03, fp
0f270     0C 4E 85 F1 | 	sub	fp, #12
0f274     11 21 5A F2 | 	cmps	local02, local03 wcz
0f278     01 1E 66 16 |  if_a	neg	local01, #1
0f27c     A7 1E 62 FC | 	wrlong	local01, fp
0f280     40 02 90 FD | 	jmp	#LR__1213
0f284                 | LR__1205
0f284                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0f284     08 4E 05 F1 | 	add	fp, #8
0f288     A7 1E 02 FB | 	rdlong	local01, fp
0f28c     08 4E 85 F1 | 	sub	fp, #8
0f290     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f294     14 4E 05 A1 |  if_e	add	fp, #20
0f298     A7 24 02 AB |  if_e	rdlong	local04, fp
0f29c     14 4E 85 A1 |  if_e	sub	fp, #20
0f2a0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f2a4     24 00 90 5D |  if_ne	jmp	#LR__1206
0f2a8     00 1E 06 F6 | 	mov	local01, #0
0f2ac     A7 20 02 FB | 	rdlong	local02, fp
0f2b0     0C 4E 05 F1 | 	add	fp, #12
0f2b4     A7 22 02 FB | 	rdlong	local03, fp
0f2b8     0C 4E 85 F1 | 	sub	fp, #12
0f2bc     11 21 5A F2 | 	cmps	local02, local03 wcz
0f2c0     01 1E 66 16 |  if_a	neg	local01, #1
0f2c4     A7 1E 62 FC | 	wrlong	local01, fp
0f2c8     F8 01 90 FD | 	jmp	#LR__1213
0f2cc                 | LR__1206
0f2cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0f2cc     08 4E 05 F1 | 	add	fp, #8
0f2d0     A7 1E 02 FB | 	rdlong	local01, fp
0f2d4     08 4E 85 F1 | 	sub	fp, #8
0f2d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f2dc     14 4E 05 A1 |  if_e	add	fp, #20
0f2e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f2e4     14 4E 85 A1 |  if_e	sub	fp, #20
0f2e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f2ec     34 00 90 5D |  if_ne	jmp	#LR__1207
0f2f0     00 1E 06 F6 | 	mov	local01, #0
0f2f4     A7 12 02 FB | 	rdlong	arg01, fp
0f2f8     AC BB B0 FD | 	call	#__system___float_fromuns
0f2fc     FD 12 02 F6 | 	mov	arg01, result1
0f300     0C 4E 05 F1 | 	add	fp, #12
0f304     A7 14 02 FB | 	rdlong	arg02, fp
0f308     0C 4E 85 F1 | 	sub	fp, #12
0f30c     01 16 66 F6 | 	neg	arg03, #1
0f310     CC C3 B0 FD | 	call	#__system___float_cmp
0f314     01 FA 55 F2 | 	cmps	result1, #1 wc
0f318     00 1E 26 36 |  if_ae	not	local01, #0
0f31c     A7 1E 62 FC | 	wrlong	local01, fp
0f320     A0 01 90 FD | 	jmp	#LR__1213
0f324                 | LR__1207
0f324                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0f324     08 4E 05 F1 | 	add	fp, #8
0f328     A7 1E 02 FB | 	rdlong	local01, fp
0f32c     08 4E 85 F1 | 	sub	fp, #8
0f330     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f334     14 4E 05 A1 |  if_e	add	fp, #20
0f338     A7 22 02 AB |  if_e	rdlong	local03, fp
0f33c     14 4E 85 A1 |  if_e	sub	fp, #20
0f340     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f344     24 00 90 5D |  if_ne	jmp	#LR__1208
0f348     00 1E 06 F6 | 	mov	local01, #0
0f34c     A7 20 02 FB | 	rdlong	local02, fp
0f350     0C 4E 05 F1 | 	add	fp, #12
0f354     A7 22 02 FB | 	rdlong	local03, fp
0f358     0C 4E 85 F1 | 	sub	fp, #12
0f35c     11 21 5A F2 | 	cmps	local02, local03 wcz
0f360     01 1E 66 16 |  if_a	neg	local01, #1
0f364     A7 1E 62 FC | 	wrlong	local01, fp
0f368     58 01 90 FD | 	jmp	#LR__1213
0f36c                 | LR__1208
0f36c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0f36c     08 4E 05 F1 | 	add	fp, #8
0f370     A7 1E 02 FB | 	rdlong	local01, fp
0f374     08 4E 85 F1 | 	sub	fp, #8
0f378     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f37c     14 4E 05 A1 |  if_e	add	fp, #20
0f380     A7 22 02 AB |  if_e	rdlong	local03, fp
0f384     14 4E 85 A1 |  if_e	sub	fp, #20
0f388     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f38c     24 00 90 5D |  if_ne	jmp	#LR__1209
0f390     00 1E 06 F6 | 	mov	local01, #0
0f394     A7 20 02 FB | 	rdlong	local02, fp
0f398     0C 4E 05 F1 | 	add	fp, #12
0f39c     A7 22 02 FB | 	rdlong	local03, fp
0f3a0     0C 4E 85 F1 | 	sub	fp, #12
0f3a4     11 21 1A F2 | 	cmp	local02, local03 wcz
0f3a8     01 1E 66 16 |  if_a	neg	local01, #1
0f3ac     A7 1E 62 FC | 	wrlong	local01, fp
0f3b0     10 01 90 FD | 	jmp	#LR__1213
0f3b4                 | LR__1209
0f3b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0f3b4     08 4E 05 F1 | 	add	fp, #8
0f3b8     A7 1E 02 FB | 	rdlong	local01, fp
0f3bc     08 4E 85 F1 | 	sub	fp, #8
0f3c0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f3c4     14 4E 05 A1 |  if_e	add	fp, #20
0f3c8     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3cc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f3d4     30 00 90 5D |  if_ne	jmp	#LR__1210
0f3d8     00 1E 06 F6 | 	mov	local01, #0
0f3dc     A7 12 02 FB | 	rdlong	arg01, fp
0f3e0     54 D2 BF FD | 	call	#_convertstring
0f3e4     FD 12 02 F6 | 	mov	arg01, result1
0f3e8     0C 4E 05 F1 | 	add	fp, #12
0f3ec     A7 14 02 FB | 	rdlong	arg02, fp
0f3f0     0C 4E 85 F1 | 	sub	fp, #12
0f3f4     F8 94 B0 FD | 	call	#__system___string_cmp
0f3f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f3fc     00 1E 26 36 |  if_ae	not	local01, #0
0f400     A7 1E 62 FC | 	wrlong	local01, fp
0f404     BC 00 90 FD | 	jmp	#LR__1213
0f408                 | LR__1210
0f408                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0f408     08 4E 05 F1 | 	add	fp, #8
0f40c     A7 1E 02 FB | 	rdlong	local01, fp
0f410     08 4E 85 F1 | 	sub	fp, #8
0f414     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f418     14 4E 05 A1 |  if_e	add	fp, #20
0f41c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f420     14 4E 85 A1 |  if_e	sub	fp, #20
0f424     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f428     34 00 90 5D |  if_ne	jmp	#LR__1211
0f42c     00 1E 06 F6 | 	mov	local01, #0
0f430     A7 20 02 FB | 	rdlong	local02, fp
0f434     0C 4E 05 F1 | 	add	fp, #12
0f438     A7 12 02 FB | 	rdlong	arg01, fp
0f43c     0C 4E 85 F1 | 	sub	fp, #12
0f440     F4 D1 BF FD | 	call	#_convertstring
0f444     FD 14 02 F6 | 	mov	arg02, result1
0f448     10 13 02 F6 | 	mov	arg01, local02
0f44c     A0 94 B0 FD | 	call	#__system___string_cmp
0f450     01 FA 55 F2 | 	cmps	result1, #1 wc
0f454     00 1E 26 36 |  if_ae	not	local01, #0
0f458     A7 1E 62 FC | 	wrlong	local01, fp
0f45c     64 00 90 FD | 	jmp	#LR__1213
0f460                 | LR__1211
0f460                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0f460     08 4E 05 F1 | 	add	fp, #8
0f464     A7 1E 02 FB | 	rdlong	local01, fp
0f468     08 4E 85 F1 | 	sub	fp, #8
0f46c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f470     14 4E 05 A1 |  if_e	add	fp, #20
0f474     A7 22 02 AB |  if_e	rdlong	local03, fp
0f478     14 4E 85 A1 |  if_e	sub	fp, #20
0f47c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f480     3C 00 90 5D |  if_ne	jmp	#LR__1212
0f484     00 1E 06 F6 | 	mov	local01, #0
0f488     A7 12 02 FB | 	rdlong	arg01, fp
0f48c     A8 D1 BF FD | 	call	#_convertstring
0f490     FD 20 02 F6 | 	mov	local02, result1
0f494     0C 4E 05 F1 | 	add	fp, #12
0f498     A7 12 02 FB | 	rdlong	arg01, fp
0f49c     0C 4E 85 F1 | 	sub	fp, #12
0f4a0     94 D1 BF FD | 	call	#_convertstring
0f4a4     FD 14 02 F6 | 	mov	arg02, result1
0f4a8     10 13 02 F6 | 	mov	arg01, local02
0f4ac     40 94 B0 FD | 	call	#__system___string_cmp
0f4b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0f4b4     00 1E 26 36 |  if_ae	not	local01, #0
0f4b8     A7 1E 62 FC | 	wrlong	local01, fp
0f4bc     04 00 90 FD | 	jmp	#LR__1213
0f4c0                 | LR__1212
0f4c0     A7 00 68 FC | 	wrlong	#0, fp
0f4c4                 | LR__1213
0f4c4     08 4E 05 F1 | 	add	fp, #8
0f4c8     A7 38 68 FC | 	wrlong	#28, fp
0f4cc     08 4E 85 F1 | 	sub	fp, #8
0f4d0     A7 12 02 F6 | 	mov	arg01, fp
0f4d4     F0 A0 BF FD | 	call	#_push
0f4d8     A7 F0 03 F6 | 	mov	ptra, fp
0f4dc     B2 00 A0 FD | 	call	#popregs_
0f4e0                 | _do_gt_ret
0f4e0     2D 00 64 FD | 	ret
0f4e4                 | 
0f4e4                 | ' 
0f4e4                 | ' sub do_lt
0f4e4                 | _do_lt
0f4e4     05 4A 05 F6 | 	mov	COUNT_, #5
0f4e8     A8 00 A0 FD | 	call	#pushregs_
0f4ec     18 F0 07 F1 | 	add	ptra, #24
0f4f0     3C A0 BF FD | 	call	#_pop
0f4f4     FD 1E 02 F6 | 	mov	local01, result1
0f4f8     FE 20 02 F6 | 	mov	local02, result2
0f4fc     FF 22 02 F6 | 	mov	local03, result3
0f500     0C 4E 05 F1 | 	add	fp, #12
0f504     A7 1E 62 FC | 	wrlong	local01, fp
0f508     04 4E 05 F1 | 	add	fp, #4
0f50c     A7 20 62 FC | 	wrlong	local02, fp
0f510     04 4E 05 F1 | 	add	fp, #4
0f514     A7 22 62 FC | 	wrlong	local03, fp
0f518     14 4E 85 F1 | 	sub	fp, #20
0f51c     10 A0 BF FD | 	call	#_pop
0f520     FF 22 02 F6 | 	mov	local03, result3
0f524     A7 FA 61 FC | 	wrlong	result1, fp
0f528     04 4E 05 F1 | 	add	fp, #4
0f52c     A7 FC 61 FC | 	wrlong	result2, fp
0f530     04 4E 05 F1 | 	add	fp, #4
0f534     A7 22 62 FC | 	wrlong	local03, fp
0f538                 | ' t2=pop()
0f538                 | ' t1=pop()
0f538                 | ' 
0f538                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0f538     08 4E 85 F1 | 	sub	fp, #8
0f53c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f540     14 4E 05 A1 |  if_e	add	fp, #20
0f544     A7 24 02 AB |  if_e	rdlong	local04, fp
0f548     14 4E 85 A1 |  if_e	sub	fp, #20
0f54c     12 23 02 A6 |  if_e	mov	local03, local04
0f550     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f554     28 00 90 5D |  if_ne	jmp	#LR__1220
0f558     00 1E 06 F6 | 	mov	local01, #0
0f55c     A7 12 02 FB | 	rdlong	arg01, fp
0f560     0C 4E 05 F1 | 	add	fp, #12
0f564     A7 14 02 FB | 	rdlong	arg02, fp
0f568     0C 4E 85 F1 | 	sub	fp, #12
0f56c     80 93 B0 FD | 	call	#__system___string_cmp
0f570     00 FA 55 F2 | 	cmps	result1, #0 wc
0f574     00 1E 26 C6 |  if_b	not	local01, #0
0f578     A7 1E 62 FC | 	wrlong	local01, fp
0f57c     0C 04 90 FD | 	jmp	#LR__1233
0f580                 | LR__1220
0f580                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0f580     08 4E 05 F1 | 	add	fp, #8
0f584     A7 1E 02 FB | 	rdlong	local01, fp
0f588     08 4E 85 F1 | 	sub	fp, #8
0f58c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f590     14 4E 05 A1 |  if_e	add	fp, #20
0f594     A7 24 02 AB |  if_e	rdlong	local04, fp
0f598     14 4E 85 A1 |  if_e	sub	fp, #20
0f59c     12 23 02 A6 |  if_e	mov	local03, local04
0f5a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5a4     2C 00 90 5D |  if_ne	jmp	#LR__1221
0f5a8     00 1E 06 F6 | 	mov	local01, #0
0f5ac     A7 12 02 FB | 	rdlong	arg01, fp
0f5b0     0C 4E 05 F1 | 	add	fp, #12
0f5b4     A7 14 02 FB | 	rdlong	arg02, fp
0f5b8     0C 4E 85 F1 | 	sub	fp, #12
0f5bc     01 16 06 F6 | 	mov	arg03, #1
0f5c0     1C C1 B0 FD | 	call	#__system___float_cmp
0f5c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0f5c8     00 1E 26 C6 |  if_b	not	local01, #0
0f5cc     A7 1E 62 FC | 	wrlong	local01, fp
0f5d0     B8 03 90 FD | 	jmp	#LR__1233
0f5d4                 | LR__1221
0f5d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0f5d4     08 4E 05 F1 | 	add	fp, #8
0f5d8     A7 1E 02 FB | 	rdlong	local01, fp
0f5dc     08 4E 85 F1 | 	sub	fp, #8
0f5e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5e4     14 4E 05 A1 |  if_e	add	fp, #20
0f5e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f5f0     12 23 02 A6 |  if_e	mov	local03, local04
0f5f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5f8     48 00 90 5D |  if_ne	jmp	#LR__1222
0f5fc     00 1E 06 F6 | 	mov	local01, #0
0f600     A7 20 02 FB | 	rdlong	local02, fp
0f604     0C 4E 05 F1 | 	add	fp, #12
0f608     A7 12 02 FB | 	rdlong	arg01, fp
0f60c     0C 4E 85 F1 | 	sub	fp, #12
0f610     09 13 52 F6 | 	abs	arg01, arg01 wc
0f614     1F 26 C6 C9 |  if_b	decod	local05, #31
0f618     00 26 06 36 |  if_ae	mov	local05, #0
0f61c     88 B8 B0 FD | 	call	#__system___float_fromuns
0f620     13 FB 61 F5 | 	xor	result1, local05
0f624     FD 14 02 F6 | 	mov	arg02, result1
0f628     10 13 02 F6 | 	mov	arg01, local02
0f62c     01 16 06 F6 | 	mov	arg03, #1
0f630     AC C0 B0 FD | 	call	#__system___float_cmp
0f634     00 FA 55 F2 | 	cmps	result1, #0 wc
0f638     00 1E 26 C6 |  if_b	not	local01, #0
0f63c     A7 1E 62 FC | 	wrlong	local01, fp
0f640     48 03 90 FD | 	jmp	#LR__1233
0f644                 | LR__1222
0f644                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0f644     08 4E 05 F1 | 	add	fp, #8
0f648     A7 1E 02 FB | 	rdlong	local01, fp
0f64c     08 4E 85 F1 | 	sub	fp, #8
0f650     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f654     14 4E 05 A1 |  if_e	add	fp, #20
0f658     A7 24 02 AB |  if_e	rdlong	local04, fp
0f65c     14 4E 85 A1 |  if_e	sub	fp, #20
0f660     12 23 02 A6 |  if_e	mov	local03, local04
0f664     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f668     38 00 90 5D |  if_ne	jmp	#LR__1223
0f66c     00 1E 06 F6 | 	mov	local01, #0
0f670     A7 20 02 FB | 	rdlong	local02, fp
0f674     0C 4E 05 F1 | 	add	fp, #12
0f678     A7 12 02 FB | 	rdlong	arg01, fp
0f67c     0C 4E 85 F1 | 	sub	fp, #12
0f680     24 B8 B0 FD | 	call	#__system___float_fromuns
0f684     FD 14 02 F6 | 	mov	arg02, result1
0f688     10 13 02 F6 | 	mov	arg01, local02
0f68c     01 16 06 F6 | 	mov	arg03, #1
0f690     4C C0 B0 FD | 	call	#__system___float_cmp
0f694     00 FA 55 F2 | 	cmps	result1, #0 wc
0f698     00 1E 26 C6 |  if_b	not	local01, #0
0f69c     A7 1E 62 FC | 	wrlong	local01, fp
0f6a0     E8 02 90 FD | 	jmp	#LR__1233
0f6a4                 | LR__1223
0f6a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0f6a4     08 4E 05 F1 | 	add	fp, #8
0f6a8     A7 1E 02 FB | 	rdlong	local01, fp
0f6ac     08 4E 85 F1 | 	sub	fp, #8
0f6b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6b4     14 4E 05 A1 |  if_e	add	fp, #20
0f6b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f6c0     12 23 02 A6 |  if_e	mov	local03, local04
0f6c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f6c8     44 00 90 5D |  if_ne	jmp	#LR__1224
0f6cc     00 1E 06 F6 | 	mov	local01, #0
0f6d0     A7 12 02 FB | 	rdlong	arg01, fp
0f6d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f6d8     1F 26 C6 C9 |  if_b	decod	local05, #31
0f6dc     00 26 06 36 |  if_ae	mov	local05, #0
0f6e0     C4 B7 B0 FD | 	call	#__system___float_fromuns
0f6e4     13 FB 61 F5 | 	xor	result1, local05
0f6e8     FD 12 02 F6 | 	mov	arg01, result1
0f6ec     0C 4E 05 F1 | 	add	fp, #12
0f6f0     A7 14 02 FB | 	rdlong	arg02, fp
0f6f4     0C 4E 85 F1 | 	sub	fp, #12
0f6f8     01 16 06 F6 | 	mov	arg03, #1
0f6fc     E0 BF B0 FD | 	call	#__system___float_cmp
0f700     00 FA 55 F2 | 	cmps	result1, #0 wc
0f704     00 1E 26 C6 |  if_b	not	local01, #0
0f708     A7 1E 62 FC | 	wrlong	local01, fp
0f70c     7C 02 90 FD | 	jmp	#LR__1233
0f710                 | LR__1224
0f710                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0f710     08 4E 05 F1 | 	add	fp, #8
0f714     A7 1E 02 FB | 	rdlong	local01, fp
0f718     08 4E 85 F1 | 	sub	fp, #8
0f71c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f720     14 4E 05 A1 |  if_e	add	fp, #20
0f724     A7 24 02 AB |  if_e	rdlong	local04, fp
0f728     14 4E 85 A1 |  if_e	sub	fp, #20
0f72c     12 23 02 A6 |  if_e	mov	local03, local04
0f730     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f734     20 00 90 5D |  if_ne	jmp	#LR__1225
0f738     A7 20 02 FB | 	rdlong	local02, fp
0f73c     0C 4E 05 F1 | 	add	fp, #12
0f740     A7 22 02 FB | 	rdlong	local03, fp
0f744     0C 4E 85 F1 | 	sub	fp, #12
0f748     11 21 52 F2 | 	cmps	local02, local03 wc
0f74c     0F 1F A2 F1 | 	subx	local01, local01
0f750     A7 1E 62 FC | 	wrlong	local01, fp
0f754     34 02 90 FD | 	jmp	#LR__1233
0f758                 | LR__1225
0f758                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0f758     08 4E 05 F1 | 	add	fp, #8
0f75c     A7 1E 02 FB | 	rdlong	local01, fp
0f760     08 4E 85 F1 | 	sub	fp, #8
0f764     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f768     14 4E 05 A1 |  if_e	add	fp, #20
0f76c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f770     14 4E 85 A1 |  if_e	sub	fp, #20
0f774     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0f778     20 00 90 5D |  if_ne	jmp	#LR__1226
0f77c     A7 20 02 FB | 	rdlong	local02, fp
0f780     0C 4E 05 F1 | 	add	fp, #12
0f784     A7 22 02 FB | 	rdlong	local03, fp
0f788     0C 4E 85 F1 | 	sub	fp, #12
0f78c     11 21 52 F2 | 	cmps	local02, local03 wc
0f790     0F 1F A2 F1 | 	subx	local01, local01
0f794     A7 1E 62 FC | 	wrlong	local01, fp
0f798     F0 01 90 FD | 	jmp	#LR__1233
0f79c                 | LR__1226
0f79c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0f79c     08 4E 05 F1 | 	add	fp, #8
0f7a0     A7 1E 02 FB | 	rdlong	local01, fp
0f7a4     08 4E 85 F1 | 	sub	fp, #8
0f7a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f7ac     14 4E 05 A1 |  if_e	add	fp, #20
0f7b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f7bc     34 00 90 5D |  if_ne	jmp	#LR__1227
0f7c0     00 1E 06 F6 | 	mov	local01, #0
0f7c4     A7 12 02 FB | 	rdlong	arg01, fp
0f7c8     DC B6 B0 FD | 	call	#__system___float_fromuns
0f7cc     FD 12 02 F6 | 	mov	arg01, result1
0f7d0     0C 4E 05 F1 | 	add	fp, #12
0f7d4     A7 14 02 FB | 	rdlong	arg02, fp
0f7d8     0C 4E 85 F1 | 	sub	fp, #12
0f7dc     01 16 06 F6 | 	mov	arg03, #1
0f7e0     FC BE B0 FD | 	call	#__system___float_cmp
0f7e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0f7e8     00 1E 26 C6 |  if_b	not	local01, #0
0f7ec     A7 1E 62 FC | 	wrlong	local01, fp
0f7f0     98 01 90 FD | 	jmp	#LR__1233
0f7f4                 | LR__1227
0f7f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0f7f4     08 4E 05 F1 | 	add	fp, #8
0f7f8     A7 1E 02 FB | 	rdlong	local01, fp
0f7fc     08 4E 85 F1 | 	sub	fp, #8
0f800     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f804     14 4E 05 A1 |  if_e	add	fp, #20
0f808     A7 22 02 AB |  if_e	rdlong	local03, fp
0f80c     14 4E 85 A1 |  if_e	sub	fp, #20
0f810     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f814     20 00 90 5D |  if_ne	jmp	#LR__1228
0f818     A7 20 02 FB | 	rdlong	local02, fp
0f81c     0C 4E 05 F1 | 	add	fp, #12
0f820     A7 22 02 FB | 	rdlong	local03, fp
0f824     0C 4E 85 F1 | 	sub	fp, #12
0f828     11 21 52 F2 | 	cmps	local02, local03 wc
0f82c     0F 1F A2 F1 | 	subx	local01, local01
0f830     A7 1E 62 FC | 	wrlong	local01, fp
0f834     54 01 90 FD | 	jmp	#LR__1233
0f838                 | LR__1228
0f838                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0f838     08 4E 05 F1 | 	add	fp, #8
0f83c     A7 1E 02 FB | 	rdlong	local01, fp
0f840     08 4E 85 F1 | 	sub	fp, #8
0f844     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f848     14 4E 05 A1 |  if_e	add	fp, #20
0f84c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f850     14 4E 85 A1 |  if_e	sub	fp, #20
0f854     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f858     20 00 90 5D |  if_ne	jmp	#LR__1229
0f85c     A7 20 02 FB | 	rdlong	local02, fp
0f860     0C 4E 05 F1 | 	add	fp, #12
0f864     A7 22 02 FB | 	rdlong	local03, fp
0f868     0C 4E 85 F1 | 	sub	fp, #12
0f86c     11 21 12 F2 | 	cmp	local02, local03 wc
0f870     0F 1F A2 F1 | 	subx	local01, local01
0f874     A7 1E 62 FC | 	wrlong	local01, fp
0f878     10 01 90 FD | 	jmp	#LR__1233
0f87c                 | LR__1229
0f87c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0f87c     08 4E 05 F1 | 	add	fp, #8
0f880     A7 1E 02 FB | 	rdlong	local01, fp
0f884     08 4E 85 F1 | 	sub	fp, #8
0f888     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f88c     14 4E 05 A1 |  if_e	add	fp, #20
0f890     A7 22 02 AB |  if_e	rdlong	local03, fp
0f894     14 4E 85 A1 |  if_e	sub	fp, #20
0f898     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f89c     30 00 90 5D |  if_ne	jmp	#LR__1230
0f8a0     00 1E 06 F6 | 	mov	local01, #0
0f8a4     A7 12 02 FB | 	rdlong	arg01, fp
0f8a8     8C CD BF FD | 	call	#_convertstring
0f8ac     FD 12 02 F6 | 	mov	arg01, result1
0f8b0     0C 4E 05 F1 | 	add	fp, #12
0f8b4     A7 14 02 FB | 	rdlong	arg02, fp
0f8b8     0C 4E 85 F1 | 	sub	fp, #12
0f8bc     30 90 B0 FD | 	call	#__system___string_cmp
0f8c0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f8c4     00 1E 26 C6 |  if_b	not	local01, #0
0f8c8     A7 1E 62 FC | 	wrlong	local01, fp
0f8cc     BC 00 90 FD | 	jmp	#LR__1233
0f8d0                 | LR__1230
0f8d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0f8d0     08 4E 05 F1 | 	add	fp, #8
0f8d4     A7 1E 02 FB | 	rdlong	local01, fp
0f8d8     08 4E 85 F1 | 	sub	fp, #8
0f8dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f8e0     14 4E 05 A1 |  if_e	add	fp, #20
0f8e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f8e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8ec     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f8f0     34 00 90 5D |  if_ne	jmp	#LR__1231
0f8f4     00 1E 06 F6 | 	mov	local01, #0
0f8f8     A7 20 02 FB | 	rdlong	local02, fp
0f8fc     0C 4E 05 F1 | 	add	fp, #12
0f900     A7 12 02 FB | 	rdlong	arg01, fp
0f904     0C 4E 85 F1 | 	sub	fp, #12
0f908     2C CD BF FD | 	call	#_convertstring
0f90c     FD 14 02 F6 | 	mov	arg02, result1
0f910     10 13 02 F6 | 	mov	arg01, local02
0f914     D8 8F B0 FD | 	call	#__system___string_cmp
0f918     00 FA 55 F2 | 	cmps	result1, #0 wc
0f91c     00 1E 26 C6 |  if_b	not	local01, #0
0f920     A7 1E 62 FC | 	wrlong	local01, fp
0f924     64 00 90 FD | 	jmp	#LR__1233
0f928                 | LR__1231
0f928                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0f928     08 4E 05 F1 | 	add	fp, #8
0f92c     A7 1E 02 FB | 	rdlong	local01, fp
0f930     08 4E 85 F1 | 	sub	fp, #8
0f934     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f938     14 4E 05 A1 |  if_e	add	fp, #20
0f93c     A7 22 02 AB |  if_e	rdlong	local03, fp
0f940     14 4E 85 A1 |  if_e	sub	fp, #20
0f944     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f948     3C 00 90 5D |  if_ne	jmp	#LR__1232
0f94c     00 1E 06 F6 | 	mov	local01, #0
0f950     A7 12 02 FB | 	rdlong	arg01, fp
0f954     E0 CC BF FD | 	call	#_convertstring
0f958     FD 20 02 F6 | 	mov	local02, result1
0f95c     0C 4E 05 F1 | 	add	fp, #12
0f960     A7 12 02 FB | 	rdlong	arg01, fp
0f964     0C 4E 85 F1 | 	sub	fp, #12
0f968     CC CC BF FD | 	call	#_convertstring
0f96c     FD 14 02 F6 | 	mov	arg02, result1
0f970     10 13 02 F6 | 	mov	arg01, local02
0f974     78 8F B0 FD | 	call	#__system___string_cmp
0f978     00 FA 55 F2 | 	cmps	result1, #0 wc
0f97c     00 1E 26 C6 |  if_b	not	local01, #0
0f980     A7 1E 62 FC | 	wrlong	local01, fp
0f984     04 00 90 FD | 	jmp	#LR__1233
0f988                 | LR__1232
0f988     A7 00 68 FC | 	wrlong	#0, fp
0f98c                 | LR__1233
0f98c     08 4E 05 F1 | 	add	fp, #8
0f990     A7 38 68 FC | 	wrlong	#28, fp
0f994     08 4E 85 F1 | 	sub	fp, #8
0f998     A7 12 02 F6 | 	mov	arg01, fp
0f99c     28 9C BF FD | 	call	#_push
0f9a0     A7 F0 03 F6 | 	mov	ptra, fp
0f9a4     B2 00 A0 FD | 	call	#popregs_
0f9a8                 | _do_lt_ret
0f9a8     2D 00 64 FD | 	ret
0f9ac                 | 
0f9ac                 | ' 
0f9ac                 | ' sub do_ge
0f9ac                 | _do_ge
0f9ac     05 4A 05 F6 | 	mov	COUNT_, #5
0f9b0     A8 00 A0 FD | 	call	#pushregs_
0f9b4     18 F0 07 F1 | 	add	ptra, #24
0f9b8     74 9B BF FD | 	call	#_pop
0f9bc     FD 1E 02 F6 | 	mov	local01, result1
0f9c0     FE 20 02 F6 | 	mov	local02, result2
0f9c4     FF 22 02 F6 | 	mov	local03, result3
0f9c8     0C 4E 05 F1 | 	add	fp, #12
0f9cc     A7 1E 62 FC | 	wrlong	local01, fp
0f9d0     04 4E 05 F1 | 	add	fp, #4
0f9d4     A7 20 62 FC | 	wrlong	local02, fp
0f9d8     04 4E 05 F1 | 	add	fp, #4
0f9dc     A7 22 62 FC | 	wrlong	local03, fp
0f9e0     14 4E 85 F1 | 	sub	fp, #20
0f9e4     48 9B BF FD | 	call	#_pop
0f9e8     FF 22 02 F6 | 	mov	local03, result3
0f9ec     A7 FA 61 FC | 	wrlong	result1, fp
0f9f0     04 4E 05 F1 | 	add	fp, #4
0f9f4     A7 FC 61 FC | 	wrlong	result2, fp
0f9f8     04 4E 05 F1 | 	add	fp, #4
0f9fc     A7 22 62 FC | 	wrlong	local03, fp
0fa00                 | ' t2=pop()
0fa00                 | ' t1=pop()
0fa00                 | ' 
0fa00                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0fa00     08 4E 85 F1 | 	sub	fp, #8
0fa04     1F 22 0E F2 | 	cmp	local03, #31 wz
0fa08     14 4E 05 A1 |  if_e	add	fp, #20
0fa0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa10     14 4E 85 A1 |  if_e	sub	fp, #20
0fa14     12 23 02 A6 |  if_e	mov	local03, local04
0fa18     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fa1c     28 00 90 5D |  if_ne	jmp	#LR__1240
0fa20     00 1E 06 F6 | 	mov	local01, #0
0fa24     A7 12 02 FB | 	rdlong	arg01, fp
0fa28     0C 4E 05 F1 | 	add	fp, #12
0fa2c     A7 14 02 FB | 	rdlong	arg02, fp
0fa30     0C 4E 85 F1 | 	sub	fp, #12
0fa34     B8 8E B0 FD | 	call	#__system___string_cmp
0fa38     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa3c     00 1E 26 36 |  if_ae	not	local01, #0
0fa40     A7 1E 62 FC | 	wrlong	local01, fp
0fa44     1C 04 90 FD | 	jmp	#LR__1253
0fa48                 | LR__1240
0fa48                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0fa48     08 4E 05 F1 | 	add	fp, #8
0fa4c     A7 1E 02 FB | 	rdlong	local01, fp
0fa50     08 4E 85 F1 | 	sub	fp, #8
0fa54     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fa58     14 4E 05 A1 |  if_e	add	fp, #20
0fa5c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa60     14 4E 85 A1 |  if_e	sub	fp, #20
0fa64     12 23 02 A6 |  if_e	mov	local03, local04
0fa68     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa6c     2C 00 90 5D |  if_ne	jmp	#LR__1241
0fa70     00 1E 06 F6 | 	mov	local01, #0
0fa74     A7 12 02 FB | 	rdlong	arg01, fp
0fa78     0C 4E 05 F1 | 	add	fp, #12
0fa7c     A7 14 02 FB | 	rdlong	arg02, fp
0fa80     0C 4E 85 F1 | 	sub	fp, #12
0fa84     01 16 66 F6 | 	neg	arg03, #1
0fa88     54 BC B0 FD | 	call	#__system___float_cmp
0fa8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa90     00 1E 26 36 |  if_ae	not	local01, #0
0fa94     A7 1E 62 FC | 	wrlong	local01, fp
0fa98     C8 03 90 FD | 	jmp	#LR__1253
0fa9c                 | LR__1241
0fa9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0fa9c     08 4E 05 F1 | 	add	fp, #8
0faa0     A7 1E 02 FB | 	rdlong	local01, fp
0faa4     08 4E 85 F1 | 	sub	fp, #8
0faa8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0faac     14 4E 05 A1 |  if_e	add	fp, #20
0fab0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fab4     14 4E 85 A1 |  if_e	sub	fp, #20
0fab8     12 23 02 A6 |  if_e	mov	local03, local04
0fabc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fac0     48 00 90 5D |  if_ne	jmp	#LR__1242
0fac4     00 1E 06 F6 | 	mov	local01, #0
0fac8     A7 20 02 FB | 	rdlong	local02, fp
0facc     0C 4E 05 F1 | 	add	fp, #12
0fad0     A7 12 02 FB | 	rdlong	arg01, fp
0fad4     0C 4E 85 F1 | 	sub	fp, #12
0fad8     09 13 52 F6 | 	abs	arg01, arg01 wc
0fadc     1F 26 C6 C9 |  if_b	decod	local05, #31
0fae0     00 26 06 36 |  if_ae	mov	local05, #0
0fae4     C0 B3 B0 FD | 	call	#__system___float_fromuns
0fae8     13 FB 61 F5 | 	xor	result1, local05
0faec     FD 14 02 F6 | 	mov	arg02, result1
0faf0     10 13 02 F6 | 	mov	arg01, local02
0faf4     01 16 66 F6 | 	neg	arg03, #1
0faf8     E4 BB B0 FD | 	call	#__system___float_cmp
0fafc     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb00     00 1E 26 36 |  if_ae	not	local01, #0
0fb04     A7 1E 62 FC | 	wrlong	local01, fp
0fb08     58 03 90 FD | 	jmp	#LR__1253
0fb0c                 | LR__1242
0fb0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0fb0c     08 4E 05 F1 | 	add	fp, #8
0fb10     A7 1E 02 FB | 	rdlong	local01, fp
0fb14     08 4E 85 F1 | 	sub	fp, #8
0fb18     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb1c     14 4E 05 A1 |  if_e	add	fp, #20
0fb20     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb24     14 4E 85 A1 |  if_e	sub	fp, #20
0fb28     12 23 02 A6 |  if_e	mov	local03, local04
0fb2c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb30     38 00 90 5D |  if_ne	jmp	#LR__1243
0fb34     00 1E 06 F6 | 	mov	local01, #0
0fb38     A7 20 02 FB | 	rdlong	local02, fp
0fb3c     0C 4E 05 F1 | 	add	fp, #12
0fb40     A7 12 02 FB | 	rdlong	arg01, fp
0fb44     0C 4E 85 F1 | 	sub	fp, #12
0fb48     5C B3 B0 FD | 	call	#__system___float_fromuns
0fb4c     FD 14 02 F6 | 	mov	arg02, result1
0fb50     10 13 02 F6 | 	mov	arg01, local02
0fb54     01 16 66 F6 | 	neg	arg03, #1
0fb58     84 BB B0 FD | 	call	#__system___float_cmp
0fb5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fb60     00 1E 26 36 |  if_ae	not	local01, #0
0fb64     A7 1E 62 FC | 	wrlong	local01, fp
0fb68     F8 02 90 FD | 	jmp	#LR__1253
0fb6c                 | LR__1243
0fb6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0fb6c     08 4E 05 F1 | 	add	fp, #8
0fb70     A7 1E 02 FB | 	rdlong	local01, fp
0fb74     08 4E 85 F1 | 	sub	fp, #8
0fb78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb7c     14 4E 05 A1 |  if_e	add	fp, #20
0fb80     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb84     14 4E 85 A1 |  if_e	sub	fp, #20
0fb88     12 23 02 A6 |  if_e	mov	local03, local04
0fb8c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb90     44 00 90 5D |  if_ne	jmp	#LR__1244
0fb94     00 1E 06 F6 | 	mov	local01, #0
0fb98     A7 12 02 FB | 	rdlong	arg01, fp
0fb9c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fba0     1F 26 C6 C9 |  if_b	decod	local05, #31
0fba4     00 26 06 36 |  if_ae	mov	local05, #0
0fba8     FC B2 B0 FD | 	call	#__system___float_fromuns
0fbac     13 FB 61 F5 | 	xor	result1, local05
0fbb0     FD 12 02 F6 | 	mov	arg01, result1
0fbb4     0C 4E 05 F1 | 	add	fp, #12
0fbb8     A7 14 02 FB | 	rdlong	arg02, fp
0fbbc     0C 4E 85 F1 | 	sub	fp, #12
0fbc0     01 16 66 F6 | 	neg	arg03, #1
0fbc4     18 BB B0 FD | 	call	#__system___float_cmp
0fbc8     00 FA 55 F2 | 	cmps	result1, #0 wc
0fbcc     00 1E 26 36 |  if_ae	not	local01, #0
0fbd0     A7 1E 62 FC | 	wrlong	local01, fp
0fbd4     8C 02 90 FD | 	jmp	#LR__1253
0fbd8                 | LR__1244
0fbd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0fbd8     08 4E 05 F1 | 	add	fp, #8
0fbdc     A7 1E 02 FB | 	rdlong	local01, fp
0fbe0     08 4E 85 F1 | 	sub	fp, #8
0fbe4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fbe8     14 4E 05 A1 |  if_e	add	fp, #20
0fbec     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbf0     14 4E 85 A1 |  if_e	sub	fp, #20
0fbf4     12 23 02 A6 |  if_e	mov	local03, local04
0fbf8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fbfc     24 00 90 5D |  if_ne	jmp	#LR__1245
0fc00     00 1E 06 F6 | 	mov	local01, #0
0fc04     A7 20 02 FB | 	rdlong	local02, fp
0fc08     0C 4E 05 F1 | 	add	fp, #12
0fc0c     A7 22 02 FB | 	rdlong	local03, fp
0fc10     0C 4E 85 F1 | 	sub	fp, #12
0fc14     11 21 52 F2 | 	cmps	local02, local03 wc
0fc18     01 1E 66 36 |  if_ae	neg	local01, #1
0fc1c     A7 1E 62 FC | 	wrlong	local01, fp
0fc20     40 02 90 FD | 	jmp	#LR__1253
0fc24                 | LR__1245
0fc24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0fc24     08 4E 05 F1 | 	add	fp, #8
0fc28     A7 1E 02 FB | 	rdlong	local01, fp
0fc2c     08 4E 85 F1 | 	sub	fp, #8
0fc30     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc34     14 4E 05 A1 |  if_e	add	fp, #20
0fc38     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc3c     14 4E 85 A1 |  if_e	sub	fp, #20
0fc40     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0fc44     24 00 90 5D |  if_ne	jmp	#LR__1246
0fc48     00 1E 06 F6 | 	mov	local01, #0
0fc4c     A7 20 02 FB | 	rdlong	local02, fp
0fc50     0C 4E 05 F1 | 	add	fp, #12
0fc54     A7 22 02 FB | 	rdlong	local03, fp
0fc58     0C 4E 85 F1 | 	sub	fp, #12
0fc5c     11 21 52 F2 | 	cmps	local02, local03 wc
0fc60     01 1E 66 36 |  if_ae	neg	local01, #1
0fc64     A7 1E 62 FC | 	wrlong	local01, fp
0fc68     F8 01 90 FD | 	jmp	#LR__1253
0fc6c                 | LR__1246
0fc6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0fc6c     08 4E 05 F1 | 	add	fp, #8
0fc70     A7 1E 02 FB | 	rdlong	local01, fp
0fc74     08 4E 85 F1 | 	sub	fp, #8
0fc78     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fc7c     14 4E 05 A1 |  if_e	add	fp, #20
0fc80     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc84     14 4E 85 A1 |  if_e	sub	fp, #20
0fc88     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fc8c     34 00 90 5D |  if_ne	jmp	#LR__1247
0fc90     00 1E 06 F6 | 	mov	local01, #0
0fc94     A7 12 02 FB | 	rdlong	arg01, fp
0fc98     0C B2 B0 FD | 	call	#__system___float_fromuns
0fc9c     FD 12 02 F6 | 	mov	arg01, result1
0fca0     0C 4E 05 F1 | 	add	fp, #12
0fca4     A7 14 02 FB | 	rdlong	arg02, fp
0fca8     0C 4E 85 F1 | 	sub	fp, #12
0fcac     01 16 66 F6 | 	neg	arg03, #1
0fcb0     2C BA B0 FD | 	call	#__system___float_cmp
0fcb4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fcb8     00 1E 26 36 |  if_ae	not	local01, #0
0fcbc     A7 1E 62 FC | 	wrlong	local01, fp
0fcc0     A0 01 90 FD | 	jmp	#LR__1253
0fcc4                 | LR__1247
0fcc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0fcc4     08 4E 05 F1 | 	add	fp, #8
0fcc8     A7 1E 02 FB | 	rdlong	local01, fp
0fccc     08 4E 85 F1 | 	sub	fp, #8
0fcd0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fcd4     14 4E 05 A1 |  if_e	add	fp, #20
0fcd8     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcdc     14 4E 85 A1 |  if_e	sub	fp, #20
0fce0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fce4     24 00 90 5D |  if_ne	jmp	#LR__1248
0fce8     00 1E 06 F6 | 	mov	local01, #0
0fcec     A7 20 02 FB | 	rdlong	local02, fp
0fcf0     0C 4E 05 F1 | 	add	fp, #12
0fcf4     A7 22 02 FB | 	rdlong	local03, fp
0fcf8     0C 4E 85 F1 | 	sub	fp, #12
0fcfc     11 21 52 F2 | 	cmps	local02, local03 wc
0fd00     01 1E 66 36 |  if_ae	neg	local01, #1
0fd04     A7 1E 62 FC | 	wrlong	local01, fp
0fd08     58 01 90 FD | 	jmp	#LR__1253
0fd0c                 | LR__1248
0fd0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0fd0c     08 4E 05 F1 | 	add	fp, #8
0fd10     A7 1E 02 FB | 	rdlong	local01, fp
0fd14     08 4E 85 F1 | 	sub	fp, #8
0fd18     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fd1c     14 4E 05 A1 |  if_e	add	fp, #20
0fd20     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd24     14 4E 85 A1 |  if_e	sub	fp, #20
0fd28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fd2c     24 00 90 5D |  if_ne	jmp	#LR__1249
0fd30     00 1E 06 F6 | 	mov	local01, #0
0fd34     A7 20 02 FB | 	rdlong	local02, fp
0fd38     0C 4E 05 F1 | 	add	fp, #12
0fd3c     A7 22 02 FB | 	rdlong	local03, fp
0fd40     0C 4E 85 F1 | 	sub	fp, #12
0fd44     11 21 12 F2 | 	cmp	local02, local03 wc
0fd48     01 1E 66 36 |  if_ae	neg	local01, #1
0fd4c     A7 1E 62 FC | 	wrlong	local01, fp
0fd50     10 01 90 FD | 	jmp	#LR__1253
0fd54                 | LR__1249
0fd54                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
0fd54     08 4E 05 F1 | 	add	fp, #8
0fd58     A7 1E 02 FB | 	rdlong	local01, fp
0fd5c     08 4E 85 F1 | 	sub	fp, #8
0fd60     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fd64     14 4E 05 A1 |  if_e	add	fp, #20
0fd68     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd6c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd70     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fd74     30 00 90 5D |  if_ne	jmp	#LR__1250
0fd78     00 1E 06 F6 | 	mov	local01, #0
0fd7c     A7 12 02 FB | 	rdlong	arg01, fp
0fd80     B4 C8 BF FD | 	call	#_convertstring
0fd84     FD 12 02 F6 | 	mov	arg01, result1
0fd88     0C 4E 05 F1 | 	add	fp, #12
0fd8c     A7 14 02 FB | 	rdlong	arg02, fp
0fd90     0C 4E 85 F1 | 	sub	fp, #12
0fd94     58 8B B0 FD | 	call	#__system___string_cmp
0fd98     00 FA 55 F2 | 	cmps	result1, #0 wc
0fd9c     00 1E 26 36 |  if_ae	not	local01, #0
0fda0     A7 1E 62 FC | 	wrlong	local01, fp
0fda4     BC 00 90 FD | 	jmp	#LR__1253
0fda8                 | LR__1250
0fda8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
0fda8     08 4E 05 F1 | 	add	fp, #8
0fdac     A7 1E 02 FB | 	rdlong	local01, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fdb8     14 4E 05 A1 |  if_e	add	fp, #20
0fdbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdc0     14 4E 85 A1 |  if_e	sub	fp, #20
0fdc4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fdc8     34 00 90 5D |  if_ne	jmp	#LR__1251
0fdcc     00 1E 06 F6 | 	mov	local01, #0
0fdd0     A7 20 02 FB | 	rdlong	local02, fp
0fdd4     0C 4E 05 F1 | 	add	fp, #12
0fdd8     A7 12 02 FB | 	rdlong	arg01, fp
0fddc     0C 4E 85 F1 | 	sub	fp, #12
0fde0     54 C8 BF FD | 	call	#_convertstring
0fde4     FD 14 02 F6 | 	mov	arg02, result1
0fde8     10 13 02 F6 | 	mov	arg01, local02
0fdec     00 8B B0 FD | 	call	#__system___string_cmp
0fdf0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fdf4     00 1E 26 36 |  if_ae	not	local01, #0
0fdf8     A7 1E 62 FC | 	wrlong	local01, fp
0fdfc     64 00 90 FD | 	jmp	#LR__1253
0fe00                 | LR__1251
0fe00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
0fe00     08 4E 05 F1 | 	add	fp, #8
0fe04     A7 1E 02 FB | 	rdlong	local01, fp
0fe08     08 4E 85 F1 | 	sub	fp, #8
0fe0c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0fe10     14 4E 05 A1 |  if_e	add	fp, #20
0fe14     A7 22 02 AB |  if_e	rdlong	local03, fp
0fe18     14 4E 85 A1 |  if_e	sub	fp, #20
0fe1c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0fe20     3C 00 90 5D |  if_ne	jmp	#LR__1252
0fe24     00 1E 06 F6 | 	mov	local01, #0
0fe28     A7 12 02 FB | 	rdlong	arg01, fp
0fe2c     08 C8 BF FD | 	call	#_convertstring
0fe30     FD 20 02 F6 | 	mov	local02, result1
0fe34     0C 4E 05 F1 | 	add	fp, #12
0fe38     A7 12 02 FB | 	rdlong	arg01, fp
0fe3c     0C 4E 85 F1 | 	sub	fp, #12
0fe40     F4 C7 BF FD | 	call	#_convertstring
0fe44     FD 14 02 F6 | 	mov	arg02, result1
0fe48     10 13 02 F6 | 	mov	arg01, local02
0fe4c     A0 8A B0 FD | 	call	#__system___string_cmp
0fe50     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe54     00 1E 26 36 |  if_ae	not	local01, #0
0fe58     A7 1E 62 FC | 	wrlong	local01, fp
0fe5c     04 00 90 FD | 	jmp	#LR__1253
0fe60                 | LR__1252
0fe60     A7 00 68 FC | 	wrlong	#0, fp
0fe64                 | LR__1253
0fe64     08 4E 05 F1 | 	add	fp, #8
0fe68     A7 38 68 FC | 	wrlong	#28, fp
0fe6c     08 4E 85 F1 | 	sub	fp, #8
0fe70     A7 12 02 F6 | 	mov	arg01, fp
0fe74     50 97 BF FD | 	call	#_push
0fe78     A7 F0 03 F6 | 	mov	ptra, fp
0fe7c     B2 00 A0 FD | 	call	#popregs_
0fe80                 | _do_ge_ret
0fe80     2D 00 64 FD | 	ret
0fe84                 | 
0fe84                 | ' 
0fe84                 | ' sub do_le
0fe84                 | _do_le
0fe84     05 4A 05 F6 | 	mov	COUNT_, #5
0fe88     A8 00 A0 FD | 	call	#pushregs_
0fe8c     18 F0 07 F1 | 	add	ptra, #24
0fe90     9C 96 BF FD | 	call	#_pop
0fe94     FD 1E 02 F6 | 	mov	local01, result1
0fe98     FE 20 02 F6 | 	mov	local02, result2
0fe9c     FF 22 02 F6 | 	mov	local03, result3
0fea0     0C 4E 05 F1 | 	add	fp, #12
0fea4     A7 1E 62 FC | 	wrlong	local01, fp
0fea8     04 4E 05 F1 | 	add	fp, #4
0feac     A7 20 62 FC | 	wrlong	local02, fp
0feb0     04 4E 05 F1 | 	add	fp, #4
0feb4     A7 22 62 FC | 	wrlong	local03, fp
0feb8     14 4E 85 F1 | 	sub	fp, #20
0febc     70 96 BF FD | 	call	#_pop
0fec0     FF 22 02 F6 | 	mov	local03, result3
0fec4     A7 FA 61 FC | 	wrlong	result1, fp
0fec8     04 4E 05 F1 | 	add	fp, #4
0fecc     A7 FC 61 FC | 	wrlong	result2, fp
0fed0     04 4E 05 F1 | 	add	fp, #4
0fed4     A7 22 62 FC | 	wrlong	local03, fp
0fed8                 | ' t2=pop()
0fed8                 | ' t1=pop()
0fed8                 | ' 
0fed8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0fed8     08 4E 85 F1 | 	sub	fp, #8
0fedc     1F 22 0E F2 | 	cmp	local03, #31 wz
0fee0     14 4E 05 A1 |  if_e	add	fp, #20
0fee4     A7 24 02 AB |  if_e	rdlong	local04, fp
0fee8     14 4E 85 A1 |  if_e	sub	fp, #20
0feec     12 23 02 A6 |  if_e	mov	local03, local04
0fef0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0fef4     28 00 90 5D |  if_ne	jmp	#LR__1260
0fef8     00 1E 06 F6 | 	mov	local01, #0
0fefc     A7 12 02 FB | 	rdlong	arg01, fp
0ff00     0C 4E 05 F1 | 	add	fp, #12
0ff04     A7 14 02 FB | 	rdlong	arg02, fp
0ff08     0C 4E 85 F1 | 	sub	fp, #12
0ff0c     E0 89 B0 FD | 	call	#__system___string_cmp
0ff10     01 FA 55 F2 | 	cmps	result1, #1 wc
0ff14     00 1E 26 C6 |  if_b	not	local01, #0
0ff18     A7 1E 62 FC | 	wrlong	local01, fp
0ff1c     1C 04 90 FD | 	jmp	#LR__1273
0ff20                 | LR__1260
0ff20                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0ff20     08 4E 05 F1 | 	add	fp, #8
0ff24     A7 1E 02 FB | 	rdlong	local01, fp
0ff28     08 4E 85 F1 | 	sub	fp, #8
0ff2c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff30     14 4E 05 A1 |  if_e	add	fp, #20
0ff34     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff38     14 4E 85 A1 |  if_e	sub	fp, #20
0ff3c     12 23 02 A6 |  if_e	mov	local03, local04
0ff40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff44     2C 00 90 5D |  if_ne	jmp	#LR__1261
0ff48     00 1E 06 F6 | 	mov	local01, #0
0ff4c     A7 12 02 FB | 	rdlong	arg01, fp
0ff50     0C 4E 05 F1 | 	add	fp, #12
0ff54     A7 14 02 FB | 	rdlong	arg02, fp
0ff58     0C 4E 85 F1 | 	sub	fp, #12
0ff5c     01 16 06 F6 | 	mov	arg03, #1
0ff60     7C B7 B0 FD | 	call	#__system___float_cmp
0ff64     01 FA 55 F2 | 	cmps	result1, #1 wc
0ff68     00 1E 26 C6 |  if_b	not	local01, #0
0ff6c     A7 1E 62 FC | 	wrlong	local01, fp
0ff70     C8 03 90 FD | 	jmp	#LR__1273
0ff74                 | LR__1261
0ff74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0ff74     08 4E 05 F1 | 	add	fp, #8
0ff78     A7 1E 02 FB | 	rdlong	local01, fp
0ff7c     08 4E 85 F1 | 	sub	fp, #8
0ff80     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ff84     14 4E 05 A1 |  if_e	add	fp, #20
0ff88     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff8c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff90     12 23 02 A6 |  if_e	mov	local03, local04
0ff94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff98     48 00 90 5D |  if_ne	jmp	#LR__1262
0ff9c     00 1E 06 F6 | 	mov	local01, #0
0ffa0     A7 20 02 FB | 	rdlong	local02, fp
0ffa4     0C 4E 05 F1 | 	add	fp, #12
0ffa8     A7 12 02 FB | 	rdlong	arg01, fp
0ffac     0C 4E 85 F1 | 	sub	fp, #12
0ffb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0ffb4     1F 26 C6 C9 |  if_b	decod	local05, #31
0ffb8     00 26 06 36 |  if_ae	mov	local05, #0
0ffbc     E8 AE B0 FD | 	call	#__system___float_fromuns
0ffc0     13 FB 61 F5 | 	xor	result1, local05
0ffc4     FD 14 02 F6 | 	mov	arg02, result1
0ffc8     10 13 02 F6 | 	mov	arg01, local02
0ffcc     01 16 06 F6 | 	mov	arg03, #1
0ffd0     0C B7 B0 FD | 	call	#__system___float_cmp
0ffd4     01 FA 55 F2 | 	cmps	result1, #1 wc
0ffd8     00 1E 26 C6 |  if_b	not	local01, #0
0ffdc     A7 1E 62 FC | 	wrlong	local01, fp
0ffe0     58 03 90 FD | 	jmp	#LR__1273
0ffe4                 | LR__1262
0ffe4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0ffe4     08 4E 05 F1 | 	add	fp, #8
0ffe8     A7 1E 02 FB | 	rdlong	local01, fp
0ffec     08 4E 85 F1 | 	sub	fp, #8
0fff0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fff4     14 4E 05 A1 |  if_e	add	fp, #20
0fff8     A7 24 02 AB |  if_e	rdlong	local04, fp
0fffc     14 4E 85 A1 |  if_e	sub	fp, #20
10000     12 23 02 A6 |  if_e	mov	local03, local04
10004     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10008     38 00 90 5D |  if_ne	jmp	#LR__1263
1000c     00 1E 06 F6 | 	mov	local01, #0
10010     A7 20 02 FB | 	rdlong	local02, fp
10014     0C 4E 05 F1 | 	add	fp, #12
10018     A7 12 02 FB | 	rdlong	arg01, fp
1001c     0C 4E 85 F1 | 	sub	fp, #12
10020     84 AE B0 FD | 	call	#__system___float_fromuns
10024     FD 14 02 F6 | 	mov	arg02, result1
10028     10 13 02 F6 | 	mov	arg01, local02
1002c     01 16 06 F6 | 	mov	arg03, #1
10030     AC B6 B0 FD | 	call	#__system___float_cmp
10034     01 FA 55 F2 | 	cmps	result1, #1 wc
10038     00 1E 26 C6 |  if_b	not	local01, #0
1003c     A7 1E 62 FC | 	wrlong	local01, fp
10040     F8 02 90 FD | 	jmp	#LR__1273
10044                 | LR__1263
10044                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
10044     08 4E 05 F1 | 	add	fp, #8
10048     A7 1E 02 FB | 	rdlong	local01, fp
1004c     08 4E 85 F1 | 	sub	fp, #8
10050     1C 1E 0E F2 | 	cmp	local01, #28 wz
10054     14 4E 05 A1 |  if_e	add	fp, #20
10058     A7 24 02 AB |  if_e	rdlong	local04, fp
1005c     14 4E 85 A1 |  if_e	sub	fp, #20
10060     12 23 02 A6 |  if_e	mov	local03, local04
10064     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10068     44 00 90 5D |  if_ne	jmp	#LR__1264
1006c     00 1E 06 F6 | 	mov	local01, #0
10070     A7 12 02 FB | 	rdlong	arg01, fp
10074     09 13 52 F6 | 	abs	arg01, arg01 wc
10078     1F 26 C6 C9 |  if_b	decod	local05, #31
1007c     00 26 06 36 |  if_ae	mov	local05, #0
10080     24 AE B0 FD | 	call	#__system___float_fromuns
10084     13 FB 61 F5 | 	xor	result1, local05
10088     FD 12 02 F6 | 	mov	arg01, result1
1008c     0C 4E 05 F1 | 	add	fp, #12
10090     A7 14 02 FB | 	rdlong	arg02, fp
10094     0C 4E 85 F1 | 	sub	fp, #12
10098     01 16 06 F6 | 	mov	arg03, #1
1009c     40 B6 B0 FD | 	call	#__system___float_cmp
100a0     01 FA 55 F2 | 	cmps	result1, #1 wc
100a4     00 1E 26 C6 |  if_b	not	local01, #0
100a8     A7 1E 62 FC | 	wrlong	local01, fp
100ac     8C 02 90 FD | 	jmp	#LR__1273
100b0                 | LR__1264
100b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
100b0     08 4E 05 F1 | 	add	fp, #8
100b4     A7 1E 02 FB | 	rdlong	local01, fp
100b8     08 4E 85 F1 | 	sub	fp, #8
100bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
100c0     14 4E 05 A1 |  if_e	add	fp, #20
100c4     A7 24 02 AB |  if_e	rdlong	local04, fp
100c8     14 4E 85 A1 |  if_e	sub	fp, #20
100cc     12 23 02 A6 |  if_e	mov	local03, local04
100d0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
100d4     24 00 90 5D |  if_ne	jmp	#LR__1265
100d8     00 1E 06 F6 | 	mov	local01, #0
100dc     A7 20 02 FB | 	rdlong	local02, fp
100e0     0C 4E 05 F1 | 	add	fp, #12
100e4     A7 22 02 FB | 	rdlong	local03, fp
100e8     0C 4E 85 F1 | 	sub	fp, #12
100ec     11 21 5A F2 | 	cmps	local02, local03 wcz
100f0     01 1E 66 E6 |  if_be	neg	local01, #1
100f4     A7 1E 62 FC | 	wrlong	local01, fp
100f8     40 02 90 FD | 	jmp	#LR__1273
100fc                 | LR__1265
100fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
100fc     08 4E 05 F1 | 	add	fp, #8
10100     A7 1E 02 FB | 	rdlong	local01, fp
10104     08 4E 85 F1 | 	sub	fp, #8
10108     1C 1E 0E F2 | 	cmp	local01, #28 wz
1010c     14 4E 05 A1 |  if_e	add	fp, #20
10110     A7 24 02 AB |  if_e	rdlong	local04, fp
10114     14 4E 85 A1 |  if_e	sub	fp, #20
10118     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1011c     24 00 90 5D |  if_ne	jmp	#LR__1266
10120     00 1E 06 F6 | 	mov	local01, #0
10124     A7 20 02 FB | 	rdlong	local02, fp
10128     0C 4E 05 F1 | 	add	fp, #12
1012c     A7 22 02 FB | 	rdlong	local03, fp
10130     0C 4E 85 F1 | 	sub	fp, #12
10134     11 21 5A F2 | 	cmps	local02, local03 wcz
10138     01 1E 66 E6 |  if_be	neg	local01, #1
1013c     A7 1E 62 FC | 	wrlong	local01, fp
10140     F8 01 90 FD | 	jmp	#LR__1273
10144                 | LR__1266
10144                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
10144     08 4E 05 F1 | 	add	fp, #8
10148     A7 1E 02 FB | 	rdlong	local01, fp
1014c     08 4E 85 F1 | 	sub	fp, #8
10150     1D 1E 0E F2 | 	cmp	local01, #29 wz
10154     14 4E 05 A1 |  if_e	add	fp, #20
10158     A7 22 02 AB |  if_e	rdlong	local03, fp
1015c     14 4E 85 A1 |  if_e	sub	fp, #20
10160     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10164     34 00 90 5D |  if_ne	jmp	#LR__1267
10168     00 1E 06 F6 | 	mov	local01, #0
1016c     A7 12 02 FB | 	rdlong	arg01, fp
10170     34 AD B0 FD | 	call	#__system___float_fromuns
10174     FD 12 02 F6 | 	mov	arg01, result1
10178     0C 4E 05 F1 | 	add	fp, #12
1017c     A7 14 02 FB | 	rdlong	arg02, fp
10180     0C 4E 85 F1 | 	sub	fp, #12
10184     01 16 06 F6 | 	mov	arg03, #1
10188     54 B5 B0 FD | 	call	#__system___float_cmp
1018c     01 FA 55 F2 | 	cmps	result1, #1 wc
10190     00 1E 26 C6 |  if_b	not	local01, #0
10194     A7 1E 62 FC | 	wrlong	local01, fp
10198     A0 01 90 FD | 	jmp	#LR__1273
1019c                 | LR__1267
1019c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1019c     08 4E 05 F1 | 	add	fp, #8
101a0     A7 1E 02 FB | 	rdlong	local01, fp
101a4     08 4E 85 F1 | 	sub	fp, #8
101a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
101ac     14 4E 05 A1 |  if_e	add	fp, #20
101b0     A7 22 02 AB |  if_e	rdlong	local03, fp
101b4     14 4E 85 A1 |  if_e	sub	fp, #20
101b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
101bc     24 00 90 5D |  if_ne	jmp	#LR__1268
101c0     00 1E 06 F6 | 	mov	local01, #0
101c4     A7 20 02 FB | 	rdlong	local02, fp
101c8     0C 4E 05 F1 | 	add	fp, #12
101cc     A7 22 02 FB | 	rdlong	local03, fp
101d0     0C 4E 85 F1 | 	sub	fp, #12
101d4     11 21 5A F2 | 	cmps	local02, local03 wcz
101d8     01 1E 66 E6 |  if_be	neg	local01, #1
101dc     A7 1E 62 FC | 	wrlong	local01, fp
101e0     58 01 90 FD | 	jmp	#LR__1273
101e4                 | LR__1268
101e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
101e4     08 4E 05 F1 | 	add	fp, #8
101e8     A7 1E 02 FB | 	rdlong	local01, fp
101ec     08 4E 85 F1 | 	sub	fp, #8
101f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
101f4     14 4E 05 A1 |  if_e	add	fp, #20
101f8     A7 22 02 AB |  if_e	rdlong	local03, fp
101fc     14 4E 85 A1 |  if_e	sub	fp, #20
10200     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10204     24 00 90 5D |  if_ne	jmp	#LR__1269
10208     00 1E 06 F6 | 	mov	local01, #0
1020c     A7 20 02 FB | 	rdlong	local02, fp
10210     0C 4E 05 F1 | 	add	fp, #12
10214     A7 22 02 FB | 	rdlong	local03, fp
10218     0C 4E 85 F1 | 	sub	fp, #12
1021c     11 21 1A F2 | 	cmp	local02, local03 wcz
10220     01 1E 66 E6 |  if_be	neg	local01, #1
10224     A7 1E 62 FC | 	wrlong	local01, fp
10228     10 01 90 FD | 	jmp	#LR__1273
1022c                 | LR__1269
1022c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1022c     08 4E 05 F1 | 	add	fp, #8
10230     A7 1E 02 FB | 	rdlong	local01, fp
10234     08 4E 85 F1 | 	sub	fp, #8
10238     2B 1E 0E F2 | 	cmp	local01, #43 wz
1023c     14 4E 05 A1 |  if_e	add	fp, #20
10240     A7 22 02 AB |  if_e	rdlong	local03, fp
10244     14 4E 85 A1 |  if_e	sub	fp, #20
10248     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1024c     30 00 90 5D |  if_ne	jmp	#LR__1270
10250     00 1E 06 F6 | 	mov	local01, #0
10254     A7 12 02 FB | 	rdlong	arg01, fp
10258     DC C3 BF FD | 	call	#_convertstring
1025c     FD 12 02 F6 | 	mov	arg01, result1
10260     0C 4E 05 F1 | 	add	fp, #12
10264     A7 14 02 FB | 	rdlong	arg02, fp
10268     0C 4E 85 F1 | 	sub	fp, #12
1026c     80 86 B0 FD | 	call	#__system___string_cmp
10270     01 FA 55 F2 | 	cmps	result1, #1 wc
10274     00 1E 26 C6 |  if_b	not	local01, #0
10278     A7 1E 62 FC | 	wrlong	local01, fp
1027c     BC 00 90 FD | 	jmp	#LR__1273
10280                 | LR__1270
10280                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
10280     08 4E 05 F1 | 	add	fp, #8
10284     A7 1E 02 FB | 	rdlong	local01, fp
10288     08 4E 85 F1 | 	sub	fp, #8
1028c     1F 1E 0E F2 | 	cmp	local01, #31 wz
10290     14 4E 05 A1 |  if_e	add	fp, #20
10294     A7 22 02 AB |  if_e	rdlong	local03, fp
10298     14 4E 85 A1 |  if_e	sub	fp, #20
1029c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
102a0     34 00 90 5D |  if_ne	jmp	#LR__1271
102a4     00 1E 06 F6 | 	mov	local01, #0
102a8     A7 20 02 FB | 	rdlong	local02, fp
102ac     0C 4E 05 F1 | 	add	fp, #12
102b0     A7 12 02 FB | 	rdlong	arg01, fp
102b4     0C 4E 85 F1 | 	sub	fp, #12
102b8     7C C3 BF FD | 	call	#_convertstring
102bc     FD 14 02 F6 | 	mov	arg02, result1
102c0     10 13 02 F6 | 	mov	arg01, local02
102c4     28 86 B0 FD | 	call	#__system___string_cmp
102c8     01 FA 55 F2 | 	cmps	result1, #1 wc
102cc     00 1E 26 C6 |  if_b	not	local01, #0
102d0     A7 1E 62 FC | 	wrlong	local01, fp
102d4     64 00 90 FD | 	jmp	#LR__1273
102d8                 | LR__1271
102d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
102d8     08 4E 05 F1 | 	add	fp, #8
102dc     A7 1E 02 FB | 	rdlong	local01, fp
102e0     08 4E 85 F1 | 	sub	fp, #8
102e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
102e8     14 4E 05 A1 |  if_e	add	fp, #20
102ec     A7 22 02 AB |  if_e	rdlong	local03, fp
102f0     14 4E 85 A1 |  if_e	sub	fp, #20
102f4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
102f8     3C 00 90 5D |  if_ne	jmp	#LR__1272
102fc     00 1E 06 F6 | 	mov	local01, #0
10300     A7 12 02 FB | 	rdlong	arg01, fp
10304     30 C3 BF FD | 	call	#_convertstring
10308     FD 20 02 F6 | 	mov	local02, result1
1030c     0C 4E 05 F1 | 	add	fp, #12
10310     A7 12 02 FB | 	rdlong	arg01, fp
10314     0C 4E 85 F1 | 	sub	fp, #12
10318     1C C3 BF FD | 	call	#_convertstring
1031c     FD 14 02 F6 | 	mov	arg02, result1
10320     10 13 02 F6 | 	mov	arg01, local02
10324     C8 85 B0 FD | 	call	#__system___string_cmp
10328     01 FA 55 F2 | 	cmps	result1, #1 wc
1032c     00 1E 26 C6 |  if_b	not	local01, #0
10330     A7 1E 62 FC | 	wrlong	local01, fp
10334     04 00 90 FD | 	jmp	#LR__1273
10338                 | LR__1272
10338     A7 00 68 FC | 	wrlong	#0, fp
1033c                 | LR__1273
1033c     08 4E 05 F1 | 	add	fp, #8
10340     A7 38 68 FC | 	wrlong	#28, fp
10344     08 4E 85 F1 | 	sub	fp, #8
10348     A7 12 02 F6 | 	mov	arg01, fp
1034c     78 92 BF FD | 	call	#_push
10350     A7 F0 03 F6 | 	mov	ptra, fp
10354     B2 00 A0 FD | 	call	#popregs_
10358                 | _do_le_ret
10358     2D 00 64 FD | 	ret
1035c                 | 
1035c                 | ' 
1035c                 | ' 
1035c                 | ' sub do_ne
1035c                 | _do_ne
1035c     05 4A 05 F6 | 	mov	COUNT_, #5
10360     A8 00 A0 FD | 	call	#pushregs_
10364     18 F0 07 F1 | 	add	ptra, #24
10368     C4 91 BF FD | 	call	#_pop
1036c     FD 1E 02 F6 | 	mov	local01, result1
10370     FE 20 02 F6 | 	mov	local02, result2
10374     FF 22 02 F6 | 	mov	local03, result3
10378     0C 4E 05 F1 | 	add	fp, #12
1037c     A7 1E 62 FC | 	wrlong	local01, fp
10380     04 4E 05 F1 | 	add	fp, #4
10384     A7 20 62 FC | 	wrlong	local02, fp
10388     04 4E 05 F1 | 	add	fp, #4
1038c     A7 22 62 FC | 	wrlong	local03, fp
10390     14 4E 85 F1 | 	sub	fp, #20
10394     98 91 BF FD | 	call	#_pop
10398     FF 22 02 F6 | 	mov	local03, result3
1039c     A7 FA 61 FC | 	wrlong	result1, fp
103a0     04 4E 05 F1 | 	add	fp, #4
103a4     A7 FC 61 FC | 	wrlong	result2, fp
103a8     04 4E 05 F1 | 	add	fp, #4
103ac     A7 22 62 FC | 	wrlong	local03, fp
103b0                 | ' t2=pop()
103b0                 | ' t1=pop()
103b0                 | ' 
103b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
103b0     08 4E 85 F1 | 	sub	fp, #8
103b4     1F 22 0E F2 | 	cmp	local03, #31 wz
103b8     14 4E 05 A1 |  if_e	add	fp, #20
103bc     A7 24 02 AB |  if_e	rdlong	local04, fp
103c0     14 4E 85 A1 |  if_e	sub	fp, #20
103c4     12 23 02 A6 |  if_e	mov	local03, local04
103c8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103cc     28 00 90 5D |  if_ne	jmp	#LR__1280
103d0     00 1E 06 F6 | 	mov	local01, #0
103d4     A7 12 02 FB | 	rdlong	arg01, fp
103d8     0C 4E 05 F1 | 	add	fp, #12
103dc     A7 14 02 FB | 	rdlong	arg02, fp
103e0     0C 4E 85 F1 | 	sub	fp, #12
103e4     08 85 B0 FD | 	call	#__system___string_cmp
103e8     00 FA 0D F2 | 	cmp	result1, #0 wz
103ec     00 1E 26 56 |  if_ne	not	local01, #0
103f0     A7 1E 62 FC | 	wrlong	local01, fp
103f4     1C 04 90 FD | 	jmp	#LR__1293
103f8                 | LR__1280
103f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
103f8     08 4E 05 F1 | 	add	fp, #8
103fc     A7 1E 02 FB | 	rdlong	local01, fp
10400     08 4E 85 F1 | 	sub	fp, #8
10404     1E 1E 0E F2 | 	cmp	local01, #30 wz
10408     14 4E 05 A1 |  if_e	add	fp, #20
1040c     A7 24 02 AB |  if_e	rdlong	local04, fp
10410     14 4E 85 A1 |  if_e	sub	fp, #20
10414     12 23 02 A6 |  if_e	mov	local03, local04
10418     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1041c     2C 00 90 5D |  if_ne	jmp	#LR__1281
10420     00 1E 06 F6 | 	mov	local01, #0
10424     A7 12 02 FB | 	rdlong	arg01, fp
10428     0C 4E 05 F1 | 	add	fp, #12
1042c     A7 14 02 FB | 	rdlong	arg02, fp
10430     0C 4E 85 F1 | 	sub	fp, #12
10434     01 16 06 F6 | 	mov	arg03, #1
10438     A4 B2 B0 FD | 	call	#__system___float_cmp
1043c     00 FA 0D F2 | 	cmp	result1, #0 wz
10440     00 1E 26 56 |  if_ne	not	local01, #0
10444     A7 1E 62 FC | 	wrlong	local01, fp
10448     C8 03 90 FD | 	jmp	#LR__1293
1044c                 | LR__1281
1044c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1044c     08 4E 05 F1 | 	add	fp, #8
10450     A7 1E 02 FB | 	rdlong	local01, fp
10454     08 4E 85 F1 | 	sub	fp, #8
10458     1E 1E 0E F2 | 	cmp	local01, #30 wz
1045c     14 4E 05 A1 |  if_e	add	fp, #20
10460     A7 24 02 AB |  if_e	rdlong	local04, fp
10464     14 4E 85 A1 |  if_e	sub	fp, #20
10468     12 23 02 A6 |  if_e	mov	local03, local04
1046c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10470     48 00 90 5D |  if_ne	jmp	#LR__1282
10474     00 1E 06 F6 | 	mov	local01, #0
10478     A7 20 02 FB | 	rdlong	local02, fp
1047c     0C 4E 05 F1 | 	add	fp, #12
10480     A7 12 02 FB | 	rdlong	arg01, fp
10484     0C 4E 85 F1 | 	sub	fp, #12
10488     09 13 52 F6 | 	abs	arg01, arg01 wc
1048c     1F 26 C6 C9 |  if_b	decod	local05, #31
10490     00 26 06 36 |  if_ae	mov	local05, #0
10494     10 AA B0 FD | 	call	#__system___float_fromuns
10498     13 FB 61 F5 | 	xor	result1, local05
1049c     FD 14 02 F6 | 	mov	arg02, result1
104a0     10 13 02 F6 | 	mov	arg01, local02
104a4     01 16 06 F6 | 	mov	arg03, #1
104a8     34 B2 B0 FD | 	call	#__system___float_cmp
104ac     00 FA 0D F2 | 	cmp	result1, #0 wz
104b0     00 1E 26 56 |  if_ne	not	local01, #0
104b4     A7 1E 62 FC | 	wrlong	local01, fp
104b8     58 03 90 FD | 	jmp	#LR__1293
104bc                 | LR__1282
104bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
104bc     08 4E 05 F1 | 	add	fp, #8
104c0     A7 1E 02 FB | 	rdlong	local01, fp
104c4     08 4E 85 F1 | 	sub	fp, #8
104c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
104cc     14 4E 05 A1 |  if_e	add	fp, #20
104d0     A7 24 02 AB |  if_e	rdlong	local04, fp
104d4     14 4E 85 A1 |  if_e	sub	fp, #20
104d8     12 23 02 A6 |  if_e	mov	local03, local04
104dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
104e0     38 00 90 5D |  if_ne	jmp	#LR__1283
104e4     00 1E 06 F6 | 	mov	local01, #0
104e8     A7 20 02 FB | 	rdlong	local02, fp
104ec     0C 4E 05 F1 | 	add	fp, #12
104f0     A7 12 02 FB | 	rdlong	arg01, fp
104f4     0C 4E 85 F1 | 	sub	fp, #12
104f8     AC A9 B0 FD | 	call	#__system___float_fromuns
104fc     FD 14 02 F6 | 	mov	arg02, result1
10500     10 13 02 F6 | 	mov	arg01, local02
10504     01 16 06 F6 | 	mov	arg03, #1
10508     D4 B1 B0 FD | 	call	#__system___float_cmp
1050c     00 FA 0D F2 | 	cmp	result1, #0 wz
10510     00 1E 26 56 |  if_ne	not	local01, #0
10514     A7 1E 62 FC | 	wrlong	local01, fp
10518     F8 02 90 FD | 	jmp	#LR__1293
1051c                 | LR__1283
1051c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1051c     08 4E 05 F1 | 	add	fp, #8
10520     A7 1E 02 FB | 	rdlong	local01, fp
10524     08 4E 85 F1 | 	sub	fp, #8
10528     1C 1E 0E F2 | 	cmp	local01, #28 wz
1052c     14 4E 05 A1 |  if_e	add	fp, #20
10530     A7 24 02 AB |  if_e	rdlong	local04, fp
10534     14 4E 85 A1 |  if_e	sub	fp, #20
10538     12 23 02 A6 |  if_e	mov	local03, local04
1053c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10540     44 00 90 5D |  if_ne	jmp	#LR__1284
10544     00 1E 06 F6 | 	mov	local01, #0
10548     A7 12 02 FB | 	rdlong	arg01, fp
1054c     09 13 52 F6 | 	abs	arg01, arg01 wc
10550     1F 26 C6 C9 |  if_b	decod	local05, #31
10554     00 26 06 36 |  if_ae	mov	local05, #0
10558     4C A9 B0 FD | 	call	#__system___float_fromuns
1055c     13 FB 61 F5 | 	xor	result1, local05
10560     FD 12 02 F6 | 	mov	arg01, result1
10564     0C 4E 05 F1 | 	add	fp, #12
10568     A7 14 02 FB | 	rdlong	arg02, fp
1056c     0C 4E 85 F1 | 	sub	fp, #12
10570     01 16 06 F6 | 	mov	arg03, #1
10574     68 B1 B0 FD | 	call	#__system___float_cmp
10578     00 FA 0D F2 | 	cmp	result1, #0 wz
1057c     00 1E 26 56 |  if_ne	not	local01, #0
10580     A7 1E 62 FC | 	wrlong	local01, fp
10584     8C 02 90 FD | 	jmp	#LR__1293
10588                 | LR__1284
10588                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
10588     08 4E 05 F1 | 	add	fp, #8
1058c     A7 1E 02 FB | 	rdlong	local01, fp
10590     08 4E 85 F1 | 	sub	fp, #8
10594     1C 1E 0E F2 | 	cmp	local01, #28 wz
10598     14 4E 05 A1 |  if_e	add	fp, #20
1059c     A7 24 02 AB |  if_e	rdlong	local04, fp
105a0     14 4E 85 A1 |  if_e	sub	fp, #20
105a4     12 23 02 A6 |  if_e	mov	local03, local04
105a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
105ac     24 00 90 5D |  if_ne	jmp	#LR__1285
105b0     00 1E 06 F6 | 	mov	local01, #0
105b4     A7 20 02 FB | 	rdlong	local02, fp
105b8     0C 4E 05 F1 | 	add	fp, #12
105bc     A7 22 02 FB | 	rdlong	local03, fp
105c0     0C 4E 85 F1 | 	sub	fp, #12
105c4     11 21 0A F2 | 	cmp	local02, local03 wz
105c8     01 1E 66 56 |  if_ne	neg	local01, #1
105cc     A7 1E 62 FC | 	wrlong	local01, fp
105d0     40 02 90 FD | 	jmp	#LR__1293
105d4                 | LR__1285
105d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
105d4     08 4E 05 F1 | 	add	fp, #8
105d8     A7 1E 02 FB | 	rdlong	local01, fp
105dc     08 4E 85 F1 | 	sub	fp, #8
105e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
105e4     14 4E 05 A1 |  if_e	add	fp, #20
105e8     A7 24 02 AB |  if_e	rdlong	local04, fp
105ec     14 4E 85 A1 |  if_e	sub	fp, #20
105f0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
105f4     24 00 90 5D |  if_ne	jmp	#LR__1286
105f8     00 1E 06 F6 | 	mov	local01, #0
105fc     A7 20 02 FB | 	rdlong	local02, fp
10600     0C 4E 05 F1 | 	add	fp, #12
10604     A7 22 02 FB | 	rdlong	local03, fp
10608     0C 4E 85 F1 | 	sub	fp, #12
1060c     11 21 0A F2 | 	cmp	local02, local03 wz
10610     01 1E 66 56 |  if_ne	neg	local01, #1
10614     A7 1E 62 FC | 	wrlong	local01, fp
10618     F8 01 90 FD | 	jmp	#LR__1293
1061c                 | LR__1286
1061c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1061c     08 4E 05 F1 | 	add	fp, #8
10620     A7 1E 02 FB | 	rdlong	local01, fp
10624     08 4E 85 F1 | 	sub	fp, #8
10628     1D 1E 0E F2 | 	cmp	local01, #29 wz
1062c     14 4E 05 A1 |  if_e	add	fp, #20
10630     A7 22 02 AB |  if_e	rdlong	local03, fp
10634     14 4E 85 A1 |  if_e	sub	fp, #20
10638     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1063c     34 00 90 5D |  if_ne	jmp	#LR__1287
10640     00 1E 06 F6 | 	mov	local01, #0
10644     A7 12 02 FB | 	rdlong	arg01, fp
10648     5C A8 B0 FD | 	call	#__system___float_fromuns
1064c     FD 12 02 F6 | 	mov	arg01, result1
10650     0C 4E 05 F1 | 	add	fp, #12
10654     A7 14 02 FB | 	rdlong	arg02, fp
10658     0C 4E 85 F1 | 	sub	fp, #12
1065c     01 16 06 F6 | 	mov	arg03, #1
10660     7C B0 B0 FD | 	call	#__system___float_cmp
10664     00 FA 0D F2 | 	cmp	result1, #0 wz
10668     00 1E 26 56 |  if_ne	not	local01, #0
1066c     A7 1E 62 FC | 	wrlong	local01, fp
10670     A0 01 90 FD | 	jmp	#LR__1293
10674                 | LR__1287
10674                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
10674     08 4E 05 F1 | 	add	fp, #8
10678     A7 1E 02 FB | 	rdlong	local01, fp
1067c     08 4E 85 F1 | 	sub	fp, #8
10680     1D 1E 0E F2 | 	cmp	local01, #29 wz
10684     14 4E 05 A1 |  if_e	add	fp, #20
10688     A7 22 02 AB |  if_e	rdlong	local03, fp
1068c     14 4E 85 A1 |  if_e	sub	fp, #20
10690     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10694     24 00 90 5D |  if_ne	jmp	#LR__1288
10698     00 1E 06 F6 | 	mov	local01, #0
1069c     A7 20 02 FB | 	rdlong	local02, fp
106a0     0C 4E 05 F1 | 	add	fp, #12
106a4     A7 22 02 FB | 	rdlong	local03, fp
106a8     0C 4E 85 F1 | 	sub	fp, #12
106ac     11 21 0A F2 | 	cmp	local02, local03 wz
106b0     01 1E 66 56 |  if_ne	neg	local01, #1
106b4     A7 1E 62 FC | 	wrlong	local01, fp
106b8     58 01 90 FD | 	jmp	#LR__1293
106bc                 | LR__1288
106bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
106bc     08 4E 05 F1 | 	add	fp, #8
106c0     A7 1E 02 FB | 	rdlong	local01, fp
106c4     08 4E 85 F1 | 	sub	fp, #8
106c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
106cc     14 4E 05 A1 |  if_e	add	fp, #20
106d0     A7 22 02 AB |  if_e	rdlong	local03, fp
106d4     14 4E 85 A1 |  if_e	sub	fp, #20
106d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
106dc     24 00 90 5D |  if_ne	jmp	#LR__1289
106e0     00 1E 06 F6 | 	mov	local01, #0
106e4     A7 20 02 FB | 	rdlong	local02, fp
106e8     0C 4E 05 F1 | 	add	fp, #12
106ec     A7 22 02 FB | 	rdlong	local03, fp
106f0     0C 4E 85 F1 | 	sub	fp, #12
106f4     11 21 0A F2 | 	cmp	local02, local03 wz
106f8     01 1E 66 56 |  if_ne	neg	local01, #1
106fc     A7 1E 62 FC | 	wrlong	local01, fp
10700     10 01 90 FD | 	jmp	#LR__1293
10704                 | LR__1289
10704                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
10704     08 4E 05 F1 | 	add	fp, #8
10708     A7 1E 02 FB | 	rdlong	local01, fp
1070c     08 4E 85 F1 | 	sub	fp, #8
10710     2B 1E 0E F2 | 	cmp	local01, #43 wz
10714     14 4E 05 A1 |  if_e	add	fp, #20
10718     A7 22 02 AB |  if_e	rdlong	local03, fp
1071c     14 4E 85 A1 |  if_e	sub	fp, #20
10720     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10724     30 00 90 5D |  if_ne	jmp	#LR__1290
10728     00 1E 06 F6 | 	mov	local01, #0
1072c     A7 12 02 FB | 	rdlong	arg01, fp
10730     04 BF BF FD | 	call	#_convertstring
10734     FD 12 02 F6 | 	mov	arg01, result1
10738     0C 4E 05 F1 | 	add	fp, #12
1073c     A7 14 02 FB | 	rdlong	arg02, fp
10740     0C 4E 85 F1 | 	sub	fp, #12
10744     A8 81 B0 FD | 	call	#__system___string_cmp
10748     00 FA 0D F2 | 	cmp	result1, #0 wz
1074c     00 1E 26 56 |  if_ne	not	local01, #0
10750     A7 1E 62 FC | 	wrlong	local01, fp
10754     BC 00 90 FD | 	jmp	#LR__1293
10758                 | LR__1290
10758                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
10758     08 4E 05 F1 | 	add	fp, #8
1075c     A7 1E 02 FB | 	rdlong	local01, fp
10760     08 4E 85 F1 | 	sub	fp, #8
10764     1F 1E 0E F2 | 	cmp	local01, #31 wz
10768     14 4E 05 A1 |  if_e	add	fp, #20
1076c     A7 22 02 AB |  if_e	rdlong	local03, fp
10770     14 4E 85 A1 |  if_e	sub	fp, #20
10774     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10778     34 00 90 5D |  if_ne	jmp	#LR__1291
1077c     00 1E 06 F6 | 	mov	local01, #0
10780     A7 20 02 FB | 	rdlong	local02, fp
10784     0C 4E 05 F1 | 	add	fp, #12
10788     A7 12 02 FB | 	rdlong	arg01, fp
1078c     0C 4E 85 F1 | 	sub	fp, #12
10790     A4 BE BF FD | 	call	#_convertstring
10794     FD 14 02 F6 | 	mov	arg02, result1
10798     10 13 02 F6 | 	mov	arg01, local02
1079c     50 81 B0 FD | 	call	#__system___string_cmp
107a0     00 FA 0D F2 | 	cmp	result1, #0 wz
107a4     00 1E 26 56 |  if_ne	not	local01, #0
107a8     A7 1E 62 FC | 	wrlong	local01, fp
107ac     64 00 90 FD | 	jmp	#LR__1293
107b0                 | LR__1291
107b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
107b0     08 4E 05 F1 | 	add	fp, #8
107b4     A7 1E 02 FB | 	rdlong	local01, fp
107b8     08 4E 85 F1 | 	sub	fp, #8
107bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
107c0     14 4E 05 A1 |  if_e	add	fp, #20
107c4     A7 22 02 AB |  if_e	rdlong	local03, fp
107c8     14 4E 85 A1 |  if_e	sub	fp, #20
107cc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
107d0     3C 00 90 5D |  if_ne	jmp	#LR__1292
107d4     00 1E 06 F6 | 	mov	local01, #0
107d8     A7 12 02 FB | 	rdlong	arg01, fp
107dc     58 BE BF FD | 	call	#_convertstring
107e0     FD 20 02 F6 | 	mov	local02, result1
107e4     0C 4E 05 F1 | 	add	fp, #12
107e8     A7 12 02 FB | 	rdlong	arg01, fp
107ec     0C 4E 85 F1 | 	sub	fp, #12
107f0     44 BE BF FD | 	call	#_convertstring
107f4     FD 14 02 F6 | 	mov	arg02, result1
107f8     10 13 02 F6 | 	mov	arg01, local02
107fc     F0 80 B0 FD | 	call	#__system___string_cmp
10800     00 FA 0D F2 | 	cmp	result1, #0 wz
10804     00 1E 26 56 |  if_ne	not	local01, #0
10808     A7 1E 62 FC | 	wrlong	local01, fp
1080c     04 00 90 FD | 	jmp	#LR__1293
10810                 | LR__1292
10810     A7 00 68 FC | 	wrlong	#0, fp
10814                 | LR__1293
10814     08 4E 05 F1 | 	add	fp, #8
10818     A7 38 68 FC | 	wrlong	#28, fp
1081c     08 4E 85 F1 | 	sub	fp, #8
10820     A7 12 02 F6 | 	mov	arg01, fp
10824     A0 8D BF FD | 	call	#_push
10828     A7 F0 03 F6 | 	mov	ptra, fp
1082c     B2 00 A0 FD | 	call	#popregs_
10830                 | _do_ne_ret
10830     2D 00 64 FD | 	ret
10834                 | 
10834                 | ' 
10834                 | ' 
10834                 | ' 
10834                 | ' ' -------------------   convert a variable on the top of stack to integer
10834                 | ' 
10834                 | ' sub do_converttoint
10834                 | _do_converttoint
10834     02 4A 05 F6 | 	mov	COUNT_, #2
10838     A8 00 A0 FD | 	call	#pushregs_
1083c     18 F0 07 F1 | 	add	ptra, #24
10840     EC 8C BF FD | 	call	#_pop
10844     FE 1E 02 F6 | 	mov	local01, result2
10848     FF 20 02 F6 | 	mov	local02, result3
1084c     A7 FA 61 FC | 	wrlong	result1, fp
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 1E 62 FC | 	wrlong	local01, fp
10858     04 4E 05 F1 | 	add	fp, #4
1085c     A7 20 62 FC | 	wrlong	local02, fp
10860                 | ' t1=pop() 
10860                 | ' select case t1.result_type
10860     08 4E 85 F1 | 	sub	fp, #8
10864     1C 20 0E F2 | 	cmp	local02, #28 wz
10868     2C 00 90 AD |  if_e	jmp	#LR__1300
1086c     1D 20 0E F2 | 	cmp	local02, #29 wz
10870     40 00 90 AD |  if_e	jmp	#LR__1301
10874     1E 20 0E F2 | 	cmp	local02, #30 wz
10878     54 00 90 AD |  if_e	jmp	#LR__1302
1087c     1F 20 0E F2 | 	cmp	local02, #31 wz
10880     70 00 90 AD |  if_e	jmp	#LR__1303
10884     2B 20 0E F2 | 	cmp	local02, #43 wz
10888     94 00 90 AD |  if_e	jmp	#LR__1304
1088c     FF 20 0E F2 | 	cmp	local02, #255 wz
10890     C0 00 90 AD |  if_e	jmp	#LR__1305
10894     DC 00 90 FD | 	jmp	#LR__1306
10898                 | LR__1300
10898     A7 20 02 FB | 	rdlong	local02, fp
1089c     0C 4E 05 F1 | 	add	fp, #12
108a0     A7 20 62 FC | 	wrlong	local02, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 38 68 FC | 	wrlong	#28, fp
108ac     10 4E 85 F1 | 	sub	fp, #16
108b0     D4 00 90 FD | 	jmp	#LR__1307
108b4                 | LR__1301
108b4     A7 20 02 FB | 	rdlong	local02, fp
108b8     0C 4E 05 F1 | 	add	fp, #12
108bc     A7 20 62 FC | 	wrlong	local02, fp
108c0     04 4E 05 F1 | 	add	fp, #4
108c4     A7 38 68 FC | 	wrlong	#28, fp
108c8     10 4E 85 F1 | 	sub	fp, #16
108cc     B8 00 90 FD | 	jmp	#LR__1307
108d0                 | LR__1302
108d0     A7 12 02 FB | 	rdlong	arg01, fp
108d4     01 14 06 F6 | 	mov	arg02, #1
108d8     98 AE B0 FD | 	call	#__system___float_tointeger
108dc     0C 4E 05 F1 | 	add	fp, #12
108e0     A7 FA 61 FC | 	wrlong	result1, fp
108e4     04 4E 05 F1 | 	add	fp, #4
108e8     A7 38 68 FC | 	wrlong	#28, fp
108ec     10 4E 85 F1 | 	sub	fp, #16
108f0     94 00 90 FD | 	jmp	#LR__1307
108f4                 | LR__1303
108f4     A7 12 02 FB | 	rdlong	arg01, fp
108f8     98 B1 B0 FD | 	call	#__system____builtin_atof
108fc     FD 12 02 F6 | 	mov	arg01, result1
10900     00 14 06 F6 | 	mov	arg02, #0
10904     6C AE B0 FD | 	call	#__system___float_tointeger
10908     0C 4E 05 F1 | 	add	fp, #12
1090c     A7 FA 61 FC | 	wrlong	result1, fp
10910     04 4E 05 F1 | 	add	fp, #4
10914     A7 38 68 FC | 	wrlong	#28, fp
10918     10 4E 85 F1 | 	sub	fp, #16
1091c     68 00 90 FD | 	jmp	#LR__1307
10920                 | LR__1304
10920     A7 12 02 FB | 	rdlong	arg01, fp
10924     10 BD BF FD | 	call	#_convertstring
10928     FD 12 02 F6 | 	mov	arg01, result1
1092c     64 B1 B0 FD | 	call	#__system____builtin_atof
10930     FD 12 02 F6 | 	mov	arg01, result1
10934     00 14 06 F6 | 	mov	arg02, #0
10938     38 AE B0 FD | 	call	#__system___float_tointeger
1093c     0C 4E 05 F1 | 	add	fp, #12
10940     A7 FA 61 FC | 	wrlong	result1, fp
10944     04 4E 05 F1 | 	add	fp, #4
10948     A7 38 68 FC | 	wrlong	#28, fp
1094c     10 4E 85 F1 | 	sub	fp, #16
10950     34 00 90 FD | 	jmp	#LR__1307
10954                 | LR__1305
10954     0C 4E 05 F1 | 	add	fp, #12
10958     A7 00 68 FC | 	wrlong	#0, fp
1095c     0C 4E 85 F1 | 	sub	fp, #12
10960     A7 20 02 FB | 	rdlong	local02, fp
10964     10 4E 05 F1 | 	add	fp, #16
10968     A7 20 62 FC | 	wrlong	local02, fp
1096c     10 4E 85 F1 | 	sub	fp, #16
10970     14 00 90 FD | 	jmp	#LR__1307
10974                 | LR__1306
10974     0C 4E 05 F1 | 	add	fp, #12
10978     A7 00 68 FC | 	wrlong	#0, fp
1097c     04 4E 05 F1 | 	add	fp, #4
10980     A7 02 68 FC | 	wrlong	#1, fp
10984     10 4E 85 F1 | 	sub	fp, #16
10988                 | LR__1307
10988     0C 4E 05 F1 | 	add	fp, #12
1098c     A7 20 02 FB | 	rdlong	local02, fp
10990     0C 4E 85 F1 | 	sub	fp, #12
10994     A7 20 62 FC | 	wrlong	local02, fp
10998     10 4E 05 F1 | 	add	fp, #16
1099c     A7 20 02 FB | 	rdlong	local02, fp
109a0     08 4E 85 F1 | 	sub	fp, #8
109a4     A7 20 62 FC | 	wrlong	local02, fp
109a8     08 4E 85 F1 | 	sub	fp, #8
109ac     A7 12 02 F6 | 	mov	arg01, fp
109b0     14 8C BF FD | 	call	#_push
109b4     A7 F0 03 F6 | 	mov	ptra, fp
109b8     B2 00 A0 FD | 	call	#popregs_
109bc                 | _do_converttoint_ret
109bc     2D 00 64 FD | 	ret
109c0                 | 
109c0                 | ' 
109c0                 | ' function converttoint (t1 as expr_result) as integer
109c0                 | _converttoint
109c0     02 4A 05 F6 | 	mov	COUNT_, #2
109c4     A8 00 A0 FD | 	call	#pushregs_
109c8     09 1F 02 F6 | 	mov	local01, arg01
109cc                 | ' 
109cc                 | ' select case t1.result_type
109cc     08 1E 06 F1 | 	add	local01, #8
109d0     0F 21 02 FB | 	rdlong	local02, local01
109d4     08 1E 86 F1 | 	sub	local01, #8
109d8     1C 20 0E F2 | 	cmp	local02, #28 wz
109dc     24 00 90 AD |  if_e	jmp	#LR__1310
109e0     1D 20 0E F2 | 	cmp	local02, #29 wz
109e4     24 00 90 AD |  if_e	jmp	#LR__1311
109e8     1E 20 0E F2 | 	cmp	local02, #30 wz
109ec     24 00 90 AD |  if_e	jmp	#LR__1312
109f0     1F 20 0E F2 | 	cmp	local02, #31 wz
109f4     2C 00 90 AD |  if_e	jmp	#LR__1313
109f8     2B 20 0E F2 | 	cmp	local02, #43 wz
109fc     3C 00 90 AD |  if_e	jmp	#LR__1314
10a00     58 00 90 FD | 	jmp	#LR__1315
10a04                 | LR__1310
10a04     0F FB 01 FB | 	rdlong	result1, local01
10a08     54 00 90 FD | 	jmp	#LR__1316
10a0c                 | LR__1311
10a0c     0F FB 01 FB | 	rdlong	result1, local01
10a10     4C 00 90 FD | 	jmp	#LR__1316
10a14                 | LR__1312
10a14     0F 13 02 FB | 	rdlong	arg01, local01
10a18     01 14 06 F6 | 	mov	arg02, #1
10a1c     54 AD B0 FD | 	call	#__system___float_tointeger
10a20     3C 00 90 FD | 	jmp	#LR__1316
10a24                 | LR__1313
10a24     0F 13 02 FB | 	rdlong	arg01, local01
10a28     68 B0 B0 FD | 	call	#__system____builtin_atof
10a2c     FD 12 02 F6 | 	mov	arg01, result1
10a30     00 14 06 F6 | 	mov	arg02, #0
10a34     3C AD B0 FD | 	call	#__system___float_tointeger
10a38     24 00 90 FD | 	jmp	#LR__1316
10a3c                 | LR__1314
10a3c     0F 13 02 FB | 	rdlong	arg01, local01
10a40     F4 BB BF FD | 	call	#_convertstring
10a44     FD 12 02 F6 | 	mov	arg01, result1
10a48     48 B0 B0 FD | 	call	#__system____builtin_atof
10a4c     FD 12 02 F6 | 	mov	arg01, result1
10a50     00 14 06 F6 | 	mov	arg02, #0
10a54     1C AD B0 FD | 	call	#__system___float_tointeger
10a58     04 00 90 FD | 	jmp	#LR__1316
10a5c                 | LR__1315
10a5c     00 FA 05 F6 | 	mov	result1, #0
10a60                 | LR__1316
10a60     A7 F0 03 F6 | 	mov	ptra, fp
10a64     B2 00 A0 FD | 	call	#popregs_
10a68                 | _converttoint_ret
10a68     2D 00 64 FD | 	ret
10a6c                 | 
10a6c                 | ' 
10a6c                 | ' function converttofloat (t1 as expr_result) as single
10a6c                 | _converttofloat
10a6c     03 4A 05 F6 | 	mov	COUNT_, #3
10a70     A8 00 A0 FD | 	call	#pushregs_
10a74     09 1F 02 F6 | 	mov	local01, arg01
10a78                 | ' 
10a78                 | ' select case t1.result_type
10a78     08 1E 06 F1 | 	add	local01, #8
10a7c     0F 21 02 FB | 	rdlong	local02, local01
10a80     08 1E 86 F1 | 	sub	local01, #8
10a84     1C 20 0E F2 | 	cmp	local02, #28 wz
10a88     24 00 90 AD |  if_e	jmp	#LR__1320
10a8c     1D 20 0E F2 | 	cmp	local02, #29 wz
10a90     38 00 90 AD |  if_e	jmp	#LR__1321
10a94     1E 20 0E F2 | 	cmp	local02, #30 wz
10a98     3C 00 90 AD |  if_e	jmp	#LR__1322
10a9c     1F 20 0E F2 | 	cmp	local02, #31 wz
10aa0     3C 00 90 AD |  if_e	jmp	#LR__1323
10aa4     2B 20 0E F2 | 	cmp	local02, #43 wz
10aa8     40 00 90 AD |  if_e	jmp	#LR__1324
10aac     50 00 90 FD | 	jmp	#LR__1325
10ab0                 | LR__1320
10ab0     0F 13 02 FB | 	rdlong	arg01, local01
10ab4     09 13 52 F6 | 	abs	arg01, arg01 wc
10ab8     1F 22 C6 C9 |  if_b	decod	local03, #31
10abc     00 22 06 36 |  if_ae	mov	local03, #0
10ac0     E4 A3 B0 FD | 	call	#__system___float_fromuns
10ac4     11 FB 61 F5 | 	xor	result1, local03
10ac8     38 00 90 FD | 	jmp	#LR__1326
10acc                 | LR__1321
10acc     0F 13 02 FB | 	rdlong	arg01, local01
10ad0     D4 A3 B0 FD | 	call	#__system___float_fromuns
10ad4     2C 00 90 FD | 	jmp	#LR__1326
10ad8                 | LR__1322
10ad8     0F FB 01 FB | 	rdlong	result1, local01
10adc     24 00 90 FD | 	jmp	#LR__1326
10ae0                 | LR__1323
10ae0     0F 13 02 FB | 	rdlong	arg01, local01
10ae4     AC AF B0 FD | 	call	#__system____builtin_atof
10ae8     18 00 90 FD | 	jmp	#LR__1326
10aec                 | LR__1324
10aec     0F 13 02 FB | 	rdlong	arg01, local01
10af0     44 BB BF FD | 	call	#_convertstring
10af4     FD 12 02 F6 | 	mov	arg01, result1
10af8     98 AF B0 FD | 	call	#__system____builtin_atof
10afc     04 00 90 FD | 	jmp	#LR__1326
10b00                 | LR__1325
10b00     00 FA 05 F6 | 	mov	result1, #0
10b04                 | LR__1326
10b04     A7 F0 03 F6 | 	mov	ptra, fp
10b08     B2 00 A0 FD | 	call	#popregs_
10b0c                 | _converttofloat_ret
10b0c     2D 00 64 FD | 	ret
10b10                 | 
10b10                 | ' 
10b10                 | ' sub do_rnd
10b10                 | _do_rnd
10b10     01 4A 05 F6 | 	mov	COUNT_, #1
10b14     A8 00 A0 FD | 	call	#pushregs_
10b18     10 F0 07 F1 | 	add	ptra, #16
10b1c     69 00 00 FF 
10b20     54 E4 05 F1 | 	add	objptr, ##53844
10b24     F2 1E 02 FB | 	rdlong	local01, objptr
10b28     0F 17 02 F6 | 	mov	arg03, local01
10b2c     01 16 66 F0 | 	shl	arg03, #1
10b30     0F 17 02 F1 | 	add	arg03, local01
10b34     02 16 66 F0 | 	shl	arg03, #2
10b38     03 00 00 FF 
10b3c     04 E4 85 F1 | 	sub	objptr, ##1540
10b40     F2 16 02 F1 | 	add	arg03, objptr
10b44     0B 17 02 FB | 	rdlong	arg03, arg03
10b48     0C 4E 05 F1 | 	add	fp, #12
10b4c     A7 16 62 FC | 	wrlong	arg03, fp
10b50                 | ' 
10b50                 | ' numpar=compiledline(lineptr_e).result.uresult
10b50                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
10b50     0C 4E 85 F1 | 	sub	fp, #12
10b54     02 16 16 F2 | 	cmp	arg03, #2 wc
10b58     66 00 00 FF 
10b5c     50 E4 85 F1 | 	sub	objptr, ##52304
10b60     3C 00 90 CD |  if_b	jmp	#LR__1330
10b64     00 12 06 F6 | 	mov	arg01, #0
10b68     58 D5 B0 FD | 	call	#__system___getiolock_0417
10b6c     FD 12 02 F6 | 	mov	arg01, result1
10b70     54 7D B0 FD | 	call	#__system___lockmem
10b74     40 01 00 FF 
10b78     3E 15 06 F6 | 	mov	arg02, ##@LR__4587
10b7c     00 12 06 F6 | 	mov	arg01, #0
10b80     00 16 06 F6 | 	mov	arg03, #0
10b84     30 8A B0 FD | 	call	#__system___basic_print_string
10b88     00 12 06 F6 | 	mov	arg01, #0
10b8c     34 D5 B0 FD | 	call	#__system___getiolock_0417
10b90     FD 00 68 FC | 	wrlong	#0, result1
10b94     27 12 06 F6 | 	mov	arg01, #39
10b98     08 48 B0 FD | 	call	#_printerror
10b9c     2C 01 90 FD | 	jmp	#LR__1337
10ba0                 | LR__1330
10ba0                 | ' if numpar=0 then
10ba0     0C 4E 05 F1 | 	add	fp, #12
10ba4     A7 FE 09 FB | 	rdlong	result3, fp wz
10ba8     0C 4E 85 F1 | 	sub	fp, #12
10bac     20 00 90 5D |  if_ne	jmp	#LR__1331
10bb0     08 4E 05 F1 | 	add	fp, #8
10bb4     A7 3A 68 FC | 	wrlong	#29, fp
10bb8     08 4E 85 F1 | 	sub	fp, #8
10bbc     1B FA 61 FD | 	getrnd	result1
10bc0     A7 FA 61 FC | 	wrlong	result1, fp
10bc4     A7 12 02 F6 | 	mov	arg01, fp
10bc8     FC 89 BF FD | 	call	#_push
10bcc     FC 00 90 FD | 	jmp	#LR__1336
10bd0                 | LR__1331
10bd0     5C 89 BF FD | 	call	#_pop
10bd4     A7 FA 61 FC | 	wrlong	result1, fp
10bd8     04 4E 05 F1 | 	add	fp, #4
10bdc     A7 FC 61 FC | 	wrlong	result2, fp
10be0     04 4E 05 F1 | 	add	fp, #4
10be4     A7 FE 61 FC | 	wrlong	result3, fp
10be8                 | '   t1=pop()
10be8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
10be8     08 4E 85 F1 | 	sub	fp, #8
10bec     1C FE 0D F2 | 	cmp	result3, #28 wz
10bf0     08 4E 05 51 |  if_ne	add	fp, #8
10bf4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10bf8     08 4E 85 51 |  if_ne	sub	fp, #8
10bfc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10c00     2C 00 90 5D |  if_ne	jmp	#LR__1332
10c04     1B FA 61 FD | 	getrnd	result1
10c08     A7 1E 02 FB | 	rdlong	local01, fp
10c0c     0F FB 11 FD | 	qdiv	result1, local01
10c10     A7 12 02 F6 | 	mov	arg01, fp
10c14     19 1E 62 FD | 	getqy	local01
10c18     A7 1E 62 FC | 	wrlong	local01, fp
10c1c     08 4E 05 F1 | 	add	fp, #8
10c20     A7 3A 68 FC | 	wrlong	#29, fp
10c24     08 4E 85 F1 | 	sub	fp, #8
10c28     9C 89 BF FD | 	call	#_push
10c2c     9C 00 90 FD | 	jmp	#LR__1335
10c30                 | LR__1332
10c30     08 4E 05 F1 | 	add	fp, #8
10c34     A7 1E 02 FB | 	rdlong	local01, fp
10c38     08 4E 85 F1 | 	sub	fp, #8
10c3c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c40     48 00 90 5D |  if_ne	jmp	#LR__1333
10c44     A7 12 02 FB | 	rdlong	arg01, fp
10c48     00 C0 24 FF 
10c4c     00 14 06 F6 | 	mov	arg02, ##1233125376
10c50     5C A8 B0 FD | 	call	#__system___float_div
10c54     FD 1E 02 F6 | 	mov	local01, result1
10c58     1B 12 62 FD | 	getrnd	arg01
10c5c     74 13 06 F4 | 	bitl	arg01, #372
10c60     44 A2 B0 FD | 	call	#__system___float_fromuns
10c64     FD 14 02 F6 | 	mov	arg02, result1
10c68     0F 13 02 F6 | 	mov	arg01, local01
10c6c     3C A6 B0 FD | 	call	#__system___float_mul
10c70     A7 FA 61 FC | 	wrlong	result1, fp
10c74     08 4E 05 F1 | 	add	fp, #8
10c78     A7 3C 68 FC | 	wrlong	#30, fp
10c7c     08 4E 85 F1 | 	sub	fp, #8
10c80     A7 12 02 F6 | 	mov	arg01, fp
10c84     40 89 BF FD | 	call	#_push
10c88     40 00 90 FD | 	jmp	#LR__1334
10c8c                 | LR__1333
10c8c                 | '     print "rnd: "; : printerror(40) 
10c8c     00 12 06 F6 | 	mov	arg01, #0
10c90     30 D4 B0 FD | 	call	#__system___getiolock_0417
10c94     FD 12 02 F6 | 	mov	arg01, result1
10c98     2C 7C B0 FD | 	call	#__system___lockmem
10c9c     40 01 00 FF 
10ca0     44 15 06 F6 | 	mov	arg02, ##@LR__4588
10ca4     00 12 06 F6 | 	mov	arg01, #0
10ca8     00 16 06 F6 | 	mov	arg03, #0
10cac     08 89 B0 FD | 	call	#__system___basic_print_string
10cb0     00 12 06 F6 | 	mov	arg01, #0
10cb4     0C D4 B0 FD | 	call	#__system___getiolock_0417
10cb8     FD 00 68 FC | 	wrlong	#0, result1
10cbc     28 12 06 F6 | 	mov	arg01, #40
10cc0     E0 46 B0 FD | 	call	#_printerror
10cc4     A7 12 02 F6 | 	mov	arg01, fp
10cc8     FC 88 BF FD | 	call	#_push
10ccc                 | LR__1334
10ccc                 | LR__1335
10ccc                 | LR__1336
10ccc                 | LR__1337
10ccc     A7 F0 03 F6 | 	mov	ptra, fp
10cd0     B2 00 A0 FD | 	call	#popregs_
10cd4                 | _do_rnd_ret
10cd4     2D 00 64 FD | 	ret
10cd8                 | 
10cd8                 | ' 
10cd8                 | ' sub do_sin
10cd8                 | _do_sin
10cd8     01 4A 05 F6 | 	mov	COUNT_, #1
10cdc     A8 00 A0 FD | 	call	#pushregs_
10ce0     10 F0 07 F1 | 	add	ptra, #16
10ce4     69 00 00 FF 
10ce8     54 E4 05 F1 | 	add	objptr, ##53844
10cec     F2 1E 02 FB | 	rdlong	local01, objptr
10cf0     0F 17 02 F6 | 	mov	arg03, local01
10cf4     01 16 66 F0 | 	shl	arg03, #1
10cf8     0F 17 02 F1 | 	add	arg03, local01
10cfc     02 16 66 F0 | 	shl	arg03, #2
10d00     03 00 00 FF 
10d04     04 E4 85 F1 | 	sub	objptr, ##1540
10d08     F2 16 02 F1 | 	add	arg03, objptr
10d0c     0B 17 02 FB | 	rdlong	arg03, arg03
10d10     0C 4E 05 F1 | 	add	fp, #12
10d14     A7 16 62 FC | 	wrlong	arg03, fp
10d18                 | ' 
10d18                 | ' numpar=compiledline(lineptr_e).result.uresult
10d18                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
10d18     0C 4E 85 F1 | 	sub	fp, #12
10d1c     02 16 16 F2 | 	cmp	arg03, #2 wc
10d20     66 00 00 FF 
10d24     50 E4 85 F1 | 	sub	objptr, ##52304
10d28     0C 4E 05 C1 |  if_b	add	fp, #12
10d2c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10d30     0C 4E 85 C1 |  if_b	sub	fp, #12
10d34     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1340
10d38     00 12 06 F6 | 	mov	arg01, #0
10d3c     84 D3 B0 FD | 	call	#__system___getiolock_0417
10d40     FD 12 02 F6 | 	mov	arg01, result1
10d44     80 7B B0 FD | 	call	#__system___lockmem
10d48     40 01 00 FF 
10d4c     4A 15 06 F6 | 	mov	arg02, ##@LR__4589
10d50     00 12 06 F6 | 	mov	arg01, #0
10d54     00 16 06 F6 | 	mov	arg03, #0
10d58     5C 88 B0 FD | 	call	#__system___basic_print_string
10d5c     00 12 06 F6 | 	mov	arg01, #0
10d60     60 D3 B0 FD | 	call	#__system___getiolock_0417
10d64     FD 00 68 FC | 	wrlong	#0, result1
10d68     27 12 06 F6 | 	mov	arg01, #39
10d6c     34 46 B0 FD | 	call	#_printerror
10d70     68 00 90 FD | 	jmp	#LR__1341
10d74                 | LR__1340
10d74     B8 87 BF FD | 	call	#_pop
10d78     A7 FA 61 FC | 	wrlong	result1, fp
10d7c     04 4E 05 F1 | 	add	fp, #4
10d80     A7 FC 61 FC | 	wrlong	result2, fp
10d84     04 4E 05 F1 | 	add	fp, #4
10d88     A7 FE 61 FC | 	wrlong	result3, fp
10d8c     08 4E 85 F1 | 	sub	fp, #8
10d90     87 24 20 FF 
10d94     DB 1F 06 F6 | 	mov	local01, ##1078530011
10d98     A7 12 02 F6 | 	mov	arg01, fp
10d9c     CC FC BF FD | 	call	#_converttofloat
10da0     FD 14 02 F6 | 	mov	arg02, result1
10da4     0F 13 02 F6 | 	mov	arg01, local01
10da8     00 A5 B0 FD | 	call	#__system___float_mul
10dac     FD 12 02 F6 | 	mov	arg01, result1
10db0     00 9A 21 FF 
10db4     00 14 06 F6 | 	mov	arg02, ##1127481344
10db8     F4 A6 B0 FD | 	call	#__system___float_div
10dbc     FD 12 02 F6 | 	mov	arg01, result1
10dc0     24 AE B0 FD | 	call	#__system____builtin_sinf
10dc4     A7 FA 61 FC | 	wrlong	result1, fp
10dc8     08 4E 05 F1 | 	add	fp, #8
10dcc     A7 3C 68 FC | 	wrlong	#30, fp
10dd0     08 4E 85 F1 | 	sub	fp, #8
10dd4     A7 12 02 F6 | 	mov	arg01, fp
10dd8     EC 87 BF FD | 	call	#_push
10ddc                 | LR__1341
10ddc     A7 F0 03 F6 | 	mov	ptra, fp
10de0     B2 00 A0 FD | 	call	#popregs_
10de4                 | _do_sin_ret
10de4     2D 00 64 FD | 	ret
10de8                 | 
10de8                 | ' 
10de8                 | ' sub do_cos
10de8                 | _do_cos
10de8     01 4A 05 F6 | 	mov	COUNT_, #1
10dec     A8 00 A0 FD | 	call	#pushregs_
10df0     10 F0 07 F1 | 	add	ptra, #16
10df4     69 00 00 FF 
10df8     54 E4 05 F1 | 	add	objptr, ##53844
10dfc     F2 1E 02 FB | 	rdlong	local01, objptr
10e00     0F 17 02 F6 | 	mov	arg03, local01
10e04     01 16 66 F0 | 	shl	arg03, #1
10e08     0F 17 02 F1 | 	add	arg03, local01
10e0c     02 16 66 F0 | 	shl	arg03, #2
10e10     03 00 00 FF 
10e14     04 E4 85 F1 | 	sub	objptr, ##1540
10e18     F2 16 02 F1 | 	add	arg03, objptr
10e1c     0B 17 02 FB | 	rdlong	arg03, arg03
10e20     0C 4E 05 F1 | 	add	fp, #12
10e24     A7 16 62 FC | 	wrlong	arg03, fp
10e28                 | ' 
10e28                 | ' numpar=compiledline(lineptr_e).result.uresult
10e28                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
10e28     0C 4E 85 F1 | 	sub	fp, #12
10e2c     02 16 16 F2 | 	cmp	arg03, #2 wc
10e30     66 00 00 FF 
10e34     50 E4 85 F1 | 	sub	objptr, ##52304
10e38     0C 4E 05 C1 |  if_b	add	fp, #12
10e3c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10e40     0C 4E 85 C1 |  if_b	sub	fp, #12
10e44     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1350
10e48     00 12 06 F6 | 	mov	arg01, #0
10e4c     74 D2 B0 FD | 	call	#__system___getiolock_0417
10e50     FD 12 02 F6 | 	mov	arg01, result1
10e54     70 7A B0 FD | 	call	#__system___lockmem
10e58     40 01 00 FF 
10e5c     50 15 06 F6 | 	mov	arg02, ##@LR__4590
10e60     00 12 06 F6 | 	mov	arg01, #0
10e64     00 16 06 F6 | 	mov	arg03, #0
10e68     4C 87 B0 FD | 	call	#__system___basic_print_string
10e6c     00 12 06 F6 | 	mov	arg01, #0
10e70     50 D2 B0 FD | 	call	#__system___getiolock_0417
10e74     FD 00 68 FC | 	wrlong	#0, result1
10e78     27 12 06 F6 | 	mov	arg01, #39
10e7c     24 45 B0 FD | 	call	#_printerror
10e80     7C 00 90 FD | 	jmp	#LR__1351
10e84                 | LR__1350
10e84     A8 86 BF FD | 	call	#_pop
10e88     A7 FA 61 FC | 	wrlong	result1, fp
10e8c     04 4E 05 F1 | 	add	fp, #4
10e90     A7 FC 61 FC | 	wrlong	result2, fp
10e94     04 4E 05 F1 | 	add	fp, #4
10e98     A7 FE 61 FC | 	wrlong	result3, fp
10e9c     08 4E 85 F1 | 	sub	fp, #8
10ea0     87 24 20 FF 
10ea4     DB 1F 06 F6 | 	mov	local01, ##1078530011
10ea8     A7 12 02 F6 | 	mov	arg01, fp
10eac     BC FB BF FD | 	call	#_converttofloat
10eb0     FD 14 02 F6 | 	mov	arg02, result1
10eb4     0F 13 02 F6 | 	mov	arg01, local01
10eb8     F0 A3 B0 FD | 	call	#__system___float_mul
10ebc     FD 12 02 F6 | 	mov	arg01, result1
10ec0     00 9A 21 FF 
10ec4     00 14 06 F6 | 	mov	arg02, ##1127481344
10ec8     E4 A5 B0 FD | 	call	#__system___float_div
10ecc     FD 14 02 F6 | 	mov	arg02, result1
10ed0     87 E4 1F FF 
10ed4     DB 13 06 F6 | 	mov	arg01, ##1070141403
10ed8     1F 14 E6 F4 | 	bitnot	arg02, #31
10edc     FC 9F B0 FD | 	call	#__system___float_add
10ee0     FD 12 02 F6 | 	mov	arg01, result1
10ee4     00 AD B0 FD | 	call	#__system____builtin_sinf
10ee8     A7 FA 61 FC | 	wrlong	result1, fp
10eec     08 4E 05 F1 | 	add	fp, #8
10ef0     A7 3C 68 FC | 	wrlong	#30, fp
10ef4     08 4E 85 F1 | 	sub	fp, #8
10ef8     A7 12 02 F6 | 	mov	arg01, fp
10efc     C8 86 BF FD | 	call	#_push
10f00                 | LR__1351
10f00     A7 F0 03 F6 | 	mov	ptra, fp
10f04     B2 00 A0 FD | 	call	#popregs_
10f08                 | _do_cos_ret
10f08     2D 00 64 FD | 	ret
10f0c                 | 
10f0c                 | ' 
10f0c                 | ' sub do_tan
10f0c                 | _do_tan
10f0c     01 4A 05 F6 | 	mov	COUNT_, #1
10f10     A8 00 A0 FD | 	call	#pushregs_
10f14     10 F0 07 F1 | 	add	ptra, #16
10f18     69 00 00 FF 
10f1c     54 E4 05 F1 | 	add	objptr, ##53844
10f20     F2 1E 02 FB | 	rdlong	local01, objptr
10f24     0F 17 02 F6 | 	mov	arg03, local01
10f28     01 16 66 F0 | 	shl	arg03, #1
10f2c     0F 17 02 F1 | 	add	arg03, local01
10f30     02 16 66 F0 | 	shl	arg03, #2
10f34     03 00 00 FF 
10f38     04 E4 85 F1 | 	sub	objptr, ##1540
10f3c     F2 16 02 F1 | 	add	arg03, objptr
10f40     0B 17 02 FB | 	rdlong	arg03, arg03
10f44     0C 4E 05 F1 | 	add	fp, #12
10f48     A7 16 62 FC | 	wrlong	arg03, fp
10f4c                 | ' 
10f4c                 | ' numpar=compiledline(lineptr_e).result.uresult
10f4c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
10f4c     0C 4E 85 F1 | 	sub	fp, #12
10f50     02 16 16 F2 | 	cmp	arg03, #2 wc
10f54     66 00 00 FF 
10f58     50 E4 85 F1 | 	sub	objptr, ##52304
10f5c     0C 4E 05 C1 |  if_b	add	fp, #12
10f60     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10f64     0C 4E 85 C1 |  if_b	sub	fp, #12
10f68     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1360
10f6c     00 12 06 F6 | 	mov	arg01, #0
10f70     50 D1 B0 FD | 	call	#__system___getiolock_0417
10f74     FD 12 02 F6 | 	mov	arg01, result1
10f78     4C 79 B0 FD | 	call	#__system___lockmem
10f7c     40 01 00 FF 
10f80     56 15 06 F6 | 	mov	arg02, ##@LR__4591
10f84     00 12 06 F6 | 	mov	arg01, #0
10f88     00 16 06 F6 | 	mov	arg03, #0
10f8c     28 86 B0 FD | 	call	#__system___basic_print_string
10f90     00 12 06 F6 | 	mov	arg01, #0
10f94     2C D1 B0 FD | 	call	#__system___getiolock_0417
10f98     FD 00 68 FC | 	wrlong	#0, result1
10f9c     27 12 06 F6 | 	mov	arg01, #39
10fa0     00 44 B0 FD | 	call	#_printerror
10fa4     68 00 90 FD | 	jmp	#LR__1361
10fa8                 | LR__1360
10fa8     84 85 BF FD | 	call	#_pop
10fac     A7 FA 61 FC | 	wrlong	result1, fp
10fb0     04 4E 05 F1 | 	add	fp, #4
10fb4     A7 FC 61 FC | 	wrlong	result2, fp
10fb8     04 4E 05 F1 | 	add	fp, #4
10fbc     A7 FE 61 FC | 	wrlong	result3, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4     87 24 20 FF 
10fc8     DB 1F 06 F6 | 	mov	local01, ##1078530011
10fcc     A7 12 02 F6 | 	mov	arg01, fp
10fd0     98 FA BF FD | 	call	#_converttofloat
10fd4     FD 14 02 F6 | 	mov	arg02, result1
10fd8     0F 13 02 F6 | 	mov	arg01, local01
10fdc     CC A2 B0 FD | 	call	#__system___float_mul
10fe0     FD 12 02 F6 | 	mov	arg01, result1
10fe4     00 9A 21 FF 
10fe8     00 14 06 F6 | 	mov	arg02, ##1127481344
10fec     C0 A4 B0 FD | 	call	#__system___float_div
10ff0     FD 12 02 F6 | 	mov	arg01, result1
10ff4     3C AD B0 FD | 	call	#__system____builtin_tanf
10ff8     A7 FA 61 FC | 	wrlong	result1, fp
10ffc     08 4E 05 F1 | 	add	fp, #8
11000     A7 3C 68 FC | 	wrlong	#30, fp
11004     08 4E 85 F1 | 	sub	fp, #8
11008     A7 12 02 F6 | 	mov	arg01, fp
1100c     B8 85 BF FD | 	call	#_push
11010                 | LR__1361
11010     A7 F0 03 F6 | 	mov	ptra, fp
11014     B2 00 A0 FD | 	call	#popregs_
11018                 | _do_tan_ret
11018     2D 00 64 FD | 	ret
1101c                 | 
1101c                 | ' 
1101c                 | ' sub do_asin
1101c                 | _do_asin
1101c     01 4A 05 F6 | 	mov	COUNT_, #1
11020     A8 00 A0 FD | 	call	#pushregs_
11024     10 F0 07 F1 | 	add	ptra, #16
11028     69 00 00 FF 
1102c     54 E4 05 F1 | 	add	objptr, ##53844
11030     F2 1E 02 FB | 	rdlong	local01, objptr
11034     0F 17 02 F6 | 	mov	arg03, local01
11038     01 16 66 F0 | 	shl	arg03, #1
1103c     0F 17 02 F1 | 	add	arg03, local01
11040     02 16 66 F0 | 	shl	arg03, #2
11044     03 00 00 FF 
11048     04 E4 85 F1 | 	sub	objptr, ##1540
1104c     F2 16 02 F1 | 	add	arg03, objptr
11050     0B 17 02 FB | 	rdlong	arg03, arg03
11054     0C 4E 05 F1 | 	add	fp, #12
11058     A7 16 62 FC | 	wrlong	arg03, fp
1105c                 | ' 
1105c                 | ' numpar=compiledline(lineptr_e).result.uresult
1105c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
1105c     0C 4E 85 F1 | 	sub	fp, #12
11060     02 16 16 F2 | 	cmp	arg03, #2 wc
11064     66 00 00 FF 
11068     50 E4 85 F1 | 	sub	objptr, ##52304
1106c     0C 4E 05 C1 |  if_b	add	fp, #12
11070     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11074     0C 4E 85 C1 |  if_b	sub	fp, #12
11078     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1370
1107c     00 12 06 F6 | 	mov	arg01, #0
11080     40 D0 B0 FD | 	call	#__system___getiolock_0417
11084     FD 12 02 F6 | 	mov	arg01, result1
11088     3C 78 B0 FD | 	call	#__system___lockmem
1108c     40 01 00 FF 
11090     5C 15 06 F6 | 	mov	arg02, ##@LR__4592
11094     00 12 06 F6 | 	mov	arg01, #0
11098     00 16 06 F6 | 	mov	arg03, #0
1109c     18 85 B0 FD | 	call	#__system___basic_print_string
110a0     00 12 06 F6 | 	mov	arg01, #0
110a4     1C D0 B0 FD | 	call	#__system___getiolock_0417
110a8     FD 00 68 FC | 	wrlong	#0, result1
110ac     27 12 06 F6 | 	mov	arg01, #39
110b0     F0 42 B0 FD | 	call	#_printerror
110b4     68 00 90 FD | 	jmp	#LR__1371
110b8                 | LR__1370
110b8     74 84 BF FD | 	call	#_pop
110bc     FF 1E 02 F6 | 	mov	local01, result3
110c0     A7 FA 61 FC | 	wrlong	result1, fp
110c4     04 4E 05 F1 | 	add	fp, #4
110c8     A7 FC 61 FC | 	wrlong	result2, fp
110cc     04 4E 05 F1 | 	add	fp, #4
110d0     A7 1E 62 FC | 	wrlong	local01, fp
110d4     08 4E 85 F1 | 	sub	fp, #8
110d8     A7 12 02 F6 | 	mov	arg01, fp
110dc     8C F9 BF FD | 	call	#_converttofloat
110e0     FD 12 02 F6 | 	mov	arg01, result1
110e4     94 AC B0 FD | 	call	#__system____builtin_asinf
110e8     FD 12 02 F6 | 	mov	arg01, result1
110ec     00 9A 21 FF 
110f0     00 14 06 F6 | 	mov	arg02, ##1127481344
110f4     B4 A1 B0 FD | 	call	#__system___float_mul
110f8     FD 12 02 F6 | 	mov	arg01, result1
110fc     87 24 20 FF 
11100     DB 15 06 F6 | 	mov	arg02, ##1078530011
11104     A8 A3 B0 FD | 	call	#__system___float_div
11108     A7 FA 61 FC | 	wrlong	result1, fp
1110c     08 4E 05 F1 | 	add	fp, #8
11110     A7 3C 68 FC | 	wrlong	#30, fp
11114     08 4E 85 F1 | 	sub	fp, #8
11118     A7 12 02 F6 | 	mov	arg01, fp
1111c     A8 84 BF FD | 	call	#_push
11120                 | LR__1371
11120     A7 F0 03 F6 | 	mov	ptra, fp
11124     B2 00 A0 FD | 	call	#popregs_
11128                 | _do_asin_ret
11128     2D 00 64 FD | 	ret
1112c                 | 
1112c                 | ' 
1112c                 | ' sub do_acos
1112c                 | _do_acos
1112c     01 4A 05 F6 | 	mov	COUNT_, #1
11130     A8 00 A0 FD | 	call	#pushregs_
11134     10 F0 07 F1 | 	add	ptra, #16
11138     69 00 00 FF 
1113c     54 E4 05 F1 | 	add	objptr, ##53844
11140     F2 1E 02 FB | 	rdlong	local01, objptr
11144     0F 17 02 F6 | 	mov	arg03, local01
11148     01 16 66 F0 | 	shl	arg03, #1
1114c     0F 17 02 F1 | 	add	arg03, local01
11150     02 16 66 F0 | 	shl	arg03, #2
11154     03 00 00 FF 
11158     04 E4 85 F1 | 	sub	objptr, ##1540
1115c     F2 16 02 F1 | 	add	arg03, objptr
11160     0B 17 02 FB | 	rdlong	arg03, arg03
11164     0C 4E 05 F1 | 	add	fp, #12
11168     A7 16 62 FC | 	wrlong	arg03, fp
1116c                 | ' 
1116c                 | ' numpar=compiledline(lineptr_e).result.uresult
1116c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
1116c     0C 4E 85 F1 | 	sub	fp, #12
11170     02 16 16 F2 | 	cmp	arg03, #2 wc
11174     66 00 00 FF 
11178     50 E4 85 F1 | 	sub	objptr, ##52304
1117c     0C 4E 05 C1 |  if_b	add	fp, #12
11180     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11184     0C 4E 85 C1 |  if_b	sub	fp, #12
11188     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
1118c     00 12 06 F6 | 	mov	arg01, #0
11190     30 CF B0 FD | 	call	#__system___getiolock_0417
11194     FD 12 02 F6 | 	mov	arg01, result1
11198     2C 77 B0 FD | 	call	#__system___lockmem
1119c     40 01 00 FF 
111a0     63 15 06 F6 | 	mov	arg02, ##@LR__4593
111a4     00 12 06 F6 | 	mov	arg01, #0
111a8     00 16 06 F6 | 	mov	arg03, #0
111ac     08 84 B0 FD | 	call	#__system___basic_print_string
111b0     00 12 06 F6 | 	mov	arg01, #0
111b4     0C CF B0 FD | 	call	#__system___getiolock_0417
111b8     FD 00 68 FC | 	wrlong	#0, result1
111bc     27 12 06 F6 | 	mov	arg01, #39
111c0     E0 41 B0 FD | 	call	#_printerror
111c4     68 00 90 FD | 	jmp	#LR__1381
111c8                 | LR__1380
111c8     64 83 BF FD | 	call	#_pop
111cc     FF 1E 02 F6 | 	mov	local01, result3
111d0     A7 FA 61 FC | 	wrlong	result1, fp
111d4     04 4E 05 F1 | 	add	fp, #4
111d8     A7 FC 61 FC | 	wrlong	result2, fp
111dc     04 4E 05 F1 | 	add	fp, #4
111e0     A7 1E 62 FC | 	wrlong	local01, fp
111e4     08 4E 85 F1 | 	sub	fp, #8
111e8     A7 12 02 F6 | 	mov	arg01, fp
111ec     7C F8 BF FD | 	call	#_converttofloat
111f0     FD 12 02 F6 | 	mov	arg01, result1
111f4     D0 AB B0 FD | 	call	#__system____builtin_acosf
111f8     FD 12 02 F6 | 	mov	arg01, result1
111fc     00 9A 21 FF 
11200     00 14 06 F6 | 	mov	arg02, ##1127481344
11204     A4 A0 B0 FD | 	call	#__system___float_mul
11208     FD 12 02 F6 | 	mov	arg01, result1
1120c     87 24 20 FF 
11210     DB 15 06 F6 | 	mov	arg02, ##1078530011
11214     98 A2 B0 FD | 	call	#__system___float_div
11218     A7 FA 61 FC | 	wrlong	result1, fp
1121c     08 4E 05 F1 | 	add	fp, #8
11220     A7 3C 68 FC | 	wrlong	#30, fp
11224     08 4E 85 F1 | 	sub	fp, #8
11228     A7 12 02 F6 | 	mov	arg01, fp
1122c     98 83 BF FD | 	call	#_push
11230                 | LR__1381
11230     A7 F0 03 F6 | 	mov	ptra, fp
11234     B2 00 A0 FD | 	call	#popregs_
11238                 | _do_acos_ret
11238     2D 00 64 FD | 	ret
1123c                 | 
1123c                 | ' 
1123c                 | ' sub do_atn
1123c                 | _do_atn
1123c     01 4A 05 F6 | 	mov	COUNT_, #1
11240     A8 00 A0 FD | 	call	#pushregs_
11244     10 F0 07 F1 | 	add	ptra, #16
11248     69 00 00 FF 
1124c     54 E4 05 F1 | 	add	objptr, ##53844
11250     F2 1E 02 FB | 	rdlong	local01, objptr
11254     0F 17 02 F6 | 	mov	arg03, local01
11258     01 16 66 F0 | 	shl	arg03, #1
1125c     0F 17 02 F1 | 	add	arg03, local01
11260     02 16 66 F0 | 	shl	arg03, #2
11264     03 00 00 FF 
11268     04 E4 85 F1 | 	sub	objptr, ##1540
1126c     F2 16 02 F1 | 	add	arg03, objptr
11270     0B 17 02 FB | 	rdlong	arg03, arg03
11274     0C 4E 05 F1 | 	add	fp, #12
11278     A7 16 62 FC | 	wrlong	arg03, fp
1127c                 | ' 
1127c                 | ' numpar=compiledline(lineptr_e).result.uresult
1127c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
1127c     0C 4E 85 F1 | 	sub	fp, #12
11280     02 16 16 F2 | 	cmp	arg03, #2 wc
11284     66 00 00 FF 
11288     50 E4 85 F1 | 	sub	objptr, ##52304
1128c     0C 4E 05 C1 |  if_b	add	fp, #12
11290     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11294     0C 4E 85 C1 |  if_b	sub	fp, #12
11298     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1390
1129c     00 12 06 F6 | 	mov	arg01, #0
112a0     20 CE B0 FD | 	call	#__system___getiolock_0417
112a4     FD 12 02 F6 | 	mov	arg01, result1
112a8     1C 76 B0 FD | 	call	#__system___lockmem
112ac     40 01 00 FF 
112b0     6A 15 06 F6 | 	mov	arg02, ##@LR__4594
112b4     00 12 06 F6 | 	mov	arg01, #0
112b8     00 16 06 F6 | 	mov	arg03, #0
112bc     F8 82 B0 FD | 	call	#__system___basic_print_string
112c0     00 12 06 F6 | 	mov	arg01, #0
112c4     FC CD B0 FD | 	call	#__system___getiolock_0417
112c8     FD 00 68 FC | 	wrlong	#0, result1
112cc     27 12 06 F6 | 	mov	arg01, #39
112d0     D0 40 B0 FD | 	call	#_printerror
112d4     70 00 90 FD | 	jmp	#LR__1391
112d8                 | LR__1390
112d8     54 82 BF FD | 	call	#_pop
112dc     FF 1E 02 F6 | 	mov	local01, result3
112e0     A7 FA 61 FC | 	wrlong	result1, fp
112e4     04 4E 05 F1 | 	add	fp, #4
112e8     A7 FC 61 FC | 	wrlong	result2, fp
112ec     04 4E 05 F1 | 	add	fp, #4
112f0     A7 1E 62 FC | 	wrlong	local01, fp
112f4     08 4E 85 F1 | 	sub	fp, #8
112f8     A7 12 02 F6 | 	mov	arg01, fp
112fc     6C F7 BF FD | 	call	#_converttofloat
11300     FD 12 02 F6 | 	mov	arg01, result1
11304     00 C0 1F FF 
11308     00 14 06 F6 | 	mov	arg02, ##1065353216
1130c     04 AB B0 FD | 	call	#__system____builtin_atan2f
11310     FD 12 02 F6 | 	mov	arg01, result1
11314     00 9A 21 FF 
11318     00 14 06 F6 | 	mov	arg02, ##1127481344
1131c     8C 9F B0 FD | 	call	#__system___float_mul
11320     FD 12 02 F6 | 	mov	arg01, result1
11324     87 24 20 FF 
11328     DB 15 06 F6 | 	mov	arg02, ##1078530011
1132c     80 A1 B0 FD | 	call	#__system___float_div
11330     A7 FA 61 FC | 	wrlong	result1, fp
11334     08 4E 05 F1 | 	add	fp, #8
11338     A7 3C 68 FC | 	wrlong	#30, fp
1133c     08 4E 85 F1 | 	sub	fp, #8
11340     A7 12 02 F6 | 	mov	arg01, fp
11344     80 82 BF FD | 	call	#_push
11348                 | LR__1391
11348     A7 F0 03 F6 | 	mov	ptra, fp
1134c     B2 00 A0 FD | 	call	#popregs_
11350                 | _do_atn_ret
11350     2D 00 64 FD | 	ret
11354                 | 
11354                 | ' 
11354                 | ' sub do_sqr
11354                 | _do_sqr
11354     01 4A 05 F6 | 	mov	COUNT_, #1
11358     A8 00 A0 FD | 	call	#pushregs_
1135c     10 F0 07 F1 | 	add	ptra, #16
11360     69 00 00 FF 
11364     54 E4 05 F1 | 	add	objptr, ##53844
11368     F2 1E 02 FB | 	rdlong	local01, objptr
1136c     0F 17 02 F6 | 	mov	arg03, local01
11370     01 16 66 F0 | 	shl	arg03, #1
11374     0F 17 02 F1 | 	add	arg03, local01
11378     02 16 66 F0 | 	shl	arg03, #2
1137c     03 00 00 FF 
11380     04 E4 85 F1 | 	sub	objptr, ##1540
11384     F2 16 02 F1 | 	add	arg03, objptr
11388     0B 17 02 FB | 	rdlong	arg03, arg03
1138c     0C 4E 05 F1 | 	add	fp, #12
11390     A7 16 62 FC | 	wrlong	arg03, fp
11394                 | ' 
11394                 | ' numpar=compiledline(lineptr_e).result.uresult
11394                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
11394     0C 4E 85 F1 | 	sub	fp, #12
11398     02 16 16 F2 | 	cmp	arg03, #2 wc
1139c     66 00 00 FF 
113a0     50 E4 85 F1 | 	sub	objptr, ##52304
113a4     0C 4E 05 C1 |  if_b	add	fp, #12
113a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
113ac     0C 4E 85 C1 |  if_b	sub	fp, #12
113b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1400
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     08 CD B0 FD | 	call	#__system___getiolock_0417
113bc     FD 12 02 F6 | 	mov	arg01, result1
113c0     04 75 B0 FD | 	call	#__system___lockmem
113c4     40 01 00 FF 
113c8     70 15 06 F6 | 	mov	arg02, ##@LR__4595
113cc     00 12 06 F6 | 	mov	arg01, #0
113d0     00 16 06 F6 | 	mov	arg03, #0
113d4     E0 81 B0 FD | 	call	#__system___basic_print_string
113d8     00 12 06 F6 | 	mov	arg01, #0
113dc     E4 CC B0 FD | 	call	#__system___getiolock_0417
113e0     FD 00 68 FC | 	wrlong	#0, result1
113e4     27 12 06 F6 | 	mov	arg01, #39
113e8     B8 3F B0 FD | 	call	#_printerror
113ec     48 00 90 FD | 	jmp	#LR__1401
113f0                 | LR__1400
113f0     3C 81 BF FD | 	call	#_pop
113f4     FF 1E 02 F6 | 	mov	local01, result3
113f8     A7 FA 61 FC | 	wrlong	result1, fp
113fc     04 4E 05 F1 | 	add	fp, #4
11400     A7 FC 61 FC | 	wrlong	result2, fp
11404     04 4E 05 F1 | 	add	fp, #4
11408     A7 1E 62 FC | 	wrlong	local01, fp
1140c     08 4E 85 F1 | 	sub	fp, #8
11410     A7 12 02 F6 | 	mov	arg01, fp
11414     54 F6 BF FD | 	call	#_converttofloat
11418     FD 12 02 F6 | 	mov	arg01, result1
1141c     B4 9D B0 FD | 	call	#__system___float_sqrt
11420     A7 FA 61 FC | 	wrlong	result1, fp
11424     08 4E 05 F1 | 	add	fp, #8
11428     A7 3C 68 FC | 	wrlong	#30, fp
1142c     08 4E 85 F1 | 	sub	fp, #8
11430     A7 12 02 F6 | 	mov	arg01, fp
11434     90 81 BF FD | 	call	#_push
11438                 | LR__1401
11438     A7 F0 03 F6 | 	mov	ptra, fp
1143c     B2 00 A0 FD | 	call	#popregs_
11440                 | _do_sqr_ret
11440     2D 00 64 FD | 	ret
11444                 | 
11444                 | ' 
11444                 | ' sub do_stick
11444                 | _do_stick
11444     01 4A 05 F6 | 	mov	COUNT_, #1
11448     A8 00 A0 FD | 	call	#pushregs_
1144c     10 F0 07 F1 | 	add	ptra, #16
11450     69 00 00 FF 
11454     54 E4 05 F1 | 	add	objptr, ##53844
11458     F2 1E 02 FB | 	rdlong	local01, objptr
1145c     0F 17 02 F6 | 	mov	arg03, local01
11460     01 16 66 F0 | 	shl	arg03, #1
11464     0F 17 02 F1 | 	add	arg03, local01
11468     02 16 66 F0 | 	shl	arg03, #2
1146c     03 00 00 FF 
11470     04 E4 85 F1 | 	sub	objptr, ##1540
11474     F2 16 02 F1 | 	add	arg03, objptr
11478     0B 17 02 FB | 	rdlong	arg03, arg03
1147c     0C 4E 05 F1 | 	add	fp, #12
11480     A7 16 62 FC | 	wrlong	arg03, fp
11484                 | ' 
11484                 | ' numpar=compiledline(lineptr_e).result.uresult
11484                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
11484     0C 4E 85 F1 | 	sub	fp, #12
11488     02 16 16 F2 | 	cmp	arg03, #2 wc
1148c     66 00 00 FF 
11490     50 E4 85 F1 | 	sub	objptr, ##52304
11494     3C 00 90 CD |  if_b	jmp	#LR__1410
11498     00 12 06 F6 | 	mov	arg01, #0
1149c     24 CC B0 FD | 	call	#__system___getiolock_0417
114a0     FD 12 02 F6 | 	mov	arg01, result1
114a4     20 74 B0 FD | 	call	#__system___lockmem
114a8     40 01 00 FF 
114ac     76 15 06 F6 | 	mov	arg02, ##@LR__4596
114b0     00 12 06 F6 | 	mov	arg01, #0
114b4     00 16 06 F6 | 	mov	arg03, #0
114b8     FC 80 B0 FD | 	call	#__system___basic_print_string
114bc     00 12 06 F6 | 	mov	arg01, #0
114c0     00 CC B0 FD | 	call	#__system___getiolock_0417
114c4     FD 00 68 FC | 	wrlong	#0, result1
114c8     27 12 06 F6 | 	mov	arg01, #39
114cc     D4 3E B0 FD | 	call	#_printerror
114d0     E8 00 90 FD | 	jmp	#LR__1414
114d4                 | LR__1410
114d4                 | ' 
114d4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
114d4     0C 4E 05 F1 | 	add	fp, #12
114d8     A7 FE 09 FB | 	rdlong	result3, fp wz
114dc     0C 4E 85 F1 | 	sub	fp, #12
114e0     30 00 90 5D |  if_ne	jmp	#LR__1411
114e4     79 00 00 FF 
114e8     D0 E5 05 F1 | 	add	objptr, ##62416
114ec     F2 1E 02 FB | 	rdlong	local01, objptr
114f0     79 00 00 FF 
114f4     D0 E5 85 F1 | 	sub	objptr, ##62416
114f8     A7 1E 62 FC | 	wrlong	local01, fp
114fc     08 4E 05 F1 | 	add	fp, #8
11500     A7 3A 68 FC | 	wrlong	#29, fp
11504     08 4E 85 F1 | 	sub	fp, #8
11508     A7 12 02 F6 | 	mov	arg01, fp
1150c     B8 80 BF FD | 	call	#_push
11510     A8 00 90 FD | 	jmp	#LR__1414
11514                 | LR__1411
11514     18 80 BF FD | 	call	#_pop
11518     A7 FA 61 FC | 	wrlong	result1, fp
1151c     04 4E 05 F1 | 	add	fp, #4
11520     A7 FC 61 FC | 	wrlong	result2, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 FE 61 FC | 	wrlong	result3, fp
1152c                 | ' 
1152c                 | ' t1=pop()
1152c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1152c     08 4E 85 F1 | 	sub	fp, #8
11530     1C FE 0D F2 | 	cmp	result3, #28 wz
11534     08 4E 05 51 |  if_ne	add	fp, #8
11538     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1153c     08 4E 85 51 |  if_ne	sub	fp, #8
11540     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
11544     6C 00 90 5D |  if_ne	jmp	#LR__1413
11548     A7 1E 02 FB | 	rdlong	local01, fp
1154c     7A 00 00 FF 
11550     9C E4 05 F1 | 	add	objptr, ##62620
11554     F2 1E 62 FC | 	wrlong	local01, objptr
11558                 | '   q=t1.result.uresult
11558                 | '   if q<7 then 
11558     7A 00 00 FF 
1155c     9C E4 85 F1 | 	sub	objptr, ##62620
11560     07 1E 56 F2 | 	cmps	local01, #7 wc
11564     40 00 90 3D |  if_ae	jmp	#LR__1412
11568     7A 00 00 FF 
1156c     9C E4 05 F1 | 	add	objptr, ##62620
11570     F2 1E 02 FB | 	rdlong	local01, objptr
11574     02 1E 66 F0 | 	shl	local01, #2
11578     CC E4 85 F1 | 	sub	objptr, #204
1157c     F2 1E 02 F1 | 	add	local01, objptr
11580     0F 1F 02 FB | 	rdlong	local01, local01
11584     A7 1E 62 FC | 	wrlong	local01, fp
11588     08 4E 05 F1 | 	add	fp, #8
1158c     A7 3A 68 FC | 	wrlong	#29, fp
11590     08 4E 85 F1 | 	sub	fp, #8
11594     A7 12 02 F6 | 	mov	arg01, fp
11598     79 00 00 FF 
1159c     D0 E5 85 F1 | 	sub	objptr, ##62416
115a0     24 80 BF FD | 	call	#_push
115a4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
115a4     14 00 90 FD | 	jmp	#LR__1414
115a8                 | LR__1412
115a8     29 12 06 F6 | 	mov	arg01, #41
115ac     F4 3D B0 FD | 	call	#_printerror
115b0                 | '      printerror(41) : return
115b0     08 00 90 FD | 	jmp	#LR__1414
115b4                 | LR__1413
115b4     29 12 06 F6 | 	mov	arg01, #41
115b8     E8 3D B0 FD | 	call	#_printerror
115bc                 | LR__1414
115bc     A7 F0 03 F6 | 	mov	ptra, fp
115c0     B2 00 A0 FD | 	call	#popregs_
115c4                 | _do_stick_ret
115c4     2D 00 64 FD | 	ret
115c8                 | 
115c8                 | ' 
115c8                 | ' sub do_strig
115c8                 | _do_strig
115c8     01 4A 05 F6 | 	mov	COUNT_, #1
115cc     A8 00 A0 FD | 	call	#pushregs_
115d0     10 F0 07 F1 | 	add	ptra, #16
115d4     69 00 00 FF 
115d8     54 E4 05 F1 | 	add	objptr, ##53844
115dc     F2 1E 02 FB | 	rdlong	local01, objptr
115e0     0F 17 02 F6 | 	mov	arg03, local01
115e4     01 16 66 F0 | 	shl	arg03, #1
115e8     0F 17 02 F1 | 	add	arg03, local01
115ec     02 16 66 F0 | 	shl	arg03, #2
115f0     03 00 00 FF 
115f4     04 E4 85 F1 | 	sub	objptr, ##1540
115f8     F2 16 02 F1 | 	add	arg03, objptr
115fc     0B 17 02 FB | 	rdlong	arg03, arg03
11600     0C 4E 05 F1 | 	add	fp, #12
11604     A7 16 62 FC | 	wrlong	arg03, fp
11608                 | ' 
11608                 | ' numpar=compiledline(lineptr_e).result.uresult
11608                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
11608     0C 4E 85 F1 | 	sub	fp, #12
1160c     02 16 16 F2 | 	cmp	arg03, #2 wc
11610     66 00 00 FF 
11614     50 E4 85 F1 | 	sub	objptr, ##52304
11618     3C 00 90 CD |  if_b	jmp	#LR__1420
1161c     00 12 06 F6 | 	mov	arg01, #0
11620     A0 CA B0 FD | 	call	#__system___getiolock_0417
11624     FD 12 02 F6 | 	mov	arg01, result1
11628     9C 72 B0 FD | 	call	#__system___lockmem
1162c     40 01 00 FF 
11630     7E 15 06 F6 | 	mov	arg02, ##@LR__4597
11634     00 12 06 F6 | 	mov	arg01, #0
11638     00 16 06 F6 | 	mov	arg03, #0
1163c     78 7F B0 FD | 	call	#__system___basic_print_string
11640     00 12 06 F6 | 	mov	arg01, #0
11644     7C CA B0 FD | 	call	#__system___getiolock_0417
11648     FD 00 68 FC | 	wrlong	#0, result1
1164c     27 12 06 F6 | 	mov	arg01, #39
11650     50 3D B0 FD | 	call	#_printerror
11654     E8 00 90 FD | 	jmp	#LR__1424
11658                 | LR__1420
11658                 | ' 
11658                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
11658     0C 4E 05 F1 | 	add	fp, #12
1165c     A7 FE 09 FB | 	rdlong	result3, fp wz
11660     0C 4E 85 F1 | 	sub	fp, #12
11664     30 00 90 5D |  if_ne	jmp	#LR__1421
11668     79 00 00 FF 
1166c     EC E5 05 F1 | 	add	objptr, ##62444
11670     F2 1E 02 FB | 	rdlong	local01, objptr
11674     79 00 00 FF 
11678     EC E5 85 F1 | 	sub	objptr, ##62444
1167c     A7 1E 62 FC | 	wrlong	local01, fp
11680     08 4E 05 F1 | 	add	fp, #8
11684     A7 3A 68 FC | 	wrlong	#29, fp
11688     08 4E 85 F1 | 	sub	fp, #8
1168c     A7 12 02 F6 | 	mov	arg01, fp
11690     34 7F BF FD | 	call	#_push
11694     A8 00 90 FD | 	jmp	#LR__1424
11698                 | LR__1421
11698     94 7E BF FD | 	call	#_pop
1169c     A7 FA 61 FC | 	wrlong	result1, fp
116a0     04 4E 05 F1 | 	add	fp, #4
116a4     A7 FC 61 FC | 	wrlong	result2, fp
116a8     04 4E 05 F1 | 	add	fp, #4
116ac     A7 FE 61 FC | 	wrlong	result3, fp
116b0                 | ' 
116b0                 | ' t1=pop()
116b0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
116b0     08 4E 85 F1 | 	sub	fp, #8
116b4     1C FE 0D F2 | 	cmp	result3, #28 wz
116b8     08 4E 05 51 |  if_ne	add	fp, #8
116bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
116c0     08 4E 85 51 |  if_ne	sub	fp, #8
116c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
116c8     6C 00 90 5D |  if_ne	jmp	#LR__1423
116cc     A7 1E 02 FB | 	rdlong	local01, fp
116d0     7A 00 00 FF 
116d4     9C E4 05 F1 | 	add	objptr, ##62620
116d8     F2 1E 62 FC | 	wrlong	local01, objptr
116dc                 | '   q=t1.result.uresult
116dc                 | '   if q<7 then 
116dc     7A 00 00 FF 
116e0     9C E4 85 F1 | 	sub	objptr, ##62620
116e4     07 1E 56 F2 | 	cmps	local01, #7 wc
116e8     40 00 90 3D |  if_ae	jmp	#LR__1422
116ec     7A 00 00 FF 
116f0     9C E4 05 F1 | 	add	objptr, ##62620
116f4     F2 1E 02 FB | 	rdlong	local01, objptr
116f8     02 1E 66 F0 | 	shl	local01, #2
116fc     B0 E4 85 F1 | 	sub	objptr, #176
11700     F2 1E 02 F1 | 	add	local01, objptr
11704     0F 1F 02 FB | 	rdlong	local01, local01
11708     A7 1E 62 FC | 	wrlong	local01, fp
1170c     08 4E 05 F1 | 	add	fp, #8
11710     A7 3A 68 FC | 	wrlong	#29, fp
11714     08 4E 85 F1 | 	sub	fp, #8
11718     A7 12 02 F6 | 	mov	arg01, fp
1171c     79 00 00 FF 
11720     EC E5 85 F1 | 	sub	objptr, ##62444
11724     A0 7E BF FD | 	call	#_push
11728                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
11728     14 00 90 FD | 	jmp	#LR__1424
1172c                 | LR__1422
1172c     29 12 06 F6 | 	mov	arg01, #41
11730     70 3C B0 FD | 	call	#_printerror
11734                 | '      printerror(41) : return
11734     08 00 90 FD | 	jmp	#LR__1424
11738                 | LR__1423
11738     29 12 06 F6 | 	mov	arg01, #41
1173c     64 3C B0 FD | 	call	#_printerror
11740                 | LR__1424
11740     A7 F0 03 F6 | 	mov	ptra, fp
11744     B2 00 A0 FD | 	call	#popregs_
11748                 | _do_strig_ret
11748     2D 00 64 FD | 	ret
1174c                 | 
1174c                 | ' 
1174c                 | ' sub do_getpixel
1174c                 | _do_getpixel
1174c     00 4A 05 F6 | 	mov	COUNT_, #0
11750     A8 00 A0 FD | 	call	#pushregs_
11754     24 F0 07 F1 | 	add	ptra, #36
11758     69 00 00 FF 
1175c     54 E4 05 F1 | 	add	objptr, ##53844
11760     F2 16 02 FB | 	rdlong	arg03, objptr
11764     0B 15 02 F6 | 	mov	arg02, arg03
11768     01 14 66 F0 | 	shl	arg02, #1
1176c     0B 15 02 F1 | 	add	arg02, arg03
11770     02 14 66 F0 | 	shl	arg02, #2
11774     03 00 00 FF 
11778     04 E4 85 F1 | 	sub	objptr, ##1540
1177c     F2 14 02 F1 | 	add	arg02, objptr
11780     0A 17 02 FB | 	rdlong	arg03, arg02
11784     18 4E 05 F1 | 	add	fp, #24
11788     A7 16 62 FC | 	wrlong	arg03, fp
1178c                 | ' 
1178c                 | ' numpar=compiledline(lineptr_e).result.uresult
1178c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
1178c     18 4E 85 F1 | 	sub	fp, #24
11790     02 16 0E F2 | 	cmp	arg03, #2 wz
11794     66 00 00 FF 
11798     50 E4 85 F1 | 	sub	objptr, ##52304
1179c     3C 00 90 AD |  if_e	jmp	#LR__1430
117a0     00 12 06 F6 | 	mov	arg01, #0
117a4     1C C9 B0 FD | 	call	#__system___getiolock_0417
117a8     FD 12 02 F6 | 	mov	arg01, result1
117ac     18 71 B0 FD | 	call	#__system___lockmem
117b0     40 01 00 FF 
117b4     86 15 06 F6 | 	mov	arg02, ##@LR__4598
117b8     00 12 06 F6 | 	mov	arg01, #0
117bc     00 16 06 F6 | 	mov	arg03, #0
117c0     F4 7D B0 FD | 	call	#__system___basic_print_string
117c4     00 12 06 F6 | 	mov	arg01, #0
117c8     F8 C8 B0 FD | 	call	#__system___getiolock_0417
117cc     FD 00 68 FC | 	wrlong	#0, result1
117d0     27 12 06 F6 | 	mov	arg01, #39
117d4     CC 3B B0 FD | 	call	#_printerror
117d8     B4 00 90 FD | 	jmp	#LR__1431
117dc                 | LR__1430
117dc     50 7D BF FD | 	call	#_pop
117e0     FD 16 02 F6 | 	mov	arg03, result1
117e4     FE 14 02 F6 | 	mov	arg02, result2
117e8     FF 12 02 F6 | 	mov	arg01, result3
117ec     0C 4E 05 F1 | 	add	fp, #12
117f0     A7 16 62 FC | 	wrlong	arg03, fp
117f4     04 4E 05 F1 | 	add	fp, #4
117f8     A7 14 62 FC | 	wrlong	arg02, fp
117fc     04 4E 05 F1 | 	add	fp, #4
11800     A7 12 62 FC | 	wrlong	arg01, fp
11804     14 4E 85 F1 | 	sub	fp, #20
11808     24 7D BF FD | 	call	#_pop
1180c     FF 16 02 F6 | 	mov	arg03, result3
11810     A7 FA 61 FC | 	wrlong	result1, fp
11814     04 4E 05 F1 | 	add	fp, #4
11818     A7 FC 61 FC | 	wrlong	result2, fp
1181c     04 4E 05 F1 | 	add	fp, #4
11820     A7 16 62 FC | 	wrlong	arg03, fp
11824     08 4E 85 F1 | 	sub	fp, #8
11828     A7 12 02 F6 | 	mov	arg01, fp
1182c     90 F1 BF FD | 	call	#_converttoint
11830     1C 4E 05 F1 | 	add	fp, #28
11834     A7 FA 61 FC | 	wrlong	result1, fp
11838     10 4E 85 F1 | 	sub	fp, #16
1183c     A7 12 02 F6 | 	mov	arg01, fp
11840     0C 4E 85 F1 | 	sub	fp, #12
11844     78 F1 BF FD | 	call	#_converttoint
11848     FD 16 02 F6 | 	mov	arg03, result1
1184c     20 4E 05 F1 | 	add	fp, #32
11850     A7 16 62 FC | 	wrlong	arg03, fp
11854     F2 12 02 FB | 	rdlong	arg01, objptr
11858     04 4E 85 F1 | 	sub	fp, #4
1185c     A7 FE 01 FB | 	rdlong	result3, fp
11860     FF 12 02 F1 | 	add	arg01, result3
11864     1C 4E 85 F1 | 	sub	fp, #28
11868     0A 16 66 F0 | 	shl	arg03, #10
1186c     0B 13 02 F1 | 	add	arg01, arg03
11870     94 3C B0 FD | 	call	#_pspeek
11874     FD FA E1 F8 | 	getbyte	result1, result1, #0
11878     A7 FA 61 FC | 	wrlong	result1, fp
1187c     08 4E 05 F1 | 	add	fp, #8
11880     A7 3A 68 FC | 	wrlong	#29, fp
11884     08 4E 85 F1 | 	sub	fp, #8
11888     A7 12 02 F6 | 	mov	arg01, fp
1188c     38 7D BF FD | 	call	#_push
11890                 | LR__1431
11890     A7 F0 03 F6 | 	mov	ptra, fp
11894     B2 00 A0 FD | 	call	#popregs_
11898                 | _do_getpixel_ret
11898     2D 00 64 FD | 	ret
1189c                 | 
1189c                 | ' 
1189c                 | ' 
1189c                 | ' 
1189c                 | ' sub do_defsprite
1189c                 | _do_defsprite
1189c     07 4A 05 F6 | 	mov	COUNT_, #7
118a0     A8 00 A0 FD | 	call	#pushregs_
118a4     5C F0 07 F1 | 	add	ptra, #92
118a8     84 7C BF FD | 	call	#_pop
118ac     FD 16 02 F6 | 	mov	arg03, result1
118b0     FE 14 02 F6 | 	mov	arg02, result2
118b4     FF 12 02 F6 | 	mov	arg01, result3
118b8     30 4E 05 F1 | 	add	fp, #48
118bc     A7 16 62 FC | 	wrlong	arg03, fp
118c0     04 4E 05 F1 | 	add	fp, #4
118c4     A7 14 62 FC | 	wrlong	arg02, fp
118c8     04 4E 05 F1 | 	add	fp, #4
118cc     A7 12 62 FC | 	wrlong	arg01, fp
118d0     38 4E 85 F1 | 	sub	fp, #56
118d4     58 7C BF FD | 	call	#_pop
118d8     FD 16 02 F6 | 	mov	arg03, result1
118dc     FE 14 02 F6 | 	mov	arg02, result2
118e0     FF 12 02 F6 | 	mov	arg01, result3
118e4     24 4E 05 F1 | 	add	fp, #36
118e8     A7 16 62 FC | 	wrlong	arg03, fp
118ec     04 4E 05 F1 | 	add	fp, #4
118f0     A7 14 62 FC | 	wrlong	arg02, fp
118f4     04 4E 05 F1 | 	add	fp, #4
118f8     A7 12 62 FC | 	wrlong	arg01, fp
118fc     2C 4E 85 F1 | 	sub	fp, #44
11900     2C 7C BF FD | 	call	#_pop
11904     FD 16 02 F6 | 	mov	arg03, result1
11908     FE 14 02 F6 | 	mov	arg02, result2
1190c     FF 12 02 F6 | 	mov	arg01, result3
11910     18 4E 05 F1 | 	add	fp, #24
11914     A7 16 62 FC | 	wrlong	arg03, fp
11918     04 4E 05 F1 | 	add	fp, #4
1191c     A7 14 62 FC | 	wrlong	arg02, fp
11920     04 4E 05 F1 | 	add	fp, #4
11924     A7 12 62 FC | 	wrlong	arg01, fp
11928     20 4E 85 F1 | 	sub	fp, #32
1192c     00 7C BF FD | 	call	#_pop
11930     FD 16 02 F6 | 	mov	arg03, result1
11934     FE 14 02 F6 | 	mov	arg02, result2
11938     FF 12 02 F6 | 	mov	arg01, result3
1193c     0C 4E 05 F1 | 	add	fp, #12
11940     A7 16 62 FC | 	wrlong	arg03, fp
11944     04 4E 05 F1 | 	add	fp, #4
11948     A7 14 62 FC | 	wrlong	arg02, fp
1194c     04 4E 05 F1 | 	add	fp, #4
11950     A7 12 62 FC | 	wrlong	arg01, fp
11954     14 4E 85 F1 | 	sub	fp, #20
11958     D4 7B BF FD | 	call	#_pop
1195c     FF 16 02 F6 | 	mov	arg03, result3
11960     A7 FA 61 FC | 	wrlong	result1, fp
11964     04 4E 05 F1 | 	add	fp, #4
11968     A7 FC 61 FC | 	wrlong	result2, fp
1196c     04 4E 05 F1 | 	add	fp, #4
11970     A7 16 62 FC | 	wrlong	arg03, fp
11974     08 4E 85 F1 | 	sub	fp, #8
11978     A7 12 02 F6 | 	mov	arg01, fp
1197c     40 F0 BF FD | 	call	#_converttoint
11980     3C 4E 05 F1 | 	add	fp, #60
11984     A7 FA 61 FC | 	wrlong	result1, fp
11988     30 4E 85 F1 | 	sub	fp, #48
1198c     A7 12 02 F6 | 	mov	arg01, fp
11990     0C 4E 85 F1 | 	sub	fp, #12
11994     28 F0 BF FD | 	call	#_converttoint
11998     40 4E 05 F1 | 	add	fp, #64
1199c     A7 FA 61 FC | 	wrlong	result1, fp
119a0     28 4E 85 F1 | 	sub	fp, #40
119a4     A7 12 02 F6 | 	mov	arg01, fp
119a8     18 4E 85 F1 | 	sub	fp, #24
119ac     10 F0 BF FD | 	call	#_converttoint
119b0     44 4E 05 F1 | 	add	fp, #68
119b4     A7 FA 61 FC | 	wrlong	result1, fp
119b8     20 4E 85 F1 | 	sub	fp, #32
119bc     A7 12 02 F6 | 	mov	arg01, fp
119c0     24 4E 85 F1 | 	sub	fp, #36
119c4     F8 EF BF FD | 	call	#_converttoint
119c8     48 4E 05 F1 | 	add	fp, #72
119cc     A7 FA 61 FC | 	wrlong	result1, fp
119d0     18 4E 85 F1 | 	sub	fp, #24
119d4     A7 12 02 F6 | 	mov	arg01, fp
119d8     30 4E 85 F1 | 	sub	fp, #48
119dc     E0 EF BF FD | 	call	#_converttoint
119e0     4C 4E 05 F1 | 	add	fp, #76
119e4     A7 FA 61 FC | 	wrlong	result1, fp
119e8                 | ' 
119e8                 | ' t5=pop()
119e8                 | ' t4=pop()
119e8                 | ' t3=pop()
119e8                 | ' t2=pop()
119e8                 | ' t1=pop()
119e8                 | ' 
119e8                 | ' ' do convert, defsprite is not a racing command
119e8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
119e8                 | '  
119e8                 | ' ' todo: check parameters for linits
119e8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
119e8     10 4E 85 F1 | 	sub	fp, #16
119ec     A7 16 02 FB | 	rdlong	arg03, fp
119f0     3C 4E 85 F1 | 	sub	fp, #60
119f4     02 16 66 F0 | 	shl	arg03, #2
119f8     7A 00 00 FF 
119fc     08 E4 05 F1 | 	add	objptr, ##62472
11a00     F2 16 02 F1 | 	add	arg03, objptr
11a04     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11a08     7A 00 00 FF 
11a0c     08 E4 85 F1 | 	sub	objptr, ##62472
11a10     2C 00 90 AD |  if_e	jmp	#LR__1440
11a14     3C 4E 05 F1 | 	add	fp, #60
11a18     A7 16 02 FB | 	rdlong	arg03, fp
11a1c     3C 4E 85 F1 | 	sub	fp, #60
11a20     02 16 66 F0 | 	shl	arg03, #2
11a24     7A 00 00 FF 
11a28     08 E4 05 F1 | 	add	objptr, ##62472
11a2c     F2 16 02 F1 | 	add	arg03, objptr
11a30     0B 13 02 FB | 	rdlong	arg01, arg03
11a34     7A 00 00 FF 
11a38     08 E4 85 F1 | 	sub	objptr, ##62472
11a3c     74 AC B0 FD | 	call	#__system___gc_free
11a40                 | LR__1440
11a40     3C 4E 05 F1 | 	add	fp, #60
11a44     A7 1E 02 FB | 	rdlong	local01, fp
11a48     0C 4E 05 F1 | 	add	fp, #12
11a4c     A7 16 02 FB | 	rdlong	arg03, fp
11a50     04 4E 05 F1 | 	add	fp, #4
11a54     A7 14 02 FB | 	rdlong	arg02, fp
11a58     0A 17 02 FD | 	qmul	arg03, arg02
11a5c     02 1E 66 F0 | 	shl	local01, #2
11a60     7A 00 00 FF 
11a64     08 E4 05 F1 | 	add	objptr, ##62472
11a68     F2 1E 02 F1 | 	add	local01, objptr
11a6c     4C 4E 85 F1 | 	sub	fp, #76
11a70     7A 00 00 FF 
11a74     08 E4 85 F1 | 	sub	objptr, ##62472
11a78     18 12 62 FD | 	getqx	arg01
11a7c     F8 AA B0 FD | 	call	#__system___gc_alloc_managed
11a80     0F FB 61 FC | 	wrlong	result1, local01
11a84                 | ' for y=a3 to a3+a5-1
11a84     44 4E 05 F1 | 	add	fp, #68
11a88     A7 20 02 FB | 	rdlong	local02, fp
11a8c     0C 4E 05 F1 | 	add	fp, #12
11a90     A7 20 62 FC | 	wrlong	local02, fp
11a94     0C 4E 85 F1 | 	sub	fp, #12
11a98     A7 22 02 FB | 	rdlong	local03, fp
11a9c     08 4E 05 F1 | 	add	fp, #8
11aa0     A7 24 02 FB | 	rdlong	local04, fp
11aa4     4C 4E 85 F1 | 	sub	fp, #76
11aa8     12 23 02 F1 | 	add	local03, local04
11aac                 | LR__1441
11aac     50 4E 05 F1 | 	add	fp, #80
11ab0     A7 20 02 FB | 	rdlong	local02, fp
11ab4     50 4E 85 F1 | 	sub	fp, #80
11ab8     11 21 52 F2 | 	cmps	local02, local03 wc
11abc     10 01 90 3D |  if_ae	jmp	#LR__1444
11ac0                 | '   for x=a2 to a4+a2-1
11ac0     40 4E 05 F1 | 	add	fp, #64
11ac4     A7 1E 02 FB | 	rdlong	local01, fp
11ac8     7A 00 00 FF 
11acc     70 E4 05 F1 | 	add	objptr, ##62576
11ad0     F2 1E 62 FC | 	wrlong	local01, objptr
11ad4     7A 00 00 FF 
11ad8     70 E4 85 F1 | 	sub	objptr, ##62576
11adc     08 4E 05 F1 | 	add	fp, #8
11ae0     A7 26 02 FB | 	rdlong	local05, fp
11ae4     08 4E 85 F1 | 	sub	fp, #8
11ae8     A7 28 02 FB | 	rdlong	local06, fp
11aec     40 4E 85 F1 | 	sub	fp, #64
11af0     14 27 02 F1 | 	add	local05, local06
11af4                 | LR__1442
11af4     7A 00 00 FF 
11af8     70 E4 05 F1 | 	add	objptr, ##62576
11afc     F2 1E 02 FB | 	rdlong	local01, objptr
11b00     7A 00 00 FF 
11b04     70 E4 85 F1 | 	sub	objptr, ##62576
11b08     13 1F 52 F2 | 	cmps	local01, local05 wc
11b0c     A8 00 90 3D |  if_ae	jmp	#LR__1443
11b10     3C 4E 05 F1 | 	add	fp, #60
11b14     A7 28 02 FB | 	rdlong	local06, fp
11b18     04 4E 05 F1 | 	add	fp, #4
11b1c     A7 24 02 FB | 	rdlong	local04, fp
11b20     10 4E 05 F1 | 	add	fp, #16
11b24     A7 20 02 FB | 	rdlong	local02, fp
11b28     10 1F 02 F6 | 	mov	local01, local02
11b2c     0C 4E 85 F1 | 	sub	fp, #12
11b30     A7 16 02 FB | 	rdlong	arg03, fp
11b34     0B 1F 82 F1 | 	sub	local01, arg03
11b38     04 4E 05 F1 | 	add	fp, #4
11b3c     A7 16 02 FB | 	rdlong	arg03, fp
11b40     0B 1F 02 FD | 	qmul	local01, arg03
11b44     02 28 66 F0 | 	shl	local06, #2
11b48     7A 00 00 FF 
11b4c     08 E4 05 F1 | 	add	objptr, ##62472
11b50     F2 28 02 F1 | 	add	local06, objptr
11b54     14 29 02 FB | 	rdlong	local06, local06
11b58     68 E4 05 F1 | 	add	objptr, #104
11b5c     F2 1E 02 FB | 	rdlong	local01, objptr
11b60     7A 00 00 FF 
11b64     70 E4 85 F1 | 	sub	objptr, ##62576
11b68     0F 2B 02 F6 | 	mov	local07, local01
11b6c     12 2B 82 F1 | 	sub	local07, local04
11b70     F2 12 02 FB | 	rdlong	arg01, objptr
11b74     0F 13 02 F1 | 	add	arg01, local01
11b78     48 4E 85 F1 | 	sub	fp, #72
11b7c     0A 20 66 F0 | 	shl	local02, #10
11b80     10 13 02 F1 | 	add	arg01, local02
11b84     18 24 62 FD | 	getqx	local04
11b88     12 2B 02 F1 | 	add	local07, local04
11b8c     14 2B 02 F1 | 	add	local07, local06
11b90     74 39 B0 FD | 	call	#_pspeek
11b94     15 FB 41 FC | 	wrbyte	result1, local07
11b98     7A 00 00 FF 
11b9c     70 E4 05 F1 | 	add	objptr, ##62576
11ba0     F2 2A 02 FB | 	rdlong	local07, objptr
11ba4     01 2A 06 F1 | 	add	local07, #1
11ba8     F2 2A 62 FC | 	wrlong	local07, objptr
11bac     7A 00 00 FF 
11bb0     70 E4 85 F1 | 	sub	objptr, ##62576
11bb4     3C FF 9F FD | 	jmp	#LR__1442
11bb8                 | LR__1443
11bb8     50 4E 05 F1 | 	add	fp, #80
11bbc     A7 2A 02 FB | 	rdlong	local07, fp
11bc0     01 2A 06 F1 | 	add	local07, #1
11bc4     A7 2A 62 FC | 	wrlong	local07, fp
11bc8     50 4E 85 F1 | 	sub	fp, #80
11bcc     DC FE 9F FD | 	jmp	#LR__1441
11bd0                 | LR__1444
11bd0     3C 4E 05 F1 | 	add	fp, #60
11bd4     A7 2A 02 FB | 	rdlong	local07, fp
11bd8     15 13 02 F6 | 	mov	arg01, local07
11bdc     3C 4E 85 F1 | 	sub	fp, #60
11be0     02 2A 66 F0 | 	shl	local07, #2
11be4     7A 00 00 FF 
11be8     08 E4 05 F1 | 	add	objptr, ##62472
11bec     F2 2A 02 F1 | 	add	local07, objptr
11bf0     15 15 02 FB | 	rdlong	arg02, local07
11bf4     7A 00 00 FF 
11bf8     08 E4 85 F1 | 	sub	objptr, ##62472
11bfc     B8 4C B0 FD | 	call	#_hg010b_spin2_setspriteptr
11c00     3C 4E 05 F1 | 	add	fp, #60
11c04     A7 12 02 FB | 	rdlong	arg01, fp
11c08     0C 4E 05 F1 | 	add	fp, #12
11c0c     A7 14 02 FB | 	rdlong	arg02, fp
11c10     04 4E 05 F1 | 	add	fp, #4
11c14     A7 16 02 FB | 	rdlong	arg03, fp
11c18     4C 4E 85 F1 | 	sub	fp, #76
11c1c     0C 4D B0 FD | 	call	#_hg010b_spin2_setspritesize
11c20     A7 F0 03 F6 | 	mov	ptra, fp
11c24     B2 00 A0 FD | 	call	#popregs_
11c28                 | _do_defsprite_ret
11c28     2D 00 64 FD | 	ret
11c2c                 | 
11c2c                 | ' 
11c2c                 | ' sub do_sprite
11c2c                 | _do_sprite
11c2c     00 4A 05 F6 | 	mov	COUNT_, #0
11c30     A8 00 A0 FD | 	call	#pushregs_
11c34     30 F0 07 F1 | 	add	ptra, #48
11c38     F4 78 BF FD | 	call	#_pop
11c3c     FD 16 02 F6 | 	mov	arg03, result1
11c40     FE 14 02 F6 | 	mov	arg02, result2
11c44     FF 12 02 F6 | 	mov	arg01, result3
11c48     18 4E 05 F1 | 	add	fp, #24
11c4c     A7 16 62 FC | 	wrlong	arg03, fp
11c50     04 4E 05 F1 | 	add	fp, #4
11c54     A7 14 62 FC | 	wrlong	arg02, fp
11c58     04 4E 05 F1 | 	add	fp, #4
11c5c     A7 12 62 FC | 	wrlong	arg01, fp
11c60     20 4E 85 F1 | 	sub	fp, #32
11c64     C8 78 BF FD | 	call	#_pop
11c68     FD 16 02 F6 | 	mov	arg03, result1
11c6c     FE 14 02 F6 | 	mov	arg02, result2
11c70     FF 12 02 F6 | 	mov	arg01, result3
11c74     0C 4E 05 F1 | 	add	fp, #12
11c78     A7 16 62 FC | 	wrlong	arg03, fp
11c7c     04 4E 05 F1 | 	add	fp, #4
11c80     A7 14 62 FC | 	wrlong	arg02, fp
11c84     04 4E 05 F1 | 	add	fp, #4
11c88     A7 12 62 FC | 	wrlong	arg01, fp
11c8c     14 4E 85 F1 | 	sub	fp, #20
11c90     9C 78 BF FD | 	call	#_pop
11c94     FF 16 02 F6 | 	mov	arg03, result3
11c98     A7 FA 61 FC | 	wrlong	result1, fp
11c9c     04 4E 05 F1 | 	add	fp, #4
11ca0     A7 FC 61 FC | 	wrlong	result2, fp
11ca4     04 4E 05 F1 | 	add	fp, #4
11ca8     A7 16 62 FC | 	wrlong	arg03, fp
11cac     08 4E 85 F1 | 	sub	fp, #8
11cb0     A7 12 02 F6 | 	mov	arg01, fp
11cb4     08 ED BF FD | 	call	#_converttoint
11cb8     24 4E 05 F1 | 	add	fp, #36
11cbc     A7 FA 61 FC | 	wrlong	result1, fp
11cc0     18 4E 85 F1 | 	sub	fp, #24
11cc4     A7 12 02 F6 | 	mov	arg01, fp
11cc8     0C 4E 85 F1 | 	sub	fp, #12
11ccc     F0 EC BF FD | 	call	#_converttoint
11cd0     28 4E 05 F1 | 	add	fp, #40
11cd4     A7 FA 61 FC | 	wrlong	result1, fp
11cd8     10 4E 85 F1 | 	sub	fp, #16
11cdc     A7 12 02 F6 | 	mov	arg01, fp
11ce0     18 4E 85 F1 | 	sub	fp, #24
11ce4     D8 EC BF FD | 	call	#_converttoint
11ce8     2C 4E 05 F1 | 	add	fp, #44
11cec     A7 FA 61 FC | 	wrlong	result1, fp
11cf0     08 4E 85 F1 | 	sub	fp, #8
11cf4     A7 12 02 FB | 	rdlong	arg01, fp
11cf8     04 4E 05 F1 | 	add	fp, #4
11cfc     A7 14 02 FB | 	rdlong	arg02, fp
11d00     FD 16 02 F6 | 	mov	arg03, result1
11d04     28 4E 85 F1 | 	sub	fp, #40
11d08     D4 4B B0 FD | 	call	#_hg010b_spin2_setspritepos
11d0c     A7 F0 03 F6 | 	mov	ptra, fp
11d10     B2 00 A0 FD | 	call	#popregs_
11d14                 | _do_sprite_ret
11d14     2D 00 64 FD | 	ret
11d18                 | 
11d18                 | ' 
11d18                 | ' sub do_mousex
11d18                 | _do_mousex
11d18     00 4A 05 F6 | 	mov	COUNT_, #0
11d1c     A8 00 A0 FD | 	call	#pushregs_
11d20     0C F0 07 F1 | 	add	ptra, #12
11d24     08 4E 05 F1 | 	add	fp, #8
11d28     A7 3A 68 FC | 	wrlong	#29, fp
11d2c     08 4E 85 F1 | 	sub	fp, #8
11d30     79 00 00 FF 
11d34     C0 E5 05 F1 | 	add	objptr, ##62400
11d38     F2 12 02 FB | 	rdlong	arg01, objptr
11d3c     79 00 00 FF 
11d40     C0 E5 85 F1 | 	sub	objptr, ##62400
11d44     A7 12 62 FC | 	wrlong	arg01, fp
11d48     A7 12 02 F6 | 	mov	arg01, fp
11d4c     78 78 BF FD | 	call	#_push
11d50     A7 F0 03 F6 | 	mov	ptra, fp
11d54     B2 00 A0 FD | 	call	#popregs_
11d58                 | _do_mousex_ret
11d58     2D 00 64 FD | 	ret
11d5c                 | 
11d5c                 | ' 
11d5c                 | ' sub do_mousey
11d5c                 | _do_mousey
11d5c     00 4A 05 F6 | 	mov	COUNT_, #0
11d60     A8 00 A0 FD | 	call	#pushregs_
11d64     0C F0 07 F1 | 	add	ptra, #12
11d68     08 4E 05 F1 | 	add	fp, #8
11d6c     A7 3A 68 FC | 	wrlong	#29, fp
11d70     08 4E 85 F1 | 	sub	fp, #8
11d74     79 00 00 FF 
11d78     C4 E5 05 F1 | 	add	objptr, ##62404
11d7c     F2 12 02 FB | 	rdlong	arg01, objptr
11d80     79 00 00 FF 
11d84     C4 E5 85 F1 | 	sub	objptr, ##62404
11d88     A7 12 62 FC | 	wrlong	arg01, fp
11d8c     A7 12 02 F6 | 	mov	arg01, fp
11d90     34 78 BF FD | 	call	#_push
11d94     A7 F0 03 F6 | 	mov	ptra, fp
11d98     B2 00 A0 FD | 	call	#popregs_
11d9c                 | _do_mousey_ret
11d9c     2D 00 64 FD | 	ret
11da0                 | 
11da0                 | ' 
11da0                 | ' sub do_mousew
11da0                 | _do_mousew
11da0     00 4A 05 F6 | 	mov	COUNT_, #0
11da4     A8 00 A0 FD | 	call	#pushregs_
11da8     0C F0 07 F1 | 	add	ptra, #12
11dac     08 4E 05 F1 | 	add	fp, #8
11db0     A7 38 68 FC | 	wrlong	#28, fp
11db4     08 4E 85 F1 | 	sub	fp, #8
11db8     79 00 00 FF 
11dbc     CC E5 05 F1 | 	add	objptr, ##62412
11dc0     F2 12 02 FB | 	rdlong	arg01, objptr
11dc4     79 00 00 FF 
11dc8     CC E5 85 F1 | 	sub	objptr, ##62412
11dcc     A7 12 62 FC | 	wrlong	arg01, fp
11dd0     A7 12 02 F6 | 	mov	arg01, fp
11dd4     F0 77 BF FD | 	call	#_push
11dd8     A7 F0 03 F6 | 	mov	ptra, fp
11ddc     B2 00 A0 FD | 	call	#popregs_
11de0                 | _do_mousew_ret
11de0     2D 00 64 FD | 	ret
11de4                 | 
11de4                 | ' 
11de4                 | ' sub do_mousek
11de4                 | _do_mousek
11de4     00 4A 05 F6 | 	mov	COUNT_, #0
11de8     A8 00 A0 FD | 	call	#pushregs_
11dec     0C F0 07 F1 | 	add	ptra, #12
11df0     08 4E 05 F1 | 	add	fp, #8
11df4     A7 3A 68 FC | 	wrlong	#29, fp
11df8     08 4E 85 F1 | 	sub	fp, #8
11dfc     79 00 00 FF 
11e00     C8 E5 05 F1 | 	add	objptr, ##62408
11e04     F2 12 02 FB | 	rdlong	arg01, objptr
11e08     79 00 00 FF 
11e0c     C8 E5 85 F1 | 	sub	objptr, ##62408
11e10     A7 12 62 FC | 	wrlong	arg01, fp
11e14     A7 12 02 F6 | 	mov	arg01, fp
11e18     AC 77 BF FD | 	call	#_push
11e1c     A7 F0 03 F6 | 	mov	ptra, fp
11e20     B2 00 A0 FD | 	call	#popregs_
11e24                 | _do_mousek_ret
11e24     2D 00 64 FD | 	ret
11e28                 | 
11e28                 | ' 
11e28                 | ' 
11e28                 | ' sub do_rdpin
11e28                 | _do_rdpin
11e28     00 4A 05 F6 | 	mov	COUNT_, #0
11e2c     A8 00 A0 FD | 	call	#pushregs_
11e30     0C F0 07 F1 | 	add	ptra, #12
11e34     F8 76 BF FD | 	call	#_pop
11e38     A7 FA 61 FC | 	wrlong	result1, fp
11e3c     04 4E 05 F1 | 	add	fp, #4
11e40     A7 FC 61 FC | 	wrlong	result2, fp
11e44     04 4E 05 F1 | 	add	fp, #4
11e48     A7 FE 61 FC | 	wrlong	result3, fp
11e4c     08 4E 85 F1 | 	sub	fp, #8
11e50     A7 12 02 F6 | 	mov	arg01, fp
11e54     68 EB BF FD | 	call	#_converttoint
11e58     FD FA 89 FA | 	rdpin	result1, result1
11e5c     7A 00 00 FF 
11e60     C8 E4 05 F1 | 	add	objptr, ##62664
11e64     F2 FA 61 FC | 	wrlong	result1, objptr
11e68     7A 00 00 FF 
11e6c     C8 E4 85 F1 | 	sub	objptr, ##62664
11e70     08 4E 05 F1 | 	add	fp, #8
11e74     A7 3A 68 FC | 	wrlong	#29, fp
11e78     08 4E 85 F1 | 	sub	fp, #8
11e7c     A7 08 68 FC | 	wrlong	#4, fp
11e80     A7 12 02 F6 | 	mov	arg01, fp
11e84     40 77 BF FD | 	call	#_push
11e88     A7 F0 03 F6 | 	mov	ptra, fp
11e8c     B2 00 A0 FD | 	call	#popregs_
11e90                 | _do_rdpin_ret
11e90     2D 00 64 FD | 	ret
11e94                 | 
11e94                 | ' 
11e94                 | ' sub do_rqpin
11e94                 | _do_rqpin
11e94     00 4A 05 F6 | 	mov	COUNT_, #0
11e98     A8 00 A0 FD | 	call	#pushregs_
11e9c     0C F0 07 F1 | 	add	ptra, #12
11ea0     8C 76 BF FD | 	call	#_pop
11ea4     A7 FA 61 FC | 	wrlong	result1, fp
11ea8     04 4E 05 F1 | 	add	fp, #4
11eac     A7 FC 61 FC | 	wrlong	result2, fp
11eb0     04 4E 05 F1 | 	add	fp, #4
11eb4     A7 FE 61 FC | 	wrlong	result3, fp
11eb8     08 4E 85 F1 | 	sub	fp, #8
11ebc     A7 12 02 F6 | 	mov	arg01, fp
11ec0     FC EA BF FD | 	call	#_converttoint
11ec4     FD 12 02 F6 | 	mov	arg01, result1
11ec8     00 FA 05 F6 | 	mov	result1, #0
11ecc     09 FB 81 FA | 	rqpin	result1, arg01
11ed0     7A 00 00 FF 
11ed4     C8 E4 05 F1 | 	add	objptr, ##62664
11ed8     F2 FA 61 FC | 	wrlong	result1, objptr
11edc     7A 00 00 FF 
11ee0     C8 E4 85 F1 | 	sub	objptr, ##62664
11ee4     08 4E 05 F1 | 	add	fp, #8
11ee8     A7 3A 68 FC | 	wrlong	#29, fp
11eec     08 4E 85 F1 | 	sub	fp, #8
11ef0     A7 08 68 FC | 	wrlong	#4, fp
11ef4     A7 12 02 F6 | 	mov	arg01, fp
11ef8     CC 76 BF FD | 	call	#_push
11efc     A7 F0 03 F6 | 	mov	ptra, fp
11f00     B2 00 A0 FD | 	call	#popregs_
11f04                 | _do_rqpin_ret
11f04     2D 00 64 FD | 	ret
11f08                 | 
11f08                 | ' 
11f08                 | ' sub do_pinread
11f08                 | _do_pinread
11f08     00 4A 05 F6 | 	mov	COUNT_, #0
11f0c     A8 00 A0 FD | 	call	#pushregs_
11f10     0C F0 07 F1 | 	add	ptra, #12
11f14     18 76 BF FD | 	call	#_pop
11f18     A7 FA 61 FC | 	wrlong	result1, fp
11f1c     04 4E 05 F1 | 	add	fp, #4
11f20     A7 FC 61 FC | 	wrlong	result2, fp
11f24     04 4E 05 F1 | 	add	fp, #4
11f28     A7 FE 61 FC | 	wrlong	result3, fp
11f2c     08 4E 85 F1 | 	sub	fp, #8
11f30     A7 12 02 F6 | 	mov	arg01, fp
11f34     88 EA BF FD | 	call	#_converttoint
11f38     FD 12 02 F6 | 	mov	arg01, result1
11f3c     20 12 CE F7 | 	test	arg01, #32 wz
11f40     FF FB 01 56 |  if_ne	mov	result1, inb
11f44     FE FB 01 A6 |  if_e	mov	result1, ina
11f48     09 FB 41 F0 | 	shr	result1, arg01
11f4c     06 12 46 F0 | 	shr	arg01, #6
11f50     09 FB 41 F7 | 	zerox	result1, arg01
11f54     7A 00 00 FF 
11f58     C8 E4 05 F1 | 	add	objptr, ##62664
11f5c     F2 FA 61 FC | 	wrlong	result1, objptr
11f60     7A 00 00 FF 
11f64     C8 E4 85 F1 | 	sub	objptr, ##62664
11f68     08 4E 05 F1 | 	add	fp, #8
11f6c     A7 3A 68 FC | 	wrlong	#29, fp
11f70     08 4E 85 F1 | 	sub	fp, #8
11f74     A7 08 68 FC | 	wrlong	#4, fp
11f78     A7 12 02 F6 | 	mov	arg01, fp
11f7c     48 76 BF FD | 	call	#_push
11f80     A7 F0 03 F6 | 	mov	ptra, fp
11f84     B2 00 A0 FD | 	call	#popregs_
11f88                 | _do_pinread_ret
11f88     2D 00 64 FD | 	ret
11f8c                 | 
11f8c                 | ' 
11f8c                 | ' sub do_gettime
11f8c                 | _do_gettime
11f8c     02 4A 05 F6 | 	mov	COUNT_, #2
11f90     A8 00 A0 FD | 	call	#pushregs_
11f94     14 F0 07 F1 | 	add	ptra, #20
11f98                 | ' 
11f98                 | ' const asm 
11f98     1A 1E 72 FD | 	getct	local01 wc
11f9c     1A 20 62 FD | 	getct	local02
11fa0                 | ' 
11fa0                 | ' return hi1, lo1
11fa0     10 FD 01 F6 | 	mov	result2, local02
11fa4     A7 1E 62 FC | 	wrlong	local01, fp
11fa8     04 4E 05 F1 | 	add	fp, #4
11fac     A7 FC 61 FC | 	wrlong	result2, fp
11fb0     0C 4E 05 F1 | 	add	fp, #12
11fb4     A7 3A 68 FC | 	wrlong	#29, fp
11fb8     0C 4E 85 F1 | 	sub	fp, #12
11fbc     A7 12 02 FB | 	rdlong	arg01, fp
11fc0     04 4E 05 F1 | 	add	fp, #4
11fc4     A7 12 62 FC | 	wrlong	arg01, fp
11fc8     08 4E 85 F1 | 	sub	fp, #8
11fcc     A7 12 02 FB | 	rdlong	arg01, fp
11fd0     0C 4E 05 F1 | 	add	fp, #12
11fd4     A7 12 62 FC | 	wrlong	arg01, fp
11fd8     04 4E 85 F1 | 	sub	fp, #4
11fdc     A7 12 02 F6 | 	mov	arg01, fp
11fe0     08 4E 85 F1 | 	sub	fp, #8
11fe4     E0 75 BF FD | 	call	#_push
11fe8     A7 F0 03 F6 | 	mov	ptra, fp
11fec     B2 00 A0 FD | 	call	#popregs_
11ff0                 | _do_gettime_ret
11ff0     2D 00 64 FD | 	ret
11ff4                 | 
11ff4                 | '    
11ff4                 | ' 
11ff4                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
11ff4                 | ' 
11ff4                 | ' '' ----------------------------- Clear the screen
11ff4                 | ' 
11ff4                 | ' sub do_cls
11ff4                 | _do_cls
11ff4     56 00 00 FF 
11ff8     10 E4 05 F1 | 	add	objptr, ##44048
11ffc     F2 12 02 FB | 	rdlong	arg01, objptr
12000     04 E4 85 F1 | 	sub	objptr, #4
12004     F2 14 02 FB | 	rdlong	arg02, objptr
12008     56 00 00 FF 
1200c     0C E4 85 F1 | 	sub	objptr, ##44044
12010     D0 55 B0 FD | 	call	#_hg010b_spin2_cls
12014     56 00 00 FF 
12018     10 E4 05 F1 | 	add	objptr, ##44048
1201c     F2 14 02 FB | 	rdlong	arg02, objptr
12020     14 E4 85 F1 | 	sub	objptr, #20
12024     F2 14 62 FC | 	wrlong	arg02, objptr
12028     55 00 00 FF 
1202c     FC E5 85 F1 | 	sub	objptr, ##44028
12030                 | ' cls(ink,paper): plot_color=ink: print
12030     00 12 06 F6 | 	mov	arg01, #0
12034     8C C0 B0 FD | 	call	#__system___getiolock_0417
12038     FD 12 02 F6 | 	mov	arg01, result1
1203c     88 68 B0 FD | 	call	#__system___lockmem
12040     00 12 06 F6 | 	mov	arg01, #0
12044     0A 14 06 F6 | 	mov	arg02, #10
12048     00 16 06 F6 | 	mov	arg03, #0
1204c     10 75 B0 FD | 	call	#__system___basic_print_char
12050     00 12 06 F6 | 	mov	arg01, #0
12054     6C C0 B0 FD | 	call	#__system___getiolock_0417
12058     FD 00 68 FC | 	wrlong	#0, result1
1205c                 | _do_cls_ret
1205c     2D 00 64 FD | 	ret
12060                 | 
12060                 | ' 
12060                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
12060                 | ' 
12060                 | ' sub do_color
12060                 | _do_color
12060     03 4A 05 F6 | 	mov	COUNT_, #3
12064     A8 00 A0 FD | 	call	#pushregs_
12068     C4 74 BF FD | 	call	#_pop
1206c     FD 1E 02 F6 | 	mov	local01, result1
12070     FE 20 02 F6 | 	mov	local02, result2
12074     FF 22 02 F6 | 	mov	local03, result3
12078     55 00 00 FF 
1207c     FC E5 05 F1 | 	add	objptr, ##44028
12080     F2 1E 62 FC | 	wrlong	local01, objptr
12084     55 00 00 FF 
12088     FC E5 85 F1 | 	sub	objptr, ##44028
1208c     A7 F0 03 F6 | 	mov	ptra, fp
12090     B2 00 A0 FD | 	call	#popregs_
12094                 | _do_color_ret
12094     2D 00 64 FD | 	ret
12098                 | 
12098                 | ' 
12098                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
12098                 | ' 
12098                 | ' sub do_plot
12098                 | _do_plot
12098     08 4A 05 F6 | 	mov	COUNT_, #8
1209c     A8 00 A0 FD | 	call	#pushregs_
120a0     8C 74 BF FD | 	call	#_pop
120a4     FD 1E 02 F6 | 	mov	local01, result1
120a8     FE 14 02 F6 | 	mov	arg02, result2
120ac     FF 16 02 F6 | 	mov	arg03, result3
120b0     0A 21 02 F6 | 	mov	local02, arg02
120b4     0B 23 02 F6 | 	mov	local03, arg03
120b8     74 74 BF FD | 	call	#_pop
120bc     FD 24 02 F6 | 	mov	local04, result1
120c0     FE 26 02 F6 | 	mov	local05, result2
120c4     FF 28 02 F6 | 	mov	local06, result3
120c8     12 2B 02 F6 | 	mov	local07, local04
120cc     0F 2D 02 F6 | 	mov	local08, local01
120d0                 | ' t2=pop() 					 
120d0                 | ' t1=pop()
120d0                 | ' 
120d0                 | ' x=t1.result.iresult
120d0                 | ' y=t2.result.iresult	
120d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
120d0     1C 28 0E F2 | 	cmp	local06, #28 wz
120d4     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
120d8     44 00 90 5D |  if_ne	jmp	#LR__1450
120dc     1C 22 0E F2 | 	cmp	local03, #28 wz
120e0     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
120e4     38 00 90 5D |  if_ne	jmp	#LR__1450
120e8     56 00 00 FF 
120ec     00 E4 05 F1 | 	add	objptr, ##44032
120f0     F2 2A 62 FC | 	wrlong	local07, objptr
120f4     04 E4 05 F1 | 	add	objptr, #4
120f8     F2 2C 62 FC | 	wrlong	local08, objptr
120fc     04 E4 85 F1 | 	sub	objptr, #4
12100     F2 12 02 FB | 	rdlong	arg01, objptr
12104     04 E4 85 F1 | 	sub	objptr, #4
12108     F2 16 02 FB | 	rdlong	arg03, objptr
1210c     55 00 00 FF 
12110     FC E5 85 F1 | 	sub	objptr, ##44028
12114     16 15 02 F6 | 	mov	arg02, local08
12118     5C 48 B0 FD | 	call	#_hg010b_spin2_putpixel
1211c     A4 00 90 FD | 	jmp	#LR__1455
12120                 | LR__1450
12120                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
12120     1E 28 0E F2 | 	cmp	local06, #30 wz
12124     10 00 90 5D |  if_ne	jmp	#LR__1451
12128     12 13 02 F6 | 	mov	arg01, local04
1212c     01 14 06 F6 | 	mov	arg02, #1
12130     40 96 B0 FD | 	call	#__system___float_tointeger
12134     FD 2A 02 F6 | 	mov	local07, result1
12138                 | LR__1451
12138                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
12138     1E 22 0E F2 | 	cmp	local03, #30 wz
1213c     10 00 90 5D |  if_ne	jmp	#LR__1452
12140     0F 13 02 F6 | 	mov	arg01, local01
12144     01 14 06 F6 | 	mov	arg02, #1
12148     28 96 B0 FD | 	call	#__system___float_tointeger
1214c     FD 2C 02 F6 | 	mov	local08, result1
12150                 | LR__1452
12150                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
12150     1F 28 0E F2 | 	cmp	local06, #31 wz
12154     18 00 90 5D |  if_ne	jmp	#LR__1453
12158     12 13 02 F6 | 	mov	arg01, local04
1215c     34 99 B0 FD | 	call	#__system____builtin_atof
12160     FD 12 02 F6 | 	mov	arg01, result1
12164     00 14 06 F6 | 	mov	arg02, #0
12168     08 96 B0 FD | 	call	#__system___float_tointeger
1216c     FD 2A 02 F6 | 	mov	local07, result1
12170                 | LR__1453
12170                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
12170     1F 22 0E F2 | 	cmp	local03, #31 wz
12174     18 00 90 5D |  if_ne	jmp	#LR__1454
12178     0F 13 02 F6 | 	mov	arg01, local01
1217c     14 99 B0 FD | 	call	#__system____builtin_atof
12180     FD 12 02 F6 | 	mov	arg01, result1
12184     00 14 06 F6 | 	mov	arg02, #0
12188     E8 95 B0 FD | 	call	#__system___float_tointeger
1218c     FD 2C 02 F6 | 	mov	local08, result1
12190                 | LR__1454
12190     56 00 00 FF 
12194     00 E4 05 F1 | 	add	objptr, ##44032
12198     F2 2A 62 FC | 	wrlong	local07, objptr
1219c     04 E4 05 F1 | 	add	objptr, #4
121a0     F2 2C 62 FC | 	wrlong	local08, objptr
121a4     04 E4 85 F1 | 	sub	objptr, #4
121a8     F2 12 02 FB | 	rdlong	arg01, objptr
121ac     04 E4 85 F1 | 	sub	objptr, #4
121b0     F2 16 02 FB | 	rdlong	arg03, objptr
121b4     55 00 00 FF 
121b8     FC E5 85 F1 | 	sub	objptr, ##44028
121bc     16 15 02 F6 | 	mov	arg02, local08
121c0     B4 47 B0 FD | 	call	#_hg010b_spin2_putpixel
121c4                 | LR__1455
121c4     A7 F0 03 F6 | 	mov	ptra, fp
121c8     B2 00 A0 FD | 	call	#popregs_
121cc                 | _do_plot_ret
121cc     2D 00 64 FD | 	ret
121d0                 | 
121d0                 | ' 
121d0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
121d0                 | ' 
121d0                 | ' sub do_draw
121d0                 | _do_draw
121d0     08 4A 05 F6 | 	mov	COUNT_, #8
121d4     A8 00 A0 FD | 	call	#pushregs_
121d8     54 73 BF FD | 	call	#_pop
121dc     FD 1E 02 F6 | 	mov	local01, result1
121e0     FE 18 02 F6 | 	mov	arg04, result2
121e4     FF 16 02 F6 | 	mov	arg03, result3
121e8     0C 21 02 F6 | 	mov	local02, arg04
121ec     0B 23 02 F6 | 	mov	local03, arg03
121f0     3C 73 BF FD | 	call	#_pop
121f4     FD 24 02 F6 | 	mov	local04, result1
121f8     FE 26 02 F6 | 	mov	local05, result2
121fc     FF 28 02 F6 | 	mov	local06, result3
12200     12 2B 02 F6 | 	mov	local07, local04
12204     0F 2D 02 F6 | 	mov	local08, local01
12208                 | ' 
12208                 | ' t2=pop()
12208                 | ' t1=pop()
12208                 | ' x=t1.result.iresult
12208                 | ' y=t2.result.iresult
12208                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
12208     1C 28 0E F2 | 	cmp	local06, #28 wz
1220c     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
12210     5C 00 90 5D |  if_ne	jmp	#LR__1460
12214     1C 22 0E F2 | 	cmp	local03, #28 wz
12218     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
1221c     50 00 90 5D |  if_ne	jmp	#LR__1460
12220     56 00 00 FF 
12224     00 E4 05 F1 | 	add	objptr, ##44032
12228     F2 12 02 FB | 	rdlong	arg01, objptr
1222c     04 E4 05 F1 | 	add	objptr, #4
12230     F2 14 02 FB | 	rdlong	arg02, objptr
12234     08 E4 85 F1 | 	sub	objptr, #8
12238     F2 1A 02 FB | 	rdlong	arg05, objptr
1223c     55 00 00 FF 
12240     FC E5 85 F1 | 	sub	objptr, ##44028
12244     15 17 02 F6 | 	mov	arg03, local07
12248     16 19 02 F6 | 	mov	arg04, local08
1224c     D8 49 B0 FD | 	call	#_hg010b_spin2_draw
12250     56 00 00 FF 
12254     00 E4 05 F1 | 	add	objptr, ##44032
12258     F2 2A 62 FC | 	wrlong	local07, objptr
1225c     04 E4 05 F1 | 	add	objptr, #4
12260     F2 2C 62 FC | 	wrlong	local08, objptr
12264     56 00 00 FF 
12268     04 E4 85 F1 | 	sub	objptr, ##44036
1226c     BC 00 90 FD | 	jmp	#LR__1465
12270                 | LR__1460
12270                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
12270     1E 28 0E F2 | 	cmp	local06, #30 wz
12274     10 00 90 5D |  if_ne	jmp	#LR__1461
12278     12 13 02 F6 | 	mov	arg01, local04
1227c     01 14 06 F6 | 	mov	arg02, #1
12280     F0 94 B0 FD | 	call	#__system___float_tointeger
12284     FD 2A 02 F6 | 	mov	local07, result1
12288                 | LR__1461
12288                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
12288     1E 22 0E F2 | 	cmp	local03, #30 wz
1228c     10 00 90 5D |  if_ne	jmp	#LR__1462
12290     0F 13 02 F6 | 	mov	arg01, local01
12294     01 14 06 F6 | 	mov	arg02, #1
12298     D8 94 B0 FD | 	call	#__system___float_tointeger
1229c     FD 2C 02 F6 | 	mov	local08, result1
122a0                 | LR__1462
122a0                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
122a0     1F 28 0E F2 | 	cmp	local06, #31 wz
122a4     18 00 90 5D |  if_ne	jmp	#LR__1463
122a8     12 13 02 F6 | 	mov	arg01, local04
122ac     E4 97 B0 FD | 	call	#__system____builtin_atof
122b0     FD 12 02 F6 | 	mov	arg01, result1
122b4     00 14 06 F6 | 	mov	arg02, #0
122b8     B8 94 B0 FD | 	call	#__system___float_tointeger
122bc     FD 2A 02 F6 | 	mov	local07, result1
122c0                 | LR__1463
122c0                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
122c0     1F 22 0E F2 | 	cmp	local03, #31 wz
122c4     18 00 90 5D |  if_ne	jmp	#LR__1464
122c8     0F 13 02 F6 | 	mov	arg01, local01
122cc     C4 97 B0 FD | 	call	#__system____builtin_atof
122d0     FD 12 02 F6 | 	mov	arg01, result1
122d4     00 14 06 F6 | 	mov	arg02, #0
122d8     98 94 B0 FD | 	call	#__system___float_tointeger
122dc     FD 2C 02 F6 | 	mov	local08, result1
122e0                 | LR__1464
122e0     56 00 00 FF 
122e4     00 E4 05 F1 | 	add	objptr, ##44032
122e8     F2 12 02 FB | 	rdlong	arg01, objptr
122ec     04 E4 05 F1 | 	add	objptr, #4
122f0     F2 14 02 FB | 	rdlong	arg02, objptr
122f4     08 E4 85 F1 | 	sub	objptr, #8
122f8     F2 1A 02 FB | 	rdlong	arg05, objptr
122fc     55 00 00 FF 
12300     FC E5 85 F1 | 	sub	objptr, ##44028
12304     15 17 02 F6 | 	mov	arg03, local07
12308     16 19 02 F6 | 	mov	arg04, local08
1230c     18 49 B0 FD | 	call	#_hg010b_spin2_draw
12310     56 00 00 FF 
12314     00 E4 05 F1 | 	add	objptr, ##44032
12318     F2 2A 62 FC | 	wrlong	local07, objptr
1231c     04 E4 05 F1 | 	add	objptr, #4
12320     F2 2C 62 FC | 	wrlong	local08, objptr
12324     56 00 00 FF 
12328     04 E4 85 F1 | 	sub	objptr, ##44036
1232c                 | LR__1465
1232c     A7 F0 03 F6 | 	mov	ptra, fp
12330     B2 00 A0 FD | 	call	#popregs_
12334                 | _do_draw_ret
12334     2D 00 64 FD | 	ret
12338                 | 
12338                 | ' 
12338                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
12338                 | ' 
12338                 | ' sub do_fcircle
12338                 | _do_fcircle
12338     02 4A 05 F6 | 	mov	COUNT_, #2
1233c     A8 00 A0 FD | 	call	#pushregs_
12340     24 F0 07 F1 | 	add	ptra, #36
12344     E8 71 BF FD | 	call	#_pop
12348     FD 18 02 F6 | 	mov	arg04, result1
1234c     FE 16 02 F6 | 	mov	arg03, result2
12350     FF 14 02 F6 | 	mov	arg02, result3
12354     18 4E 05 F1 | 	add	fp, #24
12358     A7 18 62 FC | 	wrlong	arg04, fp
1235c     04 4E 05 F1 | 	add	fp, #4
12360     A7 16 62 FC | 	wrlong	arg03, fp
12364     04 4E 05 F1 | 	add	fp, #4
12368     A7 14 62 FC | 	wrlong	arg02, fp
1236c     20 4E 85 F1 | 	sub	fp, #32
12370     BC 71 BF FD | 	call	#_pop
12374     FD 18 02 F6 | 	mov	arg04, result1
12378     FE 16 02 F6 | 	mov	arg03, result2
1237c     FF 1E 02 F6 | 	mov	local01, result3
12380     0C 4E 05 F1 | 	add	fp, #12
12384     A7 18 62 FC | 	wrlong	arg04, fp
12388     04 4E 05 F1 | 	add	fp, #4
1238c     A7 16 62 FC | 	wrlong	arg03, fp
12390     04 4E 05 F1 | 	add	fp, #4
12394     A7 1E 62 FC | 	wrlong	local01, fp
12398     14 4E 85 F1 | 	sub	fp, #20
1239c     90 71 BF FD | 	call	#_pop
123a0     A7 FA 61 FC | 	wrlong	result1, fp
123a4     04 4E 05 F1 | 	add	fp, #4
123a8     A7 FC 61 FC | 	wrlong	result2, fp
123ac     04 4E 05 F1 | 	add	fp, #4
123b0     A7 FE 61 FC | 	wrlong	result3, fp
123b4                 | ' 
123b4                 | ' t3=pop()
123b4                 | ' t2=pop()
123b4                 | ' t1=pop()
123b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
123b4     FF 18 02 F6 | 	mov	arg04, result3
123b8     08 4E 85 F1 | 	sub	fp, #8
123bc     1C 18 0E F2 | 	cmp	arg04, #28 wz
123c0     08 4E 05 51 |  if_ne	add	fp, #8
123c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
123c8     08 4E 85 51 |  if_ne	sub	fp, #8
123cc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
123d0     7C 00 90 5D |  if_ne	jmp	#LR__1470
123d4     14 4E 05 F1 | 	add	fp, #20
123d8     A7 1E 02 FB | 	rdlong	local01, fp
123dc     14 4E 85 F1 | 	sub	fp, #20
123e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
123e4     14 4E 05 51 |  if_ne	add	fp, #20
123e8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
123ec     14 4E 85 51 |  if_ne	sub	fp, #20
123f0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
123f4     58 00 90 5D |  if_ne	jmp	#LR__1470
123f8     20 4E 05 F1 | 	add	fp, #32
123fc     A7 1E 02 FB | 	rdlong	local01, fp
12400     20 4E 85 F1 | 	sub	fp, #32
12404     1C 1E 0E F2 | 	cmp	local01, #28 wz
12408     20 4E 05 51 |  if_ne	add	fp, #32
1240c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12410     20 4E 85 51 |  if_ne	sub	fp, #32
12414     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12418     34 00 90 5D |  if_ne	jmp	#LR__1470
1241c     A7 12 02 FB | 	rdlong	arg01, fp
12420     0C 4E 05 F1 | 	add	fp, #12
12424     A7 14 02 FB | 	rdlong	arg02, fp
12428     0C 4E 05 F1 | 	add	fp, #12
1242c     A7 16 02 FB | 	rdlong	arg03, fp
12430     18 4E 85 F1 | 	sub	fp, #24
12434     55 00 00 FF 
12438     FC E5 05 F1 | 	add	objptr, ##44028
1243c     F2 18 02 FB | 	rdlong	arg04, objptr
12440     55 00 00 FF 
12444     FC E5 85 F1 | 	sub	objptr, ##44028
12448     60 4C B0 FD | 	call	#_hg010b_spin2_fcircle
1244c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1244c     54 00 90 FD | 	jmp	#LR__1471
12450                 | LR__1470
12450     A7 12 02 F6 | 	mov	arg01, fp
12454     68 E5 BF FD | 	call	#_converttoint
12458     FD 1E 02 F6 | 	mov	local01, result1
1245c     0C 4E 05 F1 | 	add	fp, #12
12460     A7 12 02 F6 | 	mov	arg01, fp
12464     0C 4E 85 F1 | 	sub	fp, #12
12468     54 E5 BF FD | 	call	#_converttoint
1246c     FD 20 02 F6 | 	mov	local02, result1
12470     18 4E 05 F1 | 	add	fp, #24
12474     A7 12 02 F6 | 	mov	arg01, fp
12478     18 4E 85 F1 | 	sub	fp, #24
1247c     40 E5 BF FD | 	call	#_converttoint
12480     FD 16 02 F6 | 	mov	arg03, result1
12484     55 00 00 FF 
12488     FC E5 05 F1 | 	add	objptr, ##44028
1248c     F2 18 02 FB | 	rdlong	arg04, objptr
12490     55 00 00 FF 
12494     FC E5 85 F1 | 	sub	objptr, ##44028
12498     0F 13 02 F6 | 	mov	arg01, local01
1249c     10 15 02 F6 | 	mov	arg02, local02
124a0     08 4C B0 FD | 	call	#_hg010b_spin2_fcircle
124a4                 | LR__1471
124a4     A7 F0 03 F6 | 	mov	ptra, fp
124a8     B2 00 A0 FD | 	call	#popregs_
124ac                 | _do_fcircle_ret
124ac     2D 00 64 FD | 	ret
124b0                 | 
124b0                 | ' 
124b0                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
124b0                 | ' 
124b0                 | ' sub do_circle
124b0                 | _do_circle
124b0     02 4A 05 F6 | 	mov	COUNT_, #2
124b4     A8 00 A0 FD | 	call	#pushregs_
124b8     24 F0 07 F1 | 	add	ptra, #36
124bc     70 70 BF FD | 	call	#_pop
124c0     FD 18 02 F6 | 	mov	arg04, result1
124c4     FE 16 02 F6 | 	mov	arg03, result2
124c8     FF 14 02 F6 | 	mov	arg02, result3
124cc     18 4E 05 F1 | 	add	fp, #24
124d0     A7 18 62 FC | 	wrlong	arg04, fp
124d4     04 4E 05 F1 | 	add	fp, #4
124d8     A7 16 62 FC | 	wrlong	arg03, fp
124dc     04 4E 05 F1 | 	add	fp, #4
124e0     A7 14 62 FC | 	wrlong	arg02, fp
124e4     20 4E 85 F1 | 	sub	fp, #32
124e8     44 70 BF FD | 	call	#_pop
124ec     FD 18 02 F6 | 	mov	arg04, result1
124f0     FE 16 02 F6 | 	mov	arg03, result2
124f4     FF 1E 02 F6 | 	mov	local01, result3
124f8     0C 4E 05 F1 | 	add	fp, #12
124fc     A7 18 62 FC | 	wrlong	arg04, fp
12500     04 4E 05 F1 | 	add	fp, #4
12504     A7 16 62 FC | 	wrlong	arg03, fp
12508     04 4E 05 F1 | 	add	fp, #4
1250c     A7 1E 62 FC | 	wrlong	local01, fp
12510     14 4E 85 F1 | 	sub	fp, #20
12514     18 70 BF FD | 	call	#_pop
12518     A7 FA 61 FC | 	wrlong	result1, fp
1251c     04 4E 05 F1 | 	add	fp, #4
12520     A7 FC 61 FC | 	wrlong	result2, fp
12524     04 4E 05 F1 | 	add	fp, #4
12528     A7 FE 61 FC | 	wrlong	result3, fp
1252c                 | ' 
1252c                 | ' t3=pop()
1252c                 | ' t2=pop()
1252c                 | ' t1=pop()
1252c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1252c     FF 18 02 F6 | 	mov	arg04, result3
12530     08 4E 85 F1 | 	sub	fp, #8
12534     1C 18 0E F2 | 	cmp	arg04, #28 wz
12538     08 4E 05 51 |  if_ne	add	fp, #8
1253c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12540     08 4E 85 51 |  if_ne	sub	fp, #8
12544     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12548     7C 00 90 5D |  if_ne	jmp	#LR__1480
1254c     14 4E 05 F1 | 	add	fp, #20
12550     A7 1E 02 FB | 	rdlong	local01, fp
12554     14 4E 85 F1 | 	sub	fp, #20
12558     1C 1E 0E F2 | 	cmp	local01, #28 wz
1255c     14 4E 05 51 |  if_ne	add	fp, #20
12560     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12564     14 4E 85 51 |  if_ne	sub	fp, #20
12568     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1256c     58 00 90 5D |  if_ne	jmp	#LR__1480
12570     20 4E 05 F1 | 	add	fp, #32
12574     A7 1E 02 FB | 	rdlong	local01, fp
12578     20 4E 85 F1 | 	sub	fp, #32
1257c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12580     20 4E 05 51 |  if_ne	add	fp, #32
12584     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12588     20 4E 85 51 |  if_ne	sub	fp, #32
1258c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12590     34 00 90 5D |  if_ne	jmp	#LR__1480
12594     A7 12 02 FB | 	rdlong	arg01, fp
12598     0C 4E 05 F1 | 	add	fp, #12
1259c     A7 14 02 FB | 	rdlong	arg02, fp
125a0     0C 4E 05 F1 | 	add	fp, #12
125a4     A7 16 02 FB | 	rdlong	arg03, fp
125a8     18 4E 85 F1 | 	sub	fp, #24
125ac     55 00 00 FF 
125b0     FC E5 05 F1 | 	add	objptr, ##44028
125b4     F2 18 02 FB | 	rdlong	arg04, objptr
125b8     55 00 00 FF 
125bc     FC E5 85 F1 | 	sub	objptr, ##44028
125c0     F4 4B B0 FD | 	call	#_hg010b_spin2_circle
125c4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
125c4     54 00 90 FD | 	jmp	#LR__1481
125c8                 | LR__1480
125c8     A7 12 02 F6 | 	mov	arg01, fp
125cc     F0 E3 BF FD | 	call	#_converttoint
125d0     FD 1E 02 F6 | 	mov	local01, result1
125d4     0C 4E 05 F1 | 	add	fp, #12
125d8     A7 12 02 F6 | 	mov	arg01, fp
125dc     0C 4E 85 F1 | 	sub	fp, #12
125e0     DC E3 BF FD | 	call	#_converttoint
125e4     FD 20 02 F6 | 	mov	local02, result1
125e8     18 4E 05 F1 | 	add	fp, #24
125ec     A7 12 02 F6 | 	mov	arg01, fp
125f0     18 4E 85 F1 | 	sub	fp, #24
125f4     C8 E3 BF FD | 	call	#_converttoint
125f8     FD 16 02 F6 | 	mov	arg03, result1
125fc     55 00 00 FF 
12600     FC E5 05 F1 | 	add	objptr, ##44028
12604     F2 18 02 FB | 	rdlong	arg04, objptr
12608     55 00 00 FF 
1260c     FC E5 85 F1 | 	sub	objptr, ##44028
12610     0F 13 02 F6 | 	mov	arg01, local01
12614     10 15 02 F6 | 	mov	arg02, local02
12618     9C 4B B0 FD | 	call	#_hg010b_spin2_circle
1261c                 | LR__1481
1261c     A7 F0 03 F6 | 	mov	ptra, fp
12620     B2 00 A0 FD | 	call	#popregs_
12624                 | _do_circle_ret
12624     2D 00 64 FD | 	ret
12628                 | 
12628                 | ' 
12628                 | ' ' -------------------------- Draw a rectangle
12628                 | ' 
12628                 | ' sub do_box
12628                 | _do_box
12628     03 4A 05 F6 | 	mov	COUNT_, #3
1262c     A8 00 A0 FD | 	call	#pushregs_
12630     30 F0 07 F1 | 	add	ptra, #48
12634     F8 6E BF FD | 	call	#_pop
12638     FD 1A 02 F6 | 	mov	arg05, result1
1263c     FE 18 02 F6 | 	mov	arg04, result2
12640     FF 16 02 F6 | 	mov	arg03, result3
12644     24 4E 05 F1 | 	add	fp, #36
12648     A7 1A 62 FC | 	wrlong	arg05, fp
1264c     04 4E 05 F1 | 	add	fp, #4
12650     A7 18 62 FC | 	wrlong	arg04, fp
12654     04 4E 05 F1 | 	add	fp, #4
12658     A7 16 62 FC | 	wrlong	arg03, fp
1265c     2C 4E 85 F1 | 	sub	fp, #44
12660     CC 6E BF FD | 	call	#_pop
12664     FD 1A 02 F6 | 	mov	arg05, result1
12668     FE 18 02 F6 | 	mov	arg04, result2
1266c     FF 16 02 F6 | 	mov	arg03, result3
12670     18 4E 05 F1 | 	add	fp, #24
12674     A7 1A 62 FC | 	wrlong	arg05, fp
12678     04 4E 05 F1 | 	add	fp, #4
1267c     A7 18 62 FC | 	wrlong	arg04, fp
12680     04 4E 05 F1 | 	add	fp, #4
12684     A7 16 62 FC | 	wrlong	arg03, fp
12688     20 4E 85 F1 | 	sub	fp, #32
1268c     A0 6E BF FD | 	call	#_pop
12690     FD 1A 02 F6 | 	mov	arg05, result1
12694     FE 18 02 F6 | 	mov	arg04, result2
12698     FF 1E 02 F6 | 	mov	local01, result3
1269c     0C 4E 05 F1 | 	add	fp, #12
126a0     A7 1A 62 FC | 	wrlong	arg05, fp
126a4     04 4E 05 F1 | 	add	fp, #4
126a8     A7 18 62 FC | 	wrlong	arg04, fp
126ac     04 4E 05 F1 | 	add	fp, #4
126b0     A7 1E 62 FC | 	wrlong	local01, fp
126b4     14 4E 85 F1 | 	sub	fp, #20
126b8     74 6E BF FD | 	call	#_pop
126bc     A7 FA 61 FC | 	wrlong	result1, fp
126c0     04 4E 05 F1 | 	add	fp, #4
126c4     A7 FC 61 FC | 	wrlong	result2, fp
126c8     04 4E 05 F1 | 	add	fp, #4
126cc     A7 FE 61 FC | 	wrlong	result3, fp
126d0                 | ' 
126d0                 | ' t4=pop()
126d0                 | ' t3=pop()
126d0                 | ' t2=pop()
126d0                 | ' t1=pop()
126d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
126d0     FF 1A 02 F6 | 	mov	arg05, result3
126d4     08 4E 85 F1 | 	sub	fp, #8
126d8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
126dc     08 4E 05 51 |  if_ne	add	fp, #8
126e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
126e4     08 4E 85 51 |  if_ne	sub	fp, #8
126e8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
126ec     A8 00 90 5D |  if_ne	jmp	#LR__1490
126f0     14 4E 05 F1 | 	add	fp, #20
126f4     A7 1E 02 FB | 	rdlong	local01, fp
126f8     14 4E 85 F1 | 	sub	fp, #20
126fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12700     14 4E 05 51 |  if_ne	add	fp, #20
12704     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12708     14 4E 85 51 |  if_ne	sub	fp, #20
1270c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12710     84 00 90 5D |  if_ne	jmp	#LR__1490
12714     20 4E 05 F1 | 	add	fp, #32
12718     A7 1E 02 FB | 	rdlong	local01, fp
1271c     20 4E 85 F1 | 	sub	fp, #32
12720     1C 1E 0E F2 | 	cmp	local01, #28 wz
12724     20 4E 05 51 |  if_ne	add	fp, #32
12728     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1272c     20 4E 85 51 |  if_ne	sub	fp, #32
12730     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12734     60 00 90 5D |  if_ne	jmp	#LR__1490
12738     2C 4E 05 F1 | 	add	fp, #44
1273c     A7 1E 02 FB | 	rdlong	local01, fp
12740     2C 4E 85 F1 | 	sub	fp, #44
12744     1C 1E 0E F2 | 	cmp	local01, #28 wz
12748     2C 4E 05 51 |  if_ne	add	fp, #44
1274c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12750     2C 4E 85 51 |  if_ne	sub	fp, #44
12754     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12758     3C 00 90 5D |  if_ne	jmp	#LR__1490
1275c     A7 12 02 FB | 	rdlong	arg01, fp
12760     0C 4E 05 F1 | 	add	fp, #12
12764     A7 14 02 FB | 	rdlong	arg02, fp
12768     0C 4E 05 F1 | 	add	fp, #12
1276c     A7 16 02 FB | 	rdlong	arg03, fp
12770     0C 4E 05 F1 | 	add	fp, #12
12774     A7 18 02 FB | 	rdlong	arg04, fp
12778     24 4E 85 F1 | 	sub	fp, #36
1277c     55 00 00 FF 
12780     FC E5 05 F1 | 	add	objptr, ##44028
12784     F2 1A 02 FB | 	rdlong	arg05, objptr
12788     55 00 00 FF 
1278c     FC E5 85 F1 | 	sub	objptr, ##44028
12790     F0 4B B0 FD | 	call	#_hg010b_spin2_box
12794                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12794     6C 00 90 FD | 	jmp	#LR__1491
12798                 | LR__1490
12798     A7 12 02 F6 | 	mov	arg01, fp
1279c     20 E2 BF FD | 	call	#_converttoint
127a0     FD 20 02 F6 | 	mov	local02, result1
127a4     0C 4E 05 F1 | 	add	fp, #12
127a8     A7 12 02 F6 | 	mov	arg01, fp
127ac     0C 4E 85 F1 | 	sub	fp, #12
127b0     0C E2 BF FD | 	call	#_converttoint
127b4     FD 22 02 F6 | 	mov	local03, result1
127b8     18 4E 05 F1 | 	add	fp, #24
127bc     A7 12 02 F6 | 	mov	arg01, fp
127c0     18 4E 85 F1 | 	sub	fp, #24
127c4     F8 E1 BF FD | 	call	#_converttoint
127c8     FD 1E 02 F6 | 	mov	local01, result1
127cc     24 4E 05 F1 | 	add	fp, #36
127d0     A7 12 02 F6 | 	mov	arg01, fp
127d4     24 4E 85 F1 | 	sub	fp, #36
127d8     E4 E1 BF FD | 	call	#_converttoint
127dc     FD 18 02 F6 | 	mov	arg04, result1
127e0     55 00 00 FF 
127e4     FC E5 05 F1 | 	add	objptr, ##44028
127e8     F2 1A 02 FB | 	rdlong	arg05, objptr
127ec     55 00 00 FF 
127f0     FC E5 85 F1 | 	sub	objptr, ##44028
127f4     10 13 02 F6 | 	mov	arg01, local02
127f8     11 15 02 F6 | 	mov	arg02, local03
127fc     0F 17 02 F6 | 	mov	arg03, local01
12800     80 4B B0 FD | 	call	#_hg010b_spin2_box
12804                 | LR__1491
12804     A7 F0 03 F6 | 	mov	ptra, fp
12808     B2 00 A0 FD | 	call	#popregs_
1280c                 | _do_box_ret
1280c     2D 00 64 FD | 	ret
12810                 | 
12810                 | ' 
12810                 | ' sub do_fill
12810                 | _do_fill
12810     03 4A 05 F6 | 	mov	COUNT_, #3
12814     A8 00 A0 FD | 	call	#pushregs_
12818     30 F0 07 F1 | 	add	ptra, #48
1281c     10 6D BF FD | 	call	#_pop
12820     FD 18 02 F6 | 	mov	arg04, result1
12824     FE 16 02 F6 | 	mov	arg03, result2
12828     FF 14 02 F6 | 	mov	arg02, result3
1282c     24 4E 05 F1 | 	add	fp, #36
12830     A7 18 62 FC | 	wrlong	arg04, fp
12834     04 4E 05 F1 | 	add	fp, #4
12838     A7 16 62 FC | 	wrlong	arg03, fp
1283c     04 4E 05 F1 | 	add	fp, #4
12840     A7 14 62 FC | 	wrlong	arg02, fp
12844     2C 4E 85 F1 | 	sub	fp, #44
12848     E4 6C BF FD | 	call	#_pop
1284c     FD 18 02 F6 | 	mov	arg04, result1
12850     FE 16 02 F6 | 	mov	arg03, result2
12854     FF 14 02 F6 | 	mov	arg02, result3
12858     18 4E 05 F1 | 	add	fp, #24
1285c     A7 18 62 FC | 	wrlong	arg04, fp
12860     04 4E 05 F1 | 	add	fp, #4
12864     A7 16 62 FC | 	wrlong	arg03, fp
12868     04 4E 05 F1 | 	add	fp, #4
1286c     A7 14 62 FC | 	wrlong	arg02, fp
12870     20 4E 85 F1 | 	sub	fp, #32
12874     B8 6C BF FD | 	call	#_pop
12878     FD 18 02 F6 | 	mov	arg04, result1
1287c     FE 16 02 F6 | 	mov	arg03, result2
12880     FF 1E 02 F6 | 	mov	local01, result3
12884     0C 4E 05 F1 | 	add	fp, #12
12888     A7 18 62 FC | 	wrlong	arg04, fp
1288c     04 4E 05 F1 | 	add	fp, #4
12890     A7 16 62 FC | 	wrlong	arg03, fp
12894     04 4E 05 F1 | 	add	fp, #4
12898     A7 1E 62 FC | 	wrlong	local01, fp
1289c     14 4E 85 F1 | 	sub	fp, #20
128a0     8C 6C BF FD | 	call	#_pop
128a4     A7 FA 61 FC | 	wrlong	result1, fp
128a8     04 4E 05 F1 | 	add	fp, #4
128ac     A7 FC 61 FC | 	wrlong	result2, fp
128b0     04 4E 05 F1 | 	add	fp, #4
128b4     A7 FE 61 FC | 	wrlong	result3, fp
128b8                 | ' 
128b8                 | ' t4=pop()
128b8                 | ' t3=pop()
128b8                 | ' t2=pop()
128b8                 | ' t1=pop()
128b8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
128b8     FF 18 02 F6 | 	mov	arg04, result3
128bc     08 4E 85 F1 | 	sub	fp, #8
128c0     1C 18 0E F2 | 	cmp	arg04, #28 wz
128c4     08 4E 05 51 |  if_ne	add	fp, #8
128c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
128cc     08 4E 85 51 |  if_ne	sub	fp, #8
128d0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
128d4     94 00 90 5D |  if_ne	jmp	#LR__1500
128d8     14 4E 05 F1 | 	add	fp, #20
128dc     A7 1E 02 FB | 	rdlong	local01, fp
128e0     14 4E 85 F1 | 	sub	fp, #20
128e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128e8     14 4E 05 51 |  if_ne	add	fp, #20
128ec     A7 18 02 5B |  if_ne	rdlong	arg04, fp
128f0     14 4E 85 51 |  if_ne	sub	fp, #20
128f4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
128f8     70 00 90 5D |  if_ne	jmp	#LR__1500
128fc     20 4E 05 F1 | 	add	fp, #32
12900     A7 1E 02 FB | 	rdlong	local01, fp
12904     20 4E 85 F1 | 	sub	fp, #32
12908     1C 1E 0E F2 | 	cmp	local01, #28 wz
1290c     20 4E 05 51 |  if_ne	add	fp, #32
12910     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12914     20 4E 85 51 |  if_ne	sub	fp, #32
12918     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1291c     4C 00 90 5D |  if_ne	jmp	#LR__1500
12920     2C 4E 05 F1 | 	add	fp, #44
12924     A7 1E 02 FB | 	rdlong	local01, fp
12928     2C 4E 85 F1 | 	sub	fp, #44
1292c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12930     2C 4E 05 51 |  if_ne	add	fp, #44
12934     A7 18 02 5B |  if_ne	rdlong	arg04, fp
12938     2C 4E 85 51 |  if_ne	sub	fp, #44
1293c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
12940     28 00 90 5D |  if_ne	jmp	#LR__1500
12944     A7 12 02 FB | 	rdlong	arg01, fp
12948     0C 4E 05 F1 | 	add	fp, #12
1294c     A7 14 02 FB | 	rdlong	arg02, fp
12950     0C 4E 05 F1 | 	add	fp, #12
12954     A7 16 02 FB | 	rdlong	arg03, fp
12958     0C 4E 05 F1 | 	add	fp, #12
1295c     A7 18 02 FB | 	rdlong	arg04, fp
12960     24 4E 85 F1 | 	sub	fp, #36
12964     B0 44 B0 FD | 	call	#_hg010b_spin2_fill
12968                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
12968     58 00 90 FD | 	jmp	#LR__1501
1296c                 | LR__1500
1296c     A7 12 02 F6 | 	mov	arg01, fp
12970     4C E0 BF FD | 	call	#_converttoint
12974     FD 20 02 F6 | 	mov	local02, result1
12978     0C 4E 05 F1 | 	add	fp, #12
1297c     A7 12 02 F6 | 	mov	arg01, fp
12980     0C 4E 85 F1 | 	sub	fp, #12
12984     38 E0 BF FD | 	call	#_converttoint
12988     FD 22 02 F6 | 	mov	local03, result1
1298c     18 4E 05 F1 | 	add	fp, #24
12990     A7 12 02 F6 | 	mov	arg01, fp
12994     18 4E 85 F1 | 	sub	fp, #24
12998     24 E0 BF FD | 	call	#_converttoint
1299c     FD 1E 02 F6 | 	mov	local01, result1
129a0     24 4E 05 F1 | 	add	fp, #36
129a4     A7 12 02 F6 | 	mov	arg01, fp
129a8     24 4E 85 F1 | 	sub	fp, #36
129ac     10 E0 BF FD | 	call	#_converttoint
129b0     FD 18 02 F6 | 	mov	arg04, result1
129b4     10 13 02 F6 | 	mov	arg01, local02
129b8     11 15 02 F6 | 	mov	arg02, local03
129bc     0F 17 02 F6 | 	mov	arg03, local01
129c0     54 44 B0 FD | 	call	#_hg010b_spin2_fill
129c4                 | LR__1501
129c4     A7 F0 03 F6 | 	mov	ptra, fp
129c8     B2 00 A0 FD | 	call	#popregs_
129cc                 | _do_fill_ret
129cc     2D 00 64 FD | 	ret
129d0                 | 
129d0                 | ' 
129d0                 | ' ' -------------------------- Draw a frane
129d0                 | ' 
129d0                 | ' sub do_frame
129d0                 | _do_frame
129d0     03 4A 05 F6 | 	mov	COUNT_, #3
129d4     A8 00 A0 FD | 	call	#pushregs_
129d8     30 F0 07 F1 | 	add	ptra, #48
129dc     50 6B BF FD | 	call	#_pop
129e0     FD 1A 02 F6 | 	mov	arg05, result1
129e4     FE 18 02 F6 | 	mov	arg04, result2
129e8     FF 16 02 F6 | 	mov	arg03, result3
129ec     24 4E 05 F1 | 	add	fp, #36
129f0     A7 1A 62 FC | 	wrlong	arg05, fp
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 18 62 FC | 	wrlong	arg04, fp
129fc     04 4E 05 F1 | 	add	fp, #4
12a00     A7 16 62 FC | 	wrlong	arg03, fp
12a04     2C 4E 85 F1 | 	sub	fp, #44
12a08     24 6B BF FD | 	call	#_pop
12a0c     FD 1A 02 F6 | 	mov	arg05, result1
12a10     FE 18 02 F6 | 	mov	arg04, result2
12a14     FF 16 02 F6 | 	mov	arg03, result3
12a18     18 4E 05 F1 | 	add	fp, #24
12a1c     A7 1A 62 FC | 	wrlong	arg05, fp
12a20     04 4E 05 F1 | 	add	fp, #4
12a24     A7 18 62 FC | 	wrlong	arg04, fp
12a28     04 4E 05 F1 | 	add	fp, #4
12a2c     A7 16 62 FC | 	wrlong	arg03, fp
12a30     20 4E 85 F1 | 	sub	fp, #32
12a34     F8 6A BF FD | 	call	#_pop
12a38     FD 1A 02 F6 | 	mov	arg05, result1
12a3c     FE 18 02 F6 | 	mov	arg04, result2
12a40     FF 1E 02 F6 | 	mov	local01, result3
12a44     0C 4E 05 F1 | 	add	fp, #12
12a48     A7 1A 62 FC | 	wrlong	arg05, fp
12a4c     04 4E 05 F1 | 	add	fp, #4
12a50     A7 18 62 FC | 	wrlong	arg04, fp
12a54     04 4E 05 F1 | 	add	fp, #4
12a58     A7 1E 62 FC | 	wrlong	local01, fp
12a5c     14 4E 85 F1 | 	sub	fp, #20
12a60     CC 6A BF FD | 	call	#_pop
12a64     A7 FA 61 FC | 	wrlong	result1, fp
12a68     04 4E 05 F1 | 	add	fp, #4
12a6c     A7 FC 61 FC | 	wrlong	result2, fp
12a70     04 4E 05 F1 | 	add	fp, #4
12a74     A7 FE 61 FC | 	wrlong	result3, fp
12a78                 | ' 
12a78                 | ' t4=pop()
12a78                 | ' t3=pop()
12a78                 | ' t2=pop()
12a78                 | ' t1=pop()
12a78                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
12a78     FF 1A 02 F6 | 	mov	arg05, result3
12a7c     08 4E 85 F1 | 	sub	fp, #8
12a80     1C 1A 0E F2 | 	cmp	arg05, #28 wz
12a84     08 4E 05 51 |  if_ne	add	fp, #8
12a88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12a8c     08 4E 85 51 |  if_ne	sub	fp, #8
12a90     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12a94     A8 00 90 5D |  if_ne	jmp	#LR__1510
12a98     14 4E 05 F1 | 	add	fp, #20
12a9c     A7 1E 02 FB | 	rdlong	local01, fp
12aa0     14 4E 85 F1 | 	sub	fp, #20
12aa4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12aa8     14 4E 05 51 |  if_ne	add	fp, #20
12aac     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12ab0     14 4E 85 51 |  if_ne	sub	fp, #20
12ab4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12ab8     84 00 90 5D |  if_ne	jmp	#LR__1510
12abc     20 4E 05 F1 | 	add	fp, #32
12ac0     A7 1E 02 FB | 	rdlong	local01, fp
12ac4     20 4E 85 F1 | 	sub	fp, #32
12ac8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12acc     20 4E 05 51 |  if_ne	add	fp, #32
12ad0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12ad4     20 4E 85 51 |  if_ne	sub	fp, #32
12ad8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12adc     60 00 90 5D |  if_ne	jmp	#LR__1510
12ae0     2C 4E 05 F1 | 	add	fp, #44
12ae4     A7 1E 02 FB | 	rdlong	local01, fp
12ae8     2C 4E 85 F1 | 	sub	fp, #44
12aec     1C 1E 0E F2 | 	cmp	local01, #28 wz
12af0     2C 4E 05 51 |  if_ne	add	fp, #44
12af4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
12af8     2C 4E 85 51 |  if_ne	sub	fp, #44
12afc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
12b00     3C 00 90 5D |  if_ne	jmp	#LR__1510
12b04     A7 12 02 FB | 	rdlong	arg01, fp
12b08     0C 4E 05 F1 | 	add	fp, #12
12b0c     A7 14 02 FB | 	rdlong	arg02, fp
12b10     0C 4E 05 F1 | 	add	fp, #12
12b14     A7 16 02 FB | 	rdlong	arg03, fp
12b18     0C 4E 05 F1 | 	add	fp, #12
12b1c     A7 18 02 FB | 	rdlong	arg04, fp
12b20     24 4E 85 F1 | 	sub	fp, #36
12b24     55 00 00 FF 
12b28     FC E5 05 F1 | 	add	objptr, ##44028
12b2c     F2 1A 02 FB | 	rdlong	arg05, objptr
12b30     55 00 00 FF 
12b34     FC E5 85 F1 | 	sub	objptr, ##44028
12b38     C8 47 B0 FD | 	call	#_hg010b_spin2_frame
12b3c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
12b3c     6C 00 90 FD | 	jmp	#LR__1511
12b40                 | LR__1510
12b40     A7 12 02 F6 | 	mov	arg01, fp
12b44     78 DE BF FD | 	call	#_converttoint
12b48     FD 20 02 F6 | 	mov	local02, result1
12b4c     0C 4E 05 F1 | 	add	fp, #12
12b50     A7 12 02 F6 | 	mov	arg01, fp
12b54     0C 4E 85 F1 | 	sub	fp, #12
12b58     64 DE BF FD | 	call	#_converttoint
12b5c     FD 22 02 F6 | 	mov	local03, result1
12b60     18 4E 05 F1 | 	add	fp, #24
12b64     A7 12 02 F6 | 	mov	arg01, fp
12b68     18 4E 85 F1 | 	sub	fp, #24
12b6c     50 DE BF FD | 	call	#_converttoint
12b70     FD 1E 02 F6 | 	mov	local01, result1
12b74     24 4E 05 F1 | 	add	fp, #36
12b78     A7 12 02 F6 | 	mov	arg01, fp
12b7c     24 4E 85 F1 | 	sub	fp, #36
12b80     3C DE BF FD | 	call	#_converttoint
12b84     FD 18 02 F6 | 	mov	arg04, result1
12b88     55 00 00 FF 
12b8c     FC E5 05 F1 | 	add	objptr, ##44028
12b90     F2 1A 02 FB | 	rdlong	arg05, objptr
12b94     55 00 00 FF 
12b98     FC E5 85 F1 | 	sub	objptr, ##44028
12b9c     10 13 02 F6 | 	mov	arg01, local02
12ba0     11 15 02 F6 | 	mov	arg02, local03
12ba4     0F 17 02 F6 | 	mov	arg03, local01
12ba8     58 47 B0 FD | 	call	#_hg010b_spin2_frame
12bac                 | LR__1511
12bac     A7 F0 03 F6 | 	mov	ptra, fp
12bb0     B2 00 A0 FD | 	call	#popregs_
12bb4                 | _do_frame_ret
12bb4     2D 00 64 FD | 	ret
12bb8                 | 
12bb8                 | ' 
12bb8                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
12bb8                 | ' 
12bb8                 | ' ' ------------------------- Print to the screem
12bb8                 | ' 
12bb8                 | ' sub do_print  
12bb8                 | _do_print
12bb8     0A 4A 05 F6 | 	mov	COUNT_, #10
12bbc     A8 00 A0 FD | 	call	#pushregs_
12bc0     00 24 06 F6 | 	mov	local04, #0
12bc4     68 69 BF FD | 	call	#_pop
12bc8     FD 26 02 F6 | 	mov	local05, result1
12bcc     FE 28 02 F6 | 	mov	local06, result2
12bd0     FF 2A 02 F6 | 	mov	local07, result3
12bd4     13 1F 02 F6 | 	mov	local01, local05
12bd8     14 21 02 F6 | 	mov	local02, local06
12bdc     15 23 02 F6 | 	mov	local03, local07
12be0                 | '  
12be0                 | ' r=0
12be0                 | ' t1=pop() 
12be0                 | ' 'print t1.result_type,t1.result.uresult
12be0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
12be0     2B 22 0E F2 | 	cmp	local03, #43 wz
12be4     14 00 90 5D |  if_ne	jmp	#LR__1520
12be8     0F 13 02 F6 | 	mov	arg01, local01
12bec     48 9A BF FD | 	call	#_convertstring
12bf0     FD 26 02 F6 | 	mov	local05, result1
12bf4     13 1F 02 F6 | 	mov	local01, local05
12bf8     1F 22 06 F6 | 	mov	local03, #31
12bfc                 | LR__1520
12bfc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
12bfc     21 22 0E F2 | 	cmp	local03, #33 wz
12c00     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
12c04     20 00 90 5D |  if_ne	jmp	#LR__1521
12c08     11 25 02 F6 | 	mov	local04, local03
12c0c     20 69 BF FD | 	call	#_pop
12c10     FD 26 02 F6 | 	mov	local05, result1
12c14     FE 28 02 F6 | 	mov	local06, result2
12c18     FF 2A 02 F6 | 	mov	local07, result3
12c1c     13 1F 02 F6 | 	mov	local01, local05
12c20     14 21 02 F6 | 	mov	local02, local06
12c24     15 23 02 F6 | 	mov	local03, local07
12c28                 | LR__1521
12c28                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
12c28     20 22 0E F2 | 	cmp	local03, #32 wz
12c2c     11 25 02 A6 |  if_e	mov	local04, local03
12c30                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
12c30     FF 22 0E F2 | 	cmp	local03, #255 wz
12c34     0C 00 90 5D |  if_ne	jmp	#LR__1522
12c38     0F 13 02 F6 | 	mov	arg01, local01
12c3c     64 27 B0 FD | 	call	#_printerror
12c40     30 04 90 FD | 	jmp	#LR__1539
12c44                 | LR__1522
12c44                 | ' 
12c44                 | ' if r=print_mod_comma  then
12c44     21 24 0E F2 | 	cmp	local04, #33 wz
12c48     AC 01 90 5D |  if_ne	jmp	#LR__1527
12c4c                 | '   if t1.result_type=result_int then print t1.result.iresult,
12c4c     1C 22 0E F2 | 	cmp	local03, #28 wz
12c50     64 00 90 5D |  if_ne	jmp	#LR__1523
12c54     00 12 06 F6 | 	mov	arg01, #0
12c58     68 B4 B0 FD | 	call	#__system___getiolock_0417
12c5c     FD 12 02 F6 | 	mov	arg01, result1
12c60     64 5C B0 FD | 	call	#__system___lockmem
12c64     00 28 06 F6 | 	mov	local06, #0
12c68     00 12 06 F6 | 	mov	arg01, #0
12c6c     0F 15 02 F6 | 	mov	arg02, local01
12c70     00 16 06 F6 | 	mov	arg03, #0
12c74     0A 18 06 F6 | 	mov	arg04, #10
12c78     80 69 B0 FD | 	call	#__system___basic_print_integer
12c7c     FD 2A 02 F6 | 	mov	local07, result1
12c80     14 27 02 F6 | 	mov	local05, local06
12c84     15 27 02 F1 | 	add	local05, local07
12c88     00 2C 06 F6 | 	mov	local08, #0
12c8c     00 12 06 F6 | 	mov	arg01, #0
12c90     09 14 06 F6 | 	mov	arg02, #9
12c94     00 16 06 F6 | 	mov	arg03, #0
12c98     C4 68 B0 FD | 	call	#__system___basic_print_char
12c9c     FD 2E 02 F6 | 	mov	local09, result1
12ca0     FD 26 02 F1 | 	add	local05, result1
12ca4     00 12 06 F6 | 	mov	arg01, #0
12ca8     18 B4 B0 FD | 	call	#__system___getiolock_0417
12cac     FD 00 68 FC | 	wrlong	#0, result1
12cb0     00 FA 05 F6 | 	mov	result1, #0
12cb4     00 30 06 F6 | 	mov	local10, #0
12cb8                 | LR__1523
12cb8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
12cb8     1D 22 0E F2 | 	cmp	local03, #29 wz
12cbc     64 00 90 5D |  if_ne	jmp	#LR__1524
12cc0     00 12 06 F6 | 	mov	arg01, #0
12cc4     FC B3 B0 FD | 	call	#__system___getiolock_0417
12cc8     FD 12 02 F6 | 	mov	arg01, result1
12ccc     F8 5B B0 FD | 	call	#__system___lockmem
12cd0     00 28 06 F6 | 	mov	local06, #0
12cd4     00 12 06 F6 | 	mov	arg01, #0
12cd8     0F 15 02 F6 | 	mov	arg02, local01
12cdc     00 16 06 F6 | 	mov	arg03, #0
12ce0     0A 18 06 F6 | 	mov	arg04, #10
12ce4     54 69 B0 FD | 	call	#__system___basic_print_unsigned
12ce8     FD 2A 02 F6 | 	mov	local07, result1
12cec     14 27 02 F6 | 	mov	local05, local06
12cf0     15 27 02 F1 | 	add	local05, local07
12cf4     00 2C 06 F6 | 	mov	local08, #0
12cf8     00 12 06 F6 | 	mov	arg01, #0
12cfc     09 14 06 F6 | 	mov	arg02, #9
12d00     00 16 06 F6 | 	mov	arg03, #0
12d04     58 68 B0 FD | 	call	#__system___basic_print_char
12d08     FD 2E 02 F6 | 	mov	local09, result1
12d0c     FD 26 02 F1 | 	add	local05, result1
12d10     00 12 06 F6 | 	mov	arg01, #0
12d14     AC B3 B0 FD | 	call	#__system___getiolock_0417
12d18     FD 00 68 FC | 	wrlong	#0, result1
12d1c     00 FA 05 F6 | 	mov	result1, #0
12d20     00 30 06 F6 | 	mov	local10, #0
12d24                 | LR__1524
12d24                 | '   if t1.result_type=result_float then print t1.result.fresult,
12d24     1E 22 0E F2 | 	cmp	local03, #30 wz
12d28     64 00 90 5D |  if_ne	jmp	#LR__1525
12d2c     00 12 06 F6 | 	mov	arg01, #0
12d30     90 B3 B0 FD | 	call	#__system___getiolock_0417
12d34     FD 12 02 F6 | 	mov	arg01, result1
12d38     8C 5B B0 FD | 	call	#__system___lockmem
12d3c     00 28 06 F6 | 	mov	local06, #0
12d40     00 12 06 F6 | 	mov	arg01, #0
12d44     0F 15 02 F6 | 	mov	arg02, local01
12d48     00 16 06 F6 | 	mov	arg03, #0
12d4c     23 18 06 F6 | 	mov	arg04, #35
12d50     70 8B B0 FD | 	call	#__system___basic_print_float
12d54     FD 2A 02 F6 | 	mov	local07, result1
12d58     14 27 02 F6 | 	mov	local05, local06
12d5c     15 27 02 F1 | 	add	local05, local07
12d60     00 2C 06 F6 | 	mov	local08, #0
12d64     00 12 06 F6 | 	mov	arg01, #0
12d68     09 14 06 F6 | 	mov	arg02, #9
12d6c     00 16 06 F6 | 	mov	arg03, #0
12d70     EC 67 B0 FD | 	call	#__system___basic_print_char
12d74     FD 2E 02 F6 | 	mov	local09, result1
12d78     FD 26 02 F1 | 	add	local05, result1
12d7c     00 12 06 F6 | 	mov	arg01, #0
12d80     40 B3 B0 FD | 	call	#__system___getiolock_0417
12d84     FD 00 68 FC | 	wrlong	#0, result1
12d88     00 FA 05 F6 | 	mov	result1, #0
12d8c     00 30 06 F6 | 	mov	local10, #0
12d90                 | LR__1525
12d90                 | '   if t1.result_type=result_string then print t1.result.sresult,
12d90     1F 22 0E F2 | 	cmp	local03, #31 wz
12d94     60 00 90 5D |  if_ne	jmp	#LR__1526
12d98     00 12 06 F6 | 	mov	arg01, #0
12d9c     24 B3 B0 FD | 	call	#__system___getiolock_0417
12da0     FD 12 02 F6 | 	mov	arg01, result1
12da4     20 5B B0 FD | 	call	#__system___lockmem
12da8     00 28 06 F6 | 	mov	local06, #0
12dac     00 12 06 F6 | 	mov	arg01, #0
12db0     0F 15 02 F6 | 	mov	arg02, local01
12db4     00 16 06 F6 | 	mov	arg03, #0
12db8     FC 67 B0 FD | 	call	#__system___basic_print_string
12dbc     FD 2A 02 F6 | 	mov	local07, result1
12dc0     14 27 02 F6 | 	mov	local05, local06
12dc4     15 27 02 F1 | 	add	local05, local07
12dc8     00 2C 06 F6 | 	mov	local08, #0
12dcc     00 12 06 F6 | 	mov	arg01, #0
12dd0     09 14 06 F6 | 	mov	arg02, #9
12dd4     00 16 06 F6 | 	mov	arg03, #0
12dd8     84 67 B0 FD | 	call	#__system___basic_print_char
12ddc     FD 2E 02 F6 | 	mov	local09, result1
12de0     FD 26 02 F1 | 	add	local05, result1
12de4     00 12 06 F6 | 	mov	arg01, #0
12de8     D8 B2 B0 FD | 	call	#__system___getiolock_0417
12dec     FD 00 68 FC | 	wrlong	#0, result1
12df0     00 FA 05 F6 | 	mov	result1, #0
12df4     00 30 06 F6 | 	mov	local10, #0
12df8                 | LR__1526
12df8                 | LR__1527
12df8                 | ' if r=print_mod_semicolon then 
12df8     22 24 0E F2 | 	cmp	local04, #34 wz
12dfc     1C 01 90 5D |  if_ne	jmp	#LR__1532
12e00                 | '   if t1.result_type=result_int then print t1.result.iresult;
12e00     1C 22 0E F2 | 	cmp	local03, #28 wz
12e04     50 00 90 5D |  if_ne	jmp	#LR__1528
12e08     00 12 06 F6 | 	mov	arg01, #0
12e0c     B4 B2 B0 FD | 	call	#__system___getiolock_0417
12e10     FD 12 02 F6 | 	mov	arg01, result1
12e14     B0 5A B0 FD | 	call	#__system___lockmem
12e18     00 28 06 F6 | 	mov	local06, #0
12e1c     00 30 06 F6 | 	mov	local10, #0
12e20     0A 2C 06 F6 | 	mov	local08, #10
12e24     00 12 06 F6 | 	mov	arg01, #0
12e28     0F 15 02 F6 | 	mov	arg02, local01
12e2c     00 16 06 F6 | 	mov	arg03, #0
12e30     0A 18 06 F6 | 	mov	arg04, #10
12e34     C4 67 B0 FD | 	call	#__system___basic_print_integer
12e38     FD 2A 02 F6 | 	mov	local07, result1
12e3c     14 27 02 F6 | 	mov	local05, local06
12e40     15 27 02 F1 | 	add	local05, local07
12e44     00 12 06 F6 | 	mov	arg01, #0
12e48     78 B2 B0 FD | 	call	#__system___getiolock_0417
12e4c     FD 00 68 FC | 	wrlong	#0, result1
12e50     00 FA 05 F6 | 	mov	result1, #0
12e54     00 2E 06 F6 | 	mov	local09, #0
12e58                 | LR__1528
12e58                 | '   if t1.result_type=result_uint then print t1.result.uresult;
12e58     1D 22 0E F2 | 	cmp	local03, #29 wz
12e5c     50 00 90 5D |  if_ne	jmp	#LR__1529
12e60     00 12 06 F6 | 	mov	arg01, #0
12e64     5C B2 B0 FD | 	call	#__system___getiolock_0417
12e68     FD 12 02 F6 | 	mov	arg01, result1
12e6c     58 5A B0 FD | 	call	#__system___lockmem
12e70     00 28 06 F6 | 	mov	local06, #0
12e74     00 30 06 F6 | 	mov	local10, #0
12e78     0A 2C 06 F6 | 	mov	local08, #10
12e7c     00 12 06 F6 | 	mov	arg01, #0
12e80     0F 15 02 F6 | 	mov	arg02, local01
12e84     00 16 06 F6 | 	mov	arg03, #0
12e88     0A 18 06 F6 | 	mov	arg04, #10
12e8c     AC 67 B0 FD | 	call	#__system___basic_print_unsigned
12e90     FD 2A 02 F6 | 	mov	local07, result1
12e94     14 27 02 F6 | 	mov	local05, local06
12e98     15 27 02 F1 | 	add	local05, local07
12e9c     00 12 06 F6 | 	mov	arg01, #0
12ea0     20 B2 B0 FD | 	call	#__system___getiolock_0417
12ea4     FD 00 68 FC | 	wrlong	#0, result1
12ea8     00 FA 05 F6 | 	mov	result1, #0
12eac     00 2E 06 F6 | 	mov	local09, #0
12eb0                 | LR__1529
12eb0                 | '   if t1.result_type=result_float then print t1.result.fresult;
12eb0     1E 22 0E F2 | 	cmp	local03, #30 wz
12eb4     30 00 90 5D |  if_ne	jmp	#LR__1530
12eb8     00 12 06 F6 | 	mov	arg01, #0
12ebc     04 B2 B0 FD | 	call	#__system___getiolock_0417
12ec0     FD 12 02 F6 | 	mov	arg01, result1
12ec4     00 5A B0 FD | 	call	#__system___lockmem
12ec8     00 12 06 F6 | 	mov	arg01, #0
12ecc     0F 15 02 F6 | 	mov	arg02, local01
12ed0     00 16 06 F6 | 	mov	arg03, #0
12ed4     23 18 06 F6 | 	mov	arg04, #35
12ed8     E8 89 B0 FD | 	call	#__system___basic_print_float
12edc     00 12 06 F6 | 	mov	arg01, #0
12ee0     E0 B1 B0 FD | 	call	#__system___getiolock_0417
12ee4     FD 00 68 FC | 	wrlong	#0, result1
12ee8                 | LR__1530
12ee8                 | '   if t1.result_type=result_string then print t1.result.sresult;
12ee8     1F 22 0E F2 | 	cmp	local03, #31 wz
12eec     2C 00 90 5D |  if_ne	jmp	#LR__1531
12ef0     00 12 06 F6 | 	mov	arg01, #0
12ef4     CC B1 B0 FD | 	call	#__system___getiolock_0417
12ef8     FD 12 02 F6 | 	mov	arg01, result1
12efc     C8 59 B0 FD | 	call	#__system___lockmem
12f00     00 12 06 F6 | 	mov	arg01, #0
12f04     0F 15 02 F6 | 	mov	arg02, local01
12f08     00 16 06 F6 | 	mov	arg03, #0
12f0c     A8 66 B0 FD | 	call	#__system___basic_print_string
12f10     00 12 06 F6 | 	mov	arg01, #0
12f14     AC B1 B0 FD | 	call	#__system___getiolock_0417
12f18     FD 00 68 FC | 	wrlong	#0, result1
12f1c                 | LR__1531
12f1c                 | LR__1532
12f1c                 | ' if r=0 then 
12f1c     00 24 0E F2 | 	cmp	local04, #0 wz
12f20     1C 01 90 5D |  if_ne	jmp	#LR__1537
12f24                 | '   if t1.result_type=result_int then print t1.result.iresult
12f24     1C 22 0E F2 | 	cmp	local03, #28 wz
12f28     40 00 90 5D |  if_ne	jmp	#LR__1533
12f2c     00 12 06 F6 | 	mov	arg01, #0
12f30     90 B1 B0 FD | 	call	#__system___getiolock_0417
12f34     FD 12 02 F6 | 	mov	arg01, result1
12f38     8C 59 B0 FD | 	call	#__system___lockmem
12f3c     00 12 06 F6 | 	mov	arg01, #0
12f40     0F 15 02 F6 | 	mov	arg02, local01
12f44     00 16 06 F6 | 	mov	arg03, #0
12f48     0A 18 06 F6 | 	mov	arg04, #10
12f4c     AC 66 B0 FD | 	call	#__system___basic_print_integer
12f50     00 12 06 F6 | 	mov	arg01, #0
12f54     0A 14 06 F6 | 	mov	arg02, #10
12f58     00 16 06 F6 | 	mov	arg03, #0
12f5c     00 66 B0 FD | 	call	#__system___basic_print_char
12f60     00 12 06 F6 | 	mov	arg01, #0
12f64     5C B1 B0 FD | 	call	#__system___getiolock_0417
12f68     FD 00 68 FC | 	wrlong	#0, result1
12f6c                 | LR__1533
12f6c                 | '   if t1.result_type=result_uint then print t1.result.uresult
12f6c     1D 22 0E F2 | 	cmp	local03, #29 wz
12f70     40 00 90 5D |  if_ne	jmp	#LR__1534
12f74     00 12 06 F6 | 	mov	arg01, #0
12f78     48 B1 B0 FD | 	call	#__system___getiolock_0417
12f7c     FD 12 02 F6 | 	mov	arg01, result1
12f80     44 59 B0 FD | 	call	#__system___lockmem
12f84     00 12 06 F6 | 	mov	arg01, #0
12f88     0F 15 02 F6 | 	mov	arg02, local01
12f8c     00 16 06 F6 | 	mov	arg03, #0
12f90     0A 18 06 F6 | 	mov	arg04, #10
12f94     A4 66 B0 FD | 	call	#__system___basic_print_unsigned
12f98     00 12 06 F6 | 	mov	arg01, #0
12f9c     0A 14 06 F6 | 	mov	arg02, #10
12fa0     00 16 06 F6 | 	mov	arg03, #0
12fa4     B8 65 B0 FD | 	call	#__system___basic_print_char
12fa8     00 12 06 F6 | 	mov	arg01, #0
12fac     14 B1 B0 FD | 	call	#__system___getiolock_0417
12fb0     FD 00 68 FC | 	wrlong	#0, result1
12fb4                 | LR__1534
12fb4                 | '   if t1.result_type=result_float then print t1.result.fresult
12fb4     1E 22 0E F2 | 	cmp	local03, #30 wz
12fb8     40 00 90 5D |  if_ne	jmp	#LR__1535
12fbc     00 12 06 F6 | 	mov	arg01, #0
12fc0     00 B1 B0 FD | 	call	#__system___getiolock_0417
12fc4     FD 12 02 F6 | 	mov	arg01, result1
12fc8     FC 58 B0 FD | 	call	#__system___lockmem
12fcc     00 12 06 F6 | 	mov	arg01, #0
12fd0     0F 15 02 F6 | 	mov	arg02, local01
12fd4     00 16 06 F6 | 	mov	arg03, #0
12fd8     23 18 06 F6 | 	mov	arg04, #35
12fdc     E4 88 B0 FD | 	call	#__system___basic_print_float
12fe0     00 12 06 F6 | 	mov	arg01, #0
12fe4     0A 14 06 F6 | 	mov	arg02, #10
12fe8     00 16 06 F6 | 	mov	arg03, #0
12fec     70 65 B0 FD | 	call	#__system___basic_print_char
12ff0     00 12 06 F6 | 	mov	arg01, #0
12ff4     CC B0 B0 FD | 	call	#__system___getiolock_0417
12ff8     FD 00 68 FC | 	wrlong	#0, result1
12ffc                 | LR__1535
12ffc                 | '   if t1.result_type=result_string then print t1.result.sresult
12ffc     1F 22 0E F2 | 	cmp	local03, #31 wz
13000     3C 00 90 5D |  if_ne	jmp	#LR__1536
13004     00 12 06 F6 | 	mov	arg01, #0
13008     B8 B0 B0 FD | 	call	#__system___getiolock_0417
1300c     FD 12 02 F6 | 	mov	arg01, result1
13010     B4 58 B0 FD | 	call	#__system___lockmem
13014     00 12 06 F6 | 	mov	arg01, #0
13018     0F 15 02 F6 | 	mov	arg02, local01
1301c     00 16 06 F6 | 	mov	arg03, #0
13020     94 65 B0 FD | 	call	#__system___basic_print_string
13024     00 12 06 F6 | 	mov	arg01, #0
13028     0A 14 06 F6 | 	mov	arg02, #10
1302c     00 16 06 F6 | 	mov	arg03, #0
13030     2C 65 B0 FD | 	call	#__system___basic_print_char
13034     00 12 06 F6 | 	mov	arg01, #0
13038     88 B0 B0 FD | 	call	#__system___getiolock_0417
1303c     FD 00 68 FC | 	wrlong	#0, result1
13040                 | LR__1536
13040                 | LR__1537
13040                 | ' if r=print_mod_empty then print
13040     20 24 0E F2 | 	cmp	local04, #32 wz
13044     2C 00 90 5D |  if_ne	jmp	#LR__1538
13048     00 12 06 F6 | 	mov	arg01, #0
1304c     74 B0 B0 FD | 	call	#__system___getiolock_0417
13050     FD 12 02 F6 | 	mov	arg01, result1
13054     70 58 B0 FD | 	call	#__system___lockmem
13058     00 12 06 F6 | 	mov	arg01, #0
1305c     0A 14 06 F6 | 	mov	arg02, #10
13060     00 16 06 F6 | 	mov	arg03, #0
13064     F8 64 B0 FD | 	call	#__system___basic_print_char
13068     00 12 06 F6 | 	mov	arg01, #0
1306c     54 B0 B0 FD | 	call	#__system___getiolock_0417
13070     FD 00 68 FC | 	wrlong	#0, result1
13074                 | LR__1538
13074                 | LR__1539
13074     A7 F0 03 F6 | 	mov	ptra, fp
13078     B2 00 A0 FD | 	call	#popregs_
1307c                 | _do_print_ret
1307c     2D 00 64 FD | 	ret
13080                 | 
13080                 | ' 
13080                 | ' 
13080                 | ' sub do_paper
13080                 | _do_paper
13080     03 4A 05 F6 | 	mov	COUNT_, #3
13084     A8 00 A0 FD | 	call	#pushregs_
13088     A4 64 BF FD | 	call	#_pop
1308c     FD 1E 02 F6 | 	mov	local01, result1
13090     FE 20 02 F6 | 	mov	local02, result2
13094     FF 22 02 F6 | 	mov	local03, result3
13098                 | ' t1=pop() 
13098                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13098     1E 22 0E F2 | 	cmp	local03, #30 wz
1309c     10 00 90 5D |  if_ne	jmp	#LR__1540
130a0     0F 13 02 F6 | 	mov	arg01, local01
130a4     00 14 06 F6 | 	mov	arg02, #0
130a8     C8 86 B0 FD | 	call	#__system___float_tointeger
130ac     FD 1E 02 F6 | 	mov	local01, result1
130b0                 | LR__1540
130b0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
130b0     1F 22 0E F2 | 	cmp	local03, #31 wz
130b4     18 00 90 5D |  if_ne	jmp	#LR__1541
130b8     0F 13 02 F6 | 	mov	arg01, local01
130bc     D4 89 B0 FD | 	call	#__system____builtin_atof
130c0     FD 12 02 F6 | 	mov	arg01, result1
130c4     00 14 06 F6 | 	mov	arg02, #0
130c8     A8 86 B0 FD | 	call	#__system___float_tointeger
130cc     FD 1E 02 F6 | 	mov	local01, result1
130d0                 | LR__1541
130d0     56 00 00 FF 
130d4     0C E4 05 F1 | 	add	objptr, ##44044
130d8     F2 1E 62 FC | 	wrlong	local01, objptr
130dc     04 E4 05 F1 | 	add	objptr, #4
130e0     F2 12 02 FB | 	rdlong	arg01, objptr
130e4                 | ' 
130e4                 | ' write_color:=ff
130e4     55 00 00 FF 
130e8     D3 E5 85 F1 | 	sub	objptr, ##43987
130ec     F2 12 62 FC | 	wrlong	arg01, objptr
130f0                 | ' write_background:=bb
130f0     04 E4 05 F1 | 	add	objptr, #4
130f4     F2 1E 62 FC | 	wrlong	local01, objptr
130f8     41 E4 85 F1 | 	sub	objptr, #65
130fc     A7 F0 03 F6 | 	mov	ptra, fp
13100     B2 00 A0 FD | 	call	#popregs_
13104                 | _do_paper_ret
13104     2D 00 64 FD | 	ret
13108                 | 
13108                 | ' 
13108                 | ' sub do_ink
13108                 | _do_ink
13108     03 4A 05 F6 | 	mov	COUNT_, #3
1310c     A8 00 A0 FD | 	call	#pushregs_
13110     1C 64 BF FD | 	call	#_pop
13114     FD 1E 02 F6 | 	mov	local01, result1
13118     FE 20 02 F6 | 	mov	local02, result2
1311c     FF 22 02 F6 | 	mov	local03, result3
13120                 | ' t1=pop() 
13120                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13120     1E 22 0E F2 | 	cmp	local03, #30 wz
13124     10 00 90 5D |  if_ne	jmp	#LR__1550
13128     0F 13 02 F6 | 	mov	arg01, local01
1312c     00 14 06 F6 | 	mov	arg02, #0
13130     40 86 B0 FD | 	call	#__system___float_tointeger
13134     FD 1E 02 F6 | 	mov	local01, result1
13138                 | LR__1550
13138                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13138     1F 22 0E F2 | 	cmp	local03, #31 wz
1313c     18 00 90 5D |  if_ne	jmp	#LR__1551
13140     0F 13 02 F6 | 	mov	arg01, local01
13144     4C 89 B0 FD | 	call	#__system____builtin_atof
13148     FD 12 02 F6 | 	mov	arg01, result1
1314c     00 14 06 F6 | 	mov	arg02, #0
13150     20 86 B0 FD | 	call	#__system___float_tointeger
13154     FD 1E 02 F6 | 	mov	local01, result1
13158                 | LR__1551
13158     56 00 00 FF 
1315c     10 E4 05 F1 | 	add	objptr, ##44048
13160     F2 1E 62 FC | 	wrlong	local01, objptr
13164     04 E4 85 F1 | 	sub	objptr, #4
13168     F2 14 02 FB | 	rdlong	arg02, objptr
1316c                 | ' 
1316c                 | ' write_color:=ff
1316c     55 00 00 FF 
13170     CF E5 85 F1 | 	sub	objptr, ##43983
13174     F2 1E 62 FC | 	wrlong	local01, objptr
13178                 | ' write_background:=bb
13178     04 E4 05 F1 | 	add	objptr, #4
1317c     F2 14 62 FC | 	wrlong	arg02, objptr
13180     55 00 00 FF 
13184     CF E5 05 F1 | 	add	objptr, ##43983
13188     F2 12 02 FB | 	rdlong	arg01, objptr
1318c     56 00 00 FF 
13190     10 E4 85 F1 | 	sub	objptr, ##44048
13194     04 34 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13198     A7 F0 03 F6 | 	mov	ptra, fp
1319c     B2 00 A0 FD | 	call	#popregs_
131a0                 | _do_ink_ret
131a0     2D 00 64 FD | 	ret
131a4                 | 
131a4                 | ' 
131a4                 | ' 
131a4                 | ' sub do_font
131a4                 | _do_font
131a4     03 4A 05 F6 | 	mov	COUNT_, #3
131a8     A8 00 A0 FD | 	call	#pushregs_
131ac     80 63 BF FD | 	call	#_pop
131b0     FD 1E 02 F6 | 	mov	local01, result1
131b4     FE 20 02 F6 | 	mov	local02, result2
131b8     FF 22 02 F6 | 	mov	local03, result3
131bc                 | ' t1=pop() 
131bc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
131bc     1E 22 0E F2 | 	cmp	local03, #30 wz
131c0     10 00 90 5D |  if_ne	jmp	#LR__1560
131c4     0F 13 02 F6 | 	mov	arg01, local01
131c8     00 14 06 F6 | 	mov	arg02, #0
131cc     A4 85 B0 FD | 	call	#__system___float_tointeger
131d0     FD 1E 02 F6 | 	mov	local01, result1
131d4                 | LR__1560
131d4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
131d4     1F 22 0E F2 | 	cmp	local03, #31 wz
131d8     18 00 90 5D |  if_ne	jmp	#LR__1561
131dc     0F 13 02 F6 | 	mov	arg01, local01
131e0     B0 88 B0 FD | 	call	#__system____builtin_atof
131e4     FD 12 02 F6 | 	mov	arg01, result1
131e8     00 14 06 F6 | 	mov	arg02, #0
131ec     84 85 B0 FD | 	call	#__system___float_tointeger
131f0     FD 1E 02 F6 | 	mov	local01, result1
131f4                 | LR__1561
131f4     56 00 00 FF 
131f8     14 E4 05 F1 | 	add	objptr, ##44052
131fc     F2 1E 62 FC | 	wrlong	local01, objptr
13200     56 00 00 FF 
13204     14 E4 85 F1 | 	sub	objptr, ##44052
13208     02 1E 66 F0 | 	shl	local01, #2
1320c     0F 13 02 F6 | 	mov	arg01, local01
13210     E8 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13214     A7 F0 03 F6 | 	mov	ptra, fp
13218     B2 00 A0 FD | 	call	#popregs_
1321c                 | _do_font_ret
1321c     2D 00 64 FD | 	ret
13220                 | 
13220                 | ' 
13220                 | ' sub do_mode
13220                 | _do_mode
13220     04 4A 05 F6 | 	mov	COUNT_, #4
13224     A8 00 A0 FD | 	call	#pushregs_
13228     04 63 BF FD | 	call	#_pop
1322c     FD 1E 02 F6 | 	mov	local01, result1
13230     FE 20 02 F6 | 	mov	local02, result2
13234     FF 22 02 F6 | 	mov	local03, result3
13238                 | ' t1=pop() 
13238                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13238     1E 22 0E F2 | 	cmp	local03, #30 wz
1323c     10 00 90 5D |  if_ne	jmp	#LR__1570
13240     0F 13 02 F6 | 	mov	arg01, local01
13244     00 14 06 F6 | 	mov	arg02, #0
13248     28 85 B0 FD | 	call	#__system___float_tointeger
1324c     FD 1E 02 F6 | 	mov	local01, result1
13250                 | LR__1570
13250                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13250     1F 22 0E F2 | 	cmp	local03, #31 wz
13254     18 00 90 5D |  if_ne	jmp	#LR__1571
13258     0F 13 02 F6 | 	mov	arg01, local01
1325c     34 88 B0 FD | 	call	#__system____builtin_atof
13260     FD 12 02 F6 | 	mov	arg01, result1
13264     00 14 06 F6 | 	mov	arg02, #0
13268     08 85 B0 FD | 	call	#__system___float_tointeger
1326c     FD 1E 02 F6 | 	mov	local01, result1
13270                 | LR__1571
13270                 | ' select case t1.result.iresult
13270     0F 25 02 F6 | 	mov	local04, local01
13274     05 24 26 F3 | 	fle	local04, #5
13278     30 24 62 FD | 	jmprel	local04
1327c                 | LR__1572
1327c     14 00 90 FD | 	jmp	#LR__1573
13280     A8 00 90 FD | 	jmp	#LR__1574
13284     10 01 90 FD | 	jmp	#LR__1575
13288     78 01 90 FD | 	jmp	#LR__1576
1328c     E0 01 90 FD | 	jmp	#LR__1577
13290     70 02 90 FD | 	jmp	#LR__1578
13294                 | LR__1573
13294     56 00 00 FF 
13298     14 E4 05 F1 | 	add	objptr, ##44052
1329c     F2 02 68 FC | 	wrlong	#1, objptr
132a0     04 E4 85 F1 | 	sub	objptr, #4
132a4     F2 34 69 FC | 	wrlong	#154, objptr
132a8     22 00 00 FF 
132ac     A4 E5 05 F1 | 	add	objptr, ##17828
132b0     F2 02 68 FC | 	wrlong	#1, objptr
132b4     22 00 00 FF 
132b8     A8 E5 85 F1 | 	sub	objptr, ##17832
132bc     F2 26 69 FC | 	wrlong	#147, objptr
132c0     56 00 00 FF 
132c4     0C E4 85 F1 | 	sub	objptr, ##44044
132c8     04 12 06 F6 | 	mov	arg01, #4
132cc     2C 42 B0 FD | 	call	#_hg010b_spin2_setfontfamily
132d0     56 00 00 FF 
132d4     10 E4 05 F1 | 	add	objptr, ##44048
132d8     F2 12 02 FB | 	rdlong	arg01, objptr
132dc     04 E4 85 F1 | 	sub	objptr, #4
132e0     F2 14 02 FB | 	rdlong	arg02, objptr
132e4                 | ' 
132e4                 | ' write_color:=ff
132e4     55 00 00 FF 
132e8     CF E5 85 F1 | 	sub	objptr, ##43983
132ec     F2 12 62 FC | 	wrlong	arg01, objptr
132f0                 | ' write_background:=bb
132f0     04 E4 05 F1 | 	add	objptr, #4
132f4     F2 14 62 FC | 	wrlong	arg02, objptr
132f8     01 00 00 FF 
132fc     00 EA 05 F1 | 	add	ptr__dat__, ##512
13300     7A 00 00 FF 
13304     17 E4 05 F1 | 	add	objptr, ##62487
13308     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1330c     04 E4 85 F1 | 	sub	objptr, #4
13310     03 00 80 FF 
13314     F2 28 69 FC | 	wrlong	##1684, objptr
13318     7A 00 00 FF 
1331c     54 E4 85 F1 | 	sub	objptr, ##62548
13320     01 00 00 FF 
13324     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13328     D8 01 90 FD | 	jmp	#LR__1578
1332c                 | LR__1574
1332c     56 00 00 FF 
13330     14 E4 05 F1 | 	add	objptr, ##44052
13334     F2 00 68 FC | 	wrlong	#0, objptr
13338     04 E4 85 F1 | 	sub	objptr, #4
1333c     F2 2E 68 FC | 	wrlong	#23, objptr
13340     22 00 00 FF 
13344     A4 E5 05 F1 | 	add	objptr, ##17828
13348     F2 00 68 FC | 	wrlong	#0, objptr
1334c     22 00 00 FF 
13350     A8 E5 85 F1 | 	sub	objptr, ##17832
13354     F2 00 68 FC | 	wrlong	#0, objptr
13358     56 00 00 FF 
1335c     0C E4 85 F1 | 	sub	objptr, ##44044
13360     00 12 06 F6 | 	mov	arg01, #0
13364     94 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13368     56 00 00 FF 
1336c     10 E4 05 F1 | 	add	objptr, ##44048
13370     F2 12 02 FB | 	rdlong	arg01, objptr
13374     04 E4 85 F1 | 	sub	objptr, #4
13378     F2 14 02 FB | 	rdlong	arg02, objptr
1337c                 | ' 
1337c                 | ' write_color:=ff
1337c     55 00 00 FF 
13380     CF E5 85 F1 | 	sub	objptr, ##43983
13384     F2 12 62 FC | 	wrlong	arg01, objptr
13388                 | ' write_background:=bb
13388     04 E4 05 F1 | 	add	objptr, #4
1338c     F2 14 62 FC | 	wrlong	arg02, objptr
13390     41 E4 85 F1 | 	sub	objptr, #65
13394     6C 01 90 FD | 	jmp	#LR__1578
13398                 | LR__1575
13398     56 00 00 FF 
1339c     14 E4 05 F1 | 	add	objptr, ##44052
133a0     F2 00 68 FC | 	wrlong	#0, objptr
133a4     04 E4 85 F1 | 	sub	objptr, #4
133a8     F2 6A 69 FC | 	wrlong	#181, objptr
133ac     22 00 00 FF 
133b0     A4 E5 05 F1 | 	add	objptr, ##17828
133b4     F2 00 68 FC | 	wrlong	#0, objptr
133b8     22 00 00 FF 
133bc     A8 E5 85 F1 | 	sub	objptr, ##17832
133c0     F2 00 68 FC | 	wrlong	#0, objptr
133c4     56 00 00 FF 
133c8     0C E4 85 F1 | 	sub	objptr, ##44044
133cc     00 12 06 F6 | 	mov	arg01, #0
133d0     28 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
133d4     56 00 00 FF 
133d8     10 E4 05 F1 | 	add	objptr, ##44048
133dc     F2 12 02 FB | 	rdlong	arg01, objptr
133e0     04 E4 85 F1 | 	sub	objptr, #4
133e4     F2 14 02 FB | 	rdlong	arg02, objptr
133e8                 | ' 
133e8                 | ' write_color:=ff
133e8     55 00 00 FF 
133ec     CF E5 85 F1 | 	sub	objptr, ##43983
133f0     F2 12 62 FC | 	wrlong	arg01, objptr
133f4                 | ' write_background:=bb
133f4     04 E4 05 F1 | 	add	objptr, #4
133f8     F2 14 62 FC | 	wrlong	arg02, objptr
133fc     41 E4 85 F1 | 	sub	objptr, #65
13400     00 01 90 FD | 	jmp	#LR__1578
13404                 | LR__1576
13404     56 00 00 FF 
13408     14 E4 05 F1 | 	add	objptr, ##44052
1340c     F2 00 68 FC | 	wrlong	#0, objptr
13410     04 E4 85 F1 | 	sub	objptr, #4
13414     F2 1E 68 FC | 	wrlong	#15, objptr
13418     22 00 00 FF 
1341c     A4 E5 05 F1 | 	add	objptr, ##17828
13420     F2 00 68 FC | 	wrlong	#0, objptr
13424     22 00 00 FF 
13428     A8 E5 85 F1 | 	sub	objptr, ##17832
1342c     F2 00 68 FC | 	wrlong	#0, objptr
13430     56 00 00 FF 
13434     0C E4 85 F1 | 	sub	objptr, ##44044
13438     00 12 06 F6 | 	mov	arg01, #0
1343c     BC 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
13440     56 00 00 FF 
13444     10 E4 05 F1 | 	add	objptr, ##44048
13448     F2 12 02 FB | 	rdlong	arg01, objptr
1344c     04 E4 85 F1 | 	sub	objptr, #4
13450     F2 14 02 FB | 	rdlong	arg02, objptr
13454                 | ' 
13454                 | ' write_color:=ff
13454     55 00 00 FF 
13458     CF E5 85 F1 | 	sub	objptr, ##43983
1345c     F2 12 62 FC | 	wrlong	arg01, objptr
13460                 | ' write_background:=bb
13460     04 E4 05 F1 | 	add	objptr, #4
13464     F2 14 62 FC | 	wrlong	arg02, objptr
13468     41 E4 85 F1 | 	sub	objptr, #65
1346c     94 00 90 FD | 	jmp	#LR__1578
13470                 | LR__1577
13470     56 00 00 FF 
13474     14 E4 05 F1 | 	add	objptr, ##44052
13478     F2 02 68 FC | 	wrlong	#1, objptr
1347c     04 E4 85 F1 | 	sub	objptr, #4
13480     F2 02 68 FC | 	wrlong	#1, objptr
13484     22 00 00 FF 
13488     A4 E5 05 F1 | 	add	objptr, ##17828
1348c     F2 02 68 FC | 	wrlong	#1, objptr
13490     22 00 00 FF 
13494     A8 E5 85 F1 | 	sub	objptr, ##17832
13498     F2 1C 68 FC | 	wrlong	#14, objptr
1349c     56 00 00 FF 
134a0     0C E4 85 F1 | 	sub	objptr, ##44044
134a4     04 12 06 F6 | 	mov	arg01, #4
134a8     50 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
134ac     56 00 00 FF 
134b0     10 E4 05 F1 | 	add	objptr, ##44048
134b4     F2 12 02 FB | 	rdlong	arg01, objptr
134b8     04 E4 85 F1 | 	sub	objptr, #4
134bc     F2 14 02 FB | 	rdlong	arg02, objptr
134c0                 | ' 
134c0                 | ' write_color:=ff
134c0     55 00 00 FF 
134c4     CF E5 85 F1 | 	sub	objptr, ##43983
134c8     F2 12 62 FC | 	wrlong	arg01, objptr
134cc                 | ' write_background:=bb
134cc     04 E4 05 F1 | 	add	objptr, #4
134d0     F2 14 62 FC | 	wrlong	arg02, objptr
134d4     07 00 00 FF 
134d8     72 EB 05 F1 | 	add	ptr__dat__, ##3954
134dc     7A 00 00 FF 
134e0     17 E4 05 F1 | 	add	objptr, ##62487
134e4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
134e8     04 E4 85 F1 | 	sub	objptr, #4
134ec     03 00 80 FF 
134f0     F2 28 69 FC | 	wrlong	##1684, objptr
134f4     7A 00 00 FF 
134f8     54 E4 85 F1 | 	sub	objptr, ##62548
134fc     07 00 00 FF 
13500     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
13504                 | LR__1578
13504     7A 00 00 FF 
13508     50 E4 05 F1 | 	add	objptr, ##62544
1350c     F2 1E 62 FC | 	wrlong	local01, objptr
13510     24 00 00 FF 
13514     40 E4 85 F1 | 	sub	objptr, ##18496
13518     F2 12 02 FB | 	rdlong	arg01, objptr
1351c     04 E4 85 F1 | 	sub	objptr, #4
13520     F2 14 02 FB | 	rdlong	arg02, objptr
13524     56 00 00 FF 
13528     0C E4 85 F1 | 	sub	objptr, ##44044
1352c     B4 40 B0 FD | 	call	#_hg010b_spin2_cls
13530     40 01 00 FF 
13534     91 13 06 F6 | 	mov	arg01, ##@LR__4599
13538                 | ' 
13538                 | ' write(text)
13538     64 43 B0 FD | 	call	#_hg010b_spin2_write
1353c                 | ' crlf
1353c     C0 44 B0 FD | 	call	#_hg010b_spin2_crlf
13540     10 00 00 FF 
13544     10 EB 05 F1 | 	add	ptr__dat__, ##8464
13548     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1354c     10 00 00 FF 
13550     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
13554                 | ' 
13554                 | ' write(text)
13554     48 43 B0 FD | 	call	#_hg010b_spin2_write
13558                 | ' crlf
13558     A4 44 B0 FD | 	call	#_hg010b_spin2_crlf
1355c     78 00 00 FF 
13560     B0 E5 05 F1 | 	add	objptr, ##61872
13564     F2 12 02 FB | 	rdlong	arg01, objptr
13568     78 00 00 FF 
1356c     B0 E5 85 F1 | 	sub	objptr, ##61872
13570                 | ' 
13570                 | ' write(text)
13570     2C 43 B0 FD | 	call	#_hg010b_spin2_write
13574                 | ' crlf
13574     88 44 B0 FD | 	call	#_hg010b_spin2_crlf
13578     A7 F0 03 F6 | 	mov	ptra, fp
1357c     B2 00 A0 FD | 	call	#popregs_
13580                 | _do_mode_ret
13580     2D 00 64 FD | 	ret
13584                 | 
13584                 | ' 
13584                 | ' 
13584                 | ' 
13584                 | ' sub do_pinwrite
13584                 | _do_pinwrite
13584     01 4A 05 F6 | 	mov	COUNT_, #1
13588     A8 00 A0 FD | 	call	#pushregs_
1358c     18 F0 07 F1 | 	add	ptra, #24
13590     9C 5F BF FD | 	call	#_pop
13594     FD 14 02 F6 | 	mov	arg02, result1
13598     FE 12 02 F6 | 	mov	arg01, result2
1359c     FF 1E 02 F6 | 	mov	local01, result3
135a0     A7 14 62 FC | 	wrlong	arg02, fp
135a4     04 4E 05 F1 | 	add	fp, #4
135a8     A7 12 62 FC | 	wrlong	arg01, fp
135ac     04 4E 05 F1 | 	add	fp, #4
135b0     A7 1E 62 FC | 	wrlong	local01, fp
135b4     08 4E 85 F1 | 	sub	fp, #8
135b8     74 5F BF FD | 	call	#_pop
135bc     FF 1E 02 F6 | 	mov	local01, result3
135c0     0C 4E 05 F1 | 	add	fp, #12
135c4     A7 FA 61 FC | 	wrlong	result1, fp
135c8     04 4E 05 F1 | 	add	fp, #4
135cc     A7 FC 61 FC | 	wrlong	result2, fp
135d0     04 4E 05 F1 | 	add	fp, #4
135d4     A7 1E 62 FC | 	wrlong	local01, fp
135d8     08 4E 85 F1 | 	sub	fp, #8
135dc     A7 12 02 F6 | 	mov	arg01, fp
135e0     0C 4E 85 F1 | 	sub	fp, #12
135e4     D8 D3 BF FD | 	call	#_converttoint
135e8     FD 1E 02 F6 | 	mov	local01, result1
135ec     A7 12 02 F6 | 	mov	arg01, fp
135f0     CC D3 BF FD | 	call	#_converttoint
135f4     FD 14 02 F6 | 	mov	arg02, result1
135f8     0F 13 02 F6 | 	mov	arg01, local01
135fc     7C 54 B0 FD | 	call	#__system___pinwrite
13600     A7 F0 03 F6 | 	mov	ptra, fp
13604     B2 00 A0 FD | 	call	#popregs_
13608                 | _do_pinwrite_ret
13608     2D 00 64 FD | 	ret
1360c                 | 
1360c                 | ' 
1360c                 | ' sub do_pinfloat
1360c                 | _do_pinfloat
1360c     00 4A 05 F6 | 	mov	COUNT_, #0
13610     A8 00 A0 FD | 	call	#pushregs_
13614     0C F0 07 F1 | 	add	ptra, #12
13618     14 5F BF FD | 	call	#_pop
1361c     A7 FA 61 FC | 	wrlong	result1, fp
13620     04 4E 05 F1 | 	add	fp, #4
13624     A7 FC 61 FC | 	wrlong	result2, fp
13628     04 4E 05 F1 | 	add	fp, #4
1362c     A7 FE 61 FC | 	wrlong	result3, fp
13630     08 4E 85 F1 | 	sub	fp, #8
13634     A7 12 02 F6 | 	mov	arg01, fp
13638     84 D3 BF FD | 	call	#_converttoint
1363c     50 FA 61 FD | 	fltl	result1
13640     A7 F0 03 F6 | 	mov	ptra, fp
13644     B2 00 A0 FD | 	call	#popregs_
13648                 | _do_pinfloat_ret
13648     2D 00 64 FD | 	ret
1364c                 | 
1364c                 | ' 
1364c                 | ' sub do_pinlo
1364c                 | _do_pinlo
1364c     00 4A 05 F6 | 	mov	COUNT_, #0
13650     A8 00 A0 FD | 	call	#pushregs_
13654     0C F0 07 F1 | 	add	ptra, #12
13658     D4 5E BF FD | 	call	#_pop
1365c     A7 FA 61 FC | 	wrlong	result1, fp
13660     04 4E 05 F1 | 	add	fp, #4
13664     A7 FC 61 FC | 	wrlong	result2, fp
13668     04 4E 05 F1 | 	add	fp, #4
1366c     A7 FE 61 FC | 	wrlong	result3, fp
13670     08 4E 85 F1 | 	sub	fp, #8
13674     A7 12 02 F6 | 	mov	arg01, fp
13678     44 D3 BF FD | 	call	#_converttoint
1367c     58 FA 61 FD | 	drvl	result1
13680     A7 F0 03 F6 | 	mov	ptra, fp
13684     B2 00 A0 FD | 	call	#popregs_
13688                 | _do_pinlo_ret
13688     2D 00 64 FD | 	ret
1368c                 | 
1368c                 | ' 
1368c                 | ' sub do_pinhi
1368c                 | _do_pinhi
1368c     00 4A 05 F6 | 	mov	COUNT_, #0
13690     A8 00 A0 FD | 	call	#pushregs_
13694     0C F0 07 F1 | 	add	ptra, #12
13698     94 5E BF FD | 	call	#_pop
1369c     A7 FA 61 FC | 	wrlong	result1, fp
136a0     04 4E 05 F1 | 	add	fp, #4
136a4     A7 FC 61 FC | 	wrlong	result2, fp
136a8     04 4E 05 F1 | 	add	fp, #4
136ac     A7 FE 61 FC | 	wrlong	result3, fp
136b0     08 4E 85 F1 | 	sub	fp, #8
136b4     A7 12 02 F6 | 	mov	arg01, fp
136b8     04 D3 BF FD | 	call	#_converttoint
136bc     59 FA 61 FD | 	drvh	result1
136c0     A7 F0 03 F6 | 	mov	ptra, fp
136c4     B2 00 A0 FD | 	call	#popregs_
136c8                 | _do_pinhi_ret
136c8     2D 00 64 FD | 	ret
136cc                 | 
136cc                 | ' 
136cc                 | ' sub do_pintoggle
136cc                 | _do_pintoggle
136cc     00 4A 05 F6 | 	mov	COUNT_, #0
136d0     A8 00 A0 FD | 	call	#pushregs_
136d4     0C F0 07 F1 | 	add	ptra, #12
136d8     54 5E BF FD | 	call	#_pop
136dc     A7 FA 61 FC | 	wrlong	result1, fp
136e0     04 4E 05 F1 | 	add	fp, #4
136e4     A7 FC 61 FC | 	wrlong	result2, fp
136e8     04 4E 05 F1 | 	add	fp, #4
136ec     A7 FE 61 FC | 	wrlong	result3, fp
136f0     08 4E 85 F1 | 	sub	fp, #8
136f4     A7 12 02 F6 | 	mov	arg01, fp
136f8     C4 D2 BF FD | 	call	#_converttoint
136fc     5F FA 61 FD | 	drvnot	result1
13700     A7 F0 03 F6 | 	mov	ptra, fp
13704     B2 00 A0 FD | 	call	#popregs_
13708                 | _do_pintoggle_ret
13708     2D 00 64 FD | 	ret
1370c                 | 
1370c                 | ' 
1370c                 | ' 
1370c                 | ' sub do_pinstart
1370c                 | _do_pinstart
1370c     03 4A 05 F6 | 	mov	COUNT_, #3
13710     A8 00 A0 FD | 	call	#pushregs_
13714     30 F0 07 F1 | 	add	ptra, #48
13718     14 5E BF FD | 	call	#_pop
1371c     FD 16 02 F6 | 	mov	arg03, result1
13720     FE 14 02 F6 | 	mov	arg02, result2
13724     FF 18 02 F6 | 	mov	arg04, result3
13728     A7 16 62 FC | 	wrlong	arg03, fp
1372c     04 4E 05 F1 | 	add	fp, #4
13730     A7 14 62 FC | 	wrlong	arg02, fp
13734     04 4E 05 F1 | 	add	fp, #4
13738     A7 18 62 FC | 	wrlong	arg04, fp
1373c     08 4E 85 F1 | 	sub	fp, #8
13740     EC 5D BF FD | 	call	#_pop
13744     FD 16 02 F6 | 	mov	arg03, result1
13748     FE 14 02 F6 | 	mov	arg02, result2
1374c     FF 18 02 F6 | 	mov	arg04, result3
13750     0C 4E 05 F1 | 	add	fp, #12
13754     A7 16 62 FC | 	wrlong	arg03, fp
13758     04 4E 05 F1 | 	add	fp, #4
1375c     A7 14 62 FC | 	wrlong	arg02, fp
13760     04 4E 05 F1 | 	add	fp, #4
13764     A7 18 62 FC | 	wrlong	arg04, fp
13768     14 4E 85 F1 | 	sub	fp, #20
1376c     C0 5D BF FD | 	call	#_pop
13770     FD 16 02 F6 | 	mov	arg03, result1
13774     FE 14 02 F6 | 	mov	arg02, result2
13778     FF 18 02 F6 | 	mov	arg04, result3
1377c     18 4E 05 F1 | 	add	fp, #24
13780     A7 16 62 FC | 	wrlong	arg03, fp
13784     04 4E 05 F1 | 	add	fp, #4
13788     A7 14 62 FC | 	wrlong	arg02, fp
1378c     04 4E 05 F1 | 	add	fp, #4
13790     A7 18 62 FC | 	wrlong	arg04, fp
13794     20 4E 85 F1 | 	sub	fp, #32
13798     94 5D BF FD | 	call	#_pop
1379c     FF 16 02 F6 | 	mov	arg03, result3
137a0     24 4E 05 F1 | 	add	fp, #36
137a4     A7 FA 61 FC | 	wrlong	result1, fp
137a8     04 4E 05 F1 | 	add	fp, #4
137ac     A7 FC 61 FC | 	wrlong	result2, fp
137b0     04 4E 05 F1 | 	add	fp, #4
137b4     A7 16 62 FC | 	wrlong	arg03, fp
137b8     08 4E 85 F1 | 	sub	fp, #8
137bc     A7 12 02 F6 | 	mov	arg01, fp
137c0     24 4E 85 F1 | 	sub	fp, #36
137c4     F8 D1 BF FD | 	call	#_converttoint
137c8     FD 1E 02 F6 | 	mov	local01, result1
137cc     18 4E 05 F1 | 	add	fp, #24
137d0     A7 12 02 F6 | 	mov	arg01, fp
137d4     18 4E 85 F1 | 	sub	fp, #24
137d8     E4 D1 BF FD | 	call	#_converttoint
137dc     FD 20 02 F6 | 	mov	local02, result1
137e0     0C 4E 05 F1 | 	add	fp, #12
137e4     A7 12 02 F6 | 	mov	arg01, fp
137e8     0C 4E 85 F1 | 	sub	fp, #12
137ec     D0 D1 BF FD | 	call	#_converttoint
137f0     FD 22 02 F6 | 	mov	local03, result1
137f4     A7 12 02 F6 | 	mov	arg01, fp
137f8     C4 D1 BF FD | 	call	#_converttoint
137fc     40 1E 62 FD | 	dirl	local01
13800     0F 21 02 FC | 	wrpin	local02, local01
13804     0F 23 12 FC | 	wxpin	local03, local01
13808     0F FB 21 FC | 	wypin	result1, local01
1380c     41 1E 62 FD | 	dirh	local01
13810     A7 F0 03 F6 | 	mov	ptra, fp
13814     B2 00 A0 FD | 	call	#popregs_
13818                 | _do_pinstart_ret
13818     2D 00 64 FD | 	ret
1381c                 | 
1381c                 | ' 
1381c                 | ' 
1381c                 | ' sub do_wrpin
1381c                 | _do_wrpin
1381c     01 4A 05 F6 | 	mov	COUNT_, #1
13820     A8 00 A0 FD | 	call	#pushregs_
13824     18 F0 07 F1 | 	add	ptra, #24
13828     04 5D BF FD | 	call	#_pop
1382c     FD 14 02 F6 | 	mov	arg02, result1
13830     FE 12 02 F6 | 	mov	arg01, result2
13834     FF 1E 02 F6 | 	mov	local01, result3
13838     A7 14 62 FC | 	wrlong	arg02, fp
1383c     04 4E 05 F1 | 	add	fp, #4
13840     A7 12 62 FC | 	wrlong	arg01, fp
13844     04 4E 05 F1 | 	add	fp, #4
13848     A7 1E 62 FC | 	wrlong	local01, fp
1384c     08 4E 85 F1 | 	sub	fp, #8
13850     DC 5C BF FD | 	call	#_pop
13854     FF 1E 02 F6 | 	mov	local01, result3
13858     0C 4E 05 F1 | 	add	fp, #12
1385c     A7 FA 61 FC | 	wrlong	result1, fp
13860     04 4E 05 F1 | 	add	fp, #4
13864     A7 FC 61 FC | 	wrlong	result2, fp
13868     04 4E 05 F1 | 	add	fp, #4
1386c     A7 1E 62 FC | 	wrlong	local01, fp
13870     08 4E 85 F1 | 	sub	fp, #8
13874     A7 12 02 F6 | 	mov	arg01, fp
13878     0C 4E 85 F1 | 	sub	fp, #12
1387c     40 D1 BF FD | 	call	#_converttoint
13880     FD 1E 02 F6 | 	mov	local01, result1
13884     A7 12 02 F6 | 	mov	arg01, fp
13888     34 D1 BF FD | 	call	#_converttoint
1388c     0F FB 01 FC | 	wrpin	result1, local01
13890     A7 F0 03 F6 | 	mov	ptra, fp
13894     B2 00 A0 FD | 	call	#popregs_
13898                 | _do_wrpin_ret
13898     2D 00 64 FD | 	ret
1389c                 | 
1389c                 | ' 
1389c                 | ' sub do_wxpin
1389c                 | _do_wxpin
1389c     01 4A 05 F6 | 	mov	COUNT_, #1
138a0     A8 00 A0 FD | 	call	#pushregs_
138a4     18 F0 07 F1 | 	add	ptra, #24
138a8     84 5C BF FD | 	call	#_pop
138ac     FD 14 02 F6 | 	mov	arg02, result1
138b0     FE 12 02 F6 | 	mov	arg01, result2
138b4     FF 1E 02 F6 | 	mov	local01, result3
138b8     A7 14 62 FC | 	wrlong	arg02, fp
138bc     04 4E 05 F1 | 	add	fp, #4
138c0     A7 12 62 FC | 	wrlong	arg01, fp
138c4     04 4E 05 F1 | 	add	fp, #4
138c8     A7 1E 62 FC | 	wrlong	local01, fp
138cc     08 4E 85 F1 | 	sub	fp, #8
138d0     5C 5C BF FD | 	call	#_pop
138d4     FF 1E 02 F6 | 	mov	local01, result3
138d8     0C 4E 05 F1 | 	add	fp, #12
138dc     A7 FA 61 FC | 	wrlong	result1, fp
138e0     04 4E 05 F1 | 	add	fp, #4
138e4     A7 FC 61 FC | 	wrlong	result2, fp
138e8     04 4E 05 F1 | 	add	fp, #4
138ec     A7 1E 62 FC | 	wrlong	local01, fp
138f0     08 4E 85 F1 | 	sub	fp, #8
138f4     A7 12 02 F6 | 	mov	arg01, fp
138f8     0C 4E 85 F1 | 	sub	fp, #12
138fc     C0 D0 BF FD | 	call	#_converttoint
13900     FD 1E 02 F6 | 	mov	local01, result1
13904     A7 12 02 F6 | 	mov	arg01, fp
13908     B4 D0 BF FD | 	call	#_converttoint
1390c     0F FB 11 FC | 	wxpin	result1, local01
13910     A7 F0 03 F6 | 	mov	ptra, fp
13914     B2 00 A0 FD | 	call	#popregs_
13918                 | _do_wxpin_ret
13918     2D 00 64 FD | 	ret
1391c                 | 
1391c                 | ' 
1391c                 | ' sub do_wypin
1391c                 | _do_wypin
1391c     01 4A 05 F6 | 	mov	COUNT_, #1
13920     A8 00 A0 FD | 	call	#pushregs_
13924     18 F0 07 F1 | 	add	ptra, #24
13928     04 5C BF FD | 	call	#_pop
1392c     FD 14 02 F6 | 	mov	arg02, result1
13930     FE 12 02 F6 | 	mov	arg01, result2
13934     FF 1E 02 F6 | 	mov	local01, result3
13938     A7 14 62 FC | 	wrlong	arg02, fp
1393c     04 4E 05 F1 | 	add	fp, #4
13940     A7 12 62 FC | 	wrlong	arg01, fp
13944     04 4E 05 F1 | 	add	fp, #4
13948     A7 1E 62 FC | 	wrlong	local01, fp
1394c     08 4E 85 F1 | 	sub	fp, #8
13950     DC 5B BF FD | 	call	#_pop
13954     FF 1E 02 F6 | 	mov	local01, result3
13958     0C 4E 05 F1 | 	add	fp, #12
1395c     A7 FA 61 FC | 	wrlong	result1, fp
13960     04 4E 05 F1 | 	add	fp, #4
13964     A7 FC 61 FC | 	wrlong	result2, fp
13968     04 4E 05 F1 | 	add	fp, #4
1396c     A7 1E 62 FC | 	wrlong	local01, fp
13970     08 4E 85 F1 | 	sub	fp, #8
13974     A7 12 02 F6 | 	mov	arg01, fp
13978     0C 4E 85 F1 | 	sub	fp, #12
1397c     40 D0 BF FD | 	call	#_converttoint
13980     FD 1E 02 F6 | 	mov	local01, result1
13984     A7 12 02 F6 | 	mov	arg01, fp
13988     34 D0 BF FD | 	call	#_converttoint
1398c     0F FB 21 FC | 	wypin	result1, local01
13990     A7 F0 03 F6 | 	mov	ptra, fp
13994     B2 00 A0 FD | 	call	#popregs_
13998                 | _do_wypin_ret
13998     2D 00 64 FD | 	ret
1399c                 | 
1399c                 | ' 
1399c                 | ' sub do_position
1399c                 | _do_position
1399c     01 4A 05 F6 | 	mov	COUNT_, #1
139a0     A8 00 A0 FD | 	call	#pushregs_
139a4     18 F0 07 F1 | 	add	ptra, #24
139a8     84 5B BF FD | 	call	#_pop
139ac     FD 14 02 F6 | 	mov	arg02, result1
139b0     FE 12 02 F6 | 	mov	arg01, result2
139b4     FF 1E 02 F6 | 	mov	local01, result3
139b8     A7 14 62 FC | 	wrlong	arg02, fp
139bc     04 4E 05 F1 | 	add	fp, #4
139c0     A7 12 62 FC | 	wrlong	arg01, fp
139c4     04 4E 05 F1 | 	add	fp, #4
139c8     A7 1E 62 FC | 	wrlong	local01, fp
139cc     08 4E 85 F1 | 	sub	fp, #8
139d0     5C 5B BF FD | 	call	#_pop
139d4     FF 1E 02 F6 | 	mov	local01, result3
139d8     0C 4E 05 F1 | 	add	fp, #12
139dc     A7 FA 61 FC | 	wrlong	result1, fp
139e0     04 4E 05 F1 | 	add	fp, #4
139e4     A7 FC 61 FC | 	wrlong	result2, fp
139e8     04 4E 05 F1 | 	add	fp, #4
139ec     A7 1E 62 FC | 	wrlong	local01, fp
139f0     08 4E 85 F1 | 	sub	fp, #8
139f4     A7 12 02 F6 | 	mov	arg01, fp
139f8     0C 4E 85 F1 | 	sub	fp, #12
139fc     C0 CF BF FD | 	call	#_converttoint
13a00     FD 1E 02 F6 | 	mov	local01, result1
13a04     A7 12 02 F6 | 	mov	arg01, fp
13a08     B4 CF BF FD | 	call	#_converttoint
13a0c     FD 14 02 F6 | 	mov	arg02, result1
13a10     0F 13 02 F6 | 	mov	arg01, local01
13a14     24 3B B0 FD | 	call	#_hg010b_spin2_setcursorpos
13a18     A7 F0 03 F6 | 	mov	ptra, fp
13a1c     B2 00 A0 FD | 	call	#popregs_
13a20                 | _do_position_ret
13a20     2D 00 64 FD | 	ret
13a24                 | 
13a24                 | ' 
13a24                 | ' sub do_waitms
13a24                 | _do_waitms
13a24     01 4A 05 F6 | 	mov	COUNT_, #1
13a28     A8 00 A0 FD | 	call	#pushregs_
13a2c     18 F0 07 F1 | 	add	ptra, #24
13a30     FC 5A BF FD | 	call	#_pop
13a34     A7 FA 61 FC | 	wrlong	result1, fp
13a38     04 4E 05 F1 | 	add	fp, #4
13a3c     A7 FC 61 FC | 	wrlong	result2, fp
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 FE 61 FC | 	wrlong	result3, fp
13a48                 | ' 
13a48                 | ' t1=pop() 'value
13a48                 | ' 
13a48                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
13a48     08 4E 85 F1 | 	sub	fp, #8
13a4c     1C FE 0D F2 | 	cmp	result3, #28 wz
13a50     08 4E 05 51 |  if_ne	add	fp, #8
13a54     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13a58     08 4E 85 51 |  if_ne	sub	fp, #8
13a5c     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
13a60     A7 12 02 AB |  if_e	rdlong	arg01, fp
13a64     0C 4E 05 A1 |  if_e	add	fp, #12
13a68     A7 12 62 AC |  if_e	wrlong	arg01, fp
13a6c     0C 4E 85 A1 |  if_e	sub	fp, #12
13a70     14 00 90 AD |  if_e	jmp	#LR__1580
13a74     A7 12 02 F6 | 	mov	arg01, fp
13a78     44 CF BF FD | 	call	#_converttoint
13a7c     0C 4E 05 F1 | 	add	fp, #12
13a80     A7 FA 61 FC | 	wrlong	result1, fp
13a84     0C 4E 85 F1 | 	sub	fp, #12
13a88                 | LR__1580
13a88                 | ' if t<0 then return
13a88     0C 4E 05 F1 | 	add	fp, #12
13a8c     A7 12 02 FB | 	rdlong	arg01, fp
13a90     0C 4E 85 F1 | 	sub	fp, #12
13a94     00 12 56 F2 | 	cmps	arg01, #0 wc
13a98     B8 00 90 CD |  if_b	jmp	#LR__1585
13a9c                 | ' if t < 5000 then 
13a9c     0C 4E 05 F1 | 	add	fp, #12
13aa0     A7 12 02 FB | 	rdlong	arg01, fp
13aa4     0C 4E 85 F1 | 	sub	fp, #12
13aa8     09 00 00 FF 
13aac     88 13 56 F2 | 	cmps	arg01, ##5000 wc
13ab0     14 00 90 3D |  if_ae	jmp	#LR__1581
13ab4     0C 4E 05 F1 | 	add	fp, #12
13ab8     A7 12 02 FB | 	rdlong	arg01, fp
13abc     0C 4E 85 F1 | 	sub	fp, #12
13ac0     F8 50 B0 FD | 	call	#__system___waitms
13ac4     8C 00 90 FD | 	jmp	#LR__1584
13ac8                 | LR__1581
13ac8     10 4E 05 F1 | 	add	fp, #16
13acc     A7 02 68 FC | 	wrlong	#1, fp
13ad0     04 4E 85 F1 | 	sub	fp, #4
13ad4     A7 12 02 FB | 	rdlong	arg01, fp
13ad8     09 13 52 F6 | 	abs	arg01, arg01 wc
13adc     09 00 00 FF 
13ae0     88 13 16 FD | 	qdiv	arg01, ##5000
13ae4                 | '   for i=1 to t/5000
13ae4     0C 4E 85 F1 | 	sub	fp, #12
13ae8     18 1E 62 FD | 	getqx	local01
13aec     0F 1F 82 F6 | 	negc	local01, local01
13af0     01 1E 06 F1 | 	add	local01, #1
13af4                 | LR__1582
13af4     10 4E 05 F1 | 	add	fp, #16
13af8     A7 12 02 FB | 	rdlong	arg01, fp
13afc     10 4E 85 F1 | 	sub	fp, #16
13b00     0F 13 52 F2 | 	cmps	arg01, local01 wc
13b04     28 00 90 3D |  if_ae	jmp	#LR__1583
13b08     0C 4E 05 F1 | 	add	fp, #12
13b0c     A7 12 02 FB | 	rdlong	arg01, fp
13b10     0C 4E 85 F1 | 	sub	fp, #12
13b14     A4 50 B0 FD | 	call	#__system___waitms
13b18     10 4E 05 F1 | 	add	fp, #16
13b1c     A7 12 02 FB | 	rdlong	arg01, fp
13b20     01 12 06 F1 | 	add	arg01, #1
13b24     A7 12 62 FC | 	wrlong	arg01, fp
13b28     10 4E 85 F1 | 	sub	fp, #16
13b2c     C4 FF 9F FD | 	jmp	#LR__1582
13b30                 | LR__1583
13b30     0C 4E 05 F1 | 	add	fp, #12
13b34     A7 1E 02 FB | 	rdlong	local01, fp
13b38     0F 1F 52 F6 | 	abs	local01, local01 wc
13b3c     09 00 00 FF 
13b40     88 1F 16 FD | 	qdiv	local01, ##5000
13b44     0C 4E 85 F1 | 	sub	fp, #12
13b48     19 1E 62 FD | 	getqy	local01
13b4c     0F 13 82 F6 | 	negc	arg01, local01
13b50     68 50 B0 FD | 	call	#__system___waitms
13b54                 | LR__1584
13b54                 | LR__1585
13b54     A7 F0 03 F6 | 	mov	ptra, fp
13b58     B2 00 A0 FD | 	call	#popregs_
13b5c                 | _do_waitms_ret
13b5c     2D 00 64 FD | 	ret
13b60                 | 
13b60                 | ' 
13b60                 | ' sub do_waitvbl
13b60                 | _do_waitvbl
13b60     01 12 06 F6 | 	mov	arg01, #1
13b64     0C 3A B0 FD | 	call	#_hg010b_spin2_waitvbl
13b68                 | _do_waitvbl_ret
13b68     2D 00 64 FD | 	ret
13b6c                 | 
13b6c                 | ' 
13b6c                 | ' sub do_waitclock
13b6c                 | _do_waitclock
13b6c     7A 00 00 FF 
13b70     48 E4 05 F1 | 	add	objptr, ##62536
13b74     F2 00 02 FB | 	rdlong	_var01, objptr
13b78                 | ' c=hkcnt
13b78                 | ' do: loop until hkcnt<>c
13b78                 | LR__1590
13b78     F2 02 02 FB | 	rdlong	_var02, objptr
13b7c     00 03 0A F2 | 	cmp	_var02, _var01 wz
13b80     F4 FF 9F AD |  if_e	jmp	#LR__1590
13b84     7A 00 00 FF 
13b88     48 E4 85 F1 | 	sub	objptr, ##62536
13b8c                 | _do_waitclock_ret
13b8c     2D 00 64 FD | 	ret
13b90                 | 
13b90                 | ' 
13b90                 | ' sub do_dir
13b90                 | _do_dir
13b90     03 4A 05 F6 | 	mov	COUNT_, #3
13b94     A8 00 A0 FD | 	call	#pushregs_
13b98     40 01 00 FF 
13b9c     92 13 06 F6 | 	mov	arg01, ##@LR__4600
13ba0     B0 53 B0 FD | 	call	#__system___chdir
13ba4                 | ' chdir("/sd/bas")       ' set working directory
13ba4                 | ' print "Working directory: "; currentdir$ 
13ba4     00 12 06 F6 | 	mov	arg01, #0
13ba8     18 A5 B0 FD | 	call	#__system___getiolock_0417
13bac     FD 12 02 F6 | 	mov	arg01, result1
13bb0     14 4D B0 FD | 	call	#__system___lockmem
13bb4     40 01 00 FF 
13bb8     9A 15 06 F6 | 	mov	arg02, ##@LR__4601
13bbc     00 12 06 F6 | 	mov	arg01, #0
13bc0     00 16 06 F6 | 	mov	arg03, #0
13bc4     F0 59 B0 FD | 	call	#__system___basic_print_string
13bc8     71 00 00 FF 
13bcc     68 E4 05 F1 | 	add	objptr, ##57960
13bd0     F2 14 02 FB | 	rdlong	arg02, objptr
13bd4     71 00 00 FF 
13bd8     68 E4 85 F1 | 	sub	objptr, ##57960
13bdc     00 12 06 F6 | 	mov	arg01, #0
13be0     00 16 06 F6 | 	mov	arg03, #0
13be4     D0 59 B0 FD | 	call	#__system___basic_print_string
13be8     00 12 06 F6 | 	mov	arg01, #0
13bec     0A 14 06 F6 | 	mov	arg02, #10
13bf0     00 16 06 F6 | 	mov	arg03, #0
13bf4     68 59 B0 FD | 	call	#__system___basic_print_char
13bf8     00 12 06 F6 | 	mov	arg01, #0
13bfc     C4 A4 B0 FD | 	call	#__system___getiolock_0417
13c00     FD 00 68 FC | 	wrlong	#0, result1
13c04     40 01 00 FF 
13c08     AE 13 06 F6 | 	mov	arg01, ##@LR__4602
13c0c     10 14 06 F6 | 	mov	arg02, #16
13c10     00 A5 B0 FD | 	call	#__system___basic_dir
13c14     FD 1E 02 F6 | 	mov	local01, result1
13c18                 | ' 
13c18                 | ' filename=dir$("*", fbDirectory)
13c18                 | ' while filename <> "" and filename <> nil
13c18                 | LR__1600
13c18     00 20 06 F6 | 	mov	local02, #0
13c1c     40 01 00 FF 
13c20     B0 15 06 F6 | 	mov	arg02, ##@LR__4603
13c24     0F 13 02 F6 | 	mov	arg01, local01
13c28     C4 4C B0 FD | 	call	#__system___string_cmp
13c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
13c30     00 20 26 56 |  if_ne	not	local02, #0
13c34     00 22 06 F6 | 	mov	local03, #0
13c38     0F 13 02 F6 | 	mov	arg01, local01
13c3c     00 14 06 F6 | 	mov	arg02, #0
13c40     AC 4C B0 FD | 	call	#__system___string_cmp
13c44     00 FA 0D F2 | 	cmp	result1, #0 wz
13c48     00 22 26 56 |  if_ne	not	local03, #0
13c4c     11 21 CA F7 | 	test	local02, local03 wz
13c50     64 00 90 AD |  if_e	jmp	#LR__1601
13c54                 | '   print "[dir] ";filename
13c54     00 12 06 F6 | 	mov	arg01, #0
13c58     68 A4 B0 FD | 	call	#__system___getiolock_0417
13c5c     FD 12 02 F6 | 	mov	arg01, result1
13c60     64 4C B0 FD | 	call	#__system___lockmem
13c64     40 01 00 FF 
13c68     B1 15 06 F6 | 	mov	arg02, ##@LR__4604
13c6c     00 12 06 F6 | 	mov	arg01, #0
13c70     00 16 06 F6 | 	mov	arg03, #0
13c74     40 59 B0 FD | 	call	#__system___basic_print_string
13c78     00 12 06 F6 | 	mov	arg01, #0
13c7c     0F 15 02 F6 | 	mov	arg02, local01
13c80     00 16 06 F6 | 	mov	arg03, #0
13c84     30 59 B0 FD | 	call	#__system___basic_print_string
13c88     00 12 06 F6 | 	mov	arg01, #0
13c8c     0A 14 06 F6 | 	mov	arg02, #10
13c90     00 16 06 F6 | 	mov	arg03, #0
13c94     C8 58 B0 FD | 	call	#__system___basic_print_char
13c98     00 12 06 F6 | 	mov	arg01, #0
13c9c     24 A4 B0 FD | 	call	#__system___getiolock_0417
13ca0     FD 00 68 FC | 	wrlong	#0, result1
13ca4     00 12 06 F6 | 	mov	arg01, #0
13ca8     00 14 06 F6 | 	mov	arg02, #0
13cac     64 A4 B0 FD | 	call	#__system___basic_dir
13cb0     FD 1E 02 F6 | 	mov	local01, result1
13cb4     60 FF 9F FD | 	jmp	#LR__1600
13cb8                 | LR__1601
13cb8     40 01 00 FF 
13cbc     B8 13 06 F6 | 	mov	arg01, ##@LR__4605
13cc0     21 14 06 F6 | 	mov	arg02, #33
13cc4     4C A4 B0 FD | 	call	#__system___basic_dir
13cc8     FD 1E 02 F6 | 	mov	local01, result1
13ccc                 | ' 
13ccc                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
13ccc                 | ' do while filename <> "" and filename <> nil
13ccc                 | LR__1602
13ccc     00 20 06 F6 | 	mov	local02, #0
13cd0     40 01 00 FF 
13cd4     BA 15 06 F6 | 	mov	arg02, ##@LR__4606
13cd8     0F 13 02 F6 | 	mov	arg01, local01
13cdc     10 4C B0 FD | 	call	#__system___string_cmp
13ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
13ce4     00 20 26 56 |  if_ne	not	local02, #0
13ce8     00 22 06 F6 | 	mov	local03, #0
13cec     0F 13 02 F6 | 	mov	arg01, local01
13cf0     00 14 06 F6 | 	mov	arg02, #0
13cf4     F8 4B B0 FD | 	call	#__system___string_cmp
13cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
13cfc     00 22 26 56 |  if_ne	not	local03, #0
13d00     11 21 CA F7 | 	test	local02, local03 wz
13d04     4C 01 90 AD |  if_e	jmp	#LR__1606
13d08                 | '   print filename
13d08     00 12 06 F6 | 	mov	arg01, #0
13d0c     B4 A3 B0 FD | 	call	#__system___getiolock_0417
13d10     FD 12 02 F6 | 	mov	arg01, result1
13d14     B0 4B B0 FD | 	call	#__system___lockmem
13d18     00 12 06 F6 | 	mov	arg01, #0
13d1c     0F 15 02 F6 | 	mov	arg02, local01
13d20     00 16 06 F6 | 	mov	arg03, #0
13d24     90 58 B0 FD | 	call	#__system___basic_print_string
13d28     00 12 06 F6 | 	mov	arg01, #0
13d2c     0A 14 06 F6 | 	mov	arg02, #10
13d30     00 16 06 F6 | 	mov	arg03, #0
13d34     28 58 B0 FD | 	call	#__system___basic_print_char
13d38     00 12 06 F6 | 	mov	arg01, #0
13d3c     84 A3 B0 FD | 	call	#__system___getiolock_0417
13d40     FD 00 68 FC | 	wrlong	#0, result1
13d44     00 12 06 F6 | 	mov	arg01, #0
13d48     00 14 06 F6 | 	mov	arg02, #0
13d4c     C4 A3 B0 FD | 	call	#__system___basic_dir
13d50     FD 1E 02 F6 | 	mov	local01, result1
13d54                 | '   filename = dir$()      ' continue scan
13d54                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
13d54                 | ' return cursor_y
13d54     3A E4 05 F1 | 	add	objptr, #58
13d58     F2 FA C1 FA | 	rdbyte	result1, objptr
13d5c     3A E4 85 F1 | 	sub	objptr, #58
13d60     22 FA 0D F2 | 	cmp	result1, #34 wz
13d64     64 FF 9F 5D |  if_ne	jmp	#LR__1602
13d68                 | '     print "-----more, press any key";
13d68     00 12 06 F6 | 	mov	arg01, #0
13d6c     54 A3 B0 FD | 	call	#__system___getiolock_0417
13d70     FD 12 02 F6 | 	mov	arg01, result1
13d74     50 4B B0 FD | 	call	#__system___lockmem
13d78     40 01 00 FF 
13d7c     BB 15 06 F6 | 	mov	arg02, ##@LR__4607
13d80     00 12 06 F6 | 	mov	arg01, #0
13d84     00 16 06 F6 | 	mov	arg03, #0
13d88     2C 58 B0 FD | 	call	#__system___basic_print_string
13d8c     00 12 06 F6 | 	mov	arg01, #0
13d90     30 A3 B0 FD | 	call	#__system___getiolock_0417
13d94     FD 00 68 FC | 	wrlong	#0, result1
13d98                 | '     do 
13d98                 | LR__1603
13d98     CC 43 B0 FD | 	call	#_usbnew_spin2_get_key
13d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
13da0     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13da4                 | '     do
13da4                 | LR__1604
13da4     C0 43 B0 FD | 	call	#_usbnew_spin2_get_key
13da8     00 FA 0D F2 | 	cmp	result1, #0 wz
13dac     F4 FF 9F AD |  if_e	jmp	#LR__1604
13db0                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
13db0     78 00 00 FF 
13db4     B4 E5 05 F1 | 	add	objptr, ##61876
13db8     F2 20 02 FB | 	rdlong	local02, objptr
13dbc     78 00 00 FF 
13dc0     B4 E5 85 F1 | 	sub	objptr, ##61876
13dc4     01 20 0E F2 | 	cmp	local02, #1 wz
13dc8     3C 00 90 5D |  if_ne	jmp	#LR__1605
13dcc     7A 00 00 FF 
13dd0     58 E4 05 F1 | 	add	objptr, ##62552
13dd4     F2 14 02 FB | 	rdlong	arg02, objptr
13dd8     04 E4 85 F1 | 	sub	objptr, #4
13ddc     F2 1A 02 FB | 	rdlong	arg05, objptr
13de0     07 12 06 F6 | 	mov	arg01, #7
13de4     56 00 00 FF 
13de8     44 16 06 F6 | 	mov	arg03, ##44100
13dec     0E 18 C6 F9 | 	decod	arg04, #14
13df0     01 1C 66 F6 | 	neg	arg06, #1
13df4     6E 00 00 FF 
13df8     94 E5 85 F1 | 	sub	objptr, ##56724
13dfc     90 46 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13e00     0B 00 00 FF 
13e04     C0 E4 85 F1 | 	sub	objptr, ##5824
13e08                 | LR__1605
13e08     00 12 06 F6 | 	mov	arg01, #0
13e0c     23 14 06 F6 | 	mov	arg02, #35
13e10     28 37 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13e14                 | '     position 0,35: print "                             ";: position 4,35  
13e14     00 12 06 F6 | 	mov	arg01, #0
13e18     A8 A2 B0 FD | 	call	#__system___getiolock_0417
13e1c     FD 12 02 F6 | 	mov	arg01, result1
13e20     A4 4A B0 FD | 	call	#__system___lockmem
13e24     40 01 00 FF 
13e28     D4 15 06 F6 | 	mov	arg02, ##@LR__4608
13e2c     00 12 06 F6 | 	mov	arg01, #0
13e30     00 16 06 F6 | 	mov	arg03, #0
13e34     80 57 B0 FD | 	call	#__system___basic_print_string
13e38     00 12 06 F6 | 	mov	arg01, #0
13e3c     84 A2 B0 FD | 	call	#__system___getiolock_0417
13e40     FD 00 68 FC | 	wrlong	#0, result1
13e44     04 12 06 F6 | 	mov	arg01, #4
13e48     23 14 06 F6 | 	mov	arg02, #35
13e4c     EC 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13e50     78 FE 9F FD | 	jmp	#LR__1602
13e54                 | LR__1606
13e54     A7 F0 03 F6 | 	mov	ptra, fp
13e58     B2 00 A0 FD | 	call	#popregs_
13e5c                 | _do_dir_ret
13e5c     2D 00 64 FD | 	ret
13e60                 | 
13e60                 | ' 
13e60                 | ' sub do_if
13e60                 | _do_if
13e60     05 4A 05 F6 | 	mov	COUNT_, #5
13e64     A8 00 A0 FD | 	call	#pushregs_
13e68     C4 56 BF FD | 	call	#_pop
13e6c     FD 1E 0A F6 | 	mov	local01, result1 wz
13e70     FE 20 02 F6 | 	mov	local02, result2
13e74     FF 22 02 F6 | 	mov	local03, result3
13e78                 | ' t1=pop()
13e78                 | ' ' if uresult=0, jump over else
13e78                 | ' if t1.result.uresult = 0 then 
13e78     BC 00 90 5D |  if_ne	jmp	#LR__1612
13e7c                 | '   for i=lineptr_e to lineptr-1
13e7c     69 00 00 FF 
13e80     54 E4 05 F1 | 	add	objptr, ##53844
13e84     F2 24 02 FB | 	rdlong	local04, objptr
13e88     04 E4 85 F1 | 	sub	objptr, #4
13e8c     F2 26 02 FB | 	rdlong	local05, objptr
13e90     69 00 00 FF 
13e94     50 E4 85 F1 | 	sub	objptr, ##53840
13e98                 | LR__1610
13e98     13 25 52 F2 | 	cmps	local04, local05 wc
13e9c     78 00 90 3D |  if_ae	jmp	#LR__1611
13ea0     12 FF 01 F6 | 	mov	result3, local04
13ea4     01 FE 65 F0 | 	shl	result3, #1
13ea8     12 FF 01 F1 | 	add	result3, local04
13eac     02 FE 65 F0 | 	shl	result3, #2
13eb0     66 00 00 FF 
13eb4     50 E4 05 F1 | 	add	objptr, ##52304
13eb8     F2 FE 01 F1 | 	add	result3, objptr
13ebc     FF 1E 02 FB | 	rdlong	local01, result3
13ec0     04 FE 05 F1 | 	add	result3, #4
13ec4     FF FC 01 FB | 	rdlong	result2, result3
13ec8     12 FF 01 F6 | 	mov	result3, local04
13ecc     01 FE 65 F0 | 	shl	result3, #1
13ed0     12 FF 01 F1 | 	add	result3, local04
13ed4     02 FE 65 F0 | 	shl	result3, #2
13ed8     F2 FE 01 F1 | 	add	result3, objptr
13edc     08 FE 05 F1 | 	add	result3, #8
13ee0     FF FE 01 FB | 	rdlong	result3, result3
13ee4     FE 20 02 F6 | 	mov	local02, result2
13ee8     FF 22 02 F6 | 	mov	local03, result3
13eec                 | '     t1=compiledline(i)
13eec                 | '     if t1.result_type=token_else then lineptr_e=i : return
13eec     5A 22 0E F2 | 	cmp	local03, #90 wz
13ef0     66 00 00 FF 
13ef4     50 E4 85 F1 | 	sub	objptr, ##52304
13ef8     69 00 00 AF 
13efc     54 E4 05 A1 |  if_e	add	objptr, ##53844
13f00     F2 24 62 AC |  if_e	wrlong	local04, objptr
13f04     69 00 00 AF 
13f08     54 E4 85 A1 |  if_e	sub	objptr, ##53844
13f0c     28 00 90 AD |  if_e	jmp	#LR__1613
13f10     01 24 06 F1 | 	add	local04, #1
13f14     80 FF 9F FD | 	jmp	#LR__1610
13f18                 | LR__1611
13f18     69 00 00 FF 
13f1c     50 E4 05 F1 | 	add	objptr, ##53840
13f20     F2 26 02 FB | 	rdlong	local05, objptr
13f24     01 26 86 F1 | 	sub	local05, #1
13f28     04 E4 05 F1 | 	add	objptr, #4
13f2c     F2 26 62 FC | 	wrlong	local05, objptr
13f30     69 00 00 FF 
13f34     54 E4 85 F1 | 	sub	objptr, ##53844
13f38                 | LR__1612
13f38                 | LR__1613
13f38     A7 F0 03 F6 | 	mov	ptra, fp
13f3c     B2 00 A0 FD | 	call	#popregs_
13f40                 | _do_if_ret
13f40     2D 00 64 FD | 	ret
13f44                 | 
13f44                 | ' 
13f44                 | ' sub do_else
13f44                 | _do_else
13f44     69 00 00 FF 
13f48     50 E4 05 F1 | 	add	objptr, ##53840
13f4c     F2 00 02 FB | 	rdlong	_var01, objptr
13f50     01 00 86 F1 | 	sub	_var01, #1
13f54     04 E4 05 F1 | 	add	objptr, #4
13f58     F2 00 62 FC | 	wrlong	_var01, objptr
13f5c     69 00 00 FF 
13f60     54 E4 85 F1 | 	sub	objptr, ##53844
13f64                 | _do_else_ret
13f64     2D 00 64 FD | 	ret
13f68                 | 
13f68                 | ' 
13f68                 | ' 
13f68                 | ' 
13f68                 | ' sub do_nothing
13f68                 | _do_nothing
13f68                 | _do_nothing_ret
13f68     2D 00 64 FD | 	ret
13f6c                 | 
13f6c                 | ' 
13f6c                 | ' sub do_brun
13f6c                 | _do_brun
13f6c     08 4A 05 F6 | 	mov	COUNT_, #8
13f70     A8 00 A0 FD | 	call	#pushregs_
13f74     B8 55 BF FD | 	call	#_pop
13f78     FE 1A 02 F6 | 	mov	arg05, result2
13f7c     FF 18 02 F6 | 	mov	arg04, result3
13f80     FD 1E 02 F6 | 	mov	local01, result1
13f84     0D 21 02 F6 | 	mov	local02, arg05
13f88     0C 23 02 F6 | 	mov	local03, arg04
13f8c                 | ' 
13f8c                 | ' t1=pop() 
13f8c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
13f8c     2B 22 0E F2 | 	cmp	local03, #43 wz
13f90     10 00 90 5D |  if_ne	jmp	#LR__1620
13f94     0F 13 02 F6 | 	mov	arg01, local01
13f98     9C 86 BF FD | 	call	#_convertstring
13f9c     FD 1E 02 F6 | 	mov	local01, result1
13fa0     1F 22 06 F6 | 	mov	local03, #31
13fa4                 | LR__1620
13fa4                 | ' if t1.result_type=result_string then
13fa4     1F 22 0E F2 | 	cmp	local03, #31 wz
13fa8     EC 01 90 5D |  if_ne	jmp	#LR__1624
13fac     0F 25 02 F6 | 	mov	local04, local01
13fb0                 | '   filename=t1.result.sresult
13fb0                 | '   if left$(filename,1)="/" then 
13fb0     12 13 02 F6 | 	mov	arg01, local04
13fb4     01 14 06 F6 | 	mov	arg02, #1
13fb8     18 69 B0 FD | 	call	#__system__Left_S
13fbc     FD 12 02 F6 | 	mov	arg01, result1
13fc0     40 01 00 FF 
13fc4     F2 15 06 F6 | 	mov	arg02, ##@LR__4609
13fc8     24 49 B0 FD | 	call	#__system___string_cmp
13fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd0     12 27 02 A6 |  if_e	mov	local05, local04
13fd4     14 00 90 AD |  if_e	jmp	#LR__1621
13fd8     40 01 00 FF 
13fdc     F4 13 06 F6 | 	mov	arg01, ##@LR__4610
13fe0     12 15 02 F6 | 	mov	arg02, local04
13fe4     3C 49 B0 FD | 	call	#__system___string_concat
13fe8     FD 26 02 F6 | 	mov	local05, result1
13fec                 | LR__1621
13fec                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
13fec                 | '   open fullfilename for input as #9
13fec     09 12 06 F6 | 	mov	arg01, #9
13ff0     13 15 02 F6 | 	mov	arg02, local05
13ff4     00 16 06 F6 | 	mov	arg03, #0
13ff8     CC 54 B0 FD | 	call	#__system___basic_open_string
13ffc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
14000     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
14004     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
14008     FD 28 0A F6 | 	mov	local06, result1 wz
1400c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1400c     8C 00 90 AD |  if_e	jmp	#LR__1622
14010     00 12 06 F6 | 	mov	arg01, #0
14014     AC A0 B0 FD | 	call	#__system___getiolock_0417
14018     FD 12 02 F6 | 	mov	arg01, result1
1401c     A8 48 B0 FD | 	call	#__system___lockmem
14020     40 01 00 FF 
14024     FD 15 06 F6 | 	mov	arg02, ##@LR__4611
14028     00 12 06 F6 | 	mov	arg01, #0
1402c     00 16 06 F6 | 	mov	arg03, #0
14030     84 55 B0 FD | 	call	#__system___basic_print_string
14034     00 12 06 F6 | 	mov	arg01, #0
14038     14 15 02 F6 | 	mov	arg02, local06
1403c     00 16 06 F6 | 	mov	arg03, #0
14040     0A 18 06 F6 | 	mov	arg04, #10
14044     B4 55 B0 FD | 	call	#__system___basic_print_integer
14048     41 01 00 FF 
1404c     0B 14 06 F6 | 	mov	arg02, ##@LR__4612
14050     00 12 06 F6 | 	mov	arg01, #0
14054     00 16 06 F6 | 	mov	arg03, #0
14058     5C 55 B0 FD | 	call	#__system___basic_print_string
1405c     14 13 02 F6 | 	mov	arg01, local06
14060     5C 6D B0 FD | 	call	#__system___strerror
14064     FD 14 02 F6 | 	mov	arg02, result1
14068     00 12 06 F6 | 	mov	arg01, #0
1406c     00 16 06 F6 | 	mov	arg03, #0
14070     44 55 B0 FD | 	call	#__system___basic_print_string
14074     00 12 06 F6 | 	mov	arg01, #0
14078     0A 14 06 F6 | 	mov	arg02, #10
1407c     00 16 06 F6 | 	mov	arg03, #0
14080     DC 54 B0 FD | 	call	#__system___basic_print_char
14084     00 12 06 F6 | 	mov	arg01, #0
14088     38 A0 B0 FD | 	call	#__system___getiolock_0417
1408c     FD 00 68 FC | 	wrlong	#0, result1
14090     09 12 06 F6 | 	mov	arg01, #9
14094     5C 96 B0 FD | 	call	#__system__close
14098     FC 00 90 FD | 	jmp	#LR__1625
1409c                 | LR__1622
1409c     01 2A 06 F6 | 	mov	local07, #1
140a0     00 2C 06 F6 | 	mov	local08, #0
140a4                 | '   do
140a4                 | LR__1623
140a4                 | '     get #9,pos,block(0),1024,r : pos+=r	
140a4     76 00 00 FF 
140a8     80 E5 05 F1 | 	add	objptr, ##60800
140ac     F2 16 02 F6 | 	mov	arg03, objptr
140b0     76 00 00 FF 
140b4     80 E5 85 F1 | 	sub	objptr, ##60800
140b8     09 12 06 F6 | 	mov	arg01, #9
140bc     15 15 02 F6 | 	mov	arg02, local07
140c0     0A 18 C6 F9 | 	decod	arg04, #10
140c4     01 1A 06 F6 | 	mov	arg05, #1
140c8     FC 55 B0 FD | 	call	#__system___basic_get
140cc     FD 28 02 F6 | 	mov	local06, result1
140d0     FD 2A 02 F1 | 	add	local07, result1
140d4     76 00 00 FF 
140d8     80 E5 05 F1 | 	add	objptr, ##60800
140dc     F2 12 02 F6 | 	mov	arg01, objptr
140e0     16 15 02 F6 | 	mov	arg02, local08
140e4     0A 16 C6 F9 | 	decod	arg03, #10
140e8     6B 00 00 FF 
140ec     C0 E4 85 F1 | 	sub	objptr, ##54976
140f0     80 3D B0 FD | 	call	#_psram_spin2_write
140f4     0B 00 00 FF 
140f8     C0 E4 85 F1 | 	sub	objptr, ##5824
140fc     14 2D 02 F1 | 	add	local08, local06
14100     02 00 00 FF 
14104     00 28 0E F2 | 	cmp	local06, ##1024 wz
14108     E0 03 00 AF 
1410c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
14110     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1623
14114     55 00 00 FF 
14118     D0 E5 05 F1 | 	add	objptr, ##43984
1411c     F2 12 02 FB | 	rdlong	arg01, objptr
14120     03 12 62 FD | 	cogstop	arg01
14124     04 E4 05 F1 | 	add	objptr, #4
14128     F2 12 02 FB | 	rdlong	arg01, objptr
1412c     03 12 62 FD | 	cogstop	arg01
14130     04 E4 05 F1 | 	add	objptr, #4
14134     F2 12 02 FB | 	rdlong	arg01, objptr
14138     03 12 62 FD | 	cogstop	arg01
1413c     22 00 00 FF 
14140     E0 E5 05 F1 | 	add	objptr, ##17888
14144     F2 12 02 FB | 	rdlong	arg01, objptr
14148     03 12 62 FD | 	cogstop	arg01
1414c     10 00 00 FF 
14150     9C EA 05 F1 | 	add	ptr__dat__, ##8348
14154     F5 14 02 F6 | 	mov	arg02, ptr__dat__
14158     10 00 00 FF 
1415c     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
14160     22 00 00 FF 
14164     D8 E5 85 F1 | 	sub	objptr, ##17880
14168     1E 2C 06 F6 | 	mov	local08, #30
1416c     28 E4 61 FD | 	setq	objptr
14170     0A 2D F2 FC | 	coginit	local08, arg02 wc
14174     01 2C 66 C6 |  if_b	neg	local08, #1
14178     24 00 00 FF 
1417c     F0 E4 05 F1 | 	add	objptr, ##18672
14180     F2 2C 62 FC | 	wrlong	local08, objptr
14184     7A 00 00 FF 
14188     D0 E4 85 F1 | 	sub	objptr, ##62672
1418c     00 12 06 F6 | 	mov	arg01, #0
14190     01 12 62 FD | 	cogid	arg01
14194     03 12 62 FD | 	cogstop	arg01
14198                 | LR__1624
14198                 | LR__1625
14198     A7 F0 03 F6 | 	mov	ptra, fp
1419c     B2 00 A0 FD | 	call	#popregs_
141a0                 | _do_brun_ret
141a0     2D 00 64 FD | 	ret
141a4                 | 
141a4                 | ' 
141a4                 | ' 
141a4                 | ' sub do_mouse
141a4                 | _do_mouse
141a4     88 53 BF FD | 	call	#_pop
141a8     00 FA 4D F2 | 	cmps	result1, #0 wz
141ac                 | ' 
141ac                 | ' t1=pop()
141ac                 | ' 
141ac                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
141ac     14 00 90 5D |  if_ne	jmp	#LR__1630
141b0     10 12 06 F6 | 	mov	arg01, #16
141b4     00 14 06 F6 | 	mov	arg02, #0
141b8     00 16 06 F6 | 	mov	arg03, #0
141bc     6C 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
141c0     10 00 90 FD | 	jmp	#LR__1631
141c4                 | LR__1630
141c4     10 12 06 F6 | 	mov	arg01, #16
141c8     20 14 06 F6 | 	mov	arg02, #32
141cc     20 16 06 F6 | 	mov	arg03, #32
141d0     58 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
141d4                 | LR__1631
141d4                 | _do_mouse_ret
141d4     2D 00 64 FD | 	ret
141d8                 | 
141d8                 | ' 
141d8                 | ' sub do_cursor
141d8                 | _do_cursor
141d8     54 53 BF FD | 	call	#_pop
141dc     00 FA 4D F2 | 	cmps	result1, #0 wz
141e0                 | ' 
141e0                 | ' t1=pop()
141e0                 | ' 
141e0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
141e0     14 00 90 5D |  if_ne	jmp	#LR__1640
141e4     11 12 06 F6 | 	mov	arg01, #17
141e8     00 14 06 F6 | 	mov	arg02, #0
141ec     00 16 06 F6 | 	mov	arg03, #0
141f0     38 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
141f4     10 00 90 FD | 	jmp	#LR__1641
141f8                 | LR__1640
141f8     11 12 06 F6 | 	mov	arg01, #17
141fc     08 14 06 F6 | 	mov	arg02, #8
14200     10 16 06 F6 | 	mov	arg03, #16
14204     24 27 B0 FD | 	call	#_hg010b_spin2_setspritesize
14208                 | LR__1641
14208                 | _do_cursor_ret
14208     2D 00 64 FD | 	ret
1420c                 | 
1420c                 | ' 
1420c                 | ' 
1420c                 | ' sub do_click
1420c                 | _do_click
1420c     20 53 BF FD | 	call	#_pop
14210     00 FA 4D F2 | 	cmps	result1, #0 wz
14214                 | ' 
14214                 | ' t1=pop()
14214                 | ' 
14214                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
14214     78 00 00 AF 
14218     B4 E5 05 A1 |  if_e	add	objptr, ##61876
1421c     F2 00 68 AC |  if_e	wrlong	#0, objptr
14220     78 00 00 FF 
14224     B4 E5 C5 F3 | 	sumz	objptr, ##61876
14228     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1422c     78 00 00 5F 
14230     B4 E5 85 51 |  if_ne	sub	objptr, ##61876
14234                 | _do_click_ret
14234     2D 00 64 FD | 	ret
14238                 | 
14238                 | ' 
14238                 | ' 
14238                 | ' sub do_beep
14238                 | _do_beep
14238     02 4A 05 F6 | 	mov	COUNT_, #2
1423c     A8 00 A0 FD | 	call	#pushregs_
14240     20 F0 07 F1 | 	add	ptra, #32
14244     E8 52 BF FD | 	call	#_pop
14248     FD 1E 02 F6 | 	mov	local01, result1
1424c     FE 1C 02 F6 | 	mov	arg06, result2
14250     FF 20 02 F6 | 	mov	local02, result3
14254     0C 4E 05 F1 | 	add	fp, #12
14258     A7 1E 62 FC | 	wrlong	local01, fp
1425c     04 4E 05 F1 | 	add	fp, #4
14260     A7 1C 62 FC | 	wrlong	arg06, fp
14264     04 4E 05 F1 | 	add	fp, #4
14268     A7 20 62 FC | 	wrlong	local02, fp
1426c     14 4E 85 F1 | 	sub	fp, #20
14270     BC 52 BF FD | 	call	#_pop
14274     A7 FA 61 FC | 	wrlong	result1, fp
14278     04 4E 05 F1 | 	add	fp, #4
1427c     A7 FC 61 FC | 	wrlong	result2, fp
14280     04 4E 05 F1 | 	add	fp, #4
14284     A7 FE 61 FC | 	wrlong	result3, fp
14288                 | ' 
14288                 | ' 
14288                 | ' 
14288                 | ' t2=pop()
14288                 | ' t1=pop()
14288                 | ' 
14288                 | ' 
14288                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
14288     08 4E 85 F1 | 	sub	fp, #8
1428c     1C FE 0D F2 | 	cmp	result3, #28 wz
14290     08 4E 05 51 |  if_ne	add	fp, #8
14294     A7 20 02 5B |  if_ne	rdlong	local02, fp
14298     08 4E 85 51 |  if_ne	sub	fp, #8
1429c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
142a0     A7 1E 02 AB |  if_e	rdlong	local01, fp
142a4     18 4E 05 A1 |  if_e	add	fp, #24
142a8     A7 1E 62 AC |  if_e	wrlong	local01, fp
142ac     18 4E 85 A1 |  if_e	sub	fp, #24
142b0     14 00 90 AD |  if_e	jmp	#LR__1650
142b4     A7 12 02 F6 | 	mov	arg01, fp
142b8     04 C7 BF FD | 	call	#_converttoint
142bc     18 4E 05 F1 | 	add	fp, #24
142c0     A7 FA 61 FC | 	wrlong	result1, fp
142c4     18 4E 85 F1 | 	sub	fp, #24
142c8                 | LR__1650
142c8     1C 4E 05 F1 | 	add	fp, #28
142cc     A7 FE 48 FC | 	wrbyte	#127, fp
142d0     01 4E 05 F1 | 	add	fp, #1
142d4     A7 00 49 FC | 	wrbyte	#128, fp
142d8     01 4E 85 F1 | 	sub	fp, #1
142dc     A7 14 02 F6 | 	mov	arg02, fp
142e0     04 4E 85 F1 | 	sub	fp, #4
142e4     A7 16 02 FB | 	rdlong	arg03, fp
142e8     18 4E 85 F1 | 	sub	fp, #24
142ec     01 16 66 F0 | 	shl	arg03, #1
142f0     07 12 06 F6 | 	mov	arg01, #7
142f4     0E 18 C6 F9 | 	decod	arg04, #14
142f8     02 1A 06 F6 | 	mov	arg05, #2
142fc     00 1C 06 F6 | 	mov	arg06, #0
14300     0B 00 00 FF 
14304     C0 E4 05 F1 | 	add	objptr, ##5824
14308     20 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
1430c     0B 00 00 FF 
14310     C0 E4 85 F1 | 	sub	objptr, ##5824
14314     0C 4E 05 F1 | 	add	fp, #12
14318     A7 12 02 F6 | 	mov	arg01, fp
1431c     0C 4E 85 F1 | 	sub	fp, #12
14320     A4 52 BF FD | 	call	#_push
14324     FC F6 BF FD | 	call	#_do_waitms
14328     07 12 06 F6 | 	mov	arg01, #7
1432c     0B 00 00 FF 
14330     C0 E4 05 F1 | 	add	objptr, ##5824
14334     A8 42 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
14338     0B 00 00 FF 
1433c     C0 E4 85 F1 | 	sub	objptr, ##5824
14340     A7 F0 03 F6 | 	mov	ptra, fp
14344     B2 00 A0 FD | 	call	#popregs_
14348                 | _do_beep_ret
14348     2D 00 64 FD | 	ret
1434c                 | 
1434c                 | ' 
1434c                 | ' sub do_no_command
1434c                 | _do_no_command
1434c     17 12 06 F6 | 	mov	arg01, #23
14350     50 10 B0 FD | 	call	#_printerror
14354                 | _do_no_command_ret
14354     2D 00 64 FD | 	ret
14358                 | 
14358                 | ' 
14358                 | ' sub do_negative
14358                 | _do_negative
14358     02 4A 05 F6 | 	mov	COUNT_, #2
1435c     A8 00 A0 FD | 	call	#pushregs_
14360     0C F0 07 F1 | 	add	ptra, #12
14364     C8 51 BF FD | 	call	#_pop
14368     FF 1E 02 F6 | 	mov	local01, result3
1436c     A7 FA 61 FC | 	wrlong	result1, fp
14370     04 4E 05 F1 | 	add	fp, #4
14374     A7 FC 61 FC | 	wrlong	result2, fp
14378     04 4E 05 F1 | 	add	fp, #4
1437c     A7 1E 62 FC | 	wrlong	local01, fp
14380                 | ' t1=pop()
14380                 | ' if t1.result_type=result_int then 
14380     08 4E 85 F1 | 	sub	fp, #8
14384     1C 1E 0E F2 | 	cmp	local01, #28 wz
14388     A7 20 02 AB |  if_e	rdlong	local02, fp
1438c     10 1F 62 A6 |  if_e	neg	local01, local02
14390     A7 1E 62 AC |  if_e	wrlong	local01, fp
14394     5C 00 90 AD |  if_e	jmp	#LR__1662
14398     08 4E 05 F1 | 	add	fp, #8
1439c     A7 1E 02 FB | 	rdlong	local01, fp
143a0     08 4E 85 F1 | 	sub	fp, #8
143a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
143a8     1C 00 90 5D |  if_ne	jmp	#LR__1660
143ac     A7 20 02 FB | 	rdlong	local02, fp
143b0     10 1F 62 F6 | 	neg	local01, local02
143b4     A7 1E 62 FC | 	wrlong	local01, fp
143b8     08 4E 05 F1 | 	add	fp, #8
143bc     A7 38 68 FC | 	wrlong	#28, fp
143c0     08 4E 85 F1 | 	sub	fp, #8
143c4     2C 00 90 FD | 	jmp	#LR__1661
143c8                 | LR__1660
143c8     08 4E 05 F1 | 	add	fp, #8
143cc     A7 1E 02 FB | 	rdlong	local01, fp
143d0     08 4E 85 F1 | 	sub	fp, #8
143d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
143d8     A7 FA 01 AB |  if_e	rdlong	result1, fp
143dc     1F FA E5 A4 |  if_e	bitnot	result1, #31
143e0     A7 FA 61 AC |  if_e	wrlong	result1, fp
143e4     08 4E 05 51 |  if_ne	add	fp, #8
143e8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
143ec     08 4E 85 51 |  if_ne	sub	fp, #8
143f0     A7 50 68 5C |  if_ne	wrlong	#40, fp
143f4                 | LR__1661
143f4                 | LR__1662
143f4     A7 12 02 F6 | 	mov	arg01, fp
143f8     CC 51 BF FD | 	call	#_push
143fc     A7 F0 03 F6 | 	mov	ptra, fp
14400     B2 00 A0 FD | 	call	#popregs_
14404                 | _do_negative_ret
14404     2D 00 64 FD | 	ret
14408                 | 
14408                 | ' 
14408                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
14408                 | ' 
14408                 | ' ''----------------------------------------------------------------------------------------------------
14408                 | ' ''------------------ Initialization procedures -------------------------------------------------------
14408                 | ' ''----------------------------------------------------------------------------------------------------
14408                 | ' 
14408                 | ' ''--------------------------- Command function pointers
14408                 | ' 
14408                 | ' sub init_commands
14408                 | _init_commands
14408                 | ' 
14408                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
14408     00 00 06 F6 | 	mov	_var01, #0
1440c     97 16 48 FB | 	callpa	#(@LR__1671-@LR__1670)>>2,fcache_load_ptr_
14410                 | LR__1670
14410     00 FB 01 F6 | 	mov	result1, _var01
14414     02 FA 65 F0 | 	shl	result1, #2
14418     62 00 00 FF 
1441c     34 E4 05 F1 | 	add	objptr, ##50228
14420     F2 FA 01 F1 | 	add	result1, objptr
14424     62 00 00 FF 
14428     34 E4 85 F1 | 	sub	objptr, ##50228
1442c     FD E4 61 FC | 	wrlong	objptr, result1
14430     01 00 06 F1 | 	add	_var01, #1
14434     00 01 56 F2 | 	cmps	_var01, #256 wc
14438     D4 FF 9F CD |  if_b	jmp	#LR__1670
1443c                 | LR__1671
1443c     F2 FA 01 F6 | 	mov	result1, objptr
14440     14 FA 25 F4 | 	bith	result1, #20
14444     62 00 00 FF 
14448     38 E4 05 F1 | 	add	objptr, ##50232
1444c     F2 FA 61 FC | 	wrlong	result1, objptr
14450     62 00 00 FF 
14454     38 E4 85 F1 | 	sub	objptr, ##50232
14458     F2 FA 01 F6 | 	mov	result1, objptr
1445c     15 FA 25 F4 | 	bith	result1, #21
14460     62 00 00 FF 
14464     3C E4 05 F1 | 	add	objptr, ##50236
14468     F2 FA 61 FC | 	wrlong	result1, objptr
1446c     62 00 00 FF 
14470     3C E4 85 F1 | 	sub	objptr, ##50236
14474     F2 FA 01 F6 | 	mov	result1, objptr
14478     34 FA 25 F4 | 	bith	result1, #52
1447c     62 00 00 FF 
14480     40 E4 05 F1 | 	add	objptr, ##50240
14484     F2 FA 61 FC | 	wrlong	result1, objptr
14488     62 00 00 FF 
1448c     40 E4 85 F1 | 	sub	objptr, ##50240
14490     F2 FA 01 F6 | 	mov	result1, objptr
14494     16 FA 25 F4 | 	bith	result1, #22
14498     62 00 00 FF 
1449c     48 E4 05 F1 | 	add	objptr, ##50248
144a0     F2 FA 61 FC | 	wrlong	result1, objptr
144a4     62 00 00 FF 
144a8     48 E4 85 F1 | 	sub	objptr, ##50248
144ac     F2 FA 01 F6 | 	mov	result1, objptr
144b0     00 28 00 FF 
144b4     00 FA 45 F5 | 	or	result1, ##5242880
144b8     62 00 00 FF 
144bc     4C E4 05 F1 | 	add	objptr, ##50252
144c0     F2 FA 61 FC | 	wrlong	result1, objptr
144c4     62 00 00 FF 
144c8     4C E4 85 F1 | 	sub	objptr, ##50252
144cc     F2 FA 01 F6 | 	mov	result1, objptr
144d0     35 FA 25 F4 | 	bith	result1, #53
144d4     62 00 00 FF 
144d8     50 E4 05 F1 | 	add	objptr, ##50256
144dc     F2 FA 61 FC | 	wrlong	result1, objptr
144e0     62 00 00 FF 
144e4     50 E4 85 F1 | 	sub	objptr, ##50256
144e8     F2 FA 01 F6 | 	mov	result1, objptr
144ec     54 FA 25 F4 | 	bith	result1, #84
144f0     62 00 00 FF 
144f4     54 E4 05 F1 | 	add	objptr, ##50260
144f8     F2 FA 61 FC | 	wrlong	result1, objptr
144fc     62 00 00 FF 
14500     54 E4 85 F1 | 	sub	objptr, ##50260
14504     F2 FA 01 F6 | 	mov	result1, objptr
14508     17 FA 25 F4 | 	bith	result1, #23
1450c     62 00 00 FF 
14510     58 E4 05 F1 | 	add	objptr, ##50264
14514     F2 FA 61 FC | 	wrlong	result1, objptr
14518     62 00 00 FF 
1451c     58 E4 85 F1 | 	sub	objptr, ##50264
14520     F2 FA 01 F6 | 	mov	result1, objptr
14524     00 48 00 FF 
14528     00 FA 45 F5 | 	or	result1, ##9437184
1452c     62 00 00 FF 
14530     5C E4 05 F1 | 	add	objptr, ##50268
14534     F2 FA 61 FC | 	wrlong	result1, objptr
14538     62 00 00 FF 
1453c     5C E4 85 F1 | 	sub	objptr, ##50268
14540     F2 FA 01 F6 | 	mov	result1, objptr
14544     00 50 00 FF 
14548     00 FA 45 F5 | 	or	result1, ##10485760
1454c     62 00 00 FF 
14550     60 E4 05 F1 | 	add	objptr, ##50272
14554     F2 FA 61 FC | 	wrlong	result1, objptr
14558     62 00 00 FF 
1455c     60 E4 85 F1 | 	sub	objptr, ##50272
14560     F2 FA 01 F6 | 	mov	result1, objptr
14564     00 58 00 FF 
14568     00 FA 45 F5 | 	or	result1, ##11534336
1456c     62 00 00 FF 
14570     64 E4 05 F1 | 	add	objptr, ##50276
14574     F2 FA 61 FC | 	wrlong	result1, objptr
14578     62 00 00 FF 
1457c     64 E4 85 F1 | 	sub	objptr, ##50276
14580     F2 FA 01 F6 | 	mov	result1, objptr
14584     36 FA 25 F4 | 	bith	result1, #54
14588     62 00 00 FF 
1458c     78 E4 05 F1 | 	add	objptr, ##50296
14590     F2 FA 61 FC | 	wrlong	result1, objptr
14594     62 00 00 FF 
14598     78 E4 85 F1 | 	sub	objptr, ##50296
1459c     F2 FA 01 F6 | 	mov	result1, objptr
145a0     00 68 00 FF 
145a4     00 FA 45 F5 | 	or	result1, ##13631488
145a8     62 00 00 FF 
145ac     A8 E4 05 F1 | 	add	objptr, ##50344
145b0     F2 FA 61 FC | 	wrlong	result1, objptr
145b4     62 00 00 FF 
145b8     A8 E4 85 F1 | 	sub	objptr, ##50344
145bc     F2 FA 01 F6 | 	mov	result1, objptr
145c0     00 68 00 FF 
145c4     00 FA 45 F5 | 	or	result1, ##13631488
145c8     62 00 00 FF 
145cc     A4 E4 05 F1 | 	add	objptr, ##50340
145d0     F2 FA 61 FC | 	wrlong	result1, objptr
145d4     62 00 00 FF 
145d8     A4 E4 85 F1 | 	sub	objptr, ##50340
145dc     F2 FA 01 F6 | 	mov	result1, objptr
145e0     00 68 00 FF 
145e4     00 FA 45 F5 | 	or	result1, ##13631488
145e8     62 00 00 FF 
145ec     AC E4 05 F1 | 	add	objptr, ##50348
145f0     F2 FA 61 FC | 	wrlong	result1, objptr
145f4     62 00 00 FF 
145f8     AC E4 85 F1 | 	sub	objptr, ##50348
145fc     F2 FA 01 F6 | 	mov	result1, objptr
14600     00 68 00 FF 
14604     00 FA 45 F5 | 	or	result1, ##13631488
14608     62 00 00 FF 
1460c     B0 E4 05 F1 | 	add	objptr, ##50352
14610     F2 FA 61 FC | 	wrlong	result1, objptr
14614     62 00 00 FF 
14618     B0 E4 85 F1 | 	sub	objptr, ##50352
1461c     F2 FA 01 F6 | 	mov	result1, objptr
14620     00 68 00 FF 
14624     00 FA 45 F5 | 	or	result1, ##13631488
14628     62 00 00 FF 
1462c     E0 E4 05 F1 | 	add	objptr, ##50400
14630     F2 FA 61 FC | 	wrlong	result1, objptr
14634     62 00 00 FF 
14638     E0 E4 85 F1 | 	sub	objptr, ##50400
1463c     F2 FA 01 F6 | 	mov	result1, objptr
14640     55 FA 25 F4 | 	bith	result1, #85
14644     62 00 00 FF 
14648     90 E4 05 F1 | 	add	objptr, ##50320
1464c     F2 FA 61 FC | 	wrlong	result1, objptr
14650     62 00 00 FF 
14654     90 E4 85 F1 | 	sub	objptr, ##50320
14658     F2 FA 01 F6 | 	mov	result1, objptr
1465c     00 68 00 FF 
14660     00 FA 45 F5 | 	or	result1, ##13631488
14664     62 00 00 FF 
14668     B4 E4 05 F1 | 	add	objptr, ##50356
1466c     F2 FA 61 FC | 	wrlong	result1, objptr
14670     62 00 00 FF 
14674     B4 E4 85 F1 | 	sub	objptr, ##50356
14678     F2 FA 01 F6 | 	mov	result1, objptr
1467c     00 68 00 FF 
14680     00 FA 45 F5 | 	or	result1, ##13631488
14684     62 00 00 FF 
14688     B8 E4 05 F1 | 	add	objptr, ##50360
1468c     F2 FA 61 FC | 	wrlong	result1, objptr
14690     62 00 00 FF 
14694     B8 E4 85 F1 | 	sub	objptr, ##50360
14698     F2 FA 01 F6 | 	mov	result1, objptr
1469c     00 68 00 FF 
146a0     00 FA 45 F5 | 	or	result1, ##13631488
146a4     62 00 00 FF 
146a8     BC E4 05 F1 | 	add	objptr, ##50364
146ac     F2 FA 61 FC | 	wrlong	result1, objptr
146b0     62 00 00 FF 
146b4     BC E4 85 F1 | 	sub	objptr, ##50364
146b8     F2 FA 01 F6 | 	mov	result1, objptr
146bc     74 FA 25 F4 | 	bith	result1, #116
146c0     62 00 00 FF 
146c4     34 E5 05 F1 | 	add	objptr, ##50484
146c8     F2 FA 61 FC | 	wrlong	result1, objptr
146cc     62 00 00 FF 
146d0     34 E5 85 F1 | 	sub	objptr, ##50484
146d4     F2 FA 01 F6 | 	mov	result1, objptr
146d8     18 FA 25 F4 | 	bith	result1, #24
146dc     62 00 00 FF 
146e0     38 E5 05 F1 | 	add	objptr, ##50488
146e4     F2 FA 61 FC | 	wrlong	result1, objptr
146e8     62 00 00 FF 
146ec     38 E5 85 F1 | 	sub	objptr, ##50488
146f0     F2 FA 01 F6 | 	mov	result1, objptr
146f4     00 88 00 FF 
146f8     00 FA 45 F5 | 	or	result1, ##17825792
146fc     62 00 00 FF 
14700     3C E5 05 F1 | 	add	objptr, ##50492
14704     F2 FA 61 FC | 	wrlong	result1, objptr
14708     62 00 00 FF 
1470c     3C E5 85 F1 | 	sub	objptr, ##50492
14710     F2 FA 01 F6 | 	mov	result1, objptr
14714     00 90 00 FF 
14718     00 FA 45 F5 | 	or	result1, ##18874368
1471c     62 00 00 FF 
14720     40 E5 05 F1 | 	add	objptr, ##50496
14724     F2 FA 61 FC | 	wrlong	result1, objptr
14728     62 00 00 FF 
1472c     40 E5 85 F1 | 	sub	objptr, ##50496
14730     F2 FA 01 F6 | 	mov	result1, objptr
14734     00 98 00 FF 
14738     00 FA 45 F5 | 	or	result1, ##19922944
1473c     62 00 00 FF 
14740     44 E5 05 F1 | 	add	objptr, ##50500
14744     F2 FA 61 FC | 	wrlong	result1, objptr
14748     62 00 00 FF 
1474c     44 E5 85 F1 | 	sub	objptr, ##50500
14750     F2 FA 01 F6 | 	mov	result1, objptr
14754     00 A0 00 FF 
14758     00 FA 45 F5 | 	or	result1, ##20971520
1475c     62 00 00 FF 
14760     48 E5 05 F1 | 	add	objptr, ##50504
14764     F2 FA 61 FC | 	wrlong	result1, objptr
14768     62 00 00 FF 
1476c     48 E5 85 F1 | 	sub	objptr, ##50504
14770     F2 FA 01 F6 | 	mov	result1, objptr
14774     00 A8 00 FF 
14778     00 FA 45 F5 | 	or	result1, ##22020096
1477c     62 00 00 FF 
14780     4C E5 05 F1 | 	add	objptr, ##50508
14784     F2 FA 61 FC | 	wrlong	result1, objptr
14788     62 00 00 FF 
1478c     4C E5 85 F1 | 	sub	objptr, ##50508
14790     F2 FA 01 F6 | 	mov	result1, objptr
14794     00 B0 00 FF 
14798     00 FA 45 F5 | 	or	result1, ##23068672
1479c     62 00 00 FF 
147a0     50 E5 05 F1 | 	add	objptr, ##50512
147a4     F2 FA 61 FC | 	wrlong	result1, objptr
147a8     62 00 00 FF 
147ac     50 E5 85 F1 | 	sub	objptr, ##50512
147b0     F2 FA 01 F6 | 	mov	result1, objptr
147b4     00 B8 00 FF 
147b8     00 FA 45 F5 | 	or	result1, ##24117248
147bc     62 00 00 FF 
147c0     54 E5 05 F1 | 	add	objptr, ##50516
147c4     F2 FA 61 FC | 	wrlong	result1, objptr
147c8     62 00 00 FF 
147cc     54 E5 85 F1 | 	sub	objptr, ##50516
147d0     F2 FA 01 F6 | 	mov	result1, objptr
147d4     37 FA 25 F4 | 	bith	result1, #55
147d8     62 00 00 FF 
147dc     58 E5 05 F1 | 	add	objptr, ##50520
147e0     F2 FA 61 FC | 	wrlong	result1, objptr
147e4     62 00 00 FF 
147e8     58 E5 85 F1 | 	sub	objptr, ##50520
147ec     F2 FA 01 F6 | 	mov	result1, objptr
147f0     00 C8 00 FF 
147f4     00 FA 45 F5 | 	or	result1, ##26214400
147f8     62 00 00 FF 
147fc     5C E5 05 F1 | 	add	objptr, ##50524
14800     F2 FA 61 FC | 	wrlong	result1, objptr
14804     62 00 00 FF 
14808     5C E5 85 F1 | 	sub	objptr, ##50524
1480c     F2 FA 01 F6 | 	mov	result1, objptr
14810     00 D0 00 FF 
14814     00 FA 45 F5 | 	or	result1, ##27262976
14818     62 00 00 FF 
1481c     60 E5 05 F1 | 	add	objptr, ##50528
14820     F2 FA 61 FC | 	wrlong	result1, objptr
14824     62 00 00 FF 
14828     60 E5 85 F1 | 	sub	objptr, ##50528
1482c     F2 FA 01 F6 | 	mov	result1, objptr
14830     00 D8 00 FF 
14834     00 FA 45 F5 | 	or	result1, ##28311552
14838     62 00 00 FF 
1483c     64 E5 05 F1 | 	add	objptr, ##50532
14840     F2 FA 61 FC | 	wrlong	result1, objptr
14844     62 00 00 FF 
14848     64 E5 85 F1 | 	sub	objptr, ##50532
1484c     F2 FA 01 F6 | 	mov	result1, objptr
14850     56 FA 25 F4 | 	bith	result1, #86
14854     62 00 00 FF 
14858     68 E5 05 F1 | 	add	objptr, ##50536
1485c     F2 FA 61 FC | 	wrlong	result1, objptr
14860     62 00 00 FF 
14864     68 E5 85 F1 | 	sub	objptr, ##50536
14868     F2 FA 01 F6 | 	mov	result1, objptr
1486c     00 E8 00 FF 
14870     00 FA 45 F5 | 	or	result1, ##30408704
14874     64 00 00 FF 
14878     30 E4 05 F1 | 	add	objptr, ##51248
1487c     F2 FA 61 FC | 	wrlong	result1, objptr
14880     64 00 00 FF 
14884     30 E4 85 F1 | 	sub	objptr, ##51248
14888     F2 FA 01 F6 | 	mov	result1, objptr
1488c     75 FA 25 F4 | 	bith	result1, #117
14890     62 00 00 FF 
14894     6C E5 05 F1 | 	add	objptr, ##50540
14898     F2 FA 61 FC | 	wrlong	result1, objptr
1489c     62 00 00 FF 
148a0     6C E5 85 F1 | 	sub	objptr, ##50540
148a4     F2 FA 01 F6 | 	mov	result1, objptr
148a8     94 FA 25 F4 | 	bith	result1, #148
148ac     62 00 00 FF 
148b0     80 E5 05 F1 | 	add	objptr, ##50560
148b4     F2 FA 61 FC | 	wrlong	result1, objptr
148b8     62 00 00 FF 
148bc     80 E5 85 F1 | 	sub	objptr, ##50560
148c0     F2 FA 01 F6 | 	mov	result1, objptr
148c4     19 FA 25 F4 | 	bith	result1, #25
148c8     62 00 00 FF 
148cc     70 E5 05 F1 | 	add	objptr, ##50544
148d0     F2 FA 61 FC | 	wrlong	result1, objptr
148d4     62 00 00 FF 
148d8     70 E5 85 F1 | 	sub	objptr, ##50544
148dc     F2 FA 01 F6 | 	mov	result1, objptr
148e0     00 08 01 FF 
148e4     00 FA 45 F5 | 	or	result1, ##34603008
148e8     62 00 00 FF 
148ec     8C E4 05 F1 | 	add	objptr, ##50316
148f0     F2 FA 61 FC | 	wrlong	result1, objptr
148f4     62 00 00 FF 
148f8     8C E4 85 F1 | 	sub	objptr, ##50316
148fc     F2 FA 01 F6 | 	mov	result1, objptr
14900     00 10 01 FF 
14904     00 FA 45 F5 | 	or	result1, ##35651584
14908     62 00 00 FF 
1490c     74 E5 05 F1 | 	add	objptr, ##50548
14910     F2 FA 61 FC | 	wrlong	result1, objptr
14914     62 00 00 FF 
14918     74 E5 85 F1 | 	sub	objptr, ##50548
1491c     F2 FA 01 F6 | 	mov	result1, objptr
14920     00 18 01 FF 
14924     00 FA 45 F5 | 	or	result1, ##36700160
14928     62 00 00 FF 
1492c     78 E5 05 F1 | 	add	objptr, ##50552
14930     F2 FA 61 FC | 	wrlong	result1, objptr
14934     62 00 00 FF 
14938     78 E5 85 F1 | 	sub	objptr, ##50552
1493c     F2 FA 01 F6 | 	mov	result1, objptr
14940     00 20 01 FF 
14944     00 FA 45 F5 | 	or	result1, ##37748736
14948     62 00 00 FF 
1494c     7C E5 05 F1 | 	add	objptr, ##50556
14950     F2 FA 61 FC | 	wrlong	result1, objptr
14954     62 00 00 FF 
14958     7C E5 85 F1 | 	sub	objptr, ##50556
1495c     F2 FA 01 F6 | 	mov	result1, objptr
14960     00 28 01 FF 
14964     00 FA 45 F5 | 	or	result1, ##38797312
14968     62 00 00 FF 
1496c     88 E5 05 F1 | 	add	objptr, ##50568
14970     F2 FA 61 FC | 	wrlong	result1, objptr
14974     62 00 00 FF 
14978     88 E5 85 F1 | 	sub	objptr, ##50568
1497c     F2 FA 01 F6 | 	mov	result1, objptr
14980     00 30 01 FF 
14984     00 FA 45 F5 | 	or	result1, ##39845888
14988     62 00 00 FF 
1498c     8C E5 05 F1 | 	add	objptr, ##50572
14990     F2 FA 61 FC | 	wrlong	result1, objptr
14994     62 00 00 FF 
14998     8C E5 85 F1 | 	sub	objptr, ##50572
1499c     F2 FA 01 F6 | 	mov	result1, objptr
149a0     00 38 01 FF 
149a4     00 FA 45 F5 | 	or	result1, ##40894464
149a8     62 00 00 FF 
149ac     90 E5 05 F1 | 	add	objptr, ##50576
149b0     F2 FA 61 FC | 	wrlong	result1, objptr
149b4     62 00 00 FF 
149b8     90 E5 85 F1 | 	sub	objptr, ##50576
149bc     F2 FA 01 F6 | 	mov	result1, objptr
149c0     00 40 01 FF 
149c4     00 FA 45 F5 | 	or	result1, ##41943040
149c8     62 00 00 FF 
149cc     94 E5 05 F1 | 	add	objptr, ##50580
149d0     F2 FA 61 FC | 	wrlong	result1, objptr
149d4     62 00 00 FF 
149d8     94 E5 85 F1 | 	sub	objptr, ##50580
149dc     F2 FA 01 F6 | 	mov	result1, objptr
149e0     00 48 01 FF 
149e4     00 FA 45 F5 | 	or	result1, ##42991616
149e8     62 00 00 FF 
149ec     9C E5 05 F1 | 	add	objptr, ##50588
149f0     F2 FA 61 FC | 	wrlong	result1, objptr
149f4     62 00 00 FF 
149f8     9C E5 85 F1 | 	sub	objptr, ##50588
149fc     F2 FA 01 F6 | 	mov	result1, objptr
14a00     00 50 01 FF 
14a04     00 FA 45 F5 | 	or	result1, ##44040192
14a08     62 00 00 FF 
14a0c     A0 E5 05 F1 | 	add	objptr, ##50592
14a10     F2 FA 61 FC | 	wrlong	result1, objptr
14a14     62 00 00 FF 
14a18     A0 E5 85 F1 | 	sub	objptr, ##50592
14a1c     F2 FA 01 F6 | 	mov	result1, objptr
14a20     00 58 01 FF 
14a24     00 FA 45 F5 | 	or	result1, ##45088768
14a28     62 00 00 FF 
14a2c     A0 E4 05 F1 | 	add	objptr, ##50336
14a30     F2 FA 61 FC | 	wrlong	result1, objptr
14a34     62 00 00 FF 
14a38     A0 E4 85 F1 | 	sub	objptr, ##50336
14a3c     F2 FA 01 F6 | 	mov	result1, objptr
14a40     00 60 01 FF 
14a44     00 FA 45 F5 | 	or	result1, ##46137344
14a48     62 00 00 FF 
14a4c     D0 E4 05 F1 | 	add	objptr, ##50384
14a50     F2 FA 61 FC | 	wrlong	result1, objptr
14a54     62 00 00 FF 
14a58     D0 E4 85 F1 | 	sub	objptr, ##50384
14a5c     F2 FA 01 F6 | 	mov	result1, objptr
14a60     00 68 01 FF 
14a64     00 FA 45 F5 | 	or	result1, ##47185920
14a68     62 00 00 FF 
14a6c     CC E4 05 F1 | 	add	objptr, ##50380
14a70     F2 FA 61 FC | 	wrlong	result1, objptr
14a74     62 00 00 FF 
14a78     CC E4 85 F1 | 	sub	objptr, ##50380
14a7c     F2 FA 01 F6 | 	mov	result1, objptr
14a80     00 70 01 FF 
14a84     00 FA 45 F5 | 	or	result1, ##48234496
14a88     62 00 00 FF 
14a8c     70 E4 05 F1 | 	add	objptr, ##50288
14a90     F2 FA 61 FC | 	wrlong	result1, objptr
14a94     62 00 00 FF 
14a98     70 E4 85 F1 | 	sub	objptr, ##50288
14a9c     F2 FA 01 F6 | 	mov	result1, objptr
14aa0     00 78 01 FF 
14aa4     00 FA 45 F5 | 	or	result1, ##49283072
14aa8     62 00 00 FF 
14aac     74 E4 05 F1 | 	add	objptr, ##50292
14ab0     F2 FA 61 FC | 	wrlong	result1, objptr
14ab4     62 00 00 FF 
14ab8     74 E4 85 F1 | 	sub	objptr, ##50292
14abc     F2 FA 01 F6 | 	mov	result1, objptr
14ac0     38 FA 25 F4 | 	bith	result1, #56
14ac4     62 00 00 FF 
14ac8     DC E4 05 F1 | 	add	objptr, ##50396
14acc     F2 FA 61 FC | 	wrlong	result1, objptr
14ad0     62 00 00 FF 
14ad4     DC E4 85 F1 | 	sub	objptr, ##50396
14ad8     F2 FA 01 F6 | 	mov	result1, objptr
14adc     00 88 01 FF 
14ae0     00 FA 45 F5 | 	or	result1, ##51380224
14ae4     62 00 00 FF 
14ae8     84 E5 05 F1 | 	add	objptr, ##50564
14aec     F2 FA 61 FC | 	wrlong	result1, objptr
14af0     62 00 00 FF 
14af4     84 E5 85 F1 | 	sub	objptr, ##50564
14af8     F2 FA 01 F6 | 	mov	result1, objptr
14afc     00 90 01 FF 
14b00     00 FA 45 F5 | 	or	result1, ##52428800
14b04     62 00 00 FF 
14b08     98 E5 05 F1 | 	add	objptr, ##50584
14b0c     F2 FA 61 FC | 	wrlong	result1, objptr
14b10     62 00 00 FF 
14b14     98 E5 85 F1 | 	sub	objptr, ##50584
14b18     F2 FA 01 F6 | 	mov	result1, objptr
14b1c     00 98 01 FF 
14b20     00 FA 45 F5 | 	or	result1, ##53477376
14b24     62 00 00 FF 
14b28     A4 E5 05 F1 | 	add	objptr, ##50596
14b2c     F2 FA 61 FC | 	wrlong	result1, objptr
14b30     62 00 00 FF 
14b34     A4 E5 85 F1 | 	sub	objptr, ##50596
14b38     F2 FA 01 F6 | 	mov	result1, objptr
14b3c     00 A0 01 FF 
14b40     00 FA 45 F5 | 	or	result1, ##54525952
14b44     62 00 00 FF 
14b48     A8 E5 05 F1 | 	add	objptr, ##50600
14b4c     F2 FA 61 FC | 	wrlong	result1, objptr
14b50     62 00 00 FF 
14b54     A8 E5 85 F1 | 	sub	objptr, ##50600
14b58     F2 FA 01 F6 | 	mov	result1, objptr
14b5c     00 A8 01 FF 
14b60     00 FA 45 F5 | 	or	result1, ##55574528
14b64     62 00 00 FF 
14b68     AC E5 05 F1 | 	add	objptr, ##50604
14b6c     F2 FA 61 FC | 	wrlong	result1, objptr
14b70     62 00 00 FF 
14b74     AC E5 85 F1 | 	sub	objptr, ##50604
14b78     F2 FA 01 F6 | 	mov	result1, objptr
14b7c     00 B0 01 FF 
14b80     00 FA 45 F5 | 	or	result1, ##56623104
14b84     62 00 00 FF 
14b88     B0 E5 05 F1 | 	add	objptr, ##50608
14b8c     F2 FA 61 FC | 	wrlong	result1, objptr
14b90     62 00 00 FF 
14b94     B0 E5 85 F1 | 	sub	objptr, ##50608
14b98     F2 FA 01 F6 | 	mov	result1, objptr
14b9c     00 B8 01 FF 
14ba0     00 FA 45 F5 | 	or	result1, ##57671680
14ba4     62 00 00 FF 
14ba8     B4 E5 05 F1 | 	add	objptr, ##50612
14bac     F2 FA 61 FC | 	wrlong	result1, objptr
14bb0     62 00 00 FF 
14bb4     B4 E5 85 F1 | 	sub	objptr, ##50612
14bb8     F2 FA 01 F6 | 	mov	result1, objptr
14bbc     57 FA 25 F4 | 	bith	result1, #87
14bc0     62 00 00 FF 
14bc4     B8 E5 05 F1 | 	add	objptr, ##50616
14bc8     F2 FA 61 FC | 	wrlong	result1, objptr
14bcc     62 00 00 FF 
14bd0     B8 E5 85 F1 | 	sub	objptr, ##50616
14bd4     F2 FA 01 F6 | 	mov	result1, objptr
14bd8     94 FA 25 F4 | 	bith	result1, #148
14bdc     62 00 00 FF 
14be0     80 E5 05 F1 | 	add	objptr, ##50560
14be4     F2 FA 61 FC | 	wrlong	result1, objptr
14be8     62 00 00 FF 
14bec     80 E5 85 F1 | 	sub	objptr, ##50560
14bf0     F2 FA 01 F6 | 	mov	result1, objptr
14bf4     00 C8 01 FF 
14bf8     00 FA 45 F5 | 	or	result1, ##59768832
14bfc     62 00 00 FF 
14c00     C0 E5 05 F1 | 	add	objptr, ##50624
14c04     F2 FA 61 FC | 	wrlong	result1, objptr
14c08     62 00 00 FF 
14c0c     C0 E5 85 F1 | 	sub	objptr, ##50624
14c10     F2 FA 01 F6 | 	mov	result1, objptr
14c14     00 D0 01 FF 
14c18     00 FA 45 F5 | 	or	result1, ##60817408
14c1c     62 00 00 FF 
14c20     BC E5 05 F1 | 	add	objptr, ##50620
14c24     F2 FA 61 FC | 	wrlong	result1, objptr
14c28     62 00 00 FF 
14c2c     BC E5 85 F1 | 	sub	objptr, ##50620
14c30     F2 FA 01 F6 | 	mov	result1, objptr
14c34     00 D8 01 FF 
14c38     00 FA 45 F5 | 	or	result1, ##61865984
14c3c     62 00 00 FF 
14c40     D4 E5 05 F1 | 	add	objptr, ##50644
14c44     F2 FA 61 FC | 	wrlong	result1, objptr
14c48     62 00 00 FF 
14c4c     D4 E5 85 F1 | 	sub	objptr, ##50644
14c50     F2 FA 01 F6 | 	mov	result1, objptr
14c54     76 FA 25 F4 | 	bith	result1, #118
14c58     62 00 00 FF 
14c5c     D8 E5 05 F1 | 	add	objptr, ##50648
14c60     F2 FA 61 FC | 	wrlong	result1, objptr
14c64     62 00 00 FF 
14c68     D8 E5 85 F1 | 	sub	objptr, ##50648
14c6c     F2 FA 01 F6 | 	mov	result1, objptr
14c70     00 E8 01 FF 
14c74     00 FA 45 F5 | 	or	result1, ##63963136
14c78     62 00 00 FF 
14c7c     C4 E5 05 F1 | 	add	objptr, ##50628
14c80     F2 FA 61 FC | 	wrlong	result1, objptr
14c84     62 00 00 FF 
14c88     C4 E5 85 F1 | 	sub	objptr, ##50628
14c8c     F2 FA 01 F6 | 	mov	result1, objptr
14c90     95 FA 25 F4 | 	bith	result1, #149
14c94     62 00 00 FF 
14c98     C8 E5 05 F1 | 	add	objptr, ##50632
14c9c     F2 FA 61 FC | 	wrlong	result1, objptr
14ca0     62 00 00 FF 
14ca4     C8 E5 85 F1 | 	sub	objptr, ##50632
14ca8     F2 FA 01 F6 | 	mov	result1, objptr
14cac     B4 FA 25 F4 | 	bith	result1, #180
14cb0     62 00 00 FF 
14cb4     CC E5 05 F1 | 	add	objptr, ##50636
14cb8     F2 FA 61 FC | 	wrlong	result1, objptr
14cbc     62 00 00 FF 
14cc0     CC E5 85 F1 | 	sub	objptr, ##50636
14cc4     F2 FA 01 F6 | 	mov	result1, objptr
14cc8     1A FA 25 F4 | 	bith	result1, #26
14ccc     62 00 00 FF 
14cd0     D0 E5 05 F1 | 	add	objptr, ##50640
14cd4     F2 FA 61 FC | 	wrlong	result1, objptr
14cd8     62 00 00 FF 
14cdc     D0 E5 85 F1 | 	sub	objptr, ##50640
14ce0     F2 FA 01 F6 | 	mov	result1, objptr
14ce4     00 08 02 FF 
14ce8     00 FA 45 F5 | 	or	result1, ##68157440
14cec     62 00 00 FF 
14cf0     E0 E5 05 F1 | 	add	objptr, ##50656
14cf4     F2 FA 61 FC | 	wrlong	result1, objptr
14cf8     62 00 00 FF 
14cfc     E0 E5 85 F1 | 	sub	objptr, ##50656
14d00     F2 FA 01 F6 | 	mov	result1, objptr
14d04     00 10 02 FF 
14d08     00 FA 45 F5 | 	or	result1, ##69206016
14d0c     62 00 00 FF 
14d10     DC E5 05 F1 | 	add	objptr, ##50652
14d14     F2 FA 61 FC | 	wrlong	result1, objptr
14d18     62 00 00 FF 
14d1c     DC E5 85 F1 | 	sub	objptr, ##50652
14d20     F2 FA 01 F6 | 	mov	result1, objptr
14d24     00 18 02 FF 
14d28     00 FA 45 F5 | 	or	result1, ##70254592
14d2c     62 00 00 FF 
14d30     EC E5 05 F1 | 	add	objptr, ##50668
14d34     F2 FA 61 FC | 	wrlong	result1, objptr
14d38     62 00 00 FF 
14d3c     EC E5 85 F1 | 	sub	objptr, ##50668
14d40     F2 FA 01 F6 | 	mov	result1, objptr
14d44     00 20 02 FF 
14d48     00 FA 45 F5 | 	or	result1, ##71303168
14d4c     62 00 00 FF 
14d50     E8 E5 05 F1 | 	add	objptr, ##50664
14d54     F2 FA 61 FC | 	wrlong	result1, objptr
14d58     62 00 00 FF 
14d5c     E8 E5 85 F1 | 	sub	objptr, ##50664
14d60     F2 FA 01 F6 | 	mov	result1, objptr
14d64     00 28 02 FF 
14d68     00 FA 45 F5 | 	or	result1, ##72351744
14d6c     62 00 00 FF 
14d70     E4 E5 05 F1 | 	add	objptr, ##50660
14d74     F2 FA 61 FC | 	wrlong	result1, objptr
14d78     62 00 00 FF 
14d7c     E4 E5 85 F1 | 	sub	objptr, ##50660
14d80     F2 FA 01 F6 | 	mov	result1, objptr
14d84     00 30 02 FF 
14d88     00 FA 45 F5 | 	or	result1, ##73400320
14d8c     62 00 00 FF 
14d90     F0 E5 05 F1 | 	add	objptr, ##50672
14d94     F2 FA 61 FC | 	wrlong	result1, objptr
14d98     62 00 00 FF 
14d9c     F0 E5 85 F1 | 	sub	objptr, ##50672
14da0     F2 FA 01 F6 | 	mov	result1, objptr
14da4     00 38 02 FF 
14da8     00 FA 45 F5 | 	or	result1, ##74448896
14dac     62 00 00 FF 
14db0     F4 E5 05 F1 | 	add	objptr, ##50676
14db4     F2 FA 61 FC | 	wrlong	result1, objptr
14db8     62 00 00 FF 
14dbc     F4 E5 85 F1 | 	sub	objptr, ##50676
14dc0     F2 FA 01 F6 | 	mov	result1, objptr
14dc4     00 40 02 FF 
14dc8     00 FA 45 F5 | 	or	result1, ##75497472
14dcc     62 00 00 FF 
14dd0     88 E4 05 F1 | 	add	objptr, ##50312
14dd4     F2 FA 61 FC | 	wrlong	result1, objptr
14dd8     62 00 00 FF 
14ddc     88 E4 85 F1 | 	sub	objptr, ##50312
14de0     F2 FA 01 F6 | 	mov	result1, objptr
14de4     00 48 02 FF 
14de8     00 FA 45 F5 | 	or	result1, ##76546048
14dec     63 00 00 FF 
14df0     0C E4 05 F1 | 	add	objptr, ##50700
14df4     F2 FA 61 FC | 	wrlong	result1, objptr
14df8     63 00 00 FF 
14dfc     0C E4 85 F1 | 	sub	objptr, ##50700
14e00     F2 FA 01 F6 | 	mov	result1, objptr
14e04     00 50 02 FF 
14e08     00 FA 45 F5 | 	or	result1, ##77594624
14e0c     63 00 00 FF 
14e10     1C E4 05 F1 | 	add	objptr, ##50716
14e14     F2 FA 61 FC | 	wrlong	result1, objptr
14e18     63 00 00 FF 
14e1c     1C E4 85 F1 | 	sub	objptr, ##50716
14e20     F2 FA 01 F6 | 	mov	result1, objptr
14e24     00 58 02 FF 
14e28     00 FA 45 F5 | 	or	result1, ##78643200
14e2c     63 00 00 FF 
14e30     20 E4 05 F1 | 	add	objptr, ##50720
14e34     F2 FA 61 FC | 	wrlong	result1, objptr
14e38     63 00 00 FF 
14e3c     20 E4 85 F1 | 	sub	objptr, ##50720
14e40     F2 FA 01 F6 | 	mov	result1, objptr
14e44     00 60 02 FF 
14e48     00 FA 45 F5 | 	or	result1, ##79691776
14e4c     63 00 00 FF 
14e50     18 E4 05 F1 | 	add	objptr, ##50712
14e54     F2 FA 61 FC | 	wrlong	result1, objptr
14e58     63 00 00 FF 
14e5c     18 E4 85 F1 | 	sub	objptr, ##50712
14e60     F2 FA 01 F6 | 	mov	result1, objptr
14e64     00 68 02 FF 
14e68     00 FA 45 F5 | 	or	result1, ##80740352
14e6c     63 00 00 FF 
14e70     10 E4 05 F1 | 	add	objptr, ##50704
14e74     F2 FA 61 FC | 	wrlong	result1, objptr
14e78     63 00 00 FF 
14e7c     10 E4 85 F1 | 	sub	objptr, ##50704
14e80     F2 FA 01 F6 | 	mov	result1, objptr
14e84     00 70 02 FF 
14e88     00 FA 45 F5 | 	or	result1, ##81788928
14e8c     63 00 00 FF 
14e90     14 E4 05 F1 | 	add	objptr, ##50708
14e94     F2 FA 61 FC | 	wrlong	result1, objptr
14e98     63 00 00 FF 
14e9c     14 E4 85 F1 | 	sub	objptr, ##50708
14ea0     F2 FA 01 F6 | 	mov	result1, objptr
14ea4     00 78 02 FF 
14ea8     00 FA 45 F5 | 	or	result1, ##82837504
14eac     63 00 00 FF 
14eb0     24 E4 05 F1 | 	add	objptr, ##50724
14eb4     F2 FA 61 FC | 	wrlong	result1, objptr
14eb8     63 00 00 FF 
14ebc     24 E4 85 F1 | 	sub	objptr, ##50724
14ec0     F2 FA 01 F6 | 	mov	result1, objptr
14ec4     00 80 02 FF 
14ec8     00 FA 45 F5 | 	or	result1, ##83886080
14ecc     63 00 00 FF 
14ed0     28 E4 05 F1 | 	add	objptr, ##50728
14ed4     F2 FA 61 FC | 	wrlong	result1, objptr
14ed8     63 00 00 FF 
14edc     28 E4 85 F1 | 	sub	objptr, ##50728
14ee0     F2 FA 01 F6 | 	mov	result1, objptr
14ee4     00 88 02 FF 
14ee8     00 FA 45 F5 | 	or	result1, ##84934656
14eec     63 00 00 FF 
14ef0     2C E4 05 F1 | 	add	objptr, ##50732
14ef4     F2 FA 61 FC | 	wrlong	result1, objptr
14ef8     63 00 00 FF 
14efc     2C E4 85 F1 | 	sub	objptr, ##50732
14f00     F2 FA 01 F6 | 	mov	result1, objptr
14f04     00 90 02 FF 
14f08     00 FA 45 F5 | 	or	result1, ##85983232
14f0c     63 00 00 FF 
14f10     30 E4 05 F1 | 	add	objptr, ##50736
14f14     F2 FA 61 FC | 	wrlong	result1, objptr
14f18     63 00 00 FF 
14f1c     30 E4 85 F1 | 	sub	objptr, ##50736
14f20     F2 FA 01 F6 | 	mov	result1, objptr
14f24     00 98 02 FF 
14f28     00 FA 45 F5 | 	or	result1, ##87031808
14f2c     63 00 00 FF 
14f30     34 E4 05 F1 | 	add	objptr, ##50740
14f34     F2 FA 61 FC | 	wrlong	result1, objptr
14f38     63 00 00 FF 
14f3c     34 E4 85 F1 | 	sub	objptr, ##50740
14f40     F2 FA 01 F6 | 	mov	result1, objptr
14f44     00 A0 02 FF 
14f48     00 FA 45 F5 | 	or	result1, ##88080384
14f4c     63 00 00 FF 
14f50     38 E4 05 F1 | 	add	objptr, ##50744
14f54     F2 FA 61 FC | 	wrlong	result1, objptr
14f58     63 00 00 FF 
14f5c     38 E4 85 F1 | 	sub	objptr, ##50744
14f60     F2 FA 01 F6 | 	mov	result1, objptr
14f64     00 A8 02 FF 
14f68     00 FA 45 F5 | 	or	result1, ##89128960
14f6c     63 00 00 FF 
14f70     3C E4 05 F1 | 	add	objptr, ##50748
14f74     F2 FA 61 FC | 	wrlong	result1, objptr
14f78     63 00 00 FF 
14f7c     3C E4 85 F1 | 	sub	objptr, ##50748
14f80     F2 FA 01 F6 | 	mov	result1, objptr
14f84     00 B0 02 FF 
14f88     00 FA 45 F5 | 	or	result1, ##90177536
14f8c     63 00 00 FF 
14f90     40 E4 05 F1 | 	add	objptr, ##50752
14f94     F2 FA 61 FC | 	wrlong	result1, objptr
14f98     63 00 00 FF 
14f9c     40 E4 85 F1 | 	sub	objptr, ##50752
14fa0     F2 FA 01 F6 | 	mov	result1, objptr
14fa4     00 B8 02 FF 
14fa8     00 FA 45 F5 | 	or	result1, ##91226112
14fac     63 00 00 FF 
14fb0     4C E4 05 F1 | 	add	objptr, ##50764
14fb4     F2 FA 61 FC | 	wrlong	result1, objptr
14fb8     63 00 00 FF 
14fbc     4C E4 85 F1 | 	sub	objptr, ##50764
14fc0     F2 FA 01 F6 | 	mov	result1, objptr
14fc4     00 C0 02 FF 
14fc8     00 FA 45 F5 | 	or	result1, ##92274688
14fcc     63 00 00 FF 
14fd0     44 E4 05 F1 | 	add	objptr, ##50756
14fd4     F2 FA 61 FC | 	wrlong	result1, objptr
14fd8     63 00 00 FF 
14fdc     44 E4 85 F1 | 	sub	objptr, ##50756
14fe0     F2 FA 01 F6 | 	mov	result1, objptr
14fe4     00 C8 02 FF 
14fe8     00 FA 45 F5 | 	or	result1, ##93323264
14fec     63 00 00 FF 
14ff0     48 E4 05 F1 | 	add	objptr, ##50760
14ff4     F2 FA 61 FC | 	wrlong	result1, objptr
14ff8     63 00 00 FF 
14ffc     48 E4 85 F1 | 	sub	objptr, ##50760
15000     F2 FA 01 F6 | 	mov	result1, objptr
15004     00 D0 02 FF 
15008     00 FA 45 F5 | 	or	result1, ##94371840
1500c     63 00 00 FF 
15010     50 E4 05 F1 | 	add	objptr, ##50768
15014     F2 FA 61 FC | 	wrlong	result1, objptr
15018     63 00 00 FF 
1501c     50 E4 85 F1 | 	sub	objptr, ##50768
15020     F2 FA 01 F6 | 	mov	result1, objptr
15024     00 D8 02 FF 
15028     00 FA 45 F5 | 	or	result1, ##95420416
1502c     62 00 00 FF 
15030     F8 E5 05 F1 | 	add	objptr, ##50680
15034     F2 FA 61 FC | 	wrlong	result1, objptr
15038     62 00 00 FF 
1503c     F8 E5 85 F1 | 	sub	objptr, ##50680
15040     F2 FA 01 F6 | 	mov	result1, objptr
15044     00 E0 02 FF 
15048     00 FA 45 F5 | 	or	result1, ##96468992
1504c     63 00 00 FF 
15050     00 E4 05 F1 | 	add	objptr, ##50688
15054     F2 FA 61 FC | 	wrlong	result1, objptr
15058     63 00 00 FF 
1505c     00 E4 85 F1 | 	sub	objptr, ##50688
15060     F2 FA 01 F6 | 	mov	result1, objptr
15064     00 E8 02 FF 
15068     00 FA 45 F5 | 	or	result1, ##97517568
1506c     63 00 00 FF 
15070     04 E4 05 F1 | 	add	objptr, ##50692
15074     F2 FA 61 FC | 	wrlong	result1, objptr
15078     63 00 00 FF 
1507c     04 E4 85 F1 | 	sub	objptr, ##50692
15080                 | _init_commands_ret
15080     2D 00 64 FD | 	ret
15084                 | 
15084                 | ' 
15084                 | ' ''--------------------------------Error strings -------------------------------------
15084                 | ' 
15084                 | ' sub init_error_strings
15084                 | _init_error_strings
15084     41 01 00 FF 
15088     0E 00 06 F6 | 	mov	_var01, ##@LR__4613
1508c     64 00 00 FF 
15090     50 E4 05 F1 | 	add	objptr, ##51280
15094     F2 00 62 FC | 	wrlong	_var01, objptr
15098     41 01 00 FF 
1509c     0F 00 06 F6 | 	mov	_var01, ##@LR__4614
150a0     04 E4 05 F1 | 	add	objptr, #4
150a4     F2 00 62 FC | 	wrlong	_var01, objptr
150a8     41 01 00 FF 
150ac     34 00 06 F6 | 	mov	_var01, ##@LR__4615
150b0     04 E4 05 F1 | 	add	objptr, #4
150b4     F2 00 62 FC | 	wrlong	_var01, objptr
150b8     41 01 00 FF 
150bc     55 00 06 F6 | 	mov	_var01, ##@LR__4616
150c0     04 E4 05 F1 | 	add	objptr, #4
150c4     F2 00 62 FC | 	wrlong	_var01, objptr
150c8     41 01 00 FF 
150cc     6F 00 06 F6 | 	mov	_var01, ##@LR__4617
150d0     04 E4 05 F1 | 	add	objptr, #4
150d4     F2 00 62 FC | 	wrlong	_var01, objptr
150d8     41 01 00 FF 
150dc     8B 00 06 F6 | 	mov	_var01, ##@LR__4618
150e0     04 E4 05 F1 | 	add	objptr, #4
150e4     F2 00 62 FC | 	wrlong	_var01, objptr
150e8     41 01 00 FF 
150ec     AD 00 06 F6 | 	mov	_var01, ##@LR__4619
150f0     04 E4 05 F1 | 	add	objptr, #4
150f4     F2 00 62 FC | 	wrlong	_var01, objptr
150f8     41 01 00 FF 
150fc     DB 00 06 F6 | 	mov	_var01, ##@LR__4620
15100     04 E4 05 F1 | 	add	objptr, #4
15104     F2 00 62 FC | 	wrlong	_var01, objptr
15108     41 01 00 FF 
1510c     06 01 06 F6 | 	mov	_var01, ##@LR__4621
15110     04 E4 05 F1 | 	add	objptr, #4
15114     F2 00 62 FC | 	wrlong	_var01, objptr
15118     41 01 00 FF 
1511c     1F 01 06 F6 | 	mov	_var01, ##@LR__4622
15120     04 E4 05 F1 | 	add	objptr, #4
15124     F2 00 62 FC | 	wrlong	_var01, objptr
15128     41 01 00 FF 
1512c     40 01 06 F6 | 	mov	_var01, ##@LR__4623
15130     04 E4 05 F1 | 	add	objptr, #4
15134     F2 00 62 FC | 	wrlong	_var01, objptr
15138     41 01 00 FF 
1513c     57 01 06 F6 | 	mov	_var01, ##@LR__4624
15140     04 E4 05 F1 | 	add	objptr, #4
15144     F2 00 62 FC | 	wrlong	_var01, objptr
15148     41 01 00 FF 
1514c     75 01 06 F6 | 	mov	_var01, ##@LR__4625
15150     04 E4 05 F1 | 	add	objptr, #4
15154     F2 00 62 FC | 	wrlong	_var01, objptr
15158     41 01 00 FF 
1515c     99 01 06 F6 | 	mov	_var01, ##@LR__4626
15160     04 E4 05 F1 | 	add	objptr, #4
15164     F2 00 62 FC | 	wrlong	_var01, objptr
15168     41 01 00 FF 
1516c     C0 01 06 F6 | 	mov	_var01, ##@LR__4627
15170     04 E4 05 F1 | 	add	objptr, #4
15174     F2 00 62 FC | 	wrlong	_var01, objptr
15178     41 01 00 FF 
1517c     DC 01 06 F6 | 	mov	_var01, ##@LR__4628
15180     04 E4 05 F1 | 	add	objptr, #4
15184     F2 00 62 FC | 	wrlong	_var01, objptr
15188     41 01 00 FF 
1518c     ED 01 06 F6 | 	mov	_var01, ##@LR__4629
15190     04 E4 05 F1 | 	add	objptr, #4
15194     F2 00 62 FC | 	wrlong	_var01, objptr
15198     41 01 00 FF 
1519c     FD 01 06 F6 | 	mov	_var01, ##@LR__4630
151a0     04 E4 05 F1 | 	add	objptr, #4
151a4     F2 00 62 FC | 	wrlong	_var01, objptr
151a8     42 01 00 FF 
151ac     18 00 06 F6 | 	mov	_var01, ##@LR__4631
151b0     04 E4 05 F1 | 	add	objptr, #4
151b4     F2 00 62 FC | 	wrlong	_var01, objptr
151b8     42 01 00 FF 
151bc     2A 00 06 F6 | 	mov	_var01, ##@LR__4632
151c0     04 E4 05 F1 | 	add	objptr, #4
151c4     F2 00 62 FC | 	wrlong	_var01, objptr
151c8     42 01 00 FF 
151cc     42 00 06 F6 | 	mov	_var01, ##@LR__4633
151d0     04 E4 05 F1 | 	add	objptr, #4
151d4     F2 00 62 FC | 	wrlong	_var01, objptr
151d8     42 01 00 FF 
151dc     56 00 06 F6 | 	mov	_var01, ##@LR__4634
151e0     04 E4 05 F1 | 	add	objptr, #4
151e4     F2 00 62 FC | 	wrlong	_var01, objptr
151e8     42 01 00 FF 
151ec     66 00 06 F6 | 	mov	_var01, ##@LR__4635
151f0     04 E4 05 F1 | 	add	objptr, #4
151f4     F2 00 62 FC | 	wrlong	_var01, objptr
151f8     42 01 00 FF 
151fc     83 00 06 F6 | 	mov	_var01, ##@LR__4636
15200     04 E4 05 F1 | 	add	objptr, #4
15204     F2 00 62 FC | 	wrlong	_var01, objptr
15208     42 01 00 FF 
1520c     94 00 06 F6 | 	mov	_var01, ##@LR__4637
15210     04 E4 05 F1 | 	add	objptr, #4
15214     F2 00 62 FC | 	wrlong	_var01, objptr
15218     42 01 00 FF 
1521c     A5 00 06 F6 | 	mov	_var01, ##@LR__4638
15220     04 E4 05 F1 | 	add	objptr, #4
15224     F2 00 62 FC | 	wrlong	_var01, objptr
15228     42 01 00 FF 
1522c     D0 00 06 F6 | 	mov	_var01, ##@LR__4639
15230     04 E4 05 F1 | 	add	objptr, #4
15234     F2 00 62 FC | 	wrlong	_var01, objptr
15238     42 01 00 FF 
1523c     EC 00 06 F6 | 	mov	_var01, ##@LR__4640
15240     04 E4 05 F1 | 	add	objptr, #4
15244     F2 00 62 FC | 	wrlong	_var01, objptr
15248     42 01 00 FF 
1524c     02 01 06 F6 | 	mov	_var01, ##@LR__4641
15250     04 E4 05 F1 | 	add	objptr, #4
15254     F2 00 62 FC | 	wrlong	_var01, objptr
15258     42 01 00 FF 
1525c     0F 01 06 F6 | 	mov	_var01, ##@LR__4642
15260     04 E4 05 F1 | 	add	objptr, #4
15264     F2 00 62 FC | 	wrlong	_var01, objptr
15268     42 01 00 FF 
1526c     21 01 06 F6 | 	mov	_var01, ##@LR__4643
15270     04 E4 05 F1 | 	add	objptr, #4
15274     F2 00 62 FC | 	wrlong	_var01, objptr
15278     42 01 00 FF 
1527c     32 01 06 F6 | 	mov	_var01, ##@LR__4644
15280     04 E4 05 F1 | 	add	objptr, #4
15284     F2 00 62 FC | 	wrlong	_var01, objptr
15288     42 01 00 FF 
1528c     4E 01 06 F6 | 	mov	_var01, ##@LR__4645
15290     04 E4 05 F1 | 	add	objptr, #4
15294     F2 00 62 FC | 	wrlong	_var01, objptr
15298     42 01 00 FF 
1529c     5F 01 06 F6 | 	mov	_var01, ##@LR__4646
152a0     04 E4 05 F1 | 	add	objptr, #4
152a4     F2 00 62 FC | 	wrlong	_var01, objptr
152a8     42 01 00 FF 
152ac     6E 01 06 F6 | 	mov	_var01, ##@LR__4647
152b0     04 E4 05 F1 | 	add	objptr, #4
152b4     F2 00 62 FC | 	wrlong	_var01, objptr
152b8     42 01 00 FF 
152bc     89 01 06 F6 | 	mov	_var01, ##@LR__4648
152c0     04 E4 05 F1 | 	add	objptr, #4
152c4     F2 00 62 FC | 	wrlong	_var01, objptr
152c8     42 01 00 FF 
152cc     BD 01 06 F6 | 	mov	_var01, ##@LR__4649
152d0     04 E4 05 F1 | 	add	objptr, #4
152d4     F2 00 62 FC | 	wrlong	_var01, objptr
152d8     42 01 00 FF 
152dc     D6 01 06 F6 | 	mov	_var01, ##@LR__4650
152e0     04 E4 05 F1 | 	add	objptr, #4
152e4     F2 00 62 FC | 	wrlong	_var01, objptr
152e8     42 01 00 FF 
152ec     F2 01 06 F6 | 	mov	_var01, ##@LR__4651
152f0     04 E4 05 F1 | 	add	objptr, #4
152f4     F2 00 62 FC | 	wrlong	_var01, objptr
152f8     43 01 00 FF 
152fc     10 00 06 F6 | 	mov	_var01, ##@LR__4652
15300     04 E4 05 F1 | 	add	objptr, #4
15304     F2 00 62 FC | 	wrlong	_var01, objptr
15308     43 01 00 FF 
1530c     29 00 06 F6 | 	mov	_var01, ##@LR__4653
15310     04 E4 05 F1 | 	add	objptr, #4
15314     F2 00 62 FC | 	wrlong	_var01, objptr
15318     43 01 00 FF 
1531c     48 00 06 F6 | 	mov	_var01, ##@LR__4654
15320     04 E4 05 F1 | 	add	objptr, #4
15324     F2 00 62 FC | 	wrlong	_var01, objptr
15328     43 01 00 FF 
1532c     57 00 06 F6 | 	mov	_var01, ##@LR__4655
15330     04 E4 05 F1 | 	add	objptr, #4
15334     F2 00 62 FC | 	wrlong	_var01, objptr
15338     43 01 00 FF 
1533c     85 00 06 F6 | 	mov	_var01, ##@LR__4656
15340     04 E4 05 F1 | 	add	objptr, #4
15344     F2 00 62 FC | 	wrlong	_var01, objptr
15348     43 01 00 FF 
1534c     93 00 06 F6 | 	mov	_var01, ##@LR__4657
15350     04 E4 05 F1 | 	add	objptr, #4
15354     F2 00 62 FC | 	wrlong	_var01, objptr
15358     43 01 00 FF 
1535c     A8 00 06 F6 | 	mov	_var01, ##@LR__4658
15360     04 E4 05 F1 | 	add	objptr, #4
15364     F2 00 62 FC | 	wrlong	_var01, objptr
15368     43 01 00 FF 
1536c     CC 00 06 F6 | 	mov	_var01, ##@LR__4659
15370     04 E4 05 F1 | 	add	objptr, #4
15374     F2 00 62 FC | 	wrlong	_var01, objptr
15378     43 01 00 FF 
1537c     E3 00 06 F6 | 	mov	_var01, ##@LR__4660
15380     04 E4 05 F1 | 	add	objptr, #4
15384     F2 00 62 FC | 	wrlong	_var01, objptr
15388     43 01 00 FF 
1538c     F6 00 06 F6 | 	mov	_var01, ##@LR__4661
15390     04 E4 05 F1 | 	add	objptr, #4
15394     F2 00 62 FC | 	wrlong	_var01, objptr
15398     64 00 00 FF 
1539c     10 E5 85 F1 | 	sub	objptr, ##51472
153a0                 | _init_error_strings_ret
153a0     2D 00 64 FD | 	ret
153a4                 | 
153a4                 | '         
153a4                 | ' sub printerror(err as integer)
153a4                 | _printerror
153a4     01 4A 05 F6 | 	mov	COUNT_, #1
153a8     A8 00 A0 FD | 	call	#pushregs_
153ac     09 1F 02 F6 | 	mov	local01, arg01
153b0     43 01 00 FF 
153b4     0D 13 06 F6 | 	mov	arg01, ##@LR__4662
153b8     E4 24 B0 FD | 	call	#_hg010b_spin2_write
153bc     0F 13 02 F6 | 	mov	arg01, local01
153c0     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
153c4     FD 12 02 F6 | 	mov	arg01, result1
153c8     D4 24 B0 FD | 	call	#_hg010b_spin2_write
153cc     43 01 00 FF 
153d0     14 13 06 F6 | 	mov	arg01, ##@LR__4663
153d4     C8 24 B0 FD | 	call	#_hg010b_spin2_write
153d8     02 1E 66 F0 | 	shl	local01, #2
153dc     64 00 00 FF 
153e0     50 E4 05 F1 | 	add	objptr, ##51280
153e4     F2 1E 02 F1 | 	add	local01, objptr
153e8     0F 13 02 FB | 	rdlong	arg01, local01
153ec     64 00 00 FF 
153f0     50 E4 85 F1 | 	sub	objptr, ##51280
153f4                 | ' 
153f4                 | ' write(text)
153f4     A8 24 B0 FD | 	call	#_hg010b_spin2_write
153f8                 | ' crlf
153f8     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
153fc     A7 F0 03 F6 | 	mov	ptra, fp
15400     B2 00 A0 FD | 	call	#popregs_
15404                 | _printerror_ret
15404     2D 00 64 FD | 	ret
15408                 | 
15408                 | ' 
15408                 | ' '' ------------------------------- Hardware start/stop/initialization 
15408                 | ' 
15408                 | ' sub startpsram
15408                 | _startpsram
15408     00 12 06 F6 | 	mov	arg01, #0
1540c     0A 14 C6 F9 | 	decod	arg02, #10
15410     0B 16 06 F6 | 	mov	arg03, #11
15414     07 18 06 F6 | 	mov	arg04, #7
15418     0B 00 00 FF 
1541c     C0 E4 05 F1 | 	add	objptr, ##5824
15420     88 27 B0 FD | 	call	#_psram_spin2_startx
15424     4A 00 00 FF 
15428     1C E5 05 F1 | 	add	objptr, ##38172
1542c     F2 FA 61 FC | 	wrlong	result1, objptr
15430                 | '     return $7FF00 + cog*12
15430     0C E4 05 F1 | 	add	objptr, #12
15434     FF 03 80 FF 
15438     F2 00 6A FC | 	wrlong	##524032, objptr
1543c     55 00 00 FF 
15440     E8 E5 85 F1 | 	sub	objptr, ##44008
15444                 | _startpsram_ret
15444     2D 00 64 FD | 	ret
15448                 | 
15448                 | ' 
15448                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
15448                 | _startvideo
15448     01 4A 05 F6 | 	mov	COUNT_, #1
1544c     A8 00 A0 FD | 	call	#pushregs_
15450     55 00 00 FF 
15454     E8 E5 05 F1 | 	add	objptr, ##44008
15458     F2 18 02 FB | 	rdlong	arg04, objptr
1545c     55 00 00 FF 
15460     E8 E5 85 F1 | 	sub	objptr, ##44008
15464     0A 13 02 F6 | 	mov	arg01, arg02
15468     0C 15 02 F6 | 	mov	arg02, arg04
1546c     50 0F B0 FD | 	call	#_hg010b_spin2_start
15470     55 00 00 FF 
15474     D4 E5 05 F1 | 	add	objptr, ##43988
15478     F2 FA 61 FC | 	wrlong	result1, objptr
1547c                 | ' 
1547c                 | ' videocog=v.start(pin,mbox)
1547c                 | ' 
1547c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1547c     00 1E 06 F6 | 	mov	local01, #0
15480     4A 00 00 FF 
15484     14 E5 85 F1 | 	sub	objptr, ##38164
15488                 | LR__1680
15488     0F 13 02 F6 | 	mov	arg01, local01
1548c     00 28 00 FF 
15490     00 14 06 F6 | 	mov	arg02, ##5242880
15494     6C 2B B0 FD | 	call	#_psram_spin2_setQos
15498     01 1E 06 F1 | 	add	local01, #1
1549c     08 1E 56 F2 | 	cmps	local01, #8 wc
154a0     E4 FF 9F CD |  if_b	jmp	#LR__1680
154a4     4A 00 00 FF 
154a8     14 E5 05 F1 | 	add	objptr, ##38164
154ac     F2 12 02 FB | 	rdlong	arg01, objptr
154b0     7A 00 02 FF 
154b4     00 14 06 F6 | 	mov	arg02, ##67171328
154b8     4A 00 00 FF 
154bc     14 E5 85 F1 | 	sub	objptr, ##38164
154c0     40 2B B0 FD | 	call	#_psram_spin2_setQos
154c4     0B 00 00 FF 
154c8     C0 E4 85 F1 | 	sub	objptr, ##5824
154cc                 | ' psram.setQoS(videocog, $0400f400) 
154cc                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
154cc     F2 14 02 F6 | 	mov	arg02, objptr
154d0     00 F0 02 FF 
154d4     00 14 46 F5 | 	or	arg02, ##98566144
154d8     00 16 06 F6 | 	mov	arg03, #0
154dc     00 18 06 F6 | 	mov	arg04, #0
154e0     00 12 06 F6 | 	mov	arg01, #0
154e4     88 3E B0 FD | 	call	#__system___basic_open
154e8                 | ' return videocog
154e8     55 00 00 FF 
154ec     D4 E5 05 F1 | 	add	objptr, ##43988
154f0     F2 FA 01 FB | 	rdlong	result1, objptr
154f4     55 00 00 FF 
154f8     D4 E5 85 F1 | 	sub	objptr, ##43988
154fc     A7 F0 03 F6 | 	mov	ptra, fp
15500     B2 00 A0 FD | 	call	#popregs_
15504                 | _startvideo_ret
15504     2D 00 64 FD | 	ret
15508                 | 
15508                 | ' 
15508                 | ' function pspeek(adr as ulong) as ubyte
15508                 | _pspeek
15508     00 4A 05 F6 | 	mov	COUNT_, #0
1550c     A8 00 A0 FD | 	call	#pushregs_
15510     0C F0 07 F1 | 	add	ptra, #12
15514     04 4E 05 F1 | 	add	fp, #4
15518     A7 12 62 FC | 	wrlong	arg01, fp
1551c     04 4E 05 F1 | 	add	fp, #4
15520     A7 12 02 F6 | 	mov	arg01, fp
15524     04 4E 85 F1 | 	sub	fp, #4
15528     A7 14 02 FB | 	rdlong	arg02, fp
1552c     04 4E 85 F1 | 	sub	fp, #4
15530     01 16 06 F6 | 	mov	arg03, #1
15534     0B 00 00 FF 
15538     C0 E4 05 F1 | 	add	objptr, ##5824
1553c     98 28 B0 FD | 	call	#_psram_spin2_read1
15540     0B 00 00 FF 
15544     C0 E4 85 F1 | 	sub	objptr, ##5824
15548                 | ' psram.read1(varptr(res),adr,1)
15548                 | ' return res
15548     08 4E 05 F1 | 	add	fp, #8
1554c     A7 FA C1 FA | 	rdbyte	result1, fp
15550     08 4E 85 F1 | 	sub	fp, #8
15554     A7 F0 03 F6 | 	mov	ptra, fp
15558     B2 00 A0 FD | 	call	#popregs_
1555c                 | _pspeek_ret
1555c     2D 00 64 FD | 	ret
15560                 | 
15560                 | ' 
15560                 | ' function pslpeek(adr as ulong) as ulong
15560                 | _pslpeek
15560     00 4A 05 F6 | 	mov	COUNT_, #0
15564     A8 00 A0 FD | 	call	#pushregs_
15568     0C F0 07 F1 | 	add	ptra, #12
1556c     04 4E 05 F1 | 	add	fp, #4
15570     A7 12 62 FC | 	wrlong	arg01, fp
15574     04 4E 05 F1 | 	add	fp, #4
15578     A7 12 02 F6 | 	mov	arg01, fp
1557c     04 4E 85 F1 | 	sub	fp, #4
15580     A7 14 02 FB | 	rdlong	arg02, fp
15584     04 4E 85 F1 | 	sub	fp, #4
15588     04 16 06 F6 | 	mov	arg03, #4
1558c     0B 00 00 FF 
15590     C0 E4 05 F1 | 	add	objptr, ##5824
15594     40 28 B0 FD | 	call	#_psram_spin2_read1
15598     0B 00 00 FF 
1559c     C0 E4 85 F1 | 	sub	objptr, ##5824
155a0                 | ' psram.read1(varptr(res),adr,4)
155a0                 | ' return res
155a0     08 4E 05 F1 | 	add	fp, #8
155a4     A7 FA 01 FB | 	rdlong	result1, fp
155a8     08 4E 85 F1 | 	sub	fp, #8
155ac     A7 F0 03 F6 | 	mov	ptra, fp
155b0     B2 00 A0 FD | 	call	#popregs_
155b4                 | _pslpeek_ret
155b4     2D 00 64 FD | 	ret
155b8                 | 
155b8                 | ' 
155b8                 | ' '' ------------------------------- USB keyboard scan to char translator
155b8                 | ' 
155b8                 | ' function scantochar(key)
155b8                 | _scantochar
155b8                 | ' 
155b8                 | ' select case (key shr 8) and 255
155b8     09 01 02 F6 | 	mov	_var01, arg01
155bc     08 00 C6 F0 | 	sar	_var01, #8
155c0     FF 00 0E F5 | 	and	_var01, #255 wz
155c4     24 00 90 AD |  if_e	jmp	#LR__1690
155c8     02 00 0E F2 | 	cmp	_var01, #2 wz
155cc     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
155d0     30 00 90 AD |  if_e	jmp	#LR__1691
155d4     40 00 0E F2 | 	cmp	_var01, #64 wz
155d8     44 00 90 AD |  if_e	jmp	#LR__1692
155dc     42 00 0E F2 | 	cmp	_var01, #66 wz
155e0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
155e4     70 00 90 5D |  if_ne	jmp	#LR__1694
155e8     50 00 90 FD | 	jmp	#LR__1693
155ec                 | LR__1690
155ec     09 FB 01 F6 | 	mov	result1, arg01
155f0     7F FA 05 F5 | 	and	result1, #127
155f4     02 FA 65 F0 | 	shl	result1, #2
155f8     F5 FA 01 F1 | 	add	result1, ptr__dat__
155fc     FD FA C1 FA | 	rdbyte	result1, result1
15600     54 00 90 FD | 	jmp	#_scantochar_ret
15604                 | LR__1691
15604     09 FB 01 F6 | 	mov	result1, arg01
15608     7F FA 05 F5 | 	and	result1, #127
1560c     02 FA 65 F0 | 	shl	result1, #2
15610     01 FA 05 F1 | 	add	result1, #1
15614     F5 FA 01 F1 | 	add	result1, ptr__dat__
15618     FD FA C1 FA | 	rdbyte	result1, result1
1561c     38 00 90 FD | 	jmp	#_scantochar_ret
15620                 | LR__1692
15620     09 FB 01 F6 | 	mov	result1, arg01
15624     7F FA 05 F5 | 	and	result1, #127
15628     02 FA 65 F0 | 	shl	result1, #2
1562c     02 FA 05 F1 | 	add	result1, #2
15630     F5 FA 01 F1 | 	add	result1, ptr__dat__
15634     FD FA C1 FA | 	rdbyte	result1, result1
15638     1C 00 90 FD | 	jmp	#_scantochar_ret
1563c                 | LR__1693
1563c     09 FB 01 F6 | 	mov	result1, arg01
15640     7F FA 05 F5 | 	and	result1, #127
15644     02 FA 65 F0 | 	shl	result1, #2
15648     03 FA 05 F1 | 	add	result1, #3
1564c     F5 FA 01 F1 | 	add	result1, ptr__dat__
15650     FD FA C1 FA | 	rdbyte	result1, result1
15654     00 00 90 FD | 	jmp	#_scantochar_ret
15658                 | LR__1694
15658                 | _scantochar_ret
15658     2D 00 64 FD | 	ret
1565c                 | 
1565c                 | _program
1565c     0B 4A 05 F6 | 	mov	COUNT_, #11
15660     A8 00 A0 FD | 	call	#pushregs_
15664     A0 FD BF FD | 	call	#_startpsram
15668     40 12 06 F6 | 	mov	arg01, #64
1566c     00 14 06 F6 | 	mov	arg02, #0
15670     00 16 06 F6 | 	mov	arg03, #0
15674     D0 FD BF FD | 	call	#_startvideo
15678     00 12 06 F6 | 	mov	arg01, #0
1567c     00 14 06 F6 | 	mov	arg02, #0
15680     00 16 06 F6 | 	mov	arg03, #0
15684     0B 00 00 FF 
15688     C0 E4 05 F1 | 	add	objptr, ##5824
1568c     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
15690     FE 1C 02 F6 | 	mov	arg06, result2
15694     4A 00 00 FF 
15698     10 E5 05 F1 | 	add	objptr, ##38160
1569c     F2 FA 61 FC | 	wrlong	result1, objptr
156a0     14 E4 05 F1 | 	add	objptr, #20
156a4     F2 1C 62 FC | 	wrlong	arg06, objptr
156a8     55 00 00 FF 
156ac     E4 E5 85 F1 | 	sub	objptr, ##44004
156b0     32 12 06 F6 | 	mov	arg01, #50
156b4     04 35 B0 FD | 	call	#__system___waitms
156b8     55 00 00 FF 
156bc     E4 E5 05 F1 | 	add	objptr, ##44004
156c0     F2 12 02 FB | 	rdlong	arg01, objptr
156c4     55 00 00 FF 
156c8     E4 E5 85 F1 | 	sub	objptr, ##44004
156cc     14 12 06 F1 | 	add	arg01, #20
156d0     20 00 80 FF 
156d4     09 01 58 FC | 	wrword	##16384, arg01
156d8     30 2A B0 FD | 	call	#_usbnew_spin2_start
156dc     55 00 00 FF 
156e0     D8 E5 05 F1 | 	add	objptr, ##43992
156e4     F2 FA 61 FC | 	wrlong	result1, objptr
156e8                 | '   mouse_limits[0] := xlim
156e8     0F 00 00 FF 
156ec     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
156f0     01 00 80 FF 
156f4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
156f8                 | '   mouse_limits[1] := ylim
156f8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
156fc     01 00 80 FF 
15700     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
15704     55 00 00 FF 
15708     CB E4 85 F1 | 	sub	objptr, ##43723
1570c     F2 12 02 F6 | 	mov	arg01, objptr
15710     0D E5 85 F1 | 	sub	objptr, #269
15714     C4 12 06 F1 | 	add	arg01, #196
15718                 | '   mouse_outptr := ptr
15718     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1571c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
15720     0F 00 00 FF 
15724     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15728     0E 00 00 FF 
1572c     9A EA 05 F1 | 	add	ptr__dat__, ##7322
15730     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15734     0E 00 00 FF 
15738     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
1573c     10 12 06 F6 | 	mov	arg01, #16
15740     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15744     10 12 06 F6 | 	mov	arg01, #16
15748     20 14 06 F6 | 	mov	arg02, #32
1574c     20 16 06 F6 | 	mov	arg03, #32
15750     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
15754     09 12 C6 F9 | 	decod	arg01, #9
15758     20 15 06 F6 | 	mov	arg02, #288
1575c     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
15760     F2 1C 02 F6 | 	mov	arg06, objptr
15764     78 00 00 FF 
15768     BC E5 05 F1 | 	add	objptr, ##61884
1576c     F2 1A 02 F6 | 	mov	arg05, objptr
15770     0D 1D 62 FC | 	wrlong	arg06, arg05
15774     04 1A 06 F1 | 	add	arg05, #4
15778     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1577c     EF 14 02 F6 | 	mov	arg02, entryptr__
15780     F2 1E 02 F6 | 	mov	local01, objptr
15784     1E FA 05 F6 | 	mov	result1, #30
15788     28 1E 62 FD | 	setq	local01
1578c     0A FB F1 FC | 	coginit	result1, arg02 wc
15790     01 FA 65 C6 |  if_b	neg	result1, #1
15794     04 E4 85 F1 | 	sub	objptr, #4
15798     F2 FA 61 FC | 	wrlong	result1, objptr
1579c     01 00 00 FF 
157a0     90 E4 05 F1 | 	add	objptr, ##656
157a4     F2 00 68 FC | 	wrlong	#0, objptr
157a8     24 00 00 FF 
157ac     40 E4 85 F1 | 	sub	objptr, ##18496
157b0     F2 04 68 FC | 	wrlong	#2, objptr
157b4     04 E4 05 F1 | 	add	objptr, #4
157b8     F2 26 69 FC | 	wrlong	#147, objptr
157bc     04 E4 05 F1 | 	add	objptr, #4
157c0     F2 34 69 FC | 	wrlong	#154, objptr
157c4     04 E4 05 F1 | 	add	objptr, #4
157c8     F2 08 68 FC | 	wrlong	#4, objptr
157cc     04 E4 85 F1 | 	sub	objptr, #4
157d0     F2 1C 02 FB | 	rdlong	arg06, objptr
157d4     14 E4 85 F1 | 	sub	objptr, #20
157d8     F2 1C 62 FC | 	wrlong	arg06, objptr
157dc     04 E4 05 F1 | 	add	objptr, #4
157e0     F2 00 68 FC | 	wrlong	#0, objptr
157e4     04 E4 05 F1 | 	add	objptr, #4
157e8     F2 00 68 FC | 	wrlong	#0, objptr
157ec     22 00 00 FF 
157f0     B0 E5 05 F1 | 	add	objptr, ##17840
157f4     F2 02 68 FC | 	wrlong	#1, objptr
157f8     01 00 00 FF 
157fc     9C E4 05 F1 | 	add	objptr, ##668
15800     F2 00 68 FC | 	wrlong	#0, objptr
15804     01 00 00 FF 
15808     00 EA 05 F1 | 	add	ptr__dat__, ##512
1580c     08 E4 05 F1 | 	add	objptr, #8
15810     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15814     04 E4 85 F1 | 	sub	objptr, #4
15818     03 00 80 FF 
1581c     F2 28 69 FC | 	wrlong	##1684, objptr
15820     16 00 00 FF 
15824     1C E4 85 F1 | 	sub	objptr, ##11292
15828     F2 18 68 FC | 	wrlong	#12, objptr
1582c     64 00 00 FF 
15830     38 E4 85 F1 | 	sub	objptr, ##51256
15834     01 00 00 FF 
15838     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1583c     C8 EB BF FD | 	call	#_init_commands
15840     40 F8 BF FD | 	call	#_init_error_strings
15844     8C 68 BF FD | 	call	#_do_new
15848     56 00 00 FF 
1584c     10 E4 05 F1 | 	add	objptr, ##44048
15850     F2 12 02 FB | 	rdlong	arg01, objptr
15854     04 E4 85 F1 | 	sub	objptr, #4
15858     F2 14 02 FB | 	rdlong	arg02, objptr
1585c     56 00 00 FF 
15860     0C E4 85 F1 | 	sub	objptr, ##44044
15864     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
15868     56 00 00 FF 
1586c     14 E4 05 F1 | 	add	objptr, ##44052
15870     F2 12 02 FB | 	rdlong	arg01, objptr
15874     56 00 00 FF 
15878     14 E4 85 F1 | 	sub	objptr, ##44052
1587c     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
15880                 | ' 
15880                 | ' leading_spaces:=amount
15880     01 00 00 FF 
15884     B2 E4 05 F1 | 	add	objptr, ##690
15888     F2 04 68 FC | 	wrlong	#2, objptr
1588c     01 00 00 FF 
15890     B2 E4 85 F1 | 	sub	objptr, ##690
15894     43 01 00 FF 
15898     17 21 06 F6 | 	mov	local02, ##@LR__4664
1589c     3D 12 06 F6 | 	mov	arg01, #61
158a0     3C 14 06 F6 | 	mov	arg02, #60
158a4     3B 16 06 F6 | 	mov	arg03, #59
158a8     3A 18 06 F6 | 	mov	arg04, #58
158ac     AC 78 B0 FD | 	call	#__system___vfs_open_sdcardx
158b0     FD 14 02 F6 | 	mov	arg02, result1
158b4     10 13 02 F6 | 	mov	arg01, local02
158b8     D8 33 B0 FD | 	call	#__system___mount
158bc     43 01 00 FF 
158c0     1B 13 06 F6 | 	mov	arg01, ##@LR__4665
158c4     8C 36 B0 FD | 	call	#__system___chdir
158c8     43 01 00 FF 
158cc     23 21 06 F6 | 	mov	local02, ##@LR__4666
158d0     71 00 00 FF 
158d4     68 E4 05 F1 | 	add	objptr, ##57960
158d8     F2 20 62 FC | 	wrlong	local02, objptr
158dc     1B 00 00 FF 
158e0     60 E4 85 F1 | 	sub	objptr, ##13920
158e4     F2 12 02 FB | 	rdlong	arg01, objptr
158e8     56 00 00 FF 
158ec     08 E4 85 F1 | 	sub	objptr, ##44040
158f0     01 12 66 F0 | 	shl	arg01, #1
158f4     01 14 06 F6 | 	mov	arg02, #1
158f8     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
158fc                 | ' 
158fc                 | ' init_commands
158fc                 | ' init_error_strings
158fc                 | ' do_new
158fc                 | ' 
158fc                 | ' 
158fc                 | ' cls(ink, paper)
158fc                 | ' 'v.setfontfamily(4) 				' use ST Mono font
158fc                 | ' v.setfontfamily(font) 				' use ST Mono font
158fc                 | ' v.setleadingspaces(2)
158fc                 | ' mount "/sd", _vfs_open_sdcard()
158fc                 | ' chdir "/sd/bas"
158fc                 | ' 
158fc                 | ' currentdir$="/sd/bas"
158fc                 | ' 
158fc                 | ' position 2*editor_spaces,1 : print ver$
158fc     00 12 06 F6 | 	mov	arg01, #0
15900     C0 87 B0 FD | 	call	#__system___getiolock_0417
15904     FD 12 02 F6 | 	mov	arg01, result1
15908     BC 2F B0 FD | 	call	#__system___lockmem
1590c     10 00 00 FF 
15910     10 EB 05 F1 | 	add	ptr__dat__, ##8464
15914     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
15918     10 00 00 FF 
1591c     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
15920     00 12 06 F6 | 	mov	arg01, #0
15924     00 16 06 F6 | 	mov	arg03, #0
15928     8C 3C B0 FD | 	call	#__system___basic_print_string
1592c     00 12 06 F6 | 	mov	arg01, #0
15930     0A 14 06 F6 | 	mov	arg02, #10
15934     00 16 06 F6 | 	mov	arg03, #0
15938     24 3C B0 FD | 	call	#__system___basic_print_char
1593c     00 12 06 F6 | 	mov	arg01, #0
15940     80 87 B0 FD | 	call	#__system___getiolock_0417
15944     FD 00 68 FC | 	wrlong	#0, result1
15948     F2 12 02 FB | 	rdlong	arg01, objptr
1594c     00 14 06 F6 | 	mov	arg02, #0
15950     0A 16 06 F6 | 	mov	arg03, #10
15954     74 51 B0 FD | 	call	#__system__Number_S
15958     FD 12 02 F6 | 	mov	arg01, result1
1595c     43 01 00 FF 
15960     2B 15 06 F6 | 	mov	arg02, ##@LR__4667
15964     BC 2F B0 FD | 	call	#__system___string_concat
15968     FD 20 02 F6 | 	mov	local02, result1
1596c     78 00 00 FF 
15970     B0 E5 05 F1 | 	add	objptr, ##61872
15974     F2 20 62 FC | 	wrlong	local02, objptr
15978     78 00 00 FF 
1597c     B0 E5 85 F1 | 	sub	objptr, ##61872
15980                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
15980     00 12 06 F6 | 	mov	arg01, #0
15984     3C 87 B0 FD | 	call	#__system___getiolock_0417
15988     FD 12 02 F6 | 	mov	arg01, result1
1598c     38 2F B0 FD | 	call	#__system___lockmem
15990     78 00 00 FF 
15994     B0 E5 05 F1 | 	add	objptr, ##61872
15998     F2 14 02 FB | 	rdlong	arg02, objptr
1599c     78 00 00 FF 
159a0     B0 E5 85 F1 | 	sub	objptr, ##61872
159a4     00 12 06 F6 | 	mov	arg01, #0
159a8     00 16 06 F6 | 	mov	arg03, #0
159ac     08 3C B0 FD | 	call	#__system___basic_print_string
159b0     00 12 06 F6 | 	mov	arg01, #0
159b4     0A 14 06 F6 | 	mov	arg02, #10
159b8     00 16 06 F6 | 	mov	arg03, #0
159bc     A0 3B B0 FD | 	call	#__system___basic_print_char
159c0     00 12 06 F6 | 	mov	arg01, #0
159c4     FC 86 B0 FD | 	call	#__system___getiolock_0417
159c8     FD 00 68 FC | 	wrlong	#0, result1
159cc     56 00 00 FF 
159d0     08 E4 05 F1 | 	add	objptr, ##44040
159d4     F2 12 02 FB | 	rdlong	arg01, objptr
159d8     56 00 00 FF 
159dc     08 E4 85 F1 | 	sub	objptr, ##44040
159e0     01 12 66 F0 | 	shl	arg01, #1
159e4     04 14 06 F6 | 	mov	arg02, #4
159e8     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
159ec                 | ' position 2*editor_spaces,4 : print "Ready"
159ec     00 12 06 F6 | 	mov	arg01, #0
159f0     D0 86 B0 FD | 	call	#__system___getiolock_0417
159f4     FD 12 02 F6 | 	mov	arg01, result1
159f8     CC 2E B0 FD | 	call	#__system___lockmem
159fc     43 01 00 FF 
15a00     3D 15 06 F6 | 	mov	arg02, ##@LR__4668
15a04     00 12 06 F6 | 	mov	arg01, #0
15a08     00 16 06 F6 | 	mov	arg03, #0
15a0c     A8 3B B0 FD | 	call	#__system___basic_print_string
15a10     FD 22 02 F6 | 	mov	local03, result1
15a14     00 12 06 F6 | 	mov	arg01, #0
15a18     0A 14 06 F6 | 	mov	arg02, #10
15a1c     00 16 06 F6 | 	mov	arg03, #0
15a20     3C 3B B0 FD | 	call	#__system___basic_print_char
15a24     01 24 06 F6 | 	mov	local04, #1
15a28     00 12 06 F6 | 	mov	arg01, #0
15a2c     94 86 B0 FD | 	call	#__system___getiolock_0417
15a30     FD 00 68 FC | 	wrlong	#0, result1
15a34     00 26 06 F6 | 	mov	local05, #0
15a38     00 14 06 F6 | 	mov	arg02, #0
15a3c     01 14 D6 F7 | 	test	arg02, #1 wc
15a40     5A 4C 64 FD | 	drvc	#38
15a44     01 14 D6 F7 | 	test	arg02, #1 wc
15a48     5A 4E 64 FD | 	drvc	#39
15a4c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
15a4c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
15a4c                 | ' 
15a4c                 | ' '-------------------------------------------------------------------------------------------------------- 
15a4c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
15a4c                 | ' '--------------------------------------------------------------------------------------------------------
15a4c                 | ' 
15a4c                 | ' do
15a4c                 | LR__1700
15a4c     01 12 06 F6 | 	mov	arg01, #1
15a50     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
15a54     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
15a58     64 00 00 FF 
15a5c     48 E4 05 F1 | 	add	objptr, ##51272
15a60     F2 FA 61 FC | 	wrlong	result1, objptr
15a64                 | '   return hkbd_led_rep
15a64     13 00 00 FF 
15a68     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
15a6c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
15a70     13 00 00 FF 
15a74     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
15a78     16 00 00 FF 
15a7c     14 E4 05 F1 | 	add	objptr, ##11284
15a80     F2 FA 61 FC | 	wrlong	result1, objptr
15a84                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
15a84     16 00 00 FF 
15a88     14 E4 85 F1 | 	sub	objptr, ##11284
15a8c     F2 20 02 FB | 	rdlong	local02, objptr
15a90     64 00 00 FF 
15a94     48 E4 85 F1 | 	sub	objptr, ##51272
15a98     01 20 16 F2 | 	cmp	local02, #1 wc
15a9c     BC 00 90 CD |  if_b	jmp	#LR__1701
15aa0     64 00 00 FF 
15aa4     48 E4 05 F1 | 	add	objptr, ##51272
15aa8     F2 24 02 FB | 	rdlong	local04, objptr
15aac     64 00 00 FF 
15ab0     48 E4 85 F1 | 	sub	objptr, ##51272
15ab4     12 23 02 F6 | 	mov	local03, local04
15ab8     04 22 16 F2 | 	cmp	local03, #4 wc
15abc     9C 00 90 3D |  if_ae	jmp	#LR__1701
15ac0     78 00 00 FF 
15ac4     B4 E5 05 F1 | 	add	objptr, ##61876
15ac8     F2 1E 02 FB | 	rdlong	local01, objptr
15acc     78 00 00 FF 
15ad0     B4 E5 85 F1 | 	sub	objptr, ##61876
15ad4     0F 27 02 F6 | 	mov	local05, local01
15ad8     01 26 0E F2 | 	cmp	local05, #1 wz
15adc     7C 00 90 5D |  if_ne	jmp	#LR__1701
15ae0     04 00 00 FF 
15ae4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
15ae8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
15aec     04 00 00 FF 
15af0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
15af4     56 00 00 FF 
15af8     44 22 06 F6 | 	mov	local03, ##44100
15afc     0E 24 C6 F9 | 	decod	local04, #14
15b00     00 26 06 F6 | 	mov	local05, #0
15b04     03 00 00 FF 
15b08     DE 1E 06 F6 | 	mov	local01, ##1758
15b0c     07 12 06 F6 | 	mov	arg01, #7
15b10     56 00 00 FF 
15b14     44 16 06 F6 | 	mov	arg03, ##44100
15b18     0E 18 C6 F9 | 	decod	arg04, #14
15b1c     00 1A 06 F6 | 	mov	arg05, #0
15b20     03 00 00 FF 
15b24     DE 1C 06 F6 | 	mov	arg06, ##1758
15b28     0B 00 00 FF 
15b2c     C0 E4 05 F1 | 	add	objptr, ##5824
15b30     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15b34     0B 00 00 FF 
15b38     C0 E4 85 F1 | 	sub	objptr, ##5824
15b3c     0A 12 06 F6 | 	mov	arg01, #10
15b40     78 30 B0 FD | 	call	#__system___waitms
15b44     07 12 06 F6 | 	mov	arg01, #7
15b48     0B 00 00 FF 
15b4c     C0 E4 05 F1 | 	add	objptr, ##5824
15b50     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
15b54     0B 00 00 FF 
15b58     C0 E4 85 F1 | 	sub	objptr, ##5824
15b5c                 | LR__1701
15b5c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
15b5c     64 00 00 FF 
15b60     48 E4 05 F1 | 	add	objptr, ##51272
15b64     F2 20 02 FB | 	rdlong	local02, objptr
15b68     64 00 00 FF 
15b6c     48 E4 85 F1 | 	sub	objptr, ##51272
15b70     04 20 16 F2 | 	cmp	local02, #4 wc
15b74     80 00 90 CD |  if_b	jmp	#LR__1702
15b78     64 00 00 FF 
15b7c     48 E4 05 F1 | 	add	objptr, ##51272
15b80     F2 24 02 FB | 	rdlong	local04, objptr
15b84     64 00 00 FF 
15b88     48 E4 85 F1 | 	sub	objptr, ##51272
15b8c     12 23 02 F6 | 	mov	local03, local04
15b90     00 00 40 FF 
15b94     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
15b98     64 00 00 CF 
15b9c     48 E4 05 C1 |  if_b	add	objptr, ##51272
15ba0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
15ba4     64 00 00 CF 
15ba8     48 E4 85 C1 |  if_b	sub	objptr, ##51272
15bac     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
15bb0     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
15bb4     40 00 90 3D |  if_ae	jmp	#LR__1702
15bb8     64 00 00 FF 
15bbc     48 E4 05 F1 | 	add	objptr, ##51272
15bc0     F2 20 02 FB | 	rdlong	local02, objptr
15bc4     04 E4 05 F1 | 	add	objptr, #4
15bc8     F2 20 62 FC | 	wrlong	local02, objptr
15bcc     16 00 00 FF 
15bd0     14 E4 05 F1 | 	add	objptr, ##11284
15bd4     F2 02 68 FC | 	wrlong	#1, objptr
15bd8     16 00 00 FF 
15bdc     14 E4 85 F1 | 	sub	objptr, ##11284
15be0     F2 20 02 FB | 	rdlong	local02, objptr
15be4     16 00 00 FF 
15be8     18 E4 05 F1 | 	add	objptr, ##11288
15bec     F2 20 62 FC | 	wrlong	local02, objptr
15bf0     7A 00 00 FF 
15bf4     64 E4 85 F1 | 	sub	objptr, ##62564
15bf8                 | LR__1702
15bf8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
15bf8     64 00 00 FF 
15bfc     48 E4 05 F1 | 	add	objptr, ##51272
15c00     F2 20 02 FB | 	rdlong	local02, objptr
15c04     64 00 00 FF 
15c08     48 E4 85 F1 | 	sub	objptr, ##51272
15c0c     00 00 40 FF 
15c10     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
15c14     7A 00 00 3F 
15c18     68 E4 05 31 |  if_ae	add	objptr, ##62568
15c1c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
15c20     08 E4 85 31 |  if_ae	sub	objptr, #8
15c24     F2 00 68 3C |  if_ae	wrlong	#0, objptr
15c28     7A 00 00 3F 
15c2c     60 E4 85 31 |  if_ae	sub	objptr, ##62560
15c30                 | ' if key=0 andalso rpt=1 then rptcnt+=1
15c30     64 00 00 FF 
15c34     48 E4 05 F1 | 	add	objptr, ##51272
15c38     F2 20 0A FB | 	rdlong	local02, objptr wz
15c3c     64 00 00 FF 
15c40     48 E4 85 F1 | 	sub	objptr, ##51272
15c44     7A 00 00 AF 
15c48     60 E4 05 A1 |  if_e	add	objptr, ##62560
15c4c     F2 24 02 AB |  if_e	rdlong	local04, objptr
15c50     7A 00 00 AF 
15c54     60 E4 85 A1 |  if_e	sub	objptr, ##62560
15c58     12 23 02 A6 |  if_e	mov	local03, local04
15c5c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
15c60     7A 00 00 AF 
15c64     68 E4 05 A1 |  if_e	add	objptr, ##62568
15c68     F2 20 02 AB |  if_e	rdlong	local02, objptr
15c6c     01 20 06 A1 |  if_e	add	local02, #1
15c70     F2 20 62 AC |  if_e	wrlong	local02, objptr
15c74     7A 00 00 AF 
15c78     68 E4 85 A1 |  if_e	sub	objptr, ##62568
15c7c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
15c7c     64 00 00 FF 
15c80     48 E4 05 F1 | 	add	objptr, ##51272
15c84     F2 20 02 FB | 	rdlong	local02, objptr
15c88     64 00 00 FF 
15c8c     48 E4 85 F1 | 	sub	objptr, ##51272
15c90     00 00 40 FF 
15c94     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
15c98     44 00 90 3D |  if_ae	jmp	#LR__1704
15c9c     7A 00 00 FF 
15ca0     68 E4 05 F1 | 	add	objptr, ##62568
15ca4     F2 20 02 FB | 	rdlong	local02, objptr
15ca8     7A 00 00 FF 
15cac     68 E4 85 F1 | 	sub	objptr, ##62568
15cb0     19 20 0E F2 | 	cmp	local02, #25 wz
15cb4     28 00 90 5D |  if_ne	jmp	#LR__1703
15cb8     64 00 00 FF 
15cbc     4C E4 05 F1 | 	add	objptr, ##51276
15cc0     F2 20 02 FB | 	rdlong	local02, objptr
15cc4     16 00 00 FF 
15cc8     18 E4 05 F1 | 	add	objptr, ##11288
15ccc     F2 20 62 FC | 	wrlong	local02, objptr
15cd0     04 E4 05 F1 | 	add	objptr, #4
15cd4     F2 2A 68 FC | 	wrlong	#21, objptr
15cd8     7A 00 00 FF 
15cdc     68 E4 85 F1 | 	sub	objptr, ##62568
15ce0                 | LR__1703
15ce0                 | LR__1704
15ce0                 | ' 
15ce0                 | ' 
15ce0                 | ' if key3<>0 then
15ce0     7A 00 00 FF 
15ce4     64 E4 05 F1 | 	add	objptr, ##62564
15ce8     F2 28 0A FB | 	rdlong	local06, objptr wz
15cec     7A 00 00 FF 
15cf0     64 E4 85 F1 | 	sub	objptr, ##62564
15cf4     54 FD 9F AD |  if_e	jmp	#LR__1700
15cf8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
15cf8     78 00 00 FF 
15cfc     B4 E5 05 F1 | 	add	objptr, ##61876
15d00     F2 20 02 FB | 	rdlong	local02, objptr
15d04     78 00 00 FF 
15d08     B4 E5 85 F1 | 	sub	objptr, ##61876
15d0c     01 20 0E F2 | 	cmp	local02, #1 wz
15d10     50 00 90 5D |  if_ne	jmp	#LR__1705
15d14     7A 00 00 FF 
15d18     58 E4 05 F1 | 	add	objptr, ##62552
15d1c     F2 14 02 FB | 	rdlong	arg02, objptr
15d20     56 00 00 FF 
15d24     44 22 06 F6 | 	mov	local03, ##44100
15d28     0E 24 C6 F9 | 	decod	local04, #14
15d2c     04 E4 85 F1 | 	sub	objptr, #4
15d30     F2 26 02 FB | 	rdlong	local05, objptr
15d34     01 1E 66 F6 | 	neg	local01, #1
15d38     07 12 06 F6 | 	mov	arg01, #7
15d3c     56 00 00 FF 
15d40     44 16 06 F6 | 	mov	arg03, ##44100
15d44     0E 18 C6 F9 | 	decod	arg04, #14
15d48     13 1B 02 F6 | 	mov	arg05, local05
15d4c     01 1C 66 F6 | 	neg	arg06, #1
15d50     6E 00 00 FF 
15d54     94 E5 85 F1 | 	sub	objptr, ##56724
15d58     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
15d5c     0B 00 00 FF 
15d60     C0 E4 85 F1 | 	sub	objptr, ##5824
15d64                 | LR__1705
15d64     7A 00 00 FF 
15d68     64 E4 05 F1 | 	add	objptr, ##62564
15d6c     F2 12 02 FB | 	rdlong	arg01, objptr
15d70     7A 00 00 FF 
15d74     64 E4 85 F1 | 	sub	objptr, ##62564
15d78     3C F8 BF FD | 	call	#_scantochar
15d7c     7A 00 00 FF 
15d80     6C E4 05 F1 | 	add	objptr, ##62572
15d84     F2 FA 61 FC | 	wrlong	result1, objptr
15d88                 | '   if leds and 2 = 2 then 
15d88     10 E4 85 F1 | 	sub	objptr, #16
15d8c     F2 20 0A FB | 	rdlong	local02, objptr wz
15d90     7A 00 00 FF 
15d94     5C E4 85 F1 | 	sub	objptr, ##62556
15d98     68 01 90 AD |  if_e	jmp	#LR__1713
15d9c                 | '     if key4>96 andalso key4<123 then
15d9c     7A 00 00 FF 
15da0     6C E4 05 F1 | 	add	objptr, ##62572
15da4     F2 20 02 FB | 	rdlong	local02, objptr
15da8     7A 00 00 FF 
15dac     6C E4 85 F1 | 	sub	objptr, ##62572
15db0     61 20 56 F2 | 	cmps	local02, #97 wc
15db4     40 00 90 CD |  if_b	jmp	#LR__1706
15db8     7A 00 00 FF 
15dbc     6C E4 05 F1 | 	add	objptr, ##62572
15dc0     F2 24 02 FB | 	rdlong	local04, objptr
15dc4     7A 00 00 FF 
15dc8     6C E4 85 F1 | 	sub	objptr, ##62572
15dcc     12 23 02 F6 | 	mov	local03, local04
15dd0     7B 22 56 F2 | 	cmps	local03, #123 wc
15dd4     20 00 90 3D |  if_ae	jmp	#LR__1706
15dd8     7A 00 00 FF 
15ddc     6C E4 05 F1 | 	add	objptr, ##62572
15de0     F2 20 02 FB | 	rdlong	local02, objptr
15de4     20 20 86 F1 | 	sub	local02, #32
15de8     F2 20 62 FC | 	wrlong	local02, objptr
15dec     7A 00 00 FF 
15df0     6C E4 85 F1 | 	sub	objptr, ##62572
15df4     0C 01 90 FD | 	jmp	#LR__1712
15df8                 | LR__1706
15df8     7A 00 00 FF 
15dfc     6C E4 05 F1 | 	add	objptr, ##62572
15e00     F2 20 02 FB | 	rdlong	local02, objptr
15e04     7A 00 00 FF 
15e08     6C E4 85 F1 | 	sub	objptr, ##62572
15e0c     41 20 56 F2 | 	cmps	local02, #65 wc
15e10     40 00 90 CD |  if_b	jmp	#LR__1707
15e14     7A 00 00 FF 
15e18     6C E4 05 F1 | 	add	objptr, ##62572
15e1c     F2 24 02 FB | 	rdlong	local04, objptr
15e20     7A 00 00 FF 
15e24     6C E4 85 F1 | 	sub	objptr, ##62572
15e28     12 23 02 F6 | 	mov	local03, local04
15e2c     5B 22 56 F2 | 	cmps	local03, #91 wc
15e30     20 00 90 3D |  if_ae	jmp	#LR__1707
15e34     7A 00 00 FF 
15e38     6C E4 05 F1 | 	add	objptr, ##62572
15e3c     F2 20 02 FB | 	rdlong	local02, objptr
15e40     20 20 06 F1 | 	add	local02, #32
15e44     F2 20 62 FC | 	wrlong	local02, objptr
15e48     7A 00 00 FF 
15e4c     6C E4 85 F1 | 	sub	objptr, ##62572
15e50     B0 00 90 FD | 	jmp	#LR__1711
15e54                 | LR__1707
15e54     7A 00 00 FF 
15e58     6C E4 05 F1 | 	add	objptr, ##62572
15e5c     F2 20 02 FB | 	rdlong	local02, objptr
15e60     7A 00 00 FF 
15e64     6C E4 85 F1 | 	sub	objptr, ##62572
15e68     17 20 56 F2 | 	cmps	local02, #23 wc
15e6c     40 00 90 CD |  if_b	jmp	#LR__1708
15e70     7A 00 00 FF 
15e74     6C E4 05 F1 | 	add	objptr, ##62572
15e78     F2 24 02 FB | 	rdlong	local04, objptr
15e7c     7A 00 00 FF 
15e80     6C E4 85 F1 | 	sub	objptr, ##62572
15e84     12 23 02 F6 | 	mov	local03, local04
15e88     20 22 56 F2 | 	cmps	local03, #32 wc
15e8c     20 00 90 3D |  if_ae	jmp	#LR__1708
15e90     7A 00 00 FF 
15e94     6C E4 05 F1 | 	add	objptr, ##62572
15e98     F2 20 02 FB | 	rdlong	local02, objptr
15e9c     09 20 86 F1 | 	sub	local02, #9
15ea0     F2 20 62 FC | 	wrlong	local02, objptr
15ea4     7A 00 00 FF 
15ea8     6C E4 85 F1 | 	sub	objptr, ##62572
15eac     54 00 90 FD | 	jmp	#LR__1710
15eb0                 | LR__1708
15eb0     7A 00 00 FF 
15eb4     6C E4 05 F1 | 	add	objptr, ##62572
15eb8     F2 20 02 FB | 	rdlong	local02, objptr
15ebc     7A 00 00 FF 
15ec0     6C E4 85 F1 | 	sub	objptr, ##62572
15ec4     0E 20 56 F2 | 	cmps	local02, #14 wc
15ec8     38 00 90 CD |  if_b	jmp	#LR__1709
15ecc     7A 00 00 FF 
15ed0     6C E4 05 F1 | 	add	objptr, ##62572
15ed4     F2 24 02 FB | 	rdlong	local04, objptr
15ed8     7A 00 00 FF 
15edc     6C E4 85 F1 | 	sub	objptr, ##62572
15ee0     12 23 02 F6 | 	mov	local03, local04
15ee4     17 22 56 F2 | 	cmps	local03, #23 wc
15ee8     7A 00 00 CF 
15eec     6C E4 05 C1 |  if_b	add	objptr, ##62572
15ef0     F2 20 02 CB |  if_b	rdlong	local02, objptr
15ef4     27 20 06 C1 |  if_b	add	local02, #39
15ef8     F2 20 62 CC |  if_b	wrlong	local02, objptr
15efc     7A 00 00 CF 
15f00     6C E4 85 C1 |  if_b	sub	objptr, ##62572
15f04                 | LR__1709
15f04                 | LR__1710
15f04                 | LR__1711
15f04                 | LR__1712
15f04                 | LR__1713
15f04                 | '  
15f04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
15f04     7A 00 00 FF 
15f08     6C E4 05 F1 | 	add	objptr, ##62572
15f0c     F2 20 02 FB | 	rdlong	local02, objptr
15f10     7A 00 00 FF 
15f14     6C E4 85 F1 | 	sub	objptr, ##62572
15f18     01 20 56 F2 | 	cmps	local02, #1 wc
15f1c     90 00 90 CD |  if_b	jmp	#LR__1714
15f20     7A 00 00 FF 
15f24     6C E4 05 F1 | 	add	objptr, ##62572
15f28     F2 24 02 FB | 	rdlong	local04, objptr
15f2c     7A 00 00 FF 
15f30     6C E4 85 F1 | 	sub	objptr, ##62572
15f34     12 23 02 F6 | 	mov	local03, local04
15f38     7F 22 56 F2 | 	cmps	local03, #127 wc
15f3c     38 E4 05 C1 |  if_b	add	objptr, #56
15f40     F2 1E E2 CA |  if_b	rdword	local01, objptr
15f44     38 E4 85 C1 |  if_b	sub	objptr, #56
15f48     0F 27 32 C9 |  if_b	getword	local05, local01, #0
15f4c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
15f50     5C 00 90 3D |  if_ae	jmp	#LR__1714
15f54     7A 00 00 FF 
15f58     6C E4 05 F1 | 	add	objptr, ##62572
15f5c     F2 12 02 FB | 	rdlong	arg01, objptr
15f60     7A 00 00 FF 
15f64     6C E4 85 F1 | 	sub	objptr, ##62572
15f68     2C 4B B0 FD | 	call	#__system__Chr_S
15f6c     FD 2A 02 F6 | 	mov	local07, result1
15f70     55 00 00 FF 
15f74     F0 E5 05 F1 | 	add	objptr, ##44016
15f78     F2 12 02 FB | 	rdlong	arg01, objptr
15f7c     55 00 00 FF 
15f80     F0 E5 85 F1 | 	sub	objptr, ##44016
15f84     15 15 02 F6 | 	mov	arg02, local07
15f88     98 29 B0 FD | 	call	#__system___string_concat
15f8c     55 00 00 FF 
15f90     F0 E5 05 F1 | 	add	objptr, ##44016
15f94     F2 FA 61 FC | 	wrlong	result1, objptr
15f98     24 00 00 FF 
15f9c     7C E4 05 F1 | 	add	objptr, ##18556
15fa0     F2 12 02 FB | 	rdlong	arg01, objptr
15fa4     7A 00 00 FF 
15fa8     6C E4 85 F1 | 	sub	objptr, ##62572
15fac     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
15fb0                 | LR__1714
15fb0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
15fb0     7A 00 00 FF 
15fb4     6C E4 05 F1 | 	add	objptr, ##62572
15fb8     F2 20 02 FB | 	rdlong	local02, objptr
15fbc     7A 00 00 FF 
15fc0     6C E4 85 F1 | 	sub	objptr, ##62572
15fc4     01 20 56 F2 | 	cmps	local02, #1 wc
15fc8     D0 00 90 CD |  if_b	jmp	#LR__1715
15fcc     7A 00 00 FF 
15fd0     6C E4 05 F1 | 	add	objptr, ##62572
15fd4     F2 24 02 FB | 	rdlong	local04, objptr
15fd8     7A 00 00 FF 
15fdc     6C E4 85 F1 | 	sub	objptr, ##62572
15fe0     12 23 02 F6 | 	mov	local03, local04
15fe4     7F 22 56 F2 | 	cmps	local03, #127 wc
15fe8     B0 00 90 3D |  if_ae	jmp	#LR__1715
15fec     38 E4 05 F1 | 	add	objptr, #56
15ff0     F2 1E E2 FA | 	rdword	local01, objptr
15ff4     38 E4 85 F1 | 	sub	objptr, #56
15ff8     0F 27 32 F9 | 	getword	local05, local01, #0
15ffc     FE 26 0E F2 | 	cmp	local05, #254 wz
16000     78 00 00 AF 
16004     B4 E5 05 A1 |  if_e	add	objptr, ##61876
16008     F2 2C 02 AB |  if_e	rdlong	local08, objptr
1600c     78 00 00 AF 
16010     B4 E5 85 A1 |  if_e	sub	objptr, ##61876
16014     16 2F 02 A6 |  if_e	mov	local09, local08
16018     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1601c     7C 00 90 5D |  if_ne	jmp	#LR__1715
16020     04 00 00 FF 
16024     94 EA 05 F1 | 	add	ptr__dat__, ##2196
16028     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1602c     04 00 00 FF 
16030     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
16034     56 00 00 FF 
16038     44 22 06 F6 | 	mov	local03, ##44100
1603c     0E 24 C6 F9 | 	decod	local04, #14
16040     00 26 06 F6 | 	mov	local05, #0
16044     03 00 00 FF 
16048     DE 1E 06 F6 | 	mov	local01, ##1758
1604c     07 12 06 F6 | 	mov	arg01, #7
16050     56 00 00 FF 
16054     44 16 06 F6 | 	mov	arg03, ##44100
16058     0E 18 C6 F9 | 	decod	arg04, #14
1605c     00 1A 06 F6 | 	mov	arg05, #0
16060     03 00 00 FF 
16064     DE 1C 06 F6 | 	mov	arg06, ##1758
16068     0B 00 00 FF 
1606c     C0 E4 05 F1 | 	add	objptr, ##5824
16070     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16074     0B 00 00 FF 
16078     C0 E4 85 F1 | 	sub	objptr, ##5824
1607c     2C 13 06 F6 | 	mov	arg01, #300
16080     38 2B B0 FD | 	call	#__system___waitms
16084     07 12 06 F6 | 	mov	arg01, #7
16088     0B 00 00 FF 
1608c     C0 E4 05 F1 | 	add	objptr, ##5824
16090     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16094     0B 00 00 FF 
16098     C0 E4 85 F1 | 	sub	objptr, ##5824
1609c                 | LR__1715
1609c                 | '  
1609c                 | '   'tab
1609c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1609c     7A 00 00 FF 
160a0     64 E4 05 F1 | 	add	objptr, ##62564
160a4     F2 20 02 FB | 	rdlong	local02, objptr
160a8     7A 00 00 FF 
160ac     64 E4 85 F1 | 	sub	objptr, ##62564
160b0     10 21 E2 F8 | 	getbyte	local02, local02, #0
160b4     2B 20 0E F2 | 	cmp	local02, #43 wz
160b8     B4 00 90 5D |  if_ne	jmp	#LR__1716
160bc     38 E4 05 F1 | 	add	objptr, #56
160c0     F2 24 E2 FA | 	rdword	local04, objptr
160c4     38 E4 85 F1 | 	sub	objptr, #56
160c8     12 23 32 F9 | 	getword	local03, local04, #0
160cc     F0 22 16 F2 | 	cmp	local03, #240 wc
160d0     9C 00 90 CD |  if_b	jmp	#LR__1716
160d4     78 00 00 FF 
160d8     B4 E5 05 F1 | 	add	objptr, ##61876
160dc     F2 1E 02 FB | 	rdlong	local01, objptr
160e0     78 00 00 FF 
160e4     B4 E5 85 F1 | 	sub	objptr, ##61876
160e8     0F 27 02 F6 | 	mov	local05, local01
160ec     01 26 0E F2 | 	cmp	local05, #1 wz
160f0     7C 00 90 5D |  if_ne	jmp	#LR__1716
160f4     04 00 00 FF 
160f8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
160fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16100     04 00 00 FF 
16104     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
16108     56 00 00 FF 
1610c     44 22 06 F6 | 	mov	local03, ##44100
16110     0E 24 C6 F9 | 	decod	local04, #14
16114     00 26 06 F6 | 	mov	local05, #0
16118     03 00 00 FF 
1611c     DE 1E 06 F6 | 	mov	local01, ##1758
16120     00 12 06 F6 | 	mov	arg01, #0
16124     56 00 00 FF 
16128     44 16 06 F6 | 	mov	arg03, ##44100
1612c     0E 18 C6 F9 | 	decod	arg04, #14
16130     00 1A 06 F6 | 	mov	arg05, #0
16134     03 00 00 FF 
16138     DE 1C 06 F6 | 	mov	arg06, ##1758
1613c     0B 00 00 FF 
16140     C0 E4 05 F1 | 	add	objptr, ##5824
16144     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
16148     0B 00 00 FF 
1614c     C0 E4 85 F1 | 	sub	objptr, ##5824
16150     2C 13 06 F6 | 	mov	arg01, #300
16154     64 2A B0 FD | 	call	#__system___waitms
16158     00 12 06 F6 | 	mov	arg01, #0
1615c     0B 00 00 FF 
16160     C0 E4 05 F1 | 	add	objptr, ##5824
16164     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
16168     0B 00 00 FF 
1616c     C0 E4 85 F1 | 	sub	objptr, ##5824
16170                 | LR__1716
16170                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
16170     7A 00 00 FF 
16174     64 E4 05 F1 | 	add	objptr, ##62564
16178     F2 20 02 FB | 	rdlong	local02, objptr
1617c     7A 00 00 FF 
16180     64 E4 85 F1 | 	sub	objptr, ##62564
16184     10 21 E2 F8 | 	getbyte	local02, local02, #0
16188     2B 20 0E F2 | 	cmp	local02, #43 wz
1618c     AC 00 90 5D |  if_ne	jmp	#LR__1719
16190     38 E4 05 F1 | 	add	objptr, #56
16194     F2 24 E2 FA | 	rdword	local04, objptr
16198     38 E4 85 F1 | 	sub	objptr, #56
1619c     12 23 32 F9 | 	getword	local03, local04, #0
161a0     F0 22 16 F2 | 	cmp	local03, #240 wc
161a4     94 00 90 3D |  if_ae	jmp	#LR__1719
161a8     38 E4 05 F1 | 	add	objptr, #56
161ac     F2 20 E2 FA | 	rdword	local02, objptr
161b0     10 23 52 F6 | 	abs	local03, local02 wc
161b4     11 23 42 F8 | 	getnib	local03, local03, #0
161b8     11 23 82 F6 | 	negc	local03, local03
161bc     11 25 52 F6 | 	abs	local04, local03 wc
161c0     01 24 46 F0 | 	shr	local04, #1
161c4     12 25 82 F6 | 	negc	local04, local04
161c8     7A 00 00 FF 
161cc     38 E4 05 F1 | 	add	objptr, ##62520
161d0     F2 24 62 FC | 	wrlong	local04, objptr
161d4     12 31 02 F6 | 	mov	local10, local04
161d8     7A 00 00 FF 
161dc     70 E4 85 F1 | 	sub	objptr, ##62576
161e0                 | LR__1717
161e0     08 30 56 F2 | 	cmps	local10, #8 wc
161e4     54 00 90 3D |  if_ae	jmp	#LR__1718
161e8     55 00 00 FF 
161ec     F0 E5 05 F1 | 	add	objptr, ##44016
161f0     F2 12 02 FB | 	rdlong	arg01, objptr
161f4     55 00 00 FF 
161f8     F0 E5 85 F1 | 	sub	objptr, ##44016
161fc     43 01 00 FF 
16200     43 25 06 F6 | 	mov	local04, ##@LR__4669
16204     12 15 02 F6 | 	mov	arg02, local04
16208     18 27 B0 FD | 	call	#__system___string_concat
1620c     55 00 00 FF 
16210     F0 E5 05 F1 | 	add	objptr, ##44016
16214     F2 FA 61 FC | 	wrlong	result1, objptr
16218     55 00 00 FF 
1621c     F0 E5 85 F1 | 	sub	objptr, ##44016
16220     43 01 00 FF 
16224     45 13 06 F6 | 	mov	arg01, ##@LR__4670
16228     74 16 B0 FD | 	call	#_hg010b_spin2_write
1622c     18 23 02 F6 | 	mov	local03, local10
16230     01 22 06 F1 | 	add	local03, #1
16234     11 31 02 F6 | 	mov	local10, local03
16238     A4 FF 9F FD | 	jmp	#LR__1717
1623c                 | LR__1718
1623c                 | LR__1719
1623c                 | '  
1623c                 | '   'backspace
1623c                 | '   if (key3 and 255) = 42 then 
1623c     7A 00 00 FF 
16240     64 E4 05 F1 | 	add	objptr, ##62564
16244     F2 20 02 FB | 	rdlong	local02, objptr
16248     7A 00 00 FF 
1624c     64 E4 85 F1 | 	sub	objptr, ##62564
16250     10 21 E2 F8 | 	getbyte	local02, local02, #0
16254     2A 20 0E F2 | 	cmp	local02, #42 wz
16258     D4 00 90 5D |  if_ne	jmp	#LR__1724
1625c                 | '       if v.cursor_x>4 then 
1625c     38 E4 05 F1 | 	add	objptr, #56
16260     F2 20 E2 FA | 	rdword	local02, objptr
16264     38 E4 85 F1 | 	sub	objptr, #56
16268     05 20 16 F2 | 	cmp	local02, #5 wc
1626c     9C 00 90 CD |  if_b	jmp	#LR__1722
16270     55 00 00 FF 
16274     F0 E5 05 F1 | 	add	objptr, ##44016
16278     F2 26 02 FB | 	rdlong	local05, objptr
1627c     55 00 00 FF 
16280     F0 E5 85 F1 | 	sub	objptr, ##44016
16284     13 13 02 F6 | 	mov	arg01, local05
16288     09 33 02 F6 | 	mov	local11, arg01
1628c     97 06 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
16290                 | LR__1720
16290     19 FB C9 FA | 	rdbyte	result1, local11 wz
16294     01 32 06 51 |  if_ne	add	local11, #1
16298     F4 FF 9F 5D |  if_ne	jmp	#LR__1720
1629c                 | LR__1721
1629c     09 33 82 F1 | 	sub	local11, arg01
162a0     19 15 02 F6 | 	mov	arg02, local11
162a4     01 14 86 F1 | 	sub	arg02, #1
162a8     13 13 02 F6 | 	mov	arg01, local05
162ac     24 46 B0 FD | 	call	#__system__Left_S
162b0     55 00 00 FF 
162b4     F0 E5 05 F1 | 	add	objptr, ##44016
162b8     F2 FA 61 FC | 	wrlong	result1, objptr
162bc     55 00 00 FF 
162c0     B8 E5 85 F1 | 	sub	objptr, ##43960
162c4     F2 12 E2 FA | 	rdword	arg01, objptr
162c8     02 12 86 F1 | 	sub	arg01, #2
162cc     02 E4 05 F1 | 	add	objptr, #2
162d0     F2 14 C2 FA | 	rdbyte	arg02, objptr
162d4     3A E4 85 F1 | 	sub	objptr, #58
162d8     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
162dc     20 12 06 F6 | 	mov	arg01, #32
162e0     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
162e4     38 E4 05 F1 | 	add	objptr, #56
162e8     F2 12 E2 FA | 	rdword	arg01, objptr
162ec     02 12 86 F1 | 	sub	arg01, #2
162f0     02 E4 05 F1 | 	add	objptr, #2
162f4     F2 24 C2 FA | 	rdbyte	local04, objptr
162f8     3A E4 85 F1 | 	sub	objptr, #58
162fc     12 23 E2 F8 | 	getbyte	local03, local04, #0
16300     11 15 02 F6 | 	mov	arg02, local03
16304     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16308     24 00 90 FD | 	jmp	#LR__1723
1630c                 | LR__1722
1630c     43 01 00 FF 
16310     47 21 06 F6 | 	mov	local02, ##@LR__4671
16314     55 00 00 FF 
16318     F0 E5 05 F1 | 	add	objptr, ##44016
1631c     F2 20 62 FC | 	wrlong	local02, objptr
16320     55 00 00 FF 
16324     B8 E5 85 F1 | 	sub	objptr, ##43960
16328     F2 08 58 FC | 	wrword	#4, objptr
1632c     38 E4 85 F1 | 	sub	objptr, #56
16330                 | LR__1723
16330                 | LR__1724
16330                 | '    
16330                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
16330                 | '  
16330                 | '   if key4=key_enter then 
16330     7A 00 00 FF 
16334     6C E4 05 F1 | 	add	objptr, ##62572
16338     F2 28 02 FB | 	rdlong	local06, objptr
1633c     7A 00 00 FF 
16340     6C E4 85 F1 | 	sub	objptr, ##62572
16344     8D 28 0E F2 | 	cmp	local06, #141 wz
16348     50 00 90 5D |  if_ne	jmp	#LR__1725
1634c     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
16350     C8 A6 BE FD | 	call	#_interpret
16354     43 01 00 FF 
16358     48 21 06 F6 | 	mov	local02, ##@LR__4672
1635c     55 00 00 FF 
16360     F0 E5 05 F1 | 	add	objptr, ##44016
16364     F2 20 62 FC | 	wrlong	local02, objptr
16368     1A FA 61 FD | 	getct	result1
1636c     24 00 00 FF 
16370     84 E4 05 F1 | 	add	objptr, ##18564
16374     F2 24 02 FB | 	rdlong	local04, objptr
16378     12 23 02 F6 | 	mov	local03, local04
1637c     11 FB 81 F1 | 	sub	result1, local03
16380     F2 FA 61 FC | 	wrlong	result1, objptr
16384     14 E4 85 F1 | 	sub	objptr, #20
16388     F2 00 68 FC | 	wrlong	#0, objptr
1638c     08 E4 05 F1 | 	add	objptr, #8
16390     F2 00 68 FC | 	wrlong	#0, objptr
16394     7A 00 00 FF 
16398     68 E4 85 F1 | 	sub	objptr, ##62568
1639c                 | LR__1725
1639c     7A 00 00 FF 
163a0     64 E4 05 F1 | 	add	objptr, ##62564
163a4     F2 00 68 FC | 	wrlong	#0, objptr
163a8     7A 00 00 FF 
163ac     64 E4 85 F1 | 	sub	objptr, ##62564
163b0     98 F6 9F FD | 	jmp	#LR__1700
163b4     A7 F0 03 F6 | 	mov	ptra, fp
163b8     B2 00 A0 FD | 	call	#popregs_
163bc                 | _program_ret
163bc     2D 00 64 FD | 	ret
163c0                 | 
163c0                 | ' '' this is not a main program.
163c0                 | ' 
163c0                 | ' '****************************************************************************************************************
163c0                 | ' '                                                                                                             	*
163c0                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
163c0                 | ' '                                                                                                            	*
163c0                 | ' ' mode - mode #, see below											*
163c0                 | ' ' base - HDMI base pin												*
163c0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
163c0                 | ' '														*
163c0                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
163c0                 | ' '' set bit #15 for custom timings														*
163c0                 | ' '' p - 1 - psram, 0 - hub											*
163c0                 | ' '' t - 1 - graphics, 0 - text											*
163c0                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
163c0                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
163c0                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
163c0                 | ' '														*
163c0                 | ' '****************************************************************************************************************
163c0                 | ' 
163c0                 | ' pub start(base,mb):result |i
163c0                 | _hg010b_spin2_start
163c0                 | ' 
163c0                 | ' '--------------------------- initialize pointers and variables
163c0                 | ' 
163c0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
163c0     30 E4 05 F1 | 	add	objptr, #48
163c4     F2 FA 01 F6 | 	mov	result1, objptr
163c8     28 E4 85 F1 | 	sub	objptr, #40
163cc     F2 FA 61 FC | 	wrlong	result1, objptr
163d0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
163d0                 | ' hdmibase:=base							' HDMI base pin, 8*n
163d0     18 E4 05 F1 | 	add	objptr, #24
163d4     F2 12 62 FC | 	wrlong	arg01, objptr
163d8                 | ' mailbox_ptr:=mb		
163d8     04 E4 05 F1 | 	add	objptr, #4
163dc     F2 14 62 FC | 	wrlong	arg02, objptr
163e0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
163e0     C1 E5 05 F1 | 	add	objptr, #449
163e4     F2 14 62 FC | 	wrlong	arg02, objptr
163e8                 | ' sprite_ptr:=@spr1ptr
163e8     D8 E4 85 F1 | 	sub	objptr, #216
163ec     F2 FA 01 F6 | 	mov	result1, objptr
163f0     E5 E4 85 F1 | 	sub	objptr, #229
163f4     F2 FA 61 FC | 	wrlong	result1, objptr
163f8                 | ' 
163f8                 | ' 		'
163f8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
163f8     E5 E4 05 F1 | 	add	objptr, #229
163fc     F2 FA 01 FB | 	rdlong	result1, objptr
16400     D0 FA 05 F1 | 	add	result1, #208
16404     FD 10 58 FC | 	wrword	#8, result1
16408                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
16408     F2 16 02 FB | 	rdlong	arg03, objptr
1640c     D2 16 06 F1 | 	add	arg03, #210
16410     0B 21 58 FC | 	wrword	#16, arg03
16414                 | ' leading_spaces:=0				'
16414     A5 E5 05 F1 | 	add	objptr, #421
16418     F2 00 68 FC | 	wrlong	#0, objptr
1641c                 | ' 
1641c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1641c     99 E4 85 F1 | 	sub	objptr, #153
16420     00 00 A0 FF 
16424     F2 0E 68 FC | 	wrlong	##1073741831, objptr
16428                 | ' emptydl[1]:=0
16428     04 E4 05 F1 | 	add	objptr, #4
1642c     F2 00 68 FC | 	wrlong	#0, objptr
16430                 | ' 
16430                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
16430                 | ' 
16430                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
16430     28 E5 85 F1 | 	sub	objptr, #296
16434     F2 02 68 FC | 	wrlong	#1, objptr
16438                 | ' if s_debug<>0
16438                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
16438     20 00 80 FF 
1643c     F2 00 68 FC | 	wrlong	##16384, objptr
16440     F5 E4 85 F1 | 	sub	objptr, #245
16444                 | ' setmode()							' set the mode, see below
16444     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
16448                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
16448     45 E4 05 F1 | 	add	objptr, #69
1644c     F2 FA 01 F6 | 	mov	result1, objptr
16450     35 E4 85 F1 | 	sub	objptr, #53
16454     F2 FA 61 FC | 	wrlong	result1, objptr
16458                 | ' cursor_ptr:=@cursor_x						
16458     28 E4 05 F1 | 	add	objptr, #40
1645c     F2 16 02 F6 | 	mov	arg03, objptr
16460     2C E4 85 F1 | 	sub	objptr, #44
16464     F2 16 62 FC | 	wrlong	arg03, objptr
16468                 | ' fontnum:=0  							' start with a PC type font 
16468     55 E4 05 F1 | 	add	objptr, #85
1646c     F2 00 68 FC | 	wrlong	#0, objptr
16470                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
16470     1C E4 05 F1 | 	add	objptr, #28
16474     F2 12 02 F6 | 	mov	arg01, objptr
16478     7D E4 85 F1 | 	sub	objptr, #125
1647c     10 00 00 FF 
16480     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
16484     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
16488     10 00 00 FF 
1648c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
16490     10 16 06 F6 | 	mov	arg03, #16
16494     50 23 B0 FD | 	call	#__system____builtin_memmove
16498                 | ' leading_spaces:=0
16498     01 00 00 FF 
1649c     B2 E4 05 F1 | 	add	objptr, ##690
164a0     F2 00 68 FC | 	wrlong	#0, objptr
164a4     01 00 00 FF 
164a8     B2 E4 85 F1 | 	sub	objptr, ##690
164ac                 | ' '---------------------------- initialize a cursor (MSDOS type)
164ac                 | ' 
164ac                 | ' initcursor(154)
164ac     9A 12 06 F6 | 	mov	arg01, #154
164b0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
164b4                 | ' 
164b4                 | ' '---------------------------- start the cog
164b4                 | ' 
164b4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
164b4     10 00 00 FF 
164b8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
164bc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
164c0     10 00 00 FF 
164c4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
164c8     10 E4 05 F1 | 	add	objptr, #16
164cc     10 FA 05 F6 | 	mov	result1, #16
164d0     28 E4 61 FD | 	setq	objptr
164d4     0A FB F1 FC | 	coginit	result1, arg02 wc
164d8     01 FA 65 C6 |  if_b	neg	result1, #1
164dc     1C E4 05 F1 | 	add	objptr, #28
164e0     F2 FA 61 FC | 	wrlong	result1, objptr
164e4     2C E4 85 F1 | 	sub	objptr, #44
164e8                 | ' waitms(40)							' wait for stabilize
164e8     28 12 06 F6 | 	mov	arg01, #40
164ec     CC 26 B0 FD | 	call	#__system___waitms
164f0                 | ' return cog							' return the driver's cog #
164f0     2C E4 05 F1 | 	add	objptr, #44
164f4     F2 FA 01 FB | 	rdlong	result1, objptr
164f8     2C E4 85 F1 | 	sub	objptr, #44
164fc                 | _hg010b_spin2_start_ret
164fc     2D 00 64 FD | 	ret
16500                 | 
16500                 | ' 
16500                 | ' 
16500                 | ' '**************************************************************************************************************** 
16500                 | ' '                                                                                                             	*
16500                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
16500                 | ' '  Mode number - see start() above or bits below								*
16500                 | ' '                                                                                                             	*
16500                 | ' '****************************************************************************************************************
16500                 | ' 
16500                 | ' '---------------------------- initialize a cursor (MSDOS type)
16500                 | ' pub initcursor(color) |i
16500                 | _hg010b_spin2_initcursor
16500     03 4A 05 F6 | 	mov	COUNT_, #3
16504     A8 00 A0 FD | 	call	#pushregs_
16508     09 1F 02 F6 | 	mov	local01, arg01
1650c                 | ' 
1650c                 | ' cursor_x:=0							' place the cursor at 0:0
1650c     38 E4 05 F1 | 	add	objptr, #56
16510     F2 00 58 FC | 	wrword	#0, objptr
16514                 | ' cursor_y:=0
16514     02 E4 05 F1 | 	add	objptr, #2
16518     F2 00 48 FC | 	wrbyte	#0, objptr
1651c                 | ' repeat i from 0 to 111
1651c     00 20 06 F6 | 	mov	local02, #0
16520     F8 E5 05 F1 | 	add	objptr, #504
16524     97 1A 48 FB | 	callpa	#(@LR__1732-@LR__1730)>>2,fcache_load_ptr_
16528                 | LR__1730
16528                 | '   cursor[i]:=0
16528     10 23 02 F6 | 	mov	local03, local02
1652c     F2 22 02 F1 | 	add	local03, objptr
16530     11 01 48 FC | 	wrbyte	#0, local03
16534     01 20 06 F1 | 	add	local02, #1
16538     70 20 56 F2 | 	cmps	local02, #112 wc
1653c     E8 FF 9F CD |  if_b	jmp	#LR__1730
16540                 | ' repeat i from 112 to 127
16540     70 20 06 F6 | 	mov	local02, #112
16544                 | LR__1731
16544                 | '   cursor[i]:=color  
16544     10 23 02 F6 | 	mov	local03, local02
16548     F2 22 02 F1 | 	add	local03, objptr
1654c     11 1F 42 FC | 	wrbyte	local01, local03
16550     01 20 06 F1 | 	add	local02, #1
16554     80 20 16 F2 | 	cmp	local02, #128 wc
16558     E8 FF 9F CD |  if_b	jmp	#LR__1731
1655c                 | LR__1732
1655c                 | ' 'repeat i from 0 to 127
1655c                 | ' '  if ((i/8)//2)
1655c                 | ' '    cursor[i]:=15
1655c                 | ' '  else
1655c                 | ' '    cursor[i]:=0
1655c                 | ' '  if i>=120    
1655c                 | ' '    cursor[i]:=40
1655c                 | ' setspriteptr(17,@cursor)
1655c     F2 14 02 F6 | 	mov	arg02, objptr
16560     01 00 00 FF 
16564     32 E4 85 F1 | 	sub	objptr, ##562
16568     11 12 06 F6 | 	mov	arg01, #17
1656c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
16570                 | ' setspritesize(17,8,16)
16570     11 12 06 F6 | 	mov	arg01, #17
16574     08 14 06 F6 | 	mov	arg02, #8
16578     10 16 06 F6 | 	mov	arg03, #16
1657c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
16580                 | ' setspritepos(17,0,0)
16580     11 12 06 F6 | 	mov	arg01, #17
16584     00 14 06 F6 | 	mov	arg02, #0
16588     00 16 06 F6 | 	mov	arg03, #0
1658c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
16590     A7 F0 03 F6 | 	mov	ptra, fp
16594     B2 00 A0 FD | 	call	#popregs_
16598                 | _hg010b_spin2_initcursor_ret
16598     2D 00 64 FD | 	ret
1659c                 | 
1659c                 | ' 
1659c                 | '  
1659c                 | ' pub setcursorcolor(color) |i
1659c                 | _hg010b_spin2_setcursorcolor
1659c                 | ' 
1659c                 | ' 
1659c                 | ' repeat i from 0 to 111
1659c     00 00 06 F6 | 	mov	_var01, #0
165a0     01 00 00 FF 
165a4     32 E4 05 F1 | 	add	objptr, ##562
165a8     97 1A 48 FB | 	callpa	#(@LR__1742-@LR__1740)>>2,fcache_load_ptr_
165ac                 | LR__1740
165ac                 | '   cursor[i]:=0
165ac     00 03 02 F6 | 	mov	_var02, _var01
165b0     F2 02 02 F1 | 	add	_var02, objptr
165b4     01 01 48 FC | 	wrbyte	#0, _var02
165b8     01 00 06 F1 | 	add	_var01, #1
165bc     70 00 56 F2 | 	cmps	_var01, #112 wc
165c0     E8 FF 9F CD |  if_b	jmp	#LR__1740
165c4                 | ' repeat i from 112 to 127
165c4     70 00 06 F6 | 	mov	_var01, #112
165c8                 | LR__1741
165c8                 | '   cursor[i]:=color  
165c8     00 03 02 F6 | 	mov	_var02, _var01
165cc     F2 02 02 F1 | 	add	_var02, objptr
165d0     01 13 42 FC | 	wrbyte	arg01, _var02
165d4     01 00 06 F1 | 	add	_var01, #1
165d8     80 00 16 F2 | 	cmp	_var01, #128 wc
165dc     E8 FF 9F CD |  if_b	jmp	#LR__1741
165e0                 | LR__1742
165e0     01 00 00 FF 
165e4     32 E4 85 F1 | 	sub	objptr, ##562
165e8                 | _hg010b_spin2_setcursorcolor_ret
165e8     2D 00 64 FD | 	ret
165ec                 | 
165ec                 | '  
165ec                 | ' 
165ec                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
165ec                 | _hg010b_spin2_setmode
165ec     02 4A 05 F6 | 	mov	COUNT_, #2
165f0     A8 00 A0 FD | 	call	#pushregs_
165f4                 | ' 
165f4                 | ' 
165f4                 | ' dl_ptr:=@emptydl[0]
165f4     01 00 00 FF 
165f8     19 E4 05 F1 | 	add	objptr, ##537
165fc     F2 62 02 F6 | 	mov	muldivb_, objptr
16600     FD E5 85 F1 | 	sub	objptr, #509
16604     F2 62 62 FC | 	wrlong	muldivb_, objptr
16608                 | ' 
16608                 | ' if cog>0 
16608     10 E4 05 F1 | 	add	objptr, #16
1660c     F2 62 02 FB | 	rdlong	muldivb_, objptr
16610     2C E4 85 F1 | 	sub	objptr, #44
16614     01 62 56 F2 | 	cmps	muldivb_, #1 wc
16618                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
16618     01 12 06 36 |  if_ae	mov	arg01, #1
1661c     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
16620                 | ' xres:=1024
16620     01 00 00 FF 
16624     22 E4 05 F1 | 	add	objptr, ##546
16628     02 00 80 FF 
1662c     F2 00 68 FC | 	wrlong	##1024, objptr
16630                 | ' yres:=576  
16630     04 E4 05 F1 | 	add	objptr, #4
16634     01 00 80 FF 
16638     F2 80 68 FC | 	wrlong	##576, objptr
1663c                 | ' ppl:=(timings[3])
1663c     10 00 00 FF 
16640     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
16644     F7 62 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
16648     51 E5 85 F1 | 	sub	objptr, #337
1664c     F2 62 62 FC | 	wrlong	muldivb_, objptr
16650                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
16650     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
16654     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
16658     01 1E 66 F0 | 	shl	local01, #1
1665c     80 E4 85 F1 | 	sub	objptr, #128
16660     F2 1E 62 FC | 	wrlong	local01, objptr
16664                 | ' cpl1:=cpl '' todo remove
16664     04 E4 05 F1 | 	add	objptr, #4
16668     F2 1E 62 FC | 	wrlong	local01, objptr
1666c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1666c     02 00 00 FF 
16670     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
16674     41 E4 85 F1 | 	sub	objptr, #65
16678     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1667c                 | ' repeat i from 0 to 3
1667c     00 20 06 F6 | 	mov	local02, #0
16680     02 00 00 FF 
16684     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
16688     08 E4 05 F1 | 	add	objptr, #8
1668c     97 20 48 FB | 	callpa	#(@LR__1751-@LR__1750)>>2,fcache_load_ptr_
16690                 | LR__1750
16690                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
16690     10 1F 02 F6 | 	mov	local01, local02
16694     02 1E 66 F0 | 	shl	local01, #2
16698     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1669c     F2 62 02 FB | 	rdlong	muldivb_, objptr
166a0     11 62 66 F0 | 	shl	muldivb_, #17
166a4     0F 1F 02 FB | 	rdlong	local01, local01
166a8     31 1F 02 F1 | 	add	local01, muldivb_
166ac     80 40 38 FF 
166b0     00 1E 06 F1 | 	add	local01, ##1887502336
166b4     10 63 02 F6 | 	mov	muldivb_, local02
166b8     02 62 66 F0 | 	shl	muldivb_, #2
166bc     F7 62 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
166c0     31 1F 62 FC | 	wrlong	local01, muldivb_
166c4     01 20 06 F1 | 	add	local02, #1
166c8     04 20 56 F2 | 	cmps	local02, #4 wc
166cc     C0 FF 9F CD |  if_b	jmp	#LR__1750
166d0                 | LR__1751
166d0     20 E4 85 F1 | 	sub	objptr, #32
166d4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
166d4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
166d8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
166dc     14 1E 66 FC | 	wrlong	local01, #20
166e0                 | ' hubset(timings[10])
166e0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
166e4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
166e8     10 00 00 FF 
166ec     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
166f0     00 12 62 FD | 	hubset	arg01
166f4                 | ' waitms(1)                                                   	' wait for stabilization
166f4     01 12 06 F6 | 	mov	arg01, #1
166f8     C0 24 B0 FD | 	call	#__system___waitms
166fc     10 00 00 FF 
16700     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
16704     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
16708     5D E4 05 F1 | 	add	objptr, #93
1670c     F2 20 62 FC | 	wrlong	local02, objptr
16710     10 1F 52 F6 | 	abs	local01, local02 wc
16714     04 1E 46 F0 | 	shr	local01, #4
16718     0F 1F 82 F6 | 	negc	local01, local01
1671c     9C E4 05 F1 | 	add	objptr, #156
16720     F2 1E 62 FC | 	wrlong	local01, objptr
16724     A4 E4 85 F1 | 	sub	objptr, #164
16728     F2 20 02 FB | 	rdlong	local02, objptr
1672c     08 E4 05 F1 | 	add	objptr, #8
16730     F2 1E 02 FB | 	rdlong	local01, objptr
16734     0F 21 02 FD | 	qmul	local02, local01
16738                 | ' lines:=timings[11]
16738                 | ' t_lines:=lines/16
16738                 | ' buflen:=cpl*lines						' framebuffer length in longs
16738     29 E4 85 F1 | 	sub	objptr, #41
1673c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1673c     19 1E C6 F9 | 	decod	local01, #25
16740                 | ' mode_ptr:=@timings						' set pointers to timings
16740     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
16744                 | ' graphmode:=1024+512+192+48							' det global variable
16744                 | ' makedl(graphmode)							' make a DL for the mode
16744     03 00 00 FF 
16748     F0 12 06 F6 | 	mov	arg01, ##1776
1674c     18 20 62 FD | 	getqx	local02
16750     F2 20 62 FC | 	wrlong	local02, objptr
16754     34 E4 85 F1 | 	sub	objptr, #52
16758     02 20 66 F0 | 	shl	local02, #2
1675c     10 1F 82 F1 | 	sub	local01, local02
16760     F2 1E 62 FC | 	wrlong	local01, objptr
16764     14 E4 05 F1 | 	add	objptr, #20
16768     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1676c     79 E4 05 F1 | 	add	objptr, #121
16770     03 00 80 FF 
16774     F2 E0 69 FC | 	wrlong	##1776, objptr
16778     8D E4 85 F1 | 	sub	objptr, #141
1677c     10 00 00 FF 
16780     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
16784     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
16788                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
16788     F2 1E 02 FB | 	rdlong	local01, objptr
1678c     D9 E4 05 F1 | 	add	objptr, #217
16790     F2 1E 62 FC | 	wrlong	local01, objptr
16794                 | ' s_font_ptr:=font_ptr
16794     D5 E4 85 F1 | 	sub	objptr, #213
16798     F2 1E 02 FB | 	rdlong	local01, objptr
1679c     D9 E4 05 F1 | 	add	objptr, #217
167a0     F2 1E 62 FC | 	wrlong	local01, objptr
167a4                 | ' s_lines:=lines
167a4     80 E4 85 F1 | 	sub	objptr, #128
167a8     F2 1E 02 FB | 	rdlong	local01, objptr
167ac     84 E4 05 F1 | 	add	objptr, #132
167b0     F2 1E 62 FC | 	wrlong	local01, objptr
167b4                 | ' s_buflen:=buflen
167b4     AD E4 85 F1 | 	sub	objptr, #173
167b8     F2 1E 02 FB | 	rdlong	local01, objptr
167bc     B5 E4 05 F1 | 	add	objptr, #181
167c0     F2 1E 62 FC | 	wrlong	local01, objptr
167c4                 | ' s_cpl:=cpl
167c4     94 E4 85 F1 | 	sub	objptr, #148
167c8     F2 1E 02 FB | 	rdlong	local01, objptr
167cc     90 E4 05 F1 | 	add	objptr, #144
167d0     F2 1E 62 FC | 	wrlong	local01, objptr
167d4                 | ' s_cpl1:=cpl
167d4     90 E4 85 F1 | 	sub	objptr, #144
167d8     F2 1E 02 FB | 	rdlong	local01, objptr
167dc     98 E4 05 F1 | 	add	objptr, #152
167e0     F2 1E 62 FC | 	wrlong	local01, objptr
167e4                 | ' st_lines:=t_lines
167e4     0C E4 05 F1 | 	add	objptr, #12
167e8     F2 1E 02 FB | 	rdlong	local01, objptr
167ec     04 E4 05 F1 | 	add	objptr, #4
167f0     F2 1E 62 FC | 	wrlong	local01, objptr
167f4                 | ' ppl:=ppl/xzoom  
167f4     28 E4 85 F1 | 	sub	objptr, #40
167f8     F2 60 02 FB | 	rdlong	muldiva_, objptr
167fc     2C E4 05 F1 | 	add	objptr, #44
16800     F2 62 02 FB | 	rdlong	muldivb_, objptr
16804     01 E5 85 F1 | 	sub	objptr, #257
16808     BA 00 A0 FD | 	call	#divide_
1680c     D5 E4 05 F1 | 	add	objptr, #213
16810     F2 62 62 FC | 	wrlong	muldivb_, objptr
16814                 | ' s_ppl:=ppl
16814     1C E4 05 F1 | 	add	objptr, #28
16818     F2 62 62 FC | 	wrlong	muldivb_, objptr
1681c     F1 E4 85 F1 | 	sub	objptr, #241
16820                 | ' waitms(20)							' wait 
16820     14 12 06 F6 | 	mov	arg01, #20
16824     94 23 B0 FD | 	call	#__system___waitms
16828     A7 F0 03 F6 | 	mov	ptra, fp
1682c     B2 00 A0 FD | 	call	#popregs_
16830                 | _hg010b_spin2_setmode_ret
16830     2D 00 64 FD | 	ret
16834                 | 
16834                 | ' 
16834                 | ' 
16834                 | ' '****************************************************************************************************************
16834                 | ' '                                                                                                             	*
16834                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
16834                 | ' '                                                                                                             	*
16834                 | ' '****************************************************************************************************************
16834                 | ' 
16834                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
16834                 | _hg010b_spin2_makedl
16834                 | ' 
16834                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
16834                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
16834                 | ' repeat i from 0 to 11                                                           ' clear DL
16834     00 00 06 F6 | 	mov	_var01, #0
16838     E9 E5 05 F1 | 	add	objptr, #489
1683c     97 0E 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
16840                 | LR__1760
16840                 | '   displaylist[i]:=0 
16840     00 03 02 F6 | 	mov	_var02, _var01
16844     02 02 66 F0 | 	shl	_var02, #2
16848     F2 02 02 F1 | 	add	_var02, objptr
1684c     01 01 68 FC | 	wrlong	#0, _var02
16850     01 00 06 F1 | 	add	_var01, #1
16854     0C 00 56 F2 | 	cmps	_var01, #12 wc
16858     E4 FF 9F CD |  if_b	jmp	#LR__1760
1685c                 | LR__1761
1685c                 | '                         ' 
1685c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1685c     8C E5 85 F1 | 	sub	objptr, #396
16860     F2 02 02 FB | 	rdlong	_var02, objptr
16864     14 02 66 F0 | 	shl	_var02, #20
16868     01 02 06 F1 | 	add	_var02, #1
1686c     04 E4 85 F1 | 	sub	objptr, #4
16870     F2 00 02 FB | 	rdlong	_var01, objptr
16874     02 00 66 F0 | 	shl	_var01, #2
16878     04 00 66 F0 | 	shl	_var01, #4
1687c     00 03 02 F1 | 	add	_var02, _var01
16880     90 E5 05 F1 | 	add	objptr, #400
16884     F2 02 62 FC | 	wrlong	_var02, objptr
16888     E9 E5 85 F1 | 	sub	objptr, #489
1688c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1688c     F2 02 02 FB | 	rdlong	_var02, objptr
16890     04 02 66 F0 | 	shl	_var02, #4
16894     02 02 06 F1 | 	add	_var02, #2
16898     ED E5 05 F1 | 	add	objptr, #493
1689c     F2 02 62 FC | 	wrlong	_var02, objptr
168a0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
168a0     04 E4 85 F1 | 	sub	objptr, #4
168a4     F2 02 02 F6 | 	mov	_var02, objptr
168a8     CD E5 85 F1 | 	sub	objptr, #461
168ac     F2 02 62 FC | 	wrlong	_var02, objptr
168b0     1C E4 85 F1 | 	sub	objptr, #28
168b4                 | _hg010b_spin2_makedl_ret
168b4     2D 00 64 FD | 	ret
168b8                 | 
168b8                 | ' 
168b8                 | ' 
168b8                 | ' '****************************************************************************************************************
168b8                 | ' '                                                                        					*
168b8                 | ' '  Graphic primitives                                                    					*
168b8                 | ' '                                                                        					*
168b8                 | ' '****************************************************************************************************************
168b8                 | ' 
168b8                 | ' pub setspriteptr(num,ptr)
168b8                 | _hg010b_spin2_setspriteptr
168b8                 | ' long[@spr1ptr+12*num]:=ptr
168b8     0D E5 05 F1 | 	add	objptr, #269
168bc     F2 00 02 F6 | 	mov	_var01, objptr
168c0     09 03 02 F6 | 	mov	_var02, arg01
168c4     01 02 66 F0 | 	shl	_var02, #1
168c8     09 03 02 F1 | 	add	_var02, arg01
168cc     02 02 66 F0 | 	shl	_var02, #2
168d0     01 01 02 F1 | 	add	_var01, _var02
168d4     00 15 62 FC | 	wrlong	arg02, _var01
168d8     0D E5 85 F1 | 	sub	objptr, #269
168dc                 | _hg010b_spin2_setspriteptr_ret
168dc     2D 00 64 FD | 	ret
168e0                 | 
168e0                 | ' 
168e0                 | ' pub setspritepos(num,x,y)
168e0                 | _hg010b_spin2_setspritepos
168e0                 | ' word[@spr1ptr+12*num+4]:=x
168e0     0D E5 05 F1 | 	add	objptr, #269
168e4     F2 00 02 F6 | 	mov	_var01, objptr
168e8     09 03 02 F6 | 	mov	_var02, arg01
168ec     01 02 66 F0 | 	shl	_var02, #1
168f0     09 03 02 F1 | 	add	_var02, arg01
168f4     02 02 66 F0 | 	shl	_var02, #2
168f8     01 01 02 F1 | 	add	_var01, _var02
168fc     04 00 06 F1 | 	add	_var01, #4
16900     00 15 52 FC | 	wrword	arg02, _var01
16904                 | ' word[@spr1ptr+12*num+6]:=y
16904     F2 00 02 F6 | 	mov	_var01, objptr
16908     09 03 02 F6 | 	mov	_var02, arg01
1690c     01 02 66 F0 | 	shl	_var02, #1
16910     09 03 02 F1 | 	add	_var02, arg01
16914     02 02 66 F0 | 	shl	_var02, #2
16918     01 01 02 F1 | 	add	_var01, _var02
1691c     06 00 06 F1 | 	add	_var01, #6
16920     00 17 52 FC | 	wrword	arg03, _var01
16924     0D E5 85 F1 | 	sub	objptr, #269
16928                 | _hg010b_spin2_setspritepos_ret
16928     2D 00 64 FD | 	ret
1692c                 | 
1692c                 | ' 
1692c                 | ' pub setspritesize(num,w,h)
1692c                 | _hg010b_spin2_setspritesize
1692c                 | ' word[@spr1ptr+12*num+8]:=w
1692c     0D E5 05 F1 | 	add	objptr, #269
16930     F2 00 02 F6 | 	mov	_var01, objptr
16934     09 03 02 F6 | 	mov	_var02, arg01
16938     01 02 66 F0 | 	shl	_var02, #1
1693c     09 03 02 F1 | 	add	_var02, arg01
16940     02 02 66 F0 | 	shl	_var02, #2
16944     01 01 02 F1 | 	add	_var01, _var02
16948     08 00 06 F1 | 	add	_var01, #8
1694c     00 15 52 FC | 	wrword	arg02, _var01
16950                 | ' word[@spr1ptr+12*num+10]:=h
16950     F2 00 02 F6 | 	mov	_var01, objptr
16954     09 03 02 F6 | 	mov	_var02, arg01
16958     01 02 66 F0 | 	shl	_var02, #1
1695c     09 03 02 F1 | 	add	_var02, arg01
16960     02 02 66 F0 | 	shl	_var02, #2
16964     01 01 02 F1 | 	add	_var01, _var02
16968     0A 00 06 F1 | 	add	_var01, #10
1696c     00 17 52 FC | 	wrword	arg03, _var01
16970     0D E5 85 F1 | 	sub	objptr, #269
16974                 | _hg010b_spin2_setspritesize_ret
16974     2D 00 64 FD | 	ret
16978                 | 
16978                 | ' 
16978                 | ' 
16978                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
16978                 | ' 
16978                 | ' 
16978                 | ' pub putpixel(x,y,c)
16978                 | _hg010b_spin2_putpixel
16978     04 4A 05 F6 | 	mov	COUNT_, #4
1697c     A8 00 A0 FD | 	call	#pushregs_
16980     09 1F 02 F6 | 	mov	local01, arg01
16984                 | ' 
16984                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
16984     00 20 06 F6 | 	mov	local02, #0
16988     00 1E 56 F2 | 	cmps	local01, #0 wc
1698c     01 20 66 36 |  if_ae	neg	local02, #1
16990     E5 E4 05 F1 | 	add	objptr, #229
16994     F2 1A 02 FB | 	rdlong	arg05, objptr
16998     02 1A 66 F0 | 	shl	arg05, #2
1699c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
169a0     11 23 A2 F1 | 	subx	local03, local03
169a4     11 21 02 F5 | 	and	local02, local03
169a8     00 22 06 F6 | 	mov	local03, #0
169ac     00 14 56 F2 | 	cmps	arg02, #0 wc
169b0     01 22 66 36 |  if_ae	neg	local03, #1
169b4     11 21 02 F5 | 	and	local02, local03
169b8     04 E4 85 F1 | 	sub	objptr, #4
169bc     F2 22 02 FB | 	rdlong	local03, objptr
169c0     E1 E4 85 F1 | 	sub	objptr, #225
169c4     11 15 52 F2 | 	cmps	arg02, local03 wc
169c8     12 25 A2 F1 | 	subx	local04, local04
169cc     12 21 CA F7 | 	test	local02, local04 wz
169d0     48 00 90 AD |  if_e	jmp	#LR__1770
169d4     D9 E4 05 F1 | 	add	objptr, #217
169d8     F2 12 02 FB | 	rdlong	arg01, objptr
169dc     14 E4 05 F1 | 	add	objptr, #20
169e0     F2 24 02 FB | 	rdlong	local04, objptr
169e4     02 24 66 F0 | 	shl	local04, #2
169e8     0A 25 02 FD | 	qmul	local04, arg02
169ec                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
169ec     0B 15 02 F6 | 	mov	arg02, arg03
169f0     01 16 06 F6 | 	mov	arg03, #1
169f4     00 18 06 F6 | 	mov	arg04, #0
169f8     01 1A 06 F6 | 	mov	arg05, #1
169fc     0A 00 00 FF 
16a00     D3 E5 05 F1 | 	add	objptr, ##5587
16a04     18 24 62 FD | 	getqx	local04
16a08     0F 25 02 F1 | 	add	local04, local01
16a0c     12 13 02 F1 | 	add	arg01, local04
16a10     FC 14 B0 FD | 	call	#_psram_spin2_fill
16a14     0B 00 00 FF 
16a18     C0 E4 85 F1 | 	sub	objptr, ##5824
16a1c                 | LR__1770
16a1c     A7 F0 03 F6 | 	mov	ptra, fp
16a20     B2 00 A0 FD | 	call	#popregs_
16a24                 | _hg010b_spin2_putpixel_ret
16a24     2D 00 64 FD | 	ret
16a28                 | 
16a28                 | ' 
16a28                 | ' pub putpixel2(x,y,c)
16a28                 | _hg010b_spin2_putpixel2
16a28     02 4A 05 F6 | 	mov	COUNT_, #2
16a2c     A8 00 A0 FD | 	call	#pushregs_
16a30     D9 E4 05 F1 | 	add	objptr, #217
16a34     F2 1E 02 FB | 	rdlong	local01, objptr
16a38     14 E4 05 F1 | 	add	objptr, #20
16a3c     F2 1A 02 FB | 	rdlong	arg05, objptr
16a40     02 1A 66 F0 | 	shl	arg05, #2
16a44     0A 1B 02 FD | 	qmul	arg05, arg02
16a48                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
16a48     0B 15 02 F6 | 	mov	arg02, arg03
16a4c     01 16 06 F6 | 	mov	arg03, #1
16a50     00 18 06 F6 | 	mov	arg04, #0
16a54     01 1A 06 F6 | 	mov	arg05, #1
16a58     0A 00 00 FF 
16a5c     D3 E5 05 F1 | 	add	objptr, ##5587
16a60     18 20 62 FD | 	getqx	local02
16a64     09 21 02 F1 | 	add	local02, arg01
16a68     10 1F 02 F1 | 	add	local01, local02
16a6c     0F 13 02 F6 | 	mov	arg01, local01
16a70     9C 14 B0 FD | 	call	#_psram_spin2_fill
16a74     0B 00 00 FF 
16a78     C0 E4 85 F1 | 	sub	objptr, ##5824
16a7c     A7 F0 03 F6 | 	mov	ptra, fp
16a80     B2 00 A0 FD | 	call	#popregs_
16a84                 | _hg010b_spin2_putpixel2_ret
16a84     2D 00 64 FD | 	ret
16a88                 | 
16a88                 | ' 
16a88                 | ' pub getpixel2(x,y): c 
16a88                 | _hg010b_spin2_getpixel2
16a88     02 4A 05 F6 | 	mov	COUNT_, #2
16a8c     A8 00 A0 FD | 	call	#pushregs_
16a90     0C F0 07 F1 | 	add	ptra, #12
16a94     04 4E 05 F1 | 	add	fp, #4
16a98     A7 12 62 FC | 	wrlong	arg01, fp
16a9c     04 4E 05 F1 | 	add	fp, #4
16aa0     A7 14 62 FC | 	wrlong	arg02, fp
16aa4     08 4E 85 F1 | 	sub	fp, #8
16aa8     A7 00 68 FC | 	wrlong	#0, fp
16aac     A7 12 02 F6 | 	mov	arg01, fp
16ab0     D9 E4 05 F1 | 	add	objptr, #217
16ab4     F2 14 02 FB | 	rdlong	arg02, objptr
16ab8     14 E4 05 F1 | 	add	objptr, #20
16abc     F2 16 02 FB | 	rdlong	arg03, objptr
16ac0     02 16 66 F0 | 	shl	arg03, #2
16ac4     08 4E 05 F1 | 	add	fp, #8
16ac8     A7 FA 01 FB | 	rdlong	result1, fp
16acc     FD 16 02 FD | 	qmul	arg03, result1
16ad0                 | ' 
16ad0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
16ad0     04 4E 85 F1 | 	sub	fp, #4
16ad4     A7 1E 02 FB | 	rdlong	local01, fp
16ad8     04 4E 85 F1 | 	sub	fp, #4
16adc     01 16 06 F6 | 	mov	arg03, #1
16ae0     0A 00 00 FF 
16ae4     D3 E5 05 F1 | 	add	objptr, ##5587
16ae8     18 20 62 FD | 	getqx	local02
16aec     0F 21 02 F1 | 	add	local02, local01
16af0     10 15 02 F1 | 	add	arg02, local02
16af4     E0 12 B0 FD | 	call	#_psram_spin2_read1
16af8     0B 00 00 FF 
16afc     C0 E4 85 F1 | 	sub	objptr, ##5824
16b00                 | ' return c
16b00     A7 FA 01 FB | 	rdlong	result1, fp
16b04     A7 F0 03 F6 | 	mov	ptra, fp
16b08     B2 00 A0 FD | 	call	#popregs_
16b0c                 | _hg010b_spin2_getpixel2_ret
16b0c     2D 00 64 FD | 	ret
16b10                 | 
16b10                 | '   
16b10                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
16b10                 | ' 
16b10                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
16b10                 | _hg010b_spin2_fastline
16b10     02 4A 05 F6 | 	mov	COUNT_, #2
16b14     A8 00 A0 FD | 	call	#pushregs_
16b18     09 1F 02 F6 | 	mov	local01, arg01
16b1c     0A 21 02 F6 | 	mov	local02, arg02
16b20                 | ' 
16b20                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
16b20     00 16 56 F2 | 	cmps	arg03, #0 wc
16b24     F4 00 90 CD |  if_b	jmp	#LR__1780
16b28     01 00 00 FF 
16b2c     26 E4 05 F1 | 	add	objptr, ##550
16b30     F2 1A 02 FB | 	rdlong	arg05, objptr
16b34     01 00 00 FF 
16b38     26 E4 85 F1 | 	sub	objptr, ##550
16b3c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
16b40     D8 00 90 3D |  if_ae	jmp	#LR__1780
16b44     00 1E 56 F2 | 	cmps	local01, #0 wc
16b48     00 20 56 C2 |  if_b	cmps	local02, #0 wc
16b4c     CC 00 90 CD |  if_b	jmp	#LR__1780
16b50     01 00 00 FF 
16b54     22 E4 05 F1 | 	add	objptr, ##546
16b58     F2 1A 02 FB | 	rdlong	arg05, objptr
16b5c     01 00 00 FF 
16b60     22 E4 85 F1 | 	sub	objptr, ##546
16b64     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
16b68     01 00 00 1F 
16b6c     22 E4 05 11 |  if_a	add	objptr, ##546
16b70     F2 12 02 1B |  if_a	rdlong	arg01, objptr
16b74     01 00 00 1F 
16b78     22 E4 85 11 |  if_a	sub	objptr, ##546
16b7c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
16b80                 | '   return
16b80     98 00 90 1D |  if_a	jmp	#LR__1780
16b84     10 1F 5A F2 | 	cmps	local01, local02 wcz
16b88     0F 1B 02 16 |  if_a	mov	arg05, local01
16b8c     10 1F 02 16 |  if_a	mov	local01, local02
16b90     0D 21 02 16 |  if_a	mov	local02, arg05
16b94     00 1E 56 F2 | 	cmps	local01, #0 wc
16b98     00 1E 06 C6 |  if_b	mov	local01, #0
16b9c     01 00 00 FF 
16ba0     22 E4 05 F1 | 	add	objptr, ##546
16ba4     F2 1A 02 FB | 	rdlong	arg05, objptr
16ba8     01 00 00 FF 
16bac     22 E4 85 F1 | 	sub	objptr, ##546
16bb0     0D 21 52 F2 | 	cmps	local02, arg05 wc
16bb4     01 00 00 3F 
16bb8     22 E4 05 31 |  if_ae	add	objptr, ##546
16bbc     F2 20 02 3B |  if_ae	rdlong	local02, objptr
16bc0     01 00 00 3F 
16bc4     22 E4 85 31 |  if_ae	sub	objptr, ##546
16bc8     D9 E4 05 F1 | 	add	objptr, #217
16bcc     F2 12 02 FB | 	rdlong	arg01, objptr
16bd0     14 E4 05 F1 | 	add	objptr, #20
16bd4     F2 1A 02 FB | 	rdlong	arg05, objptr
16bd8     02 1A 66 F0 | 	shl	arg05, #2
16bdc     0B 1B 02 FD | 	qmul	arg05, arg03
16be0                 | ' if x1>x2
16be0                 | '   x1,x2:=x2,x1
16be0                 | ' if x1<0 
16be0                 | '   x1:=0
16be0                 | ' if x2>=xres
16be0                 | '   x2:=xres-1  
16be0     01 20 86 31 |  if_ae	sub	local02, #1
16be4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
16be4     01 16 06 F6 | 	mov	arg03, #1
16be8     10 17 02 F1 | 	add	arg03, local02
16bec     0F 17 82 F1 | 	sub	arg03, local01
16bf0     0C 15 02 F6 | 	mov	arg02, arg04
16bf4     00 18 06 F6 | 	mov	arg04, #0
16bf8     01 1A 06 F6 | 	mov	arg05, #1
16bfc     0A 00 00 FF 
16c00     D3 E5 05 F1 | 	add	objptr, ##5587
16c04     18 20 62 FD | 	getqx	local02
16c08     0F 21 02 F1 | 	add	local02, local01
16c0c     10 13 02 F1 | 	add	arg01, local02
16c10     FC 12 B0 FD | 	call	#_psram_spin2_fill
16c14     0B 00 00 FF 
16c18     C0 E4 85 F1 | 	sub	objptr, ##5824
16c1c                 | LR__1780
16c1c     A7 F0 03 F6 | 	mov	ptra, fp
16c20     B2 00 A0 FD | 	call	#popregs_
16c24                 | _hg010b_spin2_fastline_ret
16c24     2D 00 64 FD | 	ret
16c28                 | 
16c28                 | ' 
16c28                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
16c28                 | _hg010b_spin2_draw
16c28     0E 4A 05 F6 | 	mov	COUNT_, #14
16c2c     A8 00 A0 FD | 	call	#pushregs_
16c30     09 1F 02 F6 | 	mov	local01, arg01
16c34     0A 21 02 F6 | 	mov	local02, arg02
16c38     0B 23 02 F6 | 	mov	local03, arg03
16c3c     0C 25 02 F6 | 	mov	local04, arg04
16c40     0D 27 02 F6 | 	mov	local05, arg05
16c44                 | ' 
16c44                 | ' if (y1==y2)
16c44     12 21 0A F2 | 	cmp	local02, local04 wz
16c48     18 00 90 5D |  if_ne	jmp	#LR__1790
16c4c                 | '   fastline(x1,x2,y1,c)
16c4c     0F 13 02 F6 | 	mov	arg01, local01
16c50     11 15 02 F6 | 	mov	arg02, local03
16c54     10 17 02 F6 | 	mov	arg03, local02
16c58     13 19 02 F6 | 	mov	arg04, local05
16c5c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
16c60     F8 00 90 FD | 	jmp	#LR__1796
16c64                 | LR__1790
16c64                 | ' else  
16c64                 | '   x:=x1
16c64     0F 29 02 F6 | 	mov	local06, local01
16c68                 | '   y:=y1
16c68     10 2B 02 F6 | 	mov	local07, local02
16c6c                 | ' 
16c6c                 | '   if (x1<x2) 
16c6c     11 1F 52 F2 | 	cmps	local01, local03 wc
16c70                 | '     xi:=1
16c70     01 2C 06 C6 |  if_b	mov	local08, #1
16c74                 | '     dx:=x2-x1
16c74     11 2F 02 C6 |  if_b	mov	local09, local03
16c78     0F 2F 82 C1 |  if_b	sub	local09, local01
16c7c                 | '   else
16c7c                 | '     xi:=-1
16c7c     01 2C 66 36 |  if_ae	neg	local08, #1
16c80                 | '     dx:=x1-x2
16c80     11 1F 82 31 |  if_ae	sub	local01, local03
16c84     0F 2F 02 36 |  if_ae	mov	local09, local01
16c88                 | '   
16c88                 | '   if (y1<y2) 
16c88     12 21 52 F2 | 	cmps	local02, local04 wc
16c8c                 | '     yi:=1
16c8c     01 30 06 C6 |  if_b	mov	local10, #1
16c90                 | '     dy:=y2-y1
16c90     12 33 02 C6 |  if_b	mov	local11, local04
16c94     10 33 82 C1 |  if_b	sub	local11, local02
16c98                 | '   else
16c98                 | '     yi:=-1
16c98     01 30 66 36 |  if_ae	neg	local10, #1
16c9c                 | '     dy:=y1-y2
16c9c     12 21 82 31 |  if_ae	sub	local02, local04
16ca0     10 33 02 36 |  if_ae	mov	local11, local02
16ca4                 | ' 
16ca4                 | '   putpixel(x,y,c)
16ca4     13 17 02 F6 | 	mov	arg03, local05
16ca8     14 13 02 F6 | 	mov	arg01, local06
16cac     15 15 02 F6 | 	mov	arg02, local07
16cb0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
16cb4                 | ' 
16cb4                 | '   if (dx>dy)
16cb4     19 2F 5A F2 | 	cmps	local09, local11 wcz
16cb8     50 00 90 ED |  if_be	jmp	#LR__1792
16cbc                 | '     ai:=(dy-dx)*2
16cbc     19 35 02 F6 | 	mov	local12, local11
16cc0     17 35 82 F1 | 	sub	local12, local09
16cc4     01 34 66 F0 | 	shl	local12, #1
16cc8                 | '     bi:=dy*2
16cc8     01 32 66 F0 | 	shl	local11, #1
16ccc     19 37 02 F6 | 	mov	local13, local11
16cd0                 | '     d:= bi-dx
16cd0     1B 39 02 F6 | 	mov	local14, local13
16cd4     17 39 82 F1 | 	sub	local14, local09
16cd8                 | '     repeat while (x<>x2) 
16cd8                 | LR__1791
16cd8     11 29 0A F2 | 	cmp	local06, local03 wz
16cdc     7C 00 90 AD |  if_e	jmp	#LR__1795
16ce0                 | '       if (d>=0) 
16ce0     00 38 56 F2 | 	cmps	local14, #0 wc
16ce4                 | '         x+=xi
16ce4     16 29 02 31 |  if_ae	add	local06, local08
16ce8                 | '         y+=yi
16ce8     18 2B 02 31 |  if_ae	add	local07, local10
16cec                 | '         d+=ai
16cec     1A 39 02 31 |  if_ae	add	local14, local12
16cf0                 | '       else
16cf0                 | '         d+=bi
16cf0     1B 39 02 C1 |  if_b	add	local14, local13
16cf4                 | '         x+=xi
16cf4     16 29 02 C1 |  if_b	add	local06, local08
16cf8                 | '       putpixel(x,y,c)
16cf8     14 13 02 F6 | 	mov	arg01, local06
16cfc     15 15 02 F6 | 	mov	arg02, local07
16d00     13 17 02 F6 | 	mov	arg03, local05
16d04     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
16d08     CC FF 9F FD | 	jmp	#LR__1791
16d0c                 | LR__1792
16d0c                 | '   else
16d0c                 | '     ai:=(dx-dy)*2
16d0c     17 35 02 F6 | 	mov	local12, local09
16d10     19 35 82 F1 | 	sub	local12, local11
16d14     01 34 66 F0 | 	shl	local12, #1
16d18                 | '     bi:=dx*2
16d18     01 2E 66 F0 | 	shl	local09, #1
16d1c     17 37 02 F6 | 	mov	local13, local09
16d20                 | '     d:=bi-dy
16d20     1B 39 02 F6 | 	mov	local14, local13
16d24     19 39 82 F1 | 	sub	local14, local11
16d28                 | '     repeat while (y<>y2)
16d28                 | LR__1793
16d28     12 2B 0A F2 | 	cmp	local07, local04 wz
16d2c     2C 00 90 AD |  if_e	jmp	#LR__1794
16d30                 | '       if (d>=0)
16d30     00 38 56 F2 | 	cmps	local14, #0 wc
16d34                 | '         x+=xi
16d34     16 29 02 31 |  if_ae	add	local06, local08
16d38                 | '         y+=yi
16d38     18 2B 02 31 |  if_ae	add	local07, local10
16d3c                 | '         d+=ai
16d3c     1A 39 02 31 |  if_ae	add	local14, local12
16d40                 | '       else
16d40                 | '         d+=bi
16d40     1B 39 02 C1 |  if_b	add	local14, local13
16d44                 | '         y+=yi
16d44     18 2B 02 C1 |  if_b	add	local07, local10
16d48                 | '       putpixel(x, y,c)
16d48     14 13 02 F6 | 	mov	arg01, local06
16d4c     15 15 02 F6 | 	mov	arg02, local07
16d50     13 17 02 F6 | 	mov	arg03, local05
16d54     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
16d58     CC FF 9F FD | 	jmp	#LR__1793
16d5c                 | LR__1794
16d5c                 | LR__1795
16d5c                 | LR__1796
16d5c     A7 F0 03 F6 | 	mov	ptra, fp
16d60     B2 00 A0 FD | 	call	#popregs_
16d64                 | _hg010b_spin2_draw_ret
16d64     2D 00 64 FD | 	ret
16d68                 | 
16d68                 | '  
16d68                 | ' pub fillpush(val) 
16d68                 | _hg010b_spin2_fillpush
16d68                 | ' fillstack[fillptr]:=val
16d68     0B 00 00 FF 
16d6c     B6 E4 05 F1 | 	add	objptr, ##5814
16d70     F2 00 02 FB | 	rdlong	_var01, objptr
16d74     02 00 66 F0 | 	shl	_var01, #2
16d78     0A 00 00 FF 
16d7c     00 E4 85 F1 | 	sub	objptr, ##5120
16d80     F2 00 02 F1 | 	add	_var01, objptr
16d84     00 13 62 FC | 	wrlong	arg01, _var01
16d88                 | ' fillptr+=1   
16d88     0A 00 00 FF 
16d8c     00 E4 05 F1 | 	add	objptr, ##5120
16d90     F2 00 02 FB | 	rdlong	_var01, objptr
16d94     01 00 06 F1 | 	add	_var01, #1
16d98     F2 00 62 FC | 	wrlong	_var01, objptr
16d9c     0B 00 00 FF 
16da0     B6 E4 85 F1 | 	sub	objptr, ##5814
16da4                 | _hg010b_spin2_fillpush_ret
16da4     2D 00 64 FD | 	ret
16da8                 | 
16da8                 | ' 
16da8                 | '     
16da8                 | ' pub fillpop() : val
16da8                 | _hg010b_spin2_fillpop
16da8                 | ' 
16da8                 | ' fillptr-=1
16da8     0B 00 00 FF 
16dac     B6 E4 05 F1 | 	add	objptr, ##5814
16db0     F2 FA 01 FB | 	rdlong	result1, objptr
16db4     01 FA 85 F1 | 	sub	result1, #1
16db8     F2 FA 61 FC | 	wrlong	result1, objptr
16dbc                 | ' if fillptr<0
16dbc     0B 00 00 FF 
16dc0     B6 E4 85 F1 | 	sub	objptr, ##5814
16dc4     00 FA 55 F2 | 	cmps	result1, #0 wc
16dc8                 | '   fillptr:=0
16dc8     0B 00 00 CF 
16dcc     B6 E4 05 C1 |  if_b	add	objptr, ##5814
16dd0     F2 00 68 CC |  if_b	wrlong	#0, objptr
16dd4     0B 00 00 CF 
16dd8     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
16ddc                 | '   val:=-12345
16ddc     E7 FF 7F CF 
16de0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
16de4     28 00 90 CD |  if_b	jmp	#LR__1800
16de8                 | ' else 
16de8                 | '   val:=fillstack[fillptr]
16de8     0B 00 00 FF 
16dec     B6 E4 05 F1 | 	add	objptr, ##5814
16df0     F2 00 02 FB | 	rdlong	_var01, objptr
16df4     02 00 66 F0 | 	shl	_var01, #2
16df8     0A 00 00 FF 
16dfc     00 E4 85 F1 | 	sub	objptr, ##5120
16e00     F2 00 02 F1 | 	add	_var01, objptr
16e04     00 01 02 FB | 	rdlong	_var01, _var01
16e08     01 00 00 FF 
16e0c     B6 E4 85 F1 | 	sub	objptr, ##694
16e10                 | LR__1800
16e10                 | ' return val
16e10     00 FB 01 F6 | 	mov	result1, _var01
16e14                 | _hg010b_spin2_fillpop_ret
16e14     2D 00 64 FD | 	ret
16e18                 | 
16e18                 | ' 
16e18                 | '       
16e18                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
16e18                 | _hg010b_spin2_fill
16e18     0B 4A 05 F6 | 	mov	COUNT_, #11
16e1c     A8 00 A0 FD | 	call	#pushregs_
16e20                 | ' 
16e20                 | ' newcolor:=newcolor & 255
16e20     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
16e24                 | ' oldcolor:=oldcolor & 255
16e24     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
16e28                 | ' 
16e28                 | ' if (oldcolor == newcolor) 
16e28     0F 21 0A F2 | 	cmp	local02, local01 wz
16e2c                 | '   return
16e2c     70 02 90 AD |  if_e	jmp	#LR__1819
16e30                 | ' 
16e30                 | ' fillptr:=0
16e30     0B 00 00 FF 
16e34     B6 E4 05 F1 | 	add	objptr, ##5814
16e38     F2 00 68 FC | 	wrlong	#0, objptr
16e3c                 | ' fillmax:=0
16e3c     04 E4 05 F1 | 	add	objptr, #4
16e40     F2 00 68 FC | 	wrlong	#0, objptr
16e44     0B 00 00 FF 
16e48     BA E4 85 F1 | 	sub	objptr, ##5818
16e4c                 | ' fillpush(x)
16e4c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
16e50                 | ' fillpush(y)
16e50     0A 13 02 F6 | 	mov	arg01, arg02
16e54     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
16e58                 | ' y:=fillpop()
16e58     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
16e5c     FD 22 02 F6 | 	mov	local03, result1
16e60                 | ' x:=fillpop()
16e60     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
16e64     FD 24 02 F6 | 	mov	local04, result1
16e68                 | ' 'pinhigh(38)
16e68                 | ' repeat while (x>-1)       
16e68                 | LR__1810
16e68     00 24 56 F2 | 	cmps	local04, #0 wc
16e6c     30 02 90 CD |  if_b	jmp	#LR__1818
16e70                 | '  ' pintoggle(39)
16e70                 | '   x1 := x
16e70     12 27 02 F6 | 	mov	local05, local04
16e74                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
16e74                 | LR__1811
16e74     00 28 06 F6 | 	mov	local06, #0
16e78     00 2A 06 F6 | 	mov	local07, #0
16e7c     00 26 56 F2 | 	cmps	local05, #0 wc
16e80     01 2A 66 36 |  if_ae	neg	local07, #1
16e84     00 2A 0E F2 | 	cmp	local07, #0 wz
16e88     00 28 26 56 |  if_ne	not	local06, #0
16e8c     00 2C 06 F6 | 	mov	local08, #0
16e90     00 2E 06 F6 | 	mov	local09, #0
16e94     11 15 02 F6 | 	mov	arg02, local03
16e98     13 13 02 F6 | 	mov	arg01, local05
16e9c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
16ea0     10 FB 09 F2 | 	cmp	result1, local02 wz
16ea4     00 2E 26 A6 |  if_e	not	local09, #0
16ea8     00 2E 0E F2 | 	cmp	local09, #0 wz
16eac     00 2C 26 56 |  if_ne	not	local08, #0
16eb0     16 29 CA F7 | 	test	local06, local08 wz
16eb4                 | '     x1--
16eb4     01 26 86 51 |  if_ne	sub	local05, #1
16eb8     B8 FF 9F 5D |  if_ne	jmp	#LR__1811
16ebc                 | '   x1++
16ebc     01 26 06 F1 | 	add	local05, #1
16ec0                 | '   spanabove := 0
16ec0     00 30 06 F6 | 	mov	local10, #0
16ec4                 | '   spanbelow := 0
16ec4     00 32 06 F6 | 	mov	local11, #0
16ec8                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
16ec8                 | LR__1812
16ec8     00 28 06 F6 | 	mov	local06, #0
16ecc     02 00 00 FF 
16ed0     00 26 56 F2 | 	cmps	local05, ##1024 wc
16ed4     00 28 26 C6 |  if_b	not	local06, #0
16ed8     00 2C 06 F6 | 	mov	local08, #0
16edc     00 2E 06 F6 | 	mov	local09, #0
16ee0     11 15 02 F6 | 	mov	arg02, local03
16ee4     13 13 02 F6 | 	mov	arg01, local05
16ee8     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
16eec     10 FB 09 F2 | 	cmp	result1, local02 wz
16ef0     00 2E 26 A6 |  if_e	not	local09, #0
16ef4     00 2E 0E F2 | 	cmp	local09, #0 wz
16ef8     00 2C 26 56 |  if_ne	not	local08, #0
16efc     16 29 CA F7 | 	test	local06, local08 wz
16f00     88 01 90 AD |  if_e	jmp	#LR__1817
16f04                 | '     putpixel2 (x1,y, newcolor & 255)
16f04     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
16f08     13 13 02 F6 | 	mov	arg01, local05
16f0c     11 15 02 F6 | 	mov	arg02, local03
16f10     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
16f14                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
16f14     00 28 06 F6 | 	mov	local06, #0
16f18     00 2A 06 F6 | 	mov	local07, #0
16f1c     00 30 0E F2 | 	cmp	local10, #0 wz
16f20     01 22 56 A2 |  if_e	cmps	local03, #1 wc
16f24     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
16f28     00 2A 0E F2 | 	cmp	local07, #0 wz
16f2c     00 28 26 56 |  if_ne	not	local06, #0
16f30     00 2C 06 F6 | 	mov	local08, #0
16f34     00 2E 06 F6 | 	mov	local09, #0
16f38     11 15 02 F6 | 	mov	arg02, local03
16f3c     01 14 86 F1 | 	sub	arg02, #1
16f40     13 13 02 F6 | 	mov	arg01, local05
16f44     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
16f48     10 FB 09 F2 | 	cmp	result1, local02 wz
16f4c     00 2E 26 A6 |  if_e	not	local09, #0
16f50     00 2E 0E F2 | 	cmp	local09, #0 wz
16f54     00 2C 26 56 |  if_ne	not	local08, #0
16f58     16 29 CA F7 | 	test	local06, local08 wz
16f5c     1C 00 90 AD |  if_e	jmp	#LR__1813
16f60                 | '       fillpush(x1)
16f60     13 13 02 F6 | 	mov	arg01, local05
16f64     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
16f68                 | '       fillpush(y-1)
16f68     11 13 02 F6 | 	mov	arg01, local03
16f6c     01 12 86 F1 | 	sub	arg01, #1
16f70     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
16f74                 | '       spanabove := 1 
16f74     01 30 06 F6 | 	mov	local10, #1
16f78     4C 00 90 FD | 	jmp	#LR__1814
16f7c                 | LR__1813
16f7c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
16f7c     00 28 06 F6 | 	mov	local06, #0
16f80     00 2A 06 F6 | 	mov	local07, #0
16f84     00 30 0E F2 | 	cmp	local10, #0 wz
16f88     01 22 56 52 |  if_ne	cmps	local03, #1 wc
16f8c     01 2A 66 16 |  if_a	neg	local07, #1
16f90     00 2A 0E F2 | 	cmp	local07, #0 wz
16f94     00 28 26 56 |  if_ne	not	local06, #0
16f98     00 2C 06 F6 | 	mov	local08, #0
16f9c     00 2E 06 F6 | 	mov	local09, #0
16fa0     11 15 02 F6 | 	mov	arg02, local03
16fa4     01 14 86 F1 | 	sub	arg02, #1
16fa8     13 13 02 F6 | 	mov	arg01, local05
16fac     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
16fb0     10 FB 09 F2 | 	cmp	result1, local02 wz
16fb4     00 2E 26 56 |  if_ne	not	local09, #0
16fb8     00 2E 0E F2 | 	cmp	local09, #0 wz
16fbc     00 2C 26 56 |  if_ne	not	local08, #0
16fc0     16 29 CA F7 | 	test	local06, local08 wz
16fc4                 | '       spanabove := 0 
16fc4     00 30 06 56 |  if_ne	mov	local10, #0
16fc8                 | LR__1814
16fc8                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
16fc8     00 28 06 F6 | 	mov	local06, #0
16fcc     00 2A 06 F6 | 	mov	local07, #0
16fd0     00 32 0E F2 | 	cmp	local11, #0 wz
16fd4     01 00 00 AF 
16fd8     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
16fdc     01 2A 66 86 |  if_c_and_z	neg	local07, #1
16fe0     00 2A 0E F2 | 	cmp	local07, #0 wz
16fe4     00 28 26 56 |  if_ne	not	local06, #0
16fe8     00 2C 06 F6 | 	mov	local08, #0
16fec     00 2E 06 F6 | 	mov	local09, #0
16ff0     11 15 02 F6 | 	mov	arg02, local03
16ff4     01 14 06 F1 | 	add	arg02, #1
16ff8     13 13 02 F6 | 	mov	arg01, local05
16ffc     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
17000     10 FB 09 F2 | 	cmp	result1, local02 wz
17004     00 2E 26 A6 |  if_e	not	local09, #0
17008     00 2E 0E F2 | 	cmp	local09, #0 wz
1700c     00 2C 26 56 |  if_ne	not	local08, #0
17010     16 29 CA F7 | 	test	local06, local08 wz
17014     1C 00 90 AD |  if_e	jmp	#LR__1815
17018                 | '       fillpush(x1)
17018     13 13 02 F6 | 	mov	arg01, local05
1701c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
17020                 | '       fillpush(y + 1)
17020     11 13 02 F6 | 	mov	arg01, local03
17024     01 12 06 F1 | 	add	arg01, #1
17028     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1702c                 | '       spanBelow := 1
1702c     01 32 06 F6 | 	mov	local11, #1
17030     50 00 90 FD | 	jmp	#LR__1816
17034                 | LR__1815
17034                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
17034     00 28 06 F6 | 	mov	local06, #0
17038     00 2A 06 F6 | 	mov	local07, #0
1703c     00 32 0E F2 | 	cmp	local11, #0 wz
17040     01 00 00 5F 
17044     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
17048     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1704c     00 2A 0E F2 | 	cmp	local07, #0 wz
17050     00 28 26 56 |  if_ne	not	local06, #0
17054     00 2C 06 F6 | 	mov	local08, #0
17058     00 2E 06 F6 | 	mov	local09, #0
1705c     11 15 02 F6 | 	mov	arg02, local03
17060     01 14 06 F1 | 	add	arg02, #1
17064     13 13 02 F6 | 	mov	arg01, local05
17068     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1706c     10 FB 09 F2 | 	cmp	result1, local02 wz
17070     00 2E 26 56 |  if_ne	not	local09, #0
17074     00 2E 0E F2 | 	cmp	local09, #0 wz
17078     00 2C 26 56 |  if_ne	not	local08, #0
1707c     16 29 CA F7 | 	test	local06, local08 wz
17080                 | '       spanbelow := 0
17080     00 32 06 56 |  if_ne	mov	local11, #0
17084                 | LR__1816
17084                 | '     x1++
17084     01 26 06 F1 | 	add	local05, #1
17088     3C FE 9F FD | 	jmp	#LR__1812
1708c                 | LR__1817
1708c                 | '   y:=fillpop()
1708c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
17090     FD 22 02 F6 | 	mov	local03, result1
17094                 | '   x:=fillpop()
17094     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
17098     FD 24 02 F6 | 	mov	local04, result1
1709c     C8 FD 9F FD | 	jmp	#LR__1810
170a0                 | LR__1818
170a0                 | LR__1819
170a0     A7 F0 03 F6 | 	mov	ptra, fp
170a4     B2 00 A0 FD | 	call	#popregs_
170a8                 | _hg010b_spin2_fill_ret
170a8     2D 00 64 FD | 	ret
170ac                 | 
170ac                 | ' 'pinlow(38)    
170ac                 | ' 
170ac                 | ' '-- A filled circle -----------------------------------------------------
170ac                 | ' 
170ac                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
170ac                 | _hg010b_spin2_fcircle
170ac     08 4A 05 F6 | 	mov	COUNT_, #8
170b0     A8 00 A0 FD | 	call	#pushregs_
170b4     0B 1F 02 F6 | 	mov	local01, arg03
170b8     FF FF 7F FF 
170bc     FE 1F 06 FD | 	qmul	local01, ##-2
170c0     09 21 02 F6 | 	mov	local02, arg01
170c4     0A 23 02 F6 | 	mov	local03, arg02
170c8     0C 25 02 F6 | 	mov	local04, arg04
170cc                 | ' 
170cc                 | ' d:=5-4*r
170cc     0F 19 02 F6 | 	mov	arg04, local01
170d0     02 18 66 F0 | 	shl	arg04, #2
170d4     05 26 06 F6 | 	mov	local05, #5
170d8     0C 27 82 F1 | 	sub	local05, arg04
170dc                 | ' x:=0
170dc     00 28 06 F6 | 	mov	local06, #0
170e0                 | ' y:=r
170e0                 | ' da:=(-2*r+5)*4
170e0                 | ' db:=3*4
170e0     0C 2A 06 F6 | 	mov	local07, #12
170e4                 | ' repeat while (x<=y) 
170e4     18 2C 62 FD | 	getqx	local08
170e8     05 2C 06 F1 | 	add	local08, #5
170ec     02 2C 66 F0 | 	shl	local08, #2
170f0                 | LR__1820
170f0     0F 29 5A F2 | 	cmps	local06, local01 wcz
170f4     B4 00 90 1D |  if_a	jmp	#LR__1822
170f8                 | '   fastline(x0-x,x0+x,y0-y,c)
170f8     10 13 02 F6 | 	mov	arg01, local02
170fc     14 13 82 F1 | 	sub	arg01, local06
17100     10 15 02 F6 | 	mov	arg02, local02
17104     14 15 02 F1 | 	add	arg02, local06
17108     11 17 02 F6 | 	mov	arg03, local03
1710c     0F 17 82 F1 | 	sub	arg03, local01
17110     12 19 02 F6 | 	mov	arg04, local04
17114     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17118                 | '   fastline(x0-x,x0+x,y0+y,c)
17118     10 13 02 F6 | 	mov	arg01, local02
1711c     14 13 82 F1 | 	sub	arg01, local06
17120     10 15 02 F6 | 	mov	arg02, local02
17124     14 15 02 F1 | 	add	arg02, local06
17128     11 17 02 F6 | 	mov	arg03, local03
1712c     0F 17 02 F1 | 	add	arg03, local01
17130     12 19 02 F6 | 	mov	arg04, local04
17134     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17138                 | '   fastline(x0-y,x0+y,y0-x,c)
17138     10 13 02 F6 | 	mov	arg01, local02
1713c     0F 13 82 F1 | 	sub	arg01, local01
17140     10 15 02 F6 | 	mov	arg02, local02
17144     0F 15 02 F1 | 	add	arg02, local01
17148     11 17 02 F6 | 	mov	arg03, local03
1714c     14 17 82 F1 | 	sub	arg03, local06
17150     12 19 02 F6 | 	mov	arg04, local04
17154     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
17158                 | '   fastline(x0-y,x0+y,y0+x,c)
17158     10 13 02 F6 | 	mov	arg01, local02
1715c     0F 13 82 F1 | 	sub	arg01, local01
17160     10 15 02 F6 | 	mov	arg02, local02
17164     0F 15 02 F1 | 	add	arg02, local01
17168     11 17 02 F6 | 	mov	arg03, local03
1716c     14 17 02 F1 | 	add	arg03, local06
17170     12 19 02 F6 | 	mov	arg04, local04
17174     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
17178                 | '   if d>0 
17178     01 26 56 F2 | 	cmps	local05, #1 wc
1717c     18 00 90 CD |  if_b	jmp	#LR__1821
17180                 | '     d+=da
17180     16 27 02 F1 | 	add	local05, local08
17184                 | '     y-=1
17184     01 1E 86 F1 | 	sub	local01, #1
17188                 | '     x+=1
17188     01 28 06 F1 | 	add	local06, #1
1718c                 | '     da+=4*4
1718c     10 2C 06 F1 | 	add	local08, #16
17190                 | '     db+=2*4
17190     08 2A 06 F1 | 	add	local07, #8
17194     58 FF 9F FD | 	jmp	#LR__1820
17198                 | LR__1821
17198                 | '   else
17198                 | '     d+=db
17198     15 27 02 F1 | 	add	local05, local07
1719c                 | '     x+=1
1719c     01 28 06 F1 | 	add	local06, #1
171a0                 | '     da+=2*4
171a0     08 2C 06 F1 | 	add	local08, #8
171a4                 | '     db+=2*4
171a4     08 2A 06 F1 | 	add	local07, #8
171a8     44 FF 9F FD | 	jmp	#LR__1820
171ac                 | LR__1822
171ac     A7 F0 03 F6 | 	mov	ptra, fp
171b0     B2 00 A0 FD | 	call	#popregs_
171b4                 | _hg010b_spin2_fcircle_ret
171b4     2D 00 64 FD | 	ret
171b8                 | 
171b8                 | '  
171b8                 | ' '-- A circle ------------------------------------------------------------ 
171b8                 | '  
171b8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
171b8                 | _hg010b_spin2_circle
171b8     08 4A 05 F6 | 	mov	COUNT_, #8
171bc     A8 00 A0 FD | 	call	#pushregs_
171c0     0B 1F 02 F6 | 	mov	local01, arg03
171c4     FF FF 7F FF 
171c8     FE 1F 06 FD | 	qmul	local01, ##-2
171cc     09 21 02 F6 | 	mov	local02, arg01
171d0     0A 23 02 F6 | 	mov	local03, arg02
171d4     0C 25 02 F6 | 	mov	local04, arg04
171d8                 | ' 
171d8                 | '  
171d8                 | ' d:=5-4*r
171d8     0F 19 02 F6 | 	mov	arg04, local01
171dc     02 18 66 F0 | 	shl	arg04, #2
171e0     05 26 06 F6 | 	mov	local05, #5
171e4     0C 27 82 F1 | 	sub	local05, arg04
171e8                 | ' x:=0
171e8     00 28 06 F6 | 	mov	local06, #0
171ec                 | ' y:=r
171ec                 | ' da:=(-2*r+5)*4
171ec                 | ' db:=3*4
171ec     0C 2A 06 F6 | 	mov	local07, #12
171f0                 | ' repeat while (x<=y) 
171f0     18 2C 62 FD | 	getqx	local08
171f4     05 2C 06 F1 | 	add	local08, #5
171f8     02 2C 66 F0 | 	shl	local08, #2
171fc                 | LR__1830
171fc     0F 29 5A F2 | 	cmps	local06, local01 wcz
17200     F4 00 90 1D |  if_a	jmp	#LR__1832
17204                 | '   putpixel(x0-x,y0-y,c)
17204     10 13 02 F6 | 	mov	arg01, local02
17208     14 13 82 F1 | 	sub	arg01, local06
1720c     11 15 02 F6 | 	mov	arg02, local03
17210     0F 15 82 F1 | 	sub	arg02, local01
17214     12 17 02 F6 | 	mov	arg03, local04
17218     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1721c                 | '   putpixel(x0-x,y0+y,c)
1721c     10 13 02 F6 | 	mov	arg01, local02
17220     14 13 82 F1 | 	sub	arg01, local06
17224     11 15 02 F6 | 	mov	arg02, local03
17228     0F 15 02 F1 | 	add	arg02, local01
1722c     12 17 02 F6 | 	mov	arg03, local04
17230     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17234                 | '   putpixel(x0+x,y0-y,c)
17234     10 13 02 F6 | 	mov	arg01, local02
17238     14 13 02 F1 | 	add	arg01, local06
1723c     11 15 02 F6 | 	mov	arg02, local03
17240     0F 15 82 F1 | 	sub	arg02, local01
17244     12 17 02 F6 | 	mov	arg03, local04
17248     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1724c                 | '   putpixel(x0+x,y0+y,c)
1724c     10 13 02 F6 | 	mov	arg01, local02
17250     14 13 02 F1 | 	add	arg01, local06
17254     11 15 02 F6 | 	mov	arg02, local03
17258     0F 15 02 F1 | 	add	arg02, local01
1725c     12 17 02 F6 | 	mov	arg03, local04
17260     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
17264                 | '   putpixel(x0-y,y0-x,c)
17264     10 13 02 F6 | 	mov	arg01, local02
17268     0F 13 82 F1 | 	sub	arg01, local01
1726c     11 15 02 F6 | 	mov	arg02, local03
17270     14 15 82 F1 | 	sub	arg02, local06
17274     12 17 02 F6 | 	mov	arg03, local04
17278     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1727c                 | '   putpixel(x0-y,y0+x,c)
1727c     10 13 02 F6 | 	mov	arg01, local02
17280     0F 13 82 F1 | 	sub	arg01, local01
17284     11 15 02 F6 | 	mov	arg02, local03
17288     14 15 02 F1 | 	add	arg02, local06
1728c     12 17 02 F6 | 	mov	arg03, local04
17290     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
17294                 | '   putpixel(x0+y,y0-x,c)
17294     10 13 02 F6 | 	mov	arg01, local02
17298     0F 13 02 F1 | 	add	arg01, local01
1729c     11 15 02 F6 | 	mov	arg02, local03
172a0     14 15 82 F1 | 	sub	arg02, local06
172a4     12 17 02 F6 | 	mov	arg03, local04
172a8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
172ac                 | '   putpixel(x0+y,y0+x,c)
172ac     10 13 02 F6 | 	mov	arg01, local02
172b0     0F 13 02 F1 | 	add	arg01, local01
172b4     11 15 02 F6 | 	mov	arg02, local03
172b8     14 15 02 F1 | 	add	arg02, local06
172bc     12 17 02 F6 | 	mov	arg03, local04
172c0     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
172c4                 | '   if d>0 
172c4     01 26 56 F2 | 	cmps	local05, #1 wc
172c8     18 00 90 CD |  if_b	jmp	#LR__1831
172cc                 | '     d+=da
172cc     16 27 02 F1 | 	add	local05, local08
172d0                 | '     y-=1
172d0     01 1E 86 F1 | 	sub	local01, #1
172d4                 | '     x+=1
172d4     01 28 06 F1 | 	add	local06, #1
172d8                 | '     da+=4*4
172d8     10 2C 06 F1 | 	add	local08, #16
172dc                 | '     db+=2*4
172dc     08 2A 06 F1 | 	add	local07, #8
172e0     18 FF 9F FD | 	jmp	#LR__1830
172e4                 | LR__1831
172e4                 | '   else
172e4                 | '     d+=db
172e4     15 27 02 F1 | 	add	local05, local07
172e8                 | '     x+=1
172e8     01 28 06 F1 | 	add	local06, #1
172ec                 | '     da+=2*4
172ec     08 2C 06 F1 | 	add	local08, #8
172f0                 | '     db+=2*4
172f0     08 2A 06 F1 | 	add	local07, #8
172f4     04 FF 9F FD | 	jmp	#LR__1830
172f8                 | LR__1832
172f8     A7 F0 03 F6 | 	mov	ptra, fp
172fc     B2 00 A0 FD | 	call	#popregs_
17300                 | _hg010b_spin2_circle_ret
17300     2D 00 64 FD | 	ret
17304                 | 
17304                 | '     
17304                 | ' '-- A frame (an empty rectangle) ---------------------------------------
17304                 | ' 
17304                 | ' pub frame(x1,y1,x2,y2,c)
17304                 | _hg010b_spin2_frame
17304     05 4A 05 F6 | 	mov	COUNT_, #5
17308     A8 00 A0 FD | 	call	#pushregs_
1730c     09 1F 02 F6 | 	mov	local01, arg01
17310     0A 21 02 F6 | 	mov	local02, arg02
17314     0B 23 02 F6 | 	mov	local03, arg03
17318     0C 25 02 F6 | 	mov	local04, arg04
1731c     0D 27 02 F6 | 	mov	local05, arg05
17320                 | ' 
17320                 | ' fastline(x1,x2,y1,c)
17320     0F 13 02 F6 | 	mov	arg01, local01
17324     11 15 02 F6 | 	mov	arg02, local03
17328     10 17 02 F6 | 	mov	arg03, local02
1732c     13 19 02 F6 | 	mov	arg04, local05
17330     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
17334                 | ' fastline(x1,x2,y2,c)
17334     0F 13 02 F6 | 	mov	arg01, local01
17338     11 15 02 F6 | 	mov	arg02, local03
1733c     12 17 02 F6 | 	mov	arg03, local04
17340     13 19 02 F6 | 	mov	arg04, local05
17344     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
17348                 | ' line(x1,y1,x1,y2,c)
17348     0F 13 02 F6 | 	mov	arg01, local01
1734c     10 15 02 F6 | 	mov	arg02, local02
17350     0F 17 02 F6 | 	mov	arg03, local01
17354     12 19 02 F6 | 	mov	arg04, local04
17358     13 1B 02 F6 | 	mov	arg05, local05
1735c                 | ' draw(x1,y1,x2,y2,c)
1735c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
17360                 | ' line(x2,y1,x2,y2,c)
17360     11 13 02 F6 | 	mov	arg01, local03
17364     10 15 02 F6 | 	mov	arg02, local02
17368     11 17 02 F6 | 	mov	arg03, local03
1736c     12 19 02 F6 | 	mov	arg04, local04
17370     13 1B 02 F6 | 	mov	arg05, local05
17374                 | ' draw(x1,y1,x2,y2,c)
17374     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
17378     A7 F0 03 F6 | 	mov	ptra, fp
1737c     B2 00 A0 FD | 	call	#popregs_
17380                 | _hg010b_spin2_frame_ret
17380     2D 00 64 FD | 	ret
17384                 | 
17384                 | ' 
17384                 | ' '-- A box (a filled rectangle) ----------------------------------------
17384                 | ' 
17384                 | ' pub box(x1,y1,x2,y2,c) |yy
17384                 | _hg010b_spin2_box
17384     06 4A 05 F6 | 	mov	COUNT_, #6
17388     A8 00 A0 FD | 	call	#pushregs_
1738c     09 1F 02 F6 | 	mov	local01, arg01
17390     0A 21 02 F6 | 	mov	local02, arg02
17394     0B 23 02 F6 | 	mov	local03, arg03
17398     0C 25 02 F6 | 	mov	local04, arg04
1739c     0D 27 02 F6 | 	mov	local05, arg05
173a0                 | ' 
173a0                 | ' repeat yy from y1 to y2
173a0     10 25 52 F2 | 	cmps	local04, local02 wc
173a4     01 28 86 F6 | 	negc	local06, #1
173a8     14 25 02 F1 | 	add	local04, local06
173ac                 | LR__1840
173ac                 | '   fastline(x1,x2,yy,c)
173ac     0F 13 02 F6 | 	mov	arg01, local01
173b0     11 15 02 F6 | 	mov	arg02, local03
173b4     13 19 02 F6 | 	mov	arg04, local05
173b8     10 17 02 F6 | 	mov	arg03, local02
173bc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
173c0     14 21 02 F1 | 	add	local02, local06
173c4     12 21 0A F2 | 	cmp	local02, local04 wz
173c8     E0 FF 9F 5D |  if_ne	jmp	#LR__1840
173cc     A7 F0 03 F6 | 	mov	ptra, fp
173d0     B2 00 A0 FD | 	call	#popregs_
173d4                 | _hg010b_spin2_box_ret
173d4     2D 00 64 FD | 	ret
173d8                 | 
173d8                 | '       
173d8                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
173d8                 | _hg010b_spin2_putcharxycgf
173d8                 | ' 
173d8                 | '  
173d8                 | ' repeat yy from 0 to 15
173d8     00 00 06 F6 | 	mov	_var01, #0
173dc     97 8C 48 FB | 	callpa	#(@LR__1852-@LR__1850)>>2,fcache_load_ptr_
173e0                 | LR__1850
173e0                 | ' 
173e0                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
173e0     91 E4 05 F1 | 	add	objptr, #145
173e4     F2 02 02 FB | 	rdlong	_var02, objptr
173e8     0A 02 66 F0 | 	shl	_var02, #10
173ec     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
173f0     01 05 02 F1 | 	add	_var03, _var02
173f4     0B 03 02 F6 | 	mov	_var02, arg03
173f8     04 02 66 F0 | 	shl	_var02, #4
173fc     01 05 02 F1 | 	add	_var03, _var02
17400     00 05 02 F1 | 	add	_var03, _var01
17404     02 05 C2 FA | 	rdbyte	_var03, _var03
17408                 | '   asm
17408     00 04 0E F4 | 	testb	_var03, #0 wz
1740c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
17410     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
17414     01 04 0E F4 | 	testb	_var03, #1 wz
17418     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1741c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
17420     02 04 0E F4 | 	testb	_var03, #2 wz
17424     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
17428     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1742c     03 04 0E F4 | 	testb	_var03, #3 wz
17430     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
17434     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
17438     04 04 0E F4 | 	testb	_var03, #4 wz
1743c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
17440     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
17444     05 04 0E F4 | 	testb	_var03, #5 wz
17448     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1744c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
17450     06 04 0E F4 | 	testb	_var03, #6 wz
17454     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
17458     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1745c     07 04 0E F4 | 	testb	_var03, #7 wz
17460     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
17464     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
17468                 | '   
17468                 | '   ccc[0]:=c1
17468     99 E5 05 F1 | 	add	objptr, #409
1746c     F2 06 62 FC | 	wrlong	_var04, objptr
17470                 | '   ccc[1]:=c2 
17470     04 E4 05 F1 | 	add	objptr, #4
17474     F2 08 62 FC | 	wrlong	_var05, objptr
17478                 | '   long[mailbox0][2]:=8
17478     49 E4 85 F1 | 	sub	objptr, #73
1747c     F2 04 02 FB | 	rdlong	_var03, objptr
17480     08 04 06 F1 | 	add	_var03, #8
17484     02 11 68 FC | 	wrlong	#8, _var03
17488                 | '   long[mailbox0][1]:=@ccc
17488     45 E4 05 F1 | 	add	objptr, #69
1748c     F2 04 02 F6 | 	mov	_var03, objptr
17490     45 E4 85 F1 | 	sub	objptr, #69
17494     F2 02 02 FB | 	rdlong	_var02, objptr
17498     04 02 06 F1 | 	add	_var02, #4
1749c     01 05 62 FC | 	wrlong	_var03, _var02
174a0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
174a0     0C E5 85 F1 | 	sub	objptr, #268
174a4     F2 04 02 FB | 	rdlong	_var03, objptr
174a8     0A 03 02 F6 | 	mov	_var02, arg02
174ac     00 03 02 F1 | 	add	_var02, _var01
174b0     0A 02 66 F0 | 	shl	_var02, #10
174b4     09 0B 02 F6 | 	mov	_var06, arg01
174b8     02 0A 66 F0 | 	shl	_var06, #2
174bc     05 03 02 F1 | 	add	_var02, _var06
174c0     01 05 02 F1 | 	add	_var03, _var02
174c4     00 00 78 FF 
174c8     00 04 06 F1 | 	add	_var03, ##-268435456
174cc     0C E5 05 F1 | 	add	objptr, #268
174d0     F2 0A 02 FB | 	rdlong	_var06, objptr
174d4     05 05 62 FC | 	wrlong	_var03, _var06
174d8                 | '   repeat
174d8                 | LR__1851
174d8     F2 04 02 FB | 	rdlong	_var03, objptr
174dc     02 03 02 FB | 	rdlong	_var02, _var03
174e0     00 02 56 F2 | 	cmps	_var02, #0 wc
174e4     F0 FF 9F CD |  if_b	jmp	#LR__1851
174e8     E5 E5 85 F1 | 	sub	objptr, #485
174ec     01 00 06 F1 | 	add	_var01, #1
174f0     10 00 56 F2 | 	cmps	_var01, #16 wc
174f4     E8 FE 9F CD |  if_b	jmp	#LR__1850
174f8                 | LR__1852
174f8                 | _hg010b_spin2_putcharxycgf_ret
174f8     2D 00 64 FD | 	ret
174fc                 | 
174fc                 | ' 
174fc                 | ' 
174fc                 | ' '**********************************************************************r***
174fc                 | ' '                                                                        *
174fc                 | ' ' Font related functions                                                 *
174fc                 | ' '                                                                        *
174fc                 | ' '*************************************************************************
174fc                 | ' 
174fc                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
174fc                 | ' 
174fc                 | ' pub setfontfamily(afontnum)
174fc                 | _hg010b_spin2_setfontfamily
174fc                 | ' 
174fc                 | ' font_family:=afontnum
174fc     91 E4 05 F1 | 	add	objptr, #145
17500     F2 12 62 FC | 	wrlong	arg01, objptr
17504     91 E4 85 F1 | 	sub	objptr, #145
17508                 | ' 'if afontnum==8
17508                 | ' '  font_ptr:=@amiga_font
17508                 | ' 
17508                 | ' if afontnum==4
17508     04 12 0E F2 | 	cmp	arg01, #4 wz
1750c                 | '   font_ptr:=@st_font
1750c     08 00 00 AF 
17510     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
17514     04 E4 05 A1 |  if_e	add	objptr, #4
17518     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1751c     04 E4 85 A1 |  if_e	sub	objptr, #4
17520     08 00 00 AF 
17524     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
17528                 | ' if afontnum==0
17528     00 12 0E F2 | 	cmp	arg01, #0 wz
1752c                 | '   font_ptr:=@vga_font
1752c     04 E4 05 A1 |  if_e	add	objptr, #4
17530     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
17534     04 E4 85 A1 |  if_e	sub	objptr, #4
17538                 | _hg010b_spin2_setfontfamily_ret
17538     2D 00 64 FD | 	ret
1753c                 | 
1753c                 | ' 
1753c                 | ' '*************************************************************************
1753c                 | ' '                                                                        *
1753c                 | ' '  Cursor functions                                                      *
1753c                 | ' '                                                                        *
1753c                 | ' '*************************************************************************
1753c                 | ' 
1753c                 | ' 
1753c                 | ' pub setcursorpos(x,y)
1753c                 | _hg010b_spin2_setcursorpos
1753c                 | ' 
1753c                 | ' ''---------- Set the (x,y) position of cursor
1753c                 | ' 
1753c                 | ' cursor_x:=x
1753c     38 E4 05 F1 | 	add	objptr, #56
17540     F2 12 52 FC | 	wrword	arg01, objptr
17544                 | ' cursor_y:=y
17544     02 E4 05 F1 | 	add	objptr, #2
17548     F2 14 42 FC | 	wrbyte	arg02, objptr
1754c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1754c     02 E4 85 F1 | 	sub	objptr, #2
17550     F2 14 E2 FA | 	rdword	arg02, objptr
17554     02 14 66 F0 | 	shl	arg02, #2
17558     02 E4 05 F1 | 	add	objptr, #2
1755c     F2 16 C2 FA | 	rdbyte	arg03, objptr
17560     3A E4 85 F1 | 	sub	objptr, #58
17564     04 16 66 F0 | 	shl	arg03, #4
17568     11 12 06 F6 | 	mov	arg01, #17
1756c     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
17570                 | _hg010b_spin2_setcursorpos_ret
17570     2D 00 64 FD | 	ret
17574                 | 
17574                 | ' 
17574                 | ' '*************************************************************************
17574                 | ' '                                                                        *
17574                 | ' '  VBlank functions                                                      *
17574                 | ' '                                                                        *
17574                 | ' '*************************************************************************
17574                 | ' 
17574                 | ' pub waitvbl(amount) | i
17574                 | _hg010b_spin2_waitvbl
17574     03 4A 05 F6 | 	mov	COUNT_, #3
17578     A8 00 A0 FD | 	call	#pushregs_
1757c     09 1F 02 F6 | 	mov	local01, arg01
17580                 | ' 
17580                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
17580                 | ' 
17580                 | ' repeat i from 1 to amount
17580     01 20 06 F6 | 	mov	local02, #1
17584     01 1E 56 F2 | 	cmps	local01, #1 wc
17588     01 22 86 F6 | 	negc	local03, #1
1758c     11 1F 02 F1 | 	add	local01, local03
17590                 | LR__1860
17590                 | '   repeat until vblank==0
17590                 | LR__1861
17590     45 E4 05 F1 | 	add	objptr, #69
17594     F2 12 0A FB | 	rdlong	arg01, objptr wz
17598     45 E4 85 F1 | 	sub	objptr, #69
1759c     0C 00 90 AD |  if_e	jmp	#LR__1862
175a0                 | '     waitus(100)
175a0     64 12 06 F6 | 	mov	arg01, #100
175a4     80 16 B0 FD | 	call	#__system___waitus
175a8     E4 FF 9F FD | 	jmp	#LR__1861
175ac                 | LR__1862
175ac                 | '   repeat until vblank==1
175ac                 | LR__1863
175ac     45 E4 05 F1 | 	add	objptr, #69
175b0     F2 12 02 FB | 	rdlong	arg01, objptr
175b4     45 E4 85 F1 | 	sub	objptr, #69
175b8     01 12 0E F2 | 	cmp	arg01, #1 wz
175bc     0C 00 90 AD |  if_e	jmp	#LR__1864
175c0                 | '     waitus(100)
175c0     64 12 06 F6 | 	mov	arg01, #100
175c4     60 16 B0 FD | 	call	#__system___waitus
175c8     E0 FF 9F FD | 	jmp	#LR__1863
175cc                 | LR__1864
175cc     11 21 02 F1 | 	add	local02, local03
175d0     0F 21 0A F2 | 	cmp	local02, local01 wz
175d4     B8 FF 9F 5D |  if_ne	jmp	#LR__1860
175d8     A7 F0 03 F6 | 	mov	ptra, fp
175dc     B2 00 A0 FD | 	call	#popregs_
175e0                 | _hg010b_spin2_waitvbl_ret
175e0     2D 00 64 FD | 	ret
175e4                 | 
175e4                 | ' 
175e4                 | ' 
175e4                 | ' pub cls(fc,bc)   :c,i
175e4                 | _hg010b_spin2_cls
175e4     02 4A 05 F6 | 	mov	COUNT_, #2
175e8     A8 00 A0 FD | 	call	#pushregs_
175ec     09 1F 02 F6 | 	mov	local01, arg01
175f0     0A 21 02 F6 | 	mov	local02, arg02
175f4                 | ' 
175f4                 | ' c:=bc
175f4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
175f4     D9 E4 05 F1 | 	add	objptr, #217
175f8     F2 12 02 FB | 	rdlong	arg01, objptr
175fc     A5 E4 85 F1 | 	sub	objptr, #165
17600     F2 16 02 FB | 	rdlong	arg03, objptr
17604     02 16 66 F0 | 	shl	arg03, #2
17608     10 15 02 F6 | 	mov	arg02, local02
1760c     00 18 06 F6 | 	mov	arg04, #0
17610     01 1A 06 F6 | 	mov	arg05, #1
17614     0B 00 00 FF 
17618     8C E4 05 F1 | 	add	objptr, ##5772
1761c     F0 08 B0 FD | 	call	#_psram_spin2_fill
17620                 | ' setwritecolors(fc,bc)
17620                 | ' 
17620                 | ' write_color:=ff
17620     0B 00 00 FF 
17624     83 E4 85 F1 | 	sub	objptr, ##5763
17628     F2 1E 62 FC | 	wrlong	local01, objptr
1762c                 | ' write_background:=bb
1762c     04 E4 05 F1 | 	add	objptr, #4
17630     F2 20 62 FC | 	wrlong	local02, objptr
17634                 | ' cursor_x:=0
17634     09 E4 85 F1 | 	sub	objptr, #9
17638     F2 00 58 FC | 	wrword	#0, objptr
1763c                 | ' cursor_y:=0
1763c     02 E4 05 F1 | 	add	objptr, #2
17640     F2 00 48 FC | 	wrbyte	#0, objptr
17644                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17644     02 E4 85 F1 | 	sub	objptr, #2
17648     F2 14 E2 FA | 	rdword	arg02, objptr
1764c     02 14 66 F0 | 	shl	arg02, #2
17650     02 E4 05 F1 | 	add	objptr, #2
17654     F2 16 C2 FA | 	rdbyte	arg03, objptr
17658     3A E4 85 F1 | 	sub	objptr, #58
1765c     04 16 66 F0 | 	shl	arg03, #4
17660     11 12 06 F6 | 	mov	arg01, #17
17664     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
17668                 | ' setcursorcolor(fc)
17668     0F 13 02 F6 | 	mov	arg01, local01
1766c     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
17670     10 FB 01 F6 | 	mov	result1, local02
17674     00 FC 05 F6 | 	mov	result2, #0
17678     A7 F0 03 F6 | 	mov	ptra, fp
1767c     B2 00 A0 FD | 	call	#popregs_
17680                 | _hg010b_spin2_cls_ret
17680     2D 00 64 FD | 	ret
17684                 | 
17684                 | ' 
17684                 | ' ''---------- Output a char at the cursor position, move the cursor 
17684                 | ' 
17684                 | ' pub putchar(achar) | c,x,y,l,newcpl
17684                 | _hg010b_spin2_putchar
17684     01 4A 05 F6 | 	mov	COUNT_, #1
17688     A8 00 A0 FD | 	call	#pushregs_
1768c     09 1F 02 F6 | 	mov	local01, arg01
17690                 | ' 
17690                 | ' if achar==10
17690     0A 1E 0E F2 | 	cmp	local01, #10 wz
17694                 | '   crlf()
17694     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
17698                 | ' if achar==9
17698     09 1E 0E F2 | 	cmp	local01, #9 wz
1769c     18 00 90 5D |  if_ne	jmp	#LR__1870
176a0                 | '   cursor_x:=(cursor_x& %11110000)+16
176a0     38 E4 05 F1 | 	add	objptr, #56
176a4     F2 16 E2 FA | 	rdword	arg03, objptr
176a8     F0 16 06 F5 | 	and	arg03, #240
176ac     10 16 06 F1 | 	add	arg03, #16
176b0     F2 16 52 FC | 	wrword	arg03, objptr
176b4     38 E4 85 F1 | 	sub	objptr, #56
176b8                 | LR__1870
176b8                 | '   
176b8                 | ' if (achar<>9) && (achar<>10) 
176b8     09 1E 0E F2 | 	cmp	local01, #9 wz
176bc     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
176c0     44 00 90 AD |  if_e	jmp	#LR__1871
176c4                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
176c4     38 E4 05 F1 | 	add	objptr, #56
176c8     F2 12 E2 FA | 	rdword	arg01, objptr
176cc     02 E4 05 F1 | 	add	objptr, #2
176d0     F2 14 C2 FA | 	rdbyte	arg02, objptr
176d4     04 14 66 F0 | 	shl	arg02, #4
176d8     03 E4 05 F1 | 	add	objptr, #3
176dc     F2 18 02 FB | 	rdlong	arg04, objptr
176e0     04 E4 05 F1 | 	add	objptr, #4
176e4     F2 1A 02 FB | 	rdlong	arg05, objptr
176e8     41 E4 85 F1 | 	sub	objptr, #65
176ec     0F 17 02 F6 | 	mov	arg03, local01
176f0     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
176f4                 | '   cursor_x+=2
176f4     38 E4 05 F1 | 	add	objptr, #56
176f8     F2 1E E2 FA | 	rdword	local01, objptr
176fc     02 1E 06 F1 | 	add	local01, #2
17700     F2 1E 52 FC | 	wrword	local01, objptr
17704     38 E4 85 F1 | 	sub	objptr, #56
17708                 | LR__1871
17708                 | ' 
17708                 | ' if cursor_x>=256
17708     38 E4 05 F1 | 	add	objptr, #56
1770c     F2 1E E2 FA | 	rdword	local01, objptr
17710     38 E4 85 F1 | 	sub	objptr, #56
17714     00 1F 56 F2 | 	cmps	local01, #256 wc
17718     64 00 90 CD |  if_b	jmp	#LR__1873
1771c                 | '   cursor_x:=0
1771c     38 E4 05 F1 | 	add	objptr, #56
17720     F2 00 58 FC | 	wrword	#0, objptr
17724                 | '   cursor_y+=1
17724     02 E4 05 F1 | 	add	objptr, #2
17728     F2 1E C2 FA | 	rdbyte	local01, objptr
1772c     01 1E 06 F1 | 	add	local01, #1
17730     F2 1E 42 FC | 	wrbyte	local01, objptr
17734                 | '   if cursor_y>st_lines-1
17734     C3 E4 05 F1 | 	add	objptr, #195
17738     F2 1E 02 FB | 	rdlong	local01, objptr
1773c     01 1E 86 F1 | 	sub	local01, #1
17740     C3 E4 85 F1 | 	sub	objptr, #195
17744     F2 16 C2 FA | 	rdbyte	arg03, objptr
17748     3A E4 85 F1 | 	sub	objptr, #58
1774c     0F 17 5A F2 | 	cmps	arg03, local01 wcz
17750     2C 00 90 ED |  if_be	jmp	#LR__1872
17754                 | '     scrollup()
17754     00 12 06 F6 | 	mov	arg01, #0
17758     01 00 00 FF 
1775c     40 14 06 F6 | 	mov	arg02, ##576
17760     10 16 06 F6 | 	mov	arg03, #16
17764     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
17768                 | '     cursor_y:=st_lines-1
17768     FD E4 05 F1 | 	add	objptr, #253
1776c     F2 1E 02 FB | 	rdlong	local01, objptr
17770     01 1E 86 F1 | 	sub	local01, #1
17774     C3 E4 85 F1 | 	sub	objptr, #195
17778     F2 1E 42 FC | 	wrbyte	local01, objptr
1777c     3A E4 85 F1 | 	sub	objptr, #58
17780                 | LR__1872
17780                 | LR__1873
17780                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
17780     38 E4 05 F1 | 	add	objptr, #56
17784     F2 14 E2 FA | 	rdword	arg02, objptr
17788     02 14 66 F0 | 	shl	arg02, #2
1778c     02 E4 05 F1 | 	add	objptr, #2
17790     F2 16 C2 FA | 	rdbyte	arg03, objptr
17794     3A E4 85 F1 | 	sub	objptr, #58
17798     04 16 66 F0 | 	shl	arg03, #4
1779c     11 12 06 F6 | 	mov	arg01, #17
177a0     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
177a4     A7 F0 03 F6 | 	mov	ptra, fp
177a8     B2 00 A0 FD | 	call	#popregs_
177ac                 | _hg010b_spin2_putchar_ret
177ac     2D 00 64 FD | 	ret
177b0                 | 
177b0                 | '     
177b0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
177b0                 | ' 
177b0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
177b0                 | _hg010b_spin2_putchar2
177b0     01 4A 05 F6 | 	mov	COUNT_, #1
177b4     A8 00 A0 FD | 	call	#pushregs_
177b8                 | ' 
177b8                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
177b8     38 E4 05 F1 | 	add	objptr, #56
177bc     F2 1E E2 FA | 	rdword	local01, objptr
177c0     02 E4 05 F1 | 	add	objptr, #2
177c4     F2 14 C2 FA | 	rdbyte	arg02, objptr
177c8     04 14 66 F0 | 	shl	arg02, #4
177cc     09 17 02 F6 | 	mov	arg03, arg01
177d0     03 E4 05 F1 | 	add	objptr, #3
177d4     F2 18 02 FB | 	rdlong	arg04, objptr
177d8     04 E4 05 F1 | 	add	objptr, #4
177dc     F2 1A 02 FB | 	rdlong	arg05, objptr
177e0     41 E4 85 F1 | 	sub	objptr, #65
177e4     0F 13 02 F6 | 	mov	arg01, local01
177e8     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
177ec                 | ' cursor_x+=2
177ec     38 E4 05 F1 | 	add	objptr, #56
177f0     F2 1E E2 FA | 	rdword	local01, objptr
177f4     02 1E 06 F1 | 	add	local01, #2
177f8     F2 1E 52 FC | 	wrword	local01, objptr
177fc                 | ' if cursor_x>=256
177fc     F2 1E E2 FA | 	rdword	local01, objptr
17800     38 E4 85 F1 | 	sub	objptr, #56
17804     00 1F 56 F2 | 	cmps	local01, #256 wc
17808     64 00 90 CD |  if_b	jmp	#LR__1881
1780c                 | '   cursor_x:=0
1780c     38 E4 05 F1 | 	add	objptr, #56
17810     F2 00 58 FC | 	wrword	#0, objptr
17814                 | '   cursor_y+=1
17814     02 E4 05 F1 | 	add	objptr, #2
17818     F2 1E C2 FA | 	rdbyte	local01, objptr
1781c     01 1E 06 F1 | 	add	local01, #1
17820     F2 1E 42 FC | 	wrbyte	local01, objptr
17824                 | '   if cursor_y>st_lines-1
17824     C3 E4 05 F1 | 	add	objptr, #195
17828     F2 1E 02 FB | 	rdlong	local01, objptr
1782c     01 1E 86 F1 | 	sub	local01, #1
17830     C3 E4 85 F1 | 	sub	objptr, #195
17834     F2 1A C2 FA | 	rdbyte	arg05, objptr
17838     3A E4 85 F1 | 	sub	objptr, #58
1783c     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
17840     2C 00 90 ED |  if_be	jmp	#LR__1880
17844                 | '     scrollup()
17844     00 12 06 F6 | 	mov	arg01, #0
17848     01 00 00 FF 
1784c     40 14 06 F6 | 	mov	arg02, ##576
17850     10 16 06 F6 | 	mov	arg03, #16
17854     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
17858                 | '     cursor_y:=st_lines-1
17858     FD E4 05 F1 | 	add	objptr, #253
1785c     F2 1E 02 FB | 	rdlong	local01, objptr
17860     01 1E 86 F1 | 	sub	local01, #1
17864     C3 E4 85 F1 | 	sub	objptr, #195
17868     F2 1E 42 FC | 	wrbyte	local01, objptr
1786c     3A E4 85 F1 | 	sub	objptr, #58
17870                 | LR__1880
17870                 | LR__1881
17870                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
17870     38 E4 05 F1 | 	add	objptr, #56
17874     F2 14 E2 FA | 	rdword	arg02, objptr
17878     02 14 66 F0 | 	shl	arg02, #2
1787c     02 E4 05 F1 | 	add	objptr, #2
17880     F2 16 C2 FA | 	rdbyte	arg03, objptr
17884     3A E4 85 F1 | 	sub	objptr, #58
17888     04 16 66 F0 | 	shl	arg03, #4
1788c     11 12 06 F6 | 	mov	arg01, #17
17890     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
17894     A7 F0 03 F6 | 	mov	ptra, fp
17898     B2 00 A0 FD | 	call	#popregs_
1789c                 | _hg010b_spin2_putchar2_ret
1789c     2D 00 64 FD | 	ret
178a0                 | 
178a0                 | ' ''--------- Output a string at the cursor position, move the cursor  
178a0                 | ' 
178a0                 | ' pub write(text) | iii,c,ncx,ncy
178a0                 | _hg010b_spin2_write
178a0     04 4A 05 F6 | 	mov	COUNT_, #4
178a4     A8 00 A0 FD | 	call	#pushregs_
178a8     09 1F 02 F6 | 	mov	local01, arg01
178ac                 | ' 
178ac                 | ' repeat iii from 0 to strsize(text)-1
178ac     00 20 06 F6 | 	mov	local02, #0
178b0     0F 13 02 F6 | 	mov	arg01, local01
178b4     09 23 02 F6 | 	mov	local03, arg01
178b8     97 06 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
178bc                 | LR__1890
178bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
178c0     01 22 06 51 |  if_ne	add	local03, #1
178c4     F4 FF 9F 5D |  if_ne	jmp	#LR__1890
178c8                 | LR__1891
178c8     09 23 82 F1 | 	sub	local03, arg01
178cc     01 22 86 F1 | 	sub	local03, #1
178d0     00 22 56 F2 | 	cmps	local03, #0 wc
178d4     01 24 86 F6 | 	negc	local04, #1
178d8     12 23 02 F1 | 	add	local03, local04
178dc                 | LR__1892
178dc                 | '   putchar2(byte[text+iii])
178dc     0F 13 02 F6 | 	mov	arg01, local01
178e0     10 13 02 F1 | 	add	arg01, local02
178e4     09 13 C2 FA | 	rdbyte	arg01, arg01
178e8     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
178ec     12 21 02 F1 | 	add	local02, local04
178f0     11 21 0A F2 | 	cmp	local02, local03 wz
178f4     E4 FF 9F 5D |  if_ne	jmp	#LR__1892
178f8     A7 F0 03 F6 | 	mov	ptra, fp
178fc     B2 00 A0 FD | 	call	#popregs_
17900                 | _hg010b_spin2_write_ret
17900     2D 00 64 FD | 	ret
17904                 | 
17904                 | ' 
17904                 | ' ''-----------  Scroll the screen one line up
17904                 | ' 
17904                 | ' pub scrollup(start=0, end=576 , amount=16) | i
17904                 | _hg010b_spin2_scrollup
17904     01 4A 05 F6 | 	mov	COUNT_, #1
17908     A8 00 A0 FD | 	call	#pushregs_
1790c                 | ' 	
1790c                 | ' repeat i from 0 to 559 
1790c     00 1E 06 F6 | 	mov	local01, #0
17910                 | LR__1900
17910     F5 E4 05 F1 | 	add	objptr, #245
17914     F2 18 02 FB | 	rdlong	arg04, objptr
17918     1C E4 85 F1 | 	sub	objptr, #28
1791c     F2 14 02 FB | 	rdlong	arg02, objptr
17920     0F 13 02 F6 | 	mov	arg01, local01
17924     10 12 06 F1 | 	add	arg01, #16
17928     02 12 66 F0 | 	shl	arg01, #2
1792c     14 E4 05 F1 | 	add	objptr, #20
17930     F2 16 02 FB | 	rdlong	arg03, objptr
17934     0B 13 02 FD | 	qmul	arg01, arg03
17938                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
17938     F6 03 00 FF 
1793c     00 12 06 F6 | 	mov	arg01, ##519168
17940     0C 13 82 F1 | 	sub	arg01, arg04
17944     02 16 66 F0 | 	shl	arg03, #2
17948     0A 00 00 FF 
1794c     D3 E5 05 F1 | 	add	objptr, ##5587
17950     18 18 62 FD | 	getqx	arg04
17954     0C 15 02 F1 | 	add	arg02, arg04
17958     7C 04 B0 FD | 	call	#_psram_spin2_read1
1795c     0A 00 00 FF 
17960     CB E5 85 F1 | 	sub	objptr, ##5579
17964     F2 18 02 FB | 	rdlong	arg04, objptr
17968     1C E4 85 F1 | 	sub	objptr, #28
1796c     F2 14 02 FB | 	rdlong	arg02, objptr
17970     0F 13 02 F6 | 	mov	arg01, local01
17974     02 12 66 F0 | 	shl	arg01, #2
17978     14 E4 05 F1 | 	add	objptr, #20
1797c     F2 16 02 FB | 	rdlong	arg03, objptr
17980     0B 13 02 FD | 	qmul	arg01, arg03
17984                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
17984     F6 03 00 FF 
17988     00 12 06 F6 | 	mov	arg01, ##519168
1798c     0C 13 82 F1 | 	sub	arg01, arg04
17990     02 16 66 F0 | 	shl	arg03, #2
17994     0A 00 00 FF 
17998     D3 E5 05 F1 | 	add	objptr, ##5587
1799c     18 18 62 FD | 	getqx	arg04
179a0     0C 15 02 F1 | 	add	arg02, arg04
179a4     CC 04 B0 FD | 	call	#_psram_spin2_write
179a8     0B 00 00 FF 
179ac     C0 E4 85 F1 | 	sub	objptr, ##5824
179b0     01 1E 06 F1 | 	add	local01, #1
179b4     01 00 00 FF 
179b8     30 1E 56 F2 | 	cmps	local01, ##560 wc
179bc     50 FF 9F CD |  if_b	jmp	#LR__1900
179c0                 | ' 
179c0                 | ' repeat i from 560 to 575
179c0     01 00 00 FF 
179c4     30 1E 06 F6 | 	mov	local01, ##560
179c8                 | LR__1901
179c8                 | '    fastline(0,1023,i,write_background)   
179c8     41 E4 05 F1 | 	add	objptr, #65
179cc     F2 18 02 FB | 	rdlong	arg04, objptr
179d0     41 E4 85 F1 | 	sub	objptr, #65
179d4     00 12 06 F6 | 	mov	arg01, #0
179d8     09 14 CE F9 | 	bmask	arg02, #9
179dc     0F 17 02 F6 | 	mov	arg03, local01
179e0     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
179e4     01 1E 06 F1 | 	add	local01, #1
179e8     01 00 00 FF 
179ec     40 1E 16 F2 | 	cmp	local01, ##576 wc
179f0     D4 FF 9F CD |  if_b	jmp	#LR__1901
179f4     A7 F0 03 F6 | 	mov	ptra, fp
179f8     B2 00 A0 FD | 	call	#popregs_
179fc                 | _hg010b_spin2_scrollup_ret
179fc     2D 00 64 FD | 	ret
17a00                 | 
17a00                 | ' 
17a00                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
17a00                 | ' 
17a00                 | ' pub crlf()
17a00                 | _hg010b_spin2_crlf
17a00                 | ' 
17a00                 | ' cursor_x:=leading_spaces*2
17a00     01 00 00 FF 
17a04     B2 E4 05 F1 | 	add	objptr, ##690
17a08     F2 16 02 FB | 	rdlong	arg03, objptr
17a0c     01 16 66 F0 | 	shl	arg03, #1
17a10     01 00 00 FF 
17a14     7A E4 85 F1 | 	sub	objptr, ##634
17a18     F2 16 52 FC | 	wrword	arg03, objptr
17a1c                 | ' cursor_y+=1
17a1c     02 E4 05 F1 | 	add	objptr, #2
17a20     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a24     01 16 06 F1 | 	add	arg03, #1
17a28     F2 16 42 FC | 	wrbyte	arg03, objptr
17a2c                 | ' if cursor_y>st_lines-1
17a2c     C3 E4 05 F1 | 	add	objptr, #195
17a30     F2 16 02 FB | 	rdlong	arg03, objptr
17a34     01 16 86 F1 | 	sub	arg03, #1
17a38     C3 E4 85 F1 | 	sub	objptr, #195
17a3c     F2 14 C2 FA | 	rdbyte	arg02, objptr
17a40     3A E4 85 F1 | 	sub	objptr, #58
17a44     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
17a48     2C 00 90 ED |  if_be	jmp	#LR__1910
17a4c                 | '   scrollup()
17a4c     00 12 06 F6 | 	mov	arg01, #0
17a50     01 00 00 FF 
17a54     40 14 06 F6 | 	mov	arg02, ##576
17a58     10 16 06 F6 | 	mov	arg03, #16
17a5c     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
17a60                 | '   cursor_y:=st_lines-1
17a60     FD E4 05 F1 | 	add	objptr, #253
17a64     F2 16 02 FB | 	rdlong	arg03, objptr
17a68     01 16 86 F1 | 	sub	arg03, #1
17a6c     C3 E4 85 F1 | 	sub	objptr, #195
17a70     F2 16 42 FC | 	wrbyte	arg03, objptr
17a74     3A E4 85 F1 | 	sub	objptr, #58
17a78                 | LR__1910
17a78                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
17a78     38 E4 05 F1 | 	add	objptr, #56
17a7c     F2 14 E2 FA | 	rdword	arg02, objptr
17a80     02 14 66 F0 | 	shl	arg02, #2
17a84     02 E4 05 F1 | 	add	objptr, #2
17a88     F2 16 C2 FA | 	rdbyte	arg03, objptr
17a8c     3A E4 85 F1 | 	sub	objptr, #58
17a90     04 16 66 F0 | 	shl	arg03, #4
17a94     11 12 06 F6 | 	mov	arg01, #17
17a98     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
17a9c                 | _hg010b_spin2_crlf_ret
17a9c     2D 00 64 FD | 	ret
17aa0                 | 
17aa0                 | ' 
17aa0                 | ' 
17aa0                 | ' '*************************************************************************
17aa0                 | ' '                                                                        *
17aa0                 | ' '  Conversions                                                           *
17aa0                 | ' '                                                                        *
17aa0                 | ' '*************************************************************************
17aa0                 | ' 
17aa0                 | ' ''---------- Convert a integer to dec string, return a pointer
17aa0                 | ' 
17aa0                 | ' pub inttostr(i):result |q,pos,k,j
17aa0                 | _hg010b_spin2_inttostr
17aa0     03 4A 05 F6 | 	mov	COUNT_, #3
17aa4     A8 00 A0 FD | 	call	#pushregs_
17aa8     09 1F 0A F6 | 	mov	local01, arg01 wz
17aac                 | ' 
17aac                 | ' j:=i
17aac                 | ' pos:=10
17aac     0A 20 06 F6 | 	mov	local02, #10
17ab0                 | ' k:=0
17ab0     00 22 06 F6 | 	mov	local03, #0
17ab4                 | ' 
17ab4                 | ' if (j==0)
17ab4     18 00 90 5D |  if_ne	jmp	#LR__1920
17ab8                 | '   n_string[0]:=48
17ab8     49 E4 05 F1 | 	add	objptr, #73
17abc     F2 60 48 FC | 	wrbyte	#48, objptr
17ac0                 | '   n_string[1]:=0
17ac0     01 E4 05 F1 | 	add	objptr, #1
17ac4     F2 00 48 FC | 	wrbyte	#0, objptr
17ac8     4A E4 85 F1 | 	sub	objptr, #74
17acc     C4 00 90 FD | 	jmp	#LR__1927
17ad0                 | LR__1920
17ad0                 | ' 
17ad0                 | ' else
17ad0                 | '   if (j<0)
17ad0     0F 1F 52 F6 | 	abs	local01, local01 wc
17ad4                 | '     j:=0-j
17ad4                 | '     k:=45
17ad4     2D 22 06 C6 |  if_b	mov	local03, #45
17ad8                 | ' 
17ad8                 | '   n_string[11]:=0
17ad8     54 E4 05 F1 | 	add	objptr, #84
17adc     F2 00 48 FC | 	wrbyte	#0, objptr
17ae0     54 E4 85 F1 | 	sub	objptr, #84
17ae4     97 24 48 FB | 	callpa	#(@LR__1922-@LR__1921)>>2,fcache_load_ptr_
17ae8                 | '   repeat while (pos>-1)
17ae8                 | LR__1921
17ae8     00 20 56 F2 | 	cmps	local02, #0 wc
17aec     40 00 90 CD |  if_b	jmp	#LR__1923
17af0     0F FB 51 F6 | 	abs	result1, local01 wc
17af4     0A FA 15 FD | 	qdiv	result1, #10
17af8                 | '     q:=j//10
17af8     19 FA 61 FD | 	getqy	result1
17afc     FD FA 81 F6 | 	negc	result1, result1
17b00     0F 1F 52 F6 | 	abs	local01, local01 wc
17b04     0A 1E 16 FD | 	qdiv	local01, #10
17b08                 | '     q:=48+q
17b08     30 FA 05 F1 | 	add	result1, #48
17b0c                 | '     n_string[pos]:=q
17b0c     10 1F 02 F6 | 	mov	local01, local02
17b10     49 E4 05 F1 | 	add	objptr, #73
17b14     F2 1E 02 F1 | 	add	local01, objptr
17b18     0F FB 41 FC | 	wrbyte	result1, local01
17b1c                 | '     j:=j/10
17b1c     49 E4 85 F1 | 	sub	objptr, #73
17b20                 | '     pos-=1
17b20     01 20 86 F1 | 	sub	local02, #1
17b24     18 1E 62 FD | 	getqx	local01
17b28     0F 1F 82 F6 | 	negc	local01, local01
17b2c     B8 FF 9F FD | 	jmp	#LR__1921
17b30                 | LR__1922
17b30                 | LR__1923
17b30                 | '   repeat while n_string[0]==48
17b30                 | LR__1924
17b30     49 E4 05 F1 | 	add	objptr, #73
17b34     F2 16 C2 FA | 	rdbyte	arg03, objptr
17b38     49 E4 85 F1 | 	sub	objptr, #73
17b3c     30 16 0E F2 | 	cmp	arg03, #48 wz
17b40     20 00 90 5D |  if_ne	jmp	#LR__1925
17b44                 | '     bytemove(@n_string,@n_string+1,12)
17b44     49 E4 05 F1 | 	add	objptr, #73
17b48     F2 12 02 F6 | 	mov	arg01, objptr
17b4c     F2 14 02 F6 | 	mov	arg02, objptr
17b50     49 E4 85 F1 | 	sub	objptr, #73
17b54     01 14 06 F1 | 	add	arg02, #1
17b58     0C 16 06 F6 | 	mov	arg03, #12
17b5c     88 0C B0 FD | 	call	#__system____builtin_memmove
17b60     CC FF 9F FD | 	jmp	#LR__1924
17b64                 | LR__1925
17b64                 | ' 
17b64                 | '   if k==45
17b64     2D 22 0E F2 | 	cmp	local03, #45 wz
17b68     28 00 90 5D |  if_ne	jmp	#LR__1926
17b6c                 | '      bytemove(@n_string+1,@n_string,12)
17b6c     49 E4 05 F1 | 	add	objptr, #73
17b70     F2 12 02 F6 | 	mov	arg01, objptr
17b74     01 12 06 F1 | 	add	arg01, #1
17b78     F2 14 02 F6 | 	mov	arg02, objptr
17b7c     49 E4 85 F1 | 	sub	objptr, #73
17b80     0C 16 06 F6 | 	mov	arg03, #12
17b84     60 0C B0 FD | 	call	#__system____builtin_memmove
17b88                 | '      n_string[0]:=k
17b88     49 E4 05 F1 | 	add	objptr, #73
17b8c     F2 22 42 FC | 	wrbyte	local03, objptr
17b90     49 E4 85 F1 | 	sub	objptr, #73
17b94                 | LR__1926
17b94                 | LR__1927
17b94                 | ' 
17b94                 | ' q:=@n_string
17b94     49 E4 05 F1 | 	add	objptr, #73
17b98     F2 FA 01 F6 | 	mov	result1, objptr
17b9c     49 E4 85 F1 | 	sub	objptr, #73
17ba0                 | ' return q
17ba0     A7 F0 03 F6 | 	mov	ptra, fp
17ba4     B2 00 A0 FD | 	call	#popregs_
17ba8                 | _hg010b_spin2_inttostr_ret
17ba8     2D 00 64 FD | 	ret
17bac                 | 
17bac                 | ' 
17bac                 | ' '..............................................................................
17bac                 | ' 
17bac                 | ' {{
17bac                 | ' }}
17bac                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
17bac                 | _psram_spin2_startx
17bac     04 4A 05 F6 | 	mov	COUNT_, #4
17bb0     A8 00 A0 FD | 	call	#pushregs_
17bb4     09 1F 02 F6 | 	mov	local01, arg01
17bb8     0B 21 02 F6 | 	mov	local02, arg03
17bbc     0C 23 02 F6 | 	mov	local03, arg04
17bc0                 | '     stop() ' restart driver if required
17bc0     54 01 B0 FD | 	call	#_psram_spin2_stop
17bc4     00 1E 0E F2 | 	cmp	local01, #0 wz
17bc8     14 1E 06 AB |  if_e	rdlong	local01, #20
17bcc     0F 15 52 F6 | 	abs	arg02, local01 wc
17bd0     A1 07 00 FF 
17bd4     40 14 16 FD | 	qdiv	arg02, ##1000000
17bd8                 | ' 
17bd8                 | '     ' use current frequency if none specified
17bd8                 | ' 
17bd8                 | '     if freq == 0 
17bd8                 | '         freq := clkfreq 
17bd8                 | ' 
17bd8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
17bd8                 | ' 
17bd8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
17bd8                 | '     if burst < 0
17bd8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
17bd8     18 14 62 FD | 	getqx	arg02
17bdc     0A 19 82 F6 | 	negc	arg04, arg02
17be0     03 18 66 F0 | 	shl	arg04, #3
17be4     84 18 86 F1 | 	sub	arg04, #132
17be8     04 18 46 F0 | 	shr	arg04, #4
17bec     04 18 66 F0 | 	shl	arg04, #4
17bf0     00 18 56 F2 | 	cmps	arg04, #0 wc
17bf4     0E FA 65 C6 |  if_b	neg	result1, #14
17bf8     10 01 90 CD |  if_b	jmp	#LR__1933
17bfc                 | ' 
17bfc                 | '     ' compute the input delay
17bfc                 | ' 
17bfc                 | '     if delay <= 0
17bfc     01 20 56 F2 | 	cmps	local02, #1 wc
17c00     10 00 90 3D |  if_ae	jmp	#LR__1930
17c04                 | '         delay := lookupDelay(freq)
17c04     0F 13 02 F6 | 	mov	arg01, local01
17c08     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
17c0c     FD 20 02 F6 | 	mov	local02, result1
17c10     04 00 90 FD | 	jmp	#LR__1931
17c14                 | LR__1930
17c14                 | '     else
17c14                 | '         delay <#= $f ' limit to 15
17c14     0F 20 66 F3 | 	fles	local02, #15
17c18                 | LR__1931
17c18                 | ' 
17c18                 | '     ' create our lock
17c18                 | ' 
17c18                 | '     driverlock := LOCKNEW()  
17c18     00 FA 05 F6 | 	mov	result1, #0
17c1c     04 FA 61 FD | 	locknew	result1
17c20     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17c24     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
17c28                 | '     if driverlock == -1
17c28     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17c2c     FF FF 7F FF 
17c30     FF FB 0D F2 | 	cmp	result1, ##-1 wz
17c34                 | '         return ERR_NO_LOCK
17c34     1A FA 65 A6 |  if_e	neg	result1, #26
17c38     D0 00 90 AD |  if_e	jmp	#LR__1933
17c3c                 | ' 
17c3c                 | '     ' patch in the proper data and HUB addresses to the startup structure
17c3c                 | ' 
17c3c                 | '     long[@startupData][0]:=clkfreq
17c3c     14 1E 06 FB | 	rdlong	local01, #20
17c40     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
17c44     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
17c48                 | ' '    long[@startupData][1]:=$1000_0000
17c48                 | '     long[@startupData][5]:=@deviceData
17c48     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17c4c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17c50     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
17c54     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17c58     14 14 06 F1 | 	add	arg02, #20
17c5c     0A 1F 62 FC | 	wrlong	local01, arg02
17c60                 | '     long[@startupData][6]:=@qosData
17c60     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
17c64     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17c68     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17c6c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
17c70     18 14 06 F1 | 	add	arg02, #24
17c74     0A 1F 62 FC | 	wrlong	local01, arg02
17c78                 | '     long[@startupData][7]:=$7FF00
17c78     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
17c7c     1C 1E 06 F1 | 	add	local01, #28
17c80     FF 03 80 FF 
17c84     0F 01 6A FC | 	wrlong	##524032, local01
17c88                 | ' 
17c88                 | '     ' setup some default bank and QoS parameter values
17c88                 | ' 
17c88                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
17c88     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
17c8c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
17c90     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
17c94     10 18 66 F0 | 	shl	arg04, #16
17c98     0C 20 66 F0 | 	shl	local02, #12
17c9c     10 19 42 F5 | 	or	arg04, local02
17ca0     18 18 46 F5 | 	or	arg04, #24
17ca4     0C 15 02 F6 | 	mov	arg02, arg04
17ca8     02 16 06 F6 | 	mov	arg03, #2
17cac     A0 00 A0 FD | 	call	#\builtin_longfill_
17cb0                 | '     longfill(@qosData, $FFFF0000, 8)
17cb0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
17cb4     07 16 06 F6 | 	mov	arg03, #7
17cb8     28 16 62 FD | 	setq	arg03
17cbc     80 FF FF FF 
17cc0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
17cc4                 | ' 
17cc4                 | '     ' get the address of the PSRAM memory driver so we can start it
17cc4                 | ' 
17cc4                 | '     driverAddr:= driver.getDriverAddr()
17cc4                 | '     return @driver_start
17cc4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
17cc8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
17ccc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
17cd0                 | ' 
17cd0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
17cd0                 | ' 
17cd0                 | '     if desiredcog < 0
17cd0     00 22 56 F2 | 	cmps	local03, #0 wc
17cd4                 | '         desiredcog := NEWCOG
17cd4     10 22 06 C6 |  if_b	mov	local03, #16
17cd8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
17cd8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
17cdc     11 25 02 F6 | 	mov	local04, local03
17ce0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
17ce4     0A 25 F2 FC | 	coginit	local04, arg02 wc
17ce8     01 24 66 C6 |  if_b	neg	local04, #1
17cec     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17cf0     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
17cf4                 | '     repeat until long[@startupData] == 0 
17cf4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
17cf8                 | LR__1932
17cf8     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
17cfc     F8 FF 9F 5D |  if_ne	jmp	#LR__1932
17d00                 | ' 
17d00                 | '     return drivercog
17d00     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
17d04     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
17d08     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17d0c                 | LR__1933
17d0c     A7 F0 03 F6 | 	mov	ptra, fp
17d10     B2 00 A0 FD | 	call	#popregs_
17d14                 | _psram_spin2_startx_ret
17d14     2D 00 64 FD | 	ret
17d18                 | 
17d18                 | ' 
17d18                 | ' '..............................................................................
17d18                 | ' 
17d18                 | ' {{
17d18                 | ' }}
17d18                 | ' PUB stop() : i
17d18                 | _psram_spin2_stop
17d18     00 00 06 F6 | 	mov	_var01, #0
17d1c                 | '     if drivercog <> -1
17d1c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17d20     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
17d24     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17d28     FF FF 7F FF 
17d2c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
17d30     70 00 90 AD |  if_e	jmp	#LR__1943
17d34                 | '         cogstop(drivercog) ' a rather brutal stop
17d34     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17d38     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
17d3c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17d40     03 12 62 FD | 	cogstop	arg01
17d44     97 26 48 FB | 	callpa	#(@LR__1942-@LR__1940)>>2,fcache_load_ptr_
17d48                 | '         repeat i from 0 to 7
17d48                 | LR__1940
17d48                 | '             if long[$7FF00][i*3] < 0
17d48     00 FB 01 F6 | 	mov	result1, _var01
17d4c     01 FA 65 F0 | 	shl	result1, #1
17d50     00 FB 01 F1 | 	add	result1, _var01
17d54     02 FA 65 F0 | 	shl	result1, #2
17d58     FF 03 00 FF 
17d5c     00 FB 05 F1 | 	add	result1, ##524032
17d60     FD FA 01 FB | 	rdlong	result1, result1
17d64     00 FA 55 F2 | 	cmps	result1, #0 wc
17d68     1C 00 90 3D |  if_ae	jmp	#LR__1941
17d6c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
17d6c     00 FB 01 F6 | 	mov	result1, _var01
17d70     01 FA 65 F0 | 	shl	result1, #1
17d74     00 FB 01 F1 | 	add	result1, _var01
17d78     02 FA 65 F0 | 	shl	result1, #2
17d7c     FF 03 00 FF 
17d80     00 FB 05 F1 | 	add	result1, ##524032
17d84     FD 20 68 FC | 	wrlong	#16, result1
17d88                 | LR__1941
17d88     01 00 06 F1 | 	add	_var01, #1
17d8c     08 00 56 F2 | 	cmps	_var01, #8 wc
17d90     B4 FF 9F CD |  if_b	jmp	#LR__1940
17d94                 | LR__1942
17d94                 | '         drivercog := -1
17d94     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17d98     FF FF FF FF 
17d9c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
17da0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17da4                 | LR__1943
17da4                 | '     if driverlock <> -1
17da4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
17da8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
17dac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
17db0     FF FF 7F FF 
17db4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
17db8                 | '         LOCKRET(driverlock)
17db8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
17dbc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
17dc0     05 12 62 5D |  if_ne	lockret	arg01
17dc4                 | '         driverlock := -1
17dc4     FF FF FF 5F 
17dc8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
17dcc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
17dd0     00 FB 01 F6 | 	mov	result1, _var01
17dd4                 | _psram_spin2_stop_ret
17dd4     2D 00 64 FD | 	ret
17dd8                 | 
17dd8                 | ' 
17dd8                 | ' '..............................................................................
17dd8                 | ' 
17dd8                 | ' {{
17dd8                 | ' }}
17dd8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
17dd8                 | _psram_spin2_read1
17dd8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
17dd8                 | '     if drivercog == -1 ' driver must be running
17dd8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17ddc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
17de0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17de4     FF FF 7F FF 
17de8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
17dec                 | '         return ERR_INACTIVE
17dec     0F FA 65 A6 |  if_e	neg	result1, #15
17df0     7C 00 90 AD |  if_e	jmp	#LR__1951
17df4                 | '     if count == 0 ' don't even bother reading
17df4     00 16 0E F2 | 	cmp	arg03, #0 wz
17df8                 | '         return 0
17df8     00 FA 05 A6 |  if_e	mov	result1, #0
17dfc     70 00 90 AD |  if_e	jmp	#LR__1951
17e00                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
17e00     00 FA 05 F6 | 	mov	result1, #0
17e04     01 FA 61 FD | 	cogid	result1
17e08     FD 00 02 F6 | 	mov	_var01, result1
17e0c     01 00 66 F0 | 	shl	_var01, #1
17e10     FD 00 02 F1 | 	add	_var01, result1
17e14     02 00 66 F0 | 	shl	_var01, #2
17e18     FF 03 00 FF 
17e1c     00 03 06 F6 | 	mov	_var02, ##524032
17e20     00 03 02 F1 | 	add	_var02, _var01
17e24                 | '     if long[mailbox] < 0
17e24     01 01 02 FB | 	rdlong	_var01, _var02
17e28     00 00 56 F2 | 	cmps	_var01, #0 wc
17e2c                 | '         return ERR_MAILBOX_BUSY
17e2c     1C FA 65 C6 |  if_b	neg	result1, #28
17e30     3C 00 90 CD |  if_b	jmp	#LR__1951
17e34                 | '     long[mailbox][2] := count
17e34     08 02 06 F1 | 	add	_var02, #8
17e38     01 17 62 FC | 	wrlong	arg03, _var02
17e3c                 | '     long[mailbox][1] := dstHubAddr
17e3c     04 02 86 F1 | 	sub	_var02, #4
17e40     01 13 62 FC | 	wrlong	arg01, _var02
17e44     04 02 86 F1 | 	sub	_var02, #4
17e48                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
17e48     0A 05 02 F6 | 	mov	_var03, arg02
17e4c     D9 04 06 F4 | 	bitl	_var03, #217
17e50     00 00 58 FF 
17e54     00 00 06 F6 | 	mov	_var01, ##-1342177280
17e58     02 01 02 F1 | 	add	_var01, _var03
17e5c     01 01 62 FC | 	wrlong	_var01, _var02
17e60                 | '     repeat
17e60                 | LR__1950
17e60                 | '         result := long[mailbox]    
17e60     01 05 02 FB | 	rdlong	_var03, _var02
17e64     00 04 56 F2 | 	cmps	_var03, #0 wc
17e68     F4 FF 9F CD |  if_b	jmp	#LR__1950
17e6c                 | '     while result < 0   
17e6c                 | '     return -result                       'return success or error
17e6c     02 FB 61 F6 | 	neg	result1, _var03
17e70                 | LR__1951
17e70                 | _psram_spin2_read1_ret
17e70     2D 00 64 FD | 	ret
17e74                 | 
17e74                 | ' 
17e74                 | ' '..............................................................................
17e74                 | ' 
17e74                 | ' {{
17e74                 | ' }}
17e74                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
17e74                 | _psram_spin2_write
17e74                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
17e74                 | '     if drivercog == -1 ' driver must be running
17e74     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17e78     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
17e7c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17e80     FF FF 7F FF 
17e84     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
17e88                 | '         return ERR_INACTIVE
17e88     0F FA 65 A6 |  if_e	neg	result1, #15
17e8c     7C 00 90 AD |  if_e	jmp	#LR__1961
17e90                 | '     if count == 0 ' don't even bother writing
17e90     00 16 0E F2 | 	cmp	arg03, #0 wz
17e94                 | '         return 0
17e94     00 FA 05 A6 |  if_e	mov	result1, #0
17e98     70 00 90 AD |  if_e	jmp	#LR__1961
17e9c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
17e9c     00 FA 05 F6 | 	mov	result1, #0
17ea0     01 FA 61 FD | 	cogid	result1
17ea4     FD 00 02 F6 | 	mov	_var01, result1
17ea8     01 00 66 F0 | 	shl	_var01, #1
17eac     FD 00 02 F1 | 	add	_var01, result1
17eb0     02 00 66 F0 | 	shl	_var01, #2
17eb4     FF 03 00 FF 
17eb8     00 03 06 F6 | 	mov	_var02, ##524032
17ebc     00 03 02 F1 | 	add	_var02, _var01
17ec0                 | '     if long[mailbox] < 0
17ec0     01 01 02 FB | 	rdlong	_var01, _var02
17ec4     00 00 56 F2 | 	cmps	_var01, #0 wc
17ec8                 | '         return ERR_MAILBOX_BUSY
17ec8     1C FA 65 C6 |  if_b	neg	result1, #28
17ecc     3C 00 90 CD |  if_b	jmp	#LR__1961
17ed0                 | '     long[mailbox][2] := count
17ed0     08 02 06 F1 | 	add	_var02, #8
17ed4     01 17 62 FC | 	wrlong	arg03, _var02
17ed8                 | '     long[mailbox][1] := srcHubAddr
17ed8     04 02 86 F1 | 	sub	_var02, #4
17edc     01 13 62 FC | 	wrlong	arg01, _var02
17ee0     04 02 86 F1 | 	sub	_var02, #4
17ee4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
17ee4     0A 05 02 F6 | 	mov	_var03, arg02
17ee8     D9 04 06 F4 | 	bitl	_var03, #217
17eec     00 00 78 FF 
17ef0     00 00 06 F6 | 	mov	_var01, ##-268435456
17ef4     02 01 02 F1 | 	add	_var01, _var03
17ef8     01 01 62 FC | 	wrlong	_var01, _var02
17efc                 | '     repeat
17efc                 | LR__1960
17efc                 | '         result := long[mailbox]    
17efc     01 05 02 FB | 	rdlong	_var03, _var02
17f00     00 04 56 F2 | 	cmps	_var03, #0 wc
17f04     F4 FF 9F CD |  if_b	jmp	#LR__1960
17f08                 | '     while result < 0   
17f08                 | '     return -result                       'return success or error
17f08     02 FB 61 F6 | 	neg	result1, _var03
17f0c                 | LR__1961
17f0c                 | _psram_spin2_write_ret
17f0c     2D 00 64 FD | 	ret
17f10                 | 
17f10                 | ' 
17f10                 | ' ' generalized fill
17f10                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
17f10                 | _psram_spin2_fill
17f10     09 01 02 F6 | 	mov	_var01, arg01
17f14     0A 03 02 F6 | 	mov	_var02, arg02
17f18     0B 05 02 F6 | 	mov	_var03, arg03
17f1c     0D 07 02 F6 | 	mov	_var04, arg05
17f20                 | '     case datasize 
17f20     01 06 86 F1 | 	sub	_var04, #1
17f24     04 06 26 F3 | 	fle	_var04, #4
17f28     30 06 62 FD | 	jmprel	_var04
17f2c                 | LR__1970
17f2c     10 00 90 FD | 	jmp	#LR__1971
17f30     18 00 90 FD | 	jmp	#LR__1972
17f34     2C 00 90 FD | 	jmp	#LR__1974
17f38     1C 00 90 FD | 	jmp	#LR__1973
17f3c     24 00 90 FD | 	jmp	#LR__1974
17f40                 | LR__1971
17f40                 | '         1: req := driver.R_WRITEBYTE
17f40     00 00 60 FF 
17f44     00 08 06 F6 | 	mov	_var05, ##-1073741824
17f48     20 00 90 FD | 	jmp	#LR__1975
17f4c                 | LR__1972
17f4c                 | '         2: req := driver.R_WRITEWORD
17f4c     00 00 68 FF 
17f50     00 08 06 F6 | 	mov	_var05, ##-805306368
17f54     14 00 90 FD | 	jmp	#LR__1975
17f58                 | LR__1973
17f58                 | '         4: req := driver.R_WRITELONG
17f58     00 00 70 FF 
17f5c     00 08 06 F6 | 	mov	_var05, ##-536870912
17f60     08 00 90 FD | 	jmp	#LR__1975
17f64                 | LR__1974
17f64                 | '         other : return ERR_INVALID
17f64     06 FA 65 F6 | 	neg	result1, #6
17f68     94 00 90 FD | 	jmp	#LR__1977
17f6c                 | LR__1975
17f6c                 | '     if count == 0   ' nothing to do
17f6c     00 04 0E F2 | 	cmp	_var03, #0 wz
17f70                 | '         return 0
17f70     00 FA 05 A6 |  if_e	mov	result1, #0
17f74     88 00 90 AD |  if_e	jmp	#LR__1977
17f78                 | '     if drivercog == -1
17f78     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
17f7c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
17f80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
17f84     FF FF 7F FF 
17f88     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
17f8c                 | '         return ERR_INACTIVE
17f8c     0F FA 65 A6 |  if_e	neg	result1, #15
17f90     6C 00 90 AD |  if_e	jmp	#LR__1977
17f94                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
17f94     00 FA 05 F6 | 	mov	result1, #0
17f98     01 FA 61 FD | 	cogid	result1
17f9c     FD 06 02 F6 | 	mov	_var04, result1
17fa0     01 06 66 F0 | 	shl	_var04, #1
17fa4     FD 06 02 F1 | 	add	_var04, result1
17fa8     02 06 66 F0 | 	shl	_var04, #2
17fac     FF 03 00 FF 
17fb0     00 0B 06 F6 | 	mov	_var06, ##524032
17fb4     03 0B 02 F1 | 	add	_var06, _var04
17fb8                 | '     if long[mailbox] < 0
17fb8     05 07 02 FB | 	rdlong	_var04, _var06
17fbc     00 06 56 F2 | 	cmps	_var04, #0 wc
17fc0                 | '         return ERR_MAILBOX_BUSY
17fc0     1C FA 65 C6 |  if_b	neg	result1, #28
17fc4     38 00 90 CD |  if_b	jmp	#LR__1977
17fc8                 | '     long[mailbox][2] := count
17fc8     08 0A 06 F1 | 	add	_var06, #8
17fcc     05 05 62 FC | 	wrlong	_var03, _var06
17fd0                 | '     long[mailbox][1] := pattern
17fd0     04 0A 86 F1 | 	sub	_var06, #4
17fd4     05 03 62 FC | 	wrlong	_var02, _var06
17fd8     04 0A 86 F1 | 	sub	_var06, #4
17fdc                 | '     long[mailbox] := req + (addr & $fffffff)
17fdc     04 0D 02 F6 | 	mov	_var07, _var05
17fe0     00 0F 02 F6 | 	mov	_var08, _var01
17fe4     7C 0E 06 F4 | 	bitl	_var08, #124
17fe8     07 0D 02 F1 | 	add	_var07, _var08
17fec     05 0D 62 FC | 	wrlong	_var07, _var06
17ff0                 | '     repeat
17ff0                 | LR__1976
17ff0                 | '         r := long[mailbox]
17ff0     05 0F 02 FB | 	rdlong	_var08, _var06
17ff4     00 0E 56 F2 | 	cmps	_var08, #0 wc
17ff8     F4 FF 9F CD |  if_b	jmp	#LR__1976
17ffc                 | '     while r < 0
17ffc                 | '     return -r                  ' return 0 for success or negated error code
17ffc     07 FB 61 F6 | 	neg	result1, _var08
18000                 | LR__1977
18000                 | _psram_spin2_fill_ret
18000     2D 00 64 FD | 	ret
18004                 | 
18004                 | ' 
18004                 | ' '..............................................................................
18004                 | ' 
18004                 | ' {{
18004                 | ' }}
18004                 | ' PUB setQos(cog, qos) : result | mailbox
18004                 | _psram_spin2_setQos
18004     09 01 02 F6 | 	mov	_var01, arg01
18008                 | '     if drivercog == -1 ' driver must be running
18008     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1800c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
18010     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
18014     FF FF 7F FF 
18018     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1801c                 | '         return ERR_INACTIVE
1801c     0F FA 65 A6 |  if_e	neg	result1, #15
18020     9C 00 90 AD |  if_e	jmp	#LR__1984
18024                 | '     if cog < 0 or cog > 7 ' enforce cog id range
18024     00 00 56 F2 | 	cmps	_var01, #0 wc
18028     08 00 90 CD |  if_b	jmp	#LR__1980
1802c     08 00 56 F2 | 	cmps	_var01, #8 wc
18030     08 00 90 CD |  if_b	jmp	#LR__1981
18034                 | LR__1980
18034                 | '         return ERR_INVALID
18034     06 FA 65 F6 | 	neg	result1, #6
18038     84 00 90 FD | 	jmp	#LR__1984
1803c                 | LR__1981
1803c                 | '     long[@qosData][cog] := qos & !$1ff
1803c     FF 15 26 F5 | 	andn	arg02, #511
18040     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
18044     02 00 66 F0 | 	shl	_var01, #2
18048     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1804c     00 15 62 FC | 	wrlong	arg02, _var01
18050                 | '     mailbox := $7FF00 + drivercog*12
18050     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
18054     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
18058     02 07 02 F6 | 	mov	_var04, _var03
1805c     01 06 66 F0 | 	shl	_var04, #1
18060     02 07 02 F1 | 	add	_var04, _var03
18064     02 06 66 F0 | 	shl	_var04, #2
18068     FF 03 00 FF 
1806c     00 09 06 F6 | 	mov	_var05, ##524032
18070     03 09 02 F1 | 	add	_var05, _var04
18074                 | '     repeat until LOCKTRY(driverlock)
18074     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
18078                 | LR__1982
18078     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1807c     06 12 72 FD | 	locktry	arg01 wc
18080     F4 FF 9F 3D |  if_ae	jmp	#LR__1982
18084     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
18088                 | '     long[mailbox] := driver.R_CONFIG + cogid()
18088     00 06 06 F6 | 	mov	_var04, #0
1808c     01 06 62 FD | 	cogid	_var04
18090     00 00 78 FF 
18094     00 02 06 F6 | 	mov	_var02, ##-268435456
18098     03 03 02 F1 | 	add	_var02, _var04
1809c     04 03 62 FC | 	wrlong	_var02, _var05
180a0                 | '     repeat while long[mailbox] < 0
180a0                 | LR__1983
180a0     04 03 02 FB | 	rdlong	_var02, _var05
180a4     00 02 56 F2 | 	cmps	_var02, #0 wc
180a8     F4 FF 9F CD |  if_b	jmp	#LR__1983
180ac                 | '     LOCKREL(driverlock)
180ac     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
180b0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
180b4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
180b8     07 12 72 FD | 	lockrel	arg01 wc
180bc     00 FA 05 F6 | 	mov	result1, #0
180c0                 | LR__1984
180c0                 | _psram_spin2_setQos_ret
180c0     2D 00 64 FD | 	ret
180c4                 | 
180c4                 | ' 
180c4                 | ' '..............................................................................
180c4                 | ' 
180c4                 | ' {{
180c4                 | ' }}
180c4                 | ' PRI lookupDelay(freq) : delay | profile
180c4                 | _psram_spin2_lookupDelay
180c4                 | '     profile := @delayTable
180c4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
180c8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
180cc                 | '     delay := long[profile][0]
180cc     00 03 02 FB | 	rdlong	_var02, _var01
180d0                 | '     repeat while long[profile][1] 
180d0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
180d4     97 16 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
180d8                 | LR__1990
180d8     04 00 06 F1 | 	add	_var01, #4
180dc     00 FB 09 FB | 	rdlong	result1, _var01 wz
180e0     04 00 86 F1 | 	sub	_var01, #4
180e4     1C 00 90 AD |  if_e	jmp	#LR__1992
180e8                 | '         if freq +< long[profile][1] 
180e8     04 00 06 F1 | 	add	_var01, #4
180ec     00 FB 01 FB | 	rdlong	result1, _var01
180f0     04 00 86 F1 | 	sub	_var01, #4
180f4     FD 12 12 F2 | 	cmp	arg01, result1 wc
180f8                 | '             quit
180f8                 | '         profile += 4
180f8     04 00 06 31 |  if_ae	add	_var01, #4
180fc                 | '         delay++
180fc     01 02 06 31 |  if_ae	add	_var02, #1
18100     D4 FF 9F 3D |  if_ae	jmp	#LR__1990
18104                 | LR__1991
18104                 | LR__1992
18104     01 FB 01 F6 | 	mov	result1, _var02
18108                 | _psram_spin2_lookupDelay_ret
18108     2D 00 64 FD | 	ret
1810c                 | 
1810c                 | ' 
1810c                 | ' PUB start() : r
1810c                 | _usbnew_spin2_start
1810c     00 00 06 F6 | 	mov	_var01, #0
18110                 | '   ifnot driver_cog
18110     15 00 00 FF 
18114     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
18118     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1811c     15 00 00 FF 
18120     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
18124     38 00 90 5D |  if_ne	jmp	#LR__2000
18128                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
18128     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1812c     10 00 06 F6 | 	mov	_var01, #16
18130     00 16 06 F6 | 	mov	arg03, #0
18134     28 16 62 FD | 	setq	arg03
18138     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1813c     01 00 66 C6 |  if_b	neg	_var01, #1
18140                 | '     if r >= 0
18140     00 00 56 F2 | 	cmps	_var01, #0 wc
18144                 | '       driver_cog := r+1
18144     00 03 02 36 |  if_ae	mov	_var02, _var01
18148     01 02 06 31 |  if_ae	add	_var02, #1
1814c     15 00 00 3F 
18150     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
18154     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
18158     15 00 00 3F 
1815c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
18160                 | LR__2000
18160     00 FB 01 F6 | 	mov	result1, _var01
18164                 | _usbnew_spin2_start_ret
18164     2D 00 64 FD | 	ret
18168                 | 
18168                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
18168                 | ' 
18168                 | ' '' Return key event from buffer if there is one
18168                 | ' PUB get_key() : r | tail
18168                 | _usbnew_spin2_get_key
18168                 | '   tail := keyq_tail
18168     0F 00 00 FF 
1816c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
18170     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
18174                 | '   if keyq_head == tail
18174     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
18178     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1817c     0F 00 00 FF 
18180     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
18184     00 03 0A F2 | 	cmp	_var02, _var01 wz
18188                 | '     return 0 ' No event
18188     00 FA 05 A6 |  if_e	mov	result1, #0
1818c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
18190                 | '   r := keyq_data[tail]
18190     00 03 02 F6 | 	mov	_var02, _var01
18194     02 02 66 F0 | 	shl	_var02, #2
18198     0F 00 00 FF 
1819c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
181a0     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
181a4     01 FB 01 FB | 	rdlong	result1, _var02
181a8                 | '   if ++tail == KEYQUEUE_SIZE
181a8     01 00 06 F1 | 	add	_var01, #1
181ac     80 00 0E F2 | 	cmp	_var01, #128 wz
181b0                 | '     tail := 0
181b0     00 00 06 A6 |  if_e	mov	_var01, #0
181b4                 | '   keyq_tail := tail
181b4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
181b8     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
181bc     0F 00 00 FF 
181c0     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
181c4                 | _usbnew_spin2_get_key_ret
181c4     2D 00 64 FD | 	ret
181c8                 | 
181c8                 | ' 
181c8                 | ' '' Emulate mouse movement
181c8                 | ' PUB mouse_move(x,y)
181c8                 | _usbnew_spin2_mouse_move
181c8     02 4A 05 F6 | 	mov	COUNT_, #2
181cc     A8 00 A0 FD | 	call	#pushregs_
181d0     09 1F 02 F6 | 	mov	local01, arg01
181d4     0A 21 02 F6 | 	mov	local02, arg02
181d8                 | '   mouse_lock := 1
181d8     14 00 00 FF 
181dc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
181e0     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
181e4     14 00 00 FF 
181e8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
181ec                 | '   waitus(2) ' hope driver is now done
181ec     02 12 06 F6 | 	mov	arg01, #2
181f0     34 0A B0 FD | 	call	#__system___waitus
181f4                 | '   mouse_xacc := x
181f4     14 00 00 FF 
181f8     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
181fc     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
18200                 | '   mouse_yacc := y
18200     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18204     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
18208                 | '   if mouse_outptr
18208     04 00 00 FF 
1820c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
18210     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
18214     0F 00 00 FF 
18218     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1821c     24 00 90 AD |  if_e	jmp	#LR__2010
18220                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
18220     10 20 66 F0 | 	shl	local02, #16
18224     0F 1F 32 F9 | 	getword	local01, local01, #0
18228     0F 21 42 F5 | 	or	local02, local01
1822c     0F 00 00 FF 
18230     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
18234     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
18238     0F 00 00 FF 
1823c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18240     0F 21 62 FC | 	wrlong	local02, local01
18244                 | LR__2010
18244                 | '   mouse_lock := 0
18244     14 00 00 FF 
18248     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1824c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
18250     14 00 00 FF 
18254     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
18258     A7 F0 03 F6 | 	mov	ptra, fp
1825c     B2 00 A0 FD | 	call	#popregs_
18260                 | _usbnew_spin2_mouse_move_ret
18260     2D 00 64 FD | 	ret
18264                 | 
18264                 | '     '' Set HAVE_HIDPAD to enable.
18264                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
18264                 | ' 
18264                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
18264                 | ' PUB hidpad_id(dev) : r
18264                 | _usbnew_spin2_hidpad_id
18264                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
18264     13 00 00 FF 
18268     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1826c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
18270     09 01 02 F6 | 	mov	_var01, arg01
18274     03 00 66 F0 | 	shl	_var01, #3
18278     09 01 82 F1 | 	sub	_var01, arg01
1827c     02 00 66 F0 | 	shl	_var01, #2
18280     00 FB 01 F1 | 	add	result1, _var01
18284     FD FA 01 FB | 	rdlong	result1, result1
18288     13 00 00 FF 
1828c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18290                 | _usbnew_spin2_hidpad_id_ret
18290     2D 00 64 FD | 	ret
18294                 | 
18294                 | ' 
18294                 | ' '' Get all button states for a device
18294                 | ' PUB hidpad_buttons(dev) : r 
18294                 | _usbnew_spin2_hidpad_buttons
18294                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
18294     13 00 00 FF 
18298     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1829c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
182a0     09 01 02 F6 | 	mov	_var01, arg01
182a4     03 00 66 F0 | 	shl	_var01, #3
182a8     09 01 82 F1 | 	sub	_var01, arg01
182ac     02 00 66 F0 | 	shl	_var01, #2
182b0     00 FB 01 F1 | 	add	result1, _var01
182b4     14 FA 05 F1 | 	add	result1, #20
182b8     FD FA 01 FB | 	rdlong	result1, result1
182bc     13 00 00 FF 
182c0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
182c4                 | _usbnew_spin2_hidpad_buttons_ret
182c4     2D 00 64 FD | 	ret
182c8                 | 
182c8                 | ' 
182c8                 | ' '' Get state of an axis (normalized between -32768 and 32767)
182c8                 | ' PUB hidpad_axis(dev,axnum) : r
182c8                 | _usbnew_spin2_hidpad_axis
182c8                 | '   if axnum +>= 6
182c8     06 14 16 F2 | 	cmp	arg02, #6 wc
182cc                 | '     return 0
182cc     00 FA 05 36 |  if_ae	mov	result1, #0
182d0     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
182d4                 | '   else 
182d4                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
182d4     13 00 00 FF 
182d8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
182dc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
182e0     09 01 02 F6 | 	mov	_var01, arg01
182e4     03 00 66 F0 | 	shl	_var01, #3
182e8     09 01 82 F1 | 	sub	_var01, arg01
182ec     02 00 66 F0 | 	shl	_var01, #2
182f0     00 FB 01 F1 | 	add	result1, _var01
182f4     04 00 06 F6 | 	mov	_var01, #4
182f8     0A 01 02 F1 | 	add	_var01, arg02
182fc     01 00 66 F0 | 	shl	_var01, #1
18300     FD 00 02 F1 | 	add	_var01, result1
18304     00 FB E1 FA | 	rdword	result1, _var01
18308     0F FA 65 F7 | 	signx	result1, #15
1830c     13 00 00 FF 
18310     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
18314                 | _usbnew_spin2_hidpad_axis_ret
18314     2D 00 64 FD | 	ret
18318                 | 
18318                 | ' 
18318                 | ' 
18318                 | ' '--------------------------------------------------------------
18318                 | ' '---------- Init the variables, start the cog. ----------------
18318                 | ' '--------------------------------------------------------------
18318                 | ' 
18318                 | ' pub start(mbox,scope,cache) :cog,base | iii
18318                 | _Audio093b_8_sc_spin2_start
18318     04 4A 05 F6 | 	mov	COUNT_, #4
1831c     A8 00 A0 FD | 	call	#pushregs_
18320     09 1F 02 F6 | 	mov	local01, arg01
18324                 | ' 
18324                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
18324                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
18324                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
18324                 | ' 
18324                 | ' mailboxaddr:=mbox 
18324     F2 1E 62 FC | 	wrlong	local01, objptr
18328                 | ' scope_ptr:=scope
18328     04 E4 05 F1 | 	add	objptr, #4
1832c     F2 14 62 FC | 	wrlong	arg02, objptr
18330                 | ' cache_ptr:=cache
18330     04 E4 05 F1 | 	add	objptr, #4
18334     F2 16 62 FC | 	wrlong	arg03, objptr
18338                 | ' base:=@channel1[0]
18338     04 E4 05 F1 | 	add	objptr, #4
1833c     F2 20 02 F6 | 	mov	local02, objptr
18340                 | ' 
18340                 | ' repeat iii from 0 to 7
18340     00 22 06 F6 | 	mov	local03, #0
18344     01 00 00 FF 
18348     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
1834c     0C E4 85 F1 | 	sub	objptr, #12
18350     97 80 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18354                 | LR__2020
18354                 | '   long[base+32*iii]:=0
18354     10 1F 02 F6 | 	mov	local01, local02
18358     11 FD 01 F6 | 	mov	result2, local03
1835c     05 FC 65 F0 | 	shl	result2, #5
18360     FE 1E 02 F1 | 	add	local01, result2
18364     0F 01 68 FC | 	wrlong	#0, local01
18368                 | '   long[base+32*iii+4]:=0
18368     10 1F 02 F6 | 	mov	local01, local02
1836c     11 FD 01 F6 | 	mov	result2, local03
18370     05 FC 65 F0 | 	shl	result2, #5
18374     FE 1E 02 F1 | 	add	local01, result2
18378     04 1E 06 F1 | 	add	local01, #4
1837c     0F 01 68 FC | 	wrlong	#0, local01
18380                 | '   long[base+32*iii+12]:=0
18380     10 25 02 F6 | 	mov	local04, local02
18384     11 1F 02 F6 | 	mov	local01, local03
18388     05 1E 66 F0 | 	shl	local01, #5
1838c     0F 25 02 F1 | 	add	local04, local01
18390     0C 24 06 F1 | 	add	local04, #12
18394     12 01 68 FC | 	wrlong	#0, local04
18398                 | '   long[base+32*iii+16]:=2 
18398     10 25 02 F6 | 	mov	local04, local02
1839c     11 1F 02 F6 | 	mov	local01, local03
183a0     05 1E 66 F0 | 	shl	local01, #5
183a4     0F 25 02 F1 | 	add	local04, local01
183a8     10 24 06 F1 | 	add	local04, #16
183ac     12 05 68 FC | 	wrlong	#2, local04
183b0                 | '   word[base+32*iii+20]:=0
183b0     10 25 02 F6 | 	mov	local04, local02
183b4     11 1F 02 F6 | 	mov	local01, local03
183b8     05 1E 66 F0 | 	shl	local01, #5
183bc     0F 25 02 F1 | 	add	local04, local01
183c0     14 24 06 F1 | 	add	local04, #20
183c4     12 01 58 FC | 	wrword	#0, local04
183c8                 | '   word[base+32*iii+22]:=8192
183c8     10 25 02 F6 | 	mov	local04, local02
183cc     11 1F 02 F6 | 	mov	local01, local03
183d0     05 1E 66 F0 | 	shl	local01, #5
183d4     0F 25 02 F1 | 	add	local04, local01
183d8     16 24 06 F1 | 	add	local04, #22
183dc     10 00 80 FF 
183e0     12 01 58 FC | 	wrword	##8192, local04
183e4                 | '   word[base+32*iii+24]:=4000+2*iii
183e4     11 25 02 F6 | 	mov	local04, local03
183e8     01 24 66 F0 | 	shl	local04, #1
183ec     07 00 00 FF 
183f0     A0 1F 06 F6 | 	mov	local01, ##4000
183f4     12 1F 02 F1 | 	add	local01, local04
183f8     10 25 02 F6 | 	mov	local04, local02
183fc     11 FD 01 F6 | 	mov	result2, local03
18400     05 FC 65 F0 | 	shl	result2, #5
18404     FE 24 02 F1 | 	add	local04, result2
18408     18 24 06 F1 | 	add	local04, #24
1840c     12 1F 52 FC | 	wrword	local01, local04
18410                 | '   word[base+32*iii+26]:=2
18410     10 25 02 F6 | 	mov	local04, local02
18414     11 1F 02 F6 | 	mov	local01, local03
18418     05 1E 66 F0 | 	shl	local01, #5
1841c     0F 25 02 F1 | 	add	local04, local01
18420     1A 24 06 F1 | 	add	local04, #26
18424     12 05 58 FC | 	wrword	#2, local04
18428                 | '   long [base+32*iii+8]:=@null | $C0000000
18428     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
1842c     3E 1E 26 F4 | 	bith	local01, #62
18430     10 25 02 F6 | 	mov	local04, local02
18434     11 17 02 F6 | 	mov	arg03, local03
18438     05 16 66 F0 | 	shl	arg03, #5
1843c     0B 25 02 F1 | 	add	local04, arg03
18440     08 24 06 F1 | 	add	local04, #8
18444     12 1F 62 FC | 	wrlong	local01, local04
18448     01 22 06 F1 | 	add	local03, #1
1844c     08 22 56 F2 | 	cmps	local03, #8 wc
18450     00 FF 9F CD |  if_b	jmp	#LR__2020
18454                 | LR__2021
18454     01 00 00 FF 
18458     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
1845c                 | '   
1845c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1845c     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
18460     F2 16 02 F6 | 	mov	arg03, objptr
18464     10 24 06 F6 | 	mov	local04, #16
18468     28 16 62 FD | 	setq	arg03
1846c     0A 25 F2 FC | 	coginit	local04, arg02 wc
18470     01 24 66 C6 |  if_b	neg	local04, #1
18474                 | ' waitms(100)
18474     64 12 06 F6 | 	mov	arg01, #100
18478     40 07 B0 FD | 	call	#__system___waitms
1847c                 | ' return cog,base
1847c     10 FD 01 F6 | 	mov	result2, local02
18480     12 FB 01 F6 | 	mov	result1, local04
18484     A7 F0 03 F6 | 	mov	ptra, fp
18488     B2 00 A0 FD | 	call	#popregs_
1848c                 | _Audio093b_8_sc_spin2_start_ret
1848c     2D 00 64 FD | 	ret
18490                 | 
18490                 | ' 
18490                 | ' ' a simple play procedure to not poke everything. 
18490                 | ' 
18490                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
18490                 | _Audio093b_8_sc_spin2_play
18490     0C E4 05 F1 | 	add	objptr, #12
18494     F2 00 02 F6 | 	mov	_var01, objptr
18498     05 12 66 F0 | 	shl	arg01, #5
1849c     09 01 02 F1 | 	add	_var01, arg01
184a0     00 00 60 FF 
184a4     00 14 06 F1 | 	add	arg02, ##-1073741824
184a8     00 13 02 F6 | 	mov	arg01, _var01
184ac     08 12 06 F1 | 	add	arg01, #8
184b0     09 15 62 FC | 	wrlong	arg02, arg01
184b4     00 15 02 F6 | 	mov	arg02, _var01
184b8     0C 14 06 F1 | 	add	arg02, #12
184bc     0A 1B 62 FC | 	wrlong	arg05, arg02
184c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
184c4     00 15 02 36 |  if_ae	mov	arg02, _var01
184c8     10 14 06 31 |  if_ae	add	arg02, #16
184cc     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
184d0     02 1A 06 C1 |  if_b	add	arg05, #2
184d4     00 13 02 C6 |  if_b	mov	arg01, _var01
184d8     10 12 06 C1 |  if_b	add	arg01, #16
184dc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
184e0     0B 15 52 F6 | 	abs	arg02, arg03 wc
184e4     0F 1B 80 FF 
184e8     0A 3F 1A FD | 	qdiv	##3546911, arg02
184ec                 | ' 
184ec                 | ' base2:=@channel1[0]+32*channel
184ec                 | ' long[base2+8]:=sample+$C0000000 
184ec                 | ' long[base2+12]:= len
184ec                 | ' if loop >=0 
184ec                 | '   long[base2+16]:= loop
184ec     0C E4 85 F1 | 	sub	objptr, #12
184f0                 | ' else
184f0                 | '   long[base2+16]:= len+2
184f0                 | ' word[base2+20]:=vol
184f0     00 15 02 F6 | 	mov	arg02, _var01
184f4     14 14 06 F1 | 	add	arg02, #20
184f8     0A 19 52 FC | 	wrword	arg04, arg02
184fc                 | ' word[base2+24]:= 3546911/splfreq 
184fc     00 13 02 F6 | 	mov	arg01, _var01
18500     18 12 06 F1 | 	add	arg01, #24
18504                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18504                 | ' long[base2+28]:=$40000000
18504     18 14 62 FD | 	getqx	arg02
18508     0A 15 82 F6 | 	negc	arg02, arg02
1850c     09 15 52 FC | 	wrword	arg02, arg01
18510     00 15 02 F6 | 	mov	arg02, _var01
18514     1A 14 06 F1 | 	add	arg02, #26
18518     0A 01 5A FC | 	wrword	#256, arg02
1851c     1C 00 06 F1 | 	add	_var01, #28
18520     00 00 A0 FF 
18524     00 01 68 FC | 	wrlong	##1073741824, _var01
18528                 | _Audio093b_8_sc_spin2_play_ret
18528     2D 00 64 FD | 	ret
1852c                 | 
1852c                 | ' until (i >>8) >=len
1852c                 | ' 
1852c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1852c                 | _Audio093b_8_sc_spin2_play8
1852c                 | ' 
1852c                 | ' base2:=@channel1[0]+32*channel
1852c     0C E4 05 F1 | 	add	objptr, #12
18530     F2 00 02 F6 | 	mov	_var01, objptr
18534     05 12 66 F0 | 	shl	arg01, #5
18538     09 01 02 F1 | 	add	_var01, arg01
1853c                 | ' long[base2]:=0
1853c     00 01 68 FC | 	wrlong	#0, _var01
18540                 | ' long[base2+8]:=sample+$40000000 
18540     00 00 20 FF 
18544     00 14 06 F1 | 	add	arg02, ##1073741824
18548     00 13 02 F6 | 	mov	arg01, _var01
1854c     08 12 06 F1 | 	add	arg01, #8
18550     09 15 62 FC | 	wrlong	arg02, arg01
18554                 | ' if loop>=0
18554     00 1C 56 F2 | 	cmps	arg06, #0 wc
18558     0C E4 85 F1 | 	sub	objptr, #12
1855c     1C 00 90 CD |  if_b	jmp	#LR__2030
18560                 | '   long[base2+12]:=loop
18560     00 15 02 F6 | 	mov	arg02, _var01
18564     0C 14 06 F1 | 	add	arg02, #12
18568     0A 1D 62 FC | 	wrlong	arg06, arg02
1856c                 | '   long[base2+16]:= len
1856c     00 1D 02 F6 | 	mov	arg06, _var01
18570     10 1C 06 F1 | 	add	arg06, #16
18574     0E 1B 62 FC | 	wrlong	arg05, arg06
18578     1C 00 90 FD | 	jmp	#LR__2031
1857c                 | LR__2030
1857c                 | ' else
1857c                 | '   long[base2+12]:= len
1857c     00 1D 02 F6 | 	mov	arg06, _var01
18580     0C 1C 06 F1 | 	add	arg06, #12
18584     0E 1B 62 FC | 	wrlong	arg05, arg06
18588                 | '   long[base2+16]:= len+1
18588     01 1A 06 F1 | 	add	arg05, #1
1858c     00 13 02 F6 | 	mov	arg01, _var01
18590     10 12 06 F1 | 	add	arg01, #16
18594     09 1B 62 FC | 	wrlong	arg05, arg01
18598                 | LR__2031
18598     0B 17 52 F6 | 	abs	arg03, arg03 wc
1859c     0F 1B 80 FF 
185a0     0B 3F 1A FD | 	qdiv	##3546911, arg03
185a4                 | ' word[base2+20]:=vol
185a4     00 17 02 F6 | 	mov	arg03, _var01
185a8     14 16 06 F1 | 	add	arg03, #20
185ac     0B 19 52 FC | 	wrword	arg04, arg03
185b0                 | ' word[base2+24]:= 3546911/splfreq 
185b0     00 13 02 F6 | 	mov	arg01, _var01
185b4     18 12 06 F1 | 	add	arg01, #24
185b8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
185b8                 | ' long[base2+28]:=$40000000
185b8     18 18 62 FD | 	getqx	arg04
185bc     0C 19 82 F6 | 	negc	arg04, arg04
185c0     09 19 52 FC | 	wrword	arg04, arg01
185c4     00 19 02 F6 | 	mov	arg04, _var01
185c8     1A 18 06 F1 | 	add	arg04, #26
185cc     0C 01 5A FC | 	wrword	#256, arg04
185d0     1C 00 06 F1 | 	add	_var01, #28
185d4     00 00 A0 FF 
185d8     00 01 68 FC | 	wrlong	##1073741824, _var01
185dc                 | _Audio093b_8_sc_spin2_play8_ret
185dc     2D 00 64 FD | 	ret
185e0                 | 
185e0                 | ' 
185e0                 | '     
185e0                 | ' pub stop(channel) 'silence it
185e0                 | _Audio093b_8_sc_spin2_stop
185e0                 | ' 
185e0                 | ' word[@channel1[0]+32*channel+20]:=0
185e0     0C E4 05 F1 | 	add	objptr, #12
185e4     F2 00 02 F6 | 	mov	_var01, objptr
185e8     05 12 66 F0 | 	shl	arg01, #5
185ec     09 01 02 F1 | 	add	_var01, arg01
185f0     14 00 06 F1 | 	add	_var01, #20
185f4     00 01 58 FC | 	wrword	#0, _var01
185f8     0C E4 85 F1 | 	sub	objptr, #12
185fc                 | _Audio093b_8_sc_spin2_stop_ret
185fc     2D 00 64 FD | 	ret
18600                 | hubexit
18600     81 00 80 FD | 	jmp	#cogexit
18604                 | 
18604                 | __system___setbaud
18604     14 60 06 FB | 	rdlong	muldiva_, #20
18608     09 63 02 F6 | 	mov	muldivb_, arg01
1860c     BA 00 A0 FD | 	call	#divide_
18610     97 06 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
18614                 | LR__2040
18614     3E FA 9D FA | 	rdpin	result1, #62 wc
18618     FE FC A1 F1 | 	subx	result2, result2
1861c     F4 FF 9F CD |  if_b	jmp	#LR__2040
18620                 | LR__2041
18620     40 7C 64 FD | 	dirl	#62
18624     40 7E 64 FD | 	dirl	#63
18628     F4 62 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1862c     10 62 66 F0 | 	shl	muldivb_, #16
18630     07 14 06 F6 | 	mov	arg02, #7
18634     31 15 02 F1 | 	add	arg02, muldivb_
18638     3E F8 0C FC | 	wrpin	#124, #62
1863c     3E 14 16 FC | 	wxpin	arg02, #62
18640     3F 7C 0C FC | 	wrpin	#62, #63
18644     14 14 06 F1 | 	add	arg02, #20
18648     3F 14 16 FC | 	wxpin	arg02, #63
1864c     41 7C 64 FD | 	dirh	#62
18650     41 7E 64 FD | 	dirh	#63
18654                 | __system___setbaud_ret
18654     2D 00 64 FD | 	ret
18658                 | 
18658                 | __system___txraw
18658     01 4A 05 F6 | 	mov	COUNT_, #1
1865c     A8 00 A0 FD | 	call	#pushregs_
18660     09 1F 02 F6 | 	mov	local01, arg01
18664     97 06 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
18668                 | LR__2050
18668     3E FA 9D FA | 	rdpin	result1, #62 wc
1866c     FE FC A1 F1 | 	subx	result2, result2
18670     F4 FF 9F CD |  if_b	jmp	#LR__2050
18674                 | LR__2051
18674     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
18678     C2 01 00 AF 
1867c     00 12 06 A6 |  if_e	mov	arg01, ##230400
18680     80 FF BF AD |  if_e	call	#__system___setbaud
18684     58 7C 64 FD | 	drvl	#62
18688     3E 1E 26 FC | 	wypin	local01, #62
1868c     01 FA 05 F6 | 	mov	result1, #1
18690     A7 F0 03 F6 | 	mov	ptra, fp
18694     B2 00 A0 FD | 	call	#popregs_
18698                 | __system___txraw_ret
18698     2D 00 64 FD | 	ret
1869c                 | 
1869c                 | __system___rxraw
1869c     0D 4A 05 F6 | 	mov	COUNT_, #13
186a0     A8 00 A0 FD | 	call	#pushregs_
186a4     09 1F 02 F6 | 	mov	local01, arg01
186a8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
186ac     C2 01 00 AF 
186b0     00 12 06 A6 |  if_e	mov	arg01, ##230400
186b4     4C FF BF AD |  if_e	call	#__system___setbaud
186b8     00 1E 0E F2 | 	cmp	local01, #0 wz
186bc     20 00 90 AD |  if_e	jmp	#LR__2060
186c0     14 22 06 FB | 	rdlong	local03, #20
186c4     0A 22 46 F0 | 	shr	local03, #10
186c8     11 1F 02 FD | 	qmul	local01, local03
186cc     1A FA 61 FD | 	getct	result1
186d0     18 24 62 FD | 	getqx	local04
186d4     12 FB 01 F1 | 	add	result1, local04
186d8     FD 26 02 F6 | 	mov	local05, result1
186dc     04 00 90 FD | 	jmp	#LR__2061
186e0                 | LR__2060
186e0     00 26 06 F6 | 	mov	local05, #0
186e4                 | LR__2061
186e4     01 28 66 F6 | 	neg	local06, #1
186e8     3F 2A 06 F6 | 	mov	local07, #63
186ec     00 2C 06 F6 | 	mov	local08, #0
186f0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
186f4     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
186f8     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
186fc                 | LR__2062
186fc     08 2E 16 F4 | 	testb	local09, #8 wc
18700     09 2E 76 F4 | 	testbn	local09, #9 andc
18704     0A 2E 46 F0 | 	shr	local09, #10
18708     01 2C 06 C6 |  if_b	mov	local08, #1
1870c     40 7E 6C 3D |  if_ae	testp	#63 wz
18710     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
18714     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
18718     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1871c                 | LR__2063
1871c     00 20 06 F6 | 	mov	local02, #0
18720     00 2C 0E F2 | 	cmp	local08, #0 wz
18724     01 20 66 56 |  if_ne	neg	local02, #1
18728     00 30 06 F6 | 	mov	local10, #0
1872c     00 22 06 F6 | 	mov	local03, #0
18730     00 1E 0E F2 | 	cmp	local01, #0 wz
18734     01 22 66 56 |  if_ne	neg	local03, #1
18738     00 24 06 F6 | 	mov	local04, #0
1873c     00 32 06 F6 | 	mov	local11, #0
18740     1A FA 61 FD | 	getct	result1
18744     FD 34 02 F6 | 	mov	local12, result1
18748     1A 37 02 F6 | 	mov	local13, local12
1874c     13 37 82 F1 | 	sub	local13, local05
18750     00 36 56 F2 | 	cmps	local13, #0 wc
18754     00 32 26 C6 |  if_b	not	local11, #0
18758     00 32 0E F2 | 	cmp	local11, #0 wz
1875c     00 24 26 56 |  if_ne	not	local04, #0
18760     12 23 CA F7 | 	test	local03, local04 wz
18764     00 30 26 56 |  if_ne	not	local10, #0
18768     18 21 4A F5 | 	or	local02, local10 wz
1876c     8C FF 9F AD |  if_e	jmp	#LR__2062
18770     00 2C 0E F2 | 	cmp	local08, #0 wz
18774     17 29 02 56 |  if_ne	mov	local06, local09
18778     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1877c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18780     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
18784     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
18788     14 FB 01 F6 | 	mov	result1, local06
1878c     A7 F0 03 F6 | 	mov	ptra, fp
18790     B2 00 A0 FD | 	call	#popregs_
18794                 | __system___rxraw_ret
18794     2D 00 64 FD | 	ret
18798                 | 
18798                 | __system___getus
18798     1A FC 71 FD | 	getct	result2 wc
1879c     1A 00 62 FD | 	getct	_var01
187a0     10 E8 05 F1 | 	add	ptr___system__dat__, #16
187a4     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
187a8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
187ac     20 00 90 5D |  if_ne	jmp	#LR__2070
187b0     14 02 06 FB | 	rdlong	_var02, #20
187b4     A1 07 00 FF 
187b8     40 02 16 FD | 	qdiv	_var02, ##1000000
187bc     10 E8 05 F1 | 	add	ptr___system__dat__, #16
187c0     18 FA 61 FD | 	getqx	result1
187c4     FD 02 02 F6 | 	mov	_var02, result1
187c8     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
187cc     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
187d0                 | LR__2070
187d0     01 FD 11 FD | 	qdiv	result2, _var02
187d4     19 FC 61 FD | 	getqy	result2
187d8     28 FC 61 FD | 	setq	result2
187dc     01 01 12 FD | 	qdiv	_var01, _var02
187e0     18 FA 61 FD | 	getqx	result1
187e4                 | __system___getus_ret
187e4     2D 00 64 FD | 	ret
187e8                 | 
187e8                 | __system____builtin_memmove
187e8     09 01 02 F6 | 	mov	_var01, arg01
187ec     0A 13 52 F2 | 	cmps	arg01, arg02 wc
187f0     10 00 90 CD |  if_b	jmp	#LR__2080
187f4     0A 03 02 F6 | 	mov	_var02, arg02
187f8     0B 03 02 F1 | 	add	_var02, arg03
187fc     01 13 52 F2 | 	cmps	arg01, _var02 wc
18800     48 00 90 CD |  if_b	jmp	#LR__2086
18804                 | LR__2080
18804     0B 05 02 F6 | 	mov	_var03, arg03
18808     02 04 4E F0 | 	shr	_var03, #2 wz
1880c     18 00 90 AD |  if_e	jmp	#LR__2085
18810     97 0A 48 FB | 	callpa	#(@LR__2083-@LR__2081)>>2,fcache_load_ptr_
18814                 | LR__2081
18814     02 09 D8 FC | 	rep	@LR__2084, _var03
18818                 | LR__2082
18818     0A 05 02 FB | 	rdlong	_var03, arg02
1881c     09 05 62 FC | 	wrlong	_var03, arg01
18820     04 12 06 F1 | 	add	arg01, #4
18824     04 14 06 F1 | 	add	arg02, #4
18828                 | LR__2083
18828                 | LR__2084
18828                 | LR__2085
18828     02 16 CE F7 | 	test	arg03, #2 wz
1882c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
18830     09 03 52 5C |  if_ne	wrword	_var02, arg01
18834     02 12 06 51 |  if_ne	add	arg01, #2
18838     02 14 06 51 |  if_ne	add	arg02, #2
1883c     01 16 CE F7 | 	test	arg03, #1 wz
18840     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
18844     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
18848     28 00 90 FD | 	jmp	#LR__2092
1884c                 | LR__2086
1884c     0B 13 02 F1 | 	add	arg01, arg03
18850     0B 15 02 F1 | 	add	arg02, arg03
18854     0B 07 0A F6 | 	mov	_var04, arg03 wz
18858     18 00 90 AD |  if_e	jmp	#LR__2091
1885c     97 0A 48 FB | 	callpa	#(@LR__2089-@LR__2087)>>2,fcache_load_ptr_
18860                 | LR__2087
18860     03 09 D8 FC | 	rep	@LR__2090, _var04
18864                 | LR__2088
18864     01 12 86 F1 | 	sub	arg01, #1
18868     01 14 86 F1 | 	sub	arg02, #1
1886c     0A 03 C2 FA | 	rdbyte	_var02, arg02
18870     09 03 42 FC | 	wrbyte	_var02, arg01
18874                 | LR__2089
18874                 | LR__2090
18874                 | LR__2091
18874                 | LR__2092
18874     00 FB 01 F6 | 	mov	result1, _var01
18878                 | __system____builtin_memmove_ret
18878     2D 00 64 FD | 	ret
1887c                 | 
1887c                 | __system____builtin_strcpy
1887c     09 01 02 F6 | 	mov	_var01, arg01
18880     97 0A 48 FB | 	callpa	#(@LR__2101-@LR__2100)>>2,fcache_load_ptr_
18884                 | LR__2100
18884     0A FB C9 FA | 	rdbyte	result1, arg02 wz
18888     09 FB 41 FC | 	wrbyte	result1, arg01
1888c     01 14 06 F1 | 	add	arg02, #1
18890     01 12 06 F1 | 	add	arg01, #1
18894     EC FF 9F 5D |  if_ne	jmp	#LR__2100
18898                 | LR__2101
18898     00 FB 01 F6 | 	mov	result1, _var01
1889c                 | __system____builtin_strcpy_ret
1889c     2D 00 64 FD | 	ret
188a0                 | 
188a0                 | __system____topofstack
188a0     00 4A 05 F6 | 	mov	COUNT_, #0
188a4     A8 00 A0 FD | 	call	#pushregs_
188a8     08 F0 07 F1 | 	add	ptra, #8
188ac     04 4E 05 F1 | 	add	fp, #4
188b0     A7 12 62 FC | 	wrlong	arg01, fp
188b4     A7 FA 01 F6 | 	mov	result1, fp
188b8     04 4E 85 F1 | 	sub	fp, #4
188bc     A7 F0 03 F6 | 	mov	ptra, fp
188c0     B2 00 A0 FD | 	call	#popregs_
188c4                 | __system____topofstack_ret
188c4     2D 00 64 FD | 	ret
188c8                 | 
188c8                 | __system___lockmem
188c8     00 FA 05 F6 | 	mov	result1, #0
188cc     01 FA 61 FD | 	cogid	result1
188d0     00 FB 05 F1 | 	add	result1, #256
188d4                 | LR__2110
188d4     09 01 0A FB | 	rdlong	_var01, arg01 wz
188d8     09 FB 61 AC |  if_e	wrlong	result1, arg01
188dc     09 01 02 AB |  if_e	rdlong	_var01, arg01
188e0     09 01 02 AB |  if_e	rdlong	_var01, arg01
188e4     FD 00 0A F2 | 	cmp	_var01, result1 wz
188e8     E8 FF 9F 5D |  if_ne	jmp	#LR__2110
188ec                 | __system___lockmem_ret
188ec     2D 00 64 FD | 	ret
188f0                 | 
188f0                 | __system___string_cmp
188f0     97 14 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
188f4                 | LR__2120
188f4     09 01 C2 FA | 	rdbyte	_var01, arg01
188f8     0A 03 C2 FA | 	rdbyte	_var02, arg02
188fc     00 05 02 F6 | 	mov	_var03, _var01
18900     01 05 8A F1 | 	sub	_var03, _var02 wz
18904     01 12 06 F1 | 	add	arg01, #1
18908     01 14 06 F1 | 	add	arg02, #1
1890c     0C 00 90 5D |  if_ne	jmp	#LR__2122
18910     00 00 0E F2 | 	cmp	_var01, #0 wz
18914     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
18918     D8 FF 9F 5D |  if_ne	jmp	#LR__2120
1891c                 | LR__2121
1891c                 | LR__2122
1891c     02 FB 01 F6 | 	mov	result1, _var03
18920                 | __system___string_cmp_ret
18920     2D 00 64 FD | 	ret
18924                 | 
18924                 | __system___string_concat
18924     05 4A 05 F6 | 	mov	COUNT_, #5
18928     A8 00 A0 FD | 	call	#pushregs_
1892c     09 1F 02 F6 | 	mov	local01, arg01
18930     0A 21 02 F6 | 	mov	local02, arg02
18934     0F 13 02 F6 | 	mov	arg01, local01
18938     09 23 02 F6 | 	mov	local03, arg01
1893c     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
18940                 | LR__2130
18940     11 FB C9 FA | 	rdbyte	result1, local03 wz
18944     01 22 06 51 |  if_ne	add	local03, #1
18948     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
1894c                 | LR__2131
1894c     09 23 82 F1 | 	sub	local03, arg01
18950     11 25 02 F6 | 	mov	local04, local03
18954     10 13 02 F6 | 	mov	arg01, local02
18958     09 23 02 F6 | 	mov	local03, arg01
1895c     97 06 48 FB | 	callpa	#(@LR__2133-@LR__2132)>>2,fcache_load_ptr_
18960                 | LR__2132
18960     11 FB C9 FA | 	rdbyte	result1, local03 wz
18964     01 22 06 51 |  if_ne	add	local03, #1
18968     F4 FF 9F 5D |  if_ne	jmp	#LR__2132
1896c                 | LR__2133
1896c     09 23 82 F1 | 	sub	local03, arg01
18970     12 13 02 F6 | 	mov	arg01, local04
18974     11 13 02 F1 | 	add	arg01, local03
18978     01 12 06 F1 | 	add	arg01, #1
1897c     F8 3B B0 FD | 	call	#__system___gc_alloc_managed
18980     FD 26 0A F6 | 	mov	local05, result1 wz
18984     28 00 90 AD |  if_e	jmp	#LR__2134
18988     13 13 02 F6 | 	mov	arg01, local05
1898c     0F 15 02 F6 | 	mov	arg02, local01
18990     12 17 02 F6 | 	mov	arg03, local04
18994     50 FE BF FD | 	call	#__system____builtin_memmove
18998     13 13 02 F6 | 	mov	arg01, local05
1899c     12 13 02 F1 | 	add	arg01, local04
189a0     01 22 06 F1 | 	add	local03, #1
189a4     10 15 02 F6 | 	mov	arg02, local02
189a8     11 17 02 F6 | 	mov	arg03, local03
189ac     38 FE BF FD | 	call	#__system____builtin_memmove
189b0                 | LR__2134
189b0     13 FB 01 F6 | 	mov	result1, local05
189b4     A7 F0 03 F6 | 	mov	ptra, fp
189b8     B2 00 A0 FD | 	call	#popregs_
189bc                 | __system___string_concat_ret
189bc     2D 00 64 FD | 	ret
189c0                 | 
189c0                 | __system___tx
189c0     02 4A 05 F6 | 	mov	COUNT_, #2
189c4     A8 00 A0 FD | 	call	#pushregs_
189c8     09 1F 02 F6 | 	mov	local01, arg01
189cc     0A 1E 0E F2 | 	cmp	local01, #10 wz
189d0     18 00 90 5D |  if_ne	jmp	#LR__2140
189d4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
189d8     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
189dc     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
189e0     02 20 CE F7 | 	test	local02, #2 wz
189e4     0D 12 06 56 |  if_ne	mov	arg01, #13
189e8     6C FC BF 5D |  if_ne	call	#__system___txraw
189ec                 | LR__2140
189ec     0F 13 02 F6 | 	mov	arg01, local01
189f0     64 FC BF FD | 	call	#__system___txraw
189f4     A7 F0 03 F6 | 	mov	ptra, fp
189f8     B2 00 A0 FD | 	call	#popregs_
189fc                 | __system___tx_ret
189fc     2D 00 64 FD | 	ret
18a00                 | 
18a00                 | __system___rx
18a00     01 4A 05 F6 | 	mov	COUNT_, #1
18a04     A8 00 A0 FD | 	call	#pushregs_
18a08                 | LR__2150
18a08     00 12 06 F6 | 	mov	arg01, #0
18a0c     8C FC BF FD | 	call	#__system___rxraw
18a10     FD 1E 02 F6 | 	mov	local01, result1
18a14     FF FF 7F FF 
18a18     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
18a1c     E8 FF 9F AD |  if_e	jmp	#LR__2150
18a20     0D 1E 0E F2 | 	cmp	local01, #13 wz
18a24     14 00 90 5D |  if_ne	jmp	#LR__2151
18a28     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18a2c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18a30     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18a34     02 FA CD F7 | 	test	result1, #2 wz
18a38     0A 1E 06 56 |  if_ne	mov	local01, #10
18a3c                 | LR__2151
18a3c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
18a40     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
18a44     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
18a48     01 12 CE F7 | 	test	arg01, #1 wz
18a4c     1C 00 90 AD |  if_e	jmp	#LR__2154
18a50     7F 1E 0E F2 | 	cmp	local01, #127 wz
18a54     0C 00 90 5D |  if_ne	jmp	#LR__2152
18a58     08 12 06 F6 | 	mov	arg01, #8
18a5c     60 FF BF FD | 	call	#__system___tx
18a60     08 00 90 FD | 	jmp	#LR__2153
18a64                 | LR__2152
18a64     0F 13 02 F6 | 	mov	arg01, local01
18a68     54 FF BF FD | 	call	#__system___tx
18a6c                 | LR__2153
18a6c                 | LR__2154
18a6c     0F FB 01 F6 | 	mov	result1, local01
18a70     A7 F0 03 F6 | 	mov	ptra, fp
18a74     B2 00 A0 FD | 	call	#popregs_
18a78                 | __system___rx_ret
18a78     2D 00 64 FD | 	ret
18a7c                 | 
18a7c                 | __system___pinwrite
18a7c     09 01 02 F6 | 	mov	_var01, arg01
18a80     1F 00 06 F5 | 	and	_var01, #31
18a84     20 12 CE F7 | 	test	arg01, #32 wz
18a88     06 12 46 F0 | 	shr	arg01, #6
18a8c     09 13 CA F9 | 	bmask	arg01, arg01
18a90     00 13 62 F0 | 	shl	arg01, _var01
18a94     00 15 62 F0 | 	shl	arg02, _var01
18a98     1C 00 90 AD |  if_e	jmp	#LR__2160
18a9c     09 F7 43 F5 | 	or	dirb, arg01
18aa0     FD 01 02 F6 | 	mov	_var01, outb
18aa4     09 01 22 F5 | 	andn	_var01, arg01
18aa8     09 15 02 F5 | 	and	arg02, arg01
18aac     0A 01 42 F5 | 	or	_var01, arg02
18ab0     00 FB 03 F6 | 	mov	outb, _var01
18ab4     18 00 90 FD | 	jmp	#LR__2161
18ab8                 | LR__2160
18ab8     09 F5 43 F5 | 	or	dira, arg01
18abc     FC 01 02 F6 | 	mov	_var01, outa
18ac0     09 01 22 F5 | 	andn	_var01, arg01
18ac4     09 15 02 F5 | 	and	arg02, arg01
18ac8     0A 01 42 F5 | 	or	_var01, arg02
18acc     00 F9 03 F6 | 	mov	outa, _var01
18ad0                 | LR__2161
18ad0                 | __system___pinwrite_ret
18ad0     2D 00 64 FD | 	ret
18ad4                 | 
18ad4                 | __system___basic_read_line
18ad4     06 4A 05 F6 | 	mov	COUNT_, #6
18ad8     A8 00 A0 FD | 	call	#pushregs_
18adc     09 1F 02 F6 | 	mov	local01, arg01
18ae0     00 20 06 F6 | 	mov	local02, #0
18ae4     18 22 06 F6 | 	mov	local03, #24
18ae8     00 24 06 F6 | 	mov	local04, #0
18aec     18 12 06 F6 | 	mov	arg01, #24
18af0     84 3A B0 FD | 	call	#__system___gc_alloc_managed
18af4     FD 26 0A F6 | 	mov	local05, result1 wz
18af8     13 FB 01 A6 |  if_e	mov	result1, local05
18afc     B0 00 90 AD |  if_e	jmp	#LR__2173
18b00                 | LR__2170
18b00     0F 13 02 F6 | 	mov	arg01, local01
18b04     74 0B B0 FD | 	call	#__system___basic_get_char
18b08     FD 28 02 F6 | 	mov	local06, result1
18b0c     01 28 56 F2 | 	cmps	local06, #1 wc
18b10     8C 00 90 CD |  if_b	jmp	#LR__2172
18b14     0A 28 0E F2 | 	cmp	local06, #10 wz
18b18     10 00 90 5D |  if_ne	jmp	#LR__2171
18b1c     00 24 0E F2 | 	cmp	local04, #0 wz
18b20     01 20 56 52 |  if_ne	cmps	local02, #1 wc
18b24     01 20 86 11 |  if_a	sub	local02, #1
18b28     74 00 90 FD | 	jmp	#LR__2172
18b2c                 | LR__2171
18b2c     0D 28 0E F2 | 	cmp	local06, #13 wz
18b30     01 24 06 A6 |  if_e	mov	local04, #1
18b34     00 24 06 56 |  if_ne	mov	local04, #0
18b38     08 28 0E F2 | 	cmp	local06, #8 wz
18b3c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
18b40     01 20 56 A2 |  if_e	cmps	local02, #1 wc
18b44     01 20 86 21 |  if_nc_and_z	sub	local02, #1
18b48     B4 FF 9F AD |  if_e	jmp	#LR__2170
18b4c     13 17 02 F6 | 	mov	arg03, local05
18b50     10 17 02 F1 | 	add	arg03, local02
18b54     0B 29 42 FC | 	wrbyte	local06, arg03
18b58     01 20 06 F1 | 	add	local02, #1
18b5c     11 21 0A F2 | 	cmp	local02, local03 wz
18b60     9C FF 9F 5D |  if_ne	jmp	#LR__2170
18b64     11 13 02 F6 | 	mov	arg01, local03
18b68     20 12 06 F1 | 	add	arg01, #32
18b6c     08 3A B0 FD | 	call	#__system___gc_alloc_managed
18b70     FD 28 0A F6 | 	mov	local06, result1 wz
18b74     14 FB 01 A6 |  if_e	mov	result1, local06
18b78     34 00 90 AD |  if_e	jmp	#LR__2173
18b7c     14 13 02 F6 | 	mov	arg01, local06
18b80     13 15 02 F6 | 	mov	arg02, local05
18b84     11 17 02 F6 | 	mov	arg03, local03
18b88     5C FC BF FD | 	call	#__system____builtin_memmove
18b8c     20 22 06 F1 | 	add	local03, #32
18b90     13 13 02 F6 | 	mov	arg01, local05
18b94     1C 3B B0 FD | 	call	#__system___gc_free
18b98     14 27 02 F6 | 	mov	local05, local06
18b9c     60 FF 9F FD | 	jmp	#LR__2170
18ba0                 | LR__2172
18ba0     13 29 02 F6 | 	mov	local06, local05
18ba4     10 29 02 F1 | 	add	local06, local02
18ba8     14 01 48 FC | 	wrbyte	#0, local06
18bac     13 FB 01 F6 | 	mov	result1, local05
18bb0                 | LR__2173
18bb0     A7 F0 03 F6 | 	mov	ptra, fp
18bb4     B2 00 A0 FD | 	call	#popregs_
18bb8                 | __system___basic_read_line_ret
18bb8     2D 00 64 FD | 	ret
18bbc                 | 
18bbc                 | __system___waitms
18bbc     09 01 02 F6 | 	mov	_var01, arg01
18bc0     1A 02 62 FD | 	getct	_var02
18bc4     14 04 06 FB | 	rdlong	_var03, #20
18bc8     97 14 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
18bcc                 | LR__2180
18bcc     01 00 00 FF 
18bd0     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
18bd4     1C 00 90 CD |  if_b	jmp	#LR__2182
18bd8     02 03 02 F1 | 	add	_var02, _var03
18bdc     01 13 02 F6 | 	mov	arg01, _var02
18be0     00 12 66 FA | 	addct1	arg01, #0
18be4     24 22 60 FD | 	waitct1
18be8     01 00 00 FF 
18bec     E8 01 86 F1 | 	sub	_var01, ##1000
18bf0     D8 FF 9F FD | 	jmp	#LR__2180
18bf4                 | LR__2181
18bf4                 | LR__2182
18bf4     01 00 56 F2 | 	cmps	_var01, #1 wc
18bf8     28 00 90 CD |  if_b	jmp	#LR__2183
18bfc     02 01 02 FD | 	qmul	_var01, _var03
18c00     01 00 00 FF 
18c04     E8 17 06 F6 | 	mov	arg03, ##1000
18c08     19 FA 61 FD | 	getqy	result1
18c0c     18 12 62 FD | 	getqx	arg01
18c10     28 FA 61 FD | 	setq	result1
18c14     0B 13 12 FD | 	qdiv	arg01, arg03
18c18     18 12 62 FD | 	getqx	arg01
18c1c     01 13 62 FA | 	addct1	arg01, _var02
18c20     24 22 60 FD | 	waitct1
18c24                 | LR__2183
18c24                 | __system___waitms_ret
18c24     2D 00 64 FD | 	ret
18c28                 | 
18c28                 | __system___waitus
18c28     09 01 02 F6 | 	mov	_var01, arg01
18c2c     1A 02 62 FD | 	getct	_var02
18c30     14 04 06 FB | 	rdlong	_var03, #20
18c34     97 14 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
18c38                 | LR__2190
18c38     A1 07 00 FF 
18c3c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
18c40     1C 00 90 CD |  if_b	jmp	#LR__2192
18c44     02 03 02 F1 | 	add	_var02, _var03
18c48     01 13 02 F6 | 	mov	arg01, _var02
18c4c     00 12 66 FA | 	addct1	arg01, #0
18c50     24 22 60 FD | 	waitct1
18c54     A1 07 00 FF 
18c58     40 00 86 F1 | 	sub	_var01, ##1000000
18c5c     D8 FF 9F FD | 	jmp	#LR__2190
18c60                 | LR__2191
18c60                 | LR__2192
18c60     01 00 56 F2 | 	cmps	_var01, #1 wc
18c64     28 00 90 CD |  if_b	jmp	#LR__2193
18c68     02 01 02 FD | 	qmul	_var01, _var03
18c6c     A1 07 00 FF 
18c70     40 16 06 F6 | 	mov	arg03, ##1000000
18c74     19 FA 61 FD | 	getqy	result1
18c78     18 12 62 FD | 	getqx	arg01
18c7c     28 FA 61 FD | 	setq	result1
18c80     0B 13 12 FD | 	qdiv	arg01, arg03
18c84     18 FA 61 FD | 	getqx	result1
18c88     FD 02 62 FA | 	addct1	_var02, result1
18c8c     24 22 60 FD | 	waitct1
18c90                 | LR__2193
18c90                 | __system___waitus_ret
18c90     2D 00 64 FD | 	ret
18c94                 | 
18c94                 | __system___mount
18c94     0B 4A 05 F6 | 	mov	COUNT_, #11
18c98     A8 00 A0 FD | 	call	#pushregs_
18c9c     09 1F 02 F6 | 	mov	local01, arg01
18ca0     0A 21 0A F6 | 	mov	local02, arg02 wz
18ca4     01 22 66 F6 | 	neg	local03, #1
18ca8     01 FA 65 A6 |  if_e	neg	result1, #1
18cac     98 02 90 AD |  if_e	jmp	#LR__2215
18cb0     0F FB C1 FA | 	rdbyte	result1, local01
18cb4     2F FA 0D F2 | 	cmp	result1, #47 wz
18cb8     28 00 90 5D |  if_ne	jmp	#LR__2202
18cbc     0F 13 02 F6 | 	mov	arg01, local01
18cc0     09 25 02 F6 | 	mov	local04, arg01
18cc4     97 06 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
18cc8                 | LR__2200
18cc8     12 FB C9 FA | 	rdbyte	result1, local04 wz
18ccc     01 24 06 51 |  if_ne	add	local04, #1
18cd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2200
18cd4                 | LR__2201
18cd4     09 25 82 F1 | 	sub	local04, arg01
18cd8     12 FB 01 F6 | 	mov	result1, local04
18cdc     10 FA 55 F2 | 	cmps	result1, #16 wc
18ce0     14 00 90 CD |  if_b	jmp	#LR__2203
18ce4                 | LR__2202
18ce4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18ce8     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
18cec     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18cf0     01 FA 65 F6 | 	neg	result1, #1
18cf4     50 02 90 FD | 	jmp	#LR__2215
18cf8                 | LR__2203
18cf8     00 26 06 F6 | 	mov	local05, #0
18cfc                 | LR__2204
18cfc     04 26 56 F2 | 	cmps	local05, #4 wc
18d00     B0 00 90 3D |  if_ae	jmp	#LR__2209
18d04     13 13 02 F6 | 	mov	arg01, local05
18d08     02 12 66 F0 | 	shl	arg01, #2
18d0c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18d10     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18d14     09 FB 09 FB | 	rdlong	result1, arg01 wz
18d18     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18d1c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
18d20     13 23 02 86 |  if_c_and_z	mov	local03, local05
18d24     84 00 90 8D |  if_c_and_z	jmp	#LR__2208
18d28     13 13 02 F6 | 	mov	arg01, local05
18d2c     02 12 66 F0 | 	shl	arg01, #2
18d30     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18d34     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18d38     09 13 02 FB | 	rdlong	arg01, arg01
18d3c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18d40     09 25 02 F6 | 	mov	local04, arg01
18d44     97 06 48 FB | 	callpa	#(@LR__2206-@LR__2205)>>2,fcache_load_ptr_
18d48                 | LR__2205
18d48     12 FB C9 FA | 	rdbyte	result1, local04 wz
18d4c     01 24 06 51 |  if_ne	add	local04, #1
18d50     F4 FF 9F 5D |  if_ne	jmp	#LR__2205
18d54                 | LR__2206
18d54     09 25 82 F1 | 	sub	local04, arg01
18d58     12 29 02 F6 | 	mov	local06, local04
18d5c     14 13 02 F6 | 	mov	arg01, local06
18d60     0F 13 02 F1 | 	add	arg01, local01
18d64     09 FB C1 FA | 	rdbyte	result1, arg01
18d68     2F FA 0D F2 | 	cmp	result1, #47 wz
18d6c     14 2B 02 56 |  if_ne	mov	local07, local06
18d70     0F 2B 02 51 |  if_ne	add	local07, local01
18d74     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
18d78     30 00 90 5D |  if_ne	jmp	#LR__2207
18d7c     13 17 02 F6 | 	mov	arg03, local05
18d80     02 16 66 F0 | 	shl	arg03, #2
18d84     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18d88     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
18d8c     0B 15 02 FB | 	rdlong	arg02, arg03
18d90     0F 13 02 F6 | 	mov	arg01, local01
18d94     14 17 02 F6 | 	mov	arg03, local06
18d98     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18d9c     1C 4C B0 FD | 	call	#__system__strncmp
18da0     00 FA 0D F2 | 	cmp	result1, #0 wz
18da4     13 23 02 A6 |  if_e	mov	local03, local05
18da8     08 00 90 AD |  if_e	jmp	#LR__2209
18dac                 | LR__2207
18dac                 | LR__2208
18dac     01 26 06 F1 | 	add	local05, #1
18db0     48 FF 9F FD | 	jmp	#LR__2204
18db4                 | LR__2209
18db4     FF FF 7F FF 
18db8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
18dbc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18dc0     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
18dc4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18dc8     01 FA 65 A6 |  if_e	neg	result1, #1
18dcc     78 01 90 AD |  if_e	jmp	#LR__2215
18dd0     11 27 02 F6 | 	mov	local05, local03
18dd4     13 2B 02 F6 | 	mov	local07, local05
18dd8     02 2A 66 F0 | 	shl	local07, #2
18ddc     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18de0     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
18de4     15 29 0A FB | 	rdlong	local06, local07 wz
18de8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
18dec     58 00 90 AD |  if_e	jmp	#LR__2210
18df0     4C 28 06 F1 | 	add	local06, #76
18df4     14 2B 0A FB | 	rdlong	local07, local06 wz
18df8     4C 28 86 F1 | 	sub	local06, #76
18dfc     48 00 90 AD |  if_e	jmp	#LR__2210
18e00     4C 28 06 F1 | 	add	local06, #76
18e04     14 2B 02 FB | 	rdlong	local07, local06
18e08     15 23 02 F6 | 	mov	local03, local07
18e0c     13 2A 46 F7 | 	zerox	local07, #19
18e10     14 22 46 F0 | 	shr	local03, #20
18e14     02 22 66 F0 | 	shl	local03, #2
18e18     ED 22 02 F1 | 	add	local03, __methods__
18e1c     11 23 02 FB | 	rdlong	local03, local03
18e20     13 29 02 F6 | 	mov	local06, local05
18e24     02 28 66 F0 | 	shl	local06, #2
18e28     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18e2c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
18e30     14 13 02 FB | 	rdlong	arg01, local06
18e34     F2 28 02 F6 | 	mov	local06, objptr
18e38     15 E5 01 F6 | 	mov	objptr, local07
18e3c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18e40     2D 22 62 FD | 	call	local03
18e44     14 E5 01 F6 | 	mov	objptr, local06
18e48                 | LR__2210
18e48     13 2D 02 F6 | 	mov	local08, local05
18e4c     02 2C 66 F0 | 	shl	local08, #2
18e50     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18e54     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
18e58     16 21 62 FC | 	wrlong	local02, local08
18e5c     00 20 0E F2 | 	cmp	local02, #0 wz
18e60     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
18e64     18 00 90 5D |  if_ne	jmp	#LR__2211
18e68     02 26 66 F0 | 	shl	local05, #2
18e6c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18e70     F4 26 02 F1 | 	add	local05, ptr___system__dat__
18e74     13 01 68 FC | 	wrlong	#0, local05
18e78     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18e7c     C4 00 90 FD | 	jmp	#LR__2214
18e80                 | LR__2211
18e80     13 2F 02 F6 | 	mov	local09, local05
18e84     04 2E 66 F0 | 	shl	local09, #4
18e88     24 E8 05 F1 | 	add	ptr___system__dat__, #36
18e8c     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
18e90     17 13 02 F6 | 	mov	arg01, local09
18e94     0F 15 02 F6 | 	mov	arg02, local01
18e98     10 16 06 F6 | 	mov	arg03, #16
18e9c     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
18ea0     6C 4A B0 FD | 	call	#__system__strncpy
18ea4     48 20 06 F1 | 	add	local02, #72
18ea8     10 2D 0A FB | 	rdlong	local08, local02 wz
18eac     48 20 86 F1 | 	sub	local02, #72
18eb0     7C 00 90 AD |  if_e	jmp	#LR__2213
18eb4     48 20 06 F1 | 	add	local02, #72
18eb8     10 2D 02 FB | 	rdlong	local08, local02
18ebc     16 31 02 F6 | 	mov	local10, local08
18ec0     13 2C 46 F7 | 	zerox	local08, #19
18ec4     14 30 46 F0 | 	shr	local10, #20
18ec8     02 30 66 F0 | 	shl	local10, #2
18ecc     ED 30 02 F1 | 	add	local10, __methods__
18ed0     18 31 02 FB | 	rdlong	local10, local10
18ed4     17 13 02 F6 | 	mov	arg01, local09
18ed8     F2 32 02 F6 | 	mov	local11, objptr
18edc     16 E5 01 F6 | 	mov	objptr, local08
18ee0     2D 30 62 FD | 	call	local10
18ee4     19 E5 01 F6 | 	mov	objptr, local11
18ee8     FD 12 0A F6 | 	mov	arg01, result1 wz
18eec     40 00 90 AD |  if_e	jmp	#LR__2212
18ef0     13 2D 02 F6 | 	mov	local08, local05
18ef4     02 2C 66 F0 | 	shl	local08, #2
18ef8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
18efc     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
18f00     16 01 68 FC | 	wrlong	#0, local08
18f04     02 26 66 F0 | 	shl	local05, #2
18f08     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
18f0c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
18f10     13 01 68 FC | 	wrlong	#0, local05
18f14     09 13 6A F6 | 	neg	arg01, arg01 wz
18f18     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
18f1c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
18f20     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18f24     01 FA 65 56 |  if_ne	neg	result1, #1
18f28     00 FA 05 A6 |  if_e	mov	result1, #0
18f2c     18 00 90 FD | 	jmp	#LR__2215
18f30                 | LR__2212
18f30                 | LR__2213
18f30     02 26 66 F0 | 	shl	local05, #2
18f34     64 E8 05 F1 | 	add	ptr___system__dat__, #100
18f38     F4 26 02 F1 | 	add	local05, ptr___system__dat__
18f3c     13 2F 62 FC | 	wrlong	local09, local05
18f40     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
18f44                 | LR__2214
18f44     00 FA 05 F6 | 	mov	result1, #0
18f48                 | LR__2215
18f48     A7 F0 03 F6 | 	mov	ptra, fp
18f4c     B2 00 A0 FD | 	call	#popregs_
18f50                 | __system___mount_ret
18f50     2D 00 64 FD | 	ret
18f54                 | 
18f54                 | __system___chdir
18f54     00 4A 05 F6 | 	mov	COUNT_, #0
18f58     A8 00 A0 FD | 	call	#pushregs_
18f5c     40 F0 07 F1 | 	add	ptra, #64
18f60     04 4E 05 F1 | 	add	fp, #4
18f64     A7 12 62 FC | 	wrlong	arg01, fp
18f68     04 4E 05 F1 | 	add	fp, #4
18f6c     A7 14 02 F6 | 	mov	arg02, fp
18f70     08 4E 85 F1 | 	sub	fp, #8
18f74     78 46 B0 FD | 	call	#__system__stat
18f78     3C 4E 05 F1 | 	add	fp, #60
18f7c     A7 FA 61 FC | 	wrlong	result1, fp
18f80     3C 4E 85 F1 | 	sub	fp, #60
18f84     00 FA 0D F2 | 	cmp	result1, #0 wz
18f88     3C 4E 05 51 |  if_ne	add	fp, #60
18f8c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
18f90     3C 4E 85 51 |  if_ne	sub	fp, #60
18f94     BC 00 90 5D |  if_ne	jmp	#LR__2222
18f98     10 4E 05 F1 | 	add	fp, #16
18f9c     A7 12 02 FB | 	rdlong	arg01, fp
18fa0     10 4E 85 F1 | 	sub	fp, #16
18fa4     78 00 00 FF 
18fa8     00 12 06 F5 | 	and	arg01, ##61440
18fac     08 00 00 FF 
18fb0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
18fb4     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
18fb8     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
18fbc     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
18fc0     01 FA 65 56 |  if_ne	neg	result1, #1
18fc4     8C 00 90 5D |  if_ne	jmp	#LR__2222
18fc8     04 4E 05 F1 | 	add	fp, #4
18fcc     A7 16 02 FB | 	rdlong	arg03, fp
18fd0     04 4E 85 F1 | 	sub	fp, #4
18fd4     0B 17 C2 FA | 	rdbyte	arg03, arg03
18fd8     2F 16 0E F2 | 	cmp	arg03, #47 wz
18fdc     24 00 90 5D |  if_ne	jmp	#LR__2220
18fe0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
18fe4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18fe8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
18fec     04 4E 05 F1 | 	add	fp, #4
18ff0     A7 14 02 FB | 	rdlong	arg02, fp
18ff4     04 4E 85 F1 | 	sub	fp, #4
18ff8     00 17 06 F6 | 	mov	arg03, #256
18ffc     10 49 B0 FD | 	call	#__system__strncpy
19000     4C 00 90 FD | 	jmp	#LR__2221
19004                 | LR__2220
19004     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19008     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1900c     38 4E 05 F1 | 	add	fp, #56
19010     A7 12 62 FC | 	wrlong	arg01, fp
19014     38 4E 85 F1 | 	sub	fp, #56
19018     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
1901c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
19020     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
19024     00 17 06 F6 | 	mov	arg03, #256
19028     E4 48 B0 FD | 	call	#__system__strncpy
1902c     38 4E 05 F1 | 	add	fp, #56
19030     A7 12 02 FB | 	rdlong	arg01, fp
19034     34 4E 85 F1 | 	sub	fp, #52
19038     A7 14 02 FB | 	rdlong	arg02, fp
1903c     04 4E 85 F1 | 	sub	fp, #4
19040     84 E8 05 F1 | 	add	ptr___system__dat__, #132
19044     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
19048     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1904c     10 00 B0 FD | 	call	#__system____getvfsforfile
19050                 | LR__2221
19050     00 FA 05 F6 | 	mov	result1, #0
19054                 | LR__2222
19054     A7 F0 03 F6 | 	mov	ptra, fp
19058     B2 00 A0 FD | 	call	#popregs_
1905c                 | __system___chdir_ret
1905c     2D 00 64 FD | 	ret
19060                 | 
19060                 | __system____getvfsforfile
19060     0E 4A 05 F6 | 	mov	COUNT_, #14
19064     A8 00 A0 FD | 	call	#pushregs_
19068     09 1F 02 F6 | 	mov	local01, arg01
1906c     0A 21 02 F6 | 	mov	local02, arg02
19070     0B 23 02 F6 | 	mov	local03, arg03
19074     97 10 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
19078                 | LR__2230
19078     10 FB C1 FA | 	rdbyte	result1, local02
1907c     2F FA 0D F2 | 	cmp	result1, #47 wz
19080     01 20 06 A1 |  if_e	add	local02, #1
19084     10 25 C2 AA |  if_e	rdbyte	local04, local02
19088     01 20 86 A1 |  if_e	sub	local02, #1
1908c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
19090     01 20 06 A1 |  if_e	add	local02, #1
19094     E0 FF 9F AD |  if_e	jmp	#LR__2230
19098                 | LR__2231
19098     10 25 C2 FA | 	rdbyte	local04, local02
1909c     2F 24 0E F2 | 	cmp	local04, #47 wz
190a0     14 00 90 5D |  if_ne	jmp	#LR__2232
190a4     0F 13 02 F6 | 	mov	arg01, local01
190a8     10 15 02 F6 | 	mov	arg02, local02
190ac     00 17 06 F6 | 	mov	arg03, #256
190b0     5C 48 B0 FD | 	call	#__system__strncpy
190b4     7C 00 90 FD | 	jmp	#LR__2234
190b8                 | LR__2232
190b8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
190bc     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
190c0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
190c4     0F 13 02 F6 | 	mov	arg01, local01
190c8     00 17 06 F6 | 	mov	arg03, #256
190cc     40 48 B0 FD | 	call	#__system__strncpy
190d0     10 25 CA FA | 	rdbyte	local04, local02 wz
190d4     5C 00 90 AD |  if_e	jmp	#LR__2233
190d8     10 25 C2 FA | 	rdbyte	local04, local02
190dc     2E 24 0E F2 | 	cmp	local04, #46 wz
190e0     01 20 06 A1 |  if_e	add	local02, #1
190e4     10 27 C2 AA |  if_e	rdbyte	local05, local02
190e8     01 20 86 A1 |  if_e	sub	local02, #1
190ec     13 29 02 A6 |  if_e	mov	local06, local05
190f0     07 28 4E A7 |  if_e	zerox	local06, #7 wz
190f4     3C 00 90 AD |  if_e	jmp	#LR__2233
190f8     0F 27 C2 FA | 	rdbyte	local05, local01
190fc     2F 26 0E F2 | 	cmp	local05, #47 wz
19100     01 1E 06 A1 |  if_e	add	local01, #1
19104     0F 25 C2 AA |  if_e	rdbyte	local04, local01
19108     01 1E 86 A1 |  if_e	sub	local01, #1
1910c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
19110     3D 01 00 5F 
19114     EC 15 06 56 |  if_ne	mov	arg02, ##@LR__4260
19118     0F 13 02 56 |  if_ne	mov	arg01, local01
1911c     00 17 06 56 |  if_ne	mov	arg03, #256
19120     38 48 B0 5D |  if_ne	call	#__system__strncat
19124     0F 13 02 F6 | 	mov	arg01, local01
19128     10 15 02 F6 | 	mov	arg02, local02
1912c     00 17 06 F6 | 	mov	arg03, #256
19130     28 48 B0 FD | 	call	#__system__strncat
19134                 | LR__2233
19134                 | LR__2234
19134     0F 13 02 F6 | 	mov	arg01, local01
19138     E0 49 B0 FD | 	call	#__system___normalizeName
1913c     0F 25 CA FA | 	rdbyte	local04, local01 wz
19140     1C 00 90 AD |  if_e	jmp	#LR__2235
19144     0F 25 C2 FA | 	rdbyte	local04, local01
19148     2F 24 0E F2 | 	cmp	local04, #47 wz
1914c     01 1E 06 A1 |  if_e	add	local01, #1
19150     0F 29 C2 AA |  if_e	rdbyte	local06, local01
19154     01 1E 86 A1 |  if_e	sub	local01, #1
19158     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1915c     18 00 90 5D |  if_ne	jmp	#LR__2236
19160                 | LR__2235
19160     01 00 00 FF 
19164     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
19168     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1916c     01 00 00 FF 
19170     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
19174     EC 01 90 FD | 	jmp	#LR__2250
19178                 | LR__2236
19178     00 2A 06 F6 | 	mov	local07, #0
1917c                 | LR__2237
1917c     04 2A 56 F2 | 	cmps	local07, #4 wc
19180     CC 01 90 3D |  if_ae	jmp	#LR__2249
19184     15 29 02 F6 | 	mov	local06, local07
19188     02 28 66 F0 | 	shl	local06, #2
1918c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19190     F4 28 02 F1 | 	add	local06, ptr___system__dat__
19194     14 29 0A FB | 	rdlong	local06, local06 wz
19198     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1919c     A8 01 90 AD |  if_e	jmp	#LR__2248
191a0     15 25 02 F6 | 	mov	local04, local07
191a4     02 24 66 F0 | 	shl	local04, #2
191a8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
191ac     F4 24 02 F1 | 	add	local04, ptr___system__dat__
191b0     12 13 02 FB | 	rdlong	arg01, local04
191b4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
191b8     09 2D 02 F6 | 	mov	local08, arg01
191bc     97 06 48 FB | 	callpa	#(@LR__2239-@LR__2238)>>2,fcache_load_ptr_
191c0                 | LR__2238
191c0     16 FB C9 FA | 	rdbyte	result1, local08 wz
191c4     01 2C 06 51 |  if_ne	add	local08, #1
191c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2238
191cc                 | LR__2239
191cc     09 2D 82 F1 | 	sub	local08, arg01
191d0     16 2F 02 F6 | 	mov	local09, local08
191d4     17 25 02 F6 | 	mov	local04, local09
191d8     0F 25 02 F1 | 	add	local04, local01
191dc     12 29 C2 FA | 	rdbyte	local06, local04
191e0     2F 28 0E F2 | 	cmp	local06, #47 wz
191e4     17 31 02 56 |  if_ne	mov	local10, local09
191e8     0F 31 02 51 |  if_ne	add	local10, local01
191ec     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
191f0     54 01 90 5D |  if_ne	jmp	#LR__2247
191f4     15 17 02 F6 | 	mov	arg03, local07
191f8     02 16 66 F0 | 	shl	arg03, #2
191fc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19200     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
19204     0B 15 02 FB | 	rdlong	arg02, arg03
19208     17 17 02 F6 | 	mov	arg03, local09
1920c     0F 13 02 F6 | 	mov	arg01, local01
19210     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19214     A4 47 B0 FD | 	call	#__system__strncmp
19218     00 FA 4D F2 | 	cmps	result1, #0 wz
1921c     28 01 90 5D |  if_ne	jmp	#LR__2247
19220     15 33 02 F6 | 	mov	local11, local07
19224     02 32 66 F0 | 	shl	local11, #2
19228     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1922c     F4 32 02 F1 | 	add	local11, ptr___system__dat__
19230     19 35 02 FB | 	rdlong	local12, local11
19234     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19238     97 22 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
1923c                 | LR__2240
1923c     17 29 02 F6 | 	mov	local06, local09
19240     01 28 06 F1 | 	add	local06, #1
19244     0F 29 02 F1 | 	add	local06, local01
19248     14 33 C2 FA | 	rdbyte	local11, local06
1924c     2E 32 0E F2 | 	cmp	local11, #46 wz
19250     2C 00 90 5D |  if_ne	jmp	#LR__2242
19254     17 33 02 F6 | 	mov	local11, local09
19258     02 32 06 F1 | 	add	local11, #2
1925c     0F 33 02 F1 | 	add	local11, local01
19260     19 31 C2 FA | 	rdbyte	local10, local11
19264     2F 30 0E F2 | 	cmp	local10, #47 wz
19268     17 37 02 56 |  if_ne	mov	local13, local09
1926c     02 36 06 51 |  if_ne	add	local13, #2
19270     0F 37 02 51 |  if_ne	add	local13, local01
19274     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
19278     01 2E 06 A1 |  if_e	add	local09, #1
1927c     BC FF 9F AD |  if_e	jmp	#LR__2240
19280                 | LR__2241
19280                 | LR__2242
19280     00 22 0E F2 | 	cmp	local03, #0 wz
19284     11 13 02 56 |  if_ne	mov	arg01, local03
19288     0F 15 02 56 |  if_ne	mov	arg02, local01
1928c     00 17 06 56 |  if_ne	mov	arg03, #256
19290     7C 46 B0 5D |  if_ne	call	#__system__strncpy
19294     0F 15 02 F6 | 	mov	arg02, local01
19298     17 15 02 F1 | 	add	arg02, local09
1929c     01 14 06 F1 | 	add	arg02, #1
192a0     0F 13 02 F6 | 	mov	arg01, local01
192a4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
192a8     0F 13 02 F6 | 	mov	arg01, local01
192ac     09 2D 02 F6 | 	mov	local08, arg01
192b0     97 06 48 FB | 	callpa	#(@LR__2244-@LR__2243)>>2,fcache_load_ptr_
192b4                 | LR__2243
192b4     16 FB C9 FA | 	rdbyte	result1, local08 wz
192b8     01 2C 06 51 |  if_ne	add	local08, #1
192bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2243
192c0                 | LR__2244
192c0     09 2D 82 F1 | 	sub	local08, arg01
192c4     16 2F 02 F6 | 	mov	local09, local08
192c8                 | LR__2245
192c8     01 2E 56 F2 | 	cmps	local09, #1 wc
192cc     70 00 90 CD |  if_b	jmp	#LR__2246
192d0     17 25 02 F6 | 	mov	local04, local09
192d4     0F 25 02 F1 | 	add	local04, local01
192d8     12 33 C2 FA | 	rdbyte	local11, local04
192dc     2F 32 0E F2 | 	cmp	local11, #47 wz
192e0     17 33 02 A6 |  if_e	mov	local11, local09
192e4     0F 33 02 A1 |  if_e	add	local11, local01
192e8     19 01 48 AC |  if_e	wrbyte	#0, local11
192ec     01 2E 86 A1 |  if_e	sub	local09, #1
192f0     D4 FF 9F AD |  if_e	jmp	#LR__2245
192f4     17 25 02 F6 | 	mov	local04, local09
192f8     0F 25 02 F1 | 	add	local04, local01
192fc     12 33 C2 FA | 	rdbyte	local11, local04
19300     2E 32 0E F2 | 	cmp	local11, #46 wz
19304     38 00 90 5D |  if_ne	jmp	#LR__2246
19308     02 2E 56 F2 | 	cmps	local09, #2 wc
1930c     30 00 90 CD |  if_b	jmp	#LR__2246
19310     17 39 02 F6 | 	mov	local14, local09
19314     01 38 86 F1 | 	sub	local14, #1
19318     0F 39 02 F1 | 	add	local14, local01
1931c     1C 27 C2 FA | 	rdbyte	local05, local14
19320     2F 26 0E F2 | 	cmp	local05, #47 wz
19324     18 00 90 5D |  if_ne	jmp	#LR__2246
19328     17 25 02 F6 | 	mov	local04, local09
1932c     01 24 86 F1 | 	sub	local04, #1
19330     0F 25 02 F1 | 	add	local04, local01
19334     12 01 48 FC | 	wrbyte	#0, local04
19338     02 2E 86 F1 | 	sub	local09, #2
1933c     88 FF 9F FD | 	jmp	#LR__2245
19340                 | LR__2246
19340     1A FB 01 F6 | 	mov	result1, local12
19344     1C 00 90 FD | 	jmp	#LR__2250
19348                 | LR__2247
19348                 | LR__2248
19348     01 2A 06 F1 | 	add	local07, #1
1934c     2C FE 9F FD | 	jmp	#LR__2237
19350                 | LR__2249
19350     03 00 00 FF 
19354     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
19358     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1935c     03 00 00 FF 
19360     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
19364                 | LR__2250
19364     A7 F0 03 F6 | 	mov	ptra, fp
19368     B2 00 A0 FD | 	call	#popregs_
1936c                 | __system____getvfsforfile_ret
1936c     2D 00 64 FD | 	ret
19370                 | 
19370                 | __system___basic_open
19370     05 4A 05 F6 | 	mov	COUNT_, #5
19374     A8 00 A0 FD | 	call	#pushregs_
19378     0A 1F 02 F6 | 	mov	local01, arg02
1937c     0B 21 02 F6 | 	mov	local02, arg03
19380     0C 23 02 F6 | 	mov	local03, arg04
19384     00 24 06 F6 | 	mov	local04, #0
19388     5C 45 B0 FD | 	call	#__system____getftab
1938c     FD 26 0A F6 | 	mov	local05, result1 wz
19390     18 00 90 5D |  if_ne	jmp	#LR__2260
19394     EE 12 02 F6 | 	mov	arg01, abortchain
19398     0C 14 06 F6 | 	mov	arg02, #12
1939c     01 16 06 F6 | 	mov	arg03, #1
193a0     DA 00 A0 FD | 	call	#__longjmp
193a4     01 FA 65 F6 | 	neg	result1, #1
193a8     10 01 90 FD | 	jmp	#LR__2269
193ac                 | LR__2260
193ac     08 26 06 F1 | 	add	local05, #8
193b0     13 FB 09 FB | 	rdlong	result1, local05 wz
193b4     08 26 86 F1 | 	sub	local05, #8
193b8     13 13 02 56 |  if_ne	mov	arg01, local05
193bc     B8 3C B0 5D |  if_ne	call	#__system___closeraw
193c0     00 1E 0E F2 | 	cmp	local01, #0 wz
193c4     00 20 0E A2 |  if_e	cmp	local02, #0 wz
193c8     00 22 0E A2 |  if_e	cmp	local03, #0 wz
193cc     3C 00 90 AD |  if_e	jmp	#LR__2262
193d0     0C 12 06 F6 | 	mov	arg01, #12
193d4     A0 31 B0 FD | 	call	#__system___gc_alloc_managed
193d8     FD 24 0A F6 | 	mov	local04, result1 wz
193dc     18 00 90 5D |  if_ne	jmp	#LR__2261
193e0     EE 12 02 F6 | 	mov	arg01, abortchain
193e4     07 14 06 F6 | 	mov	arg02, #7
193e8     01 16 06 F6 | 	mov	arg03, #1
193ec     DA 00 A0 FD | 	call	#__longjmp
193f0     01 FA 65 F6 | 	neg	result1, #1
193f4     C4 00 90 FD | 	jmp	#LR__2269
193f8                 | LR__2261
193f8     12 01 68 FC | 	wrlong	#0, local04
193fc     04 24 06 F1 | 	add	local04, #4
19400     12 01 68 FC | 	wrlong	#0, local04
19404     04 24 86 F1 | 	sub	local04, #4
19408     13 25 62 FC | 	wrlong	local04, local05
1940c                 | LR__2262
1940c     00 1E 0E F2 | 	cmp	local01, #0 wz
19410     20 00 90 AD |  if_e	jmp	#LR__2263
19414     12 1F 62 FC | 	wrlong	local01, local04
19418     12 FB 01 F6 | 	mov	result1, local04
1941c     00 F8 02 FF 
19420     00 FA 45 F5 | 	or	result1, ##99614720
19424     1C 26 06 F1 | 	add	local05, #28
19428     13 FB 61 FC | 	wrlong	result1, local05
1942c     1C 26 86 F1 | 	sub	local05, #28
19430     0C 00 90 FD | 	jmp	#LR__2264
19434                 | LR__2263
19434     1C 26 06 F1 | 	add	local05, #28
19438     13 01 68 FC | 	wrlong	#0, local05
1943c     1C 26 86 F1 | 	sub	local05, #28
19440                 | LR__2264
19440     00 20 0E F2 | 	cmp	local02, #0 wz
19444     24 00 90 AD |  if_e	jmp	#LR__2265
19448     04 24 06 F1 | 	add	local04, #4
1944c     12 21 62 FC | 	wrlong	local02, local04
19450     04 24 86 F1 | 	sub	local04, #4
19454     12 FB 01 F6 | 	mov	result1, local04
19458     39 FA 25 F4 | 	bith	result1, #57
1945c     20 26 06 F1 | 	add	local05, #32
19460     13 FB 61 FC | 	wrlong	result1, local05
19464     20 26 86 F1 | 	sub	local05, #32
19468     0C 00 90 FD | 	jmp	#LR__2266
1946c                 | LR__2265
1946c     20 26 06 F1 | 	add	local05, #32
19470     13 01 68 FC | 	wrlong	#0, local05
19474     20 26 86 F1 | 	sub	local05, #32
19478                 | LR__2266
19478     00 22 0E F2 | 	cmp	local03, #0 wz
1947c     24 00 90 AD |  if_e	jmp	#LR__2267
19480     08 24 06 F1 | 	add	local04, #8
19484     12 23 62 FC | 	wrlong	local03, local04
19488     08 24 86 F1 | 	sub	local04, #8
1948c     00 08 03 FF 
19490     00 24 46 F5 | 	or	local04, ##101711872
19494     24 26 06 F1 | 	add	local05, #36
19498     13 25 62 FC | 	wrlong	local04, local05
1949c     24 26 86 F1 | 	sub	local05, #36
194a0     0C 00 90 FD | 	jmp	#LR__2268
194a4                 | LR__2267
194a4     24 26 06 F1 | 	add	local05, #36
194a8     13 01 68 FC | 	wrlong	#0, local05
194ac     24 26 86 F1 | 	sub	local05, #36
194b0                 | LR__2268
194b0     08 26 06 F1 | 	add	local05, #8
194b4     13 0F 68 FC | 	wrlong	#7, local05
194b8     00 FA 05 F6 | 	mov	result1, #0
194bc                 | LR__2269
194bc     A7 F0 03 F6 | 	mov	ptra, fp
194c0     B2 00 A0 FD | 	call	#popregs_
194c4                 | __system___basic_open_ret
194c4     2D 00 64 FD | 	ret
194c8                 | 
194c8                 | __system___basic_open_string
194c8     04 4A 05 F6 | 	mov	COUNT_, #4
194cc     A8 00 A0 FD | 	call	#pushregs_
194d0     0A 1F 02 F6 | 	mov	local01, arg02
194d4     0B 21 02 F6 | 	mov	local02, arg03
194d8     0C 44 B0 FD | 	call	#__system____getftab
194dc     FD 22 0A F6 | 	mov	local03, result1 wz
194e0     18 00 90 5D |  if_ne	jmp	#LR__2270
194e4     EE 12 02 F6 | 	mov	arg01, abortchain
194e8     0C 14 06 F6 | 	mov	arg02, #12
194ec     01 16 06 F6 | 	mov	arg03, #1
194f0     DA 00 A0 FD | 	call	#__longjmp
194f4     01 FA 65 F6 | 	neg	result1, #1
194f8     58 00 90 FD | 	jmp	#LR__2272
194fc                 | LR__2270
194fc     08 22 06 F1 | 	add	local03, #8
19500     11 19 0A FB | 	rdlong	arg04, local03 wz
19504     08 22 86 F1 | 	sub	local03, #8
19508     11 13 02 56 |  if_ne	mov	arg01, local03
1950c     68 3B B0 5D |  if_ne	call	#__system___closeraw
19510     0F 15 02 F6 | 	mov	arg02, local01
19514     10 17 02 F6 | 	mov	arg03, local02
19518     11 13 02 F6 | 	mov	arg01, local03
1951c     B6 19 06 F6 | 	mov	arg04, #438
19520     50 38 B0 FD | 	call	#__system___openraw
19524     FD 24 02 F6 | 	mov	local04, result1
19528     00 24 56 F2 | 	cmps	local04, #0 wc
1952c     20 00 90 3D |  if_ae	jmp	#LR__2271
19530     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19534     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
19538     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1953c     EE 12 02 F6 | 	mov	arg01, abortchain
19540     01 16 06 F6 | 	mov	arg03, #1
19544     DA 00 A0 FD | 	call	#__longjmp
19548     01 FA 65 F6 | 	neg	result1, #1
1954c     04 00 90 FD | 	jmp	#LR__2272
19550                 | LR__2271
19550     12 FB 01 F6 | 	mov	result1, local04
19554                 | LR__2272
19554     A7 F0 03 F6 | 	mov	ptra, fp
19558     B2 00 A0 FD | 	call	#popregs_
1955c                 | __system___basic_open_string_ret
1955c     2D 00 64 FD | 	ret
19560                 | 
19560                 | __system___basic_print_char
19560     03 4A 05 F6 | 	mov	COUNT_, #3
19564     A8 00 A0 FD | 	call	#pushregs_
19568     0A 1F 02 F6 | 	mov	local01, arg02
1956c     CC 4A B0 FD | 	call	#__system___gettxfunc
19570     FD 20 0A F6 | 	mov	local02, result1 wz
19574     00 FA 05 A6 |  if_e	mov	result1, #0
19578     30 00 90 AD |  if_e	jmp	#LR__2280
1957c     10 23 02 F6 | 	mov	local03, local02
19580     13 20 46 F7 | 	zerox	local02, #19
19584     14 22 46 F0 | 	shr	local03, #20
19588     02 22 66 F0 | 	shl	local03, #2
1958c     ED 22 02 F1 | 	add	local03, __methods__
19590     11 23 02 FB | 	rdlong	local03, local03
19594     0F 13 02 F6 | 	mov	arg01, local01
19598     F2 1E 02 F6 | 	mov	local01, objptr
1959c     10 E5 01 F6 | 	mov	objptr, local02
195a0     2D 22 62 FD | 	call	local03
195a4     0F E5 01 F6 | 	mov	objptr, local01
195a8     01 FA 05 F6 | 	mov	result1, #1
195ac                 | LR__2280
195ac     A7 F0 03 F6 | 	mov	ptra, fp
195b0     B2 00 A0 FD | 	call	#popregs_
195b4                 | __system___basic_print_char_ret
195b4     2D 00 64 FD | 	ret
195b8                 | 
195b8                 | __system___basic_print_string
195b8     03 4A 05 F6 | 	mov	COUNT_, #3
195bc     A8 00 A0 FD | 	call	#pushregs_
195c0     0A 1F 02 F6 | 	mov	local01, arg02
195c4     0B 21 02 F6 | 	mov	local02, arg03
195c8     70 4A B0 FD | 	call	#__system___gettxfunc
195cc     FD 22 0A F6 | 	mov	local03, result1 wz
195d0     00 FA 05 A6 |  if_e	mov	result1, #0
195d4     18 00 90 AD |  if_e	jmp	#LR__2290
195d8     00 1E 0E F2 | 	cmp	local01, #0 wz
195dc     00 FA 05 A6 |  if_e	mov	result1, #0
195e0     11 13 02 56 |  if_ne	mov	arg01, local03
195e4     10 15 02 56 |  if_ne	mov	arg02, local02
195e8     0F 17 02 56 |  if_ne	mov	arg03, local01
195ec     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
195f0                 | LR__2290
195f0     A7 F0 03 F6 | 	mov	ptra, fp
195f4     B2 00 A0 FD | 	call	#popregs_
195f8                 | __system___basic_print_string_ret
195f8     2D 00 64 FD | 	ret
195fc                 | 
195fc                 | __system___basic_print_integer
195fc     04 4A 05 F6 | 	mov	COUNT_, #4
19600     A8 00 A0 FD | 	call	#pushregs_
19604     0A 1F 02 F6 | 	mov	local01, arg02
19608     0B 21 02 F6 | 	mov	local02, arg03
1960c     0C 23 02 F6 | 	mov	local03, arg04
19610     28 4A B0 FD | 	call	#__system___gettxfunc
19614     FD 24 0A F6 | 	mov	local04, result1 wz
19618     00 FA 05 A6 |  if_e	mov	result1, #0
1961c     12 13 02 56 |  if_ne	mov	arg01, local04
19620     10 15 02 56 |  if_ne	mov	arg02, local02
19624     0F 17 02 56 |  if_ne	mov	arg03, local01
19628     11 19 02 56 |  if_ne	mov	arg04, local03
1962c     48 02 B0 5D |  if_ne	call	#__system___fmtnum
19630     A7 F0 03 F6 | 	mov	ptra, fp
19634     B2 00 A0 FD | 	call	#popregs_
19638                 | __system___basic_print_integer_ret
19638     2D 00 64 FD | 	ret
1963c                 | 
1963c                 | __system___basic_print_unsigned
1963c     03 4A 05 F6 | 	mov	COUNT_, #3
19640     A8 00 A0 FD | 	call	#pushregs_
19644     0A 1F 02 F6 | 	mov	local01, arg02
19648     0B 21 02 F6 | 	mov	local02, arg03
1964c     0C 23 02 F6 | 	mov	local03, arg04
19650     E8 49 B0 FD | 	call	#__system___gettxfunc
19654     FD 12 0A F6 | 	mov	arg01, result1 wz
19658     00 FA 05 A6 |  if_e	mov	result1, #0
1965c     3A 20 26 54 |  if_ne	bith	local02, #58
19660     10 15 02 56 |  if_ne	mov	arg02, local02
19664     0F 17 02 56 |  if_ne	mov	arg03, local01
19668     11 19 02 56 |  if_ne	mov	arg04, local03
1966c     08 02 B0 5D |  if_ne	call	#__system___fmtnum
19670     A7 F0 03 F6 | 	mov	ptra, fp
19674     B2 00 A0 FD | 	call	#popregs_
19678                 | __system___basic_print_unsigned_ret
19678     2D 00 64 FD | 	ret
1967c                 | 
1967c                 | __system___basic_get_char
1967c     03 4A 05 F6 | 	mov	COUNT_, #3
19680     A8 00 A0 FD | 	call	#pushregs_
19684     F8 49 B0 FD | 	call	#__system___getrxfunc
19688     FD 1E 0A F6 | 	mov	local01, result1 wz
1968c     01 FA 65 A6 |  if_e	neg	result1, #1
19690     28 00 90 AD |  if_e	jmp	#LR__2300
19694     0F 21 02 F6 | 	mov	local02, local01
19698     13 1E 46 F7 | 	zerox	local01, #19
1969c     14 20 46 F0 | 	shr	local02, #20
196a0     02 20 66 F0 | 	shl	local02, #2
196a4     ED 20 02 F1 | 	add	local02, __methods__
196a8     10 21 02 FB | 	rdlong	local02, local02
196ac     F2 22 02 F6 | 	mov	local03, objptr
196b0     0F E5 01 F6 | 	mov	objptr, local01
196b4     2D 20 62 FD | 	call	local02
196b8     11 E5 01 F6 | 	mov	objptr, local03
196bc                 | LR__2300
196bc     A7 F0 03 F6 | 	mov	ptra, fp
196c0     B2 00 A0 FD | 	call	#popregs_
196c4                 | __system___basic_get_char_ret
196c4     2D 00 64 FD | 	ret
196c8                 | 
196c8                 | __system___basic_get
196c8     04 4A 05 F6 | 	mov	COUNT_, #4
196cc     A8 00 A0 FD | 	call	#pushregs_
196d0     0D 1F 02 F6 | 	mov	local01, arg05
196d4     0F 19 02 FD | 	qmul	arg04, local01
196d8     09 21 02 F6 | 	mov	local02, arg01
196dc     0B 23 02 F6 | 	mov	local03, arg03
196e0     00 14 0E F2 | 	cmp	arg02, #0 wz
196e4     01 14 86 51 |  if_ne	sub	arg02, #1
196e8     10 13 02 56 |  if_ne	mov	arg01, local02
196ec     00 16 06 56 |  if_ne	mov	arg03, #0
196f0     18 24 62 FD | 	getqx	local04
196f4     38 40 B0 5D |  if_ne	call	#__system__lseek
196f8     11 15 02 F6 | 	mov	arg02, local03
196fc     12 17 02 F6 | 	mov	arg03, local04
19700     10 13 02 F6 | 	mov	arg01, local02
19704     B0 3F B0 FD | 	call	#__system__read
19708     FD 24 02 F6 | 	mov	local04, result1
1970c     01 24 56 F2 | 	cmps	local04, #1 wc
19710     10 00 90 CD |  if_b	jmp	#LR__2310
19714     12 61 02 F6 | 	mov	muldiva_, local04
19718     0F 63 02 F6 | 	mov	muldivb_, local01
1971c     BA 00 A0 FD | 	call	#divide_
19720     31 25 02 F6 | 	mov	local04, muldivb_
19724                 | LR__2310
19724     12 FB 01 F6 | 	mov	result1, local04
19728     A7 F0 03 F6 | 	mov	ptra, fp
1972c     B2 00 A0 FD | 	call	#popregs_
19730                 | __system___basic_get_ret
19730     2D 00 64 FD | 	ret
19734                 | 
19734                 | __system___fmtchar
19734     00 4A 05 F6 | 	mov	COUNT_, #0
19738     A8 00 A0 FD | 	call	#pushregs_
1973c     10 F0 07 F1 | 	add	ptra, #16
19740     04 4E 05 F1 | 	add	fp, #4
19744     A7 12 62 FC | 	wrlong	arg01, fp
19748     04 4E 05 F1 | 	add	fp, #4
1974c     A7 14 62 FC | 	wrlong	arg02, fp
19750     04 4E 05 F1 | 	add	fp, #4
19754     A7 16 62 FC | 	wrlong	arg03, fp
19758     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1975c     A7 16 62 FC | 	wrlong	arg03, fp
19760     08 4E 85 F1 | 	sub	fp, #8
19764     A7 12 02 FB | 	rdlong	arg01, fp
19768     04 4E 05 F1 | 	add	fp, #4
1976c     A7 14 02 FB | 	rdlong	arg02, fp
19770     04 4E 05 F1 | 	add	fp, #4
19774     A7 16 02 F6 | 	mov	arg03, fp
19778     0C 4E 85 F1 | 	sub	fp, #12
1977c     0C 00 B0 FD | 	call	#__system___fmtstr
19780     A7 F0 03 F6 | 	mov	ptra, fp
19784     B2 00 A0 FD | 	call	#popregs_
19788                 | __system___fmtchar_ret
19788     2D 00 64 FD | 	ret
1978c                 | 
1978c                 | __system___fmtstr
1978c     09 4A 05 F6 | 	mov	COUNT_, #9
19790     A8 00 A0 FD | 	call	#pushregs_
19794     09 1F 02 F6 | 	mov	local01, arg01
19798     0A 21 02 F6 | 	mov	local02, arg02
1979c     0B 23 02 F6 | 	mov	local03, arg03
197a0     10 19 E2 F8 | 	getbyte	arg04, local02, #0
197a4     11 13 02 F6 | 	mov	arg01, local03
197a8     09 25 02 F6 | 	mov	local04, arg01
197ac     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
197b0                 | LR__2320
197b0     12 FB C9 FA | 	rdbyte	result1, local04 wz
197b4     01 24 06 51 |  if_ne	add	local04, #1
197b8     F4 FF 9F 5D |  if_ne	jmp	#LR__2320
197bc                 | LR__2321
197bc     09 25 82 F1 | 	sub	local04, arg01
197c0     00 18 0E F2 | 	cmp	arg04, #0 wz
197c4     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
197c8     10 15 02 F6 | 	mov	arg02, local02
197cc     12 17 02 F6 | 	mov	arg03, local04
197d0     0F 13 02 F6 | 	mov	arg01, local01
197d4     02 18 06 F6 | 	mov	arg04, #2
197d8     00 45 B0 FD | 	call	#__system___fmtpad
197dc     FD 26 02 F6 | 	mov	local05, result1
197e0     00 26 56 F2 | 	cmps	local05, #0 wc
197e4     13 FB 01 C6 |  if_b	mov	result1, local05
197e8     80 00 90 CD |  if_b	jmp	#LR__2324
197ec     01 24 56 F2 | 	cmps	local04, #1 wc
197f0     50 00 90 CD |  if_b	jmp	#LR__2323
197f4     12 29 02 F6 | 	mov	local06, local04
197f8                 | LR__2322
197f8     0F 2B 02 F6 | 	mov	local07, local01
197fc     0F 2D 02 F6 | 	mov	local08, local01
19800     13 2A 46 F7 | 	zerox	local07, #19
19804     14 2C 46 F0 | 	shr	local08, #20
19808     02 2C 66 F0 | 	shl	local08, #2
1980c     ED 2C 02 F1 | 	add	local08, __methods__
19810     16 2D 02 FB | 	rdlong	local08, local08
19814     11 13 C2 FA | 	rdbyte	arg01, local03
19818     F2 2E 02 F6 | 	mov	local09, objptr
1981c     15 E5 01 F6 | 	mov	objptr, local07
19820     01 22 06 F1 | 	add	local03, #1
19824     2D 2C 62 FD | 	call	local08
19828     17 E5 01 F6 | 	mov	objptr, local09
1982c     FD 2E 02 F6 | 	mov	local09, result1
19830     00 2E 56 F2 | 	cmps	local09, #0 wc
19834     17 FB 01 C6 |  if_b	mov	result1, local09
19838     30 00 90 CD |  if_b	jmp	#LR__2324
1983c     17 27 02 F1 | 	add	local05, local09
19840     ED 29 6E FB | 	djnz	local06, #LR__2322
19844                 | LR__2323
19844     10 15 02 F6 | 	mov	arg02, local02
19848     12 17 02 F6 | 	mov	arg03, local04
1984c     0F 13 02 F6 | 	mov	arg01, local01
19850     01 18 06 F6 | 	mov	arg04, #1
19854     84 44 B0 FD | 	call	#__system___fmtpad
19858     FD 2E 02 F6 | 	mov	local09, result1
1985c     00 2E 56 F2 | 	cmps	local09, #0 wc
19860     17 FB 01 C6 |  if_b	mov	result1, local09
19864     17 27 02 31 |  if_ae	add	local05, local09
19868     13 FB 01 36 |  if_ae	mov	result1, local05
1986c                 | LR__2324
1986c     A7 F0 03 F6 | 	mov	ptra, fp
19870     B2 00 A0 FD | 	call	#popregs_
19874                 | __system___fmtstr_ret
19874     2D 00 64 FD | 	ret
19878                 | 
19878                 | __system___fmtnum
19878     0B 4A 05 F6 | 	mov	COUNT_, #11
1987c     A8 00 A0 FD | 	call	#pushregs_
19880     09 1F 02 F6 | 	mov	local01, arg01
19884     0A 21 02 F6 | 	mov	local02, arg02
19888     0B 23 02 F6 | 	mov	local03, arg03
1988c     0C 25 02 F6 | 	mov	local04, arg04
19890     F8 27 02 F6 | 	mov	local05, ptra
19894     13 29 02 F6 | 	mov	local06, local05
19898     00 2A 06 F6 | 	mov	local07, #0
1989c     10 2D 02 F6 | 	mov	local08, local02
198a0     10 2C 46 F0 | 	shr	local08, #16
198a4     3F 2C 06 F5 | 	and	local08, #63
198a8     10 2F E2 F8 | 	getbyte	local09, local02, #0
198ac     10 31 02 F6 | 	mov	local10, local02
198b0     1A 30 46 F0 | 	shr	local10, #26
198b4     03 30 06 F5 | 	and	local10, #3
198b8     18 33 02 F6 | 	mov	local11, local10
198bc     01 2C 56 F2 | 	cmps	local08, #1 wc
198c0     44 F0 07 F1 | 	add	ptra, #68
198c4     01 2C 86 31 |  if_ae	sub	local08, #1
198c8     41 2E 56 F2 | 	cmps	local09, #65 wc
198cc     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
198d0     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
198d4     03 32 0E F2 | 	cmp	local11, #3 wz
198d8     00 32 06 A6 |  if_e	mov	local11, #0
198dc     00 22 56 52 |  if_ne	cmps	local03, #0 wc
198e0     04 32 06 46 |  if_c_and_nz	mov	local11, #4
198e4     11 23 62 46 |  if_c_and_nz	neg	local03, local03
198e8     00 32 0E F2 | 	cmp	local11, #0 wz
198ec     4C 00 90 AD |  if_e	jmp	#LR__2333
198f0     01 2A 06 F6 | 	mov	local07, #1
198f4     17 2D 0A F2 | 	cmp	local08, local09 wz
198f8     18 00 90 5D |  if_ne	jmp	#LR__2331
198fc     05 2C 6E FB | 	djnz	local08, #LR__2330
19900     0F 13 02 F6 | 	mov	arg01, local01
19904     10 15 02 F6 | 	mov	arg02, local02
19908     23 16 06 F6 | 	mov	arg03, #35
1990c     24 FE BF FD | 	call	#__system___fmtchar
19910     88 00 90 FD | 	jmp	#LR__2337
19914                 | LR__2330
19914                 | LR__2331
19914     02 32 0E F2 | 	cmp	local11, #2 wz
19918     14 31 02 A6 |  if_e	mov	local10, local06
1991c     01 28 06 A1 |  if_e	add	local06, #1
19920     18 41 48 AC |  if_e	wrbyte	#32, local10
19924     14 00 90 AD |  if_e	jmp	#LR__2332
19928     04 32 0E F2 | 	cmp	local11, #4 wz
1992c     14 5B 48 AC |  if_e	wrbyte	#45, local06
19930     01 28 06 A1 |  if_e	add	local06, #1
19934     14 57 48 5C |  if_ne	wrbyte	#43, local06
19938     01 28 06 51 |  if_ne	add	local06, #1
1993c                 | LR__2332
1993c                 | LR__2333
1993c     14 13 02 F6 | 	mov	arg01, local06
19940     11 15 02 F6 | 	mov	arg02, local03
19944     12 17 02 F6 | 	mov	arg03, local04
19948     16 19 02 F6 | 	mov	arg04, local08
1994c     00 1A 06 F6 | 	mov	arg05, #0
19950     1D 20 2E F4 | 	testbn	local02, #29 wz
19954     01 1A 06 56 |  if_ne	mov	arg05, #1
19958     48 44 B0 FD | 	call	#__system___uitoa
1995c     FD 2A 02 F1 | 	add	local07, result1
19960     17 2B 5A F2 | 	cmps	local07, local09 wcz
19964     24 00 90 ED |  if_be	jmp	#LR__2336
19968     97 0E 48 FB | 	callpa	#(@LR__2335-@LR__2334)>>2,fcache_load_ptr_
1996c                 | LR__2334
1996c     17 31 02 F6 | 	mov	local10, local09
19970     01 30 56 F2 | 	cmps	local10, #1 wc
19974     01 2E 86 F1 | 	sub	local09, #1
19978     14 31 02 36 |  if_ae	mov	local10, local06
1997c     01 28 06 31 |  if_ae	add	local06, #1
19980     18 47 48 3C |  if_ae	wrbyte	#35, local10
19984     E4 FF 9F 3D |  if_ae	jmp	#LR__2334
19988                 | LR__2335
19988     14 01 48 FC | 	wrbyte	#0, local06
1998c                 | LR__2336
1998c     0F 13 02 F6 | 	mov	arg01, local01
19990     10 15 02 F6 | 	mov	arg02, local02
19994     13 17 02 F6 | 	mov	arg03, local05
19998     F0 FD BF FD | 	call	#__system___fmtstr
1999c                 | LR__2337
1999c     A7 F0 03 F6 | 	mov	ptra, fp
199a0     B2 00 A0 FD | 	call	#popregs_
199a4                 | __system___fmtnum_ret
199a4     2D 00 64 FD | 	ret
199a8                 | 
199a8                 | __system___fmtfloat
199a8     10 4A 05 F6 | 	mov	COUNT_, #16
199ac     A8 00 A0 FD | 	call	#pushregs_
199b0     24 F1 07 F1 | 	add	ptra, #292
199b4     04 4E 05 F1 | 	add	fp, #4
199b8     A7 12 62 FC | 	wrlong	arg01, fp
199bc     04 4E 05 F1 | 	add	fp, #4
199c0     A7 14 62 FC | 	wrlong	arg02, fp
199c4     04 4E 05 F1 | 	add	fp, #4
199c8     A7 16 62 FC | 	wrlong	arg03, fp
199cc     04 4E 05 F1 | 	add	fp, #4
199d0     A7 18 62 FC | 	wrlong	arg04, fp
199d4     0C 4E 05 F1 | 	add	fp, #12
199d8     A7 14 68 FC | 	wrlong	#10, fp
199dc     08 4E 05 F1 | 	add	fp, #8
199e0     A7 00 68 FC | 	wrlong	#0, fp
199e4     08 4E 05 F1 | 	add	fp, #8
199e8     A7 00 68 FC | 	wrlong	#0, fp
199ec     08 4E 05 F1 | 	add	fp, #8
199f0     A7 00 68 FC | 	wrlong	#0, fp
199f4     04 4E 05 F1 | 	add	fp, #4
199f8     A7 04 68 FC | 	wrlong	#2, fp
199fc     04 4E 05 F1 | 	add	fp, #4
19a00     A7 00 68 FC | 	wrlong	#0, fp
19a04     04 4E 05 F1 | 	add	fp, #4
19a08     A7 00 68 FC | 	wrlong	#0, fp
19a0c     04 4E 05 F1 | 	add	fp, #4
19a10     A7 00 68 FC | 	wrlong	#0, fp
19a14     04 4E 05 F1 | 	add	fp, #4
19a18     A7 00 68 FC | 	wrlong	#0, fp
19a1c     18 4E 05 F1 | 	add	fp, #24
19a20     A7 00 68 FC | 	wrlong	#0, fp
19a24     68 4E 05 F1 | 	add	fp, #104
19a28     A7 1E 02 F6 | 	mov	local01, fp
19a2c     08 4E 85 F1 | 	sub	fp, #8
19a30     A7 1E 62 FC | 	wrlong	local01, fp
19a34     04 4E 05 F1 | 	add	fp, #4
19a38     A7 1E 62 FC | 	wrlong	local01, fp
19a3c     BC 4E 85 F1 | 	sub	fp, #188
19a40     A7 1E 02 FB | 	rdlong	local01, fp
19a44     10 1E 46 F0 | 	shr	local01, #16
19a48     3F 1E 06 F5 | 	and	local01, #63
19a4c     B0 4E 05 F1 | 	add	fp, #176
19a50     A7 1E 62 FC | 	wrlong	local01, fp
19a54     B0 4E 85 F1 | 	sub	fp, #176
19a58     A7 1E 02 FB | 	rdlong	local01, fp
19a5c     1C 1E 46 F0 | 	shr	local01, #28
19a60     01 1E 06 F5 | 	and	local01, #1
19a64     08 4F 05 F1 | 	add	fp, #264
19a68     A7 1E 62 FC | 	wrlong	local01, fp
19a6c     58 4E 85 F1 | 	sub	fp, #88
19a70     A7 1E 0A FB | 	rdlong	local01, fp wz
19a74     B8 4E 85 F1 | 	sub	fp, #184
19a78     3C 00 90 5D |  if_ne	jmp	#LR__2341
19a7c     10 4E 05 F1 | 	add	fp, #16
19a80     A7 1E 02 FB | 	rdlong	local01, fp
19a84     10 4E 85 F1 | 	sub	fp, #16
19a88     61 1E 0E F2 | 	cmp	local01, #97 wz
19a8c     18 00 90 5D |  if_ne	jmp	#LR__2340
19a90     B8 4E 05 F1 | 	add	fp, #184
19a94     A7 1A 68 FC | 	wrlong	#13, fp
19a98     84 4E 85 F1 | 	sub	fp, #132
19a9c     A7 02 68 FC | 	wrlong	#1, fp
19aa0     34 4E 85 F1 | 	sub	fp, #52
19aa4     24 00 90 FD | 	jmp	#LR__2342
19aa8                 | LR__2340
19aa8     B8 4E 05 F1 | 	add	fp, #184
19aac     A7 0C 68 FC | 	wrlong	#6, fp
19ab0     B8 4E 85 F1 | 	sub	fp, #184
19ab4     14 00 90 FD | 	jmp	#LR__2342
19ab8                 | LR__2341
19ab8     B8 4E 05 F1 | 	add	fp, #184
19abc     A7 1E 02 FB | 	rdlong	local01, fp
19ac0     01 1E 86 F1 | 	sub	local01, #1
19ac4     A7 1E 62 FC | 	wrlong	local01, fp
19ac8     B8 4E 85 F1 | 	sub	fp, #184
19acc                 | LR__2342
19acc     08 4E 05 F1 | 	add	fp, #8
19ad0     A7 1E 02 FB | 	rdlong	local01, fp
19ad4     16 1E 46 F0 | 	shr	local01, #22
19ad8     03 1E 06 F5 | 	and	local01, #3
19adc     04 4F 05 F1 | 	add	fp, #260
19ae0     A7 1E 62 FC | 	wrlong	local01, fp
19ae4     04 4F 85 F1 | 	sub	fp, #260
19ae8     A7 1E 02 FB | 	rdlong	local01, fp
19aec     1D 1E 46 F0 | 	shr	local01, #29
19af0     01 1E 06 F5 | 	and	local01, #1
19af4     B4 4E 05 F1 | 	add	fp, #180
19af8     A7 1E 62 FC | 	wrlong	local01, fp
19afc     B4 4E 85 F1 | 	sub	fp, #180
19b00     A7 1E 02 FB | 	rdlong	local01, fp
19b04     0F 1F EA F8 | 	getbyte	local01, local01, #1
19b08     60 4E 05 F1 | 	add	fp, #96
19b0c     A7 1E 62 FC | 	wrlong	local01, fp
19b10     60 4E 85 F1 | 	sub	fp, #96
19b14     A7 1E 02 FB | 	rdlong	local01, fp
19b18     0F 1F E2 F8 | 	getbyte	local01, local01, #0
19b1c     64 4E 05 F1 | 	add	fp, #100
19b20     A7 1E 62 FC | 	wrlong	local01, fp
19b24     00 1E 06 F6 | 	mov	local01, #0
19b28     5C 4E 85 F1 | 	sub	fp, #92
19b2c     A7 1A 02 FB | 	rdlong	arg05, fp
19b30     65 1A 0E F2 | 	cmp	arg05, #101 wz
19b34     01 1E 06 A6 |  if_e	mov	local01, #1
19b38     14 4E 05 F1 | 	add	fp, #20
19b3c     A7 1E 62 FC | 	wrlong	local01, fp
19b40     98 4E 05 F1 | 	add	fp, #152
19b44     A7 20 0A FB | 	rdlong	local02, fp wz
19b48     45 1E 06 56 |  if_ne	mov	local01, #69
19b4c     65 1E 06 A6 |  if_e	mov	local01, #101
19b50     8C 4E 85 F1 | 	sub	fp, #140
19b54     A7 1E 62 FC | 	wrlong	local01, fp
19b58     20 4E 85 F1 | 	sub	fp, #32
19b5c     A7 1E 02 FB | 	rdlong	local01, fp
19b60     10 4E 85 F1 | 	sub	fp, #16
19b64     61 1E 0E F2 | 	cmp	local01, #97 wz
19b68     4C 00 90 5D |  if_ne	jmp	#LR__2343
19b6c     24 4E 05 F1 | 	add	fp, #36
19b70     A7 02 68 FC | 	wrlong	#1, fp
19b74     98 4E 05 F1 | 	add	fp, #152
19b78     A7 20 0A FB | 	rdlong	local02, fp wz
19b7c     50 1E 06 56 |  if_ne	mov	local01, #80
19b80     70 1E 06 A6 |  if_e	mov	local01, #112
19b84     8C 4E 85 F1 | 	sub	fp, #140
19b88     A7 1E 62 FC | 	wrlong	local01, fp
19b8c     14 4E 85 F1 | 	sub	fp, #20
19b90     A7 04 68 FC | 	wrlong	#2, fp
19b94     1C 4E 05 F1 | 	add	fp, #28
19b98     A7 02 68 FC | 	wrlong	#1, fp
19b9c     84 4E 05 F1 | 	add	fp, #132
19ba0     A7 20 0A FB | 	rdlong	local02, fp wz
19ba4     58 1E 06 56 |  if_ne	mov	local01, #88
19ba8     78 1E 06 A6 |  if_e	mov	local01, #120
19bac     7C 4E 85 F1 | 	sub	fp, #124
19bb0     A7 1E 62 FC | 	wrlong	local01, fp
19bb4     40 4E 85 F1 | 	sub	fp, #64
19bb8                 | LR__2343
19bb8     10 4E 05 F1 | 	add	fp, #16
19bbc     A7 1E 02 FB | 	rdlong	local01, fp
19bc0     10 4E 85 F1 | 	sub	fp, #16
19bc4     23 1E 0E F2 | 	cmp	local01, #35 wz
19bc8     3C 00 90 5D |  if_ne	jmp	#LR__2346
19bcc     48 4E 05 F1 | 	add	fp, #72
19bd0     A7 02 68 FC | 	wrlong	#1, fp
19bd4     C8 4E 05 F1 | 	add	fp, #200
19bd8     A7 1E 0A FB | 	rdlong	local01, fp wz
19bdc     10 4F 85 F1 | 	sub	fp, #272
19be0     18 00 90 AD |  if_e	jmp	#LR__2344
19be4     10 4E 05 F1 | 	add	fp, #16
19be8     A7 CC 68 FC | 	wrlong	#102, fp
19bec     00 4F 05 F1 | 	add	fp, #256
19bf0     A7 00 68 FC | 	wrlong	#0, fp
19bf4     10 4F 85 F1 | 	sub	fp, #272
19bf8     0C 00 90 FD | 	jmp	#LR__2345
19bfc                 | LR__2344
19bfc     10 4F 05 F1 | 	add	fp, #272
19c00     A7 02 68 FC | 	wrlong	#1, fp
19c04     10 4F 85 F1 | 	sub	fp, #272
19c08                 | LR__2345
19c08                 | LR__2346
19c08     08 4E 05 F1 | 	add	fp, #8
19c0c     A7 1E 02 FB | 	rdlong	local01, fp
19c10     1A 1E 46 F0 | 	shr	local01, #26
19c14     03 1E 06 F5 | 	and	local01, #3
19c18     5C 4E 05 F1 | 	add	fp, #92
19c1c     A7 1E 62 FC | 	wrlong	local01, fp
19c20     58 4E 85 F1 | 	sub	fp, #88
19c24     A7 FA 01 FB | 	rdlong	result1, fp
19c28     0C 4E 85 F1 | 	sub	fp, #12
19c2c     1F FA 4D F0 | 	shr	result1, #31 wz
19c30     20 00 90 AD |  if_e	jmp	#LR__2347
19c34     2C 4E 05 F1 | 	add	fp, #44
19c38     A7 5A 68 FC | 	wrlong	#45, fp
19c3c     20 4E 85 F1 | 	sub	fp, #32
19c40     A7 FA 01 FB | 	rdlong	result1, fp
19c44     1F FA E5 F4 | 	bitnot	result1, #31
19c48     A7 FA 61 FC | 	wrlong	result1, fp
19c4c     0C 4E 85 F1 | 	sub	fp, #12
19c50     3C 00 90 FD | 	jmp	#LR__2349
19c54                 | LR__2347
19c54     64 4E 05 F1 | 	add	fp, #100
19c58     A7 1E 02 FB | 	rdlong	local01, fp
19c5c     64 4E 85 F1 | 	sub	fp, #100
19c60     01 1E 0E F2 | 	cmp	local01, #1 wz
19c64     2C 4E 05 A1 |  if_e	add	fp, #44
19c68     A7 56 68 AC |  if_e	wrlong	#43, fp
19c6c     2C 4E 85 A1 |  if_e	sub	fp, #44
19c70     1C 00 90 AD |  if_e	jmp	#LR__2348
19c74     64 4E 05 F1 | 	add	fp, #100
19c78     A7 1E 02 FB | 	rdlong	local01, fp
19c7c     64 4E 85 F1 | 	sub	fp, #100
19c80     02 1E 0E F2 | 	cmp	local01, #2 wz
19c84     2C 4E 05 A1 |  if_e	add	fp, #44
19c88     A7 40 68 AC |  if_e	wrlong	#32, fp
19c8c     2C 4E 85 A1 |  if_e	sub	fp, #44
19c90                 | LR__2348
19c90                 | LR__2349
19c90     08 4E 05 F1 | 	add	fp, #8
19c94     A7 1E 02 FB | 	rdlong	local01, fp
19c98     18 1E 46 F0 | 	shr	local01, #24
19c9c     03 1E 06 F5 | 	and	local01, #3
19ca0     3C 4E 05 F1 | 	add	fp, #60
19ca4     A7 1E 62 FC | 	wrlong	local01, fp
19ca8     00 1E 06 F6 | 	mov	local01, #0
19cac     18 4E 85 F1 | 	sub	fp, #24
19cb0     A7 22 0A FB | 	rdlong	local03, fp wz
19cb4     2C 4E 85 F1 | 	sub	fp, #44
19cb8     18 00 90 5D |  if_ne	jmp	#LR__2350
19cbc     1C 4E 05 F1 | 	add	fp, #28
19cc0     A7 24 02 FB | 	rdlong	local04, fp
19cc4     1C 4E 85 F1 | 	sub	fp, #28
19cc8     12 27 02 F6 | 	mov	local05, local04
19ccc     0A 26 0E F2 | 	cmp	local05, #10 wz
19cd0     04 00 90 AD |  if_e	jmp	#LR__2351
19cd4                 | LR__2350
19cd4     01 1E 66 F5 | 	xor	local01, #1
19cd8                 | LR__2351
19cd8     3C 4E 05 F1 | 	add	fp, #60
19cdc     A7 1E 62 FC | 	wrlong	local01, fp
19ce0     3C 4E 85 F1 | 	sub	fp, #60
19ce4     00 1E 0E F2 | 	cmp	local01, #0 wz
19ce8     0C 01 90 AD |  if_e	jmp	#LR__2353
19cec     44 4E 05 F1 | 	add	fp, #68
19cf0     A7 26 02 FB | 	rdlong	local05, fp
19cf4     44 4E 85 F1 | 	sub	fp, #68
19cf8     13 23 02 F6 | 	mov	local03, local05
19cfc     02 22 0E F2 | 	cmp	local03, #2 wz
19d00     F4 00 90 5D |  if_ne	jmp	#LR__2353
19d04     0C 4F 05 F1 | 	add	fp, #268
19d08     A7 28 02 FB | 	rdlong	local06, fp
19d0c     0C 4F 85 F1 | 	sub	fp, #268
19d10     14 25 02 F6 | 	mov	local04, local06
19d14     02 24 0E F2 | 	cmp	local04, #2 wz
19d18     DC 00 90 AD |  if_e	jmp	#LR__2353
19d1c     C0 4E 05 F1 | 	add	fp, #192
19d20     A7 12 02 FB | 	rdlong	arg01, fp
19d24     94 4E 85 F1 | 	sub	fp, #148
19d28     A7 14 02 FB | 	rdlong	arg02, fp
19d2c     14 4E 05 F1 | 	add	fp, #20
19d30     A7 16 02 FB | 	rdlong	arg03, fp
19d34     40 4E 85 F1 | 	sub	fp, #64
19d38     D0 42 B0 FD | 	call	#__system__emitsign_0377
19d3c     14 4F 05 F1 | 	add	fp, #276
19d40     A7 FA 61 FC | 	wrlong	result1, fp
19d44     14 4F 85 F1 | 	sub	fp, #276
19d48     00 FA 55 F2 | 	cmps	result1, #0 wc
19d4c     14 4F 05 C1 |  if_b	add	fp, #276
19d50     A7 FA 01 CB |  if_b	rdlong	result1, fp
19d54     14 4F 85 C1 |  if_b	sub	fp, #276
19d58     6C 0B 90 CD |  if_b	jmp	#LR__2403
19d5c     C0 4E 05 F1 | 	add	fp, #192
19d60     A7 1E 02 FB | 	rdlong	local01, fp
19d64     54 4E 05 F1 | 	add	fp, #84
19d68     A7 26 02 FB | 	rdlong	local05, fp
19d6c     13 23 02 F6 | 	mov	local03, local05
19d70     13 1F 02 F1 | 	add	local01, local05
19d74     54 4E 85 F1 | 	sub	fp, #84
19d78     A7 1E 62 FC | 	wrlong	local01, fp
19d7c     58 4E 85 F1 | 	sub	fp, #88
19d80     A7 1E 0A FB | 	rdlong	local01, fp wz
19d84     68 4E 85 F1 | 	sub	fp, #104
19d88     60 00 90 AD |  if_e	jmp	#LR__2352
19d8c     68 4E 05 F1 | 	add	fp, #104
19d90     A7 1E 02 FB | 	rdlong	local01, fp
19d94     AC 4E 05 F1 | 	add	fp, #172
19d98     A7 22 02 FB | 	rdlong	local03, fp
19d9c     11 1F 82 F1 | 	sub	local01, local03
19da0     AC 4E 85 F1 | 	sub	fp, #172
19da4     A7 1E 62 FC | 	wrlong	local01, fp
19da8     68 4E 85 F1 | 	sub	fp, #104
19dac     00 1E 56 F2 | 	cmps	local01, #0 wc
19db0     68 4E 05 C1 |  if_b	add	fp, #104
19db4     A7 00 68 CC |  if_b	wrlong	#0, fp
19db8     68 4E 85 C1 |  if_b	sub	fp, #104
19dbc     08 4E 05 F1 | 	add	fp, #8
19dc0     A7 1E 02 FB | 	rdlong	local01, fp
19dc4     E8 1E 06 F4 | 	bitl	local01, #232
19dc8     A7 1E 62 FC | 	wrlong	local01, fp
19dcc     60 4E 05 F1 | 	add	fp, #96
19dd0     A7 26 02 FB | 	rdlong	local05, fp
19dd4     13 23 02 F6 | 	mov	local03, local05
19dd8     08 22 66 F0 | 	shl	local03, #8
19ddc     11 1F 42 F5 | 	or	local01, local03
19de0     60 4E 85 F1 | 	sub	fp, #96
19de4     A7 1E 62 FC | 	wrlong	local01, fp
19de8     08 4E 85 F1 | 	sub	fp, #8
19dec                 | LR__2352
19dec     3C 4E 05 F1 | 	add	fp, #60
19df0     A7 00 68 FC | 	wrlong	#0, fp
19df4     3C 4E 85 F1 | 	sub	fp, #60
19df8                 | LR__2353
19df8     0C 4E 05 F1 | 	add	fp, #12
19dfc     A7 12 02 FB | 	rdlong	arg01, fp
19e00     0C 4E 85 F1 | 	sub	fp, #12
19e04     A4 1D B0 FD | 	call	#__system____builtin_ilogb
19e08     FF FF 3F FF 
19e0c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
19e10     50 00 90 5D |  if_ne	jmp	#LR__2355
19e14     2C 4E 05 F1 | 	add	fp, #44
19e18     A7 1E 0A FB | 	rdlong	local01, fp wz
19e1c     2C 4E 85 F1 | 	sub	fp, #44
19e20     24 00 90 AD |  if_e	jmp	#LR__2354
19e24     C0 4E 05 F1 | 	add	fp, #192
19e28     A7 20 02 FB | 	rdlong	local02, fp
19e2c     10 23 02 F6 | 	mov	local03, local02
19e30     01 22 06 F1 | 	add	local03, #1
19e34     A7 22 62 FC | 	wrlong	local03, fp
19e38     94 4E 85 F1 | 	sub	fp, #148
19e3c     A7 24 02 FB | 	rdlong	local04, fp
19e40     2C 4E 85 F1 | 	sub	fp, #44
19e44     10 25 42 FC | 	wrbyte	local04, local02
19e48                 | LR__2354
19e48     C0 4E 05 F1 | 	add	fp, #192
19e4c     A7 12 02 FB | 	rdlong	arg01, fp
19e50     C0 4E 85 F1 | 	sub	fp, #192
19e54     3D 01 00 FF 
19e58     EE 15 06 F6 | 	mov	arg02, ##@LR__4261
19e5c     1C EA BF FD | 	call	#__system____builtin_strcpy
19e60     A4 08 90 FD | 	jmp	#LR__2391
19e64                 | LR__2355
19e64     0C 4E 05 F1 | 	add	fp, #12
19e68     A7 20 02 FB | 	rdlong	local02, fp
19e6c     0C 4E 85 F1 | 	sub	fp, #12
19e70     10 13 02 F6 | 	mov	arg01, local02
19e74     34 1D B0 FD | 	call	#__system____builtin_ilogb
19e78     00 00 40 FF 
19e7c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
19e80     50 00 90 5D |  if_ne	jmp	#LR__2357
19e84     2C 4E 05 F1 | 	add	fp, #44
19e88     A7 1E 0A FB | 	rdlong	local01, fp wz
19e8c     2C 4E 85 F1 | 	sub	fp, #44
19e90     24 00 90 AD |  if_e	jmp	#LR__2356
19e94     C0 4E 05 F1 | 	add	fp, #192
19e98     A7 20 02 FB | 	rdlong	local02, fp
19e9c     10 23 02 F6 | 	mov	local03, local02
19ea0     01 22 06 F1 | 	add	local03, #1
19ea4     A7 22 62 FC | 	wrlong	local03, fp
19ea8     94 4E 85 F1 | 	sub	fp, #148
19eac     A7 24 02 FB | 	rdlong	local04, fp
19eb0     2C 4E 85 F1 | 	sub	fp, #44
19eb4     10 25 42 FC | 	wrbyte	local04, local02
19eb8                 | LR__2356
19eb8     C0 4E 05 F1 | 	add	fp, #192
19ebc     A7 12 02 FB | 	rdlong	arg01, fp
19ec0     C0 4E 85 F1 | 	sub	fp, #192
19ec4     3D 01 00 FF 
19ec8     F2 15 06 F6 | 	mov	arg02, ##@LR__4262
19ecc     AC E9 BF FD | 	call	#__system____builtin_strcpy
19ed0     34 08 90 FD | 	jmp	#LR__2391
19ed4                 | LR__2357
19ed4     10 4E 05 F1 | 	add	fp, #16
19ed8     A7 1E 02 FB | 	rdlong	local01, fp
19edc     10 4E 85 F1 | 	sub	fp, #16
19ee0     67 1E 0E F2 | 	cmp	local01, #103 wz
19ee4     10 4E 05 51 |  if_ne	add	fp, #16
19ee8     A7 22 02 5B |  if_ne	rdlong	local03, fp
19eec     10 4E 85 51 |  if_ne	sub	fp, #16
19ef0     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
19ef4     94 01 90 5D |  if_ne	jmp	#LR__2362
19ef8     0C 4E 05 F1 | 	add	fp, #12
19efc     A7 12 02 FB | 	rdlong	arg01, fp
19f00     08 4E 05 F1 | 	add	fp, #8
19f04     A7 14 02 F6 | 	mov	arg02, fp
19f08     0C 4E 05 F1 | 	add	fp, #12
19f0c     A7 16 02 F6 | 	mov	arg03, fp
19f10     98 4E 05 F1 | 	add	fp, #152
19f14     A7 18 02 FB | 	rdlong	arg04, fp
19f18     9C 4E 85 F1 | 	sub	fp, #156
19f1c     A7 1A 02 FB | 	rdlong	arg05, fp
19f20     1C 4E 85 F1 | 	sub	fp, #28
19f24     F0 3E B0 FD | 	call	#__system__disassemble_0375
19f28     10 4E 05 F1 | 	add	fp, #16
19f2c     A7 1E 02 FB | 	rdlong	local01, fp
19f30     10 4E 85 F1 | 	sub	fp, #16
19f34     23 1E 0E F2 | 	cmp	local01, #35 wz
19f38     A0 00 90 5D |  if_ne	jmp	#LR__2359
19f3c     20 4E 05 F1 | 	add	fp, #32
19f40     A7 1E 02 FB | 	rdlong	local01, fp
19f44     98 4E 05 F1 | 	add	fp, #152
19f48     A7 22 02 FB | 	rdlong	local03, fp
19f4c     B8 4E 85 F1 | 	sub	fp, #184
19f50     11 1F 5A F2 | 	cmps	local01, local03 wcz
19f54     24 4E 05 11 |  if_a	add	fp, #36
19f58     A7 02 68 1C |  if_a	wrlong	#1, fp
19f5c     24 4E 85 11 |  if_a	sub	fp, #36
19f60     A4 01 90 1D |  if_a	jmp	#LR__2365
19f64     20 4E 05 F1 | 	add	fp, #32
19f68     A7 1E 02 FB | 	rdlong	local01, fp
19f6c     20 4E 85 F1 | 	sub	fp, #32
19f70     00 1E 56 F2 | 	cmps	local01, #0 wc
19f74     2C 00 90 3D |  if_ae	jmp	#LR__2358
19f78     B8 4E 05 F1 | 	add	fp, #184
19f7c     A7 1E 02 FB | 	rdlong	local01, fp
19f80     0F 1F 62 F6 | 	neg	local01, local01
19f84     98 4E 85 F1 | 	sub	fp, #152
19f88     A7 22 02 FB | 	rdlong	local03, fp
19f8c     20 4E 85 F1 | 	sub	fp, #32
19f90     0F 23 5A F2 | 	cmps	local03, local01 wcz
19f94     24 4E 05 E1 |  if_be	add	fp, #36
19f98     A7 02 68 EC |  if_be	wrlong	#1, fp
19f9c     24 4E 85 E1 |  if_be	sub	fp, #36
19fa0     64 01 90 FD | 	jmp	#LR__2365
19fa4                 | LR__2358
19fa4     20 4E 05 F1 | 	add	fp, #32
19fa8     A7 1E 02 FB | 	rdlong	local01, fp
19fac     20 4E 85 F1 | 	sub	fp, #32
19fb0     01 1E 56 F2 | 	cmps	local01, #1 wc
19fb4     50 01 90 CD |  if_b	jmp	#LR__2365
19fb8     B8 4E 05 F1 | 	add	fp, #184
19fbc     A7 1E 02 FB | 	rdlong	local01, fp
19fc0     98 4E 85 F1 | 	sub	fp, #152
19fc4     A7 22 02 FB | 	rdlong	local03, fp
19fc8     11 1F 82 F1 | 	sub	local01, local03
19fcc     98 4E 05 F1 | 	add	fp, #152
19fd0     A7 1E 62 FC | 	wrlong	local01, fp
19fd4     B8 4E 85 F1 | 	sub	fp, #184
19fd8     2C 01 90 FD | 	jmp	#LR__2365
19fdc                 | LR__2359
19fdc     00 1E 06 F6 | 	mov	local01, #0
19fe0     08 4E 05 F1 | 	add	fp, #8
19fe4     A7 20 02 FB | 	rdlong	local02, fp
19fe8     1C 20 46 F0 | 	shr	local02, #28
19fec     01 20 0E F5 | 	and	local02, #1 wz
19ff0     01 1E 06 A6 |  if_e	mov	local01, #1
19ff4     2C 4E 05 F1 | 	add	fp, #44
19ff8     A7 1E 62 FC | 	wrlong	local01, fp
19ffc     14 4E 85 F1 | 	sub	fp, #20
1a000     A7 1E 02 FB | 	rdlong	local01, fp
1a004     98 4E 05 F1 | 	add	fp, #152
1a008     A7 22 02 FB | 	rdlong	local03, fp
1a00c     B8 4E 85 F1 | 	sub	fp, #184
1a010     11 1F 52 F2 | 	cmps	local01, local03 wc
1a014     18 00 90 3D |  if_ae	jmp	#LR__2360
1a018     20 4E 05 F1 | 	add	fp, #32
1a01c     A7 24 02 FB | 	rdlong	local04, fp
1a020     20 4E 85 F1 | 	sub	fp, #32
1a024     FF FF 7F FF 
1a028     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1a02c     10 00 90 3D |  if_ae	jmp	#LR__2361
1a030                 | LR__2360
1a030     24 4E 05 F1 | 	add	fp, #36
1a034     A7 02 68 FC | 	wrlong	#1, fp
1a038     24 4E 85 F1 | 	sub	fp, #36
1a03c     C8 00 90 FD | 	jmp	#LR__2365
1a040                 | LR__2361
1a040     B8 4E 05 F1 | 	add	fp, #184
1a044     A7 24 02 FB | 	rdlong	local04, fp
1a048     98 4E 85 F1 | 	sub	fp, #152
1a04c     A7 22 02 FB | 	rdlong	local03, fp
1a050     11 25 82 F1 | 	sub	local04, local03
1a054     98 4E 05 F1 | 	add	fp, #152
1a058     A7 24 62 FC | 	wrlong	local04, fp
1a05c     AC 4E 85 F1 | 	sub	fp, #172
1a060     A7 12 02 FB | 	rdlong	arg01, fp
1a064     08 4E 05 F1 | 	add	fp, #8
1a068     A7 14 02 F6 | 	mov	arg02, fp
1a06c     0C 4E 05 F1 | 	add	fp, #12
1a070     A7 16 02 F6 | 	mov	arg03, fp
1a074     12 19 62 F6 | 	neg	arg04, local04
1a078     04 4E 85 F1 | 	sub	fp, #4
1a07c     A7 1A 02 FB | 	rdlong	arg05, fp
1a080     1C 4E 85 F1 | 	sub	fp, #28
1a084     90 3D B0 FD | 	call	#__system__disassemble_0375
1a088     7C 00 90 FD | 	jmp	#LR__2365
1a08c                 | LR__2362
1a08c     24 4E 05 F1 | 	add	fp, #36
1a090     A7 1E 0A FB | 	rdlong	local01, fp wz
1a094     24 4E 85 F1 | 	sub	fp, #36
1a098     34 00 90 AD |  if_e	jmp	#LR__2363
1a09c     0C 4E 05 F1 | 	add	fp, #12
1a0a0     A7 12 02 FB | 	rdlong	arg01, fp
1a0a4     08 4E 05 F1 | 	add	fp, #8
1a0a8     A7 14 02 F6 | 	mov	arg02, fp
1a0ac     0C 4E 05 F1 | 	add	fp, #12
1a0b0     A7 16 02 F6 | 	mov	arg03, fp
1a0b4     98 4E 05 F1 | 	add	fp, #152
1a0b8     A7 18 02 FB | 	rdlong	arg04, fp
1a0bc     9C 4E 85 F1 | 	sub	fp, #156
1a0c0     A7 1A 02 FB | 	rdlong	arg05, fp
1a0c4     1C 4E 85 F1 | 	sub	fp, #28
1a0c8     4C 3D B0 FD | 	call	#__system__disassemble_0375
1a0cc     38 00 90 FD | 	jmp	#LR__2364
1a0d0                 | LR__2363
1a0d0     0C 4E 05 F1 | 	add	fp, #12
1a0d4     A7 12 02 FB | 	rdlong	arg01, fp
1a0d8     08 4E 05 F1 | 	add	fp, #8
1a0dc     A7 14 02 F6 | 	mov	arg02, fp
1a0e0     0C 4E 05 F1 | 	add	fp, #12
1a0e4     A7 16 02 F6 | 	mov	arg03, fp
1a0e8     98 4E 05 F1 | 	add	fp, #152
1a0ec     A7 24 02 FB | 	rdlong	local04, fp
1a0f0     01 24 06 F1 | 	add	local04, #1
1a0f4     12 19 62 F6 | 	neg	arg04, local04
1a0f8     9C 4E 85 F1 | 	sub	fp, #156
1a0fc     A7 1A 02 FB | 	rdlong	arg05, fp
1a100     1C 4E 85 F1 | 	sub	fp, #28
1a104     10 3D B0 FD | 	call	#__system__disassemble_0375
1a108                 | LR__2364
1a108                 | LR__2365
1a108     1C 4E 05 F1 | 	add	fp, #28
1a10c     A7 1E 02 FB | 	rdlong	local01, fp
1a110     1C 4E 85 F1 | 	sub	fp, #28
1a114     02 1E 0E F2 | 	cmp	local01, #2 wz
1a118     4C 00 90 5D |  if_ne	jmp	#LR__2368
1a11c     1C 4E 05 F1 | 	add	fp, #28
1a120     A7 20 68 FC | 	wrlong	#16, fp
1a124     1C 4E 85 F1 | 	sub	fp, #28
1a128                 | LR__2366
1a128     14 4E 05 F1 | 	add	fp, #20
1a12c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a130     14 4E 85 F1 | 	sub	fp, #20
1a134     30 00 90 AD |  if_e	jmp	#LR__2367
1a138     14 4E 05 F1 | 	add	fp, #20
1a13c     A7 22 02 FB | 	rdlong	local03, fp
1a140     14 4E 85 F1 | 	sub	fp, #20
1a144     00 80 00 FF 
1a148     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1a14c     18 00 90 3D |  if_ae	jmp	#LR__2367
1a150     14 4E 05 F1 | 	add	fp, #20
1a154     A7 1E 02 FB | 	rdlong	local01, fp
1a158     01 1E 66 F0 | 	shl	local01, #1
1a15c     A7 1E 62 FC | 	wrlong	local01, fp
1a160     14 4E 85 F1 | 	sub	fp, #20
1a164     C0 FF 9F FD | 	jmp	#LR__2366
1a168                 | LR__2367
1a168                 | LR__2368
1a168     70 4E 05 F1 | 	add	fp, #112
1a16c     A7 12 02 F6 | 	mov	arg01, fp
1a170     5C 4E 85 F1 | 	sub	fp, #92
1a174     A7 14 02 FB | 	rdlong	arg02, fp
1a178     08 4E 05 F1 | 	add	fp, #8
1a17c     A7 16 02 FB | 	rdlong	arg03, fp
1a180     A0 4E 05 F1 | 	add	fp, #160
1a184     A7 1A 02 FB | 	rdlong	arg05, fp
1a188     BC 4E 85 F1 | 	sub	fp, #188
1a18c     01 18 06 F6 | 	mov	arg04, #1
1a190     10 3C B0 FD | 	call	#__system___uitoa
1a194     58 4E 05 F1 | 	add	fp, #88
1a198     A7 FA 61 FC | 	wrlong	result1, fp
1a19c     38 4E 85 F1 | 	sub	fp, #56
1a1a0     A7 1E 02 FB | 	rdlong	local01, fp
1a1a4     20 4E 85 F1 | 	sub	fp, #32
1a1a8     00 1E 56 F2 | 	cmps	local01, #0 wc
1a1ac     50 00 90 3D |  if_ae	jmp	#LR__2369
1a1b0     60 4E 05 F1 | 	add	fp, #96
1a1b4     A7 5A 68 FC | 	wrlong	#45, fp
1a1b8     50 4E 05 F1 | 	add	fp, #80
1a1bc     A7 12 02 F6 | 	mov	arg01, fp
1a1c0     90 4E 85 F1 | 	sub	fp, #144
1a1c4     A7 22 02 FB | 	rdlong	local03, fp
1a1c8     11 15 62 F6 | 	neg	arg02, local03
1a1cc     18 4E 05 F1 | 	add	fp, #24
1a1d0     A7 18 02 FB | 	rdlong	arg04, fp
1a1d4     84 4E 05 F1 | 	add	fp, #132
1a1d8     A7 28 02 FB | 	rdlong	local06, fp
1a1dc     BC 4E 85 F1 | 	sub	fp, #188
1a1e0     14 25 02 F6 | 	mov	local04, local06
1a1e4     0A 16 06 F6 | 	mov	arg03, #10
1a1e8     12 1B 02 F6 | 	mov	arg05, local04
1a1ec     B4 3B B0 FD | 	call	#__system___uitoa
1a1f0     5C 4E 05 F1 | 	add	fp, #92
1a1f4     A7 FA 61 FC | 	wrlong	result1, fp
1a1f8     5C 4E 85 F1 | 	sub	fp, #92
1a1fc     48 00 90 FD | 	jmp	#LR__2370
1a200                 | LR__2369
1a200     60 4E 05 F1 | 	add	fp, #96
1a204     A7 56 68 FC | 	wrlong	#43, fp
1a208     50 4E 05 F1 | 	add	fp, #80
1a20c     A7 12 02 F6 | 	mov	arg01, fp
1a210     90 4E 85 F1 | 	sub	fp, #144
1a214     A7 14 02 FB | 	rdlong	arg02, fp
1a218     18 4E 05 F1 | 	add	fp, #24
1a21c     A7 18 02 FB | 	rdlong	arg04, fp
1a220     84 4E 05 F1 | 	add	fp, #132
1a224     A7 28 02 FB | 	rdlong	local06, fp
1a228     BC 4E 85 F1 | 	sub	fp, #188
1a22c     14 25 02 F6 | 	mov	local04, local06
1a230     0A 16 06 F6 | 	mov	arg03, #10
1a234     12 1B 02 F6 | 	mov	arg05, local04
1a238     68 3B B0 FD | 	call	#__system___uitoa
1a23c     5C 4E 05 F1 | 	add	fp, #92
1a240     A7 FA 61 FC | 	wrlong	result1, fp
1a244     5C 4E 85 F1 | 	sub	fp, #92
1a248                 | LR__2370
1a248     24 4E 05 F1 | 	add	fp, #36
1a24c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a250     24 4E 85 F1 | 	sub	fp, #36
1a254     2C 00 90 AD |  if_e	jmp	#LR__2371
1a258     50 4E 05 F1 | 	add	fp, #80
1a25c     A7 00 68 FC | 	wrlong	#0, fp
1a260     04 4E 85 F1 | 	sub	fp, #4
1a264     A7 00 68 FC | 	wrlong	#0, fp
1a268     6C 4E 05 F1 | 	add	fp, #108
1a26c     A7 1E 02 FB | 	rdlong	local01, fp
1a270     01 1E 06 F1 | 	add	local01, #1
1a274     64 4E 85 F1 | 	sub	fp, #100
1a278     A7 1E 62 FC | 	wrlong	local01, fp
1a27c     54 4E 85 F1 | 	sub	fp, #84
1a280     88 00 90 FD | 	jmp	#LR__2374
1a284                 | LR__2371
1a284     20 4E 05 F1 | 	add	fp, #32
1a288     A7 1E 02 FB | 	rdlong	local01, fp
1a28c     20 4E 85 F1 | 	sub	fp, #32
1a290     00 1E 56 F2 | 	cmps	local01, #0 wc
1a294     40 00 90 3D |  if_ae	jmp	#LR__2372
1a298     20 4E 05 F1 | 	add	fp, #32
1a29c     A7 20 02 FB | 	rdlong	local02, fp
1a2a0     30 4E 05 F1 | 	add	fp, #48
1a2a4     A7 20 62 FC | 	wrlong	local02, fp
1a2a8     04 4E 85 F1 | 	sub	fp, #4
1a2ac     A7 20 62 FC | 	wrlong	local02, fp
1a2b0     2C 4E 85 F1 | 	sub	fp, #44
1a2b4     A7 1E 02 FB | 	rdlong	local01, fp
1a2b8     98 4E 05 F1 | 	add	fp, #152
1a2bc     A7 22 02 FB | 	rdlong	local03, fp
1a2c0     11 1F 02 F1 | 	add	local01, local03
1a2c4     01 1E 06 F1 | 	add	local01, #1
1a2c8     64 4E 85 F1 | 	sub	fp, #100
1a2cc     A7 1E 62 FC | 	wrlong	local01, fp
1a2d0     54 4E 85 F1 | 	sub	fp, #84
1a2d4     34 00 90 FD | 	jmp	#LR__2373
1a2d8                 | LR__2372
1a2d8     4C 4E 05 F1 | 	add	fp, #76
1a2dc     A7 00 68 FC | 	wrlong	#0, fp
1a2e0     2C 4E 85 F1 | 	sub	fp, #44
1a2e4     A7 1E 02 FB | 	rdlong	local01, fp
1a2e8     30 4E 05 F1 | 	add	fp, #48
1a2ec     A7 1E 62 FC | 	wrlong	local01, fp
1a2f0     68 4E 05 F1 | 	add	fp, #104
1a2f4     A7 22 02 FB | 	rdlong	local03, fp
1a2f8     11 1F 02 F1 | 	add	local01, local03
1a2fc     01 1E 06 F1 | 	add	local01, #1
1a300     64 4E 85 F1 | 	sub	fp, #100
1a304     A7 1E 62 FC | 	wrlong	local01, fp
1a308     54 4E 85 F1 | 	sub	fp, #84
1a30c                 | LR__2373
1a30c                 | LR__2374
1a30c     54 4E 05 F1 | 	add	fp, #84
1a310     A7 1E 02 FB | 	rdlong	local01, fp
1a314     08 4E 85 F1 | 	sub	fp, #8
1a318     A7 22 02 FB | 	rdlong	local03, fp
1a31c     11 1F 82 F1 | 	sub	local01, local03
1a320     01 1E 06 F1 | 	add	local01, #1
1a324     24 4E 85 F1 | 	sub	fp, #36
1a328     A7 1E 62 FC | 	wrlong	local01, fp
1a32c     04 4E 05 F1 | 	add	fp, #4
1a330     A7 1E 0A FB | 	rdlong	local01, fp wz
1a334     2C 4E 85 F1 | 	sub	fp, #44
1a338     28 4E 05 51 |  if_ne	add	fp, #40
1a33c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a340     01 22 06 51 |  if_ne	add	local03, #1
1a344     A7 22 62 5C |  if_ne	wrlong	local03, fp
1a348     28 4E 85 51 |  if_ne	sub	fp, #40
1a34c     1C 4E 05 F1 | 	add	fp, #28
1a350     A7 1E 02 FB | 	rdlong	local01, fp
1a354     1C 4E 85 F1 | 	sub	fp, #28
1a358     10 1E 0E F2 | 	cmp	local01, #16 wz
1a35c     28 4E 05 A1 |  if_e	add	fp, #40
1a360     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a364     02 1E 06 A1 |  if_e	add	local01, #2
1a368     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a36c     28 4E 85 A1 |  if_e	sub	fp, #40
1a370     24 4E 05 F1 | 	add	fp, #36
1a374     A7 1E 0A FB | 	rdlong	local01, fp wz
1a378     24 4E 85 F1 | 	sub	fp, #36
1a37c     28 00 90 AD |  if_e	jmp	#LR__2375
1a380     28 4E 05 F1 | 	add	fp, #40
1a384     A7 1E 02 FB | 	rdlong	local01, fp
1a388     02 22 06 F6 | 	mov	local03, #2
1a38c     34 4E 05 F1 | 	add	fp, #52
1a390     A7 26 02 FB | 	rdlong	local05, fp
1a394     13 23 02 F1 | 	add	local03, local05
1a398     11 1F 02 F1 | 	add	local01, local03
1a39c     34 4E 85 F1 | 	sub	fp, #52
1a3a0     A7 1E 62 FC | 	wrlong	local01, fp
1a3a4     28 4E 85 F1 | 	sub	fp, #40
1a3a8                 | LR__2375
1a3a8     28 4E 05 F1 | 	add	fp, #40
1a3ac     A7 1E 02 FB | 	rdlong	local01, fp
1a3b0     28 4E 85 F1 | 	sub	fp, #40
1a3b4     41 1E 56 F2 | 	cmps	local01, #65 wc
1a3b8     01 FA 65 36 |  if_ae	neg	result1, #1
1a3bc     08 05 90 3D |  if_ae	jmp	#LR__2403
1a3c0     3C 4E 05 F1 | 	add	fp, #60
1a3c4     A7 1E 0A FB | 	rdlong	local01, fp wz
1a3c8     3C 4E 85 F1 | 	sub	fp, #60
1a3cc     60 00 90 AD |  if_e	jmp	#LR__2376
1a3d0     C0 4E 05 F1 | 	add	fp, #192
1a3d4     A7 12 02 FB | 	rdlong	arg01, fp
1a3d8     94 4E 85 F1 | 	sub	fp, #148
1a3dc     A7 14 02 FB | 	rdlong	arg02, fp
1a3e0     14 4E 05 F1 | 	add	fp, #20
1a3e4     A7 16 02 FB | 	rdlong	arg03, fp
1a3e8     40 4E 85 F1 | 	sub	fp, #64
1a3ec     1C 3C B0 FD | 	call	#__system__emitsign_0377
1a3f0     18 4F 05 F1 | 	add	fp, #280
1a3f4     A7 FA 61 FC | 	wrlong	result1, fp
1a3f8     18 4F 85 F1 | 	sub	fp, #280
1a3fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1a400     18 4F 05 C1 |  if_b	add	fp, #280
1a404     A7 FA 01 CB |  if_b	rdlong	result1, fp
1a408     18 4F 85 C1 |  if_b	sub	fp, #280
1a40c     B8 04 90 CD |  if_b	jmp	#LR__2403
1a410     C0 4E 05 F1 | 	add	fp, #192
1a414     A7 1E 02 FB | 	rdlong	local01, fp
1a418     58 4E 05 F1 | 	add	fp, #88
1a41c     A7 22 02 FB | 	rdlong	local03, fp
1a420     11 1F 02 F1 | 	add	local01, local03
1a424     58 4E 85 F1 | 	sub	fp, #88
1a428     A7 1E 62 FC | 	wrlong	local01, fp
1a42c     C0 4E 85 F1 | 	sub	fp, #192
1a430                 | LR__2376
1a430     4C 4E 05 F1 | 	add	fp, #76
1a434     A7 1E 02 FB | 	rdlong	local01, fp
1a438     34 4E 85 F1 | 	sub	fp, #52
1a43c     A7 1E 62 FC | 	wrlong	local01, fp
1a440     18 4E 85 F1 | 	sub	fp, #24
1a444     97 9E 48 FB | 	callpa	#(@LR__2382-@LR__2377)>>2,fcache_load_ptr_
1a448                 | LR__2377
1a448     18 4E 05 F1 | 	add	fp, #24
1a44c     A7 20 02 FB | 	rdlong	local02, fp
1a450     3C 4E 05 F1 | 	add	fp, #60
1a454     A7 26 02 FB | 	rdlong	local05, fp
1a458     54 4E 85 F1 | 	sub	fp, #84
1a45c     13 21 52 F2 | 	cmps	local02, local05 wc
1a460     20 01 90 3D |  if_ae	jmp	#LR__2383
1a464     18 4E 05 F1 | 	add	fp, #24
1a468     A7 28 02 FB | 	rdlong	local06, fp
1a46c     18 4E 85 F1 | 	sub	fp, #24
1a470     00 28 56 F2 | 	cmps	local06, #0 wc
1a474     58 00 90 CD |  if_b	jmp	#LR__2378
1a478     18 4E 05 F1 | 	add	fp, #24
1a47c     A7 28 02 FB | 	rdlong	local06, fp
1a480     40 4E 05 F1 | 	add	fp, #64
1a484     A7 2A 02 FB | 	rdlong	local07, fp
1a488     58 4E 85 F1 | 	sub	fp, #88
1a48c     15 29 52 F2 | 	cmps	local06, local07 wc
1a490     3C 00 90 3D |  if_ae	jmp	#LR__2378
1a494     C0 4E 05 F1 | 	add	fp, #192
1a498     A7 2C 02 FB | 	rdlong	local08, fp
1a49c     16 2B 02 F6 | 	mov	local07, local08
1a4a0     01 2A 06 F1 | 	add	local07, #1
1a4a4     A7 2A 62 FC | 	wrlong	local07, fp
1a4a8     A8 4E 85 F1 | 	sub	fp, #168
1a4ac     A7 2A 02 FB | 	rdlong	local07, fp
1a4b0     15 2F 02 F6 | 	mov	local09, local07
1a4b4     58 4E 05 F1 | 	add	fp, #88
1a4b8     A7 30 02 F6 | 	mov	local10, fp
1a4bc     A7 2E 02 F1 | 	add	local09, fp
1a4c0     17 33 C2 FA | 	rdbyte	local11, local09
1a4c4     16 33 42 FC | 	wrbyte	local11, local08
1a4c8     70 4E 85 F1 | 	sub	fp, #112
1a4cc     20 00 90 FD | 	jmp	#LR__2379
1a4d0                 | LR__2378
1a4d0     C0 4E 05 F1 | 	add	fp, #192
1a4d4     A7 2C 02 FB | 	rdlong	local08, fp
1a4d8     16 2F 02 F6 | 	mov	local09, local08
1a4dc     01 2E 06 F1 | 	add	local09, #1
1a4e0     A7 2E 62 FC | 	wrlong	local09, fp
1a4e4     C0 4E 85 F1 | 	sub	fp, #192
1a4e8     30 2E 06 F6 | 	mov	local09, #48
1a4ec     16 61 48 FC | 	wrbyte	#48, local08
1a4f0                 | LR__2379
1a4f0     18 4E 05 F1 | 	add	fp, #24
1a4f4     A7 28 02 FB | 	rdlong	local06, fp
1a4f8     38 4E 05 F1 | 	add	fp, #56
1a4fc     A7 34 02 FB | 	rdlong	local12, fp
1a500     50 4E 85 F1 | 	sub	fp, #80
1a504     1A 29 0A F2 | 	cmp	local06, local12 wz
1a508     5C 00 90 5D |  if_ne	jmp	#LR__2381
1a50c     10 4F 05 F1 | 	add	fp, #272
1a510     A7 2A 02 FB | 	rdlong	local07, fp
1a514     10 4F 85 F1 | 	sub	fp, #272
1a518     15 2F 0A F6 | 	mov	local09, local07 wz
1a51c     28 00 90 5D |  if_ne	jmp	#LR__2380
1a520     54 4E 05 F1 | 	add	fp, #84
1a524     A7 32 02 FB | 	rdlong	local11, fp
1a528     19 31 02 F6 | 	mov	local10, local11
1a52c     01 30 86 F1 | 	sub	local10, #1
1a530     3C 4E 85 F1 | 	sub	fp, #60
1a534     A7 36 02 FB | 	rdlong	local13, fp
1a538     18 4E 85 F1 | 	sub	fp, #24
1a53c     1B 39 02 F6 | 	mov	local14, local13
1a540     18 39 52 F2 | 	cmps	local14, local10 wc
1a544     20 00 90 3D |  if_ae	jmp	#LR__2381
1a548                 | LR__2380
1a548     C0 4E 05 F1 | 	add	fp, #192
1a54c     A7 2C 02 FB | 	rdlong	local08, fp
1a550     16 35 02 F6 | 	mov	local12, local08
1a554     01 34 06 F1 | 	add	local12, #1
1a558     A7 34 62 FC | 	wrlong	local12, fp
1a55c     C0 4E 85 F1 | 	sub	fp, #192
1a560     2E 2E 06 F6 | 	mov	local09, #46
1a564     16 5D 48 FC | 	wrbyte	#46, local08
1a568                 | LR__2381
1a568     18 4E 05 F1 | 	add	fp, #24
1a56c     A7 3A 02 FB | 	rdlong	local15, fp
1a570     1D 35 02 F6 | 	mov	local12, local15
1a574     01 34 06 F1 | 	add	local12, #1
1a578     A7 34 62 FC | 	wrlong	local12, fp
1a57c     18 4E 85 F1 | 	sub	fp, #24
1a580     C4 FE 9F FD | 	jmp	#LR__2377
1a584                 | LR__2382
1a584                 | LR__2383
1a584     34 4E 05 F1 | 	add	fp, #52
1a588     A7 1E 0A FB | 	rdlong	local01, fp wz
1a58c     34 4E 85 F1 | 	sub	fp, #52
1a590     A0 00 90 AD |  if_e	jmp	#LR__2387
1a594     C0 4E 05 F1 | 	add	fp, #192
1a598     A7 1E 02 FB | 	rdlong	local01, fp
1a59c     01 1E 86 F1 | 	sub	local01, #1
1a5a0     A7 1E 62 FC | 	wrlong	local01, fp
1a5a4     C0 4E 85 F1 | 	sub	fp, #192
1a5a8     97 26 48 FB | 	callpa	#(@LR__2385-@LR__2384)>>2,fcache_load_ptr_
1a5ac                 | LR__2384
1a5ac     C0 4E 05 F1 | 	add	fp, #192
1a5b0     A7 1E 02 FB | 	rdlong	local01, fp
1a5b4     04 4E 05 F1 | 	add	fp, #4
1a5b8     A7 22 02 FB | 	rdlong	local03, fp
1a5bc     C4 4E 85 F1 | 	sub	fp, #196
1a5c0     11 1F 5A F2 | 	cmps	local01, local03 wcz
1a5c4     30 00 90 ED |  if_be	jmp	#LR__2386
1a5c8     C0 4E 05 F1 | 	add	fp, #192
1a5cc     A7 28 02 FB | 	rdlong	local06, fp
1a5d0     C0 4E 85 F1 | 	sub	fp, #192
1a5d4     14 25 C2 FA | 	rdbyte	local04, local06
1a5d8     30 24 0E F2 | 	cmp	local04, #48 wz
1a5dc     18 00 90 5D |  if_ne	jmp	#LR__2386
1a5e0     C0 4E 05 F1 | 	add	fp, #192
1a5e4     A7 1E 02 FB | 	rdlong	local01, fp
1a5e8     01 1E 86 F1 | 	sub	local01, #1
1a5ec     A7 1E 62 FC | 	wrlong	local01, fp
1a5f0     C0 4E 85 F1 | 	sub	fp, #192
1a5f4     B4 FF 9F FD | 	jmp	#LR__2384
1a5f8                 | LR__2385
1a5f8                 | LR__2386
1a5f8     C0 4E 05 F1 | 	add	fp, #192
1a5fc     A7 20 02 FB | 	rdlong	local02, fp
1a600     C0 4E 85 F1 | 	sub	fp, #192
1a604     10 1F C2 FA | 	rdbyte	local01, local02
1a608     2E 1E 0E F2 | 	cmp	local01, #46 wz
1a60c     C0 4E 05 A1 |  if_e	add	fp, #192
1a610     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a614     01 1E 86 A1 |  if_e	sub	local01, #1
1a618     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a61c     C0 4E 85 A1 |  if_e	sub	fp, #192
1a620     C0 4E 05 F1 | 	add	fp, #192
1a624     A7 22 02 FB | 	rdlong	local03, fp
1a628     01 22 06 F1 | 	add	local03, #1
1a62c     A7 22 62 FC | 	wrlong	local03, fp
1a630     C0 4E 85 F1 | 	sub	fp, #192
1a634                 | LR__2387
1a634     24 4E 05 F1 | 	add	fp, #36
1a638     A7 1E 0A FB | 	rdlong	local01, fp wz
1a63c     24 4E 85 F1 | 	sub	fp, #36
1a640     B4 00 90 AD |  if_e	jmp	#LR__2390
1a644     C0 4E 05 F1 | 	add	fp, #192
1a648     A7 20 02 FB | 	rdlong	local02, fp
1a64c     10 23 02 F6 | 	mov	local03, local02
1a650     01 22 06 F1 | 	add	local03, #1
1a654     A7 22 62 FC | 	wrlong	local03, fp
1a658     90 4E 85 F1 | 	sub	fp, #144
1a65c     A7 24 02 FB | 	rdlong	local04, fp
1a660     10 25 42 FC | 	wrbyte	local04, local02
1a664     90 4E 05 F1 | 	add	fp, #144
1a668     A7 20 02 FB | 	rdlong	local02, fp
1a66c     10 23 02 F6 | 	mov	local03, local02
1a670     01 22 06 F1 | 	add	local03, #1
1a674     A7 22 62 FC | 	wrlong	local03, fp
1a678     60 4E 85 F1 | 	sub	fp, #96
1a67c     A7 24 02 FB | 	rdlong	local04, fp
1a680     10 25 42 FC | 	wrbyte	local04, local02
1a684     48 4E 85 F1 | 	sub	fp, #72
1a688     A7 00 68 FC | 	wrlong	#0, fp
1a68c     18 4E 85 F1 | 	sub	fp, #24
1a690                 | LR__2388
1a690     18 4E 05 F1 | 	add	fp, #24
1a694     A7 20 02 FB | 	rdlong	local02, fp
1a698     44 4E 05 F1 | 	add	fp, #68
1a69c     A7 26 02 FB | 	rdlong	local05, fp
1a6a0     5C 4E 85 F1 | 	sub	fp, #92
1a6a4     13 21 52 F2 | 	cmps	local02, local05 wc
1a6a8     4C 00 90 3D |  if_ae	jmp	#LR__2389
1a6ac     C0 4E 05 F1 | 	add	fp, #192
1a6b0     A7 2C 02 FB | 	rdlong	local08, fp
1a6b4     16 35 02 F6 | 	mov	local12, local08
1a6b8     01 34 06 F1 | 	add	local12, #1
1a6bc     A7 34 62 FC | 	wrlong	local12, fp
1a6c0     A8 4E 85 F1 | 	sub	fp, #168
1a6c4     A7 2A 02 FB | 	rdlong	local07, fp
1a6c8     15 2F 02 F6 | 	mov	local09, local07
1a6cc     98 4E 05 F1 | 	add	fp, #152
1a6d0     A7 30 02 F6 | 	mov	local10, fp
1a6d4     A7 2E 02 F1 | 	add	local09, fp
1a6d8     17 33 C2 FA | 	rdbyte	local11, local09
1a6dc     16 33 42 FC | 	wrbyte	local11, local08
1a6e0     98 4E 85 F1 | 	sub	fp, #152
1a6e4     A7 34 02 FB | 	rdlong	local12, fp
1a6e8     01 34 06 F1 | 	add	local12, #1
1a6ec     A7 34 62 FC | 	wrlong	local12, fp
1a6f0     18 4E 85 F1 | 	sub	fp, #24
1a6f4     98 FF 9F FD | 	jmp	#LR__2388
1a6f8                 | LR__2389
1a6f8                 | LR__2390
1a6f8     C0 4E 05 F1 | 	add	fp, #192
1a6fc     A7 1E 02 FB | 	rdlong	local01, fp
1a700     C0 4E 85 F1 | 	sub	fp, #192
1a704     0F 01 48 FC | 	wrbyte	#0, local01
1a708                 | LR__2391
1a708     6C 4E 05 F1 | 	add	fp, #108
1a70c     A7 1E 0A FB | 	rdlong	local01, fp wz
1a710     6C 4E 85 F1 | 	sub	fp, #108
1a714     90 01 90 AD |  if_e	jmp	#LR__2402
1a718     48 4E 05 F1 | 	add	fp, #72
1a71c     A7 22 0A FB | 	rdlong	local03, fp wz
1a720     48 4E 85 F1 | 	sub	fp, #72
1a724     80 01 90 AD |  if_e	jmp	#LR__2402
1a728     C4 4E 05 F1 | 	add	fp, #196
1a72c     A7 12 02 FB | 	rdlong	arg01, fp
1a730     C4 4E 85 F1 | 	sub	fp, #196
1a734     09 3D 02 F6 | 	mov	local16, arg01
1a738     97 06 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1a73c                 | LR__2392
1a73c     1E FB C9 FA | 	rdbyte	result1, local16 wz
1a740     01 3C 06 51 |  if_ne	add	local16, #1
1a744     F4 FF 9F 5D |  if_ne	jmp	#LR__2392
1a748                 | LR__2393
1a748     09 3D 82 F1 | 	sub	local16, arg01
1a74c     1E 25 02 F6 | 	mov	local04, local16
1a750     6C 4E 05 F1 | 	add	fp, #108
1a754     A7 28 02 FB | 	rdlong	local06, fp
1a758     6C 4E 85 F1 | 	sub	fp, #108
1a75c     14 25 5A F2 | 	cmps	local04, local06 wcz
1a760     44 01 90 ED |  if_be	jmp	#LR__2402
1a764     C4 4E 05 F1 | 	add	fp, #196
1a768     A7 1E 02 FB | 	rdlong	local01, fp
1a76c     5C 4E 05 F1 | 	add	fp, #92
1a770     A7 1E 62 FC | 	wrlong	local01, fp
1a774     FC 4E 85 F1 | 	sub	fp, #252
1a778     A7 1E 0A FB | 	rdlong	local01, fp wz
1a77c     24 4E 85 F1 | 	sub	fp, #36
1a780     20 00 90 AD |  if_e	jmp	#LR__2394
1a784     B8 4E 05 F1 | 	add	fp, #184
1a788     A7 00 68 FC | 	wrlong	#0, fp
1a78c     4C 4E 85 F1 | 	sub	fp, #76
1a790     A7 1E 02 FB | 	rdlong	local01, fp
1a794     B0 4E 05 F1 | 	add	fp, #176
1a798     A7 1E 62 FC | 	wrlong	local01, fp
1a79c     1C 4F 85 F1 | 	sub	fp, #284
1a7a0     24 00 90 FD | 	jmp	#LR__2395
1a7a4                 | LR__2394
1a7a4     6C 4E 05 F1 | 	add	fp, #108
1a7a8     A7 1E 02 FB | 	rdlong	local01, fp
1a7ac     01 1E 86 F1 | 	sub	local01, #1
1a7b0     4C 4E 05 F1 | 	add	fp, #76
1a7b4     A7 22 02 FB | 	rdlong	local03, fp
1a7b8     11 1F 82 F1 | 	sub	local01, local03
1a7bc     64 4E 05 F1 | 	add	fp, #100
1a7c0     A7 1E 62 FC | 	wrlong	local01, fp
1a7c4     1C 4F 85 F1 | 	sub	fp, #284
1a7c8                 | LR__2395
1a7c8     97 20 48 FB | 	callpa	#(@LR__2397-@LR__2396)>>2,fcache_load_ptr_
1a7cc                 | LR__2396
1a7cc     1C 4F 05 F1 | 	add	fp, #284
1a7d0     A7 1E 0A FB | 	rdlong	local01, fp wz
1a7d4     1C 4F 85 F1 | 	sub	fp, #284
1a7d8     30 00 90 AD |  if_e	jmp	#LR__2398
1a7dc     20 4F 05 F1 | 	add	fp, #288
1a7e0     A7 20 02 FB | 	rdlong	local02, fp
1a7e4     10 23 02 F6 | 	mov	local03, local02
1a7e8     01 22 06 F1 | 	add	local03, #1
1a7ec     A7 22 62 FC | 	wrlong	local03, fp
1a7f0     10 55 48 FC | 	wrbyte	#42, local02
1a7f4     04 4E 85 F1 | 	sub	fp, #4
1a7f8     A7 1E 02 FB | 	rdlong	local01, fp
1a7fc     01 1E 86 F1 | 	sub	local01, #1
1a800     A7 1E 62 FC | 	wrlong	local01, fp
1a804     1C 4F 85 F1 | 	sub	fp, #284
1a808     C0 FF 9F FD | 	jmp	#LR__2396
1a80c                 | LR__2397
1a80c                 | LR__2398
1a80c     B8 4E 05 F1 | 	add	fp, #184
1a810     A7 1E 0A FB | 	rdlong	local01, fp wz
1a814     B8 4E 85 F1 | 	sub	fp, #184
1a818     70 00 90 AD |  if_e	jmp	#LR__2401
1a81c     20 4F 05 F1 | 	add	fp, #288
1a820     A7 20 02 FB | 	rdlong	local02, fp
1a824     10 23 02 F6 | 	mov	local03, local02
1a828     01 22 06 F1 | 	add	local03, #1
1a82c     A7 22 62 FC | 	wrlong	local03, fp
1a830     10 5D 48 FC | 	wrbyte	#46, local02
1a834     04 4E 85 F1 | 	sub	fp, #4
1a838     A7 00 68 FC | 	wrlong	#0, fp
1a83c     1C 4F 85 F1 | 	sub	fp, #284
1a840                 | LR__2399
1a840     1C 4F 05 F1 | 	add	fp, #284
1a844     A7 20 02 FB | 	rdlong	local02, fp
1a848     64 4E 85 F1 | 	sub	fp, #100
1a84c     A7 26 02 FB | 	rdlong	local05, fp
1a850     B8 4E 85 F1 | 	sub	fp, #184
1a854     13 21 52 F2 | 	cmps	local02, local05 wc
1a858     30 00 90 3D |  if_ae	jmp	#LR__2400
1a85c     20 4F 05 F1 | 	add	fp, #288
1a860     A7 2C 02 FB | 	rdlong	local08, fp
1a864     16 35 02 F6 | 	mov	local12, local08
1a868     01 34 06 F1 | 	add	local12, #1
1a86c     A7 34 62 FC | 	wrlong	local12, fp
1a870     16 55 48 FC | 	wrbyte	#42, local08
1a874     04 4E 85 F1 | 	sub	fp, #4
1a878     A7 34 02 FB | 	rdlong	local12, fp
1a87c     01 34 06 F1 | 	add	local12, #1
1a880     A7 34 62 FC | 	wrlong	local12, fp
1a884     1C 4F 85 F1 | 	sub	fp, #284
1a888     B4 FF 9F FD | 	jmp	#LR__2399
1a88c                 | LR__2400
1a88c                 | LR__2401
1a88c     20 4F 05 F1 | 	add	fp, #288
1a890     A7 20 02 FB | 	rdlong	local02, fp
1a894     10 23 02 F6 | 	mov	local03, local02
1a898     01 22 06 F1 | 	add	local03, #1
1a89c     A7 22 62 FC | 	wrlong	local03, fp
1a8a0     20 4F 85 F1 | 	sub	fp, #288
1a8a4     10 01 48 FC | 	wrbyte	#0, local02
1a8a8                 | LR__2402
1a8a8     04 4E 05 F1 | 	add	fp, #4
1a8ac     A7 12 02 FB | 	rdlong	arg01, fp
1a8b0     04 4E 05 F1 | 	add	fp, #4
1a8b4     A7 14 02 FB | 	rdlong	arg02, fp
1a8b8     BC 4E 05 F1 | 	add	fp, #188
1a8bc     A7 16 02 FB | 	rdlong	arg03, fp
1a8c0     C4 4E 85 F1 | 	sub	fp, #196
1a8c4     C4 EE BF FD | 	call	#__system___fmtstr
1a8c8                 | LR__2403
1a8c8     A7 F0 03 F6 | 	mov	ptra, fp
1a8cc     B2 00 A0 FD | 	call	#popregs_
1a8d0                 | __system___fmtfloat_ret
1a8d0     2D 00 64 FD | 	ret
1a8d4                 | 
1a8d4                 | __system__Left_S
1a8d4     04 4A 05 F6 | 	mov	COUNT_, #4
1a8d8     A8 00 A0 FD | 	call	#pushregs_
1a8dc     09 1F 02 F6 | 	mov	local01, arg01
1a8e0     0A 21 02 F6 | 	mov	local02, arg02
1a8e4     01 20 56 F2 | 	cmps	local02, #1 wc
1a8e8     3D 01 00 CF 
1a8ec     F6 FB 05 C6 |  if_b	mov	result1, ##@LR__4263
1a8f0     5C 00 90 CD |  if_b	jmp	#LR__2413
1a8f4     0F 13 02 F6 | 	mov	arg01, local01
1a8f8     09 23 02 F6 | 	mov	local03, arg01
1a8fc     97 06 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1a900                 | LR__2410
1a900     11 FB C9 FA | 	rdbyte	result1, local03 wz
1a904     01 22 06 51 |  if_ne	add	local03, #1
1a908     F4 FF 9F 5D |  if_ne	jmp	#LR__2410
1a90c                 | LR__2411
1a90c     09 23 82 F1 | 	sub	local03, arg01
1a910     11 FB 01 F6 | 	mov	result1, local03
1a914     10 FB 59 F2 | 	cmps	result1, local02 wcz
1a918     0F FB 01 E6 |  if_be	mov	result1, local01
1a91c     30 00 90 ED |  if_be	jmp	#LR__2413
1a920     10 13 02 F6 | 	mov	arg01, local02
1a924     02 12 06 F1 | 	add	arg01, #2
1a928     4C 1C B0 FD | 	call	#__system___gc_alloc_managed
1a92c     FD 24 0A F6 | 	mov	local04, result1 wz
1a930     18 00 90 AD |  if_e	jmp	#LR__2412
1a934     12 13 02 F6 | 	mov	arg01, local04
1a938     0F 15 02 F6 | 	mov	arg02, local01
1a93c     10 17 02 F6 | 	mov	arg03, local02
1a940     A4 DE BF FD | 	call	#__system____builtin_memmove
1a944     12 21 02 F1 | 	add	local02, local04
1a948     10 01 48 FC | 	wrbyte	#0, local02
1a94c                 | LR__2412
1a94c     12 FB 01 F6 | 	mov	result1, local04
1a950                 | LR__2413
1a950     A7 F0 03 F6 | 	mov	ptra, fp
1a954     B2 00 A0 FD | 	call	#popregs_
1a958                 | __system__Left_S_ret
1a958     2D 00 64 FD | 	ret
1a95c                 | 
1a95c                 | __system__Right_S
1a95c     05 4A 05 F6 | 	mov	COUNT_, #5
1a960     A8 00 A0 FD | 	call	#pushregs_
1a964     09 1F 02 F6 | 	mov	local01, arg01
1a968     0A 21 02 F6 | 	mov	local02, arg02
1a96c     01 20 56 F2 | 	cmps	local02, #1 wc
1a970     3D 01 00 CF 
1a974     F7 FB 05 C6 |  if_b	mov	result1, ##@LR__4264
1a978     64 00 90 CD |  if_b	jmp	#LR__2423
1a97c     0F 13 02 F6 | 	mov	arg01, local01
1a980     09 23 02 F6 | 	mov	local03, arg01
1a984     97 06 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1a988                 | LR__2420
1a988     11 FB C9 FA | 	rdbyte	result1, local03 wz
1a98c     01 22 06 51 |  if_ne	add	local03, #1
1a990     F4 FF 9F 5D |  if_ne	jmp	#LR__2420
1a994                 | LR__2421
1a994     09 23 82 F1 | 	sub	local03, arg01
1a998     11 FB 01 F6 | 	mov	result1, local03
1a99c     FD 24 02 F6 | 	mov	local04, result1
1a9a0     10 25 5A F2 | 	cmps	local04, local02 wcz
1a9a4     0F FB 01 E6 |  if_be	mov	result1, local01
1a9a8     34 00 90 ED |  if_be	jmp	#LR__2423
1a9ac     10 13 02 F6 | 	mov	arg01, local02
1a9b0     02 12 06 F1 | 	add	arg01, #2
1a9b4     C0 1B B0 FD | 	call	#__system___gc_alloc_managed
1a9b8     FD 26 0A F6 | 	mov	local05, result1 wz
1a9bc     1C 00 90 AD |  if_e	jmp	#LR__2422
1a9c0     10 25 82 F1 | 	sub	local04, local02
1a9c4     0F 25 02 F1 | 	add	local04, local01
1a9c8     01 20 06 F1 | 	add	local02, #1
1a9cc     13 13 02 F6 | 	mov	arg01, local05
1a9d0     12 15 02 F6 | 	mov	arg02, local04
1a9d4     10 17 02 F6 | 	mov	arg03, local02
1a9d8     0C DE BF FD | 	call	#__system____builtin_memmove
1a9dc                 | LR__2422
1a9dc     13 FB 01 F6 | 	mov	result1, local05
1a9e0                 | LR__2423
1a9e0     A7 F0 03 F6 | 	mov	ptra, fp
1a9e4     B2 00 A0 FD | 	call	#popregs_
1a9e8                 | __system__Right_S_ret
1a9e8     2D 00 64 FD | 	ret
1a9ec                 | 
1a9ec                 | __system__Mid_S
1a9ec     05 4A 05 F6 | 	mov	COUNT_, #5
1a9f0     A8 00 A0 FD | 	call	#pushregs_
1a9f4     09 1F 02 F6 | 	mov	local01, arg01
1a9f8     0A 21 02 F6 | 	mov	local02, arg02
1a9fc     01 16 56 F2 | 	cmps	arg03, #1 wc
1aa00     3D 01 00 CF 
1aa04     F8 FB 05 C6 |  if_b	mov	result1, ##@LR__4265
1aa08     80 00 90 CD |  if_b	jmp	#LR__2433
1aa0c     01 20 86 F1 | 	sub	local02, #1
1aa10     00 20 56 F3 | 	fges	local02, #0 wc
1aa14     0F 13 02 F6 | 	mov	arg01, local01
1aa18     09 23 02 F6 | 	mov	local03, arg01
1aa1c     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1aa20                 | LR__2430
1aa20     11 FB C9 FA | 	rdbyte	result1, local03 wz
1aa24     01 22 06 51 |  if_ne	add	local03, #1
1aa28     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1aa2c                 | LR__2431
1aa2c     09 23 82 F1 | 	sub	local03, arg01
1aa30     11 FB 01 F6 | 	mov	result1, local03
1aa34     FD 14 02 F6 | 	mov	arg02, result1
1aa38     10 15 52 F2 | 	cmps	arg02, local02 wc
1aa3c     3D 01 00 CF 
1aa40     F9 FB 05 C6 |  if_b	mov	result1, ##@LR__4266
1aa44     44 00 90 CD |  if_b	jmp	#LR__2433
1aa48     0A 25 02 F6 | 	mov	local04, arg02
1aa4c     10 25 82 F1 | 	sub	local04, local02
1aa50     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1aa54     0B 25 02 16 |  if_a	mov	local04, arg03
1aa58     12 13 02 F6 | 	mov	arg01, local04
1aa5c     02 12 06 F1 | 	add	arg01, #2
1aa60     14 1B B0 FD | 	call	#__system___gc_alloc_managed
1aa64     FD 26 0A F6 | 	mov	local05, result1 wz
1aa68     1C 00 90 AD |  if_e	jmp	#LR__2432
1aa6c     0F 21 02 F1 | 	add	local02, local01
1aa70     13 13 02 F6 | 	mov	arg01, local05
1aa74     10 15 02 F6 | 	mov	arg02, local02
1aa78     12 17 02 F6 | 	mov	arg03, local04
1aa7c     68 DD BF FD | 	call	#__system____builtin_memmove
1aa80     13 25 02 F1 | 	add	local04, local05
1aa84     12 01 48 FC | 	wrbyte	#0, local04
1aa88                 | LR__2432
1aa88     13 FB 01 F6 | 	mov	result1, local05
1aa8c                 | LR__2433
1aa8c     A7 F0 03 F6 | 	mov	ptra, fp
1aa90     B2 00 A0 FD | 	call	#popregs_
1aa94                 | __system__Mid_S_ret
1aa94     2D 00 64 FD | 	ret
1aa98                 | 
1aa98                 | __system__Chr_S
1aa98     01 4A 05 F6 | 	mov	COUNT_, #1
1aa9c     A8 00 A0 FD | 	call	#pushregs_
1aaa0     09 1F 02 F6 | 	mov	local01, arg01
1aaa4     03 12 06 F6 | 	mov	arg01, #3
1aaa8     CC 1A B0 FD | 	call	#__system___gc_alloc_managed
1aaac     00 FA 4D F2 | 	cmps	result1, #0 wz
1aab0     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1aab4     01 FA 05 51 |  if_ne	add	result1, #1
1aab8     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1aabc     01 FA 85 51 |  if_ne	sub	result1, #1
1aac0     A7 F0 03 F6 | 	mov	ptra, fp
1aac4     B2 00 A0 FD | 	call	#popregs_
1aac8                 | __system__Chr_S_ret
1aac8     2D 00 64 FD | 	ret
1aacc                 | 
1aacc                 | __system__Number_S
1aacc     08 4A 05 F6 | 	mov	COUNT_, #8
1aad0     A8 00 A0 FD | 	call	#pushregs_
1aad4     09 1F 02 F6 | 	mov	local01, arg01
1aad8     0A 21 0A F6 | 	mov	local02, arg02 wz
1aadc     0B 23 02 F6 | 	mov	local03, arg03
1aae0     3C 00 90 5D |  if_ne	jmp	#LR__2442
1aae4     01 20 06 F6 | 	mov	local02, #1
1aae8     11 25 02 F6 | 	mov	local04, local03
1aaec     01 26 06 F6 | 	mov	local05, #1
1aaf0     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1aaf4                 | LR__2440
1aaf4     00 28 06 F6 | 	mov	local06, #0
1aaf8     0F 25 1A F2 | 	cmp	local04, local01 wcz
1aafc     01 28 66 E6 |  if_be	neg	local06, #1
1ab00     12 27 12 F2 | 	cmp	local05, local04 wc
1ab04     15 2B A2 F1 | 	subx	local07, local07
1ab08     15 29 CA F7 | 	test	local06, local07 wz
1ab0c     11 25 02 5D |  if_ne	qmul	local04, local03
1ab10     12 27 02 56 |  if_ne	mov	local05, local04
1ab14     01 20 06 51 |  if_ne	add	local02, #1
1ab18     18 24 62 5D |  if_ne	getqx	local04
1ab1c     D4 FF 9F 5D |  if_ne	jmp	#LR__2440
1ab20                 | LR__2441
1ab20                 | LR__2442
1ab20     20 20 36 F3 | 	fle	local02, #32 wc
1ab24     10 13 02 F6 | 	mov	arg01, local02
1ab28     02 12 06 F1 | 	add	arg01, #2
1ab2c     48 1A B0 FD | 	call	#__system___gc_alloc_managed
1ab30     FD 28 02 F6 | 	mov	local06, result1
1ab34     10 2B 02 F6 | 	mov	local07, local02
1ab38     14 2B 02 F1 | 	add	local07, local06
1ab3c     15 01 48 FC | 	wrbyte	#0, local07
1ab40     97 1A 48 FB | 	callpa	#(@LR__2444-@LR__2443)>>2,fcache_load_ptr_
1ab44                 | LR__2443
1ab44     01 20 16 F2 | 	cmp	local02, #1 wc
1ab48     2C 00 90 CD |  if_b	jmp	#LR__2445
1ab4c     11 1F 12 FD | 	qdiv	local01, local03
1ab50     01 20 86 F1 | 	sub	local02, #1
1ab54     10 2B 02 F6 | 	mov	local07, local02
1ab58     14 2B 02 F1 | 	add	local07, local06
1ab5c     19 2C 62 FD | 	getqy	local08
1ab60     0A 2C 16 F2 | 	cmp	local08, #10 wc
1ab64     30 2C 06 C1 |  if_b	add	local08, #48
1ab68     37 2C 06 31 |  if_ae	add	local08, #55
1ab6c     15 2D 42 FC | 	wrbyte	local08, local07
1ab70     18 1E 62 FD | 	getqx	local01
1ab74     CC FF 9F FD | 	jmp	#LR__2443
1ab78                 | LR__2444
1ab78                 | LR__2445
1ab78     14 FB 01 F6 | 	mov	result1, local06
1ab7c     A7 F0 03 F6 | 	mov	ptra, fp
1ab80     B2 00 A0 FD | 	call	#popregs_
1ab84                 | __system__Number_S_ret
1ab84     2D 00 64 FD | 	ret
1ab88                 | 
1ab88                 | __system__LCase_S
1ab88     07 4A 05 F6 | 	mov	COUNT_, #7
1ab8c     A8 00 A0 FD | 	call	#pushregs_
1ab90     09 1F 02 F6 | 	mov	local01, arg01
1ab94     09 21 02 F6 | 	mov	local02, arg01
1ab98     97 06 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1ab9c                 | LR__2450
1ab9c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1aba0     01 20 06 51 |  if_ne	add	local02, #1
1aba4     F4 FF 9F 5D |  if_ne	jmp	#LR__2450
1aba8                 | LR__2451
1aba8     09 21 82 F1 | 	sub	local02, arg01
1abac     10 FB 01 F6 | 	mov	result1, local02
1abb0     FD 20 0A F6 | 	mov	local02, result1 wz
1abb4     3D 01 00 AF 
1abb8     FA FB 05 A6 |  if_e	mov	result1, ##@LR__4267
1abbc     7C 00 90 AD |  if_e	jmp	#LR__2457
1abc0     10 13 02 F6 | 	mov	arg01, local02
1abc4     02 12 06 F1 | 	add	arg01, #2
1abc8     AC 19 B0 FD | 	call	#__system___gc_alloc_managed
1abcc     FD 22 0A F6 | 	mov	local03, result1 wz
1abd0     64 00 90 AD |  if_e	jmp	#LR__2456
1abd4     01 24 66 F6 | 	neg	local04, #1
1abd8     97 26 48 FB | 	callpa	#(@LR__2455-@LR__2452)>>2,fcache_load_ptr_
1abdc                 | LR__2452
1abdc     01 24 06 F1 | 	add	local04, #1
1abe0     12 27 02 F6 | 	mov	local05, local04
1abe4     0F 27 02 F1 | 	add	local05, local01
1abe8     13 29 C2 FA | 	rdbyte	local06, local05
1abec     41 28 56 F2 | 	cmps	local06, #65 wc
1abf0     18 00 90 CD |  if_b	jmp	#LR__2453
1abf4     5B 28 56 F2 | 	cmps	local06, #91 wc
1abf8     12 2B 02 C6 |  if_b	mov	local07, local04
1abfc     11 2B 02 C1 |  if_b	add	local07, local03
1ac00     20 28 06 C1 |  if_b	add	local06, #32
1ac04     15 29 42 CC |  if_b	wrbyte	local06, local07
1ac08     0C 00 90 CD |  if_b	jmp	#LR__2454
1ac0c                 | LR__2453
1ac0c     12 2B 02 F6 | 	mov	local07, local04
1ac10     11 2B 02 F1 | 	add	local07, local03
1ac14     15 29 42 FC | 	wrbyte	local06, local07
1ac18                 | LR__2454
1ac18     10 29 02 F6 | 	mov	local06, local02
1ac1c     01 28 86 F1 | 	sub	local06, #1
1ac20     14 25 0A F2 | 	cmp	local04, local06 wz
1ac24     B4 FF 9F 5D |  if_ne	jmp	#LR__2452
1ac28                 | LR__2455
1ac28     11 21 02 F1 | 	add	local02, local03
1ac2c     10 01 48 FC | 	wrbyte	#0, local02
1ac30     11 FB 01 F6 | 	mov	result1, local03
1ac34     04 00 90 FD | 	jmp	#LR__2457
1ac38                 | LR__2456
1ac38     11 FB 01 F6 | 	mov	result1, local03
1ac3c                 | LR__2457
1ac3c     A7 F0 03 F6 | 	mov	ptra, fp
1ac40     B2 00 A0 FD | 	call	#popregs_
1ac44                 | __system__LCase_S_ret
1ac44     2D 00 64 FD | 	ret
1ac48                 | 
1ac48                 | __system__LTrim_S
1ac48     05 4A 05 F6 | 	mov	COUNT_, #5
1ac4c     A8 00 A0 FD | 	call	#pushregs_
1ac50     09 1F 02 F6 | 	mov	local01, arg01
1ac54     09 21 02 F6 | 	mov	local02, arg01
1ac58     97 06 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1ac5c                 | LR__2460
1ac5c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1ac60     01 20 06 51 |  if_ne	add	local02, #1
1ac64     F4 FF 9F 5D |  if_ne	jmp	#LR__2460
1ac68                 | LR__2461
1ac68     09 21 82 F1 | 	sub	local02, arg01
1ac6c     10 FB 01 F6 | 	mov	result1, local02
1ac70     FD 20 0A F6 | 	mov	local02, result1 wz
1ac74     3D 01 00 AF 
1ac78     FB FB 05 A6 |  if_e	mov	result1, ##@LR__4268
1ac7c     7C 00 90 AD |  if_e	jmp	#LR__2466
1ac80     00 22 06 F6 | 	mov	local03, #0
1ac84     10 25 02 F6 | 	mov	local04, local02
1ac88                 | LR__2462
1ac88     12 23 52 F2 | 	cmps	local03, local04 wc
1ac8c     68 00 90 3D |  if_ae	jmp	#LR__2465
1ac90     11 17 02 F6 | 	mov	arg03, local03
1ac94     0F 17 02 F1 | 	add	arg03, local01
1ac98     0B 17 C2 FA | 	rdbyte	arg03, arg03
1ac9c     20 16 0E F2 | 	cmp	arg03, #32 wz
1aca0     4C 00 90 AD |  if_e	jmp	#LR__2464
1aca4     10 13 02 F6 | 	mov	arg01, local02
1aca8     11 13 82 F1 | 	sub	arg01, local03
1acac     02 12 06 F1 | 	add	arg01, #2
1acb0     C4 18 B0 FD | 	call	#__system___gc_alloc_managed
1acb4     FD 26 0A F6 | 	mov	local05, result1 wz
1acb8     2C 00 90 AD |  if_e	jmp	#LR__2463
1acbc     11 15 02 F6 | 	mov	arg02, local03
1acc0     0F 15 02 F1 | 	add	arg02, local01
1acc4     10 17 02 F6 | 	mov	arg03, local02
1acc8     11 17 82 F1 | 	sub	arg03, local03
1accc     13 13 02 F6 | 	mov	arg01, local05
1acd0     14 DB BF FD | 	call	#__system____builtin_memmove
1acd4     11 21 82 F1 | 	sub	local02, local03
1acd8     13 21 02 F1 | 	add	local02, local05
1acdc     10 01 48 FC | 	wrbyte	#0, local02
1ace0     13 FB 01 F6 | 	mov	result1, local05
1ace4     14 00 90 FD | 	jmp	#LR__2466
1ace8                 | LR__2463
1ace8     13 FB 01 F6 | 	mov	result1, local05
1acec     0C 00 90 FD | 	jmp	#LR__2466
1acf0                 | LR__2464
1acf0     01 22 06 F1 | 	add	local03, #1
1acf4     90 FF 9F FD | 	jmp	#LR__2462
1acf8                 | LR__2465
1acf8     0F FB 01 F6 | 	mov	result1, local01
1acfc                 | LR__2466
1acfc     A7 F0 03 F6 | 	mov	ptra, fp
1ad00     B2 00 A0 FD | 	call	#popregs_
1ad04                 | __system__LTrim_S_ret
1ad04     2D 00 64 FD | 	ret
1ad08                 | 
1ad08                 | __system__RTrim_S
1ad08     04 4A 05 F6 | 	mov	COUNT_, #4
1ad0c     A8 00 A0 FD | 	call	#pushregs_
1ad10     09 1F 02 F6 | 	mov	local01, arg01
1ad14     09 21 02 F6 | 	mov	local02, arg01
1ad18     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1ad1c                 | LR__2470
1ad1c     10 FB C9 FA | 	rdbyte	result1, local02 wz
1ad20     01 20 06 51 |  if_ne	add	local02, #1
1ad24     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1ad28                 | LR__2471
1ad28     09 21 82 F1 | 	sub	local02, arg01
1ad2c     10 FB 01 F6 | 	mov	result1, local02
1ad30     FD 20 0A F6 | 	mov	local02, result1 wz
1ad34     3D 01 00 AF 
1ad38     FC FB 05 A6 |  if_e	mov	result1, ##@LR__4269
1ad3c     74 00 90 AD |  if_e	jmp	#LR__2475
1ad40     10 23 02 F6 | 	mov	local03, local02
1ad44     01 22 86 F1 | 	sub	local03, #1
1ad48                 | LR__2472
1ad48     11 15 02 F6 | 	mov	arg02, local03
1ad4c     0F 15 02 F1 | 	add	arg02, local01
1ad50     0A 21 C2 FA | 	rdbyte	local02, arg02
1ad54     20 20 0E F2 | 	cmp	local02, #32 wz
1ad58     44 00 90 AD |  if_e	jmp	#LR__2474
1ad5c     11 13 02 F6 | 	mov	arg01, local03
1ad60     02 12 06 F1 | 	add	arg01, #2
1ad64     10 18 B0 FD | 	call	#__system___gc_alloc_managed
1ad68     FD 24 0A F6 | 	mov	local04, result1 wz
1ad6c     28 00 90 AD |  if_e	jmp	#LR__2473
1ad70     11 17 02 F6 | 	mov	arg03, local03
1ad74     01 16 06 F1 | 	add	arg03, #1
1ad78     12 13 02 F6 | 	mov	arg01, local04
1ad7c     0F 15 02 F6 | 	mov	arg02, local01
1ad80     64 DA BF FD | 	call	#__system____builtin_memmove
1ad84     01 22 06 F1 | 	add	local03, #1
1ad88     12 23 02 F1 | 	add	local03, local04
1ad8c     11 01 48 FC | 	wrbyte	#0, local03
1ad90     12 FB 01 F6 | 	mov	result1, local04
1ad94     1C 00 90 FD | 	jmp	#LR__2475
1ad98                 | LR__2473
1ad98     12 FB 01 F6 | 	mov	result1, local04
1ad9c     14 00 90 FD | 	jmp	#LR__2475
1ada0                 | LR__2474
1ada0     01 22 86 F1 | 	sub	local03, #1
1ada4     00 22 56 F2 | 	cmps	local03, #0 wc
1ada8     9C FF 9F 3D |  if_ae	jmp	#LR__2472
1adac     3D 01 00 FF 
1adb0     FD FB 05 F6 | 	mov	result1, ##@LR__4270
1adb4                 | LR__2475
1adb4     A7 F0 03 F6 | 	mov	ptra, fp
1adb8     B2 00 A0 FD | 	call	#popregs_
1adbc                 | __system__RTrim_S_ret
1adbc     2D 00 64 FD | 	ret
1adc0                 | 
1adc0                 | __system___strerror
1adc0     00 12 56 F2 | 	cmps	arg01, #0 wc
1adc4     08 00 90 CD |  if_b	jmp	#LR__2480
1adc8     1A 12 56 F2 | 	cmps	arg01, #26 wc
1adcc     04 00 90 CD |  if_b	jmp	#LR__2481
1add0                 | LR__2480
1add0     19 12 06 F6 | 	mov	arg01, #25
1add4                 | LR__2481
1add4     02 12 66 F0 | 	shl	arg01, #2
1add8     01 00 00 FF 
1addc     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
1ade0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1ade4     09 FB 01 FB | 	rdlong	result1, arg01
1ade8     01 00 00 FF 
1adec     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
1adf0                 | __system___strerror_ret
1adf0     2D 00 64 FD | 	ret
1adf4                 | 
1adf4                 | __system___int64_shl
1adf4     20 16 CE F7 | 	test	arg03, #32 wz
1adf8     09 15 02 56 |  if_ne	mov	arg02, arg01
1adfc     00 12 06 56 |  if_ne	mov	arg01, #0
1ae00     1F 16 CE F7 | 	test	arg03, #31 wz
1ae04     18 00 90 AD |  if_e	jmp	#LR__2490
1ae08     0B 15 62 F0 | 	shl	arg02, arg03
1ae0c     09 FB 01 F6 | 	mov	result1, arg01
1ae10     0B FD 61 F6 | 	neg	result2, arg03
1ae14     FE FA 41 F0 | 	shr	result1, result2
1ae18     FD 14 42 F5 | 	or	arg02, result1
1ae1c     0B 13 62 F0 | 	shl	arg01, arg03
1ae20                 | LR__2490
1ae20     0A FD 01 F6 | 	mov	result2, arg02
1ae24     09 FB 01 F6 | 	mov	result1, arg01
1ae28                 | __system___int64_shl_ret
1ae28     2D 00 64 FD | 	ret
1ae2c                 | 
1ae2c                 | __system___usepins
1ae2c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1ae30     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ae34     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1ae38     00 13 CA F7 | 	test	arg01, _var01 wz
1ae3c     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
1ae40     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1ae44     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1ae48     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1ae4c     00 FA 05 56 |  if_ne	mov	result1, #0
1ae50     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1ae54     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1ae58     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ae5c     09 03 42 F5 | 	or	_var02, arg01
1ae60     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ae64     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ae68     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ae6c     0A 03 42 F5 | 	or	_var02, arg02
1ae70     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ae74     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1ae78     01 FA 65 F6 | 	neg	result1, #1
1ae7c                 | __system___usepins_ret
1ae7c     2D 00 64 FD | 	ret
1ae80                 | 
1ae80                 | __system___freepins
1ae80     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1ae84     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ae88     09 01 22 F5 | 	andn	_var01, arg01
1ae8c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ae90     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1ae94     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ae98     0A 01 22 F5 | 	andn	_var01, arg02
1ae9c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1aea0     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
1aea4                 | __system___freepins_ret
1aea4     2D 00 64 FD | 	ret
1aea8                 | 
1aea8                 | __system___float_fromuns
1aea8     09 17 0A F6 | 	mov	arg03, arg01 wz
1aeac     0B FB 01 A6 |  if_e	mov	result1, arg03
1aeb0     24 00 90 AD |  if_e	jmp	#LR__2500
1aeb4     0B 15 92 F7 | 	encod	arg02, arg03 wc
1aeb8     01 14 06 C1 |  if_b	add	arg02, #1
1aebc     01 14 86 F1 | 	sub	arg02, #1
1aec0     1F 12 06 F6 | 	mov	arg01, #31
1aec4     0A 13 82 F1 | 	sub	arg01, arg02
1aec8     09 17 62 F0 | 	shl	arg03, arg01
1aecc     02 16 46 F0 | 	shr	arg03, #2
1aed0     00 12 06 F6 | 	mov	arg01, #0
1aed4     4C 09 B0 FD | 	call	#__system___float_Pack
1aed8                 | LR__2500
1aed8                 | __system___float_fromuns_ret
1aed8     2D 00 64 FD | 	ret
1aedc                 | 
1aedc                 | __system___float_add
1aedc     0F 4A 05 F6 | 	mov	COUNT_, #15
1aee0     A8 00 A0 FD | 	call	#pushregs_
1aee4     09 1F 02 F6 | 	mov	local01, arg01
1aee8     0A 21 02 F6 | 	mov	local02, arg02
1aeec     00 22 06 F6 | 	mov	local03, #0
1aef0     0F 25 02 F6 | 	mov	local04, local01
1aef4     12 27 02 F6 | 	mov	local05, local04
1aef8     16 26 46 F7 | 	zerox	local05, #22
1aefc     12 29 02 F6 | 	mov	local06, local04
1af00     01 28 66 F0 | 	shl	local06, #1
1af04     18 28 46 F0 | 	shr	local06, #24
1af08     1F 24 46 F0 | 	shr	local04, #31
1af0c     10 13 02 F6 | 	mov	arg01, local02
1af10     09 FB 01 F6 | 	mov	result1, arg01
1af14     FD 2A 02 F6 | 	mov	local07, result1
1af18     15 2D 02 F6 | 	mov	local08, local07
1af1c     16 2C 46 F7 | 	zerox	local08, #22
1af20     15 2F 02 F6 | 	mov	local09, local07
1af24     01 2E 66 F0 | 	shl	local09, #1
1af28     18 2E 46 F0 | 	shr	local09, #24
1af2c     17 31 02 F6 | 	mov	local10, local09
1af30     1F 2A 46 F0 | 	shr	local07, #31
1af34     00 32 06 F6 | 	mov	local11, #0
1af38     00 34 06 F6 | 	mov	local12, #0
1af3c     18 29 12 F2 | 	cmp	local06, local10 wc
1af40     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1af44     2C 00 90 1D |  if_a	jmp	#LR__2510
1af48     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1af4c     24 00 90 3D |  if_ae	jmp	#LR__2510
1af50     13 37 02 F6 | 	mov	local13, local05
1af54     16 27 02 F6 | 	mov	local05, local08
1af58     1B 2D 02 F6 | 	mov	local08, local13
1af5c     14 37 02 F6 | 	mov	local13, local06
1af60     18 29 02 F6 | 	mov	local06, local10
1af64     1B 31 02 F6 | 	mov	local10, local13
1af68     12 37 02 F6 | 	mov	local13, local04
1af6c     15 25 02 F6 | 	mov	local04, local07
1af70     1B 2B 02 F6 | 	mov	local07, local13
1af74                 | LR__2510
1af74     FF 28 0E F2 | 	cmp	local06, #255 wz
1af78     70 01 90 AD |  if_e	jmp	#LR__2525
1af7c     00 28 0E F2 | 	cmp	local06, #0 wz
1af80     AC 01 90 AD |  if_e	jmp	#LR__2527
1af84     17 26 26 F4 | 	bith	local05, #23
1af88                 | LR__2511
1af88     00 30 0E F2 | 	cmp	local10, #0 wz
1af8c     F0 01 90 AD |  if_e	jmp	#LR__2531
1af90     17 2C 26 F4 | 	bith	local08, #23
1af94                 | LR__2512
1af94     7F 28 86 F1 | 	sub	local06, #127
1af98     7F 30 86 F1 | 	sub	local10, #127
1af9c     14 39 02 F6 | 	mov	local14, local06
1afa0     18 39 82 F1 | 	sub	local14, local10
1afa4     97 14 48 FB | 	callpa	#(@LR__2514-@LR__2513)>>2,fcache_load_ptr_
1afa8                 | LR__2513
1afa8     20 38 56 F2 | 	cmps	local14, #32 wc
1afac     20 00 90 CD |  if_b	jmp	#LR__2515
1afb0     16 2F 02 F6 | 	mov	local09, local08
1afb4     00 32 0E F2 | 	cmp	local11, #0 wz
1afb8     6F 32 62 FD | 	wrnz	local11
1afbc     19 2F 42 F5 | 	or	local09, local11
1afc0     17 33 02 F6 | 	mov	local11, local09
1afc4     00 2C 06 F6 | 	mov	local08, #0
1afc8     20 38 86 F1 | 	sub	local14, #32
1afcc     D8 FF 9F FD | 	jmp	#LR__2513
1afd0                 | LR__2514
1afd0                 | LR__2515
1afd0     00 38 0E F2 | 	cmp	local14, #0 wz
1afd4     38 00 90 AD |  if_e	jmp	#LR__2516
1afd8     16 37 02 F6 | 	mov	local13, local08
1afdc     20 30 06 F6 | 	mov	local10, #32
1afe0     1C 31 82 F1 | 	sub	local10, local14
1afe4     18 37 62 F0 | 	shl	local13, local10
1afe8     19 31 02 F6 | 	mov	local10, local11
1afec     20 2E 06 F6 | 	mov	local09, #32
1aff0     1C 2F 82 F1 | 	sub	local09, local14
1aff4     17 31 6A F0 | 	shl	local10, local09 wz
1aff8     1C 33 42 F0 | 	shr	local11, local14
1affc     1C 2D 42 F0 | 	shr	local08, local14
1b000     1B 33 42 F5 | 	or	local11, local13
1b004     00 3A 06 F6 | 	mov	local15, #0
1b008     01 3A 06 56 |  if_ne	mov	local15, #1
1b00c     1D 33 42 F5 | 	or	local11, local15
1b010                 | LR__2516
1b010     12 3B 02 F6 | 	mov	local15, local04
1b014     15 3B 62 F5 | 	xor	local15, local07
1b018     01 3A CE F7 | 	test	local15, #1 wz
1b01c     18 00 90 AD |  if_e	jmp	#LR__2517
1b020     16 2D 22 F6 | 	not	local08, local08
1b024     19 33 22 F6 | 	not	local11, local11
1b028     01 32 0E F1 | 	add	local11, #1 wz
1b02c     00 3A 06 F6 | 	mov	local15, #0
1b030     01 3A 06 A6 |  if_e	mov	local15, #1
1b034     1D 2D 02 F1 | 	add	local08, local15
1b038                 | LR__2517
1b038     19 35 12 F1 | 	add	local12, local11 wc
1b03c     16 27 22 F1 | 	addx	local05, local08
1b040     00 26 56 F2 | 	cmps	local05, #0 wc
1b044     1C 00 90 3D |  if_ae	jmp	#LR__2518
1b048     01 24 66 F5 | 	xor	local04, #1
1b04c     13 27 22 F6 | 	not	local05, local05
1b050     1A 35 22 F6 | 	not	local12, local12
1b054     01 34 0E F1 | 	add	local12, #1 wz
1b058     00 3A 06 F6 | 	mov	local15, #0
1b05c     01 3A 06 A6 |  if_e	mov	local15, #1
1b060     1D 27 02 F1 | 	add	local05, local15
1b064                 | LR__2518
1b064     00 80 00 FF 
1b068     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1b06c     28 00 90 CD |  if_b	jmp	#LR__2519
1b070     01 28 06 F1 | 	add	local06, #1
1b074     1A 39 02 F6 | 	mov	local14, local12
1b078     01 38 06 F5 | 	and	local14, #1
1b07c     01 34 46 F0 | 	shr	local12, #1
1b080     13 3B 02 F6 | 	mov	local15, local05
1b084     1F 3A 66 F0 | 	shl	local15, #31
1b088     1D 35 42 F5 | 	or	local12, local15
1b08c     1C 35 42 F5 | 	or	local12, local14
1b090     01 26 46 F0 | 	shr	local05, #1
1b094     3C 00 90 FD | 	jmp	#LR__2524
1b098                 | LR__2519
1b098     00 40 00 FF 
1b09c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b0a0     30 00 90 3D |  if_ae	jmp	#LR__2523
1b0a4     00 26 0E F2 | 	cmp	local05, #0 wz
1b0a8     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1b0ac     08 24 46 A5 |  if_e	or	local04, #8
1b0b0     01 24 26 A5 |  if_e	andn	local04, #1
1b0b4     1C 00 90 AD |  if_e	jmp	#LR__2522
1b0b8                 | LR__2520
1b0b8     00 40 00 FF 
1b0bc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b0c0     10 00 90 3D |  if_ae	jmp	#LR__2521
1b0c4     1A 35 12 F1 | 	add	local12, local12 wc
1b0c8     13 27 22 F1 | 	addx	local05, local05
1b0cc     01 28 86 F1 | 	sub	local06, #1
1b0d0     E4 FF 9F FD | 	jmp	#LR__2520
1b0d4                 | LR__2521
1b0d4                 | LR__2522
1b0d4                 | LR__2523
1b0d4                 | LR__2524
1b0d4     13 13 02 F6 | 	mov	arg01, local05
1b0d8     1A 15 02 F6 | 	mov	arg02, local12
1b0dc     14 17 02 F6 | 	mov	arg03, local06
1b0e0     12 19 02 F6 | 	mov	arg04, local04
1b0e4     88 33 B0 FD | 	call	#__system__pack_0483
1b0e8     DC 00 90 FD | 	jmp	#LR__2535
1b0ec                 | LR__2525
1b0ec     FF 30 0E F2 | 	cmp	local10, #255 wz
1b0f0     10 00 90 5D |  if_ne	jmp	#LR__2526
1b0f4     12 2B 0A F2 | 	cmp	local07, local04 wz
1b0f8     00 F8 3F 5F 
1b0fc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b100     C4 00 90 5D |  if_ne	jmp	#LR__2535
1b104                 | LR__2526
1b104     00 26 0E F2 | 	cmp	local05, #0 wz
1b108     00 F8 3F 5F 
1b10c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b110     B4 00 90 5D |  if_ne	jmp	#LR__2535
1b114     1A 15 02 F6 | 	mov	arg02, local12
1b118     14 17 02 F6 | 	mov	arg03, local06
1b11c     12 19 02 F6 | 	mov	arg04, local04
1b120     02 18 46 F5 | 	or	arg04, #2
1b124     13 13 02 F6 | 	mov	arg01, local05
1b128     44 33 B0 FD | 	call	#__system__pack_0483
1b12c     98 00 90 FD | 	jmp	#LR__2535
1b130                 | LR__2527
1b130     00 26 0E F2 | 	cmp	local05, #0 wz
1b134     28 00 90 AD |  if_e	jmp	#LR__2530
1b138     01 26 66 F0 | 	shl	local05, #1
1b13c     97 0E 48 FB | 	callpa	#(@LR__2529-@LR__2528)>>2,fcache_load_ptr_
1b140                 | LR__2528
1b140     00 40 00 FF 
1b144     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1b148     14 3B 02 C6 |  if_b	mov	local15, local06
1b14c     01 3A 86 C1 |  if_b	sub	local15, #1
1b150     1D 29 02 C6 |  if_b	mov	local06, local15
1b154     01 26 66 C0 |  if_b	shl	local05, #1
1b158     E4 FF 9F CD |  if_b	jmp	#LR__2528
1b15c                 | LR__2529
1b15c     28 FE 9F FD | 	jmp	#LR__2511
1b160                 | LR__2530
1b160     15 25 02 F5 | 	and	local04, local07
1b164     12 19 02 F6 | 	mov	arg04, local04
1b168     08 18 46 F5 | 	or	arg04, #8
1b16c     00 12 06 F6 | 	mov	arg01, #0
1b170     00 14 06 F6 | 	mov	arg02, #0
1b174     00 16 06 F6 | 	mov	arg03, #0
1b178     F4 32 B0 FD | 	call	#__system__pack_0483
1b17c     48 00 90 FD | 	jmp	#LR__2535
1b180                 | LR__2531
1b180     00 2C 0E F2 | 	cmp	local08, #0 wz
1b184     28 00 90 AD |  if_e	jmp	#LR__2534
1b188     01 2C 66 F0 | 	shl	local08, #1
1b18c     97 0E 48 FB | 	callpa	#(@LR__2533-@LR__2532)>>2,fcache_load_ptr_
1b190                 | LR__2532
1b190     00 40 00 FF 
1b194     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1b198     18 3B 02 C6 |  if_b	mov	local15, local10
1b19c     01 3A 86 C1 |  if_b	sub	local15, #1
1b1a0     1D 31 02 C6 |  if_b	mov	local10, local15
1b1a4     01 2C 66 C0 |  if_b	shl	local08, #1
1b1a8     E4 FF 9F CD |  if_b	jmp	#LR__2532
1b1ac                 | LR__2533
1b1ac     E4 FD 9F FD | 	jmp	#LR__2512
1b1b0                 | LR__2534
1b1b0     7F 28 86 F1 | 	sub	local06, #127
1b1b4     13 13 02 F6 | 	mov	arg01, local05
1b1b8     1A 15 02 F6 | 	mov	arg02, local12
1b1bc     14 17 02 F6 | 	mov	arg03, local06
1b1c0     12 19 02 F6 | 	mov	arg04, local04
1b1c4     A8 32 B0 FD | 	call	#__system__pack_0483
1b1c8                 | LR__2535
1b1c8     A7 F0 03 F6 | 	mov	ptra, fp
1b1cc     B2 00 A0 FD | 	call	#popregs_
1b1d0                 | __system___float_add_ret
1b1d0     2D 00 64 FD | 	ret
1b1d4                 | 
1b1d4                 | __system___float_sqrt
1b1d4     04 4A 05 F6 | 	mov	COUNT_, #4
1b1d8     A8 00 A0 FD | 	call	#pushregs_
1b1dc     09 1F 02 F6 | 	mov	local01, arg01
1b1e0     09 FB 01 F6 | 	mov	result1, arg01
1b1e4     FD 20 02 F6 | 	mov	local02, result1
1b1e8     10 23 02 F6 | 	mov	local03, local02
1b1ec     16 22 46 F7 | 	zerox	local03, #22
1b1f0     10 25 02 F6 | 	mov	local04, local02
1b1f4     01 24 66 F0 | 	shl	local04, #1
1b1f8     18 24 4E F0 | 	shr	local04, #24 wz
1b1fc     1F 20 46 F0 | 	shr	local02, #31
1b200     70 00 90 AD |  if_e	jmp	#LR__2541
1b204     17 22 26 F4 | 	bith	local03, #23
1b208                 | LR__2540
1b208     00 20 0E F2 | 	cmp	local02, #0 wz
1b20c     00 F8 3F 5F 
1b210     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1b214     88 00 90 5D |  if_ne	jmp	#LR__2544
1b218     FF 24 0E F2 | 	cmp	local04, #255 wz
1b21c     0F FB 01 A6 |  if_e	mov	result1, local01
1b220     7C 00 90 AD |  if_e	jmp	#LR__2544
1b224     7F 24 86 F1 | 	sub	local04, #127
1b228     01 24 CE F7 | 	test	local04, #1 wz
1b22c     01 22 66 50 |  if_ne	shl	local03, #1
1b230     05 22 66 F0 | 	shl	local03, #5
1b234     11 01 38 FD | 	qsqrt	#0, local03
1b238     01 24 86 51 |  if_ne	sub	local04, #1
1b23c     12 25 52 F6 | 	abs	local04, local04 wc
1b240     01 24 46 F0 | 	shr	local04, #1
1b244     12 17 82 F6 | 	negc	arg03, local04
1b248     10 19 02 F6 | 	mov	arg04, local02
1b24c     18 12 62 FD | 	getqx	arg01
1b250     09 15 02 F6 | 	mov	arg02, arg01
1b254     19 14 66 F0 | 	shl	arg02, #25
1b258     07 12 46 F0 | 	shr	arg01, #7
1b25c     00 80 00 FF 
1b260     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1b264     01 16 06 31 |  if_ae	add	arg03, #1
1b268     01 12 46 30 |  if_ae	shr	arg01, #1
1b26c     00 32 B0 FD | 	call	#__system__pack_0483
1b270     2C 00 90 FD | 	jmp	#LR__2544
1b274                 | LR__2541
1b274     00 22 0E F2 | 	cmp	local03, #0 wz
1b278     0F FB 01 A6 |  if_e	mov	result1, local01
1b27c     20 00 90 AD |  if_e	jmp	#LR__2544
1b280     01 22 66 F0 | 	shl	local03, #1
1b284     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2542)>>2,fcache_load_ptr_
1b288                 | LR__2542
1b288     00 40 00 FF 
1b28c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1b290     01 24 86 C1 |  if_b	sub	local04, #1
1b294     01 22 66 C0 |  if_b	shl	local03, #1
1b298     EC FF 9F CD |  if_b	jmp	#LR__2542
1b29c                 | LR__2543
1b29c     68 FF 9F FD | 	jmp	#LR__2540
1b2a0                 | LR__2544
1b2a0     A7 F0 03 F6 | 	mov	ptra, fp
1b2a4     B2 00 A0 FD | 	call	#popregs_
1b2a8                 | __system___float_sqrt_ret
1b2a8     2D 00 64 FD | 	ret
1b2ac                 | 
1b2ac                 | __system___float_mul
1b2ac     0B 4A 05 F6 | 	mov	COUNT_, #11
1b2b0     A8 00 A0 FD | 	call	#pushregs_
1b2b4     09 1F 02 F6 | 	mov	local01, arg01
1b2b8     0A 21 02 F6 | 	mov	local02, arg02
1b2bc     0F 23 02 F6 | 	mov	local03, local01
1b2c0     11 25 02 F6 | 	mov	local04, local03
1b2c4     16 24 46 F7 | 	zerox	local04, #22
1b2c8     11 27 02 F6 | 	mov	local05, local03
1b2cc     01 26 66 F0 | 	shl	local05, #1
1b2d0     18 26 46 F0 | 	shr	local05, #24
1b2d4     1F 22 46 F0 | 	shr	local03, #31
1b2d8     10 FB 01 F6 | 	mov	result1, local02
1b2dc     FD 28 02 F6 | 	mov	local06, result1
1b2e0     14 2B 02 F6 | 	mov	local07, local06
1b2e4     16 2A 46 F7 | 	zerox	local07, #22
1b2e8     14 2D 02 F6 | 	mov	local08, local06
1b2ec     01 2C 66 F0 | 	shl	local08, #1
1b2f0     18 2C 46 F0 | 	shr	local08, #24
1b2f4     1F 28 46 F0 | 	shr	local06, #31
1b2f8     14 23 62 F5 | 	xor	local03, local06
1b2fc     FF 26 0E F2 | 	cmp	local05, #255 wz
1b300     90 00 90 AD |  if_e	jmp	#LR__2553
1b304     FF 2C 0E F2 | 	cmp	local08, #255 wz
1b308     D8 00 90 AD |  if_e	jmp	#LR__2555
1b30c     00 26 0E F2 | 	cmp	local05, #0 wz
1b310     0C 01 90 AD |  if_e	jmp	#LR__2556
1b314     17 24 26 F4 | 	bith	local04, #23
1b318                 | LR__2550
1b318     00 2C 0E F2 | 	cmp	local08, #0 wz
1b31c     44 01 90 AD |  if_e	jmp	#LR__2560
1b320     17 2A 26 F4 | 	bith	local07, #23
1b324                 | LR__2551
1b324     12 21 02 F6 | 	mov	local02, local04
1b328     04 20 66 F0 | 	shl	local02, #4
1b32c     15 29 02 F6 | 	mov	local06, local07
1b330     05 28 66 F0 | 	shl	local06, #5
1b334     14 21 02 FD | 	qmul	local02, local06
1b338     16 27 02 F1 | 	add	local05, local08
1b33c     FE 26 86 F1 | 	sub	local05, #254
1b340     13 2F 02 F6 | 	mov	local09, local05
1b344     04 24 66 F0 | 	shl	local04, #4
1b348     05 2A 66 F0 | 	shl	local07, #5
1b34c     18 30 62 FD | 	getqx	local10
1b350     15 25 02 FD | 	qmul	local04, local07
1b354     19 32 62 FD | 	getqy	local11
1b358     00 80 00 FF 
1b35c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1b360     18 00 90 CD |  if_b	jmp	#LR__2552
1b364     01 2E 06 F1 | 	add	local09, #1
1b368     01 30 46 F0 | 	shr	local10, #1
1b36c     19 2D 02 F6 | 	mov	local08, local11
1b370     1F 2C 66 F0 | 	shl	local08, #31
1b374     16 31 42 F5 | 	or	local10, local08
1b378     01 32 46 F0 | 	shr	local11, #1
1b37c                 | LR__2552
1b37c     19 13 02 F6 | 	mov	arg01, local11
1b380     18 15 02 F6 | 	mov	arg02, local10
1b384     17 17 02 F6 | 	mov	arg03, local09
1b388     11 19 02 F6 | 	mov	arg04, local03
1b38c     E0 30 B0 FD | 	call	#__system__pack_0483
1b390     10 01 90 FD | 	jmp	#LR__2564
1b394                 | LR__2553
1b394     00 24 0E F2 | 	cmp	local04, #0 wz
1b398     0F FB 01 56 |  if_ne	mov	result1, local01
1b39c     04 01 90 5D |  if_ne	jmp	#LR__2564
1b3a0     FF 2C 56 F2 | 	cmps	local08, #255 wc
1b3a4     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1b3a8     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1b3ac     18 00 90 4D |  if_c_and_nz	jmp	#LR__2554
1b3b0     00 F8 3F CF 
1b3b4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1b3b8     E8 00 90 CD |  if_b	jmp	#LR__2564
1b3bc     00 2A 0E F2 | 	cmp	local07, #0 wz
1b3c0     10 FB 01 56 |  if_ne	mov	result1, local02
1b3c4     DC 00 90 5D |  if_ne	jmp	#LR__2564
1b3c8                 | LR__2554
1b3c8     02 22 46 F5 | 	or	local03, #2
1b3cc     00 12 06 F6 | 	mov	arg01, #0
1b3d0     00 14 06 F6 | 	mov	arg02, #0
1b3d4     13 17 02 F6 | 	mov	arg03, local05
1b3d8     11 19 02 F6 | 	mov	arg04, local03
1b3dc     90 30 B0 FD | 	call	#__system__pack_0483
1b3e0     C0 00 90 FD | 	jmp	#LR__2564
1b3e4                 | LR__2555
1b3e4     00 26 0E F2 | 	cmp	local05, #0 wz
1b3e8     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1b3ec     00 F8 3F AF 
1b3f0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b3f4     AC 00 90 AD |  if_e	jmp	#LR__2564
1b3f8     00 2A 0E F2 | 	cmp	local07, #0 wz
1b3fc     10 FB 01 56 |  if_ne	mov	result1, local02
1b400     A0 00 90 5D |  if_ne	jmp	#LR__2564
1b404     16 17 02 F6 | 	mov	arg03, local08
1b408     11 19 02 F6 | 	mov	arg04, local03
1b40c     02 18 46 F5 | 	or	arg04, #2
1b410     00 12 06 F6 | 	mov	arg01, #0
1b414     00 14 06 F6 | 	mov	arg02, #0
1b418     54 30 B0 FD | 	call	#__system__pack_0483
1b41c     84 00 90 FD | 	jmp	#LR__2564
1b420                 | LR__2556
1b420     00 24 0E F2 | 	cmp	local04, #0 wz
1b424     20 00 90 AD |  if_e	jmp	#LR__2559
1b428     01 24 66 F0 | 	shl	local04, #1
1b42c     97 0A 48 FB | 	callpa	#(@LR__2558-@LR__2557)>>2,fcache_load_ptr_
1b430                 | LR__2557
1b430     00 40 00 FF 
1b434     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1b438     01 26 86 C1 |  if_b	sub	local05, #1
1b43c     01 24 66 C0 |  if_b	shl	local04, #1
1b440     EC FF 9F CD |  if_b	jmp	#LR__2557
1b444                 | LR__2558
1b444     D0 FE 9F FD | 	jmp	#LR__2550
1b448                 | LR__2559
1b448     08 22 46 F5 | 	or	local03, #8
1b44c     00 12 06 F6 | 	mov	arg01, #0
1b450     00 14 06 F6 | 	mov	arg02, #0
1b454     00 16 06 F6 | 	mov	arg03, #0
1b458     11 19 02 F6 | 	mov	arg04, local03
1b45c     10 30 B0 FD | 	call	#__system__pack_0483
1b460     40 00 90 FD | 	jmp	#LR__2564
1b464                 | LR__2560
1b464     00 2A 0E F2 | 	cmp	local07, #0 wz
1b468     20 00 90 AD |  if_e	jmp	#LR__2563
1b46c     01 2A 66 F0 | 	shl	local07, #1
1b470     97 0A 48 FB | 	callpa	#(@LR__2562-@LR__2561)>>2,fcache_load_ptr_
1b474                 | LR__2561
1b474     00 40 00 FF 
1b478     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1b47c     01 2C 86 C1 |  if_b	sub	local08, #1
1b480     01 2A 66 C0 |  if_b	shl	local07, #1
1b484     EC FF 9F CD |  if_b	jmp	#LR__2561
1b488                 | LR__2562
1b488     98 FE 9F FD | 	jmp	#LR__2551
1b48c                 | LR__2563
1b48c     08 22 46 F5 | 	or	local03, #8
1b490     00 12 06 F6 | 	mov	arg01, #0
1b494     00 14 06 F6 | 	mov	arg02, #0
1b498     00 16 06 F6 | 	mov	arg03, #0
1b49c     11 19 02 F6 | 	mov	arg04, local03
1b4a0     CC 2F B0 FD | 	call	#__system__pack_0483
1b4a4                 | LR__2564
1b4a4     A7 F0 03 F6 | 	mov	ptra, fp
1b4a8     B2 00 A0 FD | 	call	#popregs_
1b4ac                 | __system___float_mul_ret
1b4ac     2D 00 64 FD | 	ret
1b4b0                 | 
1b4b0                 | __system___float_div
1b4b0     0E 4A 05 F6 | 	mov	COUNT_, #14
1b4b4     A8 00 A0 FD | 	call	#pushregs_
1b4b8     09 23 02 F6 | 	mov	local03, arg01
1b4bc     0A 25 02 F6 | 	mov	local04, arg02
1b4c0     11 27 02 F6 | 	mov	local05, local03
1b4c4     13 29 02 F6 | 	mov	local06, local05
1b4c8     16 28 46 F7 | 	zerox	local06, #22
1b4cc     13 2B 02 F6 | 	mov	local07, local05
1b4d0     01 2A 66 F0 | 	shl	local07, #1
1b4d4     18 2A 46 F0 | 	shr	local07, #24
1b4d8     1F 26 46 F0 | 	shr	local05, #31
1b4dc     12 FB 01 F6 | 	mov	result1, local04
1b4e0     FD 2C 02 F6 | 	mov	local08, result1
1b4e4     16 2F 02 F6 | 	mov	local09, local08
1b4e8     16 2E 46 F7 | 	zerox	local09, #22
1b4ec     16 31 02 F6 | 	mov	local10, local08
1b4f0     01 30 66 F0 | 	shl	local10, #1
1b4f4     18 30 46 F0 | 	shr	local10, #24
1b4f8     1F 2C 46 F0 | 	shr	local08, #31
1b4fc     16 27 62 F5 | 	xor	local05, local08
1b500     FF 2A 0E F2 | 	cmp	local07, #255 wz
1b504     D4 00 90 AD |  if_e	jmp	#LR__2575
1b508     FF 30 0E F2 | 	cmp	local10, #255 wz
1b50c     04 01 90 AD |  if_e	jmp	#LR__2576
1b510     00 2A 0E F2 | 	cmp	local07, #0 wz
1b514     24 01 90 AD |  if_e	jmp	#LR__2577
1b518     17 28 26 F4 | 	bith	local06, #23
1b51c                 | LR__2570
1b51c     00 30 0E F2 | 	cmp	local10, #0 wz
1b520     70 01 90 AD |  if_e	jmp	#LR__2581
1b524     17 2E 26 F4 | 	bith	local09, #23
1b528                 | LR__2571
1b528     18 2B 82 F1 | 	sub	local07, local10
1b52c     15 33 02 F6 | 	mov	local11, local07
1b530     14 13 02 F6 | 	mov	arg01, local06
1b534     02 12 46 F0 | 	shr	arg01, #2
1b538     1E 28 66 F0 | 	shl	local06, #30
1b53c     14 15 02 F6 | 	mov	arg02, local06
1b540     17 17 02 F6 | 	mov	arg03, local09
1b544     28 12 62 FD | 	setq	arg01
1b548     0B 15 12 FD | 	qdiv	arg02, arg03
1b54c     00 34 06 F6 | 	mov	local12, #0
1b550     18 1E 62 FD | 	getqx	local01
1b554     19 FC 61 FD | 	getqy	result2
1b558     FE 20 02 F6 | 	mov	local02, result2
1b55c     0F 37 02 F6 | 	mov	local13, local01
1b560     00 20 4E F2 | 	cmps	local02, #0 wz
1b564     1B 39 02 F6 | 	mov	local14, local13
1b568     19 38 66 F0 | 	shl	local14, #25
1b56c     01 34 06 56 |  if_ne	mov	local12, #1
1b570     1A 39 42 F5 | 	or	local14, local12
1b574     07 36 46 F0 | 	shr	local13, #7
1b578     00 80 00 FF 
1b57c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1b580     1C 00 90 CD |  if_b	jmp	#LR__2572
1b584     01 32 06 F1 | 	add	local11, #1
1b588     01 38 46 F0 | 	shr	local14, #1
1b58c     1B 35 02 F6 | 	mov	local12, local13
1b590     1F 34 66 F0 | 	shl	local12, #31
1b594     1A 39 42 F5 | 	or	local14, local12
1b598     01 36 46 F0 | 	shr	local13, #1
1b59c     24 00 90 FD | 	jmp	#LR__2574
1b5a0                 | LR__2572
1b5a0     00 40 00 FF 
1b5a4     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1b5a8     18 00 90 3D |  if_ae	jmp	#LR__2573
1b5ac     01 32 86 F1 | 	sub	local11, #1
1b5b0     01 36 66 F0 | 	shl	local13, #1
1b5b4     1C 35 02 F6 | 	mov	local12, local14
1b5b8     1F 34 46 F0 | 	shr	local12, #31
1b5bc     1A 37 42 F5 | 	or	local13, local12
1b5c0     01 38 66 F0 | 	shl	local14, #1
1b5c4                 | LR__2573
1b5c4                 | LR__2574
1b5c4     1B 13 02 F6 | 	mov	arg01, local13
1b5c8     1C 15 02 F6 | 	mov	arg02, local14
1b5cc     19 17 02 F6 | 	mov	arg03, local11
1b5d0     13 19 02 F6 | 	mov	arg04, local05
1b5d4     98 2E B0 FD | 	call	#__system__pack_0483
1b5d8     F8 00 90 FD | 	jmp	#LR__2585
1b5dc                 | LR__2575
1b5dc     00 28 0E F2 | 	cmp	local06, #0 wz
1b5e0     11 FB 01 56 |  if_ne	mov	result1, local03
1b5e4     EC 00 90 5D |  if_ne	jmp	#LR__2585
1b5e8     FF 30 0E F2 | 	cmp	local10, #255 wz
1b5ec     00 F8 3F AF 
1b5f0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b5f4     DC 00 90 AD |  if_e	jmp	#LR__2585
1b5f8     02 26 46 F5 | 	or	local05, #2
1b5fc     00 12 06 F6 | 	mov	arg01, #0
1b600     00 14 06 F6 | 	mov	arg02, #0
1b604     15 17 02 F6 | 	mov	arg03, local07
1b608     13 19 02 F6 | 	mov	arg04, local05
1b60c     60 2E B0 FD | 	call	#__system__pack_0483
1b610     C0 00 90 FD | 	jmp	#LR__2585
1b614                 | LR__2576
1b614     00 2E 0E F2 | 	cmp	local09, #0 wz
1b618     12 FB 01 56 |  if_ne	mov	result1, local04
1b61c     B4 00 90 5D |  if_ne	jmp	#LR__2585
1b620     13 19 02 F6 | 	mov	arg04, local05
1b624     08 18 46 F5 | 	or	arg04, #8
1b628     00 12 06 F6 | 	mov	arg01, #0
1b62c     00 14 06 F6 | 	mov	arg02, #0
1b630     00 16 06 F6 | 	mov	arg03, #0
1b634     38 2E B0 FD | 	call	#__system__pack_0483
1b638     98 00 90 FD | 	jmp	#LR__2585
1b63c                 | LR__2577
1b63c     00 28 0E F2 | 	cmp	local06, #0 wz
1b640     20 00 90 AD |  if_e	jmp	#LR__2580
1b644     01 28 66 F0 | 	shl	local06, #1
1b648     97 0A 48 FB | 	callpa	#(@LR__2579-@LR__2578)>>2,fcache_load_ptr_
1b64c                 | LR__2578
1b64c     00 40 00 FF 
1b650     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1b654     01 2A 86 C1 |  if_b	sub	local07, #1
1b658     01 28 66 C0 |  if_b	shl	local06, #1
1b65c     EC FF 9F CD |  if_b	jmp	#LR__2578
1b660                 | LR__2579
1b660     B8 FE 9F FD | 	jmp	#LR__2570
1b664                 | LR__2580
1b664     00 30 0E F2 | 	cmp	local10, #0 wz
1b668     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1b66c     00 F8 3F AF 
1b670     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1b674     5C 00 90 AD |  if_e	jmp	#LR__2585
1b678     13 19 02 F6 | 	mov	arg04, local05
1b67c     08 18 46 F5 | 	or	arg04, #8
1b680     00 12 06 F6 | 	mov	arg01, #0
1b684     00 14 06 F6 | 	mov	arg02, #0
1b688     00 16 06 F6 | 	mov	arg03, #0
1b68c     E0 2D B0 FD | 	call	#__system__pack_0483
1b690     40 00 90 FD | 	jmp	#LR__2585
1b694                 | LR__2581
1b694     00 2E 0E F2 | 	cmp	local09, #0 wz
1b698     20 00 90 AD |  if_e	jmp	#LR__2584
1b69c     01 2E 66 F0 | 	shl	local09, #1
1b6a0     97 0A 48 FB | 	callpa	#(@LR__2583-@LR__2582)>>2,fcache_load_ptr_
1b6a4                 | LR__2582
1b6a4     00 40 00 FF 
1b6a8     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1b6ac     01 30 86 C1 |  if_b	sub	local10, #1
1b6b0     01 2E 66 C0 |  if_b	shl	local09, #1
1b6b4     EC FF 9F CD |  if_b	jmp	#LR__2582
1b6b8                 | LR__2583
1b6b8     6C FE 9F FD | 	jmp	#LR__2571
1b6bc                 | LR__2584
1b6bc     02 26 46 F5 | 	or	local05, #2
1b6c0     00 12 06 F6 | 	mov	arg01, #0
1b6c4     00 14 06 F6 | 	mov	arg02, #0
1b6c8     00 16 06 F6 | 	mov	arg03, #0
1b6cc     13 19 02 F6 | 	mov	arg04, local05
1b6d0     9C 2D B0 FD | 	call	#__system__pack_0483
1b6d4                 | LR__2585
1b6d4     A7 F0 03 F6 | 	mov	ptra, fp
1b6d8     B2 00 A0 FD | 	call	#popregs_
1b6dc                 | __system___float_div_ret
1b6dc     2D 00 64 FD | 	ret
1b6e0                 | 
1b6e0                 | __system___float_cmp
1b6e0     00 C0 3F FF 
1b6e4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1b6e8     00 C0 3F CF 
1b6ec     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1b6f0     0B FB 01 36 |  if_ae	mov	result1, arg03
1b6f4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1b6f8     00 C0 7F FF 
1b6fc     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1b700     00 C0 7F CF 
1b704     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1b708     0B FB 01 36 |  if_ae	mov	result1, arg03
1b70c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1b710     00 12 56 F2 | 	cmps	arg01, #0 wc
1b714     2C 00 90 3D |  if_ae	jmp	#LR__2590
1b718     00 14 56 F2 | 	cmps	arg02, #0 wc
1b71c     0A FB 01 C6 |  if_b	mov	result1, arg02
1b720     09 FB 81 C1 |  if_b	sub	result1, arg01
1b724     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1b728     00 14 0E F2 | 	cmp	arg02, #0 wz
1b72c     00 00 40 AF 
1b730     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1b734     00 FA 05 A6 |  if_e	mov	result1, #0
1b738     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1b73c     01 FA 65 F6 | 	neg	result1, #1
1b740     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1b744                 | LR__2590
1b744     00 14 56 F2 | 	cmps	arg02, #0 wc
1b748     1C 00 90 3D |  if_ae	jmp	#LR__2591
1b74c     00 12 0E F2 | 	cmp	arg01, #0 wz
1b750     00 00 40 AF 
1b754     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1b758     00 FA 05 A6 |  if_e	mov	result1, #0
1b75c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1b760     01 FA 05 F6 | 	mov	result1, #1
1b764     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1b768                 | LR__2591
1b768     0A 13 82 F1 | 	sub	arg01, arg02
1b76c     09 FB 01 F6 | 	mov	result1, arg01
1b770                 | __system___float_cmp_ret
1b770     2D 00 64 FD | 	ret
1b774                 | 
1b774                 | __system___float_tointeger
1b774     02 4A 05 F6 | 	mov	COUNT_, #2
1b778     A8 00 A0 FD | 	call	#pushregs_
1b77c     50 00 B0 FD | 	call	#__system___float_Unpack
1b780     FF FF 7F FF 
1b784     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1b788     34 00 90 CD |  if_b	jmp	#LR__2600
1b78c     1F FC 55 F2 | 	cmps	result2, #31 wc
1b790     2C 00 90 3D |  if_ae	jmp	#LR__2600
1b794     02 FE 65 F0 | 	shl	result3, #2
1b798     1E 1E 06 F6 | 	mov	local01, #30
1b79c     FE 1E 82 F1 | 	sub	local01, result2
1b7a0     0F FF 41 F0 | 	shr	result3, local01
1b7a4     FF 20 02 F6 | 	mov	local02, result3
1b7a8     0A 21 02 F1 | 	add	local02, arg02
1b7ac     01 20 46 F0 | 	shr	local02, #1
1b7b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7b4     10 21 62 56 |  if_ne	neg	local02, local02
1b7b8     10 FB 01 F6 | 	mov	result1, local02
1b7bc     04 00 90 FD | 	jmp	#LR__2601
1b7c0                 | LR__2600
1b7c0     00 FA 05 F6 | 	mov	result1, #0
1b7c4                 | LR__2601
1b7c4     A7 F0 03 F6 | 	mov	ptra, fp
1b7c8     B2 00 A0 FD | 	call	#popregs_
1b7cc                 | __system___float_tointeger_ret
1b7cc     2D 00 64 FD | 	ret
1b7d0                 | 
1b7d0                 | __system___float_Unpack
1b7d0     09 01 02 F6 | 	mov	_var01, arg01
1b7d4     1F 00 46 F0 | 	shr	_var01, #31
1b7d8     09 03 02 F6 | 	mov	_var02, arg01
1b7dc     01 02 66 F0 | 	shl	_var02, #1
1b7e0     18 02 4E F0 | 	shr	_var02, #24 wz
1b7e4     17 13 06 F4 | 	bitl	arg01, #279
1b7e8     06 12 66 50 |  if_ne	shl	arg01, #6
1b7ec     1D 12 26 54 |  if_ne	bith	arg01, #29
1b7f0     1C 00 90 5D |  if_ne	jmp	#LR__2610
1b7f4     09 05 92 F7 | 	encod	_var03, arg01 wc
1b7f8     01 04 06 C1 |  if_b	add	_var03, #1
1b7fc     17 04 86 F1 | 	sub	_var03, #23
1b800     02 03 02 F6 | 	mov	_var02, _var03
1b804     07 FC 05 F6 | 	mov	result2, #7
1b808     02 FD 81 F1 | 	sub	result2, _var03
1b80c     FE 12 62 F0 | 	shl	arg01, result2
1b810                 | LR__2610
1b810     7F 02 86 F1 | 	sub	_var02, #127
1b814     09 FF 01 F6 | 	mov	result3, arg01
1b818     00 FB 01 F6 | 	mov	result1, _var01
1b81c     01 FD 01 F6 | 	mov	result2, _var02
1b820                 | __system___float_Unpack_ret
1b820     2D 00 64 FD | 	ret
1b824                 | 
1b824                 | __system___float_Pack
1b824     00 00 06 F6 | 	mov	_var01, #0
1b828     00 16 0E F2 | 	cmp	arg03, #0 wz
1b82c     8C 00 90 AD |  if_e	jmp	#LR__2621
1b830     0B 03 92 F7 | 	encod	_var02, arg03 wc
1b834     01 02 06 C1 |  if_b	add	_var02, #1
1b838     21 00 06 F6 | 	mov	_var01, #33
1b83c     01 01 82 F1 | 	sub	_var01, _var02
1b840     00 17 62 F0 | 	shl	arg03, _var01
1b844     03 02 06 F6 | 	mov	_var02, #3
1b848     00 03 82 F1 | 	sub	_var02, _var01
1b84c     01 15 02 F1 | 	add	arg02, _var02
1b850     0A 05 02 F6 | 	mov	_var03, arg02
1b854     00 17 06 F1 | 	add	arg03, #256
1b858     0B 03 02 F6 | 	mov	_var02, arg03
1b85c     FF 02 2E F5 | 	andn	_var02, #255 wz
1b860     01 04 06 A1 |  if_e	add	_var03, #1
1b864     7F 04 06 F1 | 	add	_var03, #127
1b868     FF FF 7F FF 
1b86c     E9 05 46 F3 | 	fges	_var03, ##-23
1b870     FF 04 66 F3 | 	fles	_var03, #255
1b874     01 04 56 F2 | 	cmps	_var03, #1 wc
1b878     1C 00 90 3D |  if_ae	jmp	#LR__2620
1b87c     01 16 46 F0 | 	shr	arg03, #1
1b880     1F 02 C6 F9 | 	decod	_var02, #31
1b884     0B 03 02 F1 | 	add	_var02, arg03
1b888     02 05 62 F6 | 	neg	_var03, _var03
1b88c     02 03 42 F0 | 	shr	_var02, _var03
1b890     01 17 02 F6 | 	mov	arg03, _var02
1b894     00 04 06 F6 | 	mov	_var03, #0
1b898                 | LR__2620
1b898     09 FB 01 F6 | 	mov	result1, arg01
1b89c     1F FA 65 F0 | 	shl	result1, #31
1b8a0     02 03 02 F6 | 	mov	_var02, _var03
1b8a4     17 02 66 F0 | 	shl	_var02, #23
1b8a8     01 FB 41 F5 | 	or	result1, _var02
1b8ac     0B 07 02 F6 | 	mov	_var04, arg03
1b8b0     09 06 46 F0 | 	shr	_var04, #9
1b8b4     03 FB 41 F5 | 	or	result1, _var04
1b8b8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1b8bc                 | LR__2621
1b8bc     00 FB 01 F6 | 	mov	result1, _var01
1b8c0                 | __system___float_Pack_ret
1b8c0     2D 00 64 FD | 	ret
1b8c4                 | 
1b8c4                 | __system___basic_print_float
1b8c4     05 4A 05 F6 | 	mov	COUNT_, #5
1b8c8     A8 00 A0 FD | 	call	#pushregs_
1b8cc     09 1F 02 F6 | 	mov	local01, arg01
1b8d0     0A 21 02 F6 | 	mov	local02, arg02
1b8d4     0B 23 0A F6 | 	mov	local03, arg03 wz
1b8d8     0C 25 02 F6 | 	mov	local04, arg04
1b8dc     14 00 90 5D |  if_ne	jmp	#LR__2630
1b8e0     23 24 0E F2 | 	cmp	local04, #35 wz
1b8e4     80 02 10 AF 
1b8e8     00 26 06 A6 |  if_e	mov	local05, ##537198592
1b8ec     1D 26 C6 59 |  if_ne	decod	local05, #29
1b8f0     13 23 02 F6 | 	mov	local03, local05
1b8f4                 | LR__2630
1b8f4     0F 13 02 F6 | 	mov	arg01, local01
1b8f8     40 27 B0 FD | 	call	#__system___gettxfunc
1b8fc     FD 26 0A F6 | 	mov	local05, result1 wz
1b900     00 FA 05 A6 |  if_e	mov	result1, #0
1b904     13 13 02 56 |  if_ne	mov	arg01, local05
1b908     11 15 02 56 |  if_ne	mov	arg02, local03
1b90c     10 17 02 56 |  if_ne	mov	arg03, local02
1b910     12 19 02 56 |  if_ne	mov	arg04, local04
1b914     90 E0 BF 5D |  if_ne	call	#__system___fmtfloat
1b918     A7 F0 03 F6 | 	mov	ptra, fp
1b91c     B2 00 A0 FD | 	call	#popregs_
1b920                 | __system___basic_print_float_ret
1b920     2D 00 64 FD | 	ret
1b924                 | 
1b924                 | __system____builtin_atoi
1b924     07 4A 05 F6 | 	mov	COUNT_, #7
1b928     A8 00 A0 FD | 	call	#pushregs_
1b92c                 | __system____builtin_atoi_enter
1b92c     09 1F 02 F6 | 	mov	local01, arg01
1b930     0A 21 02 F6 | 	mov	local02, arg02
1b934     00 22 06 F6 | 	mov	local03, #0
1b938     00 24 06 F6 | 	mov	local04, #0
1b93c     00 26 06 F6 | 	mov	local05, #0
1b940     97 08 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1b944                 | LR__2640
1b944     0F 29 C2 FA | 	rdbyte	local06, local01
1b948     20 28 0E F2 | 	cmp	local06, #32 wz
1b94c     01 1E 06 A1 |  if_e	add	local01, #1
1b950     F0 FF 9F AD |  if_e	jmp	#LR__2640
1b954                 | LR__2641
1b954     0F 2B C2 FA | 	rdbyte	local07, local01
1b958                 | LR__2642
1b958     2D 2A 0E F2 | 	cmp	local07, #45 wz
1b95c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1b960     18 00 90 5D |  if_ne	jmp	#LR__2643
1b964     01 1E 06 F1 | 	add	local01, #1
1b968     2D 2A 0E F2 | 	cmp	local07, #45 wz
1b96c     01 28 06 A6 |  if_e	mov	local06, #1
1b970     14 27 C2 A2 |  if_e	subr	local05, local06
1b974     0F 2B C2 FA | 	rdbyte	local07, local01
1b978     DC FF 9F FD | 	jmp	#LR__2642
1b97c                 | LR__2643
1b97c     97 48 48 FB | 	callpa	#(@LR__2651-@LR__2644)>>2,fcache_load_ptr_
1b980                 | LR__2644
1b980                 | LR__2645
1b980     0F 2B C2 FA | 	rdbyte	local07, local01
1b984     5F 2A 0E F2 | 	cmp	local07, #95 wz
1b988     01 1E 06 F1 | 	add	local01, #1
1b98c     F0 FF 9F AD |  if_e	jmp	#LR__2645
1b990     30 2A 0E F2 | 	cmp	local07, #48 wz
1b994     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1b998     00 24 06 A6 |  if_e	mov	local04, #0
1b99c     60 00 90 AD |  if_e	jmp	#LR__2650
1b9a0     31 2A 56 F2 | 	cmps	local07, #49 wc
1b9a4     18 00 90 CD |  if_b	jmp	#LR__2646
1b9a8     3A 2A 56 F2 | 	cmps	local07, #58 wc
1b9ac     15 25 02 C6 |  if_b	mov	local04, local07
1b9b0     30 24 86 C1 |  if_b	sub	local04, #48
1b9b4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1b9b8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1b9bc     40 00 90 CD |  if_b	jmp	#LR__2649
1b9c0                 | LR__2646
1b9c0     0B 20 56 F2 | 	cmps	local02, #11 wc
1b9c4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1b9c8     14 00 90 CD |  if_b	jmp	#LR__2647
1b9cc     67 2A 56 F2 | 	cmps	local07, #103 wc
1b9d0     61 2A 86 C1 |  if_b	sub	local07, #97
1b9d4     0A 24 06 C6 |  if_b	mov	local04, #10
1b9d8     15 25 02 C1 |  if_b	add	local04, local07
1b9dc     20 00 90 CD |  if_b	jmp	#LR__2648
1b9e0                 | LR__2647
1b9e0     0B 20 56 F2 | 	cmps	local02, #11 wc
1b9e4     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1b9e8     24 00 90 CD |  if_b	jmp	#LR__2652
1b9ec     47 2A 56 F2 | 	cmps	local07, #71 wc
1b9f0     41 2A 86 C1 |  if_b	sub	local07, #65
1b9f4     0A 24 06 C6 |  if_b	mov	local04, #10
1b9f8     15 25 02 C1 |  if_b	add	local04, local07
1b9fc     10 00 90 3D |  if_ae	jmp	#LR__2652
1ba00                 | LR__2648
1ba00                 | LR__2649
1ba00                 | LR__2650
1ba00     11 21 02 FD | 	qmul	local02, local03
1ba04     18 22 62 FD | 	getqx	local03
1ba08     12 23 02 F1 | 	add	local03, local04
1ba0c     70 FF 9F FD | 	jmp	#LR__2644
1ba10                 | LR__2651
1ba10                 | LR__2652
1ba10     00 20 0E F2 | 	cmp	local02, #0 wz
1ba14     64 00 90 5D |  if_ne	jmp	#LR__2658
1ba18     78 2A 0E F2 | 	cmp	local07, #120 wz
1ba1c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1ba20     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1ba24     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1ba28     14 00 90 5D |  if_ne	jmp	#LR__2653
1ba2c     0F 13 02 F6 | 	mov	arg01, local01
1ba30     10 14 06 F6 | 	mov	arg02, #16
1ba34     EC FE BF FD | 	call	#__system____builtin_atoi
1ba38     FD 22 02 F6 | 	mov	local03, result1
1ba3c     3C 00 90 FD | 	jmp	#LR__2657
1ba40                 | LR__2653
1ba40     62 2A 0E F2 | 	cmp	local07, #98 wz
1ba44     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1ba48     14 00 90 5D |  if_ne	jmp	#LR__2654
1ba4c     0F 13 02 F6 | 	mov	arg01, local01
1ba50     02 14 06 F6 | 	mov	arg02, #2
1ba54     CC FE BF FD | 	call	#__system____builtin_atoi
1ba58     FD 22 02 F6 | 	mov	local03, result1
1ba5c     1C 00 90 FD | 	jmp	#LR__2656
1ba60                 | LR__2654
1ba60     6F 2A 0E F2 | 	cmp	local07, #111 wz
1ba64     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1ba68     10 00 90 5D |  if_ne	jmp	#LR__2655
1ba6c     0F 13 02 F6 | 	mov	arg01, local01
1ba70     08 14 06 F6 | 	mov	arg02, #8
1ba74     AC FE BF FD | 	call	#__system____builtin_atoi
1ba78     FD 22 02 F6 | 	mov	local03, result1
1ba7c                 | LR__2655
1ba7c                 | LR__2656
1ba7c                 | LR__2657
1ba7c                 | LR__2658
1ba7c     00 26 0E F2 | 	cmp	local05, #0 wz
1ba80     11 23 62 56 |  if_ne	neg	local03, local03
1ba84     11 FB 01 F6 | 	mov	result1, local03
1ba88     A7 F0 03 F6 | 	mov	ptra, fp
1ba8c     B2 00 A0 FD | 	call	#popregs_
1ba90                 | __system____builtin_atoi_ret
1ba90     2D 00 64 FD | 	ret
1ba94                 | 
1ba94                 | __system____builtin_atof
1ba94     07 4A 05 F6 | 	mov	COUNT_, #7
1ba98     A8 00 A0 FD | 	call	#pushregs_
1ba9c     09 1F 02 F6 | 	mov	local01, arg01
1baa0     00 20 06 F6 | 	mov	local02, #0
1baa4     00 22 06 F6 | 	mov	local03, #0
1baa8     00 24 06 F6 | 	mov	local04, #0
1baac     00 26 06 F6 | 	mov	local05, #0
1bab0     97 08 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1bab4                 | LR__2660
1bab4     0F 17 C2 FA | 	rdbyte	arg03, local01
1bab8     20 16 0E F2 | 	cmp	arg03, #32 wz
1babc     01 1E 06 A1 |  if_e	add	local01, #1
1bac0     F0 FF 9F AD |  if_e	jmp	#LR__2660
1bac4                 | LR__2661
1bac4     0F 29 C2 FA | 	rdbyte	local06, local01
1bac8                 | LR__2662
1bac8     2B 28 0E F2 | 	cmp	local06, #43 wz
1bacc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1bad0     14 00 90 5D |  if_ne	jmp	#LR__2663
1bad4     2D 28 0E F2 | 	cmp	local06, #45 wz
1bad8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1badc     01 1E 06 F1 | 	add	local01, #1
1bae0     0F 29 C2 FA | 	rdbyte	local06, local01
1bae4     E0 FF 9F FD | 	jmp	#LR__2662
1bae8                 | LR__2663
1bae8                 | LR__2664
1bae8     97 08 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1baec                 | LR__2665
1baec     0F 29 C2 FA | 	rdbyte	local06, local01
1baf0     5F 28 0E F2 | 	cmp	local06, #95 wz
1baf4     01 1E 06 F1 | 	add	local01, #1
1baf8     F0 FF 9F AD |  if_e	jmp	#LR__2665
1bafc                 | LR__2666
1bafc     00 28 0E F2 | 	cmp	local06, #0 wz
1bb00     5C 00 90 AD |  if_e	jmp	#LR__2668
1bb04     30 28 56 F2 | 	cmps	local06, #48 wc
1bb08     44 00 90 CD |  if_b	jmp	#LR__2667
1bb0c     3A 28 56 F2 | 	cmps	local06, #58 wc
1bb10     3C 00 90 3D |  if_ae	jmp	#LR__2667
1bb14     10 13 02 F6 | 	mov	arg01, local02
1bb18     00 90 20 FF 
1bb1c     00 14 06 F6 | 	mov	arg02, ##1092616192
1bb20     88 F7 BF FD | 	call	#__system___float_mul
1bb24     FD 20 02 F6 | 	mov	local02, result1
1bb28     30 28 86 F1 | 	sub	local06, #48
1bb2c     14 13 02 F6 | 	mov	arg01, local06
1bb30     74 F3 BF FD | 	call	#__system___float_fromuns
1bb34     FD 14 02 F6 | 	mov	arg02, result1
1bb38     10 13 02 F6 | 	mov	arg01, local02
1bb3c     9C F3 BF FD | 	call	#__system___float_add
1bb40     FD 20 02 F6 | 	mov	local02, result1
1bb44     00 26 0E F2 | 	cmp	local05, #0 wz
1bb48     01 22 86 51 |  if_ne	sub	local03, #1
1bb4c     98 FF 9F FD | 	jmp	#LR__2664
1bb50                 | LR__2667
1bb50     2E 28 0E F2 | 	cmp	local06, #46 wz
1bb54     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1bb58     01 26 06 A6 |  if_e	mov	local05, #1
1bb5c     88 FF 9F AD |  if_e	jmp	#LR__2664
1bb60                 | LR__2668
1bb60     45 28 0E F2 | 	cmp	local06, #69 wz
1bb64     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1bb68     18 00 90 5D |  if_ne	jmp	#LR__2669
1bb6c     0F 13 02 F6 | 	mov	arg01, local01
1bb70     00 14 06 F6 | 	mov	arg02, #0
1bb74     AC FD BF FD | 	call	#__system____builtin_atoi
1bb78     11 FB 01 F1 | 	add	result1, local03
1bb7c     FD 2A 02 F6 | 	mov	local07, result1
1bb80     04 00 90 FD | 	jmp	#LR__2670
1bb84                 | LR__2669
1bb84     11 2B 02 F6 | 	mov	local07, local03
1bb88                 | LR__2670
1bb88     15 17 02 F6 | 	mov	arg03, local07
1bb8c     10 13 02 F6 | 	mov	arg01, local02
1bb90     00 90 20 FF 
1bb94     00 14 06 F6 | 	mov	arg02, ##1092616192
1bb98     BC 06 B0 FD | 	call	#__system___float_pow_n
1bb9c     12 FB 61 F5 | 	xor	result1, local04
1bba0     A7 F0 03 F6 | 	mov	ptra, fp
1bba4     B2 00 A0 FD | 	call	#popregs_
1bba8                 | __system____builtin_atof_ret
1bba8     2D 00 64 FD | 	ret
1bbac                 | 
1bbac                 | __system____builtin_ilogb
1bbac     20 FC BF FD | 	call	#__system___float_Unpack
1bbb0     00 FE 0D F2 | 	cmp	result3, #0 wz
1bbb4     00 00 40 AF 
1bbb8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1bbbc     24 00 90 AD |  if_e	jmp	#LR__2681
1bbc0     80 FC 0D F2 | 	cmp	result2, #128 wz
1bbc4     18 00 90 5D |  if_ne	jmp	#LR__2680
1bbc8     00 00 10 FF 
1bbcc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1bbd0     1E FA CD A9 |  if_e	bmask	result1, #30
1bbd4     0C 00 90 AD |  if_e	jmp	#LR__2681
1bbd8     1F FA C5 F9 | 	decod	result1, #31
1bbdc     04 00 90 FD | 	jmp	#LR__2681
1bbe0                 | LR__2680
1bbe0     FE FA 01 F6 | 	mov	result1, result2
1bbe4                 | LR__2681
1bbe4                 | __system____builtin_ilogb_ret
1bbe4     2D 00 64 FD | 	ret
1bbe8                 | 
1bbe8                 | __system____builtin_sinf
1bbe8     03 4A 05 F6 | 	mov	COUNT_, #3
1bbec     A8 00 A0 FD | 	call	#pushregs_
1bbf0     09 1F 02 F6 | 	mov	local01, arg01
1bbf4     87 64 20 FF 
1bbf8     DB 15 06 F6 | 	mov	arg02, ##1086918619
1bbfc     B0 F8 BF FD | 	call	#__system___float_div
1bc00     FD 12 02 F6 | 	mov	arg01, result1
1bc04     00 14 06 F6 | 	mov	arg02, #0
1bc08     68 FB BF FD | 	call	#__system___float_tointeger
1bc0c     FD 16 0A F6 | 	mov	arg03, result1 wz
1bc10     44 00 90 AD |  if_e	jmp	#LR__2690
1bc14     0B 13 52 F6 | 	abs	arg01, arg03 wc
1bc18     1F 20 C6 C9 |  if_b	decod	local02, #31
1bc1c     00 20 06 36 |  if_ae	mov	local02, #0
1bc20     84 F2 BF FD | 	call	#__system___float_fromuns
1bc24     10 FB 61 F5 | 	xor	result1, local02
1bc28     FD 12 02 F6 | 	mov	arg01, result1
1bc2c     1E 14 C6 F9 | 	decod	arg02, #30
1bc30     78 F6 BF FD | 	call	#__system___float_mul
1bc34     FD 12 02 F6 | 	mov	arg01, result1
1bc38     87 24 20 FF 
1bc3c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1bc40     68 F6 BF FD | 	call	#__system___float_mul
1bc44     FD 14 02 F6 | 	mov	arg02, result1
1bc48     0F 13 02 F6 | 	mov	arg01, local01
1bc4c     1F 14 E6 F4 | 	bitnot	arg02, #31
1bc50     88 F2 BF FD | 	call	#__system___float_add
1bc54     FD 1E 02 F6 | 	mov	local01, result1
1bc58                 | LR__2690
1bc58     0F 13 02 F6 | 	mov	arg01, local01
1bc5c     66 E6 1E FF 
1bc60     CD 14 06 F6 | 	mov	arg02, ##1036831949
1bc64     01 16 06 F6 | 	mov	arg03, #1
1bc68     74 FA BF FD | 	call	#__system___float_cmp
1bc6c     00 FA 55 F2 | 	cmps	result1, #0 wc
1bc70     5C 00 90 3D |  if_ae	jmp	#LR__2691
1bc74     0F 13 02 F6 | 	mov	arg01, local01
1bc78     66 E6 5E FF 
1bc7c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1bc80     01 16 66 F6 | 	neg	arg03, #1
1bc84     58 FA BF FD | 	call	#__system___float_cmp
1bc88     01 FA 55 F2 | 	cmps	result1, #1 wc
1bc8c     40 00 90 CD |  if_b	jmp	#LR__2691
1bc90     0F 13 02 F6 | 	mov	arg01, local01
1bc94     0F 15 02 F6 | 	mov	arg02, local01
1bc98     10 F6 BF FD | 	call	#__system___float_mul
1bc9c     FD 12 02 F6 | 	mov	arg01, result1
1bca0     0F 15 02 F6 | 	mov	arg02, local01
1bca4     04 F6 BF FD | 	call	#__system___float_mul
1bca8     FD 12 02 F6 | 	mov	arg01, result1
1bcac     00 60 20 FF 
1bcb0     00 14 06 F6 | 	mov	arg02, ##1086324736
1bcb4     F8 F7 BF FD | 	call	#__system___float_div
1bcb8     FD 14 02 F6 | 	mov	arg02, result1
1bcbc     0F 13 02 F6 | 	mov	arg01, local01
1bcc0     1F 14 E6 F4 | 	bitnot	arg02, #31
1bcc4     14 F2 BF FD | 	call	#__system___float_add
1bcc8     FD 22 02 F6 | 	mov	local03, result1
1bccc     54 00 90 FD | 	jmp	#LR__2692
1bcd0                 | LR__2691
1bcd0     0F 13 02 F6 | 	mov	arg01, local01
1bcd4     7C 91 26 FF 
1bcd8     83 15 06 F6 | 	mov	arg02, ##1294137731
1bcdc     CC F5 BF FD | 	call	#__system___float_mul
1bce0     FD 12 02 F6 | 	mov	arg01, result1
1bce4     00 14 06 F6 | 	mov	arg02, #0
1bce8     88 FA BF FD | 	call	#__system___float_tointeger
1bcec     02 FA 65 F0 | 	shl	result1, #2
1bcf0     00 00 A0 FF 
1bcf4     FD 00 48 FD | 	qrotate	##1073741824, result1
1bcf8     19 12 62 FD | 	getqy	arg01
1bcfc     09 13 52 F6 | 	abs	arg01, arg01 wc
1bd00     1F 20 C6 C9 |  if_b	decod	local02, #31
1bd04     00 20 06 36 |  if_ae	mov	local02, #0
1bd08     9C F1 BF FD | 	call	#__system___float_fromuns
1bd0c     10 FB 61 F5 | 	xor	result1, local02
1bd10     FD 12 02 F6 | 	mov	arg01, result1
1bd14     00 40 27 FF 
1bd18     00 14 06 F6 | 	mov	arg02, ##1317011456
1bd1c     90 F7 BF FD | 	call	#__system___float_div
1bd20     FD 22 02 F6 | 	mov	local03, result1
1bd24                 | LR__2692
1bd24     11 FB 01 F6 | 	mov	result1, local03
1bd28     A7 F0 03 F6 | 	mov	ptra, fp
1bd2c     B2 00 A0 FD | 	call	#popregs_
1bd30                 | __system____builtin_sinf_ret
1bd30     2D 00 64 FD | 	ret
1bd34                 | 
1bd34                 | __system____builtin_tanf
1bd34     02 4A 05 F6 | 	mov	COUNT_, #2
1bd38     A8 00 A0 FD | 	call	#pushregs_
1bd3c     09 1F 02 F6 | 	mov	local01, arg01
1bd40     A4 FE BF FD | 	call	#__system____builtin_sinf
1bd44     FD 20 02 F6 | 	mov	local02, result1
1bd48     0F 15 02 F6 | 	mov	arg02, local01
1bd4c     87 E4 1F FF 
1bd50     DB 13 06 F6 | 	mov	arg01, ##1070141403
1bd54     1F 14 E6 F4 | 	bitnot	arg02, #31
1bd58     80 F1 BF FD | 	call	#__system___float_add
1bd5c     FD 12 02 F6 | 	mov	arg01, result1
1bd60     84 FE BF FD | 	call	#__system____builtin_sinf
1bd64     FD 14 02 F6 | 	mov	arg02, result1
1bd68     10 13 02 F6 | 	mov	arg01, local02
1bd6c     40 F7 BF FD | 	call	#__system___float_div
1bd70     A7 F0 03 F6 | 	mov	ptra, fp
1bd74     B2 00 A0 FD | 	call	#popregs_
1bd78                 | __system____builtin_tanf_ret
1bd78     2D 00 64 FD | 	ret
1bd7c                 | 
1bd7c                 | __system____builtin_asinf
1bd7c     01 4A 05 F6 | 	mov	COUNT_, #1
1bd80     A8 00 A0 FD | 	call	#pushregs_
1bd84     09 1F 02 F6 | 	mov	local01, arg01
1bd88     0F 15 02 F6 | 	mov	arg02, local01
1bd8c     0F 13 02 F6 | 	mov	arg01, local01
1bd90     18 F5 BF FD | 	call	#__system___float_mul
1bd94     FD 14 02 F6 | 	mov	arg02, result1
1bd98     00 C0 1F FF 
1bd9c     00 12 06 F6 | 	mov	arg01, ##1065353216
1bda0     1F 14 E6 F4 | 	bitnot	arg02, #31
1bda4     34 F1 BF FD | 	call	#__system___float_add
1bda8     FD 12 02 F6 | 	mov	arg01, result1
1bdac     24 F4 BF FD | 	call	#__system___float_sqrt
1bdb0     FD 14 02 F6 | 	mov	arg02, result1
1bdb4     0F 13 02 F6 | 	mov	arg01, local01
1bdb8     58 00 B0 FD | 	call	#__system____builtin_atan2f
1bdbc     A7 F0 03 F6 | 	mov	ptra, fp
1bdc0     B2 00 A0 FD | 	call	#popregs_
1bdc4                 | __system____builtin_asinf_ret
1bdc4     2D 00 64 FD | 	ret
1bdc8                 | 
1bdc8                 | __system____builtin_acosf
1bdc8     01 4A 05 F6 | 	mov	COUNT_, #1
1bdcc     A8 00 A0 FD | 	call	#pushregs_
1bdd0     09 1F 02 F6 | 	mov	local01, arg01
1bdd4     0F 15 02 F6 | 	mov	arg02, local01
1bdd8     0F 13 02 F6 | 	mov	arg01, local01
1bddc     CC F4 BF FD | 	call	#__system___float_mul
1bde0     FD 14 02 F6 | 	mov	arg02, result1
1bde4     00 C0 1F FF 
1bde8     00 12 06 F6 | 	mov	arg01, ##1065353216
1bdec     1F 14 E6 F4 | 	bitnot	arg02, #31
1bdf0     E8 F0 BF FD | 	call	#__system___float_add
1bdf4     FD 12 02 F6 | 	mov	arg01, result1
1bdf8     D8 F3 BF FD | 	call	#__system___float_sqrt
1bdfc     FD 12 02 F6 | 	mov	arg01, result1
1be00     0F 15 02 F6 | 	mov	arg02, local01
1be04     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1be08     A7 F0 03 F6 | 	mov	ptra, fp
1be0c     B2 00 A0 FD | 	call	#popregs_
1be10                 | __system____builtin_acosf_ret
1be10     2D 00 64 FD | 	ret
1be14                 | 
1be14                 | __system____builtin_atan2f
1be14     04 4A 05 F6 | 	mov	COUNT_, #4
1be18     A8 00 A0 FD | 	call	#pushregs_
1be1c     09 1F 02 F6 | 	mov	local01, arg01
1be20     0A 21 02 F6 | 	mov	local02, arg02
1be24     0F 13 02 F6 | 	mov	arg01, local01
1be28     00 14 06 F6 | 	mov	arg02, #0
1be2c     01 16 06 F6 | 	mov	arg03, #1
1be30     AC F8 BF FD | 	call	#__system___float_cmp
1be34     00 FA 0D F2 | 	cmp	result1, #0 wz
1be38     28 00 90 5D |  if_ne	jmp	#LR__2700
1be3c     10 13 02 F6 | 	mov	arg01, local02
1be40     00 14 06 F6 | 	mov	arg02, #0
1be44     01 16 06 F6 | 	mov	arg03, #1
1be48     94 F8 BF FD | 	call	#__system___float_cmp
1be4c     00 FA 55 F2 | 	cmps	result1, #0 wc
1be50     87 24 60 CF 
1be54     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1be58     DC 00 90 CD |  if_b	jmp	#LR__2701
1be5c     00 FA 05 F6 | 	mov	result1, #0
1be60     D4 00 90 FD | 	jmp	#LR__2701
1be64                 | LR__2700
1be64     10 13 02 F6 | 	mov	arg01, local02
1be68     10 15 02 F6 | 	mov	arg02, local02
1be6c     3C F4 BF FD | 	call	#__system___float_mul
1be70     FD 22 02 F6 | 	mov	local03, result1
1be74     0F 13 02 F6 | 	mov	arg01, local01
1be78     0F 15 02 F6 | 	mov	arg02, local01
1be7c     2C F4 BF FD | 	call	#__system___float_mul
1be80     FD 14 02 F6 | 	mov	arg02, result1
1be84     11 13 02 F6 | 	mov	arg01, local03
1be88     50 F0 BF FD | 	call	#__system___float_add
1be8c     FD 12 02 F6 | 	mov	arg01, result1
1be90     40 F3 BF FD | 	call	#__system___float_sqrt
1be94     FD 22 02 F6 | 	mov	local03, result1
1be98     10 13 02 F6 | 	mov	arg01, local02
1be9c     11 15 02 F6 | 	mov	arg02, local03
1bea0     0C F6 BF FD | 	call	#__system___float_div
1bea4     FD 20 02 F6 | 	mov	local02, result1
1bea8     0F 13 02 F6 | 	mov	arg01, local01
1beac     11 15 02 F6 | 	mov	arg02, local03
1beb0     FC F5 BF FD | 	call	#__system___float_div
1beb4     FD 1E 02 F6 | 	mov	local01, result1
1beb8     00 40 27 FF 
1bebc     00 12 06 F6 | 	mov	arg01, ##1317011456
1bec0     10 15 02 F6 | 	mov	arg02, local02
1bec4     E4 F3 BF FD | 	call	#__system___float_mul
1bec8     FD 12 02 F6 | 	mov	arg01, result1
1becc     00 14 06 F6 | 	mov	arg02, #0
1bed0     A0 F8 BF FD | 	call	#__system___float_tointeger
1bed4     FD 22 02 F6 | 	mov	local03, result1
1bed8     00 40 27 FF 
1bedc     00 12 06 F6 | 	mov	arg01, ##1317011456
1bee0     0F 15 02 F6 | 	mov	arg02, local01
1bee4     C4 F3 BF FD | 	call	#__system___float_mul
1bee8     FD 12 02 F6 | 	mov	arg01, result1
1beec     00 14 06 F6 | 	mov	arg02, #0
1bef0     80 F8 BF FD | 	call	#__system___float_tointeger
1bef4     FD 22 52 FD | 	qvector	local03, result1
1bef8     87 24 20 FF 
1befc     DB 23 06 F6 | 	mov	local03, ##1078530011
1bf00     19 12 62 FD | 	getqy	arg01
1bf04     01 12 C6 F0 | 	sar	arg01, #1
1bf08     09 13 52 F6 | 	abs	arg01, arg01 wc
1bf0c     1F 24 C6 C9 |  if_b	decod	local04, #31
1bf10     00 24 06 36 |  if_ae	mov	local04, #0
1bf14     90 EF BF FD | 	call	#__system___float_fromuns
1bf18     12 FB 61 F5 | 	xor	result1, local04
1bf1c     FD 12 02 F6 | 	mov	arg01, result1
1bf20     00 40 27 FF 
1bf24     00 14 06 F6 | 	mov	arg02, ##1317011456
1bf28     84 F5 BF FD | 	call	#__system___float_div
1bf2c     FD 14 02 F6 | 	mov	arg02, result1
1bf30     11 13 02 F6 | 	mov	arg01, local03
1bf34     74 F3 BF FD | 	call	#__system___float_mul
1bf38                 | LR__2701
1bf38     A7 F0 03 F6 | 	mov	ptra, fp
1bf3c     B2 00 A0 FD | 	call	#popregs_
1bf40                 | __system____builtin_atan2f_ret
1bf40     2D 00 64 FD | 	ret
1bf44                 | 
1bf44                 | __system____builtin_exp2f
1bf44     04 4A 05 F6 | 	mov	COUNT_, #4
1bf48     A8 00 A0 FD | 	call	#pushregs_
1bf4c     09 1F 02 F6 | 	mov	local01, arg01
1bf50     00 7F 21 FF 
1bf54     00 14 06 F6 | 	mov	arg02, ##1123942400
1bf58     01 16 66 F6 | 	neg	arg03, #1
1bf5c     80 F7 BF FD | 	call	#__system___float_cmp
1bf60     00 FA 55 F2 | 	cmps	result1, #0 wc
1bf64     00 C0 3F 3F 
1bf68     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1bf6c     DC 00 90 3D |  if_ae	jmp	#LR__2711
1bf70     0F 13 02 F6 | 	mov	arg01, local01
1bf74     00 7F 61 FF 
1bf78     00 14 06 F6 | 	mov	arg02, ##-1023541248
1bf7c     01 16 06 F6 | 	mov	arg03, #1
1bf80     5C F7 BF FD | 	call	#__system___float_cmp
1bf84     00 FA 55 F2 | 	cmps	result1, #0 wc
1bf88     00 FA 05 C6 |  if_b	mov	result1, #0
1bf8c     BC 00 90 CD |  if_b	jmp	#LR__2711
1bf90     0F 13 02 F6 | 	mov	arg01, local01
1bf94     00 14 06 F6 | 	mov	arg02, #0
1bf98     D8 F7 BF FD | 	call	#__system___float_tointeger
1bf9c     FD 20 02 F6 | 	mov	local02, result1
1bfa0     10 13 52 F6 | 	abs	arg01, local02 wc
1bfa4     1F 22 C6 C9 |  if_b	decod	local03, #31
1bfa8     00 22 06 36 |  if_ae	mov	local03, #0
1bfac     F8 EE BF FD | 	call	#__system___float_fromuns
1bfb0     11 FB 61 F5 | 	xor	result1, local03
1bfb4     FD 14 02 F6 | 	mov	arg02, result1
1bfb8     0F 13 02 F6 | 	mov	arg01, local01
1bfbc     1F 14 E6 F4 | 	bitnot	arg02, #31
1bfc0     18 EF BF FD | 	call	#__system___float_add
1bfc4     FD 24 02 F6 | 	mov	local04, result1
1bfc8     12 13 02 F6 | 	mov	arg01, local04
1bfcc     00 14 06 F6 | 	mov	arg02, #0
1bfd0     01 16 06 F6 | 	mov	arg03, #1
1bfd4     08 F7 BF FD | 	call	#__system___float_cmp
1bfd8     00 FA 55 F2 | 	cmps	result1, #0 wc
1bfdc     18 00 90 3D |  if_ae	jmp	#LR__2710
1bfe0     12 13 02 F6 | 	mov	arg01, local04
1bfe4     00 C0 1F FF 
1bfe8     00 14 06 F6 | 	mov	arg02, ##1065353216
1bfec     EC EE BF FD | 	call	#__system___float_add
1bff0     FD 24 02 F6 | 	mov	local04, result1
1bff4     01 20 86 F1 | 	sub	local02, #1
1bff8                 | LR__2710
1bff8     7F 20 06 F1 | 	add	local02, #127
1bffc     17 20 66 F0 | 	shl	local02, #23
1c000     12 13 02 F6 | 	mov	arg01, local04
1c004     00 80 26 FF 
1c008     00 14 06 F6 | 	mov	arg02, ##1291845632
1c00c     9C F2 BF FD | 	call	#__system___float_mul
1c010     FD 12 02 F6 | 	mov	arg01, result1
1c014     00 14 06 F6 | 	mov	arg02, #0
1c018     58 F7 BF FD | 	call	#__system___float_tointeger
1c01c     FD 24 0A F6 | 	mov	local04, result1 wz
1c020     10 FB 01 A6 |  if_e	mov	result1, local02
1c024     24 00 90 AD |  if_e	jmp	#LR__2711
1c028     3E 24 26 F4 | 	bith	local04, #62
1c02c     0F 24 62 FD | 	qexp	local04
1c030     10 13 02 F6 | 	mov	arg01, local02
1c034     18 14 62 FD | 	getqx	arg02
1c038     01 14 06 F1 | 	add	arg02, #1
1c03c     01 14 46 F0 | 	shr	arg02, #1
1c040     00 80 1F FF 
1c044     00 14 06 F1 | 	add	arg02, ##1056964608
1c048     60 F2 BF FD | 	call	#__system___float_mul
1c04c                 | LR__2711
1c04c     A7 F0 03 F6 | 	mov	ptra, fp
1c050     B2 00 A0 FD | 	call	#popregs_
1c054                 | __system____builtin_exp2f_ret
1c054     2D 00 64 FD | 	ret
1c058                 | 
1c058                 | __system____builtin_log2f
1c058     06 4A 05 F6 | 	mov	COUNT_, #6
1c05c     A8 00 A0 FD | 	call	#pushregs_
1c060     09 1F 02 F6 | 	mov	local01, arg01
1c064     09 21 0A F6 | 	mov	local02, arg01 wz
1c068     00 00 40 5F 
1c06c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1c070     00 40 00 AF 
1c074     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c078     08 01 90 AD |  if_e	jmp	#LR__2724
1c07c     00 20 56 F2 | 	cmps	local02, #0 wc
1c080     00 E0 3F CF 
1c084     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c088     F8 00 90 CD |  if_b	jmp	#LR__2724
1c08c     0F 13 02 F6 | 	mov	arg01, local01
1c090     00 90 20 FF 
1c094     00 14 06 F6 | 	mov	arg02, ##1092616192
1c098     01 16 06 F6 | 	mov	arg03, #1
1c09c     40 F6 BF FD | 	call	#__system___float_cmp
1c0a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c0a4     4D 2A 20 AF 
1c0a8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1c0ac     D4 00 90 AD |  if_e	jmp	#LR__2724
1c0b0     0F 13 02 F6 | 	mov	arg01, local01
1c0b4     FC 16 20 FF 
1c0b8     54 14 06 F6 | 	mov	arg02, ##1076754516
1c0bc     01 16 06 F6 | 	mov	arg03, #1
1c0c0     1C F6 BF FD | 	call	#__system___float_cmp
1c0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c0c8     55 DC 1F AF 
1c0cc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1c0d0     B0 00 90 AD |  if_e	jmp	#LR__2724
1c0d4     10 23 02 F6 | 	mov	local03, local02
1c0d8     17 22 46 F0 | 	shr	local03, #23
1c0dc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1c0e0     17 21 06 F4 | 	bitl	local02, #279
1c0e4     10 25 02 F6 | 	mov	local04, local02
1c0e8     FF 22 0E F2 | 	cmp	local03, #255 wz
1c0ec     1C 00 90 5D |  if_ne	jmp	#LR__2720
1c0f0     00 24 0E F2 | 	cmp	local04, #0 wz
1c0f4     00 C0 3F 5F 
1c0f8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1c0fc     00 E0 3F AF 
1c100     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1c104     13 FB 01 F6 | 	mov	result1, local05
1c108     78 00 90 FD | 	jmp	#LR__2724
1c10c                 | LR__2720
1c10c     00 22 0E F2 | 	cmp	local03, #0 wz
1c110     17 24 26 54 |  if_ne	bith	local04, #23
1c114     7F 22 86 51 |  if_ne	sub	local03, #127
1c118     28 00 90 5D |  if_ne	jmp	#LR__2723
1c11c     00 24 0E F2 | 	cmp	local04, #0 wz
1c120     00 40 00 AF 
1c124     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1c128     58 00 90 AD |  if_e	jmp	#LR__2724
1c12c     7E 22 66 F6 | 	neg	local03, #126
1c130     97 08 48 FB | 	callpa	#(@LR__2722-@LR__2721)>>2,fcache_load_ptr_
1c134                 | LR__2721
1c134     17 24 2E F4 | 	testbn	local04, #23 wz
1c138     01 24 66 A0 |  if_e	shl	local04, #1
1c13c     01 22 06 A1 |  if_e	add	local03, #1
1c140     F0 FF 9F AD |  if_e	jmp	#LR__2721
1c144                 | LR__2722
1c144                 | LR__2723
1c144     0E 24 62 FD | 	qlog	local04
1c148     01 22 86 F1 | 	sub	local03, #1
1c14c     11 13 52 F6 | 	abs	arg01, local03 wc
1c150     1F 28 C6 C9 |  if_b	decod	local06, #31
1c154     00 28 06 36 |  if_ae	mov	local06, #0
1c158     18 26 62 FD | 	getqx	local05
1c15c     9B 26 06 F4 | 	bitl	local05, #155
1c160     08 26 06 F1 | 	add	local05, #8
1c164     04 26 46 F0 | 	shr	local05, #4
1c168     00 C0 1F FF 
1c16c     00 26 06 F1 | 	add	local05, ##1065353216
1c170     34 ED BF FD | 	call	#__system___float_fromuns
1c174     14 FB 61 F5 | 	xor	result1, local06
1c178     FD 14 02 F6 | 	mov	arg02, result1
1c17c     13 13 02 F6 | 	mov	arg01, local05
1c180     58 ED BF FD | 	call	#__system___float_add
1c184                 | LR__2724
1c184     A7 F0 03 F6 | 	mov	ptra, fp
1c188     B2 00 A0 FD | 	call	#popregs_
1c18c                 | __system____builtin_log2f_ret
1c18c     2D 00 64 FD | 	ret
1c190                 | 
1c190                 | __system____builtin_powf
1c190     04 4A 05 F6 | 	mov	COUNT_, #4
1c194     A8 00 A0 FD | 	call	#pushregs_
1c198     09 1F 02 F6 | 	mov	local01, arg01
1c19c     0A 21 02 F6 | 	mov	local02, arg02
1c1a0     10 13 02 F6 | 	mov	arg01, local02
1c1a4     00 14 06 F6 | 	mov	arg02, #0
1c1a8     C8 F5 BF FD | 	call	#__system___float_tointeger
1c1ac     FD 22 02 F6 | 	mov	local03, result1
1c1b0     11 13 52 F6 | 	abs	arg01, local03 wc
1c1b4     1F 24 C6 C9 |  if_b	decod	local04, #31
1c1b8     00 24 06 36 |  if_ae	mov	local04, #0
1c1bc     E8 EC BF FD | 	call	#__system___float_fromuns
1c1c0     12 FB 61 F5 | 	xor	result1, local04
1c1c4     FD 12 02 F6 | 	mov	arg01, result1
1c1c8     10 15 02 F6 | 	mov	arg02, local02
1c1cc     01 16 06 F6 | 	mov	arg03, #1
1c1d0     0C F5 BF FD | 	call	#__system___float_cmp
1c1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c1d8     18 00 90 5D |  if_ne	jmp	#LR__2730
1c1dc     00 C0 1F FF 
1c1e0     00 12 06 F6 | 	mov	arg01, ##1065353216
1c1e4     0F 15 02 F6 | 	mov	arg02, local01
1c1e8     11 17 02 F6 | 	mov	arg03, local03
1c1ec     68 00 B0 FD | 	call	#__system___float_pow_n
1c1f0     58 00 90 FD | 	jmp	#LR__2731
1c1f4                 | LR__2730
1c1f4     0F 13 02 F6 | 	mov	arg01, local01
1c1f8     00 14 06 F6 | 	mov	arg02, #0
1c1fc     01 16 06 F6 | 	mov	arg03, #1
1c200     DC F4 BF FD | 	call	#__system___float_cmp
1c204     00 FA 55 F2 | 	cmps	result1, #0 wc
1c208     00 E0 3F CF 
1c20c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1c210     38 00 90 CD |  if_b	jmp	#LR__2731
1c214     0F 13 02 F6 | 	mov	arg01, local01
1c218     00 14 06 F6 | 	mov	arg02, #0
1c21c     01 16 06 F6 | 	mov	arg03, #1
1c220     BC F4 BF FD | 	call	#__system___float_cmp
1c224     00 FA 0D F2 | 	cmp	result1, #0 wz
1c228     00 FA 05 A6 |  if_e	mov	result1, #0
1c22c     1C 00 90 AD |  if_e	jmp	#LR__2731
1c230     0F 13 02 F6 | 	mov	arg01, local01
1c234     20 FE BF FD | 	call	#__system____builtin_log2f
1c238     FD 12 02 F6 | 	mov	arg01, result1
1c23c     10 15 02 F6 | 	mov	arg02, local02
1c240     68 F0 BF FD | 	call	#__system___float_mul
1c244     FD 12 02 F6 | 	mov	arg01, result1
1c248     F8 FC BF FD | 	call	#__system____builtin_exp2f
1c24c                 | LR__2731
1c24c     A7 F0 03 F6 | 	mov	ptra, fp
1c250     B2 00 A0 FD | 	call	#popregs_
1c254                 | __system____builtin_powf_ret
1c254     2D 00 64 FD | 	ret
1c258                 | 
1c258                 | __system___float_pow_n
1c258     05 4A 05 F6 | 	mov	COUNT_, #5
1c25c     A8 00 A0 FD | 	call	#pushregs_
1c260     09 1F 02 F6 | 	mov	local01, arg01
1c264     0A 21 02 F6 | 	mov	local02, arg02
1c268     0B 23 02 F6 | 	mov	local03, arg03
1c26c     00 22 56 F2 | 	cmps	local03, #0 wc
1c270     18 00 90 3D |  if_ae	jmp	#LR__2740
1c274     01 24 06 F6 | 	mov	local04, #1
1c278     11 23 62 F6 | 	neg	local03, local03
1c27c     00 22 56 F2 | 	cmps	local03, #0 wc
1c280     00 FA 05 C6 |  if_b	mov	result1, #0
1c284     94 00 90 CD |  if_b	jmp	#LR__2748
1c288     04 00 90 FD | 	jmp	#LR__2741
1c28c                 | LR__2740
1c28c     00 24 06 F6 | 	mov	local04, #0
1c290                 | LR__2741
1c290     00 C0 1F FF 
1c294     00 26 06 F6 | 	mov	local05, ##1065353216
1c298                 | LR__2742
1c298     01 22 56 F2 | 	cmps	local03, #1 wc
1c29c     30 00 90 CD |  if_b	jmp	#LR__2744
1c2a0     01 22 CE F7 | 	test	local03, #1 wz
1c2a4     10 00 90 AD |  if_e	jmp	#LR__2743
1c2a8     13 13 02 F6 | 	mov	arg01, local05
1c2ac     10 15 02 F6 | 	mov	arg02, local02
1c2b0     F8 EF BF FD | 	call	#__system___float_mul
1c2b4     FD 26 02 F6 | 	mov	local05, result1
1c2b8                 | LR__2743
1c2b8     01 22 C6 F0 | 	sar	local03, #1
1c2bc     10 13 02 F6 | 	mov	arg01, local02
1c2c0     10 15 02 F6 | 	mov	arg02, local02
1c2c4     E4 EF BF FD | 	call	#__system___float_mul
1c2c8     FD 20 02 F6 | 	mov	local02, result1
1c2cc     C8 FF 9F FD | 	jmp	#LR__2742
1c2d0                 | LR__2744
1c2d0     00 24 0E F2 | 	cmp	local04, #0 wz
1c2d4     14 00 90 AD |  if_e	jmp	#LR__2745
1c2d8     0F 13 02 F6 | 	mov	arg01, local01
1c2dc     13 15 02 F6 | 	mov	arg02, local05
1c2e0     CC F1 BF FD | 	call	#__system___float_div
1c2e4     FD 26 02 F6 | 	mov	local05, result1
1c2e8     2C 00 90 FD | 	jmp	#LR__2747
1c2ec                 | LR__2745
1c2ec     0F 13 02 F6 | 	mov	arg01, local01
1c2f0     00 C0 1F FF 
1c2f4     00 14 06 F6 | 	mov	arg02, ##1065353216
1c2f8     01 16 06 F6 | 	mov	arg03, #1
1c2fc     E0 F3 BF FD | 	call	#__system___float_cmp
1c300     00 FA 0D F2 | 	cmp	result1, #0 wz
1c304     10 00 90 AD |  if_e	jmp	#LR__2746
1c308     0F 13 02 F6 | 	mov	arg01, local01
1c30c     13 15 02 F6 | 	mov	arg02, local05
1c310     98 EF BF FD | 	call	#__system___float_mul
1c314     FD 26 02 F6 | 	mov	local05, result1
1c318                 | LR__2746
1c318                 | LR__2747
1c318     13 FB 01 F6 | 	mov	result1, local05
1c31c                 | LR__2748
1c31c     A7 F0 03 F6 | 	mov	ptra, fp
1c320     B2 00 A0 FD | 	call	#popregs_
1c324                 | __system___float_pow_n_ret
1c324     2D 00 64 FD | 	ret
1c328                 | 
1c328                 | __system___gc_ptrs
1c328     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1c32c     00 03 02 F6 | 	mov	_var02, _var01
1c330     76 01 00 FF 
1c334     F8 03 06 F1 | 	add	_var02, ##191992
1c338     00 FD 09 FB | 	rdlong	result2, _var01 wz
1c33c     74 00 90 5D |  if_ne	jmp	#LR__2750
1c340     01 FD 01 F6 | 	mov	result2, _var02
1c344     00 FD 81 F1 | 	sub	result2, _var01
1c348     00 03 58 FC | 	wrword	#1, _var01
1c34c     00 FB 01 F6 | 	mov	result1, _var01
1c350     02 FA 05 F1 | 	add	result1, #2
1c354     36 00 80 FF 
1c358     FD 20 59 FC | 	wrword	##27792, result1
1c35c     00 FB 01 F6 | 	mov	result1, _var01
1c360     04 FA 05 F1 | 	add	result1, #4
1c364     FD 00 58 FC | 	wrword	#0, result1
1c368     00 FB 01 F6 | 	mov	result1, _var01
1c36c     06 FA 05 F1 | 	add	result1, #6
1c370     FD 02 58 FC | 	wrword	#1, result1
1c374     10 00 06 F1 | 	add	_var01, #16
1c378     FE FC 51 F6 | 	abs	result2, result2 wc
1c37c     04 FC 45 F0 | 	shr	result2, #4
1c380     FE FC 81 F6 | 	negc	result2, result2
1c384     00 FD 51 FC | 	wrword	result2, _var01
1c388     00 FD 01 F6 | 	mov	result2, _var01
1c38c     02 FC 05 F1 | 	add	result2, #2
1c390     36 00 80 FF 
1c394     FE 1E 59 FC | 	wrword	##27791, result2
1c398     00 FD 01 F6 | 	mov	result2, _var01
1c39c     04 FC 05 F1 | 	add	result2, #4
1c3a0     FE 00 58 FC | 	wrword	#0, result2
1c3a4     00 FD 01 F6 | 	mov	result2, _var01
1c3a8     06 FC 05 F1 | 	add	result2, #6
1c3ac     FE 00 58 FC | 	wrword	#0, result2
1c3b0     10 00 86 F1 | 	sub	_var01, #16
1c3b4                 | LR__2750
1c3b4     00 FB 01 F6 | 	mov	result1, _var01
1c3b8     01 FD 01 F6 | 	mov	result2, _var02
1c3bc                 | __system___gc_ptrs_ret
1c3bc     2D 00 64 FD | 	ret
1c3c0                 | 
1c3c0                 | __system___gc_tryalloc
1c3c0     0B 4A 05 F6 | 	mov	COUNT_, #11
1c3c4     A8 00 A0 FD | 	call	#pushregs_
1c3c8     09 1F 02 F6 | 	mov	local01, arg01
1c3cc     0A 21 02 F6 | 	mov	local02, arg02
1c3d0     54 FF BF FD | 	call	#__system___gc_ptrs
1c3d4     FD 22 02 F6 | 	mov	local03, result1
1c3d8     FE 24 02 F6 | 	mov	local04, result2
1c3dc     11 27 02 F6 | 	mov	local05, local03
1c3e0     00 28 06 F6 | 	mov	local06, #0
1c3e4     97 1E 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1c3e8                 | LR__2760
1c3e8     13 2B 02 F6 | 	mov	local07, local05
1c3ec     06 26 06 F1 | 	add	local05, #6
1c3f0     13 15 EA FA | 	rdword	arg02, local05 wz
1c3f4     11 13 02 F6 | 	mov	arg01, local03
1c3f8     00 FA 05 A6 |  if_e	mov	result1, #0
1c3fc     04 14 66 50 |  if_ne	shl	arg02, #4
1c400     0A 13 02 51 |  if_ne	add	arg01, arg02
1c404     09 FB 01 56 |  if_ne	mov	result1, arg01
1c408     FD 26 0A F6 | 	mov	local05, result1 wz
1c40c     13 29 E2 5A |  if_ne	rdword	local06, local05
1c410     00 26 0E F2 | 	cmp	local05, #0 wz
1c414     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1c418     08 00 90 1D |  if_a	jmp	#LR__2762
1c41c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1c420     C4 FF 9F 1D |  if_a	jmp	#LR__2760
1c424                 | LR__2761
1c424                 | LR__2762
1c424     00 26 0E F2 | 	cmp	local05, #0 wz
1c428     13 FB 01 A6 |  if_e	mov	result1, local05
1c42c     3C 01 90 AD |  if_e	jmp	#LR__2765
1c430     13 FD 01 F6 | 	mov	result2, local05
1c434     06 FC 05 F1 | 	add	result2, #6
1c438     FE 2C E2 FA | 	rdword	local08, result2
1c43c     14 1F 52 F2 | 	cmps	local01, local06 wc
1c440     C0 00 90 3D |  if_ae	jmp	#LR__2764
1c444     13 1F 52 FC | 	wrword	local01, local05
1c448     13 13 02 F6 | 	mov	arg01, local05
1c44c     0F 2D 02 F6 | 	mov	local08, local01
1c450     04 2C 66 F0 | 	shl	local08, #4
1c454     16 13 02 F1 | 	add	arg01, local08
1c458     0F 29 82 F1 | 	sub	local06, local01
1c45c     09 29 52 FC | 	wrword	local06, arg01
1c460     09 2D 02 F6 | 	mov	local08, arg01
1c464     02 2C 06 F1 | 	add	local08, #2
1c468     36 00 80 FF 
1c46c     16 1F 59 FC | 	wrword	##27791, local08
1c470     13 15 0A F6 | 	mov	arg02, local05 wz
1c474     00 FA 05 A6 |  if_e	mov	result1, #0
1c478     11 15 82 51 |  if_ne	sub	arg02, local03
1c47c     04 14 46 50 |  if_ne	shr	arg02, #4
1c480     0A FB 01 56 |  if_ne	mov	result1, arg02
1c484     09 2D 02 F6 | 	mov	local08, arg01
1c488     04 2C 06 F1 | 	add	local08, #4
1c48c     16 FB 51 FC | 	wrword	result1, local08
1c490     13 2D 02 F6 | 	mov	local08, local05
1c494     06 2C 06 F1 | 	add	local08, #6
1c498     09 15 02 F6 | 	mov	arg02, arg01
1c49c     16 2D E2 FA | 	rdword	local08, local08
1c4a0     06 14 06 F1 | 	add	arg02, #6
1c4a4     0A 2D 52 FC | 	wrword	local08, arg02
1c4a8     09 2F 02 F6 | 	mov	local09, arg01
1c4ac     17 15 0A F6 | 	mov	arg02, local09 wz
1c4b0     00 FA 05 A6 |  if_e	mov	result1, #0
1c4b4     11 15 82 51 |  if_ne	sub	arg02, local03
1c4b8     04 14 46 50 |  if_ne	shr	arg02, #4
1c4bc     0A FB 01 56 |  if_ne	mov	result1, arg02
1c4c0     FD 2C 02 F6 | 	mov	local08, result1
1c4c4     09 31 EA FA | 	rdword	local10, arg01 wz
1c4c8     00 FA 05 A6 |  if_e	mov	result1, #0
1c4cc     04 30 66 50 |  if_ne	shl	local10, #4
1c4d0     18 13 02 51 |  if_ne	add	arg01, local10
1c4d4     09 FB 01 56 |  if_ne	mov	result1, arg01
1c4d8     FD 32 0A F6 | 	mov	local11, result1 wz
1c4dc     24 00 90 AD |  if_e	jmp	#LR__2763
1c4e0     12 33 52 F2 | 	cmps	local11, local04 wc
1c4e4     1C 00 90 3D |  if_ae	jmp	#LR__2763
1c4e8     17 15 0A F6 | 	mov	arg02, local09 wz
1c4ec     00 FA 05 A6 |  if_e	mov	result1, #0
1c4f0     11 15 82 51 |  if_ne	sub	arg02, local03
1c4f4     04 14 46 50 |  if_ne	shr	arg02, #4
1c4f8     0A FB 01 56 |  if_ne	mov	result1, arg02
1c4fc     04 32 06 F1 | 	add	local11, #4
1c500     19 FB 51 FC | 	wrword	result1, local11
1c504                 | LR__2763
1c504                 | LR__2764
1c504     06 2A 06 F1 | 	add	local07, #6
1c508     15 2D 52 FC | 	wrword	local08, local07
1c50c     36 00 00 FF 
1c510     80 2E 06 F6 | 	mov	local09, ##27776
1c514     10 2F 42 F5 | 	or	local09, local02
1c518     00 FA 05 F6 | 	mov	result1, #0
1c51c     01 FA 61 FD | 	cogid	result1
1c520     FD 2E 42 F5 | 	or	local09, result1
1c524     13 33 02 F6 | 	mov	local11, local05
1c528     02 32 06 F1 | 	add	local11, #2
1c52c     19 2F 52 FC | 	wrword	local09, local11
1c530     11 2F 02 F6 | 	mov	local09, local03
1c534     08 2E 06 F1 | 	add	local09, #8
1c538     13 33 02 F6 | 	mov	local11, local05
1c53c     17 2F E2 FA | 	rdword	local09, local09
1c540     06 32 06 F1 | 	add	local11, #6
1c544     19 2F 52 FC | 	wrword	local09, local11
1c548     13 15 0A F6 | 	mov	arg02, local05 wz
1c54c     00 FA 05 A6 |  if_e	mov	result1, #0
1c550     11 15 82 51 |  if_ne	sub	arg02, local03
1c554     04 14 46 50 |  if_ne	shr	arg02, #4
1c558     0A FB 01 56 |  if_ne	mov	result1, arg02
1c55c     08 22 06 F1 | 	add	local03, #8
1c560     11 FB 51 FC | 	wrword	result1, local03
1c564     08 26 06 F1 | 	add	local05, #8
1c568     13 FB 01 F6 | 	mov	result1, local05
1c56c                 | LR__2765
1c56c     A7 F0 03 F6 | 	mov	ptra, fp
1c570     B2 00 A0 FD | 	call	#popregs_
1c574                 | __system___gc_tryalloc_ret
1c574     2D 00 64 FD | 	ret
1c578                 | 
1c578                 | __system___gc_alloc_managed
1c578     01 4A 05 F6 | 	mov	COUNT_, #1
1c57c     A8 00 A0 FD | 	call	#pushregs_
1c580     09 1F 02 F6 | 	mov	local01, arg01
1c584     00 14 06 F6 | 	mov	arg02, #0
1c588     1C 00 B0 FD | 	call	#__system___gc_doalloc
1c58c     FD 14 0A F6 | 	mov	arg02, result1 wz
1c590     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1c594     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1c598     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1c59c     A7 F0 03 F6 | 	mov	ptra, fp
1c5a0     B2 00 A0 FD | 	call	#popregs_
1c5a4                 | __system___gc_alloc_managed_ret
1c5a4     2D 00 64 FD | 	ret
1c5a8                 | 
1c5a8                 | __system___gc_doalloc
1c5a8     06 4A 05 F6 | 	mov	COUNT_, #6
1c5ac     A8 00 A0 FD | 	call	#pushregs_
1c5b0     09 1F 0A F6 | 	mov	local01, arg01 wz
1c5b4     0A 21 02 F6 | 	mov	local02, arg02
1c5b8     00 FA 05 A6 |  if_e	mov	result1, #0
1c5bc     8C 00 90 AD |  if_e	jmp	#LR__2777
1c5c0     17 1E 06 F1 | 	add	local01, #23
1c5c4     0F 1E 26 F5 | 	andn	local01, #15
1c5c8     04 1E 46 F0 | 	shr	local01, #4
1c5cc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c5d0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c5d4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c5d8     EC C2 BF FD | 	call	#__system___lockmem
1c5dc     0F 13 02 F6 | 	mov	arg01, local01
1c5e0     10 15 02 F6 | 	mov	arg02, local02
1c5e4     D8 FD BF FD | 	call	#__system___gc_tryalloc
1c5e8     FD 22 0A F6 | 	mov	local03, result1 wz
1c5ec     14 00 90 5D |  if_ne	jmp	#LR__2770
1c5f0     70 03 B0 FD | 	call	#__system___gc_docollect
1c5f4     0F 13 02 F6 | 	mov	arg01, local01
1c5f8     10 15 02 F6 | 	mov	arg02, local02
1c5fc     C0 FD BF FD | 	call	#__system___gc_tryalloc
1c600     FD 22 02 F6 | 	mov	local03, result1
1c604                 | LR__2770
1c604     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c608     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c60c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c610     09 01 68 FC | 	wrlong	#0, arg01
1c614     00 22 0E F2 | 	cmp	local03, #0 wz
1c618     2C 00 90 AD |  if_e	jmp	#LR__2776
1c61c     04 1E 66 F0 | 	shl	local01, #4
1c620     08 1E 86 F1 | 	sub	local01, #8
1c624     0F 25 52 F6 | 	abs	local04, local01 wc
1c628     02 24 46 F0 | 	shr	local04, #2
1c62c     12 27 8A F6 | 	negc	local05, local04 wz
1c630     11 29 02 F6 | 	mov	local06, local03
1c634     10 00 90 AD |  if_e	jmp	#LR__2775
1c638     97 06 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
1c63c                 | LR__2771
1c63c     13 05 D8 FC | 	rep	@LR__2774, local05
1c640                 | LR__2772
1c640     14 01 68 FC | 	wrlong	#0, local06
1c644     04 28 06 F1 | 	add	local06, #4
1c648                 | LR__2773
1c648                 | LR__2774
1c648                 | LR__2775
1c648                 | LR__2776
1c648     11 FB 01 F6 | 	mov	result1, local03
1c64c                 | LR__2777
1c64c     A7 F0 03 F6 | 	mov	ptra, fp
1c650     B2 00 A0 FD | 	call	#popregs_
1c654                 | __system___gc_doalloc_ret
1c654     2D 00 64 FD | 	ret
1c658                 | 
1c658                 | __system___gc_isvalidptr
1c658     F8 16 06 F4 | 	bitl	arg03, #248
1c65c     08 16 86 F1 | 	sub	arg03, #8
1c660     09 17 52 F2 | 	cmps	arg03, arg01 wc
1c664     08 00 90 CD |  if_b	jmp	#LR__2780
1c668     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1c66c     08 00 90 CD |  if_b	jmp	#LR__2781
1c670                 | LR__2780
1c670     00 FA 05 F6 | 	mov	result1, #0
1c674     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1c678                 | LR__2781
1c678     0B 01 02 F6 | 	mov	_var01, arg03
1c67c     09 01 62 F5 | 	xor	_var01, arg01
1c680     0F 00 CE F7 | 	test	_var01, #15 wz
1c684     00 FA 05 56 |  if_ne	mov	result1, #0
1c688     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1c68c     0B 01 02 F6 | 	mov	_var01, arg03
1c690     02 00 06 F1 | 	add	_var01, #2
1c694     00 01 E2 FA | 	rdword	_var01, _var01
1c698     7F 00 00 FF 
1c69c     C0 01 06 F5 | 	and	_var01, ##65472
1c6a0     36 00 00 FF 
1c6a4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1c6a8     00 FA 05 56 |  if_ne	mov	result1, #0
1c6ac     0B FB 01 A6 |  if_e	mov	result1, arg03
1c6b0                 | __system___gc_isvalidptr_ret
1c6b0     2D 00 64 FD | 	ret
1c6b4                 | 
1c6b4                 | __system___gc_free
1c6b4     09 17 02 F6 | 	mov	arg03, arg01
1c6b8     6C FC BF FD | 	call	#__system___gc_ptrs
1c6bc     FD 12 02 F6 | 	mov	arg01, result1
1c6c0     FE 14 02 F6 | 	mov	arg02, result2
1c6c4     90 FF BF FD | 	call	#__system___gc_isvalidptr
1c6c8     FD 14 0A F6 | 	mov	arg02, result1 wz
1c6cc     28 00 90 AD |  if_e	jmp	#LR__2790
1c6d0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c6d4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c6d8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c6dc     E8 C1 BF FD | 	call	#__system___lockmem
1c6e0     0A 13 02 F6 | 	mov	arg01, arg02
1c6e4     14 00 B0 FD | 	call	#__system___gc_dofree
1c6e8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1c6ec     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c6f0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1c6f4     09 01 68 FC | 	wrlong	#0, arg01
1c6f8                 | LR__2790
1c6f8                 | __system___gc_free_ret
1c6f8     2D 00 64 FD | 	ret
1c6fc                 | 
1c6fc                 | __system___gc_dofree
1c6fc     06 4A 05 F6 | 	mov	COUNT_, #6
1c700     A8 00 A0 FD | 	call	#pushregs_
1c704     09 1F 02 F6 | 	mov	local01, arg01
1c708     1C FC BF FD | 	call	#__system___gc_ptrs
1c70c     FD 20 02 F6 | 	mov	local02, result1
1c710     FE 22 02 F6 | 	mov	local03, result2
1c714     0F 15 02 F6 | 	mov	arg02, local01
1c718     02 14 06 F1 | 	add	arg02, #2
1c71c     36 00 80 FF 
1c720     0A 1F 59 FC | 	wrword	##27791, arg02
1c724     0F 25 02 F6 | 	mov	local04, local01
1c728     0F 13 02 F6 | 	mov	arg01, local01
1c72c     09 27 EA FA | 	rdword	local05, arg01 wz
1c730     00 FA 05 A6 |  if_e	mov	result1, #0
1c734     04 26 66 50 |  if_ne	shl	local05, #4
1c738     13 13 02 51 |  if_ne	add	arg01, local05
1c73c     09 FB 01 56 |  if_ne	mov	result1, arg01
1c740     FD 28 02 F6 | 	mov	local06, result1
1c744     97 24 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
1c748                 | LR__2800
1c748     04 24 06 F1 | 	add	local04, #4
1c74c     12 15 EA FA | 	rdword	arg02, local04 wz
1c750     10 13 02 F6 | 	mov	arg01, local02
1c754     00 FA 05 A6 |  if_e	mov	result1, #0
1c758     04 14 66 50 |  if_ne	shl	arg02, #4
1c75c     0A 13 02 51 |  if_ne	add	arg01, arg02
1c760     09 FB 01 56 |  if_ne	mov	result1, arg01
1c764     FD 24 0A F6 | 	mov	local04, result1 wz
1c768     24 00 90 AD |  if_e	jmp	#LR__2802
1c76c     12 13 02 F6 | 	mov	arg01, local04
1c770     00 FA 05 F6 | 	mov	result1, #0
1c774     02 12 06 F1 | 	add	arg01, #2
1c778     09 13 E2 FA | 	rdword	arg01, arg01
1c77c     36 00 00 FF 
1c780     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1c784     01 FA 65 A6 |  if_e	neg	result1, #1
1c788     00 FA 0D F2 | 	cmp	result1, #0 wz
1c78c     B8 FF 9F AD |  if_e	jmp	#LR__2800
1c790                 | LR__2801
1c790                 | LR__2802
1c790     00 24 0E F2 | 	cmp	local04, #0 wz
1c794     10 25 02 A6 |  if_e	mov	local04, local02
1c798     12 15 02 F6 | 	mov	arg02, local04
1c79c     06 14 06 F1 | 	add	arg02, #6
1c7a0     0F 13 02 F6 | 	mov	arg01, local01
1c7a4     0A 15 E2 FA | 	rdword	arg02, arg02
1c7a8     06 12 06 F1 | 	add	arg01, #6
1c7ac     09 15 52 FC | 	wrword	arg02, arg01
1c7b0     0F 15 0A F6 | 	mov	arg02, local01 wz
1c7b4     00 FA 05 A6 |  if_e	mov	result1, #0
1c7b8     10 15 82 51 |  if_ne	sub	arg02, local02
1c7bc     04 14 46 50 |  if_ne	shr	arg02, #4
1c7c0     0A FB 01 56 |  if_ne	mov	result1, arg02
1c7c4     12 15 02 F6 | 	mov	arg02, local04
1c7c8     06 14 06 F1 | 	add	arg02, #6
1c7cc     0A FB 51 FC | 	wrword	result1, arg02
1c7d0     10 25 0A F2 | 	cmp	local04, local02 wz
1c7d4     A4 00 90 AD |  if_e	jmp	#LR__2805
1c7d8     12 13 02 F6 | 	mov	arg01, local04
1c7dc     09 27 EA FA | 	rdword	local05, arg01 wz
1c7e0     00 FA 05 A6 |  if_e	mov	result1, #0
1c7e4     04 26 66 50 |  if_ne	shl	local05, #4
1c7e8     13 13 02 51 |  if_ne	add	arg01, local05
1c7ec     09 FB 01 56 |  if_ne	mov	result1, arg01
1c7f0     0F FB 09 F2 | 	cmp	result1, local01 wz
1c7f4     84 00 90 5D |  if_ne	jmp	#LR__2804
1c7f8     12 29 E2 FA | 	rdword	local06, local04
1c7fc     0F 15 E2 FA | 	rdword	arg02, local01
1c800     0A 29 02 F1 | 	add	local06, arg02
1c804     12 29 52 FC | 	wrword	local06, local04
1c808     0F 29 02 F6 | 	mov	local06, local01
1c80c     02 28 06 F1 | 	add	local06, #2
1c810     14 01 58 FC | 	wrword	#0, local06
1c814     0F 13 02 F6 | 	mov	arg01, local01
1c818     09 27 EA FA | 	rdword	local05, arg01 wz
1c81c     00 FA 05 A6 |  if_e	mov	result1, #0
1c820     04 26 66 50 |  if_ne	shl	local05, #4
1c824     13 13 02 51 |  if_ne	add	arg01, local05
1c828     09 FB 01 56 |  if_ne	mov	result1, arg01
1c82c     FD 28 02 F6 | 	mov	local06, result1
1c830     11 29 52 F2 | 	cmps	local06, local03 wc
1c834     20 00 90 3D |  if_ae	jmp	#LR__2803
1c838     12 15 0A F6 | 	mov	arg02, local04 wz
1c83c     00 FA 05 A6 |  if_e	mov	result1, #0
1c840     10 15 82 51 |  if_ne	sub	arg02, local02
1c844     04 14 46 50 |  if_ne	shr	arg02, #4
1c848     0A FB 01 56 |  if_ne	mov	result1, arg02
1c84c     14 15 02 F6 | 	mov	arg02, local06
1c850     04 14 06 F1 | 	add	arg02, #4
1c854     0A FB 51 FC | 	wrword	result1, arg02
1c858                 | LR__2803
1c858     0F 15 02 F6 | 	mov	arg02, local01
1c85c     06 14 06 F1 | 	add	arg02, #6
1c860     12 FD 01 F6 | 	mov	result2, local04
1c864     0A 15 E2 FA | 	rdword	arg02, arg02
1c868     06 FC 05 F1 | 	add	result2, #6
1c86c     FE 14 52 FC | 	wrword	arg02, result2
1c870     06 1E 06 F1 | 	add	local01, #6
1c874     0F 01 58 FC | 	wrword	#0, local01
1c878     12 1F 02 F6 | 	mov	local01, local04
1c87c                 | LR__2804
1c87c                 | LR__2805
1c87c     0F 13 02 F6 | 	mov	arg01, local01
1c880     09 27 EA FA | 	rdword	local05, arg01 wz
1c884     00 FA 05 A6 |  if_e	mov	result1, #0
1c888     04 26 66 50 |  if_ne	shl	local05, #4
1c88c     13 13 02 51 |  if_ne	add	arg01, local05
1c890     09 FB 01 56 |  if_ne	mov	result1, arg01
1c894     FD 14 0A F6 | 	mov	arg02, result1 wz
1c898     B8 00 90 AD |  if_e	jmp	#LR__2807
1c89c     11 15 52 F2 | 	cmps	arg02, local03 wc
1c8a0     B0 00 90 3D |  if_ae	jmp	#LR__2807
1c8a4     0A 13 02 F6 | 	mov	arg01, arg02
1c8a8     00 FA 05 F6 | 	mov	result1, #0
1c8ac     02 12 06 F1 | 	add	arg01, #2
1c8b0     09 13 E2 FA | 	rdword	arg01, arg01
1c8b4     36 00 00 FF 
1c8b8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1c8bc     01 FA 65 A6 |  if_e	neg	result1, #1
1c8c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8c4     8C 00 90 AD |  if_e	jmp	#LR__2807
1c8c8     0F 25 02 F6 | 	mov	local04, local01
1c8cc     12 29 E2 FA | 	rdword	local06, local04
1c8d0     0A 13 02 F6 | 	mov	arg01, arg02
1c8d4     09 1F E2 FA | 	rdword	local01, arg01
1c8d8     0F 29 02 F1 | 	add	local06, local01
1c8dc     12 29 52 FC | 	wrword	local06, local04
1c8e0     09 29 02 F6 | 	mov	local06, arg01
1c8e4     06 28 06 F1 | 	add	local06, #6
1c8e8     12 1F 02 F6 | 	mov	local01, local04
1c8ec     14 29 E2 FA | 	rdword	local06, local06
1c8f0     06 1E 06 F1 | 	add	local01, #6
1c8f4     0F 29 52 FC | 	wrword	local06, local01
1c8f8     09 29 02 F6 | 	mov	local06, arg01
1c8fc     02 28 06 F1 | 	add	local06, #2
1c900     14 55 59 FC | 	wrword	#170, local06
1c904     09 29 02 F6 | 	mov	local06, arg01
1c908     06 28 06 F1 | 	add	local06, #6
1c90c     14 01 58 FC | 	wrword	#0, local06
1c910     09 27 EA FA | 	rdword	local05, arg01 wz
1c914     00 FA 05 A6 |  if_e	mov	result1, #0
1c918     04 26 66 50 |  if_ne	shl	local05, #4
1c91c     13 13 02 51 |  if_ne	add	arg01, local05
1c920     09 FB 01 56 |  if_ne	mov	result1, arg01
1c924     FD 28 0A F6 | 	mov	local06, result1 wz
1c928     28 00 90 AD |  if_e	jmp	#LR__2806
1c92c     11 29 52 F2 | 	cmps	local06, local03 wc
1c930     20 00 90 3D |  if_ae	jmp	#LR__2806
1c934     12 15 0A F6 | 	mov	arg02, local04 wz
1c938     00 FA 05 A6 |  if_e	mov	result1, #0
1c93c     10 15 82 51 |  if_ne	sub	arg02, local02
1c940     04 14 46 50 |  if_ne	shr	arg02, #4
1c944     0A FB 01 56 |  if_ne	mov	result1, arg02
1c948     14 25 02 F6 | 	mov	local04, local06
1c94c     04 24 06 F1 | 	add	local04, #4
1c950     12 FB 51 FC | 	wrword	result1, local04
1c954                 | LR__2806
1c954                 | LR__2807
1c954     14 FB 01 F6 | 	mov	result1, local06
1c958     A7 F0 03 F6 | 	mov	ptra, fp
1c95c     B2 00 A0 FD | 	call	#popregs_
1c960                 | __system___gc_dofree_ret
1c960     2D 00 64 FD | 	ret
1c964                 | 
1c964                 | __system___gc_docollect
1c964     05 4A 05 F6 | 	mov	COUNT_, #5
1c968     A8 00 A0 FD | 	call	#pushregs_
1c96c     B8 F9 BF FD | 	call	#__system___gc_ptrs
1c970     FE 1E 02 F6 | 	mov	local01, result2
1c974     FD 20 02 F6 | 	mov	local02, result1
1c978     10 13 02 F6 | 	mov	arg01, local02
1c97c     09 23 EA FA | 	rdword	local03, arg01 wz
1c980     00 FA 05 A6 |  if_e	mov	result1, #0
1c984     04 22 66 50 |  if_ne	shl	local03, #4
1c988     11 13 02 51 |  if_ne	add	arg01, local03
1c98c     09 FB 01 56 |  if_ne	mov	result1, arg01
1c990     FD 24 0A F6 | 	mov	local04, result1 wz
1c994     00 FA 05 F6 | 	mov	result1, #0
1c998     01 FA 61 FD | 	cogid	result1
1c99c     FD 26 02 F6 | 	mov	local05, result1
1c9a0     48 00 90 AD |  if_e	jmp	#LR__2812
1c9a4     97 22 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
1c9a8                 | LR__2810
1c9a8     0F 25 52 F2 | 	cmps	local04, local01 wc
1c9ac     3C 00 90 3D |  if_ae	jmp	#LR__2812
1c9b0     12 15 02 F6 | 	mov	arg02, local04
1c9b4     02 14 06 F1 | 	add	arg02, #2
1c9b8     0A 15 E2 FA | 	rdword	arg02, arg02
1c9bc     20 14 26 F5 | 	andn	arg02, #32
1c9c0     12 13 02 F6 | 	mov	arg01, local04
1c9c4     02 12 06 F1 | 	add	arg01, #2
1c9c8     09 15 52 FC | 	wrword	arg02, arg01
1c9cc     12 13 02 F6 | 	mov	arg01, local04
1c9d0     09 23 EA FA | 	rdword	local03, arg01 wz
1c9d4     00 FA 05 A6 |  if_e	mov	result1, #0
1c9d8     04 22 66 50 |  if_ne	shl	local03, #4
1c9dc     11 13 02 51 |  if_ne	add	arg01, local03
1c9e0     09 FB 01 56 |  if_ne	mov	result1, arg01
1c9e4     FD 24 0A F6 | 	mov	local04, result1 wz
1c9e8     BC FF 9F 5D |  if_ne	jmp	#LR__2810
1c9ec                 | LR__2811
1c9ec                 | LR__2812
1c9ec     00 22 06 F6 | 	mov	local03, #0
1c9f0     00 12 06 F6 | 	mov	arg01, #0
1c9f4     A8 BE BF FD | 	call	#__system____topofstack
1c9f8     FD 14 02 F6 | 	mov	arg02, result1
1c9fc     11 13 02 F6 | 	mov	arg01, local03
1ca00     90 00 B0 FD | 	call	#__system___gc_markhub
1ca04     1C 01 B0 FD | 	call	#__system___gc_markcog
1ca08     10 13 02 F6 | 	mov	arg01, local02
1ca0c     09 23 EA FA | 	rdword	local03, arg01 wz
1ca10     00 FA 05 A6 |  if_e	mov	result1, #0
1ca14     04 22 66 50 |  if_ne	shl	local03, #4
1ca18     11 13 02 51 |  if_ne	add	arg01, local03
1ca1c     09 FB 01 56 |  if_ne	mov	result1, arg01
1ca20     FD 20 0A F6 | 	mov	local02, result1 wz
1ca24     60 00 90 AD |  if_e	jmp	#LR__2816
1ca28                 | LR__2813
1ca28     10 25 02 F6 | 	mov	local04, local02
1ca2c     12 13 02 F6 | 	mov	arg01, local04
1ca30     09 23 EA FA | 	rdword	local03, arg01 wz
1ca34     00 FA 05 A6 |  if_e	mov	result1, #0
1ca38     04 22 66 50 |  if_ne	shl	local03, #4
1ca3c     11 13 02 51 |  if_ne	add	arg01, local03
1ca40     09 FB 01 56 |  if_ne	mov	result1, arg01
1ca44     FD 20 02 F6 | 	mov	local02, result1
1ca48     12 15 02 F6 | 	mov	arg02, local04
1ca4c     02 14 06 F1 | 	add	arg02, #2
1ca50     0A 15 E2 FA | 	rdword	arg02, arg02
1ca54     20 14 CE F7 | 	test	arg02, #32 wz
1ca58     10 14 CE A7 |  if_e	test	arg02, #16 wz
1ca5c     1C 00 90 5D |  if_ne	jmp	#LR__2815
1ca60     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1ca64     13 15 0A F2 | 	cmp	arg02, local05 wz
1ca68     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1ca6c     0C 00 90 5D |  if_ne	jmp	#LR__2814
1ca70     12 13 02 F6 | 	mov	arg01, local04
1ca74     84 FC BF FD | 	call	#__system___gc_dofree
1ca78     FD 20 02 F6 | 	mov	local02, result1
1ca7c                 | LR__2814
1ca7c                 | LR__2815
1ca7c     00 20 0E F2 | 	cmp	local02, #0 wz
1ca80     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1ca84     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2813
1ca88                 | LR__2816
1ca88     A7 F0 03 F6 | 	mov	ptra, fp
1ca8c     B2 00 A0 FD | 	call	#popregs_
1ca90                 | __system___gc_docollect_ret
1ca90     2D 00 64 FD | 	ret
1ca94                 | 
1ca94                 | __system___gc_markhub
1ca94     04 4A 05 F6 | 	mov	COUNT_, #4
1ca98     A8 00 A0 FD | 	call	#pushregs_
1ca9c     09 1F 02 F6 | 	mov	local01, arg01
1caa0     0A 21 02 F6 | 	mov	local02, arg02
1caa4     80 F8 BF FD | 	call	#__system___gc_ptrs
1caa8     FD 22 02 F6 | 	mov	local03, result1
1caac     FE 24 02 F6 | 	mov	local04, result2
1cab0                 | LR__2820
1cab0     10 1F 52 F2 | 	cmps	local01, local02 wc
1cab4     60 00 90 3D |  if_ae	jmp	#LR__2821
1cab8     0F 17 02 FB | 	rdlong	arg03, local01
1cabc     04 1E 06 F1 | 	add	local01, #4
1cac0     12 15 02 F6 | 	mov	arg02, local04
1cac4     11 13 02 F6 | 	mov	arg01, local03
1cac8     8C FB BF FD | 	call	#__system___gc_isvalidptr
1cacc     FD 16 0A F6 | 	mov	arg03, result1 wz
1cad0     DC FF 9F AD |  if_e	jmp	#LR__2820
1cad4     0B 13 02 F6 | 	mov	arg01, arg03
1cad8     00 FA 05 F6 | 	mov	result1, #0
1cadc     02 12 06 F1 | 	add	arg01, #2
1cae0     09 13 E2 FA | 	rdword	arg01, arg01
1cae4     36 00 00 FF 
1cae8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1caec     01 FA 65 A6 |  if_e	neg	result1, #1
1caf0     00 FA 0D F2 | 	cmp	result1, #0 wz
1caf4     B8 FF 9F 5D |  if_ne	jmp	#LR__2820
1caf8     0B FD 01 F6 | 	mov	result2, arg03
1cafc     02 FC 05 F1 | 	add	result2, #2
1cb00     FE FC E1 FA | 	rdword	result2, result2
1cb04     0F FC 25 F5 | 	andn	result2, #15
1cb08     2E FC 45 F5 | 	or	result2, #46
1cb0c     02 16 06 F1 | 	add	arg03, #2
1cb10     0B FD 51 FC | 	wrword	result2, arg03
1cb14     98 FF 9F FD | 	jmp	#LR__2820
1cb18                 | LR__2821
1cb18     A7 F0 03 F6 | 	mov	ptra, fp
1cb1c     B2 00 A0 FD | 	call	#popregs_
1cb20                 | __system___gc_markhub_ret
1cb20     2D 00 64 FD | 	ret
1cb24                 | 
1cb24                 | __system___gc_markcog
1cb24     04 4A 05 F6 | 	mov	COUNT_, #4
1cb28     A8 00 A0 FD | 	call	#pushregs_
1cb2c     F8 F7 BF FD | 	call	#__system___gc_ptrs
1cb30     FD 1E 02 F6 | 	mov	local01, result1
1cb34     FE 20 02 F6 | 	mov	local02, result2
1cb38     EF 23 06 F6 | 	mov	local03, #495
1cb3c                 | LR__2830
1cb3c                 | 	'.live	local03
1cb3c     00 22 96 F9 | 	alts	local03, #0
1cb40     11 25 02 F6 | 	mov	local04, local03
1cb44     0F 13 02 F6 | 	mov	arg01, local01
1cb48     10 15 02 F6 | 	mov	arg02, local02
1cb4c     12 17 02 F6 | 	mov	arg03, local04
1cb50     04 FB BF FD | 	call	#__system___gc_isvalidptr
1cb54     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb58     18 00 90 AD |  if_e	jmp	#LR__2831
1cb5c     FD 24 02 F6 | 	mov	local04, result1
1cb60     02 24 06 F1 | 	add	local04, #2
1cb64     12 25 E2 FA | 	rdword	local04, local04
1cb68     20 24 46 F5 | 	or	local04, #32
1cb6c     02 FA 05 F1 | 	add	result1, #2
1cb70     FD 24 52 FC | 	wrword	local04, result1
1cb74                 | LR__2831
1cb74     01 22 86 F1 | 	sub	local03, #1
1cb78     00 22 56 F2 | 	cmps	local03, #0 wc
1cb7c     BC FF 9F 3D |  if_ae	jmp	#LR__2830
1cb80     A7 F0 03 F6 | 	mov	ptra, fp
1cb84     B2 00 A0 FD | 	call	#popregs_
1cb88                 | __system___gc_markcog_ret
1cb88     2D 00 64 FD | 	ret
1cb8c                 | 
1cb8c                 | __system__opendir
1cb8c     06 4A 05 F6 | 	mov	COUNT_, #6
1cb90     A8 00 A0 FD | 	call	#pushregs_
1cb94     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1cb98     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1cb9c     09 15 02 F6 | 	mov	arg02, arg01
1cba0     0F 13 02 F6 | 	mov	arg01, local01
1cba4     00 16 06 F6 | 	mov	arg03, #0
1cba8     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1cbac     B0 C4 BF FD | 	call	#__system____getvfsforfile
1cbb0     FD 20 0A F6 | 	mov	local02, result1 wz
1cbb4     10 00 90 AD |  if_e	jmp	#LR__2840
1cbb8     28 20 06 F1 | 	add	local02, #40
1cbbc     10 17 0A FB | 	rdlong	arg03, local02 wz
1cbc0     28 20 86 F1 | 	sub	local02, #40
1cbc4     14 00 90 5D |  if_ne	jmp	#LR__2841
1cbc8                 | LR__2840
1cbc8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1cbcc     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1cbd0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1cbd4     00 FA 05 F6 | 	mov	result1, #0
1cbd8     90 00 90 FD | 	jmp	#LR__2843
1cbdc                 | LR__2841
1cbdc     5C 12 06 F6 | 	mov	arg01, #92
1cbe0     10 14 06 F6 | 	mov	arg02, #16
1cbe4     C0 F9 BF FD | 	call	#__system___gc_doalloc
1cbe8     FD 22 0A F6 | 	mov	local03, result1 wz
1cbec     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1cbf0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1cbf4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1cbf8     00 FA 05 A6 |  if_e	mov	result1, #0
1cbfc     6C 00 90 AD |  if_e	jmp	#LR__2843
1cc00     28 20 06 F1 | 	add	local02, #40
1cc04     10 25 02 FB | 	rdlong	local04, local02
1cc08     12 27 02 F6 | 	mov	local05, local04
1cc0c     28 20 86 F1 | 	sub	local02, #40
1cc10     13 26 46 F7 | 	zerox	local05, #19
1cc14     14 24 46 F0 | 	shr	local04, #20
1cc18     02 24 66 F0 | 	shl	local04, #2
1cc1c     ED 24 02 F1 | 	add	local04, __methods__
1cc20     12 25 02 FB | 	rdlong	local04, local04
1cc24     11 13 02 F6 | 	mov	arg01, local03
1cc28     0F 15 02 F6 | 	mov	arg02, local01
1cc2c     F2 28 02 F6 | 	mov	local06, objptr
1cc30     13 E5 01 F6 | 	mov	objptr, local05
1cc34     2D 24 62 FD | 	call	local04
1cc38     14 E5 01 F6 | 	mov	objptr, local06
1cc3c     FD 16 0A F6 | 	mov	arg03, result1 wz
1cc40     20 00 90 AD |  if_e	jmp	#LR__2842
1cc44     00 16 4E F2 | 	cmps	arg03, #0 wz
1cc48     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1cc4c     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1cc50     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1cc54     11 13 02 F6 | 	mov	arg01, local03
1cc58     58 FA BF FD | 	call	#__system___gc_free
1cc5c     00 FA 05 F6 | 	mov	result1, #0
1cc60     08 00 90 FD | 	jmp	#LR__2843
1cc64                 | LR__2842
1cc64     11 21 62 FC | 	wrlong	local02, local03
1cc68     11 FB 01 F6 | 	mov	result1, local03
1cc6c                 | LR__2843
1cc6c     A7 F0 03 F6 | 	mov	ptra, fp
1cc70     B2 00 A0 FD | 	call	#popregs_
1cc74                 | __system__opendir_ret
1cc74     2D 00 64 FD | 	ret
1cc78                 | 
1cc78                 | __system__closedir
1cc78     04 4A 05 F6 | 	mov	COUNT_, #4
1cc7c     A8 00 A0 FD | 	call	#pushregs_
1cc80     09 1F 02 F6 | 	mov	local01, arg01
1cc84     0F 13 02 FB | 	rdlong	arg01, local01
1cc88     2C 12 06 F1 | 	add	arg01, #44
1cc8c     09 21 02 FB | 	rdlong	local02, arg01
1cc90     10 23 02 F6 | 	mov	local03, local02
1cc94     13 22 46 F7 | 	zerox	local03, #19
1cc98     14 20 46 F0 | 	shr	local02, #20
1cc9c     02 20 66 F0 | 	shl	local02, #2
1cca0     ED 20 02 F1 | 	add	local02, __methods__
1cca4     10 21 02 FB | 	rdlong	local02, local02
1cca8     0F 13 02 F6 | 	mov	arg01, local01
1ccac     F2 24 02 F6 | 	mov	local04, objptr
1ccb0     11 E5 01 F6 | 	mov	objptr, local03
1ccb4     2D 20 62 FD | 	call	local02
1ccb8     12 E5 01 F6 | 	mov	objptr, local04
1ccbc     FD 24 02 F6 | 	mov	local04, result1
1ccc0     0F 13 02 F6 | 	mov	arg01, local01
1ccc4     EC F9 BF FD | 	call	#__system___gc_free
1ccc8     00 24 4E F2 | 	cmps	local04, #0 wz
1cccc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ccd0     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1ccd4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ccd8     01 FA 65 56 |  if_ne	neg	result1, #1
1ccdc     00 FA 05 A6 |  if_e	mov	result1, #0
1cce0     A7 F0 03 F6 | 	mov	ptra, fp
1cce4     B2 00 A0 FD | 	call	#popregs_
1cce8                 | __system__closedir_ret
1cce8     2D 00 64 FD | 	ret
1ccec                 | 
1ccec                 | __system__readdir
1ccec     04 4A 05 F6 | 	mov	COUNT_, #4
1ccf0     A8 00 A0 FD | 	call	#pushregs_
1ccf4     09 15 0A FB | 	rdlong	arg02, arg01 wz
1ccf8     08 12 06 F1 | 	add	arg01, #8
1ccfc     09 1F 02 F6 | 	mov	local01, arg01
1cd00     08 12 86 F1 | 	sub	arg01, #8
1cd04     00 FA 05 A6 |  if_e	mov	result1, #0
1cd08     5C 00 90 AD |  if_e	jmp	#LR__2851
1cd0c     30 14 06 F1 | 	add	arg02, #48
1cd10     0A 21 02 FB | 	rdlong	local02, arg02
1cd14     10 23 02 F6 | 	mov	local03, local02
1cd18     13 22 46 F7 | 	zerox	local03, #19
1cd1c     14 20 46 F0 | 	shr	local02, #20
1cd20     02 20 66 F0 | 	shl	local02, #2
1cd24     ED 20 02 F1 | 	add	local02, __methods__
1cd28     10 21 02 FB | 	rdlong	local02, local02
1cd2c     0F 15 02 F6 | 	mov	arg02, local01
1cd30     F2 24 02 F6 | 	mov	local04, objptr
1cd34     11 E5 01 F6 | 	mov	objptr, local03
1cd38     2D 20 62 FD | 	call	local02
1cd3c     12 E5 01 F6 | 	mov	objptr, local04
1cd40     00 FA 4D F2 | 	cmps	result1, #0 wz
1cd44     1C 00 90 AD |  if_e	jmp	#LR__2850
1cd48     01 FA 55 F2 | 	cmps	result1, #1 wc
1cd4c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1cd50     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1cd54     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1cd58     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1cd5c     00 FA 05 F6 | 	mov	result1, #0
1cd60     04 00 90 FD | 	jmp	#LR__2851
1cd64                 | LR__2850
1cd64     0F FB 01 F6 | 	mov	result1, local01
1cd68                 | LR__2851
1cd68     A7 F0 03 F6 | 	mov	ptra, fp
1cd6c     B2 00 A0 FD | 	call	#popregs_
1cd70                 | __system__readdir_ret
1cd70     2D 00 64 FD | 	ret
1cd74                 | 
1cd74                 | __system___openraw
1cd74     15 4A 05 F6 | 	mov	COUNT_, #21
1cd78     A8 00 A0 FD | 	call	#pushregs_
1cd7c     09 1F 02 F6 | 	mov	local01, arg01
1cd80     0A 21 02 F6 | 	mov	local02, arg02
1cd84     0B 23 02 F6 | 	mov	local03, arg03
1cd88     0C 25 02 F6 | 	mov	local04, arg04
1cd8c     04 26 06 F6 | 	mov	local05, #4
1cd90     0F 29 02 F6 | 	mov	local06, local01
1cd94     00 2A 06 F6 | 	mov	local07, #0
1cd98     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1cd9c     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1cda0     16 13 02 F6 | 	mov	arg01, local08
1cda4     10 15 02 F6 | 	mov	arg02, local02
1cda8     00 16 06 F6 | 	mov	arg03, #0
1cdac     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1cdb0     AC C2 BF FD | 	call	#__system____getvfsforfile
1cdb4     FD 2E 0A F6 | 	mov	local09, result1 wz
1cdb8     10 00 90 AD |  if_e	jmp	#LR__2860
1cdbc     20 2E 06 F1 | 	add	local09, #32
1cdc0     17 FB 09 FB | 	rdlong	result1, local09 wz
1cdc4     20 2E 86 F1 | 	sub	local09, #32
1cdc8     14 00 90 5D |  if_ne	jmp	#LR__2861
1cdcc                 | LR__2860
1cdcc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1cdd0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1cdd4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1cdd8     01 FA 65 F6 | 	neg	result1, #1
1cddc     8C 02 90 FD | 	jmp	#LR__2874
1cde0                 | LR__2861
1cde0     14 13 02 F6 | 	mov	arg01, local06
1cde4     00 14 06 F6 | 	mov	arg02, #0
1cde8     34 16 06 F6 | 	mov	arg03, #52
1cdec     09 31 02 F6 | 	mov	local10, arg01
1cdf0     98 00 A0 FD | 	call	#\builtin_bytefill_
1cdf4     20 2E 06 F1 | 	add	local09, #32
1cdf8     17 33 02 FB | 	rdlong	local11, local09
1cdfc     19 35 02 F6 | 	mov	local12, local11
1ce00     19 37 02 F6 | 	mov	local13, local11
1ce04     20 2E 86 F1 | 	sub	local09, #32
1ce08     1B 39 02 F6 | 	mov	local14, local13
1ce0c     13 34 46 F7 | 	zerox	local12, #19
1ce10     14 38 46 F0 | 	shr	local14, #20
1ce14     02 38 66 F0 | 	shl	local14, #2
1ce18     ED 38 02 F1 | 	add	local14, __methods__
1ce1c     1C 39 02 FB | 	rdlong	local14, local14
1ce20     14 3B 02 F6 | 	mov	local15, local06
1ce24     16 3D 02 F6 | 	mov	local16, local08
1ce28     11 3F 02 F6 | 	mov	local17, local03
1ce2c     1D 13 02 F6 | 	mov	arg01, local15
1ce30     1E 15 02 F6 | 	mov	arg02, local16
1ce34     1F 17 02 F6 | 	mov	arg03, local17
1ce38     F2 40 02 F6 | 	mov	local18, objptr
1ce3c     1A E5 01 F6 | 	mov	objptr, local12
1ce40     2D 38 62 FD | 	call	local14
1ce44     20 E5 01 F6 | 	mov	objptr, local18
1ce48     FD 42 0A F6 | 	mov	local19, result1 wz
1ce4c     04 22 CE 57 |  if_ne	test	local03, #4 wz
1ce50     58 00 90 AD |  if_e	jmp	#LR__2862
1ce54     24 2E 06 F1 | 	add	local09, #36
1ce58     17 33 02 FB | 	rdlong	local11, local09
1ce5c     19 35 02 F6 | 	mov	local12, local11
1ce60     19 37 02 F6 | 	mov	local13, local11
1ce64     24 2E 86 F1 | 	sub	local09, #36
1ce68     1B 39 02 F6 | 	mov	local14, local13
1ce6c     13 34 46 F7 | 	zerox	local12, #19
1ce70     14 38 46 F0 | 	shr	local14, #20
1ce74     02 38 66 F0 | 	shl	local14, #2
1ce78     ED 38 02 F1 | 	add	local14, __methods__
1ce7c     1C 39 02 FB | 	rdlong	local14, local14
1ce80     14 3B 02 F6 | 	mov	local15, local06
1ce84     16 3D 02 F6 | 	mov	local16, local08
1ce88     12 3F 02 F6 | 	mov	local17, local04
1ce8c     1D 13 02 F6 | 	mov	arg01, local15
1ce90     1E 15 02 F6 | 	mov	arg02, local16
1ce94     1F 17 02 F6 | 	mov	arg03, local17
1ce98     F2 40 02 F6 | 	mov	local18, objptr
1ce9c     1A E5 01 F6 | 	mov	objptr, local12
1cea0     2D 38 62 FD | 	call	local14
1cea4     20 E5 01 F6 | 	mov	objptr, local18
1cea8     FD 42 02 F6 | 	mov	local19, result1
1ceac                 | LR__2862
1ceac     00 42 0E F2 | 	cmp	local19, #0 wz
1ceb0     8C 01 90 5D |  if_ne	jmp	#LR__2872
1ceb4     11 45 02 F6 | 	mov	local20, local03
1ceb8     03 44 0E F5 | 	and	local20, #3 wz
1cebc     02 26 46 55 |  if_ne	or	local05, #2
1cec0     01 44 0E F2 | 	cmp	local20, #1 wz
1cec4     01 26 46 55 |  if_ne	or	local05, #1
1cec8     20 22 CE F7 | 	test	local03, #32 wz
1cecc     C0 26 46 55 |  if_ne	or	local05, #192
1ced0     08 28 06 F1 | 	add	local06, #8
1ced4     14 27 62 FC | 	wrlong	local05, local06
1ced8     0C 28 06 F1 | 	add	local06, #12
1cedc     14 47 0A FB | 	rdlong	local21, local06 wz
1cee0     14 28 86 F1 | 	sub	local06, #20
1cee4     18 00 90 5D |  if_ne	jmp	#LR__2863
1cee8     04 2E 06 F1 | 	add	local09, #4
1ceec     17 47 02 FB | 	rdlong	local21, local09
1cef0     04 2E 86 F1 | 	sub	local09, #4
1cef4     14 28 06 F1 | 	add	local06, #20
1cef8     14 47 62 FC | 	wrlong	local21, local06
1cefc     14 28 86 F1 | 	sub	local06, #20
1cf00                 | LR__2863
1cf00     18 28 06 F1 | 	add	local06, #24
1cf04     14 47 0A FB | 	rdlong	local21, local06 wz
1cf08     18 28 86 F1 | 	sub	local06, #24
1cf0c     18 00 90 5D |  if_ne	jmp	#LR__2864
1cf10     08 2E 06 F1 | 	add	local09, #8
1cf14     17 47 02 FB | 	rdlong	local21, local09
1cf18     08 2E 86 F1 | 	sub	local09, #8
1cf1c     18 28 06 F1 | 	add	local06, #24
1cf20     14 47 62 FC | 	wrlong	local21, local06
1cf24     18 28 86 F1 | 	sub	local06, #24
1cf28                 | LR__2864
1cf28     24 28 06 F1 | 	add	local06, #36
1cf2c     14 47 0A FB | 	rdlong	local21, local06 wz
1cf30     24 28 86 F1 | 	sub	local06, #36
1cf34     17 47 02 AB |  if_e	rdlong	local21, local09
1cf38     24 28 06 A1 |  if_e	add	local06, #36
1cf3c     14 47 62 AC |  if_e	wrlong	local21, local06
1cf40     24 28 86 A1 |  if_e	sub	local06, #36
1cf44     28 28 06 F1 | 	add	local06, #40
1cf48     14 47 0A FB | 	rdlong	local21, local06 wz
1cf4c     28 28 86 F1 | 	sub	local06, #40
1cf50     18 00 90 5D |  if_ne	jmp	#LR__2865
1cf54     10 2E 06 F1 | 	add	local09, #16
1cf58     17 47 02 FB | 	rdlong	local21, local09
1cf5c     10 2E 86 F1 | 	sub	local09, #16
1cf60     28 28 06 F1 | 	add	local06, #40
1cf64     14 47 62 FC | 	wrlong	local21, local06
1cf68     28 28 86 F1 | 	sub	local06, #40
1cf6c                 | LR__2865
1cf6c     30 28 06 F1 | 	add	local06, #48
1cf70     14 47 0A FB | 	rdlong	local21, local06 wz
1cf74     30 28 86 F1 | 	sub	local06, #48
1cf78     18 00 90 5D |  if_ne	jmp	#LR__2866
1cf7c     0C 2E 06 F1 | 	add	local09, #12
1cf80     17 47 02 FB | 	rdlong	local21, local09
1cf84     0C 2E 86 F1 | 	sub	local09, #12
1cf88     30 28 06 F1 | 	add	local06, #48
1cf8c     14 47 62 FC | 	wrlong	local21, local06
1cf90     30 28 86 F1 | 	sub	local06, #48
1cf94                 | LR__2866
1cf94     1C 28 06 F1 | 	add	local06, #28
1cf98     14 47 0A FB | 	rdlong	local21, local06 wz
1cf9c     1C 28 86 F1 | 	sub	local06, #28
1cfa0     1C 00 90 5D |  if_ne	jmp	#LR__2867
1cfa4     01 2A 06 F6 | 	mov	local07, #1
1cfa8     F2 12 02 F6 | 	mov	arg01, objptr
1cfac     00 48 03 FF 
1cfb0     00 12 46 F5 | 	or	arg01, ##110100480
1cfb4     1C 28 06 F1 | 	add	local06, #28
1cfb8     14 13 62 FC | 	wrlong	arg01, local06
1cfbc     1C 28 86 F1 | 	sub	local06, #28
1cfc0                 | LR__2867
1cfc0     20 28 06 F1 | 	add	local06, #32
1cfc4     14 47 0A FB | 	rdlong	local21, local06 wz
1cfc8     20 28 86 F1 | 	sub	local06, #32
1cfcc     1C 00 90 5D |  if_ne	jmp	#LR__2868
1cfd0     01 2A 06 F6 | 	mov	local07, #1
1cfd4     F2 12 02 F6 | 	mov	arg01, objptr
1cfd8     00 50 03 FF 
1cfdc     00 12 46 F5 | 	or	arg01, ##111149056
1cfe0     20 28 06 F1 | 	add	local06, #32
1cfe4     14 13 62 FC | 	wrlong	arg01, local06
1cfe8     20 28 86 F1 | 	sub	local06, #32
1cfec                 | LR__2868
1cfec     2C 28 06 F1 | 	add	local06, #44
1cff0     14 47 0A FB | 	rdlong	local21, local06 wz
1cff4     2C 28 86 F1 | 	sub	local06, #44
1cff8     44 00 90 5D |  if_ne	jmp	#LR__2871
1cffc     14 2E 06 F1 | 	add	local09, #20
1d000     17 47 0A FB | 	rdlong	local21, local09 wz
1d004     14 2E 86 F1 | 	sub	local09, #20
1d008     18 00 90 AD |  if_e	jmp	#LR__2869
1d00c     14 2E 06 F1 | 	add	local09, #20
1d010     17 47 02 FB | 	rdlong	local21, local09
1d014     2C 28 06 F1 | 	add	local06, #44
1d018     14 47 62 FC | 	wrlong	local21, local06
1d01c     2C 28 86 F1 | 	sub	local06, #44
1d020     1C 00 90 FD | 	jmp	#LR__2870
1d024                 | LR__2869
1d024     01 2A 06 F6 | 	mov	local07, #1
1d028     F2 12 02 F6 | 	mov	arg01, objptr
1d02c     00 58 03 FF 
1d030     00 12 46 F5 | 	or	arg01, ##112197632
1d034     2C 28 06 F1 | 	add	local06, #44
1d038     14 13 62 FC | 	wrlong	arg01, local06
1d03c     2C 28 86 F1 | 	sub	local06, #44
1d040                 | LR__2870
1d040                 | LR__2871
1d040                 | LR__2872
1d040     00 2A 0E F2 | 	cmp	local07, #0 wz
1d044     14 13 02 56 |  if_ne	mov	arg01, local06
1d048     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1d04c     00 42 0E F2 | 	cmp	local19, #0 wz
1d050     00 12 06 A6 |  if_e	mov	arg01, #0
1d054     10 00 90 5D |  if_ne	jmp	#LR__2873
1d058     00 12 4E F2 | 	cmps	arg01, #0 wz
1d05c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d060     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d064     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d068                 | LR__2873
1d068     21 FB 01 F6 | 	mov	result1, local19
1d06c                 | LR__2874
1d06c     A7 F0 03 F6 | 	mov	ptra, fp
1d070     B2 00 A0 FD | 	call	#popregs_
1d074                 | __system___openraw_ret
1d074     2D 00 64 FD | 	ret
1d078                 | 
1d078                 | __system___closeraw
1d078     05 4A 05 F6 | 	mov	COUNT_, #5
1d07c     A8 00 A0 FD | 	call	#pushregs_
1d080     09 1F 02 F6 | 	mov	local01, arg01
1d084     00 20 06 F6 | 	mov	local02, #0
1d088     08 1E 06 F1 | 	add	local01, #8
1d08c     0F FB 09 FB | 	rdlong	result1, local01 wz
1d090     08 1E 86 F1 | 	sub	local01, #8
1d094     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d098     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d09c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d0a0     01 FA 65 A6 |  if_e	neg	result1, #1
1d0a4     A8 00 90 AD |  if_e	jmp	#LR__2882
1d0a8     2C 1E 06 F1 | 	add	local01, #44
1d0ac     0F FB 09 FB | 	rdlong	result1, local01 wz
1d0b0     2C 1E 86 F1 | 	sub	local01, #44
1d0b4     38 00 90 AD |  if_e	jmp	#LR__2880
1d0b8     2C 1E 06 F1 | 	add	local01, #44
1d0bc     0F 23 02 FB | 	rdlong	local03, local01
1d0c0     11 25 02 F6 | 	mov	local04, local03
1d0c4     2C 1E 86 F1 | 	sub	local01, #44
1d0c8     13 24 46 F7 | 	zerox	local04, #19
1d0cc     14 22 46 F0 | 	shr	local03, #20
1d0d0     02 22 66 F0 | 	shl	local03, #2
1d0d4     ED 22 02 F1 | 	add	local03, __methods__
1d0d8     11 23 02 FB | 	rdlong	local03, local03
1d0dc     0F 13 02 F6 | 	mov	arg01, local01
1d0e0     F2 26 02 F6 | 	mov	local05, objptr
1d0e4     12 E5 01 F6 | 	mov	objptr, local04
1d0e8     2D 22 62 FD | 	call	local03
1d0ec     13 E5 01 F6 | 	mov	objptr, local05
1d0f0                 | LR__2880
1d0f0     24 1E 06 F1 | 	add	local01, #36
1d0f4     0F 27 0A FB | 	rdlong	local05, local01 wz
1d0f8     24 1E 86 F1 | 	sub	local01, #36
1d0fc     3C 00 90 AD |  if_e	jmp	#LR__2881
1d100     24 1E 06 F1 | 	add	local01, #36
1d104     0F 23 02 FB | 	rdlong	local03, local01
1d108     11 25 02 F6 | 	mov	local04, local03
1d10c     24 1E 86 F1 | 	sub	local01, #36
1d110     13 24 46 F7 | 	zerox	local04, #19
1d114     14 22 46 F0 | 	shr	local03, #20
1d118     02 22 66 F0 | 	shl	local03, #2
1d11c     ED 22 02 F1 | 	add	local03, __methods__
1d120     11 23 02 FB | 	rdlong	local03, local03
1d124     0F 13 02 F6 | 	mov	arg01, local01
1d128     F2 26 02 F6 | 	mov	local05, objptr
1d12c     12 E5 01 F6 | 	mov	objptr, local04
1d130     2D 22 62 FD | 	call	local03
1d134     13 E5 01 F6 | 	mov	objptr, local05
1d138     FD 20 02 F6 | 	mov	local02, result1
1d13c                 | LR__2881
1d13c     0F 13 02 F6 | 	mov	arg01, local01
1d140     00 14 06 F6 | 	mov	arg02, #0
1d144     34 16 06 F6 | 	mov	arg03, #52
1d148     98 00 A0 FD | 	call	#\builtin_bytefill_
1d14c     10 FB 01 F6 | 	mov	result1, local02
1d150                 | LR__2882
1d150     A7 F0 03 F6 | 	mov	ptra, fp
1d154     B2 00 A0 FD | 	call	#popregs_
1d158                 | __system___closeraw_ret
1d158     2D 00 64 FD | 	ret
1d15c                 | 
1d15c                 | __system___vfs_open_sdcardx
1d15c     0B 4A 05 F6 | 	mov	COUNT_, #11
1d160     A8 00 A0 FD | 	call	#pushregs_
1d164     09 23 02 F6 | 	mov	local03, arg01
1d168     0A 25 02 F6 | 	mov	local04, arg02
1d16c     0B 27 02 F6 | 	mov	local05, arg03
1d170     0C 29 02 F6 | 	mov	local06, arg04
1d174     01 00 00 FF 
1d178     24 12 06 F6 | 	mov	arg01, ##548
1d17c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d180     FD 2A 02 F6 | 	mov	local07, result1
1d184     01 00 00 FF 
1d188     34 12 06 F6 | 	mov	arg01, ##564
1d18c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1d190     FD 2C 02 F6 | 	mov	local08, result1
1d194     11 19 02 F6 | 	mov	arg04, local03
1d198     1F 18 C6 F0 | 	sar	arg04, #31
1d19c     11 17 02 F6 | 	mov	arg03, local03
1d1a0     01 12 06 F6 | 	mov	arg01, #1
1d1a4     00 14 06 F6 | 	mov	arg02, #0
1d1a8     48 DC BF FD | 	call	#__system___int64_shl
1d1ac     FD 1E 02 F6 | 	mov	local01, result1
1d1b0     FE 2E 02 F6 | 	mov	local09, result2
1d1b4     12 19 02 F6 | 	mov	arg04, local04
1d1b8     1F 18 C6 F0 | 	sar	arg04, #31
1d1bc     12 17 02 F6 | 	mov	arg03, local04
1d1c0     01 12 06 F6 | 	mov	arg01, #1
1d1c4     00 14 06 F6 | 	mov	arg02, #0
1d1c8     28 DC BF FD | 	call	#__system___int64_shl
1d1cc     FD 1E 42 F5 | 	or	local01, result1
1d1d0     FE 2E 42 F5 | 	or	local09, result2
1d1d4     13 19 02 F6 | 	mov	arg04, local05
1d1d8     1F 18 C6 F0 | 	sar	arg04, #31
1d1dc     13 17 02 F6 | 	mov	arg03, local05
1d1e0     01 12 06 F6 | 	mov	arg01, #1
1d1e4     00 14 06 F6 | 	mov	arg02, #0
1d1e8     08 DC BF FD | 	call	#__system___int64_shl
1d1ec     FD 1E 42 F5 | 	or	local01, result1
1d1f0     FE 2E 42 F5 | 	or	local09, result2
1d1f4     14 19 02 F6 | 	mov	arg04, local06
1d1f8     1F 18 C6 F0 | 	sar	arg04, #31
1d1fc     14 17 02 F6 | 	mov	arg03, local06
1d200     01 12 06 F6 | 	mov	arg01, #1
1d204     00 14 06 F6 | 	mov	arg02, #0
1d208     E8 DB BF FD | 	call	#__system___int64_shl
1d20c     17 15 02 F6 | 	mov	arg02, local09
1d210     FD 1E 42 F5 | 	or	local01, result1
1d214     0A FD 41 F5 | 	or	result2, arg02
1d218     FE 20 02 F6 | 	mov	local02, result2
1d21c     0F 13 02 F6 | 	mov	arg01, local01
1d220     10 15 02 F6 | 	mov	arg02, local02
1d224     04 DC BF FD | 	call	#__system___usepins
1d228     00 FA 0D F2 | 	cmp	result1, #0 wz
1d22c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d230     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1d234     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d238     00 FA 05 A6 |  if_e	mov	result1, #0
1d23c     B4 00 90 AD |  if_e	jmp	#LR__2892
1d240     0F 31 02 F6 | 	mov	local10, local01
1d244     10 2F 02 F6 | 	mov	local09, local02
1d248     01 00 00 FF 
1d24c     08 2A 06 F1 | 	add	local07, ##520
1d250     15 31 62 FC | 	wrlong	local10, local07
1d254     04 2A 06 F1 | 	add	local07, #4
1d258     15 2F 62 FC | 	wrlong	local09, local07
1d25c     01 00 00 FF 
1d260     0C 2A 86 F1 | 	sub	local07, ##524
1d264     14 1B 02 F6 | 	mov	arg05, local06
1d268     00 12 06 F6 | 	mov	arg01, #0
1d26c     11 15 02 F6 | 	mov	arg02, local03
1d270     12 17 02 F6 | 	mov	arg03, local04
1d274     13 19 02 F6 | 	mov	arg04, local05
1d278     F2 30 02 F6 | 	mov	local10, objptr
1d27c     15 E5 01 F6 | 	mov	objptr, local07
1d280     94 26 B0 FD | 	call	#_fatfs_cc_disk_setpins
1d284     18 E5 01 F6 | 	mov	objptr, local10
1d288     FD 32 0A F6 | 	mov	local11, result1 wz
1d28c     24 00 90 5D |  if_ne	jmp	#LR__2890
1d290     3E 01 00 FF 
1d294     56 14 06 F6 | 	mov	arg02, ##@LR__4277
1d298     16 13 02 F6 | 	mov	arg01, local08
1d29c     00 16 06 F6 | 	mov	arg03, #0
1d2a0     F2 32 02 F6 | 	mov	local11, objptr
1d2a4     15 E5 01 F6 | 	mov	objptr, local07
1d2a8     C4 5D B0 FD | 	call	#_fatfs_cc_f_mount
1d2ac     19 E5 01 F6 | 	mov	objptr, local11
1d2b0     FD 32 02 F6 | 	mov	local11, result1
1d2b4                 | LR__2890
1d2b4     00 32 0E F2 | 	cmp	local11, #0 wz
1d2b8     24 00 90 AD |  if_e	jmp	#LR__2891
1d2bc     0F 13 02 F6 | 	mov	arg01, local01
1d2c0     10 15 02 F6 | 	mov	arg02, local02
1d2c4     B8 DB BF FD | 	call	#__system___freepins
1d2c8     19 13 6A F6 | 	neg	arg01, local11 wz
1d2cc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d2d0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d2d4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d2d8     00 FA 05 F6 | 	mov	result1, #0
1d2dc     14 00 90 FD | 	jmp	#LR__2892
1d2e0                 | LR__2891
1d2e0     15 13 02 F6 | 	mov	arg01, local07
1d2e4     F2 32 02 F6 | 	mov	local11, objptr
1d2e8     15 E5 01 F6 | 	mov	objptr, local07
1d2ec     60 9A B0 FD | 	call	#_fatfs_cc_get_vfs
1d2f0     19 E5 01 F6 | 	mov	objptr, local11
1d2f4                 | LR__2892
1d2f4     A7 F0 03 F6 | 	mov	ptra, fp
1d2f8     B2 00 A0 FD | 	call	#popregs_
1d2fc                 | __system___vfs_open_sdcardx_ret
1d2fc     2D 00 64 FD | 	ret
1d300                 | 
1d300                 | __system____default_getc
1d300     03 4A 05 F6 | 	mov	COUNT_, #3
1d304     A8 00 A0 FD | 	call	#pushregs_
1d308     09 1F 02 F6 | 	mov	local01, arg01
1d30c     0F 21 02 FB | 	rdlong	local02, local01
1d310     08 20 06 F1 | 	add	local02, #8
1d314     10 23 02 FB | 	rdlong	local03, local02
1d318     02 22 CE F7 | 	test	local03, #2 wz
1d31c     0F 13 02 56 |  if_ne	mov	arg01, local01
1d320     00 01 B0 5D |  if_ne	call	#__system____default_flush
1d324     10 23 02 FB | 	rdlong	local03, local02
1d328     01 22 46 F5 | 	or	local03, #1
1d32c     10 23 62 FC | 	wrlong	local03, local02
1d330     08 20 86 F1 | 	sub	local02, #8
1d334     10 23 0A FB | 	rdlong	local03, local02 wz
1d338     0C 00 90 5D |  if_ne	jmp	#LR__2900
1d33c     0F 13 02 F6 | 	mov	arg01, local01
1d340     7C 15 B0 FD | 	call	#__system____default_filbuf
1d344     FD 22 02 F6 | 	mov	local03, result1
1d348                 | LR__2900
1d348     01 22 56 F2 | 	cmps	local03, #1 wc
1d34c     01 FA 65 C6 |  if_b	neg	result1, #1
1d350     1C 00 90 CD |  if_b	jmp	#LR__2901
1d354     01 22 86 F1 | 	sub	local03, #1
1d358     10 23 62 FC | 	wrlong	local03, local02
1d35c     04 20 06 F1 | 	add	local02, #4
1d360     10 23 02 FB | 	rdlong	local03, local02
1d364     11 FB C1 FA | 	rdbyte	result1, local03
1d368     01 22 06 F1 | 	add	local03, #1
1d36c     10 23 62 FC | 	wrlong	local03, local02
1d370                 | LR__2901
1d370     A7 F0 03 F6 | 	mov	ptra, fp
1d374     B2 00 A0 FD | 	call	#popregs_
1d378                 | __system____default_getc_ret
1d378     2D 00 64 FD | 	ret
1d37c                 | 
1d37c                 | __system____default_putc
1d37c     06 4A 05 F6 | 	mov	COUNT_, #6
1d380     A8 00 A0 FD | 	call	#pushregs_
1d384     09 1F 02 F6 | 	mov	local01, arg01
1d388     0A 21 02 F6 | 	mov	local02, arg02
1d38c     10 23 02 FB | 	rdlong	local03, local02
1d390     08 22 06 F1 | 	add	local03, #8
1d394     11 FB 01 FB | 	rdlong	result1, local03
1d398     01 FA CD F7 | 	test	result1, #1 wz
1d39c     10 13 02 56 |  if_ne	mov	arg01, local02
1d3a0     80 00 B0 5D |  if_ne	call	#__system____default_flush
1d3a4     11 25 02 FB | 	rdlong	local04, local03
1d3a8     02 24 46 F5 | 	or	local04, #2
1d3ac     11 25 62 FC | 	wrlong	local04, local03
1d3b0     08 22 86 F1 | 	sub	local03, #8
1d3b4     11 27 02 FB | 	rdlong	local05, local03
1d3b8     10 22 06 F1 | 	add	local03, #16
1d3bc     11 15 02 FB | 	rdlong	arg02, local03
1d3c0     10 22 86 F1 | 	sub	local03, #16
1d3c4     13 FB 01 F6 | 	mov	result1, local05
1d3c8     0A FB 01 F1 | 	add	result1, arg02
1d3cc     FD 1E 42 FC | 	wrbyte	local01, result1
1d3d0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d3d4     01 26 06 F1 | 	add	local05, #1
1d3d8     11 27 62 FC | 	wrlong	local05, local03
1d3dc     06 20 06 F1 | 	add	local02, #6
1d3e0     10 29 EA FA | 	rdword	local06, local02 wz
1d3e4     06 20 86 F1 | 	sub	local02, #6
1d3e8     0C 22 06 51 |  if_ne	add	local03, #12
1d3ec     11 25 02 5B |  if_ne	rdlong	local04, local03
1d3f0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1d3f4     0C 00 90 AD |  if_e	jmp	#LR__2910
1d3f8     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d3fc     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1d400     10 00 90 5D |  if_ne	jmp	#LR__2911
1d404                 | LR__2910
1d404     10 13 02 F6 | 	mov	arg01, local02
1d408     18 00 B0 FD | 	call	#__system____default_flush
1d40c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d410     01 1E 66 56 |  if_ne	neg	local01, #1
1d414                 | LR__2911
1d414     0F FB 01 F6 | 	mov	result1, local01
1d418     A7 F0 03 F6 | 	mov	ptra, fp
1d41c     B2 00 A0 FD | 	call	#popregs_
1d420                 | __system____default_putc_ret
1d420     2D 00 64 FD | 	ret
1d424                 | 
1d424                 | __system____default_flush
1d424     06 4A 05 F6 | 	mov	COUNT_, #6
1d428     A8 00 A0 FD | 	call	#pushregs_
1d42c     09 1F 02 F6 | 	mov	local01, arg01
1d430     0F 21 02 FB | 	rdlong	local02, local01
1d434     10 23 02 FB | 	rdlong	local03, local02
1d438     08 20 06 F1 | 	add	local02, #8
1d43c     10 FB 01 FB | 	rdlong	result1, local02
1d440     08 20 86 F1 | 	sub	local02, #8
1d444     02 FA CD F7 | 	test	result1, #2 wz
1d448     D0 00 90 AD |  if_e	jmp	#LR__2922
1d44c     01 22 56 F2 | 	cmps	local03, #1 wc
1d450     20 01 90 CD |  if_b	jmp	#LR__2924
1d454     08 1E 06 F1 | 	add	local01, #8
1d458     0F FB 01 FB | 	rdlong	result1, local01
1d45c     08 1E 86 F1 | 	sub	local01, #8
1d460     40 FA CD F7 | 	test	result1, #64 wz
1d464     68 00 90 AD |  if_e	jmp	#LR__2921
1d468     08 1E 06 F1 | 	add	local01, #8
1d46c     0F 17 02 FB | 	rdlong	arg03, local01
1d470     08 1E 86 F1 | 	sub	local01, #8
1d474     80 16 CE F7 | 	test	arg03, #128 wz
1d478     54 00 90 AD |  if_e	jmp	#LR__2920
1d47c     30 1E 06 F1 | 	add	local01, #48
1d480     0F 25 02 FB | 	rdlong	local04, local01
1d484     12 27 02 F6 | 	mov	local05, local04
1d488     30 1E 86 F1 | 	sub	local01, #48
1d48c     13 26 46 F7 | 	zerox	local05, #19
1d490     14 24 46 F0 | 	shr	local04, #20
1d494     02 24 66 F0 | 	shl	local04, #2
1d498     ED 24 02 F1 | 	add	local04, __methods__
1d49c     12 25 02 FB | 	rdlong	local04, local04
1d4a0     0F 13 02 F6 | 	mov	arg01, local01
1d4a4     00 14 06 F6 | 	mov	arg02, #0
1d4a8     02 16 06 F6 | 	mov	arg03, #2
1d4ac     F2 28 02 F6 | 	mov	local06, objptr
1d4b0     13 E5 01 F6 | 	mov	objptr, local05
1d4b4     2D 24 62 FD | 	call	local04
1d4b8     14 E5 01 F6 | 	mov	objptr, local06
1d4bc     08 1E 06 F1 | 	add	local01, #8
1d4c0     0F 29 02 FB | 	rdlong	local06, local01
1d4c4     80 28 26 F5 | 	andn	local06, #128
1d4c8     0F 29 62 FC | 	wrlong	local06, local01
1d4cc     08 1E 86 F1 | 	sub	local01, #8
1d4d0                 | LR__2920
1d4d0                 | LR__2921
1d4d0     18 1E 06 F1 | 	add	local01, #24
1d4d4     0F 25 02 FB | 	rdlong	local04, local01
1d4d8     12 27 02 F6 | 	mov	local05, local04
1d4dc     18 1E 86 F1 | 	sub	local01, #24
1d4e0     13 26 46 F7 | 	zerox	local05, #19
1d4e4     14 24 46 F0 | 	shr	local04, #20
1d4e8     02 24 66 F0 | 	shl	local04, #2
1d4ec     ED 24 02 F1 | 	add	local04, __methods__
1d4f0     12 25 02 FB | 	rdlong	local04, local04
1d4f4     10 20 06 F1 | 	add	local02, #16
1d4f8     10 15 02 FB | 	rdlong	arg02, local02
1d4fc     10 20 86 F1 | 	sub	local02, #16
1d500     0F 13 02 F6 | 	mov	arg01, local01
1d504     11 17 02 F6 | 	mov	arg03, local03
1d508     F2 28 02 F6 | 	mov	local06, objptr
1d50c     13 E5 01 F6 | 	mov	objptr, local05
1d510     2D 24 62 FD | 	call	local04
1d514     14 E5 01 F6 | 	mov	objptr, local06
1d518     58 00 90 FD | 	jmp	#LR__2924
1d51c                 | LR__2922
1d51c     08 20 06 F1 | 	add	local02, #8
1d520     10 29 02 FB | 	rdlong	local06, local02
1d524     08 20 86 F1 | 	sub	local02, #8
1d528     01 28 CE F7 | 	test	local06, #1 wz
1d52c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d530     40 00 90 AD |  if_e	jmp	#LR__2923
1d534     30 1E 06 F1 | 	add	local01, #48
1d538     0F 25 02 FB | 	rdlong	local04, local01
1d53c     12 27 02 F6 | 	mov	local05, local04
1d540     30 1E 86 F1 | 	sub	local01, #48
1d544     13 26 46 F7 | 	zerox	local05, #19
1d548     14 24 46 F0 | 	shr	local04, #20
1d54c     02 24 66 F0 | 	shl	local04, #2
1d550     ED 24 02 F1 | 	add	local04, __methods__
1d554     12 25 02 FB | 	rdlong	local04, local04
1d558     0F 13 02 F6 | 	mov	arg01, local01
1d55c     11 15 62 F6 | 	neg	arg02, local03
1d560     01 16 06 F6 | 	mov	arg03, #1
1d564     F2 28 02 F6 | 	mov	local06, objptr
1d568     13 E5 01 F6 | 	mov	objptr, local05
1d56c     2D 24 62 FD | 	call	local04
1d570     14 E5 01 F6 | 	mov	objptr, local06
1d574                 | LR__2923
1d574                 | LR__2924
1d574     10 01 68 FC | 	wrlong	#0, local02
1d578     04 20 06 F1 | 	add	local02, #4
1d57c     10 01 68 FC | 	wrlong	#0, local02
1d580     04 20 06 F1 | 	add	local02, #4
1d584     10 01 68 FC | 	wrlong	#0, local02
1d588     00 FA 05 F6 | 	mov	result1, #0
1d58c     A7 F0 03 F6 | 	mov	ptra, fp
1d590     B2 00 A0 FD | 	call	#popregs_
1d594                 | __system____default_flush_ret
1d594     2D 00 64 FD | 	ret
1d598                 | 
1d598                 | __system____default_buffer_init
1d598     02 4A 05 F6 | 	mov	COUNT_, #2
1d59c     A8 00 A0 FD | 	call	#pushregs_
1d5a0     09 1F 02 F6 | 	mov	local01, arg01
1d5a4     0F 21 02 FB | 	rdlong	local02, local01
1d5a8     0F 13 02 F6 | 	mov	arg01, local01
1d5ac     F8 02 B0 FD | 	call	#__system___isatty
1d5b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d5b4     06 1E 06 51 |  if_ne	add	local01, #6
1d5b8     0F 0B 58 5C |  if_ne	wrword	#5, local01
1d5bc     06 1E 06 A1 |  if_e	add	local01, #6
1d5c0     0F 0D 58 AC |  if_e	wrword	#6, local01
1d5c4     14 20 06 F1 | 	add	local02, #20
1d5c8     10 1F 02 F6 | 	mov	local01, local02
1d5cc     04 20 86 F1 | 	sub	local02, #4
1d5d0     10 1F 62 FC | 	wrlong	local01, local02
1d5d4     04 20 86 F1 | 	sub	local02, #4
1d5d8     02 00 80 FF 
1d5dc     10 01 68 FC | 	wrlong	##1024, local02
1d5e0     00 FA 05 F6 | 	mov	result1, #0
1d5e4     A7 F0 03 F6 | 	mov	ptra, fp
1d5e8     B2 00 A0 FD | 	call	#popregs_
1d5ec                 | __system____default_buffer_init_ret
1d5ec     2D 00 64 FD | 	ret
1d5f0                 | 
1d5f0                 | __system__stat
1d5f0     04 4A 05 F6 | 	mov	COUNT_, #4
1d5f4     A8 00 A0 FD | 	call	#pushregs_
1d5f8     0A 1F 02 F6 | 	mov	local01, arg02
1d5fc     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1d600     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1d604     09 15 02 F6 | 	mov	arg02, arg01
1d608     10 13 02 F6 | 	mov	arg01, local02
1d60c     00 16 06 F6 | 	mov	arg03, #0
1d610     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1d614     48 BA BF FD | 	call	#__system____getvfsforfile
1d618     FD 22 0A F6 | 	mov	local03, result1 wz
1d61c     10 00 90 AD |  if_e	jmp	#LR__2930
1d620     34 22 06 F1 | 	add	local03, #52
1d624     11 17 0A FB | 	rdlong	arg03, local03 wz
1d628     34 22 86 F1 | 	sub	local03, #52
1d62c     14 00 90 5D |  if_ne	jmp	#LR__2931
1d630                 | LR__2930
1d630     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d634     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1d638     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d63c     01 FA 65 F6 | 	neg	result1, #1
1d640     68 00 90 FD | 	jmp	#LR__2932
1d644                 | LR__2931
1d644     0F 13 02 F6 | 	mov	arg01, local01
1d648     00 14 06 F6 | 	mov	arg02, #0
1d64c     30 16 06 F6 | 	mov	arg03, #48
1d650     09 25 02 F6 | 	mov	local04, arg01
1d654     98 00 A0 FD | 	call	#\builtin_bytefill_
1d658     12 FB 01 F6 | 	mov	result1, local04
1d65c     10 13 CA FA | 	rdbyte	arg01, local02 wz
1d660     08 1E 06 A1 |  if_e	add	local01, #8
1d664     08 00 80 AF 
1d668     0F FF 6B AC |  if_e	wrlong	##4607, local01
1d66c     00 FA 05 A6 |  if_e	mov	result1, #0
1d670     38 00 90 AD |  if_e	jmp	#LR__2932
1d674     34 22 06 F1 | 	add	local03, #52
1d678     11 23 02 FB | 	rdlong	local03, local03
1d67c     11 25 02 F6 | 	mov	local04, local03
1d680     13 22 46 F7 | 	zerox	local03, #19
1d684     14 24 46 F0 | 	shr	local04, #20
1d688     02 24 66 F0 | 	shl	local04, #2
1d68c     ED 24 02 F1 | 	add	local04, __methods__
1d690     12 25 02 FB | 	rdlong	local04, local04
1d694     10 13 02 F6 | 	mov	arg01, local02
1d698     0F 15 02 F6 | 	mov	arg02, local01
1d69c     F2 20 02 F6 | 	mov	local02, objptr
1d6a0     11 E5 01 F6 | 	mov	objptr, local03
1d6a4     2D 24 62 FD | 	call	local04
1d6a8     10 E5 01 F6 | 	mov	objptr, local02
1d6ac                 | LR__2932
1d6ac     A7 F0 03 F6 | 	mov	ptra, fp
1d6b0     B2 00 A0 FD | 	call	#popregs_
1d6b4                 | __system__stat_ret
1d6b4     2D 00 64 FD | 	ret
1d6b8                 | 
1d6b8                 | __system__read
1d6b8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d6bc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d6c0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1d6c4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d6c8     01 FA 65 36 |  if_ae	neg	result1, #1
1d6cc     20 00 90 3D |  if_ae	jmp	#LR__2940
1d6d0     34 12 06 FD | 	qmul	arg01, #52
1d6d4     02 00 00 FF 
1d6d8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1d6dc     18 12 62 FD | 	getqx	arg01
1d6e0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1d6e4     02 00 00 FF 
1d6e8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1d6ec     E8 0E B0 FD | 	call	#__system___vfsread
1d6f0                 | LR__2940
1d6f0                 | __system__read_ret
1d6f0     2D 00 64 FD | 	ret
1d6f4                 | 
1d6f4                 | __system__close
1d6f4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d6f8     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d6fc     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1d700     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d704     01 FA 65 36 |  if_ae	neg	result1, #1
1d708     20 00 90 3D |  if_ae	jmp	#LR__2950
1d70c     34 12 06 FD | 	qmul	arg01, #52
1d710     02 00 00 FF 
1d714     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1d718     18 12 62 FD | 	getqx	arg01
1d71c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1d720     02 00 00 FF 
1d724     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1d728     4C F9 BF FD | 	call	#__system___closeraw
1d72c                 | LR__2950
1d72c                 | __system__close_ret
1d72c     2D 00 64 FD | 	ret
1d730                 | 
1d730                 | __system__lseek
1d730     06 4A 05 F6 | 	mov	COUNT_, #6
1d734     A8 00 A0 FD | 	call	#pushregs_
1d738     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d73c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1d740     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1d744     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1d748     01 FA 65 36 |  if_ae	neg	result1, #1
1d74c     C4 00 90 3D |  if_ae	jmp	#LR__2961
1d750     34 12 06 FD | 	qmul	arg01, #52
1d754     02 00 00 FF 
1d758     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1d75c     18 1E 62 FD | 	getqx	local01
1d760     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1d764     30 1E 06 F1 | 	add	local01, #48
1d768     0F 13 0A FB | 	rdlong	arg01, local01 wz
1d76c     30 1E 86 F1 | 	sub	local01, #48
1d770     02 00 00 FF 
1d774     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1d778     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d77c     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1d780     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d784     01 FA 65 A6 |  if_e	neg	result1, #1
1d788     88 00 90 AD |  if_e	jmp	#LR__2961
1d78c     08 1E 06 F1 | 	add	local01, #8
1d790     0F 21 02 FB | 	rdlong	local02, local01
1d794     08 1E 86 F1 | 	sub	local01, #8
1d798     40 20 CE F7 | 	test	local02, #64 wz
1d79c     08 1E 06 51 |  if_ne	add	local01, #8
1d7a0     0F 21 02 5B |  if_ne	rdlong	local02, local01
1d7a4     80 20 46 55 |  if_ne	or	local02, #128
1d7a8     0F 21 62 5C |  if_ne	wrlong	local02, local01
1d7ac     08 1E 86 51 |  if_ne	sub	local01, #8
1d7b0     30 1E 06 F1 | 	add	local01, #48
1d7b4     0F 23 02 FB | 	rdlong	local03, local01
1d7b8     11 25 02 F6 | 	mov	local04, local03
1d7bc     30 1E 86 F1 | 	sub	local01, #48
1d7c0     13 24 46 F7 | 	zerox	local04, #19
1d7c4     14 22 46 F0 | 	shr	local03, #20
1d7c8     02 22 66 F0 | 	shl	local03, #2
1d7cc     ED 22 02 F1 | 	add	local03, __methods__
1d7d0     11 23 02 FB | 	rdlong	local03, local03
1d7d4     0F 13 02 F6 | 	mov	arg01, local01
1d7d8     F2 26 02 F6 | 	mov	local05, objptr
1d7dc     12 E5 01 F6 | 	mov	objptr, local04
1d7e0     2D 22 62 FD | 	call	local03
1d7e4     13 E5 01 F6 | 	mov	objptr, local05
1d7e8     FD 28 02 F6 | 	mov	local06, result1
1d7ec     00 28 56 F2 | 	cmps	local06, #0 wc
1d7f0     1C 00 90 3D |  if_ae	jmp	#LR__2960
1d7f4     14 13 6A F6 | 	neg	arg01, local06 wz
1d7f8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d7fc     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d800     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d804     01 FA 65 56 |  if_ne	neg	result1, #1
1d808     00 FA 05 A6 |  if_e	mov	result1, #0
1d80c     04 00 90 FD | 	jmp	#LR__2961
1d810                 | LR__2960
1d810     14 FB 01 F6 | 	mov	result1, local06
1d814                 | LR__2961
1d814     A7 F0 03 F6 | 	mov	ptra, fp
1d818     B2 00 A0 FD | 	call	#popregs_
1d81c                 | __system__lseek_ret
1d81c     2D 00 64 FD | 	ret
1d820                 | 
1d820                 | __system___ioctl
1d820     03 4A 05 F6 | 	mov	COUNT_, #3
1d824     A8 00 A0 FD | 	call	#pushregs_
1d828     00 12 4E F2 | 	cmps	arg01, #0 wz
1d82c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1d830     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1d834     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1d838     01 FA 65 A6 |  if_e	neg	result1, #1
1d83c     5C 00 90 AD |  if_e	jmp	#LR__2971
1d840     28 12 06 F1 | 	add	arg01, #40
1d844     09 1F 02 FB | 	rdlong	local01, arg01
1d848     0F 21 02 F6 | 	mov	local02, local01
1d84c     28 12 86 F1 | 	sub	arg01, #40
1d850     13 20 46 F7 | 	zerox	local02, #19
1d854     14 1E 46 F0 | 	shr	local01, #20
1d858     02 1E 66 F0 | 	shl	local01, #2
1d85c     ED 1E 02 F1 | 	add	local01, __methods__
1d860     0F 1F 02 FB | 	rdlong	local01, local01
1d864     F2 22 02 F6 | 	mov	local03, objptr
1d868     10 E5 01 F6 | 	mov	objptr, local02
1d86c     2D 1E 62 FD | 	call	local01
1d870     11 E5 01 F6 | 	mov	objptr, local03
1d874     FD 12 0A F6 | 	mov	arg01, result1 wz
1d878     1C 00 90 AD |  if_e	jmp	#LR__2970
1d87c     00 12 4E F2 | 	cmps	arg01, #0 wz
1d880     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1d884     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1d888     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1d88c     01 FA 65 56 |  if_ne	neg	result1, #1
1d890     00 FA 05 A6 |  if_e	mov	result1, #0
1d894     04 00 90 FD | 	jmp	#LR__2971
1d898                 | LR__2970
1d898     00 FA 05 F6 | 	mov	result1, #0
1d89c                 | LR__2971
1d89c     A7 F0 03 F6 | 	mov	ptra, fp
1d8a0     B2 00 A0 FD | 	call	#popregs_
1d8a4                 | __system___ioctl_ret
1d8a4     2D 00 64 FD | 	ret
1d8a8                 | 
1d8a8                 | __system___isatty
1d8a8     00 4A 05 F6 | 	mov	COUNT_, #0
1d8ac     A8 00 A0 FD | 	call	#pushregs_
1d8b0     0C F0 07 F1 | 	add	ptra, #12
1d8b4     04 4E 05 F1 | 	add	fp, #4
1d8b8     A7 12 62 FC | 	wrlong	arg01, fp
1d8bc     04 4E 05 F1 | 	add	fp, #4
1d8c0     A7 16 02 F6 | 	mov	arg03, fp
1d8c4     08 4E 85 F1 | 	sub	fp, #8
1d8c8     00 15 06 F6 | 	mov	arg02, #256
1d8cc     50 FF BF FD | 	call	#__system___ioctl
1d8d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d8d4     01 FA 05 A6 |  if_e	mov	result1, #1
1d8d8     00 FA 05 56 |  if_ne	mov	result1, #0
1d8dc     A7 F0 03 F6 | 	mov	ptra, fp
1d8e0     B2 00 A0 FD | 	call	#popregs_
1d8e4                 | __system___isatty_ret
1d8e4     2D 00 64 FD | 	ret
1d8e8                 | 
1d8e8                 | __system____getftab
1d8e8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1d8ec     34 12 06 CD |  if_b	qmul	arg01, #52
1d8f0     00 FA 05 36 |  if_ae	mov	result1, #0
1d8f4     02 00 00 CF 
1d8f8     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1d8fc     18 FA 61 CD |  if_b	getqx	result1
1d900     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1d904     02 00 00 CF 
1d908     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1d90c                 | __system____getftab_ret
1d90c     2D 00 64 FD | 	ret
1d910                 | 
1d910                 | __system__strncpy
1d910     09 01 02 F6 | 	mov	_var01, arg01
1d914                 | LR__2980
1d914     01 16 86 F1 | 	sub	arg03, #1
1d918     00 16 56 F2 | 	cmps	arg03, #0 wc
1d91c     18 00 90 CD |  if_b	jmp	#LR__2981
1d920     0A FB C1 FA | 	rdbyte	result1, arg02
1d924     00 FB 41 FC | 	wrbyte	result1, _var01
1d928     01 14 06 F1 | 	add	arg02, #1
1d92c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1d930     01 00 06 F1 | 	add	_var01, #1
1d934     DC FF 9F 5D |  if_ne	jmp	#LR__2980
1d938                 | LR__2981
1d938     97 0C 48 FB | 	callpa	#(@LR__2983-@LR__2982)>>2,fcache_load_ptr_
1d93c                 | LR__2982
1d93c     01 16 86 F1 | 	sub	arg03, #1
1d940     00 16 56 F2 | 	cmps	arg03, #0 wc
1d944     00 03 02 36 |  if_ae	mov	_var02, _var01
1d948     01 00 06 31 |  if_ae	add	_var01, #1
1d94c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1d950     E8 FF 9F 3D |  if_ae	jmp	#LR__2982
1d954                 | LR__2983
1d954     09 FB 01 F6 | 	mov	result1, arg01
1d958                 | __system__strncpy_ret
1d958     2D 00 64 FD | 	ret
1d95c                 | 
1d95c                 | __system__strncat
1d95c     00 14 4E F2 | 	cmps	arg02, #0 wz
1d960     50 00 90 AD |  if_e	jmp	#LR__2994
1d964     01 16 16 F2 | 	cmp	arg03, #1 wc
1d968     48 00 90 CD |  if_b	jmp	#LR__2994
1d96c     09 01 02 F6 | 	mov	_var01, arg01
1d970     97 1E 48 FB | 	callpa	#(@LR__2992-@LR__2990)>>2,fcache_load_ptr_
1d974                 | LR__2990
1d974     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1d978     01 00 06 51 |  if_ne	add	_var01, #1
1d97c     F4 FF 9F 5D |  if_ne	jmp	#LR__2990
1d980     0B 03 02 F6 | 	mov	_var02, arg03
1d984                 | LR__2991
1d984     0A 05 C2 FA | 	rdbyte	_var03, arg02
1d988     02 07 02 F6 | 	mov	_var04, _var03
1d98c     07 06 4E F7 | 	zerox	_var04, #7 wz
1d990     01 14 06 F1 | 	add	arg02, #1
1d994     18 00 90 AD |  if_e	jmp	#LR__2993
1d998     01 02 86 F1 | 	sub	_var02, #1
1d99c     00 02 56 F2 | 	cmps	_var02, #0 wc
1d9a0     00 07 02 36 |  if_ae	mov	_var04, _var01
1d9a4     01 00 06 31 |  if_ae	add	_var01, #1
1d9a8     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1d9ac     D4 FF 9F 3D |  if_ae	jmp	#LR__2991
1d9b0                 | LR__2992
1d9b0                 | LR__2993
1d9b0     00 01 48 FC | 	wrbyte	#0, _var01
1d9b4                 | LR__2994
1d9b4     09 FB 01 F6 | 	mov	result1, arg01
1d9b8                 | __system__strncat_ret
1d9b8     2D 00 64 FD | 	ret
1d9bc                 | 
1d9bc                 | __system__strncmp
1d9bc     09 01 0A F6 | 	mov	_var01, arg01 wz
1d9c0     14 00 90 5D |  if_ne	jmp	#LR__3000
1d9c4     00 14 0E F2 | 	cmp	arg02, #0 wz
1d9c8     01 02 66 56 |  if_ne	neg	_var02, #1
1d9cc     00 02 06 A6 |  if_e	mov	_var02, #0
1d9d0     01 FB 01 F6 | 	mov	result1, _var02
1d9d4     74 00 90 FD | 	jmp	#__system__strncmp_ret
1d9d8                 | LR__3000
1d9d8     00 14 0E F2 | 	cmp	arg02, #0 wz
1d9dc     01 FA 05 A6 |  if_e	mov	result1, #1
1d9e0     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1d9e4     0B 05 02 F6 | 	mov	_var03, arg03
1d9e8     97 16 48 FB | 	callpa	#(@LR__3002-@LR__3001)>>2,fcache_load_ptr_
1d9ec                 | LR__3001
1d9ec     00 07 C2 FA | 	rdbyte	_var04, _var01
1d9f0     0A 09 02 F6 | 	mov	_var05, arg02
1d9f4     04 0B C2 FA | 	rdbyte	_var06, _var05
1d9f8     01 04 86 F1 | 	sub	_var03, #1
1d9fc     00 04 56 F2 | 	cmps	_var03, #0 wc
1da00     01 00 06 F1 | 	add	_var01, #1
1da04     01 14 06 F1 | 	add	arg02, #1
1da08     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1da0c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3003
1da10     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1da14     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3001
1da18                 | LR__3002
1da18                 | LR__3003
1da18     00 04 56 F2 | 	cmps	_var03, #0 wc
1da1c     00 FA 05 C6 |  if_b	mov	result1, #0
1da20     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1da24     05 07 0A F2 | 	cmp	_var04, _var06 wz
1da28     00 FA 05 A6 |  if_e	mov	result1, #0
1da2c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1da30     00 06 0E F2 | 	cmp	_var04, #0 wz
1da34     01 FA 65 A6 |  if_e	neg	result1, #1
1da38     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1da3c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1da40     01 FA 05 A6 |  if_e	mov	result1, #1
1da44     03 FB 01 56 |  if_ne	mov	result1, _var04
1da48     05 FB 81 51 |  if_ne	sub	result1, _var06
1da4c                 | __system__strncmp_ret
1da4c     2D 00 64 FD | 	ret
1da50                 | 
1da50                 | __system____root_opendir
1da50     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1da54     04 12 06 F1 | 	add	arg01, #4
1da58     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1da5c     00 FA 05 F6 | 	mov	result1, #0
1da60     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1da64                 | __system____root_opendir_ret
1da64     2D 00 64 FD | 	ret
1da68                 | 
1da68                 | __system____root_readdir
1da68     03 4A 05 F6 | 	mov	COUNT_, #3
1da6c     A8 00 A0 FD | 	call	#pushregs_
1da70     09 1F 02 F6 | 	mov	local01, arg01
1da74     0A 21 02 F6 | 	mov	local02, arg02
1da78     04 1E 06 F1 | 	add	local01, #4
1da7c     0F 23 02 FB | 	rdlong	local03, local01
1da80     04 1E 86 F1 | 	sub	local01, #4
1da84                 | LR__3010
1da84     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1da88     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1da8c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1da90     01 FA 65 A6 |  if_e	neg	result1, #1
1da94     48 00 90 AD |  if_e	jmp	#LR__3011
1da98     11 17 0A FB | 	rdlong	arg03, local03 wz
1da9c     04 22 06 A1 |  if_e	add	local03, #4
1daa0     E0 FF 9F AD |  if_e	jmp	#LR__3010
1daa4     11 15 02 FB | 	rdlong	arg02, local03
1daa8     01 14 06 F1 | 	add	arg02, #1
1daac     10 13 02 F6 | 	mov	arg01, local02
1dab0     40 16 06 F6 | 	mov	arg03, #64
1dab4     58 FE BF FD | 	call	#__system__strncpy
1dab8     50 20 06 F1 | 	add	local02, #80
1dabc     10 03 48 FC | 	wrbyte	#1, local02
1dac0     08 20 86 F1 | 	sub	local02, #8
1dac4     10 01 68 FC | 	wrlong	#0, local02
1dac8     04 20 06 F1 | 	add	local02, #4
1dacc     10 01 68 FC | 	wrlong	#0, local02
1dad0     04 22 06 F1 | 	add	local03, #4
1dad4     04 1E 06 F1 | 	add	local01, #4
1dad8     0F 23 62 FC | 	wrlong	local03, local01
1dadc     00 FA 05 F6 | 	mov	result1, #0
1dae0                 | LR__3011
1dae0     A7 F0 03 F6 | 	mov	ptra, fp
1dae4     B2 00 A0 FD | 	call	#popregs_
1dae8                 | __system____root_readdir_ret
1dae8     2D 00 64 FD | 	ret
1daec                 | 
1daec                 | __system____root_closedir
1daec     00 FA 05 F6 | 	mov	result1, #0
1daf0                 | __system____root_closedir_ret
1daf0     2D 00 64 FD | 	ret
1daf4                 | 
1daf4                 | __system____root_stat
1daf4     0A 01 02 F6 | 	mov	_var01, arg02
1daf8     00 13 02 F6 | 	mov	arg01, _var01
1dafc     00 14 06 F6 | 	mov	arg02, #0
1db00     30 16 06 F6 | 	mov	arg03, #48
1db04     98 00 A0 FD | 	call	#\builtin_bytefill_
1db08     08 00 06 F1 | 	add	_var01, #8
1db0c     08 00 80 FF 
1db10     00 FF 6B FC | 	wrlong	##4607, _var01
1db14     00 FA 05 F6 | 	mov	result1, #0
1db18                 | __system____root_stat_ret
1db18     2D 00 64 FD | 	ret
1db1c                 | 
1db1c                 | __system___normalizeName
1db1c     00 00 06 F6 | 	mov	_var01, #0
1db20     09 03 02 F6 | 	mov	_var02, arg01
1db24     01 05 02 F6 | 	mov	_var03, _var02
1db28                 | LR__3020
1db28     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1db2c     5C 01 90 AD |  if_e	jmp	#LR__3039
1db30     00 00 0E F2 | 	cmp	_var01, #0 wz
1db34     02 07 02 56 |  if_ne	mov	_var04, _var03
1db38     01 04 06 51 |  if_ne	add	_var03, #1
1db3c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1db40     00 00 06 56 |  if_ne	mov	_var01, #0
1db44     01 07 C2 FA | 	rdbyte	_var04, _var02
1db48     2E 06 0E F2 | 	cmp	_var04, #46 wz
1db4c     D8 00 90 5D |  if_ne	jmp	#LR__3032
1db50     01 02 06 F1 | 	add	_var02, #1
1db54     01 07 C2 FA | 	rdbyte	_var04, _var02
1db58     01 02 86 F1 | 	sub	_var02, #1
1db5c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1db60     18 00 90 AD |  if_e	jmp	#LR__3021
1db64     01 02 06 F1 | 	add	_var02, #1
1db68     01 09 C2 FA | 	rdbyte	_var05, _var02
1db6c     01 02 86 F1 | 	sub	_var02, #1
1db70     04 0B 02 F6 | 	mov	_var06, _var05
1db74     07 0A 4E F7 | 	zerox	_var06, #7 wz
1db78     10 00 90 5D |  if_ne	jmp	#LR__3022
1db7c                 | LR__3021
1db7c     01 0D 02 F6 | 	mov	_var07, _var02
1db80     01 0C 06 F1 | 	add	_var07, #1
1db84     06 03 02 F6 | 	mov	_var02, _var07
1db88     E0 00 90 FD | 	jmp	#LR__3036
1db8c                 | LR__3022
1db8c     01 02 06 F1 | 	add	_var02, #1
1db90     01 0D C2 FA | 	rdbyte	_var07, _var02
1db94     01 02 86 F1 | 	sub	_var02, #1
1db98     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1db9c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1dba0     84 00 90 5D |  if_ne	jmp	#LR__3031
1dba4     02 02 06 F1 | 	add	_var02, #2
1dba8     01 0D C2 FA | 	rdbyte	_var07, _var02
1dbac     02 02 86 F1 | 	sub	_var02, #2
1dbb0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1dbb4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dbb8     18 00 90 AD |  if_e	jmp	#LR__3023
1dbbc     02 02 06 F1 | 	add	_var02, #2
1dbc0     01 09 C2 FA | 	rdbyte	_var05, _var02
1dbc4     02 02 86 F1 | 	sub	_var02, #2
1dbc8     04 0B 02 F6 | 	mov	_var06, _var05
1dbcc     07 0A 4E F7 | 	zerox	_var06, #7 wz
1dbd0     54 00 90 5D |  if_ne	jmp	#LR__3030
1dbd4                 | LR__3023
1dbd4     02 02 06 F1 | 	add	_var02, #2
1dbd8     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1dbdc     40 00 90 ED |  if_be	jmp	#LR__3029
1dbe0     02 0F 02 F6 | 	mov	_var08, _var03
1dbe4     01 0E 86 F1 | 	sub	_var08, #1
1dbe8                 | LR__3024
1dbe8     07 07 C2 FA | 	rdbyte	_var04, _var08
1dbec     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dbf0     0C 00 90 5D |  if_ne	jmp	#LR__3025
1dbf4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1dbf8     01 0E 86 11 |  if_a	sub	_var08, #1
1dbfc     E8 FF 9F 1D |  if_a	jmp	#LR__3024
1dc00                 | LR__3025
1dc00     97 0C 48 FB | 	callpa	#(@LR__3027-@LR__3026)>>2,fcache_load_ptr_
1dc04                 | LR__3026
1dc04     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1dc08     10 00 90 ED |  if_be	jmp	#LR__3028
1dc0c     07 07 C2 FA | 	rdbyte	_var04, _var08
1dc10     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dc14     01 0E 86 51 |  if_ne	sub	_var08, #1
1dc18     E8 FF 9F 5D |  if_ne	jmp	#LR__3026
1dc1c                 | LR__3027
1dc1c                 | LR__3028
1dc1c     07 05 02 F6 | 	mov	_var03, _var08
1dc20                 | LR__3029
1dc20     01 00 06 F6 | 	mov	_var01, #1
1dc24     44 00 90 FD | 	jmp	#LR__3036
1dc28                 | LR__3030
1dc28                 | LR__3031
1dc28                 | LR__3032
1dc28     97 18 48 FB | 	callpa	#(@LR__3034-@LR__3033)>>2,fcache_load_ptr_
1dc2c                 | LR__3033
1dc2c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1dc30     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1dc34     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1dc38     20 00 90 AD |  if_e	jmp	#LR__3035
1dc3c     01 0B 02 F6 | 	mov	_var06, _var02
1dc40     01 09 02 F6 | 	mov	_var05, _var02
1dc44     01 08 06 F1 | 	add	_var05, #1
1dc48     05 11 C2 FA | 	rdbyte	_var09, _var06
1dc4c     04 03 02 F6 | 	mov	_var02, _var05
1dc50     02 11 42 FC | 	wrbyte	_var09, _var03
1dc54     01 04 06 F1 | 	add	_var03, #1
1dc58     D0 FF 9F FD | 	jmp	#LR__3033
1dc5c                 | LR__3034
1dc5c                 | LR__3035
1dc5c     01 07 C2 FA | 	rdbyte	_var04, _var02
1dc60     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dc64     C0 FE 9F 5D |  if_ne	jmp	#LR__3020
1dc68     01 00 06 F6 | 	mov	_var01, #1
1dc6c                 | LR__3036
1dc6c     97 0C 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
1dc70                 | LR__3037
1dc70     01 07 C2 FA | 	rdbyte	_var04, _var02
1dc74     2F 06 0E F2 | 	cmp	_var04, #47 wz
1dc78     01 0D 02 A6 |  if_e	mov	_var07, _var02
1dc7c     01 0C 06 A1 |  if_e	add	_var07, #1
1dc80     06 03 02 A6 |  if_e	mov	_var02, _var07
1dc84     E8 FF 9F AD |  if_e	jmp	#LR__3037
1dc88                 | LR__3038
1dc88     9C FE 9F FD | 	jmp	#LR__3020
1dc8c                 | LR__3039
1dc8c     02 01 48 FC | 	wrbyte	#0, _var03
1dc90                 | __system___normalizeName_ret
1dc90     2D 00 64 FD | 	ret
1dc94                 | 
1dc94                 | __system___strrev
1dc94     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1dc98     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1dc9c     09 03 02 F6 | 	mov	_var02, arg01
1dca0     97 1A 48 FB | 	callpa	#(@LR__3042-@LR__3040)>>2,fcache_load_ptr_
1dca4                 | LR__3040
1dca4     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1dca8     01 02 06 51 |  if_ne	add	_var02, #1
1dcac     F4 FF 9F 5D |  if_ne	jmp	#LR__3040
1dcb0     01 02 86 F1 | 	sub	_var02, #1
1dcb4                 | LR__3041
1dcb4     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1dcb8     1C 00 90 ED |  if_be	jmp	#LR__3043
1dcbc     09 01 C2 FA | 	rdbyte	_var01, arg01
1dcc0     01 05 C2 FA | 	rdbyte	_var03, _var02
1dcc4     09 05 42 FC | 	wrbyte	_var03, arg01
1dcc8     01 01 42 FC | 	wrbyte	_var01, _var02
1dccc     01 12 06 F1 | 	add	arg01, #1
1dcd0     01 02 86 F1 | 	sub	_var02, #1
1dcd4     DC FF 9F FD | 	jmp	#LR__3041
1dcd8                 | LR__3042
1dcd8                 | LR__3043
1dcd8                 | __system___strrev_ret
1dcd8     2D 00 64 FD | 	ret
1dcdc                 | 
1dcdc                 | __system___fmtpad
1dcdc     06 4A 05 F6 | 	mov	COUNT_, #6
1dce0     A8 00 A0 FD | 	call	#pushregs_
1dce4     09 1F 02 F6 | 	mov	local01, arg01
1dce8     0A 21 02 F6 | 	mov	local02, arg02
1dcec     0B 23 02 F6 | 	mov	local03, arg03
1dcf0     10 13 EA F8 | 	getbyte	arg01, local02, #1
1dcf4     16 20 46 F0 | 	shr	local02, #22
1dcf8     03 20 0E F5 | 	and	local02, #3 wz
1dcfc     00 24 06 F6 | 	mov	local04, #0
1dd00     01 20 06 A6 |  if_e	mov	local02, #1
1dd04     0C 21 CA F7 | 	test	local02, arg04 wz
1dd08     00 FA 05 A6 |  if_e	mov	result1, #0
1dd0c     88 00 90 AD |  if_e	jmp	#LR__3053
1dd10     09 23 C2 F2 | 	subr	local03, arg01
1dd14     01 22 56 F2 | 	cmps	local03, #1 wc
1dd18     00 FA 05 C6 |  if_b	mov	result1, #0
1dd1c     78 00 90 CD |  if_b	jmp	#LR__3053
1dd20     03 20 0E F2 | 	cmp	local02, #3 wz
1dd24     18 00 90 5D |  if_ne	jmp	#LR__3050
1dd28     01 18 0E F2 | 	cmp	arg04, #1 wz
1dd2c     6E 20 62 FD | 	wrz	local02
1dd30     10 23 02 F1 | 	add	local03, local02
1dd34     11 23 52 F6 | 	abs	local03, local03 wc
1dd38     01 22 46 F0 | 	shr	local03, #1
1dd3c     11 23 82 F6 | 	negc	local03, local03
1dd40                 | LR__3050
1dd40     01 22 56 F2 | 	cmps	local03, #1 wc
1dd44     4C 00 90 CD |  if_b	jmp	#LR__3052
1dd48     11 27 02 F6 | 	mov	local05, local03
1dd4c                 | LR__3051
1dd4c     0F 21 02 F6 | 	mov	local02, local01
1dd50     0F 29 02 F6 | 	mov	local06, local01
1dd54     13 20 46 F7 | 	zerox	local02, #19
1dd58     14 28 46 F0 | 	shr	local06, #20
1dd5c     02 28 66 F0 | 	shl	local06, #2
1dd60     ED 28 02 F1 | 	add	local06, __methods__
1dd64     14 29 02 FB | 	rdlong	local06, local06
1dd68     20 12 06 F6 | 	mov	arg01, #32
1dd6c     F2 22 02 F6 | 	mov	local03, objptr
1dd70     10 E5 01 F6 | 	mov	objptr, local02
1dd74     2D 28 62 FD | 	call	local06
1dd78     11 E5 01 F6 | 	mov	objptr, local03
1dd7c     FD 28 02 F6 | 	mov	local06, result1
1dd80     00 28 56 F2 | 	cmps	local06, #0 wc
1dd84     14 FB 01 C6 |  if_b	mov	result1, local06
1dd88     0C 00 90 CD |  if_b	jmp	#LR__3053
1dd8c     14 25 02 F1 | 	add	local04, local06
1dd90     EE 27 6E FB | 	djnz	local05, #LR__3051
1dd94                 | LR__3052
1dd94     12 FB 01 F6 | 	mov	result1, local04
1dd98                 | LR__3053
1dd98     A7 F0 03 F6 | 	mov	ptra, fp
1dd9c     B2 00 A0 FD | 	call	#popregs_
1dda0                 | __system___fmtpad_ret
1dda0     2D 00 64 FD | 	ret
1dda4                 | 
1dda4                 | __system___uitoa
1dda4     04 4A 05 F6 | 	mov	COUNT_, #4
1dda8     A8 00 A0 FD | 	call	#pushregs_
1ddac     09 1F 02 F6 | 	mov	local01, arg01
1ddb0     00 1A 4E F2 | 	cmps	arg05, #0 wz
1ddb4     0F 1B 02 F6 | 	mov	arg05, local01
1ddb8     00 20 06 F6 | 	mov	local02, #0
1ddbc     37 22 06 56 |  if_ne	mov	local03, #55
1ddc0     57 22 06 A6 |  if_e	mov	local03, #87
1ddc4                 | LR__3060
1ddc4     0B 15 12 FD | 	qdiv	arg02, arg03
1ddc8     19 24 62 FD | 	getqy	local04
1ddcc     0B 15 12 FD | 	qdiv	arg02, arg03
1ddd0     0A 24 16 F2 | 	cmp	local04, #10 wc
1ddd4     30 24 06 C1 |  if_b	add	local04, #48
1ddd8     11 25 02 31 |  if_ae	add	local04, local03
1dddc     0D 25 42 FC | 	wrbyte	local04, arg05
1dde0     01 1A 06 F1 | 	add	arg05, #1
1dde4     01 20 06 F1 | 	add	local02, #1
1dde8     18 14 62 FD | 	getqx	arg02
1ddec     00 14 0E F2 | 	cmp	arg02, #0 wz
1ddf0     D0 FF 9F 5D |  if_ne	jmp	#LR__3060
1ddf4     0C 21 12 F2 | 	cmp	local02, arg04 wc
1ddf8     C8 FF 9F CD |  if_b	jmp	#LR__3060
1ddfc     0D 01 48 FC | 	wrbyte	#0, arg05
1de00     0F 13 02 F6 | 	mov	arg01, local01
1de04     8C FE BF FD | 	call	#__system___strrev
1de08     10 FB 01 F6 | 	mov	result1, local02
1de0c     A7 F0 03 F6 | 	mov	ptra, fp
1de10     B2 00 A0 FD | 	call	#popregs_
1de14                 | __system___uitoa_ret
1de14     2D 00 64 FD | 	ret
1de18                 | 
1de18                 | __system__disassemble_0375
1de18     10 4A 05 F6 | 	mov	COUNT_, #16
1de1c     A8 00 A0 FD | 	call	#pushregs_
1de20     09 1F 02 F6 | 	mov	local01, arg01
1de24     0A 21 02 F6 | 	mov	local02, arg02
1de28     0B 23 02 F6 | 	mov	local03, arg03
1de2c     0C 25 02 F6 | 	mov	local04, arg04
1de30     0D 27 02 F6 | 	mov	local05, arg05
1de34     13 13 52 F6 | 	abs	arg01, local05 wc
1de38     1F 28 C6 C9 |  if_b	decod	local06, #31
1de3c     00 28 06 36 |  if_ae	mov	local06, #0
1de40     64 D0 BF FD | 	call	#__system___float_fromuns
1de44     14 FB 61 F5 | 	xor	result1, local06
1de48     FD 2A 02 F6 | 	mov	local07, result1
1de4c     00 2C 06 F6 | 	mov	local08, #0
1de50     0F 13 02 F6 | 	mov	arg01, local01
1de54     00 14 06 F6 | 	mov	arg02, #0
1de58     01 16 06 F6 | 	mov	arg03, #1
1de5c     80 D8 BF FD | 	call	#__system___float_cmp
1de60     00 FA 0D F2 | 	cmp	result1, #0 wz
1de64     00 2E 06 A6 |  if_e	mov	local09, #0
1de68     10 01 68 AC |  if_e	wrlong	#0, local02
1de6c     11 2F 62 AC |  if_e	wrlong	local09, local03
1de70     8C 01 90 AD |  if_e	jmp	#LR__3082
1de74     0F 13 02 F6 | 	mov	arg01, local01
1de78     30 DD BF FD | 	call	#__system____builtin_ilogb
1de7c     FD 30 02 F6 | 	mov	local10, result1
1de80     0A 26 0E F2 | 	cmp	local05, #10 wz
1de84     24 00 90 5D |  if_ne	jmp	#LR__3070
1de88     18 2F 02 F6 | 	mov	local09, local10
1de8c     01 2E 66 F0 | 	shl	local09, #1
1de90     18 2F 02 F1 | 	add	local09, local10
1de94     17 31 52 F6 | 	abs	local10, local09 wc
1de98     0A 30 16 FD | 	qdiv	local10, #10
1de9c     09 32 06 F6 | 	mov	local11, #9
1dea0     18 30 62 FD | 	getqx	local10
1dea4     18 31 82 F6 | 	negc	local10, local10
1dea8     04 00 90 FD | 	jmp	#LR__3071
1deac                 | LR__3070
1deac     18 32 06 F6 | 	mov	local11, #24
1deb0                 | LR__3071
1deb0                 | LR__3072
1deb0     08 2C 56 F2 | 	cmps	local08, #8 wc
1deb4     01 2C 06 F1 | 	add	local08, #1
1deb8     60 00 90 3D |  if_ae	jmp	#LR__3073
1debc     00 C0 1F FF 
1dec0     00 12 06 F6 | 	mov	arg01, ##1065353216
1dec4     15 15 02 F6 | 	mov	arg02, local07
1dec8     18 17 02 F6 | 	mov	arg03, local10
1decc     88 E3 BF FD | 	call	#__system___float_pow_n
1ded0     FD 14 02 F6 | 	mov	arg02, result1
1ded4     0F 13 02 F6 | 	mov	arg01, local01
1ded8     D4 D5 BF FD | 	call	#__system___float_div
1dedc     FD 34 02 F6 | 	mov	local12, result1
1dee0     1A 13 02 F6 | 	mov	arg01, local12
1dee4     00 C0 1F FF 
1dee8     00 14 06 F6 | 	mov	arg02, ##1065353216
1deec     01 16 06 F6 | 	mov	arg03, #1
1def0     EC D7 BF FD | 	call	#__system___float_cmp
1def4     00 FA 55 F2 | 	cmps	result1, #0 wc
1def8     01 30 86 C1 |  if_b	sub	local10, #1
1defc     B0 FF 9F CD |  if_b	jmp	#LR__3072
1df00     15 15 02 F6 | 	mov	arg02, local07
1df04     1A 13 02 F6 | 	mov	arg01, local12
1df08     01 16 66 F6 | 	neg	arg03, #1
1df0c     D0 D7 BF FD | 	call	#__system___float_cmp
1df10     00 FA 55 F2 | 	cmps	result1, #0 wc
1df14     01 30 06 31 |  if_ae	add	local10, #1
1df18     94 FF 9F 3D |  if_ae	jmp	#LR__3072
1df1c                 | LR__3073
1df1c     1A 13 02 F6 | 	mov	arg01, local12
1df20     88 DC BF FD | 	call	#__system____builtin_ilogb
1df24     FD 36 02 F6 | 	mov	local13, result1
1df28     1A 39 02 F6 | 	mov	local14, local12
1df2c     17 39 06 F4 | 	bitl	local14, #279
1df30     17 38 26 F4 | 	bith	local14, #23
1df34     1B 39 62 F0 | 	shl	local14, local13
1df38     02 26 0E F2 | 	cmp	local05, #2 wz
1df3c     02 24 66 A0 |  if_e	shl	local04, #2
1df40     00 3A 06 F6 | 	mov	local15, #0
1df44     00 24 56 F2 | 	cmps	local04, #0 wc
1df48     10 00 90 3D |  if_ae	jmp	#LR__3074
1df4c     18 25 C2 F2 | 	subr	local04, local10
1df50     00 24 56 F2 | 	cmps	local04, #0 wc
1df54     A0 00 90 CD |  if_b	jmp	#LR__3081
1df58     04 00 90 FD | 	jmp	#LR__3075
1df5c                 | LR__3074
1df5c     01 24 06 F1 | 	add	local04, #1
1df60                 | LR__3075
1df60     19 25 7A F3 | 	fles	local04, local11 wcz
1df64     01 3C 06 F6 | 	mov	local16, #1
1df68     97 22 48 FB | 	callpa	#(@LR__3077-@LR__3076)>>2,fcache_load_ptr_
1df6c                 | LR__3076
1df6c     00 40 00 FF 
1df70     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1df74     38 00 90 3D |  if_ae	jmp	#LR__3078
1df78     01 24 56 F2 | 	cmps	local04, #1 wc
1df7c     01 24 86 F1 | 	sub	local04, #1
1df80     2C 00 90 CD |  if_b	jmp	#LR__3078
1df84     13 3B 02 FD | 	qmul	local15, local05
1df88     1C 37 02 F6 | 	mov	local13, local14
1df8c     17 36 46 F0 | 	shr	local13, #23
1df90     17 39 06 F4 | 	bitl	local14, #279
1df94     18 3A 62 FD | 	getqx	local15
1df98     13 3D 02 FD | 	qmul	local16, local05
1df9c     18 3C 62 FD | 	getqx	local16
1dfa0     13 39 02 FD | 	qmul	local14, local05
1dfa4     1B 3B 02 F1 | 	add	local15, local13
1dfa8     18 38 62 FD | 	getqx	local14
1dfac     BC FF 9F FD | 	jmp	#LR__3076
1dfb0                 | LR__3077
1dfb0                 | LR__3078
1dfb0     13 2F 02 F6 | 	mov	local09, local05
1dfb4     17 2E 66 F0 | 	shl	local09, #23
1dfb8     17 37 52 F6 | 	abs	local13, local09 wc
1dfbc     01 36 46 F0 | 	shr	local13, #1
1dfc0     1B 37 82 F6 | 	negc	local13, local13
1dfc4     1B 39 1A F2 | 	cmp	local14, local13 wcz
1dfc8     20 00 90 1D |  if_a	jmp	#LR__3079
1dfcc     17 26 66 F0 | 	shl	local05, #23
1dfd0     13 37 52 F6 | 	abs	local13, local05 wc
1dfd4     01 36 46 F0 | 	shr	local13, #1
1dfd8     1B 37 82 F6 | 	negc	local13, local13
1dfdc     1B 39 0A F2 | 	cmp	local14, local13 wz
1dfe0     14 00 90 5D |  if_ne	jmp	#LR__3080
1dfe4     01 3A CE F7 | 	test	local15, #1 wz
1dfe8     0C 00 90 AD |  if_e	jmp	#LR__3080
1dfec                 | LR__3079
1dfec     01 3A 06 F1 | 	add	local15, #1
1dff0     1E 3B 0A F2 | 	cmp	local15, local16 wz
1dff4     01 30 06 A1 |  if_e	add	local10, #1
1dff8                 | LR__3080
1dff8                 | LR__3081
1dff8     10 3B 62 FC | 	wrlong	local15, local02
1dffc     11 31 62 FC | 	wrlong	local10, local03
1e000                 | LR__3082
1e000     A7 F0 03 F6 | 	mov	ptra, fp
1e004     B2 00 A0 FD | 	call	#popregs_
1e008                 | __system__disassemble_0375_ret
1e008     2D 00 64 FD | 	ret
1e00c                 | 
1e00c                 | __system__emitsign_0377
1e00c     00 FA 05 F6 | 	mov	result1, #0
1e010     00 14 0E F2 | 	cmp	arg02, #0 wz
1e014     09 01 02 56 |  if_ne	mov	_var01, arg01
1e018     01 12 06 51 |  if_ne	add	arg01, #1
1e01c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1e020     01 FA 05 56 |  if_ne	mov	result1, #1
1e024     00 16 0E F2 | 	cmp	arg03, #0 wz
1e028     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1e02c     01 12 06 51 |  if_ne	add	arg01, #1
1e030     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1e034     02 FA 05 51 |  if_ne	add	result1, #2
1e038                 | __system__emitsign_0377_ret
1e038     2D 00 64 FD | 	ret
1e03c                 | 
1e03c                 | __system___gettxfunc
1e03c     01 4A 05 F6 | 	mov	COUNT_, #1
1e040     A8 00 A0 FD | 	call	#pushregs_
1e044     A0 F8 BF FD | 	call	#__system____getftab
1e048     FD 1E 0A F6 | 	mov	local01, result1 wz
1e04c     10 00 90 AD |  if_e	jmp	#LR__3090
1e050     08 1E 06 F1 | 	add	local01, #8
1e054     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e058     08 1E 86 F1 | 	sub	local01, #8
1e05c     08 00 90 5D |  if_ne	jmp	#LR__3091
1e060                 | LR__3090
1e060     00 FA 05 F6 | 	mov	result1, #0
1e064     0C 00 90 FD | 	jmp	#LR__3092
1e068                 | LR__3091
1e068     00 10 03 FF 
1e06c     00 1E 46 F5 | 	or	local01, ##102760448
1e070     0F FB 01 F6 | 	mov	result1, local01
1e074                 | LR__3092
1e074     A7 F0 03 F6 | 	mov	ptra, fp
1e078     B2 00 A0 FD | 	call	#popregs_
1e07c                 | __system___gettxfunc_ret
1e07c     2D 00 64 FD | 	ret
1e080                 | 
1e080                 | __system___getrxfunc
1e080     01 4A 05 F6 | 	mov	COUNT_, #1
1e084     A8 00 A0 FD | 	call	#pushregs_
1e088     5C F8 BF FD | 	call	#__system____getftab
1e08c     FD 1E 0A F6 | 	mov	local01, result1 wz
1e090     10 00 90 AD |  if_e	jmp	#LR__3100
1e094     08 1E 06 F1 | 	add	local01, #8
1e098     0F 15 0A FB | 	rdlong	arg02, local01 wz
1e09c     08 1E 86 F1 | 	sub	local01, #8
1e0a0     08 00 90 5D |  if_ne	jmp	#LR__3101
1e0a4                 | LR__3100
1e0a4     00 FA 05 F6 | 	mov	result1, #0
1e0a8     0C 00 90 FD | 	jmp	#LR__3102
1e0ac                 | LR__3101
1e0ac     00 18 03 FF 
1e0b0     00 1E 46 F5 | 	or	local01, ##103809024
1e0b4     0F FB 01 F6 | 	mov	result1, local01
1e0b8                 | LR__3102
1e0b8     A7 F0 03 F6 | 	mov	ptra, fp
1e0bc     B2 00 A0 FD | 	call	#popregs_
1e0c0                 | __system___getrxfunc_ret
1e0c0     2D 00 64 FD | 	ret
1e0c4                 | 
1e0c4                 | __system___getiolock_0417
1e0c4     01 4A 05 F6 | 	mov	COUNT_, #1
1e0c8     A8 00 A0 FD | 	call	#pushregs_
1e0cc     18 F8 BF FD | 	call	#__system____getftab
1e0d0     FD 1E 0A F6 | 	mov	local01, result1 wz
1e0d4     10 00 90 AD |  if_e	jmp	#LR__3110
1e0d8     08 1E 06 F1 | 	add	local01, #8
1e0dc     0F FB 09 FB | 	rdlong	result1, local01 wz
1e0e0     08 1E 86 F1 | 	sub	local01, #8
1e0e4     18 00 90 5D |  if_ne	jmp	#LR__3111
1e0e8                 | LR__3110
1e0e8     01 00 00 FF 
1e0ec     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1e0f0     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1e0f4     01 00 00 FF 
1e0f8     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1e0fc     08 00 90 FD | 	jmp	#LR__3112
1e100                 | LR__3111
1e100     0C 1E 06 F1 | 	add	local01, #12
1e104     0F FB 01 F6 | 	mov	result1, local01
1e108                 | LR__3112
1e108     A7 F0 03 F6 | 	mov	ptra, fp
1e10c     B2 00 A0 FD | 	call	#popregs_
1e110                 | __system___getiolock_0417_ret
1e110     2D 00 64 FD | 	ret
1e114                 | 
1e114                 | __system___basic_dir
1e114     05 4A 05 F6 | 	mov	COUNT_, #5
1e118     A8 00 A0 FD | 	call	#pushregs_
1e11c     4C F0 07 F1 | 	add	ptra, #76
1e120     04 4E 05 F1 | 	add	fp, #4
1e124     A7 12 62 FC | 	wrlong	arg01, fp
1e128     04 4E 05 F1 | 	add	fp, #4
1e12c     A7 14 62 FC | 	wrlong	arg02, fp
1e130     04 4E 85 F1 | 	sub	fp, #4
1e134     A7 14 0A FB | 	rdlong	arg02, fp wz
1e138     04 4E 85 F1 | 	sub	fp, #4
1e13c     04 4E 05 51 |  if_ne	add	fp, #4
1e140     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e144     04 4E 85 51 |  if_ne	sub	fp, #4
1e148     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1e14c     70 00 90 AD |  if_e	jmp	#LR__3120
1e150     03 00 00 FF 
1e154     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e158     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e15c     03 00 00 FF 
1e160     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e164     03 00 00 5F 
1e168     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1e16c     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1e170     03 00 00 5F 
1e174     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1e178     FC EA BF 5D |  if_ne	call	#__system__closedir
1e17c     3E 01 00 FF 
1e180     58 12 06 F6 | 	mov	arg01, ##@LR__4278
1e184     04 EA BF FD | 	call	#__system__opendir
1e188     03 00 00 FF 
1e18c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e190     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1e194     08 4E 05 F1 | 	add	fp, #8
1e198     A7 20 02 FB | 	rdlong	local02, fp
1e19c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e1a0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e1a4     04 4E 85 F1 | 	sub	fp, #4
1e1a8     A7 20 02 FB | 	rdlong	local02, fp
1e1ac     04 4E 85 F1 | 	sub	fp, #4
1e1b0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1e1b4     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1e1b8     03 00 00 FF 
1e1bc     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e1c0                 | LR__3120
1e1c0     03 00 00 FF 
1e1c4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e1c8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e1cc     03 00 00 FF 
1e1d0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e1d4     3E 01 00 AF 
1e1d8     5A FA 05 A6 |  if_e	mov	result1, ##@LR__4279
1e1dc     84 02 90 AD |  if_e	jmp	#LR__3133
1e1e0                 | LR__3121
1e1e0     03 00 00 FF 
1e1e4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e1e8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e1ec     03 00 00 FF 
1e1f0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e1f4     F4 EA BF FD | 	call	#__system__readdir
1e1f8     0C 4E 05 F1 | 	add	fp, #12
1e1fc     A7 FA 61 FC | 	wrlong	result1, fp
1e200     0C 4E 85 F1 | 	sub	fp, #12
1e204     00 FA 0D F2 | 	cmp	result1, #0 wz
1e208     38 00 90 5D |  if_ne	jmp	#LR__3122
1e20c     03 00 00 FF 
1e210     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e214     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1e218     03 00 00 FF 
1e21c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e220     54 EA BF FD | 	call	#__system__closedir
1e224     03 00 00 FF 
1e228     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1e22c     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1e230     03 00 00 FF 
1e234     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1e238     3E 01 00 FF 
1e23c     5C FA 05 F6 | 	mov	result1, ##@LR__4280
1e240     20 02 90 FD | 	jmp	#LR__3133
1e244                 | LR__3122
1e244     0C 4E 05 F1 | 	add	fp, #12
1e248     A7 12 02 FB | 	rdlong	arg01, fp
1e24c     0C 4E 85 F1 | 	sub	fp, #12
1e250     03 00 00 FF 
1e254     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1e258     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1e25c     03 00 00 FF 
1e260     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1e264     48 07 B0 FD | 	call	#__system___pat_match
1e268     00 FA 0D F2 | 	cmp	result1, #0 wz
1e26c     70 FF 9F AD |  if_e	jmp	#LR__3121
1e270     03 00 00 FF 
1e274     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e278     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e27c     03 00 00 FF 
1e280     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e284     78 01 90 AD |  if_e	jmp	#LR__3129
1e288     0C 4E 05 F1 | 	add	fp, #12
1e28c     A7 12 02 FB | 	rdlong	arg01, fp
1e290     04 4E 05 F1 | 	add	fp, #4
1e294     A7 14 02 F6 | 	mov	arg02, fp
1e298     10 4E 85 F1 | 	sub	fp, #16
1e29c     50 F3 BF FD | 	call	#__system__stat
1e2a0     40 4E 05 F1 | 	add	fp, #64
1e2a4     A7 FA 61 FC | 	wrlong	result1, fp
1e2a8     40 4E 85 F1 | 	sub	fp, #64
1e2ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2b0     3E 01 00 5F 
1e2b4     5E FA 05 56 |  if_ne	mov	result1, ##@LR__4281
1e2b8     A8 01 90 5D |  if_ne	jmp	#LR__3133
1e2bc     18 4E 05 F1 | 	add	fp, #24
1e2c0     A7 20 02 FB | 	rdlong	local02, fp
1e2c4     78 00 00 FF 
1e2c8     00 20 06 F5 | 	and	local02, ##61440
1e2cc     2C 4E 05 F1 | 	add	fp, #44
1e2d0     A7 20 62 FC | 	wrlong	local02, fp
1e2d4     38 4E 85 F1 | 	sub	fp, #56
1e2d8     A7 20 02 FB | 	rdlong	local02, fp
1e2dc     0C 4E 85 F1 | 	sub	fp, #12
1e2e0     10 21 C2 FA | 	rdbyte	local02, local02
1e2e4     2E 20 0E F2 | 	cmp	local02, #46 wz
1e2e8     08 4E 05 A1 |  if_e	add	fp, #8
1e2ec     A7 04 68 AC |  if_e	wrlong	#2, fp
1e2f0     08 4E C5 F3 | 	sumz	fp, #8
1e2f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
1e2f8     08 4E 85 51 |  if_ne	sub	fp, #8
1e2fc     44 4E 05 F1 | 	add	fp, #68
1e300     A7 20 02 FB | 	rdlong	local02, fp
1e304     44 4E 85 F1 | 	sub	fp, #68
1e308     08 00 00 FF 
1e30c     00 20 0E F2 | 	cmp	local02, ##4096 wz
1e310     18 00 90 5D |  if_ne	jmp	#LR__3123
1e314     08 4E 05 F1 | 	add	fp, #8
1e318     A7 20 02 FB | 	rdlong	local02, fp
1e31c     10 20 46 F5 | 	or	local02, #16
1e320     A7 20 62 FC | 	wrlong	local02, fp
1e324     08 4E 85 F1 | 	sub	fp, #8
1e328     AC 00 90 FD | 	jmp	#LR__3128
1e32c                 | LR__3123
1e32c     44 4E 05 F1 | 	add	fp, #68
1e330     A7 20 02 FB | 	rdlong	local02, fp
1e334     44 4E 85 F1 | 	sub	fp, #68
1e338     10 00 00 FF 
1e33c     00 20 0E F2 | 	cmp	local02, ##8192 wz
1e340     44 4E 05 51 |  if_ne	add	fp, #68
1e344     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1e348     44 4E 85 51 |  if_ne	sub	fp, #68
1e34c     18 00 00 5F 
1e350     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1e354     44 4E 05 51 |  if_ne	add	fp, #68
1e358     0F 23 02 56 |  if_ne	mov	local03, local01
1e35c     44 4E 85 51 |  if_ne	sub	fp, #68
1e360     20 00 00 5F 
1e364     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1e368     18 00 90 5D |  if_ne	jmp	#LR__3124
1e36c     08 4E 05 F1 | 	add	fp, #8
1e370     A7 20 02 FB | 	rdlong	local02, fp
1e374     04 20 46 F5 | 	or	local02, #4
1e378     A7 20 62 FC | 	wrlong	local02, fp
1e37c     08 4E 85 F1 | 	sub	fp, #8
1e380     54 00 90 FD | 	jmp	#LR__3127
1e384                 | LR__3124
1e384     18 4E 05 F1 | 	add	fp, #24
1e388     A7 20 02 FB | 	rdlong	local02, fp
1e38c     18 4E 85 F1 | 	sub	fp, #24
1e390     92 20 CE F7 | 	test	local02, #146 wz
1e394     18 00 90 5D |  if_ne	jmp	#LR__3125
1e398     08 4E 05 F1 | 	add	fp, #8
1e39c     A7 20 02 FB | 	rdlong	local02, fp
1e3a0     01 20 46 F5 | 	or	local02, #1
1e3a4     A7 20 62 FC | 	wrlong	local02, fp
1e3a8     08 4E 85 F1 | 	sub	fp, #8
1e3ac     28 00 90 FD | 	jmp	#LR__3126
1e3b0                 | LR__3125
1e3b0     44 4E 05 F1 | 	add	fp, #68
1e3b4     A7 24 02 FB | 	rdlong	local04, fp
1e3b8     44 4E 85 F1 | 	sub	fp, #68
1e3bc     08 00 00 FF 
1e3c0     00 24 0E F2 | 	cmp	local04, ##4096 wz
1e3c4     08 4E 05 51 |  if_ne	add	fp, #8
1e3c8     A7 24 02 5B |  if_ne	rdlong	local04, fp
1e3cc     20 24 46 55 |  if_ne	or	local04, #32
1e3d0     A7 24 62 5C |  if_ne	wrlong	local04, fp
1e3d4     08 4E 85 51 |  if_ne	sub	fp, #8
1e3d8                 | LR__3126
1e3d8                 | LR__3127
1e3d8                 | LR__3128
1e3d8     08 4E 05 F1 | 	add	fp, #8
1e3dc     A7 24 02 FB | 	rdlong	local04, fp
1e3e0     08 4E 85 F1 | 	sub	fp, #8
1e3e4     03 00 00 FF 
1e3e8     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1e3ec     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1e3f0     03 00 00 FF 
1e3f4     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1e3f8     0F 25 CA F7 | 	test	local04, local01 wz
1e3fc     E0 FD 9F AD |  if_e	jmp	#LR__3121
1e400                 | LR__3129
1e400     0C 4E 05 F1 | 	add	fp, #12
1e404     A7 12 02 FB | 	rdlong	arg01, fp
1e408     0C 4E 85 F1 | 	sub	fp, #12
1e40c     09 27 02 F6 | 	mov	local05, arg01
1e410     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
1e414                 | LR__3130
1e414     13 FB C9 FA | 	rdbyte	result1, local05 wz
1e418     01 26 06 51 |  if_ne	add	local05, #1
1e41c     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
1e420                 | LR__3131
1e420     13 13 C2 F2 | 	subr	arg01, local05
1e424     01 12 06 F1 | 	add	arg01, #1
1e428     4C E1 BF FD | 	call	#__system___gc_alloc_managed
1e42c     48 4E 05 F1 | 	add	fp, #72
1e430     A7 FA 61 FC | 	wrlong	result1, fp
1e434     48 4E 85 F1 | 	sub	fp, #72
1e438     00 FA 0D F2 | 	cmp	result1, #0 wz
1e43c     18 00 90 AD |  if_e	jmp	#LR__3132
1e440     48 4E 05 F1 | 	add	fp, #72
1e444     A7 12 02 FB | 	rdlong	arg01, fp
1e448     3C 4E 85 F1 | 	sub	fp, #60
1e44c     A7 14 02 FB | 	rdlong	arg02, fp
1e450     0C 4E 85 F1 | 	sub	fp, #12
1e454     24 A4 BF FD | 	call	#__system____builtin_strcpy
1e458                 | LR__3132
1e458     48 4E 05 F1 | 	add	fp, #72
1e45c     A7 FA 01 FB | 	rdlong	result1, fp
1e460     48 4E 85 F1 | 	sub	fp, #72
1e464                 | LR__3133
1e464     A7 F0 03 F6 | 	mov	ptra, fp
1e468     B2 00 A0 FD | 	call	#popregs_
1e46c                 | __system___basic_dir_ret
1e46c     2D 00 64 FD | 	ret
1e470                 | 
1e470                 | __system__pack_0483
1e470     09 01 02 F6 | 	mov	_var01, arg01
1e474     7F 16 06 F1 | 	add	arg03, #127
1e478     04 18 CE F7 | 	test	arg04, #4 wz
1e47c     10 00 90 AD |  if_e	jmp	#LR__3140
1e480     00 00 0E F2 | 	cmp	_var01, #0 wz
1e484     16 00 C6 A9 |  if_e	decod	_var01, #22
1e488     F7 00 26 F4 | 	bith	_var01, #247
1e48c     B4 00 90 FD | 	jmp	#LR__3149
1e490                 | LR__3140
1e490     02 18 CE F7 | 	test	arg04, #2 wz
1e494     00 C0 3F 5F 
1e498     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1e49c     00 14 06 56 |  if_ne	mov	arg02, #0
1e4a0     A0 00 90 5D |  if_ne	jmp	#LR__3148
1e4a4     08 18 CE F7 | 	test	arg04, #8 wz
1e4a8     00 00 06 56 |  if_ne	mov	_var01, #0
1e4ac     94 00 90 5D |  if_ne	jmp	#LR__3147
1e4b0     FF 16 56 F2 | 	cmps	arg03, #255 wc
1e4b4     00 C0 3F 3F 
1e4b8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1e4bc     00 14 06 36 |  if_ae	mov	arg02, #0
1e4c0     80 00 90 3D |  if_ae	jmp	#LR__3146
1e4c4     01 16 56 F2 | 	cmps	arg03, #1 wc
1e4c8     6C 00 90 3D |  if_ae	jmp	#LR__3144
1e4cc     01 14 46 F0 | 	shr	arg02, #1
1e4d0     00 03 02 F6 | 	mov	_var02, _var01
1e4d4     01 02 06 F5 | 	and	_var02, #1
1e4d8     1F 02 66 F0 | 	shl	_var02, #31
1e4dc     01 15 42 F5 | 	or	arg02, _var02
1e4e0     01 00 46 F0 | 	shr	_var01, #1
1e4e4     97 1E 48 FB | 	callpa	#(@LR__3142-@LR__3141)>>2,fcache_load_ptr_
1e4e8                 | LR__3141
1e4e8     00 16 56 F2 | 	cmps	arg03, #0 wc
1e4ec     34 00 90 3D |  if_ae	jmp	#LR__3143
1e4f0     00 00 0E F2 | 	cmp	_var01, #0 wz
1e4f4     2C 00 90 AD |  if_e	jmp	#LR__3143
1e4f8     0A 13 02 F6 | 	mov	arg01, arg02
1e4fc     01 12 06 F5 | 	and	arg01, #1
1e500     01 16 06 F1 | 	add	arg03, #1
1e504     01 14 46 F0 | 	shr	arg02, #1
1e508     00 03 02 F6 | 	mov	_var02, _var01
1e50c     01 02 06 F5 | 	and	_var02, #1
1e510     1F 02 66 F0 | 	shl	_var02, #31
1e514     01 15 42 F5 | 	or	arg02, _var02
1e518     09 15 42 F5 | 	or	arg02, arg01
1e51c     01 00 46 F0 | 	shr	_var01, #1
1e520     C4 FF 9F FD | 	jmp	#LR__3141
1e524                 | LR__3142
1e524                 | LR__3143
1e524     00 16 56 F2 | 	cmps	arg03, #0 wc
1e528     18 00 90 3D |  if_ae	jmp	#LR__3145
1e52c     00 14 0E F2 | 	cmp	arg02, #0 wz
1e530     6F 14 62 FD | 	wrnz	arg02
1e534     0C 00 90 FD | 	jmp	#LR__3145
1e538                 | LR__3144
1e538     17 01 06 F4 | 	bitl	_var01, #279
1e53c     17 16 66 F0 | 	shl	arg03, #23
1e540     0B 01 42 F5 | 	or	_var01, arg03
1e544                 | LR__3145
1e544                 | LR__3146
1e544                 | LR__3147
1e544                 | LR__3148
1e544                 | LR__3149
1e544     01 00 CE F7 | 	test	_var01, #1 wz
1e548     01 14 46 55 |  if_ne	or	arg02, #1
1e54c     0A 17 02 F6 | 	mov	arg03, arg02
1e550     00 02 06 F6 | 	mov	_var02, #0
1e554     FF FF 3F FF 
1e558     FF 15 06 F1 | 	add	arg02, ##2147483647
1e55c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1e560     01 02 06 C6 |  if_b	mov	_var02, #1
1e564     01 01 02 F1 | 	add	_var01, _var02
1e568     01 18 CE F7 | 	test	arg04, #1 wz
1e56c     1F 00 26 54 |  if_ne	bith	_var01, #31
1e570     00 FB 01 F6 | 	mov	result1, _var01
1e574                 | __system__pack_0483_ret
1e574     2D 00 64 FD | 	ret
1e578                 | 
1e578                 | __system___rxtxioctl_0573
1e578     00 15 0E F2 | 	cmp	arg02, #256 wz
1e57c     0C 00 90 AD |  if_e	jmp	#LR__3150
1e580     01 15 0E F2 | 	cmp	arg02, #257 wz
1e584     1C 00 90 AD |  if_e	jmp	#LR__3151
1e588     30 00 90 FD | 	jmp	#LR__3152
1e58c                 | LR__3150
1e58c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1e590     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1e594     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1e598     0B FB 61 FC | 	wrlong	result1, arg03
1e59c     00 FA 05 F6 | 	mov	result1, #0
1e5a0     28 00 90 FD | 	jmp	#LR__3153
1e5a4                 | LR__3151
1e5a4     0B 13 02 FB | 	rdlong	arg01, arg03
1e5a8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1e5ac     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e5b0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1e5b4     00 FA 05 F6 | 	mov	result1, #0
1e5b8     10 00 90 FD | 	jmp	#LR__3153
1e5bc                 | LR__3152
1e5bc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e5c0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1e5c4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e5c8     01 FA 65 F6 | 	neg	result1, #1
1e5cc                 | LR__3153
1e5cc                 | __system___rxtxioctl_0573_ret
1e5cc     2D 00 64 FD | 	ret
1e5d0                 | 
1e5d0                 | __system____dummy_flush_0574
1e5d0     00 FA 05 F6 | 	mov	result1, #0
1e5d4                 | __system____dummy_flush_0574_ret
1e5d4     2D 00 64 FD | 	ret
1e5d8                 | 
1e5d8                 | __system___vfsread
1e5d8     03 4A 05 F6 | 	mov	COUNT_, #3
1e5dc     A8 00 A0 FD | 	call	#pushregs_
1e5e0     28 F0 07 F1 | 	add	ptra, #40
1e5e4     04 4E 05 F1 | 	add	fp, #4
1e5e8     A7 12 62 FC | 	wrlong	arg01, fp
1e5ec     04 4E 05 F1 | 	add	fp, #4
1e5f0     A7 14 62 FC | 	wrlong	arg02, fp
1e5f4     04 4E 05 F1 | 	add	fp, #4
1e5f8     A7 16 62 FC | 	wrlong	arg03, fp
1e5fc     04 4E 85 F1 | 	sub	fp, #4
1e600     A7 FA 01 FB | 	rdlong	result1, fp
1e604     14 4E 05 F1 | 	add	fp, #20
1e608     A7 FA 61 FC | 	wrlong	result1, fp
1e60c     04 4E 05 F1 | 	add	fp, #4
1e610     A7 00 68 FC | 	wrlong	#0, fp
1e614     1C 4E 85 F1 | 	sub	fp, #28
1e618     A7 12 02 FB | 	rdlong	arg01, fp
1e61c     04 4E 85 F1 | 	sub	fp, #4
1e620     08 12 06 F1 | 	add	arg01, #8
1e624     09 FB 01 FB | 	rdlong	result1, arg01
1e628     01 FA CD F7 | 	test	result1, #1 wz
1e62c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e630     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1e634     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e638     01 FA 65 A6 |  if_e	neg	result1, #1
1e63c     74 02 90 AD |  if_e	jmp	#LR__3166
1e640     04 4E 05 F1 | 	add	fp, #4
1e644     A7 12 02 FB | 	rdlong	arg01, fp
1e648     04 4E 85 F1 | 	sub	fp, #4
1e64c     14 12 06 F1 | 	add	arg01, #20
1e650     09 FB 09 FB | 	rdlong	result1, arg01 wz
1e654     B8 00 90 AD |  if_e	jmp	#LR__3161
1e658     04 4E 05 F1 | 	add	fp, #4
1e65c     A7 12 02 FB | 	rdlong	arg01, fp
1e660     09 17 02 F6 | 	mov	arg03, arg01
1e664     14 16 06 F1 | 	add	arg03, #20
1e668     0B 1F 02 FB | 	rdlong	local01, arg03
1e66c     0F 21 02 F6 | 	mov	local02, local01
1e670     13 1E 46 F7 | 	zerox	local01, #19
1e674     14 20 46 F0 | 	shr	local02, #20
1e678     02 20 66 F0 | 	shl	local02, #2
1e67c     ED 20 02 F1 | 	add	local02, __methods__
1e680     10 21 02 FB | 	rdlong	local02, local02
1e684     04 4E 05 F1 | 	add	fp, #4
1e688     A7 14 02 FB | 	rdlong	arg02, fp
1e68c     04 4E 05 F1 | 	add	fp, #4
1e690     A7 16 02 FB | 	rdlong	arg03, fp
1e694     0C 4E 85 F1 | 	sub	fp, #12
1e698     F2 22 02 F6 | 	mov	local03, objptr
1e69c     0F E5 01 F6 | 	mov	objptr, local01
1e6a0     2D 20 62 FD | 	call	local02
1e6a4     11 E5 01 F6 | 	mov	objptr, local03
1e6a8     10 4E 05 F1 | 	add	fp, #16
1e6ac     A7 FA 61 FC | 	wrlong	result1, fp
1e6b0     10 4E 85 F1 | 	sub	fp, #16
1e6b4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6b8     44 00 90 3D |  if_ae	jmp	#LR__3160
1e6bc     04 4E 05 F1 | 	add	fp, #4
1e6c0     A7 22 02 FB | 	rdlong	local03, fp
1e6c4     11 1F 02 F6 | 	mov	local01, local03
1e6c8     08 22 06 F1 | 	add	local03, #8
1e6cc     11 21 02 FB | 	rdlong	local02, local03
1e6d0     20 20 46 F5 | 	or	local02, #32
1e6d4     08 1E 06 F1 | 	add	local01, #8
1e6d8     0F 21 62 FC | 	wrlong	local02, local01
1e6dc     0C 4E 05 F1 | 	add	fp, #12
1e6e0     A7 12 0A FB | 	rdlong	arg01, fp wz
1e6e4     10 4E 85 F1 | 	sub	fp, #16
1e6e8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1e6ec     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1e6f0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1e6f4     01 FA 65 56 |  if_ne	neg	result1, #1
1e6f8     00 FA 05 A6 |  if_e	mov	result1, #0
1e6fc     B4 01 90 FD | 	jmp	#LR__3166
1e700                 | LR__3160
1e700     10 4E 05 F1 | 	add	fp, #16
1e704     A7 FA 01 FB | 	rdlong	result1, fp
1e708     10 4E 85 F1 | 	sub	fp, #16
1e70c     A4 01 90 FD | 	jmp	#LR__3166
1e710                 | LR__3161
1e710     04 4E 05 F1 | 	add	fp, #4
1e714     A7 12 02 FB | 	rdlong	arg01, fp
1e718     20 12 06 F1 | 	add	arg01, #32
1e71c     09 13 0A FB | 	rdlong	arg01, arg01 wz
1e720     14 4E 05 F1 | 	add	fp, #20
1e724     A7 12 62 FC | 	wrlong	arg01, fp
1e728     18 4E 85 F1 | 	sub	fp, #24
1e72c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1e730     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1e734     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1e738     01 FA 65 A6 |  if_e	neg	result1, #1
1e73c     74 01 90 AD |  if_e	jmp	#LR__3166
1e740     04 4E 05 F1 | 	add	fp, #4
1e744     A7 22 02 FB | 	rdlong	local03, fp
1e748     04 4E 85 F1 | 	sub	fp, #4
1e74c     28 22 06 F1 | 	add	local03, #40
1e750     11 21 0A FB | 	rdlong	local02, local03 wz
1e754     7C 00 90 AD |  if_e	jmp	#LR__3163
1e758     04 4E 05 F1 | 	add	fp, #4
1e75c     A7 12 02 FB | 	rdlong	arg01, fp
1e760     09 23 02 F6 | 	mov	local03, arg01
1e764     28 22 06 F1 | 	add	local03, #40
1e768     11 1F 02 FB | 	rdlong	local01, local03
1e76c     0F 21 02 F6 | 	mov	local02, local01
1e770     13 1E 46 F7 | 	zerox	local01, #19
1e774     14 20 46 F0 | 	shr	local02, #20
1e778     02 20 66 F0 | 	shl	local02, #2
1e77c     ED 20 02 F1 | 	add	local02, __methods__
1e780     10 21 02 FB | 	rdlong	local02, local02
1e784     20 4E 05 F1 | 	add	fp, #32
1e788     A7 16 02 F6 | 	mov	arg03, fp
1e78c     24 4E 85 F1 | 	sub	fp, #36
1e790     00 15 06 F6 | 	mov	arg02, #256
1e794     F2 22 02 F6 | 	mov	local03, objptr
1e798     0F E5 01 F6 | 	mov	objptr, local01
1e79c     2D 20 62 FD | 	call	local02
1e7a0     11 E5 01 F6 | 	mov	objptr, local03
1e7a4     10 4E 05 F1 | 	add	fp, #16
1e7a8     A7 FA 61 FC | 	wrlong	result1, fp
1e7ac     00 FA 4D F2 | 	cmps	result1, #0 wz
1e7b0     10 4E 85 F1 | 	sub	fp, #16
1e7b4     1C 00 90 5D |  if_ne	jmp	#LR__3162
1e7b8     24 4E 05 F1 | 	add	fp, #36
1e7bc     A7 20 02 FB | 	rdlong	local02, fp
1e7c0     24 4E 85 F1 | 	sub	fp, #36
1e7c4     02 20 CE F7 | 	test	local02, #2 wz
1e7c8     20 4E 05 51 |  if_ne	add	fp, #32
1e7cc     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e7d0     20 4E 85 51 |  if_ne	sub	fp, #32
1e7d4                 | LR__3162
1e7d4                 | LR__3163
1e7d4     10 4E 05 F1 | 	add	fp, #16
1e7d8     A7 00 68 FC | 	wrlong	#0, fp
1e7dc     10 4E 85 F1 | 	sub	fp, #16
1e7e0                 | LR__3164
1e7e0     0C 4E 05 F1 | 	add	fp, #12
1e7e4     A7 22 02 FB | 	rdlong	local03, fp
1e7e8     0C 4E 85 F1 | 	sub	fp, #12
1e7ec     01 22 16 F2 | 	cmp	local03, #1 wc
1e7f0     B4 00 90 CD |  if_b	jmp	#LR__3165
1e7f4     18 4E 05 F1 | 	add	fp, #24
1e7f8     A7 20 02 FB | 	rdlong	local02, fp
1e7fc     10 23 02 F6 | 	mov	local03, local02
1e800     13 22 46 F7 | 	zerox	local03, #19
1e804     14 20 46 F0 | 	shr	local02, #20
1e808     02 20 66 F0 | 	shl	local02, #2
1e80c     ED 20 02 F1 | 	add	local02, __methods__
1e810     10 21 02 FB | 	rdlong	local02, local02
1e814     14 4E 85 F1 | 	sub	fp, #20
1e818     A7 12 02 FB | 	rdlong	arg01, fp
1e81c     04 4E 85 F1 | 	sub	fp, #4
1e820     F2 1E 02 F6 | 	mov	local01, objptr
1e824     11 E5 01 F6 | 	mov	objptr, local03
1e828     2D 20 62 FD | 	call	local02
1e82c     0F E5 01 F6 | 	mov	objptr, local01
1e830     14 4E 05 F1 | 	add	fp, #20
1e834     A7 FA 61 FC | 	wrlong	result1, fp
1e838     14 4E 85 F1 | 	sub	fp, #20
1e83c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e840     64 00 90 CD |  if_b	jmp	#LR__3165
1e844     1C 4E 05 F1 | 	add	fp, #28
1e848     A7 22 02 FB | 	rdlong	local03, fp
1e84c     11 21 02 F6 | 	mov	local02, local03
1e850     01 20 06 F1 | 	add	local02, #1
1e854     A7 20 62 FC | 	wrlong	local02, fp
1e858     08 4E 85 F1 | 	sub	fp, #8
1e85c     A7 20 02 FB | 	rdlong	local02, fp
1e860     11 21 42 FC | 	wrbyte	local02, local03
1e864     04 4E 85 F1 | 	sub	fp, #4
1e868     A7 22 02 FB | 	rdlong	local03, fp
1e86c     01 22 06 F1 | 	add	local03, #1
1e870     A7 22 62 FC | 	wrlong	local03, fp
1e874     04 4E 85 F1 | 	sub	fp, #4
1e878     A7 22 02 FB | 	rdlong	local03, fp
1e87c     01 22 86 F1 | 	sub	local03, #1
1e880     A7 22 62 FC | 	wrlong	local03, fp
1e884     14 4E 05 F1 | 	add	fp, #20
1e888     A7 22 0A FB | 	rdlong	local03, fp wz
1e88c     20 4E 85 F1 | 	sub	fp, #32
1e890     4C FF 9F AD |  if_e	jmp	#LR__3164
1e894     14 4E 05 F1 | 	add	fp, #20
1e898     A7 20 02 FB | 	rdlong	local02, fp
1e89c     14 4E 85 F1 | 	sub	fp, #20
1e8a0     0A 20 0E F2 | 	cmp	local02, #10 wz
1e8a4     38 FF 9F 5D |  if_ne	jmp	#LR__3164
1e8a8                 | LR__3165
1e8a8     10 4E 05 F1 | 	add	fp, #16
1e8ac     A7 FA 01 FB | 	rdlong	result1, fp
1e8b0     10 4E 85 F1 | 	sub	fp, #16
1e8b4                 | LR__3166
1e8b4     A7 F0 03 F6 | 	mov	ptra, fp
1e8b8     B2 00 A0 FD | 	call	#popregs_
1e8bc                 | __system___vfsread_ret
1e8bc     2D 00 64 FD | 	ret
1e8c0                 | 
1e8c0                 | __system____default_filbuf
1e8c0     04 4A 05 F6 | 	mov	COUNT_, #4
1e8c4     A8 00 A0 FD | 	call	#pushregs_
1e8c8     09 1F 02 F6 | 	mov	local01, arg01
1e8cc     0F 21 02 FB | 	rdlong	local02, local01
1e8d0     0C 20 06 F1 | 	add	local02, #12
1e8d4     10 FB 09 FB | 	rdlong	result1, local02 wz
1e8d8     0C 20 86 F1 | 	sub	local02, #12
1e8dc     20 00 90 5D |  if_ne	jmp	#LR__3170
1e8e0     14 20 06 F1 | 	add	local02, #20
1e8e4     10 FB 01 F6 | 	mov	result1, local02
1e8e8     04 20 86 F1 | 	sub	local02, #4
1e8ec     10 FB 61 FC | 	wrlong	result1, local02
1e8f0     04 20 86 F1 | 	sub	local02, #4
1e8f4     02 00 80 FF 
1e8f8     10 01 68 FC | 	wrlong	##1024, local02
1e8fc     0C 20 86 F1 | 	sub	local02, #12
1e900                 | LR__3170
1e900     14 1E 06 F1 | 	add	local01, #20
1e904     0F 23 02 FB | 	rdlong	local03, local01
1e908     11 25 02 F6 | 	mov	local04, local03
1e90c     14 1E 86 F1 | 	sub	local01, #20
1e910     13 24 46 F7 | 	zerox	local04, #19
1e914     14 22 46 F0 | 	shr	local03, #20
1e918     02 22 66 F0 | 	shl	local03, #2
1e91c     ED 22 02 F1 | 	add	local03, __methods__
1e920     11 23 02 FB | 	rdlong	local03, local03
1e924     10 20 06 F1 | 	add	local02, #16
1e928     10 15 02 FB | 	rdlong	arg02, local02
1e92c     04 20 86 F1 | 	sub	local02, #4
1e930     10 17 02 FB | 	rdlong	arg03, local02
1e934     0C 20 86 F1 | 	sub	local02, #12
1e938     0F 13 02 F6 | 	mov	arg01, local01
1e93c     F2 1E 02 F6 | 	mov	local01, objptr
1e940     12 E5 01 F6 | 	mov	objptr, local04
1e944     2D 22 62 FD | 	call	local03
1e948     0F E5 01 F6 | 	mov	objptr, local01
1e94c     FD 24 02 F6 | 	mov	local04, result1
1e950     00 24 56 F2 | 	cmps	local04, #0 wc
1e954     01 FA 65 C6 |  if_b	neg	result1, #1
1e958     28 00 90 CD |  if_b	jmp	#LR__3171
1e95c     10 25 62 FC | 	wrlong	local04, local02
1e960     10 20 06 F1 | 	add	local02, #16
1e964     10 23 02 FB | 	rdlong	local03, local02
1e968     0C 20 86 F1 | 	sub	local02, #12
1e96c     10 23 62 FC | 	wrlong	local03, local02
1e970     04 20 06 F1 | 	add	local02, #4
1e974     10 23 02 FB | 	rdlong	local03, local02
1e978     01 22 46 F5 | 	or	local03, #1
1e97c     10 23 62 FC | 	wrlong	local03, local02
1e980     12 FB 01 F6 | 	mov	result1, local04
1e984                 | LR__3171
1e984     A7 F0 03 F6 | 	mov	ptra, fp
1e988     B2 00 A0 FD | 	call	#popregs_
1e98c                 | __system____default_filbuf_ret
1e98c     2D 00 64 FD | 	ret
1e990                 | 
1e990                 | __system__getlower_0959
1e990     41 12 56 F2 | 	cmps	arg01, #65 wc
1e994     10 00 90 CD |  if_b	jmp	#LR__3180
1e998     5B 12 56 F2 | 	cmps	arg01, #91 wc
1e99c     09 FB 01 C6 |  if_b	mov	result1, arg01
1e9a0     20 FA 05 C1 |  if_b	add	result1, #32
1e9a4     04 00 90 CD |  if_b	jmp	#__system__getlower_0959_ret
1e9a8                 | LR__3180
1e9a8     09 FB 01 F6 | 	mov	result1, arg01
1e9ac                 | __system__getlower_0959_ret
1e9ac     2D 00 64 FD | 	ret
1e9b0                 | 
1e9b0                 | __system___pat_match
1e9b0     08 4A 05 F6 | 	mov	COUNT_, #8
1e9b4     A8 00 A0 FD | 	call	#pushregs_
1e9b8     09 1F 02 F6 | 	mov	local01, arg01
1e9bc                 | LR__3190
1e9bc     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1e9c0     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1e9c4     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1e9c8     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1e9cc     2C 00 90 AD |  if_e	jmp	#LR__3191
1e9d0     0A 13 C2 FA | 	rdbyte	arg01, arg02
1e9d4     B8 FF BF FD | 	call	#__system__getlower_0959
1e9d8     FD 22 02 F6 | 	mov	local03, result1
1e9dc     0F 13 C2 FA | 	rdbyte	arg01, local01
1e9e0     AC FF BF FD | 	call	#__system__getlower_0959
1e9e4     11 FB 09 F2 | 	cmp	result1, local03 wz
1e9e8     00 FA 05 56 |  if_ne	mov	result1, #0
1e9ec     FC 00 90 5D |  if_ne	jmp	#LR__3199
1e9f0     01 1E 06 F1 | 	add	local01, #1
1e9f4     01 14 06 F1 | 	add	arg02, #1
1e9f8     C0 FF 9F FD | 	jmp	#LR__3190
1e9fc                 | LR__3191
1e9fc     0A 23 C2 FA | 	rdbyte	local03, arg02
1ea00     2A 22 0E F2 | 	cmp	local03, #42 wz
1ea04     D4 00 90 5D |  if_ne	jmp	#LR__3198
1ea08     01 14 06 F1 | 	add	arg02, #1
1ea0c     0A 21 C2 FA | 	rdbyte	local02, arg02
1ea10     01 14 86 F1 | 	sub	arg02, #1
1ea14     2E 20 0E F2 | 	cmp	local02, #46 wz
1ea18     28 00 90 5D |  if_ne	jmp	#LR__3192
1ea1c     02 14 06 F1 | 	add	arg02, #2
1ea20     0A 21 C2 FA | 	rdbyte	local02, arg02
1ea24     02 14 86 F1 | 	sub	arg02, #2
1ea28     2A 20 0E F2 | 	cmp	local02, #42 wz
1ea2c     03 14 06 A1 |  if_e	add	arg02, #3
1ea30     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1ea34     03 14 86 A1 |  if_e	sub	arg02, #3
1ea38     12 27 0A A6 |  if_e	mov	local05, local04 wz
1ea3c     01 FA 05 A6 |  if_e	mov	result1, #1
1ea40     A8 00 90 AD |  if_e	jmp	#LR__3199
1ea44                 | LR__3192
1ea44     01 14 06 F1 | 	add	arg02, #1
1ea48     00 28 06 F6 | 	mov	local06, #0
1ea4c     97 1E 48 FB | 	callpa	#(@LR__3195-@LR__3193)>>2,fcache_load_ptr_
1ea50                 | LR__3193
1ea50     14 2B 02 F6 | 	mov	local07, local06
1ea54     0A 2B 02 F1 | 	add	local07, arg02
1ea58     15 2B CA FA | 	rdbyte	local07, local07 wz
1ea5c     14 27 02 56 |  if_ne	mov	local05, local06
1ea60     01 26 06 51 |  if_ne	add	local05, #1
1ea64     13 29 02 56 |  if_ne	mov	local06, local05
1ea68     E4 FF 9F 5D |  if_ne	jmp	#LR__3193
1ea6c     00 2C 06 F6 | 	mov	local08, #0
1ea70                 | LR__3194
1ea70     16 2B 02 F6 | 	mov	local07, local08
1ea74     0F 2B 02 F1 | 	add	local07, local01
1ea78     15 2B CA FA | 	rdbyte	local07, local07 wz
1ea7c     16 27 02 56 |  if_ne	mov	local05, local08
1ea80     01 26 06 51 |  if_ne	add	local05, #1
1ea84     13 2D 02 56 |  if_ne	mov	local08, local05
1ea88     E4 FF 9F 5D |  if_ne	jmp	#LR__3194
1ea8c                 | LR__3195
1ea8c     14 2D 52 F2 | 	cmps	local08, local06 wc
1ea90     00 FA 05 C6 |  if_b	mov	result1, #0
1ea94     54 00 90 CD |  if_b	jmp	#LR__3199
1ea98     16 21 02 F6 | 	mov	local02, local08
1ea9c     14 21 82 F1 | 	sub	local02, local06
1eaa0     10 1F 02 F1 | 	add	local01, local02
1eaa4                 | LR__3196
1eaa4     01 28 56 F2 | 	cmps	local06, #1 wc
1eaa8     30 00 90 CD |  if_b	jmp	#LR__3197
1eaac     0F 13 C2 FA | 	rdbyte	arg01, local01
1eab0     DC FE BF FD | 	call	#__system__getlower_0959
1eab4     FD 2C 02 F6 | 	mov	local08, result1
1eab8     0A 13 C2 FA | 	rdbyte	arg01, arg02
1eabc     D0 FE BF FD | 	call	#__system__getlower_0959
1eac0     FD 2C 0A F2 | 	cmp	local08, result1 wz
1eac4     00 FA 05 56 |  if_ne	mov	result1, #0
1eac8     20 00 90 5D |  if_ne	jmp	#LR__3199
1eacc     01 1E 06 F1 | 	add	local01, #1
1ead0     01 14 06 F1 | 	add	arg02, #1
1ead4     01 28 86 F1 | 	sub	local06, #1
1ead8     C8 FF 9F FD | 	jmp	#LR__3196
1eadc                 | LR__3197
1eadc                 | LR__3198
1eadc     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1eae0     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1eae4     01 FA 05 A6 |  if_e	mov	result1, #1
1eae8     00 FA 05 56 |  if_ne	mov	result1, #0
1eaec                 | LR__3199
1eaec     A7 F0 03 F6 | 	mov	ptra, fp
1eaf0     B2 00 A0 FD | 	call	#popregs_
1eaf4                 | __system___pat_match_ret
1eaf4     2D 00 64 FD | 	ret
1eaf8                 | 
1eaf8                 | _fatfs_cc_ff_uni2oem
1eaf8     00 00 06 F6 | 	mov	_var01, #0
1eafc     80 12 16 F2 | 	cmp	arg01, #128 wc
1eb00     09 01 02 C6 |  if_b	mov	_var01, arg01
1eb04     58 00 90 CD |  if_b	jmp	#LR__3204
1eb08     80 00 00 FF 
1eb0c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1eb10     4C 00 90 3D |  if_ae	jmp	#LR__3203
1eb14     0A FB 31 F9 | 	getword	result1, arg02, #0
1eb18     01 00 00 FF 
1eb1c     52 FB 0D F2 | 	cmp	result1, ##850 wz
1eb20     3C 00 90 5D |  if_ne	jmp	#LR__3203
1eb24                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1eb24     00 00 06 F6 | 	mov	_var01, #0
1eb28     97 14 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
1eb2c                 | LR__3200
1eb2c     00 FB 31 F9 | 	getword	result1, _var01, #0
1eb30     80 FA 15 F2 | 	cmp	result1, #128 wc
1eb34     1C 00 90 3D |  if_ae	jmp	#LR__3202
1eb38     00 FB 31 F9 | 	getword	result1, _var01, #0
1eb3c     01 FA 65 F0 | 	shl	result1, #1
1eb40     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1eb44     FD FA E1 FA | 	rdword	result1, result1
1eb48     FD 12 0A F2 | 	cmp	arg01, result1 wz
1eb4c     01 00 06 51 |  if_ne	add	_var01, #1
1eb50     D8 FF 9F 5D |  if_ne	jmp	#LR__3200
1eb54                 | LR__3201
1eb54                 | LR__3202
1eb54     00 01 32 F9 | 	getword	_var01, _var01, #0
1eb58     80 00 06 F1 | 	add	_var01, #128
1eb5c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1eb60                 | LR__3203
1eb60                 | LR__3204
1eb60                 | ' 			c = (c + 0x80) & 0xFF;
1eb60                 | ' 		}
1eb60                 | ' 	}
1eb60                 | ' 
1eb60                 | ' 	return c;
1eb60     00 FB 01 F6 | 	mov	result1, _var01
1eb64                 | _fatfs_cc_ff_uni2oem_ret
1eb64     2D 00 64 FD | 	ret
1eb68                 | 
1eb68                 | _fatfs_cc_ff_oem2uni
1eb68     00 00 06 F6 | 	mov	_var01, #0
1eb6c     09 FB 31 F9 | 	getword	result1, arg01, #0
1eb70     80 FA 15 F2 | 	cmp	result1, #128 wc
1eb74     09 01 02 C6 |  if_b	mov	_var01, arg01
1eb78     2C 00 90 CD |  if_b	jmp	#LR__3211
1eb7c     0A 15 32 F9 | 	getword	arg02, arg02, #0
1eb80     01 00 00 FF 
1eb84     52 15 0E F2 | 	cmp	arg02, ##850 wz
1eb88     1C 00 90 5D |  if_ne	jmp	#LR__3210
1eb8c     09 FB 31 F9 | 	getword	result1, arg01, #0
1eb90     00 FB 15 F2 | 	cmp	result1, #256 wc
1eb94     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1eb98     80 12 86 C1 |  if_b	sub	arg01, #128
1eb9c     01 12 66 C0 |  if_b	shl	arg01, #1
1eba0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1eba4     09 01 E2 CA |  if_b	rdword	_var01, arg01
1eba8                 | LR__3210
1eba8                 | LR__3211
1eba8                 | ' 		}
1eba8                 | ' 	}
1eba8                 | ' 
1eba8                 | ' 	return c;
1eba8     00 FB 01 F6 | 	mov	result1, _var01
1ebac                 | _fatfs_cc_ff_oem2uni_ret
1ebac     2D 00 64 FD | 	ret
1ebb0                 | 
1ebb0                 | _fatfs_cc_ff_wtoupper
1ebb0     09 01 02 F6 | 	mov	_var01, arg01
1ebb4     80 00 00 FF 
1ebb8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1ebbc     60 01 90 3D |  if_ae	jmp	#LR__3233
1ebc0     00 03 02 F6 | 	mov	_var02, _var01
1ebc4     01 01 32 F9 | 	getword	_var01, _var02, #0
1ebc8     08 00 00 FF 
1ebcc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1ebd0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1ebd4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1ebd8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1ebdc     01 00 00 3F 
1ebe0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1ebe4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1ebe8     01 00 00 3F 
1ebec     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1ebf0     02 07 02 F6 | 	mov	_var04, _var03
1ebf4                 | ' 		uc = (WORD)uni;
1ebf4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1ebf4                 | ' 		for (;;) {
1ebf4                 | LR__3220
1ebf4     03 09 E2 FA | 	rdword	_var05, _var04
1ebf8     04 05 02 F6 | 	mov	_var03, _var05
1ebfc     0F 04 4E F7 | 	zerox	_var03, #15 wz
1ec00     02 06 06 F1 | 	add	_var04, #2
1ec04     14 01 90 AD |  if_e	jmp	#LR__3232
1ec08     01 05 32 F9 | 	getword	_var03, _var02, #0
1ec0c     04 01 32 F9 | 	getword	_var01, _var05, #0
1ec10     00 05 12 F2 | 	cmp	_var03, _var01 wc
1ec14     04 01 90 CD |  if_b	jmp	#LR__3232
1ec18     03 0B E2 FA | 	rdword	_var06, _var04
1ec1c     05 0D 32 F9 | 	getword	_var07, _var06, #0
1ec20     08 0C 46 F0 | 	shr	_var07, #8
1ec24     05 0B 32 F9 | 	getword	_var06, _var06, #0
1ec28     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1ec2c     01 05 32 F9 | 	getword	_var03, _var02, #0
1ec30     04 0F 32 F9 | 	getword	_var08, _var05, #0
1ec34     05 01 32 F9 | 	getword	_var01, _var06, #0
1ec38     00 0F 02 F1 | 	add	_var08, _var01
1ec3c     07 05 52 F2 | 	cmps	_var03, _var08 wc
1ec40     02 06 06 F1 | 	add	_var04, #2
1ec44     C4 00 90 3D |  if_ae	jmp	#LR__3231
1ec48                 | ' 				switch (cmd) {
1ec48     06 11 32 F9 | 	getword	_var09, _var07, #0
1ec4c     09 10 26 F3 | 	fle	_var09, #9
1ec50     30 10 62 FD | 	jmprel	_var09
1ec54                 | LR__3221
1ec54     24 00 90 FD | 	jmp	#LR__3222
1ec58     3C 00 90 FD | 	jmp	#LR__3223
1ec5c     54 00 90 FD | 	jmp	#LR__3224
1ec60     5C 00 90 FD | 	jmp	#LR__3225
1ec64     64 00 90 FD | 	jmp	#LR__3226
1ec68     6C 00 90 FD | 	jmp	#LR__3227
1ec6c     74 00 90 FD | 	jmp	#LR__3228
1ec70     7C 00 90 FD | 	jmp	#LR__3229
1ec74     84 00 90 FD | 	jmp	#LR__3230
1ec78     A0 00 90 FD | 	jmp	#LR__3232
1ec7c                 | LR__3222
1ec7c     01 03 32 F9 | 	getword	_var02, _var02, #0
1ec80     04 09 32 F9 | 	getword	_var05, _var05, #0
1ec84     04 03 82 F1 | 	sub	_var02, _var05
1ec88     01 02 66 F0 | 	shl	_var02, #1
1ec8c     03 03 02 F1 | 	add	_var02, _var04
1ec90     01 03 E2 FA | 	rdword	_var02, _var02
1ec94     84 00 90 FD | 	jmp	#LR__3232
1ec98                 | LR__3223
1ec98     01 05 32 F9 | 	getword	_var03, _var02, #0
1ec9c     01 03 32 F9 | 	getword	_var02, _var02, #0
1eca0     04 09 32 F9 | 	getword	_var05, _var05, #0
1eca4     04 03 82 F1 | 	sub	_var02, _var05
1eca8     01 02 06 F5 | 	and	_var02, #1
1ecac     02 03 C2 F2 | 	subr	_var02, _var03
1ecb0     68 00 90 FD | 	jmp	#LR__3232
1ecb4                 | LR__3224
1ecb4     01 03 32 F9 | 	getword	_var02, _var02, #0
1ecb8     10 02 86 F1 | 	sub	_var02, #16
1ecbc     5C 00 90 FD | 	jmp	#LR__3232
1ecc0                 | LR__3225
1ecc0     01 03 32 F9 | 	getword	_var02, _var02, #0
1ecc4     20 02 86 F1 | 	sub	_var02, #32
1ecc8     50 00 90 FD | 	jmp	#LR__3232
1eccc                 | LR__3226
1eccc     01 03 32 F9 | 	getword	_var02, _var02, #0
1ecd0     30 02 86 F1 | 	sub	_var02, #48
1ecd4     44 00 90 FD | 	jmp	#LR__3232
1ecd8                 | LR__3227
1ecd8     01 03 32 F9 | 	getword	_var02, _var02, #0
1ecdc     1A 02 86 F1 | 	sub	_var02, #26
1ece0     38 00 90 FD | 	jmp	#LR__3232
1ece4                 | LR__3228
1ece4     01 03 32 F9 | 	getword	_var02, _var02, #0
1ece8     08 02 06 F1 | 	add	_var02, #8
1ecec     2C 00 90 FD | 	jmp	#LR__3232
1ecf0                 | LR__3229
1ecf0     01 03 32 F9 | 	getword	_var02, _var02, #0
1ecf4     50 02 86 F1 | 	sub	_var02, #80
1ecf8     20 00 90 FD | 	jmp	#LR__3232
1ecfc                 | LR__3230
1ecfc     01 03 32 F9 | 	getword	_var02, _var02, #0
1ed00     0E 00 00 FF 
1ed04     60 02 86 F1 | 	sub	_var02, ##7264
1ed08                 | ' 				}
1ed08                 | ' 				break;
1ed08     10 00 90 FD | 	jmp	#LR__3232
1ed0c                 | LR__3231
1ed0c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1ed10     02 0A 06 AA |  if_e	mul	_var06, #2
1ed14     05 07 02 A1 |  if_e	add	_var04, _var06
1ed18     D8 FE 9F FD | 	jmp	#LR__3220
1ed1c                 | LR__3232
1ed1c     01 01 32 F9 | 	getword	_var01, _var02, #0
1ed20                 | LR__3233
1ed20                 | ' 		}
1ed20                 | ' 		uni = uc;
1ed20                 | ' 	}
1ed20                 | ' 
1ed20                 | ' 	return uni;
1ed20     00 FB 01 F6 | 	mov	result1, _var01
1ed24                 | _fatfs_cc_ff_wtoupper_ret
1ed24     2D 00 64 FD | 	ret
1ed28                 | 
1ed28                 | _fatfs_cc_strncpy
1ed28     09 01 02 F6 | 	mov	_var01, arg01
1ed2c     97 12 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
1ed30                 | ' 
1ed30                 | ' 	dscan = dst;
1ed30                 | ' 	sscan = src;
1ed30                 | ' 	count = n;
1ed30                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1ed30                 | LR__3240
1ed30     01 16 86 F1 | 	sub	arg03, #1
1ed34     00 16 56 F2 | 	cmps	arg03, #0 wc
1ed38     18 00 90 CD |  if_b	jmp	#LR__3242
1ed3c     0A FB C1 FA | 	rdbyte	result1, arg02
1ed40     00 FB 41 FC | 	wrbyte	result1, _var01
1ed44     01 14 06 F1 | 	add	arg02, #1
1ed48     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1ed4c                 | ' 		continue;
1ed4c     01 00 06 F1 | 	add	_var01, #1
1ed50     DC FF 9F 5D |  if_ne	jmp	#LR__3240
1ed54                 | LR__3241
1ed54                 | LR__3242
1ed54     97 0C 48 FB | 	callpa	#(@LR__3244-@LR__3243)>>2,fcache_load_ptr_
1ed58                 | ' 	while (--count >= 0)
1ed58                 | LR__3243
1ed58     01 16 86 F1 | 	sub	arg03, #1
1ed5c     00 16 56 F2 | 	cmps	arg03, #0 wc
1ed60     00 03 02 36 |  if_ae	mov	_var02, _var01
1ed64     01 00 06 31 |  if_ae	add	_var01, #1
1ed68     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1ed6c     E8 FF 9F 3D |  if_ae	jmp	#LR__3243
1ed70                 | LR__3244
1ed70                 | ' 		*dscan++ = '\0';
1ed70                 | ' 	return(dst);
1ed70     09 FB 01 F6 | 	mov	result1, arg01
1ed74                 | _fatfs_cc_strncpy_ret
1ed74     2D 00 64 FD | 	ret
1ed78                 | 
1ed78                 | _fatfs_cc_memcmp
1ed78                 | ' 	for (n = size; n > 0; n--)
1ed78     00 16 0E F2 | 	cmp	arg03, #0 wz
1ed7c     28 00 90 AD |  if_e	jmp	#LR__3251
1ed80                 | LR__3250
1ed80     09 01 C2 FA | 	rdbyte	_var01, arg01
1ed84     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ed88     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ed8c     01 12 06 A1 |  if_e	add	arg01, #1
1ed90     01 14 06 A1 |  if_e	add	arg02, #1
1ed94                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1ed94     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1ed98     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1ed9c     01 FB 81 51 |  if_ne	sub	result1, _var02
1eda0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1eda4     F6 17 6E FB | 	djnz	arg03, #LR__3250
1eda8                 | LR__3251
1eda8                 | ' 
1eda8                 | ' 	return(0);
1eda8     00 FA 05 F6 | 	mov	result1, #0
1edac                 | _fatfs_cc_memcmp_ret
1edac     2D 00 64 FD | 	ret
1edb0                 | 
1edb0                 | _fatfs_cc_strncmp
1edb0     09 01 0A F6 | 	mov	_var01, arg01 wz
1edb4     14 00 90 5D |  if_ne	jmp	#LR__3260
1edb8                 | ' 		return scan2 ? -1 : 0;
1edb8     00 14 0E F2 | 	cmp	arg02, #0 wz
1edbc     01 02 66 56 |  if_ne	neg	_var02, #1
1edc0     00 02 06 A6 |  if_e	mov	_var02, #0
1edc4     01 FB 01 F6 | 	mov	result1, _var02
1edc8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1edcc                 | LR__3260
1edcc     00 14 0E F2 | 	cmp	arg02, #0 wz
1edd0     01 FA 05 A6 |  if_e	mov	result1, #1
1edd4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1edd8     0B 05 02 F6 | 	mov	_var03, arg03
1eddc     97 16 48 FB | 	callpa	#(@LR__3262-@LR__3261)>>2,fcache_load_ptr_
1ede0                 | ' 	count = n;
1ede0                 | ' 	do {
1ede0                 | LR__3261
1ede0     00 07 C2 FA | 	rdbyte	_var04, _var01
1ede4     0A 09 02 F6 | 	mov	_var05, arg02
1ede8     04 0B C2 FA | 	rdbyte	_var06, _var05
1edec     01 04 86 F1 | 	sub	_var03, #1
1edf0     00 04 56 F2 | 	cmps	_var03, #0 wc
1edf4     01 00 06 F1 | 	add	_var01, #1
1edf8     01 14 06 F1 | 	add	arg02, #1
1edfc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1ee00     08 00 90 2D |  if_nc_and_z	jmp	#LR__3263
1ee04     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1ee08     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3261
1ee0c                 | LR__3262
1ee0c                 | LR__3263
1ee0c     00 04 56 F2 | 	cmps	_var03, #0 wc
1ee10                 | ' 		return(0);
1ee10     00 FA 05 C6 |  if_b	mov	result1, #0
1ee14     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1ee18     05 07 0A F2 | 	cmp	_var04, _var06 wz
1ee1c                 | ' 		return(0);
1ee1c     00 FA 05 A6 |  if_e	mov	result1, #0
1ee20     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1ee24     00 06 0E F2 | 	cmp	_var04, #0 wz
1ee28                 | ' 		return(-1);
1ee28     01 FA 65 A6 |  if_e	neg	result1, #1
1ee2c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1ee30     00 0A 0E F2 | 	cmp	_var06, #0 wz
1ee34                 | ' 		return(1);
1ee34     01 FA 05 A6 |  if_e	mov	result1, #1
1ee38                 | ' 		return(c1 - c2);
1ee38     03 FB 01 56 |  if_ne	mov	result1, _var04
1ee3c     05 FB 81 51 |  if_ne	sub	result1, _var06
1ee40                 | _fatfs_cc_strncmp_ret
1ee40     2D 00 64 FD | 	ret
1ee44                 | 
1ee44                 | _fatfs_cc_strchr
1ee44                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1ee44                 | ' 	while ((c = *s++) != (char) charwanted)
1ee44                 | LR__3270
1ee44     09 01 02 F6 | 	mov	_var01, arg01
1ee48     00 03 C2 FA | 	rdbyte	_var02, _var01
1ee4c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1ee50     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1ee54     03 05 0A F2 | 	cmp	_var03, _var04 wz
1ee58     01 12 06 F1 | 	add	arg01, #1
1ee5c     14 00 90 AD |  if_e	jmp	#LR__3271
1ee60     01 05 02 F6 | 	mov	_var03, _var02
1ee64     07 04 4E F7 | 	zerox	_var03, #7 wz
1ee68     00 FA 05 A6 |  if_e	mov	result1, #0
1ee6c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1ee70     D0 FF 9F FD | 	jmp	#LR__3270
1ee74                 | LR__3271
1ee74                 | ' 	return((char *)--s);
1ee74     01 12 86 F1 | 	sub	arg01, #1
1ee78     09 FB 01 F6 | 	mov	result1, arg01
1ee7c                 | _fatfs_cc_strchr_ret
1ee7c     2D 00 64 FD | 	ret
1ee80                 | 
1ee80                 | _fatfs_cc_disk_initialize
1ee80     04 4A 05 F6 | 	mov	COUNT_, #4
1ee84     A8 00 A0 FD | 	call	#pushregs_
1ee88     40 F0 07 F1 | 	add	ptra, #64
1ee8c     04 4E 05 F1 | 	add	fp, #4
1ee90     A7 12 42 FC | 	wrbyte	arg01, fp
1ee94     01 00 00 FF 
1ee98     14 E4 05 F1 | 	add	objptr, ##532
1ee9c     F2 18 02 FB | 	rdlong	arg04, objptr
1eea0     2C 4E 05 F1 | 	add	fp, #44
1eea4     A7 18 62 FC | 	wrlong	arg04, fp
1eea8     04 E4 85 F1 | 	sub	objptr, #4
1eeac     F2 18 02 FB | 	rdlong	arg04, objptr
1eeb0     04 4E 05 F1 | 	add	fp, #4
1eeb4     A7 18 62 FC | 	wrlong	arg04, fp
1eeb8     08 E4 05 F1 | 	add	objptr, #8
1eebc     F2 18 02 FB | 	rdlong	arg04, objptr
1eec0     04 4E 05 F1 | 	add	fp, #4
1eec4     A7 18 62 FC | 	wrlong	arg04, fp
1eec8     04 E4 05 F1 | 	add	objptr, #4
1eecc     F2 18 02 FB | 	rdlong	arg04, objptr
1eed0     04 4E 05 F1 | 	add	fp, #4
1eed4     A7 18 62 FC | 	wrlong	arg04, fp
1eed8     04 E4 05 F1 | 	add	objptr, #4
1eedc     F2 02 48 FC | 	wrbyte	#1, objptr
1eee0     01 00 00 FF 
1eee4     20 E4 85 F1 | 	sub	objptr, ##544
1eee8     38 4E 85 F1 | 	sub	fp, #56
1eeec     A7 18 CA FA | 	rdbyte	arg04, fp wz
1eef0     04 4E 85 F1 | 	sub	fp, #4
1eef4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1eef4                 | '             return RES_NOTRDY;
1eef4     03 FA 05 56 |  if_ne	mov	result1, #3
1eef8     D8 05 90 5D |  if_ne	jmp	#LR__3298
1eefc     13 00 00 FF 
1ef00     10 13 06 F6 | 	mov	arg01, ##10000
1ef04     20 9D BF FD | 	call	#__system___waitus
1ef08     30 4E 05 F1 | 	add	fp, #48
1ef0c     A7 12 02 FB | 	rdlong	arg01, fp
1ef10     09 01 08 FC | 	wrpin	#0, arg01
1ef14     04 4E 05 F1 | 	add	fp, #4
1ef18     A7 12 02 FB | 	rdlong	arg01, fp
1ef1c     09 01 08 FC | 	wrpin	#0, arg01
1ef20     04 4E 05 F1 | 	add	fp, #4
1ef24     A7 12 02 FB | 	rdlong	arg01, fp
1ef28     09 01 08 FC | 	wrpin	#0, arg01
1ef2c     04 4E 05 F1 | 	add	fp, #4
1ef30     A7 12 02 FB | 	rdlong	arg01, fp
1ef34     09 00 80 FF 
1ef38     09 01 08 FC | 	wrpin	##4608, arg01
1ef3c     0C 4E 85 F1 | 	sub	fp, #12
1ef40     A7 12 02 FB | 	rdlong	arg01, fp
1ef44     59 12 62 FD | 	drvh	arg01
1ef48     04 4E 05 F1 | 	add	fp, #4
1ef4c     A7 12 02 FB | 	rdlong	arg01, fp
1ef50     59 12 62 FD | 	drvh	arg01
1ef54     04 4E 05 F1 | 	add	fp, #4
1ef58     A7 12 02 FB | 	rdlong	arg01, fp
1ef5c     59 12 62 FD | 	drvh	arg01
1ef60     04 4E 05 F1 | 	add	fp, #4
1ef64     A7 12 02 FB | 	rdlong	arg01, fp
1ef68     59 12 62 FD | 	drvh	arg01
1ef6c     20 4E 85 F1 | 	sub	fp, #32
1ef70     00 04 80 FF 
1ef74     A7 20 68 FC | 	wrlong	##524304, fp
1ef78     04 4E 05 F1 | 	add	fp, #4
1ef7c     20 03 80 FF 
1ef80     A7 90 68 FC | 	wrlong	##409672, fp
1ef84     14 4E 05 F1 | 	add	fp, #20
1ef88     A7 1E 02 FB | 	rdlong	local01, fp
1ef8c     18 4E 85 F1 | 	sub	fp, #24
1ef90     A7 16 02 FB | 	rdlong	arg03, fp
1ef94     40 1E 62 FD | 	dirl	local01
1ef98     A0 03 80 FF 
1ef9c     0F 91 08 FC | 	wrpin	##475208, local01
1efa0     0F 17 12 FC | 	wxpin	arg03, local01
1efa4     0F 01 28 FC | 	wypin	#0, local01
1efa8     41 1E 62 FD | 	dirh	local01
1efac     1C 4E 05 F1 | 	add	fp, #28
1efb0     A7 20 02 FB | 	rdlong	local02, fp
1efb4     10 1F 82 F1 | 	sub	local01, local02
1efb8     07 1E 06 F5 | 	and	local01, #7
1efbc     18 1E 66 F0 | 	shl	local01, #24
1efc0     78 14 06 F6 | 	mov	arg02, #120
1efc4     0F 15 42 F5 | 	or	arg02, local01
1efc8     14 4E 85 F1 | 	sub	fp, #20
1efcc     A7 14 62 FC | 	wrlong	arg02, fp
1efd0     14 4E 05 F1 | 	add	fp, #20
1efd4     A7 12 02 FB | 	rdlong	arg01, fp
1efd8     10 14 26 F4 | 	bith	arg02, #16
1efdc     40 12 62 FD | 	dirl	arg01
1efe0     09 15 02 FC | 	wrpin	arg02, arg01
1efe4     09 3F 18 FC | 	wxpin	#31, arg01
1efe8     FF FF FF FF 
1efec     09 FF 2B FC | 	wypin	##-1, arg01
1eff0     41 12 62 FD | 	dirh	arg01
1eff4     04 4E 85 F1 | 	sub	fp, #4
1eff8     A7 14 02 FB | 	rdlong	arg02, fp
1effc     08 4E 05 F1 | 	add	fp, #8
1f000     A7 22 02 FB | 	rdlong	local03, fp
1f004     11 15 82 F1 | 	sub	arg02, local03
1f008     07 14 06 F5 | 	and	arg02, #7
1f00c     18 14 66 F0 | 	shl	arg02, #24
1f010     14 4E 85 F1 | 	sub	fp, #20
1f014     A7 14 62 FC | 	wrlong	arg02, fp
1f018     29 00 00 FF 
1f01c     7A 14 46 F5 | 	or	arg02, ##21114
1f020     A7 14 62 FC | 	wrlong	arg02, fp
1f024     14 4E 05 F1 | 	add	fp, #20
1f028     A7 12 02 FB | 	rdlong	arg01, fp
1f02c     40 12 62 FD | 	dirl	arg01
1f030     09 15 02 FC | 	wrpin	arg02, arg01
1f034     09 4F 18 FC | 	wxpin	#39, arg01
1f038     09 01 28 FC | 	wypin	#0, arg01
1f03c     41 12 62 FD | 	dirh	arg01
1f040     28 4E 85 F1 | 	sub	fp, #40
1f044     A7 12 02 F6 | 	mov	arg01, fp
1f048     14 4E 85 F1 | 	sub	fp, #20
1f04c     0A 14 06 F6 | 	mov	arg02, #10
1f050     14 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f054     00 12 06 F6 | 	mov	arg01, #0
1f058     00 14 06 F6 | 	mov	arg02, #0
1f05c     E0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f060     1C 80 B0 FD | 	call	#_fatfs_cc_deselect_1003
1f064     64 12 06 F6 | 	mov	arg01, #100
1f068     BC 9B BF FD | 	call	#__system___waitus
1f06c     14 4E 05 F1 | 	add	fp, #20
1f070     A7 12 02 F6 | 	mov	arg01, fp
1f074     14 4E 85 F1 | 	sub	fp, #20
1f078     0A 14 06 F6 | 	mov	arg02, #10
1f07c     E8 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f080     0C 4E 05 F1 | 	add	fp, #12
1f084     A7 00 48 FC | 	wrbyte	#0, fp
1f088     0C 4E 85 F1 | 	sub	fp, #12
1f08c     00 12 06 F6 | 	mov	arg01, #0
1f090     00 14 06 F6 | 	mov	arg02, #0
1f094     A8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f098     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1f09c     01 18 0E F2 | 	cmp	arg04, #1 wz
1f0a0     B8 03 90 5D |  if_ne	jmp	#LR__3297
1f0a4     08 12 06 F6 | 	mov	arg01, #8
1f0a8     AA 15 06 F6 | 	mov	arg02, #426
1f0ac     90 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f0b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f0b4     01 FA 0D F2 | 	cmp	result1, #1 wz
1f0b8     98 01 90 5D |  if_ne	jmp	#LR__3283
1f0bc     14 4E 05 F1 | 	add	fp, #20
1f0c0     A7 12 02 F6 | 	mov	arg01, fp
1f0c4     14 4E 85 F1 | 	sub	fp, #20
1f0c8     04 14 06 F6 | 	mov	arg02, #4
1f0cc     98 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f0d0     16 4E 05 F1 | 	add	fp, #22
1f0d4     A7 24 C2 FA | 	rdbyte	local04, fp
1f0d8     16 4E 85 F1 | 	sub	fp, #22
1f0dc     01 24 0E F2 | 	cmp	local04, #1 wz
1f0e0     17 4E 05 A1 |  if_e	add	fp, #23
1f0e4     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1f0e8     17 4E 85 A1 |  if_e	sub	fp, #23
1f0ec     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1f0f0     68 03 90 5D |  if_ne	jmp	#LR__3296
1f0f4                 | ' 				for (tmr = 1000; tmr; tmr--) {
1f0f4     18 4E 05 F1 | 	add	fp, #24
1f0f8     01 00 80 FF 
1f0fc     A7 D0 6B FC | 	wrlong	##1000, fp
1f100     18 4E 85 F1 | 	sub	fp, #24
1f104                 | LR__3280
1f104     18 4E 05 F1 | 	add	fp, #24
1f108     A7 1E 0A FB | 	rdlong	local01, fp wz
1f10c     18 4E 85 F1 | 	sub	fp, #24
1f110     3C 00 90 AD |  if_e	jmp	#LR__3281
1f114     A9 12 06 F6 | 	mov	arg01, #169
1f118     1E 14 C6 F9 | 	decod	arg02, #30
1f11c     20 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f120     FD 24 02 F6 | 	mov	local04, result1
1f124     07 24 4E F7 | 	zerox	local04, #7 wz
1f128     24 00 90 AD |  if_e	jmp	#LR__3281
1f12c     01 00 00 FF 
1f130     E8 13 06 F6 | 	mov	arg01, ##1000
1f134     F0 9A BF FD | 	call	#__system___waitus
1f138     18 4E 05 F1 | 	add	fp, #24
1f13c     A7 24 02 FB | 	rdlong	local04, fp
1f140     01 24 86 F1 | 	sub	local04, #1
1f144     A7 24 62 FC | 	wrlong	local04, fp
1f148     18 4E 85 F1 | 	sub	fp, #24
1f14c     B4 FF 9F FD | 	jmp	#LR__3280
1f150                 | LR__3281
1f150     18 4E 05 F1 | 	add	fp, #24
1f154     A7 24 0A FB | 	rdlong	local04, fp wz
1f158     18 4E 85 F1 | 	sub	fp, #24
1f15c     4C 00 90 AD |  if_e	jmp	#LR__3282
1f160     3A 12 06 F6 | 	mov	arg01, #58
1f164     00 14 06 F6 | 	mov	arg02, #0
1f168     D4 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f16c     FD 22 02 F6 | 	mov	local03, result1
1f170     07 22 4E F7 | 	zerox	local03, #7 wz
1f174     34 00 90 5D |  if_ne	jmp	#LR__3282
1f178     14 4E 05 F1 | 	add	fp, #20
1f17c     A7 12 02 F6 | 	mov	arg01, fp
1f180     14 4E 85 F1 | 	sub	fp, #20
1f184     04 14 06 F6 | 	mov	arg02, #4
1f188     DC 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0993
1f18c     14 4E 05 F1 | 	add	fp, #20
1f190     A7 1E C2 FA | 	rdbyte	local01, fp
1f194     40 1E CE F7 | 	test	local01, #64 wz
1f198     0C 24 06 56 |  if_ne	mov	local04, #12
1f19c     04 24 06 A6 |  if_e	mov	local04, #4
1f1a0     08 4E 85 F1 | 	sub	fp, #8
1f1a4     A7 24 42 FC | 	wrbyte	local04, fp
1f1a8     0C 4E 85 F1 | 	sub	fp, #12
1f1ac                 | LR__3282
1f1ac     14 24 06 FB | 	rdlong	local04, #20
1f1b0     18 4E 05 F1 | 	add	fp, #24
1f1b4     A7 24 62 FC | 	wrlong	local04, fp
1f1b8     0C 4E 05 F1 | 	add	fp, #12
1f1bc     A7 24 02 FB | 	rdlong	local04, fp
1f1c0     1B 24 26 F4 | 	bith	local04, #27
1f1c4     A7 24 62 FC | 	wrlong	local04, fp
1f1c8     0C 4E 85 F1 | 	sub	fp, #12
1f1cc     A7 24 02 FB | 	rdlong	local04, fp
1f1d0     18 4E 85 F1 | 	sub	fp, #24
1f1d4     68 78 04 FF 
1f1d8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f1dc     1C 4E 05 C1 |  if_b	add	fp, #28
1f1e0     00 01 80 CF 
1f1e4     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f1e8     1C 4E 85 C1 |  if_b	sub	fp, #28
1f1ec     6C 02 90 CD |  if_b	jmp	#LR__3296
1f1f0     18 4E 05 F1 | 	add	fp, #24
1f1f4     A7 24 02 FB | 	rdlong	local04, fp
1f1f8     18 4E 85 F1 | 	sub	fp, #24
1f1fc     E1 F5 05 FF 
1f200     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f204     1C 4E 05 C1 |  if_b	add	fp, #28
1f208     00 01 80 CF 
1f20c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1f210     1C 4E 85 C1 |  if_b	sub	fp, #28
1f214     44 02 90 CD |  if_b	jmp	#LR__3296
1f218     18 4E 05 F1 | 	add	fp, #24
1f21c     A7 24 02 FB | 	rdlong	local04, fp
1f220     18 4E 85 F1 | 	sub	fp, #24
1f224     3B 58 08 FF 
1f228     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1f22c     1C 4E 05 C1 |  if_b	add	fp, #28
1f230     00 01 80 CF 
1f234     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1f238     1C 4E 85 C1 |  if_b	sub	fp, #28
1f23c     1C 02 90 CD |  if_b	jmp	#LR__3296
1f240     1C 4E 05 F1 | 	add	fp, #28
1f244     80 01 80 FF 
1f248     A7 10 68 FC | 	wrlong	##196616, fp
1f24c     1C 4E 85 F1 | 	sub	fp, #28
1f250     08 02 90 FD | 	jmp	#LR__3296
1f254                 | LR__3283
1f254     A9 12 06 F6 | 	mov	arg01, #169
1f258     00 14 06 F6 | 	mov	arg02, #0
1f25c     E0 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f260     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1f264     02 24 16 F2 | 	cmp	local04, #2 wc
1f268     18 00 90 3D |  if_ae	jmp	#LR__3284
1f26c     0C 4E 05 F1 | 	add	fp, #12
1f270     A7 04 48 FC | 	wrbyte	#2, fp
1f274     04 4E 05 F1 | 	add	fp, #4
1f278     A7 52 49 FC | 	wrbyte	#169, fp
1f27c     10 4E 85 F1 | 	sub	fp, #16
1f280     14 00 90 FD | 	jmp	#LR__3285
1f284                 | LR__3284
1f284     0C 4E 05 F1 | 	add	fp, #12
1f288     A7 02 48 FC | 	wrbyte	#1, fp
1f28c     04 4E 05 F1 | 	add	fp, #4
1f290     A7 02 48 FC | 	wrbyte	#1, fp
1f294     10 4E 85 F1 | 	sub	fp, #16
1f298                 | LR__3285
1f298                 | ' 				ty =  0x01 ; cmd =  (1) ;
1f298                 | ' 			}
1f298                 | ' 			for (tmr = 1000; tmr; tmr--) {
1f298     18 4E 05 F1 | 	add	fp, #24
1f29c     01 00 80 FF 
1f2a0     A7 D0 6B FC | 	wrlong	##1000, fp
1f2a4     18 4E 85 F1 | 	sub	fp, #24
1f2a8                 | LR__3286
1f2a8     18 4E 05 F1 | 	add	fp, #24
1f2ac     A7 22 0A FB | 	rdlong	local03, fp wz
1f2b0     18 4E 85 F1 | 	sub	fp, #24
1f2b4     44 00 90 AD |  if_e	jmp	#LR__3287
1f2b8     10 4E 05 F1 | 	add	fp, #16
1f2bc     A7 12 C2 FA | 	rdbyte	arg01, fp
1f2c0     10 4E 85 F1 | 	sub	fp, #16
1f2c4     00 14 06 F6 | 	mov	arg02, #0
1f2c8     74 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f2cc     FD 24 02 F6 | 	mov	local04, result1
1f2d0     07 24 4E F7 | 	zerox	local04, #7 wz
1f2d4     24 00 90 AD |  if_e	jmp	#LR__3287
1f2d8     01 00 00 FF 
1f2dc     E8 13 06 F6 | 	mov	arg01, ##1000
1f2e0     44 99 BF FD | 	call	#__system___waitus
1f2e4     18 4E 05 F1 | 	add	fp, #24
1f2e8     A7 24 02 FB | 	rdlong	local04, fp
1f2ec     01 24 86 F1 | 	sub	local04, #1
1f2f0     A7 24 62 FC | 	wrlong	local04, fp
1f2f4     18 4E 85 F1 | 	sub	fp, #24
1f2f8     AC FF 9F FD | 	jmp	#LR__3286
1f2fc                 | LR__3287
1f2fc     18 4E 05 F1 | 	add	fp, #24
1f300     A7 24 0A FB | 	rdlong	local04, fp wz
1f304     18 4E 85 F1 | 	sub	fp, #24
1f308     14 00 90 AD |  if_e	jmp	#LR__3288
1f30c     10 12 06 F6 | 	mov	arg01, #16
1f310     09 14 C6 F9 | 	decod	arg02, #9
1f314     28 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f318     07 FA 4D F7 | 	zerox	result1, #7 wz
1f31c     0C 00 90 AD |  if_e	jmp	#LR__3289
1f320                 | LR__3288
1f320     0C 4E 05 F1 | 	add	fp, #12
1f324     A7 00 48 FC | 	wrbyte	#0, fp
1f328     0C 4E 85 F1 | 	sub	fp, #12
1f32c                 | LR__3289
1f32c     14 24 06 FB | 	rdlong	local04, #20
1f330     18 4E 05 F1 | 	add	fp, #24
1f334     A7 24 62 FC | 	wrlong	local04, fp
1f338     18 4E 85 F1 | 	sub	fp, #24
1f33c     F0 FA 02 FF 
1f340     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f344     18 00 90 3D |  if_ae	jmp	#LR__3290
1f348     24 4E 05 F1 | 	add	fp, #36
1f34c     A7 24 02 FB | 	rdlong	local04, fp
1f350     1B 24 26 F4 | 	bith	local04, #27
1f354     A7 24 62 FC | 	wrlong	local04, fp
1f358     24 4E 85 F1 | 	sub	fp, #36
1f35c     2C 00 90 FD | 	jmp	#LR__3291
1f360                 | LR__3290
1f360     18 4E 05 F1 | 	add	fp, #24
1f364     A7 24 02 FB | 	rdlong	local04, fp
1f368     18 4E 85 F1 | 	sub	fp, #24
1f36c     E1 F5 05 FF 
1f370     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f374     24 4E 05 C1 |  if_b	add	fp, #36
1f378     A7 24 02 CB |  if_b	rdlong	local04, fp
1f37c     80 00 04 CF 
1f380     00 24 46 C5 |  if_b	or	local04, ##134283264
1f384     A7 24 62 CC |  if_b	wrlong	local04, fp
1f388     24 4E 85 C1 |  if_b	sub	fp, #36
1f38c                 | LR__3291
1f38c     18 4E 05 F1 | 	add	fp, #24
1f390     A7 24 02 FB | 	rdlong	local04, fp
1f394     18 4E 85 F1 | 	sub	fp, #24
1f398     F0 FA 02 FF 
1f39c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1f3a0     1C 4E 05 C1 |  if_b	add	fp, #28
1f3a4     00 01 80 CF 
1f3a8     A7 08 68 CC |  if_b	wrlong	##131076, fp
1f3ac     1C 4E 85 C1 |  if_b	sub	fp, #28
1f3b0     A8 00 90 CD |  if_b	jmp	#LR__3295
1f3b4     18 4E 05 F1 | 	add	fp, #24
1f3b8     A7 24 02 FB | 	rdlong	local04, fp
1f3bc     18 4E 85 F1 | 	sub	fp, #24
1f3c0     68 78 04 FF 
1f3c4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1f3c8     1C 4E 05 C1 |  if_b	add	fp, #28
1f3cc     80 01 80 CF 
1f3d0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1f3d4     1C 4E 85 C1 |  if_b	sub	fp, #28
1f3d8     80 00 90 CD |  if_b	jmp	#LR__3294
1f3dc     18 4E 05 F1 | 	add	fp, #24
1f3e0     A7 24 02 FB | 	rdlong	local04, fp
1f3e4     18 4E 85 F1 | 	sub	fp, #24
1f3e8     E1 F5 05 FF 
1f3ec     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1f3f0     1C 4E 05 C1 |  if_b	add	fp, #28
1f3f4     00 02 80 CF 
1f3f8     A7 10 68 CC |  if_b	wrlong	##262152, fp
1f3fc     1C 4E 85 C1 |  if_b	sub	fp, #28
1f400     58 00 90 CD |  if_b	jmp	#LR__3293
1f404     18 4E 05 F1 | 	add	fp, #24
1f408     A7 24 02 FB | 	rdlong	local04, fp
1f40c     18 4E 85 F1 | 	sub	fp, #24
1f410     59 73 07 FF 
1f414     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1f418     1C 4E 05 C1 |  if_b	add	fp, #28
1f41c     80 02 80 CF 
1f420     A7 14 68 CC |  if_b	wrlong	##327690, fp
1f424     1C 4E 85 C1 |  if_b	sub	fp, #28
1f428     30 00 90 CD |  if_b	jmp	#LR__3292
1f42c     18 4E 05 F1 | 	add	fp, #24
1f430     A7 24 02 FB | 	rdlong	local04, fp
1f434     18 4E 85 F1 | 	sub	fp, #24
1f438     D1 F0 08 FF 
1f43c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1f440     1C 4E 05 C1 |  if_b	add	fp, #28
1f444     00 03 80 CF 
1f448     A7 18 68 CC |  if_b	wrlong	##393228, fp
1f44c     1C 4E 85 F3 | 	sumc	fp, #28
1f450     80 03 80 3F 
1f454     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1f458     1C 4E 85 31 |  if_ae	sub	fp, #28
1f45c                 | LR__3292
1f45c                 | LR__3293
1f45c                 | LR__3294
1f45c                 | LR__3295
1f45c                 | LR__3296
1f45c                 | LR__3297
1f45c     0C 4E 05 F1 | 	add	fp, #12
1f460     A7 24 C2 FA | 	rdbyte	local04, fp
1f464     01 00 00 FF 
1f468     21 E4 05 F1 | 	add	objptr, ##545
1f46c     F2 24 42 FC | 	wrbyte	local04, objptr
1f470     A7 1E CA FA | 	rdbyte	local01, fp wz
1f474     00 24 06 56 |  if_ne	mov	local04, #0
1f478     01 24 06 A6 |  if_e	mov	local04, #1
1f47c     20 4E 05 F1 | 	add	fp, #32
1f480     A7 24 42 FC | 	wrbyte	local04, fp
1f484     A7 24 C2 FA | 	rdbyte	local04, fp
1f488     2C 4E 85 F1 | 	sub	fp, #44
1f48c     01 E4 85 F1 | 	sub	objptr, #1
1f490     F2 24 42 FC | 	wrbyte	local04, objptr
1f494     01 00 00 FF 
1f498     20 E4 85 F1 | 	sub	objptr, ##544
1f49c     E0 7B B0 FD | 	call	#_fatfs_cc_deselect_1003
1f4a0     34 4E 05 F1 | 	add	fp, #52
1f4a4     A7 12 02 FB | 	rdlong	arg01, fp
1f4a8     18 4E 85 F1 | 	sub	fp, #24
1f4ac     A7 14 02 FB | 	rdlong	arg02, fp
1f4b0     09 15 12 FC | 	wxpin	arg02, arg01
1f4b4     1C 4E 05 F1 | 	add	fp, #28
1f4b8     A7 12 02 FB | 	rdlong	arg01, fp
1f4bc     14 4E 85 F1 | 	sub	fp, #20
1f4c0     A7 14 02 FB | 	rdlong	arg02, fp
1f4c4     09 15 02 FC | 	wrpin	arg02, arg01
1f4c8                 | ' 
1f4c8                 | ' 		}
1f4c8                 | ' 	}
1f4c8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f4c8                 | ' 	CardType = ty;
1f4c8                 | ' 	s = ty ? 0 :  0x01 ;
1f4c8                 | ' 	Stat = s;
1f4c8                 | ' 
1f4c8                 | ' 	deselect();
1f4c8                 | ' 
1f4c8                 | ' 
1f4c8                 | ' 	_wxpin( PIN_CLK, ck_div );
1f4c8                 | ' 	_wrpin( PIN_DI, spm_tx );
1f4c8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1f4c8                 | ' 	return s;
1f4c8     08 4E 05 F1 | 	add	fp, #8
1f4cc     A7 FA C1 FA | 	rdbyte	result1, fp
1f4d0     2C 4E 85 F1 | 	sub	fp, #44
1f4d4                 | LR__3298
1f4d4     A7 F0 03 F6 | 	mov	ptra, fp
1f4d8     B2 00 A0 FD | 	call	#popregs_
1f4dc                 | _fatfs_cc_disk_initialize_ret
1f4dc     2D 00 64 FD | 	ret
1f4e0                 | 
1f4e0                 | _fatfs_cc_disk_read
1f4e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f4e4     A8 00 A0 FD | 	call	#pushregs_
1f4e8     0A 1F 02 F6 | 	mov	local01, arg02
1f4ec     0B 21 02 F6 | 	mov	local02, arg03
1f4f0     0C 23 02 F6 | 	mov	local03, arg04
1f4f4     00 12 0E F2 | 	cmp	arg01, #0 wz
1f4f8     01 FA 05 56 |  if_ne	mov	result1, #1
1f4fc                 | ' 
1f4fc                 | ' 	return Stat;
1f4fc     01 00 00 AF 
1f500     20 E4 05 A1 |  if_e	add	objptr, ##544
1f504     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f508     01 00 00 AF 
1f50c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f510     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f514     01 FA CD F7 | 	test	result1, #1 wz
1f518     03 FA 05 56 |  if_ne	mov	result1, #3
1f51c     84 00 90 5D |  if_ne	jmp	#LR__3302
1f520     01 00 00 FF 
1f524     21 E4 05 F1 | 	add	objptr, ##545
1f528     F2 24 C2 FA | 	rdbyte	local04, objptr
1f52c     01 00 00 FF 
1f530     21 E4 85 F1 | 	sub	objptr, ##545
1f534     08 24 CE F7 | 	test	local04, #8 wz
1f538     09 20 66 A0 |  if_e	shl	local02, #9
1f53c     02 22 16 F2 | 	cmp	local03, #2 wc
1f540     12 24 06 36 |  if_ae	mov	local04, #18
1f544     11 24 06 C6 |  if_b	mov	local04, #17
1f548     10 15 02 F6 | 	mov	arg02, local02
1f54c     12 13 02 F6 | 	mov	arg01, local04
1f550     EC 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f554     FD 26 02 F6 | 	mov	local05, result1
1f558     07 26 4E F7 | 	zerox	local05, #7 wz
1f55c     30 00 90 5D |  if_ne	jmp	#LR__3301
1f560                 | ' 		do {
1f560                 | LR__3300
1f560     0F 13 02 F6 | 	mov	arg01, local01
1f564     09 14 C6 F9 | 	decod	arg02, #9
1f568     28 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1011
1f56c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f570     01 00 00 5F 
1f574     00 1E 06 51 |  if_ne	add	local01, ##512
1f578     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3300
1f57c     12 25 E2 F8 | 	getbyte	local04, local04, #0
1f580     12 24 0E F2 | 	cmp	local04, #18 wz
1f584     0C 12 06 A6 |  if_e	mov	arg01, #12
1f588     00 14 06 A6 |  if_e	mov	arg02, #0
1f58c     B0 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1017
1f590                 | LR__3301
1f590     EC 7A B0 FD | 	call	#_fatfs_cc_deselect_1003
1f594                 | ' 	}
1f594                 | ' 	deselect();
1f594                 | ' 
1f594                 | ' 	return count ? RES_ERROR : RES_OK;
1f594     00 22 0E F2 | 	cmp	local03, #0 wz
1f598     01 26 06 56 |  if_ne	mov	local05, #1
1f59c     00 26 06 A6 |  if_e	mov	local05, #0
1f5a0     13 FB 01 F6 | 	mov	result1, local05
1f5a4                 | LR__3302
1f5a4     A7 F0 03 F6 | 	mov	ptra, fp
1f5a8     B2 00 A0 FD | 	call	#popregs_
1f5ac                 | _fatfs_cc_disk_read_ret
1f5ac     2D 00 64 FD | 	ret
1f5b0                 | 
1f5b0                 | _fatfs_cc_disk_write
1f5b0     04 4A 05 F6 | 	mov	COUNT_, #4
1f5b4     A8 00 A0 FD | 	call	#pushregs_
1f5b8     0A 1F 02 F6 | 	mov	local01, arg02
1f5bc     0C 21 02 F6 | 	mov	local02, arg04
1f5c0     0B 23 02 F6 | 	mov	local03, arg03
1f5c4     00 12 0E F2 | 	cmp	arg01, #0 wz
1f5c8     01 FA 05 56 |  if_ne	mov	result1, #1
1f5cc                 | ' 
1f5cc                 | ' 	return Stat;
1f5cc     01 00 00 AF 
1f5d0     20 E4 05 A1 |  if_e	add	objptr, ##544
1f5d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f5d8     01 00 00 AF 
1f5dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f5e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f5e4     01 FA CD F7 | 	test	result1, #1 wz
1f5e8     03 FA 05 56 |  if_ne	mov	result1, #3
1f5ec     D4 00 90 5D |  if_ne	jmp	#LR__3314
1f5f0     01 00 00 FF 
1f5f4     21 E4 05 F1 | 	add	objptr, ##545
1f5f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f5fc     01 00 00 FF 
1f600     21 E4 85 F1 | 	sub	objptr, ##545
1f604     08 16 CE F7 | 	test	arg03, #8 wz
1f608     09 22 66 A0 |  if_e	shl	local03, #9
1f60c     01 20 0E F2 | 	cmp	local02, #1 wz
1f610     30 00 90 5D |  if_ne	jmp	#LR__3310
1f614     18 12 06 F6 | 	mov	arg01, #24
1f618     11 15 02 F6 | 	mov	arg02, local03
1f61c     20 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f620     FD 24 02 F6 | 	mov	local04, result1
1f624     07 24 4E F7 | 	zerox	local04, #7 wz
1f628     84 00 90 5D |  if_ne	jmp	#LR__3313
1f62c     0F 13 02 F6 | 	mov	arg01, local01
1f630     FE 14 06 F6 | 	mov	arg02, #254
1f634     3C 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1013
1f638     00 FA 0D F2 | 	cmp	result1, #0 wz
1f63c     00 20 06 56 |  if_ne	mov	local02, #0
1f640     6C 00 90 FD | 	jmp	#LR__3313
1f644                 | LR__3310
1f644     01 00 00 FF 
1f648     21 E4 05 F1 | 	add	objptr, ##545
1f64c     F2 24 C2 FA | 	rdbyte	local04, objptr
1f650     01 00 00 FF 
1f654     21 E4 85 F1 | 	sub	objptr, ##545
1f658     06 24 CE F7 | 	test	local04, #6 wz
1f65c     97 12 06 56 |  if_ne	mov	arg01, #151
1f660     10 15 02 56 |  if_ne	mov	arg02, local02
1f664     D8 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1017
1f668     11 15 02 F6 | 	mov	arg02, local03
1f66c     19 12 06 F6 | 	mov	arg01, #25
1f670     CC 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f674     FD 24 02 F6 | 	mov	local04, result1
1f678     07 24 4E F7 | 	zerox	local04, #7 wz
1f67c     30 00 90 5D |  if_ne	jmp	#LR__3312
1f680                 | ' 			do {
1f680                 | LR__3311
1f680     0F 13 02 F6 | 	mov	arg01, local01
1f684     FC 14 06 F6 | 	mov	arg02, #252
1f688     E8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1013
1f68c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f690     01 00 00 5F 
1f694     00 1E 06 51 |  if_ne	add	local01, ##512
1f698     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3311
1f69c     00 12 06 F6 | 	mov	arg01, #0
1f6a0     FD 14 06 F6 | 	mov	arg02, #253
1f6a4     CC 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1013
1f6a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f6ac     01 20 06 A6 |  if_e	mov	local02, #1
1f6b0                 | LR__3312
1f6b0                 | LR__3313
1f6b0     CC 79 B0 FD | 	call	#_fatfs_cc_deselect_1003
1f6b4                 | ' 				count = 1;
1f6b4                 | ' 		}
1f6b4                 | ' 	}
1f6b4                 | ' 	deselect();
1f6b4                 | ' 
1f6b4                 | ' 	return count ? RES_ERROR : RES_OK;
1f6b4     00 20 0E F2 | 	cmp	local02, #0 wz
1f6b8     01 24 06 56 |  if_ne	mov	local04, #1
1f6bc     00 24 06 A6 |  if_e	mov	local04, #0
1f6c0     12 FB 01 F6 | 	mov	result1, local04
1f6c4                 | LR__3314
1f6c4     A7 F0 03 F6 | 	mov	ptra, fp
1f6c8     B2 00 A0 FD | 	call	#popregs_
1f6cc                 | _fatfs_cc_disk_write_ret
1f6cc     2D 00 64 FD | 	ret
1f6d0                 | 
1f6d0                 | _fatfs_cc_disk_ioctl
1f6d0     01 4A 05 F6 | 	mov	COUNT_, #1
1f6d4     A8 00 A0 FD | 	call	#pushregs_
1f6d8     30 F0 07 F1 | 	add	ptra, #48
1f6dc     04 4E 05 F1 | 	add	fp, #4
1f6e0     A7 12 42 FC | 	wrbyte	arg01, fp
1f6e4     04 4E 05 F1 | 	add	fp, #4
1f6e8     A7 14 42 FC | 	wrbyte	arg02, fp
1f6ec     04 4E 05 F1 | 	add	fp, #4
1f6f0     A7 16 62 FC | 	wrlong	arg03, fp
1f6f4     08 4E 85 F1 | 	sub	fp, #8
1f6f8     A7 12 CA FA | 	rdbyte	arg01, fp wz
1f6fc     04 4E 85 F1 | 	sub	fp, #4
1f700     01 FA 05 56 |  if_ne	mov	result1, #1
1f704                 | ' 
1f704                 | ' 	return Stat;
1f704     01 00 00 AF 
1f708     20 E4 05 A1 |  if_e	add	objptr, ##544
1f70c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f710     01 00 00 AF 
1f714     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f718     FD FA E1 F8 | 	getbyte	result1, result1, #0
1f71c     01 FA CD F7 | 	test	result1, #1 wz
1f720     03 FA 05 56 |  if_ne	mov	result1, #3
1f724     E4 01 90 5D |  if_ne	jmp	#LR__3328
1f728     10 4E 05 F1 | 	add	fp, #16
1f72c     A7 02 68 FC | 	wrlong	#1, fp
1f730                 | ' 
1f730                 | ' 	res = RES_ERROR;
1f730                 | ' 	switch (ctrl) {
1f730     08 4E 85 F1 | 	sub	fp, #8
1f734     A7 1E C2 FA | 	rdbyte	local01, fp
1f738     08 4E 85 F1 | 	sub	fp, #8
1f73c     04 1E 26 F3 | 	fle	local01, #4
1f740     30 1E 62 FD | 	jmprel	local01
1f744                 | LR__3320
1f744     10 00 90 FD | 	jmp	#LR__3321
1f748     24 00 90 FD | 	jmp	#LR__3322
1f74c     A0 01 90 FD | 	jmp	#LR__3326
1f750     80 01 90 FD | 	jmp	#LR__3325
1f754     98 01 90 FD | 	jmp	#LR__3326
1f758                 | LR__3321
1f758     A8 79 B0 FD | 	call	#_fatfs_cc_select_1007
1f75c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f760     10 4E 05 51 |  if_ne	add	fp, #16
1f764     A7 00 68 5C |  if_ne	wrlong	#0, fp
1f768     10 4E 85 51 |  if_ne	sub	fp, #16
1f76c                 | ' 			break;
1f76c     8C 01 90 FD | 	jmp	#LR__3327
1f770                 | LR__3322
1f770     09 12 06 F6 | 	mov	arg01, #9
1f774     00 14 06 F6 | 	mov	arg02, #0
1f778     C4 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1017
1f77c     FD 1E 02 F6 | 	mov	local01, result1
1f780     07 1E 4E F7 | 	zerox	local01, #7 wz
1f784     74 01 90 5D |  if_ne	jmp	#LR__3327
1f788     18 4E 05 F1 | 	add	fp, #24
1f78c     A7 12 02 F6 | 	mov	arg01, fp
1f790     18 4E 85 F1 | 	sub	fp, #24
1f794     10 14 06 F6 | 	mov	arg02, #16
1f798     F8 79 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1011
1f79c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f7a0     58 01 90 AD |  if_e	jmp	#LR__3327
1f7a4     18 4E 05 F1 | 	add	fp, #24
1f7a8     A7 1E C2 FA | 	rdbyte	local01, fp
1f7ac     18 4E 85 F1 | 	sub	fp, #24
1f7b0     06 1E 46 F0 | 	shr	local01, #6
1f7b4     01 1E 0E F2 | 	cmp	local01, #1 wz
1f7b8     5C 00 90 5D |  if_ne	jmp	#LR__3323
1f7bc     21 4E 05 F1 | 	add	fp, #33
1f7c0     A7 1E C2 FA | 	rdbyte	local01, fp
1f7c4     01 4E 85 F1 | 	sub	fp, #1
1f7c8     A7 FA C1 FA | 	rdbyte	result1, fp
1f7cc     FD FA 31 F9 | 	getword	result1, result1, #0
1f7d0     08 FA 65 F0 | 	shl	result1, #8
1f7d4     FD 1E 02 F1 | 	add	local01, result1
1f7d8     01 4E 85 F1 | 	sub	fp, #1
1f7dc     A7 FA C1 FA | 	rdbyte	result1, fp
1f7e0     3F FA 05 F5 | 	and	result1, #63
1f7e4     10 FA 65 F0 | 	shl	result1, #16
1f7e8     FD 1E 02 F1 | 	add	local01, result1
1f7ec     01 1E 06 F1 | 	add	local01, #1
1f7f0     09 4E 05 F1 | 	add	fp, #9
1f7f4     A7 1E 62 FC | 	wrlong	local01, fp
1f7f8     1C 4E 85 F1 | 	sub	fp, #28
1f7fc     A7 1E 02 FB | 	rdlong	local01, fp
1f800     1C 4E 05 F1 | 	add	fp, #28
1f804     A7 FA 01 FB | 	rdlong	result1, fp
1f808     28 4E 85 F1 | 	sub	fp, #40
1f80c     0A FA 65 F0 | 	shl	result1, #10
1f810     0F FB 61 FC | 	wrlong	result1, local01
1f814     AC 00 90 FD | 	jmp	#LR__3324
1f818                 | LR__3323
1f818     1D 4E 05 F1 | 	add	fp, #29
1f81c     A7 1E C2 FA | 	rdbyte	local01, fp
1f820     0F 1F 42 F8 | 	getnib	local01, local01, #0
1f824     05 4E 05 F1 | 	add	fp, #5
1f828     A7 FA C1 FA | 	rdbyte	result1, fp
1f82c     80 FA 05 F5 | 	and	result1, #128
1f830     07 FA C5 F0 | 	sar	result1, #7
1f834     FD 1E 02 F1 | 	add	local01, result1
1f838     01 4E 85 F1 | 	sub	fp, #1
1f83c     A7 FA C1 FA | 	rdbyte	result1, fp
1f840     03 FA 05 F5 | 	and	result1, #3
1f844     01 FA 65 F0 | 	shl	result1, #1
1f848     FD 1E 02 F1 | 	add	local01, result1
1f84c     02 1E 06 F1 | 	add	local01, #2
1f850     0D 4E 85 F1 | 	sub	fp, #13
1f854     A7 1E 42 FC | 	wrbyte	local01, fp
1f858     0C 4E 05 F1 | 	add	fp, #12
1f85c     A7 1E C2 FA | 	rdbyte	local01, fp
1f860     06 1E 46 F0 | 	shr	local01, #6
1f864     01 4E 85 F1 | 	sub	fp, #1
1f868     A7 FA C1 FA | 	rdbyte	result1, fp
1f86c     FD FA 31 F9 | 	getword	result1, result1, #0
1f870     02 FA 65 F0 | 	shl	result1, #2
1f874     FD 1E 02 F1 | 	add	local01, result1
1f878     01 4E 85 F1 | 	sub	fp, #1
1f87c     A7 FA C1 FA | 	rdbyte	result1, fp
1f880     03 FA 05 F5 | 	and	result1, #3
1f884     FD FA 31 F9 | 	getword	result1, result1, #0
1f888     0A FA 65 F0 | 	shl	result1, #10
1f88c     FD 1E 02 F1 | 	add	local01, result1
1f890     01 1E 06 F1 | 	add	local01, #1
1f894     0A 4E 05 F1 | 	add	fp, #10
1f898     A7 1E 62 FC | 	wrlong	local01, fp
1f89c     1C 4E 85 F1 | 	sub	fp, #28
1f8a0     A7 1E 02 FB | 	rdlong	local01, fp
1f8a4     1C 4E 05 F1 | 	add	fp, #28
1f8a8     A7 FA 01 FB | 	rdlong	result1, fp
1f8ac     14 4E 85 F1 | 	sub	fp, #20
1f8b0     A7 16 C2 FA | 	rdbyte	arg03, fp
1f8b4     14 4E 85 F1 | 	sub	fp, #20
1f8b8     09 16 86 F1 | 	sub	arg03, #9
1f8bc     0B FB 61 F0 | 	shl	result1, arg03
1f8c0     0F FB 61 FC | 	wrlong	result1, local01
1f8c4                 | LR__3324
1f8c4     10 4E 05 F1 | 	add	fp, #16
1f8c8     A7 00 68 FC | 	wrlong	#0, fp
1f8cc     10 4E 85 F1 | 	sub	fp, #16
1f8d0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1f8d0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1f8d0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1f8d0                 | ' 				}
1f8d0                 | ' 				res = RES_OK;
1f8d0                 | ' 			}
1f8d0                 | ' 			break;
1f8d0     28 00 90 FD | 	jmp	#LR__3327
1f8d4                 | LR__3325
1f8d4     0C 4E 05 F1 | 	add	fp, #12
1f8d8     A7 1E 02 FB | 	rdlong	local01, fp
1f8dc     0F 01 69 FC | 	wrlong	#128, local01
1f8e0     04 4E 05 F1 | 	add	fp, #4
1f8e4     A7 00 68 FC | 	wrlong	#0, fp
1f8e8     10 4E 85 F1 | 	sub	fp, #16
1f8ec                 | ' 			*(DWORD*)buff = 128;
1f8ec                 | ' 			res = RES_OK;
1f8ec                 | ' 			break;
1f8ec     0C 00 90 FD | 	jmp	#LR__3327
1f8f0                 | LR__3326
1f8f0     10 4E 05 F1 | 	add	fp, #16
1f8f4     A7 08 68 FC | 	wrlong	#4, fp
1f8f8     10 4E 85 F1 | 	sub	fp, #16
1f8fc                 | LR__3327
1f8fc     80 77 B0 FD | 	call	#_fatfs_cc_deselect_1003
1f900                 | ' 			res = RES_PARERR;
1f900                 | ' 	}
1f900                 | ' 
1f900                 | ' 	deselect();
1f900                 | ' 
1f900                 | ' 	return res;
1f900     10 4E 05 F1 | 	add	fp, #16
1f904     A7 FA 01 FB | 	rdlong	result1, fp
1f908     10 4E 85 F1 | 	sub	fp, #16
1f90c                 | LR__3328
1f90c     A7 F0 03 F6 | 	mov	ptra, fp
1f910     B2 00 A0 FD | 	call	#popregs_
1f914                 | _fatfs_cc_disk_ioctl_ret
1f914     2D 00 64 FD | 	ret
1f918                 | 
1f918                 | _fatfs_cc_disk_setpins
1f918     00 12 0E F2 | 	cmp	arg01, #0 wz
1f91c     01 FA 65 56 |  if_ne	neg	result1, #1
1f920     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1f924     01 00 00 FF 
1f928     10 E4 05 F1 | 	add	objptr, ##528
1f92c     F2 14 62 FC | 	wrlong	arg02, objptr
1f930     04 E4 05 F1 | 	add	objptr, #4
1f934     F2 16 62 FC | 	wrlong	arg03, objptr
1f938     04 E4 05 F1 | 	add	objptr, #4
1f93c     F2 18 62 FC | 	wrlong	arg04, objptr
1f940     04 E4 05 F1 | 	add	objptr, #4
1f944     F2 1A 62 FC | 	wrlong	arg05, objptr
1f948     01 00 00 FF 
1f94c     1C E4 85 F1 | 	sub	objptr, ##540
1f950     00 FA 05 F6 | 	mov	result1, #0
1f954                 | _fatfs_cc_disk_setpins_ret
1f954     2D 00 64 FD | 	ret
1f958                 | 
1f958                 | _fatfs_cc_tchar2uni
1f958     09 01 02 FB | 	rdlong	_var01, arg01
1f95c     00 03 02 F6 | 	mov	_var02, _var01
1f960     01 00 06 F1 | 	add	_var01, #1
1f964     00 05 02 F6 | 	mov	_var03, _var01
1f968     01 07 C2 FA | 	rdbyte	_var04, _var02
1f96c     80 06 CE F7 | 	test	_var04, #128 wz
1f970     E8 00 90 AD |  if_e	jmp	#LR__3337
1f974     03 09 02 F6 | 	mov	_var05, _var04
1f978     E0 08 06 F5 | 	and	_var05, #224
1f97c     C0 08 0E F2 | 	cmp	_var05, #192 wz
1f980     1F 06 06 A5 |  if_e	and	_var04, #31
1f984     01 0A 06 A6 |  if_e	mov	_var06, #1
1f988     34 00 90 AD |  if_e	jmp	#LR__3331
1f98c     03 09 02 F6 | 	mov	_var05, _var04
1f990     F0 08 06 F5 | 	and	_var05, #240
1f994     E0 08 0E F2 | 	cmp	_var05, #224 wz
1f998     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1f99c     02 0A 06 A6 |  if_e	mov	_var06, #2
1f9a0     1C 00 90 AD |  if_e	jmp	#LR__3330
1f9a4     03 09 02 F6 | 	mov	_var05, _var04
1f9a8     F8 08 06 F5 | 	and	_var05, #248
1f9ac     F0 08 0E F2 | 	cmp	_var05, #240 wz
1f9b0     07 06 06 A5 |  if_e	and	_var04, #7
1f9b4     03 0A 06 A6 |  if_e	mov	_var06, #3
1f9b8                 | ' 			return 0xFFFFFFFF;
1f9b8     01 FA 65 56 |  if_ne	neg	result1, #1
1f9bc     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1f9c0                 | LR__3330
1f9c0                 | LR__3331
1f9c0                 | ' 		}
1f9c0                 | ' 		do {
1f9c0                 | LR__3332
1f9c0     02 0D C2 FA | 	rdbyte	_var07, _var03
1f9c4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1f9c8     C0 08 06 F5 | 	and	_var05, #192
1f9cc     80 08 0E F2 | 	cmp	_var05, #128 wz
1f9d0     01 04 06 F1 | 	add	_var03, #1
1f9d4     01 FA 65 56 |  if_ne	neg	result1, #1
1f9d8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1f9dc     06 06 66 F0 | 	shl	_var04, #6
1f9e0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1f9e4     3F 02 06 F5 | 	and	_var02, #63
1f9e8     01 07 42 F5 | 	or	_var04, _var02
1f9ec     F4 0B 6E FB | 	djnz	_var06, #LR__3332
1f9f0     80 06 16 F2 | 	cmp	_var04, #128 wc
1f9f4     24 00 90 CD |  if_b	jmp	#LR__3334
1f9f8     6C 00 00 FF 
1f9fc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1fa00     0C 00 90 CD |  if_b	jmp	#LR__3333
1fa04     70 00 00 FF 
1fa08     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1fa0c     0C 00 90 CD |  if_b	jmp	#LR__3334
1fa10                 | LR__3333
1fa10     80 08 00 FF 
1fa14     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1fa18     08 00 90 CD |  if_b	jmp	#LR__3335
1fa1c                 | LR__3334
1fa1c     01 FA 65 F6 | 	neg	result1, #1
1fa20     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1fa24                 | LR__3335
1fa24     80 00 00 FF 
1fa28     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1fa2c     2C 00 90 CD |  if_b	jmp	#LR__3336
1fa30     03 03 02 F6 | 	mov	_var02, _var04
1fa34     80 00 00 FF 
1fa38     00 02 86 F1 | 	sub	_var02, ##65536
1fa3c     06 02 66 F0 | 	shl	_var02, #6
1fa40     80 FF 01 FF 
1fa44     00 02 06 F5 | 	and	_var02, ##67043328
1fa48     6E 00 6C FF 
1fa4c     00 08 06 F6 | 	mov	_var05, ##-671032320
1fa50     01 09 42 F5 | 	or	_var05, _var02
1fa54     09 06 46 F7 | 	zerox	_var04, #9
1fa58     04 07 42 F5 | 	or	_var04, _var05
1fa5c                 | LR__3336
1fa5c                 | LR__3337
1fa5c     09 05 62 FC | 	wrlong	_var03, arg01
1fa60                 | ' 	}
1fa60                 | ' #line 811 "ff.c"
1fa60                 | ' 	*str = p;
1fa60                 | ' 	return uc;
1fa60     03 FB 01 F6 | 	mov	result1, _var04
1fa64                 | _fatfs_cc_tchar2uni_ret
1fa64     2D 00 64 FD | 	ret
1fa68                 | 
1fa68                 | _fatfs_cc_put_utf
1fa68     80 12 16 F2 | 	cmp	arg01, #128 wc
1fa6c     18 00 90 3D |  if_ae	jmp	#LR__3340
1fa70     01 16 16 F2 | 	cmp	arg03, #1 wc
1fa74     00 FA 05 C6 |  if_b	mov	result1, #0
1fa78     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1fa7c     0A 13 42 FC | 	wrbyte	arg01, arg02
1fa80                 | ' 		*buf = (TCHAR)chr;
1fa80                 | ' 		return 1;
1fa80     01 FA 05 F6 | 	mov	result1, #1
1fa84     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1fa88                 | LR__3340
1fa88     04 00 00 FF 
1fa8c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1fa90     40 00 90 3D |  if_ae	jmp	#LR__3341
1fa94     02 16 16 F2 | 	cmp	arg03, #2 wc
1fa98     00 FA 05 C6 |  if_b	mov	result1, #0
1fa9c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1faa0     09 FB 01 F6 | 	mov	result1, arg01
1faa4     06 FA 45 F0 | 	shr	result1, #6
1faa8     1F FA 05 F5 | 	and	result1, #31
1faac     C0 16 06 F6 | 	mov	arg03, #192
1fab0     FD 16 42 F5 | 	or	arg03, result1
1fab4     0A 17 42 FC | 	wrbyte	arg03, arg02
1fab8     01 14 06 F1 | 	add	arg02, #1
1fabc     3F 12 06 F5 | 	and	arg01, #63
1fac0     80 FA 05 F6 | 	mov	result1, #128
1fac4     09 FB 41 F5 | 	or	result1, arg01
1fac8     0A FB 41 FC | 	wrbyte	result1, arg02
1facc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1facc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1facc                 | ' 		return 2;
1facc     02 FA 05 F6 | 	mov	result1, #2
1fad0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1fad4                 | LR__3341
1fad4     80 00 00 FF 
1fad8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1fadc     70 00 90 3D |  if_ae	jmp	#LR__3344
1fae0     03 16 16 F2 | 	cmp	arg03, #3 wc
1fae4     18 00 90 CD |  if_b	jmp	#LR__3342
1fae8     6C 00 00 FF 
1faec     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1faf0     14 00 90 CD |  if_b	jmp	#LR__3343
1faf4     70 00 00 FF 
1faf8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1fafc     08 00 90 3D |  if_ae	jmp	#LR__3343
1fb00                 | LR__3342
1fb00     00 FA 05 F6 | 	mov	result1, #0
1fb04     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1fb08                 | LR__3343
1fb08     09 FB 59 F8 | 	getnib	result1, arg01, #3
1fb0c     E0 16 06 F6 | 	mov	arg03, #224
1fb10     FD 16 42 F5 | 	or	arg03, result1
1fb14     0A 17 42 FC | 	wrbyte	arg03, arg02
1fb18     01 14 06 F1 | 	add	arg02, #1
1fb1c     09 FB 01 F6 | 	mov	result1, arg01
1fb20     06 FA 45 F0 | 	shr	result1, #6
1fb24     3F FA 05 F5 | 	and	result1, #63
1fb28     80 16 06 F6 | 	mov	arg03, #128
1fb2c     FD 16 42 F5 | 	or	arg03, result1
1fb30     0A 17 42 FC | 	wrbyte	arg03, arg02
1fb34     01 14 06 F1 | 	add	arg02, #1
1fb38     3F 12 06 F5 | 	and	arg01, #63
1fb3c     80 FA 05 F6 | 	mov	result1, #128
1fb40     09 FB 41 F5 | 	or	result1, arg01
1fb44     0A FB 41 FC | 	wrbyte	result1, arg02
1fb48                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1fb48                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1fb48                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1fb48                 | ' 		return 3;
1fb48     03 FA 05 F6 | 	mov	result1, #3
1fb4c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1fb50                 | LR__3344
1fb50     04 16 16 F2 | 	cmp	arg03, #4 wc
1fb54     00 FA 05 C6 |  if_b	mov	result1, #0
1fb58     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1fb5c     09 01 02 F6 | 	mov	_var01, arg01
1fb60     E0 01 06 F4 | 	bitl	_var01, #480
1fb64     00 00 6C FF 
1fb68     00 00 86 F1 | 	sub	_var01, ##-671088640
1fb6c     06 00 46 F0 | 	shr	_var01, #6
1fb70     09 13 32 F9 | 	getword	arg01, arg01, #0
1fb74     6E 00 00 FF 
1fb78     00 12 86 F1 | 	sub	arg01, ##56320
1fb7c     00 08 00 FF 
1fb80     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1fb84     02 00 00 CF 
1fb88     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1fb8c     00 FA 05 36 |  if_ae	mov	result1, #0
1fb90     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1fb94     09 01 42 F5 | 	or	_var01, arg01
1fb98     80 00 00 FF 
1fb9c     00 00 06 F1 | 	add	_var01, ##65536
1fba0     00 FB 01 F6 | 	mov	result1, _var01
1fba4     12 FA 45 F0 | 	shr	result1, #18
1fba8     07 FA 05 F5 | 	and	result1, #7
1fbac     F0 16 06 F6 | 	mov	arg03, #240
1fbb0     FD 16 42 F5 | 	or	arg03, result1
1fbb4     0A 17 42 FC | 	wrbyte	arg03, arg02
1fbb8     01 14 06 F1 | 	add	arg02, #1
1fbbc     00 FB 01 F6 | 	mov	result1, _var01
1fbc0     0C FA 45 F0 | 	shr	result1, #12
1fbc4     3F FA 05 F5 | 	and	result1, #63
1fbc8     80 16 06 F6 | 	mov	arg03, #128
1fbcc     FD 16 42 F5 | 	or	arg03, result1
1fbd0     0A 17 42 FC | 	wrbyte	arg03, arg02
1fbd4     01 14 06 F1 | 	add	arg02, #1
1fbd8     00 FB 01 F6 | 	mov	result1, _var01
1fbdc     06 FA 45 F0 | 	shr	result1, #6
1fbe0     3F FA 05 F5 | 	and	result1, #63
1fbe4     80 16 06 F6 | 	mov	arg03, #128
1fbe8     FD 16 42 F5 | 	or	arg03, result1
1fbec     0A 17 42 FC | 	wrbyte	arg03, arg02
1fbf0     01 14 06 F1 | 	add	arg02, #1
1fbf4     3F 00 06 F5 | 	and	_var01, #63
1fbf8     80 FA 05 F6 | 	mov	result1, #128
1fbfc     00 FB 41 F5 | 	or	result1, _var01
1fc00     0A FB 41 FC | 	wrbyte	result1, arg02
1fc04                 | ' 	chr = (hc | chr) + 0x10000;
1fc04                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1fc04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1fc04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1fc04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1fc04                 | ' 	return 4;
1fc04     04 FA 05 F6 | 	mov	result1, #4
1fc08                 | _fatfs_cc_put_utf_ret
1fc08     2D 00 64 FD | 	ret
1fc0c                 | 
1fc0c                 | _fatfs_cc_sync_window
1fc0c     02 4A 05 F6 | 	mov	COUNT_, #2
1fc10     A8 00 A0 FD | 	call	#pushregs_
1fc14     09 1F 02 F6 | 	mov	local01, arg01
1fc18     00 20 06 F6 | 	mov	local02, #0
1fc1c     03 1E 06 F1 | 	add	local01, #3
1fc20     0F FB C9 FA | 	rdbyte	result1, local01 wz
1fc24     03 1E 86 F1 | 	sub	local01, #3
1fc28     A4 00 90 AD |  if_e	jmp	#LR__3352
1fc2c     01 1E 06 F1 | 	add	local01, #1
1fc30     0F 13 C2 FA | 	rdbyte	arg01, local01
1fc34     33 1E 06 F1 | 	add	local01, #51
1fc38     0F 15 02 F6 | 	mov	arg02, local01
1fc3c     04 1E 86 F1 | 	sub	local01, #4
1fc40     0F 17 02 FB | 	rdlong	arg03, local01
1fc44     30 1E 86 F1 | 	sub	local01, #48
1fc48     01 18 06 F6 | 	mov	arg04, #1
1fc4c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1fc50     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc54     74 00 90 5D |  if_ne	jmp	#LR__3350
1fc58     03 1E 06 F1 | 	add	local01, #3
1fc5c     0F 01 48 FC | 	wrbyte	#0, local01
1fc60     2D 1E 06 F1 | 	add	local01, #45
1fc64     0F FB 01 FB | 	rdlong	result1, local01
1fc68     0C 1E 86 F1 | 	sub	local01, #12
1fc6c     0F 19 02 FB | 	rdlong	arg04, local01
1fc70     0C FB 81 F1 | 	sub	result1, arg04
1fc74     08 1E 86 F1 | 	sub	local01, #8
1fc78     0F 19 02 FB | 	rdlong	arg04, local01
1fc7c     1C 1E 86 F1 | 	sub	local01, #28
1fc80     0C FB 11 F2 | 	cmp	result1, arg04 wc
1fc84     48 00 90 3D |  if_ae	jmp	#LR__3351
1fc88     02 1E 06 F1 | 	add	local01, #2
1fc8c     0F 19 C2 FA | 	rdbyte	arg04, local01
1fc90     02 1E 86 F1 | 	sub	local01, #2
1fc94     02 18 0E F2 | 	cmp	arg04, #2 wz
1fc98     34 00 90 5D |  if_ne	jmp	#LR__3351
1fc9c     01 1E 06 F1 | 	add	local01, #1
1fca0     0F 13 C2 FA | 	rdbyte	arg01, local01
1fca4     33 1E 06 F1 | 	add	local01, #51
1fca8     0F 15 02 F6 | 	mov	arg02, local01
1fcac     04 1E 86 F1 | 	sub	local01, #4
1fcb0     0F 17 02 FB | 	rdlong	arg03, local01
1fcb4     14 1E 86 F1 | 	sub	local01, #20
1fcb8     0F 1F 02 FB | 	rdlong	local01, local01
1fcbc     0F 17 02 F1 | 	add	arg03, local01
1fcc0     01 18 06 F6 | 	mov	arg04, #1
1fcc4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1fcc8     04 00 90 FD | 	jmp	#LR__3351
1fccc                 | LR__3350
1fccc     01 20 06 F6 | 	mov	local02, #1
1fcd0                 | LR__3351
1fcd0                 | LR__3352
1fcd0                 | ' 			res = FR_DISK_ERR;
1fcd0                 | ' 		}
1fcd0                 | ' 	}
1fcd0                 | ' 	return res;
1fcd0     10 FB 01 F6 | 	mov	result1, local02
1fcd4     A7 F0 03 F6 | 	mov	ptra, fp
1fcd8     B2 00 A0 FD | 	call	#popregs_
1fcdc                 | _fatfs_cc_sync_window_ret
1fcdc     2D 00 64 FD | 	ret
1fce0                 | 
1fce0                 | _fatfs_cc_move_window
1fce0     03 4A 05 F6 | 	mov	COUNT_, #3
1fce4     A8 00 A0 FD | 	call	#pushregs_
1fce8     09 1F 02 F6 | 	mov	local01, arg01
1fcec     0A 21 02 F6 | 	mov	local02, arg02
1fcf0     00 22 06 F6 | 	mov	local03, #0
1fcf4     30 1E 06 F1 | 	add	local01, #48
1fcf8     0F 19 02 FB | 	rdlong	arg04, local01
1fcfc     30 1E 86 F1 | 	sub	local01, #48
1fd00     0C 21 0A F2 | 	cmp	local02, arg04 wz
1fd04     40 00 90 AD |  if_e	jmp	#LR__3361
1fd08     0F 13 02 F6 | 	mov	arg01, local01
1fd0c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1fd10     FD 22 0A F6 | 	mov	local03, result1 wz
1fd14     30 00 90 5D |  if_ne	jmp	#LR__3360
1fd18     01 1E 06 F1 | 	add	local01, #1
1fd1c     0F 13 C2 FA | 	rdbyte	arg01, local01
1fd20     33 1E 06 F1 | 	add	local01, #51
1fd24     0F 15 02 F6 | 	mov	arg02, local01
1fd28     10 17 02 F6 | 	mov	arg03, local02
1fd2c     01 18 06 F6 | 	mov	arg04, #1
1fd30     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1fd34     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd38     01 20 66 56 |  if_ne	neg	local02, #1
1fd3c     01 22 06 56 |  if_ne	mov	local03, #1
1fd40     04 1E 86 F1 | 	sub	local01, #4
1fd44     0F 21 62 FC | 	wrlong	local02, local01
1fd48                 | LR__3360
1fd48                 | LR__3361
1fd48                 | ' 				sect = (LBA_t)0 - 1;
1fd48                 | ' 				res = FR_DISK_ERR;
1fd48                 | ' 			}
1fd48                 | ' 			fs->winsect = sect;
1fd48                 | ' 		}
1fd48                 | ' 	}
1fd48                 | ' 	return res;
1fd48     11 FB 01 F6 | 	mov	result1, local03
1fd4c     A7 F0 03 F6 | 	mov	ptra, fp
1fd50     B2 00 A0 FD | 	call	#popregs_
1fd54                 | _fatfs_cc_move_window_ret
1fd54     2D 00 64 FD | 	ret
1fd58                 | 
1fd58                 | _fatfs_cc_sync_fs
1fd58     02 4A 05 F6 | 	mov	COUNT_, #2
1fd5c     A8 00 A0 FD | 	call	#pushregs_
1fd60     09 1F 02 F6 | 	mov	local01, arg01
1fd64     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1fd68     FD 20 0A F6 | 	mov	local02, result1 wz
1fd6c     D8 00 90 5D |  if_ne	jmp	#LR__3371
1fd70     0F 19 C2 FA | 	rdbyte	arg04, local01
1fd74     03 18 0E F2 | 	cmp	arg04, #3 wz
1fd78     04 1E 06 A1 |  if_e	add	local01, #4
1fd7c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1fd80     04 1E 86 A1 |  if_e	sub	local01, #4
1fd84     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1fd88     A0 00 90 5D |  if_ne	jmp	#LR__3370
1fd8c     34 1E 06 F1 | 	add	local01, #52
1fd90     0F 13 02 F6 | 	mov	arg01, local01
1fd94     00 14 06 F6 | 	mov	arg02, #0
1fd98     09 16 C6 F9 | 	decod	arg03, #9
1fd9c     98 00 A0 FD | 	call	#\builtin_bytefill_
1fda0     0F 13 02 F6 | 	mov	arg01, local01
1fda4     FE 13 06 F1 | 	add	arg01, #510
1fda8     55 00 80 FF 
1fdac     09 AB 58 FC | 	wrword	##43605, arg01
1fdb0     A9 B0 A0 FF 
1fdb4     0F A5 68 FC | 	wrlong	##1096897106, local01
1fdb8     0F 13 02 F6 | 	mov	arg01, local01
1fdbc     E4 13 06 F1 | 	add	arg01, #484
1fdc0     B9 A0 B0 FF 
1fdc4     09 E5 68 FC | 	wrlong	##1631679090, arg01
1fdc8     0F 13 02 F6 | 	mov	arg01, local01
1fdcc     E8 13 06 F1 | 	add	arg01, #488
1fdd0     20 1E 86 F1 | 	sub	local01, #32
1fdd4     0F 15 02 FB | 	rdlong	arg02, local01
1fdd8     09 15 62 FC | 	wrlong	arg02, arg01
1fddc     20 1E 06 F1 | 	add	local01, #32
1fde0     0F 13 02 F6 | 	mov	arg01, local01
1fde4     EC 13 06 F1 | 	add	arg01, #492
1fde8     24 1E 86 F1 | 	sub	local01, #36
1fdec     0F 15 02 FB | 	rdlong	arg02, local01
1fdf0     09 15 62 FC | 	wrlong	arg02, arg01
1fdf4     10 1E 06 F1 | 	add	local01, #16
1fdf8     0F 17 02 FB | 	rdlong	arg03, local01
1fdfc     01 16 06 F1 | 	add	arg03, #1
1fe00     10 1E 06 F1 | 	add	local01, #16
1fe04     0F 17 62 FC | 	wrlong	arg03, local01
1fe08     2F 1E 86 F1 | 	sub	local01, #47
1fe0c     0F 13 C2 FA | 	rdbyte	arg01, local01
1fe10     33 1E 06 F1 | 	add	local01, #51
1fe14     0F 15 02 F6 | 	mov	arg02, local01
1fe18     01 18 06 F6 | 	mov	arg04, #1
1fe1c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1fe20     30 1E 86 F1 | 	sub	local01, #48
1fe24     0F 01 48 FC | 	wrbyte	#0, local01
1fe28     04 1E 86 F1 | 	sub	local01, #4
1fe2c                 | LR__3370
1fe2c     01 1E 06 F1 | 	add	local01, #1
1fe30     0F 13 C2 FA | 	rdbyte	arg01, local01
1fe34     00 14 06 F6 | 	mov	arg02, #0
1fe38     00 16 06 F6 | 	mov	arg03, #0
1fe3c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1fe40     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe44     01 20 06 56 |  if_ne	mov	local02, #1
1fe48                 | LR__3371
1fe48                 | ' 	}
1fe48                 | ' 
1fe48                 | ' 	return res;
1fe48     10 FB 01 F6 | 	mov	result1, local02
1fe4c     A7 F0 03 F6 | 	mov	ptra, fp
1fe50     B2 00 A0 FD | 	call	#popregs_
1fe54                 | _fatfs_cc_sync_fs_ret
1fe54     2D 00 64 FD | 	ret
1fe58                 | 
1fe58                 | _fatfs_cc_clst2sect
1fe58     02 14 86 F1 | 	sub	arg02, #2
1fe5c     18 12 06 F1 | 	add	arg01, #24
1fe60     09 01 02 FB | 	rdlong	_var01, arg01
1fe64     18 12 86 F1 | 	sub	arg01, #24
1fe68     02 00 86 F1 | 	sub	_var01, #2
1fe6c     00 15 12 F2 | 	cmp	arg02, _var01 wc
1fe70     00 FA 05 36 |  if_ae	mov	result1, #0
1fe74     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1fe78     0A 12 06 F1 | 	add	arg01, #10
1fe7c     09 01 E2 FA | 	rdword	_var01, arg01
1fe80     0A 01 02 FD | 	qmul	_var01, arg02
1fe84                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1fe84     22 12 06 F1 | 	add	arg01, #34
1fe88     09 FB 01 FB | 	rdlong	result1, arg01
1fe8c     18 00 62 FD | 	getqx	_var01
1fe90     00 FB 01 F1 | 	add	result1, _var01
1fe94                 | _fatfs_cc_clst2sect_ret
1fe94     2D 00 64 FD | 	ret
1fe98                 | 
1fe98                 | _fatfs_cc_get_fat
1fe98     07 4A 05 F6 | 	mov	COUNT_, #7
1fe9c     A8 00 A0 FD | 	call	#pushregs_
1fea0     0A 1F 02 F6 | 	mov	local01, arg02
1fea4     09 21 02 FB | 	rdlong	local02, arg01
1fea8     02 1E 16 F2 | 	cmp	local01, #2 wc
1feac     14 00 90 CD |  if_b	jmp	#LR__3380
1feb0     18 20 06 F1 | 	add	local02, #24
1feb4     10 23 02 FB | 	rdlong	local03, local02
1feb8     18 20 86 F1 | 	sub	local02, #24
1febc     11 1F 12 F2 | 	cmp	local01, local03 wc
1fec0     08 00 90 CD |  if_b	jmp	#LR__3381
1fec4                 | LR__3380
1fec4     01 24 06 F6 | 	mov	local04, #1
1fec8     60 01 90 FD | 	jmp	#LR__3388
1fecc                 | LR__3381
1fecc     01 24 66 F6 | 	neg	local04, #1
1fed0                 | ' 		val = 0xFFFFFFFF;
1fed0                 | ' 
1fed0                 | ' 		switch (fs->fs_type) {
1fed0     10 27 C2 FA | 	rdbyte	local05, local02
1fed4     01 26 86 F1 | 	sub	local05, #1
1fed8     03 26 26 F3 | 	fle	local05, #3
1fedc     30 26 62 FD | 	jmprel	local05
1fee0                 | LR__3382
1fee0     0C 00 90 FD | 	jmp	#LR__3383
1fee4     B8 00 90 FD | 	jmp	#LR__3384
1fee8     F8 00 90 FD | 	jmp	#LR__3385
1feec     38 01 90 FD | 	jmp	#LR__3386
1fef0                 | LR__3383
1fef0     0F 27 02 F6 | 	mov	local05, local01
1fef4     0F 13 02 F6 | 	mov	arg01, local01
1fef8     01 12 46 F0 | 	shr	arg01, #1
1fefc     09 27 02 F1 | 	add	local05, arg01
1ff00     10 13 02 F6 | 	mov	arg01, local02
1ff04     13 29 02 F6 | 	mov	local06, local05
1ff08     09 28 46 F0 | 	shr	local06, #9
1ff0c     24 20 06 F1 | 	add	local02, #36
1ff10     10 15 02 FB | 	rdlong	arg02, local02
1ff14     24 20 86 F1 | 	sub	local02, #36
1ff18     14 15 02 F1 | 	add	arg02, local06
1ff1c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1ff20     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff24     04 01 90 5D |  if_ne	jmp	#LR__3387
1ff28     13 29 02 F6 | 	mov	local06, local05
1ff2c     FF 29 06 F5 | 	and	local06, #511
1ff30     34 20 06 F1 | 	add	local02, #52
1ff34     10 29 02 F1 | 	add	local06, local02
1ff38     14 2B C2 FA | 	rdbyte	local07, local06
1ff3c     34 20 86 F1 | 	sub	local02, #52
1ff40     10 13 02 F6 | 	mov	arg01, local02
1ff44     01 26 06 F1 | 	add	local05, #1
1ff48     13 29 02 F6 | 	mov	local06, local05
1ff4c     09 28 46 F0 | 	shr	local06, #9
1ff50     24 20 06 F1 | 	add	local02, #36
1ff54     10 15 02 FB | 	rdlong	arg02, local02
1ff58     24 20 86 F1 | 	sub	local02, #36
1ff5c     14 15 02 F1 | 	add	arg02, local06
1ff60     7C FD BF FD | 	call	#_fatfs_cc_move_window
1ff64     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff68     C0 00 90 5D |  if_ne	jmp	#LR__3387
1ff6c     FF 27 06 F5 | 	and	local05, #511
1ff70     34 20 06 F1 | 	add	local02, #52
1ff74     10 27 02 F1 | 	add	local05, local02
1ff78     13 29 C2 FA | 	rdbyte	local06, local05
1ff7c     08 28 66 F0 | 	shl	local06, #8
1ff80     14 2B 42 F5 | 	or	local07, local06
1ff84     01 1E CE F7 | 	test	local01, #1 wz
1ff88     04 2A 46 50 |  if_ne	shr	local07, #4
1ff8c     15 23 02 56 |  if_ne	mov	local03, local07
1ff90     0B 2A 46 A7 |  if_e	zerox	local07, #11
1ff94     15 23 02 A6 |  if_e	mov	local03, local07
1ff98     11 25 02 F6 | 	mov	local04, local03
1ff9c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1ff9c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1ff9c                 | ' 			break;
1ff9c     8C 00 90 FD | 	jmp	#LR__3387
1ffa0                 | LR__3384
1ffa0     10 13 02 F6 | 	mov	arg01, local02
1ffa4     0F 29 02 F6 | 	mov	local06, local01
1ffa8     08 28 46 F0 | 	shr	local06, #8
1ffac     24 20 06 F1 | 	add	local02, #36
1ffb0     10 15 02 FB | 	rdlong	arg02, local02
1ffb4     24 20 86 F1 | 	sub	local02, #36
1ffb8     14 15 02 F1 | 	add	arg02, local06
1ffbc     20 FD BF FD | 	call	#_fatfs_cc_move_window
1ffc0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffc4     64 00 90 5D |  if_ne	jmp	#LR__3387
1ffc8     34 20 06 F1 | 	add	local02, #52
1ffcc     01 1E 66 F0 | 	shl	local01, #1
1ffd0     FF 1F 06 F5 | 	and	local01, #511
1ffd4     0F 21 02 F1 | 	add	local02, local01
1ffd8                 | ' {
1ffd8                 | ' 
1ffd8                 | ' 	return *((WORD*)ptr);
1ffd8     10 FB E1 FA | 	rdword	result1, local02
1ffdc     FD 24 32 F9 | 	getword	local04, result1, #0
1ffe0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1ffe0                 | ' 			break;
1ffe0     48 00 90 FD | 	jmp	#LR__3387
1ffe4                 | LR__3385
1ffe4     10 13 02 F6 | 	mov	arg01, local02
1ffe8     0F 29 02 F6 | 	mov	local06, local01
1ffec     07 28 46 F0 | 	shr	local06, #7
1fff0     24 20 06 F1 | 	add	local02, #36
1fff4     10 15 02 FB | 	rdlong	arg02, local02
1fff8     24 20 86 F1 | 	sub	local02, #36
1fffc     14 15 02 F1 | 	add	arg02, local06
20000     DC FC BF FD | 	call	#_fatfs_cc_move_window
20004     00 FA 0D F2 | 	cmp	result1, #0 wz
20008     20 00 90 5D |  if_ne	jmp	#LR__3387
2000c     34 20 06 F1 | 	add	local02, #52
20010     02 1E 66 F0 | 	shl	local01, #2
20014     FF 1F 06 F5 | 	and	local01, #511
20018     0F 21 02 F1 | 	add	local02, local01
2001c                 | ' {
2001c                 | ' 
2001c                 | ' 	return *((DWORD*)ptr);
2001c     10 25 02 FB | 	rdlong	local04, local02
20020     7C 24 06 F4 | 	bitl	local04, #124
20024                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
20024                 | ' 			break;
20024     04 00 90 FD | 	jmp	#LR__3387
20028                 | LR__3386
20028     01 24 06 F6 | 	mov	local04, #1
2002c                 | LR__3387
2002c                 | LR__3388
2002c                 | ' 			val = 1;
2002c                 | ' 		}
2002c                 | ' 	}
2002c                 | ' 
2002c                 | ' 	return val;
2002c     12 FB 01 F6 | 	mov	result1, local04
20030     A7 F0 03 F6 | 	mov	ptra, fp
20034     B2 00 A0 FD | 	call	#popregs_
20038                 | _fatfs_cc_get_fat_ret
20038     2D 00 64 FD | 	ret
2003c                 | 
2003c                 | _fatfs_cc_put_fat
2003c     08 4A 05 F6 | 	mov	COUNT_, #8
20040     A8 00 A0 FD | 	call	#pushregs_
20044     09 1F 02 F6 | 	mov	local01, arg01
20048     0A 21 02 F6 | 	mov	local02, arg02
2004c     0B 23 02 F6 | 	mov	local03, arg03
20050     02 24 06 F6 | 	mov	local04, #2
20054     02 20 16 F2 | 	cmp	local02, #2 wc
20058     E0 01 90 CD |  if_b	jmp	#LR__3397
2005c     18 1E 06 F1 | 	add	local01, #24
20060     0F 27 02 FB | 	rdlong	local05, local01
20064     18 1E 86 F1 | 	sub	local01, #24
20068     13 21 12 F2 | 	cmp	local02, local05 wc
2006c     CC 01 90 3D |  if_ae	jmp	#LR__3397
20070                 | ' 		switch (fs->fs_type) {
20070     0F 29 C2 FA | 	rdbyte	local06, local01
20074     01 28 86 F1 | 	sub	local06, #1
20078     03 28 26 F3 | 	fle	local06, #3
2007c     30 28 62 FD | 	jmprel	local06
20080                 | LR__3390
20080     0C 00 90 FD | 	jmp	#LR__3391
20084     F8 00 90 FD | 	jmp	#LR__3394
20088     40 01 90 FD | 	jmp	#LR__3395
2008c     AC 01 90 FD | 	jmp	#LR__3396
20090                 | LR__3391
20090     10 2B 02 F6 | 	mov	local07, local02
20094     10 27 02 F6 | 	mov	local05, local02
20098     01 26 46 F0 | 	shr	local05, #1
2009c     13 2B 02 F1 | 	add	local07, local05
200a0     0F 13 02 F6 | 	mov	arg01, local01
200a4     15 29 02 F6 | 	mov	local06, local07
200a8     09 28 46 F0 | 	shr	local06, #9
200ac     24 1E 06 F1 | 	add	local01, #36
200b0     0F 15 02 FB | 	rdlong	arg02, local01
200b4     24 1E 86 F1 | 	sub	local01, #36
200b8     14 15 02 F1 | 	add	arg02, local06
200bc     20 FC BF FD | 	call	#_fatfs_cc_move_window
200c0     FD 24 0A F6 | 	mov	local04, result1 wz
200c4     74 01 90 5D |  if_ne	jmp	#LR__3396
200c8     34 1E 06 F1 | 	add	local01, #52
200cc     0F 2D 02 F6 | 	mov	local08, local01
200d0     15 27 02 F6 | 	mov	local05, local07
200d4     FF 27 06 F5 | 	and	local05, #511
200d8     13 2D 02 F1 | 	add	local08, local05
200dc     01 20 CE F7 | 	test	local02, #1 wz
200e0     34 1E 86 F1 | 	sub	local01, #52
200e4     01 2A 06 F1 | 	add	local07, #1
200e8     18 00 90 AD |  if_e	jmp	#LR__3392
200ec     16 27 C2 FA | 	rdbyte	local05, local08
200f0     13 27 42 F8 | 	getnib	local05, local05, #0
200f4     11 29 E2 F8 | 	getbyte	local06, local03, #0
200f8     04 28 66 F0 | 	shl	local06, #4
200fc     14 27 42 F5 | 	or	local05, local06
20100     04 00 90 FD | 	jmp	#LR__3393
20104                 | LR__3392
20104     11 27 02 F6 | 	mov	local05, local03
20108                 | LR__3393
20108     16 27 42 FC | 	wrbyte	local05, local08
2010c     03 1E 06 F1 | 	add	local01, #3
20110     0F 03 48 FC | 	wrbyte	#1, local01
20114     03 1E 86 F1 | 	sub	local01, #3
20118     0F 13 02 F6 | 	mov	arg01, local01
2011c     15 2D 02 F6 | 	mov	local08, local07
20120     09 2C 46 F0 | 	shr	local08, #9
20124     24 1E 06 F1 | 	add	local01, #36
20128     0F 15 02 FB | 	rdlong	arg02, local01
2012c     24 1E 86 F1 | 	sub	local01, #36
20130     16 15 02 F1 | 	add	arg02, local08
20134     A8 FB BF FD | 	call	#_fatfs_cc_move_window
20138     FD 24 0A F6 | 	mov	local04, result1 wz
2013c     FC 00 90 5D |  if_ne	jmp	#LR__3396
20140     34 1E 06 F1 | 	add	local01, #52
20144     0F 2D 02 F6 | 	mov	local08, local01
20148     FF 2B 06 F5 | 	and	local07, #511
2014c     15 2D 02 F1 | 	add	local08, local07
20150     01 20 CE F7 | 	test	local02, #1 wz
20154     04 22 46 50 |  if_ne	shr	local03, #4
20158     11 27 02 56 |  if_ne	mov	local05, local03
2015c     16 27 C2 AA |  if_e	rdbyte	local05, local08
20160     F0 26 06 A5 |  if_e	and	local05, #240
20164     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
20168     11 23 42 A8 |  if_e	getnib	local03, local03, #0
2016c     11 27 42 A5 |  if_e	or	local05, local03
20170     16 27 42 FC | 	wrbyte	local05, local08
20174     31 1E 86 F1 | 	sub	local01, #49
20178     0F 03 48 FC | 	wrbyte	#1, local01
2017c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2017c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2017c                 | ' 			fs->wflag = 1;
2017c                 | ' 			break;
2017c     BC 00 90 FD | 	jmp	#LR__3396
20180                 | LR__3394
20180     0F 13 02 F6 | 	mov	arg01, local01
20184     10 2D 02 F6 | 	mov	local08, local02
20188     08 2C 46 F0 | 	shr	local08, #8
2018c     24 1E 06 F1 | 	add	local01, #36
20190     0F 15 02 FB | 	rdlong	arg02, local01
20194     24 1E 86 F1 | 	sub	local01, #36
20198     16 15 02 F1 | 	add	arg02, local08
2019c     40 FB BF FD | 	call	#_fatfs_cc_move_window
201a0     FD 24 0A F6 | 	mov	local04, result1 wz
201a4     94 00 90 5D |  if_ne	jmp	#LR__3396
201a8     34 1E 06 F1 | 	add	local01, #52
201ac     0F 13 02 F6 | 	mov	arg01, local01
201b0     01 20 66 F0 | 	shl	local02, #1
201b4     FF 21 06 F5 | 	and	local02, #511
201b8     10 13 02 F1 | 	add	arg01, local02
201bc     09 23 52 FC | 	wrword	local03, arg01
201c0     31 1E 86 F1 | 	sub	local01, #49
201c4     0F 03 48 FC | 	wrbyte	#1, local01
201c8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
201c8                 | ' 			fs->wflag = 1;
201c8                 | ' 			break;
201c8     70 00 90 FD | 	jmp	#LR__3396
201cc                 | LR__3395
201cc     0F 13 02 F6 | 	mov	arg01, local01
201d0     10 2D 02 F6 | 	mov	local08, local02
201d4     07 2C 46 F0 | 	shr	local08, #7
201d8     24 1E 06 F1 | 	add	local01, #36
201dc     0F 15 02 FB | 	rdlong	arg02, local01
201e0     24 1E 86 F1 | 	sub	local01, #36
201e4     16 15 02 F1 | 	add	arg02, local08
201e8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
201ec     FD 24 0A F6 | 	mov	local04, result1 wz
201f0     48 00 90 5D |  if_ne	jmp	#LR__3396
201f4     7C 22 06 F4 | 	bitl	local03, #124
201f8     34 1E 06 F1 | 	add	local01, #52
201fc     10 2D 02 F6 | 	mov	local08, local02
20200     02 2C 66 F0 | 	shl	local08, #2
20204     FF 2D 06 F5 | 	and	local08, #511
20208     0F 13 02 F6 | 	mov	arg01, local01
2020c     16 13 02 F1 | 	add	arg01, local08
20210                 | ' {
20210                 | ' 
20210                 | ' 	return *((DWORD*)ptr);
20210     09 2D 02 FB | 	rdlong	local08, arg01
20214     00 00 78 FF 
20218     00 2C 06 F5 | 	and	local08, ##-268435456
2021c     16 23 42 F5 | 	or	local03, local08
20220     0F 13 02 F6 | 	mov	arg01, local01
20224     02 20 66 F0 | 	shl	local02, #2
20228     FF 21 06 F5 | 	and	local02, #511
2022c     10 13 02 F1 | 	add	arg01, local02
20230     09 23 62 FC | 	wrlong	local03, arg01
20234     31 1E 86 F1 | 	sub	local01, #49
20238     0F 03 48 FC | 	wrbyte	#1, local01
2023c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2023c                 | ' 			}
2023c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2023c                 | ' 			fs->wflag = 1;
2023c                 | ' 			break;
2023c                 | LR__3396
2023c                 | LR__3397
2023c                 | ' 		}
2023c                 | ' 	}
2023c                 | ' 	return res;
2023c     12 FB 01 F6 | 	mov	result1, local04
20240     A7 F0 03 F6 | 	mov	ptra, fp
20244     B2 00 A0 FD | 	call	#popregs_
20248                 | _fatfs_cc_put_fat_ret
20248     2D 00 64 FD | 	ret
2024c                 | 
2024c                 | _fatfs_cc_remove_chain
2024c     05 4A 05 F6 | 	mov	COUNT_, #5
20250     A8 00 A0 FD | 	call	#pushregs_
20254     09 1F 02 F6 | 	mov	local01, arg01
20258     0A 21 02 F6 | 	mov	local02, arg02
2025c     0B 23 02 F6 | 	mov	local03, arg03
20260     0F 25 02 FB | 	rdlong	local04, local01
20264     02 20 16 F2 | 	cmp	local02, #2 wc
20268     14 00 90 CD |  if_b	jmp	#LR__3400
2026c     18 24 06 F1 | 	add	local04, #24
20270     12 FB 01 FB | 	rdlong	result1, local04
20274     18 24 86 F1 | 	sub	local04, #24
20278     FD 20 12 F2 | 	cmp	local02, result1 wc
2027c     08 00 90 CD |  if_b	jmp	#LR__3401
20280                 | LR__3400
20280     02 FA 05 F6 | 	mov	result1, #2
20284     CC 00 90 FD | 	jmp	#LR__3406
20288                 | LR__3401
20288     00 22 0E F2 | 	cmp	local03, #0 wz
2028c     18 00 90 AD |  if_e	jmp	#LR__3402
20290     11 15 02 F6 | 	mov	arg02, local03
20294     12 13 02 F6 | 	mov	arg01, local04
20298     01 16 66 F6 | 	neg	arg03, #1
2029c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
202a0     00 FA 0D F2 | 	cmp	result1, #0 wz
202a4     AC 00 90 5D |  if_ne	jmp	#LR__3406
202a8                 | LR__3402
202a8                 | ' 	}
202a8                 | ' 
202a8                 | ' 
202a8                 | ' 	do {
202a8                 | LR__3403
202a8     10 15 02 F6 | 	mov	arg02, local02
202ac     0F 13 02 F6 | 	mov	arg01, local01
202b0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
202b4     FD 26 0A F6 | 	mov	local05, result1 wz
202b8     94 00 90 AD |  if_e	jmp	#LR__3405
202bc     01 26 0E F2 | 	cmp	local05, #1 wz
202c0     02 FA 05 A6 |  if_e	mov	result1, #2
202c4     8C 00 90 AD |  if_e	jmp	#LR__3406
202c8     FF FF 7F FF 
202cc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
202d0     01 FA 05 A6 |  if_e	mov	result1, #1
202d4     7C 00 90 AD |  if_e	jmp	#LR__3406
202d8     10 15 02 F6 | 	mov	arg02, local02
202dc     12 13 02 F6 | 	mov	arg01, local04
202e0     00 16 06 F6 | 	mov	arg03, #0
202e4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
202e8     FD 22 0A F6 | 	mov	local03, result1 wz
202ec     11 FB 01 56 |  if_ne	mov	result1, local03
202f0     60 00 90 5D |  if_ne	jmp	#LR__3406
202f4     18 24 06 F1 | 	add	local04, #24
202f8     12 23 02 FB | 	rdlong	local03, local04
202fc     02 22 86 F1 | 	sub	local03, #2
20300     04 24 86 F1 | 	sub	local04, #4
20304     12 21 02 FB | 	rdlong	local02, local04
20308     14 24 86 F1 | 	sub	local04, #20
2030c     11 21 12 F2 | 	cmp	local02, local03 wc
20310     24 00 90 3D |  if_ae	jmp	#LR__3404
20314     14 24 06 F1 | 	add	local04, #20
20318     12 23 02 FB | 	rdlong	local03, local04
2031c     01 22 06 F1 | 	add	local03, #1
20320     12 23 62 FC | 	wrlong	local03, local04
20324     10 24 86 F1 | 	sub	local04, #16
20328     12 23 C2 FA | 	rdbyte	local03, local04
2032c     01 22 46 F5 | 	or	local03, #1
20330     12 23 42 FC | 	wrbyte	local03, local04
20334     04 24 86 F1 | 	sub	local04, #4
20338                 | LR__3404
20338     13 21 02 F6 | 	mov	local02, local05
2033c     18 24 06 F1 | 	add	local04, #24
20340     12 27 02 FB | 	rdlong	local05, local04
20344     18 24 86 F1 | 	sub	local04, #24
20348     13 21 12 F2 | 	cmp	local02, local05 wc
2034c     58 FF 9F CD |  if_b	jmp	#LR__3403
20350                 | LR__3405
20350                 | ' #line 1500 "ff.c"
20350                 | ' 	return FR_OK;
20350     00 FA 05 F6 | 	mov	result1, #0
20354                 | LR__3406
20354     A7 F0 03 F6 | 	mov	ptra, fp
20358     B2 00 A0 FD | 	call	#popregs_
2035c                 | _fatfs_cc_remove_chain_ret
2035c     2D 00 64 FD | 	ret
20360                 | 
20360                 | _fatfs_cc_create_chain
20360     09 4A 05 F6 | 	mov	COUNT_, #9
20364     A8 00 A0 FD | 	call	#pushregs_
20368     09 1F 02 F6 | 	mov	local01, arg01
2036c     0A 21 0A F6 | 	mov	local02, arg02 wz
20370     0F 23 02 FB | 	rdlong	local03, local01
20374     28 00 90 5D |  if_ne	jmp	#LR__3410
20378     10 22 06 F1 | 	add	local03, #16
2037c     11 25 0A FB | 	rdlong	local04, local03 wz
20380     10 22 86 F1 | 	sub	local03, #16
20384     18 22 06 51 |  if_ne	add	local03, #24
20388     11 27 02 5B |  if_ne	rdlong	local05, local03
2038c     18 22 86 51 |  if_ne	sub	local03, #24
20390     13 25 12 52 |  if_ne	cmp	local04, local05 wc
20394     50 00 90 4D |  if_c_and_nz	jmp	#LR__3411
20398     01 24 06 F6 | 	mov	local04, #1
2039c     48 00 90 FD | 	jmp	#LR__3411
203a0                 | LR__3410
203a0     10 15 02 F6 | 	mov	arg02, local02
203a4     0F 13 02 F6 | 	mov	arg01, local01
203a8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
203ac     FD 24 02 F6 | 	mov	local04, result1
203b0     02 24 16 F2 | 	cmp	local04, #2 wc
203b4     01 FA 05 C6 |  if_b	mov	result1, #1
203b8     BC 01 90 CD |  if_b	jmp	#LR__3421
203bc     FF FF 7F FF 
203c0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
203c4     12 FB 01 A6 |  if_e	mov	result1, local04
203c8     AC 01 90 AD |  if_e	jmp	#LR__3421
203cc     18 22 06 F1 | 	add	local03, #24
203d0     11 27 02 FB | 	rdlong	local05, local03
203d4     18 22 86 F1 | 	sub	local03, #24
203d8     13 25 12 F2 | 	cmp	local04, local05 wc
203dc     12 FB 01 C6 |  if_b	mov	result1, local04
203e0     94 01 90 CD |  if_b	jmp	#LR__3421
203e4     10 25 02 F6 | 	mov	local04, local02
203e8                 | LR__3411
203e8     14 22 06 F1 | 	add	local03, #20
203ec     11 27 0A FB | 	rdlong	local05, local03 wz
203f0     14 22 86 F1 | 	sub	local03, #20
203f4     00 FA 05 A6 |  if_e	mov	result1, #0
203f8     7C 01 90 AD |  if_e	jmp	#LR__3421
203fc     00 28 06 F6 | 	mov	local06, #0
20400     10 25 0A F2 | 	cmp	local04, local02 wz
20404     74 00 90 5D |  if_ne	jmp	#LR__3414
20408     12 29 02 F6 | 	mov	local06, local04
2040c     01 28 06 F1 | 	add	local06, #1
20410     18 22 06 F1 | 	add	local03, #24
20414     11 27 02 FB | 	rdlong	local05, local03
20418     18 22 86 F1 | 	sub	local03, #24
2041c     13 29 12 F2 | 	cmp	local06, local05 wc
20420     02 28 06 36 |  if_ae	mov	local06, #2
20424     14 15 02 F6 | 	mov	arg02, local06
20428     0F 13 02 F6 | 	mov	arg01, local01
2042c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
20430     FD 26 02 F6 | 	mov	local05, result1
20434     01 26 0E F2 | 	cmp	local05, #1 wz
20438     FF FF 7F 5F 
2043c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
20440     13 FB 01 A6 |  if_e	mov	result1, local05
20444     30 01 90 AD |  if_e	jmp	#LR__3421
20448     00 26 0E F2 | 	cmp	local05, #0 wz
2044c     2C 00 90 AD |  if_e	jmp	#LR__3413
20450     10 22 06 F1 | 	add	local03, #16
20454     11 2B 02 FB | 	rdlong	local07, local03
20458     10 22 86 F1 | 	sub	local03, #16
2045c     02 2A 16 F2 | 	cmp	local07, #2 wc
20460     14 00 90 CD |  if_b	jmp	#LR__3412
20464     18 22 06 F1 | 	add	local03, #24
20468     11 27 02 FB | 	rdlong	local05, local03
2046c     18 22 86 F1 | 	sub	local03, #24
20470     13 2B 12 F2 | 	cmp	local07, local05 wc
20474     15 25 02 C6 |  if_b	mov	local04, local07
20478                 | LR__3412
20478     00 28 06 F6 | 	mov	local06, #0
2047c                 | LR__3413
2047c                 | LR__3414
2047c     00 28 0E F2 | 	cmp	local06, #0 wz
20480     60 00 90 5D |  if_ne	jmp	#LR__3417
20484     12 29 02 F6 | 	mov	local06, local04
20488                 | ' 			ncl = scl;
20488                 | ' 			for (;;) {
20488                 | LR__3415
20488     01 28 06 F1 | 	add	local06, #1
2048c     18 22 06 F1 | 	add	local03, #24
20490     11 27 02 FB | 	rdlong	local05, local03
20494     18 22 86 F1 | 	sub	local03, #24
20498     13 29 12 F2 | 	cmp	local06, local05 wc
2049c     02 28 06 36 |  if_ae	mov	local06, #2
204a0     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
204a4     00 FA 05 16 |  if_a	mov	result1, #0
204a8     CC 00 90 1D |  if_a	jmp	#LR__3421
204ac     14 15 02 F6 | 	mov	arg02, local06
204b0     0F 13 02 F6 | 	mov	arg01, local01
204b4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
204b8     FD 2A 0A F6 | 	mov	local07, result1 wz
204bc     24 00 90 AD |  if_e	jmp	#LR__3416
204c0     01 2A 0E F2 | 	cmp	local07, #1 wz
204c4     FF FF 7F 5F 
204c8     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
204cc     15 FB 01 A6 |  if_e	mov	result1, local07
204d0     A4 00 90 AD |  if_e	jmp	#LR__3421
204d4     12 29 0A F2 | 	cmp	local06, local04 wz
204d8     00 FA 05 A6 |  if_e	mov	result1, #0
204dc     98 00 90 AD |  if_e	jmp	#LR__3421
204e0     A4 FF 9F FD | 	jmp	#LR__3415
204e4                 | LR__3416
204e4                 | LR__3417
204e4     11 13 02 F6 | 	mov	arg01, local03
204e8     14 15 02 F6 | 	mov	arg02, local06
204ec     01 16 66 F6 | 	neg	arg03, #1
204f0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
204f4     FD 2C 0A F6 | 	mov	local08, result1 wz
204f8     1C 00 90 5D |  if_ne	jmp	#LR__3418
204fc     00 20 0E F2 | 	cmp	local02, #0 wz
20500     14 00 90 AD |  if_e	jmp	#LR__3418
20504     11 13 02 F6 | 	mov	arg01, local03
20508     10 15 02 F6 | 	mov	arg02, local02
2050c     14 17 02 F6 | 	mov	arg03, local06
20510     28 FB BF FD | 	call	#_fatfs_cc_put_fat
20514     FD 2C 02 F6 | 	mov	local08, result1
20518                 | LR__3418
20518     00 2C 0E F2 | 	cmp	local08, #0 wz
2051c     4C 00 90 5D |  if_ne	jmp	#LR__3419
20520     10 22 06 F1 | 	add	local03, #16
20524     11 29 62 FC | 	wrlong	local06, local03
20528     08 22 06 F1 | 	add	local03, #8
2052c     11 27 02 FB | 	rdlong	local05, local03
20530     02 26 86 F1 | 	sub	local05, #2
20534     04 22 86 F1 | 	sub	local03, #4
20538     11 2F 02 FB | 	rdlong	local09, local03
2053c     14 22 86 F1 | 	sub	local03, #20
20540     13 2F 1A F2 | 	cmp	local09, local05 wcz
20544     14 22 06 E1 |  if_be	add	local03, #20
20548     11 2F 02 EB |  if_be	rdlong	local09, local03
2054c     01 2E 86 E1 |  if_be	sub	local09, #1
20550     11 2F 62 EC |  if_be	wrlong	local09, local03
20554     14 22 86 E1 |  if_be	sub	local03, #20
20558     04 22 06 F1 | 	add	local03, #4
2055c     11 27 C2 FA | 	rdbyte	local05, local03
20560     01 26 46 F5 | 	or	local05, #1
20564     11 27 42 FC | 	wrbyte	local05, local03
20568     08 00 90 FD | 	jmp	#LR__3420
2056c                 | LR__3419
2056c     01 2C 0E F2 | 	cmp	local08, #1 wz
20570     01 28 C6 F6 | 	negz	local06, #1
20574                 | LR__3420
20574                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
20574                 | ' 	}
20574                 | ' 
20574                 | ' 	return ncl;
20574     14 FB 01 F6 | 	mov	result1, local06
20578                 | LR__3421
20578     A7 F0 03 F6 | 	mov	ptra, fp
2057c     B2 00 A0 FD | 	call	#popregs_
20580                 | _fatfs_cc_create_chain_ret
20580     2D 00 64 FD | 	ret
20584                 | 
20584                 | _fatfs_cc_dir_clear
20584     06 4A 05 F6 | 	mov	COUNT_, #6
20588     A8 00 A0 FD | 	call	#pushregs_
2058c     09 1F 02 F6 | 	mov	local01, arg01
20590     0A 21 02 F6 | 	mov	local02, arg02
20594     0F 13 02 F6 | 	mov	arg01, local01
20598     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2059c     00 FA 0D F2 | 	cmp	result1, #0 wz
205a0     01 FA 05 56 |  if_ne	mov	result1, #1
205a4     90 00 90 5D |  if_ne	jmp	#LR__3432
205a8     0F 13 02 F6 | 	mov	arg01, local01
205ac     10 15 02 F6 | 	mov	arg02, local02
205b0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
205b4     FD 22 02 F6 | 	mov	local03, result1
205b8     30 1E 06 F1 | 	add	local01, #48
205bc     0F 23 62 FC | 	wrlong	local03, local01
205c0     04 1E 06 F1 | 	add	local01, #4
205c4     0F 13 02 F6 | 	mov	arg01, local01
205c8     00 14 06 F6 | 	mov	arg02, #0
205cc     09 16 C6 F9 | 	decod	arg03, #9
205d0     98 00 A0 FD | 	call	#\builtin_bytefill_
205d4     0F 25 02 F6 | 	mov	local04, local01
205d8                 | ' #line 1667 "ff.c"
205d8                 | ' 	{
205d8                 | ' 		ibuf = fs->win; szb = 1;
205d8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
205d8     00 26 06 F6 | 	mov	local05, #0
205dc     34 1E 86 F1 | 	sub	local01, #52
205e0                 | LR__3430
205e0     0A 1E 06 F1 | 	add	local01, #10
205e4     0F 29 E2 FA | 	rdword	local06, local01
205e8     0A 1E 86 F1 | 	sub	local01, #10
205ec     14 27 12 F2 | 	cmp	local05, local06 wc
205f0     2C 00 90 3D |  if_ae	jmp	#LR__3431
205f4     01 1E 06 F1 | 	add	local01, #1
205f8     0F 13 C2 FA | 	rdbyte	arg01, local01
205fc     01 1E 86 F1 | 	sub	local01, #1
20600     12 15 02 F6 | 	mov	arg02, local04
20604     11 17 02 F6 | 	mov	arg03, local03
20608     13 17 02 F1 | 	add	arg03, local05
2060c     01 18 06 F6 | 	mov	arg04, #1
20610     9C EF BF FD | 	call	#_fatfs_cc_disk_write
20614     00 FA 0D F2 | 	cmp	result1, #0 wz
20618     01 26 06 A1 |  if_e	add	local05, #1
2061c     C0 FF 9F AD |  if_e	jmp	#LR__3430
20620                 | LR__3431
20620                 | ' 	}
20620                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
20620     0A 1E 06 F1 | 	add	local01, #10
20624     0F 25 E2 FA | 	rdword	local04, local01
20628     12 27 0A F2 | 	cmp	local05, local04 wz
2062c     00 28 06 A6 |  if_e	mov	local06, #0
20630     01 28 06 56 |  if_ne	mov	local06, #1
20634     14 FB 01 F6 | 	mov	result1, local06
20638                 | LR__3432
20638     A7 F0 03 F6 | 	mov	ptra, fp
2063c     B2 00 A0 FD | 	call	#popregs_
20640                 | _fatfs_cc_dir_clear_ret
20640     2D 00 64 FD | 	ret
20644                 | 
20644                 | _fatfs_cc_dir_sdi
20644     06 4A 05 F6 | 	mov	COUNT_, #6
20648     A8 00 A0 FD | 	call	#pushregs_
2064c     09 1F 02 F6 | 	mov	local01, arg01
20650     0A 21 02 F6 | 	mov	local02, arg02
20654     0F 23 02 FB | 	rdlong	local03, local01
20658     00 10 00 FF 
2065c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
20660     1F 20 CE C7 |  if_b	test	local02, #31 wz
20664                 | ' 		return FR_INT_ERR;
20664     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
20668     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3446
2066c     10 1E 06 F1 | 	add	local01, #16
20670     0F 21 62 FC | 	wrlong	local02, local01
20674     08 1E 86 F1 | 	sub	local01, #8
20678     0F 25 0A FB | 	rdlong	local04, local01 wz
2067c     08 1E 86 F1 | 	sub	local01, #8
20680     11 27 C2 AA |  if_e	rdbyte	local05, local03
20684     03 26 16 A2 |  if_e	cmp	local05, #3 wc
20688     28 22 06 21 |  if_nc_and_z	add	local03, #40
2068c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
20690     28 22 86 21 |  if_nc_and_z	sub	local03, #40
20694     00 24 0E F2 | 	cmp	local04, #0 wz
20698     3C 00 90 5D |  if_ne	jmp	#LR__3440
2069c     10 27 02 F6 | 	mov	local05, local02
206a0     05 26 46 F0 | 	shr	local05, #5
206a4     08 22 06 F1 | 	add	local03, #8
206a8     11 15 E2 FA | 	rdword	arg02, local03
206ac     08 22 86 F1 | 	sub	local03, #8
206b0     0A 27 12 F2 | 	cmp	local05, arg02 wc
206b4     02 FA 05 36 |  if_ae	mov	result1, #2
206b8     E4 00 90 3D |  if_ae	jmp	#LR__3446
206bc     28 22 06 F1 | 	add	local03, #40
206c0     11 27 02 FB | 	rdlong	local05, local03
206c4     28 22 86 F1 | 	sub	local03, #40
206c8     18 1E 06 F1 | 	add	local01, #24
206cc     0F 27 62 FC | 	wrlong	local05, local01
206d0     18 1E 86 F1 | 	sub	local01, #24
206d4     7C 00 90 FD | 	jmp	#LR__3445
206d8                 | LR__3440
206d8     0A 22 06 F1 | 	add	local03, #10
206dc     11 29 E2 FA | 	rdword	local06, local03
206e0     0A 22 86 F1 | 	sub	local03, #10
206e4     09 28 66 F0 | 	shl	local06, #9
206e8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
206e8                 | ' 		while (ofs >= csz) {
206e8                 | LR__3441
206e8     14 21 12 F2 | 	cmp	local02, local06 wc
206ec     4C 00 90 CD |  if_b	jmp	#LR__3444
206f0     0F 13 02 F6 | 	mov	arg01, local01
206f4     12 15 02 F6 | 	mov	arg02, local04
206f8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
206fc     FD 24 02 F6 | 	mov	local04, result1
20700     FF FF 7F FF 
20704     FF 25 0E F2 | 	cmp	local04, ##-1 wz
20708     01 FA 05 A6 |  if_e	mov	result1, #1
2070c     90 00 90 AD |  if_e	jmp	#LR__3446
20710     02 24 16 F2 | 	cmp	local04, #2 wc
20714     14 00 90 CD |  if_b	jmp	#LR__3442
20718     18 22 06 F1 | 	add	local03, #24
2071c     11 27 02 FB | 	rdlong	local05, local03
20720     18 22 86 F1 | 	sub	local03, #24
20724     13 25 12 F2 | 	cmp	local04, local05 wc
20728     08 00 90 CD |  if_b	jmp	#LR__3443
2072c                 | LR__3442
2072c     02 FA 05 F6 | 	mov	result1, #2
20730     6C 00 90 FD | 	jmp	#LR__3446
20734                 | LR__3443
20734     14 21 82 F1 | 	sub	local02, local06
20738     AC FF 9F FD | 	jmp	#LR__3441
2073c                 | LR__3444
2073c     11 13 02 F6 | 	mov	arg01, local03
20740     12 15 02 F6 | 	mov	arg02, local04
20744     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
20748     18 1E 06 F1 | 	add	local01, #24
2074c     0F FB 61 FC | 	wrlong	result1, local01
20750     18 1E 86 F1 | 	sub	local01, #24
20754                 | LR__3445
20754     14 1E 06 F1 | 	add	local01, #20
20758     0F 25 62 FC | 	wrlong	local04, local01
2075c     04 1E 06 F1 | 	add	local01, #4
20760     0F 27 0A FB | 	rdlong	local05, local01 wz
20764     18 1E 86 F1 | 	sub	local01, #24
20768     02 FA 05 A6 |  if_e	mov	result1, #2
2076c     30 00 90 AD |  if_e	jmp	#LR__3446
20770     10 29 02 F6 | 	mov	local06, local02
20774     09 28 46 F0 | 	shr	local06, #9
20778     18 1E 06 F1 | 	add	local01, #24
2077c     0F 27 02 FB | 	rdlong	local05, local01
20780     14 27 02 F1 | 	add	local05, local06
20784     0F 27 62 FC | 	wrlong	local05, local01
20788     34 22 06 F1 | 	add	local03, #52
2078c     FF 21 06 F5 | 	and	local02, #511
20790     10 23 02 F1 | 	add	local03, local02
20794     04 1E 06 F1 | 	add	local01, #4
20798     0F 23 62 FC | 	wrlong	local03, local01
2079c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2079c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2079c                 | ' 
2079c                 | ' 	return FR_OK;
2079c     00 FA 05 F6 | 	mov	result1, #0
207a0                 | LR__3446
207a0     A7 F0 03 F6 | 	mov	ptra, fp
207a4     B2 00 A0 FD | 	call	#popregs_
207a8                 | _fatfs_cc_dir_sdi_ret
207a8     2D 00 64 FD | 	ret
207ac                 | 
207ac                 | _fatfs_cc_dir_next
207ac     05 4A 05 F6 | 	mov	COUNT_, #5
207b0     A8 00 A0 FD | 	call	#pushregs_
207b4     09 1F 02 F6 | 	mov	local01, arg01
207b8     0A 21 02 F6 | 	mov	local02, arg02
207bc     0F 23 02 FB | 	rdlong	local03, local01
207c0     10 1E 06 F1 | 	add	local01, #16
207c4     0F 25 02 FB | 	rdlong	local04, local01
207c8     10 1E 86 F1 | 	sub	local01, #16
207cc     20 24 06 F1 | 	add	local04, #32
207d0     00 10 00 FF 
207d4     00 24 16 F2 | 	cmp	local04, ##2097152 wc
207d8     18 1E 06 31 |  if_ae	add	local01, #24
207dc     0F 01 68 3C |  if_ae	wrlong	#0, local01
207e0     18 1E 86 31 |  if_ae	sub	local01, #24
207e4     18 1E 06 F1 | 	add	local01, #24
207e8     0F 15 0A FB | 	rdlong	arg02, local01 wz
207ec     18 1E 86 F1 | 	sub	local01, #24
207f0     04 FA 05 A6 |  if_e	mov	result1, #4
207f4     64 01 90 AD |  if_e	jmp	#LR__3455
207f8     FF 25 CE F7 | 	test	local04, #511 wz
207fc     3C 01 90 5D |  if_ne	jmp	#LR__3454
20800     18 1E 06 F1 | 	add	local01, #24
20804     0F 15 02 FB | 	rdlong	arg02, local01
20808     01 14 06 F1 | 	add	arg02, #1
2080c     0F 15 62 FC | 	wrlong	arg02, local01
20810     04 1E 86 F1 | 	sub	local01, #4
20814     0F 15 0A FB | 	rdlong	arg02, local01 wz
20818     14 1E 86 F1 | 	sub	local01, #20
2081c     2C 00 90 5D |  if_ne	jmp	#LR__3450
20820     12 15 02 F6 | 	mov	arg02, local04
20824     05 14 46 F0 | 	shr	arg02, #5
20828     08 22 06 F1 | 	add	local03, #8
2082c     11 21 E2 FA | 	rdword	local02, local03
20830     08 22 86 F1 | 	sub	local03, #8
20834     10 15 12 F2 | 	cmp	arg02, local02 wc
20838     18 1E 06 31 |  if_ae	add	local01, #24
2083c     0F 01 68 3C |  if_ae	wrlong	#0, local01
20840                 | ' 				dp->sect = 0; return FR_NO_FILE;
20840     04 FA 05 36 |  if_ae	mov	result1, #4
20844     14 01 90 3D |  if_ae	jmp	#LR__3455
20848     F0 00 90 FD | 	jmp	#LR__3453
2084c                 | LR__3450
2084c     12 13 02 F6 | 	mov	arg01, local04
20850     09 12 46 F0 | 	shr	arg01, #9
20854     0A 22 06 F1 | 	add	local03, #10
20858     11 15 E2 FA | 	rdword	arg02, local03
2085c     0A 22 86 F1 | 	sub	local03, #10
20860     01 14 86 F1 | 	sub	arg02, #1
20864     0A 13 CA F7 | 	test	arg01, arg02 wz
20868     D0 00 90 5D |  if_ne	jmp	#LR__3452
2086c     0F 13 02 F6 | 	mov	arg01, local01
20870     14 1E 06 F1 | 	add	local01, #20
20874     0F 15 02 FB | 	rdlong	arg02, local01
20878     14 1E 86 F1 | 	sub	local01, #20
2087c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
20880     FD 26 02 F6 | 	mov	local05, result1
20884     02 26 16 F2 | 	cmp	local05, #2 wc
20888     02 FA 05 C6 |  if_b	mov	result1, #2
2088c     CC 00 90 CD |  if_b	jmp	#LR__3455
20890     FF FF 7F FF 
20894     FF 27 0E F2 | 	cmp	local05, ##-1 wz
20898     01 FA 05 A6 |  if_e	mov	result1, #1
2089c     BC 00 90 AD |  if_e	jmp	#LR__3455
208a0     18 22 06 F1 | 	add	local03, #24
208a4     11 15 02 FB | 	rdlong	arg02, local03
208a8     18 22 86 F1 | 	sub	local03, #24
208ac     0A 27 12 F2 | 	cmp	local05, arg02 wc
208b0     68 00 90 CD |  if_b	jmp	#LR__3451
208b4     00 20 0E F2 | 	cmp	local02, #0 wz
208b8     18 1E 06 A1 |  if_e	add	local01, #24
208bc     0F 01 68 AC |  if_e	wrlong	#0, local01
208c0                 | ' 						dp->sect = 0; return FR_NO_FILE;
208c0     04 FA 05 A6 |  if_e	mov	result1, #4
208c4     94 00 90 AD |  if_e	jmp	#LR__3455
208c8     0F 13 02 F6 | 	mov	arg01, local01
208cc     14 1E 06 F1 | 	add	local01, #20
208d0     0F 15 02 FB | 	rdlong	arg02, local01
208d4     14 1E 86 F1 | 	sub	local01, #20
208d8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
208dc     FD 26 0A F6 | 	mov	local05, result1 wz
208e0     07 FA 05 A6 |  if_e	mov	result1, #7
208e4     74 00 90 AD |  if_e	jmp	#LR__3455
208e8     01 26 0E F2 | 	cmp	local05, #1 wz
208ec     02 FA 05 A6 |  if_e	mov	result1, #2
208f0     68 00 90 AD |  if_e	jmp	#LR__3455
208f4     FF FF 7F FF 
208f8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
208fc     01 FA 05 A6 |  if_e	mov	result1, #1
20900     58 00 90 AD |  if_e	jmp	#LR__3455
20904     13 15 02 F6 | 	mov	arg02, local05
20908     11 13 02 F6 | 	mov	arg01, local03
2090c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
20910     00 FA 0D F2 | 	cmp	result1, #0 wz
20914     01 FA 05 56 |  if_ne	mov	result1, #1
20918     40 00 90 5D |  if_ne	jmp	#LR__3455
2091c                 | LR__3451
2091c     14 1E 06 F1 | 	add	local01, #20
20920     0F 27 62 FC | 	wrlong	local05, local01
20924     11 13 02 F6 | 	mov	arg01, local03
20928     13 15 02 F6 | 	mov	arg02, local05
2092c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
20930     04 1E 06 F1 | 	add	local01, #4
20934     0F FB 61 FC | 	wrlong	result1, local01
20938     18 1E 86 F1 | 	sub	local01, #24
2093c                 | LR__3452
2093c                 | LR__3453
2093c                 | LR__3454
2093c     10 1E 06 F1 | 	add	local01, #16
20940     0F 25 62 FC | 	wrlong	local04, local01
20944     34 22 06 F1 | 	add	local03, #52
20948     FF 25 06 F5 | 	and	local04, #511
2094c     12 23 02 F1 | 	add	local03, local04
20950     0C 1E 06 F1 | 	add	local01, #12
20954     0F 23 62 FC | 	wrlong	local03, local01
20958                 | ' #line 1771 "ff.c"
20958                 | ' 				}
20958                 | ' 				dp->clust = clst;
20958                 | ' 				dp->sect = clst2sect(fs, clst);
20958                 | ' 			}
20958                 | ' 		}
20958                 | ' 	}
20958                 | ' 	dp->dptr = ofs;
20958                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
20958                 | ' 
20958                 | ' 	return FR_OK;
20958     00 FA 05 F6 | 	mov	result1, #0
2095c                 | LR__3455
2095c     A7 F0 03 F6 | 	mov	ptra, fp
20960     B2 00 A0 FD | 	call	#popregs_
20964                 | _fatfs_cc_dir_next_ret
20964     2D 00 64 FD | 	ret
20968                 | 
20968                 | _fatfs_cc_dir_alloc
20968     08 4A 05 F6 | 	mov	COUNT_, #8
2096c     A8 00 A0 FD | 	call	#pushregs_
20970     09 1F 02 F6 | 	mov	local01, arg01
20974     0A 21 02 F6 | 	mov	local02, arg02
20978     0F 23 02 FB | 	rdlong	local03, local01
2097c     0F 13 02 F6 | 	mov	arg01, local01
20980     00 14 06 F6 | 	mov	arg02, #0
20984     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
20988     FD 24 0A F6 | 	mov	local04, result1 wz
2098c     70 00 90 5D |  if_ne	jmp	#LR__3464
20990     00 26 06 F6 | 	mov	local05, #0
20994                 | ' 		n = 0;
20994                 | ' 		do {
20994                 | LR__3460
20994     18 1E 06 F1 | 	add	local01, #24
20998     0F 15 02 FB | 	rdlong	arg02, local01
2099c     18 1E 86 F1 | 	sub	local01, #24
209a0     11 13 02 F6 | 	mov	arg01, local03
209a4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
209a8     FD 24 0A F6 | 	mov	local04, result1 wz
209ac     50 00 90 5D |  if_ne	jmp	#LR__3463
209b0     1C 1E 06 F1 | 	add	local01, #28
209b4     0F 29 02 FB | 	rdlong	local06, local01
209b8     1C 1E 86 F1 | 	sub	local01, #28
209bc     14 29 C2 FA | 	rdbyte	local06, local06
209c0     E5 28 0E F2 | 	cmp	local06, #229 wz
209c4     1C 1E 06 51 |  if_ne	add	local01, #28
209c8     0F 2B 02 5B |  if_ne	rdlong	local07, local01
209cc     1C 1E 86 51 |  if_ne	sub	local01, #28
209d0     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
209d4     10 00 90 5D |  if_ne	jmp	#LR__3461
209d8     01 26 06 F1 | 	add	local05, #1
209dc     10 27 0A F2 | 	cmp	local05, local02 wz
209e0     1C 00 90 AD |  if_e	jmp	#LR__3463
209e4     04 00 90 FD | 	jmp	#LR__3462
209e8                 | LR__3461
209e8     00 26 06 F6 | 	mov	local05, #0
209ec                 | LR__3462
209ec     0F 13 02 F6 | 	mov	arg01, local01
209f0     01 14 06 F6 | 	mov	arg02, #1
209f4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
209f8     FD 24 0A F6 | 	mov	local04, result1 wz
209fc     94 FF 9F AD |  if_e	jmp	#LR__3460
20a00                 | LR__3463
20a00                 | LR__3464
20a00     04 24 0E F2 | 	cmp	local04, #4 wz
20a04     07 24 06 A6 |  if_e	mov	local04, #7
20a08                 | ' 	return res;
20a08     12 FB 01 F6 | 	mov	result1, local04
20a0c     A7 F0 03 F6 | 	mov	ptra, fp
20a10     B2 00 A0 FD | 	call	#popregs_
20a14                 | _fatfs_cc_dir_alloc_ret
20a14     2D 00 64 FD | 	ret
20a18                 | 
20a18                 | _fatfs_cc_ld_clust
20a18     09 01 02 F6 | 	mov	_var01, arg01
20a1c     0A 13 02 F6 | 	mov	arg01, arg02
20a20     1A 12 06 F1 | 	add	arg01, #26
20a24                 | ' {
20a24                 | ' 
20a24                 | ' 	return *((WORD*)ptr);
20a24     09 FB E1 FA | 	rdword	result1, arg01
20a28     FD 12 32 F9 | 	getword	arg01, result1, #0
20a2c     00 01 C2 FA | 	rdbyte	_var01, _var01
20a30     03 00 0E F2 | 	cmp	_var01, #3 wz
20a34     14 14 06 A1 |  if_e	add	arg02, #20
20a38                 | ' {
20a38                 | ' 
20a38                 | ' 	return *((WORD*)ptr);
20a38     0A FB E1 AA |  if_e	rdword	result1, arg02
20a3c     10 FA 65 A0 |  if_e	shl	result1, #16
20a40     FD 12 42 A5 |  if_e	or	arg01, result1
20a44                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
20a44                 | ' 	}
20a44                 | ' 
20a44                 | ' 	return cl;
20a44     09 FB 01 F6 | 	mov	result1, arg01
20a48                 | _fatfs_cc_ld_clust_ret
20a48     2D 00 64 FD | 	ret
20a4c                 | 
20a4c                 | _fatfs_cc_st_clust
20a4c     09 01 02 F6 | 	mov	_var01, arg01
20a50     0A 13 02 F6 | 	mov	arg01, arg02
20a54     1A 12 06 F1 | 	add	arg01, #26
20a58     09 17 52 FC | 	wrword	arg03, arg01
20a5c     00 01 C2 FA | 	rdbyte	_var01, _var01
20a60     03 00 0E F2 | 	cmp	_var01, #3 wz
20a64     14 14 06 A1 |  if_e	add	arg02, #20
20a68     10 16 46 A0 |  if_e	shr	arg03, #16
20a6c     0A 17 52 AC |  if_e	wrword	arg03, arg02
20a70                 | _fatfs_cc_st_clust_ret
20a70     2D 00 64 FD | 	ret
20a74                 | 
20a74                 | _fatfs_cc_cmp_lfn
20a74     07 4A 05 F6 | 	mov	COUNT_, #7
20a78     A8 00 A0 FD | 	call	#pushregs_
20a7c     09 1F 02 F6 | 	mov	local01, arg01
20a80     0A 13 02 F6 | 	mov	arg01, arg02
20a84     1A 12 06 F1 | 	add	arg01, #26
20a88                 | ' {
20a88                 | ' 
20a88                 | ' 	return *((WORD*)ptr);
20a88     09 FB E9 FA | 	rdword	result1, arg01 wz
20a8c     00 FA 05 56 |  if_ne	mov	result1, #0
20a90     E0 00 90 5D |  if_ne	jmp	#LR__3476
20a94     0A 21 C2 FA | 	rdbyte	local02, arg02
20a98     3F 20 06 F5 | 	and	local02, #63
20a9c     01 20 86 F1 | 	sub	local02, #1
20aa0     0D 20 06 FD | 	qmul	local02, #13
20aa4                 | ' 
20aa4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
20aa4                 | ' 
20aa4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
20aa4     01 22 06 F6 | 	mov	local03, #1
20aa8     00 24 06 F6 | 	mov	local04, #0
20aac     18 26 62 FD | 	getqx	local05
20ab0                 | LR__3470
20ab0     0D 24 16 F2 | 	cmp	local04, #13 wc
20ab4     9C 00 90 3D |  if_ae	jmp	#LR__3475
20ab8     0A 13 02 F6 | 	mov	arg01, arg02
20abc     12 21 02 F6 | 	mov	local02, local04
20ac0     01 00 00 FF 
20ac4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
20ac8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
20acc     10 21 C2 FA | 	rdbyte	local02, local02
20ad0     01 20 06 FA | 	mul	local02, #1
20ad4     10 13 02 F1 | 	add	arg01, local02
20ad8     01 00 00 FF 
20adc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20ae0                 | ' {
20ae0                 | ' 
20ae0                 | ' 	return *((WORD*)ptr);
20ae0     09 FB E1 FA | 	rdword	result1, arg01
20ae4     FD 28 02 F6 | 	mov	local06, result1
20ae8     11 21 02 F6 | 	mov	local02, local03
20aec     0F 20 4E F7 | 	zerox	local02, #15 wz
20af0     44 00 90 AD |  if_e	jmp	#LR__3473
20af4     00 27 16 F2 | 	cmp	local05, #256 wc
20af8     2C 00 90 3D |  if_ae	jmp	#LR__3471
20afc     14 13 32 F9 | 	getword	arg01, local06, #0
20b00     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
20b04     FD 20 02 F6 | 	mov	local02, result1
20b08     13 23 02 F6 | 	mov	local03, local05
20b0c     01 22 66 F0 | 	shl	local03, #1
20b10     0F 23 02 F1 | 	add	local03, local01
20b14     11 13 E2 FA | 	rdword	arg01, local03
20b18     01 26 06 F1 | 	add	local05, #1
20b1c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
20b20     FD 20 0A F2 | 	cmp	local02, result1 wz
20b24     08 00 90 AD |  if_e	jmp	#LR__3472
20b28                 | LR__3471
20b28                 | ' 				return 0;
20b28     00 FA 05 F6 | 	mov	result1, #0
20b2c     44 00 90 FD | 	jmp	#LR__3476
20b30                 | LR__3472
20b30     14 23 02 F6 | 	mov	local03, local06
20b34     14 00 90 FD | 	jmp	#LR__3474
20b38                 | LR__3473
20b38     14 29 32 F9 | 	getword	local06, local06, #0
20b3c     7F 00 00 FF 
20b40     FF 29 0E F2 | 	cmp	local06, ##65535 wz
20b44     00 FA 05 56 |  if_ne	mov	result1, #0
20b48     28 00 90 5D |  if_ne	jmp	#LR__3476
20b4c                 | LR__3474
20b4c     01 24 06 F1 | 	add	local04, #1
20b50     5C FF 9F FD | 	jmp	#LR__3470
20b54                 | LR__3475
20b54     0A 21 C2 FA | 	rdbyte	local02, arg02
20b58     40 20 CE F7 | 	test	local02, #64 wz
20b5c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
20b60     01 26 66 50 |  if_ne	shl	local05, #1
20b64     0F 27 02 51 |  if_ne	add	local05, local01
20b68     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
20b6c     00 FA 05 56 |  if_ne	mov	result1, #0
20b70                 | ' 
20b70                 | ' 	return 1;
20b70     01 FA 05 A6 |  if_e	mov	result1, #1
20b74                 | LR__3476
20b74     A7 F0 03 F6 | 	mov	ptra, fp
20b78     B2 00 A0 FD | 	call	#popregs_
20b7c                 | _fatfs_cc_cmp_lfn_ret
20b7c     2D 00 64 FD | 	ret
20b80                 | 
20b80                 | _fatfs_cc_pick_lfn
20b80     09 01 02 F6 | 	mov	_var01, arg01
20b84     0A 13 02 F6 | 	mov	arg01, arg02
20b88     1A 12 06 F1 | 	add	arg01, #26
20b8c                 | ' {
20b8c                 | ' 
20b8c                 | ' 	return *((WORD*)ptr);
20b8c     09 FB E9 FA | 	rdword	result1, arg01 wz
20b90     00 FA 05 56 |  if_ne	mov	result1, #0
20b94     D4 00 90 5D |  if_ne	jmp	#LR__3485
20b98     0A 03 C2 FA | 	rdbyte	_var02, arg02
20b9c     40 02 26 F5 | 	andn	_var02, #64
20ba0     01 02 86 F1 | 	sub	_var02, #1
20ba4     0D 02 06 FD | 	qmul	_var02, #13
20ba8                 | ' 
20ba8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
20ba8                 | ' 
20ba8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
20ba8     01 04 06 F6 | 	mov	_var03, #1
20bac     00 06 06 F6 | 	mov	_var04, #0
20bb0     18 08 62 FD | 	getqx	_var05
20bb4                 | LR__3480
20bb4     0D 06 16 F2 | 	cmp	_var04, #13 wc
20bb8     80 00 90 3D |  if_ae	jmp	#LR__3483
20bbc     0A 13 02 F6 | 	mov	arg01, arg02
20bc0     03 03 02 F6 | 	mov	_var02, _var04
20bc4     01 00 00 FF 
20bc8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
20bcc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
20bd0     01 03 C2 FA | 	rdbyte	_var02, _var02
20bd4     01 02 06 FA | 	mul	_var02, #1
20bd8     01 13 02 F1 | 	add	arg01, _var02
20bdc     01 00 00 FF 
20be0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20be4                 | ' {
20be4                 | ' 
20be4                 | ' 	return *((WORD*)ptr);
20be4     09 FB E1 FA | 	rdword	result1, arg01
20be8     FD 0A 02 F6 | 	mov	_var06, result1
20bec     02 03 02 F6 | 	mov	_var02, _var03
20bf0     0F 02 4E F7 | 	zerox	_var02, #15 wz
20bf4     28 00 90 AD |  if_e	jmp	#LR__3481
20bf8     00 09 16 F2 | 	cmp	_var05, #256 wc
20bfc     00 FA 05 36 |  if_ae	mov	result1, #0
20c00     68 00 90 3D |  if_ae	jmp	#LR__3485
20c04     04 03 02 F6 | 	mov	_var02, _var05
20c08     01 02 66 F0 | 	shl	_var02, #1
20c0c     00 03 02 F1 | 	add	_var02, _var01
20c10     05 05 02 F6 | 	mov	_var03, _var06
20c14     01 05 52 FC | 	wrword	_var03, _var02
20c18     01 08 06 F1 | 	add	_var05, #1
20c1c     14 00 90 FD | 	jmp	#LR__3482
20c20                 | LR__3481
20c20     05 0B 32 F9 | 	getword	_var06, _var06, #0
20c24     7F 00 00 FF 
20c28     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
20c2c     00 FA 05 56 |  if_ne	mov	result1, #0
20c30     38 00 90 5D |  if_ne	jmp	#LR__3485
20c34                 | LR__3482
20c34     01 06 06 F1 | 	add	_var04, #1
20c38     78 FF 9F FD | 	jmp	#LR__3480
20c3c                 | LR__3483
20c3c     0A 03 C2 FA | 	rdbyte	_var02, arg02
20c40     40 02 CE F7 | 	test	_var02, #64 wz
20c44     02 0D 02 56 |  if_ne	mov	_var07, _var03
20c48     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
20c4c     18 00 90 AD |  if_e	jmp	#LR__3484
20c50     00 09 16 F2 | 	cmp	_var05, #256 wc
20c54     00 FA 05 36 |  if_ae	mov	result1, #0
20c58     10 00 90 3D |  if_ae	jmp	#LR__3485
20c5c     01 08 66 F0 | 	shl	_var05, #1
20c60     00 09 02 F1 | 	add	_var05, _var01
20c64     04 01 58 FC | 	wrword	#0, _var05
20c68                 | LR__3484
20c68                 | ' 		lfnbuf[i] = 0;
20c68                 | ' 	}
20c68                 | ' 
20c68                 | ' 	return 1;
20c68     01 FA 05 F6 | 	mov	result1, #1
20c6c                 | LR__3485
20c6c                 | _fatfs_cc_pick_lfn_ret
20c6c     2D 00 64 FD | 	ret
20c70                 | 
20c70                 | _fatfs_cc_put_lfn
20c70     0D 14 06 F1 | 	add	arg02, #13
20c74     0A 19 42 FC | 	wrbyte	arg04, arg02
20c78     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
20c7c     01 18 86 F1 | 	sub	arg04, #1
20c80     0D 18 06 FD | 	qmul	arg04, #13
20c84     09 01 02 F6 | 	mov	_var01, arg01
20c88     02 14 86 F1 | 	sub	arg02, #2
20c8c     0A 1F 48 FC | 	wrbyte	#15, arg02
20c90     01 14 06 F1 | 	add	arg02, #1
20c94     0A 01 48 FC | 	wrbyte	#0, arg02
20c98     0C 14 86 F1 | 	sub	arg02, #12
20c9c     0A 13 02 F6 | 	mov	arg01, arg02
20ca0     1A 12 06 F1 | 	add	arg01, #26
20ca4     09 01 58 FC | 	wrword	#0, arg01
20ca8     00 02 06 F6 | 	mov	_var02, #0
20cac     00 04 06 F6 | 	mov	_var03, #0
20cb0                 | ' 	BYTE* dir,
20cb0                 | ' 	BYTE ord,
20cb0                 | ' 	BYTE sum
20cb0                 | ' )
20cb0                 | ' {
20cb0                 | ' 	UINT i, s;
20cb0                 | ' 	WCHAR wc;
20cb0                 | ' 
20cb0                 | ' 
20cb0                 | ' 	dir[ 13 ] = sum;
20cb0                 | ' 	dir[ 11 ] =  0x0F ;
20cb0                 | ' 	dir[ 12 ] = 0;
20cb0                 | ' 	st_word(dir +  26 , 0);
20cb0                 | ' 
20cb0                 | ' 	i = (ord - 1) * 13;
20cb0                 | ' 	s = wc = 0;
20cb0                 | ' 	do {
20cb0     01 00 00 FF 
20cb4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
20cb8     18 06 62 FD | 	getqx	_var04
20cbc     97 2A 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
20cc0                 | LR__3490
20cc0     01 19 32 F9 | 	getword	arg04, _var02, #0
20cc4     7F 00 00 FF 
20cc8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
20ccc     03 13 02 56 |  if_ne	mov	arg01, _var04
20cd0     01 06 06 51 |  if_ne	add	_var04, #1
20cd4     01 12 66 50 |  if_ne	shl	arg01, #1
20cd8     00 13 02 51 |  if_ne	add	arg01, _var01
20cdc     09 03 E2 5A |  if_ne	rdword	_var02, arg01
20ce0     0A 13 02 F6 | 	mov	arg01, arg02
20ce4     02 19 02 F6 | 	mov	arg04, _var03
20ce8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
20cec     0C 19 C2 FA | 	rdbyte	arg04, arg04
20cf0     01 18 06 FA | 	mul	arg04, #1
20cf4     0C 13 02 F1 | 	add	arg01, arg04
20cf8     09 03 52 FC | 	wrword	_var02, arg01
20cfc     01 19 02 F6 | 	mov	arg04, _var02
20d00     0F 18 4E F7 | 	zerox	arg04, #15 wz
20d04     0F 02 CE A9 |  if_e	bmask	_var02, #15
20d08     01 04 06 F1 | 	add	_var03, #1
20d0c     0D 04 16 F2 | 	cmp	_var03, #13 wc
20d10     AC FF 9F CD |  if_b	jmp	#LR__3490
20d14                 | LR__3491
20d14     01 00 00 FF 
20d18     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
20d1c     01 03 32 F9 | 	getword	_var02, _var02, #0
20d20     7F 00 00 FF 
20d24     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
20d28     01 06 66 50 |  if_ne	shl	_var04, #1
20d2c     00 07 02 51 |  if_ne	add	_var04, _var01
20d30     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
20d34     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
20d38     40 16 46 A5 |  if_e	or	arg03, #64
20d3c     0A 17 42 FC | 	wrbyte	arg03, arg02
20d40                 | _fatfs_cc_put_lfn_ret
20d40     2D 00 64 FD | 	ret
20d44                 | 
20d44                 | _fatfs_cc_gen_numname
20d44     08 4A 05 F6 | 	mov	COUNT_, #8
20d48     A8 00 A0 FD | 	call	#pushregs_
20d4c     2C F0 07 F1 | 	add	ptra, #44
20d50     09 1F 02 F6 | 	mov	local01, arg01
20d54     0A 21 02 F6 | 	mov	local02, arg02
20d58     0B 23 02 F6 | 	mov	local03, arg03
20d5c     0C 25 02 F6 | 	mov	local04, arg04
20d60     0F 13 02 F6 | 	mov	arg01, local01
20d64     10 15 02 F6 | 	mov	arg02, local02
20d68     0B 16 06 F6 | 	mov	arg03, #11
20d6c     78 7A BF FD | 	call	#__system____builtin_memmove
20d70     06 24 16 F2 | 	cmp	local04, #6 wc
20d74     48 00 90 CD |  if_b	jmp	#LR__3505
20d78     12 27 02 F6 | 	mov	local05, local04
20d7c     97 1E 48 FB | 	callpa	#(@LR__3503-@LR__3500)>>2,fcache_load_ptr_
20d80                 | ' 		sreg = seq;
20d80                 | ' 		while (*lfn) {
20d80                 | LR__3500
20d80     11 29 EA FA | 	rdword	local06, local03 wz
20d84     34 00 90 AD |  if_e	jmp	#LR__3504
20d88     11 2B E2 FA | 	rdword	local07, local03
20d8c                 | ' 			wc = *lfn++;
20d8c                 | ' 			for (i = 0; i < 16; i++) {
20d8c     02 22 06 F1 | 	add	local03, #2
20d90     10 12 DC FC | 	rep	@LR__3502, #16
20d94                 | LR__3501
20d94     01 26 66 F0 | 	shl	local05, #1
20d98     15 29 32 F9 | 	getword	local06, local07, #0
20d9c     01 28 06 F5 | 	and	local06, #1
20da0     14 27 02 F1 | 	add	local05, local06
20da4     15 2B 32 F9 | 	getword	local07, local07, #0
20da8     01 2A 46 F0 | 	shr	local07, #1
20dac     10 26 2E F4 | 	testbn	local05, #16 wz
20db0     88 00 00 5F 
20db4     21 26 66 55 |  if_ne	xor	local05, ##69665
20db8                 | LR__3502
20db8     C4 FF 9F FD | 	jmp	#LR__3500
20dbc                 | LR__3503
20dbc                 | LR__3504
20dbc     13 25 02 F6 | 	mov	local04, local05
20dc0                 | LR__3505
20dc0     07 2A 06 F6 | 	mov	local07, #7
20dc4                 | ' 			}
20dc4                 | ' 		}
20dc4                 | ' 		seq = (UINT)sreg;
20dc4                 | ' 	}
20dc4                 | ' 
20dc4                 | ' 
20dc4                 | ' 	i = 7;
20dc4                 | ' 	do {
20dc4     10 4E 05 F1 | 	add	fp, #16
20dc8     97 1A 48 FB | 	callpa	#(@LR__3507-@LR__3506)>>2,fcache_load_ptr_
20dcc                 | LR__3506
20dcc     12 27 42 F8 | 	getnib	local05, local04, #0
20dd0     30 26 06 F1 | 	add	local05, #48
20dd4     04 24 46 F0 | 	shr	local04, #4
20dd8     13 29 E2 F8 | 	getbyte	local06, local05, #0
20ddc     3A 28 16 F2 | 	cmp	local06, #58 wc
20de0     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
20de4     07 26 06 31 |  if_ae	add	local05, #7
20de8     15 29 02 F6 | 	mov	local06, local07
20dec     01 2A 8E F1 | 	sub	local07, #1 wz
20df0     A7 28 02 F1 | 	add	local06, fp
20df4     14 27 42 FC | 	wrbyte	local05, local06
20df8     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
20dfc     CC FF 9F 5D |  if_ne	jmp	#LR__3506
20e00                 | LR__3507
20e00     15 29 02 F6 | 	mov	local06, local07
20e04     A7 28 02 F1 | 	add	local06, fp
20e08     14 FD 48 FC | 	wrbyte	#126, local06
20e0c                 | ' 	ns[i] = '~';
20e0c                 | ' 
20e0c                 | ' 
20e0c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
20e0c     00 26 06 F6 | 	mov	local05, #0
20e10     10 4E 85 F1 | 	sub	fp, #16
20e14     97 2A 48 FB | 	callpa	#(@LR__3510-@LR__3508)>>2,fcache_load_ptr_
20e18                 | LR__3508
20e18     15 27 12 F2 | 	cmp	local05, local07 wc
20e1c     4C 00 90 3D |  if_ae	jmp	#LR__3511
20e20     13 29 02 F6 | 	mov	local06, local05
20e24     0F 29 02 F1 | 	add	local06, local01
20e28     14 29 C2 FA | 	rdbyte	local06, local06
20e2c     20 28 0E F2 | 	cmp	local06, #32 wz
20e30     38 00 90 AD |  if_e	jmp	#LR__3511
20e34     13 13 02 F6 | 	mov	arg01, local05
20e38     0F 13 02 F1 | 	add	arg01, local01
20e3c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
20e40     00 FA 05 56 |  if_ne	mov	result1, #0
20e44                 | ' 
20e44                 | ' 	return 0;
20e44     00 FA 05 A6 |  if_e	mov	result1, #0
20e48     00 FA 0D F2 | 	cmp	result1, #0 wz
20e4c     14 00 90 AD |  if_e	jmp	#LR__3509
20e50     15 29 02 F6 | 	mov	local06, local07
20e54     01 28 86 F1 | 	sub	local06, #1
20e58     14 27 0A F2 | 	cmp	local05, local06 wz
20e5c     0C 00 90 AD |  if_e	jmp	#LR__3511
20e60     01 26 06 F1 | 	add	local05, #1
20e64                 | LR__3509
20e64     01 26 06 F1 | 	add	local05, #1
20e68     AC FF 9F FD | 	jmp	#LR__3508
20e6c                 | LR__3510
20e6c                 | LR__3511
20e6c     97 20 48 FB | 	callpa	#(@LR__3515-@LR__3512)>>2,fcache_load_ptr_
20e70                 | ' 			j++;
20e70                 | ' 		}
20e70                 | ' 	}
20e70                 | ' 	do {
20e70                 | LR__3512
20e70     13 29 02 F6 | 	mov	local06, local05
20e74     0F 29 02 F1 | 	add	local06, local01
20e78     08 2A 16 F2 | 	cmp	local07, #8 wc
20e7c     01 26 06 F1 | 	add	local05, #1
20e80     1C 00 90 3D |  if_ae	jmp	#LR__3513
20e84     15 25 02 F6 | 	mov	local04, local07
20e88     10 4E 05 F1 | 	add	fp, #16
20e8c     A7 24 02 F1 | 	add	local04, fp
20e90     12 2D C2 FA | 	rdbyte	local08, local04
20e94     01 2A 06 F1 | 	add	local07, #1
20e98     10 4E 85 F1 | 	sub	fp, #16
20e9c     04 00 90 FD | 	jmp	#LR__3514
20ea0                 | LR__3513
20ea0     20 2C 06 F6 | 	mov	local08, #32
20ea4                 | LR__3514
20ea4     14 2D 42 FC | 	wrbyte	local08, local06
20ea8     08 26 16 F2 | 	cmp	local05, #8 wc
20eac     C0 FF 9F CD |  if_b	jmp	#LR__3512
20eb0                 | LR__3515
20eb0     A7 F0 03 F6 | 	mov	ptra, fp
20eb4     B2 00 A0 FD | 	call	#popregs_
20eb8                 | _fatfs_cc_gen_numname_ret
20eb8     2D 00 64 FD | 	ret
20ebc                 | 
20ebc                 | _fatfs_cc_sum_sfn
20ebc     00 00 06 F6 | 	mov	_var01, #0
20ec0                 | ' )
20ec0                 | ' {
20ec0                 | ' 	BYTE sum = 0;
20ec0                 | ' 	UINT n = 11;
20ec0                 | ' 
20ec0                 | ' 	do {
20ec0     97 12 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
20ec4                 | LR__3520
20ec4     0B 10 DC FC | 	rep	@LR__3523, #11
20ec8                 | LR__3521
20ec8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
20ecc     01 FA 45 F0 | 	shr	result1, #1
20ed0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
20ed4     07 00 66 F0 | 	shl	_var01, #7
20ed8     00 FB 01 F1 | 	add	result1, _var01
20edc     09 01 C2 FA | 	rdbyte	_var01, arg01
20ee0     FD 00 02 F1 | 	add	_var01, result1
20ee4     01 12 06 F1 | 	add	arg01, #1
20ee8                 | LR__3522
20ee8                 | LR__3523
20ee8                 | ' 	return sum;
20ee8     00 FB 01 F6 | 	mov	result1, _var01
20eec                 | _fatfs_cc_sum_sfn_ret
20eec     2D 00 64 FD | 	ret
20ef0                 | 
20ef0                 | _fatfs_cc_dir_read
20ef0     0C 4A 05 F6 | 	mov	COUNT_, #12
20ef4     A8 00 A0 FD | 	call	#pushregs_
20ef8     09 1F 02 F6 | 	mov	local01, arg01
20efc     0A 21 02 F6 | 	mov	local02, arg02
20f00     04 22 06 F6 | 	mov	local03, #4
20f04     0F 25 02 FB | 	rdlong	local04, local01
20f08     FF 26 06 F6 | 	mov	local05, #255
20f0c     FF 28 06 F6 | 	mov	local06, #255
20f10                 | ' )
20f10                 | ' {
20f10                 | ' 	FRESULT res = FR_NO_FILE;
20f10                 | ' 	FATFS *fs = dp->obj.fs;
20f10                 | ' 	BYTE attr, b;
20f10                 | ' 
20f10                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
20f10                 | ' 
20f10                 | ' 
20f10                 | ' 	while (dp->sect) {
20f10                 | LR__3530
20f10     18 1E 06 F1 | 	add	local01, #24
20f14     0F FB 09 FB | 	rdlong	result1, local01 wz
20f18     18 1E 86 F1 | 	sub	local01, #24
20f1c     AC 01 90 AD |  if_e	jmp	#LR__3540
20f20     18 1E 06 F1 | 	add	local01, #24
20f24     0F 15 02 FB | 	rdlong	arg02, local01
20f28     18 1E 86 F1 | 	sub	local01, #24
20f2c     12 13 02 F6 | 	mov	arg01, local04
20f30     AC ED BF FD | 	call	#_fatfs_cc_move_window
20f34     FD 22 0A F6 | 	mov	local03, result1 wz
20f38     90 01 90 5D |  if_ne	jmp	#LR__3540
20f3c     1C 1E 06 F1 | 	add	local01, #28
20f40     0F FB 01 FB | 	rdlong	result1, local01
20f44     1C 1E 86 F1 | 	sub	local01, #28
20f48     FD 2A C2 FA | 	rdbyte	local07, result1
20f4c     15 FB 01 F6 | 	mov	result1, local07
20f50     07 FA 4D F7 | 	zerox	result1, #7 wz
20f54     04 22 06 A6 |  if_e	mov	local03, #4
20f58                 | ' 			res = FR_NO_FILE; break;
20f58     70 01 90 AD |  if_e	jmp	#LR__3540
20f5c     1C 1E 06 F1 | 	add	local01, #28
20f60     0F 2D 02 FB | 	rdlong	local08, local01
20f64     0B 2C 06 F1 | 	add	local08, #11
20f68     16 2F C2 FA | 	rdbyte	local09, local08
20f6c     3F 2E 06 F5 | 	and	local09, #63
20f70     16 1E 86 F1 | 	sub	local01, #22
20f74     0F 2F 42 FC | 	wrbyte	local09, local01
20f78     06 1E 86 F1 | 	sub	local01, #6
20f7c     15 FB E1 F8 | 	getbyte	result1, local07, #0
20f80     E5 FA 0D F2 | 	cmp	result1, #229 wz
20f84     15 2D 02 56 |  if_ne	mov	local08, local07
20f88     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
20f8c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
20f90     1C 00 90 AD |  if_e	jmp	#LR__3531
20f94     00 30 06 F6 | 	mov	local10, #0
20f98     17 2D E2 F8 | 	getbyte	local08, local09, #0
20f9c     20 2C 26 F5 | 	andn	local08, #32
20fa0     08 2C 0E F2 | 	cmp	local08, #8 wz
20fa4     01 30 06 A6 |  if_e	mov	local10, #1
20fa8     10 31 0A F2 | 	cmp	local10, local02 wz
20fac     08 00 90 AD |  if_e	jmp	#LR__3532
20fb0                 | LR__3531
20fb0     FF 26 06 F6 | 	mov	local05, #255
20fb4     00 01 90 FD | 	jmp	#LR__3539
20fb8                 | LR__3532
20fb8     17 2F E2 F8 | 	getbyte	local09, local09, #0
20fbc     0F 2E 0E F2 | 	cmp	local09, #15 wz
20fc0     B4 00 90 5D |  if_ne	jmp	#LR__3536
20fc4     15 33 E2 F8 | 	getbyte	local11, local07, #0
20fc8     40 32 CE F7 | 	test	local11, #64 wz
20fcc     30 00 90 AD |  if_e	jmp	#LR__3533
20fd0     1C 1E 06 F1 | 	add	local01, #28
20fd4     0F 33 02 FB | 	rdlong	local11, local01
20fd8     0D 32 06 F1 | 	add	local11, #13
20fdc     19 29 C2 FA | 	rdbyte	local06, local11
20fe0     15 2B E2 F8 | 	getbyte	local07, local07, #0
20fe4     BF 2A 06 F5 | 	and	local07, #191
20fe8     15 27 02 F6 | 	mov	local05, local07
20fec     0C 1E 86 F1 | 	sub	local01, #12
20ff0     0F 33 02 FB | 	rdlong	local11, local01
20ff4     1C 1E 06 F1 | 	add	local01, #28
20ff8     0F 33 62 FC | 	wrlong	local11, local01
20ffc     2C 1E 86 F1 | 	sub	local01, #44
21000                 | LR__3533
21000     15 2D E2 F8 | 	getbyte	local08, local07, #0
21004     13 31 E2 F8 | 	getbyte	local10, local05, #0
21008     18 2D 0A F2 | 	cmp	local08, local10 wz
2100c     5C 00 90 5D |  if_ne	jmp	#LR__3534
21010     14 31 E2 F8 | 	getbyte	local10, local06, #0
21014     1C 1E 06 F1 | 	add	local01, #28
21018     0F 2F 02 FB | 	rdlong	local09, local01
2101c     1C 1E 86 F1 | 	sub	local01, #28
21020     0D 2E 06 F1 | 	add	local09, #13
21024     17 2D C2 FA | 	rdbyte	local08, local09
21028     16 2F E2 F8 | 	getbyte	local09, local08, #0
2102c     17 31 0A F2 | 	cmp	local10, local09 wz
21030     38 00 90 5D |  if_ne	jmp	#LR__3534
21034     0C 24 06 F1 | 	add	local04, #12
21038     12 13 02 FB | 	rdlong	arg01, local04
2103c     0C 24 86 F1 | 	sub	local04, #12
21040     1C 1E 06 F1 | 	add	local01, #28
21044     0F 35 02 FB | 	rdlong	local12, local01
21048     1C 1E 86 F1 | 	sub	local01, #28
2104c     1A 15 02 F6 | 	mov	arg02, local12
21050     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
21054     00 FA 4D F2 | 	cmps	result1, #0 wz
21058     13 35 02 56 |  if_ne	mov	local12, local05
2105c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
21060     01 34 86 51 |  if_ne	sub	local12, #1
21064     1A 33 02 56 |  if_ne	mov	local11, local12
21068     04 00 90 5D |  if_ne	jmp	#LR__3535
2106c                 | LR__3534
2106c     FF 32 06 F6 | 	mov	local11, #255
21070                 | LR__3535
21070     19 27 02 F6 | 	mov	local05, local11
21074     40 00 90 FD | 	jmp	#LR__3538
21078                 | LR__3536
21078     13 33 02 F6 | 	mov	local11, local05
2107c     07 32 4E F7 | 	zerox	local11, #7 wz
21080     20 00 90 5D |  if_ne	jmp	#LR__3537
21084     14 29 E2 F8 | 	getbyte	local06, local06, #0
21088     1C 1E 06 F1 | 	add	local01, #28
2108c     0F 13 02 FB | 	rdlong	arg01, local01
21090     1C 1E 86 F1 | 	sub	local01, #28
21094     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
21098     FD FA E1 F8 | 	getbyte	result1, result1, #0
2109c     FD 28 0A F2 | 	cmp	local06, result1 wz
210a0     28 00 90 AD |  if_e	jmp	#LR__3540
210a4                 | LR__3537
210a4     2C 1E 06 F1 | 	add	local01, #44
210a8     FF FF FF FF 
210ac     0F FF 6B FC | 	wrlong	##-1, local01
210b0     2C 1E 86 F1 | 	sub	local01, #44
210b4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
210b4                 | ' 					}
210b4                 | ' 					break;
210b4     14 00 90 FD | 	jmp	#LR__3540
210b8                 | LR__3538
210b8                 | LR__3539
210b8     0F 13 02 F6 | 	mov	arg01, local01
210bc     00 14 06 F6 | 	mov	arg02, #0
210c0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
210c4     FD 22 0A F6 | 	mov	local03, result1 wz
210c8     44 FE 9F AD |  if_e	jmp	#LR__3530
210cc                 | LR__3540
210cc     00 22 0E F2 | 	cmp	local03, #0 wz
210d0     18 1E 06 51 |  if_ne	add	local01, #24
210d4     0F 01 68 5C |  if_ne	wrlong	#0, local01
210d8                 | ' 	return res;
210d8     11 FB 01 F6 | 	mov	result1, local03
210dc     A7 F0 03 F6 | 	mov	ptra, fp
210e0     B2 00 A0 FD | 	call	#popregs_
210e4                 | _fatfs_cc_dir_read_ret
210e4     2D 00 64 FD | 	ret
210e8                 | 
210e8                 | _fatfs_cc_dir_find
210e8     0B 4A 05 F6 | 	mov	COUNT_, #11
210ec     A8 00 A0 FD | 	call	#pushregs_
210f0     09 1F 02 F6 | 	mov	local01, arg01
210f4     0F 21 02 FB | 	rdlong	local02, local01
210f8     0F 13 02 F6 | 	mov	arg01, local01
210fc     00 14 06 F6 | 	mov	arg02, #0
21100     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
21104     00 FA 0D F2 | 	cmp	result1, #0 wz
21108     18 02 90 5D |  if_ne	jmp	#LR__3562
2110c     FF 22 06 F6 | 	mov	local03, #255
21110     FF 24 06 F6 | 	mov	local04, #255
21114     2C 1E 06 F1 | 	add	local01, #44
21118     FF FF FF FF 
2111c     0F FF 6B FC | 	wrlong	##-1, local01
21120     2C 1E 86 F1 | 	sub	local01, #44
21124                 | ' #line 2404 "ff.c"
21124                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
21124                 | ' 
21124                 | ' 	do {
21124                 | LR__3550
21124     18 1E 06 F1 | 	add	local01, #24
21128     0F 15 02 FB | 	rdlong	arg02, local01
2112c     18 1E 86 F1 | 	sub	local01, #24
21130     10 13 02 F6 | 	mov	arg01, local02
21134     A8 EB BF FD | 	call	#_fatfs_cc_move_window
21138     FD 26 0A F6 | 	mov	local05, result1 wz
2113c     E0 01 90 5D |  if_ne	jmp	#LR__3561
21140     1C 1E 06 F1 | 	add	local01, #28
21144     0F 17 02 FB | 	rdlong	arg03, local01
21148     1C 1E 86 F1 | 	sub	local01, #28
2114c     0B 29 C2 FA | 	rdbyte	local06, arg03
21150     14 17 02 F6 | 	mov	arg03, local06
21154     07 16 4E F7 | 	zerox	arg03, #7 wz
21158     04 26 06 A6 |  if_e	mov	local05, #4
2115c     C0 01 90 AD |  if_e	jmp	#LR__3561
21160     1C 1E 06 F1 | 	add	local01, #28
21164     0F 2B 02 FB | 	rdlong	local07, local01
21168     15 17 02 F6 | 	mov	arg03, local07
2116c     0B 16 06 F1 | 	add	arg03, #11
21170     0B 2D C2 FA | 	rdbyte	local08, arg03
21174     3F 2C 06 F5 | 	and	local08, #63
21178     16 1E 86 F1 | 	sub	local01, #22
2117c     0F 2D 42 FC | 	wrbyte	local08, local01
21180     06 1E 86 F1 | 	sub	local01, #6
21184     14 17 E2 F8 | 	getbyte	arg03, local06, #0
21188     E5 16 0E F2 | 	cmp	arg03, #229 wz
2118c     18 00 90 AD |  if_e	jmp	#LR__3551
21190     16 17 E2 F8 | 	getbyte	arg03, local08, #0
21194     08 16 CE F7 | 	test	arg03, #8 wz
21198     16 2B 02 56 |  if_ne	mov	local07, local08
2119c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
211a0     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
211a4     18 00 90 AD |  if_e	jmp	#LR__3552
211a8                 | LR__3551
211a8     FF 24 06 F6 | 	mov	local04, #255
211ac     2C 1E 06 F1 | 	add	local01, #44
211b0     FF FF FF FF 
211b4     0F FF 6B FC | 	wrlong	##-1, local01
211b8     2C 1E 86 F1 | 	sub	local01, #44
211bc     4C 01 90 FD | 	jmp	#LR__3560
211c0                 | LR__3552
211c0     16 2D E2 F8 | 	getbyte	local08, local08, #0
211c4     0F 2C 0E F2 | 	cmp	local08, #15 wz
211c8     C8 00 90 5D |  if_ne	jmp	#LR__3556
211cc     2B 1E 06 F1 | 	add	local01, #43
211d0     0F 2D C2 FA | 	rdbyte	local08, local01
211d4     2B 1E 86 F1 | 	sub	local01, #43
211d8     40 2C CE F7 | 	test	local08, #64 wz
211dc     2C 01 90 5D |  if_ne	jmp	#LR__3559
211e0     14 2F E2 F8 | 	getbyte	local09, local06, #0
211e4     40 2E CE F7 | 	test	local09, #64 wz
211e8     30 00 90 AD |  if_e	jmp	#LR__3553
211ec     1C 1E 06 F1 | 	add	local01, #28
211f0     0F 2F 02 FB | 	rdlong	local09, local01
211f4     0D 2E 06 F1 | 	add	local09, #13
211f8     17 23 C2 FA | 	rdbyte	local03, local09
211fc     14 29 E2 F8 | 	getbyte	local06, local06, #0
21200     BF 28 06 F5 | 	and	local06, #191
21204     14 25 02 F6 | 	mov	local04, local06
21208     0C 1E 86 F1 | 	sub	local01, #12
2120c     0F 2F 02 FB | 	rdlong	local09, local01
21210     1C 1E 06 F1 | 	add	local01, #28
21214     0F 2F 62 FC | 	wrlong	local09, local01
21218     2C 1E 86 F1 | 	sub	local01, #44
2121c                 | LR__3553
2121c     14 31 E2 F8 | 	getbyte	local10, local06, #0
21220     12 2B E2 F8 | 	getbyte	local07, local04, #0
21224     15 31 0A F2 | 	cmp	local10, local07 wz
21228     5C 00 90 5D |  if_ne	jmp	#LR__3554
2122c     11 2D E2 F8 | 	getbyte	local08, local03, #0
21230     1C 1E 06 F1 | 	add	local01, #28
21234     0F 2B 02 FB | 	rdlong	local07, local01
21238     1C 1E 86 F1 | 	sub	local01, #28
2123c     0D 2A 06 F1 | 	add	local07, #13
21240     15 29 C2 FA | 	rdbyte	local06, local07
21244     14 2B E2 F8 | 	getbyte	local07, local06, #0
21248     15 2D 0A F2 | 	cmp	local08, local07 wz
2124c     38 00 90 5D |  if_ne	jmp	#LR__3554
21250     0C 20 06 F1 | 	add	local02, #12
21254     10 13 02 FB | 	rdlong	arg01, local02
21258     0C 20 86 F1 | 	sub	local02, #12
2125c     1C 1E 06 F1 | 	add	local01, #28
21260     0F 33 02 FB | 	rdlong	local11, local01
21264     1C 1E 86 F1 | 	sub	local01, #28
21268     19 15 02 F6 | 	mov	arg02, local11
2126c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
21270     00 FA 4D F2 | 	cmps	result1, #0 wz
21274     12 33 02 56 |  if_ne	mov	local11, local04
21278     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2127c     01 32 86 51 |  if_ne	sub	local11, #1
21280     19 2F 02 56 |  if_ne	mov	local09, local11
21284     04 00 90 5D |  if_ne	jmp	#LR__3555
21288                 | LR__3554
21288     FF 2E 06 F6 | 	mov	local09, #255
2128c                 | LR__3555
2128c     17 25 02 F6 | 	mov	local04, local09
21290     78 00 90 FD | 	jmp	#LR__3559
21294                 | LR__3556
21294     12 2F 02 F6 | 	mov	local09, local04
21298     07 2E 4E F7 | 	zerox	local09, #7 wz
2129c     20 00 90 5D |  if_ne	jmp	#LR__3557
212a0     11 31 E2 F8 | 	getbyte	local10, local03, #0
212a4     1C 1E 06 F1 | 	add	local01, #28
212a8     0F 13 02 FB | 	rdlong	arg01, local01
212ac     1C 1E 86 F1 | 	sub	local01, #28
212b0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
212b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
212b8     FD 30 0A F2 | 	cmp	local10, result1 wz
212bc     60 00 90 AD |  if_e	jmp	#LR__3561
212c0                 | LR__3557
212c0     2B 1E 06 F1 | 	add	local01, #43
212c4     0F 2F C2 FA | 	rdbyte	local09, local01
212c8     2B 1E 86 F1 | 	sub	local01, #43
212cc     01 2E CE F7 | 	test	local09, #1 wz
212d0     24 00 90 5D |  if_ne	jmp	#LR__3558
212d4     1C 1E 06 F1 | 	add	local01, #28
212d8     0F 13 02 FB | 	rdlong	arg01, local01
212dc     04 1E 06 F1 | 	add	local01, #4
212e0     0F 15 02 F6 | 	mov	arg02, local01
212e4     20 1E 86 F1 | 	sub	local01, #32
212e8     0B 16 06 F6 | 	mov	arg03, #11
212ec     88 DA BF FD | 	call	#_fatfs_cc_memcmp
212f0     00 FA 0D F2 | 	cmp	result1, #0 wz
212f4     28 00 90 AD |  if_e	jmp	#LR__3561
212f8                 | LR__3558
212f8     FF 24 06 F6 | 	mov	local04, #255
212fc     2C 1E 06 F1 | 	add	local01, #44
21300     FF FF FF FF 
21304     0F FF 6B FC | 	wrlong	##-1, local01
21308     2C 1E 86 F1 | 	sub	local01, #44
2130c                 | LR__3559
2130c                 | LR__3560
2130c     0F 13 02 F6 | 	mov	arg01, local01
21310     00 14 06 F6 | 	mov	arg02, #0
21314     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
21318     FD 26 0A F6 | 	mov	local05, result1 wz
2131c     04 FE 9F AD |  if_e	jmp	#LR__3550
21320                 | LR__3561
21320                 | ' 
21320                 | ' 	return res;
21320     13 FB 01 F6 | 	mov	result1, local05
21324                 | LR__3562
21324     A7 F0 03 F6 | 	mov	ptra, fp
21328     B2 00 A0 FD | 	call	#popregs_
2132c                 | _fatfs_cc_dir_find_ret
2132c     2D 00 64 FD | 	ret
21330                 | 
21330                 | _fatfs_cc_dir_register
21330     0A 4A 05 F6 | 	mov	COUNT_, #10
21334     A8 00 A0 FD | 	call	#pushregs_
21338     2C F0 07 F1 | 	add	ptra, #44
2133c     04 4E 05 F1 | 	add	fp, #4
21340     A7 12 62 FC | 	wrlong	arg01, fp
21344     09 1F 02 FB | 	rdlong	local01, arg01
21348     08 4E 05 F1 | 	add	fp, #8
2134c     A7 1E 62 FC | 	wrlong	local01, fp
21350     08 4E 85 F1 | 	sub	fp, #8
21354     A7 20 02 FB | 	rdlong	local02, fp
21358     04 4E 85 F1 | 	sub	fp, #4
2135c     2B 20 06 F1 | 	add	local02, #43
21360     10 21 C2 FA | 	rdbyte	local02, local02
21364     A0 20 CE F7 | 	test	local02, #160 wz
21368     06 FA 05 56 |  if_ne	mov	result1, #6
2136c     F8 03 90 5D |  if_ne	jmp	#LR__3585
21370                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
21370     14 4E 05 F1 | 	add	fp, #20
21374     A7 00 68 FC | 	wrlong	#0, fp
21378     14 4E 85 F1 | 	sub	fp, #20
2137c     97 28 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
21380                 | LR__3570
21380     0C 4E 05 F1 | 	add	fp, #12
21384     A7 20 02 FB | 	rdlong	local02, fp
21388     0C 20 06 F1 | 	add	local02, #12
2138c     10 23 02 FB | 	rdlong	local03, local02
21390     08 4E 05 F1 | 	add	fp, #8
21394     A7 24 02 FB | 	rdlong	local04, fp
21398     14 4E 85 F1 | 	sub	fp, #20
2139c     01 24 66 F0 | 	shl	local04, #1
213a0     11 25 02 F1 | 	add	local04, local03
213a4     12 21 EA FA | 	rdword	local02, local04 wz
213a8     24 00 90 AD |  if_e	jmp	#LR__3572
213ac     14 4E 05 F1 | 	add	fp, #20
213b0     A7 26 02 FB | 	rdlong	local05, fp
213b4     13 29 02 F6 | 	mov	local06, local05
213b8     13 2B 02 F6 | 	mov	local07, local05
213bc     15 2D 02 F6 | 	mov	local08, local07
213c0     01 2C 06 F1 | 	add	local08, #1
213c4     A7 2C 62 FC | 	wrlong	local08, fp
213c8     14 4E 85 F1 | 	sub	fp, #20
213cc     B0 FF 9F FD | 	jmp	#LR__3570
213d0                 | LR__3571
213d0                 | LR__3572
213d0     1C 4E 05 F1 | 	add	fp, #28
213d4     A7 12 02 F6 | 	mov	arg01, fp
213d8     18 4E 85 F1 | 	sub	fp, #24
213dc     A7 14 02 FB | 	rdlong	arg02, fp
213e0     04 4E 85 F1 | 	sub	fp, #4
213e4     20 14 06 F1 | 	add	arg02, #32
213e8     0C 16 06 F6 | 	mov	arg03, #12
213ec     F8 73 BF FD | 	call	#__system____builtin_memmove
213f0     27 4E 05 F1 | 	add	fp, #39
213f4     A7 2E C2 FA | 	rdbyte	local09, fp
213f8     27 4E 85 F1 | 	sub	fp, #39
213fc     01 2E CE F7 | 	test	local09, #1 wz
21400     F4 00 90 AD |  if_e	jmp	#LR__3575
21404     04 4E 05 F1 | 	add	fp, #4
21408     A7 30 02 FB | 	rdlong	local10, fp
2140c     2B 30 06 F1 | 	add	local10, #43
21410     18 81 48 FC | 	wrbyte	#64, local10
21414                 | ' 		dp->fn[ 11 ] =  0x40 ;
21414                 | ' 		for (n = 1; n < 100; n++) {
21414     0C 4E 05 F1 | 	add	fp, #12
21418     A7 02 68 FC | 	wrlong	#1, fp
2141c     10 4E 85 F1 | 	sub	fp, #16
21420                 | LR__3573
21420     10 4E 05 F1 | 	add	fp, #16
21424     A7 20 02 FB | 	rdlong	local02, fp
21428     10 4E 85 F1 | 	sub	fp, #16
2142c     64 20 16 F2 | 	cmp	local02, #100 wc
21430     70 00 90 3D |  if_ae	jmp	#LR__3574
21434     04 4E 05 F1 | 	add	fp, #4
21438     A7 12 02 FB | 	rdlong	arg01, fp
2143c     20 12 06 F1 | 	add	arg01, #32
21440     18 4E 05 F1 | 	add	fp, #24
21444     A7 14 02 F6 | 	mov	arg02, fp
21448     10 4E 85 F1 | 	sub	fp, #16
2144c     A7 30 02 FB | 	rdlong	local10, fp
21450     0C 30 06 F1 | 	add	local10, #12
21454     18 17 02 FB | 	rdlong	arg03, local10
21458     04 4E 05 F1 | 	add	fp, #4
2145c     A7 18 02 FB | 	rdlong	arg04, fp
21460     10 4E 85 F1 | 	sub	fp, #16
21464     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
21468     04 4E 05 F1 | 	add	fp, #4
2146c     A7 12 02 FB | 	rdlong	arg01, fp
21470     04 4E 85 F1 | 	sub	fp, #4
21474     70 FC BF FD | 	call	#_fatfs_cc_dir_find
21478     08 4E 05 F1 | 	add	fp, #8
2147c     A7 FA 61 FC | 	wrlong	result1, fp
21480     00 FA 4D F2 | 	cmps	result1, #0 wz
21484     08 4E 85 F1 | 	sub	fp, #8
21488     18 00 90 5D |  if_ne	jmp	#LR__3574
2148c     10 4E 05 F1 | 	add	fp, #16
21490     A7 30 02 FB | 	rdlong	local10, fp
21494     01 30 06 F1 | 	add	local10, #1
21498     A7 30 62 FC | 	wrlong	local10, fp
2149c     10 4E 85 F1 | 	sub	fp, #16
214a0     7C FF 9F FD | 	jmp	#LR__3573
214a4                 | LR__3574
214a4     10 4E 05 F1 | 	add	fp, #16
214a8     A7 30 02 FB | 	rdlong	local10, fp
214ac     10 4E 85 F1 | 	sub	fp, #16
214b0     64 30 0E F2 | 	cmp	local10, #100 wz
214b4     07 FA 05 A6 |  if_e	mov	result1, #7
214b8     AC 02 90 AD |  if_e	jmp	#LR__3585
214bc     08 4E 05 F1 | 	add	fp, #8
214c0     A7 30 02 FB | 	rdlong	local10, fp
214c4     08 4E 85 F1 | 	sub	fp, #8
214c8     04 30 0E F2 | 	cmp	local10, #4 wz
214cc     08 4E 05 51 |  if_ne	add	fp, #8
214d0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
214d4     08 4E 85 51 |  if_ne	sub	fp, #8
214d8     8C 02 90 5D |  if_ne	jmp	#LR__3585
214dc     04 4E 05 F1 | 	add	fp, #4
214e0     A7 30 02 FB | 	rdlong	local10, fp
214e4     23 4E 05 F1 | 	add	fp, #35
214e8     A7 1E C2 FA | 	rdbyte	local01, fp
214ec     27 4E 85 F1 | 	sub	fp, #39
214f0     2B 30 06 F1 | 	add	local10, #43
214f4     18 1F 42 FC | 	wrbyte	local01, local10
214f8                 | LR__3575
214f8     27 4E 05 F1 | 	add	fp, #39
214fc     A7 20 C2 FA | 	rdbyte	local02, fp
21500     27 4E 85 F1 | 	sub	fp, #39
21504     02 20 CE F7 | 	test	local02, #2 wz
21508     20 00 90 AD |  if_e	jmp	#LR__3576
2150c     14 4E 05 F1 | 	add	fp, #20
21510     A7 30 02 FB | 	rdlong	local10, fp
21514     0C 30 06 F1 | 	add	local10, #12
21518     0D 30 16 FD | 	qdiv	local10, #13
2151c     14 4E 85 F1 | 	sub	fp, #20
21520     18 30 62 FD | 	getqx	local10
21524     01 30 06 F1 | 	add	local10, #1
21528     04 00 90 FD | 	jmp	#LR__3577
2152c                 | LR__3576
2152c     01 30 06 F6 | 	mov	local10, #1
21530                 | LR__3577
21530     18 4E 05 F1 | 	add	fp, #24
21534     A7 30 62 FC | 	wrlong	local10, fp
21538     14 4E 85 F1 | 	sub	fp, #20
2153c     A7 12 02 FB | 	rdlong	arg01, fp
21540     18 15 02 F6 | 	mov	arg02, local10
21544     04 4E 85 F1 | 	sub	fp, #4
21548     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2154c     08 4E 05 F1 | 	add	fp, #8
21550     A7 FA 61 FC | 	wrlong	result1, fp
21554     08 4E 85 F1 | 	sub	fp, #8
21558     00 FA 0D F2 | 	cmp	result1, #0 wz
2155c     38 01 90 5D |  if_ne	jmp	#LR__3582
21560     18 4E 05 F1 | 	add	fp, #24
21564     A7 30 02 FB | 	rdlong	local10, fp
21568     01 30 8E F1 | 	sub	local10, #1 wz
2156c     A7 30 62 FC | 	wrlong	local10, fp
21570     18 4E 85 F1 | 	sub	fp, #24
21574     20 01 90 AD |  if_e	jmp	#LR__3582
21578     04 4E 05 F1 | 	add	fp, #4
2157c     A7 30 02 FB | 	rdlong	local10, fp
21580     18 13 02 F6 | 	mov	arg01, local10
21584     14 4E 05 F1 | 	add	fp, #20
21588     A7 18 02 FB | 	rdlong	arg04, fp
2158c     18 4E 85 F1 | 	sub	fp, #24
21590     05 18 66 F0 | 	shl	arg04, #5
21594     10 30 06 F1 | 	add	local10, #16
21598     18 15 02 FB | 	rdlong	arg02, local10
2159c     0C 15 82 F1 | 	sub	arg02, arg04
215a0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
215a4     08 4E 05 F1 | 	add	fp, #8
215a8     A7 FA 61 FC | 	wrlong	result1, fp
215ac     08 4E 85 F1 | 	sub	fp, #8
215b0     00 FA 0D F2 | 	cmp	result1, #0 wz
215b4     E0 00 90 5D |  if_ne	jmp	#LR__3581
215b8     04 4E 05 F1 | 	add	fp, #4
215bc     A7 12 02 FB | 	rdlong	arg01, fp
215c0     04 4E 85 F1 | 	sub	fp, #4
215c4     20 12 06 F1 | 	add	arg01, #32
215c8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
215cc     FD 30 02 F6 | 	mov	local10, result1
215d0     28 4E 05 F1 | 	add	fp, #40
215d4     A7 30 42 FC | 	wrbyte	local10, fp
215d8     28 4E 85 F1 | 	sub	fp, #40
215dc                 | ' 			sum = sum_sfn(dp->fn);
215dc                 | ' 			do {
215dc                 | LR__3578
215dc     0C 4E 05 F1 | 	add	fp, #12
215e0     A7 12 02 FB | 	rdlong	arg01, fp
215e4     08 4E 85 F1 | 	sub	fp, #8
215e8     A7 1E 02 FB | 	rdlong	local01, fp
215ec     04 4E 85 F1 | 	sub	fp, #4
215f0     18 1E 06 F1 | 	add	local01, #24
215f4     0F 15 02 FB | 	rdlong	arg02, local01
215f8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
215fc     08 4E 05 F1 | 	add	fp, #8
21600     A7 FA 61 FC | 	wrlong	result1, fp
21604     00 FA 4D F2 | 	cmps	result1, #0 wz
21608     08 4E 85 F1 | 	sub	fp, #8
2160c     88 00 90 5D |  if_ne	jmp	#LR__3580
21610     0C 4E 05 F1 | 	add	fp, #12
21614     A7 20 02 FB | 	rdlong	local02, fp
21618     0C 20 06 F1 | 	add	local02, #12
2161c     10 13 02 FB | 	rdlong	arg01, local02
21620     08 4E 85 F1 | 	sub	fp, #8
21624     A7 1E 02 FB | 	rdlong	local01, fp
21628     1C 1E 06 F1 | 	add	local01, #28
2162c     0F 15 02 FB | 	rdlong	arg02, local01
21630     14 4E 05 F1 | 	add	fp, #20
21634     A7 16 02 FB | 	rdlong	arg03, fp
21638     10 4E 05 F1 | 	add	fp, #16
2163c     A7 18 C2 FA | 	rdbyte	arg04, fp
21640     28 4E 85 F1 | 	sub	fp, #40
21644     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
21648     0C 4E 05 F1 | 	add	fp, #12
2164c     A7 30 02 FB | 	rdlong	local10, fp
21650     03 30 06 F1 | 	add	local10, #3
21654     18 03 48 FC | 	wrbyte	#1, local10
21658     08 4E 85 F1 | 	sub	fp, #8
2165c     A7 12 02 FB | 	rdlong	arg01, fp
21660     04 4E 85 F1 | 	sub	fp, #4
21664     00 14 06 F6 | 	mov	arg02, #0
21668     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2166c     08 4E 05 F1 | 	add	fp, #8
21670     A7 FA 61 FC | 	wrlong	result1, fp
21674     00 FA 4D F2 | 	cmps	result1, #0 wz
21678     08 4E 85 F1 | 	sub	fp, #8
2167c     18 00 90 5D |  if_ne	jmp	#LR__3579
21680     18 4E 05 F1 | 	add	fp, #24
21684     A7 30 02 FB | 	rdlong	local10, fp
21688     01 30 8E F1 | 	sub	local10, #1 wz
2168c     A7 30 62 FC | 	wrlong	local10, fp
21690     18 4E 85 F1 | 	sub	fp, #24
21694     44 FF 9F 5D |  if_ne	jmp	#LR__3578
21698                 | LR__3579
21698                 | LR__3580
21698                 | LR__3581
21698                 | LR__3582
21698     08 4E 05 F1 | 	add	fp, #8
2169c     A7 30 0A FB | 	rdlong	local10, fp wz
216a0     08 4E 85 F1 | 	sub	fp, #8
216a4     B4 00 90 5D |  if_ne	jmp	#LR__3584
216a8     0C 4E 05 F1 | 	add	fp, #12
216ac     A7 12 02 FB | 	rdlong	arg01, fp
216b0     08 4E 85 F1 | 	sub	fp, #8
216b4     A7 1E 02 FB | 	rdlong	local01, fp
216b8     04 4E 85 F1 | 	sub	fp, #4
216bc     18 1E 06 F1 | 	add	local01, #24
216c0     0F 15 02 FB | 	rdlong	arg02, local01
216c4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
216c8     08 4E 05 F1 | 	add	fp, #8
216cc     A7 FA 61 FC | 	wrlong	result1, fp
216d0     08 4E 85 F1 | 	sub	fp, #8
216d4     00 FA 0D F2 | 	cmp	result1, #0 wz
216d8     80 00 90 5D |  if_ne	jmp	#LR__3583
216dc     04 4E 05 F1 | 	add	fp, #4
216e0     A7 20 02 FB | 	rdlong	local02, fp
216e4     04 4E 85 F1 | 	sub	fp, #4
216e8     1C 20 06 F1 | 	add	local02, #28
216ec     10 13 02 FB | 	rdlong	arg01, local02
216f0     00 14 06 F6 | 	mov	arg02, #0
216f4     20 16 06 F6 | 	mov	arg03, #32
216f8     98 00 A0 FD | 	call	#\builtin_bytefill_
216fc     04 4E 05 F1 | 	add	fp, #4
21700     A7 14 02 FB | 	rdlong	arg02, fp
21704     0A 1F 02 F6 | 	mov	local01, arg02
21708     1C 1E 06 F1 | 	add	local01, #28
2170c     0F 13 02 FB | 	rdlong	arg01, local01
21710     04 4E 85 F1 | 	sub	fp, #4
21714     20 14 06 F1 | 	add	arg02, #32
21718     0B 16 06 F6 | 	mov	arg03, #11
2171c     C8 70 BF FD | 	call	#__system____builtin_memmove
21720     04 4E 05 F1 | 	add	fp, #4
21724     A7 2E 02 FB | 	rdlong	local09, fp
21728     17 31 02 F6 | 	mov	local10, local09
2172c     1C 30 06 F1 | 	add	local10, #28
21730     18 1F 02 FB | 	rdlong	local01, local10
21734     2B 2E 06 F1 | 	add	local09, #43
21738     17 31 C2 FA | 	rdbyte	local10, local09
2173c     18 30 06 F5 | 	and	local10, #24
21740     0C 1E 06 F1 | 	add	local01, #12
21744     0F 31 42 FC | 	wrbyte	local10, local01
21748     08 4E 05 F1 | 	add	fp, #8
2174c     A7 30 02 FB | 	rdlong	local10, fp
21750     0C 4E 85 F1 | 	sub	fp, #12
21754     03 30 06 F1 | 	add	local10, #3
21758     18 03 48 FC | 	wrbyte	#1, local10
2175c                 | LR__3583
2175c                 | LR__3584
2175c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2175c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2175c                 | ' 
2175c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2175c                 | ' 
2175c                 | ' 			fs->wflag = 1;
2175c                 | ' 		}
2175c                 | ' 	}
2175c                 | ' 
2175c                 | ' 	return res;
2175c     08 4E 05 F1 | 	add	fp, #8
21760     A7 FA 01 FB | 	rdlong	result1, fp
21764     08 4E 85 F1 | 	sub	fp, #8
21768                 | LR__3585
21768     A7 F0 03 F6 | 	mov	ptra, fp
2176c     B2 00 A0 FD | 	call	#popregs_
21770                 | _fatfs_cc_dir_register_ret
21770     2D 00 64 FD | 	ret
21774                 | 
21774                 | _fatfs_cc_dir_remove
21774     05 4A 05 F6 | 	mov	COUNT_, #5
21778     A8 00 A0 FD | 	call	#pushregs_
2177c     09 1F 02 F6 | 	mov	local01, arg01
21780     0F 21 02 FB | 	rdlong	local02, local01
21784     10 1E 06 F1 | 	add	local01, #16
21788     0F 23 02 FB | 	rdlong	local03, local01
2178c     1C 1E 06 F1 | 	add	local01, #28
21790     0F 15 02 FB | 	rdlong	arg02, local01
21794     2C 1E 86 F1 | 	sub	local01, #44
21798     FF FF 7F FF 
2179c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
217a0     00 24 06 A6 |  if_e	mov	local04, #0
217a4     18 00 90 AD |  if_e	jmp	#LR__3590
217a8     0F 13 02 F6 | 	mov	arg01, local01
217ac     2C 1E 06 F1 | 	add	local01, #44
217b0     0F 15 02 FB | 	rdlong	arg02, local01
217b4     2C 1E 86 F1 | 	sub	local01, #44
217b8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
217bc     FD 24 02 F6 | 	mov	local04, result1
217c0                 | LR__3590
217c0     12 27 0A F6 | 	mov	local05, local04 wz
217c4     64 00 90 5D |  if_ne	jmp	#LR__3593
217c8                 | ' 		do {
217c8                 | LR__3591
217c8     18 1E 06 F1 | 	add	local01, #24
217cc     0F 15 02 FB | 	rdlong	arg02, local01
217d0     18 1E 86 F1 | 	sub	local01, #24
217d4     10 13 02 F6 | 	mov	arg01, local02
217d8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
217dc     FD 26 0A F6 | 	mov	local05, result1 wz
217e0     40 00 90 5D |  if_ne	jmp	#LR__3592
217e4     1C 1E 06 F1 | 	add	local01, #28
217e8     0F 25 02 FB | 	rdlong	local04, local01
217ec     12 CB 49 FC | 	wrbyte	#229, local04
217f0     03 20 06 F1 | 	add	local02, #3
217f4     10 03 48 FC | 	wrbyte	#1, local02
217f8     03 20 86 F1 | 	sub	local02, #3
217fc     0C 1E 86 F1 | 	sub	local01, #12
21800     0F 25 02 FB | 	rdlong	local04, local01
21804     10 1E 86 F1 | 	sub	local01, #16
21808     11 25 12 F2 | 	cmp	local04, local03 wc
2180c     14 00 90 3D |  if_ae	jmp	#LR__3592
21810     0F 13 02 F6 | 	mov	arg01, local01
21814     00 14 06 F6 | 	mov	arg02, #0
21818     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2181c     FD 26 0A F6 | 	mov	local05, result1 wz
21820     A4 FF 9F AD |  if_e	jmp	#LR__3591
21824                 | LR__3592
21824     04 26 0E F2 | 	cmp	local05, #4 wz
21828     02 26 06 A6 |  if_e	mov	local05, #2
2182c                 | LR__3593
2182c                 | ' 	}
2182c                 | ' #line 2590 "ff.c"
2182c                 | ' 	return res;
2182c     13 FB 01 F6 | 	mov	result1, local05
21830     A7 F0 03 F6 | 	mov	ptra, fp
21834     B2 00 A0 FD | 	call	#popregs_
21838                 | _fatfs_cc_dir_remove_ret
21838     2D 00 64 FD | 	ret
2183c                 | 
2183c                 | _fatfs_cc_get_fileinfo
2183c     0F 4A 05 F6 | 	mov	COUNT_, #15
21840     A8 00 A0 FD | 	call	#pushregs_
21844     09 1F 02 F6 | 	mov	local01, arg01
21848     0A 21 02 F6 | 	mov	local02, arg02
2184c     0F 23 02 FB | 	rdlong	local03, local01
21850     1C 20 06 F1 | 	add	local02, #28
21854     10 01 48 FC | 	wrbyte	#0, local02
21858     1C 20 86 F1 | 	sub	local02, #28
2185c     18 1E 06 F1 | 	add	local01, #24
21860     0F 25 0A FB | 	rdlong	local04, local01 wz
21864     18 1E 86 F1 | 	sub	local01, #24
21868     90 03 90 AD |  if_e	jmp	#LR__3614
2186c     2C 1E 06 F1 | 	add	local01, #44
21870     0F 25 02 FB | 	rdlong	local04, local01
21874     2C 1E 86 F1 | 	sub	local01, #44
21878     FF FF 7F FF 
2187c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
21880     D8 00 90 AD |  if_e	jmp	#LR__3603
21884     00 26 06 F6 | 	mov	local05, #0
21888     00 28 06 F6 | 	mov	local06, #0
2188c     00 2A 06 F6 | 	mov	local07, #0
21890                 | ' 			si = di = 0;
21890                 | ' 			hs = 0;
21890                 | ' 			while (fs->lfnbuf[si] != 0) {
21890                 | LR__3600
21890     0C 22 06 F1 | 	add	local03, #12
21894     11 25 02 FB | 	rdlong	local04, local03
21898     0C 22 86 F1 | 	sub	local03, #12
2189c     14 2D 02 F6 | 	mov	local08, local06
218a0     01 2C 66 F0 | 	shl	local08, #1
218a4     12 2D 02 F1 | 	add	local08, local04
218a8     16 25 EA FA | 	rdword	local04, local08 wz
218ac     90 00 90 AD |  if_e	jmp	#LR__3602
218b0     0C 22 06 F1 | 	add	local03, #12
218b4     11 2F 02 FB | 	rdlong	local09, local03
218b8     0C 22 86 F1 | 	sub	local03, #12
218bc     14 31 02 F6 | 	mov	local10, local06
218c0     01 30 66 F0 | 	shl	local10, #1
218c4     17 31 02 F1 | 	add	local10, local09
218c8     18 33 E2 FA | 	rdword	local11, local10
218cc     15 25 02 F6 | 	mov	local04, local07
218d0     0F 24 4E F7 | 	zerox	local04, #15 wz
218d4     01 28 06 F1 | 	add	local06, #1
218d8     24 00 90 5D |  if_ne	jmp	#LR__3601
218dc     19 35 32 F9 | 	getword	local12, local11, #0
218e0     6C 00 00 FF 
218e4     00 34 16 F2 | 	cmp	local12, ##55296 wc
218e8     14 00 90 CD |  if_b	jmp	#LR__3601
218ec     19 37 32 F9 | 	getword	local13, local11, #0
218f0     70 00 00 FF 
218f4     00 36 16 F2 | 	cmp	local13, ##57344 wc
218f8     19 2B 02 C6 |  if_b	mov	local07, local11
218fc                 | ' 					hs = wc; continue;
218fc     90 FF 9F CD |  if_b	jmp	#LR__3600
21900                 | LR__3601
21900     15 13 32 F9 | 	getword	arg01, local07, #0
21904     10 12 66 F0 | 	shl	arg01, #16
21908     19 33 32 F9 | 	getword	local11, local11, #0
2190c     19 13 42 F5 | 	or	arg01, local11
21910     13 15 02 F6 | 	mov	arg02, local05
21914     1C 20 06 F1 | 	add	local02, #28
21918     10 15 02 F1 | 	add	arg02, local02
2191c     FF 16 06 F6 | 	mov	arg03, #255
21920     13 17 82 F1 | 	sub	arg03, local05
21924     1C 20 86 F1 | 	sub	local02, #28
21928     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2192c     FD 38 0A F6 | 	mov	local14, result1 wz
21930     00 26 06 A6 |  if_e	mov	local05, #0
21934     1C 27 02 51 |  if_ne	add	local05, local14
21938     00 2A 06 56 |  if_ne	mov	local07, #0
2193c     50 FF 9F 5D |  if_ne	jmp	#LR__3600
21940                 | LR__3602
21940     15 25 02 F6 | 	mov	local04, local07
21944     0F 24 4E F7 | 	zerox	local04, #15 wz
21948     00 26 06 56 |  if_ne	mov	local05, #0
2194c     1C 20 06 F1 | 	add	local02, #28
21950     10 27 02 F1 | 	add	local05, local02
21954     13 01 48 FC | 	wrbyte	#0, local05
21958     1C 20 86 F1 | 	sub	local02, #28
2195c                 | LR__3603
2195c     00 26 06 F6 | 	mov	local05, #0
21960     00 28 06 F6 | 	mov	local06, #0
21964                 | ' 			fno->fname[di] = 0;
21964                 | ' 		}
21964                 | ' 	}
21964                 | ' 
21964                 | ' 	si = di = 0;
21964                 | ' 	while (si < 11) {
21964                 | LR__3604
21964     0B 28 16 F2 | 	cmp	local06, #11 wc
21968     20 01 90 3D |  if_ae	jmp	#LR__3607
2196c     1C 1E 06 F1 | 	add	local01, #28
21970     0F 2F 02 FB | 	rdlong	local09, local01
21974     1C 1E 86 F1 | 	sub	local01, #28
21978     14 31 02 F6 | 	mov	local10, local06
2197c     17 31 02 F1 | 	add	local10, local09
21980     18 33 C2 FA | 	rdbyte	local11, local10
21984     19 25 32 F9 | 	getword	local04, local11, #0
21988     20 24 0E F2 | 	cmp	local04, #32 wz
2198c     01 28 06 F1 | 	add	local06, #1
21990     D0 FF 9F AD |  if_e	jmp	#LR__3604
21994     19 25 32 F9 | 	getword	local04, local11, #0
21998     05 24 0E F2 | 	cmp	local04, #5 wz
2199c     E5 32 06 A6 |  if_e	mov	local11, #229
219a0     09 28 0E F2 | 	cmp	local06, #9 wz
219a4     20 00 90 5D |  if_ne	jmp	#LR__3605
219a8     0C 26 16 F2 | 	cmp	local05, #12 wc
219ac     18 00 90 3D |  if_ae	jmp	#LR__3605
219b0     13 37 02 F6 | 	mov	local13, local05
219b4     0C 20 06 F1 | 	add	local02, #12
219b8     10 37 02 F1 | 	add	local13, local02
219bc     1B 5D 48 FC | 	wrbyte	#46, local13
219c0     01 26 06 F1 | 	add	local05, #1
219c4     0C 20 86 F1 | 	sub	local02, #12
219c8                 | LR__3605
219c8     19 13 32 F9 | 	getword	arg01, local11, #0
219cc     07 12 4E F7 | 	zerox	arg01, #7 wz
219d0     00 FA 05 56 |  if_ne	mov	result1, #0
219d4                 | ' 
219d4                 | ' 	return 0;
219d4     00 FA 05 A6 |  if_e	mov	result1, #0
219d8     00 FA 0D F2 | 	cmp	result1, #0 wz
219dc     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
219e0     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
219e4     50 00 90 AD |  if_e	jmp	#LR__3606
219e8     1C 1E 06 F1 | 	add	local01, #28
219ec     0F 31 02 FB | 	rdlong	local10, local01
219f0     1C 1E 86 F1 | 	sub	local01, #28
219f4     14 2D 02 F6 | 	mov	local08, local06
219f8     18 2D 02 F1 | 	add	local08, local10
219fc     16 13 CA FA | 	rdbyte	arg01, local08 wz
21a00     00 FA 05 56 |  if_ne	mov	result1, #0
21a04                 | ' 
21a04                 | ' 	return 0;
21a04     00 FA 05 A6 |  if_e	mov	result1, #0
21a08     00 FA 0D F2 | 	cmp	result1, #0 wz
21a0c     28 00 90 AD |  if_e	jmp	#LR__3606
21a10     19 33 32 F9 | 	getword	local11, local11, #0
21a14     08 32 66 F0 | 	shl	local11, #8
21a18     1C 1E 06 F1 | 	add	local01, #28
21a1c     0F 39 02 FB | 	rdlong	local14, local01
21a20     1C 1E 86 F1 | 	sub	local01, #28
21a24     14 2F 02 F6 | 	mov	local09, local06
21a28     1C 2F 02 F1 | 	add	local09, local14
21a2c     17 35 C2 FA | 	rdbyte	local12, local09
21a30     1A 33 42 F5 | 	or	local11, local12
21a34     01 28 06 F1 | 	add	local06, #1
21a38                 | LR__3606
21a38     19 13 02 F6 | 	mov	arg01, local11
21a3c     01 00 00 FF 
21a40     52 15 06 F6 | 	mov	arg02, ##850
21a44     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
21a48     FD 32 02 F6 | 	mov	local11, result1
21a4c     19 25 02 F6 | 	mov	local04, local11
21a50     0F 24 4E F7 | 	zerox	local04, #15 wz
21a54     00 26 06 A6 |  if_e	mov	local05, #0
21a58     30 00 90 AD |  if_e	jmp	#LR__3607
21a5c     19 13 32 F9 | 	getword	arg01, local11, #0
21a60     13 15 02 F6 | 	mov	arg02, local05
21a64     0C 20 06 F1 | 	add	local02, #12
21a68     10 15 02 F1 | 	add	arg02, local02
21a6c     0C 16 06 F6 | 	mov	arg03, #12
21a70     13 17 82 F1 | 	sub	arg03, local05
21a74     0C 20 86 F1 | 	sub	local02, #12
21a78     EC DF BF FD | 	call	#_fatfs_cc_put_utf
21a7c     FD 38 0A F6 | 	mov	local14, result1 wz
21a80     00 26 06 A6 |  if_e	mov	local05, #0
21a84     1C 27 02 51 |  if_ne	add	local05, local14
21a88     D8 FE 9F 5D |  if_ne	jmp	#LR__3604
21a8c                 | LR__3607
21a8c     13 25 02 F6 | 	mov	local04, local05
21a90     0C 20 06 F1 | 	add	local02, #12
21a94     10 25 02 F1 | 	add	local04, local02
21a98     12 01 48 FC | 	wrbyte	#0, local04
21a9c     10 20 06 F1 | 	add	local02, #16
21aa0     10 25 CA FA | 	rdbyte	local04, local02 wz
21aa4     1C 20 86 F1 | 	sub	local02, #28
21aa8     F8 00 90 5D |  if_ne	jmp	#LR__3613
21aac     00 26 0E F2 | 	cmp	local05, #0 wz
21ab0     1C 00 90 5D |  if_ne	jmp	#LR__3608
21ab4     13 37 02 F6 | 	mov	local13, local05
21ab8     1C 20 06 F1 | 	add	local02, #28
21abc     10 37 02 F1 | 	add	local13, local02
21ac0     1B 7F 48 FC | 	wrbyte	#63, local13
21ac4     01 26 06 F1 | 	add	local05, #1
21ac8     1C 20 86 F1 | 	sub	local02, #28
21acc     A4 00 90 FD | 	jmp	#LR__3612
21ad0                 | LR__3608
21ad0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
21ad0     00 26 06 F6 | 	mov	local05, #0
21ad4     00 28 06 F6 | 	mov	local06, #0
21ad8     08 3A 06 F6 | 	mov	local15, #8
21adc                 | LR__3609
21adc     14 25 02 F6 | 	mov	local04, local06
21ae0     0C 20 06 F1 | 	add	local02, #12
21ae4     10 25 02 F1 | 	add	local04, local02
21ae8     12 37 CA FA | 	rdbyte	local13, local04 wz
21aec     0C 20 86 F1 | 	sub	local02, #12
21af0     80 00 90 AD |  if_e	jmp	#LR__3611
21af4     14 2D 02 F6 | 	mov	local08, local06
21af8     0C 20 06 F1 | 	add	local02, #12
21afc     10 2D 02 F1 | 	add	local08, local02
21b00     16 33 C2 FA | 	rdbyte	local11, local08
21b04     19 39 32 F9 | 	getword	local14, local11, #0
21b08     2E 38 0E F2 | 	cmp	local14, #46 wz
21b0c     0C 20 86 F1 | 	sub	local02, #12
21b10     10 3A 06 A6 |  if_e	mov	local15, #16
21b14     19 39 32 F9 | 	getword	local14, local11, #0
21b18     41 38 16 F2 | 	cmp	local14, #65 wc
21b1c     30 00 90 CD |  if_b	jmp	#LR__3610
21b20     19 2D 32 F9 | 	getword	local08, local11, #0
21b24     5B 2C 16 F2 | 	cmp	local08, #91 wc
21b28     24 00 90 3D |  if_ae	jmp	#LR__3610
21b2c     1C 1E 06 F1 | 	add	local01, #28
21b30     0F 2F 02 FB | 	rdlong	local09, local01
21b34     1C 1E 86 F1 | 	sub	local01, #28
21b38     0C 2E 06 F1 | 	add	local09, #12
21b3c     17 31 C2 FA | 	rdbyte	local10, local09
21b40     1D 39 E2 F8 | 	getbyte	local14, local15, #0
21b44     1C 31 CA F7 | 	test	local10, local14 wz
21b48     19 33 32 59 |  if_ne	getword	local11, local11, #0
21b4c     20 32 06 51 |  if_ne	add	local11, #32
21b50                 | LR__3610
21b50     13 39 02 F6 | 	mov	local14, local05
21b54     1C 20 06 F1 | 	add	local02, #28
21b58     10 39 02 F1 | 	add	local14, local02
21b5c     19 33 32 F9 | 	getword	local11, local11, #0
21b60     1C 33 42 FC | 	wrbyte	local11, local14
21b64     01 28 06 F1 | 	add	local06, #1
21b68     01 26 06 F1 | 	add	local05, #1
21b6c     1C 20 86 F1 | 	sub	local02, #28
21b70     68 FF 9F FD | 	jmp	#LR__3609
21b74                 | LR__3611
21b74                 | LR__3612
21b74     1C 20 06 F1 | 	add	local02, #28
21b78     10 27 02 F1 | 	add	local05, local02
21b7c     13 01 48 FC | 	wrbyte	#0, local05
21b80     1C 1E 06 F1 | 	add	local01, #28
21b84     0F 25 02 FB | 	rdlong	local04, local01
21b88     1C 1E 86 F1 | 	sub	local01, #28
21b8c     0C 24 06 F1 | 	add	local04, #12
21b90     12 37 CA FA | 	rdbyte	local13, local04 wz
21b94     1C 20 86 F1 | 	sub	local02, #28
21b98     0C 20 06 A1 |  if_e	add	local02, #12
21b9c     10 01 48 AC |  if_e	wrbyte	#0, local02
21ba0     0C 20 86 A1 |  if_e	sub	local02, #12
21ba4                 | LR__3613
21ba4     1C 1E 06 F1 | 	add	local01, #28
21ba8     0F 35 02 FB | 	rdlong	local12, local01
21bac     0B 34 06 F1 | 	add	local12, #11
21bb0     1A 25 C2 FA | 	rdbyte	local04, local12
21bb4     3F 24 06 F5 | 	and	local04, #63
21bb8     08 20 06 F1 | 	add	local02, #8
21bbc     10 25 42 FC | 	wrbyte	local04, local02
21bc0     08 20 86 F1 | 	sub	local02, #8
21bc4     0F 13 02 FB | 	rdlong	arg01, local01
21bc8     1C 12 06 F1 | 	add	arg01, #28
21bcc                 | ' {
21bcc                 | ' 
21bcc                 | ' 	return *((DWORD*)ptr);
21bcc     09 FB 01 FB | 	rdlong	result1, arg01
21bd0     10 FB 61 FC | 	wrlong	result1, local02
21bd4     0F 13 02 FB | 	rdlong	arg01, local01
21bd8     16 12 06 F1 | 	add	arg01, #22
21bdc                 | ' {
21bdc                 | ' 
21bdc                 | ' 	return *((WORD*)ptr);
21bdc     09 FB E1 FA | 	rdword	result1, arg01
21be0     06 20 06 F1 | 	add	local02, #6
21be4     10 FB 51 FC | 	wrword	result1, local02
21be8     0F 13 02 FB | 	rdlong	arg01, local01
21bec     18 12 06 F1 | 	add	arg01, #24
21bf0                 | ' {
21bf0                 | ' 
21bf0                 | ' 	return *((WORD*)ptr);
21bf0     09 FB E1 FA | 	rdword	result1, arg01
21bf4     02 20 86 F1 | 	sub	local02, #2
21bf8     10 FB 51 FC | 	wrword	result1, local02
21bfc                 | LR__3614
21bfc     A7 F0 03 F6 | 	mov	ptra, fp
21c00     B2 00 A0 FD | 	call	#popregs_
21c04                 | _fatfs_cc_get_fileinfo_ret
21c04     2D 00 64 FD | 	ret
21c08                 | 
21c08                 | _fatfs_cc_create_name
21c08     0D 4A 05 F6 | 	mov	COUNT_, #13
21c0c     A8 00 A0 FD | 	call	#pushregs_
21c10     34 F0 07 F1 | 	add	ptra, #52
21c14     04 4E 05 F1 | 	add	fp, #4
21c18     A7 12 62 FC | 	wrlong	arg01, fp
21c1c     04 4E 05 F1 | 	add	fp, #4
21c20     A7 14 62 FC | 	wrlong	arg02, fp
21c24     0A FB 01 FB | 	rdlong	result1, arg02
21c28     28 4E 05 F1 | 	add	fp, #40
21c2c     A7 FA 61 FC | 	wrlong	result1, fp
21c30     2C 4E 85 F1 | 	sub	fp, #44
21c34     A7 FA 01 FB | 	rdlong	result1, fp
21c38     FD 1E 02 FB | 	rdlong	local01, result1
21c3c     0C 1E 06 F1 | 	add	local01, #12
21c40     0F 21 02 FB | 	rdlong	local02, local01
21c44     14 4E 05 F1 | 	add	fp, #20
21c48     A7 20 62 FC | 	wrlong	local02, fp
21c4c     14 4E 05 F1 | 	add	fp, #20
21c50     A7 00 68 FC | 	wrlong	#0, fp
21c54     2C 4E 85 F1 | 	sub	fp, #44
21c58                 | ' 
21c58                 | ' 
21c58                 | ' 
21c58                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
21c58                 | ' 	for (;;) {
21c58                 | LR__3620
21c58     30 4E 05 F1 | 	add	fp, #48
21c5c     A7 12 02 F6 | 	mov	arg01, fp
21c60     30 4E 85 F1 | 	sub	fp, #48
21c64     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
21c68     1C 4E 05 F1 | 	add	fp, #28
21c6c     A7 FA 61 FC | 	wrlong	result1, fp
21c70     1C 4E 85 F1 | 	sub	fp, #28
21c74     FF FF 7F FF 
21c78     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21c7c     06 FA 05 A6 |  if_e	mov	result1, #6
21c80     74 08 90 AD |  if_e	jmp	#LR__3660
21c84     1C 4E 05 F1 | 	add	fp, #28
21c88     A7 1E 02 FB | 	rdlong	local01, fp
21c8c     1C 4E 85 F1 | 	sub	fp, #28
21c90     80 00 00 FF 
21c94     00 1E 16 F2 | 	cmp	local01, ##65536 wc
21c98     3C 00 90 CD |  if_b	jmp	#LR__3621
21c9c     18 4E 05 F1 | 	add	fp, #24
21ca0     A7 22 02 FB | 	rdlong	local03, fp
21ca4     14 4E 05 F1 | 	add	fp, #20
21ca8     A7 1E 02 FB | 	rdlong	local01, fp
21cac     0F 25 02 F6 | 	mov	local04, local01
21cb0     01 24 06 F1 | 	add	local04, #1
21cb4     A7 24 62 FC | 	wrlong	local04, fp
21cb8     01 1E 66 F0 | 	shl	local01, #1
21cbc     11 1F 02 F1 | 	add	local01, local03
21cc0     10 4E 85 F1 | 	sub	fp, #16
21cc4     A7 26 02 FB | 	rdlong	local05, fp
21cc8     1C 4E 85 F1 | 	sub	fp, #28
21ccc     13 29 02 F6 | 	mov	local06, local05
21cd0     10 28 46 F0 | 	shr	local06, #16
21cd4     0F 29 52 FC | 	wrword	local06, local01
21cd8                 | LR__3621
21cd8     1C 4E 05 F1 | 	add	fp, #28
21cdc     A7 1E 02 FB | 	rdlong	local01, fp
21ce0     08 4E 85 F1 | 	sub	fp, #8
21ce4     A7 1E 52 FC | 	wrword	local01, fp
21ce8     A7 1E E2 FA | 	rdword	local01, fp
21cec     14 4E 85 F1 | 	sub	fp, #20
21cf0     20 1E 16 F2 | 	cmp	local01, #32 wc
21cf4     B0 00 90 CD |  if_b	jmp	#LR__3623
21cf8     14 4E 05 F1 | 	add	fp, #20
21cfc     A7 1E E2 FA | 	rdword	local01, fp
21d00     14 4E 85 F1 | 	sub	fp, #20
21d04     2F 1E 0E F2 | 	cmp	local01, #47 wz
21d08     14 4E 05 51 |  if_ne	add	fp, #20
21d0c     A7 24 E2 5A |  if_ne	rdword	local04, fp
21d10     14 4E 85 51 |  if_ne	sub	fp, #20
21d14     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
21d18     8C 00 90 AD |  if_e	jmp	#LR__3623
21d1c     14 4E 05 F1 | 	add	fp, #20
21d20     A7 12 E2 FA | 	rdword	arg01, fp
21d24     14 4E 85 F1 | 	sub	fp, #20
21d28     80 12 16 F2 | 	cmp	arg01, #128 wc
21d2c     24 00 90 3D |  if_ae	jmp	#LR__3622
21d30     3E 01 00 FF 
21d34     60 12 06 F6 | 	mov	arg01, ##@LR__4282
21d38     14 4E 05 F1 | 	add	fp, #20
21d3c     A7 14 E2 FA | 	rdword	arg02, fp
21d40     14 4E 85 F1 | 	sub	fp, #20
21d44     FC D0 BF FD | 	call	#_fatfs_cc_strchr
21d48     00 FA 0D F2 | 	cmp	result1, #0 wz
21d4c     06 FA 05 56 |  if_ne	mov	result1, #6
21d50     A4 07 90 5D |  if_ne	jmp	#LR__3660
21d54                 | LR__3622
21d54     2C 4E 05 F1 | 	add	fp, #44
21d58     A7 28 02 FB | 	rdlong	local06, fp
21d5c     2C 4E 85 F1 | 	sub	fp, #44
21d60     FF 28 16 F2 | 	cmp	local06, #255 wc
21d64     06 FA 05 36 |  if_ae	mov	result1, #6
21d68     8C 07 90 3D |  if_ae	jmp	#LR__3660
21d6c     18 4E 05 F1 | 	add	fp, #24
21d70     A7 22 02 FB | 	rdlong	local03, fp
21d74     14 4E 05 F1 | 	add	fp, #20
21d78     A7 20 02 FB | 	rdlong	local02, fp
21d7c     10 25 02 F6 | 	mov	local04, local02
21d80     01 24 06 F1 | 	add	local04, #1
21d84     A7 24 62 FC | 	wrlong	local04, fp
21d88     10 1F 02 F6 | 	mov	local01, local02
21d8c     01 1E 66 F0 | 	shl	local01, #1
21d90     11 1F 02 F1 | 	add	local01, local03
21d94     18 4E 85 F1 | 	sub	fp, #24
21d98     A7 28 E2 FA | 	rdword	local06, fp
21d9c     14 4E 85 F1 | 	sub	fp, #20
21da0     0F 29 52 FC | 	wrword	local06, local01
21da4     B0 FE 9F FD | 	jmp	#LR__3620
21da8                 | LR__3623
21da8     14 4E 05 F1 | 	add	fp, #20
21dac     A7 2A E2 FA | 	rdword	local07, fp
21db0     14 4E 85 F1 | 	sub	fp, #20
21db4     20 2A 16 F2 | 	cmp	local07, #32 wc
21db8     10 4E 05 C1 |  if_b	add	fp, #16
21dbc     A7 08 48 CC |  if_b	wrbyte	#4, fp
21dc0     10 4E 85 C1 |  if_b	sub	fp, #16
21dc4     74 00 90 CD |  if_b	jmp	#LR__3628
21dc8     97 24 48 FB | 	callpa	#(@LR__3626-@LR__3624)>>2,fcache_load_ptr_
21dcc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
21dcc                 | LR__3624
21dcc     30 4E 05 F1 | 	add	fp, #48
21dd0     A7 24 02 FB | 	rdlong	local04, fp
21dd4     30 4E 85 F1 | 	sub	fp, #48
21dd8     12 2B C2 FA | 	rdbyte	local07, local04
21ddc     2F 2A 0E F2 | 	cmp	local07, #47 wz
21de0     18 00 90 AD |  if_e	jmp	#LR__3625
21de4     30 4E 05 F1 | 	add	fp, #48
21de8     A7 24 02 FB | 	rdlong	local04, fp
21dec     30 4E 85 F1 | 	sub	fp, #48
21df0     12 21 C2 FA | 	rdbyte	local02, local04
21df4     5C 20 0E F2 | 	cmp	local02, #92 wz
21df8     18 00 90 5D |  if_ne	jmp	#LR__3627
21dfc                 | LR__3625
21dfc     30 4E 05 F1 | 	add	fp, #48
21e00     A7 1E 02 FB | 	rdlong	local01, fp
21e04     01 1E 06 F1 | 	add	local01, #1
21e08     A7 1E 62 FC | 	wrlong	local01, fp
21e0c     30 4E 85 F1 | 	sub	fp, #48
21e10     B8 FF 9F FD | 	jmp	#LR__3624
21e14                 | LR__3626
21e14                 | LR__3627
21e14     10 4E 05 F1 | 	add	fp, #16
21e18     A7 00 48 FC | 	wrbyte	#0, fp
21e1c     20 4E 05 F1 | 	add	fp, #32
21e20     A7 28 02 FB | 	rdlong	local06, fp
21e24     30 4E 85 F1 | 	sub	fp, #48
21e28     14 2B C2 FA | 	rdbyte	local07, local06
21e2c     20 2A 16 F2 | 	cmp	local07, #32 wc
21e30     10 4E 05 C1 |  if_b	add	fp, #16
21e34     A7 08 48 CC |  if_b	wrbyte	#4, fp
21e38     10 4E 85 C1 |  if_b	sub	fp, #16
21e3c                 | LR__3628
21e3c     08 4E 05 F1 | 	add	fp, #8
21e40     A7 2A 02 FB | 	rdlong	local07, fp
21e44     28 4E 05 F1 | 	add	fp, #40
21e48     A7 1E 02 FB | 	rdlong	local01, fp
21e4c     30 4E 85 F1 | 	sub	fp, #48
21e50     15 1F 62 FC | 	wrlong	local01, local07
21e54     97 38 48 FB | 	callpa	#(@LR__3630-@LR__3629)>>2,fcache_load_ptr_
21e58                 | ' 	}
21e58                 | ' 	*path = p;
21e58                 | ' #line 2862 "ff.c"
21e58                 | ' 	while (di) {
21e58                 | LR__3629
21e58     2C 4E 05 F1 | 	add	fp, #44
21e5c     A7 2A 0A FB | 	rdlong	local07, fp wz
21e60     2C 4E 85 F1 | 	sub	fp, #44
21e64     60 00 90 AD |  if_e	jmp	#LR__3631
21e68     18 4E 05 F1 | 	add	fp, #24
21e6c     A7 28 02 FB | 	rdlong	local06, fp
21e70     14 4E 05 F1 | 	add	fp, #20
21e74     A7 24 02 FB | 	rdlong	local04, fp
21e78     01 24 86 F1 | 	sub	local04, #1
21e7c     01 24 66 F0 | 	shl	local04, #1
21e80     14 25 02 F1 | 	add	local04, local06
21e84     12 29 E2 FA | 	rdword	local06, local04
21e88     18 4E 85 F1 | 	sub	fp, #24
21e8c     A7 28 52 FC | 	wrword	local06, fp
21e90     A7 2A E2 FA | 	rdword	local07, fp
21e94     14 4E 85 F1 | 	sub	fp, #20
21e98     20 2A 0E F2 | 	cmp	local07, #32 wz
21e9c     14 4E 05 51 |  if_ne	add	fp, #20
21ea0     A7 1E E2 5A |  if_ne	rdword	local01, fp
21ea4     14 4E 85 51 |  if_ne	sub	fp, #20
21ea8     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
21eac     18 00 90 5D |  if_ne	jmp	#LR__3631
21eb0     2C 4E 05 F1 | 	add	fp, #44
21eb4     A7 1E 02 FB | 	rdlong	local01, fp
21eb8     01 1E 86 F1 | 	sub	local01, #1
21ebc     A7 1E 62 FC | 	wrlong	local01, fp
21ec0     2C 4E 85 F1 | 	sub	fp, #44
21ec4     90 FF 9F FD | 	jmp	#LR__3629
21ec8                 | LR__3630
21ec8                 | LR__3631
21ec8     18 4E 05 F1 | 	add	fp, #24
21ecc     A7 2C 02 FB | 	rdlong	local08, fp
21ed0     14 4E 05 F1 | 	add	fp, #20
21ed4     A7 24 02 FB | 	rdlong	local04, fp
21ed8     01 24 66 F0 | 	shl	local04, #1
21edc     16 25 02 F1 | 	add	local04, local08
21ee0     12 01 58 FC | 	wrword	#0, local04
21ee4     A7 2A 0A FB | 	rdlong	local07, fp wz
21ee8     2C 4E 85 F1 | 	sub	fp, #44
21eec     06 FA 05 A6 |  if_e	mov	result1, #6
21ef0     04 06 90 AD |  if_e	jmp	#LR__3660
21ef4                 | ' 
21ef4                 | ' 
21ef4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
21ef4     28 4E 05 F1 | 	add	fp, #40
21ef8     A7 00 68 FC | 	wrlong	#0, fp
21efc     28 4E 85 F1 | 	sub	fp, #40
21f00     97 22 48 FB | 	callpa	#(@LR__3633-@LR__3632)>>2,fcache_load_ptr_
21f04                 | LR__3632
21f04     18 4E 05 F1 | 	add	fp, #24
21f08     A7 2E 02 FB | 	rdlong	local09, fp
21f0c     10 4E 05 F1 | 	add	fp, #16
21f10     A7 30 02 FB | 	rdlong	local10, fp
21f14     28 4E 85 F1 | 	sub	fp, #40
21f18     01 30 66 F0 | 	shl	local10, #1
21f1c     17 31 02 F1 | 	add	local10, local09
21f20     18 33 E2 FA | 	rdword	local11, local10
21f24     20 32 0E F2 | 	cmp	local11, #32 wz
21f28     1C 00 90 5D |  if_ne	jmp	#LR__3634
21f2c     28 4E 05 F1 | 	add	fp, #40
21f30     A7 34 02 FB | 	rdlong	local12, fp
21f34     1A 27 02 F6 | 	mov	local05, local12
21f38     01 26 06 F1 | 	add	local05, #1
21f3c     A7 26 62 FC | 	wrlong	local05, fp
21f40     28 4E 85 F1 | 	sub	fp, #40
21f44     BC FF 9F FD | 	jmp	#LR__3632
21f48                 | LR__3633
21f48                 | LR__3634
21f48     28 4E 05 F1 | 	add	fp, #40
21f4c     A7 2A 02 FB | 	rdlong	local07, fp
21f50     28 4E 85 F1 | 	sub	fp, #40
21f54     01 2A 16 F2 | 	cmp	local07, #1 wc
21f58     28 00 90 3D |  if_ae	jmp	#LR__3635
21f5c     18 4E 05 F1 | 	add	fp, #24
21f60     A7 22 02 FB | 	rdlong	local03, fp
21f64     10 4E 05 F1 | 	add	fp, #16
21f68     A7 2E 02 FB | 	rdlong	local09, fp
21f6c     28 4E 85 F1 | 	sub	fp, #40
21f70     01 2E 66 F0 | 	shl	local09, #1
21f74     11 2F 02 F1 | 	add	local09, local03
21f78     17 1F E2 FA | 	rdword	local01, local09
21f7c     2E 1E 0E F2 | 	cmp	local01, #46 wz
21f80     14 00 90 5D |  if_ne	jmp	#LR__3636
21f84                 | LR__3635
21f84     10 4E 05 F1 | 	add	fp, #16
21f88     A7 2A C2 FA | 	rdbyte	local07, fp
21f8c     03 2A 46 F5 | 	or	local07, #3
21f90     A7 2A 42 FC | 	wrbyte	local07, fp
21f94     10 4E 85 F1 | 	sub	fp, #16
21f98                 | LR__3636
21f98     97 2C 48 FB | 	callpa	#(@LR__3638-@LR__3637)>>2,fcache_load_ptr_
21f9c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
21f9c                 | LR__3637
21f9c     2C 4E 05 F1 | 	add	fp, #44
21fa0     A7 2A 02 FB | 	rdlong	local07, fp
21fa4     2C 4E 85 F1 | 	sub	fp, #44
21fa8     01 2A 16 F2 | 	cmp	local07, #1 wc
21fac     44 00 90 CD |  if_b	jmp	#LR__3639
21fb0     18 4E 05 F1 | 	add	fp, #24
21fb4     A7 28 02 FB | 	rdlong	local06, fp
21fb8     14 4E 05 F1 | 	add	fp, #20
21fbc     A7 22 02 FB | 	rdlong	local03, fp
21fc0     2C 4E 85 F1 | 	sub	fp, #44
21fc4     01 22 86 F1 | 	sub	local03, #1
21fc8     01 22 66 F0 | 	shl	local03, #1
21fcc     14 23 02 F1 | 	add	local03, local06
21fd0     11 1F E2 FA | 	rdword	local01, local03
21fd4     2E 1E 0E F2 | 	cmp	local01, #46 wz
21fd8     18 00 90 AD |  if_e	jmp	#LR__3639
21fdc     2C 4E 05 F1 | 	add	fp, #44
21fe0     A7 1E 02 FB | 	rdlong	local01, fp
21fe4     01 1E 86 F1 | 	sub	local01, #1
21fe8     A7 1E 62 FC | 	wrlong	local01, fp
21fec     2C 4E 85 F1 | 	sub	fp, #44
21ff0     A8 FF 9F FD | 	jmp	#LR__3637
21ff4                 | LR__3638
21ff4                 | LR__3639
21ff4     04 4E 05 F1 | 	add	fp, #4
21ff8     A7 12 02 FB | 	rdlong	arg01, fp
21ffc     04 4E 85 F1 | 	sub	fp, #4
22000     20 12 06 F1 | 	add	arg01, #32
22004     20 14 06 F6 | 	mov	arg02, #32
22008     0B 16 06 F6 | 	mov	arg03, #11
2200c     09 37 02 F6 | 	mov	local13, arg01
22010     98 00 A0 FD | 	call	#\builtin_bytefill_
22014     1B FB 01 F6 | 	mov	result1, local13
22018     0C 4E 05 F1 | 	add	fp, #12
2201c     A7 00 48 FC | 	wrbyte	#0, fp
22020     A7 2A C2 FA | 	rdbyte	local07, fp
22024     14 4E 05 F1 | 	add	fp, #20
22028     A7 2A 62 FC | 	wrlong	local07, fp
2202c     04 4E 05 F1 | 	add	fp, #4
22030     A7 10 68 FC | 	wrlong	#8, fp
22034     24 4E 85 F1 | 	sub	fp, #36
22038                 | ' 
22038                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
22038                 | ' 	i = b = 0; ni = 8;
22038                 | ' 	for (;;) {
22038                 | LR__3640
22038     18 4E 05 F1 | 	add	fp, #24
2203c     A7 22 02 FB | 	rdlong	local03, fp
22040     10 4E 05 F1 | 	add	fp, #16
22044     A7 2E 02 FB | 	rdlong	local09, fp
22048     17 25 02 F6 | 	mov	local04, local09
2204c     01 24 06 F1 | 	add	local04, #1
22050     A7 24 62 FC | 	wrlong	local04, fp
22054     01 2E 66 F0 | 	shl	local09, #1
22058     11 2F 02 F1 | 	add	local09, local03
2205c     17 29 E2 FA | 	rdword	local06, local09
22060     14 4E 85 F1 | 	sub	fp, #20
22064     A7 28 52 FC | 	wrword	local06, fp
22068     A7 2A EA FA | 	rdword	local07, fp wz
2206c     14 4E 85 F1 | 	sub	fp, #20
22070     74 03 90 AD |  if_e	jmp	#LR__3656
22074     14 4E 05 F1 | 	add	fp, #20
22078     A7 2A E2 FA | 	rdword	local07, fp
2207c     14 4E 85 F1 | 	sub	fp, #20
22080     20 2A 0E F2 | 	cmp	local07, #32 wz
22084     30 00 90 AD |  if_e	jmp	#LR__3641
22088     14 4E 05 F1 | 	add	fp, #20
2208c     A7 1E E2 FA | 	rdword	local01, fp
22090     14 4E 85 F1 | 	sub	fp, #20
22094     2E 1E 0E F2 | 	cmp	local01, #46 wz
22098     34 00 90 5D |  if_ne	jmp	#LR__3642
2209c     28 4E 05 F1 | 	add	fp, #40
220a0     A7 24 02 FB | 	rdlong	local04, fp
220a4     04 4E 05 F1 | 	add	fp, #4
220a8     A7 30 02 FB | 	rdlong	local10, fp
220ac     2C 4E 85 F1 | 	sub	fp, #44
220b0     18 25 0A F2 | 	cmp	local04, local10 wz
220b4     18 00 90 AD |  if_e	jmp	#LR__3642
220b8                 | LR__3641
220b8     10 4E 05 F1 | 	add	fp, #16
220bc     A7 2A C2 FA | 	rdbyte	local07, fp
220c0     03 2A 46 F5 | 	or	local07, #3
220c4     A7 2A 42 FC | 	wrbyte	local07, fp
220c8     10 4E 85 F1 | 	sub	fp, #16
220cc                 | ' 			cf |=  0x01  |  0x02 ;
220cc                 | ' 			continue;
220cc     68 FF 9F FD | 	jmp	#LR__3640
220d0                 | LR__3642
220d0     20 4E 05 F1 | 	add	fp, #32
220d4     A7 2A 02 FB | 	rdlong	local07, fp
220d8     04 4E 05 F1 | 	add	fp, #4
220dc     A7 1E 02 FB | 	rdlong	local01, fp
220e0     24 4E 85 F1 | 	sub	fp, #36
220e4     0F 2B 12 F2 | 	cmp	local07, local01 wc
220e8     1C 00 90 3D |  if_ae	jmp	#LR__3643
220ec     28 4E 05 F1 | 	add	fp, #40
220f0     A7 2C 02 FB | 	rdlong	local08, fp
220f4     04 4E 05 F1 | 	add	fp, #4
220f8     A7 30 02 FB | 	rdlong	local10, fp
220fc     2C 4E 85 F1 | 	sub	fp, #44
22100     18 2D 0A F2 | 	cmp	local08, local10 wz
22104     B0 00 90 5D |  if_ne	jmp	#LR__3645
22108                 | LR__3643
22108     24 4E 05 F1 | 	add	fp, #36
2210c     A7 2A 02 FB | 	rdlong	local07, fp
22110     24 4E 85 F1 | 	sub	fp, #36
22114     0B 2A 0E F2 | 	cmp	local07, #11 wz
22118     18 00 90 5D |  if_ne	jmp	#LR__3644
2211c     10 4E 05 F1 | 	add	fp, #16
22120     A7 2A C2 FA | 	rdbyte	local07, fp
22124     03 2A 46 F5 | 	or	local07, #3
22128     A7 2A 42 FC | 	wrbyte	local07, fp
2212c     10 4E 85 F1 | 	sub	fp, #16
22130                 | ' 				cf |=  0x01  |  0x02 ;
22130                 | ' 				break;
22130     B4 02 90 FD | 	jmp	#LR__3656
22134                 | LR__3644
22134     28 4E 05 F1 | 	add	fp, #40
22138     A7 2A 02 FB | 	rdlong	local07, fp
2213c     04 4E 05 F1 | 	add	fp, #4
22140     A7 1E 02 FB | 	rdlong	local01, fp
22144     2C 4E 85 F1 | 	sub	fp, #44
22148     0F 2B 0A F2 | 	cmp	local07, local01 wz
2214c     10 4E 05 51 |  if_ne	add	fp, #16
22150     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
22154     03 2A 46 55 |  if_ne	or	local07, #3
22158     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2215c     10 4E 85 51 |  if_ne	sub	fp, #16
22160     28 4E 05 F1 | 	add	fp, #40
22164     A7 2A 02 FB | 	rdlong	local07, fp
22168     04 4E 05 F1 | 	add	fp, #4
2216c     A7 20 02 FB | 	rdlong	local02, fp
22170     2C 4E 85 F1 | 	sub	fp, #44
22174     10 2B 1A F2 | 	cmp	local07, local02 wcz
22178     6C 02 90 1D |  if_a	jmp	#LR__3656
2217c     2C 4E 05 F1 | 	add	fp, #44
22180     A7 2A 02 FB | 	rdlong	local07, fp
22184     04 4E 85 F1 | 	sub	fp, #4
22188     A7 2A 62 FC | 	wrlong	local07, fp
2218c     08 4E 85 F1 | 	sub	fp, #8
22190     A7 10 68 FC | 	wrlong	#8, fp
22194     04 4E 05 F1 | 	add	fp, #4
22198     A7 16 68 FC | 	wrlong	#11, fp
2219c     18 4E 85 F1 | 	sub	fp, #24
221a0     A7 32 C2 FA | 	rdbyte	local11, fp
221a4     19 2B E2 F8 | 	getbyte	local07, local11, #0
221a8     02 2A 66 F0 | 	shl	local07, #2
221ac     A7 2A 42 FC | 	wrbyte	local07, fp
221b0     0C 4E 85 F1 | 	sub	fp, #12
221b4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
221b4                 | ' 			continue;
221b4     80 FE 9F FD | 	jmp	#LR__3640
221b8                 | LR__3645
221b8     14 4E 05 F1 | 	add	fp, #20
221bc     A7 2A E2 FA | 	rdword	local07, fp
221c0     14 4E 85 F1 | 	sub	fp, #20
221c4     80 2A 16 F2 | 	cmp	local07, #128 wc
221c8     6C 00 90 CD |  if_b	jmp	#LR__3647
221cc     10 4E 05 F1 | 	add	fp, #16
221d0     A7 2A C2 FA | 	rdbyte	local07, fp
221d4     02 2A 46 F5 | 	or	local07, #2
221d8     A7 2A 42 FC | 	wrbyte	local07, fp
221dc     04 4E 05 F1 | 	add	fp, #4
221e0     A7 12 E2 FA | 	rdword	arg01, fp
221e4     14 4E 85 F1 | 	sub	fp, #20
221e8     01 00 00 FF 
221ec     52 15 06 F6 | 	mov	arg02, ##850
221f0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
221f4     14 4E 05 F1 | 	add	fp, #20
221f8     A7 FA 51 FC | 	wrword	result1, fp
221fc     A7 2A E2 FA | 	rdword	local07, fp
22200     14 4E 85 F1 | 	sub	fp, #20
22204     80 2A CE F7 | 	test	local07, #128 wz
22208     2C 00 90 AD |  if_e	jmp	#LR__3646
2220c     14 4E 05 F1 | 	add	fp, #20
22210     A7 20 E2 FA | 	rdword	local02, fp
22214     7F 20 06 F5 | 	and	local02, #127
22218     01 00 00 FF 
2221c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
22220     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
22224     10 2B C2 FA | 	rdbyte	local07, local02
22228     A7 2A 52 FC | 	wrword	local07, fp
2222c     14 4E 85 F1 | 	sub	fp, #20
22230     01 00 00 FF 
22234     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
22238                 | LR__3646
22238                 | LR__3647
22238     14 4E 05 F1 | 	add	fp, #20
2223c     A7 2A E2 FA | 	rdword	local07, fp
22240     14 4E 85 F1 | 	sub	fp, #20
22244     00 2B 16 F2 | 	cmp	local07, #256 wc
22248     88 00 90 CD |  if_b	jmp	#LR__3649
2224c     24 4E 05 F1 | 	add	fp, #36
22250     A7 2A 02 FB | 	rdlong	local07, fp
22254     01 2A 86 F1 | 	sub	local07, #1
22258     04 4E 85 F1 | 	sub	fp, #4
2225c     A7 20 02 FB | 	rdlong	local02, fp
22260     20 4E 85 F1 | 	sub	fp, #32
22264     15 21 12 F2 | 	cmp	local02, local07 wc
22268     2C 00 90 CD |  if_b	jmp	#LR__3648
2226c     10 4E 05 F1 | 	add	fp, #16
22270     A7 32 C2 FA | 	rdbyte	local11, fp
22274     19 2B E2 F8 | 	getbyte	local07, local11, #0
22278     03 2A 46 F5 | 	or	local07, #3
2227c     A7 2A 42 FC | 	wrbyte	local07, fp
22280     14 4E 05 F1 | 	add	fp, #20
22284     A7 2A 02 FB | 	rdlong	local07, fp
22288     04 4E 85 F1 | 	sub	fp, #4
2228c     A7 2A 62 FC | 	wrlong	local07, fp
22290     20 4E 85 F1 | 	sub	fp, #32
22294                 | ' 				cf |=  0x01  |  0x02 ;
22294                 | ' 				i = ni; continue;
22294     A0 FD 9F FD | 	jmp	#LR__3640
22298                 | LR__3648
22298     04 4E 05 F1 | 	add	fp, #4
2229c     A7 2E 02 FB | 	rdlong	local09, fp
222a0     1C 4E 05 F1 | 	add	fp, #28
222a4     A7 30 02 FB | 	rdlong	local10, fp
222a8     18 25 02 F6 | 	mov	local04, local10
222ac     01 24 06 F1 | 	add	local04, #1
222b0     A7 24 62 FC | 	wrlong	local04, fp
222b4     20 2E 06 F1 | 	add	local09, #32
222b8     17 31 02 F1 | 	add	local10, local09
222bc     0C 4E 85 F1 | 	sub	fp, #12
222c0     A7 22 E2 FA | 	rdword	local03, fp
222c4     14 4E 85 F1 | 	sub	fp, #20
222c8     08 22 46 F0 | 	shr	local03, #8
222cc     18 23 42 FC | 	wrbyte	local03, local10
222d0     D4 00 90 FD | 	jmp	#LR__3655
222d4                 | LR__3649
222d4     14 4E 05 F1 | 	add	fp, #20
222d8     A7 2A EA FA | 	rdword	local07, fp wz
222dc     14 4E 85 F1 | 	sub	fp, #20
222e0     20 00 90 AD |  if_e	jmp	#LR__3650
222e4     3E 01 00 FF 
222e8     69 12 06 F6 | 	mov	arg01, ##@LR__4283
222ec     14 4E 05 F1 | 	add	fp, #20
222f0     A7 14 E2 FA | 	rdword	arg02, fp
222f4     14 4E 85 F1 | 	sub	fp, #20
222f8     48 CB BF FD | 	call	#_fatfs_cc_strchr
222fc     00 FA 0D F2 | 	cmp	result1, #0 wz
22300     20 00 90 AD |  if_e	jmp	#LR__3651
22304                 | LR__3650
22304     14 4E 05 F1 | 	add	fp, #20
22308     A7 BE 58 FC | 	wrword	#95, fp
2230c     04 4E 85 F1 | 	sub	fp, #4
22310     A7 2A C2 FA | 	rdbyte	local07, fp
22314     03 2A 46 F5 | 	or	local07, #3
22318     A7 2A 42 FC | 	wrbyte	local07, fp
2231c     10 4E 85 F1 | 	sub	fp, #16
22320     84 00 90 FD | 	jmp	#LR__3654
22324                 | LR__3651
22324     14 4E 05 F1 | 	add	fp, #20
22328     A7 2A E2 FA | 	rdword	local07, fp
2232c     14 4E 85 F1 | 	sub	fp, #20
22330     41 2A 16 F2 | 	cmp	local07, #65 wc
22334     24 00 90 CD |  if_b	jmp	#LR__3652
22338     14 4E 05 F1 | 	add	fp, #20
2233c     A7 1E E2 FA | 	rdword	local01, fp
22340     14 4E 85 F1 | 	sub	fp, #20
22344     5B 1E 16 F2 | 	cmp	local01, #91 wc
22348     0C 4E 05 C1 |  if_b	add	fp, #12
2234c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
22350     02 2A 46 C5 |  if_b	or	local07, #2
22354     A7 2A 42 CC |  if_b	wrbyte	local07, fp
22358     0C 4E 85 C1 |  if_b	sub	fp, #12
2235c                 | LR__3652
2235c     14 4E 05 F1 | 	add	fp, #20
22360     A7 2A E2 FA | 	rdword	local07, fp
22364     14 4E 85 F1 | 	sub	fp, #20
22368     61 2A 16 F2 | 	cmp	local07, #97 wc
2236c     38 00 90 CD |  if_b	jmp	#LR__3653
22370     14 4E 05 F1 | 	add	fp, #20
22374     A7 1E E2 FA | 	rdword	local01, fp
22378     14 4E 85 F1 | 	sub	fp, #20
2237c     7B 1E 16 F2 | 	cmp	local01, #123 wc
22380     24 00 90 3D |  if_ae	jmp	#LR__3653
22384     0C 4E 05 F1 | 	add	fp, #12
22388     A7 2A C2 FA | 	rdbyte	local07, fp
2238c     01 2A 46 F5 | 	or	local07, #1
22390     A7 2A 42 FC | 	wrbyte	local07, fp
22394     08 4E 05 F1 | 	add	fp, #8
22398     A7 2A E2 FA | 	rdword	local07, fp
2239c     20 2A 86 F1 | 	sub	local07, #32
223a0     A7 2A 52 FC | 	wrword	local07, fp
223a4     14 4E 85 F1 | 	sub	fp, #20
223a8                 | LR__3653
223a8                 | LR__3654
223a8                 | LR__3655
223a8     04 4E 05 F1 | 	add	fp, #4
223ac     A7 32 02 FB | 	rdlong	local11, fp
223b0     19 2F 02 F6 | 	mov	local09, local11
223b4     1C 4E 05 F1 | 	add	fp, #28
223b8     A7 20 02 FB | 	rdlong	local02, fp
223bc     10 25 02 F6 | 	mov	local04, local02
223c0     01 24 06 F1 | 	add	local04, #1
223c4     A7 24 62 FC | 	wrlong	local04, fp
223c8     10 31 02 F6 | 	mov	local10, local02
223cc     20 2E 06 F1 | 	add	local09, #32
223d0     17 31 02 F1 | 	add	local10, local09
223d4     0C 4E 85 F1 | 	sub	fp, #12
223d8     A7 22 E2 FA | 	rdword	local03, fp
223dc     14 4E 85 F1 | 	sub	fp, #20
223e0     18 23 42 FC | 	wrbyte	local03, local10
223e4     50 FC 9F FD | 	jmp	#LR__3640
223e8                 | LR__3656
223e8     04 4E 05 F1 | 	add	fp, #4
223ec     A7 32 02 FB | 	rdlong	local11, fp
223f0     04 4E 85 F1 | 	sub	fp, #4
223f4     20 32 06 F1 | 	add	local11, #32
223f8     19 2B C2 FA | 	rdbyte	local07, local11
223fc     E5 2A 0E F2 | 	cmp	local07, #229 wz
22400     04 4E 05 A1 |  if_e	add	fp, #4
22404     A7 2A 02 AB |  if_e	rdlong	local07, fp
22408     04 4E 85 A1 |  if_e	sub	fp, #4
2240c     20 2A 06 A1 |  if_e	add	local07, #32
22410     15 0B 48 AC |  if_e	wrbyte	#5, local07
22414     24 4E 05 F1 | 	add	fp, #36
22418     A7 2A 02 FB | 	rdlong	local07, fp
2241c     24 4E 85 F1 | 	sub	fp, #36
22420     08 2A 0E F2 | 	cmp	local07, #8 wz
22424     0C 4E 05 A1 |  if_e	add	fp, #12
22428     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2242c     02 2A 66 A0 |  if_e	shl	local07, #2
22430     A7 2A 42 AC |  if_e	wrbyte	local07, fp
22434     0C 4E 85 A1 |  if_e	sub	fp, #12
22438     0C 4E 05 F1 | 	add	fp, #12
2243c     A7 2A C2 FA | 	rdbyte	local07, fp
22440     0C 4E 85 F1 | 	sub	fp, #12
22444     0C 2A 06 F5 | 	and	local07, #12
22448     0C 2A 0E F2 | 	cmp	local07, #12 wz
2244c     18 00 90 AD |  if_e	jmp	#LR__3657
22450     0C 4E 05 F1 | 	add	fp, #12
22454     A7 1E C2 FA | 	rdbyte	local01, fp
22458     0C 4E 85 F1 | 	sub	fp, #12
2245c     03 1E 06 F5 | 	and	local01, #3
22460     03 1E 0E F2 | 	cmp	local01, #3 wz
22464     14 00 90 5D |  if_ne	jmp	#LR__3658
22468                 | LR__3657
22468     10 4E 05 F1 | 	add	fp, #16
2246c     A7 2A C2 FA | 	rdbyte	local07, fp
22470     02 2A 46 F5 | 	or	local07, #2
22474     A7 2A 42 FC | 	wrbyte	local07, fp
22478     10 4E 85 F1 | 	sub	fp, #16
2247c                 | LR__3658
2247c     10 4E 05 F1 | 	add	fp, #16
22480     A7 2A C2 FA | 	rdbyte	local07, fp
22484     10 4E 85 F1 | 	sub	fp, #16
22488     02 2A CE F7 | 	test	local07, #2 wz
2248c     48 00 90 5D |  if_ne	jmp	#LR__3659
22490     0C 4E 05 F1 | 	add	fp, #12
22494     A7 2A C2 FA | 	rdbyte	local07, fp
22498     0C 4E 85 F1 | 	sub	fp, #12
2249c     01 2A CE F7 | 	test	local07, #1 wz
224a0     10 4E 05 51 |  if_ne	add	fp, #16
224a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
224a8     10 2A 46 55 |  if_ne	or	local07, #16
224ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
224b0     10 4E 85 51 |  if_ne	sub	fp, #16
224b4     0C 4E 05 F1 | 	add	fp, #12
224b8     A7 2A C2 FA | 	rdbyte	local07, fp
224bc     0C 4E 85 F1 | 	sub	fp, #12
224c0     04 2A CE F7 | 	test	local07, #4 wz
224c4     10 4E 05 51 |  if_ne	add	fp, #16
224c8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
224cc     08 2A 46 55 |  if_ne	or	local07, #8
224d0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
224d4     10 4E 85 51 |  if_ne	sub	fp, #16
224d8                 | LR__3659
224d8     04 4E 05 F1 | 	add	fp, #4
224dc     A7 2A 02 FB | 	rdlong	local07, fp
224e0     0C 4E 05 F1 | 	add	fp, #12
224e4     A7 1E C2 FA | 	rdbyte	local01, fp
224e8     10 4E 85 F1 | 	sub	fp, #16
224ec     2B 2A 06 F1 | 	add	local07, #43
224f0     15 1F 42 FC | 	wrbyte	local01, local07
224f4                 | ' 	}
224f4                 | ' 
224f4                 | ' 	dp->fn[ 11 ] = cf;
224f4                 | ' 
224f4                 | ' 	return FR_OK;
224f4     00 FA 05 F6 | 	mov	result1, #0
224f8                 | LR__3660
224f8     A7 F0 03 F6 | 	mov	ptra, fp
224fc     B2 00 A0 FD | 	call	#popregs_
22500                 | _fatfs_cc_create_name_ret
22500     2D 00 64 FD | 	ret
22504                 | 
22504                 | _fatfs_cc_follow_path
22504     02 4A 05 F6 | 	mov	COUNT_, #2
22508     A8 00 A0 FD | 	call	#pushregs_
2250c     18 F0 07 F1 | 	add	ptra, #24
22510     04 4E 05 F1 | 	add	fp, #4
22514     A7 12 62 FC | 	wrlong	arg01, fp
22518     04 4E 05 F1 | 	add	fp, #4
2251c     A7 14 62 FC | 	wrlong	arg02, fp
22520     04 4E 85 F1 | 	sub	fp, #4
22524     A7 FA 01 FB | 	rdlong	result1, fp
22528     FD 1E 02 FB | 	rdlong	local01, result1
2252c     10 4E 05 F1 | 	add	fp, #16
22530     A7 1E 62 FC | 	wrlong	local01, fp
22534     14 4E 85 F1 | 	sub	fp, #20
22538     97 24 48 FB | 	callpa	#(@LR__3672-@LR__3670)>>2,fcache_load_ptr_
2253c                 | ' )
2253c                 | ' {
2253c                 | ' 	FRESULT res;
2253c                 | ' 	BYTE ns;
2253c                 | ' 	FATFS *fs = dp->obj.fs;
2253c                 | ' #line 3034 "ff.c"
2253c                 | ' 	{
2253c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2253c                 | LR__3670
2253c     08 4E 05 F1 | 	add	fp, #8
22540     A7 1E 02 FB | 	rdlong	local01, fp
22544     08 4E 85 F1 | 	sub	fp, #8
22548     0F 1F C2 FA | 	rdbyte	local01, local01
2254c     2F 1E 0E F2 | 	cmp	local01, #47 wz
22550     18 00 90 AD |  if_e	jmp	#LR__3671
22554     08 4E 05 F1 | 	add	fp, #8
22558     A7 1E 02 FB | 	rdlong	local01, fp
2255c     08 4E 85 F1 | 	sub	fp, #8
22560     0F 1F C2 FA | 	rdbyte	local01, local01
22564     5C 1E 0E F2 | 	cmp	local01, #92 wz
22568     18 00 90 5D |  if_ne	jmp	#LR__3673
2256c                 | LR__3671
2256c     08 4E 05 F1 | 	add	fp, #8
22570     A7 1E 02 FB | 	rdlong	local01, fp
22574     01 1E 06 F1 | 	add	local01, #1
22578     A7 1E 62 FC | 	wrlong	local01, fp
2257c     08 4E 85 F1 | 	sub	fp, #8
22580     B8 FF 9F FD | 	jmp	#LR__3670
22584                 | LR__3672
22584                 | LR__3673
22584     04 4E 05 F1 | 	add	fp, #4
22588     A7 1E 02 FB | 	rdlong	local01, fp
2258c     08 1E 06 F1 | 	add	local01, #8
22590     0F 01 68 FC | 	wrlong	#0, local01
22594     04 4E 05 F1 | 	add	fp, #4
22598     A7 1E 02 FB | 	rdlong	local01, fp
2259c     08 4E 85 F1 | 	sub	fp, #8
225a0     0F 1F C2 FA | 	rdbyte	local01, local01
225a4     20 1E 16 F2 | 	cmp	local01, #32 wc
225a8     30 00 90 3D |  if_ae	jmp	#LR__3674
225ac     04 4E 05 F1 | 	add	fp, #4
225b0     A7 1E 02 FB | 	rdlong	local01, fp
225b4     2B 1E 06 F1 | 	add	local01, #43
225b8     0F 01 49 FC | 	wrbyte	#128, local01
225bc     A7 12 02 FB | 	rdlong	arg01, fp
225c0     04 4E 85 F1 | 	sub	fp, #4
225c4     00 14 06 F6 | 	mov	arg02, #0
225c8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
225cc     0C 4E 05 F1 | 	add	fp, #12
225d0     A7 FA 61 FC | 	wrlong	result1, fp
225d4     0C 4E 85 F1 | 	sub	fp, #12
225d8     1C 01 90 FD | 	jmp	#LR__3678
225dc                 | LR__3674
225dc                 | ' 		for (;;) {
225dc                 | LR__3675
225dc     04 4E 05 F1 | 	add	fp, #4
225e0     A7 12 02 FB | 	rdlong	arg01, fp
225e4     04 4E 05 F1 | 	add	fp, #4
225e8     A7 14 02 F6 | 	mov	arg02, fp
225ec     08 4E 85 F1 | 	sub	fp, #8
225f0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
225f4     0C 4E 05 F1 | 	add	fp, #12
225f8     A7 FA 61 FC | 	wrlong	result1, fp
225fc     00 FA 4D F2 | 	cmps	result1, #0 wz
22600     0C 4E 85 F1 | 	sub	fp, #12
22604     F0 00 90 5D |  if_ne	jmp	#LR__3677
22608     04 4E 05 F1 | 	add	fp, #4
2260c     A7 12 02 FB | 	rdlong	arg01, fp
22610     04 4E 85 F1 | 	sub	fp, #4
22614     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
22618     0C 4E 05 F1 | 	add	fp, #12
2261c     A7 FA 61 FC | 	wrlong	result1, fp
22620     08 4E 85 F1 | 	sub	fp, #8
22624     A7 1E 02 FB | 	rdlong	local01, fp
22628     2B 1E 06 F1 | 	add	local01, #43
2262c     0F 1F C2 FA | 	rdbyte	local01, local01
22630     0C 4E 05 F1 | 	add	fp, #12
22634     A7 1E 42 FC | 	wrbyte	local01, fp
22638     04 4E 85 F1 | 	sub	fp, #4
2263c     A7 1E 0A FB | 	rdlong	local01, fp wz
22640     0C 4E 85 F1 | 	sub	fp, #12
22644     34 00 90 AD |  if_e	jmp	#LR__3676
22648     0C 4E 05 F1 | 	add	fp, #12
2264c     A7 1E 02 FB | 	rdlong	local01, fp
22650     0C 4E 85 F1 | 	sub	fp, #12
22654     04 1E 0E F2 | 	cmp	local01, #4 wz
22658     9C 00 90 5D |  if_ne	jmp	#LR__3677
2265c     10 4E 05 F1 | 	add	fp, #16
22660     A7 1E C2 FA | 	rdbyte	local01, fp
22664     10 4E 85 F1 | 	sub	fp, #16
22668     04 1E CE F7 | 	test	local01, #4 wz
2266c     0C 4E 05 A1 |  if_e	add	fp, #12
22670     A7 0A 68 AC |  if_e	wrlong	#5, fp
22674     0C 4E 85 A1 |  if_e	sub	fp, #12
22678                 | ' 					}
22678                 | ' 				}
22678                 | ' 				break;
22678     7C 00 90 FD | 	jmp	#LR__3677
2267c                 | LR__3676
2267c     10 4E 05 F1 | 	add	fp, #16
22680     A7 1E C2 FA | 	rdbyte	local01, fp
22684     10 4E 85 F1 | 	sub	fp, #16
22688     04 1E CE F7 | 	test	local01, #4 wz
2268c     68 00 90 5D |  if_ne	jmp	#LR__3677
22690     04 4E 05 F1 | 	add	fp, #4
22694     A7 1E 02 FB | 	rdlong	local01, fp
22698     04 4E 85 F1 | 	sub	fp, #4
2269c     06 1E 06 F1 | 	add	local01, #6
226a0     0F 1F C2 FA | 	rdbyte	local01, local01
226a4     10 1E CE F7 | 	test	local01, #16 wz
226a8     0C 4E 05 A1 |  if_e	add	fp, #12
226ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
226b0     0C 4E 85 A1 |  if_e	sub	fp, #12
226b4                 | ' 				res = FR_NO_PATH; break;
226b4     40 00 90 AD |  if_e	jmp	#LR__3677
226b8     04 4E 05 F1 | 	add	fp, #4
226bc     A7 20 02 FB | 	rdlong	local02, fp
226c0     10 1F 02 F6 | 	mov	local01, local02
226c4     10 4E 05 F1 | 	add	fp, #16
226c8     A7 14 02 FB | 	rdlong	arg02, fp
226cc     0A 13 02 F6 | 	mov	arg01, arg02
226d0     34 14 06 F1 | 	add	arg02, #52
226d4     14 4E 85 F1 | 	sub	fp, #20
226d8     10 20 06 F1 | 	add	local02, #16
226dc     10 21 02 FB | 	rdlong	local02, local02
226e0     FF 21 06 F5 | 	and	local02, #511
226e4     10 15 02 F1 | 	add	arg02, local02
226e8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
226ec     08 1E 06 F1 | 	add	local01, #8
226f0     0F FB 61 FC | 	wrlong	result1, local01
226f4     E4 FE 9F FD | 	jmp	#LR__3675
226f8                 | LR__3677
226f8                 | LR__3678
226f8                 | ' 			}
226f8                 | ' #line 3090 "ff.c"
226f8                 | ' 			{
226f8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
226f8                 | ' 			}
226f8                 | ' 		}
226f8                 | ' 	}
226f8                 | ' 
226f8                 | ' 	return res;
226f8     0C 4E 05 F1 | 	add	fp, #12
226fc     A7 FA 01 FB | 	rdlong	result1, fp
22700     0C 4E 85 F1 | 	sub	fp, #12
22704     A7 F0 03 F6 | 	mov	ptra, fp
22708     B2 00 A0 FD | 	call	#popregs_
2270c                 | _fatfs_cc_follow_path_ret
2270c     2D 00 64 FD | 	ret
22710                 | 
22710                 | _fatfs_cc_get_ldnumber
22710     01 00 66 F6 | 	neg	_var01, #1
22714     09 03 0A FB | 	rdlong	_var02, arg01 wz
22718     01 05 02 F6 | 	mov	_var03, _var02
2271c     01 FA 65 A6 |  if_e	neg	result1, #1
22720     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
22724     97 10 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
22728                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
22728                 | LR__3680
22728     02 07 C2 FA | 	rdbyte	_var04, _var03
2272c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
22730     20 FA 15 F2 | 	cmp	result1, #32 wc
22734     01 04 06 F1 | 	add	_var03, #1
22738     03 09 02 36 |  if_ae	mov	_var05, _var04
2273c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
22740     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
22744     E0 FF 9F 1D |  if_a	jmp	#LR__3680
22748                 | LR__3681
22748     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2274c     3A 06 0E F2 | 	cmp	_var04, #58 wz
22750     40 00 90 5D |  if_ne	jmp	#LR__3683
22754     01 0A 06 F6 | 	mov	_var06, #1
22758     01 09 C2 FA | 	rdbyte	_var05, _var02
2275c     30 08 16 F2 | 	cmp	_var05, #48 wc
22760     1C 00 90 CD |  if_b	jmp	#LR__3682
22764     01 09 C2 FA | 	rdbyte	_var05, _var02
22768     3A 08 16 F2 | 	cmp	_var05, #58 wc
2276c     01 0D 02 C6 |  if_b	mov	_var07, _var02
22770     02 0C 06 C1 |  if_b	add	_var07, #2
22774     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
22778     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2277c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
22780                 | LR__3682
22780     01 0A 56 F2 | 	cmps	_var06, #1 wc
22784     05 01 02 C6 |  if_b	mov	_var01, _var06
22788     09 05 62 CC |  if_b	wrlong	_var03, arg01
2278c                 | ' 			vol = i;
2278c                 | ' 			*path = tt;
2278c                 | ' 		}
2278c                 | ' 		return vol;
2278c     00 FB 01 F6 | 	mov	result1, _var01
22790     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
22794                 | LR__3683
22794                 | ' 	}
22794                 | ' #line 3170 "ff.c"
22794                 | ' 	vol = 0;
22794                 | ' 
22794                 | ' 	return vol;
22794     00 FA 05 F6 | 	mov	result1, #0
22798                 | _fatfs_cc_get_ldnumber_ret
22798     2D 00 64 FD | 	ret
2279c                 | 
2279c                 | _fatfs_cc_check_fs
2279c     04 4A 05 F6 | 	mov	COUNT_, #4
227a0     A8 00 A0 FD | 	call	#pushregs_
227a4     09 1F 02 F6 | 	mov	local01, arg01
227a8     03 1E 06 F1 | 	add	local01, #3
227ac     0F 01 48 FC | 	wrbyte	#0, local01
227b0     2D 1E 06 F1 | 	add	local01, #45
227b4     FF FF FF FF 
227b8     0F FF 6B FC | 	wrlong	##-1, local01
227bc     30 1E 86 F1 | 	sub	local01, #48
227c0     0F 13 02 F6 | 	mov	arg01, local01
227c4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
227c8     00 FA 0D F2 | 	cmp	result1, #0 wz
227cc     04 FA 05 56 |  if_ne	mov	result1, #4
227d0     94 01 90 5D |  if_ne	jmp	#LR__3694
227d4     34 1E 06 F1 | 	add	local01, #52
227d8     0F 13 02 F6 | 	mov	arg01, local01
227dc     FE 13 06 F1 | 	add	arg01, #510
227e0                 | ' {
227e0                 | ' 
227e0                 | ' 	return *((WORD*)ptr);
227e0     09 21 E2 FA | 	rdword	local02, arg01
227e4     0F 23 C2 FA | 	rdbyte	local03, local01
227e8     34 1E 86 F1 | 	sub	local01, #52
227ec     11 25 E2 F8 | 	getbyte	local04, local03, #0
227f0     EB 24 0E F2 | 	cmp	local04, #235 wz
227f4     11 17 02 56 |  if_ne	mov	arg03, local03
227f8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
227fc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
22800     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
22804     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
22808     44 01 90 5D |  if_ne	jmp	#LR__3693
2280c     10 25 32 F9 | 	getword	local04, local02, #0
22810     55 00 00 FF 
22814     55 24 0E F2 | 	cmp	local04, ##43605 wz
22818     2C 00 90 5D |  if_ne	jmp	#LR__3690
2281c     34 1E 06 F1 | 	add	local01, #52
22820     0F 13 02 F6 | 	mov	arg01, local01
22824     34 1E 86 F1 | 	sub	local01, #52
22828     52 12 06 F1 | 	add	arg01, #82
2282c     3E 01 00 FF 
22830     70 14 06 F6 | 	mov	arg02, ##@LR__4284
22834     08 16 06 F6 | 	mov	arg03, #8
22838     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2283c     00 FA 0D F2 | 	cmp	result1, #0 wz
22840                 | ' 			return 0;
22840     00 FA 05 A6 |  if_e	mov	result1, #0
22844     20 01 90 AD |  if_e	jmp	#LR__3694
22848                 | LR__3690
22848     34 1E 06 F1 | 	add	local01, #52
2284c     0F 13 02 F6 | 	mov	arg01, local01
22850     0B 12 06 F1 | 	add	arg01, #11
22854                 | ' {
22854                 | ' 
22854                 | ' 	return *((WORD*)ptr);
22854     09 FB E1 FA | 	rdword	result1, arg01
22858     0D 1E 06 F1 | 	add	local01, #13
2285c     0F 23 C2 FA | 	rdbyte	local03, local01
22860     41 1E 86 F1 | 	sub	local01, #65
22864     FD 24 32 F9 | 	getword	local04, result1, #0
22868     FD 14 32 F9 | 	getword	arg02, result1, #0
2286c     01 14 86 F1 | 	sub	arg02, #1
22870     0A 25 CA F7 | 	test	local04, arg02 wz
22874     D8 00 90 5D |  if_ne	jmp	#LR__3692
22878     FD 14 32 F9 | 	getword	arg02, result1, #0
2287c     01 00 00 FF 
22880     00 14 16 F2 | 	cmp	arg02, ##512 wc
22884     C8 00 90 CD |  if_b	jmp	#LR__3692
22888     FD 14 32 F9 | 	getword	arg02, result1, #0
2288c     01 00 00 FF 
22890     01 14 16 F2 | 	cmp	arg02, ##513 wc
22894     B8 00 90 3D |  if_ae	jmp	#LR__3692
22898     11 13 02 F6 | 	mov	arg01, local03
2289c     07 12 4E F7 | 	zerox	arg01, #7 wz
228a0     AC 00 90 AD |  if_e	jmp	#LR__3692
228a4     11 13 E2 F8 | 	getbyte	arg01, local03, #0
228a8     11 23 E2 F8 | 	getbyte	local03, local03, #0
228ac     01 22 86 F1 | 	sub	local03, #1
228b0     11 13 CA F7 | 	test	arg01, local03 wz
228b4     98 00 90 5D |  if_ne	jmp	#LR__3692
228b8     34 1E 06 F1 | 	add	local01, #52
228bc     0F 13 02 F6 | 	mov	arg01, local01
228c0     34 1E 86 F1 | 	sub	local01, #52
228c4     0E 12 06 F1 | 	add	arg01, #14
228c8                 | ' {
228c8                 | ' 
228c8                 | ' 	return *((WORD*)ptr);
228c8     09 FB E9 FA | 	rdword	result1, arg01 wz
228cc     80 00 90 AD |  if_e	jmp	#LR__3692
228d0     44 1E 06 F1 | 	add	local01, #68
228d4     0F 13 C2 FA | 	rdbyte	arg01, local01
228d8     44 1E 86 F1 | 	sub	local01, #68
228dc     01 12 86 F1 | 	sub	arg01, #1
228e0     02 12 16 F2 | 	cmp	arg01, #2 wc
228e4     68 00 90 3D |  if_ae	jmp	#LR__3692
228e8     34 1E 06 F1 | 	add	local01, #52
228ec     0F 13 02 F6 | 	mov	arg01, local01
228f0     34 1E 86 F1 | 	sub	local01, #52
228f4     11 12 06 F1 | 	add	arg01, #17
228f8                 | ' {
228f8                 | ' 
228f8                 | ' 	return *((WORD*)ptr);
228f8     09 FB E9 FA | 	rdword	result1, arg01 wz
228fc     50 00 90 AD |  if_e	jmp	#LR__3692
22900     34 1E 06 F1 | 	add	local01, #52
22904     0F 13 02 F6 | 	mov	arg01, local01
22908     34 1E 86 F1 | 	sub	local01, #52
2290c     13 12 06 F1 | 	add	arg01, #19
22910                 | ' {
22910                 | ' 
22910                 | ' 	return *((WORD*)ptr);
22910     09 FB E1 FA | 	rdword	result1, arg01
22914     FD 22 32 F9 | 	getword	local03, result1, #0
22918     80 22 16 F2 | 	cmp	local03, #128 wc
2291c     20 00 90 3D |  if_ae	jmp	#LR__3691
22920     34 1E 06 F1 | 	add	local01, #52
22924     0F 13 02 F6 | 	mov	arg01, local01
22928     34 1E 86 F1 | 	sub	local01, #52
2292c     20 12 06 F1 | 	add	arg01, #32
22930                 | ' {
22930                 | ' 
22930                 | ' 	return *((DWORD*)ptr);
22930     09 FB 01 FB | 	rdlong	result1, arg01
22934     80 00 00 FF 
22938     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2293c     10 00 90 CD |  if_b	jmp	#LR__3692
22940                 | LR__3691
22940     4A 1E 06 F1 | 	add	local01, #74
22944                 | ' {
22944                 | ' 
22944                 | ' 	return *((WORD*)ptr);
22944     0F FB E9 FA | 	rdword	result1, local01 wz
22948                 | ' 			&& b != 0 && (b & (b - 1)) == 0
22948                 | ' 			&& ld_word(fs->win +  14 ) != 0
22948                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
22948                 | ' 			&& ld_word(fs->win +  17 ) != 0
22948                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
22948                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
22948                 | ' 				return 0;
22948     00 FA 05 56 |  if_ne	mov	result1, #0
2294c     18 00 90 5D |  if_ne	jmp	#LR__3694
22950                 | LR__3692
22950                 | LR__3693
22950                 | ' 		}
22950                 | ' 	}
22950                 | ' 	return sign == 0xAA55 ? 2 : 3;
22950     10 23 32 F9 | 	getword	local03, local02, #0
22954     55 00 00 FF 
22958     55 22 0E F2 | 	cmp	local03, ##43605 wz
2295c     02 24 06 A6 |  if_e	mov	local04, #2
22960     03 24 06 56 |  if_ne	mov	local04, #3
22964     12 FB 01 F6 | 	mov	result1, local04
22968                 | LR__3694
22968     A7 F0 03 F6 | 	mov	ptra, fp
2296c     B2 00 A0 FD | 	call	#popregs_
22970                 | _fatfs_cc_check_fs_ret
22970     2D 00 64 FD | 	ret
22974                 | 
22974                 | _fatfs_cc_find_volume
22974     05 4A 05 F6 | 	mov	COUNT_, #5
22978     A8 00 A0 FD | 	call	#pushregs_
2297c     24 F0 07 F1 | 	add	ptra, #36
22980     09 1F 02 F6 | 	mov	local01, arg01
22984     0A 21 02 F6 | 	mov	local02, arg02
22988     0F 13 02 F6 | 	mov	arg01, local01
2298c     00 14 06 F6 | 	mov	arg02, #0
22990     08 FE BF FD | 	call	#_fatfs_cc_check_fs
22994     02 FA 0D F2 | 	cmp	result1, #2 wz
22998     0C 00 90 AD |  if_e	jmp	#LR__3700
2299c     03 FA 15 F2 | 	cmp	result1, #3 wc
229a0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
229a4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3708
229a8                 | LR__3700
229a8                 | ' 	for (i = 0; i < 4; i++) {
229a8     00 22 06 F6 | 	mov	local03, #0
229ac     97 26 48 FB | 	callpa	#(@LR__3702-@LR__3701)>>2,fcache_load_ptr_
229b0                 | LR__3701
229b0     04 22 16 F2 | 	cmp	local03, #4 wc
229b4     44 00 90 3D |  if_ae	jmp	#LR__3703
229b8     11 25 02 F6 | 	mov	local04, local03
229bc     02 24 66 F0 | 	shl	local04, #2
229c0     14 4E 05 F1 | 	add	fp, #20
229c4     A7 24 02 F1 | 	add	local04, fp
229c8     34 1E 06 F1 | 	add	local01, #52
229cc     0F 13 02 F6 | 	mov	arg01, local01
229d0     34 1E 86 F1 | 	sub	local01, #52
229d4     BE 13 06 F1 | 	add	arg01, #446
229d8     11 15 02 F6 | 	mov	arg02, local03
229dc     04 14 66 F0 | 	shl	arg02, #4
229e0     0A 13 02 F1 | 	add	arg01, arg02
229e4     08 12 06 F1 | 	add	arg01, #8
229e8                 | ' {
229e8                 | ' 
229e8                 | ' 	return *((DWORD*)ptr);
229e8     09 FB 01 FB | 	rdlong	result1, arg01
229ec     14 4E 85 F1 | 	sub	fp, #20
229f0     12 FB 61 FC | 	wrlong	result1, local04
229f4     01 22 06 F1 | 	add	local03, #1
229f8     B4 FF 9F FD | 	jmp	#LR__3701
229fc                 | LR__3702
229fc                 | LR__3703
229fc     00 20 0E F2 | 	cmp	local02, #0 wz
22a00     10 25 02 56 |  if_ne	mov	local04, local02
22a04     01 24 86 51 |  if_ne	sub	local04, #1
22a08     00 24 06 A6 |  if_e	mov	local04, #0
22a0c     12 23 02 F6 | 	mov	local03, local04
22a10                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
22a10                 | ' 	}
22a10                 | ' 	i = part ? part - 1 : 0;
22a10                 | ' 	do {
22a10                 | LR__3704
22a10     11 25 02 F6 | 	mov	local04, local03
22a14     02 24 66 F0 | 	shl	local04, #2
22a18     14 4E 05 F1 | 	add	fp, #20
22a1c     A7 24 02 F1 | 	add	local04, fp
22a20     12 25 0A FB | 	rdlong	local04, local04 wz
22a24     14 4E 85 F1 | 	sub	fp, #20
22a28     28 00 90 AD |  if_e	jmp	#LR__3705
22a2c     11 25 02 F6 | 	mov	local04, local03
22a30     02 24 66 F0 | 	shl	local04, #2
22a34     14 4E 05 F1 | 	add	fp, #20
22a38     A7 24 02 F1 | 	add	local04, fp
22a3c     12 15 02 FB | 	rdlong	arg02, local04
22a40     0F 13 02 F6 | 	mov	arg01, local01
22a44     14 4E 85 F1 | 	sub	fp, #20
22a48     50 FD BF FD | 	call	#_fatfs_cc_check_fs
22a4c     FD 24 02 F6 | 	mov	local04, result1
22a50     04 00 90 FD | 	jmp	#LR__3706
22a54                 | LR__3705
22a54     03 24 06 F6 | 	mov	local04, #3
22a58                 | LR__3706
22a58     12 27 02 F6 | 	mov	local05, local04
22a5c     00 20 0E F2 | 	cmp	local02, #0 wz
22a60     02 26 16 A2 |  if_e	cmp	local05, #2 wc
22a64     0C 00 90 8D |  if_c_and_z	jmp	#LR__3707
22a68     01 22 06 A1 |  if_e	add	local03, #1
22a6c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
22a70     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3704
22a74                 | LR__3707
22a74                 | ' 	return fmt;
22a74     13 FB 01 F6 | 	mov	result1, local05
22a78                 | LR__3708
22a78     A7 F0 03 F6 | 	mov	ptra, fp
22a7c     B2 00 A0 FD | 	call	#popregs_
22a80                 | _fatfs_cc_find_volume_ret
22a80     2D 00 64 FD | 	ret
22a84                 | 
22a84                 | _fatfs_cc_mount_volume
22a84     0B 4A 05 F6 | 	mov	COUNT_, #11
22a88     A8 00 A0 FD | 	call	#pushregs_
22a8c     0A 1F 02 F6 | 	mov	local01, arg02
22a90     0B 21 02 F6 | 	mov	local02, arg03
22a94     0F 01 68 FC | 	wrlong	#0, local01
22a98     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
22a9c     FD 22 02 F6 | 	mov	local03, result1
22aa0     00 22 56 F2 | 	cmps	local03, #0 wc
22aa4     0B FA 05 C6 |  if_b	mov	result1, #11
22aa8     3C 05 90 CD |  if_b	jmp	#LR__3720
22aac     11 17 02 F6 | 	mov	arg03, local03
22ab0     02 16 66 F0 | 	shl	arg03, #2
22ab4     F2 16 02 F1 | 	add	arg03, objptr
22ab8     0B 25 0A FB | 	rdlong	local04, arg03 wz
22abc     0C FA 05 A6 |  if_e	mov	result1, #12
22ac0     24 05 90 AD |  if_e	jmp	#LR__3720
22ac4     0F 25 62 FC | 	wrlong	local04, local01
22ac8     10 21 E2 F8 | 	getbyte	local02, local02, #0
22acc     FE 20 06 F5 | 	and	local02, #254
22ad0     12 17 CA FA | 	rdbyte	arg03, local04 wz
22ad4     4C 00 90 AD |  if_e	jmp	#LR__3711
22ad8     01 24 06 F1 | 	add	local04, #1
22adc     12 13 CA FA | 	rdbyte	arg01, local04 wz
22ae0     01 24 86 F1 | 	sub	local04, #1
22ae4     01 FA 05 56 |  if_ne	mov	result1, #1
22ae8                 | ' 
22ae8                 | ' 	return Stat;
22ae8     01 00 00 AF 
22aec     20 E4 05 A1 |  if_e	add	objptr, ##544
22af0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22af4     01 00 00 AF 
22af8     20 E4 85 A1 |  if_e	sub	objptr, ##544
22afc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
22b00     01 16 CE F7 | 	test	arg03, #1 wz
22b04     1C 00 90 5D |  if_ne	jmp	#LR__3710
22b08     00 20 0E F2 | 	cmp	local02, #0 wz
22b0c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
22b10     04 FA CD 57 |  if_ne	test	result1, #4 wz
22b14                 | ' 				return FR_WRITE_PROTECTED;
22b14     0A FA 05 56 |  if_ne	mov	result1, #10
22b18     CC 04 90 5D |  if_ne	jmp	#LR__3720
22b1c                 | ' 			}
22b1c                 | ' 			return FR_OK;
22b1c     00 FA 05 F6 | 	mov	result1, #0
22b20     C4 04 90 FD | 	jmp	#LR__3720
22b24                 | LR__3710
22b24                 | LR__3711
22b24     12 01 48 FC | 	wrbyte	#0, local04
22b28     01 24 06 F1 | 	add	local04, #1
22b2c     12 23 42 FC | 	wrbyte	local03, local04
22b30     12 13 C2 FA | 	rdbyte	arg01, local04
22b34     01 24 86 F1 | 	sub	local04, #1
22b38     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
22b3c     FD 16 02 F6 | 	mov	arg03, result1
22b40     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
22b44     01 26 CE F7 | 	test	local05, #1 wz
22b48                 | ' 		return FR_NOT_READY;
22b48     03 FA 05 56 |  if_ne	mov	result1, #3
22b4c     98 04 90 5D |  if_ne	jmp	#LR__3720
22b50     00 20 0E F2 | 	cmp	local02, #0 wz
22b54     0B 27 02 56 |  if_ne	mov	local05, arg03
22b58     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
22b5c     04 26 CE 57 |  if_ne	test	local05, #4 wz
22b60                 | ' 		return FR_WRITE_PROTECTED;
22b60     0A FA 05 56 |  if_ne	mov	result1, #10
22b64     80 04 90 5D |  if_ne	jmp	#LR__3720
22b68     12 13 02 F6 | 	mov	arg01, local04
22b6c     00 14 06 F6 | 	mov	arg02, #0
22b70     00 FE BF FD | 	call	#_fatfs_cc_find_volume
22b74     FD 12 02 F6 | 	mov	arg01, result1
22b78     04 12 0E F2 | 	cmp	arg01, #4 wz
22b7c     01 FA 05 A6 |  if_e	mov	result1, #1
22b80     64 04 90 AD |  if_e	jmp	#LR__3720
22b84     02 12 16 F2 | 	cmp	arg01, #2 wc
22b88     0D FA 05 36 |  if_ae	mov	result1, #13
22b8c     58 04 90 3D |  if_ae	jmp	#LR__3720
22b90     30 24 06 F1 | 	add	local04, #48
22b94     12 29 02 FB | 	rdlong	local06, local04
22b98     04 24 06 F1 | 	add	local04, #4
22b9c     12 13 02 F6 | 	mov	arg01, local04
22ba0     34 24 86 F1 | 	sub	local04, #52
22ba4     0B 12 06 F1 | 	add	arg01, #11
22ba8                 | ' {
22ba8                 | ' 
22ba8                 | ' 	return *((WORD*)ptr);
22ba8     09 FB E1 FA | 	rdword	result1, arg01
22bac     01 00 00 FF 
22bb0     00 FA 0D F2 | 	cmp	result1, ##512 wz
22bb4     0D FA 05 56 |  if_ne	mov	result1, #13
22bb8     2C 04 90 5D |  if_ne	jmp	#LR__3720
22bbc     34 24 06 F1 | 	add	local04, #52
22bc0     12 13 02 F6 | 	mov	arg01, local04
22bc4     34 24 86 F1 | 	sub	local04, #52
22bc8     16 12 06 F1 | 	add	arg01, #22
22bcc                 | ' {
22bcc                 | ' 
22bcc                 | ' 	return *((WORD*)ptr);
22bcc     09 FB E1 FA | 	rdword	result1, arg01
22bd0     FD 2A 0A F6 | 	mov	local07, result1 wz
22bd4     18 00 90 5D |  if_ne	jmp	#LR__3712
22bd8     34 24 06 F1 | 	add	local04, #52
22bdc     12 13 02 F6 | 	mov	arg01, local04
22be0     34 24 86 F1 | 	sub	local04, #52
22be4     24 12 06 F1 | 	add	arg01, #36
22be8                 | ' {
22be8                 | ' 
22be8                 | ' 	return *((DWORD*)ptr);
22be8     09 FB 01 FB | 	rdlong	result1, arg01
22bec     FD 2A 02 F6 | 	mov	local07, result1
22bf0                 | LR__3712
22bf0     1C 24 06 F1 | 	add	local04, #28
22bf4     12 2B 62 FC | 	wrlong	local07, local04
22bf8     28 24 06 F1 | 	add	local04, #40
22bfc     12 27 C2 FA | 	rdbyte	local05, local04
22c00     42 24 86 F1 | 	sub	local04, #66
22c04     12 27 42 FC | 	wrbyte	local05, local04
22c08     12 27 C2 FA | 	rdbyte	local05, local04
22c0c     02 24 86 F1 | 	sub	local04, #2
22c10     01 26 0E F2 | 	cmp	local05, #1 wz
22c14     02 24 06 51 |  if_ne	add	local04, #2
22c18     12 27 C2 5A |  if_ne	rdbyte	local05, local04
22c1c     02 24 86 51 |  if_ne	sub	local04, #2
22c20     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
22c24     0D FA 05 56 |  if_ne	mov	result1, #13
22c28     BC 03 90 5D |  if_ne	jmp	#LR__3720
22c2c     02 24 06 F1 | 	add	local04, #2
22c30     12 27 C2 FA | 	rdbyte	local05, local04
22c34     13 2B 02 FD | 	qmul	local07, local05
22c38     3F 24 06 F1 | 	add	local04, #63
22c3c     12 27 C2 FA | 	rdbyte	local05, local04
22c40     37 24 86 F1 | 	sub	local04, #55
22c44     12 27 52 FC | 	wrword	local05, local04
22c48     12 27 EA FA | 	rdword	local05, local04 wz
22c4c     0A 24 86 F1 | 	sub	local04, #10
22c50     18 2A 62 FD | 	getqx	local07
22c54     20 00 90 AD |  if_e	jmp	#LR__3713
22c58     0A 24 06 F1 | 	add	local04, #10
22c5c     12 27 E2 FA | 	rdword	local05, local04
22c60     13 23 32 F9 | 	getword	local03, local05, #0
22c64     0A 24 86 F1 | 	sub	local04, #10
22c68     13 27 32 F9 | 	getword	local05, local05, #0
22c6c     01 26 86 F1 | 	sub	local05, #1
22c70     13 23 CA F7 | 	test	local03, local05 wz
22c74     08 00 90 AD |  if_e	jmp	#LR__3714
22c78                 | LR__3713
22c78     0D FA 05 F6 | 	mov	result1, #13
22c7c     68 03 90 FD | 	jmp	#LR__3720
22c80                 | LR__3714
22c80     34 24 06 F1 | 	add	local04, #52
22c84     12 13 02 F6 | 	mov	arg01, local04
22c88     11 12 06 F1 | 	add	arg01, #17
22c8c                 | ' {
22c8c                 | ' 
22c8c                 | ' 	return *((WORD*)ptr);
22c8c     09 FB E1 FA | 	rdword	result1, arg01
22c90     2C 24 86 F1 | 	sub	local04, #44
22c94     12 FB 51 FC | 	wrword	result1, local04
22c98     12 27 E2 FA | 	rdword	local05, local04
22c9c     08 24 86 F1 | 	sub	local04, #8
22ca0     13 13 52 F6 | 	abs	arg01, local05 wc
22ca4     09 13 42 F8 | 	getnib	arg01, arg01, #0
22ca8     09 13 8A F6 | 	negc	arg01, arg01 wz
22cac     0D FA 05 56 |  if_ne	mov	result1, #13
22cb0     34 03 90 5D |  if_ne	jmp	#LR__3720
22cb4     34 24 06 F1 | 	add	local04, #52
22cb8     12 13 02 F6 | 	mov	arg01, local04
22cbc     34 24 86 F1 | 	sub	local04, #52
22cc0     13 12 06 F1 | 	add	arg01, #19
22cc4                 | ' {
22cc4                 | ' 
22cc4                 | ' 	return *((WORD*)ptr);
22cc4     09 FB E1 FA | 	rdword	result1, arg01
22cc8     FD 2C 0A F6 | 	mov	local08, result1 wz
22ccc     34 24 06 A1 |  if_e	add	local04, #52
22cd0     12 13 02 A6 |  if_e	mov	arg01, local04
22cd4     34 24 86 A1 |  if_e	sub	local04, #52
22cd8     20 12 06 A1 |  if_e	add	arg01, #32
22cdc                 | ' {
22cdc                 | ' 
22cdc                 | ' 	return *((DWORD*)ptr);
22cdc     09 2D 02 AB |  if_e	rdlong	local08, arg01
22ce0     34 24 06 F1 | 	add	local04, #52
22ce4     12 13 02 F6 | 	mov	arg01, local04
22ce8     34 24 86 F1 | 	sub	local04, #52
22cec     0E 12 06 F1 | 	add	arg01, #14
22cf0                 | ' {
22cf0                 | ' 
22cf0                 | ' 	return *((WORD*)ptr);
22cf0     09 FB E1 FA | 	rdword	result1, arg01
22cf4     FD 12 02 F6 | 	mov	arg01, result1
22cf8     09 27 02 F6 | 	mov	local05, arg01
22cfc     0F 26 4E F7 | 	zerox	local05, #15 wz
22d00     0D FA 05 A6 |  if_e	mov	result1, #13
22d04     E0 02 90 AD |  if_e	jmp	#LR__3720
22d08     09 2F 32 F9 | 	getword	local09, arg01, #0
22d0c     15 2F 02 F1 | 	add	local09, local07
22d10     08 24 06 F1 | 	add	local04, #8
22d14     12 27 E2 FA | 	rdword	local05, local04
22d18     08 24 86 F1 | 	sub	local04, #8
22d1c     13 27 52 F6 | 	abs	local05, local05 wc
22d20     04 26 46 F0 | 	shr	local05, #4
22d24     13 2F 82 F3 | 	sumc	local09, local05
22d28     17 2D 12 F2 | 	cmp	local08, local09 wc
22d2c     0D FA 05 C6 |  if_b	mov	result1, #13
22d30     B4 02 90 CD |  if_b	jmp	#LR__3720
22d34     17 2D 82 F1 | 	sub	local08, local09
22d38     0A 24 06 F1 | 	add	local04, #10
22d3c     12 27 E2 FA | 	rdword	local05, local04
22d40     13 2D 12 FD | 	qdiv	local08, local05
22d44     0A 24 86 F1 | 	sub	local04, #10
22d48     18 26 62 FD | 	getqx	local05
22d4c     00 26 0E F2 | 	cmp	local05, #0 wz
22d50     0D FA 05 A6 |  if_e	mov	result1, #13
22d54     90 02 90 AD |  if_e	jmp	#LR__3720
22d58     00 30 06 F6 | 	mov	local10, #0
22d5c     FF FF 07 FF 
22d60     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
22d64     03 30 06 C6 |  if_b	mov	local10, #3
22d68     7F 00 00 FF 
22d6c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
22d70     02 30 06 C6 |  if_b	mov	local10, #2
22d74     07 00 00 FF 
22d78     F6 27 16 F2 | 	cmp	local05, ##4086 wc
22d7c     01 30 06 C6 |  if_b	mov	local10, #1
22d80     00 30 0E F2 | 	cmp	local10, #0 wz
22d84     0D FA 05 A6 |  if_e	mov	result1, #13
22d88     5C 02 90 AD |  if_e	jmp	#LR__3720
22d8c     02 26 06 F1 | 	add	local05, #2
22d90     18 24 06 F1 | 	add	local04, #24
22d94     12 27 62 FC | 	wrlong	local05, local04
22d98     08 24 06 F1 | 	add	local04, #8
22d9c     12 29 62 FC | 	wrlong	local06, local04
22da0     14 27 02 F6 | 	mov	local05, local06
22da4     09 13 32 F9 | 	getword	arg01, arg01, #0
22da8     09 27 02 F1 | 	add	local05, arg01
22dac     04 24 06 F1 | 	add	local04, #4
22db0     12 27 62 FC | 	wrlong	local05, local04
22db4     14 27 02 F6 | 	mov	local05, local06
22db8     17 27 02 F1 | 	add	local05, local09
22dbc     08 24 06 F1 | 	add	local04, #8
22dc0     12 27 62 FC | 	wrlong	local05, local04
22dc4     2C 24 86 F1 | 	sub	local04, #44
22dc8     03 30 0E F2 | 	cmp	local10, #3 wz
22dcc     5C 00 90 5D |  if_ne	jmp	#LR__3715
22dd0     34 24 06 F1 | 	add	local04, #52
22dd4     12 13 02 F6 | 	mov	arg01, local04
22dd8     34 24 86 F1 | 	sub	local04, #52
22ddc     2A 12 06 F1 | 	add	arg01, #42
22de0                 | ' {
22de0                 | ' 
22de0                 | ' 	return *((WORD*)ptr);
22de0     09 FB E9 FA | 	rdword	result1, arg01 wz
22de4     0D FA 05 56 |  if_ne	mov	result1, #13
22de8     FC 01 90 5D |  if_ne	jmp	#LR__3720
22dec     08 24 06 F1 | 	add	local04, #8
22df0     12 27 EA FA | 	rdword	local05, local04 wz
22df4     08 24 86 F1 | 	sub	local04, #8
22df8     0D FA 05 56 |  if_ne	mov	result1, #13
22dfc     E8 01 90 5D |  if_ne	jmp	#LR__3720
22e00     34 24 06 F1 | 	add	local04, #52
22e04     12 13 02 F6 | 	mov	arg01, local04
22e08     2C 12 06 F1 | 	add	arg01, #44
22e0c                 | ' {
22e0c                 | ' 
22e0c                 | ' 	return *((DWORD*)ptr);
22e0c     09 FB 01 FB | 	rdlong	result1, arg01
22e10     0C 24 86 F1 | 	sub	local04, #12
22e14     12 FB 61 FC | 	wrlong	result1, local04
22e18     10 24 86 F1 | 	sub	local04, #16
22e1c     12 33 02 FB | 	rdlong	local11, local04
22e20     18 24 86 F1 | 	sub	local04, #24
22e24     02 32 66 F0 | 	shl	local11, #2
22e28     6C 00 90 FD | 	jmp	#LR__3717
22e2c                 | LR__3715
22e2c     08 24 06 F1 | 	add	local04, #8
22e30     12 27 EA FA | 	rdword	local05, local04 wz
22e34     08 24 86 F1 | 	sub	local04, #8
22e38     0D FA 05 A6 |  if_e	mov	result1, #13
22e3c     A8 01 90 AD |  if_e	jmp	#LR__3720
22e40     24 24 06 F1 | 	add	local04, #36
22e44     12 27 02 FB | 	rdlong	local05, local04
22e48     15 27 02 F1 | 	add	local05, local07
22e4c     04 24 06 F1 | 	add	local04, #4
22e50     12 27 62 FC | 	wrlong	local05, local04
22e54     28 24 86 F1 | 	sub	local04, #40
22e58     02 30 0E F2 | 	cmp	local10, #2 wz
22e5c     18 24 06 A1 |  if_e	add	local04, #24
22e60     12 27 02 AB |  if_e	rdlong	local05, local04
22e64     18 24 86 A1 |  if_e	sub	local04, #24
22e68     01 26 66 A0 |  if_e	shl	local05, #1
22e6c     24 00 90 AD |  if_e	jmp	#LR__3716
22e70     18 24 06 F1 | 	add	local04, #24
22e74     12 33 02 FB | 	rdlong	local11, local04
22e78     19 27 02 F6 | 	mov	local05, local11
22e7c     01 26 66 F0 | 	shl	local05, #1
22e80     19 27 02 F1 | 	add	local05, local11
22e84     01 26 46 F0 | 	shr	local05, #1
22e88     18 24 86 F1 | 	sub	local04, #24
22e8c     01 32 06 F5 | 	and	local11, #1
22e90     19 27 02 F1 | 	add	local05, local11
22e94                 | LR__3716
22e94     13 33 02 F6 | 	mov	local11, local05
22e98                 | LR__3717
22e98     FF 33 06 F1 | 	add	local11, #511
22e9c     09 32 46 F0 | 	shr	local11, #9
22ea0     1C 24 06 F1 | 	add	local04, #28
22ea4     12 17 02 FB | 	rdlong	arg03, local04
22ea8     1C 24 86 F1 | 	sub	local04, #28
22eac     19 17 12 F2 | 	cmp	arg03, local11 wc
22eb0     0D FA 05 C6 |  if_b	mov	result1, #13
22eb4     30 01 90 CD |  if_b	jmp	#LR__3720
22eb8     14 24 06 F1 | 	add	local04, #20
22ebc     FF FF FF FF 
22ec0     12 FF 6B FC | 	wrlong	##-1, local04
22ec4     04 24 86 F1 | 	sub	local04, #4
22ec8     FF FF FF FF 
22ecc     12 FF 6B FC | 	wrlong	##-1, local04
22ed0     0C 24 86 F1 | 	sub	local04, #12
22ed4     12 01 49 FC | 	wrbyte	#128, local04
22ed8     04 24 86 F1 | 	sub	local04, #4
22edc     03 30 0E F2 | 	cmp	local10, #3 wz
22ee0     D0 00 90 5D |  if_ne	jmp	#LR__3719
22ee4     34 24 06 F1 | 	add	local04, #52
22ee8     12 13 02 F6 | 	mov	arg01, local04
22eec     34 24 86 F1 | 	sub	local04, #52
22ef0     30 12 06 F1 | 	add	arg01, #48
22ef4                 | ' {
22ef4                 | ' 
22ef4                 | ' 	return *((WORD*)ptr);
22ef4     09 FB E1 FA | 	rdword	result1, arg01
22ef8     FD 26 32 F9 | 	getword	local05, result1, #0
22efc     01 26 0E F2 | 	cmp	local05, #1 wz
22f00     B0 00 90 5D |  if_ne	jmp	#LR__3719
22f04     01 28 06 F1 | 	add	local06, #1
22f08     12 13 02 F6 | 	mov	arg01, local04
22f0c     14 15 02 F6 | 	mov	arg02, local06
22f10     CC CD BF FD | 	call	#_fatfs_cc_move_window
22f14     00 FA 0D F2 | 	cmp	result1, #0 wz
22f18     98 00 90 5D |  if_ne	jmp	#LR__3719
22f1c     04 24 06 F1 | 	add	local04, #4
22f20     12 01 48 FC | 	wrbyte	#0, local04
22f24     30 24 06 F1 | 	add	local04, #48
22f28     12 13 02 F6 | 	mov	arg01, local04
22f2c     34 24 86 F1 | 	sub	local04, #52
22f30     FE 13 06 F1 | 	add	arg01, #510
22f34                 | ' {
22f34                 | ' 
22f34                 | ' 	return *((WORD*)ptr);
22f34     09 FB E1 FA | 	rdword	result1, arg01
22f38     FD 26 32 F9 | 	getword	local05, result1, #0
22f3c     55 00 00 FF 
22f40     55 26 0E F2 | 	cmp	local05, ##43605 wz
22f44     34 24 06 A1 |  if_e	add	local04, #52
22f48     12 13 02 A6 |  if_e	mov	arg01, local04
22f4c     34 24 86 A1 |  if_e	sub	local04, #52
22f50                 | ' {
22f50                 | ' 
22f50                 | ' 	return *((DWORD*)ptr);
22f50     09 FB 01 AB |  if_e	rdlong	result1, arg01
22f54     A9 B0 20 AF 
22f58     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
22f5c     54 00 90 5D |  if_ne	jmp	#LR__3718
22f60     34 24 06 F1 | 	add	local04, #52
22f64     12 13 02 F6 | 	mov	arg01, local04
22f68     34 24 86 F1 | 	sub	local04, #52
22f6c     E4 13 06 F1 | 	add	arg01, #484
22f70                 | ' {
22f70                 | ' 
22f70                 | ' 	return *((DWORD*)ptr);
22f70     09 FB 01 FB | 	rdlong	result1, arg01
22f74     B9 A0 30 FF 
22f78     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
22f7c     34 00 90 5D |  if_ne	jmp	#LR__3718
22f80     34 24 06 F1 | 	add	local04, #52
22f84     12 13 02 F6 | 	mov	arg01, local04
22f88     E8 13 06 F1 | 	add	arg01, #488
22f8c                 | ' {
22f8c                 | ' 
22f8c                 | ' 	return *((DWORD*)ptr);
22f8c     09 FB 01 FB | 	rdlong	result1, arg01
22f90     20 24 86 F1 | 	sub	local04, #32
22f94     12 FB 61 FC | 	wrlong	result1, local04
22f98     20 24 06 F1 | 	add	local04, #32
22f9c     12 13 02 F6 | 	mov	arg01, local04
22fa0     EC 13 06 F1 | 	add	arg01, #492
22fa4                 | ' {
22fa4                 | ' 
22fa4                 | ' 	return *((DWORD*)ptr);
22fa4     09 FB 01 FB | 	rdlong	result1, arg01
22fa8     24 24 86 F1 | 	sub	local04, #36
22fac     12 FB 61 FC | 	wrlong	result1, local04
22fb0     10 24 86 F1 | 	sub	local04, #16
22fb4                 | LR__3718
22fb4                 | LR__3719
22fb4     12 31 42 FC | 	wrbyte	local10, local04
22fb8     04 E4 05 F1 | 	add	objptr, #4
22fbc     F2 26 E2 FA | 	rdword	local05, objptr
22fc0     01 26 06 F1 | 	add	local05, #1
22fc4     F2 26 52 FC | 	wrword	local05, objptr
22fc8     F2 32 E2 FA | 	rdword	local11, objptr
22fcc     06 24 06 F1 | 	add	local04, #6
22fd0     12 33 52 FC | 	wrword	local11, local04
22fd4     04 E4 05 F1 | 	add	objptr, #4
22fd8     06 24 06 F1 | 	add	local04, #6
22fdc     12 E5 61 FC | 	wrlong	objptr, local04
22fe0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
22fe0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
22fe0                 | ' 			{
22fe0                 | ' 
22fe0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
22fe0                 | ' 
22fe0                 | ' 
22fe0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
22fe0                 | ' 
22fe0                 | ' 			}
22fe0                 | ' 		}
22fe0                 | ' 
22fe0                 | ' 
22fe0                 | ' 	}
22fe0                 | ' 
22fe0                 | ' 	fs->fs_type = (BYTE)fmt;
22fe0                 | ' 	fs->id = ++Fsid;
22fe0                 | ' 
22fe0                 | ' 	fs->lfnbuf = LfnBuf;
22fe0                 | ' #line 3567 "ff.c"
22fe0                 | ' 	return FR_OK;
22fe0     00 FA 05 F6 | 	mov	result1, #0
22fe4     08 E4 85 F1 | 	sub	objptr, #8
22fe8                 | LR__3720
22fe8     A7 F0 03 F6 | 	mov	ptra, fp
22fec     B2 00 A0 FD | 	call	#popregs_
22ff0                 | _fatfs_cc_mount_volume_ret
22ff0     2D 00 64 FD | 	ret
22ff4                 | 
22ff4                 | _fatfs_cc_validate
22ff4     09 01 0A F6 | 	mov	_var01, arg01 wz
22ff8     09 02 06 F6 | 	mov	_var02, #9
22ffc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
23000     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
23004     50 00 90 AD |  if_e	jmp	#LR__3730
23008     04 00 06 F1 | 	add	_var01, #4
2300c     00 07 E2 FA | 	rdword	_var04, _var01
23010     04 00 86 F1 | 	sub	_var01, #4
23014     00 13 02 FB | 	rdlong	arg01, _var01
23018     06 12 06 F1 | 	add	arg01, #6
2301c     09 FB E1 FA | 	rdword	result1, arg01
23020     FD 06 0A F2 | 	cmp	_var04, result1 wz
23024     30 00 90 5D |  if_ne	jmp	#LR__3730
23028     00 07 02 FB | 	rdlong	_var04, _var01
2302c     01 06 06 F1 | 	add	_var04, #1
23030     03 13 CA FA | 	rdbyte	arg01, _var04 wz
23034     01 FA 05 56 |  if_ne	mov	result1, #1
23038                 | ' 
23038                 | ' 	return Stat;
23038     01 00 00 AF 
2303c     20 E4 05 A1 |  if_e	add	objptr, ##544
23040     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23044     01 00 00 AF 
23048     20 E4 85 A1 |  if_e	sub	objptr, ##544
2304c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
23050     01 04 CE F7 | 	test	_var03, #1 wz
23054     00 02 06 A6 |  if_e	mov	_var02, #0
23058                 | LR__3730
23058     00 02 0E F2 | 	cmp	_var02, #0 wz
2305c     00 05 02 AB |  if_e	rdlong	_var03, _var01
23060     00 04 06 56 |  if_ne	mov	_var03, #0
23064     0A 05 62 FC | 	wrlong	_var03, arg02
23068                 | ' 			res = FR_OK;
23068                 | ' 		}
23068                 | ' 
23068                 | ' 	}
23068                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
23068                 | ' 	return res;
23068     01 FB 01 F6 | 	mov	result1, _var02
2306c                 | _fatfs_cc_validate_ret
2306c     2D 00 64 FD | 	ret
23070                 | 
23070                 | _fatfs_cc_f_mount
23070     01 4A 05 F6 | 	mov	COUNT_, #1
23074     A8 00 A0 FD | 	call	#pushregs_
23078     20 F0 07 F1 | 	add	ptra, #32
2307c     04 4E 05 F1 | 	add	fp, #4
23080     A7 12 62 FC | 	wrlong	arg01, fp
23084     04 4E 05 F1 | 	add	fp, #4
23088     A7 14 62 FC | 	wrlong	arg02, fp
2308c     04 4E 05 F1 | 	add	fp, #4
23090     A7 16 42 FC | 	wrbyte	arg03, fp
23094     04 4E 85 F1 | 	sub	fp, #4
23098     A7 16 02 FB | 	rdlong	arg03, fp
2309c     14 4E 05 F1 | 	add	fp, #20
230a0     A7 16 62 FC | 	wrlong	arg03, fp
230a4     A7 12 02 F6 | 	mov	arg01, fp
230a8     1C 4E 85 F1 | 	sub	fp, #28
230ac     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
230b0     14 4E 05 F1 | 	add	fp, #20
230b4     A7 FA 61 FC | 	wrlong	result1, fp
230b8     14 4E 85 F1 | 	sub	fp, #20
230bc     00 FA 55 F2 | 	cmps	result1, #0 wc
230c0     0B FA 05 C6 |  if_b	mov	result1, #11
230c4     C0 00 90 CD |  if_b	jmp	#LR__3741
230c8     14 4E 05 F1 | 	add	fp, #20
230cc     A7 16 02 FB | 	rdlong	arg03, fp
230d0     02 16 66 F0 | 	shl	arg03, #2
230d4     F2 16 02 F1 | 	add	arg03, objptr
230d8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
230dc     04 4E 85 F1 | 	sub	fp, #4
230e0     A7 16 62 FC | 	wrlong	arg03, fp
230e4     10 4E 85 F1 | 	sub	fp, #16
230e8     28 00 90 AD |  if_e	jmp	#LR__3740
230ec     10 4E 05 F1 | 	add	fp, #16
230f0     A7 16 02 FB | 	rdlong	arg03, fp
230f4     10 4E 85 F1 | 	sub	fp, #16
230f8     01 16 06 F1 | 	add	arg03, #1
230fc     0B 13 C2 FA | 	rdbyte	arg01, arg03
23100     28 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
23104     10 4E 05 F1 | 	add	fp, #16
23108     A7 16 02 FB | 	rdlong	arg03, fp
2310c     10 4E 85 F1 | 	sub	fp, #16
23110     0B 01 48 FC | 	wrbyte	#0, arg03
23114                 | LR__3740
23114     04 4E 05 F1 | 	add	fp, #4
23118     A7 1E 0A FB | 	rdlong	local01, fp wz
2311c     04 4E 85 F1 | 	sub	fp, #4
23120     04 4E 05 51 |  if_ne	add	fp, #4
23124     A7 1E 02 5B |  if_ne	rdlong	local01, fp
23128     04 4E 85 51 |  if_ne	sub	fp, #4
2312c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
23130     14 4E 05 F1 | 	add	fp, #20
23134     A7 1E 02 FB | 	rdlong	local01, fp
23138     02 1E 66 F0 | 	shl	local01, #2
2313c     F2 1E 02 F1 | 	add	local01, objptr
23140     10 4E 85 F1 | 	sub	fp, #16
23144     A7 16 02 FB | 	rdlong	arg03, fp
23148     0F 17 62 FC | 	wrlong	arg03, local01
2314c     08 4E 05 F1 | 	add	fp, #8
23150     A7 1E CA FA | 	rdbyte	local01, fp wz
23154     0C 4E 85 F1 | 	sub	fp, #12
23158     00 FA 05 A6 |  if_e	mov	result1, #0
2315c     28 00 90 AD |  if_e	jmp	#LR__3741
23160     08 4E 05 F1 | 	add	fp, #8
23164     A7 12 02 F6 | 	mov	arg01, fp
23168     04 4E 85 F1 | 	sub	fp, #4
2316c     A7 14 02 F6 | 	mov	arg02, fp
23170     04 4E 85 F1 | 	sub	fp, #4
23174     00 16 06 F6 | 	mov	arg03, #0
23178     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2317c     18 4E 05 F1 | 	add	fp, #24
23180     A7 FA 61 FC | 	wrlong	result1, fp
23184                 | ' 
23184                 | ' 	res = mount_volume(&path, &fs, 0);
23184                 | ' 	return res ;
23184     18 4E 85 F1 | 	sub	fp, #24
23188                 | LR__3741
23188     A7 F0 03 F6 | 	mov	ptra, fp
2318c     B2 00 A0 FD | 	call	#popregs_
23190                 | _fatfs_cc_f_mount_ret
23190     2D 00 64 FD | 	ret
23194                 | 
23194                 | _fatfs_cc_f_open
23194     02 4A 05 F6 | 	mov	COUNT_, #2
23198     A8 00 A0 FD | 	call	#pushregs_
2319c     60 F0 07 F1 | 	add	ptra, #96
231a0     04 4E 05 F1 | 	add	fp, #4
231a4     A7 12 62 FC | 	wrlong	arg01, fp
231a8     04 4E 05 F1 | 	add	fp, #4
231ac     A7 14 62 FC | 	wrlong	arg02, fp
231b0     04 4E 05 F1 | 	add	fp, #4
231b4     A7 16 42 FC | 	wrbyte	arg03, fp
231b8     08 4E 85 F1 | 	sub	fp, #8
231bc     A7 18 0A FB | 	rdlong	arg04, fp wz
231c0     04 4E 85 F1 | 	sub	fp, #4
231c4     09 FA 05 A6 |  if_e	mov	result1, #9
231c8     98 06 90 AD |  if_e	jmp	#LR__3767
231cc     0C 4E 05 F1 | 	add	fp, #12
231d0     A7 18 C2 FA | 	rdbyte	arg04, fp
231d4     3F 18 06 F5 | 	and	arg04, #63
231d8     A7 18 42 FC | 	wrbyte	arg04, fp
231dc     04 4E 85 F1 | 	sub	fp, #4
231e0     A7 12 02 F6 | 	mov	arg01, fp
231e4     3C 4E 05 F1 | 	add	fp, #60
231e8     A7 14 02 F6 | 	mov	arg02, fp
231ec     38 4E 85 F1 | 	sub	fp, #56
231f0     A7 16 C2 FA | 	rdbyte	arg03, fp
231f4     0C 4E 85 F1 | 	sub	fp, #12
231f8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
231fc     10 4E 05 F1 | 	add	fp, #16
23200     A7 FA 61 FC | 	wrlong	result1, fp
23204     10 4E 85 F1 | 	sub	fp, #16
23208     00 FA 0D F2 | 	cmp	result1, #0 wz
2320c     2C 06 90 5D |  if_ne	jmp	#LR__3766
23210     44 4E 05 F1 | 	add	fp, #68
23214     A7 18 02 FB | 	rdlong	arg04, fp
23218     30 4E 85 F1 | 	sub	fp, #48
2321c     A7 18 62 FC | 	wrlong	arg04, fp
23220     A7 12 02 F6 | 	mov	arg01, fp
23224     0C 4E 85 F1 | 	sub	fp, #12
23228     A7 1E 02 FB | 	rdlong	local01, fp
2322c     08 4E 85 F1 | 	sub	fp, #8
23230     0F 15 02 F6 | 	mov	arg02, local01
23234     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
23238     10 4E 05 F1 | 	add	fp, #16
2323c     A7 FA 61 FC | 	wrlong	result1, fp
23240     10 4E 85 F1 | 	sub	fp, #16
23244     00 FA 0D F2 | 	cmp	result1, #0 wz
23248     1C 00 90 5D |  if_ne	jmp	#LR__3750
2324c     3F 4E 05 F1 | 	add	fp, #63
23250     A7 18 C2 FA | 	rdbyte	arg04, fp
23254     3F 4E 85 F1 | 	sub	fp, #63
23258     80 18 CE F7 | 	test	arg04, #128 wz
2325c     10 4E 05 51 |  if_ne	add	fp, #16
23260     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23264     10 4E 85 51 |  if_ne	sub	fp, #16
23268                 | LR__3750
23268     0C 4E 05 F1 | 	add	fp, #12
2326c     A7 18 C2 FA | 	rdbyte	arg04, fp
23270     0C 4E 85 F1 | 	sub	fp, #12
23274     1C 18 CE F7 | 	test	arg04, #28 wz
23278     F0 01 90 AD |  if_e	jmp	#LR__3755
2327c     10 4E 05 F1 | 	add	fp, #16
23280     A7 1E 0A FB | 	rdlong	local01, fp wz
23284     10 4E 85 F1 | 	sub	fp, #16
23288     48 00 90 AD |  if_e	jmp	#LR__3752
2328c     10 4E 05 F1 | 	add	fp, #16
23290     A7 18 02 FB | 	rdlong	arg04, fp
23294     10 4E 85 F1 | 	sub	fp, #16
23298     04 18 0E F2 | 	cmp	arg04, #4 wz
2329c     1C 00 90 5D |  if_ne	jmp	#LR__3751
232a0     14 4E 05 F1 | 	add	fp, #20
232a4     A7 12 02 F6 | 	mov	arg01, fp
232a8     14 4E 85 F1 | 	sub	fp, #20
232ac     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
232b0     10 4E 05 F1 | 	add	fp, #16
232b4     A7 FA 61 FC | 	wrlong	result1, fp
232b8     10 4E 85 F1 | 	sub	fp, #16
232bc                 | LR__3751
232bc     0C 4E 05 F1 | 	add	fp, #12
232c0     A7 1E C2 FA | 	rdbyte	local01, fp
232c4     08 1E 46 F5 | 	or	local01, #8
232c8     A7 1E 42 FC | 	wrbyte	local01, fp
232cc     0C 4E 85 F1 | 	sub	fp, #12
232d0     3C 00 90 FD | 	jmp	#LR__3754
232d4                 | LR__3752
232d4     1A 4E 05 F1 | 	add	fp, #26
232d8     A7 1E C2 FA | 	rdbyte	local01, fp
232dc     1A 4E 85 F1 | 	sub	fp, #26
232e0     11 1E CE F7 | 	test	local01, #17 wz
232e4     10 4E 05 51 |  if_ne	add	fp, #16
232e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
232ec     10 4E 85 51 |  if_ne	sub	fp, #16
232f0     1C 00 90 5D |  if_ne	jmp	#LR__3753
232f4     0C 4E 05 F1 | 	add	fp, #12
232f8     A7 1E C2 FA | 	rdbyte	local01, fp
232fc     0C 4E 85 F1 | 	sub	fp, #12
23300     04 1E CE F7 | 	test	local01, #4 wz
23304     10 4E 05 51 |  if_ne	add	fp, #16
23308     A7 10 68 5C |  if_ne	wrlong	#8, fp
2330c     10 4E 85 51 |  if_ne	sub	fp, #16
23310                 | LR__3753
23310                 | LR__3754
23310     10 4E 05 F1 | 	add	fp, #16
23314     A7 1E 0A FB | 	rdlong	local01, fp wz
23318     10 4E 85 F1 | 	sub	fp, #16
2331c     A8 01 90 5D |  if_ne	jmp	#LR__3758
23320     0C 4E 05 F1 | 	add	fp, #12
23324     A7 1E C2 FA | 	rdbyte	local01, fp
23328     0C 4E 85 F1 | 	sub	fp, #12
2332c     08 1E CE F7 | 	test	local01, #8 wz
23330     94 01 90 AD |  if_e	jmp	#LR__3758
23334     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
23338     54 4E 05 F1 | 	add	fp, #84
2333c     A7 FA 61 FC | 	wrlong	result1, fp
23340     24 4E 85 F1 | 	sub	fp, #36
23344     A7 12 02 FB | 	rdlong	arg01, fp
23348     0E 12 06 F1 | 	add	arg01, #14
2334c     09 FB 61 FC | 	wrlong	result1, arg01
23350     A7 12 02 FB | 	rdlong	arg01, fp
23354     16 12 06 F1 | 	add	arg01, #22
23358     24 4E 05 F1 | 	add	fp, #36
2335c     A7 14 02 FB | 	rdlong	arg02, fp
23360     09 15 62 FC | 	wrlong	arg02, arg01
23364     10 4E 85 F1 | 	sub	fp, #16
23368     A7 12 02 FB | 	rdlong	arg01, fp
2336c     14 4E 85 F1 | 	sub	fp, #20
23370     A7 14 02 FB | 	rdlong	arg02, fp
23374     30 4E 85 F1 | 	sub	fp, #48
23378     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2337c     48 4E 05 F1 | 	add	fp, #72
23380     A7 FA 61 FC | 	wrlong	result1, fp
23384     18 4E 85 F1 | 	sub	fp, #24
23388     A7 1E 02 FB | 	rdlong	local01, fp
2338c     0B 1E 06 F1 | 	add	local01, #11
23390     0F 41 48 FC | 	wrbyte	#32, local01
23394     14 4E 05 F1 | 	add	fp, #20
23398     A7 12 02 FB | 	rdlong	arg01, fp
2339c     14 4E 85 F1 | 	sub	fp, #20
233a0     A7 14 02 FB | 	rdlong	arg02, fp
233a4     30 4E 85 F1 | 	sub	fp, #48
233a8     00 16 06 F6 | 	mov	arg03, #0
233ac     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
233b0     30 4E 05 F1 | 	add	fp, #48
233b4     A7 12 02 FB | 	rdlong	arg01, fp
233b8     1C 12 06 F1 | 	add	arg01, #28
233bc     09 01 68 FC | 	wrlong	#0, arg01
233c0     14 4E 05 F1 | 	add	fp, #20
233c4     A7 1E 02 FB | 	rdlong	local01, fp
233c8     03 1E 06 F1 | 	add	local01, #3
233cc     0F 03 48 FC | 	wrbyte	#1, local01
233d0     04 4E 05 F1 | 	add	fp, #4
233d4     A7 1E 0A FB | 	rdlong	local01, fp wz
233d8     48 4E 85 F1 | 	sub	fp, #72
233dc     E8 00 90 AD |  if_e	jmp	#LR__3758
233e0     44 4E 05 F1 | 	add	fp, #68
233e4     A7 1E 02 FB | 	rdlong	local01, fp
233e8     30 1E 06 F1 | 	add	local01, #48
233ec     0F 1F 02 FB | 	rdlong	local01, local01
233f0     14 4E 05 F1 | 	add	fp, #20
233f4     A7 1E 62 FC | 	wrlong	local01, fp
233f8     44 4E 85 F1 | 	sub	fp, #68
233fc     A7 12 02 F6 | 	mov	arg01, fp
23400     34 4E 05 F1 | 	add	fp, #52
23404     A7 14 02 FB | 	rdlong	arg02, fp
23408     48 4E 85 F1 | 	sub	fp, #72
2340c     00 16 06 F6 | 	mov	arg03, #0
23410     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
23414     10 4E 05 F1 | 	add	fp, #16
23418     A7 FA 61 FC | 	wrlong	result1, fp
2341c     10 4E 85 F1 | 	sub	fp, #16
23420     00 FA 0D F2 | 	cmp	result1, #0 wz
23424     A0 00 90 5D |  if_ne	jmp	#LR__3758
23428     44 4E 05 F1 | 	add	fp, #68
2342c     A7 12 02 FB | 	rdlong	arg01, fp
23430     14 4E 05 F1 | 	add	fp, #20
23434     A7 14 02 FB | 	rdlong	arg02, fp
23438     58 4E 85 F1 | 	sub	fp, #88
2343c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
23440     10 4E 05 F1 | 	add	fp, #16
23444     A7 FA 61 FC | 	wrlong	result1, fp
23448     34 4E 05 F1 | 	add	fp, #52
2344c     A7 18 02 FB | 	rdlong	arg04, fp
23450     04 4E 05 F1 | 	add	fp, #4
23454     A7 1E 02 FB | 	rdlong	local01, fp
23458     48 4E 85 F1 | 	sub	fp, #72
2345c     01 1E 86 F1 | 	sub	local01, #1
23460     10 18 06 F1 | 	add	arg04, #16
23464     0C 1F 62 FC | 	wrlong	local01, arg04
23468     5C 00 90 FD | 	jmp	#LR__3758
2346c                 | LR__3755
2346c     10 4E 05 F1 | 	add	fp, #16
23470     A7 18 0A FB | 	rdlong	arg04, fp wz
23474     10 4E 85 F1 | 	sub	fp, #16
23478     4C 00 90 5D |  if_ne	jmp	#LR__3757
2347c     1A 4E 05 F1 | 	add	fp, #26
23480     A7 18 C2 FA | 	rdbyte	arg04, fp
23484     1A 4E 85 F1 | 	sub	fp, #26
23488     10 18 CE F7 | 	test	arg04, #16 wz
2348c     10 4E 05 51 |  if_ne	add	fp, #16
23490     A7 08 68 5C |  if_ne	wrlong	#4, fp
23494     10 4E 85 51 |  if_ne	sub	fp, #16
23498     2C 00 90 5D |  if_ne	jmp	#LR__3756
2349c     0C 4E 05 F1 | 	add	fp, #12
234a0     A7 18 C2 FA | 	rdbyte	arg04, fp
234a4     0C 4E 85 F1 | 	sub	fp, #12
234a8     02 18 CE F7 | 	test	arg04, #2 wz
234ac     1A 4E 05 51 |  if_ne	add	fp, #26
234b0     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
234b4     1A 4E 85 51 |  if_ne	sub	fp, #26
234b8     01 1E CE 57 |  if_ne	test	local01, #1 wz
234bc     10 4E 05 51 |  if_ne	add	fp, #16
234c0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
234c4     10 4E 85 51 |  if_ne	sub	fp, #16
234c8                 | LR__3756
234c8                 | LR__3757
234c8                 | LR__3758
234c8     10 4E 05 F1 | 	add	fp, #16
234cc     A7 1E 0A FB | 	rdlong	local01, fp wz
234d0     10 4E 85 F1 | 	sub	fp, #16
234d4     60 00 90 5D |  if_ne	jmp	#LR__3759
234d8     0C 4E 05 F1 | 	add	fp, #12
234dc     A7 20 C2 FA | 	rdbyte	local02, fp
234e0     0C 4E 85 F1 | 	sub	fp, #12
234e4     08 20 CE F7 | 	test	local02, #8 wz
234e8     0C 4E 05 51 |  if_ne	add	fp, #12
234ec     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
234f0     40 20 46 55 |  if_ne	or	local02, #64
234f4     A7 20 42 5C |  if_ne	wrbyte	local02, fp
234f8     0C 4E 85 51 |  if_ne	sub	fp, #12
234fc     04 4E 05 F1 | 	add	fp, #4
23500     A7 20 02 FB | 	rdlong	local02, fp
23504     40 4E 05 F1 | 	add	fp, #64
23508     A7 1E 02 FB | 	rdlong	local01, fp
2350c     30 1E 06 F1 | 	add	local01, #48
23510     0F 1F 02 FB | 	rdlong	local01, local01
23514     20 20 06 F1 | 	add	local02, #32
23518     10 1F 62 FC | 	wrlong	local01, local02
2351c     40 4E 85 F1 | 	sub	fp, #64
23520     A7 20 02 FB | 	rdlong	local02, fp
23524     2C 4E 05 F1 | 	add	fp, #44
23528     A7 1E 02 FB | 	rdlong	local01, fp
2352c     30 4E 85 F1 | 	sub	fp, #48
23530     24 20 06 F1 | 	add	local02, #36
23534     10 1F 62 FC | 	wrlong	local01, local02
23538                 | LR__3759
23538     10 4E 05 F1 | 	add	fp, #16
2353c     A7 20 0A FB | 	rdlong	local02, fp wz
23540     10 4E 85 F1 | 	sub	fp, #16
23544     F4 02 90 5D |  if_ne	jmp	#LR__3765
23548     04 4E 05 F1 | 	add	fp, #4
2354c     A7 20 02 FB | 	rdlong	local02, fp
23550     40 4E 05 F1 | 	add	fp, #64
23554     A7 12 02 FB | 	rdlong	arg01, fp
23558     14 4E 85 F1 | 	sub	fp, #20
2355c     A7 14 02 FB | 	rdlong	arg02, fp
23560     30 4E 85 F1 | 	sub	fp, #48
23564     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
23568     08 20 06 F1 | 	add	local02, #8
2356c     10 FB 61 FC | 	wrlong	result1, local02
23570     04 4E 05 F1 | 	add	fp, #4
23574     A7 20 02 FB | 	rdlong	local02, fp
23578     2C 4E 05 F1 | 	add	fp, #44
2357c     A7 12 02 FB | 	rdlong	arg01, fp
23580     1C 12 06 F1 | 	add	arg01, #28
23584                 | ' {
23584                 | ' 
23584                 | ' 	return *((DWORD*)ptr);
23584     09 FB 01 FB | 	rdlong	result1, arg01
23588     0C 20 06 F1 | 	add	local02, #12
2358c     10 FB 61 FC | 	wrlong	result1, local02
23590     2C 4E 85 F1 | 	sub	fp, #44
23594     A7 20 02 FB | 	rdlong	local02, fp
23598     40 4E 05 F1 | 	add	fp, #64
2359c     A7 1E 02 FB | 	rdlong	local01, fp
235a0     10 1F 62 FC | 	wrlong	local01, local02
235a4     40 4E 85 F1 | 	sub	fp, #64
235a8     A7 20 02 FB | 	rdlong	local02, fp
235ac     40 4E 05 F1 | 	add	fp, #64
235b0     A7 1E 02 FB | 	rdlong	local01, fp
235b4     06 1E 06 F1 | 	add	local01, #6
235b8     0F 1F E2 FA | 	rdword	local01, local01
235bc     04 20 06 F1 | 	add	local02, #4
235c0     10 1F 52 FC | 	wrword	local01, local02
235c4     40 4E 85 F1 | 	sub	fp, #64
235c8     A7 20 02 FB | 	rdlong	local02, fp
235cc     08 4E 05 F1 | 	add	fp, #8
235d0     A7 1E C2 FA | 	rdbyte	local01, fp
235d4     10 20 06 F1 | 	add	local02, #16
235d8     10 1F 42 FC | 	wrbyte	local01, local02
235dc     08 4E 85 F1 | 	sub	fp, #8
235e0     A7 20 02 FB | 	rdlong	local02, fp
235e4     11 20 06 F1 | 	add	local02, #17
235e8     10 01 48 FC | 	wrbyte	#0, local02
235ec     A7 20 02 FB | 	rdlong	local02, fp
235f0     1C 20 06 F1 | 	add	local02, #28
235f4     10 01 68 FC | 	wrlong	#0, local02
235f8     A7 20 02 FB | 	rdlong	local02, fp
235fc     14 20 06 F1 | 	add	local02, #20
23600     10 01 68 FC | 	wrlong	#0, local02
23604     A7 12 02 FB | 	rdlong	arg01, fp
23608     04 4E 85 F1 | 	sub	fp, #4
2360c     28 12 06 F1 | 	add	arg01, #40
23610     00 14 06 F6 | 	mov	arg02, #0
23614     09 16 C6 F9 | 	decod	arg03, #9
23618     98 00 A0 FD | 	call	#\builtin_bytefill_
2361c     0C 4E 05 F1 | 	add	fp, #12
23620     A7 20 C2 FA | 	rdbyte	local02, fp
23624     0C 4E 85 F1 | 	sub	fp, #12
23628     20 20 CE F7 | 	test	local02, #32 wz
2362c     0C 02 90 AD |  if_e	jmp	#LR__3764
23630     04 4E 05 F1 | 	add	fp, #4
23634     A7 1E 02 FB | 	rdlong	local01, fp
23638     04 4E 85 F1 | 	sub	fp, #4
2363c     0C 1E 06 F1 | 	add	local01, #12
23640     0F 21 02 FB | 	rdlong	local02, local01
23644     01 20 16 F2 | 	cmp	local02, #1 wc
23648     F0 01 90 CD |  if_b	jmp	#LR__3764
2364c     04 4E 05 F1 | 	add	fp, #4
23650     A7 1E 02 FB | 	rdlong	local01, fp
23654     0F 21 02 F6 | 	mov	local02, local01
23658     0C 1E 06 F1 | 	add	local01, #12
2365c     0F 1F 02 FB | 	rdlong	local01, local01
23660     14 20 06 F1 | 	add	local02, #20
23664     10 1F 62 FC | 	wrlong	local01, local02
23668     40 4E 05 F1 | 	add	fp, #64
2366c     A7 20 02 FB | 	rdlong	local02, fp
23670     0A 20 06 F1 | 	add	local02, #10
23674     10 21 E2 FA | 	rdword	local02, local02
23678     09 20 66 F0 | 	shl	local02, #9
2367c     08 4E 05 F1 | 	add	fp, #8
23680     A7 20 62 FC | 	wrlong	local02, fp
23684     48 4E 85 F1 | 	sub	fp, #72
23688     A7 20 02 FB | 	rdlong	local02, fp
2368c     08 20 06 F1 | 	add	local02, #8
23690     10 1F 02 FB | 	rdlong	local01, local02
23694     4C 4E 05 F1 | 	add	fp, #76
23698     A7 1E 62 FC | 	wrlong	local01, fp
2369c                 | ' 				fp->fptr = fp->obj.objsize;
2369c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2369c                 | ' 				clst = fp->obj.sclust;
2369c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2369c     4C 4E 85 F1 | 	sub	fp, #76
236a0     A7 20 02 FB | 	rdlong	local02, fp
236a4     0C 20 06 F1 | 	add	local02, #12
236a8     10 1F 02 FB | 	rdlong	local01, local02
236ac     58 4E 05 F1 | 	add	fp, #88
236b0     A7 1E 62 FC | 	wrlong	local01, fp
236b4     5C 4E 85 F1 | 	sub	fp, #92
236b8                 | LR__3760
236b8     10 4E 05 F1 | 	add	fp, #16
236bc     A7 20 0A FB | 	rdlong	local02, fp wz
236c0     10 4E 85 F1 | 	sub	fp, #16
236c4     94 00 90 5D |  if_ne	jmp	#LR__3761
236c8     5C 4E 05 F1 | 	add	fp, #92
236cc     A7 20 02 FB | 	rdlong	local02, fp
236d0     10 4E 85 F1 | 	sub	fp, #16
236d4     A7 1E 02 FB | 	rdlong	local01, fp
236d8     4C 4E 85 F1 | 	sub	fp, #76
236dc     0F 21 1A F2 | 	cmp	local02, local01 wcz
236e0     78 00 90 ED |  if_be	jmp	#LR__3761
236e4     04 4E 05 F1 | 	add	fp, #4
236e8     A7 12 02 FB | 	rdlong	arg01, fp
236ec     4C 4E 05 F1 | 	add	fp, #76
236f0     A7 14 02 FB | 	rdlong	arg02, fp
236f4     50 4E 85 F1 | 	sub	fp, #80
236f8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
236fc     50 4E 05 F1 | 	add	fp, #80
23700     A7 FA 61 FC | 	wrlong	result1, fp
23704     50 4E 85 F1 | 	sub	fp, #80
23708     02 FA 15 F2 | 	cmp	result1, #2 wc
2370c     10 4E 05 C1 |  if_b	add	fp, #16
23710     A7 04 68 CC |  if_b	wrlong	#2, fp
23714     10 4E 85 C1 |  if_b	sub	fp, #16
23718     50 4E 05 F1 | 	add	fp, #80
2371c     A7 20 02 FB | 	rdlong	local02, fp
23720     50 4E 85 F1 | 	sub	fp, #80
23724     FF FF 7F FF 
23728     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2372c     10 4E 05 A1 |  if_e	add	fp, #16
23730     A7 02 68 AC |  if_e	wrlong	#1, fp
23734     10 4E 85 A1 |  if_e	sub	fp, #16
23738     5C 4E 05 F1 | 	add	fp, #92
2373c     A7 20 02 FB | 	rdlong	local02, fp
23740     10 4E 85 F1 | 	sub	fp, #16
23744     A7 1E 02 FB | 	rdlong	local01, fp
23748     0F 21 82 F1 | 	sub	local02, local01
2374c     10 4E 05 F1 | 	add	fp, #16
23750     A7 20 62 FC | 	wrlong	local02, fp
23754     5C 4E 85 F1 | 	sub	fp, #92
23758     5C FF 9F FD | 	jmp	#LR__3760
2375c                 | LR__3761
2375c     04 4E 05 F1 | 	add	fp, #4
23760     A7 20 02 FB | 	rdlong	local02, fp
23764     4C 4E 05 F1 | 	add	fp, #76
23768     A7 1E 02 FB | 	rdlong	local01, fp
2376c     18 20 06 F1 | 	add	local02, #24
23770     10 1F 62 FC | 	wrlong	local01, local02
23774     40 4E 85 F1 | 	sub	fp, #64
23778     A7 20 0A FB | 	rdlong	local02, fp wz
2377c     10 4E 85 F1 | 	sub	fp, #16
23780     B8 00 90 5D |  if_ne	jmp	#LR__3763
23784     5C 4E 05 F1 | 	add	fp, #92
23788     A7 1E 02 FB | 	rdlong	local01, fp
2378c     5C 4E 85 F1 | 	sub	fp, #92
23790     FF 1F CE F7 | 	test	local01, #511 wz
23794     A4 00 90 AD |  if_e	jmp	#LR__3763
23798     44 4E 05 F1 | 	add	fp, #68
2379c     A7 12 02 FB | 	rdlong	arg01, fp
237a0     0C 4E 05 F1 | 	add	fp, #12
237a4     A7 14 02 FB | 	rdlong	arg02, fp
237a8     50 4E 85 F1 | 	sub	fp, #80
237ac     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
237b0     58 4E 05 F1 | 	add	fp, #88
237b4     A7 FA 61 FC | 	wrlong	result1, fp
237b8     00 FA 4D F2 | 	cmps	result1, #0 wz
237bc     58 4E 85 F1 | 	sub	fp, #88
237c0     10 4E 05 A1 |  if_e	add	fp, #16
237c4     A7 04 68 AC |  if_e	wrlong	#2, fp
237c8     10 4E 85 A1 |  if_e	sub	fp, #16
237cc     6C 00 90 AD |  if_e	jmp	#LR__3762
237d0     04 4E 05 F1 | 	add	fp, #4
237d4     A7 20 02 FB | 	rdlong	local02, fp
237d8     54 4E 05 F1 | 	add	fp, #84
237dc     A7 1E 02 FB | 	rdlong	local01, fp
237e0     04 4E 05 F1 | 	add	fp, #4
237e4     A7 18 02 FB | 	rdlong	arg04, fp
237e8     09 18 46 F0 | 	shr	arg04, #9
237ec     0C 1F 02 F1 | 	add	local01, arg04
237f0     1C 20 06 F1 | 	add	local02, #28
237f4     10 1F 62 FC | 	wrlong	local01, local02
237f8     18 4E 85 F1 | 	sub	fp, #24
237fc     A7 20 02 FB | 	rdlong	local02, fp
23800     01 20 06 F1 | 	add	local02, #1
23804     10 13 C2 FA | 	rdbyte	arg01, local02
23808     40 4E 85 F1 | 	sub	fp, #64
2380c     A7 20 02 FB | 	rdlong	local02, fp
23810     10 15 02 F6 | 	mov	arg02, local02
23814     28 14 06 F1 | 	add	arg02, #40
23818     04 4E 85 F1 | 	sub	fp, #4
2381c     1C 20 06 F1 | 	add	local02, #28
23820     10 17 02 FB | 	rdlong	arg03, local02
23824     01 18 06 F6 | 	mov	arg04, #1
23828     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2382c     00 FA 0D F2 | 	cmp	result1, #0 wz
23830     10 4E 05 51 |  if_ne	add	fp, #16
23834     A7 02 68 5C |  if_ne	wrlong	#1, fp
23838     10 4E 85 51 |  if_ne	sub	fp, #16
2383c                 | LR__3762
2383c                 | LR__3763
2383c                 | LR__3764
2383c                 | LR__3765
2383c                 | LR__3766
2383c     10 4E 05 F1 | 	add	fp, #16
23840     A7 20 0A FB | 	rdlong	local02, fp wz
23844     10 4E 85 F1 | 	sub	fp, #16
23848     04 4E 05 51 |  if_ne	add	fp, #4
2384c     A7 20 02 5B |  if_ne	rdlong	local02, fp
23850     04 4E 85 51 |  if_ne	sub	fp, #4
23854     10 01 68 5C |  if_ne	wrlong	#0, local02
23858                 | ' 
23858                 | ' 	return res ;
23858     10 4E 05 F1 | 	add	fp, #16
2385c     A7 FA 01 FB | 	rdlong	result1, fp
23860     10 4E 85 F1 | 	sub	fp, #16
23864                 | LR__3767
23864     A7 F0 03 F6 | 	mov	ptra, fp
23868     B2 00 A0 FD | 	call	#popregs_
2386c                 | _fatfs_cc_f_open_ret
2386c     2D 00 64 FD | 	ret
23870                 | 
23870                 | _fatfs_cc_f_read
23870     0E 4A 05 F6 | 	mov	COUNT_, #14
23874     A8 00 A0 FD | 	call	#pushregs_
23878     38 F0 07 F1 | 	add	ptra, #56
2387c     04 4E 05 F1 | 	add	fp, #4
23880     A7 12 62 FC | 	wrlong	arg01, fp
23884     04 4E 05 F1 | 	add	fp, #4
23888     A7 14 62 FC | 	wrlong	arg02, fp
2388c     04 4E 05 F1 | 	add	fp, #4
23890     A7 16 62 FC | 	wrlong	arg03, fp
23894     04 4E 05 F1 | 	add	fp, #4
23898     A7 18 62 FC | 	wrlong	arg04, fp
2389c     08 4E 85 F1 | 	sub	fp, #8
238a0     A7 FA 01 FB | 	rdlong	result1, fp
238a4     2C 4E 05 F1 | 	add	fp, #44
238a8     A7 FA 61 FC | 	wrlong	result1, fp
238ac     24 4E 85 F1 | 	sub	fp, #36
238b0     A7 FA 01 FB | 	rdlong	result1, fp
238b4     FD 00 68 FC | 	wrlong	#0, result1
238b8     0C 4E 85 F1 | 	sub	fp, #12
238bc     A7 12 02 FB | 	rdlong	arg01, fp
238c0     14 4E 05 F1 | 	add	fp, #20
238c4     A7 14 02 F6 | 	mov	arg02, fp
238c8     18 4E 85 F1 | 	sub	fp, #24
238cc     24 F7 BF FD | 	call	#_fatfs_cc_validate
238d0     14 4E 05 F1 | 	add	fp, #20
238d4     A7 FA 61 FC | 	wrlong	result1, fp
238d8     00 FA 4D F2 | 	cmps	result1, #0 wz
238dc     14 4E 85 F1 | 	sub	fp, #20
238e0     20 00 90 5D |  if_ne	jmp	#LR__3770
238e4     04 4E 05 F1 | 	add	fp, #4
238e8     A7 14 02 FB | 	rdlong	arg02, fp
238ec     11 14 06 F1 | 	add	arg02, #17
238f0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
238f4     10 4E 05 F1 | 	add	fp, #16
238f8     A7 14 62 FC | 	wrlong	arg02, fp
238fc     14 4E 85 F1 | 	sub	fp, #20
23900     10 00 90 AD |  if_e	jmp	#LR__3771
23904                 | LR__3770
23904     14 4E 05 F1 | 	add	fp, #20
23908     A7 FA 01 FB | 	rdlong	result1, fp
2390c     14 4E 85 F1 | 	sub	fp, #20
23910     EC 05 90 FD | 	jmp	#LR__3790
23914                 | LR__3771
23914     04 4E 05 F1 | 	add	fp, #4
23918     A7 18 02 FB | 	rdlong	arg04, fp
2391c     04 4E 85 F1 | 	sub	fp, #4
23920     10 18 06 F1 | 	add	arg04, #16
23924     0C 19 C2 FA | 	rdbyte	arg04, arg04
23928     01 18 CE F7 | 	test	arg04, #1 wz
2392c     07 FA 05 A6 |  if_e	mov	result1, #7
23930     CC 05 90 AD |  if_e	jmp	#LR__3790
23934     04 4E 05 F1 | 	add	fp, #4
23938     A7 1E 02 FB | 	rdlong	local01, fp
2393c     0F 21 02 F6 | 	mov	local02, local01
23940     0C 20 06 F1 | 	add	local02, #12
23944     10 23 02 FB | 	rdlong	local03, local02
23948     14 1E 06 F1 | 	add	local01, #20
2394c     0F 1F 02 FB | 	rdlong	local01, local01
23950     0F 23 82 F1 | 	sub	local03, local01
23954     20 4E 05 F1 | 	add	fp, #32
23958     A7 22 62 FC | 	wrlong	local03, fp
2395c     18 4E 85 F1 | 	sub	fp, #24
23960     A7 24 02 FB | 	rdlong	local04, fp
23964     0C 4E 85 F1 | 	sub	fp, #12
23968     11 25 1A F2 | 	cmp	local04, local03 wcz
2396c     24 4E 05 11 |  if_a	add	fp, #36
23970     A7 24 02 1B |  if_a	rdlong	local04, fp
23974     18 4E 85 11 |  if_a	sub	fp, #24
23978     A7 24 62 1C |  if_a	wrlong	local04, fp
2397c     0C 4E 85 11 |  if_a	sub	fp, #12
23980                 | ' 
23980                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
23980                 | LR__3772
23980     0C 4E 05 F1 | 	add	fp, #12
23984     A7 20 02 FB | 	rdlong	local02, fp
23988     0C 4E 85 F1 | 	sub	fp, #12
2398c     10 25 02 F6 | 	mov	local04, local02
23990     01 24 16 F2 | 	cmp	local04, #1 wc
23994     64 05 90 CD |  if_b	jmp	#LR__3789
23998     04 4E 05 F1 | 	add	fp, #4
2399c     A7 22 02 FB | 	rdlong	local03, fp
239a0     04 4E 85 F1 | 	sub	fp, #4
239a4     14 22 06 F1 | 	add	local03, #20
239a8     11 23 02 FB | 	rdlong	local03, local03
239ac     FF 23 CE F7 | 	test	local03, #511 wz
239b0     3C 04 90 5D |  if_ne	jmp	#LR__3787
239b4     04 4E 05 F1 | 	add	fp, #4
239b8     A7 1E 02 FB | 	rdlong	local01, fp
239bc     14 1E 06 F1 | 	add	local01, #20
239c0     0F 23 02 FB | 	rdlong	local03, local01
239c4     09 22 46 F0 | 	shr	local03, #9
239c8     14 4E 05 F1 | 	add	fp, #20
239cc     A7 26 02 FB | 	rdlong	local05, fp
239d0     13 29 02 F6 | 	mov	local06, local05
239d4     0A 28 06 F1 | 	add	local06, #10
239d8     14 2B E2 FA | 	rdword	local07, local06
239dc     0A 28 86 F1 | 	sub	local06, #10
239e0     15 2D 32 F9 | 	getword	local08, local07, #0
239e4     01 2C 86 F1 | 	sub	local08, #1
239e8     16 23 0A F5 | 	and	local03, local08 wz
239ec     18 4E 05 F1 | 	add	fp, #24
239f0     A7 22 62 FC | 	wrlong	local03, fp
239f4     30 4E 85 F1 | 	sub	fp, #48
239f8     E0 00 90 5D |  if_ne	jmp	#LR__3777
239fc     04 4E 05 F1 | 	add	fp, #4
23a00     A7 22 02 FB | 	rdlong	local03, fp
23a04     04 4E 85 F1 | 	sub	fp, #4
23a08     14 22 06 F1 | 	add	local03, #20
23a0c     11 23 0A FB | 	rdlong	local03, local03 wz
23a10     20 00 90 5D |  if_ne	jmp	#LR__3773
23a14     04 4E 05 F1 | 	add	fp, #4
23a18     A7 22 02 FB | 	rdlong	local03, fp
23a1c     08 22 06 F1 | 	add	local03, #8
23a20     11 23 02 FB | 	rdlong	local03, local03
23a24     18 4E 05 F1 | 	add	fp, #24
23a28     A7 22 62 FC | 	wrlong	local03, fp
23a2c     1C 4E 85 F1 | 	sub	fp, #28
23a30     28 00 90 FD | 	jmp	#LR__3774
23a34                 | LR__3773
23a34     04 4E 05 F1 | 	add	fp, #4
23a38     A7 2C 02 FB | 	rdlong	local08, fp
23a3c     16 13 02 F6 | 	mov	arg01, local08
23a40     04 4E 85 F1 | 	sub	fp, #4
23a44     18 2C 06 F1 | 	add	local08, #24
23a48     16 15 02 FB | 	rdlong	arg02, local08
23a4c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
23a50     1C 4E 05 F1 | 	add	fp, #28
23a54     A7 FA 61 FC | 	wrlong	result1, fp
23a58     1C 4E 85 F1 | 	sub	fp, #28
23a5c                 | LR__3774
23a5c     1C 4E 05 F1 | 	add	fp, #28
23a60     A7 22 02 FB | 	rdlong	local03, fp
23a64     1C 4E 85 F1 | 	sub	fp, #28
23a68     02 22 16 F2 | 	cmp	local03, #2 wc
23a6c     1C 00 90 3D |  if_ae	jmp	#LR__3775
23a70     04 4E 05 F1 | 	add	fp, #4
23a74     A7 22 02 FB | 	rdlong	local03, fp
23a78     04 4E 85 F1 | 	sub	fp, #4
23a7c     11 22 06 F1 | 	add	local03, #17
23a80     11 05 48 FC | 	wrbyte	#2, local03
23a84     02 FA 05 F6 | 	mov	result1, #2
23a88     74 04 90 FD | 	jmp	#LR__3790
23a8c                 | LR__3775
23a8c     1C 4E 05 F1 | 	add	fp, #28
23a90     A7 22 02 FB | 	rdlong	local03, fp
23a94     1C 4E 85 F1 | 	sub	fp, #28
23a98     FF FF 7F FF 
23a9c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
23aa0     1C 00 90 5D |  if_ne	jmp	#LR__3776
23aa4     04 4E 05 F1 | 	add	fp, #4
23aa8     A7 22 02 FB | 	rdlong	local03, fp
23aac     04 4E 85 F1 | 	sub	fp, #4
23ab0     11 22 06 F1 | 	add	local03, #17
23ab4     11 03 48 FC | 	wrbyte	#1, local03
23ab8     01 FA 05 F6 | 	mov	result1, #1
23abc     40 04 90 FD | 	jmp	#LR__3790
23ac0                 | LR__3776
23ac0     04 4E 05 F1 | 	add	fp, #4
23ac4     A7 22 02 FB | 	rdlong	local03, fp
23ac8     18 4E 05 F1 | 	add	fp, #24
23acc     A7 2C 02 FB | 	rdlong	local08, fp
23ad0     1C 4E 85 F1 | 	sub	fp, #28
23ad4     18 22 06 F1 | 	add	local03, #24
23ad8     11 2D 62 FC | 	wrlong	local08, local03
23adc                 | LR__3777
23adc     18 4E 05 F1 | 	add	fp, #24
23ae0     A7 12 02 FB | 	rdlong	arg01, fp
23ae4     14 4E 85 F1 | 	sub	fp, #20
23ae8     A7 22 02 FB | 	rdlong	local03, fp
23aec     04 4E 85 F1 | 	sub	fp, #4
23af0     18 22 06 F1 | 	add	local03, #24
23af4     11 15 02 FB | 	rdlong	arg02, local03
23af8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
23afc     20 4E 05 F1 | 	add	fp, #32
23b00     A7 FA 61 FC | 	wrlong	result1, fp
23b04     20 4E 85 F1 | 	sub	fp, #32
23b08     00 FA 0D F2 | 	cmp	result1, #0 wz
23b0c     1C 00 90 5D |  if_ne	jmp	#LR__3778
23b10     04 4E 05 F1 | 	add	fp, #4
23b14     A7 22 02 FB | 	rdlong	local03, fp
23b18     04 4E 85 F1 | 	sub	fp, #4
23b1c     11 22 06 F1 | 	add	local03, #17
23b20     11 05 48 FC | 	wrbyte	#2, local03
23b24     02 FA 05 F6 | 	mov	result1, #2
23b28     D4 03 90 FD | 	jmp	#LR__3790
23b2c                 | LR__3778
23b2c     20 4E 05 F1 | 	add	fp, #32
23b30     A7 22 02 FB | 	rdlong	local03, fp
23b34     10 4E 05 F1 | 	add	fp, #16
23b38     A7 2C 02 FB | 	rdlong	local08, fp
23b3c     16 23 02 F1 | 	add	local03, local08
23b40     10 4E 85 F1 | 	sub	fp, #16
23b44     A7 22 62 FC | 	wrlong	local03, fp
23b48     14 4E 85 F1 | 	sub	fp, #20
23b4c     A7 22 02 FB | 	rdlong	local03, fp
23b50     09 22 46 F0 | 	shr	local03, #9
23b54     20 4E 05 F1 | 	add	fp, #32
23b58     A7 22 62 FC | 	wrlong	local03, fp
23b5c     2C 4E 85 F1 | 	sub	fp, #44
23b60     01 22 16 F2 | 	cmp	local03, #1 wc
23b64     5C 01 90 CD |  if_b	jmp	#LR__3782
23b68     30 4E 05 F1 | 	add	fp, #48
23b6c     A7 22 02 FB | 	rdlong	local03, fp
23b70     04 4E 85 F1 | 	sub	fp, #4
23b74     A7 2C 02 FB | 	rdlong	local08, fp
23b78     16 23 02 F1 | 	add	local03, local08
23b7c     14 4E 85 F1 | 	sub	fp, #20
23b80     A7 2C 02 FB | 	rdlong	local08, fp
23b84     18 4E 85 F1 | 	sub	fp, #24
23b88     0A 2C 06 F1 | 	add	local08, #10
23b8c     16 2D E2 FA | 	rdword	local08, local08
23b90     16 23 1A F2 | 	cmp	local03, local08 wcz
23b94     28 00 90 ED |  if_be	jmp	#LR__3779
23b98     18 4E 05 F1 | 	add	fp, #24
23b9c     A7 1E 02 FB | 	rdlong	local01, fp
23ba0     0A 1E 06 F1 | 	add	local01, #10
23ba4     0F 23 E2 FA | 	rdword	local03, local01
23ba8     18 4E 05 F1 | 	add	fp, #24
23bac     A7 2C 02 FB | 	rdlong	local08, fp
23bb0     16 23 82 F1 | 	sub	local03, local08
23bb4     04 4E 85 F1 | 	sub	fp, #4
23bb8     A7 22 62 FC | 	wrlong	local03, fp
23bbc     2C 4E 85 F1 | 	sub	fp, #44
23bc0                 | LR__3779
23bc0     18 4E 05 F1 | 	add	fp, #24
23bc4     A7 1E 02 FB | 	rdlong	local01, fp
23bc8     01 1E 06 F1 | 	add	local01, #1
23bcc     0F 13 C2 FA | 	rdbyte	arg01, local01
23bd0     1C 4E 05 F1 | 	add	fp, #28
23bd4     A7 14 02 FB | 	rdlong	arg02, fp
23bd8     14 4E 85 F1 | 	sub	fp, #20
23bdc     A7 16 02 FB | 	rdlong	arg03, fp
23be0     0C 4E 05 F1 | 	add	fp, #12
23be4     A7 18 02 FB | 	rdlong	arg04, fp
23be8     2C 4E 85 F1 | 	sub	fp, #44
23bec     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
23bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
23bf4     1C 00 90 AD |  if_e	jmp	#LR__3780
23bf8     04 4E 05 F1 | 	add	fp, #4
23bfc     A7 22 02 FB | 	rdlong	local03, fp
23c00     04 4E 85 F1 | 	sub	fp, #4
23c04     11 22 06 F1 | 	add	local03, #17
23c08     11 03 48 FC | 	wrbyte	#1, local03
23c0c     01 FA 05 F6 | 	mov	result1, #1
23c10     EC 02 90 FD | 	jmp	#LR__3790
23c14                 | LR__3780
23c14     04 4E 05 F1 | 	add	fp, #4
23c18     A7 1E 02 FB | 	rdlong	local01, fp
23c1c     04 4E 85 F1 | 	sub	fp, #4
23c20     10 1E 06 F1 | 	add	local01, #16
23c24     0F 23 C2 FA | 	rdbyte	local03, local01
23c28     80 22 CE F7 | 	test	local03, #128 wz
23c2c     78 00 90 AD |  if_e	jmp	#LR__3781
23c30     04 4E 05 F1 | 	add	fp, #4
23c34     A7 2C 02 FB | 	rdlong	local08, fp
23c38     1C 2C 06 F1 | 	add	local08, #28
23c3c     16 2D 02 FB | 	rdlong	local08, local08
23c40     1C 4E 05 F1 | 	add	fp, #28
23c44     A7 2E 02 FB | 	rdlong	local09, fp
23c48     17 2D 82 F1 | 	sub	local08, local09
23c4c     0C 4E 05 F1 | 	add	fp, #12
23c50     A7 30 02 FB | 	rdlong	local10, fp
23c54     2C 4E 85 F1 | 	sub	fp, #44
23c58     18 33 02 F6 | 	mov	local11, local10
23c5c     19 2D 12 F2 | 	cmp	local08, local11 wc
23c60     44 00 90 3D |  if_ae	jmp	#LR__3781
23c64     34 4E 05 F1 | 	add	fp, #52
23c68     A7 12 02 FB | 	rdlong	arg01, fp
23c6c     30 4E 85 F1 | 	sub	fp, #48
23c70     A7 14 02 FB | 	rdlong	arg02, fp
23c74     0A 33 02 F6 | 	mov	local11, arg02
23c78     1C 32 06 F1 | 	add	local11, #28
23c7c     19 2F 02 FB | 	rdlong	local09, local11
23c80     1C 4E 05 F1 | 	add	fp, #28
23c84     A7 26 02 FB | 	rdlong	local05, fp
23c88     13 2F 82 F1 | 	sub	local09, local05
23c8c     09 2E 66 F0 | 	shl	local09, #9
23c90     17 33 02 F6 | 	mov	local11, local09
23c94     17 13 02 F1 | 	add	arg01, local09
23c98     20 4E 85 F1 | 	sub	fp, #32
23c9c     28 14 06 F1 | 	add	arg02, #40
23ca0     09 16 C6 F9 | 	decod	arg03, #9
23ca4     40 4B BF FD | 	call	#__system____builtin_memmove
23ca8                 | LR__3781
23ca8     2C 4E 05 F1 | 	add	fp, #44
23cac     A7 22 02 FB | 	rdlong	local03, fp
23cb0     09 22 66 F0 | 	shl	local03, #9
23cb4     04 4E 85 F1 | 	sub	fp, #4
23cb8     A7 22 62 FC | 	wrlong	local03, fp
23cbc     28 4E 85 F1 | 	sub	fp, #40
23cc0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
23cc0                 | ' 				}
23cc0                 | ' 
23cc0                 | ' 
23cc0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
23cc0                 | ' 				continue;
23cc0     B4 01 90 FD | 	jmp	#LR__3788
23cc4                 | LR__3782
23cc4     04 4E 05 F1 | 	add	fp, #4
23cc8     A7 22 02 FB | 	rdlong	local03, fp
23ccc     1C 22 06 F1 | 	add	local03, #28
23cd0     11 23 02 FB | 	rdlong	local03, local03
23cd4     1C 4E 05 F1 | 	add	fp, #28
23cd8     A7 1E 02 FB | 	rdlong	local01, fp
23cdc     20 4E 85 F1 | 	sub	fp, #32
23ce0     0F 23 0A F2 | 	cmp	local03, local01 wz
23ce4     EC 00 90 AD |  if_e	jmp	#LR__3786
23ce8     04 4E 05 F1 | 	add	fp, #4
23cec     A7 1E 02 FB | 	rdlong	local01, fp
23cf0     04 4E 85 F1 | 	sub	fp, #4
23cf4     10 1E 06 F1 | 	add	local01, #16
23cf8     0F 23 C2 FA | 	rdbyte	local03, local01
23cfc     80 22 CE F7 | 	test	local03, #128 wz
23d00     7C 00 90 AD |  if_e	jmp	#LR__3784
23d04     18 4E 05 F1 | 	add	fp, #24
23d08     A7 1E 02 FB | 	rdlong	local01, fp
23d0c     01 1E 06 F1 | 	add	local01, #1
23d10     0F 13 C2 FA | 	rdbyte	arg01, local01
23d14     14 4E 85 F1 | 	sub	fp, #20
23d18     A7 22 02 FB | 	rdlong	local03, fp
23d1c     11 15 02 F6 | 	mov	arg02, local03
23d20     28 14 06 F1 | 	add	arg02, #40
23d24     04 4E 85 F1 | 	sub	fp, #4
23d28     1C 22 06 F1 | 	add	local03, #28
23d2c     11 17 02 FB | 	rdlong	arg03, local03
23d30     01 18 06 F6 | 	mov	arg04, #1
23d34     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
23d38     00 FA 0D F2 | 	cmp	result1, #0 wz
23d3c     1C 00 90 AD |  if_e	jmp	#LR__3783
23d40     04 4E 05 F1 | 	add	fp, #4
23d44     A7 22 02 FB | 	rdlong	local03, fp
23d48     04 4E 85 F1 | 	sub	fp, #4
23d4c     11 22 06 F1 | 	add	local03, #17
23d50     11 03 48 FC | 	wrbyte	#1, local03
23d54     01 FA 05 F6 | 	mov	result1, #1
23d58     A4 01 90 FD | 	jmp	#LR__3790
23d5c                 | LR__3783
23d5c     04 4E 05 F1 | 	add	fp, #4
23d60     A7 32 02 FB | 	rdlong	local11, fp
23d64     19 23 02 F6 | 	mov	local03, local11
23d68     04 4E 85 F1 | 	sub	fp, #4
23d6c     10 32 06 F1 | 	add	local11, #16
23d70     19 33 C2 FA | 	rdbyte	local11, local11
23d74     7F 32 06 F5 | 	and	local11, #127
23d78     10 22 06 F1 | 	add	local03, #16
23d7c     11 33 42 FC | 	wrbyte	local11, local03
23d80                 | LR__3784
23d80     18 4E 05 F1 | 	add	fp, #24
23d84     A7 1E 02 FB | 	rdlong	local01, fp
23d88     01 1E 06 F1 | 	add	local01, #1
23d8c     0F 13 C2 FA | 	rdbyte	arg01, local01
23d90     14 4E 85 F1 | 	sub	fp, #20
23d94     A7 14 02 FB | 	rdlong	arg02, fp
23d98     28 14 06 F1 | 	add	arg02, #40
23d9c     1C 4E 05 F1 | 	add	fp, #28
23da0     A7 16 02 FB | 	rdlong	arg03, fp
23da4     20 4E 85 F1 | 	sub	fp, #32
23da8     01 18 06 F6 | 	mov	arg04, #1
23dac     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
23db0     00 FA 0D F2 | 	cmp	result1, #0 wz
23db4     1C 00 90 AD |  if_e	jmp	#LR__3785
23db8     04 4E 05 F1 | 	add	fp, #4
23dbc     A7 22 02 FB | 	rdlong	local03, fp
23dc0     04 4E 85 F1 | 	sub	fp, #4
23dc4     11 22 06 F1 | 	add	local03, #17
23dc8     11 03 48 FC | 	wrbyte	#1, local03
23dcc     01 FA 05 F6 | 	mov	result1, #1
23dd0     2C 01 90 FD | 	jmp	#LR__3790
23dd4                 | LR__3785
23dd4                 | LR__3786
23dd4     04 4E 05 F1 | 	add	fp, #4
23dd8     A7 22 02 FB | 	rdlong	local03, fp
23ddc     1C 4E 05 F1 | 	add	fp, #28
23de0     A7 32 02 FB | 	rdlong	local11, fp
23de4     20 4E 85 F1 | 	sub	fp, #32
23de8     1C 22 06 F1 | 	add	local03, #28
23dec     11 33 62 FC | 	wrlong	local11, local03
23df0                 | LR__3787
23df0     04 4E 05 F1 | 	add	fp, #4
23df4     A7 1E 02 FB | 	rdlong	local01, fp
23df8     14 1E 06 F1 | 	add	local01, #20
23dfc     0F 33 02 FB | 	rdlong	local11, local01
23e00     FF 33 06 F5 | 	and	local11, #511
23e04     09 22 C6 F9 | 	decod	local03, #9
23e08     19 23 82 F1 | 	sub	local03, local11
23e0c     24 4E 05 F1 | 	add	fp, #36
23e10     A7 22 62 FC | 	wrlong	local03, fp
23e14     1C 4E 85 F1 | 	sub	fp, #28
23e18     A7 32 02 FB | 	rdlong	local11, fp
23e1c     0C 4E 85 F1 | 	sub	fp, #12
23e20     19 23 1A F2 | 	cmp	local03, local11 wcz
23e24     0C 4E 05 11 |  if_a	add	fp, #12
23e28     A7 22 02 1B |  if_a	rdlong	local03, fp
23e2c     1C 4E 05 11 |  if_a	add	fp, #28
23e30     A7 22 62 1C |  if_a	wrlong	local03, fp
23e34     28 4E 85 11 |  if_a	sub	fp, #40
23e38     34 4E 05 F1 | 	add	fp, #52
23e3c     A7 12 02 FB | 	rdlong	arg01, fp
23e40     30 4E 85 F1 | 	sub	fp, #48
23e44     A7 28 02 FB | 	rdlong	local06, fp
23e48     14 15 02 F6 | 	mov	arg02, local06
23e4c     28 14 06 F1 | 	add	arg02, #40
23e50     14 28 06 F1 | 	add	local06, #20
23e54     14 33 02 FB | 	rdlong	local11, local06
23e58     19 2F 02 F6 | 	mov	local09, local11
23e5c     17 31 02 F6 | 	mov	local10, local09
23e60     FF 31 06 F5 | 	and	local10, #511
23e64     18 15 02 F1 | 	add	arg02, local10
23e68     24 4E 05 F1 | 	add	fp, #36
23e6c     A7 16 02 FB | 	rdlong	arg03, fp
23e70     28 4E 85 F1 | 	sub	fp, #40
23e74     70 49 BF FD | 	call	#__system____builtin_memmove
23e78                 | LR__3788
23e78     0C 4E 05 F1 | 	add	fp, #12
23e7c     A7 22 02 FB | 	rdlong	local03, fp
23e80     1C 4E 05 F1 | 	add	fp, #28
23e84     A7 2C 02 FB | 	rdlong	local08, fp
23e88     16 23 82 F1 | 	sub	local03, local08
23e8c     1C 4E 85 F1 | 	sub	fp, #28
23e90     A7 22 62 FC | 	wrlong	local03, fp
23e94     04 4E 05 F1 | 	add	fp, #4
23e98     A7 1E 02 FB | 	rdlong	local01, fp
23e9c     0F 2B 02 FB | 	rdlong	local07, local01
23ea0     18 4E 05 F1 | 	add	fp, #24
23ea4     A7 2C 02 FB | 	rdlong	local08, fp
23ea8     16 2B 02 F1 | 	add	local07, local08
23eac     0F 2B 62 FC | 	wrlong	local07, local01
23eb0     0C 4E 05 F1 | 	add	fp, #12
23eb4     A7 22 02 FB | 	rdlong	local03, fp
23eb8     0C 4E 85 F1 | 	sub	fp, #12
23ebc     A7 34 02 FB | 	rdlong	local12, fp
23ec0     1A 23 02 F1 | 	add	local03, local12
23ec4     0C 4E 05 F1 | 	add	fp, #12
23ec8     A7 22 62 FC | 	wrlong	local03, fp
23ecc     30 4E 85 F1 | 	sub	fp, #48
23ed0     A7 36 02 FB | 	rdlong	local13, fp
23ed4     1B 23 02 F6 | 	mov	local03, local13
23ed8     14 36 06 F1 | 	add	local13, #20
23edc     1B 39 02 FB | 	rdlong	local14, local13
23ee0     24 4E 05 F1 | 	add	fp, #36
23ee4     A7 28 02 FB | 	rdlong	local06, fp
23ee8     28 4E 85 F1 | 	sub	fp, #40
23eec     14 39 02 F1 | 	add	local14, local06
23ef0     14 22 06 F1 | 	add	local03, #20
23ef4     11 39 62 FC | 	wrlong	local14, local03
23ef8     84 FA 9F FD | 	jmp	#LR__3772
23efc                 | LR__3789
23efc                 | ' 
23efc                 | ' 
23efc                 | ' 
23efc                 | ' 
23efc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
23efc                 | ' 
23efc                 | ' 	}
23efc                 | ' 
23efc                 | ' 	return FR_OK ;
23efc     00 FA 05 F6 | 	mov	result1, #0
23f00                 | LR__3790
23f00     A7 F0 03 F6 | 	mov	ptra, fp
23f04     B2 00 A0 FD | 	call	#popregs_
23f08                 | _fatfs_cc_f_read_ret
23f08     2D 00 64 FD | 	ret
23f0c                 | 
23f0c                 | _fatfs_cc_f_write
23f0c     15 4A 05 F6 | 	mov	COUNT_, #21
23f10     A8 00 A0 FD | 	call	#pushregs_
23f14     34 F0 07 F1 | 	add	ptra, #52
23f18     04 4E 05 F1 | 	add	fp, #4
23f1c     A7 12 62 FC | 	wrlong	arg01, fp
23f20     04 4E 05 F1 | 	add	fp, #4
23f24     A7 14 62 FC | 	wrlong	arg02, fp
23f28     04 4E 05 F1 | 	add	fp, #4
23f2c     A7 16 62 FC | 	wrlong	arg03, fp
23f30     04 4E 05 F1 | 	add	fp, #4
23f34     A7 18 62 FC | 	wrlong	arg04, fp
23f38     08 4E 85 F1 | 	sub	fp, #8
23f3c     A7 FA 01 FB | 	rdlong	result1, fp
23f40     28 4E 05 F1 | 	add	fp, #40
23f44     A7 FA 61 FC | 	wrlong	result1, fp
23f48     20 4E 85 F1 | 	sub	fp, #32
23f4c     A7 FA 01 FB | 	rdlong	result1, fp
23f50     FD 00 68 FC | 	wrlong	#0, result1
23f54     0C 4E 85 F1 | 	sub	fp, #12
23f58     A7 12 02 FB | 	rdlong	arg01, fp
23f5c     14 4E 05 F1 | 	add	fp, #20
23f60     A7 14 02 F6 | 	mov	arg02, fp
23f64     18 4E 85 F1 | 	sub	fp, #24
23f68     88 F0 BF FD | 	call	#_fatfs_cc_validate
23f6c     14 4E 05 F1 | 	add	fp, #20
23f70     A7 FA 61 FC | 	wrlong	result1, fp
23f74     00 FA 4D F2 | 	cmps	result1, #0 wz
23f78     14 4E 85 F1 | 	sub	fp, #20
23f7c     20 00 90 5D |  if_ne	jmp	#LR__3800
23f80     04 4E 05 F1 | 	add	fp, #4
23f84     A7 14 02 FB | 	rdlong	arg02, fp
23f88     11 14 06 F1 | 	add	arg02, #17
23f8c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
23f90     10 4E 05 F1 | 	add	fp, #16
23f94     A7 14 62 FC | 	wrlong	arg02, fp
23f98     14 4E 85 F1 | 	sub	fp, #20
23f9c     10 00 90 AD |  if_e	jmp	#LR__3801
23fa0                 | LR__3800
23fa0     14 4E 05 F1 | 	add	fp, #20
23fa4     A7 FA 01 FB | 	rdlong	result1, fp
23fa8     14 4E 85 F1 | 	sub	fp, #20
23fac     44 07 90 FD | 	jmp	#LR__3823
23fb0                 | LR__3801
23fb0     04 4E 05 F1 | 	add	fp, #4
23fb4     A7 14 02 FB | 	rdlong	arg02, fp
23fb8     04 4E 85 F1 | 	sub	fp, #4
23fbc     10 14 06 F1 | 	add	arg02, #16
23fc0     0A 15 C2 FA | 	rdbyte	arg02, arg02
23fc4     02 14 CE F7 | 	test	arg02, #2 wz
23fc8     07 FA 05 A6 |  if_e	mov	result1, #7
23fcc     24 07 90 AD |  if_e	jmp	#LR__3823
23fd0     04 4E 05 F1 | 	add	fp, #4
23fd4     A7 14 02 FB | 	rdlong	arg02, fp
23fd8     0A 13 02 F6 | 	mov	arg01, arg02
23fdc     14 12 06 F1 | 	add	arg01, #20
23fe0     09 13 02 FB | 	rdlong	arg01, arg01
23fe4     08 4E 05 F1 | 	add	fp, #8
23fe8     A7 FA 01 FB | 	rdlong	result1, fp
23fec     FD 12 02 F1 | 	add	arg01, result1
23ff0     0C 4E 85 F1 | 	sub	fp, #12
23ff4     14 14 06 F1 | 	add	arg02, #20
23ff8     0A FB 01 FB | 	rdlong	result1, arg02
23ffc     FD 12 12 F2 | 	cmp	arg01, result1 wc
24000     24 00 90 3D |  if_ae	jmp	#LR__3802
24004     04 4E 05 F1 | 	add	fp, #4
24008     A7 14 02 FB | 	rdlong	arg02, fp
2400c     01 FA 65 F6 | 	neg	result1, #1
24010     14 14 06 F1 | 	add	arg02, #20
24014     0A 15 02 FB | 	rdlong	arg02, arg02
24018     0A FB 81 F1 | 	sub	result1, arg02
2401c     08 4E 05 F1 | 	add	fp, #8
24020     A7 FA 61 FC | 	wrlong	result1, fp
24024     0C 4E 85 F1 | 	sub	fp, #12
24028                 | LR__3802
24028                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
24028                 | ' 	}
24028                 | ' 
24028                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
24028                 | LR__3803
24028     0C 4E 05 F1 | 	add	fp, #12
2402c     A7 FA 01 FB | 	rdlong	result1, fp
24030     0C 4E 85 F1 | 	sub	fp, #12
24034     01 FA 15 F2 | 	cmp	result1, #1 wc
24038     90 06 90 CD |  if_b	jmp	#LR__3822
2403c     04 4E 05 F1 | 	add	fp, #4
24040     A7 FA 01 FB | 	rdlong	result1, fp
24044     04 4E 85 F1 | 	sub	fp, #4
24048     14 FA 05 F1 | 	add	result1, #20
2404c     FD FA 01 FB | 	rdlong	result1, result1
24050     FF FB CD F7 | 	test	result1, #511 wz
24054     D8 04 90 5D |  if_ne	jmp	#LR__3818
24058     04 4E 05 F1 | 	add	fp, #4
2405c     A7 FA 01 FB | 	rdlong	result1, fp
24060     14 FA 05 F1 | 	add	result1, #20
24064     FD FA 01 FB | 	rdlong	result1, result1
24068     09 FA 45 F0 | 	shr	result1, #9
2406c     14 4E 05 F1 | 	add	fp, #20
24070     A7 14 02 FB | 	rdlong	arg02, fp
24074     0A 14 06 F1 | 	add	arg02, #10
24078     0A 19 E2 FA | 	rdword	arg04, arg02
2407c     0C 15 32 F9 | 	getword	arg02, arg04, #0
24080     01 14 86 F1 | 	sub	arg02, #1
24084     0A FB 09 F5 | 	and	result1, arg02 wz
24088     14 4E 05 F1 | 	add	fp, #20
2408c     A7 FA 61 FC | 	wrlong	result1, fp
24090     2C 4E 85 F1 | 	sub	fp, #44
24094     44 01 90 5D |  if_ne	jmp	#LR__3809
24098     04 4E 05 F1 | 	add	fp, #4
2409c     A7 FA 01 FB | 	rdlong	result1, fp
240a0     04 4E 85 F1 | 	sub	fp, #4
240a4     14 FA 05 F1 | 	add	result1, #20
240a8     FD 14 0A FB | 	rdlong	arg02, result1 wz
240ac     44 00 90 5D |  if_ne	jmp	#LR__3804
240b0     04 4E 05 F1 | 	add	fp, #4
240b4     A7 14 02 FB | 	rdlong	arg02, fp
240b8     08 14 06 F1 | 	add	arg02, #8
240bc     0A 15 0A FB | 	rdlong	arg02, arg02 wz
240c0     18 4E 05 F1 | 	add	fp, #24
240c4     A7 14 62 FC | 	wrlong	arg02, fp
240c8     1C 4E 85 F1 | 	sub	fp, #28
240cc     4C 00 90 5D |  if_ne	jmp	#LR__3805
240d0     04 4E 05 F1 | 	add	fp, #4
240d4     A7 12 02 FB | 	rdlong	arg01, fp
240d8     04 4E 85 F1 | 	sub	fp, #4
240dc     00 14 06 F6 | 	mov	arg02, #0
240e0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
240e4     1C 4E 05 F1 | 	add	fp, #28
240e8     A7 FA 61 FC | 	wrlong	result1, fp
240ec     1C 4E 85 F1 | 	sub	fp, #28
240f0     28 00 90 FD | 	jmp	#LR__3805
240f4                 | LR__3804
240f4     04 4E 05 F1 | 	add	fp, #4
240f8     A7 18 02 FB | 	rdlong	arg04, fp
240fc     0C 13 02 F6 | 	mov	arg01, arg04
24100     04 4E 85 F1 | 	sub	fp, #4
24104     18 18 06 F1 | 	add	arg04, #24
24108     0C 15 02 FB | 	rdlong	arg02, arg04
2410c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
24110     1C 4E 05 F1 | 	add	fp, #28
24114     A7 FA 61 FC | 	wrlong	result1, fp
24118     1C 4E 85 F1 | 	sub	fp, #28
2411c                 | LR__3805
2411c     1C 4E 05 F1 | 	add	fp, #28
24120     A7 FA 09 FB | 	rdlong	result1, fp wz
24124     1C 4E 85 F1 | 	sub	fp, #28
24128     A0 05 90 AD |  if_e	jmp	#LR__3822
2412c     1C 4E 05 F1 | 	add	fp, #28
24130     A7 FA 01 FB | 	rdlong	result1, fp
24134     1C 4E 85 F1 | 	sub	fp, #28
24138     01 FA 0D F2 | 	cmp	result1, #1 wz
2413c     1C 00 90 5D |  if_ne	jmp	#LR__3806
24140     04 4E 05 F1 | 	add	fp, #4
24144     A7 FA 01 FB | 	rdlong	result1, fp
24148     04 4E 85 F1 | 	sub	fp, #4
2414c     11 FA 05 F1 | 	add	result1, #17
24150     FD 04 48 FC | 	wrbyte	#2, result1
24154     02 FA 05 F6 | 	mov	result1, #2
24158     98 05 90 FD | 	jmp	#LR__3823
2415c                 | LR__3806
2415c     1C 4E 05 F1 | 	add	fp, #28
24160     A7 FA 01 FB | 	rdlong	result1, fp
24164     1C 4E 85 F1 | 	sub	fp, #28
24168     FF FF 7F FF 
2416c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24170     1C 00 90 5D |  if_ne	jmp	#LR__3807
24174     04 4E 05 F1 | 	add	fp, #4
24178     A7 FA 01 FB | 	rdlong	result1, fp
2417c     04 4E 85 F1 | 	sub	fp, #4
24180     11 FA 05 F1 | 	add	result1, #17
24184     FD 02 48 FC | 	wrbyte	#1, result1
24188     01 FA 05 F6 | 	mov	result1, #1
2418c     64 05 90 FD | 	jmp	#LR__3823
24190                 | LR__3807
24190     04 4E 05 F1 | 	add	fp, #4
24194     A7 FA 01 FB | 	rdlong	result1, fp
24198     18 4E 05 F1 | 	add	fp, #24
2419c     A7 18 02 FB | 	rdlong	arg04, fp
241a0     18 FA 05 F1 | 	add	result1, #24
241a4     FD 18 62 FC | 	wrlong	arg04, result1
241a8     18 4E 85 F1 | 	sub	fp, #24
241ac     A7 FA 01 FB | 	rdlong	result1, fp
241b0     04 4E 85 F1 | 	sub	fp, #4
241b4     08 FA 05 F1 | 	add	result1, #8
241b8     FD FA 09 FB | 	rdlong	result1, result1 wz
241bc     1C 00 90 5D |  if_ne	jmp	#LR__3808
241c0     04 4E 05 F1 | 	add	fp, #4
241c4     A7 18 02 FB | 	rdlong	arg04, fp
241c8     18 4E 05 F1 | 	add	fp, #24
241cc     A7 FA 01 FB | 	rdlong	result1, fp
241d0     1C 4E 85 F1 | 	sub	fp, #28
241d4     08 18 06 F1 | 	add	arg04, #8
241d8     0C FB 61 FC | 	wrlong	result1, arg04
241dc                 | LR__3808
241dc                 | LR__3809
241dc     04 4E 05 F1 | 	add	fp, #4
241e0     A7 18 02 FB | 	rdlong	arg04, fp
241e4     04 4E 85 F1 | 	sub	fp, #4
241e8     10 18 06 F1 | 	add	arg04, #16
241ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
241f0     80 18 CE F7 | 	test	arg04, #128 wz
241f4     7C 00 90 AD |  if_e	jmp	#LR__3811
241f8     18 4E 05 F1 | 	add	fp, #24
241fc     A7 18 02 FB | 	rdlong	arg04, fp
24200     01 18 06 F1 | 	add	arg04, #1
24204     0C 13 C2 FA | 	rdbyte	arg01, arg04
24208     14 4E 85 F1 | 	sub	fp, #20
2420c     A7 18 02 FB | 	rdlong	arg04, fp
24210     0C 15 02 F6 | 	mov	arg02, arg04
24214     28 14 06 F1 | 	add	arg02, #40
24218     04 4E 85 F1 | 	sub	fp, #4
2421c     1C 18 06 F1 | 	add	arg04, #28
24220     0C 17 02 FB | 	rdlong	arg03, arg04
24224     01 18 06 F6 | 	mov	arg04, #1
24228     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2422c     00 FA 0D F2 | 	cmp	result1, #0 wz
24230     1C 00 90 AD |  if_e	jmp	#LR__3810
24234     04 4E 05 F1 | 	add	fp, #4
24238     A7 FA 01 FB | 	rdlong	result1, fp
2423c     04 4E 85 F1 | 	sub	fp, #4
24240     11 FA 05 F1 | 	add	result1, #17
24244     FD 02 48 FC | 	wrbyte	#1, result1
24248     01 FA 05 F6 | 	mov	result1, #1
2424c     A4 04 90 FD | 	jmp	#LR__3823
24250                 | LR__3810
24250     04 4E 05 F1 | 	add	fp, #4
24254     A7 18 02 FB | 	rdlong	arg04, fp
24258     0C FB 01 F6 | 	mov	result1, arg04
2425c     04 4E 85 F1 | 	sub	fp, #4
24260     10 18 06 F1 | 	add	arg04, #16
24264     0C 19 C2 FA | 	rdbyte	arg04, arg04
24268     7F 18 06 F5 | 	and	arg04, #127
2426c     10 FA 05 F1 | 	add	result1, #16
24270     FD 18 42 FC | 	wrbyte	arg04, result1
24274                 | LR__3811
24274     18 4E 05 F1 | 	add	fp, #24
24278     A7 12 02 FB | 	rdlong	arg01, fp
2427c     14 4E 85 F1 | 	sub	fp, #20
24280     A7 14 02 FB | 	rdlong	arg02, fp
24284     04 4E 85 F1 | 	sub	fp, #4
24288     18 14 06 F1 | 	add	arg02, #24
2428c     0A 15 02 FB | 	rdlong	arg02, arg02
24290     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
24294     20 4E 05 F1 | 	add	fp, #32
24298     A7 FA 61 FC | 	wrlong	result1, fp
2429c     20 4E 85 F1 | 	sub	fp, #32
242a0     00 FA 0D F2 | 	cmp	result1, #0 wz
242a4     1C 00 90 5D |  if_ne	jmp	#LR__3812
242a8     04 4E 05 F1 | 	add	fp, #4
242ac     A7 FA 01 FB | 	rdlong	result1, fp
242b0     04 4E 85 F1 | 	sub	fp, #4
242b4     11 FA 05 F1 | 	add	result1, #17
242b8     FD 04 48 FC | 	wrbyte	#2, result1
242bc     02 FA 05 F6 | 	mov	result1, #2
242c0     30 04 90 FD | 	jmp	#LR__3823
242c4                 | LR__3812
242c4     20 4E 05 F1 | 	add	fp, #32
242c8     A7 FA 01 FB | 	rdlong	result1, fp
242cc     0C 4E 05 F1 | 	add	fp, #12
242d0     A7 1E 02 FB | 	rdlong	local01, fp
242d4     0F FB 01 F1 | 	add	result1, local01
242d8     0C 4E 85 F1 | 	sub	fp, #12
242dc     A7 FA 61 FC | 	wrlong	result1, fp
242e0     14 4E 85 F1 | 	sub	fp, #20
242e4     A7 FA 01 FB | 	rdlong	result1, fp
242e8     09 FA 45 F0 | 	shr	result1, #9
242ec     1C 4E 05 F1 | 	add	fp, #28
242f0     A7 FA 61 FC | 	wrlong	result1, fp
242f4     28 4E 85 F1 | 	sub	fp, #40
242f8     01 FA 15 F2 | 	cmp	result1, #1 wc
242fc     60 01 90 CD |  if_b	jmp	#LR__3816
24300     2C 4E 05 F1 | 	add	fp, #44
24304     A7 FA 01 FB | 	rdlong	result1, fp
24308     04 4E 85 F1 | 	sub	fp, #4
2430c     A7 18 02 FB | 	rdlong	arg04, fp
24310     0C FB 01 F1 | 	add	result1, arg04
24314     10 4E 85 F1 | 	sub	fp, #16
24318     A7 18 02 FB | 	rdlong	arg04, fp
2431c     18 4E 85 F1 | 	sub	fp, #24
24320     0A 18 06 F1 | 	add	arg04, #10
24324     0C 19 E2 FA | 	rdword	arg04, arg04
24328     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2432c     28 00 90 ED |  if_be	jmp	#LR__3813
24330     18 4E 05 F1 | 	add	fp, #24
24334     A7 FA 01 FB | 	rdlong	result1, fp
24338     0A FA 05 F1 | 	add	result1, #10
2433c     FD FA E1 FA | 	rdword	result1, result1
24340     14 4E 05 F1 | 	add	fp, #20
24344     A7 18 02 FB | 	rdlong	arg04, fp
24348     0C FB 81 F1 | 	sub	result1, arg04
2434c     04 4E 85 F1 | 	sub	fp, #4
24350     A7 FA 61 FC | 	wrlong	result1, fp
24354     28 4E 85 F1 | 	sub	fp, #40
24358                 | LR__3813
24358     18 4E 05 F1 | 	add	fp, #24
2435c     A7 18 02 FB | 	rdlong	arg04, fp
24360     01 18 06 F1 | 	add	arg04, #1
24364     0C 13 C2 FA | 	rdbyte	arg01, arg04
24368     18 4E 05 F1 | 	add	fp, #24
2436c     A7 14 02 FB | 	rdlong	arg02, fp
24370     10 4E 85 F1 | 	sub	fp, #16
24374     A7 16 02 FB | 	rdlong	arg03, fp
24378     08 4E 05 F1 | 	add	fp, #8
2437c     A7 18 02 FB | 	rdlong	arg04, fp
24380     28 4E 85 F1 | 	sub	fp, #40
24384     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
24388     00 FA 0D F2 | 	cmp	result1, #0 wz
2438c     1C 00 90 AD |  if_e	jmp	#LR__3814
24390     04 4E 05 F1 | 	add	fp, #4
24394     A7 1E 02 FB | 	rdlong	local01, fp
24398     04 4E 85 F1 | 	sub	fp, #4
2439c     11 1E 06 F1 | 	add	local01, #17
243a0     0F 03 48 FC | 	wrbyte	#1, local01
243a4     01 FA 05 F6 | 	mov	result1, #1
243a8     48 03 90 FD | 	jmp	#LR__3823
243ac                 | LR__3814
243ac     04 4E 05 F1 | 	add	fp, #4
243b0     A7 FA 01 FB | 	rdlong	result1, fp
243b4     1C FA 05 F1 | 	add	result1, #28
243b8     FD FA 01 FB | 	rdlong	result1, result1
243bc     1C 4E 05 F1 | 	add	fp, #28
243c0     A7 20 02 FB | 	rdlong	local02, fp
243c4     10 FB 81 F1 | 	sub	result1, local02
243c8     08 4E 05 F1 | 	add	fp, #8
243cc     A7 18 02 FB | 	rdlong	arg04, fp
243d0     28 4E 85 F1 | 	sub	fp, #40
243d4     0C FB 11 F2 | 	cmp	result1, arg04 wc
243d8     68 00 90 3D |  if_ae	jmp	#LR__3815
243dc     04 4E 05 F1 | 	add	fp, #4
243e0     A7 12 02 FB | 	rdlong	arg01, fp
243e4     28 12 06 F1 | 	add	arg01, #40
243e8     2C 4E 05 F1 | 	add	fp, #44
243ec     A7 14 02 FB | 	rdlong	arg02, fp
243f0     2C 4E 85 F1 | 	sub	fp, #44
243f4     A7 FA 01 FB | 	rdlong	result1, fp
243f8     1C FA 05 F1 | 	add	result1, #28
243fc     FD 22 02 FB | 	rdlong	local03, result1
24400     1C 4E 05 F1 | 	add	fp, #28
24404     A7 18 02 FB | 	rdlong	arg04, fp
24408     20 4E 85 F1 | 	sub	fp, #32
2440c     0C 23 82 F1 | 	sub	local03, arg04
24410     09 22 66 F0 | 	shl	local03, #9
24414     11 15 02 F1 | 	add	arg02, local03
24418     09 16 C6 F9 | 	decod	arg03, #9
2441c     C8 43 BF FD | 	call	#__system____builtin_memmove
24420     04 4E 05 F1 | 	add	fp, #4
24424     A7 18 02 FB | 	rdlong	arg04, fp
24428     0C FB 01 F6 | 	mov	result1, arg04
2442c     04 4E 85 F1 | 	sub	fp, #4
24430     10 18 06 F1 | 	add	arg04, #16
24434     0C 19 C2 FA | 	rdbyte	arg04, arg04
24438     7F 18 06 F5 | 	and	arg04, #127
2443c     10 FA 05 F1 | 	add	result1, #16
24440     FD 18 42 FC | 	wrbyte	arg04, result1
24444                 | LR__3815
24444     28 4E 05 F1 | 	add	fp, #40
24448     A7 FA 01 FB | 	rdlong	result1, fp
2444c     09 FA 65 F0 | 	shl	result1, #9
24450     04 4E 85 F1 | 	sub	fp, #4
24454     A7 FA 61 FC | 	wrlong	result1, fp
24458     24 4E 85 F1 | 	sub	fp, #36
2445c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2445c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2445c                 | ' 				}
2445c                 | ' 
2445c                 | ' 
2445c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2445c                 | ' 				continue;
2445c     74 01 90 FD | 	jmp	#LR__3819
24460                 | LR__3816
24460     04 4E 05 F1 | 	add	fp, #4
24464     A7 20 02 FB | 	rdlong	local02, fp
24468     1C 20 06 F1 | 	add	local02, #28
2446c     10 FB 01 FB | 	rdlong	result1, local02
24470     1C 4E 05 F1 | 	add	fp, #28
24474     A7 20 02 FB | 	rdlong	local02, fp
24478     20 4E 85 F1 | 	sub	fp, #32
2447c     10 FB 09 F2 | 	cmp	result1, local02 wz
24480     90 00 90 AD |  if_e	jmp	#LR__3817
24484     04 4E 05 F1 | 	add	fp, #4
24488     A7 FA 01 FB | 	rdlong	result1, fp
2448c     FD 22 02 F6 | 	mov	local03, result1
24490     04 4E 85 F1 | 	sub	fp, #4
24494     14 22 06 F1 | 	add	local03, #20
24498     11 23 02 FB | 	rdlong	local03, local03
2449c     0C FA 05 F1 | 	add	result1, #12
244a0     FD 24 02 FB | 	rdlong	local04, result1
244a4     12 27 02 F6 | 	mov	local05, local04
244a8     13 23 12 F2 | 	cmp	local03, local05 wc
244ac     64 00 90 3D |  if_ae	jmp	#LR__3817
244b0     18 4E 05 F1 | 	add	fp, #24
244b4     A7 18 02 FB | 	rdlong	arg04, fp
244b8     01 18 06 F1 | 	add	arg04, #1
244bc     0C 13 C2 FA | 	rdbyte	arg01, arg04
244c0     14 4E 85 F1 | 	sub	fp, #20
244c4     A7 28 02 FB | 	rdlong	local06, fp
244c8     28 28 06 F1 | 	add	local06, #40
244cc     14 2B 02 F6 | 	mov	local07, local06
244d0     1C 4E 05 F1 | 	add	fp, #28
244d4     A7 2C 02 FB | 	rdlong	local08, fp
244d8     20 4E 85 F1 | 	sub	fp, #32
244dc     01 2E 06 F6 | 	mov	local09, #1
244e0     15 15 02 F6 | 	mov	arg02, local07
244e4     16 17 02 F6 | 	mov	arg03, local08
244e8     01 18 06 F6 | 	mov	arg04, #1
244ec     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
244f0     FD 30 0A F6 | 	mov	local10, result1 wz
244f4     1C 00 90 AD |  if_e	jmp	#LR__3817
244f8     04 4E 05 F1 | 	add	fp, #4
244fc     A7 30 02 FB | 	rdlong	local10, fp
24500     04 4E 85 F1 | 	sub	fp, #4
24504     11 30 06 F1 | 	add	local10, #17
24508     18 03 48 FC | 	wrbyte	#1, local10
2450c                 | ' 				fp->fptr < fp->obj.objsize &&
2450c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2450c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2450c     01 FA 05 F6 | 	mov	result1, #1
24510     E0 01 90 FD | 	jmp	#LR__3823
24514                 | LR__3817
24514     04 4E 05 F1 | 	add	fp, #4
24518     A7 18 02 FB | 	rdlong	arg04, fp
2451c     1C 4E 05 F1 | 	add	fp, #28
24520     A7 FA 01 FB | 	rdlong	result1, fp
24524     20 4E 85 F1 | 	sub	fp, #32
24528     1C 18 06 F1 | 	add	arg04, #28
2452c     0C FB 61 FC | 	wrlong	result1, arg04
24530                 | LR__3818
24530     04 4E 05 F1 | 	add	fp, #4
24534     A7 FA 01 FB | 	rdlong	result1, fp
24538     14 FA 05 F1 | 	add	result1, #20
2453c     FD FA 01 FB | 	rdlong	result1, result1
24540     FF FB 05 F5 | 	and	result1, #511
24544     09 32 C6 F9 | 	decod	local11, #9
24548     FD 32 82 F1 | 	sub	local11, result1
2454c     20 4E 05 F1 | 	add	fp, #32
24550     A7 32 62 FC | 	wrlong	local11, fp
24554     18 4E 85 F1 | 	sub	fp, #24
24558     A7 FA 01 FB | 	rdlong	result1, fp
2455c     0C 4E 85 F1 | 	sub	fp, #12
24560     FD 32 1A F2 | 	cmp	local11, result1 wcz
24564     0C 4E 05 11 |  if_a	add	fp, #12
24568     A7 32 02 1B |  if_a	rdlong	local11, fp
2456c     18 4E 05 11 |  if_a	add	fp, #24
24570     A7 32 62 1C |  if_a	wrlong	local11, fp
24574     24 4E 85 11 |  if_a	sub	fp, #36
24578     04 4E 05 F1 | 	add	fp, #4
2457c     A7 32 02 FB | 	rdlong	local11, fp
24580     19 13 02 F6 | 	mov	arg01, local11
24584     28 12 06 F1 | 	add	arg01, #40
24588     14 32 06 F1 | 	add	local11, #20
2458c     19 33 02 FB | 	rdlong	local11, local11
24590     FF 33 06 F5 | 	and	local11, #511
24594     19 13 02 F1 | 	add	arg01, local11
24598     2C 4E 05 F1 | 	add	fp, #44
2459c     A7 14 02 FB | 	rdlong	arg02, fp
245a0     0C 4E 85 F1 | 	sub	fp, #12
245a4     A7 16 02 FB | 	rdlong	arg03, fp
245a8     24 4E 85 F1 | 	sub	fp, #36
245ac     38 42 BF FD | 	call	#__system____builtin_memmove
245b0     04 4E 05 F1 | 	add	fp, #4
245b4     A7 FA 01 FB | 	rdlong	result1, fp
245b8     FD 32 02 F6 | 	mov	local11, result1
245bc     04 4E 85 F1 | 	sub	fp, #4
245c0     10 FA 05 F1 | 	add	result1, #16
245c4     FD FA C1 FA | 	rdbyte	result1, result1
245c8     80 FA 45 F5 | 	or	result1, #128
245cc     10 32 06 F1 | 	add	local11, #16
245d0     19 FB 41 FC | 	wrbyte	result1, local11
245d4                 | LR__3819
245d4     0C 4E 05 F1 | 	add	fp, #12
245d8     A7 32 02 FB | 	rdlong	local11, fp
245dc     18 4E 05 F1 | 	add	fp, #24
245e0     A7 FA 01 FB | 	rdlong	result1, fp
245e4     FD 32 82 F1 | 	sub	local11, result1
245e8     18 4E 85 F1 | 	sub	fp, #24
245ec     A7 32 62 FC | 	wrlong	local11, fp
245f0     04 4E 05 F1 | 	add	fp, #4
245f4     A7 34 02 FB | 	rdlong	local12, fp
245f8     1A 33 02 FB | 	rdlong	local11, local12
245fc     14 4E 05 F1 | 	add	fp, #20
24600     A7 36 02 FB | 	rdlong	local13, fp
24604     1B 33 02 F1 | 	add	local11, local13
24608     1A 33 62 FC | 	wrlong	local11, local12
2460c     0C 4E 05 F1 | 	add	fp, #12
24610     A7 32 02 FB | 	rdlong	local11, fp
24614     0C 4E 85 F1 | 	sub	fp, #12
24618     A7 38 02 FB | 	rdlong	local14, fp
2461c     1C 33 02 F1 | 	add	local11, local14
24620     0C 4E 05 F1 | 	add	fp, #12
24624     A7 32 62 FC | 	wrlong	local11, fp
24628     2C 4E 85 F1 | 	sub	fp, #44
2462c     A7 3A 02 FB | 	rdlong	local15, fp
24630     1D 33 02 F6 | 	mov	local11, local15
24634     14 3A 06 F1 | 	add	local15, #20
24638     1D 3B 02 FB | 	rdlong	local15, local15
2463c     20 4E 05 F1 | 	add	fp, #32
24640     A7 3C 02 FB | 	rdlong	local16, fp
24644     1E 3B 02 F1 | 	add	local15, local16
24648     14 32 06 F1 | 	add	local11, #20
2464c     19 3B 62 FC | 	wrlong	local15, local11
24650     20 4E 85 F1 | 	sub	fp, #32
24654     A7 3E 02 FB | 	rdlong	local17, fp
24658     1F 33 02 F6 | 	mov	local11, local17
2465c     1F 41 02 F6 | 	mov	local18, local17
24660     04 4E 85 F1 | 	sub	fp, #4
24664     14 3E 06 F1 | 	add	local17, #20
24668     1F 43 02 FB | 	rdlong	local19, local17
2466c     0C 40 06 F1 | 	add	local18, #12
24670     20 45 02 FB | 	rdlong	local20, local18
24674     22 43 1A F2 | 	cmp	local19, local20 wcz
24678     24 00 90 ED |  if_be	jmp	#LR__3820
2467c     04 4E 05 F1 | 	add	fp, #4
24680     A7 26 02 FB | 	rdlong	local05, fp
24684     04 4E 85 F1 | 	sub	fp, #4
24688     13 23 02 F6 | 	mov	local03, local05
2468c     14 22 06 F1 | 	add	local03, #20
24690     11 25 02 FB | 	rdlong	local04, local03
24694     14 22 86 F1 | 	sub	local03, #20
24698     12 47 02 F6 | 	mov	local21, local04
2469c     20 00 90 FD | 	jmp	#LR__3821
246a0                 | LR__3820
246a0     04 4E 05 F1 | 	add	fp, #4
246a4     A7 2A 02 FB | 	rdlong	local07, fp
246a8     04 4E 85 F1 | 	sub	fp, #4
246ac     15 31 02 F6 | 	mov	local10, local07
246b0     0C 30 06 F1 | 	add	local10, #12
246b4     18 2D 02 FB | 	rdlong	local08, local10
246b8     0C 30 86 F1 | 	sub	local10, #12
246bc     16 47 02 F6 | 	mov	local21, local08
246c0                 | LR__3821
246c0     0C 32 06 F1 | 	add	local11, #12
246c4     19 47 62 FC | 	wrlong	local21, local11
246c8     5C F9 9F FD | 	jmp	#LR__3803
246cc                 | LR__3822
246cc     04 4E 05 F1 | 	add	fp, #4
246d0     A7 34 02 FB | 	rdlong	local12, fp
246d4     1A 1F 02 F6 | 	mov	local01, local12
246d8     04 4E 85 F1 | 	sub	fp, #4
246dc     10 34 06 F1 | 	add	local12, #16
246e0     1A 33 C2 FA | 	rdbyte	local11, local12
246e4     40 32 46 F5 | 	or	local11, #64
246e8     10 1E 06 F1 | 	add	local01, #16
246ec     0F 33 42 FC | 	wrbyte	local11, local01
246f0                 | ' 
246f0                 | ' 
246f0                 | ' 
246f0                 | ' 
246f0                 | ' 
246f0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
246f0                 | ' 		fp->flag |=  0x80 ;
246f0                 | ' 
246f0                 | ' 	}
246f0                 | ' 
246f0                 | ' 	fp->flag |=  0x40 ;
246f0                 | ' 
246f0                 | ' 	return FR_OK ;
246f0     00 FA 05 F6 | 	mov	result1, #0
246f4                 | LR__3823
246f4     A7 F0 03 F6 | 	mov	ptra, fp
246f8     B2 00 A0 FD | 	call	#popregs_
246fc                 | _fatfs_cc_f_write_ret
246fc     2D 00 64 FD | 	ret
24700                 | 
24700                 | _fatfs_cc_f_sync
24700     00 4A 05 F6 | 	mov	COUNT_, #0
24704     A8 00 A0 FD | 	call	#pushregs_
24708     18 F0 07 F1 | 	add	ptra, #24
2470c     04 4E 05 F1 | 	add	fp, #4
24710     A7 12 62 FC | 	wrlong	arg01, fp
24714     08 4E 05 F1 | 	add	fp, #8
24718     A7 14 02 F6 | 	mov	arg02, fp
2471c     0C 4E 85 F1 | 	sub	fp, #12
24720     D0 E8 BF FD | 	call	#_fatfs_cc_validate
24724     08 4E 05 F1 | 	add	fp, #8
24728     A7 FA 61 FC | 	wrlong	result1, fp
2472c     08 4E 85 F1 | 	sub	fp, #8
24730     00 FA 0D F2 | 	cmp	result1, #0 wz
24734     C0 01 90 5D |  if_ne	jmp	#LR__3833
24738     04 4E 05 F1 | 	add	fp, #4
2473c     A7 18 02 FB | 	rdlong	arg04, fp
24740     04 4E 85 F1 | 	sub	fp, #4
24744     10 18 06 F1 | 	add	arg04, #16
24748     0C 19 C2 FA | 	rdbyte	arg04, arg04
2474c     40 18 CE F7 | 	test	arg04, #64 wz
24750     A4 01 90 AD |  if_e	jmp	#LR__3832
24754     04 4E 05 F1 | 	add	fp, #4
24758     A7 18 02 FB | 	rdlong	arg04, fp
2475c     04 4E 85 F1 | 	sub	fp, #4
24760     10 18 06 F1 | 	add	arg04, #16
24764     0C 19 C2 FA | 	rdbyte	arg04, arg04
24768     80 18 CE F7 | 	test	arg04, #128 wz
2476c     64 00 90 AD |  if_e	jmp	#LR__3830
24770     0C 4E 05 F1 | 	add	fp, #12
24774     A7 18 02 FB | 	rdlong	arg04, fp
24778     01 18 06 F1 | 	add	arg04, #1
2477c     0C 13 C2 FA | 	rdbyte	arg01, arg04
24780     08 4E 85 F1 | 	sub	fp, #8
24784     A7 18 02 FB | 	rdlong	arg04, fp
24788     0C 15 02 F6 | 	mov	arg02, arg04
2478c     28 14 06 F1 | 	add	arg02, #40
24790     04 4E 85 F1 | 	sub	fp, #4
24794     1C 18 06 F1 | 	add	arg04, #28
24798     0C 17 02 FB | 	rdlong	arg03, arg04
2479c     01 18 06 F6 | 	mov	arg04, #1
247a0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
247a4     00 FA 0D F2 | 	cmp	result1, #0 wz
247a8     01 FA 05 56 |  if_ne	mov	result1, #1
247ac     54 01 90 5D |  if_ne	jmp	#LR__3834
247b0     04 4E 05 F1 | 	add	fp, #4
247b4     A7 18 02 FB | 	rdlong	arg04, fp
247b8     0C 17 02 F6 | 	mov	arg03, arg04
247bc     04 4E 85 F1 | 	sub	fp, #4
247c0     10 18 06 F1 | 	add	arg04, #16
247c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
247c8     7F 18 06 F5 | 	and	arg04, #127
247cc     10 16 06 F1 | 	add	arg03, #16
247d0     0B 19 42 FC | 	wrbyte	arg04, arg03
247d4                 | LR__3830
247d4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
247d8     10 4E 05 F1 | 	add	fp, #16
247dc     A7 FA 61 FC | 	wrlong	result1, fp
247e0     04 4E 85 F1 | 	sub	fp, #4
247e4     A7 12 02 FB | 	rdlong	arg01, fp
247e8     08 4E 85 F1 | 	sub	fp, #8
247ec     A7 18 02 FB | 	rdlong	arg04, fp
247f0     04 4E 85 F1 | 	sub	fp, #4
247f4     20 18 06 F1 | 	add	arg04, #32
247f8     0C 15 02 FB | 	rdlong	arg02, arg04
247fc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
24800     08 4E 05 F1 | 	add	fp, #8
24804     A7 FA 61 FC | 	wrlong	result1, fp
24808     08 4E 85 F1 | 	sub	fp, #8
2480c     00 FA 0D F2 | 	cmp	result1, #0 wz
24810     E4 00 90 5D |  if_ne	jmp	#LR__3831
24814     04 4E 05 F1 | 	add	fp, #4
24818     A7 18 02 FB | 	rdlong	arg04, fp
2481c     24 18 06 F1 | 	add	arg04, #36
24820     0C 19 02 FB | 	rdlong	arg04, arg04
24824     10 4E 05 F1 | 	add	fp, #16
24828     A7 18 62 FC | 	wrlong	arg04, fp
2482c     0C 17 02 F6 | 	mov	arg03, arg04
24830     0B 16 06 F1 | 	add	arg03, #11
24834     0B 17 C2 FA | 	rdbyte	arg03, arg03
24838     20 16 46 F5 | 	or	arg03, #32
2483c     0B 18 06 F1 | 	add	arg04, #11
24840     0C 17 42 FC | 	wrbyte	arg03, arg04
24844     10 4E 85 F1 | 	sub	fp, #16
24848     A7 18 02 FB | 	rdlong	arg04, fp
2484c     0C 13 02 FB | 	rdlong	arg01, arg04
24850     10 4E 05 F1 | 	add	fp, #16
24854     A7 14 02 FB | 	rdlong	arg02, fp
24858     14 4E 85 F1 | 	sub	fp, #20
2485c     08 18 06 F1 | 	add	arg04, #8
24860     0C 17 02 FB | 	rdlong	arg03, arg04
24864     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
24868     14 4E 05 F1 | 	add	fp, #20
2486c     A7 12 02 FB | 	rdlong	arg01, fp
24870     1C 12 06 F1 | 	add	arg01, #28
24874     10 4E 85 F1 | 	sub	fp, #16
24878     A7 18 02 FB | 	rdlong	arg04, fp
2487c     0C 18 06 F1 | 	add	arg04, #12
24880     0C 15 02 FB | 	rdlong	arg02, arg04
24884     09 15 62 FC | 	wrlong	arg02, arg01
24888     10 4E 05 F1 | 	add	fp, #16
2488c     A7 12 02 FB | 	rdlong	arg01, fp
24890     16 12 06 F1 | 	add	arg01, #22
24894     04 4E 85 F1 | 	sub	fp, #4
24898     A7 14 02 FB | 	rdlong	arg02, fp
2489c     09 15 62 FC | 	wrlong	arg02, arg01
248a0     04 4E 05 F1 | 	add	fp, #4
248a4     A7 12 02 FB | 	rdlong	arg01, fp
248a8     12 12 06 F1 | 	add	arg01, #18
248ac     09 01 58 FC | 	wrword	#0, arg01
248b0     08 4E 85 F1 | 	sub	fp, #8
248b4     A7 18 02 FB | 	rdlong	arg04, fp
248b8     03 18 06 F1 | 	add	arg04, #3
248bc     0C 03 48 FC | 	wrbyte	#1, arg04
248c0     A7 12 02 FB | 	rdlong	arg01, fp
248c4     0C 4E 85 F1 | 	sub	fp, #12
248c8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
248cc     08 4E 05 F1 | 	add	fp, #8
248d0     A7 FA 61 FC | 	wrlong	result1, fp
248d4     04 4E 85 F1 | 	sub	fp, #4
248d8     A7 18 02 FB | 	rdlong	arg04, fp
248dc     0C 17 02 F6 | 	mov	arg03, arg04
248e0     04 4E 85 F1 | 	sub	fp, #4
248e4     10 18 06 F1 | 	add	arg04, #16
248e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
248ec     BF 18 06 F5 | 	and	arg04, #191
248f0     10 16 06 F1 | 	add	arg03, #16
248f4     0B 19 42 FC | 	wrbyte	arg04, arg03
248f8                 | LR__3831
248f8                 | LR__3832
248f8                 | LR__3833
248f8                 | ' 					dir = fp->dir_ptr;
248f8                 | ' 					dir[ 11 ] |=  0x20 ;
248f8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
248f8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
248f8                 | ' 					st_dword(dir +  22 , tm);
248f8                 | ' 					st_word(dir +  18 , 0);
248f8                 | ' 					fs->wflag = 1;
248f8                 | ' 					res = sync_fs(fs);
248f8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
248f8                 | ' 				}
248f8                 | ' 			}
248f8                 | ' 		}
248f8                 | ' 	}
248f8                 | ' 
248f8                 | ' 	return res ;
248f8     08 4E 05 F1 | 	add	fp, #8
248fc     A7 FA 01 FB | 	rdlong	result1, fp
24900     08 4E 85 F1 | 	sub	fp, #8
24904                 | LR__3834
24904     A7 F0 03 F6 | 	mov	ptra, fp
24908     B2 00 A0 FD | 	call	#popregs_
2490c                 | _fatfs_cc_f_sync_ret
2490c     2D 00 64 FD | 	ret
24910                 | 
24910                 | _fatfs_cc_f_close
24910     01 4A 05 F6 | 	mov	COUNT_, #1
24914     A8 00 A0 FD | 	call	#pushregs_
24918     10 F0 07 F1 | 	add	ptra, #16
2491c     04 4E 05 F1 | 	add	fp, #4
24920     A7 12 62 FC | 	wrlong	arg01, fp
24924     04 4E 85 F1 | 	sub	fp, #4
24928     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2492c     08 4E 05 F1 | 	add	fp, #8
24930     A7 FA 61 FC | 	wrlong	result1, fp
24934     08 4E 85 F1 | 	sub	fp, #8
24938     00 FA 0D F2 | 	cmp	result1, #0 wz
2493c     38 00 90 5D |  if_ne	jmp	#LR__3840
24940     04 4E 05 F1 | 	add	fp, #4
24944     A7 12 02 FB | 	rdlong	arg01, fp
24948     08 4E 05 F1 | 	add	fp, #8
2494c     A7 14 02 F6 | 	mov	arg02, fp
24950     0C 4E 85 F1 | 	sub	fp, #12
24954     9C E6 BF FD | 	call	#_fatfs_cc_validate
24958     08 4E 05 F1 | 	add	fp, #8
2495c     A7 FA 61 FC | 	wrlong	result1, fp
24960     08 4E 85 F1 | 	sub	fp, #8
24964     00 FA 0D F2 | 	cmp	result1, #0 wz
24968     04 4E 05 A1 |  if_e	add	fp, #4
2496c     A7 1E 02 AB |  if_e	rdlong	local01, fp
24970     04 4E 85 A1 |  if_e	sub	fp, #4
24974     0F 01 68 AC |  if_e	wrlong	#0, local01
24978                 | LR__3840
24978                 | ' 
24978                 | ' 
24978                 | ' 
24978                 | ' 
24978                 | ' 			fp->obj.fs = 0;
24978                 | ' #line 4192 "ff.c"
24978                 | ' 		}
24978                 | ' 	}
24978                 | ' 	return res;
24978     08 4E 05 F1 | 	add	fp, #8
2497c     A7 FA 01 FB | 	rdlong	result1, fp
24980     08 4E 85 F1 | 	sub	fp, #8
24984     A7 F0 03 F6 | 	mov	ptra, fp
24988     B2 00 A0 FD | 	call	#popregs_
2498c                 | _fatfs_cc_f_close_ret
2498c     2D 00 64 FD | 	ret
24990                 | 
24990                 | _fatfs_cc_f_lseek
24990     00 4A 05 F6 | 	mov	COUNT_, #0
24994     A8 00 A0 FD | 	call	#pushregs_
24998     24 F0 07 F1 | 	add	ptra, #36
2499c     04 4E 05 F1 | 	add	fp, #4
249a0     A7 12 62 FC | 	wrlong	arg01, fp
249a4     04 4E 05 F1 | 	add	fp, #4
249a8     A7 14 62 FC | 	wrlong	arg02, fp
249ac     04 4E 85 F1 | 	sub	fp, #4
249b0     A7 12 02 FB | 	rdlong	arg01, fp
249b4     0C 4E 05 F1 | 	add	fp, #12
249b8     A7 14 02 F6 | 	mov	arg02, fp
249bc     10 4E 85 F1 | 	sub	fp, #16
249c0     30 E6 BF FD | 	call	#_fatfs_cc_validate
249c4     0C 4E 05 F1 | 	add	fp, #12
249c8     A7 FA 61 FC | 	wrlong	result1, fp
249cc     0C 4E 85 F1 | 	sub	fp, #12
249d0     00 FA 0D F2 | 	cmp	result1, #0 wz
249d4     1C 00 90 5D |  if_ne	jmp	#LR__3850
249d8     04 4E 05 F1 | 	add	fp, #4
249dc     A7 18 02 FB | 	rdlong	arg04, fp
249e0     11 18 06 F1 | 	add	arg04, #17
249e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
249e8     08 4E 05 F1 | 	add	fp, #8
249ec     A7 18 62 FC | 	wrlong	arg04, fp
249f0     0C 4E 85 F1 | 	sub	fp, #12
249f4                 | LR__3850
249f4     0C 4E 05 F1 | 	add	fp, #12
249f8     A7 18 0A FB | 	rdlong	arg04, fp wz
249fc     0C 4E 85 F1 | 	sub	fp, #12
24a00     0C 4E 05 51 |  if_ne	add	fp, #12
24a04     A7 FA 01 5B |  if_ne	rdlong	result1, fp
24a08     0C 4E 85 51 |  if_ne	sub	fp, #12
24a0c     40 06 90 5D |  if_ne	jmp	#LR__3873
24a10     04 4E 05 F1 | 	add	fp, #4
24a14     A7 18 02 FB | 	rdlong	arg04, fp
24a18     04 4E 05 F1 | 	add	fp, #4
24a1c     A7 16 02 FB | 	rdlong	arg03, fp
24a20     08 4E 85 F1 | 	sub	fp, #8
24a24     0C 18 06 F1 | 	add	arg04, #12
24a28     0C 19 02 FB | 	rdlong	arg04, arg04
24a2c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
24a30     3C 00 90 ED |  if_be	jmp	#LR__3851
24a34     04 4E 05 F1 | 	add	fp, #4
24a38     A7 16 02 FB | 	rdlong	arg03, fp
24a3c     04 4E 85 F1 | 	sub	fp, #4
24a40     10 16 06 F1 | 	add	arg03, #16
24a44     0B 17 C2 FA | 	rdbyte	arg03, arg03
24a48     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
24a4c     02 16 CE F7 | 	test	arg03, #2 wz
24a50     1C 00 90 5D |  if_ne	jmp	#LR__3851
24a54     04 4E 05 F1 | 	add	fp, #4
24a58     A7 16 02 FB | 	rdlong	arg03, fp
24a5c     0C 16 06 F1 | 	add	arg03, #12
24a60     0B 17 02 FB | 	rdlong	arg03, arg03
24a64     04 4E 05 F1 | 	add	fp, #4
24a68     A7 16 62 FC | 	wrlong	arg03, fp
24a6c     08 4E 85 F1 | 	sub	fp, #8
24a70                 | LR__3851
24a70     04 4E 05 F1 | 	add	fp, #4
24a74     A7 16 02 FB | 	rdlong	arg03, fp
24a78     14 16 06 F1 | 	add	arg03, #20
24a7c     0B 17 02 FB | 	rdlong	arg03, arg03
24a80     1C 4E 05 F1 | 	add	fp, #28
24a84     A7 16 62 FC | 	wrlong	arg03, fp
24a88     1C 4E 85 F1 | 	sub	fp, #28
24a8c     A7 16 02 FB | 	rdlong	arg03, fp
24a90     18 4E 05 F1 | 	add	fp, #24
24a94     A7 00 68 FC | 	wrlong	#0, fp
24a98     14 16 06 F1 | 	add	arg03, #20
24a9c     0B 01 68 FC | 	wrlong	#0, arg03
24aa0     14 4E 85 F1 | 	sub	fp, #20
24aa4     A7 16 02 FB | 	rdlong	arg03, fp
24aa8     08 4E 85 F1 | 	sub	fp, #8
24aac     01 16 16 F2 | 	cmp	arg03, #1 wc
24ab0     E4 03 90 CD |  if_b	jmp	#LR__3867
24ab4     10 4E 05 F1 | 	add	fp, #16
24ab8     A7 16 02 FB | 	rdlong	arg03, fp
24abc     0A 16 06 F1 | 	add	arg03, #10
24ac0     0B 19 E2 FA | 	rdword	arg04, arg03
24ac4     09 18 66 F0 | 	shl	arg04, #9
24ac8     08 4E 05 F1 | 	add	fp, #8
24acc     A7 18 62 FC | 	wrlong	arg04, fp
24ad0     08 4E 05 F1 | 	add	fp, #8
24ad4     A7 18 02 FB | 	rdlong	arg04, fp
24ad8     20 4E 85 F1 | 	sub	fp, #32
24adc     01 18 16 F2 | 	cmp	arg04, #1 wc
24ae0     AC 00 90 CD |  if_b	jmp	#LR__3852
24ae4     08 4E 05 F1 | 	add	fp, #8
24ae8     A7 18 02 FB | 	rdlong	arg04, fp
24aec     01 18 86 F1 | 	sub	arg04, #1
24af0     10 4E 05 F1 | 	add	fp, #16
24af4     A7 16 02 FB | 	rdlong	arg03, fp
24af8     0B 19 12 FD | 	qdiv	arg04, arg03
24afc     08 4E 05 F1 | 	add	fp, #8
24b00     A7 FA 01 FB | 	rdlong	result1, fp
24b04     01 FA 85 F1 | 	sub	result1, #1
24b08     18 18 62 FD | 	getqx	arg04
24b0c     0B FB 11 FD | 	qdiv	result1, arg03
24b10     20 4E 85 F1 | 	sub	fp, #32
24b14     18 16 62 FD | 	getqx	arg03
24b18     0B 19 12 F2 | 	cmp	arg04, arg03 wc
24b1c     70 00 90 CD |  if_b	jmp	#LR__3852
24b20     04 4E 05 F1 | 	add	fp, #4
24b24     A7 16 02 FB | 	rdlong	arg03, fp
24b28     1C 4E 05 F1 | 	add	fp, #28
24b2c     A7 FA 01 FB | 	rdlong	result1, fp
24b30     01 FA 85 F1 | 	sub	result1, #1
24b34     08 4E 85 F1 | 	sub	fp, #8
24b38     A7 18 02 FB | 	rdlong	arg04, fp
24b3c     01 18 86 F1 | 	sub	arg04, #1
24b40     0C FB 21 F5 | 	andn	result1, arg04
24b44     14 16 06 F1 | 	add	arg03, #20
24b48     0B FB 61 FC | 	wrlong	result1, arg03
24b4c     10 4E 85 F1 | 	sub	fp, #16
24b50     A7 16 02 FB | 	rdlong	arg03, fp
24b54     04 4E 85 F1 | 	sub	fp, #4
24b58     A7 18 02 FB | 	rdlong	arg04, fp
24b5c     14 18 06 F1 | 	add	arg04, #20
24b60     0C 19 02 FB | 	rdlong	arg04, arg04
24b64     0C 17 82 F1 | 	sub	arg03, arg04
24b68     04 4E 05 F1 | 	add	fp, #4
24b6c     A7 16 62 FC | 	wrlong	arg03, fp
24b70     04 4E 85 F1 | 	sub	fp, #4
24b74     A7 16 02 FB | 	rdlong	arg03, fp
24b78     18 16 06 F1 | 	add	arg03, #24
24b7c     0B 17 02 FB | 	rdlong	arg03, arg03
24b80     10 4E 05 F1 | 	add	fp, #16
24b84     A7 16 62 FC | 	wrlong	arg03, fp
24b88     14 4E 85 F1 | 	sub	fp, #20
24b8c     D0 00 90 FD | 	jmp	#LR__3856
24b90                 | LR__3852
24b90     04 4E 05 F1 | 	add	fp, #4
24b94     A7 16 02 FB | 	rdlong	arg03, fp
24b98     08 16 06 F1 | 	add	arg03, #8
24b9c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
24ba0     10 4E 05 F1 | 	add	fp, #16
24ba4     A7 16 62 FC | 	wrlong	arg03, fp
24ba8     14 4E 85 F1 | 	sub	fp, #20
24bac     94 00 90 5D |  if_ne	jmp	#LR__3855
24bb0     04 4E 05 F1 | 	add	fp, #4
24bb4     A7 12 02 FB | 	rdlong	arg01, fp
24bb8     04 4E 85 F1 | 	sub	fp, #4
24bbc     00 14 06 F6 | 	mov	arg02, #0
24bc0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
24bc4     14 4E 05 F1 | 	add	fp, #20
24bc8     A7 FA 61 FC | 	wrlong	result1, fp
24bcc     14 4E 85 F1 | 	sub	fp, #20
24bd0     01 FA 0D F2 | 	cmp	result1, #1 wz
24bd4     1C 00 90 5D |  if_ne	jmp	#LR__3853
24bd8     04 4E 05 F1 | 	add	fp, #4
24bdc     A7 16 02 FB | 	rdlong	arg03, fp
24be0     04 4E 85 F1 | 	sub	fp, #4
24be4     11 16 06 F1 | 	add	arg03, #17
24be8     0B 05 48 FC | 	wrbyte	#2, arg03
24bec     02 FA 05 F6 | 	mov	result1, #2
24bf0     5C 04 90 FD | 	jmp	#LR__3873
24bf4                 | LR__3853
24bf4     14 4E 05 F1 | 	add	fp, #20
24bf8     A7 FA 01 FB | 	rdlong	result1, fp
24bfc     14 4E 85 F1 | 	sub	fp, #20
24c00     FF FF 7F FF 
24c04     FF FB 0D F2 | 	cmp	result1, ##-1 wz
24c08     1C 00 90 5D |  if_ne	jmp	#LR__3854
24c0c     04 4E 05 F1 | 	add	fp, #4
24c10     A7 16 02 FB | 	rdlong	arg03, fp
24c14     04 4E 85 F1 | 	sub	fp, #4
24c18     11 16 06 F1 | 	add	arg03, #17
24c1c     0B 03 48 FC | 	wrbyte	#1, arg03
24c20     01 FA 05 F6 | 	mov	result1, #1
24c24     28 04 90 FD | 	jmp	#LR__3873
24c28                 | LR__3854
24c28     04 4E 05 F1 | 	add	fp, #4
24c2c     A7 16 02 FB | 	rdlong	arg03, fp
24c30     10 4E 05 F1 | 	add	fp, #16
24c34     A7 18 02 FB | 	rdlong	arg04, fp
24c38     14 4E 85 F1 | 	sub	fp, #20
24c3c     08 16 06 F1 | 	add	arg03, #8
24c40     0B 19 62 FC | 	wrlong	arg04, arg03
24c44                 | LR__3855
24c44     04 4E 05 F1 | 	add	fp, #4
24c48     A7 16 02 FB | 	rdlong	arg03, fp
24c4c     10 4E 05 F1 | 	add	fp, #16
24c50     A7 18 02 FB | 	rdlong	arg04, fp
24c54     14 4E 85 F1 | 	sub	fp, #20
24c58     18 16 06 F1 | 	add	arg03, #24
24c5c     0B 19 62 FC | 	wrlong	arg04, arg03
24c60                 | LR__3856
24c60     14 4E 05 F1 | 	add	fp, #20
24c64     A7 16 0A FB | 	rdlong	arg03, fp wz
24c68     14 4E 85 F1 | 	sub	fp, #20
24c6c     28 02 90 AD |  if_e	jmp	#LR__3866
24c70                 | ' 				while (ofs > bcs) {
24c70                 | LR__3857
24c70     08 4E 05 F1 | 	add	fp, #8
24c74     A7 18 02 FB | 	rdlong	arg04, fp
24c78     10 4E 05 F1 | 	add	fp, #16
24c7c     A7 16 02 FB | 	rdlong	arg03, fp
24c80     18 4E 85 F1 | 	sub	fp, #24
24c84     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
24c88     68 01 90 ED |  if_be	jmp	#LR__3863
24c8c     08 4E 05 F1 | 	add	fp, #8
24c90     A7 18 02 FB | 	rdlong	arg04, fp
24c94     10 4E 05 F1 | 	add	fp, #16
24c98     A7 16 02 FB | 	rdlong	arg03, fp
24c9c     0B 19 82 F1 | 	sub	arg04, arg03
24ca0     10 4E 85 F1 | 	sub	fp, #16
24ca4     A7 18 62 FC | 	wrlong	arg04, fp
24ca8     04 4E 85 F1 | 	sub	fp, #4
24cac     A7 18 02 FB | 	rdlong	arg04, fp
24cb0     0C FB 01 F6 | 	mov	result1, arg04
24cb4     14 18 06 F1 | 	add	arg04, #20
24cb8     0C 19 02 FB | 	rdlong	arg04, arg04
24cbc     14 4E 05 F1 | 	add	fp, #20
24cc0     A7 16 02 FB | 	rdlong	arg03, fp
24cc4     0B 19 02 F1 | 	add	arg04, arg03
24cc8     14 FA 05 F1 | 	add	result1, #20
24ccc     FD 18 62 FC | 	wrlong	arg04, result1
24cd0     14 4E 85 F1 | 	sub	fp, #20
24cd4     A7 16 02 FB | 	rdlong	arg03, fp
24cd8     04 4E 85 F1 | 	sub	fp, #4
24cdc     10 16 06 F1 | 	add	arg03, #16
24ce0     0B 17 C2 FA | 	rdbyte	arg03, arg03
24ce4     02 16 CE F7 | 	test	arg03, #2 wz
24ce8     3C 00 90 AD |  if_e	jmp	#LR__3858
24cec     04 4E 05 F1 | 	add	fp, #4
24cf0     A7 12 02 FB | 	rdlong	arg01, fp
24cf4     10 4E 05 F1 | 	add	fp, #16
24cf8     A7 14 02 FB | 	rdlong	arg02, fp
24cfc     14 4E 85 F1 | 	sub	fp, #20
24d00     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
24d04     14 4E 05 F1 | 	add	fp, #20
24d08     A7 FA 61 FC | 	wrlong	result1, fp
24d0c     00 FA 4D F2 | 	cmps	result1, #0 wz
24d10     14 4E 85 F1 | 	sub	fp, #20
24d14     08 4E 05 A1 |  if_e	add	fp, #8
24d18     A7 00 68 AC |  if_e	wrlong	#0, fp
24d1c     08 4E 85 A1 |  if_e	sub	fp, #8
24d20                 | ' 							ofs = 0; break;
24d20     D0 00 90 AD |  if_e	jmp	#LR__3863
24d24     24 00 90 FD | 	jmp	#LR__3859
24d28                 | LR__3858
24d28     04 4E 05 F1 | 	add	fp, #4
24d2c     A7 12 02 FB | 	rdlong	arg01, fp
24d30     10 4E 05 F1 | 	add	fp, #16
24d34     A7 14 02 FB | 	rdlong	arg02, fp
24d38     14 4E 85 F1 | 	sub	fp, #20
24d3c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
24d40     14 4E 05 F1 | 	add	fp, #20
24d44     A7 FA 61 FC | 	wrlong	result1, fp
24d48     14 4E 85 F1 | 	sub	fp, #20
24d4c                 | LR__3859
24d4c     14 4E 05 F1 | 	add	fp, #20
24d50     A7 16 02 FB | 	rdlong	arg03, fp
24d54     14 4E 85 F1 | 	sub	fp, #20
24d58     FF FF 7F FF 
24d5c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
24d60     1C 00 90 5D |  if_ne	jmp	#LR__3860
24d64     04 4E 05 F1 | 	add	fp, #4
24d68     A7 16 02 FB | 	rdlong	arg03, fp
24d6c     04 4E 85 F1 | 	sub	fp, #4
24d70     11 16 06 F1 | 	add	arg03, #17
24d74     0B 03 48 FC | 	wrbyte	#1, arg03
24d78     01 FA 05 F6 | 	mov	result1, #1
24d7c     D0 02 90 FD | 	jmp	#LR__3873
24d80                 | LR__3860
24d80     14 4E 05 F1 | 	add	fp, #20
24d84     A7 16 02 FB | 	rdlong	arg03, fp
24d88     14 4E 85 F1 | 	sub	fp, #20
24d8c     02 16 16 F2 | 	cmp	arg03, #2 wc
24d90     24 00 90 CD |  if_b	jmp	#LR__3861
24d94     10 4E 05 F1 | 	add	fp, #16
24d98     A7 18 02 FB | 	rdlong	arg04, fp
24d9c     04 4E 05 F1 | 	add	fp, #4
24da0     A7 16 02 FB | 	rdlong	arg03, fp
24da4     14 4E 85 F1 | 	sub	fp, #20
24da8     18 18 06 F1 | 	add	arg04, #24
24dac     0C 19 02 FB | 	rdlong	arg04, arg04
24db0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
24db4     1C 00 90 CD |  if_b	jmp	#LR__3862
24db8                 | LR__3861
24db8     04 4E 05 F1 | 	add	fp, #4
24dbc     A7 16 02 FB | 	rdlong	arg03, fp
24dc0     04 4E 85 F1 | 	sub	fp, #4
24dc4     11 16 06 F1 | 	add	arg03, #17
24dc8     0B 05 48 FC | 	wrbyte	#2, arg03
24dcc     02 FA 05 F6 | 	mov	result1, #2
24dd0     7C 02 90 FD | 	jmp	#LR__3873
24dd4                 | LR__3862
24dd4     04 4E 05 F1 | 	add	fp, #4
24dd8     A7 18 02 FB | 	rdlong	arg04, fp
24ddc     10 4E 05 F1 | 	add	fp, #16
24de0     A7 16 02 FB | 	rdlong	arg03, fp
24de4     14 4E 85 F1 | 	sub	fp, #20
24de8     18 18 06 F1 | 	add	arg04, #24
24dec     0C 17 62 FC | 	wrlong	arg03, arg04
24df0     7C FE 9F FD | 	jmp	#LR__3857
24df4                 | LR__3863
24df4     04 4E 05 F1 | 	add	fp, #4
24df8     A7 16 02 FB | 	rdlong	arg03, fp
24dfc     0B 13 02 F6 | 	mov	arg01, arg03
24e00     14 16 06 F1 | 	add	arg03, #20
24e04     0B 15 02 FB | 	rdlong	arg02, arg03
24e08     04 4E 05 F1 | 	add	fp, #4
24e0c     A7 16 02 FB | 	rdlong	arg03, fp
24e10     0B 15 02 F1 | 	add	arg02, arg03
24e14     14 12 06 F1 | 	add	arg01, #20
24e18     09 15 62 FC | 	wrlong	arg02, arg01
24e1c     A7 16 02 FB | 	rdlong	arg03, fp
24e20     08 4E 85 F1 | 	sub	fp, #8
24e24     FF 17 CE F7 | 	test	arg03, #511 wz
24e28     6C 00 90 AD |  if_e	jmp	#LR__3865
24e2c     10 4E 05 F1 | 	add	fp, #16
24e30     A7 12 02 FB | 	rdlong	arg01, fp
24e34     04 4E 05 F1 | 	add	fp, #4
24e38     A7 14 02 FB | 	rdlong	arg02, fp
24e3c     14 4E 85 F1 | 	sub	fp, #20
24e40     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
24e44     1C 4E 05 F1 | 	add	fp, #28
24e48     A7 FA 61 FC | 	wrlong	result1, fp
24e4c     1C 4E 85 F1 | 	sub	fp, #28
24e50     00 FA 0D F2 | 	cmp	result1, #0 wz
24e54     1C 00 90 5D |  if_ne	jmp	#LR__3864
24e58     04 4E 05 F1 | 	add	fp, #4
24e5c     A7 16 02 FB | 	rdlong	arg03, fp
24e60     04 4E 85 F1 | 	sub	fp, #4
24e64     11 16 06 F1 | 	add	arg03, #17
24e68     0B 05 48 FC | 	wrbyte	#2, arg03
24e6c     02 FA 05 F6 | 	mov	result1, #2
24e70     DC 01 90 FD | 	jmp	#LR__3873
24e74                 | LR__3864
24e74     1C 4E 05 F1 | 	add	fp, #28
24e78     A7 18 02 FB | 	rdlong	arg04, fp
24e7c     14 4E 85 F1 | 	sub	fp, #20
24e80     A7 16 02 FB | 	rdlong	arg03, fp
24e84     09 16 46 F0 | 	shr	arg03, #9
24e88     0B 19 02 F1 | 	add	arg04, arg03
24e8c     14 4E 05 F1 | 	add	fp, #20
24e90     A7 18 62 FC | 	wrlong	arg04, fp
24e94     1C 4E 85 F1 | 	sub	fp, #28
24e98                 | LR__3865
24e98                 | LR__3866
24e98                 | LR__3867
24e98     04 4E 05 F1 | 	add	fp, #4
24e9c     A7 18 02 FB | 	rdlong	arg04, fp
24ea0     0C 17 02 F6 | 	mov	arg03, arg04
24ea4     04 4E 85 F1 | 	sub	fp, #4
24ea8     14 16 06 F1 | 	add	arg03, #20
24eac     0B 17 02 FB | 	rdlong	arg03, arg03
24eb0     0C 18 06 F1 | 	add	arg04, #12
24eb4     0C 19 02 FB | 	rdlong	arg04, arg04
24eb8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
24ebc     3C 00 90 ED |  if_be	jmp	#LR__3868
24ec0     04 4E 05 F1 | 	add	fp, #4
24ec4     A7 18 02 FB | 	rdlong	arg04, fp
24ec8     0C 17 02 F6 | 	mov	arg03, arg04
24ecc     14 18 06 F1 | 	add	arg04, #20
24ed0     0C 19 02 FB | 	rdlong	arg04, arg04
24ed4     0C 16 06 F1 | 	add	arg03, #12
24ed8     0B 19 62 FC | 	wrlong	arg04, arg03
24edc     A7 18 02 FB | 	rdlong	arg04, fp
24ee0     0C 17 02 F6 | 	mov	arg03, arg04
24ee4     04 4E 85 F1 | 	sub	fp, #4
24ee8     10 18 06 F1 | 	add	arg04, #16
24eec     0C 19 C2 FA | 	rdbyte	arg04, arg04
24ef0     40 18 46 F5 | 	or	arg04, #64
24ef4     10 16 06 F1 | 	add	arg03, #16
24ef8     0B 19 42 FC | 	wrbyte	arg04, arg03
24efc                 | LR__3868
24efc     04 4E 05 F1 | 	add	fp, #4
24f00     A7 16 02 FB | 	rdlong	arg03, fp
24f04     04 4E 85 F1 | 	sub	fp, #4
24f08     14 16 06 F1 | 	add	arg03, #20
24f0c     0B 17 02 FB | 	rdlong	arg03, arg03
24f10     FF 17 CE F7 | 	test	arg03, #511 wz
24f14     2C 01 90 AD |  if_e	jmp	#LR__3872
24f18     04 4E 05 F1 | 	add	fp, #4
24f1c     A7 18 02 FB | 	rdlong	arg04, fp
24f20     18 4E 05 F1 | 	add	fp, #24
24f24     A7 16 02 FB | 	rdlong	arg03, fp
24f28     1C 4E 85 F1 | 	sub	fp, #28
24f2c     1C 18 06 F1 | 	add	arg04, #28
24f30     0C 19 02 FB | 	rdlong	arg04, arg04
24f34     0C 17 0A F2 | 	cmp	arg03, arg04 wz
24f38     08 01 90 AD |  if_e	jmp	#LR__3872
24f3c     04 4E 05 F1 | 	add	fp, #4
24f40     A7 16 02 FB | 	rdlong	arg03, fp
24f44     04 4E 85 F1 | 	sub	fp, #4
24f48     10 16 06 F1 | 	add	arg03, #16
24f4c     0B 17 C2 FA | 	rdbyte	arg03, arg03
24f50     80 16 CE F7 | 	test	arg03, #128 wz
24f54     7C 00 90 AD |  if_e	jmp	#LR__3870
24f58     10 4E 05 F1 | 	add	fp, #16
24f5c     A7 16 02 FB | 	rdlong	arg03, fp
24f60     01 16 06 F1 | 	add	arg03, #1
24f64     0B 13 C2 FA | 	rdbyte	arg01, arg03
24f68     0C 4E 85 F1 | 	sub	fp, #12
24f6c     A7 16 02 FB | 	rdlong	arg03, fp
24f70     0B 15 02 F6 | 	mov	arg02, arg03
24f74     28 14 06 F1 | 	add	arg02, #40
24f78     04 4E 85 F1 | 	sub	fp, #4
24f7c     1C 16 06 F1 | 	add	arg03, #28
24f80     0B 17 02 FB | 	rdlong	arg03, arg03
24f84     01 18 06 F6 | 	mov	arg04, #1
24f88     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
24f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
24f90     1C 00 90 AD |  if_e	jmp	#LR__3869
24f94     04 4E 05 F1 | 	add	fp, #4
24f98     A7 16 02 FB | 	rdlong	arg03, fp
24f9c     04 4E 85 F1 | 	sub	fp, #4
24fa0     11 16 06 F1 | 	add	arg03, #17
24fa4     0B 03 48 FC | 	wrbyte	#1, arg03
24fa8     01 FA 05 F6 | 	mov	result1, #1
24fac     A0 00 90 FD | 	jmp	#LR__3873
24fb0                 | LR__3869
24fb0     04 4E 05 F1 | 	add	fp, #4
24fb4     A7 18 02 FB | 	rdlong	arg04, fp
24fb8     0C 17 02 F6 | 	mov	arg03, arg04
24fbc     04 4E 85 F1 | 	sub	fp, #4
24fc0     10 18 06 F1 | 	add	arg04, #16
24fc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
24fc8     7F 18 06 F5 | 	and	arg04, #127
24fcc     10 16 06 F1 | 	add	arg03, #16
24fd0     0B 19 42 FC | 	wrbyte	arg04, arg03
24fd4                 | LR__3870
24fd4     10 4E 05 F1 | 	add	fp, #16
24fd8     A7 16 02 FB | 	rdlong	arg03, fp
24fdc     01 16 06 F1 | 	add	arg03, #1
24fe0     0B 13 C2 FA | 	rdbyte	arg01, arg03
24fe4     0C 4E 85 F1 | 	sub	fp, #12
24fe8     A7 14 02 FB | 	rdlong	arg02, fp
24fec     28 14 06 F1 | 	add	arg02, #40
24ff0     18 4E 05 F1 | 	add	fp, #24
24ff4     A7 16 02 FB | 	rdlong	arg03, fp
24ff8     1C 4E 85 F1 | 	sub	fp, #28
24ffc     01 18 06 F6 | 	mov	arg04, #1
25000     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
25004     00 FA 0D F2 | 	cmp	result1, #0 wz
25008     1C 00 90 AD |  if_e	jmp	#LR__3871
2500c     04 4E 05 F1 | 	add	fp, #4
25010     A7 16 02 FB | 	rdlong	arg03, fp
25014     04 4E 85 F1 | 	sub	fp, #4
25018     11 16 06 F1 | 	add	arg03, #17
2501c     0B 03 48 FC | 	wrbyte	#1, arg03
25020     01 FA 05 F6 | 	mov	result1, #1
25024     28 00 90 FD | 	jmp	#LR__3873
25028                 | LR__3871
25028     04 4E 05 F1 | 	add	fp, #4
2502c     A7 18 02 FB | 	rdlong	arg04, fp
25030     18 4E 05 F1 | 	add	fp, #24
25034     A7 16 02 FB | 	rdlong	arg03, fp
25038     1C 4E 85 F1 | 	sub	fp, #28
2503c     1C 18 06 F1 | 	add	arg04, #28
25040     0C 17 62 FC | 	wrlong	arg03, arg04
25044                 | LR__3872
25044                 | ' 
25044                 | ' 			fp->sect = nsect;
25044                 | ' 		}
25044                 | ' 	}
25044                 | ' 
25044                 | ' 	return res ;
25044     0C 4E 05 F1 | 	add	fp, #12
25048     A7 FA 01 FB | 	rdlong	result1, fp
2504c     0C 4E 85 F1 | 	sub	fp, #12
25050                 | LR__3873
25050     A7 F0 03 F6 | 	mov	ptra, fp
25054     B2 00 A0 FD | 	call	#popregs_
25058                 | _fatfs_cc_f_lseek_ret
25058     2D 00 64 FD | 	ret
2505c                 | 
2505c                 | _fatfs_cc_f_opendir
2505c     01 4A 05 F6 | 	mov	COUNT_, #1
25060     A8 00 A0 FD | 	call	#pushregs_
25064     14 F0 07 F1 | 	add	ptra, #20
25068     04 4E 05 F1 | 	add	fp, #4
2506c     A7 12 62 FC | 	wrlong	arg01, fp
25070     04 4E 05 F1 | 	add	fp, #4
25074     A7 14 62 FC | 	wrlong	arg02, fp
25078     04 4E 85 F1 | 	sub	fp, #4
2507c     A7 16 0A FB | 	rdlong	arg03, fp wz
25080     04 4E 85 F1 | 	sub	fp, #4
25084     09 FA 05 A6 |  if_e	mov	result1, #9
25088     78 01 90 AD |  if_e	jmp	#LR__3886
2508c     08 4E 05 F1 | 	add	fp, #8
25090     A7 12 02 F6 | 	mov	arg01, fp
25094     08 4E 05 F1 | 	add	fp, #8
25098     A7 14 02 F6 | 	mov	arg02, fp
2509c     10 4E 85 F1 | 	sub	fp, #16
250a0     00 16 06 F6 | 	mov	arg03, #0
250a4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
250a8     0C 4E 05 F1 | 	add	fp, #12
250ac     A7 FA 61 FC | 	wrlong	result1, fp
250b0     0C 4E 85 F1 | 	sub	fp, #12
250b4     00 FA 0D F2 | 	cmp	result1, #0 wz
250b8     20 01 90 5D |  if_ne	jmp	#LR__3885
250bc     04 4E 05 F1 | 	add	fp, #4
250c0     A7 16 02 FB | 	rdlong	arg03, fp
250c4     0C 4E 05 F1 | 	add	fp, #12
250c8     A7 FA 01 FB | 	rdlong	result1, fp
250cc     0B FB 61 FC | 	wrlong	result1, arg03
250d0     0C 4E 85 F1 | 	sub	fp, #12
250d4     A7 12 02 FB | 	rdlong	arg01, fp
250d8     04 4E 05 F1 | 	add	fp, #4
250dc     A7 14 02 FB | 	rdlong	arg02, fp
250e0     08 4E 85 F1 | 	sub	fp, #8
250e4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
250e8     0C 4E 05 F1 | 	add	fp, #12
250ec     A7 FA 61 FC | 	wrlong	result1, fp
250f0     0C 4E 85 F1 | 	sub	fp, #12
250f4     00 FA 0D F2 | 	cmp	result1, #0 wz
250f8     C4 00 90 5D |  if_ne	jmp	#LR__3884
250fc     04 4E 05 F1 | 	add	fp, #4
25100     A7 16 02 FB | 	rdlong	arg03, fp
25104     04 4E 85 F1 | 	sub	fp, #4
25108     2B 16 06 F1 | 	add	arg03, #43
2510c     0B 17 C2 FA | 	rdbyte	arg03, arg03
25110     80 16 CE F7 | 	test	arg03, #128 wz
25114     58 00 90 5D |  if_ne	jmp	#LR__3882
25118     04 4E 05 F1 | 	add	fp, #4
2511c     A7 16 02 FB | 	rdlong	arg03, fp
25120     04 4E 85 F1 | 	sub	fp, #4
25124     06 16 06 F1 | 	add	arg03, #6
25128     0B 17 C2 FA | 	rdbyte	arg03, arg03
2512c     10 16 CE F7 | 	test	arg03, #16 wz
25130     30 00 90 AD |  if_e	jmp	#LR__3880
25134     04 4E 05 F1 | 	add	fp, #4
25138     A7 16 02 FB | 	rdlong	arg03, fp
2513c     0B 1F 02 F6 | 	mov	local01, arg03
25140     0C 4E 05 F1 | 	add	fp, #12
25144     A7 12 02 FB | 	rdlong	arg01, fp
25148     10 4E 85 F1 | 	sub	fp, #16
2514c     1C 16 06 F1 | 	add	arg03, #28
25150     0B 15 02 FB | 	rdlong	arg02, arg03
25154     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
25158     08 1E 06 F1 | 	add	local01, #8
2515c     0F FB 61 FC | 	wrlong	result1, local01
25160     0C 00 90 FD | 	jmp	#LR__3881
25164                 | LR__3880
25164     0C 4E 05 F1 | 	add	fp, #12
25168     A7 0A 68 FC | 	wrlong	#5, fp
2516c     0C 4E 85 F1 | 	sub	fp, #12
25170                 | LR__3881
25170                 | LR__3882
25170     0C 4E 05 F1 | 	add	fp, #12
25174     A7 1E 0A FB | 	rdlong	local01, fp wz
25178     0C 4E 85 F1 | 	sub	fp, #12
2517c     40 00 90 5D |  if_ne	jmp	#LR__3883
25180     04 4E 05 F1 | 	add	fp, #4
25184     A7 1E 02 FB | 	rdlong	local01, fp
25188     0C 4E 05 F1 | 	add	fp, #12
2518c     A7 16 02 FB | 	rdlong	arg03, fp
25190     06 16 06 F1 | 	add	arg03, #6
25194     0B 17 E2 FA | 	rdword	arg03, arg03
25198     04 1E 06 F1 | 	add	local01, #4
2519c     0F 17 52 FC | 	wrword	arg03, local01
251a0     0C 4E 85 F1 | 	sub	fp, #12
251a4     A7 12 02 FB | 	rdlong	arg01, fp
251a8     04 4E 85 F1 | 	sub	fp, #4
251ac     00 14 06 F6 | 	mov	arg02, #0
251b0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
251b4     0C 4E 05 F1 | 	add	fp, #12
251b8     A7 FA 61 FC | 	wrlong	result1, fp
251bc     0C 4E 85 F1 | 	sub	fp, #12
251c0                 | LR__3883
251c0                 | LR__3884
251c0     0C 4E 05 F1 | 	add	fp, #12
251c4     A7 1E 02 FB | 	rdlong	local01, fp
251c8     0C 4E 85 F1 | 	sub	fp, #12
251cc     04 1E 0E F2 | 	cmp	local01, #4 wz
251d0     0C 4E 05 A1 |  if_e	add	fp, #12
251d4     A7 0A 68 AC |  if_e	wrlong	#5, fp
251d8     0C 4E 85 A1 |  if_e	sub	fp, #12
251dc                 | LR__3885
251dc     0C 4E 05 F1 | 	add	fp, #12
251e0     A7 1E 0A FB | 	rdlong	local01, fp wz
251e4     0C 4E 85 F1 | 	sub	fp, #12
251e8     04 4E 05 51 |  if_ne	add	fp, #4
251ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
251f0     04 4E 85 51 |  if_ne	sub	fp, #4
251f4     0F 01 68 5C |  if_ne	wrlong	#0, local01
251f8                 | ' 
251f8                 | ' 	return res ;
251f8     0C 4E 05 F1 | 	add	fp, #12
251fc     A7 FA 01 FB | 	rdlong	result1, fp
25200     0C 4E 85 F1 | 	sub	fp, #12
25204                 | LR__3886
25204     A7 F0 03 F6 | 	mov	ptra, fp
25208     B2 00 A0 FD | 	call	#popregs_
2520c                 | _fatfs_cc_f_opendir_ret
2520c     2D 00 64 FD | 	ret
25210                 | 
25210                 | _fatfs_cc_f_closedir
25210     00 4A 05 F6 | 	mov	COUNT_, #0
25214     A8 00 A0 FD | 	call	#pushregs_
25218     10 F0 07 F1 | 	add	ptra, #16
2521c     04 4E 05 F1 | 	add	fp, #4
25220     A7 12 62 FC | 	wrlong	arg01, fp
25224     08 4E 05 F1 | 	add	fp, #8
25228     A7 14 02 F6 | 	mov	arg02, fp
2522c     0C 4E 85 F1 | 	sub	fp, #12
25230     C0 DD BF FD | 	call	#_fatfs_cc_validate
25234     08 4E 05 F1 | 	add	fp, #8
25238     A7 FA 61 FC | 	wrlong	result1, fp
2523c     08 4E 85 F1 | 	sub	fp, #8
25240     00 FA 0D F2 | 	cmp	result1, #0 wz
25244     04 4E 05 A1 |  if_e	add	fp, #4
25248     A7 FA 01 AB |  if_e	rdlong	result1, fp
2524c     04 4E 85 A1 |  if_e	sub	fp, #4
25250     FD 00 68 AC |  if_e	wrlong	#0, result1
25254                 | ' 
25254                 | ' 
25254                 | ' 
25254                 | ' 
25254                 | ' 		dp->obj.fs = 0;
25254                 | ' #line 4633 "ff.c"
25254                 | ' 	}
25254                 | ' 	return res;
25254     08 4E 05 F1 | 	add	fp, #8
25258     A7 FA 01 FB | 	rdlong	result1, fp
2525c     08 4E 85 F1 | 	sub	fp, #8
25260     A7 F0 03 F6 | 	mov	ptra, fp
25264     B2 00 A0 FD | 	call	#popregs_
25268                 | _fatfs_cc_f_closedir_ret
25268     2D 00 64 FD | 	ret
2526c                 | 
2526c                 | _fatfs_cc_f_readdir
2526c     00 4A 05 F6 | 	mov	COUNT_, #0
25270     A8 00 A0 FD | 	call	#pushregs_
25274     14 F0 07 F1 | 	add	ptra, #20
25278     04 4E 05 F1 | 	add	fp, #4
2527c     A7 12 62 FC | 	wrlong	arg01, fp
25280     04 4E 05 F1 | 	add	fp, #4
25284     A7 14 62 FC | 	wrlong	arg02, fp
25288     04 4E 85 F1 | 	sub	fp, #4
2528c     A7 12 02 FB | 	rdlong	arg01, fp
25290     0C 4E 05 F1 | 	add	fp, #12
25294     A7 14 02 F6 | 	mov	arg02, fp
25298     10 4E 85 F1 | 	sub	fp, #16
2529c     54 DD BF FD | 	call	#_fatfs_cc_validate
252a0     0C 4E 05 F1 | 	add	fp, #12
252a4     A7 FA 61 FC | 	wrlong	result1, fp
252a8     0C 4E 85 F1 | 	sub	fp, #12
252ac     00 FA 0D F2 | 	cmp	result1, #0 wz
252b0     BC 00 90 5D |  if_ne	jmp	#LR__3893
252b4     08 4E 05 F1 | 	add	fp, #8
252b8     A7 FA 09 FB | 	rdlong	result1, fp wz
252bc     08 4E 85 F1 | 	sub	fp, #8
252c0     24 00 90 5D |  if_ne	jmp	#LR__3890
252c4     04 4E 05 F1 | 	add	fp, #4
252c8     A7 12 02 FB | 	rdlong	arg01, fp
252cc     04 4E 85 F1 | 	sub	fp, #4
252d0     00 14 06 F6 | 	mov	arg02, #0
252d4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
252d8     0C 4E 05 F1 | 	add	fp, #12
252dc     A7 FA 61 FC | 	wrlong	result1, fp
252e0     0C 4E 85 F1 | 	sub	fp, #12
252e4     88 00 90 FD | 	jmp	#LR__3892
252e8                 | LR__3890
252e8     04 4E 05 F1 | 	add	fp, #4
252ec     A7 12 02 FB | 	rdlong	arg01, fp
252f0     04 4E 85 F1 | 	sub	fp, #4
252f4     00 14 06 F6 | 	mov	arg02, #0
252f8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
252fc     0C 4E 05 F1 | 	add	fp, #12
25300     A7 FA 61 FC | 	wrlong	result1, fp
25304     0C 4E 85 F1 | 	sub	fp, #12
25308     04 FA 0D F2 | 	cmp	result1, #4 wz
2530c     0C 4E 05 A1 |  if_e	add	fp, #12
25310     A7 00 68 AC |  if_e	wrlong	#0, fp
25314     0C 4E 85 A1 |  if_e	sub	fp, #12
25318     0C 4E 05 F1 | 	add	fp, #12
2531c     A7 FA 09 FB | 	rdlong	result1, fp wz
25320     0C 4E 85 F1 | 	sub	fp, #12
25324     48 00 90 5D |  if_ne	jmp	#LR__3891
25328     04 4E 05 F1 | 	add	fp, #4
2532c     A7 12 02 FB | 	rdlong	arg01, fp
25330     04 4E 05 F1 | 	add	fp, #4
25334     A7 14 02 FB | 	rdlong	arg02, fp
25338     08 4E 85 F1 | 	sub	fp, #8
2533c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
25340     04 4E 05 F1 | 	add	fp, #4
25344     A7 12 02 FB | 	rdlong	arg01, fp
25348     04 4E 85 F1 | 	sub	fp, #4
2534c     00 14 06 F6 | 	mov	arg02, #0
25350     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
25354     0C 4E 05 F1 | 	add	fp, #12
25358     A7 FA 61 FC | 	wrlong	result1, fp
2535c     0C 4E 85 F1 | 	sub	fp, #12
25360     04 FA 0D F2 | 	cmp	result1, #4 wz
25364     0C 4E 05 A1 |  if_e	add	fp, #12
25368     A7 00 68 AC |  if_e	wrlong	#0, fp
2536c     0C 4E 85 A1 |  if_e	sub	fp, #12
25370                 | LR__3891
25370                 | LR__3892
25370                 | LR__3893
25370                 | ' 			}
25370                 | ' 			;
25370                 | ' 		}
25370                 | ' 	}
25370                 | ' 	return res ;
25370     0C 4E 05 F1 | 	add	fp, #12
25374     A7 FA 01 FB | 	rdlong	result1, fp
25378     0C 4E 85 F1 | 	sub	fp, #12
2537c     A7 F0 03 F6 | 	mov	ptra, fp
25380     B2 00 A0 FD | 	call	#popregs_
25384                 | _fatfs_cc_f_readdir_ret
25384     2D 00 64 FD | 	ret
25388                 | 
25388                 | _fatfs_cc_f_stat
25388     00 4A 05 F6 | 	mov	COUNT_, #0
2538c     A8 00 A0 FD | 	call	#pushregs_
25390     40 F0 07 F1 | 	add	ptra, #64
25394     04 4E 05 F1 | 	add	fp, #4
25398     A7 12 62 FC | 	wrlong	arg01, fp
2539c     04 4E 05 F1 | 	add	fp, #4
253a0     A7 14 62 FC | 	wrlong	arg02, fp
253a4     04 4E 85 F1 | 	sub	fp, #4
253a8     A7 12 02 F6 | 	mov	arg01, fp
253ac     0C 4E 05 F1 | 	add	fp, #12
253b0     A7 14 02 F6 | 	mov	arg02, fp
253b4     10 4E 85 F1 | 	sub	fp, #16
253b8     00 16 06 F6 | 	mov	arg03, #0
253bc     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
253c0     0C 4E 05 F1 | 	add	fp, #12
253c4     A7 FA 61 FC | 	wrlong	result1, fp
253c8     0C 4E 85 F1 | 	sub	fp, #12
253cc     00 FA 0D F2 | 	cmp	result1, #0 wz
253d0     74 00 90 5D |  if_ne	jmp	#LR__3903
253d4     10 4E 05 F1 | 	add	fp, #16
253d8     A7 12 02 F6 | 	mov	arg01, fp
253dc     0C 4E 85 F1 | 	sub	fp, #12
253e0     A7 14 02 FB | 	rdlong	arg02, fp
253e4     04 4E 85 F1 | 	sub	fp, #4
253e8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
253ec     0C 4E 05 F1 | 	add	fp, #12
253f0     A7 FA 61 FC | 	wrlong	result1, fp
253f4     0C 4E 85 F1 | 	sub	fp, #12
253f8     00 FA 0D F2 | 	cmp	result1, #0 wz
253fc     48 00 90 5D |  if_ne	jmp	#LR__3902
25400     3B 4E 05 F1 | 	add	fp, #59
25404     A7 FA C1 FA | 	rdbyte	result1, fp
25408     3B 4E 85 F1 | 	sub	fp, #59
2540c     80 FA CD F7 | 	test	result1, #128 wz
25410     0C 4E 05 51 |  if_ne	add	fp, #12
25414     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25418     0C 4E 85 51 |  if_ne	sub	fp, #12
2541c     28 00 90 5D |  if_ne	jmp	#LR__3901
25420     08 4E 05 F1 | 	add	fp, #8
25424     A7 FA 09 FB | 	rdlong	result1, fp wz
25428     08 4E 85 F1 | 	sub	fp, #8
2542c     18 00 90 AD |  if_e	jmp	#LR__3900
25430     10 4E 05 F1 | 	add	fp, #16
25434     A7 12 02 F6 | 	mov	arg01, fp
25438     08 4E 85 F1 | 	sub	fp, #8
2543c     A7 14 02 FB | 	rdlong	arg02, fp
25440     08 4E 85 F1 | 	sub	fp, #8
25444     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
25448                 | LR__3900
25448                 | LR__3901
25448                 | LR__3902
25448                 | LR__3903
25448                 | ' 			}
25448                 | ' 		}
25448                 | ' 		;
25448                 | ' 	}
25448                 | ' 
25448                 | ' 	return res ;
25448     0C 4E 05 F1 | 	add	fp, #12
2544c     A7 FA 01 FB | 	rdlong	result1, fp
25450     0C 4E 85 F1 | 	sub	fp, #12
25454     A7 F0 03 F6 | 	mov	ptra, fp
25458     B2 00 A0 FD | 	call	#popregs_
2545c                 | _fatfs_cc_f_stat_ret
2545c     2D 00 64 FD | 	ret
25460                 | 
25460                 | _fatfs_cc_f_unlink
25460     00 4A 05 F6 | 	mov	COUNT_, #0
25464     A8 00 A0 FD | 	call	#pushregs_
25468     74 F0 07 F1 | 	add	ptra, #116
2546c     04 4E 05 F1 | 	add	fp, #4
25470     A7 12 62 FC | 	wrlong	arg01, fp
25474     68 4E 05 F1 | 	add	fp, #104
25478     A7 00 68 FC | 	wrlong	#0, fp
2547c     68 4E 85 F1 | 	sub	fp, #104
25480     A7 12 02 F6 | 	mov	arg01, fp
25484     6C 4E 05 F1 | 	add	fp, #108
25488     A7 14 02 F6 | 	mov	arg02, fp
2548c     70 4E 85 F1 | 	sub	fp, #112
25490     02 16 06 F6 | 	mov	arg03, #2
25494     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
25498     08 4E 05 F1 | 	add	fp, #8
2549c     A7 FA 61 FC | 	wrlong	result1, fp
254a0     08 4E 85 F1 | 	sub	fp, #8
254a4     00 FA 0D F2 | 	cmp	result1, #0 wz
254a8     E4 01 90 5D |  if_ne	jmp	#LR__3918
254ac     70 4E 05 F1 | 	add	fp, #112
254b0     A7 16 02 FB | 	rdlong	arg03, fp
254b4     64 4E 85 F1 | 	sub	fp, #100
254b8     A7 16 62 FC | 	wrlong	arg03, fp
254bc     A7 12 02 F6 | 	mov	arg01, fp
254c0     08 4E 85 F1 | 	sub	fp, #8
254c4     A7 14 02 FB | 	rdlong	arg02, fp
254c8     04 4E 85 F1 | 	sub	fp, #4
254cc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
254d0     08 4E 05 F1 | 	add	fp, #8
254d4     A7 FA 61 FC | 	wrlong	result1, fp
254d8     00 FA 4D F2 | 	cmps	result1, #0 wz
254dc     08 4E 85 F1 | 	sub	fp, #8
254e0     AC 01 90 5D |  if_ne	jmp	#LR__3917
254e4     37 4E 05 F1 | 	add	fp, #55
254e8     A7 FA C1 FA | 	rdbyte	result1, fp
254ec     37 4E 85 F1 | 	sub	fp, #55
254f0     80 FA CD F7 | 	test	result1, #128 wz
254f4     08 4E 05 51 |  if_ne	add	fp, #8
254f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
254fc     08 4E 85 51 |  if_ne	sub	fp, #8
25500     1C 00 90 5D |  if_ne	jmp	#LR__3910
25504     12 4E 05 F1 | 	add	fp, #18
25508     A7 FA C1 FA | 	rdbyte	result1, fp
2550c     12 4E 85 F1 | 	sub	fp, #18
25510     01 FA CD F7 | 	test	result1, #1 wz
25514     08 4E 05 51 |  if_ne	add	fp, #8
25518     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2551c     08 4E 85 51 |  if_ne	sub	fp, #8
25520                 | LR__3910
25520     08 4E 05 F1 | 	add	fp, #8
25524     A7 FA 09 FB | 	rdlong	result1, fp wz
25528     08 4E 85 F1 | 	sub	fp, #8
2552c     C8 00 90 5D |  if_ne	jmp	#LR__3913
25530     70 4E 05 F1 | 	add	fp, #112
25534     A7 12 02 FB | 	rdlong	arg01, fp
25538     48 4E 85 F1 | 	sub	fp, #72
2553c     A7 14 02 FB | 	rdlong	arg02, fp
25540     28 4E 85 F1 | 	sub	fp, #40
25544     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
25548     6C 4E 05 F1 | 	add	fp, #108
2554c     A7 FA 61 FC | 	wrlong	result1, fp
25550     5A 4E 85 F1 | 	sub	fp, #90
25554     A7 FA C1 FA | 	rdbyte	result1, fp
25558     12 4E 85 F1 | 	sub	fp, #18
2555c     10 FA CD F7 | 	test	result1, #16 wz
25560     94 00 90 AD |  if_e	jmp	#LR__3912
25564     70 4E 05 F1 | 	add	fp, #112
25568     A7 FA 01 FB | 	rdlong	result1, fp
2556c     34 4E 85 F1 | 	sub	fp, #52
25570     A7 FA 61 FC | 	wrlong	result1, fp
25574     30 4E 05 F1 | 	add	fp, #48
25578     A7 16 02 FB | 	rdlong	arg03, fp
2557c     28 4E 85 F1 | 	sub	fp, #40
25580     A7 16 62 FC | 	wrlong	arg03, fp
25584     08 4E 85 F1 | 	sub	fp, #8
25588     A7 12 02 F6 | 	mov	arg01, fp
2558c     3C 4E 85 F1 | 	sub	fp, #60
25590     00 14 06 F6 | 	mov	arg02, #0
25594     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
25598     08 4E 05 F1 | 	add	fp, #8
2559c     A7 FA 61 FC | 	wrlong	result1, fp
255a0     08 4E 85 F1 | 	sub	fp, #8
255a4     00 FA 0D F2 | 	cmp	result1, #0 wz
255a8     4C 00 90 5D |  if_ne	jmp	#LR__3911
255ac     3C 4E 05 F1 | 	add	fp, #60
255b0     A7 12 02 F6 | 	mov	arg01, fp
255b4     3C 4E 85 F1 | 	sub	fp, #60
255b8     00 14 06 F6 | 	mov	arg02, #0
255bc     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
255c0     08 4E 05 F1 | 	add	fp, #8
255c4     A7 FA 61 FC | 	wrlong	result1, fp
255c8     00 FA 4D F2 | 	cmps	result1, #0 wz
255cc     08 4E 85 F1 | 	sub	fp, #8
255d0     08 4E 05 A1 |  if_e	add	fp, #8
255d4     A7 0E 68 AC |  if_e	wrlong	#7, fp
255d8     08 4E 85 A1 |  if_e	sub	fp, #8
255dc     08 4E 05 F1 | 	add	fp, #8
255e0     A7 FA 01 FB | 	rdlong	result1, fp
255e4     08 4E 85 F1 | 	sub	fp, #8
255e8     04 FA 0D F2 | 	cmp	result1, #4 wz
255ec     08 4E 05 A1 |  if_e	add	fp, #8
255f0     A7 00 68 AC |  if_e	wrlong	#0, fp
255f4     08 4E 85 A1 |  if_e	sub	fp, #8
255f8                 | LR__3911
255f8                 | LR__3912
255f8                 | LR__3913
255f8     08 4E 05 F1 | 	add	fp, #8
255fc     A7 FA 09 FB | 	rdlong	result1, fp wz
25600     08 4E 85 F1 | 	sub	fp, #8
25604     88 00 90 5D |  if_ne	jmp	#LR__3916
25608     0C 4E 05 F1 | 	add	fp, #12
2560c     A7 12 02 F6 | 	mov	arg01, fp
25610     0C 4E 85 F1 | 	sub	fp, #12
25614     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
25618     08 4E 05 F1 | 	add	fp, #8
2561c     A7 FA 61 FC | 	wrlong	result1, fp
25620     08 4E 85 F1 | 	sub	fp, #8
25624     00 FA 0D F2 | 	cmp	result1, #0 wz
25628     38 00 90 5D |  if_ne	jmp	#LR__3914
2562c     6C 4E 05 F1 | 	add	fp, #108
25630     A7 FA 09 FB | 	rdlong	result1, fp wz
25634     6C 4E 85 F1 | 	sub	fp, #108
25638     28 00 90 AD |  if_e	jmp	#LR__3914
2563c     0C 4E 05 F1 | 	add	fp, #12
25640     A7 12 02 F6 | 	mov	arg01, fp
25644     60 4E 05 F1 | 	add	fp, #96
25648     A7 14 02 FB | 	rdlong	arg02, fp
2564c     6C 4E 85 F1 | 	sub	fp, #108
25650     00 16 06 F6 | 	mov	arg03, #0
25654     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
25658     08 4E 05 F1 | 	add	fp, #8
2565c     A7 FA 61 FC | 	wrlong	result1, fp
25660     08 4E 85 F1 | 	sub	fp, #8
25664                 | LR__3914
25664     08 4E 05 F1 | 	add	fp, #8
25668     A7 FA 09 FB | 	rdlong	result1, fp wz
2566c     08 4E 85 F1 | 	sub	fp, #8
25670     1C 00 90 5D |  if_ne	jmp	#LR__3915
25674     70 4E 05 F1 | 	add	fp, #112
25678     A7 12 02 FB | 	rdlong	arg01, fp
2567c     70 4E 85 F1 | 	sub	fp, #112
25680     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
25684     08 4E 05 F1 | 	add	fp, #8
25688     A7 FA 61 FC | 	wrlong	result1, fp
2568c     08 4E 85 F1 | 	sub	fp, #8
25690                 | LR__3915
25690                 | LR__3916
25690                 | LR__3917
25690                 | LR__3918
25690                 | ' 			}
25690                 | ' 		}
25690                 | ' 		;
25690                 | ' 	}
25690                 | ' 
25690                 | ' 	return res ;
25690     08 4E 05 F1 | 	add	fp, #8
25694     A7 FA 01 FB | 	rdlong	result1, fp
25698     08 4E 85 F1 | 	sub	fp, #8
2569c     A7 F0 03 F6 | 	mov	ptra, fp
256a0     B2 00 A0 FD | 	call	#popregs_
256a4                 | _fatfs_cc_f_unlink_ret
256a4     2D 00 64 FD | 	ret
256a8                 | 
256a8                 | _fatfs_cc_f_mkdir
256a8     00 4A 05 F6 | 	mov	COUNT_, #0
256ac     A8 00 A0 FD | 	call	#pushregs_
256b0     5C F0 07 F1 | 	add	ptra, #92
256b4     04 4E 05 F1 | 	add	fp, #4
256b8     A7 12 62 FC | 	wrlong	arg01, fp
256bc     A7 12 02 F6 | 	mov	arg01, fp
256c0     48 4E 05 F1 | 	add	fp, #72
256c4     A7 14 02 F6 | 	mov	arg02, fp
256c8     4C 4E 85 F1 | 	sub	fp, #76
256cc     02 16 06 F6 | 	mov	arg03, #2
256d0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
256d4     08 4E 05 F1 | 	add	fp, #8
256d8     A7 FA 61 FC | 	wrlong	result1, fp
256dc     08 4E 85 F1 | 	sub	fp, #8
256e0     00 FA 0D F2 | 	cmp	result1, #0 wz
256e4     C4 02 90 5D |  if_ne	jmp	#LR__3925
256e8     4C 4E 05 F1 | 	add	fp, #76
256ec     A7 16 02 FB | 	rdlong	arg03, fp
256f0     40 4E 85 F1 | 	sub	fp, #64
256f4     A7 16 62 FC | 	wrlong	arg03, fp
256f8     A7 12 02 F6 | 	mov	arg01, fp
256fc     08 4E 85 F1 | 	sub	fp, #8
25700     A7 14 02 FB | 	rdlong	arg02, fp
25704     04 4E 85 F1 | 	sub	fp, #4
25708     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2570c     08 4E 05 F1 | 	add	fp, #8
25710     A7 FA 61 FC | 	wrlong	result1, fp
25714     00 FA 4D F2 | 	cmps	result1, #0 wz
25718     08 4E 85 F1 | 	sub	fp, #8
2571c     08 4E 05 A1 |  if_e	add	fp, #8
25720     A7 10 68 AC |  if_e	wrlong	#8, fp
25724     08 4E 85 A1 |  if_e	sub	fp, #8
25728     08 4E 05 F1 | 	add	fp, #8
2572c     A7 FA 01 FB | 	rdlong	result1, fp
25730     08 4E 85 F1 | 	sub	fp, #8
25734     04 FA 0D F2 | 	cmp	result1, #4 wz
25738     70 02 90 5D |  if_ne	jmp	#LR__3924
2573c     4C 4E 05 F1 | 	add	fp, #76
25740     A7 16 02 FB | 	rdlong	arg03, fp
25744     10 4E 85 F1 | 	sub	fp, #16
25748     A7 16 62 FC | 	wrlong	arg03, fp
2574c     A7 12 02 F6 | 	mov	arg01, fp
25750     3C 4E 85 F1 | 	sub	fp, #60
25754     00 14 06 F6 | 	mov	arg02, #0
25758     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2575c     50 4E 05 F1 | 	add	fp, #80
25760     A7 FA 61 FC | 	wrlong	result1, fp
25764     48 4E 85 F1 | 	sub	fp, #72
25768     A7 00 68 FC | 	wrlong	#0, fp
2576c     48 4E 05 F1 | 	add	fp, #72
25770     A7 FA 09 FB | 	rdlong	result1, fp wz
25774     50 4E 85 F1 | 	sub	fp, #80
25778     08 4E 05 A1 |  if_e	add	fp, #8
2577c     A7 0E 68 AC |  if_e	wrlong	#7, fp
25780     08 4E 85 A1 |  if_e	sub	fp, #8
25784     50 4E 05 F1 | 	add	fp, #80
25788     A7 FA 01 FB | 	rdlong	result1, fp
2578c     50 4E 85 F1 | 	sub	fp, #80
25790     01 FA 0D F2 | 	cmp	result1, #1 wz
25794     08 4E 05 A1 |  if_e	add	fp, #8
25798     A7 04 68 AC |  if_e	wrlong	#2, fp
2579c     08 4E 85 A1 |  if_e	sub	fp, #8
257a0     50 4E 05 F1 | 	add	fp, #80
257a4     A7 16 02 FB | 	rdlong	arg03, fp
257a8     50 4E 85 F1 | 	sub	fp, #80
257ac     FF FF 7F FF 
257b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
257b4     08 4E 05 A1 |  if_e	add	fp, #8
257b8     A7 02 68 AC |  if_e	wrlong	#1, fp
257bc     08 4E 85 A1 |  if_e	sub	fp, #8
257c0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
257c4     58 4E 05 F1 | 	add	fp, #88
257c8     A7 FA 61 FC | 	wrlong	result1, fp
257cc     50 4E 85 F1 | 	sub	fp, #80
257d0     A7 FA 09 FB | 	rdlong	result1, fp wz
257d4     08 4E 85 F1 | 	sub	fp, #8
257d8     1C 01 90 5D |  if_ne	jmp	#LR__3921
257dc     4C 4E 05 F1 | 	add	fp, #76
257e0     A7 12 02 FB | 	rdlong	arg01, fp
257e4     04 4E 05 F1 | 	add	fp, #4
257e8     A7 14 02 FB | 	rdlong	arg02, fp
257ec     50 4E 85 F1 | 	sub	fp, #80
257f0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
257f4     08 4E 05 F1 | 	add	fp, #8
257f8     A7 FA 61 FC | 	wrlong	result1, fp
257fc     00 FA 4D F2 | 	cmps	result1, #0 wz
25800     08 4E 85 F1 | 	sub	fp, #8
25804     F0 00 90 5D |  if_ne	jmp	#LR__3920
25808     4C 4E 05 F1 | 	add	fp, #76
2580c     A7 12 02 FB | 	rdlong	arg01, fp
25810     4C 4E 85 F1 | 	sub	fp, #76
25814     34 12 06 F1 | 	add	arg01, #52
25818     20 14 06 F6 | 	mov	arg02, #32
2581c     0B 16 06 F6 | 	mov	arg03, #11
25820     98 00 A0 FD | 	call	#\builtin_bytefill_
25824     4C 4E 05 F1 | 	add	fp, #76
25828     A7 FA 01 FB | 	rdlong	result1, fp
2582c     34 FA 05 F1 | 	add	result1, #52
25830     FD 5C 48 FC | 	wrbyte	#46, result1
25834     A7 16 02 FB | 	rdlong	arg03, fp
25838     3F 16 06 F1 | 	add	arg03, #63
2583c     0B 21 48 FC | 	wrbyte	#16, arg03
25840     A7 12 02 FB | 	rdlong	arg01, fp
25844     4A 12 06 F1 | 	add	arg01, #74
25848     0C 4E 05 F1 | 	add	fp, #12
2584c     A7 14 02 FB | 	rdlong	arg02, fp
25850     09 15 62 FC | 	wrlong	arg02, arg01
25854     0C 4E 85 F1 | 	sub	fp, #12
25858     A7 14 02 FB | 	rdlong	arg02, fp
2585c     0A 13 02 F6 | 	mov	arg01, arg02
25860     34 14 06 F1 | 	add	arg02, #52
25864     04 4E 05 F1 | 	add	fp, #4
25868     A7 16 02 FB | 	rdlong	arg03, fp
2586c     50 4E 85 F1 | 	sub	fp, #80
25870     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
25874     4C 4E 05 F1 | 	add	fp, #76
25878     A7 14 02 FB | 	rdlong	arg02, fp
2587c     0A 13 02 F6 | 	mov	arg01, arg02
25880     54 12 06 F1 | 	add	arg01, #84
25884     4C 4E 85 F1 | 	sub	fp, #76
25888     34 14 06 F1 | 	add	arg02, #52
2588c     20 16 06 F6 | 	mov	arg03, #32
25890     54 2F BF FD | 	call	#__system____builtin_memmove
25894     4C 4E 05 F1 | 	add	fp, #76
25898     A7 16 02 FB | 	rdlong	arg03, fp
2589c     55 16 06 F1 | 	add	arg03, #85
258a0     0B 5D 48 FC | 	wrbyte	#46, arg03
258a4     38 4E 85 F1 | 	sub	fp, #56
258a8     A7 16 02 FB | 	rdlong	arg03, fp
258ac     40 4E 05 F1 | 	add	fp, #64
258b0     A7 16 62 FC | 	wrlong	arg03, fp
258b4     08 4E 85 F1 | 	sub	fp, #8
258b8     A7 14 02 FB | 	rdlong	arg02, fp
258bc     0A 13 02 F6 | 	mov	arg01, arg02
258c0     54 14 06 F1 | 	add	arg02, #84
258c4     4C 4E 85 F1 | 	sub	fp, #76
258c8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
258cc     4C 4E 05 F1 | 	add	fp, #76
258d0     A7 16 02 FB | 	rdlong	arg03, fp
258d4     03 16 06 F1 | 	add	arg03, #3
258d8     0B 03 48 FC | 	wrbyte	#1, arg03
258dc     40 4E 85 F1 | 	sub	fp, #64
258e0     A7 12 02 F6 | 	mov	arg01, fp
258e4     0C 4E 85 F1 | 	sub	fp, #12
258e8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
258ec     08 4E 05 F1 | 	add	fp, #8
258f0     A7 FA 61 FC | 	wrlong	result1, fp
258f4     08 4E 85 F1 | 	sub	fp, #8
258f8                 | LR__3920
258f8                 | LR__3921
258f8     08 4E 05 F1 | 	add	fp, #8
258fc     A7 FA 09 FB | 	rdlong	result1, fp wz
25900     08 4E 85 F1 | 	sub	fp, #8
25904     88 00 90 5D |  if_ne	jmp	#LR__3922
25908     28 4E 05 F1 | 	add	fp, #40
2590c     A7 12 02 FB | 	rdlong	arg01, fp
25910     16 12 06 F1 | 	add	arg01, #22
25914     30 4E 05 F1 | 	add	fp, #48
25918     A7 14 02 FB | 	rdlong	arg02, fp
2591c     09 15 62 FC | 	wrlong	arg02, arg01
25920     0C 4E 85 F1 | 	sub	fp, #12
25924     A7 12 02 FB | 	rdlong	arg01, fp
25928     24 4E 85 F1 | 	sub	fp, #36
2592c     A7 14 02 FB | 	rdlong	arg02, fp
25930     28 4E 05 F1 | 	add	fp, #40
25934     A7 16 02 FB | 	rdlong	arg03, fp
25938     50 4E 85 F1 | 	sub	fp, #80
2593c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
25940     28 4E 05 F1 | 	add	fp, #40
25944     A7 FA 01 FB | 	rdlong	result1, fp
25948     0B FA 05 F1 | 	add	result1, #11
2594c     FD 20 48 FC | 	wrbyte	#16, result1
25950     24 4E 05 F1 | 	add	fp, #36
25954     A7 FA 01 FB | 	rdlong	result1, fp
25958     03 FA 05 F1 | 	add	result1, #3
2595c     FD 02 48 FC | 	wrbyte	#1, result1
25960     44 4E 85 F1 | 	sub	fp, #68
25964     A7 FA 09 FB | 	rdlong	result1, fp wz
25968     08 4E 85 F1 | 	sub	fp, #8
2596c     3C 00 90 5D |  if_ne	jmp	#LR__3923
25970     4C 4E 05 F1 | 	add	fp, #76
25974     A7 12 02 FB | 	rdlong	arg01, fp
25978     4C 4E 85 F1 | 	sub	fp, #76
2597c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
25980     08 4E 05 F1 | 	add	fp, #8
25984     A7 FA 61 FC | 	wrlong	result1, fp
25988     08 4E 85 F1 | 	sub	fp, #8
2598c     1C 00 90 FD | 	jmp	#LR__3923
25990                 | LR__3922
25990     3C 4E 05 F1 | 	add	fp, #60
25994     A7 12 02 F6 | 	mov	arg01, fp
25998     14 4E 05 F1 | 	add	fp, #20
2599c     A7 14 02 FB | 	rdlong	arg02, fp
259a0     50 4E 85 F1 | 	sub	fp, #80
259a4     00 16 06 F6 | 	mov	arg03, #0
259a8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
259ac                 | LR__3923
259ac                 | LR__3924
259ac                 | LR__3925
259ac                 | ' 				remove_chain(&sobj, dcl, 0);
259ac                 | ' 			}
259ac                 | ' 		}
259ac                 | ' 		;
259ac                 | ' 	}
259ac                 | ' 
259ac                 | ' 	return res ;
259ac     08 4E 05 F1 | 	add	fp, #8
259b0     A7 FA 01 FB | 	rdlong	result1, fp
259b4     08 4E 85 F1 | 	sub	fp, #8
259b8     A7 F0 03 F6 | 	mov	ptra, fp
259bc     B2 00 A0 FD | 	call	#popregs_
259c0                 | _fatfs_cc_f_mkdir_ret
259c0     2D 00 64 FD | 	ret
259c4                 | 
259c4                 | _fatfs_cc_f_rename
259c4     01 4A 05 F6 | 	mov	COUNT_, #1
259c8     A8 00 A0 FD | 	call	#pushregs_
259cc     9C F0 07 F1 | 	add	ptra, #156
259d0     04 4E 05 F1 | 	add	fp, #4
259d4     A7 12 62 FC | 	wrlong	arg01, fp
259d8     04 4E 05 F1 | 	add	fp, #4
259dc     A7 14 62 FC | 	wrlong	arg02, fp
259e0     A7 12 02 F6 | 	mov	arg01, fp
259e4     08 4E 85 F1 | 	sub	fp, #8
259e8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
259ec     04 4E 05 F1 | 	add	fp, #4
259f0     A7 12 02 F6 | 	mov	arg01, fp
259f4     6C 4E 05 F1 | 	add	fp, #108
259f8     A7 14 02 F6 | 	mov	arg02, fp
259fc     70 4E 85 F1 | 	sub	fp, #112
25a00     02 16 06 F6 | 	mov	arg03, #2
25a04     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
25a08     0C 4E 05 F1 | 	add	fp, #12
25a0c     A7 FA 61 FC | 	wrlong	result1, fp
25a10     0C 4E 85 F1 | 	sub	fp, #12
25a14     00 FA 0D F2 | 	cmp	result1, #0 wz
25a18     44 03 90 5D |  if_ne	jmp	#LR__3943
25a1c     70 4E 05 F1 | 	add	fp, #112
25a20     A7 16 02 FB | 	rdlong	arg03, fp
25a24     60 4E 85 F1 | 	sub	fp, #96
25a28     A7 16 62 FC | 	wrlong	arg03, fp
25a2c     A7 12 02 F6 | 	mov	arg01, fp
25a30     0C 4E 85 F1 | 	sub	fp, #12
25a34     A7 14 02 FB | 	rdlong	arg02, fp
25a38     04 4E 85 F1 | 	sub	fp, #4
25a3c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
25a40     0C 4E 05 F1 | 	add	fp, #12
25a44     A7 FA 61 FC | 	wrlong	result1, fp
25a48     00 FA 4D F2 | 	cmps	result1, #0 wz
25a4c     0C 4E 85 F1 | 	sub	fp, #12
25a50     1C 00 90 5D |  if_ne	jmp	#LR__3930
25a54     3B 4E 05 F1 | 	add	fp, #59
25a58     A7 FA C1 FA | 	rdbyte	result1, fp
25a5c     3B 4E 85 F1 | 	sub	fp, #59
25a60     A0 FA CD F7 | 	test	result1, #160 wz
25a64     0C 4E 05 51 |  if_ne	add	fp, #12
25a68     A7 0C 68 5C |  if_ne	wrlong	#6, fp
25a6c     0C 4E 85 51 |  if_ne	sub	fp, #12
25a70                 | LR__3930
25a70     0C 4E 05 F1 | 	add	fp, #12
25a74     A7 1E 0A FB | 	rdlong	local01, fp wz
25a78     0C 4E 85 F1 | 	sub	fp, #12
25a7c     E0 02 90 5D |  if_ne	jmp	#LR__3942
25a80     74 4E 05 F1 | 	add	fp, #116
25a84     A7 12 02 F6 | 	mov	arg01, fp
25a88     48 4E 85 F1 | 	sub	fp, #72
25a8c     A7 14 02 FB | 	rdlong	arg02, fp
25a90     2C 4E 85 F1 | 	sub	fp, #44
25a94     20 16 06 F6 | 	mov	arg03, #32
25a98     4C 2D BF FD | 	call	#__system____builtin_memmove
25a9c     40 4E 05 F1 | 	add	fp, #64
25aa0     A7 12 02 F6 | 	mov	arg01, fp
25aa4     30 4E 85 F1 | 	sub	fp, #48
25aa8     A7 14 02 F6 | 	mov	arg02, fp
25aac     10 4E 85 F1 | 	sub	fp, #16
25ab0     30 16 06 F6 | 	mov	arg03, #48
25ab4     30 2D BF FD | 	call	#__system____builtin_memmove
25ab8     40 4E 05 F1 | 	add	fp, #64
25abc     A7 12 02 F6 | 	mov	arg01, fp
25ac0     38 4E 85 F1 | 	sub	fp, #56
25ac4     A7 14 02 FB | 	rdlong	arg02, fp
25ac8     08 4E 85 F1 | 	sub	fp, #8
25acc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
25ad0     0C 4E 05 F1 | 	add	fp, #12
25ad4     A7 FA 61 FC | 	wrlong	result1, fp
25ad8     0C 4E 85 F1 | 	sub	fp, #12
25adc     00 FA 0D F2 | 	cmp	result1, #0 wz
25ae0     4C 00 90 5D |  if_ne	jmp	#LR__3933
25ae4     48 4E 05 F1 | 	add	fp, #72
25ae8     A7 FA 01 FB | 	rdlong	result1, fp
25aec     30 4E 85 F1 | 	sub	fp, #48
25af0     A7 16 02 FB | 	rdlong	arg03, fp
25af4     18 4E 85 F1 | 	sub	fp, #24
25af8     0B FB 09 F2 | 	cmp	result1, arg03 wz
25afc     20 00 90 5D |  if_ne	jmp	#LR__3931
25b00     50 4E 05 F1 | 	add	fp, #80
25b04     A7 FA 01 FB | 	rdlong	result1, fp
25b08     30 4E 85 F1 | 	sub	fp, #48
25b0c     A7 16 02 FB | 	rdlong	arg03, fp
25b10     20 4E 85 F1 | 	sub	fp, #32
25b14     0B FB 09 F2 | 	cmp	result1, arg03 wz
25b18     04 1E 06 A6 |  if_e	mov	local01, #4
25b1c     04 00 90 AD |  if_e	jmp	#LR__3932
25b20                 | LR__3931
25b20     08 1E 06 F6 | 	mov	local01, #8
25b24                 | LR__3932
25b24     0C 4E 05 F1 | 	add	fp, #12
25b28     A7 1E 62 FC | 	wrlong	local01, fp
25b2c     0C 4E 85 F1 | 	sub	fp, #12
25b30                 | LR__3933
25b30     0C 4E 05 F1 | 	add	fp, #12
25b34     A7 1E 02 FB | 	rdlong	local01, fp
25b38     0C 4E 85 F1 | 	sub	fp, #12
25b3c     04 1E 0E F2 | 	cmp	local01, #4 wz
25b40     CC 01 90 5D |  if_ne	jmp	#LR__3939
25b44     40 4E 05 F1 | 	add	fp, #64
25b48     A7 12 02 F6 | 	mov	arg01, fp
25b4c     40 4E 85 F1 | 	sub	fp, #64
25b50     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
25b54     0C 4E 05 F1 | 	add	fp, #12
25b58     A7 FA 61 FC | 	wrlong	result1, fp
25b5c     0C 4E 85 F1 | 	sub	fp, #12
25b60     00 FA 0D F2 | 	cmp	result1, #0 wz
25b64     A8 01 90 5D |  if_ne	jmp	#LR__3938
25b68     5C 4E 05 F1 | 	add	fp, #92
25b6c     A7 12 02 FB | 	rdlong	arg01, fp
25b70     38 4E 05 F1 | 	add	fp, #56
25b74     A7 12 62 FC | 	wrlong	arg01, fp
25b78     0D 12 06 F1 | 	add	arg01, #13
25b7c     20 4E 85 F1 | 	sub	fp, #32
25b80     A7 14 02 F6 | 	mov	arg02, fp
25b84     74 4E 85 F1 | 	sub	fp, #116
25b88     0D 14 06 F1 | 	add	arg02, #13
25b8c     13 16 06 F6 | 	mov	arg03, #19
25b90     54 2C BF FD | 	call	#__system____builtin_memmove
25b94     94 4E 05 F1 | 	add	fp, #148
25b98     A7 1E 02 FB | 	rdlong	local01, fp
25b9c     15 4E 85 F1 | 	sub	fp, #21
25ba0     A7 FA C1 FA | 	rdbyte	result1, fp
25ba4     0B 1E 06 F1 | 	add	local01, #11
25ba8     0F FB 41 FC | 	wrbyte	result1, local01
25bac     15 4E 05 F1 | 	add	fp, #21
25bb0     A7 1E 02 FB | 	rdlong	local01, fp
25bb4     94 4E 85 F1 | 	sub	fp, #148
25bb8     0B 1E 06 F1 | 	add	local01, #11
25bbc     0F 1F C2 FA | 	rdbyte	local01, local01
25bc0     10 1E CE F7 | 	test	local01, #16 wz
25bc4     24 00 90 5D |  if_ne	jmp	#LR__3934
25bc8     94 4E 05 F1 | 	add	fp, #148
25bcc     A7 FA 01 FB | 	rdlong	result1, fp
25bd0     FD 1E 02 F6 | 	mov	local01, result1
25bd4     94 4E 85 F1 | 	sub	fp, #148
25bd8     0B FA 05 F1 | 	add	result1, #11
25bdc     FD FA C1 FA | 	rdbyte	result1, result1
25be0     20 FA 45 F5 | 	or	result1, #32
25be4     0B 1E 06 F1 | 	add	local01, #11
25be8     0F FB 41 FC | 	wrbyte	result1, local01
25bec                 | LR__3934
25bec     70 4E 05 F1 | 	add	fp, #112
25bf0     A7 1E 02 FB | 	rdlong	local01, fp
25bf4     03 1E 06 F1 | 	add	local01, #3
25bf8     0F 03 48 FC | 	wrbyte	#1, local01
25bfc     24 4E 05 F1 | 	add	fp, #36
25c00     A7 1E 02 FB | 	rdlong	local01, fp
25c04     94 4E 85 F1 | 	sub	fp, #148
25c08     0B 1E 06 F1 | 	add	local01, #11
25c0c     0F 1F C2 FA | 	rdbyte	local01, local01
25c10     10 1E CE F7 | 	test	local01, #16 wz
25c14     F8 00 90 AD |  if_e	jmp	#LR__3937
25c18     18 4E 05 F1 | 	add	fp, #24
25c1c     A7 16 02 FB | 	rdlong	arg03, fp
25c20     30 4E 05 F1 | 	add	fp, #48
25c24     A7 1E 02 FB | 	rdlong	local01, fp
25c28     48 4E 85 F1 | 	sub	fp, #72
25c2c     0F 17 0A F2 | 	cmp	arg03, local01 wz
25c30     DC 00 90 AD |  if_e	jmp	#LR__3937
25c34     70 4E 05 F1 | 	add	fp, #112
25c38     A7 12 02 FB | 	rdlong	arg01, fp
25c3c     09 1F 02 F6 | 	mov	local01, arg01
25c40     24 4E 05 F1 | 	add	fp, #36
25c44     A7 14 02 FB | 	rdlong	arg02, fp
25c48     94 4E 85 F1 | 	sub	fp, #148
25c4c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
25c50     FD 14 02 F6 | 	mov	arg02, result1
25c54     0F 13 02 F6 | 	mov	arg01, local01
25c58     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
25c5c     98 4E 05 F1 | 	add	fp, #152
25c60     A7 FA 61 FC | 	wrlong	result1, fp
25c64     00 FA 4D F2 | 	cmps	result1, #0 wz
25c68     98 4E 85 F1 | 	sub	fp, #152
25c6c     0C 4E 05 A1 |  if_e	add	fp, #12
25c70     A7 04 68 AC |  if_e	wrlong	#2, fp
25c74     0C 4E 85 A1 |  if_e	sub	fp, #12
25c78     94 00 90 AD |  if_e	jmp	#LR__3936
25c7c     70 4E 05 F1 | 	add	fp, #112
25c80     A7 12 02 FB | 	rdlong	arg01, fp
25c84     28 4E 05 F1 | 	add	fp, #40
25c88     A7 14 02 FB | 	rdlong	arg02, fp
25c8c     98 4E 85 F1 | 	sub	fp, #152
25c90     4C A0 BF FD | 	call	#_fatfs_cc_move_window
25c94     0C 4E 05 F1 | 	add	fp, #12
25c98     A7 FA 61 FC | 	wrlong	result1, fp
25c9c     64 4E 05 F1 | 	add	fp, #100
25ca0     A7 1E 02 FB | 	rdlong	local01, fp
25ca4     54 1E 06 F1 | 	add	local01, #84
25ca8     24 4E 05 F1 | 	add	fp, #36
25cac     A7 1E 62 FC | 	wrlong	local01, fp
25cb0     88 4E 85 F1 | 	sub	fp, #136
25cb4     A7 1E 0A FB | 	rdlong	local01, fp wz
25cb8     0C 4E 85 F1 | 	sub	fp, #12
25cbc     50 00 90 5D |  if_ne	jmp	#LR__3935
25cc0     94 4E 05 F1 | 	add	fp, #148
25cc4     A7 1E 02 FB | 	rdlong	local01, fp
25cc8     94 4E 85 F1 | 	sub	fp, #148
25ccc     01 1E 06 F1 | 	add	local01, #1
25cd0     0F 1F C2 FA | 	rdbyte	local01, local01
25cd4     2E 1E 0E F2 | 	cmp	local01, #46 wz
25cd8     34 00 90 5D |  if_ne	jmp	#LR__3935
25cdc     70 4E 05 F1 | 	add	fp, #112
25ce0     A7 12 02 FB | 	rdlong	arg01, fp
25ce4     24 4E 05 F1 | 	add	fp, #36
25ce8     A7 14 02 FB | 	rdlong	arg02, fp
25cec     4C 4E 85 F1 | 	sub	fp, #76
25cf0     A7 16 02 FB | 	rdlong	arg03, fp
25cf4     48 4E 85 F1 | 	sub	fp, #72
25cf8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
25cfc     70 4E 05 F1 | 	add	fp, #112
25d00     A7 1E 02 FB | 	rdlong	local01, fp
25d04     70 4E 85 F1 | 	sub	fp, #112
25d08     03 1E 06 F1 | 	add	local01, #3
25d0c     0F 03 48 FC | 	wrbyte	#1, local01
25d10                 | LR__3935
25d10                 | LR__3936
25d10                 | LR__3937
25d10                 | LR__3938
25d10                 | LR__3939
25d10     0C 4E 05 F1 | 	add	fp, #12
25d14     A7 1E 0A FB | 	rdlong	local01, fp wz
25d18     0C 4E 85 F1 | 	sub	fp, #12
25d1c     40 00 90 5D |  if_ne	jmp	#LR__3941
25d20     10 4E 05 F1 | 	add	fp, #16
25d24     A7 12 02 F6 | 	mov	arg01, fp
25d28     10 4E 85 F1 | 	sub	fp, #16
25d2c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
25d30     0C 4E 05 F1 | 	add	fp, #12
25d34     A7 FA 61 FC | 	wrlong	result1, fp
25d38     0C 4E 85 F1 | 	sub	fp, #12
25d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
25d40     1C 00 90 5D |  if_ne	jmp	#LR__3940
25d44     70 4E 05 F1 | 	add	fp, #112
25d48     A7 12 02 FB | 	rdlong	arg01, fp
25d4c     70 4E 85 F1 | 	sub	fp, #112
25d50     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
25d54     0C 4E 05 F1 | 	add	fp, #12
25d58     A7 FA 61 FC | 	wrlong	result1, fp
25d5c     0C 4E 85 F1 | 	sub	fp, #12
25d60                 | LR__3940
25d60                 | LR__3941
25d60                 | LR__3942
25d60                 | LR__3943
25d60                 | ' 					res = sync_fs(fs);
25d60                 | ' 				}
25d60                 | ' 			}
25d60                 | ' 
25d60                 | ' 		}
25d60                 | ' 		;
25d60                 | ' 	}
25d60                 | ' 
25d60                 | ' 	return res ;
25d60     0C 4E 05 F1 | 	add	fp, #12
25d64     A7 FA 01 FB | 	rdlong	result1, fp
25d68     0C 4E 85 F1 | 	sub	fp, #12
25d6c     A7 F0 03 F6 | 	mov	ptra, fp
25d70     B2 00 A0 FD | 	call	#popregs_
25d74                 | _fatfs_cc_f_rename_ret
25d74     2D 00 64 FD | 	ret
25d78                 | 
25d78                 | _fatfs_cc_time
25d78     00 4A 05 F6 | 	mov	COUNT_, #0
25d7c     A8 00 A0 FD | 	call	#pushregs_
25d80     14 F0 07 F1 | 	add	ptra, #20
25d84     04 4E 05 F1 | 	add	fp, #4
25d88     A7 12 62 FC | 	wrlong	arg01, fp
25d8c     04 4E 05 F1 | 	add	fp, #4
25d90     A7 12 02 F6 | 	mov	arg01, fp
25d94     08 4E 85 F1 | 	sub	fp, #8
25d98     00 14 06 F6 | 	mov	arg02, #0
25d9c     04 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
25da0     08 4E 05 F1 | 	add	fp, #8
25da4     A7 FA 01 FB | 	rdlong	result1, fp
25da8     08 4E 05 F1 | 	add	fp, #8
25dac     A7 FA 61 FC | 	wrlong	result1, fp
25db0     0C 4E 85 F1 | 	sub	fp, #12
25db4     A7 FA 09 FB | 	rdlong	result1, fp wz
25db8     04 4E 85 F1 | 	sub	fp, #4
25dbc     18 00 90 AD |  if_e	jmp	#LR__3950
25dc0     04 4E 05 F1 | 	add	fp, #4
25dc4     A7 FA 01 FB | 	rdlong	result1, fp
25dc8     0C 4E 05 F1 | 	add	fp, #12
25dcc     A7 14 02 FB | 	rdlong	arg02, fp
25dd0     10 4E 85 F1 | 	sub	fp, #16
25dd4     FD 14 62 FC | 	wrlong	arg02, result1
25dd8                 | LR__3950
25dd8                 | '         *tp = now;
25dd8                 | '     return now;
25dd8     10 4E 05 F1 | 	add	fp, #16
25ddc     A7 FA 01 FB | 	rdlong	result1, fp
25de0     10 4E 85 F1 | 	sub	fp, #16
25de4     A7 F0 03 F6 | 	mov	ptra, fp
25de8     B2 00 A0 FD | 	call	#popregs_
25dec                 | _fatfs_cc_time_ret
25dec     2D 00 64 FD | 	ret
25df0                 | 
25df0                 | _fatfs_cc_mktime
25df0     06 4A 05 F6 | 	mov	COUNT_, #6
25df4     A8 00 A0 FD | 	call	#pushregs_
25df8     09 1F 02 F6 | 	mov	local01, arg01
25dfc     14 1E 06 F1 | 	add	local01, #20
25e00     0F 13 02 FB | 	rdlong	arg01, local01
25e04     14 1E 86 F1 | 	sub	local01, #20
25e08     46 12 56 F2 | 	cmps	arg01, #70 wc
25e0c                 | '                 return (time_t) -1;
25e0c     01 FA 65 C6 |  if_b	neg	result1, #1
25e10     7C 01 90 CD |  if_b	jmp	#LR__3964
25e14     03 00 00 FF 
25e18     6C 21 06 F6 | 	mov	local02, ##1900
25e1c     14 1E 06 F1 | 	add	local01, #20
25e20     0F FB 01 FB | 	rdlong	result1, local01
25e24     FD 20 02 F1 | 	add	local02, result1
25e28     08 1E 86 F1 | 	sub	local01, #8
25e2c     0F 23 02 FB | 	rdlong	local03, local01
25e30     01 22 86 F1 | 	sub	local03, #1
25e34     04 1E 06 F1 | 	add	local01, #4
25e38     0F 13 02 FB | 	rdlong	arg01, local01
25e3c     10 1E 86 F1 | 	sub	local01, #16
25e40     02 12 66 F0 | 	shl	arg01, #2
25e44     02 00 00 FF 
25e48     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
25e4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
25e50     09 FB 01 FB | 	rdlong	result1, arg01
25e54     FD 22 02 F1 | 	add	local03, result1
25e58     10 13 02 F6 | 	mov	arg01, local02
25e5c     02 00 00 FF 
25e60     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
25e64     E4 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
25e68     00 FA 0D F2 | 	cmp	result1, #0 wz
25e6c     1C 00 90 AD |  if_e	jmp	#LR__3960
25e70     00 24 06 F6 | 	mov	local04, #0
25e74     10 1E 06 F1 | 	add	local01, #16
25e78     0F FB 01 FB | 	rdlong	result1, local01
25e7c     10 1E 86 F1 | 	sub	local01, #16
25e80     02 FA 55 F2 | 	cmps	result1, #2 wc
25e84     01 24 06 36 |  if_ae	mov	local04, #1
25e88     04 00 90 FD | 	jmp	#LR__3961
25e8c                 | LR__3960
25e8c     00 24 06 F6 | 	mov	local04, #0
25e90                 | LR__3961
25e90     04 1E 06 F1 | 	add	local01, #4
25e94     0F FB 01 FB | 	rdlong	result1, local01
25e98     04 1E 86 F1 | 	sub	local01, #4
25e9c     0F 27 02 FB | 	rdlong	local05, local01
25ea0     08 1E 06 F1 | 	add	local01, #8
25ea4     0F 13 02 FB | 	rdlong	arg01, local01
25ea8     07 00 00 FF 
25eac     10 12 06 FD | 	qmul	arg01, ##3600
25eb0     12 23 02 F1 | 	add	local03, local04
25eb4     FD 24 02 F6 | 	mov	local04, result1
25eb8     04 24 66 F0 | 	shl	local04, #4
25ebc     FD 24 82 F1 | 	sub	local04, result1
25ec0     02 24 66 F0 | 	shl	local04, #2
25ec4     12 27 02 F1 | 	add	local05, local04
25ec8     08 1E 86 F1 | 	sub	local01, #8
25ecc     18 24 62 FD | 	getqx	local04
25ed0     A8 00 00 FF 
25ed4     80 23 06 FD | 	qmul	local03, ##86400
25ed8     12 27 02 F1 | 	add	local05, local04
25edc     10 23 02 F6 | 	mov	local03, local02
25ee0     03 00 00 FF 
25ee4     B2 23 86 F1 | 	sub	local03, ##1970
25ee8     18 24 62 FD | 	getqx	local04
25eec     99 F0 00 FF 
25ef0     80 23 06 FD | 	qmul	local03, ##31536000
25ef4     12 27 02 F1 | 	add	local05, local04
25ef8     10 23 02 F6 | 	mov	local03, local02
25efc     03 00 00 FF 
25f00     B1 23 86 F1 | 	sub	local03, ##1969
25f04     11 29 52 F6 | 	abs	local06, local03 wc
25f08     02 28 46 F0 | 	shr	local06, #2
25f0c     14 29 82 F6 | 	negc	local06, local06
25f10     03 00 00 FF 
25f14     D1 21 56 F2 | 	cmps	local02, ##2001 wc
25f18     18 24 62 FD | 	getqx	local04
25f1c     12 27 02 F1 | 	add	local05, local04
25f20     18 00 90 CD |  if_b	jmp	#LR__3962
25f24     03 00 00 FF 
25f28     D0 21 86 F1 | 	sub	local02, ##2000
25f2c     10 25 52 F6 | 	abs	local04, local02 wc
25f30     64 24 16 FD | 	qdiv	local04, #100
25f34     18 24 62 FD | 	getqx	local04
25f38     12 29 A2 F3 | 	sumnc	local06, local04
25f3c                 | LR__3962
25f3c     A8 00 00 FF 
25f40     80 29 06 FD | 	qmul	local06, ##86400
25f44     18 28 62 FD | 	getqx	local06
25f48     14 27 02 F1 | 	add	local05, local06
25f4c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
25f50     02 00 00 FF 
25f54     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
25f58     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
25f5c     14 27 02 F1 | 	add	local05, local06
25f60     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
25f64     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
25f68     02 00 00 FF 
25f6c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
25f70     01 22 0E F2 | 	cmp	local03, #1 wz
25f74     14 00 90 5D |  if_ne	jmp	#LR__3963
25f78     0F 13 02 F6 | 	mov	arg01, local01
25f7c     D0 19 B0 FD | 	call	#_fatfs_cc___indst
25f80     00 FA 0D F2 | 	cmp	result1, #0 wz
25f84     07 00 00 5F 
25f88     10 26 86 51 |  if_ne	sub	local05, ##3600
25f8c                 | LR__3963
25f8c                 | '                 s -=  (3600L) ;
25f8c                 | ' 
25f8c                 | '         return s;
25f8c     13 FB 01 F6 | 	mov	result1, local05
25f90                 | LR__3964
25f90     A7 F0 03 F6 | 	mov	ptra, fp
25f94     B2 00 A0 FD | 	call	#popregs_
25f98                 | _fatfs_cc_mktime_ret
25f98     2D 00 64 FD | 	ret
25f9c                 | 
25f9c                 | _fatfs_cc__gmtime_r
25f9c     03 4A 05 F6 | 	mov	COUNT_, #3
25fa0     A8 00 A0 FD | 	call	#pushregs_
25fa4     09 1F 02 FB | 	rdlong	local01, arg01
25fa8     A8 00 00 FF 
25fac     80 1F 16 FD | 	qdiv	local01, ##86400
25fb0     18 FA 61 FD | 	getqx	result1
25fb4     04 FA 05 F1 | 	add	result1, #4
25fb8     07 FA 15 FD | 	qdiv	result1, #7
25fbc     18 14 06 F1 | 	add	arg02, #24
25fc0     D1 7F 27 FF 
25fc4     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
25fc8     D1 7F 27 3F 
25fcc     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
25fd0     03 00 00 3F 
25fd4     DC 21 06 36 |  if_ae	mov	local02, ##2012
25fd8     03 00 00 CF 
25fdc     B2 21 06 C6 |  if_b	mov	local02, ##1970
25fe0                 | ' 	  year = 1970;
25fe0                 | ' 	}
25fe0                 | ' 
25fe0                 | ' 	for(;;) {
25fe0     19 FA 61 FD | 	getqy	result1
25fe4     0A FB 61 FC | 	wrlong	result1, arg02
25fe8     18 14 86 F1 | 	sub	arg02, #24
25fec                 | LR__3970
25fec     10 13 02 F6 | 	mov	arg01, local02
25ff0     58 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
25ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
25ff8     42 F1 00 5F 
25ffc     00 23 06 56 |  if_ne	mov	local03, ##31622400
26000     99 F0 00 AF 
26004     80 23 06 A6 |  if_e	mov	local03, ##31536000
26008     11 1F 12 F2 | 	cmp	local01, local03 wc
2600c                 | ' 	    break;
2600c     01 20 06 31 |  if_ae	add	local02, #1
26010     11 1F 82 31 |  if_ae	sub	local01, local03
26014     D4 FF 9F 3D |  if_ae	jmp	#LR__3970
26018     A8 00 00 FF 
2601c     80 1F 16 FD | 	qdiv	local01, ##86400
26020     10 23 02 F6 | 	mov	local03, local02
26024     03 00 00 FF 
26028     6C 23 86 F1 | 	sub	local03, ##1900
2602c     14 14 06 F1 | 	add	arg02, #20
26030     0A 23 62 FC | 	wrlong	local03, arg02
26034     08 14 06 F1 | 	add	arg02, #8
26038     10 13 02 F6 | 	mov	arg01, local02
2603c     18 20 62 FD | 	getqx	local02
26040     0A 21 62 FC | 	wrlong	local02, arg02
26044     1C 14 86 F1 | 	sub	arg02, #28
26048     00 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2604c     00 FA 0D F2 | 	cmp	result1, #0 wz
26050     1D 22 06 56 |  if_ne	mov	local03, #29
26054     1C 22 06 A6 |  if_e	mov	local03, #28
26058     02 00 00 FF 
2605c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
26060     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
26064     02 00 00 FF 
26068     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2606c                 | ' 
2606c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2606c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2606c     00 12 06 F6 | 	mov	arg01, #0
26070     97 2A 48 FB | 	callpa	#(@LR__3972-@LR__3971)>>2,fcache_load_ptr_
26074                 | LR__3971
26074     09 23 02 F6 | 	mov	local03, arg01
26078     02 22 66 F0 | 	shl	local03, #2
2607c     02 00 00 FF 
26080     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
26084     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
26088     11 23 02 FB | 	rdlong	local03, local03
2608c     11 21 52 F2 | 	cmps	local02, local03 wc
26090     02 00 00 FF 
26094     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
26098     2C 00 90 CD |  if_b	jmp	#LR__3973
2609c     09 23 02 F6 | 	mov	local03, arg01
260a0     02 22 66 F0 | 	shl	local03, #2
260a4     02 00 00 FF 
260a8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
260ac     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
260b0     11 23 02 FB | 	rdlong	local03, local03
260b4     11 21 82 F1 | 	sub	local02, local03
260b8     01 12 06 F1 | 	add	arg01, #1
260bc     02 00 00 FF 
260c0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
260c4     AC FF 9F FD | 	jmp	#LR__3971
260c8                 | LR__3972
260c8                 | LR__3973
260c8     A8 00 00 FF 
260cc     80 1F 16 FD | 	qdiv	local01, ##86400
260d0     10 14 06 F1 | 	add	arg02, #16
260d4     0A 13 62 FC | 	wrlong	arg01, arg02
260d8     01 20 06 F1 | 	add	local02, #1
260dc     04 14 86 F1 | 	sub	arg02, #4
260e0     0A 21 62 FC | 	wrlong	local02, arg02
260e4     19 1E 62 FD | 	getqy	local01
260e8     07 00 00 FF 
260ec     10 1E 16 FD | 	qdiv	local01, ##3600
260f0     18 22 62 FD | 	getqx	local03
260f4     07 00 00 FF 
260f8     10 1E 16 FD | 	qdiv	local01, ##3600
260fc     04 14 86 F1 | 	sub	arg02, #4
26100     0A 23 62 FC | 	wrlong	local03, arg02
26104     19 1E 62 FD | 	getqy	local01
26108     3C 1E 16 FD | 	qdiv	local01, #60
2610c     18 22 62 FD | 	getqx	local03
26110     3C 1E 16 FD | 	qdiv	local01, #60
26114     04 14 86 F1 | 	sub	arg02, #4
26118     0A 23 62 FC | 	wrlong	local03, arg02
2611c     04 14 86 F1 | 	sub	arg02, #4
26120                 | '         stm->tm_isdst = 0;
26120                 | ' 
26120                 | ' ;
26120                 | '         return stm;
26120     0A FB 01 F6 | 	mov	result1, arg02
26124     19 22 62 FD | 	getqy	local03
26128     0A 23 62 FC | 	wrlong	local03, arg02
2612c     20 14 06 F1 | 	add	arg02, #32
26130     0A 01 68 FC | 	wrlong	#0, arg02
26134     A7 F0 03 F6 | 	mov	ptra, fp
26138     B2 00 A0 FD | 	call	#popregs_
2613c                 | _fatfs_cc__gmtime_r_ret
2613c     2D 00 64 FD | 	ret
26140                 | 
26140                 | _fatfs_cc__tzset
26140     3E 01 00 FF 
26144     79 12 06 F6 | 	mov	arg01, ##@LR__4285
26148     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2614c     FD 12 02 F6 | 	mov	arg01, result1
26150     02 00 00 FF 
26154     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
26158     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2615c     02 00 00 FF 
26160     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
26164     34 15 B0 FD | 	call	#_fatfs_cc___tzoffset
26168     02 00 00 FF 
2616c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
26170     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
26174     02 00 00 FF 
26178     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2617c                 | _fatfs_cc__tzset_ret
2617c     2D 00 64 FD | 	ret
26180                 | 
26180                 | _fatfs_cc_getenv
26180     06 4A 05 F6 | 	mov	COUNT_, #6
26184     A8 00 A0 FD | 	call	#pushregs_
26188     09 1F 02 F6 | 	mov	local01, arg01
2618c     09 21 02 F6 | 	mov	local02, arg01
26190     97 06 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
26194                 | LR__3980
26194     10 FB C9 FA | 	rdbyte	result1, local02 wz
26198     01 20 06 51 |  if_ne	add	local02, #1
2619c     F4 FF 9F 5D |  if_ne	jmp	#LR__3980
261a0                 | LR__3981
261a0     09 21 82 F1 | 	sub	local02, arg01
261a4     10 FB 01 F6 | 	mov	result1, local02
261a8     02 00 00 FF 
261ac     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
261b0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
261b4     02 00 00 FF 
261b8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
261bc                 | '             return 0;
261bc     00 FA 05 A6 |  if_e	mov	result1, #0
261c0     5C 00 90 AD |  if_e	jmp	#LR__3984
261c4                 | ' 
261c4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
261c4     02 00 00 FF 
261c8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
261cc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
261d0     02 00 00 FF 
261d4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
261d8                 | LR__3982
261d8     11 25 0A FB | 	rdlong	local04, local03 wz
261dc     3C 00 90 AD |  if_e	jmp	#LR__3983
261e0     12 13 02 F6 | 	mov	arg01, local04
261e4     0F 15 02 F6 | 	mov	arg02, local01
261e8     10 17 02 F6 | 	mov	arg03, local02
261ec     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
261f0     00 FA 0D F2 | 	cmp	result1, #0 wz
261f4     10 27 02 A6 |  if_e	mov	local05, local02
261f8     12 27 02 A1 |  if_e	add	local05, local04
261fc     13 29 C2 AA |  if_e	rdbyte	local06, local05
26200     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
26204                 | ' 			return name+len+1;
26204     10 25 02 A1 |  if_e	add	local04, local02
26208     01 24 06 A1 |  if_e	add	local04, #1
2620c     12 FB 01 A6 |  if_e	mov	result1, local04
26210     0C 00 90 AD |  if_e	jmp	#LR__3984
26214     04 22 06 F1 | 	add	local03, #4
26218     BC FF 9F FD | 	jmp	#LR__3982
2621c                 | LR__3983
2621c                 | ' 	}
2621c                 | ' 	return 0;
2621c     00 FA 05 F6 | 	mov	result1, #0
26220                 | LR__3984
26220     A7 F0 03 F6 | 	mov	ptra, fp
26224     B2 00 A0 FD | 	call	#popregs_
26228                 | _fatfs_cc_getenv_ret
26228     2D 00 64 FD | 	ret
2622c                 | 
2622c                 | _fatfs_cc__get_fattime
2622c     00 4A 05 F6 | 	mov	COUNT_, #0
26230     A8 00 A0 FD | 	call	#pushregs_
26234     34 F0 07 F1 | 	add	ptra, #52
26238     00 12 06 F6 | 	mov	arg01, #0
2623c     38 FB BF FD | 	call	#_fatfs_cc_time
26240     04 4E 05 F1 | 	add	fp, #4
26244     A7 FA 61 FC | 	wrlong	result1, fp
26248     A7 12 02 F6 | 	mov	arg01, fp
2624c     0C 4E 05 F1 | 	add	fp, #12
26250     A7 14 02 F6 | 	mov	arg02, fp
26254     10 4E 85 F1 | 	sub	fp, #16
26258     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2625c     24 4E 05 F1 | 	add	fp, #36
26260     A7 14 02 FB | 	rdlong	arg02, fp
26264     50 14 86 F1 | 	sub	arg02, #80
26268     09 14 66 F0 | 	shl	arg02, #9
2626c     04 4E 85 F1 | 	sub	fp, #4
26270     A7 FA 01 FB | 	rdlong	result1, fp
26274     01 FA 05 F1 | 	add	result1, #1
26278     05 FA 65 F0 | 	shl	result1, #5
2627c     FD 14 42 F5 | 	or	arg02, result1
26280     04 4E 85 F1 | 	sub	fp, #4
26284     A7 FA 01 FB | 	rdlong	result1, fp
26288     FD 14 42 F5 | 	or	arg02, result1
2628c     14 4E 85 F1 | 	sub	fp, #20
26290     A7 14 62 FC | 	wrlong	arg02, fp
26294     10 4E 05 F1 | 	add	fp, #16
26298     A7 14 02 FB | 	rdlong	arg02, fp
2629c     0B 14 66 F0 | 	shl	arg02, #11
262a0     04 4E 85 F1 | 	sub	fp, #4
262a4     A7 FA 01 FB | 	rdlong	result1, fp
262a8     05 FA 65 F0 | 	shl	result1, #5
262ac     FD 14 42 F5 | 	or	arg02, result1
262b0     04 4E 85 F1 | 	sub	fp, #4
262b4     A7 FA 01 FB | 	rdlong	result1, fp
262b8     FD 14 42 F5 | 	or	arg02, result1
262bc     04 4E 85 F1 | 	sub	fp, #4
262c0     A7 14 62 FC | 	wrlong	arg02, fp
262c4                 | ' 
262c4                 | '     now = time(0);
262c4                 | '     _gmtime_r (&now, &date);
262c4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
262c4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
262c4                 | '     return (ffdate << 16) | fftime;
262c4     04 4E 85 F1 | 	sub	fp, #4
262c8     A7 FA 01 FB | 	rdlong	result1, fp
262cc     10 FA 65 F0 | 	shl	result1, #16
262d0     08 4E 85 F1 | 	sub	fp, #8
262d4     0A FB 41 F5 | 	or	result1, arg02
262d8     A7 F0 03 F6 | 	mov	ptra, fp
262dc     B2 00 A0 FD | 	call	#popregs_
262e0                 | _fatfs_cc__get_fattime_ret
262e0     2D 00 64 FD | 	ret
262e4                 | 
262e4                 | _fatfs_cc_unixtime_0837
262e4     00 4A 05 F6 | 	mov	COUNT_, #0
262e8     A8 00 A0 FD | 	call	#pushregs_
262ec     34 F0 07 F1 | 	add	ptra, #52
262f0     04 4E 05 F1 | 	add	fp, #4
262f4     A7 12 62 FC | 	wrlong	arg01, fp
262f8     04 4E 05 F1 | 	add	fp, #4
262fc     A7 14 62 FC | 	wrlong	arg02, fp
26300     04 4E 85 F1 | 	sub	fp, #4
26304     A7 14 02 FB | 	rdlong	arg02, fp
26308     09 14 46 F0 | 	shr	arg02, #9
2630c     7F 14 06 F5 | 	and	arg02, #127
26310     50 FA 05 F6 | 	mov	result1, #80
26314     0A FB 01 F1 | 	add	result1, arg02
26318     20 4E 05 F1 | 	add	fp, #32
2631c     A7 FA 61 FC | 	wrlong	result1, fp
26320     20 4E 85 F1 | 	sub	fp, #32
26324     A7 FA 01 FB | 	rdlong	result1, fp
26328     05 FA 45 F0 | 	shr	result1, #5
2632c     FD FA 41 F8 | 	getnib	result1, result1, #0
26330     01 FA 85 F1 | 	sub	result1, #1
26334     1C 4E 05 F1 | 	add	fp, #28
26338     A7 FA 61 FC | 	wrlong	result1, fp
2633c     1C 4E 85 F1 | 	sub	fp, #28
26340     A7 FA 01 FB | 	rdlong	result1, fp
26344     1F FA 05 F5 | 	and	result1, #31
26348     18 4E 05 F1 | 	add	fp, #24
2634c     A7 FA 61 FC | 	wrlong	result1, fp
26350     14 4E 85 F1 | 	sub	fp, #20
26354     A7 FA 01 FB | 	rdlong	result1, fp
26358     0B FA 45 F0 | 	shr	result1, #11
2635c     1F FA 05 F5 | 	and	result1, #31
26360     10 4E 05 F1 | 	add	fp, #16
26364     A7 FA 61 FC | 	wrlong	result1, fp
26368     10 4E 85 F1 | 	sub	fp, #16
2636c     A7 FA 01 FB | 	rdlong	result1, fp
26370     05 FA 45 F0 | 	shr	result1, #5
26374     3F FA 05 F5 | 	and	result1, #63
26378     0C 4E 05 F1 | 	add	fp, #12
2637c     A7 FA 61 FC | 	wrlong	result1, fp
26380     0C 4E 85 F1 | 	sub	fp, #12
26384     A7 14 02 FB | 	rdlong	arg02, fp
26388     1F 14 06 F5 | 	and	arg02, #31
2638c     01 14 66 F0 | 	shl	arg02, #1
26390     08 4E 05 F1 | 	add	fp, #8
26394     A7 14 62 FC | 	wrlong	arg02, fp
26398     A7 12 02 F6 | 	mov	arg01, fp
2639c     10 4E 85 F1 | 	sub	fp, #16
263a0     4C FA BF FD | 	call	#_fatfs_cc_mktime
263a4     0C 4E 05 F1 | 	add	fp, #12
263a8     A7 FA 61 FC | 	wrlong	result1, fp
263ac                 | ' 
263ac                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
263ac                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
263ac                 | '     date.tm_mday = (dosdate & 0x1f);
263ac                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
263ac                 | '     date.tm_min = (dostime >> 5) & 0x3f;
263ac                 | '     date.tm_sec = (dostime & 0x1f) << 1;
263ac                 | ' 
263ac                 | '     t = mktime(&date);
263ac                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
263ac                 | '     return t;
263ac     0C 4E 85 F1 | 	sub	fp, #12
263b0     A7 F0 03 F6 | 	mov	ptra, fp
263b4     B2 00 A0 FD | 	call	#popregs_
263b8                 | _fatfs_cc_unixtime_0837_ret
263b8     2D 00 64 FD | 	ret
263bc                 | 
263bc                 | _fatfs_cc__set_dos_error_0839
263bc     09 01 02 F6 | 	mov	_var01, arg01
263c0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
263c0                 | '     switch (derr) {
263c0     14 00 26 F3 | 	fle	_var01, #20
263c4     30 00 62 FD | 	jmprel	_var01
263c8                 | LR__3990
263c8     50 00 90 FD | 	jmp	#LR__3991
263cc     84 00 90 FD | 	jmp	#LR__4005
263d0     80 00 90 FD | 	jmp	#LR__4006
263d4     7C 00 90 FD | 	jmp	#LR__4007
263d8     48 00 90 FD | 	jmp	#LR__3992
263dc     44 00 90 FD | 	jmp	#LR__3993
263e0     40 00 90 FD | 	jmp	#LR__3994
263e4     44 00 90 FD | 	jmp	#LR__3995
263e8     48 00 90 FD | 	jmp	#LR__3997
263ec     54 00 90 FD | 	jmp	#LR__4000
263f0     38 00 90 FD | 	jmp	#LR__3996
263f4     4C 00 90 FD | 	jmp	#LR__4001
263f8     48 00 90 FD | 	jmp	#LR__4002
263fc     44 00 90 FD | 	jmp	#LR__4003
26400     50 00 90 FD | 	jmp	#LR__4008
26404     4C 00 90 FD | 	jmp	#LR__4008
26408     48 00 90 FD | 	jmp	#LR__4008
2640c     2C 00 90 FD | 	jmp	#LR__3998
26410     38 00 90 FD | 	jmp	#LR__4004
26414     2C 00 90 FD | 	jmp	#LR__3999
26418     38 00 90 FD | 	jmp	#LR__4008
2641c                 | LR__3991
2641c     00 02 06 F6 | 	mov	_var02, #0
26420                 | '         r = 0;
26420                 | '         break;
26420     34 00 90 FD | 	jmp	#LR__4009
26424                 | LR__3992
26424                 | LR__3993
26424                 | LR__3994
26424     04 02 06 F6 | 	mov	_var02, #4
26428                 | '         r =  4 ;
26428                 | '         break;
26428     2C 00 90 FD | 	jmp	#LR__4009
2642c                 | LR__3995
2642c                 | LR__3996
2642c     06 02 06 F6 | 	mov	_var02, #6
26430                 | '         r =  6 ;
26430                 | '         break;
26430     24 00 90 FD | 	jmp	#LR__4009
26434                 | LR__3997
26434     09 02 06 F6 | 	mov	_var02, #9
26438                 | '         r =  9 ;
26438                 | '         break;
26438     1C 00 90 FD | 	jmp	#LR__4009
2643c                 | LR__3998
2643c     07 02 06 F6 | 	mov	_var02, #7
26440                 | '         r =  7 ;
26440                 | '         break;
26440     14 00 90 FD | 	jmp	#LR__4009
26444                 | LR__3999
26444                 | LR__4000
26444                 | LR__4001
26444                 | LR__4002
26444                 | LR__4003
26444     0A 02 06 F6 | 	mov	_var02, #10
26448                 | '         r =  10 ;
26448                 | '         break;
26448     0C 00 90 FD | 	jmp	#LR__4009
2644c                 | LR__4004
2644c     0B 02 06 F6 | 	mov	_var02, #11
26450                 | '         r =  11 ;
26450                 | '         break;
26450     04 00 90 FD | 	jmp	#LR__4009
26454                 | LR__4005
26454                 | LR__4006
26454                 | LR__4007
26454                 | LR__4008
26454     0C 02 06 F6 | 	mov	_var02, #12
26458                 | '         r =  12 ;
26458                 | '         break;
26458                 | LR__4009
26458                 | '     }
26458                 | '     return _seterror(r);
26458     00 02 4E F2 | 	cmps	_var02, #0 wz
2645c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26460     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26464     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26468     01 FA 65 56 |  if_ne	neg	result1, #1
2646c     00 FA 05 A6 |  if_e	mov	result1, #0
26470                 | _fatfs_cc__set_dos_error_0839_ret
26470     2D 00 64 FD | 	ret
26474                 | 
26474                 | _fatfs_cc_v_creat
26474     04 4A 05 F6 | 	mov	COUNT_, #4
26478     A8 00 A0 FD | 	call	#pushregs_
2647c     09 1F 02 F6 | 	mov	local01, arg01
26480     0A 21 02 F6 | 	mov	local02, arg02
26484     03 00 00 FF 
26488     3C 12 06 F6 | 	mov	arg01, ##1596
2648c                 | '     return _gc_alloc(size);
2648c     10 14 06 F6 | 	mov	arg02, #16
26490     14 61 BF FD | 	call	#__system___gc_doalloc
26494     FD 22 0A F6 | 	mov	local03, result1 wz
26498                 | '       return _seterror( 7 );
26498     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2649c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
264a0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
264a4     01 FA 65 A6 |  if_e	neg	result1, #1
264a8     58 00 90 AD |  if_e	jmp	#LR__4011
264ac     11 13 02 F6 | 	mov	arg01, local03
264b0     00 14 06 F6 | 	mov	arg02, #0
264b4     03 00 00 FF 
264b8     3C 16 06 F6 | 	mov	arg03, ##1596
264bc     98 00 A0 FD | 	call	#\builtin_bytefill_
264c0     02 00 00 FF 
264c4     14 22 06 F1 | 	add	local03, ##1044
264c8     11 13 02 F6 | 	mov	arg01, local03
264cc     02 00 00 FF 
264d0     14 22 86 F1 | 	sub	local03, ##1044
264d4     10 15 02 F6 | 	mov	arg02, local02
264d8     07 16 06 F6 | 	mov	arg03, #7
264dc     B4 CC BF FD | 	call	#_fatfs_cc_f_open
264e0     FD 24 0A F6 | 	mov	local04, result1 wz
264e4     14 00 90 AD |  if_e	jmp	#LR__4010
264e8     11 13 02 F6 | 	mov	arg01, local03
264ec                 | '     return _gc_free(ptr);
264ec     C4 61 BF FD | 	call	#__system___gc_free
264f0                 | '     free(f);
264f0                 | '     return _set_dos_error(r);
264f0     12 13 02 F6 | 	mov	arg01, local04
264f4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0839
264f8     08 00 90 FD | 	jmp	#LR__4011
264fc                 | LR__4010
264fc     0F 23 62 FC | 	wrlong	local03, local01
26500                 | '   }
26500                 | '   fil->vfsdata = f;
26500                 | '   return 0;
26500     00 FA 05 F6 | 	mov	result1, #0
26504                 | LR__4011
26504     A7 F0 03 F6 | 	mov	ptra, fp
26508     B2 00 A0 FD | 	call	#popregs_
2650c                 | _fatfs_cc_v_creat_ret
2650c     2D 00 64 FD | 	ret
26510                 | 
26510                 | _fatfs_cc_v_close
26510     02 4A 05 F6 | 	mov	COUNT_, #2
26514     A8 00 A0 FD | 	call	#pushregs_
26518     09 1F 02 FB | 	rdlong	local01, arg01
2651c     02 00 00 FF 
26520     14 1E 06 F1 | 	add	local01, ##1044
26524     0F 13 02 F6 | 	mov	arg01, local01
26528     02 00 00 FF 
2652c     14 1E 86 F1 | 	sub	local01, ##1044
26530     DC E3 BF FD | 	call	#_fatfs_cc_f_close
26534     FD 20 02 F6 | 	mov	local02, result1
26538     0F 13 02 F6 | 	mov	arg01, local01
2653c                 | '     return _gc_free(ptr);
2653c     74 61 BF FD | 	call	#__system___gc_free
26540                 | '     FAT_FIL *f = fil->vfsdata;
26540                 | '     r=f_close(&f->fil);
26540                 | '     free(f);
26540                 | '     return _set_dos_error(r);
26540     10 13 02 F6 | 	mov	arg01, local02
26544     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26548     A7 F0 03 F6 | 	mov	ptra, fp
2654c     B2 00 A0 FD | 	call	#popregs_
26550                 | _fatfs_cc_v_close_ret
26550     2D 00 64 FD | 	ret
26554                 | 
26554                 | _fatfs_cc_v_opendir
26554     04 4A 05 F6 | 	mov	COUNT_, #4
26558     A8 00 A0 FD | 	call	#pushregs_
2655c     09 1F 02 F6 | 	mov	local01, arg01
26560     0A 21 02 F6 | 	mov	local02, arg02
26564     30 12 06 F6 | 	mov	arg01, #48
26568                 | '     return _gc_alloc(size);
26568     10 14 06 F6 | 	mov	arg02, #16
2656c     38 60 BF FD | 	call	#__system___gc_doalloc
26570     FD 22 0A F6 | 	mov	local03, result1 wz
26574                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26574                 | '       return _seterror( 7 );
26574     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26578     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2657c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26580     01 FA 65 A6 |  if_e	neg	result1, #1
26584     34 00 90 AD |  if_e	jmp	#LR__4021
26588     10 15 02 F6 | 	mov	arg02, local02
2658c     11 13 02 F6 | 	mov	arg01, local03
26590     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
26594     FD 24 0A F6 | 	mov	local04, result1 wz
26598     14 00 90 AD |  if_e	jmp	#LR__4020
2659c     11 13 02 F6 | 	mov	arg01, local03
265a0                 | '     return _gc_free(ptr);
265a0     10 61 BF FD | 	call	#__system___gc_free
265a4                 | '         free(f);
265a4                 | '         return _set_dos_error(r);
265a4     12 13 02 F6 | 	mov	arg01, local04
265a8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0839
265ac     0C 00 90 FD | 	jmp	#LR__4021
265b0                 | LR__4020
265b0     04 1E 06 F1 | 	add	local01, #4
265b4     0F 23 62 FC | 	wrlong	local03, local01
265b8                 | '     }
265b8                 | '     dir->vfsdata = f;
265b8                 | '     return 0;
265b8     00 FA 05 F6 | 	mov	result1, #0
265bc                 | LR__4021
265bc     A7 F0 03 F6 | 	mov	ptra, fp
265c0     B2 00 A0 FD | 	call	#popregs_
265c4                 | _fatfs_cc_v_opendir_ret
265c4     2D 00 64 FD | 	ret
265c8                 | 
265c8                 | _fatfs_cc_v_closedir
265c8     02 4A 05 F6 | 	mov	COUNT_, #2
265cc     A8 00 A0 FD | 	call	#pushregs_
265d0     04 12 06 F1 | 	add	arg01, #4
265d4     09 1F 02 FB | 	rdlong	local01, arg01
265d8     0F 13 02 F6 | 	mov	arg01, local01
265dc     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
265e0     FD 20 02 F6 | 	mov	local02, result1
265e4     0F 13 02 F6 | 	mov	arg01, local01
265e8                 | '     return _gc_free(ptr);
265e8     C8 60 BF FD | 	call	#__system___gc_free
265ec     00 20 0E F2 | 	cmp	local02, #0 wz
265f0     10 13 02 56 |  if_ne	mov	arg01, local02
265f4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0839
265f8                 | '     return r;
265f8     10 FB 01 F6 | 	mov	result1, local02
265fc     A7 F0 03 F6 | 	mov	ptra, fp
26600     B2 00 A0 FD | 	call	#popregs_
26604                 | _fatfs_cc_v_closedir_ret
26604     2D 00 64 FD | 	ret
26608                 | 
26608                 | _fatfs_cc_v_readdir
26608     01 4A 05 F6 | 	mov	COUNT_, #1
2660c     A8 00 A0 FD | 	call	#pushregs_
26610     2C F1 07 F1 | 	add	ptra, #300
26614     04 4E 05 F1 | 	add	fp, #4
26618     A7 12 62 FC | 	wrlong	arg01, fp
2661c     04 4E 05 F1 | 	add	fp, #4
26620     A7 14 62 FC | 	wrlong	arg02, fp
26624     04 4E 85 F1 | 	sub	fp, #4
26628     A7 16 02 FB | 	rdlong	arg03, fp
2662c     04 16 06 F1 | 	add	arg03, #4
26630     0B 13 02 FB | 	rdlong	arg01, arg03
26634     08 4E 05 F1 | 	add	fp, #8
26638     A7 14 02 F6 | 	mov	arg02, fp
2663c     0C 4E 85 F1 | 	sub	fp, #12
26640     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
26644     28 4F 05 F1 | 	add	fp, #296
26648     A7 FA 61 FC | 	wrlong	result1, fp
2664c     28 4F 85 F1 | 	sub	fp, #296
26650     00 FA 0D F2 | 	cmp	result1, #0 wz
26654     14 00 90 AD |  if_e	jmp	#LR__4030
26658                 | '         return _set_dos_error(r);
26658     28 4F 05 F1 | 	add	fp, #296
2665c     A7 12 02 FB | 	rdlong	arg01, fp
26660     28 4F 85 F1 | 	sub	fp, #296
26664     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26668     C4 00 90 FD | 	jmp	#LR__4033
2666c                 | LR__4030
2666c     28 4E 05 F1 | 	add	fp, #40
26670     A7 16 CA FA | 	rdbyte	arg03, fp wz
26674     28 4E 85 F1 | 	sub	fp, #40
26678                 | '         return -1;
26678     01 FA 65 A6 |  if_e	neg	result1, #1
2667c     B0 00 90 AD |  if_e	jmp	#LR__4033
26680     08 4E 05 F1 | 	add	fp, #8
26684     A7 12 02 FB | 	rdlong	arg01, fp
26688     20 4E 05 F1 | 	add	fp, #32
2668c     A7 14 02 F6 | 	mov	arg02, fp
26690     28 4E 85 F1 | 	sub	fp, #40
26694     3F 16 06 F6 | 	mov	arg03, #63
26698     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2669c     08 4E 05 F1 | 	add	fp, #8
266a0     A7 16 02 FB | 	rdlong	arg03, fp
266a4     3F 16 06 F1 | 	add	arg03, #63
266a8     0B 01 48 FC | 	wrbyte	#0, arg03
266ac     0C 4E 05 F1 | 	add	fp, #12
266b0     A7 16 C2 FA | 	rdbyte	arg03, fp
266b4     14 4E 85 F1 | 	sub	fp, #20
266b8     10 16 CE F7 | 	test	arg03, #16 wz
266bc     18 00 90 AD |  if_e	jmp	#LR__4031
266c0     08 4E 05 F1 | 	add	fp, #8
266c4     A7 16 02 FB | 	rdlong	arg03, fp
266c8     08 4E 85 F1 | 	sub	fp, #8
266cc     50 16 06 F1 | 	add	arg03, #80
266d0     0B 03 48 FC | 	wrbyte	#1, arg03
266d4     14 00 90 FD | 	jmp	#LR__4032
266d8                 | LR__4031
266d8     08 4E 05 F1 | 	add	fp, #8
266dc     A7 16 02 FB | 	rdlong	arg03, fp
266e0     08 4E 85 F1 | 	sub	fp, #8
266e4     50 16 06 F1 | 	add	arg03, #80
266e8     0B 01 48 FC | 	wrbyte	#0, arg03
266ec                 | LR__4032
266ec     08 4E 05 F1 | 	add	fp, #8
266f0     A7 16 02 FB | 	rdlong	arg03, fp
266f4     04 4E 05 F1 | 	add	fp, #4
266f8     A7 14 02 FB | 	rdlong	arg02, fp
266fc     48 16 06 F1 | 	add	arg03, #72
26700     0B 15 62 FC | 	wrlong	arg02, arg03
26704     04 4E 85 F1 | 	sub	fp, #4
26708     A7 1E 02 FB | 	rdlong	local01, fp
2670c     08 4E 05 F1 | 	add	fp, #8
26710     A7 12 E2 FA | 	rdword	arg01, fp
26714     02 4E 05 F1 | 	add	fp, #2
26718     A7 14 E2 FA | 	rdword	arg02, fp
2671c     12 4E 85 F1 | 	sub	fp, #18
26720     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0837
26724     4C 1E 06 F1 | 	add	local01, #76
26728     0F FB 61 FC | 	wrlong	result1, local01
2672c                 | '         ent->d_type =  (0) ;
2672c                 | '     }
2672c                 | '     ent->d_size = finfo.fsize;
2672c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2672c                 | '     return 0;
2672c     00 FA 05 F6 | 	mov	result1, #0
26730                 | LR__4033
26730     A7 F0 03 F6 | 	mov	ptra, fp
26734     B2 00 A0 FD | 	call	#popregs_
26738                 | _fatfs_cc_v_readdir_ret
26738     2D 00 64 FD | 	ret
2673c                 | 
2673c                 | _fatfs_cc_v_stat
2673c     03 4A 05 F6 | 	mov	COUNT_, #3
26740     A8 00 A0 FD | 	call	#pushregs_
26744     30 F1 07 F1 | 	add	ptra, #304
26748     04 4E 05 F1 | 	add	fp, #4
2674c     A7 12 62 FC | 	wrlong	arg01, fp
26750     04 4E 05 F1 | 	add	fp, #4
26754     A7 14 62 FC | 	wrlong	arg02, fp
26758     08 4E 85 F1 | 	sub	fp, #8
2675c     0A 13 02 F6 | 	mov	arg01, arg02
26760     00 14 06 F6 | 	mov	arg02, #0
26764     30 16 06 F6 | 	mov	arg03, #48
26768     98 00 A0 FD | 	call	#\builtin_bytefill_
2676c     04 4E 05 F1 | 	add	fp, #4
26770     A7 FA 01 FB | 	rdlong	result1, fp
26774     04 4E 85 F1 | 	sub	fp, #4
26778     FD FA C9 FA | 	rdbyte	result1, result1 wz
2677c     2C 00 90 AD |  if_e	jmp	#LR__4040
26780     04 4E 05 F1 | 	add	fp, #4
26784     A7 FA 01 FB | 	rdlong	result1, fp
26788     04 4E 85 F1 | 	sub	fp, #4
2678c     FD FA C1 FA | 	rdbyte	result1, result1
26790     2E FA 0D F2 | 	cmp	result1, #46 wz
26794     04 4E 05 A1 |  if_e	add	fp, #4
26798     A7 1E 02 AB |  if_e	rdlong	local01, fp
2679c     04 4E 85 A1 |  if_e	sub	fp, #4
267a0     01 1E 06 A1 |  if_e	add	local01, #1
267a4     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
267a8     18 00 90 5D |  if_ne	jmp	#LR__4041
267ac                 | LR__4040
267ac     18 4E 05 F1 | 	add	fp, #24
267b0     A7 20 48 FC | 	wrbyte	#16, fp
267b4     0C 4E 85 F1 | 	sub	fp, #12
267b8     A7 00 68 FC | 	wrlong	#0, fp
267bc     0C 4E 85 F1 | 	sub	fp, #12
267c0     24 00 90 FD | 	jmp	#LR__4042
267c4                 | LR__4041
267c4     04 4E 05 F1 | 	add	fp, #4
267c8     A7 12 02 FB | 	rdlong	arg01, fp
267cc     0C 4E 05 F1 | 	add	fp, #12
267d0     A7 14 02 F6 | 	mov	arg02, fp
267d4     10 4E 85 F1 | 	sub	fp, #16
267d8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
267dc     0C 4E 05 F1 | 	add	fp, #12
267e0     A7 FA 61 FC | 	wrlong	result1, fp
267e4     0C 4E 85 F1 | 	sub	fp, #12
267e8                 | LR__4042
267e8     0C 4E 05 F1 | 	add	fp, #12
267ec     A7 20 0A FB | 	rdlong	local02, fp wz
267f0     0C 4E 85 F1 | 	sub	fp, #12
267f4     14 00 90 AD |  if_e	jmp	#LR__4043
267f8                 | '         return _set_dos_error(r);
267f8     0C 4E 05 F1 | 	add	fp, #12
267fc     A7 12 02 FB | 	rdlong	arg01, fp
26800     0C 4E 85 F1 | 	sub	fp, #12
26804     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26808     14 01 90 FD | 	jmp	#LR__4044
2680c                 | LR__4043
2680c     2C 4F 05 F1 | 	add	fp, #300
26810     A7 48 6A FC | 	wrlong	#292, fp
26814     14 4F 85 F1 | 	sub	fp, #276
26818     A7 22 C2 FA | 	rdbyte	local03, fp
2681c     18 4E 85 F1 | 	sub	fp, #24
26820     01 22 CE F7 | 	test	local03, #1 wz
26824     2C 4F 05 A1 |  if_e	add	fp, #300
26828     A7 22 02 AB |  if_e	rdlong	local03, fp
2682c     92 22 46 A5 |  if_e	or	local03, #146
26830     A7 22 62 AC |  if_e	wrlong	local03, fp
26834     2C 4F 85 A1 |  if_e	sub	fp, #300
26838     18 4E 05 F1 | 	add	fp, #24
2683c     A7 22 C2 FA | 	rdbyte	local03, fp
26840     18 4E 85 F1 | 	sub	fp, #24
26844     10 22 CE F7 | 	test	local03, #16 wz
26848     2C 4F 05 51 |  if_ne	add	fp, #300
2684c     A7 22 02 5B |  if_ne	rdlong	local03, fp
26850     08 00 00 5F 
26854     49 22 46 55 |  if_ne	or	local03, ##4169
26858     A7 22 62 5C |  if_ne	wrlong	local03, fp
2685c     2C 4F 85 51 |  if_ne	sub	fp, #300
26860     08 4E 05 F1 | 	add	fp, #8
26864     A7 22 02 FB | 	rdlong	local03, fp
26868     24 4F 05 F1 | 	add	fp, #292
2686c     A7 20 02 FB | 	rdlong	local02, fp
26870     08 22 06 F1 | 	add	local03, #8
26874     11 21 62 FC | 	wrlong	local02, local03
26878     24 4F 85 F1 | 	sub	fp, #292
2687c     A7 22 02 FB | 	rdlong	local03, fp
26880     0C 22 06 F1 | 	add	local03, #12
26884     11 03 68 FC | 	wrlong	#1, local03
26888     A7 22 02 FB | 	rdlong	local03, fp
2688c     08 4E 05 F1 | 	add	fp, #8
26890     A7 20 02 FB | 	rdlong	local02, fp
26894     18 22 06 F1 | 	add	local03, #24
26898     11 21 62 FC | 	wrlong	local02, local03
2689c     08 4E 85 F1 | 	sub	fp, #8
268a0     A7 22 02 FB | 	rdlong	local03, fp
268a4     1C 22 06 F1 | 	add	local03, #28
268a8     01 00 80 FF 
268ac     11 01 68 FC | 	wrlong	##512, local03
268b0     A7 20 02 FB | 	rdlong	local02, fp
268b4     10 23 02 F6 | 	mov	local03, local02
268b8     18 20 06 F1 | 	add	local02, #24
268bc     10 21 02 FB | 	rdlong	local02, local02
268c0     FF 21 06 F1 | 	add	local02, #511
268c4     10 21 52 F6 | 	abs	local02, local02 wc
268c8     09 20 46 F0 | 	shr	local02, #9
268cc     10 21 82 F6 | 	negc	local02, local02
268d0     20 22 06 F1 | 	add	local03, #32
268d4     11 21 62 FC | 	wrlong	local02, local03
268d8     A7 20 02 FB | 	rdlong	local02, fp
268dc     10 23 02 F6 | 	mov	local03, local02
268e0     10 1F 02 F6 | 	mov	local01, local02
268e4     0C 4E 05 F1 | 	add	fp, #12
268e8     A7 12 E2 FA | 	rdword	arg01, fp
268ec     02 4E 05 F1 | 	add	fp, #2
268f0     A7 14 E2 FA | 	rdword	arg02, fp
268f4     16 4E 85 F1 | 	sub	fp, #22
268f8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0837
268fc     2C 1E 06 F1 | 	add	local01, #44
26900     0F FB 61 FC | 	wrlong	result1, local01
26904     28 20 06 F1 | 	add	local02, #40
26908     10 FB 61 FC | 	wrlong	result1, local02
2690c     24 22 06 F1 | 	add	local03, #36
26910     11 FB 61 FC | 	wrlong	result1, local03
26914                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
26914                 | '     }
26914                 | '     buf->st_mode = mode;
26914                 | '     buf->st_nlink = 1;
26914                 | '     buf->st_size = finfo.fsize;
26914                 | '     buf->st_blksize = 512;
26914                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
26914                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
26914                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26914                 | '     return r;
26914     0C 4E 05 F1 | 	add	fp, #12
26918     A7 FA 01 FB | 	rdlong	result1, fp
2691c     0C 4E 85 F1 | 	sub	fp, #12
26920                 | LR__4044
26920     A7 F0 03 F6 | 	mov	ptra, fp
26924     B2 00 A0 FD | 	call	#popregs_
26928                 | _fatfs_cc_v_stat_ret
26928     2D 00 64 FD | 	ret
2692c                 | 
2692c                 | _fatfs_cc_v_read
2692c     00 4A 05 F6 | 	mov	COUNT_, #0
26930     A8 00 A0 FD | 	call	#pushregs_
26934     1C F0 07 F1 | 	add	ptra, #28
26938     04 4E 05 F1 | 	add	fp, #4
2693c     A7 12 62 FC | 	wrlong	arg01, fp
26940     04 4E 05 F1 | 	add	fp, #4
26944     A7 14 62 FC | 	wrlong	arg02, fp
26948     04 4E 05 F1 | 	add	fp, #4
2694c     A7 16 62 FC | 	wrlong	arg03, fp
26950     08 4E 85 F1 | 	sub	fp, #8
26954     A7 12 02 FB | 	rdlong	arg01, fp
26958     09 13 0A FB | 	rdlong	arg01, arg01 wz
2695c     0C 4E 05 F1 | 	add	fp, #12
26960     A7 12 62 FC | 	wrlong	arg01, fp
26964     10 4E 85 F1 | 	sub	fp, #16
26968                 | '         return _seterror( 5 );
26968     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2696c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26970     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26974     01 FA 65 A6 |  if_e	neg	result1, #1
26978     B8 00 90 AD |  if_e	jmp	#LR__4052
2697c     10 4E 05 F1 | 	add	fp, #16
26980     A7 12 02 FB | 	rdlong	arg01, fp
26984     02 00 00 FF 
26988     14 12 06 F1 | 	add	arg01, ##1044
2698c     08 4E 85 F1 | 	sub	fp, #8
26990     A7 14 02 FB | 	rdlong	arg02, fp
26994     04 4E 05 F1 | 	add	fp, #4
26998     A7 16 02 FB | 	rdlong	arg03, fp
2699c     0C 4E 05 F1 | 	add	fp, #12
269a0     A7 18 02 F6 | 	mov	arg04, fp
269a4     18 4E 85 F1 | 	sub	fp, #24
269a8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
269ac     14 4E 05 F1 | 	add	fp, #20
269b0     A7 FA 61 FC | 	wrlong	result1, fp
269b4     14 4E 85 F1 | 	sub	fp, #20
269b8     00 FA 0D F2 | 	cmp	result1, #0 wz
269bc     34 00 90 AD |  if_e	jmp	#LR__4050
269c0     04 4E 05 F1 | 	add	fp, #4
269c4     A7 18 02 FB | 	rdlong	arg04, fp
269c8     0C 17 02 F6 | 	mov	arg03, arg04
269cc     08 18 06 F1 | 	add	arg04, #8
269d0     0C 19 02 FB | 	rdlong	arg04, arg04
269d4     20 18 46 F5 | 	or	arg04, #32
269d8     08 16 06 F1 | 	add	arg03, #8
269dc     0B 19 62 FC | 	wrlong	arg04, arg03
269e0                 | '         fil->state |=  (0x20) ;
269e0                 | '         return _set_dos_error(r);
269e0     10 4E 05 F1 | 	add	fp, #16
269e4     A7 12 02 FB | 	rdlong	arg01, fp
269e8     14 4E 85 F1 | 	sub	fp, #20
269ec     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
269f0     40 00 90 FD | 	jmp	#LR__4052
269f4                 | LR__4050
269f4     18 4E 05 F1 | 	add	fp, #24
269f8     A7 FA 09 FB | 	rdlong	result1, fp wz
269fc     18 4E 85 F1 | 	sub	fp, #24
26a00     24 00 90 5D |  if_ne	jmp	#LR__4051
26a04     04 4E 05 F1 | 	add	fp, #4
26a08     A7 FA 01 FB | 	rdlong	result1, fp
26a0c     FD 18 02 F6 | 	mov	arg04, result1
26a10     04 4E 85 F1 | 	sub	fp, #4
26a14     08 FA 05 F1 | 	add	result1, #8
26a18     FD FA 01 FB | 	rdlong	result1, result1
26a1c     10 FA 45 F5 | 	or	result1, #16
26a20     08 18 06 F1 | 	add	arg04, #8
26a24     0C FB 61 FC | 	wrlong	result1, arg04
26a28                 | LR__4051
26a28                 | '         fil->state |=  (0x10) ;
26a28                 | '     }
26a28                 | '     return x;
26a28     18 4E 05 F1 | 	add	fp, #24
26a2c     A7 FA 01 FB | 	rdlong	result1, fp
26a30     18 4E 85 F1 | 	sub	fp, #24
26a34                 | LR__4052
26a34     A7 F0 03 F6 | 	mov	ptra, fp
26a38     B2 00 A0 FD | 	call	#popregs_
26a3c                 | _fatfs_cc_v_read_ret
26a3c     2D 00 64 FD | 	ret
26a40                 | 
26a40                 | _fatfs_cc_v_write
26a40     00 4A 05 F6 | 	mov	COUNT_, #0
26a44     A8 00 A0 FD | 	call	#pushregs_
26a48     1C F0 07 F1 | 	add	ptra, #28
26a4c     04 4E 05 F1 | 	add	fp, #4
26a50     A7 12 62 FC | 	wrlong	arg01, fp
26a54     04 4E 05 F1 | 	add	fp, #4
26a58     A7 14 62 FC | 	wrlong	arg02, fp
26a5c     04 4E 05 F1 | 	add	fp, #4
26a60     A7 16 62 FC | 	wrlong	arg03, fp
26a64     08 4E 85 F1 | 	sub	fp, #8
26a68     A7 12 02 FB | 	rdlong	arg01, fp
26a6c     09 13 0A FB | 	rdlong	arg01, arg01 wz
26a70     0C 4E 05 F1 | 	add	fp, #12
26a74     A7 12 62 FC | 	wrlong	arg01, fp
26a78     10 4E 85 F1 | 	sub	fp, #16
26a7c                 | '         return _seterror( 5 );
26a7c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26a80     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26a84     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a88     01 FA 65 A6 |  if_e	neg	result1, #1
26a8c     84 00 90 AD |  if_e	jmp	#LR__4061
26a90     10 4E 05 F1 | 	add	fp, #16
26a94     A7 12 02 FB | 	rdlong	arg01, fp
26a98     02 00 00 FF 
26a9c     14 12 06 F1 | 	add	arg01, ##1044
26aa0     08 4E 85 F1 | 	sub	fp, #8
26aa4     A7 14 02 FB | 	rdlong	arg02, fp
26aa8     04 4E 05 F1 | 	add	fp, #4
26aac     A7 16 02 FB | 	rdlong	arg03, fp
26ab0     0C 4E 05 F1 | 	add	fp, #12
26ab4     A7 18 02 F6 | 	mov	arg04, fp
26ab8     18 4E 85 F1 | 	sub	fp, #24
26abc     4C D4 BF FD | 	call	#_fatfs_cc_f_write
26ac0     14 4E 05 F1 | 	add	fp, #20
26ac4     A7 FA 61 FC | 	wrlong	result1, fp
26ac8     14 4E 85 F1 | 	sub	fp, #20
26acc     00 FA 0D F2 | 	cmp	result1, #0 wz
26ad0     34 00 90 AD |  if_e	jmp	#LR__4060
26ad4     04 4E 05 F1 | 	add	fp, #4
26ad8     A7 18 02 FB | 	rdlong	arg04, fp
26adc     0C 17 02 F6 | 	mov	arg03, arg04
26ae0     08 18 06 F1 | 	add	arg04, #8
26ae4     0C 19 02 FB | 	rdlong	arg04, arg04
26ae8     20 18 46 F5 | 	or	arg04, #32
26aec     08 16 06 F1 | 	add	arg03, #8
26af0     0B 19 62 FC | 	wrlong	arg04, arg03
26af4                 | '         fil->state |=  (0x20) ;
26af4                 | '         return _set_dos_error(r);
26af4     10 4E 05 F1 | 	add	fp, #16
26af8     A7 12 02 FB | 	rdlong	arg01, fp
26afc     14 4E 85 F1 | 	sub	fp, #20
26b00     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26b04     0C 00 90 FD | 	jmp	#LR__4061
26b08                 | LR__4060
26b08                 | '     }
26b08                 | '     return x;
26b08     18 4E 05 F1 | 	add	fp, #24
26b0c     A7 FA 01 FB | 	rdlong	result1, fp
26b10     18 4E 85 F1 | 	sub	fp, #24
26b14                 | LR__4061
26b14     A7 F0 03 F6 | 	mov	ptra, fp
26b18     B2 00 A0 FD | 	call	#popregs_
26b1c                 | _fatfs_cc_v_write_ret
26b1c     2D 00 64 FD | 	ret
26b20                 | 
26b20                 | _fatfs_cc_v_lseek
26b20     04 4A 05 F6 | 	mov	COUNT_, #4
26b24     A8 00 A0 FD | 	call	#pushregs_
26b28     0A 1F 02 F6 | 	mov	local01, arg02
26b2c     0B 21 02 F6 | 	mov	local02, arg03
26b30     09 23 02 FB | 	rdlong	local03, arg01
26b34     02 00 00 FF 
26b38     14 22 0E F1 | 	add	local03, ##1044 wz
26b3c                 | '         return _seterror( 5 );
26b3c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26b40     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26b44     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b48     01 FA 65 A6 |  if_e	neg	result1, #1
26b4c     4C 00 90 AD |  if_e	jmp	#LR__4072
26b50     00 20 0E F2 | 	cmp	local02, #0 wz
26b54     24 00 90 AD |  if_e	jmp	#LR__4070
26b58     01 20 0E F2 | 	cmp	local02, #1 wz
26b5c     14 22 06 A1 |  if_e	add	local03, #20
26b60     11 25 02 AB |  if_e	rdlong	local04, local03
26b64     14 22 86 A1 |  if_e	sub	local03, #20
26b68     12 1F 02 A1 |  if_e	add	local01, local04
26b6c     0C 22 06 51 |  if_ne	add	local03, #12
26b70     11 25 02 5B |  if_ne	rdlong	local04, local03
26b74     0C 22 86 51 |  if_ne	sub	local03, #12
26b78     12 1F 02 51 |  if_ne	add	local01, local04
26b7c                 | LR__4070
26b7c     0F 15 02 F6 | 	mov	arg02, local01
26b80     11 13 02 F6 | 	mov	arg01, local03
26b84     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
26b88     FD 12 0A F6 | 	mov	arg01, result1 wz
26b8c     08 00 90 AD |  if_e	jmp	#LR__4071
26b90                 | '         return _set_dos_error(result);
26b90     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26b94     04 00 90 FD | 	jmp	#LR__4072
26b98                 | LR__4071
26b98                 | '     }
26b98                 | '     return offset;
26b98     0F FB 01 F6 | 	mov	result1, local01
26b9c                 | LR__4072
26b9c     A7 F0 03 F6 | 	mov	ptra, fp
26ba0     B2 00 A0 FD | 	call	#popregs_
26ba4                 | _fatfs_cc_v_lseek_ret
26ba4     2D 00 64 FD | 	ret
26ba8                 | 
26ba8                 | _fatfs_cc_v_ioctl
26ba8                 | ' {
26ba8                 | '     return _seterror( 10 );
26ba8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
26bac     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
26bb0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
26bb4     01 FA 65 F6 | 	neg	result1, #1
26bb8                 | _fatfs_cc_v_ioctl_ret
26bb8     2D 00 64 FD | 	ret
26bbc                 | 
26bbc                 | _fatfs_cc_v_mkdir
26bbc     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
26bc0     FD 12 02 F6 | 	mov	arg01, result1
26bc4                 | ' 
26bc4                 | '     r = f_mkdir(name);
26bc4                 | '     return _set_dos_error(r);
26bc4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26bc8                 | _fatfs_cc_v_mkdir_ret
26bc8     2D 00 64 FD | 	ret
26bcc                 | 
26bcc                 | _fatfs_cc_v_remove
26bcc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
26bd0     FD 12 02 F6 | 	mov	arg01, result1
26bd4                 | ' 
26bd4                 | '     r = f_unlink(name);
26bd4                 | '     return _set_dos_error(r);
26bd4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26bd8                 | _fatfs_cc_v_remove_ret
26bd8     2D 00 64 FD | 	ret
26bdc                 | 
26bdc                 | _fatfs_cc_v_rmdir
26bdc     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
26be0     FD 12 02 F6 | 	mov	arg01, result1
26be4                 | ' 
26be4                 | '     r = f_unlink(name);
26be4                 | '     return _set_dos_error(r);
26be4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26be8                 | _fatfs_cc_v_rmdir_ret
26be8     2D 00 64 FD | 	ret
26bec                 | 
26bec                 | _fatfs_cc_v_rename
26bec     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
26bf0     FD 12 02 F6 | 	mov	arg01, result1
26bf4                 | '     return _set_dos_error(r);
26bf4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26bf8                 | _fatfs_cc_v_rename_ret
26bf8     2D 00 64 FD | 	ret
26bfc                 | 
26bfc                 | _fatfs_cc_v_open
26bfc     07 4A 05 F6 | 	mov	COUNT_, #7
26c00     A8 00 A0 FD | 	call	#pushregs_
26c04     09 1F 02 F6 | 	mov	local01, arg01
26c08     0A 21 02 F6 | 	mov	local02, arg02
26c0c     0B 23 02 F6 | 	mov	local03, arg03
26c10     03 00 00 FF 
26c14     3C 12 06 F6 | 	mov	arg01, ##1596
26c18                 | '     return _gc_alloc(size);
26c18     10 14 06 F6 | 	mov	arg02, #16
26c1c     88 59 BF FD | 	call	#__system___gc_doalloc
26c20     FD 24 0A F6 | 	mov	local04, result1 wz
26c24                 | '       return _seterror( 7 );
26c24     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26c28     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26c2c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c30     01 FA 65 A6 |  if_e	neg	result1, #1
26c34     98 00 90 AD |  if_e	jmp	#LR__4086
26c38     12 13 02 F6 | 	mov	arg01, local04
26c3c     00 14 06 F6 | 	mov	arg02, #0
26c40     03 00 00 FF 
26c44     3C 16 06 F6 | 	mov	arg03, ##1596
26c48     98 00 A0 FD | 	call	#\builtin_bytefill_
26c4c                 | '   switch (flags & 3) {
26c4c     11 27 02 F6 | 	mov	local05, local03
26c50     03 26 0E F5 | 	and	local05, #3 wz
26c54     0C 00 90 AD |  if_e	jmp	#LR__4080
26c58     01 26 0E F2 | 	cmp	local05, #1 wz
26c5c     0C 00 90 AD |  if_e	jmp	#LR__4081
26c60     10 00 90 FD | 	jmp	#LR__4082
26c64                 | LR__4080
26c64     01 28 06 F6 | 	mov	local06, #1
26c68                 | '       fs_flags =  0x01 ;
26c68                 | '       break;
26c68     0C 00 90 FD | 	jmp	#LR__4083
26c6c                 | LR__4081
26c6c     02 28 06 F6 | 	mov	local06, #2
26c70                 | '       fs_flags =  0x02 ;
26c70                 | '       break;
26c70     04 00 90 FD | 	jmp	#LR__4083
26c74                 | LR__4082
26c74     03 28 06 F6 | 	mov	local06, #3
26c78                 | '       fs_flags =  0x01  |  0x02 ;
26c78                 | '       break;
26c78                 | LR__4083
26c78     08 22 CE F7 | 	test	local03, #8 wz
26c7c     18 28 46 55 |  if_ne	or	local06, #24
26c80     08 00 90 5D |  if_ne	jmp	#LR__4084
26c84     20 22 CE F7 | 	test	local03, #32 wz
26c88     30 28 46 55 |  if_ne	or	local06, #48
26c8c                 | LR__4084
26c8c     02 00 00 FF 
26c90     14 24 06 F1 | 	add	local04, ##1044
26c94     12 13 02 F6 | 	mov	arg01, local04
26c98     02 00 00 FF 
26c9c     14 24 86 F1 | 	sub	local04, ##1044
26ca0     10 15 02 F6 | 	mov	arg02, local02
26ca4     14 17 02 F6 | 	mov	arg03, local06
26ca8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
26cac     FD 2A 0A F6 | 	mov	local07, result1 wz
26cb0     14 00 90 AD |  if_e	jmp	#LR__4085
26cb4     12 13 02 F6 | 	mov	arg01, local04
26cb8                 | '     return _gc_free(ptr);
26cb8     F8 59 BF FD | 	call	#__system___gc_free
26cbc                 | '     free(f);
26cbc                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26cbc                 | '     return _set_dos_error(r);
26cbc     15 13 02 F6 | 	mov	arg01, local07
26cc0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26cc4     08 00 90 FD | 	jmp	#LR__4086
26cc8                 | LR__4085
26cc8     0F 25 62 FC | 	wrlong	local04, local01
26ccc                 | '   }
26ccc                 | '   fil->vfsdata = f;
26ccc                 | '   return 0;
26ccc     00 FA 05 F6 | 	mov	result1, #0
26cd0                 | LR__4086
26cd0     A7 F0 03 F6 | 	mov	ptra, fp
26cd4     B2 00 A0 FD | 	call	#popregs_
26cd8                 | _fatfs_cc_v_open_ret
26cd8     2D 00 64 FD | 	ret
26cdc                 | 
26cdc                 | _fatfs_cc_v_flush
26cdc     09 13 02 FB | 	rdlong	arg01, arg01
26ce0     02 00 00 FF 
26ce4     14 12 0E F1 | 	add	arg01, ##1044 wz
26ce8                 | '         return _seterror( 5 );
26ce8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
26cec     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26cf0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
26cf4     01 FA 65 A6 |  if_e	neg	result1, #1
26cf8     0C 00 90 AD |  if_e	jmp	#LR__4090
26cfc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
26d00     FD 12 02 F6 | 	mov	arg01, result1
26d04                 | '     }
26d04                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26d04                 | '     result = f_sync(f);
26d04                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26d04                 | '     return _set_dos_error(result);
26d04     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0839
26d08                 | LR__4090
26d08                 | _fatfs_cc_v_flush_ret
26d08     2D 00 64 FD | 	ret
26d0c                 | 
26d0c                 | _fatfs_cc_v_init
26d0c                 | ' {
26d0c                 | '     return 0;
26d0c     00 FA 05 F6 | 	mov	result1, #0
26d10                 | _fatfs_cc_v_init_ret
26d10     2D 00 64 FD | 	ret
26d14                 | 
26d14                 | _fatfs_cc_v_deinit
26d14     3E 01 00 FF 
26d18     7C 14 06 F6 | 	mov	arg02, ##@LR__4286
26d1c     00 12 06 F6 | 	mov	arg01, #0
26d20     00 16 06 F6 | 	mov	arg03, #0
26d24     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
26d28     01 00 00 FF 
26d2c     08 E4 05 F1 | 	add	objptr, ##520
26d30     F2 12 02 FB | 	rdlong	arg01, objptr
26d34     04 E4 05 F1 | 	add	objptr, #4
26d38     F2 14 02 FB | 	rdlong	arg02, objptr
26d3c     01 00 00 FF 
26d40     0C E4 85 F1 | 	sub	objptr, ##524
26d44     38 41 BF FD | 	call	#__system___freepins
26d48                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
26d48                 | '     _freepins(f_pinmask);
26d48                 | '     return 0;
26d48     00 FA 05 F6 | 	mov	result1, #0
26d4c                 | _fatfs_cc_v_deinit_ret
26d4c     2D 00 64 FD | 	ret
26d50                 | 
26d50                 | _fatfs_cc_get_vfs
26d50     01 4A 05 F6 | 	mov	COUNT_, #1
26d54     A8 00 A0 FD | 	call	#pushregs_
26d58     09 1F 02 F6 | 	mov	local01, arg01
26d5c     50 12 06 F6 | 	mov	arg01, #80
26d60     14 58 BF FD | 	call	#__system___gc_alloc_managed
26d64     FD 12 02 F6 | 	mov	arg01, result1
26d68     F2 FA 01 F6 | 	mov	result1, objptr
26d6c     00 60 03 FF 
26d70     00 FA 45 F5 | 	or	result1, ##113246208
26d74     09 FB 61 FC | 	wrlong	result1, arg01
26d78     F2 FA 01 F6 | 	mov	result1, objptr
26d7c     00 68 03 FF 
26d80     00 FA 45 F5 | 	or	result1, ##114294784
26d84     04 12 06 F1 | 	add	arg01, #4
26d88     09 FB 61 FC | 	wrlong	result1, arg01
26d8c     F2 FA 01 F6 | 	mov	result1, objptr
26d90     00 70 03 FF 
26d94     00 FA 45 F5 | 	or	result1, ##115343360
26d98     04 12 06 F1 | 	add	arg01, #4
26d9c     09 FB 61 FC | 	wrlong	result1, arg01
26da0     F2 FA 01 F6 | 	mov	result1, objptr
26da4     00 78 03 FF 
26da8     00 FA 45 F5 | 	or	result1, ##116391936
26dac     04 12 06 F1 | 	add	arg01, #4
26db0     09 FB 61 FC | 	wrlong	result1, arg01
26db4     F2 FA 01 F6 | 	mov	result1, objptr
26db8     58 FA 25 F4 | 	bith	result1, #88
26dbc     04 12 06 F1 | 	add	arg01, #4
26dc0     09 FB 61 FC | 	wrlong	result1, arg01
26dc4     04 12 06 F1 | 	add	arg01, #4
26dc8     09 01 68 FC | 	wrlong	#0, arg01
26dcc     04 12 06 F1 | 	add	arg01, #4
26dd0     09 1F 62 FC | 	wrlong	local01, arg01
26dd4     04 12 06 F1 | 	add	arg01, #4
26dd8     09 01 68 FC | 	wrlong	#0, arg01
26ddc     F2 FA 01 F6 | 	mov	result1, objptr
26de0     00 88 03 FF 
26de4     00 FA 45 F5 | 	or	result1, ##118489088
26de8     04 12 06 F1 | 	add	arg01, #4
26dec     09 FB 61 FC | 	wrlong	result1, arg01
26df0     F2 FA 01 F6 | 	mov	result1, objptr
26df4     00 90 03 FF 
26df8     00 FA 45 F5 | 	or	result1, ##119537664
26dfc     04 12 06 F1 | 	add	arg01, #4
26e00     09 FB 61 FC | 	wrlong	result1, arg01
26e04     F2 FA 01 F6 | 	mov	result1, objptr
26e08     00 98 03 FF 
26e0c     00 FA 45 F5 | 	or	result1, ##120586240
26e10     04 12 06 F1 | 	add	arg01, #4
26e14     09 FB 61 FC | 	wrlong	result1, arg01
26e18     F2 FA 01 F6 | 	mov	result1, objptr
26e1c     00 A0 03 FF 
26e20     00 FA 45 F5 | 	or	result1, ##121634816
26e24     04 12 06 F1 | 	add	arg01, #4
26e28     09 FB 61 FC | 	wrlong	result1, arg01
26e2c     F2 FA 01 F6 | 	mov	result1, objptr
26e30     00 A8 03 FF 
26e34     00 FA 45 F5 | 	or	result1, ##122683392
26e38     04 12 06 F1 | 	add	arg01, #4
26e3c     09 FB 61 FC | 	wrlong	result1, arg01
26e40     F2 FA 01 F6 | 	mov	result1, objptr
26e44     00 B0 03 FF 
26e48     00 FA 45 F5 | 	or	result1, ##123731968
26e4c     04 12 06 F1 | 	add	arg01, #4
26e50     09 FB 61 FC | 	wrlong	result1, arg01
26e54     F2 FA 01 F6 | 	mov	result1, objptr
26e58     00 B8 03 FF 
26e5c     00 FA 45 F5 | 	or	result1, ##124780544
26e60     04 12 06 F1 | 	add	arg01, #4
26e64     09 FB 61 FC | 	wrlong	result1, arg01
26e68     F2 FA 01 F6 | 	mov	result1, objptr
26e6c     77 FA 25 F4 | 	bith	result1, #119
26e70     04 12 06 F1 | 	add	arg01, #4
26e74     09 FB 61 FC | 	wrlong	result1, arg01
26e78     F2 FA 01 F6 | 	mov	result1, objptr
26e7c     00 C8 03 FF 
26e80     00 FA 45 F5 | 	or	result1, ##126877696
26e84     04 12 06 F1 | 	add	arg01, #4
26e88     09 FB 61 FC | 	wrlong	result1, arg01
26e8c     F2 FA 01 F6 | 	mov	result1, objptr
26e90     00 D0 03 FF 
26e94     00 FA 45 F5 | 	or	result1, ##127926272
26e98     04 12 06 F1 | 	add	arg01, #4
26e9c     09 FB 61 FC | 	wrlong	result1, arg01
26ea0     F2 FA 01 F6 | 	mov	result1, objptr
26ea4     00 D8 03 FF 
26ea8     00 FA 45 F5 | 	or	result1, ##128974848
26eac     04 12 06 F1 | 	add	arg01, #4
26eb0     09 FB 61 FC | 	wrlong	result1, arg01
26eb4     F2 FA 01 F6 | 	mov	result1, objptr
26eb8     96 FA 25 F4 | 	bith	result1, #150
26ebc     04 12 06 F1 | 	add	arg01, #4
26ec0     09 FB 61 FC | 	wrlong	result1, arg01
26ec4     4C 12 86 F1 | 	sub	arg01, #76
26ec8                 | ' 
26ec8                 | '     v->close = &v_close;
26ec8                 | '     v->read = &v_read;
26ec8                 | '     v->write = &v_write;
26ec8                 | '     v->lseek = &v_lseek;
26ec8                 | '     v->ioctl = &v_ioctl;
26ec8                 | '     v->flush = 0;
26ec8                 | '     v->vfs_data = ptr;
26ec8                 | '     v->reserved = 0;
26ec8                 | ' 
26ec8                 | '     v->open = &v_open;
26ec8                 | '     v->creat = &v_creat;
26ec8                 | '     v->opendir = &v_opendir;
26ec8                 | '     v->closedir = &v_closedir;
26ec8                 | '     v->readdir = &v_readdir;
26ec8                 | '     v->stat = &v_stat;
26ec8                 | ' 
26ec8                 | '     v->mkdir = &v_mkdir;
26ec8                 | '     v->rmdir = &v_rmdir;
26ec8                 | ' 
26ec8                 | '     v->remove = &v_remove;
26ec8                 | '     v->rename = &v_rename;
26ec8                 | ' 
26ec8                 | '     v->init = &v_init;
26ec8                 | '     v->deinit = &v_deinit;
26ec8                 | ' 
26ec8                 | '     return v;
26ec8     09 FB 01 F6 | 	mov	result1, arg01
26ecc     A7 F0 03 F6 | 	mov	ptra, fp
26ed0     B2 00 A0 FD | 	call	#popregs_
26ed4                 | _fatfs_cc_get_vfs_ret
26ed4     2D 00 64 FD | 	ret
26ed8                 | 
26ed8                 | _fatfs_cc_xmit_mmc_0986
26ed8     01 00 00 FF 
26edc     10 E4 05 F1 | 	add	objptr, ##528
26ee0     F2 00 02 FB | 	rdlong	_var01, objptr
26ee4     08 E4 05 F1 | 	add	objptr, #8
26ee8     F2 02 02 FB | 	rdlong	_var02, objptr
26eec     01 00 00 FF 
26ef0     18 E4 85 F1 | 	sub	objptr, ##536
26ef4     40 02 62 FD | 	dirl	_var02
26ef8     28 02 64 FD | 	setq	#1
26efc     09 05 02 FB | 	rdlong	_var03, arg01
26f00     69 04 62 FD | 	rev	_var03
26f04     1B 04 FE F9 | 	movbyts	_var03, #27
26f08     01 05 22 FC | 	wypin	_var03, _var02
26f0c     0A 05 02 F6 | 	mov	_var03, arg02
26f10     02 14 4E F0 | 	shr	arg02, #2 wz
26f14     03 04 66 F0 | 	shl	_var03, #3
26f18     00 05 22 FC | 	wypin	_var03, _var01
26f1c     41 02 62 FD | 	dirh	_var02
26f20     08 12 06 F1 | 	add	arg01, #8
26f24     69 06 62 FD | 	rev	_var04
26f28     1B 06 FE F9 | 	movbyts	_var04, #27
26f2c                 | LR__4100
26f2c     01 07 22 5C |  if_ne	wypin	_var04, _var02
26f30     09 07 02 5B |  if_ne	rdlong	_var04, arg01
26f34     04 12 06 51 |  if_ne	add	arg01, #4
26f38     69 06 62 5D |  if_ne	rev	_var04
26f3c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
26f40                 | LR__4101
26f40     40 02 72 5D |  if_ne	testp	_var02 wc
26f44     F8 FF 9F 1D |  if_a	jmp	#LR__4101
26f48     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4100
26f4c                 | LR__4102
26f4c     40 00 72 FD | 	testp	_var01 wc
26f50     F8 FF 9F 3D |  if_ae	jmp	#LR__4102
26f54     40 02 62 FD | 	dirl	_var02
26f58     FF FF FF FF 
26f5c     01 FF 2B FC | 	wypin	##-1, _var02
26f60     41 02 62 FD | 	dirh	_var02
26f64                 | _fatfs_cc_xmit_mmc_0986_ret
26f64     2D 00 64 FD | 	ret
26f68                 | 
26f68                 | _fatfs_cc_rcvr_mmc_0993
26f68     01 00 00 FF 
26f6c     10 E4 05 F1 | 	add	objptr, ##528
26f70     F2 00 02 FB | 	rdlong	_var01, objptr
26f74     0C E4 05 F1 | 	add	objptr, #12
26f78     F2 02 02 FB | 	rdlong	_var02, objptr
26f7c     01 00 00 FF 
26f80     1C E4 85 F1 | 	sub	objptr, ##540
26f84     01 03 08 FC | 	akpin	_var02
26f88     0A 05 0A F6 | 	mov	_var03, arg02 wz
26f8c     02 04 4E F0 | 	shr	_var03, #2 wz
26f90     30 00 90 AD |  if_e	jmp	#LR__4112
26f94     02 07 02 F6 | 	mov	_var04, _var03
26f98     05 06 66 F0 | 	shl	_var04, #5
26f9c     00 07 22 FC | 	wypin	_var04, _var01
26fa0     01 7F 18 FC | 	wxpin	#63, _var02
26fa4                 | LR__4110
26fa4                 | LR__4111
26fa4     40 02 72 FD | 	testp	_var02 wc
26fa8     F8 FF 9F 3D |  if_ae	jmp	#LR__4111
26fac     01 07 8A FA | 	rdpin	_var04, _var02
26fb0     69 06 62 FD | 	rev	_var04
26fb4     1B 06 FE F9 | 	movbyts	_var04, #27
26fb8     09 07 62 FC | 	wrlong	_var04, arg01
26fbc     04 12 06 F1 | 	add	arg01, #4
26fc0     F8 05 6E FB | 	djnz	_var03, #LR__4110
26fc4                 | LR__4112
26fc4     03 14 0E F5 | 	and	arg02, #3 wz
26fc8     24 00 90 AD |  if_e	jmp	#LR__4115
26fcc     01 4F 18 FC | 	wxpin	#39, _var02
26fd0                 | LR__4113
26fd0     00 11 28 FC | 	wypin	#8, _var01
26fd4                 | LR__4114
26fd4     40 02 72 FD | 	testp	_var02 wc
26fd8     F8 FF 9F 3D |  if_ae	jmp	#LR__4114
26fdc     01 07 8A FA | 	rdpin	_var04, _var02
26fe0     69 06 62 FD | 	rev	_var04
26fe4     09 07 42 FC | 	wrbyte	_var04, arg01
26fe8     01 12 06 F1 | 	add	arg01, #1
26fec     F8 15 6E FB | 	djnz	arg02, #LR__4113
26ff0                 | LR__4115
26ff0                 | _fatfs_cc_rcvr_mmc_0993_ret
26ff0     2D 00 64 FD | 	ret
26ff4                 | 
26ff4                 | _fatfs_cc_wait_ready_0997
26ff4     01 4A 05 F6 | 	mov	COUNT_, #1
26ff8     A8 00 A0 FD | 	call	#pushregs_
26ffc     10 F0 07 F1 | 	add	ptra, #16
27000     1A FA 61 FD | 	getct	result1
27004     08 4E 05 F1 | 	add	fp, #8
27008     A7 FA 61 FC | 	wrlong	result1, fp
2700c     14 1E 06 FB | 	rdlong	local01, #20
27010     01 1E 46 F0 | 	shr	local01, #1
27014     04 4E 05 F1 | 	add	fp, #4
27018     A7 1E 62 FC | 	wrlong	local01, fp
2701c     0C 4E 85 F1 | 	sub	fp, #12
27020                 | ' {
27020                 | ' 	BYTE d;
27020                 | ' 	UINT tmr, tmout;
27020                 | ' 
27020                 | ' 	tmr = _cnt();
27020                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
27020                 | ' 	for(;;) {
27020                 | LR__4120
27020     04 4E 05 F1 | 	add	fp, #4
27024     A7 12 02 F6 | 	mov	arg01, fp
27028     04 4E 85 F1 | 	sub	fp, #4
2702c     01 14 06 F6 | 	mov	arg02, #1
27030     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27034     04 4E 05 F1 | 	add	fp, #4
27038     A7 1E C2 FA | 	rdbyte	local01, fp
2703c     04 4E 85 F1 | 	sub	fp, #4
27040     FF 1E 0E F2 | 	cmp	local01, #255 wz
27044     01 FA 05 A6 |  if_e	mov	result1, #1
27048     28 00 90 AD |  if_e	jmp	#LR__4121
2704c     1A FA 61 FD | 	getct	result1
27050     08 4E 05 F1 | 	add	fp, #8
27054     A7 1E 02 FB | 	rdlong	local01, fp
27058     0F FB 81 F1 | 	sub	result1, local01
2705c     04 4E 05 F1 | 	add	fp, #4
27060     A7 1E 02 FB | 	rdlong	local01, fp
27064     0C 4E 85 F1 | 	sub	fp, #12
27068     0F FB 11 F2 | 	cmp	result1, local01 wc
2706c     00 FA 05 36 |  if_ae	mov	result1, #0
27070     AC FF 9F CD |  if_b	jmp	#LR__4120
27074                 | LR__4121
27074     A7 F0 03 F6 | 	mov	ptra, fp
27078     B2 00 A0 FD | 	call	#popregs_
2707c                 | _fatfs_cc_wait_ready_0997_ret
2707c     2D 00 64 FD | 	ret
27080                 | 
27080                 | _fatfs_cc_deselect_1003
27080     00 4A 05 F6 | 	mov	COUNT_, #0
27084     A8 00 A0 FD | 	call	#pushregs_
27088     14 F0 07 F1 | 	add	ptra, #20
2708c     01 00 00 FF 
27090     14 E4 05 F1 | 	add	objptr, ##532
27094     F2 14 02 FB | 	rdlong	arg02, objptr
27098     04 4E 05 F1 | 	add	fp, #4
2709c     A7 14 62 FC | 	wrlong	arg02, fp
270a0     04 E4 85 F1 | 	sub	objptr, #4
270a4     F2 14 02 FB | 	rdlong	arg02, objptr
270a8     04 4E 05 F1 | 	add	fp, #4
270ac     A7 14 62 FC | 	wrlong	arg02, fp
270b0     08 E4 05 F1 | 	add	objptr, #8
270b4     F2 14 02 FB | 	rdlong	arg02, objptr
270b8     04 4E 05 F1 | 	add	fp, #4
270bc     A7 14 62 FC | 	wrlong	arg02, fp
270c0     04 E4 05 F1 | 	add	objptr, #4
270c4     F2 14 02 FB | 	rdlong	arg02, objptr
270c8     01 00 00 FF 
270cc     1C E4 85 F1 | 	sub	objptr, ##540
270d0     04 4E 05 F1 | 	add	fp, #4
270d4     A7 14 62 FC | 	wrlong	arg02, fp
270d8     0C 4E 85 F1 | 	sub	fp, #12
270dc     A7 12 02 FB | 	rdlong	arg01, fp
270e0     04 4E 85 F1 | 	sub	fp, #4
270e4     59 12 62 FD | 	drvh	arg01
270e8     1F 20 64 FD | 	waitx	#16
270ec     A7 12 02 F6 | 	mov	arg01, fp
270f0     01 14 06 F6 | 	mov	arg02, #1
270f4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
270f8     A7 F0 03 F6 | 	mov	ptra, fp
270fc     B2 00 A0 FD | 	call	#popregs_
27100                 | _fatfs_cc_deselect_1003_ret
27100     2D 00 64 FD | 	ret
27104                 | 
27104                 | _fatfs_cc_select_1007
27104     00 4A 05 F6 | 	mov	COUNT_, #0
27108     A8 00 A0 FD | 	call	#pushregs_
2710c     10 F0 07 F1 | 	add	ptra, #16
27110     01 00 00 FF 
27114     14 E4 05 F1 | 	add	objptr, ##532
27118     F2 14 02 FB | 	rdlong	arg02, objptr
2711c     08 4E 05 F1 | 	add	fp, #8
27120     A7 14 62 FC | 	wrlong	arg02, fp
27124     08 E4 05 F1 | 	add	objptr, #8
27128     F2 12 02 FB | 	rdlong	arg01, objptr
2712c     01 00 00 FF 
27130     1C E4 85 F1 | 	sub	objptr, ##540
27134     04 4E 05 F1 | 	add	fp, #4
27138     A7 12 62 FC | 	wrlong	arg01, fp
2713c     50 12 62 FD | 	fltl	arg01
27140     04 4E 85 F1 | 	sub	fp, #4
27144     A7 12 02 FB | 	rdlong	arg01, fp
27148     58 12 62 FD | 	drvl	arg01
2714c     1F 20 64 FD | 	waitx	#16
27150     04 4E 05 F1 | 	add	fp, #4
27154     A7 12 02 FB | 	rdlong	arg01, fp
27158     41 12 62 FD | 	dirh	arg01
2715c     08 4E 85 F1 | 	sub	fp, #8
27160     A7 12 02 F6 | 	mov	arg01, fp
27164     04 4E 85 F1 | 	sub	fp, #4
27168     01 14 06 F6 | 	mov	arg02, #1
2716c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27170     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0997
27174     00 FA 0D F2 | 	cmp	result1, #0 wz
27178     01 FA 05 56 |  if_ne	mov	result1, #1
2717c     08 00 90 5D |  if_ne	jmp	#LR__4130
27180     FC FE BF FD | 	call	#_fatfs_cc_deselect_1003
27184                 | ' 
27184                 | ' 	deselect();
27184                 | ' 	return 0;
27184     00 FA 05 F6 | 	mov	result1, #0
27188                 | LR__4130
27188     A7 F0 03 F6 | 	mov	ptra, fp
2718c     B2 00 A0 FD | 	call	#popregs_
27190                 | _fatfs_cc_select_1007_ret
27190     2D 00 64 FD | 	ret
27194                 | 
27194                 | _fatfs_cc_rcvr_datablock_1011
27194     01 4A 05 F6 | 	mov	COUNT_, #1
27198     A8 00 A0 FD | 	call	#pushregs_
2719c     18 F0 07 F1 | 	add	ptra, #24
271a0     04 4E 05 F1 | 	add	fp, #4
271a4     A7 12 62 FC | 	wrlong	arg01, fp
271a8     04 4E 05 F1 | 	add	fp, #4
271ac     A7 14 62 FC | 	wrlong	arg02, fp
271b0     1A FA 61 FD | 	getct	result1
271b4     08 4E 05 F1 | 	add	fp, #8
271b8     A7 FA 61 FC | 	wrlong	result1, fp
271bc     14 1E 06 FB | 	rdlong	local01, #20
271c0     03 1E 46 F0 | 	shr	local01, #3
271c4     04 4E 05 F1 | 	add	fp, #4
271c8     A7 1E 62 FC | 	wrlong	local01, fp
271cc     14 4E 85 F1 | 	sub	fp, #20
271d0                 | ' 	BYTE *buff,
271d0                 | ' 	UINT btr
271d0                 | ' )
271d0                 | ' {
271d0                 | ' 	BYTE d[2];
271d0                 | ' 	UINT tmr, tmout;
271d0                 | ' 
271d0                 | ' 	tmr = _cnt();
271d0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
271d0                 | ' 	for(;;) {
271d0                 | LR__4140
271d0     0C 4E 05 F1 | 	add	fp, #12
271d4     A7 12 02 F6 | 	mov	arg01, fp
271d8     0C 4E 85 F1 | 	sub	fp, #12
271dc     01 14 06 F6 | 	mov	arg02, #1
271e0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
271e4     0C 4E 05 F1 | 	add	fp, #12
271e8     A7 1E C2 FA | 	rdbyte	local01, fp
271ec     0C 4E 85 F1 | 	sub	fp, #12
271f0     FF 1E 0E F2 | 	cmp	local01, #255 wz
271f4     28 00 90 5D |  if_ne	jmp	#LR__4141
271f8     1A FA 61 FD | 	getct	result1
271fc     FD 1E 02 F6 | 	mov	local01, result1
27200     10 4E 05 F1 | 	add	fp, #16
27204     A7 14 02 FB | 	rdlong	arg02, fp
27208     0A 1F 82 F1 | 	sub	local01, arg02
2720c     04 4E 05 F1 | 	add	fp, #4
27210     A7 14 02 FB | 	rdlong	arg02, fp
27214     14 4E 85 F1 | 	sub	fp, #20
27218     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2721c     B0 FF 9F CD |  if_b	jmp	#LR__4140
27220                 | LR__4141
27220     0C 4E 05 F1 | 	add	fp, #12
27224     A7 1E C2 FA | 	rdbyte	local01, fp
27228     0C 4E 85 F1 | 	sub	fp, #12
2722c     FE 1E 0E F2 | 	cmp	local01, #254 wz
27230     00 FA 05 56 |  if_ne	mov	result1, #0
27234     30 00 90 5D |  if_ne	jmp	#LR__4142
27238     04 4E 05 F1 | 	add	fp, #4
2723c     A7 12 02 FB | 	rdlong	arg01, fp
27240     04 4E 05 F1 | 	add	fp, #4
27244     A7 14 02 FB | 	rdlong	arg02, fp
27248     08 4E 85 F1 | 	sub	fp, #8
2724c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27250     0C 4E 05 F1 | 	add	fp, #12
27254     A7 12 02 F6 | 	mov	arg01, fp
27258     0C 4E 85 F1 | 	sub	fp, #12
2725c     02 14 06 F6 | 	mov	arg02, #2
27260     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27264                 | ' 
27264                 | ' 	rcvr_mmc(buff, btr);
27264                 | ' 	rcvr_mmc(d, 2);
27264                 | ' 
27264                 | ' 	return 1;
27264     01 FA 05 F6 | 	mov	result1, #1
27268                 | LR__4142
27268     A7 F0 03 F6 | 	mov	ptra, fp
2726c     B2 00 A0 FD | 	call	#popregs_
27270                 | _fatfs_cc_rcvr_datablock_1011_ret
27270     2D 00 64 FD | 	ret
27274                 | 
27274                 | _fatfs_cc_xmit_datablock_1013
27274     00 4A 05 F6 | 	mov	COUNT_, #0
27278     A8 00 A0 FD | 	call	#pushregs_
2727c     10 F0 07 F1 | 	add	ptra, #16
27280     04 4E 05 F1 | 	add	fp, #4
27284     A7 12 62 FC | 	wrlong	arg01, fp
27288     04 4E 05 F1 | 	add	fp, #4
2728c     A7 14 42 FC | 	wrbyte	arg02, fp
27290     08 4E 85 F1 | 	sub	fp, #8
27294     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0997
27298     00 FA 0D F2 | 	cmp	result1, #0 wz
2729c     00 FA 05 A6 |  if_e	mov	result1, #0
272a0     90 00 90 AD |  if_e	jmp	#LR__4151
272a4     08 4E 05 F1 | 	add	fp, #8
272a8     A7 14 C2 FA | 	rdbyte	arg02, fp
272ac     04 4E 05 F1 | 	add	fp, #4
272b0     A7 14 42 FC | 	wrbyte	arg02, fp
272b4     A7 12 02 F6 | 	mov	arg01, fp
272b8     0C 4E 85 F1 | 	sub	fp, #12
272bc     01 14 06 F6 | 	mov	arg02, #1
272c0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0986
272c4     08 4E 05 F1 | 	add	fp, #8
272c8     A7 14 C2 FA | 	rdbyte	arg02, fp
272cc     08 4E 85 F1 | 	sub	fp, #8
272d0     FD 14 0E F2 | 	cmp	arg02, #253 wz
272d4     58 00 90 AD |  if_e	jmp	#LR__4150
272d8     04 4E 05 F1 | 	add	fp, #4
272dc     A7 12 02 FB | 	rdlong	arg01, fp
272e0     04 4E 85 F1 | 	sub	fp, #4
272e4     09 14 C6 F9 | 	decod	arg02, #9
272e8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0986
272ec     0C 4E 05 F1 | 	add	fp, #12
272f0     A7 12 02 F6 | 	mov	arg01, fp
272f4     0C 4E 85 F1 | 	sub	fp, #12
272f8     02 14 06 F6 | 	mov	arg02, #2
272fc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27300     0C 4E 05 F1 | 	add	fp, #12
27304     A7 12 02 F6 | 	mov	arg01, fp
27308     0C 4E 85 F1 | 	sub	fp, #12
2730c     01 14 06 F6 | 	mov	arg02, #1
27310     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
27314     0C 4E 05 F1 | 	add	fp, #12
27318     A7 14 C2 FA | 	rdbyte	arg02, fp
2731c     0C 4E 85 F1 | 	sub	fp, #12
27320     1F 14 06 F5 | 	and	arg02, #31
27324     05 14 0E F2 | 	cmp	arg02, #5 wz
27328                 | ' 			return 0;
27328     00 FA 05 56 |  if_ne	mov	result1, #0
2732c     04 00 90 5D |  if_ne	jmp	#LR__4151
27330                 | LR__4150
27330                 | ' 	}
27330                 | ' 
27330                 | ' 	return 1;
27330     01 FA 05 F6 | 	mov	result1, #1
27334                 | LR__4151
27334     A7 F0 03 F6 | 	mov	ptra, fp
27338     B2 00 A0 FD | 	call	#popregs_
2733c                 | _fatfs_cc_xmit_datablock_1013_ret
2733c     2D 00 64 FD | 	ret
27340                 | 
27340                 | _fatfs_cc_send_cmd_1017
27340     01 4A 05 F6 | 	mov	COUNT_, #1
27344     A8 00 A0 FD | 	call	#pushregs_
27348     1C F0 07 F1 | 	add	ptra, #28
2734c                 | _fatfs_cc_send_cmd_1017_enter
2734c     04 4E 05 F1 | 	add	fp, #4
27350     A7 12 42 FC | 	wrbyte	arg01, fp
27354     04 4E 05 F1 | 	add	fp, #4
27358     A7 14 62 FC | 	wrlong	arg02, fp
2735c     04 4E 85 F1 | 	sub	fp, #4
27360     A7 FA C1 FA | 	rdbyte	result1, fp
27364     04 4E 85 F1 | 	sub	fp, #4
27368     80 FA CD F7 | 	test	result1, #128 wz
2736c     44 00 90 AD |  if_e	jmp	#LR__4160
27370     04 4E 05 F1 | 	add	fp, #4
27374     A7 14 C2 FA | 	rdbyte	arg02, fp
27378     7F 14 06 F5 | 	and	arg02, #127
2737c     A7 14 42 FC | 	wrbyte	arg02, fp
27380     04 4E 85 F1 | 	sub	fp, #4
27384     37 12 06 F6 | 	mov	arg01, #55
27388     00 14 06 F6 | 	mov	arg02, #0
2738c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1017
27390     0C 4E 05 F1 | 	add	fp, #12
27394     A7 FA 41 FC | 	wrbyte	result1, fp
27398     A7 14 C2 FA | 	rdbyte	arg02, fp
2739c     0C 4E 85 F1 | 	sub	fp, #12
273a0     02 14 16 F2 | 	cmp	arg02, #2 wc
273a4     0C 4E 05 31 |  if_ae	add	fp, #12
273a8     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
273ac     0C 4E 85 31 |  if_ae	sub	fp, #12
273b0     6C 01 90 3D |  if_ae	jmp	#LR__4164
273b4                 | LR__4160
273b4     04 4E 05 F1 | 	add	fp, #4
273b8     A7 14 C2 FA | 	rdbyte	arg02, fp
273bc     04 4E 85 F1 | 	sub	fp, #4
273c0     0C 14 0E F2 | 	cmp	arg02, #12 wz
273c4     14 00 90 AD |  if_e	jmp	#LR__4161
273c8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1003
273cc     34 FD BF FD | 	call	#_fatfs_cc_select_1007
273d0     00 FA 0D F2 | 	cmp	result1, #0 wz
273d4     FF FA 05 A6 |  if_e	mov	result1, #255
273d8     44 01 90 AD |  if_e	jmp	#LR__4164
273dc                 | LR__4161
273dc     04 4E 05 F1 | 	add	fp, #4
273e0     A7 14 C2 FA | 	rdbyte	arg02, fp
273e4     40 FA 05 F6 | 	mov	result1, #64
273e8     0A FB 41 F5 | 	or	result1, arg02
273ec     10 4E 05 F1 | 	add	fp, #16
273f0     A7 FA 41 FC | 	wrbyte	result1, fp
273f4     0C 4E 85 F1 | 	sub	fp, #12
273f8     A7 FA 01 FB | 	rdlong	result1, fp
273fc     18 FA 45 F0 | 	shr	result1, #24
27400     0D 4E 05 F1 | 	add	fp, #13
27404     A7 FA 41 FC | 	wrbyte	result1, fp
27408     0D 4E 85 F1 | 	sub	fp, #13
2740c     A7 FA 01 FB | 	rdlong	result1, fp
27410     10 FA 45 F0 | 	shr	result1, #16
27414     0E 4E 05 F1 | 	add	fp, #14
27418     A7 FA 41 FC | 	wrbyte	result1, fp
2741c     0E 4E 85 F1 | 	sub	fp, #14
27420     A7 FA 01 FB | 	rdlong	result1, fp
27424     08 FA 45 F0 | 	shr	result1, #8
27428     0F 4E 05 F1 | 	add	fp, #15
2742c     A7 FA 41 FC | 	wrbyte	result1, fp
27430     0F 4E 85 F1 | 	sub	fp, #15
27434     A7 FA 01 FB | 	rdlong	result1, fp
27438     10 4E 05 F1 | 	add	fp, #16
2743c     A7 FA 41 FC | 	wrbyte	result1, fp
27440     0C 4E 85 F1 | 	sub	fp, #12
27444     A7 02 48 FC | 	wrbyte	#1, fp
27448     08 4E 85 F1 | 	sub	fp, #8
2744c     A7 FA C9 FA | 	rdbyte	result1, fp wz
27450     04 4E 85 F1 | 	sub	fp, #4
27454     0C 4E 05 A1 |  if_e	add	fp, #12
27458     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2745c     0C 4E 85 A1 |  if_e	sub	fp, #12
27460     04 4E 05 F1 | 	add	fp, #4
27464     A7 FA C1 FA | 	rdbyte	result1, fp
27468     04 4E 85 F1 | 	sub	fp, #4
2746c     08 FA 0D F2 | 	cmp	result1, #8 wz
27470     0C 4E 05 A1 |  if_e	add	fp, #12
27474     A7 0E 49 AC |  if_e	wrbyte	#135, fp
27478     0C 4E 85 A1 |  if_e	sub	fp, #12
2747c     0C 4E 05 F1 | 	add	fp, #12
27480     A7 14 C2 FA | 	rdbyte	arg02, fp
27484     0D 4E 05 F1 | 	add	fp, #13
27488     A7 14 42 FC | 	wrbyte	arg02, fp
2748c     05 4E 85 F1 | 	sub	fp, #5
27490     A7 12 02 F6 | 	mov	arg01, fp
27494     14 4E 85 F1 | 	sub	fp, #20
27498     06 14 06 F6 | 	mov	arg02, #6
2749c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0986
274a0     04 4E 05 F1 | 	add	fp, #4
274a4     A7 1E C2 FA | 	rdbyte	local01, fp
274a8     04 4E 85 F1 | 	sub	fp, #4
274ac     0C 1E 0E F2 | 	cmp	local01, #12 wz
274b0     10 4E 05 A1 |  if_e	add	fp, #16
274b4     A7 12 02 A6 |  if_e	mov	arg01, fp
274b8     10 4E 85 A1 |  if_e	sub	fp, #16
274bc     01 14 06 A6 |  if_e	mov	arg02, #1
274c0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0993
274c4     0C 4E 05 F1 | 	add	fp, #12
274c8     A7 14 48 FC | 	wrbyte	#10, fp
274cc     0C 4E 85 F1 | 	sub	fp, #12
274d0                 | ' 	n = 10;
274d0                 | ' 	do
274d0                 | LR__4162
274d0     10 4E 05 F1 | 	add	fp, #16
274d4     A7 12 02 F6 | 	mov	arg01, fp
274d8     10 4E 85 F1 | 	sub	fp, #16
274dc     01 14 06 F6 | 	mov	arg02, #1
274e0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0993
274e4     10 4E 05 F1 | 	add	fp, #16
274e8     A7 1E C2 FA | 	rdbyte	local01, fp
274ec     10 4E 85 F1 | 	sub	fp, #16
274f0     80 1E CE F7 | 	test	local01, #128 wz
274f4     1C 00 90 AD |  if_e	jmp	#LR__4163
274f8     0C 4E 05 F1 | 	add	fp, #12
274fc     A7 1E C2 FA | 	rdbyte	local01, fp
27500     01 1E 86 F1 | 	sub	local01, #1
27504     A7 1E 42 FC | 	wrbyte	local01, fp
27508     A7 1E CA FA | 	rdbyte	local01, fp wz
2750c     0C 4E 85 F1 | 	sub	fp, #12
27510     BC FF 9F 5D |  if_ne	jmp	#LR__4162
27514                 | LR__4163
27514                 | ' 
27514                 | ' 	return d;
27514     10 4E 05 F1 | 	add	fp, #16
27518     A7 FA C1 FA | 	rdbyte	result1, fp
2751c     10 4E 85 F1 | 	sub	fp, #16
27520                 | LR__4164
27520     A7 F0 03 F6 | 	mov	ptra, fp
27524     B2 00 A0 FD | 	call	#popregs_
27528                 | _fatfs_cc_send_cmd_1017_ret
27528     2D 00 64 FD | 	ret
2752c                 | 
2752c                 | _fatfs_cc_disk_deinitialize
2752c     03 4A 05 F6 | 	mov	COUNT_, #3
27530     A8 00 A0 FD | 	call	#pushregs_
27534     00 12 4E F2 | 	cmps	arg01, #0 wz
27538     01 00 00 FF 
2753c     14 E4 05 F1 | 	add	objptr, ##532
27540     F2 12 02 FB | 	rdlong	arg01, objptr
27544     04 E4 85 F1 | 	sub	objptr, #4
27548     F2 1E 02 FB | 	rdlong	local01, objptr
2754c     08 E4 05 F1 | 	add	objptr, #8
27550     F2 20 02 FB | 	rdlong	local02, objptr
27554     04 E4 05 F1 | 	add	objptr, #4
27558     F2 22 02 FB | 	rdlong	local03, objptr
2755c     01 00 00 FF 
27560     1C E4 85 F1 | 	sub	objptr, ##540
27564                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27564                 | '         return RES_NOTRDY;
27564     03 FA 05 56 |  if_ne	mov	result1, #3
27568     2C 00 90 5D |  if_ne	jmp	#LR__4170
2756c     50 12 62 FD | 	fltl	arg01
27570     09 01 08 FC | 	wrpin	#0, arg01
27574     50 1E 62 FD | 	fltl	local01
27578     0F 01 08 FC | 	wrpin	#0, local01
2757c     50 20 62 FD | 	fltl	local02
27580     10 01 08 FC | 	wrpin	#0, local02
27584     50 22 62 FD | 	fltl	local03
27588     11 01 08 FC | 	wrpin	#0, local03
2758c     0A 12 06 F6 | 	mov	arg01, #10
27590     28 16 BF FD | 	call	#__system___waitms
27594                 | '     }
27594                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27594                 | '     _pinclear(PIN_SS);
27594                 | '     _pinclear(PIN_CLK);
27594                 | '     _pinclear(PIN_DI);
27594                 | '     _pinclear(PIN_DO);
27594                 | ' 
27594                 | '     _waitms(10);
27594                 | ' 
27594                 | '     return 0;
27594     00 FA 05 F6 | 	mov	result1, #0
27598                 | LR__4170
27598     A7 F0 03 F6 | 	mov	ptra, fp
2759c     B2 00 A0 FD | 	call	#popregs_
275a0                 | _fatfs_cc_disk_deinitialize_ret
275a0     2D 00 64 FD | 	ret
275a4                 | 
275a4                 | _fatfs_cc_gettimeofday
275a4     04 4A 05 F6 | 	mov	COUNT_, #4
275a8     A8 00 A0 FD | 	call	#pushregs_
275ac     09 1F 02 F6 | 	mov	local01, arg01
275b0     E4 11 BF FD | 	call	#__system___getus
275b4     FD 12 02 F6 | 	mov	arg01, result1
275b8     02 00 00 FF 
275bc     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
275c0     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
275c4     09 FB 01 F6 | 	mov	result1, arg01
275c8     10 FB 81 F1 | 	sub	result1, local02
275cc     A1 07 00 FF 
275d0     40 FA 15 FD | 	qdiv	result1, ##1000000
275d4     02 00 00 FF 
275d8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
275dc     18 20 62 FD | 	getqx	local02
275e0     A1 07 00 FF 
275e4     40 FA 15 FD | 	qdiv	result1, ##1000000
275e8     00 20 0E F2 | 	cmp	local02, #0 wz
275ec     19 22 62 FD | 	getqy	local03
275f0     28 00 90 AD |  if_e	jmp	#LR__4180
275f4     02 00 00 FF 
275f8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
275fc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27600     10 25 02 F1 | 	add	local04, local02
27604     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
27608     11 13 82 F1 | 	sub	arg01, local03
2760c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
27610     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
27614     02 00 00 FF 
27618     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2761c                 | LR__4180
2761c     02 00 00 FF 
27620     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
27624     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
27628     02 00 00 FF 
2762c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
27630     0F 25 62 FC | 	wrlong	local04, local01
27634     04 1E 06 F1 | 	add	local01, #4
27638     0F 23 62 FC | 	wrlong	local03, local01
2763c                 | '         lastsec += secs;
2763c                 | '         lastus = now - leftover;
2763c                 | '     }
2763c                 | '     tv->tv_sec = lastsec;
2763c                 | '     tv->tv_usec = leftover;
2763c                 | '     return 0;
2763c     00 FA 05 F6 | 	mov	result1, #0
27640     A7 F0 03 F6 | 	mov	ptra, fp
27644     B2 00 A0 FD | 	call	#popregs_
27648                 | _fatfs_cc_gettimeofday_ret
27648     2D 00 64 FD | 	ret
2764c                 | 
2764c                 | _fatfs_cc__is_leap_year
2764c     09 FB 51 F6 | 	abs	result1, arg01 wc
27650     03 FA 05 F5 | 	and	result1, #3
27654     FD FA 89 F6 | 	negc	result1, result1 wz
27658     38 00 90 5D |  if_ne	jmp	#LR__4191
2765c     09 FB 51 F6 | 	abs	result1, arg01 wc
27660     64 FA 15 FD | 	qdiv	result1, #100
27664     19 FA 61 FD | 	getqy	result1
27668     FD FA 89 F6 | 	negc	result1, result1 wz
2766c     1C 00 90 5D |  if_ne	jmp	#LR__4190
27670     09 FB 51 F6 | 	abs	result1, arg01 wc
27674     90 FB 15 FD | 	qdiv	result1, #400
27678                 | '       return (0 == y % 400);
27678     00 FA 05 F6 | 	mov	result1, #0
2767c     19 00 62 FD | 	getqy	_var01
27680     00 01 8A F6 | 	negc	_var01, _var01 wz
27684     01 FA 05 A6 |  if_e	mov	result1, #1
27688     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2768c                 | LR__4190
2768c                 | '     return 1;
2768c     01 FA 05 F6 | 	mov	result1, #1
27690     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
27694                 | LR__4191
27694                 | '   }
27694                 | '   return 0;
27694     00 FA 05 F6 | 	mov	result1, #0
27698                 | _fatfs_cc__is_leap_year_ret
27698     2D 00 64 FD | 	ret
2769c                 | 
2769c                 | _fatfs_cc___tzoffset
2769c     09 01 0A F6 | 	mov	_var01, arg01 wz
276a0     FF FF FF FF 
276a4     0A FF 6B FC | 	wrlong	##-1, arg02
276a8     01 02 06 F6 | 	mov	_var02, #1
276ac     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
276b0                 | '                 return 0;
276b0     00 FA 05 A6 |  if_e	mov	result1, #0
276b4     94 02 90 AD |  if_e	jmp	#LR__4217
276b8     0A 01 68 FC | 	wrlong	#0, arg02
276bc     02 00 00 FF 
276c0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
276c4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
276c8                 | ' 
276c8                 | '        *hasdst = 0;
276c8                 | ' 
276c8                 | ' 	n = stdname;
276c8                 | '         while (*s && isalpha(*s)) {
276c8     02 00 00 FF 
276cc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
276d0     97 28 48 FB | 	callpa	#(@LR__4201-@LR__4200)>>2,fcache_load_ptr_
276d4                 | LR__4200
276d4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
276d8     48 00 90 AD |  if_e	jmp	#LR__4202
276dc     00 13 C2 FA | 	rdbyte	arg01, _var01
276e0                 | ' {
276e0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
276e0     80 12 36 F3 | 	fle	arg01, #128 wc
276e4                 | '     return __ctype[c];
276e4     02 00 00 FF 
276e8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
276ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
276f0     09 FB C1 FA | 	rdbyte	result1, arg01
276f4     02 00 00 FF 
276f8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
276fc     0C FA CD F7 | 	test	result1, #12 wz
27700     20 00 90 AD |  if_e	jmp	#LR__4202
27704     00 09 02 F6 | 	mov	_var05, _var01
27708     00 0B 02 F6 | 	mov	_var06, _var01
2770c     01 0A 06 F1 | 	add	_var06, #1
27710     04 0D C2 FA | 	rdbyte	_var07, _var05
27714     05 01 02 F6 | 	mov	_var01, _var06
27718     03 0D 42 FC | 	wrbyte	_var07, _var04
2771c     01 06 06 F1 | 	add	_var04, #1
27720     B0 FF 9F FD | 	jmp	#LR__4200
27724                 | LR__4201
27724                 | LR__4202
27724     03 01 48 FC | 	wrbyte	#0, _var04
27728     00 0E 06 F6 | 	mov	_var08, #0
2772c     00 05 C2 FA | 	rdbyte	_var03, _var01
27730     2D 04 0E F2 | 	cmp	_var03, #45 wz
27734     01 02 66 A6 |  if_e	neg	_var02, #1
27738     01 00 06 A1 |  if_e	add	_var01, #1
2773c     97 28 48 FB | 	callpa	#(@LR__4204-@LR__4203)>>2,fcache_load_ptr_
27740                 | '                 sgn = -1;
27740                 | '                 s++;
27740                 | '         }
27740                 | '         while (isdigit(*s)) {
27740                 | LR__4203
27740     00 13 C2 FA | 	rdbyte	arg01, _var01
27744                 | ' {
27744                 | '   return  (__ctype_get(c) & 0x02 ) ;
27744     80 12 36 F3 | 	fle	arg01, #128 wc
27748                 | '     return __ctype[c];
27748     02 00 00 FF 
2774c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27750     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27754     09 FB C1 FA | 	rdbyte	result1, arg01
27758     02 00 00 FF 
2775c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27760     02 FA CD F7 | 	test	result1, #2 wz
27764     28 00 90 AD |  if_e	jmp	#LR__4205
27768     07 05 02 F6 | 	mov	_var03, _var08
2776c     02 04 66 F0 | 	shl	_var03, #2
27770     07 05 02 F1 | 	add	_var03, _var08
27774     01 04 66 F0 | 	shl	_var03, #1
27778     00 09 C2 FA | 	rdbyte	_var05, _var01
2777c     30 08 86 F1 | 	sub	_var05, #48
27780     04 05 02 F1 | 	add	_var03, _var05
27784     02 0F 02 F6 | 	mov	_var08, _var03
27788     01 00 06 F1 | 	add	_var01, #1
2778c     B0 FF 9F FD | 	jmp	#LR__4203
27790                 | LR__4204
27790                 | LR__4205
27790     07 00 00 FF 
27794     10 0E 06 FD | 	qmul	_var08, ##3600
27798     00 05 C2 FA | 	rdbyte	_var03, _var01
2779c     3A 04 0E F2 | 	cmp	_var03, #58 wz
277a0     18 10 62 FD | 	getqx	_var09
277a4     70 00 90 5D |  if_ne	jmp	#LR__4209
277a8     00 0E 06 F6 | 	mov	_var08, #0
277ac     01 00 06 F1 | 	add	_var01, #1
277b0     97 28 48 FB | 	callpa	#(@LR__4207-@LR__4206)>>2,fcache_load_ptr_
277b4                 | '                 x = 0;
277b4                 | '                 s++;
277b4                 | '                 while (isdigit(*s)) {
277b4                 | LR__4206
277b4     00 13 C2 FA | 	rdbyte	arg01, _var01
277b8                 | ' {
277b8                 | '   return  (__ctype_get(c) & 0x02 ) ;
277b8     80 12 36 F3 | 	fle	arg01, #128 wc
277bc                 | '     return __ctype[c];
277bc     02 00 00 FF 
277c0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
277c4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
277c8     09 FB C1 FA | 	rdbyte	result1, arg01
277cc     02 00 00 FF 
277d0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
277d4     02 FA CD F7 | 	test	result1, #2 wz
277d8     28 00 90 AD |  if_e	jmp	#LR__4208
277dc     07 05 02 F6 | 	mov	_var03, _var08
277e0     02 04 66 F0 | 	shl	_var03, #2
277e4     07 05 02 F1 | 	add	_var03, _var08
277e8     01 04 66 F0 | 	shl	_var03, #1
277ec     00 09 C2 FA | 	rdbyte	_var05, _var01
277f0     30 08 86 F1 | 	sub	_var05, #48
277f4     04 05 02 F1 | 	add	_var03, _var05
277f8     02 0F 02 F6 | 	mov	_var08, _var03
277fc     01 00 06 F1 | 	add	_var01, #1
27800     B0 FF 9F FD | 	jmp	#LR__4206
27804                 | LR__4207
27804                 | LR__4208
27804     07 0D 02 F6 | 	mov	_var07, _var08
27808     04 0C 66 F0 | 	shl	_var07, #4
2780c     07 0D 82 F1 | 	sub	_var07, _var08
27810     02 0C 66 F0 | 	shl	_var07, #2
27814     06 11 02 F1 | 	add	_var09, _var07
27818                 | LR__4209
27818     02 00 00 FF 
2781c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27820     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
27824     00 13 C2 FA | 	rdbyte	arg01, _var01
27828                 | ' {
27828                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27828     80 12 36 F3 | 	fle	arg01, #128 wc
2782c                 | '     return __ctype[c];
2782c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
27830     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27834     09 FB C1 FA | 	rdbyte	result1, arg01
27838     02 00 00 FF 
2783c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27840     0C FA CD F7 | 	test	result1, #12 wz
27844     50 00 90 AD |  if_e	jmp	#LR__4212
27848     0A 03 68 FC | 	wrlong	#1, arg02
2784c                 | '                 *hasdst = 1;
2784c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2784c                 | LR__4210
2784c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
27850     44 00 90 AD |  if_e	jmp	#LR__4211
27854     00 13 C2 FA | 	rdbyte	arg01, _var01
27858                 | ' {
27858                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
27858     80 12 36 F3 | 	fle	arg01, #128 wc
2785c                 | '     return __ctype[c];
2785c     02 00 00 FF 
27860     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
27864     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
27868     09 FB C1 FA | 	rdbyte	result1, arg01
2786c     02 00 00 FF 
27870     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
27874     0C FA CD F7 | 	test	result1, #12 wz
27878     1C 00 90 AD |  if_e	jmp	#LR__4211
2787c     00 0B 02 F6 | 	mov	_var06, _var01
27880     01 0A 06 F1 | 	add	_var06, #1
27884     00 0D C2 FA | 	rdbyte	_var07, _var01
27888     05 01 02 F6 | 	mov	_var01, _var06
2788c     03 0D 42 FC | 	wrbyte	_var07, _var04
27890     01 06 06 F1 | 	add	_var04, #1
27894     B4 FF 9F FD | 	jmp	#LR__4210
27898                 | LR__4211
27898                 | LR__4212
27898     03 01 48 FC | 	wrbyte	#0, _var04
2789c     02 00 00 FF 
278a0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
278a4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
278a8     02 00 00 FF 
278ac     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
278b0     20 00 90 AD |  if_e	jmp	#LR__4213
278b4     02 00 00 FF 
278b8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
278bc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
278c0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
278c4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
278c8     02 00 00 FF 
278cc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
278d0     1C 00 90 FD | 	jmp	#LR__4214
278d4                 | LR__4213
278d4     02 00 00 FF 
278d8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
278dc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
278e0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
278e4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
278e8     02 00 00 FF 
278ec     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
278f0                 | LR__4214
278f0     02 00 00 FF 
278f4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
278f8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
278fc     02 00 00 FF 
27900     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
27904     20 00 90 AD |  if_e	jmp	#LR__4215
27908     02 00 00 FF 
2790c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
27910     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27914     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
27918     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2791c     02 00 00 FF 
27920     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27924     1C 00 90 FD | 	jmp	#LR__4216
27928                 | LR__4215
27928     02 00 00 FF 
2792c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
27930     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
27934     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
27938     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2793c     02 00 00 FF 
27940     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
27944                 | LR__4216
27944     08 03 02 FD | 	qmul	_var02, _var09
27948                 | ' 		_tzname[1] = stdname;
27948                 | ' 
27948                 | '         return sgn * off;
27948     18 FA 61 FD | 	getqx	result1
2794c                 | LR__4217
2794c                 | _fatfs_cc___tzoffset_ret
2794c     2D 00 64 FD | 	ret
27950                 | 
27950                 | _fatfs_cc___indst
27950     10 12 06 F1 | 	add	arg01, #16
27954     09 01 02 FB | 	rdlong	_var01, arg01
27958     10 12 86 F1 | 	sub	arg01, #16
2795c     02 00 0E F2 | 	cmp	_var01, #2 wz
27960     30 00 90 5D |  if_ne	jmp	#LR__4220
27964     07 00 06 F6 | 	mov	_var01, #7
27968     18 12 06 F1 | 	add	arg01, #24
2796c     09 03 02 FB | 	rdlong	_var02, arg01
27970     01 01 02 F1 | 	add	_var01, _var02
27974     0C 12 86 F1 | 	sub	arg01, #12
27978     09 05 02 FB | 	rdlong	_var03, arg01
2797c     02 01 82 F1 | 	sub	_var01, _var03
27980     00 00 56 F2 | 	cmps	_var01, #0 wc
27984                 | '                         return 1;
27984     01 FA 05 C6 |  if_b	mov	result1, #1
27988     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2798c                 | '                 return 0;
2798c     00 FA 05 F6 | 	mov	result1, #0
27990     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
27994                 | LR__4220
27994     10 12 06 F1 | 	add	arg01, #16
27998     09 01 02 FB | 	rdlong	_var01, arg01
2799c     10 12 86 F1 | 	sub	arg01, #16
279a0     0A 00 0E F2 | 	cmp	_var01, #10 wz
279a4     28 00 90 5D |  if_ne	jmp	#LR__4221
279a8     18 12 06 F1 | 	add	arg01, #24
279ac     09 01 02 FB | 	rdlong	_var01, arg01
279b0     0C 12 86 F1 | 	sub	arg01, #12
279b4     09 07 02 FB | 	rdlong	_var04, arg01
279b8     03 01 82 F1 | 	sub	_var01, _var04
279bc     00 00 56 F2 | 	cmps	_var01, #0 wc
279c0                 | '                         return 0;
279c0     00 FA 05 C6 |  if_b	mov	result1, #0
279c4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
279c8                 | '                 return 1;
279c8     01 FA 05 F6 | 	mov	result1, #1
279cc     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
279d0                 | LR__4221
279d0                 | '         }
279d0                 | ' 
279d0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
279d0     00 00 06 F6 | 	mov	_var01, #0
279d4     10 12 06 F1 | 	add	arg01, #16
279d8     09 03 02 FB | 	rdlong	_var02, arg01
279dc     10 12 86 F1 | 	sub	arg01, #16
279e0     03 02 56 F2 | 	cmps	_var02, #3 wc
279e4     10 00 90 CD |  if_b	jmp	#LR__4222
279e8     10 12 06 F1 | 	add	arg01, #16
279ec     09 05 02 FB | 	rdlong	_var03, arg01
279f0     0A 04 56 F2 | 	cmps	_var03, #10 wc
279f4     01 00 06 C6 |  if_b	mov	_var01, #1
279f8                 | LR__4222
279f8     00 FB 01 F6 | 	mov	result1, _var01
279fc                 | _fatfs_cc___indst_ret
279fc     2D 00 64 FD | 	ret
27a00                 | 
27a00                 | ' 	
27a00                 | ' 	FUNCTION pfunc(c as integer) as integer
27a00                 | ___strs_cl_pfunc
27a00                 | ' 		if (i < 16) then
27a00     04 E4 05 F1 | 	add	objptr, #4
27a04     F2 FA 01 FB | 	rdlong	result1, objptr
27a08     04 E4 85 F1 | 	sub	objptr, #4
27a0c     10 FA 55 F2 | 	cmps	result1, #16 wc
27a10     2C 00 90 3D |  if_ae	jmp	#LR__4230
27a14     F2 FA 01 FB | 	rdlong	result1, objptr
27a18     04 E4 05 F1 | 	add	objptr, #4
27a1c     F2 00 02 FB | 	rdlong	_var01, objptr
27a20     FD 00 02 F1 | 	add	_var01, result1
27a24     00 13 42 FC | 	wrbyte	arg01, _var01
27a28     F2 FA 01 FB | 	rdlong	result1, objptr
27a2c     01 FA 05 F1 | 	add	result1, #1
27a30     F2 FA 61 FC | 	wrlong	result1, objptr
27a34     04 E4 85 F1 | 	sub	objptr, #4
27a38                 | ' 			p(i) = c
27a38                 | ' 			i = i+1
27a38                 | ' 			return 1
27a38     01 FA 05 F6 | 	mov	result1, #1
27a3c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
27a40                 | LR__4230
27a40                 | ' 			return -1
27a40     01 FA 65 F6 | 	neg	result1, #1
27a44                 | ___strs_cl_pfunc_ret
27a44     2D 00 64 FD | 	ret
27a48                 | 
27a48                 | __struct__s_vfs_file_t_putchar
27a48     04 4A 05 F6 | 	mov	COUNT_, #4
27a4c     A8 00 A0 FD | 	call	#pushregs_
27a50     1C E4 05 F1 | 	add	objptr, #28
27a54     F2 1E 0A FB | 	rdlong	local01, objptr wz
27a58     1C E4 85 F1 | 	sub	objptr, #28
27a5c     00 FA 05 A6 |  if_e	mov	result1, #0
27a60     48 00 90 AD |  if_e	jmp	#LR__4240
27a64     1C E4 05 F1 | 	add	objptr, #28
27a68     F2 20 02 FB | 	rdlong	local02, objptr
27a6c     10 23 02 F6 | 	mov	local03, local02
27a70     1C E4 85 F1 | 	sub	objptr, #28
27a74     13 22 46 F7 | 	zerox	local03, #19
27a78     14 20 46 F0 | 	shr	local02, #20
27a7c     02 20 66 F0 | 	shl	local02, #2
27a80     ED 20 02 F1 | 	add	local02, __methods__
27a84     10 21 02 FB | 	rdlong	local02, local02
27a88     F2 14 02 F6 | 	mov	arg02, objptr
27a8c     F2 24 02 F6 | 	mov	local04, objptr
27a90     11 E5 01 F6 | 	mov	objptr, local03
27a94     2D 20 62 FD | 	call	local02
27a98     12 E5 01 F6 | 	mov	objptr, local04
27a9c                 | '     return (i < 0) ? 0 : 1;
27a9c     00 FA 55 F2 | 	cmps	result1, #0 wc
27aa0     00 1E 06 C6 |  if_b	mov	local01, #0
27aa4     01 1E 06 36 |  if_ae	mov	local01, #1
27aa8     0F FB 01 F6 | 	mov	result1, local01
27aac                 | LR__4240
27aac     A7 F0 03 F6 | 	mov	ptra, fp
27ab0     B2 00 A0 FD | 	call	#popregs_
27ab4                 | __struct__s_vfs_file_t_putchar_ret
27ab4     2D 00 64 FD | 	ret
27ab8                 | 
27ab8                 | __struct__s_vfs_file_t_getchar
27ab8     03 4A 05 F6 | 	mov	COUNT_, #3
27abc     A8 00 A0 FD | 	call	#pushregs_
27ac0     20 E4 05 F1 | 	add	objptr, #32
27ac4     F2 12 0A FB | 	rdlong	arg01, objptr wz
27ac8     20 E4 85 F1 | 	sub	objptr, #32
27acc     01 FA 65 A6 |  if_e	neg	result1, #1
27ad0     38 00 90 AD |  if_e	jmp	#LR__4250
27ad4                 | '     return getcf(__this);
27ad4     20 E4 05 F1 | 	add	objptr, #32
27ad8     F2 1E 02 FB | 	rdlong	local01, objptr
27adc     0F 21 02 F6 | 	mov	local02, local01
27ae0     20 E4 85 F1 | 	sub	objptr, #32
27ae4     13 20 46 F7 | 	zerox	local02, #19
27ae8     14 1E 46 F0 | 	shr	local01, #20
27aec     02 1E 66 F0 | 	shl	local01, #2
27af0     ED 1E 02 F1 | 	add	local01, __methods__
27af4     0F 1F 02 FB | 	rdlong	local01, local01
27af8     F2 12 02 F6 | 	mov	arg01, objptr
27afc     F2 22 02 F6 | 	mov	local03, objptr
27b00     10 E5 01 F6 | 	mov	objptr, local02
27b04     2D 1E 62 FD | 	call	local01
27b08     11 E5 01 F6 | 	mov	objptr, local03
27b0c                 | LR__4250
27b0c     A7 F0 03 F6 | 	mov	ptra, fp
27b10     B2 00 A0 FD | 	call	#popregs_
27b14                 | __struct__s_vfs_file_t_getchar_ret
27b14     2D 00 64 FD | 	ret
27b18                 | 
27b18                 | __struct___bas_wrap_sender_tx
27b18     03 4A 05 F6 | 	mov	COUNT_, #3
27b1c     A8 00 A0 FD | 	call	#pushregs_
27b20     F2 1E 02 FB | 	rdlong	local01, objptr
27b24     0F 21 02 F6 | 	mov	local02, local01
27b28     13 1E 46 F7 | 	zerox	local01, #19
27b2c     14 20 46 F0 | 	shr	local02, #20
27b30     02 20 66 F0 | 	shl	local02, #2
27b34     ED 20 02 F1 | 	add	local02, __methods__
27b38     10 21 02 FB | 	rdlong	local02, local02
27b3c     F2 22 02 F6 | 	mov	local03, objptr
27b40     0F E5 01 F6 | 	mov	objptr, local01
27b44     2D 20 62 FD | 	call	local02
27b48     11 E5 01 F6 | 	mov	objptr, local03
27b4c     01 FA 05 F6 | 	mov	result1, #1
27b50     A7 F0 03 F6 | 	mov	ptra, fp
27b54     B2 00 A0 FD | 	call	#popregs_
27b58                 | __struct___bas_wrap_sender_tx_ret
27b58     2D 00 64 FD | 	ret
27b5c                 | 
27b5c                 | __struct___bas_wrap_sender_rx
27b5c     03 4A 05 F6 | 	mov	COUNT_, #3
27b60     A8 00 A0 FD | 	call	#pushregs_
27b64     04 E4 05 F1 | 	add	objptr, #4
27b68     F2 1E 02 FB | 	rdlong	local01, objptr
27b6c     0F 21 02 F6 | 	mov	local02, local01
27b70     04 E4 85 F1 | 	sub	objptr, #4
27b74     13 20 46 F7 | 	zerox	local02, #19
27b78     14 1E 46 F0 | 	shr	local01, #20
27b7c     02 1E 66 F0 | 	shl	local01, #2
27b80     ED 1E 02 F1 | 	add	local01, __methods__
27b84     0F 1F 02 FB | 	rdlong	local01, local01
27b88     F2 22 02 F6 | 	mov	local03, objptr
27b8c     10 E5 01 F6 | 	mov	objptr, local02
27b90     2D 1E 62 FD | 	call	local01
27b94     11 E5 01 F6 | 	mov	objptr, local03
27b98     A7 F0 03 F6 | 	mov	ptra, fp
27b9c     B2 00 A0 FD | 	call	#popregs_
27ba0                 | __struct___bas_wrap_sender_rx_ret
27ba0     2D 00 64 FD | 	ret
27ba4                 | 
27ba4                 | __struct___bas_wrap_sender_close
27ba4     03 4A 05 F6 | 	mov	COUNT_, #3
27ba8     A8 00 A0 FD | 	call	#pushregs_
27bac     08 E4 05 F1 | 	add	objptr, #8
27bb0     F2 1E 02 FB | 	rdlong	local01, objptr
27bb4     0F 21 02 F6 | 	mov	local02, local01
27bb8     08 E4 85 F1 | 	sub	objptr, #8
27bbc     13 20 46 F7 | 	zerox	local02, #19
27bc0     14 1E 46 F0 | 	shr	local01, #20
27bc4     02 1E 66 F0 | 	shl	local01, #2
27bc8     ED 1E 02 F1 | 	add	local01, __methods__
27bcc     0F 1F 02 FB | 	rdlong	local01, local01
27bd0     F2 22 02 F6 | 	mov	local03, objptr
27bd4     10 E5 01 F6 | 	mov	objptr, local02
27bd8     2D 1E 62 FD | 	call	local01
27bdc     11 E5 01 F6 | 	mov	objptr, local03
27be0     A7 F0 03 F6 | 	mov	ptra, fp
27be4     B2 00 A0 FD | 	call	#popregs_
27be8                 | __struct___bas_wrap_sender_close_ret
27be8     2D 00 64 FD | 	ret
27bec                 | 
27bec                 | LR__4260
27bec     2F          | 	byte	"/"
27bed     00          | 	byte	0
27bee                 | LR__4261
27bee     69 6E 66    | 	byte	"inf"
27bf1     00          | 	byte	0
27bf2                 | LR__4262
27bf2     6E 61 6E    | 	byte	"nan"
27bf5     00          | 	byte	0
27bf6                 | LR__4263
27bf6                 | 	byte	
27bf6     00          | 	byte	0
27bf7                 | LR__4264
27bf7                 | 	byte	
27bf7     00          | 	byte	0
27bf8                 | LR__4265
27bf8                 | 	byte	
27bf8     00          | 	byte	0
27bf9                 | LR__4266
27bf9                 | 	byte	
27bf9     00          | 	byte	0
27bfa                 | LR__4267
27bfa                 | 	byte	
27bfa     00          | 	byte	0
27bfb                 | LR__4268
27bfb                 | 	byte	
27bfb     00          | 	byte	0
27bfc                 | LR__4269
27bfc                 | 	byte	
27bfc     00          | 	byte	0
27bfd                 | LR__4270
27bfd                 | 	byte	
27bfd     00          | 	byte	0
27bfe                 | LR__4271
27bfe     00          | 	byte	0
27bff     00          | 	byte	0
27c00                 | LR__4272
27c00     00          | 	byte	0
27c01     00          | 	byte	0
27c02                 | LR__4273
27c02     00          | 	byte	0
27c03     00          | 	byte	0
27c04                 | LR__4274
27c04     20 21 21 21 
27c08     20 63 6F 72 
27c0c     72 75 70 74 
27c10     65 64 20 68 
27c14     65 61 70 3F 
27c18     3F 3F 20 21 
27c1c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
27c1f     00          | 	byte	0
27c20                 | LR__4275
27c20     20 21 21 21 
27c24     20 6F 75 74 
27c28     20 6F 66 20 
27c2c     68 65 61 70 
27c30     20 6D 65 6D 
27c34     6F 72 79 20 
27c38     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
27c3c     00          | 	byte	0
27c3d                 | LR__4276
27c3d     20 21 21 21 
27c41     20 63 6F 72 
27c45     72 75 70 74 
27c49     65 64 20 68 
27c4d     65 61 70 20 
27c51     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
27c55     00          | 	byte	0
27c56                 | LR__4277
27c56     00          | 	byte	0
27c57     00          | 	byte	0
27c58                 | LR__4278
27c58     2E          | 	byte	"."
27c59     00          | 	byte	0
27c5a                 | LR__4279
27c5a     00          | 	byte	0
27c5b     00          | 	byte	0
27c5c                 | LR__4280
27c5c     00          | 	byte	0
27c5d     00          | 	byte	0
27c5e                 | LR__4281
27c5e     00          | 	byte	0
27c5f     00          | 	byte	0
27c60                 | LR__4282
27c60     2A 3A 3C 3E 
27c64     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
27c68     00          | 	byte	0
27c69                 | LR__4283
27c69     2B 2C 3B 3D 
27c6d     5B 5D       | 	byte	"+,;=[]"
27c6f     00          | 	byte	0
27c70                 | LR__4284
27c70     46 41 54 33 
27c74     32 20 20 20 | 	byte	"FAT32   "
27c78     00          | 	byte	0
27c79                 | LR__4285
27c79     54 5A       | 	byte	"TZ"
27c7b     00          | 	byte	0
27c7c                 | LR__4286
27c7c     00          | 	byte	0
27c7d     00          | 	byte	0
27c7e                 | LR__4287
27c7e                 | 	byte	
27c7e     00          | 	byte	0
27c7f                 | LR__4288
27c7f                 | 	byte	
27c7f     00          | 	byte	0
27c80                 | LR__4289
27c80     22          | 	byte	34
27c81     00          | 	byte	0
27c82                 | LR__4290
27c82     22          | 	byte	34
27c83     00          | 	byte	0
27c84                 | LR__4291
27c84     3A          | 	byte	":"
27c85     00          | 	byte	0
27c86                 | LR__4292
27c86                 | 	byte	
27c86     00          | 	byte	0
27c87                 | LR__4293
27c87                 | 	byte	
27c87     00          | 	byte	0
27c88                 | LR__4294
27c88                 | 	byte	
27c88     00          | 	byte	0
27c89                 | LR__4295
27c89                 | 	byte	
27c89     00          | 	byte	0
27c8a                 | LR__4296
27c8a                 | 	byte	
27c8a     00          | 	byte	0
27c8b                 | LR__4297
27c8b                 | 	byte	
27c8b     00          | 	byte	0
27c8c                 | LR__4298
27c8c                 | 	byte	
27c8c     00          | 	byte	0
27c8d                 | LR__4299
27c8d     22          | 	byte	34
27c8e     00          | 	byte	0
27c8f                 | LR__4300
27c8f     22          | 	byte	34
27c90     00          | 	byte	0
27c91                 | LR__4301
27c91     22          | 	byte	34
27c92     00          | 	byte	0
27c93                 | LR__4302
27c93     22          | 	byte	34
27c94     00          | 	byte	0
27c95                 | LR__4303
27c95     22          | 	byte	34
27c96     00          | 	byte	0
27c97                 | LR__4304
27c97     3E          | 	byte	">"
27c98     00          | 	byte	0
27c99                 | LR__4305
27c99     3E          | 	byte	">"
27c9a     00          | 	byte	0
27c9b                 | LR__4306
27c9b     2B          | 	byte	"+"
27c9c     00          | 	byte	0
27c9d                 | LR__4307
27c9d     2D          | 	byte	"-"
27c9e     00          | 	byte	0
27c9f                 | LR__4308
27c9f     2A          | 	byte	"*"
27ca0     00          | 	byte	0
27ca1                 | LR__4309
27ca1     2F          | 	byte	"/"
27ca2     00          | 	byte	0
27ca3                 | LR__4310
27ca3     5E          | 	byte	"^"
27ca4     00          | 	byte	0
27ca5                 | LR__4311
27ca5     3D          | 	byte	"="
27ca6     00          | 	byte	0
27ca7                 | LR__4312
27ca7     2B          | 	byte	"+"
27ca8     00          | 	byte	0
27ca9                 | LR__4313
27ca9     2B          | 	byte	"+"
27caa     00          | 	byte	0
27cab                 | LR__4314
27cab     2D          | 	byte	"-"
27cac     00          | 	byte	0
27cad                 | LR__4315
27cad     2D          | 	byte	"-"
27cae     00          | 	byte	0
27caf                 | LR__4316
27caf     3C          | 	byte	"<"
27cb0     00          | 	byte	0
27cb1                 | LR__4317
27cb1     3E          | 	byte	">"
27cb2     00          | 	byte	0
27cb3                 | LR__4318
27cb3     22          | 	byte	34
27cb4     00          | 	byte	0
27cb5                 | LR__4319
27cb5     22          | 	byte	34
27cb6     00          | 	byte	0
27cb7                 | LR__4320
27cb7                 | 	byte	
27cb7     00          | 	byte	0
27cb8                 | LR__4321
27cb8     6C 6F 61 64 | 	byte	"load"
27cbc     00          | 	byte	0
27cbd                 | LR__4322
27cbd     73 61 76 65 | 	byte	"save"
27cc1     00          | 	byte	0
27cc2                 | LR__4323
27cc2     62 72 75 6E | 	byte	"brun"
27cc6     00          | 	byte	0
27cc7                 | LR__4324
27cc7     6C 6F 2E    | 	byte	"lo."
27cca     00          | 	byte	0
27ccb                 | LR__4325
27ccb     73 2E       | 	byte	"s."
27ccd     00          | 	byte	0
27cce                 | LR__4326
27cce     62 72 2E    | 	byte	"br."
27cd1     00          | 	byte	0
27cd2                 | LR__4327
27cd2     6D 6F 75 73 
27cd6     65          | 	byte	"mouse"
27cd7     00          | 	byte	0
27cd8                 | LR__4328
27cd8     63 75 72 73 
27cdc     6F 72       | 	byte	"cursor"
27cde     00          | 	byte	0
27cdf                 | LR__4329
27cdf     63 6C 69 63 
27ce3     6B          | 	byte	"click"
27ce4     00          | 	byte	0
27ce5                 | LR__4330
27ce5     6F 6E       | 	byte	"on"
27ce7     00          | 	byte	0
27ce8                 | LR__4331
27ce8     31          | 	byte	"1"
27ce9     00          | 	byte	0
27cea                 | LR__4332
27cea     6F 66 66    | 	byte	"off"
27ced     00          | 	byte	0
27cee                 | LR__4333
27cee     30          | 	byte	"0"
27cef     00          | 	byte	0
27cf0                 | LR__4334
27cf0     6D 6F 64 65 | 	byte	"mode"
27cf4     00          | 	byte	0
27cf5                 | LR__4335
27cf5     6D 2E       | 	byte	"m."
27cf7     00          | 	byte	0
27cf8                 | LR__4336
27cf8     61 74 61 72 
27cfc     69          | 	byte	"atari"
27cfd     00          | 	byte	0
27cfe                 | LR__4337
27cfe     30          | 	byte	"0"
27cff     00          | 	byte	0
27d00                 | LR__4338
27d00     70 63 5F 61 
27d04     6D 62 65 72 | 	byte	"pc_amber"
27d08     00          | 	byte	0
27d09                 | LR__4339
27d09     31          | 	byte	"1"
27d0a     00          | 	byte	0
27d0b                 | LR__4340
27d0b     70 63 5F 67 
27d0f     72 65 65 6E | 	byte	"pc_green"
27d13     00          | 	byte	0
27d14                 | LR__4341
27d14     32          | 	byte	"2"
27d15     00          | 	byte	0
27d16                 | LR__4342
27d16     70 63 5F 77 
27d1a     68 69 74 65 | 	byte	"pc_white"
27d1e     00          | 	byte	0
27d1f                 | LR__4343
27d1f     33          | 	byte	"3"
27d20     00          | 	byte	0
27d21                 | LR__4344
27d21     73 74       | 	byte	"st"
27d23     00          | 	byte	0
27d24                 | LR__4345
27d24     34          | 	byte	"4"
27d25     00          | 	byte	0
27d26                 | LR__4346
27d26                 | 	byte	
27d26     00          | 	byte	0
27d27                 | LR__4347
27d27                 | 	byte	
27d27     00          | 	byte	0
27d28                 | LR__4348
27d28                 | 	byte	
27d28     00          | 	byte	0
27d29                 | LR__4349
27d29                 | 	byte	
27d29     00          | 	byte	0
27d2a                 | LR__4350
27d2a     20 55 73 65 
27d2e     72 20 66 75 
27d32     6E 63 74 69 
27d36     6F 6E 73 20 
27d3a     61 6E 64 20 
27d3e     61 72 72 61 
27d42     79 73 20 6E 
27d46     6F 74 20 79 
27d4a     65 74 20 69 
27d4e     6D 70 6C 65 
27d52     6D 65 6E 74 
27d56     65 64       | 	byte	" User functions and arrays not yet implemented"
27d58     00          | 	byte	0
27d59                 | LR__4351
27d59                 | 	byte	
27d59     00          | 	byte	0
27d5a                 | LR__4352
27d5a                 | 	byte	
27d5a     00          | 	byte	0
27d5b                 | LR__4353
27d5b     52 65 61 64 
27d5f     79          | 	byte	"Ready"
27d60     00          | 	byte	0
27d61                 | LR__4354
27d61     2B          | 	byte	"+"
27d62     00          | 	byte	0
27d63                 | LR__4355
27d63     2D          | 	byte	"-"
27d64     00          | 	byte	0
27d65                 | LR__4356
27d65     6F 72       | 	byte	"or"
27d67     00          | 	byte	0
27d68                 | LR__4357
27d68     78 6F 72    | 	byte	"xor"
27d6b     00          | 	byte	0
27d6c                 | LR__4358
27d6c     2A          | 	byte	"*"
27d6d     00          | 	byte	0
27d6e                 | LR__4359
27d6e     2F          | 	byte	"/"
27d6f     00          | 	byte	0
27d70                 | LR__4360
27d70     61 6E 64    | 	byte	"and"
27d73     00          | 	byte	0
27d74                 | LR__4361
27d74     64 69 76    | 	byte	"div"
27d77     00          | 	byte	0
27d78                 | LR__4362
27d78     6D 6F 64    | 	byte	"mod"
27d7b     00          | 	byte	0
27d7c                 | LR__4363
27d7c     73 68 6C    | 	byte	"shl"
27d7f     00          | 	byte	0
27d80                 | LR__4364
27d80     73 68 72    | 	byte	"shr"
27d83     00          | 	byte	0
27d84                 | LR__4365
27d84     5E          | 	byte	"^"
27d85     00          | 	byte	0
27d86                 | LR__4366
27d86     6E 6F 74    | 	byte	"not"
27d89     00          | 	byte	0
27d8a                 | LR__4367
27d8a     40          | 	byte	"@"
27d8b     00          | 	byte	0
27d8c                 | LR__4368
27d8c     3D          | 	byte	"="
27d8d     00          | 	byte	0
27d8e                 | LR__4369
27d8e     3E 3D       | 	byte	">="
27d90     00          | 	byte	0
27d91                 | LR__4370
27d91     3C 3D       | 	byte	"<="
27d93     00          | 	byte	0
27d94                 | LR__4371
27d94     3C          | 	byte	"<"
27d95     00          | 	byte	0
27d96                 | LR__4372
27d96     3E          | 	byte	">"
27d97     00          | 	byte	0
27d98                 | LR__4373
27d98     3C 3E       | 	byte	"<>"
27d9a     00          | 	byte	0
27d9b                 | LR__4374
27d9b     2B 2B       | 	byte	"++"
27d9d     00          | 	byte	0
27d9e                 | LR__4375
27d9e     2D 2D       | 	byte	"--"
27da0     00          | 	byte	0
27da1                 | LR__4376
27da1     2B          | 	byte	"+"
27da2     00          | 	byte	0
27da3                 | LR__4377
27da3     2D          | 	byte	"-"
27da4     00          | 	byte	0
27da5                 | LR__4378
27da5     3D          | 	byte	"="
27da6     00          | 	byte	0
27da7                 | LR__4379
27da7     2C          | 	byte	","
27da8     00          | 	byte	0
27da9                 | LR__4380
27da9     2A          | 	byte	"*"
27daa     00          | 	byte	0
27dab                 | LR__4381
27dab     2F          | 	byte	"/"
27dac     00          | 	byte	0
27dad                 | LR__4382
27dad     3B          | 	byte	";"
27dae     00          | 	byte	0
27daf                 | LR__4383
27daf     22          | 	byte	34
27db0     00          | 	byte	0
27db1                 | LR__4384
27db1     5E          | 	byte	"^"
27db2     00          | 	byte	0
27db3                 | LR__4385
27db3     29          | 	byte	")"
27db4     00          | 	byte	0
27db5                 | LR__4386
27db5     28          | 	byte	"("
27db6     00          | 	byte	0
27db7                 | LR__4387
27db7     3A          | 	byte	":"
27db8     00          | 	byte	0
27db9                 | LR__4388
27db9     20          | 	byte	" "
27dba     00          | 	byte	0
27dbb                 | LR__4389
27dbb     3E          | 	byte	">"
27dbc     00          | 	byte	0
27dbd                 | LR__4390
27dbd     3C          | 	byte	"<"
27dbe     00          | 	byte	0
27dbf                 | LR__4391
27dbf     3D          | 	byte	"="
27dc0     00          | 	byte	0
27dc1                 | LR__4392
27dc1     62 65 65 70 | 	byte	"beep"
27dc5     00          | 	byte	0
27dc6                 | LR__4393
27dc6     62 2E       | 	byte	"b."
27dc8     00          | 	byte	0
27dc9                 | LR__4394
27dc9     62 6F 78    | 	byte	"box"
27dcc     00          | 	byte	0
27dcd                 | LR__4395
27dcd     62 72 75 6E | 	byte	"brun"
27dd1     00          | 	byte	0
27dd2                 | LR__4396
27dd2     62 72 2E    | 	byte	"br."
27dd5     00          | 	byte	0
27dd6                 | LR__4397
27dd6     63 69 72 63 
27dda     6C 65       | 	byte	"circle"
27ddc     00          | 	byte	0
27ddd                 | LR__4398
27ddd     63 69 2E    | 	byte	"ci."
27de0     00          | 	byte	0
27de1                 | LR__4399
27de1     63 6C 69 63 
27de5     6B          | 	byte	"click"
27de6     00          | 	byte	0
27de7                 | LR__4400
27de7     63 6C 73    | 	byte	"cls"
27dea     00          | 	byte	0
27deb                 | LR__4401
27deb     63 6F 6C 6F 
27def     72          | 	byte	"color"
27df0     00          | 	byte	0
27df1                 | LR__4402
27df1     63 2E       | 	byte	"c."
27df3     00          | 	byte	0
27df4                 | LR__4403
27df4     63 73 61 76 
27df8     65          | 	byte	"csave"
27df9     00          | 	byte	0
27dfa                 | LR__4404
27dfa     63 73 2E    | 	byte	"cs."
27dfd     00          | 	byte	0
27dfe                 | LR__4405
27dfe     63 75 72 73 
27e02     6F 72       | 	byte	"cursor"
27e04     00          | 	byte	0
27e05                 | LR__4406
27e05     64 65 66 73 
27e09     6E 64       | 	byte	"defsnd"
27e0b     00          | 	byte	0
27e0c                 | LR__4407
27e0c     64 65 66 65 
27e10     6E 76       | 	byte	"defenv"
27e12     00          | 	byte	0
27e13                 | LR__4408
27e13     64 65 66 73 
27e17     70 72 69 74 
27e1b     65          | 	byte	"defsprite"
27e1c     00          | 	byte	0
27e1d                 | LR__4409
27e1d     64 73 2E    | 	byte	"ds."
27e20     00          | 	byte	0
27e21                 | LR__4410
27e21     64 69 6D    | 	byte	"dim"
27e24     00          | 	byte	0
27e25                 | LR__4411
27e25     64 69 72    | 	byte	"dir"
27e28     00          | 	byte	0
27e29                 | LR__4412
27e29     64 72 61 77 | 	byte	"draw"
27e2d     00          | 	byte	0
27e2e                 | LR__4413
27e2e     64 72 2E    | 	byte	"dr."
27e31     00          | 	byte	0
27e32                 | LR__4414
27e32     65 6C 73 65 | 	byte	"else"
27e36     00          | 	byte	0
27e37                 | LR__4415
27e37     66 63 69 72 
27e3b     63 6C 65    | 	byte	"fcircle"
27e3e     00          | 	byte	0
27e3f                 | LR__4416
27e3f     66 63 2E    | 	byte	"fc."
27e42     00          | 	byte	0
27e43                 | LR__4417
27e43     66 69 6C 6C | 	byte	"fill"
27e47     00          | 	byte	0
27e48                 | LR__4418
27e48     66 69 2E    | 	byte	"fi."
27e4b     00          | 	byte	0
27e4c                 | LR__4419
27e4c     66 6F 6E 74 | 	byte	"font"
27e50     00          | 	byte	0
27e51                 | LR__4420
27e51     66 6F 72    | 	byte	"for"
27e54     00          | 	byte	0
27e55                 | LR__4421
27e55     66 2E       | 	byte	"f."
27e57     00          | 	byte	0
27e58                 | LR__4422
27e58     66 72 61 6D 
27e5c     65          | 	byte	"frame"
27e5d     00          | 	byte	0
27e5e                 | LR__4423
27e5e     66 72 2E    | 	byte	"fr."
27e61     00          | 	byte	0
27e62                 | LR__4424
27e62     67 6F 74 6F | 	byte	"goto"
27e66     00          | 	byte	0
27e67                 | LR__4425
27e67     67 2E       | 	byte	"g."
27e69     00          | 	byte	0
27e6a                 | LR__4426
27e6a     69 66       | 	byte	"if"
27e6c     00          | 	byte	0
27e6d                 | LR__4427
27e6d     69 6E 6B    | 	byte	"ink"
27e70     00          | 	byte	0
27e71                 | LR__4428
27e71     69 2E       | 	byte	"i."
27e73     00          | 	byte	0
27e74                 | LR__4429
27e74     6C 69 73 74 | 	byte	"list"
27e78     00          | 	byte	0
27e79                 | LR__4430
27e79     6C 2E       | 	byte	"l."
27e7b     00          | 	byte	0
27e7c                 | LR__4431
27e7c     6C 6F 61 64 | 	byte	"load"
27e80     00          | 	byte	0
27e81                 | LR__4432
27e81     6C 6F 2E    | 	byte	"lo."
27e84     00          | 	byte	0
27e85                 | LR__4433
27e85     6D 6F 64 65 | 	byte	"mode"
27e89     00          | 	byte	0
27e8a                 | LR__4434
27e8a     6D 2E       | 	byte	"m."
27e8c     00          | 	byte	0
27e8d                 | LR__4435
27e8d     6D 6F 75 73 
27e91     65          | 	byte	"mouse"
27e92     00          | 	byte	0
27e93                 | LR__4436
27e93     6E 65 77    | 	byte	"new"
27e96     00          | 	byte	0
27e97                 | LR__4437
27e97     6E 65 78 74 | 	byte	"next"
27e9b     00          | 	byte	0
27e9c                 | LR__4438
27e9c     6E 2E       | 	byte	"n."
27e9e     00          | 	byte	0
27e9f                 | LR__4439
27e9f     70 61 70 65 
27ea3     72          | 	byte	"paper"
27ea4     00          | 	byte	0
27ea5                 | LR__4440
27ea5     70 2E       | 	byte	"p."
27ea7     00          | 	byte	0
27ea8                 | LR__4441
27ea8     70 69 6E 66 
27eac     6C 6F 61 74 | 	byte	"pinfloat"
27eb0     00          | 	byte	0
27eb1                 | LR__4442
27eb1     70 69 6E 68 
27eb5     69          | 	byte	"pinhi"
27eb6     00          | 	byte	0
27eb7                 | LR__4443
27eb7     70 69 6E 6C 
27ebb     6F          | 	byte	"pinlo"
27ebc     00          | 	byte	0
27ebd                 | LR__4444
27ebd     70 69 6E 73 
27ec1     74 61 72 74 | 	byte	"pinstart"
27ec5     00          | 	byte	0
27ec6                 | LR__4445
27ec6     70 69 6E 74 
27eca     6F 67 67 6C 
27ece     65          | 	byte	"pintoggle"
27ecf     00          | 	byte	0
27ed0                 | LR__4446
27ed0     70 69 6E 77 
27ed4     72 69 74 65 | 	byte	"pinwrite"
27ed8     00          | 	byte	0
27ed9                 | LR__4447
27ed9     70 6C 61 79 | 	byte	"play"
27edd     00          | 	byte	0
27ede                 | LR__4448
27ede     70 6C 6F 74 | 	byte	"plot"
27ee2     00          | 	byte	0
27ee3                 | LR__4449
27ee3     70 6C 2E    | 	byte	"pl."
27ee6     00          | 	byte	0
27ee7                 | LR__4450
27ee7     70 6F 73 69 
27eeb     74 69 6F 6E | 	byte	"position"
27eef     00          | 	byte	0
27ef0                 | LR__4451
27ef0     70 6F 73 2E 
27ef4     09          | 	byte	"pos.",9
27ef5     00          | 	byte	0
27ef6                 | LR__4452
27ef6     70 72 69 6E 
27efa     74          | 	byte	"print"
27efb     00          | 	byte	0
27efc                 | LR__4453
27efc     3F          | 	byte	"?"
27efd     00          | 	byte	0
27efe                 | LR__4454
27efe     72 75 6E    | 	byte	"run"
27f01     00          | 	byte	0
27f02                 | LR__4455
27f02     73 61 76 65 | 	byte	"save"
27f06     00          | 	byte	0
27f07                 | LR__4456
27f07     73 2E       | 	byte	"s."
27f09     00          | 	byte	0
27f0a                 | LR__4457
27f0a     73 70 72 69 
27f0e     74 65       | 	byte	"sprite"
27f10     00          | 	byte	0
27f11                 | LR__4458
27f11     73 70 2E    | 	byte	"sp."
27f14     00          | 	byte	0
27f15                 | LR__4459
27f15     74 68 65 6E | 	byte	"then"
27f19     00          | 	byte	0
27f1a                 | LR__4460
27f1a     77 61 69 74 
27f1e     6D 73       | 	byte	"waitms"
27f20     00          | 	byte	0
27f21                 | LR__4461
27f21     77 61 69 74 
27f25     63 6C 6F 63 
27f29     6B          | 	byte	"waitclock"
27f2a     00          | 	byte	0
27f2b                 | LR__4462
27f2b     77 63 2E    | 	byte	"wc."
27f2e     00          | 	byte	0
27f2f                 | LR__4463
27f2f     77 61 69 74 
27f33     76 62 6C    | 	byte	"waitvbl"
27f36     00          | 	byte	0
27f37                 | LR__4464
27f37     77 76 2E    | 	byte	"wv."
27f3a     00          | 	byte	0
27f3b                 | LR__4465
27f3b     77 78 70 69 
27f3f     6E          | 	byte	"wxpin"
27f40     00          | 	byte	0
27f41                 | LR__4466
27f41     77 79 70 69 
27f45     6E          | 	byte	"wypin"
27f46     00          | 	byte	0
27f47                 | LR__4467
27f47     61 63 6F 73 | 	byte	"acos"
27f4b     00          | 	byte	0
27f4c                 | LR__4468
27f4c     61 73 69 6E | 	byte	"asin"
27f50     00          | 	byte	0
27f51                 | LR__4469
27f51     61 74 6E    | 	byte	"atn"
27f54     00          | 	byte	0
27f55                 | LR__4470
27f55     63 6F 73    | 	byte	"cos"
27f58     00          | 	byte	0
27f59                 | LR__4471
27f59     67 65 74 70 
27f5d     69 78 65 6C | 	byte	"getpixel"
27f61     00          | 	byte	0
27f62                 | LR__4472
27f62     67 65 2E    | 	byte	"ge."
27f65     00          | 	byte	0
27f66                 | LR__4473
27f66     67 65 74 74 
27f6a     69 6D 65    | 	byte	"gettime"
27f6d     00          | 	byte	0
27f6e                 | LR__4474
27f6e     6D 6F 75 73 
27f72     65 6B       | 	byte	"mousek"
27f74     00          | 	byte	0
27f75                 | LR__4475
27f75     6D 6F 75 73 
27f79     65 77       | 	byte	"mousew"
27f7b     00          | 	byte	0
27f7c                 | LR__4476
27f7c     6D 6F 75 73 
27f80     65 78       | 	byte	"mousex"
27f82     00          | 	byte	0
27f83                 | LR__4477
27f83     6D 6F 75 73 
27f87     65 79       | 	byte	"mousey"
27f89     00          | 	byte	0
27f8a                 | LR__4478
27f8a     70 69 6E 72 
27f8e     65 61 64    | 	byte	"pinread"
27f91     00          | 	byte	0
27f92                 | LR__4479
27f92     72 64 70 69 
27f96     6E          | 	byte	"rdpin"
27f97     00          | 	byte	0
27f98                 | LR__4480
27f98     72 71 70 69 
27f9c     6E          | 	byte	"rqpin"
27f9d     00          | 	byte	0
27f9e                 | LR__4481
27f9e     72 6E 64    | 	byte	"rnd"
27fa1     00          | 	byte	0
27fa2                 | LR__4482
27fa2     73 69 6E    | 	byte	"sin"
27fa5     00          | 	byte	0
27fa6                 | LR__4483
27fa6     73 71 72    | 	byte	"sqr"
27fa9     00          | 	byte	0
27faa                 | LR__4484
27faa     73 74 69 63 
27fae     6B          | 	byte	"stick"
27faf     00          | 	byte	0
27fb0                 | LR__4485
27fb0     73 74 72 69 
27fb4     67          | 	byte	"strig"
27fb5     00          | 	byte	0
27fb6                 | LR__4486
27fb6     74 61 6E    | 	byte	"tan"
27fb9     00          | 	byte	0
27fba                 | LR__4487
27fba     61          | 	byte	"a"
27fbb     00          | 	byte	0
27fbc                 | LR__4488
27fbc     7A          | 	byte	"z"
27fbd     00          | 	byte	0
27fbe                 | LR__4489
27fbe     5F          | 	byte	"_"
27fbf     00          | 	byte	0
27fc0                 | LR__4490
27fc0     61          | 	byte	"a"
27fc1     00          | 	byte	0
27fc2                 | LR__4491
27fc2     7A          | 	byte	"z"
27fc3     00          | 	byte	0
27fc4                 | LR__4492
27fc4     30          | 	byte	"0"
27fc5     00          | 	byte	0
27fc6                 | LR__4493
27fc6     39          | 	byte	"9"
27fc7     00          | 	byte	0
27fc8                 | LR__4494
27fc8     5F          | 	byte	"_"
27fc9     00          | 	byte	0
27fca                 | LR__4495
27fca     2E          | 	byte	"."
27fcb     00          | 	byte	0
27fcc                 | LR__4496
27fcc     61          | 	byte	"a"
27fcd     00          | 	byte	0
27fce                 | LR__4497
27fce     7A          | 	byte	"z"
27fcf     00          | 	byte	0
27fd0                 | LR__4498
27fd0     30          | 	byte	"0"
27fd1     00          | 	byte	0
27fd2                 | LR__4499
27fd2     39          | 	byte	"9"
27fd3     00          | 	byte	0
27fd4                 | LR__4500
27fd4     5F          | 	byte	"_"
27fd5     00          | 	byte	0
27fd6                 | LR__4501
27fd6     24          | 	byte	"$"
27fd7     00          | 	byte	0
27fd8                 | LR__4502
27fd8     25          | 	byte	"%"
27fd9     00          | 	byte	0
27fda                 | LR__4503
27fda     21          | 	byte	"!"
27fdb     00          | 	byte	0
27fdc                 | LR__4504
27fdc     30          | 	byte	"0"
27fdd     00          | 	byte	0
27fde                 | LR__4505
27fde     39          | 	byte	"9"
27fdf     00          | 	byte	0
27fe0                 | LR__4506
27fe0     2E          | 	byte	"."
27fe1     00          | 	byte	0
27fe2                 | LR__4507
27fe2     24          | 	byte	"$"
27fe3     00          | 	byte	0
27fe4                 | LR__4508
27fe4     25          | 	byte	"%"
27fe5     00          | 	byte	0
27fe6                 | LR__4509
27fe6     2D          | 	byte	"-"
27fe7     00          | 	byte	0
27fe8                 | LR__4510
27fe8     2E          | 	byte	"."
27fe9     00          | 	byte	0
27fea                 | LR__4511
27fea     30          | 	byte	"0"
27feb     00          | 	byte	0
27fec                 | LR__4512
27fec     39          | 	byte	"9"
27fed     00          | 	byte	0
27fee                 | LR__4513
27fee     5F          | 	byte	"_"
27fef     00          | 	byte	0
27ff0                 | LR__4514
27ff0     2E          | 	byte	"."
27ff1     00          | 	byte	0
27ff2                 | LR__4515
27ff2     45          | 	byte	"E"
27ff3     00          | 	byte	0
27ff4                 | LR__4516
27ff4     65          | 	byte	"e"
27ff5     00          | 	byte	0
27ff6                 | LR__4517
27ff6     2D          | 	byte	"-"
27ff7     00          | 	byte	0
27ff8                 | LR__4518
27ff8     2D          | 	byte	"-"
27ff9     00          | 	byte	0
27ffa                 | LR__4519
27ffa     65          | 	byte	"e"
27ffb     00          | 	byte	0
27ffc                 | LR__4520
27ffc     2E          | 	byte	"."
27ffd     00          | 	byte	0
27ffe                 | LR__4521
27ffe     45          | 	byte	"E"
27fff     00          | 	byte	0
28000                 | LR__4522
28000     65          | 	byte	"e"
28001     00          | 	byte	0
28002                 | LR__4523
28002     30          | 	byte	"0"
28003     00          | 	byte	0
28004                 | LR__4524
28004     39          | 	byte	"9"
28005     00          | 	byte	0
28006                 | LR__4525
28006     24          | 	byte	"$"
28007     00          | 	byte	0
28008                 | LR__4526
28008     25          | 	byte	"%"
28009     00          | 	byte	0
2800a                 | LR__4527
2800a     2D          | 	byte	"-"
2800b     00          | 	byte	0
2800c                 | LR__4528
2800c     30          | 	byte	"0"
2800d     00          | 	byte	0
2800e                 | LR__4529
2800e     39          | 	byte	"9"
2800f     00          | 	byte	0
28010                 | LR__4530
28010     5F          | 	byte	"_"
28011     00          | 	byte	0
28012                 | LR__4531
28012     30          | 	byte	"0"
28013     00          | 	byte	0
28014                 | LR__4532
28014     39          | 	byte	"9"
28015     00          | 	byte	0
28016                 | LR__4533
28016     5F          | 	byte	"_"
28017     00          | 	byte	0
28018                 | LR__4534
28018     22          | 	byte	34
28019     00          | 	byte	0
2801a                 | LR__4535
2801a     22          | 	byte	34
2801b     00          | 	byte	0
2801c                 | LR__4536
2801c     28          | 	byte	"("
2801d     00          | 	byte	0
2801e                 | LR__4537
2801e     61 73       | 	byte	"as"
28020     00          | 	byte	0
28021                 | LR__4538
28021     61 73       | 	byte	"as"
28023     00          | 	byte	0
28024                 | LR__4539
28024     2C          | 	byte	","
28025     00          | 	byte	0
28026                 | LR__4540
28026     29          | 	byte	")"
28027     00          | 	byte	0
28028                 | LR__4541
28028     29          | 	byte	")"
28029     00          | 	byte	0
2802a                 | LR__4542
2802a     61 73       | 	byte	"as"
2802c     00          | 	byte	0
2802d                 | LR__4543
2802d     62 79 74 65 | 	byte	"byte"
28031     00          | 	byte	0
28032                 | LR__4544
28032     75 62 79 74 
28036     65          | 	byte	"ubyte"
28037     00          | 	byte	0
28038                 | LR__4545
28038     73 68 6F 72 
2803c     74          | 	byte	"short"
2803d     00          | 	byte	0
2803e                 | LR__4546
2803e     75 73 68 6F 
28042     72 74       | 	byte	"ushort"
28044     00          | 	byte	0
28045                 | LR__4547
28045     6C 6F 6E 67 | 	byte	"long"
28049     00          | 	byte	0
2804a                 | LR__4548
2804a     69 6E 74 65 
2804e     67 65 72    | 	byte	"integer"
28051     00          | 	byte	0
28052                 | LR__4549
28052     75 6C 6F 6E 
28056     67          | 	byte	"ulong"
28057     00          | 	byte	0
28058                 | LR__4550
28058     69 6E 74 36 
2805c     34          | 	byte	"int64"
2805d     00          | 	byte	0
2805e                 | LR__4551
2805e     75 69 6E 74 
28062     36 34       | 	byte	"uint64"
28064     00          | 	byte	0
28065                 | LR__4552
28065     73 69 6E 67 
28069     6C 65       | 	byte	"single"
2806b     00          | 	byte	0
2806c                 | LR__4553
2806c     64 6F 75 62 
28070     6C 65       | 	byte	"double"
28072     00          | 	byte	0
28073                 | LR__4554
28073     73 74 72 69 
28077     6E 67       | 	byte	"string"
28079     00          | 	byte	0
2807a                 | LR__4555
2807a     74 6F       | 	byte	"to"
2807c     00          | 	byte	0
2807d                 | LR__4556
2807d     73 74 65 70 | 	byte	"step"
28081     00          | 	byte	0
28082                 | LR__4557
28082     73 74 2E    | 	byte	"st."
28085     00          | 	byte	0
28086                 | LR__4558
28086     57 65 20 68 
2808a     61 76 65 20 
2808e     61 20 73 6C 
28092     6F 77 20 67 
28096     6F 74 6F 2C 
2809a     20 74 6F 64 
2809e     6F 20 20    | 	byte	"We have a slow goto, todo  "
280a1     00          | 	byte	0
280a2                 | LR__4559
280a2     6E 6F 6E 61 
280a6     6D 65 2E 62 
280aa     61 73       | 	byte	"noname.bas"
280ac     00          | 	byte	0
280ad                 | LR__4560
280ad                 | 	byte	
280ad     00          | 	byte	0
280ae                 | LR__4561
280ae     6E 6F 6E 61 
280b2     6D 65 2E 62 
280b6     61 73       | 	byte	"noname.bas"
280b8     00          | 	byte	0
280b9                 | LR__4562
280b9     2F          | 	byte	"/"
280ba     00          | 	byte	0
280bb                 | LR__4563
280bb                 | 	byte	
280bb     00          | 	byte	0
280bc                 | LR__4564
280bc                 | 	byte	
280bc     00          | 	byte	0
280bd                 | LR__4565
280bd     6E 6F 6E 61 
280c1     6D 65 2E 62 
280c5     61 73       | 	byte	"noname.bas"
280c7     00          | 	byte	0
280c8                 | LR__4566
280c8     2F          | 	byte	"/"
280c9     00          | 	byte	0
280ca                 | LR__4567
280ca     53 79 73 74 
280ce     65 6D 20 65 
280d2     72 72 6F 72 
280d6     20          | 	byte	"System error "
280d7     00          | 	byte	0
280d8                 | LR__4568
280d8     3A 20       | 	byte	": "
280da     00          | 	byte	0
280db                 | LR__4569
280db     2F          | 	byte	"/"
280dc     00          | 	byte	0
280dd                 | LR__4570
280dd     30          | 	byte	"0"
280de     00          | 	byte	0
280df                 | LR__4571
280df     39          | 	byte	"9"
280e0     00          | 	byte	0
280e1                 | LR__4572
280e1                 | 	byte	
280e1     00          | 	byte	0
280e2                 | LR__4573
280e2     53 74 6F 70 
280e6     70 65 64 20 
280ea     61 74 20 6C 
280ee     69 6E 65 20 | 	byte	"Stopped at line "
280f2     00          | 	byte	0
280f3                 | LR__4574
280f3                 | 	byte	
280f3     00          | 	byte	0
280f4                 | LR__4575
280f4                 | 	byte	
280f4     00          | 	byte	0
280f5                 | LR__4576
280f5     2F 73 64 2F 
280f9     6D 65 64 69 
280fd     61 2F 68 2F | 	byte	"/sd/media/h/"
28101     00          | 	byte	0
28102                 | LR__4577
28102     53 79 73 74 
28106     65 6D 20 65 
2810a     72 72 6F 72 
2810e     20          | 	byte	"System error "
2810f     00          | 	byte	0
28110                 | LR__4578
28110     3A 20       | 	byte	": "
28112     00          | 	byte	0
28113                 | LR__4579
28113                 | 	byte	
28113     00          | 	byte	0
28114                 | LR__4580
28114                 | 	byte	
28114     00          | 	byte	0
28115                 | LR__4581
28115     2F 73 64 2F 
28119     6D 65 64 69 
2811d     61 2F 73 2F | 	byte	"/sd/media/s/"
28121     00          | 	byte	0
28122                 | LR__4582
28122     53 79 73 74 
28126     65 6D 20 65 
2812a     72 72 6F 72 
2812e     20          | 	byte	"System error "
2812f     00          | 	byte	0
28130                 | LR__4583
28130     3A 20       | 	byte	": "
28132     00          | 	byte	0
28133                 | LR__4584
28133     45 72 72 6F 
28137     72 20       | 	byte	"Error "
28139     00          | 	byte	0
2813a                 | LR__4585
2813a     3A 20       | 	byte	": "
2813c     00          | 	byte	0
2813d                 | LR__4586
2813d                 | 	byte	
2813d     00          | 	byte	0
2813e                 | LR__4587
2813e     72 6E 64 3A 
28142     20          | 	byte	"rnd: "
28143     00          | 	byte	0
28144                 | LR__4588
28144     72 6E 64 3A 
28148     20          | 	byte	"rnd: "
28149     00          | 	byte	0
2814a                 | LR__4589
2814a     73 69 6E 3A 
2814e     20          | 	byte	"sin: "
2814f     00          | 	byte	0
28150                 | LR__4590
28150     63 6F 73 3A 
28154     20          | 	byte	"cos: "
28155     00          | 	byte	0
28156                 | LR__4591
28156     74 61 6E 3A 
2815a     20          | 	byte	"tan: "
2815b     00          | 	byte	0
2815c                 | LR__4592
2815c     61 73 69 6E 
28160     3A 20       | 	byte	"asin: "
28162     00          | 	byte	0
28163                 | LR__4593
28163     61 63 6F 73 
28167     3A 20       | 	byte	"acos: "
28169     00          | 	byte	0
2816a                 | LR__4594
2816a     61 74 6E 3A 
2816e     20          | 	byte	"atn: "
2816f     00          | 	byte	0
28170                 | LR__4595
28170     73 71 72 3A 
28174     20          | 	byte	"sqr: "
28175     00          | 	byte	0
28176                 | LR__4596
28176     73 74 69 63 
2817a     6B 3A 20    | 	byte	"stick: "
2817d     00          | 	byte	0
2817e                 | LR__4597
2817e     73 74 72 69 
28182     67 3A 20    | 	byte	"strig: "
28185     00          | 	byte	0
28186                 | LR__4598
28186     67 65 74 70 
2818a     69 78 65 6C 
2818e     3A 20       | 	byte	"getpixel: "
28190     00          | 	byte	0
28191                 | LR__4599
28191                 | 	byte	
28191     00          | 	byte	0
28192                 | LR__4600
28192     2F 73 64 2F 
28196     62 61 73    | 	byte	"/sd/bas"
28199     00          | 	byte	0
2819a                 | LR__4601
2819a     57 6F 72 6B 
2819e     69 6E 67 20 
281a2     64 69 72 65 
281a6     63 74 6F 72 
281aa     79 3A 20    | 	byte	"Working directory: "
281ad     00          | 	byte	0
281ae                 | LR__4602
281ae     2A          | 	byte	"*"
281af     00          | 	byte	0
281b0                 | LR__4603
281b0                 | 	byte	
281b0     00          | 	byte	0
281b1                 | LR__4604
281b1     5B 64 69 72 
281b5     5D 20       | 	byte	"[dir] "
281b7     00          | 	byte	0
281b8                 | LR__4605
281b8     2A          | 	byte	"*"
281b9     00          | 	byte	0
281ba                 | LR__4606
281ba                 | 	byte	
281ba     00          | 	byte	0
281bb                 | LR__4607
281bb     2D 2D 2D 2D 
281bf     2D 6D 6F 72 
281c3     65 2C 20 70 
281c7     72 65 73 73 
281cb     20 61 6E 79 
281cf     20 6B 65 79 | 	byte	"-----more, press any key"
281d3     00          | 	byte	0
281d4                 | LR__4608
281d4     20 20 20 20 
      ...             
281ec     20 20 20 20 
281f0     20          | 	byte	"                             "
281f1     00          | 	byte	0
281f2                 | LR__4609
281f2     2F          | 	byte	"/"
281f3     00          | 	byte	0
281f4                 | LR__4610
281f4     2F 73 64 2F 
281f8     62 69 6E 2F | 	byte	"/sd/bin/"
281fc     00          | 	byte	0
281fd                 | LR__4611
281fd     53 79 73 74 
28201     65 6D 20 65 
28205     72 72 6F 72 
28209     20          | 	byte	"System error "
2820a     00          | 	byte	0
2820b                 | LR__4612
2820b     3A 20       | 	byte	": "
2820d     00          | 	byte	0
2820e                 | LR__4613
2820e                 | 	byte	
2820e     00          | 	byte	0
2820f                 | LR__4614
2820f     45 78 70 65 
28213     63 74 65 64 
28217     20 6E 75 6D 
2821b     62 65 72 2C 
2821f     20 67 6F 74 
28223     20 73 6F 6D 
28227     65 74 68 69 
2822b     6E 67 20 65 
2822f     6C 73 65 2E | 	byte	"Expected number, got something else."
28233     00          | 	byte	0
28234                 | LR__4615
28234     43 61 6E 6E 
28238     6F 74 20 61 
2823c     64 64 20 61 
28240     20 6E 75 6D 
28244     62 65 72 20 
28248     74 6F 20 61 
2824c     20 73 74 72 
28250     69 6E 67 2E | 	byte	"Cannot add a number to a string."
28254     00          | 	byte	0
28255                 | LR__4616
28255     43 61 6E 6E 
28259     6F 74 20 73 
2825d     75 62 73 74 
28261     72 61 63 74 
28265     20 73 74 72 
28269     69 6E 67 73 
2826d     2E          | 	byte	"Cannot substract strings."
2826e     00          | 	byte	0
2826f                 | LR__4617
2826f     55 6E 6B 6E 
28273     6F 77 6E 20 
28277     65 72 72 6F 
2827b     72 20 77 68 
2827f     69 6C 65 20 
28283     61 64 64 69 
28287     6E 67 2E    | 	byte	"Unknown error while adding."
2828a     00          | 	byte	0
2828b                 | LR__4618
2828b     55 6E 6B 6E 
2828f     6F 77 6E 20 
28293     65 72 72 6F 
28297     72 20 77 68 
2829b     69 6C 65 20 
2829f     73 75 62 73 
282a3     74 72 61 63 
282a7     74 69 6E 67 
282ab     2E          | 	byte	"Unknown error while substracting."
282ac     00          | 	byte	0
282ad                 | LR__4619
282ad     43 61 6E 6E 
282b1     6F 74 20 64 
282b5     6F 20 6C 6F 
282b9     67 69 63 20 
282bd     6F 70 65 72 
282c1     61 74 69 6F 
282c5     6E 20 6F 6E 
282c9     20 73 74 72 
282cd     69 6E 67 20 
282d1     6F 72 20 66 
282d5     6C 6F 61 74 
282d9     2E          | 	byte	"Cannot do logic operation on string or float."
282da     00          | 	byte	0
282db                 | LR__4620
282db     55 6E 6B 6E 
282df     6F 77 6E 20 
282e3     65 72 72 6F 
282e7     72 20 77 68 
282eb     69 6C 65 20 
282ef     64 6F 69 6E 
282f3     67 20 6C 6F 
282f7     67 69 63 20 
282fb     6F 70 65 72 
282ff     61 74 69 6F 
28303     6E 2E       | 	byte	"Unknown error while doing logic operation."
28305     00          | 	byte	0
28306                 | LR__4621
28306     43 61 6E 6E 
2830a     6F 74 20 6D 
2830e     75 6C 74 69 
28312     70 6C 79 20 
28316     73 74 72 69 
2831a     6E 67 73 2E | 	byte	"Cannot multiply strings."
2831e     00          | 	byte	0
2831f                 | LR__4622
2831f     55 6E 6B 6E 
28323     6F 77 6E 20 
28327     65 72 72 6F 
2832b     72 20 77 68 
2832f     69 6C 65 20 
28333     6D 75 6C 74 
28337     69 70 6C 79 
2833b     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2833f     00          | 	byte	0
28340                 | LR__4623
28340     43 61 6E 6E 
28344     6F 74 20 64 
28348     69 76 69 64 
2834c     65 20 73 74 
28350     72 69 6E 67 
28354     73 2E       | 	byte	"Cannot divide strings."
28356     00          | 	byte	0
28357                 | LR__4624
28357     55 6E 6B 6E 
2835b     6F 77 6E 20 
2835f     65 72 72 6F 
28363     72 20 77 68 
28367     69 6C 65 20 
2836b     64 69 76 69 
2836f     64 69 6E 67 
28373     2E          | 	byte	"Unknown error while dividing."
28374     00          | 	byte	0
28375                 | LR__4625
28375     43 61 6E 6E 
28379     6F 74 20 63 
2837d     6F 6D 70 75 
28381     74 65 20 61 
28385     20 70 6F 77 
28389     65 72 20 6F 
2838d     66 20 61 20 
28391     73 74 72 69 
28395     6E 67 2E    | 	byte	"Cannot compute a power of a string."
28398     00          | 	byte	0
28399                 | LR__4626
28399     55 6E 6B 6E 
2839d     6F 77 6E 20 
283a1     65 72 72 6F 
283a5     72 20 77 68 
283a9     69 6C 65 20 
283ad     63 6F 6D 70 
283b1     75 74 69 6E 
283b5     67 20 61 20 
283b9     70 6F 77 65 
283bd     72 2E       | 	byte	"Unknown error while computing a power."
283bf     00          | 	byte	0
283c0                 | LR__4627
283c0     52 69 67 68 
283c4     74 20 70 61 
283c8     72 65 6E 74 
283cc     68 65 73 69 
283d0     73 20 65 78 
283d4     70 65 63 74 
283d8     65 64 2E    | 	byte	"Right parenthesis expected."
283db     00          | 	byte	0
283dc                 | LR__4628
283dc     45 78 70 65 
283e0     63 74 65 64 
283e4     20 73 74 72 
283e8     69 6E 67 2E | 	byte	"Expected string."
283ec     00          | 	byte	0
283ed                 | LR__4629
283ed     45 78 70 65 
283f1     63 74 65 64 
283f5     20 66 6C 6F 
283f9     61 74 2E    | 	byte	"Expected float."
283fc     00          | 	byte	0
283fd                 | LR__4630
283fd     45 78 70 65 
28401     63 74 65 64 
28405     20 75 6E 73 
28409     69 67 6E 65 
2840d     64 20 69 6E 
28411     74 65 67 65 
28415     72 2E       | 	byte	"Expected unsigned integer."
28417     00          | 	byte	0
28418                 | LR__4631
28418     45 78 70 65 
2841c     63 74 65 64 
28420     20 69 6E 74 
28424     65 67 65 72 
28428     2E          | 	byte	"Expected integer."
28429     00          | 	byte	0
2842a                 | LR__4632
2842a     4E 6F 20 6D 
2842e     6F 72 65 20 
28432     76 61 72 69 
28436     61 62 6C 65 
2843a     20 73 6C 6F 
2843e     74 73 2E    | 	byte	"No more variable slots."
28441     00          | 	byte	0
28442                 | LR__4633
28442     56 61 72 69 
28446     61 62 6C 65 
2844a     20 6E 6F 74 
2844e     20 66 6F 75 
28452     6E 64 2E    | 	byte	"Variable not found."
28455     00          | 	byte	0
28456                 | LR__4634
28456     43 6F 6D 6D 
2845a     61 20 65 78 
2845e     70 65 63 74 
28462     65 64 2E    | 	byte	"Comma expected."
28465     00          | 	byte	0
28466                 | LR__4635
28466     43 6F 6D 6D 
2846a     61 20 6F 72 
2846e     20 73 65 6D 
28472     69 63 6F 6C 
28476     6F 6E 20 65 
2847a     78 70 65 63 
2847e     74 65 64 2E | 	byte	"Comma or semicolon expected."
28482     00          | 	byte	0
28483                 | LR__4636
28483     55 6E 6B 6E 
28487     6F 77 6E 20 
2848b     63 6F 6D 6D 
2848f     61 6E 64 2E | 	byte	"Unknown command."
28493     00          | 	byte	0
28494                 | LR__4637
28494     53 74 61 63 
28498     6B 20 75 6E 
2849c     64 65 72 66 
284a0     6C 6F 77 2E | 	byte	"Stack underflow."
284a4     00          | 	byte	0
284a5                 | LR__4638
284a5     43 61 6E 6E 
284a9     6F 74 20 65 
284ad     78 65 63 75 
284b1     74 65 20 67 
284b5     6F 74 6F 20 
284b9     69 6E 20 74 
284bd     68 65 20 69 
284c1     6D 6D 65 64 
284c5     69 61 74 65 
284c9     20 6D 6F 64 
284cd     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
284cf     00          | 	byte	0
284d0                 | LR__4639
284d0     43 61 6E 6E 
284d4     6F 74 20 6C 
284d8     6F 61 64 20 
284dc     66 72 6F 6D 
284e0     20 74 68 69 
284e4     73 20 66 69 
284e8     6C 65 2E    | 	byte	"Cannot load from this file."
284eb     00          | 	byte	0
284ec                 | LR__4640
284ec     54 68 65 20 
284f0     70 72 6F 67 
284f4     72 61 6D 20 
284f8     69 73 20 65 
284fc     6D 70 74 79 
28500     2E          | 	byte	"The program is empty."
28501     00          | 	byte	0
28502                 | LR__4641
28502     49 66 20 61 
28506     66 74 65 72 
2850a     20 69 66 2E | 	byte	"If after if."
2850e     00          | 	byte	0
2850f                 | LR__4642
2850f     45 6D 70 74 
28513     79 20 65 78 
28517     70 72 65 73 
2851b     73 69 6F 6E 
2851f     2E          | 	byte	"Empty expression."
28520     00          | 	byte	0
28521                 | LR__4643
28521     53 74 72 69 
28525     6E 67 20 65 
28529     78 70 65 63 
2852d     74 65 64 2E | 	byte	"String expected."
28531     00          | 	byte	0
28532                 | LR__4644
28532     49 6E 74 65 
28536     72 70 72 65 
2853a     74 65 72 20 
2853e     69 6E 74 65 
28542     72 6E 61 6C 
28546     20 65 72 72 
2854a     6F 72 2E    | 	byte	"Interpreter internal error."
2854d     00          | 	byte	0
2854e                 | LR__4645
2854e     45 78 70 65 
28552     63 74 65 64 
28556     20 61 73 73 
2855a     69 67 6E 2E | 	byte	"Expected assign."
2855e     00          | 	byte	0
2855f                 | LR__4646
2855f     45 78 70 65 
28563     63 74 65 64 
28567     20 27 74 6F 
2856b     27 2E       | 	byte	"Expected 'to'."
2856d     00          | 	byte	0
2856e                 | LR__4647
2856e     45 78 70 65 
28572     63 74 65 64 
28576     20 69 6E 74 
2857a     65 67 65 72 
2857e     20 76 61 72 
28582     69 61 62 6C 
28586     65 2E       | 	byte	"Expected integer variable."
28588     00          | 	byte	0
28589                 | LR__4648
28589     55 6E 69 6E 
2858d     69 74 69 61 
28591     6C 69 7A 65 
28595     64 20 76 61 
28599     72 69 61 62 
2859d     6C 65 20 69 
285a1     6E 20 27 6E 
285a5     65 78 74 27 
285a9     2C 20 75 73 
285ad     65 20 27 66 
285b1     6F 72 27 20 
285b5     62 65 66 6F 
285b9     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
285bc     00          | 	byte	0
285bd                 | LR__4649
285bd     4E 6F 20 6D 
285c1     6F 72 65 20 
285c5     73 6C 6F 74 
285c9     73 20 66 6F 
285cd     72 20 27 66 
285d1     6F 72 27 2E | 	byte	"No more slots for 'for'."
285d5     00          | 	byte	0
285d6                 | LR__4650
285d6     27 4E 65 78 
285da     74 27 20 64 
285de     6F 65 73 6E 
285e2     27 74 20 6D 
285e6     61 74 63 68 
285ea     20 27 66 6F 
285ee     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
285f1     00          | 	byte	0
285f2                 | LR__4651
285f2     27 47 6F 74 
285f6     6F 27 20 74 
285fa     61 72 67 65 
285fe     74 20 6C 69 
28602     6E 65 20 6E 
28606     6F 74 20 66 
2860a     6F 75 6E 64 
2860e     2E          | 	byte	"'Goto' target line not found."
2860f     00          | 	byte	0
28610                 | LR__4652
28610     42 61 64 20 
28614     6E 75 6D 62 
28618     65 72 20 6F 
2861c     66 20 70 61 
28620     72 61 6D 65 
28624     74 65 72 73 | 	byte	"Bad number of parameters"
28628     00          | 	byte	0
28629                 | LR__4653
28629     46 75 6E 63 
2862d     74 69 6F 6E 
28631     20 75 6E 64 
28635     65 66 69 6E 
28639     65 64 20 66 
2863d     6F 72 20 73 
28641     74 72 69 6E 
28645     67 73       | 	byte	"Function undefined for strings"
28647     00          | 	byte	0
28648                 | LR__4654
28648     42 61 64 20 
2864c     70 61 72 61 
28650     6D 65 74 65 
28654     72 2E       | 	byte	"Bad parameter."
28656     00          | 	byte	0
28657                 | LR__4655
28657     43 61 6E 6E 
2865b     6F 74 20 64 
2865f     65 63 6C 61 
28663     72 65 20 61 
28667     6E 20 61 72 
2866b     72 61 79 3A 
2866f     20 74 68 65 
28673     20 76 61 72 
28677     69 61 62 6C 
2867b     65 20 65 78 
2867f     69 73 74 73 
28683     2E          | 	byte	"Cannot declare an array: the variable exists."
28684     00          | 	byte	0
28685                 | LR__4656
28685     45 78 70 65 
28689     63 74 65 64 
2868d     20 27 28 27 
28691     2E          | 	byte	"Expected '('."
28692     00          | 	byte	0
28693                 | LR__4657
28693     45 78 70 65 
28697     63 74 65 64 
2869b     20 27 29 27 
2869f     20 6F 72 20 
286a3     27 2C 27 2E | 	byte	"Expected ')' or ','."
286a7     00          | 	byte	0
286a8                 | LR__4658
286a8     4E 6F 20 6D 
286ac     6F 72 65 20 
286b0     74 68 61 6E 
286b4     20 33 20 64 
286b8     69 6D 65 6E 
286bc     73 69 6F 6E 
286c0     73 20 73 75 
286c4     70 70 6F 72 
286c8     74 65 64    | 	byte	"No more than 3 dimensions supported"
286cb     00          | 	byte	0
286cc                 | LR__4659
286cc     56 61 72 69 
286d0     61 62 6C 65 
286d4     20 6E 61 6D 
286d8     65 20 65 78 
286dc     70 65 63 74 
286e0     65 64       | 	byte	"Variable name expected"
286e2     00          | 	byte	0
286e3                 | LR__4660
286e3     54 79 70 65 
286e7     20 6E 61 6D 
286eb     65 20 65 78 
286ef     70 65 63 74 
286f3     65 64       | 	byte	"Type name expected"
286f5     00          | 	byte	0
286f6                 | LR__4661
286f6     54 79 70 65 
286fa     20 6E 6F 74 
286fe     20 73 75 70 
28702     70 6F 72 74 
28706     65 64 20 79 
2870a     65 74       | 	byte	"Type not supported yet"
2870c     00          | 	byte	0
2870d                 | LR__4662
2870d     45 72 72 6F 
28711     72 20       | 	byte	"Error "
28713     00          | 	byte	0
28714                 | LR__4663
28714     3A 20       | 	byte	": "
28716     00          | 	byte	0
28717                 | LR__4664
28717     2F 73 64    | 	byte	"/sd"
2871a     00          | 	byte	0
2871b                 | LR__4665
2871b     2F 73 64 2F 
2871f     62 61 73    | 	byte	"/sd/bas"
28722     00          | 	byte	0
28723                 | LR__4666
28723     2F 73 64 2F 
28727     62 61 73    | 	byte	"/sd/bas"
2872a     00          | 	byte	0
2872b                 | LR__4667
2872b     20 42 41 53 
2872f     49 43 20 62 
28733     79 74 65 73 
28737     20 66 72 65 
2873b     65          | 	byte	" BASIC bytes free"
2873c     00          | 	byte	0
2873d                 | LR__4668
2873d     52 65 61 64 
28741     79          | 	byte	"Ready"
28742     00          | 	byte	0
28743                 | LR__4669
28743     20          | 	byte	" "
28744     00          | 	byte	0
28745                 | LR__4670
28745     20          | 	byte	" "
28746     00          | 	byte	0
28747                 | LR__4671
28747                 | 	byte	
28747     00          | 	byte	0
28748                 | LR__4672
28748                 | 	byte	
28748     00          | 	byte	0
28749     00 00 00    | 	alignl
2874c                 | _dat_
2874c     00 00 00 00 
28750     00 00 00 00 
28754     00 00 00 00 
28758     00 00 00 00 | 	byte	$00[16]
2875c     61 41 17 0E 
28760     62 42 00 00 
28764     63 43 19 10 
28768     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2876c     65 45 18 0F 
28770     66 46 00 00 
28774     67 47 00 00 
28778     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2877c     69 49 00 00 
28780     6A 4A 00 00 
28784     6B 4B 00 00 
28788     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2878c     6D 4D 00 00 
28790     6E 4E 1A 11 
28794     6F 4F 1E 15 
28798     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2879c     71 51 00 00 
287a0     72 52 00 00 
287a4     73 53 1B 12 
287a8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
287ac     75 55 00 00 
287b0     76 56 00 00 
287b4     77 57 00 00 
287b8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
287bc     79 59 00 00 
287c0     7A 5A 1D 14 
287c4     31 21 04 00 
287c8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
287cc     33 23 06 00 
287d0     34 24 07 00 
287d4     35 25 08 00 
287d8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
287dc     37 26 0A 00 
287e0     38 2A 0B 00 
287e4     39 28 0C 00 
287e8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
287ec     8D 8D 00 00 
287f0     9B 9B 00 00 
287f4     88 88 00 00 
287f8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
287fc     20 20 00 00 
28800     2D 5F 00 00 
28804     3D 2B 00 00 
28808     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2880c     5D 7D 00 00 
28810     5C 7C 00 00 
28814     23 7E 00 00 
28818     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2881c     27 22 00 00 
28820     60 7E 03 00 
28824     2C 3C 00 00 
28828     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2882c     2F 3F 00 00 
28830     B9 B9 00 00 
28834     BA 00 00 00 
28838     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2883c     BC 00 00 00 
28840     BD 00 00 00 
28844     BE 00 00 00 
28848     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2884c     C0 00 00 00 
28850     C1 00 00 00 
28854     C2 00 00 00 
28858     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2885c     C4 00 00 00 
28860     C5 00 00 00 
28864     C6 00 00 00 
28868     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2886c     C8 00 00 00 
28870     C9 00 00 00 
28874     CA 00 00 00 
28878     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2887c     7F 7F 00 00 
28880     CC 00 00 00 
28884     CD 00 00 00 
28888     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2888c     CF 00 00 00 
28890     D0 00 00 00 
28894     D1 00 00 00 
28898     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2889c     2F 2F 00 00 
288a0     2A 2A 00 00 
288a4     2D 2D 00 00 
288a8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
288ac     8D 8D 00 00 
288b0     31 31 00 00 
288b4     32 32 00 00 
288b8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
288bc     34 34 00 00 
288c0     35 35 00 00 
288c4     36 36 00 00 
288c8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
288cc     38 38 00 00 
288d0     39 39 00 00 
288d4     30 30 00 00 
288d8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
288dc     5C 7C 00 00 
288e0     00 00 00 00 
288e4     00 00 00 00 
288e8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
288ec     00 00 00 00 
      ...             
28944     00 00 00 00 
28948     00 00 00 00 | 	byte	$00[96]
2894c     2B 00 A6 F2 
28950     24 A7 09 80 
28954     5B 88 4D 89 
28958     80 88 A5 88 | atari_spl file "atari.spl"
2895c     6D 88 B8 88 
28960     80 88 CB 88 
28964     92 88 A5 88 
28968     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2896c     A5 88 CA 88 
28970     A6 88 DD 88 
28974     B8 88 AB 89 
28978     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2897c     C8 AD C6 F1 
28980     91 06 B6 FF 
28984     13 00 4A 00 
28988     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2898c     5D 00 5E 00 
28990     5D 00 5E 00 
28994     5E 00 5D 00 
28998     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2899c     38 00 83 00 
289a0     25 00 83 00 
289a4     C3 FE D1 04 
289a8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
289ac     48 88 38 85 
289b0     41 8A CB 88 
289b4     28 89 B8 88 
289b8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
289bc     15 89 03 89 
289c0     02 89 15 89 
289c4     16 89 15 89 
289c8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
289cc     15 89 3A 89 
289d0     72 89 E3 89 
289d4     52 83 AD 97 
289d8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
289dc     0C 02 B6 FF 
289e0     E1 00 A8 00 
289e4     F3 00 A8 00 
289e8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
289ec     CE 00 CD 00 
289f0     CD 00 BA 00 
289f4     E1 00 BB 00 
289f8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
289fc     DF 00 C9 FF 
28a00     E6 01 B6 06 
28a04     EE DD 8D 98 
28a08     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
28a0c     97 89 73 89 
28a10     3B 89 60 89 
28a14     60 89 60 89 
28a18     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
28a1c     73 89 72 89 
28a20     85 89 73 89 
28a24     AA 89 60 89 
28a28     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
28a2c     E8 8A 18 86 
28a30     92 88 A5 C2 
28a34     E0 00 C3 05 
28a38     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
28a3c     F2 00 64 01 
28a40     06 01 3E 01 
28a44     2B 01 2B 01 
28a48     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
28a4c     2B 01 2A 01 
28a50     2B 01 2B 01 
28a54     2B 01 18 01 
28a58     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
28a5c     39 07 61 F3 
28a60     C0 AF 37 85 
28a64     0F 88 8B 8A 
28a68     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
28a6c     AB 89 D0 89 
28a70     AB 89 D0 89 
28a74     D0 89 CF 89 
28a78     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
28a7c     D0 89 F5 89 
28a80     BD 89 08 8A 
28a84     CF 89 E8 8A 
28a88     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
28a8c     53 B3 0D F8 
28a90     F4 07 38 00 
28a94     63 01 63 01 
28a98     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
28a9c     88 01 88 01 
28aa0     76 01 88 01 
28aa4     88 01 89 01 
28aa8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
28aac     75 01 AE 01 
28ab0     76 01 88 01 
28ab4     4A 00 46 06 
28ab8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
28abc     08 8A 9A 86 
28ac0     33 8B 08 8A 
28ac4     2D 8A F5 89 
28ac8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
28acc     2D 8A 2D 8A 
28ad0     2E 8A 1B 8A 
28ad4     40 8A 2D 8A 
28ad8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
28adc     2E 8A 79 8A 
28ae0     66 8A C8 8B 
28ae4     72 82 2B 97 
28ae8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
28aec     1D 02 05 01 
28af0     F8 01 C0 01 
28af4     0B 02 C0 01 
28af8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
28afc     F9 01 D3 01 
28b00     F8 01 D3 01 
28b04     F8 01 D2 01 
28b08     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
28b0c     E6 01 2B 01 
28b10     8E 02 5F 07 
28b14     F7 E2 ED 9C 
28b18     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
28b1c     E8 8A 78 8A 
28b20     78 8A 65 8A 
28b24     8B 8A 78 8A 
28b28     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
28b2c     8B 8A 9D 8A 
28b30     9D 8A 8B 8A 
28b34     C2 8A 78 8A 
28b38     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
28b3c     70 8C 18 86 
28b40     8B 8A 23 C9 
28b44     CB 03 C4 05 
28b48     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
28b4c     0B 02 7B 02 
28b50     1E 02 55 02 
28b54     30 02 43 02 
28b58     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
28b5c     43 02 44 02 
28b60     43 02 30 02 
28b64     68 02 31 02 
28b68     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
28b6c     07 08 3F F7 
28b70     73 B2 13 85 
28b74     15 89 ED 8B 
28b78     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
28b7c     B0 8A FB 8A 
28b80     D5 8A FA 8A 
28b84     E8 8A FB 8A 
28b88     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
28b8c     E8 8A 21 8B 
28b90     E7 8A 33 8B 
28b94     E8 8A 26 8C 
28b98     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
28b9c     8D B0 27 F6 
28ba0     9C 08 AD 01 
28ba4     7B 02 8D 02 
28ba8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
28bac     A1 02 A0 02 
28bb0     A1 02 A0 02 
28bb4     A0 02 A0 02 
28bb8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
28bbc     7B 02 D8 02 
28bc0     7B 02 C6 02 
28bc4     3E 01 C3 05 
28bc8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
28bcc     00 8C 2A 86 
28bd0     E0 8C FA 8A 
28bd4     6A 8B FB 8A 
28bd8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
28bdc     45 8B 45 8B 
28be0     45 8B 6B 8B 
28be4     46 8B 59 8B 
28be8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
28bec     6B 8B 6B 8B 
28bf0     6B 8B 6B 8B 
28bf4     7D 8B 7D 8B 
28bf8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
28bfc     90 8B 91 8B 
28c00     90 8B 90 8B 
28c04     A3 8B A3 8B 
28c08     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
28c0c     B5 8B B6 8B 
28c10     B5 8B B5 8B 
28c14     B6 8B C8 8B 
28c18     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
28c1c     C8 8B DA 8B 
28c20     DB 8B DB 8B 
28c24     DB 8B DC 8B 
28c28     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
28c2c     EE 8B EE 8B 
28c30     00 8C 01 8C 
28c34     00 8C 01 8C 
28c38     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
28c3c     12 8C 13 8C 
28c40     13 8C 26 8C 
28c44     26 8C 26 8C 
28c48     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
28c4c     38 8C 38 8C 
28c50     38 8C 38 8C 
28c54     4B 8C 4B 8C 
28c58     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
28c5c     5E 8C 5E 8C 
28c60     5E 8C 5E 8C 
28c64     70 8C 70 8C 
28c68     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
28c6c     70 8C 83 8C 
28c70     83 8C 83 8C 
28c74     83 8C 96 8C 
28c78     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
28c7c     95 8C A9 8C 
28c80     A9 8C A8 8C 
28c84     A8 8C A8 8C 
28c88     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
28c8c     BB 8C BB 8C 
28c90     BB 8C CE 8C 
28c94     CE 8C CE 8C 
28c98     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
28c9c     E0 8C E1 8C 
28ca0     E1 8C E0 8C 
28ca4     F4 8C F2 8C 
28ca8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
28cac     05 8D 05 8D 
28cb0     06 8D 06 8D 
28cb4     19 8D 19 8D 
28cb8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
28cbc     18 8D 2B 8D 
28cc0     2B 8D 2B 8D 
28cc4     2A 8D 3E 8D 
28cc8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
28ccc     3E 8D 51 8D 
28cd0     50 8D 50 8D 
28cd4     50 8D 51 8D 
28cd8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
28cdc     63 8D 64 8D 
28ce0     76 8D 75 8D 
28ce4     75 8D 76 8D 
28ce8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
28cec     88 8D 88 8D 
28cf0     89 8D 9B 8D 
28cf4     9A 8D 9B 8D 
28cf8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
28cfc     AD 8D AE 8D 
28d00     AD 8D AE 8D 
28d04     C1 8D C1 8D 
28d08     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
28d0c     D3 8D D3 8D 
28d10     D3 8D D3 8D 
28d14     D3 8D E6 8D 
28d18     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
28d1c     E6 8D E6 8D 
28d20     F9 8D F9 8D 
28d24     F9 8D F8 8D 
28d28     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
28d2c     0B 8E 0B 8E 
28d30     1D 8E 1D 8E 
28d34     1E 8E 1E 8E 
28d38     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
28d3c     31 8E 31 8E 
28d40     31 8E 42 8E 
28d44     43 8E 43 8E 
28d48     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
28d4c     56 8E 56 8E 
28d50     55 8E 56 8E 
28d54     68 8E 69 8E 
28d58     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
28d5c     69 8E 7B 8E 
28d60     7C 8E 7B 8E 
28d64     7B 8E 8D 8E 
28d68     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
28d6c     8D 8E A1 8E 
28d70     A0 8E A1 8E 
28d74     A1 8E A0 8E 
28d78     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
28d7c     B3 8E B3 8E 
28d80     C6 8E C5 8E 
28d84     C6 8E C6 8E 
28d88     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
28d8c     D8 8E D9 8E 
28d90     D8 8E EC 8E 
28d94     EB 8E EC 8E 
28d98     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
28d9c     FE 8E FE 8E 
28da0     FE 8E FE 8E 
28da4     10 8F 10 8F 
28da8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
28dac     11 8F 23 8F 
28db0     24 8F 23 8F 
28db4     24 8F 37 8F 
28db8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
28dbc     36 8F 36 8F 
28dc0     48 8F 49 8F 
28dc4     49 8F 49 8F 
28dc8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
28dcc     5B 8F 5C 8F 
28dd0     5B 8F 6E 8F 
28dd4     6E 8F 6E 8F 
28dd8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
28ddc     81 8F 81 8F 
28de0     81 8F 81 8F 
28de4     93 8F 93 8F 
28de8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
28dec     93 8F A6 8F 
28df0     A6 8F A6 8F 
28df4     A6 8F B9 8F 
28df8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
28dfc     B9 8F B9 8F 
28e00     CC 8F CB 8F 
28e04     CB 8F CC 8F 
28e08     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
28e0c     DF 8F DE 8F 
28e10     DE 8F F1 8F 
28e14     F1 8F F1 8F 
28e18     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
28e1c     03 90 04 90 
28e20     04 90 04 90 
28e24     16 90 17 90 
28e28     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
28e2c     29 90 28 90 
28e30     29 90 28 90 
28e34     29 90 3C 90 
28e38     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
28e3c     3C 90 4F 90 
28e40     4E 90 4E 90 
28e44     4E 90 4E 90 
28e48     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
28e4c     61 90 61 90 
28e50     73 90 74 90 
28e54     74 90 74 90 
28e58     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
28e5c     87 90 86 90 
28e60     87 90 86 90 
28e64     99 90 99 90 
28e68     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
28e6c     AB 90 AB 90 
28e70     AC 90 AB 90 
28e74     AB 90 BF 90 
28e78     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
28e7c     BE 90 D1 90 
28e80     D0 90 D1 90 
28e84     D1 90 D1 90 
28e88     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
28e8c     E3 90 E4 90 
28e90     F6 90 F6 90 
28e94     F6 90 F6 90 
28e98     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
28e9c     09 91 0A 91 
28ea0     0A 91 1C 91 
28ea4     1C 91 1C 91 
28ea8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
28eac     2F 91 2E 91 
28eb0     2F 91 2F 91 
28eb4     2E 91 41 91 
28eb8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
28ebc     41 91 53 91 
28ec0     54 91 54 91 
28ec4     53 91 54 91 
28ec8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
28ecc     67 91 67 91 
28ed0     79 91 7A 91 
28ed4     79 91 78 91 
28ed8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
28edc     8C 91 8B 91 
28ee0     8C 91 8C 91 
28ee4     9E 91 9E 91 
28ee8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
28eec     B1 91 B1 91 
28ef0     B2 91 B1 91 
28ef4     B1 91 C4 91 
28ef8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
28efc     C4 91 D6 91 
28f00     D7 91 D7 91 
28f04     D7 91 D6 91 
28f08     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
28f0c     EA 91 EA 91 
28f10     EA 91 FC 91 
28f14     FC 91 FB 91 
28f18     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
28f1c     0E 92 0F 92 
28f20     0F 92 0E 92 
28f24     21 92 21 92 
28f28     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
28f2c     21 92 34 92 
28f30     33 92 34 92 
28f34     34 92 47 92 
28f38     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
28f3c     46 92 47 92 
28f40     59 92 59 92 
28f44     59 92 59 92 
28f48     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
28f4c     6C 92 6C 92 
28f50     6B 92 7E 92 
28f54     7E 92 7E 92 
28f58     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
28f5c     92 92 91 92 
28f60     91 92 90 92 
28f64     91 92 A4 92 
28f68     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
28f6c     A3 92 B6 92 
28f70     B6 92 B7 92 
28f74     B7 92 B6 92 
28f78     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
28f7c     CA 92 C9 92 
28f80     CA 92 DC 92 
28f84     DC 92 DC 92 
28f88     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
28f8c     EF 92 EF 92 
28f90     EF 92 EF 92 
28f94     01 93 01 93 
28f98     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
28f9c     15 93 14 93 
28fa0     14 93 14 93 
28fa4     14 93 27 93 
28fa8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
28fac     27 93 39 93 
28fb0     3A 93 39 93 
28fb4     39 93 39 93 
28fb8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
28fbc     4B 93 4C 93 
28fc0     5F 93 5F 93 
28fc4     5F 93 5E 93 
28fc8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
28fcc     5F 93 84 93 
28fd0     4C 93 96 93 
28fd4     5F 93 AE 94 
28fd8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
28fdc     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
28fe0     7A D7 00 80 
28fe4     87 8A 48 8F 
28fe8     EC 8C 76 8D 
28fec     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
28ff0     3C 8D 82 8D 
28ff4     42 8D 88 8D 
28ff8     8C 8D 8E 8D 
28ffc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
29000     97 8D DE 8D 
29004     E1 8D F1 8E 
29008     D8 8C A3 83 
2900c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
29010     65 71 C9 65 
29014     FC 64 C4 65 
29018     C1 65 BF 65 
2901c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
29020     B6 65 B4 65 
29024     B2 65 AE 65 
29028     AC 65 ED 65 
2902c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
29030     5E 65 25 66 
29034     FA 62 23 6B 
29038     B5 6C 61 0A 
2903c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
29040     5D 90 BE 8D 
29044     47 8E C3 8D 
29048     09 8E C9 8D 
2904c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
29050     15 8E 19 8E 
29054     1B 8E 62 8E 
29058     64 8E 68 8E 
2905c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
29060     B5 8E 4C 90 
29064     FA 84 3C 9D 
29068     98 13 79 6D 
2906c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
29070     D9 66 50 66 
29074     D4 66 4B 66 
29078     8C 66 46 66 
2907c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
29080     81 66 3A 66 
29084     7C 66 36 66 
29088     76 66 30 66 
2908c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
29090     6B 66 88 72 
29094     BF 37 E7 B7 
29098     75 83 8B 8E 
2909c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
290a0     94 8E 96 8E 
290a4     DD 8E 9C 8E 
290a8     E2 8E A2 8E 
290ac     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
290b0     EE 8E AE 8E 
290b4     38 8F B5 8E 
290b8     3F 8F FD 8E 
290bc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
290c0     A5 87 1E E3 
290c4     6D 5D FA 71 
290c8     41 64 25 67 
290cc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
290d0     D9 66 1A 67 
290d4     18 67 15 67 
290d8     12 67 0F 67 
290dc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
290e0     07 67 C0 66 
290e4     01 67 BC 66 
290e8     B8 66 DE 64 
290ec     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
290f0     43 E5 1F 8B 
290f4     14 8A F1 90 
290f8     1C 8F 63 8F 
290fc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
29100     29 8F 6E 8F 
29104     72 8F 75 8F 
29108     34 8F BE 8F 
2910c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
29110     84 8F 87 8F 
29114     CC 8F 56 90 
29118     67 91 49 80 
2911c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
29120     46 77 A6 66 
29124     E8 66 B0 67 
29128     AD 67 ED 67 
2912c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
29130     A2 67 E3 67 
29134     9D 67 9A 67 
29138     98 67 94 67 
2913c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
29140     49 67 CD 67 
29144     28 65 5F 6E 
29148     82 67 3A 01 
2914c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
29150     C2 91 A9 8F 
29154     EF 8F AE 8F 
29158     F4 8F B5 8F 
2915c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
29160     01 90 03 90 
29164     07 90 09 90 
29168     0C 90 53 90 
2916c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
29170     18 90 44 93 
29174     85 84 D6 9D 
29178     87 1F 2F 75 
2917c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
29180     C4 68 F6 67 
29184     BE 68 F1 67 
29188     76 68 2E 68 
2918c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
29190     27 68 24 68 
29194     64 68 1E 68 
29198     5F 68 19 68 
2919c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
291a0     DC 68 56 72 
291a4     7E 36 C2 B8 
291a8     D7 84 73 90 
291ac     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
291b0     7B 90 7F 90 
291b4     82 90 84 90 
291b8     CB 90 8B 90 
291bc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
291c0     D7 90 96 90 
291c4     20 91 59 90 
291c8     25 91 A2 90 
291cc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
291d0     D0 89 40 EE 
291d4     12 64 C4 71 
291d8     29 66 0C 69 
291dc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
291e0     C0 68 02 69 
291e4     FE 68 FB 68 
291e8     F9 68 F6 68 
291ec     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
291f0     EE 68 A8 68 
291f4     2C 69 5F 68 
291f8     E2 68 81 66 
291fc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
29200     1E EB A6 8A 
29204     73 8B 5E 93 
29208     7B 90 48 91 
2920c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
29210     0D 91 11 91 
29214     14 91 16 91 
29218     5C 91 1C 91 
2921c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
29220     68 91 AF 91 
29224     2A 91 B5 91 
29228     75 91 1A 94 
2922c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
29230     70 0E CB 6C 
29234     5D 6E C4 67 
29238     99 69 54 69 
2923c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
29240     D2 69 49 69 
29244     89 69 86 69 
29248     40 69 C4 69 
2924c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
29250     35 69 76 69 
29254     58 67 EB 6D 
29258     E9 6D 89 0F 
2925c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
29260     33 94 94 91 
29264     D9 91 56 91 
29268     E0 91 9F 91 
2926c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
29270     EC 91 EE 91 
29274     F1 91 F4 91 
29278     F7 91 3D 92 
2927c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
29280     46 92 21 94 
29284     11 89 A4 9D 
29288     FD 0E 8F 6C 
2928c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
29290     28 6A E1 69 
29294     65 6A 1F 6A 
29298     5F 6A 1A 6A 
2929c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
292a0     54 6A 0F 6A 
292a4     4F 6A 09 6A 
292a8     06 6A 03 6A 
292ac     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
292b0     23 68 69 77 
292b4     3A 4D 38 CA 
292b8     38 86 4E 91 
292bc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
292c0     64 92 24 92 
292c4     6A 92 2A 92 
292c8     70 92 30 92 
292cc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
292d0     7B 92 7E 92 
292d4     C5 92 84 92 
292d8     CB 92 8A 92 
292dc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
292e0     4D 8D F9 E2 
292e4     97 59 FE 74 
292e8     DB 68 6D 6A 
292ec     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
292f0     A8 6A A5 6A 
292f4     A3 6A 9F 6A 
292f8     9D 6A 9B 6A 
292fc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
29300     D6 6A 8F 6A 
29304     CF 6A 46 6A 
29308     CA 6A E1 67 
2930c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
29310     D3 F7 15 92 
29314     90 8C BF 94 
29318     A6 92 EB 92 
2931c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
29320     B1 92 F7 92 
29324     FA 92 FD 92 
29328     00 93 02 93 
2932c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
29330     4F 93 52 93 
29334     54 93 22 94 
29338     5A 93 8F 88 
2933c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
29340     1C 77 07 6C 
29344     E8 69 7A 6B 
29348     34 6B 75 6B 
2934c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
29350     29 6B 26 6B 
29354     24 6B 21 6B 
29358     1D 6B 5E 6B 
2935c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
29360     12 6B 52 6B 
29364     34 69 34 6E 
29368     BA 73 A4 24 
2936c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
29370     7A 94 B3 93 
29374     72 93 31 93 
29378     78 93 7A 93 
2937c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
29380     83 93 86 93 
29384     89 93 D0 93 
29388     D2 93 D5 93 
2938c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
29390     DD 93 40 96 
29394     30 8B 99 9C 
29398     52 10 94 71 
2939c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
293a0     46 6C 79 6B 
293a4     40 6C B7 6B 
293a8     F7 6B B1 6B 
293ac     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
293b0     EC 6B A5 6B 
293b4     A2 6B 9F 6B 
293b8     9D 6B 9A 6B 
293bc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
293c0     C8 6A E4 76 
293c4     20 4B F9 CE 
293c8     2E 8A 1A 92 
293cc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
293d0     FB 93 BA 93 
293d4     01 94 03 94 
293d8     4A 94 09 94 
293dc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
293e0     55 94 14 94 
293e4     9E 94 1A 94 
293e8     61 94 20 94 
293ec     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
293f0     3E 87 E5 CD 
293f4     5F 50 6C 78 
293f8     B5 6A 04 6C 
293fc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
29400     83 6C 7F 6C 
29404     7C 6C 36 6C 
29408     76 6C 74 6C 
2940c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
29410     6B 6C 25 6C 
29414     66 6C 1F 6C 
29418     1D 6C 41 6A 
2941c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
29420     BA FA FC 94 
29424     5B 8D 97 96 
29428     3B 94 C5 94 
2942c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
29430     89 94 8C 94 
29434     8F 94 92 94 
29438     94 94 DB 94 
2943c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
29440     E4 94 E7 94 
29444     2D 95 74 95 
29448     C8 96 15 89 
2944c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
29450     CB 75 31 6F 
29454     7E 6B 10 6D 
29458     C9 6C 0A 6D 
2945c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
29460     BD 6C FF 6C 
29464     FB 6C F9 6C 
29468     B2 6C F3 6C 
2946c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
29470     A7 6C E8 6C 
29474     0D 6B 85 6F 
29478     C7 74 10 28 
2947c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
29480     96 96 47 95 
29484     06 95 0A 95 
29488     0C 95 0F 95 
2948c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
29490     17 95 5E 95 
29494     61 95 63 95 
29498     22 95 AC 95 
2949c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
294a0     72 95 17 98 
294a4     59 8E 01 96 
294a8     CF FC 5A 68 
294ac     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
294b0     96 6D 50 6D 
294b4     D5 6D 4A 6D 
294b8     8C 6D 89 6D 
294bc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
294c0     80 6D 3A 6D 
294c4     7A 6D 77 6D 
294c8     75 6D 71 6D 
294cc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
294d0     18 6C BC 78 
294d4     9A 4F 7E CF 
294d8     1F 89 F1 93 
294dc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
294e0     D2 95 4E 95 
294e4     D7 95 53 95 
294e8     DD 95 E0 95 
294ec     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
294f0     A5 95 EB 95 
294f4     EE 95 F0 95 
294f8     37 96 B3 95 
294fc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
29500     1A 98 D5 8D 
29504     C5 9F CD 0F 
29508     0F 71 F3 73 
2950c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
29510     D9 6D 5E 6E 
29514     D3 6D 58 6E 
29518     12 6E 0F 6E 
2951c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
29520     49 6E BF 6D 
29524     87 6E 76 6D 
29528     81 6E 11 6B 
2952c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
29530     3F 09 44 95 
29534     E5 8D 3F 99 
29538     D4 95 A2 96 
2953c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
29540     23 96 69 96 
29544     6B 96 6E 96 
29548     71 96 74 96 
2954c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
29550     BF 96 3C 96 
29554     C6 96 C8 96 
29558     A3 98 51 8D 
2955c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
29560     CF 75 29 73 
29564     90 6C EC 6E 
29568     62 6E E7 6E 
2956c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
29570     9A 6E 98 6E 
29574     95 6E 91 6E 
29578     8E 6E CF 6E 
2957c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
29580     40 6E C3 6E 
29584     E8 6C 45 6F 
29588     A5 7B C9 35 
2958c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
29590     2D 98 23 97 
29594     E1 96 A0 96 
29598     A4 96 EA 96 
2959c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
295a0     AF 96 F4 96 
295a4     F8 96 3E 97 
295a8     FD 96 43 97 
295ac     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
295b0     08 97 6B 99 
295b4     D6 92 88 91 
295b8     D8 EE 84 66 
295bc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
295c0     2E 6F E7 6E 
295c4     6C 6F 24 6F 
295c8     21 6F 1F 6F 
295cc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
295d0     17 6F 13 6F 
295d4     54 6F 0E 6F 
295d8     0B 6F 4B 6F 
295dc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
295e0     27 6D 1C 7B 
295e4     19 59 9F DB 
295e8     66 8E BC 94 
295ec     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
295f0     67 97 26 97 
295f4     6D 97 2B 97 
295f8     72 97 32 97 
295fc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
29600     C1 97 7F 97 
29604     C6 97 85 97 
29608     CB 97 CE 97 
2960c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
29610     EC 8A C4 C6 
29614     68 4C F4 7D 
29618     63 6E E8 6E 
2961c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
29620     ED 6F A7 6F 
29624     E7 6F A0 6F 
29628     E1 6F 9B 6F 
2962c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
29630     D5 6F 8F 6F 
29634     CE 6F 45 6F 
29638     86 6F 68 6D 
2963c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
29640     C0 13 AD A2 
29644     A7 8E 79 99 
29648     E6 97 E8 97 
2964c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
29650     F1 97 F3 97 
29654     F6 97 F9 97 
29658     FB 97 FE 97 
2965c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
29660     4A 98 0A 98 
29664     93 98 0F 98 
29668     7F 9B BF 8C 
2966c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
29670     91 7B 62 73 
29674     1A 6E B9 70 
29678     EB 6F B3 70 
2967c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
29680     25 70 20 70 
29684     1E 70 1B 70 
29688     18 70 15 70 
2968c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
29690     0D 70 09 70 
29694     07 70 03 70 
29698     01 70 FD 6F 
2969c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
296a0     F6 6F F2 6F 
296a4     EF 6F EC 6F 
296a8     2C 70 E6 6F 
296ac     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
296b0     DD 6F 97 6F 
296b4     D7 6F 84 6E 
296b8     8F 6F 3F 7D 
296bc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
296be     FF FF FF FF 
296c2     FF FF       | atarist_spl file "atarist.spl" '512
296c4     00 00 00 00 
296c8     00 00 00 00 
296cc     00 00       | 	byte	$00[10]
296ce     17 7F F2 7F 
296d2     B2 7F 72 7F 
296d6     33 7F F4 7E 
296da     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
296de     36 7E F5 7D 
296e2     E9 51 F2 0D 
296e6     8E 00 F3 FD 
296ea     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
296ee     57 FD 58 FD 
296f2     5B FD 5C FD 
296f6     5C FD 60 7D 
296fa     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
296fe     D6 7C 98 7C 
29702     59 7C 1A 7C 
29706     DC 7B 9E 7B 
2970a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2970e     F3 05 00 FD 
29712     41 FB EA FA 
29716     D9 FA DB FA 
2971a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2971e     E4 FA 9B 36 
29722     F8 7A C0 7A 
29726     84 7A 45 7A 
2972a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2972e     8E 79 51 79 
29732     15 79 D7 78 
29736     3C 1F EB FF 
2973a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2973e     6D F8 65 F8 
29742     68 F8 6D F8 
29746     70 F8 74 F8 
2974a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2974e     AB 60 79 60 
29752     4B 60 1A 60 
29756     E9 5F B9 5F 
2975a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2975e     FB 59 B2 0B 
29762     92 FA 3A F7 
29766     96 F6 79 F6 
2976a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2976e     82 F6 86 F6 
29772     8C F6 DB 5D 
29776     F1 5E C1 5E 
2977a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2977e     34 5E 04 5E 
29782     D6 5D A6 5D 
29786     78 5D D4 3E 
2978a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2978e     27 F5 BA F4 
29792     AB F4 AD F4 
29796     B2 F4 B8 F4 
2979a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2979e     26 5D 2B 5D 
297a2     FC 5C CD 5C 
297a6     9F 5C 70 5C 
297aa     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
297ae     E5 5B B8 5B 
297b2     DB 24 A7 FC 
297b6     D1 F4 4D F3 
297ba     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
297be     04 F3 0B F3 
297c2     11 F3 16 F3 
297c6     DE 18 98 5B 
297ca     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
297ce     4E 4A 29 48 
297d2     A0 47 6A 47 
297d6     43 47 20 47 
297da     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
297de     E2 F6 98 F2 
297e2     C5 F1 A3 F1 
297e6     A3 F1 A8 F1 
297ea     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
297ee     BF F1 00 3D 
297f2     EF 46 CD 46 
297f6     AA 46 86 46 
297fa     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
297fe     1C 46 F9 45 
29802     D7 45 EE 43 
29806     DE 02 E8 F3 
2980a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2980e     61 F0 65 F0 
29812     6D F0 74 F0 
29816     7C F0 84 F0 
2981a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2981e     8E 45 6D 45 
29822     49 45 27 45 
29826     05 45 E1 44 
2982a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2982e     F1 2F A9 FB 
29832     8B F1 9B EF 
29836     40 EF 36 EF 
2983a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2983e     4D EF 56 EF 
29842     5E EF 7B 44 
29846     8C 44 69 44 
2984a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2984e     03 44 E1 43 
29852     C0 43 F5 37 
29856     69 33 0F 11 
2985a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2985e     66 EE 37 EE 
29862     38 EE 40 EE 
29866     48 EE 51 EE 
2986a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2986e     7D 32 6A 32 
29872     51 32 37 32 
29876     1F 32 05 32 
2987a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2987e     B9 31 A1 31 
29882     F1 04 F4 F1 
29886     50 EE A0 ED 
2988a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2988e     93 ED 9A ED 
29892     A4 ED AD ED 
29896     F4 27 C1 31 
2989a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2989e     78 31 5F 31 
298a2     46 31 2E 31 
298a6     15 31 FC 30 
298aa     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
298ae     C4 EF 4A ED 
298b2     DC EC CB EC 
298b6     D2 EC DA EC 
298ba     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
298be     F9 EC 64 2F 
298c2     0A 31 F1 30 
298c6     D9 30 C0 30 
298ca     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
298ce     78 30 5F 30 
298d2     46 30 38 23 
298d6     A6 F6 19 EE 
298da     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
298de     20 EC 28 EC 
298e2     32 EC 3C EC 
298e6     47 EC 51 EC 
298ea     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
298ee     A3 22 93 22 
298f2     7F 22 6E 22 
298f6     5D 22 4C 22 
298fa     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
298fe     77 09 76 F1 
29902     CC EC F0 EB 
29906     CD EB CE EB 
2990a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2990e     ED EB F5 EB 
29912     3E F6 6B 22 
29916     5F 22 4E 22 
2991a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2991e     1B 22 0B 22 
29922     FA 21 E9 21 
29926     D8 21 4D FF 
2992a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2992e     92 EB 7B EB 
29932     82 EB 8C EB 
29936     97 EB A1 EB 
2993a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2993e     15 22 04 22 
29942     F3 21 E3 21 
29946     D2 21 C0 21 
2994a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2994e     8E 21 7D 21 
29952     9A F8 A4 ED 
29956     8E EB 2F EB 
2995a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2995e     37 EB 42 EB 
29962     4C EB 57 EB 
29966     B2 17 22 19 
2996a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2996e     FD 18 EF 18 
29972     E3 18 D6 18 
29976     CA 18 BD 18 
2997a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2997e     60 EC 35 EB 
29982     01 EB 01 EB 
29986     0C EB 16 EB 
2998a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2998e     34 EB D0 18 
29992     00 19 F4 18 
29996     E8 18 DA 18 
2999a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2999e     B6 18 A9 18 
299a2     9D 18 91 05 
299a6     F0 EF CA EB 
299aa     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
299ae     E8 EA F2 EA 
299b2     FE EA 07 EB 
299b6     12 EB C2 EF 
299ba     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
299be     D9 18 CD 18 
299c2     C0 18 B3 18 
299c6     A7 18 9B 18 
299ca     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
299ce     B8 FC 30 EE 
299d2     61 EB DC EA 
299d6     CD EA D2 EA 
299da     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
299de     F3 EA FE EA 
299e2     D2 09 D1 18 
299e6     C3 18 17 18 
299ea     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
299ee     66 11 52 11 
299f2     49 11 41 11 
299f6     38 11 E0 F4 
299fa     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
299fe     C9 EA C5 EA 
29a02     CF EA DB EA 
29a06     E6 EA EF EA 
29a0a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
29a0e     89 11 80 11 
29a12     78 11 6E 11 
29a16     67 11 5D 11 
29a1a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
29a1e     43 11 32 0D 
29a22     9C F1 07 EC 
29a26     F8 EA CD EA 
29a2a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
29a2e     E4 EA ED EA 
29a32     F8 EA 02 EB 
29a36     55 11 91 11 
29a3a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
29a3e     75 11 6E 11 
29a42     64 11 5E 11 
29a46     54 11 4A 11 
29a4a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
29a4e     A8 EB F1 EA 
29a52     D9 EA DC EA 
29a56     E8 EA F1 EA 
29a5a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
29a5e     A6 EB 9E 11 
29a62     A0 11 96 11 
29a66     8D 11 85 11 
29a6a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
29a6e     6A 11 CA 0D 
29a72     36 0B 57 F8 
29a76     6C ED 57 EB 
29a7a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
29a7e     F4 EA FF EA 
29a82     09 EB 15 EB 
29a86     1E EB 1A FD 
29a8a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
29a8e     ED 0A E8 0A 
29a92     E2 0A DC 0A 
29a96     D6 0A D1 0A 
29a9a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
29a9e     F8 F3 BC EC 
29aa2     57 EB 1E EB 
29aa6     18 EB 24 EB 
29aaa     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
29aae     42 EB 4D EB 
29ab2     08 09 20 0B 
29ab6     1A 0B 14 0B 
29aba     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
29abe     04 0B FE 0A 
29ac2     F9 0A F2 0A 
29ac6     84 08 3A F1 
29aca     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
29ace     42 EB 42 EB 
29ad2     4E EB 57 EB 
29ad6     62 EB 6B EB 
29ada     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
29ade     48 0B 43 0B 
29ae2     3C 0B 36 0B 
29ae6     31 0B 2C 0B 
29aea     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
29aee     1B 0B 5C 00 
29af2     6A EF 1B EC 
29af6     81 EB 6A EB 
29afa     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
29afe     85 EB 8E EB 
29b02     99 EB A3 EB 
29b06     DD 05 E5 05 
29b0a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
29b0e     DB 05 D8 05 
29b12     D5 05 D1 05 
29b16     D0 05 CB 05 
29b1a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
29b1e     0C EC BB EB 
29b22     B3 EB BB EB 
29b26     C5 EB D0 EB 
29b2a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
29b2e     E4 F7 2C 06 
29b32     28 06 24 06 
29b36     22 06 1F 06 
29b3a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
29b3e     16 06 14 06 
29b42     0F 06 D0 F3 
29b46     65 ED 2D EC 
29b4a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
29b4e     01 EC 0A EC 
29b52     14 EC 1E EC 
29b56     29 EC FB 03 
29b5a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
29b5e     63 06 60 06 
29b62     5E 06 59 06 
29b66     58 06 54 06 
29b6a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
29b6e     69 F1 21 ED 
29b72     55 EC 33 EC 
29b76     36 EC 40 EC 
29b7a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
29b7e     5C EC 68 EC 
29b82     92 02 D9 02 
29b86     D7 02 D7 02 
29b8a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
29b8e     D1 02 D1 02 
29b92     CE 02 CD 02 
29b96     5D FC 80 EF 
29b9a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
29b9e     83 EC 8A EC 
29ba2     93 EC 9C EC 
29ba6     A5 EC B1 EC 
29baa     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
29bae     2B 03 2A 03 
29bb2     29 03 26 03 
29bb6     25 03 24 03 
29bba     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
29bbe     1F 03 70 F7 
29bc2     D0 EE 27 ED 
29bc6     DB EC D4 EC 
29bca     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
29bce     F0 EC FA EC 
29bd2     02 ED F9 F4 
29bd6     7B 03 7C 03 
29bda     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
29bde     75 03 73 03 
29be2     72 03 70 03 
29be6     6D 03 6C 03 
29bea     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
29bee     54 ED 22 ED 
29bf2     22 ED 2C ED 
29bf6     35 ED 3F ED 
29bfa     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
29bfe     14 01 C3 03 
29c02     C1 03 C0 03 
29c06     5F 01 A5 00 
29c0a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
29c0e     7B 00 7C 00 
29c12     20 00 85 F1 
29c16     2A EE 89 ED 
29c1a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
29c1e     80 ED 87 ED 
29c22     90 ED 9A ED 
29c26     A3 ED 73 00 
29c2a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
29c2e     D0 00 D0 00 
29c32     D0 00 D0 00 
29c36     D0 00 CF 00 
29c3a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
29c3e     80 F0 3D EE 
29c42     D5 ED C7 ED 
29c46     CD ED D6 ED 
29c4a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
29c4e     F2 ED FA ED 
29c52     1D 01 29 01 
29c56     27 01 27 01 
29c5a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
29c5e     25 01 26 01 
29c62     26 01 23 01 
29c66     D0 F7 EC EF 
29c6a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
29c6e     1C EE 24 EE 
29c72     2D EE 37 EE 
29c76     40 EE 47 EE 
29c7a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
29c7e     7D 01 7B 01 
29c82     7A 01 7A 01 
29c86     79 01 78 01 
29c8a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
29c8e     84 FE DE F3 
29c92     6C EF 93 EE 
29c96     72 EE 72 EE 
29c9a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
29c9e     8B EE 95 EE 
29ca2     9E EE 15 FC 
29ca6     67 FE 67 FE 
29caa     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
29cae     6B FE 6B FE 
29cb2     6D FE 6D FE 
29cb6     6D FE 6F FE 
29cba     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
29cbe     DF EE CC EE 
29cc2     CF EE D9 EE 
29cc6     E1 EE EA EE 
29cca     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
29cce     5A FE C4 FE 
29cd2     C3 FE C5 FE 
29cd6     C6 FE C6 FE 
29cda     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
29cde     C8 FE C7 FE 
29ce2     DA FB 85 F1 
29ce6     8D EF 31 EF 
29cea     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
29cee     34 EF 3E EF 
29cf2     46 EF 4F EF 
29cf6     57 EF 0D FF 
29cfa     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
29cfe     1F FF 1F FF 
29d02     21 FF 21 FF 
29d06     21 FF 21 FF 
29d0a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
29d0e     15 F1 BE EF 
29d12     84 EF 7E EF 
29d16     88 EF 8F EF 
29d1a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
29d1e     A9 EF 06 F2 
29d22     A6 FC AB FC 
29d26     AD FC AE FC 
29d2a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
29d2e     B2 FC B4 FC 
29d32     B6 FC B7 FC 
29d36     8B F4 BD F0 
29d3a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
29d3e     E4 EF EE EF 
29d42     F6 EF FD EF 
29d46     04 F0 0E F0 
29d4a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
29d4e     0B FD 0D FD 
29d52     0F FD 11 FD 
29d56     11 FD 13 FD 
29d5a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
29d5e     17 FD 64 F3 
29d62     CD F0 52 F0 
29d66     41 F0 45 F0 
29d6a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
29d6e     5B F0 64 F0 
29d72     6D F0 FB FC 
29d76     65 FD 68 FD 
29d7a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
29d7e     6C FD 6D FD 
29d82     6F FD 70 FD 
29d86     72 FD B3 FB 
29d8a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
29d8e     A4 F0 99 F0 
29d92     A0 F0 A8 F0 
29d96     AE F0 B9 F0 
29d9a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
29d9e     CB FB DD FB 
29da2     DE FB E0 FB 
29da6     E3 FB E3 FB 
29daa     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
29dae     E9 FB EC FB 
29db2     62 F7 27 F2 
29db6     2A F1 FF F0 
29dba     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
29dbe     0C F1 13 F1 
29dc2     1B F1 23 F1 
29dc6     33 F2 3C FC 
29dca     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
29dce     42 FC 45 FC 
29dd2     47 FC 48 FC 
29dd6     4A FC 4C FC 
29dda     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
29dde     20 F2 77 F1 
29de2     5C F1 5F F1 
29de6     64 F1 6C F1 
29dea     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
29dee     83 F1 DC F8 
29df2     9A FC 9A FC 
29df6     9B FC 9E FC 
29dfa     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
29dfe     A3 FC A4 FC 
29e02     A6 FC A9 FC 
29e06     90 F4 33 F2 
29e0a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
29e0e     BA F1 BF F1 
29e12     C7 F1 CE F1 
29e16     D6 F1 DC F1 
29e1a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
29e1e     F3 FC F5 FC 
29e22     FE FB 79 FB 
29e26     62 FB 5F FB 
29e2a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
29e2e     6F FA AF F3 
29e32     53 F2 12 F2 
29e36     0F F2 15 F2 
29e3a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
29e3e     2A F2 32 F2 
29e42     38 F2 9A FB 
29e46     AF FB B1 FB 
29e4a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
29e4e     B7 FB B8 FB 
29e52     BA FB BC FB 
29e56     C1 FB 3B F8 
29e5a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
29e5e     6E F2 6C F2 
29e62     74 F2 7A F2 
29e66     81 F2 87 F2 
29e6a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
29e6e     06 FC 09 FC 
29e72     0C FC 0E FC 
29e76     0F FC 12 FC 
29e7a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
29e7e     17 FC 1A FC 
29e82     B2 F6 7B F3 
29e86     DD F2 C5 F2 
29e8a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
29e8e     D4 F2 DB F2 
29e92     E0 F2 E8 F2 
29e96     28 F8 60 FC 
29e9a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
29e9e     64 FC 66 FC 
29ea2     68 FC 6A FC 
29ea6     6D FC 52 FC 
29eaa     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
29eae     78 F3 24 F3 
29eb2     1A F3 1E F3 
29eb6     24 F3 2A F3 
29eba     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
29ebe     3D F3 80 FA 
29ec2     0C FB 0F FB 
29ec6     10 FB 14 FB 
29eca     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
29ece     1B FB 1D FB 
29ed2     1F FB 92 FA 
29ed6     DE F4 AE F3 
29eda     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
29ede     79 F3 7E F3 
29ee2     84 F3 8C F3 
29ee6     92 F3 97 F3 
29eea     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
29eee     67 FB 69 FB 
29ef2     6B FB 6F FB 
29ef6     71 FB 72 FB 
29efa     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
29efe     E3 F8 BA F4 
29f02     EE F3 CC F3 
29f06     CA F3 CF F3 
29f0a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
29f0e     E2 F3 E8 F3 
29f12     ED F3 B7 FB 
29f16     BC FB BE FB 
29f1a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
29f1e     C4 FB C6 FB 
29f22     C8 FB C9 FB 
29f26     CC FB 8F F7 
29f2a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
29f2e     1E F4 1E F4 
29f32     24 F4 2A F4 
29f36     30 F4 38 F4 
29f3a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
29f3e     AD FA B1 FA 
29f42     B4 FA B6 FA 
29f46     BA FA BB FA 
29f4a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
29f4e     C2 FA C6 FA 
29f52     55 F6 C6 F4 
29f56     7D F4 72 F4 
29f5a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
29f5e     83 F4 89 F4 
29f62     8F F4 94 F4 
29f66     66 FA 03 FB 
29f6a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
29f6e     0A FB 0E FB 
29f72     10 FB 11 FB 
29f76     16 FB 18 FB 
29f7a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
29f7e     F9 F4 CA F4 
29f82     C5 F4 CB F4 
29f86     D1 F4 D7 F4 
29f8a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
29f8e     E8 F4 3F FB 
29f92     56 FB 58 FB 
29f96     5A FB 5E FB 
29f9a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
29f9e     64 FB 64 FB 
29fa2     69 FB 99 F9 
29fa6     E9 F5 33 F5 
29faa     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
29fae     1D F5 22 F5 
29fb2     27 F5 2E F5 
29fb6     32 F5 37 F5 
29fba     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
29fbe     BC FA BC FA 
29fc2     C1 FA C2 FA 
29fc6     C4 FA C8 FA 
29fca     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
29fce     F9 F7 DB F5 
29fd2     78 F5 69 F5 
29fd6     6A F5 70 F5 
29fda     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
29fde     7F F5 85 F5 
29fe2     6E F7 06 FB 
29fe6     0A FB 0B FB 
29fea     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
29fee     14 FB 15 FB 
29ff2     18 FB 1B FB 
29ff6     1D FB 70 F7 
29ffa     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
29ffe     B6 F5 BB F5 
2a002     C0 F5 C6 F5 
2a006     CA F5 CF F5 
2a00a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2a00e     54 FB 56 FB 
2a012     5A FB 5B FB 
2a016     5E FB 5F FB 
2a01a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2a01e     67 FB 52 FB 
2a022     29 F7 33 F6 
2a026     06 F6 02 F6 
2a02a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2a02e     10 F6 16 F6 
2a032     1A F6 1F F6 
2a036     81 FB 9F FB 
2a03a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2a03e     51 FB F2 FA 
2a042     E3 FA E3 FA 
2a046     E5 FA E9 FA 
2a04a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2a04e     64 F6 4D F6 
2a052     4D F6 53 F6 
2a056     57 F6 5C F6 
2a05a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2a05e     6A F6 19 FB 
2a062     1E FB 22 FB 
2a066     23 FB 24 FB 
2a06a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2a06e     2C FB 2E FB 
2a072     32 FB F0 F8 
2a076     01 F7 A5 F6 
2a07a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2a07e     9F F6 A3 F6 
2a082     A6 F6 AC F6 
2a086     B0 F6 EB F7 
2a08a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2a08e     68 FB 6C FB 
2a092     6E FB 71 FB 
2a096     72 FB 74 FB 
2a09a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2a09e     71 F8 21 F7 
2a0a2     E5 F6 DD F6 
2a0a6     E1 F6 E6 F6 
2a0aa     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2a0ae     F5 F6 F7 F6 
2a0b2     F7 FA AB FB 
2a0b6     AD FB AF FB 
2a0ba     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2a0be     B6 FB B9 FB 
2a0c2     BB FB BC FB 
2a0c6     21 FB 07 F8 
2a0ca     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2a0ce     22 F7 26 F7 
2a0d2     2B F7 2E F7 
2a0d6     34 F7 38 F7 
2a0da     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2a0de     13 FB 16 FB 
2a0e2     17 FB 1B FB 
2a0e6     1E FB 20 FB 
2a0ea     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2a0ee     26 FB 77 FA 
2a0f2     F3 F7 7C F7 
2a0f6     67 F7 6A F7 
2a0fa     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2a0fe     74 F7 7A F7 
2a102     7E F7 82 F7 
2a106     53 FB 5A FB 
2a10a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2a10e     5F FB 63 FB 
2a112     65 FB 67 FB 
2a116     69 FB 6A FB 
2a11a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2a11e     B5 F7 A9 F7 
2a122     AD F7 B0 F7 
2a126     B5 F7 B8 F7 
2a12a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2a12e     6E F8 99 FB 
2a132     9C FB 9D FB 
2a136     9F FB A4 FB 
2a13a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2a13e     A9 FB AB FB 
2a142     AD FB 46 F9 
2a146     26 F8 F0 F7 
2a14a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2a14e     F4 F7 F8 F7 
2a152     FB F7 FF F7 
2a156     03 F8 65 FA 
2a15a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2a15e     2B FB 2F FB 
2a162     30 FB 32 FB 
2a166     34 FB 38 FB 
2a16a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2a16e     E9 F8 4A F8 
2a172     2E F8 2C F8 
2a176     2F F8 36 F8 
2a17a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2a17e     41 F8 44 F8 
2a182     4A FB 67 FB 
2a186     68 FB 6B FB 
2a18a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2a18e     73 FB 74 FB 
2a192     78 FB 7A FB 
2a196     14 FB E7 F8 
2a19a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2a19e     6D F8 70 F8 
2a1a2     73 F8 78 F8 
2a1a6     7C F8 80 F8 
2a1aa     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2a1ae     A6 FB A7 FB 
2a1b2     A9 FB AC FB 
2a1b6     AF FB B1 FB 
2a1ba     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2a1be     B7 FB 73 FA 
2a1c2     F8 F8 B4 F8 
2a1c6     A9 F8 AB F8 
2a1ca     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2a1ce     B4 F8 B8 F8 
2a1d2     BB F8 FA F8 
2a1d6     64 FB 65 FB 
2a1da     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2a1de     6D FB 6F FB 
2a1e2     70 FB 74 FB 
2a1e6     77 FB 77 FB 
2a1ea     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2a1ee     E9 F8 E4 F8 
2a1f2     E8 F8 EB F8 
2a1f6     EE F8 F2 F8 
2a1fa     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2a1fe     B5 FA 9F FB 
2a202     A1 FB A4 FB 
2a206     A5 FB A9 FB 
2a20a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2a20e     AE FB B1 FB 
2a212     B2 FB C7 F9 
2a216     39 F9 22 F9 
2a21a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2a21e     26 F9 2A F9 
2a222     2E F9 32 F9 
2a226     33 F9 BA FB 
2a22a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2a22e     DE FB E1 FB 
2a232     E2 FB E4 FB 
2a236     E5 FB E7 FB 
2a23a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2a23e     C5 F9 67 F9 
2a242     57 F9 56 F9 
2a246     5B F9 5F F9 
2a24a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2a24e     68 F9 6C F9 
2a252     0B FC 11 FC 
2a256     14 FC 15 FC 
2a25a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2a25e     B5 FB B5 FB 
2a262     B6 FB B8 FB 
2a266     E9 FA C8 F9 
2a26a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2a26e     90 F9 94 F9 
2a272     95 F9 99 F9 
2a276     9D F9 9F F9 
2a27a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2a27e     DE FB DF FB 
2a282     E2 FB E4 FB 
2a286     E6 FB E8 FB 
2a28a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2a28e     EF FB AC FA 
2a292     E9 F9 C7 F9 
2a296     C3 F9 C8 F9 
2a29a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2a29e     D0 F9 D4 F9 
2a2a2     D6 F9 0E FB 
2a2a6     11 FC 13 FC 
2a2aa     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2a2ae     19 FC 1B FC 
2a2b2     1D FC 1E FC 
2a2b6     21 FC 22 FC 
2a2ba     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2a2be     F7 F9 F7 F9 
2a2c2     FB F9 FE F9 
2a2c6     00 FA 03 FA 
2a2ca     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2a2ce     1B FC 45 FC 
2a2d2     46 FC 48 FC 
2a2d6     4A FC 4B FC 
2a2da     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2a2de     52 FC 54 FC 
2a2e2     F3 FB 82 FA 
2a2e6     35 FA 28 FA 
2a2ea     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2a2ee     31 FA 32 FA 
2a2f2     37 FA 37 FA 
2a2f6     3C FA 00 FC 
2a2fa     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2a2fe     09 FC 0B FC 
2a302     0F FC 12 FC 
2a306     12 FC 15 FC 
2a30a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2a30e     8D FA 60 FA 
2a312     5B FA 5C FA 
2a316     60 FA 61 FA 
2a31a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2a31e     6C FA 6D FA 
2a322     37 FC 3A FC 
2a326     3B FC 3D FC 
2a32a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2a32e     43 FC 44 FC 
2a332     45 FC 47 FC 
2a336     51 FB AB FA 
2a33a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2a33e     8E FA 91 FA 
2a342     93 FA 95 FA 
2a346     98 FA 9B FA 
2a34a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2a34e     68 FC 6A FC 
2a352     6C FC 6E FC 
2a356     70 FC 72 FC 
2a35a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2a35e     76 FC 3B FB 
2a362     D0 FA BB FA 
2a366     B9 FA BD FA 
2a36a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2a36e     C4 FA C6 FA 
2a372     CA FA 13 FC 
2a376     3A FC 3A FC 
2a37a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2a37e     41 FC 43 FC 
2a382     44 FC 47 FC 
2a386     48 FC 3C FC 
2a38a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2a38e     E6 FA E8 FA 
2a392     EB FA EE FA 
2a396     F0 FA F2 FA 
2a39a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2a39e     61 FC 66 FC 
2a3a2     68 FC 6B FC 
2a3a6     6C FC 6E FC 
2a3aa     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2a3ae     73 FC 75 FC 
2a3b2     13 FC 3F FB 
2a3b6     17 FB 12 FB 
2a3ba     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2a3be     1A FB 1D FB 
2a3c2     1F FB 20 FB 
2a3c6     23 FB 92 FC 
2a3ca     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2a3ce     96 FC 97 FC 
2a3d2     9A FC 9C FC 
2a3d6     9E FC 9F FC 
2a3da     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2a3de     5A FB 41 FB 
2a3e2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2a3e6     01 00 00 00 
2a3ea     00 00 00 00 
2a3ee     00 00 00 00 
2a3f2     00 00 00 00 | mouse  file "mouse2.def"
2a3f6     00 00 00 00 
2a3fa     00 00 00 00 
2a3fe     00 00 00 00 
2a402     00 00 00 00 | 	byte	$00[16]
2a406     01 01 00 00 
2a40a     00 00 00 00 
2a40e     00 00 00 00 
2a412     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a416     00 00 00 00 
2a41a     00 00 00 00 
2a41e     00 00 00 00 
2a422     00 00 00 00 | 	byte	$00[16]
2a426     01 0D 01 00 
2a42a     00 00 00 00 
2a42e     00 00 00 00 
2a432     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a436     00 00 00 00 
2a43a     00 00 00 00 
2a43e     00 00 00 00 
2a442     00 00 00 00 | 	byte	$00[16]
2a446     01 0D 0D 01 
2a44a     00 00 00 00 
2a44e     00 00 00 00 
2a452     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a456     00 00 00 00 
2a45a     00 00 00 00 
2a45e     00 00 00 00 
2a462     00 00 00 00 | 	byte	$00[16]
2a466     01 0D 0D 0D 
2a46a     01 00 00 00 
2a46e     00 00 00 00 
2a472     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a476     00 00 00 00 
2a47a     00 00 00 00 
2a47e     00 00 00 00 
2a482     00 00 00 00 | 	byte	$00[16]
2a486     01 0D 0D 0D 
2a48a     0D 01 00 00 
2a48e     00 00 00 00 
2a492     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a496     00 00 00 00 
2a49a     00 00 00 00 
2a49e     00 00 00 00 
2a4a2     00 00 00 00 | 	byte	$00[16]
2a4a6     01 0D 0D 0D 
2a4aa     0D 0D 01 00 
2a4ae     00 00 00 00 
2a4b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a4b6     00 00 00 00 
2a4ba     00 00 00 00 
2a4be     00 00 00 00 
2a4c2     00 00 00 00 | 	byte	$00[16]
2a4c6     01 0D 0D 0D 
2a4ca     0D 0D 0D 01 
2a4ce     00 00 00 00 
2a4d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2a4d6     00 00 00 00 
2a4da     00 00 00 00 
2a4de     00 00 00 00 
2a4e2     00 00 00 00 | 	byte	$00[16]
2a4e6     01 0D 0D 0D 
2a4ea     0D 0D 0D 0C 
2a4ee     01 00 00 00 
2a4f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2a4f6     00 00 00 00 
2a4fa     00 00 00 00 
2a4fe     00 00 00 00 
2a502     00 00 00 00 | 	byte	$00[16]
2a506     01 0D 0D 0D 
2a50a     0D 0D 0D 0D 
2a50e     0C 01 00 00 
2a512     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2a516     00 00 00 00 
2a51a     00 00 00 00 
2a51e     00 00 00 00 
2a522     00 00 00 00 | 	byte	$00[16]
2a526     01 0D 0D 0D 
2a52a     0D 0D 0D 0D 
2a52e     0D 0C 01 00 
2a532     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2a536     00 00 00 00 
2a53a     00 00 00 00 
2a53e     00 00 00 00 
2a542     00 00 00 00 | 	byte	$00[16]
2a546     01 0D 0D 0D 
2a54a     0D 0D 0D 0D 
2a54e     0D 0D 0B 01 
2a552     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2a556     00 00 00 00 
2a55a     00 00 00 00 
2a55e     00 00 00 00 
2a562     00 00 00 00 | 	byte	$00[16]
2a566     01 0D 0D 0D 
2a56a     0C 0D 0D 03 
2a56e     01 01 01 01 
2a572     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2a576     00 00 00 00 
2a57a     00 00 00 00 
2a57e     00 00 00 00 
2a582     00 00 00 00 | 	byte	$00[16]
2a586     01 0D 0D 0C 
2a58a     01 09 0D 03 
2a58e     00 00 00 00 
2a592     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2a596     00 00 00 00 
2a59a     00 00 00 00 
2a59e     00 00 00 00 
2a5a2     00 00 00 00 | 	byte	$00[16]
2a5a6     01 0D 0C 01 
2a5aa     00 01 0D 0B 
2a5ae     01 00 00 00 
2a5b2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2a5b6     00 00 00 00 
2a5ba     00 00 00 00 
2a5be     00 00 00 00 
2a5c2     00 00 00 00 | 	byte	$00[16]
2a5c6     01 0C 01 00 
2a5ca     00 01 0A 0D 
2a5ce     01 00 00 00 
2a5d2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2a5d6     00 00 00 00 
2a5da     00 00 00 00 
2a5de     00 00 00 00 
2a5e2     00 00 00 00 | 	byte	$00[16]
2a5e6     01 01 00 00 
2a5ea     00 00 01 0D 
2a5ee     0B 01 00 00 
2a5f2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2a5f6     00 00 00 00 
2a5fa     00 00 00 00 
2a5fe     00 00 00 00 
2a602     00 00 00 00 
2a606     00 00 00 00 
2a60a     00 00       | 	byte	$00[22]
2a60c     01 0B 0D 01 
2a610     00 00 00 00 
2a614     00 00 00 00 
2a618     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a61c     00 00 00 00 
2a620     00 00 00 00 
2a624     00 00 00 00 
2a628     00 00 00 00 
2a62c     00          | 	byte	$00[17]
2a62d     01 01 00 00 
2a631     00 00 00 00 
2a635     00 00 00 00 
2a639     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2a63d     00 00 00 00 
      ...             
2a7e1     00 00 00 00 
2a7e5     00          | 	byte	$00[425]
2a7e6                 | 
2a7e6     00 00       |              	org
2a7e8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2a7ec 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2a7f0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2a7f4 003             | 
2a7f4 003 00 30 04 F6 |                 mov     psramaddr,#0
2a7f8 004             | 
2a7f8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2a7fc 005 20 00 00 FF 
2a800 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2a804 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2a808 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2a80c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2a810 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2a814 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2a818 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2a81c 00d             | 
2a81c 00d 20 00 00 FF 
2a820 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2a824 00f E0 03 00 FF 
2a828 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2a82c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2a830 012             | 
2a830 012             |                 
2a830 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2a834 013             |     
2a834 013 01 2C 60 FD |                 cogid 	t11				' get id
2a838 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2a83c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2a840 016             | 
2a840 016 00 00 00 00 | t11 		long 	0
2a844 017 00 FF 07 00 | mailbox 	long 	$7FF00
2a848 018 00 00 00 00 | psramaddr 	long 	0
2a84c 019 00 00 00 00 | pslockval	long 	0
2a850 01a 00 00 00 00 | cmd             long    0
2a854 01b 00 00 00 00 | buf1            long    0
2a858 01c 00 40 00 00 | buf2            long    16384
2a85c 01d 60 A8 02 00 | 	long	@@@_dat_ + 8468
2a860 01e 50 32 20 52 
2a864 01f 65 74 72 6F 
2a868 020 6D 61 63 68 
2a86c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2a870 022 42 41 53 49 
2a874 023 43 20 76 65 
2a878 024 72 73 69 6F 
2a87c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2a880 026 32 34 00 00 | 	byte	$32, $34, $00, $00
2a884 027             | 	alignl
2a884 027             | _hg010b_spin2_dat_
2a884 027             | 
2a884 027 00 00 00 00 
2a888 028 00 00 00 00 
2a88c 029 00 00 00 00 
2a890 02a 00 00 00 00 
2a894 02b 00 00 00    | vga_font       file "vgafont.def"
2a897 02b 7E 81 A5 81 
2a89b 02c 81 BD 99 81 
2a89f 02d 81 7E 00 00 
2a8a3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2a8a7 02f 7E FF DB FF 
2a8ab 030 FF C3 E7 FF 
2a8af 031 FF 7E 00 00 
2a8b3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2a8b7 033 00 36 7F 7F 
2a8bb 034 7F 7F 3E 1C 
2a8bf 035 08 00 00 00 
2a8c3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2a8c7 037 00 08 1C 3E 
2a8cb 038 7F 3E 1C 08 
2a8cf 039 00 00 00 00 
2a8d3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2a8d7 03b 18 3C 3C E7 
2a8db 03c E7 E7 18 18 
2a8df 03d 3C 00 00 00 
2a8e3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2a8e7 03f 18 3C 7E FF 
2a8eb 040 FF 7E 18 18 
2a8ef 041 3C 00 00 00 
2a8f3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2a8f7 043 00 00 00 18 
2a8fb 044 3C 3C 18 00 
2a8ff 045 00 00 00 00 
2a903 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2a907 047 FF FF FF E7 
2a90b 048 C3 C3 E7 FF 
2a90f 049 FF FF FF FF 
2a913 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2a917 04b 00 00 3C 66 
2a91b 04c 42 42 66 3C 
2a91f 04d 00 00 00 00 
2a923 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2a927 04f FF FF C3 99 
2a92b 050 BD BD 99 C3 
2a92f 051 FF FF FF FF 
2a933 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2a937 053 78 70 58 4C 
2a93b 054 1E 33 33 33 
2a93f 055 33 1E 00 00 
2a943 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2a947 057 3C 66 66 66 
2a94b 058 66 3C 18 7E 
2a94f 059 18 18 00 00 
2a953 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2a957 05b FC CC FC 0C 
2a95b 05c 0C 0C 0C 0E 
2a95f 05d 0F 07 00 00 
2a963 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2a967 05f FE C6 FE C6 
2a96b 060 C6 C6 C6 E6 
2a96f 061 E7 67 03 00 
2a973 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2a977 063 18 18 DB 3C 
2a97b 064 E7 3C DB 18 
2a97f 065 18 00 00 00 
2a983 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2a987 067 03 07 0F 1F 
2a98b 068 7F 1F 0F 07 
2a98f 069 03 01 00 00 
2a993 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2a997 06b 60 70 78 7C 
2a99b 06c 7F 7C 78 70 
2a99f 06d 60 40 00 00 
2a9a3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2a9a7 06f 18 3C 7E 18 
2a9ab 070 18 18 7E 3C 
2a9af 071 18 00 00 00 
2a9b3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2a9b7 073 66 66 66 66 
2a9bb 074 66 66 66    | 	byte	$66[7]
2a9be 075 00 66 66 00 
2a9c2 076 00 00 00 00 
2a9c6 077 00 FE DB DB 
2a9ca 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2a9ce 079 D8 D8 D8 00 
2a9d2 07a 00 00 00 3E 
2a9d6 07b 63 06 1C 36 
2a9da 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2a9de 07d 30 63 3E 00 
2a9e2 07e 00 00 00 00 
2a9e6 07f 00 00 00 00 
2a9ea 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2a9ee 081 7F 7F 7F 00 
2a9f2 082 00 00 00 00 
2a9f6 083 00 18 3C 7E 
2a9fa 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2a9fe 085 3C 18 7E 00 
2aa02 086 00 00 00 00 
2aa06 087 00 18 3C 7E 
2aa0a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2aa0e 089 18 18 18 00 
2aa12 08a 00 00 00 00 
2aa16 08b 00 18 18 18 
2aa1a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2aa1e 08d 7E 3C 18 00 
2aa22 08e 00 00 00 00 
2aa26 08f 00 00 00 18 
2aa2a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2aa2e 091 00 00 00 00 
2aa32 092 00 00 00 00 
2aa36 093 00 00 00    | 	byte	$00[11]
2aa39 094 0C 06 7F 06 
2aa3d 095 0C 00 00 00 
2aa41 096 00 00 00 00 
2aa45 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa49 098 00 03 03 03 
2aa4d 099 7F 00 00 00 
2aa51 09a 00 00 00 00 
2aa55 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa59 09c 14 36 7F 36 
2aa5d 09d 14 00 00 00 
2aa61 09e 00 00 00 00 
2aa65 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2aa69 0a0 1C 1C 3E 3E 
2aa6d 0a1 7F 7F 00 00 
2aa71 0a2 00 00 00 00 
2aa75 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2aa79 0a4 7F 3E 3E 1C 
2aa7d 0a5 1C 08 00 00 
2aa81 0a6 00 00 00 00 
2aa85 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aa89 0a8 00 00 00 00 
2aa8d 0a9 00 00 00 00 
2aa91 0aa 00 00 00 00 
2aa95 0ab 00 00       | 	byte	$00[14]
2aa97 0ab 18 3C 3C 3C 
2aa9b 0ac 18 18 18 00 
2aa9f 0ad 18 18 00 00 
2aaa3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2aaa7 0af 66 24 00 00 
2aaab 0b0 00 00 00 00 
2aaaf 0b1 00 00 00 00 
2aab3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aab7 0b3 00 36 36 7F 
2aabb 0b4 36 36 36 7F 
2aabf 0b5 36 36 00 00 
2aac3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2aac7 0b7 3E 63 43 03 
2aacb 0b8 3E 60 60 61 
2aacf 0b9 63 3E 18 18 
2aad3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2aad7 0bb 00 00 43 63 
2aadb 0bc 30 18 0C 06 
2aadf 0bd 63 61 00 00 
2aae3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2aae7 0bf 1C 36 36 1C 
2aaeb 0c0 6E 3B 33 33 
2aaef 0c1 33 6E 00 00 
2aaf3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2aaf7 0c3 0C 0C 0C 06 
2aafb 0c4 00 00 00 00 
2aaff 0c5 00 00 00 00 
2ab03 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ab07 0c7 30 18 0C 0C 
2ab0b 0c8 0C 0C 0C 0C 
2ab0f 0c9 18 30 00 00 
2ab13 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2ab17 0cb 0C 18 30 30 
2ab1b 0cc 30 30 30 30 
2ab1f 0cd 18 0C 00 00 
2ab23 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2ab27 0cf 00 00 00 66 
2ab2b 0d0 3C FF 3C 66 
2ab2f 0d1 00 00 00 00 
2ab33 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2ab37 0d3 00 00 00 18 
2ab3b 0d4 18 7E 18 18 
2ab3f 0d5 00 00 00 00 
2ab43 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2ab47 0d7 00 00 00 00 
2ab4b 0d8 00 00 00 00 | 	byte	$00[8]
2ab4f 0d9 18 18 18 0C 
2ab53 0da 00 00 00 00 
2ab57 0db 00 00 00 00 
2ab5b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2ab5f 0dd 00 00 00 00 
2ab63 0de 00 00 00 00 
2ab67 0df 00 00 00 00 
2ab6b 0e0 00 00 00 00 | 	byte	$00[16]
2ab6f 0e1 18 18 00 00 
2ab73 0e2 00 00 00 00 
2ab77 0e3 00 00 40 60 
2ab7b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2ab7f 0e5 03 01 00 00 
2ab83 0e6 00 00 00 00 
2ab87 0e7 1C 36 63 63 
2ab8b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2ab8f 0e9 36 1C 00 00 
2ab93 0ea 00 00 00 00 
2ab97 0eb 18 1C 1E 18 
2ab9b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2ab9f 0ed 18 7E 00 00 
2aba3 0ee 00 00 00 00 
2aba7 0ef 3E 63 60 30 
2abab 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2abaf 0f1 63 7F 00 00 
2abb3 0f2 00 00 00 00 
2abb7 0f3 3E 63 60 60 
2abbb 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2abbf 0f5 63 3E 00 00 
2abc3 0f6 00 00 00 00 
2abc7 0f7 30 38 3C 36 
2abcb 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2abcf 0f9 30 78 00 00 
2abd3 0fa 00 00 00 00 
2abd7 0fb 7F 03 03 03 
2abdb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2abdf 0fd 63 3E 00 00 
2abe3 0fe 00 00 00 00 
2abe7 0ff 1C 06 03 03 
2abeb 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2abef 101 63 3E 00 00 
2abf3 102 00 00 00 00 
2abf7 103 7F 63 60 60 
2abfb 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2abff 105 0C 0C 00 00 
2ac03 106 00 00 00 00 
2ac07 107 3E 63 63 63 
2ac0b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2ac0f 109 63 3E 00 00 
2ac13 10a 00 00 00 00 
2ac17 10b 3E 63 63 63 
2ac1b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2ac1f 10d 30 1E 00 00 
2ac23 10e 00 00 00 00 
2ac27 10f 00 00 00 18 
2ac2b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2ac2f 111 18 18 00 00 
2ac33 112 00 00 00 00 
2ac37 113 00 00 00 18 
2ac3b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2ac3f 115 18 18 0C 00 
2ac43 116 00 00 00 00 
2ac47 117 00 60 30 18 
2ac4b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2ac4f 119 30 60 00 00 
2ac53 11a 00 00 00 00 
2ac57 11b 00 00 00 7E 
2ac5b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2ac5f 11d 00 00 00 00 
2ac63 11e 00 00 00 00 
2ac67 11f 00          | 	byte	$00[9]
2ac68 120 06 0C 18 30 
2ac6c 121 60 30 18 0C 
2ac70 122 06 00 00 00 
2ac74 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2ac78 124 63 63 30 18 
2ac7c 125 18 18 00 18 
2ac80 126 18 00 00 00 
2ac84 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2ac88 128 3E 63 63 7B 
2ac8c 129 7B 7B 3B 03 
2ac90 12a 3E 00 00 00 
2ac94 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2ac98 12c 1C 36 63 63 
2ac9c 12d 7F 63 63 63 
2aca0 12e 63 00 00 00 
2aca4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2aca8 130 66 66 66 3E 
2acac 131 66 66 66 66 
2acb0 132 3F 00 00 00 
2acb4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2acb8 134 66 43 03 03 
2acbc 135 03 03 43 66 
2acc0 136 3C 00 00 00 
2acc4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2acc8 138 36 66 66 66 
2accc 139 66 66 66 36 
2acd0 13a 1F 00 00 00 
2acd4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2acd8 13c 66 46 16 1E 
2acdc 13d 16 06 46 66 
2ace0 13e 7F 00 00 00 
2ace4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2ace8 140 66 46 16 1E 
2acec 141 16 06 06 06 
2acf0 142 0F 00 00 00 
2acf4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2acf8 144 66 43 03 03 
2acfc 145 7B 63 63 66 
2ad00 146 5C 00 00 00 
2ad04 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2ad08 148 63 63 63 7F 
2ad0c 149 63 63 63 63 
2ad10 14a 63 00 00 00 
2ad14 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2ad18 14c 18 18 18 18 
2ad1c 14d 18 18 18 18 | 	byte	$18[8]
2ad20 14e 3C 00 00 00 
2ad24 14f 00 00 00 78 
2ad28 150 30 30 30 30 
2ad2c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2ad30 152 1E 00 00 00 
2ad34 153 00 00 00 67 
2ad38 154 66 66 36 1E 
2ad3c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2ad40 156 67 00 00 00 
2ad44 157 00 00 00 0F 
2ad48 158 06 06 06 06 
2ad4c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2ad50 15a 7F 00 00 00 
2ad54 15b 00 00 00 63 
2ad58 15c 77 7F 7F 6B 
2ad5c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2ad60 15e 63 00 00 00 
2ad64 15f 00 00 00 63 
2ad68 160 67 6F 7F 7B 
2ad6c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2ad70 162 63 00 00 00 
2ad74 163 00 00 00 3E 
2ad78 164 63 63 63 63 
2ad7c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2ad80 166 3E 00 00 00 
2ad84 167 00 00 00 3F 
2ad88 168 66 66 66 3E 
2ad8c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2ad90 16a 0F 00 00 00 
2ad94 16b 00 00 00 3E 
2ad98 16c 63 63 63 63 
2ad9c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2ada0 16e 3E 30 70 00 
2ada4 16f 00 00 00 3F 
2ada8 170 66 66 66 3E 
2adac 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2adb0 172 67 00 00 00 
2adb4 173 00 00 00 3E 
2adb8 174 63 63 06 1C 
2adbc 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2adc0 176 3E 00 00 00 
2adc4 177 00 00 00 7E 
2adc8 178 7E 5A 18 18 
2adcc 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2add0 17a 3C 00 00 00 
2add4 17b 00 00 00 63 
2add8 17c 63 63 63 63 
2addc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2ade0 17e 3E 00 00 00 
2ade4 17f 00 00 00 63 
2ade8 180 63 63 63 63 
2adec 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2adf0 182 08 00 00 00 
2adf4 183 00 00 00 63 
2adf8 184 63 63 63 6B 
2adfc 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2ae00 186 36 00 00 00 
2ae04 187 00 00 00 63 
2ae08 188 63 36 3E 1C 
2ae0c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2ae10 18a 63 00 00 00 
2ae14 18b 00 00 00 66 
2ae18 18c 66 66 66 3C 
2ae1c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2ae20 18e 3C 00 00 00 
2ae24 18f 00 00 00 7F 
2ae28 190 63 61 30 18 
2ae2c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2ae30 192 7F 00 00 00 
2ae34 193 00 00 00 3C 
2ae38 194 0C 0C 0C 0C 
2ae3c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2ae40 196 3C 00 00 00 
2ae44 197 00 00 00 00 
2ae48 198 01 03 07 0E 
2ae4c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2ae50 19a 40 00 00 00 
2ae54 19b 00 00 00 3C 
2ae58 19c 30 30 30 30 
2ae5c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2ae60 19e 3C 00 00 00 
2ae64 19f 1C 36 00 00 
2ae68 1a0 00 00 00 00 
2ae6c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ae70 1a2 00 00 00 00 
2ae74 1a3 00 00 00 00 
2ae78 1a4 00 00 00 00 
2ae7c 1a5 00 00 00 00 
2ae80 1a6 00          | 	byte	$00[17]
2ae81 1a6 FF 00 00 0C 
2ae85 1a7 18 00 00 00 
2ae89 1a8 00 00 00 00 
2ae8d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ae91 1aa 00 00 00 00 
2ae95 1ab 00 00 00 00 
2ae99 1ac 00          | 	byte	$00[9]
2ae9a 1ac 1E 30 3E 33 
2ae9e 1ad 33 33 6E 00 
2aea2 1ae 00 00 00 00 
2aea6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2aeaa 1b0 1E 36 66 66 
2aeae 1b1 66 66 3E 00 
2aeb2 1b2 00 00 00 00 
2aeb6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aeba 1b4 3E 63 03 03 
2aebe 1b5 03 63 3E 00 
2aec2 1b6 00 00 00 00 
2aec6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2aeca 1b8 3C 36 33 33 
2aece 1b9 33 33 6E 00 
2aed2 1ba 00 00 00 00 
2aed6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aeda 1bc 3E 63 7F 03 
2aede 1bd 03 63 3E 00 
2aee2 1be 00 00 00 00 
2aee6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2aeea 1c0 0C 1E 0C 0C 
2aeee 1c1 0C 0C 1E 00 
2aef2 1c2 00 00 00 00 
2aef6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2aefa 1c4 6E 33 33 33 
2aefe 1c5 33 33 3E 30 
2af02 1c6 33 1E 00 00 
2af06 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2af0a 1c8 36 6E 66 66 
2af0e 1c9 66 66 67 00 
2af12 1ca 00 00 00 00 
2af16 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2af1a 1cc 1C 18 18 18 
2af1e 1cd 18 18 3C 00 
2af22 1ce 00 00 00 00 
2af26 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2af2a 1d0 70 60 60 60 
2af2e 1d1 60 60 60 66 
2af32 1d2 66 3C 00 00 
2af36 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2af3a 1d4 66 36 1E 1E 
2af3e 1d5 36 66 67 00 
2af42 1d6 00 00 00 00 
2af46 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2af4a 1d8 18 18 18 18 
2af4e 1d9 18 18       | 	byte	$18[6]
2af50 1da 3C 00 00 00 
2af54 1db 00 00 00 00 
2af58 1dc 00 00 37 7F 
2af5c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2af60 1de 63 00 00 00 
2af64 1df 00 00 00 00 
2af68 1e0 00 00 3B 66 
2af6c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2af70 1e2 66 00 00 00 
2af74 1e3 00 00 00 00 
2af78 1e4 00 00 3E 63 
2af7c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2af80 1e6 3E 00 00 00 
2af84 1e7 00 00 00 00 
2af88 1e8 00 00 3B 66 
2af8c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2af90 1ea 3E 06 06 0F 
2af94 1eb 00 00 00 00 
2af98 1ec 00 00 6E 33 
2af9c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2afa0 1ee 3E 30 30 78 
2afa4 1ef 00 00 00 00 
2afa8 1f0 00 00 3B 6E 
2afac 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2afb0 1f2 0F 00 00 00 
2afb4 1f3 00 00 00 00 
2afb8 1f4 00 00 3E 63 
2afbc 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2afc0 1f6 3E 00 00 00 
2afc4 1f7 00 00 00 08 
2afc8 1f8 0C 0C 3F 0C 
2afcc 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2afd0 1fa 38 00 00 00 
2afd4 1fb 00 00 00 00 
2afd8 1fc 00 00 33 33 
2afdc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2afe0 1fe 6E 00 00 00 
2afe4 1ff 00 00 00 00 
2afe8 200 00 00 63 63 
2afec 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2aff0 202 1C 00 00 00 
2aff4 203 00 00 00 00 
2aff8 204 00 00 63 63 
2affc 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2b000 206 36 00 00 00 
2b004 207 00 00 00 00 
2b008 208 00 00 63 36 
2b00c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2b010 20a 63 00 00 00 
2b014 20b 00 00 00 00 
2b018 20c 00 00 63 63 
2b01c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2b020 20e 7E 60 30 1F 
2b024 20f 00 00 00 00 
2b028 210 00 00 7F 33 
2b02c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2b030 212 7F 00 00 00 
2b034 213 00 00 00 70 
2b038 214 18 18 18 0E 
2b03c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2b040 216 70 00 00 00 
2b044 217 00 00 00 18 
2b048 218 18 18 18 18 
2b04c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b050 21a 18 00 00 00 
2b054 21b 00 00 00 0E 
2b058 21c 18 18 18 70 
2b05c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2b060 21e 0E 00 00 00 
2b064 21f 6E 3B 00 00 
2b068 220 00 00 00 00 
2b06c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b070 222 00 00 00 00 
2b074 223 00 00 00 00 
2b078 224 00 00       | 	byte	$00[10]
2b07a 224 08 1C 36 63 
2b07e 225 63 63 7F 00 
2b082 226 00 00 00 00 
2b086 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2b08a 228 03 03 03 03 
2b08e 229 43 66 3C 18 
2b092 22a 30 1E 00 00 
2b096 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2b09a 22c 33 33 33 33 
2b09e 22d 33 33       | 	byte	$33[6]
2b0a0 22e 6E 00 00 00 
2b0a4 22f 00 00 60 30 
2b0a8 230 18 00 3E 63 
2b0ac 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2b0b0 232 3E 00 00 00 
2b0b4 233 00 00 08 1C 
2b0b8 234 36 00 1E 30 
2b0bc 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2b0c0 236 6E 00 00 00 
2b0c4 237 00 00 00 00 
2b0c8 238 33 00 1E 30 
2b0cc 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2b0d0 23a 6E 00 00 00 
2b0d4 23b 00 00 1C 36 
2b0d8 23c 1C 00 33 33 
2b0dc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2b0e0 23e 6E 00 00 00 
2b0e4 23f 00 00 60 30 
2b0e8 240 18 00 3E 63 
2b0ec 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2b0f0 242 3E 00 00 00 
2b0f4 243 00 00 00 00 
2b0f8 244 00 00 3E 63 
2b0fc 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2b100 246 3E 18 30 1E 
2b104 247 00 00 00 1C 
2b108 248 58 78 38 18 
2b10c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2b110 24a 3C 00 00 00 
2b114 24b 00 00 00 00 
2b118 24c 63 00 3E 63 
2b11c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2b120 24e 3E 00 00 00 
2b124 24f 66 33 00 3E 
2b128 250 63 63 63 63 
2b12c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b130 252 3E 00 00 00 
2b134 253 00 00 CC 66 
2b138 254 33 00 3E 63 
2b13c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2b140 256 3E 00 00 00 
2b144 257 00 00 18 3C 
2b148 258 66 00 1C 18 
2b14c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2b150 25a 3C 00 00 00 
2b154 25b 30 18 00 7F 
2b158 25c 63 61 30 18 
2b15c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2b160 25e 7F 00 00 00 
2b164 25f 00 63 00 08 
2b168 260 1C 36 63 63 
2b16c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2b170 262 63 00 00 00 
2b174 263 30 18 00 3C 
2b178 264 66 43 03 03 
2b17c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2b180 266 3C 00 00 00 
2b184 267 30 18 00 7F 
2b188 268 66 46 16 1E 
2b18c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2b190 26a 7F 00 00 00 
2b194 26b 0C 06 00 0F 
2b198 26c 06 06 06 06 
2b19c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2b1a0 26e 7F 00 00 00 
2b1a4 26f 30 18 00 1C 
2b1a8 270 18 18 18 18 
2b1ac 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2b1b0 272 3C 00 00 00 
2b1b4 273 00 00 08 1C 
2b1b8 274 36 00 3E 63 
2b1bc 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2b1c0 276 3E 00 00 00 
2b1c4 277 00 00 00 00 
2b1c8 278 63 00 3E 63 
2b1cc 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2b1d0 27a 3E 00 00 00 
2b1d4 27b 00 00 00 6F 
2b1d8 27c 46 26 06 06 
2b1dc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2b1e0 27e 7F 00 00 00 
2b1e4 27f 00 00 00 6E 
2b1e8 280 4C 2C 0C 0C 
2b1ec 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2b1f0 282 1E 00 00 00 
2b1f4 283 30 18 00 3E 
2b1f8 284 63 63 06 1C 
2b1fc 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2b200 286 3E 00 00 00 
2b204 287 00 00 60 30 
2b208 288 18 00 3E 63 
2b20c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2b210 28a 3E 00 00 00 
2b214 28b 00 63 00 3E 
2b218 28c 63 63 63 63 
2b21c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2b220 28e 3E 00 00 00 
2b224 28f 00 63 00 63 
2b228 290 63 63 63 63 
2b22c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2b230 292 3E 00 00 00 
2b234 293 6C 38 00 7E 
2b238 294 7E 5A 18 18 
2b23c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2b240 296 3C 00 00 00 
2b244 297 00 00 60 48 
2b248 298 2C 0C 3F 0C 
2b24c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2b250 29a 38 00 00 00 
2b254 29b 00 00 00 0F 
2b258 29c 26 36 1E 0E 
2b25c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2b260 29e 7F 00 00 00 
2b264 29f 00 00 00 00 
2b268 2a0 00 63 36 1C 
2b26c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2b270 2a2 00 00 00 00 
2b274 2a3 00 00       | 	byte	$00[6]
2b276 2a3 36 1C 08 00 
2b27a 2a4 3E 63 03 03 
2b27e 2a5 03 63 3E 00 
2b282 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2b286 2a7 30 18 0C 00 
2b28a 2a8 1E 30 3E 33 
2b28e 2a9 33 33 6E 00 
2b292 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b296 2ab 60 30 18 00 
2b29a 2ac 1C 18 18 18 
2b29e 2ad 18 18 3C 00 
2b2a2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2b2a6 2af 60 30 18 00 
2b2aa 2b0 3E 63 63 63 
2b2ae 2b1 63 63 3E 00 
2b2b2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2b2b6 2b3 30 18 0C 00 
2b2ba 2b4 33 33 33 33 
2b2be 2b5 33 33 6E 00 
2b2c2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2b2c6 2b7 00 08 1C 36 
2b2ca 2b8 63 63 7F 63 
2b2ce 2b9 63 63 63 18 
2b2d2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2b2d6 2bb 00 00 00 00 
2b2da 2bc 1E 30 3E 33 
2b2de 2bd 33 33 6E 18 
2b2e2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2b2e6 2bf 00 7F 63 61 
2b2ea 2c0 30 18 0C 06 
2b2ee 2c1 43 63 7F 00 
2b2f2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2b2f6 2c3 36 1C 08 00 
2b2fa 2c4 7F 33 18 0C 
2b2fe 2c5 06 63 7F 00 
2b302 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2b306 2c7 00 7F 66 46 
2b30a 2c8 16 1E 16 06 
2b30e 2c9 46 66 7F 18 
2b312 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2b316 2cb 00 00 00 00 
2b31a 2cc 3E 63 7F 03 
2b31e 2cd 03 63 3E 18 
2b322 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2b326 2cf 00 3C 66 03 
2b32a 2d0 1F 03 0F 03 
2b32e 2d1 03 66 3C 00 
2b332 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2b336 2d3 60 30 18 00 
2b33a 2d4 7F 33 18 0C 
2b33e 2d5 06 63 7F 00 
2b342 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2b346 2d7 00 3C 66 43 
2b34a 2d8 03 03 03 03 
2b34e 2d9 43 66 3C 00 
2b352 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2b356 2db 00 00 00 00 
2b35a 2dc 3E 63 06 1C 
2b35e 2dd 30 63 3E 18 
2b362 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2b366 2df 00 00 00 00 
2b36a 2e0 00 00       | 	byte	$00[6]
2b36c 2e1 6C 36 1B 36 
2b370 2e2 6C 00 00 00 
2b374 2e3 00 00 00 00 
2b378 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b37c 2e5 1B 36 6C 36 
2b380 2e6 1B 00 00 00 
2b384 2e7 88 22 88 22 
2b388 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2b38c 2e9 88 22 88 22 
2b390 2ea 88 22 88 22 
2b394 2eb AA 55 AA 55 
2b398 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2b39c 2ed AA 55 AA 55 
2b3a0 2ee AA 55 AA 55 
2b3a4 2ef BB EE BB EE 
2b3a8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2b3ac 2f1 BB EE BB EE 
2b3b0 2f2 BB EE BB EE 
2b3b4 2f3 18 18 18 18 
2b3b8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2b3bc 2f5 18 18 18 18 
2b3c0 2f6 18 18 18 18 
2b3c4 2f7 18 18 18 18 
2b3c8 2f8 18 18 18    | 	byte	$18[15]
2b3cb 2f8 1F 18 18 18 
2b3cf 2f9 18 18 18 18 
2b3d3 2fa 18 30 18 00 
2b3d7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2b3db 2fc 63 7F 63 63 
2b3df 2fd 63 63 00 00 
2b3e3 2fe 00 1C 36 00 
2b3e7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2b3eb 300 63 7F 63 63 
2b3ef 301 63 63 00 00 
2b3f3 302 00 36 1C 00 
2b3f7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2b3fb 304 1E 16 06 46 
2b3ff 305 66 7F 00 00 
2b403 306 00 00 00 00 
2b407 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2b40b 308 1C 30 60 63 
2b40f 309 63 3E 18 30 
2b413 30a 1E 6C 6C 6C 
2b417 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2b41b 30c 6F 6C 6C 6C 
2b41f 30d 6C 6C 6C 6C 
2b423 30e 6C 6C 6C 6C 
2b427 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b42b 310 6C 6C 6C 6C 
2b42f 311 6C 6C 6C 6C 
2b433 312 6C          | 	byte	$6c[9]
2b434 313 00 00 00 00 
2b438 314 00          | 	byte	$00[5]
2b439 314 7F 60 6F 6C 
2b43d 315 6C 6C 6C 6C 
2b441 316 6C 6C 6C 6C 
2b445 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b449 318 6F 60 7F 00 
2b44d 319 00 00 00 00 
2b451 31a 00 00 00 18 
2b455 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2b459 31c 61 30 18 0C 
2b45d 31d 06 43 63 7F 
2b461 31e 00 00 00 00 
2b465 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2b469 320 00 7F 33 18 
2b46d 321 0C 06 63 7F 
2b471 322 00 00 00 00 
2b475 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2b479 324 00 00 1F 18 
2b47d 325 18 18 18 18 
2b481 326 18 18 18 18 
2b485 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b489 328 18 18 F8 00 
2b48d 329 00 00 00 00 
2b491 32a 00 00 00 18 
2b495 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b499 32c 18 18 FF 00 
2b49d 32d 00 00 00 00 
2b4a1 32e 00 00 00 00 
2b4a5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b4a9 330 00 00 FF 18 
2b4ad 331 18 18 18 18 
2b4b1 332 18 18 18 18 
2b4b5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b4b9 334 18 18 F8 18 
2b4bd 335 18 18 18 18 
2b4c1 336 18 18 18 00 
2b4c5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2b4c9 338 00 00 FF 00 
2b4cd 339 00 00 00 00 
2b4d1 33a 00 00 00 18 
2b4d5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2b4d9 33c 18 18 FF 18 
2b4dd 33d 18 18 18 18 
2b4e1 33e 18 18 18 63 
2b4e5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2b4e9 340 36 63 63 7F 
2b4ed 341 63 63 63 63 
2b4f1 342 00 00 00 00 
2b4f5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2b4f9 344 00 1E 30 3E 
2b4fd 345 33 33 33 6E 
2b501 346 00 00 00 6C 
2b505 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2b509 348 EC 0C FC 00 
2b50d 349 00 00 00 00 
2b511 34a 00 00 00 00 
2b515 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b519 34c FC 0C EC 6C 
2b51d 34d 6C 6C 6C 6C 
2b521 34e 6C 6C 6C 6C 
2b525 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b529 350 EF 00 FF 00 
2b52d 351 00 00 00 00 
2b531 352 00 00 00 00 
2b535 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b539 354 FF 00 EF 6C 
2b53d 355 6C 6C 6C 6C 
2b541 356 6C 6C 6C 6C 
2b545 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2b549 358 EC 0C EC 6C 
2b54d 359 6C 6C 6C 6C 
2b551 35a 6C 6C 6C 00 
2b555 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2b559 35c FF 00 FF 00 
2b55d 35d 00 00 00 00 
2b561 35e 00 00 00 6C 
2b565 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2b569 360 EF 00 EF 6C 
2b56d 361 6C 6C 6C 6C 
2b571 362 6C 6C 6C 00 
2b575 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2b579 364 63 3E 63 63 
2b57d 365 63 63 3E 63 
2b581 366 00 00 00 00 
2b585 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2b589 368 30 3C 36 33 
2b58d 369 33 33 33 6E 
2b591 36a 00 00 00 00 
2b595 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2b599 36c 66 66 6F 66 
2b59d 36d 66 66 36 1F 
2b5a1 36e 00 00 00 36 
2b5a5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2b5a9 370 66 66 66 66 
2b5ad 371 66 66       | 	byte	$66[6]
2b5af 371 36 1F 00 00 
2b5b3 372 00 00 63 00 
2b5b7 373 7F 66 46 16 
2b5bb 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2b5bf 375 66 7F 00 00 
2b5c3 376 00 6C 38 00 
2b5c7 377 38 30 30 3C 
2b5cb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2b5cf 379 33 6E 00 00 
2b5d3 37a 00 36 1C 00 
2b5d7 37b 63 67 6F 7F 
2b5db 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2b5df 37d 63 63 00 00 
2b5e3 37e 00 30 18 00 
2b5e7 37f 3C 18 18 18 
2b5eb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2b5ef 381 18 3C 00 00 
2b5f3 382 00 3C 66 00 
2b5f7 383 3C 18 18 18 
2b5fb 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2b5ff 385 18 3C 00 00 
2b603 386 00 00 00 36 
2b607 387 1C 08 00 3E 
2b60b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2b60f 389 63 3E 00 00 
2b613 38a 00 18 18 18 
2b617 38b 18 18 18 18 
2b61b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2b61f 38d 00 00 00 00 
2b623 38e 00 00 00 00 
2b627 38f 00 00 00 00 | 	byte	$00[12]
2b62b 390 F8 18 18 18 
2b62f 391 18 18 18 18 
2b633 392 18 FF FF FF 
2b637 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2b63b 394 FF FF FF FF 
2b63f 395 FF FF FF FF 
2b643 396 FF          | 	byte	$ff[9]
2b644 397 00 00 00 00 
2b648 398 00 00 00    | 	byte	$00[7]
2b64b 398 FF FF FF FF 
2b64f 399 FF FF FF FF 
2b653 39a FF          | 	byte	$ff[9]
2b654 39b 00 00 00 7E 
2b658 39c 7E 5A 18 18 
2b65c 39d 18 18 18 18 
2b660 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2b664 39f 1C 36 1C 63 
2b668 3a0 63 63 63 63 
2b66c 3a1 63 63 63 63 
2b670 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b674 3a3 FF FF FF FF 
2b678 3a4 FF FF FF    | 	byte	$ff[7]
2b67b 3a4 00 00 00 00 
2b67f 3a5 00 00 00 00 
2b683 3a6 00          | 	byte	$00[9]
2b684 3a7 30 18 00 3E 
2b688 3a8 63 63 63 63 
2b68c 3a9 63 63 63 63 
2b690 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b694 3ab 00 00 00 1E 
2b698 3ac 33 33 33 1B 
2b69c 3ad 33 63 63 63 
2b6a0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
2b6a4 3af 1C 36 00 3E 
2b6a8 3b0 63 63 63 63 
2b6ac 3b1 63 63 63 63 
2b6b0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b6b4 3b3 30 18 00 63 
2b6b8 3b4 67 6F 7F 7B 
2b6bc 3b5 73 63 63 63 
2b6c0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
2b6c4 3b7 00 00 60 30 
2b6c8 3b8 18 00 3B 66 
2b6cc 3b9 66 66 66 66 
2b6d0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2b6d4 3bb 00 00 36 1C 
2b6d8 3bc 08 00 3B 66 
2b6dc 3bd 66 66 66 66 
2b6e0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
2b6e4 3bf 36 1C 00 3E 
2b6e8 3c0 63 63 06 1C 
2b6ec 3c1 30 60 63 63 
2b6f0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2b6f4 3c3 00 00 36 1C 
2b6f8 3c4 08 00 3E 63 
2b6fc 3c5 06 1C 30 63 
2b700 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2b704 3c7 30 18 00 3F 
2b708 3c8 66 66 66 3E 
2b70c 3c9 36 66 66 66 
2b710 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2b714 3cb 30 18 00 63 
2b718 3cc 63 63 63 63 
2b71c 3cd 63 63 63 63 
2b720 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b724 3cf 00 00 60 30 
2b728 3d0 18 00 3B 6E 
2b72c 3d1 66 06 06 06 
2b730 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2b734 3d3 66 33 00 63 
2b738 3d4 63 63 63 63 
2b73c 3d5 63 63 63 63 
2b740 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2b744 3d7 00 00 60 30 
2b748 3d8 18 00 63 63 
2b74c 3d9 63 63 63 63 
2b750 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2b754 3db 30 18 00 66 
2b758 3dc 66 66 66 3C 
2b75c 3dd 18 18 18 18 
2b760 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2b764 3df 00 00 00 08 
2b768 3e0 0C 0C 3F 0C 
2b76c 3e1 0C 0C 0C 6C 
2b770 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2b774 3e3 30 18 00 00 
2b778 3e4 00 00 00 00 
2b77c 3e5 00 00 00 00 
2b780 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b784 3e7 00 00 00 00 
2b788 3e8 00 00 00 00 | 	byte	$00[8]
2b78c 3e9 7F 00 00 00 
2b790 3ea 00 00 00 00 
2b794 3eb 66 33 00 00 
2b798 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2b79c 3ed 00 00 00 00 
2b7a0 3ee 00 00 00 00 
2b7a4 3ef 00 00 00 00 
2b7a8 3f0 00 00 00 00 
2b7ac 3f1 00 00 00 00 
2b7b0 3f2 00          | 	byte	$00[21]
2b7b1 3f2 0C 06 3C 36 
2b7b5 3f3 1C 00 00 00 
2b7b9 3f4 00 00 00 00 
2b7bd 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b7c1 3f6 00 00 00 63 
2b7c5 3f7 3E 00 00 00 
2b7c9 3f8 00 00 00 00 
2b7cd 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b7d1 3fa 00 00 00 00 
2b7d5 3fb 3E 63 06 1C 
2b7d9 3fc 36 63 63 36 
2b7dd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
2b7e1 3fe 00 00 00 00 
2b7e5 3ff 00 00 00 00 | 	byte	$00[8]
2b7e9 400 18 00 7E 00 
2b7ed 401 18 00 00 00 
2b7f1 402 00 00 00 00 
2b7f5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b7f9 404 00 00 00 00 
2b7fd 405 00 00 00 00 | 	byte	$00[8]
2b801 406 18 30 1E 00 
2b805 407 00 00 1C 36 
2b809 408 36 1C 00 00 
2b80d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
2b811 40a 00 00 00 00 
2b815 40b 63 00 00 00 
2b819 40c 00 00 00 00 
2b81d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b821 40e 00 00 00 18 
2b825 40f 18 00 00 00 
2b829 410 00 00 00 00 
2b82d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b831 412 00 00 00 00 
2b835 413 00          | 	byte	$00[5]
2b836 413 CC 66 33 00 
2b83a 414 33 33 33 33 
2b83e 415 33 33 6E 00 
2b842 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2b846 417 00 3F 66 66 
2b84a 418 66 3E 36 66 
2b84e 419 66 66 6F 00 
2b852 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2b856 41b 36 1C 08 00 
2b85a 41c 3B 6E 66 06 
2b85e 41d 06 06 0F 00 
2b862 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2b866 41f 00 00 00 7E 
2b86a 420 7E 7E 7E 7E 
2b86e 421 7E 7E 00 00 
2b872 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2b876 423 00 00 00 00 
2b87a 424 00 00 00 00 
2b87e 425 00 00 00 00 
2b882 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2b884 427             | 'vga_font       file "vgafont.def"
2b884 427 00 00 00 00 
      ...             
2b8b4 433 00 00 00 00 
2b8b8 434 00 00 00    | st_font        file "st4font.def"
2b8bb 434 FF FF 00 00 
2b8bf 435 00 00 00 00 
2b8c3 436 00 18 18 18 
2b8c7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b8cb 438 18 18 18 18 
2b8cf 439 18 18 18 18 
2b8d3 43a 18          | 	byte	$18[9]
2b8d4 43b 00 00 00 00 
2b8d8 43c 00 00 00    | 	byte	$00[7]
2b8db 43c FF FF 18 18 
2b8df 43d 18 18 18 18 
2b8e3 43e 18 18 18 18 
2b8e7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b8eb 440 FF FF 00 00 
2b8ef 441 00 00 00 00 
2b8f3 442 00 18 18 18 
2b8f7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b8fb 444 1F 1F 18 18 
2b8ff 445 18 18 18 18 
2b903 446 18 18 18 18 
2b907 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b90b 448 F8 F8 18 18 
2b90f 449 18 18 18 18 
2b913 44a 18 00 00 00 
2b917 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b91b 44c 1F 1F 18 18 
2b91f 44d 18 18 18 18 
2b923 44e 18 00 00 00 
2b927 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2b92b 450 F8 F8 18 18 
2b92f 451 18 18 18 18 
2b933 452 18 18 18 18 
2b937 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2b93b 454 1F 1F 00 00 
2b93f 455 00 00 00 00 
2b943 456 00 18 18 18 
2b947 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b94b 458 F8 F8 00 00 
2b94f 459 00 00 00 00 
2b953 45a 00 18 18 18 
2b957 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2b95b 45c FF FF 18 18 
2b95f 45d 18 18 18 18 
2b963 45e 18 00 00 18 
2b967 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2b96b 460 66 7E 7E 66 
2b96f 461 66 66 66 30 
2b973 462 18 00 00 7E 
2b977 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2b97b 464 3E 06 06 06 
2b97f 465 06 7E 7E 18 
2b983 466 0C 30 18 3C 
2b987 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2b98b 468 06 06 06 66 
2b98f 469 66 7E 3C 00 
2b993 46a 00 30 18 66 
2b997 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2b99b 46c 7E 7E 76 76 
2b99f 46d 66 66 66 00 
2b9a3 46e 00 30 18 7C 
2b9a7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2b9ab 470 1C 38 70 60 
2b9af 471 60 7E 3E 00 
2b9b3 472 00 30 18 7E 
2b9b7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
2b9bb 474 18 0C 0C 06 
2b9bf 475 06 7E 7E 00 
2b9c3 476 00 18 18 00 
2b9c7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2b9cb 478 18 18 0C 0C 
2b9cf 479 06 7E 7E 00 
2b9d3 47a 00 30 18 3C 
2b9d7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2b9db 47c 66 66 66 66 
2b9df 47d 66          | 	byte	$66[5]
2b9e0 47e 7E 3C 00 00 
2b9e4 47f 00 00 06 06 
2b9e8 480 06 06 16 1E 
2b9ec 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2b9f0 482 7E 7E 00 00 
2b9f4 483 00 00 00 00 
2b9f8 484 00 3C 7C 60 
2b9fc 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2ba00 486 7E 7C 30 18 
2ba04 487 00 00 00 00 
2ba08 488 00 3C 7E 66 
2ba0c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2ba10 48a 7E 7C 18 0C 
2ba14 48b 00 00 30 18 
2ba18 48c 00 3C 3E 06 
2ba1c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2ba20 48e 7E 7C 00 00 
2ba24 48f 00 00 30 18 
2ba28 490 00 3E 7E 66 
2ba2c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2ba30 492 66 66 00 00 
2ba34 493 00 00 30 18 
2ba38 494 00 7C 7E 06 
2ba3c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2ba40 496 7E 3E 00 00 
2ba44 497 00 00 30 18 
2ba48 498 00 7E 7E 30 
2ba4c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2ba50 49a 7E 7E 00 00 
2ba54 49b 00 00 18 18 
2ba58 49c 00 7E 7E 30 
2ba5c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2ba60 49e 7E 7E 00 00 
2ba64 49f 00 00 30 18 
2ba68 4a0 00 3C 7E 66 
2ba6c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
2ba70 4a2 7E 3C 00 00 
2ba74 4a3 00 00 1C 1C 
2ba78 4a4 18 18 38 3C 
2ba7c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
2ba80 4a6 3C 3C 00 00 
2ba84 4a7 00 00 00 00 
2ba88 4a8 00 00 00 00 
2ba8c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ba90 4aa 00 00 00 00 
2ba94 4ab 00 00       | 	byte	$00[6]
2ba96 4ab 18 18 18 18 
2ba9a 4ac 18 18 18 18 | 	byte	$18[8]
2ba9e 4ad 00 00 18 18 
2baa2 4ae 00 00 00 00 
2baa6 4af 66 66 66 66 
2baaa 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
2baae 4b1 00 00 00 00 
2bab2 4b2 00 00 00 00 
2bab6 4b3 00          | 	byte	$00[9]
2bab7 4b3 66 66 FF FF 
2babb 4b4 66 66 FF FF 
2babf 4b5 66 66 00 00 
2bac3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2bac7 4b7 7C 7E 06 06 
2bacb 4b8 3E 7C 60 60 
2bacf 4b9 7E 3E 18 18 
2bad3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2bad7 4bb 66 30 30 18 
2badb 4bc 18 0C 0C 66 
2badf 4bd 66 00 00 00 
2bae3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
2bae7 4bf 66 66 3C 1C 
2baeb 4c0 1C FC FE 66 
2baef 4c1 66 FE FC 00 
2baf3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2baf7 4c3 18 18 18 18 
2bafb 4c4 00 00 00 00 
2baff 4c5 00 00 00 00 
2bb03 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2bb07 4c7 18 1C 0C 0C 
2bb0b 4c8 0C 0C 0C 0C 
2bb0f 4c9 1C 18 30 00 
2bb13 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2bb17 4cb 18 38 30 30 
2bb1b 4cc 30 30 30 30 
2bb1f 4cd 38 18 0C 00 
2bb23 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2bb27 4cf 66 66 3C 3C 
2bb2b 4d0 FF FF 3C 3C 
2bb2f 4d1 66 66 00 00 
2bb33 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2bb37 4d3 00 18 18 18 
2bb3b 4d4 7E 7E 18 18 
2bb3f 4d5 18 00 00 00 
2bb43 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2bb47 4d7 00 00 00 00 
2bb4b 4d8 00 00       | 	byte	$00[6]
2bb4d 4d9 18 18 18 18 
2bb51 4da 18          | 	byte	$18[5]
2bb52 4da 0C 04 00 00 
2bb56 4db 00 00 00 00 
2bb5a 4dc 7E 7E 00 00 
2bb5e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2bb62 4de 00 00 00 00 
2bb66 4df 00 00 00 00 
2bb6a 4e0 00 00 00 00 
2bb6e 4e1 00          | 	byte	$00[13]
2bb6f 4e1 18 18 18 00 
2bb73 4e2 00 00 00 60 
2bb77 4e3 60 60 30 30 
2bb7b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
2bb7f 4e5 06 06 06 00 
2bb83 4e6 00 00 00 3C 
2bb87 4e7 7E 66 66 66 
2bb8b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
2bb8f 4e9 66 7E 3C 00 
2bb93 4ea 00 00 00 18 
2bb97 4eb 18 1C 1C 18 
2bb9b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
2bb9f 4ed 18 7E 7E 00 
2bba3 4ee 00 00 00 3C 
2bba7 4ef 7E 66 66 30 
2bbab 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
2bbaf 4f1 0C 7E 7E 00 
2bbb3 4f2 00 00 00 7E 
2bbb7 4f3 7E 30 30 18 
2bbbb 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2bbbf 4f5 66 7E 3C 00 
2bbc3 4f6 00 00 00 30 
2bbc7 4f7 30 38 38 3C 
2bbcb 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2bbcf 4f9 7E 30 30 00 
2bbd3 4fa 00 00 00 7E 
2bbd7 4fb 7E 06 06 3E 
2bbdb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2bbdf 4fd 66 7E 3C 00 
2bbe3 4fe 00 00 00 38 
2bbe7 4ff 3C 0E 06 06 
2bbeb 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2bbef 501 66 7E 3C 00 
2bbf3 502 00 00 00 7E 
2bbf7 503 7E 60 60 30 
2bbfb 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2bbff 505 0C 0C 0C 00 
2bc03 506 00 00 00 3C 
2bc07 507 7E 66 66 3C 
2bc0b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2bc0f 509 66 7E 3C 00 
2bc13 50a 00 00 00 3C 
2bc17 50b 7E 66 66 7E 
2bc1b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2bc1f 50d 70 3C 1C 00 
2bc23 50e 00 00 00 00 
2bc27 50f 00 00 18 18 
2bc2b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2bc2f 511 18 18 18 00 
2bc33 512 00 00 00 00 
2bc37 513 00 00 18 18 
2bc3b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2bc3f 515 18 18 18 0C 
2bc43 516 04 00 00 00 
2bc47 517 70 38 1C 0E 
2bc4b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2bc4f 519 70 00 00 00 
2bc53 51a 00 00 00 00 
2bc57 51b 00 00 7E 7E 
2bc5b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
2bc5f 51d 00 00 00 00 
2bc63 51e 00 00 00 00 | 	byte	$00[8]
2bc67 51f 0E 1C 38 70 
2bc6b 520 E0 70 38 1C 
2bc6f 521 0E 00 00 00 
2bc73 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2bc77 523 7E 66 66 30 
2bc7b 524 30 18 18 18 
2bc7f 525 00 18 18 00 
2bc83 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2bc87 527 7E 66 66 66 
2bc8b 528 66 36 06 66 
2bc8f 529 66 7E 3C 00 
2bc93 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2bc97 52b 3C 7E 66 66 
2bc9b 52c 66 7E 7E 66 
2bc9f 52d 66 66 66 00 
2bca3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2bca7 52f 7E 66 66 7E 
2bcab 530 3E 66 66 66 
2bcaf 531 66 7E 3E 00 
2bcb3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2bcb7 533 7E 66 66 06 
2bcbb 534 06 06 06 66 
2bcbf 535 66 7E 3C 00 
2bcc3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2bcc7 537 7E 66 66 66 
2bccb 538 66 66 66 66 
2bccf 539 66 7E 3E 00 
2bcd3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2bcd7 53b 7E 06 06 3E 
2bcdb 53c 3E 06 06 06 
2bcdf 53d 06 7E 7E 00 
2bce3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
2bce7 53f 7E 06 06 3E 
2bceb 540 3E 06 06 06 
2bcef 541 06 06 06 00 
2bcf3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
2bcf7 543 7E 06 06 76 
2bcfb 544 76 66 66 66 
2bcff 545 66 7E 3C 00 
2bd03 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
2bd07 547 66 66 66 7E 
2bd0b 548 7E 66 66 66 
2bd0f 549 66 66 66 00 
2bd13 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
2bd17 54b 7E 18 18 18 
2bd1b 54c 18 18 18 18 
2bd1f 54d 18 7E 7E 00 
2bd23 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
2bd27 54f 60 60 60 60 
2bd2b 550 60 60 60    | 	byte	$60[7]
2bd2e 551 66 66 7E 3C 
2bd32 552 00 00 00 00 
2bd36 553 66 66 36 36 
2bd3a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2bd3e 555 66 66 C6 C6 
2bd42 556 00 00 00 00 
2bd46 557 06 06 06 06 
2bd4a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2bd4e 559 06 06 7E 7E 
2bd52 55a 00 00 00 00 
2bd56 55b C6 C6 EE EE 
2bd5a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
2bd5e 55d C6 C6 C6 C6 
2bd62 55e 00 00 00 00 
2bd66 55f 66 66 66 6E 
2bd6a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
2bd6e 561 76 66 66 66 
2bd72 562 00 00 00 00 
2bd76 563 3C 7E 66 66 
2bd7a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2bd7e 565 66 66 7E 3C 
2bd82 566 00 00 00 00 
2bd86 567 3E 7E 66 66 
2bd8a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
2bd8e 569 06 06 06 06 
2bd92 56a 00 00 00 00 
2bd96 56b 3C 7E 66 66 
2bd9a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
2bd9e 56d 66 56 3E 6C 
2bda2 56e 00 00 00 00 
2bda6 56f 3E 7E 66 66 
2bdaa 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
2bdae 571 66 66 C6 C6 
2bdb2 572 00 00 00 00 
2bdb6 573 7C 7E 06 06 
2bdba 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2bdbe 575 60 60 7E 3E 
2bdc2 576 00 00 00 00 
2bdc6 577 7E 7E 18 18 
2bdca 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2bdce 579 18 18 18 18 
2bdd2 57a 00 00 00 00 
2bdd6 57b 66 66 66 66 
2bdda 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2bdde 57d 66 66 7E 3C 
2bde2 57e 00 00 00 00 
2bde6 57f 66 66 66 66 
2bdea 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2bdee 581 3C 3C 18 18 
2bdf2 582 00 00 00 00 
2bdf6 583 C6 C6 C6 C6 
2bdfa 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2bdfe 585 FE EE C6 82 
2be02 586 00 00 00 00 
2be06 587 66 66 66 3C 
2be0a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2be0e 589 3C 66 66 66 
2be12 58a 00 00 00 00 
2be16 58b 66 66 66 66 
2be1a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2be1e 58d 18 18 18 18 
2be22 58e 00 00 00 00 
2be26 58f 7E 7E 30 30 
2be2a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2be2e 591 06 06 7E 7E 
2be32 592 00 00 00 00 
2be36 593 3C 3C 0C 0C 
2be3a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2be3e 595 0C 0C 3C 3C 
2be42 596 00 00 00 00 
2be46 597 06 06 0C 0C 
2be4a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2be4e 599 60 60 C0 C0 
2be52 59a 00 00 00 00 
2be56 59b 3C 3C 30 30 
2be5a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
2be5e 59d 30 30 3C 3C 
2be62 59e 00 00 00 00 
2be66 59f 18 18 3C 3C 
2be6a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
2be6e 5a1 00 00 00 00 
2be72 5a2 00 00 00 00 
2be76 5a3 00 00 00 00 
2be7a 5a4 00 00 00 00 
2be7e 5a5 00 00       | 	byte	$00[18]
2be80 5a6 FE FE 00 00 
2be84 5a7 00 00 0C 0C 
2be88 5a8 18 18 00 00 
2be8c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
2be90 5aa 00 00 00 00 
2be94 5ab 00 00 00 00 
2be98 5ac 00          | 	byte	$00[9]
2be99 5ac 3C 7C 60 7C 
2be9d 5ad 7E 66 66 7E 
2bea1 5ae 7C 00 00 00 
2bea5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
2bea9 5b0 3E 7E 66 66 
2bead 5b1 66 66 66 7E 
2beb1 5b2 3E 00 00 00 
2beb5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
2beb9 5b4 3C 3E 06 06 
2bebd 5b5 06 06 06 7E 
2bec1 5b6 7C 00 00 00 
2bec5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
2bec9 5b8 7C 7E 66 66 
2becd 5b9 66 66 66 7E 
2bed1 5ba 7C 00 00 00 
2bed5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
2bed9 5bc 3C 7E 66 66 
2bedd 5bd 7E 06 06 7E 
2bee1 5be 7C 00 00 00 
2bee5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
2bee9 5c0 18 7E 7E 18 
2beed 5c1 18 18 18 18 
2bef1 5c2 18 00 00 00 
2bef5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2bef9 5c4 7C 7E 66 66 
2befd 5c5 66 66 7E 7C 
2bf01 5c6 60 7E 3E 00 
2bf05 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
2bf09 5c8 3E 7E 66 66 
2bf0d 5c9 66 66 66 66 
2bf11 5ca 66 00 00 00 
2bf15 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
2bf19 5cc 1C 1C 18 18 
2bf1d 5cd 18 18 18 3C 
2bf21 5ce 3C 00 00 00 
2bf25 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
2bf29 5d0 30 30 30 30 
2bf2d 5d1 30 30 30 30 
2bf31 5d2 30          | 	byte	$30[9]
2bf32 5d2 3E 1E 00 00 
2bf36 5d3 06 06 06 36 
2bf3a 5d4 36 1E 1E 1E 
2bf3e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2bf42 5d6 00 00 00 00 
2bf46 5d7 1C 1C 18 18 
2bf4a 5d8 18 18 18 18 
2bf4e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2bf52 5da 00 00 00 00 
2bf56 5db 00 00 00    | 	byte	$00[7]
2bf59 5dc 6C FE FE D6 
2bf5d 5dd D6 C6 C6 C6 
2bf61 5de C6 00 00 00 
2bf65 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
2bf69 5e0 3E 7E 66 66 
2bf6d 5e1 66 66 66 66 
2bf71 5e2 66 00 00 00 
2bf75 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
2bf79 5e4 3C 7E 66 66 
2bf7d 5e5 66 66 66 7E 
2bf81 5e6 3C 00 00 00 
2bf85 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
2bf89 5e8 3E 7E 66 66 
2bf8d 5e9 66 66 66 7E 
2bf91 5ea 3E 06 06 00 
2bf95 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2bf99 5ec 7C 7E 66 66 
2bf9d 5ed 66 66 66 7E 
2bfa1 5ee 7C 60 60 00 
2bfa5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2bfa9 5f0 3E 7E 66 06 
2bfad 5f1 06 06 06 06 
2bfb1 5f2 06 00 00 00 
2bfb5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2bfb9 5f4 7C 7E 06 0E 
2bfbd 5f5 3C 70 60 7E 
2bfc1 5f6 3E 00 00 00 
2bfc5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2bfc9 5f8 7E 7E 18 18 
2bfcd 5f9 18 18 18 78 
2bfd1 5fa 70 00 00 00 
2bfd5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2bfd9 5fc 66 66 66 66 
2bfdd 5fd 66 66 66    | 	byte	$66[7]
2bfe0 5fe 7E 7C 00 00 
2bfe4 5ff 00 00 00 00 
2bfe8 600 00 66 66 66 
2bfec 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2bff0 602 18 18 00 00 
2bff4 603 00 00 00 00 
2bff8 604 00 C6 C6 D6 
2bffc 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2c000 606 C6 82 00 00 
2c004 607 00 00 00 00 
2c008 608 00 66 66 3C 
2c00c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2c010 60a 66 66 00 00 
2c014 60b 00 00 00 00 
2c018 60c 00 66 66 66 
2c01c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2c020 60e 7C 60 7E 3E 
2c024 60f 00 00 00 00 
2c028 610 00 7E 7E 30 
2c02c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2c030 612 7E 7E 00 00 
2c034 613 00 00 30 18 
2c038 614 18 18 18 0C 
2c03c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2c040 616 18 30 00 00 
2c044 617 00 00 18 18 
2c048 618 18 18 18 18 
2c04c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2c050 61a 18 18 00 00 
2c054 61b 00 00 0C 18 
2c058 61c 18 18 18 30 
2c05c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
2c060 61e 18 0C 00 00 
2c064 61f 00 00 6C 7E 
2c068 620 36 00 00 00 
2c06c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
2c070 622 00 00 00 00 
2c074 623 00 00 00 00 
2c078 624 00          | 	byte	$00[9]
2c079 624 18 18 18 18 
2c07d 625 18 18 00 00 
2c081 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2c084 627             | 'amiga_font     file "amigafont.def"
2c084 627 00 6C FE FE 
2c088 628 7C 38 10 00 
2c08c 629 18 18 18 F8 
2c090 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2c094 62b C0 C0 C0 C0 
2c098 62c C0 C0 C0 C0 | 	byte	$c0[8]
2c09c 62d 18 18 18 1F 
2c0a0 62e 1F 00 00 00 
2c0a4 62f 18 18 18 1F 
2c0a8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2c0ac 631 00 00 00 1F 
2c0b0 632 1F 18 18 18 
2c0b4 633 C0 E0 70 38 
2c0b8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
2c0bc 635 03 07 0E 1C 
2c0c0 636 38 70 E0 C0 
2c0c4 637 80 C0 E0 F0 
2c0c8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2c0cc 639 00 00 00 00 
2c0d0 63a F0 F0 F0 F0 
2c0d4 63b 01 03 07 0F 
2c0d8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2c0dc 63d F0 F0 F0 F0 
2c0e0 63e 00 00 00 00 
2c0e4 63f 0F 0F 0F 0F 
2c0e8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2c0ec 641 FF FF 00 00 
2c0f0 642 00 00 00 00 
2c0f4 643 00 00 00 00 
2c0f8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2c0fc 645 00 00 00 00 
2c100 646 0F 0F 0F 0F 
2c104 647 00 38 38 EE 
2c108 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2c10c 649 00 00 00 F8 
2c110 64a F8 18 18 18 
2c114 64b 00 00 00 FF 
2c118 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2c11c 64d 18 18 18 FF 
2c120 64e FF 18 18 18 
2c124 64f 00 00 3C 7E 
2c128 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2c12c 651 00 00 00 00 
2c130 652 FF FF FF FF 
2c134 653 03 03 03 03 
2c138 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2c13c 655 00 00 00 FF 
2c140 656 FF 18 18 18 
2c144 657 18 18 18 FF 
2c148 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2c14c 659 0F 0F 0F 0F 
2c150 65a 0F 0F 0F 0F | 	byte	$0f[8]
2c154 65b 18 18 18 F8 
2c158 65c F8 00 00 00 
2c15c 65d 1E 06 1E 06 
2c160 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2c164 65f 00 18 3C 7E 
2c168 660 18 18 18 00 
2c16c 661 00 18 18 18 
2c170 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2c174 663 00 18 0C 7E 
2c178 664 0C 18 00 00 
2c17c 665 00 18 30 7E 
2c180 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2c184 667 00 00 00 00 
2c188 668 00 00 00 00 
2c18c 669 00          | 	byte	$00[9]
2c18d 669 18 18 18 18 
2c191 66a 00 18 00 00 
2c195 66b 66 66 66 00 
2c199 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2c19d 66d 66 FF 66 66 
2c1a1 66e FF 66 00 18 
2c1a5 66f 7C 06 3C 60 
2c1a9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2c1ad 671 66 36 18 0C 
2c1b1 672 66 62 00 38 
2c1b5 673 6C 38 1C F6 
2c1b9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
2c1bd 675 18 18 18 00 
2c1c1 676 00 00 00 00 
2c1c5 677 70 38 18 18 
2c1c9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2c1cd 679 0E 1C 18 18 
2c1d1 67a 1C 0E 00 00 
2c1d5 67b 66 3C FF 3C 
2c1d9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2c1dd 67d 18 18 7E 18 
2c1e1 67e 18 00 00 00 
2c1e5 67f 00 00 00 00 
2c1e9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2c1ed 681 00 00 7E 00 
2c1f1 682 00 00 00 00 
2c1f5 683 00 00 00 00 
2c1f9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2c1fd 685 60 30 18 0C 
2c201 686 06 02 00 00 
2c205 687 3C 66 76 6E 
2c209 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2c20d 689 18 1C 18 18 
2c211 68a 18 7E 00 00 
2c215 68b 3C 66 30 18 
2c219 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2c21d 68d 7E 30 18 30 
2c221 68e 66 3C 00 00 
2c225 68f 30 38 3C 36 
2c229 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2c22d 691 7E 06 3E 60 
2c231 692 66 3C 00 00 
2c235 693 3C 06 3E 66 
2c239 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2c23d 695 7E 60 30 18 
2c241 696 0C 0C 00 00 
2c245 697 3C 66 3C 66 
2c249 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2c24d 699 3C 66 7C 60 
2c251 69a 30 1C 00 00 
2c255 69b 00 18 18 00 
2c259 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2c25d 69d 00 18 18 00 
2c261 69e 18 18 0C 60 
2c265 69f 30 18 0C 18 
2c269 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2c26d 6a1 00 7E 00 00 
2c271 6a2 7E 00 00 06 
2c275 6a3 0C 18 30 18 
2c279 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2c27d 6a5 3C 66 30 18 
2c281 6a6 00 18 00 00 
2c285 6a7 3C 66 76 76 
2c289 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2c28d 6a9 18 3C 66 66 
2c291 6aa 7E 66 00 00 
2c295 6ab 3E 66 3E 66 
2c299 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2c29d 6ad 3C 66 06 06 
2c2a1 6ae 66 3C 00 00 
2c2a5 6af 1E 36 66 66 
2c2a9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2c2ad 6b1 7E 06 3E 06 
2c2b1 6b2 06 7E 00 00 
2c2b5 6b3 7E 06 3E 06 
2c2b9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
2c2bd 6b5 7C 06 06 76 
2c2c1 6b6 66 7C 00 00 
2c2c5 6b7 66 66 7E 66 
2c2c9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2c2cd 6b9 7E 18 18 18 
2c2d1 6ba 18 7E 00 00 
2c2d5 6bb 60 60 60 60 
2c2d9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2c2dd 6bd 66 36 1E 1E 
2c2e1 6be 36 66 00 00 
2c2e5 6bf 06 06 06 06 
2c2e9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2c2ed 6c1 C6 EE FE D6 
2c2f1 6c2 C6 C6 00 00 
2c2f5 6c3 66 6E 7E 7E 
2c2f9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2c2fd 6c5 3C 66 66 66 
2c301 6c6 66 3C 00 00 
2c305 6c7 3E 66 66 3E 
2c309 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2c30d 6c9 3C 66 66 66 
2c311 6ca 36 6C 00 00 
2c315 6cb 3E 66 66 3E 
2c319 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2c31d 6cd 3C 06 3C 60 
2c321 6ce 60 3C 00 00 
2c325 6cf 7E 18 18 18 
2c329 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2c32d 6d1 66 66 66 66 
2c331 6d2 66          | 	byte	$66[5]
2c332 6d2 7E 00 00 66 
2c336 6d3 66 66 66 3C 
2c33a 6d4 18 00 00 C6 
2c33e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2c342 6d6 C6 00 00 66 
2c346 6d7 66 3C 3C 66 
2c34a 6d8 66 00 00 66 
2c34e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2c352 6da 18 00 00 7E 
2c356 6db 30 18 0C 06 
2c35a 6dc 7E 00 00 78 
2c35e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2c362 6de 78 00 00 02 
2c366 6df 06 0C 18 30 
2c36a 6e0 60 00 00 1E 
2c36e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2c372 6e2 1E 00 00 10 
2c376 6e3 38 6C C6 00 
2c37a 6e4 00 00 00 00 
2c37e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c382 6e6 FF 00 00 18 
2c386 6e7 3C 7E 7E 3C 
2c38a 6e8 18 00 00 00 
2c38e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2c392 6ea 7C 00 00 06 
2c396 6eb 06 3E 66 66 
2c39a 6ec 3E 00 00 00 
2c39e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2c3a2 6ee 3C 00 00 60 
2c3a6 6ef 60 7C 66 66 
2c3aa 6f0 7C 00 00 00 
2c3ae 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2c3b2 6f2 3C 00 00 70 
2c3b6 6f3 18 7C 18 18 
2c3ba 6f4 18 00 00 00 
2c3be 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2c3c2 6f6 60 3E 00 06 
2c3c6 6f7 06 3E 66 66 
2c3ca 6f8 66 00 00 18 
2c3ce 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2c3d2 6fa 3C 00 00 60 
2c3d6 6fb 00 60 60 60 
2c3da 6fc 60 3C 00 06 
2c3de 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
2c3e2 6fe 66 00 00 1C 
2c3e6 6ff 18 18 18 18 
2c3ea 700 3C 00 00 00 
2c3ee 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2c3f2 702 C6 00 00 00 
2c3f6 703 3E 66 66 66 
2c3fa 704 66 00 00 00 
2c3fe 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2c402 706 3C 00 00 00 
2c406 707 3E 66 66 3E 
2c40a 708 06 06 00 00 
2c40e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2c412 70a 60 60 00 00 
2c416 70b 3E 66 06 06 
2c41a 70c 06 00 00 00 
2c41e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2c422 70e 3E 00 00 18 
2c426 70f 7E 18 18 18 
2c42a 710 70 00 00 00 
2c42e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2c432 712 7C 00 00 00 
2c436 713 66 66 66 3C 
2c43a 714 18 00 00 00 
2c43e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2c442 716 6C 00 00 00 
2c446 717 66 3C 18 3C 
2c44a 718 66 00 00 00 
2c44e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2c452 71a 30 1E 00 00 
2c456 71b 7E 30 18 0C 
2c45a 71c 7E 00 00 18 
2c45e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2c462 71e 3C 00 18 18 
2c466 71f 18 18 18 18 
2c46a 720 18 18 00 7E 
2c46e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2c472 722 60 00 10 18 
2c476 723 1C 1E 1C 18 
2c47a 724 10 00 08 18 
2c47e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2c482 726 08 00       | 	byte	$08, $00
2c484 727 00 00 00 00 
2c488 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
2c489 728 80 00 00 00 
2c48d 729 00 80 00 00 
2c491 72a 80 80 00 00 
2c495 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
2c499 72c 80 00 80 00 
2c49d 72d 00 40 80 00 
2c4a1 72e AA AA AA 00 
2c4a5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
2c4a9 730 FF 00 00 00 
2c4ad 731 00 FF 00 00 
2c4b1 732 FF FF 00 00 
2c4b5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
2c4b9 734 FF 00 FF 00 
2c4bd 735 00 FF FF 00 
2c4c1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
2c4c4 737 00 00 00 00 
2c4c8 738 00          | ataripalette   file "ataripalettep2.def"
2c4c9 738 11 11 11 00 
2c4cd 739 22 22 22 00 
2c4d1 73a 33 33 33 00 
2c4d5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
2c4d9 73c 55 55 55 00 
2c4dd 73d 66 66 66 00 
2c4e1 73e 77 77 77 00 
2c4e5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
2c4e9 740 99 99 99 00 
2c4ed 741 AA AA AA 00 
2c4f1 742 BB BB BB 00 
2c4f5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
2c4f9 744 DD DD DD 00 
2c4fd 745 EE EE EE 00 
2c501 746 FF FF FF 00 
2c505 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
2c509 748 00 14 40 00 
2c50d 749 00 1E 60 00 
2c511 74a 00 28 80 00 
2c515 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
2c519 74c 00 3C BF 00 
2c51d 74d 00 46 DF 00 
2c521 74e 00 50 FF 00 
2c525 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
2c529 750 39 77 FF 00 
2c52d 751 55 8A FF 00 
2c531 752 71 9E FF 00 
2c535 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
2c539 754 AA C5 FF 00 
2c53d 755 C6 D8 FF 00 
2c541 756 E3 EC FF 00 
2c545 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
2c549 758 00 00 40 00 
2c54d 759 00 00 60 00 
2c551 75a 00 00 80 00 
2c555 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
2c559 75c 00 00 BF 00 
2c55d 75d 00 00 DF 00 
2c561 75e 00 00 FF 00 
2c565 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
2c569 760 39 39 FF 00 
2c56d 761 55 55 FF 00 
2c571 762 71 71 FF 00 
2c575 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
2c579 764 AA AA FF 00 
2c57d 765 C6 C6 FF 00 
2c581 766 E3 E3 FF 00 
2c585 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
2c589 768 20 00 40 00 
2c58d 769 30 00 60 00 
2c591 76a 40 00 80 00 
2c595 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
2c599 76c 60 00 BF 00 
2c59d 76d 70 00 DF 00 
2c5a1 76e 80 00 FF 00 
2c5a5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
2c5a9 770 9C 39 FF 00 
2c5ad 771 AA 55 FF 00 
2c5b1 772 B8 71 FF 00 
2c5b5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
2c5b9 774 D5 AA FF 00 
2c5bd 775 E3 C6 FF 00 
2c5c1 776 F1 E3 FF 00 
2c5c5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
2c5c9 778 40 00 40 00 
2c5cd 779 60 00 60 00 
2c5d1 77a 80 00 80 00 
2c5d5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
2c5d9 77c BF 00 BF 00 
2c5dd 77d DF 00 DF 00 
2c5e1 77e FF 00 FF 00 
2c5e5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
2c5e9 780 FF 39 FF 00 
2c5ed 781 FF 55 FF 00 
2c5f1 782 FF 71 FF 00 
2c5f5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
2c5f9 784 FF AA FF 00 
2c5fd 785 FF C6 FF 00 
2c601 786 FF E3 FF 00 
2c605 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
2c609 788 40 00 20 00 
2c60d 789 60 00 30 00 
2c611 78a 80 00 40 00 
2c615 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
2c619 78c BF 00 60 00 
2c61d 78d DF 00 70 00 
2c621 78e FF 00 80 00 
2c625 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
2c629 790 FF 39 9C 00 
2c62d 791 FF 55 AA 00 
2c631 792 FF 71 B8 00 
2c635 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
2c639 794 FF AA D5 00 
2c63d 795 FF C6 E3 00 
2c641 796 FF E3 F1 00 
2c645 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
2c649 798 40 00 00 00 
2c64d 799 60 00 00 00 
2c651 79a 80 00 00 00 
2c655 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
2c659 79c BF 00 00 00 
2c65d 79d DF 00 00 00 
2c661 79e FF 00 00 00 
2c665 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
2c669 7a0 FF 39 39 00 
2c66d 7a1 FF 55 55 00 
2c671 7a2 FF 71 71 00 
2c675 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
2c679 7a4 FF AA AA 00 
2c67d 7a5 FF C6 C6 00 
2c681 7a6 FF E3 E3 00 
2c685 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
2c689 7a8 40 10 00 00 
2c68d 7a9 60 18 00 00 
2c691 7aa 80 20 00 00 
2c695 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
2c699 7ac BF 30 00 00 
2c69d 7ad DF 38 00 00 
2c6a1 7ae FF 40 00 00 
2c6a5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
2c6a9 7b0 FF 6A 39 00 
2c6ad 7b1 FF 80 55 00 
2c6b1 7b2 FF 95 71 00 
2c6b5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
2c6b9 7b4 FF BF AA 00 
2c6bd 7b5 FF D5 C6 00 
2c6c1 7b6 FF EA E3 00 
2c6c5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
2c6c9 7b8 40 20 00 00 
2c6cd 7b9 60 30 00 00 
2c6d1 7ba 80 40 00 00 
2c6d5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
2c6d9 7bc BF 60 00 00 
2c6dd 7bd DF 70 00 00 
2c6e1 7be FF 80 00 00 
2c6e5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
2c6e9 7c0 FF 9C 39 00 
2c6ed 7c1 FF AA 55 00 
2c6f1 7c2 FF B8 71 00 
2c6f5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
2c6f9 7c4 FF D5 AA 00 
2c6fd 7c5 FF E3 C6 00 
2c701 7c6 FF F1 E3 00 
2c705 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
2c709 7c8 40 30 00 00 
2c70d 7c9 60 48 00 00 
2c711 7ca 80 60 00 00 
2c715 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
2c719 7cc BF 90 00 00 
2c71d 7cd DF A8 00 00 
2c721 7ce FF C0 00 00 
2c725 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
2c729 7d0 FF CE 39 00 
2c72d 7d1 FF D5 55 00 
2c731 7d2 FF DC 71 00 
2c735 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
2c739 7d4 FF EA AA 00 
2c73d 7d5 FF F1 C6 00 
2c741 7d6 FF F8 E3 00 
2c745 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
2c749 7d8 30 40 00 00 
2c74d 7d9 48 60 00 00 
2c751 7da 60 80 00 00 
2c755 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
2c759 7dc 90 BF 00 00 
2c75d 7dd A8 DF 00 00 
2c761 7de C0 FF 00 00 
2c765 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
2c769 7e0 CE FF 39 00 
2c76d 7e1 D5 FF 55 00 
2c771 7e2 DC FF 71 00 
2c775 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
2c779 7e4 EA FF AA 00 
2c77d 7e5 F1 FF C6 00 
2c781 7e6 F8 FF E3 00 
2c785 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
2c789 7e8 00 40 00 00 
2c78d 7e9 00 60 00 00 
2c791 7ea 00 80 00 00 
2c795 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
2c799 7ec 00 BF 00 00 
2c79d 7ed 00 DF 00 00 
2c7a1 7ee 00 FF 00 00 
2c7a5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
2c7a9 7f0 39 FF 39 00 
2c7ad 7f1 55 FF 55 00 
2c7b1 7f2 71 FF 71 00 
2c7b5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
2c7b9 7f4 AA FF AA 00 
2c7bd 7f5 C6 FF C6 00 
2c7c1 7f6 E3 FF E3 00 
2c7c5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
2c7c9 7f8 00 40 14 00 
2c7cd 7f9 00 60 1E 00 
2c7d1 7fa 00 80 28 00 
2c7d5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
2c7d9 7fc 00 BF 3C 00 
2c7dd 7fd 00 DF 46 00 
2c7e1 7fe 00 FF 50 00 
2c7e5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
2c7e9 800 39 FF 77 00 
2c7ed 801 55 FF 8A 00 
2c7f1 802 71 FF 9E 00 
2c7f5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
2c7f9 804 AA FF C5 00 
2c7fd 805 C6 FF D8 00 
2c801 806 E3 FF EC 00 
2c805 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
2c809 808 00 40 28 00 
2c80d 809 00 60 3C 00 
2c811 80a 00 80 50 00 
2c815 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
2c819 80c 00 BF 78 00 
2c81d 80d 00 DF 8C 00 
2c821 80e 00 FF A0 00 
2c825 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
2c829 810 39 FF B5 00 
2c82d 811 55 FF C0 00 
2c831 812 71 FF CA 00 
2c835 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
2c839 814 AA FF DF 00 
2c83d 815 C6 FF EA 00 
2c841 816 E3 FF F4 00 
2c845 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
2c849 818 00 40 40 00 
2c84d 819 00 60 60 00 
2c851 81a 00 80 80 00 
2c855 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
2c859 81c 00 BF BF 00 
2c85d 81d 00 DF DF 00 
2c861 81e 00 FF FF 00 
2c865 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
2c869 820 39 FF FF 00 
2c86d 821 55 FF FF 00 
2c871 822 71 FF FF 00 
2c875 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
2c879 824 AA FF FF 00 
2c87d 825 C6 FF FF 00 
2c881 826 E3 FF FF 00 
2c885 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
2c889 828 00 28 40 00 
2c88d 829 00 3C 60 00 
2c891 82a 00 50 80 00 
2c895 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
2c899 82c 00 78 BF 00 
2c89d 82d 00 8C DF 00 
2c8a1 82e 00 A0 FF 00 
2c8a5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
2c8a9 830 39 B5 FF 00 
2c8ad 831 55 C0 FF 00 
2c8b1 832 71 CA FF 00 
2c8b5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
2c8b9 834 AA DF FF 00 
2c8bd 835 C6 EA FF 00 
2c8c1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
2c8c4 837             | 
2c8c4 837             | '**********************************************************************************
2c8c4 837             | '
2c8c4 837             | '        Timings and colors definitions
2c8c4 837             | '
2c8c4 837             | '**********************************************************************************
2c8c4 837             | 
2c8c4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
2c8c4 837 10 00 00 00 
2c8c8 838 50 00 00 00 
2c8cc 839 0C 00 00 00 
2c8d0 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
2c8d4 83b 08 00 00 00 
2c8d8 83c 04 00 00 00 
2c8dc 83d 08 00 00 00 
2c8e0 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
2c8e4 83f 40 02 00 00 
2c8e8 840 6A 8C 15 14 
2c8ec 841 FB 06 B7 01 
2c8f0 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2c8f4 843 00 00 00 00 
2c8f8 844 C0 00 00 00 
2c8fc 845 00 00 00 00 
2c900 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c904 847 00 75 C7 97 
2c908 848 27 47 F6 0A 
2c90c 849 05 79 CB 9B 
2c910 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2c914 84b             | 
2c914 84b             | ''--------  Initialization  ----------------------------------------------------------------
2c914 84b             | 
2c914 84b 28 0C 64 FD | hdmi            setq    #6
2c918 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2c91c 84d 28 10 64 FD |                 setq    #8
2c920 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2c924 84f             | 
2c924 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
2c928 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2c92c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
2c930 852 D6 C6 01 F1 |                 add     t1,hbase
2c934 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
2c938 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2c93c 855 7B 0B 80 5F 
2c940 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2c944 857 66 66 86 FF 
2c948 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2c94c 859             | '
2c94c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
2c950 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2c954 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
2c958 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2c95c 85d             | 
2c95c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
2c960 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2c964 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
2c968 860             | 
2c968 860             | ''--------  frame rendering main loop  ---------------------------------------------------
2c968 860             | 
2c968 860 28 06 64 FD | p101            setq 	#3
2c96c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
2c970 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2c974 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
2c978 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2c97c 865 00 A0 05 F6 |                 mov     dlinum, #0
2c980 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2c984 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
2c988 868             | 
2c988 868             | 
2c988 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2c98c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
2c990 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
2c994 86b             |                 
2c994 86b             | 
2c994 86b             | 
2c994 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
2c994 86b             |   
2c994 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
2c998 86c 29 FE 65 3D |          if_nc  setq2   #255
2c99c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
2c9a0 86e             | 
2c9a0 86e             | '' -----   up porch (before the picture)
2c9a0 86e             | 
2c9a0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
2c9a4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
2c9a8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2c9ac 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
2c9b0 872             |  
2c9b0 872             |    
2c9b0 872             |  
2c9b0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2c9b4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
2c9b8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
2c9bc 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2c9c0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
2c9c4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
2c9c8 878             | 
2c9c8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2c9cc 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2c9d0 87a 48 00 B0 FD | 		call    #dli
2c9d4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
2c9d8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2c9dc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2c9e0 87e             |                 	
2c9e0 87e             |                 
2c9e0 87e             | 
2c9e0 87e             |  
2c9e0 87e             | '' ------- the main screen drawing starts here
2c9e0 87e             | 
2c9e0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
2c9e4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
2c9e8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2c9ec 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2c9f0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2c9f4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
2c9f8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2c9fc 885             |               
2c9fc 885             | 
2c9fc 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2ca00 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2ca04 887             | 
2ca04 887             | ' ---------------- All visible lines displayed now, start vblank  
2ca04 887             | 
2ca04 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
2ca08 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2ca0c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2ca10 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2ca14 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
2ca18 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2ca1c 88d             | 
2ca1c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2ca1c 88d             | 
2ca1c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2ca1c 88d             | 
2ca1c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2ca20 88e             | 
2ca20 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2ca24 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
2ca28 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2ca2c 891             | 
2ca2c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2ca30 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2ca34 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2ca38 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2ca3c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2ca40 896             | 
2ca40 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2ca44 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2ca48 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2ca4c 899 70 00 90 AD |     if_z        jmp     #preload
2ca50 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2ca54 89b 94 00 90 AD |     if_z        jmp     #preload2
2ca58 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2ca5c 89d 0C 00 90 AD |     if_z        jmp     #p390
2ca60 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2ca64 89f 28 00 90 AD |     if_z        jmp     #p391  
2ca68 8a0             | 
2ca68 8a0 2D 00 64 FD | p308            ret
2ca6c 8a1             |    
2ca6c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2ca70 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2ca74 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2ca78 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2ca7c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2ca80 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2ca84 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2ca88 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2ca8c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2ca90 8aa             |  
2ca90 8aa             | '' --------  Reload palette. To do 
2ca90 8aa             | 
2ca90 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2ca94 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2ca98 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2ca9c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2caa0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2caa4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2caa8 8b0 70 FF 9F FD |         	jmp     #dli                
2caac 8b1             |       
2caac 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2caac 8b1             | 
2caac 8b1             | 
2caac 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2caac 8b1             | 
2caac 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2cab0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2cab4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2cab8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2cabc 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2cac0 8b6             |         
2cac0 8b6             | '' -------------- Preload a line from PSRAM        
2cac0 8b6             |         
2cac0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2cac4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2cac8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2cacc 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2cad0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2cad4 8bb             | 
2cad4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2cad8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2cadc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2cae0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2cae4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2cae8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2caec 8c1             |  
2caec 8c1             |  
2caec 8c1             | preload2      '  incmod  dlinum,#3
2caec 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2caf0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2caf4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2caf8 8c4 28 02 64 FD |                 setq	#1
2cafc 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2cb00 8c6             |                 
2cb00 8c6             | 
2cb00 8c6             | '' -------------- Draw sprites
2cb00 8c6             | 
2cb00 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2cb04 8c7 10 5C 0E F5 | 		and t8,#16 wz
2cb08 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2cb0c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2cb10 8ca             | 		
2cb10 8ca             | 
2cb10 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2cb14 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2cb18 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2cb1c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2cb20 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2cb24 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2cb28 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2cb2c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2cb30 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2cb34 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2cb38 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2cb3c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2cb40 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2cb44 8d7             | 
2cb44 8d7             | 
2cb44 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2cb48 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2cb4c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2cb50 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2cb54 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2cb58 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2cb5c 8dd 00 5E 06 F6 |                 mov 	t9,#0
2cb60 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2cb64 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2cb68 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2cb6c 8e1             |      
2cb6c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2cb70 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2cb74 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2cb78 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2cb7c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2cb80 8e6             |                 
2cb80 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2cb84 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2cb88 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2cb8c 8e9             |   		
2cb8c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2cb90 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2cb94 8eb             | 
2cb94 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2cb98 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2cb9c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2cba0 8ee             |  
2cba0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2cba4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2cba8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2cbac 8f1             | 	
2cbac 8f1             | 	
2cbac 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2cbb0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2cbb4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2cbb8 8f4             | 
2cbb8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2cbbc 8f5             | 
2cbbc 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2cbc0 8f6 01 58 86 F1 | 	 	sub     t6,#1
2cbc4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2cbc8 8f8             | 
2cbc8 8f8 28 58 62 FD |                 setq   	t6
2cbcc 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2cbd0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2cbd4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2cbd8 8fc 24 00 90 AD |         if_z    jmp #p898
2cbdc 8fd             |          
2cbdc 8fd             |         
2cbdc 8fd 70 5F 06 F6 |                 mov  t9,#368
2cbe0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2cbe4 8ff             | 
2cbe4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2cbe8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2cbec 901 FF FF 7F FF 
2cbf0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2cbf4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2cbf8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2cbfc 905 2D 01 00 F5 |                 and 0-0, t7
2cc00 906             |                
2cc00 906             | 
2cc00 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2cc04 907 E5 E0 7A FA |                 wmlong 368,t3				
2cc08 908             |                 
2cc08 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2cc0c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2cc10 90a 2D 00 64 FD |                 ret
2cc14 90b             | 	
2cc14 90b             | 	
2cc14 90b             |                
2cc14 90b             |  
2cc14 90b             | '' -------------- Graphics line ------------------------------------------------------------
2cc14 90b             |  
2cc14 90b             | 
2cc14 90b             | '' consts and vars
2cc14 90b             | 
2cc14 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2cc18 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2cc1c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2cc20 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2cc24 90f             | 
2cc24 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2cc28 910             | 
2cc28 910             | '------ these longs will be set by setmode function
2cc28 910             | 
2cc28 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2cc2c 911 00 00 00 00 | m_sn            long    0        'sync
2cc30 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2cc34 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2cc38 914             | 'm_border        long    0        'left/right borders
2cc38 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2cc3c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2cc40 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2cc44 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2cc48 918 00 00 00 00 | i_totalvis      long    0
2cc4c 919             | 
2cc4c 919             | '-------------------------------------
2cc4c 919             |  
2cc4c 919 00 00 00 00 | linenum         long    0
2cc50 91a 00 00 00 00 | frames          long    0
2cc54 91b 00 00 00 00 | dlinum long 0
2cc58 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2cc5c 91d             | 
2cc5c 91d 00 00 00 00 | vblankptr       long    0
2cc60 91e 00 00 00 00 | modeptr         long    0
2cc64 91f 00 00 00 00 | paletteptr      long    0
2cc68 920 00 00 00 00 | dlptr           long    0
2cc6c 921 01 00 00 00 | hbase           long    1
2cc70 922 00 00 00 00 | mailbox         long    0
2cc74 923 00 00 00 00 | spriteptr          long 0
2cc78 924             | 
2cc78 924 00 00 00 00 | cmd             long    0
2cc7c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2cc80 926 00 04 00 00 | buf2            long    1024
2cc84 927 01 00 00 00 | dlptr2          long    1
2cc88 928 01 00 00 00 | dl              long    1
2cc8c 929             | 
2cc8c 929 00 00 00 00 | buf1c long 0
2cc90 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2cc94 92b 01 00 00 00 | framebuf2       long    1
2cc98 92c 01 00 00 00 | hsync0          long    1
2cc9c 92d 01 00 00 00 | hsync1          long    1
2cca0 92e             | 
2cca0 92e 01 00 00 00 | t1              long    1
2cca4 92f 00 00 00 00 | t2 long 0
2cca8 930 00 00 00 00 | t3 long 0
2ccac 931 00 00 00 00 | t4 long 0
2ccb0 932             | 
2ccb0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2ccb4 933 00 00 00 00 | rcnt2           long    0
2ccb8 934 00 00 00 00 | rcnt2a          long    0
2ccbc 935 00 00 00 00 | roffset         long    0
2ccc0 936 00 00 00 00 | rdl             long    0  'dl repeat line
2ccc4 937 00 00 00 00 | dlc             long    0  'dl command
2ccc8 938             | 
2ccc8 938 FF FF FF FF | affffffff       long    $ffffffff
2cccc 939 00 00 00 00 | sprite1pointer long 0
2ccd0 93a 00 00 00 00 | sprite1xy      long 0
2ccd4 93b 00 00 00 00 | sprite1wh      long 0
2ccd8 93c 00 00 00 00 | sprite2pointer long 0
2ccdc 93d 00 00 00 00 | sprite2xy      long 0
2cce0 93e 00 00 00 00 | sprite2wh      long 0
2cce4 93f 00 00 00 00 | sprite3pointer long 0
2cce8 940 00 00 00 00 | sprite3xy      long 0
2ccec 941 00 00 00 00 | sprite3wh      long 0
2ccf0 942 00 00 00 00 | sprite4pointer long 0
2ccf4 943 00 00 00 00 | sprite4xy      long 0
2ccf8 944 00 00 00 00 | sprite4wh      long 0
2ccfc 945 00 00 00 00 | sprite5pointer long 0
2cd00 946 00 00 00 00 | sprite5xy      long 0
2cd04 947 00 00 00 00 | sprite5wh      long 0
2cd08 948 00 00 00 00 | sprite6pointer long 0
2cd0c 949 00 00 00 00 | sprite6xy      long 0
2cd10 94a 00 00 00 00 | sprite6wh      long 0
2cd14 94b 00 00 00 00 | sprite7pointer long 0
2cd18 94c 00 00 00 00 | sprite7xy      long 0
2cd1c 94d 00 00 00 00 | sprite7wh      long 0
2cd20 94e 00 00 00 00 | sprite8pointer long 0
2cd24 94f 00 00 00 00 | sprite8xy      long 0
2cd28 950 00 00 00 00 | sprite8wh      long 0
2cd2c 951 00 00 00 00 | sprite9pointer long 0
2cd30 952 00 00 00 00 | sprite9xy      long 0
2cd34 953 00 00 00 00 | sprite9wh      long 0
2cd38 954 00 00 00 00 | sprite10pointer long 0
2cd3c 955 00 00 00 00 | sprite10xy      long 0
2cd40 956 00 00 00 00 | sprite10wh      long 0
2cd44 957 00 00 00 00 | sprite11pointer long 0
2cd48 958 00 00 00 00 | sprite11xy      long 0
2cd4c 959 00 00 00 00 | sprite11wh      long 0
2cd50 95a 00 00 00 00 | sprite12pointer long 0
2cd54 95b 00 00 00 00 | sprite12xy      long 0
2cd58 95c 00 00 00 00 | sprite12wh      long 0
2cd5c 95d 00 00 00 00 | sprite13pointer long 0
2cd60 95e 00 00 00 00 | sprite13xy      long 0
2cd64 95f 00 00 00 00 | sprite13wh      long 0
2cd68 960 00 00 00 00 | sprite14pointer long 0
2cd6c 961 00 00 00 00 | sprite14xy      long 0
2cd70 962 00 00 00 00 | sprite14wh      long 0
2cd74 963 00 00 00 00 | sprite15pointer long 0
2cd78 964 00 00 00 00 | sprite15xy      long 0
2cd7c 965 00 00 00 00 | sprite15wh      long 0
2cd80 966 00 00 00 00 | sprite16pointer long 0
2cd84 967 00 00 00 00 | sprite16xy      long 0
2cd88 968 00 00 00 00 | sprite16wh      long 0
2cd8c 969 00 00 00 00 | sprite17pointer long 0
2cd90 96a 00 00 00 00 | sprite17xy      long 0
2cd94 96b 00 00 00 00 | sprite17wh      long 0
2cd98 96c 00 00 00 00 | sprite18pointer long 0
2cd9c 96d 00 00 00 00 | sprite18xy      long 0
2cda0 96e 00 00 00 00 | sprite18wh      long 0
2cda4 96f 00 00 00 00 | spritenum long 0
2cda8 970             | 
2cda8 970 00 00 00 00 | spriteline long 0
2cdac 971 84 03 00 00 | sprite_x long 900
2cdb0 972 00 00 00 00 | sprite_y long 0
2cdb4 973 10 00 00 00 | sprite_w long 16
2cdb8 974 40 00 00 00 | sprite_h long 64
2cdbc 975 00 00 00 00 | l2 long 0
2cdc0 976 00 00 00 00 | t5 long 0
2cdc4 977 00 00 00 00 | t6 long 0
2cdc8 978 00 00 00 00 | t7 long 0
2cdcc 979 00 00 00 00 | t8 long 0
2cdd0 97a 00 00 00 00 | t9 long 0
2cdd4 97b 00 00 00 00 | preloadaddr long 0
2cdd8 97c 00 00 00 00 | preloadlineaddr long 0
2cddc 97d 00 04 00 00 | a1024 long 1024
2cde0 97e             | 
2cde0 97e E0 03 00 00 | aa long 992
2cde4 97f FF 03 00 00 | a1023 long 1023
2cde8 980 00 10 00 00 | a4096 long 4096
2cdec 981             |  fit 368
2cdec 981             | _psram_spin2_dat_
2cdec 981 00 00 00 00 
      ...             
2cee4 9bf 00 00 00 00 
2cee8 9c0 00 00 00 00 |     listdata long 0[8*8]
2ceec 9c1             |             orgh
2ceec                 | 
2ceec                 | ' driver state
2ceec     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2cef0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2cef4                 | 
2cef4                 | ' delay profile
2cef4     07 00 00 00 
2cef8     00 CF 7B 05 
2cefc     80 D1 F0 08 
2cf00     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2cf04     80 C4 60 0F 
2cf08     80 39 7A 12 
2cf0c     40 2D D9 13 
2cf10     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2cf14                 | 
2cf14                 | ' data to be passed to driver when starting it
2cf14                 | startupData
2cf14     00 00 00 00 |     long    0           ' current frequency
2cf18     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2cf1c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2cf20     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2cf24     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2cf28     34 CF 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2cf2c     B4 CF 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2cf30     D4 CF 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2cf34                 | 
2cf34                 | ' data for memory
2cf34                 | deviceData
2cf34                 |     ' 16 bank parameters follow (16MB per bank)
2cf34     00 00 00 00 
      ...             
2cf6c     00 00 00 00 
2cf70     00 00 00 00 |     long    0[16]                               ' banks 0-15
2cf74                 |     ' 16 banks of pin parameters follow
2cf74     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2cf78     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2cf7c     FF FF FF FF 
      ...             
2cfac     FF FF FF FF 
2cfb0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2cfb4                 | 
2cfb4                 | ' data for COG polling
2cfb4                 | qosData 
2cfb4     00 00 FF FF 
2cfb8     00 00 FF FF 
2cfbc     00 00 FF FF 
2cfc0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2cfc4     00 00 FF FF 
2cfc8     00 00 FF FF 
2cfcc     00 00 FF FF 
2cfd0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2cfd4                 |     
2cfd4                 | ' mailbox storage
2cfd4                 | 
2cfd4                 | mailboxes
2cfd4     00 00 00 00 
      ...             
2d02c     00 00 00 00 
2d030     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2d034                 | 	alignl
2d034                 | _psram16drv_spin2_dat_
2d034                 |                             orgh
2d034     00 00 00 00 
      ...             
2d04c     00 00 00 00 
2d050     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2d054                 | 
2d054                 | driver_start
2d054                 |                             org
2d054 000             | '..................................................................................................
2d054 000             | ' Memory layout for COG RAM once operational:
2d054 000             | '
2d054 000             | '  COG RAM address      Usage
2d054 000             | '  ---------------      ----
2d054 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2d054 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2d054 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2d054 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2d054 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2d054 000             | '  ~$198-$1F3           State and register variables
2d054 000             | '
2d054 000             | ' Also during driver COG startup:
2d054 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2d054 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2d054 000             | '..................................................................................................
2d054 000             |                             
2d054 000             | ' Mailbox storage after vector initialization
2d054 000             | 
2d054 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2d058 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2d05c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2d060 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2d064 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2d068 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2d06c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2d070 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2d074 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2d078 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2d07c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2d080 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2d084 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2d088 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2d08c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2d090 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2d094 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2d098 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2d09c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2d0a0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2d0a4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2d0a8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2d0ac 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2d0b0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2d0b4 018             | 
2d0b4 018             | ' Mailbox parameter addresses per COG once patched
2d0b4 018             |                             
2d0b4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2d0b8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2d0bc 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2d0c0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2d0c4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2d0c8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2d0cc 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2d0d0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2d0d4 020             | 
2d0d4 020             | '..................................................................................................
2d0d4 020             | ' Per COG request and state setup and service branching
2d0d4 020             |         
2d0d4 020             | cog0                 
2d0d4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2d0d8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2d0dc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2d0e0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2d0e4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d0e8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d0ec 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2d0f0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2d0f4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2d0f8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d0fc 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d100 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2d104 02c             | cog1                        
2d104 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2d108 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2d10c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2d110 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2d114 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d118 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d11c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2d120 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2d124 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2d128 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d12c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d130 037 33 CA 63 FD |                             execf   request-0               'jump to service
2d134 038             | cog2                         
2d134 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2d138 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2d13c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2d140 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2d144 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d148 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d14c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2d150 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2d154 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2d158 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d15c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d160 043 33 CA 63 FD |                             execf   request-0               'jump to service
2d164 044             | cog3                        
2d164 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2d168 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2d16c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2d170 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2d174 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d178 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d17c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2d180 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2d184 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2d188 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d18c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d190 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2d194 050             | cog4                        
2d194 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2d198 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2d19c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2d1a0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2d1a4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d1a8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d1ac 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2d1b0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2d1b4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2d1b8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d1bc 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d1c0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2d1c4 05c             | cog5                        
2d1c4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2d1c8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2d1cc 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2d1d0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2d1d4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d1d8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d1dc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2d1e0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2d1e4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2d1e8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d1ec 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d1f0 067 33 CA 63 FD |                             execf   request-0               'jump to service
2d1f4 068             | cog6                        
2d1f4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2d1f8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2d1fc 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2d200 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2d204 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d208 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d20c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2d210 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2d214 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2d218 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d21c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d220 073 33 CA 63 FD |                             execf   request-0               'jump to service
2d224 074             | cog7                        
2d224 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2d228 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2d22c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2d230 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2d234 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2d238 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2d23c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2d240 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2d244 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2d248 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2d24c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2d250 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2d254 080             |                             fit     128
2d254 080             | 
2d254 080             |                             fit     128
2d254 080             | pad                         long    0[128-$]                'align init code to $80
2d254 080             | 
2d254 080             | '..................................................................................................
2d254 080             | 
2d254 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2d254 080             | 
2d254 080             | init                        
2d254 080             |                             ' get driver scratch long address in hub
2d254 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2d258 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2d25c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2d260 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2d264 084             |                     
2d264 084             |                             ' read in the additional LUT RAM code
2d264 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2d268 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2d26c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2d270 087             | 
2d270 087             |                             ' read the startup parameters
2d270 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2d274 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2d278 089             | 
2d278 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2d278 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2d27c 08a             | 
2d27c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2d280 08b 01 00 00 5F 
2d284 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2d288 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2d28c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2d290 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2d294 090             | 
2d294 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2d294 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2d298 091 01 00 00 FF 
2d29c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2d2a0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2d2a4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2d2a8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2d2ac 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2d2b0 097 08 DE 47 F5 |                             or      a, #8
2d2b4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2d2b8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2d2bc 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2d2c0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2d2c4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2d2c8 09d 01 DE 07 F1 |                             add     a, #1
2d2cc 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2d2d0 09f             |  
2d2d0 09f             |                             ' setup device control pin states
2d2d0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2d2d4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2d2d8 0a1 01 00 00 FF 
2d2dc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2d2e0 0a3             | 
2d2e0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2d2e4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2d2e8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2d2ec 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2d2f0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2d2f4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2d2f8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2d2fc 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2d300 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2d304 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2d308 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2d30c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2d310 0af             | pinloop
2d310 0af             |                             ' generate minimum CE high time before access
2d310 0af A1 07 00 FF 
2d314 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2d318 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2d31c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2d320 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2d324 0b4 1F DE 63 FD |                             waitx   a                       'delay
2d328 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2d32c 0b6             | 
2d32c 0b6             |                             ' setup the COG mailboxes and addresses 
2d32c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2d330 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2d334 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2d338 0b9             | 
2d338 0b9 28 2E 64 FD |                             setq    #24-1
2d33c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2d340 0bb             | 
2d340 0bb             |                             ' setup the polling loop for active COGs 
2d340 0bb 01 C2 63 FD |                             cogid   id
2d344 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2d348 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2d34c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2d350 0bf 0A F0 07 F6 |                             mov     ptra, #10
2d354 0c0 E1 F1 03 FA |                             mul     ptra, id
2d358 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2d35c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2d360 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2d364 0c4 03 C2 07 FA |                             mul     id, #3
2d368 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2d36c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2d370 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2d374 0c8 D8 01 B0 FD |                             call    #reloadcogs
2d378 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2d37c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2d380 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2d380 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2d384 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2d388 0cd 08 04 DC FC |                             rep     #2, #8
2d38c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2d390 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2d394 0d0             | 
2d394 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2d394 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2d394 0d0 01 C2 63 FD |                             cogid   id
2d398 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2d39c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2d3a0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2d3a4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2d3a8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2d3ac 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2d3b0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2d3b4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2d3b8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2d3bc 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d3c0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2d3c4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2d3c8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2d3cc 0de A5 E5 03 F1 |                             add     d, const512
2d3d0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2d3d4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2d3d8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2d3dc 0e2             |                             
2d3dc 0e2             |                             ' setup register values for control vector loop setup after we return
2d3dc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2d3e0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2d3e4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2d3e8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2d3ec 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2d3f0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2d3f4 0e8 D0 C3 8F F9 |                             altd    id, #id0
2d3f8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2d3fc 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2d400 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2d404 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2d408 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2d40c 0ee             |  
2d40c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2d410 0ef 07 CA 07 F5 |                             and     request, #7
2d414 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2d418 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2d41c 0f2             |                             fit     $100                    'ensure all init code fits this space
2d41c 0f2             | 
2d41c 0f2             |                             fit     $100                    'ensure all init code fits this space
2d41c 0f2             | 
2d41c 0f2 00 00 00 00 
      ...             
2d44c 0fe 00 00 00 00 
2d450 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2d454 100             | 
2d454 100             | '..................................................................................................
2d454 100             | ' Error result handling and COG notification of request completion
2d454 100             | 
2d454 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2d458 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2d45c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2d460 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2d464 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2d468 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2d46c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2d470 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2d474 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2d478 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2d47c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2d480 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2d484 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2d488 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2d48c 10e             | ' Poller re-starts here after a COG is serviced
2d48c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2d490 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2d494 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2d498 111             | ' Main dynamic polling loop repeats until a request arrives
2d498 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2d49c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2d4a0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2d4a4 114             | 
2d4a4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2d4a8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2d4ac 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2d4b0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2d4b4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2d4b8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2d4bc 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2d4c0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2d4c4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2d4c8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2d4cc 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2d4d0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2d4d4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2d4d8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2d4dc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2d4e0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2d4e4 124             | 
2d4e4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2d4e8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2d4ec 126             |  
2d4ec 126             | '..................................................................................................
2d4ec 126             | ' List handler                               
2d4ec 126             | 
2d4ec 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2d4f0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2d4f4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2d4f8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2d4fc 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2d500 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2d504 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2d508 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2d50c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2d510 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2d514 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2d518 131 33 00 60 FD |                             execf   0-0                     'process the request 
2d51c 132             | 
2d51c 132             | '..................................................................................................
2d51c 132             | ' Restoring per COG state and resuming where we left off
2d51c 132             | 
2d51c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2d520 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2d524 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2d528 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2d52c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2d530 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2d534 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2d538 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2d53c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2d540 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2d544 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2d548 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2d54c 13e             |                    
2d54c 13e             | '..................................................................................................
2d54c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2d54c 13e             | 
2d54c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2d550 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2d554 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2d558 141 D0 DF B7 F9 |                             setd    a, #id0
2d55c 142 D8 DF BF F9 |                             sets    a, #addr1
2d560 143 FE FF FF FF 
2d564 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2d568 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2d56c 146 3F DE A7 F9 |                             alti    a, #%111_111 
2d570 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2d574 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2d578 149 01 E2 63 FD |                             cogid   c
2d57c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2d580 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2d584 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2d588 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2d58c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2d590 14f 00 E0 03 F6 |                             mov     b, 0-0
2d594 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2d598 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2d59c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2d5a0 153 0C 00 90 AD |             if_z            jmp     #excluded               
2d5a4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2d5a8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2d5ac 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2d5b0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2d5b4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2d5b8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2d5bc 15a             | 
2d5bc 15a             | 'determine priority cogs and build instructions for the polling sequence
2d5bc 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2d5c0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2d5c4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2d5c8 15d             | 
2d5c8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2d5cc 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2d5d0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2d5d4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2d5d8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2d5dc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2d5e0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2d5e4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2d5e8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2d5ec 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2d5f0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2d5f4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2d5f8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2d5fc 16a             | endprioloop
2d5fc 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2d600 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2d604 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2d608 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2d60c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2d610 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2d614 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2d618 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2d61c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2d620 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2d624 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2d628 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2d62c 176             | 
2d62c 176             | ' populate the round robin COG polling instructions
2d62c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2d630 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2d634 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2d638 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2d63c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2d640 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2d644 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2d648 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2d64c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2d650 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2d654 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2d658 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2d65c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2d660 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2d664 184             | '..................................................................................................
2d664 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2d664 184             | 
2d664 184             | set_latency                                                 '            (a) set latency
2d664 184             | get_latency                                                 '            (b) get latency
2d664 184             | set_burst                                                   '            (c) set burst size of bank
2d664 184             | get_burst                                                   '            (d) get burst size of bank
2d664 184             |                                                             '            (e) dump state
2d664 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2d668 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2d66c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2d670 187             |                                                             ' | | | | e  account for following AUGS
2d670 187 04 00 00 FF 
2d674 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2d678 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2d67c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2d680 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2d684 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2d688 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2d68c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2d690 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2d694 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2d698 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2d69c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2d6a0 193             | 
2d6a0 193             | '..................................................................................................
2d6a0 193             | ' Misc EXECF code
2d6a0 193             | 
2d6a0 193 33 72 63 FD | start_read_exec             execf   newburstr
2d6a4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2d6a8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2d6ac 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2d6b0 197             | 
2d6b0 197             | '..................................................................................................
2d6b0 197             | ' Variables
2d6b0 197             | 
2d6b0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2d6b4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2d6b8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2d6bc 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2d6c0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2d6c4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2d6c8 19d             | 
2d6c8 19d 00 00 00 80 | xfreq1          long    $80000000
2d6cc 19e 00 00 00 40 | xfreq2          long    $40000000
2d6d0 19f 03 00 00 00 | delay           long    3
2d6d4 1a0             | 
2d6d4 1a0             | lutcodeaddr                 
2d6d4 1a0             | startupparams
2d6d4 1a0             | excludedcogs                                    'careful: shared register use!
2d6d4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2d6d8 1a1 00 00 00 00 | flags           long    0
2d6dc 1a2             | mask                                            'careful: shared register use!
2d6dc 1a2 00 00 00 00 | resetmaskA      long    0
2d6e0 1a3             | limit                                           'careful: shared register use!
2d6e0 1a3 00 00 00 00 | resetmaskB      long    0
2d6e4 1a4 00 00 00 00 | datapins        long    0
2d6e8 1a5             | const512                                        'careful: shared register use!
2d6e8 1a5 00 00 00 00 | devicelist      long    0
2d6ec 1a6 00 00 00 00 | coglist         long    0
2d6f0 1a7 00 00 00 00 | mbox            long    0 
2d6f4 1a8             | 
2d6f4 1a8             | clkpin                                          'shared with code patched during init
2d6f4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2d6f8 1a9             | cspin                                           'shared with code patched during init
2d6f8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2d6fc 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2d700 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2d704 1ac 01 00 00 00 | clkdelay        long    1
2d708 1ad 00 00 00 00 | regdatabus      long    0
2d70c 1ae             | 
2d70c 1ae 10 00 00 00 | deviceaddr      long    $10
2d710 1af             | rrcounter
2d710 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2d714 1b0             | 
2d714 1b0             | ' jump addresses for the per COG handlers
2d714 1b0 20 00 00 00 | cog0_handler    long    cog0
2d718 1b1 2C 00 00 00 | cog1_handler    long    cog1
2d71c 1b2 38 00 00 00 | cog2_handler    long    cog2
2d720 1b3 44 00 00 00 | cog3_handler    long    cog3
2d724 1b4 50 00 00 00 | cog4_handler    long    cog4
2d728 1b5 5C 00 00 00 | cog5_handler    long    cog5
2d72c 1b6 68 00 00 00 | cog6_handler    long    cog6
2d730 1b7 74 00 00 00 | cog7_handler    long    cog7
2d734 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2d738 1b9             | 
2d738 1b9             | ' EXECF sequences
2d738 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2d73c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2d740 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2d744 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2d748 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2d74c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2d750 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2d754 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2d754 1c0             | 
2d754 1c0             | 
2d754 1c0             | ' SKIPF sequences
2d754 1c0             | skiptable
2d754 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2d758 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2d75c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2d760 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2d764 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2d768 1c5 00 00 00 00 | pattern2        long    0
2d76c 1c6 00 00 00 00 | pattern3        long    0
2d770 1c7 77 02 00 00 | singlelong      long    %1001110111  
2d774 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2d778 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2d77c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2d780 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2d784 1cc             | 
2d784 1cc             | ' LUT RAM address values
2d784 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2d788 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2d78c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2d790 1cf F6 02 00 00 | noread          long    noread_lut
2d794 1d0             | 
2d794 1d0 00 00 00 00 | id0             long    0
2d798 1d1 01 00 00 00 | id1             long    1
2d79c 1d2 02 00 00 00 | id2             long    2
2d7a0 1d3 03 00 00 00 | id3             long    3
2d7a4 1d4 04 00 00 00 | id4             long    4
2d7a8 1d5 05 00 00 00 | id5             long    5
2d7ac 1d6 06 00 00 00 | id6             long    6
2d7b0 1d7 07 00 00 00 | id7             long    7
2d7b4 1d8             | 
2d7b4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2d7b4 1d8             | 'and COG updates and need to follow immediately after id0-id7
2d7b4 1d8 00 00 00 00 | addr1           long    0
2d7b8 1d9 00 00 00 00 | hubdata         long    0
2d7bc 1da 00 00 00 00 | count           long    0
2d7c0 1db 00 00 00 00 | addr2           long    0
2d7c4 1dc 00 00 00 00 | total           long    0
2d7c8 1dd 00 00 00 00 | offset1         long    0
2d7cc 1de 00 00 00 00 | offset2         long    0
2d7d0 1df 00 00 00 00 | link            long    0
2d7d4 1e0             | 
2d7d4 1e0             | burstwrite                                      'note shared register use during init
2d7d4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2d7d8 1e1 00 00 00 00 | id              long    0
2d7dc 1e2             | 
2d7dc 1e2 00 00 00 00 | header          long    0
2d7e0 1e3 00 00 00 00 | trailer         long    0
2d7e4 1e4 00 00 00 00 | cmdaddr         long    0
2d7e8 1e5 00 00 00 00 | request         long    0
2d7ec 1e6 00 00 00 00 | rrlimit         long    0
2d7f0 1e7 00 00 00 00 | pinconfig       long    0
2d7f4 1e8 00 00 00 00 | clks            long    0
2d7f8 1e9 00 00 00 00 | resume          long    0
2d7fc 1ea 00 00 00 00 | orighubsize     long    0
2d800 1eb 00 00 00 00 | wrclks          long    0
2d804 1ec             | 
2d804 1ec 00 00 00 00 | pattern         long    0
2d808 1ed 00 00 00 00 | hubscratch      long    0
2d80c 1ee 00 10 00 00 | val4k           long    4096
2d810 1ef             | 
2d810 1ef             | ' temporary general purpose regs
2d810 1ef 00 00 00 00 | a               long    0
2d814 1f0 00 00 00 00 | b               long    0
2d818 1f1 00 00 00 00 | c               long    0
2d81c 1f2 00 00 00 00 | d               long    0
2d820 1f3             |                 fit     502
2d820 1f3             | 
2d820 1f3             |                 fit     502
2d820 1f3             | 
2d820 1f3             | '..................................................................................................
2d820 1f3             | 
2d820 1f3             |             orgh
2d820                 | 
2d820                 | lut_code
2d820                 | 'HW init code up to 80 longs
2d820                 | 
2d820                 | '..................................................................................................
2d820                 | ' Memory layout for LUT RAM once operational:
2d820                 | '
2d820                 | '  LUT RAM address      Usage
2d820                 | '  ---------------      ----
2d820                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2d820                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2d820                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2d820                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2d820                 | '
2d820                 | ' Also during driver COG startup:
2d820                 | ' $230-$24F is used for HW init setup
2d820                 | ' $250-$26F is used as temporary vector storage 
2d820                 | '..................................................................................................
2d820                 | 
2d820                 |                 org $230    
2d820 230             | 
2d820 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2d820 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2d824 231 24 16 60 FD |                             pollxfi
2d828 232 FF AA 2A FF 
2d82c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2d830 234 28 00 B0 FD |                             call    #sendqspi
2d834 235 07 F8 07 FF 
2d838 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2d83c 237 28 00 B0 FD |                             call    #sendspi
2d840 238 F8 07 78 FF 
2d844 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2d848 23a 1C 00 B0 FD |                             call    #sendspi
2d84c 23b 7F 78 78 FF 
2d850 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2d854 23d 10 00 B0 FD |                             call    #sendspi 
2d858 23e 2D 00 64 FD |                             ret
2d85c 23f             | 
2d85c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2d860 240 32 0C 64 FD |                             skipf   #%110
2d864 241 9C EF 03 F6 |                             mov     pb, xsendimm
2d868 242             | 
2d868 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2d86c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2d870 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2d874 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2d878 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2d87c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2d880 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2d884 249 50 48 63 FD |                             fltl    datapins                'float data bus
2d888 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2d88c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2d890 24c             | 
2d890 24c 00 00 00 00 
2d894 24d 00 00 00 00 
2d898 24e 00 00 00 00 
2d89c 24f 00 00 00 00 |                 long    0[$270-32-$]
2d8a0 250             |                 fit     $270-32  ' keep room for 32 vector longs
2d8a0 250             |     
2d8a0 250             |                 fit     $270-32  ' keep room for 32 vector longs
2d8a0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2d8a0 250             | rw_vect ' PSRAM jump vectors
2d8a0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d8a4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d8a8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2d8ac 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2d8b0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2d8b4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2d8b8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2d8bc 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2d8c0 258             | ro_vect ' R/O PSRAM jump vectors
2d8c0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d8c4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2d8c8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2d8cc 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2d8d0 25c 00 01 00 00 |                 long    unsupported
2d8d4 25d 00 01 00 00 |                 long    unsupported
2d8d8 25e 00 01 00 00 |                 long    unsupported
2d8dc 25f 00 01 00 00 |                 long    unsupported
2d8e0 260             | ctrl_vect ' Control jump vectors
2d8e0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2d8e4 261 00 01 00 00 |                 long    unsupported
2d8e8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2d8ec 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2d8f0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2d8f4 265 00 01 00 00 |                 long    unsupported
2d8f8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2d8fc 267 3E 01 00 00 |                 long    reconfig 
2d900 268             | no_vect ' Invalid bank jump vectors
2d900 268 01 01 00 00 |                 long    invalidbank
2d904 269 01 01 00 00 |                 long    invalidbank
2d908 26a 01 01 00 00 |                 long    invalidbank
2d90c 26b 01 01 00 00 |                 long    invalidbank
2d910 26c 01 01 00 00 |                 long    invalidbank
2d914 26d 01 01 00 00 |                 long    invalidbank
2d918 26e 01 01 00 00 |                 long    invalidbank
2d91c 26f 01 01 00 00 |                 long    invalidbank
2d920 270             |                 fit     $270
2d920 270             | 
2d920 270             |                 fit     $270
2d920 270             | '..................................................................................................
2d920 270             | ' PSRAM READS
2d920 270             |                                                             ' a b c d e f
2d920 270             |                                                             ' B W L B R L  (a) byte read
2d920 270             |                                                             ' Y O O U E O  (b) word read
2d920 270             |                                                             ' T R N R S C  (c) long read
2d920 270             |                                                             ' E D G S U K  (d) new burst read
2d920 270             |                                                             '       T M E  (e) resumed sub-burst
2d920 270             |                                                             '         E D  (f) locked sub-burst
2d920 270             | 
2d920 270             | 
2d920 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2d924 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2d928 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2d92c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2d930 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2d934 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2d938 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2d93c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2d940 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2d944 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2d948 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2d94c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2d950 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2d954 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2d958 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2d95c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2d960 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2d964 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2d968 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2d96c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2d970 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2d974 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2d978 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2d97c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2d980 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2d984 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2d988 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2d98c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2d990 28c             | 
2d990 28c             |                             ' fall through to read bursts
2d990 28c             |                         
2d990 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2d990 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2d994 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2d998 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2d99c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2d9a0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2d9a4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2d9a8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2d9ac 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2d9b0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2d9b4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2d9b8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2d9bc 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2d9c0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2d9c4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2d9c8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2d9cc 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2d9d0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2d9d4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2d9d8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2d9dc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2d9e0 2a0 E8 D1 03 F1 |                             add     clks, clks
2d9e4 2a1             | readcommon
2d9e4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2d9e8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2d9ec 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2d9f0 2a4             | 
2d9f0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2d9f4 2a5 69 C8 63 FD |                             rev     cmdaddr
2d9f8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2d9fc 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2da00 2a8             | 
2da00 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2da04 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2da08 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2da08 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2da0c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2da10 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2da14 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2da18 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2da18 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2da1c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2da20 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2da24 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2da28 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2da2c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2da30 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2da30 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2da34 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2da38 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2da3c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2da40 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2da44 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2da48 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2da4c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2da50 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2da54 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2da58 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2da5c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2da60 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2da64 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2da68 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2da68 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2da6c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2da70 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2da74 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2da78 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2da7c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2da80 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2da84 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2da88 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2da8c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2da90 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2da94 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2da98 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2da9c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2daa0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2daa4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2daa8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2daac 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2dab0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2dab4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2dab8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2dabc 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2dac0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2dac4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2dac8 2da 10 03 90 FD |                             jmp     #writecommon
2dacc 2db             | 
2dacc 2db             | '..................................................................................................
2dacc 2db             | ' Burst continuation testing
2dacc 2db             | 
2dacc 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2dad0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2dad4 2dd             | continue_read_lut          
2dad4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2dad8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2dadc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2dae0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2dae4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2dae8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2daec 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2daf0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2daf4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2daf8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2dafc 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2db00 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2db04 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2db08 2ea             | 
2db08 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2db0c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2db10 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2db14 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2db18 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2db1c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2db20 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2db24 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2db28 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2db2c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2db30 2f4 2A 1C 66 0D |             _ret_           push    #poller
2db34 2f5             | 
2db34 2f5             | 
2db34 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2db38 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2db38 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2db3c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2db40 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2db44 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2db48 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2db4c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2db50 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2db54 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2db58 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2db5c 2ff             | '..................................................................................................
2db5c 2ff             | ' Completion of requests
2db5c 2ff             | 
2db5c 2ff             | complete_rw_lut             
2db5c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2db60 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2db64 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2db68 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2db6c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2db70 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2db74 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2db78 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2db7c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2db80 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2db84 309 32 62 64 AD |             if_z            skipf   #%110001
2db88 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2db8c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2db90 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2db94 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2db98 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2db9c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2dba0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2dba4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2dba8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2dbac 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2dbb0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2dbb4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2dbb8 316             |                                                             ' skipcase (a) gfx copy to/from hub
2dbb8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2dbb8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2dbb8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2dbbc 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2dbc0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2dbc4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2dbc8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2dbcc 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2dbd0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2dbd4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2dbd8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2dbdc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2dbe0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2dbe4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2dbe8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2dbec 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2dbf0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2dbf4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2dbf8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2dbfc 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2dc00 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2dc04 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2dc08 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2dc0c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2dc10 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2dc14 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2dc18 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2dc1c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2dc20 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2dc24 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2dc28 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2dc2c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2dc30 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2dc34 335 DF B7 03 A6 |             if_z            mov     addr2, link
2dc38 336 34 FF 9F AD |             if_z            jmp     #checknext
2dc3c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2dc40 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2dc44 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2dc48 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2dc4c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2dc50 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2dc54 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2dc58 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2dc5c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2dc60 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2dc64 341             | 
2dc64 341             | '..................................................................................................
2dc64 341             | ' PSRAM WRITES
2dc64 341             |                                                             '  a b c d e f g h
2dc64 341             | 
2dc64 341             |                                                             '  B W L F B R L L (a) byte write(s)
2dc64 341             |                                                             '  Y O O I U E O O (b) word write(s)
2dc64 341             |                                                             '  T R N L R S C C (c) long write(s)
2dc64 341             |                                                             '  E D G L S U K K (d) resumed fill
2dc64 341             |                                                             '          T M E E (e) new burst write
2dc64 341             |                                                             '            E D D (f) resumed burst
2dc64 341             |                                                             '              F B (g) locked fill
2dc64 341             |                                                             '              I U (h) locked burst write
2dc64 341             |                                                             '              L R 
2dc64 341             |                                                             '              L S 
2dc64 341             |                                                             '                T 
2dc64 341             | 
2dc64 341             | w_single                   
2dc64 341             | w_fill_cont           
2dc64 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2dc68 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2dc6c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2dc70 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2dc74 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2dc78 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2dc7c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2dc80 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2dc84 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2dc88 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2dc8c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2dc90 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2dc94 34d             |                ' disable call to r_resume_burst for single longs when z=0
2dc94 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2dc98 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2dc9c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2dca0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2dca4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2dca8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2dcac 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2dcb0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2dcb4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2dcb8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2dcbc 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2dcc0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2dcc4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2dcc8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2dccc 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2dcd0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2dcd4 35d             |         
2dcd4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2dcd4 35d             |             '
2dcd4 35d             |             '  At least one of these 3 optional components will be sent
2dcd4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2dcd4 35d             |             '     body - N x full longs of data
2dcd4 35d             |             '     trailer - last partial long of data
2dcd4 35d             |             '
2dcd4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2dcd4 35d             |             '
2dcd4 35d             |             'Case    Type                           Sends
2dcd4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2dcd4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2dcd4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2dcd4 35d             |             ' 4)     Multiple long fill             body only
2dcd4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2dcd4 35d             | 
2dcd4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2dcd4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2dcd8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2dcdc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2dce0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2dce4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2dce8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2dcec 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2dcf0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2dcf4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2dcf8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2dcfc 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2dd00 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2dd04 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2dd08 36a             |                             
2dd08 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2dd0c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2dd10 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2dd14 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2dd18 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2dd1c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2dd20 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2dd24 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2dd28 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2dd2c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2dd30 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2dd34 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2dd38 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2dd3c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2dd40 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2dd44 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2dd48 37a             | 
2dd48 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2dd4c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2dd50 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2dd54 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2dd58 37e             |                  
2dd58 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2dd5c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2dd60 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2dd64 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2dd68 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2dd6c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2dd70 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2dd74 385             | 
2dd74 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2dd78 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2dd7c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2dd80 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2dd84 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2dd88 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2dd8c 38b             | 
2dd8c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2dd8c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2dd90 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2dd94 38d 2A B0 63 FD |                             push    addr1                   'save address
2dd98 38e             | 
2dd98 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2dd98 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2dd9c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2dda0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2dda4 391             |             
2dda4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2dda8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2ddac 393 2B B0 63 FD |                             pop     addr1                   'restore address
2ddb0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2ddb4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2ddb8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2ddbc 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2ddc0 398             | 
2ddc0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2ddc4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2ddc8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2ddcc 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2ddd0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2ddd4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2ddd8 39e             | 
2ddd8 39e             |                             'trailer is done
2ddd8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2dddc 39f             | 
2dddc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2dde0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2dde4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2dde8 3a2             | 
2dde8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2ddec 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2ddf0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2ddf4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2ddf8 3a6             |                             
2ddf8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2ddfc 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2de00 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2de04 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2de08 3aa             |                                                          
2de08 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2de0c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2de10 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2de14 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2de18 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2de1c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2de20 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2de24 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2de28 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2de2c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2de30 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2de34 3b5             |  
2de34 3b5 59 52 63 FD |                             drvh    cspin
2de38 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2de3c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2de40 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2de44 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2de48 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2de4c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2de50 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2de54 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2de58 3be EA E5 03 F6 |                             mov     d, orighubsize
2de5c 3bf EF E5 63 F0 |                             shl     d, a
2de60 3c0 F2 E3 83 F1 |                             sub     c, d
2de64 3c1 DD E3 03 F1 |                             add     c, offset1
2de68 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2de6c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2de70 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2de74 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2de78 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2de7c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2de80 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2de84 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2de88 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2de8c 3cb BB D3 03 F6 |                             mov     resume, restorefill
2de90 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2de94 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2de98 3ce 6C FC BF CD |             if_c            call    #yield
2de9c 3cf 2D 00 64 FD |                             ret
2dea0 3d0             |                            
2dea0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2dea0 3d0             |                       '     rczl    pa                      'rotate left into address offset
2dea0 3d0             |                       '     rczl    c wcz                   'restore count and flags
2dea0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2dea4 3d1 02 EC 67 F0 |                             shl     pa, #2
2dea8 3d2 28 06 64 AD |             if_z            setq    #3
2deac 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2deb0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2deb4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2deb8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2debc 3d7             | 
2debc 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2dec0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2dec4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2dec8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2decc 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2ded0 3dc             |                 fit 1024-32
2ded0 3dc             |         
2ded0 3dc             | 
2ded0 3dc             | '..................................................................................................
2ded0 3dc             | 
2ded0 3dc             |                 fit 1024-32
2ded0 3dc 00 00 00 00 
2ded4 3dd 00 00 00 00 
2ded8 3de 00 00 00 00 
2dedc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2dee0 3e0             |                 org 1024-32
2dee0 000             | 
2dee0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2dee0 000 00 00 00 00 |                 long $0000
2dee4 001 11 11 00 00 |                 long $1111
2dee8 002 22 22 00 00 |                 long $2222
2deec 003 33 33 00 00 |                 long $3333
2def0 004 44 44 00 00 |                 long $4444
2def4 005 55 55 00 00 |                 long $5555
2def8 006 66 66 00 00 |                 long $6666
2defc 007 77 77 00 00 |                 long $7777
2df00 008 88 88 00 00 |                 long $8888
2df04 009 99 99 00 00 |                 long $9999
2df08 00a AA AA 00 00 |                 long $aaaa
2df0c 00b BB BB 00 00 |                 long $bbbb
2df10 00c CC CC 00 00 |                 long $cccc
2df14 00d DD DD 00 00 |                 long $dddd
2df18 00e EE EE 00 00 |                 long $eeee
2df1c 00f FF FF 00 00 |                 long $ffff
2df20 010             | 
2df20 010             | 'masks
2df20 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2df24 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2df28 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2df2c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2df30 014             | 
2df30 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2df34 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2df38 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2df3c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2df40 018             | 
2df40 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2df44 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2df48 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2df4c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2df50 01c             | 
2df50 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2df54 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2df58 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2df5c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2df60 020             |         fit 1024
2df60 020             | 
2df60 020             |         fit 1024
2df60 020             | 
2df60 020             | '--------------------------------------------------------------------------------------------------
2df60 020             |         orgh
2df60                 | 
2df60                 | gfxexpansion
2df60                 |                             'simple line drawing graphics expansion of memory driver
2df60                 |                             'jmp     #donerepeats                'just return for now
2df60                 | 
2df60     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2df64     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2df68     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2df6c     DD E1 03 F6 |                             mov     b, offset1              'get error term
2df70     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2df74     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2df78     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2df7c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2df80     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2df84     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2df88     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2df8c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2df90     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2df94     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2df98     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2df9c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2dfa0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2dfa4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2dfa8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2dfac     DC E5 33 F9 |                             getword d, total, #0            'get line width
2dfb0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2dfb4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2dfb8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2dfbc     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2dfc0     C3 03 80 FD |                             jmp     #readmask               'continue filling
2dfc4                 | 	alignl
2dfc4                 | _usbnew_spin2_dat_
2dfc4                 |                 org     $000
2dfc4 000             | 
2dfc4 000             | usb_host_start
2dfc4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2dfc8 001             | 
2dfc8 001 03 00 00 FF 
2dfcc 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2dfd0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2dfd4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2dfd8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2dfdc 006 29 70 63 FD |                 setq2   htmp
2dfe0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2dfe4 008             | 
2dfe4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2dfe8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2dfec 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2dff0 00b             | 
2dff0 00b             | '------------------------------------------------------------------------------
2dff0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2dff0 00b             | ' special because the receiving function must not respond with either STALL or
2dff0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2dff0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2dff0 00b             | ' corrupt packet, it must ignore the transaction
2dff0 00b             | '------------------------------------------------------------------------------
2dff0 00b             | ' On entry:
2dff0 00b             | '   PTRA - start address of the SETUP data struct.
2dff0 00b             | ' On exit:
2dff0 00b             | '   retval - PID_ACK on success, otherwise error code.
2dff0 00b             | '------------------------------------------------------------------------------
2dff0 00b             | txn_setup
2dff0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2dff4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2dff8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2dffc 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2e000 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2e004 010             | .setup
2e004 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2e008 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e00c 012 2D 00 64 AD |         if_z    ret
2e010 013 7C 0B B0 FD |                 call    #retry_wait
2e014 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e018 015 2D 00 64 AD |         if_z    ret
2e01c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2e020 017 E0 FF 9F FD |                 jmp     #.setup
2e024 018             | 
2e024 018             | '------------------------------------------------------------------------------
2e024 018             | ' IN/INTERRUPT transaction.
2e024 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2e024 018             | '------------------------------------------------------------------------------
2e024 018             | ' On entry:
2e024 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2e024 018             | '     CRC(b19..23).
2e024 018             | ' On exit:
2e024 018             | '------------------------------------------------------------------------------
2e024 018             | txn_in
2e024 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e028 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2e02c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2e030 01b             | 
2e030 01b             |                 ' Fall through to urx_packet
2e030 01b             | 
2e030 01b             | '------------------------------------------------------------------------------
2e030 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2e030 01b             | ' received are handshakes and IN DATAx.
2e030 01b             | '------------------------------------------------------------------------------
2e030 01b             | ' On entry:
2e030 01b             | ' On exit:
2e030 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2e030 01b             | '     returned.
2e030 01b             | '------------------------------------------------------------------------------
2e030 01b             | urx_packet
2e030 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2e034 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e038 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2e03c 01e 1A 92 63 FD |                 getct   hct2
2e040 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2e044 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2e048 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2e04c 022             | .wait_sop
2e04c 022 22 A7 8A FA |                 rdpin   urx, dm
2e050 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e054 024 08 00 90 CD |         if_c    jmp     #.get_pid
2e058 025 FC 25 CC FB |                 jnct2   #.wait_sop
2e05c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2e060 027             | .get_pid
2e060 027 28 02 B0 FD |                 call    #urx_next
2e064 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2e068 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2e06c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2e070 02b             | .chk_pid
2e070 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e074 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2e078 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2e07c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2e080 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2e084 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2e088 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2e08c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2e090 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2e094 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2e098 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2e09c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2e0a0 037             | .ack_resend
2e0a0 037 22 A7 82 FA |                 rqpin   urx, dm
2e0a4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e0a8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2e0ac 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e0b0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2e0b4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2e0b8 03d             | .chk_eop
2e0b8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e0bc 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2e0c0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2e0c4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2e0c8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2e0cc 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e0d0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2e0d4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2e0d8 045 2D 00 64 FD |                 ret
2e0dc 046             | .idle
2e0dc 046 22 A7 82 FA |                 rqpin   urx, dm
2e0e0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e0e4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2e0e8 049 2D 00 64 FD |                 ret
2e0ec 04a             | 
2e0ec 04a             | '------------------------------------------------------------------------------
2e0ec 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2e0ec 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2e0ec 04a             | ' if one is required.
2e0ec 04a             | '------------------------------------------------------------------------------
2e0ec 04a             | ' On entry:
2e0ec 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2e0ec 04a             | ' On exit:
2e0ec 04a             | '------------------------------------------------------------------------------
2e0ec 04a             | utx_token
2e0ec 04a 22 A7 82 FA |                 rqpin   urx, dm
2e0f0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e0f4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2e0f8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e0fc 04e 34 0D B0 CD |         if_c    call    #utx_pre
2e100 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e104 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2e108 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2e10c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2e110 053             | .next_byte
2e110 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2e114 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2e118 055             | .wait
2e118 055 40 46 72 FD |                 testp   dp                      wc
2e11c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e120 057 23 03 08 FC |                 akpin   dp
2e124 058 22 A5 22 FC |                 wypin   utx, dm
2e128 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2e12c 05a             | 
2e12c 05a             | '------------------------------------------------------------------------------
2e12c 05a             | ' SETUP/OUT/INTERRUPT transaction.
2e12c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2e12c 05a             | '------------------------------------------------------------------------------
2e12c 05a             | ' On entry:
2e12c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2e12c 05a             | '     CRC(b19..23).
2e12c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2e12c 05a             | '   pkt_data - count of DATAx payload bytes to send.
2e12c 05a             | ' On exit:
2e12c 05a             | '------------------------------------------------------------------------------
2e12c 05a             | txn_out
2e12c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2e130 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2e134 05c 00 00 C0 FF 
2e138 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2e13c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2e140 05f             | 
2e140 05f             |                 ' Fall through to utx_data
2e140 05f             | 
2e140 05f             | '------------------------------------------------------------------------------
2e140 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2e140 05f             | ' calculated while the data byte is being shifted out. Since data stage
2e140 05f             | ' success/fail is not determined until the status stage of the transaction,
2e140 05f             | ' this routine is only concerned about the current DATAx packet.
2e140 05f             | '------------------------------------------------------------------------------
2e140 05f             | ' On entry:
2e140 05f             | '   PTRA - hub start address of the data to read.
2e140 05f             | '   pkt_cnt - data payload size.
2e140 05f             | ' On exit:
2e140 05f             | '------------------------------------------------------------------------------
2e140 05f             | utx_data
2e140 05f 22 A7 82 FA |                 rqpin   urx, dm
2e144 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e148 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2e14c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e150 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2e154 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e158 065 D8 0C B0 CD |         if_c    call    #utx_pre
2e15c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e160 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2e164 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e168 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2e16c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2e170 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2e174 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2e178 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2e17c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2e180 06f             | .read_byte
2e180 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2e184 070 F0 00 B0 FD |                 call    #utx_byte
2e188 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2e18c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2e190 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e194 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e198 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2e19c 076             | .send_crc
2e19c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2e1a0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2e1a4 078 D0 00 B0 FD |                 call    #utx_byte
2e1a8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2e1ac 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2e1b0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2e1b4 07c             | 
2e1b4 07c             | '------------------------------------------------------------------------------
2e1b4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2e1b4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2e1b4 07c             | ' expects that the packet includes at least the CRC word.
2e1b4 07c             | '
2e1b4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2e1b4 07c             | ' was requested, which makes it difficult to determine where the data stops
2e1b4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2e1b4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2e1b4 07c             | ' USB-16 expected residual value of 0xB001.
2e1b4 07c             | '
2e1b4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2e1b4 07c             | ' so the caller can verify IN success before writing the data to its final
2e1b4 07c             | ' destination.
2e1b4 07c             | '------------------------------------------------------------------------------
2e1b4 07c             | ' On entry:
2e1b4 07c             | '   pkt_data - max byte count expected to be in the packet.
2e1b4 07c             | '   newb_flg - signals new byte ready when toggled.
2e1b4 07c             | ' On exit:
2e1b4 07c             | '   pkt_cnt - actual number of bytes read.
2e1b4 07c             | '------------------------------------------------------------------------------
2e1b4 07c             | urx_data
2e1b4 07c F7 75 03 F6 |                 mov     htmp2, pb
2e1b8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2e1bc 07e 00 00 C0 FF 
2e1c0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2e1c4 080 BA EF 03 F6 |                 mov     pb, htmp2
2e1c8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2e1cc 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2e1d0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2e1d4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2e1d8 085             | .wait_byte
2e1d8 085             | ' In-line rx for max speed
2e1d8 085 22 A7 82 FA |                 rqpin   urx, dm
2e1dc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e1e0 087 53 A5 02 F5 |                 and     utx, urx
2e1e4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e1e8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e1ec 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2e1f0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2e1f4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2e1f8 08d DC FF 9F FD |                 jmp     #.wait_byte
2e1fc 08e             | .get_byte
2e1fc 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2e200 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2e204 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2e208 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2e20c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2e210 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2e214 094             | .end_crc
2e214 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2e218 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2e21c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2e220 097 2D 00 64 1D |         if_a    ret
2e224 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2e224 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2e224 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2e224 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2e224 098 22 A7 82 FA |                 rqpin   urx, dm
2e228 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2e22c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2e230 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2e230 09b             | .chk_crc
2e230 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2e234 09c 58 00 00 FF 
2e238 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2e23c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2e240 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2e244 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2e248 0a1 34 09 B0 FD |                 call    #poll_waitx
2e24c 0a2             | 
2e24c 0a2             |                 ' Fall through to utx_handshake
2e24c 0a2             | 
2e24c 0a2             | '------------------------------------------------------------------------------
2e24c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2e24c 0a2             | ' the appropriate IP delay has been inserted.
2e24c 0a2             | '------------------------------------------------------------------------------
2e24c 0a2             | ' On entry:
2e24c 0a2             | '   retval - handshake PID to send.
2e24c 0a2             | ' On exit:
2e24c 0a2             | '   retval unchanged.
2e24c 0a2             | '------------------------------------------------------------------------------
2e24c 0a2             | utx_handshake
2e24c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2e250 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2e254 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2e258 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2e25c 0a6 5F A5 02 F6 |                 mov     utx, retval
2e260 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2e264 0a8             | .idle
2e264 0a8 22 A7 82 FA |                 rqpin   urx, dm
2e268 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2e26c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2e270 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2e274 0ac 08 09 90 FD |                 jmp     #poll_waitx
2e278 0ad             | 
2e278 0ad             | '------------------------------------------------------------------------------
2e278 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2e278 0ad             | '------------------------------------------------------------------------------
2e278 0ad             | ' On entry:
2e278 0ad             | '   utx - byte to transmit.
2e278 0ad             | ' On exit:
2e278 0ad             | '------------------------------------------------------------------------------
2e278 0ad             | utx_byte
2e278 0ad 40 46 72 FD |                 testp   dp                      wc
2e27c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2e280 0af 23 03 08 FC |                 akpin   dp
2e284 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2e288 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2e28c 0b2             | 
2e28c 0b2             | '------------------------------------------------------------------------------
2e28c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2e28c 0b2             | '------------------------------------------------------------------------------
2e28c 0b2             | ' On entry:
2e28c 0b2             | ' On exit:
2e28c 0b2             | '   retval - the byte read.
2e28c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2e28c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2e28c 0b2             | '     received.
2e28c 0b2             | '------------------------------------------------------------------------------
2e28c 0b2             | urx_next
2e28c 0b2 22 A7 8A FA |                 rdpin   urx, dm
2e290 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2e294 0b4 53 A5 02 F5 |                 and     utx, urx
2e298 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2e29c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2e2a0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2e2a4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2e2a8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2e2ac 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2e2b0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2e2b4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2e2b8 0bd 2D 00 64 FD |                 ret
2e2bc 0be             | 
2e2bc 0be             | '------------------------------------------------------------------------------
2e2bc 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2e2bc 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2e2bc 0be             | ' length, and the PID is not included in the CRC calculation:
2e2bc 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2e2bc 0be             | '  CRC5  ENDP ADDRESS PID
2e2bc 0be             | ' %00000_1111_1111111_xxxxxxxx
2e2bc 0be             | '------------------------------------------------------------------------------
2e2bc 0be             | ' On entry:
2e2bc 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2e2bc 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2e2bc 0be             | ' On exit:
2e2bc 0be             | '   ep_addr_pid - CRC value appended to the packet.
2e2bc 0be             | '------------------------------------------------------------------------------
2e2bc 0be             | calc_crc5
2e2bc 0be FF 03 00 FF 
2e2c0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2e2c4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2e2c8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2e2cc 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2e2d0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2e2d4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2e2d8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2e2dc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2e2e0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2e2e4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2e2e8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2e2ec 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e2f0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2e2f4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2e2f8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2e2fc 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2e300 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2e304 0d0             | 
2e304 0d0             | '------------------------------------------------------------------------------
2e304 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2e304 0d0             | '------------------------------------------------------------------------------
2e304 0d0             | isr1_fsframe
2e304 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2e308 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e30c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e310 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e314 0d4             | .wait
2e314 0d4 40 46 72 FD |                 testp   dp                      wc
2e318 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e31c 0d6 23 03 08 FC |                 akpin   dp
2e320 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2e324 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2e328 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2e32c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2e330 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2e334 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2e338 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2e33c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2e340 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2e344 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2e348 0e1 2C FF BF FD |                 call    #utx_byte
2e34c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2e350 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2e354 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2e358 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2e35c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2e360 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2e364 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2e368 0e9 5B A5 42 F5 |                 or      utx, icrc
2e36c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2e370 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2e374 0ec 20 00 90 FD |                 jmp     #isr1_wait
2e378 0ed             | isr1_lsframe
2e378 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2e37c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e380 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e384 0f0             | .wait
2e384 0f0 40 46 72 FD |                 testp   dp                      wc
2e388 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2e38c 0f2 23 03 08 FC |                 akpin   dp
2e390 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2e394 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2e398 0f5             | isr1_wait
2e398 0f5 22 A5 82 FA |                 rqpin   utx, dm
2e39c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2e3a0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2e3a4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2e3a8 0f9 03 00 00 FF 
2e3ac 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2e3b0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2e3b4 0fc F5 FF 3B FB |                 reti1
2e3b8 0fd             | 
2e3b8 0fd             | '------------------------------------------------------------------------------
2e3b8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2e3b8 0fd             | ' transaction will complete before the next frame is triggered.
2e3b8 0fd             | '------------------------------------------------------------------------------
2e3b8 0fd             | ' On entry:
2e3b8 0fd             | ' On exit:
2e3b8 0fd             | '------------------------------------------------------------------------------
2e3b8 0fd             | wait_txn_ok
2e3b8 0fd 1A 74 63 FD |                 getct   htmp2
2e3bc 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2e3c0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e3c4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2e3c8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2e3cc 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2e3d0 103 2D 00 64 FD |                 ret
2e3d4 104             | 
2e3d4 104             | '------------------------------------------------------------------------------
2e3d4 104             | ' A device connection was detected, or a bus reset was requested by the USB
2e3d4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2e3d4 104             | ' and perform a reset sequence prior to device enumeration.
2e3d4 104             | '------------------------------------------------------------------------------
2e3d4 104             | dev_reset
2e3d4 104 22 A7 82 FA |                 rqpin   urx, dm
2e3d8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2e3dc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2e3e0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2e3e4 108             | reset
2e3e4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2e3e8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2e3ec 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2e3f0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e3f4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2e3f8 10d 1A 92 62 FD |                 getct   iframe_ct_base
2e3fc 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2e400 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2e404 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2e408 111 24 70 07 F1 |                 add     htmp, #36
2e40c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2e410 113             | .framewait
2e410 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2e414 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2e418 115 2D 00 64 FD |                 ret
2e41c 116             | 
2e41c 116             | '------------------------------------------------------------------------------
2e41c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2e41c 116             | '------------------------------------------------------------------------------
2e41c 116             | ' On entry:
2e41c 116             | '   PTRA - source address.
2e41c 116             | '   PB - destination address.
2e41c 116             | '   hr0 - length of copy, in bytes.
2e41c 116             | ' On exit:
2e41c 116             | '------------------------------------------------------------------------------
2e41c 116             | hmemcpy
2e41c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2e420 117 F7 71 43 FC |                 wrbyte  htmp, pb
2e424 118 01 EE 07 F1 |                 add     pb, #1
2e428 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2e42c 11a             | 
2e42c 11a             | '------------------------------------------------------------------------------
2e42c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2e42c 11a             | ' loop until the errant device is disconnected.
2e42c 11a             | '------------------------------------------------------------------------------
2e42c 11a             | ' On entry:
2e42c 11a             | ' On exit:
2e42c 11a             | '------------------------------------------------------------------------------
2e42c 11a             | host_error
2e42c 11a             |           if ERROR_LED >= 0
2e42c 11a             |           end
2e42c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2e430 11b             | 
2e430 11b             | '------------------------------------------------------------------------------
2e430 11b             | ' Get HID descriptor buffer for current port
2e430 11b             | '------------------------------------------------------------------------------
2e430 11b             | ' On entry:
2e430 11b             | ' On exit:
2e430 11b             | '   PB - HID descriptor buffer pointer
2e430 11b             | '------------------------------------------------------------------------------
2e430 11b             | get_hid_descr_buffer
2e430 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2e434 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2e438 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2e43c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2e440 11f             | 
2e440 11f             | 
2e440 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2e444 120             | 
2e444 120             | ' USB commands and error codes
2e444 120 00 00 00 00 | cmd_data        long    0
2e448 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2e44c 122             | 
2e44c 122             | ' Parameters block assigned at cog startup
2e44c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2e450 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2e454 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2e458 125             | if ACTIVITY_LED >= 0
2e458 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2e458 125             | end
2e458 125             | if ERROR_LED >= 0
2e458 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2e458 125             | end
2e458 125 00 00 00 00 | hid_descr_p     long    0
2e45c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2e45c 126             | 'hkbd_report_p   long    0
2e45c 126 00 00 00 00 | hub_descr_p     long    0
2e460 127 00 00 00 00 | urx_buff_p      long    0
2e464 128 00 00 00 00 | dev_desc_buff_p long    0
2e468 129 00 00 00 00 | con_desc_buff_p long    0
2e46c 12a 00 00 00 00 | cache_start_p   long    0
2e470 12b 00 00 00 00 | cache_end_p     long    0
2e474 12c             | if EMUPAD_MAX_PLAYER > 0
2e474 12c             | emupad_out_ptr  long    0
2e474 12c             | end
2e474 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2e478 12d             | 
2e478 12d             | hdev_init_start
2e478 12d             | hdev_port       res     1
2e478 12d             | hdev_port       res     1
2e478 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e478 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2e478 12d             | kbm_next_datax  res     1
2e478 12d             | kbm_next_datax  res     1
2e478 12d             | hub_intf_num    res     1
2e478 12d             | hub_intf_num    res     1
2e478 12d             | hub_next_datax  res     1
2e478 12d             | hub_next_datax  res     1
2e478 12d             | hub_status_chg  res     1
2e478 12d             | hub_status_chg  res     1
2e478 12d             | hub_port_status res     1
2e478 12d             | hub_port_status res     1
2e478 12d             | if HAVE_MOUSE
2e478 12d             | ms_intf_num     res     1
2e478 12d             | ms_intf_num     res     1
2e478 12d             | ms_in_max_pkt   res     1
2e478 12d             | ms_in_max_pkt   res     1
2e478 12d             | end
2e478 12d             | kb_intf_num     res     1
2e478 12d             | kb_intf_num     res     1
2e478 12d             | kb_interval     res     1
2e478 12d             | kb_interval     res     1
2e478 12d             | kb_in_max_pkt   res     1
2e478 12d             | kb_in_max_pkt   res     1
2e478 12d             | kb_max_index    res     1
2e478 12d             | kb_max_index    res     1
2e478 12d             | kb_led_states   res     1
2e478 12d             | kb_led_states   res     1
2e478 12d             | gp_intf_num     res     1
2e478 12d             | gp_intf_num     res     1
2e478 12d             | gp_interval     res     1
2e478 12d             | gp_interval     res     1
2e478 12d             | gp_max_index    res     1
2e478 12d             | gp_max_index    res     1
2e478 12d             | gp_descr_len    res     1+MAX_DEVICES
2e478 12d             | gp_descr_len    res     1+MAX_DEVICES
2e478 12d             | hdev_init_end
2e478 12d             | 
2e478 12d             | ' Initialized at cog startup:
2e478 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e478 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2e478 12d             | iframe_ct_new   res     1
2e478 12d             | iframe_ct_new   res     1
2e478 12d             | iframe_ct_base  res     1
2e478 12d             | iframe_ct_base  res     1
2e478 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e478 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2e478 12d             | 
2e478 12d             | ' This register block is reset to zero when a USB device connects
2e478 12d             | hreg_init_start
2e478 12d             | hstatus         res     1         ' Host status flags
2e478 12d             | hstatus         res     1         ' Host status flags
2e478 12d             | hctwait         res     1         ' Poll-based wait clocks
2e478 12d             | hctwait         res     1         ' Poll-based wait clocks
2e478 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e478 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2e478 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e478 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2e478 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e478 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2e478 12d             | xfer_retry      res     1         ' Control transfer retry count
2e478 12d             | xfer_retry      res     1         ' Control transfer retry count
2e478 12d             | retry           res     1         ' Transaction retry count
2e478 12d             | retry           res     1         ' Transaction retry count
2e478 12d             | utx             res     1         ' Byte to transmit on USB
2e478 12d             | utx             res     1         ' Byte to transmit on USB
2e478 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e478 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2e478 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e478 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2e478 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e478 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2e478 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e478 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2e478 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e478 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2e478 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e478 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2e478 12d             | frame           res     1         ' USB 1ms frame counter value
2e478 12d             | frame           res     1         ' USB 1ms frame counter value
2e478 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e478 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2e478 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e478 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2e478 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e478 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2e478 12d             | crc             res     1         ' Used for CRC16 calculation
2e478 12d             | crc             res     1         ' Used for CRC16 calculation
2e478 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e478 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2e478 12d             | retval          res     1         ' Global success/fail return parameter
2e478 12d             | retval          res     1         ' Global success/fail return parameter
2e478 12d             | context_retval  res     1         ' Operation contextual return parameter
2e478 12d             | context_retval  res     1         ' Operation contextual return parameter
2e478 12d             | ' Device stuff
2e478 12d             | hdev_id         res     1+MAX_DEVICES
2e478 12d             | hdev_id         res     1+MAX_DEVICES
2e478 12d             | hdev_bcd        res     1
2e478 12d             | hdev_bcd        res     1
2e478 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e478 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2e478 12d             | ' Keyboard/mouse stuff
2e478 12d             | hctrl_ep_addr   res     1
2e478 12d             | hctrl_ep_addr   res     1
2e478 12d             | hctrl_max_pkt   res     1
2e478 12d             | hctrl_max_pkt   res     1
2e478 12d             | hconfig_base    res     1
2e478 12d             | hconfig_base    res     1
2e478 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e478 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2e478 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e478 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2e478 12d             | hdev_class      res     1
2e478 12d             | hdev_class      res     1
2e478 12d             | hdev_subclass   res     1
2e478 12d             | hdev_subclass   res     1
2e478 12d             | hdev_protocol   res     1
2e478 12d             | hdev_protocol   res     1
2e478 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e478 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2e478 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e478 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2e478 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e478 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2e478 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e478 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2e478 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e478 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2e478 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e478 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2e478 12d             | if HAVE_MOUSE
2e478 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e478 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2e478 12d             | end
2e478 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e478 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2e478 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e478 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2e478 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e478 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2e478 12d             | hdev_out_addr   res     1
2e478 12d             | hdev_out_addr   res     1
2e478 12d             | 
2e478 12d             | if EMUPAD_MAX_PLAYER > 0
2e478 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2e478 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2e478 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2e478 12d             | end
2e478 12d             | 
2e478 12d             | hreg_init_end
2e478 12d             | 
2e478 12d             | hidr_start
2e478 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e478 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2e478 12d             | hidr_flags      res     1
2e478 12d             | hidr_flags      res     1
2e478 12d             | hidr_axis       res     3
2e478 12d             | hidr_axis       res     3
2e478 12d             | hidr_buttons    res     1
2e478 12d             | hidr_buttons    res     1
2e478 12d             | hidr_hats       res     1
2e478 12d             | hidr_hats       res     1
2e478 12d             | '' Above are actually useful values, 6 longs
2e478 12d             | hidr_id         res     1
2e478 12d             | hidr_id         res     1
2e478 12d             | hidr_state      res     1
2e478 12d             | hidr_state      res     1
2e478 12d             | hidr_size       res     1
2e478 12d             | hidr_size       res     1
2e478 12d             | hidr_count      res     1
2e478 12d             | hidr_count      res     1
2e478 12d             | hidr_offset     res     1
2e478 12d             | hidr_offset     res     1
2e478 12d             | hidr_usage_idx  res     1
2e478 12d             | hidr_usage_idx  res     1
2e478 12d             | hidr_lminmax    res     1
2e478 12d             | hidr_lminmax    res     1
2e478 12d             | hidr_pminmax    res     1
2e478 12d             | hidr_pminmax    res     1
2e478 12d             | hidr_type       res     1
2e478 12d             | hidr_type       res     1
2e478 12d             | hidr_end
2e478 12d             | 
2e478 12d             | ' Variables dependent on the system freqency
2e478 12d             | _var_64_lower_  res     1
2e478 12d             | _var_64_lower_  res     1
2e478 12d             | _var_64_upper_  res     1
2e478 12d             | _var_64_upper_  res     1
2e478 12d             | _12Mbps_        res     1
2e478 12d             | _12Mbps_        res     1
2e478 12d             | _1_5Mbps_       res     1
2e478 12d             | _1_5Mbps_       res     1
2e478 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e478 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2e478 12d             | _1us_           res     1         ' 1us
2e478 12d             | _1us_           res     1         ' 1us
2e478 12d             | _10us_          res     1         ' 10us
2e478 12d             | _10us_          res     1         ' 10us
2e478 12d             | _33us_          res     1         ' 33us
2e478 12d             | _33us_          res     1         ' 33us
2e478 12d             | _txn_err_       res     1         ' 250us
2e478 12d             | _txn_err_       res     1         ' 250us
2e478 12d             | _500us_         res     1         ' 500us
2e478 12d             | _500us_         res     1         ' 500us
2e478 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e478 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2e478 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e478 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2e478 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e478 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2e478 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e478 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2e478 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e478 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2e478 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e478 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2e478 12d             | _preamble_wait_ res     1
2e478 12d             | _preamble_wait_ res     1
2e478 12d             | _1ms_           res     1         ' 1ms
2e478 12d             | _1ms_           res     1         ' 1ms
2e478 12d             | _2ms_           res     1         ' 2ms
2e478 12d             | _2ms_           res     1         ' 2ms
2e478 12d             | _suspend_wait_  res     1         ' 3ms
2e478 12d             | _suspend_wait_  res     1         ' 3ms
2e478 12d             | _4ms_           res     1         ' 4ms
2e478 12d             | _4ms_           res     1         ' 4ms
2e478 12d             | _xfer_wait_     res     1         ' 5ms
2e478 12d             | _xfer_wait_     res     1         ' 5ms
2e478 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e478 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2e478 12d             | _reset_hold_    res     1         ' 15ms
2e478 12d             | _reset_hold_    res     1         ' 15ms
2e478 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e478 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2e478 12d             | _21ms_          res     1         ' 21ms
2e478 12d             | _21ms_          res     1         ' 21ms
2e478 12d             | _100ms_         res     1         ' 100ms
2e478 12d             | _100ms_         res     1         ' 100ms
2e478 12d             | _500ms_         res     1         ' 500ms
2e478 12d             | _500ms_         res     1         ' 500ms
2e478 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e478 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2e478 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e478 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2e478 12d             | '------------------------------------------------------------------------------
2e478 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e478 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2e478 12d             | _usb_d_ls_nco_  res     1
2e478 12d             | _usb_d_ls_nco_  res     1
2e478 12d             | _usb_h_fs_nco_  res     1
2e478 12d             | _usb_h_fs_nco_  res     1
2e478 12d             | _usb_d_fs_nco_  res     1
2e478 12d             | _usb_d_fs_nco_  res     1
2e478 12d             | '------------------------------------------------------------------------------
2e478 12d             | ' Scratch registers
2e478 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e478 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2e478 12d             | htmp1           res     1
2e478 12d             | htmp1           res     1
2e478 12d             | htmp2           res     1
2e478 12d             | htmp2           res     1
2e478 12d             | htmp3           res     1
2e478 12d             | htmp3           res     1
2e478 12d             | hrep            res     1         ' Repeat count
2e478 12d             | hrep            res     1         ' Repeat count
2e478 12d             | hsave0          res     1         ' Subroutine parameter saves
2e478 12d             | hsave0          res     1         ' Subroutine parameter saves
2e478 12d             | hsave1          res     1
2e478 12d             | hsave1          res     1
2e478 12d             | hsave2          res     1
2e478 12d             | hsave2          res     1
2e478 12d             | isrtmp1         res     1
2e478 12d             | isrtmp1         res     1
2e478 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e478 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2e478 12d             | hr0             res     1         ' Multi-purpose registers
2e478 12d             | hr0             res     1         ' Multi-purpose registers
2e478 12d             | hr1             res     1
2e478 12d             | hr1             res     1
2e478 12d             | hr2             res     1
2e478 12d             | hr2             res     1
2e478 12d             | hr3             res     1
2e478 12d             | hr3             res     1
2e478 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e478 12d             | hpar1           res     1         ' Routine entry/exit parameters
2e478 12d             | hpar2           res     1
2e478 12d             | hpar2           res     1
2e478 12d             | hpar3           res     1
2e478 12d             | hpar3           res     1
2e478 12d             | hct2            res     1         ' Function response bus turn-around timer
2e478 12d             | hct2            res     1         ' Function response bus turn-around timer
2e478 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e478 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2e478 12d             | mod_cnt         res     1         ' Used in idle loops
2e478 12d             | mod_cnt         res     1         ' Used in idle loops
2e478 12d             |                 fit     $1F0
2e478 12d             |                 org     $200
2e478 200             | hlut_start
2e478 200             | 
2e478 200             | '------------------------------------------------------------------------------
2e478 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2e478 200             | ' settings to startup defaults.
2e478 200             | '------------------------------------------------------------------------------
2e478 200             | ' On entry:
2e478 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2e478 200             | '------------------------------------------------------------------------------
2e478 200             | set_speed_full
2e478 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2e47c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2e480 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2e484 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2e488 204             | '                ret                             wcz     ' Restore caller flags on exit
2e488 204             | 
2e488 204             | '------------------------------------------------------------------------------
2e488 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2e488 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2e488 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2e488 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2e488 204             | ' putting the smart pins into reset.
2e488 204             | '------------------------------------------------------------------------------
2e488 204             | ' On entry:
2e488 204             | ' On exit: CZ flags restored to caller states
2e488 204             | '------------------------------------------------------------------------------
2e488 204             | set_speed_low
2e488 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2e48c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2e490 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2e494 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2e498 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2e49c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2e4a0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2e4a4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2e4a8 20c             | 
2e4a8 20c             | '------------------------------------------------------------------------------
2e4a8 20c             | ' Perform configuration stuff required when a device intitially connects.
2e4a8 20c             | '------------------------------------------------------------------------------
2e4a8 20c             | ' On entry:
2e4a8 20c             | ' On exit:
2e4a8 20c             | '------------------------------------------------------------------------------
2e4a8 20c             | on_connect
2e4a8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2e4ac 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2e4b0 20e             | .retry
2e4b0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2e4b4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2e4b8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2e4bc 211 00 08 00 FF 
2e4c0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2e4c4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2e4c8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e4cc 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2e4d0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2e4d4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2e4d8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e4dc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2e4e0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2e4e4 21b 4C 03 B0 FD |                 call    #poll_waitx
2e4e8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2e4ec 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2e4f0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2e4f4 21f B8 FF 9F FD |                 jmp     #.retry
2e4f8 220             | .get_dev_desc
2e4f8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2e4fc 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2e500 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2e504 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2e508 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2e50c 225 88 FB BF FD |                 call    #reset
2e510 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2e514 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e518 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2e51c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2e520 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e524 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2e528 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2e52c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2e530 22e 04 00 00 FF 
2e534 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2e538 230 34 FA BF FD |                 call    #calc_crc5
2e53c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2e540 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e544 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2e548 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2e54c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2e550 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2e554 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e558 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2e55c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2e560 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2e564 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2e568 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2e56c 23d C4 02 B0 FD |                 call    #poll_waitx
2e570 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2e574 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2e578 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2e57c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2e580 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2e584 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e588 244 2D 00 64 5D |         if_nz   ret
2e58c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2e590 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2e594 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2e598 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2e59c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2e5a0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2e5a4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2e5a8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2e5ac 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2e5b0 24e 2C FB 9F CD |         if_b    jmp     #host_error
2e5b4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2e5b8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2e5bc 251 2D EC 63 FD |                 call    pa
2e5c0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2e5c4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2e5c8 254 2C EC 63 FD |                 jmp     pa
2e5cc 255             | 
2e5cc 255             | '------------------------------------------------------------------------------
2e5cc 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2e5cc 255             | ' Status reporting is always in the function-to-host direction.
2e5cc 255             | '------------------------------------------------------------------------------
2e5cc 255             | ' On entry:
2e5cc 255             | '   PTRA - start address of the SETUP data in hub.
2e5cc 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2e5cc 255             | '     stage.
2e5cc 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2e5cc 255             | ' On exit:
2e5cc 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2e5cc 255             | '     contains the count of data stage bytes actually received, which must
2e5cc 255             | '     always be <= the count requested.
2e5cc 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2e5cc 255             | '     more specific USB operation error code.
2e5cc 255             | '------------------------------------------------------------------------------
2e5cc 255             | control_read
2e5cc 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2e5d0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2e5d4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2e5d8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2e5dc 259             | .xfer_start
2e5dc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2e5e0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2e5e4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e5e8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2e5ec 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2e5f0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2e5f4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2e5f8 260 61 00 00 FF 
2e5fc 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2e600 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2e604 263             | .data
2e604 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2e608 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2e60c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2e610 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2e614 267             | .nak_retry
2e614 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2e618 268             | .in_retry
2e618 268 BC F6 BF FD |                 call    #txn_in
2e61c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2e620 26a 28 00 90 AD |         if_z    jmp     #.commit
2e624 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2e628 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2e62c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2e630 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2e634 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2e638 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2e63c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2e640 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e644 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2e648 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2e64c 275             | .commit
2e64c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2e650 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2e654 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2e658 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2e65c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2e660 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2e664 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2e668 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2e66c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2e670 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2e674 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2e678 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2e67c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2e680 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2e684 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2e688 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2e68c 285             | .pre_status
2e68c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2e690 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2e694 287 00 B0 06 F6 |                 mov     pkt_data, #0
2e698 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2e69c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2e6a0 28a 61 00 00 FF 
2e6a4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2e6a8 28c             | .out_retry
2e6a8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2e6ac 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e6b0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2e6b4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2e6b8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2e6bc 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2e6c0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2e6c4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2e6c8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e6cc 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2e6d0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2e6d4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2e6d4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2e6d4 297             | ' ControlRead() transfer gets things unstuck most of the time...
2e6d4 297             | .xfer_retry
2e6d4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2e6d8 298 58 01 B0 FD |                 call    #poll_waitx
2e6dc 299 8C F9 BF FD |                 call    #wait_txn_ok
2e6e0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2e6e4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2e6e8 29c C8 EF 03 F6 |                 mov     pb, hpar3
2e6ec 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2e6f0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2e6f4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2e6f8 2a0             | 
2e6f8 2a0             | '------------------------------------------------------------------------------
2e6f8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2e6f8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2e6f8 2a0             | ' the SETUP data struct is filled with the required values.
2e6f8 2a0             | '------------------------------------------------------------------------------
2e6f8 2a0             | ' On entry:
2e6f8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2e6f8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2e6f8 2a0             | '     stage.
2e6f8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2e6f8 2a0             | ' On exit:
2e6f8 2a0             | '   retval - used to convey the success/failure of each stage.
2e6f8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2e6f8 2a0             | '     more specific USB operation error code.
2e6f8 2a0             | '------------------------------------------------------------------------------
2e6f8 2a0             | control_write
2e6f8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2e6fc 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2e700 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2e704 2a3             | 
2e704 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2e708 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2e70c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2e710 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2e714 2a7             | .xfer_start
2e714 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2e718 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2e71c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2e720 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e724 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2e728 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2e72c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2e730 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2e734 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2e738 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2e73c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2e740 2b2             | .data
2e740 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2e744 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2e748 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2e74c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2e750 2b6             | .out_retry
2e750 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2e754 2b7 88 F6 BF FD |                 call    #txn_out
2e758 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2e75c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2e760 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2e764 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2e768 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2e76c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2e770 2be             | .commit
2e770 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2e774 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2e778 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2e77c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2e780 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2e784 2c3             | pre_status_in
2e784 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2e788 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2e78c 2c5             | .status_retry
2e78c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2e790 2c6 44 F5 BF FD |                 call    #txn_in
2e794 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2e798 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2e79c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2e7a0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2e7a4 2cb 2D 00 64 AD |         if_z    ret
2e7a8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2e7ac 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e7b0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2e7b4 2cf             | '               ret                                     ' Caller must handle transfer retirement
2e7b4 2cf             | 
2e7b4 2cf             | '------------------------------------------------------------------------------
2e7b4 2cf             | ' Execute an IN interrupt transaction.
2e7b4 2cf             | '------------------------------------------------------------------------------
2e7b4 2cf             | ' On entry:
2e7b4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2e7b4 2cf             | '   hpar2 - Address of the IN data buffer
2e7b4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2e7b4 2cf             | ' On exit:
2e7b4 2cf             | '   retval - the result of the operation.
2e7b4 2cf             | '   hpar3 - the count of IN data bytes actually received.
2e7b4 2cf             | '------------------------------------------------------------------------------
2e7b4 2cf             | do_int_in
2e7b4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2e7b8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2e7bc 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2e7c0 2d2             | 
2e7c0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2e7c4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2e7c8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2e7cc 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2e7d0 2d6             | .retry
2e7d0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2e7d4 2d7 00 F5 BF FD |                 call    #txn_in
2e7d8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2e7dc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2e7e0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2e7e4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2e7e8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2e7ec 2dd 54 00 B0 FD |                 call    #retry_wait
2e7f0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2e7f4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2e7f8 2e0 D4 FF 9F FD |                 jmp     #.retry
2e7fc 2e1             | .commit
2e7fc 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2e800 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2e804 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2e808 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2e80c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2e810 2e6             | .post_ret
2e810 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2e814 2e7             | 
2e814 2e7             | 
2e814 2e7             | '------------------------------------------------------------------------------
2e814 2e7             | ' Resets the downstream hub port to FS
2e814 2e7             | '------------------------------------------------------------------------------
2e814 2e7             | dwnstream_reset
2e814 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2e818 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2e81c 2e9             | 
2e81c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2e820 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2e824 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2e828 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2e82c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2e830 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2e834 2ef             | 
2e834 2ef             | '------------------------------------------------------------------------------
2e834 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2e834 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2e834 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2e834 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2e834 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2e834 2ef             | '------------------------------------------------------------------------------
2e834 2ef             | ' On entry:
2e834 2ef             | '   hctwait - wait interval in sysclocks.
2e834 2ef             | ' On exit:
2e834 2ef             | '------------------------------------------------------------------------------
2e834 2ef             | poll_waitx
2e834 2ef 1A 92 63 FD |                 getct   hct2
2e838 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2e83c 2f1             | .wait
2e83c 2f1 FF 25 CC FB |                 jnct2   #.wait
2e840 2f2 2D 00 64 FD |                 ret
2e844 2f3             | 
2e844 2f3             | '------------------------------------------------------------------------------
2e844 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2e844 2f3             | '------------------------------------------------------------------------------
2e844 2f3             | ' On entry:
2e844 2f3             | '   retval - transaction response PID or error code.
2e844 2f3             | ' On exit:
2e844 2f3             | '------------------------------------------------------------------------------
2e844 2f3             | retry_wait
2e844 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2e848 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2e84c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2e850 2f6 14 00 90 AD |         if_z    jmp     #.nak
2e854 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2e858 2f8 D8 FF BF FD |                 call    #poll_waitx
2e85c 2f9             | .dec
2e85c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2e860 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2e864 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2e868 2fc             | .nak
2e868 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2e86c 2fd C4 FF BF FD |                 call    #poll_waitx
2e870 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2e874 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2e878 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2e87c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2e880 302 2D 00 64 FD |                 ret
2e884 303             | 
2e884 303             | host_reset
2e884 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2e888 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2e88c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2e88c 305 BD 01 05 FF 
2e890 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2e894 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2e898 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2e89c 309             | ' Check to see if the system clock has been changed.
2e89c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2e8a0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2e8a4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2e8a8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2e8ac 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2e8b0 30e 40 46 62 FD |                 dirl    dp
2e8b4 30f             | 
2e8b4 30f 28 02 64 FD |                 setq    #1
2e8b8 310 80 00 80 FF 
2e8bc 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2e8c0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2e8c4 313             | .enable
2e8c4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2e8c8 314 41 46 62 FD |                 dirh    dp
2e8cc 315 1F 36 63 FD |                 waitx   _1us_
2e8d0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2e8d4 317             | 
2e8d4 317             |                 ' Handle Port protection enable and startup delay
2e8d4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2e8d8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2e8dc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2e8e0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2e8e4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2e8e8 31c             | 
2e8e8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2e8ec 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2e8f0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2e8f4 31f 00 00 04 F6 |                 mov     0-0, #0
2e8f8 320             | .regloop
2e8f8 320             | 
2e8f8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2e8f8 320             | 
2e8f8 320             | discon_entry
2e8f8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2e8fc 321             | 
2e8fc 321             |               
2e8fc 321             |         if HAVE_HIDPAD
2e8fc 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2e900 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2e904 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2e908 324 F7 01 68 FC |                 wrlong  #0,pb
2e90c 325             |         end
2e90c 325             |         if EMUPAD_MAX_PLAYER > 0
2e90c 325             |         end
2e90c 325             | 
2e90c 325             |                 ' Fall through to disconnected loop
2e90c 325             | 
2e90c 325             | '-----------------------------------------------------------------------------------------------------------------
2e90c 325             | ' Device connect handling (Section 7.1.7.3).
2e90c 325             | '-----------------------------------------------------------------------------------------------------------------
2e90c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2e90c 325             | ' device to connect (Section 7.1.7.3).
2e90c 325             | '-----------------------------------------------------------------------------------------------------------------
2e90c 325             | disconnected
2e90c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2e910 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2e914 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2e918 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2e91c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2e920 32a             |         if ACTIVITY_LED >= 0
2e920 32a             |         end
2e920 32a 22 A7 82 FA |                 rqpin   urx, dm
2e924 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2e928 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2e92c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2e930 32e             | .se1_test
2e930 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2e934 32f FC FE BF FD |                 call    #poll_waitx
2e938 330 22 A7 82 FA |                 rqpin   urx, dm
2e93c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2e940 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2e944 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2e948 334             | .se1            'SE1 is a fatal error condition
2e948 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2e94c 335 E4 FE BF FD |                 call    #poll_waitx
2e950 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2e954 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2e958 338             | .connect_test                                           ' Test lines until stable J/K state seen
2e958 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2e95c 339 22 A7 82 FA |                 rqpin   urx, dm
2e960 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2e964 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2e968 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2e96c 33d             | connected
2e96c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2e970 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2e974 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2e978 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2e97c 341             | .set_pulse
2e97c 341 1A 64 63 FD |                 getct   _pulse_time_
2e980 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2e984 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2e984 343             | ' of 1ms and make a correction, if necessary.
2e984 343             | '                mov     htmp, _1ms_
2e984 343             | '                subs    htmp, iframe_delta
2e984 343             | '                adds    _frame1ms_clks_, htmp
2e984 343             | '                debug(udec(_frame1ms_clks_))
2e984 343             | 
2e984 343             |                 ' Fall through to idle/processing loop
2e984 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2e988 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2e98c 345             | 
2e98c 345             | hidle
2e98c 345 22 A7 82 FA |                 rqpin   urx, dm
2e990 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2e994 347 98 00 90 CD |         if_c    jmp     #.se0_test
2e998 348 24 06 70 FD |                 pollct3                         wc
2e99c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2e9a0 34a 1A 94 63 FD |                 getct   hct3
2e9a4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2e9a8 34c             | 
2e9a8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2e9ac 34d 00 70 E3 F8 |                 getbyte htmp
2e9b0 34e             | 
2e9b0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2e9b4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2e9b8 350 40 00 90 AD |         if_z    jmp     #.poll
2e9bc 351             | 
2e9bc 351             |         if _HAVE_GAMEPAD
2e9bc 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2e9c0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2e9c4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2e9c8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2e9cc 355 2C 00 90 AD |         if_z    jmp     #.poll
2e9d0 356             |         end
2e9d0 356             | 
2e9d0 356             |         if HAVE_MOUSE
2e9d0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2e9d4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2e9d8 358 20 00 90 AD |         if_z    jmp     #.poll
2e9dc 359             |         end
2e9dc 359             | 
2e9dc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2e9e0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2e9e4 35b 14 00 90 AD |         if_z    jmp     #.poll
2e9e8 35c             | 
2e9e8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2e9ec 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2e9f0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2e9f4 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2e9f8 360             |         if HAVE_MOUSE
2e9f8 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2e9fc 361             |         else
2e9fc 361             |         end
2e9fc 361             | 
2e9fc 361             | .poll
2e9fc 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2ea00 362 2D EC 63 FD |                 call    pa
2ea04 363             | .skip_poll
2ea04 363             | 
2ea04 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2ea08 364             | 
2ea08 364             | .nopoll
2ea08 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2ea0c 365 44 00 90 AD |         if_z    jmp     #hsuspend
2ea10 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2ea14 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2ea18 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2ea1c 369 1A 84 63 FD |                 getct   hr0
2ea20 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2ea24 36b             |         if ACTIVITY_LED >= 0
2ea24 36b             |         end
2ea24 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2ea28 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2ea2c 36d 5C FF 9F FD |                 jmp     #hidle
2ea30 36e             | ' Check for extended SE0 state on the bus
2ea30 36e             | .se0_test
2ea30 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2ea34 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2ea38 370 22 A7 82 FA |                 rqpin   urx, dm
2ea3c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2ea40 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2ea44 373 24 F6 BF FD |                 call    #wait_txn_ok
2ea48 374 00 00 80 FF 
2ea4c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2ea50 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2ea50 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2ea54 377             | 
2ea54 377             | hsuspend
2ea54 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2ea58 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2ea5c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2ea60 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2ea64 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2ea68 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2ea6c 37d             | 
2ea6c 37d             |                 ' Fall through to resume wait loop
2ea6c 37d             | 
2ea6c 37d             | hwait_resume
2ea6c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2ea70 37e 02 86 47 F0 |                 shr     hr1, #2
2ea74 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2ea78 380             |         if ACTIVITY_LED >= 0
2ea78 380             |         end
2ea78 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2ea7c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2ea80 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2ea84 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2ea88 384 18 00 90 AD |         if_z    jmp     #.resume
2ea8c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2ea90 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ea94 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2ea98 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ea9c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2eaa0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2eaa4 38b             | .resume
2eaa4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2eaa8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2eaac 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2eab0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2eab4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2eab8 390 1F 70 63 FD |                 waitx   htmp
2eabc 391 22 07 28 FC |                 wypin   #OUT_J, dm
2eac0 392 01 70 47 F0 |                 shr     htmp, #1
2eac4 393 1F 70 63 FD |                 waitx   htmp
2eac8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2eacc 395 1A 92 62 FD |                 getct   iframe_ct_base
2ead0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2ead4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2ead8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2eadc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2eae0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2eae4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2eae8 39c             | 
2eae8 39c             | '------------------------------------------------------------------------------
2eae8 39c             | ' Send preamble to enable low-speed HUB ports
2eae8 39c             | '------------------------------------------------------------------------------
2eae8 39c             | ' On entry:
2eae8 39c             | ' On exit:
2eae8 39c             | '   USB baud rate set to low-speed
2eae8 39c             | '------------------------------------------------------------------------------
2eae8 39c             | utx_pre
2eae8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2eaec 39d 40 46 62 FD |                 dirl    dp
2eaf0 39e 28 02 64 FD |                 setq    #1
2eaf4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2eaf8 3a0 58 44 62 FD |                 drvl    dm
2eafc 3a1 59 46 62 FD |                 drvh    dp
2eb00 3a2             | 
2eb00 3a2 1E 00 00 FF 
2eb04 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2eb08 3a4             | 
2eb08 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2eb0c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2eb10 3a6 28 02 64 3D |         if_nc   setq    #1
2eb14 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2eb18 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2eb1c 3a9             | .l1
2eb1c 3a9             | 
2eb1c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2eb20 3aa 40 46 62 FD |                 dirl    dp
2eb24 3ab 28 02 64 FD |                 setq    #1
2eb28 3ac 80 00 80 FF 
2eb2c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2eb30 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2eb34 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2eb38 3b0 41 46 62 FD |                 dirh    dp
2eb3c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2eb40 3b2             | 
2eb40 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2eb44 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2eb48 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2eb4c 3b5             | 
2eb4c 3b5             | hlut_end
2eb4c 3b5             |                 fit     $400
2eb4c 3b5             |                 orgh
2eb4c                 | if OVERLAP_MEMORY
2eb4c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2eb4c                 | end
2eb4c                 | '------------------------------------------------------------------------------
2eb4c                 | ' Routines called from cog space.
2eb4c                 | '------------------------------------------------------------------------------
2eb4c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2eb4c                 | '------------------------------------------------------------------------------
2eb4c                 | 
2eb4c                 | '------------------------------------------------------------------------------
2eb4c                 | ' USB host cog initialization.
2eb4c                 | '------------------------------------------------------------------------------
2eb4c                 | usb_host_init
2eb4c                 |                 ' Initialize buffer pointers
2eb4c                 |         if OVERLAP_MEMORY
2eb4c                 |         else
2eb4c     40 15 B0 FE |                 loc     pb, #hid_descr
2eb50                 |         end
2eb50     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2eb54                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2eb54                 |                 {
2eb54                 |                 }
2eb54                 |         
2eb54                 |                 {
2eb54                 |                 }
2eb54                 |                 'loc     pb,#hkbd_report
2eb54                 |                 'mov     hkbd_report_p,pb
2eb54                 | 
2eb54     08 1D B0 FE |                 loc     pb, #hub_descr
2eb58     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2eb5c     1D 1D B0 FE |                 loc     pb, #urx_buff
2eb60     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2eb64     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2eb68     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2eb6c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2eb70     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2eb74     18 15 B0 FE |                 loc     pb, #usb_cache_start
2eb78     F7 55 02 F6 |                 mov     cache_start_p, pb
2eb7c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2eb80     F7 57 02 F6 |                 mov     cache_end_p, pb
2eb84                 | 
2eb84                 |         if ERROR_LED >= 0
2eb84                 |         end
2eb84                 | 
2eb84                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2eb84                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2eb84                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2eb84                 | ' Configure and enable the Serial Host USB port.
2eb84     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2eb88                 | 
2eb88                 | '------------------------------------------------------------------------------
2eb88                 | ' Timing calculations happen before any interrupt(s) are enabled.
2eb88                 | '------------------------------------------------------------------------------
2eb88                 | ' On entry:
2eb88                 | '   htmp - current CLKFREQ value.
2eb88                 | '------------------------------------------------------------------------------
2eb88                 | hinit_usb_timings
2eb88                 | '                getct   htmp2
2eb88     B8 59 02 F6 |                 mov     save_sysclk, htmp
2eb8c     8D 5B 80 FF 
2eb90     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2eb94     18 30 63 FD |                 getqx   _12Mbps_
2eb98     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2eb9c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2eba0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2eba4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2eba8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2ebac     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2ebb0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2ebb4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2ebb8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2ebbc     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2ebc0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2ebc4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2ebc8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2ebcc     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2ebd0     80 00 00 FF 
2ebd4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2ebd8     18 2C 63 FD |                 getqx   _var_64_lower_
2ebdc     19 2E 63 FD |                 getqy   _var_64_upper_
2ebe0     28 2C 63 FD |                 setq    _var_64_lower_
2ebe4     65 CD 1D FF 
2ebe8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2ebec     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2ebf0     01 00 00 FF 
2ebf4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2ebf8     18 2C 63 FD |                 getqx   _var_64_lower_
2ebfc     19 2E 63 FD |                 getqy   _var_64_upper_
2ec00     28 2C 63 FD |                 setq    _var_64_lower_
2ec04     A1 07 00 FF 
2ec08     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2ec0c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2ec10     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2ec14     09 36 57 F0 |                 shr     _1us_, #9               wc
2ec18     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2ec1c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2ec20     18 38 63 FD |                 getqx   _10us_
2ec24     09 38 57 F0 |                 shr     _10us_, #9              wc
2ec28     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2ec2c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2ec30     18 3A 63 FD |                 getqx   _33us_
2ec34     09 3A 57 F0 |                 shr     _33us_, #9              wc
2ec38     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2ec3c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2ec40     18 3C 63 FD |                 getqx   _txn_err_
2ec44     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2ec48     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2ec4c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2ec50     18 3E 63 FD |                 getqx   _500us_
2ec54     09 3E 57 F0 |                 shr     _500us_, #9             wc
2ec58     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2ec5c     01 00 00 FF 
2ec60     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2ec64     18 40 63 FD |                 getqx   _txn_ok_ls_
2ec68     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2ec6c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2ec70     01 00 00 FF 
2ec74     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2ec78     18 42 63 FD |                 getqx   _txn_ok_fs_
2ec7c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2ec80     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2ec84     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2ec88     05 00 00 FF 
2ec8c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2ec90     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2ec94     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2ec98     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2ec9c     1C 00 00 FF 
2eca0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2eca4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2eca8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2ecac     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2ecb0     00 00 00 FF 
2ecb4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2ecb8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2ecbc     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2ecc0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2ecc4     04 00 00 FF 
2ecc8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2eccc     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2ecd0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2ecd4     8D 5B 00 FF 
2ecd8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2ecdc     18 4C 63 FD |                 getqx   _preamble_wait_
2ece0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2ece4     01 00 00 FF 
2ece8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2ecec     18 2C 63 FD |                 getqx   _var_64_lower_
2ecf0     19 2E 63 FD |                 getqy   _var_64_upper_
2ecf4     28 2C 63 FD |                 setq    _var_64_lower_
2ecf8     01 00 00 FF 
2ecfc     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2ed00     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2ed04     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2ed08     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2ed0c     FF FF 7F FF 
2ed10     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2ed14     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2ed18     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2ed1c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2ed20     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2ed24     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2ed28     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2ed2c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2ed30     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2ed34     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2ed38     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2ed3c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2ed40     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2ed44     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2ed48     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2ed4c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2ed50     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2ed54     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2ed58     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2ed5c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2ed60     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2ed64     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2ed68     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2ed6c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2ed70     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2ed74     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2ed78     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2ed7c                 | '        _ret_   mov     _1sec_, save_sysclk
2ed7c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2ed7c                 | '                ret
2ed7c                 | {
2ed7c                 | }
2ed7c                 | 
2ed7c                 | '------------------------------------------------------------------------------
2ed7c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2ed7c                 | ' one. If it is, start the task progression that will configure the device for
2ed7c                 | ' use.
2ed7c                 | '------------------------------------------------------------------------------
2ed7c                 | ' On entry:
2ed7c                 | '   hconfig_base - start address of the cached config descriptor chain.
2ed7c                 | ' On exit:
2ed7c                 | '------------------------------------------------------------------------------
2ed7c                 | hparse_con_desc
2ed7c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2ed80     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2ed84     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2ed88     4E 70 FF F9 |                 movbyts htmp,#%%1032
2ed8c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2ed90                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2ed90                 | 
2ed90     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2ed94     6E ED 03 F1 |                 add     pa, hconfig_base
2ed98     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2ed9c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2ed9c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2ed9c                 | ' that defines a keyboard and/or mouse.
2ed9c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2eda0                 | .next_intf
2eda0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2eda4     BC 01 90 3D |         if_ae   jmp     #hset_config
2eda8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2edac     75 F3 03 F1 |                 add     ptrb, hnext_desc
2edb0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2edb4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2edb8     0C 00 90 AD |         if_z    jmp     #.intf
2edbc     80 71 C7 FA |                 rdbyte  htmp, ptrb
2edc0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2edc4     D8 FF 9F FD |                 jmp     #.next_intf
2edc8                 | .intf
2edc8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2edcc     00 90 07 F6 |                 mov     hpar3, #0
2edd0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2edd4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2edd8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2eddc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2ede0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2ede0                 | 
2ede0                 | .endp
2ede0     80 71 C7 FA |                 rdbyte  htmp, ptrb
2ede4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2ede8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2edec     78 00 90 3D |         if_ae   jmp     #.get_device
2edf0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2edf4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2edf8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2edfc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2ee00     64 00 90 AD |         if_z    jmp     #.get_device
2ee04     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2ee08     04 00 90 AD |         if_z    jmp     #.get_ep
2ee0c     D0 FF 9F FD |                 jmp     #.endp
2ee10                 | .get_ep
2ee10     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2ee14     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2ee18     0F 86 67 F0 |                 shl     hr1, #8 + 7
2ee1c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2ee20     3F 00 00 FF 
2ee24     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2ee28     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2ee2c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2ee30     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2ee34     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ee38     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2ee3c     A0 FF 9F FD |                 jmp     #.endp
2ee40                 | .in_ep
2ee40     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2ee44     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2ee48                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ee48     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ee4c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2ee50     8C FF 9F FD |                 jmp     #.endp
2ee54                 | .out_ep
2ee54     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2ee58     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2ee5c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ee5c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ee60     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2ee64     78 FF 9F FD |                 jmp     #.endp
2ee68                 | 
2ee68                 | .get_device
2ee68     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2ee6c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2ee70     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2ee74     68 00 90 AD |         if_z    jmp     #.gamepad
2ee78     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2ee7c     AC 00 90 AD |         if_z    jmp     #.hub
2ee80     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2ee84     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2ee88     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ee8c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ee90     4C 00 90 AD |         if_z    jmp     #.gamepad
2ee94     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2ee98     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2ee9c                 | .keyboard
2ee9c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2eea0                 |         if HAVE_MOUSE
2eea0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2eea4                 |         else
2eea4                 |         end
2eea4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2eea8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2eeac     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2eeb0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2eeb4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2eeb8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2eebc                 |                 'debug(udec(kb_intf_num))
2eebc                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2eebc     E0 FE 9F FD |                 jmp     #.next_intf
2eec0                 | if HAVE_MOUSE
2eec0                 | .mouse
2eec0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2eec4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2eec8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2eecc     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2eed0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2eed4                 |                 'getbyte ms_interval, hr2, #3
2eed4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2eed8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2eedc                 |                 'debug(udec(kb_intf_num))
2eedc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2eedc     C0 FE 9F FD |                 jmp     #.next_intf
2eee0                 | end
2eee0                 | .gamepad
2eee0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2eee4     C7 71 63 F5 |                 xor     htmp, hpar2
2eee8     3F 00 00 FF 
2eeec     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2eef0     AC FE 9F AD |         if_z    jmp     #.next_intf
2eef4                 |         if HAVE_MOUSE
2eef4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2eef8     C7 71 63 F5 |                 xor     htmp, hpar2
2eefc     3F 00 00 FF 
2ef00     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ef04     98 FE 9F AD |         if_z    jmp     #.next_intf
2ef08                 |         end
2ef08     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2ef0c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2ef10     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2ef14                 | 
2ef14     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2ef18     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2ef1c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ef20     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2ef24     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2ef28                 |                 'debug(udec(gp_intf_num))
2ef28                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2ef28     74 FE 9F FD |                 jmp     #.next_intf
2ef2c                 | .hub
2ef2c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ef30     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2ef34     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ef38     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2ef3c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2ef40     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2ef44     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2ef48     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2ef4c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ef50     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2ef54     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ef58     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2ef5c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2ef60                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2ef60     3C FE 9F FD |                 jmp     #.next_intf
2ef64                 | 
2ef64                 | '------------------------------------------------------------------------------
2ef64                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2ef64                 | ' it according to its function, or functions. In the case of this boot protocol
2ef64                 | ' keyboard/mouse class driver:
2ef64                 | ' - SetConfiguration(config_num)
2ef64                 | ' - SetProtocol(boot)
2ef64                 | ' - SetIdle(indefinite)
2ef64                 | ' - Enter the device interrupt IN polling task stage.
2ef64                 | '------------------------------------------------------------------------------
2ef64                 | ' On entry:
2ef64                 | ' On exit:
2ef64                 | '------------------------------------------------------------------------------
2ef64                 | hset_config
2ef64                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2ef64                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2ef64     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2ef68     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ef6c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2ef70     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2ef74                 |         if HAVE_MOUSE
2ef74     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2ef78                 |         end
2ef78     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2ef7c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2ef80                 | .set_config
2ef80     6C 0E D0 FE |                 loc     ptra, #set_config
2ef84     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2ef88     6E ED 03 F1 |                 add     pa, hconfig_base
2ef8c     F6 8D C3 FA |                 rdbyte  hpar1, pa
2ef90     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2ef94     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2ef98     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2ef9c     A0 02 A0 FD |                 call    #control_write
2efa0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2efa4     2D 00 64 5D |         if_nz   ret
2efa8                 | .kbd_config
2efa8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2efac     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2efb0                 | 
2efb0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2efb4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2efb8     3F 00 00 FF 
2efbc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2efc0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2efc4                 | 
2efc4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2efc8     34 0E D0 FE |                 loc     ptra, #set_protocol
2efcc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2efd0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2efd4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2efd8     A0 02 A0 FD |                 call    #control_write
2efdc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2efe0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2efe4     E4 02 90 5D |         if_nz   jmp     #.notify_client
2efe8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2efec     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2eff0     30 03 B0 FD |                 call    #hset_idle
2eff4                 |                 'cmp     retval, #PID_ACK        wz
2eff4                 |         'if_nz   mov     hkbd_ep_addr, #0
2eff4                 |         'if_nz   jmp     #.notify_client
2eff4     A8 99 02 F6 |                 mov     hctwait, _2ms_
2eff8     EF 02 A0 FD |                 call    #poll_waitx
2effc     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2f000     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2f004     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2f008     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2f00c     2C 03 B0 FD |                 call    #hset_kbdled_report
2f010     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f014     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2f018     B0 02 90 5D |         if_nz   jmp     #.notify_client
2f01c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f020     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f024     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f028     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f02c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2f030     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2f034     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2f038     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f03c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2f040     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2f044     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2f048                 |         if !!HAVE_MOUSE
2f048                 |         end
2f048                 | 
2f048                 | .mouse_config
2f048                 | if HAVE_MOUSE
2f048     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2f04c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f050     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2f054     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f058     3F 00 00 FF 
2f05c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f060     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2f064                 | 
2f064                 |                 debug("mouse passed addr check")
2f064                 | 
2f064     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f068     00 00 80 FF 
2f06c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2f070     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2f074     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f078     55 02 A0 FD |                 call    #control_read
2f07c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f080     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f084     44 02 90 5D |         if_nz   jmp     #.notify_client
2f088     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f08c     56 01 00 F6 |                 mov     0-0, total_data
2f090     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f094                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f094                 | 
2f094     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2f098     64 0D D0 FE |                 loc     ptra, #set_protocol
2f09c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2f0a0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f0a4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2f0a8     A0 02 A0 FD |                 call    #control_write
2f0ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f0b0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2f0b4     14 02 90 5D |         if_nz   jmp     #.notify_client
2f0b8                 |                 debug("mouse passed SetProtocol")
2f0b8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2f0bc     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2f0c0     60 02 B0 FD |                 call    #hset_idle
2f0c4                 |                 'cmp     retval, #PID_ACK        wz
2f0c4                 |         'if_nz   mov     hmouse_ep_addr, #0
2f0c4                 |         'if_nz   jmp     #.notify_client
2f0c4                 |                 debug("mouse passed SetIdle")
2f0c4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f0c8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f0cc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f0d0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f0d4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2f0d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f0dc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2f0e0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2f0e4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2f0e8     3F 00 00 FF 
2f0ec     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2f0f0     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2f0f4     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2f0f8     D0 01 90 FD |                 jmp     #.notify_client
2f0fc                 | end
2f0fc                 | .gamepad_config
2f0fc                 | if _HAVE_GAMEPAD
2f0fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f100     00 00 0C F2 |                 cmp     0-0, #0                 wz
2f104     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2f108     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f10c     00 70 03 F6 |                 mov     htmp, 0-0
2f110     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f114     3F 00 00 FF 
2f118     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f11c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2f120                 | 
2f120     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f124     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f128     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f12c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f130     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2f134     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2f138     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2f13c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2f140     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2f144     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2f148     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2f14c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2f150     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2f154     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2f158                 | 
2f158                 |                 if EMUPAD_MAX_PLAYER > 0
2f158                 |                 
2f158                 | .rule_loop           
2f158                 |                 end
2f158                 | 
2f158     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2f15c     5C 00 90 AD |         if_e    jmp     #.xinput
2f160     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2f164     00 70 03 F6 |                 mov     htmp,0-0
2f168     01 A6 02 FF 
2f16c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2f170     7C 00 90 AD |         if_e    jmp     #.ps3
2f174                 | 
2f174     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2f178     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2f17c     00 00 80 5F 
2f180     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2f184     03 00 80 AF 
2f188     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2f18c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2f190     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f194     55 02 A0 FD |                 call    #control_read
2f198     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f19c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f1a0     00 00 04 56 |         if_nz   mov     0-0, #0
2f1a4     24 01 90 5D |         if_nz   jmp     #.notify_client
2f1a8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2f1ac     56 01 00 F6 |                 mov     0-0, total_data
2f1b0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f1b4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2f1b4                 | 
2f1b4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2f1b8     10 01 90 FD |                 jmp     #.notify_client
2f1bc                 | .xinput
2f1bc     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2f1c0     2D EF 03 F6 |                 mov     pb,hdev_port
2f1c4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2f1c8     03 EE 27 F3 |                 fle     pb,#3
2f1cc     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2f1d0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2f1d4                 | 
2f1d4     03 B0 06 F6 |                 mov     pkt_data, #3
2f1d8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2f1dc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2f1e0     5A 00 A0 FD |                 call    #txn_out
2f1e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2f1e8                 | 
2f1e8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2f1ec     DC 00 90 FD |                 jmp     #.notify_client
2f1f0                 | .ps3
2f1f0     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2f1f4     2D EF 03 F6 |                 mov     pb,hdev_port
2f1f8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2f1fc     04 EE 27 F3 |                 fle     pb,#4
2f200     F7 EF C3 F9 |                 decod   pb
2f204     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2f208                 | 
2f208     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f20c     00 0C D0 FE |                 loc     ptra, #set_report
2f210     01 00 80 FF 
2f214     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2f218     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f21c     03 61 5C FC |                 wrword  #48, ptra[wLength]
2f220     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2f224     A0 02 A0 FD |                 call    #control_write
2f228                 | 
2f228     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2f22c     E0 0B D0 FE |                 loc     ptra, #set_report
2f230     01 00 80 FF 
2f234     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2f238     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f23c     03 09 5C FC |                 wrword  #4, ptra[wLength]
2f240     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2f244     A0 02 A0 FD |                 call    #control_write
2f248     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2f24c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2f250     00 00 04 56 |         if_nz   mov     0-0, #0
2f254     74 00 90 5D |         if_nz   jmp     #.notify_client
2f258                 | 
2f258     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2f25c     6C 00 90 FD |                 jmp     #.notify_client
2f260                 | end
2f260                 | 
2f260                 | .hub_config
2f260     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2f264     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2f268     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2f26c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2f270     3F 00 00 FF 
2f274     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2f278     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2f27c                 | 
2f27c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2f280     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2f284     26 EF 03 F6 |                 mov     pb, hub_descr_p
2f288     55 02 A0 FD |                 call    #control_read
2f28c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f290     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2f294     34 00 90 5D |         if_nz   jmp     #.notify_client
2f298                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2f298                 | 
2f298     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2f29c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2f2a0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2f2a4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2f2a4                 | .pwr_loop
2f2a4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2f2a8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2f2ac     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2f2b0     A0 02 A0 FD |                 call    #control_write
2f2b4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2f2b8                 | 
2f2b8     B1 99 02 F6 |                 mov     hctwait, _500ms_
2f2bc     B0 99 02 F1 |                 add     hctwait, _100ms_
2f2c0     EF 02 A0 FD |                 call    #poll_waitx
2f2c4                 | 
2f2c4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2f2c8     00 00 90 FD |                 jmp     #.notify_client
2f2cc                 | 
2f2cc                 | .notify_client
2f2cc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2f2d0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2f2d4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2f2d4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2f2d4     2D 00 64 FD |                 ret
2f2d8                 | 
2f2d8                 | '------------------------------------------------------------------------------
2f2d8                 | ' Initialize the keyboard/mouse data area to start-up values.
2f2d8                 | '------------------------------------------------------------------------------
2f2d8                 | ' On entry:
2f2d8                 | ' On exit:
2f2d8                 | '------------------------------------------------------------------------------
2f2d8                 | init_kbdm_data
2f2d8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2f2dc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2f2e0                 | 
2f2e0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2f2e4     2B ED 03 F6 |                 mov     pa, cache_end_p
2f2e8                 | .loop
2f2e8     61 01 4C FC |                 wrbyte  #0, ptra++
2f2ec     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2f2f0     F4 FF 9F CD |         if_b    jmp     #.loop
2f2f4                 |         
2f2f4                 |         if EMUPAD_MAX_PLAYER > 0
2f2f4                 |         end
2f2f4                 | 
2f2f4                 | 
2f2f4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2f2f8                 | .regloop
2f2f8     00 EC 8F F9 |                 altd    pa
2f2fc     00 00 04 F6 |                 mov     0-0, #0
2f300     01 EC 07 F1 |                 add     pa, #1
2f304     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2f308     EC FF 9F 5D |         if_nz   jmp     #.regloop
2f30c                 | 
2f30c     E1 E1 61 FF 
2f310     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2f314     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2f318     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2f31c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2f320                 | 
2f320     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2f324                 | 
2f324                 | '------------------------------------------------------------------------------
2f324                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2f324                 | ' function.
2f324                 | '------------------------------------------------------------------------------
2f324                 | ' On entry:
2f324                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2f324                 | '   hpar2 - index number of the target interface.
2f324                 | ' On exit:
2f324                 | '------------------------------------------------------------------------------
2f324                 | hset_idle
2f324     A8 99 02 F6 |                 mov     hctwait, _2ms_
2f328     EF 02 A0 FD |                 call    #poll_waitx
2f32c     D8 0A D0 FE |                 loc     ptra, #set_idle
2f330     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2f334     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2f338     A0 02 80 FD |                 jmp     #control_write
2f33c                 | 
2f33c                 | '------------------------------------------------------------------------------
2f33c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2f33c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2f33c                 | '------------------------------------------------------------------------------
2f33c                 | ' On entry:
2f33c                 | '   ep_addr_pid - device address and enpoint for the request.
2f33c                 | ' On exit:
2f33c                 | '   retval - transaction result.
2f33c                 | '------------------------------------------------------------------------------
2f33c                 | hset_kbdled_report
2f33c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2f340     CC 0A D0 FE |                 loc     ptra, #set_report
2f344     01 00 80 FF 
2f348     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2f34c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2f350     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2f354     27 EF 03 F6 |                 mov     pb, urx_buff_p
2f358     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2f35c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2f360                 | 
2f360                 | '------------------------------------------------------------------------------
2f360                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2f360                 | '------------------------------------------------------------------------------
2f360                 | ' On entry:
2f360                 | ' On exit:
2f360                 | '------------------------------------------------------------------------------
2f360                 | hget_kbd_in_report
2f360     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2f364     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f368     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2f36c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2f370     CF 02 A0 FD |                 call    #do_int_in
2f374     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f378     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f37c                 | 
2f37c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f380     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f384                 | 
2f384     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2f388     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f38c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2f390     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2f394                 | 
2f394     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2f398     18 00 B0 FD |                 call    #hkbd_compare
2f39c                 |         if EMUPAD_MAX_PLAYER > 0
2f39c                 |         end
2f39c                 | 
2f39c                 | .led_check
2f39c     3B 71 03 F6 |                 mov     htmp, kb_led_states
2f3a0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2f3a4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2f3a8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2f3ac     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2f3b0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2f3b4                 | 
2f3b4                 | '------------------------------------------------------------------------------
2f3b4                 | ' Compare current and previous keyboard data buffers for keypress changes.
2f3b4                 | '------------------------------------------------------------------------------
2f3b4                 | hkbd_compare
2f3b4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f3b8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2f3bc     61 73 07 FB |                 rdlong  htmp1, ptra++
2f3c0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f3c4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2f3c8     61 73 07 FB |                 rdlong  htmp1, ptra++
2f3cc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2f3d0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2f3d4     2D 00 64 AD |         if_z    ret
2f3d8                 | 
2f3d8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2f3dc                 | 
2f3dc                 |                 ' Handle modifiers
2f3dc     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2f3e0     00 87 C7 FA |                 rdbyte  hr1, ptra
2f3e4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2f3e8     63 86 63 FD |                 mergew  hr1
2f3ec     08 EC 07 F6 |                 mov     pa,#8
2f3f0                 | .modloop
2f3f0     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2f3f4     E8 8C 07 F6 |                 mov     hpar1,#$E8
2f3f8     F6 8D 83 F1 |                 sub     hpar1,pa
2f3fc     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2f400     FB ED 6F FB |                 djnz    pa,#.modloop
2f404                 | 
2f404     6F E0 75 FD | .release        modc    _set    wc
2f408                 |                 'alts    hdev_port, #hid_report_p
2f408                 |                 'mov     ptra, hid_report_p
2f408     02 F0 07 F1 |                 add     ptra, #2
2f40c     06 EC 07 F6 |                 mov     pa, #6
2f410     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2f414     20 00 90 AD |         if_z    jmp     #.rl3
2f418     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2f41c     02 F2 07 F1 |                 add     ptrb, #2
2f420     06 EE 07 F6 |                 mov     pb, #6
2f424     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2f428     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f42c     08 00 90 AD |         if_z    jmp     #.rl3
2f430     FC EF 6F FB |                 djnz    pb, #.rl2
2f434     68 00 B0 FD |                 call    #hkbd_translate
2f438     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2f43c                 | 
2f43c     00 90 07 F6 |                 mov     hpar3, #0
2f440     1F 90 27 F4 |                 bith    hpar3, #31
2f444                 | 
2f444     6F 00 74 FD | .press          modc    _clr    wc
2f448     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f44c     02 F0 07 F1 |                 add     ptra, #2
2f450     06 EC 07 F6 |                 mov     pa, #6
2f454     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2f458     20 00 90 AD |         if_z    jmp     #.pl3
2f45c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2f460     02 F2 07 F1 |                 add     ptrb, #2
2f464     06 EE 07 F6 |                 mov     pb, #6
2f468     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2f46c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2f470     08 00 90 AD |         if_z    jmp     #.pl3
2f474     FC EF 6F FB |                 djnz    pb, #.pl2
2f478     24 00 B0 FD |                 call    #hkbd_translate
2f47c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2f480                 | 
2f480     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2f484     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2f488     28 02 64 FD |                 setq #1
2f48c     61 73 07 FB |                 rdlong  htmp1, ptra++
2f490     28 02 64 FD |                 setq #1
2f494     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2f498     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2f49c                 | 
2f49c     2D 00 64 FD |                 ret
2f4a0                 | 
2f4a0                 | '------------------------------------------------------------------------------
2f4a0                 | ' Translate keyboard scancode to ASCII
2f4a0                 | '------------------------------------------------------------------------------
2f4a0                 | ' On entry:
2f4a0                 | '   hpar1 - scancode
2f4a0                 | '   hpar2 - key modifiers state
2f4a0                 | '       c - pressed (0) or released (1) flag
2f4a0                 | ' On exit:
2f4a0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2f4a0                 | '               30..17 = unused
2f4a0                 | '                   18 = scroll-lock state 
2f4a0                 | '                   17 = caps-lock state
2f4a0                 | '                   16 = num-lock state 
2f4a0                 | '                15..8 = key modifiers state
2f4a0                 | '                 7..0 = scancode
2f4a0                 | '------------------------------------------------------------------------------
2f4a0                 | hkbd_translate
2f4a0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2f4a4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2f4a8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2f4ac     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2f4b0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2f4b4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2f4b8                 | 
2f4b8                 |         if EMUPAD_MAX_PLAYER > 0
2f4b8                 | 
2f4b8                 |         if EMUPAD_BT0_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT1_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT2_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT3_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT4_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT5_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT6_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT7_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT8_BIT >= 0
2f4b8                 |         end
2f4b8                 |         if EMUPAD_BT9_BIT >= 0
2f4b8                 |         end
2f4b8                 | 
2f4b8                 |         end
2f4b8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2f4bc     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2f4c0     1F 8C 47 F4 |                 bitc    hpar1, #31
2f4c4                 |         if KEYQUEUE_SIZE > 0
2f4c4     C4 09 B0 FE |                 loc pb,#keyq_head
2f4c8     F7 71 E3 FA |                 rdword htmp,pb
2f4cc     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2f4d0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2f4d4     B8 75 03 F6 |                 mov htmp2,htmp
2f4d8     04 74 07 FA |                 mul htmp2,#4
2f4dc     F7 75 03 F1 |                 add htmp2,pb
2f4e0     02 74 07 F1 |                 add htmp2,#2
2f4e4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2f4e8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2f4ec     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2f4f0     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2f4f4                 |         end
2f4f4     2D 00 7C FD |                 ret wcz
2f4f8                 | 
2f4f8                 | if HAVE_MOUSE
2f4f8                 | '------------------------------------------------------------------------------
2f4f8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2f4f8                 | '------------------------------------------------------------------------------
2f4f8                 | ' On entry:
2f4f8                 | ' On exit:
2f4f8                 | '------------------------------------------------------------------------------
2f4f8                 | hget_mouse_in_report
2f4f8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2f4fc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f500     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2f504     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2f508     CF 02 A0 FD |                 call    #do_int_in
2f50c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f510     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f514                 | 
2f514     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f518     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f51c                 | 
2f51c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2f520     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f524     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2f528     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2f52c                 | 
2f52c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2f530     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2f534     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2f538     01 90 87 31 |         if_ae   sub     hpar3, #1
2f53c                 | 
2f53c     40 09 90 FE |                 loc     pa, #mouse_limits
2f540     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2f544                 | 
2f544                 |                 ' load xacc,yacc,zacc
2f544     28 04 64 FD |                 setq    #3-1
2f548     80 87 07 FB |                 rdlong  hr1,ptrb
2f54c                 |                 ' load limits and outptr
2f54c     28 04 64 FD |                 setq    #3-1
2f550     F6 73 03 FB |                 rdlong  htmp1,pa
2f554                 | 
2f554     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2f558     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2f55c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2f560     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2f564     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2f568     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2f56c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2f570     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2f574                 |               
2f574                 | 
2f574     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2f578     07 70 67 F7 |                 signx   htmp, #7
2f57c     B8 87 03 F1 |                 add     hr1,htmp
2f580     00 72 0F F2 |                 cmp     htmp1,#0 wz
2f584     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2f588     00 86 47 53 |         if_ne   fges    hr1,#0
2f58c                 | 
2f58c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2f590     07 70 67 F7 |                 signx   htmp, #7
2f594     B8 89 03 F1 |                 add     hr2,htmp
2f598     00 74 0F F2 |                 cmp     htmp2,#0 wz
2f59c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2f5a0     00 88 47 53 |         if_ne   fges    hr2,#0
2f5a4                 |                 
2f5a4                 | 
2f5a4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2f5a8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2f5ac     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2f5b0     B8 8B 03 A1 |         if_z    add     hr3,htmp
2f5b4                 | 
2f5b4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2f5b8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2f5bc                 | 
2f5bc                 |                 ' write back accumulators
2f5bc     28 04 64 FD |                 setq    #3-1
2f5c0     80 87 67 FC |                 wrlong  hr1,ptrb
2f5c4                 |                 ' if outptr set, write X/Y words
2f5c4     00 76 0F F2 |                 cmp htmp3,#0                    wz
2f5c8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2f5cc     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2f5d0     2D 00 64 FD |                 ret
2f5d4                 | end
2f5d4                 | 
2f5d4                 | '------------------------------------------------------------------------------
2f5d4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2f5d4                 | '------------------------------------------------------------------------------
2f5d4                 | ' On entry:
2f5d4                 | ' On exit:
2f5d4                 | '------------------------------------------------------------------------------
2f5d4                 | if _HAVE_GAMEPAD
2f5d4                 | hget_gp_in_report
2f5d4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2f5d8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2f5dc                 | 
2f5dc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2f5e0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2f5e4     00 90 E3 F8 |                 getbyte hpar3
2f5e8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2f5ec     CF 02 A0 FD |                 call    #do_int_in
2f5f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2f5f4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2f5f8                 | 
2f5f8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2f5fc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2f600                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2f600                 | 
2f600     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2f604     00 70 E3 F8 |                 getbyte htmp                            ' |
2f608     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2f60c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2f610     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2f614     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2f618     B8 01 C0 F8 |                 setbyte htmp                            ' |
2f61c                 | 
2f61c                 | ' Note: the following code compares the current and previous reports
2f61c                 | ' and process the data if there are changes to ease the debug output.
2f61c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2f61c                 | ' gpPreReport buffer.
2f61c                 | 
2f61c                 |                 ' ----- start of block to remove
2f61c                 |                 {
2f61c                 |                 }
2f61c                 |                 ' ----- end of block to remove
2f61c     F4 04 90 FE |                 loc pa,#hpad_translate
2f620     2A EC 63 FD |                 push pa
2f624                 | 
2f624                 |                 ' FALL THROUGH !!!!
2f624                 | 
2f624                 | '------------------------------------------------------------------------------
2f624                 | ' Decode controller report
2f624                 | '------------------------------------------------------------------------------
2f624                 | hid_decode
2f624                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2f624     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2f628     00 04 00 FF 
2f62c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2f630                 | 
2f630     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2f634                 | 
2f634     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2f638     00 2A E3 F8 |                 getbyte hidr_type
2f63c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2f640     34 02 90 AD |         if_z    jmp     #hpad_xinput
2f644     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2f648     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2f64c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2f650     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2f654     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2f658                 |                 
2f658                 | 
2f658                 | '------------------------------------------------------------------------------
2f658                 | ' Handle HID controller (or mouse now
2f658                 | ' On entry:
2f658                 | '   ptrb - controller report
2f658                 | '------------------------------------------------------------------------------
2f658                 | hpad_hid
2f658     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2f65c     F7 F1 03 F6 |                 mov     ptra, pb
2f660     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2f664     00 EC 03 F6 |                 mov     pa, 0-0
2f668                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2f668     19 2A 3B FF 
2f66c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2f670                 | 
2f670                 | .next
2f670     00 EC 5F F2 |                 cmps    pa, #0      wcz
2f674     2D 00 7C ED |         if_be   ret     wcz
2f678                 | 
2f678     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2f67c     01 EC 87 F1 |                 sub     pa, #1
2f680     00 8E 07 F6 |                 mov     hpar2, #0
2f684                 | 
2f684     C6 71 03 F6 |                 mov     htmp, hpar1
2f688     03 70 07 F5 |                 and     htmp, #$03
2f68c     01 70 0F F2 |                 cmp     htmp, #1    wz
2f690     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2f694     07 8E 67 A7 |         if_z    signx   hpar2,#7
2f698     01 EC 87 A1 |         if_z    sub     pa, #1
2f69c     02 70 0F F2 |                 cmp     htmp, #2    wz
2f6a0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2f6a4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2f6a8     02 EC 87 A1 |         if_z    sub     pa, #2
2f6ac     03 70 0F F2 |                 cmp     htmp, #3    wz
2f6b0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2f6b4     04 EC 87 A1 |         if_z    sub     pa, #4
2f6b8                 | 
2f6b8     FC 8C 07 F5 |                 and     hpar1, #$FC
2f6bc                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2f6bc                 | 
2f6bc     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2f6c0     0C 01 90 AD |         if_z    jmp     #.report_id
2f6c4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2f6c8     24 01 90 AD |         if_z    jmp     #.usage_page
2f6cc     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2f6d0     2C 01 90 AD |         if_z    jmp     #.usage
2f6d4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2f6d8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2f6dc     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2f6e0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2f6e4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2f6e8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2f6ec     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2f6f0     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2f6f4     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2f6f8     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2f6fc     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2f700     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2f704     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2f708     64 FF 9F 5D |         if_nz   jmp     #.next
2f70c                 | 
2f70c     D8 1D A7 FB |                 tjf     hidr_state,#.next
2f710                 | 
2f710     03 8E 07 F5 |                 and     hpar2, #$03
2f714     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2f718     18 00 90 5D |         if_nz   jmp     #.skip
2f71c                 | 
2f71c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2f720     20 00 90 AD |         if_z    jmp     #.axes
2f724     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2f728     5C 00 90 AD |         if_z    jmp     #.hats
2f72c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2f730     70 00 90 AD |         if_z    jmp     #.buttons
2f734                 | .skip
2f734     8F 71 03 F6 |                 mov     htmp, hidr_size
2f738     90 71 03 FA |                 mul     htmp, hidr_count
2f73c     B8 23 03 F1 |                 add     hidr_offset, htmp
2f740     2C FF 9F FD |                 jmp     #.next
2f744                 | .axes
2f744                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2f744     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2f748     90 87 03 F6 |                 mov     hr1, hidr_count
2f74c                 | .l1
2f74c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2f750     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2f754     04 03 B0 FD |                 call    #hpad_getbits
2f758     64 03 B0 FD |                 call    #hpad_normalize
2f75c     06 84 1F F2 |                 cmp     hr0, #6         wcz
2f760     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2f764     00 88 43 C8 |         if_b    getnib  hr2
2f768     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2f76c     5F 01 20 C9 |         if_b    setword retval
2f770     01 84 07 C1 |         if_b    add     hr0, #1
2f774     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2f778     F4 87 6F FB |                 djnz    hr1, #.l1
2f77c                 | 
2f77c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2f780     01 1C 07 F6 |                 mov     hidr_state, #1
2f784     E8 FE 9F FD |                 jmp     #.next
2f788                 | .hats
2f788                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2f788     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2f78c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2f790     C8 02 B0 FD |                 call    #hpad_getbits
2f794     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2f798     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2f79c     01 1C 07 F6 |                 mov     hidr_state, #1
2f7a0     90 FF 9F FD |                 jmp     #.skip
2f7a4                 | .buttons
2f7a4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2f7a4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2f7a8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2f7ac     90 8F 03 FA |                 mul     hpar2, hidr_count
2f7b0     A8 02 B0 FD |                 call    #hpad_getbits
2f7b4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2f7b8     B8 BF 62 F0 |                 shl     retval, htmp
2f7bc     5F 17 43 F5 |                 or      hidr_buttons, retval
2f7c0     90 71 03 F1 |                 add     htmp, hidr_count
2f7c4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2f7c8     01 1C 07 F6 |                 mov     hidr_state, #1
2f7cc     64 FF 9F FD |                 jmp     #.skip
2f7d0                 | .report_id
2f7d0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2f7d4     2D 00 7C 5D |         if_nz   ret     wcz
2f7d8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2f7dc     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2f7e0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2f7e4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2f7e8     01 F2 87 51 |         if_nz   sub     ptrb,#1
2f7ec     80 FE 9F FD |                 jmp     #.next
2f7f0                 | .usage_page
2f7f0     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2f7f4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2f7f8     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2f7fc     70 FE 9F FD |                 jmp     #.next
2f800                 | .usage
2f800     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2f804     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2f808     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2f80c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2f810     5C FE 9F AD |         if_z    jmp     #.next
2f814     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2f818     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2f81c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2f820     4C FE 9F AD |         if_z    jmp     #.next
2f824     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2f828     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2f82c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2f830     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2f834     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2f838     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2f83c     10 00 90 AD |         if_z    jmp     #.usage_axis
2f840     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2f844     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2f848     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2f84c     20 FE 9F FD |                 jmp     #.next
2f850                 | .usage_axis
2f850     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2f854     18 FE 9F CD |         if_b    jmp     #.next
2f858     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2f85c     C7 01 00 F8 |                 setnib  hpar2
2f860                 | 
2f860     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2f864     C7 8F C3 F9 |                 decod   hpar2
2f868     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2f86c                 | 
2f86c     01 24 07 F1 |                 add     hidr_usage_idx, #1
2f870     02 1C 07 F6 |                 mov     hidr_state, #2
2f874     F8 FD 9F FD |                 jmp     #.next
2f878                 | 
2f878                 | '------------------------------------------------------------------------------
2f878                 | ' Handle XInput controller
2f878                 | ' On entry:
2f878                 | '   ptrb - controller report
2f878                 | '------------------------------------------------------------------------------
2f878                 | '   Default implementation translates the report to a pseudo-defacto hid
2f878                 | '   standard and jumps to hpad_translate for actions.
2f878                 | '   Implementors may take specific actions for this kind of controller.
2f878                 | '------------------------------------------------------------------------------
2f878                 | hpad_xinput
2f878     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2f87c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2f880     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2f884     14 70 0F F2 |                 cmp     htmp, #$14      wz
2f888     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2f88c                 | 
2f88c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2f88c                 | 
2f88c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2f890     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2f894                 | 
2f894     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2f898     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2f89c     5F BF 22 F6 |                 not     retval
2f8a0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2f8a4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2f8a8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2f8ac     5F BF 22 F6 |                 not     retval
2f8b0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2f8b4                 | 
2f8b4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2f8b8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2f8bc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2f8c0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2f8c4     F8 01 B0 FD |                 call    #hpad_normalize
2f8c8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2f8cc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2f8d0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2f8d4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2f8d8     E4 01 B0 FD |                 call    #hpad_normalize
2f8dc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2f8e0                 | 
2f8e0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2f8e4     81 BF E6 FA |                 rdword  retval, ptrb[1]
2f8e8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2f8ec     00 16 47 F4 |                 bitc    hidr_buttons, #0
2f8f0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2f8f4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2f8f8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2f8fc     02 16 47 F4 |                 bitc    hidr_buttons, #2
2f900     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2f904     03 16 47 F4 |                 bitc    hidr_buttons, #3
2f908     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2f90c     04 16 47 F4 |                 bitc    hidr_buttons, #4
2f910     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2f914     05 16 47 F4 |                 bitc    hidr_buttons, #5
2f918     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2f91c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2f920     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2f924     09 16 47 F4 |                 bitc    hidr_buttons, #9
2f928     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2f92c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2f930     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2f934     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2f938     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2f93c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2f940                 | 
2f940     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2f944     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2f948     7A BB 7A FF 
2f94c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2f950     F9 FF 7F FF 
2f954     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2f958     B9 71 5F F9 |                 altgn   htmp, #htmp1
2f95c     00 70 43 F8 |                 getnib  htmp
2f960     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2f964                 | 
2f964     AC 01 90 FD |                 jmp     #hpad_translate
2f968                 | 
2f968                 | '------------------------------------------------------------------------------
2f968                 | ' Handle PS3 controller
2f968                 | ' On entry:
2f968                 | '   ptrb - controller report
2f968                 | '------------------------------------------------------------------------------
2f968                 | '   Default implementation translates the report to a pseudo-defacto hid
2f968                 | '   standard and jumps to hpad_translate for actions.
2f968                 | '   Implementors may take specific actions for this kind of controller.
2f968                 | '------------------------------------------------------------------------------
2f968                 | hpad_ps3
2f968     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2f96c     01 70 0F F2 |                 cmp     htmp, #$01      wz
2f970     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2f974                 | 
2f974                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2f974                 | 
2f974     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2f978     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2f97c     40 01 B0 FD |                 call    #hpad_normalize
2f980     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2f984     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2f988     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2f98c     30 01 B0 FD |                 call    #hpad_normalize
2f990     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2f994     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2f998     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2f99c     20 01 B0 FD |                 call    #hpad_normalize
2f9a0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2f9a4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2f9a8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2f9ac     10 01 B0 FD |                 call    #hpad_normalize
2f9b0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2f9b4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2f9b8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2f9bc                 | 
2f9bc     08 8C 07 F6 |                 mov     hpar1, #8
2f9c0     13 8E 07 F6 |                 mov     hpar2, #19
2f9c4     94 00 B0 FD |                 call    #hpad_getbits
2f9c8                 | 
2f9c8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2f9cc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2f9d0     00 16 47 F4 |                 bitc    hidr_buttons, #0
2f9d4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2f9d8     01 16 47 F4 |                 bitc    hidr_buttons, #1
2f9dc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2f9e0     02 16 47 F4 |                 bitc    hidr_buttons, #2
2f9e4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2f9e8     03 16 47 F4 |                 bitc    hidr_buttons, #3
2f9ec     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2f9f0     04 16 47 F4 |                 bitc    hidr_buttons, #4
2f9f4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2f9f8     05 16 47 F4 |                 bitc    hidr_buttons, #5
2f9fc     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2fa00     06 16 47 F4 |                 bitc    hidr_buttons, #6
2fa04     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2fa08     07 16 47 F4 |                 bitc    hidr_buttons, #7
2fa0c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2fa10     08 16 47 F4 |                 bitc    hidr_buttons, #8
2fa14     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2fa18     09 16 47 F4 |                 bitc    hidr_buttons, #9
2fa1c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2fa20     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2fa24     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2fa28     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2fa2c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2fa30     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2fa34                 | 
2fa34     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2fa38     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2fa3c     09 FA 79 FF 
2fa40     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2fa44     FF FA 7F FF 
2fa48     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2fa4c     B9 71 5F F9 |                 altgn   htmp, #htmp1
2fa50     00 70 43 F8 |                 getnib  htmp
2fa54     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2fa58                 | 
2fa58     B8 00 90 FD |                 jmp     #hpad_translate
2fa5c                 | 
2fa5c                 | '------------------------------------------------------------------------------
2fa5c                 | ' Read bits from report data buffer
2fa5c                 | '------------------------------------------------------------------------------
2fa5c                 | ' On entry:
2fa5c                 | '   PTRB - report buffer
2fa5c                 | '   hpar1 - start bit
2fa5c                 | '   hpar2 - number of bits
2fa5c                 | ' On exit:
2fa5c                 | '   retval - bits
2fa5c                 | '------------------------------------------------------------------------------
2fa5c                 | hpad_getbits
2fa5c     C6 71 03 F6 |                 mov     htmp, hpar1
2fa60     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2fa64     F9 71 03 F1 |                 add     htmp, ptrb
2fa68     B8 BF 02 FB |                 rdlong  retval, htmp
2fa6c                 | 
2fa6c     C6 73 03 F6 |                 mov     htmp1, hpar1
2fa70     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2fa74     B9 BF 42 F0 |                 shr     retval, htmp1
2fa78                 | 
2fa78     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2fa7c     10 00 90 1D |         if_a    jmp     #.l1
2fa80                 | 
2fa80     C7 8F C3 F9 |                 decod   hpar2
2fa84     01 8E 87 F1 |                 sub     hpar2, #1
2fa88     C7 BF 02 F5 |                 and     retval, hpar2
2fa8c     2D 00 64 FD |                 ret
2fa90                 | .l1
2fa90     FF 7F 00 FF 
2fa94     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2fa98     03 70 07 F1 |                 add     htmp, #3
2fa9c     B8 75 03 FB |                 rdlong  htmp2, htmp
2faa0     18 8E 87 F1 |                 sub     hpar2, #24
2faa4     C7 8F C3 F9 |                 decod   hpar2
2faa8     01 8E 87 F1 |                 sub     hpar2, #1
2faac     B9 75 43 F0 |                 shr     htmp2, htmp1
2fab0     C7 75 03 F5 |                 and     htmp2, hpar2
2fab4     18 74 67 F0 |                 shl     htmp2, #24
2fab8     BA BF 42 F5 |                 or      retval, htmp2
2fabc     2D 00 64 FD |                 ret
2fac0                 | 
2fac0                 | '------------------------------------------------------------------------------
2fac0                 | ' Normalize value to signed word (-32768 / 32767)
2fac0                 | '------------------------------------------------------------------------------
2fac0                 | ' On entry:
2fac0                 | '   retval - value to normalize
2fac0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2fac0                 | '   - or -
2fac0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2fac0                 | '   hidr_size - value bits length
2fac0                 | ' On exit:
2fac0                 | '   retval - normalized value
2fac0                 | '------------------------------------------------------------------------------
2fac0                 | hpad_normalize
2fac0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2fac4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2fac8     2D 00 64 AD |         if_z    ret
2facc     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2fad0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2fad4     0F 72 77 F7 |                 signx   htmp1, #15      wc
2fad8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2fadc     00 BE 66 C7 |         if_c    signx   retval, #0-0
2fae0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2fae4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2fae8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2faec     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2faf0     B8 71 53 F6 |                 abs     htmp            wc
2faf4     1F BE 0E F4 |                 testb   retval, #31     wz
2faf8     5F BF 42 F6 |                 abs     retval
2fafc     B8 BF 12 FD |                 qdiv    retval, htmp
2fb00     18 BE 62 FD |                 getqx   retval
2fb04     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2fb08     C0 FF 7F FF 
2fb0c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2fb10     2D 00 64 FD |                 ret
2fb14                 | 
2fb14                 | '------------------------------------------------------------------------------
2fb14                 | ' Perform controller actions
2fb14                 | ' On entry:
2fb14                 | '    hidr_id        report id
2fb14                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2fb14                 | '                      X = hidr_axis+0, #0
2fb14                 | '                      Y = hidr_axis+0, #1
2fb14                 | '                      Z = hidr_axis+1, #0
2fb14                 | '                     RX = hidr_axis+1, #1
2fb14                 | '                     RY = hidr_axis+2, #0
2fb14                 | '                     RZ = hidr_axis+2, #1
2fb14                 | '    hidr_buttons   buttons state (bits 0 to 31)
2fb14                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2fb14                 | '
2fb14                 | '                     -------3 -------2 -------1 -------0 byte
2fb14                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2fb14                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2fb14                 | '                                zyx||| |||||||| ++++++++ n. buttons
2fb14                 | '                                |||||| ||||++++--------- n. axes
2fb14                 | '                                |||||| ++++------------- n. hats
2fb14                 | '                                ++++++------------------ valid axes
2fb14                 | '------------------------------------------------------------------------------
2fb14                 | hpad_translate
2fb14                 | 
2fb14                 | 
2fb14                 |         if HAVE_HIDPAD
2fb14     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2fb18     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2fb1c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2fb20     01 70 E7 F2 |                 cmpsub  htmp,#1
2fb24     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2fb28     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2fb2c     2D 00 7C 3D |         if_ae   ret     wcz
2fb30     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2fb34     B8 F3 03 F1 |                 add     ptrb,htmp
2fb38     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2fb3c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2fb40     28 0C 64 FD |                 setq    #7-1
2fb44     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2fb48                 |         end
2fb48                 | 
2fb48                 | 
2fb48                 |         if EMUPAD_MAX_PLAYER > 0
2fb48                 | .emupad_no_hat
2fb48                 |         if EMUPAD_BT0_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT1_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT2_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT3_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT4_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT5_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT6_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT7_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT8_BIT >= 0
2fb48                 |         end
2fb48                 |         if EMUPAD_BT9_BIT >= 0
2fb48                 |         end
2fb48                 | .emupad_slot_over
2fb48                 |         end
2fb48                 | 
2fb48                 |         if 0
2fb48                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2fb48                 | 
2fb48                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2fb48                 | 
2fb48                 |         end
2fb48     2D 00 64 FD |                 ret
2fb4c                 | end
2fb4c                 | 
2fb4c                 | if EMUPAD_MAX_PLAYER > 0
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' Clear EmuPad state
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | emupad_reset
2fb4c                 | 
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' Get EmuPad Player number for current device (into retval)
2fb4c                 | ' Z flag is also set if current device is valid
2fb4c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | emupad_getnum
2fb4c                 | .loop
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | emupad_discon
2fb4c                 | .loop         
2fb4c                 |         
2fb4c                 |         ' FALL THROUGH!!!
2fb4c                 | 
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' Update EmuPad reports (all of them...)
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | emupad_write_reports
2fb4c                 | .devloop
2fb4c                 | 
2fb4c                 | end
2fb4c                 | 
2fb4c                 | 
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | ' On entry:
2fb4c                 | ' On exit:
2fb4c                 | '------------------------------------------------------------------------------
2fb4c                 | hget_hub_status
2fb4c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2fb50     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2fb54     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2fb58     01 90 2F F9 |                 setword hpar3, #1, #1
2fb5c     CF 02 A0 FD |                 call    #do_int_in
2fb60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fb64     0C 00 90 AD |         if_z    jmp     #.data
2fb68     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2fb6c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2fb70     2D 00 64 FD |                 ret
2fb74                 | .data
2fb74     00 90 0F F2 |                 cmp     hpar3, #0               wz
2fb78     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2fb7c                 | 
2fb7c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2fb80     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2fb84     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2fb88     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2fb8c                 |                 debug(ubin_long(hub_status_chg))
2fb8c                 | 
2fb8c     01 5A 06 F6 |                 mov     hdev_port, #1
2fb90                 | .loop
2fb90     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2fb94     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2fb98     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2fb9c     F0 FF 9F 3D |         if_nc   jmp     #.loop
2fba0     2D 00 64 FD |                 ret
2fba4                 | 
2fba4                 | hub_port_handler
2fba4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2fba8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2fbac     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fbb0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fbb4     55 02 A0 FD |                 call    #control_read
2fbb8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2fbbc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2fbbc                 | 
2fbbc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2fbc0     50 01 90 5D |         if_x0   jmp     #.other
2fbc4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2fbc8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2fbcc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fbd0     A0 02 A0 FD |                 call    #control_write
2fbd4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2fbd8     7C 01 90 5D |         if_x0   jmp     #.disconnect
2fbdc     B0 99 02 F6 |                 mov     hctwait, _100ms_
2fbe0     EF 02 A0 FD |                 call    #poll_waitx
2fbe4                 | 
2fbe4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2fbe8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2fbec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fbf0     A0 02 A0 FD |                 call    #control_write
2fbf4                 | 
2fbf4     02 76 07 F6 |                 mov     htmp3, #2
2fbf8                 | .wait_reset
2fbf8     AC 99 02 F6 |                 mov     hctwait, _8ms_
2fbfc     EF 02 A0 FD |                 call    #poll_waitx
2fc00     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2fc04     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fc08     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fc0c     55 02 A0 FD |                 call    #control_read
2fc10     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2fc14     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2fc18     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2fc1c                 | 
2fc1c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2fc20     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2fc24     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fc28     A0 02 A0 FD |                 call    #control_write
2fc2c                 | 
2fc2c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2fc30                 | .wait_recover
2fc30     A7 99 02 F6 |                 mov     hctwait, _1ms_
2fc34     EF 02 A0 FD |                 call    #poll_waitx
2fc38     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2fc3c                 | 
2fc3c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2fc40     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2fc44     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2fc48                 | 
2fc48     00 08 00 FF 
2fc4c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2fc50     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2fc54     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2fc58     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2fc5c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2fc60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fc64     48 01 90 5D |         if_nz   jmp     #.done
2fc68                 | .get_dev_desc
2fc68     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2fc6c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2fc70     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2fc74     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2fc78     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2fc7c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2fc80     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2fc84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fc88     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2fc8c     AC 99 02 F6 |                 mov     hctwait, _8ms_
2fc90     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2fc94     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2fc98     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2fc9c     BE 00 A0 FD |                 call    #calc_crc5
2fca0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2fca4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2fca8     F7 AD C2 FA |                 rdbyte  total_data, pb
2fcac     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2fcb0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2fcb4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fcb8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2fcbc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2fcc0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2fcc4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2fcc4     9F 99 02 F6 |                 mov     hctwait, _500us_
2fcc8     EF 02 A0 FD |                 call    #poll_waitx
2fccc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2fcd0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2fcd4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2fcd8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2fcdc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2fce0     CC 00 90 5D |         if_nz   jmp     #.done
2fce4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2fce8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2fcec     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2fcf0     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2fcf4     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2fcf8     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2fcfc     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2fd00     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2fd04     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2fd08     A4 00 90 CD |         if_b    jmp     #.done
2fd0c     6C F0 BF FD |                 call    #hparse_con_desc
2fd10     9C 00 90 FD |                 jmp     #.done
2fd14                 | 
2fd14                 | .other
2fd14     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2fd18     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2fd1c     28 00 90 AD |         if_x1   jmp     #.reset_feature
2fd20     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2fd24     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2fd28     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2fd2c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2fd30     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2fd34     10 00 90 AD |         if_x1   jmp     #.reset_feature
2fd38     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2fd3c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2fd40     04 00 90 AD |         if_x1   jmp     #.reset_feature
2fd44     68 00 90 FD |                 jmp     #.done
2fd48                 | .reset_feature
2fd48     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2fd4c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fd50     A0 02 A0 FD |                 call    #control_write
2fd54     58 00 90 FD |                 jmp     #.done
2fd58                 | .disconnect
2fd58                 | 
2fd58     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2fd5c     00 70 E3 F8 |                 getbyte htmp
2fd60     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2fd64     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2fd68     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2fd6c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2fd70     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2fd74     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2fd78                 |         if EMUPAD_MAX_PLAYER > 0
2fd78                 |         end
2fd78                 |         if HAVE_MOUSE
2fd78     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2fd7c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2fd80     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2fd84                 |         end
2fd84                 |         if HAVE_HIDPAD
2fd84     14 0A F0 FE |                 loc ptrb,#hidpad_report
2fd88     2D 71 03 F6 |                 mov htmp,hdev_port
2fd8c     01 70 E7 F2 |                 cmpsub htmp,#1
2fd90     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2fd94     B8 F3 03 F1 |                 add ptrb,htmp
2fd98     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2fd9c     80 01 6C FC |                 wrlong #0,ptrb
2fda0                 |         end
2fda0                 | 
2fda0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2fda4     00 00 C4 F8 |                 setbyte #0
2fda8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2fdac     00 00 04 F6 |                 mov     0-0, #0
2fdb0                 | 
2fdb0                 | .done
2fdb0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2fdb4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2fdb8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2fdbc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2fdc0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2fdc4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2fdc8                 | 
2fdc8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2fdcc     27 EF 03 F6 |                 mov     pb, urx_buff_p
2fdd0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2fdd4     55 02 A0 FD |                 call    #control_read
2fdd8     00 69 06 FB |                 rdlong  hub_port_status, ptra
2fddc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2fddc     2D 00 64 FD |                 ret
2fde0                 | 
2fde0                 | '------------------------------------------------------------------------------
2fde0                 | ' Partially populated SETUP packets
2fde0                 | '------------------------------------------------------------------------------
2fde0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2fde1     06          |                 byte    REQ_GET_DESC
2fde2     00 01       |                 word    TYPE_DEVICE << 8
2fde4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fde6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fde8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2fde9     06          |                 byte    REQ_GET_DESC
2fdea     00 02       |                 word    TYPE_CONFIG << 8
2fdec     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fdee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fdf0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2fdf1     09          |                 byte    REQ_SET_CONFIG
2fdf2     00 00       |                 word    0       ' Configuration value
2fdf4     00 00       |                 word    0       ' Zero
2fdf6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2fdf8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2fdf9     05          |                 byte    REQ_SET_ADDR
2fdfa     00 00       |                 word    0       ' Zero
2fdfc     00 00       |                 word    0       ' Zero
2fdfe     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2fe00                 | '------------------------------------------------------------------------------
2fe00                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2fe00                 | ' wValue field dictates which protocol should be used.
2fe00                 | '
2fe00                 | ' When initialized, all devices default to report protocol. However the host
2fe00                 | ' should not make any assumptions about the device state and should set the
2fe00                 | ' desired protocol whenever initializing a device.
2fe00                 | '------------------------------------------------------------------------------
2fe00     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2fe01     0B          |                 byte    HID_SET_PROTO
2fe02     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2fe04                 |                                                 ' (HID 1.11 Section 7.2.6).
2fe04     00 00       |                 word    0               ' Interface index number.
2fe06     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2fe08                 | '------------------------------------------------------------------------------
2fe08     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2fe09     0A          |                 byte    HID_SET_IDLE
2fe0a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2fe0c                 |                                         ' reporting until a change is detected in the report data
2fe0c                 | 
2fe0c                 |                                         ' (HID 1.11 Section 7.2.4).
2fe0c     00 00       |                 word    0       ' Interface index number.
2fe0e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2fe10     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2fe11     09          |                 byte    HID_SET_REPORT
2fe12     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2fe14                 |                                         ' (HID 1.11 Section 7.2.2).
2fe14     00 00       |                 word    0       ' Interface index number.
2fe16     00 00       |                 word    0       ' Size of the report, in bytes.
2fe18     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2fe19     06          |                 byte    REQ_GET_DESC
2fe1a     00 22       |                 word    TYPE_REPORT << 8
2fe1c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fe1e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fe20                 | '------------------------------------------------------------------------------
2fe20     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2fe21     06          |                 byte    REQ_GET_DESC
2fe22     00 29       |                 word    TYPE_HUB << 8
2fe24     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2fe26     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fe28     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2fe29     03          |                 byte    REQ_SET_FEATURE
2fe2a     00 00       |                 word    0       ' port power
2fe2c     01 00       |                 word    1       ' Port index number (1+)
2fe2e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fe30     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2fe31     01          |                 byte    REQ_CLEAR_FEATURE
2fe32     00 00       |                 word    0       ' port power
2fe34     01 00       |                 word    1       ' Port index number (1+)
2fe36     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2fe38     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2fe39     00          |                 byte    REQ_GET_STATUS
2fe3a     00 00       |                 word    0
2fe3c     01 00       |                 word    1       ' Port index number (1+)
2fe3e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2fe40                 | '------------------------------------------------------------------------------
2fe40                 | if _HAVE_GAMEPAD
2fe40     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2fe44                 | ps3_command_buff
2fe44     00 00 00 00 
2fe48     00          |                 byte    $00, $00, $00, $00, $00
2fe49     00 00 00 00 
2fe4d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2fe4e     FF 27 10 00 
2fe52     32          |                 byte    $FF, $27, $10, $00, $32
2fe53     FF 27 10 00 
2fe57     32          |                 byte    $FF, $27, $10, $00, $32
2fe58     FF 27 10 00 
2fe5c     32          |                 byte    $FF, $27, $10, $00, $32
2fe5d     FF 27 10 00 
2fe61     32          |                 byte    $FF, $27, $10, $00, $32
2fe62     00 00 00 00 
2fe66     00          |                 byte    $00, $00, $00, $00, $00
2fe67     00 00 00 00 
2fe6b     00          |                 byte    $00, $00, $00, $00, $00
2fe6c     00 00 00 00 
2fe70     00          |                 byte    $00, $00, $00, $00, $00
2fe71     00 00 00    |                 byte    $00, $00, $00
2fe74                 | '------------------------------------------------------------------------------
2fe74     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2fe77                 |                                         ' 0x01 All blinking
2fe77                 |                                         ' 0x02 1 flashes, then on
2fe77                 |                                         ' 0x03 2 flashes, then on
2fe77                 |                                         ' 0x04 3 flashes, then on
2fe77                 |                                         ' 0x05 4 flashes, then on
2fe77                 |                                         ' 0x06 1 on
2fe77                 |                                         ' 0x07 2 on
2fe77                 |                                         ' 0x08 3 on
2fe77                 |                                         ' 0x09 4 on
2fe77                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2fe77                 |                                         ' 0x0B Blinking*
2fe77                 |                                         ' 0x0C Slow blinking*
2fe77                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2fe77     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2fe7a     00          |                 byte    $00             ' Left rumble
2fe7b     00          |                 byte    $00             ' Right rumble
2fe7c     00 00 00    |                 byte    $00, $00, $00
2fe7f     00          | end
2fe80                 | alignl
2fe80                 | 
2fe80                 | if HAVE_MOUSE
2fe80     00 00 00 00 
2fe84     00 00 00 00 | mouse_limits long 0[2]
2fe88     00 00 00 00 | mouse_outptr long 0
2fe8c                 | end
2fe8c                 | 
2fe8c                 | if KEYQUEUE_SIZE > 0
2fe8c     00          | keyq_head byte 0
2fe8d     00          | keyq_tail byte 0
2fe8e     00 00 00 00 
      ...             
3008a     00 00 00 00 
3008e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
30090                 | alignl
30090                 | end
30090                 | 
30090                 | if EMUPAD_MAX_PLAYER > 0
30090                 | emupad_rule_buffer
30090                 | if EMUPAD_BUILTIN_RULES
30090                 | file "padmap_builtin.dat"
30090                 | end
30090                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
30090                 | '' Default rule directly follows!
30090                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
30090                 | end
30090                 | 
30090                 | '------------------------------------------------------------------------------
30090                 | ' The USB data cache area gets zero-filled at every device disconnect
30090                 | '------------------------------------------------------------------------------
30090                 | usb_cache_start
30090                 | 
30090                 | ' HID descriptor and report buffers
30090                 | if !!OVERLAP_MEMORY
30090     00 00 00 00 
      ...             
30788     00 00 00 00 
3078c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
30790                 | end
30790     00 00 00 00 
30794     00 00 00 00 | hkbd_report     byte    0[8]
30798     00 00 00 00 | hkbd_led_rep    byte    0
3079c                 | alignl
3079c                 | 
3079c                 | if HAVE_HIDPAD
3079c     00 00 00 00 
      ...             
30858     00 00 00 00 
3085c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
30860                 | end
30860                 | 
30860                 | ' HUB descriptor
30860     00          | hub_descr       byte    0   ' bDescLength
30861     00          |                 byte    0   ' bDescriptorType
30862     00          |                 byte    0   ' bNbrPorts
30863     00 00       |                 word    0   ' wHubCharacteristics
30865     00          |                 byte    0   ' bPwrOn2PwrGood
30866     00          |                 byte    0   ' bHubContrCurrent
30867     00          |                 byte    0   ' DeviceRemoveable
30868     00          |                 byte    0   ' PortPwrCtrlMask
30869                 | 
30869                 | usb_cache_end
30869                 | 
30869                 | if HAVE_MOUSE
30869     00 00 00 00 | mouse_xacc      long 0
3086d     00 00 00 00 | mouse_yacc      long 0
30871     00 00 00 00 | mouse_zacc      long 0
30875     00          | mouse_bstate    byte 0
30876     00          | mouse_lpending  byte 0
30877     00          | mouse_rpending  byte 0
30878     00          | mouse_mpending  byte 0
30879     00          | mouse_lock      byte 0
3087a     00 00 00    |                 byte 0[3] ' padding
3087d                 | end
3087d                 | 
3087d     00 00 00 00 
      ...             
308f5     00 00 00 00 
308f9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
308fd     00 00 00 00 
30901     00 00 00 00 
30905     00 00 00 00 
30909     00 00 00 00 
3090d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3090f     00 00 00 00 
      ...             
30a07     00 00 00 00 
30a0b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
30a0f                 | 
30a0f     00          | driver_cog      byte    0                       ' Current driver cog + 1
30a10                 | 	alignl
30a10                 | _Audio093b_8_sc_spin2_dat_
30a10                 | 
30a10                 | audio       org     0
30a10                 | 
30a10     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
30a14     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
30a18     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
30a1c                 | 
30a1c     01 EC 63 FD |             cogid   pa                   ' compute cogid
30a20     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
30a24     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
30a28     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
30a2c                 | 
30a2c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
30a30     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
30a34     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
30a38     0F CA 05 FC |             wrpin   dac,#right
30a3c     0F BE 1C FC |             wxpin   #95,#right    
30a40     41 9C 64 FD |             dirh    #left addpins 1
30a44     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
30a48     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
30a4c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
30a50                 |             
30a50                 | '---------------------------------------------------------------------------------        
30a50                 | '----------------- The main loop -------------------------------------------------
30a50                 | '---------------------------------------------------------------------------------
30a50                 | 
30a50     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
30a54     10 00 90 CD |       if_c  jmp     #loop1
30a58                 |   
30a58     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
30a5c     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
30a60     B1 00 80 F1 |             sub     0-0,a40000000
30a64     FD A9 6D FB |             djnz    cn,#p402
30a68                 |     
30a68     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
30a6c     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
30a70     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
30a74     01 A8 05 C6 |     if_c    mov     cn,#1
30a78     B6 AA 39 F3 |             fle     ct,time3 wcz
30a7c     02 A8 05 C6 |     if_c    mov     cn,#2     
30a80     B7 AA 39 F3 |             fle     ct,time4 wcz
30a84     03 A8 05 C6 |     if_c    mov     cn,#3
30a88     B8 AA 39 F3 |             fle     ct,time5 wcz
30a8c     04 A8 05 C6 |     if_c    mov     cn,#4
30a90     B9 AA 39 F3 |             fle     ct,time6 wcz
30a94     05 A8 05 C6 |     if_c    mov     cn,#5
30a98     BA AA 39 F3 |             fle     ct,time7 wcz
30a9c     06 A8 05 C6 |     if_c    mov     cn,#6
30aa0     BB AA 39 F3 |             fle     ct,time8 wcz
30aa4     07 A8 05 C6 |     if_c    mov     cn,#7
30aa8                 | 
30aa8                 | 
30aa8                 | '----------------------------------------------------------------------------------
30aa8                 | '------------- Compute channel samples --------------------------------------------
30aa8                 | '----------------------------------------------------------------------------------
30aa8                 | 
30aa8                 | 
30aa8     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
30aac     05 78 65 F0 |             shl     channeladd,#5
30ab0     BC F0 03 F1 |             add     ptra,channeladd
30ab4                 | 
30ab4     28 0E 64 FD |             setq    #7                        ' read parameters
30ab8     00 8F 05 FB |             rdlong  pointer0,ptra
30abc                 | '            testb   command0,#29 wz
30abc                 | '    if_nz   jmp     #p408
30abc                 | '    	    getword envptr,command0,#0
30abc                 | '    	    getbyte envspeed,command0,#2
30abc                 | '    	    jmp     #p404                     'if envelope then no sample rate
30abc                 |     	    
30abc     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
30ac0     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
30ac4     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
30ac8     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
30acc     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
30ad0     00 7C 0D F2 |             cmp     qq,#0 wz                         
30ad4     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
30ad8     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
30adc                 |             
30adc     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
30ae0     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
30ae4     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
30ae8                 | 
30ae8                 | 
30ae8     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
30aec     C8 B0 39 F9 |             getword oldrs,sample0,#1
30af0     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
30af4     CC A2 31 F9 |     	    getword avol0,volpan0,#0
30af8     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
30afc     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
30b00                 | 
30b00     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
30b04     00 AC 01 F6 |             mov     dt0,0-0    
30b08     B3 AC 81 F1 |             sub     dt0,time0
30b0c                 |             
30b0c     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
30b10     CF 00 00 F1 |             add     0-0,afreq0  	
30b14                 | 
30b14     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
30b18     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
30b1c     08 8E 45 F0 |             shr     pointer0,#8
30b20                 |          
30b20     1F 92 0D F4 |             testb   sstart0,#31 wz            
30b24     01 8E 65 A0 |     if_z    shl     pointer0,#1        
30b28     1C 92 0D F4 |             testb   sstart0,#28 wz            
30b2c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
30b30                 |             
30b30     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
30b34     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
30b38     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
30b3c                 |             
30b3c     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
30b40     C9 7C 01 F1 |             add     qq,sstart0            
30b44                 | 
30b44                 | 
30b44                 | 
30b44     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
30b48     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
30b4c     04 01 B0 1D |     if_gt   call    #cache_read
30b50                 |          
30b50                 |          
30b50                 |  
30b50                 |          
30b50     1F 92 0D F4 |             testb   sstart0,#31 wz 
30b54     08 7E 65 50 |     if_nz   shl     spl,#8
30b58     08 8E 65 50 |     if_nz   shl     pointer0,#8
30b5c     07 8E 65 A0 |     if_z    shl     pointer0,#7
30b60     1C 92 0D F4 |             testb   sstart0,#28 wz            
30b64     01 8E 45 A0 |     if_z    shr     pointer0,#1    
30b68     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
30b6c                 |     
30b6c                 | 
30b6c     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
30b70     00 7E 01 F6 |             mov     spl,0-0
30b74                 |  
30b74     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
30b78     00 B2 01 F6 |             mov     ls0,0-0
30b7c     20 00 00 FF 
30b80     00 7C 05 F6 |             mov     qq,##16384
30b84     D2 7C 81 F1 |             sub     qq,apan0
30b88     BE 7E 31 FA |             scas    spl,qq
30b8c     00 B4 01 F6 |             mov     rs0, 0-0
30b90                 | 
30b90     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
30b94     DA B8 01 F1 |             add     rs,rs0
30b98     D7 B6 81 F1 |             sub     ls,oldls
30b9c     D9 B6 01 F1 |             add     ls,ls0
30ba0                 |    
30ba0     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
30ba4     D9 90 21 F9 |             setword sample0,ls0,#0
30ba8                 |             
30ba8     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
30bac     00 8E 05 A6 |     if_z    mov     pointer0, #0  
30bb0     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
30bb4     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
30bb8     04 00 00 AF 
30bbc     00 68 05 A1 |     if_z    add     time1,##2048
30bc0     B4 6A 01 A6 |     if_z    mov     time2,time1
30bc4     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
30bc8                 |             
30bc8     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
30bcc     00 8F 65 FC |             wrlong  pointer0,ptra
30bd0     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
30bd4                 |                       
30bd4     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
30bd8     FF 7B 25 A7 |     if_z    decmod  front, #511          
30bdc                 |          
30bdc     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
30be0     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
30be4     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
30be8     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
30bec                 | 	    
30bec                 | 		    
30bec     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
30bf0     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
30bf4     D8 BC 01 F6 |             mov     newsample, oldrs       
30bf8                 | 
30bf8     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
30bfc     D6 66 01 F1 |             add     time0,dt0    
30c00                 |                                      
30c00     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
30c04     60 FE 9F AD |     if_z    jmp     #loop1
30c08     D6 7C 01 F6 |             mov     qq,dt0
30c0c                 |   
30c0c     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
30c10     00 7A 9D F2 |             cmpr    front, #0-0 wcz
30c14     F4 FF 9F AD |     if_e    jmp     #p301    
30c18                 | 		
30c18     00 C2 0D F2 | 	    cmp     scbase,#0 wz
30c1c     20 00 90 AD |     if_z    jmp #p302	   
30c20                 |  
30c20                 |  
30c20     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
30c24     E2 C6 01 C6 |     if_c    mov scptr2,scptr
30c28     02 C6 65 C0 |     if_c    shl scptr2,#2
30c2c     E1 C6 01 C1 |     if_c    add scptr2,scbase     
30c30     60 C6 65 FC |             wrlong scptr2,#$60
30c34     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
30c38     01 00 00 CF 
30c3c     7F C4 05 C7 |     if_c    incmod scptr,##639
30c40                 | 			    
30c40     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
30c44     00 00 00 FF 
30c48     FF 7B 05 F7 |             incmod  front, ##511
30c4c     EF 7D 6D FB |             djnz    qq,#p301
30c50                 |             
30c50     FC FD 9F FD |             jmp     #loop            'loop
30c54                 | 
30c54                 | '----------------------------------------------------------------------------------
30c54                 | '------------- This is the end of the main loop -----------------------------------
30c54                 | '----------------------------------------------------------------------------------
30c54                 | 
30c54                 | '----------------------------------------------------------------------------------
30c54                 | '------------- PSRAM cache ----------- --------------------------------------------
30c54                 | '----------------------------------------------------------------------------------
30c54                 | 
30c54                 | ' There are 8 cache pointers for 8 channels
30c54                 | ' if 24 higher bits of address=cache, then ger a word from the cache
30c54                 | ' else load the cache from PSRAM, update the pointer, then read a sample
30c54                 | 
30c54                 | 
30c54     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
30c58                 |             
30c58     BE E8 01 F6 | 	    mov     addrhi,qq		
30c5c     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
30c60     E8 A8 95 F9 | 	    alts    cn,#cache1            
30c64     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
30c68     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
30c6c                 | 	
30c6c     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
30c70     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
30c74     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
30c78     08 E0 65 F0 | 	    shl     cmd,#8
30c7c     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
30c80     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
30c84     08 E2 65 F0 |             shl     hubaddr,#8                  '
30c88     E7 E2 01 F1 |             add     hubaddr,hubptr 
30c8c     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
30c90     28 04 64 FD |             setq    #2                          ' write 3 longs
30c94     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
30c98     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
30c9c     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
30ca0                 |             
30ca0                 | 	
30ca0     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
30ca4     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
30ca8     E7 7C 01 F1 | 	    add     qq,hubptr
30cac     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
30cb0     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
30cb4                 |           
30cb4                 | 
30cb4                 | '--------------------------------------------------------------------------
30cb4                 | '------ Interrupt service -------------------------------------------------
30cb4                 | '------ Output the sample, get the next one if exists ---------------------
30cb4                 | '--------------------------------------------------------------------------
30cb4                 | 
30cb4     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
30cb8     0F 88 25 FC |             wypin   rsample,#right       '4
30cbc     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
30cc0     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
30cc4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
30cc8     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
30ccc     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
30cd0                 |     
30cd0     F5 FF 3B FB |             reti1                        '17/19 
30cd4                 |           
30cd4                 | '---------------------------------------------------------------------------
30cd4                 | '-------- End of interrupt -------------------------------------------------
30cd4                 | '---------------------------------------------------------------------------    
30cd4                 | 
30cd4                 | 
30cd4                 | '---------------------------------------------------------------------------
30cd4                 | '------- Variables ---------------------------------------------------------
30cd4                 | '---------------------------------------------------------------------------
30cd4                 | 
30cd4                 | ' constants
30cd4                 | 
30cd4     00 00 00 40 | a40000000   long $40000000
30cd8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
30cdc                 | 
30cdc                 | ' Time variables
30cdc                 | 
30cdc     00 00 00 00 | time0       long 0    ' Global sample computing time
30ce0     01 00 00 00 | time1       long 1    ' Local channels time
30ce4     02 00 00 00 | time2       long 2
30ce8     03 00 00 00 | time3       long 3
30cec     04 00 00 00 | time4       long 4
30cf0     05 00 00 00 | time5       long 5
30cf4     06 00 00 00 | time6       long 6
30cf8     07 00 00 00 | time7       long 7
30cfc     08 00 00 00 | time8       long 8
30d00                 | 
30d00     00 00 00 00 | channeladd long 0
30d04                 | 
30d04     00 00 00 00 | front       long 0
30d08                 | 
30d08                 | ' temporary variables 
30d08     00 00 00 00 | qq          long 0
30d0c     00 00 00 00 | spl         long 0
30d10     00 00 00 00 | zero        long 0
30d14     00 00 00 00 | mailbox     long 0
30d18     00 00 00 00 | mailbox2 long 0
30d1c                 | 
30d1c                 | ' Interrupt ISR variables
30d1c                 | 
30d1c     00 00 00 00 | lsample     long 0
30d20     00 00 00 00 | rsample     long 0
30d24     00 00 00 00 | lsnext      long 0
30d28     00 00 00 00 | rsnext      long 0 
30d2c                 | 
30d2c                 | ' channel parameter block
30d2c                 | 
30d2c     00 00 00 00 | pointer0    long 0     
30d30     00 00 00 00 | sample0     long 0
30d34     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
30d38     00 00 00 00 | lstart0     long 0
30d3c     00 00 00 00 | lend0       long 0
30d40     00 00 00 00 | volpan0     long 0
30d44     00 00 00 00 | freqskip0   long 0
30d48     00 00 00 00 | command0    long 0
30d4c                 | 
30d4c     00 00 00 00 | afreq0      long 0
30d50     00 00 00 00 | askip0      long 0
30d54     00 00 00 00 | avol0       long 0
30d58     00 00 00 00 | apan0       long 0
30d5c                 | 
30d5c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
30d60     00 00 00 00 | cn          long 0
30d64     00 00 00 00 | ct          long 0
30d68     00 00 00 00 | dt0         long 0
30d6c                 | 
30d6c                 | ' Samples
30d6c     00 00 00 00 | oldls       long 0
30d70     00 00 00 00 | oldrs       long 0
30d74                 | 
30d74     00 00 00 00 | ls0         long 0
30d78     00 00 00 00 | rs0         long 0
30d7c                 | 
30d7c     00 00 00 00 | ls          long 0    
30d80     00 00 00 00 | rs          long 0
30d84                 | 
30d84     00 00 00 00 | oldsample   long 0
30d88     00 00 00 00 | newsample   long 0
30d8c                 | 
30d8c     00 00 00 00 | nrsample    long 0
30d90     00 00 00 00 | nlsample    long 0
30d94                 | 
30d94     00 00 00 00 | scbase long 0
30d98     00 00 00 00 | scptr long 0
30d9c     00 00 00 00 | scptr2 long 0
30da0     00 00 00 00 | scope long 0
30da4                 | 
30da4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
30da8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
30dac                 | 
30dac     00 18 07 00 | hubptr      long $71800
30db0     00 00 00 00 | cache1      long 0
30db4     00 00 00 00 | cache2      long 0
30db8     00 00 00 00 | cache3      long 0
30dbc     00 00 00 00 | cache4      long 0
30dc0     00 00 00 00 | cache5      long 0
30dc4     00 00 00 00 | cache6      long 0
30dc8     00 00 00 00 | cache7      long 0
30dcc     00 00 00 00 | cache8      long 0
30dd0                 | 
30dd0                 | 
30dd0     00 00 00 00 | cmd         long 0
30dd4     00 00 00 00 | hubaddr     long 0
30dd8     00 01 00 00 | count       long 256
30ddc     00 00 00 00 | addrlo long 0
30de0     00 00 00 00 | addrhi long 0
30de4     00 00 00 00 | pointer00 long 0
30de8     00 00 00 00 
30dec     00 00 00 00 | null  			long 	0,0           ' for channel reset
30df0                 | 	alignl
30df0                 | __system__dat_
30df0     00 00 00 00 
30df4     00 00 00 00 | 	byte	$00[8]
30df8     03 00 00 00 
30dfc     00 00 00 00 
30e00     00 00 00 00 
30e04     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e08     00 00 00 00 
      ...             
31094     00 00 00 00 
31098     00 00 00 00 | 	byte	$00[660]
3109c     00 00 50 06 | 	long	(101 {__system____root_opendir})<<20
310a0     00 00 60 06 | 	long	(102 {__system____root_closedir})<<20
310a4     00 00 70 06 | 	long	(103 {__system____root_readdir})<<20
310a8     00 00 80 06 | 	long	(104 {__system____root_stat})<<20
310ac     00 00 00 00 
310b0     00 00 00 00 
310b4     00 00 00 00 
310b8     00 00 00 00 
310bc     00 00 00 00 
310c0     00 00 00 00 
310c4     00 00 00 00 | 	byte	$00[28]
310c8     30 11 03 00 | 	long	@@@__system__dat_ + 832
310cc     33 11 03 00 | 	long	@@@__system__dat_ + 835
310d0     54 11 03 00 | 	long	@@@__system__dat_ + 868
310d4     6D 11 03 00 | 	long	@@@__system__dat_ + 893
310d8     88 11 03 00 | 	long	@@@__system__dat_ + 920
310dc     A2 11 03 00 | 	long	@@@__system__dat_ + 946
310e0     B2 11 03 00 | 	long	@@@__system__dat_ + 962
310e4     C4 11 03 00 | 	long	@@@__system__dat_ + 980
310e8     D6 11 03 00 | 	long	@@@__system__dat_ + 998
310ec     E8 11 03 00 | 	long	@@@__system__dat_ + 1016
310f0     F4 11 03 00 | 	long	@@@__system__dat_ + 1028
310f4     05 12 03 00 | 	long	@@@__system__dat_ + 1045
310f8     19 12 03 00 | 	long	@@@__system__dat_ + 1065
310fc     23 12 03 00 | 	long	@@@__system__dat_ + 1075
31100     33 12 03 00 | 	long	@@@__system__dat_ + 1091
31104     42 12 03 00 | 	long	@@@__system__dat_ + 1106
31108     58 12 03 00 | 	long	@@@__system__dat_ + 1128
3110c     71 12 03 00 | 	long	@@@__system__dat_ + 1153
31110     85 12 03 00 | 	long	@@@__system__dat_ + 1173
31114     93 12 03 00 | 	long	@@@__system__dat_ + 1187
31118     A7 12 03 00 | 	long	@@@__system__dat_ + 1207
3111c     B3 12 03 00 | 	long	@@@__system__dat_ + 1219
31120     C5 12 03 00 | 	long	@@@__system__dat_ + 1237
31124     DD 12 03 00 | 	long	@@@__system__dat_ + 1261
31128     EF 12 03 00 | 	long	@@@__system__dat_ + 1279
3112c     02 13 03 00 | 	long	@@@__system__dat_ + 1298
31130     4F 4B 00 4E 
31134     75 6D 65 72 
31138     69 63 61 6C 
3113c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
31140     75 6D 65 6E 
31144     74 20 6F 75 
31148     74 20 6F 66 
3114c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
31150     61 69 6E 00 
31154     52 65 73 75 
31158     6C 74 20 6E 
3115c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
31160     65 70 72 65 
31164     73 65 6E 74 
31168     61 62 6C 65 
3116c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
31170     65 67 61 6C 
31174     20 6D 75 6C 
31178     74 69 62 79 
3117c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
31180     65 71 75 65 
31184     6E 63 65 00 
31188     4E 6F 20 73 
3118c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
31190     66 69 6C 65 
31194     20 6F 72 20 
31198     64 69 72 65 
3119c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
311a0     79 00 42 61 
311a4     64 20 66 69 
311a8     6C 65 20 6E 
311ac     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
311b0     72 00 50 65 
311b4     72 6D 69 73 
311b8     73 69 6F 6E 
311bc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
311c0     69 65 64 00 
311c4     4E 6F 74 20 
311c8     65 6E 6F 75 
311cc     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
311d0     65 6D 6F 72 
311d4     79 00 54 65 
311d8     6D 70 6F 72 
311dc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
311e0     66 61 69 6C 
311e4     75 72 65 00 
311e8     46 69 6C 65 
311ec     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
311f0     73 74 73 00 
311f4     49 6E 76 61 
311f8     6C 69 64 20 
311fc     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
31200     6D 65 6E 74 
31204     00 54 6F 6F 
31208     20 6D 61 6E 
3120c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
31210     65 6E 20 66 
31214     69 6C 65 73 
31218     00 49 2F 4F 
3121c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
31220     6F 72 00 4E 
31224     6F 74 20 61 
31228     20 64 69 72 
3122c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
31230     72 79 00 49 
31234     73 20 61 20 
31238     64 69 72 65 
3123c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
31240     79 00 52 65 
31244     61 64 20 6F 
31248     6E 6C 79 20 
3124c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
31250     20 73 79 73 
31254     74 65 6D 00 
31258     46 75 6E 63 
3125c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
31260     20 6E 6F 74 
31264     20 69 6D 70 
31268     6C 65 6D 65 
3126c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
31270     00 44 69 72 
31274     65 63 74 6F 
31278     72 79 20 6E 
3127c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
31280     6D 70 74 79 
31284     00 4E 61 6D 
31288     65 20 74 6F 
3128c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
31290     6E 67 00 44 
31294     65 76 69 63 
31298     65 20 6E 6F 
3129c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
312a0     65 6B 61 62 
312a4     6C 65 00 42 
312a8     61 64 20 61 
312ac     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
312b0     73 73 00 42 
312b4     72 6F 6B 65 
312b8     6E 20 63 6F 
312bc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
312c0     74 69 6F 6E 
312c4     00 44 65 76 
312c8     69 63 65 20 
312cc     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
312d0     65 73 6F 75 
312d4     72 63 65 20 
312d8     62 75 73 79 
312dc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
312e0     73 73 20 64 
312e4     65 76 69 63 
312e8     65 20 6C 69 
312ec     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
312f0     6F 20 73 70 
312f4     61 63 65 20 
312f8     6F 6E 20 64 
312fc     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
31300     65 00 55 6E 
31304     6B 6E 6F 77 
31308     6E 20 65 72 
3130c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
31310     00 00 00 00 
31314     00 00 00 00 | 	byte	$00[8]
31318     05 00 00 00 
3131c     00 00 00 00 
31320     00 00 00 00 
31324     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31328     00 00 00 00 | 	byte	$00, $00, $00, $00
3132c     00 00 D0 07 | 	long	(125 {__system___tx})<<20
31330     00 00 E0 07 | 	long	(126 {__system___rx})<<20
31334     00 00 00 00 | 	byte	$00, $00, $00, $00
31338     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0573})<<20
3133c     00 00 00 08 | 	long	(128 {__system____dummy_flush_0574})<<20
31340     00 00 00 00 
31344     00 00 00 00 | 	byte	$00[8]
31348     01 00 00 00 
3134c     06 00 00 00 
31350     00 00 00 00 
31354     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31358     00 00 00 00 
3135c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31360     00 00 D0 07 | 	long	(125 {__system___tx})<<20
31364     00 00 E0 07 | 	long	(126 {__system___rx})<<20
31368     00 00 00 00 | 	byte	$00, $00, $00, $00
3136c     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0573})<<20
31370     00 00 00 08 | 	long	(128 {__system____dummy_flush_0574})<<20
31374     00 00 00 00 
31378     00 00 00 00 | 	byte	$00[8]
3137c     01 00 00 00 
31380     06 00 00 00 
31384     00 00 00 00 
31388     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3138c     00 00 00 00 
31390     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31394     00 00 D0 07 | 	long	(125 {__system___tx})<<20
31398     00 00 E0 07 | 	long	(126 {__system___rx})<<20
3139c     00 00 00 00 | 	byte	$00, $00, $00, $00
313a0     00 00 F0 07 | 	long	(127 {__system___rxtxioctl_0573})<<20
313a4     00 00 00 08 | 	long	(128 {__system____dummy_flush_0574})<<20
313a8     00 00 00 00 
      ...             
31518     00 00 00 00 
3151c     00 00 00 00 | 	byte	$00[376]
31520     24 15 03 00 | 	long	@@@__system__dat_ + 1844
31524     00 00 00 00 
31528     00 00 00 00 
3152c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31530                 | 	alignl
31530                 | _fatfs_cc_dat_
31530     C7 00 FC 00 
31534     E9 00 E2 00 
31538     E4 00 E0 00 
3153c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
31540     EA 00 EB 00 
31544     E8 00 EF 00 
31548     EE 00 EC 00 
3154c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
31550     C9 00 E6 00 
31554     C6 00 F4 00 
31558     F6 00 F2 00 
3155c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
31560     FF 00 D6 00 
31564     DC 00 F8 00 
31568     A3 00 D8 00 
3156c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
31570     E1 00 ED 00 
31574     F3 00 FA 00 
31578     F1 00 D1 00 
3157c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
31580     BF 00 AE 00 
31584     AC 00 BD 00 
31588     BC 00 A1 00 
3158c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
31590     91 25 92 25 
31594     93 25 02 25 
31598     24 25 C1 00 
3159c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
315a0     A9 00 63 25 
315a4     51 25 57 25 
315a8     5D 25 A2 00 
315ac     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
315b0     14 25 34 25 
315b4     2C 25 1C 25 
315b8     00 25 3C 25 
315bc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
315c0     5A 25 54 25 
315c4     69 25 66 25 
315c8     60 25 50 25 
315cc     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
315d0     F0 00 D0 00 
315d4     CA 00 CB 00 
315d8     C8 00 31 01 
315dc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
315e0     CF 00 18 25 
315e4     0C 25 88 25 
315e8     84 25 A6 00 
315ec     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
315f0     D3 00 DF 00 
315f4     D4 00 D2 00 
315f8     F5 00 D5 00 
315fc     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
31600     DE 00 DA 00 
31604     DB 00 D9 00 
31608     FD 00 DD 00 
3160c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
31610     AD 00 B1 00 
31614     17 20 BE 00 
31618     B6 00 A7 00 
3161c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
31620     B0 00 A8 00 
31624     B7 00 B9 00 
31628     B3 00 B2 00 
3162c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
31630     61 00 1A 03 
31634     E0 00 17 03 
31638     F8 00 07 03 
3163c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
31640     78 01 00 01 
31644     30 01 32 01 
31648     06 01 39 01 
3164c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
31650     2E 01 79 01 
31654     06 01 80 01 
31658     4D 00 43 02 
3165c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
31660     82 01 84 01 
31664     84 01 86 01 
31668     87 01 87 01 
3166c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
31670     8B 01 8B 01 
31674     8D 01 8E 01 
31678     8F 01 90 01 
3167c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
31680     93 01 94 01 
31684     F6 01 96 01 
31688     97 01 98 01 
3168c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
31690     9B 01 9C 01 
31694     9D 01 20 02 
31698     9F 01 A0 01 
3169c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
316a0     A2 01 A4 01 
316a4     A4 01 A6 01 
316a8     A7 01 A7 01 
316ac     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
316b0     AB 01 AC 01 
316b4     AC 01 AE 01 
316b8     AF 01 AF 01 
316bc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
316c0     B3 01 B3 01 
316c4     B5 01 B5 01 
316c8     B7 01 B8 01 
316cc     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
316d0     BB 01 BC 01 
316d4     BC 01 BE 01 
316d8     F7 01 C0 01 
316dc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
316e0     C3 01 C4 01 
316e4     C5 01 C4 01 
316e8     C7 01 C8 01 
316ec     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
316f0     CB 01 CA 01 
316f4     CD 01 10 01 
316f8     DD 01 01 00 
316fc     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
31700     12 01 F3 01 
31704     03 00 F1 01 
31708     F4 01 F4 01 
3170c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
31710     22 02 12 01 
31714     3A 02 09 00 
31718     65 2C 3B 02 
3171c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
31720     66 2C 3F 02 
31724     40 02 41 02 
31728     41 02 46 02 
3172c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
31730     40 00 81 01 
31734     86 01 55 02 
31738     89 01 8A 01 
3173c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
31740     5A 02 90 01 
31744     5C 02 5D 02 
31748     5E 02 5F 02 
3174c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
31750     62 02 94 01 
31754     64 02 65 02 
31758     66 02 67 02 
3175c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
31760     6A 02 62 2C 
31764     6C 02 6D 02 
31768     6E 02 9C 01 
3176c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
31770     9D 01 73 02 
31774     74 02 9F 01 
31778     76 02 77 02 
3177c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
31780     7A 02 7B 02 
31784     7C 02 64 2C 
31788     7E 02 7F 02 
3178c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
31790     82 02 A9 01 
31794     84 02 85 02 
31798     86 02 87 02 
3179c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
317a0     B1 01 B2 01 
317a4     45 02 8D 02 
317a8     8E 02 8F 02 
317ac     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
317b0     B7 01 7B 03 
317b4     03 00 FD 03 
317b8     FE 03 FF 03 
317bc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
317c0     86 03 88 03 
317c4     89 03 8A 03 
317c8     B1 03 11 03 
317cc     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
317d0     A3 03 A3 03 
317d4     C4 03 08 03 
317d8     CC 03 03 00 
317dc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
317e0     8F 03 D8 03 
317e4     18 01 F2 03 
317e8     0A 00 F9 03 
317ec     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
317f0     F5 03 F6 03 
317f4     F7 03 F7 03 
317f8     F9 03 FA 03 
317fc     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
31800     20 03 50 04 
31804     10 07 60 04 
31808     22 01 8A 04 
3180c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
31810     0E 01 CF 04 
31814     01 00 C0 04 
31818     D0 04 44 01 
3181c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
31820     00 00 7D 1D 
31824     01 00 63 2C 
31828     00 1E 96 01 
3182c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
31830     00 1F 08 06 
31834     10 1F 06 06 
31838     20 1F 08 06 
3183c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
31840     40 1F 06 06 
31844     51 1F 07 00 
31848     59 1F 52 1F 
3184c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
31850     5D 1F 56 1F 
31854     5F 1F 60 1F 
31858     08 06 70 1F 
3185c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
31860     BB 1F C8 1F 
31864     C9 1F CA 1F 
31868     CB 1F DA 1F 
3186c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
31870     F9 1F EA 1F 
31874     EB 1F FA 1F 
31878     FB 1F 80 1F 
3187c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
31880     08 06 A0 1F 
31884     08 06 B0 1F 
31888     04 00 B8 1F 
3188c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
31890     BC 1F CC 1F 
31894     01 00 C3 1F 
31898     D0 1F 02 06 
3189c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
318a0     E5 1F 01 00 
318a4     EC 1F F3 1F 
318a8     01 00 FC 1F 
318ac     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
318b0     32 21 70 21 
318b4     10 02 84 21 
318b8     01 00 83 21 
318bc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
318c0     30 2C 2F 04 
318c4     60 2C 02 01 
318c8     67 2C 06 01 
318cc     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
318d0     80 2C 64 01 
318d4     00 2D 26 08 
318d8     41 FF 1A 03 
318dc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
318e0     05 07 09 0E 
318e4     10 12 14 16 
318e8     18 1C 1E 43 
318ec     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
318f0     41 41 43 45 
318f4     45 45 49 49 
318f8     49 41 41 45 
318fc     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
31900     4F 55 55 59 
31904     4F 55 4F 9C 
31908     4F 9E 9F 41 
3190c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
31910     A5 A6 A7 A8 
31914     A9 AA AB AC 
31918     AD AE AF B0 
3191c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
31920     41 41 41 B8 
31924     B9 BA BB BC 
31928     BD BE BF C0 
3192c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
31930     C5 41 41 C8 
31934     C9 CA CB CC 
31938     CD CE CF D1 
3193c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
31940     49 49 49 49 
31944     D9 DA DB DC 
31948     DD 49 DF 4F 
3194c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
31950     4F E6 E8 E8 
31954     55 55 55 59 
31958     59 EE EF F0 
3195c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
31960     F5 F6 F7 F8 
31964     F9 FA FB FC 
31968     FD FE FF 00 
3196c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
31970     00 00 00 00 | 	byte	$00, $00, $00, $00
31974     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_close})<<20
31978     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_read})<<20
3197c     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_write})<<20
31980     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_lseek})<<20
31984     00 00 00 07 | 	long	(112 {_fatfs_cc_v_ioctl})<<20
31988     00 00 10 08 | 	long	(129 {_fatfs_cc_v_flush})<<20
3198c     00 00 00 00 
31990     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
31994     00 00 10 07 | 	long	(113 {_fatfs_cc_v_open})<<20
31998     00 00 20 07 | 	long	(114 {_fatfs_cc_v_creat})<<20
3199c     00 00 30 07 | 	long	(115 {_fatfs_cc_v_opendir})<<20
319a0     00 00 40 07 | 	long	(116 {_fatfs_cc_v_closedir})<<20
319a4     00 00 50 07 | 	long	(117 {_fatfs_cc_v_readdir})<<20
319a8     00 00 60 07 | 	long	(118 {_fatfs_cc_v_stat})<<20
319ac     00 00 70 07 | 	long	(119 {_fatfs_cc_v_mkdir})<<20
319b0     00 00 80 07 | 	long	(120 {_fatfs_cc_v_rmdir})<<20
319b4     00 00 90 07 | 	long	(121 {_fatfs_cc_v_remove})<<20
319b8     00 00 A0 07 | 	long	(122 {_fatfs_cc_v_rename})<<20
319bc     00 00 B0 07 | 	long	(123 {_fatfs_cc_v_init})<<20
319c0     00 00 C0 07 | 	long	(124 {_fatfs_cc_v_deinit})<<20
319c4     FF FF FF FF 
319c8     1F 00 00 00 
319cc     1C 00 00 00 
319d0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
319d4     1E 00 00 00 
319d8     1F 00 00 00 
319dc     1E 00 00 00 
319e0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
319e4     1F 00 00 00 
319e8     1E 00 00 00 
319ec     1F 00 00 00 
319f0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
319f4     1F 00 00 00 
319f8     00 00 00 00 
319fc     1F 00 00 00 
31a00     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
31a04     5A 00 00 00 
31a08     78 00 00 00 
31a0c     97 00 00 00 
31a10     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
31a14     D4 00 00 00 
31a18     F3 00 00 00 
31a1c     11 01 00 00 
31a20     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
31a24     4E 01 00 00 
31a28     6D 01 00 00 
31a2c     FF FF FF FF 
31a30     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
31a34     00 00 00 00 
      ...             
31a4c     00 00 00 00 
31a50     00 00 00 00 | 	byte	$00[32]
31a54     72 1A 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
31a58     76 1A 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
31a5c     00 00 00 00 
31a60     00 00 00 00 
31a64     00 00 00 00 
31a68     00 00 00 00 
31a6c     00 00       | 	byte	$00[18]
31a6e     3F 3F 3F 00 
31a72     55 43 54 00 
31a76     55 43 54 00 
31a7a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
31a7e     00 00 00 00 
31a82     00 00 00    | 	byte	$00[7]
31a85     CA 9A 3B 00 
31a89     00 00 00 01 
31a8d     01 01 01 01 
31a91     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
31a95     91 11 11 11 
31a99     11 01 01 01 
31a9d     01 01 01 01 
31aa1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
31aa5     01 01 01 01 
31aa9     01 01 01    | 	byte	$01[7]
31aac     90 20 20 20 
31ab0     20 20 20 20 
31ab4     20 20 20 20 
31ab8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
31abc     42 42 42 42 
31ac0     42 42 42 42 
31ac4     42 42       | 	byte	$42[10]
31ac6     20 20 20 20 
31aca     20 20 20    | 	byte	$20[7]
31acd     44 44 44 44 
31ad1     44 44       | 	byte	$44[6]
31ad3     04 04 04 04 
31ad7     04 04 04 04 
31adb     04 04 04 04 
31adf     04 04 04 04 
31ae3     04 04 04 04 | 	byte	$04[20]
31ae7     20 20 20 20 
31aeb     20 20       | 	byte	$20[6]
31aed     48 48 48 48 
31af1     48 48       | 	byte	$48[6]
31af3     08 08 08 08 
31af7     08 08 08 08 
31afb     08 08 08 08 
31aff     08 08 08 08 
31b03     08 08 08 08 | 	byte	$08[20]
31b07     20 20 20 20 
31b0b     01 00 00 00 
31b0f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
31b10                 | __methodtable__
31b10     4C 43 01 00 | 	long	@_do_no_command
31b14     FC D2 00 00 | 	long	@_do_plus
31b18     E8 D7 00 00 | 	long	@_do_minus
31b1c     B0 DC 00 00 | 	long	@_do_or
31b20     C8 DD 00 00 | 	long	@_do_mul
31b24     54 E3 00 00 | 	long	@_do_fdiv
31b28     98 DB 00 00 | 	long	@_do_and
31b2c     34 E1 00 00 | 	long	@_do_div
31b30     1C E5 00 00 | 	long	@_do_mod
31b34     3C E7 00 00 | 	long	@_do_shl
31b38     54 E8 00 00 | 	long	@_do_shr
31b3c     6C E9 00 00 | 	long	@_do_power
31b40     5C CD 00 00 | 	long	@_do_getvar
31b44     A8 96 00 00 | 	long	@_do_push
31b48     A4 C6 00 00 | 	long	@_do_assign
31b4c     F4 1F 01 00 | 	long	@_do_cls
31b50     D4 C0 00 00 | 	long	@_do_new
31b54     98 20 01 00 | 	long	@_do_plot
31b58     D0 21 01 00 | 	long	@_do_draw
31b5c     B8 2B 01 00 | 	long	@_do_print
31b60     B0 24 01 00 | 	long	@_do_circle
31b64     38 23 01 00 | 	long	@_do_fcircle
31b68     28 26 01 00 | 	long	@_do_box
31b6c     D0 29 01 00 | 	long	@_do_frame
31b70     60 20 01 00 | 	long	@_do_color
31b74     AC 76 00 00 | 	long	@_do_for
31b78     D8 78 00 00 | 	long	@_do_next
31b7c     38 BE 00 00 | 	long	@_do_list
31b80     F8 A6 00 00 | 	long	@_do_run
31b84     60 C5 00 00 | 	long	@_do_error
31b88     5C C2 00 00 | 	long	@_do_fast_goto
31b8c     4C C3 00 00 | 	long	@_do_find_goto
31b90     5C C5 00 00 | 	long	@_do_slow_goto
31b94     34 08 01 00 | 	long	@_do_converttoint
31b98     EC 9C 00 00 | 	long	@_test_csave
31b9c     40 A0 00 00 | 	long	@_do_save
31ba0     2C A3 00 00 | 	long	@_do_load
31ba4     84 35 01 00 | 	long	@_do_pinwrite
31ba8     24 3A 01 00 | 	long	@_do_waitms
31bac     60 3B 01 00 | 	long	@_do_waitvbl
31bb0     60 3E 01 00 | 	long	@_do_if
31bb4     44 3F 01 00 | 	long	@_do_else
31bb8     68 3F 01 00 | 	long	@_do_nothing
31bbc     34 EB 00 00 | 	long	@_do_eq
31bc0     AC F9 00 00 | 	long	@_do_ge
31bc4     84 FE 00 00 | 	long	@_do_le
31bc8     0C F0 00 00 | 	long	@_do_gt
31bcc     E4 F4 00 00 | 	long	@_do_lt
31bd0     5C 03 01 00 | 	long	@_do_ne
31bd4     10 0B 01 00 | 	long	@_do_rnd
31bd8     6C 3F 01 00 | 	long	@_do_brun
31bdc     38 42 01 00 | 	long	@_do_beep
31be0     90 3B 01 00 | 	long	@_do_dir
31be4     80 30 01 00 | 	long	@_do_paper
31be8     08 31 01 00 | 	long	@_do_ink
31bec     A4 31 01 00 | 	long	@_do_font
31bf0     20 32 01 00 | 	long	@_do_mode
31bf4     A4 41 01 00 | 	long	@_do_mouse
31bf8     8C 1F 01 00 | 	long	@_do_gettime
31bfc     D8 41 01 00 | 	long	@_do_cursor
31c00     0C 42 01 00 | 	long	@_do_click
31c04     18 1D 01 00 | 	long	@_do_mousex
31c08     5C 1D 01 00 | 	long	@_do_mousey
31c0c     E4 1D 01 00 | 	long	@_do_mousek
31c10     A0 1D 01 00 | 	long	@_do_mousew
31c14     D8 0C 01 00 | 	long	@_do_sin
31c18     44 14 01 00 | 	long	@_do_stick
31c1c     C8 15 01 00 | 	long	@_do_strig
31c20     2C 1C 01 00 | 	long	@_do_sprite
31c24     9C 18 01 00 | 	long	@_do_defsprite
31c28     4C 17 01 00 | 	long	@_do_getpixel
31c2c     6C 3B 01 00 | 	long	@_do_waitclock
31c30     58 43 01 00 | 	long	@_do_negative
31c34     28 1E 01 00 | 	long	@_do_rdpin
31c38     94 1E 01 00 | 	long	@_do_rqpin
31c3c     08 1F 01 00 | 	long	@_do_pinread
31c40     1C 38 01 00 | 	long	@_do_wrpin
31c44     9C 38 01 00 | 	long	@_do_wxpin
31c48     1C 39 01 00 | 	long	@_do_wypin
31c4c     0C 36 01 00 | 	long	@_do_pinfloat
31c50     4C 36 01 00 | 	long	@_do_pinlo
31c54     8C 36 01 00 | 	long	@_do_pinhi
31c58     0C 37 01 00 | 	long	@_do_pinstart
31c5c     CC 36 01 00 | 	long	@_do_pintoggle
31c60     9C 39 01 00 | 	long	@_do_position
31c64     E8 0D 01 00 | 	long	@_do_cos
31c68     0C 0F 01 00 | 	long	@_do_tan
31c6c     3C 12 01 00 | 	long	@_do_atn
31c70     1C 10 01 00 | 	long	@_do_asin
31c74     2C 11 01 00 | 	long	@_do_acos
31c78     54 13 01 00 | 	long	@_do_sqr
31c7c     10 28 01 00 | 	long	@_do_fill
31c80     B4 B4 00 00 | 	long	@_do_defsnd
31c84     1C AA 00 00 | 	long	@_do_defenv
31c88     84 76 01 00 | 	long	@_hg010b_spin2_putchar
31c8c     18 7B 02 00 | 	long	@__struct___bas_wrap_sender_tx
31c90     5C 7B 02 00 | 	long	@__struct___bas_wrap_sender_rx
31c94     A4 7B 02 00 | 	long	@__struct___bas_wrap_sender_close
31c98     48 7A 02 00 | 	long	@__struct__s_vfs_file_t_putchar
31c9c     B8 7A 02 00 | 	long	@__struct__s_vfs_file_t_getchar
31ca0     00 7A 02 00 | 	long	@___strs_cl_pfunc
31ca4     50 DA 01 00 | 	long	@__system____root_opendir
31ca8     EC DA 01 00 | 	long	@__system____root_closedir
31cac     68 DA 01 00 | 	long	@__system____root_readdir
31cb0     F4 DA 01 00 | 	long	@__system____root_stat
31cb4     7C D3 01 00 | 	long	@__system____default_putc
31cb8     00 D3 01 00 | 	long	@__system____default_getc
31cbc     24 D4 01 00 | 	long	@__system____default_flush
31cc0     10 65 02 00 | 	long	@_fatfs_cc_v_close
31cc4     2C 69 02 00 | 	long	@_fatfs_cc_v_read
31cc8     40 6A 02 00 | 	long	@_fatfs_cc_v_write
31ccc     20 6B 02 00 | 	long	@_fatfs_cc_v_lseek
31cd0     A8 6B 02 00 | 	long	@_fatfs_cc_v_ioctl
31cd4     FC 6B 02 00 | 	long	@_fatfs_cc_v_open
31cd8     74 64 02 00 | 	long	@_fatfs_cc_v_creat
31cdc     54 65 02 00 | 	long	@_fatfs_cc_v_opendir
31ce0     C8 65 02 00 | 	long	@_fatfs_cc_v_closedir
31ce4     08 66 02 00 | 	long	@_fatfs_cc_v_readdir
31ce8     3C 67 02 00 | 	long	@_fatfs_cc_v_stat
31cec     BC 6B 02 00 | 	long	@_fatfs_cc_v_mkdir
31cf0     DC 6B 02 00 | 	long	@_fatfs_cc_v_rmdir
31cf4     CC 6B 02 00 | 	long	@_fatfs_cc_v_remove
31cf8     EC 6B 02 00 | 	long	@_fatfs_cc_v_rename
31cfc     0C 6D 02 00 | 	long	@_fatfs_cc_v_init
31d00     14 6D 02 00 | 	long	@_fatfs_cc_v_deinit
31d04     C0 89 01 00 | 	long	@__system___tx
31d08     00 8A 01 00 | 	long	@__system___rx
31d0c     78 E5 01 00 | 	long	@__system___rxtxioctl_0573
31d10     D0 E5 01 00 | 	long	@__system____dummy_flush_0574
31d14     DC 6C 02 00 | 	long	@_fatfs_cc_v_flush
31d18                 | __heap_base
31d18     00 00 00 00 
      ...             
60b18     00 00 00 00 
60b1c     00 00 00 00 | 	long	0[48002]
60b20                 | objmem
60b20     00 00 00 00 
      ...             
6ffec     00 00 00 00 
6fff0     00 00 00 00 | 	long	0[15669]
6fff4                 | stackspace
6fff4     00 00 00 00 | 	long	0[1]
6fff8 100             | 	org	COG_BSS_START
6fff8 100             | _var01
6fff8 100             | 	res	1
6fff8 101             | _var02
6fff8 101             | 	res	1
6fff8 102             | _var03
6fff8 102             | 	res	1
6fff8 103             | _var04
6fff8 103             | 	res	1
6fff8 104             | _var05
6fff8 104             | 	res	1
6fff8 105             | _var06
6fff8 105             | 	res	1
6fff8 106             | _var07
6fff8 106             | 	res	1
6fff8 107             | _var08
6fff8 107             | 	res	1
6fff8 108             | _var09
6fff8 108             | 	res	1
6fff8 109             | arg01
6fff8 109             | 	res	1
6fff8 10a             | arg02
6fff8 10a             | 	res	1
6fff8 10b             | arg03
6fff8 10b             | 	res	1
6fff8 10c             | arg04
6fff8 10c             | 	res	1
6fff8 10d             | arg05
6fff8 10d             | 	res	1
6fff8 10e             | arg06
6fff8 10e             | 	res	1
6fff8 10f             | local01
6fff8 10f             | 	res	1
6fff8 110             | local02
6fff8 110             | 	res	1
6fff8 111             | local03
6fff8 111             | 	res	1
6fff8 112             | local04
6fff8 112             | 	res	1
6fff8 113             | local05
6fff8 113             | 	res	1
6fff8 114             | local06
6fff8 114             | 	res	1
6fff8 115             | local07
6fff8 115             | 	res	1
6fff8 116             | local08
6fff8 116             | 	res	1
6fff8 117             | local09
6fff8 117             | 	res	1
6fff8 118             | local10
6fff8 118             | 	res	1
6fff8 119             | local11
6fff8 119             | 	res	1
6fff8 11a             | local12
6fff8 11a             | 	res	1
6fff8 11b             | local13
6fff8 11b             | 	res	1
6fff8 11c             | local14
6fff8 11c             | 	res	1
6fff8 11d             | local15
6fff8 11d             | 	res	1
6fff8 11e             | local16
6fff8 11e             | 	res	1
6fff8 11f             | local17
6fff8 11f             | 	res	1
6fff8 120             | local18
6fff8 120             | 	res	1
6fff8 121             | local19
6fff8 121             | 	res	1
6fff8 122             | local20
6fff8 122             | 	res	1
6fff8 123             | local21
6fff8 123             | 	res	1
6fff8 124             | local22
6fff8 124             | 	res	1
6fff8 125             | local23
6fff8 125             | 	res	1
6fff8 126             | local24
6fff8 126             | 	res	1
6fff8 127             | local25
6fff8 127             | 	res	1
6fff8 128             | local26
6fff8 128             | 	res	1
6fff8 129             | local27
6fff8 129             | 	res	1
6fff8 12a             | local28
6fff8 12a             | 	res	1
6fff8 12b             | local29
6fff8 12b             | 	res	1
6fff8 12c             | local30
6fff8 12c             | 	res	1
6fff8 12d             | local31
6fff8 12d             | 	res	1
6fff8 12e             | local32
6fff8 12e             | 	res	1
6fff8 12f             | local33
6fff8 12f             | 	res	1
6fff8 130             | muldiva_
6fff8 130             | 	res	1
6fff8 131             | muldivb_
6fff8 131             | 	res	1
6fff8 132             | 	fit	480
6fff8 132             | 
